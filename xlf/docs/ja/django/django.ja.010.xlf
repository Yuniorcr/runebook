<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="django">
    <body>
      <group id="django">
        <trans-unit id="6468bfe1b90d6cd3667c5baf1e3e836324d1e401" translate="yes" xml:space="preserve">
          <source>Keep your &lt;a href=&quot;../ref/settings#std:setting-SECRET_KEY&quot;&gt;&lt;code&gt;SECRET_KEY&lt;/code&gt;&lt;/a&gt; a secret.</source>
          <target state="translated">&lt;a href=&quot;../ref/settings#std:setting-SECRET_KEY&quot;&gt; &lt;code&gt;SECRET_KEY&lt;/code&gt; &lt;/a&gt;を秘密にしてください。</target>
        </trans-unit>
        <trans-unit id="11bf666ca636cb39858bb367c2938c163eee182a" translate="yes" xml:space="preserve">
          <source>Keeping all user related information in one model removes the need for additional or more complex database queries to retrieve related models. On the other hand, it may be more suitable to store app-specific user information in a model that has a relation with your custom user model. That allows each app to specify its own user data requirements without potentially conflicting or breaking assumptions by other apps. It also means that you would keep your user model as simple as possible, focused on authentication, and following the minimum requirements Django expects custom user models to meet.</source>
          <target state="translated">すべてのユーザー関連情報を1つのモデルに保持することで、関連するモデルを取得するための追加またはより複雑なデータベースクエリの必要性がなくなります。一方で、アプリ固有のユーザー情報をカスタムユーザーモデルとの関係を持つモデルに格納する方がより適切な場合があります。これにより、各アプリは、他のアプリによる潜在的な矛盾や仮定を破ることなく、独自のユーザーデータ要件を指定することができます。また、ユーザーモデルを可能な限りシンプルに保ち、認証に焦点を当て、Django がカスタムユーザーモデルが満たすことを期待する最低限の要件に従うことを意味します。</target>
        </trans-unit>
        <trans-unit id="c67dd20ee842986086a0a915ddc2a279490130ed" translate="yes" xml:space="preserve">
          <source>Key</source>
          <target state="translated">Key</target>
        </trans-unit>
        <trans-unit id="8b81e1ecde65f43dd86891e55d0a4672b89353ce" translate="yes" xml:space="preserve">
          <source>Key lookups</source>
          <target state="translated">キールックアップ</target>
        </trans-unit>
        <trans-unit id="3f5fee6e0075615eacd4e89bb50cab8876b4309f" translate="yes" xml:space="preserve">
          <source>Key points to note:</source>
          <target state="translated">注意すべきポイント</target>
        </trans-unit>
        <trans-unit id="df16181be8da903a9ea0bcf833d332c01485cc71" translate="yes" xml:space="preserve">
          <source>Key, index, and path lookups</source>
          <target state="translated">キー、インデックス、パスのルックアップ</target>
        </trans-unit>
        <trans-unit id="48181c52d7a0f041d9edd4bdbc167c8eb8cb171d" translate="yes" xml:space="preserve">
          <source>Key, index, and path transforms</source>
          <target state="translated">キー、インデックス、パスの変換</target>
        </trans-unit>
        <trans-unit id="52b5e092dff22a227c99dc4ed720addb67e119e9" translate="yes" xml:space="preserve">
          <source>Keyword Argument</source>
          <target state="translated">キーワード引数</target>
        </trans-unit>
        <trans-unit id="db32172db3cd21ae36313d815fba0dd39bd7127a" translate="yes" xml:space="preserve">
          <source>Keyword Arguments</source>
          <target state="translated">キーワード引数</target>
        </trans-unit>
        <trans-unit id="b6e263b622ac66480a12aa8dc09139beb9f6e104" translate="yes" xml:space="preserve">
          <source>Keyword argument queries &amp;ndash; in &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.filter&quot;&gt;&lt;code&gt;filter()&lt;/code&gt;&lt;/a&gt;, etc. &amp;ndash; are &amp;ldquo;AND&amp;rdquo;ed together. If you need to execute more complex queries (for example, queries with &lt;code&gt;OR&lt;/code&gt; statements), you can use &lt;a href=&quot;../../ref/models/querysets#django.db.models.Q&quot;&gt;&lt;code&gt;Q objects&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.filter&quot;&gt; &lt;code&gt;filter()&lt;/code&gt; &lt;/a&gt;などのキーワード引数クエリは、「AND」演算されます。より複雑なクエリ（たとえば、 &lt;code&gt;OR&lt;/code&gt; ステートメントを使用したクエリ）を実行する必要がある場合は、&lt;a href=&quot;../../ref/models/querysets#django.db.models.Q&quot;&gt; &lt;code&gt;Q objects&lt;/code&gt; &lt;/a&gt;を使用できます。</target>
        </trans-unit>
        <trans-unit id="a0ec8760b0d3dc8d48fb4e0610ab19607da95cff" translate="yes" xml:space="preserve">
          <source>Keyword arguments allow you to change the message level, add extra CSS tags, or fail silently if the &lt;code&gt;contrib.messages&lt;/code&gt; framework is not installed. These keyword arguments match those for &lt;a href=&quot;../messages#django.contrib.messages.add_message&quot;&gt;&lt;code&gt;django.contrib.messages.add_message()&lt;/code&gt;&lt;/a&gt;, see that function&amp;rsquo;s documentation for more details. One difference is that the level may be passed as a string label in addition to integer/constant.</source>
          <target state="translated">キーワード引数を使用すると、メッセージレベルを変更したり、CSSタグを追加したり、 &lt;code&gt;contrib.messages&lt;/code&gt; フレームワークがインストールされていない場合に警告なしに失敗したりできます。これらのキーワード引数は、&lt;a href=&quot;../messages#django.contrib.messages.add_message&quot;&gt; &lt;code&gt;django.contrib.messages.add_message()&lt;/code&gt; の&lt;/a&gt;引数と一致します。詳細については、その関数のドキュメントを参照してください。1つの違いは、レベルが整数/定数に加えて文字列ラベルとして渡される可能性があることです。</target>
        </trans-unit>
        <trans-unit id="e3c047d4fa560655a4c9b137b6ae6b7f96f9bb33" translate="yes" xml:space="preserve">
          <source>Keyword arguments that can provide extra context for the SQL generated by the aggregate.</source>
          <target state="translated">アグリゲートによって生成されたSQLに追加のコンテキストを提供できるキーワード引数。</target>
        </trans-unit>
        <trans-unit id="3fa8b79bb0bea1bbd3b43612463d464bd5a74adc" translate="yes" xml:space="preserve">
          <source>Kilometre, Kilometer</source>
          <target state="translated">キロメートル、キロメートル</target>
        </trans-unit>
        <trans-unit id="4e617bafa47d9a4ed6de9204fc070360a5cc8706" translate="yes" xml:space="preserve">
          <source>KyngChaos</source>
          <target state="translated">KyngChaos</target>
        </trans-unit>
        <trans-unit id="cbc770cf346b5261fa6de79f704a15a53242cf2d" translate="yes" xml:space="preserve">
          <source>KyngChaos packages</source>
          <target state="translated">KyngChaosパッケージ</target>
        </trans-unit>
        <trans-unit id="b153eb78e99d2e3e01e42e23731bfe05df63eb8b" translate="yes" xml:space="preserve">
          <source>LJWorld.com and Lawrence.com both have email alert functionality, which lets readers sign up to get notifications when news happens. It&amp;rsquo;s pretty basic: A reader signs up on a Web form and immediately gets an email saying, &amp;ldquo;Thanks for your subscription.&amp;rdquo;</source>
          <target state="translated">LJWorld.comとLawrence.comにはどちらもメールアラート機能があり、ニュースが発生したときに読者がサインアップして通知を受け取ることができます。かなり基本的なことです。読者がWebフォームにサインアップすると、すぐに「サブスクリプションをありがとう」というメールが届きます。</target>
        </trans-unit>
        <trans-unit id="c87e855f857da475f822ad7e332f47b0210e6b27" translate="yes" xml:space="preserve">
          <source>LOB columns may not be used as primary keys.</source>
          <target state="translated">LOB列を主キーとして使用することはできません。</target>
        </trans-unit>
        <trans-unit id="f37a4fdbe1b9352a7f800671735935bf512cbbc1" translate="yes" xml:space="preserve">
          <source>LOB columns may not be used in a &lt;code&gt;SELECT DISTINCT&lt;/code&gt; list. This means that attempting to use the &lt;code&gt;QuerySet.distinct&lt;/code&gt; method on a model that includes &lt;code&gt;TextField&lt;/code&gt; columns will result in an &lt;code&gt;ORA-00932&lt;/code&gt; error when run against Oracle. As a workaround, use the &lt;code&gt;QuerySet.defer&lt;/code&gt; method in conjunction with &lt;code&gt;distinct()&lt;/code&gt; to prevent &lt;code&gt;TextField&lt;/code&gt; columns from being included in the &lt;code&gt;SELECT DISTINCT&lt;/code&gt; list.</source>
          <target state="translated">LOB列は、 &lt;code&gt;SELECT DISTINCT&lt;/code&gt; リストでは使用できません。使用しようとしていること、この手段 &lt;code&gt;QuerySet.distinct&lt;/code&gt; を含むモデルにメソッドを &lt;code&gt;TextField&lt;/code&gt; 列がになります &lt;code&gt;ORA-00932&lt;/code&gt; のOracleに対して実行すると、エラー。回避策として、 &lt;code&gt;QuerySet.defer&lt;/code&gt; メソッドを &lt;code&gt;distinct()&lt;/code&gt; と組み合わせて使用して、 &lt;code&gt;TextField&lt;/code&gt; 列が &lt;code&gt;SELECT DISTINCT&lt;/code&gt; リストに含まれないようにします。</target>
        </trans-unit>
        <trans-unit id="23aa061f34d8daee01c85141530845ac93ba30f7" translate="yes" xml:space="preserve">
          <source>LOB columns may not be used in indexes.</source>
          <target state="translated">LOB列はインデックスでは使用できません。</target>
        </trans-unit>
        <trans-unit id="2f0d617fe578d453561df393b035a56559df8484" translate="yes" xml:space="preserve">
          <source>LOCALE_PATHS, LANGUAGE_CODE</source>
          <target state="translated">LOCALE_PATHS、LANGUAGE_CODE</target>
        </trans-unit>
        <trans-unit id="ba9dfe5041cd205445df5b843e8a9dc628256415" translate="yes" xml:space="preserve">
          <source>Lambdas</source>
          <target state="translated">Lambdas</target>
        </trans-unit>
        <trans-unit id="89b86ab0e66f527166d98df92ddbcf5416ed58f6" translate="yes" xml:space="preserve">
          <source>Language</source>
          <target state="translated">Language</target>
        </trans-unit>
        <trans-unit id="15cf7920bc40aa026228a895b90198998e1c661b" translate="yes" xml:space="preserve">
          <source>Language cookie</source>
          <target state="translated">言語クッキー</target>
        </trans-unit>
        <trans-unit id="e2313e70fc3b44edd797d4ee37ae99cf5b536f9e" translate="yes" xml:space="preserve">
          <source>Language prefix in URL patterns</source>
          <target state="translated">URL パターンの言語プレフィックス</target>
        </trans-unit>
        <trans-unit id="d5706fe49707b39d9d0ba70c9ad9195dbfd8428b" translate="yes" xml:space="preserve">
          <source>Large directories with many files may cause performance issues</source>
          <target state="translated">多くのファイルを持つ大きなディレクトリでは、パフォーマンスの問題が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="66a2147848cda23e4068f8ecbe6f03cd2754422c" translate="yes" xml:space="preserve">
          <source>Lastly, your check function must be registered explicitly with system check registry. Checks should be registered in a file that&amp;rsquo;s loaded when your application is loaded; for example, in the &lt;a href=&quot;../ref/applications#django.apps.AppConfig.ready&quot;&gt;&lt;code&gt;AppConfig.ready()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">最後に、チェック関数をシステムチェックレジストリに明示的に登録する必要があります。チェックは、アプリケーションのロード時にロードされるファイルに登録する必要があります。たとえば、&lt;a href=&quot;../ref/applications#django.apps.AppConfig.ready&quot;&gt; &lt;code&gt;AppConfig.ready()&lt;/code&gt; &lt;/a&gt;メソッドで。</target>
        </trans-unit>
        <trans-unit id="ccbd0691e5899de74565a225b47115af7e41eb95" translate="yes" xml:space="preserve">
          <source>Later on we use the term &lt;em&gt;packaging&lt;/em&gt; to describe the process of making a Python package easy for others to install. It can be a little confusing, we know.</source>
          <target state="translated">後で&lt;em&gt;パッケージ&lt;/em&gt;化という用語を使用して、Pythonパッケージを他の人が簡単にインストールできるようにするプロセスを説明します。少しわかりにくいかもしれません。</target>
        </trans-unit>
        <trans-unit id="bf20c881e0dc069882fc7e5d606a7b61cb53816e" translate="yes" xml:space="preserve">
          <source>LayerMapping data import utility</source>
          <target state="translated">LayerMapping データインポートユーティリティ</target>
        </trans-unit>
        <trans-unit id="6eb48363145bff612fcd9f60ac338f08d9514585" translate="yes" xml:space="preserve">
          <source>Laziness allows us to refer to things before they are instantiated, or even before it&amp;rsquo;s possible to instantiate them. This has numerous uses.</source>
          <target state="translated">怠惰を使用すると、インスタンス化する前、またはインスタンス化する前に参照することができます。これには多くの用途があります。</target>
        </trans-unit>
        <trans-unit id="7306ad109bfe4aa0d559571e47ed10b95c1acd7e" translate="yes" xml:space="preserve">
          <source>Laziness in Django</source>
          <target state="translated">Django の怠惰</target>
        </trans-unit>
        <trans-unit id="9db8ab131c503038349926561b42c112352a10ec" translate="yes" xml:space="preserve">
          <source>Laziness is also a way to save effort by trying to avoid work in the first place. That is, one aspect of laziness is not doing anything until it has to be done, because it may not turn out to be necessary after all. Laziness can therefore have performance implications, and the more expensive the work concerned, the more there is to gain through laziness.</source>
          <target state="translated">怠惰とは、そもそも仕事を避けようとすることで労力を節約することでもあります。つまり、怠惰の一面は、やらなければならないまで何もしないことである。したがって、怠惰はパフォーマンスに影響を与える可能性があり、関係する仕事が高価であればあるほど、怠惰によって得るものは多くなります。</target>
        </trans-unit>
        <trans-unit id="ba6579907e4a7f45362bf94f354f36722b584440" translate="yes" xml:space="preserve">
          <source>Lazy Geometries</source>
          <target state="translated">怠惰な幾何学</target>
        </trans-unit>
        <trans-unit id="5da11f4eec7970e01e777c79bbd1f868cda4bd15" translate="yes" xml:space="preserve">
          <source>Lazy translation</source>
          <target state="translated">怠惰な翻訳</target>
        </trans-unit>
        <trans-unit id="3d6bad0f45a94e2a01930bb1020eff0a76e76f44" translate="yes" xml:space="preserve">
          <source>Lazy translations and plural</source>
          <target state="translated">怠惰な翻訳と複数形</target>
        </trans-unit>
        <trans-unit id="9b1f34a5739405246bd9919b678f713ac631fed7" translate="yes" xml:space="preserve">
          <source>Learn about some other core functionalities of the Django framework:</source>
          <target state="translated">Django フレームワークの他のコア機能について学びましょう。</target>
        </trans-unit>
        <trans-unit id="ef1ab011ef2c624e2c7031f6c7a9d37cc55f1cf3" translate="yes" xml:space="preserve">
          <source>Learn about the development process for the Django project itself and about how you can contribute:</source>
          <target state="translated">Django プロジェクト自体の開発プロセスと、どのように貢献できるかについて学びましょう。</target>
        </trans-unit>
        <trans-unit id="2f3354aecddee7d995b534cf8538581af1f6c203" translate="yes" xml:space="preserve">
          <source>Learn about the various components and tools to help you in the development and testing of Django applications:</source>
          <target state="translated">Django アプリケーションの開発とテストに役立つ様々なコンポーネントやツールについて学びましょう。</target>
        </trans-unit>
        <trans-unit id="824d76b124e6289f372e2ff6bcba91e8939343bd" translate="yes" xml:space="preserve">
          <source>Learn more</source>
          <target state="translated">詳細はこちら</target>
        </trans-unit>
        <trans-unit id="f1ab6cb67a17a1c6e360ed241bd2dda3b974e3d3" translate="yes" xml:space="preserve">
          <source>Learns what headers to take into account for some request path from the response object. It stores those headers in a global path registry so that later access to that path will know what headers to take into account without building the response object itself. The headers are named in the &lt;code&gt;Vary&lt;/code&gt; header of the response, but we want to prevent response generation.</source>
          <target state="translated">応答オブジェクトからのいくつかの要求パスで考慮に入れるヘッダーを学習します。これらのヘッダーはグローバルパスレジストリに保存されるため、後でそのパスにアクセスしても、応答オブジェクト自体を構築せずに、どのヘッダーを考慮に入れるかがわかります。ヘッダーは応答の &lt;code&gt;Vary&lt;/code&gt; ヘッダーで名前が付けられますが、応答の生成を防止したいと考えています。</target>
        </trans-unit>
        <trans-unit id="09777de5be0a68a212ac9f63799746f9d808d38b" translate="yes" xml:space="preserve">
          <source>Leaving this setting off isn&amp;rsquo;t a good idea because an attacker could capture an unencrypted session cookie with a packet sniffer and use the cookie to hijack the user&amp;rsquo;s session.</source>
          <target state="translated">攻撃者がパケットスニファーで暗号化されていないセッションCookieをキャプチャし、そのCookieを使用してユーザーのセッションを乗っ取る可能性があるため、この設定をオフのままにすることはお勧めできません。</target>
        </trans-unit>
        <trans-unit id="083e90c2b3005bc225a03c2abdf03d369325f963" translate="yes" xml:space="preserve">
          <source>Left-aligns the value in a field of a given width.</source>
          <target state="translated">指定した幅のフィールド内の値を左揃えにします。</target>
        </trans-unit>
        <trans-unit id="a02227b0f0b9337ad694cb0213155cb14a60b4fc" translate="yes" xml:space="preserve">
          <source>Less than or equal to.</source>
          <target state="translated">以下である。</target>
        </trans-unit>
        <trans-unit id="73c669caad45b8802c1bb872ff0703e13b665fba" translate="yes" xml:space="preserve">
          <source>Less than or equal to. Example:</source>
          <target state="translated">以下であること。例を挙げてみます。</target>
        </trans-unit>
        <trans-unit id="40d2a5fe11e0306023d56f6e8912a222594ed047" translate="yes" xml:space="preserve">
          <source>Less than.</source>
          <target state="translated">未満。</target>
        </trans-unit>
        <trans-unit id="96c4349122b9bb7576d0d61f7a88e8edd3726822" translate="yes" xml:space="preserve">
          <source>Less than. Example:</source>
          <target state="translated">未満である。例。</target>
        </trans-unit>
        <trans-unit id="c841a65c7f1c3eccf8b28668b87263bfc640fcff" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s also add a custom method to this model:</source>
          <target state="translated">このモデルにカスタムメソッドを追加してみましょう。</target>
        </trans-unit>
        <trans-unit id="8c13e4563c320f96f46850c604f3f010e32fc04d" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s assume you have a blog system, with an &lt;code&gt;Entry&lt;/code&gt; model, and you want your sitemap to include all the links to your individual blog entries. Here&amp;rsquo;s how your sitemap class might look:</source>
          <target state="translated">&lt;code&gt;Entry&lt;/code&gt; モデルを備えたブログシステムがあり、サイトマップに個々のブログエントリーへのすべてのリンクを含めたいとします。サイトマップクラスは次のようになります。</target>
        </trans-unit>
        <trans-unit id="1c225b116fcb368350be69537d8c022103cd45ec" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s convert our poll app to use the generic views system, so we can delete a bunch of our own code. We&amp;rsquo;ll have to take a few steps to make the conversion. We will:</source>
          <target state="translated">投票アプリを汎用ビューシステムを使用するように変換して、独自のコードの束を削除できるようにします。変換するには、いくつかの手順を実行する必要があります。私達はします：</target>
        </trans-unit>
        <trans-unit id="37107c1b14b06985400cce64f2c0cee8e51e7116" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s create a &lt;code&gt;ContactForm&lt;/code&gt; to demonstrate how you&amp;rsquo;d use this field:</source>
          <target state="translated">&lt;code&gt;ContactForm&lt;/code&gt; を作成して、このフィールドの使用方法を示します。</target>
        </trans-unit>
        <trans-unit id="fc48aeca8eda2b4682b3d6e61de76f5755e853cc" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s dive right in. Create a file called &lt;code&gt;admin.py&lt;/code&gt; inside the &lt;code&gt;world&lt;/code&gt; application with the following code:</source>
          <target state="translated">&lt;code&gt;admin.py&lt;/code&gt; みましょう。次のコードを使用して、 &lt;code&gt;world&lt;/code&gt; アプリケーション内にadmin.pyというファイルを作成します。</target>
        </trans-unit>
        <trans-unit id="79da13085a3608464e32b76daf1a4b750cb3a395" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s examine case-insensitive transformations here. This transformation isn&amp;rsquo;t very useful in practice as Django already comes with a bunch of built-in case-insensitive lookups, but it will be a nice demonstration of bilateral transformations in a database-agnostic way.</source>
          <target state="translated">ここでは、大文字と小文字を区別しない変換を調べてみましょう。Djangoにはすでに大文字と小文字を区別しない組み込みのルックアップが多数付属しているため、この変換は実際にはあまり役に立ちませんが、データベースにとらわれない方法での双方向変換の優れたデモンストレーションになります。</target>
        </trans-unit>
        <trans-unit id="00c7bb390f8a74d36b4ee2f29857af8f287892c8" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s first create a custom form field that validates its input is a string containing comma-separated email addresses. The full class looks like this:</source>
          <target state="translated">まず、入力がコンマ区切りの電子メールアドレスを含む文字列であることを検証するカスタムフォームフィールドを作成しましょう。完全なクラスは次のようになります。</target>
        </trans-unit>
        <trans-unit id="187a2d21db52b3e5410be8c2a3c86fdac14a40b4" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s learn by example.</source>
          <target state="translated">例で学びましょう。</target>
        </trans-unit>
        <trans-unit id="1fb3c9be87e64709bf5f0c1265d580cb8272df73" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s look at an example to see how this works. If you already have the &lt;a href=&quot;#module-django.contrib.contenttypes&quot;&gt;&lt;code&gt;contenttypes&lt;/code&gt;&lt;/a&gt; application installed, and then add &lt;a href=&quot;sites#module-django.contrib.sites&quot;&gt;&lt;code&gt;the sites application&lt;/code&gt;&lt;/a&gt; to your &lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; setting and run &lt;code&gt;manage.py migrate&lt;/code&gt; to install it, the model &lt;a href=&quot;sites#django.contrib.sites.models.Site&quot;&gt;&lt;code&gt;django.contrib.sites.models.Site&lt;/code&gt;&lt;/a&gt; will be installed into your database. Along with it a new instance of &lt;a href=&quot;#django.contrib.contenttypes.models.ContentType&quot;&gt;&lt;code&gt;ContentType&lt;/code&gt;&lt;/a&gt; will be created with the following values:</source>
          <target state="translated">これがどのように機能するかを確認するために例を見てみましょう。&lt;a href=&quot;#module-django.contrib.contenttypes&quot;&gt; &lt;code&gt;contenttypes&lt;/code&gt; &lt;/a&gt;アプリケーションがすでにインストールされている場合&lt;a href=&quot;sites#module-django.contrib.sites&quot;&gt; &lt;code&gt;the sites application&lt;/code&gt; &lt;/a&gt;を&lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt;設定に追加し、 &lt;code&gt;manage.py migrate&lt;/code&gt; を実行してインストールすると、モデル&lt;a href=&quot;sites#django.contrib.sites.models.Site&quot;&gt; &lt;code&gt;django.contrib.sites.models.Site&lt;/code&gt; &lt;/a&gt;がデータベースにインストールされます。それとともに、&lt;a href=&quot;#django.contrib.contenttypes.models.ContentType&quot;&gt; &lt;code&gt;ContentType&lt;/code&gt; の&lt;/a&gt;新しいインスタンスが次の値で作成されます。</target>
        </trans-unit>
        <trans-unit id="b482ca18f2f08a83d3ec431b921de771f9948555" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s look at how two of Django&amp;rsquo;s generic class-based views are built out of mixins providing discrete functionality. We&amp;rsquo;ll consider &lt;a href=&quot;../../ref/class-based-views/generic-display#django.views.generic.detail.DetailView&quot;&gt;&lt;code&gt;DetailView&lt;/code&gt;&lt;/a&gt;, which renders a &amp;ldquo;detail&amp;rdquo; view of an object, and &lt;a href=&quot;../../ref/class-based-views/generic-display#django.views.generic.list.ListView&quot;&gt;&lt;code&gt;ListView&lt;/code&gt;&lt;/a&gt;, which will render a list of objects, typically from a queryset, and optionally paginate them. This will introduce us to four mixins which between them provide useful functionality when working with either a single Django object, or multiple objects.</source>
          <target state="translated">Djangoの2つの汎用クラスベースビューが、個別の機能を提供するミックスインからどのように構築されるかを見てみましょう。オブジェクトの「詳細」ビューをレンダリングする&lt;a href=&quot;../../ref/class-based-views/generic-display#django.views.generic.detail.DetailView&quot;&gt; &lt;code&gt;DetailView&lt;/code&gt; と&lt;/a&gt;、通常はクエリセットからのオブジェクトのリストをレンダリングし、オプションでそれらをページ分割する&lt;a href=&quot;../../ref/class-based-views/generic-display#django.views.generic.list.ListView&quot;&gt; &lt;code&gt;ListView&lt;/code&gt; &lt;/a&gt;を検討します。これは、単一のDjangoオブジェクトまたは複数のオブジェクトのいずれかを操作するときに便利な機能を提供する4つのミックスインを紹介します。</target>
        </trans-unit>
        <trans-unit id="ffefad313aa5954a7172dc72b1d07b889da725a8" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s look at some of these more closely.</source>
          <target state="translated">これらのいくつかをさらに詳しく見てみましょう。</target>
        </trans-unit>
        <trans-unit id="010769fda27e004183327e34d1bc70963b10f512" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s look at template inheritance by starting with an example:</source>
          <target state="translated">例から始めて、テンプレートの継承を見てみましょう。</target>
        </trans-unit>
        <trans-unit id="55d7d95000f7a31233733941186d880e813c5ba9" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s look at the SQL that will generate the table for the &lt;code&gt;WorldBorder&lt;/code&gt; model:</source>
          <target state="translated">&lt;code&gt;WorldBorder&lt;/code&gt; モデルのテーブルを生成するSQLを見てみましょう。</target>
        </trans-unit>
        <trans-unit id="a58cc92a0a67b5a9a26020d7c3a1539bddac1b9c" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s look at what &lt;a href=&quot;../ref/django-admin#django-admin-startproject&quot;&gt;&lt;code&gt;startproject&lt;/code&gt;&lt;/a&gt; created:</source>
          <target state="translated">&lt;a href=&quot;../ref/django-admin#django-admin-startproject&quot;&gt; &lt;code&gt;startproject&lt;/code&gt; が&lt;/a&gt;作成したものを見てみましょう：</target>
        </trans-unit>
        <trans-unit id="f0916a74a448227e847bd0ae1c7a1ee8b3a78ac6" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s refactor our &lt;code&gt;CycleNode&lt;/code&gt; implementation to use the &lt;code&gt;render_context&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;render_context&lt;/code&gt; を使用するように &lt;code&gt;CycleNode&lt;/code&gt; 実装をリファクタリングしましょう：</target>
        </trans-unit>
        <trans-unit id="61527bb6f9f99fa92fe94f8a54144255e683d9a4" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s reproduce this error by comparing a naive and an aware datetime:</source>
          <target state="translated">ナイーブとアウェアな日時を比較して、このエラーを再現しましょう。</target>
        </trans-unit>
        <trans-unit id="b6172a55db4a398066cf2f300f7a317aae4b91ea" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s say the &lt;code&gt;news/year_archive.html&lt;/code&gt; template was found. Here&amp;rsquo;s what that might look like:</source>
          <target state="translated">&lt;code&gt;news/year_archive.html&lt;/code&gt; テンプレートが見つかったとしましょう。これは次のようになります。</target>
        </trans-unit>
        <trans-unit id="c8498358e4e316a59220a51bcfc584545251953d" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s say we want to change the &lt;code&gt;account_type&lt;/code&gt; for our clients to match their registration dates. We can do this using a conditional expression and the &lt;a href=&quot;querysets#django.db.models.query.QuerySet.update&quot;&gt;&lt;code&gt;update()&lt;/code&gt;&lt;/a&gt; method:</source>
          <target state="translated">クライアントの &lt;code&gt;account_type&lt;/code&gt; を登録日と一致するように変更するとします。これを行うには、条件式と&lt;a href=&quot;querysets#django.db.models.query.QuerySet.update&quot;&gt; &lt;code&gt;update()&lt;/code&gt; &lt;/a&gt;メソッドを使用します。</target>
        </trans-unit>
        <trans-unit id="674775ae6b8f711b93b934fc943f13569ff5e193" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s say we&amp;rsquo;re writing a backend for Microsoft&amp;rsquo;s SQL Server which uses the SQL &lt;code&gt;LEN&lt;/code&gt; instead of &lt;code&gt;LENGTH&lt;/code&gt; for the &lt;a href=&quot;database-functions#django.db.models.functions.Length&quot;&gt;&lt;code&gt;Length&lt;/code&gt;&lt;/a&gt; function. We&amp;rsquo;ll monkey patch a new method called &lt;code&gt;as_sqlserver()&lt;/code&gt; onto the &lt;code&gt;Length&lt;/code&gt; class:</source>
          <target state="translated">我々はSQL使用して、MicrosoftのSQL Serverのバックエンド書いているとしましょう &lt;code&gt;LEN&lt;/code&gt; を代わりに &lt;code&gt;LENGTH&lt;/code&gt; のための&lt;a href=&quot;database-functions#django.db.models.functions.Length&quot;&gt; &lt;code&gt;Length&lt;/code&gt; &lt;/a&gt;の関数を。私たちは、猿と呼ばれる新しい方法にパッチます &lt;code&gt;as_sqlserver()&lt;/code&gt; に &lt;code&gt;Length&lt;/code&gt; クラス：</target>
        </trans-unit>
        <trans-unit id="9fbadd9a8d68743fcc57b910b725e2c6420e8e5f" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s say you were starting a new project that needed a polls app like the one we&amp;rsquo;ve been working on. How do you make this app reusable? Luckily, you&amp;rsquo;re well on the way already. In &lt;a href=&quot;tutorial01&quot;&gt;Tutorial 1&lt;/a&gt;, we saw how we could decouple polls from the project-level URLconf using an &lt;code&gt;include&lt;/code&gt;. In this tutorial, we&amp;rsquo;ll take further steps to make the app easy to use in new projects and ready to publish for others to install and use.</source>
          <target state="translated">私たちが取り組んでいるような投票アプリを必要とする新しいプロジェクトを始めていたとしましょう。このアプリをどのように再利用可能にしますか？幸いなことに、あなたはすでに順調です。では&lt;a href=&quot;tutorial01&quot;&gt;チュートリアル1&lt;/a&gt;、我々は我々が使用してプロジェクトレベルのURLconfからポーリングを切り離すことができるか見ました &lt;code&gt;include&lt;/code&gt; 。このチュートリアルでは、新しいプロジェクトでアプリを使いやすくし、他のユーザーがインストールして使用できるように公開する準備ができるように、さらにステップを踏みます。</target>
        </trans-unit>
        <trans-unit id="f4547f3c6ed9ab627755ced07c0ef98ea5492c5d" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s say you&amp;rsquo;re developing your Django application and have a &amp;ldquo;pristine&amp;rdquo; copy of a database that you&amp;rsquo;d like to interact with. You can dump your database to a fixture (using the &lt;a href=&quot;#django-admin-dumpdata&quot;&gt;&lt;code&gt;dumpdata&lt;/code&gt;&lt;/a&gt; command, explained above), then use &lt;code&gt;testserver&lt;/code&gt; to run your Web application with that data. With this arrangement, you have the flexibility of messing up your data in any way, knowing that whatever data changes you&amp;rsquo;re making are only being made to a test database.</source>
          <target state="translated">Djangoアプリケーションを開発していて、やり取りしたいデータベースの「元の」コピーがあるとします。データベースをフィクスチャにダンプし（前述の&lt;a href=&quot;#django-admin-dumpdata&quot;&gt; &lt;code&gt;dumpdata&lt;/code&gt; &lt;/a&gt;コマンドを使用）、 &lt;code&gt;testserver&lt;/code&gt; を使用してそのデータでWebアプリケーションを実行できます。この配置により、データの変更がテストデータベースに対してのみ行われていることを認識して、データをなんらかの方法で変更できる柔軟性があります。</target>
        </trans-unit>
        <trans-unit id="3e592833b5543bdeb8888157baa74642a61fc297" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s say you&amp;rsquo;re trying to override the templates for a third-party application called &lt;code&gt;blog&lt;/code&gt;, which provides the templates &lt;code&gt;blog/post.html&lt;/code&gt; and &lt;code&gt;blog/list.html&lt;/code&gt;. The relevant settings for your project would look like:</source>
          <target state="translated">テンプレート &lt;code&gt;blog/post.html&lt;/code&gt; と &lt;code&gt;blog/list.html&lt;/code&gt; を提供する &lt;code&gt;blog&lt;/code&gt; と呼ばれるサードパーティアプリケーションのテンプレートを上書きしようとしているとしましょう。プロジェクトに関連する設定は次のようになります。</target>
        </trans-unit>
        <trans-unit id="4a78da4f0f96ccaa8818c94601b3d212850c1086" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s see how it works:</source>
          <target state="translated">それがどのように機能するか見てみましょう：</target>
        </trans-unit>
        <trans-unit id="e06a71efa03ee78ba69e395440cf513c47c8c2b5" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s see how this works by registering a signal that gets called after each HTTP request is finished. We&amp;rsquo;ll be connecting to the &lt;a href=&quot;../ref/signals#django.core.signals.request_finished&quot;&gt;&lt;code&gt;request_finished&lt;/code&gt;&lt;/a&gt; signal.</source>
          <target state="translated">各HTTPリクエストが完了した後に呼び出されるシグナルを登録することで、これがどのように機能するかを見てみましょう。&lt;a href=&quot;../ref/signals#django.core.signals.request_finished&quot;&gt; &lt;code&gt;request_finished&lt;/code&gt; &lt;/a&gt;シグナルに接続します。</target>
        </trans-unit>
        <trans-unit id="febf35219c9a28beaf6a9acbff3a5277afa2d816" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s see how this works by reordering the fields on the edit form. Replace the &lt;code&gt;admin.site.register(Question)&lt;/code&gt; line with:</source>
          <target state="translated">編集フォームのフィールドを並べ替えて、これがどのように機能するかを見てみましょう。 &lt;code&gt;admin.site.register(Question)&lt;/code&gt; の行を次で置き換えます。</target>
        </trans-unit>
        <trans-unit id="6404ea57f576d05b9c8fbca7fa5c5d63fa43f83f" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s start by looking at some examples of showing a list of objects or an individual object.</source>
          <target state="translated">オブジェクトのリストまたは個々のオブジェクトを表示するいくつかの例を見てみましょう。</target>
        </trans-unit>
        <trans-unit id="1551f600d211b9d0023bac9d0cb4fadb9a4233e4" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s start with a small custom lookup. We will write a custom lookup &lt;code&gt;ne&lt;/code&gt; which works opposite to &lt;code&gt;exact&lt;/code&gt;. &lt;code&gt;Author.objects.filter(name__ne='Jack')&lt;/code&gt; will translate to the SQL:</source>
          <target state="translated">小さなカスタムルックアップから始めましょう。私たちは、カスタムのルックアップ書きます &lt;code&gt;ne&lt;/code&gt; と反対に動作 &lt;code&gt;exact&lt;/code&gt; 。 &lt;code&gt;Author.objects.filter(name__ne='Jack')&lt;/code&gt; はSQLに変換されます：</target>
        </trans-unit>
        <trans-unit id="423531172bf446e55a2e04f7a1a96cecf1db8ece" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s start with model fields. If you break it down, a model field provides a way to take a normal Python object &amp;ndash; string, boolean, &lt;code&gt;datetime&lt;/code&gt;, or something more complex like &lt;code&gt;Hand&lt;/code&gt; &amp;ndash; and convert it to and from a format that is useful when dealing with the database. (Such a format is also useful for serialization, but as we&amp;rsquo;ll see later, that is easier once you have the database side under control).</source>
          <target state="translated">モデルフィールドから始めましょう。分解すると、モデルフィールドは、通常のPythonオブジェクト（文字列、ブール値、 &lt;code&gt;datetime&lt;/code&gt; 、または &lt;code&gt;Hand&lt;/code&gt; などのより複雑なもの）を取得し、データベースを処理するときに役立つ形式との間で変換する方法を提供します。（このような形式はシリアル化にも役立ちますが、後で説明するように、データベース側を制御すれば、より簡単になります）。</target>
        </trans-unit>
        <trans-unit id="6f46797d9a8d056443aa92c8f4619748862100fb" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s step through this code one line at a time:</source>
          <target state="translated">このコードを1行ずつステップ実行してみましょう。</target>
        </trans-unit>
        <trans-unit id="94aa51d90972b01afb689b3d1a89d3eb901bb673" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s take a look inside a couple of those files:</source>
          <target state="translated">それらのファイルのいくつかの内部を見てみましょう：</target>
        </trans-unit>
        <trans-unit id="bccd1c870a0a4dcf400d08d947411ab954b771e6" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s try this with an example. Normally, one might do something like this:</source>
          <target state="translated">例を挙げて試してみましょう。通常、このようなことをするかもしれません：</target>
        </trans-unit>
        <trans-unit id="504babc6e275812ba81c4391fb57ae519e3510d7" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s try with some invalid data. In this case, &lt;code&gt;subject&lt;/code&gt; is blank (an error, because all fields are required by default) and &lt;code&gt;sender&lt;/code&gt; is not a valid email address:</source>
          <target state="translated">無効なデータを試してみましょう。この場合、 &lt;code&gt;subject&lt;/code&gt; は空白であり（デフォルトではすべてのフィールドが必須であるためエラー）、 &lt;code&gt;sender&lt;/code&gt; は有効なメールアドレスではありません。</target>
        </trans-unit>
        <trans-unit id="c2190c9fc23eb29106134f7ad4a9ace95beaf6b8" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s update our poll detail template (&amp;ldquo;polls/detail.html&amp;rdquo;) from the last tutorial, so that the template contains an HTML &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; element:</source>
          <target state="translated">前回のチュートリアルの投票詳細テンプレート（&amp;ldquo; polls / detail.html&amp;rdquo;）を更新して、テンプレートにHTML &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; 要素が含まれるようにします。</target>
        </trans-unit>
        <trans-unit id="2632c1e8aa342b4a8b2b77fdaa7894b3813e8647" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s verify your Django project works. Change into the outer &lt;code&gt;mysite&lt;/code&gt; directory, if you haven&amp;rsquo;t already, and run the following commands:</source>
          <target state="translated">Djangoプロジェクトが機能することを確認しましょう。外側への変更 &lt;code&gt;mysite&lt;/code&gt; ディレクトリ、あなたはまだ持っていないし、次のコマンドを実行する場合：</target>
        </trans-unit>
        <trans-unit id="7481c3803bbb2daeb5381bc49b0b54a65124b8cb" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s walk through this example. &lt;code&gt;{% regroup %}&lt;/code&gt; takes three arguments: the list you want to regroup, the attribute to group by, and the name of the resulting list. Here, we&amp;rsquo;re regrouping the &lt;code&gt;cities&lt;/code&gt; list by the &lt;code&gt;country&lt;/code&gt; attribute and calling the result &lt;code&gt;country_list&lt;/code&gt;.</source>
          <target state="translated">この例を見てみましょう。 &lt;code&gt;{% regroup %}&lt;/code&gt; は3つの引数を取ります。再グループ化するリスト、グループ化する属性、および結果のリストの名前です。ここでは、 &lt;code&gt;country&lt;/code&gt; 属性で &lt;code&gt;cities&lt;/code&gt; リストを再グループ化し、結果として &lt;code&gt;country_list&lt;/code&gt; を呼び出しています。</target>
        </trans-unit>
        <trans-unit id="dd3cf48e50eddc3fba400217aaf336f782eaf8e5" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s write a migration that populates our new &lt;code&gt;name&lt;/code&gt; field with the combined values of &lt;code&gt;first_name&lt;/code&gt; and &lt;code&gt;last_name&lt;/code&gt; (we&amp;rsquo;ve come to our senses and realized that not everyone has first and last names). All we need to do is use the historical model and iterate over the rows:</source>
          <target state="translated">新しい &lt;code&gt;name&lt;/code&gt; フィールドに &lt;code&gt;first_name&lt;/code&gt; と &lt;code&gt;last_name&lt;/code&gt; を組み合わせた値を入力するマイグレーションを作成してみましょう（私たちは理解しましたが、誰もが姓名を持っているわけではありません）。必要なのは、履歴モデルを使用して行を反復処理することだけです。</target>
        </trans-unit>
        <trans-unit id="36bb27cf6e20079aabce85127956f8d966f68f12" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s write the first view. Open the file &lt;code&gt;polls/views.py&lt;/code&gt; and put the following Python code in it:</source>
          <target state="translated">最初のビューを書いてみましょう。ファイル &lt;code&gt;polls/views.py&lt;/code&gt; を開き、次のPythonコードを挿入します。</target>
        </trans-unit>
        <trans-unit id="8f407590b229000b90afe5cd5954958752ddd121" translate="yes" xml:space="preserve">
          <source>Lets you create a formset with the ability to order:</source>
          <target state="translated">注文機能を備えたフォームセットを作成することができます。</target>
        </trans-unit>
        <trans-unit id="c02187affceb445e9305a60658d3c066c7db16fa" translate="yes" xml:space="preserve">
          <source>Lets you create a formset with the ability to select forms for deletion:</source>
          <target state="translated">削除するフォームを選択する機能を持つフォームセットを作成できます。</target>
        </trans-unit>
        <trans-unit id="f556c30e0a0e7632f1adaf69376f9c9a698f371c" translate="yes" xml:space="preserve">
          <source>Lets you pass a command as a string to execute it as Django, like so:</source>
          <target state="translated">コマンドを文字列として渡すことで、Django のようにコマンドを実行することができます。</target>
        </trans-unit>
        <trans-unit id="df65069d0885fd61cd4c2cc0c08459bf7ec10caa" translate="yes" xml:space="preserve">
          <source>Lets you specify the URL that users who don&amp;rsquo;t pass the test will be redirected to. It may be a login page and defaults to &lt;a href=&quot;../../ref/settings#std:setting-LOGIN_URL&quot;&gt;&lt;code&gt;settings.LOGIN_URL&lt;/code&gt;&lt;/a&gt; if you don&amp;rsquo;t specify one.</source>
          <target state="translated">テストに合格しなかったユーザーがリダイレクトされるURLを指定できます。ログインページである可能性があり、指定しない場合はデフォルトで&lt;a href=&quot;../../ref/settings#std:setting-LOGIN_URL&quot;&gt; &lt;code&gt;settings.LOGIN_URL&lt;/code&gt; に&lt;/a&gt;なります。</target>
        </trans-unit>
        <trans-unit id="ca7f7f5bed464663e88c2d9517ab5e284fa91f09" translate="yes" xml:space="preserve">
          <source>Level Constant</source>
          <target state="translated">レベル定数</target>
        </trans-unit>
        <trans-unit id="b954a0887add52752e06674c9d7013c57e040fe0" translate="yes" xml:space="preserve">
          <source>Libraries can be loaded by passing the corresponding dictionary key to the &lt;a href=&quot;../ref/templates/builtins#std:templatetag-load&quot;&gt;&lt;code&gt;{% load %}&lt;/code&gt;&lt;/a&gt; tag.</source>
          <target state="translated">ライブラリは、対応する辞書キーを&lt;a href=&quot;../ref/templates/builtins#std:templatetag-load&quot;&gt; &lt;code&gt;{% load %}&lt;/code&gt; &lt;/a&gt;タグに渡すことでロードできます。</target>
        </trans-unit>
        <trans-unit id="29808eb5cb44255de14dac59aefcc411b6547528" translate="yes" xml:space="preserve">
          <source>Libraries can be loaded by passing the corresponding dictionary key to the &lt;a href=&quot;builtins#std:templatetag-load&quot;&gt;&lt;code&gt;{% load %}&lt;/code&gt;&lt;/a&gt; tag.</source>
          <target state="translated">ライブラリは、対応する辞書キーを&lt;a href=&quot;builtins#std:templatetag-load&quot;&gt; &lt;code&gt;{% load %}&lt;/code&gt; &lt;/a&gt;タグに渡すことでロードできます。</target>
        </trans-unit>
        <trans-unit id="0b3f991e900143285adef8fbb526e8ab6f02c275" translate="yes" xml:space="preserve">
          <source>Library Requirements</source>
          <target state="translated">ライブラリの要件</target>
        </trans-unit>
        <trans-unit id="ac58e4217af56e3a1ba8bec5e4dcc9685aa92add" translate="yes" xml:space="preserve">
          <source>Library environment settings</source>
          <target state="translated">ライブラリ環境の設定</target>
        </trans-unit>
        <trans-unit id="cc5b2a062f05dd148b4ef24c76639416ebcc59f3" translate="yes" xml:space="preserve">
          <source>Licensed under the BSD License.</source>
          <target state="translated">BSDライセンスの下でライセンスされています。</target>
        </trans-unit>
        <trans-unit id="6e7607aff826aade5ab90b8d8de0fb82a918a57b" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#django.db.models.BooleanField&quot;&gt;&lt;code&gt;BooleanField&lt;/code&gt;&lt;/a&gt; with &lt;code&gt;null=True&lt;/code&gt;.</source>
          <target state="translated">同様&lt;a href=&quot;#django.db.models.BooleanField&quot;&gt; &lt;code&gt;BooleanField&lt;/code&gt; &lt;/a&gt;と &lt;code&gt;null=True&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="58e57aeb5cde6d590a20ba69d32dc0a71347311b" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#django.db.models.BooleanField&quot;&gt;&lt;code&gt;BooleanField&lt;/code&gt;&lt;/a&gt; with &lt;code&gt;null=True&lt;/code&gt;. Use that instead of this field as it&amp;rsquo;s likely to be deprecated in a future version of Django.</source>
          <target state="translated">&lt;code&gt;null=True&lt;/code&gt; の&lt;a href=&quot;#django.db.models.BooleanField&quot;&gt; &lt;code&gt;BooleanField&lt;/code&gt; &lt;/a&gt;と同じです。Djangoの将来のバージョンでは非推奨になる可能性があるため、このフィールドの代わりに使用してください。</target>
        </trans-unit>
        <trans-unit id="d863c349005f0af90c7f401e7734ee9139cec79f" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#django.db.models.Field.unique_for_date&quot;&gt;&lt;code&gt;unique_for_date&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.db.models.Field.unique_for_month&quot;&gt;&lt;code&gt;unique_for_month&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#django.db.models.Field.unique_for_date&quot;&gt; &lt;code&gt;unique_for_date&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;#django.db.models.Field.unique_for_month&quot;&gt; &lt;code&gt;unique_for_month&lt;/code&gt; &lt;/a&gt;と同様です。</target>
        </trans-unit>
        <trans-unit id="2cb204156411d2f4610b450ea6f4198604fc63ca" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#django.db.models.Field.unique_for_date&quot;&gt;&lt;code&gt;unique_for_date&lt;/code&gt;&lt;/a&gt;, but requires the field to be unique with respect to the month.</source>
          <target state="translated">&lt;a href=&quot;#django.db.models.Field.unique_for_date&quot;&gt; &lt;code&gt;unique_for_date&lt;/code&gt; &lt;/a&gt;と同様ですが、フィールドは月に関して一意である必要があります。</target>
        </trans-unit>
        <trans-unit id="911a97afa7975200bcc2321bf08148741b444fe2" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#django.db.models.ForeignKey.related_name&quot;&gt;&lt;code&gt;related_name&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;related_query_name&lt;/code&gt; supports app label and class interpolation via &lt;a href=&quot;../../topics/db/models#abstract-related-name&quot;&gt;some special syntax&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#django.db.models.ForeignKey.related_name&quot;&gt; &lt;code&gt;related_name&lt;/code&gt; &lt;/a&gt;と同様に、 &lt;code&gt;related_query_name&lt;/code&gt; は、&lt;a href=&quot;../../topics/db/models#abstract-related-name&quot;&gt;特別な構文を&lt;/a&gt;介してアプリのラベルとクラスの補間をサポートします。</target>
        </trans-unit>
        <trans-unit id="7e8ba55cee6b9bc75efd8d7b2d9363b4469563af" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#django.db.models.functions.Length&quot;&gt;&lt;code&gt;Length&lt;/code&gt;&lt;/a&gt;, it can be registered as a transform on &lt;code&gt;IntegerField&lt;/code&gt;. The default lookup name is &lt;code&gt;chr&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#django.db.models.functions.Length&quot;&gt; &lt;code&gt;Length&lt;/code&gt; &lt;/a&gt;と同様に、 &lt;code&gt;IntegerField&lt;/code&gt; の変換として登録できます。デフォルトの検索名は &lt;code&gt;chr&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="a1e12840ec9b2637f09dc7a3ab639b1aa8cc958b" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#django.db.models.query.QuerySet.get&quot;&gt;&lt;code&gt;get()&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;earliest()&lt;/code&gt; and &lt;code&gt;latest()&lt;/code&gt; raise &lt;a href=&quot;class#django.db.models.Model.DoesNotExist&quot;&gt;&lt;code&gt;DoesNotExist&lt;/code&gt;&lt;/a&gt; if there is no object with the given parameters.</source>
          <target state="translated">同様&lt;a href=&quot;#django.db.models.query.QuerySet.get&quot;&gt; &lt;code&gt;get()&lt;/code&gt; &lt;/a&gt;、 &lt;code&gt;earliest()&lt;/code&gt; および &lt;code&gt;latest()&lt;/code&gt; レイズ&lt;a href=&quot;class#django.db.models.Model.DoesNotExist&quot;&gt; &lt;code&gt;DoesNotExist&lt;/code&gt; &lt;/a&gt;指定されたパラメータとはオブジェクトが存在しない場合。</target>
        </trans-unit>
        <trans-unit id="214c8acc0296f6b6279e2c41f5ce14dda1a45453" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#django.db.models.query.QuerySet.get&quot;&gt;&lt;code&gt;get()&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;earliest()&lt;/code&gt; and &lt;code&gt;latest()&lt;/code&gt; raise &lt;a href=&quot;instances#django.db.models.Model.DoesNotExist&quot;&gt;&lt;code&gt;DoesNotExist&lt;/code&gt;&lt;/a&gt; if there is no object with the given parameters.</source>
          <target state="translated">同様&lt;a href=&quot;#django.db.models.query.QuerySet.get&quot;&gt; &lt;code&gt;get()&lt;/code&gt; &lt;/a&gt;、 &lt;code&gt;earliest()&lt;/code&gt; および &lt;code&gt;latest()&lt;/code&gt; レイズ&lt;a href=&quot;instances#django.db.models.Model.DoesNotExist&quot;&gt; &lt;code&gt;DoesNotExist&lt;/code&gt; &lt;/a&gt;指定されたパラメータとはオブジェクトが存在しない場合。</target>
        </trans-unit>
        <trans-unit id="239355497d3fbe89204c4a53a6ee6315e778dee6" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#django.db.models.query.QuerySet.get_or_create&quot;&gt;&lt;code&gt;get_or_create()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.db.models.query.QuerySet.create&quot;&gt;&lt;code&gt;create()&lt;/code&gt;&lt;/a&gt;, if you&amp;rsquo;re using manually specified primary keys and an object needs to be created but the key already exists in the database, an &lt;a href=&quot;../exceptions#django.db.IntegrityError&quot;&gt;&lt;code&gt;IntegrityError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="translated">同様&lt;a href=&quot;#django.db.models.query.QuerySet.get_or_create&quot;&gt; &lt;code&gt;get_or_create()&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#django.db.models.query.QuerySet.create&quot;&gt; &lt;code&gt;create()&lt;/code&gt; &lt;/a&gt;しますしているが、手動で使用して主キーを指定してオブジェクトを作成する必要があるが、キーがデータベースにすでに存在する場合は、&lt;a href=&quot;../exceptions#django.db.IntegrityError&quot;&gt; &lt;code&gt;IntegrityError&lt;/code&gt; が&lt;/a&gt;発生します。</target>
        </trans-unit>
        <trans-unit id="ba1002c38a02557610283e402687e7baac287229" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#django.db.models.signals.pre_delete&quot;&gt;&lt;code&gt;pre_delete&lt;/code&gt;&lt;/a&gt;, but sent at the end of a model&amp;rsquo;s &lt;a href=&quot;models/instances#django.db.models.Model.delete&quot;&gt;&lt;code&gt;delete()&lt;/code&gt;&lt;/a&gt; method and a queryset&amp;rsquo;s &lt;a href=&quot;models/querysets#django.db.models.query.QuerySet.delete&quot;&gt;&lt;code&gt;delete()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">同様&lt;a href=&quot;#django.db.models.signals.pre_delete&quot;&gt; &lt;code&gt;pre_delete&lt;/code&gt; &lt;/a&gt;が、モデルのの終わりに送信され&lt;a href=&quot;models/instances#django.db.models.Model.delete&quot;&gt; &lt;code&gt;delete()&lt;/code&gt; &lt;/a&gt;メソッドとクエリセットの&lt;a href=&quot;models/querysets#django.db.models.query.QuerySet.delete&quot;&gt; &lt;code&gt;delete()&lt;/code&gt; &lt;/a&gt;メソッド。</target>
        </trans-unit>
        <trans-unit id="92ea644b70e840a836965a7720340cad8a857b9f" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#django.db.models.signals.pre_save&quot;&gt;&lt;code&gt;pre_save&lt;/code&gt;&lt;/a&gt;, but sent at the end of the &lt;a href=&quot;models/instances#django.db.models.Model.save&quot;&gt;&lt;code&gt;save()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;a href=&quot;#django.db.models.signals.pre_save&quot;&gt; &lt;code&gt;pre_save&lt;/code&gt; &lt;/a&gt;と似てい&lt;a href=&quot;models/instances#django.db.models.Model.save&quot;&gt; &lt;code&gt;save()&lt;/code&gt; &lt;/a&gt;が、save（）メソッドの最後に送信されます。</target>
        </trans-unit>
        <trans-unit id="346c284a84600b7c02cc33179c217f057c75135f" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#django.forms.RadioSelect&quot;&gt;&lt;code&gt;RadioSelect&lt;/code&gt;&lt;/a&gt;, you can loop over the individual checkboxes for the widget&amp;rsquo;s choices. Unlike &lt;a href=&quot;#django.forms.RadioSelect&quot;&gt;&lt;code&gt;RadioSelect&lt;/code&gt;&lt;/a&gt;, the checkboxes won&amp;rsquo;t include the &lt;code&gt;required&lt;/code&gt; HTML attribute if the field is required because browser validation would require all checkboxes to be checked instead of at least one.</source>
          <target state="translated">&lt;a href=&quot;#django.forms.RadioSelect&quot;&gt; &lt;code&gt;RadioSelect&lt;/code&gt; &lt;/a&gt;と同様に、ウィジェットの選択の個々のチェックボックスをループできます。&lt;a href=&quot;#django.forms.RadioSelect&quot;&gt; &lt;code&gt;RadioSelect&lt;/code&gt; &lt;/a&gt;とは異なり、ブラウザーの検証では少なくとも1つではなくすべてのチェックボックスをオンにする必要があるため、フィールドが必要な場合、チェックボックスには &lt;code&gt;required&lt;/code&gt; HTML属性が含まれません。</target>
        </trans-unit>
        <trans-unit id="3d780d132abddc411dc49eff10a1e51ef8c50836" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#django.http.HttpRequest.get_full_path&quot;&gt;&lt;code&gt;get_full_path()&lt;/code&gt;&lt;/a&gt;, but uses &lt;a href=&quot;#django.http.HttpRequest.path_info&quot;&gt;&lt;code&gt;path_info&lt;/code&gt;&lt;/a&gt; instead of &lt;a href=&quot;#django.http.HttpRequest.path&quot;&gt;&lt;code&gt;path&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">以下のような&lt;a href=&quot;#django.http.HttpRequest.get_full_path&quot;&gt; &lt;code&gt;get_full_path()&lt;/code&gt; &lt;/a&gt;が、用途は&lt;a href=&quot;#django.http.HttpRequest.path_info&quot;&gt; &lt;code&gt;path_info&lt;/code&gt; &lt;/a&gt;の代わりに&lt;a href=&quot;#django.http.HttpRequest.path&quot;&gt; &lt;code&gt;path&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3b2a9fd84e842e04d0d7921a646d8d793fe3b3df" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt;, but uses a 405 status code. The first argument to the constructor is required: a list of permitted methods (e.g. &lt;code&gt;['GET', 'POST']&lt;/code&gt;).</source>
          <target state="translated">&lt;a href=&quot;#django.http.HttpResponse&quot;&gt; &lt;code&gt;HttpResponse&lt;/code&gt; &lt;/a&gt;と似ていますが、405ステータスコードを使用します。コンストラクタへの最初の引数は必須です：許可されたメソッドのリスト（例えば &lt;code&gt;['GET', 'POST']&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="705089e55a46741f3540639bd76ad967ec33de2b" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#django.http.HttpResponse.set_cookie&quot;&gt;&lt;code&gt;set_cookie()&lt;/code&gt;&lt;/a&gt;, but &lt;a href=&quot;../topics/signing&quot;&gt;cryptographic signing&lt;/a&gt; the cookie before setting it. Use in conjunction with &lt;a href=&quot;#django.http.HttpRequest.get_signed_cookie&quot;&gt;&lt;code&gt;HttpRequest.get_signed_cookie()&lt;/code&gt;&lt;/a&gt;. You can use the optional &lt;code&gt;salt&lt;/code&gt; argument for added key strength, but you will need to remember to pass it to the corresponding &lt;a href=&quot;#django.http.HttpRequest.get_signed_cookie&quot;&gt;&lt;code&gt;HttpRequest.get_signed_cookie()&lt;/code&gt;&lt;/a&gt; call.</source>
          <target state="translated">&lt;a href=&quot;#django.http.HttpResponse.set_cookie&quot;&gt; &lt;code&gt;set_cookie()&lt;/code&gt; &lt;/a&gt;に似ていますが、設定する前にcookieに&lt;a href=&quot;../topics/signing&quot;&gt;暗号で署名&lt;/a&gt;します。&lt;a href=&quot;#django.http.HttpRequest.get_signed_cookie&quot;&gt; &lt;code&gt;HttpRequest.get_signed_cookie()&lt;/code&gt; &lt;/a&gt;と組み合わせて使用​​します。キー強度を追加するためにオプションの &lt;code&gt;salt&lt;/code&gt; 引数を使用できますが、対応する&lt;a href=&quot;#django.http.HttpRequest.get_signed_cookie&quot;&gt; &lt;code&gt;HttpRequest.get_signed_cookie()&lt;/code&gt; &lt;/a&gt;呼び出しに渡すことを忘れないでください。</target>
        </trans-unit>
        <trans-unit id="df768b23ac3b315c812da78f870686a8bb4dc2c6" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#django.http.HttpResponseRedirect&quot;&gt;&lt;code&gt;HttpResponseRedirect&lt;/code&gt;&lt;/a&gt;, but it returns a permanent redirect (HTTP status code 301) instead of a &amp;ldquo;found&amp;rdquo; redirect (status code 302).</source>
          <target state="translated">&lt;a href=&quot;#django.http.HttpResponseRedirect&quot;&gt; &lt;code&gt;HttpResponseRedirect&lt;/code&gt; &lt;/a&gt;と似ていますが、「見つかった」リダイレクト（ステータスコード302）ではなく、永続的なリダイレクト（HTTPステータスコード301）を返します。</target>
        </trans-unit>
        <trans-unit id="8563b2bd8ef79b66e64abc13b185806b9bcc5261" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#django.http.QueryDict.items&quot;&gt;&lt;code&gt;items()&lt;/code&gt;&lt;/a&gt;, except it includes all values, as a list, for each member of the dictionary. For example:</source>
          <target state="translated">&lt;a href=&quot;#django.http.QueryDict.items&quot;&gt; &lt;code&gt;items()&lt;/code&gt; &lt;/a&gt;と同様ですが、ディクショナリの各メンバーのすべての値がリストとして含まれます。例えば：</target>
        </trans-unit>
        <trans-unit id="8ae206c32c2628442b4554143850ec58ec83ef81" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#django.http.QueryDict.setdefault&quot;&gt;&lt;code&gt;setdefault()&lt;/code&gt;&lt;/a&gt;, except it takes a list of values instead of a single value.</source>
          <target state="translated">以下のよう&lt;a href=&quot;#django.http.QueryDict.setdefault&quot;&gt; &lt;code&gt;setdefault()&lt;/code&gt; &lt;/a&gt;、それは代わりに単一の値の値のリストを取り除い。</target>
        </trans-unit>
        <trans-unit id="955afb7b9c578249edff08f0675f1e6007885295" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#django.template.Engine.get_template&quot;&gt;&lt;code&gt;get_template()&lt;/code&gt;&lt;/a&gt;, except it takes a list of names and returns the first template that was found.</source>
          <target state="translated">&lt;a href=&quot;#django.template.Engine.get_template&quot;&gt; &lt;code&gt;get_template()&lt;/code&gt; &lt;/a&gt;と同様ですが、名前のリストを受け取り、最初に見つかったテンプレートを返します。</target>
        </trans-unit>
        <trans-unit id="39373966de87495533da143e122efa7b8991fcf2" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;../../migration-operations#django.db.migrations.operations.AddIndex&quot;&gt;&lt;code&gt;AddIndex&lt;/code&gt;&lt;/a&gt;, but creates an index with the &lt;code&gt;CONCURRENTLY&lt;/code&gt; option. This has a few caveats to be aware of when using this option, see &lt;a href=&quot;https://www.postgresql.org/docs/current/sql-createindex.html#SQL-CREATEINDEX-CONCURRENTLY&quot;&gt;the PostgreSQL documentation of building indexes concurrently&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../migration-operations#django.db.migrations.operations.AddIndex&quot;&gt; &lt;code&gt;AddIndex&lt;/code&gt; &lt;/a&gt;と似ていますが、 &lt;code&gt;CONCURRENTLY&lt;/code&gt; オプションを使用してインデックスを作成します。これには、このオプションを使用するときに注意すべきいくつかの警告があり&lt;a href=&quot;https://www.postgresql.org/docs/current/sql-createindex.html#SQL-CREATEINDEX-CONCURRENTLY&quot;&gt;ます&lt;/a&gt;。インデックスの同時構築に関するPostgreSQLのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="916b0736c9a97408dd3dd4b442e03c3e1742fbdf" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;../../migration-operations#django.db.migrations.operations.RemoveIndex&quot;&gt;&lt;code&gt;RemoveIndex&lt;/code&gt;&lt;/a&gt;, but removes the index with the &lt;code&gt;CONCURRENTLY&lt;/code&gt; option. This has a few caveats to be aware of when using this option, see &lt;a href=&quot;https://www.postgresql.org/docs/current/sql-dropindex.html&quot;&gt;the PostgreSQL documentation&lt;/a&gt;.</source>
          <target state="translated">同様&lt;a href=&quot;../../migration-operations#django.db.migrations.operations.RemoveIndex&quot;&gt; &lt;code&gt;RemoveIndex&lt;/code&gt; &lt;/a&gt;、しかしでインデックスを削除し &lt;code&gt;CONCURRENTLY&lt;/code&gt; のオプション。これには、このオプションを使用するときに注意すべきいくつかの警告があり&lt;a href=&quot;https://www.postgresql.org/docs/current/sql-dropindex.html&quot;&gt;ます。PostgreSQLのドキュメントを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="75f974a90c1064ff9e66af2aa32291764d99ea63" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField&quot;&gt;&lt;code&gt;ManyToManyField&lt;/code&gt;&lt;/a&gt; can specify &lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField.related_name&quot;&gt;&lt;code&gt;related_name&lt;/code&gt;&lt;/a&gt;. In the above example, if the &lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField&quot;&gt;&lt;code&gt;ManyToManyField&lt;/code&gt;&lt;/a&gt; in &lt;code&gt;Entry&lt;/code&gt; had specified &lt;code&gt;related_name='entries'&lt;/code&gt;, then each &lt;code&gt;Author&lt;/code&gt; instance would have an &lt;code&gt;entries&lt;/code&gt; attribute instead of &lt;code&gt;entry_set&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey&quot;&gt; &lt;code&gt;ForeignKey&lt;/code&gt; &lt;/a&gt;と同様に、&lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField&quot;&gt; &lt;code&gt;ManyToManyField&lt;/code&gt; &lt;/a&gt;は&lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField.related_name&quot;&gt; &lt;code&gt;related_name&lt;/code&gt; &lt;/a&gt;を指定できます。上記の例では、 &lt;code&gt;Entry&lt;/code&gt; の&lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField&quot;&gt; &lt;code&gt;ManyToManyField&lt;/code&gt; &lt;/a&gt;で &lt;code&gt;related_name='entries'&lt;/code&gt; が指定されている場合、各 &lt;code&gt;Author&lt;/code&gt; インスタンスには &lt;code&gt;entry_set&lt;/code&gt; ではなく、 &lt;code&gt;entries&lt;/code&gt; 属性があります。</target>
        </trans-unit>
        <trans-unit id="152b27754fb68e577d55e104e8ae19972dad7d59" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;../ref/django-admin#django-admin-migrate&quot;&gt;&lt;code&gt;migrate&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../ref/django-admin#django-admin-createcachetable&quot;&gt;&lt;code&gt;createcachetable&lt;/code&gt;&lt;/a&gt; won&amp;rsquo;t touch an existing table. It will only create missing tables.</source>
          <target state="translated">&lt;a href=&quot;../ref/django-admin#django-admin-migrate&quot;&gt; &lt;code&gt;migrate&lt;/code&gt; &lt;/a&gt;と同様に、&lt;a href=&quot;../ref/django-admin#django-admin-createcachetable&quot;&gt; &lt;code&gt;createcachetable&lt;/code&gt; &lt;/a&gt;は既存のテーブルを変更しません。不足しているテーブルのみが作成されます。</target>
        </trans-unit>
        <trans-unit id="786a89e1a019ca41285aa5568a005c590d86720a" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;formsets&quot;&gt;regular formsets&lt;/a&gt;, Django provides a couple of enhanced formset classes to make working with Django models more convenient. Let&amp;rsquo;s reuse the &lt;code&gt;Author&lt;/code&gt; model from above:</source>
          <target state="translated">&lt;a href=&quot;formsets&quot;&gt;通常のフォームセット&lt;/a&gt;と同様に、DjangoはDjangoモデルでの作業をより便利にするために、いくつかの拡張フォームセットクラスを提供します。上記の &lt;code&gt;Author&lt;/code&gt; モデルを再利用しましょう。</target>
        </trans-unit>
        <trans-unit id="51494adf7a641f08554c36bcc81e8661f20bd02d" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#dict.items&quot;&gt;&lt;code&gt;dict.items()&lt;/code&gt;&lt;/a&gt;, except this uses the same last-value logic as &lt;a href=&quot;#django.http.QueryDict.__getitem__&quot;&gt;&lt;code&gt;__getitem__()&lt;/code&gt;&lt;/a&gt; and returns an iterator object instead of a view object. For example:</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#dict.items&quot;&gt; &lt;code&gt;dict.items()&lt;/code&gt; &lt;/a&gt;と同様ですが、&lt;a href=&quot;#django.http.QueryDict.__getitem__&quot;&gt; &lt;code&gt;__getitem__()&lt;/code&gt; &lt;/a&gt;と同じ最終値ロジックを使用し、ビューオブジェクトではなくイテレータオブジェクトを返します。例えば：</target>
        </trans-unit>
        <trans-unit id="c55b5527be4c2db918e610d42ba56ec6ab40c74f" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#dict.setdefault&quot;&gt;&lt;code&gt;dict.setdefault()&lt;/code&gt;&lt;/a&gt;, except it uses &lt;a href=&quot;#django.http.QueryDict.__setitem__&quot;&gt;&lt;code&gt;__setitem__()&lt;/code&gt;&lt;/a&gt; internally.</source>
          <target state="translated">内部で&lt;a href=&quot;#django.http.QueryDict.__setitem__&quot;&gt; &lt;code&gt;__setitem__()&lt;/code&gt; &lt;/a&gt;使用することを除いて、&lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#dict.setdefault&quot;&gt; &lt;code&gt;dict.setdefault()&lt;/code&gt; &lt;/a&gt;と同様です。</target>
        </trans-unit>
        <trans-unit id="a7a26680c4baddc5bdcca1a3e548134ab91aa8e0" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#dict.values&quot;&gt;&lt;code&gt;dict.values()&lt;/code&gt;&lt;/a&gt;, except this uses the same last-value logic as &lt;a href=&quot;#django.http.QueryDict.__getitem__&quot;&gt;&lt;code&gt;__getitem__()&lt;/code&gt;&lt;/a&gt; and returns an iterator instead of a view object. For example:</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#dict.values&quot;&gt; &lt;code&gt;dict.values()&lt;/code&gt; &lt;/a&gt;と同様ですが、&lt;a href=&quot;#django.http.QueryDict.__getitem__&quot;&gt; &lt;code&gt;__getitem__()&lt;/code&gt; &lt;/a&gt;と同じ最終値ロジックを使用し、ビューオブジェクトの代わりにイテレータを返します。例えば：</target>
        </trans-unit>
        <trans-unit id="739f7b0ad74db367e30aab10530f59aa3a7cac4f" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;cache.set()&lt;/code&gt;, &lt;code&gt;set_many()&lt;/code&gt; takes an optional &lt;code&gt;timeout&lt;/code&gt; parameter.</source>
          <target state="translated">&lt;code&gt;cache.set()&lt;/code&gt; と同様に、 &lt;code&gt;set_many()&lt;/code&gt; はオプションの &lt;code&gt;timeout&lt;/code&gt; パラメータを取ります。</target>
        </trans-unit>
        <trans-unit id="bb1cdfba618a7cae4220d4a0f47c6724622f7e74" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;decorator_from_middleware&lt;/code&gt;, but returns a function that accepts the arguments to be passed to the middleware_class. For example, the &lt;a href=&quot;../topics/cache#django.views.decorators.cache.cache_page&quot;&gt;&lt;code&gt;cache_page()&lt;/code&gt;&lt;/a&gt; decorator is created from the &lt;code&gt;CacheMiddleware&lt;/code&gt; like this:</source>
          <target state="translated">&lt;code&gt;decorator_from_middleware&lt;/code&gt; に似ていますが、middleware_classに渡される引数を受け入れる関数を返します。たとえば、&lt;a href=&quot;../topics/cache#django.views.decorators.cache.cache_page&quot;&gt; &lt;code&gt;cache_page()&lt;/code&gt; &lt;/a&gt;デコレータは、 &lt;code&gt;CacheMiddleware&lt;/code&gt; ようにCacheMiddlewareから作成されます。</target>
        </trans-unit>
        <trans-unit id="bdd480f7f0b5f6d4b4fbf2c6f4f3e4f6b1854c5d" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;push()&lt;/code&gt;, you can use &lt;code&gt;update()&lt;/code&gt; as a context manager to ensure a matching &lt;code&gt;pop()&lt;/code&gt; is called.</source>
          <target state="translated">&lt;code&gt;push()&lt;/code&gt; と同様に、 &lt;code&gt;update()&lt;/code&gt; をコンテキストマネージャとして使用して、一致する &lt;code&gt;pop()&lt;/code&gt; が呼び出されるようにすることができます。</target>
        </trans-unit>
        <trans-unit id="ba602b2e6c355200a165d077ac6e9a0594ee71f9" translate="yes" xml:space="preserve">
          <source>Like PostgreSQL itself, Django defaults to the &lt;code&gt;READ COMMITTED&lt;/code&gt;&lt;a href=&quot;https://www.postgresql.org/docs/current/transaction-iso.html&quot;&gt;isolation level&lt;/a&gt;. If you need a higher isolation level such as &lt;code&gt;REPEATABLE READ&lt;/code&gt; or &lt;code&gt;SERIALIZABLE&lt;/code&gt;, set it in the &lt;a href=&quot;settings#std:setting-OPTIONS&quot;&gt;&lt;code&gt;OPTIONS&lt;/code&gt;&lt;/a&gt; part of your database configuration in &lt;a href=&quot;settings#std:setting-DATABASES&quot;&gt;&lt;code&gt;DATABASES&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">PostgreSQL自体と同様に、Djangoのデフォルトは &lt;code&gt;READ COMMITTED&lt;/code&gt; &lt;a href=&quot;https://www.postgresql.org/docs/current/transaction-iso.html&quot;&gt;分離レベル&lt;/a&gt;です。次のような高い分離レベルが必要な場合は &lt;code&gt;REPEATABLE READ&lt;/code&gt; または &lt;code&gt;SERIALIZABLE&lt;/code&gt; を、それを設定する&lt;a href=&quot;settings#std:setting-OPTIONS&quot;&gt; &lt;code&gt;OPTIONS&lt;/code&gt; &lt;/a&gt;で、データベース構成の一部&lt;a href=&quot;settings#std:setting-DATABASES&quot;&gt; &lt;code&gt;DATABASES&lt;/code&gt; &lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="d34fb63c0b51ff06df9550a1593f51e8117c6b72" translate="yes" xml:space="preserve">
          <source>Like WSGI, ASGI has you supply an &lt;code&gt;application&lt;/code&gt; callable which the application server uses to communicate with your code. It&amp;rsquo;s commonly provided as an object named &lt;code&gt;application&lt;/code&gt; in a Python module accessible to the server.</source>
          <target state="translated">WSGIと同様に、ASGIには、アプリケーションサーバーがコードとの通信に使用する呼び出し可能な &lt;code&gt;application&lt;/code&gt; が用意されています。一般に、サーバーからアクセス可能なPythonモジュールの &lt;code&gt;application&lt;/code&gt; というオブジェクトとして提供されます。</target>
        </trans-unit>
        <trans-unit id="8b7753e1b85c02959312c8643ca4aadd2afe10bc" translate="yes" xml:space="preserve">
          <source>Like a &lt;a href=&quot;#django.db.models.PositiveIntegerField&quot;&gt;&lt;code&gt;PositiveIntegerField&lt;/code&gt;&lt;/a&gt;, but only allows values under a certain (database-dependent) point. Values from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;32767&lt;/code&gt; are safe in all databases supported by Django.</source>
          <target state="translated">&lt;a href=&quot;#django.db.models.PositiveIntegerField&quot;&gt; &lt;code&gt;PositiveIntegerField&lt;/code&gt; &lt;/a&gt;と同様ですが、特定の（データベースに依存する）ポイントの下の値のみを許可します。 &lt;code&gt;0&lt;/code&gt; から &lt;code&gt;32767&lt;/code&gt; までの値は、Djangoがサポートするすべてのデータベースで安全です。</target>
        </trans-unit>
        <trans-unit id="3e2dae3f888c279defb88d23e93842df027bb502" translate="yes" xml:space="preserve">
          <source>Like a &lt;a href=&quot;#django.db.models.PositiveIntegerField&quot;&gt;&lt;code&gt;PositiveIntegerField&lt;/code&gt;&lt;/a&gt;, but only allows values under a certain (database-dependent) point. Values from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;9223372036854775807&lt;/code&gt; are safe in all databases supported by Django.</source>
          <target state="translated">&lt;a href=&quot;#django.db.models.PositiveIntegerField&quot;&gt; &lt;code&gt;PositiveIntegerField&lt;/code&gt; &lt;/a&gt;と同様ですが、特定の（データベースに依存する）ポイントの下の値のみを許可します。 &lt;code&gt;0&lt;/code&gt; から &lt;code&gt;9223372036854775807&lt;/code&gt; までの値は、Djangoでサポートされているすべてのデータベースで安全です。</target>
        </trans-unit>
        <trans-unit id="00b7111396930922c74543cf53e7858a5613c560" translate="yes" xml:space="preserve">
          <source>Like a CharField, you can specify &lt;a href=&quot;#django.db.models.CharField.max_length&quot;&gt;&lt;code&gt;max_length&lt;/code&gt;&lt;/a&gt; (read the note about database portability and &lt;a href=&quot;#django.db.models.CharField.max_length&quot;&gt;&lt;code&gt;max_length&lt;/code&gt;&lt;/a&gt; in that section, too). If &lt;a href=&quot;#django.db.models.CharField.max_length&quot;&gt;&lt;code&gt;max_length&lt;/code&gt;&lt;/a&gt; is not specified, Django will use a default length of 50.</source>
          <target state="translated">CharFieldと同様に、&lt;a href=&quot;#django.db.models.CharField.max_length&quot;&gt; &lt;code&gt;max_length&lt;/code&gt; &lt;/a&gt;を指定できます（データベースの移植性とそのセクションの&lt;a href=&quot;#django.db.models.CharField.max_length&quot;&gt; &lt;code&gt;max_length&lt;/code&gt; &lt;/a&gt;についての注記もお読みください）。&lt;a href=&quot;#django.db.models.CharField.max_length&quot;&gt; &lt;code&gt;max_length&lt;/code&gt; &lt;/a&gt;が指定されていない場合、Djangoはデフォルトの長さの50を使用します。</target>
        </trans-unit>
        <trans-unit id="5f60adb6d58f4db10d99251a6c1029ea1aeda81c" translate="yes" xml:space="preserve">
          <source>Like a view, the arguments in the URL are passed to the &lt;code&gt;get_object()&lt;/code&gt; method along with the request object.</source>
          <target state="translated">ビューと同様に、URLの引数は、リクエストオブジェクトとともに &lt;code&gt;get_object()&lt;/code&gt; メソッドに渡されます。</target>
        </trans-unit>
        <trans-unit id="3540955efa9e226e2af7cd4207b9c9d694373a03" translate="yes" xml:space="preserve">
          <source>Like all &lt;a href=&quot;#django.db.models.CharField&quot;&gt;&lt;code&gt;CharField&lt;/code&gt;&lt;/a&gt; subclasses, &lt;a href=&quot;#django.db.models.URLField&quot;&gt;&lt;code&gt;URLField&lt;/code&gt;&lt;/a&gt; takes the optional &lt;a href=&quot;#django.db.models.CharField.max_length&quot;&gt;&lt;code&gt;max_length&lt;/code&gt;&lt;/a&gt; argument. If you don&amp;rsquo;t specify &lt;a href=&quot;#django.db.models.CharField.max_length&quot;&gt;&lt;code&gt;max_length&lt;/code&gt;&lt;/a&gt;, a default of 200 is used.</source>
          <target state="translated">すべての&lt;a href=&quot;#django.db.models.CharField&quot;&gt; &lt;code&gt;CharField&lt;/code&gt; &lt;/a&gt;サブクラスと同様に、&lt;a href=&quot;#django.db.models.URLField&quot;&gt; &lt;code&gt;URLField&lt;/code&gt; &lt;/a&gt;はオプションの&lt;a href=&quot;#django.db.models.CharField.max_length&quot;&gt; &lt;code&gt;max_length&lt;/code&gt; &lt;/a&gt;引数を取ります。&lt;a href=&quot;#django.db.models.CharField.max_length&quot;&gt; &lt;code&gt;max_length&lt;/code&gt; を&lt;/a&gt;指定しない場合、デフォルトの200が使用されます。</target>
        </trans-unit>
        <trans-unit id="5fcac6c11b3e3fe6905fac69819c8a77da3c7226" translate="yes" xml:space="preserve">
          <source>Like all custom template tags, you&amp;rsquo;ll need to &lt;a href=&quot;../templates/language#loading-custom-template-libraries&quot;&gt;load its custom tag library&lt;/a&gt; before you can use it. After loading the library, you can retrieve all current flatpages via the &lt;a href=&quot;#std:templatetag-get_flatpages&quot;&gt;&lt;code&gt;get_flatpages&lt;/code&gt;&lt;/a&gt; tag:</source>
          <target state="translated">すべてのカスタムテンプレートタグと同様に、使用する前に&lt;a href=&quot;../templates/language#loading-custom-template-libraries&quot;&gt;そのカスタムタグライブラリ&lt;/a&gt;をロードする必要があります。ライブラリをロードした後、&lt;a href=&quot;#std:templatetag-get_flatpages&quot;&gt; &lt;code&gt;get_flatpages&lt;/code&gt; &lt;/a&gt;タグを使用して現在のすべてのフラットページを取得できます。</target>
        </trans-unit>
        <trans-unit id="9951a67920449e4d4b835b90125cd72c36ccfbf5" translate="yes" xml:space="preserve">
          <source>Like an &lt;a href=&quot;#django.db.models.AutoField&quot;&gt;&lt;code&gt;AutoField&lt;/code&gt;&lt;/a&gt;, but only allows values under a certain (database-dependent) limit. Values from &lt;code&gt;1&lt;/code&gt; to &lt;code&gt;32767&lt;/code&gt; are safe in all databases supported by Django.</source>
          <target state="translated">&lt;a href=&quot;#django.db.models.AutoField&quot;&gt; &lt;code&gt;AutoField&lt;/code&gt; &lt;/a&gt;と似ていますが、特定の（データベースに依存する）制限の下でのみ値を許可します。 &lt;code&gt;1&lt;/code&gt; から &lt;code&gt;32767&lt;/code&gt; までの値は、Djangoがサポートするすべてのデータベースで安全です。</target>
        </trans-unit>
        <trans-unit id="0bb140ee24bb5ffd0e10ed6b33a66a505a5c3dd7" translate="yes" xml:space="preserve">
          <source>Like an &lt;a href=&quot;#django.db.models.IntegerField&quot;&gt;&lt;code&gt;IntegerField&lt;/code&gt;&lt;/a&gt;, but must be either positive or zero (&lt;code&gt;0&lt;/code&gt;). Values from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;2147483647&lt;/code&gt; are safe in all databases supported by Django. The value &lt;code&gt;0&lt;/code&gt; is accepted for backward compatibility reasons.</source>
          <target state="translated">&lt;a href=&quot;#django.db.models.IntegerField&quot;&gt; &lt;code&gt;IntegerField&lt;/code&gt; &lt;/a&gt;と似ていますが、正またはゼロ（ &lt;code&gt;0&lt;/code&gt; ）でなければなりません。 &lt;code&gt;0&lt;/code&gt; から &lt;code&gt;2147483647&lt;/code&gt; までの値は、Djangoがサポートするすべてのデータベースで安全です。値 &lt;code&gt;0&lt;/code&gt; は、下位互換性のために受け入れられます。</target>
        </trans-unit>
        <trans-unit id="95ba58840db2ee448b0fa54dabeda7c3b5fb30f9" translate="yes" xml:space="preserve">
          <source>Like an &lt;a href=&quot;#django.db.models.IntegerField&quot;&gt;&lt;code&gt;IntegerField&lt;/code&gt;&lt;/a&gt;, but only allows values under a certain (database-dependent) point. Values from &lt;code&gt;-32768&lt;/code&gt; to &lt;code&gt;32767&lt;/code&gt; are safe in all databases supported by Django.</source>
          <target state="translated">&lt;a href=&quot;#django.db.models.IntegerField&quot;&gt; &lt;code&gt;IntegerField&lt;/code&gt; &lt;/a&gt;と似ていますが、特定の（データベースに依存する）ポイントの下の値のみを許可します。 &lt;code&gt;-32768&lt;/code&gt; から &lt;code&gt;32767&lt;/code&gt; までの値は、Djangoがサポートするすべてのデータベースで安全です。</target>
        </trans-unit>
        <trans-unit id="d83aed216be35e66a6d332c877c5d35102c04c61" translate="yes" xml:space="preserve">
          <source>Like loggers, handlers also have a log level. If the log level of a log record doesn&amp;rsquo;t meet or exceed the level of the handler, the handler will ignore the message.</source>
          <target state="translated">ロガーと同様に、ハンドラーにもログレベルがあります。ログレコードのログレベルがハンドラーのレベルに達していないか、それを超えていない場合、ハンドラーはメッセージを無視します。</target>
        </trans-unit>
        <trans-unit id="b7d833a6751175de456bd982f108a2cc4741389d" translate="yes" xml:space="preserve">
          <source>Like other Django contrib applications, you will &lt;em&gt;only&lt;/em&gt; need to add &lt;a href=&quot;../index#module-django.contrib.gis&quot;&gt;&lt;code&gt;django.contrib.gis&lt;/code&gt;&lt;/a&gt; to &lt;a href=&quot;../../../settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; in your settings. This is so that the &lt;code&gt;gis&lt;/code&gt; templates can be located &amp;ndash; if not done, then features such as the geographic admin or KML sitemaps will not function properly.</source>
          <target state="translated">他のDjangoのcontribアプリケーションと同様に、あなたがします&lt;em&gt;だけ&lt;/em&gt;追加する必要が&lt;a href=&quot;../index#module-django.contrib.gis&quot;&gt; &lt;code&gt;django.contrib.gis&lt;/code&gt; を&lt;/a&gt;する&lt;a href=&quot;../../../settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt;あなたの設定で。これは、 &lt;code&gt;gis&lt;/code&gt; テンプレートを見つけることができるようにするためです。そうしないと、地理管理やKMLサイトマップなどの機能が正しく機能しません。</target>
        </trans-unit>
        <trans-unit id="9c665315f6d801d5b6f09a247bd1d42caef56cf5" translate="yes" xml:space="preserve">
          <source>Like other methods, the &lt;code&gt;timeout&lt;/code&gt; argument is optional and defaults to the &lt;code&gt;TIMEOUT&lt;/code&gt; option of the appropriate backend in the &lt;a href=&quot;../ref/settings#std:setting-CACHES&quot;&gt;&lt;code&gt;CACHES&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">他のメソッドと同様に、 &lt;code&gt;timeout&lt;/code&gt; 引数はオプションであり、デフォルトは&lt;a href=&quot;../ref/settings#std:setting-CACHES&quot;&gt; &lt;code&gt;CACHES&lt;/code&gt; &lt;/a&gt;設定の適切なバックエンドの &lt;code&gt;TIMEOUT&lt;/code&gt; オプションです。</target>
        </trans-unit>
        <trans-unit id="3aed27718d957f62e17035d413aabc537e0029fc" translate="yes" xml:space="preserve">
          <source>Like pre_init, but this one is sent when the &lt;code&gt;__init__()&lt;/code&gt; method finishes.</source>
          <target state="translated">pre_initと似ていますが、これは &lt;code&gt;__init__()&lt;/code&gt; メソッドが終了したときに送信されます。</target>
        </trans-unit>
        <trans-unit id="1f1c6004ebf3711f7e8bdedde30c5087916707a3" translate="yes" xml:space="preserve">
          <source>Like regular Python files, you can read the file line-by-line by iterating over the uploaded file:</source>
          <target state="translated">通常のPythonファイルのように、アップロードされたファイルを反復処理することで、ファイルを1行ごとに読むことができます。</target>
        </trans-unit>
        <trans-unit id="eef7d6244014f8627193d8008d82d067746059ec" translate="yes" xml:space="preserve">
          <source>Like the &lt;code&gt;formfield_for_foreignkey&lt;/code&gt; and &lt;code&gt;formfield_for_manytomany&lt;/code&gt; methods, the &lt;code&gt;formfield_for_choice_field&lt;/code&gt; method can be overridden to change the default formfield for a field that has declared choices. For example, if the choices available to a superuser should be different than those available to regular staff, you could proceed as follows:</source>
          <target state="translated">&lt;code&gt;formfield_for_foreignkey&lt;/code&gt; および &lt;code&gt;formfield_for_manytomany&lt;/code&gt; メソッドと同様に、 &lt;code&gt;formfield_for_choice_field&lt;/code&gt; メソッドをオーバーライドして、選択を宣言したフィールドのデフォルトのformfieldを変更できます。たとえば、スーパーユーザーが利用できる選択肢が通常のスタッフが利用できるものと異なる場合、次のように進めることができます。</target>
        </trans-unit>
        <trans-unit id="4b0e54aa6002f6648959e5fde59d83b613a588b1" translate="yes" xml:space="preserve">
          <source>Like the &lt;code&gt;formfield_for_foreignkey&lt;/code&gt; method, the &lt;code&gt;formfield_for_manytomany&lt;/code&gt; method can be overridden to change the default formfield for a many to many field. For example, if an owner can own multiple cars and cars can belong to multiple owners &amp;ndash; a many to many relationship &amp;ndash; you could filter the &lt;code&gt;Car&lt;/code&gt; foreign key field to only display the cars owned by the &lt;code&gt;User&lt;/code&gt;:</source>
          <target state="translated">同様 &lt;code&gt;formfield_for_foreignkey&lt;/code&gt; 方法、 &lt;code&gt;formfield_for_manytomany&lt;/code&gt; 方法は、多くの分野に多くのデフォルトのフォームフィールドを変更するためにオーバーライドすることができます。たとえば、所有者が複数の車を所有でき、車が複数の所有者に所属できる場合（多対多の関係）、 &lt;code&gt;Car&lt;/code&gt; 外部キーフィールドをフィルターして、 &lt;code&gt;User&lt;/code&gt; が所有する車のみを表示できます。</target>
        </trans-unit>
        <trans-unit id="31f10fbef42ead92801c9234e033fbaaf39c7b22" translate="yes" xml:space="preserve">
          <source>Like the model field&amp;rsquo;s &lt;a href=&quot;../models/fields#django.db.models.Field.help_text&quot;&gt;&lt;code&gt;help_text&lt;/code&gt;&lt;/a&gt;, this value isn&amp;rsquo;t HTML-escaped in automatically-generated forms.</source>
          <target state="translated">モデルフィールドの&lt;a href=&quot;../models/fields#django.db.models.Field.help_text&quot;&gt; &lt;code&gt;help_text&lt;/code&gt; &lt;/a&gt;と同様に、この値は自動生成されたフォームではHTMLエスケープされません。</target>
        </trans-unit>
        <trans-unit id="2ee07a6c8901e20df89791f61993d7c04c839518" translate="yes" xml:space="preserve">
          <source>Like we said above, the default applications are included for the common case, but not everybody needs them. If you don&amp;rsquo;t need any or all of them, feel free to comment-out or delete the appropriate line(s) from &lt;a href=&quot;../ref/settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; before running &lt;a href=&quot;../ref/django-admin#django-admin-migrate&quot;&gt;&lt;code&gt;migrate&lt;/code&gt;&lt;/a&gt;. The &lt;a href=&quot;../ref/django-admin#django-admin-migrate&quot;&gt;&lt;code&gt;migrate&lt;/code&gt;&lt;/a&gt; command will only run migrations for apps in &lt;a href=&quot;../ref/settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">上で述べたように、デフォルトのアプリケーションは一般的なケースに含まれていますが、誰もがそれらを必要とするわけではありません。それらの一部またはすべてが必要ない場合は、&lt;a href=&quot;../ref/django-admin#django-admin-migrate&quot;&gt; &lt;code&gt;migrate&lt;/code&gt; を&lt;/a&gt;実行する前に、コメントアウトするか、&lt;a href=&quot;../ref/settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt;から適切な行を削除してください。&lt;a href=&quot;../ref/django-admin#django-admin-migrate&quot;&gt; &lt;code&gt;migrate&lt;/code&gt; &lt;/a&gt;コマンドは、のみでのアプリケーションのためのマイグレーションを実行します&lt;a href=&quot;../ref/settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="66be0fca21e376129e6c827671f94aa60b75b0e6" translate="yes" xml:space="preserve">
          <source>Likewise &lt;code&gt;django.template.backends.django.Template&lt;/code&gt; is a thin wrapper adapting &lt;a href=&quot;../ref/templates/api#django.template.Template&quot;&gt;&lt;code&gt;django.template.Template&lt;/code&gt;&lt;/a&gt; to the common template API.</source>
          <target state="translated">同様に、 &lt;code&gt;django.template.backends.django.Template&lt;/code&gt; は、&lt;a href=&quot;../ref/templates/api#django.template.Template&quot;&gt; &lt;code&gt;django.template.Template&lt;/code&gt; &lt;/a&gt;を一般的なテンプレートAPIに適応させる薄いラッパーです。</target>
        </trans-unit>
        <trans-unit id="bd395412545993aaaed91e9a0591200ef0116d19" translate="yes" xml:space="preserve">
          <source>Likewise, &lt;a href=&quot;#django.contrib.contenttypes.fields.GenericForeignKey&quot;&gt;&lt;code&gt;GenericForeignKey&lt;/code&gt;&lt;/a&gt;s does not appear in &lt;a href=&quot;../../topics/forms/modelforms#django.forms.ModelForm&quot;&gt;&lt;code&gt;ModelForm&lt;/code&gt;&lt;/a&gt;s.</source>
          <target state="translated">同様に、&lt;a href=&quot;#django.contrib.contenttypes.fields.GenericForeignKey&quot;&gt; &lt;code&gt;GenericForeignKey&lt;/code&gt; &lt;/a&gt;は&lt;a href=&quot;../../topics/forms/modelforms#django.forms.ModelForm&quot;&gt; &lt;code&gt;ModelForm&lt;/code&gt; に&lt;/a&gt;は表示されません。</target>
        </trans-unit>
        <trans-unit id="65651098030cec17f9add3564fabd28b9a8d889b" translate="yes" xml:space="preserve">
          <source>Likewise, Django provides the &lt;a href=&quot;#django.test.modify_settings&quot;&gt;&lt;code&gt;modify_settings()&lt;/code&gt;&lt;/a&gt; decorator:</source>
          <target state="translated">同様に、Djangoは&lt;a href=&quot;#django.test.modify_settings&quot;&gt; &lt;code&gt;modify_settings()&lt;/code&gt; &lt;/a&gt;デコレーターを提供します。</target>
        </trans-unit>
        <trans-unit id="a7c04c64ed3f2a9374590c76c50d3b7f1b18e3da" translate="yes" xml:space="preserve">
          <source>Limitations</source>
          <target state="translated">Limitations</target>
        </trans-unit>
        <trans-unit id="a0475d548a6e1cbd1322fc0c9137a9116d5fd248" translate="yes" xml:space="preserve">
          <source>Limitations of multiple databases</source>
          <target state="translated">複数データベースの制限</target>
        </trans-unit>
        <trans-unit id="81293e5c309d9dfcca7d5d8a02e465126af1192c" translate="yes" xml:space="preserve">
          <source>Limitations of the provided locale formats</source>
          <target state="translated">提供するロケール形式の制限</target>
        </trans-unit>
        <trans-unit id="8189faab6b029cc653b33f4c4750aed9ad4c8f5a" translate="yes" xml:space="preserve">
          <source>Limitations with string literals</source>
          <target state="translated">文字列リテラルの制限</target>
        </trans-unit>
        <trans-unit id="7bcda513dc4ecc2e4b423a51154674ffc93ff9ff" translate="yes" xml:space="preserve">
          <source>Limiting &lt;code&gt;QuerySet&lt;/code&gt;s</source>
          <target state="translated">&lt;code&gt;QuerySet&lt;/code&gt; の制限</target>
        </trans-unit>
        <trans-unit id="2ba12ef865c53db8307ed40e2579ac7177efa133" translate="yes" xml:space="preserve">
          <source>Limiting a subquery to a single column</source>
          <target state="translated">サブクエリを単一の列に制限する</target>
        </trans-unit>
        <trans-unit id="971ffbdea2890da7948e9724ae7ef3cf3d664072" translate="yes" xml:space="preserve">
          <source>Limiting access to logged-in users</source>
          <target state="translated">ログインユーザーへのアクセスを制限する</target>
        </trans-unit>
        <trans-unit id="54b02334497290608d1bafc2deca7fc84fc2dfc2" translate="yes" xml:space="preserve">
          <source>Limiting access to logged-in users that pass a test</source>
          <target state="translated">テストに合格したログインユーザーへのアクセスを制限する</target>
        </trans-unit>
        <trans-unit id="bc8f42c384b84979e56038227caf8b777339004f" translate="yes" xml:space="preserve">
          <source>Limiting flatpages by base URL</source>
          <target state="translated">ベースURLによるフラットページの制限</target>
        </trans-unit>
        <trans-unit id="ace73d3c8d253f1855ef095c01717043cd29aa5f" translate="yes" xml:space="preserve">
          <source>Limiting the maximum number of forms</source>
          <target state="translated">帳票の最大数を制限する</target>
        </trans-unit>
        <trans-unit id="756e3264bedaf6f3365711aa7e045d72b4f68c7a" translate="yes" xml:space="preserve">
          <source>Limiting the number of editable objects</source>
          <target state="translated">編集可能なオブジェクトの数を制限する</target>
        </trans-unit>
        <trans-unit id="da88c2fe4acaa5b5968c3b02bdc16c00c7b795f2" translate="yes" xml:space="preserve">
          <source>Limiting the subquery to a single row</source>
          <target state="translated">副問い合わせを1行に限定する</target>
        </trans-unit>
        <trans-unit id="041db2b4ee7faeb26164b54ec59eaa80dec142d2" translate="yes" xml:space="preserve">
          <source>Limits valid inputs to the specified protocol. Accepted values are &lt;code&gt;'both'&lt;/code&gt; (default), &lt;code&gt;'IPv4'&lt;/code&gt; or &lt;code&gt;'IPv6'&lt;/code&gt;. Matching is case insensitive.</source>
          <target state="translated">有効な入力を指定されたプロトコルに制限します。受け入れられる値は &lt;code&gt;'both'&lt;/code&gt; （デフォルト）、 &lt;code&gt;'IPv4'&lt;/code&gt; または &lt;code&gt;'IPv6'&lt;/code&gt; です。マッチングでは大文字と小文字は区別されません。</target>
        </trans-unit>
        <trans-unit id="484b44a0117656cdc1e07d33a88d93a8d2f24ea6" translate="yes" xml:space="preserve">
          <source>Limits valid inputs to the specified protocol. Accepted values are &lt;code&gt;both&lt;/code&gt; (default), &lt;code&gt;IPv4&lt;/code&gt; or &lt;code&gt;IPv6&lt;/code&gt;. Matching is case insensitive.</source>
          <target state="translated">有効な入力を指定されたプロトコルに制限します。受け入れられる値は &lt;code&gt;both&lt;/code&gt; （デフォルト）、 &lt;code&gt;IPv4&lt;/code&gt; または &lt;code&gt;IPv6&lt;/code&gt; です。マッチングでは大文字と小文字は区別されません。</target>
        </trans-unit>
        <trans-unit id="4950b61e87b9227686774b179639eaf32577092a" translate="yes" xml:space="preserve">
          <source>Lines are split using &lt;a href=&quot;https://www.python.org/dev/peps/pep-0278&quot; id=&quot;index-1&quot;&gt;&lt;strong&gt;universal newlines&lt;/strong&gt;&lt;/a&gt;. The following are recognized as ending a line: the Unix end-of-line convention &lt;code&gt;'\n'&lt;/code&gt;, the Windows convention &lt;code&gt;'\r\n'&lt;/code&gt;, and the old Macintosh convention &lt;code&gt;'\r'&lt;/code&gt;.</source>
          <target state="translated">行は、&lt;a href=&quot;https://www.python.org/dev/peps/pep-0278&quot; id=&quot;index-1&quot;&gt;&lt;strong&gt;ユニバーサル改行&lt;/strong&gt;&lt;/a&gt;を使用して分割されます。次の行の終わりとして認識されます：Unixの行末規則 &lt;code&gt;'\n'&lt;/code&gt; 、Windowsの規則 &lt;code&gt;'\r\n'&lt;/code&gt; 、および古いMacintoshの規則 &lt;code&gt;'\r'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="999cfb6c0645f8beaa03ab5c3c2acaad55655c97" translate="yes" xml:space="preserve">
          <source>Lines are split using &lt;a href=&quot;https://www.python.org/dev/peps/pep-0278&quot;&gt;universal newlines&lt;/a&gt;. The following are recognized as ending a line: the Unix end-of-line convention &lt;code&gt;'\n'&lt;/code&gt;, the Windows convention &lt;code&gt;'\r\n'&lt;/code&gt;, and the old Macintosh convention &lt;code&gt;'\r'&lt;/code&gt;.</source>
          <target state="translated">行は、&lt;a href=&quot;https://www.python.org/dev/peps/pep-0278&quot;&gt;ユニバーサル改行&lt;/a&gt;を使用して分割されます。行末として認識されるのは、Unixの行末の規則 &lt;code&gt;'\n'&lt;/code&gt; 、Windowsの規則 &lt;code&gt;'\r\n'&lt;/code&gt; 、および古いMacintoshの規則 &lt;code&gt;'\r'&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="d0517071aa376e797705058bbad4b658954b9930" translate="yes" xml:space="preserve">
          <source>Link</source>
          <target state="translated">Link</target>
        </trans-unit>
        <trans-unit id="157c974c5568be5651b5bfe24c42d2205c9b6e69" translate="yes" xml:space="preserve">
          <source>Link (Benoit)</source>
          <target state="translated">リンク(ブノワ</target>
        </trans-unit>
        <trans-unit id="64590bd60ee31dd14805fcf870b334ba2446be7e" translate="yes" xml:space="preserve">
          <source>Link (Sears)</source>
          <target state="translated">リンク(シアーズ</target>
        </trans-unit>
        <trans-unit id="7cb5f491ca042b503781828280e205f3f1b3e730" translate="yes" xml:space="preserve">
          <source>Link to the URL of the OpenLayers JavaScript. Defaults to &lt;code&gt;'https://cdnjs.cloudflare.com/ajax/libs/openlayers/2.13.1/OpenLayers.js'&lt;/code&gt;.</source>
          <target state="translated">OpenLayers JavaScriptのURLにリンクします。デフォルトは &lt;code&gt;'https://cdnjs.cloudflare.com/ajax/libs/openlayers/2.13.1/OpenLayers.js'&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="bc86c03eac3b683df07db61068268361cd20abb1" translate="yes" xml:space="preserve">
          <source>Links can have trailing punctuation (periods, commas, close-parens) and leading punctuation (opening parens), and &lt;code&gt;urlize&lt;/code&gt; will still do the right thing.</source>
          <target state="translated">リンクには、末尾の句読点（ピリオド、コンマ、閉じ括弧）と先頭の句読点（開き括弧）を &lt;code&gt;urlize&lt;/code&gt; ことができ、urlizeは正しいことを行います。</target>
        </trans-unit>
        <trans-unit id="e401e8956761640d7577a37f57e96c4dd3ae2c45" translate="yes" xml:space="preserve">
          <source>Links generated by &lt;code&gt;urlize&lt;/code&gt; have a &lt;code&gt;rel=&quot;nofollow&quot;&lt;/code&gt; attribute added to them.</source>
          <target state="translated">&lt;code&gt;urlize&lt;/code&gt; によって生成されたリンクには、 &lt;code&gt;rel=&quot;nofollow&quot;&lt;/code&gt; 属性が追加されています。</target>
        </trans-unit>
        <trans-unit id="2d28ace15581d25a0bc2e3781306393967a803c6" translate="yes" xml:space="preserve">
          <source>List Views</source>
          <target state="translated">リストビュー</target>
        </trans-unit>
        <trans-unit id="81c12cbc34f26f6d72020d3250e5638a719f3b2a" translate="yes" xml:space="preserve">
          <source>List filter&amp;rsquo;s typically appear only if the filter has more than one choice. A filter&amp;rsquo;s &lt;code&gt;has_output()&lt;/code&gt; method controls whether or not it appears.</source>
          <target state="translated">リストフィルターは通常、フィルターに複数の選択肢がある場合にのみ表示されます。フィルターの &lt;code&gt;has_output()&lt;/code&gt; メソッドは、フィルターが表示されるかどうかを制御します。</target>
        </trans-unit>
        <trans-unit id="1ff8b40e6d20a6ad55bbd98426ac2eef042a84ff" translate="yes" xml:space="preserve">
          <source>List of all bands of the source, as &lt;a href=&quot;#django.contrib.gis.gdal.GDALBand&quot;&gt;&lt;code&gt;GDALBand&lt;/code&gt;&lt;/a&gt; instances.</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.gis.gdal.GDALBand&quot;&gt; &lt;code&gt;GDALBand&lt;/code&gt; &lt;/a&gt;インスタンスとしてのソースのすべてのバンドのリスト。</target>
        </trans-unit>
        <trans-unit id="1d8ec93e18fcf7be286a5711b8624e9d5492b5aa" translate="yes" xml:space="preserve">
          <source>List of compiled regular expression objects describing URLs that should be ignored when reporting HTTP 404 errors via email (see &lt;a href=&quot;../howto/error-reporting&quot;&gt;Error reporting&lt;/a&gt;). Regular expressions are matched against &lt;a href=&quot;request-response#django.http.HttpRequest.get_full_path&quot;&gt;&lt;code&gt;request's full paths&lt;/code&gt;&lt;/a&gt; (including query string, if any). Use this if your site does not provide a commonly requested file such as &lt;code&gt;favicon.ico&lt;/code&gt; or &lt;code&gt;robots.txt&lt;/code&gt;.</source>
          <target state="translated">電子メールでHTTP 404エラーを報告するときに無視する必要のあるURLを記述したコンパイル済み正規表現オブジェクトのリスト（&lt;a href=&quot;../howto/error-reporting&quot;&gt;エラー報告を&lt;/a&gt;参照）。正規表現は、&lt;a href=&quot;request-response#django.http.HttpRequest.get_full_path&quot;&gt; &lt;code&gt;request's full paths&lt;/code&gt; &lt;/a&gt;（存在する場合はクエリ文字列を含む）と照合されます。サイトが &lt;code&gt;favicon.ico&lt;/code&gt; や &lt;code&gt;robots.txt&lt;/code&gt; などの一般的にリクエストされるファイルを提供していない場合に使用します。</target>
        </trans-unit>
        <trans-unit id="71648c8c3058a09ebc7c06c879fc235d24abcec1" translate="yes" xml:space="preserve">
          <source>List of compiled regular expression objects representing User-Agent strings that are not allowed to visit any page, systemwide. Use this for bots/crawlers. This is only used if &lt;code&gt;CommonMiddleware&lt;/code&gt; is installed (see &lt;a href=&quot;../topics/http/middleware&quot;&gt;Middleware&lt;/a&gt;).</source>
          <target state="translated">システム全体でどのページにもアクセスできないユーザーエージェント文字列を表すコンパイル済み正規表現オブジェクトのリスト。これをボット/クローラーに使用します。これは、 &lt;code&gt;CommonMiddleware&lt;/code&gt; がインストールされている場合にのみ使用されます（&lt;a href=&quot;../topics/http/middleware&quot;&gt;Middlewareを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="4144455cc383697baac646a1657f81571b944123" translate="yes" xml:space="preserve">
          <source>List of database features that the current connection should have so that the model is considered during the migration phase. For example, if you set this list to &lt;code&gt;['gis_enabled']&lt;/code&gt;, the model will only be synchronized on GIS-enabled databases. It&amp;rsquo;s also useful to skip some models when testing with several database backends. Avoid relations between models that may or may not be created as the ORM doesn&amp;rsquo;t handle this.</source>
          <target state="translated">移行フェーズ中にモデルが考慮されるように、現在の接続に必要なデータベース機能のリスト。たとえば、このリストを &lt;code&gt;['gis_enabled']&lt;/code&gt; に設定すると、モデルはGIS対応データベースでのみ同期されます。複数のデータベースバックエンドでテストする場合、一部のモデルをスキップすることも役立ちます。ORMがこれを処理しないため、作成される可能性がある、または作成されない可能性があるモデル間の関係を回避します。</target>
        </trans-unit>
        <trans-unit id="5a9854912df2ed5719acad92971c25d37b901483" translate="yes" xml:space="preserve">
          <source>List of directories searched for fixture files, in addition to the &lt;code&gt;fixtures&lt;/code&gt; directory of each application, in search order.</source>
          <target state="translated">各アプリケーションの &lt;code&gt;fixtures&lt;/code&gt; ディレクトリに加えて、フィクスチャファイルを検索したディレクトリのリスト。</target>
        </trans-unit>
        <trans-unit id="ebb3d7aca57a0d0b26fc7bb3082c4d20c9f33257" translate="yes" xml:space="preserve">
          <source>List-index lookup. Example: &lt;code&gt;foo[bar]&lt;/code&gt;</source>
          <target state="translated">リストインデックスのルックアップ。例： &lt;code&gt;foo[bar]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="005f5ea75301f8060217eadfaf3d96dea8ba5cbd" translate="yes" xml:space="preserve">
          <source>Listening to signals</source>
          <target state="translated">信号を聞く</target>
        </trans-unit>
        <trans-unit id="385b28bd6da9bf2d5510b146c5f31381bab45cc6" translate="yes" xml:space="preserve">
          <source>Lists all available tags.</source>
          <target state="translated">利用可能なすべてのタグを一覧表示します。</target>
        </trans-unit>
        <trans-unit id="cc017a8f262082983efe363b211f3361bd8ec506" translate="yes" xml:space="preserve">
          <source>Lists all of the apps Django knows about, the migrations available for each app, and whether or not each migration is applied (marked by an &lt;code&gt;[X]&lt;/code&gt; next to the migration name). For a &lt;code&gt;--verbosity&lt;/code&gt; of 2 and above, the applied datetimes are also shown.</source>
          <target state="translated">Djangoが認識しているすべてのアプリ、各アプリで利用可能な移行、および各移行が適用されているかどうか（移行名の横の &lt;code&gt;[X]&lt;/code&gt; でマーク）を一覧表示します。ため &lt;code&gt;--verbosity&lt;/code&gt; 2以上の、適用された日付時刻も示されています。</target>
        </trans-unit>
        <trans-unit id="39d23e0d858c2bba4fcae0826399057a4e302793" translate="yes" xml:space="preserve">
          <source>Lists of objects follow roughly the same pattern: we need a (possibly paginated) list of objects, typically a &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt;, and then we need to make a &lt;a href=&quot;../../ref/template-response#django.template.response.TemplateResponse&quot;&gt;&lt;code&gt;TemplateResponse&lt;/code&gt;&lt;/a&gt; with a suitable template using that list of objects.</source>
          <target state="translated">オブジェクトのリストはほぼ同じパターンに従います。通常は&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; &lt;/a&gt;であるオブジェクトの（ページ付けされた）リストが必要です。次に、そのオブジェクトのリストを使用して適切なテンプレートで&lt;a href=&quot;../../ref/template-response#django.template.response.TemplateResponse&quot;&gt; &lt;code&gt;TemplateResponse&lt;/code&gt; &lt;/a&gt;を作成する必要があります。</target>
        </trans-unit>
        <trans-unit id="bba7499a41a5ad998706215911b138ebb07a56d1" translate="yes" xml:space="preserve">
          <source>Lists the contents of the specified path, returning a 2-tuple of lists; the first item being directories, the second item being files. For storage systems that aren&amp;rsquo;t able to provide such a listing, this will raise a &lt;code&gt;NotImplementedError&lt;/code&gt; instead.</source>
          <target state="translated">指定されたパスの内容を一覧表示し、2タプルのリストを返します。最初の項目はディレクトリ、2番目の項目はファイルです。そのようなリストを提供できないストレージシステムの場合、これは代わりに &lt;code&gt;NotImplementedError&lt;/code&gt; を発生させます。</target>
        </trans-unit>
        <trans-unit id="e2fb109cdc5372d5cde6e1d6d294486607ffa713" translate="yes" xml:space="preserve">
          <source>Little Endian (e.g., compatible with x86 systems)</source>
          <target state="translated">リトルエンディアン</target>
        </trans-unit>
        <trans-unit id="1266aa8b6dce351b2dce9a52e20e361f295ffe02" translate="yes" xml:space="preserve">
          <source>Load settings from &lt;code&gt;global_settings.py&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;global_settings.py&lt;/code&gt; から設定をロードします。</target>
        </trans-unit>
        <trans-unit id="7d4fc7ccaa44c3bece06261e229b60b0ab1fe883" translate="yes" xml:space="preserve">
          <source>Load settings from the specified settings file, overriding the global settings as necessary.</source>
          <target state="translated">指定した設定ファイルから設定を読み込み、必要に応じてグローバル設定を上書きします。</target>
        </trans-unit>
        <trans-unit id="4c676aefee9fb2f37fc993a5bfdd721edc6feb06" translate="yes" xml:space="preserve">
          <source>Load the &amp;ldquo;Add question&amp;rdquo; page to see how that looks:</source>
          <target state="translated">「質問の追加」ページをロードして、その様子を確認します。</target>
        </trans-unit>
        <trans-unit id="c638de2d7ce3a5989cc00da481232df477e68622" translate="yes" xml:space="preserve">
          <source>Load the page by pointing your browser at &amp;ldquo;/polls/&amp;rdquo;, and you should see a bulleted-list containing the &amp;ldquo;What&amp;rsquo;s up&amp;rdquo; question from &lt;a href=&quot;tutorial02&quot;&gt;Tutorial 2&lt;/a&gt;. The link points to the question&amp;rsquo;s detail page.</source>
          <target state="translated">ブラウザを「/ polls /」にポイントしてページをロードすると、&lt;a href=&quot;tutorial02&quot;&gt;チュートリアル2&lt;/a&gt;の「What's up」質問を含む箇条書きリストが表示されます。リンクは質問の詳細ページを指しています。</target>
        </trans-unit>
        <trans-unit id="bfd5d347be46f19d5af74555db1435a5932c014a" translate="yes" xml:space="preserve">
          <source>Loader methods</source>
          <target state="translated">ローダメソッド</target>
        </trans-unit>
        <trans-unit id="a1aae8262dfa8b38b15f329fe9d720fa2af5ce60" translate="yes" xml:space="preserve">
          <source>Loader types</source>
          <target state="translated">ローダの種類</target>
        </trans-unit>
        <trans-unit id="4f514b04ed6b877534da140af8e12cab5016f713" translate="yes" xml:space="preserve">
          <source>Loaders</source>
          <target state="translated">Loaders</target>
        </trans-unit>
        <trans-unit id="5396847021992af28690eea2559e62fb26911d30" translate="yes" xml:space="preserve">
          <source>Loading a template</source>
          <target state="translated">テンプレートの読み込み</target>
        </trans-unit>
        <trans-unit id="923064241bee3da1b374c1344aae36c3e741a39f" translate="yes" xml:space="preserve">
          <source>Loading fixtures from &lt;code&gt;stdin&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;stdin&lt;/code&gt; からフィクスチャをロードする</target>
        </trans-unit>
        <trans-unit id="04d6db619863f3d513c0c93969b27a39dcbe2838" translate="yes" xml:space="preserve">
          <source>Loading from &lt;code&gt;stdin&lt;/code&gt; is useful with standard input and output redirections. For example:</source>
          <target state="translated">&lt;code&gt;stdin&lt;/code&gt; からのロードは、標準の入力および出力リダイレクトで役立ちます。例えば：</target>
        </trans-unit>
        <trans-unit id="8fb9f7eb8cbdc0a3f102e2624e3f8c578252dcc2" translate="yes" xml:space="preserve">
          <source>Loading templates</source>
          <target state="translated">テンプレートの読み込み</target>
        </trans-unit>
        <trans-unit id="aa3b47e04fbcdf7a0c349a1f65b42792f0bfc04b" translate="yes" xml:space="preserve">
          <source>Loading the settings.</source>
          <target state="translated">設定を読み込みます。</target>
        </trans-unit>
        <trans-unit id="b208b1eada8a869e959c32e9a4f048b2261a0ef9" translate="yes" xml:space="preserve">
          <source>Loads a custom template tag set.</source>
          <target state="translated">カスタムテンプレートのタグセットを読み込みます。</target>
        </trans-unit>
        <trans-unit id="61d26d6567c1e53323e6feb2451badc41e00b872" translate="yes" xml:space="preserve">
          <source>Loads a template and renders it with the current context. This is a way of &amp;ldquo;including&amp;rdquo; other templates within a template.</source>
          <target state="translated">テンプレートを読み込み、現在のコンテキストでレンダリングします。これは、テンプレート内に他のテンプレートを「含める」方法です。</target>
        </trans-unit>
        <trans-unit id="49622805f34b2cbfb5fecab2184d2c2565f31b9e" translate="yes" xml:space="preserve">
          <source>Loads a template with the given name, compiles it and returns a &lt;a href=&quot;#django.template.Template&quot;&gt;&lt;code&gt;Template&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">指定された名前のテンプレートをロードし、それをコンパイルして、&lt;a href=&quot;#django.template.Template&quot;&gt; &lt;code&gt;Template&lt;/code&gt; &lt;/a&gt;オブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="1d87684e495f6d2a5443bdeacec9acb9e892cab6" translate="yes" xml:space="preserve">
          <source>Loads templates from Django apps on the filesystem. For each app in &lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt;, the loader looks for a &lt;code&gt;templates&lt;/code&gt; subdirectory. If the directory exists, Django looks for templates in there.</source>
          <target state="translated">ファイルシステム上のDjangoアプリからテンプレートを読み込みます。&lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; の&lt;/a&gt;各アプリについて、ローダーは &lt;code&gt;templates&lt;/code&gt; サブディレクトリを探します。ディレクトリが存在する場合、Djangoはそこからテンプレートを探します。</target>
        </trans-unit>
        <trans-unit id="9c77b46a82221a37ce360a54ab22eae4cb8567d7" translate="yes" xml:space="preserve">
          <source>Loads templates from a Python dictionary. This is useful for testing.</source>
          <target state="translated">Pythonの辞書からテンプレートを読み込みます。テストに便利です。</target>
        </trans-unit>
        <trans-unit id="5ddb5a6aa66f708e939717a50c081f9b1687855e" translate="yes" xml:space="preserve">
          <source>Loads templates from a given source, such as the filesystem or a database.</source>
          <target state="translated">ファイルシステムやデータベースなど、与えられたソースからテンプレートを読み込みます。</target>
        </trans-unit>
        <trans-unit id="830f927cc5a7a2d6808cd9d4fd807494ffe8af90" translate="yes" xml:space="preserve">
          <source>Loads templates from the filesystem, according to &lt;a href=&quot;../settings#std:setting-TEMPLATES-DIRS&quot;&gt;&lt;code&gt;DIRS&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../settings#std:setting-TEMPLATES-DIRS&quot;&gt; &lt;code&gt;DIRS&lt;/code&gt; &lt;/a&gt;に従って、ファイルシステムからテンプレートをロードします。</target>
        </trans-unit>
        <trans-unit id="e63c9f12a633eb8c9f0b4ac3283d021d46f12d08" translate="yes" xml:space="preserve">
          <source>Local-memory caching</source>
          <target state="translated">ローカルメモリキャッシング</target>
        </trans-unit>
        <trans-unit id="46361934de5303c4bb40033efcb4f3ac07fa41a4" translate="yes" xml:space="preserve">
          <source>Locale aware input in forms</source>
          <target state="translated">フォームでロケールを意識した入力</target>
        </trans-unit>
        <trans-unit id="bba391c6c02e5d2f28c6ce4333f7c807d2ee62f0" translate="yes" xml:space="preserve">
          <source>Locale middleware</source>
          <target state="translated">ロケールミドルウェア</target>
        </trans-unit>
        <trans-unit id="a17bcca1e911b8aa363c850569b580baafa07f8e" translate="yes" xml:space="preserve">
          <source>Localflavor</source>
          <target state="translated">Localflavor</target>
        </trans-unit>
        <trans-unit id="8760fb7a725faf05acb20618178c43773af945a1" translate="yes" xml:space="preserve">
          <source>Localization: how to create language files</source>
          <target state="translated">ローカライゼーション:言語ファイルの作成方法</target>
        </trans-unit>
        <trans-unit id="68d96c3fa930173a29f42dabd119f2ec989ef3cb" translate="yes" xml:space="preserve">
          <source>Localized names of languages</source>
          <target state="translated">地域化された言語名</target>
        </trans-unit>
        <trans-unit id="5bab46afe953180e60cc6486cb0020ee91d03396" translate="yes" xml:space="preserve">
          <source>Lock parents models in &lt;code&gt;select_for_update(of=(...))&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;select_for_update(of=(...))&lt;/code&gt; 親モデルをロックする</target>
        </trans-unit>
        <trans-unit id="420dfa7139dd6d5b31fdef28a0943aa84fccd6c5" translate="yes" xml:space="preserve">
          <source>Log messages related to the handling of requests received by the server invoked by the &lt;a href=&quot;../ref/django-admin#django-admin-runserver&quot;&gt;&lt;code&gt;runserver&lt;/code&gt;&lt;/a&gt; command. HTTP 5XX responses are logged as &lt;code&gt;ERROR&lt;/code&gt; messages, 4XX responses are logged as &lt;code&gt;WARNING&lt;/code&gt; messages, and everything else is logged as &lt;code&gt;INFO&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;../ref/django-admin#django-admin-runserver&quot;&gt; &lt;code&gt;runserver&lt;/code&gt; &lt;/a&gt;コマンドによって呼び出されたサーバーによって受信された要求の処理に関連するログメッセージ。HTTP 5XX応答は &lt;code&gt;ERROR&lt;/code&gt; メッセージとして記録され、4XX応答は &lt;code&gt;WARNING&lt;/code&gt; メッセージとして記録され、それ以外はすべて &lt;code&gt;INFO&lt;/code&gt; として記録されます。</target>
        </trans-unit>
        <trans-unit id="0c50346183ec708677d8278192a3de3bbcc2cc20" translate="yes" xml:space="preserve">
          <source>Log messages related to the handling of requests. 5XX responses are raised as &lt;code&gt;ERROR&lt;/code&gt; messages; 4XX responses are raised as &lt;code&gt;WARNING&lt;/code&gt; messages. Requests that are logged to the &lt;code&gt;django.security&lt;/code&gt; logger aren&amp;rsquo;t logged to &lt;code&gt;django.request&lt;/code&gt;.</source>
          <target state="translated">リクエストの処理に関連するログメッセージ。5XX応答は &lt;code&gt;ERROR&lt;/code&gt; メッセージとして発生します。4XX応答は &lt;code&gt;WARNING&lt;/code&gt; メッセージとして発生します。記録されている要求 &lt;code&gt;django.security&lt;/code&gt; にログインしていませんロガー &lt;code&gt;django.request&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="eb8b376a6ea0f93bedb4b80549e00d705797b62b" translate="yes" xml:space="preserve">
          <source>Log messages related to the rendering of templates.</source>
          <target state="translated">テンプレートのレンダリングに関連するログメッセージ</target>
        </trans-unit>
        <trans-unit id="012294fbc07fc652fdbbd3b8b48183b6e7925dda" translate="yes" xml:space="preserve">
          <source>Loggers</source>
          <target state="translated">Loggers</target>
        </trans-unit>
        <trans-unit id="57003616863fe634c645e342ee9080681e419c5f" translate="yes" xml:space="preserve">
          <source>Logging</source>
          <target state="translated">Logging</target>
        </trans-unit>
        <trans-unit id="b6197073d1ec39358a4e3d845faf24f41158555a" translate="yes" xml:space="preserve">
          <source>Logging is configured as part of the general Django &lt;code&gt;setup()&lt;/code&gt; function. Therefore, you can be certain that loggers are always ready for use in your project code.</source>
          <target state="translated">ロギングは、一般的なDjangoの &lt;code&gt;setup()&lt;/code&gt; 関数の一部として構成されます。したがって、ロガーが常にプロジェクトコードで使用できる状態になっていることを確認できます。</target>
        </trans-unit>
        <trans-unit id="3ea927f6b85c95ca60f956a27e51826d1f034e33" translate="yes" xml:space="preserve">
          <source>Logging of each request and response of the server is sent to the &lt;a href=&quot;../topics/logging#django-server-logger&quot;&gt;django.server&lt;/a&gt; logger.</source>
          <target state="translated">サーバーの各要求と応答のロギングは、&lt;a href=&quot;../topics/logging#django-server-logger&quot;&gt;django.server&lt;/a&gt;ロガーに送信されます。</target>
        </trans-unit>
        <trans-unit id="4e5a2893bdcc7d239c1db72e4c4ffbe4bea73174" translate="yes" xml:space="preserve">
          <source>Login</source>
          <target state="translated">Login</target>
        </trans-unit>
        <trans-unit id="97896e639ea44756e547cd457bf906c408b31625" translate="yes" xml:space="preserve">
          <source>Login and logout signals</source>
          <target state="translated">ログインとログアウトの信号</target>
        </trans-unit>
        <trans-unit id="e43d612e11f1568f2373e719d4c4b08dcecdc7cc" translate="yes" xml:space="preserve">
          <source>Logout</source>
          <target state="translated">Logout</target>
        </trans-unit>
        <trans-unit id="0f9949aa8cddbb021036b013be13fcd58f02e95c" translate="yes" xml:space="preserve">
          <source>Logs a user out, then redirects to the login page.</source>
          <target state="translated">ユーザーをログアウトし、ログインページにリダイレクトします。</target>
        </trans-unit>
        <trans-unit id="66a401f8c8dd428897c6bb4440e0e65596927d52" translate="yes" xml:space="preserve">
          <source>Logs a user out.</source>
          <target state="translated">ユーザーをログアウトします。</target>
        </trans-unit>
        <trans-unit id="87c06f7c9c0dd6c7d57a0b80377942859f9c413d" translate="yes" xml:space="preserve">
          <source>Logs the SQL queries that are executed during schema changes to the database by the &lt;a href=&quot;migrations&quot;&gt;migrations framework&lt;/a&gt;. Note that it won&amp;rsquo;t log the queries executed by &lt;a href=&quot;../ref/migration-operations#django.db.migrations.operations.RunPython&quot;&gt;&lt;code&gt;RunPython&lt;/code&gt;&lt;/a&gt;. Messages to this logger have &lt;code&gt;params&lt;/code&gt; and &lt;code&gt;sql&lt;/code&gt; in their extra context (but unlike &lt;code&gt;django.db.backends&lt;/code&gt;, not duration). The values have the same meaning as explained in &lt;a href=&quot;#django-db-logger&quot;&gt;django.db.backends&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;migrations&quot;&gt;移行フレームワーク&lt;/a&gt;によるデータベースへのスキーマ変更中に実行されるSQLクエリをログに記録します。&lt;a href=&quot;../ref/migration-operations#django.db.migrations.operations.RunPython&quot;&gt; &lt;code&gt;RunPython&lt;/code&gt; &lt;/a&gt;によって実行されたクエリはログに記録されないことに注意してください。このロガーへのメッセージには、追加のコンテキストに &lt;code&gt;params&lt;/code&gt; と &lt;code&gt;sql&lt;/code&gt; があります（ただし、期間ではなく &lt;code&gt;django.db.backends&lt;/code&gt; とは異なります）。値は&lt;a href=&quot;#django-db-logger&quot;&gt;django.db.backendsで&lt;/a&gt;説明されているのと同じ意味を持っています。</target>
        </trans-unit>
        <trans-unit id="cf24eeb1b831855c84e20ffbab85ed0e2e98d15d" translate="yes" xml:space="preserve">
          <source>Long messages are a special case. There, the first string directly after the &lt;code&gt;msgstr&lt;/code&gt; (or &lt;code&gt;msgid&lt;/code&gt;) is an empty string. Then the content itself will be written over the next few lines as one string per line. Those strings are directly concatenated. Don&amp;rsquo;t forget trailing spaces within the strings; otherwise, they&amp;rsquo;ll be tacked together without whitespace!</source>
          <target state="translated">長いメッセージは特殊なケースです。そこでは、 &lt;code&gt;msgstr&lt;/code&gt; （または &lt;code&gt;msgid&lt;/code&gt; ）の直後の最初の文字列は空の文字列です。次に、コンテンツ自体が次の数行に1行に1つの文字列として書き込まれます。これらの文字列は直接連結されます。文字列内の末尾のスペースを忘れないでください。それ以外の場合は、空白なしで結合されます。</target>
        </trans-unit>
        <trans-unit id="03896792266b6c37fcddf34ea02218f44b413da5" translate="yes" xml:space="preserve">
          <source>Look at the &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/internals/deprecation/&quot;&gt;deprecation timeline&lt;/a&gt; for the relevant versions.</source>
          <target state="translated">関連するバージョンの&lt;a href=&quot;https://docs.djangoproject.com/en/3.0/internals/deprecation/&quot;&gt;サポート終了スケジュール&lt;/a&gt;を確認してください。</target>
        </trans-unit>
        <trans-unit id="5af33b9589e0e69caaf074435cb5759b4f613642" translate="yes" xml:space="preserve">
          <source>Look at the &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/internals/deprecation/&quot;&gt;deprecation timeline&lt;/a&gt; for the relevant versions.</source>
          <target state="translated">関連するバージョンの&lt;a href=&quot;https://docs.djangoproject.com/en/3.1/internals/deprecation/&quot;&gt;非推奨のタイムライン&lt;/a&gt;を確認してください。</target>
        </trans-unit>
        <trans-unit id="18573a3026539551f5ffe80fbc3fab6545f17122" translate="yes" xml:space="preserve">
          <source>Look at the existing Django fields (in &lt;code&gt;django/db/models/fields/__init__.py&lt;/code&gt;) for inspiration. Try to find a field that&amp;rsquo;s similar to what you want and extend it a little bit, instead of creating an entirely new field from scratch.</source>
          <target state="translated">（ &lt;code&gt;django/db/models/fields/__init__.py&lt;/code&gt; にある）既存のDjangoフィールドを見てインスピレーションを得ます。まったく新しいフィールドを最初から作成するのではなく、必要なフィールドに似ているフィールドを見つけて少し拡張してみてください。</target>
        </trans-unit>
        <trans-unit id="83e1377578dd2108d8423c7213ffe8bd30534cc0" translate="yes" xml:space="preserve">
          <source>Looking for specific information? Try the &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/genindex/&quot;&gt;Index&lt;/a&gt;, &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/py-modindex/&quot;&gt;Module Index&lt;/a&gt; or the &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/contents/&quot;&gt;detailed table of contents&lt;/a&gt;.</source>
          <target state="translated">特定の情報をお探しですか？&lt;a href=&quot;https://docs.djangoproject.com/en/3.0/genindex/&quot;&gt;インデックス&lt;/a&gt;、&lt;a href=&quot;https://docs.djangoproject.com/en/3.0/py-modindex/&quot;&gt;モジュールインデックス、&lt;/a&gt;または&lt;a href=&quot;https://docs.djangoproject.com/en/3.0/contents/&quot;&gt;詳細な目次をお&lt;/a&gt;試しください。</target>
        </trans-unit>
        <trans-unit id="4f996a5b4afddf8e02528b8b854ebf578315565a" translate="yes" xml:space="preserve">
          <source>Looking for specific information? Try the &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/genindex/&quot;&gt;Index&lt;/a&gt;, &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/py-modindex/&quot;&gt;Module Index&lt;/a&gt; or the &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/contents/&quot;&gt;detailed table of contents&lt;/a&gt;.</source>
          <target state="translated">特定の情報をお探しですか？&lt;a href=&quot;https://docs.djangoproject.com/en/3.1/genindex/&quot;&gt;インデックス&lt;/a&gt;、&lt;a href=&quot;https://docs.djangoproject.com/en/3.1/py-modindex/&quot;&gt;モジュールインデックス、&lt;/a&gt;または&lt;a href=&quot;https://docs.djangoproject.com/en/3.1/contents/&quot;&gt;詳細な目次を&lt;/a&gt;試してください。</target>
        </trans-unit>
        <trans-unit id="a570127f6a268f5a693b78694a0e6f069ee259be" translate="yes" xml:space="preserve">
          <source>Looking for tests in any file below the current directory whose name matches the pattern &lt;code&gt;test*.py&lt;/code&gt;.</source>
          <target state="translated">名前がパターン &lt;code&gt;test*.py&lt;/code&gt; と一致する、現在のディレクトリの下のファイルでテストを探します。</target>
        </trans-unit>
        <trans-unit id="7015ab4fc4ea24735dbe884238cc1b54bf915eca" translate="yes" xml:space="preserve">
          <source>Lookup</source>
          <target state="translated">Lookup</target>
        </trans-unit>
        <trans-unit id="4f97f5f4ebefacc529850a4ccae9c3992e1498e3" translate="yes" xml:space="preserve">
          <source>Lookup API reference</source>
          <target state="translated">ルックアップ API リファレンス</target>
        </trans-unit>
        <trans-unit id="0830ad654338d012cacdd174149c78b55003fa0c" translate="yes" xml:space="preserve">
          <source>Lookup Type</source>
          <target state="translated">ルックアップタイプ</target>
        </trans-unit>
        <trans-unit id="b1e95b80675fe4de22a35ddb29898c8e5ee137e9" translate="yes" xml:space="preserve">
          <source>Lookup a &lt;a href=&quot;#django.contrib.contenttypes.models.ContentType&quot;&gt;&lt;code&gt;ContentType&lt;/code&gt;&lt;/a&gt; by ID. Since this method uses the same shared cache as &lt;a href=&quot;#django.contrib.contenttypes.models.ContentTypeManager.get_for_model&quot;&gt;&lt;code&gt;get_for_model()&lt;/code&gt;&lt;/a&gt;, it&amp;rsquo;s preferred to use this method over the usual &lt;code&gt;ContentType.objects.get(pk=id)&lt;/code&gt;</source>
          <target state="translated">IDで&lt;a href=&quot;#django.contrib.contenttypes.models.ContentType&quot;&gt; &lt;code&gt;ContentType&lt;/code&gt; を&lt;/a&gt;検索します。このメソッドは&lt;a href=&quot;#django.contrib.contenttypes.models.ContentTypeManager.get_for_model&quot;&gt; &lt;code&gt;get_for_model()&lt;/code&gt; &lt;/a&gt;と同じ共有キャッシュを使用するため、通常の &lt;code&gt;ContentType.objects.get(pk=id)&lt;/code&gt; よりもこのメソッドを使用することをお勧めします</target>
        </trans-unit>
        <trans-unit id="4af7afda67ab90eca349b13f266deab4ec35aa10" translate="yes" xml:space="preserve">
          <source>Lookup functions can mix the use of &lt;code&gt;Q&lt;/code&gt; objects and keyword arguments. All arguments provided to a lookup function (be they keyword arguments or &lt;code&gt;Q&lt;/code&gt; objects) are &amp;ldquo;AND&amp;rdquo;ed together. However, if a &lt;code&gt;Q&lt;/code&gt; object is provided, it must precede the definition of any keyword arguments. For example:</source>
          <target state="translated">ルックアップ関数は、 &lt;code&gt;Q&lt;/code&gt; オブジェクトとキーワード引数の使用を混在させることができます。ルックアップ関数に提供されるすべての引数（キーワード引数または &lt;code&gt;Q&lt;/code&gt; オブジェクト）は、「AND」演算されます。ただし、 &lt;code&gt;Q&lt;/code&gt; オブジェクトを指定する場合は、キーワード引数の定義の前に置く必要があります。例えば：</target>
        </trans-unit>
        <trans-unit id="6dbdad9ff3b7e8efdd58c11f1971a5b0ed14de47" translate="yes" xml:space="preserve">
          <source>Lookup parameters, which should be in the format accepted by &lt;code&gt;get()&lt;/code&gt; and &lt;code&gt;filter()&lt;/code&gt;.</source>
          <target state="translated">ルックアップパラメータ。get &lt;code&gt;get()&lt;/code&gt; および &lt;code&gt;filter()&lt;/code&gt; で受け入れられる形式である必要があります。</target>
        </trans-unit>
        <trans-unit id="ca99d305ed0945b8d9e457a1542829a19f19f1ac" translate="yes" xml:space="preserve">
          <source>Lookup registration can also be done using a decorator pattern:</source>
          <target state="translated">ルックアップ登録は、デコレータパターンを使って行うこともできます。</target>
        </trans-unit>
        <trans-unit id="1c22627487f1bdeac0afcbce546d80cd4f51d447" translate="yes" xml:space="preserve">
          <source>Lookups created with custom &lt;code&gt;to_attr&lt;/code&gt; can still be traversed as usual by other lookups:</source>
          <target state="translated">カスタム &lt;code&gt;to_attr&lt;/code&gt; で作成されたルックアップは、他のルックアップによって通常どおりトラバースできます。</target>
        </trans-unit>
        <trans-unit id="4795e11216648d84c91f69381932d7a8fe148e20" translate="yes" xml:space="preserve">
          <source>Lookups implementation is different in &lt;a href=&quot;../../ref/models/fields#django.db.models.JSONField&quot;&gt;&lt;code&gt;JSONField&lt;/code&gt;&lt;/a&gt;, mainly due to the existence of key transformations. To demonstrate, we will use the following example model:</source>
          <target state="translated">ルックアップの実装は、主にキー変換が存在するため、&lt;a href=&quot;../../ref/models/fields#django.db.models.JSONField&quot;&gt; &lt;code&gt;JSONField&lt;/code&gt; &lt;/a&gt;では異なります。実例を示すために、次のモデル例を使用します。</target>
        </trans-unit>
        <trans-unit id="bbbc446cd89bbc9f91a61c8d1b7883a4754c0d07" translate="yes" xml:space="preserve">
          <source>Lookups on PostgreSQL</source>
          <target state="translated">PostgreSQLでの検索</target>
        </trans-unit>
        <trans-unit id="3a6deca122475cb7b177894a1abc642b3c450ad4" translate="yes" xml:space="preserve">
          <source>Lookups that span relationships</source>
          <target state="translated">関係性にまたがるルックアップ</target>
        </trans-unit>
        <trans-unit id="17694782d38160dbec7f61575168852ee61ca592" translate="yes" xml:space="preserve">
          <source>Lookups with rasters</source>
          <target state="translated">ラスタでのルックアップ</target>
        </trans-unit>
        <trans-unit id="2d971984dd21acc2315cc2384dc6c3cc1e2750fe" translate="yes" xml:space="preserve">
          <source>Loop over each item in an array. For example, to display a list of athletes provided in &lt;code&gt;athlete_list&lt;/code&gt;:</source>
          <target state="translated">配列内の各項目をループします。たとえば、 &lt;code&gt;athlete_list&lt;/code&gt; で提供されている選手のリストを表示するには、次のように入力します。</target>
        </trans-unit>
        <trans-unit id="4985599a33aedbf517ed7d854dc30df88bcd0eb8" translate="yes" xml:space="preserve">
          <source>Loopback addresses and reserved IP spaces are considered valid. Literal IPv6 addresses (&lt;a href=&quot;https://tools.ietf.org/html/rfc3986.html#section-3.2.2&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;RFC 3986#section-3.2.2&lt;/strong&gt;&lt;/a&gt;) and Unicode domains are both supported.</source>
          <target state="translated">ループバックアドレスと予約済みIPスペースは有効と見なされます。リテラルIPv6アドレス（&lt;a href=&quot;https://tools.ietf.org/html/rfc3986.html#section-3.2.2&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;RFC 3986＃section-3.2.2&lt;/strong&gt;&lt;/a&gt;）とUnicodeドメインの両方がサポートされています。</target>
        </trans-unit>
        <trans-unit id="45543809fe6d79257df2fcb2ced01e5639318229" translate="yes" xml:space="preserve">
          <source>Loopback addresses and reserved IP spaces are considered valid. Literal IPv6 addresses (&lt;a href=&quot;https://tools.ietf.org/html/rfc3986.html#section-3.2.2&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;RFC 3986#section-3.2.2&lt;/strong&gt;&lt;/a&gt;) and unicode domains are both supported.</source>
          <target state="translated">ループバックアドレスと予約済みIPスペースは有効と見なされます。リテラルIPv6アドレス（&lt;a href=&quot;https://tools.ietf.org/html/rfc3986.html#section-3.2.2&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;RFC 3986＃section-3.2.2&lt;/strong&gt;&lt;/a&gt;）とUnicodeドメインの両方がサポートされています。</target>
        </trans-unit>
        <trans-unit id="d2e6ddef874e97d78c2e355736d665c5eb63bdd9" translate="yes" xml:space="preserve">
          <source>Looping over &lt;code&gt;UploadedFile.chunks()&lt;/code&gt; instead of using &lt;code&gt;read()&lt;/code&gt; ensures that large files don&amp;rsquo;t overwhelm your system&amp;rsquo;s memory.</source>
          <target state="translated">&lt;code&gt;read()&lt;/code&gt; を使用する代わりに &lt;code&gt;UploadedFile.chunks()&lt;/code&gt; をループすることで、大きなファイルがシステムのメモリを圧迫しないようにします。</target>
        </trans-unit>
        <trans-unit id="b87879ecc3324ca1b5b68b1f628f788675da7274" translate="yes" xml:space="preserve">
          <source>Looping over hidden and visible fields</source>
          <target state="translated">隠されたフィールドと可視フィールドのループ</target>
        </trans-unit>
        <trans-unit id="85f78f8afb120cb4e8208c1f6510826e775fef6c" translate="yes" xml:space="preserve">
          <source>Looping over the form&amp;rsquo;s fields</source>
          <target state="translated">フォームのフィールドをループする</target>
        </trans-unit>
        <trans-unit id="92dfee36a072d60f39ed8b943312cd16aba50fa1" translate="yes" xml:space="preserve">
          <source>Loops over each item in an array, making the item available in a context variable. For example, to display a list of athletes provided in &lt;code&gt;athlete_list&lt;/code&gt;:</source>
          <target state="translated">配列内の各項目をループし、項目をコンテキスト変数で使用できるようにします。たとえば、 &lt;code&gt;athlete_list&lt;/code&gt; で提供されている選手のリストを表示するには、次のように入力します。</target>
        </trans-unit>
        <trans-unit id="52be3d0c545bc3018bcc23a2c3ea2eb6d6395ec3" translate="yes" xml:space="preserve">
          <source>Loosely-coupled to GeoDjango. For example, &lt;a href=&quot;#django.contrib.gis.geos.GEOSGeometry&quot;&gt;&lt;code&gt;GEOSGeometry&lt;/code&gt;&lt;/a&gt; objects may be used outside of a Django project/application. In other words, no need to have &lt;a href=&quot;../../../topics/settings#envvar-DJANGO_SETTINGS_MODULE&quot; id=&quot;index-0&quot;&gt;&lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt;&lt;/a&gt; set or use a database, etc.</source>
          <target state="translated">GeoDjangoに疎結合されています。たとえば、&lt;a href=&quot;#django.contrib.gis.geos.GEOSGeometry&quot;&gt; &lt;code&gt;GEOSGeometry&lt;/code&gt; &lt;/a&gt;オブジェクトはDjangoプロジェクト/アプリケーションの外部で使用できます。つまり、&lt;a href=&quot;../../../topics/settings#envvar-DJANGO_SETTINGS_MODULE&quot; id=&quot;index-0&quot;&gt; &lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt; を&lt;/a&gt;設定したり、データベースを使用したりする必要はありません。</target>
        </trans-unit>
        <trans-unit id="2f5ba0d2ee5986d496178175529d1a820e6c2011" translate="yes" xml:space="preserve">
          <source>Loosely-coupled to GeoDjango. For example, &lt;a href=&quot;#django.contrib.gis.geos.GEOSGeometry&quot;&gt;&lt;code&gt;GEOSGeometry&lt;/code&gt;&lt;/a&gt; objects may be used outside of a Django project/application. In other words, no need to have &lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt; set or use a database, etc.</source>
          <target state="translated">GeoDjangoと疎結合。たとえば、&lt;a href=&quot;#django.contrib.gis.geos.GEOSGeometry&quot;&gt; &lt;code&gt;GEOSGeometry&lt;/code&gt; &lt;/a&gt;オブジェクトは、Djangoプロジェクト/アプリケーションの外部で使用できます。つまり、 &lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt; を設定したり、データベースを使用したりする必要はありません。</target>
        </trans-unit>
        <trans-unit id="18995b9d14f4d8a9703ab1e599060a15073564b7" translate="yes" xml:space="preserve">
          <source>Loosely-coupled, high-level Python interfaces for GIS geometry and raster operations and data manipulation in different formats.</source>
          <target state="translated">GISのジオメトリやラスタ操作、異なるフォーマットでのデータ操作のための、ゆるやかに結合された高レベルのPythonインターフェース。</target>
        </trans-unit>
        <trans-unit id="d14c62a5e247e1d3a0c3e590257851d326591f90" translate="yes" xml:space="preserve">
          <source>Low bandwidth connection?</source>
          <target state="translated">低帯域接続?</target>
        </trans-unit>
        <trans-unit id="b38b638f8a783319921b9ded343024596436ca9a" translate="yes" xml:space="preserve">
          <source>Low-level APIs</source>
          <target state="translated">低レベルAPI</target>
        </trans-unit>
        <trans-unit id="bb82d98842b53ea8e4fc0ba928b83950cba983a9" translate="yes" xml:space="preserve">
          <source>MEDIA_ROOT, DEFAULT_FILE_STORAGE</source>
          <target state="translated">MEDIA_ROOT,DEFAULT_FILE_STORAGE</target>
        </trans-unit>
        <trans-unit id="07a4d61f0acbbb95318a8a2d2e1f3a3b76934273" translate="yes" xml:space="preserve">
          <source>MacPorts</source>
          <target state="translated">MacPorts</target>
        </trans-unit>
        <trans-unit id="a0d3cf49aa9c486cc3245a67064ef6a90e88d567" translate="yes" xml:space="preserve">
          <source>Mail is sent using the SMTP host and port specified in the &lt;a href=&quot;../ref/settings#std:setting-EMAIL_HOST&quot;&gt;&lt;code&gt;EMAIL_HOST&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../ref/settings#std:setting-EMAIL_PORT&quot;&gt;&lt;code&gt;EMAIL_PORT&lt;/code&gt;&lt;/a&gt; settings. The &lt;a href=&quot;../ref/settings#std:setting-EMAIL_HOST_USER&quot;&gt;&lt;code&gt;EMAIL_HOST_USER&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../ref/settings#std:setting-EMAIL_HOST_PASSWORD&quot;&gt;&lt;code&gt;EMAIL_HOST_PASSWORD&lt;/code&gt;&lt;/a&gt; settings, if set, are used to authenticate to the SMTP server, and the &lt;a href=&quot;../ref/settings#std:setting-EMAIL_USE_TLS&quot;&gt;&lt;code&gt;EMAIL_USE_TLS&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../ref/settings#std:setting-EMAIL_USE_SSL&quot;&gt;&lt;code&gt;EMAIL_USE_SSL&lt;/code&gt;&lt;/a&gt; settings control whether a secure connection is used.</source>
          <target state="translated">メールは、&lt;a href=&quot;../ref/settings#std:setting-EMAIL_HOST&quot;&gt; &lt;code&gt;EMAIL_HOST&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;../ref/settings#std:setting-EMAIL_PORT&quot;&gt; &lt;code&gt;EMAIL_PORT&lt;/code&gt; &lt;/a&gt;設定で指定されたSMTPホストとポートを使用して送信されます。&lt;a href=&quot;../ref/settings#std:setting-EMAIL_HOST_USER&quot;&gt; &lt;code&gt;EMAIL_HOST_USER&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;../ref/settings#std:setting-EMAIL_HOST_PASSWORD&quot;&gt; &lt;code&gt;EMAIL_HOST_PASSWORD&lt;/code&gt; &lt;/a&gt;設定は、設定した場合、SMTPサーバへの認証に使用され、そして&lt;a href=&quot;../ref/settings#std:setting-EMAIL_USE_TLS&quot;&gt; &lt;code&gt;EMAIL_USE_TLS&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;../ref/settings#std:setting-EMAIL_USE_SSL&quot;&gt; &lt;code&gt;EMAIL_USE_SSL&lt;/code&gt; &lt;/a&gt;設定コントロールは、安全な接続が使用されるかどうか。</target>
        </trans-unit>
        <trans-unit id="2045c2b3b3410d03382b7449be956846f013a676" translate="yes" xml:space="preserve">
          <source>Mails the email addresses specified in &lt;a href=&quot;settings#std:setting-ADMINS&quot;&gt;&lt;code&gt;ADMINS&lt;/code&gt;&lt;/a&gt; using &lt;a href=&quot;../topics/email#django.core.mail.mail_admins&quot;&gt;&lt;code&gt;mail_admins()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../topics/email#django.core.mail.mail_admins&quot;&gt; &lt;code&gt;mail_admins()&lt;/code&gt; &lt;/a&gt;を使用して、&lt;a href=&quot;settings#std:setting-ADMINS&quot;&gt; &lt;code&gt;ADMINS&lt;/code&gt; で&lt;/a&gt;指定された電子メールアドレスにメールを送信します。</target>
        </trans-unit>
        <trans-unit id="09447360b87529c4e200002f47e5957ff5712079" translate="yes" xml:space="preserve">
          <source>Mails the email addresses specified in &lt;a href=&quot;settings#std:setting-MANAGERS&quot;&gt;&lt;code&gt;MANAGERS&lt;/code&gt;&lt;/a&gt; using &lt;a href=&quot;../topics/email#django.core.mail.mail_managers&quot;&gt;&lt;code&gt;mail_managers()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../topics/email#django.core.mail.mail_managers&quot;&gt; &lt;code&gt;mail_managers()&lt;/code&gt; &lt;/a&gt;を使用して、&lt;a href=&quot;settings#std:setting-MANAGERS&quot;&gt; &lt;code&gt;MANAGERS&lt;/code&gt; で&lt;/a&gt;指定されたメールアドレスにメールを送信します。</target>
        </trans-unit>
        <trans-unit id="7b99cc729613bb252546c2ed4313e808dbf5dd8a" translate="yes" xml:space="preserve">
          <source>Make sure ALL of the following are true before setting this (assuming the values from the example above):</source>
          <target state="translated">これを設定する前に、以下のすべてが真であることを確認してください(上記の例の値を想定しています)。</target>
        </trans-unit>
        <trans-unit id="aa35ed7a8f70d5ae8a72a8185bfd890e5ab93011" translate="yes" xml:space="preserve">
          <source>Make sure it&amp;rsquo;s one of the first middleware installed.</source>
          <target state="translated">インストールされている最初のミドルウェアの1つであることを確認してください。</target>
        </trans-unit>
        <trans-unit id="45c040a2736ded67e62f5c53ffa1a4ec220de726" translate="yes" xml:space="preserve">
          <source>Make sure that &lt;code&gt;django.contrib.staticfiles&lt;/code&gt; is included in your &lt;a href=&quot;../../ref/settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;django.contrib.staticfiles&lt;/code&gt; が&lt;a href=&quot;../../ref/settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; に&lt;/a&gt;含まれていることを確認してください。</target>
        </trans-unit>
        <trans-unit id="e9525d86fc1dd6d513066076e98a6c857591c199" translate="yes" xml:space="preserve">
          <source>Make sure that &lt;code&gt;mod_auth_basic&lt;/code&gt; and &lt;code&gt;mod_authz_user&lt;/code&gt; are loaded.</source>
          <target state="translated">&lt;code&gt;mod_auth_basic&lt;/code&gt; と &lt;code&gt;mod_authz_user&lt;/code&gt; がロードされていることを確認してください。</target>
        </trans-unit>
        <trans-unit id="69445a55691d7850da50947c34014b2fc4c3ae5d" translate="yes" xml:space="preserve">
          <source>Make sure that mod_wsgi is installed and activated and that you have followed the steps to setup &lt;a href=&quot;modwsgi&quot;&gt;Apache with mod_wsgi&lt;/a&gt;.</source>
          <target state="translated">mod_wsgiがインストールされてアクティブ化されていること、および&lt;a href=&quot;modwsgi&quot;&gt;mod_wsgi&lt;/a&gt;を使用してApacheをセットアップする手順に従っていることを確認してください。</target>
        </trans-unit>
        <trans-unit id="da2abf2d686008baca2b498aeae79af0c709468a" translate="yes" xml:space="preserve">
          <source>Make sure that the Python interpreter can load Django&amp;rsquo;s code. The most convenient way to do this is to use &lt;a href=&quot;https://virtualenv.pypa.io/&quot;&gt;virtualenv&lt;/a&gt;, &lt;a href=&quot;https://virtualenvwrapper.readthedocs.io/en/latest/&quot;&gt;virtualenvwrapper&lt;/a&gt;, and &lt;a href=&quot;https://pip.pypa.io/&quot;&gt;pip&lt;/a&gt;. The &lt;a href=&quot;../intro/contributing&quot;&gt;contributing tutorial&lt;/a&gt; walks through how to create a virtualenv.</source>
          <target state="translated">PythonインタープリターがDjangoのコードをロードできることを確認してください。これを行う最も便利な方法は、&lt;a href=&quot;https://virtualenv.pypa.io/&quot;&gt;virtualenv&lt;/a&gt;、&lt;a href=&quot;https://virtualenvwrapper.readthedocs.io/en/latest/&quot;&gt;virtualenvwrapper&lt;/a&gt;、および&lt;a href=&quot;https://pip.pypa.io/&quot;&gt;pip&lt;/a&gt;を使用することです。&lt;a href=&quot;../intro/contributing&quot;&gt;貢献チュートリアルでは&lt;/a&gt; virtualenvの作成方法をウォークスルー。</target>
        </trans-unit>
        <trans-unit id="2552998128fb2470acabb019c65ec215909bcedc" translate="yes" xml:space="preserve">
          <source>Make sure that the Python interpreter can load Django&amp;rsquo;s code. The most convenient way to do this is to use a virtual environment and &lt;a href=&quot;https://pip.pypa.io/&quot;&gt;pip&lt;/a&gt;. The &lt;a href=&quot;../intro/contributing&quot;&gt;contributing tutorial&lt;/a&gt; walks through how to create a virtual environment.</source>
          <target state="translated">PythonインタープリターがDjangoのコードをロードできることを確認してください。これを行う最も便利な方法は、仮想環境と&lt;a href=&quot;https://pip.pypa.io/&quot;&gt;pip&lt;/a&gt;を使用することです。&lt;a href=&quot;../intro/contributing&quot;&gt;貢献チュートリアルでは、&lt;/a&gt;仮想環境を作成する方法をウォークスルー。</target>
        </trans-unit>
        <trans-unit id="c90fe8d9c88a24bdf2ff7e779cd0a6887772c684" translate="yes" xml:space="preserve">
          <source>Make sure that the key used in production isn&amp;rsquo;t used anywhere else and avoid committing it to source control. This reduces the number of vectors from which an attacker may acquire the key.</source>
          <target state="translated">本番環境で使用されているキーが他の場所で使用されていないことを確認し、キーをソース管理にコミットしないでください。これにより、攻撃者がキーを取得する可能性のあるベクトルの数が減少します。</target>
        </trans-unit>
        <trans-unit id="c1065df190cc28bea4577001c230e0ec7e0f5f5c" translate="yes" xml:space="preserve">
          <source>Make sure that you don&amp;rsquo;t include the above URL within &lt;a href=&quot;#django.conf.urls.i18n.i18n_patterns&quot;&gt;&lt;code&gt;i18n_patterns()&lt;/code&gt;&lt;/a&gt; - it needs to be language-independent itself to work correctly.</source>
          <target state="translated">上記のURLを&lt;a href=&quot;#django.conf.urls.i18n.i18n_patterns&quot;&gt; &lt;code&gt;i18n_patterns()&lt;/code&gt; &lt;/a&gt;内に含めないようにしてください。正しく動作するには、URL 自体が言語に依存しない必要があります。</target>
        </trans-unit>
        <trans-unit id="4d82bc59e1c3d86100d01ee3c8c4d4ac4373a55c" translate="yes" xml:space="preserve">
          <source>Make sure that you have &lt;a href=&quot;https://git-scm.com/&quot;&gt;Git&lt;/a&gt; installed and that you can run its commands from a shell. (Enter &lt;code&gt;git help&lt;/code&gt; at a shell prompt to test this.)</source>
          <target state="translated">&lt;a href=&quot;https://git-scm.com/&quot;&gt;Gitが&lt;/a&gt;インストールされており、そのコマンドをシェルから実行できることを確認してください。（これをテスト &lt;code&gt;git help&lt;/code&gt; は、シェルプロンプトでgit helpと入力します。）</target>
        </trans-unit>
        <trans-unit id="4febd23799488138305eb5481ce515953522d418" translate="yes" xml:space="preserve">
          <source>Make sure that your Python code is outside of the Web server&amp;rsquo;s root. This will ensure that your Python code is not accidentally served as plain text (or accidentally executed).</source>
          <target state="translated">PythonコードがWebサーバーのルートの外にあることを確認してください。これにより、Pythonコードが誤ってプレーンテキストとして提供されない（または誤って実行される）ことがなくなります。</target>
        </trans-unit>
        <trans-unit id="b4d25e9adadc4f10721db1c559ebdebfced81239" translate="yes" xml:space="preserve">
          <source>Make sure the directory pointed-to by this setting either exists and is readable and writable, or that it can be created by the system user under which your Web server runs. Continuing the above example, if your server runs as the user &lt;code&gt;apache&lt;/code&gt;, make sure the directory &lt;code&gt;/var/tmp/django_cache&lt;/code&gt; exists and is readable and writable by the user &lt;code&gt;apache&lt;/code&gt;, or that it can be created by the user &lt;code&gt;apache&lt;/code&gt;.</source>
          <target state="translated">この設定が指すディレクトリが存在し、読み取りと書き込みが可能であること、またはWebサーバーを実行しているシステムユーザーが作成できることを確認してください。ユーザーとしてサーバーで実行されている場合、上記の例を続けると &lt;code&gt;apache&lt;/code&gt; 、確認したディレクトリ &lt;code&gt;/var/tmp/django_cache&lt;/code&gt; 存在し、ユーザーによって読み書き可能である &lt;code&gt;apache&lt;/code&gt; 、またはそれは、ユーザーが作成したことができる &lt;code&gt;apache&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5852dd567ba21a0751232f400af285522c51e4b8" translate="yes" xml:space="preserve">
          <source>Make sure the directory pointed-to by this setting exists and is readable and writable by the system user under which your Web server runs. Continuing the above example, if your server runs as the user &lt;code&gt;apache&lt;/code&gt;, make sure the directory &lt;code&gt;/var/tmp/django_cache&lt;/code&gt; exists and is readable and writable by the user &lt;code&gt;apache&lt;/code&gt;.</source>
          <target state="translated">この設定が指すディレクトリが存在し、Webサーバーが実行されているシステムユーザーが読み取りおよび書き込みできることを確認してください。上記の例を続けて、サーバーがユーザー &lt;code&gt;apache&lt;/code&gt; として実行されている場合は、ディレクトリ &lt;code&gt;/var/tmp/django_cache&lt;/code&gt; が存在し、ユーザー &lt;code&gt;apache&lt;/code&gt; による読み取りと書き込みが可能であることを確認してください。</target>
        </trans-unit>
        <trans-unit id="6792ed36d70833105e98f7e1536ea01606bbfe30" translate="yes" xml:space="preserve">
          <source>Make sure you list all extensions you&amp;rsquo;re using! Otherwise Babel won&amp;rsquo;t recognize the tags defined by these extensions and will ignore Jinja2 templates containing them entirely.</source>
          <target state="translated">使用しているすべての拡張機能を必ずリストしてください！そうしないと、Babelはこれらの拡張機能によって定義されたタグを認識せず、それらを完全に含むJinja2テンプレートを無視します。</target>
        </trans-unit>
        <trans-unit id="8619a1d17175246cf38854aa8293b829b7d1f23b" translate="yes" xml:space="preserve">
          <source>Make sure you&amp;rsquo;ve activated translation for your project (the fastest way is to check if &lt;a href=&quot;../../ref/settings#std:setting-MIDDLEWARE&quot;&gt;&lt;code&gt;MIDDLEWARE&lt;/code&gt;&lt;/a&gt; includes &lt;a href=&quot;../../ref/middleware#django.middleware.locale.LocaleMiddleware&quot;&gt;&lt;code&gt;django.middleware.locale.LocaleMiddleware&lt;/code&gt;&lt;/a&gt;). If you haven&amp;rsquo;t yet, see &lt;a href=&quot;#how-django-discovers-language-preference&quot;&gt;How Django discovers language preference&lt;/a&gt;.</source>
          <target state="translated">プロジェクトの翻訳が有効になっていることを確認してください（最速の方法は、&lt;a href=&quot;../../ref/settings#std:setting-MIDDLEWARE&quot;&gt; &lt;code&gt;MIDDLEWARE&lt;/code&gt; &lt;/a&gt;に&lt;a href=&quot;../../ref/middleware#django.middleware.locale.LocaleMiddleware&quot;&gt; &lt;code&gt;django.middleware.locale.LocaleMiddleware&lt;/code&gt; が&lt;/a&gt;含まれているかどうかを確認することです）。まだの場合は、&lt;a href=&quot;#how-django-discovers-language-preference&quot;&gt;Djangoが言語設定を検出する方法を&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="1c3a7262191d27cdf5c32da423a57d2c31d3d081" translate="yes" xml:space="preserve">
          <source>Make sure you&amp;rsquo;ve installed the &lt;a href=&quot;sites#module-django.contrib.sites&quot;&gt;&lt;code&gt;sites framework&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;sites#module-django.contrib.sites&quot;&gt; &lt;code&gt;sites framework&lt;/code&gt; &lt;/a&gt;がインストールされていることを確認してください。</target>
        </trans-unit>
        <trans-unit id="a9ee1e2048edd25b686838bf844c45d24bc1ae95" translate="yes" xml:space="preserve">
          <source>Make sure your &lt;a href=&quot;../settings#std:setting-TEMPLATES&quot;&gt;&lt;code&gt;TEMPLATES&lt;/code&gt;&lt;/a&gt; setting contains a &lt;code&gt;DjangoTemplates&lt;/code&gt; backend whose &lt;code&gt;APP_DIRS&lt;/code&gt; options is set to &lt;code&gt;True&lt;/code&gt;. It&amp;rsquo;s in there by default, so you&amp;rsquo;ll only need to change this if you&amp;rsquo;ve changed that setting.</source>
          <target state="translated">&lt;a href=&quot;../settings#std:setting-TEMPLATES&quot;&gt; &lt;code&gt;TEMPLATES&lt;/code&gt; &lt;/a&gt;設定に &lt;code&gt;APP_DIRS&lt;/code&gt; オプションが &lt;code&gt;True&lt;/code&gt; に設定されている &lt;code&gt;DjangoTemplates&lt;/code&gt; バックエンドが含まれていることを確認してください。それはデフォルトでそこにあるので、その設定を変更した場合にのみこれを変更する必要があります。</target>
        </trans-unit>
        <trans-unit id="ab1c905ed852730023a7a6e5ec3853b4aa30f7c5" translate="yes" xml:space="preserve">
          <source>Make sure your database is configured to be able to store arbitrary string data. Normally, this means giving it an encoding of UTF-8 or UTF-16. If you use a more restrictive encoding &amp;ndash; for example, latin1 (iso8859-1) &amp;ndash; you won&amp;rsquo;t be able to store certain characters in the database, and information will be lost.</source>
          <target state="translated">データベースが任意の文字列データを格納できるように設定されていることを確認してください。通常、これはUTF-8またはUTF-16のエンコーディングを与えることを意味します。latin1（iso8859-1）などのより制限のあるエンコーディングを使用すると、データベースに特定の文字を格納できなくなり、情報が失われます。</target>
        </trans-unit>
        <trans-unit id="e6d84fe7fe5ec77cf066388c9481b92a6747b344" translate="yes" xml:space="preserve">
          <source>Make the poll app modifiable in the admin</source>
          <target state="translated">管理画面でポールアプリを変更できるようにする</target>
        </trans-unit>
        <trans-unit id="3288017f14c5479aa28d05689ff3c090be1108e6" translate="yes" xml:space="preserve">
          <source>Makes &lt;code&gt;makemigrations&lt;/code&gt; exit with a non-zero status when model changes without migrations are detected.</source>
          <target state="translated">なる &lt;code&gt;makemigrations&lt;/code&gt; 移行せずに、モデル変更が検出されたゼロ以外のステータスで終了します。</target>
        </trans-unit>
        <trans-unit id="e45f4eb2e4ecd287729a2a82141e7631ec4c8e61" translate="yes" xml:space="preserve">
          <source>Makes &lt;code&gt;migrate&lt;/code&gt; exit with a non-zero status when unapplied migrations are detected.</source>
          <target state="translated">なる &lt;code&gt;migrate&lt;/code&gt; 未適用の移行が検出されたゼロ以外の状態で終了します。</target>
        </trans-unit>
        <trans-unit id="cd46c57dda19a380dba63b951c50c57d7edd94b1" translate="yes" xml:space="preserve">
          <source>Makes a DELETE request on the provided &lt;code&gt;path&lt;/code&gt; and returns a &lt;code&gt;Response&lt;/code&gt; object. Useful for testing RESTful interfaces.</source>
          <target state="translated">指定された &lt;code&gt;path&lt;/code&gt; DELETEリクエストを作成し、 &lt;code&gt;Response&lt;/code&gt; オブジェクトを返します。RESTfulインターフェースのテストに役立ちます。</target>
        </trans-unit>
        <trans-unit id="67b8fdec97a0a90000785f857f6d99d954dfbaaa" translate="yes" xml:space="preserve">
          <source>Makes a GET request on the provided &lt;code&gt;path&lt;/code&gt; and returns a &lt;code&gt;Response&lt;/code&gt; object, which is documented below.</source>
          <target state="translated">指定された &lt;code&gt;path&lt;/code&gt; GETリクエストを作成し、以下に説明する &lt;code&gt;Response&lt;/code&gt; オブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="3ab36adc110fb58469cbb078f97a12c9d401e7de" translate="yes" xml:space="preserve">
          <source>Makes a HEAD request on the provided &lt;code&gt;path&lt;/code&gt; and returns a &lt;code&gt;Response&lt;/code&gt; object. This method works just like &lt;a href=&quot;#django.test.Client.get&quot;&gt;&lt;code&gt;Client.get()&lt;/code&gt;&lt;/a&gt;, including the &lt;code&gt;follow&lt;/code&gt;, &lt;code&gt;secure&lt;/code&gt; and &lt;code&gt;extra&lt;/code&gt; arguments, except it does not return a message body.</source>
          <target state="translated">指定された &lt;code&gt;path&lt;/code&gt; HEADリクエストを作成し、 &lt;code&gt;Response&lt;/code&gt; オブジェクトを返します。このメソッドは、メッセージ本文を返さないことを除いて、 &lt;code&gt;follow&lt;/code&gt; 、 &lt;code&gt;secure&lt;/code&gt; 、および &lt;code&gt;extra&lt;/code&gt; 引数を含む&lt;a href=&quot;#django.test.Client.get&quot;&gt; &lt;code&gt;Client.get()&lt;/code&gt; &lt;/a&gt;と同じように機能します。</target>
        </trans-unit>
        <trans-unit id="622e768ac61b71b81b98d9e29b486595200ed157" translate="yes" xml:space="preserve">
          <source>Makes a PATCH request on the provided &lt;code&gt;path&lt;/code&gt; and returns a &lt;code&gt;Response&lt;/code&gt; object. Useful for testing RESTful interfaces.</source>
          <target state="translated">指定された &lt;code&gt;path&lt;/code&gt; PATCHリクエストを作成し、 &lt;code&gt;Response&lt;/code&gt; オブジェクトを返します。RESTfulインターフェースのテストに役立ちます。</target>
        </trans-unit>
        <trans-unit id="fd9170b880c457475e4acad7c3125b513d409d1e" translate="yes" xml:space="preserve">
          <source>Makes a POST request on the provided &lt;code&gt;path&lt;/code&gt; and returns a &lt;code&gt;Response&lt;/code&gt; object, which is documented below.</source>
          <target state="translated">指定された &lt;code&gt;path&lt;/code&gt; POSTリクエストを作成し、以下に説明する &lt;code&gt;Response&lt;/code&gt; オブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="8a618a092d900f3345d37da0ff87b3e10c65839d" translate="yes" xml:space="preserve">
          <source>Makes a PUT request on the provided &lt;code&gt;path&lt;/code&gt; and returns a &lt;code&gt;Response&lt;/code&gt; object. Useful for testing RESTful interfaces.</source>
          <target state="translated">指定された &lt;code&gt;path&lt;/code&gt; PUTリクエストを作成し、 &lt;code&gt;Response&lt;/code&gt; オブジェクトを返します。RESTfulインターフェースのテストに役立ちます。</target>
        </trans-unit>
        <trans-unit id="66196a0bb288c4ef1f8149743502405df89a8fd9" translate="yes" xml:space="preserve">
          <source>Makes a TRACE request on the provided &lt;code&gt;path&lt;/code&gt; and returns a &lt;code&gt;Response&lt;/code&gt; object. Useful for simulating diagnostic probes.</source>
          <target state="translated">指定された &lt;code&gt;path&lt;/code&gt; TRACEリクエストを作成し、 &lt;code&gt;Response&lt;/code&gt; オブジェクトを返します。診断プローブのシミュレーションに役立ちます。</target>
        </trans-unit>
        <trans-unit id="888f82444507e9099b749f8f400d61b51e2436cd" translate="yes" xml:space="preserve">
          <source>Makes all possible efforts to strip all [X]HTML tags.</source>
          <target state="translated">すべての[X]HTMLタグを削除するために可能な限りの努力をします。</target>
        </trans-unit>
        <trans-unit id="99cf9f3654a5878401b856a77fe4db8a46014e99" translate="yes" xml:space="preserve">
          <source>Makes an OPTIONS request on the provided &lt;code&gt;path&lt;/code&gt; and returns a &lt;code&gt;Response&lt;/code&gt; object. Useful for testing RESTful interfaces.</source>
          <target state="translated">指定された &lt;code&gt;path&lt;/code&gt; OPTIONSリクエストを作成し、 &lt;code&gt;Response&lt;/code&gt; オブジェクトを返します。RESTfulインターフェースのテストに役立ちます。</target>
        </trans-unit>
        <trans-unit id="a2b1ed94dcb4d0abbc485a341862326c80bacbba" translate="yes" xml:space="preserve">
          <source>Makes or deletes the &lt;code&gt;_order&lt;/code&gt; column needed for the &lt;a href=&quot;models/options#django.db.models.Options.order_with_respect_to&quot;&gt;&lt;code&gt;order_with_respect_to&lt;/code&gt;&lt;/a&gt; option on the &lt;code&gt;Meta&lt;/code&gt; subclass.</source>
          <target state="translated">&lt;code&gt;Meta&lt;/code&gt; サブクラスの&lt;a href=&quot;models/options#django.db.models.Options.order_with_respect_to&quot;&gt; &lt;code&gt;order_with_respect_to&lt;/code&gt; &lt;/a&gt;オプションに必要な &lt;code&gt;_order&lt;/code&gt; 列を作成または削除します。</target>
        </trans-unit>
        <trans-unit id="7dccc437985ff30cb011b62713b84ead4f737431" translate="yes" xml:space="preserve">
          <source>Makes the active translation object a &lt;code&gt;NullTranslations()&lt;/code&gt; instance. This is useful when we want delayed translations to appear as the original string for some reason.</source>
          <target state="translated">アクティブな翻訳オブジェクトを &lt;code&gt;NullTranslations()&lt;/code&gt; インスタンスにします。これは、何らかの理由で遅延翻訳を元の文字列として表示したい場合に便利です。</target>
        </trans-unit>
        <trans-unit id="3ea1449517b61b6227fc0a09d9c44c6bb5266548" translate="yes" xml:space="preserve">
          <source>Makes this object orderable with respect to the given field, usually a &lt;code&gt;ForeignKey&lt;/code&gt;. This can be used to make related objects orderable with respect to a parent object. For example, if an &lt;code&gt;Answer&lt;/code&gt; relates to a &lt;code&gt;Question&lt;/code&gt; object, and a question has more than one answer, and the order of answers matters, you&amp;rsquo;d do this:</source>
          <target state="translated">このオブジェクトを、指​​定されたフィールド（通常は &lt;code&gt;ForeignKey&lt;/code&gt; )に関して順序付けできるようにします。これを使用して、親オブジェクトに関して関連オブジェクトを順序付け可能にすることができます。たとえば、 &lt;code&gt;Answer&lt;/code&gt; が &lt;code&gt;Question&lt;/code&gt; オブジェクトに関連し、質問に複数の回答があり、回答の順序が重要である場合は、次のようにします。</target>
        </trans-unit>
        <trans-unit id="d54f5b47c954fae0115f4537ba904f310a264de9" translate="yes" xml:space="preserve">
          <source>Making &amp;ldquo;friendly&amp;rdquo; template contexts</source>
          <target state="translated">「フレンドリーな」テンプレートコンテキストの作成</target>
        </trans-unit>
        <trans-unit id="c8db8d80fd9fb4fecd9dcd41e45fec83ed98ddd5" translate="yes" xml:space="preserve">
          <source>Making URL patterns themselves translatable via the &lt;a href=&quot;../../ref/utils#django.utils.translation.gettext_lazy&quot;&gt;&lt;code&gt;django.utils.translation.gettext_lazy()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">&lt;a href=&quot;../../ref/utils#django.utils.translation.gettext_lazy&quot;&gt; &lt;code&gt;django.utils.translation.gettext_lazy()&lt;/code&gt; &lt;/a&gt;関数を使用して、URLパターン自体を翻訳可能にします。</target>
        </trans-unit>
        <trans-unit id="42a63d52676fa037454255c2d52959b81d535bf1" translate="yes" xml:space="preserve">
          <source>Making actions available site-wide</source>
          <target state="translated">アクションをサイト全体で利用できるようにする</target>
        </trans-unit>
        <trans-unit id="9eec11322f12a5a830e1ec8f9ac3f17534635686" translate="yes" xml:space="preserve">
          <source>Making an expensive computation that depends on the request.</source>
          <target state="translated">リクエストに依存した高価な計算をすること。</target>
        </trans-unit>
        <trans-unit id="11280e40fa12c6ed475a0960415249174d29f82b" translate="yes" xml:space="preserve">
          <source>Making logging calls</source>
          <target state="translated">ロギングコールの作成</target>
        </trans-unit>
        <trans-unit id="7cbc2e6788aa00914bfa34bdeafb0de83e2e8075" translate="yes" xml:space="preserve">
          <source>Making queries</source>
          <target state="translated">クエリの作成</target>
        </trans-unit>
        <trans-unit id="f36af64091c8859d03f0c5912aa8c3e10b3dd9b4" translate="yes" xml:space="preserve">
          <source>Making requests</source>
          <target state="translated">リクエストをする</target>
        </trans-unit>
        <trans-unit id="b880c8b42823e5609b10a452e5205dcb5f7b4996" translate="yes" xml:space="preserve">
          <source>Management Commands</source>
          <target state="translated">管理コマンド</target>
        </trans-unit>
        <trans-unit id="309988b71dc98cdf2b11d5ce945ef12fe12b7c85" translate="yes" xml:space="preserve">
          <source>Management commands and locales</source>
          <target state="translated">管理コマンドとロケール</target>
        </trans-unit>
        <trans-unit id="fdb992093f99727071e66bbe2c45fcb5e3b93112" translate="yes" xml:space="preserve">
          <source>Management commands can be tested with the &lt;a href=&quot;../../ref/django-admin#django.core.management.call_command&quot;&gt;&lt;code&gt;call_command()&lt;/code&gt;&lt;/a&gt; function. The output can be redirected into a &lt;code&gt;StringIO&lt;/code&gt; instance:</source>
          <target state="translated">管理コマンドは、&lt;a href=&quot;../../ref/django-admin#django.core.management.call_command&quot;&gt; &lt;code&gt;call_command()&lt;/code&gt; &lt;/a&gt;関数でテストできます。出力は &lt;code&gt;StringIO&lt;/code&gt; インスタンスにリダイレクトできます。</target>
        </trans-unit>
        <trans-unit id="123ebb6632286d41ac5ad793d26b1e8e2995104f" translate="yes" xml:space="preserve">
          <source>Management commands from third-party apps that have been unintentionally overridden can be made available under a new name by creating a new command in one of your project&amp;rsquo;s apps (ordered before the third-party app in &lt;a href=&quot;../ref/settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt;) which imports the &lt;code&gt;Command&lt;/code&gt; of the overridden command.</source>
          <target state="translated">意図せずにオーバーライドされたサードパーティアプリからの管理コマンドは、オーバーライドされたコマンドの &lt;code&gt;Command&lt;/code&gt; をインポートするプロジェクトのアプリ（&lt;a href=&quot;../ref/settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; で&lt;/a&gt;サードパーティアプリの前に順序付け）の1つに新しいコマンドを作成することにより、新しい名前で使用できるようになります。。</target>
        </trans-unit>
        <trans-unit id="aedb618e7bae6668445752ed581581d51fca7e48" translate="yes" xml:space="preserve">
          <source>Management signals</source>
          <target state="translated">マネジメントシグナル</target>
        </trans-unit>
        <trans-unit id="bab8c1f3a552b23f9c2fc03d51382bf5a6e5f9e0" translate="yes" xml:space="preserve">
          <source>Manager methods</source>
          <target state="translated">管理者の方法</target>
        </trans-unit>
        <trans-unit id="5d37a81c73b96201b2d085091cabd9eeab93ecf1" translate="yes" xml:space="preserve">
          <source>Manager names</source>
          <target state="translated">管理者名</target>
        </trans-unit>
        <trans-unit id="4f7b3cfa4fbefb6a7d1086c0a97bc4ea23175a55" translate="yes" xml:space="preserve">
          <source>Managers</source>
          <target state="translated">Managers</target>
        </trans-unit>
        <trans-unit id="9e8450ccf72e480aeae5b3890c911f5578602674" translate="yes" xml:space="preserve">
          <source>Managers from base classes are always inherited by the child class, using Python&amp;rsquo;s normal name resolution order (names on the child class override all others; then come names on the first parent class, and so on).</source>
          <target state="translated">基本クラスのマネージャーは、Pythonの通常の名前解決順序を使用して、常に子クラスに継承されます（子クラスの名前は他のすべての名前をオーバーライドし、最初の親クラスの名前などになります）。</target>
        </trans-unit>
        <trans-unit id="4f90f7785499fc4cfaa11512554a9d9c8b983450" translate="yes" xml:space="preserve">
          <source>Managing database transactions</source>
          <target state="translated">データベーストランザクションの管理</target>
        </trans-unit>
        <trans-unit id="a21bfd78268483f35f3c604df2fe7d8571659141" translate="yes" xml:space="preserve">
          <source>Managing files</source>
          <target state="translated">ファイルの管理</target>
        </trans-unit>
        <trans-unit id="1f4073ab68fce5fa416ebfc1214a39c03aa82bd7" translate="yes" xml:space="preserve">
          <source>Managing static files (e.g. images, JavaScript, CSS)</source>
          <target state="translated">静的ファイルの管理 (画像、JavaScript、CSSなど)</target>
        </trans-unit>
        <trans-unit id="cfe3a8d49df863653ebd64aa7a5c9599baeb268f" translate="yes" xml:space="preserve">
          <source>Managing the database</source>
          <target state="translated">データベースの管理</target>
        </trans-unit>
        <trans-unit id="821946108f9fcc4278ef8ff2a44740fe9fc0f854" translate="yes" xml:space="preserve">
          <source>Managing users in the admin</source>
          <target state="translated">管理画面でユーザーを管理する</target>
        </trans-unit>
        <trans-unit id="b383c49ef5abc4e107f02ad08c8c62501452a9f0" translate="yes" xml:space="preserve">
          <source>Mandatory &lt;a href=&quot;../settings#std:setting-SITE_ID&quot;&gt;&lt;code&gt;SITE_ID&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">必須&lt;a href=&quot;../settings#std:setting-SITE_ID&quot;&gt; &lt;code&gt;SITE_ID&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="49bb3afa6fe6d5f9c1b4819689c8cb64af32574b" translate="yes" xml:space="preserve">
          <source>Manually managing a user&amp;rsquo;s password</source>
          <target state="translated">ユーザーのパスワードを手動で管理する</target>
        </trans-unit>
        <trans-unit id="169b1587f29ae2dd843f597266b7665985a7ec7f" translate="yes" xml:space="preserve">
          <source>Manually rendered &lt;code&gt;can_delete&lt;/code&gt; and &lt;code&gt;can_order&lt;/code&gt;</source>
          <target state="translated">手動でレンダリングされた &lt;code&gt;can_delete&lt;/code&gt; および &lt;code&gt;can_order&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="578ba80b666e0ccf9a7012331ca7e916469a6aaf" translate="yes" xml:space="preserve">
          <source>Manually selecting a database</source>
          <target state="translated">データベースを手動で選択する</target>
        </trans-unit>
        <trans-unit id="9cab6e985bdaa8e6c7cd3d1f1913684e9f6c62a4" translate="yes" xml:space="preserve">
          <source>Manually selecting a database for a &lt;code&gt;QuerySet&lt;/code&gt;</source>
          <target state="translated">手動でのデータベースを選択 &lt;code&gt;QuerySet&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6e5d67e28075441efb68505f6ad34b3922452603" translate="yes" xml:space="preserve">
          <source>Manually-specifying values of auto-incrementing primary keys</source>
          <target state="translated">オートインクリメントの主キーの値を手動で指定する</target>
        </trans-unit>
        <trans-unit id="3fd4f2fc1f97ee8fb54c37f3123e041f2ad5b7eb" translate="yes" xml:space="preserve">
          <source>Many JavaScript toolkits exist, and many of them include widgets (such as calendar widgets) that can be used to enhance your application. Django has deliberately avoided blessing any one JavaScript toolkit. Each toolkit has its own relative strengths and weaknesses - use whichever toolkit suits your requirements. Django is able to integrate with any JavaScript toolkit.</source>
          <target state="translated">多くの JavaScript ツールキットが存在し、その多くはアプリケーションを強化するために使用できるウィジェット (カレンダーウィジェットなど)を含んでいます。Django は意図的に一つの JavaScript ツールキットを祝福することを避けています。それぞれのツールキットには相対的な長所と短所があります。Django はどのような JavaScript ツールキットとも統合することができます。</target>
        </trans-unit>
        <trans-unit id="25451186d18d24fb946ba6ce8889475aef168969" translate="yes" xml:space="preserve">
          <source>Many commands take a list of &amp;ldquo;app names.&amp;rdquo; An &amp;ldquo;app name&amp;rdquo; is the basename of the package containing your models. For example, if your &lt;a href=&quot;settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; contains the string &lt;code&gt;'mysite.blog'&lt;/code&gt;, the app name is &lt;code&gt;blog&lt;/code&gt;.</source>
          <target state="translated">多くのコマンドは、「アプリ名」のリストを取ります。「アプリ名」は、モデルを含むパッケージのベース名です。たとえば、&lt;a href=&quot;settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt;に文字列 &lt;code&gt;'mysite.blog'&lt;/code&gt; が含まれている場合、アプリ名は &lt;code&gt;blog&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="a1ab0c728d9adbf5dc95998cbd2e06c0ddcc849d" translate="yes" xml:space="preserve">
          <source>Many of Django&amp;rsquo;s built-in class-based views inherit from other class-based views or various mixins. Because this inheritance chain is very important, the ancestor classes are documented under the section title of &lt;strong&gt;Ancestors (MRO)&lt;/strong&gt;. MRO is an acronym for Method Resolution Order.</source>
          <target state="translated">Djangoの組み込みのクラスベースのビューの多くは、他のクラスベースのビューやさまざまなミックスインを継承しています。この継承チェーンは非常に重要であるため、祖先クラスは&lt;strong&gt;Ancestors（MRO）の&lt;/strong&gt;セクションタイトルの下に記載されています。MROは、Method Resolution Orderの頭字語です。</target>
        </trans-unit>
        <trans-unit id="7ef93725b505fdf5fdda66e9602ccdb48505b2c6" translate="yes" xml:space="preserve">
          <source>Many of Django&amp;rsquo;s model fields accept options that they don&amp;rsquo;t do anything with. For example, you can pass both &lt;a href=&quot;../ref/models/fields#django.db.models.Field.editable&quot;&gt;&lt;code&gt;editable&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../ref/models/fields#django.db.models.DateField.auto_now&quot;&gt;&lt;code&gt;auto_now&lt;/code&gt;&lt;/a&gt; to a &lt;a href=&quot;../ref/models/fields#django.db.models.DateField&quot;&gt;&lt;code&gt;django.db.models.DateField&lt;/code&gt;&lt;/a&gt; and it will ignore the &lt;a href=&quot;../ref/models/fields#django.db.models.Field.editable&quot;&gt;&lt;code&gt;editable&lt;/code&gt;&lt;/a&gt; parameter (&lt;a href=&quot;../ref/models/fields#django.db.models.DateField.auto_now&quot;&gt;&lt;code&gt;auto_now&lt;/code&gt;&lt;/a&gt; being set implies &lt;code&gt;editable=False&lt;/code&gt;). No error is raised in this case.</source>
          <target state="translated">Djangoのモデルフィールドの多くは、何もしないオプションを受け入れます。たとえば、あなたは両方渡すことができ&lt;a href=&quot;../ref/models/fields#django.db.models.Field.editable&quot;&gt; &lt;code&gt;editable&lt;/code&gt; &lt;/a&gt;し、&lt;a href=&quot;../ref/models/fields#django.db.models.DateField.auto_now&quot;&gt; &lt;code&gt;auto_now&lt;/code&gt; &lt;/a&gt;に&lt;a href=&quot;../ref/models/fields#django.db.models.DateField&quot;&gt; &lt;code&gt;django.db.models.DateField&lt;/code&gt; &lt;/a&gt;、それは無視されます&lt;a href=&quot;../ref/models/fields#django.db.models.Field.editable&quot;&gt; &lt;code&gt;editable&lt;/code&gt; &lt;/a&gt;（パラメータを&lt;a href=&quot;../ref/models/fields#django.db.models.DateField.auto_now&quot;&gt; &lt;code&gt;auto_now&lt;/code&gt; &lt;/a&gt;設定されている意味 &lt;code&gt;editable=False&lt;/code&gt; ）。この場合、エラーは発生しません。</target>
        </trans-unit>
        <trans-unit id="c7e02cb06b5702dcaa553fe7f77ae3438f401b6a" translate="yes" xml:space="preserve">
          <source>Many of these settings are sensitive and should be treated as confidential. If you&amp;rsquo;re releasing the source code for your project, a common practice is to publish suitable settings for development, and to use a private settings module for production.</source>
          <target state="translated">これらの設定の多くは機密情報であり、機密情報として扱う必要があります。プロジェクトのソースコードをリリースする場合、一般的な方法は、開発に適した設定を公開し、本番用にプライベート設定モジュールを使用することです。</target>
        </trans-unit>
        <trans-unit id="75861236e48cb91931859e485f7ff7f5f75eebda" translate="yes" xml:space="preserve">
          <source>Many of these signals are sent by various model methods like &lt;code&gt;__init__()&lt;/code&gt; or &lt;a href=&quot;models/instances#django.db.models.Model.save&quot;&gt;&lt;code&gt;save()&lt;/code&gt;&lt;/a&gt; that you can override in your own code.</source>
          <target state="translated">これらの信号の多くは、独自のコードでオーバーライドできる &lt;code&gt;__init__()&lt;/code&gt; や&lt;a href=&quot;models/instances#django.db.models.Model.save&quot;&gt; &lt;code&gt;save()&lt;/code&gt; &lt;/a&gt;などのさまざまなモデルメソッドによって送信されます。</target>
        </trans-unit>
        <trans-unit id="22d338ef8445afc99ea23ca8b6ff63e24bec60fb" translate="yes" xml:space="preserve">
          <source>Many other things might go wrong with our application in the future, but we can be sure that we won&amp;rsquo;t inadvertently reintroduce this bug, because running the test will warn us immediately. We can consider this little portion of the application pinned down safely forever.</source>
          <target state="translated">他の多くのことが将来的にアプリケーションで問題になる可能性がありますが、テストを実行するとすぐに警告が表示されるので、このバグが誤って再導入されることはありません。アプリケーションのこの小さな部分は、永久に安全に固定されていると考えることができます。</target>
        </trans-unit>
        <trans-unit id="a06e57ab2b407ee0845b83ecac56cae0cb1c5bb7" translate="yes" xml:space="preserve">
          <source>Many template tags take a number of arguments &amp;ndash; strings or template variables &amp;ndash; and return a result after doing some processing based solely on the input arguments and some external information. For example, a &lt;code&gt;current_time&lt;/code&gt; tag might accept a format string and return the time as a string formatted accordingly.</source>
          <target state="translated">多くのテンプレートタグは、多くの引数（文字列またはテンプレート変数）を取り、入力引数といくつかの外部情報のみに基づいて処理を行った結果を返します。たとえば、 &lt;code&gt;current_time&lt;/code&gt; タグはフォーマット文字列を受け入れ、それに応じてフォーマットされた文字列として時間を返します。</target>
        </trans-unit>
        <trans-unit id="d934fc1527a93c2b43e246ede7cf475542db271a" translate="yes" xml:space="preserve">
          <source>Many templates, including some of Django&amp;rsquo;s, rely upon the silence of the template system when a nonexistent variable is encountered. If you assign a value other than &lt;code&gt;''&lt;/code&gt; to &lt;code&gt;string_if_invalid&lt;/code&gt;, you will experience rendering problems with these templates and sites.</source>
          <target state="translated">Djangoの一部を含む多くのテンプレートは、存在しない変数が検出された場合のテンプレートシステムの無音に依存しています。あなたが以外の値を割り当てると &lt;code&gt;''&lt;/code&gt; し &lt;code&gt;string_if_invalid&lt;/code&gt; 、あなたはこれらのテンプレートやサイトのレンダリングで問題が生じるだろう。</target>
        </trans-unit>
        <trans-unit id="67d6af84e82be13a30451c42ca848e947ab607d1" translate="yes" xml:space="preserve">
          <source>Many widgets have optional extra arguments; they can be set when defining the widget on the field. In the following example, the &lt;a href=&quot;#django.forms.SelectDateWidget.years&quot;&gt;&lt;code&gt;years&lt;/code&gt;&lt;/a&gt; attribute is set for a &lt;a href=&quot;#django.forms.SelectDateWidget&quot;&gt;&lt;code&gt;SelectDateWidget&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">多くのウィジェットにはオプションの追加引数があります。フィールドでウィジェットを定義するときに設定できます。次の例では、&lt;a href=&quot;#django.forms.SelectDateWidget.years&quot;&gt; &lt;code&gt;years&lt;/code&gt; &lt;/a&gt;属性が&lt;a href=&quot;#django.forms.SelectDateWidget&quot;&gt; &lt;code&gt;SelectDateWidget&lt;/code&gt; に&lt;/a&gt;設定されています。</target>
        </trans-unit>
        <trans-unit id="d58d8917cafabb2c90c45707f57b660d3626c9ee" translate="yes" xml:space="preserve">
          <source>Many-to-many field to &lt;a href=&quot;#django.contrib.auth.models.Permission&quot;&gt;&lt;code&gt;Permission&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.auth.models.Permission&quot;&gt; &lt;code&gt;Permission&lt;/code&gt; &lt;/a&gt;多対多フィールド：</target>
        </trans-unit>
        <trans-unit id="f9d8f6ec324fa681af98e9241f31cfa5781051c6" translate="yes" xml:space="preserve">
          <source>Many-to-many relationship to &lt;a href=&quot;#django.contrib.auth.models.Group&quot;&gt;&lt;code&gt;Group&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.auth.models.Group&quot;&gt; &lt;code&gt;Group&lt;/code&gt; &lt;/a&gt;多対多の関係</target>
        </trans-unit>
        <trans-unit id="f1c116d2e532fe76c699eb71681c5f325c7f63e0" translate="yes" xml:space="preserve">
          <source>Many-to-many relationship to &lt;a href=&quot;#django.contrib.auth.models.Permission&quot;&gt;&lt;code&gt;Permission&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.auth.models.Permission&quot;&gt; &lt;code&gt;Permission&lt;/code&gt; &lt;/a&gt;多対多の関係</target>
        </trans-unit>
        <trans-unit id="70e5715c4c5ce8ff1bacfa3505a6793b1e2d573f" translate="yes" xml:space="preserve">
          <source>Many-to-many relationships</source>
          <target state="translated">多対多の関係</target>
        </trans-unit>
        <trans-unit id="e425f695d48e438c36b7fc9a91b741584873db30" translate="yes" xml:space="preserve">
          <source>Many-to-many relationships can be queried using &lt;a href=&quot;../queries#lookups-that-span-relationships&quot;&gt;lookups across relationships&lt;/a&gt;:</source>
          <target state="translated">多対多の関係は、関係&lt;a href=&quot;../queries#lookups-that-span-relationships&quot;&gt;全体のルックアップを&lt;/a&gt;使用して照会できます。</target>
        </trans-unit>
        <trans-unit id="ba72c44b14ca6638dbe6a05d3bce34a9c08ab179" translate="yes" xml:space="preserve">
          <source>Many-to-one relationships</source>
          <target state="translated">多対多の関係</target>
        </trans-unit>
        <trans-unit id="9f6d34f1802b32e0c12aec1e3e5d808e6f66d84a" translate="yes" xml:space="preserve">
          <source>ManyToMany-relations are exported for the model that binds them. For instance, the &lt;code&gt;auth.User&lt;/code&gt; model has such a relation to the &lt;code&gt;auth.Permission&lt;/code&gt; model:</source>
          <target state="translated">ManyToMany関係は、それらをバインドするモデル用にエクスポートされます。たとえば、 &lt;code&gt;auth.User&lt;/code&gt; モデルはauth.Permissionモデルと次のような関係があり &lt;code&gt;auth.Permission&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5cf3b65a416d6e52bab78d048e87986c34858f91" translate="yes" xml:space="preserve">
          <source>Mapped to the &lt;a href=&quot;#django.contrib.gis.gdal.GDALBand.nodata_value&quot;&gt;&lt;code&gt;nodata_value&lt;/code&gt;&lt;/a&gt; attribute</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.gis.gdal.GDALBand.nodata_value&quot;&gt; &lt;code&gt;nodata_value&lt;/code&gt; &lt;/a&gt;属性にマッピングされます</target>
        </trans-unit>
        <trans-unit id="b49cda891b56d96f95a118e0757e9217f5f1c480" translate="yes" xml:space="preserve">
          <source>Mapped to the &lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster.driver&quot;&gt;&lt;code&gt;driver&lt;/code&gt;&lt;/a&gt; attribute</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster.driver&quot;&gt; &lt;code&gt;driver&lt;/code&gt; &lt;/a&gt;属性にマップ</target>
        </trans-unit>
        <trans-unit id="540288375fb7d6fa4ddcf2966b348db71d56849b" translate="yes" xml:space="preserve">
          <source>Mapped to the &lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster.height&quot;&gt;&lt;code&gt;height&lt;/code&gt;&lt;/a&gt; attribute</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster.height&quot;&gt; &lt;code&gt;height&lt;/code&gt; &lt;/a&gt;属性にマッピングされます</target>
        </trans-unit>
        <trans-unit id="3690a5f473e1bd7016481bb98cfe5cabfcaea42d" translate="yes" xml:space="preserve">
          <source>Mapped to the &lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster.origin&quot;&gt;&lt;code&gt;origin&lt;/code&gt;&lt;/a&gt; attribute</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster.origin&quot;&gt; &lt;code&gt;origin&lt;/code&gt; &lt;/a&gt;属性にマッピングされます</target>
        </trans-unit>
        <trans-unit id="7d4ecb0587f3cc23b7f26c6f72881682d026d17e" translate="yes" xml:space="preserve">
          <source>Mapped to the &lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster.scale&quot;&gt;&lt;code&gt;scale&lt;/code&gt;&lt;/a&gt; attribute</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster.scale&quot;&gt; &lt;code&gt;scale&lt;/code&gt; &lt;/a&gt;属性にマッピングされます</target>
        </trans-unit>
        <trans-unit id="ea921e1e0d479e3a85669a075cb1b1c3b19e6693" translate="yes" xml:space="preserve">
          <source>Mapped to the &lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster.srid&quot;&gt;&lt;code&gt;srid&lt;/code&gt;&lt;/a&gt; attribute</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster.srid&quot;&gt; &lt;code&gt;srid&lt;/code&gt; &lt;/a&gt;属性にマッピングされます</target>
        </trans-unit>
        <trans-unit id="aa20fe2b5818bbde36ad87034a1ecbf01e297f82" translate="yes" xml:space="preserve">
          <source>Mapped to the &lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster.width&quot;&gt;&lt;code&gt;width&lt;/code&gt;&lt;/a&gt; attribute</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster.width&quot;&gt; &lt;code&gt;width&lt;/code&gt; &lt;/a&gt;属性にマッピング</target>
        </trans-unit>
        <trans-unit id="cb343929f61bef17958fbce9c5add540ed87a54c" translate="yes" xml:space="preserve">
          <source>Mapping URLs to views</source>
          <target state="translated">URLをビューにマッピングする</target>
        </trans-unit>
        <trans-unit id="b59a41665f92ed102c9cc53a15e018811cad6724" translate="yes" xml:space="preserve">
          <source>Mapping query fields to model fields</source>
          <target state="translated">クエリフィールドをモデルフィールドにマッピング</target>
        </trans-unit>
        <trans-unit id="790cecd9579b54cbb8881de7b21413ab38c2dd3f" translate="yes" xml:space="preserve">
          <source>Maps values for &lt;code&gt;True&lt;/code&gt;, &lt;code&gt;False&lt;/code&gt;, and (optionally) &lt;code&gt;None&lt;/code&gt;, to the strings &amp;ldquo;yes&amp;rdquo;, &amp;ldquo;no&amp;rdquo;, &amp;ldquo;maybe&amp;rdquo;, or a custom mapping passed as a comma-separated list, and returns one of those strings according to the value:</source>
          <target state="translated">&lt;code&gt;True&lt;/code&gt; 、 &lt;code&gt;False&lt;/code&gt; 、および（オプションで） &lt;code&gt;None&lt;/code&gt; の値を文字列「yes」、「no」、「maybe」、またはコンマ区切りリストとして渡されるカスタムマッピングにマップし、値に応じてこれらの文字列の1つを返します：</target>
        </trans-unit>
        <trans-unit id="7f00002bb6ad2eec19a19de8a03c7d6fad15adff" translate="yes" xml:space="preserve">
          <source>MariaDB</source>
          <target state="translated">MariaDB</target>
        </trans-unit>
        <trans-unit id="7d4168bc3f16d6fe180b1ac18cb68592a82d37fc" translate="yes" xml:space="preserve">
          <source>MariaDB &lt;a href=&quot;https://jira.mariadb.org/browse/MDEV-12981&quot;&gt;doesn&amp;rsquo;t support&lt;/a&gt; the &lt;code&gt;default&lt;/code&gt; parameter.</source>
          <target state="translated">MariaDB &lt;a href=&quot;https://jira.mariadb.org/browse/MDEV-12981&quot;&gt;は&lt;/a&gt; &lt;code&gt;default&lt;/code&gt; パラメーターをサポートしていません。</target>
        </trans-unit>
        <trans-unit id="4a643fce146444011d7acb230ac298d723eb94e0" translate="yes" xml:space="preserve">
          <source>MariaDB and &lt;code&gt;default&lt;/code&gt;</source>
          <target state="translated">MariaDBと &lt;code&gt;default&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="60c8a756ff78d3971eda0305304654e702c293c5" translate="yes" xml:space="preserve">
          <source>MariaDB and Oracle users</source>
          <target state="translated">MariaDBとOracleユーザー</target>
        </trans-unit>
        <trans-unit id="cf8e08dd5e412196ef8d596fa4013be4fa1691fa" translate="yes" xml:space="preserve">
          <source>MariaDB notes</source>
          <target state="translated">MariaDBの注意点</target>
        </trans-unit>
        <trans-unit id="f4d445e79364f1438052336aec87ad0818d1254b" translate="yes" xml:space="preserve">
          <source>MariaDB support was added.</source>
          <target state="translated">MariaDBのサポートを追加しました。</target>
        </trans-unit>
        <trans-unit id="22b9920d6f1372da8351b819c15404ef8d73e846" translate="yes" xml:space="preserve">
          <source>MariaDB, PostGIS, and SpatiaLite</source>
          <target state="translated">MariaDB、PostGIS、SpatiaLite</target>
        </trans-unit>
        <trans-unit id="aff977f722d98c1105c72000c74384e594446a96" translate="yes" xml:space="preserve">
          <source>Marking a filter &lt;code&gt;is_safe&lt;/code&gt; will coerce the filter&amp;rsquo;s return value to a string. If your filter should return a boolean or other non-string value, marking it &lt;code&gt;is_safe&lt;/code&gt; will probably have unintended consequences (such as converting a boolean False to the string &amp;lsquo;False&amp;rsquo;).</source>
          <target state="translated">フィルターを &lt;code&gt;is_safe&lt;/code&gt; とマークすると、フィルターの戻り値が文字列に変換されます。フィルターがブール値またはその他の非文字列値を返す必要がある場合、 &lt;code&gt;is_safe&lt;/code&gt; とマークすると、意図しない結果になる可能性があります（ブール値のFalseを文字列 'False'に変換するなど）。</target>
        </trans-unit>
        <trans-unit id="8f989987f22e747a6a20e1632167baf49bbb35ce" translate="yes" xml:space="preserve">
          <source>Marking middleware as unused</source>
          <target state="translated">ミドルウェアを未使用としてマークする</target>
        </trans-unit>
        <trans-unit id="311345611b41ef66eb9c30d09d1355a38f149c13" translate="yes" xml:space="preserve">
          <source>Marking strings as no-op</source>
          <target state="translated">文字列をno-opとしてマークする</target>
        </trans-unit>
        <trans-unit id="9ad57bd8a9f8ffb40bd3a39cd567898505d9a1a7" translate="yes" xml:space="preserve">
          <source>Marks a middleware as &lt;a href=&quot;../topics/http/middleware#async-middleware&quot;&gt;asynchronous-only&lt;/a&gt;. Django will wrap it in an asynchronous event loop when it is called from the WSGI request path.</source>
          <target state="translated">ミドルウェアを&lt;a href=&quot;../topics/http/middleware#async-middleware&quot;&gt;非同期のみとし&lt;/a&gt;てマークします。Djangoは、WSGIリクエストパスから呼び出されると、非同期イベントループでラップします。</target>
        </trans-unit>
        <trans-unit id="71a236994fd0ea6b37a7806b66f175d552b1f605" translate="yes" xml:space="preserve">
          <source>Marks a middleware as &lt;a href=&quot;../topics/http/middleware#async-middleware&quot;&gt;sync and async compatible&lt;/a&gt;, this allows to avoid converting requests. You must implement detection of the current request type to use this decorator. See &lt;a href=&quot;../topics/http/middleware#async-middleware&quot;&gt;asynchronous middleware documentation&lt;/a&gt; for details.</source>
          <target state="translated">ミドルウェアを&lt;a href=&quot;../topics/http/middleware#async-middleware&quot;&gt;同期および非同期互換&lt;/a&gt;としてマークします。これにより、リクエストの変換を回避できます。このデコレータを使用するには、現在のリクエストタイプの検出を実装する必要があります。詳細については、&lt;a href=&quot;../topics/http/middleware#async-middleware&quot;&gt;非同期ミドルウェアのドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="5099a30c2ca01220fb6248589e9583ae57c439f0" translate="yes" xml:space="preserve">
          <source>Marks a middleware as &lt;a href=&quot;../topics/http/middleware#async-middleware&quot;&gt;synchronous-only&lt;/a&gt;. (The default in Django, but this allows you to future-proof if the default ever changes in a future release.)</source>
          <target state="translated">ミドルウェアを&lt;a href=&quot;../topics/http/middleware#async-middleware&quot;&gt;同期専用&lt;/a&gt;としてマークします。（Djangoのデフォルトですが、これにより、将来のリリースでデフォルトが変更された場合でも、将来にわたって利用できるようになります。）</target>
        </trans-unit>
        <trans-unit id="47ef4478c5a91ad82e0866515b18c5b9ba23b7af" translate="yes" xml:space="preserve">
          <source>Marks a string as not requiring further HTML escaping prior to output. When autoescaping is off, this filter has no effect.</source>
          <target state="translated">文字列を、出力前に HTML エスケープを必要としないものとしてマークします。自動エスケープがオフの場合、このフィルタは何の効果もありません。</target>
        </trans-unit>
        <trans-unit id="223d15dc9b30717101f8c092e0326f6bd5d6b0ed" translate="yes" xml:space="preserve">
          <source>Marks strings for translation but doesn&amp;rsquo;t translate them now. This can be used to store strings in global variables that should stay in the base language (because they might be used externally) and will be translated later.</source>
          <target state="translated">文字列を翻訳対象としてマークしますが、現在は翻訳しません。これは、（外部で使用される可能性があるため）ベース言語にとどまるグローバル変数に文字列を格納するために使用でき、後で翻訳されます。</target>
        </trans-unit>
        <trans-unit id="c3ea63ecdea5904962549d0b05f6dc32f2807d9a" translate="yes" xml:space="preserve">
          <source>Marks the migrations up to the target one (following the rules above) as applied, but without actually running the SQL to change your database schema.</source>
          <target state="translated">(上記のルールに従った)ターゲットまでの移行を適用したものとしてマークしますが、データベーススキーマを変更するために実際にSQLを実行することはありません。</target>
        </trans-unit>
        <trans-unit id="8d1f153abd2bfa9e625d24e6543581e4741ba55d" translate="yes" xml:space="preserve">
          <source>Marks the user as having no password set. This isn&amp;rsquo;t the same as having a blank string for a password. &lt;a href=&quot;#django.contrib.auth.models.AbstractBaseUser.check_password&quot;&gt;&lt;code&gt;check_password()&lt;/code&gt;&lt;/a&gt; for this user will never return &lt;code&gt;True&lt;/code&gt;. Doesn&amp;rsquo;t save the &lt;a href=&quot;#django.contrib.auth.models.AbstractBaseUser&quot;&gt;&lt;code&gt;AbstractBaseUser&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">ユーザーにパスワードが設定されていないことを示します。これは、パスワードに空の文字列を使用することとは異なります。このユーザーの&lt;a href=&quot;#django.contrib.auth.models.AbstractBaseUser.check_password&quot;&gt; &lt;code&gt;check_password()&lt;/code&gt; &lt;/a&gt;が &lt;code&gt;True&lt;/code&gt; を返すことはありません。&lt;a href=&quot;#django.contrib.auth.models.AbstractBaseUser&quot;&gt; &lt;code&gt;AbstractBaseUser&lt;/code&gt; &lt;/a&gt;オブジェクトを保存しません。</target>
        </trans-unit>
        <trans-unit id="5bd4c73c983b5ef20c68616eada1df033fb69691" translate="yes" xml:space="preserve">
          <source>Marks the user as having no password set. This isn&amp;rsquo;t the same as having a blank string for a password. &lt;a href=&quot;#django.contrib.auth.models.User.check_password&quot;&gt;&lt;code&gt;check_password()&lt;/code&gt;&lt;/a&gt; for this user will never return &lt;code&gt;True&lt;/code&gt;. Doesn&amp;rsquo;t save the &lt;a href=&quot;#django.contrib.auth.models.User&quot;&gt;&lt;code&gt;User&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">ユーザーにパスワードが設定されていないことを示します。これは、パスワードに空の文字列を使用することとは異なります。このユーザーの&lt;a href=&quot;#django.contrib.auth.models.User.check_password&quot;&gt; &lt;code&gt;check_password()&lt;/code&gt; &lt;/a&gt;が &lt;code&gt;True&lt;/code&gt; を返すことはありません。&lt;a href=&quot;#django.contrib.auth.models.User&quot;&gt; &lt;code&gt;User&lt;/code&gt; &lt;/a&gt;オブジェクトを保存しません。</target>
        </trans-unit>
        <trans-unit id="f4d5b558d76aca4dd8323ea862d1817d75c36e4e" translate="yes" xml:space="preserve">
          <source>Matching is done by name. This means that you can use SQL&amp;rsquo;s &lt;code&gt;AS&lt;/code&gt; clauses to map fields in the query to model fields. So if you had some other table that had &lt;code&gt;Person&lt;/code&gt; data in it, you could easily map it into &lt;code&gt;Person&lt;/code&gt; instances:</source>
          <target state="translated">マッチングは名前で行われます。つまり、SQLの &lt;code&gt;AS&lt;/code&gt; 句を使用して、クエリ内のフィールドをモデルフィールドにマップできます。したがって、 &lt;code&gt;Person&lt;/code&gt; データが含まれている他のテーブルがある場合、それを &lt;code&gt;Person&lt;/code&gt; インスタンスに簡単にマップできます。</target>
        </trans-unit>
        <trans-unit id="1756bec08ab2e5a4f6f3ea1577c5665ca0e8a418" translate="yes" xml:space="preserve">
          <source>Math Functions</source>
          <target state="translated">数学関数</target>
        </trans-unit>
        <trans-unit id="a9e1ee5cfc81eca21d13684541c3fe5125c8cf23" translate="yes" xml:space="preserve">
          <source>May be &lt;code&gt;'commit_on_success'&lt;/code&gt; (default) or &lt;code&gt;'autocommit'&lt;/code&gt;.</source>
          <target state="translated">かもしれ &lt;code&gt;'commit_on_success'&lt;/code&gt; （デフォルト）または &lt;code&gt;'autocommit'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e7d5a77b56557cd02637c33e06076b81641a4ddd" translate="yes" xml:space="preserve">
          <source>May be set with a slice or tuple of (begin, end) feature ID&amp;rsquo;s to map from the data source. In other words, this keyword enables the user to selectively import a subset range of features in the geographic data source.</source>
          <target state="translated">データソースからマップする機能IDの（開始、終了）のスライスまたはタプルを設定できます。つまり、このキーワードを使用すると、地理データソース内のフィーチャのサブセット範囲を選択的にインポートできます。</target>
        </trans-unit>
        <trans-unit id="49efc4391faa05cc8087791bccf389e65b797277" translate="yes" xml:space="preserve">
          <source>Maybe. You&amp;rsquo;re better protected from DST-related bugs, but you can still shoot yourself in the foot by carelessly turning naive datetimes into aware datetimes, and vice-versa.</source>
          <target state="translated">多分。DST関連のバグからの保護は強化されますが、うっかりして単純な日付時刻を認識できる日付時刻に、またはその逆に変更することで、自分の足を撃つことができます。</target>
        </trans-unit>
        <trans-unit id="de10edfac7e76d9ec68df69f5a5a36c3464c6350" translate="yes" xml:space="preserve">
          <source>Measurement</source>
          <target state="translated">Measurement</target>
        </trans-unit>
        <trans-unit id="3c38753a72f7a69367f3f46f2f3bf8c4fb743041" translate="yes" xml:space="preserve">
          <source>Measurement API</source>
          <target state="translated">測定API</target>
        </trans-unit>
        <trans-unit id="da9d9ce75f58bd008d16b191b24e7db519550a57" translate="yes" xml:space="preserve">
          <source>Measurement Objects</source>
          <target state="translated">測定オブジェクト</target>
        </trans-unit>
        <trans-unit id="04a372dab2b1d8a942ab1b2063b60fdcc95c3fb8" translate="yes" xml:space="preserve">
          <source>Media files are uploaded by your users. They&amp;rsquo;re untrusted! Make sure your web server never attempts to interpret them. For instance, if a user uploads a &lt;code&gt;.php&lt;/code&gt; file, the web server shouldn&amp;rsquo;t execute it.</source>
          <target state="translated">メディアファイルはユーザーによってアップロードされます。彼らは信頼されていません！Webサーバーがそれらを解釈しようとしないことを確認してください。たとえば、ユーザーが &lt;code&gt;.php&lt;/code&gt; ファイルをアップロードした場合、Webサーバーはそれを実行するべきではありません。</target>
        </trans-unit>
        <trans-unit id="edc301f7283a9e45e85a8a8deab4551d236d86a4" translate="yes" xml:space="preserve">
          <source>Memcached</source>
          <target state="translated">Memcached</target>
        </trans-unit>
        <trans-unit id="3e4380f0ac1531148db9193c0aeaa68f7bbaf08d" translate="yes" xml:space="preserve">
          <source>Memcached backends pass the contents of &lt;a href=&quot;../ref/settings#std:setting-CACHES-OPTIONS&quot;&gt;&lt;code&gt;OPTIONS&lt;/code&gt;&lt;/a&gt; as keyword arguments to the client constructors, allowing for more advanced control of client behavior. For example usage, see below.</source>
          <target state="translated">Memcachedバックエンドは&lt;a href=&quot;../ref/settings#std:setting-CACHES-OPTIONS&quot;&gt; &lt;code&gt;OPTIONS&lt;/code&gt; &lt;/a&gt;のコンテンツをキーワード引数としてクライアントコンストラクターに渡し、クライアントの動作をより高度に制御できるようにします。使用例については、以下を参照してください。</target>
        </trans-unit>
        <trans-unit id="fe2d49e9df412b554e332a39a2726c89c1318ae2" translate="yes" xml:space="preserve">
          <source>Memcached runs as a daemon and is allotted a specified amount of RAM. All it does is provide a fast interface for adding, retrieving and deleting data in the cache. All data is stored directly in memory, so there&amp;rsquo;s no overhead of database or filesystem usage.</source>
          <target state="translated">Memcachedはデーモンとして実行され、指定された量のRAMが割り当てられます。キャッシュ内のデータを追加、取得、削除するための高速なインターフェースを提供するだけです。すべてのデータはメモリに直接保存されるため、データベースまたはファイルシステムの使用によるオーバーヘッドはありません。</target>
        </trans-unit>
        <trans-unit id="8adc1f5324b8d52b9b22d6eba639e747916c344c" translate="yes" xml:space="preserve">
          <source>Memcached, the most commonly-used production cache backend, does not allow cache keys longer than 250 characters or containing whitespace or control characters, and using such keys will cause an exception. To encourage cache-portable code and minimize unpleasant surprises, the other built-in cache backends issue a warning (&lt;code&gt;django.core.cache.backends.base.CacheKeyWarning&lt;/code&gt;) if a key is used that would cause an error on memcached.</source>
          <target state="translated">最も一般的に使用されるプロダクションキャッシュバックエンドであるMemcachedでは、250文字を超える、または空白文字や制御文字を含むキャッシュキーを使用できません。そのようなキーを使用すると、例外が発生します。キャッシュ移植可能なコードを奨励し、不愉快な驚きを最小限に抑えるために、他の組み込みキャッシュバックエンドは、memcachedでエラーを引き起こすキーが使用された場合に警告（ &lt;code&gt;django.core.cache.backends.base.CacheKeyWarning&lt;/code&gt; ）を発行します。</target>
        </trans-unit>
        <trans-unit id="7315f949ce30d24b2c84415a3ec8ab22d9946b98" translate="yes" xml:space="preserve">
          <source>Message files</source>
          <target state="translated">メッセージファイル</target>
        </trans-unit>
        <trans-unit id="8a3f4ed084336620d7b21bf9a32d845342f802b8" translate="yes" xml:space="preserve">
          <source>Message levels</source>
          <target state="translated">メッセージレベル</target>
        </trans-unit>
        <trans-unit id="3ab63989bf9a5038b658c5d4c375220ce4a1ad58" translate="yes" xml:space="preserve">
          <source>Message middleware</source>
          <target state="translated">メッセージミドルウェア</target>
        </trans-unit>
        <trans-unit id="889993ad5e8282135d84fbb43d72e81128bd864a" translate="yes" xml:space="preserve">
          <source>Message tags</source>
          <target state="translated">メッセージタグ</target>
        </trans-unit>
        <trans-unit id="129739eac18a8e97b6afdd53b93d70391d1ea0f8" translate="yes" xml:space="preserve">
          <source>Message tags are a string representation of the message level plus any extra tags that were added directly in the view (see &lt;a href=&quot;#adding-extra-message-tags&quot;&gt;Adding extra message tags&lt;/a&gt; below for more details). Tags are stored in a string and are separated by spaces. Typically, message tags are used as CSS classes to customize message style based on message type. By default, each level has a single tag that&amp;rsquo;s a lowercase version of its own constant:</source>
          <target state="translated">メッセージタグは、メッセージレベルの文字列表現と、ビューに直接追加された追加のタグです（詳細については、以下の&lt;a href=&quot;#adding-extra-message-tags&quot;&gt;追加のメッセージタグの追加を&lt;/a&gt;参照してください）。タグは文字列に格納され、スペースで区切られます。通常、メッセージタグはCSSクラスとして使用され、メッセージタイプに基づいてメッセージスタイルをカスタマイズします。デフォルトでは、各レベルには、独自の定数の小文字バージョンである単一のタグがあります。</target>
        </trans-unit>
        <trans-unit id="f1702b4686278becffc88baabe6f4b7a8355532c" translate="yes" xml:space="preserve">
          <source>Messages</source>
          <target state="translated">Messages</target>
        </trans-unit>
        <trans-unit id="624996c17c837f1f6668cb6415dfad8e3d8884e1" translate="yes" xml:space="preserve">
          <source>Messages are comparable. That allows you to easily write tests:</source>
          <target state="translated">メッセージは同等です。そのため、テストを簡単に書くことができます。</target>
        </trans-unit>
        <trans-unit id="a181e64242c1481fec9677caa37392da3000ad86" translate="yes" xml:space="preserve">
          <source>Messages are implemented through a &lt;a href=&quot;../middleware&quot;&gt;middleware&lt;/a&gt; class and corresponding &lt;a href=&quot;../templates/api&quot;&gt;context processor&lt;/a&gt;.</source>
          <target state="translated">メッセージは、&lt;a href=&quot;../middleware&quot;&gt;ミドルウェア&lt;/a&gt;クラスと対応する&lt;a href=&quot;../templates/api&quot;&gt;コンテキストプロセッサを&lt;/a&gt;介して実装されます。</target>
        </trans-unit>
        <trans-unit id="dd219d05f6a7f3c767dd3fb3a161b3995ee9e9a7" translate="yes" xml:space="preserve">
          <source>Messages framework</source>
          <target state="translated">メッセージフレームワーク</target>
        </trans-unit>
        <trans-unit id="a7f63713d0d8953f6ed46c9ee2e3e3db8b179309" translate="yes" xml:space="preserve">
          <source>Messages levels are nothing more than integers, so you can define your own level constants and use them to create more customized user feedback, e.g.:</source>
          <target state="translated">メッセージレベルは整数以外の何物でもないので、独自のレベル定数を定義して、よりカスタマイズされたユーザーフィードバックを作成するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="fac15d4ec7ca50bd18d6e6dc1f5c0d39428a8296" translate="yes" xml:space="preserve">
          <source>Messages relating to the interaction of code with the database. For example, every application-level SQL statement executed by a request is logged at the &lt;code&gt;DEBUG&lt;/code&gt; level to this logger.</source>
          <target state="translated">コードとデータベースの相互作用に関するメッセージ。たとえば、要求によって実行されるすべてのアプリケーションレベルのSQLステートメントは、このロガーの &lt;code&gt;DEBUG&lt;/code&gt; レベルでログに記録されます。</target>
        </trans-unit>
        <trans-unit id="4fe57b41a0a77a8786566d6da2db51c95d96ec43" translate="yes" xml:space="preserve">
          <source>Messages to this logger have the following extra context:</source>
          <target state="translated">このロガーへのメッセージには、次の追加コンテキストがあります。</target>
        </trans-unit>
        <trans-unit id="80427fec440b3b33fe3d42e609fafaf5d7908f0b" translate="yes" xml:space="preserve">
          <source>Meter, Metre</source>
          <target state="translated">メートル、メートル</target>
        </trans-unit>
        <trans-unit id="6cc183aef428f6d3047aa1c84a2802cd7e666781" translate="yes" xml:space="preserve">
          <source>Method called prior to &lt;a href=&quot;#django.db.models.Field.get_db_prep_save&quot;&gt;&lt;code&gt;get_db_prep_save()&lt;/code&gt;&lt;/a&gt; to prepare the value before being saved (e.g. for &lt;a href=&quot;#django.db.models.DateField.auto_now&quot;&gt;&lt;code&gt;DateField.auto_now&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">保存する前に値を準備するために&lt;a href=&quot;#django.db.models.Field.get_db_prep_save&quot;&gt; &lt;code&gt;get_db_prep_save()&lt;/code&gt; の&lt;/a&gt;前に呼び出されるメソッド（例：&lt;a href=&quot;#django.db.models.DateField.auto_now&quot;&gt; &lt;code&gt;DateField.auto_now&lt;/code&gt; &lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="c8237e11e2d1fac8d031550b39dcb305f6b132f9" translate="yes" xml:space="preserve">
          <source>Method-calling happens in the &lt;a href=&quot;../ref/templates/builtins#std:templatetag-for&quot;&gt;&lt;code&gt;{% for %}&lt;/code&gt;&lt;/a&gt; loop: &lt;code&gt;question.choice_set.all&lt;/code&gt; is interpreted as the Python code &lt;code&gt;question.choice_set.all()&lt;/code&gt;, which returns an iterable of &lt;code&gt;Choice&lt;/code&gt; objects and is suitable for use in the &lt;a href=&quot;../ref/templates/builtins#std:templatetag-for&quot;&gt;&lt;code&gt;{% for %}&lt;/code&gt;&lt;/a&gt; tag.</source>
          <target state="translated">メソッド呼び出しは、で発生&lt;a href=&quot;../ref/templates/builtins#std:templatetag-for&quot;&gt; &lt;code&gt;{% for %}&lt;/code&gt; &lt;/a&gt;ループ： &lt;code&gt;question.choice_set.all&lt;/code&gt; は、 Pythonのコードとして解釈され &lt;code&gt;question.choice_set.all()&lt;/code&gt; の反復可能な戻り、 &lt;code&gt;Choice&lt;/code&gt; オブジェクトとで使用するのに適している&lt;a href=&quot;../ref/templates/builtins#std:templatetag-for&quot;&gt; &lt;code&gt;{% for %}&lt;/code&gt; &lt;/a&gt;タグ。</target>
        </trans-unit>
        <trans-unit id="7e4ac6803c9159c694f63d089cb06b2519c16aba" translate="yes" xml:space="preserve">
          <source>Methods</source>
          <target state="translated">Methods</target>
        </trans-unit>
        <trans-unit id="5110517bbb0ceecfc811636098d300a818bd2903" translate="yes" xml:space="preserve">
          <source>Methods are copied according to the following rules:</source>
          <target state="translated">メソッドは以下のルールに従ってコピーされます。</target>
        </trans-unit>
        <trans-unit id="c29b6a782cb3466448adea0bbc4942ee85bf4b9c" translate="yes" xml:space="preserve">
          <source>Methods implementing a file-like interface for reading from an &lt;code&gt;HttpRequest&lt;/code&gt; instance. This makes it possible to consume an incoming request in a streaming fashion. A common use-case would be to process a big XML payload with an iterative parser without constructing a whole XML tree in memory.</source>
          <target state="translated">&lt;code&gt;HttpRequest&lt;/code&gt; インスタンスから読み取るためのファイルのようなインターフェースを実装するメソッド。これにより、着信要求をストリーミング方式で消費することができます。一般的なユースケースは、メモリ内にXMLツリー全体を構築せずに、反復パーサーで大きなXMLペイロードを処理することです。</target>
        </trans-unit>
        <trans-unit id="7537f0d772e0cefae12a5778f293452376697984" translate="yes" xml:space="preserve">
          <source>Methods of &lt;code&gt;BoundField&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;BoundField&lt;/code&gt; のメソッド</target>
        </trans-unit>
        <trans-unit id="d7e863f4f1c1be0d2a8f2373d48bcee8d5acaf1b" translate="yes" xml:space="preserve">
          <source>Methods on &lt;code&gt;ContentType&lt;/code&gt; instances</source>
          <target state="translated">&lt;code&gt;ContentType&lt;/code&gt; インスタンスのメソッド</target>
        </trans-unit>
        <trans-unit id="d351ad385bfedf9cba6858a1efa5aa57dc9698a4" translate="yes" xml:space="preserve">
          <source>Methods that do not return &lt;code&gt;QuerySet&lt;/code&gt;s</source>
          <target state="translated">返さないメソッド &lt;code&gt;QuerySet&lt;/code&gt; Sを</target>
        </trans-unit>
        <trans-unit id="6fd9ae43b3e6c8f254de171e1a039e0f3d4c6292" translate="yes" xml:space="preserve">
          <source>Methods that it provides can be used to:</source>
          <target state="translated">それが提供するメソッドを使用することができます。</target>
        </trans-unit>
        <trans-unit id="50171e2f44297086d6687ff051c7db91aa0d69c5" translate="yes" xml:space="preserve">
          <source>Methods that return new &lt;code&gt;QuerySet&lt;/code&gt;s</source>
          <target state="translated">新しい返すメソッド &lt;code&gt;QuerySet&lt;/code&gt; Sを</target>
        </trans-unit>
        <trans-unit id="34b62d647fb1aa8ee6a32fabd2dd97436495a6e7" translate="yes" xml:space="preserve">
          <source>Methods with a &lt;code&gt;queryset_only&lt;/code&gt; attribute set to &lt;code&gt;False&lt;/code&gt; are always copied.</source>
          <target state="translated">&lt;code&gt;queryset_only&lt;/code&gt; 属性が &lt;code&gt;False&lt;/code&gt; に設定されているメソッドは常にコピーされます。</target>
        </trans-unit>
        <trans-unit id="b92a882f4327d805f08dc3ac7925cb366b015a77" translate="yes" xml:space="preserve">
          <source>Methods with a &lt;code&gt;queryset_only&lt;/code&gt; attribute set to &lt;code&gt;True&lt;/code&gt; are never copied.</source>
          <target state="translated">&lt;code&gt;queryset_only&lt;/code&gt; 属性が &lt;code&gt;True&lt;/code&gt; に設定されているメソッドはコピーされません。</target>
        </trans-unit>
        <trans-unit id="415e8975c1cd5ee32623426c5ac3a1fbe4a66920" translate="yes" xml:space="preserve">
          <source>Micrometer, Micrometre</source>
          <target state="translated">マイクロメータ、マイクロメートル</target>
        </trans-unit>
        <trans-unit id="4ac4affa2d0ba5a96fdb55b5878f3a9560d8453e" translate="yes" xml:space="preserve">
          <source>Microseconds.</source>
          <target state="translated">Microseconds.</target>
        </trans-unit>
        <trans-unit id="8650e63c88329a081961555eda8eb1cef5d7d48c" translate="yes" xml:space="preserve">
          <source>Microsoft SQL Server</source>
          <target state="translated">マイクロソフトエスエスキューエルサーバー</target>
        </trans-unit>
        <trans-unit id="eb8978ed84b5906ad4191a0b252828be64701bfa" translate="yes" xml:space="preserve">
          <source>Middleware</source>
          <target state="translated">Middleware</target>
        </trans-unit>
        <trans-unit id="013b752afcfb9baaa62063cabcd12f518b56607e" translate="yes" xml:space="preserve">
          <source>Middleware are run in reverse order during the response phase, which includes &lt;code&gt;process_template_response()&lt;/code&gt;.</source>
          <target state="translated">ミドルウェアは、 &lt;code&gt;process_template_response()&lt;/code&gt; を含む応答フェーズ中に逆の順序で実行されます。</target>
        </trans-unit>
        <trans-unit id="28bfdccf26e23c2219c9da6bf7f094e33a3e7c1d" translate="yes" xml:space="preserve">
          <source>Middleware can be built to support &lt;a href=&quot;http/middleware#async-middleware&quot;&gt;both sync and async&lt;/a&gt; contexts. Some of Django&amp;rsquo;s middleware is built like this, but not all. To see what middleware Django has to adapt, you can turn on debug logging for the &lt;code&gt;django.request&lt;/code&gt; logger and look for log messages about &lt;em&gt;&amp;ldquo;Synchronous middleware &amp;hellip; adapted&amp;rdquo;&lt;/em&gt;.</source>
          <target state="translated">ミドルウェアは&lt;a href=&quot;http/middleware#async-middleware&quot;&gt;、同期&lt;/a&gt;コンテキストと非同期コンテキストの両方をサポートするように構築できます。Djangoのミドルウェアの一部はこのように構築されていますが、すべてではありません。Djangoが適応する必要のあるミドルウェアを確認するには、 &lt;code&gt;django.request&lt;/code&gt; ロガーのデバッグログをオンにして、&lt;em&gt;「同期ミドルウェア&amp;hellip;適応」&lt;/em&gt;に関するログメッセージを探します。</target>
        </trans-unit>
        <trans-unit id="61de36f228910e5410cf91d320477c17afac3493" translate="yes" xml:space="preserve">
          <source>Middleware can either support only synchronous Python (the default), only asynchronous Python, or both. See &lt;a href=&quot;#async-middleware&quot;&gt;Asynchronous support&lt;/a&gt; for details of how to advertise what you support, and know what kind of request you are getting.</source>
          <target state="translated">ミドルウェアは、同期Python（デフォルト）のみ、非同期Pythonのみ、またはその両方をサポートできます。参照してください。&lt;a href=&quot;#async-middleware&quot;&gt;非同期サポート&lt;/a&gt;あなたがサポートして何を宣伝する方法の詳細については、あなたが得ている要求の種類を知っています。</target>
        </trans-unit>
        <trans-unit id="c0fd4a19dba75def9d8c0d763f8181a885326acd" translate="yes" xml:space="preserve">
          <source>Middleware can live anywhere on your Python path.</source>
          <target state="translated">ミドルウェアはPythonのパス上のどこにでも存在することができます。</target>
        </trans-unit>
        <trans-unit id="40a8812d6b3db5cc375256adc59ffac6ac735c17" translate="yes" xml:space="preserve">
          <source>Middleware can support any combination of synchronous and asynchronous requests. Django will adapt requests to fit the middleware&amp;rsquo;s requirements if it cannot support both, but at a performance penalty.</source>
          <target state="translated">ミドルウェアは、同期要求と非同期要求の任意の組み合わせをサポートできます。Djangoは、両方をサポートできない場合、ミドルウェアの要件に合うようにリクエストを適応させますが、パフォーマンスが低下します。</target>
        </trans-unit>
        <trans-unit id="041ebd3d71ecfcfc34214d0415172c97361cd2c1" translate="yes" xml:space="preserve">
          <source>Middleware factories must accept a &lt;code&gt;get_response&lt;/code&gt; argument. You can also initialize some global state for the middleware. Keep in mind a couple of caveats:</source>
          <target state="translated">ミドルウェアファクトリは、 &lt;code&gt;get_response&lt;/code&gt; 引数を受け入れる必要があります。ミドルウェアのグローバル状態を初期化することもできます。注意点がいくつかあります。</target>
        </trans-unit>
        <trans-unit id="becb94e67378bbdc666f92221c00fee5d9c7782a" translate="yes" xml:space="preserve">
          <source>Middleware for utilizing Web server provided authentication when enabled only on the login page. See &lt;a href=&quot;../howto/auth-remote-user#persistent-remote-user-middleware-howto&quot;&gt;Using REMOTE_USER on login pages only&lt;/a&gt; for usage details.</source>
          <target state="translated">Webサーバーを利用するためのミドルウェアは、ログインページでのみ有効になっている場合に認証を提供しました。参照&lt;a href=&quot;../howto/auth-remote-user#persistent-remote-user-middleware-howto&quot;&gt;のみ、ログインページにREMOTE_USERを使用した&lt;/a&gt;使用方法の詳細については。</target>
        </trans-unit>
        <trans-unit id="273bb01c3c655949e84e50a76a64ca07929efe48" translate="yes" xml:space="preserve">
          <source>Middleware for utilizing Web server provided authentication. See &lt;a href=&quot;../howto/auth-remote-user&quot;&gt;Authentication using REMOTE_USER&lt;/a&gt; for usage details.</source>
          <target state="translated">認証を提供するWebサーバーを利用するためのミドルウェア。参照&lt;a href=&quot;../howto/auth-remote-user&quot;&gt;REMOTE_USERを使用した認証を&lt;/a&gt;使用方法の詳細については。</target>
        </trans-unit>
        <trans-unit id="c162271e592b254696ec9da70c5a639a0962dbfb" translate="yes" xml:space="preserve">
          <source>Middleware is a framework of hooks into Django&amp;rsquo;s request/response processing. It&amp;rsquo;s a light, low-level &amp;ldquo;plugin&amp;rdquo; system for globally altering Django&amp;rsquo;s input or output.</source>
          <target state="translated">ミドルウェアは、Djangoの要求/応答処理へのフックのフレームワークです。これは、Djangoの入力または出力をグローバルに変更するための軽量で低レベルの「プラグイン」システムです。</target>
        </trans-unit>
        <trans-unit id="5f879bb383b1e685c9b8aed3ac05060d2ce8fdde" translate="yes" xml:space="preserve">
          <source>Middleware order and layering</source>
          <target state="translated">ミドルウェアの順序とレイヤリング</target>
        </trans-unit>
        <trans-unit id="f978b6bdf37893405edce30440dd6cdeed90da10" translate="yes" xml:space="preserve">
          <source>Middleware ordering</source>
          <target state="translated">ミドルウェア発注</target>
        </trans-unit>
        <trans-unit id="7a60d1acaad6e279a7e85ba440a4702e817dfa62" translate="yes" xml:space="preserve">
          <source>Migrating data between third-party apps</source>
          <target state="translated">サードパーティ製アプリ間でのデータの移行</target>
        </trans-unit>
        <trans-unit id="6104f9f7c588f7a77e0522afbc5dfe496325f1fa" translate="yes" xml:space="preserve">
          <source>Migration Operations</source>
          <target state="translated">移行作業</target>
        </trans-unit>
        <trans-unit id="8e03381bda29b3c39bbf1a66cfd648f8b31e67c1" translate="yes" xml:space="preserve">
          <source>Migration files</source>
          <target state="translated">移行ファイル</target>
        </trans-unit>
        <trans-unit id="53ff3d249382d25863d2b7fb6623728e99a7bc35" translate="yes" xml:space="preserve">
          <source>Migration files are composed of one or more &lt;code&gt;Operation&lt;/code&gt;s, objects that declaratively record what the migration should do to your database.</source>
          <target state="translated">移行ファイルは、1つ以上の &lt;code&gt;Operation&lt;/code&gt; で構成されます。このオブジェクトは、移行がデータベースに対して行うべきことを宣言的に記録するオブジェクトです。</target>
        </trans-unit>
        <trans-unit id="c25bf8db0829f899a4a501088ef01329564b4b8f" translate="yes" xml:space="preserve">
          <source>Migration guide</source>
          <target state="translated">移行ガイド</target>
        </trans-unit>
        <trans-unit id="7e2da04ce43cf92a7b18834d64966f83c65ad531" translate="yes" xml:space="preserve">
          <source>Migration operation for adding extensions</source>
          <target state="translated">拡張機能追加のための移行操作</target>
        </trans-unit>
        <trans-unit id="dca984afd74a0089c1d5a5816e4de2e8d46a60b5" translate="yes" xml:space="preserve">
          <source>Migrations</source>
          <target state="translated">Migrations</target>
        </trans-unit>
        <trans-unit id="f2a9aa05174d5ea271caefdf9a694cb35808cba9" translate="yes" xml:space="preserve">
          <source>Migrations are Django&amp;rsquo;s way of propagating changes you make to your models (adding a field, deleting a model, etc.) into your database schema. They&amp;rsquo;re designed to be mostly automatic, but you&amp;rsquo;ll need to know when to make migrations, when to run them, and the common problems you might run into.</source>
          <target state="translated">マイグレーションは、モデルに加えた変更（フィールドの追加、モデルの削除など）をデータベーススキーマに伝播するDjangoの方法です。これらはほとんどが自動化されるように設計されていますが、移行をいつ行うか、いつ実行するか、そして実行する可能性のある一般的な問題を知る必要があります。</target>
        </trans-unit>
        <trans-unit id="5860dbdc436c899604f2a6b5c077a545ec4c3e15" translate="yes" xml:space="preserve">
          <source>Migrations are Python files containing the old definitions of your models - thus, to write them, Django must take the current state of your models and serialize them out into a file.</source>
          <target state="translated">マイグレーションは、モデルの古い定義を含む Python ファイルです。</target>
        </trans-unit>
        <trans-unit id="4201b97e35b606bb8ab03e0bf508dc53754b71ae" translate="yes" xml:space="preserve">
          <source>Migrations are how Django stores changes to your models (and thus your database schema) - they&amp;rsquo;re files on disk. You can read the migration for your new model if you like; it&amp;rsquo;s the file &lt;code&gt;polls/migrations/0001_initial.py&lt;/code&gt;. Don&amp;rsquo;t worry, you&amp;rsquo;re not expected to read them every time Django makes one, but they&amp;rsquo;re designed to be human-editable in case you want to manually tweak how Django changes things.</source>
          <target state="translated">マイグレーションとは、Djangoがモデル（つまりデータベーススキーマ）への変更を保存する方法です。これらはディスク上のファイルです。必要に応じて、新しいモデルの移行を読むことができます。それはファイル &lt;code&gt;polls/migrations/0001_initial.py&lt;/code&gt; です。心配しないでください。Djangoが作成するたびに読む必要はありませんが、Djangoによる変更方法を手動で微調整したい場合に備えて、人間が編集できるように設計されています。</target>
        </trans-unit>
        <trans-unit id="8520b8c8572a999f56ebaca25b392b1e5a7fd768" translate="yes" xml:space="preserve">
          <source>Migrations are stored as an on-disk format, referred to here as &amp;ldquo;migration files&amp;rdquo;. These files are actually normal Python files with an agreed-upon object layout, written in a declarative style.</source>
          <target state="translated">移行はディスク上の形式で保存され、ここでは「移行ファイル」と呼びます。これらのファイルは、宣言されたスタイルで記述された、合意されたオブジェクトレイアウトを持つ実際の通常のPythonファイルです。</target>
        </trans-unit>
        <trans-unit id="2a332c317bf1d0e60fbc32123e8677f7cc70c2ae" translate="yes" xml:space="preserve">
          <source>Migrations are supported on all backends that Django ships with, as well as any third-party backends if they have programmed in support for schema alteration (done via the &lt;a href=&quot;../ref/schema-editor&quot;&gt;SchemaEditor&lt;/a&gt; class).</source>
          <target state="translated">移行は、Djangoに同梱されているすべてのバックエンドと、スキーマの変更をサポートするようにプログラムされているサードパーティのバックエンド（&lt;a href=&quot;../ref/schema-editor&quot;&gt;SchemaEditor&lt;/a&gt;クラスを介して行われる）でサポートされています。</target>
        </trans-unit>
        <trans-unit id="d8a210ab1a3d79accd51ed6fcf26ac6e586f421a" translate="yes" xml:space="preserve">
          <source>Migrations are very powerful and let you change your models over time, as you develop your project, without the need to delete your database or tables and make new ones - it specializes in upgrading your database live, without losing data. We&amp;rsquo;ll cover them in more depth in a later part of the tutorial, but for now, remember the three-step guide to making model changes:</source>
          <target state="translated">移行は非常に強力であり、プロジェクトを開発する際に、データベースやテーブルを削除して新しいものを作成する必要なしに、時間とともにモデルを変更できます。これは、データを失うことなく、データベースをライブでアップグレードすることを専門としています。これらについては、チュートリアルの後半で詳しく説明しますが、ここでは、モデルを変更するための3つのステップのガイドを思い出してください。</target>
        </trans-unit>
        <trans-unit id="41654abea0665f9a7a61031904f82652ca108fd1" translate="yes" xml:space="preserve">
          <source>Migrations can be reversed with &lt;a href=&quot;../ref/django-admin#django-admin-migrate&quot;&gt;&lt;code&gt;migrate&lt;/code&gt;&lt;/a&gt; by passing the number of the previous migration. For example, to reverse migration &lt;code&gt;books.0003&lt;/code&gt;:</source>
          <target state="translated">前の移行の番号を渡す&lt;a href=&quot;../ref/django-admin#django-admin-migrate&quot;&gt; &lt;code&gt;migrate&lt;/code&gt; &lt;/a&gt;により、移行を元に戻すことができます。たとえば、移行 &lt;code&gt;books.0003&lt;/code&gt; を逆にする場合。0003：</target>
        </trans-unit>
        <trans-unit id="287dd3417d62ad864c57a1c97b22ab37b12724d5" translate="yes" xml:space="preserve">
          <source>Migrations that add unique fields</source>
          <target state="translated">ユニークなフィールドを追加するマイグレーション</target>
        </trans-unit>
        <trans-unit id="ee3e9d3540e1e45a2df1c00240d8e8d4a4deb51c" translate="yes" xml:space="preserve">
          <source>Migrations that alter data are usually called &amp;ldquo;data migrations&amp;rdquo;; they&amp;rsquo;re best written as separate migrations, sitting alongside your schema migrations.</source>
          <target state="translated">データを変更する移行は、通常「データ移行」と呼ばれます。スキーマの移行と並んで、別々の移行として作成するのが最適です。</target>
        </trans-unit>
        <trans-unit id="5ec5bf73e34a683f1006273ac17e9ff09e9d9e72" translate="yes" xml:space="preserve">
          <source>Migrations will run the same way on the same dataset and produce consistent results, meaning that what you see in development and staging is, under the same circumstances, exactly what will happen in production.</source>
          <target state="translated">移行は同じデータセット上で同じように実行され、一貫した結果が得られます。つまり、開発とステージングで表示されるものは、同じ状況下で、本番で起こることと同じです。</target>
        </trans-unit>
        <trans-unit id="2eb4f2a30749a0e17e31104b3bab726aafe81cf3" translate="yes" xml:space="preserve">
          <source>Mile</source>
          <target state="translated">Mile</target>
        </trans-unit>
        <trans-unit id="938df1db624a12e5f3794fda79717eccaea7b65b" translate="yes" xml:space="preserve">
          <source>Millimetre, Millimeter</source>
          <target state="translated">ミリメートル、ミリメートル</target>
        </trans-unit>
        <trans-unit id="294882601354ee55d0273a6e0801814fd33c87c2" translate="yes" xml:space="preserve">
          <source>Mind your charset</source>
          <target state="translated">気をつけて</target>
        </trans-unit>
        <trans-unit id="a3fc900f874bc71a36d5a756225bfdc1f04f6842" translate="yes" xml:space="preserve">
          <source>Minutes is the smallest unit used, and &amp;ldquo;0 minutes&amp;rdquo; will be returned for any date that is in the future relative to the comparison point.</source>
          <target state="translated">Minutesは使用される最小単位であり、「0分」は、比較ポイントに対して将来の日付に対して返されます。</target>
        </trans-unit>
        <trans-unit id="9f34801db80740b6f10ab3922d189b3912dbf6f0" translate="yes" xml:space="preserve">
          <source>Minutes is the smallest unit used, and &amp;ldquo;0 minutes&amp;rdquo; will be returned for any date that is in the past relative to the comparison point.</source>
          <target state="translated">分は使用される最小単位であり、「0分」は、比較ポイントを基準として過去の日付に対して返されます。</target>
        </trans-unit>
        <trans-unit id="8ed20376662d49d565aa06cdaa83fc71ecbc93eb" translate="yes" xml:space="preserve">
          <source>Minutes.</source>
          <target state="translated">Minutes.</target>
        </trans-unit>
        <trans-unit id="5f2cbd107037ed23248e5058a7a64cd6bae05468" translate="yes" xml:space="preserve">
          <source>Miscellaneous</source>
          <target state="translated">Miscellaneous</target>
        </trans-unit>
        <trans-unit id="881da705478e54a3227ce93b7e1330829ae0e155" translate="yes" xml:space="preserve">
          <source>Missing context variables are logged as &lt;code&gt;DEBUG&lt;/code&gt; messages.</source>
          <target state="translated">不足しているコンテキスト変数は、 &lt;code&gt;DEBUG&lt;/code&gt; メッセージとしてログに記録されます。</target>
        </trans-unit>
        <trans-unit id="6814e874673f049fff670e46ee2d5ebe0602c10a" translate="yes" xml:space="preserve">
          <source>Mitre ratio limit (&lt;code&gt;mitre_limit&lt;/code&gt;) only affects mitered join style.</source>
          <target state="translated">&lt;code&gt;mitre_limit&lt;/code&gt; 比の制限（mitre_limit）は留め継ぎ結合スタイルにのみ影響します。</target>
        </trans-unit>
        <trans-unit id="dcb555521dabc0a453c76cc4ab7c56dcedf3418e" translate="yes" xml:space="preserve">
          <source>Mixing HTTP and HTTPS on the same site is discouraged, therefore &lt;a href=&quot;#django.http.HttpRequest.build_absolute_uri&quot;&gt;&lt;code&gt;build_absolute_uri()&lt;/code&gt;&lt;/a&gt; will always generate an absolute URI with the same scheme the current request has. If you need to redirect users to HTTPS, it&amp;rsquo;s best to let your Web server redirect all HTTP traffic to HTTPS.</source>
          <target state="translated">同じサイトでHTTPとHTTPSを混在させることはお勧めしません。そのため、&lt;a href=&quot;#django.http.HttpRequest.build_absolute_uri&quot;&gt; &lt;code&gt;build_absolute_uri()&lt;/code&gt; &lt;/a&gt;は常に、現在のリクエストと同じスキームで絶対URIを生成します。ユーザーをHTTPSにリダイレクトする必要がある場合は、WebサーバーにすべてのHTTPトラフィックをHTTPSにリダイレクトさせることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="6405571c37c55f3908e016d6f0d1bc7dd1ad7b90" translate="yes" xml:space="preserve">
          <source>Mixins are a form of multiple inheritance where behaviors and attributes of multiple parent classes can be combined.</source>
          <target state="translated">ミックスインとは、複数の親クラスの振る舞いや属性を組み合わせることができる多重継承の一形態です。</target>
        </trans-unit>
        <trans-unit id="7faff22844ff4aa0e265d825accaee88c80b838d" translate="yes" xml:space="preserve">
          <source>Mixins are an excellent way of reusing code across multiple classes, but they come with some cost. The more your code is scattered among mixins, the harder it will be to read a child class and know what exactly it is doing, and the harder it will be to know which methods from which mixins to override if you are subclassing something that has a deep inheritance tree.</source>
          <target state="translated">ミキシンは複数のクラス間でコードを再利用するための優れた方法ですが、それにはいくつかのコストがかかります。あなたのコードがミックスインに分散すればするほど、子クラスを読み込んでそれが何をしているのかを正確に知ることは難しくなります。</target>
        </trans-unit>
        <trans-unit id="8b491ee73979a719bb1af9d3247e0a61ac5e7319" translate="yes" xml:space="preserve">
          <source>Model &lt;code&gt;Meta&lt;/code&gt; options</source>
          <target state="translated">モデル &lt;code&gt;Meta&lt;/code&gt; オプション</target>
        </trans-unit>
        <trans-unit id="bfdb5bfd735f8228097410fff85a12d88904e922" translate="yes" xml:space="preserve">
          <source>Model &lt;code&gt;_meta&lt;/code&gt; API</source>
          <target state="translated">モデル &lt;code&gt;_meta&lt;/code&gt; API</target>
        </trans-unit>
        <trans-unit id="cec2b6199d9a2dcabb152e3ac5aa91edeb898132" translate="yes" xml:space="preserve">
          <source>Model API reference. For introductory material, see &lt;a href=&quot;../../topics/db/models&quot;&gt;Models&lt;/a&gt;.</source>
          <target state="translated">モデルAPIリファレンス。紹介資料については、&lt;a href=&quot;../../topics/db/models&quot;&gt;モデルを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="9bf86752979128e4676b84c447ce0cf15b2b37d6" translate="yes" xml:space="preserve">
          <source>Model Form API reference. For introductory material about model forms, see the &lt;a href=&quot;../../topics/forms/modelforms&quot;&gt;Creating forms from models&lt;/a&gt; topic guide.</source>
          <target state="translated">モデルフォームAPIリファレンス。モデルフォームの&lt;a href=&quot;../../topics/forms/modelforms&quot;&gt;概要&lt;/a&gt;については、トピック「モデルからフォームを作成する」を参照してください。</target>
        </trans-unit>
        <trans-unit id="3c96d990f2ccf84f92cf27b02cad319aaaf78f8b" translate="yes" xml:space="preserve">
          <source>Model Form Functions</source>
          <target state="translated">モデルフォーム関数</target>
        </trans-unit>
        <trans-unit id="43751733528e91e6a81ee1390944c2f4caa1db81" translate="yes" xml:space="preserve">
          <source>Model Meta options</source>
          <target state="translated">モデルメタオプション</target>
        </trans-unit>
        <trans-unit id="cda29083574ba4f14bce85088566ec29f2d87d35" translate="yes" xml:space="preserve">
          <source>Model _meta API</source>
          <target state="translated">モデル_APIターゲット</target>
        </trans-unit>
        <trans-unit id="28ca529d99e4855dd276594af7db79215340645f" translate="yes" xml:space="preserve">
          <source>Model attributes</source>
          <target state="translated">モデル属性</target>
        </trans-unit>
        <trans-unit id="15ac726910ce828d6f749b66392ad113e9e02cc8" translate="yes" xml:space="preserve">
          <source>Model class reference</source>
          <target state="translated">モデルクラスの参照</target>
        </trans-unit>
        <trans-unit id="37287d65959cefe51226e772fa03bd4238e3e0c1" translate="yes" xml:space="preserve">
          <source>Model field</source>
          <target state="translated">モデルフィールド</target>
        </trans-unit>
        <trans-unit id="41719e961e289e645a51ec9bdd2cad757b697d54" translate="yes" xml:space="preserve">
          <source>Model field reference</source>
          <target state="translated">モデルフィールド参照</target>
        </trans-unit>
        <trans-unit id="695921f5cbf66d3a0c35cce9afebbff6926a0687" translate="yes" xml:space="preserve">
          <source>Model fields</source>
          <target state="translated">モデルフィールド</target>
        </trans-unit>
        <trans-unit id="d56e51d2d60a86a3949592b2c8a12b4b1ebf5d14" translate="yes" xml:space="preserve">
          <source>Model fields and relationships &lt;code&gt;verbose_name&lt;/code&gt; and &lt;code&gt;help_text&lt;/code&gt; option values</source>
          <target state="translated">モデルのフィールドと関係の &lt;code&gt;verbose_name&lt;/code&gt; および &lt;code&gt;help_text&lt;/code&gt; オプションの値</target>
        </trans-unit>
        <trans-unit id="1e80f8624b932b0e8e91e5056ff5d83c4a905b6b" translate="yes" xml:space="preserve">
          <source>Model form views provide a &lt;a href=&quot;../../ref/class-based-views/mixins-editing#django.views.generic.edit.ModelFormMixin.form_valid&quot;&gt;&lt;code&gt;form_valid()&lt;/code&gt;&lt;/a&gt; implementation that saves the model automatically. You can override this if you have any special requirements; see below for examples.</source>
          <target state="translated">モデルフォームビューは、モデルを自動的に保存する&lt;a href=&quot;../../ref/class-based-views/mixins-editing#django.views.generic.edit.ModelFormMixin.form_valid&quot;&gt; &lt;code&gt;form_valid()&lt;/code&gt; &lt;/a&gt;実装を提供します。特別な要件がある場合は、これをオーバーライドできます。例については、以下を参照してください。</target>
        </trans-unit>
        <trans-unit id="7a1d7da0b3927cb03dafa5eee91a571920018939" translate="yes" xml:space="preserve">
          <source>Model forms</source>
          <target state="translated">モデルフォーム</target>
        </trans-unit>
        <trans-unit id="d66e24ec33a2b3c68df3f08c48b5b1e196b500a3" translate="yes" xml:space="preserve">
          <source>Model formsets</source>
          <target state="translated">モデルフォームセット</target>
        </trans-unit>
        <trans-unit id="8378c1c9f92338fe290a10e3674d26e5ac280291" translate="yes" xml:space="preserve">
          <source>Model formsets are very similar to formsets. Let&amp;rsquo;s say we want to present a formset to edit &lt;code&gt;Author&lt;/code&gt; model instances:</source>
          <target state="translated">モデルフォームセットは、フォームセットと非常によく似ています。 &lt;code&gt;Author&lt;/code&gt; モデルのインスタンスを編集するためのフォームセットを提示したいとしましょう：</target>
        </trans-unit>
        <trans-unit id="65c8939e1430f30633a07f17d075ed74776ac5e3" translate="yes" xml:space="preserve">
          <source>Model formsets validate unique fields in a case-sensitive manner. Thus when using a case-insensitive collation, a formset with unique field values that differ only by case will pass validation, but upon calling &lt;code&gt;save()&lt;/code&gt;, an &lt;code&gt;IntegrityError&lt;/code&gt; will be raised.</source>
          <target state="translated">モデルフォームセットは、一意のフィールドを大文字と小文字を区別して検証します。したがって、大文字と小文字を区別しない照合を使用する場合、大文字と小文字のみが異なる一意のフィールド値を持つフォームセットは検証に合格しますが、 &lt;code&gt;save()&lt;/code&gt; を呼び出すと、 &lt;code&gt;IntegrityError&lt;/code&gt; が発生します。</target>
        </trans-unit>
        <trans-unit id="dd41371e5246330c123f4f022d722358234894fa" translate="yes" xml:space="preserve">
          <source>Model index reference</source>
          <target state="translated">モデルインデックス参照</target>
        </trans-unit>
        <trans-unit id="6960b6acac76077e50017099fe2ef244227d2a7b" translate="yes" xml:space="preserve">
          <source>Model inheritance</source>
          <target state="translated">モデルの継承</target>
        </trans-unit>
        <trans-unit id="5b71c0d1a57d50595ab71717a70ae2e080828c49" translate="yes" xml:space="preserve">
          <source>Model inheritance in Django works almost identically to the way normal class inheritance works in Python, but the basics at the beginning of the page should still be followed. That means the base class should subclass &lt;a href=&quot;../../ref/models/instances#django.db.models.Model&quot;&gt;&lt;code&gt;django.db.models.Model&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Djangoでのモデルの継承は、Pythonでの通常のクラスの継承とほぼ同じように機能しますが、ページの最初にある基本に従う必要があります。つまり、基本クラスは&lt;a href=&quot;../../ref/models/instances#django.db.models.Model&quot;&gt; &lt;code&gt;django.db.models.Model&lt;/code&gt; &lt;/a&gt;をサブクラス化する必要があります。</target>
        </trans-unit>
        <trans-unit id="5ca38e74d8be1b734a75b8de59f840b8eac71446" translate="yes" xml:space="preserve">
          <source>Model instance reference</source>
          <target state="translated">モデルインスタンス参照</target>
        </trans-unit>
        <trans-unit id="5b0f552413c0fc0955ae8f0d43a9dce0382f6758" translate="yes" xml:space="preserve">
          <source>Model managers</source>
          <target state="translated">モデルマネージャー</target>
        </trans-unit>
        <trans-unit id="ee0c8a95a9f103b378fe4743340f1323f96c496a" translate="yes" xml:space="preserve">
          <source>Model managers are inherited from abstract base classes. Overriding an inherited field which is referenced by an inherited &lt;a href=&quot;managers#django.db.models.Manager&quot;&gt;&lt;code&gt;Manager&lt;/code&gt;&lt;/a&gt; may cause subtle bugs. See &lt;a href=&quot;managers#custom-managers-and-inheritance&quot;&gt;custom managers and model inheritance&lt;/a&gt;.</source>
          <target state="translated">モデルマネージャーは、抽象基本クラスから継承されます。継承された&lt;a href=&quot;managers#django.db.models.Manager&quot;&gt; &lt;code&gt;Manager&lt;/code&gt; &lt;/a&gt;が参照する継承されたフィールドをオーバーライドすると、微妙なバグが発生する可能性があります。&lt;a href=&quot;managers#custom-managers-and-inheritance&quot;&gt;カスタムマネージャーとモデルの継承を&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="e7ef284a8b1cde33fda80d5b952f2b5d4500f805" translate="yes" xml:space="preserve">
          <source>Model metadata is &amp;ldquo;anything that&amp;rsquo;s not a field&amp;rdquo;, such as ordering options (&lt;a href=&quot;../../ref/models/options#django.db.models.Options.ordering&quot;&gt;&lt;code&gt;ordering&lt;/code&gt;&lt;/a&gt;), database table name (&lt;a href=&quot;../../ref/models/options#django.db.models.Options.db_table&quot;&gt;&lt;code&gt;db_table&lt;/code&gt;&lt;/a&gt;), or human-readable singular and plural names (&lt;a href=&quot;../../ref/models/options#django.db.models.Options.verbose_name&quot;&gt;&lt;code&gt;verbose_name&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../ref/models/options#django.db.models.Options.verbose_name_plural&quot;&gt;&lt;code&gt;verbose_name_plural&lt;/code&gt;&lt;/a&gt;). None are required, and adding &lt;code&gt;class
Meta&lt;/code&gt; to a model is completely optional.</source>
          <target state="translated">モデルメタデータは、順序付けオプション（&lt;a href=&quot;../../ref/models/options#django.db.models.Options.ordering&quot;&gt; &lt;code&gt;ordering&lt;/code&gt; &lt;/a&gt;）、データベーステーブル名（&lt;a href=&quot;../../ref/models/options#django.db.models.Options.db_table&quot;&gt; &lt;code&gt;db_table&lt;/code&gt; &lt;/a&gt;）、人間が読める単数形および複数形の名前（&lt;a href=&quot;../../ref/models/options#django.db.models.Options.verbose_name&quot;&gt; &lt;code&gt;verbose_name&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;../../ref/models/options#django.db.models.Options.verbose_name_plural&quot;&gt; &lt;code&gt;verbose_name_plural&lt;/code&gt; &lt;/a&gt;）など、「フィールドではないもの」です。必要なものはなく、モデルへの &lt;code&gt;class Meta&lt;/code&gt; 追加は完全にオプションです。</target>
        </trans-unit>
        <trans-unit id="da0c31f079fa44ab9d3bf1cf67f70d075de29d6d" translate="yes" xml:space="preserve">
          <source>Model methods</source>
          <target state="translated">モデルメソッド</target>
        </trans-unit>
        <trans-unit id="e21aa040365d9fd0e90458c9cdf44ab96ac4b61f" translate="yes" xml:space="preserve">
          <source>Model methods &lt;code&gt;short_description&lt;/code&gt; attribute values</source>
          <target state="translated">モデルメソッドの &lt;code&gt;short_description&lt;/code&gt; 属性値</target>
        </trans-unit>
        <trans-unit id="cfc2c1b4808a8c6c174bac6b735cf6d4817b2770" translate="yes" xml:space="preserve">
          <source>Model reference</source>
          <target state="translated">モデルリファレンス</target>
        </trans-unit>
        <trans-unit id="e901998535b4b4548a823fe6e8dff9a51d7e087d" translate="yes" xml:space="preserve">
          <source>Model signals</source>
          <target state="translated">モデル信号</target>
        </trans-unit>
        <trans-unit id="c8bfdb89301aaa9bc29391e7c013fd0445caa5ab" translate="yes" xml:space="preserve">
          <source>Model signals &lt;code&gt;sender&lt;/code&gt; model can be lazily referenced when connecting a receiver by specifying its full application label. For example, an &lt;code&gt;Question&lt;/code&gt; model defined in the &lt;code&gt;polls&lt;/code&gt; application could be referenced as &lt;code&gt;'polls.Question'&lt;/code&gt;. This sort of reference can be quite handy when dealing with circular import dependencies and swappable models.</source>
          <target state="translated">モデルシグナルの &lt;code&gt;sender&lt;/code&gt; モデルは、完全なアプリケーションラベルを指定することにより、受信者を接続するときに遅延参照できます。たとえば、 &lt;code&gt;polls&lt;/code&gt; アプリケーションで定義された &lt;code&gt;Question&lt;/code&gt; モデルは、 &lt;code&gt;'polls.Question'&lt;/code&gt; として参照できます。この種の参照は、循環インポートの依存関係とスワップ可能なモデルを処理するときに非常に便利です。</target>
        </trans-unit>
        <trans-unit id="165513e8bf709c70b23fa24d2ae33a838ec202dc" translate="yes" xml:space="preserve">
          <source>Model table names</source>
          <target state="translated">モデルテーブル名</target>
        </trans-unit>
        <trans-unit id="54a980d3853518b4411e7a3b2ddb629ed67ce75d" translate="yes" xml:space="preserve">
          <source>Model verbose names values</source>
          <target state="translated">冗長名の値をモデル化する</target>
        </trans-unit>
        <trans-unit id="3dc8c7b4713b18469124c44661e6c1bc2f64d7e7" translate="yes" xml:space="preserve">
          <source>ModelForm factory function</source>
          <target state="translated">モデルフォームの工場機能</target>
        </trans-unit>
        <trans-unit id="f3798f81c7b6fecad2cbfec741314f8a66c0eca3" translate="yes" xml:space="preserve">
          <source>Models</source>
          <target state="translated">Models</target>
        </trans-unit>
        <trans-unit id="1f5b77557908456acc92fa188a7dd4804d6625a9" translate="yes" xml:space="preserve">
          <source>Models across files</source>
          <target state="translated">ファイル間のモデル</target>
        </trans-unit>
        <trans-unit id="28356323a61c86746a499dd28b297834e5993733" translate="yes" xml:space="preserve">
          <source>Models and &lt;code&gt;request.user&lt;/code&gt;</source>
          <target state="translated">モデルと &lt;code&gt;request.user&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f50e5bec2539d667d25b642e592d0b97dcede69d" translate="yes" xml:space="preserve">
          <source>Models and Forms</source>
          <target state="translated">モデルとフォーム</target>
        </trans-unit>
        <trans-unit id="4a49aecaa0df41bb8d712681740aeb1f36c1fc1b" translate="yes" xml:space="preserve">
          <source>Models and databases</source>
          <target state="translated">モデルとデータベース</target>
        </trans-unit>
        <trans-unit id="f9d52954ae89d4a9e2174f5b96bd02ccd7c226bb" translate="yes" xml:space="preserve">
          <source>Models are created for foreign tables.</source>
          <target state="translated">外部テーブル用のモデルが作成されます。</target>
        </trans-unit>
        <trans-unit id="005e6f010a367db7b6295c852fb0fac610e1e07a" translate="yes" xml:space="preserve">
          <source>Models are created for materialized views if &lt;a href=&quot;#cmdoption-inspectdb-include-views&quot;&gt;&lt;code&gt;--include-views&lt;/code&gt;&lt;/a&gt; is used.</source>
          <target state="translated">&lt;a href=&quot;#cmdoption-inspectdb-include-views&quot;&gt; &lt;code&gt;--include-views&lt;/code&gt; &lt;/a&gt;を使用すると、マテリアライズドビューのモデルが作成されます。</target>
        </trans-unit>
        <trans-unit id="71b4110d21468008c8e0a0e33f9599a8d37cfc02" translate="yes" xml:space="preserve">
          <source>Models are created for partition tables if &lt;a href=&quot;#cmdoption-inspectdb-include-partitions&quot;&gt;&lt;code&gt;--include-partitions&lt;/code&gt;&lt;/a&gt; is used.</source>
          <target state="translated">&lt;a href=&quot;#cmdoption-inspectdb-include-partitions&quot;&gt; &lt;code&gt;--include-partitions&lt;/code&gt; &lt;/a&gt;を使用すると、パーティションテーブルのモデルが作成されます。</target>
        </trans-unit>
        <trans-unit id="de1c8f41efbb309a8f500003679e08088e02a2b4" translate="yes" xml:space="preserve">
          <source>Modern browsers don&amp;rsquo;t honor &lt;code&gt;X-XSS-Protection&lt;/code&gt; HTTP header anymore. Although the setting offers little practical benefit, you may still want to set the header if you support older browsers.</source>
          <target state="translated">最近のブラウザーは、 &lt;code&gt;X-XSS-Protection&lt;/code&gt; HTTPヘッダーを受け入れなくなりました。この設定では実用的なメリットはほとんどありませんが、古いブラウザをサポートしている場合は、ヘッダーを設定することもできます。</target>
        </trans-unit>
        <trans-unit id="e3034007e7d3292d4b30af33ea10b4ff6560349a" translate="yes" xml:space="preserve">
          <source>Modern browsers honor the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options&quot;&gt;X-Frame-Options&lt;/a&gt; HTTP header that indicates whether or not a resource is allowed to load within a frame or iframe. If the response contains the header with a value of &lt;code&gt;SAMEORIGIN&lt;/code&gt; then the browser will only load the resource in a frame if the request originated from the same site. If the header is set to &lt;code&gt;DENY&lt;/code&gt; then the browser will block the resource from loading in a frame no matter which site made the request.</source>
          <target state="translated">最新のブラウザーは、フレームまたはiframe内でリソースをロードできるかどうかを示す&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options&quot;&gt;X-Frame-Options&lt;/a&gt; HTTPヘッダーを受け入れます。応答に &lt;code&gt;SAMEORIGIN&lt;/code&gt; の値を持つヘッダーが含まれている場合、ブラウザーが要求を同じサイトから発信した場合にのみ、フレーム内のリソースをロードします。ヘッダーが &lt;code&gt;DENY&lt;/code&gt; に設定されている場合、ブラウザーは、どのサイトがリクエストを行ったかに関係なく、リソースがフレームにロードされるのをブロックします。</target>
        </trans-unit>
        <trans-unit id="8c3dd67323c825d3247a42c118aeed74da038214" translate="yes" xml:space="preserve">
          <source>Modern browsers provide a more secure default policy for the &lt;code&gt;SameSite&lt;/code&gt; flag and will assume &lt;code&gt;Lax&lt;/code&gt; for cookies without an explicit value set.</source>
          <target state="translated">最新のブラウザは、 &lt;code&gt;SameSite&lt;/code&gt; フラグに対してより安全なデフォルトポリシーを提供し、明示的な値が設定されていないCookieに対しては &lt;code&gt;Lax&lt;/code&gt; を想定します。</target>
        </trans-unit>
        <trans-unit id="61e67113000137e6e326a81f0fcb1e0dadbbee68" translate="yes" xml:space="preserve">
          <source>Modify &lt;a href=&quot;../../ref/settings#std:setting-PASSWORD_HASHERS&quot;&gt;&lt;code&gt;PASSWORD_HASHERS&lt;/code&gt;&lt;/a&gt; to list &lt;code&gt;Argon2PasswordHasher&lt;/code&gt; first. That is, in your settings file, you&amp;rsquo;d put:</source>
          <target state="translated">最初に &lt;code&gt;Argon2PasswordHasher&lt;/code&gt; をリストするように&lt;a href=&quot;../../ref/settings#std:setting-PASSWORD_HASHERS&quot;&gt; &lt;code&gt;PASSWORD_HASHERS&lt;/code&gt; &lt;/a&gt;を変更します。つまり、設定ファイルに次のように記述します。</target>
        </trans-unit>
        <trans-unit id="7eae86d823b9275ab9b9bba0c0701ec36c9bc076" translate="yes" xml:space="preserve">
          <source>Modify &lt;a href=&quot;../../ref/settings#std:setting-PASSWORD_HASHERS&quot;&gt;&lt;code&gt;PASSWORD_HASHERS&lt;/code&gt;&lt;/a&gt; to list &lt;code&gt;BCryptSHA256PasswordHasher&lt;/code&gt; first. That is, in your settings file, you&amp;rsquo;d put:</source>
          <target state="translated">最初に &lt;code&gt;BCryptSHA256PasswordHasher&lt;/code&gt; をリストするように&lt;a href=&quot;../../ref/settings#std:setting-PASSWORD_HASHERS&quot;&gt; &lt;code&gt;PASSWORD_HASHERS&lt;/code&gt; &lt;/a&gt;を変更します。つまり、設定ファイルに次のように記述します。</target>
        </trans-unit>
        <trans-unit id="8c82d310179969bace38749c982ea817a33948da" translate="yes" xml:space="preserve">
          <source>Modify Windows environment</source>
          <target state="translated">Windows環境の変更</target>
        </trans-unit>
        <trans-unit id="101a18a8e247790ce8a0355c2bad81d18bc06a10" translate="yes" xml:space="preserve">
          <source>Modifying a manager&amp;rsquo;s initial &lt;code&gt;QuerySet&lt;/code&gt;</source>
          <target state="translated">マネージャーの初期 &lt;code&gt;QuerySet&lt;/code&gt; の変更</target>
        </trans-unit>
        <trans-unit id="b3a3cd384e10d2a50b6cfc40c58749ddd9ddb377" translate="yes" xml:space="preserve">
          <source>Modifying the user libraries can affect other Python software on your system.</source>
          <target state="translated">ユーザーライブラリを変更すると、システム上の他のPythonソフトウェアに影響を与える可能性があります。</target>
        </trans-unit>
        <trans-unit id="6188e9bec1a9bf83d8f692aed7153e3b5e7d1f67" translate="yes" xml:space="preserve">
          <source>Modifying upload handlers on the fly</source>
          <target state="translated">アップロードハンドラをオンザフライで変更する</target>
        </trans-unit>
        <trans-unit id="79bf8ae756f6957bd6a600e041cf7b0f01e97d7c" translate="yes" xml:space="preserve">
          <source>Module containing the models, e.g. &lt;code&gt;&amp;lt;module 'django.contrib.admin.models'
from 'django/contrib/admin/models.py'&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">モデルを含むモジュール、例えば、 &lt;code&gt;&amp;lt;module 'django.contrib.admin.models' from 'django/contrib/admin/models.py'&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5914d9d522831d2cbcc08992929a1fa0fffd13f4" translate="yes" xml:space="preserve">
          <source>Month abbreviation in Associated Press style. Proprietary extension.</source>
          <target state="translated">Associated Pressスタイルでの月の省略形。独自の拡張子。</target>
        </trans-unit>
        <trans-unit id="1547c51f374801edb89bd01a886d7df6c59157e7" translate="yes" xml:space="preserve">
          <source>Month without leading zeros.</source>
          <target state="translated">先頭のゼロがない月。</target>
        </trans-unit>
        <trans-unit id="789db7de9daf4c3dea26155c4de1508cc63c78dc" translate="yes" xml:space="preserve">
          <source>Month, 2 digits with leading zeros.</source>
          <target state="translated">月、先頭にゼロを含む2桁の数字。</target>
        </trans-unit>
        <trans-unit id="6268ce268f58c92a8b8c465bb7039eb42da0b88e" translate="yes" xml:space="preserve">
          <source>Month, locale specific alternative representation usually used for long date representation.</source>
          <target state="translated">月、ロケール固有の代替表現で、通常は長い日付の表現に用いられます。</target>
        </trans-unit>
        <trans-unit id="68b6759ae7ec52517f6707eab3f49676fded852c" translate="yes" xml:space="preserve">
          <source>Month, textual, 3 letters, lowercase.</source>
          <target state="translated">月、テキスト、3文字、小文字。</target>
        </trans-unit>
        <trans-unit id="54acf667cda1d25c557e72b3eecaf3a5e654244a" translate="yes" xml:space="preserve">
          <source>Month, textual, 3 letters.</source>
          <target state="translated">月、テキスト、3文字。</target>
        </trans-unit>
        <trans-unit id="55f3a466c30a6f138ee4b6107c9f1297f5a1c83b" translate="yes" xml:space="preserve">
          <source>Month, textual, long.</source>
          <target state="translated">月、テキスト、長い。</target>
        </trans-unit>
        <trans-unit id="d8582964d85a742a683053ee36dbed4b0d9acc91" translate="yes" xml:space="preserve">
          <source>Month-based archive page &amp;ndash; displays all days with entries in the given month.</source>
          <target state="translated">月ベースのアーカイブページ&amp;ndash;指定された月のエントリを含むすべての日を表示します。</target>
        </trans-unit>
        <trans-unit id="8e07c73ff2257408bd49d184644b99ce9d8ef611" translate="yes" xml:space="preserve">
          <source>More &lt;a href=&quot;builtins#std:templatetag-block&quot;&gt;&lt;code&gt;{% block %}&lt;/code&gt;&lt;/a&gt; tags in your base templates are better. Remember, child templates don&amp;rsquo;t have to define all parent blocks, so you can fill in reasonable defaults in a number of blocks, then only define the ones you need later. It&amp;rsquo;s better to have more hooks than fewer hooks.</source>
          <target state="translated">もっと&lt;a href=&quot;builtins#std:templatetag-block&quot;&gt; &lt;code&gt;{% block %}&lt;/code&gt; &lt;/a&gt;お使いのベーステンプレートのタグが優れています。子テンプレートがすべての親ブロックを定義する必要はないので、いくつかのブロックに適切なデフォルトを入力して、後で必要なものだけを定義できることを覚えておいてください。フックの数を減らすよりも、フックを増やす方がよいでしょう。</target>
        </trans-unit>
        <trans-unit id="299848f148ba8e572159f4587392af118a784da7" translate="yes" xml:space="preserve">
          <source>More about Django &lt;code&gt;Form&lt;/code&gt; classes</source>
          <target state="translated">Django &lt;code&gt;Form&lt;/code&gt; クラスの詳細</target>
        </trans-unit>
        <trans-unit id="a0d0d1d2ad55a7e08bc82e9ce7118b05835d686b" translate="yes" xml:space="preserve">
          <source>More about Django Form classes</source>
          <target state="translated">Django フォームクラスの詳細</target>
        </trans-unit>
        <trans-unit id="b989fb93fc290d806e1beba975983651f8aa1602" translate="yes" xml:space="preserve">
          <source>More advanced migrations</source>
          <target state="translated">より高度な移行</target>
        </trans-unit>
        <trans-unit id="b2e3edf8aaff223f7c4bc82400f24d060ba670ce" translate="yes" xml:space="preserve">
          <source>More attractive automatically-generated admin features &amp;ndash; this overview barely scratched the surface.</source>
          <target state="translated">より魅力的な自動生成された管理機能&amp;ndash;この概要は表面をかろうじて引っ掻きました。</target>
        </trans-unit>
        <trans-unit id="8c923753c18be61c1004c12ca3fade2d08722915" translate="yes" xml:space="preserve">
          <source>More complex examples are beyond the scope of this document, but remember - for any configuration of your Field instance, &lt;code&gt;deconstruct()&lt;/code&gt; must return arguments that you can pass to &lt;code&gt;__init__&lt;/code&gt; to reconstruct that state.</source>
          <target state="translated">より複雑な例はこのドキュメントの範囲を超えていますが、Fieldインスタンスの構成では、 &lt;code&gt;deconstruct()&lt;/code&gt; は &lt;code&gt;__init__&lt;/code&gt; に渡してその状態を再構築できる引数を返す必要があります。</target>
        </trans-unit>
        <trans-unit id="db010a93e37a57c66656081acb50090017c4ab0d" translate="yes" xml:space="preserve">
          <source>More comprehensive tests</source>
          <target state="translated">より包括的なテスト</target>
        </trans-unit>
        <trans-unit id="58c8313dae352f6c86d7bd1fe65b2e1089885088" translate="yes" xml:space="preserve">
          <source>More details are in &lt;a href=&quot;../i18n/translation#explicitly-setting-the-active-language&quot;&gt;Explicitly setting the active language&lt;/a&gt;.</source>
          <target state="translated">詳しくは&lt;a href=&quot;../i18n/translation#explicitly-setting-the-active-language&quot;&gt;、アクティブ言語の明示的な設定を&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="1b1a82e1043266d553c6d8ba1b0f6a2fd3e63754" translate="yes" xml:space="preserve">
          <source>More details are in &lt;a href=&quot;../i18n/translation#how-django-discovers-language-preference&quot;&gt;How Django discovers language preference&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;../i18n/translation#how-django-discovers-language-preference&quot;&gt;Djangoが言語設定を検出&lt;/a&gt;する方法を参照してください。</target>
        </trans-unit>
        <trans-unit id="0a7b4df20dd480c377a581def56226b3c32ecde3" translate="yes" xml:space="preserve">
          <source>More details can be found in the &lt;a href=&quot;https://www.w3.org/International/questions/qa-i18n&quot;&gt;W3C Web Internationalization FAQ&lt;/a&gt;, the &lt;a href=&quot;https://en.wikipedia.org/wiki/Internationalization_and_localization&quot;&gt;Wikipedia article&lt;/a&gt; or the &lt;a href=&quot;https://www.gnu.org/software/gettext/manual/gettext.html#Concepts&quot;&gt;GNU gettext documentation&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;https://www.w3.org/International/questions/qa-i18n&quot;&gt;W3C Webの国際化に関するFAQ&lt;/a&gt;、&lt;a href=&quot;https://en.wikipedia.org/wiki/Internationalization_and_localization&quot;&gt;Wikipediaの記事、&lt;/a&gt;または&lt;a href=&quot;https://www.gnu.org/software/gettext/manual/gettext.html#Concepts&quot;&gt;GNU gettextのドキュメントを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="5ad47279afb909f9e5e8501ff7c41001131170ec" translate="yes" xml:space="preserve">
          <source>More examples of generic views are available in some third party applications, or you could write your own as needed.</source>
          <target state="translated">サードパーティ製のアプリケーションには、より多くのジェネリックビューの例が用意されていますが、必要に応じて自分で書くこともできます。</target>
        </trans-unit>
        <trans-unit id="525622173583779827304cfa800b3d1dfee99b4c" translate="yes" xml:space="preserve">
          <source>More granular output</source>
          <target state="translated">より粒度の高い出力</target>
        </trans-unit>
        <trans-unit id="f063c4c87e9bae1816af9e601f0d358edd44ea7d" translate="yes" xml:space="preserve">
          <source>More information for new contributors</source>
          <target state="translated">新規投稿者のための詳細情報</target>
        </trans-unit>
        <trans-unit id="2d8f6e8eec977860d6662bb5520eba03e159160c" translate="yes" xml:space="preserve">
          <source>More often, a newcomer to testing will create some code and later decide that it should have some tests. Perhaps it would have been better to write some tests earlier, but it&amp;rsquo;s never too late to get started.</source>
          <target state="translated">多くの場合、テストの初心者はいくつかのコードを作成し、後でいくつかのテストが必要であると判断します。おそらく、以前にいくつかのテストを記述した方がよかったのかもしれませんが、始めるのに遅すぎることは決してありません。</target>
        </trans-unit>
        <trans-unit id="2618cd8952a806ae4124de24ab64990b2f4af767" translate="yes" xml:space="preserve">
          <source>More on fields</source>
          <target state="translated">フィールドの詳細</target>
        </trans-unit>
        <trans-unit id="5bc01b6e00a77dc61a0069c6788d0ed249454de6" translate="yes" xml:space="preserve">
          <source>More than just HTML</source>
          <target state="translated">HTMLだけではない</target>
        </trans-unit>
        <trans-unit id="270b6239e60a5ebd66ab15c63878e1d3222c33cc" translate="yes" xml:space="preserve">
          <source>More than one foreign key to the same model</source>
          <target state="translated">同一モデルに複数の外部キー</target>
        </trans-unit>
        <trans-unit id="2586d441d16010e8412e11c6de8265bc1c1e557f" translate="yes" xml:space="preserve">
          <source>Moreover, arithmetic operations may be performed between the distance objects:</source>
          <target state="translated">さらに、距離オブジェクト間で演算を行ってもよい。</target>
        </trans-unit>
        <trans-unit id="8b1fa3471d34f0d234ba4558b474a601a8cc898d" translate="yes" xml:space="preserve">
          <source>Moreover, if the &lt;code&gt;GEOSGeometry&lt;/code&gt; is in a different coordinate system (has a different SRID value) than that of the field, then it will be implicitly transformed into the SRID of the model&amp;rsquo;s field, using the spatial database&amp;rsquo;s transform procedure:</source>
          <target state="translated">さらに、 &lt;code&gt;GEOSGeometry&lt;/code&gt; がフィールドの座標系とは異なる座標系（SRID値が異なる）にある場合、空間データベースの変換手順を使用して、モデルのフィールドのSRIDに暗黙的に変換されます。</target>
        </trans-unit>
        <trans-unit id="fee232fed6319afa654e98407d6a84369cdc26ae" translate="yes" xml:space="preserve">
          <source>Morphs this SpatialReference from ESRI&amp;rsquo;s format to EPSG</source>
          <target state="translated">このSpatialReferenceをESRIの形式からEPSGにモーフします。</target>
        </trans-unit>
        <trans-unit id="2776d1cf12cc121cc6a53ab101839d36c44da49e" translate="yes" xml:space="preserve">
          <source>Morphs this SpatialReference to ESRI&amp;rsquo;s format.</source>
          <target state="translated">このSpatialReferenceをESRIの形式に変換します。</target>
        </trans-unit>
        <trans-unit id="de802c1632cedcbed1d1269dec4dd87d1626b63d" translate="yes" xml:space="preserve">
          <source>Most &lt;code&gt;QueryDict&lt;/code&gt;s you encounter, and in particular those at &lt;code&gt;request.POST&lt;/code&gt; and &lt;code&gt;request.GET&lt;/code&gt;, will be immutable. If you are instantiating one yourself, you can make it mutable by passing &lt;code&gt;mutable=True&lt;/code&gt; to its &lt;code&gt;__init__()&lt;/code&gt;.</source>
          <target state="translated">遭遇するほとんどの &lt;code&gt;QueryDict&lt;/code&gt; 、特に &lt;code&gt;request.POST&lt;/code&gt; および &lt;code&gt;request.GET&lt;/code&gt; でのQueryDictは不変です。自分でインスタンス化している場合は、その &lt;code&gt;__init__()&lt;/code&gt; &lt;code&gt;mutable=True&lt;/code&gt; を渡して、可変にすることができます。</target>
        </trans-unit>
        <trans-unit id="f0099135e74b5675cbf0a4c807d825e1972187f6" translate="yes" xml:space="preserve">
          <source>Most browsers send &lt;code&gt;Accept: */*&lt;/code&gt; by default, so this would return &lt;code&gt;True&lt;/code&gt; for all content types. Setting an explicit &lt;code&gt;Accept&lt;/code&gt; header in API requests can be useful for returning a different content type for those consumers only. See &lt;a href=&quot;../topics/class-based-views/generic-editing#content-negotiation-example&quot;&gt;Content negotiation example&lt;/a&gt; of using &lt;code&gt;accepts()&lt;/code&gt; to return different content to API consumers.</source>
          <target state="translated">ほとんどのブラウザは &lt;code&gt;Accept: */*&lt;/code&gt; をデフォルトで送信するため、これはすべてのコンテンツタイプに対して &lt;code&gt;True&lt;/code&gt; を返します。APIリクエストで明示的な &lt;code&gt;Accept&lt;/code&gt; ヘッダーを設定すると、それらのコンシューマーに対してのみ異なるコンテンツタイプを返す場合に役立ちます。 &lt;code&gt;accepts()&lt;/code&gt; を使用してさまざまなコンテンツをAPIコンシューマーに返す&lt;a href=&quot;../topics/class-based-views/generic-editing#content-negotiation-example&quot;&gt;コンテンツネゴシエーションの例&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="fd83b2da2d31a5769324d7579da823d1abff813e" translate="yes" xml:space="preserve">
          <source>Most developers won&amp;rsquo;t need to worry about changing form encoding, but this is a useful feature for applications that talk to legacy systems whose encoding you cannot control.</source>
          <target state="translated">ほとんどの開発者はフォームのエンコーディングの変更について心配する必要はありませんが、これはエンコーディングを制御できないレガシーシステムと通信するアプリケーションにとって便利な機能です。</target>
        </trans-unit>
        <trans-unit id="10ade9a2061b05f7b91f4318c4b19e8aa5ca9527" translate="yes" xml:space="preserve">
          <source>Most fields don&amp;rsquo;t require data preparation. Simple data types, such as integers and strings, are &amp;lsquo;ready to write&amp;rsquo; as a Python object. However, more complex data types often require some modification.</source>
          <target state="translated">ほとんどのフィールドはデータの準備を必要としません。整数や文字列などの単純なデータ型は、Pythonオブジェクトとして「書き込み可能」です。ただし、多くの場合、より複雑なデータ型にはいくつかの変更が必要です。</target>
        </trans-unit>
        <trans-unit id="d529a24fa241e9065286615d191b753364639d64" translate="yes" xml:space="preserve">
          <source>Most filters don&amp;rsquo;t take arguments. In this case, leave the argument out of your function:</source>
          <target state="translated">ほとんどのフィルターは引数を取りません。この場合、関数の引数は省略します。</target>
        </trans-unit>
        <trans-unit id="6ac8c4baf64570371700af7032fa39a6dc85046f" translate="yes" xml:space="preserve">
          <source>Most generic views require the &lt;code&gt;queryset&lt;/code&gt; key, which is a &lt;code&gt;QuerySet&lt;/code&gt; instance; see &lt;a href=&quot;../../topics/db/queries&quot;&gt;Making queries&lt;/a&gt; for more information about &lt;code&gt;QuerySet&lt;/code&gt; objects.</source>
          <target state="translated">ほとんどの汎用ビューには、 &lt;code&gt;QuerySet&lt;/code&gt; インスタンスである &lt;code&gt;queryset&lt;/code&gt; キーが必要です。 &lt;code&gt;QuerySet&lt;/code&gt; オブジェクトの詳細については、クエリの&lt;a href=&quot;../../topics/db/queries&quot;&gt;作成を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="283a9ab800c27a0c42452de79dd91ba830b18c75" translate="yes" xml:space="preserve">
          <source>Most larger Django sites use a separate Web server &amp;ndash; i.e., one that&amp;rsquo;s not also running Django &amp;ndash; for serving static files. This server often runs a different type of web server &amp;ndash; faster but less full-featured. Some common choices are:</source>
          <target state="translated">ほとんどの大規模なDjangoサイトは、静的ファイルを提供するために別のWebサーバー（つまり、Djangoも実行していないサーバー）を使用します。このサーバーは多くの場合、異なるタイプのWebサーバーを実行します。高速ですが、フル機能ではありません。一般的な選択肢は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="d071dd58c0ea09b5920680c494256897fe6f5f87" translate="yes" xml:space="preserve">
          <source>Most method calls attached to objects are also available from within templates. This means that templates have access to much more than just class attributes (like field names) and variables passed in from views. For example, the Django ORM provides the &lt;a href=&quot;../../topics/db/queries#topics-db-queries-related&quot;&gt;&amp;ldquo;entry_set&amp;rdquo;&lt;/a&gt; syntax for finding a collection of objects related on a foreign key. Therefore, given a model called &amp;ldquo;comment&amp;rdquo; with a foreign key relationship to a model called &amp;ldquo;task&amp;rdquo; you can loop through all comments attached to a given task like this:</source>
          <target state="translated">オブジェクトにアタッチされたほとんどのメソッド呼び出しは、テンプレート内からも使用できます。つまり、テンプレートは、クラスの属性（フィールド名など）やビューから渡された変数以外にもアクセスできます。たとえば、Django ORMは、外部キーに関連するオブジェクトのコレクションを検索するための&lt;a href=&quot;../../topics/db/queries#topics-db-queries-related&quot;&gt;「entry_set」&lt;/a&gt;構文を提供します。したがって、「タスク」と呼ばれるモデルへの外部キー関係を持つ「コメント」と呼ばれるモデルを指定すると、次のように、特定のタスクに添付されたすべてのコメントをループできます。</target>
        </trans-unit>
        <trans-unit id="145d0f6157ec473a53e372c29d0eb1af87df32d4" translate="yes" xml:space="preserve">
          <source>Most of the time you&amp;rsquo;ll use &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.all&quot;&gt;&lt;code&gt;all()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.get&quot;&gt;&lt;code&gt;get()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.filter&quot;&gt;&lt;code&gt;filter()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.exclude&quot;&gt;&lt;code&gt;exclude()&lt;/code&gt;&lt;/a&gt; when you need to look up objects from the database. However, that&amp;rsquo;s far from all there is; see the &lt;a href=&quot;../../ref/models/querysets#queryset-api&quot;&gt;QuerySet API Reference&lt;/a&gt; for a complete list of all the various &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; methods.</source>
          <target state="translated">ほとんどの場合、データベースからオブジェクトを検索する必要がある場合は、&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.all&quot;&gt; &lt;code&gt;all()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.get&quot;&gt; &lt;code&gt;get()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.filter&quot;&gt; &lt;code&gt;filter()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.exclude&quot;&gt; &lt;code&gt;exclude()&lt;/code&gt; を&lt;/a&gt;使用します。ただし、それだけではありません。さまざまな&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; &lt;/a&gt;メソッドの完全なリストについては、&lt;a href=&quot;../../ref/models/querysets#queryset-api&quot;&gt;QuerySet APIリファレンス&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="e5a70a402429d9e0751ab8352b3b6edf4a999b65" translate="yes" xml:space="preserve">
          <source>Most of the time you&amp;rsquo;ll use a &lt;code&gt;File&lt;/code&gt; that Django&amp;rsquo;s given you (i.e. a file attached to a model as above, or perhaps an uploaded file).</source>
          <target state="translated">時間のほとんどは、あなたが使用します &lt;code&gt;File&lt;/code&gt; Djangoのはあなたに（上記のように、モデルに添付すなわちファイル、またはおそらくアップロードされたファイル）を与えられたことを。</target>
        </trans-unit>
        <trans-unit id="ee3f7c7371e94698b53b1354c3bef6e0872c9065" translate="yes" xml:space="preserve">
          <source>Most of the time, you&amp;rsquo;ll instantiate &lt;a href=&quot;#django.template.Context&quot;&gt;&lt;code&gt;Context&lt;/code&gt;&lt;/a&gt; objects by passing in a fully-populated dictionary to &lt;code&gt;Context()&lt;/code&gt;. But you can add and delete items from a &lt;code&gt;Context&lt;/code&gt; object once it&amp;rsquo;s been instantiated, too, using standard dictionary syntax:</source>
          <target state="translated">ほとんどの場合、完全に入力されたディクショナリを &lt;code&gt;Context()&lt;/code&gt; に渡すことにより、&lt;a href=&quot;#django.template.Context&quot;&gt; &lt;code&gt;Context&lt;/code&gt; &lt;/a&gt;オブジェクトをインスタンス化します。ただし、インスタンス化された後も、標準の辞書構文を使用して、 &lt;code&gt;Context&lt;/code&gt; オブジェクトの項目を追加および削除できます。</target>
        </trans-unit>
        <trans-unit id="75df474b5d319622c3cc5760d003faf378b95a8e" translate="yes" xml:space="preserve">
          <source>Most of the time, you&amp;rsquo;ll pass the file data from &lt;code&gt;request&lt;/code&gt; into the form as described in &lt;a href=&quot;../../ref/forms/api#binding-uploaded-files&quot;&gt;Binding uploaded files to a form&lt;/a&gt;. This would look something like:</source>
          <target state="translated">ほとんどの場合、&lt;a href=&quot;../../ref/forms/api#binding-uploaded-files&quot;&gt;アップロードされたファイルをフォーム&lt;/a&gt;にバインドするで説明されているように、 &lt;code&gt;request&lt;/code&gt; からファイルデータをフォームに渡します。これは次のようになります。</target>
        </trans-unit>
        <trans-unit id="119f2c924a319d37b00a931fb60d52e9b7e587d8" translate="yes" xml:space="preserve">
          <source>Most other &lt;code&gt;django-admin&lt;/code&gt; commands that interact with the database operate in the same way as &lt;a href=&quot;../../ref/django-admin#django-admin-migrate&quot;&gt;&lt;code&gt;migrate&lt;/code&gt;&lt;/a&gt; &amp;ndash; they only ever operate on one database at a time, using &lt;code&gt;--database&lt;/code&gt; to control the database used.</source>
          <target state="translated">データベースと対話する他のほとんどの &lt;code&gt;django-admin&lt;/code&gt; コマンドは、&lt;a href=&quot;../../ref/django-admin#django-admin-migrate&quot;&gt; &lt;code&gt;migrate&lt;/code&gt; &lt;/a&gt;と同じように動作します &lt;code&gt;--database&lt;/code&gt; databaseを使用して、使用するデータベースを制御することにより、一度に1つのデータベースでのみ動作します。</target>
        </trans-unit>
        <trans-unit id="377bcaf04e9797c6340b2a8bdad4bee17d23a9bf" translate="yes" xml:space="preserve">
          <source>Most people are familiar with using latitude and longitude to reference a location on the earth&amp;rsquo;s surface. However, latitude and longitude are angles, not distances. In other words, while the shortest path between two points on a flat surface is a straight line, the shortest path between two points on a curved surface (such as the earth) is an &lt;em&gt;arc&lt;/em&gt; of a &lt;a href=&quot;https://en.wikipedia.org/wiki/Great_circle&quot;&gt;great circle&lt;/a&gt;. &lt;a href=&quot;#fnthematic&quot; id=&quot;id8&quot;&gt;[4]&lt;/a&gt; Thus, additional computation is required to obtain distances in planar units (e.g., kilometers and miles). Using a geographic coordinate system may introduce complications for the developer later on. For example, SpatiaLite does not have the capability to perform distance calculations between geometries using geographic coordinate systems, e.g. constructing a query to find all points within 5 miles of a county boundary stored as WGS84. &lt;a href=&quot;#fndist&quot; id=&quot;id9&quot;&gt;[5]&lt;/a&gt;</source>
          <target state="translated">ほとんどの人は、地表面上の場所を参照するために緯度と経度を使用することに慣れています。ただし、緯度と経度は角度ではなく、距離です。平坦な表面上の2点間の最短経路が直線、（例えば土のような）曲面上の2点間の最短経路である言い換えれば、ある&lt;em&gt;アーク&lt;/em&gt;の&lt;a href=&quot;https://en.wikipedia.org/wiki/Great_circle&quot;&gt;大円&lt;/a&gt;。&lt;a href=&quot;#fnthematic&quot; id=&quot;id8&quot;&gt;[4]&lt;/a&gt;したがって、平面単位（たとえば、キロメートルとマイル）で距離を取得するには、追加の計算が必要です。地理座標系を使用すると、後で開発者が複雑になる可能性があります。たとえば、SpatiaLiteには、地理座標系を使用してジオメトリ間の距離計算を実行する機能がありません。たとえば、クエリを作成して、WGS84として保存されている郡の境界から5マイル以内にあるすべてのポイントを検索します。&lt;a href=&quot;#fndist&quot; id=&quot;id9&quot;&gt;[5]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="aa380c3aed18b055c47fc70106524669e774f0e4" translate="yes" xml:space="preserve">
          <source>Most tags accept arguments:</source>
          <target state="translated">ほとんどのタグは引数を受け付けます。</target>
        </trans-unit>
        <trans-unit id="7d98610356545b43a90b40c891fb649c8f9fda3c" translate="yes" xml:space="preserve">
          <source>Most validation can be done using &lt;a href=&quot;#validators&quot;&gt;validators&lt;/a&gt; - helpers that can be reused. Validators are functions (or callables) that take a single argument and raise &lt;code&gt;ValidationError&lt;/code&gt; on invalid input. Validators are run after the field&amp;rsquo;s &lt;code&gt;to_python&lt;/code&gt; and &lt;code&gt;validate&lt;/code&gt; methods have been called.</source>
          <target state="translated">ほとんどの検証は、再利用可能なヘルパーである&lt;a href=&quot;#validators&quot;&gt;バリデーター&lt;/a&gt;を使用して行うことができます。バリデーターは、単一の引数を取り、無効な入力で &lt;code&gt;ValidationError&lt;/code&gt; を発生させる関数（または呼び出し可能オブジェクト）です。バリデーターは、フィールドの &lt;code&gt;to_python&lt;/code&gt; および &lt;code&gt;validate&lt;/code&gt; メソッドが呼び出された後に実行されます。</target>
        </trans-unit>
        <trans-unit id="723f4d4f07515e4cb9cdd3456d1f4fe86b2d6da5" translate="yes" xml:space="preserve">
          <source>Most views requires CSRF protection, but a few do not.</source>
          <target state="translated">ほとんどのビューはCSRF保護を必要としますが、そうでないものもあります。</target>
        </trans-unit>
        <trans-unit id="4128c1d8e90ab53d91e5ee014d62fddc81452af8" translate="yes" xml:space="preserve">
          <source>Most websites that care about time zones ask users in which time zone they live and store this information in the user&amp;rsquo;s profile. For anonymous users, they use the time zone of their primary audience or UTC. &lt;a href=&quot;http://pytz.sourceforge.net/&quot;&gt;pytz&lt;/a&gt; provides &lt;a href=&quot;http://pytz.sourceforge.net/#helpers&quot;&gt;helpers&lt;/a&gt;, like a list of time zones per country, that you can use to pre-select the most likely choices.</source>
          <target state="translated">タイムゾーンを重視するほとんどのWebサイトは、ユーザーがどのタイムゾーンに住んでいるかを尋ね、この情報をユーザーのプロファイルに保存します。匿名ユーザーの場合は、主要な対象ユーザーのタイムゾーンまたはUTCを使用します。&lt;a href=&quot;http://pytz.sourceforge.net/&quot;&gt;pytz&lt;/a&gt;は、国ごとのタイムゾーンのリストのような、最も可能性の高い選択肢を事前選択するために使用できる&lt;a href=&quot;http://pytz.sourceforge.net/#helpers&quot;&gt;ヘルパーを&lt;/a&gt;提供します。</target>
        </trans-unit>
        <trans-unit id="6c8d12148748172394b8e79a6d152a32dd323fc1" translate="yes" xml:space="preserve">
          <source>Move the &lt;code&gt;polls&lt;/code&gt; directory into the &lt;code&gt;django-polls&lt;/code&gt; directory.</source>
          <target state="translated">移動 &lt;code&gt;polls&lt;/code&gt; にディレクトリを &lt;code&gt;django-polls&lt;/code&gt; ディレクトリ。</target>
        </trans-unit>
        <trans-unit id="c58c013c30d8701a971a22d72e01d0b764b2b536" translate="yes" xml:space="preserve">
          <source>Moves the model&amp;rsquo;s table from one tablespace to another.</source>
          <target state="translated">モデルのテーブルをあるテーブルスペースから別のテーブルスペースに移動します。</target>
        </trans-unit>
        <trans-unit id="d794a8d047d2027efa4972e195bbc53e5a2bcbce" translate="yes" xml:space="preserve">
          <source>Moving an object from one database to another</source>
          <target state="translated">あるデータベースから別のデータベースへのオブジェクトの移動</target>
        </trans-unit>
        <trans-unit id="f0a1c83ee00097339c2b403b2193bd3d9c55c46d" translate="yes" xml:space="preserve">
          <source>Mozilla discusses various topics regarding &lt;a href=&quot;https://infosec.mozilla.org/guidelines/web_security.html&quot;&gt;web security&lt;/a&gt;. Their pages also include security principles that apply to any system.</source>
          <target state="translated">Mozillaは、&lt;a href=&quot;https://infosec.mozilla.org/guidelines/web_security.html&quot;&gt;Webセキュリティ&lt;/a&gt;に関するさまざまなトピックについて説明しています。彼らのページには、あらゆるシステムに適用されるセキュリティ原則も含まれています。</target>
        </trans-unit>
        <trans-unit id="64683d853b5d7f50f535fc278d45f921a490d24b" translate="yes" xml:space="preserve">
          <source>Much like &lt;a href=&quot;#django.db.migrations.operations.RunSQL&quot;&gt;&lt;code&gt;RunSQL&lt;/code&gt;&lt;/a&gt;, ensure that if you change schema inside here you&amp;rsquo;re either doing it outside the scope of the Django model system (e.g. triggers) or that you use &lt;a href=&quot;#django.db.migrations.operations.SeparateDatabaseAndState&quot;&gt;&lt;code&gt;SeparateDatabaseAndState&lt;/code&gt;&lt;/a&gt; to add in operations that will reflect your changes to the model state - otherwise, the versioned ORM and the autodetector will stop working correctly.</source>
          <target state="translated">&lt;a href=&quot;#django.db.migrations.operations.RunSQL&quot;&gt; &lt;code&gt;RunSQL&lt;/code&gt; &lt;/a&gt;と同様に、ここでスキーマを変更する場合は、Djangoモデルシステム（トリガーなど）のスコープ外で変更するか、&lt;a href=&quot;#django.db.migrations.operations.SeparateDatabaseAndState&quot;&gt; &lt;code&gt;SeparateDatabaseAndState&lt;/code&gt; &lt;/a&gt;を使用して、モデルの状態への変更を反映する操作を追加してください。それ以外の場合、バージョン管理されたORMと自動検出機能が正しく機能しなくなります。</target>
        </trans-unit>
        <trans-unit id="41621a064f44e6daabdc27522b33298fa8aa62b1" translate="yes" xml:space="preserve">
          <source>Multi-database support</source>
          <target state="translated">マルチデータベースのサポート</target>
        </trans-unit>
        <trans-unit id="ddb04e3ae372a17b92e0255fc4b279009db9af90" translate="yes" xml:space="preserve">
          <source>Multi-table inheritance</source>
          <target state="translated">マルチテーブルの継承</target>
        </trans-unit>
        <trans-unit id="85c68fd61341ba3993094799674748ff1b1fad2b" translate="yes" xml:space="preserve">
          <source>Multidimensional arrays with indexes and slices</source>
          <target state="translated">インデックスとスライスを持つ多次元配列</target>
        </trans-unit>
        <trans-unit id="6dae03e38262e1d8fbd6001ae280309609de7140" translate="yes" xml:space="preserve">
          <source>Multiple admin sites in the same URLconf</source>
          <target state="translated">同じURLに複数の管理者サイトがある場合conf</target>
        </trans-unit>
        <trans-unit id="d28c471111be99bb04f22b41815e829ee1145175" translate="yes" xml:space="preserve">
          <source>Multiple databases</source>
          <target state="translated">複数のデータベース</target>
        </trans-unit>
        <trans-unit id="a9dadd9453a271030d305246c8860a4e63627858" translate="yes" xml:space="preserve">
          <source>Multiple inheritance</source>
          <target state="translated">複数の継承</target>
        </trans-unit>
        <trans-unit id="232abe7a48c7c1ee8c0efaa67e739c2a6509d72e" translate="yes" xml:space="preserve">
          <source>Multiple keys can be chained together to form a path lookup:</source>
          <target state="translated">複数のキーを連結してパスルックアップを形成することができます。</target>
        </trans-unit>
        <trans-unit id="5112902c4e583bfe7514db7252746db758fd62e2" translate="yes" xml:space="preserve">
          <source>Multiple object mixins</source>
          <target state="translated">複数のオブジェクトミックスイン</target>
        </trans-unit>
        <trans-unit id="86f9c0e7700126520aeb57e446419f134fb8a6f7" translate="yes" xml:space="preserve">
          <source>Mumbai: 19,000,000</source>
          <target state="translated">ムンバイ:19,000,000,000</target>
        </trans-unit>
        <trans-unit id="ce70a430cc3e5cc4fd6f19e52ba7a0369c6c0c5b" translate="yes" xml:space="preserve">
          <source>Must be a subclass of &lt;a href=&quot;widgets#django.forms.MultiWidget&quot;&gt;&lt;code&gt;django.forms.MultiWidget&lt;/code&gt;&lt;/a&gt;. Default value is &lt;a href=&quot;widgets#django.forms.TextInput&quot;&gt;&lt;code&gt;TextInput&lt;/code&gt;&lt;/a&gt;, which probably is not very useful in this case.</source>
          <target state="translated">&lt;a href=&quot;widgets#django.forms.MultiWidget&quot;&gt; &lt;code&gt;django.forms.MultiWidget&lt;/code&gt; の&lt;/a&gt;サブクラスである必要があります。デフォルト値は&lt;a href=&quot;widgets#django.forms.TextInput&quot;&gt; &lt;code&gt;TextInput&lt;/code&gt; &lt;/a&gt;ですが、この場合はあまり役に立ちません。</target>
        </trans-unit>
        <trans-unit id="6f73e164a384f2624b0aa7805fd299ecce41fed8" translate="yes" xml:space="preserve">
          <source>Must return the lookup named &lt;code&gt;lookup_name&lt;/code&gt;. For instance, by returning &lt;code&gt;self.output_field.get_lookup(lookup_name)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;lookup_name&lt;/code&gt; という名前のルックアップを返す必要があります。たとえば、 &lt;code&gt;self.output_field.get_lookup(lookup_name)&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="c493b67af068ea997fcbeb95a43f0dc8b18c7ce6" translate="yes" xml:space="preserve">
          <source>Must return the lookup named &lt;code&gt;transform_name&lt;/code&gt;. For instance, by returning &lt;code&gt;self.output_field.get_transform(transform_name)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;transform_name&lt;/code&gt; という名前のルックアップを返す必要があります。たとえば、 &lt;code&gt;self.output_field.get_transform(transform_name)&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="a96b7ca96aaabf64fd5a1e1f8c1b203d836deaa9" translate="yes" xml:space="preserve">
          <source>Mutability: &lt;a href=&quot;#django.contrib.gis.geos.GEOSGeometry&quot;&gt;&lt;code&gt;GEOSGeometry&lt;/code&gt;&lt;/a&gt; objects may be modified.</source>
          <target state="translated">変更可能性：&lt;a href=&quot;#django.contrib.gis.geos.GEOSGeometry&quot;&gt; &lt;code&gt;GEOSGeometry&lt;/code&gt; &lt;/a&gt;オブジェクトは変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="4bccb0eee0e8600913c2c28639c66e179e6c916b" translate="yes" xml:space="preserve">
          <source>My logs are filled with GEOS-related errors</source>
          <target state="translated">私のログはGEOS関連のエラーで埋め尽くされています。</target>
        </trans-unit>
        <trans-unit id="deaa0c393a6613972aaccbf1fecfdad67aa21e88" translate="yes" xml:space="preserve">
          <source>MySQL</source>
          <target state="translated">MySQL</target>
        </trans-unit>
        <trans-unit id="2e0075770347408bd338637c0345bcd2dba7d8f7" translate="yes" xml:space="preserve">
          <source>MySQL 5.6.4 and later can store fractional seconds, provided that the column definition includes a fractional indication (e.g. &lt;code&gt;DATETIME(6)&lt;/code&gt;). Earlier versions do not support them at all.</source>
          <target state="translated">MySQL 5.6.4以降では、カラム定義に小数の指示（例： &lt;code&gt;DATETIME(6)&lt;/code&gt; ）が含まれている場合、秒の小数部を格納できます。以前のバージョンはそれらをまったくサポートしていません。</target>
        </trans-unit>
        <trans-unit id="86a5ac5197e92a3bf370a96a8eed2e3a94e4cb1f" translate="yes" xml:space="preserve">
          <source>MySQL &lt;a href=&quot;#id10&quot; id=&quot;id9&quot;&gt;[5]&lt;/a&gt;</source>
          <target state="translated">MySQL &lt;a href=&quot;#id10&quot; id=&quot;id9&quot;&gt;[5]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="986a60a235cf32f505dc63fb40ec496ad291c705" translate="yes" xml:space="preserve">
          <source>MySQL Connector/Python</source>
          <target state="translated">MySQL コネクタ/Python</target>
        </trans-unit>
        <trans-unit id="667f44d66957f73e91d3746ec1ac71180eba2323" translate="yes" xml:space="preserve">
          <source>MySQL Connector/Python is available from the &lt;a href=&quot;https://dev.mysql.com/downloads/connector/python/&quot;&gt;download page&lt;/a&gt;. The Django adapter is available in versions 1.1.X and later. It may not support the most recent releases of Django.</source>
          <target state="translated">MySQL Connector / Pythonは、&lt;a href=&quot;https://dev.mysql.com/downloads/connector/python/&quot;&gt;ダウンロードページ&lt;/a&gt;から入手できます。Djangoアダプターは、バージョン1.1.X以降で使用できます。Djangoの最新リリースをサポートしていない可能性があります。</target>
        </trans-unit>
        <trans-unit id="9bb341b82bf1c83dd03f7466f030dfb1c4ead4ae" translate="yes" xml:space="preserve">
          <source>MySQL DB API Drivers</source>
          <target state="translated">MySQL DB API ドライバ</target>
        </trans-unit>
        <trans-unit id="2a32013dda91967e55f3b5f97fbb0212e962e6ad" translate="yes" xml:space="preserve">
          <source>MySQL Spatial Limitations</source>
          <target state="translated">MySQL の空間的な制限</target>
        </trans-unit>
        <trans-unit id="983d4198c4fe496e039642a0b10a31ff61fb8930" translate="yes" xml:space="preserve">
          <source>MySQL and MariaDB</source>
          <target state="translated">MySQLとMariaDB</target>
        </trans-unit>
        <trans-unit id="1ae647f2055c46f7991330b9effd8766eca9dada" translate="yes" xml:space="preserve">
          <source>MySQL and MariaDB do not support some options to the &lt;code&gt;SELECT ... FOR UPDATE&lt;/code&gt; statement. If &lt;code&gt;select_for_update()&lt;/code&gt; is used with an unsupported option, then a &lt;a href=&quot;exceptions#django.db.NotSupportedError&quot;&gt;&lt;code&gt;NotSupportedError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="translated">MySQLおよびMariaDBは、 &lt;code&gt;SELECT ... FOR UPDATE&lt;/code&gt; ステートメントの一部のオプションをサポートしていません。場合 &lt;code&gt;select_for_update()&lt;/code&gt; がサポートされていないオプションと一緒に使用され、その後、&lt;a href=&quot;exceptions#django.db.NotSupportedError&quot;&gt; &lt;code&gt;NotSupportedError&lt;/code&gt; を&lt;/a&gt;上げています。</target>
        </trans-unit>
        <trans-unit id="6f05eb6ba63b7a6cd32e2832c1d889278aa95ffb" translate="yes" xml:space="preserve">
          <source>MySQL and SpatiaLite without LWGEOM don&amp;rsquo;t support area calculations on geographic SRSes.</source>
          <target state="translated">MySQLとLWGEOMのないSpatiaLiteは、地理的SRSでの面積計算をサポートしていません。</target>
        </trans-unit>
        <trans-unit id="e619fd44bc5f6e15a9f90141b521fe84e6c5c40b" translate="yes" xml:space="preserve">
          <source>MySQL can index only the first N chars of a &lt;code&gt;BLOB&lt;/code&gt; or &lt;code&gt;TEXT&lt;/code&gt; column. Since &lt;code&gt;TextField&lt;/code&gt; doesn&amp;rsquo;t have a defined length, you can&amp;rsquo;t mark it as &lt;code&gt;unique=True&lt;/code&gt;. MySQL will report: &amp;ldquo;BLOB/TEXT column &amp;lsquo;&amp;lt;db_column&amp;gt;&amp;rsquo; used in key specification without a key length&amp;rdquo;.</source>
          <target state="translated">MySQLは、 &lt;code&gt;BLOB&lt;/code&gt; または &lt;code&gt;TEXT&lt;/code&gt; カラムの最初のN文字のみをインデックス化できます。以来 &lt;code&gt;TextField&lt;/code&gt; 定義された長さを持っていない、あなたはとしてそれをマークすることはできません &lt;code&gt;unique=True&lt;/code&gt; 。MySQLは次のように報告します。「キー長のないキー仕様で使用されるBLOB / TEXT列 '&amp;lt;db_column&amp;gt;'」。</target>
        </trans-unit>
        <trans-unit id="e7f9037fbe1194d4e43f2ae2e2b77cd89ac807a6" translate="yes" xml:space="preserve">
          <source>MySQL comparisons</source>
          <target state="translated">MySQLの比較</target>
        </trans-unit>
        <trans-unit id="1b2f25b29e36685e347b0022acef2066f4e227da" translate="yes" xml:space="preserve">
          <source>MySQL doesn&amp;rsquo;t support length calculations on geographic SRSes.</source>
          <target state="translated">MySQLは、地理的SRSでの長さの計算をサポートしていません。</target>
        </trans-unit>
        <trans-unit id="bb747cd75bad69ca691abcfc9dda3c14f82ee26e" translate="yes" xml:space="preserve">
          <source>MySQL doesn&amp;rsquo;t support streaming results, hence the Python database driver loads the entire result set into memory. The result set is then transformed into Python row objects by the database adapter using the &lt;code&gt;fetchmany()&lt;/code&gt; method defined in &lt;a href=&quot;https://www.python.org/dev/peps/pep-0249&quot; id=&quot;index-2&quot;&gt;&lt;strong&gt;PEP 249&lt;/strong&gt;&lt;/a&gt;.</source>
          <target state="translated">MySQLは結果のストリーミングをサポートしていないため、Pythonデータベースドライバーは結果セット全体をメモリにロードします。次に、結果セットは、&lt;a href=&quot;https://www.python.org/dev/peps/pep-0249&quot; id=&quot;index-2&quot;&gt;&lt;strong&gt;PEP 249で&lt;/strong&gt;&lt;/a&gt;定義されている &lt;code&gt;fetchmany()&lt;/code&gt; メソッドを使用して、データベースアダプターによってPython行オブジェクトに変換されます。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9699bc8cbc6d21071c531e97cae0a82b4d28855a" translate="yes" xml:space="preserve">
          <source>MySQL has a couple drivers that implement the Python Database API described in &lt;a href=&quot;https://www.python.org/dev/peps/pep-0249&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;PEP 249&lt;/strong&gt;&lt;/a&gt;:</source>
          <target state="translated">MySQLには、&lt;a href=&quot;https://www.python.org/dev/peps/pep-0249&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;PEP 249で&lt;/strong&gt;&lt;/a&gt;説明されているPythonデータベースAPIを実装するいくつかのドライバーがあります。</target>
        </trans-unit>
        <trans-unit id="dd36a013a62a179e364138cb150dda709e3289ba" translate="yes" xml:space="preserve">
          <source>MySQL has several &lt;a href=&quot;https://dev.mysql.com/doc/refman/en/storage-engines.html&quot;&gt;storage engines&lt;/a&gt;. You can change the default storage engine in the server configuration.</source>
          <target state="translated">MySQLにはいくつかの&lt;a href=&quot;https://dev.mysql.com/doc/refman/en/storage-engines.html&quot;&gt;ストレージエンジンがあり&lt;/a&gt;ます。サーバー構成でデフォルトのストレージエンジンを変更できます。</target>
        </trans-unit>
        <trans-unit id="13c24d5b3db43171b5ef4d816ab11e8214bf90ac" translate="yes" xml:space="preserve">
          <source>MySQL lacks support for transactions around schema alteration operations, meaning that if a migration fails to apply you will have to manually unpick the changes in order to try again (it&amp;rsquo;s impossible to roll back to an earlier point).</source>
          <target state="translated">MySQLはスキーマ変更操作に関するトランザクションをサポートしていません。つまり、移行の適用に失敗した場合、変更を手動で解除して再試行する必要があります（以前のポイントにロールバックすることは不可能です）。</target>
        </trans-unit>
        <trans-unit id="da7ec2dd90480fe6867f579ccf7b82e69036fc20" translate="yes" xml:space="preserve">
          <source>MySQL notes</source>
          <target state="translated">MySQLノート</target>
        </trans-unit>
        <trans-unit id="c97f25b2cd670ac90747ff6c4670fa29f1bdcc07" translate="yes" xml:space="preserve">
          <source>MySQL option files.</source>
          <target state="translated">MySQLのオプションファイル。</target>
        </trans-unit>
        <trans-unit id="a18101faca156f271f971ff4f81a92f324b38b2f" translate="yes" xml:space="preserve">
          <source>MySQL support was added.</source>
          <target state="translated">MySQLのサポートを追加しました。</target>
        </trans-unit>
        <trans-unit id="0aca998cada4db772b8e544e84480f89cb51ce1e" translate="yes" xml:space="preserve">
          <source>MySQL users, refer to the &lt;a href=&quot;https://dev.mysql.com/doc/refman/en/charset-database.html&quot;&gt;MySQL manual&lt;/a&gt; for details on how to set or alter the database character set encoding.</source>
          <target state="translated">MySQLユーザーの場合、データベースの文字セットエンコーディングを設定または変更する方法の詳細については、&lt;a href=&quot;https://dev.mysql.com/doc/refman/en/charset-database.html&quot;&gt;MySQLのマニュアル&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="901623a9cc98c4d53a4f346dc9d64f6ee667fc21" translate="yes" xml:space="preserve">
          <source>MySQL with MyISAM and fixtures</source>
          <target state="translated">MySQLとMyISAMとフィクスチャ</target>
        </trans-unit>
        <trans-unit id="c8423889e44ab6d190ce5b97f8e3f5999ada3a9e" translate="yes" xml:space="preserve">
          <source>MySQL&amp;rsquo;s default storage engine is &lt;a href=&quot;https://dev.mysql.com/doc/refman/en/innodb-storage-engine.html&quot;&gt;InnoDB&lt;/a&gt;. This engine is fully transactional and supports foreign key references. It&amp;rsquo;s the recommended choice. However, the InnoDB autoincrement counter is lost on a MySQL restart because it does not remember the &lt;code&gt;AUTO_INCREMENT&lt;/code&gt; value, instead recreating it as &amp;ldquo;max(id)+1&amp;rdquo;. This may result in an inadvertent reuse of &lt;a href=&quot;models/fields#django.db.models.AutoField&quot;&gt;&lt;code&gt;AutoField&lt;/code&gt;&lt;/a&gt; values.</source>
          <target state="translated">MySQLのデフォルトのストレージエンジンは&lt;a href=&quot;https://dev.mysql.com/doc/refman/en/innodb-storage-engine.html&quot;&gt;InnoDB&lt;/a&gt;です。このエンジンは完全にトランザクション対応であり、外部キー参照をサポートしています。これが推奨される選択です。ただし、Mynoreの再起動時にInnoDB &lt;code&gt;AUTO_INCREMENT&lt;/code&gt; インクリメントカウンターは失われます。これは、AUTO_INCREMENT値を覚えておらず、代わりに「max（id）+1」として再作成するためです。これにより、&lt;a href=&quot;models/fields#django.db.models.AutoField&quot;&gt; &lt;code&gt;AutoField&lt;/code&gt; &lt;/a&gt;値が誤って再利用される可能性があります。</target>
        </trans-unit>
        <trans-unit id="822c500ebb7d59b30db3811ebed6b92e7060041a" translate="yes" xml:space="preserve">
          <source>MySQL, MariaDB, and SQLite.</source>
          <target state="translated">MySQL、MariaDB、SQLite。</target>
        </trans-unit>
        <trans-unit id="da894fa611c76d98f190b501119ec407ebf26fcc" translate="yes" xml:space="preserve">
          <source>MySQL, PostGIS, SpatiaLite</source>
          <target state="translated">MySQL、PostGIS、SpatiaLite</target>
        </trans-unit>
        <trans-unit id="e6d7af34f14cc7cd71ad2da3150f20559678178f" translate="yes" xml:space="preserve">
          <source>MySQL: &lt;code&gt;max_allowed_packet&lt;/code&gt; error</source>
          <target state="translated">MySQL： &lt;code&gt;max_allowed_packet&lt;/code&gt; エラー</target>
        </trans-unit>
        <trans-unit id="aa93eb462b33d3480c38c1390b6b9dda484bd422" translate="yes" xml:space="preserve">
          <source>MySQL: load the time zone tables with &lt;a href=&quot;https://dev.mysql.com/doc/refman/en/mysql-tzinfo-to-sql.html&quot;&gt;mysql_tzinfo_to_sql&lt;/a&gt;.</source>
          <target state="translated">MySQL：&lt;a href=&quot;https://dev.mysql.com/doc/refman/en/mysql-tzinfo-to-sql.html&quot;&gt;mysql_tzinfo_to_sqlを&lt;/a&gt;使用してタイムゾーンテーブルをロードします。</target>
        </trans-unit>
        <trans-unit id="b51a60734da64be0e618bacbea2865a8a7dcd669" translate="yes" xml:space="preserve">
          <source>N</source>
          <target state="translated">N</target>
        </trans-unit>
        <trans-unit id="87bfcc6203402acde4aabbaf0352d970adff0de9" translate="yes" xml:space="preserve">
          <source>N, B</source>
          <target state="translated">N,B</target>
        </trans-unit>
        <trans-unit id="42279a6f78cd081c721ab2a673715d6e0141307a" translate="yes" xml:space="preserve">
          <source>NULL and empty strings</source>
          <target state="translated">NULLと空の文字列</target>
        </trans-unit>
        <trans-unit id="3ec5dc9e67bb01760f1a1602b80350c782cc4a3d" translate="yes" xml:space="preserve">
          <source>Naive and aware datetime objects</source>
          <target state="translated">ナイーブで認識された日付時間オブジェクト</target>
        </trans-unit>
        <trans-unit id="991cb900a910173a0198132c33364a293aa20dc5" translate="yes" xml:space="preserve">
          <source>Name of a model field which will be auto-populated with the height of the image each time the model instance is saved.</source>
          <target state="translated">モデルのインスタンスが保存されるたびに、画像の高さが自動挿入されるモデルフィールドの名前。</target>
        </trans-unit>
        <trans-unit id="77b12c2e53e54a360eee73a9a579997d2f334a46" translate="yes" xml:space="preserve">
          <source>Name of a model field which will be auto-populated with the width of the image each time the model instance is saved.</source>
          <target state="translated">モデルのインスタンスが保存されるたびに画像の幅で自動挿入されるモデルフィールドの名前。</target>
        </trans-unit>
        <trans-unit id="e796ff17766e96ff2c6860b2879523670c9a432e" translate="yes" xml:space="preserve">
          <source>Name of a supported database vendor that this model is specific to. Current built-in vendor names are: &lt;code&gt;sqlite&lt;/code&gt;, &lt;code&gt;postgresql&lt;/code&gt;, &lt;code&gt;mysql&lt;/code&gt;, &lt;code&gt;oracle&lt;/code&gt;. If this attribute is not empty and the current connection vendor doesn&amp;rsquo;t match it, the model will not be synchronized.</source>
          <target state="translated">このモデルに固有のサポートされているデータベースベンダーの名前。現在の組み込みベンダー名は、 &lt;code&gt;sqlite&lt;/code&gt; 、 &lt;code&gt;postgresql&lt;/code&gt; 、 &lt;code&gt;mysql&lt;/code&gt; 、 &lt;code&gt;oracle&lt;/code&gt; です。この属性が空でなく、現在の接続ベンダーがそれと一致しない場合、モデルは同期されません。</target>
        </trans-unit>
        <trans-unit id="21e40c06422396c66fc6f011529e9fbb22670cb1" translate="yes" xml:space="preserve">
          <source>Named arguments can be passed by using either one of the following syntaxes:</source>
          <target state="translated">名前付き引数は、以下のいずれかの構文を使用して渡すことができます。</target>
        </trans-unit>
        <trans-unit id="456472e152b75181780a0aa5cf5f649563895b18" translate="yes" xml:space="preserve">
          <source>Named interpolation: This mode is selected by passing the optional boolean &lt;code&gt;named&lt;/code&gt; parameter as &lt;code&gt;true&lt;/code&gt;. &lt;code&gt;obj&lt;/code&gt; contains a JavaScript object or associative array. For example:</source>
          <target state="translated">名前付き補間：このモードは、オプションのブール &lt;code&gt;named&lt;/code&gt; パラメーターを &lt;code&gt;true&lt;/code&gt; として渡すことによって選択されます。 &lt;code&gt;obj&lt;/code&gt; にはJavaScriptオブジェクトまたは連想配列が含まれています。例えば：</target>
        </trans-unit>
        <trans-unit id="cddd6003787cffa647cd2f5ab65bee28c43a64f5" translate="yes" xml:space="preserve">
          <source>Namespace packages as apps</source>
          <target state="translated">アプリとしての名前空間パッケージ</target>
        </trans-unit>
        <trans-unit id="b401e0e546ac63496e6d96c97a9fc5aeb9b68b6f" translate="yes" xml:space="preserve">
          <source>Namespaced URLs are specified using the &lt;code&gt;':'&lt;/code&gt; operator. For example, the main index page of the admin application is referenced using &lt;code&gt;'admin:index'&lt;/code&gt;. This indicates a namespace of &lt;code&gt;'admin'&lt;/code&gt;, and a named URL of &lt;code&gt;'index'&lt;/code&gt;.</source>
          <target state="translated">名前空間付きURLは、 &lt;code&gt;':'&lt;/code&gt; 演算子を使用して指定されます。たとえば、管理アプリケーションのメインインデックスページは、 &lt;code&gt;'admin:index'&lt;/code&gt; を使用して参照されます。これは、名前空間が &lt;code&gt;'admin'&lt;/code&gt; で、名前付きURLが &lt;code&gt;'index'&lt;/code&gt; であることを示しています。</target>
        </trans-unit>
        <trans-unit id="49121460562c588ebec421e328fc0f9d720e75bf" translate="yes" xml:space="preserve">
          <source>Namespaces can also be nested. The named URL &lt;code&gt;'sports:polls:index'&lt;/code&gt; would look for a pattern named &lt;code&gt;'index'&lt;/code&gt; in the namespace &lt;code&gt;'polls'&lt;/code&gt; that is itself defined within the top-level namespace &lt;code&gt;'sports'&lt;/code&gt;.</source>
          <target state="translated">名前空間はネストすることもできます。名前付きURL &lt;code&gt;'sports:polls:index'&lt;/code&gt; は、名前空間 &lt;code&gt;'polls'&lt;/code&gt; 内で &lt;code&gt;'index'&lt;/code&gt; という名前のパターンを探します。このパターン自体は、最上位の名前空間 &lt;code&gt;'sports'&lt;/code&gt; 内で定義されています。</target>
        </trans-unit>
        <trans-unit id="7214a30965a0f1415063399b413c8991e0fe715d" translate="yes" xml:space="preserve">
          <source>Namespacing URL names</source>
          <target state="translated">URL名の名前のスペーシング</target>
        </trans-unit>
        <trans-unit id="245bfd6a442d9a4f4c7f5466cc42e94f2e24f6ba" translate="yes" xml:space="preserve">
          <source>Naming URL patterns</source>
          <target state="translated">ネーミングURLのパターン</target>
        </trans-unit>
        <trans-unit id="3801dd9c44d08b327a9ff306cbbe6bed16008529" translate="yes" xml:space="preserve">
          <source>Naming issues</source>
          <target state="translated">ネーミングの問題</target>
        </trans-unit>
        <trans-unit id="7e587f8f91b92c319567d66e4457de8a3eb6d592" translate="yes" xml:space="preserve">
          <source>Naming loggers</source>
          <target state="translated">ネーミングロガー</target>
        </trans-unit>
        <trans-unit id="6e94241c26e8d79594ba2990ac79ac771826be76" translate="yes" xml:space="preserve">
          <source>Naming your URL lets you refer to it unambiguously from elsewhere in Django, especially from within templates. This powerful feature allows you to make global changes to the URL patterns of your project while only touching a single file.</source>
          <target state="translated">URL に名前を付けることで、Django の他の場所、特にテンプレート内の URL を明確に参照することができます。この強力な機能により、単一のファイルに触れるだけで、プロジェクトの URL パターンをグローバルに変更することができます。</target>
        </trans-unit>
        <trans-unit id="b0e5d9ee1e706056e66182c63e2373c6ad455b80" translate="yes" xml:space="preserve">
          <source>Native raster support &lt;code&gt;N&lt;/code&gt;: the operator accepts rasters natively on both sides of the lookup, and raster input can be mixed with geometry inputs.</source>
          <target state="translated">ネイティブラスターサポート &lt;code&gt;N&lt;/code&gt; ：演算子は、ルックアップの両側でネイティブにラスターを受け入れます。ラスター入力は、ジオメトリ入力と混合できます。</target>
        </trans-unit>
        <trans-unit id="71cb039d6cfd99775661211c11211853f3118ab8" translate="yes" xml:space="preserve">
          <source>Natural keys</source>
          <target state="translated">ナチュラルキー</target>
        </trans-unit>
        <trans-unit id="15de939347cd0f43fbb2c840def2f0483ccf19fc" translate="yes" xml:space="preserve">
          <source>Natural keys and forward references</source>
          <target state="translated">ナチュラルキーとフォワードリファレンス</target>
        </trans-unit>
        <trans-unit id="f2670621a6a242a585790697568a8a79acebea97" translate="yes" xml:space="preserve">
          <source>Naturally, the &lt;code&gt;forms&lt;/code&gt; library comes with a set of &lt;code&gt;Field&lt;/code&gt; classes that represent common validation needs. This section documents each built-in field.</source>
          <target state="translated">当然、 &lt;code&gt;forms&lt;/code&gt; ライブラリには、一般的な検証のニーズを表す一連の &lt;code&gt;Field&lt;/code&gt; クラスが付属しています。このセクションでは、各組み込みフィールドについて説明します。</target>
        </trans-unit>
        <trans-unit id="a0fd1dadeac26fc980d64d53a1d51dc00d872199" translate="yes" xml:space="preserve">
          <source>Nautical Mile</source>
          <target state="translated">ノーチカルマイル</target>
        </trans-unit>
        <trans-unit id="c1bf29ee2167be4389b40be2ec27bb9ac6854cf5" translate="yes" xml:space="preserve">
          <source>Nautical Mile (UK)</source>
          <target state="translated">ノーチカルマイル</target>
        </trans-unit>
        <trans-unit id="5e303aed43f7eea12893a04c1344d77f1422d360" translate="yes" xml:space="preserve">
          <source>Navigate to Django&amp;rsquo;s &lt;code&gt;tests/shortcuts/&lt;/code&gt; folder and create a new file &lt;code&gt;test_make_toast.py&lt;/code&gt;. Add the following code:</source>
          <target state="translated">Djangoの &lt;code&gt;tests/shortcuts/&lt;/code&gt; フォルダーに移動し、新しいファイル &lt;code&gt;test_make_toast.py&lt;/code&gt; を作成します。次のコードを追加します。</target>
        </trans-unit>
        <trans-unit id="391931ae9af417747703c930330f904886c481c0" translate="yes" xml:space="preserve">
          <source>Navigate to the &lt;code&gt;django/&lt;/code&gt; folder and open the &lt;code&gt;shortcuts.py&lt;/code&gt; file. At the bottom, add:</source>
          <target state="translated">移動 &lt;code&gt;django/&lt;/code&gt; フォルダが開き &lt;code&gt;shortcuts.py&lt;/code&gt; ファイルを。下部に以下を追加します。</target>
        </trans-unit>
        <trans-unit id="6ff1387ed6d44dceb1969e9b463d291bf6feec8d" translate="yes" xml:space="preserve">
          <source>Needing the result in every template.</source>
          <target state="translated">テンプレートごとに結果が必要</target>
        </trans-unit>
        <trans-unit id="854d8a7501a391087e8af696c7e80444951d2100" translate="yes" xml:space="preserve">
          <source>Negated object identity. Tests if two values are not the same object. This is the negation of the &lt;code&gt;is&lt;/code&gt; operator. Example:</source>
          <target state="translated">否定されたオブジェクトID。2つの値が同じオブジェクトでないかどうかをテストします。これは &lt;code&gt;is&lt;/code&gt; 演算子の否定です。例：</target>
        </trans-unit>
        <trans-unit id="74cddaa347454041893fdb47ba6c8cf1d732490d" translate="yes" xml:space="preserve">
          <source>Negative indexing (i.e. &lt;code&gt;Entry.objects.all()[-1]&lt;/code&gt;) is not supported.</source>
          <target state="translated">負のインデックス（つまり、 &lt;code&gt;Entry.objects.all()[-1]&lt;/code&gt; ）はサポートされていません。</target>
        </trans-unit>
        <trans-unit id="16b2420a502b3deb13acfb660bcc642e826d0622" translate="yes" xml:space="preserve">
          <source>Nested arguments</source>
          <target state="translated">入れ子になった引数</target>
        </trans-unit>
        <trans-unit id="a51d1007934ad9baaf9054dadf4bd0eaf7048e4f" translate="yes" xml:space="preserve">
          <source>Nested captured arguments create a strong coupling between the view arguments and the URL as illustrated by &lt;code&gt;blog_articles&lt;/code&gt;: the view receives part of the URL (&lt;code&gt;page-2/&lt;/code&gt;) instead of only the value the view is interested in. This coupling is even more pronounced when reversing, since to reverse the view we need to pass the piece of URL instead of the page number.</source>
          <target state="translated">示されるようにネストされた捕捉された引数は、ビューの引数とURLとの間の強い結合を作成 &lt;code&gt;blog_articles&lt;/code&gt; ：ビューは、（URLの一部を受信し &lt;code&gt;page-2/&lt;/code&gt; ）の代わりにビューが興味を持っている唯一の値のこの結合がさらにとき顕著です。ビューを反転するには、ページ番号の代わりにURLの一部を渡す必要があるため、反転します。</target>
        </trans-unit>
        <trans-unit id="65046fcf73f5e6ac3773f70ea1badbd965d975c0" translate="yes" xml:space="preserve">
          <source>Nested classes</source>
          <target state="translated">入れ子になったクラス</target>
        </trans-unit>
        <trans-unit id="ffea8bcefbb1127b7c2b6d104e473978a7a5dfd5" translate="yes" xml:space="preserve">
          <source>Never deploy a site into production with &lt;a href=&quot;#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/a&gt; turned on.</source>
          <target state="translated">&lt;a href=&quot;#std:setting-DEBUG&quot;&gt; &lt;code&gt;DEBUG&lt;/code&gt; を&lt;/a&gt;オンにしてサイトを運用環境に展開しないでください。</target>
        </trans-unit>
        <trans-unit id="4e08b5505096fc8f458225bbe21af122777de6ec" translate="yes" xml:space="preserve">
          <source>New York: 20,000,000</source>
          <target state="translated">ニューヨーク:2000000000000000000000000000000000000000000000000000</target>
        </trans-unit>
        <trans-unit id="bc6939c687d34dccd6c0632aa8427056bf9dd500" translate="yes" xml:space="preserve">
          <source>New applications should avoid &lt;code&gt;default_app_config&lt;/code&gt;. Instead they should require the dotted path to the appropriate &lt;a href=&quot;#django.apps.AppConfig&quot;&gt;&lt;code&gt;AppConfig&lt;/code&gt;&lt;/a&gt; subclass to be configured explicitly in &lt;a href=&quot;settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">新しいアプリケーションは &lt;code&gt;default_app_config&lt;/code&gt; を避けるべきです。代わりに、適切な&lt;a href=&quot;#django.apps.AppConfig&quot;&gt; &lt;code&gt;AppConfig&lt;/code&gt; &lt;/a&gt;サブクラスへのドットパスを&lt;a href=&quot;settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; で&lt;/a&gt;明示的に構成する必要があります。</target>
        </trans-unit>
        <trans-unit id="bb77323982627c875ecedea26b1cf8c9800f344b" translate="yes" xml:space="preserve">
          <source>New apps come preconfigured to accept migrations, and so you can add migrations by running &lt;a href=&quot;../ref/django-admin#django-admin-makemigrations&quot;&gt;&lt;code&gt;makemigrations&lt;/code&gt;&lt;/a&gt; once you&amp;rsquo;ve made some changes.</source>
          <target state="translated">新しいアプリは移行を受け入れるように事前構成されているため、変更を加えたら&lt;a href=&quot;../ref/django-admin#django-admin-makemigrations&quot;&gt; &lt;code&gt;makemigrations&lt;/code&gt; &lt;/a&gt;を実行して移行を追加できます。</target>
        </trans-unit>
        <trans-unit id="397e08be4588b3e13fecbfaca297d85d558665ee" translate="yes" xml:space="preserve">
          <source>New features and improvements are added.</source>
          <target state="translated">新機能や改善点が追加されています。</target>
        </trans-unit>
        <trans-unit id="cdb2b3eaffe8e9fe13d1e76ec6f821570338db67" translate="yes" xml:space="preserve">
          <source>New in Django 2.2.</source>
          <target state="translated">Django 2.2 の新機能。</target>
        </trans-unit>
        <trans-unit id="a8859c9f8e0e148cbb9c7e291b070736ec990c4d" translate="yes" xml:space="preserve">
          <source>New in Django 2.2:</source>
          <target state="translated">Django 2.2 の新機能。</target>
        </trans-unit>
        <trans-unit id="7d4766fe3d85797ad596d99b8671ea4eafbe878d" translate="yes" xml:space="preserve">
          <source>New in Django 3.0.</source>
          <target state="translated">Django 3.0 の新機能。</target>
        </trans-unit>
        <trans-unit id="7802f5226ecb3555d94a9cf2a3159c22a8454a02" translate="yes" xml:space="preserve">
          <source>New in Django 3.0:</source>
          <target state="translated">Django 3.0 の新機能。</target>
        </trans-unit>
        <trans-unit id="0c2953d63622f6f02b8976691c2a6a9e13454aad" translate="yes" xml:space="preserve">
          <source>New in Django 3.1.</source>
          <target state="translated">Django 3.1 の新機能。</target>
        </trans-unit>
        <trans-unit id="53c5fd58379d0dc6dfd1944e576aa7ae4b49831e" translate="yes" xml:space="preserve">
          <source>New in Django 3.1:</source>
          <target state="translated">Django 3.1 の新機能。</target>
        </trans-unit>
        <trans-unit id="3bdd2af04da21e645534a0164ec69a9d2e7eea84" translate="yes" xml:space="preserve">
          <source>New to Django? Or to Web development in general? Well, you came to the right place: read this material to quickly get up and running.</source>
          <target state="translated">Django は初めてですか?それともウェブ開発全般ですか?この資料を読めば、すぐに立ち上がることができます。</target>
        </trans-unit>
        <trans-unit id="42c8c31ac17b91db81378ce6cded2f0b14aad34c" translate="yes" xml:space="preserve">
          <source>Newer is often - but not always - better</source>
          <target state="translated">新しければ新しいほど良いとは限らない</target>
        </trans-unit>
        <trans-unit id="90839b06d66480978bb51446f706afdc2004ad1e" translate="yes" xml:space="preserve">
          <source>Newer versions of Python, and also of Python packages, will often perform better too - but measure, rather than assume.</source>
          <target state="translated">Python の新しいバージョンや、Python のパッケージも、しばしばより良いパフォーマンスを発揮します。</target>
        </trans-unit>
        <trans-unit id="0f758a36445ca7a95d9a1d5274601a1eef8619f7" translate="yes" xml:space="preserve">
          <source>Newlines in the HTML content will be preserved.</source>
          <target state="translated">HTMLコンテンツ内の改行は保存されます。</target>
        </trans-unit>
        <trans-unit id="60c9dfae09ab7d11db1bd2a8800128d7b6ebdec0" translate="yes" xml:space="preserve">
          <source>Newlines within the string will be removed.</source>
          <target state="translated">文字列内の改行は削除されます。</target>
        </trans-unit>
        <trans-unit id="aca8d1cbfaf7c04f3f791c3ad1ffe332fa7cfcc1" translate="yes" xml:space="preserve">
          <source>Newly instantiated instances have &lt;code&gt;adding=True&lt;/code&gt; and &lt;code&gt;db=None&lt;/code&gt;, since they are yet to be saved. Instances fetched from a &lt;code&gt;QuerySet&lt;/code&gt; will have &lt;code&gt;adding=False&lt;/code&gt; and &lt;code&gt;db&lt;/code&gt; set to the alias of the associated database.</source>
          <target state="translated">Newly instantiated instances have &lt;code&gt;adding=True&lt;/code&gt; and &lt;code&gt;db=None&lt;/code&gt; , since they are yet to be saved. Instances fetched from a &lt;code&gt;QuerySet&lt;/code&gt; will have &lt;code&gt;adding=False&lt;/code&gt; and &lt;code&gt;db&lt;/code&gt; set to the alias of the associated database.</target>
        </trans-unit>
        <trans-unit id="11fc14203dd0f4441645a9c34d5dd022905f56e4" translate="yes" xml:space="preserve">
          <source>Next steps</source>
          <target state="translated">次のステップ</target>
        </trans-unit>
        <trans-unit id="ac65e32833ef6dab9578aad7abb6397e0ec34f48" translate="yes" xml:space="preserve">
          <source>Next we can add more fine-grained logging. Here&amp;rsquo;s an example of how to make the logging system print more messages from just the &lt;a href=&quot;#django-logger&quot;&gt;django&lt;/a&gt; named logger:</source>
          <target state="translated">Next we can add more fine-grained logging. Here&amp;rsquo;s an example of how to make the logging system print more messages from just the &lt;a href=&quot;#django-logger&quot;&gt;django&lt;/a&gt; named logger:</target>
        </trans-unit>
        <trans-unit id="6d1add59418ea384f8c14da01d32dd82a0c03a15" translate="yes" xml:space="preserve">
          <source>Next we need to import the test client class (later in &lt;code&gt;tests.py&lt;/code&gt; we will use the &lt;a href=&quot;../topics/testing/tools#django.test.TestCase&quot;&gt;&lt;code&gt;django.test.TestCase&lt;/code&gt;&lt;/a&gt; class, which comes with its own client, so this won&amp;rsquo;t be required):</source>
          <target state="translated">次に、テストクライアントクラスをインポートする必要があります（ &lt;code&gt;tests.py&lt;/code&gt; では後で、独自のクライアントに付属している&lt;a href=&quot;../topics/testing/tools#django.test.TestCase&quot;&gt; &lt;code&gt;django.test.TestCase&lt;/code&gt; &lt;/a&gt;クラスを使用するため、これは必要ありません）。</target>
        </trans-unit>
        <trans-unit id="b111a7c819e1512c7c04b41004b2e237b4657367" translate="yes" xml:space="preserve">
          <source>Next we&amp;rsquo;ll be adding the &lt;code&gt;make_toast()&lt;/code&gt; function.</source>
          <target state="translated">次に、 &lt;code&gt;make_toast()&lt;/code&gt; 関数を追加します。</target>
        </trans-unit>
        <trans-unit id="76a45c894c9d7c9724383aea29e1d93ed7e569dd" translate="yes" xml:space="preserve">
          <source>Next we&amp;rsquo;ll create &lt;code&gt;setup.cfg&lt;/code&gt; and &lt;code&gt;setup.py&lt;/code&gt; files which detail how to build and install the app. A full explanation of these files is beyond the scope of this tutorial, but the &lt;a href=&quot;https://setuptools.readthedocs.io/en/latest/&quot;&gt;setuptools documentation&lt;/a&gt; has a good explanation. Create the files &lt;code&gt;django-polls/setup.cfg&lt;/code&gt; and &lt;code&gt;django-polls/setup.py&lt;/code&gt; with the following contents:</source>
          <target state="translated">次に、アプリのビルド方法とインストール方法の詳細を示す &lt;code&gt;setup.cfg&lt;/code&gt; ファイルと &lt;code&gt;setup.py&lt;/code&gt; ファイルを作成します。これらのファイルの完全な説明は、このチュートリアルの範囲を超えていますが、&lt;a href=&quot;https://setuptools.readthedocs.io/en/latest/&quot;&gt;setuptoolsのドキュメント&lt;/a&gt;に説明があります。次の内容で &lt;code&gt;django-polls/setup.cfg&lt;/code&gt; および &lt;code&gt;django-polls/setup.py&lt;/code&gt; ファイルを作成します。</target>
        </trans-unit>
        <trans-unit id="2428b562258cc645b8a378441e5a8efef21e5410" translate="yes" xml:space="preserve">
          <source>Next we&amp;rsquo;ll need to ensure this &lt;code&gt;wsgi.py&lt;/code&gt; with a WSGI application object exists. As of Django version 1.4, &lt;a href=&quot;../../../ref/django-admin#django-admin-startproject&quot;&gt;&lt;code&gt;startproject&lt;/code&gt;&lt;/a&gt; will have created one for you; otherwise, you&amp;rsquo;ll need to create it. See the &lt;a href=&quot;index&quot;&gt;WSGI overview documentation&lt;/a&gt; for the default contents you should put in this file, and what else you can add to it.</source>
          <target state="translated">次に、WSGIアプリケーションオブジェクトを含むこの &lt;code&gt;wsgi.py&lt;/code&gt; が存在することを確認する必要があります。Djangoバージョン1.4以降、&lt;a href=&quot;../../../ref/django-admin#django-admin-startproject&quot;&gt; &lt;code&gt;startproject&lt;/code&gt; &lt;/a&gt;によって作成されます。それ以外の場合は、作成する必要があります。このファイルに入れる必要があるデフォルトの内容と、他に何を追加できるかについては、&lt;a href=&quot;index&quot;&gt;WSGIの概要ドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="4458b46e2456208cc57f0c3fe8234e81455698af" translate="yes" xml:space="preserve">
          <source>Next, add the following at the top of &lt;code&gt;polls/templates/polls/index.html&lt;/code&gt;:</source>
          <target state="translated">次に、 &lt;code&gt;polls/templates/polls/index.html&lt;/code&gt; の上部に以下を追加します。</target>
        </trans-unit>
        <trans-unit id="c7e08d179fd99e5127a4244c23ceecf4befacdb5" translate="yes" xml:space="preserve">
          <source>Next, change into the directory where GEOS was unpacked, run the configure script, compile, and install:</source>
          <target state="translated">次に、GEOSが解凍されたディレクトリに変更し、configureスクリプトを実行し、コンパイルし、インストールします。</target>
        </trans-unit>
        <trans-unit id="97c565000f4ddc46a4029869cb4fde12f8283aea" translate="yes" xml:space="preserve">
          <source>Next, create the template used to render the tag&amp;rsquo;s output. This template is a fixed feature of the tag: the tag writer specifies it, not the template designer. Following our example, the template is very short:</source>
          <target state="translated">次に、タグの出力をレンダリングするために使用されるテンプレートを作成します。このテンプレートは、タグの固定機能です。タグライターは、テンプレートデザイナーではなく、それを指定します。私たちの例に続いて、テンプレートは非常に短いです：</target>
        </trans-unit>
        <trans-unit id="b06e64f44c84b4c936c45d05747ad2632f4f84e0" translate="yes" xml:space="preserve">
          <source>Next, edit your &lt;code&gt;urls.py&lt;/code&gt; in the &lt;code&gt;geodjango&lt;/code&gt; application folder as follows:</source>
          <target state="translated">次に、 &lt;code&gt;urls.py&lt;/code&gt; に &lt;code&gt;geodjango&lt;/code&gt; アプリケーションフォルダーのurls.pyを編集します。</target>
        </trans-unit>
        <trans-unit id="977397e98ad4a4b3fb6d6c58fd844d5bc9efb0cf" translate="yes" xml:space="preserve">
          <source>Next, edit your Apache configuration to add a location that you want only authenticated users to be able to view:</source>
          <target state="translated">次に、認証されたユーザだけが閲覧できるようにしたい場所を追加するために Apache の設定を編集します。</target>
        </trans-unit>
        <trans-unit id="c378e99152f7b9fca914a5bcc9c3e1b7f8efc41d" translate="yes" xml:space="preserve">
          <source>Next, import the &lt;code&gt;load&lt;/code&gt; module, call the &lt;code&gt;run&lt;/code&gt; routine, and watch &lt;code&gt;LayerMapping&lt;/code&gt; do the work:</source>
          <target state="translated">次に、 &lt;code&gt;load&lt;/code&gt; モジュールをインポートし、 &lt;code&gt;run&lt;/code&gt; ルーチンを呼び出し、 &lt;code&gt;LayerMapping&lt;/code&gt; が機能することを確認します。</target>
        </trans-unit>
        <trans-unit id="0ebf4ba3fa141f4156fed974267f5f3468106b7b" translate="yes" xml:space="preserve">
          <source>Next, let&amp;rsquo;s register it for &lt;code&gt;IntegerField&lt;/code&gt;:</source>
          <target state="translated">次に、 &lt;code&gt;IntegerField&lt;/code&gt; に登録します。</target>
        </trans-unit>
        <trans-unit id="70a1521747b230808ef34f3a484673e2d3e2c778" translate="yes" xml:space="preserve">
          <source>Next, let&amp;rsquo;s register it:</source>
          <target state="translated">次に、それを登録しましょう：</target>
        </trans-unit>
        <trans-unit id="654260d8e6502409d1293980e5369dedc75a1e08" translate="yes" xml:space="preserve">
          <source>Next, run the &lt;a href=&quot;../ref/django-admin#django-admin-migrate&quot;&gt;&lt;code&gt;migrate&lt;/code&gt;&lt;/a&gt; command to install any extra needed database records such as admin permissions and content types:</source>
          <target state="translated">次に、&lt;a href=&quot;../ref/django-admin#django-admin-migrate&quot;&gt; &lt;code&gt;migrate&lt;/code&gt; &lt;/a&gt;コマンドを実行して、管理者権限やコンテンツタイプなどの追加の必要なデータベースレコードをインストールします。</target>
        </trans-unit>
        <trans-unit id="7bd185e2faa9b778aa47cb7ad13b219b635277a4" translate="yes" xml:space="preserve">
          <source>Next, run the &lt;code&gt;configure&lt;/code&gt; script &amp;ndash; however the &lt;code&gt;CFLAGS&lt;/code&gt; environment variable needs to be customized so that SQLite knows to build the R*Tree module:</source>
          <target state="translated">次に、 &lt;code&gt;configure&lt;/code&gt; スクリプトを実行します。ただし、SQLiteがR * Treeモジュールを構築できるように、 &lt;code&gt;CFLAGS&lt;/code&gt; 環境変数をカスタマイズする必要があります。</target>
        </trans-unit>
        <trans-unit id="6725dcdbf417b3ebc4306851939ccba5bb592dda" translate="yes" xml:space="preserve">
          <source>Next, run the Django command-line utilities to create the database tables automatically:</source>
          <target state="translated">次に、Django のコマンドラインユーティリティを実行して、データベースのテーブルを自動的に作成します。</target>
        </trans-unit>
        <trans-unit id="3d2afbfa24772718392bac2a4e9a06485063aa1a" translate="yes" xml:space="preserve">
          <source>Next, start up the Django development server:</source>
          <target state="translated">次に、Django開発サーバーを起動します。</target>
        </trans-unit>
        <trans-unit id="71a03345430550cc7e9c59db9c5b7395c24fb91c" translate="yes" xml:space="preserve">
          <source>Next, untar the source code archive, and extract the datum shifting files in the &lt;code&gt;nad&lt;/code&gt; subdirectory. This must be done &lt;em&gt;prior&lt;/em&gt; to configuration:</source>
          <target state="translated">次に、ソースコードアーカイブをuntarし、 &lt;code&gt;nad&lt;/code&gt; サブディレクトリにあるデータムシフトファイルを抽出します。これは構成の&lt;em&gt;前&lt;/em&gt;に行う必要があります。</target>
        </trans-unit>
        <trans-unit id="021c776346f3be3e04eaad68d47bfd2f60ac64ea" translate="yes" xml:space="preserve">
          <source>Next, we define a function called &lt;code&gt;current_datetime&lt;/code&gt;. This is the view function. Each view function takes an &lt;a href=&quot;../../ref/request-response#django.http.HttpRequest&quot;&gt;&lt;code&gt;HttpRequest&lt;/code&gt;&lt;/a&gt; object as its first parameter, which is typically named &lt;code&gt;request&lt;/code&gt;.</source>
          <target state="translated">次に、 &lt;code&gt;current_datetime&lt;/code&gt; という関数を定義します。これはビュー関数です。各ビュー関数は、&lt;a href=&quot;../../ref/request-response#django.http.HttpRequest&quot;&gt; &lt;code&gt;HttpRequest&lt;/code&gt; &lt;/a&gt;最初のパラメーターとして HttpRequestオブジェクトをます。これは通常、 &lt;code&gt;request&lt;/code&gt; という名前です。</target>
        </trans-unit>
        <trans-unit id="285aab5cab4e6d27cc92dd179795c52e99d8e048" translate="yes" xml:space="preserve">
          <source>Next, we write the method responsible for generating the SQL:</source>
          <target state="translated">次に、SQLの生成を担当するメソッドを書きます。</target>
        </trans-unit>
        <trans-unit id="0c7a20054827a1f65c3805460f6867fbf008e055" translate="yes" xml:space="preserve">
          <source>Next, we&amp;rsquo;ll create a subdirectory for images. Create an &lt;code&gt;images&lt;/code&gt; subdirectory in the &lt;code&gt;polls/static/polls/&lt;/code&gt; directory. Inside this directory, put an image called &lt;code&gt;background.gif&lt;/code&gt;. In other words, put your image in &lt;code&gt;polls/static/polls/images/background.gif&lt;/code&gt;.</source>
          <target state="translated">次に、画像のサブディレクトリを作成します。 &lt;code&gt;polls/static/polls/&lt;/code&gt; ディレクトリに &lt;code&gt;images&lt;/code&gt; サブディレクトリを作成します。このディレクトリ内に、 &lt;code&gt;background.gif&lt;/code&gt; ます。つまり、画像を &lt;code&gt;polls/static/polls/images/background.gif&lt;/code&gt; に配置します。</target>
        </trans-unit>
        <trans-unit id="2448d8012ce49bb13b445b0d77f557096a6e430b" translate="yes" xml:space="preserve">
          <source>Next, we&amp;rsquo;ll need to inform our &lt;a href=&quot;index#django.contrib.admin.ModelAdmin&quot;&gt;&lt;code&gt;ModelAdmin&lt;/code&gt;&lt;/a&gt; of the action. This works just like any other configuration option. So, the complete &lt;code&gt;admin.py&lt;/code&gt; with the action and its registration would look like:</source>
          <target state="translated">次に、&lt;a href=&quot;index#django.contrib.admin.ModelAdmin&quot;&gt; &lt;code&gt;ModelAdmin&lt;/code&gt; &lt;/a&gt;に通知する必要がありますにアクション。これは、他の構成オプションと同じように機能します。したがって、アクションとその登録を含む完全な &lt;code&gt;admin.py&lt;/code&gt; は次のようになります。</target>
        </trans-unit>
        <trans-unit id="96a65e04544e3b461117b55fa16483b977d28de6" translate="yes" xml:space="preserve">
          <source>Next, we&amp;rsquo;ll write the &lt;code&gt;PublisherBookList&lt;/code&gt; view itself:</source>
          <target state="translated">次に、 &lt;code&gt;PublisherBookList&lt;/code&gt; ビュー自体を。</target>
        </trans-unit>
        <trans-unit id="a0e179a073e3c81a9e2691303a73447da0cb82ce" translate="yes" xml:space="preserve">
          <source>Next, we&amp;rsquo;re going to remove our old &lt;code&gt;index&lt;/code&gt;, &lt;code&gt;detail&lt;/code&gt;, and &lt;code&gt;results&lt;/code&gt; views and use Django&amp;rsquo;s generic views instead. To do so, open the &lt;code&gt;polls/views.py&lt;/code&gt; file and change it like so:</source>
          <target state="translated">次に、古い &lt;code&gt;index&lt;/code&gt; 、 &lt;code&gt;detail&lt;/code&gt; 、 &lt;code&gt;results&lt;/code&gt; を削除しますビュー代わりにDjangoの汎用ビューを使用します。これを行うには、 &lt;code&gt;polls/views.py&lt;/code&gt; ファイルを開き、次のように変更します。</target>
        </trans-unit>
        <trans-unit id="5f86a40e869fcd75bbca46dc9ff1ce17defbb2ec" translate="yes" xml:space="preserve">
          <source>Next, you must replace the &lt;a href=&quot;../ref/contrib/auth#django.contrib.auth.backends.ModelBackend&quot;&gt;&lt;code&gt;ModelBackend&lt;/code&gt;&lt;/a&gt; with &lt;a href=&quot;../ref/contrib/auth#django.contrib.auth.backends.RemoteUserBackend&quot;&gt;&lt;code&gt;RemoteUserBackend&lt;/code&gt;&lt;/a&gt; in the &lt;a href=&quot;../ref/settings#std:setting-AUTHENTICATION_BACKENDS&quot;&gt;&lt;code&gt;AUTHENTICATION_BACKENDS&lt;/code&gt;&lt;/a&gt; setting:</source>
          <target state="translated">次に、&lt;a href=&quot;../ref/settings#std:setting-AUTHENTICATION_BACKENDS&quot;&gt; &lt;code&gt;AUTHENTICATION_BACKENDS&lt;/code&gt; &lt;/a&gt;設定で&lt;a href=&quot;../ref/contrib/auth#django.contrib.auth.backends.ModelBackend&quot;&gt; &lt;code&gt;ModelBackend&lt;/code&gt; &lt;/a&gt;を&lt;a href=&quot;../ref/contrib/auth#django.contrib.auth.backends.RemoteUserBackend&quot;&gt; &lt;code&gt;RemoteUserBackend&lt;/code&gt; &lt;/a&gt;に置き換える必要があります。</target>
        </trans-unit>
        <trans-unit id="f2560cbce63028d4ce27fdd2ae2588b9ae69ca1e" translate="yes" xml:space="preserve">
          <source>Nginx</source>
          <target state="translated">Nginx</target>
        </trans-unit>
        <trans-unit id="816c52fd2bdd94a63cd0944823a6c0aa9384c103" translate="yes" xml:space="preserve">
          <source>No</source>
          <target state="translated">No</target>
        </trans-unit>
        <trans-unit id="20edec5d0ae49d85148c06bcee71d165b579befe" translate="yes" xml:space="preserve">
          <source>No arguments: All apps have all of their migrations run.</source>
          <target state="translated">議論はありません。すべてのアプリですべてのマイグレーションが実行されます。</target>
        </trans-unit>
        <trans-unit id="d14d96d5d8b6c42d1f07720884470a5df54ddfae" translate="yes" xml:space="preserve">
          <source>No bulletproof technical solution exists at the framework level to safely validate all user uploaded file content, however, there are some other steps you can take to mitigate these attacks:</source>
          <target state="translated">フレームワークレベルでは、ユーザーがアップロードしたすべてのファイルコンテンツを安全に検証するための防弾技術的なソリューションは存在しませんが、これらの攻撃を軽減するために取ることができる他のステップがあります。</target>
        </trans-unit>
        <trans-unit id="3d8384f7fd7da9b2b422f4c883195efb29896bda" translate="yes" xml:space="preserve">
          <source>No checking is done on the SQL statement that is passed in to &lt;code&gt;.raw()&lt;/code&gt;. Django expects that the statement will return a set of rows from the database, but does nothing to enforce that. If the query does not return rows, a (possibly cryptic) error will result.</source>
          <target state="translated">&lt;code&gt;.raw()&lt;/code&gt; に渡されるSQLステートメントのチェックは行われません。Djangoは、ステートメントがデータベースから行のセットを返すことを期待しますが、それを強制することは何もしません。クエリが行を返さない場合、（おそらく暗号化された）エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="3b1825829e0d568b54e3f2738dbb38d3f1fe4df1" translate="yes" xml:space="preserve">
          <source>No gettext?</source>
          <target state="translated">gettextがない?</target>
        </trans-unit>
        <trans-unit id="77e07c3be309fde63eb2e14702370190c908a04a" translate="yes" xml:space="preserve">
          <source>No matter which database backend we are using, this will mean that &lt;a href=&quot;../ref/django-admin#django-admin-migrate&quot;&gt;&lt;code&gt;migrate&lt;/code&gt;&lt;/a&gt; and other SQL commands create the right column type for storing a string.</source>
          <target state="translated">使用しているデータベースバックエンドに関係なく、これは&lt;a href=&quot;../ref/django-admin#django-admin-migrate&quot;&gt; &lt;code&gt;migrate&lt;/code&gt; &lt;/a&gt;および他のSQLコマンドが文字列を格納するための正しい列タイプを作成することを意味します。</target>
        </trans-unit>
        <trans-unit id="12930b65de7726f62fe80a0b6083ac02553c2c82" translate="yes" xml:space="preserve">
          <source>No referrer: do not send a &lt;code&gt;Referer&lt;/code&gt; header at all.</source>
          <target state="translated">いいえリファラん：送信しない &lt;code&gt;Referer&lt;/code&gt; すべてのヘッダを。</target>
        </trans-unit>
        <trans-unit id="4a2f33f43afb49828b5490390f091674882fcb65" translate="yes" xml:space="preserve">
          <source>No safety guarantee</source>
          <target state="translated">安全性の保証はありません</target>
        </trans-unit>
        <trans-unit id="5d4134379c894768a5b0b531aeca8ad07511ff4d" translate="yes" xml:space="preserve">
          <source>No, that&amp;rsquo;s not a typo: the &amp;ldquo;update&amp;rdquo; middleware must be first in the list, and the &amp;ldquo;fetch&amp;rdquo; middleware must be last. The details are a bit obscure, but see &lt;a href=&quot;#order-of-middleware&quot;&gt;Order of MIDDLEWARE&lt;/a&gt; below if you&amp;rsquo;d like the full story.</source>
          <target state="translated">いいえ、それはタイプミスではありません。「更新」ミドルウェアがリストの最初にあり、「フェッチ」ミドルウェアが最後でなければなりません。詳細は少しあいまいですが、完全なストーリーが必要な場合&lt;a href=&quot;#order-of-middleware&quot;&gt;は、&lt;/a&gt;下の「注文のミドルウェア」を参照してください。</target>
        </trans-unit>
        <trans-unit id="0bae75e75a1d8c0944e2819de3d77ea82e28a278" translate="yes" xml:space="preserve">
          <source>No, this is by design. Not linking CSRF protection to a session allows using the protection on sites such as a &lt;code&gt;pastebin&lt;/code&gt; that allow submissions from anonymous users which don&amp;rsquo;t have a session.</source>
          <target state="translated">いいえ、これは仕様によるものです。CSRF保護をセッションにリンクしないことで、セッションを持たない匿名ユーザーからの送信を許可する &lt;code&gt;pastebin&lt;/code&gt; などのサイトで保護を使用できます。</target>
        </trans-unit>
        <trans-unit id="75ac05ec01bf669ca63b694f09f01bafc803a917" translate="yes" xml:space="preserve">
          <source>No, this is by design. Not linking CSRF protection to a session allows using the protection on sites such as a &lt;em&gt;pastebin&lt;/em&gt; that allow submissions from anonymous users which don&amp;rsquo;t have a session.</source>
          <target state="translated">No, this is by design. Not linking CSRF protection to a session allows using the protection on sites such as a &lt;em&gt;pastebin&lt;/em&gt; that allow submissions from anonymous users which don&amp;rsquo;t have a session.</target>
        </trans-unit>
        <trans-unit id="75a6e20e5d3d2a956555b09b0ceec04066703569" translate="yes" xml:space="preserve">
          <source>No, this is by design. Without a man-in-the-middle attack, there is no way for an attacker to send a CSRF token cookie to a victim&amp;rsquo;s browser, so a successful attack would need to obtain the victim&amp;rsquo;s browser&amp;rsquo;s cookie via XSS or similar, in which case an attacker usually doesn&amp;rsquo;t need CSRF attacks.</source>
          <target state="translated">いいえ、これは仕様によるものです。中間者攻撃がないと、攻撃者がCSRFトークンCookieを被害者のブラウザに送信する方法がないため、攻撃を成功させるには、XSSまたは同様の方法で被害者のブラウザのCookieを取得する必要があります。通常、攻撃者はCSRF攻撃を必要としません。</target>
        </trans-unit>
        <trans-unit id="bd0b455c46e5ca610bef77120da2e5ba9eaebc54" translate="yes" xml:space="preserve">
          <source>Non-atomic migrations</source>
          <target state="translated">非原子移動</target>
        </trans-unit>
        <trans-unit id="69833b38232d3e89572bdb6759074b9ad006c98c" translate="yes" xml:space="preserve">
          <source>Non-field errors (and/or hidden field errors that are rendered at the top of the form when using helpers like &lt;code&gt;form.as_p()&lt;/code&gt;) will be rendered with an additional class of &lt;code&gt;nonfield&lt;/code&gt; to help distinguish them from field-specific errors. For example, &lt;code&gt;{{ form.non_field_errors }}&lt;/code&gt; would look like:</source>
          <target state="translated">非フィールド・エラー（のようなヘルパー使用している場合、フォームの一番上にレンダリングされ、および/または隠されたフィールドエラー &lt;code&gt;form.as_p()&lt;/code&gt; ）の追加のクラスでレンダリングされます &lt;code&gt;nonfield&lt;/code&gt; ヘルプにフィールド固有のエラーと区別します。たとえば、 &lt;code&gt;{{ form.non_field_errors }}&lt;/code&gt; は次のようになります。</target>
        </trans-unit>
        <trans-unit id="6eef6648406c333a4035cd5e60d0bf2ecf2606d7" translate="yes" xml:space="preserve">
          <source>None</source>
          <target state="translated">None</target>
        </trans-unit>
        <trans-unit id="c32acd7553559b10b098232e03fd1062116c6e62" translate="yes" xml:space="preserve">
          <source>None of this is true in a time zone aware environment:</source>
          <target state="translated">時間帯を意識した環境ではどれも当てはまりません。</target>
        </trans-unit>
        <trans-unit id="6c905dba689783614e7cd8189d7380a8142bf699" translate="yes" xml:space="preserve">
          <source>Normal Python name resolution rules apply. If you have multiple base classes that declare a &lt;code&gt;Meta&lt;/code&gt; inner class, only the first one will be used. This means the child&amp;rsquo;s &lt;code&gt;Meta&lt;/code&gt;, if it exists, otherwise the &lt;code&gt;Meta&lt;/code&gt; of the first parent, etc.</source>
          <target state="translated">通常のPython名前解決ルールが適用されます。 &lt;code&gt;Meta&lt;/code&gt; 内部クラスを宣言する複数の基本クラスがある場合、最初のクラスのみが使用されます。これは子供の意味 &lt;code&gt;Meta&lt;/code&gt; 、それが存在する場合、それ以外の &lt;code&gt;Meta&lt;/code&gt; 最初の親の、など</target>
        </trans-unit>
        <trans-unit id="787e251fceb20e20f58285f09344abec1dac3b8e" translate="yes" xml:space="preserve">
          <source>Normal Python unit test classes extend a base class of &lt;a href=&quot;https://docs.python.org/3/library/unittest.html#unittest.TestCase&quot;&gt;&lt;code&gt;unittest.TestCase&lt;/code&gt;&lt;/a&gt;. Django provides a few extensions of this base class:</source>
          <target state="translated">通常のPythonユニットテストクラスは、&lt;a href=&quot;https://docs.python.org/3/library/unittest.html#unittest.TestCase&quot;&gt; &lt;code&gt;unittest.TestCase&lt;/code&gt; の&lt;/a&gt;基本クラスを拡張します。Djangoはこの基本クラスのいくつかの拡張を提供します：</target>
        </trans-unit>
        <trans-unit id="1ad536357eed7c72cb7dc875d4df958bc22cdd9b" translate="yes" xml:space="preserve">
          <source>Normalizes email addresses by lowercasing the domain portion of the email address.</source>
          <target state="translated">メールアドレスのドメイン部分を小文字にすることで、メールアドレスを正規化します。</target>
        </trans-unit>
        <trans-unit id="d2bd9144908a9d20be8073dbbaa165af1378fd10" translate="yes" xml:space="preserve">
          <source>Normalizes the email by calling &lt;a href=&quot;#django.contrib.auth.models.BaseUserManager.normalize_email&quot;&gt;&lt;code&gt;BaseUserManager.normalize_email()&lt;/code&gt;&lt;/a&gt;. If you override this method, be sure to call &lt;code&gt;super()&lt;/code&gt; to retain the normalization.</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.auth.models.BaseUserManager.normalize_email&quot;&gt; &lt;code&gt;BaseUserManager.normalize_email()&lt;/code&gt; を&lt;/a&gt;呼び出して、メールを正規化します。このメソッドをオーバーライドする場合は、正規化を維持するために必ず &lt;code&gt;super()&lt;/code&gt; を呼び出してください。</target>
        </trans-unit>
        <trans-unit id="ebca8d3e7cb9434f28975cda931653991094e57c" translate="yes" xml:space="preserve">
          <source>Normalizes the username by calling &lt;a href=&quot;#django.contrib.auth.models.AbstractBaseUser.normalize_username&quot;&gt;&lt;code&gt;normalize_username()&lt;/code&gt;&lt;/a&gt;. If you override this method, be sure to call &lt;code&gt;super()&lt;/code&gt; to retain the normalization.</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.auth.models.AbstractBaseUser.normalize_username&quot;&gt; &lt;code&gt;normalize_username()&lt;/code&gt; を&lt;/a&gt;呼び出してユーザー名を正規化します。このメソッドをオーバーライドする場合は、正規化を維持するために必ず &lt;code&gt;super()&lt;/code&gt; を呼び出してください。</target>
        </trans-unit>
        <trans-unit id="c716c10654bb0f9670d96ab83c4ff9181bbc894e" translate="yes" xml:space="preserve">
          <source>Normalizes to: A &lt;a href=&quot;https://docs.python.org/3/library/uuid.html#uuid.UUID&quot;&gt;&lt;code&gt;UUID&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">正規化：&lt;a href=&quot;https://docs.python.org/3/library/uuid.html#uuid.UUID&quot;&gt; &lt;code&gt;UUID&lt;/code&gt; &lt;/a&gt;オブジェクト。</target>
        </trans-unit>
        <trans-unit id="23571b266e909356ef73bc9292429433256272f7" translate="yes" xml:space="preserve">
          <source>Normalizes to: A &lt;code&gt;QuerySet&lt;/code&gt; of model instances.</source>
          <target state="translated">正規化：モデルインスタンスの &lt;code&gt;QuerySet&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d8db01bd92878bf8c9d9ba50bf01d544d075050e" translate="yes" xml:space="preserve">
          <source>Normalizes to: A Python &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.timedelta&quot;&gt;&lt;code&gt;timedelta&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">正規化：Python &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.timedelta&quot;&gt; &lt;code&gt;timedelta&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f06883286dbd9b7a7366dcec2b203da4a388e3d8" translate="yes" xml:space="preserve">
          <source>Normalizes to: A Python &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt; value.</source>
          <target state="translated">正規化：Pythonの &lt;code&gt;True&lt;/code&gt; または &lt;code&gt;False&lt;/code&gt; 値。</target>
        </trans-unit>
        <trans-unit id="d4886d2a0f53043db52f5cde8feddfa0bc26c7b2" translate="yes" xml:space="preserve">
          <source>Normalizes to: A Python &lt;code&gt;True&lt;/code&gt;, &lt;code&gt;False&lt;/code&gt; or &lt;code&gt;None&lt;/code&gt; value.</source>
          <target state="translated">正規化：Pythonの &lt;code&gt;True&lt;/code&gt; 、 &lt;code&gt;False&lt;/code&gt; または &lt;code&gt;None&lt;/code&gt; の値。</target>
        </trans-unit>
        <trans-unit id="605b63bef291da49b100f180cd452f4da48ba0c9" translate="yes" xml:space="preserve">
          <source>Normalizes to: A Python &lt;code&gt;datetime.date&lt;/code&gt; object.</source>
          <target state="translated">正規化：Python &lt;code&gt;datetime.date&lt;/code&gt; オブジェクト。</target>
        </trans-unit>
        <trans-unit id="9ca92c54da10e1d5c685996a1b8233213ac1d451" translate="yes" xml:space="preserve">
          <source>Normalizes to: A Python &lt;code&gt;datetime.datetime&lt;/code&gt; object.</source>
          <target state="translated">正規化：Pythonの &lt;code&gt;datetime.datetime&lt;/code&gt; オブジェクト。</target>
        </trans-unit>
        <trans-unit id="f27a4c57bf6c2c00615c6bd981ee576ffc7d62f7" translate="yes" xml:space="preserve">
          <source>Normalizes to: A Python &lt;code&gt;datetime.time&lt;/code&gt; object.</source>
          <target state="translated">正規化：Python &lt;code&gt;datetime.time&lt;/code&gt; オブジェクト。</target>
        </trans-unit>
        <trans-unit id="8208bd6963bb476e18fec3f6260c3df00f3671a6" translate="yes" xml:space="preserve">
          <source>Normalizes to: A Python &lt;code&gt;decimal&lt;/code&gt;.</source>
          <target state="translated">正規化：Python &lt;code&gt;decimal&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="77e22ea42119f399cbae9e4153b4d1808eaee60c" translate="yes" xml:space="preserve">
          <source>Normalizes to: A Python float.</source>
          <target state="translated">に正規化されます。Python のフロート。</target>
        </trans-unit>
        <trans-unit id="3a1c8382df016399dc527e0652beec43e30a44b8" translate="yes" xml:space="preserve">
          <source>Normalizes to: A Python integer.</source>
          <target state="translated">に正規化します。Pythonの整数。</target>
        </trans-unit>
        <trans-unit id="3cd0055e6682f053f1055a5133dd78f42a15a194" translate="yes" xml:space="preserve">
          <source>Normalizes to: A Python representation of the JSON value (usually as a &lt;code&gt;dict&lt;/code&gt;, &lt;code&gt;list&lt;/code&gt;, or &lt;code&gt;None&lt;/code&gt;), depending on &lt;a href=&quot;#django.forms.JSONField.decoder&quot;&gt;&lt;code&gt;JSONField.decoder&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Normalizes to: A Python representation of the JSON value (usually as a &lt;code&gt;dict&lt;/code&gt; , &lt;code&gt;list&lt;/code&gt; , or &lt;code&gt;None&lt;/code&gt; ), depending on &lt;a href=&quot;#django.forms.JSONField.decoder&quot;&gt; &lt;code&gt;JSONField.decoder&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="a22741f23a65dd20cd7fdbc9a7d00afdfb0db9cf" translate="yes" xml:space="preserve">
          <source>Normalizes to: A list of strings.</source>
          <target state="translated">に正規化します。文字列のリスト。</target>
        </trans-unit>
        <trans-unit id="03edfdc79677e527c568c032a0794b48135d3b8f" translate="yes" xml:space="preserve">
          <source>Normalizes to: A list of values of the type provided by the &lt;code&gt;coerce&lt;/code&gt; argument.</source>
          <target state="translated">正規化： &lt;code&gt;coerce&lt;/code&gt; 引数によって提供されるタイプの値のリスト。</target>
        </trans-unit>
        <trans-unit id="7a4cda7e66de907da2a21e509ad56f05074178a7" translate="yes" xml:space="preserve">
          <source>Normalizes to: A model instance.</source>
          <target state="translated">に正規化します。モデルのインスタンス。</target>
        </trans-unit>
        <trans-unit id="55888b9b4ff1eb1ec8ba6a3bbc52308ac1adbfc2" translate="yes" xml:space="preserve">
          <source>Normalizes to: A string.</source>
          <target state="translated">正規化します。文字列。</target>
        </trans-unit>
        <trans-unit id="24a53ad769cff7f9d766b78fc9dcb56af2255d2e" translate="yes" xml:space="preserve">
          <source>Normalizes to: A string. IPv6 addresses are normalized as described below.</source>
          <target state="translated">正規化します。文字列。IPv6アドレスは以下のように正規化されます。</target>
        </trans-unit>
        <trans-unit id="f17a7f7bab37ec3a1b4b6f3ae02f34271a88be2a" translate="yes" xml:space="preserve">
          <source>Normalizes to: A value of the type provided by the &lt;a href=&quot;#django.forms.TypedChoiceField.coerce&quot;&gt;&lt;code&gt;coerce&lt;/code&gt;&lt;/a&gt; argument.</source>
          <target state="translated">正規化：&lt;a href=&quot;#django.forms.TypedChoiceField.coerce&quot;&gt; &lt;code&gt;coerce&lt;/code&gt; &lt;/a&gt;引数によって提供されるタイプの値。</target>
        </trans-unit>
        <trans-unit id="8e7beb335ed1ad3ce19afe6d6855d444ffea421d" translate="yes" xml:space="preserve">
          <source>Normalizes to: An &lt;code&gt;UploadedFile&lt;/code&gt; object that wraps the file content and file name into a single object.</source>
          <target state="translated">正規化：ファイルのコンテンツとファイル名を単一のオブジェクトにラップする &lt;code&gt;UploadedFile&lt;/code&gt; オブジェクト。</target>
        </trans-unit>
        <trans-unit id="4e7bc8818cf68569ca76c5ed75dcf2518442499f" translate="yes" xml:space="preserve">
          <source>Normalizes to: the type returned by the &lt;code&gt;compress&lt;/code&gt; method of the subclass.</source>
          <target state="translated">正規化：サブクラスの &lt;code&gt;compress&lt;/code&gt; メソッドによって返されるタイプ。</target>
        </trans-unit>
        <trans-unit id="4ed9d7700d72a59a0582b3f18f6a1b3e16b71b15" translate="yes" xml:space="preserve">
          <source>Normally the &lt;a href=&quot;templates/builtins#std:templatetag-csrf_token&quot;&gt;&lt;code&gt;csrf_token&lt;/code&gt;&lt;/a&gt; template tag will not work if &lt;code&gt;CsrfViewMiddleware.process_view&lt;/code&gt; or an equivalent like &lt;code&gt;csrf_protect&lt;/code&gt; has not run. The view decorator &lt;code&gt;requires_csrf_token&lt;/code&gt; can be used to ensure the template tag does work. This decorator works similarly to &lt;code&gt;csrf_protect&lt;/code&gt;, but never rejects an incoming request.</source>
          <target state="translated">通常&lt;a href=&quot;templates/builtins#std:templatetag-csrf_token&quot;&gt; &lt;code&gt;csrf_token&lt;/code&gt; &lt;/a&gt;テンプレートタグはありません作業する場合は &lt;code&gt;CsrfViewMiddleware.process_view&lt;/code&gt; などと同等 &lt;code&gt;csrf_protect&lt;/code&gt; が実行されていません。ビューデコレータ &lt;code&gt;requires_csrf_token&lt;/code&gt; は、テンプレートタグが作業を行うことを確認するために使用することができます。このデコレータは &lt;code&gt;csrf_protect&lt;/code&gt; と同様に機能しますが、着信要求を拒否することはありません。</target>
        </trans-unit>
        <trans-unit id="cdf12ca4e299dccc08f02ece3bea84cff2a538e5" translate="yes" xml:space="preserve">
          <source>Normally the template name is relative to the template loader&amp;rsquo;s root directory. A string argument may also be a relative path starting with &lt;code&gt;./&lt;/code&gt; or &lt;code&gt;../&lt;/code&gt; as described in the &lt;a href=&quot;#std:templatetag-extends&quot;&gt;&lt;code&gt;extends&lt;/code&gt;&lt;/a&gt; tag.</source>
          <target state="translated">通常、テンプレート名はテンプレートローダーのルートディレクトリを基準にしています。文字列引数は、&lt;a href=&quot;#std:templatetag-extends&quot;&gt; &lt;code&gt;extends&lt;/code&gt; &lt;/a&gt;タグで説明されているように、。 &lt;code&gt;./&lt;/code&gt; または &lt;code&gt;../&lt;/code&gt; で始まる相対パスでもかまいません。</target>
        </trans-unit>
        <trans-unit id="735ce792d80ea48985a0c3c2c332b181a7542837" translate="yes" xml:space="preserve">
          <source>Normally the template name is relative to the template loader&amp;rsquo;s root directory. A string argument may also be a relative path starting with &lt;code&gt;./&lt;/code&gt; or &lt;code&gt;../&lt;/code&gt;. For example, assume the following directory structure:</source>
          <target state="translated">通常、テンプレート名はテンプレートローダーのルートディレクトリを基準にしています。文字列引数は、. &lt;code&gt;./&lt;/code&gt; または &lt;code&gt;../&lt;/code&gt; で始まる相対パスにすることもできます。たとえば、次のディレクトリ構造を想定します。</target>
        </trans-unit>
        <trans-unit id="2dd3dec7507f373967972687c007b5c2f2200db3" translate="yes" xml:space="preserve">
          <source>Normally you&amp;rsquo;ll only be adding extra tables that don&amp;rsquo;t already appear in the query. However, if the case outlined above does occur, there are a few solutions. First, see if you can get by without including the extra table and use the one already in the query. If that isn&amp;rsquo;t possible, put your &lt;code&gt;extra()&lt;/code&gt; call at the front of the queryset construction so that your table is the first use of that table. Finally, if all else fails, look at the query produced and rewrite your &lt;code&gt;where&lt;/code&gt; addition to use the alias given to your extra table. The alias will be the same each time you construct the queryset in the same way, so you can rely upon the alias name to not change.</source>
          <target state="translated">通常は、クエリにまだ表示されていない追加のテーブルのみを追加します。ただし、上記のケースが発生する場合は、いくつかの解決策があります。まず、追加のテーブルを含めずに、クエリで既に使用されているテーブルを使用できるかどうかを確認します。それが不可能な場合は、クエリセット構築の前に &lt;code&gt;extra()&lt;/code&gt; 呼び出しを配置し​​て、テーブルがそのテーブルを最初に使用するようにします。最後に、他のすべてが失敗した場合は、生成されたクエリを確認し、 &lt;code&gt;where&lt;/code&gt; テーブルを書き直して、追加のテーブルに指定されたエイリアスを使用します。同じ方法でクエリセットを作成するたびにエイリアスは同じになるので、エイリアス名を変更しないようにすることができます。</target>
        </trans-unit>
        <trans-unit id="4f40a32d698fbe63e70a0ff00283bd488789116d" translate="yes" xml:space="preserve">
          <source>Normally, objects have three save options: &amp;ldquo;Save&amp;rdquo;, &amp;ldquo;Save and continue editing&amp;rdquo;, and &amp;ldquo;Save and add another&amp;rdquo;. If &lt;code&gt;save_as&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;, &amp;ldquo;Save and add another&amp;rdquo; will be replaced by a &amp;ldquo;Save as new&amp;rdquo; button that creates a new object (with a new ID) rather than updating the existing object.</source>
          <target state="translated">通常、オブジェクトには「保存」、「保存して編集を続行」、「保存してさらに追加」の3つの保存オプションがあります。 &lt;code&gt;save_as&lt;/code&gt; が &lt;code&gt;True&lt;/code&gt; の場合、「保存して別のものを追加」は「既存として保存」ボタンに置​​き換えられ、既存のオブジェクトを更新するのではなく、新しいオブジェクト（新しいIDで）を作成します。</target>
        </trans-unit>
        <trans-unit id="fc1a750f10e8d842b641d322f43c6420831581c7" translate="yes" xml:space="preserve">
          <source>Normally, the save buttons appear only at the bottom of the forms. If you set &lt;code&gt;save_on_top&lt;/code&gt;, the buttons will appear both on the top and the bottom.</source>
          <target state="translated">通常、保存ボタンはフォームの下部にのみ表示されます。 &lt;code&gt;save_on_top&lt;/code&gt; を設定すると、ボタンは上部と下部の両方に表示されます。</target>
        </trans-unit>
        <trans-unit id="159f39779a59cc0691baa39db4014b657a742b47" translate="yes" xml:space="preserve">
          <source>Normally, you should always use &lt;a href=&quot;#django.urls.reverse&quot;&gt;&lt;code&gt;reverse()&lt;/code&gt;&lt;/a&gt; to define URLs within your application. However, if your application constructs part of the URL hierarchy itself, you may occasionally need to generate URLs. In that case, you need to be able to find the base URL of the Django project within its Web server (normally, &lt;a href=&quot;#django.urls.reverse&quot;&gt;&lt;code&gt;reverse()&lt;/code&gt;&lt;/a&gt; takes care of this for you). In that case, you can call &lt;code&gt;get_script_prefix()&lt;/code&gt;, which will return the script prefix portion of the URL for your Django project. If your Django project is at the root of its web server, this is always &lt;code&gt;&quot;/&quot;&lt;/code&gt;.</source>
          <target state="translated">通常、アプリケーション内でURLを定義するには、常に&lt;a href=&quot;#django.urls.reverse&quot;&gt; &lt;code&gt;reverse()&lt;/code&gt; &lt;/a&gt;を使用する必要があります。ただし、アプリケーションがURL階層自体の一部を構築する場合は、URLを生成する必要がある場合があります。その場合、DjangoプロジェクトのベースURLをWebサーバー内で見つけることができる必要があります（通常、&lt;a href=&quot;#django.urls.reverse&quot;&gt; &lt;code&gt;reverse()&lt;/code&gt; &lt;/a&gt;がこれを処理します）。その場合、 &lt;code&gt;get_script_prefix()&lt;/code&gt; を呼び出すことができます。これにより、DjangoプロジェクトのURLのスクリプトプレフィックス部分が返されます。 DjangoプロジェクトがWebサーバーのルートにある場合、これは常に &lt;code&gt;&quot;/&quot;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="e93810e7ce2337ee98760b872339538f911e403d" translate="yes" xml:space="preserve">
          <source>Normally, you will not need to override the defaults in this fashion. The Django defaults are sufficiently tame that you can safely use them. Be aware that if you do pass in a new default module, it entirely &lt;em&gt;replaces&lt;/em&gt; the Django defaults, so you must specify a value for every possible setting that might be used in that code you are importing. Check in &lt;code&gt;django.conf.settings.global_settings&lt;/code&gt; for the full list.</source>
          <target state="translated">通常、この方法でデフォルトを上書きする必要はありません。Djangoのデフォルトは十分に使いこなしており、安全に使用できます。新しいデフォルトモジュールを渡すと、Djangoのデフォルトが完全に&lt;em&gt;置き換え&lt;/em&gt;られるため、インポートするコードで使用される可能性のあるすべての設定に値を指定する必要があることに注意してください。 &lt;code&gt;django.conf.settings.global_settings&lt;/code&gt; で完全なリストを確認してください。</target>
        </trans-unit>
        <trans-unit id="0bf43317eddd783b9efbccb3bf152e0b1cdb043f" translate="yes" xml:space="preserve">
          <source>Normally, you won&amp;rsquo;t have to worry about lazy translations. Just be aware that if you examine an object and it claims to be a &lt;code&gt;django.utils.functional.__proxy__&lt;/code&gt; object, it is a lazy translation. Calling &lt;code&gt;str()&lt;/code&gt; with the lazy translation as the argument will generate a string in the current locale.</source>
          <target state="translated">通常、遅延翻訳について心配する必要はありません。オブジェクトを調べて、それが &lt;code&gt;django.utils.functional.__proxy__&lt;/code&gt; オブジェクトであると主張している場合、それは遅延翻訳であることに注意してください。遅延翻訳を引数として &lt;code&gt;str()&lt;/code&gt; を呼び出すと、現在のロケールで文字列が生成されます。</target>
        </trans-unit>
        <trans-unit id="887896ca3cf9796c1df0cd00c7595e083f030487" translate="yes" xml:space="preserve">
          <source>Normally, you&amp;rsquo;ll only need to use &lt;code&gt;force_str()&lt;/code&gt;. Call it as early as possible on any input data that might be either a string or a bytestring, and from then on, you can treat the result as always being a string.</source>
          <target state="translated">通常は、 &lt;code&gt;force_str()&lt;/code&gt; のみを使用する必要があります。文字列またはバイト文字列のいずれかである可能性のある入力データに対して、できるだけ早く呼び出し、それ以降、結果を常に文字列として扱うことができます。</target>
        </trans-unit>
        <trans-unit id="f226bb2d80ebbb2763506939a29736102f7ef23d" translate="yes" xml:space="preserve">
          <source>Normally, you&amp;rsquo;re either writing a Django field to match a particular database column type, or you will need a way to convert your data to, say, a string.</source>
          <target state="translated">通常、特定のデータベース列タイプに一致するようにDjangoフィールドを書き込むか、データを文字列などに変換する方法が必要になります。</target>
        </trans-unit>
        <trans-unit id="ce4466a62d04187676c02df4614fbce2c4ba7436" translate="yes" xml:space="preserve">
          <source>Not all backends support all functions, so refer to the documentation of each function to see if your database backend supports the function you want to use. If you call a geographic function on a backend that doesn&amp;rsquo;t support it, you&amp;rsquo;ll get a &lt;code&gt;NotImplementedError&lt;/code&gt; exception.</source>
          <target state="translated">すべてのバックエンドがすべての関数をサポートしているわけではないため、使用する関数がデータベースバックエンドでサポートされているかどうかを確認するには、各関数のドキュメントを参照してください。サポートしていないバックエンドで地理関数を呼び出すと、 &lt;code&gt;NotImplementedError&lt;/code&gt; 例外が発生します。</target>
        </trans-unit>
        <trans-unit id="d9b293fdef69d661a6a9fab7edba5fc8c10298b9" translate="yes" xml:space="preserve">
          <source>Not all features of the &lt;a href=&quot;#django.core.mail.EmailMessage&quot;&gt;&lt;code&gt;EmailMessage&lt;/code&gt;&lt;/a&gt; class are available through the &lt;a href=&quot;#django.core.mail.send_mail&quot;&gt;&lt;code&gt;send_mail()&lt;/code&gt;&lt;/a&gt; and related wrapper functions. If you wish to use advanced features, such as BCC&amp;rsquo;ed recipients, file attachments, or multi-part email, you&amp;rsquo;ll need to create &lt;a href=&quot;#django.core.mail.EmailMessage&quot;&gt;&lt;code&gt;EmailMessage&lt;/code&gt;&lt;/a&gt; instances directly.</source>
          <target state="translated">ないのすべての機能&lt;a href=&quot;#django.core.mail.EmailMessage&quot;&gt; &lt;code&gt;EmailMessage&lt;/code&gt; のの&lt;/a&gt;クラスが用意されていて&lt;a href=&quot;#django.core.mail.send_mail&quot;&gt; &lt;code&gt;send_mail()&lt;/code&gt; &lt;/a&gt;および関連するラッパー関数。あなたは、このようなBCC'ed受信者、添付ファイル、またはマルチパートメールなどの高度な機能を、使用したい場合は、作成する必要があります&lt;a href=&quot;#django.core.mail.EmailMessage&quot;&gt; &lt;code&gt;EmailMessage&lt;/code&gt; のを&lt;/a&gt;直接インスタンスを。</target>
        </trans-unit>
        <trans-unit id="affd0634cea2588f77f986208d4ea492e34b7daf" translate="yes" xml:space="preserve">
          <source>Not all mixins can be used together, and not all generic class based views can be used with all other mixins. Here we present a few examples that do work; if you want to bring together other functionality then you&amp;rsquo;ll have to consider interactions between attributes and methods that overlap between the different classes you&amp;rsquo;re using, and how &lt;a href=&quot;https://www.python.org/download/releases/2.3/mro/&quot;&gt;method resolution order&lt;/a&gt; will affect which versions of the methods will be called in what order.</source>
          <target state="translated">すべてのミックスインを一緒に使用できるわけではなく、すべてのジェネリッククラスベースのビューを他のすべてのミックスインで使用できるわけではありません。ここでは、機能するいくつかの例を示します。他の機能を統合したい場合は、使用している異なるクラス間で重複する属性とメソッド間の相互作用、および&lt;a href=&quot;https://www.python.org/download/releases/2.3/mro/&quot;&gt;メソッド解決順序&lt;/a&gt;がどのバージョンのメソッドがどの順序で呼び出されるかにどのように影響するかを考慮する必要があります。</target>
        </trans-unit>
        <trans-unit id="391ee549e2bdb434e349e78237a5df19f1d67675" translate="yes" xml:space="preserve">
          <source>Not contained within. This is the negation of the &lt;code&gt;in&lt;/code&gt; operator.</source>
          <target state="translated">含まれていません。これは &lt;code&gt;in&lt;/code&gt; 演算子の否定です。</target>
        </trans-unit>
        <trans-unit id="d73f1f8457b1700a505f1a5f8a7aa88ca0436156" translate="yes" xml:space="preserve">
          <source>Not every &lt;code&gt;QuerySet&lt;/code&gt; method makes sense at the &lt;code&gt;Manager&lt;/code&gt; level; for instance we intentionally prevent the &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.delete&quot;&gt;&lt;code&gt;QuerySet.delete()&lt;/code&gt;&lt;/a&gt; method from being copied onto the &lt;code&gt;Manager&lt;/code&gt; class.</source>
          <target state="translated">すべての &lt;code&gt;QuerySet&lt;/code&gt; メソッドが &lt;code&gt;Manager&lt;/code&gt; レベルで意味をなすわけではありません。たとえば、&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.delete&quot;&gt; &lt;code&gt;QuerySet.delete()&lt;/code&gt; &lt;/a&gt;メソッドが &lt;code&gt;Manager&lt;/code&gt; クラスにコピーされるのを意図的に防ぎます。</target>
        </trans-unit>
        <trans-unit id="a63cbf6b4d6edab9e07d126c7a36e814a81f1ec6" translate="yes" xml:space="preserve">
          <source>Not every template in &lt;code&gt;contrib/admin/templates/admin&lt;/code&gt; may be overridden per app or per model. The following can:</source>
          <target state="translated">&lt;code&gt;contrib/admin/templates/admin&lt;/code&gt; のすべてのテンプレートが、アプリごとまたはモデルごとにオーバーライドされるとは限りません。次のことができます：</target>
        </trans-unit>
        <trans-unit id="acba9927675c8a60aae9adcfef202f41a6c00c6d" translate="yes" xml:space="preserve">
          <source>Not found anything? See &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/faq/help/&quot;&gt;FAQ: Getting Help&lt;/a&gt; for information on getting support and asking questions to the community.</source>
          <target state="translated">Not found anything? See &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/faq/help/&quot;&gt;FAQ: Getting Help&lt;/a&gt; for information on getting support and asking questions to the community.</target>
        </trans-unit>
        <trans-unit id="2fc7fe98cf64c700ce9b0cc4bb17c0caec7c3361" translate="yes" xml:space="preserve">
          <source>Not represented in the form</source>
          <target state="translated">形で表現されていない</target>
        </trans-unit>
        <trans-unit id="d3f69563db3e7715296e2ae2d359c0c8bdd2cce0" translate="yes" xml:space="preserve">
          <source>Not using Django templates?</source>
          <target state="translated">Django のテンプレートを使用していない?</target>
        </trans-unit>
        <trans-unit id="2c924e3088204ee77ba681f72be3444357932fca" translate="yes" xml:space="preserve">
          <source>Note</source>
          <target state="translated">Note</target>
        </trans-unit>
        <trans-unit id="296473149ccc264ba7b462302f22e07ee1613215" translate="yes" xml:space="preserve">
          <source>Note &lt;code&gt;{{ article.pub_date|date:&quot;F j, Y&quot; }}&lt;/code&gt; uses a Unix-style &amp;ldquo;pipe&amp;rdquo; (the &amp;ldquo;|&amp;rdquo; character). This is called a template filter, and it&amp;rsquo;s a way to filter the value of a variable. In this case, the date filter formats a Python datetime object in the given format (as found in PHP&amp;rsquo;s date function).</source>
          <target state="translated">注意 &lt;code&gt;{{ article.pub_date|date:&quot;F j, Y&quot; }}&lt;/code&gt; は、Unixスタイルの「パイプ」（「|」文字）を使用しています。これはテンプレートフィルターと呼ばれ、変数の値をフィルターする方法です。この場合、日付フィルターは、Pythonのdatetimeオブジェクトを指定された形式でフォーマットします（PHPの日付関数にあります）。</target>
        </trans-unit>
        <trans-unit id="870a794d4d0468102a15a5fa5bb46615f6e62898" translate="yes" xml:space="preserve">
          <source>Note a few important things about how the test client works:</source>
          <target state="translated">テストクライアントがどのように動作するかについて、いくつかの重要なことに注意してください。</target>
        </trans-unit>
        <trans-unit id="5da84070f0015820b57bc36610be733ca3294c24" translate="yes" xml:space="preserve">
          <source>Note also that Django stores signal handlers as weak references by default, so if your handler is a local function, it may be garbage collected. To prevent this, pass &lt;code&gt;weak=False&lt;/code&gt; when you call the signal&amp;rsquo;s &lt;a href=&quot;../topics/signals#django.dispatch.Signal.connect&quot;&gt;&lt;code&gt;connect()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">また、Djangoはデフォルトでシグナルハンドラーを弱参照として保存するため、ハンドラーがローカル関数の場合、ガベージコレクションされる可能性があることに注意してください。これを防ぐには、シグナルの&lt;a href=&quot;../topics/signals#django.dispatch.Signal.connect&quot;&gt; &lt;code&gt;connect()&lt;/code&gt; &lt;/a&gt;を呼び出すときに &lt;code&gt;weak=False&lt;/code&gt; を渡します。</target>
        </trans-unit>
        <trans-unit id="14299bd3cea26d7db0d4aabfc73b1f096d5551d9" translate="yes" xml:space="preserve">
          <source>Note also that while the MAC can guarantee the authenticity of the data (that it was generated by your site, and not someone else), and the integrity of the data (that it is all there and correct), it cannot guarantee freshness i.e. that you are being sent back the last thing you sent to the client. This means that for some uses of session data, the cookie backend might open you up to &lt;a href=&quot;https://en.wikipedia.org/wiki/Replay_attack&quot;&gt;replay attacks&lt;/a&gt;. Unlike other session backends which keep a server-side record of each session and invalidate it when a user logs out, cookie-based sessions are not invalidated when a user logs out. Thus if an attacker steals a user&amp;rsquo;s cookie, they can use that cookie to login as that user even if the user logs out. Cookies will only be detected as &amp;lsquo;stale&amp;rsquo; if they are older than your &lt;a href=&quot;../../ref/settings#std:setting-SESSION_COOKIE_AGE&quot;&gt;&lt;code&gt;SESSION_COOKIE_AGE&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">また、MACはデータの信頼性（サイトによって生成されたものであり、他の誰かによってではない）とデータの整合性（すべてが存在し、正しいこと）を保証できますが、鮮度は保証できません。クライアントに最後に送信したものを送り返しています。つまり、セッションデータの一部の用途では、Cookieバックエンドが&lt;a href=&quot;https://en.wikipedia.org/wiki/Replay_attack&quot;&gt;攻撃&lt;/a&gt;をリプレイする可能性があります。各セッションのサーバー側の記録を保持し、ユーザーがログアウトしたときにそれを無効にする他のセッションバックエンドとは異なり、Cookieベースのセッションはユーザーがログアウトしても無効になりません。したがって、攻撃者がユーザーのCookieを盗んだ場合、ユーザーがログアウトしても、そのCookieを使用してそのユーザーとしてログインできます。 Cookieが&lt;a href=&quot;../../ref/settings#std:setting-SESSION_COOKIE_AGE&quot;&gt; &lt;code&gt;SESSION_COOKIE_AGE&lt;/code&gt; &lt;/a&gt;よりも古い場合のみ、「古くなった」と検出されます。</target>
        </trans-unit>
        <trans-unit id="a33d9580056f5d9f9ef0f3f8d807edc652ece048" translate="yes" xml:space="preserve">
          <source>Note also that you can only inherit from one generic view - that is, only one parent class may inherit from &lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.View&quot;&gt;&lt;code&gt;View&lt;/code&gt;&lt;/a&gt; and the rest (if any) should be mixins. Trying to inherit from more than one class that inherits from &lt;code&gt;View&lt;/code&gt; - for example, trying to use a form at the top of a list and combining &lt;a href=&quot;../../ref/class-based-views/mixins-editing#django.views.generic.edit.ProcessFormView&quot;&gt;&lt;code&gt;ProcessFormView&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../ref/class-based-views/generic-display#django.views.generic.list.ListView&quot;&gt;&lt;code&gt;ListView&lt;/code&gt;&lt;/a&gt; - won&amp;rsquo;t work as expected.</source>
          <target state="translated">あなたが唯一の汎用ビューから継承できることにも注意してください-である、唯一の親クラスから継承することができる&lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.View&quot;&gt; &lt;code&gt;View&lt;/code&gt; &lt;/a&gt;と残りは（もしあれば）ミックスインする必要があります。 &lt;code&gt;View&lt;/code&gt; から継承する複数のクラスから継承しようとすると（たとえば、リストの上部にあるフォームを使用して&lt;a href=&quot;../../ref/class-based-views/mixins-editing#django.views.generic.edit.ProcessFormView&quot;&gt; &lt;code&gt;ProcessFormView&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;../../ref/class-based-views/generic-display#django.views.generic.list.ListView&quot;&gt; &lt;code&gt;ListView&lt;/code&gt; &lt;/a&gt;を組み合わせようとすると）、期待どおりに機能しません。</target>
        </trans-unit>
        <trans-unit id="9582cd85442dd5db57f039a1ee4d57e14418eb91" translate="yes" xml:space="preserve">
          <source>Note also, that if you delete an object that has a &lt;a href=&quot;#django.contrib.contenttypes.fields.GenericRelation&quot;&gt;&lt;code&gt;GenericRelation&lt;/code&gt;&lt;/a&gt;, any objects which have a &lt;a href=&quot;#django.contrib.contenttypes.fields.GenericForeignKey&quot;&gt;&lt;code&gt;GenericForeignKey&lt;/code&gt;&lt;/a&gt; pointing at it will be deleted as well. In the example above, this means that if a &lt;code&gt;Bookmark&lt;/code&gt; object were deleted, any &lt;code&gt;TaggedItem&lt;/code&gt; objects pointing at it would be deleted at the same time.</source>
          <target state="translated">あなたが持っているオブジェクト削除することも注意し、&lt;a href=&quot;#django.contrib.contenttypes.fields.GenericRelation&quot;&gt; &lt;code&gt;GenericRelation&lt;/code&gt; を&lt;/a&gt;、持っている任意のオブジェクト&lt;a href=&quot;#django.contrib.contenttypes.fields.GenericForeignKey&quot;&gt; &lt;code&gt;GenericForeignKey&lt;/code&gt; の&lt;/a&gt;それでポインティングが同様に削除されます。上記の例では、これは、 &lt;code&gt;Bookmark&lt;/code&gt; オブジェクトが削除された場合、それを指しているすべての &lt;code&gt;TaggedItem&lt;/code&gt; オブジェクトが同時に削除されることを意味します。</target>
        </trans-unit>
        <trans-unit id="afb22d70274d73a3af0a11a9efbc7601c6cffe84" translate="yes" xml:space="preserve">
          <source>Note however that not all these methods are required and may be deliberately omitted. As it happens, it is possible to leave each method unimplemented and still have a working Storage.</source>
          <target state="translated">しかし、これらのメソッドがすべて必要なわけではなく、意図的に省略されている場合もあることに注意してください。このように、各メソッドを未実装のままにしておいても、動作するストレージを持つことは可能です。</target>
        </trans-unit>
        <trans-unit id="a281167ca6f3f3d6ce6cf851b7d39c49313bd017" translate="yes" xml:space="preserve">
          <source>Note on performance</source>
          <target state="translated">パフォーマンスに関する注意事項</target>
        </trans-unit>
        <trans-unit id="8edc7ffdd6f4a3b096034148187e765e050e9ef8" translate="yes" xml:space="preserve">
          <source>Note that &amp;ldquo;bar&amp;rdquo; in a template expression like &lt;code&gt;{{ foo.bar }}&lt;/code&gt; will be interpreted as a literal string and not using the value of the variable &amp;ldquo;bar&amp;rdquo;, if one exists in the template context.</source>
          <target state="translated">&lt;code&gt;{{ foo.bar }}&lt;/code&gt; ようなテンプレート式の「bar」は、テンプレートコンテキストに存在する場合、変数「bar」の値を使用せずにリテラル文字列として解釈されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="afe31081e1c0a0c22ce8c03c79b6e9fe781b5cdf" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;#django.contrib.auth.decorators.permission_required&quot;&gt;&lt;code&gt;permission_required()&lt;/code&gt;&lt;/a&gt; also takes an optional &lt;code&gt;login_url&lt;/code&gt; parameter:</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.auth.decorators.permission_required&quot;&gt; &lt;code&gt;permission_required()&lt;/code&gt; &lt;/a&gt;はオプションの &lt;code&gt;login_url&lt;/code&gt; パラメータも取ることに注意してください：</target>
        </trans-unit>
        <trans-unit id="5935aa7699bc39ae3d2e0a6a74be308015833cce" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;#django.contrib.auth.logout&quot;&gt;&lt;code&gt;logout()&lt;/code&gt;&lt;/a&gt; doesn&amp;rsquo;t throw any errors if the user wasn&amp;rsquo;t logged in.</source>
          <target state="translated">その注意&lt;a href=&quot;#django.contrib.auth.logout&quot;&gt; &lt;code&gt;logout()&lt;/code&gt; &lt;/a&gt;ユーザーがログインしていなかった場合、エラーをスローしません。</target>
        </trans-unit>
        <trans-unit id="d5a560efe9ed69acab07d99a89a77ed4ccc33f23" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;#std:setting-EMAIL_USE_TLS&quot;&gt;&lt;code&gt;EMAIL_USE_TLS&lt;/code&gt;&lt;/a&gt;/&lt;a href=&quot;#std:setting-EMAIL_USE_SSL&quot;&gt;&lt;code&gt;EMAIL_USE_SSL&lt;/code&gt;&lt;/a&gt; are mutually exclusive, so only set one of those settings to &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">ことを注意&lt;a href=&quot;#std:setting-EMAIL_USE_TLS&quot;&gt; &lt;code&gt;EMAIL_USE_TLS&lt;/code&gt; &lt;/a&gt; / &lt;a href=&quot;#std:setting-EMAIL_USE_SSL&quot;&gt; &lt;code&gt;EMAIL_USE_SSL&lt;/code&gt; は&lt;/a&gt;これだけにそれらのいずれかの設定を設定し、相互に排他的である &lt;code&gt;True&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d3a5ff144d4383f6e080bcaf3e8709508673fa55" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.delete&quot;&gt;&lt;code&gt;delete()&lt;/code&gt;&lt;/a&gt; is the only &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; method that is not exposed on a &lt;a href=&quot;managers#django.db.models.Manager&quot;&gt;&lt;code&gt;Manager&lt;/code&gt;&lt;/a&gt; itself. This is a safety mechanism to prevent you from accidentally requesting &lt;code&gt;Entry.objects.delete()&lt;/code&gt;, and deleting &lt;em&gt;all&lt;/em&gt; the entries. If you &lt;em&gt;do&lt;/em&gt; want to delete all the objects, then you have to explicitly request a complete query set:</source>
          <target state="translated">&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.delete&quot;&gt; &lt;code&gt;delete()&lt;/code&gt; &lt;/a&gt;は、&lt;a href=&quot;managers#django.db.models.Manager&quot;&gt; &lt;code&gt;Manager&lt;/code&gt; &lt;/a&gt;自体に公開されていない唯一の&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; &lt;/a&gt;メソッドであることに注意してください。これは、誤って &lt;code&gt;Entry.objects.delete()&lt;/code&gt; をリクエストして&lt;em&gt;すべて&lt;/em&gt;のエントリを削除するのを防ぐための安全メカニズムです。あなたがいる場合&lt;em&gt;か&lt;/em&gt;、すべてのオブジェクトを削除したい場合、あなたは明示的に完全なクエリセットを要求する必要があります。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="efbe9c61755a3354107632b1df1edcfca88d5654" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;../../ref/request-response#django.http.HttpRequest.FILES&quot;&gt;&lt;code&gt;request.FILES&lt;/code&gt;&lt;/a&gt; will only contain data if the request method was &lt;code&gt;POST&lt;/code&gt; and the &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; that posted the request has the attribute &lt;code&gt;enctype=&quot;multipart/form-data&quot;&lt;/code&gt;. Otherwise, &lt;code&gt;request.FILES&lt;/code&gt; will be empty.</source>
          <target state="translated">注意&lt;a href=&quot;../../ref/request-response#django.http.HttpRequest.FILES&quot;&gt; &lt;code&gt;request.FILES&lt;/code&gt; は&lt;/a&gt;リクエストメソッドであった場合にのみデータが含まれています &lt;code&gt;POST&lt;/code&gt; と &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; の要求を掲示属性持ち &lt;code&gt;enctype=&quot;multipart/form-data&quot;&lt;/code&gt; 。それ以外の場合、 &lt;code&gt;request.FILES&lt;/code&gt; は空になります。</target>
        </trans-unit>
        <trans-unit id="d0796c678d8887176b4064744ab4bf371a4b7ac7" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;../../ref/request-response#django.http.HttpRequest.FILES&quot;&gt;&lt;code&gt;request.FILES&lt;/code&gt;&lt;/a&gt; will only contain data if the request method was &lt;code&gt;POST&lt;/code&gt;, at least one file field was actually posted, and the &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; that posted the request has the attribute &lt;code&gt;enctype=&quot;multipart/form-data&quot;&lt;/code&gt;. Otherwise, &lt;code&gt;request.FILES&lt;/code&gt; will be empty.</source>
          <target state="translated">Note that &lt;a href=&quot;../../ref/request-response#django.http.HttpRequest.FILES&quot;&gt; &lt;code&gt;request.FILES&lt;/code&gt; &lt;/a&gt; will only contain data if the request method was &lt;code&gt;POST&lt;/code&gt; , at least one file field was actually posted, and the &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; that posted the request has the attribute &lt;code&gt;enctype=&quot;multipart/form-data&quot;&lt;/code&gt; . Otherwise, &lt;code&gt;request.FILES&lt;/code&gt; will be empty.</target>
        </trans-unit>
        <trans-unit id="114ec4ae4f7b3f1c9ee023cbb2f4ae83341a7264" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;../exceptions#django.core.exceptions.ObjectDoesNotExist&quot;&gt;&lt;code&gt;django.core.exceptions.ObjectDoesNotExist&lt;/code&gt;&lt;/a&gt;, which is the base class for all Django database API &lt;code&gt;DoesNotExist&lt;/code&gt; exceptions, has &lt;code&gt;silent_variable_failure = True&lt;/code&gt;. So if you&amp;rsquo;re using Django templates with Django model objects, any &lt;code&gt;DoesNotExist&lt;/code&gt; exception will fail silently.</source>
          <target state="translated">ことを注意&lt;a href=&quot;../exceptions#django.core.exceptions.ObjectDoesNotExist&quot;&gt; &lt;code&gt;django.core.exceptions.ObjectDoesNotExist&lt;/code&gt; &lt;/a&gt;すべてのDjangoのデータベースAPIの基本クラスです、 &lt;code&gt;DoesNotExist&lt;/code&gt; 例外は、持っている &lt;code&gt;silent_variable_failure = True&lt;/code&gt; 。そのため、DjangoモデルオブジェクトでDjangoテンプレートを使用している場合、 &lt;code&gt;DoesNotExist&lt;/code&gt; 例外は警告なしに失敗します。</target>
        </trans-unit>
        <trans-unit id="12f148b2871d0ee0ac320bfab0d6043b1e56d19b" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;django-admin#django-admin-runserver&quot;&gt;&lt;code&gt;runserver&lt;/code&gt;&lt;/a&gt; strips all headers with underscores in the name, so you won&amp;rsquo;t see them in &lt;code&gt;META&lt;/code&gt;. This prevents header-spoofing based on ambiguity between underscores and dashes both being normalizing to underscores in WSGI environment variables. It matches the behavior of Web servers like Nginx and Apache 2.4+.</source>
          <target state="translated">その注意&lt;a href=&quot;django-admin#django-admin-runserver&quot;&gt; &lt;code&gt;runserver&lt;/code&gt; &lt;/a&gt;あなたがそれらを見ることはありませんので、名前にアンダースコアを持つすべてのヘッダを取り除き &lt;code&gt;META&lt;/code&gt; 。これにより、アンダースコアとダッシュの間のあいまいさに基づくヘッダースプーフィングが両方ともWSGI環境変数でアンダースコアに正規化されなくなります。NginxやApache 2.4以降などのWebサーバーの動作と一致します。</target>
        </trans-unit>
        <trans-unit id="51299edb450e554bd78f74b0809db32387011d1a" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;fields#django.forms.MultiValueField&quot;&gt;&lt;code&gt;MultiValueField&lt;/code&gt;&lt;/a&gt; has a complementary method &lt;a href=&quot;fields#django.forms.MultiValueField.compress&quot;&gt;&lt;code&gt;compress()&lt;/code&gt;&lt;/a&gt; with the opposite responsibility - to combine cleaned values of all member fields into one.</source>
          <target state="translated">&lt;a href=&quot;fields#django.forms.MultiValueField&quot;&gt; &lt;code&gt;MultiValueField&lt;/code&gt; に&lt;/a&gt;は、すべてのメンバーフィールドのクリーンアップされた値を1つに結合するという、反対の責任を持つ補足的なメソッド&lt;a href=&quot;fields#django.forms.MultiValueField.compress&quot;&gt; &lt;code&gt;compress()&lt;/code&gt; &lt;/a&gt;があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="174125b977abe383ebe027c7283e688f70171a40" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;Form.add_error()&lt;/code&gt; automatically removes the relevant field from &lt;code&gt;cleaned_data&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Form.add_error()&lt;/code&gt; は、関連するフィールドを &lt;code&gt;cleaned_data&lt;/code&gt; から削除することに注意してください。</target>
        </trans-unit>
        <trans-unit id="4591c68c233751182879e8ea4c7ab5f0a044d31a" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;add()&lt;/code&gt;, &lt;code&gt;create()&lt;/code&gt;, &lt;code&gt;remove()&lt;/code&gt;, &lt;code&gt;clear()&lt;/code&gt;, and &lt;code&gt;set()&lt;/code&gt; all apply database changes immediately for all types of related fields. In other words, there is no need to call &lt;code&gt;save()&lt;/code&gt; on either end of the relationship.</source>
          <target state="translated">&lt;code&gt;add()&lt;/code&gt; 、 &lt;code&gt;create()&lt;/code&gt; 、 &lt;code&gt;remove()&lt;/code&gt; 、 &lt;code&gt;clear()&lt;/code&gt; 、および &lt;code&gt;set()&lt;/code&gt; はすべて、関連するすべてのタイプのフィールドにデータベースの変更をすぐに適用することに注意してください。つまり、関係の両端で &lt;code&gt;save()&lt;/code&gt; を呼び出す必要はありません。</target>
        </trans-unit>
        <trans-unit id="90ef74f6371e10a6782d0c647e7ce73f1b8c10a7" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;django.conf.settings&lt;/code&gt; isn&amp;rsquo;t a module &amp;ndash; it&amp;rsquo;s an object. So importing individual settings is not possible:</source>
          <target state="translated">その注意 &lt;code&gt;django.conf.settings&lt;/code&gt; はモジュールではありません-それはオブジェクトです。したがって、個別の設定をインポートすることはできません。</target>
        </trans-unit>
        <trans-unit id="4d70a240827ed6a63d96ee2feb5521ee6e8c53d8" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;dumpdata&lt;/code&gt; uses the default manager on the model for selecting the records to dump. If you&amp;rsquo;re using a &lt;a href=&quot;../topics/db/managers#custom-managers&quot;&gt;custom manager&lt;/a&gt; as the default manager and it filters some of the available records, not all of the objects will be dumped.</source>
          <target state="translated">&lt;code&gt;dumpdata&lt;/code&gt; は、ダンプするレコードを選択するためにモデルのデフォルトのマネージャーを使用することに注意してください。デフォルトの&lt;a href=&quot;../topics/db/managers#custom-managers&quot;&gt;マネージャー&lt;/a&gt;としてカスタムマネージャーを使用していて、使用可能なレコードの一部をフィルター処理する場合、すべてのオブジェクトがダンプされるわけではありません。</target>
        </trans-unit>
        <trans-unit id="617474170b52d9ea43a8f37beddaa5594df33958" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;earliest()&lt;/code&gt; and &lt;code&gt;latest()&lt;/code&gt; exist purely for convenience and readability.</source>
          <target state="translated">&lt;code&gt;earliest()&lt;/code&gt; および &lt;code&gt;latest()&lt;/code&gt; は、純粋に利便性と読みやすさのために存在することに注意してください。</target>
        </trans-unit>
        <trans-unit id="60bc6baf0f131a6ccb397c320fca68e1cf2cb32d" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;first()&lt;/code&gt; is a convenience method, the following code sample is equivalent to the above example:</source>
          <target state="translated">なお &lt;code&gt;first()&lt;/code&gt; 便利な方法は、以下のサンプルコードは、上記の例と等価です。</target>
        </trans-unit>
        <trans-unit id="2477105d4945a87d3531b00f61d9dfbbde81b7a1" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;full_clean()&lt;/code&gt; will &lt;em&gt;not&lt;/em&gt; be called automatically when you call your model&amp;rsquo;s &lt;a href=&quot;#django.db.models.Model.save&quot;&gt;&lt;code&gt;save()&lt;/code&gt;&lt;/a&gt; method. You&amp;rsquo;ll need to call it manually when you want to run one-step model validation for your own manually created models. For example:</source>
          <target state="translated">モデルの&lt;a href=&quot;#django.db.models.Model.save&quot;&gt; &lt;code&gt;save()&lt;/code&gt; &lt;/a&gt;メソッドを呼び出しても、 &lt;code&gt;full_clean()&lt;/code&gt; は自動的には呼び出され&lt;em&gt;ない&lt;/em&gt;ことに注意してください。手動で作成した独自のモデルのワンステップモデル検証を実行する場合は、手動で呼び出す必要があります。例えば：</target>
        </trans-unit>
        <trans-unit id="b60eaaa655b6061f0ff964b2c7c786fae5248e6d" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;localize&lt;/code&gt; is a pytz extension to the &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.tzinfo&quot;&gt;&lt;code&gt;tzinfo&lt;/code&gt;&lt;/a&gt; API. Also, you may want to catch &lt;code&gt;pytz.InvalidTimeError&lt;/code&gt;. The documentation of pytz contains &lt;a href=&quot;http://pytz.sourceforge.net/#example-usage&quot;&gt;more examples&lt;/a&gt;. You should review it before attempting to manipulate aware datetimes.</source>
          <target state="translated">&lt;code&gt;localize&lt;/code&gt; は&lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.tzinfo&quot;&gt; &lt;code&gt;tzinfo&lt;/code&gt; &lt;/a&gt; APIのpytz拡張であることに注意してください。また、 &lt;code&gt;pytz.InvalidTimeError&lt;/code&gt; をキャッチすることもできます。pytzのドキュメントには、&lt;a href=&quot;http://pytz.sourceforge.net/#example-usage&quot;&gt;より多くの例&lt;/a&gt;が含まれています。認識している日時を操作する前に確認する必要があります。</target>
        </trans-unit>
        <trans-unit id="fcff2e0ec8bf12bd9fd1d74a3726364370255148" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;output_field&lt;/code&gt; is only required when Django is unable to determine what field type the result should be. Complex expressions that mix field types should define the desired &lt;code&gt;output_field&lt;/code&gt;. For example, adding an &lt;code&gt;IntegerField()&lt;/code&gt; and a &lt;code&gt;FloatField()&lt;/code&gt; together should probably have &lt;code&gt;output_field=FloatField()&lt;/code&gt; defined.</source>
          <target state="translated">Djangoが結果のフィールドタイプを判別できない場合にのみ、 &lt;code&gt;output_field&lt;/code&gt; が必要になることに注意してください。フィールドタイプが混在する複雑な式では、目的の &lt;code&gt;output_field&lt;/code&gt; を定義する必要があります。たとえば、 &lt;code&gt;IntegerField()&lt;/code&gt; と &lt;code&gt;FloatField()&lt;/code&gt; を一緒に追加すると、おそらく &lt;code&gt;output_field=FloatField()&lt;/code&gt; が定義されます。</target>
        </trans-unit>
        <trans-unit id="3e0000d6c434afcf6f1baf1d4b21199b5b33c66a" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;page&lt;/code&gt;&lt;em&gt;must&lt;/em&gt; be either a valid page number or the value &lt;code&gt;last&lt;/code&gt;; any other value for &lt;code&gt;page&lt;/code&gt; will result in a 404 error.</source>
          <target state="translated">&lt;code&gt;page&lt;/code&gt; &lt;em&gt;は&lt;/em&gt;、有効なページ番号または値 &lt;code&gt;last&lt;/code&gt; で&lt;em&gt;なければならない&lt;/em&gt;ことに注意してください。 &lt;code&gt;page&lt;/code&gt; その他の値は404エラーになります。</target>
        </trans-unit>
        <trans-unit id="4fa87508d78ed938ea3b53c04e6e8bac6e4c0d53" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;pnt&lt;/code&gt; may also be constructed with EWKT, an &amp;ldquo;extended&amp;rdquo; form of WKT that includes the SRID:</source>
          <target state="translated">そのノート &lt;code&gt;pnt&lt;/code&gt; またEWKT、SRIDを含むWKTの「拡張」形式で構成してもよいです。</target>
        </trans-unit>
        <trans-unit id="69afc1bd88ec7db55e0a8541d45277ff4bd45240" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;render()&lt;/code&gt; returns the empty string. &lt;code&gt;render()&lt;/code&gt; should always return string output. If all the template tag does is set a variable, &lt;code&gt;render()&lt;/code&gt; should return the empty string.</source>
          <target state="translated">&lt;code&gt;render()&lt;/code&gt; は空の文字列を返すことに注意してください。 &lt;code&gt;render()&lt;/code&gt; は常に文字列出力を返す必要があります。すべてのテンプレートタグが変数を設定する場合、 &lt;code&gt;render()&lt;/code&gt; は空の文字列を返します。</target>
        </trans-unit>
        <trans-unit id="eeadeb6021da41a361ee20d5764d2103bff4b20d" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;sqlmigrate&lt;/code&gt; doesn&amp;rsquo;t colorize its output.</source>
          <target state="translated">&lt;code&gt;sqlmigrate&lt;/code&gt; は出力を色付けしないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="f4ef6ae7ec0603ef3df71659f00737594af30ccc" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;striptags&lt;/code&gt; doesn&amp;rsquo;t give any guarantee about its output being HTML safe, particularly with non valid HTML input. So &lt;strong&gt;NEVER&lt;/strong&gt; apply the &lt;code&gt;safe&lt;/code&gt; filter to a &lt;code&gt;striptags&lt;/code&gt; output. If you are looking for something more robust, you can use the &lt;code&gt;bleach&lt;/code&gt; Python library, notably its &lt;a href=&quot;https://bleach.readthedocs.io/en/latest/clean.html&quot;&gt;clean&lt;/a&gt; method.</source>
          <target state="translated">&lt;code&gt;striptags&lt;/code&gt; は、出力がHTMLセーフであること、特に無効なHTML入力の場合は保証されないことに注意してください。だから、&lt;strong&gt;決して&lt;/strong&gt;適用されない &lt;code&gt;safe&lt;/code&gt; にフィルタを &lt;code&gt;striptags&lt;/code&gt; 出力。より堅牢なものを探している場合は、 &lt;code&gt;bleach&lt;/code&gt; Pythonライブラリ、特にその&lt;a href=&quot;https://bleach.readthedocs.io/en/latest/clean.html&quot;&gt;クリーンな&lt;/a&gt;メソッドを使用できます。</target>
        </trans-unit>
        <trans-unit id="e6c1a0bf2d18380514c058c2103f2660189ecd36" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;{% regroup %}&lt;/code&gt; does not order its input! Our example relies on the fact that the &lt;code&gt;cities&lt;/code&gt; list was ordered by &lt;code&gt;country&lt;/code&gt; in the first place. If the &lt;code&gt;cities&lt;/code&gt; list did &lt;em&gt;not&lt;/em&gt; order its members by &lt;code&gt;country&lt;/code&gt;, the regrouping would naively display more than one group for a single country. For example, say the &lt;code&gt;cities&lt;/code&gt; list was set to this (note that the countries are not grouped together):</source>
          <target state="translated">&lt;code&gt;{% regroup %}&lt;/code&gt; は入力を順序付けしないことに注意してください！私たちの例は、 &lt;code&gt;cities&lt;/code&gt; リストがそもそも &lt;code&gt;country&lt;/code&gt; に並べられているという事実に依存しています。 &lt;code&gt;cities&lt;/code&gt; リストがメンバーを &lt;code&gt;country&lt;/code&gt; 並べ替えてい&lt;em&gt;ない&lt;/em&gt;場合、再グループ化では、1つの国の複数のグループが単純に表示されます。たとえば、 &lt;code&gt;cities&lt;/code&gt; リストが次のように設定されているとします（国はグループ化されていないことに注意してください）。</target>
        </trans-unit>
        <trans-unit id="555959baa50f98a7ff375b125440d82908185be5" translate="yes" xml:space="preserve">
          <source>Note that Django also provides &lt;a href=&quot;../ref/request-response#django.http.HttpRequest.GET&quot;&gt;&lt;code&gt;request.GET&lt;/code&gt;&lt;/a&gt; for accessing GET data in the same way &amp;ndash; but we&amp;rsquo;re explicitly using &lt;a href=&quot;../ref/request-response#django.http.HttpRequest.POST&quot;&gt;&lt;code&gt;request.POST&lt;/code&gt;&lt;/a&gt; in our code, to ensure that data is only altered via a POST call.</source>
          <target state="translated">Djangoも同じ方法でGETデータにアクセスするための&lt;a href=&quot;../ref/request-response#django.http.HttpRequest.GET&quot;&gt; &lt;code&gt;request.GET&lt;/code&gt; &lt;/a&gt;を提供していることに注意してください。ただし、コードで&lt;a href=&quot;../ref/request-response#django.http.HttpRequest.POST&quot;&gt; &lt;code&gt;request.POST&lt;/code&gt; &lt;/a&gt;を明示的に使用して、POST呼び出しによってのみデータが変更されるようにしています。</target>
        </trans-unit>
        <trans-unit id="5a86bd35e7d0371b683012acf70b7110506f8792" translate="yes" xml:space="preserve">
          <source>Note that a callable (with the parentheses omitted) is passed to &lt;code&gt;default&lt;/code&gt;, not an instance of &lt;code&gt;UUID&lt;/code&gt;.</source>
          <target state="translated">（括弧を省略した）呼び出し可能オブジェクトは、 &lt;code&gt;UUID&lt;/code&gt; のインスタンスではなく &lt;code&gt;default&lt;/code&gt; に渡されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="769f71352d570fcd1ad93b9334853d28dc71b571" translate="yes" xml:space="preserve">
          <source>Note that a settings file should &lt;em&gt;not&lt;/em&gt; import from &lt;code&gt;global_settings&lt;/code&gt;, because that&amp;rsquo;s redundant.</source>
          <target state="translated">設定ファイルは &lt;code&gt;global_settings&lt;/code&gt; からインポートし&lt;em&gt;ないで&lt;/em&gt;ください。冗長であるためです。</target>
        </trans-unit>
        <trans-unit id="91d33e115058c62ed3b06406e2b16a18f7403773" translate="yes" xml:space="preserve">
          <source>Note that all subsequent PDF-generation methods are called on the PDF object (in this case, &lt;code&gt;p&lt;/code&gt;) &amp;ndash; not on &lt;code&gt;buffer&lt;/code&gt;.</source>
          <target state="translated">以降のすべてのPDF生成メソッドは、 &lt;code&gt;buffer&lt;/code&gt; はなくPDFオブジェクト（この場合は &lt;code&gt;p&lt;/code&gt; ）で呼び出されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="e2720462e729bf12c9dc1637761930abaf6e5302" translate="yes" xml:space="preserve">
          <source>Note that although this function uses &lt;code&gt;str.format()&lt;/code&gt; to do the interpolation, some of the formatting options provided by &lt;code&gt;str.format()&lt;/code&gt; (e.g. number formatting) will not work, since all arguments are passed through &lt;a href=&quot;#django.utils.html.conditional_escape&quot;&gt;&lt;code&gt;conditional_escape()&lt;/code&gt;&lt;/a&gt; which (ultimately) calls &lt;a href=&quot;#django.utils.encoding.force_str&quot;&gt;&lt;code&gt;force_str()&lt;/code&gt;&lt;/a&gt; on the values.</source>
          <target state="translated">この関数は補間を行うために &lt;code&gt;str.format()&lt;/code&gt; を使用しますが、すべての引数は（最終的に）&lt;a href=&quot;#django.utils.html.conditional_escape&quot;&gt; &lt;code&gt;conditional_escape()&lt;/code&gt; &lt;/a&gt;を介して渡されるため、 &lt;code&gt;str.format()&lt;/code&gt; によって提供される一部のフォーマットオプション（たとえば、数値のフォーマット）は機能しません。値に対して&lt;a href=&quot;#django.utils.encoding.force_str&quot;&gt; &lt;code&gt;force_str()&lt;/code&gt; &lt;/a&gt;を呼び出します。</target>
        </trans-unit>
        <trans-unit id="1655d49d10104c3e29e68482b9119e277e90f07d" translate="yes" xml:space="preserve">
          <source>Note that an even more flexible (but more heavyweight) way of doing this would be to use Django&amp;rsquo;s template system. Assuming Lawrence.com and LJWorld.com have different template directories (&lt;a href=&quot;../settings#std:setting-TEMPLATES-DIRS&quot;&gt;&lt;code&gt;DIRS&lt;/code&gt;&lt;/a&gt;), you could farm out to the template system like so:</source>
          <target state="translated">これを行うためのさらに柔軟な（ただし、より重い）方法は、Djangoのテンプレートシステムを使用することです。Lawrence.comとLJWorld.comが異なるテンプレートディレクトリ（&lt;a href=&quot;../settings#std:setting-TEMPLATES-DIRS&quot;&gt; &lt;code&gt;DIRS&lt;/code&gt; &lt;/a&gt;）を持っていると仮定すると、次のようにテンプレートシステムに移行できます。</target>
        </trans-unit>
        <trans-unit id="a03be98ba22733726f31548200c2a1eb13fd38d0" translate="yes" xml:space="preserve">
          <source>Note that any data set during the anonymous session is retained in the session after a user logs in.</source>
          <target state="translated">匿名セッション中に設定されたデータは、ユーザーがログインした後もセッション内に保持されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="5e76af3cfee25aa8aedca5c9cce37758a092a5a5" translate="yes" xml:space="preserve">
          <source>Note that any errors raised by your &lt;a href=&quot;api#django.forms.Form.clean&quot;&gt;&lt;code&gt;Form.clean()&lt;/code&gt;&lt;/a&gt; override will not be associated with any field in particular. They go into a special &amp;ldquo;field&amp;rdquo; (called &lt;code&gt;__all__&lt;/code&gt;), which you can access via the &lt;a href=&quot;api#django.forms.Form.non_field_errors&quot;&gt;&lt;code&gt;non_field_errors()&lt;/code&gt;&lt;/a&gt; method if you need to. If you want to attach errors to a specific field in the form, you need to call &lt;a href=&quot;api#django.forms.Form.add_error&quot;&gt;&lt;code&gt;add_error()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;api#django.forms.Form.clean&quot;&gt; &lt;code&gt;Form.clean()&lt;/code&gt; &lt;/a&gt;オーバーライドによって発生したエラーは、特にどのフィールドにも関連付けられないことに注意してください。それらは特別な「フィールド」（ &lt;code&gt;__all__&lt;/code&gt; と呼ばれます）に入り、必要に応じて&lt;a href=&quot;api#django.forms.Form.non_field_errors&quot;&gt; &lt;code&gt;non_field_errors()&lt;/code&gt; &lt;/a&gt;メソッドを介してアクセスできます。フォームの特定のフィールドにエラーを添付する場合は、&lt;a href=&quot;api#django.forms.Form.add_error&quot;&gt; &lt;code&gt;add_error()&lt;/code&gt; &lt;/a&gt;を呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="bb7f74b1561095f41f3d18b56dd6375c9ec3906f" translate="yes" xml:space="preserve">
          <source>Note that any of Django&amp;rsquo;s default admin templates can be overridden. To override a template, do the same thing you did with &lt;code&gt;base_site.html&lt;/code&gt; &amp;ndash; copy it from the default directory into your custom directory, and make changes.</source>
          <target state="translated">Djangoのデフォルトの管理テンプレートはどれも上書きできることに注意してください。テンプレートを上書きするには、 &lt;code&gt;base_site.html&lt;/code&gt; で行ったのと同じことを行います&amp;ndash;デフォルトのディレクトリからカスタムディレクトリにコピーし、変更を加えます。</target>
        </trans-unit>
        <trans-unit id="239df39fbba56c17e5c95caf2ecf410c00f83202" translate="yes" xml:space="preserve">
          <source>Note that any text-based field &amp;ndash; such as &lt;code&gt;CharField&lt;/code&gt; or &lt;code&gt;EmailField&lt;/code&gt; &amp;ndash; always cleans the input into a string. We&amp;rsquo;ll cover the encoding implications later in this document.</source>
          <target state="translated">&lt;code&gt;CharField&lt;/code&gt; や &lt;code&gt;EmailField&lt;/code&gt; などのテキストベースのフィールドは常に入力を文字列にクリーンアップすることに注意してください。このドキュメントの後半で、エンコーディングの意味について説明します。</target>
        </trans-unit>
        <trans-unit id="7bedfd96029424831aed4722f0eb96eed865f31a" translate="yes" xml:space="preserve">
          <source>Note that as the method is now a property, in Python code it will need to be accessed appropriately:</source>
          <target state="translated">メソッドがプロパティになったので、Pythonのコードでは適切にアクセスする必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="fe32d6c5f76eb9f75c146ee626da625540f82c24" translate="yes" xml:space="preserve">
          <source>Note that calling &lt;code&gt;django.setup()&lt;/code&gt; is only necessary if your code is truly standalone. When invoked by your Web server, or through &lt;a href=&quot;../ref/django-admin&quot;&gt;django-admin&lt;/a&gt;, Django will handle this for you.</source>
          <target state="translated">&lt;code&gt;django.setup()&lt;/code&gt; の呼び出しは、コードが本当にスタンドアロンの場合にのみ必要であることに注意してください。Webサーバーによって、または&lt;a href=&quot;../ref/django-admin&quot;&gt;django-admin&lt;/a&gt;を介して呼び出されると、Djangoがこれを処理します。</target>
        </trans-unit>
        <trans-unit id="3bc381cc771bad16450ca029b7c0214227351136" translate="yes" xml:space="preserve">
          <source>Note that choices can be any sequence object &amp;ndash; not necessarily a list or tuple. This lets you construct choices dynamically. But if you find yourself hacking &lt;a href=&quot;#django.db.models.Field.choices&quot;&gt;&lt;code&gt;choices&lt;/code&gt;&lt;/a&gt; to be dynamic, you&amp;rsquo;re probably better off using a proper database table with a &lt;a href=&quot;#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt;. &lt;a href=&quot;#django.db.models.Field.choices&quot;&gt;&lt;code&gt;choices&lt;/code&gt;&lt;/a&gt; is meant for static data that doesn&amp;rsquo;t change much, if ever.</source>
          <target state="translated">選択肢は任意のシーケンスオブジェクトである可能性があることに注意してください。必ずしもリストやタプルである必要はありません。これにより、選択肢を動的に構築できます。しかし、ハッキングの&lt;a href=&quot;#django.db.models.Field.choices&quot;&gt; &lt;code&gt;choices&lt;/code&gt; &lt;/a&gt;が動的であることに気付いた場合は、&lt;a href=&quot;#django.db.models.ForeignKey&quot;&gt; &lt;code&gt;ForeignKey&lt;/code&gt; で&lt;/a&gt;適切なデータベーステーブルを使用する方が良いでしょう。&lt;a href=&quot;#django.db.models.Field.choices&quot;&gt; &lt;code&gt;choices&lt;/code&gt; &lt;/a&gt;は、たとえ変化してもそれほど変化しない静的データ用です。</target>
        </trans-unit>
        <trans-unit id="23311557d1c1b4a3bc91b67a7dcbb2a15f706caf" translate="yes" xml:space="preserve">
          <source>Note that command options that take no arguments are passed as keywords with &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt;, as you can see with the &lt;code&gt;interactive&lt;/code&gt; option above.</source>
          <target state="translated">上記の &lt;code&gt;interactive&lt;/code&gt; オプションで確認できるように、引数を取らないコマンドオプションは &lt;code&gt;True&lt;/code&gt; または &lt;code&gt;False&lt;/code&gt; のキーワードとして渡されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="771c36984deec4007d5e353a2afde4a1288b3d14" translate="yes" xml:space="preserve">
          <source>Note that each form field has an ID attribute set to &lt;code&gt;id_&amp;lt;field-name&amp;gt;&lt;/code&gt;, which is referenced by the accompanying label tag. This is important in ensuring that forms are accessible to assistive technology such as screen reader software. You can also &lt;a href=&quot;../../ref/forms/api#ref-forms-api-configuring-label&quot;&gt;customize the way in which labels and ids are generated&lt;/a&gt;.</source>
          <target state="translated">各フォームフィールドのID属性は &lt;code&gt;id_&amp;lt;field-name&amp;gt;&lt;/code&gt; に設定されていることに注意してください。これは、付随するラベルタグによって参照されます。これは、スクリーンリーダーソフトウェアなどの支援技術がフォームにアクセスできるようにするために重要です。&lt;a href=&quot;../../ref/forms/api#ref-forms-api-configuring-label&quot;&gt;ラベルとIDの生成方法をカスタマイズ&lt;/a&gt;することもできます。</target>
        </trans-unit>
        <trans-unit id="3bdfccd500eb934555bb43b9a29d41da73c40d02" translate="yes" xml:space="preserve">
          <source>Note that each process will have its own private cache instance, which means no cross-process caching is possible. This also means the local memory cache isn&amp;rsquo;t particularly memory-efficient, so it&amp;rsquo;s probably not a good choice for production environments. It&amp;rsquo;s nice for development.</source>
          <target state="translated">Note that each process will have its own private cache instance, which means no cross-process caching is possible. This also means the local memory cache isn&amp;rsquo;t particularly memory-efficient, so it&amp;rsquo;s probably not a good choice for production environments. It&amp;rsquo;s nice for development.</target>
        </trans-unit>
        <trans-unit id="1f0445bbbacae2bc87d1553017a414c56d8a13c4" translate="yes" xml:space="preserve">
          <source>Note that each process will have its own private cache instance, which means no cross-process caching is possible. This obviously also means the local memory cache isn&amp;rsquo;t particularly memory-efficient, so it&amp;rsquo;s probably not a good choice for production environments. It&amp;rsquo;s nice for development.</source>
          <target state="translated">各プロセスには独自のプライベートキャッシュインスタンスがあることに注意してください。つまり、プロセス間キャッシュは不可能です。これは明らかに、ローカルメモリキャッシュは特にメモリ効率が良いわけではないことを意味します。そのため、実稼働環境にはあまり適していません。開発にはうってつけです。</target>
        </trans-unit>
        <trans-unit id="a2eeff486edfad4d9520b6f22313f2e3567d2e11" translate="yes" xml:space="preserve">
          <source>Note that extra options will &lt;em&gt;always&lt;/em&gt; be passed to &lt;em&gt;every&lt;/em&gt; line in the included URLconf, regardless of whether the line&amp;rsquo;s view actually accepts those options as valid. For this reason, this technique is only useful if you&amp;rsquo;re certain that every view in the included URLconf accepts the extra options you&amp;rsquo;re passing.</source>
          <target state="translated">追加のオプションは、ラインのビューが実際にそれらのオプションを有効として受け入れるかどうかに関係なく、インクルードされたURLconfの&lt;em&gt;すべての&lt;/em&gt;ラインに&lt;em&gt;常に&lt;/em&gt;渡されることに注意してください。このため、この手法が役立つのは、含まれているURLconfのすべてのビューが、渡す追加のオプションを確実に受け入れる場合のみです。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="92c628e1fbd6a9010f3d0db034ba40cb41449dee" translate="yes" xml:space="preserve">
          <source>Note that having the view instance in the template context may expose potentially hazardous methods to template authors. To prevent methods like this from being called in the template, set &lt;code&gt;alters_data=True&lt;/code&gt; on those methods. For more information, read the documentation on &lt;a href=&quot;../templates/api#alters-data-description&quot;&gt;rendering a template context&lt;/a&gt;.</source>
          <target state="translated">テンプレートコンテキストにビューインスタンスがあると、潜在的に危険なメソッドがテンプレートの作成者に公開される可能性があることに注意してください。このようなメソッドがテンプレートで呼び出されないようにするには、それらのメソッドに &lt;code&gt;alters_data=True&lt;/code&gt; を設定します。詳細については&lt;a href=&quot;../templates/api#alters-data-description&quot;&gt;、テンプレートコンテキストのレンダリング&lt;/a&gt;に関するドキュメントをご覧ください。</target>
        </trans-unit>
        <trans-unit id="98f6de66c762486638954c88d910ab00b17debe3" translate="yes" xml:space="preserve">
          <source>Note that if &lt;a href=&quot;#std:setting-USE_L10N&quot;&gt;&lt;code&gt;USE_L10N&lt;/code&gt;&lt;/a&gt; is set to &lt;code&gt;True&lt;/code&gt;, then the corresponding locale-dictated format has higher precedence and will be applied.</source>
          <target state="translated">&lt;a href=&quot;#std:setting-USE_L10N&quot;&gt; &lt;code&gt;USE_L10N&lt;/code&gt; &lt;/a&gt;が &lt;code&gt;True&lt;/code&gt; に設定されている場合、対応するロケール指定の形式が優先され、適用されます。</target>
        </trans-unit>
        <trans-unit id="50d31d0e0ebd30e972979684ec82c5fb17e9796a" translate="yes" xml:space="preserve">
          <source>Note that if &lt;a href=&quot;#std:setting-USE_L10N&quot;&gt;&lt;code&gt;USE_L10N&lt;/code&gt;&lt;/a&gt; is set to &lt;code&gt;True&lt;/code&gt;, then the locale-dictated format has higher precedence and will be applied instead.</source>
          <target state="translated">&lt;a href=&quot;#std:setting-USE_L10N&quot;&gt; &lt;code&gt;USE_L10N&lt;/code&gt; &lt;/a&gt;が &lt;code&gt;True&lt;/code&gt; に設定されている場合、ロケール指定のフォーマットの方が優先され、代わりに適用されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="49e296c8c84c9dd47aab0634b92f9ddef9e72e21" translate="yes" xml:space="preserve">
          <source>Note that if a &lt;code&gt;ModelChoiceField&lt;/code&gt; is required and has a default initial value, no empty choice is created (regardless of the value of &lt;code&gt;empty_label&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;ModelChoiceField&lt;/code&gt; が必須であり、デフォルトの初期値がある場合、（ &lt;code&gt;empty_label&lt;/code&gt; の値に関係なく）空の選択肢は作成されないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="a602110fb64a1dd4cb469f056ba8051460109907" translate="yes" xml:space="preserve">
          <source>Note that if an empty string is given, the default value will &lt;em&gt;not&lt;/em&gt; be used. Use the &lt;a href=&quot;#std:templatefilter-default&quot;&gt;&lt;code&gt;default&lt;/code&gt;&lt;/a&gt; filter if you want to fallback for empty strings.</source>
          <target state="translated">空の文字列が指定された場合、デフォルト値は使用され&lt;em&gt;ない&lt;/em&gt;ことに注意してください。空の文字列をフォールバックする場合は、&lt;a href=&quot;#std:templatefilter-default&quot;&gt; &lt;code&gt;default&lt;/code&gt; &lt;/a&gt;フィルターを使用します。</target>
        </trans-unit>
        <trans-unit id="80730ee1d592ce07bf82235a3404e06b9d3abf66" translate="yes" xml:space="preserve">
          <source>Note that if the URL you&amp;rsquo;re reversing doesn&amp;rsquo;t exist, you&amp;rsquo;ll get an &lt;a href=&quot;../exceptions#django.urls.NoReverseMatch&quot;&gt;&lt;code&gt;NoReverseMatch&lt;/code&gt;&lt;/a&gt; exception raised, which will cause your site to display an error page.</source>
          <target state="translated">元に&lt;a href=&quot;../exceptions#django.urls.NoReverseMatch&quot;&gt; &lt;code&gt;NoReverseMatch&lt;/code&gt; &lt;/a&gt; URLが存在しない場合、NoReverseMatch例外が発生し、サイトにエラーページが表示されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="3e45a85a7dcecfdfcfb4389a347188b10434abde" translate="yes" xml:space="preserve">
          <source>Note that if the form &lt;a href=&quot;#validation-on-modelform&quot;&gt;hasn&amp;rsquo;t been validated&lt;/a&gt;, calling &lt;code&gt;save()&lt;/code&gt; will do so by checking &lt;code&gt;form.errors&lt;/code&gt;. A &lt;code&gt;ValueError&lt;/code&gt; will be raised if the data in the form doesn&amp;rsquo;t validate &amp;ndash; i.e., if &lt;code&gt;form.errors&lt;/code&gt; evaluates to &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">フォーム&lt;a href=&quot;#validation-on-modelform&quot;&gt;が検証されていない&lt;/a&gt;場合、 &lt;code&gt;save()&lt;/code&gt; を呼び出すと &lt;code&gt;form.errors&lt;/code&gt; がチェックされます。A &lt;code&gt;ValueError&lt;/code&gt; すなわち、場合-フォーム内のデータが検証されない場合に発生します &lt;code&gt;form.errors&lt;/code&gt; のに評価 &lt;code&gt;True&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="61f3ec02092015ed9d1f89e12937af6bb0ee587e" translate="yes" xml:space="preserve">
          <source>Note that if the tests are run on a database with no transaction support (for instance, MySQL with the MyISAM engine), &lt;code&gt;setUpTestData()&lt;/code&gt; will be called before each test, negating the speed benefits.</source>
          <target state="translated">トランザクションがサポートされていないデータベース（MyISAMエンジンを備えたMySQLなど）でテストを実行した場合、各テストの前に &lt;code&gt;setUpTestData()&lt;/code&gt; が呼び出されるため、速度のメリットはありません。</target>
        </trans-unit>
        <trans-unit id="a758f5f8e960e50154e5596b9c6aefae0ab85207" translate="yes" xml:space="preserve">
          <source>Note that if two fixtures with the same name but different fixture type are discovered (for example, if &lt;code&gt;mydata.json&lt;/code&gt; and &lt;code&gt;mydata.xml.gz&lt;/code&gt; were found in the same fixture directory), fixture installation will be aborted, and any data installed in the call to &lt;code&gt;loaddata&lt;/code&gt; will be removed from the database.</source>
          <target state="translated">名前が同じで器具タイプが異なる2つの器具が検出された場合（たとえば、 &lt;code&gt;mydata.json&lt;/code&gt; と &lt;code&gt;mydata.xml.gz&lt;/code&gt; が同じ器具ディレクトリで見つかった場合）、器具のインストールは中止され、 &lt;code&gt;loaddata&lt;/code&gt; の呼び出しはデータベースから削除されます。</target>
        </trans-unit>
        <trans-unit id="ac49bd48639bcacfaff102892d44aa3595f4440b" translate="yes" xml:space="preserve">
          <source>Note that if you don&amp;rsquo;t specify the &lt;code&gt;login_url&lt;/code&gt; parameter, you&amp;rsquo;ll need to ensure that the &lt;a href=&quot;../../ref/settings#std:setting-LOGIN_URL&quot;&gt;&lt;code&gt;settings.LOGIN_URL&lt;/code&gt;&lt;/a&gt; and your login view are properly associated. For example, using the defaults, add the following lines to your URLconf:</source>
          <target state="translated">&lt;code&gt;login_url&lt;/code&gt; パラメーターを指定しない場合、&lt;a href=&quot;../../ref/settings#std:setting-LOGIN_URL&quot;&gt; &lt;code&gt;settings.LOGIN_URL&lt;/code&gt; &lt;/a&gt;とログインビューが適切に関連付けられていることを確認する必要があることに注意してください。たとえば、デフォルトを使用して、次の行をURLconfに追加します。</target>
        </trans-unit>
        <trans-unit id="6cd271fbb7b9ed101646f23af0c3630189f7de5d" translate="yes" xml:space="preserve">
          <source>Note that if you provide a value to &lt;code&gt;redirect_field_name&lt;/code&gt;, you will most likely need to customize your login template as well, since the template context variable which stores the redirect path will use the value of &lt;code&gt;redirect_field_name&lt;/code&gt; as its key rather than &lt;code&gt;&quot;next&quot;&lt;/code&gt; (the default).</source>
          <target state="translated">&lt;code&gt;redirect_field_name&lt;/code&gt; に値を指定する場合、リダイレクトパスを格納するテンプレートコンテキスト変数はキーとして &lt;code&gt;&quot;next&quot;&lt;/code&gt; （デフォルト）ではなく、 &lt;code&gt;redirect_field_name&lt;/code&gt; の値を使用するため、ログインテンプレートもカスタマイズする必要があることに注意してください。）。</target>
        </trans-unit>
        <trans-unit id="7d9053627b6ab7bc8cafe04e748b5f7e44a6dca7" translate="yes" xml:space="preserve">
          <source>Note that if you provide an &lt;code&gt;exclude&lt;/code&gt; argument to &lt;code&gt;validate_unique()&lt;/code&gt;, any &lt;a href=&quot;options#django.db.models.Options.unique_together&quot;&gt;&lt;code&gt;unique_together&lt;/code&gt;&lt;/a&gt; constraint involving one of the fields you provided will not be checked.</source>
          <target state="translated">&lt;code&gt;validate_unique()&lt;/code&gt; に &lt;code&gt;exclude&lt;/code&gt; 引数を指定した場合、指定したフィールドの1つに関連する&lt;a href=&quot;options#django.db.models.Options.unique_together&quot;&gt; &lt;code&gt;unique_together&lt;/code&gt; &lt;/a&gt;制約はチェックされないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="4bf8a879fdf5070b51826c9b7caa260383bcc815" translate="yes" xml:space="preserve">
          <source>Note that if you set this to point to a &lt;a href=&quot;#django.db.models.DateTimeField&quot;&gt;&lt;code&gt;DateTimeField&lt;/code&gt;&lt;/a&gt;, only the date portion of the field will be considered. Besides, when &lt;a href=&quot;../settings#std:setting-USE_TZ&quot;&gt;&lt;code&gt;USE_TZ&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;True&lt;/code&gt;, the check will be performed in the &lt;a href=&quot;../../topics/i18n/timezones#default-current-time-zone&quot;&gt;current time zone&lt;/a&gt; at the time the object gets saved.</source>
          <target state="translated">これを&lt;a href=&quot;#django.db.models.DateTimeField&quot;&gt; &lt;code&gt;DateTimeField&lt;/code&gt; &lt;/a&gt;を指すように設定すると、フィールドの日付部分のみが考慮されることに注意してください。また、&lt;a href=&quot;../settings#std:setting-USE_TZ&quot;&gt; &lt;code&gt;USE_TZ&lt;/code&gt; &lt;/a&gt;が &lt;code&gt;True&lt;/code&gt; の場合、チェックはオブジェクトが保存されたときに&lt;a href=&quot;../../topics/i18n/timezones#default-current-time-zone&quot;&gt;現在のタイムゾーン&lt;/a&gt;で実行されます。</target>
        </trans-unit>
        <trans-unit id="57208e52924136beaba1ef45b1cfb353a276896c" translate="yes" xml:space="preserve">
          <source>Note that if you use &lt;code&gt;iterator()&lt;/code&gt; to run the query, &lt;code&gt;prefetch_related()&lt;/code&gt; calls will be ignored since these two optimizations do not make sense together.</source>
          <target state="translated">&lt;code&gt;iterator()&lt;/code&gt; を使用してクエリを実行する場合、これら2つの最適化は併用しても意味がないため、 &lt;code&gt;prefetch_related()&lt;/code&gt; 呼び出しは無視されます。</target>
        </trans-unit>
        <trans-unit id="d3fefd7119376ae7f60ef230db53d905b5c5f7ea" translate="yes" xml:space="preserve">
          <source>Note that if you want the number of items in a &lt;code&gt;QuerySet&lt;/code&gt; and are also retrieving model instances from it (for example, by iterating over it), it&amp;rsquo;s probably more efficient to use &lt;code&gt;len(queryset)&lt;/code&gt; which won&amp;rsquo;t cause an extra database query like &lt;code&gt;count()&lt;/code&gt; would.</source>
          <target state="translated">&lt;code&gt;QuerySet&lt;/code&gt; 内のアイテム数が必要で、それからモデルインスタンスも取得している場合（たとえば、それを反復することにより）、 &lt;code&gt;len(queryset)&lt;/code&gt; を使用する方がおそらくより効率的であり、次のような追加のデータベースクエリが発生しないことに注意してください &lt;code&gt;count()&lt;/code&gt; はそうします。</target>
        </trans-unit>
        <trans-unit id="4b51148aa0e1df68489edcd2daa4501a3ad657c5" translate="yes" xml:space="preserve">
          <source>Note that if you want to include literal percent signs in the query, you have to double them in the case you are passing parameters:</source>
          <target state="translated">クエリにリテラルのパーセント記号を入れたい場合は、パラメータを渡す場合は二重にしなければならないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="4b4035dfedcff608a0dab9991ed7812ee69969f8" translate="yes" xml:space="preserve">
          <source>Note that if you wish to use the same file handle for multiple &lt;code&gt;post()&lt;/code&gt; calls then you will need to manually reset the file pointer between posts. The easiest way to do this is to manually close the file after it has been provided to &lt;code&gt;post()&lt;/code&gt;, as demonstrated above.</source>
          <target state="translated">複数の &lt;code&gt;post()&lt;/code&gt; 呼び出しに同じファイルハンドルを使用する場合は、投稿間のファイルポインターを手動でリセットする必要があることに注意してください。これを行う最も簡単な方法は、上で示したように、ファイルが &lt;code&gt;post()&lt;/code&gt; に提供された後に手動で閉じることです。</target>
        </trans-unit>
        <trans-unit id="7f860210b1c27c53f17cee74317f048e4e6632b1" translate="yes" xml:space="preserve">
          <source>Note that in case there is no other lookup specified, Django interprets &lt;code&gt;change__abs=27&lt;/code&gt; as &lt;code&gt;change__abs__exact=27&lt;/code&gt;.</source>
          <target state="translated">他にルックアップが指定されていない場合、Djangoは &lt;code&gt;change__abs=27&lt;/code&gt; を &lt;code&gt;change__abs__exact=27&lt;/code&gt; と解釈することに注意してください。</target>
        </trans-unit>
        <trans-unit id="9930c8dc279b69fbaa1a8be67211867deca2a03e" translate="yes" xml:space="preserve">
          <source>Note that in most deployment situations where Django isn&amp;rsquo;t involved in serving user-uploaded files, this setting won&amp;rsquo;t help you. For example, if your &lt;a href=&quot;settings#std:setting-MEDIA_URL&quot;&gt;&lt;code&gt;MEDIA_URL&lt;/code&gt;&lt;/a&gt; is served directly by your front-end Web server (nginx, Apache, etc.) then you&amp;rsquo;d want to set this header there. On the other hand, if you are using Django to do something like require authorization in order to download files and you cannot set the header using your Web server, this setting will be useful.</source>
          <target state="translated">Djangoがユーザーがアップロードしたファイルの提供に関与していないほとんどの配備状況では、この設定は役に立ちません。たとえば、&lt;a href=&quot;settings#std:setting-MEDIA_URL&quot;&gt; &lt;code&gt;MEDIA_URL&lt;/code&gt; &lt;/a&gt;がフロントエンドWebサーバー（nginx、Apacheなど）から直接提供されている場合は、そこにこのヘッダーを設定します。一方、Djangoを使用してファイルをダウンロードするために承認が必要で、Webサーバーを使用してヘッダーを設定できない場合は、この設定が役立ちます。</target>
        </trans-unit>
        <trans-unit id="99e79e30a12a76f1313050e4f0b66fec20480e07" translate="yes" xml:space="preserve">
          <source>Note that in the case of identical date values, these methods will use the primary key as a tie-breaker. This guarantees that no records are skipped or duplicated. That also means you cannot use those methods on unsaved objects.</source>
          <target state="translated">同一の日付値の場合、これらのメソッドは主キーをタイブレークとして使用することに注意してください。これにより、レコードがスキップされたり重複したりしないことが保証されます。これは、保存されていないオブジェクトにこれらのメソッドを使用できないことを意味します。</target>
        </trans-unit>
        <trans-unit id="90c15f36e80bc36194e7fc7c88e2411b03bc0b09" translate="yes" xml:space="preserve">
          <source>Note that in the last example the article has moved from John to Paul.</source>
          <target state="translated">最後の例では、記事がヨハネからパウロに移っていることに注意してください。</target>
        </trans-unit>
        <trans-unit id="cf55cefd5bd9a22b0ef1f0f6fcfbd1370197c2a8" translate="yes" xml:space="preserve">
          <source>Note that inheriting from multiple models that have a common &lt;code&gt;id&lt;/code&gt; primary key field will raise an error. To properly use multiple inheritance, you can use an explicit &lt;a href=&quot;../../ref/models/fields#django.db.models.AutoField&quot;&gt;&lt;code&gt;AutoField&lt;/code&gt;&lt;/a&gt; in the base models:</source>
          <target state="translated">共通の &lt;code&gt;id&lt;/code&gt; 主キーフィールドを持つ複数のモデルから継承すると、エラーが発生することに注意してください。多重継承を適切に使用するには、基本モデルで明示的な&lt;a href=&quot;../../ref/models/fields#django.db.models.AutoField&quot;&gt; &lt;code&gt;AutoField&lt;/code&gt; &lt;/a&gt;を使用できます。</target>
        </trans-unit>
        <trans-unit id="f16597be826caa262d10a0f4d0ad1380467491e9" translate="yes" xml:space="preserve">
          <source>Note that it &lt;strong&gt;does not&lt;/strong&gt; include the &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tags, or a submit button. We&amp;rsquo;ll have to provide those ourselves in the template.</source>
          <target state="translated">&lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; タグや送信ボタンは含まれて&lt;strong&gt;いない&lt;/strong&gt;ことに注意してください。テンプレートでそれらを提供する必要があります。</target>
        </trans-unit>
        <trans-unit id="20fcecc00ae0237fe53c67889180caee6880fbb3" translate="yes" xml:space="preserve">
          <source>Note that it is possible to compare &lt;code&gt;Polygon&lt;/code&gt; objects directly with &lt;code&gt;&amp;lt;&lt;/code&gt; or &lt;code&gt;&amp;gt;&lt;/code&gt;, but as the comparison is made through Polygon&amp;rsquo;s &lt;a href=&quot;#django.contrib.gis.geos.LineString&quot;&gt;&lt;code&gt;LineString&lt;/code&gt;&lt;/a&gt;, it does not mean much (but is consistent and quick). You can always force the comparison with the &lt;a href=&quot;#django.contrib.gis.geos.GEOSGeometry.area&quot;&gt;&lt;code&gt;area&lt;/code&gt;&lt;/a&gt; property:</source>
          <target state="translated">&lt;code&gt;Polygon&lt;/code&gt; オブジェクトを &lt;code&gt;&amp;lt;&lt;/code&gt; または &lt;code&gt;&amp;gt;&lt;/code&gt; と直接比較することは可能ですが、比較はPolygonの&lt;a href=&quot;#django.contrib.gis.geos.LineString&quot;&gt; &lt;code&gt;LineString&lt;/code&gt; &lt;/a&gt;を介して行われるため、あまり意味がありません（ただし、一貫性があり迅速です）。いつでも&lt;a href=&quot;#django.contrib.gis.geos.GEOSGeometry.area&quot;&gt; &lt;code&gt;area&lt;/code&gt; &lt;/a&gt;プロパティとの比較を強制できます：</target>
        </trans-unit>
        <trans-unit id="309e54b62c2f8838bb6218907b1b434ce25c9449" translate="yes" xml:space="preserve">
          <source>Note that it&amp;rsquo;s perfectly safe to store global information that will not change throughout the life of the &lt;code&gt;Node&lt;/code&gt; as an attribute. In the case of &lt;code&gt;CycleNode&lt;/code&gt;, the &lt;code&gt;cyclevars&lt;/code&gt; argument doesn&amp;rsquo;t change after the &lt;code&gt;Node&lt;/code&gt; is instantiated, so we don&amp;rsquo;t need to put it in the &lt;code&gt;render_context&lt;/code&gt;. But state information that is specific to the template that is currently being rendered, like the current iteration of the &lt;code&gt;CycleNode&lt;/code&gt;, should be stored in the &lt;code&gt;render_context&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Node&lt;/code&gt; の存続期間を通じて変更されないグローバル情報を属性として保存することは完全に安全であることに注意してください。 &lt;code&gt;CycleNode&lt;/code&gt; の場合、 &lt;code&gt;Node&lt;/code&gt; がインスタンス化された後、 &lt;code&gt;cyclevars&lt;/code&gt; 引数は変更されないため、 &lt;code&gt;render_context&lt;/code&gt; に配置する必要はありません。ただし、 &lt;code&gt;CycleNode&lt;/code&gt; の現在の反復など、現在レンダリングされているテンプレートに固有の状態情報は、 &lt;code&gt;render_context&lt;/code&gt; に格納する必要があります。</target>
        </trans-unit>
        <trans-unit id="e90fd4cc43a3b840e41758699f16f4a951c22c6a" translate="yes" xml:space="preserve">
          <source>Note that model interdependencies in Django can get very complex, and squashing may result in migrations that do not run; either mis-optimized (in which case you can try again with &lt;code&gt;--no-optimize&lt;/code&gt;, though you should also report an issue), or with a &lt;code&gt;CircularDependencyError&lt;/code&gt;, in which case you can manually resolve it.</source>
          <target state="translated">Djangoのモデルの相互依存関係は非常に複雑になる可能性があり、押しつぶすと移行が実行されなくなる可能性があることに注意してください。不適切に最適化された場合（この場合は &lt;code&gt;--no-optimize&lt;/code&gt; を使用して再試行できますが、問題も報告する必要があります）、または &lt;code&gt;CircularDependencyError&lt;/code&gt; を使用した場合、手動で解決できます。</target>
        </trans-unit>
        <trans-unit id="284c76538164a551a6ead0347d70137da1e7759a" translate="yes" xml:space="preserve">
          <source>Note that not all changes are possible on all databases - for example, you cannot change a text-type field like &lt;code&gt;models.TextField()&lt;/code&gt; into a number-type field like &lt;code&gt;models.IntegerField()&lt;/code&gt; on most databases.</source>
          <target state="translated">すべてのデータベースですべての変更が可能なわけではないことに注意してください。たとえば、 &lt;code&gt;models.TextField()&lt;/code&gt; のようなテキストタイプのフィールドを、ほとんどのデータベースでは &lt;code&gt;models.IntegerField()&lt;/code&gt; のような数値タイプのフィールドに変更することはできません。</target>
        </trans-unit>
        <trans-unit id="5765b42680f5abb4a72b6c1b5ae0dc4354eab406" translate="yes" xml:space="preserve">
          <source>Note that older or more recent versions of these libraries &lt;em&gt;may&lt;/em&gt; also work totally fine with GeoDjango. Your mileage may vary.</source>
          <target state="translated">これらのライブラリの古いバージョンまたはより新しいバージョンも、GeoDjangoで完全に正常に動作&lt;em&gt;する可能性があることに&lt;/em&gt;注意してください。あなたのマイレージは異なる場合があります。</target>
        </trans-unit>
        <trans-unit id="fbd318205dcfeda5f23d3aa3a5607de8d9bf49a6" translate="yes" xml:space="preserve">
          <source>Note that once we&amp;rsquo;ve done this in all these views, we no longer need to import &lt;a href=&quot;../topics/templates#module-django.template.loader&quot;&gt;&lt;code&gt;loader&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../ref/request-response#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt; (you&amp;rsquo;ll want to keep &lt;code&gt;HttpResponse&lt;/code&gt; if you still have the stub methods for &lt;code&gt;detail&lt;/code&gt;, &lt;code&gt;results&lt;/code&gt;, and &lt;code&gt;vote&lt;/code&gt;).</source>
          <target state="translated">これらすべてのビューでこれを実行すると、&lt;a href=&quot;../topics/templates#module-django.template.loader&quot;&gt; &lt;code&gt;loader&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;../ref/request-response#django.http.HttpResponse&quot;&gt; &lt;code&gt;HttpResponse&lt;/code&gt; &lt;/a&gt;をインポートする必要がなくなることに注意してください（ &lt;code&gt;detail&lt;/code&gt; 、 &lt;code&gt;results&lt;/code&gt; 、および &lt;code&gt;vote&lt;/code&gt; のスタブメソッドがまだある場合は、 &lt;code&gt;HttpResponse&lt;/code&gt; を保持する必要があります）。</target>
        </trans-unit>
        <trans-unit id="db3daa7b3e0d58113112241aa78669b84d25e7f6" translate="yes" xml:space="preserve">
          <source>Note that only the execution of your view is enclosed in the transactions. Middleware runs outside of the transaction, and so does the rendering of template responses.</source>
          <target state="translated">トランザクションの中には、ビューの実行のみが含まれていることに注意してください。ミドルウェアはトランザクションの外で動作し、テンプレートレスポンスのレンダリングも行います。</target>
        </trans-unit>
        <trans-unit id="f230fc5e74b5fca6a965580a65f23bf035b6e813" translate="yes" xml:space="preserve">
          <source>Note that only the outermost call to &lt;a href=&quot;../../../topics/db/transactions#django.db.transaction.atomic&quot;&gt;&lt;code&gt;atomic()&lt;/code&gt;&lt;/a&gt; sets up a transaction and thus sets the time that &lt;code&gt;TransactionNow()&lt;/code&gt; will return; nested calls create savepoints which do not affect the transaction time.</source>
          <target state="translated">&lt;a href=&quot;../../../topics/db/transactions#django.db.transaction.atomic&quot;&gt; &lt;code&gt;atomic()&lt;/code&gt; の&lt;/a&gt;最も外側の呼び出しだけがトランザクションを設定し、したがって &lt;code&gt;TransactionNow()&lt;/code&gt; が返す時間を設定することに注意してください。ネストされた呼び出しは、トランザクション時間に影響を与えないセーブポイントを作成します。</target>
        </trans-unit>
        <trans-unit id="d57570c30207a70feb1f95d543f2d181afc9bba6" translate="yes" xml:space="preserve">
          <source>Note that passing an empty dictionary creates a &lt;em&gt;bound&lt;/em&gt; form with empty data:</source>
          <target state="translated">空の辞書を渡すと、空のデータを持つ&lt;em&gt;バインドされた&lt;/em&gt;フォームが作成されることに注意してください：</target>
        </trans-unit>
        <trans-unit id="eaad0f28e2fcb42d6532c371c6cfac0fd491200a" translate="yes" xml:space="preserve">
          <source>Note that per-user installations can still affect the behavior of system tools that run as that user, so &lt;code&gt;virtualenv&lt;/code&gt; is a more robust solution (see below).</source>
          <target state="translated">ユーザーごとのインストールは、そのユーザーとして実行されるシステムツールの動作に影響を与える可能性があるため、 &lt;code&gt;virtualenv&lt;/code&gt; はより堅牢なソリューションです（以下を参照）。</target>
        </trans-unit>
        <trans-unit id="773f2a11fc905c994db622bf8e5b84629e2c2670" translate="yes" xml:space="preserve">
          <source>Note that per-user installations can still affect the behavior of system tools that run as that user, so using a virtual environment is a more robust solution (see below).</source>
          <target state="translated">ユーザーごとにインストールしても、そのユーザーとして実行されるシステムツールの動作に影響を与える可能性があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="cb0441db5179fedc88175f7abe68eb6db9244379" translate="yes" xml:space="preserve">
          <source>Note that pluralization is complicated and works differently in each language. Comparing &lt;code&gt;count&lt;/code&gt; to 1 isn&amp;rsquo;t always the correct rule. This code looks sophisticated, but will produce incorrect results for some languages:</source>
          <target state="translated">複数化は複雑であり、言語ごとに動作が異なることに注意してください。 &lt;code&gt;count&lt;/code&gt; を1 と比較することが常に正しいとは限りません。このコードは洗練されているように見えますが、一部の言語では誤った結果を生成します。</target>
        </trans-unit>
        <trans-unit id="5de11d40e524334a2d38e78962aaeec3d5b135e7" translate="yes" xml:space="preserve">
          <source>Note that request methods should be in uppercase.</source>
          <target state="translated">リクエストメソッドは大文字であることに注意してください。</target>
        </trans-unit>
        <trans-unit id="968db22470d1ca267f45216e5aaa73f7fd939af9" translate="yes" xml:space="preserve">
          <source>Note that setting &lt;a href=&quot;#std:setting-EMAIL_SSL_CERTFILE&quot;&gt;&lt;code&gt;EMAIL_SSL_CERTFILE&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#std:setting-EMAIL_SSL_KEYFILE&quot;&gt;&lt;code&gt;EMAIL_SSL_KEYFILE&lt;/code&gt;&lt;/a&gt; doesn&amp;rsquo;t result in any certificate checking. They&amp;rsquo;re passed to the underlying SSL connection. Please refer to the documentation of Python&amp;rsquo;s &lt;a href=&quot;https://docs.python.org/3/library/ssl.html#ssl.wrap_socket&quot;&gt;&lt;code&gt;ssl.wrap_socket()&lt;/code&gt;&lt;/a&gt; function for details on how the certificate chain file and private key file are handled.</source>
          <target state="translated">&lt;a href=&quot;#std:setting-EMAIL_SSL_CERTFILE&quot;&gt; &lt;code&gt;EMAIL_SSL_CERTFILE&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#std:setting-EMAIL_SSL_KEYFILE&quot;&gt; &lt;code&gt;EMAIL_SSL_KEYFILE&lt;/code&gt; &lt;/a&gt;を設定しても、証明書の確認は行われないことに注意してください。それらは基礎となるSSL接続に渡されます。証明書チェーンファイルと秘密鍵ファイルの処理方法の詳細については、Pythonの&lt;a href=&quot;https://docs.python.org/3/library/ssl.html#ssl.wrap_socket&quot;&gt; &lt;code&gt;ssl.wrap_socket()&lt;/code&gt; &lt;/a&gt;関数のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="c22e8dd57361cf848941e0793916235467d46530" translate="yes" xml:space="preserve">
          <source>Note that since &lt;code&gt;set()&lt;/code&gt; is a compound operation, it is subject to race conditions. For instance, new objects may be added to the database in between the call to &lt;code&gt;clear()&lt;/code&gt; and the call to &lt;code&gt;add()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;set()&lt;/code&gt; は複合演算であるため、競合状態の影響を受けることに注意してください。たとえば、新しいオブジェクトは、 &lt;code&gt;clear()&lt;/code&gt; の呼び出しと &lt;code&gt;add()&lt;/code&gt; の呼び出しの間にデータベースに追加されます。</target>
        </trans-unit>
        <trans-unit id="e1ea0edc5eb39ec2c96e83f140636e0429b857eb" translate="yes" xml:space="preserve">
          <source>Note that since the child template didn&amp;rsquo;t define the &lt;code&gt;sidebar&lt;/code&gt; block, the value from the parent template is used instead. Content within a &lt;code&gt;{% block %}&lt;/code&gt; tag in a parent template is always used as a fallback.</source>
          <target state="translated">子テンプレートは &lt;code&gt;sidebar&lt;/code&gt; ブロックを定義していないため、代わりに親テンプレートの値が使用されます。親テンプレートの &lt;code&gt;{% block %}&lt;/code&gt; タグ内のコンテンツは、常にフォールバックとして使用されます。</target>
        </trans-unit>
        <trans-unit id="a0ef7e754d821fe5a5389a0e0485b1236840d758" translate="yes" xml:space="preserve">
          <source>Note that some Django code was executed while running tests, but it is not listed here because of the &lt;code&gt;source&lt;/code&gt; flag passed to the previous command.</source>
          <target state="translated">テストの実行中に一部のDjangoコードが実行されましたが、前のコマンドに渡された &lt;code&gt;source&lt;/code&gt; フラグのため、ここにはリストされていません。</target>
        </trans-unit>
        <trans-unit id="b58e3568c1f9f0b7253202c19712cef23c12adeb" translate="yes" xml:space="preserve">
          <source>Note that the &lt;a href=&quot;#django.contrib.flatpages.middleware.FlatpageFallbackMiddleware&quot;&gt;&lt;code&gt;FlatpageFallbackMiddleware&lt;/code&gt;&lt;/a&gt; only steps in once another view has successfully produced a 404 response. If another view or middleware class attempts to produce a 404 but ends up raising an exception instead, the response will become an HTTP 500 (&amp;ldquo;Internal Server Error&amp;rdquo;) and the &lt;a href=&quot;#django.contrib.flatpages.middleware.FlatpageFallbackMiddleware&quot;&gt;&lt;code&gt;FlatpageFallbackMiddleware&lt;/code&gt;&lt;/a&gt; will not attempt to serve a flat page.</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.flatpages.middleware.FlatpageFallbackMiddleware&quot;&gt; &lt;code&gt;FlatpageFallbackMiddleware&lt;/code&gt; &lt;/a&gt;は、別のビューが404応答を正常に生成した場合にのみステップインすることに注意してください。別のビューまたはミドルウェアクラスが404を生成しようとしたが、代わりに例外が発生した場合、応答はHTTP 500（「内部サーバーエラー」）になり、&lt;a href=&quot;#django.contrib.flatpages.middleware.FlatpageFallbackMiddleware&quot;&gt; &lt;code&gt;FlatpageFallbackMiddleware&lt;/code&gt; &lt;/a&gt;はフラットページを提供しようとしません。</target>
        </trans-unit>
        <trans-unit id="6fd81eb0266642f411e0ec2b93dda43fb0cdaa81" translate="yes" xml:space="preserve">
          <source>Note that the &lt;a href=&quot;../../ref/models/instances#django.db.models.Model.delete&quot;&gt;&lt;code&gt;delete()&lt;/code&gt;&lt;/a&gt; method for an object is not necessarily called when &lt;a href=&quot;queries#topics-db-queries-delete&quot;&gt;deleting objects in bulk using a QuerySet&lt;/a&gt; or as a result of a &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey.on_delete&quot;&gt;&lt;code&gt;cascading
delete&lt;/code&gt;&lt;/a&gt;. To ensure customized delete logic gets executed, you can use &lt;a href=&quot;../../ref/signals#django.db.models.signals.pre_delete&quot;&gt;&lt;code&gt;pre_delete&lt;/code&gt;&lt;/a&gt; and/or &lt;a href=&quot;../../ref/signals#django.db.models.signals.post_delete&quot;&gt;&lt;code&gt;post_delete&lt;/code&gt;&lt;/a&gt; signals.</source>
          <target state="translated">&lt;a href=&quot;queries#topics-db-queries-delete&quot;&gt;QuerySetを使用して、&lt;/a&gt;または&lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey.on_delete&quot;&gt; &lt;code&gt;cascading delete&lt;/code&gt; &lt;/a&gt;結果としてオブジェクトを一括で削除する場合、オブジェクトの&lt;a href=&quot;../../ref/models/instances#django.db.models.Model.delete&quot;&gt; &lt;code&gt;delete()&lt;/code&gt; &lt;/a&gt;メソッドは必ずしも呼び出されないことに注意してください。カスタマイズされた削除ロジックが確実に実行されるようにするには、&lt;a href=&quot;../../ref/signals#django.db.models.signals.pre_delete&quot;&gt; &lt;code&gt;pre_delete&lt;/code&gt; &lt;/a&gt;および/または&lt;a href=&quot;../../ref/signals#django.db.models.signals.post_delete&quot;&gt; &lt;code&gt;post_delete&lt;/code&gt; &lt;/a&gt;シグナルを使用できます。</target>
        </trans-unit>
        <trans-unit id="253ce872bdbdccddb3ef8b680bcb97ef630a7e6c" translate="yes" xml:space="preserve">
          <source>Note that the &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.select_related&quot;&gt;&lt;code&gt;select_related()&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; method recursively prepopulates the cache of all one-to-many relationships ahead of time. Example:</source>
          <target state="translated">ことを注意&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.select_related&quot;&gt; &lt;code&gt;select_related()&lt;/code&gt; &lt;/a&gt;&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; &lt;/a&gt;メソッドが再帰的に前もってすべての1対多の関係のキャッシュをあらかじめ入力。例：</target>
        </trans-unit>
        <trans-unit id="e80f5630b8f1dca8b0ea0eedd1bf8d8773a13237" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;content&lt;/code&gt; argument must be an instance of either &lt;a href=&quot;#django.core.files.File&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt; or of a subclass of &lt;a href=&quot;#django.core.files.File&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt;, such as &lt;a href=&quot;#django.core.files.base.ContentFile&quot;&gt;&lt;code&gt;ContentFile&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;content&lt;/code&gt; 引数は、&lt;a href=&quot;#django.core.files.File&quot;&gt; &lt;code&gt;File&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#django.core.files.base.ContentFile&quot;&gt; &lt;code&gt;ContentFile&lt;/code&gt; &lt;/a&gt;などの&lt;a href=&quot;#django.core.files.File&quot;&gt; &lt;code&gt;File&lt;/code&gt; の&lt;/a&gt;サブクラスのインスタンスでなければならないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="69cf65c7f436b8fbaff150d2dc857544f903a181" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;content&lt;/code&gt; argument should be an instance of &lt;a href=&quot;../files/file#django.core.files.File&quot;&gt;&lt;code&gt;django.core.files.File&lt;/code&gt;&lt;/a&gt;, not Python&amp;rsquo;s built-in file object. You can construct a &lt;a href=&quot;../files/file#django.core.files.File&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt; from an existing Python file object like this:</source>
          <target state="translated">&lt;code&gt;content&lt;/code&gt; 引数は&lt;a href=&quot;../files/file#django.core.files.File&quot;&gt; &lt;code&gt;django.core.files.File&lt;/code&gt; の&lt;/a&gt;インスタンスでなければならず、Pythonの組み込みファイルオブジェクトではないことに注意してください。次のように既存のPythonファイルオブジェクトから&lt;a href=&quot;../files/file#django.core.files.File&quot;&gt; &lt;code&gt;File&lt;/code&gt; &lt;/a&gt;を作成できます。</target>
        </trans-unit>
        <trans-unit id="f40ef01b229f9c63dbeb83559c6536f91520f3ba" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;docs&lt;/code&gt; directory won&amp;rsquo;t be included in your package unless you add some files to it. Many Django apps also provide their documentation online through sites like &lt;a href=&quot;https://readthedocs.org&quot;&gt;readthedocs.org&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;docs&lt;/code&gt; ディレクトリは、ファイルを追加しない限り、パッケージに含まれないことに注意してください。多くのDjangoアプリは&lt;a href=&quot;https://readthedocs.org&quot;&gt;readthedocs.orgの&lt;/a&gt;ようなサイトを通じてオンラインでドキュメントを提供しています。</target>
        </trans-unit>
        <trans-unit id="480e601acbf5c70f30565ccc01d9a0fb37503e26" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;models&lt;/code&gt; module is imported from &lt;code&gt;django.contrib.gis.db&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;models&lt;/code&gt; モジュールは &lt;code&gt;django.contrib.gis.db&lt;/code&gt; からインポートされることに注意してください。</target>
        </trans-unit>
        <trans-unit id="d8c97e4e91823174dcc8b363df50dbaa5e57e373" translate="yes" xml:space="preserve">
          <source>Note that the block includes &lt;em&gt;all&lt;/em&gt; the text between the &lt;code&gt;filter&lt;/code&gt; and &lt;code&gt;endfilter&lt;/code&gt; tags.</source>
          <target state="translated">ブロックには、 &lt;code&gt;filter&lt;/code&gt; タグと &lt;code&gt;endfilter&lt;/code&gt; タグの間の&lt;em&gt;すべて&lt;/em&gt;のテキストが含まれていることに注意してください。</target>
        </trans-unit>
        <trans-unit id="d560327fe2008995352ea5ff59887465ed4e02c3" translate="yes" xml:space="preserve">
          <source>Note that the cache backend isn&amp;rsquo;t vulnerable to this problem, because caches automatically delete stale data. Neither is the cookie backend, because the session data is stored by the users&amp;rsquo; browsers.</source>
          <target state="translated">キャッシュは古いデータを自動的に削除するため、キャッシュバックエンドはこの問題の影響を受けないことに注意してください。セッションデータはユーザーのブラウザによって保存されるため、Cookieバックエンドも同様です。</target>
        </trans-unit>
        <trans-unit id="997b862ea7c654dba69036735ee9c3d739d594e9" translate="yes" xml:space="preserve">
          <source>Note that the cache control settings &amp;ldquo;private&amp;rdquo; and &amp;ldquo;public&amp;rdquo; are mutually exclusive. The decorator ensures that the &amp;ldquo;public&amp;rdquo; directive is removed if &amp;ldquo;private&amp;rdquo; should be set (and vice versa). An example use of the two directives would be a blog site that offers both private and public entries. Public entries may be cached on any shared cache. The following code uses &lt;a href=&quot;../ref/utils#django.utils.cache.patch_cache_control&quot;&gt;&lt;code&gt;patch_cache_control()&lt;/code&gt;&lt;/a&gt;, the manual way to modify the cache control header (it is internally called by the &lt;a href=&quot;http/decorators#django.views.decorators.cache.cache_control&quot;&gt;&lt;code&gt;cache_control()&lt;/code&gt;&lt;/a&gt; decorator):</source>
          <target state="translated">キャッシュ制御設定の「プライベート」と「パブリック」は相互に排他的であることに注意してください。デコレータは、「プライベート」を設定する必要がある場合（およびその逆）、「パブリック」ディレクティブが確実に削除されるようにします。 2つのディレクティブの使用例は、プライベートエントリとパブリックエントリの両方を提供するブログサイトです。公開エントリは、任意の共有キャッシュにキャッシュできます。次のコードでは、手動でキャッシュ制御ヘッダーを変更する&lt;a href=&quot;../ref/utils#django.utils.cache.patch_cache_control&quot;&gt; &lt;code&gt;patch_cache_control()&lt;/code&gt; を&lt;/a&gt;使用しています（内部的に&lt;a href=&quot;http/decorators#django.views.decorators.cache.cache_control&quot;&gt; &lt;code&gt;cache_control()&lt;/code&gt; &lt;/a&gt;デコレーターによって呼び出されます）。</target>
        </trans-unit>
        <trans-unit id="329a8fe91b918a1eabc78ec4127577a2eaa4620a" translate="yes" xml:space="preserve">
          <source>Note that the default IP address, &lt;code&gt;127.0.0.1&lt;/code&gt;, is not accessible from other machines on your network. To make your development server viewable to other machines on the network, use its own IP address (e.g. &lt;code&gt;192.168.2.1&lt;/code&gt;) or &lt;code&gt;0.0.0.0&lt;/code&gt; or &lt;code&gt;::&lt;/code&gt; (with IPv6 enabled).</source>
          <target state="translated">デフォルトのIPアドレス &lt;code&gt;127.0.0.1&lt;/code&gt; は、ネットワーク上の他のマシンからアクセスできないことに注意してください。開発サーバーをネットワーク上の他のマシンから見えるようにするには、独自のIPアドレス（例： &lt;code&gt;192.168.2.1&lt;/code&gt; ）または &lt;code&gt;0.0.0.0&lt;/code&gt; または &lt;code&gt;::&lt;/code&gt; :（ IPv6を有効にした状態）を使用します。</target>
        </trans-unit>
        <trans-unit id="7932c67ecc916c97da8c8c7c0e37c190f380e858" translate="yes" xml:space="preserve">
          <source>Note that the default configuration process only calls &lt;a href=&quot;../ref/settings#std:setting-LOGGING_CONFIG&quot;&gt;&lt;code&gt;LOGGING_CONFIG&lt;/code&gt;&lt;/a&gt; once settings are fully-loaded. In contrast, manually configuring the logging in your settings file will load your logging config immediately. As such, your logging config must appear &lt;em&gt;after&lt;/em&gt; any settings on which it depends.</source>
          <target state="translated">Note that the default configuration process only calls &lt;a href=&quot;../ref/settings#std:setting-LOGGING_CONFIG&quot;&gt; &lt;code&gt;LOGGING_CONFIG&lt;/code&gt; &lt;/a&gt; once settings are fully-loaded. In contrast, manually configuring the logging in your settings file will load your logging config immediately. As such, your logging config must appear &lt;em&gt;after&lt;/em&gt; any settings on which it depends.</target>
        </trans-unit>
        <trans-unit id="40528c2a9e8caf146e1fc466ce15cb5b451cd1a5" translate="yes" xml:space="preserve">
          <source>Note that the first argument &lt;em&gt;must&lt;/em&gt; be called &lt;code&gt;context&lt;/code&gt;.</source>
          <target state="translated">最初の引数&lt;em&gt;は&lt;/em&gt; &lt;code&gt;context&lt;/code&gt; と呼ばれる&lt;em&gt;必要&lt;/em&gt;があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="65e9739383cf60a6791ac75fed8f327d25413bd7" translate="yes" xml:space="preserve">
          <source>Note that the first parameter to the function &lt;em&gt;must&lt;/em&gt; be called &lt;code&gt;context&lt;/code&gt;.</source>
          <target state="translated">関数の最初のパラメーターは &lt;code&gt;context&lt;/code&gt; と呼ばれる&lt;em&gt;必要&lt;/em&gt;があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="0abaf39e2d3058e4498c22aad4c34d7e6f3e0926" translate="yes" xml:space="preserve">
          <source>Note that the header needs to be in the format as used by &lt;code&gt;request.META&lt;/code&gt; &amp;ndash; all caps and likely starting with &lt;code&gt;HTTP_&lt;/code&gt;. (Remember, Django automatically adds &lt;code&gt;'HTTP_'&lt;/code&gt; to the start of x-header names before making the header available in &lt;code&gt;request.META&lt;/code&gt;.)</source>
          <target state="translated">ヘッダーは &lt;code&gt;request.META&lt;/code&gt; で使用される形式にする必要があることに注意してください。すべて大文字で、 &lt;code&gt;HTTP_&lt;/code&gt; で始まる可能性があります。（Djangoは、ヘッダーを &lt;code&gt;request.META&lt;/code&gt; で使用できるようにする前に、xヘッダー名の先頭に &lt;code&gt;'HTTP_'&lt;/code&gt; を自動的に追加することに注意してください。）</target>
        </trans-unit>
        <trans-unit id="a0b88ccf06c4a2dde1c8ecf8326ade5f6087323f" translate="yes" xml:space="preserve">
          <source>Note that the key in the dictionary is the actual field class, &lt;em&gt;not&lt;/em&gt; a string. The value is another dictionary; these arguments will be passed to the form field&amp;rsquo;s &lt;code&gt;__init__()&lt;/code&gt; method. See &lt;a href=&quot;../../forms/api&quot;&gt;The Forms API&lt;/a&gt; for details.</source>
          <target state="translated">辞書のキーは文字列で&lt;em&gt;はなく&lt;/em&gt;実際のフィールドクラスであることに注意してください。値は別の辞書です。これらの引数は、フォームフィールドの &lt;code&gt;__init__()&lt;/code&gt; メソッドに渡されます。詳細については&lt;a href=&quot;../../forms/api&quot;&gt;、フォームAPI&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="09019a3c236f5e543c42c3fc84c9325d2206d759" translate="yes" xml:space="preserve">
          <source>Note that the label suffix is added only if the last character of the label isn&amp;rsquo;t a punctuation character (in English, those are &lt;code&gt;.&lt;/code&gt;, &lt;code&gt;!&lt;/code&gt;, &lt;code&gt;?&lt;/code&gt; or &lt;code&gt;:&lt;/code&gt;).</source>
          <target state="translated">ラベルのサフィックスは、ラベルの最後の文字が句読点文字でない場合にのみ追加されることに注意してください（英語では、これらは &lt;code&gt;.&lt;/code&gt; 、 &lt;code&gt;!&lt;/code&gt; 、 &lt;code&gt;?&lt;/code&gt; または &lt;code&gt;:&lt;/code&gt; です）。</target>
        </trans-unit>
        <trans-unit id="45f9ccb1fbd2c54a94373b7ce9767a5b690ebf8b" translate="yes" xml:space="preserve">
          <source>Note that the latest Django master may not always be stable. When developing against master, you can check &lt;a href=&quot;https://djangoci.com&quot;&gt;Django&amp;rsquo;s continuous integration builds&lt;/a&gt; to determine if the failures are specific to your machine or if they are also present in Django&amp;rsquo;s official builds. If you click to view a particular build, you can view the &amp;ldquo;Configuration Matrix&amp;rdquo; which shows failures broken down by Python version and database backend.</source>
          <target state="translated">最新のDjangoマスターは常に安定しているとは限らないことに注意してください。マスターに対して開発する場合、&lt;a href=&quot;https://djangoci.com&quot;&gt;Djangoの継続的インテグレーションビルド&lt;/a&gt;をチェックして、障害がマシンに固有であるかどうか、またはDjangoの公式ビルドにも存在するかどうかを判断できます。特定のビルドをクリックして表示すると、Pythonのバージョンとデータベースバックエンドごとに分類された失敗を示す「構成マトリックス」を表示できます。</target>
        </trans-unit>
        <trans-unit id="1c1acd60a0e2efb4514768243487586e4ccb5e22" translate="yes" xml:space="preserve">
          <source>Note that the loader performs an optimization when it first runs: it caches a list of which &lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; packages have a &lt;code&gt;templates&lt;/code&gt; subdirectory.</source>
          <target state="translated">ローダーは最初の実行時に最適化を実行することに注意してください。ローダーは、&lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt;パッケージに &lt;code&gt;templates&lt;/code&gt; サブディレクトリがあるリストをキャッシュします。</target>
        </trans-unit>
        <trans-unit id="1d5d95f9aa8b375a624a768724d8045e847dc228" translate="yes" xml:space="preserve">
          <source>Note that the name of the matched pattern in the path strings of the second and third patterns has changed from &lt;code&gt;&amp;lt;question_id&amp;gt;&lt;/code&gt; to &lt;code&gt;&amp;lt;pk&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">2番目と3番目のパターンのパス文字列内の一致したパターンの名前が &lt;code&gt;&amp;lt;question_id&amp;gt;&lt;/code&gt; から &lt;code&gt;&amp;lt;pk&amp;gt;&lt;/code&gt; に変更されたことに注意してください。</target>
        </trans-unit>
        <trans-unit id="b16982e8febbd865c853824b0312670d37d10b80" translate="yes" xml:space="preserve">
          <source>Note that the name of the view function doesn&amp;rsquo;t matter; it doesn&amp;rsquo;t have to be named in a certain way in order for Django to recognize it. We&amp;rsquo;re calling it &lt;code&gt;current_datetime&lt;/code&gt; here, because that name clearly indicates what it does.</source>
          <target state="translated">ビュー関数の名前は重要ではないことに注意してください。Djangoが認識できるようにするために、特定の方法で名前を付ける必要はありません。ここでは、その名前を &lt;code&gt;current_datetime&lt;/code&gt; と呼んでいます。これは、その名前がその機能を明確に示しているためです。</target>
        </trans-unit>
        <trans-unit id="1d37566e826663dd236669ec8c0a538314d88d04" translate="yes" xml:space="preserve">
          <source>Note that the object will no longer be in the database, so be very careful what you do with this instance.</source>
          <target state="translated">オブジェクトはデータベース内には存在しなくなるので、このインスタンスをどうするかは非常に注意が必要です。</target>
        </trans-unit>
        <trans-unit id="6cb9b339d54209535bd6dcb521d136ae0891eda7" translate="yes" xml:space="preserve">
          <source>Note that the order in which fixture files are processed is undefined. However, all fixture data is installed as a single transaction, so data in one fixture can reference data in another fixture. If the database backend supports row-level constraints, these constraints will be checked at the end of the transaction.</source>
          <target state="translated">フィクスチャファイルが処理される順序は未定義であることに注意してください。しかし、すべてのフィクスチャデータは単一のトランザクションとしてインストールされているので、あるフィクスチャのデータは別のフィクスチャのデータを参照することができます。データベースのバックエンドが行レベルの制約をサポートしている場合、これらの制約はトランザクションの最後にチェックされます。</target>
        </trans-unit>
        <trans-unit id="cb80071655e1d9fbbd4b908b7ff6b7de62de9971" translate="yes" xml:space="preserve">
          <source>Note that the order of &lt;a href=&quot;../settings#std:setting-MIDDLEWARE&quot;&gt;&lt;code&gt;MIDDLEWARE&lt;/code&gt;&lt;/a&gt; matters. Generally, you can put &lt;a href=&quot;#django.contrib.flatpages.middleware.FlatpageFallbackMiddleware&quot;&gt;&lt;code&gt;FlatpageFallbackMiddleware&lt;/code&gt;&lt;/a&gt; at the end of the list. This means it will run first when processing the response, and ensures that any other response-processing middleware see the real flatpage response rather than the 404.</source>
          <target state="translated">&lt;a href=&quot;../settings#std:setting-MIDDLEWARE&quot;&gt; &lt;code&gt;MIDDLEWARE&lt;/code&gt; &lt;/a&gt;の順序が重要であることに注意してください。通常、リストの最後に&lt;a href=&quot;#django.contrib.flatpages.middleware.FlatpageFallbackMiddleware&quot;&gt; &lt;code&gt;FlatpageFallbackMiddleware&lt;/code&gt; &lt;/a&gt;を置くことができます。つまり、応答を処理するときに最初に実行され、他の応答処理ミドルウェアが404ではなく実際のフラットページ応答を確実に参照できるようになります。</target>
        </trans-unit>
        <trans-unit id="08698ded25f56ec765d5763a05954e398b0131e4" translate="yes" xml:space="preserve">
          <source>Note that the order of &lt;a href=&quot;../settings#std:setting-MIDDLEWARE&quot;&gt;&lt;code&gt;MIDDLEWARE&lt;/code&gt;&lt;/a&gt; matters. Generally, you can put &lt;a href=&quot;#django.contrib.redirects.middleware.RedirectFallbackMiddleware&quot;&gt;&lt;code&gt;RedirectFallbackMiddleware&lt;/code&gt;&lt;/a&gt; at the end of the list, because it&amp;rsquo;s a last resort.</source>
          <target state="translated">&lt;a href=&quot;../settings#std:setting-MIDDLEWARE&quot;&gt; &lt;code&gt;MIDDLEWARE&lt;/code&gt; &lt;/a&gt;の順序が重要であることに注意してください。通常、&lt;a href=&quot;#django.contrib.redirects.middleware.RedirectFallbackMiddleware&quot;&gt; &lt;code&gt;RedirectFallbackMiddleware&lt;/code&gt; &lt;/a&gt;はリストの最後に配置できます。これは最後の手段です。</target>
        </trans-unit>
        <trans-unit id="fef6bd3ebae4c1ec9ddd2798fe72b4fcf23c8784" translate="yes" xml:space="preserve">
          <source>Note that the parentheses required by most database engines around subqueries are not required in Django&amp;rsquo;s &lt;code&gt;select&lt;/code&gt; clauses. Also note that some database backends, such as some MySQL versions, don&amp;rsquo;t support subqueries.</source>
          <target state="translated">ほとんどのデータベースエンジンでサブクエリの周りに必要な括弧は、Djangoの &lt;code&gt;select&lt;/code&gt; 句では必要ありません。また、一部のMySQLバージョンなど、一部のデータベースバックエンドはサブクエリをサポートしていません。</target>
        </trans-unit>
        <trans-unit id="cfc63e63ecf8ac2eb2e30b758738319acc47dd43" translate="yes" xml:space="preserve">
          <source>Note that the queries generated in object deletion is an implementation detail subject to change.</source>
          <target state="translated">オブジェクト削除で生成されるクエリは、変更される可能性がある実装の詳細であることに注意してください。</target>
        </trans-unit>
        <trans-unit id="08ece2bb01374f6040408665502dabf3bdbfee50" translate="yes" xml:space="preserve">
          <source>Note that the result cache of the primary &lt;code&gt;QuerySet&lt;/code&gt; and all specified related objects will then be fully loaded into memory. This changes the typical behavior of &lt;code&gt;QuerySets&lt;/code&gt;, which normally try to avoid loading all objects into memory before they are needed, even after a query has been executed in the database.</source>
          <target state="translated">プライマリ &lt;code&gt;QuerySet&lt;/code&gt; 結果キャッシュと指定されたすべての関連オブジェクトがメモリに完全に読み込まれることに注意してください。これにより、通常、データベースでクエリが実行された後でも、必要になる前にすべてのオブジェクトをメモリに読み込まないようにする &lt;code&gt;QuerySets&lt;/code&gt; の一般的な動作が変更されます。</target>
        </trans-unit>
        <trans-unit id="aa58b675144be5fd04bd425ca97fc559b052e8eb" translate="yes" xml:space="preserve">
          <source>Note that the return code for the test-runner script is 1 for any number of failed and erroneous tests. If all the tests pass, the return code is 0. This feature is useful if you&amp;rsquo;re using the test-runner script in a shell script and need to test for success or failure at that level.</source>
          <target state="translated">test-runnerスクリプトの戻りコードは、失敗したテストとエラーのあるテストがいくつあっても1であることに注意してください。すべてのテストに合格した場合、戻りコードは0です。この機能は、シェルスクリプトでtest-runnerスクリプトを使用していて、そのレベルで成功または失敗をテストする必要がある場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="d50fd012ff22d54624835fa78fdc60e01d630190" translate="yes" xml:space="preserve">
          <source>Note that the session cookie is only sent when a session has been created or modified. If &lt;a href=&quot;../../ref/settings#std:setting-SESSION_SAVE_EVERY_REQUEST&quot;&gt;&lt;code&gt;SESSION_SAVE_EVERY_REQUEST&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;True&lt;/code&gt;, the session cookie will be sent on every request.</source>
          <target state="translated">セッションCookieは、セッションが作成または変更された場合にのみ送信されることに注意してください。場合&lt;a href=&quot;../../ref/settings#std:setting-SESSION_SAVE_EVERY_REQUEST&quot;&gt; &lt;code&gt;SESSION_SAVE_EVERY_REQUEST&lt;/code&gt; が&lt;/a&gt;ある &lt;code&gt;True&lt;/code&gt; 、セッションクッキーはリクエストごとに送信されます。</target>
        </trans-unit>
        <trans-unit id="5a3066deed15c333016258a7e176bfa5fbe7bff4" translate="yes" xml:space="preserve">
          <source>Note that the test client is not intended to be a replacement for &lt;a href=&quot;http://seleniumhq.org/&quot;&gt;Selenium&lt;/a&gt; or other &amp;ldquo;in-browser&amp;rdquo; frameworks. Django&amp;rsquo;s test client has a different focus. In short:</source>
          <target state="translated">テストクライアントは、&lt;a href=&quot;http://seleniumhq.org/&quot;&gt;Selenium&lt;/a&gt;または他の「ブラウザ内」フレームワークの代わりになるものではないことに注意してください。Djangoのテストクライアントの焦点は異なります。要するに：</target>
        </trans-unit>
        <trans-unit id="e7c15fa6899ee16f22c2f3eebad5d4575601d120" translate="yes" xml:space="preserve">
          <source>Note that there also is a &lt;a href=&quot;#django.forms.MultipleHiddenInput&quot;&gt;&lt;code&gt;MultipleHiddenInput&lt;/code&gt;&lt;/a&gt; widget that encapsulates a set of hidden input elements.</source>
          <target state="translated">非表示の入力要素のセットをカプセル化する&lt;a href=&quot;#django.forms.MultipleHiddenInput&quot;&gt; &lt;code&gt;MultipleHiddenInput&lt;/code&gt; &lt;/a&gt;ウィジェットもあることに注意してください。</target>
        </trans-unit>
        <trans-unit id="f3dc5df00a8e3e730c40fe838d9cf28eedc30a0f" translate="yes" xml:space="preserve">
          <source>Note that there are a number of &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.bulk_create&quot;&gt;&lt;code&gt;caveats to this method&lt;/code&gt;&lt;/a&gt;, so make sure it&amp;rsquo;s appropriate for your use case.</source>
          <target state="translated">&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.bulk_create&quot;&gt; &lt;code&gt;caveats to this method&lt;/code&gt; &lt;/a&gt;にはいくつかの注意点があるので、ユースケースに適していることを確認してください。</target>
        </trans-unit>
        <trans-unit id="ed11446b0c6e152b1bcc9ce1866f87a0033a7c22" translate="yes" xml:space="preserve">
          <source>Note that there are a number of &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.bulk_update&quot;&gt;&lt;code&gt;caveats to this method&lt;/code&gt;&lt;/a&gt;, so make sure it&amp;rsquo;s appropriate for your use case.</source>
          <target state="translated">&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.bulk_update&quot;&gt; &lt;code&gt;caveats to this method&lt;/code&gt; &lt;/a&gt;にはいくつかの注意点があるので、ユースケースに適していることを確認してください。</target>
        </trans-unit>
        <trans-unit id="ec4883b6f62b2a123fc0b302f2c2ef4d90d01466" translate="yes" xml:space="preserve">
          <source>Note that there is a difference between using &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.get&quot;&gt;&lt;code&gt;get()&lt;/code&gt;&lt;/a&gt;, and using &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.filter&quot;&gt;&lt;code&gt;filter()&lt;/code&gt;&lt;/a&gt; with a slice of &lt;code&gt;[0]&lt;/code&gt;. If there are no results that match the query, &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.get&quot;&gt;&lt;code&gt;get()&lt;/code&gt;&lt;/a&gt; will raise a &lt;code&gt;DoesNotExist&lt;/code&gt; exception. This exception is an attribute of the model class that the query is being performed on - so in the code above, if there is no &lt;code&gt;Entry&lt;/code&gt; object with a primary key of 1, Django will raise &lt;code&gt;Entry.DoesNotExist&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.get&quot;&gt; &lt;code&gt;get()&lt;/code&gt; &lt;/a&gt;を使用&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.filter&quot;&gt; &lt;code&gt;filter()&lt;/code&gt; &lt;/a&gt;と、 &lt;code&gt;[0]&lt;/code&gt; のスライスでfilter（）を使用することには違いがあることに注意してください。クエリに一致する結果がない場合、&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.get&quot;&gt; &lt;code&gt;get()&lt;/code&gt; &lt;/a&gt;は &lt;code&gt;DoesNotExist&lt;/code&gt; 例外を発生させます。この例外は、クエリが実行されているモデルクラスの属性です。上記のコードで、主キーが1の &lt;code&gt;Entry&lt;/code&gt; オブジェクトがない場合、Djangoは &lt;code&gt;Entry.DoesNotExist&lt;/code&gt; を発生させます。</target>
        </trans-unit>
        <trans-unit id="e083cac1d45447670947e2765f04c7f401bd320c" translate="yes" xml:space="preserve">
          <source>Note that there is an extra &amp;ldquo;Delete?&amp;rdquo; column that allows removing rows added using the &amp;ldquo;Add Another Choice&amp;rdquo; button and rows that have already been saved.</source>
          <target state="translated">追加の「削除？」があることに注意してください。[別の選択肢を追加]ボタンを使用して追加された行と、すでに保存されている行を削除できる列。</target>
        </trans-unit>
        <trans-unit id="d2130933d4a7a35839fd38a445d7757805cf2913" translate="yes" xml:space="preserve">
          <source>Note that there&amp;rsquo;s no need to specify the keyword argument of the model that defines the relationship. In the above example, we don&amp;rsquo;t pass the parameter &lt;code&gt;blog&lt;/code&gt; to &lt;code&gt;create()&lt;/code&gt;. Django figures out that the new &lt;code&gt;Entry&lt;/code&gt; object&amp;rsquo;s &lt;code&gt;blog&lt;/code&gt; field should be set to &lt;code&gt;b&lt;/code&gt;.</source>
          <target state="translated">関係を定義するモデルのキーワード引数を指定する必要がないことに注意してください。上記の例では、パラメーター &lt;code&gt;blog&lt;/code&gt; を &lt;code&gt;create()&lt;/code&gt; に渡しません。Djangoは、新しい &lt;code&gt;Entry&lt;/code&gt; オブジェクトの &lt;code&gt;blog&lt;/code&gt; フィールドを &lt;code&gt;b&lt;/code&gt; に設定する必要があることを理解します。</target>
        </trans-unit>
        <trans-unit id="2477290a913291cbc38ebf667d64085a6083a034" translate="yes" xml:space="preserve">
          <source>Note that these are &lt;em&gt;partial&lt;/em&gt; matches. &lt;code&gt;'PASS'&lt;/code&gt; will also match PASSWORD, just as &lt;code&gt;'TOKEN'&lt;/code&gt; will also match TOKENIZED and so on.</source>
          <target state="translated">これらは&lt;em&gt;部分&lt;/em&gt;一致であることに注意してください。 &lt;code&gt;'PASS'&lt;/code&gt; はPASSWORDにも一致し、 &lt;code&gt;'TOKEN'&lt;/code&gt; もTOKENIZEDなどに一致します。</target>
        </trans-unit>
        <trans-unit id="e1fc5fa3e855f806a565c439909e116dd3591f60" translate="yes" xml:space="preserve">
          <source>Note that these paths should use Unix-style forward slashes, even on Windows (e.g. &lt;code&gt;&quot;C:/Users/user/mysite/extra_static_content&quot;&lt;/code&gt;).</source>
          <target state="translated">これらのパスは、Windowsでも、Unixスタイルのスラッシュを使用する必要があることに注意してください（例： &lt;code&gt;&quot;C:/Users/user/mysite/extra_static_content&quot;&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="795b6608e8468ba6ef747bf20d7df8c092e409b7" translate="yes" xml:space="preserve">
          <source>Note that these paths should use Unix-style forward slashes, even on Windows.</source>
          <target state="translated">これらのパスはWindowsでもUnixスタイルのフォワードスラッシュを使用することに注意してください。</target>
        </trans-unit>
        <trans-unit id="2cf35c103d926ddc769c79ec834723110b7dd384" translate="yes" xml:space="preserve">
          <source>Note that this HTML version of the email contains a full traceback, with names and values of local variables at each level of the stack, plus the values of your Django settings. This information is potentially very sensitive, and you may not want to send it over email. Consider using something such as &lt;a href=&quot;https://pypi.org/project/sentry/&quot;&gt;Sentry&lt;/a&gt; to get the best of both worlds &amp;ndash; the rich information of full tracebacks plus the security of &lt;em&gt;not&lt;/em&gt; sending the information over email. You may also explicitly designate certain sensitive information to be filtered out of error reports &amp;ndash; learn more on &lt;a href=&quot;../howto/error-reporting#filtering-error-reports&quot;&gt;Filtering error reports&lt;/a&gt;.</source>
          <target state="translated">このHTMLバージョンのメールには、スタックの各レベルのローカル変数の名前と値、およびDjango設定の値を含む完全なトレースバックが含まれていることに注意してください。この情報は潜在的に非常に機密性が高く、電子メールで送信したくない場合があります。&lt;a href=&quot;https://pypi.org/project/sentry/&quot;&gt;Sentryの&lt;/a&gt;ようなものを使用して、両方の世界を最大限に活用することを検討してください。完全なトレースバックの豊富な情報に加えて、電子メールで情報を送信し&lt;em&gt;ない&lt;/em&gt;というセキュリティ。エラーレポートから除外する特定の機密情報を明示的に指定することもでき&lt;a href=&quot;../howto/error-reporting#filtering-error-reports&quot;&gt;ます&lt;/a&gt;。エラーレポートのフィルタリングの詳細をご覧ください。</target>
        </trans-unit>
        <trans-unit id="8a3d1d6be0677336f3c4ce808049c72f672b6643" translate="yes" xml:space="preserve">
          <source>Note that this checks only for the existence of a given key, not that the value of a key is non-empty.</source>
          <target state="translated">これは、与えられたキーが存在するかどうかだけをチェックし、キーの値が空でないかどうかはチェックしないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="0bbb736bbd29d6ee2584aa607cfd01a5217b40a3" translate="yes" xml:space="preserve">
          <source>Note that this equivalent to:</source>
          <target state="translated">これに相当することに注意してください。</target>
        </trans-unit>
        <trans-unit id="dba99c12af9dce2149cb16de622b8b3d2a6c2aad" translate="yes" xml:space="preserve">
          <source>Note that this is different than &lt;a href=&quot;#django.db.models.Field.null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt;. &lt;a href=&quot;#django.db.models.Field.null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt; is purely database-related, whereas &lt;a href=&quot;#django.db.models.Field.blank&quot;&gt;&lt;code&gt;blank&lt;/code&gt;&lt;/a&gt; is validation-related. If a field has &lt;code&gt;blank=True&lt;/code&gt;, form validation will allow entry of an empty value. If a field has &lt;code&gt;blank=False&lt;/code&gt;, the field will be required.</source>
          <target state="translated">これは&lt;a href=&quot;#django.db.models.Field.null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt;とは異なることに注意してください。&lt;a href=&quot;#django.db.models.Field.null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt;は純粋にデータベース関連ですが、&lt;a href=&quot;#django.db.models.Field.blank&quot;&gt; &lt;code&gt;blank&lt;/code&gt; &lt;/a&gt;は検証関連です。フィールドに &lt;code&gt;blank=True&lt;/code&gt; がある場合、フォームの検証では空の値を入力できます。フィールドに &lt;code&gt;blank=False&lt;/code&gt; がある場合、そのフィールドは必須です。</target>
        </trans-unit>
        <trans-unit id="e1a927a86b31c6fe256c0c201864b03e59d37343" translate="yes" xml:space="preserve">
          <source>Note that this is different than &lt;a href=&quot;../../ref/models/fields#django.db.models.Field.null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt;. &lt;a href=&quot;../../ref/models/fields#django.db.models.Field.null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt; is purely database-related, whereas &lt;a href=&quot;../../ref/models/fields#django.db.models.Field.blank&quot;&gt;&lt;code&gt;blank&lt;/code&gt;&lt;/a&gt; is validation-related. If a field has &lt;a href=&quot;../../ref/models/fields#django.db.models.Field.blank&quot;&gt;&lt;code&gt;blank=True&lt;/code&gt;&lt;/a&gt;, form validation will allow entry of an empty value. If a field has &lt;a href=&quot;../../ref/models/fields#django.db.models.Field.blank&quot;&gt;&lt;code&gt;blank=False&lt;/code&gt;&lt;/a&gt;, the field will be required.</source>
          <target state="translated">これは&lt;a href=&quot;../../ref/models/fields#django.db.models.Field.null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt;とは異なることに注意してください。&lt;a href=&quot;../../ref/models/fields#django.db.models.Field.null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt;は純粋にデータベース関連ですが、&lt;a href=&quot;../../ref/models/fields#django.db.models.Field.blank&quot;&gt; &lt;code&gt;blank&lt;/code&gt; &lt;/a&gt;は検証関連です。フィールドに&lt;a href=&quot;../../ref/models/fields#django.db.models.Field.blank&quot;&gt; &lt;code&gt;blank=True&lt;/code&gt; &lt;/a&gt;がある場合、フォームの検証では空の値を入力できます。フィールドに&lt;a href=&quot;../../ref/models/fields#django.db.models.Field.blank&quot;&gt; &lt;code&gt;blank=False&lt;/code&gt; &lt;/a&gt;がある場合、そのフィールドは必須です。</target>
        </trans-unit>
        <trans-unit id="65807d9d49cf72ec77bf7a331d692c91fa7c9ef4" translate="yes" xml:space="preserve">
          <source>Note that this is not quite the same as slicing from the end of a sequence in Python. The above example will return the last item first, then the penultimate item and so on. If we had a Python sequence and looked at &lt;code&gt;seq[-5:]&lt;/code&gt;, we would see the fifth-last item first. Django doesn&amp;rsquo;t support that mode of access (slicing from the end), because it&amp;rsquo;s not possible to do it efficiently in SQL.</source>
          <target state="translated">これはPythonのシーケンスの最後からスライスすることとはまったく同じではないことに注意してください。上記の例では、最後のアイテムが最初に返され、次に最後から2番目のアイテムが返されます。Pythonシーケンスがあり、 &lt;code&gt;seq[-5:]&lt;/code&gt; を見た場合、最後から5番目の項目が最初に表示されます。Djangoは、SQLで効率的に実行することができないため、そのアクセスモード（最後からスライス）をサポートしていません。</target>
        </trans-unit>
        <trans-unit id="bb0ad9f46efaf6ea73d6b6569c751fa30e6aab82" translate="yes" xml:space="preserve">
          <source>Note that this isn&amp;rsquo;t necessarily the time zone of the server. For example, one server may serve multiple Django-powered sites, each with a separate time zone setting.</source>
          <target state="translated">これは必ずしもサーバーのタイムゾーンではないことに注意してください。たとえば、1つのサーバーが複数のDjangoを使用するサイトにサービスを提供し、それぞれに個別のタイムゾーン設定がある場合があります。</target>
        </trans-unit>
        <trans-unit id="c953b63059173178458ed761fbedea0ac39027ac" translate="yes" xml:space="preserve">
          <source>Note that this only works given two things:</source>
          <target state="translated">これは、2つのものが与えられた場合にのみ機能することに注意してください。</target>
        </trans-unit>
        <trans-unit id="43246198826a48db05dda06a13016417e496af6b" translate="yes" xml:space="preserve">
          <source>Note that this server does &lt;em&gt;not&lt;/em&gt; automatically detect changes to your Python source code (as &lt;a href=&quot;#django-admin-runserver&quot;&gt;&lt;code&gt;runserver&lt;/code&gt;&lt;/a&gt; does). It does, however, detect changes to templates.</source>
          <target state="translated">このサーバーは、（&lt;a href=&quot;#django-admin-runserver&quot;&gt; &lt;code&gt;runserver&lt;/code&gt; &lt;/a&gt;が行うように）Pythonソースコードへの変更を自動的に検出し&lt;em&gt;ない&lt;/em&gt;ことに注意してください。ただし、テンプレートへの変更は検出されます。</target>
        </trans-unit>
        <trans-unit id="77708f0489400a9d946be1d05b99670aa11a0f4b" translate="yes" xml:space="preserve">
          <source>Note that this value is &lt;em&gt;not&lt;/em&gt; HTML-escaped in automatically-generated forms. This lets you include HTML in &lt;a href=&quot;#django.db.models.Field.help_text&quot;&gt;&lt;code&gt;help_text&lt;/code&gt;&lt;/a&gt; if you so desire. For example:</source>
          <target state="translated">この値は、自動生成されたフォームで&lt;em&gt;は&lt;/em&gt; HTMLエスケープされ&lt;em&gt;ない&lt;/em&gt;ことに注意してください。これにより、必要に&lt;a href=&quot;#django.db.models.Field.help_text&quot;&gt; &lt;code&gt;help_text&lt;/code&gt; &lt;/a&gt; HTMLをhelp_textに含めることができます。例えば：</target>
        </trans-unit>
        <trans-unit id="bcf38a05a5b6f4694b53daa8eea90c967fc370a2" translate="yes" xml:space="preserve">
          <source>Note that this value is &lt;em&gt;not&lt;/em&gt; HTML-escaped when it&amp;rsquo;s displayed in the admin interface. This lets you include HTML if you so desire. Alternatively you can use plain text and &lt;a href=&quot;../../utils#django.utils.html.escape&quot;&gt;&lt;code&gt;django.utils.html.escape()&lt;/code&gt;&lt;/a&gt; to escape any HTML special characters.</source>
          <target state="translated">この値は、管理インターフェースに表示されるときにHTMLエスケープされ&lt;em&gt;ない&lt;/em&gt;ことに注意してください。これにより、必要に応じてHTMLを含めることができます。または、プレーンテキストと&lt;a href=&quot;../../utils#django.utils.html.escape&quot;&gt; &lt;code&gt;django.utils.html.escape()&lt;/code&gt; &lt;/a&gt;を使用して、HTMLの特殊文字をエスケープすることもできます。</target>
        </trans-unit>
        <trans-unit id="906411ef03113b0636d2db25f54351b72fe13574" translate="yes" xml:space="preserve">
          <source>Note that unlike &lt;a href=&quot;#django.contrib.sessions.serializers.PickleSerializer&quot;&gt;&lt;code&gt;PickleSerializer&lt;/code&gt;&lt;/a&gt;, the &lt;a href=&quot;#django.contrib.sessions.serializers.JSONSerializer&quot;&gt;&lt;code&gt;JSONSerializer&lt;/code&gt;&lt;/a&gt; cannot handle arbitrary Python data types. As is often the case, there is a trade-off between convenience and security. If you wish to store more advanced data types including &lt;code&gt;datetime&lt;/code&gt; and &lt;code&gt;Decimal&lt;/code&gt; in JSON backed sessions, you will need to write a custom serializer (or convert such values to a JSON serializable object before storing them in &lt;code&gt;request.session&lt;/code&gt;). While serializing these values is often straightforward (&lt;a href=&quot;../serialization#django.core.serializers.json.DjangoJSONEncoder&quot;&gt;&lt;code&gt;DjangoJSONEncoder&lt;/code&gt;&lt;/a&gt; may be helpful), writing a decoder that can reliably get back the same thing that you put in is more fragile. For example, you run the risk of returning a &lt;code&gt;datetime&lt;/code&gt; that was actually a string that just happened to be in the same format chosen for &lt;code&gt;datetime&lt;/code&gt;s).</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.sessions.serializers.PickleSerializer&quot;&gt; &lt;code&gt;PickleSerializer&lt;/code&gt; &lt;/a&gt;とは異なり、&lt;a href=&quot;#django.contrib.sessions.serializers.JSONSerializer&quot;&gt; &lt;code&gt;JSONSerializer&lt;/code&gt; &lt;/a&gt;は任意のPythonデータ型を処理できないことに注意してください。よくあることですが、利便性とセキュリティの間にはトレードオフがあります。 &lt;code&gt;datetime&lt;/code&gt; や &lt;code&gt;Decimal&lt;/code&gt; などのより高度なデータ型をJSONを使用するセッションに格納する場合は、カスタム &lt;code&gt;request.session&lt;/code&gt; を作成する（または、そのような値をrequest.sessionに格納する前にJSONシリアル化可能なオブジェクトに変換する）必要があります。多くの場合、これらの値のシリアル化は簡単です（&lt;a href=&quot;../serialization#django.core.serializers.json.DjangoJSONEncoder&quot;&gt; &lt;code&gt;DjangoJSONEncoder&lt;/code&gt; &lt;/a&gt;が役立つ場合があります）が、入力したものと同じものを確実に取り戻すことができるデコーダーを作成することは、より脆弱です。たとえば、 &lt;code&gt;datetime&lt;/code&gt; を返すリスクがあるこれは実際には、たまたま &lt;code&gt;datetime&lt;/code&gt; に選択されたのと同じ形式の文字列でした。</target>
        </trans-unit>
        <trans-unit id="702d81c03f196bf44f8bcd6b11a9b027b74ab4bb" translate="yes" xml:space="preserve">
          <source>Note that unlike a dictionary, &lt;code&gt;del&lt;/code&gt; doesn&amp;rsquo;t raise &lt;code&gt;KeyError&lt;/code&gt; if the header field doesn&amp;rsquo;t exist.</source>
          <target state="translated">辞書とは異なり、ヘッダーフィールドが存在しない場合、 &lt;code&gt;del&lt;/code&gt; は &lt;code&gt;KeyError&lt;/code&gt; を発生させないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="66f752221b158da1f8b91ce1869204010b1f48ea" translate="yes" xml:space="preserve">
          <source>Note that using &lt;code&gt;YearInSchool.SENIOR&lt;/code&gt;, &lt;code&gt;YearInSchool['SENIOR']&lt;/code&gt;, or &lt;code&gt;YearInSchool('SR')&lt;/code&gt; to access or lookup enum members work as expected, as do the &lt;code&gt;.name&lt;/code&gt; and &lt;code&gt;.value&lt;/code&gt; properties on the members.</source>
          <target state="translated">&lt;code&gt;YearInSchool.SENIOR&lt;/code&gt; 、 &lt;code&gt;YearInSchool['SENIOR']&lt;/code&gt; 、または &lt;code&gt;YearInSchool('SR')&lt;/code&gt; を使用して列挙型メンバーにアクセスまたは参照すると、メンバーの &lt;code&gt;.name&lt;/code&gt; プロパティと &lt;code&gt;.value&lt;/code&gt; プロパティが期待どおりに機能することに注意してください。</target>
        </trans-unit>
        <trans-unit id="f50008769d1a14e593867a6db9cdf9470058cdd6" translate="yes" xml:space="preserve">
          <source>Note that using &lt;code&gt;iterator()&lt;/code&gt; on a &lt;code&gt;QuerySet&lt;/code&gt; which has already been evaluated will force it to evaluate again, repeating the query.</source>
          <target state="translated">なお、使用した &lt;code&gt;iterator()&lt;/code&gt; の &lt;code&gt;QuerySet&lt;/code&gt; クエリを繰り返し、すでに再評価することを強制され、評価されています。</target>
        </trans-unit>
        <trans-unit id="f5a5705d4f4e4dba6360106b56cde3d815c0b93d" translate="yes" xml:space="preserve">
          <source>Note that we pass the &lt;code&gt;queryset&lt;/code&gt; argument in both the &lt;code&gt;POST&lt;/code&gt; and &lt;code&gt;GET&lt;/code&gt; cases in this example.</source>
          <target state="translated">この例では、 &lt;code&gt;POST&lt;/code&gt; と &lt;code&gt;GET&lt;/code&gt; の両方のケースで &lt;code&gt;queryset&lt;/code&gt; 引数を渡していることに注意してください。</target>
        </trans-unit>
        <trans-unit id="fe5575ba32184ff281804a3e6ed550d830b3259c" translate="yes" xml:space="preserve">
          <source>Note that when &lt;code&gt;unique&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;, you don&amp;rsquo;t need to specify &lt;a href=&quot;#django.db.models.Field.db_index&quot;&gt;&lt;code&gt;db_index&lt;/code&gt;&lt;/a&gt;, because &lt;code&gt;unique&lt;/code&gt; implies the creation of an index.</source>
          <target state="translated">ときに注意 &lt;code&gt;unique&lt;/code&gt; である &lt;code&gt;True&lt;/code&gt; 、あなたが指定する必要はありません&lt;a href=&quot;#django.db.models.Field.db_index&quot;&gt; &lt;code&gt;db_index&lt;/code&gt; を&lt;/a&gt;するので、 &lt;code&gt;unique&lt;/code&gt; インデックスの作成を意味します。</target>
        </trans-unit>
        <trans-unit id="39167b947707fbb5b9cf4b6e5a2e4668c034defb" translate="yes" xml:space="preserve">
          <source>Note that when a model is deleted, related files are not deleted. If you need to cleanup orphaned files, you&amp;rsquo;ll need to handle it yourself (for instance, with a custom management command that can be run manually or scheduled to run periodically via e.g. cron).</source>
          <target state="translated">モデルを削除しても、関連ファイルは削除されないことに注意してください。孤立したファイルをクリーンアップする必要がある場合は、自分で処理する必要があります（たとえば、手動で実行したり、cronなどで定期的に実行するようにスケジュールしたりできるカスタム管理コマンドを使用します）。</target>
        </trans-unit>
        <trans-unit id="719be46afabc795f700c5cdc4fb51623fb2f80af" translate="yes" xml:space="preserve">
          <source>Note that when deferred fields are accessed, the loading of the deferred field&amp;rsquo;s value happens through this method. Thus it is possible to customize the way deferred loading happens. The example below shows how one can reload all of the instance&amp;rsquo;s fields when a deferred field is reloaded:</source>
          <target state="translated">据え置きフィールドにアクセスすると、据え置きフィールドの値のロードはこのメソッドを介して行われることに注意してください。したがって、遅延ロードが発生する方法をカスタマイズすることが可能です。以下の例は、遅延フィールドが再ロードされるときに、インスタンスのすべてのフィールドを再ロードする方法を示しています。</target>
        </trans-unit>
        <trans-unit id="94c1c16b5b2cd3f86c4031d357763da656691cbe" translate="yes" xml:space="preserve">
          <source>Note that when using this technique the &lt;a href=&quot;../../signals#django.db.models.signals.m2m_changed&quot;&gt;&lt;code&gt;m2m_changed&lt;/code&gt;&lt;/a&gt; signals aren&amp;rsquo;t triggered. This is because as far as the admin is concerned, &lt;code&gt;through&lt;/code&gt; is just a model with two foreign key fields rather than a many-to-many relation.</source>
          <target state="translated">この手法を使用する場合、&lt;a href=&quot;../../signals#django.db.models.signals.m2m_changed&quot;&gt; &lt;code&gt;m2m_changed&lt;/code&gt; &lt;/a&gt;信号はトリガーされないことに注意してください。これは、管理者に関する限り、 &lt;code&gt;through&lt;/code&gt; は多対多の関係ではなく、2つの外部キーフィールドを持つモデルにすぎないためです。</target>
        </trans-unit>
        <trans-unit id="b05fa36010992ac15dfe2760e5308fe656f763bc" translate="yes" xml:space="preserve">
          <source>Note that when you&amp;rsquo;re using &lt;code&gt;takes_context=True&lt;/code&gt;, there&amp;rsquo;s no need to pass arguments to the template tag. It automatically gets access to the context.</source>
          <target state="translated">&lt;code&gt;takes_context=True&lt;/code&gt; を使用している場合は、テンプレートタグに引数を渡す必要がないことに注意してください。自動的にコンテキストにアクセスします。</target>
        </trans-unit>
        <trans-unit id="79079404d7b87dcc164745f56a3bf81208b2cc17" translate="yes" xml:space="preserve">
          <source>Note that whenever you deal with uploaded files, you should pay close attention to where you&amp;rsquo;re uploading them and what type of files they are, to avoid security holes. &lt;em&gt;Validate all uploaded files&lt;/em&gt; so that you&amp;rsquo;re sure the files are what you think they are. For example, if you blindly let somebody upload files, without validation, to a directory that&amp;rsquo;s within your Web server&amp;rsquo;s document root, then somebody could upload a CGI or PHP script and execute that script by visiting its URL on your site. Don&amp;rsquo;t allow that.</source>
          <target state="translated">アップロードされたファイルを扱うときは常に、セキュリティホールを回避するために、アップロードする場所とファイルの種類に細心の注意を払う必要があることに注意してください。&lt;em&gt;アップロードしたすべてのファイルを検証し&lt;/em&gt;て、ファイルが意図したとおりであることを確認します。たとえば、誰かに検証せずにWebサーバーのドキュメントルート内のディレクトリにファイルをアップロードすることを許可すると、誰かがCGIまたはPHPスクリプトをアップロードし、サイトのURLにアクセスしてそのスクリプトを実行する可能性があります。それを許してはいけない。</target>
        </trans-unit>
        <trans-unit id="39f8400a649c5d93c855cdc636e888afa63eb937" translate="yes" xml:space="preserve">
          <source>Note that where the password is passed to one of these functions, this should always be the clear text password - not a hashed password.</source>
          <target state="translated">パスワードがこれらの関数のいずれかに渡される場合は、ハッシュ化されたパスワードではなく、常にクリアテキストのパスワードでなければならないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="d093d349e1d459362f8b4a2b1a67b11670c43223" translate="yes" xml:space="preserve">
          <source>Note that while you can &lt;em&gt;define&lt;/em&gt; a custom manager on the abstract model, you can&amp;rsquo;t &lt;em&gt;invoke&lt;/em&gt; any methods using the abstract model. That is:</source>
          <target state="translated">抽象モデルでカスタムマネージャーを&lt;em&gt;定義&lt;/em&gt;することはでき&lt;em&gt;ます&lt;/em&gt;が、抽象モデルを使用してメソッドを&lt;em&gt;呼び出す&lt;/em&gt;ことはできません。あれは：</target>
        </trans-unit>
        <trans-unit id="3265dff3dd371813ef80cf218a365cc918b03a70" translate="yes" xml:space="preserve">
          <source>Note that you can backslash-escape a format string if you want to use the &amp;ldquo;raw&amp;rdquo; value. In this example, both &amp;ldquo;h&amp;rdquo; and &amp;ldquo;m&amp;rdquo; are backslash-escaped, because otherwise each is a format string that displays the hour and the month, respectively:</source>
          <target state="translated">「raw」値を使用する場合は、フォーマット文字列をバックスラッシュでエスケープできることに注意してください。この例では、「h」と「m」の両方がバックスラッシュエスケープされています。それ以外の場合、それぞれが時間と月をそれぞれ表示するフォーマット文字列であるためです。</target>
        </trans-unit>
        <trans-unit id="7476fdc821a56bd47f0eda1f0b41d488383e4103" translate="yes" xml:space="preserve">
          <source>Note that you can backslash-escape a format string if you want to use the &amp;ldquo;raw&amp;rdquo; value. In this example, both &amp;ldquo;o&amp;rdquo; and &amp;ldquo;f&amp;rdquo; are backslash-escaped, because otherwise each is a format string that displays the year and the time, respectively:</source>
          <target state="translated">「raw」値を使用する場合は、フォーマット文字列をバックスラッシュでエスケープできることに注意してください。この例では、「o」と「f」の両方がバックスラッシュエスケープされています。それ以外の場合、それぞれが年と時刻をそれぞれ表示するフォーマット文字列であるためです。</target>
        </trans-unit>
        <trans-unit id="4f73d7dc009cf6ecb0d2dc25b668df5cadd84847" translate="yes" xml:space="preserve">
          <source>Note that you can give &lt;code&gt;Paginator&lt;/code&gt; a list/tuple, a Django &lt;code&gt;QuerySet&lt;/code&gt;, or any other object with a &lt;code&gt;count()&lt;/code&gt; or &lt;code&gt;__len__()&lt;/code&gt; method. When determining the number of objects contained in the passed object, &lt;code&gt;Paginator&lt;/code&gt; will first try calling &lt;code&gt;count()&lt;/code&gt;, then fallback to using &lt;code&gt;len()&lt;/code&gt; if the passed object has no &lt;code&gt;count()&lt;/code&gt; method. This allows objects such as Django&amp;rsquo;s &lt;code&gt;QuerySet&lt;/code&gt; to use a more efficient &lt;code&gt;count()&lt;/code&gt; method when available.</source>
          <target state="translated">あなたが与えることができることに注意してください &lt;code&gt;Paginator&lt;/code&gt; リスト/タプル、Djangoの &lt;code&gt;QuerySet&lt;/code&gt; を持つ、または他のオブジェクト &lt;code&gt;count()&lt;/code&gt; または &lt;code&gt;__len__()&lt;/code&gt; メソッドを。渡されたオブジェクトに含まれるオブジェクトの数を決定するとき、 &lt;code&gt;Paginator&lt;/code&gt; は最初に &lt;code&gt;count()&lt;/code&gt; の呼び出しを試み、次に渡されたオブジェクトに &lt;code&gt;count()&lt;/code&gt; メソッドがない場合は &lt;code&gt;len()&lt;/code&gt; の使用にフォールバックします。これにより、Djangoの &lt;code&gt;QuerySet&lt;/code&gt; などのオブジェクトは、利用可能な場合により効率的な &lt;code&gt;count()&lt;/code&gt; メソッドを使用できます。</target>
        </trans-unit>
        <trans-unit id="9e42e9704f036f9a6dfea5bd7eeae341bb89a4c9" translate="yes" xml:space="preserve">
          <source>Note that you can redirect standard output and error streams as all commands support the &lt;code&gt;stdout&lt;/code&gt; and &lt;code&gt;stderr&lt;/code&gt; options. For example, you could write:</source>
          <target state="translated">すべてのコマンドが &lt;code&gt;stdout&lt;/code&gt; および &lt;code&gt;stderr&lt;/code&gt; オプションをサポートしているため、標準出力とエラーストリームをリダイレクトできることに注意してください。たとえば、次のように書くことができます。</target>
        </trans-unit>
        <trans-unit id="28f96228f714507e7175e473320352a2987351be" translate="yes" xml:space="preserve">
          <source>Note that you can use the decorators in conjunction with the middleware. Use of a decorator overrides the middleware.</source>
          <target state="translated">ミドルウェアと併用してデコレータを使用することができることに注意してください。デコレータの使用は、ミドルウェアを上書きします。</target>
        </trans-unit>
        <trans-unit id="b96ab2ffca51fc0d415d2ea2c91ff51267bb654f" translate="yes" xml:space="preserve">
          <source>Note that you don&amp;rsquo;t have to use Django&amp;rsquo;s template system if you prefer another system. While Django&amp;rsquo;s template system is particularly well-integrated with Django&amp;rsquo;s model layer, nothing forces you to use it. For that matter, you don&amp;rsquo;t have to use Django&amp;rsquo;s database API, either. You can use another database abstraction layer, you can read XML files, you can read files off disk, or anything you want. Each piece of Django &amp;ndash; models, views, templates &amp;ndash; is decoupled from the next.</source>
          <target state="translated">別のシステムを使用する場合は、Djangoのテンプレートシステムを使用する必要はありません。 Djangoのテンプレートシステムは特にDjangoのモデルレイヤーと十分に統合されていますが、強制的に使用する必要はありません。さらに言えば、DjangoのデータベースAPIを使用する必要もありません。別のデータベース抽象化レイヤーを使用したり、XMLファイルを読み取ったり、ディスクからファイルを読み取ったり、必要なものをすべて使用したりできます。 Djangoの各部分（モデル、ビュー、テンプレート）は、次のものから切り離されています。</target>
        </trans-unit>
        <trans-unit id="f31c5c5b9d42b1077c8970e03ed8c44f9ddad790" translate="yes" xml:space="preserve">
          <source>Note that you may not want autodiscovery of &lt;code&gt;admin&lt;/code&gt; modules when using your own &lt;code&gt;AdminSite&lt;/code&gt; instance since you will likely be importing all the per-app &lt;code&gt;admin&lt;/code&gt; modules in your &lt;code&gt;myproject.admin&lt;/code&gt; module. This means you need to put &lt;code&gt;'django.contrib.admin.apps.SimpleAdminConfig'&lt;/code&gt; instead of &lt;code&gt;'django.contrib.admin'&lt;/code&gt; in your &lt;a href=&quot;../../settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">独自の &lt;code&gt;AdminSite&lt;/code&gt; インスタンスを使用する場合、 &lt;code&gt;myproject.admin&lt;/code&gt; モジュール内のすべてのアプリごとの &lt;code&gt;admin&lt;/code&gt; モジュールをインポートする可能性が高いため、 &lt;code&gt;admin&lt;/code&gt; モジュールの自動検出を望まない場合があることに注意してください。これは、&lt;a href=&quot;../../settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt;設定に &lt;code&gt;'django.contrib.admin.apps.SimpleAdminConfig'&lt;/code&gt; 代わりに &lt;code&gt;'django.contrib.admin'&lt;/code&gt; を配置する必要があることを意味します。</target>
        </trans-unit>
        <trans-unit id="21df1330fbaf74e0680f4452a5609d54fd10fa1a" translate="yes" xml:space="preserve">
          <source>Note that you must save an object before it can be assigned to a foreign key relationship. For example, creating an &lt;code&gt;Article&lt;/code&gt; with unsaved &lt;code&gt;Reporter&lt;/code&gt; raises &lt;code&gt;ValueError&lt;/code&gt;:</source>
          <target state="translated">オブジェクトを外部キー関係に割り当てる前に、オブジェクトを保存する必要があることに注意してください。たとえば、作成 &lt;code&gt;Article&lt;/code&gt; 保存されていないとの &lt;code&gt;Reporter&lt;/code&gt; 提起する &lt;code&gt;ValueError&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="376f6d08577acaa494289e31892d8f4bc49a71b1" translate="yes" xml:space="preserve">
          <source>Note that you must save an object before it can be assigned to a one-to-one relationship. For example, creating a &lt;code&gt;Restaurant&lt;/code&gt; with unsaved &lt;code&gt;Place&lt;/code&gt; raises &lt;code&gt;ValueError&lt;/code&gt;:</source>
          <target state="translated">1対1の関係に割り当てる前に、オブジェクトを保存する必要があることに注意してください。たとえば、作成 &lt;code&gt;Restaurant&lt;/code&gt; 、保存されていないと &lt;code&gt;Place&lt;/code&gt; 提起 &lt;code&gt;ValueError&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="3aa4492251f1f89b7d1b67c82923a765943b8b96" translate="yes" xml:space="preserve">
          <source>Note that you set &lt;code&gt;feed_type&lt;/code&gt; to a class object, not an instance.</source>
          <target state="translated">&lt;code&gt;feed_type&lt;/code&gt; をインスタンスではなくクラスオブジェクトに設定することに注意してください。</target>
        </trans-unit>
        <trans-unit id="41780517e58575ae1fd4b7cf13682bde6c859248" translate="yes" xml:space="preserve">
          <source>Note that you&amp;rsquo;ll have to provide the surrounding &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; elements yourself.</source>
          <target state="translated">周囲の &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; または &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; 要素を自分で提供する必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="739a26284bb028620f19294b60895ab661309c8a" translate="yes" xml:space="preserve">
          <source>Note that you&amp;rsquo;ll need to call &lt;a href=&quot;#django.contrib.sessions.base_session.AbstractBaseSession.get_decoded&quot;&gt;&lt;code&gt;get_decoded()&lt;/code&gt;&lt;/a&gt; to get the session dictionary. This is necessary because the dictionary is stored in an encoded format:</source>
          <target state="translated">セッションディクショナリを取得するには、&lt;a href=&quot;#django.contrib.sessions.base_session.AbstractBaseSession.get_decoded&quot;&gt; &lt;code&gt;get_decoded()&lt;/code&gt; &lt;/a&gt;を呼び出す必要があることに注意してください。辞書はエンコードされた形式で保存されるため、これは必要です。</target>
        </trans-unit>
        <trans-unit id="5764965c279a49130b8ab3f921987b56c15bcdef" translate="yes" xml:space="preserve">
          <source>Note that, with static (middleware-less) translation, the language is in &lt;code&gt;settings.LANGUAGE_CODE&lt;/code&gt;, while with dynamic (middleware) translation, it&amp;rsquo;s in &lt;code&gt;request.LANGUAGE_CODE&lt;/code&gt;.</source>
          <target state="translated">静的（ミドルウェアなし）の翻訳では、言語は &lt;code&gt;settings.LANGUAGE_CODE&lt;/code&gt; にあり、動的（ミドルウェア）の翻訳では、 &lt;code&gt;request.LANGUAGE_CODE&lt;/code&gt; にあることに注意してください。</target>
        </trans-unit>
        <trans-unit id="285f98e8d01e4962eff6724b78a3c6724d0931e6" translate="yes" xml:space="preserve">
          <source>Note that:</source>
          <target state="translated">そのことに注意してください。</target>
        </trans-unit>
        <trans-unit id="2c5683f35f8382bf853d6c54b47a1958d38402e3" translate="yes" xml:space="preserve">
          <source>Note the &lt;code&gt;list()&lt;/code&gt; call around the Blog &lt;code&gt;QuerySet&lt;/code&gt; to force execution of the first query. Without it, a nested query would be executed, because &lt;a href=&quot;../../topics/db/queries#querysets-are-lazy&quot;&gt;QuerySets are lazy&lt;/a&gt;.</source>
          <target state="translated">最初のクエリの実行を強制するために、Blog &lt;code&gt;QuerySet&lt;/code&gt; の周りの &lt;code&gt;list()&lt;/code&gt; 呼び出しに注意してください。&lt;a href=&quot;../../topics/db/queries#querysets-are-lazy&quot;&gt;QuerySetはレイジー&lt;/a&gt;であるため、それがないと、ネストされたクエリが実行されます。</target>
        </trans-unit>
        <trans-unit id="50042f95afef19ddcee485ac7f7b1bcf7743b564" translate="yes" xml:space="preserve">
          <source>Note the &lt;code&gt;pk&lt;/code&gt; named group, which &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin.get_object&quot;&gt;&lt;code&gt;get_object()&lt;/code&gt;&lt;/a&gt; uses to look up the &lt;code&gt;Author&lt;/code&gt; instance. You could also use a slug, or any of the other features of &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin&quot;&gt;&lt;code&gt;SingleObjectMixin&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin.get_object&quot;&gt; &lt;code&gt;get_object()&lt;/code&gt; &lt;/a&gt;が &lt;code&gt;Author&lt;/code&gt; インスタンスを検索するために使用するグループという名前の &lt;code&gt;pk&lt;/code&gt; に注意してください。slug、または&lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin&quot;&gt; &lt;code&gt;SingleObjectMixin&lt;/code&gt; の&lt;/a&gt;他の機能を使用することもできます。</target>
        </trans-unit>
        <trans-unit id="1548150f65982792369c241ae984f2b20c5090cc" translate="yes" xml:space="preserve">
          <source>Note the addition of &lt;code&gt;import datetime&lt;/code&gt; and &lt;code&gt;from django.utils import
timezone&lt;/code&gt;, to reference Python&amp;rsquo;s standard &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#module-datetime&quot;&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/a&gt; module and Django&amp;rsquo;s time-zone-related utilities in &lt;a href=&quot;../ref/utils#module-django.utils.timezone&quot;&gt;&lt;code&gt;django.utils.timezone&lt;/code&gt;&lt;/a&gt;, respectively. If you aren&amp;rsquo;t familiar with time zone handling in Python, you can learn more in the &lt;a href=&quot;../topics/i18n/timezones&quot;&gt;time zone support docs&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;import datetime&lt;/code&gt; と &lt;code&gt;from django.utils import timezone&lt;/code&gt; の追加に注意してください。それぞれ、&lt;a href=&quot;../ref/utils#module-django.utils.timezone&quot;&gt; &lt;code&gt;django.utils.timezone&lt;/code&gt; &lt;/a&gt;でPythonの標準の&lt;a href=&quot;https://docs.python.org/3/library/datetime.html#module-datetime&quot;&gt; &lt;code&gt;datetime&lt;/code&gt; &lt;/a&gt;モジュールとDjangoのタイムゾーン関連ユーティリティを参照します。Pythonでのタイムゾーンの処理に慣れていない場合は、&lt;a href=&quot;../topics/i18n/timezones&quot;&gt;タイムゾーンのサポートドキュメントで&lt;/a&gt;詳細を確認できます。</target>
        </trans-unit>
        <trans-unit id="36e778e75c22dd51e685a8060e6bf755ecbdde51" translate="yes" xml:space="preserve">
          <source>Note the first query will match &lt;code&gt;'Beatles Blog'&lt;/code&gt;, &lt;code&gt;'beatles blog'&lt;/code&gt;, &lt;code&gt;'BeAtLes BLoG'&lt;/code&gt;, etc.</source>
          <target state="translated">最初のクエリは &lt;code&gt;'Beatles Blog'&lt;/code&gt; 、 &lt;code&gt;'beatles blog'&lt;/code&gt; 、 &lt;code&gt;'BeAtLes BLoG'&lt;/code&gt; などに一致することに注意してください。</target>
        </trans-unit>
        <trans-unit id="20d78a8e421517dfc8501178399cb2a435e63306" translate="yes" xml:space="preserve">
          <source>Note the following:</source>
          <target state="translated">以下に注意してください。</target>
        </trans-unit>
        <trans-unit id="4270a55c8d2d5be21936635e96658dc1d9f116f5" translate="yes" xml:space="preserve">
          <source>Note the second example is more restrictive.</source>
          <target state="translated">2 番目の例は、より制限的なものであることに注意してください。</target>
        </trans-unit>
        <trans-unit id="f90cc3f74d38c8aecec6b1b3c2cf127ed6722f4d" translate="yes" xml:space="preserve">
          <source>Note there is a race condition if you allow objects to be created while this migration is running. Objects created after the &lt;code&gt;AddField&lt;/code&gt; and before &lt;code&gt;RunPython&lt;/code&gt; will have their original &lt;code&gt;uuid&lt;/code&gt;&amp;rsquo;s overwritten.</source>
          <target state="translated">この移行の実行中にオブジェクトの作成を許可すると、競合状態になることに注意してください。後に作成されたオブジェクト &lt;code&gt;AddField&lt;/code&gt; と前 &lt;code&gt;RunPython&lt;/code&gt; は、それらの元になります &lt;code&gt;uuid&lt;/code&gt; の上書き。</target>
        </trans-unit>
        <trans-unit id="e57ad67f321891403673ac74379faf842d068ac0" translate="yes" xml:space="preserve">
          <source>Note this doesn&amp;rsquo;t delete the related objects &amp;ndash; it just disassociates them.</source>
          <target state="translated">これは関連オブジェクトを削除しないことに注意してください&amp;ndash;関連付けを解除するだけです。</target>
        </trans-unit>
        <trans-unit id="625d205aa6a02c8990ca032fce68080c4bbaac13" translate="yes" xml:space="preserve">
          <source>Note this will match any record with a &lt;code&gt;pub_date&lt;/code&gt; that falls on a Monday (day 1 of the week), regardless of the month or year in which it occurs. Week days are indexed with day 1 being Monday and day 7 being Sunday.</source>
          <target state="translated">Note this will match any record with a &lt;code&gt;pub_date&lt;/code&gt; that falls on a Monday (day 1 of the week), regardless of the month or year in which it occurs. Week days are indexed with day 1 being Monday and day 7 being Sunday.</target>
        </trans-unit>
        <trans-unit id="1e1c648f6363a79666bda4022f326dccc253cf89" translate="yes" xml:space="preserve">
          <source>Note this will match any record with a &lt;code&gt;pub_date&lt;/code&gt; that falls on a Monday (day 2 of the week), regardless of the month or year in which it occurs. Week days are indexed with day 1 being Sunday and day 7 being Saturday.</source>
          <target state="translated">これは、 &lt;code&gt;pub_date&lt;/code&gt; した月や年に関係なく、月曜日（曜日の2日目）に該当するpub_dateを持つすべてのレコードに一致することに注意してください。曜日は、日1が日曜日、日7が土曜日として索引付けされます。</target>
        </trans-unit>
        <trans-unit id="e6eb4a1725fee4458ebd4aae91065f1733dbed3c" translate="yes" xml:space="preserve">
          <source>Note this will match any record with a pub_date on the third day of the month, such as January 3, July 3, etc.</source>
          <target state="translated">これは、1月3日、7月3日などのように、月の3日目にpub_dateを持つすべてのレコードにマッチすることに注意してください。</target>
        </trans-unit>
        <trans-unit id="91a2cf41eebcf0cbbe41c2fed03384b950262468" translate="yes" xml:space="preserve">
          <source>Note this will match the headline &lt;code&gt;'Lennon honored today'&lt;/code&gt; but not &lt;code&gt;'lennon
honored today'&lt;/code&gt;.</source>
          <target state="translated">これは見出しマッチします注意してください &lt;code&gt;'Lennon honored today'&lt;/code&gt; ではなく &lt;code&gt;'lennon honored today'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fd54aed7458a908757d562528231778dc691427f" translate="yes" xml:space="preserve">
          <source>Note this will match the headline &lt;code&gt;'Today Lennon honored'&lt;/code&gt; but not &lt;code&gt;'today lennon honored'&lt;/code&gt;.</source>
          <target state="translated">これは見出しマッチします注意してください &lt;code&gt;'Today Lennon honored'&lt;/code&gt; ではなく &lt;code&gt;'today lennon honored'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="97147c98752b50c4fd43dfdbddc52f844a56c7e1" translate="yes" xml:space="preserve">
          <source>Note, however, that like &lt;a href=&quot;#django.db.models.Model.full_clean&quot;&gt;&lt;code&gt;Model.full_clean()&lt;/code&gt;&lt;/a&gt;, a model&amp;rsquo;s &lt;code&gt;clean()&lt;/code&gt; method is not invoked when you call your model&amp;rsquo;s &lt;a href=&quot;#django.db.models.Model.save&quot;&gt;&lt;code&gt;save()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">ただし、&lt;a href=&quot;#django.db.models.Model.full_clean&quot;&gt; &lt;code&gt;Model.full_clean()&lt;/code&gt; の&lt;/a&gt;ように、モデルの&lt;a href=&quot;#django.db.models.Model.save&quot;&gt; &lt;code&gt;save()&lt;/code&gt; &lt;/a&gt;メソッドを呼び出しても、モデルの &lt;code&gt;clean()&lt;/code&gt; メソッドは呼び出されないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="e3ef265b66c27a036bf430bdf6cdf4e5f69c53b0" translate="yes" xml:space="preserve">
          <source>Note, however, that the first of these will raise &lt;code&gt;IndexError&lt;/code&gt; while the second will raise &lt;code&gt;DoesNotExist&lt;/code&gt; if no objects match the given criteria. See &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.get&quot;&gt;&lt;code&gt;get()&lt;/code&gt;&lt;/a&gt; for more details.</source>
          <target state="translated">ただし、 &lt;code&gt;IndexError&lt;/code&gt; れた条件に一致するオブジェクトがない場合、最初の &lt;code&gt;DoesNotExist&lt;/code&gt; はIndexErrorが発生し、2番目のコードではDoesNotExistが発生することに注意してください。詳細については、&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.get&quot;&gt; &lt;code&gt;get()&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="4bf23a731a060601e951cfde8e837da30936df56" translate="yes" xml:space="preserve">
          <source>Note, however, that these bulk update methods cannot call the &lt;code&gt;save()&lt;/code&gt; or &lt;code&gt;delete()&lt;/code&gt; methods of individual instances, which means that any custom behavior you have added for these methods will not be executed, including anything driven from the normal database object &lt;a href=&quot;../../ref/signals&quot;&gt;signals&lt;/a&gt;.</source>
          <target state="translated">ただし、これらの一括更新メソッドは個々のインスタンスの &lt;code&gt;save()&lt;/code&gt; または &lt;code&gt;delete()&lt;/code&gt; メソッドを呼び出すことができないことに注意してください。つまり、これらのメソッドに追加したカスタム動作は、通常のデータベースオブジェクト&lt;a href=&quot;../../ref/signals&quot;&gt;シグナル&lt;/a&gt;から駆動されるものも含めて実行されません。。</target>
        </trans-unit>
        <trans-unit id="c9a64d96116de9297dfea7c94ac09033ffbd0323" translate="yes" xml:space="preserve">
          <source>Note, the beginning of the pattern (&lt;code&gt;r'^static/'&lt;/code&gt;) should be your &lt;a href=&quot;../settings#std:setting-STATIC_URL&quot;&gt;&lt;code&gt;STATIC_URL&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">パターン（ &lt;code&gt;r'^static/'&lt;/code&gt; ）の&lt;a href=&quot;../settings#std:setting-STATIC_URL&quot;&gt; &lt;code&gt;STATIC_URL&lt;/code&gt; &lt;/a&gt;設定にする必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="53e1a6480426cb88534e0d776b00fdf6ab609686" translate="yes" xml:space="preserve">
          <source>Note, the snippet assumes your &lt;a href=&quot;settings#std:setting-MEDIA_URL&quot;&gt;&lt;code&gt;MEDIA_URL&lt;/code&gt;&lt;/a&gt; has a value of &lt;code&gt;'/media/'&lt;/code&gt;. This will call the &lt;a href=&quot;#django.views.static.serve&quot;&gt;&lt;code&gt;serve()&lt;/code&gt;&lt;/a&gt; view, passing in the path from the URLconf and the (required) &lt;code&gt;document_root&lt;/code&gt; parameter.</source>
          <target state="translated">スニペットでは、&lt;a href=&quot;settings#std:setting-MEDIA_URL&quot;&gt; &lt;code&gt;MEDIA_URL&lt;/code&gt; &lt;/a&gt;の値が &lt;code&gt;'/media/'&lt;/code&gt; と想定しています。これは&lt;a href=&quot;#django.views.static.serve&quot;&gt; &lt;code&gt;serve()&lt;/code&gt; &lt;/a&gt;ビューを呼び出し、URLconfからのパスと（必須の） &lt;code&gt;document_root&lt;/code&gt; パラメーターを渡します。</target>
        </trans-unit>
        <trans-unit id="83423c198b6099edba08f185f940042d5dba3b79" translate="yes" xml:space="preserve">
          <source>Note:</source>
          <target state="translated">Note:</target>
        </trans-unit>
        <trans-unit id="9ef9ec7a9d7bf170473fb43f8eca38078f7b19b8" translate="yes" xml:space="preserve">
          <source>Note: &lt;code&gt;order_by('?')&lt;/code&gt; queries may be expensive and slow, depending on the database backend you&amp;rsquo;re using.</source>
          <target state="translated">注：使用しているデータベースのバックエンドによっては、 &lt;code&gt;order_by('?')&lt;/code&gt; クエリは負荷が高く、低速になる場合があります。</target>
        </trans-unit>
        <trans-unit id="befec88db067d5cfe6f992fabb031cd376020ac6" translate="yes" xml:space="preserve">
          <source>Note: As with &lt;code&gt;get()&lt;/code&gt;, a &lt;a href=&quot;../../ref/exceptions#django.core.exceptions.MultipleObjectsReturned&quot;&gt;&lt;code&gt;MultipleObjectsReturned&lt;/code&gt;&lt;/a&gt; exception will be raised if more than one object is found.</source>
          <target state="translated">注： &lt;code&gt;get()&lt;/code&gt; と同様に、&lt;a href=&quot;../../ref/exceptions#django.core.exceptions.MultipleObjectsReturned&quot;&gt; &lt;code&gt;MultipleObjectsReturned&lt;/code&gt; &lt;/a&gt;オブジェクトが見つかった場合、MultipleObjectsReturned例外が発生します。</target>
        </trans-unit>
        <trans-unit id="910a845f2c2f78c037f270de3da706b062724005" translate="yes" xml:space="preserve">
          <source>Note: Don&amp;rsquo;t use this if all you want to do is determine if at least one result exists. It&amp;rsquo;s more efficient to use &lt;a href=&quot;#django.db.models.query.QuerySet.exists&quot;&gt;&lt;code&gt;exists()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">注：少なくとも1つの結果が存在するかどうかを確認するだけの場合は、これを使用しないでください。&lt;a href=&quot;#django.db.models.query.QuerySet.exists&quot;&gt; &lt;code&gt;exists()&lt;/code&gt; &lt;/a&gt;を使用する方が効率的です。</target>
        </trans-unit>
        <trans-unit id="385f626475e0107c6a0177ca3b63ffea00ce9f62" translate="yes" xml:space="preserve">
          <source>Note: If you only need to determine the number of records in the set (and don&amp;rsquo;t need the actual objects), it&amp;rsquo;s much more efficient to handle a count at the database level using SQL&amp;rsquo;s &lt;code&gt;SELECT COUNT(*)&lt;/code&gt;. Django provides a &lt;a href=&quot;#django.db.models.query.QuerySet.count&quot;&gt;&lt;code&gt;count()&lt;/code&gt;&lt;/a&gt; method for precisely this reason.</source>
          <target state="translated">注：セット内のレコード数を決定するだけでよく、実際のオブジェクトは必要ない場合は、SQLの &lt;code&gt;SELECT COUNT(*)&lt;/code&gt; を使用してデータベースレベルでカウントを処理する方がはるかに効率的です。Djangoは、まさにこの理由で&lt;a href=&quot;#django.db.models.query.QuerySet.count&quot;&gt; &lt;code&gt;count()&lt;/code&gt; &lt;/a&gt;メソッドを提供しています。</target>
        </trans-unit>
        <trans-unit id="e985be7c9234ac7fdd7d0605d286a7defa1cd034" translate="yes" xml:space="preserve">
          <source>Note: If you only want to determine if at least one result exists (and don&amp;rsquo;t need the actual objects), it&amp;rsquo;s more efficient to use &lt;a href=&quot;#django.db.models.query.QuerySet.exists&quot;&gt;&lt;code&gt;exists()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">注：少なくとも1つの結果が存在するかどうかを判断したいだけで、実際のオブジェクトは必要ない場合は、&lt;a href=&quot;#django.db.models.query.QuerySet.exists&quot;&gt; &lt;code&gt;exists()&lt;/code&gt; &lt;/a&gt;を使用する方が効率的です。</target>
        </trans-unit>
        <trans-unit id="d230e76ec82af164b0c7d3b96c1e1a1415482dfc" translate="yes" xml:space="preserve">
          <source>Note: Without a really compelling reason, such as a host that doesn&amp;rsquo;t support them, you should stick to the cache backends included with Django. They&amp;rsquo;ve been well-tested and are well-documented.</source>
          <target state="translated">注：それらをサポートしないホストなど、本当に説得力のある理由がない限り、Djangoに含まれているキャッシュバックエンドを使用する必要があります。それらは十分にテストされ、十分に文書化されています。</target>
        </trans-unit>
        <trans-unit id="70440046a3dc2e079f23ee1c57dfa76669b732aa" translate="yes" xml:space="preserve">
          <source>Notes</source>
          <target state="translated">Notes</target>
        </trans-unit>
        <trans-unit id="a8813e550b224d06483ad44dd0caab3e91810f54" translate="yes" xml:space="preserve">
          <source>Notes on field ordering</source>
          <target state="translated">フィールド発注の注意点</target>
        </trans-unit>
        <trans-unit id="03285d22efba2cd6d7db91dcbcfa20e93a3abcbd" translate="yes" xml:space="preserve">
          <source>Notes on specific fields</source>
          <target state="translated">特定分野に関する注意事項</target>
        </trans-unit>
        <trans-unit id="9c3befe7e22c8667bc957541f49b0ee79970b588" translate="yes" xml:space="preserve">
          <source>Notes:</source>
          <target state="translated">Notes:</target>
        </trans-unit>
        <trans-unit id="000e64e4b4ee3745e9af8db1a328fea32acd56cf" translate="yes" xml:space="preserve">
          <source>Notice also that as both sides are used multiple times in the query the params need to contain &lt;code&gt;lhs_params&lt;/code&gt; and &lt;code&gt;rhs_params&lt;/code&gt; multiple times.</source>
          <target state="translated">また、クエリで両側が複数回使用されるため、paramsには &lt;code&gt;lhs_params&lt;/code&gt; と &lt;code&gt;rhs_params&lt;/code&gt; を複数回含める必要があることにも注意してください。</target>
        </trans-unit>
        <trans-unit id="2384e08c0f35bbe96198a9eea0586bf6a621eb2b" translate="yes" xml:space="preserve">
          <source>Notice first that we&amp;rsquo;ve moved &lt;code&gt;make_published&lt;/code&gt; into a method and renamed the &lt;code&gt;modeladmin&lt;/code&gt; parameter to &lt;code&gt;self&lt;/code&gt;, and second that we&amp;rsquo;ve now put the string &lt;code&gt;'make_published'&lt;/code&gt; in &lt;code&gt;actions&lt;/code&gt; instead of a direct function reference. This tells the &lt;a href=&quot;index#django.contrib.admin.ModelAdmin&quot;&gt;&lt;code&gt;ModelAdmin&lt;/code&gt;&lt;/a&gt; to look up the action as a method.</source>
          <target state="translated">最初に、 &lt;code&gt;make_published&lt;/code&gt; をメソッドに移動し、 &lt;code&gt;modeladmin&lt;/code&gt; パラメーターの名前を &lt;code&gt;self&lt;/code&gt; に変更したことに注意してください。 &lt;code&gt;'make_published'&lt;/code&gt; 、関数の直接参照ではなく、文字列'make_published'を &lt;code&gt;actions&lt;/code&gt; に追加しました。これにより、&lt;a href=&quot;index#django.contrib.admin.ModelAdmin&quot;&gt; &lt;code&gt;ModelAdmin&lt;/code&gt; &lt;/a&gt;はアクションをメソッドとして検索します。</target>
        </trans-unit>
        <trans-unit id="8b0cc5089c4b2a1219a366349dd5e31eab5291cc" translate="yes" xml:space="preserve">
          <source>Notice how the first block ends with &lt;code&gt;class=&quot;odd&quot;&lt;/code&gt; and the new one starts with &lt;code&gt;class=&quot;odd&quot;&lt;/code&gt;. Without the &lt;code&gt;{% resetcycle %}&lt;/code&gt; tag, the second block would start with &lt;code&gt;class=&quot;even&quot;&lt;/code&gt;.</source>
          <target state="translated">お知らせどのようにして最初のブロックが終わる &lt;code&gt;class=&quot;odd&quot;&lt;/code&gt; として新しいものが始まる &lt;code&gt;class=&quot;odd&quot;&lt;/code&gt; 。なし &lt;code&gt;{% resetcycle %}&lt;/code&gt; タグ、第2のブロックはで始まるだろう &lt;code&gt;class=&quot;even&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f70af69036a60f939ee11c7ec6dd9119fc16aaef" translate="yes" xml:space="preserve">
          <source>Notice how we need to explicitly render &lt;code&gt;{{ form.id }}&lt;/code&gt;. This ensures that the model formset, in the &lt;code&gt;POST&lt;/code&gt; case, will work correctly. (This example assumes a primary key named &lt;code&gt;id&lt;/code&gt;. If you&amp;rsquo;ve explicitly defined your own primary key that isn&amp;rsquo;t called &lt;code&gt;id&lt;/code&gt;, make sure it gets rendered.)</source>
          <target state="translated">&lt;code&gt;{{ form.id }}&lt;/code&gt; を明示的にレンダリングする必要があることに注意してください。これにより、 &lt;code&gt;POST&lt;/code&gt; の場合のモデルフォームセットが正しく機能するようになります。（この例では、名前の主キーを前提と &lt;code&gt;id&lt;/code&gt; 。あなたが明示的に呼び出されていない独自の主キー定義されている場合は &lt;code&gt;id&lt;/code&gt; 、必ずそれがレンダリングされるします。）</target>
        </trans-unit>
        <trans-unit id="0229f8c21d6b19db58706ac73ebaa3b227103d86" translate="yes" xml:space="preserve">
          <source>Notice how we pass &lt;code&gt;instance&lt;/code&gt; in both the &lt;code&gt;POST&lt;/code&gt; and &lt;code&gt;GET&lt;/code&gt; cases.</source>
          <target state="translated">&lt;code&gt;POST&lt;/code&gt; と &lt;code&gt;GET&lt;/code&gt; の両方の &lt;code&gt;instance&lt;/code&gt; でインスタンスを渡す方法に注意してください。</target>
        </trans-unit>
        <trans-unit id="aa5250b6be8df62e51f37c769420fd8720950beb" translate="yes" xml:space="preserve">
          <source>Notice how we set &lt;code&gt;self.object&lt;/code&gt; within &lt;code&gt;get()&lt;/code&gt; so we can use it again later in &lt;code&gt;get_context_data()&lt;/code&gt; and &lt;code&gt;get_queryset()&lt;/code&gt;. If you don&amp;rsquo;t set &lt;code&gt;template_name&lt;/code&gt;, the template will default to the normal &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#ListView&quot;&gt;&lt;code&gt;ListView&lt;/code&gt;&lt;/a&gt; choice, which in this case would be &lt;code&gt;&quot;books/book_list.html&quot;&lt;/code&gt; because it&amp;rsquo;s a list of books; &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#ListView&quot;&gt;&lt;code&gt;ListView&lt;/code&gt;&lt;/a&gt; knows nothing about &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin&quot;&gt;&lt;code&gt;SingleObjectMixin&lt;/code&gt;&lt;/a&gt;, so it doesn&amp;rsquo;t have any clue this view is anything to do with a &lt;code&gt;Publisher&lt;/code&gt;.</source>
          <target state="translated">後で &lt;code&gt;get_context_data()&lt;/code&gt; および &lt;code&gt;get_queryset()&lt;/code&gt; で再び使用できるように、 &lt;code&gt;get()&lt;/code&gt; 内で &lt;code&gt;self.object&lt;/code&gt; を設定する方法に注意してください。 &lt;code&gt;template_name&lt;/code&gt; を設定しない場合、テンプレートはデフォルトの通常の&lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#ListView&quot;&gt; &lt;code&gt;ListView&lt;/code&gt; &lt;/a&gt;選択になります &lt;code&gt;&quot;books/book_list.html&quot;&lt;/code&gt; この場合は、書籍のリストであるため、「books / book_list.html」になります。&lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#ListView&quot;&gt; &lt;code&gt;ListView&lt;/code&gt; &lt;/a&gt;は&lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin&quot;&gt; &lt;code&gt;SingleObjectMixin&lt;/code&gt; &lt;/a&gt;について何も認識していないため、このビューが &lt;code&gt;Publisher&lt;/code&gt; と関係する手掛かりはありません。</target>
        </trans-unit>
        <trans-unit id="0f13f463d1411391b196b9c3d220258b3801b8b2" translate="yes" xml:space="preserve">
          <source>Notice how we set &lt;code&gt;self.object&lt;/code&gt; within &lt;code&gt;get()&lt;/code&gt; so we can use it again later in &lt;code&gt;get_context_data()&lt;/code&gt; and &lt;code&gt;get_queryset()&lt;/code&gt;. If you don&amp;rsquo;t set &lt;code&gt;template_name&lt;/code&gt;, the template will default to the normal &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/ref/class-based-views/flattened-index/#ListView&quot;&gt;&lt;code&gt;ListView&lt;/code&gt;&lt;/a&gt; choice, which in this case would be &lt;code&gt;&quot;books/book_list.html&quot;&lt;/code&gt; because it&amp;rsquo;s a list of books; &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/ref/class-based-views/flattened-index/#ListView&quot;&gt;&lt;code&gt;ListView&lt;/code&gt;&lt;/a&gt; knows nothing about &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin&quot;&gt;&lt;code&gt;SingleObjectMixin&lt;/code&gt;&lt;/a&gt;, so it doesn&amp;rsquo;t have any clue this view is anything to do with a &lt;code&gt;Publisher&lt;/code&gt;.</source>
          <target state="translated">Notice how we set &lt;code&gt;self.object&lt;/code&gt; within &lt;code&gt;get()&lt;/code&gt; so we can use it again later in &lt;code&gt;get_context_data()&lt;/code&gt; and &lt;code&gt;get_queryset()&lt;/code&gt; . If you don&amp;rsquo;t set &lt;code&gt;template_name&lt;/code&gt; , the template will default to the normal &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/ref/class-based-views/flattened-index/#ListView&quot;&gt; &lt;code&gt;ListView&lt;/code&gt; &lt;/a&gt; choice, which in this case would be &lt;code&gt;&quot;books/book_list.html&quot;&lt;/code&gt; because it&amp;rsquo;s a list of books; &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/ref/class-based-views/flattened-index/#ListView&quot;&gt; &lt;code&gt;ListView&lt;/code&gt; &lt;/a&gt; knows nothing about &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin&quot;&gt; &lt;code&gt;SingleObjectMixin&lt;/code&gt; &lt;/a&gt;, so it doesn&amp;rsquo;t have any clue this view is anything to do with a &lt;code&gt;Publisher&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f88f6f6b02e714ff2c4fe469bdc1f6fb93d22663" translate="yes" xml:space="preserve">
          <source>Notice how we used &lt;code&gt;self&lt;/code&gt; to scope the &lt;code&gt;CycleNode&lt;/code&gt; specific information within the &lt;code&gt;render_context&lt;/code&gt;. There may be multiple &lt;code&gt;CycleNodes&lt;/code&gt; in a given template, so we need to be careful not to clobber another node&amp;rsquo;s state information. The easiest way to do this is to always use &lt;code&gt;self&lt;/code&gt; as the key into &lt;code&gt;render_context&lt;/code&gt;. If you&amp;rsquo;re keeping track of several state variables, make &lt;code&gt;render_context[self]&lt;/code&gt; a dictionary.</source>
          <target state="translated">&lt;code&gt;self&lt;/code&gt; を使用して &lt;code&gt;render_context&lt;/code&gt; 内の &lt;code&gt;CycleNode&lt;/code&gt; 固有の情報をスコープする方法に注意してください。特定のテンプレートに複数の &lt;code&gt;CycleNodes&lt;/code&gt; が存在する可能性があるため、別のノードの状態情報を破壊しないように注意する必要があります。これを行う最も簡単な方法は、常に &lt;code&gt;self&lt;/code&gt; を &lt;code&gt;render_context&lt;/code&gt; へのキーとして使用することです。複数の状態変数を追跡している場合は、 &lt;code&gt;render_context[self]&lt;/code&gt; を辞書にします。</target>
        </trans-unit>
        <trans-unit id="cb164517055d21810f3fcb5b55cae736b85fa840" translate="yes" xml:space="preserve">
          <source>Notice that &lt;code&gt;(0, 0)&lt;/code&gt; is the first and last coordinate &amp;ndash; if they were not equal, an error would be raised.</source>
          <target state="translated">通知することを &lt;code&gt;(0, 0)&lt;/code&gt; 、最初と最後の座標である-それらは等しくなかった場合、エラーが発生することになります。</target>
        </trans-unit>
        <trans-unit id="ac06989a6888c756b6647843b41cc87a3733f5ba" translate="yes" xml:space="preserve">
          <source>Notice that along with a filtered &lt;code&gt;queryset&lt;/code&gt;, we&amp;rsquo;re also using a custom template name. If we didn&amp;rsquo;t, the generic view would use the same template as the &amp;ldquo;vanilla&amp;rdquo; object list, which might not be what we want.</source>
          <target state="translated">フィルター処理された &lt;code&gt;queryset&lt;/code&gt; と共に、カスタムテンプレート名も使用していることに注意してください。そうしなかった場合、汎用ビューは「バニラ」オブジェクトリストと同じテンプレートを使用しますが、これは必要なものではない可能性があります。</target>
        </trans-unit>
        <trans-unit id="423d90eb39ba0efaae8b6fe6038d1df1eed0d32b" translate="yes" xml:space="preserve">
          <source>Notice that the custom patterns are included &lt;em&gt;before&lt;/em&gt; the regular admin URLs: the admin URL patterns are very permissive and will match nearly anything, so you&amp;rsquo;ll usually want to prepend your custom URLs to the built-in ones.</source>
          <target state="translated">カスタムパターンは通常の管理URLの&lt;em&gt;前&lt;/em&gt;に含まれていることに注意してください。管理URLパターンは非常に寛容であり、ほぼすべてに一致するため、通常は組み込みURLの前にカスタムURLを付加する必要があります。</target>
        </trans-unit>
        <trans-unit id="a287bfd08800792a69e7a9c13eeb25e0be2944c0" translate="yes" xml:space="preserve">
          <source>Notice that the function takes a &lt;code&gt;sender&lt;/code&gt; argument, along with wildcard keyword arguments (&lt;code&gt;**kwargs&lt;/code&gt;); all signal handlers must take these arguments.</source>
          <target state="translated">この関数は、ワイルドカードキーワード引数（ &lt;code&gt;**kwargs&lt;/code&gt; ）とともに &lt;code&gt;sender&lt;/code&gt; 引数を取ることに注意してください。すべてのシグナルハンドラはこれらの引数を取る必要があります。</target>
        </trans-unit>
        <trans-unit id="c6d96c5e92b1bc39c53248522c2579dd44ac99ae" translate="yes" xml:space="preserve">
          <source>Notice that there isn&amp;rsquo;t a lot in these examples that&amp;rsquo;s PDF-specific &amp;ndash; just the bits using &lt;code&gt;reportlab&lt;/code&gt;. You can use a similar technique to generate any arbitrary format that you can find a Python library for. Also see &lt;a href=&quot;outputting-csv&quot;&gt;Outputting CSV with Django&lt;/a&gt; for another example and some techniques you can use when generated text-based formats.</source>
          <target state="translated">これらの例にはPDF固有のものが多くないことに注意して &lt;code&gt;reportlab&lt;/code&gt; を使用している部分だけです。同様の手法を使用して、Pythonライブラリを検索できる任意の形式を生成できます。テキストベースのフォーマットを生成するときに使用できる別の例といくつかのテクニックについては&lt;a href=&quot;outputting-csv&quot;&gt;、Django&lt;/a&gt;でCSVを出力するもご覧ください。</target>
        </trans-unit>
        <trans-unit id="62566baa057cfcfdb2bc356cfe8e2afa1aa5d755" translate="yes" xml:space="preserve">
          <source>Notice that there isn&amp;rsquo;t very much specific to CSV here &amp;ndash; just the specific output format. You can use either of these techniques to output any text-based format you can dream of. You can also use a similar technique to generate arbitrary binary data; see &lt;a href=&quot;outputting-pdf&quot;&gt;Outputting PDFs with Django&lt;/a&gt; for an example.</source>
          <target state="translated">ここでは、CSVに固有のものはそれほど多くなく、特定の出力形式だけがあることに注意してください。これらの手法のいずれかを使用して、夢のようなテキストベースの形式を出力できます。同様の手法を使用して、任意のバイナリデータを生成することもできます。例については、&lt;a href=&quot;outputting-pdf&quot;&gt;Django&lt;/a&gt;を使用したPDFの出力を参照してください。</target>
        </trans-unit>
        <trans-unit id="ec92f0273100502d01875ac12f88f482d518616e" translate="yes" xml:space="preserve">
          <source>Notice that we always return a &lt;code&gt;Hand&lt;/code&gt; instance from these methods. That&amp;rsquo;s the Python object type we want to store in the model&amp;rsquo;s attribute.</source>
          <target state="translated">これらのメソッドから常に &lt;code&gt;Hand&lt;/code&gt; インスタンスを返すことに注意してください。これが、モデルの属性に保存するPythonオブジェクトタイプです。</target>
        </trans-unit>
        <trans-unit id="7cb962ccf88e6d68aadedd4642d88f1b96287c61" translate="yes" xml:space="preserve">
          <source>Notice that we have to pass &lt;a href=&quot;../../ref/request-response#django.http.HttpRequest.FILES&quot;&gt;&lt;code&gt;request.FILES&lt;/code&gt;&lt;/a&gt; into the form&amp;rsquo;s constructor; this is how file data gets bound into a form.</source>
          <target state="translated">&lt;a href=&quot;../../ref/request-response#django.http.HttpRequest.FILES&quot;&gt; &lt;code&gt;request.FILES&lt;/code&gt; &lt;/a&gt;をフォームのコンストラクターに渡す必要があることに注意してください。これは、ファイルデータがフォームにバインドされる方法です。</target>
        </trans-unit>
        <trans-unit id="ebe9aa5966d9fd8238eb5df6b3f145913747b3be" translate="yes" xml:space="preserve">
          <source>Notice the wrapped view in the fifth line above:</source>
          <target state="translated">上の5行目にある包み込まれたような景色に注目してください。</target>
        </trans-unit>
        <trans-unit id="7d3a34e68924487518a00635e921200b1ac742b0" translate="yes" xml:space="preserve">
          <source>Now &amp;ldquo;Choices&amp;rdquo; is an available option in the Django admin. The &amp;ldquo;Add choice&amp;rdquo; form looks like this:</source>
          <target state="translated">現在、「選択肢」はDjango管理画面で利用可能なオプションです。「選択肢を追加」フォームは次のようになります。</target>
        </trans-unit>
        <trans-unit id="3506a6d9619d5b948e78683002fea85609bda448" translate="yes" xml:space="preserve">
          <source>Now Django knows to include the &lt;code&gt;polls&lt;/code&gt; app. Let&amp;rsquo;s run another command:</source>
          <target state="translated">これでDjangoは &lt;code&gt;polls&lt;/code&gt; アプリを含めることを認識しました。別のコマンドを実行してみましょう：</target>
        </trans-unit>
        <trans-unit id="7f03ca20e19c12646270f4a55b9c68e694ccfc63" translate="yes" xml:space="preserve">
          <source>Now books can use that natural key to refer to &lt;code&gt;Person&lt;/code&gt; objects:</source>
          <target state="translated">これで、本はその自然キーを使用して &lt;code&gt;Person&lt;/code&gt; オブジェクトを参照できます。</target>
        </trans-unit>
        <trans-unit id="f48eb4671182254c386d97a21fd740b58e671430" translate="yes" xml:space="preserve">
          <source>Now change your &lt;code&gt;polls/index.html&lt;/code&gt; template from:</source>
          <target state="translated">次に、 &lt;code&gt;polls/index.html&lt;/code&gt; テンプレートを次のように変更します。</target>
        </trans-unit>
        <trans-unit id="3c17a0825c6bc86f0b3d2cec1786b40f2a2a7adf" translate="yes" xml:space="preserve">
          <source>Now create a directory called &lt;code&gt;admin&lt;/code&gt; inside &lt;code&gt;templates&lt;/code&gt;, and copy the template &lt;code&gt;admin/base_site.html&lt;/code&gt; from within the default Django admin template directory in the source code of Django itself (&lt;code&gt;django/contrib/admin/templates&lt;/code&gt;) into that directory.</source>
          <target state="translated">今と呼ばれるディレクトリを作成し &lt;code&gt;admin&lt;/code&gt; の内部 &lt;code&gt;templates&lt;/code&gt; 、テンプレートのコピー &lt;code&gt;admin/base_site.html&lt;/code&gt; Djangoの自身のソースコードにデフォルトのDjangoのadminテンプレートディレクトリ内から（ &lt;code&gt;django/contrib/admin/templates&lt;/code&gt; ）そのディレクトリに。</target>
        </trans-unit>
        <trans-unit id="ad66c95e391e146cd22fbf05a88db00e41ed0fca" translate="yes" xml:space="preserve">
          <source>Now create admin views for the &lt;code&gt;Person&lt;/code&gt; and &lt;code&gt;Group&lt;/code&gt; models:</source>
          <target state="translated">次に、 &lt;code&gt;Person&lt;/code&gt; モデルと &lt;code&gt;Group&lt;/code&gt; モデルの管理ビューを作成します。</target>
        </trans-unit>
        <trans-unit id="32171b8cd59d1de6923e5f771f767aa171c9ff0d" translate="yes" xml:space="preserve">
          <source>Now for our hands-on example.</source>
          <target state="translated">では、実践例を見てみましょう。</target>
        </trans-unit>
        <trans-unit id="729e7fc2aa726bb0bbccd67b261c45e009998ba6" translate="yes" xml:space="preserve">
          <source>Now in your time on the web you may have come across such beauties as &amp;ldquo;ME2/Sites/dirmod.asp?sid=&amp;amp;type=gen&amp;amp;mod=Core+Pages&amp;amp;gid=A6CD4967199A42D9B65B1B&amp;rdquo;. You will be pleased to know that Django allows us much more elegant &lt;em&gt;URL patterns&lt;/em&gt; than that.</source>
          <target state="translated">さて、Webを閲覧していると、「ME2 / Sites / dirmod.asp？sid =＆type = gen＆mod = Core + Pages＆gid = A6CD4967199A42D9B65B1B」のような美しさに出くわしたかもしれません。Djangoでは、それよりもはるかに洗練された&lt;em&gt;URLパターンを&lt;/em&gt;使用できることを知って喜んでいます。</target>
        </trans-unit>
        <trans-unit id="4a92f218cc3e9875e924bf54caa6461c527dc629" translate="yes" xml:space="preserve">
          <source>Now in your time on the web you may have come across such beauties as &lt;code&gt;ME2/Sites/dirmod.htm?sid=&amp;amp;type=gen&amp;amp;mod=Core+Pages&amp;amp;gid=A6CD4967199A42D9B65B1B&lt;/code&gt;. You will be pleased to know that Django allows us much more elegant &lt;em&gt;URL patterns&lt;/em&gt; than that.</source>
          <target state="translated">Now in your time on the web you may have come across such beauties as &lt;code&gt;ME2/Sites/dirmod.htm?sid=&amp;amp;type=gen&amp;amp;mod=Core+Pages&amp;amp;gid=A6CD4967199A42D9B65B1B&lt;/code&gt; . You will be pleased to know that Django allows us much more elegant &lt;em&gt;URL patterns&lt;/em&gt; than that.</target>
        </trans-unit>
        <trans-unit id="d7ae0cff622895ccfc58ecd68188d07d6dbf3c75" translate="yes" xml:space="preserve">
          <source>Now is a good time to check your backup strategy for these files.</source>
          <target state="translated">今こそ、これらのファイルのバックアップ戦略を確認しましょう。</target>
        </trans-unit>
        <trans-unit id="36e9dc72ab05bd8c0ba6109d8103272522c57402" translate="yes" xml:space="preserve">
          <source>Now it&amp;rsquo;s time to go through all the changes made in our patch. To stage all the changes ready for commit, run:</source>
          <target state="translated">さて、パッチに加えられたすべての変更を確認する時が来ました。コミットの準備ができているすべての変更をステージングするには、次のコマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="f163c45d21c3827f27074167e2374cf71f319599" translate="yes" xml:space="preserve">
          <source>Now let&amp;rsquo;s add a few more views to &lt;code&gt;polls/views.py&lt;/code&gt;. These views are slightly different, because they take an argument:</source>
          <target state="translated">次に、いくつかのビューを &lt;code&gt;polls/views.py&lt;/code&gt; に追加します。これらのビューは引数をとるため、少し異なります。</target>
        </trans-unit>
        <trans-unit id="f9a6d41951be6209dd204da14498c508cbc2918a" translate="yes" xml:space="preserve">
          <source>Now let&amp;rsquo;s take a closer look at the &lt;code&gt;model&lt;/code&gt; argument we&amp;rsquo;ve been using all along. The &lt;code&gt;model&lt;/code&gt; argument, which specifies the database model that the view will operate upon, is available on all the generic views that operate on a single object or a collection of objects. However, the &lt;code&gt;model&lt;/code&gt; argument is not the only way to specify the objects that the view will operate upon &amp;ndash; you can also specify the list of objects using the &lt;code&gt;queryset&lt;/code&gt; argument:</source>
          <target state="translated">次に、これまでずっと使用してきた &lt;code&gt;model&lt;/code&gt; 引数を詳しく見てみましょう。 &lt;code&gt;model&lt;/code&gt; ビューは、時に動作すること、データベースモデルを指定する引数は、単一のオブジェクトまたはオブジェクトのコレクションで動作するすべての汎用ビューで提供されています。ただし、 &lt;code&gt;model&lt;/code&gt; 引数は、ビューが操作するオブジェクトを指定する唯一の方法ではありません &lt;code&gt;queryset&lt;/code&gt; 引数を使用してオブジェクトのリストを指定することもできます。</target>
        </trans-unit>
        <trans-unit id="04c4dc8474d5993bb9a263be8a4f51e3572a25c0" translate="yes" xml:space="preserve">
          <source>Now let&amp;rsquo;s update our &lt;code&gt;index&lt;/code&gt; view in &lt;code&gt;polls/views.py&lt;/code&gt; to use the template:</source>
          <target state="translated">今度は &lt;code&gt;polls/views.py&lt;/code&gt; の &lt;code&gt;index&lt;/code&gt; ビューを更新して、テンプレートを使用します。</target>
        </trans-unit>
        <trans-unit id="f7acf85e2f16d675683380e16460476b2319c859" translate="yes" xml:space="preserve">
          <source>Now normal &lt;code&gt;Person&lt;/code&gt; queries will be unordered and &lt;code&gt;OrderedPerson&lt;/code&gt; queries will be ordered by &lt;code&gt;last_name&lt;/code&gt;.</source>
          <target state="translated">これで、通常の &lt;code&gt;Person&lt;/code&gt; クエリは順序付けされず、 &lt;code&gt;OrderedPerson&lt;/code&gt; クエリはlast_nameで順序付けされ &lt;code&gt;last_name&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="52926bd958ab5c5a3c94125229eeb6b79ce9a920" translate="yes" xml:space="preserve">
          <source>Now sit back and relax. Django&amp;rsquo;s entire test suite has thousands of tests, and it takes at least a few minutes run, depending on the speed of your computer.</source>
          <target state="translated">ここでゆったりとリラックスしてください。Djangoのテストスイート全体には数千のテストがあり、コンピュータの速度にもよりますが、実行には少なくとも数分かかります。</target>
        </trans-unit>
        <trans-unit id="7662abc4461a188dc00d3f866b2b22d621b6328a" translate="yes" xml:space="preserve">
          <source>Now sit back and relax. Django&amp;rsquo;s entire test suite has thousands of tests, and it takes at least a few minutes to run, depending on the speed of your computer.</source>
          <target state="translated">Now sit back and relax. Django&amp;rsquo;s entire test suite has thousands of tests, and it takes at least a few minutes to run, depending on the speed of your computer.</target>
        </trans-unit>
        <trans-unit id="1207f077c878e60c8e36479acd1b3e82b4924ee9" translate="yes" xml:space="preserve">
          <source>Now that the Question admin page is looking good, let&amp;rsquo;s make some tweaks to the &amp;ldquo;change list&amp;rdquo; page &amp;ndash; the one that displays all the questions in the system.</source>
          <target state="translated">質問管理ページの見栄えが良くなったので、「変更リスト」ページ（システム内のすべての質問を表示するページ）を少し調整してみましょう。</target>
        </trans-unit>
        <trans-unit id="9c4af4d9ba28bde34b6930edb4ff370956fb3d37" translate="yes" xml:space="preserve">
          <source>Now that the server&amp;rsquo;s running, visit &lt;a href=&quot;http://127.0.0.1:8000/&quot;&gt;http://127.0.0.1:8000/&lt;/a&gt; with your Web browser. You&amp;rsquo;ll see a &amp;ldquo;Congratulations!&amp;rdquo; page, with a rocket taking off. It worked!</source>
          <target state="translated">サーバーが実行されたので、Webブラウザーで&lt;a href=&quot;http://127.0.0.1:8000/&quot;&gt;http://127.0.0.1:8000/&lt;/a&gt;にアクセスします。「おめでとうございます！」と表示されます。ページ、ロケットが離陸します。出来た！</target>
        </trans-unit>
        <trans-unit id="75e57caa4343eb4793c179b4fc0c146dbae59a0e" translate="yes" xml:space="preserve">
          <source>Now that we&amp;rsquo;ve packaged and tested &lt;code&gt;django-polls&lt;/code&gt;, it&amp;rsquo;s ready to share with the world! If this wasn&amp;rsquo;t just an example, you could now:</source>
          <target state="translated">&lt;code&gt;django-polls&lt;/code&gt; をパッケージ化してテストしたので、世界と共有する準備ができました！これが単なる例ではなかった場合は、次のようにできます。</target>
        </trans-unit>
        <trans-unit id="bf406cea330fa6d9142db8c49a22df6724bea522" translate="yes" xml:space="preserve">
          <source>Now that we&amp;rsquo;ve registered &lt;code&gt;Question&lt;/code&gt;, Django knows that it should be displayed on the admin index page:</source>
          <target state="translated">これで &lt;code&gt;Question&lt;/code&gt; を登録したので、Djangoはadminインデックスページに表示する必要があることを認識しています。</target>
        </trans-unit>
        <trans-unit id="75cde598167c7f2589d0c60c6738de9584b976d6" translate="yes" xml:space="preserve">
          <source>Now that you have a local copy of Django, you can install it just like you would install any package using &lt;code&gt;pip&lt;/code&gt;. The most convenient way to do so is by using a &lt;em&gt;virtual environment&lt;/em&gt;, which is a feature built into Python that allows you to keep a separate directory of installed packages for each of your projects so that they don&amp;rsquo;t interfere with each other.</source>
          <target state="translated">Djangoのローカルコピーが作成されたので、 &lt;code&gt;pip&lt;/code&gt; を使用してパッケージをインストールするのと同じようにインストールできます。そのための最も便利な方法は、&lt;em&gt;仮想環境&lt;/em&gt;を使用すること&lt;em&gt;です&lt;/em&gt;。これは、Pythonに組み込まれた機能で、プロジェクトごとにインストールされたパッケージの個別のディレクトリを保持して、互いに干渉しないようにすることができます。</target>
        </trans-unit>
        <trans-unit id="64bad9fc6f101dcdbda55bfa6724529b3cc5e83a" translate="yes" xml:space="preserve">
          <source>Now that you have set up your &lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField&quot;&gt;&lt;code&gt;ManyToManyField&lt;/code&gt;&lt;/a&gt; to use your intermediary model (&lt;code&gt;Membership&lt;/code&gt;, in this case), you&amp;rsquo;re ready to start creating some many-to-many relationships. You do this by creating instances of the intermediate model:</source>
          <target state="translated">中間モデル（この場合は &lt;code&gt;Membership&lt;/code&gt; ）を使用するように&lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField&quot;&gt; &lt;code&gt;ManyToManyField&lt;/code&gt; &lt;/a&gt;を設定したので、多対多の関係を作成する準備が整いました。これを行うには、中間モデルのインスタンスを作成します。</target>
        </trans-unit>
        <trans-unit id="2529a6500c0e15e2c4abe6d28f26cc62054cc372" translate="yes" xml:space="preserve">
          <source>Now that you&amp;rsquo;ve examined your dataset using &lt;code&gt;ogrinfo&lt;/code&gt;, create a GeoDjango model to represent this data:</source>
          <target state="translated">&lt;code&gt;ogrinfo&lt;/code&gt; を使用してデータセットを調べたので、このデータを表すGeoDjangoモデルを作成します。</target>
        </trans-unit>
        <trans-unit id="dc2389b5f334729c58b759c145bcf664705ad347" translate="yes" xml:space="preserve">
          <source>Now that you&amp;rsquo;ve seen how to define geographic models and import data with the &lt;a href=&quot;layermapping&quot;&gt;LayerMapping data import utility&lt;/a&gt;, it&amp;rsquo;s possible to further automate this process with use of the &lt;a href=&quot;commands#django-admin-ogrinspect&quot;&gt;&lt;code&gt;ogrinspect&lt;/code&gt;&lt;/a&gt; management command. The &lt;a href=&quot;commands#django-admin-ogrinspect&quot;&gt;&lt;code&gt;ogrinspect&lt;/code&gt;&lt;/a&gt; command introspects a GDAL-supported vector data source (e.g., a shapefile) and generates a model definition and &lt;code&gt;LayerMapping&lt;/code&gt; dictionary automatically.</source>
          <target state="translated">&lt;a href=&quot;layermapping&quot;&gt;LayerMappingデータインポートユーティリティ&lt;/a&gt;で地理モデルを定義し、データをインポートする方法を確認した&lt;a href=&quot;commands#django-admin-ogrinspect&quot;&gt; &lt;code&gt;ogrinspect&lt;/code&gt; &lt;/a&gt;、ogrinspect管理コマンドを使用してこのプロセスをさらに自動化することができます。&lt;a href=&quot;commands#django-admin-ogrinspect&quot;&gt; &lt;code&gt;ogrinspect&lt;/code&gt; &lt;/a&gt;コマンドイントロスペクトGDALサポートベクトルデータソース（たとえば、シェープファイル）とは、モデルの定義及び生成 &lt;code&gt;LayerMapping&lt;/code&gt; 自動的辞書。</target>
        </trans-unit>
        <trans-unit id="6376b1ae238a5fa6f312c93f3d2f4898fe8c1b17" translate="yes" xml:space="preserve">
          <source>Now that your environment &amp;ndash; a &amp;ldquo;project&amp;rdquo; &amp;ndash; is set up, you&amp;rsquo;re set to start doing work.</source>
          <target state="translated">環境（「プロジェクト」）が設定されたので、作業を開始する準備が整いました。</target>
        </trans-unit>
        <trans-unit id="fae278f6e2f60b163eed4caa52b0d02177fea03c" translate="yes" xml:space="preserve">
          <source>Now the question change list page looks like this:</source>
          <target state="translated">これで質問変更リストページは以下のようになりました。</target>
        </trans-unit>
        <trans-unit id="eb90dc277d26d2a028d83b7c97946650cba77833" translate="yes" xml:space="preserve">
          <source>Now we &lt;em&gt;might&lt;/em&gt; be able to get away with putting our static files directly in &lt;code&gt;my_app/static/&lt;/code&gt; (rather than creating another &lt;code&gt;my_app&lt;/code&gt; subdirectory), but it would actually be a bad idea. Django will use the first static file it finds whose name matches, and if you had a static file with the same name in a &lt;em&gt;different&lt;/em&gt; application, Django would be unable to distinguish between them. We need to be able to point Django at the right one, and the best way to ensure this is by &lt;em&gt;namespacing&lt;/em&gt; them. That is, by putting those static files inside &lt;em&gt;another&lt;/em&gt; directory named for the application itself.</source>
          <target state="translated">これで、静的ファイルを（別の &lt;code&gt;my_app&lt;/code&gt; サブディレクトリを作成するのではなく） &lt;code&gt;my_app/static/&lt;/code&gt; 直接配置することで問題を回避できる&lt;em&gt;かもしれません&lt;/em&gt;が、実際には悪い考えです。 Djangoは、名前が一致する最初に見つかった静的ファイルを使用します。&lt;em&gt;別の&lt;/em&gt;アプリケーションに同じ名前の静的ファイルがある場合、Djangoはそれらを区別できません。私たちはDjangoを正しいものに向けることができなければならず、これを確実にするための最良の方法はそれらに&lt;em&gt;名前空間を付ける&lt;/em&gt;ことです。つまり、これらの静的ファイルを、アプリケーション自体の名前が付けられた&lt;em&gt;別の&lt;/em&gt;ディレクトリ内に配置します。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="01d175c1e637f3cee5ceb291fdf4c9adfc0dc821" translate="yes" xml:space="preserve">
          <source>Now we &lt;em&gt;might&lt;/em&gt; be able to get away with putting our templates directly in &lt;code&gt;polls/templates&lt;/code&gt; (rather than creating another &lt;code&gt;polls&lt;/code&gt; subdirectory), but it would actually be a bad idea. Django will choose the first template it finds whose name matches, and if you had a template with the same name in a &lt;em&gt;different&lt;/em&gt; application, Django would be unable to distinguish between them. We need to be able to point Django at the right one, and the best way to ensure this is by &lt;em&gt;namespacing&lt;/em&gt; them. That is, by putting those templates inside &lt;em&gt;another&lt;/em&gt; directory named for the application itself.</source>
          <target state="translated">これで、 &lt;code&gt;polls/templates&lt;/code&gt; （別の &lt;code&gt;polls&lt;/code&gt; サブディレクトリを作成するのではなく）直接polls / templatesに配置できるようになる&lt;em&gt;かもしれません&lt;/em&gt;が、実際には悪い考えです。Djangoは、名前が一致する最初に見つかったテンプレートを選択します。&lt;em&gt;別の&lt;/em&gt;アプリケーションに同じ名前のテンプレートがある場合、Djangoはそれらを区別できません。私たちはDjangoを正しいものに向けることができる必要があり、これを確実にするための最良の方法は&lt;em&gt;名前空間を付ける&lt;/em&gt;ことです。つまり、これらのテンプレートを、アプリケーション自体の名前が付けられた&lt;em&gt;別の&lt;/em&gt;ディレクトリ内に配置します。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="7c4f42edd57918625d34396bf4a71a96fb72f5a7" translate="yes" xml:space="preserve">
          <source>Now we are ready to run the test suite. If you&amp;rsquo;re using GNU/Linux, macOS, or some other flavor of Unix, run:</source>
          <target state="translated">これで、テストスイートを実行する準備ができました。GNU / Linux、macOS、またはその他のUnixを使用している場合は、次のコマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="e47a8ac15a5ebf5edb5feb22215c8cd06eb6fb07" translate="yes" xml:space="preserve">
          <source>Now we can write a new &lt;code&gt;PublisherDetail&lt;/code&gt;:</source>
          <target state="translated">これで、新しい &lt;code&gt;PublisherDetail&lt;/code&gt; を作成できます。</target>
        </trans-unit>
        <trans-unit id="7c66e87b3835c409da2dcefebcb4caed4fb353a1" translate="yes" xml:space="preserve">
          <source>Now we define our corresponding Django model (make sure to use &lt;a href=&quot;../../django-admin#django-admin-migrate&quot;&gt;&lt;code&gt;migrate&lt;/code&gt;&lt;/a&gt;):</source>
          <target state="translated">次に、対応するDjangoモデルを定義します（必ず&lt;a href=&quot;../../django-admin#django-admin-migrate&quot;&gt; &lt;code&gt;migrate&lt;/code&gt; &lt;/a&gt;を使用してください）。</target>
        </trans-unit>
        <trans-unit id="7ae1e4292d6b8aae98119242843cc18f427ab83b" translate="yes" xml:space="preserve">
          <source>Now we have a different problem - the longer name of &amp;ldquo;Helena Bonham Carter&amp;rdquo; doesn&amp;rsquo;t show up as it is much longer. Trigram searches consider all combinations of three letters, and compares how many appear in both search and source strings. For the longer name, there are more combinations that don&amp;rsquo;t appear in the source string, so it is no longer considered a close match.</source>
          <target state="translated">Now we have a different problem - the longer name of &amp;ldquo;Helena Bonham Carter&amp;rdquo; doesn&amp;rsquo;t show up as it is much longer. Trigram searches consider all combinations of three letters, and compares how many appear in both search and source strings. For the longer name, there are more combinations that don&amp;rsquo;t appear in the source string, so it is no longer considered a close match.</target>
        </trans-unit>
        <trans-unit id="4c5602413593d1c5528e6e57dcbd46503a8f2804" translate="yes" xml:space="preserve">
          <source>Now we have a different problem - the longer name of &amp;ldquo;Helena Bonham Carter&amp;rdquo; doesn&amp;rsquo;t show up as it is much longer. Trigram searches consider all combinations of three letters, and compares how many appear in both search and source strings. For the longer name, there are more combinations which appear in the source string so it is no longer considered a close match.</source>
          <target state="translated">ここで別の問題が発生します。「ヘレナボナムカーター」の長い名前は、長いため表示されません。トライグラム検索では、3つの文字のすべての組み合わせが考慮され、検索文字列とソース文字列の両方に出現する数が比較されます。長い名前の場合、ソース文字列に表示される組み合わせが多くなるため、近い一致とは見なされなくなります。</target>
        </trans-unit>
        <trans-unit id="2d795b337a92c0a5e31febc9c4041e82a9227dbc" translate="yes" xml:space="preserve">
          <source>Now we implement the pre-processing and validation. Since we do not have any of our own validation at this point, we delegate to the nested expressions:</source>
          <target state="translated">ここで、前処理と検証を実装します。この時点では独自のバリデーションはないので、ネストされた式に委任します。</target>
        </trans-unit>
        <trans-unit id="c37a1e6f4b5daec07056100cf46833458caf834e" translate="yes" xml:space="preserve">
          <source>Now we need to define a view:</source>
          <target state="translated">では、ビューを定義する必要があります。</target>
        </trans-unit>
        <trans-unit id="8cfc15775270a0cf7074a75118fb26261619cc6f" translate="yes" xml:space="preserve">
          <source>Now we need to make sure that the test we wrote earlier passes, so we can see whether the code we added is working correctly. Again, navigate to the Django &lt;code&gt;tests/&lt;/code&gt; directory and run:</source>
          <target state="translated">追加したコードが正しく機能しているかどうかを確認できるように、以前に作成したテストにパスすることを確認する必要があります。もう一度、Django &lt;code&gt;tests/&lt;/code&gt; ディレクトリに移動して実行します。</target>
        </trans-unit>
        <trans-unit id="bcac3a04746aabf930cb5a747d4e5bc7fbac7974" translate="yes" xml:space="preserve">
          <source>Now we&amp;rsquo;ll define your models &amp;ndash; essentially, your database layout, with additional metadata.</source>
          <target state="translated">次に、モデルを定義します。基本的には、データベースレイアウトと追加のメタデータを定義します。</target>
        </trans-unit>
        <trans-unit id="fe5908be768f13a2be925c73b002c0119eef5f3a" translate="yes" xml:space="preserve">
          <source>Now we&amp;rsquo;ll need to handle routing. First we want a router that knows to send queries for the &lt;code&gt;auth&lt;/code&gt; and &lt;code&gt;contenttypes&lt;/code&gt; apps to &lt;code&gt;auth_db&lt;/code&gt; (&lt;code&gt;auth&lt;/code&gt; models are linked to &lt;code&gt;ContentType&lt;/code&gt;, so they must be stored in the same database):</source>
          <target state="translated">次に、ルーティングを処理する必要があります。まず、のためにクエリを送信するために知っているルータたい &lt;code&gt;auth&lt;/code&gt; と &lt;code&gt;contenttypes&lt;/code&gt; のにアプリを &lt;code&gt;auth_db&lt;/code&gt; （ &lt;code&gt;auth&lt;/code&gt; モデルがリンクされている &lt;code&gt;ContentType&lt;/code&gt; を、彼らが同じデータベースに格納されなければならないように、）：</target>
        </trans-unit>
        <trans-unit id="d5c11520a098768a6c24489507829a2b07907224" translate="yes" xml:space="preserve">
          <source>Now we&amp;rsquo;ve seen how Django&amp;rsquo;s generic class-based views use the provided mixins, let&amp;rsquo;s look at other ways we can combine them. Of course we&amp;rsquo;re still going to be combining them with either built-in class-based views, or other generic class-based views, but there are a range of rarer problems you can solve than are provided for by Django out of the box.</source>
          <target state="translated">Djangoの一般的なクラスベースのビューが提供されているミックスインをどのように使用するかを見てきました。それらを組み合わせる他の方法を見てみましょう。もちろん、それらを組み込みのクラスベースのビュー、または他の一般的なクラスベースのビューと組み合わせる予定ですが、Djangoで提供されているよりも、解決できるまれな問題がいくつかあります。 。</target>
        </trans-unit>
        <trans-unit id="d0d9f0575c1c236d5af487efdbf517700e1f99af" translate="yes" xml:space="preserve">
          <source>Now we&amp;rsquo;ve seen how Django&amp;rsquo;s generic class-based views use the provided mixins, let&amp;rsquo;s look at other ways we can combine them. We&amp;rsquo;re still going to be combining them with either built-in class-based views, or other generic class-based views, but there are a range of rarer problems you can solve than are provided for by Django out of the box.</source>
          <target state="translated">Now we&amp;rsquo;ve seen how Django&amp;rsquo;s generic class-based views use the provided mixins, let&amp;rsquo;s look at other ways we can combine them. We&amp;rsquo;re still going to be combining them with either built-in class-based views, or other generic class-based views, but there are a range of rarer problems you can solve than are provided for by Django out of the box.</target>
        </trans-unit>
        <trans-unit id="2b516478da3cbf3e609d2d9aa54d602ac37ba736" translate="yes" xml:space="preserve">
          <source>Now you can access the country in a template with &lt;code&gt;{{ form.coordinates.country }}&lt;/code&gt;.</source>
          <target state="translated">これで、テンプレートで &lt;code&gt;{{ form.coordinates.country }}&lt;/code&gt; を使用して国にアクセスできます。</target>
        </trans-unit>
        <trans-unit id="d475869dbc3deb53f1f216a136b9eba20db60766" translate="yes" xml:space="preserve">
          <source>Now you can apply the migrations as usual with the &lt;a href=&quot;../ref/django-admin#django-admin-migrate&quot;&gt;&lt;code&gt;migrate&lt;/code&gt;&lt;/a&gt; command.</source>
          <target state="translated">これで、&lt;a href=&quot;../ref/django-admin#django-admin-migrate&quot;&gt; &lt;code&gt;migrate&lt;/code&gt; &lt;/a&gt;コマンドを使用して、通常どおり移行を適用できます。</target>
        </trans-unit>
        <trans-unit id="72ac8fc1339f4d03f079fb6f9c9f0e194b347a82" translate="yes" xml:space="preserve">
          <source>Now you can put those skills to good use by helping to improve Django&amp;rsquo;s codebase.</source>
          <target state="translated">これで、Djangoのコードベースの改善を支援することで、これらのスキルを有効に活用できます。</target>
        </trans-unit>
        <trans-unit id="23f1e33e76b69dcdf87c9a1fb7103093a05beea6" translate="yes" xml:space="preserve">
          <source>Now you can satisfy yourself that this behaves as expected by firing up &lt;code&gt;runserver&lt;/code&gt;, loading the site in your browser, creating &lt;code&gt;Questions&lt;/code&gt; with dates in the past and future, and checking that only those that have been published are listed. You don&amp;rsquo;t want to have to do that &lt;em&gt;every single time you make any change that might affect this&lt;/em&gt; - so let&amp;rsquo;s also create a test, based on our &lt;a href=&quot;../ref/django-admin#django-admin-shell&quot;&gt;&lt;code&gt;shell&lt;/code&gt;&lt;/a&gt; session above.</source>
          <target state="translated">&lt;code&gt;runserver&lt;/code&gt; を起動し、ブラウザにサイトをロードし、過去と未来の日付で &lt;code&gt;Questions&lt;/code&gt; を作成し、公開されているものだけがリストされていることを確認することで、これが期待どおりに動作することを確認できます。&lt;em&gt;これに影響を与える可能性のある変更を行うたび&lt;/em&gt;にそれを&lt;em&gt;実行する必要はありません。&lt;/em&gt;そのため、上記の&lt;a href=&quot;../ref/django-admin#django-admin-shell&quot;&gt; &lt;code&gt;shell&lt;/code&gt; &lt;/a&gt;セッションに基づいてテストも作成しましょう。</target>
        </trans-unit>
        <trans-unit id="0dd4f0d714b7b440236676490d5cd5cc97710517" translate="yes" xml:space="preserve">
          <source>Now you can use any of the documented attributes and methods of the &lt;a href=&quot;../ref/files/file#django.core.files.File&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt; class.</source>
          <target state="translated">これで、&lt;a href=&quot;../ref/files/file#django.core.files.File&quot;&gt; &lt;code&gt;File&lt;/code&gt; &lt;/a&gt;クラスの文書化された属性とメソッドを使用できます。</target>
        </trans-unit>
        <trans-unit id="7ab3a4c732a570e45e72d8279159c31dd602e88c" translate="yes" xml:space="preserve">
          <source>Now you&amp;rsquo;ll also need a view corresponding to that &lt;code&gt;/your-name/&lt;/code&gt; URL which will find the appropriate key/value pairs in the request, and then process them.</source>
          <target state="translated">次に、その &lt;code&gt;/your-name/&lt;/code&gt; URLに対応するビューも必要です。このビューは、リクエストで適切なキーと値のペアを見つけて処理します。</target>
        </trans-unit>
        <trans-unit id="773ae0c9b55a06a6212d086ca1c9132147c8e3bc" translate="yes" xml:space="preserve">
          <source>Now your admin site is set up to edit &lt;code&gt;Membership&lt;/code&gt; objects inline from either the &lt;code&gt;Person&lt;/code&gt; or the &lt;code&gt;Group&lt;/code&gt; detail pages.</source>
          <target state="translated">これで、管理サイトは、 &lt;code&gt;Person&lt;/code&gt; または &lt;code&gt;Group&lt;/code&gt; 詳細ページからインラインで &lt;code&gt;Membership&lt;/code&gt; オブジェクトを編集するように設定されました。</target>
        </trans-unit>
        <trans-unit id="1d7161c477ce1fa34e1cd8a8fcedd1a97cd45391" translate="yes" xml:space="preserve">
          <source>Now your tag should begin to look like this:</source>
          <target state="translated">これで、あなたのタグは以下のようになるはずです。</target>
        </trans-unit>
        <trans-unit id="3ca505f89a58836d8d8355a91fcfdcb88a64397d" translate="yes" xml:space="preserve">
          <source>Now&amp;rsquo;s a good time to note: &lt;strong&gt;don&amp;rsquo;t&lt;/strong&gt; use this server in anything resembling a production environment. It&amp;rsquo;s intended only for use while developing. (We&amp;rsquo;re in the business of making Web frameworks, not Web servers.)</source>
          <target state="translated">ここで、注意が必要です。このサーバーは、実稼働環境に似たもので&lt;strong&gt;は&lt;/strong&gt;使用&lt;strong&gt;しないで&lt;/strong&gt;ください。開発中の使用のみを目的としています。（私たちはWebサーバーではなく、Webフレームワークを作成するビジネスを行っています。）</target>
        </trans-unit>
        <trans-unit id="8d15bcc0a82dc2d5aaadb1122619ae9298528376" translate="yes" xml:space="preserve">
          <source>Now&amp;rsquo;s also a good time to note that change lists give you free pagination. The default is to display 100 items per page. &lt;a href=&quot;../ref/contrib/admin/index#django.contrib.admin.ModelAdmin.list_per_page&quot;&gt;&lt;code&gt;Change list pagination&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../ref/contrib/admin/index#django.contrib.admin.ModelAdmin.search_fields&quot;&gt;&lt;code&gt;search boxes&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../ref/contrib/admin/index#django.contrib.admin.ModelAdmin.list_filter&quot;&gt;&lt;code&gt;filters&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../ref/contrib/admin/index#django.contrib.admin.ModelAdmin.date_hierarchy&quot;&gt;&lt;code&gt;date-hierarchies&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../ref/contrib/admin/index#django.contrib.admin.ModelAdmin.list_display&quot;&gt;&lt;code&gt;column-header-ordering&lt;/code&gt;&lt;/a&gt; all work together like you think they should.</source>
          <target state="translated">また、変更リストを使用すると、ページ分割を自由に行えることに注意してください。デフォルトでは、ページごとに100アイテムが表示されます。&lt;a href=&quot;../ref/contrib/admin/index#django.contrib.admin.ModelAdmin.list_per_page&quot;&gt; &lt;code&gt;Change list pagination&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../ref/contrib/admin/index#django.contrib.admin.ModelAdmin.search_fields&quot;&gt; &lt;code&gt;search boxes&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../ref/contrib/admin/index#django.contrib.admin.ModelAdmin.list_filter&quot;&gt; &lt;code&gt;filters&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../ref/contrib/admin/index#django.contrib.admin.ModelAdmin.date_hierarchy&quot;&gt; &lt;code&gt;date-hierarchies&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;../ref/contrib/admin/index#django.contrib.admin.ModelAdmin.list_display&quot;&gt; &lt;code&gt;column-header-ordering&lt;/code&gt; &lt;/a&gt;すべて、想定どおりに連動します。</target>
        </trans-unit>
        <trans-unit id="99ce113dbab28c6966339979cd1800d1c3a5e9a6" translate="yes" xml:space="preserve">
          <source>Now, all you need to do is create a new function and have &lt;a href=&quot;../ref/migration-operations#django.db.migrations.operations.RunPython&quot;&gt;&lt;code&gt;RunPython&lt;/code&gt;&lt;/a&gt; use it. &lt;a href=&quot;../ref/migration-operations#django.db.migrations.operations.RunPython&quot;&gt;&lt;code&gt;RunPython&lt;/code&gt;&lt;/a&gt; expects a callable as its argument which takes two arguments - the first is an &lt;a href=&quot;../ref/applications&quot;&gt;app registry&lt;/a&gt; that has the historical versions of all your models loaded into it to match where in your history the migration sits, and the second is a &lt;a href=&quot;../ref/schema-editor&quot;&gt;SchemaEditor&lt;/a&gt;, which you can use to manually effect database schema changes (but beware, doing this can confuse the migration autodetector!)</source>
          <target state="translated">&lt;a href=&quot;../ref/migration-operations#django.db.migrations.operations.RunPython&quot;&gt; &lt;code&gt;RunPython&lt;/code&gt; &lt;/a&gt;は、新しい関数を作成して、RunPythonで使用するだけです。&lt;a href=&quot;../ref/migration-operations#django.db.migrations.operations.RunPython&quot;&gt; &lt;code&gt;RunPython&lt;/code&gt; &lt;/a&gt;は、2つの引数を取る引数としてcallableを想定しています。1つ目は、すべてのモデルの履歴バージョンが読み込まれ、移行が行われる履歴の場所と一致する&lt;a href=&quot;../ref/applications&quot;&gt;アプリレジストリです&lt;/a&gt;。2つ目は、&lt;a href=&quot;../ref/schema-editor&quot;&gt;SchemaEditor&lt;/a&gt;です。データベーススキーマの変更を手動で行うために使用します（ただし、これを行うと、移行の自動検出機能が混乱する可能性があります。</target>
        </trans-unit>
        <trans-unit id="e26eeede8de5f6aef6477290252659725320f583" translate="yes" xml:space="preserve">
          <source>Now, create a &lt;code&gt;polls/results.html&lt;/code&gt; template:</source>
          <target state="translated">次に、 &lt;code&gt;polls/results.html&lt;/code&gt; テンプレートを作成します。</target>
        </trans-unit>
        <trans-unit id="9b9600adacf65499e24be89755a51a93c7893117" translate="yes" xml:space="preserve">
          <source>Now, create and register the inclusion tag by calling the &lt;code&gt;inclusion_tag()&lt;/code&gt; method on a &lt;code&gt;Library&lt;/code&gt; object. Following our example, if the above template is in a file called &lt;code&gt;results.html&lt;/code&gt; in a directory that&amp;rsquo;s searched by the template loader, we&amp;rsquo;d register the tag like this:</source>
          <target state="translated">次に、 &lt;code&gt;Library&lt;/code&gt; オブジェクトで &lt;code&gt;inclusion_tag()&lt;/code&gt; メソッドを呼び出して、包含タグを作成して登録します。この例に従って、上記のテンプレートが、テンプレートローダーによって検索されるディレクトリの &lt;code&gt;results.html&lt;/code&gt; というファイルにある場合、次のようにタグを登録します。</target>
        </trans-unit>
        <trans-unit id="61df64fac0bdb450dcab9337d6fdd355672882b3" translate="yes" xml:space="preserve">
          <source>Now, define a point of interest &lt;a href=&quot;#id13&quot; id=&quot;id7&quot;&gt;[3]&lt;/a&gt;:</source>
          <target state="translated">ここで、関心のあるポイントを定義します&lt;a href=&quot;#id13&quot; id=&quot;id7&quot;&gt;[3]&lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="c9f3f21fc4e880937be50b7fcf36ca081326148a" translate="yes" xml:space="preserve">
          <source>Now, go to &lt;code&gt;/polls/1/&lt;/code&gt; in your browser and vote in the question. You should see a results page that gets updated each time you vote. If you submit the form without having chosen a choice, you should see the error message.</source>
          <target state="translated">次に、ブラウザーで &lt;code&gt;/polls/1/&lt;/code&gt; に移動し、質問に投票します。投票するたびに更新される結果ページが表示されます。選択肢を選択せず​​にフォームを送信すると、エラーメッセージが表示されます。</target>
        </trans-unit>
        <trans-unit id="a1efea4230fe635c172ad6eeb75a83bbd75fc583" translate="yes" xml:space="preserve">
          <source>Now, let&amp;rsquo;s create a Django view that handles the submitted data and does something with it. Remember, in &lt;a href=&quot;tutorial03&quot;&gt;Tutorial 3&lt;/a&gt;, we created a URLconf for the polls application that includes this line:</source>
          <target state="translated">次に、送信されたデータを処理し、それで何かを行うDjangoビューを作成しましょう。&lt;a href=&quot;tutorial03&quot;&gt;チュートリアル3で&lt;/a&gt;、この行を含むpollsアプリケーションのURLconfを作成したことを思い出してください。</target>
        </trans-unit>
        <trans-unit id="38f59dfc7640b31e36394dc7c9a2f46f24eb17ba" translate="yes" xml:space="preserve">
          <source>Now, let&amp;rsquo;s hop into the interactive Python shell and play around with the free API Django gives you. To invoke the Python shell, use this command:</source>
          <target state="translated">それでは、インタラクティブなPythonシェルにアクセスして、Djangoが提供する無料のAPIを試してみましょう。Pythonシェルを呼び出すには、次のコマンドを使用します。</target>
        </trans-unit>
        <trans-unit id="7cbef95cf75c7a3f4b4837de306a008dbc014431" translate="yes" xml:space="preserve">
          <source>Now, let&amp;rsquo;s tackle the question detail view &amp;ndash; the page that displays the question text for a given poll. Here&amp;rsquo;s the view:</source>
          <target state="translated">ここで、質問の詳細ビュー（特定の投票の質問テキストを表示するページ）に取り組みます。これがビューです：</target>
        </trans-unit>
        <trans-unit id="b460cbb07f78017c0c6f37a652de30bf9aafdb00" translate="yes" xml:space="preserve">
          <source>Now, open a Web browser and go to &amp;ldquo;/admin/&amp;rdquo; on your local domain &amp;ndash; e.g., &lt;a href=&quot;http://127.0.0.1:8000/admin/&quot;&gt;http://127.0.0.1:8000/admin/&lt;/a&gt;. You should see the admin&amp;rsquo;s login screen:</source>
          <target state="translated">次に、Webブラウザを開いて、ローカルドメインの「/ admin /」にアクセスします（例：&lt;a href=&quot;http://127.0.0.1:8000/admin/&quot;&gt;http&lt;/a&gt; : //127.0.0.1 : 8000 /admin/）。管理者のログイン画面が表示されます。</target>
        </trans-unit>
        <trans-unit id="2b81dff36c6dd0997b6aebdd48e22ac831af4eec" translate="yes" xml:space="preserve">
          <source>Now, open the world borders shapefile using GeoDjango&amp;rsquo;s &lt;a href=&quot;gdal#django.contrib.gis.gdal.DataSource&quot;&gt;&lt;code&gt;DataSource&lt;/code&gt;&lt;/a&gt; interface:</source>
          <target state="translated">次に、GeoDjangoの&lt;a href=&quot;gdal#django.contrib.gis.gdal.DataSource&quot;&gt; &lt;code&gt;DataSource&lt;/code&gt; &lt;/a&gt;インターフェイスを使用して、世界の境界のシェープファイルを開きます。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
