<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="rust">
    <body>
      <group id="rust">
        <trans-unit id="1fd449b5671c0c531048bf228bce50b5745274bb" translate="yes" xml:space="preserve">
          <source>The connection was aborted (terminated) by the remote server.</source>
          <target state="translated">接続はリモートサーバによって中断(終了)されました。</target>
        </trans-unit>
        <trans-unit id="394cd4f1c44fd561007d2b956b477de854f22ebc" translate="yes" xml:space="preserve">
          <source>The connection was refused by the remote server.</source>
          <target state="translated">接続はリモートサーバーによって拒否されました。</target>
        </trans-unit>
        <trans-unit id="ee9eafc82d73396db6a743b750893f5328ee460c" translate="yes" xml:space="preserve">
          <source>The connection was reset by the remote server.</source>
          <target state="translated">接続はリモートサーバーによってリセットされました。</target>
        </trans-unit>
        <trans-unit id="c5c0b8221782b43e8764b446a2f5d5156fcf8b34" translate="yes" xml:space="preserve">
          <source>The connection will be closed when the value is dropped. The reading and writing portions of the connection can also be shut down individually with the &lt;a href=&quot;#method.shutdown&quot;&gt;&lt;code&gt;shutdown&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">値が削除されると、接続は閉じられます。接続の読み取り部分と書き込み部分も、&lt;a href=&quot;#method.shutdown&quot;&gt; &lt;code&gt;shutdown&lt;/code&gt; &lt;/a&gt;メソッドを使用して個別にシャットダウンできます。</target>
        </trans-unit>
        <trans-unit id="ee6719cfaf61adca10461f2b171bde13e23a4a41" translate="yes" xml:space="preserve">
          <source>The connection will be closed when the value is dropped. The reading and writing portions of the connection can also be shut down individually with the &lt;a href=&quot;struct.tcpstream#method.shutdown&quot;&gt;&lt;code&gt;shutdown&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">値が削除されると、接続は閉じられます。接続の読み取り部分と書き込み部分は、&lt;a href=&quot;struct.tcpstream#method.shutdown&quot;&gt; &lt;code&gt;shutdown&lt;/code&gt; &lt;/a&gt;メソッドを使用して個別にシャットダウンすることもできます。</target>
        </trans-unit>
        <trans-unit id="98a1585e2f9a061b72de9d4f949a75a416a4fb56" translate="yes" xml:space="preserve">
          <source>The cons function concept has made its way into more general functional programming jargon: &amp;ldquo;to cons &lt;em&gt;x&lt;/em&gt; onto &lt;em&gt;y&lt;/em&gt;&amp;rdquo; informally means to construct a new container instance by putting the element &lt;em&gt;x&lt;/em&gt; at the start of this new container, followed by the container &lt;em&gt;y&lt;/em&gt;.</source>
          <target state="translated">cons関数の概念は、より一般的な関数型プログラミング用語になりました。「cons &lt;em&gt;x&lt;/em&gt; on &lt;em&gt;y&lt;/em&gt;」とは、非公式に、要素&lt;em&gt;x&lt;/em&gt;をこの新しいコンテナーの先頭に置き、その後にコンテナー&lt;em&gt;yを&lt;/em&gt;置くことによって、新しいコンテナーインスタンスを構築することを意味します。</target>
        </trans-unit>
        <trans-unit id="3946118b0e2f7f5ec1675cedbf82ccd7c8d576ce" translate="yes" xml:space="preserve">
          <source>The contents of &lt;em&gt;src/lib.rs&lt;/em&gt; should have the signatures shown in Listing 12-13 (we&amp;rsquo;ve omitted the bodies of the functions for brevity). Note that this won&amp;rsquo;t compile until we modify &lt;em&gt;src/main.rs&lt;/em&gt; in Listing 12-14.</source>
          <target state="translated">&lt;em&gt;src / lib.rs&lt;/em&gt;の内容には、リスト12-13に示すシグネチャが必要です（簡潔にするため、関数の本体は省略しています）。リスト12-14で&lt;em&gt;src / main.rs&lt;/em&gt;を変更するまで、これはコンパイルされないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="4fb4cd20ff2b04a7f8f088847ce2546308d2b8ce" translate="yes" xml:space="preserve">
          <source>The contents of the &lt;em&gt;src/lib.rs&lt;/em&gt; file in your &lt;code&gt;adder&lt;/code&gt; library should look like Listing 11-1.</source>
          <target state="translated">&lt;code&gt;adder&lt;/code&gt; ライブラリの&lt;em&gt;src / lib.rs&lt;/em&gt;ファイルの内容は、リスト11-1のようになります。</target>
        </trans-unit>
        <trans-unit id="1735f7c56c57e86fb0b029da9024a55f63cc6d92" translate="yes" xml:space="preserve">
          <source>The contents of the repetition must be able to follow whatever comes before, and whatever comes after must be able to follow the contents of the repetition.</source>
          <target state="translated">繰り返しの内容は、その前に来るものは何であれ、その後に来るものは何であれ、繰り返しの内容を追いかけることができなければなりません。</target>
        </trans-unit>
        <trans-unit id="33e5fb5d650df50a2e77352564f0bccccceac217" translate="yes" xml:space="preserve">
          <source>The contents of the returned &lt;a href=&quot;../raw/struct.stat&quot;&gt;&lt;code&gt;stat&lt;/code&gt;&lt;/a&gt; are &lt;strong&gt;not&lt;/strong&gt; consistent across Unix platforms. The &lt;code&gt;os::unix::fs::MetadataExt&lt;/code&gt; trait contains the cross-Unix abstractions contained within the raw stat.</source>
          <target state="translated">返された内容&lt;a href=&quot;../raw/struct.stat&quot;&gt; &lt;code&gt;stat&lt;/code&gt; &lt;/a&gt;あり&lt;strong&gt;ません&lt;/strong&gt; Unixプラットフォーム間で一貫。 &lt;code&gt;os::unix::fs::MetadataExt&lt;/code&gt; 特徴は、生のstat内に含まれるクロスUnixの抽象化が含まれています。</target>
        </trans-unit>
        <trans-unit id="0770383d0616ee4e47049d055237250b7b2bfaef" translate="yes" xml:space="preserve">
          <source>The conversion allocates on the heap and moves &lt;code&gt;t&lt;/code&gt; from the stack into it.</source>
          <target state="translated">変換はヒープに割り当てられ、 &lt;code&gt;t&lt;/code&gt; をスタックからスタックに移動します。</target>
        </trans-unit>
        <trans-unit id="66e8c9afb284902c1e321d76aa570359994fd792" translate="yes" xml:space="preserve">
          <source>The conversion consumes the &lt;a href=&quot;../ffi/struct.cstring&quot;&gt;&lt;code&gt;CString&lt;/code&gt;&lt;/a&gt;, and removes the terminating NUL byte.</source>
          <target state="translated">変換は&lt;a href=&quot;../ffi/struct.cstring&quot;&gt; &lt;code&gt;CString&lt;/code&gt; を&lt;/a&gt;消費し、終端のNULバイトを削除します。</target>
        </trans-unit>
        <trans-unit id="b49f9ee7f1f30037339c1daa1d1e1cd395843299" translate="yes" xml:space="preserve">
          <source>The conversion consumes the &lt;a href=&quot;struct.cstring&quot;&gt;&lt;code&gt;CString&lt;/code&gt;&lt;/a&gt;, and removes the terminating NUL byte.</source>
          <target state="translated">変換は&lt;a href=&quot;struct.cstring&quot;&gt; &lt;code&gt;CString&lt;/code&gt; を&lt;/a&gt;消費し、終端のNULバイトを削除します。</target>
        </trans-unit>
        <trans-unit id="9ff60369ad0f3cbf8d85443d93a8bb4f7f1f7686" translate="yes" xml:space="preserve">
          <source>The conversion copies the data, and includes an allocation on the heap.</source>
          <target state="translated">変換はデータをコピーし,ヒープ上の割り当てを含む。</target>
        </trans-unit>
        <trans-unit id="cbdea02b60597ccd54b5d9dbad9b3681336b3420" translate="yes" xml:space="preserve">
          <source>The core method of future, &lt;code&gt;poll&lt;/code&gt;, &lt;em&gt;attempts&lt;/em&gt; to resolve the future into a final value. This method does not block if the value is not ready. Instead, the current task is scheduled to be woken up when it's possible to make further progress by &lt;code&gt;poll&lt;/code&gt;ing again. The &lt;code&gt;context&lt;/code&gt; passed to the &lt;code&gt;poll&lt;/code&gt; method can provide a &lt;a href=&quot;../task/struct.waker&quot;&gt;&lt;code&gt;Waker&lt;/code&gt;&lt;/a&gt;, which is a handle for waking up the current task.</source>
          <target state="translated">futureのコアメソッドである &lt;code&gt;poll&lt;/code&gt; は、futureを最終的な値に解決&lt;em&gt;しようと&lt;/em&gt;します。値の準備ができていない場合、このメソッドはブロックしません。代わりに、現在のタスクは、再度 &lt;code&gt;poll&lt;/code&gt; することでさらに進行できるときにウェイクアップされるようにスケジュールされています。 &lt;code&gt;context&lt;/code&gt; に渡された &lt;code&gt;poll&lt;/code&gt; 方法が提供できる&lt;a href=&quot;../task/struct.waker&quot;&gt; &lt;code&gt;Waker&lt;/code&gt; &lt;/a&gt;現在のタスクを覚ますためのハンドルです。</target>
        </trans-unit>
        <trans-unit id="af0586e1698754134d6653d1c35d55045868b007" translate="yes" xml:space="preserve">
          <source>The core method of future, &lt;code&gt;poll&lt;/code&gt;, &lt;em&gt;attempts&lt;/em&gt; to resolve the future into a final value. This method does not block if the value is not ready. Instead, the current task is scheduled to be woken up when it's possible to make further progress by &lt;code&gt;poll&lt;/code&gt;ing again. The &lt;code&gt;context&lt;/code&gt; passed to the &lt;code&gt;poll&lt;/code&gt; method can provide a &lt;code&gt;Waker&lt;/code&gt;, which is a handle for waking up the current task.</source>
          <target state="translated">futureのコアメソッドである &lt;code&gt;poll&lt;/code&gt; は、未来を最終的な値に解決&lt;em&gt;しようと&lt;/em&gt;します。値の準備ができていない場合、このメソッドはブロックしません。代わりに、現在のタスクは、再度 &lt;code&gt;poll&lt;/code&gt; することでさらに先に進むことが可能なときに起こされるようにスケジュールされています。 &lt;code&gt;context&lt;/code&gt; に渡された &lt;code&gt;poll&lt;/code&gt; 方法が提供できる &lt;code&gt;Waker&lt;/code&gt; 現在のタスクを覚ますためのハンドルです。</target>
        </trans-unit>
        <trans-unit id="7cb53e3d2cc08f8c1b0d6306a44e9e0ab47f9511" translate="yes" xml:space="preserve">
          <source>The core of the error states that there are &lt;em&gt;mismatched types&lt;/em&gt;. Rust has a strong, static type system. However, it also has type inference. When we wrote &lt;code&gt;let mut guess = String::new()&lt;/code&gt;, Rust was able to infer that &lt;code&gt;guess&lt;/code&gt; should be a &lt;code&gt;String&lt;/code&gt; and didn&amp;rsquo;t make us write the type. The &lt;code&gt;secret_number&lt;/code&gt;, on the other hand, is a number type. A few number types can have a value between 1 and 100: &lt;code&gt;i32&lt;/code&gt;, a 32-bit number; &lt;code&gt;u32&lt;/code&gt;, an unsigned 32-bit number; &lt;code&gt;i64&lt;/code&gt;, a 64-bit number; as well as others. Rust defaults to an &lt;code&gt;i32&lt;/code&gt;, which is the type of &lt;code&gt;secret_number&lt;/code&gt; unless you add type information elsewhere that would cause Rust to infer a different numerical type. The reason for the error is that Rust cannot compare a string and a number type.</source>
          <target state="translated">エラーの中心は、&lt;em&gt;不一致のタイプ&lt;/em&gt;がある&lt;em&gt;ことを示しています&lt;/em&gt;。 Rustには強力な静的型システムがあります。ただし、型推論もあります。 &lt;code&gt;let mut guess = String::new()&lt;/code&gt; 書いたとき、Rustは &lt;code&gt;guess&lt;/code&gt; が &lt;code&gt;String&lt;/code&gt; べきであると推測でき、型を記述しませんでした。 &lt;code&gt;secret_number&lt;/code&gt; は、一方で、数値型です。いくつかの数値タイプは、1から100までの値を持つことができます &lt;code&gt;i32&lt;/code&gt; は32ビットの数値です。 &lt;code&gt;u32&lt;/code&gt; 、符号なし32ビット数。 &lt;code&gt;i64&lt;/code&gt; 、64ビットの数値。他の人と同様に。 Rustのデフォルトは &lt;code&gt;i32&lt;/code&gt; で、これは &lt;code&gt;secret_number&lt;/code&gt; のタイプですRustが別の数値型を推測する原因となるような場所に型情報を追加しない限り。エラーの理由は、Rustが文字列と数値型を比較できないためです。</target>
        </trans-unit>
        <trans-unit id="ddff64ad7c369ce0737f5b8b0b3f4b7511787cca" translate="yes" xml:space="preserve">
          <source>The core primitive for interior mutability in Rust.</source>
          <target state="translated">Rust の内部変異性のためのコアプリミティブ。</target>
        </trans-unit>
        <trans-unit id="e23a80c74457fb7f3e04241567981840f6b6a5f0" translate="yes" xml:space="preserve">
          <source>The corresponding definitions are in &lt;code&gt;compiler/rustc_codegen_llvm/src/intrinsic.rs&lt;/code&gt;. The corresponding const implementations are in &lt;code&gt;compiler/rustc_mir/src/interpret/intrinsics.rs&lt;/code&gt;</source>
          <target state="translated">対応する定義は、 &lt;code&gt;compiler/rustc_codegen_llvm/src/intrinsic.rs&lt;/code&gt; ます。対応するconst実装は、 &lt;code&gt;compiler/rustc_mir/src/interpret/intrinsics.rs&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="159b3bf04af466ed5bc13962fe870a560dd18283" translate="yes" xml:space="preserve">
          <source>The corresponding definitions are in &lt;code&gt;librustc_codegen_llvm/intrinsic.rs&lt;/code&gt;.</source>
          <target state="translated">対応する定義は &lt;code&gt;librustc_codegen_llvm/intrinsic.rs&lt;/code&gt; にあります。</target>
        </trans-unit>
        <trans-unit id="46698ed84aa8c683839a27c0dd70bde9fa62d21c" translate="yes" xml:space="preserve">
          <source>The counts are not affected in any way and the &lt;code&gt;Arc&lt;/code&gt; is not consumed. The pointer is valid for as long as there are strong counts in the &lt;code&gt;Arc&lt;/code&gt;.</source>
          <target state="translated">カウントはまったく影響を受けず、 &lt;code&gt;Arc&lt;/code&gt; は消費されません。ポインタは、 &lt;code&gt;Arc&lt;/code&gt; 強いカウントがある限り有効です。</target>
        </trans-unit>
        <trans-unit id="77f706694dca621192d20fdc480b2fbc8fb70f49" translate="yes" xml:space="preserve">
          <source>The counts are not affected in any way and the &lt;code&gt;Rc&lt;/code&gt; is not consumed. The pointer is valid for as long there are strong counts in the &lt;code&gt;Rc&lt;/code&gt;.</source>
          <target state="translated">カウントはまったく影響を受けず、 &lt;code&gt;Rc&lt;/code&gt; は消費されません。ポインタは、 &lt;code&gt;Rc&lt;/code&gt; に強いカウントがある限り有効です。</target>
        </trans-unit>
        <trans-unit id="5d69c16c8fa846f1af610002036c48591d43f28f" translate="yes" xml:space="preserve">
          <source>The crate name must not be empty, and must only contain &lt;a href=&quot;../std/primitive.char#method.is_alphanumeric&quot;&gt;Unicode alphanumeric&lt;/a&gt; or &lt;code&gt;-&lt;/code&gt; (U+002D) characters.</source>
          <target state="translated">クレート名は空にできません。また、&lt;a href=&quot;../std/primitive.char#method.is_alphanumeric&quot;&gt;Unicodeの英数字&lt;/a&gt;または &lt;code&gt;-&lt;/code&gt; （U + 002D）文字のみを含める必要があります。</target>
        </trans-unit>
        <trans-unit id="be4dd5125e77acafd163c79956b21bce0b41caf8" translate="yes" xml:space="preserve">
          <source>The created map has the default initial capacity.</source>
          <target state="translated">作成されたマップは、デフォルトの初期容量を持っています。</target>
        </trans-unit>
        <trans-unit id="a9c04b6351b379cccf29eab61f8204218529d934" translate="yes" xml:space="preserve">
          <source>The current algorithm is an adaptive, iterative merge sort inspired by &lt;a href=&quot;https://en.wikipedia.org/wiki/Timsort&quot;&gt;timsort&lt;/a&gt;. It is designed to be very fast in cases where the slice is nearly sorted, or consists of two or more sorted sequences concatenated one after another.</source>
          <target state="translated">現在のアルゴリズムは、&lt;a href=&quot;https://en.wikipedia.org/wiki/Timsort&quot;&gt;timsortに&lt;/a&gt;触発された適応型の反復マージソートです。スライスがほぼソートされている場合、または2つ以上のソートされたシーケンスが次々に連結されている場合に、非常に高速になるように設計されています。</target>
        </trans-unit>
        <trans-unit id="bf4d84cfe0f7a72eb4a521a3a9fe9d6ec790d19e" translate="yes" xml:space="preserve">
          <source>The current algorithm is based on &lt;a href=&quot;https://github.com/orlp/pdqsort&quot;&gt;pattern-defeating quicksort&lt;/a&gt; by Orson Peters, which combines the fast average case of randomized quicksort with the fast worst case of heapsort, while achieving linear time on slices with certain patterns. It uses some randomization to avoid degenerate cases, but with a fixed seed to always provide deterministic behavior.</source>
          <target state="translated">現在のアルゴリズムは、Orson Petersによる&lt;a href=&quot;https://github.com/orlp/pdqsort&quot;&gt;パターンを無効にするクイックソートに&lt;/a&gt;基づいています。これは、ランダム化されたクイックソートの高速平均ケースとヒープソートの高速最悪ケースを組み合わせながら、特定のパターンのスライスで線形時間を実現します。いくつかのランダム化を使用して、縮退したケースを回避しますが、固定されたシードを使用して、常に確定的な動作を提供します。</target>
        </trans-unit>
        <trans-unit id="17185ac0ce099c141b9827d28f04ee4d12e294f8" translate="yes" xml:space="preserve">
          <source>The current algorithm is based on the quickselect portion of the same quicksort algorithm used for &lt;a href=&quot;#method.sort_unstable&quot;&gt;&lt;code&gt;sort_unstable&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">現在のアルゴリズムは、&lt;a href=&quot;#method.sort_unstable&quot;&gt; &lt;code&gt;sort_unstable&lt;/code&gt; に&lt;/a&gt;使用されているのと同じクイックソートアルゴリズムのクイック選択部分に基づいています。</target>
        </trans-unit>
        <trans-unit id="593e3fc1b65f7b6d06f9c45167b067a1a762655b" translate="yes" xml:space="preserve">
          <source>The current file cursor is not affected by this function.</source>
          <target state="translated">現在のファイルカーソルはこの機能の影響を受けません。</target>
        </trans-unit>
        <trans-unit id="b3777ab23f3b1144c9a96d550ee493d6bc6e2d44" translate="yes" xml:space="preserve">
          <source>The current implementation uses the same infrastructure as compiler diagnostics and debuginfo, but this is not guaranteed.</source>
          <target state="translated">現在の実装では、コンパイラ診断やdebuginfoと同じインフラストラクチャを使用していますが、これは保証されていません。</target>
        </trans-unit>
        <trans-unit id="3346ba5eca8038cde57805738abeaa90cd6a63c6" translate="yes" xml:space="preserve">
          <source>The current module path can be thought of as the hierarchy of modules leading back up to the crate root. The first component of the path returned is the name of the crate currently being compiled.</source>
          <target state="translated">現在のモジュールパスは、クレートのルートに至るモジュールの階層と考えることができます。返されるパスの最初の要素は、現在コンパイルされているクレートの名前です。</target>
        </trans-unit>
        <trans-unit id="bdf915fa340c78bb10eee5926542917da6f9a74d" translate="yes" xml:space="preserve">
          <source>The current process does not have the permission rights to access &lt;code&gt;from&lt;/code&gt; or write &lt;code&gt;to&lt;/code&gt;.</source>
          <target state="translated">現在のプロセスがアクセス権限権がない &lt;code&gt;from&lt;/code&gt; か、書き込み &lt;code&gt;to&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1b9c6f166ff606296d138016ea8392f66f7ed63a" translate="yes" xml:space="preserve">
          <source>The current status of a backtrace, indicating whether it was captured or whether it is empty for some other reason.</source>
          <target state="translated">バックトレースの現在の状態を示し、捕捉されたかどうか、あるいは何らかの理由で空になっているかどうかを示します。</target>
        </trans-unit>
        <trans-unit id="aa1cdfe5525c9cd270fc9b5826bff19009fb273e" translate="yes" xml:space="preserve">
          <source>The current version of the prelude (version 1) lives in &lt;a href=&quot;v1/index&quot;&gt;&lt;code&gt;std::prelude::v1&lt;/code&gt;&lt;/a&gt;, and re-exports the following.</source>
          <target state="translated">プレリュードの現在のバージョン（バージョン1）は&lt;a href=&quot;v1/index&quot;&gt; &lt;code&gt;std::prelude::v1&lt;/code&gt; &lt;/a&gt;にあり、以下を再エクスポートします。</target>
        </trans-unit>
        <trans-unit id="c9ba6afb3853703b17e8a712fa55252cfe708a67" translate="yes" xml:space="preserve">
          <source>The current version of the prelude (version 1) lives in &lt;a href=&quot;v1/index&quot;&gt;&lt;code&gt;std::prelude::v1&lt;/code&gt;&lt;/a&gt;, and re-exports the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="912528c0cfbd7646c08850f1e407245a6bf7145e" translate="yes" xml:space="preserve">
          <source>The cursor is pointing to the &quot;ghost&quot; non-element if the list is empty.</source>
          <target state="translated">リストが空の場合、カーソルは &quot;ゴースト &quot;以外の要素を指しています。</target>
        </trans-unit>
        <trans-unit id="b9ad03e9a3edaaa56118f6fc3f2871f3d642b3c0" translate="yes" xml:space="preserve">
          <source>The data could not be sent on the &lt;a href=&quot;fn.sync_channel&quot;&gt;&lt;code&gt;sync_channel&lt;/code&gt;&lt;/a&gt; because it would require that the callee block to send the data.</source>
          <target state="translated">呼び出し先ブロックがデータを送信する必要があるため、&lt;a href=&quot;fn.sync_channel&quot;&gt; &lt;code&gt;sync_channel&lt;/code&gt; で&lt;/a&gt;データを送信できませんでした。</target>
        </trans-unit>
        <trans-unit id="caac8e332d6bed98dbe6a446c232bbf7ded49130" translate="yes" xml:space="preserve">
          <source>The data members that this trait exposes correspond to the members of the &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/api/fileapi/ns-fileapi-by_handle_file_information&quot;&gt;&lt;code&gt;BY_HANDLE_FILE_INFORMATION&lt;/code&gt;&lt;/a&gt; structure.</source>
          <target state="translated">このトレイトが公開するデータメンバーは、&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/api/fileapi/ns-fileapi-by_handle_file_information&quot;&gt; &lt;code&gt;BY_HANDLE_FILE_INFORMATION&lt;/code&gt; &lt;/a&gt;構造体のメンバーに対応します。</target>
        </trans-unit>
        <trans-unit id="113312da9f41c00330f3f6a2627f87633cf51181" translate="yes" xml:space="preserve">
          <source>The data members that this trait exposes correspond to the members of the &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/aa363788.aspx&quot;&gt;&lt;code&gt;BY_HANDLE_FILE_INFORMATION&lt;/code&gt;&lt;/a&gt; structure.</source>
          <target state="translated">この特性が公開するデータメンバーは、&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/aa363788.aspx&quot;&gt; &lt;code&gt;BY_HANDLE_FILE_INFORMATION&lt;/code&gt; &lt;/a&gt;構造体のメンバーに対応します。</target>
        </trans-unit>
        <trans-unit id="c9421f388aa0f6bda7993e70317be2c01ffcdb74" translate="yes" xml:space="preserve">
          <source>The data protected by the mutex can be accessed through this guard via its &lt;a href=&quot;../ops/trait.deref&quot;&gt;&lt;code&gt;Deref&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../ops/trait.derefmut&quot;&gt;&lt;code&gt;DerefMut&lt;/code&gt;&lt;/a&gt; implementations.</source>
          <target state="translated">ミューテックスによって保護されたデータは、その介してこのガードを介してアクセスすることができ&lt;a href=&quot;../ops/trait.deref&quot;&gt; &lt;code&gt;Deref&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;../ops/trait.derefmut&quot;&gt; &lt;code&gt;DerefMut&lt;/code&gt; &lt;/a&gt;実装。</target>
        </trans-unit>
        <trans-unit id="a8b69bce2135d478ffa031311b309f0dc7de4fc2" translate="yes" xml:space="preserve">
          <source>The data that the process wrote to stderr.</source>
          <target state="translated">プロセスが標準エラーに書き込んだデータ。</target>
        </trans-unit>
        <trans-unit id="5ad3bfb524d0ca744c539d652ec4054ab0b9dc35" translate="yes" xml:space="preserve">
          <source>The data that the process wrote to stdout.</source>
          <target state="translated">プロセスが標準出力に書き込んだデータ。</target>
        </trans-unit>
        <trans-unit id="f0f62565562b0bbca1d9e555b1c167c8869cc294" translate="yes" xml:space="preserve">
          <source>The declaration of &lt;code&gt;another_function&lt;/code&gt; has one parameter named &lt;code&gt;x&lt;/code&gt;. The type of &lt;code&gt;x&lt;/code&gt; is specified as &lt;code&gt;i32&lt;/code&gt;. When &lt;code&gt;5&lt;/code&gt; is passed to &lt;code&gt;another_function&lt;/code&gt;, the &lt;code&gt;println!&lt;/code&gt; macro puts &lt;code&gt;5&lt;/code&gt; where the pair of curly brackets were in the format string.</source>
          <target state="translated">&lt;code&gt;another_function&lt;/code&gt; の宣言には、 &lt;code&gt;x&lt;/code&gt; という名前のパラメーターが1つあります。 &lt;code&gt;x&lt;/code&gt; のタイプは &lt;code&gt;i32&lt;/code&gt; として指定されます。とき &lt;code&gt;5&lt;/code&gt; に渡され &lt;code&gt;another_function&lt;/code&gt; 、 &lt;code&gt;println!&lt;/code&gt; マクロは、中括弧のペアがフォーマット文字列内にあった場所に &lt;code&gt;5&lt;/code&gt; を置きます。</target>
        </trans-unit>
        <trans-unit id="f3e2b77707e4042bb7d326cf080f9fda22d6fd02" translate="yes" xml:space="preserve">
          <source>The default &lt;a href=&quot;#fillalignment&quot;&gt;fill/alignment&lt;/a&gt; for non-numerics is a space and left-aligned. The default for numeric formatters is also a space character but with right-alignment. If the &lt;code&gt;0&lt;/code&gt; flag (see below) is specified for numerics, then the implicit fill character is &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">非数値のデフォルトの&lt;a href=&quot;#fillalignment&quot;&gt;塗りつぶし/配置&lt;/a&gt;はスペースで、左揃えです。数値フォーマッタのデフォルトもスペース文字ですが、右揃えです。場合は &lt;code&gt;0&lt;/code&gt; フラグが（下記参照）数値に指定され、その後、暗黙のフィル文字です &lt;code&gt;0&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6a4c3f3e9f4bf073db3de78ffdfd8f78a08679d0" translate="yes" xml:space="preserve">
          <source>The default &lt;a href=&quot;#fillalignment&quot;&gt;fill/alignment&lt;/a&gt; for non-numerics is a space and left-aligned. The defaults for numeric formatters is also a space but with right-alignment. If the &lt;code&gt;0&lt;/code&gt; flag is specified for numerics, then the implicit fill character is &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">非数値のデフォルトの&lt;a href=&quot;#fillalignment&quot;&gt;塗りつぶし/配置&lt;/a&gt;はスペースであり、左揃えです。数値フォーマッターのデフォルトもスペースですが、右寄せされます。場合は &lt;code&gt;0&lt;/code&gt; フラグが数値に指定され、その後、暗黙のフィル文字です &lt;code&gt;0&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e71d3da519e1259cb4d0ff052a4082fe544273e4" translate="yes" xml:space="preserve">
          <source>The default &lt;a href=&quot;../../hash/trait.hasher&quot;&gt;&lt;code&gt;Hasher&lt;/code&gt;&lt;/a&gt; used by &lt;a href=&quot;struct.randomstate&quot;&gt;&lt;code&gt;RandomState&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;struct.randomstate&quot;&gt; &lt;code&gt;RandomState&lt;/code&gt; で&lt;/a&gt;使用されるデフォルトの&lt;a href=&quot;../../hash/trait.hasher&quot;&gt; &lt;code&gt;Hasher&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="81a33ca44ce969a6a0433a7aff9f0392c46b2e52" translate="yes" xml:space="preserve">
          <source>The default behavior of this function is to print a message to standard error and abort the process. It can be replaced with &lt;a href=&quot;fn.set_alloc_error_hook&quot;&gt;&lt;code&gt;set_alloc_error_hook&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;fn.take_alloc_error_hook&quot;&gt;&lt;code&gt;take_alloc_error_hook&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この関数のデフォルトの動作は、メッセージを標準エラーに出力してプロセスを中止することです。&lt;a href=&quot;fn.set_alloc_error_hook&quot;&gt; &lt;code&gt;set_alloc_error_hook&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;fn.take_alloc_error_hook&quot;&gt; &lt;code&gt;take_alloc_error_hook&lt;/code&gt; で&lt;/a&gt;置き換えることができます。</target>
        </trans-unit>
        <trans-unit id="1fe48c8009742af8ee8a3efe0842a923bc01bf9d" translate="yes" xml:space="preserve">
          <source>The default generic type in this code is within the &lt;code&gt;Add&lt;/code&gt; trait. Here is its definition:</source>
          <target state="translated">このコードのデフォルトのジェネリック型は &lt;code&gt;Add&lt;/code&gt; トレイト内にあります。以下がその定義です。</target>
        </trans-unit>
        <trans-unit id="697b922437171b9fe1e8c84494c4b161d6fd03d3" translate="yes" xml:space="preserve">
          <source>The default hashing algorithm is currently SipHash 1-3, though this is subject to change at any point in the future. While its performance is very competitive for medium sized keys, other hashing algorithms will outperform it for small keys such as integers as well as large keys such as long strings, though those algorithms will typically &lt;em&gt;not&lt;/em&gt; protect against attacks such as HashDoS.</source>
          <target state="translated">デフォルトのハッシュアルゴリズムは現在SipHash 1〜3ですが、これは将来いつでも変更される可能性があります。そのパフォーマンスは中規模のキーに対して非常に競争力がありますが、他のハッシュアルゴリズムは、整数などの小さなキーや長い文字列などの大きなキーに対してパフォーマンスが優れていますが、これらのアルゴリズムは通常、HashDoSなどの攻撃から保護し&lt;em&gt;ません&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="80e587164750efd5907b562bcc2c0ec8621ca1dc" translate="yes" xml:space="preserve">
          <source>The default implementation calls &lt;a href=&quot;trait.write#tymethod.write&quot;&gt;&lt;code&gt;write&lt;/code&gt;&lt;/a&gt; with either the first nonempty buffer provided, or an empty one if none exists.</source>
          <target state="translated">デフォルトの実装では、最初に空でないバッファーを指定して、または空のバッファーが存在しない場合は空のバッファーを使用して&lt;a href=&quot;trait.write#tymethod.write&quot;&gt; &lt;code&gt;write&lt;/code&gt; &lt;/a&gt;を呼び出します。</target>
        </trans-unit>
        <trans-unit id="73b38e69c912c9cd2a1d35da9b4cb8282e56833f" translate="yes" xml:space="preserve">
          <source>The default implementation calls &lt;code&gt;read&lt;/code&gt; with either the first nonempty buffer provided, or an empty one if none exists.</source>
          <target state="translated">デフォルトの実装は、最初の空でないバッファを提供するか、存在しない場合は空のバッファを使用して &lt;code&gt;read&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="2e19ee8802e471056a9e27a45d3086893e133973" translate="yes" xml:space="preserve">
          <source>The default implementation calls &lt;code&gt;write&lt;/code&gt; with either the first nonempty buffer provided, or an empty one if none exists.</source>
          <target state="translated">デフォルトの実装では、提供された最初の空でないバッファ、または存在しない場合は空のバッファを使用して &lt;code&gt;write&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="917b792910290b9f104f9e9bb1c1c376f6e62a1b" translate="yes" xml:space="preserve">
          <source>The default implementation does nothing.</source>
          <target state="translated">デフォルトの実装では何もしません。</target>
        </trans-unit>
        <trans-unit id="cda4f183b9995aecf4b0037179612271bde1f6bd" translate="yes" xml:space="preserve">
          <source>The default implementation returns &lt;code&gt;(0, &lt;/code&gt;&lt;a href=&quot;../option/enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt;&lt;code&gt;)&lt;/code&gt; which is correct for any iterator.</source>
          <target state="translated">デフォルトの実装は &lt;code&gt;(0, &lt;/code&gt; &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt; &lt;code&gt;)&lt;/code&gt; を返します。これはどのイテレータにとっても正しいものです。</target>
        </trans-unit>
        <trans-unit id="e33ad58e76bb269caa1c45076544afb93bb1e40d" translate="yes" xml:space="preserve">
          <source>The default implementation returns &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">デフォルトの実装は &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="969fb25f2024192b2aecf3ee3a177be1b86acfb5" translate="yes" xml:space="preserve">
          <source>The default implementation returns an initializer which will zero buffers.</source>
          <target state="translated">デフォルトの実装では、バッファをゼロにするイニシャライザを返します。</target>
        </trans-unit>
        <trans-unit id="bb3d803ebf5acd8c1abc49ce5f1cae9b36493095" translate="yes" xml:space="preserve">
          <source>The default implementations are returning &lt;code&gt;libc::EXIT_SUCCESS&lt;/code&gt; to indicate a successful execution. In case of a failure, &lt;code&gt;libc::EXIT_FAILURE&lt;/code&gt; is returned.</source>
          <target state="translated">デフォルトの実装は &lt;code&gt;libc::EXIT_SUCCESS&lt;/code&gt; を返し、実行が成功したことを示します。失敗した場合は、 &lt;code&gt;libc::EXIT_FAILURE&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="31cdcfae6f2b31eff3f08e0d9f029eeb9ec7bee1" translate="yes" xml:space="preserve">
          <source>The default is chosen with a bias toward producing literals that are legal in a variety of languages, including C++11 and similar C-family languages. The exact rules are:</source>
          <target state="translated">デフ ォル ト は、 C++11 や類似の C 系言語を含む、 さ ま ざ ま な言語で合法な リ テ ラ ルを生成す る こ と に偏っ て選択 さ れています。正確なルールは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="b02cae987658ffb74f03215f87762f2599f0c7eb" translate="yes" xml:space="preserve">
          <source>The default memory allocator provided by the operating system.</source>
          <target state="translated">オペレーティングシステムが提供するデフォルトのメモリアロケータ。</target>
        </trans-unit>
        <trans-unit id="1dd4678ade75055f3987aad761b36a01d2353c9f" translate="yes" xml:space="preserve">
          <source>The default stack size for spawned threads is 2 MiB, though this particular stack size is subject to change in the future. There are two ways to manually specify the stack size for spawned threads:</source>
          <target state="translated">スポーンされるスレッドのデフォルトのスタックサイズは 2 MiB ですが、この特定のスタックサイズは将来的に変更される可能性があります。スポーンされたスレッドのスタックサイズを手動で指定するには 2 つの方法があります。</target>
        </trans-unit>
        <trans-unit id="0f91c7ab56b392b9e17d4e1e13452f2f412a7407" translate="yes" xml:space="preserve">
          <source>The definition for complex NTs deserves some justification. SEP_SET(M) defines the possibility that the separator could be a valid first token for M, which happens when there is a separator defined and the repeated fragment could be empty. ALPHA_SET(M) defines the possibility that the complex NT could be empty, meaning that M's valid first tokens are those of the following token-tree sequences &lt;code&gt;&amp;alpha;&lt;/code&gt;. This occurs when either &lt;code&gt;\*&lt;/code&gt; or &lt;code&gt;?&lt;/code&gt; is used, in which case there could be zero repetitions. In theory, this could also occur if &lt;code&gt;+&lt;/code&gt; was used with a potentially-empty repeating fragment, but this is forbidden by the third invariant.</source>
          <target state="translated">複雑なNTの定義は、ある程度の正当化に値します。SEP_SET（M）は、セパレーターがMの有効な最初のトークンになる可能性を定義します。これは、セパレーターが定義されていて、繰り返しフラグメントが空である可能性がある場合に発生します。ALPHA_SET（M）は、複雑なNTが空になる可能性を定義します。つまり、Mの有効な最初のトークンは、次のトークンツリーシーケンス &lt;code&gt;&amp;alpha;&lt;/code&gt; のトークンです。これは、 &lt;code&gt;\*&lt;/code&gt; または &lt;code&gt;?&lt;/code&gt; が使用されます。その場合、繰り返しはゼロになる可能性があります。理論的には、 &lt;code&gt;+&lt;/code&gt; が潜在的に空の繰り返しフラグメントと共に使用された場合にもこれが発生する可能性がありますが、これは3番目の不変式によって禁止されています。</target>
        </trans-unit>
        <trans-unit id="985a8049c57bbba61492d3048826a9b3471b56f7" translate="yes" xml:space="preserve">
          <source>The definition of &lt;code&gt;Config&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Config&lt;/code&gt; の定義</target>
        </trans-unit>
        <trans-unit id="830ab684e6b9340db4f9c07a73c12e27ccb95977" translate="yes" xml:space="preserve">
          <source>The dereference operator</source>
          <target state="translated">参照解除演算子</target>
        </trans-unit>
        <trans-unit id="75ad44a3ef91af0a45f2841a370dda11b833e07f" translate="yes" xml:space="preserve">
          <source>The desired behavior of the &lt;code&gt;generate_workout&lt;/code&gt; function is to first check whether the user wants a low-intensity workout (indicated by a number less than 25) or a high-intensity workout (a number of 25 or greater).</source>
          <target state="translated">&lt;code&gt;generate_workout&lt;/code&gt; 関数の望ましい動作は、ユーザーが低強度のワークアウト（25未満の数値で示される）または高強度のワークアウト（25以上の数値で示される）を希望しているかどうかを最初に確認することです。</target>
        </trans-unit>
        <trans-unit id="f11d06267e33f3ae0370e1b473dace96a1d49d65" translate="yes" xml:space="preserve">
          <source>The destructor of a type &lt;code&gt;T&lt;/code&gt; consists of:</source>
          <target state="translated">タイプ &lt;code&gt;T&lt;/code&gt; のデストラクタは、次のもので構成されます。</target>
        </trans-unit>
        <trans-unit id="be2c8573e9de352b5e8e680cfa4b055e97512426" translate="yes" xml:space="preserve">
          <source>The destructor of a type consists of</source>
          <target state="translated">型のデストラクタは、次のように構成されます。</target>
        </trans-unit>
        <trans-unit id="c9c60944e1a21001c2063c93ac3b0f4cb46946e2" translate="yes" xml:space="preserve">
          <source>The destructor of the struct must not move structural fields out of its argument. This is the exact point that was raised in the &lt;a href=&quot;#drop-implementation&quot;&gt;previous section&lt;/a&gt;: &lt;code&gt;drop&lt;/code&gt; takes &lt;code&gt;&amp;amp;mut self&lt;/code&gt;, but the struct (and hence its fields) might have been pinned before. You have to guarantee that you do not move a field inside your &lt;a href=&quot;../ops/trait.drop#tymethod.drop&quot;&gt;&lt;code&gt;Drop&lt;/code&gt;&lt;/a&gt; implementation. In particular, as explained previously, this means that your struct must &lt;em&gt;not&lt;/em&gt; be &lt;code&gt;#[repr(packed)]&lt;/code&gt;. See that section for how to write &lt;a href=&quot;../ops/trait.drop#tymethod.drop&quot;&gt;&lt;code&gt;drop&lt;/code&gt;&lt;/a&gt; in a way that the compiler can help you not accidentally break pinning.</source>
          <target state="translated">構造体のデストラクタは、構造体フィールドを引数から移動してはなりません。これはで育った正確なポイントで&lt;a href=&quot;#drop-implementation&quot;&gt;、前のセクション&lt;/a&gt;： &lt;code&gt;drop&lt;/code&gt; かかる &lt;code&gt;&amp;amp;mut self&lt;/code&gt; が、構造体（ひいてはそのフィールド）が前に固定されている場合があります。&lt;a href=&quot;../ops/trait.drop#tymethod.drop&quot;&gt; &lt;code&gt;Drop&lt;/code&gt; &lt;/a&gt;実装内でフィールドを移動しないことを保証する必要があります。特に、前に説明したように、これは構造体が &lt;code&gt;#[repr(packed)]&lt;/code&gt; であってはなら&lt;em&gt;ない&lt;/em&gt;ことを意味します。コンパイラが誤ってピン留めを壊さないように&lt;a href=&quot;../ops/trait.drop#tymethod.drop&quot;&gt; &lt;code&gt;drop&lt;/code&gt; &lt;/a&gt;を書き込む方法については、そのセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="30054f3bf420ad868745eedcb4cc73a1da34e82c" translate="yes" xml:space="preserve">
          <source>The destructor of the struct must not move structural fields out of its argument. This is the exact point that was raised in the &lt;a href=&quot;#drop-implementation&quot;&gt;previous section&lt;/a&gt;: &lt;code&gt;drop&lt;/code&gt; takes &lt;code&gt;&amp;amp;mut self&lt;/code&gt;, but the struct (and hence its fields) might have been pinned before. You have to guarantee that you do not move a field inside your &lt;code&gt;Drop&lt;/code&gt; implementation. In particular, as explained previously, this means that your struct must &lt;em&gt;not&lt;/em&gt; be &lt;code&gt;#[repr(packed)]&lt;/code&gt;. See that section for how to write &lt;code&gt;drop&lt;/code&gt; in a way that the compiler can help you not accidentally break pinning.</source>
          <target state="translated">構造体のデストラクタは、構造化フィールドをその引数の外に移動してはなりません。これはで育った正確なポイントで&lt;a href=&quot;#drop-implementation&quot;&gt;、前のセクション&lt;/a&gt;： &lt;code&gt;drop&lt;/code&gt; かかる &lt;code&gt;&amp;amp;mut self&lt;/code&gt; が、構造体（ひいてはそのフィールド）が前に固定されている場合があります。 &lt;code&gt;Drop&lt;/code&gt; 実装内でフィールドを移動しないことを保証する必要があります。特に、前に説明したように、これは構造体が &lt;code&gt;#[repr(packed)]&lt;/code&gt; であってはなら&lt;em&gt;ない&lt;/em&gt;ことを意味します。コンパイラーが誤ってピン止めを解除しないように &lt;code&gt;drop&lt;/code&gt; を作成する方法については、そのセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="f85efc5c824a33e7773d4a9703af1abcf28610ef" translate="yes" xml:space="preserve">
          <source>The difference between 'the prelude' and these other preludes is that they are not automatically &lt;code&gt;use&lt;/code&gt;'d, and must be imported manually. This is still easier than importing all of their constituent components.</source>
          <target state="translated">「プレリュード」とこれらの他のプレリュードの違いは、「d」が自動的に &lt;code&gt;use&lt;/code&gt; れず、手動でインポートする必要があることです。これは、構成要素をすべてインポートするよりも簡単です。</target>
        </trans-unit>
        <trans-unit id="505a24f6c966bf30ebbdd0623555d0248f90c11b" translate="yes" xml:space="preserve">
          <source>The difference between &lt;a href=&quot;macro.unimplemented&quot;&gt;&lt;code&gt;unimplemented!&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;todo!&lt;/code&gt; is that while &lt;code&gt;todo!&lt;/code&gt; conveys an intent of implementing the functionality later and the message is &quot;not yet implemented&quot;, &lt;code&gt;unimplemented!&lt;/code&gt; makes no such claims. Its message is &quot;not implemented&quot;. Also some IDEs will mark &lt;code&gt;todo!&lt;/code&gt;s.</source>
          <target state="translated">&lt;a href=&quot;macro.unimplemented&quot;&gt; &lt;code&gt;unimplemented!&lt;/code&gt; &lt;/a&gt;の違い！そして &lt;code&gt;todo!&lt;/code&gt; それは &lt;code&gt;todo!&lt;/code&gt; 後で機能を実装する意図を伝え、メッセージは「まだ実装されていません」、 &lt;code&gt;unimplemented!&lt;/code&gt; されていません。そのような主張はしません。そのメッセージは「実装されていません」です。また、一部のIDEは &lt;code&gt;todo!&lt;/code&gt; をマークします！s。</target>
        </trans-unit>
        <trans-unit id="03297ced74ba958f935a37ee67580ef54eeb9a79" translate="yes" xml:space="preserve">
          <source>The difference between &lt;code&gt;unimplemented!&lt;/code&gt; and &lt;a href=&quot;macro.todo&quot;&gt;&lt;code&gt;todo!&lt;/code&gt;&lt;/a&gt; is that while &lt;code&gt;todo!&lt;/code&gt; conveys an intent of implementing the functionality later and the message is &quot;not yet implemented&quot;, &lt;code&gt;unimplemented!&lt;/code&gt; makes no such claims. Its message is &quot;not implemented&quot;. Also some IDEs will mark &lt;code&gt;todo!&lt;/code&gt;s.</source>
          <target state="translated">&lt;code&gt;unimplemented!&lt;/code&gt; の違い！そして&lt;a href=&quot;macro.todo&quot;&gt; &lt;code&gt;todo!&lt;/code&gt; &lt;/a&gt;それは &lt;code&gt;todo!&lt;/code&gt; 後で機能を実装する意図を伝え、メッセージは「まだ実装されていません」、 &lt;code&gt;unimplemented!&lt;/code&gt; されていません。そのような主張はしません。そのメッセージは「実装されていません」です。また、一部のIDEは &lt;code&gt;todo!&lt;/code&gt; をマークします！s。</target>
        </trans-unit>
        <trans-unit id="3d53ebfe9f22c1eb14437a5afaa7bab7ac81b640" translate="yes" xml:space="preserve">
          <source>The difference is that when using generics, as in Listing 19-13, we must annotate the types in each implementation; because we can also implement &lt;code&gt;Iterator&amp;lt;String&amp;gt; for Counter&lt;/code&gt; or any other type, we could have multiple implementations of &lt;code&gt;Iterator&lt;/code&gt; for &lt;code&gt;Counter&lt;/code&gt;. In other words, when a trait has a generic parameter, it can be implemented for a type multiple times, changing the concrete types of the generic type parameters each time. When we use the &lt;code&gt;next&lt;/code&gt; method on &lt;code&gt;Counter&lt;/code&gt;, we would have to provide type annotations to indicate which implementation of &lt;code&gt;Iterator&lt;/code&gt; we want to use.</source>
          <target state="translated">違いは、リスト19-13のようにジェネリックを使用する場合、各実装で型に注釈を付ける必要があることです。我々はまた、実装することができますので、 &lt;code&gt;Iterator&amp;lt;String&amp;gt; for Counter&lt;/code&gt; 、または任意の他のタイプ、我々は複数の実装可能性があり &lt;code&gt;Iterator&lt;/code&gt; のための &lt;code&gt;Counter&lt;/code&gt; 。つまり、トレイトにジェネリックパラメータがある場合、そのタイプに対して複数回実装して、ジェネリックタイプパラメータの具象タイプを毎回変更することができます。 &lt;code&gt;Counter&lt;/code&gt; で &lt;code&gt;next&lt;/code&gt; メソッドを使用する場合、使用する &lt;code&gt;Iterator&lt;/code&gt; の実装を示す型注釈を提供する必要があります。</target>
        </trans-unit>
        <trans-unit id="5d4f5e1a47f10d66452650a5f161fd164ebd410d" translate="yes" xml:space="preserve">
          <source>The differences about paths and the &lt;code&gt;use&lt;/code&gt; keyword between the 2015 and 2018 editions can also be found in the &lt;a href=&quot;../reference/items/use-declarations&quot;&gt;Reference&lt;/a&gt;.</source>
          <target state="translated">2015年版と2018年版のパスと &lt;code&gt;use&lt;/code&gt; キーワードの違いは、&lt;a href=&quot;../reference/items/use-declarations&quot;&gt;リファレンスに&lt;/a&gt;も記載されています。</target>
        </trans-unit>
        <trans-unit id="d9b61b2f901725762b56d16bf06bea0055df6804" translate="yes" xml:space="preserve">
          <source>The different behavior of files in the &lt;em&gt;tests&lt;/em&gt; directory is most noticeable when you have a set of helper functions that would be useful in multiple integration test files and you try to follow the steps in the &lt;a href=&quot;ch07-05-separating-modules-into-different-files&quot;&gt;&amp;ldquo;Separating Modules into Different Files&amp;rdquo;&lt;/a&gt; section of Chapter 7 to extract them into a common module. For example, if we create &lt;em&gt;tests/common.rs&lt;/em&gt; and place a function named &lt;code&gt;setup&lt;/code&gt; in it, we can add some code to &lt;code&gt;setup&lt;/code&gt; that we want to call from multiple test functions in multiple test files:</source>
          <target state="translated">&lt;em&gt;テスト&lt;/em&gt;ディレクトリ内のファイルのさまざまな動作は、複数の統合テストファイルで役立つ一連のヘルパー関数があり、第7章の&lt;a href=&quot;ch07-05-separating-modules-into-different-files&quot;&gt;「モジュールをさまざまなファイルに分割する」&lt;/a&gt;セクションの手順に従ってみると最も顕著になります。それらを共通モジュールに抽出します。たとえば、&lt;em&gt;tests / common.rs&lt;/em&gt;を作成し、その中に &lt;code&gt;setup&lt;/code&gt; という名前の関数を配置した場合、複数のテストファイルの複数のテスト関数から呼び出すコードを &lt;code&gt;setup&lt;/code&gt; に追加できます。</target>
        </trans-unit>
        <trans-unit id="d5be1c02c26fe5ef598a5696a274160d696e7977" translate="yes" xml:space="preserve">
          <source>The different meanings of &lt;code&gt;unsafe&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;unsafe&lt;/code&gt; でないことのさまざまな意味</target>
        </trans-unit>
        <trans-unit id="1fd895f49df6ac41f021206eb05bd5dfbc8e5ada" translate="yes" xml:space="preserve">
          <source>The directories and files used for loading external file modules can be influenced with the &lt;code&gt;path&lt;/code&gt; attribute.</source>
          <target state="translated">外部ファイルモジュールのロードに使用されるディレクトリとファイルは、 &lt;code&gt;path&lt;/code&gt; 属性の影響を受ける可能性があります。</target>
        </trans-unit>
        <trans-unit id="1e92ecf8e1ea3e2a6e4c02654c525e112d825547" translate="yes" xml:space="preserve">
          <source>The directory isn't empty.</source>
          <target state="translated">ディレクトリが空ではありません。</target>
        </trans-unit>
        <trans-unit id="8e9718c5436468359091854f47e29ace6b258c73" translate="yes" xml:space="preserve">
          <source>The discriminant enum from the example &lt;a href=&quot;#reprc-enums-with-fields&quot;&gt;earlier&lt;/a&gt; then becomes:</source>
          <target state="translated">&lt;a href=&quot;#reprc-enums-with-fields&quot;&gt;前&lt;/a&gt;の例の判別列挙型は次のようになります。</target>
        </trans-unit>
        <trans-unit id="5406bf9928b412a24605eecb2ec809ade9b2bfca" translate="yes" xml:space="preserve">
          <source>The discriminant of an enum variant may change if the enum definition changes. A discriminant of some variant will not change between compilations with the same compiler.</source>
          <target state="translated">enum の定義が変更された場合、enum の variant の判別子は変更される可能性があります。同じコンパイラでコンパイルしても、あるバリアントの判別子は変化しません。</target>
        </trans-unit>
        <trans-unit id="e1e71495d678a5d4be21061931a65d8862bd4e7e" translate="yes" xml:space="preserve">
          <source>The distance being in bounds cannot rely on &quot;wrapping around&quot; the address space.</source>
          <target state="translated">距離が境界内にあることは、アドレス空間の「回り込み」に頼ることはできません。</target>
        </trans-unit>
        <trans-unit id="6c785ac664fd8d2346ca1bb482fcd8b5593d6af3" translate="yes" xml:space="preserve">
          <source>The distance between the pointers, &lt;strong&gt;in bytes&lt;/strong&gt;, cannot overflow an &lt;code&gt;isize&lt;/code&gt;.</source>
          <target state="translated">ポインター間の距離&lt;strong&gt;（バイト単位&lt;/strong&gt;）は、 &lt;code&gt;isize&lt;/code&gt; をオーバーフローできません。</target>
        </trans-unit>
        <trans-unit id="bd1487c3b6f63cdfefd3896403e040d0a14037e5" translate="yes" xml:space="preserve">
          <source>The distance between the pointers, in bytes, must be an exact multiple of the size of &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">ポインター間の距離（バイト単位）は、 &lt;code&gt;T&lt;/code&gt; のサイズの正確な倍数でなければなりません。</target>
        </trans-unit>
        <trans-unit id="c85eee3f8fcb1e3d7acfa8c71113a8ed01e9b6ce" translate="yes" xml:space="preserve">
          <source>The division assignment operator &lt;code&gt;/=&lt;/code&gt;.</source>
          <target state="translated">除算代入演算子 &lt;code&gt;/=&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fac0cbbb13a4ae4385140ac3ccea99961d57c224" translate="yes" xml:space="preserve">
          <source>The division operator &lt;code&gt;/&lt;/code&gt;.</source>
          <target state="translated">除算演算子 &lt;code&gt;/&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d4bae769945be3db52fcb8fef6b0f5ad9c54eef4" translate="yes" xml:space="preserve">
          <source>The documentation for this keyword is &lt;a href=&quot;https://github.com/rust-lang/rust/issues/34601&quot;&gt;not yet complete&lt;/a&gt;. Pull requests welcome!</source>
          <target state="translated">このキーワードのドキュメント&lt;a href=&quot;https://github.com/rust-lang/rust/issues/34601&quot;&gt;はまだ完全で&lt;/a&gt;はありません。プルリクエストは大歓迎です！</target>
        </trans-unit>
        <trans-unit id="7092af2bcd91c441c2dfc4c8d572a11dfce60e91" translate="yes" xml:space="preserve">
          <source>The double colon (&lt;code&gt;::&lt;/code&gt;) is an operator that allows us to namespace this particular &lt;code&gt;from&lt;/code&gt; function under the &lt;code&gt;String&lt;/code&gt; type rather than using some sort of name like &lt;code&gt;string_from&lt;/code&gt;. We&amp;rsquo;ll discuss this syntax more in the &lt;a href=&quot;ch05-03-method-syntax#method-syntax&quot;&gt;&amp;ldquo;Method Syntax&amp;rdquo;&lt;/a&gt; section of Chapter 5 and when we talk about namespacing with modules in &lt;a href=&quot;ch07-03-paths-for-referring-to-an-item-in-the-module-tree&quot;&gt;&amp;ldquo;Paths for Referring to an Item in the Module Tree&amp;rdquo;&lt;/a&gt; in Chapter 7.</source>
          <target state="translated">二重コロン（ &lt;code&gt;::&lt;/code&gt; :）は、 &lt;code&gt;string_from&lt;/code&gt; のような名前を使用するのではなく、 &lt;code&gt;String&lt;/code&gt; タイプの下でこの特定の &lt;code&gt;from&lt;/code&gt; 関数の名前空間を作成できるようにする演算子です。この構文については、第5章の&lt;a href=&quot;ch05-03-method-syntax#method-syntax&quot;&gt;「メソッド構文」&lt;/a&gt;セクションと、第7章の&lt;a href=&quot;ch07-03-paths-for-referring-to-an-item-in-the-module-tree&quot;&gt;「モジュールツリーでアイテムを参照するためのパス」&lt;/a&gt;でモジュールの名前空間について説明するときに詳しく説明します。</target>
        </trans-unit>
        <trans-unit id="27b2d1743e157ab144583c8c6b85ea9ad0092f0b" translate="yes" xml:space="preserve">
          <source>The downside of using &lt;code&gt;if let&lt;/code&gt; expressions is that the compiler doesn&amp;rsquo;t check exhaustiveness, whereas with &lt;code&gt;match&lt;/code&gt; expressions it does. If we omitted the last &lt;code&gt;else&lt;/code&gt; block and therefore missed handling some cases, the compiler would not alert us to the possible logic bug.</source>
          <target state="translated">&lt;code&gt;if let&lt;/code&gt; 式を使用することの欠点は、コンパイラが網羅性をチェックしないのに対し、 &lt;code&gt;match&lt;/code&gt; 式ではチェックすることです。最後の &lt;code&gt;else&lt;/code&gt; ブロックを省略したために一部のケースを処理しなかった場合、コンパイラーはロジックバグの可能性について警告しません。</target>
        </trans-unit>
        <trans-unit id="e387e6a833f24807236bb7fd7266c18e39a1df6d" translate="yes" xml:space="preserve">
          <source>The downside of using this technique is that &lt;code&gt;Wrapper&lt;/code&gt; is a new type, so it doesn&amp;rsquo;t have the methods of the value it&amp;rsquo;s holding. We would have to implement all the methods of &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; directly on &lt;code&gt;Wrapper&lt;/code&gt; such that the methods delegate to &lt;code&gt;self.0&lt;/code&gt;, which would allow us to treat &lt;code&gt;Wrapper&lt;/code&gt; exactly like a &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt;. If we wanted the new type to have every method the inner type has, implementing the &lt;code&gt;Deref&lt;/code&gt; trait (discussed in Chapter 15 in the &lt;a href=&quot;ch15-02-deref#treating-smart-pointers-like-regular-references-with-the-deref-trait&quot;&gt;&amp;ldquo;Treating Smart Pointers Like Regular References with the &lt;code&gt;Deref&lt;/code&gt; Trait&amp;rdquo;&lt;/a&gt; section) on the &lt;code&gt;Wrapper&lt;/code&gt; to return the inner type would be a solution. If we don&amp;rsquo;t want the &lt;code&gt;Wrapper&lt;/code&gt; type to have all the methods of the inner type&amp;mdash;for example, to restrict the &lt;code&gt;Wrapper&lt;/code&gt; type&amp;rsquo;s behavior&amp;mdash;we would have to implement just the methods we do want manually.</source>
          <target state="translated">この手法を使用することの欠点は、 &lt;code&gt;Wrapper&lt;/code&gt; が新しい型であるため、保持する値のメソッドがないことです。我々は、すべてのメソッドを実装する必要があります &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; 直接の &lt;code&gt;Wrapper&lt;/code&gt; メソッドがに委譲するように &lt;code&gt;self.0&lt;/code&gt; 私たちが治療できるようになる、 &lt;code&gt;Wrapper&lt;/code&gt; 正確に同じよう &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; 。私たちは、インナータイプが持つすべてのメソッド、実装持っている新しいタイプのを望んでいた場合は &lt;code&gt;Deref&lt;/code&gt; 形質を（で第15章で説明する&lt;a href=&quot;ch15-02-deref#treating-smart-pointers-like-regular-references-with-the-deref-trait&quot;&gt;「で処理するスマートポインタのような正規参照 &lt;code&gt;Deref&lt;/code&gt; 形質」&lt;/a&gt;のセクション） &lt;code&gt;Wrapper&lt;/code&gt; 内部の型を返すことは解決策でしょう。 &lt;code&gt;Wrapper&lt;/code&gt; タイプに内部タイプのすべてのメソッドを持たせたくない場合（たとえば、 &lt;code&gt;Wrapper&lt;/code&gt; タイプの動作を制限するため）、必要なメソッドのみを手動で実装する必要があります。</target>
        </trans-unit>
        <trans-unit id="0e7aa88c59ccdb8f5ae43f1abe07297a4d7ace58" translate="yes" xml:space="preserve">
          <source>The downside to implementing a macro instead of a function is that macro definitions are more complex than function definitions because you&amp;rsquo;re writing Rust code that writes Rust code. Due to this indirection, macro definitions are generally more difficult to read, understand, and maintain than function definitions.</source>
          <target state="translated">関数ではなくマクロを実装することの欠点は、Rustコードを記述するRustコードを記述しているため、マクロ定義が関数定義よりも複雑になることです。この間接的な理由により、マクロ定義は一般に、関数定義よりも読み取り、理解、維持が困難です。</target>
        </trans-unit>
        <trans-unit id="719fc8d49d59015d6dffe7ccc55e5816d1966b0e" translate="yes" xml:space="preserve">
          <source>The duration of one microsecond.</source>
          <target state="translated">1マイクロ秒の持続時間。</target>
        </trans-unit>
        <trans-unit id="e68beeeb11183a3ff18abb9e6896356e66b6200f" translate="yes" xml:space="preserve">
          <source>The duration of one millisecond.</source>
          <target state="translated">1ミリ秒の持続時間。</target>
        </trans-unit>
        <trans-unit id="e9d186359c1c80de39171fea4281a767f86db9c5" translate="yes" xml:space="preserve">
          <source>The duration of one nanosecond.</source>
          <target state="translated">1ナノ秒の持続時間。</target>
        </trans-unit>
        <trans-unit id="926b58a37c99c224d9cf0ad023e9e79f2bae5af3" translate="yes" xml:space="preserve">
          <source>The duration of one second.</source>
          <target state="translated">1秒の持続時間。</target>
        </trans-unit>
        <trans-unit id="51e82336197f20c9062a20d4490259f940ada0fe" translate="yes" xml:space="preserve">
          <source>The easiest fix is to rewrite your closure into a top-level function, or into a method. In some cases, you may also be able to have your closure call itself by capturing a &lt;code&gt;&amp;amp;Fn()&lt;/code&gt; object or &lt;code&gt;fn()&lt;/code&gt; pointer that refers to itself. That is permitting, since the closure would be invoking itself via a virtual call, and hence does not directly reference its own &lt;em&gt;type&lt;/em&gt;.</source>
          <target state="translated">最も簡単な修正は、クロージャをトップレベルの関数またはメソッドに書き直すことです。場合によっては、 &lt;code&gt;&amp;amp;Fn()&lt;/code&gt; オブジェクトまたはそれ自体を参照する &lt;code&gt;fn()&lt;/code&gt; ポインターをキャプチャーすることにより、クロージャー自体を呼び出すこともできます。クロージャは仮想呼び出しを介してそれ自体を呼び出すため、それ自体は許可されています。したがって、クロージャはそれ自体の&lt;em&gt;タイプを&lt;/em&gt;直接参照しません。</target>
        </trans-unit>
        <trans-unit id="8b90152377c4d2fa6a58836b95414b3c64c66683" translate="yes" xml:space="preserve">
          <source>The easiest way to use &lt;code&gt;HashMap&lt;/code&gt; with a custom key type is to derive &lt;a href=&quot;../../cmp/trait.eq&quot;&gt;&lt;code&gt;Eq&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../hash/trait.hash&quot;&gt;&lt;code&gt;Hash&lt;/code&gt;&lt;/a&gt;. We must also derive &lt;a href=&quot;../../cmp/trait.partialeq&quot;&gt;&lt;code&gt;PartialEq&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">カスタムキータイプで &lt;code&gt;HashMap&lt;/code&gt; を使用する最も簡単な方法は、&lt;a href=&quot;../../cmp/trait.eq&quot;&gt; &lt;code&gt;Eq&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;../../hash/trait.hash&quot;&gt; &lt;code&gt;Hash&lt;/code&gt; &lt;/a&gt;を派生させることです。&lt;a href=&quot;../../cmp/trait.partialeq&quot;&gt; &lt;code&gt;PartialEq&lt;/code&gt; &lt;/a&gt;も導出する必要があります。</target>
        </trans-unit>
        <trans-unit id="8fdc4a2a7876216a8a5156bcc124c1c5c1d13c54" translate="yes" xml:space="preserve">
          <source>The easiest way to use &lt;code&gt;HashMap&lt;/code&gt; with a custom key type is to derive &lt;a href=&quot;../cmp/trait.eq&quot;&gt;&lt;code&gt;Eq&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../hash/trait.hash&quot;&gt;&lt;code&gt;Hash&lt;/code&gt;&lt;/a&gt;. We must also derive &lt;a href=&quot;../cmp/trait.partialeq&quot;&gt;&lt;code&gt;PartialEq&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">カスタムキータイプで &lt;code&gt;HashMap&lt;/code&gt; を使用する最も簡単な方法は、&lt;a href=&quot;../cmp/trait.eq&quot;&gt; &lt;code&gt;Eq&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;../hash/trait.hash&quot;&gt; &lt;code&gt;Hash&lt;/code&gt; &lt;/a&gt;を派生させることです。&lt;a href=&quot;../cmp/trait.partialeq&quot;&gt; &lt;code&gt;PartialEq&lt;/code&gt; &lt;/a&gt;も導出する必要があります。</target>
        </trans-unit>
        <trans-unit id="2b835cd73ddea2cd4aee637c4f9c2cd855ee696f" translate="yes" xml:space="preserve">
          <source>The easiest way to use &lt;code&gt;HashSet&lt;/code&gt; with a custom type is to derive &lt;a href=&quot;../../cmp/trait.eq&quot;&gt;&lt;code&gt;Eq&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../hash/trait.hash&quot;&gt;&lt;code&gt;Hash&lt;/code&gt;&lt;/a&gt;. We must also derive &lt;a href=&quot;../../cmp/trait.partialeq&quot;&gt;&lt;code&gt;PartialEq&lt;/code&gt;&lt;/a&gt;, this will in the future be implied by &lt;a href=&quot;../../cmp/trait.eq&quot;&gt;&lt;code&gt;Eq&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">カスタムタイプで &lt;code&gt;HashSet&lt;/code&gt; を使用する最も簡単な方法は、&lt;a href=&quot;../../cmp/trait.eq&quot;&gt; &lt;code&gt;Eq&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;../../hash/trait.hash&quot;&gt; &lt;code&gt;Hash&lt;/code&gt; &lt;/a&gt;を派生させることです。&lt;a href=&quot;../../cmp/trait.partialeq&quot;&gt; &lt;code&gt;PartialEq&lt;/code&gt; &lt;/a&gt;も導出する必要があります。これは、将来&lt;a href=&quot;../../cmp/trait.eq&quot;&gt; &lt;code&gt;Eq&lt;/code&gt; &lt;/a&gt;によって暗示される予定です。</target>
        </trans-unit>
        <trans-unit id="bcd32a61d8029373ce3811b4c81b01b04e2fcd8a" translate="yes" xml:space="preserve">
          <source>The easiest way to use &lt;code&gt;HashSet&lt;/code&gt; with a custom type is to derive &lt;a href=&quot;../cmp/trait.eq&quot;&gt;&lt;code&gt;Eq&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../hash/trait.hash&quot;&gt;&lt;code&gt;Hash&lt;/code&gt;&lt;/a&gt;. We must also derive &lt;a href=&quot;../cmp/trait.partialeq&quot;&gt;&lt;code&gt;PartialEq&lt;/code&gt;&lt;/a&gt;, this will in the future be implied by &lt;a href=&quot;../cmp/trait.eq&quot;&gt;&lt;code&gt;Eq&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">カスタムタイプで &lt;code&gt;HashSet&lt;/code&gt; を使用する最も簡単な方法は、&lt;a href=&quot;../cmp/trait.eq&quot;&gt; &lt;code&gt;Eq&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;../hash/trait.hash&quot;&gt; &lt;code&gt;Hash&lt;/code&gt; &lt;/a&gt;を派生させることです。&lt;a href=&quot;../cmp/trait.partialeq&quot;&gt; &lt;code&gt;PartialEq&lt;/code&gt; &lt;/a&gt;も導出する必要があります。これは、将来&lt;a href=&quot;../cmp/trait.eq&quot;&gt; &lt;code&gt;Eq&lt;/code&gt; &lt;/a&gt;によって暗示される予定です。</target>
        </trans-unit>
        <trans-unit id="4abca09eae529f079207e693c4204e4240160458" translate="yes" xml:space="preserve">
          <source>The element range is removed even if the iterator is not consumed until the end.</source>
          <target state="translated">最後までイテレータが消費されない場合でも、要素範囲は削除されます。</target>
        </trans-unit>
        <trans-unit id="857f1367d5858bf310bc19ad475cfec76822e623" translate="yes" xml:space="preserve">
          <source>The element that was removed is returned, and the cursor is moved to point to the next element in the &lt;code&gt;LinkedList&lt;/code&gt;.</source>
          <target state="translated">削除された要素が返され、カーソルが &lt;code&gt;LinkedList&lt;/code&gt; 内の次の要素を指すように移動されます。</target>
        </trans-unit>
        <trans-unit id="17d488f8279ef9d0e051cac2f43dff0a68f18b2b" translate="yes" xml:space="preserve">
          <source>The elements are removed in arbitrary order.</source>
          <target state="translated">要素は任意の順番で削除されます。</target>
        </trans-unit>
        <trans-unit id="5fe5f813b6a2f233abc73bad03a94ec158695239" translate="yes" xml:space="preserve">
          <source>The elements at &lt;code&gt;old_len..new_len&lt;/code&gt; must be initialized.</source>
          <target state="translated">&lt;code&gt;old_len..new_len&lt;/code&gt; の要素を初期化する必要があります。</target>
        </trans-unit>
        <trans-unit id="2bafc31dee9d33ba4d10ed67ef0f71ab38bfff69" translate="yes" xml:space="preserve">
          <source>The elements of an &lt;a href=&quot;types/array&quot;&gt;array&lt;/a&gt; or owned &lt;a href=&quot;types/array&quot;&gt;slice&lt;/a&gt; are dropped from the first element to the last. *</source>
          <target state="translated">&lt;a href=&quot;types/array&quot;&gt;配列&lt;/a&gt;または所有されている&lt;a href=&quot;types/array&quot;&gt;スライス&lt;/a&gt;の要素は、最初の要素から最後の要素にドロップされます。*</target>
        </trans-unit>
        <trans-unit id="1e3e69cc26857f9c1293b40c529b047e54164338" translate="yes" xml:space="preserve">
          <source>The elements of an &lt;a href=&quot;types/array&quot;&gt;array&lt;/a&gt; or owned &lt;a href=&quot;types/slice&quot;&gt;slice&lt;/a&gt; are dropped from the first element to the last.</source>
          <target state="translated">&lt;a href=&quot;types/array&quot;&gt;配列&lt;/a&gt;または所有&lt;a href=&quot;types/slice&quot;&gt;スライス&lt;/a&gt;の要素は、最初の要素から最後の要素にドロップされます。</target>
        </trans-unit>
        <trans-unit id="2aa9bb19de05cfdf90da669db74c8f4ff87b16d5" translate="yes" xml:space="preserve">
          <source>The elements yielded by &lt;code&gt;DoubleEndedIterator&lt;/code&gt;'s methods may differ from the ones yielded by &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;'s methods:</source>
          <target state="translated">得られた要素 &lt;code&gt;DoubleEndedIterator&lt;/code&gt; の方法は、により得られたものと異なる場合があり&lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt;のメソッド'：</target>
        </trans-unit>
        <trans-unit id="88efd616f1a1b2e8d8f2dcc3a848a8c623471404" translate="yes" xml:space="preserve">
          <source>The elision rules don&amp;rsquo;t provide full inference. If Rust deterministically applies the rules but there is still ambiguity as to what lifetimes the references have, the compiler won&amp;rsquo;t guess what the lifetime of the remaining references should be. In this case, instead of guessing, the compiler will give you an error that you can resolve by adding the lifetime annotations that specify how the references relate to each other.</source>
          <target state="translated">省略ルールは完全な推論を提供しません。Rustがルールを確定的に適用しても、参照のライフタイムについてあいまいさが残っている場合、コンパイラーは残りの参照のライフタイムを推測しません。この場合、推測する代わりに、コンパイラーは、参照が相互にどのように関連するかを指定する存続期間アノテーションを追加することで解決できるエラーを提供します。</target>
        </trans-unit>
        <trans-unit id="3e3b658969dac70797ae99e22406a5919df5b0c6" translate="yes" xml:space="preserve">
          <source>The entire expression uses the given values for the fields that were specified and moves or copies the remaining fields from the base expression. As with all struct expressions, all of the fields of the struct must be &lt;a href=&quot;../visibility-and-privacy&quot;&gt;visible&lt;/a&gt;, even those not explicitly named.</source>
          <target state="translated">式全体では、指定されたフィールドに指定された値を使用し、残りのフィールドを基本式から移動またはコピーします。すべての構造体式と同様に、明示的に名前が付けられていないフィールドであっても、構造体のすべてのフィールドが&lt;a href=&quot;../visibility-and-privacy&quot;&gt;可視&lt;/a&gt;でなければなりません。</target>
        </trans-unit>
        <trans-unit id="a0574dfce03935016b1e7370699d140878e68385" translate="yes" xml:space="preserve">
          <source>The entire file name if the file name begins with &lt;code&gt;.&lt;/code&gt; and has no other &lt;code&gt;.&lt;/code&gt;s within;</source>
          <target state="translated">ファイル名がで始まる場合は、ファイル名全体 &lt;code&gt;.&lt;/code&gt; 他にありません &lt;code&gt;.&lt;/code&gt; s内;</target>
        </trans-unit>
        <trans-unit id="e83cf0228defdcd6e7afea0984d3278d36eab74c" translate="yes" xml:space="preserve">
          <source>The entire file name if there is no embedded &lt;code&gt;.&lt;/code&gt;;</source>
          <target state="translated">埋め込まれていない場合はファイル名全体 &lt;code&gt;.&lt;/code&gt; ;</target>
        </trans-unit>
        <trans-unit id="3fa274546f438640798ab62aae39ac18398db5cc" translate="yes" xml:space="preserve">
          <source>The entire function</source>
          <target state="translated">全体の機能</target>
        </trans-unit>
        <trans-unit id="8a5d709e7f69a77cb8061cae38e47a941e97332f" translate="yes" xml:space="preserve">
          <source>The entire function body.</source>
          <target state="translated">機能体全体のこと。</target>
        </trans-unit>
        <trans-unit id="5c15c39c685d0906fec325e3d5c2bea1c6eb708a" translate="yes" xml:space="preserve">
          <source>The entire function scope is the outer most scope.</source>
          <target state="translated">関数スコープ全体が最も外側のスコープになります。</target>
        </trans-unit>
        <trans-unit id="9b8eedec31f30287b3b74ad1f2675a525e2c3cf5" translate="yes" xml:space="preserve">
          <source>The entire hash map is generic over a key type &lt;code&gt;K&lt;/code&gt;. Because these keys are stored with the hash map, this type has to own the key&amp;rsquo;s data. When inserting a key-value pair, the map is given such a &lt;code&gt;K&lt;/code&gt; and needs to find the correct hash bucket and check if the key is already present based on that &lt;code&gt;K&lt;/code&gt;. It therefore requires &lt;code&gt;K: Hash + Eq&lt;/code&gt;.</source>
          <target state="translated">ハッシュマップ全体は、キータイプ &lt;code&gt;K&lt;/code&gt; について総称です。これらのキーはハッシュマップと共に格納されるため、このタイプはキーのデータを所有する必要があります。キーと値のペアを挿入すると、マップにはそのような &lt;code&gt;K&lt;/code&gt; が与えられ、正しいハッシュバケットを見つけて、その &lt;code&gt;K&lt;/code&gt; に基づいてキーがすでに存在するかどうかを確認する必要があります。したがって、 &lt;code&gt;K: Hash + Eq&lt;/code&gt; が必要です。</target>
        </trans-unit>
        <trans-unit id="0297c1c788a21e67f6b7fde15406ec3888485937" translate="yes" xml:space="preserve">
          <source>The entire memory range of this slice must be contained within a single allocated object! Slices can never span across multiple allocated objects.</source>
          <target state="translated">このスライスのメモリ範囲全体が単一の割り当てられたオブジェクトに含まれていなければなりません。スライスが複数の割り当てられたオブジェクトにまたがることはありません。</target>
        </trans-unit>
        <trans-unit id="d250d768cfabd095635656557072ab76a1e3cbad" translate="yes" xml:space="preserve">
          <source>The entire memory range of this slice must be contained within a single allocated object! Slices can never span across multiple allocated objects. See &lt;a href=&quot;#incorrect-usage&quot;&gt;below&lt;/a&gt; for an example incorrectly not taking this into account.</source>
          <target state="translated">このスライスのメモリ範囲全体は、割り当てられた単一のオブジェクト内に含まれている必要があります。スライスは、割り当てられた複数のオブジェクトにまたがることはできません。これを誤って考慮していない例については、&lt;a href=&quot;#incorrect-usage&quot;&gt;以下&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="97dea0260f138033ef7cf2f5ca57a634d6eea616" translate="yes" xml:space="preserve">
          <source>The entry point of the program was marked as &lt;code&gt;async&lt;/code&gt;.</source>
          <target state="translated">プログラムのエントリポイントは &lt;code&gt;async&lt;/code&gt; としてマークされました。</target>
        </trans-unit>
        <trans-unit id="82f98df6718e5a9d6fd411d1cc853597af7467ed" translate="yes" xml:space="preserve">
          <source>The error and the note tell the story: Rust strings don&amp;rsquo;t support indexing. But why not? To answer that question, we need to discuss how Rust stores strings in memory.</source>
          <target state="translated">エラーとメモが物語を物語っています：Rust文字列はインデックス作成をサポートしていません。しかし、なぜですか？その質問に答えるために、Rustが文字列をメモリに格納する方法について説明する必要があります。</target>
        </trans-unit>
        <trans-unit id="41a72aa86a9d9e55bed7f9841f1b9fdc25696e6c" translate="yes" xml:space="preserve">
          <source>The error happens on numeric literals and on numeric bindings without an identified concrete type:</source>
          <target state="translated">このエラーは、数値リテラルと、識別された具象型のない数値バインディングで発生します。</target>
        </trans-unit>
        <trans-unit id="1decc58ff466451824639b9b2033b046dfa94fee" translate="yes" xml:space="preserve">
          <source>The error happens on numeric literals:</source>
          <target state="translated">このエラーは数値リテラルで発生します。</target>
        </trans-unit>
        <trans-unit id="39121a17de405ba30c8238c549d55b70becaf449" translate="yes" xml:space="preserve">
          <source>The error indicates that Rust expected a &lt;code&gt;bool&lt;/code&gt; but got an integer. Unlike languages such as Ruby and JavaScript, Rust will not automatically try to convert non-Boolean types to a Boolean. You must be explicit and always provide &lt;code&gt;if&lt;/code&gt; with a Boolean as its condition. If we want the &lt;code&gt;if&lt;/code&gt; code block to run only when a number is not equal to &lt;code&gt;0&lt;/code&gt;, for example, we can change the &lt;code&gt;if&lt;/code&gt; expression to the following:</source>
          <target state="translated">このエラーは、Rustが &lt;code&gt;bool&lt;/code&gt; 期待していたが整数を取得したことを示しています。RubyやJavaScriptなどの言語とは異なり、Rustは非ブール型をブール型に自動的に変換しようとしません。明示的である必要があり、条件としてブール値を使用する &lt;code&gt;if&lt;/code&gt; は常に提供する必要があります。たとえば、数値が &lt;code&gt;0&lt;/code&gt; でない場合にのみ &lt;code&gt;if&lt;/code&gt; コードブロックを実行する場合は、 &lt;code&gt;if&lt;/code&gt; 式を次のように変更できます。</target>
        </trans-unit>
        <trans-unit id="82fe814b563c83c1ad42c2a44464d60e45abeb59" translate="yes" xml:space="preserve">
          <source>The error message indicates that the cause of the error is that you &lt;code&gt;cannot assign twice to immutable variable x&lt;/code&gt;, because you tried to assign a second value to the immutable &lt;code&gt;x&lt;/code&gt; variable.</source>
          <target state="translated">エラーメッセージは、エラーの原因は、あなたがいることであることを示し &lt;code&gt;cannot assign twice to immutable variable x&lt;/code&gt; あなたは不変に第2の値を割り当てようとしましたので、 &lt;code&gt;x&lt;/code&gt; 変数。</target>
        </trans-unit>
        <trans-unit id="1acd99d552c691a91137d21fedf0cc394ac8a4d0" translate="yes" xml:space="preserve">
          <source>The error message states that the &lt;code&gt;counter&lt;/code&gt; value is moved into the closure and then captured when we call &lt;code&gt;lock&lt;/code&gt;. That description sounds like what we wanted, but it&amp;rsquo;s not allowed!</source>
          <target state="translated">エラーメッセージは、 &lt;code&gt;counter&lt;/code&gt; 値がクロージャーに移動され、 &lt;code&gt;lock&lt;/code&gt; を呼び出すときにキャプチャされることを示しています。その説明は私たちが望んでいたように聞こえますが、許可されていません！</target>
        </trans-unit>
        <trans-unit id="5bb7a0ad71457e0f1d6ce226ce7b55ec5697ceba" translate="yes" xml:space="preserve">
          <source>The error message states that the &lt;code&gt;counter&lt;/code&gt; value was moved in the previous iteration of the loop. So Rust is telling us that we can&amp;rsquo;t move the ownership of lock &lt;code&gt;counter&lt;/code&gt; into multiple threads. Let&amp;rsquo;s fix the compiler error with a multiple-ownership method we discussed in Chapter 15.</source>
          <target state="translated">エラーメッセージは、 &lt;code&gt;counter&lt;/code&gt; 値がループの前の反復で移動されたことを示しています。したがって、Rustは、ロック &lt;code&gt;counter&lt;/code&gt; の所有権を複数のスレッドに移動することはできないと言っています。第15章で説明した複数所有権メソッドを使用してコンパイラエラーを修正しましょう。</target>
        </trans-unit>
        <trans-unit id="6326b5d7f5ddab487c6090e5e84a18d25a0a3db6" translate="yes" xml:space="preserve">
          <source>The error messages say that module &lt;code&gt;hosting&lt;/code&gt; is private. In other words, we have the correct paths for the &lt;code&gt;hosting&lt;/code&gt; module and the &lt;code&gt;add_to_waitlist&lt;/code&gt; function, but Rust won&amp;rsquo;t let us use them because it doesn&amp;rsquo;t have access to the private sections.</source>
          <target state="translated">エラーメッセージは、モジュール &lt;code&gt;hosting&lt;/code&gt; がプライベートであることを示しています。つまり、 &lt;code&gt;hosting&lt;/code&gt; モジュールと &lt;code&gt;add_to_waitlist&lt;/code&gt; 関数の正しいパスがありますが、Rustはプライベートセクションにアクセスできないため、それらを使用できません。</target>
        </trans-unit>
        <trans-unit id="8eb6e3e38ad85be87f507639136fdec21b108288" translate="yes" xml:space="preserve">
          <source>The error occurs because &lt;code&gt;foo&lt;/code&gt; accepts a closure that takes an &lt;code&gt;i32&lt;/code&gt; argument, but in &lt;code&gt;main&lt;/code&gt;, it is passed a closure with a &lt;code&gt;&amp;amp;str&lt;/code&gt; argument.</source>
          <target state="translated">このエラーは、 &lt;code&gt;foo&lt;/code&gt; が &lt;code&gt;i32&lt;/code&gt; 引数を取るクロージャを受け入れるために発生しますが、 &lt;code&gt;main&lt;/code&gt; では、 &lt;code&gt;&amp;amp;str&lt;/code&gt; 引数を持つクロージャが渡されます。</target>
        </trans-unit>
        <trans-unit id="4df536d23e48c26eec2d844083fbc5169ab15de6" translate="yes" xml:space="preserve">
          <source>The error occurs because keyword &lt;code&gt;yield&lt;/code&gt; can only be used inside the generator literal. This can be fixed by constructing the generator correctly.</source>
          <target state="translated">キーワード &lt;code&gt;yield&lt;/code&gt; はジェネレータリテラル内でのみ使用できるため、エラーが発生します。これは、ジェネレーターを正しく構築することで修正できます。</target>
        </trans-unit>
        <trans-unit id="5bce45a967fbcca42003bd3fc6c351711632526a" translate="yes" xml:space="preserve">
          <source>The error references the &lt;code&gt;Sized&lt;/code&gt; trait again! Rust doesn&amp;rsquo;t know how much space it will need to store the closure. We saw a solution to this problem earlier. We can use a trait object:</source>
          <target state="translated">エラーは再び &lt;code&gt;Sized&lt;/code&gt; トレイトを参照しています！Rustは、クロージャーを保管するために必要なスペースを知りません。この問題の解決策は先に見ました。トレイトオブジェクトを使用できます。</target>
        </trans-unit>
        <trans-unit id="687172b839a6f9ace430c7922b4119fecbbc273c" translate="yes" xml:space="preserve">
          <source>The error says we&amp;rsquo;re not allowed to mutate a variable&amp;rsquo;s type:</source>
          <target state="translated">エラーは、変数の型を変更することが許可されていないことを示しています。</target>
        </trans-unit>
        <trans-unit id="4c799801c95c3499262c7f795808c56dd04d3f03" translate="yes" xml:space="preserve">
          <source>The error shows that for &lt;code&gt;result&lt;/code&gt; to be valid for the &lt;code&gt;println!&lt;/code&gt; statement, &lt;code&gt;string2&lt;/code&gt; would need to be valid until the end of the outer scope. Rust knows this because we annotated the lifetimes of the function parameters and return values using the same lifetime parameter &lt;code&gt;'a&lt;/code&gt;.</source>
          <target state="translated">エラーは、 &lt;code&gt;result&lt;/code&gt; が &lt;code&gt;println!&lt;/code&gt; に対して有効であることを示しています！ステートメント、 &lt;code&gt;string2&lt;/code&gt; は、外部スコープの終わりまで有効である必要があります。関数のパラメーターのライフタイムに注釈を付け、同じライフタイムパラメーター &lt;code&gt;'a&lt;/code&gt; を使用して値を返すため、Rustはこれを知っています。</target>
        </trans-unit>
        <trans-unit id="81dd6345e63f7b9b970ec324dc927c2a78ce87e8" translate="yes" xml:space="preserve">
          <source>The error shows that you can&amp;rsquo;t use the keyword &lt;code&gt;match&lt;/code&gt; as the function identifier. To use &lt;code&gt;match&lt;/code&gt; as a function name, you need to use the raw identifier syntax, like this:</source>
          <target state="translated">エラーは、関数 &lt;code&gt;match&lt;/code&gt; としてキーワードマッチを使用できないことを示しています。使用に &lt;code&gt;match&lt;/code&gt; 関数名として、あなたはこのように、生の識別子の構文を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="17031b6288809d4b66c77a71348fe05200b2e1e5" translate="yes" xml:space="preserve">
          <source>The error shows this type &amp;ldquo;has infinite size.&amp;rdquo; The reason is that we&amp;rsquo;ve defined &lt;code&gt;List&lt;/code&gt; with a variant that is recursive: it holds another value of itself directly. As a result, Rust can&amp;rsquo;t figure out how much space it needs to store a &lt;code&gt;List&lt;/code&gt; value. Let&amp;rsquo;s break down why we get this error a bit. First, let&amp;rsquo;s look at how Rust decides how much space it needs to store a value of a non-recursive type.</source>
          <target state="translated">エラーは、このタイプが「無限のサイズを持っている」ことを示しています。その理由は、再帰的なバリアントを使用して &lt;code&gt;List&lt;/code&gt; を定義したためです。それは、それ自体の別の値を直接保持します。その結果、Rustは &lt;code&gt;List&lt;/code&gt; 値を格納するために必要なスペースを把握できません。このエラーが少し発生する理由を分析してみましょう。最初に、Rustが非再帰型の値を格納するために必要なスペースをどのように決定するかを見てみましょう。</target>
        </trans-unit>
        <trans-unit id="ddd69ec9cc85fcc63997c43bed364cf16ee6b3f9" translate="yes" xml:space="preserve">
          <source>The error tells us we can&amp;rsquo;t call &lt;code&gt;join&lt;/code&gt; because we only have a mutable borrow of each &lt;code&gt;worker&lt;/code&gt; and &lt;code&gt;join&lt;/code&gt; takes ownership of its argument. To solve this issue, we need to move the thread out of the &lt;code&gt;Worker&lt;/code&gt; instance that owns &lt;code&gt;thread&lt;/code&gt; so &lt;code&gt;join&lt;/code&gt; can consume the thread. We did this in Listing 17-15: if &lt;code&gt;Worker&lt;/code&gt; holds an &lt;code&gt;Option&amp;lt;thread::JoinHandle&amp;lt;()&amp;gt;&amp;gt;&lt;/code&gt; instead, we can call the &lt;code&gt;take&lt;/code&gt; method on the &lt;code&gt;Option&lt;/code&gt; to move the value out of the &lt;code&gt;Some&lt;/code&gt; variant and leave a &lt;code&gt;None&lt;/code&gt; variant in its place. In other words, a &lt;code&gt;Worker&lt;/code&gt; that is running will have a &lt;code&gt;Some&lt;/code&gt; variant in &lt;code&gt;thread&lt;/code&gt;, and when we want to clean up a &lt;code&gt;Worker&lt;/code&gt;, we&amp;rsquo;ll replace &lt;code&gt;Some&lt;/code&gt; with &lt;code&gt;None&lt;/code&gt; so the &lt;code&gt;Worker&lt;/code&gt; doesn&amp;rsquo;t have a thread to run.</source>
          <target state="translated">エラーは、各 &lt;code&gt;worker&lt;/code&gt; 変更可能な借用のみがあり、 &lt;code&gt;join&lt;/code&gt; がその引数の所有権を取得 &lt;code&gt;join&lt;/code&gt; ため、joinを呼び出すことができないことを示しています。この問題を解決するために、我々は外にスレッドを移動する必要がある &lt;code&gt;Worker&lt;/code&gt; 所有しているインスタンス &lt;code&gt;thread&lt;/code&gt; そう &lt;code&gt;join&lt;/code&gt; スレッドを消費することができます。私たちは、リスト17-15でこれをやった次の場合 &lt;code&gt;Worker&lt;/code&gt; 保持している &lt;code&gt;Option&amp;lt;thread::JoinHandle&amp;lt;()&amp;gt;&amp;gt;&lt;/code&gt; 代わりに、我々は呼び出すことができ &lt;code&gt;take&lt;/code&gt; のメソッド &lt;code&gt;Option&lt;/code&gt; の値を移動するには &lt;code&gt;Some&lt;/code&gt; 変種と残し &lt;code&gt;None&lt;/code&gt; でバリアントをその場所。つまり、 &lt;code&gt;Worker&lt;/code&gt; その実行 &lt;code&gt;Some&lt;/code&gt; は &lt;code&gt;thread&lt;/code&gt; にSomeバリアントがあり、 &lt;code&gt;Worker&lt;/code&gt; をクリーンアップする場合は、 &lt;code&gt;Some&lt;/code&gt; を &lt;code&gt;None&lt;/code&gt; に置き換えて、 &lt;code&gt;Worker&lt;/code&gt; が実行するスレッドがないようにします。</target>
        </trans-unit>
        <trans-unit id="58b8d8f068cf467e7f55c896bbdf137f3a755bf5" translate="yes" xml:space="preserve">
          <source>The error type for &lt;code&gt;try_reserve&lt;/code&gt; methods.</source>
          <target state="translated">&lt;code&gt;try_reserve&lt;/code&gt; メソッドのエラータイプ。</target>
        </trans-unit>
        <trans-unit id="458fb320b83d2d5563146d6c64a5e9086c1cdbe5" translate="yes" xml:space="preserve">
          <source>The error type for I/O operations of the &lt;a href=&quot;trait.read&quot;&gt;&lt;code&gt;Read&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;trait.write&quot;&gt;&lt;code&gt;Write&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;trait.seek&quot;&gt;&lt;code&gt;Seek&lt;/code&gt;&lt;/a&gt;, and associated traits.</source>
          <target state="translated">&lt;a href=&quot;trait.read&quot;&gt; &lt;code&gt;Read&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;trait.write&quot;&gt; &lt;code&gt;Write&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;trait.seek&quot;&gt; &lt;code&gt;Seek&lt;/code&gt; &lt;/a&gt;、および関連するトレイトのI / O操作のエラータイプ。</target>
        </trans-unit>
        <trans-unit id="3e8c3a7432541c640c48492379ea610ecb40f6ae" translate="yes" xml:space="preserve">
          <source>The error type for errors that can never happen.</source>
          <target state="translated">絶対に起こらないエラーのエラータイプです。</target>
        </trans-unit>
        <trans-unit id="fdb319ec59d1f1964ec642ac851b7301cdf60e57" translate="yes" xml:space="preserve">
          <source>The error type for operations interacting with environment variables. Possibly returned from &lt;a href=&quot;fn.var&quot;&gt;&lt;code&gt;env::var()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">環境変数と相互作用する操作のエラータイプ。&lt;a href=&quot;fn.var&quot;&gt; &lt;code&gt;env::var()&lt;/code&gt; &lt;/a&gt;から返される可能性があります。</target>
        </trans-unit>
        <trans-unit id="751842d7baf0779231030e01a15db69a4f03c6bc" translate="yes" xml:space="preserve">
          <source>The error type for operations interacting with environment variables. Possibly returned from the &lt;a href=&quot;fn.var&quot;&gt;&lt;code&gt;env::var&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">環境変数と相互作用する操作のエラータイプ。&lt;a href=&quot;fn.var&quot;&gt; &lt;code&gt;env::var&lt;/code&gt; &lt;/a&gt;関数から返された可能性があります。</target>
        </trans-unit>
        <trans-unit id="11ea1ae6c021101c095eab4ba4b755be8b16c063" translate="yes" xml:space="preserve">
          <source>The error type for operations on the &lt;code&gt;PATH&lt;/code&gt; variable. Possibly returned from &lt;a href=&quot;fn.join_paths&quot;&gt;&lt;code&gt;env::join_paths()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;PATH&lt;/code&gt; 変数に対する操作のエラータイプ。&lt;a href=&quot;fn.join_paths&quot;&gt; &lt;code&gt;env::join_paths()&lt;/code&gt; &lt;/a&gt;から返される可能性があります。</target>
        </trans-unit>
        <trans-unit id="04e8342895bd312f045a40780238aabb9ef5de36" translate="yes" xml:space="preserve">
          <source>The error type for operations on the &lt;code&gt;PATH&lt;/code&gt; variable. Possibly returned from the &lt;a href=&quot;fn.join_paths&quot;&gt;&lt;code&gt;env::join_paths&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">&lt;code&gt;PATH&lt;/code&gt; 変数に対する操作のエラータイプ。&lt;a href=&quot;fn.join_paths&quot;&gt; &lt;code&gt;env::join_paths&lt;/code&gt; &lt;/a&gt;関数から返された可能性があります。</target>
        </trans-unit>
        <trans-unit id="92c7e92ce900890826a3bdc04f0bdb6f93a2ae4e" translate="yes" xml:space="preserve">
          <source>The error type returned when a checked integral type conversion fails.</source>
          <target state="translated">チェック済みの積分型変換に失敗した場合に返されるエラー型です。</target>
        </trans-unit>
        <trans-unit id="7c03030b0922657a2b23ad871594bf872bfa86e8" translate="yes" xml:space="preserve">
          <source>The error type returned when a conversion from a slice to an array fails.</source>
          <target state="translated">スライスから配列への変換に失敗した場合に返されるエラータイプです。</target>
        </trans-unit>
        <trans-unit id="5bd755e234651b9d8db0dad82d899820eb73c1c6" translate="yes" xml:space="preserve">
          <source>The error type returned when a conversion from u32 to char fails.</source>
          <target state="translated">u32からcharへの変換に失敗した場合に返されるエラータイプです。</target>
        </trans-unit>
        <trans-unit id="74bd671788812266d70e1e6379cd71d68b83bdd8" translate="yes" xml:space="preserve">
          <source>The error type that results from applying the try operator (&lt;code&gt;?&lt;/code&gt;) to a &lt;code&gt;None&lt;/code&gt; value. If you wish to allow &lt;code&gt;x?&lt;/code&gt; (where &lt;code&gt;x&lt;/code&gt; is an &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt;) to be converted into your error type, you can implement &lt;code&gt;impl From&amp;lt;NoneError&amp;gt;&lt;/code&gt; for &lt;code&gt;YourErrorType&lt;/code&gt;. In that case, &lt;code&gt;x?&lt;/code&gt; within a function that returns &lt;code&gt;Result&amp;lt;_, YourErrorType&amp;gt;&lt;/code&gt; will translate a &lt;code&gt;None&lt;/code&gt; value into an &lt;code&gt;Err&lt;/code&gt; result.</source>
          <target state="translated">&lt;code&gt;None&lt;/code&gt; 値にtry演算子（ &lt;code&gt;?&lt;/code&gt; ）を適用した結果のエラータイプ。 &lt;code&gt;x?&lt;/code&gt; を許可したい場合？（ &lt;code&gt;x&lt;/code&gt; は &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; ）エラータイプに変換するには、 &lt;code&gt;impl From&amp;lt;NoneError&amp;gt;&lt;/code&gt; を &lt;code&gt;YourErrorType&lt;/code&gt; ます。その場合、 &lt;code&gt;x?&lt;/code&gt; &lt;code&gt;Result&amp;lt;_, YourErrorType&amp;gt;&lt;/code&gt; を返す関数内で、YourErrorType&amp;gt;は &lt;code&gt;None&lt;/code&gt; 値を &lt;code&gt;Err&lt;/code&gt; 結果に変換します。</target>
        </trans-unit>
        <trans-unit id="620e9e66f647e7af133c1492023ad78f941762d1" translate="yes" xml:space="preserve">
          <source>The error type which is returned from formatting a message into a stream.</source>
          <target state="translated">メッセージをストリームにフォーマットした際に返されるエラータイプ。</target>
        </trans-unit>
        <trans-unit id="de3d4a50ecffe879839aa645e297acf63f3f41e3" translate="yes" xml:space="preserve">
          <source>The error type which is returned from parsing the type a control message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4672a685f085da2d7d7f62486ff4649fbce70a5" translate="yes" xml:space="preserve">
          <source>The errors in Listing 7-6 say that the &lt;code&gt;add_to_waitlist&lt;/code&gt; function is private. The privacy rules apply to structs, enums, functions, and methods as well as modules.</source>
          <target state="translated">リスト7-6のエラーは、 &lt;code&gt;add_to_waitlist&lt;/code&gt; 関数がプライベートであることを示しています。プライバシールールは、構造体、列挙型、関数、メソッド、およびモジュールに適用されます。</target>
        </trans-unit>
        <trans-unit id="5c9b02894ffaf56c3eee190bd9f4d3e5a18ff962" translate="yes" xml:space="preserve">
          <source>The exact behavior on locking a mutex in the thread which already holds the lock is left unspecified. However, this function will not return on the second call (it might panic or deadlock, for example).</source>
          <target state="translated">既にロックを保持しているスレッドでミューテックスをロックする際の正確な動作は未定義のままです。しかし、この関数は2回目の呼び出しでは戻りません(例えば、パニックやデッドロックになるかもしれません)。</target>
        </trans-unit>
        <trans-unit id="ec573024d9a369fea8772d4967a09d1e972fae0a" translate="yes" xml:space="preserve">
          <source>The exact character(s)</source>
          <target state="translated">正確な文字</target>
        </trans-unit>
        <trans-unit id="df2f57248767dbedd045941faa73ddbe53944b27" translate="yes" xml:space="preserve">
          <source>The exact order may be useful for tracking external state, like an index.</source>
          <target state="translated">正確な順序は、インデックスのような外部の状態を追跡するのに便利かもしれません。</target>
        </trans-unit>
        <trans-unit id="8fe495e6414bd43e7bea5f0003cca50741a5b59b" translate="yes" xml:space="preserve">
          <source>The exact output printed by this macro should not be relied upon and is subject to future changes.</source>
          <target state="translated">このマクロによって出力される正確な出力は、信頼できるものではなく、将来的に変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="469498f0144088c9a82cccca15de67704811a8dd" translate="yes" xml:space="preserve">
          <source>The exact text, of course, depends on what files you have in &lt;code&gt;.&lt;/code&gt;.</source>
          <target state="translated">もちろん、正確なテキストは、にあるファイルによって異なります &lt;code&gt;.&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="395c851d3758c4daf594b9f6b458c5ca4cd7434f" translate="yes" xml:space="preserve">
          <source>The example in Listing 13-14 separates the creation of the iterator from the use of the iterator in the &lt;code&gt;for&lt;/code&gt; loop. The iterator is stored in the &lt;code&gt;v1_iter&lt;/code&gt; variable, and no iteration takes place at that time. When the &lt;code&gt;for&lt;/code&gt; loop is called using the iterator in &lt;code&gt;v1_iter&lt;/code&gt;, each element in the iterator is used in one iteration of the loop, which prints out each value.</source>
          <target state="translated">コードリスト13-14の例では、イテレータの作成と &lt;code&gt;for&lt;/code&gt; ループでのイテレータの使用を分けています。イテレーターは &lt;code&gt;v1_iter&lt;/code&gt; 変数に保管され、その時点では反復は行われません。 &lt;code&gt;v1_iter&lt;/code&gt; の反復子を使用して &lt;code&gt;for&lt;/code&gt; ループが呼び出されると、反復子の各要素がループの1回の反復で使用され、各値が出力されます。</target>
        </trans-unit>
        <trans-unit id="e88d69a7ee7e1056409be12e179c7703287290b1" translate="yes" xml:space="preserve">
          <source>The exception to this idiom is if we&amp;rsquo;re bringing two items with the same name into scope with &lt;code&gt;use&lt;/code&gt; statements, because Rust doesn&amp;rsquo;t allow that. Listing 7-15 shows how to bring two &lt;code&gt;Result&lt;/code&gt; types into scope that have the same name but different parent modules and how to refer to them.</source>
          <target state="translated">このイディオムの例外は、Rustでは許可されていないため、 &lt;code&gt;use&lt;/code&gt; ステートメントを使用して同じ名前の2つのアイテムをスコープに入れる場合です。リスト7-15は、名前が同じで親モジュールが異なる2つの &lt;code&gt;Result&lt;/code&gt; 型をスコープに取り込む方法と、それらを参照する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="f9ff06ceaf161b4f26d0944c142b9739231935eb" translate="yes" xml:space="preserve">
          <source>The exception to this is the unit tuple (&lt;code&gt;()&lt;/code&gt;) which is guaranteed as a zero-sized type to have a size of 0 and an alignment of 1.</source>
          <target state="translated">これの例外は、サイズが0で型が1であることがゼロサイズタイプとして保証されているユニットタプル（ &lt;code&gt;()&lt;/code&gt; ）です。</target>
        </trans-unit>
        <trans-unit id="3dc57cf649d183700b8e68c720c692cad27e1162" translate="yes" xml:space="preserve">
          <source>The expanded expression has type &lt;code&gt;&amp;amp;'static str&lt;/code&gt;, and the returned file is not the invocation of the &lt;code&gt;file!&lt;/code&gt; macro itself, but rather the first macro invocation leading up to the invocation of the &lt;code&gt;file!&lt;/code&gt; macro.</source>
          <target state="translated">展開された式のタイプは &lt;code&gt;&amp;amp;'static str&lt;/code&gt; であり、返されたファイルはファイルの呼び出しではありません &lt;code&gt;file!&lt;/code&gt; マクロ自体ですが、 &lt;code&gt;file!&lt;/code&gt; 呼び出しにつながる最初のマクロ呼び出しです！大きい。</target>
        </trans-unit>
        <trans-unit id="2027bedff965dc7817b0dd952d1fc211920c5f6d" translate="yes" xml:space="preserve">
          <source>The expanded expression has type &lt;code&gt;u32&lt;/code&gt; and is 1-based, so the first column in each line evaluates to 1, the second to 2, etc. This is consistent with error messages by common compilers or popular editors. The returned column is &lt;em&gt;not necessarily&lt;/em&gt; the line of the &lt;code&gt;column!&lt;/code&gt; invocation itself, but rather the first macro invocation leading up to the invocation of the &lt;code&gt;column!&lt;/code&gt; macro.</source>
          <target state="translated">拡張式のタイプは &lt;code&gt;u32&lt;/code&gt; で、1から始まるため、各行の最初の列は1、2番目は2などと評価されます。これは、一般的なコンパイラまたは一般的なエディタによるエラーメッセージと一致します。返される列は&lt;em&gt;、必ずしも&lt;/em&gt;列の行で&lt;em&gt;ある&lt;/em&gt;とは&lt;em&gt;限りません&lt;/em&gt; &lt;code&gt;column!&lt;/code&gt; 呼び出し自体ですが、 &lt;code&gt;column!&lt;/code&gt; 呼び出しに至るまでの最初のマクロ呼び出しです！大きい。</target>
        </trans-unit>
        <trans-unit id="b0b06f58ec99c372d86a17a34c7166fa5de08c27" translate="yes" xml:space="preserve">
          <source>The expanded expression has type &lt;code&gt;u32&lt;/code&gt; and is 1-based, so the first line in each file evaluates to 1, the second to 2, etc. This is consistent with error messages by common compilers or popular editors. The returned line is &lt;em&gt;not necessarily&lt;/em&gt; the line of the &lt;code&gt;line!&lt;/code&gt; invocation itself, but rather the first macro invocation leading up to the invocation of the &lt;code&gt;line!&lt;/code&gt; macro.</source>
          <target state="translated">拡張式のタイプは &lt;code&gt;u32&lt;/code&gt; で、1から始まるため、各ファイルの最初の行は1、2番目は2などと評価されます。これは、一般的なコンパイラまたは一般的なエディタによるエラーメッセージと一致します。返された行は、&lt;em&gt;必ずしもではない&lt;/em&gt;の行 &lt;code&gt;line!&lt;/code&gt; 呼び出し自体ですが、 &lt;code&gt;line!&lt;/code&gt; 呼び出しに至るまでの最初のマクロ呼び出しです！大きい。</target>
        </trans-unit>
        <trans-unit id="6dec360ada9c00c421ed26b5b352f032e17122ed" translate="yes" xml:space="preserve">
          <source>The expected cost of &lt;code&gt;push&lt;/code&gt;, averaged over every possible ordering of the elements being pushed, and over a sufficiently large number of pushes, is &lt;em&gt;O&lt;/em&gt;(1). This is the most meaningful cost metric when pushing elements that are &lt;em&gt;not&lt;/em&gt; already in any sorted pattern.</source>
          <target state="translated">&lt;code&gt;push&lt;/code&gt; される要素のすべての可能な順序、および十分に多数のプッシュにわたって平均される、プッシュの予想コストは&lt;em&gt;O&lt;/em&gt;（1）です。これは、まだソートされたパターンになってい&lt;em&gt;ない&lt;/em&gt;要素をプッシュする場合の最も意味のあるコストメトリックです。</target>
        </trans-unit>
        <trans-unit id="606b0f6565bb5e33a7e793c7978e5b02d8b8d28b" translate="yes" xml:space="preserve">
          <source>The expected cost of &lt;code&gt;push&lt;/code&gt;, averaged over every possible ordering of the elements being pushed, and over a sufficiently large number of pushes, is O(1). This is the most meaningful cost metric when pushing elements that are &lt;em&gt;not&lt;/em&gt; already in any sorted pattern.</source>
          <target state="translated">&lt;code&gt;push&lt;/code&gt; される要素の考えられるすべての順序で平均化されたプッシュの予想コストは、十分な数のプッシュでO（1）です。これは、まだソートされたパターンに&lt;em&gt;ない&lt;/em&gt;要素をプッシュする場合に最も意味のあるコストメトリックです。</target>
        </trans-unit>
        <trans-unit id="a72ec7eef34f0a8ffd7d99e9cfce2da0536188e2" translate="yes" xml:space="preserve">
          <source>The expression above creates a value of type &lt;code&gt;MyUnion&lt;/code&gt; and initializes the storage using field &lt;code&gt;f1&lt;/code&gt;. The union can be accessed using the same syntax as struct fields:</source>
          <target state="translated">上記の式は、タイプ &lt;code&gt;MyUnion&lt;/code&gt; の値を作成し、フィールド &lt;code&gt;f1&lt;/code&gt; を使用してストレージを初期化します。共用体には、構造体フィールドと同じ構文を使用してアクセスできます。</target>
        </trans-unit>
        <trans-unit id="b5fa765f11cc060019641c8e75e38c695bdb1bda" translate="yes" xml:space="preserve">
          <source>The expression cannot be a &lt;a href=&quot;operator-expr#lazy-boolean-operators&quot;&gt;lazy boolean operator expression&lt;/a&gt;. Use of a lazy boolean operator is ambiguous with a planned feature change of the language (the implementation of if-let chains - see &lt;a href=&quot;https://github.com/rust-lang/rfcs/blob/master/text/2497-if-let-chains.md#rollout-plan-and-transitioning-to-rust-2018&quot;&gt;eRFC 2947&lt;/a&gt;). When lazy boolean operator expression is desired, this can be achieved by using parenthesis as below:</source>
          <target state="translated">式を&lt;a href=&quot;operator-expr#lazy-boolean-operators&quot;&gt;遅延ブール演算子式に&lt;/a&gt;することはできません。遅延ブール演算子の使用は、言語の計画された機能変更（if-letチェーンの実装&lt;a href=&quot;https://github.com/rust-lang/rfcs/blob/master/text/2497-if-let-chains.md#rollout-plan-and-transitioning-to-rust-2018&quot;&gt;-eRFC 2947を&lt;/a&gt;参照）があいまいです。遅延ブール演算子式が必要な場合は、次のように括弧を使用してこれを実現できます。</target>
        </trans-unit>
        <trans-unit id="a608f321648c235bb5c3f09a506a153d6d9a7fa1" translate="yes" xml:space="preserve">
          <source>The expression for a match arm.</source>
          <target state="translated">マッチアームの表現。</target>
        </trans-unit>
        <trans-unit id="edc402eeeb9a7639cb3c026b59f168e6cd732965" translate="yes" xml:space="preserve">
          <source>The expression immediately following &lt;code&gt;in&lt;/code&gt; must implement the &lt;a href=&quot;../book/ch13-04-performance&quot;&gt;&lt;code&gt;IntoIterator&lt;/code&gt;&lt;/a&gt; trait.</source>
          <target state="translated">すぐに次の式 &lt;code&gt;in&lt;/code&gt; 実装する必要があります&lt;a href=&quot;../book/ch13-04-performance&quot;&gt; &lt;code&gt;IntoIterator&lt;/code&gt; の&lt;/a&gt;形質を。</target>
        </trans-unit>
        <trans-unit id="64c3c13114c938924165b32b931fcfa0929a3dad" translate="yes" xml:space="preserve">
          <source>The expression in the &lt;code&gt;if&lt;/code&gt; block evaluates to an integer, and the expression in the &lt;code&gt;else&lt;/code&gt; block evaluates to a string. This won&amp;rsquo;t work because variables must have a single type. Rust needs to know at compile time what type the &lt;code&gt;number&lt;/code&gt; variable is, definitively, so it can verify at compile time that its type is valid everywhere we use &lt;code&gt;number&lt;/code&gt;. Rust wouldn&amp;rsquo;t be able to do that if the type of &lt;code&gt;number&lt;/code&gt; was only determined at runtime; the compiler would be more complex and would make fewer guarantees about the code if it had to keep track of multiple hypothetical types for any variable.</source>
          <target state="translated">&lt;code&gt;if&lt;/code&gt; ブロックの式は整数に評価され、 &lt;code&gt;else&lt;/code&gt; ブロックの式は文字列に評価されます。変数は単一の型でなければならないため、これは機能しません。 Rustは、コンパイル時に &lt;code&gt;number&lt;/code&gt; 変数の型を正確に知る必要があるため、コンパイル時に、その型が &lt;code&gt;number&lt;/code&gt; を使用するすべての場所で有効であることを検証できます。 &lt;code&gt;number&lt;/code&gt; のタイプが実行時にのみ決定された場合、Rustはそれを行うことができません。変数の複数の仮説型を追跡する必要がある場合、コンパイラーはより複雑になり、コードに関する保証が少なくなります。</target>
        </trans-unit>
        <trans-unit id="7947155b0fa5fdbbf2d84b0fb9bff1298adf4bf1" translate="yes" xml:space="preserve">
          <source>The extension is:</source>
          <target state="translated">その延長線上にあるのが</target>
        </trans-unit>
        <trans-unit id="ea39e7727f6084ef5165d4f9b888542528c3cc1d" translate="yes" xml:space="preserve">
          <source>The external crate is resolved to a specific &lt;code&gt;soname&lt;/code&gt; at compile time, and a runtime linkage requirement to that &lt;code&gt;soname&lt;/code&gt; is passed to the linker for loading at runtime. The &lt;code&gt;soname&lt;/code&gt; is resolved at compile time by scanning the compiler's library path and matching the optional &lt;code&gt;crateid&lt;/code&gt; provided against the &lt;code&gt;crateid&lt;/code&gt; attributes that were declared on the external crate when it was compiled. If no &lt;code&gt;crateid&lt;/code&gt; is provided, a default &lt;code&gt;name&lt;/code&gt; attribute is assumed, equal to the &lt;a href=&quot;../identifiers&quot;&gt;identifier&lt;/a&gt; given in the &lt;code&gt;extern crate&lt;/code&gt; declaration.</source>
          <target state="translated">外部クレートはコンパイル時に特定の &lt;code&gt;soname&lt;/code&gt; に解決され、その &lt;code&gt;soname&lt;/code&gt; への実行時リンケージ要件が実行時にロードするためにリンカーに渡されます。 &lt;code&gt;soname&lt;/code&gt; 、コンパイラのライブラリパスをスキャンし、オプションのマッチングによって、コンパイル時に解決される &lt;code&gt;crateid&lt;/code&gt; に対して提供 &lt;code&gt;crateid&lt;/code&gt; それがコンパイルされたとき、外部クレートに宣言された属性を。 &lt;code&gt;crateid&lt;/code&gt; が指定されていない場合は、 &lt;code&gt;extern crate&lt;/code&gt; 宣言で指定された&lt;a href=&quot;../identifiers&quot;&gt;識別子&lt;/a&gt;に等しいデフォルトの &lt;code&gt;name&lt;/code&gt; 属性が想定されます。</target>
        </trans-unit>
        <trans-unit id="2d4ff9b9a673e6ef5c73fd0d74de95c1584abb9d" translate="yes" xml:space="preserve">
          <source>The failure message indicates that this test did indeed panic as we expected, but the panic message did not include the expected string &lt;code&gt;'Guess value must be less than or equal to 100'&lt;/code&gt;. The panic message that we did get in this case was &lt;code&gt;Guess value must be greater than or equal to 1, got 200.&lt;/code&gt; Now we can start figuring out where our bug is!</source>
          <target state="translated">失敗メッセージは、このテストが実際に予想どおりパニックになったことを示していますが、パニックメッセージには予期された文字列 &lt;code&gt;'Guess value must be less than or equal to 100'&lt;/code&gt; 含まれていませんでした。この場合に得られたパニックメッセージは、 &lt;code&gt;Guess value must be greater than or equal to 1, got 200.&lt;/code&gt; でした。200になりました。これで、バグの場所を特定できるようになりました。</target>
        </trans-unit>
        <trans-unit id="1264d4255ef5d1877747639a91dce97d95706422" translate="yes" xml:space="preserve">
          <source>The family of the operating system. Example value is &lt;code&gt;unix&lt;/code&gt;.</source>
          <target state="translated">オペレーティングシステムのファミリ。値の例は &lt;code&gt;unix&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="1f19a750b2fcc57343d113fae5c2d35cbbeabd61" translate="yes" xml:space="preserve">
          <source>The field names can be decimal integer values to specify indices for constructing tuple structs. This can be used with base structs to fill out the remaining indices not specified:</source>
          <target state="translated">フィールド名には 10 進整数値を指定して、タプル構造体を構築するためのインデックスを指定することができます。これは、指定されていない残りのインデックスを埋めるためにベース構造体と一緒に使用することができます。</target>
        </trans-unit>
        <trans-unit id="0bbc5c6747805ec7b206ff1d7bd4fc19a67e98d4" translate="yes" xml:space="preserve">
          <source>The fields of a &lt;a href=&quot;types/struct&quot;&gt;struct&lt;/a&gt; are dropped in declaration order.</source>
          <target state="translated">&lt;a href=&quot;types/struct&quot;&gt;構造体&lt;/a&gt;のフィールドは、宣言順に削除されます。</target>
        </trans-unit>
        <trans-unit id="c1e05fef4f32d53e63c8251d9d852a226e0b9d94" translate="yes" xml:space="preserve">
          <source>The fields of a &lt;a href=&quot;types/struct&quot;&gt;struct&lt;/a&gt;, &lt;a href=&quot;types/tuple&quot;&gt;tuple&lt;/a&gt; or &lt;a href=&quot;types/enum&quot;&gt;enum variant&lt;/a&gt; are dropped in declaration order. *</source>
          <target state="translated">&lt;a href=&quot;types/struct&quot;&gt;struct&lt;/a&gt;、&lt;a href=&quot;types/tuple&quot;&gt;tuple、&lt;/a&gt;または&lt;a href=&quot;types/enum&quot;&gt;enumバリアント&lt;/a&gt;のフィールドは宣言順にドロップされます。*</target>
        </trans-unit>
        <trans-unit id="ad3f74fe8b6e787f7b7254796fcea650c623bbf0" translate="yes" xml:space="preserve">
          <source>The fields of a &lt;a href=&quot;types/tuple&quot;&gt;tuple&lt;/a&gt; are dropped in order.</source>
          <target state="translated">&lt;a href=&quot;types/tuple&quot;&gt;タプル&lt;/a&gt;のフィールドは順番に削除されます。</target>
        </trans-unit>
        <trans-unit id="985befbf65bb726fbdc7e8fa5788956f4d2e4bf1" translate="yes" xml:space="preserve">
          <source>The fields of a &lt;code&gt;struct&lt;/code&gt; may be qualified by &lt;a href=&quot;../visibility-and-privacy&quot;&gt;visibility modifiers&lt;/a&gt;, to allow access to data in a struct outside a module.</source>
          <target state="translated">フィールド &lt;code&gt;struct&lt;/code&gt; によって修飾することができる&lt;a href=&quot;../visibility-and-privacy&quot;&gt;視認性改質&lt;/a&gt;モジュールの外部構造体中のデータへのアクセスを許可します。</target>
        </trans-unit>
        <trans-unit id="d44253ff03665f86e16760d6d12a49f11125c4e2" translate="yes" xml:space="preserve">
          <source>The fields of the active &lt;a href=&quot;types/enum&quot;&gt;enum variant&lt;/a&gt; are dropped in declaration order.</source>
          <target state="translated">アクティブな&lt;a href=&quot;types/enum&quot;&gt;列挙型バリアント&lt;/a&gt;のフィールドは、宣言順に削除されます。</target>
        </trans-unit>
        <trans-unit id="40ccc036f7a6ce305846dd9b315fdf1f96b15a3b" translate="yes" xml:space="preserve">
          <source>The fields of this struct show that the Rust code we&amp;rsquo;ve parsed is a unit struct with the &lt;code&gt;ident&lt;/code&gt; (identifier, meaning the name) of &lt;code&gt;Pancakes&lt;/code&gt;. There are more fields on this struct for describing all sorts of Rust code; check the &lt;a href=&quot;https://docs.rs/syn/0.14.4/syn/struct.DeriveInput.html&quot;&gt;&lt;code&gt;syn&lt;/code&gt; documentation for &lt;code&gt;DeriveInput&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">この構造体のフィールドは、解析したRustコードが、 &lt;code&gt;Pancakes&lt;/code&gt; の &lt;code&gt;ident&lt;/code&gt; （識別子、名前を意味する）を持つユニット構造体であることを示しています。この構造体には、あらゆる種類のRustコードを記述するためのフィールドがあります。チェック&lt;a href=&quot;https://docs.rs/syn/0.14.4/syn/struct.DeriveInput.html&quot;&gt; &lt;code&gt;syn&lt;/code&gt; &lt;/a&gt;のドキュメント &lt;code&gt;DeriveInput&lt;/code&gt; の詳細については。</target>
        </trans-unit>
        <trans-unit id="b0794c80e766c7ef30098e79990a99a126d86062" translate="yes" xml:space="preserve">
          <source>The fields of this struct show that the Rust code we&amp;rsquo;ve parsed is a unit struct with the &lt;code&gt;ident&lt;/code&gt; (identifier, meaning the name) of &lt;code&gt;Pancakes&lt;/code&gt;. There are more fields on this struct for describing all sorts of Rust code; check the &lt;a href=&quot;https://docs.rs/syn/1.0/syn/struct.DeriveInput.html&quot;&gt;&lt;code&gt;syn&lt;/code&gt; documentation for &lt;code&gt;DeriveInput&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">この構造体のフィールドは、解析したRustコードが &lt;code&gt;Pancakes&lt;/code&gt; の &lt;code&gt;ident&lt;/code&gt; （識別子、名前を意味する）を持つユニット構造体であることを示しています。この構造体には、あらゆる種類のRustコードを記述するためのフィールドがさらにあります。詳細については&lt;a href=&quot;https://docs.rs/syn/1.0/syn/struct.DeriveInput.html&quot;&gt;、&lt;/a&gt; &lt;code&gt;DeriveInput&lt;/code&gt; の &lt;code&gt;syn&lt;/code&gt; ドキュメントを確認してください。</target>
        </trans-unit>
        <trans-unit id="41f21e4814cce1d92447f83c7dd9a65499d60626" translate="yes" xml:space="preserve">
          <source>The file doesn't exist.</source>
          <target state="translated">ファイルが存在しません。</target>
        </trans-unit>
        <trans-unit id="c618b2bfdd921c07e86f2a30b8c3ccd4f98ae789" translate="yes" xml:space="preserve">
          <source>The file is located relative to the current file (similarly to how modules are found).</source>
          <target state="translated">ファイルは現在のファイルからの相対的な位置にあります(モジュールの見つけ方と同様)。</target>
        </trans-unit>
        <trans-unit id="0630128fbb4da19cb239333b356fc43bbab7e18f" translate="yes" xml:space="preserve">
          <source>The file is located relative to the current file (similarly to how modules are found). The provided path is interpreted in a platform-specific way at compile time. So, for instance, an invocation with a Windows path containing backslashes &lt;code&gt;\&lt;/code&gt; would not compile correctly on Unix.</source>
          <target state="translated">ファイルは、現在のファイルを基準にして配置されます（モジュールの検索方法と同様）。提供されたパスは、コンパイル時にプラットフォーム固有の方法で解釈されます。したがって、たとえば、バックスラッシュ &lt;code&gt;\&lt;/code&gt; を含むWindowsパスを使用した呼び出しは、Unixでは正しくコンパイルされません。</target>
        </trans-unit>
        <trans-unit id="a1df7519bc8cdda06f6336bd152ecc0e5b1b6c7c" translate="yes" xml:space="preserve">
          <source>The file is located relative to the current file. (similarly to how modules are found)</source>
          <target state="translated">現在のファイルから相対的に配置されます。(モジュールの見つけ方と似ています)</target>
        </trans-unit>
        <trans-unit id="d6c5af6a5c60f4fa56d05a0fa81955ff57e694aa" translate="yes" xml:space="preserve">
          <source>The file must be opened with write access for truncate to work.</source>
          <target state="translated">truncate を動作させるためには、ファイルを書き込みアクセスで開く必要があります。</target>
        </trans-unit>
        <trans-unit id="b64dc47988604588017060c77446efa88568cbbc" translate="yes" xml:space="preserve">
          <source>The file must be opened with write or append access in order to create a new file.</source>
          <target state="translated">新規ファイルを作成するためには、書き込みアクセスまたは追加アクセスでファイルを開く必要があります。</target>
        </trans-unit>
        <trans-unit id="55a4d79c2d543091872b4da347b5d4b201da5902" translate="yes" xml:space="preserve">
          <source>The file's cursor isn't changed. In particular, if the cursor was at the end and the file is shrunk using this operation, the cursor will now be past the end.</source>
          <target state="translated">ファイルのカーソルは変更されません。特に、カーソルが末尾にあった場合、この操作でファイルを縮小した場合、カーソルは末尾を過ぎたところになります。</target>
        </trans-unit>
        <trans-unit id="6c8ba754d920c70b815c96a59ae89e2ab19e9615" translate="yes" xml:space="preserve">
          <source>The fill character is provided normally in conjunction with the &lt;a href=&quot;#width&quot;&gt;&lt;code&gt;width&lt;/code&gt;&lt;/a&gt; parameter. This indicates that if the value being formatted is smaller than &lt;code&gt;width&lt;/code&gt; some extra characters will be printed around it. The extra characters are specified by &lt;code&gt;fill&lt;/code&gt;, and the alignment can be one of the following options:</source>
          <target state="translated">フィル文字は通常、&lt;a href=&quot;#width&quot;&gt; &lt;code&gt;width&lt;/code&gt; &lt;/a&gt;パラメーターと組み合わせて提供されます。これは、フォーマットされている値が &lt;code&gt;width&lt;/code&gt; よりも小さい場合、その周りに余分な文字が印刷されることを示しています。余分な文字は &lt;code&gt;fill&lt;/code&gt; によって指定され、配置は次のオプションのいずれかになります。</target>
        </trans-unit>
        <trans-unit id="85f2c169cb253978c0bcbcb827b4f9bdee23de08" translate="yes" xml:space="preserve">
          <source>The final action that works only with &lt;code&gt;unsafe&lt;/code&gt; is accessing fields of a &lt;em&gt;union&lt;/em&gt;. A &lt;code&gt;union&lt;/code&gt; is similar to a &lt;code&gt;struct&lt;/code&gt;, but only one declared field is used in a particular instance at one time. Unions are primarily used to interface with unions in C code. Accessing union fields is unsafe because Rust can&amp;rsquo;t guarantee the type of the data currently being stored in the union instance. You can learn more about unions in &lt;a href=&quot;../reference/items/unions&quot;&gt;the reference&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93dbdf12316da4d04bf621e9eb356e67a9dd2780" translate="yes" xml:space="preserve">
          <source>The final action that works only with &lt;code&gt;unsafe&lt;/code&gt; is implementing an unsafe trait. A trait is unsafe when at least one of its methods has some invariant that the compiler can&amp;rsquo;t verify. We can declare that a trait is &lt;code&gt;unsafe&lt;/code&gt; by adding the &lt;code&gt;unsafe&lt;/code&gt; keyword before &lt;code&gt;trait&lt;/code&gt; and marking the implementation of the trait as &lt;code&gt;unsafe&lt;/code&gt; too, as shown in Listing 19-11.</source>
          <target state="translated">&lt;code&gt;unsafe&lt;/code&gt; でない場合にのみ機能する最後のアクションは、安全でない特性を実装することです。少なくとも1つのメソッドにコンパイラが検証できない不変条件がある場合、その特性は安全ではありません。リスト19-11に示すように、トレイトの前に &lt;code&gt;unsafe&lt;/code&gt; キーワードを追加し、 &lt;code&gt;trait&lt;/code&gt; の実装も &lt;code&gt;unsafe&lt;/code&gt; とマークすることで、トレイトが &lt;code&gt;unsafe&lt;/code&gt; ことを宣言できます。</target>
        </trans-unit>
        <trans-unit id="49a4f7cf0e0e66e3c555d75f0978be5130fe5dec" translate="yes" xml:space="preserve">
          <source>The final expression of any extending &lt;a href=&quot;expressions/block-expr&quot;&gt;block expression&lt;/a&gt;.</source>
          <target state="translated">拡張&lt;a href=&quot;expressions/block-expr&quot;&gt;ブロック式&lt;/a&gt;の最終式。</target>
        </trans-unit>
        <trans-unit id="5d305704a4fbc5372e6355348bdb324639855c0b" translate="yes" xml:space="preserve">
          <source>The final line ending is optional.</source>
          <target state="translated">最後の行末は任意です。</target>
        </trans-unit>
        <trans-unit id="7bcad5659fa398bc4723e1a1e4ec534359f32934" translate="yes" xml:space="preserve">
          <source>The final line ending is optional. A string that ends with a final line ending will return the same lines as an otherwise identical string without a final line ending.</source>
          <target state="translated">最終行の末尾はオプションです。最終行で終わる文字列は、最終行のない同一の文字列と同じ行を返します。</target>
        </trans-unit>
        <trans-unit id="d405e4ac4031d3643938bc829210c93b1a171c2a" translate="yes" xml:space="preserve">
          <source>The final line ending isn't required:</source>
          <target state="translated">最後の行末は必要ありません。</target>
        </trans-unit>
        <trans-unit id="c5271e27e91796af655967c8ffbfa429a17a75cb" translate="yes" xml:space="preserve">
          <source>The final result could be determined just by looking at the code at compile time, so &lt;a href=&quot;https://en.wikipedia.org/wiki/Constant_folding&quot;&gt;constant folding&lt;/a&gt; might turn the whole block into a simple &lt;code&gt;println!(&quot;7 4 4&quot;)&lt;/code&gt;.</source>
          <target state="translated">最終結果は、コンパイル時にコードを調べるだけで決定できるため、&lt;a href=&quot;https://en.wikipedia.org/wiki/Constant_folding&quot;&gt;定数の折りたたみ&lt;/a&gt;により、ブロック全体が単純な &lt;code&gt;println!(&quot;7 4 4&quot;)&lt;/code&gt; になる可能性があります。</target>
        </trans-unit>
        <trans-unit id="4e59d9d4ed7f661f21e1daf6cf7e1143fd8d7bfa" translate="yes" xml:space="preserve">
          <source>The first &lt;code&gt;Cons&lt;/code&gt; value holds &lt;code&gt;1&lt;/code&gt; and another &lt;code&gt;List&lt;/code&gt; value. This &lt;code&gt;List&lt;/code&gt; value is another &lt;code&gt;Cons&lt;/code&gt; value that holds &lt;code&gt;2&lt;/code&gt; and another &lt;code&gt;List&lt;/code&gt; value. This &lt;code&gt;List&lt;/code&gt; value is one more &lt;code&gt;Cons&lt;/code&gt; value that holds &lt;code&gt;3&lt;/code&gt; and a &lt;code&gt;List&lt;/code&gt; value, which is finally &lt;code&gt;Nil&lt;/code&gt;, the non-recursive variant that signals the end of the list.</source>
          <target state="translated">最初の &lt;code&gt;Cons&lt;/code&gt; 値は &lt;code&gt;1&lt;/code&gt; を保持し、別の &lt;code&gt;List&lt;/code&gt; 値を保持します。この &lt;code&gt;List&lt;/code&gt; 値は、 &lt;code&gt;2&lt;/code&gt; と別の &lt;code&gt;List&lt;/code&gt; 値を保持する別の &lt;code&gt;Cons&lt;/code&gt; 値です。この &lt;code&gt;List&lt;/code&gt; 値は、 &lt;code&gt;3&lt;/code&gt; を保持するもう1つの &lt;code&gt;Cons&lt;/code&gt; 値と、最後に &lt;code&gt;Nil&lt;/code&gt; である &lt;code&gt;List&lt;/code&gt; 値です。これは、リストの終わりを示す非再帰的なバリアントです。</target>
        </trans-unit>
        <trans-unit id="b8427aa75fccc52f421b7262b47d3cb66ca8ba99" translate="yes" xml:space="preserve">
          <source>The first &lt;code&gt;length&lt;/code&gt; bytes at &lt;code&gt;buf&lt;/code&gt; need to be valid UTF-8.</source>
          <target state="translated">&lt;code&gt;buf&lt;/code&gt; の最初の &lt;code&gt;length&lt;/code&gt; バイトは、有効なUTF-8である必要があります。</target>
        </trans-unit>
        <trans-unit id="b2f6ee38297963ecf451ec169c5ecff0bb88450f" translate="yes" xml:space="preserve">
          <source>The first argument &lt;code&gt;format!&lt;/code&gt; receives is a format string. This must be a string literal. The power of the formatting string is in the &lt;code&gt;{}&lt;/code&gt;s contained.</source>
          <target state="translated">最初の引数の &lt;code&gt;format!&lt;/code&gt; receiveはフォーマット文字列です。これは文字列リテラルでなければなりません。書式設定文字列の機能は、含まれている &lt;code&gt;{}&lt;/code&gt; にあります。</target>
        </trans-unit>
        <trans-unit id="172d64775742c02b6a5a5317561d4368b0242e63" translate="yes" xml:space="preserve">
          <source>The first argument we gave to the &lt;code&gt;assert_eq!&lt;/code&gt; macro, &lt;code&gt;4&lt;/code&gt;, is equal to the result of calling &lt;code&gt;add_two(2)&lt;/code&gt;. The line for this test is &lt;code&gt;test tests::it_adds_two ... ok&lt;/code&gt;, and the &lt;code&gt;ok&lt;/code&gt; text indicates that our test passed!</source>
          <target state="translated">&lt;code&gt;assert_eq!&lt;/code&gt; 与えた最初の引数！マクロ &lt;code&gt;4&lt;/code&gt; は、 &lt;code&gt;add_two(2)&lt;/code&gt; を呼び出した結果と同じです。このテストの行は &lt;code&gt;test tests::it_adds_two ... ok&lt;/code&gt; で、 &lt;code&gt;ok&lt;/code&gt; テキストはテストに合格したことを示しています。</target>
        </trans-unit>
        <trans-unit id="3de15e9c98b000a8208779afdf2f678b58acd245" translate="yes" xml:space="preserve">
          <source>The first arm will match any point that lies on the &lt;code&gt;x&lt;/code&gt; axis by specifying that the &lt;code&gt;y&lt;/code&gt; field matches if its value matches the literal &lt;code&gt;0&lt;/code&gt;. The pattern still creates an &lt;code&gt;x&lt;/code&gt; variable that we can use in the code for this arm.</source>
          <target state="translated">最初のアームは、値がリテラル &lt;code&gt;0&lt;/code&gt; と一致する場合に &lt;code&gt;y&lt;/code&gt; フィールドが一致することを指定することにより、 &lt;code&gt;x&lt;/code&gt; 軸上にある任意のポイントと一致します。このパターンでも、このアームのコードで使用できる &lt;code&gt;x&lt;/code&gt; 変数が作成されます。</target>
        </trans-unit>
        <trans-unit id="0d5278ef07d533df9f2058795a528bf65f8762b5" translate="yes" xml:space="preserve">
          <source>The first character is &lt;code&gt;_&lt;/code&gt;.</source>
          <target state="translated">最初の文字は &lt;code&gt;_&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="6995348ce355253fb2b3997cb5b666e8341177e1" translate="yes" xml:space="preserve">
          <source>The first character is a letter.</source>
          <target state="translated">最初の一文字が文字になっています。</target>
        </trans-unit>
        <trans-unit id="a8c76b012fc5c6ec5d1d2757128af41ec43b821f" translate="yes" xml:space="preserve">
          <source>The first collection type we&amp;rsquo;ll look at is &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt;, also known as a &lt;em&gt;vector&lt;/em&gt;. Vectors allow you to store more than one value in a single data structure that puts all the values next to each other in memory. Vectors can only store values of the same type. They are useful when you have a list of items, such as the lines of text in a file or the prices of items in a shopping cart.</source>
          <target state="translated">最初に &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; コレクション型はVec &amp;lt;T&amp;gt;で、これは&lt;em&gt;vector&lt;/em&gt;とも呼ばれます。ベクトルを使用すると、単一のデータ構造に複数の値を格納して、すべての値をメモリ内で隣同士に配置できます。ベクトルは同じタイプの値のみを保存できます。ファイル内のテキスト行やショッピングカート内のアイテムの価格など、アイテムのリストがある場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="428cb6a8ac810de3963e02d4205a82867bb3d81a" translate="yes" xml:space="preserve">
          <source>The first command creates a new directory called &lt;em&gt;hello_cargo&lt;/em&gt;. We&amp;rsquo;ve named our project &lt;em&gt;hello_cargo&lt;/em&gt;, and Cargo creates its files in a directory of the same name.</source>
          <target state="translated">最初のコマンドは、&lt;em&gt;hello_cargo&lt;/em&gt;という新しいディレクトリを作成します。プロジェクトに&lt;em&gt;hello_cargo&lt;/em&gt;という名前を付け、Cargoは同じ名前のディレクトリにファイルを作成します。</target>
        </trans-unit>
        <trans-unit id="63eaa7d21eca5ee74b5e72e48aed31081f441d50" translate="yes" xml:space="preserve">
          <source>The first command, &lt;code&gt;cargo new&lt;/code&gt;, takes the name of the project (&lt;code&gt;guessing_game&lt;/code&gt;) as the first argument. The second command changes to the new project&amp;rsquo;s directory.</source>
          <target state="translated">最初のコマンド、 &lt;code&gt;cargo new&lt;/code&gt; は、最初の引数としてプロジェクトの名前（ &lt;code&gt;guessing_game&lt;/code&gt; ）を取ります。2番目のコマンドは、新しいプロジェクトのディレクトリに移動します。</target>
        </trans-unit>
        <trans-unit id="0041dd0d29e2c266e11aba3af3bc7df1a46ad21b" translate="yes" xml:space="preserve">
          <source>The first element is traditionally the path of the executable, but it can be set to arbitrary text, and it may not even exist, so this property should not be relied upon for security purposes.</source>
          <target state="translated">最初の要素は伝統的に実行ファイルのパスですが、任意のテキストに設定することもできますし、存在しない場合もあります。</target>
        </trans-unit>
        <trans-unit id="d1fd88a9bd4f9b97a6544f441d40f72dd7a6a337" translate="yes" xml:space="preserve">
          <source>The first element is traditionally the path of the executable, but it can be set to arbitrary text, and may not even exist. This means this property should not be relied upon for security purposes.</source>
          <target state="translated">最初の要素は伝統的には実行ファイルのパスですが、任意のテキストに設定することができ、存在しない場合もあります。つまり、このプロパティはセキュリティの目的のために頼るべきではないということです。</target>
        </trans-unit>
        <trans-unit id="57c13dc1f835e54c634e0d373f7f324807f9c426" translate="yes" xml:space="preserve">
          <source>The first element was moved out of the array, but this is not possible because &lt;code&gt;NonCopy&lt;/code&gt; does not implement the &lt;code&gt;Copy&lt;/code&gt; trait.</source>
          <target state="translated">最初の要素は配列の外に移動されましたが、 &lt;code&gt;NonCopy&lt;/code&gt; は &lt;code&gt;Copy&lt;/code&gt; トレイトを実装していないため、これは不可能です。</target>
        </trans-unit>
        <trans-unit id="7e08bb0a99fdc3cd6e428394eb70ec134e104b16" translate="yes" xml:space="preserve">
          <source>The first enum shown is the usual kind of enum you'd find in a C-style language. The second shows off a hypothetical example of something storing location data, with &lt;code&gt;Coord&lt;/code&gt; being any other type that's needed, for example a struct. The third example demonstrates the kind of data a variant can store, ranging from nothing, to a tuple, to an anonymous struct.</source>
          <target state="translated">表示される最初の列挙型は、Cスタイル言語で見つかる通常の列挙型です。2番目は、位置データを格納する架空の例を示しています &lt;code&gt;Coord&lt;/code&gt; は、構造体など、必要なその他のタイプです。3番目の例は、バリアントが保存できるデータの種類を示しています。</target>
        </trans-unit>
        <trans-unit id="356931433c23df443c1df1a79c8ba26a23e35bf5" translate="yes" xml:space="preserve">
          <source>The first error is in our &lt;code&gt;Drop&lt;/code&gt; implementation. We mentioned earlier that we intended to call &lt;code&gt;take&lt;/code&gt; on the &lt;code&gt;Option&lt;/code&gt; value to move &lt;code&gt;thread&lt;/code&gt; out of &lt;code&gt;worker&lt;/code&gt;. The following changes will do so:</source>
          <target state="translated">最初のエラーは、 &lt;code&gt;Drop&lt;/code&gt; の実装にあります。 &lt;code&gt;thread&lt;/code&gt; を &lt;code&gt;worker&lt;/code&gt; の外に移動するために &lt;code&gt;Option&lt;/code&gt; 値で &lt;code&gt;take&lt;/code&gt; を呼び出すつもりであると前述しました。以下の変更がそうします：</target>
        </trans-unit>
        <trans-unit id="65b1330f4d7e9b563ff90a9ab4bea0daa6bb9857" translate="yes" xml:space="preserve">
          <source>The first invariant says that whatever actual token that comes after a matcher, if any, must be somewhere in the predetermined follow set. This ensures that a legal macro definition will continue to assign the same determination as to where &lt;code&gt;... tt&lt;/code&gt; ends and &lt;code&gt;uu ...&lt;/code&gt; begins, even as new syntactic forms are added to the language.</source>
          <target state="translated">最初の不変式は、マッチャーの後に続く実際のトークンは、もしあれば、所定のフォローセットのどこかになければならないことを示しています。これにより、新しい構文形式が言語に追加されても、正当なマクロ定義が &lt;code&gt;... tt&lt;/code&gt; 終了し、 &lt;code&gt;uu ...&lt;/code&gt; が開始する場所と同じ決定を割り当て続けることが保証されます。</target>
        </trans-unit>
        <trans-unit id="5f19def176a50d6a90af45519ada69ee7f97eb7e" translate="yes" xml:space="preserve">
          <source>The first is that it is how much memory must be allocated to store that value.</source>
          <target state="translated">1つ目は、その値を格納するためにどれだけのメモリを確保しなければならないかということです。</target>
        </trans-unit>
        <trans-unit id="beaa6fcb1bf59defe3de830f4f2763f9980dd889" translate="yes" xml:space="preserve">
          <source>The first is to answer a specific question. If you know which chapter answers that question, you can jump to that chapter in the table of contents. Otherwise, you can press &lt;code&gt;s&lt;/code&gt; or the click the magnifying glass on the top bar to search for keywords related to your question. For example, say you wanted to know when a temporary value created in a let statement is dropped. If you didn't already know that the &lt;a href=&quot;expressions#temporaries&quot;&gt;lifetime of temporaries&lt;/a&gt; is defined in the &lt;a href=&quot;expressions&quot;&gt;expressions chapter&lt;/a&gt;, you could search &quot;temporary let&quot; and the first search result will take you to that section.</source>
          <target state="translated">1つ目は、特定の質問に答えることです。どの章がその質問に答えているかがわかっている場合は、目次のその章にジャンプできます。それ以外の場合は、 &lt;code&gt;s&lt;/code&gt; を押すか、トップバーの虫眼鏡をクリックして、質問に関連するキーワードを検索できます。たとえば、letステートメントで作成された一時的な値がいつドロップされるかを知りたいとします。&lt;a href=&quot;expressions#temporaries&quot;&gt;一時的な&lt;/a&gt;ものの存続期間が&lt;a href=&quot;expressions&quot;&gt;式の章&lt;/a&gt;で定義されていることをまだ知らなかった場合は、「一時的なレット」を検索すると、最初の検索結果でそのセクションに移動します。</target>
        </trans-unit>
        <trans-unit id="6fc0f539a4da8814ced28ee34b9432e35dbaf3f6" translate="yes" xml:space="preserve">
          <source>The first is to answer a specific question. If you know which chapter answers that question, you can jump to that chapter in the table of contents. Otherwise, you can press &lt;code&gt;s&lt;/code&gt; or the click the magnifying glass on the top bar to search for keywords related to your question. For example, say you wanted to know when a temporary value created in a let statement is dropped. If you didn't already know that the &lt;a href=&quot;expressions#temporary-lifetimes&quot;&gt;lifetime of temporaries&lt;/a&gt; is defined in the &lt;a href=&quot;expressions&quot;&gt;expressions chapter&lt;/a&gt;, you could search &quot;temporary let&quot; and the first search result will take you to that section.</source>
          <target state="translated">最初は特定の質問に答えることです。どの章がその質問に答えるかがわかっている場合は、目次でその章にジャンプできます。それ以外の場合は、 &lt;code&gt;s&lt;/code&gt; を押すか、上部バーの虫眼鏡をクリックして、質問に関連するキーワードを検索できます。たとえば、letステートメントで作成された一時的な値がいつ削除されたかを知りたいとします。&lt;a href=&quot;expressions#temporary-lifetimes&quot;&gt;一時&lt;/a&gt;の存続期間が&lt;a href=&quot;expressions&quot;&gt;式の章&lt;/a&gt;で定義されていることをまだ知らない場合は、「temporary let」を検索すると、最初の検索結果でそのセクションに移動します。</target>
        </trans-unit>
        <trans-unit id="9d5da3096efb5359ed9929a25c1646ef8f4d3a16" translate="yes" xml:space="preserve">
          <source>The first line is a &lt;em&gt;status line&lt;/em&gt; that contains the HTTP version used in the response, a numeric status code that summarizes the result of the request, and a reason phrase that provides a text description of the status code. After the CRLF sequence are any headers, another CRLF sequence, and the body of the response.</source>
          <target state="translated">最初の行は、&lt;em&gt;ステータスライン&lt;/em&gt;応答に使用されるHTTPバージョン、要求の結果を要約する数値ステータスコード、およびステータスコードのテキスト説明を提供する理由フレーズを含んでいます。CRLFシーケンスの後には、ヘッダー、別のCRLFシーケンス、および応答の本文があります。</target>
        </trans-unit>
        <trans-unit id="f9ee7ff7ce4ca8fcacdd1bbbd80ae645db3e5b9c" translate="yes" xml:space="preserve">
          <source>The first line is the &lt;em&gt;request line&lt;/em&gt; that holds information about what the client is requesting. The first part of the request line indicates the &lt;em&gt;method&lt;/em&gt; being used, such as &lt;code&gt;GET&lt;/code&gt; or &lt;code&gt;POST&lt;/code&gt;, which describes how the client is making this request. Our client used a &lt;code&gt;GET&lt;/code&gt; request.</source>
          <target state="translated">最初の行は、クライアントが要求しているものに関する情報を保持する&lt;em&gt;要求行&lt;/em&gt;です。リクエスト行の最初の部分は、クライアントがこのリクエストをどのように行っているかを示す &lt;code&gt;GET&lt;/code&gt; や &lt;code&gt;POST&lt;/code&gt; などの使用されている&lt;em&gt;メソッドを&lt;/em&gt;示しています。クライアントは &lt;code&gt;GET&lt;/code&gt; リクエストを使用しました。</target>
        </trans-unit>
        <trans-unit id="81a313a5dc649f34279e079a51051be71d71d911" translate="yes" xml:space="preserve">
          <source>The first line shows a function definition, and the second line shows a fully annotated closure definition. The third line removes the type annotations from the closure definition, and the fourth line removes the brackets, which are optional because the closure body has only one expression. These are all valid definitions that will produce the same behavior when they&amp;rsquo;re called.</source>
          <target state="translated">1行目は関数定義を示し、2行目は完全に注釈が付けられたクロージャ定義を示しています。3行目はクロージャー定義から型注釈を削除し、4行目はブラケットを削除します。これは、クロージャー本体に式が1つしかないためオプションです。これらはすべて呼び出されたときに同じ動作を生成する有効な定義です。</target>
        </trans-unit>
        <trans-unit id="ee8e9ca51bced15f598c9116a158790ff9d282d7" translate="yes" xml:space="preserve">
          <source>The first line shows a function definition, and the second line shows a fully annotated closure definition. The third line removes the type annotations from the closure definition, and the fourth line removes the brackets, which are optional because the closure body has only one expression. These are all valid definitions that will produce the same behavior when they&amp;rsquo;re called. Calling the closures is required for &lt;code&gt;add_one_v3&lt;/code&gt; and &lt;code&gt;add_one_v4&lt;/code&gt; to be able to compile because the types will be inferred from their usage.</source>
          <target state="translated">最初の行は関数定義を示し、2行目は完全に注釈が付けられたクロージャ定義を示しています。 3行目は、クロージャー定義から型注釈を削除し、4行目はブラケットを削除します。これは、クロージャー本体に1つの式しかないため、オプションです。これらはすべて有効な定義であり、呼び出されたときに同じ動作を生成します。型はそれらの使用法から推測されるため、 &lt;code&gt;add_one_v3&lt;/code&gt; と &lt;code&gt;add_one_v4&lt;/code&gt; をコンパイルできるようにするには、クロージャを呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="98148895ad25eccad7c245ba3595f3571d1d992c" translate="yes" xml:space="preserve">
          <source>The first line, &lt;code&gt;[package]&lt;/code&gt;, is a section heading that indicates that the following statements are configuring a package. As we add more information to this file, we&amp;rsquo;ll add other sections.</source>
          <target state="translated">最初の行 &lt;code&gt;[package]&lt;/code&gt; は、次のステートメントがパッケージを構成していることを示すセクション見出しです。このファイルにさらに情報を追加すると、他のセクションが追加されます。</target>
        </trans-unit>
        <trans-unit id="b65c034b9a1653c1664e07497c1d14736ba472ab" translate="yes" xml:space="preserve">
          <source>The first mismatching element defines which sequence is lexicographically less or greater than the other.</source>
          <target state="translated">最初のミスマッチ要素は、語彙的にどのシーケンスが他のシーケンスより小さいか大きいかを定義します。</target>
        </trans-unit>
        <trans-unit id="8b310676b3019d119c9c467f577a365e7a655455" translate="yes" xml:space="preserve">
          <source>The first new bit here is another &lt;code&gt;use&lt;/code&gt; statement, bringing a type called &lt;code&gt;std::cmp::Ordering&lt;/code&gt; into scope from the standard library. Like &lt;code&gt;Result&lt;/code&gt;, &lt;code&gt;Ordering&lt;/code&gt; is another enum, but the variants for &lt;code&gt;Ordering&lt;/code&gt; are &lt;code&gt;Less&lt;/code&gt;, &lt;code&gt;Greater&lt;/code&gt;, and &lt;code&gt;Equal&lt;/code&gt;. These are the three outcomes that are possible when you compare two values.</source>
          <target state="translated">ここでの最初の新しいビットは、 &lt;code&gt;std::cmp::Ordering&lt;/code&gt; と呼ばれる型を標準ライブラリからスコープに導入する別の &lt;code&gt;use&lt;/code&gt; ステートメントです。 &lt;code&gt;Result&lt;/code&gt; と同様に、 &lt;code&gt;Ordering&lt;/code&gt; も別の列挙型ですが、 &lt;code&gt;Ordering&lt;/code&gt; のバリアントは &lt;code&gt;Less&lt;/code&gt; 、 &lt;code&gt;Greater&lt;/code&gt; 、 &lt;code&gt;Equal&lt;/code&gt; です。これらは、2つの値を比較したときに可能な3つの結果です。</target>
        </trans-unit>
        <trans-unit id="cc86c6e2624cc3af0cff65094ba89e9de1e68ebb" translate="yes" xml:space="preserve">
          <source>The first new line defines the &lt;code&gt;response&lt;/code&gt; variable that holds the success message&amp;rsquo;s data. Then we call &lt;code&gt;as_bytes&lt;/code&gt; on our &lt;code&gt;response&lt;/code&gt; to convert the string data to bytes. The &lt;code&gt;write&lt;/code&gt; method on &lt;code&gt;stream&lt;/code&gt; takes a &lt;code&gt;&amp;amp;[u8]&lt;/code&gt; and sends those bytes directly down the connection.</source>
          <target state="translated">最初の新しい行は、成功メッセージのデータを保持する &lt;code&gt;response&lt;/code&gt; 変数を定義します。次に、 &lt;code&gt;response&lt;/code&gt; &lt;code&gt;as_bytes&lt;/code&gt; を呼び出して、文字列データをバイトに変換します。 &lt;code&gt;stream&lt;/code&gt; の &lt;code&gt;write&lt;/code&gt; メソッドは &lt;code&gt;&amp;amp;[u8]&lt;/code&gt; を取り、それらのバイトを接続を介して直接送信します。</target>
        </trans-unit>
        <trans-unit id="155e4331405457b07f19de5018b6f05e551344c8" translate="yes" xml:space="preserve">
          <source>The first one looks much cleaner. This automatic referencing behavior works because methods have a clear receiver&amp;mdash;the type of &lt;code&gt;self&lt;/code&gt;. Given the receiver and name of a method, Rust can figure out definitively whether the method is reading (&lt;code&gt;&amp;amp;self&lt;/code&gt;), mutating (&lt;code&gt;&amp;amp;mut self&lt;/code&gt;), or consuming (&lt;code&gt;self&lt;/code&gt;). The fact that Rust makes borrowing implicit for method receivers is a big part of making ownership ergonomic in practice.</source>
          <target state="translated">最初のものはずっときれいに見えます。この自動参照動作は、メソッドに明確なレシーバー（ &lt;code&gt;self&lt;/code&gt; のタイプ）があるため機能します。メソッドの受信者と名前を指定すると、Rustはメソッドが読み取り（ &lt;code&gt;&amp;amp;self&lt;/code&gt; ）、変更（ &lt;code&gt;&amp;amp;mut self&lt;/code&gt; ）、または消費（ &lt;code&gt;self&lt;/code&gt; ）のいずれであるかを明確に把握できます。Rustがメソッドレシーバーの借用を暗黙的に行うという事実は、所有権を実際に人間工学的にする上で重要な部分です。</target>
        </trans-unit>
        <trans-unit id="69774098a6b4b7c12621ff37f51e96103a8b7208" translate="yes" xml:space="preserve">
          <source>The first part of the guessing game program will ask for user input, process that input, and check that the input is in the expected form. To start, we&amp;rsquo;ll allow the player to input a guess. Enter the code in Listing 2-1 into &lt;em&gt;src/main.rs&lt;/em&gt;.</source>
          <target state="translated">推測ゲームプログラムの最初の部分は、ユーザー入力を要求し、その入力を処理し、入力が予期した形式であることを確認します。まず、プレイヤーが推測を入力できるようにします。コードリスト2-1のコードを&lt;em&gt;src / main.rsに&lt;/em&gt;入力します。</target>
        </trans-unit>
        <trans-unit id="2750d61c6d5f6fdb7cf8539aba812571a959c619" translate="yes" xml:space="preserve">
          <source>The first parts of the module system we&amp;rsquo;ll cover are packages and crates. A crate is a binary or library. The &lt;em&gt;crate root&lt;/em&gt; is a source file that the Rust compiler starts from and makes up the root module of your crate (we&amp;rsquo;ll explain modules in depth in the &lt;a href=&quot;ch07-02-defining-modules-to-control-scope-and-privacy&quot;&gt;&amp;ldquo;Defining Modules to Control Scope and Privacy&amp;rdquo;&lt;/a&gt; section). A &lt;em&gt;package&lt;/em&gt; is one or more crates that provide a set of functionality. A package contains a &lt;em&gt;Cargo.toml&lt;/em&gt; file that describes how to build those crates.</source>
          <target state="translated">ここで取り上げるモジュールシステムの最初の部分は、パッケージと木枠です。クレートはバイナリまたはライブラリです。&lt;em&gt;クレートルートは&lt;/em&gt;錆コンパイラから始まり、あなたのクレートのルートモジュールを構成することをソースファイルである（私たちは中に深さのモジュールを説明しましょう&lt;a href=&quot;ch07-02-defining-modules-to-control-scope-and-privacy&quot;&gt;「の定義モジュールのコントロールへの適用範囲とプライバシー」&lt;/a&gt;を参照）。&lt;em&gt;パッケージは、&lt;/em&gt;一連の機能を提供する1つ以上の木箱です。パッケージには、これらのクレートを作成する方法を説明する&lt;em&gt;Cargo.toml&lt;/em&gt;ファイルが含まれて&lt;em&gt;い&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="84c014079631c14ba610d8bbfcba357c51089179" translate="yes" xml:space="preserve">
          <source>The first parts of the module system we&amp;rsquo;ll cover are packages and crates. A crate is a binary or library. The &lt;em&gt;crate root&lt;/em&gt; is a source file that the Rust compiler starts from and makes up the root module of your crate (we&amp;rsquo;ll explain modules in depth in the &lt;a href=&quot;ch07-02-defining-modules-to-control-scope-and-privacy&quot;&gt;&amp;ldquo;Defining Modules to Control Scope and Privacy&amp;rdquo;&lt;/a&gt;) section. A &lt;em&gt;package&lt;/em&gt; is one or more crates that provide a set of functionality. A package contains a &lt;em&gt;Cargo.toml&lt;/em&gt; file that describes how to build those crates.</source>
          <target state="translated">ここで取り上げるモジュールシステムの最初の部分は、パッケージとクレートです。クレートはバイナリまたはライブラリです。&lt;em&gt;クレートのルートは、&lt;/em&gt;錆のコンパイラは（我々は深さのモジュールを説明しますから始まり、あなたのクレートのルートモジュールを構成することをソースファイルである&lt;a href=&quot;ch07-02-defining-modules-to-control-scope-and-privacy&quot;&gt;「の定義モジュールのコントロールへの適用範囲とプライバシー」&lt;/a&gt;セクションを）。&lt;em&gt;パッケージは、&lt;/em&gt;一連の機能を提供する1つ以上の木箱です。パッケージには、これらの箱を構築する方法を説明する&lt;em&gt;Cargo.toml&lt;/em&gt;ファイルが含まれて&lt;em&gt;い&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="af7ae34fc30a5ff985eeb202b31d100b9995dad4" translate="yes" xml:space="preserve">
          <source>The first problem is that a &lt;code&gt;Cacher&lt;/code&gt; instance assumes it will always get the same value for the parameter &lt;code&gt;arg&lt;/code&gt; to the &lt;code&gt;value&lt;/code&gt; method. That is, this test of &lt;code&gt;Cacher&lt;/code&gt; will fail:</source>
          <target state="translated">最初の問題は、ということである &lt;code&gt;Cacher&lt;/code&gt; インスタンスは、それは常に、パラメータの同じ値を取得します想定して &lt;code&gt;arg&lt;/code&gt; に &lt;code&gt;value&lt;/code&gt; 方法を。つまり、この &lt;code&gt;Cacher&lt;/code&gt; のテストは失敗します。</target>
        </trans-unit>
        <trans-unit id="dafa36fcdade4f5ce81d7dee337248690a10ae6d" translate="yes" xml:space="preserve">
          <source>The first purpose is similar to the second but in reverse: if you want to add a type parameter to an existing trait, you can give it a default to allow extension of the functionality of the trait without breaking the existing implementation code.</source>
          <target state="translated">既存の形質に型パラメータを追加したい場合、既存の実装コードを壊すことなく形質の機能を拡張できるようにデフォルト値を与えることができます。</target>
        </trans-unit>
        <trans-unit id="5f5a900754c112ed82386f584763afdd02db421d" translate="yes" xml:space="preserve">
          <source>The first rule is that each parameter that is a reference gets its own lifetime parameter. In other words, a function with one parameter gets one lifetime parameter: &lt;code&gt;fn foo&amp;lt;'a&amp;gt;(x: &amp;amp;'a i32)&lt;/code&gt;; a function with two parameters gets two separate lifetime parameters: &lt;code&gt;fn foo&amp;lt;'a, 'b&amp;gt;(x: &amp;amp;'a i32, y: &amp;amp;'b i32)&lt;/code&gt;; and so on.</source>
          <target state="translated">最初のルールは、参照である各パラメーターが独自の有効期間パラメーターを取得することです。つまり、1つのパラメーターを持つ関数は、1つの有効期間パラメーターを取得します &lt;code&gt;fn foo&amp;lt;'a&amp;gt;(x: &amp;amp;'a i32)&lt;/code&gt; ; 2つのパラメーターを持つ関数は、2つの別個の有効期間パラメーターを取得します &lt;code&gt;fn foo&amp;lt;'a, 'b&amp;gt;(x: &amp;amp;'a i32, y: &amp;amp;'b i32)&lt;/code&gt; ;等々。</target>
        </trans-unit>
        <trans-unit id="d13f338beec8e6c884aee47f7c30a9f0bc21c5c9" translate="yes" xml:space="preserve">
          <source>The first section of the output shows that the &lt;code&gt;it_works&lt;/code&gt; test in the &lt;code&gt;add-one&lt;/code&gt; crate passed. The next section shows that zero tests were found in the &lt;code&gt;adder&lt;/code&gt; crate, and then the last section shows zero documentation tests were found in the &lt;code&gt;add-one&lt;/code&gt; crate. Running &lt;code&gt;cargo test&lt;/code&gt; in a workspace structured like this one will run the tests for all the crates in the workspace.</source>
          <target state="translated">出力の最初のセクションは、 &lt;code&gt;add-one&lt;/code&gt; クレートの &lt;code&gt;it_works&lt;/code&gt; テストに合格したことを示しています。ゼロのテストがで発見されたことを、次のセクションショー &lt;code&gt;adder&lt;/code&gt; クレート、及び最後のセクションショーゼロドキュメントテストはで発見された &lt;code&gt;add-one&lt;/code&gt; クレート。実行中の &lt;code&gt;cargo test&lt;/code&gt; この1のような構造のワークスペースでは、ワークスペース内のすべての箱のためのテストを実行します。</target>
        </trans-unit>
        <trans-unit id="1aa6d921fdf65cd84a902ac9021b32a10817790a" translate="yes" xml:space="preserve">
          <source>The first step is to build a list of candidate receiver types. Obtain these by repeatedly &lt;a href=&quot;operator-expr#the-dereference-operator&quot;&gt;dereferencing&lt;/a&gt; the receiver expression's type, adding each type encountered to the list, then finally attempting an &lt;a href=&quot;../type-coercions#unsized-coercions&quot;&gt;unsized coercion&lt;/a&gt; at the end, and adding the result type if that is successful. Then, for each candidate &lt;code&gt;T&lt;/code&gt;, add &lt;code&gt;&amp;amp;T&lt;/code&gt; and &lt;code&gt;&amp;amp;mut T&lt;/code&gt; to the list immediately after &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">最初のステップは、候補となるレシーバータイプのリストを作成することです。レシーバーの式の型を繰り返し&lt;a href=&quot;operator-expr#the-dereference-operator&quot;&gt;逆参照し&lt;/a&gt;、遭遇した各型をリストに追加し、最後に&lt;a href=&quot;../type-coercions#unsized-coercions&quot;&gt;サイズなしの強制&lt;/a&gt;を試み、それが成功した場合は結果の型を追加して、これらを取得します。次に、候補 &lt;code&gt;T&lt;/code&gt; ごとに、 &lt;code&gt;&amp;amp;T&lt;/code&gt; および &lt;code&gt;&amp;amp;mut T&lt;/code&gt; を &lt;code&gt;T&lt;/code&gt; の直後のリストに追加します。</target>
        </trans-unit>
        <trans-unit id="7046b8e80cd49555b791ba84b08e3a496f0ebd34" translate="yes" xml:space="preserve">
          <source>The first step is to install Rust. We&amp;rsquo;ll download Rust through &lt;code&gt;rustup&lt;/code&gt;, a command line tool for managing Rust versions and associated tools. You&amp;rsquo;ll need an internet connection for the download.</source>
          <target state="translated">最初のステップは、Rustをインストールすることです。Rustのバージョンと関連ツールを管理するためのコマンドラインツールである &lt;code&gt;rustup&lt;/code&gt; からRustをダウンロードします。ダウンロードにはインターネット接続が必要です。</target>
        </trans-unit>
        <trans-unit id="50ad5f65969d8efb886424560b9363334f047aa4" translate="yes" xml:space="preserve">
          <source>The first store to &lt;code&gt;C&lt;/code&gt; might be moved before the store to &lt;code&gt;A&lt;/code&gt; or &lt;code&gt;B&lt;/code&gt;, &lt;em&gt;as if&lt;/em&gt; we had written &lt;code&gt;C = 4; A = 3; B = 4&lt;/code&gt;.</source>
          <target state="translated">最初の店舗 &lt;code&gt;C&lt;/code&gt; は、に格納する前に移動されるかもしれない &lt;code&gt;A&lt;/code&gt; または &lt;code&gt;B&lt;/code&gt; 、&lt;em&gt;かのように&lt;/em&gt;我々が書いた &lt;code&gt;C = 4; A = 3; B = 4&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0a6ba14d6296fbc087c2dbd538a2ed25e14b36c1" translate="yes" xml:space="preserve">
          <source>The first task is to make &lt;code&gt;minigrep&lt;/code&gt; accept its two command line arguments: the filename and a string to search for. That is, we want to be able to run our program with &lt;code&gt;cargo run&lt;/code&gt;, a string to search for, and a path to a file to search in, like so:</source>
          <target state="translated">最初のタスクは、 &lt;code&gt;minigrep&lt;/code&gt; に 2つのコマンドライン引数（ファイル名と検索する文字列）を受け入れさせることです。つまり、 &lt;code&gt;cargo run&lt;/code&gt; 、検索する文字列、検索するファイルへのパスを使用して、次のようにプログラムを実行できるようにします。</target>
        </trans-unit>
        <trans-unit id="31729bd9aa0c04461ab01bb63b4c75c53baddad1" translate="yes" xml:space="preserve">
          <source>The first time we call &lt;code&gt;example_closure&lt;/code&gt; with the &lt;code&gt;String&lt;/code&gt; value, the compiler infers the type of &lt;code&gt;x&lt;/code&gt; and the return type of the closure to be &lt;code&gt;String&lt;/code&gt;. Those types are then locked in to the closure in &lt;code&gt;example_closure&lt;/code&gt;, and we get a type error if we try to use a different type with the same closure.</source>
          <target state="translated">我々は呼んで初めて &lt;code&gt;example_closure&lt;/code&gt; をして &lt;code&gt;String&lt;/code&gt; 値は、コンパイラの推論のタイプ &lt;code&gt;x&lt;/code&gt; とクロージャの戻り値の型があることを &lt;code&gt;String&lt;/code&gt; 。これらの型は &lt;code&gt;example_closure&lt;/code&gt; のクロージャーにロックされ、同じクロージャーで異なる型を使用しようとすると型エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="bd2776b4ba26113bcf03f01d82d4cc2a793fc112" translate="yes" xml:space="preserve">
          <source>The first time we call the &lt;code&gt;add_to_waitlist&lt;/code&gt; function in &lt;code&gt;eat_at_restaurant&lt;/code&gt;, we use an absolute path. The &lt;code&gt;add_to_waitlist&lt;/code&gt; function is defined in the same crate as &lt;code&gt;eat_at_restaurant&lt;/code&gt;, which means we can use the &lt;code&gt;crate&lt;/code&gt; keyword to start an absolute path.</source>
          <target state="translated">我々は呼んで初めて &lt;code&gt;add_to_waitlist&lt;/code&gt; の中の関数 &lt;code&gt;eat_at_restaurant&lt;/code&gt; は、我々は絶対パスを使用します。 &lt;code&gt;add_to_waitlist&lt;/code&gt; の機能は同じクレートに定義され &lt;code&gt;eat_at_restaurant&lt;/code&gt; 我々が使用できることを意味し、 &lt;code&gt;crate&lt;/code&gt; 絶対パスを開始するキーワード。</target>
        </trans-unit>
        <trans-unit id="fcbd8f43979f6a3f91b2e8d0489ac836799ae483" translate="yes" xml:space="preserve">
          <source>The first two cases are the same except for mutability. The first case states that if you have a &lt;code&gt;&amp;amp;T&lt;/code&gt;, and &lt;code&gt;T&lt;/code&gt; implements &lt;code&gt;Deref&lt;/code&gt; to some type &lt;code&gt;U&lt;/code&gt;, you can get a &lt;code&gt;&amp;amp;U&lt;/code&gt; transparently. The second case states that the same deref coercion happens for mutable references.</source>
          <target state="translated">最初の2つのケースは、可変性を除いて同じです。最初のケースは、 &lt;code&gt;&amp;amp;T&lt;/code&gt; があり、 &lt;code&gt;T&lt;/code&gt; が何らかのタイプ &lt;code&gt;U&lt;/code&gt; に &lt;code&gt;Deref&lt;/code&gt; を実装している場合、 &lt;code&gt;&amp;amp;U&lt;/code&gt; を透過的に取得できることを示しています。2番目のケースは、変更可能な参照に対して同じderef強制が発生することを示しています。</target>
        </trans-unit>
        <trans-unit id="286885295f7366f4af40320e50ad88bb3b1732e7" translate="yes" xml:space="preserve">
          <source>The first version of the prelude of The Rust Standard Library.</source>
          <target state="translated">ラスト・スタンダード・ライブラリー』の前奏曲の第一弾。</target>
        </trans-unit>
        <trans-unit id="2833ddd57d8c251f327110ae65b75e17455b9bb3" translate="yes" xml:space="preserve">
          <source>The first will contain all indices from &lt;code&gt;[0, mid)&lt;/code&gt; (excluding the index &lt;code&gt;mid&lt;/code&gt; itself) and the second will contain all indices from &lt;code&gt;[mid, len)&lt;/code&gt; (excluding the index &lt;code&gt;len&lt;/code&gt; itself).</source>
          <target state="translated">1つ目は &lt;code&gt;[0, mid)&lt;/code&gt; からのすべてのインデックス（インデックス &lt;code&gt;mid&lt;/code&gt; 自体を除く）を含み、2つ目は &lt;code&gt;[mid, len)&lt;/code&gt; からのすべてのインデックスを含みます（インデックス &lt;code&gt;len&lt;/code&gt; 自体を除く）。</target>
        </trans-unit>
        <trans-unit id="d13813ed09799c4deb40bb4b4bb042ae0365adde" translate="yes" xml:space="preserve">
          <source>The following &lt;a href=&quot;../attributes&quot;&gt;attributes&lt;/a&gt; affect compile-time limits.</source>
          <target state="translated">次の&lt;a href=&quot;../attributes&quot;&gt;属性は&lt;/a&gt;、コンパイル時の制限に影響します。</target>
        </trans-unit>
        <trans-unit id="1c0907607a038e19917ef67594e99ddd26567897" translate="yes" xml:space="preserve">
          <source>The following &lt;a href=&quot;../attributes&quot;&gt;attributes&lt;/a&gt; are used for changing how a type can be used.</source>
          <target state="translated">次の&lt;a href=&quot;../attributes&quot;&gt;属性&lt;/a&gt;は、タイプの使用方法を変更するために使用されます。</target>
        </trans-unit>
        <trans-unit id="53b431e371001b409fc98d06f983cdb135709c0f" translate="yes" xml:space="preserve">
          <source>The following &lt;a href=&quot;../attributes&quot;&gt;attributes&lt;/a&gt; are used for controlling code generation.</source>
          <target state="translated">次の&lt;a href=&quot;../attributes&quot;&gt;属性&lt;/a&gt;は、コード生成の制御に使用されます。</target>
        </trans-unit>
        <trans-unit id="26da618b938f5c0f34421c8ac509923a988969a6" translate="yes" xml:space="preserve">
          <source>The following &lt;a href=&quot;../attributes&quot;&gt;attributes&lt;/a&gt; are used for controlling or generating diagnostic messages during compilation.</source>
          <target state="translated">次の&lt;a href=&quot;../attributes&quot;&gt;属性&lt;/a&gt;は、コンパイル中に診断メッセージを制御または生成するために使用されます。</target>
        </trans-unit>
        <trans-unit id="a094c614790975d250927975ec0fe6928fcd7c3a" translate="yes" xml:space="preserve">
          <source>The following &lt;a href=&quot;../attributes&quot;&gt;attributes&lt;/a&gt; are used for specifying functions for performing tests. Compiling a crate in &quot;test&quot; mode enables building the test functions along with a test harness for executing the tests. Enabling the test mode also enables the &lt;a href=&quot;../conditional-compilation#test&quot;&gt;&lt;code&gt;test&lt;/code&gt; conditional compilation option&lt;/a&gt;.</source>
          <target state="translated">次の&lt;a href=&quot;../attributes&quot;&gt;属性&lt;/a&gt;は、テストを実行するための関数を指定するために使用されます。「テスト」モードでクレートをコンパイルすると、テストを実行するためのテストハーネスとともにテスト機能を構築できます。テストモードを有効にすると、&lt;a href=&quot;../conditional-compilation#test&quot;&gt; &lt;code&gt;test&lt;/code&gt; 条件付きコンパイルオプション&lt;/a&gt;も有効になります。</target>
        </trans-unit>
        <trans-unit id="c6bd6f609f21755a5a941e395bd92f148b7a32a4" translate="yes" xml:space="preserve">
          <source>The following &lt;a href=&quot;../attributes&quot;&gt;attributes&lt;/a&gt; control the behavior of external blocks.</source>
          <target state="translated">次の&lt;a href=&quot;../attributes&quot;&gt;属性&lt;/a&gt;は、外部ブロックの動作を制御します。</target>
        </trans-unit>
        <trans-unit id="e4c3204613b4a8b1aeaa7e0d193d03d0b636c5e8" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;join_slices&lt;/code&gt; function is &lt;strong&gt;unsound&lt;/strong&gt; ⚠️</source>
          <target state="translated">次 &lt;code&gt;join_slices&lt;/code&gt; の関数である&lt;strong&gt;不健全&lt;/strong&gt;⚠️</target>
        </trans-unit>
        <trans-unit id="34e28a9dda5b8f30dd258681b177c05e512cb9ec" translate="yes" xml:space="preserve">
          <source>The following are examples of struct expressions:</source>
          <target state="translated">以下に構造体表現の例を示します。</target>
        </trans-unit>
        <trans-unit id="0cfa813f73eeb4b3df6024040cdcdc9bf704edb3" translate="yes" xml:space="preserve">
          <source>The following code tries to return a closure directly, but it won&amp;rsquo;t compile:</source>
          <target state="translated">次のコードはクロージャーを直接返そうとしますが、コンパイルされません。</target>
        </trans-unit>
        <trans-unit id="9fdd790090c328b0bac332ac3bf94fd48a22d310" translate="yes" xml:space="preserve">
          <source>The following coercions are called &lt;code&gt;unsized coercions&lt;/code&gt;, since they relate to converting sized types to unsized types, and are permitted in a few cases where other coercions are not, as described above. They can still happen anywhere else a coercion can occur.</source>
          <target state="translated">次の型変換は、サイズ付き型からサイズなし型への変換に関連しているため、サイズなし型 &lt;code&gt;unsized coercions&lt;/code&gt; と呼ばれ、上記のように、他の型変換ができないいくつかの場合に許可されます。彼らはまだ他の場所で強制が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="5faa68338d0213add2f9ec4c067dc00f82eb825f" translate="yes" xml:space="preserve">
          <source>The following contexts are &lt;em&gt;place expression&lt;/em&gt; contexts:</source>
          <target state="translated">次のコンテキストは、&lt;em&gt;場所式の&lt;/em&gt;コンテキストです。</target>
        </trans-unit>
        <trans-unit id="a03f434198c8f12dc538595d512c2779094f1534" translate="yes" xml:space="preserve">
          <source>The following example contains a circular dependency between two traits:</source>
          <target state="translated">次の例では、2つの形質間の循環依存関係が含まれています。</target>
        </trans-unit>
        <trans-unit id="19cc88ac0ce4f5388077204fb21e73c4ffb89f2d" translate="yes" xml:space="preserve">
          <source>The following example implements &lt;code&gt;Index&lt;/code&gt; on a read-only &lt;code&gt;NucleotideCount&lt;/code&gt; container, enabling individual counts to be retrieved with index syntax.</source>
          <target state="translated">次の例では、読み取り専用の &lt;code&gt;NucleotideCount&lt;/code&gt; コンテナに &lt;code&gt;Index&lt;/code&gt; を実装し、個々のカウントをインデックス構文で取得できるようにします。</target>
        </trans-unit>
        <trans-unit id="1e6d78aaf2b8415e3caf24e2fa8603dbd9c8a54c" translate="yes" xml:space="preserve">
          <source>The following example showcases the fact that exclusive access to an &lt;code&gt;UnsafeCell&amp;lt;T&amp;gt;&lt;/code&gt; implies exclusive access to its &lt;code&gt;T&lt;/code&gt;:</source>
          <target state="translated">The following example showcases the fact that exclusive access to an &lt;code&gt;UnsafeCell&amp;lt;T&amp;gt;&lt;/code&gt; implies exclusive access to its &lt;code&gt;T&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="b79316b13dbff6d7faf92f7fbb6c36c3b4504a1c" translate="yes" xml:space="preserve">
          <source>The following example uses &lt;a href=&quot;enum.option&quot;&gt;&lt;code&gt;Option&lt;/code&gt;&lt;/a&gt; to create an optional box of &lt;a href=&quot;../primitive.i32&quot;&gt;&lt;code&gt;i32&lt;/code&gt;&lt;/a&gt;. Notice that in order to use the inner &lt;a href=&quot;../primitive.i32&quot;&gt;&lt;code&gt;i32&lt;/code&gt;&lt;/a&gt; value first, the &lt;code&gt;check_optional&lt;/code&gt; function needs to use pattern matching to determine whether the box has a value (i.e., it is &lt;a href=&quot;enum.option#variant.Some&quot;&gt;&lt;code&gt;Some(...)&lt;/code&gt;&lt;/a&gt;) or not (&lt;a href=&quot;enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">次の例では、&lt;a href=&quot;enum.option&quot;&gt; &lt;code&gt;Option&lt;/code&gt; &lt;/a&gt;を使用して&lt;a href=&quot;../primitive.i32&quot;&gt; &lt;code&gt;i32&lt;/code&gt; の&lt;/a&gt;オプションボックスを作成しています。最初に内部の&lt;a href=&quot;../primitive.i32&quot;&gt; &lt;code&gt;i32&lt;/code&gt; &lt;/a&gt;値を使用するために、 &lt;code&gt;check_optional&lt;/code&gt; 関数はパターンマッチングを使用して、ボックスに値がある（つまり、&lt;a href=&quot;enum.option#variant.Some&quot;&gt; &lt;code&gt;Some(...)&lt;/code&gt; である&lt;/a&gt;）かどうかを判断する必要があることに注意してください（&lt;a href=&quot;enum.option#variant.None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="0098b757352995332c14af09f0677dc80f9a0b00" translate="yes" xml:space="preserve">
          <source>The following expressions are constant expressions, so long as any operands are also constant expressions and do not cause any &lt;a href=&quot;destructors&quot;&gt;&lt;code&gt;Drop::drop&lt;/code&gt;&lt;/a&gt; calls to be run.</source>
          <target state="translated">次の式は、オペランドも定数式であり、&lt;a href=&quot;destructors&quot;&gt; &lt;code&gt;Drop::drop&lt;/code&gt; &lt;/a&gt;呼び出しが実行されない限り、定数式です。</target>
        </trans-unit>
        <trans-unit id="a4fd2c18c35c909a948ecc39653105d7e64c5323" translate="yes" xml:space="preserve">
          <source>The following expressions are equivalent.</source>
          <target state="translated">以下の表現は等価です。</target>
        </trans-unit>
        <trans-unit id="f79e25578dbebf348320c4abf5b91615c4d5d3bd" translate="yes" xml:space="preserve">
          <source>The following expressions can be mutable place expression contexts:</source>
          <target state="translated">以下の式は、変異可能な場所式コンテキストにすることができます。</target>
        </trans-unit>
        <trans-unit id="0e8e60bb585909210311dad5aced6fb1ca9a2411" translate="yes" xml:space="preserve">
          <source>The following illustrates how tokens can be directly matched after matching a &lt;code&gt;tt&lt;/code&gt; fragment:</source>
          <target state="translated">次の例は、 &lt;code&gt;tt&lt;/code&gt; フラグメントの照合後にトークンを直接照合する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="4cba4cc8b1a51987e47e31e5a3e9298ced934caa" translate="yes" xml:space="preserve">
          <source>The following is a list of the available feature names.</source>
          <target state="translated">利用可能な機能名は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="7bfbc404b57ece9100ac4d9b168ae9cc179de313" translate="yes" xml:space="preserve">
          <source>The following is an example of a derive macro. Instead of doing anything useful with its input, it just appends a function &lt;code&gt;answer&lt;/code&gt;.</source>
          <target state="translated">以下は、派生マクロの例です。入力に対して有用な処理を行うのではなく、関数 &lt;code&gt;answer&lt;/code&gt; を追加するだけです。</target>
        </trans-unit>
        <trans-unit id="cb90a0db80f40417302eef01e3aacf14fbc10a30" translate="yes" xml:space="preserve">
          <source>The following is an example of declaring &lt;code&gt;Shape&lt;/code&gt; to be a supertrait of &lt;code&gt;Circle&lt;/code&gt;.</source>
          <target state="translated">以下は、 &lt;code&gt;Shape&lt;/code&gt; を &lt;code&gt;Circle&lt;/code&gt; の上位特性として宣言する例です。</target>
        </trans-unit>
        <trans-unit id="0bc86808e703044cc02c714fea381b5d6b4eb104" translate="yes" xml:space="preserve">
          <source>The following is an index of all built-in attributes.</source>
          <target state="translated">以下は、すべての組み込み属性のインデックスです。</target>
        </trans-unit>
        <trans-unit id="7cc1fc6a380ba45eaa1f4f2110280733486f387c" translate="yes" xml:space="preserve">
          <source>The following is an overview of the available synchronization objects:</source>
          <target state="translated">利用可能な同期オブジェクトの概要は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="e77d4cd3fb5ca40ba38b2400787449b1eb8f401a" translate="yes" xml:space="preserve">
          <source>The following keywords are reserved beginning in the 2018 edition.</source>
          <target state="translated">2018年版からは以下のキーワードを予約しています。</target>
        </trans-unit>
        <trans-unit id="88a73d4d23e456f05faa46221aa0e7b9298c7349" translate="yes" xml:space="preserve">
          <source>The following keywords currently have the functionality described.</source>
          <target state="translated">現在、以下のキーワードには機能が記載されています。</target>
        </trans-unit>
        <trans-unit id="b5d973323cad12bb72185383671304dcd5ab9469" translate="yes" xml:space="preserve">
          <source>The following keywords do not have any functionality but are reserved by Rust for potential future use.</source>
          <target state="translated">以下のキーワードには機能はありませんが、将来的な使用の可能性を考慮してRustによって予約されています。</target>
        </trans-unit>
        <trans-unit id="e441a28a0807978c7d9ce6b3cf8c4bd39296d4e8" translate="yes" xml:space="preserve">
          <source>The following keywords were added beginning in the 2018 edition.</source>
          <target state="translated">2018年版から以下のキーワードが追加されました。</target>
        </trans-unit>
        <trans-unit id="7de22ffd047d06a2d94087f0583e69c5de3c8513" translate="yes" xml:space="preserve">
          <source>The following language level features cannot be used in the safe subset of Rust:</source>
          <target state="translated">以下の言語レベルの機能は、Rust の安全なサブセットでは使用できません。</target>
        </trans-unit>
        <trans-unit id="fa4bbe49e1fb3a478a935beaddada675b665b643" translate="yes" xml:space="preserve">
          <source>The following list contains all non-letters that don&amp;rsquo;t function as operators; that is, they don&amp;rsquo;t behave like a function or method call.</source>
          <target state="translated">次のリストには、演算子として機能しないすべての非文字が含まれています。つまり、関数やメソッドの呼び出しのようには動作しません。</target>
        </trans-unit>
        <trans-unit id="35b04ccb391eee75aac9df7cb7f1bfc81254ebee" translate="yes" xml:space="preserve">
          <source>The following list contains keywords that are reserved for current or future use by the Rust language. As such, they cannot be used as identifiers (except as raw identifiers as we&amp;rsquo;ll discuss in the &amp;ldquo;&lt;a href=&quot;#raw-identifiers&quot;&gt;Raw Identifiers&lt;/a&gt;&amp;rdquo; section), including names of functions, variables, parameters, struct fields, modules, crates, constants, macros, static values, attributes, types, traits, or lifetimes.</source>
          <target state="translated">次のリストには、Rust言語が現在または将来使用するために予約されているキーワードが含まれています。そのため、関数の名前、変数、パラメーター、構造体フィールド、モジュール、クレート、定数、マクロ、静的値など、識別子（「&lt;a href=&quot;#raw-identifiers&quot;&gt;未加工識別子&lt;/a&gt;」セクションで説明する未加工識別子を除く）として使用することはできません。、属性、タイプ、特性、またはライフタイム。</target>
        </trans-unit>
        <trans-unit id="92af89abc5b10810cac2bde7c4403090edbb5361" translate="yes" xml:space="preserve">
          <source>The following notations are used by the &lt;em&gt;Lexer&lt;/em&gt; and &lt;em&gt;Syntax&lt;/em&gt; grammar snippets:</source>
          <target state="translated">次の表記は、&lt;em&gt;レクサー&lt;/em&gt;と&lt;em&gt;構文の&lt;/em&gt;文法スニペットで使用されます。</target>
        </trans-unit>
        <trans-unit id="6c611de22c83326f1c10498c47d838ad78c2827b" translate="yes" xml:space="preserve">
          <source>The following return &lt;a href=&quot;../primitive.bool&quot;&gt;&lt;code&gt;false&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">次は&lt;a href=&quot;../primitive.bool&quot;&gt; &lt;code&gt;false&lt;/code&gt; を&lt;/a&gt;返します：</target>
        </trans-unit>
        <trans-unit id="1c03f7174ac895e9b31fae2f8cfc928f6b6b192e" translate="yes" xml:space="preserve">
          <source>The following return &lt;a href=&quot;https://doc.rust-lang.org/nightly/std/primitive.bool.html&quot;&gt;&lt;code&gt;false&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">The following return &lt;a href=&quot;https://doc.rust-lang.org/nightly/std/primitive.bool.html&quot;&gt; &lt;code&gt;false&lt;/code&gt; &lt;/a&gt;:</target>
        </trans-unit>
        <trans-unit id="452576d6c51a73e57d8181671d67361d1616b8f6" translate="yes" xml:space="preserve">
          <source>The following return false:</source>
          <target state="translated">以下はfalseを返します。</target>
        </trans-unit>
        <trans-unit id="b857efb8bb558af5cdfcfd53ef42f4d49fe84301" translate="yes" xml:space="preserve">
          <source>The following rewritten version of &lt;code&gt;another_function&lt;/code&gt; shows what parameters look like in Rust:</source>
          <target state="translated">次の書き直した &lt;code&gt;another_function&lt;/code&gt; のバージョンは、Rustでのパラメーターの外観を示しています。</target>
        </trans-unit>
        <trans-unit id="7befecdaf697f20709a802fcb20813e2f422fba6" translate="yes" xml:space="preserve">
          <source>The following sections contain reference material you may find useful in your Rust journey.</source>
          <target state="translated">以下のセクションには、Rustの旅で役立つ参考資料が掲載されています。</target>
        </trans-unit>
        <trans-unit id="5d4dd709d05236da16b69a96983ce9c67ce45124" translate="yes" xml:space="preserve">
          <source>The following steps install the latest stable version of the Rust compiler. Rust&amp;rsquo;s stability guarantees ensure that all the examples in the book that compile will continue to compile with newer Rust versions. The output might differ slightly between versions, because Rust often improves error messages and warnings. In other words, any newer, stable version of Rust you install using these steps should work as expected with the content of this book.</source>
          <target state="translated">次の手順では、Rustコンパイラの最新の安定バージョンをインストールします。Rustの安定性の保証により、コンパイルされる本のすべての例は、新しいRustバージョンで引き続きコンパイルされます。Rustは多くの場合エラーメッセージと警告を改善するため、出力はバージョン間で若干異なる場合があります。つまり、これらの手順を使用してインストールしたRustの新しい安定したバージョンは、この本の内容で期待どおりに機能するはずです。</target>
        </trans-unit>
        <trans-unit id="d23c37bf8f18aef980fb1fbefe90db0a500a0719" translate="yes" xml:space="preserve">
          <source>The following table gives the size for primitives.</source>
          <target state="translated">以下の表は、プリミティブのサイズを示しています。</target>
        </trans-unit>
        <trans-unit id="3bc9c0126109b1bad1345c2a1d2c68127ed67d67" translate="yes" xml:space="preserve">
          <source>The following traits are implemented for all &lt;code&gt;&amp;amp;T&lt;/code&gt;, regardless of the type of its referent:</source>
          <target state="translated">次の特性は、その参照先のタイプに関係なく、すべての &lt;code&gt;&amp;amp;T&lt;/code&gt; に実装されています。</target>
        </trans-unit>
        <trans-unit id="3e9fcf457a5e9ecd7495ab63bfd0f41db2476290" translate="yes" xml:space="preserve">
          <source>The following traits are implemented on &lt;code&gt;&amp;amp;T&lt;/code&gt; references if the underlying &lt;code&gt;T&lt;/code&gt; also implements that trait:</source>
          <target state="translated">以下の特性は、基礎となる &lt;code&gt;T&lt;/code&gt; もその特性を実装する場合、 &lt;code&gt;&amp;amp;T&lt;/code&gt; 参照に実装されます。</target>
        </trans-unit>
        <trans-unit id="be48c1df52265e0b68ec35bc1f2481219af6ad7a" translate="yes" xml:space="preserve">
          <source>The following will print &quot;Custom panic hook&quot;:</source>
          <target state="translated">以下は「カスタムパニックフック」と印刷されます。</target>
        </trans-unit>
        <trans-unit id="882019462e8fd74a5df1bf54582eb004918743ba" translate="yes" xml:space="preserve">
          <source>The following will print &quot;Normal panic&quot;:</source>
          <target state="translated">以下は「通常のパニック」と表示されます。</target>
        </trans-unit>
        <trans-unit id="7ed71896f2a34a4014ac80c7f9efbde1c744961e" translate="yes" xml:space="preserve">
          <source>The form &lt;code&gt;(..)&lt;/code&gt; with a single &lt;a href=&quot;#rest-patterns&quot;&gt;&lt;em&gt;RestPattern&lt;/em&gt;&lt;/a&gt; is a special form that does not require a comma, and matches a tuple of any size.</source>
          <target state="translated">The form &lt;code&gt;(..)&lt;/code&gt; with a single &lt;a href=&quot;#rest-patterns&quot;&gt;&lt;em&gt;RestPattern&lt;/em&gt;&lt;/a&gt; is a special form that does not require a comma, and matches a tuple of any size.</target>
        </trans-unit>
        <trans-unit id="2a310cc6ed2f47da18129871732d4b9900992d6f" translate="yes" xml:space="preserve">
          <source>The formal way of describing this behavior is that expressions of type &lt;code&gt;!&lt;/code&gt; can be coerced into any other type. We&amp;rsquo;re allowed to end this &lt;code&gt;match&lt;/code&gt; arm with &lt;code&gt;continue&lt;/code&gt; because &lt;code&gt;continue&lt;/code&gt; doesn&amp;rsquo;t return a value; instead, it moves control back to the top of the loop, so in the &lt;code&gt;Err&lt;/code&gt; case, we never assign a value to &lt;code&gt;guess&lt;/code&gt;.</source>
          <target state="translated">この動作を正式に説明する方法は、型の式 &lt;code&gt;!&lt;/code&gt; 他のタイプに強制することができます。 &lt;code&gt;continue&lt;/code&gt; は値を返さないため、この &lt;code&gt;match&lt;/code&gt; アームを &lt;code&gt;continue&lt;/code&gt; で終了できます。代わりに、制御をループの先頭に戻します。そのため、 &lt;code&gt;Err&lt;/code&gt; の場合、 &lt;code&gt;guess&lt;/code&gt; に値を割り当てません。</target>
        </trans-unit>
        <trans-unit id="99bcb45d13b51e9ae5259463fdd2a32bb1c9a90e" translate="yes" xml:space="preserve">
          <source>The full circle constant (&amp;tau;)</source>
          <target state="translated">The full circle constant (&amp;tau;)</target>
        </trans-unit>
        <trans-unit id="cd8574fedd8387c0dcc9c1aeee32062dd23e8095" translate="yes" xml:space="preserve">
          <source>The full path is created by joining the original path to &lt;code&gt;read_dir&lt;/code&gt; with the filename of this entry.</source>
          <target state="translated">フルパスは、 &lt;code&gt;read_dir&lt;/code&gt; への元のパスをこのエントリのファイル名と結合することによって作成されます。</target>
        </trans-unit>
        <trans-unit id="32f32b59c17ac39e46a137b79b14f93e65ff40c1" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;inner_drop&lt;/code&gt; has the type that &lt;a href=&quot;../ops/trait.drop#tymethod.drop&quot;&gt;&lt;code&gt;drop&lt;/code&gt;&lt;/a&gt;&lt;em&gt;should&lt;/em&gt; have, so this makes sure that you do not accidentally use &lt;code&gt;self&lt;/code&gt;/&lt;code&gt;this&lt;/code&gt; in a way that is in conflict with pinning.</source>
          <target state="translated">The function &lt;code&gt;inner_drop&lt;/code&gt; has the type that &lt;a href=&quot;../ops/trait.drop#tymethod.drop&quot;&gt; &lt;code&gt;drop&lt;/code&gt; &lt;/a&gt;&lt;em&gt;should&lt;/em&gt; have, so this makes sure that you do not accidentally use &lt;code&gt;self&lt;/code&gt; / &lt;code&gt;this&lt;/code&gt; in a way that is in conflict with pinning.</target>
        </trans-unit>
        <trans-unit id="41bd7d7e62e02a905d152c2bd99a0375a7ed8226" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;inner_drop&lt;/code&gt; has the type that &lt;code&gt;drop&lt;/code&gt;&lt;em&gt;should&lt;/em&gt; have, so this makes sure that you do not accidentally use &lt;code&gt;self&lt;/code&gt;/&lt;code&gt;this&lt;/code&gt; in a way that is in conflict with pinning.</source>
          <target state="translated">関数 &lt;code&gt;inner_drop&lt;/code&gt; は、 &lt;code&gt;drop&lt;/code&gt; &lt;em&gt;が&lt;/em&gt;持つ&lt;em&gt;べき&lt;/em&gt;型を持っているので、固定と競合する方法で誤って &lt;code&gt;self&lt;/code&gt; / &lt;code&gt;this&lt;/code&gt; を使用しないようにします。</target>
        </trans-unit>
        <trans-unit id="cf14d5d5cd860e1137527a26dcf1970a6fdcd6cb" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;slice::from_raw_parts_mut&lt;/code&gt; is unsafe because it takes a raw pointer and must trust that this pointer is valid. The &lt;code&gt;add&lt;/code&gt; method on raw pointers is also unsafe, because it must trust that the offset location is also a valid pointer. Therefore, we had to put an &lt;code&gt;unsafe&lt;/code&gt; block around our calls to &lt;code&gt;slice::from_raw_parts_mut&lt;/code&gt; and &lt;code&gt;add&lt;/code&gt; so we could call them. By looking at the code and by adding the assertion that &lt;code&gt;mid&lt;/code&gt; must be less than or equal to &lt;code&gt;len&lt;/code&gt;, we can tell that all the raw pointers used within the &lt;code&gt;unsafe&lt;/code&gt; block will be valid pointers to data within the slice. This is an acceptable and appropriate use of &lt;code&gt;unsafe&lt;/code&gt;.</source>
          <target state="translated">The function &lt;code&gt;slice::from_raw_parts_mut&lt;/code&gt; is unsafe because it takes a raw pointer and must trust that this pointer is valid. The &lt;code&gt;add&lt;/code&gt; method on raw pointers is also unsafe, because it must trust that the offset location is also a valid pointer. Therefore, we had to put an &lt;code&gt;unsafe&lt;/code&gt; block around our calls to &lt;code&gt;slice::from_raw_parts_mut&lt;/code&gt; and &lt;code&gt;add&lt;/code&gt; so we could call them. By looking at the code and by adding the assertion that &lt;code&gt;mid&lt;/code&gt; must be less than or equal to &lt;code&gt;len&lt;/code&gt; , we can tell that all the raw pointers used within the &lt;code&gt;unsafe&lt;/code&gt; block will be valid pointers to data within the slice. This is an acceptable and appropriate use of &lt;code&gt;unsafe&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="bcc8f276c3240e55b6476f93fee8521728c232e7" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;slice::from_raw_parts_mut&lt;/code&gt; is unsafe because it takes a raw pointer and must trust that this pointer is valid. The &lt;code&gt;offset&lt;/code&gt; method on raw pointers is also unsafe, because it must trust that the offset location is also a valid pointer. Therefore, we had to put an &lt;code&gt;unsafe&lt;/code&gt; block around our calls to &lt;code&gt;slice::from_raw_parts_mut&lt;/code&gt; and &lt;code&gt;offset&lt;/code&gt; so we could call them. By looking at the code and by adding the assertion that &lt;code&gt;mid&lt;/code&gt; must be less than or equal to &lt;code&gt;len&lt;/code&gt;, we can tell that all the raw pointers used within the &lt;code&gt;unsafe&lt;/code&gt; block will be valid pointers to data within the slice. This is an acceptable and appropriate use of &lt;code&gt;unsafe&lt;/code&gt;.</source>
          <target state="translated">関数 &lt;code&gt;slice::from_raw_parts_mut&lt;/code&gt; は生のポインタを受け取り、このポインタが有効であることを信頼する必要があるため、安全ではありません。生のポインタの &lt;code&gt;offset&lt;/code&gt; メソッドも、オフセットの場所も有効なポインタであると信頼する必要があるため、安全ではありません。したがって、 &lt;code&gt;slice::from_raw_parts_mut&lt;/code&gt; と &lt;code&gt;offset&lt;/code&gt; の呼び出しの周りに &lt;code&gt;unsafe&lt;/code&gt; ブロックを配置して、それらを呼び出せるようにする必要がありました。コードを見て、 &lt;code&gt;mid&lt;/code&gt; が &lt;code&gt;len&lt;/code&gt; 以下でなければならないというアサーションを追加することにより、 &lt;code&gt;unsafe&lt;/code&gt; ブロック内で使用されるすべての未加工ポインターは、スライス内のデータへの有効なポインターであることがわかります。これは許容できる適切な使用法です &lt;code&gt;unsafe&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9e2ea4196275fb1f06fa7661da10e384c365aa9f" translate="yes" xml:space="preserve">
          <source>The function body block is contained within the scope of the entire function.</source>
          <target state="translated">関数本体ブロックは、関数全体のスコープ内に含まれています。</target>
        </trans-unit>
        <trans-unit id="2cd654b546be7671958f348149444656b0175877" translate="yes" xml:space="preserve">
          <source>The function body uses the &lt;code&gt;assert_eq!&lt;/code&gt; macro to assert that 2 + 2 equals 4. This assertion serves as an example of the format for a typical test. Let&amp;rsquo;s run it to see that this test passes.</source>
          <target state="translated">関数本体は &lt;code&gt;assert_eq!&lt;/code&gt; を使用します。2 + 2が4に等しいことをアサートするマクロ。このアサーションは、一般的なテストのフォーマットの例として機能します。それを実行して、このテストに合格することを確認しましょう。</target>
        </trans-unit>
        <trans-unit id="fce36fec5fc1977be02dde267db493eca3e79d7a" translate="yes" xml:space="preserve">
          <source>The function must be called with valid byte array &lt;code&gt;buf&lt;/code&gt; of sufficient size to hold the message bytes. If a message is too long to fit in the supplied buffer, excess bytes may be discarded.</source>
          <target state="translated">関数は、メッセージバイトを保持するのに十分なサイズの有効なバイト配列 &lt;code&gt;buf&lt;/code&gt; を使用して呼び出す必要があります。メッセージが長すぎて提供されたバッファに収まらない場合、余分なバイトが破棄されることがあります。</target>
        </trans-unit>
        <trans-unit id="e529ccf733a9b5ef8b1c476a20d42d70328c6fe4" translate="yes" xml:space="preserve">
          <source>The function panics if &lt;code&gt;align&lt;/code&gt; is not a power-of-two.</source>
          <target state="translated">&lt;code&gt;align&lt;/code&gt; が2のべき乗でない場合、関数はパニックになります。</target>
        </trans-unit>
        <trans-unit id="b268ef11b8c08ae232cf81ee855904ac47e81a51" translate="yes" xml:space="preserve">
          <source>The function returns &lt;code&gt;true&lt;/code&gt; if there was enough space in the buffer. If there was not enough space then no credentials was appended. Technically, that means this operation adds a control message with the level &lt;code&gt;SOL_SOCKET&lt;/code&gt; and type &lt;code&gt;SCM_CREDENTIALS&lt;/code&gt; or &lt;code&gt;SCM_CREDS&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="571e08cd267873dac614b1a31157ac35e6c1e16a" translate="yes" xml:space="preserve">
          <source>The function returns &lt;code&gt;true&lt;/code&gt; if there was enough space in the buffer. If there was not enough space then no file descriptors was appended. Technically, that means this operation adds a control message with the level &lt;code&gt;SOL_SOCKET&lt;/code&gt; and type &lt;code&gt;SCM_RIGHTS&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c4c57538d04834ae5173c38a3f23dea7037d387" translate="yes" xml:space="preserve">
          <source>The function signature now tells Rust that for some lifetime &lt;code&gt;'a&lt;/code&gt;, the function takes two parameters, both of which are string slices that live at least as long as lifetime &lt;code&gt;'a&lt;/code&gt;. The function signature also tells Rust that the string slice returned from the function will live at least as long as lifetime &lt;code&gt;'a&lt;/code&gt;. In practice, it means that the lifetime of the reference returned by the &lt;code&gt;longest&lt;/code&gt; function is the same as the smaller of the lifetimes of the references passed in. These constraints are what we want Rust to enforce. Remember, when we specify the lifetime parameters in this function signature, we&amp;rsquo;re not changing the lifetimes of any values passed in or returned. Rather, we&amp;rsquo;re specifying that the borrow checker should reject any values that don&amp;rsquo;t adhere to these constraints. Note that the &lt;code&gt;longest&lt;/code&gt; function doesn&amp;rsquo;t need to know exactly how long &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; will live, only that some scope can be substituted for &lt;code&gt;'a&lt;/code&gt; that will satisfy this signature.</source>
          <target state="translated">関数のシグネチャは、あるライフタイム &lt;code&gt;'a&lt;/code&gt; に対して、関数が2つのパラメーターを取ることをRustに伝えます。これらのパラメーターは両方とも、少なくともライフタイム &lt;code&gt;'a&lt;/code&gt; 同じ長さの文字列スライスです。関数のシグネチャは、関数から返された文字列スライスが少なくともライフタイム &lt;code&gt;'a&lt;/code&gt; と同じ長さになることをRustに伝えます。実際には、参照の有効期間が &lt;code&gt;longest&lt;/code&gt; 返されることを意味します関数は、渡された参照の有効期間の短い方と同じです。これらの制約は、Rustに適用させたいものです。この関数のシグネチャでライフタイムパラメータを指定しても、渡されたり返されたりする値のライフタイムは変更されません。むしろ、借用チェッカーがこれらの制約に準拠していない値を拒否するように指定しています。 &lt;code&gt;longest&lt;/code&gt; 関数は、 &lt;code&gt;x&lt;/code&gt; と &lt;code&gt;y&lt;/code&gt; がどれだけ長く存続するかを正確に知る必要がないことに注意してください。このシグネチャを満たす &lt;code&gt;'a&lt;/code&gt; の代わりに、いくつかのスコープを使用できます。</target>
        </trans-unit>
        <trans-unit id="bdcb7a1c11baa13711e61ba40d7e28572f624f97" translate="yes" xml:space="preserve">
          <source>The function that defines a procedural macro takes a &lt;code&gt;TokenStream&lt;/code&gt; as an input and produces a &lt;code&gt;TokenStream&lt;/code&gt; as an output. The &lt;code&gt;TokenStream&lt;/code&gt; type is defined by the &lt;code&gt;proc_macro&lt;/code&gt; crate that is included with Rust and represents a sequence of tokens. This is the core of the macro: the source code that the macro is operating on makes up the input &lt;code&gt;TokenStream&lt;/code&gt;, and the code the macro produces is the output &lt;code&gt;TokenStream&lt;/code&gt;. The function also has an attribute attached to it that specifies which kind of procedural macro we&amp;rsquo;re creating. We can have multiple kinds of procedural macros in the same crate.</source>
          <target state="translated">手続きマクロを定義する関数がかかり &lt;code&gt;TokenStream&lt;/code&gt; を入力とし、生成 &lt;code&gt;TokenStream&lt;/code&gt; を出力として。 &lt;code&gt;TokenStream&lt;/code&gt; のタイプは、によって定義さ &lt;code&gt;proc_macro&lt;/code&gt; 錆に含まれており、トークンのシーケンスを示しているクレート。これがマクロのコアです。マクロが操作しているソースコードが入力 &lt;code&gt;TokenStream&lt;/code&gt; を構成し、マクロが生成するコードが出力 &lt;code&gt;TokenStream&lt;/code&gt; です。この関数には、作成する手続き型マクロの種類を指定する属性も付加されています。同じクレートに複数の種類の手続きマクロを含めることができます。</target>
        </trans-unit>
        <trans-unit id="bf36f24b39c35b8342b2a6251cb9fb9f153537b5" translate="yes" xml:space="preserve">
          <source>The function will never return and will immediately terminate the current process in a platform specific &quot;abnormal&quot; manner.</source>
          <target state="translated">この関数は決して戻りませんし、プラットフォーム固有の「異常」な方法で現在のプロセスを即座に終了させます。</target>
        </trans-unit>
        <trans-unit id="0c78d2fcec6d6debbe4ef0124bd9c3f517852fce" translate="yes" xml:space="preserve">
          <source>The functional record update syntax is only allowed for structs (struct-like enum variants don't qualify, for example). To fix the previous code, rewrite the expression without functional record update syntax:</source>
          <target state="translated">関数レコード更新構文は構造体に対してのみ許可されています (例えば、構造体のような enum バリアントは資格がありません)。先ほどのコードを修正するには、関数的レコード更新構文を使わずに式を書き換えます。</target>
        </trans-unit>
        <trans-unit id="4265d286c4ebab2fa68494c58f7e5472bec6ff8e" translate="yes" xml:space="preserve">
          <source>The functional record update syntax is only allowed for structs. (Struct-like enum variants don't qualify, for example.)</source>
          <target state="translated">関数レコード更新構文は構造体に対してのみ許可されています。(例えば、構造体のような列挙型のバリアントは適格ではありません)。</target>
        </trans-unit>
        <trans-unit id="771371fc3674c285662522a3ce8c91121a8eb8d5" translate="yes" xml:space="preserve">
          <source>The functional record update syntax was used on something other than a struct.</source>
          <target state="translated">関数レコード更新構文が struct 以外のもので使用されました。</target>
        </trans-unit>
        <trans-unit id="3064e7a399dc1562d735ddcb75b4d1c141aa6d18" translate="yes" xml:space="preserve">
          <source>The functionality and syntax of Rust can be extended with custom definitions called macros. They are given names, and invoked through a consistent syntax:&lt;code&gt;some_extension!(...)&lt;/code&gt;.</source>
          <target state="translated">Rustの機能と構文は、マクロと呼ばれるカスタム定義で拡張できます。それらには名前が付けられ、一貫した構文 &lt;code&gt;some_extension!(...)&lt;/code&gt; を通じて呼び出されます。</target>
        </trans-unit>
        <trans-unit id="90f6e5d380880e28cc22176bc452d0a2cfb51f5f" translate="yes" xml:space="preserve">
          <source>The functions inside this struct are only intended be called on the &lt;code&gt;data&lt;/code&gt; pointer of a properly constructed &lt;a href=&quot;struct.rawwaker&quot;&gt;&lt;code&gt;RawWaker&lt;/code&gt;&lt;/a&gt; object from inside the &lt;a href=&quot;struct.rawwaker&quot;&gt;&lt;code&gt;RawWaker&lt;/code&gt;&lt;/a&gt; implementation. Calling one of the contained functions using any other &lt;code&gt;data&lt;/code&gt; pointer will cause undefined behavior.</source>
          <target state="translated">この構造体内の関数は、&lt;a href=&quot;struct.rawwaker&quot;&gt; &lt;code&gt;RawWaker&lt;/code&gt; &lt;/a&gt;実装内から適切に構築された&lt;a href=&quot;struct.rawwaker&quot;&gt; &lt;code&gt;RawWaker&lt;/code&gt; &lt;/a&gt;オブジェクトの &lt;code&gt;data&lt;/code&gt; ポインターでのみ呼び出されることを目的としています。他の &lt;code&gt;data&lt;/code&gt; ポインターを使用して含まれている関数の1つを呼び出すと、未定義の動作が発生します。</target>
        </trans-unit>
        <trans-unit id="5d3fe931a60678fe761ffe2bfb5b03361ca50257" translate="yes" xml:space="preserve">
          <source>The functions inside this struct are only intended to be called on the &lt;code&gt;data&lt;/code&gt; pointer of a properly constructed &lt;a href=&quot;struct.rawwaker&quot;&gt;&lt;code&gt;RawWaker&lt;/code&gt;&lt;/a&gt; object from inside the &lt;a href=&quot;struct.rawwaker&quot;&gt;&lt;code&gt;RawWaker&lt;/code&gt;&lt;/a&gt; implementation. Calling one of the contained functions using any other &lt;code&gt;data&lt;/code&gt; pointer will cause undefined behavior.</source>
          <target state="translated">The functions inside this struct are only intended to be called on the &lt;code&gt;data&lt;/code&gt; pointer of a properly constructed &lt;a href=&quot;struct.rawwaker&quot;&gt; &lt;code&gt;RawWaker&lt;/code&gt; &lt;/a&gt; object from inside the &lt;a href=&quot;struct.rawwaker&quot;&gt; &lt;code&gt;RawWaker&lt;/code&gt; &lt;/a&gt; implementation. Calling one of the contained functions using any other &lt;code&gt;data&lt;/code&gt; pointer will cause undefined behavior.</target>
        </trans-unit>
        <trans-unit id="df0966ed788f9044d3bbbf28ed214b74382d234e" translate="yes" xml:space="preserve">
          <source>The general case</source>
          <target state="translated">一般的なケース</target>
        </trans-unit>
        <trans-unit id="44389c2bb8540f5071dbf79b16d89782c82ab1a7" translate="yes" xml:space="preserve">
          <source>The general categories for numbers (&lt;code&gt;Nd&lt;/code&gt; for decimal digits, &lt;code&gt;Nl&lt;/code&gt; for letter-like numeric characters, and &lt;code&gt;No&lt;/code&gt; for other numeric characters) are specified in the &lt;a href=&quot;https://www.unicode.org/reports/tr44/&quot;&gt;Unicode Character Database&lt;/a&gt;&lt;a href=&quot;https://www.unicode.org/Public/UCD/latest/ucd/UnicodeData.txt&quot;&gt;&lt;code&gt;UnicodeData.txt&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">The general categories for numbers ( &lt;code&gt;Nd&lt;/code&gt; for decimal digits, &lt;code&gt;Nl&lt;/code&gt; for letter-like numeric characters, and &lt;code&gt;No&lt;/code&gt; for other numeric characters) are specified in the &lt;a href=&quot;https://www.unicode.org/reports/tr44/&quot;&gt;Unicode Character Database&lt;/a&gt;&lt;a href=&quot;https://www.unicode.org/Public/UCD/latest/ucd/UnicodeData.txt&quot;&gt; &lt;code&gt;UnicodeData.txt&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="3a1ceefd46a3c1a3651802a4204c4c589bc3c7f6" translate="yes" xml:space="preserve">
          <source>The generated &lt;code&gt;impl&lt;/code&gt; for &lt;code&gt;PartialEq&lt;/code&gt; is equivalent to</source>
          <target state="translated">&lt;code&gt;PartialEq&lt;/code&gt; に対して生成された &lt;code&gt;impl&lt;/code&gt; は、次と同等です。</target>
        </trans-unit>
        <trans-unit id="b683f5ed135731413c6d034116ca989acf594401" translate="yes" xml:space="preserve">
          <source>The generator completed with a return value.</source>
          <target state="translated">ジェネレーターは戻り値で完了しました。</target>
        </trans-unit>
        <trans-unit id="156bc757a593c6f0753b493e20c7157ef75917ae" translate="yes" xml:space="preserve">
          <source>The generator suspended with a value.</source>
          <target state="translated">値で吊り下げられたジェネレーター。</target>
        </trans-unit>
        <trans-unit id="cd45c192be4dc3d892b1ef2f0b632aaff12d6653" translate="yes" xml:space="preserve">
          <source>The generic type &lt;code&gt;T&lt;/code&gt; specified as the type of the &lt;code&gt;item1&lt;/code&gt; and &lt;code&gt;item2&lt;/code&gt; parameters constrains the function such that the concrete type of the value passed as an argument for &lt;code&gt;item1&lt;/code&gt; and &lt;code&gt;item2&lt;/code&gt; must be the same.</source>
          <target state="translated">ジェネリック型 &lt;code&gt;T&lt;/code&gt; をタイプとして指定 &lt;code&gt;item1&lt;/code&gt; と &lt;code&gt;item2&lt;/code&gt; 値の具体的なタイプは、の引数として渡されるように、パラメータ制約関数 &lt;code&gt;item1&lt;/code&gt; と &lt;code&gt;item2&lt;/code&gt; 同じでなければなりません。</target>
        </trans-unit>
        <trans-unit id="1bc01fb3a417f3ff749e03a42ff1490b6833bd43" translate="yes" xml:space="preserve">
          <source>The generic type has to be a SIMD type. Example:</source>
          <target state="translated">汎用型はSIMD型でなければなりません。例を挙げておきます。</target>
        </trans-unit>
        <trans-unit id="e58faf99c3204433210564e65725762b8514494f" translate="yes" xml:space="preserve">
          <source>The given &lt;a href=&quot;../vec/struct.vec&quot;&gt;&lt;code&gt;Vec&lt;/code&gt;&lt;/a&gt;&lt;strong&gt;must&lt;/strong&gt; have one nul byte as its last element. This means it cannot be empty nor have any other nul byte anywhere else.</source>
          <target state="translated">The given &lt;a href=&quot;../vec/struct.vec&quot;&gt; &lt;code&gt;Vec&lt;/code&gt; &lt;/a&gt;&lt;strong&gt;must&lt;/strong&gt; have one nul byte as its last element. This means it cannot be empty nor have any other nul byte anywhere else.</target>
        </trans-unit>
        <trans-unit id="b25fdf4b8d15b07b7d25cece8768d803831d5b3d" translate="yes" xml:space="preserve">
          <source>The given block must have been produced by this allocator, and must be suitable for storing a &lt;code&gt;T&lt;/code&gt; (in terms of alignment as well as minimum and maximum size); otherwise yields undefined behavior.</source>
          <target state="translated">指定されたブロックは、このアロケータによって生成されたものである必要があり、 &lt;code&gt;T&lt;/code&gt; を格納するのに適している必要があります（配置および最小サイズと最大サイズに関して）。そうしないと、未定義の動作が発生します。</target>
        </trans-unit>
        <trans-unit id="3ef7afeafd2e9737676d96a4cbd3c7dc2e9ffdbc" translate="yes" xml:space="preserve">
          <source>The glob operator is often used when testing to bring everything under test into the &lt;code&gt;tests&lt;/code&gt; module; we&amp;rsquo;ll talk about that in the &lt;a href=&quot;ch11-01-writing-tests#how-to-write-tests&quot;&gt;&amp;ldquo;How to Write Tests&amp;rdquo;&lt;/a&gt; section in Chapter 11. The glob operator is also sometimes used as part of the prelude pattern: see &lt;a href=&quot;../std/prelude/index#other-preludes&quot;&gt;the standard library documentation&lt;/a&gt; for more information on that pattern.</source>
          <target state="translated">テスト中のすべてのものを持ってテストするときグロブ演算子は、多くの場合、使用されている &lt;code&gt;tests&lt;/code&gt; モジュール。これについては、第11章の&lt;a href=&quot;ch11-01-writing-tests#how-to-write-tests&quot;&gt;「テストの&lt;/a&gt;記述方法」で説明します。glob演算子は、プレリュードパターンの一部として使用されることもあります。そのパターンの詳細について&lt;a href=&quot;../std/prelude/index#other-preludes&quot;&gt;は、標準ライブラリのドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="edae830710bf3e8598def4042b918afe98bc10c2" translate="yes" xml:space="preserve">
          <source>The global memory allocator.</source>
          <target state="translated">グローバルメモリアロケータです。</target>
        </trans-unit>
        <trans-unit id="ec4646ba1a1fdd24f47203209a1bde5837e4ed73" translate="yes" xml:space="preserve">
          <source>The good news is that if the structure &lt;em&gt;isn&amp;rsquo;t&lt;/em&gt; convenient for others to use from another library, you don&amp;rsquo;t have to rearrange your internal organization: instead, you can re-export items to make a public structure that&amp;rsquo;s different from your private structure by using &lt;code&gt;pub use&lt;/code&gt;. Re-exporting takes a public item in one location and makes it public in another location, as if it were defined in the other location instead.</source>
          <target state="translated">良いニュースは、構造&lt;em&gt;が&lt;/em&gt;他のライブラリから他の人が使用するのに都合が悪い場合は、内部組織を再配置する必要がないことです。代わりに、アイテムを再エクスポートして、プライベート構造とは異なるパブリック構造を作成できます。使用して &lt;code&gt;pub use&lt;/code&gt; 。再エクスポートでは、1つの場所でパブリックアイテムを取得し、別の場所で定義されているかのように、別の場所でパブリックアイテムを公開します。</target>
        </trans-unit>
        <trans-unit id="9e529cd967841dc9eed1fc815f3a4e6b886e5b38" translate="yes" xml:space="preserve">
          <source>The grammar and lexical structure is in blockquotes with either &quot;Lexer&quot; or &quot;Syntax&quot; in &lt;sup&gt;&lt;strong&gt;bold superscript&lt;/strong&gt;&lt;/sup&gt; as the first line.</source>
          <target state="translated">文法と字句構造は、「Lexer」または「Syntax」のいずれかを&lt;sup&gt;&lt;strong&gt;太字の上付き文字&lt;/strong&gt;&lt;/sup&gt;で最初の行としてブロック引用符で囲んでいます。</target>
        </trans-unit>
        <trans-unit id="1f36df1235888018fbfcd5153ebfed60de89aef3" translate="yes" xml:space="preserve">
          <source>The grammar production for reference patterns has to match the token &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; to match a reference to a reference because it is a token by itself, not two &lt;code&gt;&amp;amp;&lt;/code&gt; tokens.</source>
          <target state="translated">参照パターンの文法生成では、トークン &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; を参照への参照と照合する必要があります。これは、2つの &lt;code&gt;&amp;amp;&lt;/code&gt; トークンではなく、それ自体がトークンであるためです。</target>
        </trans-unit>
        <trans-unit id="ecdb2fc042ccb9955819301d5b939d1fbe330ddf" translate="yes" xml:space="preserve">
          <source>The green-threading M:N model requires a larger language runtime to manage threads. As such, the Rust standard library only provides an implementation of 1:1 threading. Because Rust is such a low-level language, there are crates that implement M:N threading if you would rather trade overhead for aspects such as more control over which threads run when and lower costs of context switching, for example.</source>
          <target state="translated">グリーン スレッディングの M:N モデルでは、スレッドを管理するために、より大きな言語ランタイムが必要です。そのため、Rust 標準ライブラリは 1:1 スレッディングの実装しか提供していません。Rustはそのような低レベルの言語であるため、どのスレッドがいつ実行されるかの制御やコンテキスト切り替えのコスト削減などのオーバーヘッドと交換したい場合は、M:N スレッディングを実装するクレートがあります。</target>
        </trans-unit>
        <trans-unit id="ebee4d45f3971e13391e35d52c5a14b0340c1efd" translate="yes" xml:space="preserve">
          <source>The handle for reading from the child's standard error (stderr), if it has been captured.</source>
          <target state="translated">子の標準エラー (stderr)がキャプチャされている場合に、その子の標準エラー (stderr)から読み出すためのハンドル。</target>
        </trans-unit>
        <trans-unit id="71a4cc891c9774ed993ea2778e2ec4e78d46aa4f" translate="yes" xml:space="preserve">
          <source>The handle for reading from the child's standard error (stderr), if it has been captured. You might find it helpful to do</source>
          <target state="translated">子の標準エラー(stderr)がキャプチャされている場合に、その子の標準エラー(stderr)から読み出すためのハンドル。を実行すると便利かもしれません。</target>
        </trans-unit>
        <trans-unit id="fbdaac9b24bb1d15aadc721c15a3031cb1337d9a" translate="yes" xml:space="preserve">
          <source>The handle for reading from the child's standard output (stdout), if it has been captured.</source>
          <target state="translated">子の標準出力 (stdout)がキャプチャされている場合に、その子の標準出力から読み出すためのハンドル。</target>
        </trans-unit>
        <trans-unit id="5b65d5fd43c0bfac48d483d2399323a0f40fd595" translate="yes" xml:space="preserve">
          <source>The handle for reading from the child's standard output (stdout), if it has been captured. You might find it helpful to do</source>
          <target state="translated">子の標準出力 (stdout)がキャプチャされている場合に、その子の標準出力から読み出すためのハンドル。を実行すると便利かもしれません。</target>
        </trans-unit>
        <trans-unit id="d208573c971bb153ba34475100ea53bd4242537e" translate="yes" xml:space="preserve">
          <source>The handle for writing to the child's standard input (stdin), if it has been captured.</source>
          <target state="translated">子の標準入力 (stdin)に書き込むためのハンドル (キャプチャされている場合)。</target>
        </trans-unit>
        <trans-unit id="1008f723c1fd717a94e8a77d7bc5c5ff92ef4700" translate="yes" xml:space="preserve">
          <source>The handle for writing to the child's standard input (stdin), if it has been captured. To avoid partially moving the &lt;code&gt;child&lt;/code&gt; and thus blocking yourself from calling functions on &lt;code&gt;child&lt;/code&gt; while using &lt;code&gt;stdin&lt;/code&gt;, you might find it helpful:</source>
          <target state="translated">The handle for writing to the child's standard input (stdin), if it has been captured. To avoid partially moving the &lt;code&gt;child&lt;/code&gt; and thus blocking yourself from calling functions on &lt;code&gt;child&lt;/code&gt; while using &lt;code&gt;stdin&lt;/code&gt; , you might find it helpful:</target>
        </trans-unit>
        <trans-unit id="a9febcaaba526b722c76a7ab2b805ffd862b6652" translate="yes" xml:space="preserve">
          <source>The hash map is initially created with a capacity of 0, so it will not allocate until it is first inserted into.</source>
          <target state="translated">ハッシュマップは最初は容量0で作成されるので、最初に挿入されるまでは割り当てられません。</target>
        </trans-unit>
        <trans-unit id="ee8ffcf3c4827d14350f3675ea8e7360ee55ee19" translate="yes" xml:space="preserve">
          <source>The hash map will be able to hold at least &lt;code&gt;capacity&lt;/code&gt; elements without reallocating. If &lt;code&gt;capacity&lt;/code&gt; is 0, the hash map will not allocate.</source>
          <target state="translated">ハッシュマップは、再割り当てすることなく、少なくとも &lt;code&gt;capacity&lt;/code&gt; 要素を保持できます。場合は &lt;code&gt;capacity&lt;/code&gt; 0で、ハッシュマップは割り当てません。</target>
        </trans-unit>
        <trans-unit id="0b56c1bdca2b1b95316afe0ecdd6afdabfe66713" translate="yes" xml:space="preserve">
          <source>The hash set is also created with the default initial capacity.</source>
          <target state="translated">ハッシュセットもデフォルトの初期容量で作成されます。</target>
        </trans-unit>
        <trans-unit id="b637bd7a31fb790788f10cfb96ebb867cfd6151d" translate="yes" xml:space="preserve">
          <source>The hash set is initially created with a capacity of 0, so it will not allocate until it is first inserted into.</source>
          <target state="translated">ハッシュセットは最初は容量0で作成されるので、最初に挿入されるまでは割り当てられません。</target>
        </trans-unit>
        <trans-unit id="7b099ba43b1ded8417cfcd0145835bc5cf64881f" translate="yes" xml:space="preserve">
          <source>The hash set will be able to hold at least &lt;code&gt;capacity&lt;/code&gt; elements without reallocating. If &lt;code&gt;capacity&lt;/code&gt; is 0, the hash set will not allocate.</source>
          <target state="translated">ハッシュセットは、再割り当てすることなく、少なくとも &lt;code&gt;capacity&lt;/code&gt; 要素を保持できます。場合は &lt;code&gt;capacity&lt;/code&gt; 0で、ハッシュセットは割り当てません。</target>
        </trans-unit>
        <trans-unit id="d8a4e0ea14c5f027cfeb61abdb7d26fe519f8ab6" translate="yes" xml:space="preserve">
          <source>The hash table implementation is a Rust port of Google's &lt;a href=&quot;https://abseil.io/blog/20180927-swisstables&quot;&gt;SwissTable&lt;/a&gt;. The original C++ version of SwissTable can be found &lt;a href=&quot;https://github.com/abseil/abseil-cpp/blob/master/absl/container/internal/raw_hash_set.h&quot;&gt;here&lt;/a&gt;, and this &lt;a href=&quot;https://www.youtube.com/watch?v=ncHmEUmJZf4&quot;&gt;CppCon talk&lt;/a&gt; gives an overview of how the algorithm works.</source>
          <target state="translated">ハッシュテーブルの実装は、Googleの&lt;a href=&quot;https://abseil.io/blog/20180927-swisstables&quot;&gt;SwissTableの&lt;/a&gt; Rustポートです。元のC ++バージョンのSwissTableは&lt;a href=&quot;https://github.com/abseil/abseil-cpp/blob/master/absl/container/internal/raw_hash_set.h&quot;&gt;こちら&lt;/a&gt;にあります。この&lt;a href=&quot;https://www.youtube.com/watch?v=ncHmEUmJZf4&quot;&gt;CppConの講演で&lt;/a&gt;は、アルゴリズムのしくみの概要を説明しています。</target>
        </trans-unit>
        <trans-unit id="415bb7e03ead8b051422fe277c860425b7ebbf61" translate="yes" xml:space="preserve">
          <source>The hashing algorithm can be replaced on a per-&lt;code&gt;HashMap&lt;/code&gt; basis using the &lt;a href=&quot;#method.default&quot;&gt;&lt;code&gt;default&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#method.with_hasher&quot;&gt;&lt;code&gt;with_hasher&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#method.with_capacity_and_hasher&quot;&gt;&lt;code&gt;with_capacity_and_hasher&lt;/code&gt;&lt;/a&gt; methods. Many alternative algorithms are available on crates.io, such as the &lt;a href=&quot;https://crates.io/crates/fnv&quot;&gt;&lt;code&gt;fnv&lt;/code&gt;&lt;/a&gt; crate.</source>
          <target state="translated">ハッシュアルゴリズムは、&lt;a href=&quot;#method.default&quot;&gt; &lt;code&gt;default&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#method.with_hasher&quot;&gt; &lt;code&gt;with_hasher&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;#method.with_capacity_and_hasher&quot;&gt; &lt;code&gt;with_capacity_and_hasher&lt;/code&gt; &lt;/a&gt;メソッドを使用して、 &lt;code&gt;HashMap&lt;/code&gt; ごとに置き換えることができます。多くの代替アルゴリズムは、次のような、crates.io上で利用可能な&lt;a href=&quot;https://crates.io/crates/fnv&quot;&gt; &lt;code&gt;fnv&lt;/code&gt; &lt;/a&gt;木箱。</target>
        </trans-unit>
        <trans-unit id="142488b9261462c1e559bf3f2ad49337e31e2ac1" translate="yes" xml:space="preserve">
          <source>The hashing algorithm can be replaced on a per-&lt;code&gt;HashMap&lt;/code&gt; basis using the &lt;a href=&quot;../../default/trait.default#tymethod.default&quot;&gt;&lt;code&gt;default&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../struct.hashmap#method.with_hasher&quot;&gt;&lt;code&gt;with_hasher&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../struct.hashmap#method.with_capacity_and_hasher&quot;&gt;&lt;code&gt;with_capacity_and_hasher&lt;/code&gt;&lt;/a&gt; methods. Many alternative algorithms are available on crates.io, such as the &lt;a href=&quot;https://crates.io/crates/fnv&quot;&gt;&lt;code&gt;fnv&lt;/code&gt;&lt;/a&gt; crate.</source>
          <target state="translated">The hashing algorithm can be replaced on a per- &lt;code&gt;HashMap&lt;/code&gt; basis using the &lt;a href=&quot;../../default/trait.default#tymethod.default&quot;&gt; &lt;code&gt;default&lt;/code&gt; &lt;/a&gt;, &lt;a href=&quot;../struct.hashmap#method.with_hasher&quot;&gt; &lt;code&gt;with_hasher&lt;/code&gt; &lt;/a&gt;, and &lt;a href=&quot;../struct.hashmap#method.with_capacity_and_hasher&quot;&gt; &lt;code&gt;with_capacity_and_hasher&lt;/code&gt; &lt;/a&gt; methods. Many alternative algorithms are available on crates.io, such as the &lt;a href=&quot;https://crates.io/crates/fnv&quot;&gt; &lt;code&gt;fnv&lt;/code&gt; &lt;/a&gt; crate.</target>
        </trans-unit>
        <trans-unit id="abc423f45ad76627b7f09d1c195dab7e2c377478" translate="yes" xml:space="preserve">
          <source>The hashing algorithm can be replaced on a per-&lt;code&gt;HashMap&lt;/code&gt; basis using the &lt;a href=&quot;../../default/trait.default#tymethod.default&quot;&gt;&lt;code&gt;default&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;struct.hashmap#method.with_hasher&quot;&gt;&lt;code&gt;with_hasher&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;struct.hashmap#method.with_capacity_and_hasher&quot;&gt;&lt;code&gt;with_capacity_and_hasher&lt;/code&gt;&lt;/a&gt; methods. There are many alternative &lt;a href=&quot;https://crates.io/keywords/hasher&quot;&gt;hashing algorithms available on crates.io&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d12087b42b0b99fc1565d3b697e609feca661351" translate="yes" xml:space="preserve">
          <source>The hashing algorithm can be replaced on a per-&lt;code&gt;HashMap&lt;/code&gt; basis using the &lt;a href=&quot;../default/trait.default#tymethod.default&quot;&gt;&lt;code&gt;default&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;hash_map/struct.hashmap#method.with_hasher&quot;&gt;&lt;code&gt;with_hasher&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;hash_map/struct.hashmap#method.with_capacity_and_hasher&quot;&gt;&lt;code&gt;with_capacity_and_hasher&lt;/code&gt;&lt;/a&gt; methods. There are many alternative &lt;a href=&quot;https://crates.io/keywords/hasher&quot;&gt;hashing algorithms available on crates.io&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="417d67f06aec820d5f0416a0fabba770f0ab5392" translate="yes" xml:space="preserve">
          <source>The hashing algorithm can be replaced on a per-&lt;code&gt;HashMap&lt;/code&gt; basis using the &lt;a href=&quot;../default/trait.default#tymethod.default&quot;&gt;&lt;code&gt;default&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;struct.hashmap#method.with_hasher&quot;&gt;&lt;code&gt;with_hasher&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;struct.hashmap#method.with_capacity_and_hasher&quot;&gt;&lt;code&gt;with_capacity_and_hasher&lt;/code&gt;&lt;/a&gt; methods. Many alternative algorithms are available on crates.io, such as the &lt;a href=&quot;https://crates.io/crates/fnv&quot;&gt;&lt;code&gt;fnv&lt;/code&gt;&lt;/a&gt; crate.</source>
          <target state="translated">The hashing algorithm can be replaced on a per- &lt;code&gt;HashMap&lt;/code&gt; basis using the &lt;a href=&quot;../default/trait.default#tymethod.default&quot;&gt; &lt;code&gt;default&lt;/code&gt; &lt;/a&gt;, &lt;a href=&quot;struct.hashmap#method.with_hasher&quot;&gt; &lt;code&gt;with_hasher&lt;/code&gt; &lt;/a&gt;, and &lt;a href=&quot;struct.hashmap#method.with_capacity_and_hasher&quot;&gt; &lt;code&gt;with_capacity_and_hasher&lt;/code&gt; &lt;/a&gt; methods. Many alternative algorithms are available on crates.io, such as the &lt;a href=&quot;https://crates.io/crates/fnv&quot;&gt; &lt;code&gt;fnv&lt;/code&gt; &lt;/a&gt; crate.</target>
        </trans-unit>
        <trans-unit id="36e2055f1b7671fa46f87316bf9cf49547025536" translate="yes" xml:space="preserve">
          <source>The heart and soul of this module is the &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt; trait. The core of &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt; looks like this:</source>
          <target state="translated">このモジュールの中心となるのは、&lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt;特性です。&lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt;のコアは次のようになります。</target>
        </trans-unit>
        <trans-unit id="f7cf9da11ff393d577012f24f0fd7f9d800c440a" translate="yes" xml:space="preserve">
          <source>The heart of the change is that where &lt;code&gt;&amp;amp;'a Box&amp;lt;SomeTrait&amp;gt;&lt;/code&gt; used to default to &lt;code&gt;&amp;amp;'a Box&amp;lt;SomeTrait+'a&amp;gt;&lt;/code&gt;, it now defaults to &lt;code&gt;&amp;amp;'a Box&amp;lt;SomeTrait+'static&amp;gt;&lt;/code&gt; (here, &lt;code&gt;SomeTrait&lt;/code&gt; is the name of some trait type). Note that the only types which are affected are references to boxes, like &lt;code&gt;&amp;amp;Box&amp;lt;SomeTrait&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;amp;[Box&amp;lt;SomeTrait&amp;gt;]&lt;/code&gt;. More common types like &lt;code&gt;&amp;amp;SomeTrait&lt;/code&gt; or &lt;code&gt;Box&amp;lt;SomeTrait&amp;gt;&lt;/code&gt; are unaffected.</source>
          <target state="translated">変更の中心は、 &lt;code&gt;&amp;amp;'a Box&amp;lt;SomeTrait&amp;gt;&lt;/code&gt; がデフォルトで &lt;code&gt;&amp;amp;'a Box&amp;lt;SomeTrait+'a&amp;gt;&lt;/code&gt; に使用されていた場所でしたが、現在はデフォルトで &lt;code&gt;&amp;amp;'a Box&amp;lt;SomeTrait+'static&amp;gt;&lt;/code&gt; （ここで、 &lt;code&gt;SomeTrait&lt;/code&gt; は一部の特性タイプ）。影響を受けるのは、 &lt;code&gt;&amp;amp;Box&amp;lt;SomeTrait&amp;gt;&lt;/code&gt; や &lt;code&gt;&amp;amp;[Box&amp;lt;SomeTrait&amp;gt;]&lt;/code&gt; などのボックスへの参照のみです。 &lt;code&gt;&amp;amp;SomeTrait&lt;/code&gt; や &lt;code&gt;Box&amp;lt;SomeTrait&amp;gt;&lt;/code&gt; などのより一般的なタイプは影響を受けません。</target>
        </trans-unit>
        <trans-unit id="8b80292943879aaefba4fcd89176f25fb4fe681b" translate="yes" xml:space="preserve">
          <source>The help text reveals that the return type needs a generic lifetime parameter on it because Rust can&amp;rsquo;t tell whether the reference being returned refers to &lt;code&gt;x&lt;/code&gt; or &lt;code&gt;y&lt;/code&gt;. Actually, we don&amp;rsquo;t know either, because the &lt;code&gt;if&lt;/code&gt; block in the body of this function returns a reference to &lt;code&gt;x&lt;/code&gt; and the &lt;code&gt;else&lt;/code&gt; block returns a reference to &lt;code&gt;y&lt;/code&gt;!</source>
          <target state="translated">Rustは返された参照が &lt;code&gt;x&lt;/code&gt; を参照しているか &lt;code&gt;y&lt;/code&gt; を参照しているかを判別できないため、ヘルプテキストから、戻り値の型にはジェネリックライフタイムパラメーターが必要であることがわかります。この関数の本体の &lt;code&gt;if&lt;/code&gt; ブロックは &lt;code&gt;x&lt;/code&gt; への参照を返し、 &lt;code&gt;else&lt;/code&gt; ブロックは &lt;code&gt;y&lt;/code&gt; への参照を返すため、実際にはどちらもわかりません。</target>
        </trans-unit>
        <trans-unit id="d58a9f4bf1938432cc316db1e69ad2bfca3de5d4" translate="yes" xml:space="preserve">
          <source>The highest valid code point a &lt;code&gt;char&lt;/code&gt; can have.</source>
          <target state="translated">&lt;code&gt;char&lt;/code&gt; が持つことができる最も高い有効なコードポイント。</target>
        </trans-unit>
        <trans-unit id="2c0d414ff9adc0b33c0f3d50d800e4ef1b9ec6d2" translate="yes" xml:space="preserve">
          <source>The hook is provided with a &lt;code&gt;Layout&lt;/code&gt; struct which contains information about the allocation that failed.</source>
          <target state="translated">フックには、失敗した割り当てに関する情報を含む &lt;code&gt;Layout&lt;/code&gt; 構造体が付属しています。</target>
        </trans-unit>
        <trans-unit id="c05a8db594383eaa649c0ea9f1230d31e2d9d207" translate="yes" xml:space="preserve">
          <source>The hook is provided with a &lt;code&gt;PanicInfo&lt;/code&gt; struct which contains information about the origin of the panic, including the payload passed to &lt;code&gt;panic!&lt;/code&gt; and the source code location from which the panic originated.</source>
          <target state="translated">フックには、パニックに渡されたペイロードを含む、パニックの発生元に関する情報を含む &lt;code&gt;PanicInfo&lt;/code&gt; 構造体が用意されています &lt;code&gt;panic!&lt;/code&gt; パニックが発生したソースコードの場所。</target>
        </trans-unit>
        <trans-unit id="c5e73d7bf13606a783c42b98ca4eecc2c703d2de" translate="yes" xml:space="preserve">
          <source>The identifier is more than one character. &lt;code&gt;_&lt;/code&gt; alone is not an identifier.</source>
          <target state="translated">識別子が複数の文字です。 &lt;code&gt;_&lt;/code&gt; だけでは識別子ではありません。</target>
        </trans-unit>
        <trans-unit id="714243f838efe98c2e10bdbb7f1411daa3ecd7a0" translate="yes" xml:space="preserve">
          <source>The identifier is the name of the constant used in the path. The type is the type that the definition has to implement.</source>
          <target state="translated">識別子はパスで使用される定数の名前です。typeは定義が実装しなければならない型です。</target>
        </trans-unit>
        <trans-unit id="3a2c9033b8c31ad61606f019cbc00c4420b891b9" translate="yes" xml:space="preserve">
          <source>The identifier is the name of the declared type alias. The optional trait bounds must be fulfilled by the implementations of the type alias.</source>
          <target state="translated">識別子は宣言された型のエイリアスの名前です。オプションの trait バウンズは、型エイリアスの実装によって満たされなければなりません。</target>
        </trans-unit>
        <trans-unit id="1c83f053af5e622145b3145a7189cafa0c9167a0" translate="yes" xml:space="preserve">
          <source>The identifier is the name of the function. The generics, parameter list, return type, and where clause of the associated function must be the same as the associated function declarations's.</source>
          <target state="translated">識別子は関数名です。関連する関数のジェネリック、パラメータリスト、戻り値の型、そしてwhere節は、関連する関数の宣言と同じでなければなりません。</target>
        </trans-unit>
        <trans-unit id="c54b94a826db4a7c6ce8d411476041b69555f1aa" translate="yes" xml:space="preserve">
          <source>The identity function.</source>
          <target state="translated">アイデンティティ関数。</target>
        </trans-unit>
        <trans-unit id="a0f93995f216b848984f480fd53d07ae2b2c30e6" translate="yes" xml:space="preserve">
          <source>The idiomatic way to write a &lt;a href=&quot;trait.iterator#method.map&quot;&gt;&lt;code&gt;map&lt;/code&gt;&lt;/a&gt; for its side effects is to use a &lt;code&gt;for&lt;/code&gt; loop instead:</source>
          <target state="translated">副作用の&lt;a href=&quot;trait.iterator#method.map&quot;&gt; &lt;code&gt;map&lt;/code&gt; &lt;/a&gt;を書く慣用的な方法は、代わりに &lt;code&gt;for&lt;/code&gt; ループを使用することです。</target>
        </trans-unit>
        <trans-unit id="20b4ace5ebaf142e4e8addc0656248d8010dca32" translate="yes" xml:space="preserve">
          <source>The idiomatic way to write a &lt;a href=&quot;trait.iterator#method.map&quot;&gt;&lt;code&gt;map&lt;/code&gt;&lt;/a&gt; for its side effects is to use a &lt;code&gt;for&lt;/code&gt; loop or call the &lt;a href=&quot;trait.iterator#method.for_each&quot;&gt;&lt;code&gt;for_each&lt;/code&gt;&lt;/a&gt; method:</source>
          <target state="translated">The idiomatic way to write a &lt;a href=&quot;trait.iterator#method.map&quot;&gt; &lt;code&gt;map&lt;/code&gt; &lt;/a&gt; for its side effects is to use a &lt;code&gt;for&lt;/code&gt; loop or call the &lt;a href=&quot;trait.iterator#method.for_each&quot;&gt; &lt;code&gt;for_each&lt;/code&gt; &lt;/a&gt; method:</target>
        </trans-unit>
        <trans-unit id="1dc3122c538d92098d293869587f4b3a0100941a" translate="yes" xml:space="preserve">
          <source>The implementation ensures that the iterator will return exactly &lt;code&gt;len()&lt;/code&gt; more times a &lt;a href=&quot;../option/enum.option#variant.Some&quot;&gt;&lt;code&gt;Some(T)&lt;/code&gt;&lt;/a&gt; value, before returning &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt;. This method has a default implementation, so you usually should not implement it directly. However, if you can provide a more efficient implementation, you can do so. See the &lt;a href=&quot;trait.exactsizeiterator&quot;&gt;trait-level&lt;/a&gt; docs for an example.</source>
          <target state="translated">The implementation ensures that the iterator will return exactly &lt;code&gt;len()&lt;/code&gt; more times a &lt;a href=&quot;../option/enum.option#variant.Some&quot;&gt; &lt;code&gt;Some(T)&lt;/code&gt; &lt;/a&gt; value, before returning &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt;. This method has a default implementation, so you usually should not implement it directly. However, if you can provide a more efficient implementation, you can do so. See the &lt;a href=&quot;trait.exactsizeiterator&quot;&gt;trait-level&lt;/a&gt; docs for an example.</target>
        </trans-unit>
        <trans-unit id="a17be86477c61cc7613b2ed105a5af337a27c206" translate="yes" xml:space="preserve">
          <source>The implementation of &lt;code&gt;Display&lt;/code&gt; uses &lt;code&gt;self.0&lt;/code&gt; to access the inner &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt;, because &lt;code&gt;Wrapper&lt;/code&gt; is a tuple struct and &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; is the item at index 0 in the tuple. Then we can use the functionality of the &lt;code&gt;Display&lt;/code&gt; type on &lt;code&gt;Wrapper&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Wrapper&lt;/code&gt; はタプル構造体であり、 &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; はタプルのインデックス0にあるアイテムであるため、 &lt;code&gt;Display&lt;/code&gt; の実装は &lt;code&gt;self.0&lt;/code&gt; を使用して内部 &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; にアクセスします。次に、 &lt;code&gt;Wrapper&lt;/code&gt; で &lt;code&gt;Display&lt;/code&gt; タイプの機能を使用できます。</target>
        </trans-unit>
        <trans-unit id="64d2ca9bc84ea7c438a453f8d81beffdb2cea48b" translate="yes" xml:space="preserve">
          <source>The implementation of &lt;code&gt;get&lt;/code&gt; relies in particular on identical implementations of &lt;code&gt;Hash&lt;/code&gt; by determining the key&amp;rsquo;s hash bucket by calling &lt;code&gt;Hash::hash&lt;/code&gt; on the &lt;code&gt;Q&lt;/code&gt; value even though it inserted the key based on the hash value calculated from the &lt;code&gt;K&lt;/code&gt; value.</source>
          <target state="translated">&lt;code&gt;get&lt;/code&gt; の実装は、特に、 &lt;code&gt;K&lt;/code&gt; 値から計算されたハッシュ値に基づいてキーを挿入した場合でも、 &lt;code&gt;Q&lt;/code&gt; 値に対して &lt;code&gt;Hash::hash&lt;/code&gt; を呼び出してキーのハッシュバケットを決定することにより、 &lt;code&gt;Hash&lt;/code&gt; 同一の実装に依存しています。</target>
        </trans-unit>
        <trans-unit id="9ddcc339944cbb72b0b66f63ad73cbbefd5f13bf" translate="yes" xml:space="preserve">
          <source>The implementation of this function must make sure to release any resources that are associated with this instance of a &lt;a href=&quot;struct.rawwaker&quot;&gt;&lt;code&gt;RawWaker&lt;/code&gt;&lt;/a&gt; and associated task.</source>
          <target state="translated">この関数の実装は、&lt;a href=&quot;struct.rawwaker&quot;&gt; &lt;code&gt;RawWaker&lt;/code&gt; の&lt;/a&gt;このインスタンスと関連付けられたタスクに関連付けられているすべてのリソースを確実に解放する必要があります。</target>
        </trans-unit>
        <trans-unit id="b2b66f02783344ac4bc18a2fce3954484c2ba8e0" translate="yes" xml:space="preserve">
          <source>The implementation of this function must retain all resources that are required for this additional instance of a &lt;a href=&quot;struct.rawwaker&quot;&gt;&lt;code&gt;RawWaker&lt;/code&gt;&lt;/a&gt; and associated task. Calling &lt;code&gt;wake&lt;/code&gt; on the resulting &lt;a href=&quot;struct.rawwaker&quot;&gt;&lt;code&gt;RawWaker&lt;/code&gt;&lt;/a&gt; should result in a wakeup of the same task that would have been awoken by the original &lt;a href=&quot;struct.rawwaker&quot;&gt;&lt;code&gt;RawWaker&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この関数の実装は、&lt;a href=&quot;struct.rawwaker&quot;&gt; &lt;code&gt;RawWaker&lt;/code&gt; の&lt;/a&gt;この追加インスタンスと関連タスクに必要なすべてのリソースを保持する必要があります。結果の&lt;a href=&quot;struct.rawwaker&quot;&gt; &lt;code&gt;RawWaker&lt;/code&gt; で&lt;/a&gt; &lt;code&gt;wake&lt;/code&gt; を呼び出すと、元の&lt;a href=&quot;struct.rawwaker&quot;&gt; &lt;code&gt;RawWaker&lt;/code&gt; &lt;/a&gt;によって起こされたものと同じタスクが起動されます。</target>
        </trans-unit>
        <trans-unit id="497d98f3948b6fc88a56b8970a7685389e682fb3" translate="yes" xml:space="preserve">
          <source>The implementation of waking a task on an executor.</source>
          <target state="translated">実行者にタスクを覚醒させる実装。</target>
        </trans-unit>
        <trans-unit id="d439e7f4f40d7bfe18d46ea25d8affbdc7117648" translate="yes" xml:space="preserve">
          <source>The implementation using the state pattern is easy to extend to add more functionality. To see the simplicity of maintaining code that uses the state pattern, try a few of these suggestions:</source>
          <target state="translated">状態パターンを使用した実装は、より多くの機能を追加するために拡張するのが簡単です。状態パターンを使用したコードのメンテナンスの簡単さを確認するには、これらの提案のいくつかを試してみてください。</target>
        </trans-unit>
        <trans-unit id="57e5372af92c8ddd71806b33dbda4afe86f48e3e" translate="yes" xml:space="preserve">
          <source>The implementing type within a &lt;a href=&quot;keyword.trait&quot;&gt;&lt;code&gt;trait&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;keyword.impl&quot;&gt;&lt;code&gt;impl&lt;/code&gt;&lt;/a&gt; block, or the current type within a type definition.</source>
          <target state="translated">内部実装型&lt;a href=&quot;keyword.trait&quot;&gt; &lt;code&gt;trait&lt;/code&gt; &lt;/a&gt;又は&lt;a href=&quot;keyword.impl&quot;&gt; &lt;code&gt;impl&lt;/code&gt; &lt;/a&gt;ブロック、またはタイプ定義内電流型。</target>
        </trans-unit>
        <trans-unit id="9972687dbff5abd8f4ecb962303ef66ce3678542" translate="yes" xml:space="preserve">
          <source>The index ranges returned by this trait are not required to exactly match those of the forward search in reverse.</source>
          <target state="translated">この形質によって返されるインデックス範囲は、逆方向の順方向検索のインデックス範囲と完全に一致する必要はありません。</target>
        </trans-unit>
        <trans-unit id="fb8e7f22599fed31a57edfd5bc4f1d4fe1de7766" translate="yes" xml:space="preserve">
          <source>The indexed operand of an array indexing expression.</source>
          <target state="translated">配列の添字式の添字オペランド。</target>
        </trans-unit>
        <trans-unit id="8a276159145a3d291ba8902040d397309a6a3910" translate="yes" xml:space="preserve">
          <source>The inferred type asks the compiler to infer the type if possible based on the surrounding information available. It cannot be used in item signatures. It is often used in generic arguments:</source>
          <target state="translated">inferred type は、利用可能な周囲の情報に基づいて可能な限り型を推論するようにコンパイラに要求します。これはアイテムシグネチャでは使用できません。一般的な引数で使用されることが多いです。</target>
        </trans-unit>
        <trans-unit id="1b63924c7210ee52ef50642e7b6012f573489c1d" translate="yes" xml:space="preserve">
          <source>The inherent methods of &lt;code&gt;Rc&lt;/code&gt; are all associated functions, which means that you have to call them as e.g., &lt;a href=&quot;#method.get_mut&quot;&gt;&lt;code&gt;Rc::get_mut(&amp;amp;mut value)&lt;/code&gt;&lt;/a&gt; instead of &lt;code&gt;value.get_mut()&lt;/code&gt;. This avoids conflicts with methods of the inner type &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">固有の方法 &lt;code&gt;Rc&lt;/code&gt; は、すべてあなたが例えば、としてそれらを呼び出す必要があることを意味関連する機能、ある&lt;a href=&quot;#method.get_mut&quot;&gt; &lt;code&gt;Rc::get_mut(&amp;amp;mut value)&lt;/code&gt; &lt;/a&gt;の代わりに &lt;code&gt;value.get_mut()&lt;/code&gt; 。これにより、内部型 &lt;code&gt;T&lt;/code&gt; のメソッドとの競合が回避されます。</target>
        </trans-unit>
        <trans-unit id="cdd48be31dd031602338fabd7f9987080846befd" translate="yes" xml:space="preserve">
          <source>The inherent methods of &lt;code&gt;Rc&lt;/code&gt; are all associated functions, which means that you have to call them as e.g., &lt;a href=&quot;struct.rc#method.get_mut&quot;&gt;&lt;code&gt;Rc::get_mut(&amp;amp;mut value)&lt;/code&gt;&lt;/a&gt; instead of &lt;code&gt;value.get_mut()&lt;/code&gt;. This avoids conflicts with methods of the inner type &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Rc&lt;/code&gt; の固有のメソッドはすべて関連する関数です。 &lt;code&gt;value.get_mut()&lt;/code&gt; 、value.get_mut（）ではなく&lt;a href=&quot;struct.rc#method.get_mut&quot;&gt; &lt;code&gt;Rc::get_mut(&amp;amp;mut value)&lt;/code&gt; &lt;/a&gt;ように呼び出す必要があります。これにより、内部タイプ &lt;code&gt;T&lt;/code&gt; のメソッドとの競合が回避されます。</target>
        </trans-unit>
        <trans-unit id="e9a135c5b11a6bdd25cebdf7bee36ffe6f4a888e" translate="yes" xml:space="preserve">
          <source>The initial value is the value the accumulator will have on the first call.</source>
          <target state="translated">初期値は、最初の呼び出し時にアキュムレータが持つ値です。</target>
        </trans-unit>
        <trans-unit id="05cd051eb5f45770d700d15bc2c291712fe7349d" translate="yes" xml:space="preserve">
          <source>The initial value is the value the accumulator will have on the first call. If applying the closure succeeded against every element of the iterator, &lt;code&gt;try_fold()&lt;/code&gt; returns the final accumulator as success.</source>
          <target state="translated">初期値は、アキュムレータが最初の呼び出しで持つ値です。イテレータのすべての要素に対してクロージャの適用が成功した場合、 &lt;code&gt;try_fold()&lt;/code&gt; は最後のアキュムレータを成功として返します。</target>
        </trans-unit>
        <trans-unit id="3215ce085488e89e5b23ed55a5028caf27292850" translate="yes" xml:space="preserve">
          <source>The initializer expression.</source>
          <target state="translated">イニシャライザ式。</target>
        </trans-unit>
        <trans-unit id="005959a16886789f6cb716c2b5dc5bbb0daa12f9" translate="yes" xml:space="preserve">
          <source>The initializer of</source>
          <target state="translated">のイニシャライザは</target>
        </trans-unit>
        <trans-unit id="37009e2d28047124f91d44e005708dbff225d4db" translate="yes" xml:space="preserve">
          <source>The initializer of a &lt;a href=&quot;statements#let-statements&quot;&gt;let statement&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;statements#let-statements&quot;&gt;letステートメント&lt;/a&gt;の初期化子。</target>
        </trans-unit>
        <trans-unit id="b9db1fa1a8ca22dc3f22f48be8f2cc5fef02b51c" translate="yes" xml:space="preserve">
          <source>The input &lt;a href=&quot;https://doc.rust-lang.org/proc_macro/struct.TokenStream.html&quot;&gt;&lt;code&gt;TokenStream&lt;/code&gt;&lt;/a&gt; is the token stream of the item that has the &lt;code&gt;derive&lt;/code&gt; attribute on it. The output &lt;a href=&quot;https://doc.rust-lang.org/proc_macro/struct.TokenStream.html&quot;&gt;&lt;code&gt;TokenStream&lt;/code&gt;&lt;/a&gt; must be a set of items that are then appended to the &lt;a href=&quot;items/modules&quot;&gt;module&lt;/a&gt; or &lt;a href=&quot;expressions/block-expr&quot;&gt;block&lt;/a&gt; that the item from the input &lt;a href=&quot;https://doc.rust-lang.org/proc_macro/struct.TokenStream.html&quot;&gt;&lt;code&gt;TokenStream&lt;/code&gt;&lt;/a&gt; is in.</source>
          <target state="translated">入力&lt;a href=&quot;https://doc.rust-lang.org/proc_macro/struct.TokenStream.html&quot;&gt; &lt;code&gt;TokenStream&lt;/code&gt; &lt;/a&gt;は、 &lt;code&gt;derive&lt;/code&gt; 属性を持つアイテムのトークンストリームです。出力&lt;a href=&quot;https://doc.rust-lang.org/proc_macro/struct.TokenStream.html&quot;&gt; &lt;code&gt;TokenStream&lt;/code&gt; &lt;/a&gt;は、入力&lt;a href=&quot;https://doc.rust-lang.org/proc_macro/struct.TokenStream.html&quot;&gt; &lt;code&gt;TokenStream&lt;/code&gt; &lt;/a&gt;からのアイテムが存在する&lt;a href=&quot;items/modules&quot;&gt;モジュール&lt;/a&gt;または&lt;a href=&quot;expressions/block-expr&quot;&gt;ブロックに&lt;/a&gt;追加される一連のアイテムである必要があります。</target>
        </trans-unit>
        <trans-unit id="3584f2f431d39b47066e06bb0ba2d085c77c3d1e" translate="yes" xml:space="preserve">
          <source>The input iterator &lt;code&gt;replace_with&lt;/code&gt; is only consumed when the &lt;code&gt;Splice&lt;/code&gt; value is dropped.</source>
          <target state="translated">入力イテレーター &lt;code&gt;replace_with&lt;/code&gt; は、 &lt;code&gt;Splice&lt;/code&gt; 値がドロップされたときにのみ消費されます。</target>
        </trans-unit>
        <trans-unit id="5b45dbdf7cc3adb9c8ff29ad732df76183eebf5c" translate="yes" xml:space="preserve">
          <source>The installation of Rust also includes a copy of the documentation locally, so you can read it offline. Run &lt;code&gt;rustup doc&lt;/code&gt; to open the local documentation in your browser.</source>
          <target state="translated">The installation of Rust also includes a copy of the documentation locally, so you can read it offline. Run &lt;code&gt;rustup doc&lt;/code&gt; to open the local documentation in your browser.</target>
        </trans-unit>
        <trans-unit id="c198c64d60547785c3da652e9852896f77fa00d7" translate="yes" xml:space="preserve">
          <source>The installation script automatically adds Rust to your system PATH after your next login. If you want to start using Rust right away instead of restarting your terminal, run the following command in your shell to add Rust to your system PATH manually:</source>
          <target state="translated">インストールスクリプトは、次回のログイン後、自動的にシステムのPATHにRustを追加します。ターミナルを再起動せずにすぐにRustの使用を開始したい場合は、以下のコマンドをシェルで実行して、システムのPATHにRustを手動で追加してください。</target>
        </trans-unit>
        <trans-unit id="a382c15195dddde8bba4823548e75c4adc802c3c" translate="yes" xml:space="preserve">
          <source>The installer also includes a copy of the documentation locally, so you can read it offline. Run &lt;code&gt;rustup doc&lt;/code&gt; to open the local documentation in your browser.</source>
          <target state="translated">インストーラーにはドキュメントのコピーもローカルに含まれているため、オフラインで読むことができます。 &lt;code&gt;rustup doc&lt;/code&gt; を実行して、ブラウザでローカルドキュメントを開きます。</target>
        </trans-unit>
        <trans-unit id="eb4481a6d93414e0e2ed7586ff1e0910b51585be" translate="yes" xml:space="preserve">
          <source>The integral types provide inherent methods to allow programmers explicitly to perform wrapping arithmetic. For example, &lt;code&gt;i32::wrapping_add&lt;/code&gt; provides two's complement, wrapping addition.</source>
          <target state="translated">整数型は、プログラマーが明示的に折り返し演算を実行できるようにする固有のメソッドを提供します。たとえば、 &lt;code&gt;i32::wrapping_add&lt;/code&gt; は2の補数であるラッピング加算を提供します。</target>
        </trans-unit>
        <trans-unit id="a2f153ef163d784268a26bcb041875def3bd700b" translate="yes" xml:space="preserve">
          <source>The integration tests section starts with the line &lt;code&gt;Running target/debug/deps/integration_test-ce99bcc2479f4607&lt;/code&gt; (the hash at the end of your output will be different). Next, there is a line for each test function in that integration test and a summary line for the results of the integration test just before the &lt;code&gt;Doc-tests adder&lt;/code&gt; section starts.</source>
          <target state="translated">統合テストのセクションは、 &lt;code&gt;Running target/debug/deps/integration_test-ce99bcc2479f4607&lt;/code&gt; という行で始まります（出力の最後のハッシュは異なります）。次に、その統合テストの各テスト関数の行と、 &lt;code&gt;Doc-tests adder&lt;/code&gt; セクションが始まる直前の統合テストの結果の要約行があります。</target>
        </trans-unit>
        <trans-unit id="9c8b39dac0f0603ab0205cf2bfd1df712c7506c4" translate="yes" xml:space="preserve">
          <source>The intention is that the underlying data is only valid for the lifetime &lt;code&gt;'a&lt;/code&gt;, so &lt;code&gt;Slice&lt;/code&gt; should not outlive &lt;code&gt;'a&lt;/code&gt;. However, this intent is not expressed in the code, since there are no uses of the lifetime &lt;code&gt;'a&lt;/code&gt; and hence it is not clear what data it applies to. We can correct this by telling the compiler to act &lt;em&gt;as if&lt;/em&gt; the &lt;code&gt;Slice&lt;/code&gt; struct contained a reference &lt;code&gt;&amp;amp;'a T&lt;/code&gt;:</source>
          <target state="translated">その意図は、基礎となるデータは、寿命のためにのみ有効であるということである &lt;code&gt;'a&lt;/code&gt; ので、 &lt;code&gt;Slice&lt;/code&gt; すべきで長生きありません &lt;code&gt;'a&lt;/code&gt; 。ただし、この意図はコードでは表現されません。これは、ライフタイム &lt;code&gt;'a&lt;/code&gt; は使用されないため、適用されるデータが明確ではないためです。これを修正&lt;em&gt;するに&lt;/em&gt;は、 &lt;code&gt;Slice&lt;/code&gt; 構造体に参照 &lt;code&gt;&amp;amp;'a T&lt;/code&gt; 含ま&lt;em&gt;れているかのよう&lt;/em&gt;に動作する&lt;em&gt;よう&lt;/em&gt;コンパイラーに指示します。</target>
        </trans-unit>
        <trans-unit id="c6ec3ee71b429b0c861d2949630c53c1d4103ef2" translate="yes" xml:space="preserve">
          <source>The internal algorithm is not specified, and so it and its hashes should not be relied upon over releases.</source>
          <target state="translated">内部アルゴリズムは指定されていないので、それとそのハッシュはリリースに依存すべきではありません。</target>
        </trans-unit>
        <trans-unit id="c411eb080c209397146b14ba5a4bb34e75cec138" translate="yes" xml:space="preserve">
          <source>The internal buffer is written out before returning the writer.</source>
          <target state="translated">内部バッファを書き出してからライターを返す。</target>
        </trans-unit>
        <trans-unit id="06716cd4a735b362271ebfeb2853eaa89b39ee1b" translate="yes" xml:space="preserve">
          <source>The internal iterator over the argument has not been advanced by the time the first &lt;code&gt;{}&lt;/code&gt; is seen, so it prints the first argument. Then upon reaching the second &lt;code&gt;{}&lt;/code&gt;, the iterator has advanced forward to the second argument. Essentially, parameters that explicitly name their argument do not affect parameters that do not name an argument in terms of positional specifiers.</source>
          <target state="translated">The internal iterator over the argument has not been advanced by the time the first &lt;code&gt;{}&lt;/code&gt; is seen, so it prints the first argument. Then upon reaching the second &lt;code&gt;{}&lt;/code&gt; , the iterator has advanced forward to the second argument. Essentially, parameters that explicitly name their argument do not affect parameters that do not name an argument in terms of positional specifiers.</target>
        </trans-unit>
        <trans-unit id="ce78ff22afeda7a6f00a6ca8444175752d52c4ff" translate="yes" xml:space="preserve">
          <source>The internal iterator over the argument has not been advanced by the time the first &lt;code&gt;{}&lt;/code&gt; is seen, so it prints the first argument. Then upon reaching the second &lt;code&gt;{}&lt;/code&gt;, the iterator has advanced forward to the second argument. Essentially, parameters which explicitly name their argument do not affect parameters which do not name an argument in terms of positional specifiers.</source>
          <target state="translated">引数に対する内部イテレータは、最初の &lt;code&gt;{}&lt;/code&gt; が見つかるまでには進んでいないため、最初の引数を出力します。次に、2番目の &lt;code&gt;{}&lt;/code&gt; に到達すると、イテレータは2番目の引数に進みます。基本的に、引数に明示的に名前を付けるパラメーターは、位置指定子に関して引数に名前を付けないパラメーターには影響しません。</target>
        </trans-unit>
        <trans-unit id="2c46dda1624f616f75baf2894d6d6e54ab12f317" translate="yes" xml:space="preserve">
          <source>The inverse of this method is &lt;a href=&quot;#method.from_utf8&quot;&gt;&lt;code&gt;from_utf8&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このメソッドの逆は&lt;a href=&quot;#method.from_utf8&quot;&gt; &lt;code&gt;from_utf8&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="dbc762f2fb2ae9279c20887c42fbcb66ef8ed68d" translate="yes" xml:space="preserve">
          <source>The inverse of this method is &lt;a href=&quot;struct.string#method.as_bytes&quot;&gt;&lt;code&gt;as_bytes&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このメソッドの逆は&lt;a href=&quot;struct.string#method.as_bytes&quot;&gt; &lt;code&gt;as_bytes&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="2ef5a2c8bf418a538796f28bdc7b3ed8b4214bec" translate="yes" xml:space="preserve">
          <source>The inverse of this method is &lt;a href=&quot;struct.string#method.from_utf8&quot;&gt;&lt;code&gt;from_utf8&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">The inverse of this method is &lt;a href=&quot;struct.string#method.from_utf8&quot;&gt; &lt;code&gt;from_utf8&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="00033d91f205bb0450cf7878d82bad2da288007b" translate="yes" xml:space="preserve">
          <source>The inverse of this method is &lt;a href=&quot;struct.string#method.into_bytes&quot;&gt;&lt;code&gt;into_bytes&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">The inverse of this method is &lt;a href=&quot;struct.string#method.into_bytes&quot;&gt; &lt;code&gt;into_bytes&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="0d5754a49ec3bccb9874e0108120d01b2fee9ec9" translate="yes" xml:space="preserve">
          <source>The issue can be resolved by changing the associated type:</source>
          <target state="translated">この問題は、関連するタイプを変更することで解決できます。</target>
        </trans-unit>
        <trans-unit id="2057c4ad17ebd71c1902c8394bd83a7474bbd6d5" translate="yes" xml:space="preserve">
          <source>The issue in this case is that &lt;code&gt;foo&lt;/code&gt; is defined as accepting a &lt;code&gt;Fn&lt;/code&gt; with one argument of type &lt;code&gt;String&lt;/code&gt;, but the closure we attempted to pass to it requires one arguments of type &lt;code&gt;usize&lt;/code&gt;.</source>
          <target state="translated">この場合の問題は、 &lt;code&gt;foo&lt;/code&gt; が &lt;code&gt;String&lt;/code&gt; 型の引数を1つ持つ &lt;code&gt;Fn&lt;/code&gt; を受け入れるものとして定義されていることですが、それに渡そうとしたクロージャには &lt;code&gt;usize&lt;/code&gt; 型の引数が1つ必要です。</target>
        </trans-unit>
        <trans-unit id="c02789dc84a563007f1b001c6388d43c1756fd64" translate="yes" xml:space="preserve">
          <source>The issue with the tuple code in Listing 4-5 is that we have to return the &lt;code&gt;String&lt;/code&gt; to the calling function so we can still use the &lt;code&gt;String&lt;/code&gt; after the call to &lt;code&gt;calculate_length&lt;/code&gt;, because the &lt;code&gt;String&lt;/code&gt; was moved into &lt;code&gt;calculate_length&lt;/code&gt;.</source>
          <target state="translated">リスト4-5のタプルコードの問題は、私たちが返す必要があることである &lt;code&gt;String&lt;/code&gt; 、我々はまだ使用できるように呼び出す関数に &lt;code&gt;String&lt;/code&gt; 呼び出し後 &lt;code&gt;calculate_length&lt;/code&gt; ので、 &lt;code&gt;String&lt;/code&gt; の中に移動された &lt;code&gt;calculate_length&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1013a496d8eb9ca295e23a82f7ffaec17e1ba13a" translate="yes" xml:space="preserve">
          <source>The issue with this code is evident in the signature of &lt;code&gt;area&lt;/code&gt;:</source>
          <target state="translated">このコードの問題は、 &lt;code&gt;area&lt;/code&gt; の署名で明らかです：</target>
        </trans-unit>
        <trans-unit id="e382444929f7f8a00ff868439efd08f11891e2df" translate="yes" xml:space="preserve">
          <source>The items of marker traits cannot be overridden, so there's no need to have them when they cannot be changed per-type anyway. If you wanted them for ergonomic reasons, consider making an extension trait instead.</source>
          <target state="translated">マーカー形質の項目はオーバーライドできないので、どうせ型ごとに変更できないのであれば持つ必要はありません。人間工学的な理由でそれらが欲しかったのであれば、代わりに拡張形質を作ることを検討してください。</target>
        </trans-unit>
        <trans-unit id="5e506ce8ee681f90bb70782d8bb4d2dad5bd0685" translate="yes" xml:space="preserve">
          <source>The iterator element type is &lt;a href=&quot;../path/struct.pathbuf&quot;&gt;&lt;code&gt;PathBuf&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">イテレータ要素のタイプは&lt;a href=&quot;../path/struct.pathbuf&quot;&gt; &lt;code&gt;PathBuf&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="6824e2e2ab7393d35f45cbd58638289d41c35be1" translate="yes" xml:space="preserve">
          <source>The iterator must produce exactly the number of elements it reported or diverge before reaching the end.</source>
          <target state="translated">イテレータは、報告された要素の数を正確に生成するか、終了に到達する前に発散しなければなりません。</target>
        </trans-unit>
        <trans-unit id="857086b346b7dd5e8adf55ad86cbe1dbbf8cbe54" translate="yes" xml:space="preserve">
          <source>The iterator pattern allows you to perform some task on a sequence of items in turn. An iterator is responsible for the logic of iterating over each item and determining when the sequence has finished. When you use iterators, you don&amp;rsquo;t have to reimplement that logic yourself.</source>
          <target state="translated">イテレータパターンを使用すると、一連の項目に対していくつかのタスクを順番に実行できます。イテレータは、各アイテムを反復し、シーケンスがいつ終了したかを判断するロジックを担当します。イテレータを使用する場合、そのロジックを自分で再実装する必要はありません。</target>
        </trans-unit>
        <trans-unit id="6db07328b493618fb3fe592624d4f327dc32ce7b" translate="yes" xml:space="preserve">
          <source>The iterator reports a size hint where it is either exact (lower bound is equal to upper bound), or the upper bound is &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt;. The upper bound must only be &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; if the actual iterator length is larger than &lt;a href=&quot;../usize/constant.max&quot;&gt;&lt;code&gt;usize::MAX&lt;/code&gt;&lt;/a&gt;. In that case, the lower bound must be &lt;a href=&quot;../usize/constant.max&quot;&gt;&lt;code&gt;usize::MAX&lt;/code&gt;&lt;/a&gt;, resulting in a &lt;a href=&quot;trait.iterator#method.size_hint&quot;&gt;&lt;code&gt;.size_hint&lt;/code&gt;&lt;/a&gt; of &lt;code&gt;(usize::MAX, None)&lt;/code&gt;.</source>
          <target state="translated">イテレータは、サイズヒントが正確である（下限が上限と等しい）か、上限が&lt;a href=&quot;../option/enum.option#variant.None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt;であるかを報告します。実際のイテレータの長さが&lt;a href=&quot;../usize/constant.max&quot;&gt; &lt;code&gt;usize::MAX&lt;/code&gt; &lt;/a&gt;よりも大きい場合にのみ、上限を&lt;a href=&quot;../option/enum.option#variant.None&quot;&gt; &lt;code&gt;None&lt;/code&gt; に&lt;/a&gt;する必要があります。その場合、下限は&lt;a href=&quot;../usize/constant.max&quot;&gt; &lt;code&gt;usize::MAX&lt;/code&gt; &lt;/a&gt;でなければならず、結果として&lt;a href=&quot;trait.iterator#method.size_hint&quot;&gt; &lt;code&gt;.size_hint&lt;/code&gt; &lt;/a&gt;は &lt;code&gt;(usize::MAX, None)&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="761f99bb11c75b1d69af8441ba4ad3812f9ffc53" translate="yes" xml:space="preserve">
          <source>The iterator reports a size hint where it is either exact (lower bound is equal to upper bound), or the upper bound is &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt;. The upper bound must only be &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; if the actual iterator length is larger than &lt;a href=&quot;../usize/constant.max&quot;&gt;&lt;code&gt;usize::MAX&lt;/code&gt;&lt;/a&gt;. In that case, the lower bound must be &lt;a href=&quot;../usize/constant.max&quot;&gt;&lt;code&gt;usize::MAX&lt;/code&gt;&lt;/a&gt;, resulting in a &lt;a href=&quot;trait.iterator#method.size_hint&quot;&gt;&lt;code&gt;Iterator::size_hint()&lt;/code&gt;&lt;/a&gt; of &lt;code&gt;(usize::MAX, None)&lt;/code&gt;.</source>
          <target state="translated">The iterator reports a size hint where it is either exact (lower bound is equal to upper bound), or the upper bound is &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt;. The upper bound must only be &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt; if the actual iterator length is larger than &lt;a href=&quot;../usize/constant.max&quot;&gt; &lt;code&gt;usize::MAX&lt;/code&gt; &lt;/a&gt;. In that case, the lower bound must be &lt;a href=&quot;../usize/constant.max&quot;&gt; &lt;code&gt;usize::MAX&lt;/code&gt; &lt;/a&gt;, resulting in a &lt;a href=&quot;trait.iterator#method.size_hint&quot;&gt; &lt;code&gt;Iterator::size_hint()&lt;/code&gt; &lt;/a&gt; of &lt;code&gt;(usize::MAX, None)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f5b68d7a8101dc216e0d59f65c1ebaa471e720b2" translate="yes" xml:space="preserve">
          <source>The iterator returned from this function will return instances of &lt;a href=&quot;type.result&quot;&gt;&lt;code&gt;io::Result&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;a href=&quot;../vec/struct.vec&quot;&gt;&lt;code&gt;Vec&amp;lt;u8&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;. Each vector returned will &lt;em&gt;not&lt;/em&gt; have the delimiter byte at the end.</source>
          <target state="translated">イテレータは、のインスタンスを返します。この関数から返された&lt;a href=&quot;type.result&quot;&gt; &lt;code&gt;io::Result&lt;/code&gt; &lt;/a&gt; &lt;code&gt;&amp;lt;&lt;/code&gt; &lt;a href=&quot;../vec/struct.vec&quot;&gt; &lt;code&gt;Vec&amp;lt;u8&amp;gt;&lt;/code&gt; &lt;/a&gt;。 &lt;code&gt;&amp;gt;&lt;/code&gt; 返される各ベクトルの末尾に区切りバイトはあり&lt;em&gt;ません&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="43d518530c9a6385f97f5ea0cf3b95e6447ddfae" translate="yes" xml:space="preserve">
          <source>The iterator returned from this function will yield instances of &lt;a href=&quot;type.result&quot;&gt;&lt;code&gt;io::Result&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;a href=&quot;../string/struct.string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;. Each string returned will &lt;em&gt;not&lt;/em&gt; have a newline byte (the 0xA byte) or CRLF (0xD, 0xA bytes) at the end.</source>
          <target state="translated">この関数から返される反復子は、&lt;a href=&quot;type.result&quot;&gt; &lt;code&gt;io::Result&lt;/code&gt; &lt;/a&gt; &lt;code&gt;&amp;lt;&lt;/code&gt; &lt;a href=&quot;../string/struct.string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; のインスタンスを生成します。返される各文字列の最後には、改行バイト（0xAバイト）またはCRLF（0xD、0xAバイト）はあり&lt;em&gt;ません&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="11be39dc954e81f8e71f68fa0b756ad22ee17df7" translate="yes" xml:space="preserve">
          <source>The iterator returned from this function will yield instances of &lt;a href=&quot;type.result&quot;&gt;&lt;code&gt;io::Result&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;a href=&quot;../string/struct.string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;. Each string returned will &lt;em&gt;not&lt;/em&gt; have a newline byte (the &lt;code&gt;0xA&lt;/code&gt; byte) or &lt;code&gt;CRLF&lt;/code&gt; (&lt;code&gt;0xD&lt;/code&gt;, &lt;code&gt;0xA&lt;/code&gt; bytes) at the end.</source>
          <target state="translated">The iterator returned from this function will yield instances of &lt;a href=&quot;type.result&quot;&gt; &lt;code&gt;io::Result&lt;/code&gt; &lt;/a&gt; &lt;code&gt;&amp;lt;&lt;/code&gt; &lt;a href=&quot;../string/struct.string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; . Each string returned will &lt;em&gt;not&lt;/em&gt; have a newline byte (the &lt;code&gt;0xA&lt;/code&gt; byte) or &lt;code&gt;CRLF&lt;/code&gt; ( &lt;code&gt;0xD&lt;/code&gt; , &lt;code&gt;0xA&lt;/code&gt; bytes) at the end.</target>
        </trans-unit>
        <trans-unit id="d98222c90db1c99a084846a0ad925665e5230738" translate="yes" xml:space="preserve">
          <source>The iterator returned will return string slices that are sub-slices of the original string slice, separated by any amount of ASCII whitespace.</source>
          <target state="translated">返されるイテレータは、元の文字列スライスのサブスライスである文字列スライスを、任意の量の ASCII ホワイトスペースで区切って返します。</target>
        </trans-unit>
        <trans-unit id="406100c150ec04008e29a14c30e99aed0f63af21" translate="yes" xml:space="preserve">
          <source>The iterator returned will return string slices that are sub-slices of the original string slice, separated by any amount of whitespace.</source>
          <target state="translated">返されるイテレータは、元の文字列スライスのサブスライスである文字列スライスを、任意の量の空白で区切って返します。</target>
        </trans-unit>
        <trans-unit id="4221546e7793ded4aa41dc1718c0ee56c99339b5" translate="yes" xml:space="preserve">
          <source>The iterator returned yields pairs &lt;code&gt;(i, val)&lt;/code&gt;, where &lt;code&gt;i&lt;/code&gt; is the current index of iteration and &lt;code&gt;val&lt;/code&gt; is the value returned by the iterator.</source>
          <target state="translated">返される反復子はペア &lt;code&gt;(i, val)&lt;/code&gt; 生成します。ここで、 &lt;code&gt;i&lt;/code&gt; は反復の現在のインデックス、 &lt;code&gt;val&lt;/code&gt; は反復子によって返される値です。</target>
        </trans-unit>
        <trans-unit id="0d65a2fef7d4c6664fcfb9659495ac349d06a758" translate="yes" xml:space="preserve">
          <source>The iterator starts with the given first item (if any) and calls the given &lt;code&gt;FnMut(&amp;amp;T) -&amp;gt; Option&amp;lt;T&amp;gt;&lt;/code&gt; closure to compute each item&amp;rsquo;s successor.</source>
          <target state="translated">イテレーターは、指定された最初の項目（存在する場合）から &lt;code&gt;FnMut(&amp;amp;T) -&amp;gt; Option&amp;lt;T&amp;gt;&lt;/code&gt; 、指定されたFnMut（＆T）-&amp;gt; Option &amp;lt;T&amp;gt;クロージャーを呼び出して、各項目の後続を計算します。</target>
        </trans-unit>
        <trans-unit id="fe7ef8d083d96a8372351bad5e0da1e04819839b" translate="yes" xml:space="preserve">
          <source>The iterator version was slightly faster! We won&amp;rsquo;t explain the benchmark code here, because the point is not to prove that the two versions are equivalent but to get a general sense of how these two implementations compare performance-wise.</source>
          <target state="translated">イテレータのバージョンは少し高速でした！ここではベンチマークコードについては説明しません。2つのバージョンが同等であることを証明することではなく、これらの2つの実装がパフォーマンスに関してどのように比較するかについての一般的な理解を得ることです。</target>
        </trans-unit>
        <trans-unit id="40a9eac2c27490989d9bce69b525d51e8393ef6d" translate="yes" xml:space="preserve">
          <source>The iterator will never return &lt;a href=&quot;../../../option/enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; and will also not yield the peer's &lt;a href=&quot;struct.socketaddr&quot;&gt;&lt;code&gt;SocketAddr&lt;/code&gt;&lt;/a&gt; structure.</source>
          <target state="translated">イテレータは&lt;a href=&quot;../../../option/enum.option#variant.None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt;を返すことはなく、ピアの&lt;a href=&quot;struct.socketaddr&quot;&gt; &lt;code&gt;SocketAddr&lt;/code&gt; &lt;/a&gt;構造を生成しません。</target>
        </trans-unit>
        <trans-unit id="1eb81e5b136891ec83f03fa70901b0982c774c3e" translate="yes" xml:space="preserve">
          <source>The iterator will yield instances of &lt;a href=&quot;../io/type.result&quot;&gt;&lt;code&gt;io::Result&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;a href=&quot;../fs/struct.direntry&quot;&gt;&lt;code&gt;DirEntry&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;. New errors may be encountered after an iterator is initially constructed.</source>
          <target state="translated">イテレータは&lt;a href=&quot;../io/type.result&quot;&gt; &lt;code&gt;io::Result&lt;/code&gt; &lt;/a&gt; &lt;code&gt;&amp;lt;&lt;/code&gt; &lt;a href=&quot;../fs/struct.direntry&quot;&gt; &lt;code&gt;DirEntry&lt;/code&gt; &lt;/a&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; のインスタンスを生成します。イテレータが最初に作成された後、新しいエラーが発生する場合があります。</target>
        </trans-unit>
        <trans-unit id="fea22bab4e7d7d638613556e79b891a323ca2ee5" translate="yes" xml:space="preserve">
          <source>The iterator will yield instances of &lt;a href=&quot;../io/type.result&quot;&gt;&lt;code&gt;io::Result&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;a href=&quot;../fs/struct.direntry&quot;&gt;&lt;code&gt;fs::DirEntry&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;. New errors may be encountered after an iterator is initially constructed.</source>
          <target state="translated">The iterator will yield instances of &lt;a href=&quot;../io/type.result&quot;&gt; &lt;code&gt;io::Result&lt;/code&gt; &lt;/a&gt; &lt;code&gt;&amp;lt;&lt;/code&gt; &lt;a href=&quot;../fs/struct.direntry&quot;&gt; &lt;code&gt;fs::DirEntry&lt;/code&gt; &lt;/a&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; . New errors may be encountered after an iterator is initially constructed.</target>
        </trans-unit>
        <trans-unit id="54667f9a5f59c23223b23e9276c48f67c43aae4e" translate="yes" xml:space="preserve">
          <source>The iterator will yield instances of &lt;a href=&quot;../io/type.result&quot;&gt;&lt;code&gt;io::Result&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;a href=&quot;struct.direntry&quot;&gt;&lt;code&gt;DirEntry&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;. New errors may be encountered after an iterator is initially constructed.</source>
          <target state="translated">イテレータは&lt;a href=&quot;../io/type.result&quot;&gt; &lt;code&gt;io::Result&lt;/code&gt; &lt;/a&gt; &lt;code&gt;&amp;lt;&lt;/code&gt; &lt;a href=&quot;struct.direntry&quot;&gt; &lt;code&gt;DirEntry&lt;/code&gt; &lt;/a&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; のインスタンスを生成します。イテレータが最初に作成された後、新しいエラーが発生する場合があります。</target>
        </trans-unit>
        <trans-unit id="6720eac87f145ca4ebd08c14afcbc3e18eb5bc63" translate="yes" xml:space="preserve">
          <source>The iterator will yield the &lt;code&gt;Path&lt;/code&gt; that is returned if the &lt;a href=&quot;struct.path#method.parent&quot;&gt;&lt;code&gt;parent&lt;/code&gt;&lt;/a&gt; method is used zero or more times. That means, the iterator will yield &lt;code&gt;&amp;amp;self&lt;/code&gt;, &lt;code&gt;&amp;amp;self.parent().unwrap()&lt;/code&gt;, &lt;code&gt;&amp;amp;self.parent().unwrap().parent().unwrap()&lt;/code&gt; and so on. If the &lt;a href=&quot;struct.path#method.parent&quot;&gt;&lt;code&gt;parent&lt;/code&gt;&lt;/a&gt; method returns &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt;, the iterator will do likewise. The iterator will always yield at least one value, namely &lt;code&gt;&amp;amp;self&lt;/code&gt;.</source>
          <target state="translated">イテレータは、&lt;a href=&quot;struct.path#method.parent&quot;&gt; &lt;code&gt;parent&lt;/code&gt; &lt;/a&gt;メソッドが0回以上使用された場合に返される &lt;code&gt;Path&lt;/code&gt; を生成します。つまり、イテレータは &lt;code&gt;&amp;amp;self&lt;/code&gt; 、 &lt;code&gt;&amp;amp;self.parent().unwrap()&lt;/code&gt; 、 &lt;code&gt;&amp;amp;self.parent().unwrap().parent().unwrap()&lt;/code&gt; などを生成します。&lt;a href=&quot;struct.path#method.parent&quot;&gt; &lt;code&gt;parent&lt;/code&gt; &lt;/a&gt;メソッドが&lt;a href=&quot;../option/enum.option#variant.None&quot;&gt; &lt;code&gt;None&lt;/code&gt; を&lt;/a&gt;返す場合、イテレータも同様に行います。イテレータは常に少なくとも1つの値、つまり &lt;code&gt;&amp;amp;self&lt;/code&gt; を生成します。</target>
        </trans-unit>
        <trans-unit id="36ed296a3da7075e704c60a55541d4eefcc61a2e" translate="yes" xml:space="preserve">
          <source>The iterator yields one value if the &lt;a href=&quot;enum.option&quot;&gt;&lt;code&gt;Option&lt;/code&gt;&lt;/a&gt; is a &lt;a href=&quot;enum.option#variant.Some&quot;&gt;&lt;code&gt;Some&lt;/code&gt;&lt;/a&gt;, otherwise none.</source>
          <target state="translated">&lt;a href=&quot;enum.option&quot;&gt; &lt;code&gt;Option&lt;/code&gt; &lt;/a&gt;が&lt;a href=&quot;enum.option#variant.Some&quot;&gt; &lt;code&gt;Some&lt;/code&gt; の&lt;/a&gt;場合、イテレータは1つの値を生成し、それ以外の場合は何も生成しません。</target>
        </trans-unit>
        <trans-unit id="33a7221657feedb4eb9bdbc29b15b1cfdbff0941" translate="yes" xml:space="preserve">
          <source>The iterator yields one value if the result is &lt;a href=&quot;../result/enum.result#Ok.v&quot;&gt;&lt;code&gt;Result::Ok&lt;/code&gt;&lt;/a&gt;, otherwise none.</source>
          <target state="translated">イテレータは、結果が&lt;a href=&quot;../result/enum.result#Ok.v&quot;&gt; &lt;code&gt;Result::Ok&lt;/code&gt; &lt;/a&gt;場合は1つの値を生成し、それ以外の場合は何も生成しません。</target>
        </trans-unit>
        <trans-unit id="98fcd488b58bec9ba13c409525786e8e34d2f3d0" translate="yes" xml:space="preserve">
          <source>The iterator yields one value if the result is &lt;a href=&quot;../result/enum.result#variant.Ok&quot;&gt;&lt;code&gt;Result::Ok&lt;/code&gt;&lt;/a&gt;, otherwise none.</source>
          <target state="translated">The iterator yields one value if the result is &lt;a href=&quot;../result/enum.result#variant.Ok&quot;&gt; &lt;code&gt;Result::Ok&lt;/code&gt; &lt;/a&gt;, otherwise none.</target>
        </trans-unit>
        <trans-unit id="908b09e4328c560c75c00a1be9bba8fa3c1792fa" translate="yes" xml:space="preserve">
          <source>The iterator yields one value if the result is &lt;a href=&quot;enum.result#Ok.v&quot;&gt;&lt;code&gt;Result::Ok&lt;/code&gt;&lt;/a&gt;, otherwise none.</source>
          <target state="translated">イテレータは、結果が&lt;a href=&quot;enum.result#Ok.v&quot;&gt; &lt;code&gt;Result::Ok&lt;/code&gt; &lt;/a&gt;場合は1つの値を生成し、それ以外の場合は何も生成しません。</target>
        </trans-unit>
        <trans-unit id="8fd298b9ad5df85747acb6e44bba1366e3481860" translate="yes" xml:space="preserve">
          <source>The iterator yields one value if the result is &lt;a href=&quot;enum.result#variant.Ok&quot;&gt;&lt;code&gt;Ok&lt;/code&gt;&lt;/a&gt;, otherwise none.</source>
          <target state="translated">イテレータは、結果が&lt;a href=&quot;enum.result#variant.Ok&quot;&gt; &lt;code&gt;Ok&lt;/code&gt; の&lt;/a&gt;場合は1つの値を生成し、それ以外の場合は何も生成しません。</target>
        </trans-unit>
        <trans-unit id="41c263ba9c3e1377bcbb306e69ddac6adfb8f150" translate="yes" xml:space="preserve">
          <source>The iterator yields one value if the result is &lt;a href=&quot;enum.result#variant.Ok&quot;&gt;&lt;code&gt;Result::Ok&lt;/code&gt;&lt;/a&gt;, otherwise none.</source>
          <target state="translated">The iterator yields one value if the result is &lt;a href=&quot;enum.result#variant.Ok&quot;&gt; &lt;code&gt;Result::Ok&lt;/code&gt; &lt;/a&gt;, otherwise none.</target>
        </trans-unit>
        <trans-unit id="b80110840b4186388c3ebdd6fff4960efb23a3ca" translate="yes" xml:space="preserve">
          <source>The iterator yields tuples. The position is first, the &lt;a href=&quot;../char/index&quot;&gt;&lt;code&gt;char&lt;/code&gt;&lt;/a&gt; is second.</source>
          <target state="translated">イテレータはタプルを生成します。最初の位置、&lt;a href=&quot;../char/index&quot;&gt; &lt;code&gt;char&lt;/code&gt; &lt;/a&gt;が2番目です。</target>
        </trans-unit>
        <trans-unit id="6ec1542f766c1ecbdef3897acebe4cebd30ca6ee" translate="yes" xml:space="preserve">
          <source>The iterator yields tuples. The position is first, the &lt;a href=&quot;../primitive.char&quot;&gt;&lt;code&gt;char&lt;/code&gt;&lt;/a&gt; is second.</source>
          <target state="translated">The iterator yields tuples. The position is first, the &lt;a href=&quot;../primitive.char&quot;&gt; &lt;code&gt;char&lt;/code&gt; &lt;/a&gt; is second.</target>
        </trans-unit>
        <trans-unit id="787f68c0ad38019edb27d78451a4d5831f65e4ab" translate="yes" xml:space="preserve">
          <source>The iterator yields tuples. The position is first, the &lt;a href=&quot;char/index&quot;&gt;&lt;code&gt;char&lt;/code&gt;&lt;/a&gt; is second.</source>
          <target state="translated">イテレータはタプルを生成します。最初の位置、&lt;a href=&quot;char/index&quot;&gt; &lt;code&gt;char&lt;/code&gt; &lt;/a&gt;が2番目です。</target>
        </trans-unit>
        <trans-unit id="10db2a64e13645a875ad4c150b72d85dec4465d0" translate="yes" xml:space="preserve">
          <source>The iterator yields tuples. The position is first, the &lt;a href=&quot;primitive.char&quot;&gt;&lt;code&gt;char&lt;/code&gt;&lt;/a&gt; is second.</source>
          <target state="translated">The iterator yields tuples. The position is first, the &lt;a href=&quot;primitive.char&quot;&gt; &lt;code&gt;char&lt;/code&gt; &lt;/a&gt; is second.</target>
        </trans-unit>
        <trans-unit id="6814fb791ef3836a2e395759e70c2ff3a369ee11" translate="yes" xml:space="preserve">
          <source>The job of &lt;code&gt;read_line&lt;/code&gt; is to take whatever the user types into standard input and place that into a string, so it takes that string as an argument. The string argument needs to be mutable so the method can change the string&amp;rsquo;s content by adding the user input.</source>
          <target state="translated">仕事 &lt;code&gt;read_line&lt;/code&gt; それが引数としてその文字列を取るので、その文字列の中に、標準入力や場所にかかわらず、ユーザーの種類を取ることです。メソッドがユーザー入力を追加して文字列の内容を変更できるように、文字列引数は可変である必要があります。</target>
        </trans-unit>
        <trans-unit id="41c36730094f242762fc2db352770667844d977d" translate="yes" xml:space="preserve">
          <source>The join handle will implicitly &lt;em&gt;detach&lt;/em&gt; the child thread upon being dropped. In this case, the child thread may outlive the parent (unless the parent thread is the main thread; the whole process is terminated when the main thread finishes). Additionally, the join handle provides a &lt;a href=&quot;struct.joinhandle#method.join&quot;&gt;&lt;code&gt;join&lt;/code&gt;&lt;/a&gt; method that can be used to join the child thread. If the child thread panics, &lt;a href=&quot;struct.joinhandle#method.join&quot;&gt;&lt;code&gt;join&lt;/code&gt;&lt;/a&gt; will return an &lt;a href=&quot;../result/enum.result#variant.Err&quot;&gt;&lt;code&gt;Err&lt;/code&gt;&lt;/a&gt; containing the argument given to &lt;a href=&quot;../macro.panic&quot;&gt;&lt;code&gt;panic!&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">The join handle will implicitly &lt;em&gt;detach&lt;/em&gt; the child thread upon being dropped. In this case, the child thread may outlive the parent (unless the parent thread is the main thread; the whole process is terminated when the main thread finishes). Additionally, the join handle provides a &lt;a href=&quot;struct.joinhandle#method.join&quot;&gt; &lt;code&gt;join&lt;/code&gt; &lt;/a&gt; method that can be used to join the child thread. If the child thread panics, &lt;a href=&quot;struct.joinhandle#method.join&quot;&gt; &lt;code&gt;join&lt;/code&gt; &lt;/a&gt; will return an &lt;a href=&quot;../result/enum.result#variant.Err&quot;&gt; &lt;code&gt;Err&lt;/code&gt; &lt;/a&gt; containing the argument given to &lt;a href=&quot;../macro.panic&quot;&gt; &lt;code&gt;panic!&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="cc7b114b0c6414134b72184594654a5acaffb577" translate="yes" xml:space="preserve">
          <source>The join handle will implicitly &lt;em&gt;detach&lt;/em&gt; the child thread upon being dropped. In this case, the child thread may outlive the parent (unless the parent thread is the main thread; the whole process is terminated when the main thread finishes). Additionally, the join handle provides a &lt;a href=&quot;struct.joinhandle#method.join&quot;&gt;&lt;code&gt;join&lt;/code&gt;&lt;/a&gt; method that can be used to join the child thread. If the child thread panics, &lt;a href=&quot;struct.joinhandle#method.join&quot;&gt;&lt;code&gt;join&lt;/code&gt;&lt;/a&gt; will return an &lt;a href=&quot;../result/enum.result#variant.Err&quot;&gt;&lt;code&gt;Err&lt;/code&gt;&lt;/a&gt; containing the argument given to &lt;a href=&quot;../macro.panic&quot;&gt;&lt;code&gt;panic&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">結合ハンドルは、ドロップされると子スレッドを暗黙的に&lt;em&gt;切り離し&lt;/em&gt;ます。この場合、子スレッドは親よりも長く存続する可能性があります（親スレッドがメインスレッドでない限り、メインスレッドが終了するとプロセス全体が終了します）。さらに、結合ハンドルは、子スレッドを結合するために使用できる&lt;a href=&quot;struct.joinhandle#method.join&quot;&gt; &lt;code&gt;join&lt;/code&gt; &lt;/a&gt;メソッドを提供します。子スレッドがパニックになると、&lt;a href=&quot;struct.joinhandle#method.join&quot;&gt; &lt;code&gt;join&lt;/code&gt; &lt;/a&gt;は&lt;a href=&quot;../macro.panic&quot;&gt; &lt;code&gt;panic&lt;/code&gt; に&lt;/a&gt;指定された引数を含む&lt;a href=&quot;../result/enum.result#variant.Err&quot;&gt; &lt;code&gt;Err&lt;/code&gt; &lt;/a&gt;を返します。</target>
        </trans-unit>
        <trans-unit id="099a2e1e2bdb72897b42735f9f375efdb1e2c049" translate="yes" xml:space="preserve">
          <source>The key line in this error is &lt;code&gt;cannot move out of type [T], a non-copy slice&lt;/code&gt;. With our non-generic versions of the &lt;code&gt;largest&lt;/code&gt; function, we were only trying to find the largest &lt;code&gt;i32&lt;/code&gt; or &lt;code&gt;char&lt;/code&gt;. As discussed in the &lt;a href=&quot;ch04-01-what-is-ownership#stack-only-data-copy&quot;&gt;&amp;ldquo;Stack-Only Data: Copy&amp;rdquo;&lt;/a&gt; section in Chapter 4, types like &lt;code&gt;i32&lt;/code&gt; and &lt;code&gt;char&lt;/code&gt; that have a known size can be stored on the stack, so they implement the &lt;code&gt;Copy&lt;/code&gt; trait. But when we made the &lt;code&gt;largest&lt;/code&gt; function generic, it became possible for the &lt;code&gt;list&lt;/code&gt; parameter to have types in it that don&amp;rsquo;t implement the &lt;code&gt;Copy&lt;/code&gt; trait. Consequently, we wouldn&amp;rsquo;t be able to move the value out of &lt;code&gt;list[0]&lt;/code&gt; and into the &lt;code&gt;largest&lt;/code&gt; variable, resulting in this error.</source>
          <target state="translated">このエラーの重要な &lt;code&gt;cannot move out of type [T], a non-copy slice&lt;/code&gt; です。 &lt;code&gt;largest&lt;/code&gt; 関数の非ジェネリックバージョンでは、最大の &lt;code&gt;i32&lt;/code&gt; または &lt;code&gt;char&lt;/code&gt; のみを検索しようとしました。第4章の&lt;a href=&quot;ch04-01-what-is-ownership#stack-only-data-copy&quot;&gt;「スタックのみのデータ：コピー」&lt;/a&gt;セクションで説明したように、既知のサイズを持つ &lt;code&gt;i32&lt;/code&gt; や &lt;code&gt;char&lt;/code&gt; などのタイプはスタックに格納できるため、 &lt;code&gt;Copy&lt;/code&gt; トレイトを実装します。ただし、 &lt;code&gt;largest&lt;/code&gt; 関数をジェネリックにすると、 &lt;code&gt;list&lt;/code&gt; パラメーターに &lt;code&gt;Copy&lt;/code&gt; 実装しない型を含めることが可能になりました特性。その結果、値を &lt;code&gt;list[0]&lt;/code&gt; から &lt;code&gt;largest&lt;/code&gt; 変数に移動できなくなり、このエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="bceeadadeee15f4a164537fd341fe02f08db51ce" translate="yes" xml:space="preserve">
          <source>The key may be any borrowed form of the map's key type, but &lt;a href=&quot;../../hash/trait.hash&quot;&gt;&lt;code&gt;Hash&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../cmp/trait.eq&quot;&gt;&lt;code&gt;Eq&lt;/code&gt;&lt;/a&gt; on the borrowed form &lt;em&gt;must&lt;/em&gt; match those for the key type.</source>
          <target state="translated">キーは、マップのキータイプの任意の借用形式にすることができますが、借用フォームの&lt;a href=&quot;../../hash/trait.hash&quot;&gt; &lt;code&gt;Hash&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;../../cmp/trait.eq&quot;&gt; &lt;code&gt;Eq&lt;/code&gt; &lt;/a&gt;は、キータイプのそれらと一致する&lt;em&gt;必要があり&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="1967c0afcde1ba185b21a2a66c76557126c2a896" translate="yes" xml:space="preserve">
          <source>The key may be any borrowed form of the map's key type, but &lt;a href=&quot;../hash/trait.hash&quot;&gt;&lt;code&gt;Hash&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../cmp/trait.eq&quot;&gt;&lt;code&gt;Eq&lt;/code&gt;&lt;/a&gt; on the borrowed form &lt;em&gt;must&lt;/em&gt; match those for the key type.</source>
          <target state="translated">キーは、マップのキータイプの任意の借用形式にすることができますが、借用フォームの&lt;a href=&quot;../hash/trait.hash&quot;&gt; &lt;code&gt;Hash&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;../cmp/trait.eq&quot;&gt; &lt;code&gt;Eq&lt;/code&gt; &lt;/a&gt;は、キータイプのそれらと一致する&lt;em&gt;必要があり&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="25f3fabcbbf37a65231d46a27fb9b7a82a76e913" translate="yes" xml:space="preserve">
          <source>The key may be any borrowed form of the map's key type, but the ordering on the borrowed form &lt;em&gt;must&lt;/em&gt; match the ordering on the key type.</source>
          <target state="translated">キーは、マップのキータイプの任意の借用形式にすることができますが、借用フォームの順序は、キータイプの順序と一致する&lt;em&gt;必要があり&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="5794a7e2452d7c2d7acdcd9ca75f9f681dde7e71" translate="yes" xml:space="preserve">
          <source>The key property of unions is that all fields of a union share common storage. As a result writes to one field of a union can overwrite its other fields, and size of a union is determined by the size of its largest field.</source>
          <target state="translated">ユニオンの重要な特性は、ユニオンのすべてのフィールドが共通のストレージを共有していることです。その結果、ユニオンの1つのフィールドへの書き込みは他のフィールドを上書きすることができ、ユニオンのサイズはその最大フィールドのサイズによって決定されます。</target>
        </trans-unit>
        <trans-unit id="af36c49ed669c54fb87fd9d4d2b45f5df4d5de97" translate="yes" xml:space="preserve">
          <source>The key property of unions is that all fields of a union share common storage. As a result, writes to one field of a union can overwrite its other fields, and size of a union is determined by the size of its largest field.</source>
          <target state="translated">ユニオンの重要な特性は、ユニオンのすべてのフィールドが共通のストレージを共有していることです。その結果、ユニオンの1つのフィールドへの書き込みは他のフィールドを上書きすることができ、ユニオンのサイズはその最大フィールドのサイズによって決定されます。</target>
        </trans-unit>
        <trans-unit id="730d38429c1bd8714c2ac7995eb67557271f3b30" translate="yes" xml:space="preserve">
          <source>The keyword &lt;code&gt;pub&lt;/code&gt; makes any module, function, or data structure accessible from inside of external modules. The &lt;code&gt;pub&lt;/code&gt; keyword may also be used in a &lt;code&gt;use&lt;/code&gt; declaration to re-export an identifier from a namespace.</source>
          <target state="translated">The keyword &lt;code&gt;pub&lt;/code&gt; makes any module, function, or data structure accessible from inside of external modules. The &lt;code&gt;pub&lt;/code&gt; keyword may also be used in a &lt;code&gt;use&lt;/code&gt; declaration to re-export an identifier from a namespace.</target>
        </trans-unit>
        <trans-unit id="6097954d2b4ff2c7af7f3ee3f3f7074587267681" translate="yes" xml:space="preserve">
          <source>The kinds of patterns for parameters is limited to one of the following:</source>
          <target state="translated">パラメータのパターンの種類は以下のいずれかに限定されます。</target>
        </trans-unit>
        <trans-unit id="9150d911250adb9488a9891d8d1a7dd89c179545" translate="yes" xml:space="preserve">
          <source>The lack of infinite output indicates that this code didn&amp;rsquo;t create a reference cycle. We can also tell this by looking at the values we get from calling &lt;code&gt;Rc::strong_count&lt;/code&gt; and &lt;code&gt;Rc::weak_count&lt;/code&gt;.</source>
          <target state="translated">無限の出力がないことは、このコードが参照サイクルを作成しなかったことを示しています。 &lt;code&gt;Rc::strong_count&lt;/code&gt; および &lt;code&gt;Rc::weak_count&lt;/code&gt; 呼び出して取得した値を確認することでも、これを知ることができます。</target>
        </trans-unit>
        <trans-unit id="4f0cd1d95a878dd3fb3eb033669531c63a686db3" translate="yes" xml:space="preserve">
          <source>The lang attribute is intended for marking special items that are built-in to Rust itself. This includes special traits (like &lt;code&gt;Copy&lt;/code&gt; and &lt;code&gt;Sized&lt;/code&gt;) that affect how the compiler behaves, as well as special functions that may be automatically invoked (such as the handler for out-of-bounds accesses when indexing a slice).</source>
          <target state="translated">The lang attribute is intended for marking special items that are built-in to Rust itself. This includes special traits (like &lt;code&gt;Copy&lt;/code&gt; and &lt;code&gt;Sized&lt;/code&gt; ) that affect how the compiler behaves, as well as special functions that may be automatically invoked (such as the handler for out-of-bounds accesses when indexing a slice).</target>
        </trans-unit>
        <trans-unit id="60e53524d7493db6ac00628d4141587167732e22" translate="yes" xml:space="preserve">
          <source>The lang attribute is intended for marking special items that are built-in to Rust itself. This includes special traits (like &lt;code&gt;Copy&lt;/code&gt; and &lt;code&gt;Sized&lt;/code&gt;) that affect how the compiler behaves, as well as special functions that may be automatically invoked (such as the handler for out-of-bounds accesses when indexing a slice). Erroneous code example:</source>
          <target state="translated">lang属性は、Rust自体に組み込まれている特別なアイテムをマークするためのものです。これには、コンパイラーの動作に影響を与える特別な特性（ &lt;code&gt;Copy&lt;/code&gt; や &lt;code&gt;Sized&lt;/code&gt; など）と、自動的に呼び出される特別な関数（スライスにインデックスを付けるときの境界外アクセスのハンドラーなど）が含まれます。誤ったコード例：</target>
        </trans-unit>
        <trans-unit id="080a1610af4bccfcd8725cb110cddf449fbd60f7" translate="yes" xml:space="preserve">
          <source>The lang attribute was used in an invalid context.</source>
          <target state="translated">lang属性は無効なコンテキストで使用されました。</target>
        </trans-unit>
        <trans-unit id="d001aa0e948f210ef67db3ed9f1079f66965d658" translate="yes" xml:space="preserve">
          <source>The largest value that can be represented by this integer type.</source>
          <target state="translated">この整数型で表現できる最大の値。</target>
        </trans-unit>
        <trans-unit id="55a17e21fb4394b20facf75f686648a8590b11f1" translate="yes" xml:space="preserve">
          <source>The largest value that can be represented by this integer type. Use &lt;a href=&quot;../primitive.i128#associatedconstant.MAX&quot;&gt;&lt;code&gt;i128::MAX&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">The largest value that can be represented by this integer type. Use &lt;a href=&quot;../primitive.i128#associatedconstant.MAX&quot;&gt; &lt;code&gt;i128::MAX&lt;/code&gt; &lt;/a&gt; instead.</target>
        </trans-unit>
        <trans-unit id="b73325de7bc5986e41ec8d92ed9701ddacd280f3" translate="yes" xml:space="preserve">
          <source>The largest value that can be represented by this integer type. Use &lt;a href=&quot;../primitive.i16#associatedconstant.MAX&quot;&gt;&lt;code&gt;i16::MAX&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">The largest value that can be represented by this integer type. Use &lt;a href=&quot;../primitive.i16#associatedconstant.MAX&quot;&gt; &lt;code&gt;i16::MAX&lt;/code&gt; &lt;/a&gt; instead.</target>
        </trans-unit>
        <trans-unit id="f7bb87b47e7f2c22de123ec199f4be989c0dcaf2" translate="yes" xml:space="preserve">
          <source>The largest value that can be represented by this integer type. Use &lt;a href=&quot;../primitive.i32#associatedconstant.MAX&quot;&gt;&lt;code&gt;i32::MAX&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">The largest value that can be represented by this integer type. Use &lt;a href=&quot;../primitive.i32#associatedconstant.MAX&quot;&gt; &lt;code&gt;i32::MAX&lt;/code&gt; &lt;/a&gt; instead.</target>
        </trans-unit>
        <trans-unit id="cf18dde926e284162a660a1b1a2a30b118d1c49a" translate="yes" xml:space="preserve">
          <source>The largest value that can be represented by this integer type. Use &lt;a href=&quot;../primitive.i64#associatedconstant.MAX&quot;&gt;&lt;code&gt;i64::MAX&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">The largest value that can be represented by this integer type. Use &lt;a href=&quot;../primitive.i64#associatedconstant.MAX&quot;&gt; &lt;code&gt;i64::MAX&lt;/code&gt; &lt;/a&gt; instead.</target>
        </trans-unit>
        <trans-unit id="b22c4dd542e2ceff2527d706e65d0c5acc6f4d52" translate="yes" xml:space="preserve">
          <source>The largest value that can be represented by this integer type. Use &lt;a href=&quot;../primitive.i8#associatedconstant.MAX&quot;&gt;&lt;code&gt;i8::MAX&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">The largest value that can be represented by this integer type. Use &lt;a href=&quot;../primitive.i8#associatedconstant.MAX&quot;&gt; &lt;code&gt;i8::MAX&lt;/code&gt; &lt;/a&gt; instead.</target>
        </trans-unit>
        <trans-unit id="6a2e67766c1f950d1a3f862bddde0bc78e36aacd" translate="yes" xml:space="preserve">
          <source>The largest value that can be represented by this integer type. Use &lt;a href=&quot;../primitive.isize#associatedconstant.MAX&quot;&gt;&lt;code&gt;isize::MAX&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">The largest value that can be represented by this integer type. Use &lt;a href=&quot;../primitive.isize#associatedconstant.MAX&quot;&gt; &lt;code&gt;isize::MAX&lt;/code&gt; &lt;/a&gt; instead.</target>
        </trans-unit>
        <trans-unit id="697ca9e8dc5fcb1feb5a529df70222ec030c2428" translate="yes" xml:space="preserve">
          <source>The largest value that can be represented by this integer type. Use &lt;a href=&quot;../primitive.u128#associatedconstant.MAX&quot;&gt;&lt;code&gt;u128::MAX&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">The largest value that can be represented by this integer type. Use &lt;a href=&quot;../primitive.u128#associatedconstant.MAX&quot;&gt; &lt;code&gt;u128::MAX&lt;/code&gt; &lt;/a&gt; instead.</target>
        </trans-unit>
        <trans-unit id="23128039031afffa375e1d18e6f18c10d1470457" translate="yes" xml:space="preserve">
          <source>The largest value that can be represented by this integer type. Use &lt;a href=&quot;../primitive.u16#associatedconstant.MAX&quot;&gt;&lt;code&gt;u16::MAX&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">The largest value that can be represented by this integer type. Use &lt;a href=&quot;../primitive.u16#associatedconstant.MAX&quot;&gt; &lt;code&gt;u16::MAX&lt;/code&gt; &lt;/a&gt; instead.</target>
        </trans-unit>
        <trans-unit id="3cead8aa8b3423346a603591b8a3bb3bb38de07d" translate="yes" xml:space="preserve">
          <source>The largest value that can be represented by this integer type. Use &lt;a href=&quot;../primitive.u32#associatedconstant.MAX&quot;&gt;&lt;code&gt;u32::MAX&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">The largest value that can be represented by this integer type. Use &lt;a href=&quot;../primitive.u32#associatedconstant.MAX&quot;&gt; &lt;code&gt;u32::MAX&lt;/code&gt; &lt;/a&gt; instead.</target>
        </trans-unit>
        <trans-unit id="dfdca1f692589c69870c6eba29a4be248c639ebc" translate="yes" xml:space="preserve">
          <source>The largest value that can be represented by this integer type. Use &lt;a href=&quot;../primitive.u64#associatedconstant.MAX&quot;&gt;&lt;code&gt;u64::MAX&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">The largest value that can be represented by this integer type. Use &lt;a href=&quot;../primitive.u64#associatedconstant.MAX&quot;&gt; &lt;code&gt;u64::MAX&lt;/code&gt; &lt;/a&gt; instead.</target>
        </trans-unit>
        <trans-unit id="de1cfd44e67cca085f5a9478c1e9579b369e52ad" translate="yes" xml:space="preserve">
          <source>The largest value that can be represented by this integer type. Use &lt;a href=&quot;../primitive.u8#associatedconstant.MAX&quot;&gt;&lt;code&gt;u8::MAX&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">The largest value that can be represented by this integer type. Use &lt;a href=&quot;../primitive.u8#associatedconstant.MAX&quot;&gt; &lt;code&gt;u8::MAX&lt;/code&gt; &lt;/a&gt; instead.</target>
        </trans-unit>
        <trans-unit id="9c52af57b6ca83f430b64beb1abd9c9176989341" translate="yes" xml:space="preserve">
          <source>The largest value that can be represented by this integer type. Use &lt;a href=&quot;../primitive.usize#associatedconstant.MAX&quot;&gt;&lt;code&gt;usize::MAX&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">The largest value that can be represented by this integer type. Use &lt;a href=&quot;../primitive.usize#associatedconstant.MAX&quot;&gt; &lt;code&gt;usize::MAX&lt;/code&gt; &lt;/a&gt; instead.</target>
        </trans-unit>
        <trans-unit id="5bab83aeec1382113d53e6e7d14863dd49ec843d" translate="yes" xml:space="preserve">
          <source>The last change we have to make is in the assertion: to see how many items are in the inner vector, we call &lt;code&gt;borrow&lt;/code&gt; on the &lt;code&gt;RefCell&amp;lt;Vec&amp;lt;String&amp;gt;&amp;gt;&lt;/code&gt; to get an immutable reference to the vector.</source>
          <target state="translated">最後に行う必要のある変更はアサーションです。内部ベクトルにあるアイテムの数を確認するには、 &lt;code&gt;RefCell&amp;lt;Vec&amp;lt;String&amp;gt;&amp;gt;&lt;/code&gt; &lt;code&gt;borrow&lt;/code&gt; を呼び出して、ベクトルへの不変の参照を取得します。</target>
        </trans-unit>
        <trans-unit id="b92b068be4c2b594134000422ae50b8df0c8bac3" translate="yes" xml:space="preserve">
          <source>The last difference is that constants may be set only to a constant expression, not the result of a function call or any other value that could only be computed at runtime.</source>
          <target state="translated">最後の違いは、定数は定数式にのみ設定でき、関数呼び出しの結果や実行時にしか計算できなかった他の値は設定できないということです。</target>
        </trans-unit>
        <trans-unit id="293474ffe041aff8a994854d8cad3ac993cf31b4" translate="yes" xml:space="preserve">
          <source>The last element returned, if any, will contain the remainder of the slice.</source>
          <target state="translated">最後に返された要素があれば、スライスの残りの部分が含まれます。</target>
        </trans-unit>
        <trans-unit id="8d491eebdf550e16362be621e1476cb5ece9206f" translate="yes" xml:space="preserve">
          <source>The last field of &lt;code&gt;Foo&lt;/code&gt; has a type involving &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Foo&lt;/code&gt; の最後のフィールドには &lt;code&gt;T&lt;/code&gt; が関係する型があります。</target>
        </trans-unit>
        <trans-unit id="bf70627b4e81c57a3ddc9f76311bc0b01f381dcd" translate="yes" xml:space="preserve">
          <source>The last line of the output shows the location and the name of the installed binary, which in the case of &lt;code&gt;ripgrep&lt;/code&gt; is &lt;code&gt;rg&lt;/code&gt;. As long as the installation directory is in your &lt;code&gt;$PATH&lt;/code&gt;, as mentioned previously, you can then run &lt;code&gt;rg --help&lt;/code&gt; and start using a faster, rustier tool for searching files!</source>
          <target state="translated">出力の最後の行には、インストールされたバイナリの場所と名前が表示されます。 &lt;code&gt;ripgrep&lt;/code&gt; は、ripgrepの場合は &lt;code&gt;rg&lt;/code&gt; です。前述のように、インストールディレクトリが &lt;code&gt;$PATH&lt;/code&gt; にある限り、 &lt;code&gt;rg --help&lt;/code&gt; を実行して、ファイルを検索するためのより高速で信頼性の高いツールの使用を開始できます。</target>
        </trans-unit>
        <trans-unit id="3dc7b6a27a6191be06711a90615e83b643711efc" translate="yes" xml:space="preserve">
          <source>The last line shows that &lt;code&gt;&amp;amp;bar&lt;/code&gt; is not a function pointer either. Rather, it is a reference to the function-specific ZST. &lt;code&gt;&amp;amp;bar&lt;/code&gt; is basically never what you want when &lt;code&gt;bar&lt;/code&gt; is a function.</source>
          <target state="translated">The last line shows that &lt;code&gt;&amp;amp;bar&lt;/code&gt; is not a function pointer either. Rather, it is a reference to the function-specific ZST. &lt;code&gt;&amp;amp;bar&lt;/code&gt; is basically never what you want when &lt;code&gt;bar&lt;/code&gt; is a function.</target>
        </trans-unit>
        <trans-unit id="982060970609630bdcfd3dbdc543a9a98b2de24a" translate="yes" xml:space="preserve">
          <source>The last line, &lt;code&gt;[dependencies]&lt;/code&gt;, is the start of a section for you to list any of your project&amp;rsquo;s dependencies. In Rust, packages of code are referred to as &lt;em&gt;crates&lt;/em&gt;. We won&amp;rsquo;t need any other crates for this project, but we will in the first project in Chapter 2, so we&amp;rsquo;ll use this dependencies section then.</source>
          <target state="translated">最後の行 &lt;code&gt;[dependencies]&lt;/code&gt; は、プロジェクトの依存関係をリストするセクションの始まりです。Rustでは、コードのパッケージは&lt;em&gt;クレート&lt;/em&gt;と呼ばれます。このプロジェクトには他の箱は必要ありませんが、第2章の最初のプロジェクトでは、この依存関係セクションを使用します。</target>
        </trans-unit>
        <trans-unit id="c8d286da9b3987ef73f4d9e79523c9888a168257" translate="yes" xml:space="preserve">
          <source>The last of our common collections is the &lt;em&gt;hash map&lt;/em&gt;. The type &lt;code&gt;HashMap&amp;lt;K, V&amp;gt;&lt;/code&gt; stores a mapping of keys of type &lt;code&gt;K&lt;/code&gt; to values of type &lt;code&gt;V&lt;/code&gt;. It does this via a &lt;em&gt;hashing function&lt;/em&gt;, which determines how it places these keys and values into memory. Many programming languages support this kind of data structure, but they often use a different name, such as hash, map, object, hash table, dictionary, or associative array, just to name a few.</source>
          <target state="translated">私たちの一般的なコレクションの最後は&lt;em&gt;ハッシュマップ&lt;/em&gt;です。タイプ &lt;code&gt;HashMap&amp;lt;K, V&amp;gt;&lt;/code&gt; は、タイプ &lt;code&gt;K&lt;/code&gt; のキーのタイプ &lt;code&gt;V&lt;/code&gt; の値へのマッピングを格納します。これは、これらのキーと値をメモリに配置する方法を決定する&lt;em&gt;ハッシュ関数&lt;/em&gt;を介して行われます。多くのプログラミング言語はこの種のデータ構造をサポートしていますが、いくつか例を挙げると、ハッシュ、マップ、オブジェクト、ハッシュテーブル、ディクショナリ、連想配列などの別の名前がよく使用されます。</target>
        </trans-unit>
        <trans-unit id="e50377e1cc3271006121b6b6e503348b95075085" translate="yes" xml:space="preserve">
          <source>The last part is the HTTP version the client uses, and then the request line ends in a &lt;em&gt;CRLF sequence&lt;/em&gt;. (CRLF stands for &lt;em&gt;carriage return&lt;/em&gt; and &lt;em&gt;line feed&lt;/em&gt;, which are terms from the typewriter days!) The CRLF sequence can also be written as &lt;code&gt;\r\n&lt;/code&gt;, where &lt;code&gt;\r&lt;/code&gt; is a carriage return and &lt;code&gt;\n&lt;/code&gt; is a line feed. The CRLF sequence separates the request line from the rest of the request data. Note that when the CRLF is printed, we see a new line start rather than &lt;code&gt;\r\n&lt;/code&gt;.</source>
          <target state="translated">最後の部分はクライアントが使用するHTTPバージョンであり、リクエスト行は&lt;em&gt;CRLFシーケンスで&lt;/em&gt;終わり&lt;em&gt;ます&lt;/em&gt;。（CRLFは&lt;em&gt;キャリッジリターン&lt;/em&gt;と&lt;em&gt;ラインフィード&lt;/em&gt;を表し、タイプライターの時代の用語です！）CRLFシーケンスは &lt;code&gt;\r\n&lt;/code&gt; と書くこともできます。ここで、 &lt;code&gt;\r&lt;/code&gt; はキャリッジリターン、 &lt;code&gt;\n&lt;/code&gt; はラインフィードです。CRLFシーケンスは、要求行を残りの要求データから分離します。CRLFが出力されると、 &lt;code&gt;\r\n&lt;/code&gt; ではなく新しい行の開始が表示されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="e7f87628bb5e91d33e6ee47cc631179039d310fa" translate="yes" xml:space="preserve">
          <source>The layout of a type is its size, alignment, and the relative offsets of its fields. For enums, how the discriminant is laid out and interpreted is also part of type layout.</source>
          <target state="translated">型のレイアウトは、そのサイズ、配置、フィールドの相対的なオフセットです。enumsの場合、判別値がどのようにレイアウトされ、解釈されるかも型のレイアウトの一部です。</target>
        </trans-unit>
        <trans-unit id="bb7242c48b73507f4d4792c2cb29fe84ab3a4519" translate="yes" xml:space="preserve">
          <source>The layout of allocation request that failed</source>
          <target state="translated">失敗した割当要求のレイアウト</target>
        </trans-unit>
        <trans-unit id="d81ce81ead59e71cfd072129a8c87907148c562c" translate="yes" xml:space="preserve">
          <source>The left operand of an &lt;a href=&quot;expressions/operator-expr#assignment-expressions&quot;&gt;assignment&lt;/a&gt; or &lt;a href=&quot;expressions/operator-expr#compound-assignment-expressions&quot;&gt;compound assignment&lt;/a&gt; expression.</source>
          <target state="translated">&lt;a href=&quot;expressions/operator-expr#assignment-expressions&quot;&gt;割り当て&lt;/a&gt;または&lt;a href=&quot;expressions/operator-expr#compound-assignment-expressions&quot;&gt;複合割り当て&lt;/a&gt;式の左オペランド。</target>
        </trans-unit>
        <trans-unit id="1c0d113ddd28e543817cdc902e3988c72a15e13a" translate="yes" xml:space="preserve">
          <source>The left shift assignment operator &lt;code&gt;&amp;lt;&amp;lt;=&lt;/code&gt;.</source>
          <target state="translated">左シフト代入演算子 &lt;code&gt;&amp;lt;&amp;lt;=&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="553d8d3f55b49cb8907e0699dd0a3d9c13298c80" translate="yes" xml:space="preserve">
          <source>The left shift operator &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;. Note that because this trait is implemented for all integer types with multiple right-hand-side types, Rust's type checker has special handling for &lt;code&gt;_ &amp;lt;&amp;lt; _&lt;/code&gt;, setting the result type for integer operations to the type of the left-hand-side operand. This means that though &lt;code&gt;a &amp;lt;&amp;lt; b&lt;/code&gt; and &lt;code&gt;a.shl(b)&lt;/code&gt; are one and the same from an evaluation standpoint, they are different when it comes to type inference.</source>
          <target state="translated">左シフト演算子 &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; 。この特性は複数の右側の型を持つすべての整数型に実装されているため、Rustの型チェッカーは &lt;code&gt;_ &amp;lt;&amp;lt; _&lt;/code&gt; に対して特別な処理を行い、整数演算の結果の型を左側のオペランドの型に設定します。 。つまり、 &lt;code&gt;a &amp;lt;&amp;lt; b&lt;/code&gt; と &lt;code&gt;a.shl(b)&lt;/code&gt; は、評価の観点からはまったく同じものですが、型推論に関しては異なります。</target>
        </trans-unit>
        <trans-unit id="abb83d0dbf2481e1c0cc0aff75ee4837acd9c8fb" translate="yes" xml:space="preserve">
          <source>The left-hand side of a compound assignment expression must be a place expression. A place expression represents a memory location and includes item paths (ie, namespaced variables), dereferences, indexing expressions, and field references.</source>
          <target state="translated">複合代入式の左側は場所式でなければなりません。配置式はメモリの場所を表し、項目パス(ネームスペース変数など)、参照、インデキシング式、フィールド参照を含みます。</target>
        </trans-unit>
        <trans-unit id="9df6999a3c0f46759818b5fb8abefef29f79e559" translate="yes" xml:space="preserve">
          <source>The left-hand side of an assignment operator must be a place expression. A place expression represents a memory location and can be a variable (with optional namespacing), a dereference, an indexing expression or a field reference.</source>
          <target state="translated">代入演算子の左側は、場所式でなければなりません。場所式はメモリの場所を表し、変数(オプションで名前空間を持つ)、参照、インデックス式、フィールド参照のいずれかになります。</target>
        </trans-unit>
        <trans-unit id="e2c37a7f1d5752be8f4a3cd4c10444c370f709c8" translate="yes" xml:space="preserve">
          <source>The length is how much memory, in bytes, the contents of the &lt;code&gt;String&lt;/code&gt; is currently using. The capacity is the total amount of memory, in bytes, that the &lt;code&gt;String&lt;/code&gt; has received from the allocator. The difference between length and capacity matters, but not in this context, so for now, it&amp;rsquo;s fine to ignore the capacity.</source>
          <target state="translated">The length is how much memory, in bytes, the contents of the &lt;code&gt;String&lt;/code&gt; is currently using. The capacity is the total amount of memory, in bytes, that the &lt;code&gt;String&lt;/code&gt; has received from the allocator. The difference between length and capacity matters, but not in this context, so for now, it&amp;rsquo;s fine to ignore the capacity.</target>
        </trans-unit>
        <trans-unit id="583ea3cae577825fe984e0b2dabdc2098e762a9c" translate="yes" xml:space="preserve">
          <source>The length is how much memory, in bytes, the contents of the &lt;code&gt;String&lt;/code&gt; is currently using. The capacity is the total amount of memory, in bytes, that the &lt;code&gt;String&lt;/code&gt; has received from the operating system. The difference between length and capacity matters, but not in this context, so for now, it&amp;rsquo;s fine to ignore the capacity.</source>
          <target state="translated">長さは、 &lt;code&gt;String&lt;/code&gt; の内容が現在使用しているメモリ量（バイト単位）です。容量は、 &lt;code&gt;String&lt;/code&gt; がオペレーティングシステムから受信したメモリの総量（バイト単位）です。長さと容量の違いは重要ですが、このコンテキストでは重要ではないため、現時点では容量を無視しても問題ありません。</target>
        </trans-unit>
        <trans-unit id="bec01c75ecf9080484e0035ecb4817690e9d17fa" translate="yes" xml:space="preserve">
          <source>The length of &lt;code&gt;other&lt;/code&gt; must be the same as &lt;code&gt;self&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;other&lt;/code&gt; の長さは &lt;code&gt;self&lt;/code&gt; と同じでなければなりません。</target>
        </trans-unit>
        <trans-unit id="1d3c6c04d874a34e3f73cf44da542c5ee7d39510" translate="yes" xml:space="preserve">
          <source>The length of &lt;code&gt;src&lt;/code&gt; must be the same as &lt;code&gt;self&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;src&lt;/code&gt; の長さは、 &lt;code&gt;self&lt;/code&gt; と同じでなければなりません。</target>
        </trans-unit>
        <trans-unit id="f5ae40e336b72c0149684750f73301547acc7603" translate="yes" xml:space="preserve">
          <source>The length of the platform-intrinsic function &lt;code&gt;simd_shuffle&lt;/code&gt; wasn't specified.</source>
          <target state="translated">The length of the platform-intrinsic function &lt;code&gt;simd_shuffle&lt;/code&gt; wasn't specified.</target>
        </trans-unit>
        <trans-unit id="65b0bfaafe677ff19be99641d06a9d0388b357ef" translate="yes" xml:space="preserve">
          <source>The length of the platform-intrinsic function &lt;code&gt;simd_shuffle&lt;/code&gt; wasn't specified. Erroneous code example:</source>
          <target state="translated">プラットフォーム固有の関数 &lt;code&gt;simd_shuffle&lt;/code&gt; の長さが指定されていませんでした。誤ったコード例：</target>
        </trans-unit>
        <trans-unit id="2e4dc711d20d353ed60fc2eb7d0105870f230a29" translate="yes" xml:space="preserve">
          <source>The length returned is that of the underlying storage used by &lt;code&gt;OsStr&lt;/code&gt;. As discussed in the &lt;a href=&quot;struct.osstring&quot;&gt;&lt;code&gt;OsString&lt;/code&gt;&lt;/a&gt; introduction, &lt;a href=&quot;struct.osstring&quot;&gt;&lt;code&gt;OsString&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;OsStr&lt;/code&gt; store strings in a form best suited for cheap inter-conversion between native-platform and Rust string forms, which may differ significantly from both of them, including in storage size and encoding.</source>
          <target state="translated">The length returned is that of the underlying storage used by &lt;code&gt;OsStr&lt;/code&gt; . As discussed in the &lt;a href=&quot;struct.osstring&quot;&gt; &lt;code&gt;OsString&lt;/code&gt; &lt;/a&gt; introduction, &lt;a href=&quot;struct.osstring&quot;&gt; &lt;code&gt;OsString&lt;/code&gt; &lt;/a&gt; and &lt;code&gt;OsStr&lt;/code&gt; store strings in a form best suited for cheap inter-conversion between native-platform and Rust string forms, which may differ significantly from both of them, including in storage size and encoding.</target>
        </trans-unit>
        <trans-unit id="2fe8cad4da628228b8d9a6730b144662e5d5b147" translate="yes" xml:space="preserve">
          <source>The length returned is that of the underlying storage used by &lt;code&gt;OsStr&lt;/code&gt;; As discussed in the &lt;a href=&quot;struct.osstring&quot;&gt;&lt;code&gt;OsString&lt;/code&gt;&lt;/a&gt; introduction, &lt;a href=&quot;struct.osstring&quot;&gt;&lt;code&gt;OsString&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;OsStr&lt;/code&gt; store strings in a form best suited for cheap inter-conversion between native-platform and Rust string forms, which may differ significantly from both of them, including in storage size and encoding.</source>
          <target state="translated">返される長さは、 &lt;code&gt;OsStr&lt;/code&gt; によって使用される基になるストレージの長さです。&lt;a href=&quot;struct.osstring&quot;&gt; &lt;code&gt;OsString&lt;/code&gt; の概要で&lt;/a&gt;説明したように、&lt;a href=&quot;struct.osstring&quot;&gt; &lt;code&gt;OsString&lt;/code&gt; &lt;/a&gt;と &lt;code&gt;OsStr&lt;/code&gt; は、ネイティブプラットフォーム形式とRust文字列形式の間の安価な相互変換に最適な形式で文字列を格納します。これは、ストレージサイズやエンコーディングなど、両方の形式と大幅に異なる場合があります。</target>
        </trans-unit>
        <trans-unit id="f60b6a38bf38c34c5675869a8bbe49e47496b10f" translate="yes" xml:space="preserve">
          <source>The level is equal to &lt;code&gt;SOL_SOCKET&lt;/code&gt; and the type is equal to &lt;code&gt;SCM_CREDENTIALS&lt;/code&gt; or &lt;code&gt;SCM_CREDS&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3be4076f729c77100ef1624a826253f7fce0e4b7" translate="yes" xml:space="preserve">
          <source>The level is equal to &lt;code&gt;SOL_SOCKET&lt;/code&gt; and the type is equal to &lt;code&gt;SCM_RIGHTS&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99a0d51daa7130da604f883d5259ae5835cb10c2" translate="yes" xml:space="preserve">
          <source>The lifetime bound for this object type cannot be deduced from context and must be specified.</source>
          <target state="translated">このオブジェクト型の寿命はコンテキストから推論することができず、指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="71866b1db7de253967c22f08d6dc545dfcd4182b" translate="yes" xml:space="preserve">
          <source>The lifetime constraint &lt;code&gt;'b&lt;/code&gt; for &lt;code&gt;bar()&lt;/code&gt; implementation does not match the trait declaration. Ensure lifetime declarations match exactly in both trait declaration and implementation. Example:</source>
          <target state="translated">The lifetime constraint &lt;code&gt;'b&lt;/code&gt; for &lt;code&gt;bar()&lt;/code&gt; implementation does not match the trait declaration. Ensure lifetime declarations match exactly in both trait declaration and implementation. Example:</target>
        </trans-unit>
        <trans-unit id="30238ceba60deefc79cfa25b4649d1a595edd0d8" translate="yes" xml:space="preserve">
          <source>The lifetime constraint &lt;code&gt;'b&lt;/code&gt; for bar() implementation does not match the trait declaration. Ensure lifetime declarations match exactly in both trait declaration and implementation. Example:</source>
          <target state="translated">bar（）実装のライフタイム制約 &lt;code&gt;'b&lt;/code&gt; は、特性宣言と一致しません。ライフタイム宣言が特性宣言と実装の両方で正確に一致するようにします。例：</target>
        </trans-unit>
        <trans-unit id="61076c57b01b556a6cbf075ae8202a67124b97eb" translate="yes" xml:space="preserve">
          <source>The lifetime elision rules require that any function signature with an elided output lifetime must either have</source>
          <target state="translated">ライフタイムエリシオンの規則では、出力のライフタイムが省略されている関数シグネチャは、次のいずれかを持たなければなりません。</target>
        </trans-unit>
        <trans-unit id="15fb2549a777717fb62ea70833166d18eb32b15d" translate="yes" xml:space="preserve">
          <source>The lifetime elision rules require that any function signature with an elided output lifetime must either have:</source>
          <target state="translated">ライフタイムエリシオンの規則は、出力のライフタイムが省略された関数シグネチャは、次のいずれかを持たなければならないことを要求します。</target>
        </trans-unit>
        <trans-unit id="7914129f994f43353c3efa7974019d9a960355fb" translate="yes" xml:space="preserve">
          <source>The lifetime for the returned slice is inferred from its usage. To prevent accidental misuse, it's suggested to tie the lifetime to whichever source lifetime is safe in the context, such as by providing a helper function taking the lifetime of a host value for the slice, or by explicit annotation.</source>
          <target state="translated">返されたスライスの寿命は、その使用法から推測されます。誤って誤用されることを防ぐために、スライスのホスト値の寿命を取るヘルパー関数を提供したり、明示的なアノテーションを行うなど、コンテキストで安全なソースの寿命に結びつけることが推奨されています。</target>
        </trans-unit>
        <trans-unit id="af0f1e1de97ff5087fa423eab95c1e381b7b3ee8" translate="yes" xml:space="preserve">
          <source>The lifetime of the returned &lt;code&gt;Cursor&lt;/code&gt; is bound to that of the &lt;code&gt;CursorMut&lt;/code&gt;, which means it cannot outlive the &lt;code&gt;CursorMut&lt;/code&gt; and that the &lt;code&gt;CursorMut&lt;/code&gt; is frozen for the lifetime of the &lt;code&gt;Cursor&lt;/code&gt;.</source>
          <target state="translated">返されるの寿命 &lt;code&gt;Cursor&lt;/code&gt; のようにバインドされ &lt;code&gt;CursorMut&lt;/code&gt; それは長生きできないことを意味し、 &lt;code&gt;CursorMut&lt;/code&gt; をしていること &lt;code&gt;CursorMut&lt;/code&gt; はの寿命のために凍結される &lt;code&gt;Cursor&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="57046a8e7fbf89990ae303fb2235f525d1c99061" translate="yes" xml:space="preserve">
          <source>The lifetime parameter declaration after &lt;code&gt;impl&lt;/code&gt; and its use after the type name are required, but we&amp;rsquo;re not required to annotate the lifetime of the reference to &lt;code&gt;self&lt;/code&gt; because of the first elision rule.</source>
          <target state="translated">&lt;code&gt;impl&lt;/code&gt; の後のライフタイムパラメータ宣言と型名の後のその使用が必要ですが、最初の省略ルールのため、参照のライフタイムに &lt;code&gt;self&lt;/code&gt; の注釈を付ける必要はありません。</target>
        </trans-unit>
        <trans-unit id="37f7629efc4022ff5cf0b561478f77607b602987" translate="yes" xml:space="preserve">
          <source>The lifetime parameters of the method do not match the trait declaration.</source>
          <target state="translated">メソッドのライフタイムパラメータが形質宣言と一致しません。</target>
        </trans-unit>
        <trans-unit id="14f07422d02861a626046c58ce643a2a52da0ac8" translate="yes" xml:space="preserve">
          <source>The line &lt;code&gt;index out of bounds: the len is 1 but the index is 1&lt;/code&gt; is an error message intended for programmers. It won&amp;rsquo;t help our end users understand what happened and what they should do instead. Let&amp;rsquo;s fix that now.</source>
          <target state="translated">&lt;code&gt;index out of bounds: the len is 1 but the index is 1&lt;/code&gt; の行インデックス：lenは1ですが、インデックスは1です。これは、プログラマー向けのエラーメッセージです。これは、エンドユーザーが何が起こったか、代わりに何をすべきかを理解するのに役立ちません。それを修正しましょう。</target>
        </trans-unit>
        <trans-unit id="5a0147b8f24f32bab15f7fb8959607d1c4391ac2" translate="yes" xml:space="preserve">
          <source>The line is:</source>
          <target state="translated">セリフは</target>
        </trans-unit>
        <trans-unit id="de1c3b88f137cbbbccea4f427174e92d6650dd55" translate="yes" xml:space="preserve">
          <source>The lines execute in the order in which they appear in the &lt;code&gt;main&lt;/code&gt; function. First, the &amp;ldquo;Hello, world!&amp;rdquo; message prints, and then &lt;code&gt;another_function&lt;/code&gt; is called and its message is printed.</source>
          <target state="translated">行は、 &lt;code&gt;main&lt;/code&gt; 関数に表示される順序で実行されます。まず、「Hello、world！」メッセージが出力され、 &lt;code&gt;another_function&lt;/code&gt; が呼び出されてそのメッセージが出力されます。</target>
        </trans-unit>
        <trans-unit id="a2f50a40f788fe52620261459fe43b43f06256a8" translate="yes" xml:space="preserve">
          <source>The linkage of the C runtime is configured to respect the &lt;code&gt;crt-static&lt;/code&gt; target feature. These target features are typically configured from the command line via flags to the compiler itself. For example to enable a static runtime you would execute:</source>
          <target state="translated">Cランタイムのリンケージは、 &lt;code&gt;crt-static&lt;/code&gt; ターゲット機能を尊重するように構成されています。これらのターゲット機能は、通常、コマンドラインからフラグを介してコンパイラー自体に構成されます。たとえば、静的ランタイムを有効にするには、次を実行します。</target>
        </trans-unit>
        <trans-unit id="efca89d0995e1ff0c39cef27089410685b77deb1" translate="yes" xml:space="preserve">
          <source>The list of derivable traits provided in this appendix is not comprehensive: libraries can implement &lt;code&gt;derive&lt;/code&gt; for their own traits, making the list of traits you can use &lt;code&gt;derive&lt;/code&gt; with truly open-ended. Implementing &lt;code&gt;derive&lt;/code&gt; involves using a procedural macro, which is covered in the &lt;a href=&quot;ch19-06-macros#macros&quot;&gt;&amp;ldquo;Macros&amp;rdquo;&lt;/a&gt; section of Chapter 19.</source>
          <target state="translated">この付録で提供されている派生可能なトレイトのリストは包括的ではありません。ライブラリは独自のトレイトの &lt;code&gt;derive&lt;/code&gt; を実装でき、使用できるトレイトのリストを完全にオープンエンドで &lt;code&gt;derive&lt;/code&gt; できます。 &lt;code&gt;derive&lt;/code&gt; 実装には、手続き型マクロの使用が含まれます。これについては、第19章の&lt;a href=&quot;ch19-06-macros#macros&quot;&gt;「マクロ」&lt;/a&gt;セクションで説明しています。</target>
        </trans-unit>
        <trans-unit id="e9a2965c85bdbd082d28a62c5ab1cef15f730b46" translate="yes" xml:space="preserve">
          <source>The list of types is:</source>
          <target state="translated">タイプの一覧です。</target>
        </trans-unit>
        <trans-unit id="91f214c30e2ceb29652b72be6f5c77765c1026b7" translate="yes" xml:space="preserve">
          <source>The literal characters &lt;code&gt;{&lt;/code&gt; and &lt;code&gt;}&lt;/code&gt; may be included in a string by preceding them with the same character. For example, the &lt;code&gt;{&lt;/code&gt; character is escaped with &lt;code&gt;{{&lt;/code&gt; and the &lt;code&gt;}&lt;/code&gt; character is escaped with &lt;code&gt;}}&lt;/code&gt;.</source>
          <target state="translated">リテラル文字 &lt;code&gt;{&lt;/code&gt; および &lt;code&gt;}&lt;/code&gt; は、それらの前に同じ文字を付けることにより、文字列に含めることができます。たとえば、 &lt;code&gt;{&lt;/code&gt; 文字は &lt;code&gt;{{&lt;/code&gt; でエスケープされ、 &lt;code&gt;}&lt;/code&gt; 文字は &lt;code&gt;}}&lt;/code&gt; でエスケープされます。</target>
        </trans-unit>
        <trans-unit id="d5be7b0512e1a505e9266eb524c4b5165ed24536" translate="yes" xml:space="preserve">
          <source>The lock could not be acquired at this time because the operation would otherwise block.</source>
          <target state="translated">この時点でロックを取得できなかったのは、操作がブロックされていたためです。</target>
        </trans-unit>
        <trans-unit id="ca27685a95f0186521159c6d95fa9cb158ac3333" translate="yes" xml:space="preserve">
          <source>The lock could not be acquired because another thread failed while holding the lock.</source>
          <target state="translated">ロックを保持中に別のスレッドが失敗したため、ロックを取得できませんでした。</target>
        </trans-unit>
        <trans-unit id="e835ab2030797bd0af68c5e546090096d0ef15ed" translate="yes" xml:space="preserve">
          <source>The lock is released when the returned lock goes out of scope. The returned guard also implements the &lt;a href=&quot;trait.read&quot;&gt;&lt;code&gt;Read&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;trait.bufread&quot;&gt;&lt;code&gt;BufRead&lt;/code&gt;&lt;/a&gt; traits for accessing the underlying data.</source>
          <target state="translated">返されたロックが範囲外になると、ロックは解放されます。返されたガードは、基になるデータにアクセスするための&lt;a href=&quot;trait.read&quot;&gt; &lt;code&gt;Read&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;trait.bufread&quot;&gt; &lt;code&gt;BufRead&lt;/code&gt; &lt;/a&gt;トレイトも実装します。</target>
        </trans-unit>
        <trans-unit id="ca99507e16c078ed3bf090ad447532972842294c" translate="yes" xml:space="preserve">
          <source>The lock is released when the returned lock goes out of scope. The returned guard also implements the &lt;a href=&quot;trait.write&quot;&gt;&lt;code&gt;Write&lt;/code&gt;&lt;/a&gt; trait for writing data.</source>
          <target state="translated">The lock is released when the returned lock goes out of scope. The returned guard also implements the &lt;a href=&quot;trait.write&quot;&gt; &lt;code&gt;Write&lt;/code&gt; &lt;/a&gt; trait for writing data.</target>
        </trans-unit>
        <trans-unit id="95f3d5bdf30a84c247ddb912c9e27503ec850ddb" translate="yes" xml:space="preserve">
          <source>The lock is released when the returned lock goes out of scope. The returned guard also implements the &lt;code&gt;Write&lt;/code&gt; trait for writing data.</source>
          <target state="translated">返されたロックが範囲外になると、ロックは解放されます。返されたガードは、データを書き込むための &lt;code&gt;Write&lt;/code&gt; トレイトも実装します。</target>
        </trans-unit>
        <trans-unit id="9fbc8134425c3ce849c012cee6ed6bdb948d21a6" translate="yes" xml:space="preserve">
          <source>The logic around the &lt;code&gt;value&lt;/code&gt; field we&amp;rsquo;ve just described is defined in Listing 13-10.</source>
          <target state="translated">今説明した &lt;code&gt;value&lt;/code&gt; フィールドの周りのロジックは、リスト13-10で定義されています。</target>
        </trans-unit>
        <trans-unit id="f2cf3737106dde9e749616b8670f272a444680a9" translate="yes" xml:space="preserve">
          <source>The lower bound of the range (inclusive).</source>
          <target state="translated">範囲の下界(含む)。</target>
        </trans-unit>
        <trans-unit id="0766d14228f909fbfdac3f3dca197e2a666359ec" translate="yes" xml:space="preserve">
          <source>The lower-level cause of this error, if any.</source>
          <target state="translated">このエラーの下位レベルの原因がある場合。</target>
        </trans-unit>
        <trans-unit id="4b8803f6ab5b8d7b772e6a580f89ee4b72aef2f4" translate="yes" xml:space="preserve">
          <source>The lower-level cause of this error, if any. &lt;a href=&quot;../../error/trait.error#method.cause&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">このエラーの下位レベルの原因（ある場合）。&lt;a href=&quot;../../error/trait.error#method.cause&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5980cf0091c024091baef1d2b8180b13d7e8fb92" translate="yes" xml:space="preserve">
          <source>The lower-level cause of this error, if any. &lt;a href=&quot;../error/trait.error#method.cause&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">このエラーの下位レベルの原因（ある場合）。&lt;a href=&quot;../error/trait.error#method.cause&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f757a43bf56678673d64a896a7ea59d83e9d1668" translate="yes" xml:space="preserve">
          <source>The lower-level cause of this error, if any. &lt;a href=&quot;error/trait.error#method.cause&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">このエラーの下位レベルの原因（ある場合）。&lt;a href=&quot;error/trait.error#method.cause&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="828185ce8f6bedf0299995b3c4e9cb20b7a41ecd" translate="yes" xml:space="preserve">
          <source>The lower-level source of this error, if any.</source>
          <target state="translated">このエラーの下位レベルのソースがある場合は、その下位レベルのソース。</target>
        </trans-unit>
        <trans-unit id="ea0a6930dc7de4d466ce55f6448d31ae162ca38c" translate="yes" xml:space="preserve">
          <source>The lower-level source of this error, if any. &lt;a href=&quot;../../error/trait.error#method.source&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">このエラーの下位レベルのソース（存在する場合）。&lt;a href=&quot;../../error/trait.error#method.source&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="fb0a1822fe706b0e16bb4cab78928338d81339e3" translate="yes" xml:space="preserve">
          <source>The lower-level source of this error, if any. &lt;a href=&quot;../error/trait.error#method.source&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">このエラーの下位レベルのソース（存在する場合）。&lt;a href=&quot;../error/trait.error#method.source&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="bccd557ca491cf82db4f740ce89716ec64f4fabf" translate="yes" xml:space="preserve">
          <source>The lower-level source of this error, if any. &lt;a href=&quot;error/trait.error#method.source&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">このエラーの下位レベルのソース（存在する場合）。&lt;a href=&quot;error/trait.error#method.source&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f6b9226fd8ae01998a5ebc10002aa19b3691743f" translate="yes" xml:space="preserve">
          <source>The machine code for &lt;code&gt;foo::&amp;lt;u8&amp;gt;()&lt;/code&gt;, &lt;code&gt;foo::&amp;lt;bool&amp;gt;()&lt;/code&gt;, &lt;code&gt;foo::&amp;lt;String&amp;gt;()&lt;/code&gt;, or any other type substitution is different. Hence the compiler generates the implementation on-demand. If you call &lt;code&gt;foo()&lt;/code&gt; with a &lt;code&gt;bool&lt;/code&gt; parameter, the compiler will only generate code for &lt;code&gt;foo::&amp;lt;bool&amp;gt;()&lt;/code&gt;. When we have additional type parameters, the number of monomorphized implementations the compiler generates does not grow drastically, since the compiler will only generate an implementation if the function is called with unparametrized substitutions (i.e., substitutions where none of the substituted types are themselves parameterized).</source>
          <target state="translated">The machine code for &lt;code&gt;foo::&amp;lt;u8&amp;gt;()&lt;/code&gt; , &lt;code&gt;foo::&amp;lt;bool&amp;gt;()&lt;/code&gt; , &lt;code&gt;foo::&amp;lt;String&amp;gt;()&lt;/code&gt; , or any other type substitution is different. Hence the compiler generates the implementation on-demand. If you call &lt;code&gt;foo()&lt;/code&gt; with a &lt;code&gt;bool&lt;/code&gt; parameter, the compiler will only generate code for &lt;code&gt;foo::&amp;lt;bool&amp;gt;()&lt;/code&gt; . When we have additional type parameters, the number of monomorphized implementations the compiler generates does not grow drastically, since the compiler will only generate an implementation if the function is called with unparametrized substitutions (i.e., substitutions where none of the substituted types are themselves parameterized).</target>
        </trans-unit>
        <trans-unit id="9e0846c263b7366386582dfe4d412a3ad4ba7b9f" translate="yes" xml:space="preserve">
          <source>The machine code for &lt;code&gt;foo::&amp;lt;u8&amp;gt;()&lt;/code&gt;, &lt;code&gt;foo::&amp;lt;bool&amp;gt;()&lt;/code&gt;, &lt;code&gt;foo::&amp;lt;String&amp;gt;()&lt;/code&gt;, or any other type substitution is different. Hence the compiler generates the implementation on-demand. If you call &lt;code&gt;foo()&lt;/code&gt; with a &lt;code&gt;bool&lt;/code&gt; parameter, the compiler will only generate code for &lt;code&gt;foo::&amp;lt;bool&amp;gt;()&lt;/code&gt;. When we have additional type parameters, the number of monomorphized implementations the compiler generates does not grow drastically, since the compiler will only generate an implementation if the function is called with unparametrized substitutions (i.e., substitutions where none of the substituted types are themselves parametrized).</source>
          <target state="translated">&lt;code&gt;foo::&amp;lt;u8&amp;gt;()&lt;/code&gt; 、 &lt;code&gt;foo::&amp;lt;bool&amp;gt;()&lt;/code&gt; 、 &lt;code&gt;foo::&amp;lt;String&amp;gt;()&lt;/code&gt; 、またはその他の型置換のマシンコードは異なります。したがって、コンパイラーはオンデマンドで実装を生成します。 &lt;code&gt;bool&lt;/code&gt; パラメータを指定して &lt;code&gt;foo()&lt;/code&gt; を呼び出すと、コンパイラは &lt;code&gt;foo::&amp;lt;bool&amp;gt;()&lt;/code&gt; コードのみを生成します。追加の型パラメーターがある場合、関数がパラメーター化されていない置換（つまり、置換された型のいずれもパラメーター化されていない置換）を使用して呼び出された場合にのみコンパイラーが実装を生成するため、コンパイラーが生成する単形化実装の数は大幅に増加しません。 。</target>
        </trans-unit>
        <trans-unit id="ec5d54a07ee0f8ac568e82f61b376d035a168bca" translate="yes" xml:space="preserve">
          <source>The macro itself will decide how to interpret such a token and whether to produce an error or not.</source>
          <target state="translated">マクロ自体は、そのようなトークンをどのように解釈し、エラーを生成するかどうかを決定します。</target>
        </trans-unit>
        <trans-unit id="8db5958c7dabf9cedcc4db6e6fa16a59d45c2565" translate="yes" xml:space="preserve">
          <source>The macro works by using the &lt;code&gt;Debug&lt;/code&gt; implementation of the type of the given expression to print the value to &lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_streams#Standard_error_(stderr)&quot;&gt;stderr&lt;/a&gt; along with the source location of the macro invocation as well as the source code of the expression.</source>
          <target state="translated">マクロは、指定された式のタイプの &lt;code&gt;Debug&lt;/code&gt; 実装を使用して、マクロ呼び出しのソースの場所と式のソースコードとともに値を&lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_streams#Standard_error_(stderr)&quot;&gt;stderr&lt;/a&gt;に出力することで機能します。</target>
        </trans-unit>
        <trans-unit id="9498e8eb390e83cb5dbd448b585676f4b5c37123" translate="yes" xml:space="preserve">
          <source>The macro wraps any number of static declarations and makes them thread local. Publicity and attributes for each static are allowed. Example:</source>
          <target state="translated">このマクロは、任意の数のスタティック宣言をラップしてスレッドローカルにします。各スタティックのパブリシティとアトリビュートが許可されています。例。</target>
        </trans-unit>
        <trans-unit id="2eb59c956ec6e4722a7e8cfdea3a410b913da22e" translate="yes" xml:space="preserve">
          <source>The main aim of lifetimes is to prevent dangling references, which cause a program to reference data other than the data it&amp;rsquo;s intended to reference. Consider the program in Listing 10-17, which has an outer scope and an inner scope.</source>
          <target state="translated">ライフタイムの主な目的は、プログラムが参照する予定のデータ以外のデータを参照する原因となる参照のダングリングを防ぐことです。リスト10-17のプログラムを考えてください。このプログラムには、外側のスコープと内側のスコープがあります。</target>
        </trans-unit>
        <trans-unit id="c087688652f35bf8ea7f8323996c74d4edfcf197" translate="yes" xml:space="preserve">
          <source>The main benefit of using methods instead of functions, in addition to using method syntax and not having to repeat the type of &lt;code&gt;self&lt;/code&gt; in every method&amp;rsquo;s signature, is for organization. We&amp;rsquo;ve put all the things we can do with an instance of a type in one &lt;code&gt;impl&lt;/code&gt; block rather than making future users of our code search for capabilities of &lt;code&gt;Rectangle&lt;/code&gt; in various places in the library we provide.</source>
          <target state="translated">メソッド構文を使用し、すべてのメソッドのシグネチャで &lt;code&gt;self&lt;/code&gt; のタイプを繰り返す必要がないことに加えて、関数の代わりにメソッドを使用する主な利点は、整理のためです。コードの将来のユーザーに、提供するライブラリのさまざまな場所で &lt;code&gt;Rectangle&lt;/code&gt; の機能を検索させるのではなく、型のインスタンスで実行できるすべてのことを1つの &lt;code&gt;impl&lt;/code&gt; ブロックに入れました。</target>
        </trans-unit>
        <trans-unit id="8008407990a4be341211e8be036085a004b45e43" translate="yes" xml:space="preserve">
          <source>The main error message, &amp;ldquo;mismatched types,&amp;rdquo; reveals the core issue with this code. The definition of the function &lt;code&gt;plus_one&lt;/code&gt; says that it will return an &lt;code&gt;i32&lt;/code&gt;, but statements don&amp;rsquo;t evaluate to a value, which is expressed by &lt;code&gt;()&lt;/code&gt;, an empty tuple. Therefore, nothing is returned, which contradicts the function definition and results in an error. In this output, Rust provides a message to possibly help rectify this issue: it suggests removing the semicolon, which would fix the error.</source>
          <target state="translated">主なエラーメッセージである「型の不一致」は、このコードの中心的な問題を示しています。関数 &lt;code&gt;plus_one&lt;/code&gt; の定義は、それが &lt;code&gt;i32&lt;/code&gt; を返すことを示していますが、ステートメントは、空のタプル &lt;code&gt;()&lt;/code&gt; で表される値に評価されません。したがって、何も返されず、関数定義と矛盾し、エラーが発生します。この出力では、Rustがこの問題の修正に役立つ可能性のあるメッセージを提供しています。エラーを修正するセミコロンを削除することを提案しています。</target>
        </trans-unit>
        <trans-unit id="573ea76510aaa810e82bed4691dcc0e4c2771be9" translate="yes" xml:space="preserve">
          <source>The main place you'll see &lt;code&gt;!&lt;/code&gt; used explicitly is in generic code. Consider the &lt;a href=&quot;str/trait.fromstr&quot;&gt;&lt;code&gt;FromStr&lt;/code&gt;&lt;/a&gt; trait:</source>
          <target state="translated">あなたが見るメインの場所 &lt;code&gt;!&lt;/code&gt; 明示的に使用されるのは一般的なコードです。&lt;a href=&quot;str/trait.fromstr&quot;&gt; &lt;code&gt;FromStr&lt;/code&gt; &lt;/a&gt;トレイトについて考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="3347fce894ee36b7a76776d17f6b05d7ee4e0c6f" translate="yes" xml:space="preserve">
          <source>The main thread will wait for the spawned thread to finish and then run its &lt;code&gt;for&lt;/code&gt; loop, so the output won&amp;rsquo;t be interleaved anymore, as shown here:</source>
          <target state="translated">メインスレッドは、生成されたスレッドが完了するのを待ってから、その &lt;code&gt;for&lt;/code&gt; ループを実行するため、次のように出力がインターリーブされなくなります。</target>
        </trans-unit>
        <trans-unit id="d7af4b9befadab1a133dab8d7948b44dbc8d708d" translate="yes" xml:space="preserve">
          <source>The main thread will wait with a timeout on the condvar and then leave once the boolean has been updated and notified.</source>
          <target state="translated">メインスレッドはコンドバーのタイムアウトで待機し、ブーリアンが更新されて通知されると退出します。</target>
        </trans-unit>
        <trans-unit id="2f4d9785a094ac7050147e12df1b0f82f8cae6fe" translate="yes" xml:space="preserve">
          <source>The main use case for type synonyms is to reduce repetition. For example, we might have a lengthy type like this:</source>
          <target state="translated">型同義語の主な使用例は、繰り返しを減らすことです。例えば、次のような長い型があるかもしれません。</target>
        </trans-unit>
        <trans-unit id="e1aa73c2c8bcfa6f25fb308f2154aee4987ca459" translate="yes" xml:space="preserve">
          <source>The main way to use Boolean values is through conditionals, such as an &lt;code&gt;if&lt;/code&gt; expression. We&amp;rsquo;ll cover how &lt;code&gt;if&lt;/code&gt; expressions work in Rust in the &lt;a href=&quot;ch03-05-control-flow#control-flow&quot;&gt;&amp;ldquo;Control Flow&amp;rdquo;&lt;/a&gt; section.</source>
          <target state="translated">ブール値を使用する主な方法は、 &lt;code&gt;if&lt;/code&gt; 式などの条件を使用することです。私たちはどのように取り上げる &lt;code&gt;if&lt;/code&gt; の式はで錆で働く&lt;a href=&quot;ch03-05-control-flow#control-flow&quot;&gt;「制御フロー」&lt;/a&gt;セクション。</target>
        </trans-unit>
        <trans-unit id="67f97a592dc5c37dc58d2c3fd741d8753b33f60e" translate="yes" xml:space="preserve">
          <source>The mapping to &lt;a href=&quot;../io/enum.errorkind&quot;&gt;&lt;code&gt;ErrorKind&lt;/code&gt;&lt;/a&gt;s is not part of the compatibility contract of the function, especially the &lt;a href=&quot;../io/enum.errorkind#variant.Other&quot;&gt;&lt;code&gt;Other&lt;/code&gt;&lt;/a&gt; kind might change to more specific kinds in the future.</source>
          <target state="translated">&lt;a href=&quot;../io/enum.errorkind&quot;&gt; &lt;code&gt;ErrorKind&lt;/code&gt; &lt;/a&gt;へのマッピングは、関数の互換性規約の一部ではありません。特に、&lt;a href=&quot;../io/enum.errorkind#variant.Other&quot;&gt; &lt;code&gt;Other&lt;/code&gt; &lt;/a&gt;種類は、将来、より具体的な種類に変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="f8fda3a6ce0d45625dd9cd044a1a98a742c97014" translate="yes" xml:space="preserve">
          <source>The match condition states that the arm only matches if the value of &lt;code&gt;x&lt;/code&gt; is equal to &lt;code&gt;4&lt;/code&gt;, &lt;code&gt;5&lt;/code&gt;, or &lt;code&gt;6&lt;/code&gt;&lt;em&gt;and&lt;/em&gt; if &lt;code&gt;y&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;. When this code runs, the pattern of the first arm matches because &lt;code&gt;x&lt;/code&gt; is &lt;code&gt;4&lt;/code&gt;, but the match guard &lt;code&gt;if y&lt;/code&gt; is false, so the first arm is not chosen. The code moves on to the second arm, which does match, and this program prints &lt;code&gt;no&lt;/code&gt;. The reason is that the &lt;code&gt;if&lt;/code&gt; condition applies to the whole pattern &lt;code&gt;4 | 5 | 6&lt;/code&gt;, not only to the last value &lt;code&gt;6&lt;/code&gt;. In other words, the precedence of a match guard in relation to a pattern behaves like this:</source>
          <target state="translated">アームのみの値場合に一致することを一致条件状態 &lt;code&gt;x&lt;/code&gt; がに等しい &lt;code&gt;4&lt;/code&gt; 、 &lt;code&gt;5&lt;/code&gt; 、または &lt;code&gt;6&lt;/code&gt; &lt;em&gt;及び&lt;/em&gt;場合 &lt;code&gt;y&lt;/code&gt; である &lt;code&gt;true&lt;/code&gt; 。このコードを実行すると、 &lt;code&gt;x&lt;/code&gt; が &lt;code&gt;4&lt;/code&gt; であるため最初のアームのパターンは一致しますが、 &lt;code&gt;if y&lt;/code&gt; がfalseの場合は一致ガードなので、最初のアームは選択されません。コードは一致する2番目のアームに移動し、このプログラムは &lt;code&gt;no&lt;/code&gt; を出力します。その理由は、 &lt;code&gt;if&lt;/code&gt; 条件がパターン &lt;code&gt;4 | 5 | 6&lt;/code&gt; 全体に適用されるためです。5 | 6、最後の値だけでなく &lt;code&gt;6&lt;/code&gt; 。つまり、パターンに対するマッチガードの優先順位は次のようになります。</target>
        </trans-unit>
        <trans-unit id="6477b3c15cf1efd2f96aba3a277d7e0dd00d128c" translate="yes" xml:space="preserve">
          <source>The match guard &lt;code&gt;if n == y&lt;/code&gt; is not a pattern and therefore doesn&amp;rsquo;t introduce new variables. This &lt;code&gt;y&lt;/code&gt;&lt;em&gt;is&lt;/em&gt; the outer &lt;code&gt;y&lt;/code&gt; rather than a new shadowed &lt;code&gt;y&lt;/code&gt;, and we can look for a value that has the same value as the outer &lt;code&gt;y&lt;/code&gt; by comparing &lt;code&gt;n&lt;/code&gt; to &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;if n == y&lt;/code&gt; のマッチガードはパターンではないため、新しい変数は導入されません。この &lt;code&gt;y&lt;/code&gt; が&lt;em&gt;あり&lt;/em&gt;、外側 &lt;code&gt;y&lt;/code&gt; のではなく、新たな影 &lt;code&gt;y&lt;/code&gt; 、我々は外と同じ値を持つ値を探すことができ &lt;code&gt;y&lt;/code&gt; 比較することにより、 &lt;code&gt;n&lt;/code&gt; 個をする &lt;code&gt;y&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0a68bad7489889370013d2c1b380ae26eafd0a34" translate="yes" xml:space="preserve">
          <source>The matched value was assigned in a match guard.</source>
          <target state="translated">マッチした値がマッチガードで割り当てられていました。</target>
        </trans-unit>
        <trans-unit id="da4a7cee97aca95b9c65ea2bcda5404ae104d4f6" translate="yes" xml:space="preserve">
          <source>The maximum duration.</source>
          <target state="translated">最大持続時間。</target>
        </trans-unit>
        <trans-unit id="639334ee92fbc7d55384c7ec82527ac8487a080f" translate="yes" xml:space="preserve">
          <source>The maximum value of an enum was reached, so it cannot be automatically set in the next enum value.</source>
          <target state="translated">列挙型の最大値に達したため、次の列挙型の値に自動的に設定することはできません。</target>
        </trans-unit>
        <trans-unit id="444f3162cb088de418eba38f4a421be7235eea6f" translate="yes" xml:space="preserve">
          <source>The maximum value of an enum was reached, so it cannot be automatically set in the next enum value. Erroneous code example:</source>
          <target state="translated">列挙型の最大値に達したため、次の列挙型の値に自動的に設定することはできません。誤ったコード例。</target>
        </trans-unit>
        <trans-unit id="69d28668979329993270aea55163f780c2136684" translate="yes" xml:space="preserve">
          <source>The memory allocator returned an error</source>
          <target state="translated">メモリアロケータはエラーを返しました。</target>
        </trans-unit>
        <trans-unit id="f691ffd885b1cdd7c3aced4e660ea6b5f2bc5114" translate="yes" xml:space="preserve">
          <source>The memory at &lt;code&gt;buf&lt;/code&gt; needs to have been previously allocated by the same allocator the standard library uses, with a required alignment of exactly 1.</source>
          <target state="translated">The memory at &lt;code&gt;buf&lt;/code&gt; needs to have been previously allocated by the same allocator the standard library uses, with a required alignment of exactly 1.</target>
        </trans-unit>
        <trans-unit id="297bebe1d80f3b348c7c8e6094a67afc0f518766" translate="yes" xml:space="preserve">
          <source>The memory at &lt;code&gt;ptr&lt;/code&gt; needs to have been previously allocated by the same allocator the standard library uses.</source>
          <target state="translated">&lt;code&gt;ptr&lt;/code&gt; のメモリは、標準ライブラリが使用するのと同じアロケータによって事前に割り当てられている必要があります。</target>
        </trans-unit>
        <trans-unit id="533d683a4cce37c267e983c916aea2694b115c42" translate="yes" xml:space="preserve">
          <source>The memory block will contain the following contents after a successful call to &lt;code&gt;grow_zeroed&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;grow_zeroed&lt;/code&gt; の呼び出しが成功すると、メモリブロックには次の内容が含まれます。</target>
        </trans-unit>
        <trans-unit id="9f4c6be6867180c56169b0ceb625f117dffee9cb" translate="yes" xml:space="preserve">
          <source>The memory layout of a &lt;code&gt;struct&lt;/code&gt; is undefined by default to allow for compiler optimizations like field reordering, but it can be fixed with the &lt;a href=&quot;../type-layout#representations&quot;&gt;&lt;code&gt;repr&lt;/code&gt; attribute&lt;/a&gt;. In either case, fields may be given in any order in a corresponding struct &lt;em&gt;expression&lt;/em&gt;; the resulting &lt;code&gt;struct&lt;/code&gt; value will always have the same memory layout.</source>
          <target state="translated">&lt;code&gt;struct&lt;/code&gt; のメモリレイアウトは、フィールドの並べ替えなどのコンパイラの最適化を考慮して、デフォルトでは定義されていませんが、&lt;a href=&quot;../type-layout#representations&quot;&gt; &lt;code&gt;repr&lt;/code&gt; 属性で&lt;/a&gt;修正できます。どちらの場合でも、フィールドは対応する構造体&lt;em&gt;式&lt;/em&gt;で任意の順序で指定できます。結果の &lt;code&gt;struct&lt;/code&gt; 値は常に同じメモリレイアウトになります。</target>
        </trans-unit>
        <trans-unit id="613a15d193cb4b5b9d7d2448a0d26f441bad60d3" translate="yes" xml:space="preserve">
          <source>The memory layout of a &lt;code&gt;union&lt;/code&gt; is undefined by default, but the &lt;code&gt;#[repr(...)]&lt;/code&gt; attribute can be used to fix a layout.</source>
          <target state="translated">&lt;code&gt;union&lt;/code&gt; のメモリレイアウトはデフォルトでは定義されていませんが、 &lt;code&gt;#[repr(...)]&lt;/code&gt; 属性を使用してレイアウトを修正できます。</target>
        </trans-unit>
        <trans-unit id="62988640c5b4ea3199910497b4399a06d9aa4bb8" translate="yes" xml:space="preserve">
          <source>The memory must be requested from the memory allocator at runtime.</source>
          <target state="translated">実行時にメモリをメモリアロケータに要求する必要があります。</target>
        </trans-unit>
        <trans-unit id="5158117ae58dde222908d602ad3b6cfbc19fbd1b" translate="yes" xml:space="preserve">
          <source>The memory must be requested from the operating system at runtime.</source>
          <target state="translated">実行時にオペレーティングシステムからメモリを要求する必要があります。</target>
        </trans-unit>
        <trans-unit id="5fb7e987a9654eee8114bb60b92e8b3cf5d47151" translate="yes" xml:space="preserve">
          <source>The memory referenced by the returned slice must not be accessed through any other pointer (not derived from the return value) for the duration of lifetime &lt;code&gt;'a&lt;/code&gt;. Both read and write accesses are forbidden.</source>
          <target state="translated">The memory referenced by the returned slice must not be accessed through any other pointer (not derived from the return value) for the duration of lifetime &lt;code&gt;'a&lt;/code&gt; . Both read and write accesses are forbidden.</target>
        </trans-unit>
        <trans-unit id="ff115e1f60568ae547418e535b08f2a38631c573" translate="yes" xml:space="preserve">
          <source>The memory referenced by the returned slice must not be mutated for the duration of lifetime &lt;code&gt;'a&lt;/code&gt;, except inside an &lt;code&gt;UnsafeCell&lt;/code&gt;.</source>
          <target state="translated">The memory referenced by the returned slice must not be mutated for the duration of lifetime &lt;code&gt;'a&lt;/code&gt; , except inside an &lt;code&gt;UnsafeCell&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6139b94477b7472bd857c001d753b72d8df9f27e" translate="yes" xml:space="preserve">
          <source>The message can be of any (&lt;code&gt;Any + Send&lt;/code&gt;) type, not just strings.</source>
          <target state="translated">メッセージは、文字列だけでなく、任意の（ &lt;code&gt;Any + Send&lt;/code&gt; ）タイプにすることができます。</target>
        </trans-unit>
        <trans-unit id="3d782721b766f719dd5b6d817f0d6bb437eb7d6a" translate="yes" xml:space="preserve">
          <source>The message is wrapped in a &lt;code&gt;Box&amp;lt;'static + Any + Send&amp;gt;&lt;/code&gt;, which can be accessed later using &lt;a href=&quot;struct.panicinfo#method.payload&quot;&gt;&lt;code&gt;PanicInfo::payload&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">メッセージは &lt;code&gt;Box&amp;lt;'static + Any + Send&amp;gt;&lt;/code&gt; でラップされ、後で&lt;a href=&quot;struct.panicinfo#method.payload&quot;&gt; &lt;code&gt;PanicInfo::payload&lt;/code&gt; &lt;/a&gt;を使用してアクセスできます。</target>
        </trans-unit>
        <trans-unit id="c86a2a43ba3e98f03e1d643c5eb2cb7bce34d7c4" translate="yes" xml:space="preserve">
          <source>The method does no guarding against overflows, so counting elements of an iterator with more than &lt;a href=&quot;../usize/constant.max&quot;&gt;&lt;code&gt;usize::MAX&lt;/code&gt;&lt;/a&gt; elements either produces the wrong result or panics. If debug assertions are enabled, a panic is guaranteed.</source>
          <target state="translated">このメソッドはオーバーフローに対する保護を行わないため、&lt;a href=&quot;../usize/constant.max&quot;&gt; &lt;code&gt;usize::MAX&lt;/code&gt; &lt;/a&gt;要素を超えるイテレータの要素をカウントすると、誤った結果またはパニックが発生します。デバッグアサーションが有効になっている場合、パニックが保証されます。</target>
        </trans-unit>
        <trans-unit id="177a5c2ea6344ea77e9ae3a6db8fc74469cc253c" translate="yes" xml:space="preserve">
          <source>The method does no guarding against overflows, so enumerating more than &lt;a href=&quot;../usize/constant.max&quot;&gt;&lt;code&gt;usize::MAX&lt;/code&gt;&lt;/a&gt; elements either produces the wrong result or panics. If debug assertions are enabled, a panic is guaranteed.</source>
          <target state="translated">このメソッドはオーバーフローに対する保護を行わないため、&lt;a href=&quot;../usize/constant.max&quot;&gt; &lt;code&gt;usize::MAX&lt;/code&gt; &lt;/a&gt;要素以上を列挙すると、誤った結果またはパニックが発生します。デバッグアサーションが有効になっている場合、パニックが保証されます。</target>
        </trans-unit>
        <trans-unit id="3a1826392947e9b9a700c20663562183cfe20bf1" translate="yes" xml:space="preserve">
          <source>The method does no guarding against overflows, so enumerating more than &lt;code&gt;usize::MAX&lt;/code&gt; elements either produces the wrong result or panics. If debug assertions are enabled, a panic is guaranteed.</source>
          <target state="translated">このメソッドはオーバーフローに対する保護を行わないため、 &lt;code&gt;usize::MAX&lt;/code&gt; 要素以上を列挙すると、誤った結果またはパニックが発生します。デバッグアサーションが有効になっている場合、パニックが保証されます。</target>
        </trans-unit>
        <trans-unit id="19d8816b84fe470f79cf77755eeb8ee64e555da5" translate="yes" xml:space="preserve">
          <source>The method does no guarding against overflows, so if there are more than &lt;a href=&quot;../usize/constant.max&quot;&gt;&lt;code&gt;usize::MAX&lt;/code&gt;&lt;/a&gt; non-matching elements, it either produces the wrong result or panics. If debug assertions are enabled, a panic is guaranteed.</source>
          <target state="translated">このメソッドはオーバーフローに対する保護を行わないため、&lt;a href=&quot;../usize/constant.max&quot;&gt; &lt;code&gt;usize::MAX&lt;/code&gt; &lt;/a&gt;以外の一致しない要素がある場合、誤った結果が発生するか、パニックが発生します。デバッグアサーションが有効になっている場合、パニックが保証されます。</target>
        </trans-unit>
        <trans-unit id="1be550addda456adee08f228dc9b4f31db12dda4" translate="yes" xml:space="preserve">
          <source>The method will panic if the given step is &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">指定されたステップが &lt;code&gt;0&lt;/code&gt; の場合、メソッドはパニックになります。</target>
        </trans-unit>
        <trans-unit id="18a6ab41791924ffc3860ab7c005689a5ace692a" translate="yes" xml:space="preserve">
          <source>The minimum alignment of a type.</source>
          <target state="translated">型の最小整列。</target>
        </trans-unit>
        <trans-unit id="d61a28fc808f2bb8277ab6d2dda14e2b5dc3214d" translate="yes" xml:space="preserve">
          <source>The minimum byte alignment for a memory block of this layout.</source>
          <target state="translated">このレイアウトのメモリブロックの最小バイトアライメント。</target>
        </trans-unit>
        <trans-unit id="e621ea6ab30e14c7bfa77e4fee05fb852bfe464d" translate="yes" xml:space="preserve">
          <source>The minimum duration.</source>
          <target state="translated">最低限の持続時間。</target>
        </trans-unit>
        <trans-unit id="5b04e5eee8d92581fabe61b454bd932d16d3b4ee" translate="yes" xml:space="preserve">
          <source>The minimum size in bytes for a memory block of this layout.</source>
          <target state="translated">このレイアウトのメモリ・ブロックの最小サイズをバイト単位で指定します。</target>
        </trans-unit>
        <trans-unit id="4650b1470ff8fe4b9a6a554cb10a84ba4229b041" translate="yes" xml:space="preserve">
          <source>The mirror use case of FFI is also done via the &lt;code&gt;extern&lt;/code&gt; keyword:</source>
          <target state="translated">FFIのミラーの使用例も、 &lt;code&gt;extern&lt;/code&gt; キーワードを介して行われます。</target>
        </trans-unit>
        <trans-unit id="a82559d5a04edc93a72fe140de851778ee358fc2" translate="yes" xml:space="preserve">
          <source>The module tree might remind you of the filesystem&amp;rsquo;s directory tree on your computer; this is a very apt comparison! Just like directories in a filesystem, you use modules to organize your code. And just like files in a directory, we need a way to find our modules.</source>
          <target state="translated">モジュールツリーは、コンピュータ上のファイルシステムのディレクトリツリーを思い出させるかもしれません。これは非常に適切な比較です！ファイルシステムのディレクトリのように、モジュールを使用してコードを整理します。ディレクトリ内のファイルと同じように、モジュールを見つける方法が必要です。</target>
        </trans-unit>
        <trans-unit id="ea4c9b3e2b6f858a3799aa18909b3e42f1061d3e" translate="yes" xml:space="preserve">
          <source>The module tree remains the same, and the function calls in &lt;code&gt;eat_at_restaurant&lt;/code&gt; will work without any modification, even though the definitions live in different files. This technique lets you move modules to new files as they grow in size.</source>
          <target state="translated">モジュールツリーは同じままで、定義が別のファイルにある場合でも、 &lt;code&gt;eat_at_restaurant&lt;/code&gt; の関数呼び出しは変更なしで機能します。この手法では、モジュールのサイズが大きくなるにつれて、モジュールを新しいファイルに移動できます。</target>
        </trans-unit>
        <trans-unit id="fb5cf295cab45b30e8f8d196e49ec369e86db99a" translate="yes" xml:space="preserve">
          <source>The monomorphized version of the code looks like the following. The generic &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; is replaced with the specific definitions created by the compiler:</source>
          <target state="translated">コードのモノモーフィングバージョンは次のようになります。一般的な &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; は、コンパイラーによって作成された特定の定義に置き換えられます。</target>
        </trans-unit>
        <trans-unit id="75cf509b67ca81925881254de671f6530c684e13" translate="yes" xml:space="preserve">
          <source>The more common inherited mutability, where one must have unique access to mutate a value, is one of the key language elements that enables Rust to reason strongly about pointer aliasing, statically preventing crash bugs. Because of that, inherited mutability is preferred, and interior mutability is something of a last resort. Since cell types enable mutation where it would otherwise be disallowed though, there are occasions when interior mutability might be appropriate, or even &lt;em&gt;must&lt;/em&gt; be used, e.g.</source>
          <target state="translated">値を変更するために一意のアクセスが必要な、より一般的な継承された可変性は、Rustがポインタのエイリアスについて強く推論できるようにする主要な言語要素の1つであり、クラッシュバグを静的に防止します。そのため、継承された可変性が優先され、内部の可変性は最後の手段の1つです。細胞型によって突然変異が可能になりますが、そうでなければ許可されないため、内部の突然変異性が適切な場合や、使用する&lt;em&gt;必要&lt;/em&gt;がある場合も&lt;em&gt;あり&lt;/em&gt;ます。たとえば、</target>
        </trans-unit>
        <trans-unit id="22b87181f4af9bcd4494ede540e86fdd7af786b7" translate="yes" xml:space="preserve">
          <source>The most basic pattern in which &lt;code&gt;collect()&lt;/code&gt; is used is to turn one collection into another. You take a collection, call &lt;a href=&quot;trait.iterator#tymethod.next&quot;&gt;&lt;code&gt;iter&lt;/code&gt;&lt;/a&gt; on it, do a bunch of transformations, and then &lt;code&gt;collect()&lt;/code&gt; at the end.</source>
          <target state="translated">&lt;code&gt;collect()&lt;/code&gt; が使用される最も基本的なパターンは、あるコレクションを別のコレクションに変換することです。コレクションを取得し、それに対して&lt;a href=&quot;trait.iterator#tymethod.next&quot;&gt; &lt;code&gt;iter&lt;/code&gt; &lt;/a&gt;を呼び出し、一連の変換を実行してから、最後に &lt;code&gt;collect()&lt;/code&gt; を実行します。</target>
        </trans-unit>
        <trans-unit id="8acfa5660545764d445a8a9080882c9972414cad" translate="yes" xml:space="preserve">
          <source>The most basic usage of the keyword is &lt;code&gt;use path::to::item;&lt;/code&gt;, though a number of convenient shortcuts are supported:</source>
          <target state="translated">The most basic usage of the keyword is &lt;code&gt;use path::to::item;&lt;/code&gt; , though a number of convenient shortcuts are supported:</target>
        </trans-unit>
        <trans-unit id="524cfe2dc48693915271c90c3e4b7d15d2163d53" translate="yes" xml:space="preserve">
          <source>The most likely source of this error is using angle-bracket notation without wrapping the function argument type into a tuple, for example:</source>
          <target state="translated">このエラーの最も可能性の高い原因は、例えば関数の引数型をタプルにラップせずに角度ブラケット記法を使用していることです。</target>
        </trans-unit>
        <trans-unit id="f1fae4bef53f01c296ad8cf52cd2f776bcb2545a" translate="yes" xml:space="preserve">
          <source>The most straightforward smart pointer is a &lt;em&gt;box&lt;/em&gt;, whose type is written &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt;. Boxes allow you to store data on the heap rather than the stack. What remains on the stack is the pointer to the heap data. Refer to Chapter 4 to review the difference between the stack and the heap.</source>
          <target state="translated">最も簡単なスマートポインタは&lt;em&gt;ボックスで&lt;/em&gt;、その型は &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; と書かれています。ボックスを使用すると、スタックではなくヒープにデータを格納できます。スタックに残っているのは、ヒープデータへのポインタです。スタックとヒープの違いを確認するには、第4章を参照してください。</target>
        </trans-unit>
        <trans-unit id="c84503d5e594d47f23b7b930df844dc25ee59200" translate="yes" xml:space="preserve">
          <source>The most surprising behavior occurs when &quot;the same&quot; file is reachable via multiple paths in the module system (usually using the &lt;code&gt;#[path = &quot;...&quot;]&lt;/code&gt; attribute or similar), which can cause what appears to be identical code to return differing values from this function.</source>
          <target state="translated">The most surprising behavior occurs when &quot;the same&quot; file is reachable via multiple paths in the module system (usually using the &lt;code&gt;#[path = &quot;...&quot;]&lt;/code&gt; attribute or similar), which can cause what appears to be identical code to return differing values from this function.</target>
        </trans-unit>
        <trans-unit id="224b0446b4293b35c3feb8b386382ff2882bd862" translate="yes" xml:space="preserve">
          <source>The most widely used form of macros in Rust is &lt;em&gt;declarative macros&lt;/em&gt;. These are also sometimes referred to as &amp;ldquo;macros by example,&amp;rdquo; &amp;ldquo;&lt;code&gt;macro_rules!&lt;/code&gt; macros,&amp;rdquo; or just plain &amp;ldquo;macros.&amp;rdquo; At their core, declarative macros allow you to write something similar to a Rust &lt;code&gt;match&lt;/code&gt; expression. As discussed in Chapter 6, &lt;code&gt;match&lt;/code&gt; expressions are control structures that take an expression, compare the resulting value of the expression to patterns, and then run the code associated with the matching pattern. Macros also compare a value to patterns that are associated with particular code: in this situation, the value is the literal Rust source code passed to the macro; the patterns are compared with the structure of that source code; and the code associated with each pattern, when matched, replaces the code passed to the macro. This all happens during compilation.</source>
          <target state="translated">Rustで最も広く使用されているマクロの形式は&lt;em&gt;宣言型マクロ&lt;/em&gt;です。これらは「 &lt;code&gt;macro_rules!&lt;/code&gt; マクロ」、「macro_rules！」とも呼ばれます。マクロ」または単なる「マクロ」です。基本的に、宣言型マクロを使用すると、Rustの &lt;code&gt;match&lt;/code&gt; 式に似たものを記述できます。第6章で説明したように、 &lt;code&gt;match&lt;/code&gt; 式は、式を取り、式の結果の値をパターンと比較し、一致するパターンに関連付けられたコードを実行する制御構造です。マクロはまた、特定のコードに関連付けられているパターンと値を比較します。この状況では、値はマクロに渡されるリテラルRustソースコードです。パターンはそのソースコードの構造と比較されます。各パターンに関連付けられたコードは、一致すると、マクロに渡されたコードを置き換えます。これはすべてコンパイル中に発生します。</target>
        </trans-unit>
        <trans-unit id="5c8119cbdd49364e9c5037e1b8a03abc1bccdb46" translate="yes" xml:space="preserve">
          <source>The motivation for this design is twofold:</source>
          <target state="translated">このデザインの動機は2つあります。</target>
        </trans-unit>
        <trans-unit id="6fd4e131dbce656fa77aa6dbacb12fee04853072" translate="yes" xml:space="preserve">
          <source>The multi-argument form of this macro panics with a string and has the &lt;a href=&quot;macro.format&quot;&gt;&lt;code&gt;format!&lt;/code&gt;&lt;/a&gt; syntax for building a string.</source>
          <target state="translated">このマクロの複数引数形式は文字列でパニックを起こし、&lt;a href=&quot;macro.format&quot;&gt; &lt;code&gt;format!&lt;/code&gt; &lt;/a&gt;を持っています！文字列を構築するための構文。</target>
        </trans-unit>
        <trans-unit id="ff7a3f839c4dac34de65c2bfcbc13d6c2f460e6c" translate="yes" xml:space="preserve">
          <source>The multiplication assignment operator &lt;code&gt;*=&lt;/code&gt;.</source>
          <target state="translated">乗算代入演算子 &lt;code&gt;*=&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="945e202ccc3f817f464a16a52710aeff055613cc" translate="yes" xml:space="preserve">
          <source>The multiplication operator &lt;code&gt;*&lt;/code&gt;.</source>
          <target state="translated">乗算演算子 &lt;code&gt;*&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="395bf55779b3f4b37031c67eb2f13567f6e766a4" translate="yes" xml:space="preserve">
          <source>The mutability of a pointer does not change its size. As such, &lt;code&gt;&amp;amp;T&lt;/code&gt; and &lt;code&gt;&amp;amp;mut T&lt;/code&gt; have the same size. Likewise for &lt;code&gt;*const T&lt;/code&gt; and &lt;code&gt;*mut T&lt;/code&gt;.</source>
          <target state="translated">ポインターの可変性は、そのサイズを変更しません。そのため、 &lt;code&gt;&amp;amp;T&lt;/code&gt; と &lt;code&gt;&amp;amp;mut T&lt;/code&gt; のサイズは同じです。 &lt;code&gt;*const T&lt;/code&gt; および &lt;code&gt;*mut T&lt;/code&gt; についても同様です。</target>
        </trans-unit>
        <trans-unit id="f42a8b27f0c72155ef0f3b14d7be6cafaaf62841" translate="yes" xml:space="preserve">
          <source>The mutable slice yields mutable references to the elements:</source>
          <target state="translated">変形可能なスライスは、要素への変形可能な参照を生成します。</target>
        </trans-unit>
        <trans-unit id="3c3cbd1ab17a10688ead5cf4d56f2dfc9e512608" translate="yes" xml:space="preserve">
          <source>The mutexes in this module implement a strategy called &quot;poisoning&quot; where a mutex is considered poisoned whenever a thread panics while holding the mutex. Once a mutex is poisoned, all other threads are unable to access the data by default as it is likely tainted (some invariant is not being upheld).</source>
          <target state="translated">このモジュールのミューテックスは「ポイズニング」と呼ばれる戦略を実装しており、ミューテックスを保持している間にスレッドがパニックになると、いつでもミューテックスがポイズニングされているとみなされます。いったんミューテックスがポイズニングされると、他のすべてのスレッドはデータが汚染されている可能性が高いので、デフォルトではデータにアクセスすることができません(何らかの不変量が保持されていない)。</target>
        </trans-unit>
        <trans-unit id="d8b50303b0747d7e3abc95898503b5bde7711980" translate="yes" xml:space="preserve">
          <source>The name chosen for an external crate conflicts with another external crate that has been imported into the current module.</source>
          <target state="translated">外部クレートに選択された名前が、現在のモジュールにインポートされた別の外部クレートと競合します。</target>
        </trans-unit>
        <trans-unit id="d94375d609f70bc0ddb2da1f070fd5b681c30cc1" translate="yes" xml:space="preserve">
          <source>The name for an item declaration conflicts with an external crate's name.</source>
          <target state="translated">アイテム宣言の名前が外部の木箱の名前と競合します。</target>
        </trans-unit>
        <trans-unit id="286d59804da04e407ec36eb2be39e9e0c7ff3343" translate="yes" xml:space="preserve">
          <source>The name must not contain null bytes (&lt;code&gt;\0&lt;/code&gt;).</source>
          <target state="translated">名前にnullバイト（ &lt;code&gt;\0&lt;/code&gt; ）を含めることはできません。</target>
        </trans-unit>
        <trans-unit id="6584162ced4a99e7d4548e6dfca0a1b5adbdbd8e" translate="yes" xml:space="preserve">
          <source>The need for synchronization</source>
          <target state="translated">同期化の必要性</target>
        </trans-unit>
        <trans-unit id="9491a60a88ee503552e1418886a35e38dd1f594f" translate="yes" xml:space="preserve">
          <source>The need for this type arises from the fact that:</source>
          <target state="translated">このタイプの必要性は、その事実から生じる。</target>
        </trans-unit>
        <trans-unit id="3e795b9b16f895fca00c98b1df11fc0d63c7301f" translate="yes" xml:space="preserve">
          <source>The network operation failed because it was not connected yet.</source>
          <target state="translated">まだ接続されていないため、ネットワーク操作に失敗しました。</target>
        </trans-unit>
        <trans-unit id="7c5a2cc50c7976456054417007ed08f73bfd9e80" translate="yes" xml:space="preserve">
          <source>The never type &lt;code&gt;!&lt;/code&gt; is a type with no values, representing the result of computations that never complete. Expressions of type &lt;code&gt;!&lt;/code&gt; can be coerced into any other type.</source>
          <target state="translated">決してタイプしない &lt;code&gt;!&lt;/code&gt; 値のない型で、完了しない計算の結果を表します。タイプの表現 &lt;code&gt;!&lt;/code&gt; 他のタイプに強制することができます。</target>
        </trans-unit>
        <trans-unit id="2876200ee40ea0a4251130e3bb42070db01f59e5" translate="yes" xml:space="preserve">
          <source>The never type is useful with the &lt;code&gt;panic!&lt;/code&gt; macro as well. Remember the &lt;code&gt;unwrap&lt;/code&gt; function that we call on &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; values to produce a value or panic? Here is its definition:</source>
          <target state="translated">neverタイプは &lt;code&gt;panic!&lt;/code&gt; 役立ちます！マクロも。値またはパニックを生成するために &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; 値で呼び出す &lt;code&gt;unwrap&lt;/code&gt; 関数を覚えていますか？以下がその定義です。</target>
        </trans-unit>
        <trans-unit id="56b6326e5da7a2c1bad08c52fe9675cb30d6fc5f" translate="yes" xml:space="preserve">
          <source>The new test for the case-&lt;em&gt;insensitive&lt;/em&gt; search uses &lt;code&gt;&quot;rUsT&quot;&lt;/code&gt; as its query. In the &lt;code&gt;search_case_insensitive&lt;/code&gt; function we&amp;rsquo;re about to add, the query &lt;code&gt;&quot;rUsT&quot;&lt;/code&gt; should match the line containing &lt;code&gt;&quot;Rust:&quot;&lt;/code&gt; with a capital R and match the line &lt;code&gt;&quot;Trust me.&quot;&lt;/code&gt; even though both have different casing from the query. This is our failing test, and it will fail to compile because we haven&amp;rsquo;t yet defined the &lt;code&gt;search_case_insensitive&lt;/code&gt; function. Feel free to add a skeleton implementation that always returns an empty vector, similar to the way we did for the &lt;code&gt;search&lt;/code&gt; function in Listing 12-16 to see the test compile and fail.</source>
          <target state="translated">大文字と&lt;em&gt;小文字を区別しない&lt;/em&gt;検索の新しいテストでは、クエリとして &lt;code&gt;&quot;rUsT&quot;&lt;/code&gt; を使用します。追加する &lt;code&gt;search_case_insensitive&lt;/code&gt; 関数では、クエリ &lt;code&gt;&quot;rUsT&quot;&lt;/code&gt; は &lt;code&gt;&quot;Rust:&quot;&lt;/code&gt; を含む行と大文字のRを一致させ、 &lt;code&gt;&quot;Trust me.&quot;&lt;/code&gt; を一致させる必要があります。どちらもクエリとは大文字と小文字が異なります。これは失敗したテストであり、まだ &lt;code&gt;search_case_insensitive&lt;/code&gt; 関数を定義していないため、コンパイルに失敗します。リスト12-16の &lt;code&gt;search&lt;/code&gt; 関数でテストのコンパイルと失敗を確認する方法と同様に、常に空のベクトルを返すスケルトン実装を自由に追加してください。</target>
        </trans-unit>
        <trans-unit id="9a3696a40107bd6d0870f3607ce5d6e5073b6d6b" translate="yes" xml:space="preserve">
          <source>The newtype pattern is useful for tasks beyond those we&amp;rsquo;ve discussed so far, including statically enforcing that values are never confused and indicating the units of a value. You saw an example of using newtypes to indicate units in Listing 19-15: recall that the &lt;code&gt;Millimeters&lt;/code&gt; and &lt;code&gt;Meters&lt;/code&gt; structs wrapped &lt;code&gt;u32&lt;/code&gt; values in a newtype. If we wrote a function with a parameter of type &lt;code&gt;Millimeters&lt;/code&gt;, we couldn&amp;rsquo;t compile a program that accidentally tried to call that function with a value of type &lt;code&gt;Meters&lt;/code&gt; or a plain &lt;code&gt;u32&lt;/code&gt;.</source>
          <target state="translated">newtypeパターンは、値が混乱しないように静的に適用したり、値の単位を示したりするなど、これまでに説明したタスク以外のタスクに役立ちます。リスト19-15でnewtypesを使って単位を示す例を見ました： &lt;code&gt;Millimeters&lt;/code&gt; and &lt;code&gt;Meters&lt;/code&gt; structsがラップされた &lt;code&gt;u32&lt;/code&gt; 値をnewtypeで思い出したことを思い出してください。タイプ &lt;code&gt;Millimeters&lt;/code&gt; のパラメータを使用して関数を記述した場合、誤ってその関数を &lt;code&gt;Meters&lt;/code&gt; タイプの値または単純な &lt;code&gt;u32&lt;/code&gt; で呼び出そうとしたプログラムをコンパイルできませんでした。</target>
        </trans-unit>
        <trans-unit id="b591edfc8b3d018e277499297a4856c76a36dc2a" translate="yes" xml:space="preserve">
          <source>The next four lines set the configuration information Cargo needs to compile your program: the name, the version, who wrote it, and the edition of Rust to use. Cargo gets your name and email information from your environment, so if that information is not correct, fix the information now and then save the file. We&amp;rsquo;ll talk about the &lt;code&gt;edition&lt;/code&gt; key in Appendix E.</source>
          <target state="translated">次の4行は、Cargoがプログラムをコンパイルするために必要な構成情報を設定します。名前、バージョン、作成者、および使用するRustのエディションです。 Cargoは環境から名前と電子メール情報を取得するため、その情報が正しくない場合は、ここで情報を修正してからファイルを保存します。付録Eで &lt;code&gt;edition&lt;/code&gt; キーについて説明します。</target>
        </trans-unit>
        <trans-unit id="6a7a2603b03740bcea191aea3d000fd9f48ffbb9" translate="yes" xml:space="preserve">
          <source>The next logical question is which style you should choose in your own code and why: the original implementation in Listing 13-28 or the version using iterators in Listing 13-29. Most Rust programmers prefer to use the iterator style. It&amp;rsquo;s a bit tougher to get the hang of at first, but once you get a feel for the various iterator adaptors and what they do, iterators can be easier to understand. Instead of fiddling with the various bits of looping and building new vectors, the code focuses on the high-level objective of the loop. This abstracts away some of the commonplace code so it&amp;rsquo;s easier to see the concepts that are unique to this code, such as the filtering condition each element in the iterator must pass.</source>
          <target state="translated">次の論理的な質問は、独自のコードで選択するスタイルとその理由です。リスト13-28の元の実装、またはリスト13-29の反復子を使用するバージョン。ほとんどのRustプログラマは、イテレータスタイルを使用することを好みます。最初はコツをつかむのは少し難しいですが、さまざまなイテレータアダプタとその機能を理解すると、イテレータが理解しやすくなります。ループのさまざまなビットをいじって新しいベクトルを構築する代わりに、コードはループの高レベルの目的に焦点を合わせています。これにより、一般的なコードの一部が抽象化されるため、イテレータの各要素が渡す必要のあるフィルタリング条件など、このコードに固有の概念が見やすくなります。</target>
        </trans-unit>
        <trans-unit id="57f6548988daa34617ffdf2e9ca86d7e443df79f" translate="yes" xml:space="preserve">
          <source>The next note line tells us that we can set the &lt;code&gt;RUST_BACKTRACE&lt;/code&gt; environment variable to get a backtrace of exactly what happened to cause the error. A &lt;em&gt;backtrace&lt;/em&gt; is a list of all the functions that have been called to get to this point. Backtraces in Rust work as they do in other languages: the key to reading the backtrace is to start from the top and read until you see files you wrote. That&amp;rsquo;s the spot where the problem originated. The lines above the lines mentioning your files are code that your code called; the lines below are code that called your code. These lines might include core Rust code, standard library code, or crates that you&amp;rsquo;re using. Let&amp;rsquo;s try getting a backtrace by setting the &lt;code&gt;RUST_BACKTRACE&lt;/code&gt; environment variable to any value except 0. Listing 9-2 shows output similar to what you&amp;rsquo;ll see.</source>
          <target state="translated">次のメモ行は、 &lt;code&gt;RUST_BACKTRACE&lt;/code&gt; 環境変数を設定して、エラーの原因となった正確な状況のバックトレースを取得できることを示しています。&lt;em&gt;バックトレースは、&lt;/em&gt;このポイントを取得するために呼び出されたすべての関数の一覧です。 Rustのバックトレースは他の言語と同じように機能します。バックトレースを読み取るための鍵は、上から始めて、書き込んだファイルが表示されるまで読み取ることです。それが問題が発生した場所です。ファイルに言及している行の上の行は、コードが呼び出したコードです。以下の行は、コードを呼び出したコードです。これらの行には、コアRustコード、標準ライブラリコード、または使用しているクレートが含まれる場合があります。 &lt;code&gt;RUST_BACKTRACE&lt;/code&gt; を設定してバックトレースを取得してみましょう 環境変数を0以外の任意の値に設定します。リスト9-2に、表示される出力と同様の出力を示します。</target>
        </trans-unit>
        <trans-unit id="771993487043dfd3c7aa5a2390e7d9f0063dbedb" translate="yes" xml:space="preserve">
          <source>The next part of the code, &lt;code&gt;.read_line(&amp;amp;mut guess)&lt;/code&gt;, calls the &lt;a href=&quot;../std/io/struct.stdin#method.read_line&quot;&gt;&lt;code&gt;read_line&lt;/code&gt;&lt;/a&gt; method on the standard input handle to get input from the user. We&amp;rsquo;re also passing one argument to &lt;code&gt;read_line&lt;/code&gt;: &lt;code&gt;&amp;amp;mut guess&lt;/code&gt;.</source>
          <target state="translated">コードの次の部分である &lt;code&gt;.read_line(&amp;amp;mut guess)&lt;/code&gt; は、標準入力ハンドルの&lt;a href=&quot;../std/io/struct.stdin#method.read_line&quot;&gt; &lt;code&gt;read_line&lt;/code&gt; &lt;/a&gt;メソッドを呼び出して、ユーザーから入力を取得します。また、 &lt;code&gt;read_line&lt;/code&gt; に 1つの引数を渡します： &lt;code&gt;&amp;amp;mut guess&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8f3a0383282eca508bd91153f03681dc6f1973f4" translate="yes" xml:space="preserve">
          <source>The next part of the request line is &lt;em&gt;/&lt;/em&gt;, which indicates the &lt;em&gt;Uniform Resource Identifier&lt;/em&gt;&lt;em&gt;(URI)&lt;/em&gt; the client is requesting: a URI is almost, but not quite, the same as a &lt;em&gt;Uniform Resource Locator&lt;/em&gt;&lt;em&gt;(URL)&lt;/em&gt;. The difference between URIs and URLs isn&amp;rsquo;t important for our purposes in this chapter, but the HTTP spec uses the term URI, so we can just mentally substitute URL for URI here.</source>
          <target state="translated">要求行の次の部分は&lt;em&gt;/&lt;/em&gt;で、クライアントが要求しているURI &lt;em&gt;（&lt;/em&gt;&lt;em&gt;Uniform Resource Identifier &lt;/em&gt;&lt;em&gt;）を&lt;/em&gt;示します。URIは、&lt;em&gt;Uniform Resource Locator &lt;/em&gt;&lt;em&gt;（URL）&lt;/em&gt;とほとんど同じですが、まったく同じではありません。この章では、URIとURLの違いは重要ではありませんが、HTTP仕様ではURIという用語を使用しているため、ここではURIをURLの代わりに精神的に置き換えることができます。</target>
        </trans-unit>
        <trans-unit id="504232041214e8dae75346e3d17c4c0bf4814b9b" translate="yes" xml:space="preserve">
          <source>The next part of the test output, which starts with &lt;code&gt;Doc-tests adder&lt;/code&gt;, is for the results of any documentation tests. We don&amp;rsquo;t have any documentation tests yet, but Rust can compile any code examples that appear in our API documentation. This feature helps us keep our docs and our code in sync! We&amp;rsquo;ll discuss how to write documentation tests in the &lt;a href=&quot;ch14-02-publishing-to-crates-io#documentation-comments-as-tests&quot;&gt;&amp;ldquo;Documentation Comments as Tests&amp;rdquo;&lt;/a&gt; section of Chapter 14. For now, we&amp;rsquo;ll ignore the &lt;code&gt;Doc-tests&lt;/code&gt; output.</source>
          <target state="translated">&lt;code&gt;Doc-tests adder&lt;/code&gt; で始まるテスト出力の次の部分は、ドキュメントテストの結果です。ドキュメントテストはまだありませんが、RustはAPIドキュメントに表示されるコード例をコンパイルできます。この機能は、ドキュメントとコードの同期を保つのに役立ちます！ドキュメントテストの作成方法については、第14章の&lt;a href=&quot;ch14-02-publishing-to-crates-io#documentation-comments-as-tests&quot;&gt;「テストとしてのドキュメントコメント」&lt;/a&gt;セクションで説明します。ここでは、 &lt;code&gt;Doc-tests&lt;/code&gt; の出力は無視します。</target>
        </trans-unit>
        <trans-unit id="1ac4585430b879637fa9bf73df289a63ff5c8c8c" translate="yes" xml:space="preserve">
          <source>The next step is to define the procedural macro. At the time of this writing, procedural macros need to be in their own crate. Eventually, this restriction might be lifted. The convention for structuring crates and macro crates is as follows: for a crate named &lt;code&gt;foo&lt;/code&gt;, a custom derive procedural macro crate is called &lt;code&gt;foo_derive&lt;/code&gt;. Let&amp;rsquo;s start a new crate called &lt;code&gt;hello_macro_derive&lt;/code&gt; inside our &lt;code&gt;hello_macro&lt;/code&gt; project:</source>
          <target state="translated">次のステップは、手続き型マクロを定義することです。この記事の執筆時点では、手続き型マクロは独自のクレートに入れる必要があります。最終的には、この制限が解除される可能性があります。次のように構造化木箱やマクロ箱のための規則は次のとおりです。クレートという名前のために &lt;code&gt;foo&lt;/code&gt; という、カスタムは、手続きマクロクレートが呼び出される派生 &lt;code&gt;foo_derive&lt;/code&gt; 。 &lt;code&gt;hello_macro&lt;/code&gt; プロジェクト内で &lt;code&gt;hello_macro_derive&lt;/code&gt; という新しいクレートを開始しましょう。</target>
        </trans-unit>
        <trans-unit id="86c376c4d2f9126074dd6023a007174609449704" translate="yes" xml:space="preserve">
          <source>The next time you run &lt;code&gt;cargo build&lt;/code&gt;, Cargo will update the registry of crates available and reevaluate your &lt;code&gt;rand&lt;/code&gt; requirements according to the new version you have specified.</source>
          <target state="translated">次回、 &lt;code&gt;cargo build&lt;/code&gt; を実行すると、Cargoは使用可能なクレートのレジストリを更新し、指定した新しいバージョンに応じて &lt;code&gt;rand&lt;/code&gt; 要件を再評価します。</target>
        </trans-unit>
        <trans-unit id="14f1a8115e3ecc473c296ccb90a19424fd7f3781" translate="yes" xml:space="preserve">
          <source>The nightly feature &lt;a href=&quot;https://doc.rust-lang.org/unstable-book/language-features/arbitrary-self-types.html&quot;&gt;Arbitrary self types&lt;/a&gt; extends the accepted set of receiver types to also include any type that can dereference to &lt;code&gt;Self&lt;/code&gt;:</source>
          <target state="translated">The nightly feature &lt;a href=&quot;https://doc.rust-lang.org/unstable-book/language-features/arbitrary-self-types.html&quot;&gt;Arbitrary self types&lt;/a&gt; extends the accepted set of receiver types to also include any type that can dereference to &lt;code&gt;Self&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="b3e15e37e03d384e681f27ce15aeb9d3bb4095a8" translate="yes" xml:space="preserve">
          <source>The node that was removed is returned as a new &lt;code&gt;LinkedList&lt;/code&gt; containing only this node. The cursor is moved to point to the next element in the current &lt;code&gt;LinkedList&lt;/code&gt;.</source>
          <target state="translated">削除されたノードは、このノードのみを含む新しい &lt;code&gt;LinkedList&lt;/code&gt; として返されます。カーソルは、現在の &lt;code&gt;LinkedList&lt;/code&gt; 内の次の要素を指すように移動されます。</target>
        </trans-unit>
        <trans-unit id="145ccdcfae9c0bd6f7e5de42ea443500c786c639" translate="yes" xml:space="preserve">
          <source>The nominal type is called the &lt;em&gt;implementing type&lt;/em&gt; and the associable items are the &lt;em&gt;associated items&lt;/em&gt; to the implementing type.</source>
          <target state="translated">公称タイプは&lt;em&gt;実装タイプ&lt;/em&gt;と呼ばれ、&lt;em&gt;関連付け可能なアイテム&lt;/em&gt;は実装タイプに&lt;em&gt;関連付けられたアイテム&lt;/em&gt;です。</target>
        </trans-unit>
        <trans-unit id="a450d39487d717bce9613fc2953a92eb80b07994" translate="yes" xml:space="preserve">
          <source>The note mentions &lt;code&gt;std::cmp::PartialOrd&lt;/code&gt;, which is a &lt;em&gt;trait&lt;/em&gt;. We&amp;rsquo;ll talk about traits in the next section. For now, this error states that the body of &lt;code&gt;largest&lt;/code&gt; won&amp;rsquo;t work for all possible types that &lt;code&gt;T&lt;/code&gt; could be. Because we want to compare values of type &lt;code&gt;T&lt;/code&gt; in the body, we can only use types whose values can be ordered. To enable comparisons, the standard library has the &lt;code&gt;std::cmp::PartialOrd&lt;/code&gt; trait that you can implement on types (see Appendix C for more on this trait). You&amp;rsquo;ll learn how to specify that a generic type has a particular trait in the &lt;a href=&quot;ch10-02-traits#traits-as-parameters&quot;&gt;&amp;ldquo;Traits as Parameters&amp;rdquo;&lt;/a&gt; section, but let&amp;rsquo;s first explore other ways of using generic type parameters.</source>
          <target state="translated">このメモでは、&lt;em&gt;特性&lt;/em&gt;である &lt;code&gt;std::cmp::PartialOrd&lt;/code&gt; について言及しています。次のセクションで特性について説明します。とりあえず、このエラーは、 &lt;code&gt;largest&lt;/code&gt; の本体が &lt;code&gt;T&lt;/code&gt; のすべての可能な型に対して機能しないことを示しています。本文では &lt;code&gt;T&lt;/code&gt; 型の値を比較するため、値を順序付けできる型のみを使用できます。比較を可能にするために、標準ライブラリには、型に実装できる &lt;code&gt;std::cmp::PartialOrd&lt;/code&gt; トレイトがあります（このトレイトの詳細については、付録Cを参照してください）。ジェネリック型が特定の特性を持つように指定する方法については、&lt;a href=&quot;ch10-02-traits#traits-as-parameters&quot;&gt;「パラメーターとしての特性」&lt;/a&gt;セクションで説明しますが、まず、ジェネリック型パラメーターを使用する他の方法について見ていきましょう。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="39a86e3fff1f9b2a932559db164eca88c47636bb" translate="yes" xml:space="preserve">
          <source>The number of arguments passed to a function must match the number of arguments specified in the function signature.</source>
          <target state="translated">関数に渡される引数の数は、関数のシグネチャで指定された引数の数と一致しなければなりません。</target>
        </trans-unit>
        <trans-unit id="1499b95664ab693551effdfbf1800a214feda909" translate="yes" xml:space="preserve">
          <source>The number of elements determines the arity of the tuple. A tuple with &lt;code&gt;n&lt;/code&gt; elements is called an &lt;code&gt;n-ary tuple&lt;/code&gt;. For example, a tuple with 2 elements is a 2-ary tuple.</source>
          <target state="translated">要素の数によって、タプルのアリティが決まります。 &lt;code&gt;n&lt;/code&gt; 個の要素を持つタプルは、 &lt;code&gt;n-ary tuple&lt;/code&gt; と呼ばれます。たとえば、2つの要素を持つタプルは2項タプルです。</target>
        </trans-unit>
        <trans-unit id="29c5008d92a3f283390aac2066e3363b4399cff1" translate="yes" xml:space="preserve">
          <source>The number of elements in an array or slice pattern differed from the number of elements in the array being matched.</source>
          <target state="translated">配列またはスライスパターンの要素数は、一致している配列の要素数とは異なっていました。</target>
        </trans-unit>
        <trans-unit id="110544a8e2a789b8a0779516d37df0cd0dba8ad5" translate="yes" xml:space="preserve">
          <source>The number of operands is the arity of the constructed tuple. Tuple expressions without operands produce the unit tuple. For other tuple expressions, the first written operand initializes the 0th element and subsequent operands initializes the next highest element. For example, in the tuple expression &lt;code&gt;('a', 'b', 'c')&lt;/code&gt;, &lt;code&gt;'a'&lt;/code&gt; initializes the value of the 0th element, &lt;code&gt;'b'&lt;/code&gt; the 1st, and &lt;code&gt;'c'&lt;/code&gt; the 2nd.</source>
          <target state="translated">オペランドの数は、構築されたタプルのアリティです。オペランドのないタプル式は、ユニットタプルを生成します。他のタプル式の場合、最初に書き込まれたオペランドは0番目の要素を初期化し、後続のオペランドは次に高い要素を初期化します。たとえば、タプル式 &lt;code&gt;('a', 'b', 'c')&lt;/code&gt; では、 &lt;code&gt;'a'&lt;/code&gt; は0番目の要素の値を初期化し、 &lt;code&gt;'b'&lt;/code&gt; は1番目、 &lt;code&gt;'c'&lt;/code&gt; は2番目の要素を初期化します。</target>
        </trans-unit>
        <trans-unit id="7202e21ed0c94540f8855e2b43b5089a13dd9685" translate="yes" xml:space="preserve">
          <source>The number of supplied arguments must exactly match the number of defined type parameters.</source>
          <target state="translated">与えられる引数の数は、定義された型パラメータの数と正確に一致しなければなりません。</target>
        </trans-unit>
        <trans-unit id="1505278c99d9fb45d4f4157fc24b25e9be942498" translate="yes" xml:space="preserve">
          <source>The offset being in bounds cannot rely on &quot;wrapping around&quot; the address space. That is, the infinite-precision sum must fit in a &lt;code&gt;usize&lt;/code&gt;.</source>
          <target state="translated">境界内にあるオフセットは、アドレス空間の「折り返し」に依存できません。つまり、無限精度の合計は &lt;code&gt;usize&lt;/code&gt; に収まる必要があります。</target>
        </trans-unit>
        <trans-unit id="eb0b1c110f4f91ff6afa42a1772303d08fd7f686" translate="yes" xml:space="preserve">
          <source>The offset being in bounds cannot rely on &quot;wrapping around&quot; the address space. That is, the infinite-precision sum must fit in a usize.</source>
          <target state="translated">オフセットが境界内にあることは、アドレス空間の「回り込み」に頼ることはできません。つまり、無限精度の和は usize に収まらなければなりません。</target>
        </trans-unit>
        <trans-unit id="dec85f2a58c1002de0f34de579c15b9ae5dcc5c3" translate="yes" xml:space="preserve">
          <source>The offset being in bounds cannot rely on &quot;wrapping around&quot; the address space. That is, the infinite-precision sum, &lt;strong&gt;in bytes&lt;/strong&gt; must fit in a usize.</source>
          <target state="translated">境界内にあるオフセットは、アドレス空間の「折り返し」に依存できません。つまり&lt;strong&gt;、バイト単位&lt;/strong&gt;の無限精度の合計がusizeに収まる必要があり&lt;strong&gt;ます&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="b405bb6eb2033937b629bd683503a6e77a48009c" translate="yes" xml:space="preserve">
          <source>The offset is expressed in number of &lt;code&gt;T&lt;/code&gt; elements, and not bytes. The value returned can be used with the &lt;code&gt;offset&lt;/code&gt; or &lt;code&gt;offset_to&lt;/code&gt; methods.</source>
          <target state="translated">オフセットは、バイトではなく、 &lt;code&gt;T&lt;/code&gt; 要素の数で表されます。返された値は、 &lt;code&gt;offset&lt;/code&gt; または &lt;code&gt;offset_to&lt;/code&gt; メソッドで使用できます。</target>
        </trans-unit>
        <trans-unit id="85ba9b2d34ef606ffd767c5e393592519fd3aa95" translate="yes" xml:space="preserve">
          <source>The offset is expressed in number of &lt;code&gt;T&lt;/code&gt; elements, and not bytes. The value returned can be used with the &lt;code&gt;wrapping_add&lt;/code&gt; method.</source>
          <target state="translated">The offset is expressed in number of &lt;code&gt;T&lt;/code&gt; elements, and not bytes. The value returned can be used with the &lt;code&gt;wrapping_add&lt;/code&gt; method.</target>
        </trans-unit>
        <trans-unit id="1be821c2089924c0d18d107c2c27f16675f5ac1c" translate="yes" xml:space="preserve">
          <source>The offset is relative to the start of the file and thus independent from the current cursor.</source>
          <target state="translated">オフセットはファイルの先頭からの相対的なもので、現在のカーソルからは独立しています。</target>
        </trans-unit>
        <trans-unit id="084e82e27a45f945c98a971924845d2bbfc865a4" translate="yes" xml:space="preserve">
          <source>The offset is relative to the start of the file and thus independent from the current cursor. The current cursor &lt;strong&gt;is&lt;/strong&gt; affected by this function, it is set to the end of the read.</source>
          <target state="translated">オフセットはファイルの先頭を基準としているため、現在のカーソルからは独立しています。現在のカーソル&lt;strong&gt;は&lt;/strong&gt;この関数の影響を受け、読み取りの最後に設定されます。</target>
        </trans-unit>
        <trans-unit id="caf802013d8abd4267e3b977c2a718d4ec2a76b7" translate="yes" xml:space="preserve">
          <source>The offset is relative to the start of the file and thus independent from the current cursor. The current cursor &lt;strong&gt;is&lt;/strong&gt; affected by this function, it is set to the end of the write.</source>
          <target state="translated">オフセットはファイルの先頭を基準としているため、現在のカーソルからは独立しています。現在のカーソル&lt;strong&gt;は&lt;/strong&gt;この関数の影響を受け、書き込みの終わりに設定されます。</target>
        </trans-unit>
        <trans-unit id="e661f5d3042445d2052a045a18f9872b66b5bc29" translate="yes" xml:space="preserve">
          <source>The old borrow checker has known soundness issues that are basically impossible to fix. The new NLL-based borrow checker is the fix.</source>
          <target state="translated">古い借用チェッカーは、基本的に修正が不可能な健全性の問題が知られています。それを修正してくれるのがNLLベースの新しい借用チェッカーです。</target>
        </trans-unit>
        <trans-unit id="ff9f5d5ca24724dc4d44a56e5f4a630aa34c4326" translate="yes" xml:space="preserve">
          <source>The one exception is the implicit &lt;code&gt;Self&lt;/code&gt; type of a trait. A trait does not have an implicit &lt;code&gt;Sized&lt;/code&gt; bound as this is incompatible with &lt;a href=&quot;../../book/ch17-02-trait-objects&quot;&gt;trait object&lt;/a&gt;s where, by definition, the trait needs to work with all possible implementors, and thus could be any size.</source>
          <target state="translated">1つの例外は、特性の暗黙の &lt;code&gt;Self&lt;/code&gt; タイプです。トレイトには暗黙の &lt;code&gt;Sized&lt;/code&gt; バウンドはありません。これは、&lt;a href=&quot;../../book/ch17-02-trait-objects&quot;&gt;トレイトオブジェクト&lt;/a&gt;と互換性がないためです。つまり、トレイトは、可能なすべてのインプリメンターと連携する必要があるため、任意のサイズにすることができます。</target>
        </trans-unit>
        <trans-unit id="251eb8c6b3ec1dc5000df1aa3f1d9769e8fc67e3" translate="yes" xml:space="preserve">
          <source>The only case where such wrapping can occur is when one divides &lt;code&gt;MIN / -1&lt;/code&gt; on a signed type (where &lt;code&gt;MIN&lt;/code&gt; is the negative minimal value for the type); this is equivalent to &lt;code&gt;-MIN&lt;/code&gt;, a positive value that is too large to represent in the type. In such a case, this function returns &lt;code&gt;MIN&lt;/code&gt; itself.</source>
          <target state="translated">このようなラッピングが発生する唯一のケースは、符号付きの型で &lt;code&gt;MIN / -1&lt;/code&gt; を除算する場合です（ &lt;code&gt;MIN&lt;/code&gt; は型の負の最小値です）。これは、タイプで表すには大きすぎる正の値 &lt;code&gt;-MIN&lt;/code&gt; と同等です。このような場合、この関数は &lt;code&gt;MIN&lt;/code&gt; 自体を返します。</target>
        </trans-unit>
        <trans-unit id="76c053c143fda09cee97a50ed7a5afba7b9b021c" translate="yes" xml:space="preserve">
          <source>The only case where such wrapping can occur is when one negates &lt;code&gt;MIN&lt;/code&gt; on a signed type (where &lt;code&gt;MIN&lt;/code&gt; is the negative minimal value for the type); this is a positive value that is too large to represent in the type. In such a case, this function returns &lt;code&gt;MIN&lt;/code&gt; itself.</source>
          <target state="translated">このような折り返しが発生する可能性があるのは、署名された型の &lt;code&gt;MIN&lt;/code&gt; を否定する場合のみです（ &lt;code&gt;MIN&lt;/code&gt; は型の負の最小値です）。これは、タイプで表すには大きすぎる正の値です。このような場合、この関数は &lt;code&gt;MIN&lt;/code&gt; 自体を返します。</target>
        </trans-unit>
        <trans-unit id="4f6de3ab26de46b22b8646658bc86041ba8f3d5e" translate="yes" xml:space="preserve">
          <source>The only case where such wrapping can occur is when one takes the absolute value of the negative minimal value for the type this is a positive value that is too large to represent in the type. In such a case, this function returns &lt;code&gt;MIN&lt;/code&gt; itself.</source>
          <target state="translated">このようなラッピングが発生する可能性がある唯一のケースは、型の負の最小値の絶対値を取る場合、これは型で表すには大きすぎる正の値です。このような場合、この関数は &lt;code&gt;MIN&lt;/code&gt; 自体を返します。</target>
        </trans-unit>
        <trans-unit id="45d6aabe4740755ea8f6332847150daa44a43b07" translate="yes" xml:space="preserve">
          <source>The only case where such wrapping can occur is when one takes the absolute value of the negative minimal value for the type; this is a positive value that is too large to represent in the type. In such a case, this function returns &lt;code&gt;MIN&lt;/code&gt; itself.</source>
          <target state="translated">The only case where such wrapping can occur is when one takes the absolute value of the negative minimal value for the type; this is a positive value that is too large to represent in the type. In such a case, this function returns &lt;code&gt;MIN&lt;/code&gt; itself.</target>
        </trans-unit>
        <trans-unit id="63e8e964be307b9ddc1a920575e78207b9d44077" translate="yes" xml:space="preserve">
          <source>The only difference between Listing 15-7 and Listing 15-6 is that here we set &lt;code&gt;y&lt;/code&gt; to be an instance of a box pointing to a copied value of &lt;code&gt;x&lt;/code&gt; rather than a reference pointing to the value of &lt;code&gt;x&lt;/code&gt;. In the last assertion, we can use the dereference operator to follow the box&amp;rsquo;s pointer in the same way that we did when &lt;code&gt;y&lt;/code&gt; was a reference. Next, we&amp;rsquo;ll explore what is special about &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; that enables us to use the dereference operator by defining our own box type.</source>
          <target state="translated">The only difference between Listing 15-7 and Listing 15-6 is that here we set &lt;code&gt;y&lt;/code&gt; to be an instance of a box pointing to a copied value of &lt;code&gt;x&lt;/code&gt; rather than a reference pointing to the value of &lt;code&gt;x&lt;/code&gt; . In the last assertion, we can use the dereference operator to follow the box&amp;rsquo;s pointer in the same way that we did when &lt;code&gt;y&lt;/code&gt; was a reference. Next, we&amp;rsquo;ll explore what is special about &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; that enables us to use the dereference operator by defining our own box type.</target>
        </trans-unit>
        <trans-unit id="51b5a7f2069f2def348d2148cbc38445c3e27f4c" translate="yes" xml:space="preserve">
          <source>The only difference between Listing 15-7 and Listing 15-6 is that here we set &lt;code&gt;y&lt;/code&gt; to be an instance of a box pointing to the value in &lt;code&gt;x&lt;/code&gt; rather than a reference pointing to the value of &lt;code&gt;x&lt;/code&gt;. In the last assertion, we can use the dereference operator to follow the box&amp;rsquo;s pointer in the same way that we did when &lt;code&gt;y&lt;/code&gt; was a reference. Next, we&amp;rsquo;ll explore what is special about &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; that enables us to use the dereference operator by defining our own box type.</source>
          <target state="translated">表15-7および表15-6との間の唯一の違いは、ここでは、設定されている &lt;code&gt;y&lt;/code&gt; 内の値を指すボックスのインスタンスであることが &lt;code&gt;x&lt;/code&gt; よりもむしろの値を指す参照 &lt;code&gt;x&lt;/code&gt; 。最後のアサーションでは、逆参照演算子を使用して、 &lt;code&gt;y&lt;/code&gt; が参照の場合と同じようにボックスのポインターを追跡できます。次に、独自のボックスタイプを定義することで間接参照演算子を使用できるようにする &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; 特別な点について説明します。</target>
        </trans-unit>
        <trans-unit id="f7b8368bfb1b8c79cdb7d78152517d184d409bdd" translate="yes" xml:space="preserve">
          <source>The only functions that can be called in static or constant expressions are &lt;code&gt;const&lt;/code&gt; functions, and struct/enum constructors.</source>
          <target state="translated">The only functions that can be called in static or constant expressions are &lt;code&gt;const&lt;/code&gt; functions, and struct/enum constructors.</target>
        </trans-unit>
        <trans-unit id="aa7a3f715132d2845165ebc499ef1753bb78d047" translate="yes" xml:space="preserve">
          <source>The only functions that can be called in static or constant expressions are &lt;code&gt;const&lt;/code&gt; functions, and struct/enum constructors. &lt;code&gt;const&lt;/code&gt; functions are only available on a nightly compiler. Rust currently does not support more general compile-time function execution.</source>
          <target state="translated">静的式または定数式で呼び出すことができる関数は、 &lt;code&gt;const&lt;/code&gt; 関数、およびstruct / enumコンストラクターのみです。 &lt;code&gt;const&lt;/code&gt; 関数は、夜間コンパイラーでのみ使用できます。Rustは現在、より一般的なコンパイル時関数の実行をサポートしていません。</target>
        </trans-unit>
        <trans-unit id="f7c42c506a124c9ffe70241d1844e481774b0efe" translate="yes" xml:space="preserve">
          <source>The only lifetime allowed in a constant is &lt;code&gt;'static&lt;/code&gt;, which is the lifetime that encompasses all others in a Rust program. For example, if you wanted to define a constant string, it would look like this:</source>
          <target state="translated">定数で許可される唯一の寿命は &lt;code&gt;'static&lt;/code&gt; 。これは、Rustプログラムの他のすべてを含む寿命です。たとえば、定数文字列を定義する場合は、次のようになります。</target>
        </trans-unit>
        <trans-unit id="c90e7627a1475de1daf664c395cb8fc220c2a179" translate="yes" xml:space="preserve">
          <source>The operand of a field expression.</source>
          <target state="translated">フィールド式のオペランド。</target>
        </trans-unit>
        <trans-unit id="c815094584bba28655815f7e3484796d5b4ac295" translate="yes" xml:space="preserve">
          <source>The operand of a unary &lt;a href=&quot;expressions/operator-expr#borrow-operators&quot;&gt;borrow&lt;/a&gt; or &lt;a href=&quot;expressions/operator-expr#the-dereference-operator&quot;&gt;dereference&lt;/a&gt; operator.</source>
          <target state="translated">単項&lt;a href=&quot;expressions/operator-expr#borrow-operators&quot;&gt;借用&lt;/a&gt;演算子または&lt;a href=&quot;expressions/operator-expr#the-dereference-operator&quot;&gt;逆参照&lt;/a&gt;演算子のオペランド。</target>
        </trans-unit>
        <trans-unit id="cfdf71c707b06cc703ce65b9173f06d5346346a9" translate="yes" xml:space="preserve">
          <source>The operand of an extending &lt;a href=&quot;expressions/operator-expr#borrow-operators&quot;&gt;borrow expression&lt;/a&gt;.</source>
          <target state="translated">The operand of an extending &lt;a href=&quot;expressions/operator-expr#borrow-operators&quot;&gt;borrow expression&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="93f114bcdcaebb0db94cec84309f6c6e9289e758" translate="yes" xml:space="preserve">
          <source>The operand of any &lt;a href=&quot;#implicit-borrows&quot;&gt;implicit borrow&lt;/a&gt;.</source>
          <target state="translated">The operand of any &lt;a href=&quot;#implicit-borrows&quot;&gt;implicit borrow&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="8300616806da6883f068d3a939bb5817283d75af" translate="yes" xml:space="preserve">
          <source>The operand of any &lt;a href=&quot;expressions#implicit-borrows&quot;&gt;implicit borrow&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;expressions#implicit-borrows&quot;&gt;暗黙的な借用&lt;/a&gt;のオペランド。</target>
        </trans-unit>
        <trans-unit id="13205f7dcdf1bb624db42e4217ccc5c5fe9a6c93" translate="yes" xml:space="preserve">
          <source>The operand of any extending borrow expression has its temporary scope extended.</source>
          <target state="translated">拡張する借用式のオペランドは、その一時的なスコープが拡張されています。</target>
        </trans-unit>
        <trans-unit id="0018d918b5db8fa5a5c40594da4082243e89b941" translate="yes" xml:space="preserve">
          <source>The operand(s) of an extending &lt;a href=&quot;expressions/array-expr#array-expressions&quot;&gt;array&lt;/a&gt;, &lt;a href=&quot;expressions/operator-expr#type-cast-expressions&quot;&gt;cast&lt;/a&gt;, &lt;a href=&quot;expressions/struct-expr&quot;&gt;braced struct&lt;/a&gt;, or &lt;a href=&quot;expressions/tuple-expr#tuple-expressions&quot;&gt;tuple&lt;/a&gt; expression.</source>
          <target state="translated">The operand(s) of an extending &lt;a href=&quot;expressions/array-expr#array-expressions&quot;&gt;array&lt;/a&gt;, &lt;a href=&quot;expressions/operator-expr#type-cast-expressions&quot;&gt;cast&lt;/a&gt;, &lt;a href=&quot;expressions/struct-expr&quot;&gt;braced struct&lt;/a&gt;, or &lt;a href=&quot;expressions/tuple-expr#tuple-expressions&quot;&gt;tuple&lt;/a&gt; expression.</target>
        </trans-unit>
        <trans-unit id="02413f33b0997a467453e2cc175754042613115c" translate="yes" xml:space="preserve">
          <source>The operation failed because a pipe was closed.</source>
          <target state="translated">パイプが閉まっていたため、操作に失敗しました。</target>
        </trans-unit>
        <trans-unit id="e0b6b6bb05edcbe700535a8a02fd6257faeb1085" translate="yes" xml:space="preserve">
          <source>The operation lacked the necessary privileges to complete.</source>
          <target state="translated">操作に必要な特権を欠いていた。</target>
        </trans-unit>
        <trans-unit id="d56bd5ac430688946f617fddd5ff8737ea77aabc" translate="yes" xml:space="preserve">
          <source>The operation needs to block to complete, but the blocking operation was requested to not occur.</source>
          <target state="translated">操作が完了するにはブロックする必要がありますが、ブロック操作は発生しないように要求されました。</target>
        </trans-unit>
        <trans-unit id="554600e43876fa49fe1808261768a1599008a1a5" translate="yes" xml:space="preserve">
          <source>The operators &lt;code&gt;||&lt;/code&gt; and &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; may be applied to operands of boolean type. The &lt;code&gt;||&lt;/code&gt; operator denotes logical 'or', and the &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; operator denotes logical 'and'. They differ from &lt;code&gt;|&lt;/code&gt; and &lt;code&gt;&amp;amp;&lt;/code&gt; in that the right-hand operand is only evaluated when the left-hand operand does not already determine the result of the expression. That is, &lt;code&gt;||&lt;/code&gt; only evaluates its right-hand operand when the left-hand operand evaluates to &lt;code&gt;false&lt;/code&gt;, and &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; only when it evaluates to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">演算子 &lt;code&gt;||&lt;/code&gt; そして &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; ブール型のオペランドに適用してもよいです。 &lt;code&gt;||&lt;/code&gt; 演算子は論理「または」を示し、 &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; 演算子は論理「および」を示します。 &lt;code&gt;|&lt;/code&gt; とは異なるそして &lt;code&gt;&amp;amp;&lt;/code&gt; 右側の点でオペランドたときだけ左に評価され、オペランドすでに式の結果を決定するものではありません。つまり、 &lt;code&gt;||&lt;/code&gt; 左側のオペランドが &lt;code&gt;false&lt;/code&gt; と評価された場合にのみ右側のオペランドを評価し、 &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; と評価された場合にのみ&amp;amp;&amp;amp;を評価します。</target>
        </trans-unit>
        <trans-unit id="94a90205d7a5e5f5664d5fdcbd09052010d467f6" translate="yes" xml:space="preserve">
          <source>The optional &lt;a href=&quot;https://en.wikipedia.org/wiki/Byte_order_mark#UTF-8&quot;&gt;&lt;em&gt;UTF8 byte order mark&lt;/em&gt;&lt;/a&gt; (UTF8BOM production) indicates that the file is encoded in UTF8. It can only occur at the beginning of the file and is ignored by the compiler.</source>
          <target state="translated">オプションの&lt;a href=&quot;https://en.wikipedia.org/wiki/Byte_order_mark#UTF-8&quot;&gt;&lt;em&gt;UTF8バイトオーダーマーク&lt;/em&gt;&lt;/a&gt;（UTF8BOMプロダクション）は、ファイルがUTF8でエンコードされていることを示します。これはファイルの先頭でのみ発生し、コンパイラーによって無視されます。</target>
        </trans-unit>
        <trans-unit id="22d7081f01819ecc0a53443b4c5e3e1a4e2c048a" translate="yes" xml:space="preserve">
          <source>The optional fill character and alignment is provided normally in conjunction with the &lt;a href=&quot;#width&quot;&gt;&lt;code&gt;width&lt;/code&gt;&lt;/a&gt; parameter. It must be defined before &lt;code&gt;width&lt;/code&gt;, right after the &lt;code&gt;:&lt;/code&gt;. This indicates that if the value being formatted is smaller than &lt;code&gt;width&lt;/code&gt; some extra characters will be printed around it. Filling comes in the following variants for different alignments:</source>
          <target state="translated">The optional fill character and alignment is provided normally in conjunction with the &lt;a href=&quot;#width&quot;&gt; &lt;code&gt;width&lt;/code&gt; &lt;/a&gt; parameter. It must be defined before &lt;code&gt;width&lt;/code&gt; , right after the &lt;code&gt;:&lt;/code&gt; . This indicates that if the value being formatted is smaller than &lt;code&gt;width&lt;/code&gt; some extra characters will be printed around it. Filling comes in the following variants for different alignments:</target>
        </trans-unit>
        <trans-unit id="1ef92817d2fa5638a8f8e4bfed63d30ce997249b" translate="yes" xml:space="preserve">
          <source>The order in which this iterator returns entries is platform and filesystem dependent.</source>
          <target state="translated">このイテレータがエントリを返す順序は、プラットフォームやファイルシステムに依存します。</target>
        </trans-unit>
        <trans-unit id="60297fe01f4f2a21350a894e6ee139ac8e93f1b8" translate="yes" xml:space="preserve">
          <source>The order in which to evaluate the sub-expressions</source>
          <target state="translated">副式を評価する順番</target>
        </trans-unit>
        <trans-unit id="61bedc7c16635e05c26ee08451d7e761461ef5bb" translate="yes" xml:space="preserve">
          <source>The organizational problem of allocating responsibility for multiple tasks to the &lt;code&gt;main&lt;/code&gt; function is common to many binary projects. As a result, the Rust community has developed a process to use as a guideline for splitting the separate concerns of a binary program when &lt;code&gt;main&lt;/code&gt; starts getting large. The process has the following steps:</source>
          <target state="translated">複数のタスクの責任を &lt;code&gt;main&lt;/code&gt; 関数に割り当てるという組織上の問題は、多くのバイナリプロジェクトに共通しています。その結果、Rustコミュニティは、 &lt;code&gt;main&lt;/code&gt; が大きくなり始めたときにバイナリプログラムの個別の懸念を分割するためのガイドラインとして使用するプロセスを開発しました。このプロセスには次のステップがあります。</target>
        </trans-unit>
        <trans-unit id="41be0c260fec224b2719e05df384f73991bede1b" translate="yes" xml:space="preserve">
          <source>The other arm of the &lt;code&gt;match&lt;/code&gt; handles the case where we get an &lt;code&gt;Err&lt;/code&gt; value from &lt;code&gt;File::open&lt;/code&gt;. In this example, we&amp;rsquo;ve chosen to call the &lt;code&gt;panic!&lt;/code&gt; macro. If there&amp;rsquo;s no file named &lt;em&gt;hello.txt&lt;/em&gt; in our current directory and we run this code, we&amp;rsquo;ll see the following output from the &lt;code&gt;panic!&lt;/code&gt; macro:</source>
          <target state="translated">&lt;code&gt;match&lt;/code&gt; のもう一方のアームは、 &lt;code&gt;File::open&lt;/code&gt; から &lt;code&gt;Err&lt;/code&gt; 値を取得する場合を処理します。この例では、 &lt;code&gt;panic!&lt;/code&gt; を呼び出すことを選択しました！大きい。現在のディレクトリに&lt;em&gt;hello.txt&lt;/em&gt;という名前のファイルがなく、このコードを実行すると、 &lt;code&gt;panic!&lt;/code&gt; から次の出力が表示されます。大きい：</target>
        </trans-unit>
        <trans-unit id="a7bf4938ef9d644fa6590a14199d49f21d906882" translate="yes" xml:space="preserve">
          <source>The other difference between &lt;code&gt;mut&lt;/code&gt; and shadowing is that because we&amp;rsquo;re effectively creating a new variable when we use the &lt;code&gt;let&lt;/code&gt; keyword again, we can change the type of the value but reuse the same name. For example, say our program asks a user to show how many spaces they want between some text by inputting space characters, but we really want to store that input as a number:</source>
          <target state="translated">&lt;code&gt;mut&lt;/code&gt; とshadowing のもう 1つの違いは、 &lt;code&gt;let&lt;/code&gt; キーワードを再度使用すると新しい変数が効果的に作成されるため、値のタイプを変更して同じ名前を再利用できることです。たとえば、プログラムがユーザーにスペース文字を入力して、テキスト間のスペースをいくつ表示するかを尋ねたが、実際にはその入力を数値として保存したいとします。</target>
        </trans-unit>
        <trans-unit id="df7669a1bf85d9740015e4131e57d2cd1eb9d9d3" translate="yes" xml:space="preserve">
          <source>The other main use of the &lt;code&gt;const&lt;/code&gt; keyword is in &lt;code&gt;const fn&lt;/code&gt;. This marks a function as being callable in the body of a &lt;code&gt;const&lt;/code&gt; or &lt;code&gt;static&lt;/code&gt; item and in array initializers (commonly called &quot;const contexts&quot;). &lt;code&gt;const fn&lt;/code&gt; are restricted in the set of operations they can perform, to ensure that they can be evaluated at compile-time. See the &lt;a href=&quot;../reference/const_eval&quot;&gt;Reference&lt;/a&gt; for more detail.</source>
          <target state="translated">&lt;code&gt;const&lt;/code&gt; キーワードの他の主な用途は、 &lt;code&gt;const fn&lt;/code&gt; です。これは、関数を &lt;code&gt;const&lt;/code&gt; または &lt;code&gt;static&lt;/code&gt; アイテムの本体および配列初期化子（一般に「constコンテキスト」と呼ばれる）で呼び出し可能としてマークします。 &lt;code&gt;const fn&lt;/code&gt; は、コンパイル時に評価できるように、実行できる一連の操作に制限があります。詳細については、&lt;a href=&quot;../reference/const_eval&quot;&gt;リファレンス&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="a27877809931e30e4d816c929aaf44550dc13948" translate="yes" xml:space="preserve">
          <source>The other option is to decide that pinning is &quot;structural&quot; for &lt;code&gt;field&lt;/code&gt;, meaning that if the struct is pinned then so is the field.</source>
          <target state="translated">もう1つのオプションは、固定が &lt;code&gt;field&lt;/code&gt; の「構造的」であることを決定することです。つまり、構造が固定されている場合、フィールドも固定されています。</target>
        </trans-unit>
        <trans-unit id="0642ecd58583a2694ae6dacfe0a415f63c694440" translate="yes" xml:space="preserve">
          <source>The other reason to use inheritance relates to the type system: to enable a child type to be used in the same places as the parent type. This is also called &lt;em&gt;polymorphism&lt;/em&gt;, which means that you can substitute multiple objects for each other at runtime if they share certain characteristics.</source>
          <target state="translated">継承を使用するもう1つの理由は、型システムに関連します。子型を親型と同じ場所で使用できるようにするためです。これは&lt;em&gt;ポリモーフィズム&lt;/em&gt;とも呼ばれます。つまり、複数のオブジェクトが特定の特性を共有している場合、実行時にそれらを相互に置き換えることができます。</target>
        </trans-unit>
        <trans-unit id="89dc389d4ca8b1b17999395cda6f46045ddfd179" translate="yes" xml:space="preserve">
          <source>The other use of the &lt;code&gt;impl&lt;/code&gt; keyword is in &lt;code&gt;impl Trait&lt;/code&gt; syntax, which can be seen as a shorthand for &quot;a concrete type that implements this trait&quot;. Its primary use is working with closures, which have type definitions generated at compile time that can't be simply typed out.</source>
          <target state="translated">&lt;code&gt;impl&lt;/code&gt; キーワードのもう1つの使用法は、「このトレイトを実装する具象型」の省略形と &lt;code&gt;impl Trait&lt;/code&gt; 構文です。その主な用途は、コンパイル時に生成される型定義があり、単純に型指定できないクロージャーでの作業です。</target>
        </trans-unit>
        <trans-unit id="5fa7bdd2f67d8992d16557677350c79fe148aa6f" translate="yes" xml:space="preserve">
          <source>The other way to solve this error is to make the private type public. Example:</source>
          <target state="translated">このエラーを解決するもう一つの方法は、プライベート型をpublicにすることです。例を示します。</target>
        </trans-unit>
        <trans-unit id="69b16008db0e7fefb3576376fa59c7cdb24bc4ca" translate="yes" xml:space="preserve">
          <source>The outer scope declares a variable named &lt;code&gt;r&lt;/code&gt; with no initial value, and the inner scope declares a variable named &lt;code&gt;x&lt;/code&gt; with the initial value of 5. Inside the inner scope, we attempt to set the value of &lt;code&gt;r&lt;/code&gt; as a reference to &lt;code&gt;x&lt;/code&gt;. Then the inner scope ends, and we attempt to print the value in &lt;code&gt;r&lt;/code&gt;. This code won&amp;rsquo;t compile because the value &lt;code&gt;r&lt;/code&gt; is referring to has gone out of scope before we try to use it. Here is the error message:</source>
          <target state="translated">外部スコープは初期値なしで &lt;code&gt;r&lt;/code&gt; という名前の変数を宣言し、内部スコープは初期値5で &lt;code&gt;x&lt;/code&gt; という変数を宣言します。内部スコープ内では、 &lt;code&gt;x&lt;/code&gt; への参照として &lt;code&gt;r&lt;/code&gt; の値を設定しようとします。その後、内部スコープが終了し、値を &lt;code&gt;r&lt;/code&gt; に出力しようとします。このコードは、 &lt;code&gt;r&lt;/code&gt; が参照している値が使用しようとする前にスコープ外になったため、コンパイルされません。エラーメッセージは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="ee4813584901b6edf7255c9100533eb924eb1e04" translate="yes" xml:space="preserve">
          <source>The output of a finished process.</source>
          <target state="translated">完成したプロセスの出力。</target>
        </trans-unit>
        <trans-unit id="7091d6ad7f032d028b64c465cb0226168ae0e89e" translate="yes" xml:space="preserve">
          <source>The output of this function should not be used in anything that might have security implications. For example:</source>
          <target state="translated">この関数の出力は、セキュリティに影響を与える可能性のあるものには使用してはいけません。例えば</target>
        </trans-unit>
        <trans-unit id="c978821bc364ab92333f8a77fd4cf50814193dc4" translate="yes" xml:space="preserve">
          <source>The output that the future will produce on completion.</source>
          <target state="translated">未来が完成した時に出すアウトプット。</target>
        </trans-unit>
        <trans-unit id="4e5a226f1cb2eaa0ff96072c4caeb2fee856332d" translate="yes" xml:space="preserve">
          <source>The output type returned by methods.</source>
          <target state="translated">メソッドが返す出力タイプ。</target>
        </trans-unit>
        <trans-unit id="b3fedfd8280044a357b6d9f266e6194249a97d9a" translate="yes" xml:space="preserve">
          <source>The output will be the recommended workout plan. Listing 13-2 shows the &lt;code&gt;main&lt;/code&gt; function we&amp;rsquo;ll use.</source>
          <target state="translated">出力は、推奨されるワークアウトプランになります。リスト13-2は私たちが使用する &lt;code&gt;main&lt;/code&gt; 関数を示しています。</target>
        </trans-unit>
        <trans-unit id="884c1b47c0faf2e5f38e29c6c1a9622d7629d70c" translate="yes" xml:space="preserve">
          <source>The overall goal of these requirements is to let the consumer of a pipeline use</source>
          <target state="translated">これらの要件の全体的な目標は、パイプラインの消費者が</target>
        </trans-unit>
        <trans-unit id="c750221db5bde24f0432e5395fa0e7d6b2249e8f" translate="yes" xml:space="preserve">
          <source>The ownership of &lt;code&gt;buf&lt;/code&gt; is effectively transferred to the &lt;code&gt;String&lt;/code&gt; which may then deallocate, reallocate or change the contents of memory pointed to by the pointer at will. Ensure that nothing else uses the pointer after calling this function.</source>
          <target state="translated">The ownership of &lt;code&gt;buf&lt;/code&gt; is effectively transferred to the &lt;code&gt;String&lt;/code&gt; which may then deallocate, reallocate or change the contents of memory pointed to by the pointer at will. Ensure that nothing else uses the pointer after calling this function.</target>
        </trans-unit>
        <trans-unit id="b39c88ef6b933b61e4ea4a039f34870326ac716b" translate="yes" xml:space="preserve">
          <source>The ownership of &lt;code&gt;ptr&lt;/code&gt; is effectively transferred to the &lt;code&gt;String&lt;/code&gt; which may then deallocate, reallocate or change the contents of memory pointed to by the pointer at will. Ensure that nothing else uses the pointer after calling this function.</source>
          <target state="translated">&lt;code&gt;ptr&lt;/code&gt; の所有権は効果的に &lt;code&gt;String&lt;/code&gt; に転送され、Stringは割り当てを解除、再割り当て、またはポインタが指すメモリの内容を自由に変更できます。この関数を呼び出した後は、他にポインターを使用しないようにしてください。</target>
        </trans-unit>
        <trans-unit id="0c5ac2aeb05d71a34b822c034365a66e97f5d90e" translate="yes" xml:space="preserve">
          <source>The ownership of &lt;code&gt;ptr&lt;/code&gt; is effectively transferred to the &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; which may then deallocate, reallocate or change the contents of memory pointed to by the pointer at will. Ensure that nothing else uses the pointer after calling this function.</source>
          <target state="translated">&lt;code&gt;ptr&lt;/code&gt; の所有権は &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; 効果的に転送され、Vec &amp;lt;T&amp;gt;は、ポインターが指すメモリーの内容の割り当てを解除、再割り当て、または変更することができます。この関数を呼び出した後は、他にポインターを使用しないようにしてください。</target>
        </trans-unit>
        <trans-unit id="459d615a7b443b2b18398d7b4e4094d21aa9904a" translate="yes" xml:space="preserve">
          <source>The ownership of a variable follows the same pattern every time: assigning a value to another variable moves it. When a variable that includes data on the heap goes out of scope, the value will be cleaned up by &lt;code&gt;drop&lt;/code&gt; unless the data has been moved to be owned by another variable.</source>
          <target state="translated">変数の所有権は毎回同じパターンに従います。別の変数に値を割り当てると、変数が移動します。ヒープ上のデータを含む変数がスコープ外になると、データが別の変数によって所有されるように移動されていない限り、値は &lt;code&gt;drop&lt;/code&gt; によってクリーンアップされます。</target>
        </trans-unit>
        <trans-unit id="8158170312c35ad0b4ff632e830474174c9789f6" translate="yes" xml:space="preserve">
          <source>The ownership rules play a vital role in message sending because they help you write safe, concurrent code. Preventing errors in concurrent programming is the advantage of thinking about ownership throughout your Rust programs. Let&amp;rsquo;s do an experiment to show how channels and ownership work together to prevent problems: we&amp;rsquo;ll try to use a &lt;code&gt;val&lt;/code&gt; value in the spawned thread &lt;em&gt;after&lt;/em&gt; we&amp;rsquo;ve sent it down the channel. Try compiling the code in Listing 16-9 to see why this code isn&amp;rsquo;t allowed:</source>
          <target state="translated">所有権ルールは、安全な並行コードの記述に役立つため、メッセージ送信において重要な役割を果たします。並行プログラミングでのエラーを防ぐことは、Rustプログラム全体の所有権について考えることの利点です。のは、チャンネルと所有権の仕事が一緒に問題を防ぐ方法を示すための実験をやってみましょう：私たちが使用しようとするでしょう &lt;code&gt;val&lt;/code&gt; 生成されたスレッドに値を&lt;em&gt;した後&lt;/em&gt;、我々は、チャネルの下にそれを送ってきました。リスト16-9のコードをコンパイルして、このコードが許可されない理由を確認してください：</target>
        </trans-unit>
        <trans-unit id="58f56a016b810f8287c744364955b1ffc32f9240" translate="yes" xml:space="preserve">
          <source>The panic hook is a global resource.</source>
          <target state="translated">パニックフックはグローバルリソースです。</target>
        </trans-unit>
        <trans-unit id="684aef30b999855f4bf1399a43d22fd82b7e6c9d" translate="yes" xml:space="preserve">
          <source>The panic hook is invoked when a thread panics, but before the panic runtime is invoked. As such, the hook will run with both the aborting and unwinding runtimes. The default hook prints a message to standard error and generates a backtrace if requested, but this behavior can be customized with the &lt;code&gt;set_hook&lt;/code&gt; and &lt;a href=&quot;fn.take_hook&quot;&gt;&lt;code&gt;take_hook&lt;/code&gt;&lt;/a&gt; functions.</source>
          <target state="translated">パニックフックは、スレッドがパニックになったとき、パニックランタイムが呼び出される前に呼び出されます。そのため、フックはアボートランタイムと巻き戻しランタイムの両方で実行されます。デフォルトのフックは、メッセージを標準エラーに出力し、要求に応じてバックトレースを生成しますが、この動作は &lt;code&gt;set_hook&lt;/code&gt; および&lt;a href=&quot;fn.take_hook&quot;&gt; &lt;code&gt;take_hook&lt;/code&gt; &lt;/a&gt;関数を使用してカスタマイズできます。</target>
        </trans-unit>
        <trans-unit id="563c97e45aeee516b45222324d4cc368e8c084ba" translate="yes" xml:space="preserve">
          <source>The parameters given to &lt;code&gt;Layout::from_size_align&lt;/code&gt; or some other &lt;code&gt;Layout&lt;/code&gt; constructor do not satisfy its documented constraints.</source>
          <target state="translated">&lt;code&gt;Layout::from_size_align&lt;/code&gt; または他の &lt;code&gt;Layout&lt;/code&gt; コンストラクターに指定されたパラメーターは、文書化された制約を満たしていません。</target>
        </trans-unit>
        <trans-unit id="3c2a54faaf19386dc2b06158bf3003e146fc0f45" translate="yes" xml:space="preserve">
          <source>The parameters of any trait method must match between a trait implementation and the trait definition.</source>
          <target state="translated">どのような形質メソッドのパラメータも、形質の実装と形質の定義の間で一致しなければなりません。</target>
        </trans-unit>
        <trans-unit id="df3b8f99f35d92ad550b740bf7dc9171d35b97ed" translate="yes" xml:space="preserve">
          <source>The parent of a statement scope is the scope of the block that contains the statement.</source>
          <target state="translated">ステートメントスコープの親は、ステートメントを含むブロックのスコープです。</target>
        </trans-unit>
        <trans-unit id="c46091b9f972d668faf65caa23b2e09a8a170568" translate="yes" xml:space="preserve">
          <source>The parent of all other scopes is the scope of the immediately enclosing expression.</source>
          <target state="translated">他のすべてのスコープの親は、すぐに囲む式のスコープです。</target>
        </trans-unit>
        <trans-unit id="e04065a98d4b38354b6e3e4d4abb130f6c621783" translate="yes" xml:space="preserve">
          <source>The parent of the arm scope is the scope of the &lt;code&gt;match&lt;/code&gt; expression that it belongs to.</source>
          <target state="translated">The parent of the arm scope is the scope of the &lt;code&gt;match&lt;/code&gt; expression that it belongs to.</target>
        </trans-unit>
        <trans-unit id="09a327800a21f08b5d4e1948e88aac172c2121be" translate="yes" xml:space="preserve">
          <source>The parent of the current &lt;a href=&quot;../reference/items/modules&quot;&gt;module&lt;/a&gt;.</source>
          <target state="translated">現在の&lt;a href=&quot;../reference/items/modules&quot;&gt;モジュール&lt;/a&gt;の親。</target>
        </trans-unit>
        <trans-unit id="529eb4e30d49293a9076afc4b5e1cde599b49562" translate="yes" xml:space="preserve">
          <source>The parent of the expression after the &lt;code&gt;=&amp;gt;&lt;/code&gt; in a &lt;code&gt;match&lt;/code&gt; expression is the scope of the arm that it's in.</source>
          <target state="translated">The parent of the expression after the &lt;code&gt;=&amp;gt;&lt;/code&gt; in a &lt;code&gt;match&lt;/code&gt; expression is the scope of the arm that it's in.</target>
        </trans-unit>
        <trans-unit id="7bf69b726f2264b18f25a14f0c4351943f8d4d50" translate="yes" xml:space="preserve">
          <source>The parent of the expression for a &lt;code&gt;match&lt;/code&gt; guard is the scope of the arm that the guard is for.</source>
          <target state="translated">The parent of the expression for a &lt;code&gt;match&lt;/code&gt; guard is the scope of the arm that the guard is for.</target>
        </trans-unit>
        <trans-unit id="10e7154b1118c2abd23aedcc36e2f4febf44487b" translate="yes" xml:space="preserve">
          <source>The parent of the expression in an expression statement is the scope of the statement.</source>
          <target state="translated">式文の中の式の親は、式文のスコープです。</target>
        </trans-unit>
        <trans-unit id="bf1edfebb91e8c5be33d3f8d00037717971d53a2" translate="yes" xml:space="preserve">
          <source>The parent of the initializer of a &lt;a href=&quot;statements#let-statements&quot;&gt;&lt;code&gt;let&lt;/code&gt; statement&lt;/a&gt; is the &lt;code&gt;let&lt;/code&gt; statement's scope.</source>
          <target state="translated">The parent of the initializer of a &lt;a href=&quot;statements#let-statements&quot;&gt; &lt;code&gt;let&lt;/code&gt; statement&lt;/a&gt; is the &lt;code&gt;let&lt;/code&gt; statement's scope.</target>
        </trans-unit>
        <trans-unit id="f7896dc490ba78587890c7c602aaea52ff1e61a5" translate="yes" xml:space="preserve">
          <source>The parent thread can also wait on the completion of the child thread; a call to &lt;a href=&quot;fn.spawn&quot;&gt;&lt;code&gt;spawn&lt;/code&gt;&lt;/a&gt; produces a &lt;a href=&quot;struct.joinhandle&quot;&gt;&lt;code&gt;JoinHandle&lt;/code&gt;&lt;/a&gt;, which provides a &lt;code&gt;join&lt;/code&gt; method for waiting:</source>
          <target state="translated">親スレッドは、子スレッドの完了を待機することもできます。&lt;a href=&quot;fn.spawn&quot;&gt; &lt;code&gt;spawn&lt;/code&gt; &lt;/a&gt;を呼び出すと、待機用の &lt;code&gt;join&lt;/code&gt; メソッドを提供する&lt;a href=&quot;struct.joinhandle&quot;&gt; &lt;code&gt;JoinHandle&lt;/code&gt; が&lt;/a&gt;生成されます。</target>
        </trans-unit>
        <trans-unit id="46e80e0e5a125dc6b093687f5b3dfa680a2d94d7" translate="yes" xml:space="preserve">
          <source>The parenthesized &lt;code&gt;inline&lt;/code&gt; attribute requires the parameter to be specified:</source>
          <target state="translated">括弧で囲まれた &lt;code&gt;inline&lt;/code&gt; 属性には、パラメーターを指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="15c1964228f17e3bf48dc3c0a27f630dfed2aef1" translate="yes" xml:space="preserve">
          <source>The parenthesized &lt;code&gt;instruction_set&lt;/code&gt; attribute requires the parameter to be specified:</source>
          <target state="translated">括弧で囲まれた &lt;code&gt;instruction_set&lt;/code&gt; 属性では、パラメーターを指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="d2172d9db47abf995cf78b6d1056e43a62f663b4" translate="yes" xml:space="preserve">
          <source>The parser used by the macro system is reasonably powerful, but it is limited in order to prevent ambiguity in current or future versions of the language. In particular, in addition to the rule about ambiguous expansions, a nonterminal matched by a metavariable must be followed by a token which has been decided can be safely used after that kind of match.</source>
          <target state="translated">マクロシステムで使用されるパーサはそれなりに強力ですが、現在のバージョンや将来のバージョンの言語での曖昧さを防ぐために制限されています。特に、曖昧な展開に関するルールに加えて、メタ変数でマッチした非終端は、その種のマッチの後に安全に使用できると判断されたトークンを続けなければなりません。</target>
        </trans-unit>
        <trans-unit id="72524139620fe5680057ec138f1bc4009c442555" translate="yes" xml:space="preserve">
          <source>The path prefix for modules is the canonical path to that module. For bare implementations, it is the canonical path of the item being implemented surrounded by angle (&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;) brackets. For &lt;a href=&quot;items/implementations#trait-implementations&quot;&gt;trait implementations&lt;/a&gt;, it is the canonical path of the item being implemented followed by &lt;code&gt;as&lt;/code&gt; followed by the canonical path to the trait all surrounded in angle (&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;) brackets.</source>
          <target state="translated">モジュールのパス接頭辞は、そのモジュールへの正規のパスです。ベア実装の場合、これは山かっこ（ &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; ）で囲まれた、実装される項目の正規のパスです。以下のために&lt;a href=&quot;items/implementations#trait-implementations&quot;&gt;形質実装&lt;/a&gt;、それが続いて実施された項目の正規のパスである &lt;code&gt;as&lt;/code&gt; 、すべての角度（で囲まれた形質に正規のパスに続く &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; ）かっこ。</target>
        </trans-unit>
        <trans-unit id="c6a4fb9e71adbfcd1bb4598c90adf218d993dcba" translate="yes" xml:space="preserve">
          <source>The path to the associated items is &lt;code&gt;&amp;lt;&lt;/code&gt; followed by a path to the implementing type followed by &lt;code&gt;as&lt;/code&gt; followed by a path to the trait followed by &lt;code&gt;&amp;gt;&lt;/code&gt; as a path component followed by the associated item's path component.</source>
          <target state="translated">関連付けられたアイテムへのパスは、 &lt;code&gt;&amp;lt;&lt;/code&gt; に続いて実装タイプへのパス、続いて &lt;code&gt;as&lt;/code&gt; に続いて特性へのパス、続いて &lt;code&gt;&amp;gt;&lt;/code&gt; がパスコンポーネントとして、関連付けられたアイテムのパスコンポーネントが続きます。</target>
        </trans-unit>
        <trans-unit id="e791bfe4c14128fe94a9448b536323c040235679" translate="yes" xml:space="preserve">
          <source>The pattern can be a &lt;a href=&quot;../char/index&quot;&gt;&lt;code&gt;char&lt;/code&gt;&lt;/a&gt; or a closure that determines if a character matches.</source>
          <target state="translated">パターンは、&lt;a href=&quot;../char/index&quot;&gt; &lt;code&gt;char&lt;/code&gt; &lt;/a&gt;または文字が一致するかどうかを決定するクロージャーです。</target>
        </trans-unit>
        <trans-unit id="9b997b2f72267455f266b90593be72c411299620" translate="yes" xml:space="preserve">
          <source>The pattern can be a &lt;a href=&quot;char/index&quot;&gt;&lt;code&gt;char&lt;/code&gt;&lt;/a&gt; or a closure that determines if a character matches.</source>
          <target state="translated">パターンは、&lt;a href=&quot;char/index&quot;&gt; &lt;code&gt;char&lt;/code&gt; &lt;/a&gt;または文字が一致するかどうかを決定するクロージャーです。</target>
        </trans-unit>
        <trans-unit id="d7a545179141a5b3642800fa8e44597af1f79a17" translate="yes" xml:space="preserve">
          <source>The pattern can be a &lt;code&gt;&amp;amp;str&lt;/code&gt;, &lt;a href=&quot;../char/index&quot;&gt;&lt;code&gt;char&lt;/code&gt;&lt;/a&gt;, or a closure that determines if a character matches.</source>
          <target state="translated">パターンは、 &lt;code&gt;&amp;amp;str&lt;/code&gt; 、&lt;a href=&quot;../char/index&quot;&gt; &lt;code&gt;char&lt;/code&gt; &lt;/a&gt;、または文字が一致するかどうかを決定するクロージャです。</target>
        </trans-unit>
        <trans-unit id="eab1bd44108e3c6ec8d1d8c6acc9fac3b5f45a9e" translate="yes" xml:space="preserve">
          <source>The pattern can be a &lt;code&gt;&amp;amp;str&lt;/code&gt;, &lt;a href=&quot;char/index&quot;&gt;&lt;code&gt;char&lt;/code&gt;&lt;/a&gt;, or a closure that determines if a character matches.</source>
          <target state="translated">パターンは、 &lt;code&gt;&amp;amp;str&lt;/code&gt; 、&lt;a href=&quot;char/index&quot;&gt; &lt;code&gt;char&lt;/code&gt; &lt;/a&gt;、または文字が一致するかどうかを決定するクロージャです。</target>
        </trans-unit>
        <trans-unit id="b3313c804137756973c3dae6df1f5d957a288624" translate="yes" xml:space="preserve">
          <source>The pattern can be a &lt;code&gt;&amp;amp;str&lt;/code&gt;, &lt;a href=&quot;primitive.char&quot;&gt;&lt;code&gt;char&lt;/code&gt;&lt;/a&gt;, or a closure that determines if a character matches.</source>
          <target state="translated">パターンは、 &lt;code&gt;&amp;amp;str&lt;/code&gt; 、&lt;a href=&quot;primitive.char&quot;&gt; &lt;code&gt;char&lt;/code&gt; &lt;/a&gt;、または文字が一致するかどうかを決定するクロージャです。</target>
        </trans-unit>
        <trans-unit id="bfcc6e07c89f929bc9a9b9157ac58712686768e0" translate="yes" xml:space="preserve">
          <source>The pattern can be any type that implements the Pattern trait. Notable examples are &lt;code&gt;&amp;amp;str&lt;/code&gt;, &lt;a href=&quot;../char/index&quot;&gt;&lt;code&gt;char&lt;/code&gt;&lt;/a&gt;, and closures that determines the split.</source>
          <target state="translated">パターンは、パターントレイトを実装する任意のタイプにすることができます。注目すべき例は、 &lt;code&gt;&amp;amp;str&lt;/code&gt; 、&lt;a href=&quot;../char/index&quot;&gt; &lt;code&gt;char&lt;/code&gt; &lt;/a&gt;、および分割を決定するクロージャーです。</target>
        </trans-unit>
        <trans-unit id="eb766e07c7ab39fe3b62bc217205480afe2f8cd2" translate="yes" xml:space="preserve">
          <source>The pattern can be any type that implements the Pattern trait. Notable examples are &lt;code&gt;&amp;amp;str&lt;/code&gt;, &lt;a href=&quot;../char/index&quot;&gt;&lt;code&gt;char&lt;/code&gt;&lt;/a&gt;, and closures that determines the split. Additional libraries might provide more complex patterns like regular expressions.</source>
          <target state="translated">パターンは、パターントレイトを実装する任意のタイプにすることができます。注目すべき例は、 &lt;code&gt;&amp;amp;str&lt;/code&gt; 、&lt;a href=&quot;../char/index&quot;&gt; &lt;code&gt;char&lt;/code&gt; &lt;/a&gt;、および分割を決定するクロージャーです。追加のライブラリは、正規表現のようなより複雑なパターンを提供する場合があります。</target>
        </trans-unit>
        <trans-unit id="53665fb10463c2a5a8c8a6c23b4c3d2013b572a7" translate="yes" xml:space="preserve">
          <source>The pattern can be any type that implements the Pattern trait. Notable examples are &lt;code&gt;&amp;amp;str&lt;/code&gt;, &lt;a href=&quot;char/index&quot;&gt;&lt;code&gt;char&lt;/code&gt;&lt;/a&gt;, and closures that determines the split.</source>
          <target state="translated">パターンは、パターントレイトを実装する任意のタイプにすることができます。注目すべき例は、 &lt;code&gt;&amp;amp;str&lt;/code&gt; 、&lt;a href=&quot;char/index&quot;&gt; &lt;code&gt;char&lt;/code&gt; &lt;/a&gt;、および分割を決定するクロージャーです。</target>
        </trans-unit>
        <trans-unit id="8059c918e0a15a39f2f09be5faf1d4cb011e74e6" translate="yes" xml:space="preserve">
          <source>The pattern can be any type that implements the Pattern trait. Notable examples are &lt;code&gt;&amp;amp;str&lt;/code&gt;, &lt;a href=&quot;char/index&quot;&gt;&lt;code&gt;char&lt;/code&gt;&lt;/a&gt;, and closures that determines the split. Additional libraries might provide more complex patterns like regular expressions.</source>
          <target state="translated">パターンは、パターントレイトを実装する任意のタイプにすることができます。注目すべき例は、 &lt;code&gt;&amp;amp;str&lt;/code&gt; 、&lt;a href=&quot;char/index&quot;&gt; &lt;code&gt;char&lt;/code&gt; &lt;/a&gt;、および分割を決定するクロージャーです。追加のライブラリは、正規表現のようなより複雑なパターンを提供する場合があります。</target>
        </trans-unit>
        <trans-unit id="70fe7a4be65487325b69a6e9166bdb513323e0b5" translate="yes" xml:space="preserve">
          <source>The pattern in the following example does four things:</source>
          <target state="translated">以下の例のパターンは、4つのことをしています。</target>
        </trans-unit>
        <trans-unit id="5a181811e45dbf2fc9dddcbe8e2017ec7127d78e" translate="yes" xml:space="preserve">
          <source>The pattern in the second match arm introduces a new variable named &lt;code&gt;y&lt;/code&gt; that will match any value inside a &lt;code&gt;Some&lt;/code&gt; value. Because we&amp;rsquo;re in a new scope inside the &lt;code&gt;match&lt;/code&gt; expression, this is a new &lt;code&gt;y&lt;/code&gt; variable, not the &lt;code&gt;y&lt;/code&gt; we declared at the beginning with the value 10. This new &lt;code&gt;y&lt;/code&gt; binding will match any value inside a &lt;code&gt;Some&lt;/code&gt;, which is what we have in &lt;code&gt;x&lt;/code&gt;. Therefore, this new &lt;code&gt;y&lt;/code&gt; binds to the inner value of the &lt;code&gt;Some&lt;/code&gt; in &lt;code&gt;x&lt;/code&gt;. That value is &lt;code&gt;5&lt;/code&gt;, so the expression for that arm executes and prints &lt;code&gt;Matched, y = 5&lt;/code&gt;.</source>
          <target state="translated">2番目の一致アームのパターンは、 &lt;code&gt;Some&lt;/code&gt; 値内の任意の値に一致する &lt;code&gt;y&lt;/code&gt; という名前の新しい変数を導入します。 &lt;code&gt;match&lt;/code&gt; 式内の新しいスコープにいるため、これは新しい &lt;code&gt;y&lt;/code&gt; 変数であり、最初に値10で宣言した &lt;code&gt;y&lt;/code&gt; ではありません。この新しい &lt;code&gt;y&lt;/code&gt; バインディングは、 &lt;code&gt;Some&lt;/code&gt; 内の任意の値と一致します。これは、中 &lt;code&gt;x&lt;/code&gt; 。したがって、この新しい &lt;code&gt;y&lt;/code&gt; は、 &lt;code&gt;Some&lt;/code&gt; in &lt;code&gt;x&lt;/code&gt; の内部値にバインドします。その値は &lt;code&gt;5&lt;/code&gt; なので、そのアームの式が実行され、 &lt;code&gt;Matched, y = 5&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="fd1b310fb5c60706a33dc63407dcff2f0de81ecd" translate="yes" xml:space="preserve">
          <source>The pattern is most commonly a single variable, which means no pattern matching is done and the expression given is bound to the variable. Apart from that, patterns used in &lt;code&gt;let&lt;/code&gt; bindings can be as complicated as needed, given that the pattern is exhaustive. See the &lt;a href=&quot;../book/ch06-02-match&quot;&gt;Rust book&lt;/a&gt; for more information on pattern matching. The type of the pattern is optionally given afterwards, but if left blank is automatically inferred by the compiler if possible.</source>
          <target state="translated">パターンは最も一般的には単一の変数です。つまり、パターンマッチングは行われず、指定された式は変数にバインドされます。それとは別に、 &lt;code&gt;let&lt;/code&gt; バインディングで使用されるパターンは、パターンが網羅的であることを考えると、必要に応じて複雑にすることができます。パターンマッチングの詳細については、&lt;a href=&quot;../book/ch06-02-match&quot;&gt;Rustブック&lt;/a&gt;を参照してください。パターンのタイプはオプションで後で指定できますが、空白のままにした場合は、可能であればコンパイラによって自動的に推測されます。</target>
        </trans-unit>
        <trans-unit id="c2459ac3b35f7ffa8e048896d3c16ca10cfe1608" translate="yes" xml:space="preserve">
          <source>The pattern of the first arm in the &lt;code&gt;match&lt;/code&gt; expression matches a &lt;code&gt;Message::ChangeColor&lt;/code&gt; enum variant that contains a &lt;code&gt;Color::Rgb&lt;/code&gt; variant; then the pattern binds to the three inner &lt;code&gt;i32&lt;/code&gt; values. The pattern of the second arm also matches a &lt;code&gt;Message::ChangeColor&lt;/code&gt; enum variant, but the inner enum matches the &lt;code&gt;Color::Hsv&lt;/code&gt; variant instead. We can specify these complex conditions in one &lt;code&gt;match&lt;/code&gt; expression, even though two enums are involved.</source>
          <target state="translated">&lt;code&gt;match&lt;/code&gt; 式の最初のアームのパターンは、 &lt;code&gt;Color::Rgb&lt;/code&gt; バリアントを含む &lt;code&gt;Message::ChangeColor&lt;/code&gt; enumバリアントと一致します。次に、パターンは3つの内部 &lt;code&gt;i32&lt;/code&gt; 値にバインドします。 2番目のアームのパターンも &lt;code&gt;Message::ChangeColor&lt;/code&gt; 列挙型バリアントと一致しますが、内部列挙型は &lt;code&gt;Color::Hsv&lt;/code&gt; バリアントと一致します。2つの列挙型が含まれている場合でも、1つの &lt;code&gt;match&lt;/code&gt; 式でこれらの複雑な条件を指定できます。</target>
        </trans-unit>
        <trans-unit id="a42d62f0f2bbc370e10f35406b8b10d13fb51143" translate="yes" xml:space="preserve">
          <source>The patterns programmed into Rust&amp;rsquo;s analysis of references are called the &lt;em&gt;lifetime elision rules&lt;/em&gt;. These aren&amp;rsquo;t rules for programmers to follow; they&amp;rsquo;re a set of particular cases that the compiler will consider, and if your code fits these cases, you don&amp;rsquo;t need to write the lifetimes explicitly.</source>
          <target state="translated">Rustの参照の分析にプログラムされたパターンは、&lt;em&gt;生涯省略ルール&lt;/em&gt;と呼ばれ&lt;em&gt;ます&lt;/em&gt;。これらは、プログラマが従うべき規則ではありません。これらはコンパイラが検討する特定のケースのセットであり、コードがこれらのケースに当てはまる場合は、ライフタイムを明示的に記述する必要はありません。</target>
        </trans-unit>
        <trans-unit id="012a0566d4550e7174697625c83965140d98cc31" translate="yes" xml:space="preserve">
          <source>The peer address may be set by the &lt;code&gt;connect&lt;/code&gt; method, and this method will return an error if the socket has not already been connected.</source>
          <target state="translated">ピアアドレスは、 &lt;code&gt;connect&lt;/code&gt; メソッドによって設定できます。ソケットがまだ接続されていない場合、このメソッドはエラーを返します。</target>
        </trans-unit>
        <trans-unit id="c7338ebe0eb2e257ec72f81d23df2b1d8ecc7ce7" translate="yes" xml:space="preserve">
          <source>The performance of these two features (Spoiler alert: they&amp;rsquo;re faster than you might think!)</source>
          <target state="translated">これら2つの機能のパフォーマンス（スポイラーアラート：思ったよりも高速です！）</target>
        </trans-unit>
        <trans-unit id="b42828007b197505190540700b376ffcea8793e7" translate="yes" xml:space="preserve">
          <source>The pointer is valid only if there are some strong references. The pointer may be dangling, unaligned or even &lt;a href=&quot;../ptr/fn.null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt; otherwise.</source>
          <target state="translated">The pointer is valid only if there are some strong references. The pointer may be dangling, unaligned or even &lt;a href=&quot;../ptr/fn.null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt; otherwise.</target>
        </trans-unit>
        <trans-unit id="3c13daf063b9e605b83028dc0feae2167ff80511" translate="yes" xml:space="preserve">
          <source>The pointer may be &lt;a href=&quot;../ptr/fn.null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt; or be dangling in case the object has already been destroyed.</source>
          <target state="translated">オブジェクトがすでに破棄されている場合は、ポインタが&lt;a href=&quot;../ptr/fn.null&quot;&gt; &lt;code&gt;null&lt;/code&gt; である&lt;/a&gt;か、ぶら下がっています。</target>
        </trans-unit>
        <trans-unit id="c51f7cfe5691f3edc0397a76000e0e31815c58dc" translate="yes" xml:space="preserve">
          <source>The pointer must be &lt;a href=&quot;index#safety&quot;&gt;valid&lt;/a&gt; for reads and writes for &lt;code&gt;ptr.len() * mem::size_of::&amp;lt;T&amp;gt;()&lt;/code&gt; many bytes, and it must be properly aligned. This means in particular:</source>
          <target state="translated">The pointer must be &lt;a href=&quot;index#safety&quot;&gt;valid&lt;/a&gt; for reads and writes for &lt;code&gt;ptr.len() * mem::size_of::&amp;lt;T&amp;gt;()&lt;/code&gt; many bytes, and it must be properly aligned. This means in particular:</target>
        </trans-unit>
        <trans-unit id="2d6cc95e7b609b2c158e2115aa97ef7549141c5d" translate="yes" xml:space="preserve">
          <source>The pointer must be &lt;a href=&quot;index#safety&quot;&gt;valid&lt;/a&gt; for reads for &lt;code&gt;ptr.len() * mem::size_of::&amp;lt;T&amp;gt;()&lt;/code&gt; many bytes, and it must be properly aligned. This means in particular:</source>
          <target state="translated">The pointer must be &lt;a href=&quot;index#safety&quot;&gt;valid&lt;/a&gt; for reads for &lt;code&gt;ptr.len() * mem::size_of::&amp;lt;T&amp;gt;()&lt;/code&gt; many bytes, and it must be properly aligned. This means in particular:</target>
        </trans-unit>
        <trans-unit id="eab75a519555d7d953b751dc8250587661100bb4" translate="yes" xml:space="preserve">
          <source>The pointer must be &lt;a href=&quot;ptr/index#safety&quot;&gt;valid&lt;/a&gt; for reads and writes for &lt;code&gt;ptr.len() * mem::size_of::&amp;lt;T&amp;gt;()&lt;/code&gt; many bytes, and it must be properly aligned. This means in particular:</source>
          <target state="translated">The pointer must be &lt;a href=&quot;ptr/index#safety&quot;&gt;valid&lt;/a&gt; for reads and writes for &lt;code&gt;ptr.len() * mem::size_of::&amp;lt;T&amp;gt;()&lt;/code&gt; many bytes, and it must be properly aligned. This means in particular:</target>
        </trans-unit>
        <trans-unit id="032bd62f596d84915c186de815c7e316435955e0" translate="yes" xml:space="preserve">
          <source>The pointer must be &lt;a href=&quot;ptr/index#safety&quot;&gt;valid&lt;/a&gt; for reads for &lt;code&gt;ptr.len() * mem::size_of::&amp;lt;T&amp;gt;()&lt;/code&gt; many bytes, and it must be properly aligned. This means in particular:</source>
          <target state="translated">The pointer must be &lt;a href=&quot;ptr/index#safety&quot;&gt;valid&lt;/a&gt; for reads for &lt;code&gt;ptr.len() * mem::size_of::&amp;lt;T&amp;gt;()&lt;/code&gt; many bytes, and it must be properly aligned. This means in particular:</target>
        </trans-unit>
        <trans-unit id="ada677800eded9f5bb09a12d4c9272e1a48a79a4" translate="yes" xml:space="preserve">
          <source>The pointer must be aligned even for zero-length slices. One reason for this is that enum layout optimizations may rely on references (including slices of any length) being aligned and non-null to distinguish them from other data. You can obtain a pointer that is usable as &lt;code&gt;data&lt;/code&gt; for zero-length slices using &lt;a href=&quot;ptr/struct.nonnull#method.dangling&quot;&gt;&lt;code&gt;NonNull::dangling()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">長さがゼロのスライスの場合でも、ポインタを揃える必要があります。この理由の1つは、列挙型レイアウトの最適化では、他のデータと区別するために、参照（任意の長さのスライスを含む）が整列され、null以外であることに依存する場合があるためです。&lt;a href=&quot;ptr/struct.nonnull#method.dangling&quot;&gt; &lt;code&gt;NonNull::dangling()&lt;/code&gt; &lt;/a&gt;を使用して、長さゼロのスライスの &lt;code&gt;data&lt;/code&gt; として使用できるポインターを取得できます。</target>
        </trans-unit>
        <trans-unit id="5f6efbb545be55e13f893ac7dc6eaebbf999874a" translate="yes" xml:space="preserve">
          <source>The pointer must be aligned even for zero-length slices. One reason for this is that enum layout optimizations may rely on references (including slices of any length) being aligned and non-null to distinguish them from other data. You can obtain a pointer that is usable as &lt;code&gt;data&lt;/code&gt; for zero-length slices using &lt;a href=&quot;struct.nonnull#method.dangling&quot;&gt;&lt;code&gt;NonNull::dangling()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">長さがゼロのスライスの場合でも、ポインタを揃える必要があります。この理由の1つは、列挙型レイアウトの最適化では、他のデータと区別するために、参照（任意の長さのスライスを含む）が整列され、null以外であることに依存する場合があるためです。&lt;a href=&quot;struct.nonnull#method.dangling&quot;&gt; &lt;code&gt;NonNull::dangling()&lt;/code&gt; &lt;/a&gt;を使用して、長さゼロのスライスの &lt;code&gt;data&lt;/code&gt; として使用できるポインターを取得できます。</target>
        </trans-unit>
        <trans-unit id="7882f94a6f87dc84506e67cf6e6f86cd53b02982" translate="yes" xml:space="preserve">
          <source>The pointer must be properly aligned.</source>
          <target state="translated">ポインタは適切に配置されている必要があります。</target>
        </trans-unit>
        <trans-unit id="e3de011a05d32ff014b1d75b10f32cd8a5ceea0c" translate="yes" xml:space="preserve">
          <source>The pointer must have been obtained through &lt;code&gt;Arc::into_raw&lt;/code&gt;, and the associated &lt;code&gt;Arc&lt;/code&gt; instance must be valid (i.e. the strong count must be at least 1) for the duration of this method.</source>
          <target state="translated">ポインタは &lt;code&gt;Arc::into_raw&lt;/code&gt; を介して取得されている必要があり、関連付けられた &lt;code&gt;Arc&lt;/code&gt; インスタンスはこのメソッドの期間中有効である必要があります（つまり、ストロングカウントは少なくとも1である必要があります）。</target>
        </trans-unit>
        <trans-unit id="d97c31e45ac08eaf340466af2855c1d69a8c822f" translate="yes" xml:space="preserve">
          <source>The pointer must have been obtained through &lt;code&gt;Arc::into_raw&lt;/code&gt;, and the associated &lt;code&gt;Arc&lt;/code&gt; instance must be valid (i.e. the strong count must be at least 1) when invoking this method. This method can be used to release the final &lt;code&gt;Arc&lt;/code&gt; and backing storage, but &lt;strong&gt;should not&lt;/strong&gt; be called after the final &lt;code&gt;Arc&lt;/code&gt; has been released.</source>
          <target state="translated">ポインタは &lt;code&gt;Arc::into_raw&lt;/code&gt; を介して取得されている必要があり、このメソッドを呼び出すときは、関連付けられている &lt;code&gt;Arc&lt;/code&gt; インスタンスが有効である必要があります（つまり、ストロングカウントは少なくとも1である必要があります）。このメソッドは、最終的な &lt;code&gt;Arc&lt;/code&gt; とバッキングストレージを解放するために使用できますが、最終的な &lt;code&gt;Arc&lt;/code&gt; が解放された後に呼び出すこと&lt;strong&gt;はできません&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="15b7d63adfc51a7db20582294688b5c6c47a0e5f" translate="yes" xml:space="preserve">
          <source>The pointer must have originated from the &lt;a href=&quot;struct.weak#method.into_raw&quot;&gt;&lt;code&gt;into_raw&lt;/code&gt;&lt;/a&gt; and must still own its potential weak reference.</source>
          <target state="translated">ポインタは&lt;a href=&quot;struct.weak#method.into_raw&quot;&gt; &lt;code&gt;into_raw&lt;/code&gt; &lt;/a&gt;から発生している必要があり、潜在的な弱参照を所有している必要があります。</target>
        </trans-unit>
        <trans-unit id="561496e3426c59f66cb3091efa83ade648ff436f" translate="yes" xml:space="preserve">
          <source>The pointer must point to an initialized instance of &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">ポインタは、 &lt;code&gt;T&lt;/code&gt; の初期化されたインスタンスを指している必要があります。</target>
        </trans-unit>
        <trans-unit id="d562cc44e11330190c6c67edae5c28019986b445" translate="yes" xml:space="preserve">
          <source>The pointer must represent one valid weak count. In other words, it must point to &lt;code&gt;T&lt;/code&gt; which is or &lt;em&gt;was&lt;/em&gt; managed by an &lt;a href=&quot;struct.arc&quot;&gt;&lt;code&gt;Arc&lt;/code&gt;&lt;/a&gt; and the weak count of that &lt;a href=&quot;struct.arc&quot;&gt;&lt;code&gt;Arc&lt;/code&gt;&lt;/a&gt; must not have reached 0. It is allowed for the strong count to be 0.</source>
          <target state="translated">ポインターは、1つの有効な弱いカウントを表す必要があります。言い換えれば、それはを指している必要があります &lt;code&gt;T&lt;/code&gt; であるか、どの&lt;em&gt;ました&lt;/em&gt;によって管理&lt;a href=&quot;struct.arc&quot;&gt; &lt;code&gt;Arc&lt;/code&gt; &lt;/a&gt;とその弱い回数&lt;a href=&quot;struct.arc&quot;&gt; &lt;code&gt;Arc&lt;/code&gt; &lt;/a&gt;強いカウントは0にすることが許可されて0に達していてはいけません。</target>
        </trans-unit>
        <trans-unit id="20794b93602408cab637197663bf6c675231f221" translate="yes" xml:space="preserve">
          <source>The pointer must represent one valid weak count. In other words, it must point to &lt;code&gt;T&lt;/code&gt; which is or &lt;em&gt;was&lt;/em&gt; managed by an &lt;a href=&quot;struct.rc&quot;&gt;&lt;code&gt;Rc&lt;/code&gt;&lt;/a&gt; and the weak count of that &lt;a href=&quot;struct.rc&quot;&gt;&lt;code&gt;Rc&lt;/code&gt;&lt;/a&gt; must not have reached 0. It is allowed for the strong count to be 0.</source>
          <target state="translated">ポインターは、1つの有効な弱いカウントを表す必要があります。言い換えれば、それはを指している必要があります &lt;code&gt;T&lt;/code&gt; であるか、&lt;em&gt;された&lt;/em&gt;ことにより、管理&lt;a href=&quot;struct.rc&quot;&gt; &lt;code&gt;Rc&lt;/code&gt; と&lt;/a&gt;していることの弱い数&lt;a href=&quot;struct.rc&quot;&gt; &lt;code&gt;Rc&lt;/code&gt; は&lt;/a&gt; 0であることを強くカウントに許可されて0に達していてはいけません。</target>
        </trans-unit>
        <trans-unit id="d6200eb92cc97fc1d9fec6dde1612acc6fca320f" translate="yes" xml:space="preserve">
          <source>The pointer passed to all functions inside the vtable is the &lt;code&gt;data&lt;/code&gt; pointer from the enclosing &lt;a href=&quot;struct.rawwaker&quot;&gt;&lt;code&gt;RawWaker&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">vtable内のすべての関数に渡されるポインターは、囲んでいる&lt;a href=&quot;struct.rawwaker&quot;&gt; &lt;code&gt;RawWaker&lt;/code&gt; &lt;/a&gt;オブジェクトからの &lt;code&gt;data&lt;/code&gt; ポインターです。</target>
        </trans-unit>
        <trans-unit id="1edb65c05d4061d65ef7c599b48750ef7ff50704" translate="yes" xml:space="preserve">
          <source>The pointer which this function returns must be returned to Rust and reconstituted using &lt;a href=&quot;#method.from_raw&quot;&gt;&lt;code&gt;from_raw&lt;/code&gt;&lt;/a&gt; to be properly deallocated. Specifically, one should &lt;em&gt;not&lt;/em&gt; use the standard C &lt;code&gt;free()&lt;/code&gt; function to deallocate this string.</source>
          <target state="translated">この関数が返すポインタは、Rustに返され、&lt;a href=&quot;#method.from_raw&quot;&gt; &lt;code&gt;from_raw&lt;/code&gt; &lt;/a&gt;を使用して再構成されて、適切に割り当て解除される必要があります。具体的には、標準のC &lt;code&gt;free()&lt;/code&gt; 関数を使用してこの文字列の割り当てを解除し&lt;em&gt;ないで&lt;/em&gt;ください。</target>
        </trans-unit>
        <trans-unit id="80c5d8a7d931f08c90875d736c69378d02a8b64f" translate="yes" xml:space="preserve">
          <source>The pointer which this function returns must be returned to Rust and reconstituted using &lt;a href=&quot;struct.cstring#method.from_raw&quot;&gt;&lt;code&gt;CString::from_raw&lt;/code&gt;&lt;/a&gt; to be properly deallocated. Specifically, one should &lt;em&gt;not&lt;/em&gt; use the standard C &lt;code&gt;free()&lt;/code&gt; function to deallocate this string.</source>
          <target state="translated">この関数が返すポインターは、R​​ustに返され、&lt;a href=&quot;struct.cstring#method.from_raw&quot;&gt; &lt;code&gt;CString::from_raw&lt;/code&gt; &lt;/a&gt;を使用して再構成されて適切に割り当て解除される必要があります。具体的には、標準Cの &lt;code&gt;free()&lt;/code&gt; 関数を使用してこの文字列の割り当てを解除し&lt;em&gt;ないで&lt;/em&gt;ください。</target>
        </trans-unit>
        <trans-unit id="33be8edf304b61e5005625c2c6aab855fc0ce0b3" translate="yes" xml:space="preserve">
          <source>The pointer will be properly aligned and non-null.</source>
          <target state="translated">ポインタは適切に整列され、非 null になります。</target>
        </trans-unit>
        <trans-unit id="0c49a977fe21d66debc9a4c8b7d4cbbf312c9ff9" translate="yes" xml:space="preserve">
          <source>The pointer-sized signed integer type.</source>
          <target state="translated">ポインタサイズの符号付き整数型。</target>
        </trans-unit>
        <trans-unit id="aebc6996cd3e6c3ef507e0e5f263e13ad4dcb04b" translate="yes" xml:space="preserve">
          <source>The pointer-sized unsigned integer type.</source>
          <target state="translated">ポインタサイズの符号なし整数型。</target>
        </trans-unit>
        <trans-unit id="589a00e779c762d350b4058d583ec6c935c455c7" translate="yes" xml:space="preserve">
          <source>The position used for seeking with &lt;a href=&quot;enum.seekfrom#variant.Current&quot;&gt;&lt;code&gt;SeekFrom::Current&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(_)&lt;/code&gt; is the position the underlying reader would be at if the &lt;code&gt;BufReader&amp;lt;R&amp;gt;&lt;/code&gt; had no internal buffer.</source>
          <target state="translated">&lt;a href=&quot;enum.seekfrom#variant.Current&quot;&gt; &lt;code&gt;SeekFrom::Current&lt;/code&gt; &lt;/a&gt; &lt;code&gt;(_)&lt;/code&gt; でシークするために使用される位置は、 &lt;code&gt;BufReader&amp;lt;R&amp;gt;&lt;/code&gt; 内部バッファーがない場合に基になるリーダーが存在する位置です。</target>
        </trans-unit>
        <trans-unit id="4aef48aecfebe1bd9e6f96a0939bb1d8fec84054" translate="yes" xml:space="preserve">
          <source>The position used for seeking with &lt;code&gt;SeekFrom::Current(_)&lt;/code&gt; is the position the underlying reader would be at if the &lt;code&gt;BufReader&lt;/code&gt; had no internal buffer.</source>
          <target state="translated">&lt;code&gt;SeekFrom::Current(_)&lt;/code&gt; でシークするために使用される位置は、 &lt;code&gt;BufReader&lt;/code&gt; に内部バッファーがなかった場合に、基になるリーダーが存在する位置です。</target>
        </trans-unit>
        <trans-unit id="6f1678b0e093177e7620807a9112f4ef7365e563" translate="yes" xml:space="preserve">
          <source>The positive difference of two numbers.</source>
          <target state="translated">2つの数字の正の差。</target>
        </trans-unit>
        <trans-unit id="e0a83025808dfefbef9f39106ce5fafd89bb2f1c" translate="yes" xml:space="preserve">
          <source>The practical use cases for &lt;code&gt;forget&lt;/code&gt; are rather specialized and mainly come up in unsafe or FFI code.</source>
          <target state="translated">&lt;code&gt;forget&lt;/code&gt; の実用的な使用例はかなり専門的で、主に安全でないコードまたはFFIコードで発生します。</target>
        </trans-unit>
        <trans-unit id="fb2efbc552f75b7ae8fe422ecdae2c87a030f044" translate="yes" xml:space="preserve">
          <source>The precedence of Rust operators and expressions is ordered as follows, going from strong to weak. Binary Operators at the same precedence level are grouped in the order given by their associativity.</source>
          <target state="translated">Rustの演算子や式の優先順位は、強いものから弱いものへと、以下のように順序付けされています。同じ優先度レベルのバイナリ演算子は、その連想性で与えられた順序でグループ化されています。</target>
        </trans-unit>
        <trans-unit id="5ed57a298428ca0f7395d0616c5eb17f0804c549" translate="yes" xml:space="preserve">
          <source>The precise Rust aliasing rules are somewhat in flux, but the main points are not contentious:</source>
          <target state="translated">正確なRust aliasingルールはやや流動的ですが、要点は争点にならないことです。</target>
        </trans-unit>
        <trans-unit id="b19f5cee233892caf5ddceb163f25862486da448" translate="yes" xml:space="preserve">
          <source>The precise definition is: a type &lt;code&gt;T&lt;/code&gt; is &lt;a href=&quot;trait.sync&quot;&gt;&lt;code&gt;Sync&lt;/code&gt;&lt;/a&gt; if and only if &lt;code&gt;&amp;amp;T&lt;/code&gt; is &lt;a href=&quot;trait.send&quot;&gt;&lt;code&gt;Send&lt;/code&gt;&lt;/a&gt;. In other words, if there is no possibility of &lt;a href=&quot;../../reference/behavior-considered-undefined&quot;&gt;undefined behavior&lt;/a&gt; (including data races) when passing &lt;code&gt;&amp;amp;T&lt;/code&gt; references between threads.</source>
          <target state="translated">正確な定義は次のとおりです。 &lt;code&gt;&amp;amp;T&lt;/code&gt; が&lt;a href=&quot;trait.send&quot;&gt; &lt;code&gt;Send&lt;/code&gt; である&lt;/a&gt;場合に限り、タイプ &lt;code&gt;T&lt;/code&gt; は&lt;a href=&quot;trait.sync&quot;&gt; &lt;code&gt;Sync&lt;/code&gt; &lt;/a&gt;です。つまり、スレッド間で &lt;code&gt;&amp;amp;T&lt;/code&gt; 参照を渡すときに、&lt;a href=&quot;../../reference/behavior-considered-undefined&quot;&gt;未定義の動作&lt;/a&gt;（データの競合を含む）の可能性がない場合。</target>
        </trans-unit>
        <trans-unit id="d40bd8a03d88e20d491263cadc1752cd72c99258" translate="yes" xml:space="preserve">
          <source>The precise definition is: a type &lt;code&gt;T&lt;/code&gt; is &lt;code&gt;Sync&lt;/code&gt; if and only if &lt;code&gt;&amp;amp;T&lt;/code&gt; is &lt;a href=&quot;trait.send&quot;&gt;&lt;code&gt;Send&lt;/code&gt;&lt;/a&gt;. In other words, if there is no possibility of &lt;a href=&quot;../../reference/behavior-considered-undefined&quot;&gt;undefined behavior&lt;/a&gt; (including data races) when passing &lt;code&gt;&amp;amp;T&lt;/code&gt; references between threads.</source>
          <target state="translated">正確な定義は次のとおりです。タイプ &lt;code&gt;T&lt;/code&gt; は、 &lt;code&gt;&amp;amp;T&lt;/code&gt; が&lt;a href=&quot;trait.send&quot;&gt; &lt;code&gt;Send&lt;/code&gt; の&lt;/a&gt;場合にのみ &lt;code&gt;Sync&lt;/code&gt; です。つまり、スレッド間で &lt;code&gt;&amp;amp;T&lt;/code&gt; 参照を渡すときに、&lt;a href=&quot;../../reference/behavior-considered-undefined&quot;&gt;未定義の動作&lt;/a&gt;（データ競合を含む）の可能性がない場合。</target>
        </trans-unit>
        <trans-unit id="f47fdb8c6eff67732e48f22a8373d2422de700a9" translate="yes" xml:space="preserve">
          <source>The precise memory layout of a struct is not specified. One can specify a particular layout using the &lt;a href=&quot;../type-layout#representations&quot;&gt;&lt;code&gt;repr&lt;/code&gt; attribute&lt;/a&gt;.</source>
          <target state="translated">構造体の正確なメモリレイアウトは指定されていません。&lt;a href=&quot;../type-layout#representations&quot;&gt; &lt;code&gt;repr&lt;/code&gt; 属性&lt;/a&gt;を使用して特定のレイアウトを指定できます。</target>
        </trans-unit>
        <trans-unit id="18073d476ac74d19109a41401163857e8cd5056d" translate="yes" xml:space="preserve">
          <source>The precise rules for validity are not determined yet. The guarantees that are provided at this point are very minimal:</source>
          <target state="translated">有効性の正確なルールはまだ決定されていません。現時点で提供されている保証は非常に最小限のものです。</target>
        </trans-unit>
        <trans-unit id="4933f50236b0c7e48edc0beedb70199f13c5e285" translate="yes" xml:space="preserve">
          <source>The predicate passed to &lt;code&gt;partition()&lt;/code&gt; can return &lt;code&gt;true&lt;/code&gt;, or &lt;code&gt;false&lt;/code&gt;. &lt;code&gt;partition()&lt;/code&gt; returns a pair, all of the elements for which it returned &lt;code&gt;true&lt;/code&gt;, and all of the elements for which it returned &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;partition()&lt;/code&gt; に渡される述語は、 &lt;code&gt;true&lt;/code&gt; または &lt;code&gt;false&lt;/code&gt; を返すことができます。 &lt;code&gt;partition()&lt;/code&gt; は、ペア、 &lt;code&gt;true&lt;/code&gt; を返したすべての要素、および &lt;code&gt;false&lt;/code&gt; を返したすべての要素を返します。</target>
        </trans-unit>
        <trans-unit id="7fb4a93626b0bdb54fdbc20512bf4f76ed5cc7cd" translate="yes" xml:space="preserve">
          <source>The preferred alignment of a type.</source>
          <target state="translated">タイプの好ましい配置。</target>
        </trans-unit>
        <trans-unit id="dbc19e95dcebc744b29e267ad8d2ebfde2e212c0" translate="yes" xml:space="preserve">
          <source>The prelude can be changed to the &lt;em&gt;core prelude&lt;/em&gt; by using the &lt;code&gt;no_std&lt;/code&gt;&lt;a href=&quot;attributes&quot;&gt;attribute&lt;/a&gt; on the root crate module. The linked crate is &lt;a href=&quot;https://doc.rust-lang.org/core/index.html&quot;&gt;&lt;code&gt;core&lt;/code&gt;&lt;/a&gt; and the prelude module is &lt;a href=&quot;https://doc.rust-lang.org/core/prelude/index.html&quot;&gt;&lt;code&gt;core::prelude::v1&lt;/code&gt;&lt;/a&gt;. Using the core prelude over the standard prelude is useful when either the crate is targeting a platform that does not support the standard library or is purposefully not using the capabilities of the standard library. Those capabilities are mainly dynamic memory allocation (e.g. &lt;code&gt;Box&lt;/code&gt; and &lt;code&gt;Vec&lt;/code&gt;) and file and network capabilities (e.g. &lt;code&gt;std::fs&lt;/code&gt; and &lt;code&gt;std::io&lt;/code&gt;).</source>
          <target state="translated">ルートクレートモジュールで &lt;code&gt;no_std&lt;/code&gt; &lt;a href=&quot;attributes&quot;&gt;属性&lt;/a&gt;を使用すると、&lt;em&gt;プレリュード&lt;/em&gt;を&lt;em&gt;コアプレリュードに&lt;/em&gt;変更できます。リンクされたクレートが&lt;a href=&quot;https://doc.rust-lang.org/core/index.html&quot;&gt; &lt;code&gt;core&lt;/code&gt; &lt;/a&gt;で、プレリュードモジュールが&lt;a href=&quot;https://doc.rust-lang.org/core/prelude/index.html&quot;&gt; &lt;code&gt;core::prelude::v1&lt;/code&gt; &lt;/a&gt;です。標準プレリュードよりもコアプレリュードを使用すると、クレートが標準ライブラリをサポートしていないプラットフォームを対象としている場合や、意図的に標準ライブラリの機能を使用していない場合に役立ちます。これらの機能は、主に動的メモリ割り当て（ &lt;code&gt;Box&lt;/code&gt; や &lt;code&gt;Vec&lt;/code&gt; など）とファイルおよびネットワーク機能（ &lt;code&gt;std::fs&lt;/code&gt; および &lt;code&gt;std::io&lt;/code&gt; ）です。</target>
        </trans-unit>
        <trans-unit id="97af9d37776d235cea4e5a19d84cc2b3492bd088" translate="yes" xml:space="preserve">
          <source>The previous Appendix D, &amp;ldquo;Macros,&amp;rdquo; has been expanded to include procedural macros and was moved to the &amp;ldquo;Macros&amp;rdquo; section in Chapter 19.</source>
          <target state="translated">以前の付録D「マクロ」は、手続き型マクロを含むように拡張され、第19章の「マクロ」セクションに移動しました。</target>
        </trans-unit>
        <trans-unit id="757bcf5f0a1b2e7c263eb1294cae88079f56068e" translate="yes" xml:space="preserve">
          <source>The previous code example fixed:</source>
          <target state="translated">前回のコード例を修正しました。</target>
        </trans-unit>
        <trans-unit id="3f0414a5a5139b7f4e08b6a8b19dea661159e39f" translate="yes" xml:space="preserve">
          <source>The previous example contains a circular dependency between two traits: &lt;code&gt;FirstTrait&lt;/code&gt; depends on &lt;code&gt;SecondTrait&lt;/code&gt; which itself depends on &lt;code&gt;FirstTrait&lt;/code&gt;.</source>
          <target state="translated">前の例には、2つの特性間の循環依存関係が含まれています &lt;code&gt;FirstTrait&lt;/code&gt; はSecondTraitに依存し、 &lt;code&gt;SecondTrait&lt;/code&gt; 自体は &lt;code&gt;FirstTrait&lt;/code&gt; に依存します。</target>
        </trans-unit>
        <trans-unit id="74a02be48083e6dc1dccc9a7d07cadacc4a53e7c" translate="yes" xml:space="preserve">
          <source>The previously duplicated code is now outside the &lt;code&gt;if&lt;/code&gt; and &lt;code&gt;else&lt;/code&gt; blocks and uses the &lt;code&gt;status_line&lt;/code&gt; and &lt;code&gt;filename&lt;/code&gt; variables. This makes it easier to see the difference between the two cases, and it means we have only one place to update the code if we want to change how the file reading and response writing work. The behavior of the code in Listing 20-9 will be the same as that in Listing 20-8.</source>
          <target state="translated">以前に複製されたコードは、 &lt;code&gt;if&lt;/code&gt; および &lt;code&gt;else&lt;/code&gt; ブロックの外側にあり、 &lt;code&gt;status_line&lt;/code&gt; および &lt;code&gt;filename&lt;/code&gt; 変数を使用します。これにより、2つのケースの違いを簡単に確認できます。つまり、ファイルの読み取りと応答の書き込みの動作を変更する場合、コードを更新する場所は1つだけです。コードリスト20-9のコードの動作は、コードリスト20-8と同じになります。</target>
        </trans-unit>
        <trans-unit id="3c5b34498a69e2cebc3edcacf3022a159fa0d3cf" translate="yes" xml:space="preserve">
          <source>The primary separator of path components for the current platform.</source>
          <target state="translated">現在のプラットフォームのパスコンポーネントの主なセパレータ。</target>
        </trans-unit>
        <trans-unit id="d6d94c1dd4c2a4fb7b30d949d7313e70926e43b0" translate="yes" xml:space="preserve">
          <source>The primary use for the &lt;code&gt;let&lt;/code&gt; keyword is in &lt;code&gt;let&lt;/code&gt; statements, which are used to introduce a new set of variables into the current scope, as given by a pattern.</source>
          <target state="translated">&lt;code&gt;let&lt;/code&gt; キーワードの主な用途は &lt;code&gt;let&lt;/code&gt; ステートメントであり、パターンで指定されたように、現在のスコープに新しい変数のセットを導入するために使用されます。</target>
        </trans-unit>
        <trans-unit id="14d97c2e9b793134fb211ba0f8484d81636a707d" translate="yes" xml:space="preserve">
          <source>The primary use of the &lt;code&gt;crate&lt;/code&gt; keyword is as a part of &lt;code&gt;extern crate&lt;/code&gt; declarations, which are used to specify a dependency on a crate external to the one it's declared in. Crates are the fundamental compilation unit of Rust code, and can be seen as libraries or projects. More can be read about crates in the &lt;a href=&quot;../reference/items/extern-crates&quot;&gt;Reference&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;crate&lt;/code&gt; キーワードの主な用途は、 &lt;code&gt;extern crate&lt;/code&gt; 宣言の一部として使用されます。これは、宣言されたものの外部にあるクレートへの依存関係を指定するために使用されます。クレートは、Rustコードの基本的なコンパイル単位であり、ライブラリと見なすことができますまたはプロジェクト。&lt;a href=&quot;../reference/items/extern-crates&quot;&gt;レファレンスで&lt;/a&gt;木箱についてもっと読むことができます。</target>
        </trans-unit>
        <trans-unit id="229057a153cb547539a5140063be86de4fd5f109" translate="yes" xml:space="preserve">
          <source>The priority policy of the lock is dependent on the underlying operating system's implementation, and this type does not guarantee that any particular policy will be used.</source>
          <target state="translated">ロックの優先度ポリシーは、基礎となるオペレーティングシステムの実装に依存しており、このタイプは特定のポリシーが使用されることを保証するものではありません。</target>
        </trans-unit>
        <trans-unit id="aa4bf60f4fab6128150a2cced20eb507a73f2223" translate="yes" xml:space="preserve">
          <source>The private address ranges are defined in &lt;a href=&quot;https://tools.ietf.org/html/rfc1918&quot;&gt;IETF RFC 1918&lt;/a&gt; and include:</source>
          <target state="translated">プライベートアドレスの範囲は&lt;a href=&quot;https://tools.ietf.org/html/rfc1918&quot;&gt;IETF RFC 1918で&lt;/a&gt;定義されており、次のものが含まれます。</target>
        </trans-unit>
        <trans-unit id="66e536d148965eb5f5f66293b59e6e08d6c64117" translate="yes" xml:space="preserve">
          <source>The problem above can be solved by using the &lt;code&gt;ref&lt;/code&gt; keyword.</source>
          <target state="translated">上記の問題は、 &lt;code&gt;ref&lt;/code&gt; キーワードを使用して解決できます。</target>
        </trans-unit>
        <trans-unit id="a6b09f11dabd510af2bfd7f547ade1211b4999bd" translate="yes" xml:space="preserve">
          <source>The problem here is that foo is defined as accepting a parameter of type &lt;code&gt;Fn&lt;/code&gt;. Closures passed into foo will thus be inferred to be of type &lt;code&gt;Fn&lt;/code&gt;, meaning that they capture their context immutably.</source>
          <target state="translated">ここでの問題は、fooが &lt;code&gt;Fn&lt;/code&gt; 型のパラメーターを受け入れるものとして定義されていることです。したがって、fooに渡されたクロージャーは &lt;code&gt;Fn&lt;/code&gt; 型であると推測されます。つまり、コンテキストを不変にキャプチャーします。</target>
        </trans-unit>
        <trans-unit id="31cdd55efce31c6be1cacdfc4b62449817b4add1" translate="yes" xml:space="preserve">
          <source>The problem here is that if the given type or one of its fields implements the &lt;code&gt;Drop&lt;/code&gt; trait, this &lt;code&gt;Drop&lt;/code&gt; implementation cannot be called within a const context since it may run arbitrary, non-const-checked code. To prevent this issue, ensure all values with custom a custom &lt;code&gt;Drop&lt;/code&gt; implementation escape the initializer.</source>
          <target state="translated">ここでの問題は、指定されたタイプまたはそのフィールドの1つが &lt;code&gt;Drop&lt;/code&gt; 特性を実装している場合、この &lt;code&gt;Drop&lt;/code&gt; 実装は、任意の非constチェックコードを実行する可能性があるため、constコンテキスト内で呼び出すことができないことです。この問題を防ぐには、カスタムのカスタム &lt;code&gt;Drop&lt;/code&gt; 実装を持つすべての値がイニシャライザをエスケープするようにします。</target>
        </trans-unit>
        <trans-unit id="2c0a1b6d65ca057a3fdc49e919abfbdd1b60d9bd" translate="yes" xml:space="preserve">
          <source>The problem here is that the lifetime isn't contrained by any of the arguments, making it impossible to determine how long it's supposed to live.</source>
          <target state="translated">ここで問題になっているのは、その寿命がどの論法にも抵触していないことで、その寿命の長さを決めることができないということです。</target>
        </trans-unit>
        <trans-unit id="fe892e0206a6e32b9668f223826cd09ae2236ca9" translate="yes" xml:space="preserve">
          <source>The problem here is that we're attempting to take the type of X from MyTrait. Unfortunately, the type of X is not defined, because it's only made concrete in implementations of the trait. A working version of this code might look like:</source>
          <target state="translated">ここでの問題は、MyTraitからXの型を取ろうとしていることです。残念ながら、Xの型は定義されていません。このコードの動作バージョンは次のようになります。</target>
        </trans-unit>
        <trans-unit id="e5cbbff1b6bec23be456b36b8e81795c5a5d74a0" translate="yes" xml:space="preserve">
          <source>The problem is that &lt;code&gt;result&lt;/code&gt; goes out of scope and gets cleaned up at the end of the &lt;code&gt;longest&lt;/code&gt; function. We&amp;rsquo;re also trying to return a reference to &lt;code&gt;result&lt;/code&gt; from the function. There is no way we can specify lifetime parameters that would change the dangling reference, and Rust won&amp;rsquo;t let us create a dangling reference. In this case, the best fix would be to return an owned data type rather than a reference so the calling function is then responsible for cleaning up the value.</source>
          <target state="translated">問題は、 &lt;code&gt;result&lt;/code&gt; が範囲外になり、 &lt;code&gt;longest&lt;/code&gt; 関数の最後でクリーンアップされることです。また、関数からの &lt;code&gt;result&lt;/code&gt; への参照を返そうとしています。ダングリングリファレンスを変更するライフタイムパラメーターを指定する方法はありません。Rustではダングリングリファレンスを作成できません。この場合、最良の修正は、参照ではなく所有されたデータ型を返すことです。これにより、呼び出し元の関数が値をクリーンアップします。</target>
        </trans-unit>
        <trans-unit id="967a587dbf080c4427ca5b25acc74fdfbb85e443" translate="yes" xml:space="preserve">
          <source>The problem is that the first time we called &lt;code&gt;c.value&lt;/code&gt; with 1, the &lt;code&gt;Cacher&lt;/code&gt; instance saved &lt;code&gt;Some(1)&lt;/code&gt; in &lt;code&gt;self.value&lt;/code&gt;. Thereafter, no matter what we pass in to the &lt;code&gt;value&lt;/code&gt; method, it will always return 1.</source>
          <target state="translated">問題は、私たちが呼ば初めてということである &lt;code&gt;c.value&lt;/code&gt; を 1とは、 &lt;code&gt;Cacher&lt;/code&gt; インスタンスが保存された &lt;code&gt;Some(1)&lt;/code&gt; に &lt;code&gt;self.value&lt;/code&gt; 。その後、 &lt;code&gt;value&lt;/code&gt; メソッドに何を渡しても、常に1を返します。</target>
        </trans-unit>
        <trans-unit id="833738d2692abe453105a9ed609d8a8bc820fa2a" translate="yes" xml:space="preserve">
          <source>The problem is that the parameter &lt;code&gt;T&lt;/code&gt; does not appear in the implementing type (&lt;code&gt;Foo&lt;/code&gt;) of the impl. In this case, we can fix the error by moving the type parameter from the &lt;code&gt;impl&lt;/code&gt; to the method &lt;code&gt;get&lt;/code&gt;:</source>
          <target state="translated">問題は、パラメーター &lt;code&gt;T&lt;/code&gt; が実装の実装タイプ（ &lt;code&gt;Foo&lt;/code&gt; ）に表示されないことです。この場合、タイプパラメータを &lt;code&gt;impl&lt;/code&gt; からメソッド &lt;code&gt;get&lt;/code&gt; に移動することでエラーを修正できます。</target>
        </trans-unit>
        <trans-unit id="457d0fe3119f86c660d95b413dfdd79fba1ea792" translate="yes" xml:space="preserve">
          <source>The problem isn&amp;rsquo;t really with the concept but with the particular implementation. As such, Rust does not have nulls, but it does have an enum that can encode the concept of a value being present or absent. This enum is &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt;, and it is &lt;a href=&quot;../std/option/enum.option&quot;&gt;defined by the standard library&lt;/a&gt; as follows:</source>
          <target state="translated">問題は、実際にはコンセプトではなく、特定の実装にあります。そのため、Rustにはnullはありませんが、存在するまたは存在しない値の概念をエンコードできる列挙型があります。この列挙型は &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; であり&lt;a href=&quot;../std/option/enum.option&quot;&gt;、標準ライブラリ&lt;/a&gt;によって次のように定義されています。</target>
        </trans-unit>
        <trans-unit id="11afe9c5b7d3b341c43395982cbb657bcfedf0f3" translate="yes" xml:space="preserve">
          <source>The problem with null values is that if you try to use a null value as a not-null value, you&amp;rsquo;ll get an error of some kind. Because this null or not-null property is pervasive, it&amp;rsquo;s extremely easy to make this kind of error.</source>
          <target state="translated">null値の問題は、null値をnot-null値として使用しようとすると、何らかのエラーが発生することです。このnullまたはnot-nullプロパティは広範囲にわたるため、この種のエラーが発生するのは非常に簡単です。</target>
        </trans-unit>
        <trans-unit id="c7ffb82b1f0d51caf9c86374d324e2fb9ccac1dd" translate="yes" xml:space="preserve">
          <source>The process lacks permissions to view the contents.</source>
          <target state="translated">このプロセスは、コンテンツを表示するための権限を欠いています。</target>
        </trans-unit>
        <trans-unit id="475777e2dbe3eb987a1fdf9f7258e8744d697a33" translate="yes" xml:space="preserve">
          <source>The process lacks permissions to view the number of hardware threads available.</source>
          <target state="translated">このプロセスには、利用可能なハードウェアスレッド数を表示する権限がありません。</target>
        </trans-unit>
        <trans-unit id="d5a1f341aa82ec15ad62b2ae6744edcef123d4a7" translate="yes" xml:space="preserve">
          <source>The process may be in a &quot;broken state&quot; if this function returns in error. For example the working directory, environment variables, signal handling settings, various user/group information, or aspects of stdio file descriptors may have changed. If a &quot;transactional spawn&quot; is required to gracefully handle errors it is recommended to use the cross-platform &lt;code&gt;spawn&lt;/code&gt; instead.</source>
          <target state="translated">この関数がエラーで戻る場合、プロセスは「壊れた状態」にある可能性があります。たとえば、作業ディレクトリ、環境変数、信号処理設定、さまざまなユーザー/グループ情報、またはstdioファイル記述子の側面が変更されている可能性があります。エラーを適切に処理するために「トランザクションスポーン」が必要な場合は、代わりにクロスプラットフォーム &lt;code&gt;spawn&lt;/code&gt; を使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="68c2b04d8256c338d13f147c4eb19b87b45d4040" translate="yes" xml:space="preserve">
          <source>The programs we&amp;rsquo;ve written so far have been in one module in one file. As a project grows, you can organize code by splitting it into multiple modules and then multiple files. A package can contain multiple binary crates and optionally one library crate. As a package grows, you can extract parts into separate crates that become external dependencies. This chapter covers all these techniques. For very large projects of a set of interrelated packages that evolve together, Cargo provides workspaces, which we&amp;rsquo;ll cover in the &lt;a href=&quot;ch14-03-cargo-workspaces&quot;&gt;&amp;ldquo;Cargo Workspaces&amp;rdquo;&lt;/a&gt; section in Chapter 14.</source>
          <target state="translated">これまでに作成したプログラムは、1つのモジュールの1つのファイルに含まれています。プロジェクトが成長するにつれて、コードを複数のモジュールに分割してから複数のファイルに分割することで、コードを整理できます。パッケージには、複数のバイナリクレートと、オプションで1つのライブラリクレートを含めることができます。パッケージが大きくなると、パーツを別々のクレートに抽出して、外部依存関係にすることができます。この章では、これらすべての手法について説明します。一緒に進化する一連の相互に関連するパッケージの非常に大規模なプロジェクトに対して、Cargoはワークスペースを提供します。これについては、第14章の&lt;a href=&quot;ch14-03-cargo-workspaces&quot;&gt;「Cargoワークスペース」&lt;/a&gt;セクションで説明します。</target>
        </trans-unit>
        <trans-unit id="5cc2497d5ed1d06060f022ff65bd8b3ff66c60a9" translate="yes" xml:space="preserve">
          <source>The provided &lt;a href=&quot;struct.layout#method.size&quot;&gt;&lt;code&gt;layout.size()&lt;/code&gt;&lt;/a&gt; must fall in the range &lt;code&gt;min ..= max&lt;/code&gt;, where:</source>
          <target state="translated">提供される&lt;a href=&quot;struct.layout#method.size&quot;&gt; &lt;code&gt;layout.size()&lt;/code&gt; &lt;/a&gt;は、 &lt;code&gt;min ..= max&lt;/code&gt; 範囲内にある必要があります。ここで、</target>
        </trans-unit>
        <trans-unit id="be1cd28ce339784f890d38adb07a623811959d09" translate="yes" xml:space="preserve">
          <source>The provided &lt;code&gt;path&lt;/code&gt; doesn't exist.</source>
          <target state="translated">指定された &lt;code&gt;path&lt;/code&gt; は存在しません。</target>
        </trans-unit>
        <trans-unit id="a99e10f876c8ad74bd47e22ac1f9e01fe1760d28" translate="yes" xml:space="preserve">
          <source>The public methods &lt;code&gt;add&lt;/code&gt;, &lt;code&gt;remove&lt;/code&gt;, and &lt;code&gt;average&lt;/code&gt; are the only ways to access or modify data in an instance of &lt;code&gt;AveragedCollection&lt;/code&gt;. When an item is added to &lt;code&gt;list&lt;/code&gt; using the &lt;code&gt;add&lt;/code&gt; method or removed using the &lt;code&gt;remove&lt;/code&gt; method, the implementations of each call the private &lt;code&gt;update_average&lt;/code&gt; method that handles updating the &lt;code&gt;average&lt;/code&gt; field as well.</source>
          <target state="translated">publicメソッド &lt;code&gt;add&lt;/code&gt; 、 &lt;code&gt;remove&lt;/code&gt; 、および &lt;code&gt;average&lt;/code&gt; は、 &lt;code&gt;AveragedCollection&lt;/code&gt; のインスタンスのデータにアクセスまたは変更する唯一の方法です。 &lt;code&gt;add&lt;/code&gt; メソッドを使用して項目を &lt;code&gt;list&lt;/code&gt; に追加するか、 &lt;code&gt;remove&lt;/code&gt; メソッドを使用して項目を削除すると、各実装は、 &lt;code&gt;average&lt;/code&gt; フィールドの更新も処理するプライベート &lt;code&gt;update_average&lt;/code&gt; メソッドを呼び出します。</target>
        </trans-unit>
        <trans-unit id="c64a2ba34c09d4f2e756bf0b0db2bf928ce82f04" translate="yes" xml:space="preserve">
          <source>The purpose of pinning is to be able to rely on the placement of some data in memory. To make this work, not just moving the data is restricted; deallocating, repurposing, or otherwise invalidating the memory used to store the data is restricted, too. Concretely, for pinned data you have to maintain the invariant that &lt;em&gt;its memory will not get invalidated or repurposed from the moment it gets pinned until when &lt;a href=&quot;../ops/trait.drop#tymethod.drop&quot;&gt;&lt;code&gt;drop&lt;/code&gt;&lt;/a&gt; is called&lt;/em&gt;. Only once &lt;a href=&quot;../ops/trait.drop#tymethod.drop&quot;&gt;&lt;code&gt;drop&lt;/code&gt;&lt;/a&gt; returns or panics, the memory may be reused.</source>
          <target state="translated">固定の目的は、メモリ内の一部のデータの配置に依存できるようにすることです。これを機能させるには、データの移動だけではありません。データの格納に使用されるメモリの割り当て解除、転用、または無効化も制限されます。具体的には、固定されたデータの場合、固定&lt;em&gt;された瞬間から&lt;a href=&quot;../ops/trait.drop#tymethod.drop&quot;&gt; &lt;code&gt;drop&lt;/code&gt; &lt;/a&gt;が呼び出されるまで、そのメモリが無効化または再利用されないように&lt;/em&gt;不変条件を維持する必要があります。一度だけ&lt;a href=&quot;../ops/trait.drop#tymethod.drop&quot;&gt; &lt;code&gt;drop&lt;/code&gt; &lt;/a&gt;リターンやパニック、メモリは再利用することができます。</target>
        </trans-unit>
        <trans-unit id="4a93f31254516d6844f82cc6e94b5893fc7d6231" translate="yes" xml:space="preserve">
          <source>The purpose of pinning is to be able to rely on the placement of some data in memory. To make this work, not just moving the data is restricted; deallocating, repurposing, or otherwise invalidating the memory used to store the data is restricted, too. Concretely, for pinned data you have to maintain the invariant that &lt;em&gt;its memory will not get invalidated or repurposed from the moment it gets pinned until when &lt;code&gt;drop&lt;/code&gt; is called&lt;/em&gt;. Memory can be invalidated by deallocation, but also by replacing a &lt;a href=&quot;../option/enum.option#variant.Some&quot;&gt;&lt;code&gt;Some(v)&lt;/code&gt;&lt;/a&gt; by &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt;, or calling &lt;a href=&quot;../vec/struct.vec#method.set_len&quot;&gt;&lt;code&gt;Vec::set_len&lt;/code&gt;&lt;/a&gt; to &quot;kill&quot; some elements off of a vector. It can be repurposed by using &lt;a href=&quot;../ptr/fn.write&quot;&gt;&lt;code&gt;ptr::write&lt;/code&gt;&lt;/a&gt; to overwrite it without calling the destructor first.</source>
          <target state="translated">ピン留めの目的は、メモリ内の一部のデータの配置に依存できるようにすることです。これを機能させるには、データを移動するだけでなく、データの保存に使用されるメモリの割り当て解除、転用、またはその他の方法での無効化も制限されます。具体的には、固定されたデータの場合、固定&lt;em&gt;された瞬間から &lt;code&gt;drop&lt;/code&gt; が呼び出されるまで、そのメモリが無効化または再利用されない&lt;/em&gt;という不変条件を維持する必要があります。メモリは、割り当て解除によって無効にすることができますが、&lt;a href=&quot;../option/enum.option#variant.Some&quot;&gt; &lt;code&gt;Some(v)&lt;/code&gt; &lt;/a&gt;を&lt;a href=&quot;../option/enum.option#variant.None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt;に置き換えるか、&lt;a href=&quot;../vec/struct.vec#method.set_len&quot;&gt; &lt;code&gt;Vec::set_len&lt;/code&gt; &lt;/a&gt;を呼び出して、ベクターからいくつかの要素を「強制終了」することによっても無効にできます。最初にデストラクタを呼び出さずにそれを上書きする&lt;a href=&quot;../ptr/fn.write&quot;&gt; &lt;code&gt;ptr::write&lt;/code&gt; &lt;/a&gt;、ptr :: writeを使用して再利用できます。</target>
        </trans-unit>
        <trans-unit id="dadde1acddaa4f2663e0f0f8fe2f53b8bd256d16" translate="yes" xml:space="preserve">
          <source>The purpose of these &lt;code&gt;Result&lt;/code&gt; types is to encode error-handling information. Values of the &lt;code&gt;Result&lt;/code&gt; type, like values of any type, have methods defined on them. An instance of &lt;code&gt;io::Result&lt;/code&gt; has an &lt;a href=&quot;../std/result/enum.result#method.expect&quot;&gt;&lt;code&gt;expect&lt;/code&gt; method&lt;/a&gt; that you can call. If this instance of &lt;code&gt;io::Result&lt;/code&gt; is an &lt;code&gt;Err&lt;/code&gt; value, &lt;code&gt;expect&lt;/code&gt; will cause the program to crash and display the message that you passed as an argument to &lt;code&gt;expect&lt;/code&gt;. If the &lt;code&gt;read_line&lt;/code&gt; method returns an &lt;code&gt;Err&lt;/code&gt;, it would likely be the result of an error coming from the underlying operating system. If this instance of &lt;code&gt;io::Result&lt;/code&gt; is an &lt;code&gt;Ok&lt;/code&gt; value, &lt;code&gt;expect&lt;/code&gt; will take the return value that &lt;code&gt;Ok&lt;/code&gt; is holding and return just that value to you so you can use it. In this case, that value is the number of bytes in what the user entered into standard input.</source>
          <target state="translated">これらの &lt;code&gt;Result&lt;/code&gt; タイプの目的は、エラー処理情報をエンコードすることです。値は &lt;code&gt;Result&lt;/code&gt; タイプは、任意の型の値のように、方法はそれらに定義されています。 &lt;code&gt;io::Result&lt;/code&gt; のインスタンスには、呼び出すことができる&lt;a href=&quot;../std/result/enum.result#method.expect&quot;&gt; &lt;code&gt;expect&lt;/code&gt; メソッド&lt;/a&gt;があります。このインスタンスならば &lt;code&gt;io::Result&lt;/code&gt; ある &lt;code&gt;Err&lt;/code&gt; 値、 &lt;code&gt;expect&lt;/code&gt; プログラムは、あなたが引数として渡されたことを示すメッセージがクラッシュして表示するようになります &lt;code&gt;expect&lt;/code&gt; 。 &lt;code&gt;read_line&lt;/code&gt; メソッドが &lt;code&gt;Err&lt;/code&gt; を返す場合、それはおそらく、基盤となるオペレーティングシステムからのエラーの結果であると考えられます。このインスタンス場合は &lt;code&gt;io::Result&lt;/code&gt; あります &lt;code&gt;Ok&lt;/code&gt; 値、 &lt;code&gt;expect&lt;/code&gt; は &lt;code&gt;Ok&lt;/code&gt; が保持している戻り値を受け取り、その値だけを返すので、使用できます。この場合、その値は、ユーザーが標準入力に入力したバイト数です。</target>
        </trans-unit>
        <trans-unit id="17a957e4dd15537d9df26e9cd567ee8ac4ab9c24" translate="yes" xml:space="preserve">
          <source>The purpose of this example is to demonstrate a situation in which some generic parameters are declared with &lt;code&gt;impl&lt;/code&gt; and some are declared with the method definition. Here, the generic parameters &lt;code&gt;T&lt;/code&gt; and &lt;code&gt;U&lt;/code&gt; are declared after &lt;code&gt;impl&lt;/code&gt;, because they go with the struct definition. The generic parameters &lt;code&gt;V&lt;/code&gt; and &lt;code&gt;W&lt;/code&gt; are declared after &lt;code&gt;fn mixup&lt;/code&gt;, because they&amp;rsquo;re only relevant to the method.</source>
          <target state="translated">この例の目的は、一部のジェネリックパラメーターが &lt;code&gt;impl&lt;/code&gt; で宣言され、一部がメソッド定義で宣言される状況を示すことです。ここでは、ジェネリックパラメーター &lt;code&gt;T&lt;/code&gt; と &lt;code&gt;U&lt;/code&gt; は、構造体の定義に対応しているため、 &lt;code&gt;impl&lt;/code&gt; の後に宣言されています。ジェネリックパラメーター &lt;code&gt;V&lt;/code&gt; および &lt;code&gt;W&lt;/code&gt; は、メソッドにのみ関連するため、 &lt;code&gt;fn mixup&lt;/code&gt; の後に宣言されます。</target>
        </trans-unit>
        <trans-unit id="83464f6d897f3cf3890af3a243744932372ed118" translate="yes" xml:space="preserve">
          <source>The purpose of this module is to alleviate imports of many common I/O traits by adding a glob import to the top of I/O heavy modules:</source>
          <target state="translated">このモジュールの目的は、I/Oヘビーモジュールのトップにグロブインポートを追加することで、多くの一般的なI/O形質のインポートを軽減することです。</target>
        </trans-unit>
        <trans-unit id="c5176304cb4e1480563977bff5f9fc8f29f52bf7" translate="yes" xml:space="preserve">
          <source>The purpose of trait objects is to permit &quot;late binding&quot; of methods. Calling a method on a trait object results in virtual dispatch at runtime: that is, a function pointer is loaded from the trait object vtable and invoked indirectly. The actual implementation for each vtable entry can vary on an object-by-object basis.</source>
          <target state="translated">形質オブジェクトの目的は、メソッドの「レイトバインディング」を可能にすることです。つまり、関数ポインタが trait オブジェクトの vtable からロードされ、間接的に呼び出されます。各 vtable エントリの実際の実装は、オブジェクトごとに異なります。</target>
        </trans-unit>
        <trans-unit id="f15fea39e76fdfafefd43bfce074d20361154e36" translate="yes" xml:space="preserve">
          <source>The purpose of unit tests is to test each unit of code in isolation from the rest of the code to quickly pinpoint where code is and isn&amp;rsquo;t working as expected. You&amp;rsquo;ll put unit tests in the &lt;em&gt;src&lt;/em&gt; directory in each file with the code that they&amp;rsquo;re testing. The convention is to create a module named &lt;code&gt;tests&lt;/code&gt; in each file to contain the test functions and to annotate the module with &lt;code&gt;cfg(test)&lt;/code&gt;.</source>
          <target state="translated">単体テストの目的は、コードの各ユニットを残りのコードから分離してテストし、コードが期待どおりに機能しているかどうかをすばやく特定することです。ユニットテストは、テストするコードを含む各ファイルの&lt;em&gt;src&lt;/em&gt;ディレクトリに配置します。大会は、名前のモジュールを作成することです &lt;code&gt;tests&lt;/code&gt; テスト機能を含むようにしてでモジュールに注釈を付けるために、各ファイルに &lt;code&gt;cfg(test)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="60cba1f37e61726b832a14d7f1500e4426e9a5cc" translate="yes" xml:space="preserve">
          <source>The question mark operator</source>
          <target state="translated">クエスチョンマーク演算子</target>
        </trans-unit>
        <trans-unit id="018537889ded2ab112f094946b8612c9a86b99ba" translate="yes" xml:space="preserve">
          <source>The question mark operator (&lt;code&gt;?&lt;/code&gt;) unwraps valid values or returns erroneous values, propagating them to the calling function. It is a unary postfix operator that can only be applied to the types &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt; and &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">疑問符演算子（ &lt;code&gt;?&lt;/code&gt; ）は、有効な値をアンラップするか、誤った値を返し、呼び出し元の関数に伝達します。これは、タイプ &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt; および &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; のみ適用できる単項後置演算子です。</target>
        </trans-unit>
        <trans-unit id="7ea5d63d0d5a319dd6d9072a4460aea03a494584" translate="yes" xml:space="preserve">
          <source>The question mark operator, &lt;code&gt;?&lt;/code&gt;</source>
          <target state="translated">疑問符演算子、 &lt;code&gt;?&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="61208bdae8b221a09aba4f839d74c11c2925c51c" translate="yes" xml:space="preserve">
          <source>The radix or base of the internal representation of &lt;code&gt;f32&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;f32&lt;/code&gt; の内部表現の基数または基数。</target>
        </trans-unit>
        <trans-unit id="ea313a35fa236b37b46428fb2657491b2e33dea3" translate="yes" xml:space="preserve">
          <source>The radix or base of the internal representation of &lt;code&gt;f32&lt;/code&gt;. Use &lt;a href=&quot;../primitive.f32#associatedconstant.RADIX&quot;&gt;&lt;code&gt;f32::RADIX&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">&lt;code&gt;f32&lt;/code&gt; の内部表現の基数または基数。代わりに&lt;a href=&quot;../primitive.f32#associatedconstant.RADIX&quot;&gt; &lt;code&gt;f32::RADIX&lt;/code&gt; &lt;/a&gt;使用してください。</target>
        </trans-unit>
        <trans-unit id="fc170d8fddda3392ca3bbfeb02d09cfb7f6a80ce" translate="yes" xml:space="preserve">
          <source>The radix or base of the internal representation of &lt;code&gt;f64&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;f64&lt;/code&gt; の内部表現の基数または基数。</target>
        </trans-unit>
        <trans-unit id="eb77af93de4b13de0ebcbd9266a033e54a3960fe" translate="yes" xml:space="preserve">
          <source>The radix or base of the internal representation of &lt;code&gt;f64&lt;/code&gt;. Use &lt;a href=&quot;../primitive.f64#associatedconstant.RADIX&quot;&gt;&lt;code&gt;f64::RADIX&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">&lt;code&gt;f64&lt;/code&gt; の内部表現の基数または基数。代わりに&lt;a href=&quot;../primitive.f64#associatedconstant.RADIX&quot;&gt; &lt;code&gt;f64::RADIX&lt;/code&gt; &lt;/a&gt;使用してください。</target>
        </trans-unit>
        <trans-unit id="0b9457bd197a286afc52dbcebb942e61605b222d" translate="yes" xml:space="preserve">
          <source>The range &lt;code&gt;start..end&lt;/code&gt; contains all values with &lt;code&gt;start &amp;lt;= x &amp;lt; end&lt;/code&gt;. It is empty if &lt;code&gt;start &amp;gt;= end&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;start..end&lt;/code&gt; の範囲には、 &lt;code&gt;start &amp;lt;= x &amp;lt; end&lt;/code&gt; すべての値が含まれます。 &lt;code&gt;start &amp;gt;= end&lt;/code&gt; 場合、空です。</target>
        </trans-unit>
        <trans-unit id="510a943d569cb4f1080072d01ababcb91699bcc6" translate="yes" xml:space="preserve">
          <source>The range is empty if either side is incomparable:</source>
          <target state="translated">どちらか一方が比較不可能な場合は範囲が空になります。</target>
        </trans-unit>
        <trans-unit id="a7d43b8cf204eefd21645fceff96d69cfb297982" translate="yes" xml:space="preserve">
          <source>The raw pointer must have been previously returned by a call to &lt;a href=&quot;struct.arc#method.into_raw&quot;&gt;&lt;code&gt;Arc&amp;lt;U&amp;gt;::into_raw&lt;/code&gt;&lt;/a&gt; where &lt;code&gt;U&lt;/code&gt; must have the same size and alignment as &lt;code&gt;T&lt;/code&gt;. This is trivially true if &lt;code&gt;U&lt;/code&gt; is &lt;code&gt;T&lt;/code&gt;. Note that if &lt;code&gt;U&lt;/code&gt; is not &lt;code&gt;T&lt;/code&gt; but has the same size and alignment, this is basically like transmuting references of different types. See &lt;a href=&quot;../mem/fn.transmute&quot;&gt;&lt;code&gt;mem::transmute&lt;/code&gt;&lt;/a&gt; for more information on what restrictions apply in this case.</source>
          <target state="translated">生のポインタは、&lt;a href=&quot;struct.arc#method.into_raw&quot;&gt; &lt;code&gt;Arc&amp;lt;U&amp;gt;::into_raw&lt;/code&gt; &lt;/a&gt;呼び出しによって以前に返されている必要があります。ここで、 &lt;code&gt;U&lt;/code&gt; は &lt;code&gt;T&lt;/code&gt; と同じサイズと配置である必要があります。 &lt;code&gt;U&lt;/code&gt; が &lt;code&gt;T&lt;/code&gt; の場合、これは自明に当てはまります。 &lt;code&gt;U&lt;/code&gt; が &lt;code&gt;T&lt;/code&gt; ではないが、サイズと配置が同じである場合、これは基本的に、異なるタイプの参照を変換するようなものであることに注意してください。この場合に適用される制限の詳細については、&lt;a href=&quot;../mem/fn.transmute&quot;&gt; &lt;code&gt;mem::transmute&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="7a2067413bc1879d44bf7542436c24e1555ca1bc" translate="yes" xml:space="preserve">
          <source>The raw pointer must have been previously returned by a call to &lt;a href=&quot;struct.rc#method.into_raw&quot;&gt;&lt;code&gt;Rc&amp;lt;U&amp;gt;::into_raw&lt;/code&gt;&lt;/a&gt; where &lt;code&gt;U&lt;/code&gt; must have the same size and alignment as &lt;code&gt;T&lt;/code&gt;. This is trivially true if &lt;code&gt;U&lt;/code&gt; is &lt;code&gt;T&lt;/code&gt;. Note that if &lt;code&gt;U&lt;/code&gt; is not &lt;code&gt;T&lt;/code&gt; but has the same size and alignment, this is basically like transmuting references of different types. See &lt;a href=&quot;../mem/fn.transmute&quot;&gt;&lt;code&gt;mem::transmute&lt;/code&gt;&lt;/a&gt; for more information on what restrictions apply in this case.</source>
          <target state="translated">生のポインタは、&lt;a href=&quot;struct.rc#method.into_raw&quot;&gt; &lt;code&gt;Rc&amp;lt;U&amp;gt;::into_raw&lt;/code&gt; &lt;/a&gt;呼び出しによって以前に返されている必要があります。ここで、 &lt;code&gt;U&lt;/code&gt; は &lt;code&gt;T&lt;/code&gt; と同じサイズと配置である必要があります。 &lt;code&gt;U&lt;/code&gt; が &lt;code&gt;T&lt;/code&gt; の場合、これは自明に当てはまります。 &lt;code&gt;U&lt;/code&gt; が &lt;code&gt;T&lt;/code&gt; ではないが、サイズと配置が同じである場合、これは基本的に、異なるタイプの参照を変換するようなものであることに注意してください。この場合に適用される制限の詳細については、&lt;a href=&quot;../mem/fn.transmute&quot;&gt; &lt;code&gt;mem::transmute&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="9cc134868dea70688318900dea4fb56c096c2fce" translate="yes" xml:space="preserve">
          <source>The raw pointer must have been previously returned by a call to a &lt;a href=&quot;struct.arc#method.into_raw&quot;&gt;&lt;code&gt;Arc::into_raw&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">生のポインタは、以前に&lt;a href=&quot;struct.arc#method.into_raw&quot;&gt; &lt;code&gt;Arc::into_raw&lt;/code&gt; &lt;/a&gt;呼び出しによって返されている必要があります。</target>
        </trans-unit>
        <trans-unit id="cb442a6e9f4c3ea3ad88f7d20cbb90e50f086583" translate="yes" xml:space="preserve">
          <source>The raw pointer must have been previously returned by a call to a &lt;a href=&quot;struct.rc#method.into_raw&quot;&gt;&lt;code&gt;Rc::into_raw&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">生のポインタは、&lt;a href=&quot;struct.rc#method.into_raw&quot;&gt; &lt;code&gt;Rc::into_raw&lt;/code&gt; &lt;/a&gt;呼び出しによって以前に返されている必要があります。</target>
        </trans-unit>
        <trans-unit id="61edb86c6e775bcbcc090bf0b2354d8086752aee" translate="yes" xml:space="preserve">
          <source>The re-ordering prevented by the different ordering semantics are:</source>
          <target state="translated">異なる順序のセマンティクスによって防止される再順序化は</target>
        </trans-unit>
        <trans-unit id="db75fd7d163698847a2930407a821664ef9dc7a1" translate="yes" xml:space="preserve">
          <source>The reading portion of the &lt;a href=&quot;struct.tcpstream&quot;&gt;&lt;code&gt;TcpStream&lt;/code&gt;&lt;/a&gt; should be shut down.</source>
          <target state="translated">&lt;a href=&quot;struct.tcpstream&quot;&gt; &lt;code&gt;TcpStream&lt;/code&gt; &lt;/a&gt;の読み取り部分をシャットダウンする必要があります。</target>
        </trans-unit>
        <trans-unit id="bb2e18a8faa1f91810d19956a7143af41d8b7e9f" translate="yes" xml:space="preserve">
          <source>The reason for deprecation is that the function basically cannot be used correctly: &lt;a href=&quot;union.maybeuninit#initialization-invariant&quot;&gt;the Rust compiler assumes&lt;/a&gt; that values are properly initialized. As a consequence, calling e.g. &lt;code&gt;mem::uninitialized::&amp;lt;bool&amp;gt;()&lt;/code&gt; causes immediate undefined behavior for returning a &lt;code&gt;bool&lt;/code&gt; that is not definitely either &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;. Worse, truly uninitialized memory like what gets returned here is special in that the compiler knows that it does not have a fixed value. This makes it undefined behavior to have uninitialized data in a variable even if that variable has an integer type. (Notice that the rules around uninitialized integers are not finalized yet, but until they are, it is advisable to avoid them.)</source>
          <target state="translated">非推奨の理由は、関数が基本的に正しく使用できないためです&lt;a href=&quot;union.maybeuninit#initialization-invariant&quot;&gt;。Rustコンパイラは&lt;/a&gt;、値が適切に初期化されていると想定します。結果として、たとえば &lt;code&gt;mem::uninitialized::&amp;lt;bool&amp;gt;()&lt;/code&gt; を呼び出すと、明確に &lt;code&gt;true&lt;/code&gt; または &lt;code&gt;false&lt;/code&gt; のいずれでもない &lt;code&gt;bool&lt;/code&gt; を返すための即時の未定義の動作が発生します。ここで返されるような本当に初期化されていないさらに悪いメモリは、コンパイラが固定値を持たないことを知っているという点で特別です。これにより、変数の型が整数型であっても、変数に初期化されていないデータがあることは未定義の動作になります。 （初期化されていない整数に関するルールはまだ確定されていないことに注意してください。ただし、確定されるまでは、回避することをお勧めします。）</target>
        </trans-unit>
        <trans-unit id="0a840dd2de2cd2ee34a26f979453151250b4e843" translate="yes" xml:space="preserve">
          <source>The reason for deprecation is that the function basically cannot be used correctly: it has the same effect as &lt;a href=&quot;union.maybeuninit#method.uninit&quot;&gt;&lt;code&gt;MaybeUninit::uninit().assume_init()&lt;/code&gt;&lt;/a&gt;. As the &lt;a href=&quot;union.maybeuninit#method.assume_init&quot;&gt;&lt;code&gt;assume_init&lt;/code&gt; documentation&lt;/a&gt; explains, &lt;a href=&quot;union.maybeuninit#initialization-invariant&quot;&gt;the Rust compiler assumes&lt;/a&gt; that values are properly initialized. As a consequence, calling e.g. &lt;code&gt;mem::uninitialized::&amp;lt;bool&amp;gt;()&lt;/code&gt; causes immediate undefined behavior for returning a &lt;code&gt;bool&lt;/code&gt; that is not definitely either &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;. Worse, truly uninitialized memory like what gets returned here is special in that the compiler knows that it does not have a fixed value. This makes it undefined behavior to have uninitialized data in a variable even if that variable has an integer type. (Notice that the rules around uninitialized integers are not finalized yet, but until they are, it is advisable to avoid them.)</source>
          <target state="translated">非推奨の理由は、関数が基本的に正しく使用できないためです&lt;a href=&quot;union.maybeuninit#method.uninit&quot;&gt; &lt;code&gt;MaybeUninit::uninit().assume_init()&lt;/code&gt; &lt;/a&gt;と同じ効果があります。以下のよう&lt;a href=&quot;union.maybeuninit#method.assume_init&quot;&gt; &lt;code&gt;assume_init&lt;/code&gt; のドキュメントを&lt;/a&gt;説明し、&lt;a href=&quot;union.maybeuninit#initialization-invariant&quot;&gt;錆コンパイラは想定してい&lt;/a&gt;た値が正しく初期化されていること。結果として、たとえば &lt;code&gt;mem::uninitialized::&amp;lt;bool&amp;gt;()&lt;/code&gt; を呼び出すと、 &lt;code&gt;bool&lt;/code&gt; を返すための未定義の動作が即座に発生しますが、これは間違いなく &lt;code&gt;true&lt;/code&gt; または &lt;code&gt;false&lt;/code&gt; ではありません。。さらに悪いことに、ここで返されるような真に初期化されていないメモリは、コンパイラが固定値を持たないことを認識しているという点で特別です。これにより、変数が整数型であっても、変数に初期化されていないデータが含まれることは未定義の動作になります。 （初期化されていない整数に関するルールはまだ確定されていませんが、確定するまでは回避することをお勧めします。）</target>
        </trans-unit>
        <trans-unit id="d5d0c9e3177e947296d0e4cad464419f6391db88" translate="yes" xml:space="preserve">
          <source>The reason for this is that &lt;code&gt;rlib&lt;/code&gt; files do not contain any of their upstream dependencies. It wouldn't be very efficient for all &lt;code&gt;rlib&lt;/code&gt; files to contain a copy of &lt;code&gt;libstd.rlib&lt;/code&gt;!</source>
          <target state="translated">これは、 &lt;code&gt;rlib&lt;/code&gt; ファイルに上流の依存関係が含まれていないためです。すべての &lt;code&gt;rlib&lt;/code&gt; ファイルに &lt;code&gt;libstd.rlib&lt;/code&gt; のコピーを含めるのは効率的ではありません。</target>
        </trans-unit>
        <trans-unit id="f95aa7105ee4000143fc92462b837053383a52a0" translate="yes" xml:space="preserve">
          <source>The reason for this is that there are two appearances of type parameter &lt;code&gt;T&lt;/code&gt; in the &lt;code&gt;impl&lt;/code&gt; header, both as parameters for &lt;code&gt;ForeignTrait2&lt;/code&gt;. The first appearance is uncovered, and so runs afoul of the orphan rule.</source>
          <target state="translated">これは、 &lt;code&gt;impl&lt;/code&gt; ヘッダーにタイプパラメーター &lt;code&gt;T&lt;/code&gt; の外観が2つあり、どちらも &lt;code&gt;ForeignTrait2&lt;/code&gt; のパラメーターであるためです。初登場が明らかになり、孤児のルールに反する。</target>
        </trans-unit>
        <trans-unit id="ef37c27a4f0dd2645ce86c85a75eac6a77fa29d9" translate="yes" xml:space="preserve">
          <source>The reason is that types such as integers that have a known size at compile time are stored entirely on the stack, so copies of the actual values are quick to make. That means there&amp;rsquo;s no reason we would want to prevent &lt;code&gt;x&lt;/code&gt; from being valid after we create the variable &lt;code&gt;y&lt;/code&gt;. In other words, there&amp;rsquo;s no difference between deep and shallow copying here, so calling &lt;code&gt;clone&lt;/code&gt; wouldn&amp;rsquo;t do anything different from the usual shallow copying and we can leave it out.</source>
          <target state="translated">その理由は、コンパイル時に既知のサイズを持つ整数などの型は完全にスタックに格納されるため、実際の値のコピーをすばやく作成できるためです。つまり、変数 &lt;code&gt;y&lt;/code&gt; を作成した後で &lt;code&gt;x&lt;/code&gt; が有効にならないようにする理由はありません。つまり、ここではディープコピーとシャローコピーに違いはないため、 &lt;code&gt;clone&lt;/code&gt; を呼び出しても通常のシャローコピーと何も変わらないため、省略できます。</target>
        </trans-unit>
        <trans-unit id="5c1ca57165d895e7b5a9a07fb8f81dd8e653560f" translate="yes" xml:space="preserve">
          <source>The reason is that you&amp;rsquo;re missing some crucial information: a description and license are required so people will know what your crate does and under what terms they can use it. To rectify this error, you need to include this information in the &lt;em&gt;Cargo.toml&lt;/em&gt; file.</source>
          <target state="translated">その理由は、重要な情報が不足しているためです。説明とライセンスが必要なので、クレートの機能とクレートを使用できる条件を人々に知らせます。このエラーを修正するには、&lt;em&gt;Cargo.toml&lt;/em&gt;ファイルにこの情報を含める必要があります。</target>
        </trans-unit>
        <trans-unit id="87dec969a1d8a7fd52229930c681793b58499b7c" translate="yes" xml:space="preserve">
          <source>The reason is that, in the first example, there are many possible types that &lt;code&gt;!&lt;/code&gt; could coerce to, because many types implement &lt;code&gt;Add&amp;lt;u32&amp;gt;&lt;/code&gt;. However, in the second example, the &lt;code&gt;else&lt;/code&gt; branch returns a &lt;code&gt;0&lt;/code&gt;, which the compiler infers from the return type to be of type &lt;code&gt;u32&lt;/code&gt;. Since &lt;code&gt;u32&lt;/code&gt; is a concrete type, &lt;code&gt;!&lt;/code&gt; can and will be coerced to it. See issue &lt;a href=&quot;https://github.com/rust-lang/rust/issues/36375&quot;&gt;#36375&lt;/a&gt; for more information on this quirk of &lt;code&gt;!&lt;/code&gt;.</source>
          <target state="translated">その理由は、最初の例では、 &lt;code&gt;!&lt;/code&gt; 多くのタイプが &lt;code&gt;Add&amp;lt;u32&amp;gt;&lt;/code&gt; 実装しているため、強制することができます。ただし、2番目の例では、 &lt;code&gt;else&lt;/code&gt; ブランチは &lt;code&gt;0&lt;/code&gt; を返します。これは、コンパイラーが戻り値の型から &lt;code&gt;u32&lt;/code&gt; 型であると推測します。以来 &lt;code&gt;u32&lt;/code&gt; 、具体的なタイプです &lt;code&gt;!&lt;/code&gt; 強制される可能性があります。この癖の詳細については、問題&lt;a href=&quot;https://github.com/rust-lang/rust/issues/36375&quot;&gt;＃36375&lt;/a&gt;を参照してください &lt;code&gt;!&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="725753993f38910ecfb713203cf3afe96ff590f2" translate="yes" xml:space="preserve">
          <source>The reason that this matter is that the type &lt;code&gt;fn(S)&lt;/code&gt; is not specific to any particular function: it's a function &lt;em&gt;pointer&lt;/em&gt;. So calling &lt;code&gt;x()&lt;/code&gt; results in a virtual call, whereas &lt;code&gt;foo()&lt;/code&gt; is statically dispatched, because the type of &lt;code&gt;foo&lt;/code&gt; tells us precisely what function is being called.</source>
          <target state="translated">この問題の理由は、 &lt;code&gt;fn(S)&lt;/code&gt; 型が特定の関数に固有ではないことです。これは、関数&lt;em&gt;ポインター&lt;/em&gt;です。呼び出しだから、 &lt;code&gt;x()&lt;/code&gt; に対し、仮想呼び出しでの結果、 &lt;code&gt;foo()&lt;/code&gt; タイプするので、静的に、派遣された &lt;code&gt;foo&lt;/code&gt; が呼び出されている正確にどのような機能を教えてくれる。</target>
        </trans-unit>
        <trans-unit id="2f71ddaa6e32a7d6efaff9da8a4ddd4766615cbe" translate="yes" xml:space="preserve">
          <source>The reason the &lt;code&gt;deref&lt;/code&gt; method returns a reference to a value, and that the plain dereference outside the parentheses in &lt;code&gt;*(y.deref())&lt;/code&gt; is still necessary, is the ownership system. If the &lt;code&gt;deref&lt;/code&gt; method returned the value directly instead of a reference to the value, the value would be moved out of &lt;code&gt;self&lt;/code&gt;. We don&amp;rsquo;t want to take ownership of the inner value inside &lt;code&gt;MyBox&amp;lt;T&amp;gt;&lt;/code&gt; in this case or in most cases where we use the dereference operator.</source>
          <target state="translated">その理由は、 &lt;code&gt;deref&lt;/code&gt; 方法は、値への参照を返し、そして中括弧外普通間接参照することを &lt;code&gt;*(y.deref())&lt;/code&gt; は依然として必要であり、所有権システムです。場合 &lt;code&gt;deref&lt;/code&gt; 方法は、値を直接代わりの値への参照が返され、値が外に移動される &lt;code&gt;self&lt;/code&gt; 。この場合、または逆参照演算子を使用するほとんどの場合、 &lt;code&gt;MyBox&amp;lt;T&amp;gt;&lt;/code&gt; 内の内部値の所有権を取得したくありません。</target>
        </trans-unit>
        <trans-unit id="1d62bb1a32655921533dae07c7931836afe25a19" translate="yes" xml:space="preserve">
          <source>The reason this function compiles without lifetime annotations is historical: in early versions (pre-1.0) of Rust, this code wouldn&amp;rsquo;t have compiled because every reference needed an explicit lifetime. At that time, the function signature would have been written like this:</source>
          <target state="translated">この関数がライフタイムアノテーションなしでコンパイルする理由は歴史的です。Rustの初期バージョン（1.0より前）では、すべての参照に明示的なライフタイムが必要だったため、このコードはコンパイルされませんでした。当時、関数のシグネチャは次のように書かれているはずです。</target>
        </trans-unit>
        <trans-unit id="bedb5e3116e5d92919b43a452878e5db1b96099b" translate="yes" xml:space="preserve">
          <source>The reason we&amp;rsquo;re able to use &lt;code&gt;&amp;amp;s2&lt;/code&gt; in the call to &lt;code&gt;add&lt;/code&gt; is that the compiler can &lt;em&gt;coerce&lt;/em&gt; the &lt;code&gt;&amp;amp;String&lt;/code&gt; argument into a &lt;code&gt;&amp;amp;str&lt;/code&gt;. When we call the &lt;code&gt;add&lt;/code&gt; method, Rust uses a &lt;em&gt;deref coercion&lt;/em&gt;, which here turns &lt;code&gt;&amp;amp;s2&lt;/code&gt; into &lt;code&gt;&amp;amp;s2[..]&lt;/code&gt;. We&amp;rsquo;ll discuss deref coercion in more depth in Chapter 15. Because &lt;code&gt;add&lt;/code&gt; does not take ownership of the &lt;code&gt;s&lt;/code&gt; parameter, &lt;code&gt;s2&lt;/code&gt; will still be a valid &lt;code&gt;String&lt;/code&gt; after this operation.</source>
          <target state="translated">我々が使用することができるしている理由 &lt;code&gt;&amp;amp;s2&lt;/code&gt; への呼び出しに &lt;code&gt;add&lt;/code&gt; はコンパイラができるということです&lt;em&gt;強制&lt;/em&gt; &lt;code&gt;&amp;amp;String&lt;/code&gt; に引数を &lt;code&gt;&amp;amp;str&lt;/code&gt; 。私たちが呼び出すと &lt;code&gt;add&lt;/code&gt; 方法を、錆が使用しています&lt;em&gt;被参照強制&lt;/em&gt;ここになり、 &lt;code&gt;&amp;amp;s2&lt;/code&gt; に &lt;code&gt;&amp;amp;s2[..]&lt;/code&gt; 。ので、我々は第15章で詳しく被参照強制を説明します &lt;code&gt;add&lt;/code&gt; 所有取らない &lt;code&gt;s&lt;/code&gt; パラメータを、 &lt;code&gt;s2&lt;/code&gt; はまだ有効になります &lt;code&gt;String&lt;/code&gt; この操作の後。</target>
        </trans-unit>
        <trans-unit id="f3cfdfa90a10325648e4c2eb952b413419929140" translate="yes" xml:space="preserve">
          <source>The receiver of a method, or the current module.</source>
          <target state="translated">メソッドの受信機、または現在のモジュール。</target>
        </trans-unit>
        <trans-unit id="d73164a885c270ed79f7ee9c783984160bde564d" translate="yes" xml:space="preserve">
          <source>The receiving end of a channel has two useful methods: &lt;code&gt;recv&lt;/code&gt; and &lt;code&gt;try_recv&lt;/code&gt;. We&amp;rsquo;re using &lt;code&gt;recv&lt;/code&gt;, short for &lt;em&gt;receive&lt;/em&gt;, which will block the main thread&amp;rsquo;s execution and wait until a value is sent down the channel. Once a value is sent, &lt;code&gt;recv&lt;/code&gt; will return it in a &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt;. When the sending end of the channel closes, &lt;code&gt;recv&lt;/code&gt; will return an error to signal that no more values will be coming.</source>
          <target state="translated">チャネルの受信側には、 &lt;code&gt;recv&lt;/code&gt; と &lt;code&gt;try_recv&lt;/code&gt; の 2つの便利なメソッドがあります。ここでは&lt;em&gt;receiveの&lt;/em&gt;略である &lt;code&gt;recv&lt;/code&gt; を使用しています。これはメインスレッドの実行をブロックし、値がチャネルに送信されるまで待機します。値が送信されると、 &lt;code&gt;recv&lt;/code&gt; はそれを &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt; 返します。チャネルの送信側が閉じると、 &lt;code&gt;recv&lt;/code&gt; はエラーを返し、これ以上値が送信されないことを通知します。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="bb4caae3b66529c5330d18c3a08329f2bc2f3deb" translate="yes" xml:space="preserve">
          <source>The receiving half of Rust's &lt;a href=&quot;fn.channel&quot;&gt;&lt;code&gt;channel&lt;/code&gt;&lt;/a&gt; (or &lt;a href=&quot;fn.sync_channel&quot;&gt;&lt;code&gt;sync_channel&lt;/code&gt;&lt;/a&gt;) type. This half can only be owned by one thread.</source>
          <target state="translated">Rustの&lt;a href=&quot;fn.channel&quot;&gt; &lt;code&gt;channel&lt;/code&gt; &lt;/a&gt;（または&lt;a href=&quot;fn.sync_channel&quot;&gt; &lt;code&gt;sync_channel&lt;/code&gt; &lt;/a&gt;）タイプの受信側。この半分は1つのスレッドだけが所有できます。</target>
        </trans-unit>
        <trans-unit id="6ebe525b659c768099f112d22bb95117877daf2e" translate="yes" xml:space="preserve">
          <source>The reference count of the &lt;code&gt;Rc&amp;lt;List&amp;gt;&lt;/code&gt; instances in both &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; are 2 after we change the list in &lt;code&gt;a&lt;/code&gt; to point to &lt;code&gt;b&lt;/code&gt;. At the end of &lt;code&gt;main&lt;/code&gt;, Rust drops the variable &lt;code&gt;b&lt;/code&gt;, which decreases the reference count of the &lt;code&gt;Rc&amp;lt;List&amp;gt;&lt;/code&gt; instance from 2 to 1. The memory that &lt;code&gt;Rc&amp;lt;List&amp;gt;&lt;/code&gt; has on the heap won&amp;rsquo;t be dropped at this point, because its reference count is 1, not 0. Then Rust drops &lt;code&gt;a&lt;/code&gt;, which decreases the reference count of the &lt;code&gt;a&lt;/code&gt;&lt;code&gt;Rc&amp;lt;List&amp;gt;&lt;/code&gt; instance from 2 to 1 as well. This instance's memory can&amp;rsquo;t be dropped either, because the other &lt;code&gt;Rc&amp;lt;List&amp;gt;&lt;/code&gt; instance still refers to it. The memory allocated to the list will remain uncollected forever. To visualize this reference cycle, we&amp;rsquo;ve created a diagram in Figure 15-4.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b2bfb185407e4c60c25d227a4ff77b2cda29f86" translate="yes" xml:space="preserve">
          <source>The reference count of the &lt;code&gt;Rc&amp;lt;List&amp;gt;&lt;/code&gt; instances in both &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; are 2 after we change the list in &lt;code&gt;a&lt;/code&gt; to point to &lt;code&gt;b&lt;/code&gt;. At the end of &lt;code&gt;main&lt;/code&gt;, Rust will try to drop &lt;code&gt;b&lt;/code&gt; first, which will decrease the count of the &lt;code&gt;Rc&amp;lt;List&amp;gt;&lt;/code&gt; instance in &lt;code&gt;b&lt;/code&gt; by 1.</source>
          <target state="translated">参照カウント &lt;code&gt;Rc&amp;lt;List&amp;gt;&lt;/code&gt; 、両方のインスタンスで &lt;code&gt;a&lt;/code&gt; と &lt;code&gt;b&lt;/code&gt; 我々がリスト変更した後、2、にポイントに &lt;code&gt;b&lt;/code&gt; 。 &lt;code&gt;main&lt;/code&gt; の最後で、Rustは最初に &lt;code&gt;b&lt;/code&gt; をドロップしようとします。これにより、 &lt;code&gt;b&lt;/code&gt; の &lt;code&gt;Rc&amp;lt;List&amp;gt;&lt;/code&gt; インスタンスの数が1つ減ります。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ae6db410fc6a6a00a988df7e277d31526670b6dd" translate="yes" xml:space="preserve">
          <source>The reference to the moved key is provided so that cloning or copying the key is unnecessary, unlike with &lt;code&gt;.or_insert_with(|| ... )&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0309be91bd54044d4044342a0389163de0a934e4" translate="yes" xml:space="preserve">
          <source>The region of memory beginning at &lt;code&gt;src&lt;/code&gt; with a size of &lt;code&gt;count * size_of::&amp;lt;T&amp;gt;()&lt;/code&gt; bytes must &lt;em&gt;not&lt;/em&gt; overlap with the region of memory beginning at &lt;code&gt;dst&lt;/code&gt; with the same size.</source>
          <target state="translated">&lt;code&gt;count * size_of::&amp;lt;T&amp;gt;()&lt;/code&gt; バイトのサイズの &lt;code&gt;src&lt;/code&gt; で始まるメモリ領域は、同じサイズの &lt;code&gt;dst&lt;/code&gt; で始まるメモリ領域と重複してはなりませ&lt;em&gt;ん&lt;/em&gt;。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5dcc17f2dc1b8084d38071ff6ddcb2865d4ada36" translate="yes" xml:space="preserve">
          <source>The region of memory beginning at &lt;code&gt;x&lt;/code&gt; with a size of &lt;code&gt;count * size_of::&amp;lt;T&amp;gt;()&lt;/code&gt; bytes must &lt;em&gt;not&lt;/em&gt; overlap with the region of memory beginning at &lt;code&gt;y&lt;/code&gt; with the same size.</source>
          <target state="translated">&lt;code&gt;count * size_of::&amp;lt;T&amp;gt;()&lt;/code&gt; バイトのサイズで &lt;code&gt;x&lt;/code&gt; で始まるメモリ領域は、同じサイズで &lt;code&gt;y&lt;/code&gt; で始まるメモリ領域と重複してはなりませ&lt;em&gt;ん&lt;/em&gt;。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6e24cbd3ed4b7a19863f8c010bc7cecf513544b8" translate="yes" xml:space="preserve">
          <source>The relative order of partitioned items is not maintained.</source>
          <target state="translated">分割された項目の相対的な順序が維持されない。</target>
        </trans-unit>
        <trans-unit id="27d262cc92a6d55445ae1cc06ba8d24d6a4bfc8a" translate="yes" xml:space="preserve">
          <source>The relevant &lt;code&gt;use&lt;/code&gt; statements</source>
          <target state="translated">関連する &lt;code&gt;use&lt;/code&gt; ステートメント</target>
        </trans-unit>
        <trans-unit id="92055677c3977ae45c2e91b99d3cb2b7bc2e7a00" translate="yes" xml:space="preserve">
          <source>The remainder assignment operator &lt;code&gt;%=&lt;/code&gt;.</source>
          <target state="translated">剰余代入演算子 &lt;code&gt;%=&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7e1e6181542061352f1920b8d99d81207a670f7f" translate="yes" xml:space="preserve">
          <source>The remainder from the division of two floats.</source>
          <target state="translated">2つの山車の分割からの残り。</target>
        </trans-unit>
        <trans-unit id="054039eee5819e5face98778f38bf1e0291c343e" translate="yes" xml:space="preserve">
          <source>The remainder has the same sign as the dividend and is computed as: &lt;code&gt;x - (x / y).trunc() * y&lt;/code&gt;.</source>
          <target state="translated">剰余は被除数と同じ符号を持ち、次のように計算されます： &lt;code&gt;x - (x / y).trunc() * y&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5654d619adf6380504b572e1ea12d7691a4525f9" translate="yes" xml:space="preserve">
          <source>The remainder operator &lt;code&gt;%&lt;/code&gt;.</source>
          <target state="translated">剰余演算子 &lt;code&gt;%&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4b313ceee14929f12b1b754da920f2c480594a9a" translate="yes" xml:space="preserve">
          <source>The remaining characters are alphanumeric or &lt;code&gt;_&lt;/code&gt;.</source>
          <target state="translated">残りの文字は英数字または &lt;code&gt;_&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="db31fc17b3b16891bdde4b2e11c17a8b55001a20" translate="yes" xml:space="preserve">
          <source>The removed element is replaced by the last element of the vector.</source>
          <target state="translated">削除された要素は、ベクトルの最後の要素に置き換えられます。</target>
        </trans-unit>
        <trans-unit id="bdcb1bbcfc5506185f4dcdac6bb92b93d0ea27b3" translate="yes" xml:space="preserve">
          <source>The repeated fragment both matches and transcribes to the specified number of the fragment, separated by the separator token. Metavariables are matched to every repetition of their corresponding fragment. For instance, the &lt;code&gt;$( $i:ident ),*&lt;/code&gt; example above matches &lt;code&gt;$i&lt;/code&gt; to all of the identifiers in the list.</source>
          <target state="translated">繰り返されるフラグメントは、セパレータトークンで区切られた、指定された数のフラグメントに一致および転記します。メタ変数は、対応するフラグメントのすべての繰り返しに一致します。たとえば、上記の &lt;code&gt;$( $i:ident ),*&lt;/code&gt; 例は、 &lt;code&gt;$i&lt;/code&gt; をリスト内のすべての識別子と照合します。</target>
        </trans-unit>
        <trans-unit id="12103d0e7fb92d8d3b9ddae239cdf39dea7eeb65" translate="yes" xml:space="preserve">
          <source>The repetition operators are:</source>
          <target state="translated">反復演算子は</target>
        </trans-unit>
        <trans-unit id="bfcbf2851f89edd4f300f9b36ba95aadb203f98e" translate="yes" xml:space="preserve">
          <source>The representation does &lt;em&gt;not&lt;/em&gt; look like Figure 4-3, which is what memory would look like if Rust instead copied the heap data as well. If Rust did this, the operation &lt;code&gt;s2 = s1&lt;/code&gt; could be very expensive in terms of runtime performance if the data on the heap were large.</source>
          <target state="translated">この表現は図4-3のように&lt;em&gt;は&lt;/em&gt;見えませ&lt;em&gt;ん&lt;/em&gt;。これは、Rustがヒープデータをコピーした場合のメモリのようになります。Rustがこれを行った場合、ヒープ上のデータが大きい場合、操作 &lt;code&gt;s2 = s1&lt;/code&gt; は実行時パフォーマンスの点で非常に高価になる可能性があります。</target>
        </trans-unit>
        <trans-unit id="0b1df299f3611946c8ad866e3a9d4772fabb543c" translate="yes" xml:space="preserve">
          <source>The representation of a &lt;code&gt;repr(C)&lt;/code&gt; enum with fields is a &lt;code&gt;repr(C)&lt;/code&gt; struct with two fields, also called a &quot;tagged union&quot; in C:</source>
          <target state="translated">フィールドを持つ &lt;code&gt;repr(C)&lt;/code&gt; 列挙型の表現は、2つのフィールドを持つ &lt;code&gt;repr(C)&lt;/code&gt; 構造体であり、Cでは「タグ付き共用体」とも呼ばれます。</target>
        </trans-unit>
        <trans-unit id="a3948c1d71b2273d20d352ff100e99a529e9f18b" translate="yes" xml:space="preserve">
          <source>The representation of a primitive representation enum is a &lt;code&gt;repr(C)&lt;/code&gt; union of &lt;code&gt;repr(C)&lt;/code&gt; structs for each variant with a field. The first field of each struct in the union is the primitive representation version of the enum with all fields removed (&quot;the tag&quot;) and the remaining fields are the fields of that variant.</source>
          <target state="translated">プリミティブ表現列挙型の表現は、フィールドを持つ各バリアントの &lt;code&gt;repr(C)&lt;/code&gt; 構造体の &lt;code&gt;repr(C)&lt;/code&gt; 結合です。ユニオンの各構造体の最初のフィールドは、すべてのフィールドが削除された列挙型のプリミティブ表現バージョン（「タグ」）であり、残りのフィールドはそのバリアントのフィールドです。</target>
        </trans-unit>
        <trans-unit id="ef3b4092c2efea2b55e7548a736c3333a566aec1" translate="yes" xml:space="preserve">
          <source>The representation of a trait object like &lt;code&gt;&amp;amp;SomeTrait&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&amp;amp;SomeTrait&lt;/code&gt; のような特性オブジェクトの表現。</target>
        </trans-unit>
        <trans-unit id="4110c125de481ad527206c93b01dbedc11c02bc7" translate="yes" xml:space="preserve">
          <source>The representation of a trait object like &lt;code&gt;&amp;amp;dyn SomeTrait&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&amp;amp;dyn SomeTrait&lt;/code&gt; ような特性オブジェクトの表現。</target>
        </trans-unit>
        <trans-unit id="84fd9c512efc7dcedf9b018795fbba5c08fc5ad5" translate="yes" xml:space="preserve">
          <source>The representation of a type can be changed by applying the &lt;code&gt;repr&lt;/code&gt; attribute to it. The following example shows a struct with a &lt;code&gt;C&lt;/code&gt; representation.</source>
          <target state="translated">タイプの表現は、それに &lt;code&gt;repr&lt;/code&gt; 属性を適用することによって変更できます。次の例は、 &lt;code&gt;C&lt;/code&gt; 表現の構造体を示しています。</target>
        </trans-unit>
        <trans-unit id="5a8aa6aa295a219e257360fdb9ca2113bb7bc323" translate="yes" xml:space="preserve">
          <source>The representation of a type can change the padding between fields, but does not change the layout of the fields themselves. For example, a struct with a &lt;code&gt;C&lt;/code&gt; representation that contains a struct &lt;code&gt;Inner&lt;/code&gt; with the default representation will not change the layout of &lt;code&gt;Inner&lt;/code&gt;.</source>
          <target state="translated">タイプの表現はフィールド間のパディングを変更できますが、フィールド自体のレイアウトは変更しません。たとえば、 &lt;code&gt;C&lt;/code&gt; 表現の構造体にデフォルトの表現の構造体 &lt;code&gt;Inner&lt;/code&gt; が含まれている場合、 &lt;code&gt;Inner&lt;/code&gt; のレイアウトは変更されません。</target>
        </trans-unit>
        <trans-unit id="8de668564b1808c69c7a252869635782239a849b" translate="yes" xml:space="preserve">
          <source>The representation semantics of floating-point numbers are described in &lt;a href=&quot;types/numeric&quot;&gt;&quot;Machine Types&quot;&lt;/a&gt;.</source>
          <target state="translated">浮動小数点数の表現セマンティクスについては、&lt;a href=&quot;types/numeric&quot;&gt;「マシンタイプ」を参照してください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="568b4d39b3d684710e1069cdb58107435b4ee105" translate="yes" xml:space="preserve">
          <source>The requested ABI is unsupported by the current target.</source>
          <target state="translated">要求されたABIは現在のターゲットではサポートされていません。</target>
        </trans-unit>
        <trans-unit id="6079a0a7d416189b9655a6ad531ff1787c361185" translate="yes" xml:space="preserve">
          <source>The required alignment of the referenced value.</source>
          <target state="translated">参照される値の必要な整列。</target>
        </trans-unit>
        <trans-unit id="48f41ba31da382f1ab342b312f6ebecf708e0a4f" translate="yes" xml:space="preserve">
          <source>The required inputs are these:</source>
          <target state="translated">必要な入力はこれらです。</target>
        </trans-unit>
        <trans-unit id="f6ffffcc1dc56ad2b07c96ba04b8dfcf628fd050" translate="yes" xml:space="preserve">
          <source>The requirements for this program haven&amp;rsquo;t been agreed upon yet, and we&amp;rsquo;re pretty sure the &lt;code&gt;Hello&lt;/code&gt; text at the beginning of the greeting will change. We decided we don&amp;rsquo;t want to have to update the test when the requirements change, so instead of checking for exact equality to the value returned from the &lt;code&gt;greeting&lt;/code&gt; function, we&amp;rsquo;ll just assert that the output contains the text of the input parameter.</source>
          <target state="translated">このプログラムの要件はまだ合意されておらず、挨拶の冒頭の &lt;code&gt;Hello&lt;/code&gt; テキストが変更されることは間違いありません。要件が変更されたときにテストを更新する必要がないことを決定したので、 &lt;code&gt;greeting&lt;/code&gt; 関数から返された値と正確に等しいかどうかをチェックする代わりに、出力に入力パラメーターのテキストが含まれていると断言します。</target>
        </trans-unit>
        <trans-unit id="0cbf837e1937a12c606036644e82391851dc8756" translate="yes" xml:space="preserve">
          <source>The responsibilities that remain in the &lt;code&gt;main&lt;/code&gt; function after this process should be limited to the following:</source>
          <target state="translated">このプロセス後に &lt;code&gt;main&lt;/code&gt; 機能に残る責任は、以下に限定する必要があります。</target>
        </trans-unit>
        <trans-unit id="fb88378aaf4cdd384feeec625a8c476a227f1fe6" translate="yes" xml:space="preserve">
          <source>The rest of the traits defined in the standard library can&amp;rsquo;t be implemented on your types using &lt;code&gt;derive&lt;/code&gt;. These traits don&amp;rsquo;t have sensible default behavior, so it&amp;rsquo;s up to you to implement them in the way that makes sense for what you&amp;rsquo;re trying to accomplish.</source>
          <target state="translated">標準ライブラリで定義された形質の残りの部分は、使用して、あなたのタイプに実装することはできません &lt;code&gt;derive&lt;/code&gt; 。これらの特性には適切なデフォルトの動作がないため、達成しようとしていることに意味のある方法で実装するのは、あなた次第です。</target>
        </trans-unit>
        <trans-unit id="3a3c86e891d6ad8a6d17dd1936fd9bfccb1b62f4" translate="yes" xml:space="preserve">
          <source>The rest of this book uses commands that work in both &lt;em&gt;cmd.exe&lt;/em&gt; and PowerShell. If there are specific differences, we&amp;rsquo;ll explain which to use.</source>
          <target state="translated">この本の残りの部分では、&lt;em&gt;cmd.exe&lt;/em&gt;とPowerShellの両方で機能するコマンドを使用しています。具体的な違いがある場合は、どちらを使用するかを説明します。</target>
        </trans-unit>
        <trans-unit id="00dd9e9169ec993decc3de54bbe98c364e0e7806" translate="yes" xml:space="preserve">
          <source>The rest of this crate documentation is dedicated to pointing out notable features of The Rust Standard Library.</source>
          <target state="translated">この木枠ドキュメントの残りの部分は、The Rust Standard Library の注目すべき機能を指摘することに専念しています。</target>
        </trans-unit>
        <trans-unit id="ac1c550b13307d7f1181fa4746cc5e5943901d94" translate="yes" xml:space="preserve">
          <source>The rest pattern is always irrefutable.</source>
          <target state="translated">残りのパターンはいつも反論の余地がない。</target>
        </trans-unit>
        <trans-unit id="b0cd0ab16fb284f9bcdd09aeae886a98592a2f2d" translate="yes" xml:space="preserve">
          <source>The result can be cast to a pointer of any kind. Ensure that the access is unique (no active references, mutable or not) when casting to &lt;code&gt;&amp;amp;mut T&lt;/code&gt;, and ensure that there are no mutations or mutable aliases going on when casting to &lt;code&gt;&amp;amp;T&lt;/code&gt;.</source>
          <target state="translated">結果は、あらゆる種類のポインターにキャストできます。 &lt;code&gt;&amp;amp;mut T&lt;/code&gt; にキャストするときは、アクセスが一意（アクティブな参照がない、変更可能かどうか）であることを確認し、 &lt;code&gt;&amp;amp;T&lt;/code&gt; にキャストするときにミューテーションまたは変更可能なエイリアスが発生していないことを確認します。</target>
        </trans-unit>
        <trans-unit id="c54e546283bfd6f5bb35e08c8e91500e43fa3efb" translate="yes" xml:space="preserve">
          <source>The result is allocated on the heap.</source>
          <target state="translated">結果はヒープに割り当てられます。</target>
        </trans-unit>
        <trans-unit id="9f60835a1f670fd1068b73e7310483f7414303f8" translate="yes" xml:space="preserve">
          <source>The result may not be correctly rounded owing to implementation details; &lt;code&gt;self.log2()&lt;/code&gt; can produce more accurate results for base 2, and &lt;code&gt;self.log10()&lt;/code&gt; can produce more accurate results for base 10.</source>
          <target state="translated">実装の詳細により、結果が正しく丸められない場合があります。 &lt;code&gt;self.log2()&lt;/code&gt; は、base 2に対してより正確な結果を生成でき、 &lt;code&gt;self.log10()&lt;/code&gt; は、base 10に対してより正確な結果を生成できます。</target>
        </trans-unit>
        <trans-unit id="c4dbebfb961a1bddcfad953b06a027b749fbba28" translate="yes" xml:space="preserve">
          <source>The result of &lt;a href=&quot;expressions/operator-expr#the-dereference-operator&quot;&gt;dereferencing&lt;/a&gt; an expression with type &lt;a href=&quot;../std/boxed/struct.box&quot;&gt;&lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; and that can also be moved out of.</source>
          <target state="translated">&lt;a href=&quot;../std/boxed/struct.box&quot;&gt; &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; &lt;/a&gt;型の式の&lt;a href=&quot;expressions/operator-expr#the-dereference-operator&quot;&gt;逆参照&lt;/a&gt;の結果であり、その外に移動することもできます。</target>
        </trans-unit>
        <trans-unit id="fe2526308745be82b19ed557143eb06c9172e9c2" translate="yes" xml:space="preserve">
          <source>The result of a generator resumption.</source>
          <target state="translated">発電機を再開した結果。</target>
        </trans-unit>
        <trans-unit id="d471d20c06ef14c004fab8262f7528514deaa1c4" translate="yes" xml:space="preserve">
          <source>The result of casting a reference to a pointer is valid for as long as the underlying object is live and no reference (just raw pointers) is used to access the same memory.</source>
          <target state="translated">ポインタへの参照をキャストした結果は、基礎となるオブジェクトが生きている限り有効であり、同じメモリにアクセスするために参照(単なる生ポインタ)が使用されません。</target>
        </trans-unit>
        <trans-unit id="ac56fae426229e4d543dba38661557fbee8bb52d" translate="yes" xml:space="preserve">
          <source>The result of the &lt;a href=&quot;../macro.format_args&quot;&gt;&lt;code&gt;format_args!&lt;/code&gt;&lt;/a&gt; macro is a value of type &lt;a href=&quot;struct.arguments&quot;&gt;&lt;code&gt;fmt::Arguments&lt;/code&gt;&lt;/a&gt;. This structure can then be passed to the &lt;a href=&quot;../macro.write&quot;&gt;&lt;code&gt;write&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../macro.format&quot;&gt;&lt;code&gt;format&lt;/code&gt;&lt;/a&gt; functions inside this module in order to process the format string. The goal of this macro is to even further prevent intermediate allocations when dealing with formatting strings.</source>
          <target state="translated">&lt;a href=&quot;../macro.format_args&quot;&gt; &lt;code&gt;format_args!&lt;/code&gt; &lt;/a&gt;の結果！マクロは、タイプ&lt;a href=&quot;struct.arguments&quot;&gt; &lt;code&gt;fmt::Arguments&lt;/code&gt; &lt;/a&gt;値です。次に、この構造体をこのモジュール内の&lt;a href=&quot;../macro.write&quot;&gt; &lt;code&gt;write&lt;/code&gt; &lt;/a&gt;関数と&lt;a href=&quot;../macro.format&quot;&gt; &lt;code&gt;format&lt;/code&gt; &lt;/a&gt;関数に渡して、フォーマット文字列を処理できます。このマクロの目的は、フォーマット文字列を処理するときに中間割り当てをさらに防ぐことです。</target>
        </trans-unit>
        <trans-unit id="31cd246d6c4827dc128a4e9ac189ceccd07f4e85" translate="yes" xml:space="preserve">
          <source>The result of the &lt;a href=&quot;../macro.format_args&quot;&gt;&lt;code&gt;format_args!&lt;/code&gt;&lt;/a&gt; macro is a value of type &lt;a href=&quot;struct.arguments&quot;&gt;&lt;code&gt;fmt::Arguments&lt;/code&gt;&lt;/a&gt;. This structure can then be passed to the &lt;a href=&quot;fn.write&quot;&gt;&lt;code&gt;write&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;fn.format&quot;&gt;&lt;code&gt;format&lt;/code&gt;&lt;/a&gt; functions inside this module in order to process the format string. The goal of this macro is to even further prevent intermediate allocations when dealing formatting strings.</source>
          <target state="translated">&lt;a href=&quot;../macro.format_args&quot;&gt; &lt;code&gt;format_args!&lt;/code&gt; &lt;/a&gt;の結果 マクロは、タイプ&lt;a href=&quot;struct.arguments&quot;&gt; &lt;code&gt;fmt::Arguments&lt;/code&gt; &lt;/a&gt;値です。この構造は、フォーマット文字列を処理するために、このモジュール内の&lt;a href=&quot;fn.write&quot;&gt; &lt;code&gt;write&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;fn.format&quot;&gt; &lt;code&gt;format&lt;/code&gt; &lt;/a&gt;関数に渡すことができます。このマクロの目的は、フォーマット文字列を処理するときの中間割り当てをさらに防ぐことです。</target>
        </trans-unit>
        <trans-unit id="1c32345d3d6f612f235d03a8cd84044465cbfeea" translate="yes" xml:space="preserve">
          <source>The result will represent the IP address &lt;code&gt;a:b:c:d:e:f:g:h&lt;/code&gt;.</source>
          <target state="translated">結果はIPアドレス &lt;code&gt;a:b:c:d:e:f:g:h&lt;/code&gt; を表します。</target>
        </trans-unit>
        <trans-unit id="99c7c63b15fc6ea4f165265a5fd114fc5db86d31" translate="yes" xml:space="preserve">
          <source>The result will represent the IP address &lt;code&gt;a&lt;/code&gt;.&lt;code&gt;b&lt;/code&gt;.&lt;code&gt;c&lt;/code&gt;.&lt;code&gt;d&lt;/code&gt;.</source>
          <target state="translated">結果はIPアドレス &lt;code&gt;a&lt;/code&gt; を表します。 &lt;code&gt;b&lt;/code&gt; 。 &lt;code&gt;c&lt;/code&gt; 。 &lt;code&gt;d&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7373e6f7caa0a9dff8d78cf60558cf221157bd80" translate="yes" xml:space="preserve">
          <source>The resulting layout will be the same as that of a C struct containing two fields with the layouts of &lt;code&gt;self&lt;/code&gt; and &lt;code&gt;next&lt;/code&gt;, in that order.</source>
          <target state="translated">結果のレイアウトは、 &lt;code&gt;self&lt;/code&gt; と &lt;code&gt;next&lt;/code&gt; のレイアウトの2つのフィールドをこの順序で含むC構造体のレイアウトと同じになります。</target>
        </trans-unit>
        <trans-unit id="99a0997f56bdadd8bd20428a4a2ef3bbae789fac" translate="yes" xml:space="preserve">
          <source>The resulting lifetime is bound to self so this behaves &quot;as if&quot; it were actually an instance of T that is getting borrowed. If a longer (unbound) lifetime is needed, use &lt;code&gt;&amp;amp;*my_ptr.as_ptr()&lt;/code&gt;.</source>
          <target state="translated">結果として得られる有効期間は自分自身にバインドされるため、これは実際に借用されているTのインスタンスであるかのように動作します。より長い（バインドされていない）ライフタイムが必要な場合は、 &lt;code&gt;&amp;amp;*my_ptr.as_ptr()&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="f78e2e736259493757a0ced96e6b992b486267c6" translate="yes" xml:space="preserve">
          <source>The resulting lifetime is bound to self so this behaves &quot;as if&quot; it were actually an instance of T that is getting borrowed. If a longer (unbound) lifetime is needed, use &lt;code&gt;&amp;amp;mut *my_ptr.as_ptr()&lt;/code&gt;.</source>
          <target state="translated">結果として得られる有効期間は自分自身にバインドされるため、これは実際に借用されているTのインスタンスであるかのように動作します。より長い（バインドされていない）ライフタイムが必要な場合は、 &lt;code&gt;&amp;amp;mut *my_ptr.as_ptr()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9220ca335fae6d1972b4901944a1126d0f38ae8e" translate="yes" xml:space="preserve">
          <source>The resulting pointer does not need to be in bounds, but it is potentially hazardous to dereference (which requires &lt;code&gt;unsafe&lt;/code&gt;).</source>
          <target state="translated">結果のポインターは境界内にある必要はありませんが、逆参照（ &lt;code&gt;unsafe&lt;/code&gt; が必要）に潜在的に危険です。</target>
        </trans-unit>
        <trans-unit id="81b4f59283eb3ce773831a86dd58d26e19da85b4" translate="yes" xml:space="preserve">
          <source>The resulting pointer does not need to be in bounds, but it is potentially hazardous to dereference (which requires &lt;code&gt;unsafe&lt;/code&gt;). In particular, the resulting pointer may &lt;em&gt;not&lt;/em&gt; be used to access a different allocated object than the one &lt;code&gt;self&lt;/code&gt; points to. In other words, &lt;code&gt;x.wrapping_offset(y.wrapping_offset_from(x))&lt;/code&gt; is &lt;em&gt;not&lt;/em&gt; the same as &lt;code&gt;y&lt;/code&gt;, and dereferencing it is undefined behavior unless &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; point into the same allocated object.</source>
          <target state="translated">結果のポインターは境界内にある必要はありませんが、逆参照（ &lt;code&gt;unsafe&lt;/code&gt; が必要）に潜在的に危険です。特に、結果のポインタは、 &lt;code&gt;self&lt;/code&gt; 指しているものとは異なる割り当てられたオブジェクトにアクセスするために使用でき&lt;em&gt;ません&lt;/em&gt;。つまり、 &lt;code&gt;x.wrapping_offset(y.wrapping_offset_from(x))&lt;/code&gt; は &lt;code&gt;y&lt;/code&gt; と同じでは&lt;em&gt;なく&lt;/em&gt;、 &lt;code&gt;x&lt;/code&gt; と &lt;code&gt;y&lt;/code&gt; が同じ割り当てられたオブジェクトを指す場合を除いて、それを逆参照することは未定義の動作です。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="52dcba8fc55d983793d49be111c09fcb50eb3b76" translate="yes" xml:space="preserve">
          <source>The resulting pointer will have provenance of &lt;code&gt;val&lt;/code&gt;, i.e., for a fat pointer, this operation is semantically the same as creating a new fat pointer with the data pointer value of &lt;code&gt;val&lt;/code&gt; but the metadata of &lt;code&gt;self&lt;/code&gt;.</source>
          <target state="translated">結果のポインターは &lt;code&gt;val&lt;/code&gt; のプロバンスを持ちます。つまり、ファットポインターの場合、この操作は、 &lt;code&gt;val&lt;/code&gt; のデータポインター値で新しいファットポインターを作成するのと意味的に同じですが、 &lt;code&gt;self&lt;/code&gt; のメタデータです。</target>
        </trans-unit>
        <trans-unit id="277fa9ca5234a7d85c4310d360b586b5679536d7" translate="yes" xml:space="preserve">
          <source>The resulting type after applying the &lt;code&gt;!&lt;/code&gt; operator.</source>
          <target state="translated">&lt;code&gt;!&lt;/code&gt; を適用した結果のタイプ オペレーター。</target>
        </trans-unit>
        <trans-unit id="e0fff7e85f4e0422c5e3edd89994815fd0fa33fe" translate="yes" xml:space="preserve">
          <source>The resulting type after applying the &lt;code&gt;%&lt;/code&gt; operator.</source>
          <target state="translated">&lt;code&gt;%&lt;/code&gt; 演算子を適用した後の結果の型。</target>
        </trans-unit>
        <trans-unit id="bb2df529c05fcb3e3ae1db4ab5bf5c9f054fbf92" translate="yes" xml:space="preserve">
          <source>The resulting type after applying the &lt;code&gt;&amp;amp;&lt;/code&gt; operator.</source>
          <target state="translated">&lt;code&gt;&amp;amp;&lt;/code&gt; 演算子を適用した後の結果の型。</target>
        </trans-unit>
        <trans-unit id="36522abccd158f4a83c30f6cbe7b1f733a467a76" translate="yes" xml:space="preserve">
          <source>The resulting type after applying the &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; operator.</source>
          <target state="translated">&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; 演算子を適用した結果の型。</target>
        </trans-unit>
        <trans-unit id="1fe31e03010cc02b7a70dec74838acc1bf92f653" translate="yes" xml:space="preserve">
          <source>The resulting type after applying the &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; operator.</source>
          <target state="translated">&lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; 演算子を適用した後の結果の型。</target>
        </trans-unit>
        <trans-unit id="49f0b7e4d4d9571dc029b144b407d2d00db70bde" translate="yes" xml:space="preserve">
          <source>The resulting type after applying the &lt;code&gt;*&lt;/code&gt; operator.</source>
          <target state="translated">&lt;code&gt;*&lt;/code&gt; 演算子を適用した結果の型。</target>
        </trans-unit>
        <trans-unit id="5440b4202f92f92a6ad5f44ab02bb1836dc990f2" translate="yes" xml:space="preserve">
          <source>The resulting type after applying the &lt;code&gt;+&lt;/code&gt; operator.</source>
          <target state="translated">&lt;code&gt;+&lt;/code&gt; 演算子を適用した後の結果の型。</target>
        </trans-unit>
        <trans-unit id="4a8bf360ec637ebc225332beb0f574739bca97a7" translate="yes" xml:space="preserve">
          <source>The resulting type after applying the &lt;code&gt;-&lt;/code&gt; operator.</source>
          <target state="translated">&lt;code&gt;-&lt;/code&gt; 演算子を適用した後の結果の型。</target>
        </trans-unit>
        <trans-unit id="541f705e1fd40afef0d79bd7f0f4268fa7398a27" translate="yes" xml:space="preserve">
          <source>The resulting type after applying the &lt;code&gt;/&lt;/code&gt; operator.</source>
          <target state="translated">&lt;code&gt;/&lt;/code&gt; 演算子を適用した後の結果の型。</target>
        </trans-unit>
        <trans-unit id="5fff5e225b75cdf382af9bb7542d50be9c4363ed" translate="yes" xml:space="preserve">
          <source>The resulting type after applying the &lt;code&gt;^&lt;/code&gt; operator.</source>
          <target state="translated">&lt;code&gt;^&lt;/code&gt; 演算子を適用した後の結果の型。</target>
        </trans-unit>
        <trans-unit id="fee8ba95ad793c2c7dda2e8911dcb02800ab8ed4" translate="yes" xml:space="preserve">
          <source>The resulting type after applying the &lt;code&gt;|&lt;/code&gt; operator.</source>
          <target state="translated">&lt;code&gt;|&lt;/code&gt; を適用した後の結果の型 オペレーター。</target>
        </trans-unit>
        <trans-unit id="0473503cf115b2a975e15da3f35244db7bce3d66" translate="yes" xml:space="preserve">
          <source>The resulting type after concatenation</source>
          <target state="translated">連結後の結果の型</target>
        </trans-unit>
        <trans-unit id="dbf5bd29abfe066aae072317675dfaca543c15fe" translate="yes" xml:space="preserve">
          <source>The resulting type after dereferencing.</source>
          <target state="translated">参照を解除した後の結果の型。</target>
        </trans-unit>
        <trans-unit id="76a4c8bb9eba17c026c554fa00db407a4ed92a09" translate="yes" xml:space="preserve">
          <source>The resulting type after obtaining ownership.</source>
          <target state="translated">所有権取得後の結果型。</target>
        </trans-unit>
        <trans-unit id="04c53e531d342d2fc7cb2f6812bb0980d9b695cc" translate="yes" xml:space="preserve">
          <source>The resulting vector can be converted back into a box via &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt;'s &lt;code&gt;into_boxed_slice&lt;/code&gt; method.</source>
          <target state="translated">結果のベクトルは、 &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; の &lt;code&gt;into_boxed_slice&lt;/code&gt; メソッドを介してボックスに変換して戻すことができます。</target>
        </trans-unit>
        <trans-unit id="c631dfaa5b94e5b7afa0d3baba880ecf32c3c788" translate="yes" xml:space="preserve">
          <source>The return type in the desugaring is assumed to capture all lifetime parameters from the &lt;code&gt;async fn&lt;/code&gt; declaration. This can be seen in the desugared example above, which explicitly outlives, and hence captures, &lt;code&gt;'a&lt;/code&gt;.</source>
          <target state="translated">脱糖の戻り値の型は、 &lt;code&gt;async fn&lt;/code&gt; 宣言からすべてのライフタイムパラメーターをキャプチャすると想定されています。これは、上記の脱糖された例で見ることができます。これは、明示的に長生きするため、 &lt;code&gt;'a&lt;/code&gt; をキャプチャします。</target>
        </trans-unit>
        <trans-unit id="8b3c91f66fb428df18fd8a3b968cf270fb22e4f6" translate="yes" xml:space="preserve">
          <source>The return type isn&amp;rsquo;t &lt;code&gt;Self&lt;/code&gt;.</source>
          <target state="translated">戻り値の型は &lt;code&gt;Self&lt;/code&gt; ではありません。</target>
        </trans-unit>
        <trans-unit id="87f17fcd6dd95b0936e246de85107f7f76aa4067" translate="yes" xml:space="preserve">
          <source>The return type of &lt;a href=&quot;../primitive.str#method.escape_debug&quot;&gt;&lt;code&gt;str::escape_debug&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../primitive.str#method.escape_debug&quot;&gt; &lt;code&gt;str::escape_debug&lt;/code&gt; &lt;/a&gt;の戻りタイプ。</target>
        </trans-unit>
        <trans-unit id="db39743b7e18afb4b0cbc402d05c64c31d6c2284" translate="yes" xml:space="preserve">
          <source>The return type of &lt;a href=&quot;../primitive.str#method.escape_default&quot;&gt;&lt;code&gt;str::escape_default&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../primitive.str#method.escape_default&quot;&gt; &lt;code&gt;str::escape_default&lt;/code&gt; &lt;/a&gt;の戻り値の型。</target>
        </trans-unit>
        <trans-unit id="0d7f1d5c28f55e7c46b28c80bf7c947a04177ba0" translate="yes" xml:space="preserve">
          <source>The return type of &lt;a href=&quot;../primitive.str#method.escape_unicode&quot;&gt;&lt;code&gt;str::escape_unicode&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../primitive.str#method.escape_unicode&quot;&gt; &lt;code&gt;str::escape_unicode&lt;/code&gt; &lt;/a&gt;の戻りタイプ。</target>
        </trans-unit>
        <trans-unit id="46984a9d3d93237d6af0b4171b9091187f1fd40f" translate="yes" xml:space="preserve">
          <source>The return type of &lt;code&gt;read_input()&lt;/code&gt;, &lt;a href=&quot;type.result&quot;&gt;&lt;code&gt;io::Result&amp;lt;()&amp;gt;&lt;/code&gt;&lt;/a&gt;, is a very common type for functions which don't have a 'real' return value, but do want to return errors if they happen. In this case, the only purpose of this function is to read the line and print it, so we use &lt;code&gt;()&lt;/code&gt;.</source>
          <target state="translated">戻り値の型 &lt;code&gt;read_input()&lt;/code&gt; 、&lt;a href=&quot;type.result&quot;&gt; &lt;code&gt;io::Result&amp;lt;()&amp;gt;&lt;/code&gt; &lt;/a&gt;、「本当の」、戻り値を持っていないが、彼らが起こる場合は、エラーを返すようにしたいん機能のための非常に一般的なタイプです。この場合、この関数の唯一の目的は行を読み取って出力することなので、 &lt;code&gt;()&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="dc8688a274902ed01a0ecc5033bf35069d5bb391" translate="yes" xml:space="preserve">
          <source>The return value is a result indicating whether the new value was written and containing the previous value. On success this value is guaranteed to be equal to &lt;code&gt;current&lt;/code&gt;.</source>
          <target state="translated">戻り値は、新しい値が書き込まれ、以前の値が含まれているかどうかを示す結果です。成功すると、この値は &lt;code&gt;current&lt;/code&gt; と等しいことが保証されます。</target>
        </trans-unit>
        <trans-unit id="6b1ea39b856b2d5fee30e6b97044d7752b536c14" translate="yes" xml:space="preserve">
          <source>The return value is always the previous value. If it is equal to &lt;code&gt;current&lt;/code&gt;, then the value was updated.</source>
          <target state="translated">戻り値は常に前の値です。それが &lt;code&gt;current&lt;/code&gt; と等しい場合、値は更新されています。</target>
        </trans-unit>
        <trans-unit id="fc0a38af017feefeb9d3ecc2b64620f7588f7e32" translate="yes" xml:space="preserve">
          <source>The return value may change depending on the compiler version and unsafe code may not rely on the result of this function for soundness. It is suggested to only use this function for performance optimizations where spurious &lt;code&gt;false&lt;/code&gt; return values by this function do not affect the outcome, but just the performance. The consequences of using this method to make runtime and compile-time code behave differently have not been explored. This method should not be used to introduce such differences, and it should also not be stabilized before we have a better understanding of this issue.</source>
          <target state="translated">戻り値はコンパイラのバージョンによって変わる可能性があり、安全でないコードは健全性のためにこの関数の結果に依存しない可能性があります。この関数は、この関数による誤った &lt;code&gt;false&lt;/code&gt; 戻り値が結果に影響を与えず、パフォーマンスにのみ影響を与えるパフォーマンスの最適化にのみ使用することをお勧めします。このメソッドを使用してランタイムコードとコンパイル時コードの動作を変えることの結果は、調査されていません。この方法は、そのような違いを導入するために使用されるべきではありません。また、この問題をよりよく理解する前に、この方法を安定させるべきではありません。</target>
        </trans-unit>
        <trans-unit id="8bec0cf03017a322224afce0dc723c8da3b1c3f8" translate="yes" xml:space="preserve">
          <source>The return value of this function has no meaning if &lt;code&gt;align&lt;/code&gt; is not a power-of-two.</source>
          <target state="translated">この関数の戻り値は、 &lt;code&gt;align&lt;/code&gt; が2のべき乗でない場合は意味がありません。</target>
        </trans-unit>
        <trans-unit id="60b397a9e27c756600834e9e8bc999da0f2e38e6" translate="yes" xml:space="preserve">
          <source>The returned 64-bit value is equivalent to a &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/api/minwinbase/ns-minwinbase-filetime&quot;&gt;&lt;code&gt;FILETIME&lt;/code&gt;&lt;/a&gt; struct, which represents the number of 100-nanosecond intervals since January 1, 1601 (UTC). The struct is automatically converted to a &lt;code&gt;u64&lt;/code&gt; value, as that is the recommended way to use it.</source>
          <target state="translated">返される64ビット値は、1601年1月1日（UTC）以降の100ナノ秒間隔の数を表す&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/api/minwinbase/ns-minwinbase-filetime&quot;&gt; &lt;code&gt;FILETIME&lt;/code&gt; &lt;/a&gt;構造体と同等です。構造体は自動的に &lt;code&gt;u64&lt;/code&gt; 値に変換されます。これは、それを使用するための推奨される方法です。</target>
        </trans-unit>
        <trans-unit id="9b9e4888166c03a2354c980d922cf25c13eb44d0" translate="yes" xml:space="preserve">
          <source>The returned 64-bit value is equivalent to a &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/ms724284.aspx&quot;&gt;&lt;code&gt;FILETIME&lt;/code&gt;&lt;/a&gt; struct, which represents the number of 100-nanosecond intervals since January 1, 1601 (UTC). The struct is automatically converted to a &lt;code&gt;u64&lt;/code&gt; value, as that is the recommended way to use it.</source>
          <target state="translated">返される64ビット値は&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/ms724284.aspx&quot;&gt; &lt;code&gt;FILETIME&lt;/code&gt; &lt;/a&gt;構造体に相当します。これは、1601年1月1日（UTC）以降の100ナノ秒間隔の数を表します。構造体は推奨される使用方法であるため、 &lt;code&gt;u64&lt;/code&gt; 値に自動的に変換されます。</target>
        </trans-unit>
        <trans-unit id="f17e579c0925b04170923132b19bbc2e328718e7" translate="yes" xml:space="preserve">
          <source>The returned &lt;a href=&quot;struct.range&quot;&gt;&lt;code&gt;Range&lt;/code&gt;&lt;/a&gt; is safe to pass to &lt;a href=&quot;../primitive.slice#method.get_unchecked&quot;&gt;&lt;code&gt;slice::get_unchecked&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../primitive.slice#method.get_unchecked_mut&quot;&gt;&lt;code&gt;slice::get_unchecked_mut&lt;/code&gt;&lt;/a&gt; for slices of the given length.</source>
          <target state="translated">返された&lt;a href=&quot;struct.range&quot;&gt; &lt;code&gt;Range&lt;/code&gt; &lt;/a&gt;は、指定された長さのスライスに対して、&lt;a href=&quot;../primitive.slice#method.get_unchecked&quot;&gt; &lt;code&gt;slice::get_unchecked&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;../primitive.slice#method.get_unchecked_mut&quot;&gt; &lt;code&gt;slice::get_unchecked_mut&lt;/code&gt; &lt;/a&gt;に安全に渡すことができます。</target>
        </trans-unit>
        <trans-unit id="7e9caf07f01ab2822f3d6ed99758b9360c5c26af" translate="yes" xml:space="preserve">
          <source>The returned &lt;a href=&quot;struct.tcplistener&quot;&gt;&lt;code&gt;TcpListener&lt;/code&gt;&lt;/a&gt; is a reference to the same socket that this object references. Both handles can be used to accept incoming connections and options set on one listener will affect the other.</source>
          <target state="translated">返される&lt;a href=&quot;struct.tcplistener&quot;&gt; &lt;code&gt;TcpListener&lt;/code&gt; &lt;/a&gt;は、このオブジェクトが参照するのと同じソケットへの参照です。両方のハンドルを使用して着信接続を受け入れることができ、一方のリスナーに設定されたオプションはもう一方に影響します。</target>
        </trans-unit>
        <trans-unit id="ded74a0ee30df2ab90178bc7d8c79f6560c92452" translate="yes" xml:space="preserve">
          <source>The returned &lt;a href=&quot;struct.waittimeoutresult&quot;&gt;&lt;code&gt;WaitTimeoutResult&lt;/code&gt;&lt;/a&gt; value indicates if the timeout is known to have elapsed without the condition being met.</source>
          <target state="translated">返される&lt;a href=&quot;struct.waittimeoutresult&quot;&gt; &lt;code&gt;WaitTimeoutResult&lt;/code&gt; &lt;/a&gt;値は、条件が満たされないままタイムアウトが経過したことがわかっているかどうかを示します。</target>
        </trans-unit>
        <trans-unit id="38736111afdf682fcdb07c273e755038e1599f59" translate="yes" xml:space="preserve">
          <source>The returned &lt;a href=&quot;struct.waittimeoutresult&quot;&gt;&lt;code&gt;WaitTimeoutResult&lt;/code&gt;&lt;/a&gt; value indicates if the timeout is known to have elapsed.</source>
          <target state="translated">返される&lt;a href=&quot;struct.waittimeoutresult&quot;&gt; &lt;code&gt;WaitTimeoutResult&lt;/code&gt; &lt;/a&gt;値は、タイムアウトが経過したことがわかっているかどうかを示します。</target>
        </trans-unit>
        <trans-unit id="a4d3afc22fc51194d42ebf97c4d4c71d6cf8d193" translate="yes" xml:space="preserve">
          <source>The returned &lt;code&gt;Read&lt;/code&gt; instance will first read all bytes from this object until EOF is encountered. Afterwards the output is equivalent to the output of &lt;code&gt;next&lt;/code&gt;.</source>
          <target state="translated">返された &lt;code&gt;Read&lt;/code&gt; インスタンスは、EOFが検出されるまで、最初にこのオブジェクトからすべてのバイトを読み取ります。その後、出力は &lt;code&gt;next&lt;/code&gt; の出力と同等になります。</target>
        </trans-unit>
        <trans-unit id="c46cae45e911aa3ffb2e82c2b8df4d3f09691f8b" translate="yes" xml:space="preserve">
          <source>The returned &lt;code&gt;TcpStream&lt;/code&gt; is a reference to the same stream that this object references. Both handles will read and write the same stream of data, and options set on one stream will be propagated to the other stream.</source>
          <target state="translated">返される &lt;code&gt;TcpStream&lt;/code&gt; は、このオブジェクトが参照するのと同じストリームへの参照です。両方のハンドルが同じデータストリームを読み書きし、一方のストリームに設定されたオプションがもう一方のストリームに伝播されます。</target>
        </trans-unit>
        <trans-unit id="f1bab9e66e16ee3bc6f8eaaaaca9a4320b7da4d4" translate="yes" xml:space="preserve">
          <source>The returned &lt;code&gt;UdpSocket&lt;/code&gt; is a reference to the same socket that this object references. Both handles will read and write the same port, and options set on one socket will be propagated to the other.</source>
          <target state="translated">返される &lt;code&gt;UdpSocket&lt;/code&gt; は、このオブジェクトが参照するのと同じソケットへの参照です。両方のハンドルが同じポートを読み書きし、一方のソケットに設定されたオプションがもう一方に伝播されます。</target>
        </trans-unit>
        <trans-unit id="c1a563924be47f2135363b13913bddb8d81845c6" translate="yes" xml:space="preserve">
          <source>The returned &lt;code&gt;UnixDatagram&lt;/code&gt; is a reference to the same socket that this object references. Both handles can be used to accept incoming connections and options set on one side will affect the other.</source>
          <target state="translated">返される &lt;code&gt;UnixDatagram&lt;/code&gt; は、このオブジェクトが参照するのと同じソケットへの参照です。両方のハンドルを使用して着信接続を受け入れることができ、一方の側で設定されたオプションは他方に影響します。</target>
        </trans-unit>
        <trans-unit id="3a69722b38c150ace8c17a0ad6c7500758c624a4" translate="yes" xml:space="preserve">
          <source>The returned &lt;code&gt;UnixListener&lt;/code&gt; is a reference to the same socket that this object references. Both handles can be used to accept incoming connections and options set on one listener will affect the other.</source>
          <target state="translated">返される &lt;code&gt;UnixListener&lt;/code&gt; は、このオブジェクトが参照するのと同じソケットへの参照です。両方のハンドルを使用して着信接続を受け入れることができ、一方のリスナーに設定されたオプションはもう一方に影響します。</target>
        </trans-unit>
        <trans-unit id="144b7ef360f6249426bb7be199321625b6985707" translate="yes" xml:space="preserve">
          <source>The returned &lt;code&gt;UnixStream&lt;/code&gt; is a reference to the same stream that this object references. Both handles will read and write the same stream of data, and options set on one stream will be propagated to the other stream.</source>
          <target state="translated">返される &lt;code&gt;UnixStream&lt;/code&gt; は、このオブジェクトが参照するのと同じストリームへの参照です。両方のハンドルが同じデータストリームを読み書きし、一方のストリームに設定されたオプションがもう一方のストリームに伝播されます。</target>
        </trans-unit>
        <trans-unit id="cb880b11df63d1e3077076bea22bb8b51ec8054d" translate="yes" xml:space="preserve">
          <source>The returned adaptor also implements &lt;code&gt;AllocRef&lt;/code&gt; and will simply borrow this.</source>
          <target state="translated">返されたアダプタも &lt;code&gt;AllocRef&lt;/code&gt; を実装しており、これを借用するだけです。</target>
        </trans-unit>
        <trans-unit id="4ae8d8d70f6a5dbf383ce8f90712add3666ba1c3" translate="yes" xml:space="preserve">
          <source>The returned adaptor also implements &lt;code&gt;Allocator&lt;/code&gt; and will simply borrow this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3560a746a4c0e2ffb1141c7abaa941ae137d7b4" translate="yes" xml:space="preserve">
          <source>The returned adaptor also implements &lt;code&gt;Read&lt;/code&gt; and will simply borrow this current reader.</source>
          <target state="translated">返されたアダプターも &lt;code&gt;Read&lt;/code&gt; を実装し、この現在のリーダーを借ります。</target>
        </trans-unit>
        <trans-unit id="facac298df7b4792f8b8fe4cbcbc0a4967c70852" translate="yes" xml:space="preserve">
          <source>The returned adaptor also implements &lt;code&gt;Write&lt;/code&gt; and will simply borrow this current writer.</source>
          <target state="translated">返されたアダプタも &lt;code&gt;Write&lt;/code&gt; を実装し、この現在のライターを借りるだけです。</target>
        </trans-unit>
        <trans-unit id="e389b4884c363b3fc760ebd7d93cdcb95de946c0" translate="yes" xml:space="preserve">
          <source>The returned block is suitable for passing to the &lt;code&gt;alloc&lt;/code&gt;/&lt;code&gt;realloc&lt;/code&gt; methods of this allocator.</source>
          <target state="translated">返されたブロックは、このアロケータの &lt;code&gt;alloc&lt;/code&gt; / &lt;code&gt;realloc&lt;/code&gt; メソッドに渡すのに適しています。</target>
        </trans-unit>
        <trans-unit id="c91d87a8c74843f84b212121082c194e485a54b8" translate="yes" xml:space="preserve">
          <source>The returned block may have a larger size than specified by &lt;code&gt;layout.size()&lt;/code&gt;, and may or may not have its contents initialized.</source>
          <target state="translated">返されるブロックのサイズは、 &lt;code&gt;layout.size()&lt;/code&gt; で指定されているサイズよりも大きい場合があり、内容が初期化されている場合とされていない場合があります。</target>
        </trans-unit>
        <trans-unit id="b4d367aab1faeec6de58c9c9955a240781bdbe40" translate="yes" xml:space="preserve">
          <source>The returned block of storage may or may not have its contents initialized. (Extension subtraits might restrict this behavior, e.g., to ensure initialization to particular sets of bit patterns.)</source>
          <target state="translated">返されたストレージのブロックは、その内容が初期化されている場合もあれば、されていない場合もあります(拡張減算は、特定のビットパターンのセットを確実に初期化するなど、この動作を制限する場合があります)。(拡張サブトラクションは、特定のビットパターンのセットに対する初期化を確実にするためなど、この動作を制限するかもしれません)。</target>
        </trans-unit>
        <trans-unit id="ba2ebcfc4f605284f02edd68881e9753988594f5" translate="yes" xml:space="preserve">
          <source>The returned boolean is &lt;code&gt;false&lt;/code&gt; only if the timeout is known to have elapsed.</source>
          <target state="translated">タイムアウトが経過したことがわかっている場合にのみ、返されるブール値は &lt;code&gt;false&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="ef190a0092cd801a89bd32ca6438155668c7c711" translate="yes" xml:space="preserve">
          <source>The returned buffer does &lt;strong&gt;not&lt;/strong&gt; contain the trailing nul terminator, and it is guaranteed to not have any interior nul bytes.</source>
          <target state="translated">返されたバッファがない&lt;strong&gt;ではない&lt;/strong&gt;末尾のNULターミネータを含み、どんなインテリアNULバイトを持っていないことが保証されます。</target>
        </trans-unit>
        <trans-unit id="c21f9df3ca074ffdfcc498df18bd9b3644edeb21" translate="yes" xml:space="preserve">
          <source>The returned iterator contains a snapshot of the process's environment variables at the time of this invocation. Modifications to environment variables afterwards will not be reflected in the returned iterator.</source>
          <target state="translated">返されるイテレータには、この呼び出し時のプロセスの環境変数のスナップショットが含まれます。その後の環境変数の変更は、返されるイテレータには反映されません。</target>
        </trans-unit>
        <trans-unit id="94742684e4e1a0a940d70b49afd50e4db443fbed" translate="yes" xml:space="preserve">
          <source>The returned iterator may not actually yield any values depending on the outcome of any resolution performed.</source>
          <target state="translated">返されたイテレータは、実行された解決の結果によっては、実際には何の値も得られないかもしれません。</target>
        </trans-unit>
        <trans-unit id="2aad97e80249c67281fd50b9abdb7bf4c0bc39de" translate="yes" xml:space="preserve">
          <source>The returned iterator might panic if the to-be-returned index would overflow a &lt;a href=&quot;../primitive.usize&quot;&gt;&lt;code&gt;usize&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">返されるインデックスが&lt;a href=&quot;../primitive.usize&quot;&gt; &lt;code&gt;usize&lt;/code&gt; &lt;/a&gt;をオーバーフローすると、返されたイテレータがパニックになる可能性があります。</target>
        </trans-unit>
        <trans-unit id="3f6e0a2276ef2ac22ba60fa606f31e8d0538ab17" translate="yes" xml:space="preserve">
          <source>The returned iterator requires that the pattern supports a reverse search, and it will be a &lt;a href=&quot;../iter/trait.doubleendediterator&quot;&gt;&lt;code&gt;DoubleEndedIterator&lt;/code&gt;&lt;/a&gt; if a forward/reverse search yields the same elements.</source>
          <target state="translated">返されるイテレータでは、パターンが逆検索をサポートしている必要があり、順検索/逆検索で同じ要素が生成された場合は&lt;a href=&quot;../iter/trait.doubleendediterator&quot;&gt; &lt;code&gt;DoubleEndedIterator&lt;/code&gt; &lt;/a&gt;になります。</target>
        </trans-unit>
        <trans-unit id="212e83558d8f38fe873f76d6ab8c409b36c6c1ca" translate="yes" xml:space="preserve">
          <source>The returned iterator requires that the pattern supports a reverse search, and it will be a &lt;a href=&quot;iter/trait.doubleendediterator&quot;&gt;&lt;code&gt;DoubleEndedIterator&lt;/code&gt;&lt;/a&gt; if a forward/reverse search yields the same elements.</source>
          <target state="translated">返された反復子は、パターンが逆検索をサポートしていることを必要とし、順方向/逆検索が同じ要素を生成する場合、それは&lt;a href=&quot;iter/trait.doubleendediterator&quot;&gt; &lt;code&gt;DoubleEndedIterator&lt;/code&gt; &lt;/a&gt;になります。</target>
        </trans-unit>
        <trans-unit id="0a192fbaedef699058263c6cf3d017b9555c1581" translate="yes" xml:space="preserve">
          <source>The returned iterator requires that the pattern supports a reverse search, and it will be double ended if a forward/reverse search yields the same elements.</source>
          <target state="translated">返されるイテレータは、パターンが逆引き検索をサポートしていることを必要とし、順引き検索と逆引き検索で同じ要素が得られた場合はダブルエンドとなります。</target>
        </trans-unit>
        <trans-unit id="31cf06022e130c2b8e694b6f17ab8cbe9626501c" translate="yes" xml:space="preserve">
          <source>The returned iterator will be a &lt;a href=&quot;../iter/trait.doubleendediterator&quot;&gt;&lt;code&gt;DoubleEndedIterator&lt;/code&gt;&lt;/a&gt; if the pattern allows a reverse search and forward/reverse search yields the same elements. This is true for, e.g., &lt;a href=&quot;../primitive.char&quot;&gt;&lt;code&gt;char&lt;/code&gt;&lt;/a&gt;, but not for &lt;code&gt;&amp;amp;str&lt;/code&gt;.</source>
          <target state="translated">パターンが逆検索を許可し、順/逆検索が同じ要素を生成する場合、返されるイテレーターは&lt;a href=&quot;../iter/trait.doubleendediterator&quot;&gt; &lt;code&gt;DoubleEndedIterator&lt;/code&gt; に&lt;/a&gt;なります。これは、たとえば&lt;a href=&quot;../primitive.char&quot;&gt; &lt;code&gt;char&lt;/code&gt; &lt;/a&gt;には当てはまりますが、 &lt;code&gt;&amp;amp;str&lt;/code&gt; には当てはまりません。</target>
        </trans-unit>
        <trans-unit id="4543e6c97747a65b55c800608ca5f7c928ee84b5" translate="yes" xml:space="preserve">
          <source>The returned iterator will be a &lt;a href=&quot;iter/trait.doubleendediterator&quot;&gt;&lt;code&gt;DoubleEndedIterator&lt;/code&gt;&lt;/a&gt; if the pattern allows a reverse search and forward/reverse search yields the same elements. This is true for, e.g., &lt;a href=&quot;../char/index&quot;&gt;&lt;code&gt;char&lt;/code&gt;&lt;/a&gt;, but not for &lt;code&gt;&amp;amp;str&lt;/code&gt;.</source>
          <target state="translated">パターンが逆方向検索を許可し、順方向/逆方向検索で同じ要素が生成される場合、返される反復子は&lt;a href=&quot;iter/trait.doubleendediterator&quot;&gt; &lt;code&gt;DoubleEndedIterator&lt;/code&gt; に&lt;/a&gt;なります。これは、たとえば&lt;a href=&quot;../char/index&quot;&gt; &lt;code&gt;char&lt;/code&gt; &lt;/a&gt;には当てはまりますが、 &lt;code&gt;&amp;amp;str&lt;/code&gt; には当てはまりません。</target>
        </trans-unit>
        <trans-unit id="fcd14ee368ff1244ad97f001dc72e74042b0095f" translate="yes" xml:space="preserve">
          <source>The returned iterator will be a &lt;a href=&quot;iter/trait.doubleendediterator&quot;&gt;&lt;code&gt;DoubleEndedIterator&lt;/code&gt;&lt;/a&gt; if the pattern allows a reverse search and forward/reverse search yields the same elements. This is true for, e.g., &lt;a href=&quot;char/index&quot;&gt;&lt;code&gt;char&lt;/code&gt;&lt;/a&gt;, but not for &lt;code&gt;&amp;amp;str&lt;/code&gt;.</source>
          <target state="translated">パターンが逆方向検索を許可し、順方向/逆方向検索で同じ要素が生成される場合、返される反復子は&lt;a href=&quot;iter/trait.doubleendediterator&quot;&gt; &lt;code&gt;DoubleEndedIterator&lt;/code&gt; に&lt;/a&gt;なります。これは、たとえば&lt;a href=&quot;char/index&quot;&gt; &lt;code&gt;char&lt;/code&gt; &lt;/a&gt;には当てはまりますが、 &lt;code&gt;&amp;amp;str&lt;/code&gt; には当てはまりません。</target>
        </trans-unit>
        <trans-unit id="fb1179f626056fe35d781c0e7e7072fe8a2697c8" translate="yes" xml:space="preserve">
          <source>The returned iterator will be a &lt;a href=&quot;iter/trait.doubleendediterator&quot;&gt;&lt;code&gt;DoubleEndedIterator&lt;/code&gt;&lt;/a&gt; if the pattern allows a reverse search and forward/reverse search yields the same elements. This is true for, e.g., &lt;a href=&quot;primitive.char&quot;&gt;&lt;code&gt;char&lt;/code&gt;&lt;/a&gt;, but not for &lt;code&gt;&amp;amp;str&lt;/code&gt;.</source>
          <target state="translated">パターンが逆検索を許可し、順/逆検索が同じ要素を生成する場合、返されるイテレーターは&lt;a href=&quot;iter/trait.doubleendediterator&quot;&gt; &lt;code&gt;DoubleEndedIterator&lt;/code&gt; に&lt;/a&gt;なります。これは、たとえば&lt;a href=&quot;primitive.char&quot;&gt; &lt;code&gt;char&lt;/code&gt; &lt;/a&gt;には当てはまりますが、 &lt;code&gt;&amp;amp;str&lt;/code&gt; には当てはまりません。</target>
        </trans-unit>
        <trans-unit id="45e7ec844babb660dc32f9f713ab552f258e8f9a" translate="yes" xml:space="preserve">
          <source>The returned iterator will never return &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; and will also not yield the peer's &lt;a href=&quot;enum.socketaddr&quot;&gt;&lt;code&gt;SocketAddr&lt;/code&gt;&lt;/a&gt; structure. Iterating over it is equivalent to calling &lt;a href=&quot;#method.accept&quot;&gt;&lt;code&gt;accept&lt;/code&gt;&lt;/a&gt; in a loop.</source>
          <target state="translated">返された反復子は決して&lt;a href=&quot;../option/enum.option#variant.None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt;を返さず、ピアの&lt;a href=&quot;enum.socketaddr&quot;&gt; &lt;code&gt;SocketAddr&lt;/code&gt; &lt;/a&gt;構造も生成しません。これを反復することは、ループで&lt;a href=&quot;#method.accept&quot;&gt; &lt;code&gt;accept&lt;/code&gt; &lt;/a&gt;を呼び出すことと同じです。</target>
        </trans-unit>
        <trans-unit id="40daaaf435dcc6bfd52a2f60c0016a88fb0c4d52" translate="yes" xml:space="preserve">
          <source>The returned iterator will never return &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; and will also not yield the peer's &lt;a href=&quot;enum.socketaddr&quot;&gt;&lt;code&gt;SocketAddr&lt;/code&gt;&lt;/a&gt; structure. Iterating over it is equivalent to calling &lt;a href=&quot;struct.tcplistener#method.accept&quot;&gt;&lt;code&gt;TcpListener::accept&lt;/code&gt;&lt;/a&gt; in a loop.</source>
          <target state="translated">返されたイテレータは&lt;a href=&quot;../option/enum.option#variant.None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt;を返すことはなく、ピアの&lt;a href=&quot;enum.socketaddr&quot;&gt; &lt;code&gt;SocketAddr&lt;/code&gt; &lt;/a&gt;構造体も生成しません。それを繰り返すことは、ループで&lt;a href=&quot;struct.tcplistener#method.accept&quot;&gt; &lt;code&gt;TcpListener::accept&lt;/code&gt; &lt;/a&gt;を呼び出すことと同じです。</target>
        </trans-unit>
        <trans-unit id="3cacc276ab85a92453bcb875fe7d5c79fd6233ed" translate="yes" xml:space="preserve">
          <source>The returned iterator will not be double ended, because it is not efficient to support.</source>
          <target state="translated">返されたイテレータは、サポートするのは効率的ではないので、ダブルエンドにはなりません。</target>
        </trans-unit>
        <trans-unit id="6626efd84bc65ae6d8cabe4bc5b2e309e23cd9ee" translate="yes" xml:space="preserve">
          <source>The returned iterator will panic during iteration if any argument to the process is not valid unicode. If this is not desired, use the &lt;a href=&quot;fn.args_os&quot;&gt;&lt;code&gt;args_os&lt;/code&gt;&lt;/a&gt; function instead.</source>
          <target state="translated">プロセスへの引数が有効なUnicodeではない場合、返される反復子は反復中にパニックになります。これが望ましくない場合は、代わりに&lt;a href=&quot;fn.args_os&quot;&gt; &lt;code&gt;args_os&lt;/code&gt; &lt;/a&gt;関数を使用してください。</target>
        </trans-unit>
        <trans-unit id="48642a85c9b9785eaffc2d69f306f5a44a684795" translate="yes" xml:space="preserve">
          <source>The returned iterator yields only the &lt;code&gt;value&lt;/code&gt;s for which the supplied closure returns &lt;code&gt;Some(value)&lt;/code&gt;.</source>
          <target state="translated">返されたイテレータは、指定されたクロージャが &lt;code&gt;Some(value)&lt;/code&gt; を返す &lt;code&gt;value&lt;/code&gt; sのみを生成します。</target>
        </trans-unit>
        <trans-unit id="8c4abf6a88076e830a1096ad48a0fcbdcd010f5d" translate="yes" xml:space="preserve">
          <source>The returned lifetime is not guaranteed to be the actual lifetime of &lt;code&gt;ptr&lt;/code&gt;.</source>
          <target state="translated">返される有効期間は、 &lt;code&gt;ptr&lt;/code&gt; の実際の有効期間であるとは限りません。</target>
        </trans-unit>
        <trans-unit id="dd646ddea405b753233bb6eb50b8340613c5b51f" translate="yes" xml:space="preserve">
          <source>The returned listener is ready for accepting connections.</source>
          <target state="translated">返されたリスナーは、接続を受け入れる準備ができています。</target>
        </trans-unit>
        <trans-unit id="32a2e5d176a9d291f17213749b86ae928f9a79fd" translate="yes" xml:space="preserve">
          <source>The returned name refers to a source path on the compiling system, but it isn't valid to represent this directly as a &lt;code&gt;&amp;amp;Path&lt;/code&gt;. The compiled code may run on a different system with a different &lt;code&gt;Path&lt;/code&gt; implementation than the system providing the contents and this library does not currently have a different &quot;host path&quot; type.</source>
          <target state="translated">返される名前は、コンパイルシステム上のソースパスを参照していますが、これを &lt;code&gt;&amp;amp;Path&lt;/code&gt; として直接表すことは無効です。コンパイルされたコードは、コンテンツを提供するシステムとは異なる &lt;code&gt;Path&lt;/code&gt; 実装を持つ異なるシステムで実行される可能性があり、このライブラリには現在、異なる「ホストパス」タイプがありません。</target>
        </trans-unit>
        <trans-unit id="bd3776d88d1ca8845ec6b1038a3cef52ddd6c1ee" translate="yes" xml:space="preserve">
          <source>The returned object can be used for error recovery, such as re-inspecting the buffer.</source>
          <target state="translated">返されたオブジェクトは、バッファの再検査などのエラー回復に使用することができます。</target>
        </trans-unit>
        <trans-unit id="d094ca8efdcd1c477cd38db568c96ab96a8083f1" translate="yes" xml:space="preserve">
          <source>The returned pointer is read-only; writing to it (including passing it to C code that writes to it) causes undefined behavior.</source>
          <target state="translated">返されるポインタは読み取り専用で、これに書き込む(これを書き込むCコードに渡すことも含む)と未定義の動作になります。</target>
        </trans-unit>
        <trans-unit id="9b9b68320305244b712b6eba3fb78b4a32d8f345" translate="yes" xml:space="preserve">
          <source>The returned pointer will be valid for as long as &lt;code&gt;self&lt;/code&gt; is, and points to a contiguous region of memory terminated with a 0 byte to represent the end of the string.</source>
          <target state="translated">返されたポインタは、 &lt;code&gt;self&lt;/code&gt; が有効である限り有効であり、0バイトで終了する連続したメモリ領域を指し、文字列の終わりを表します。</target>
        </trans-unit>
        <trans-unit id="d1d3044eae78ae415d38e3ebb8ef901b44a28df4" translate="yes" xml:space="preserve">
          <source>The returned range is half-open, which means that the end pointer points &lt;em&gt;one past&lt;/em&gt; the last element of the slice. This way, an empty slice is represented by two equal pointers, and the difference between the two pointers represents the size of the slice.</source>
          <target state="translated">返される範囲はハーフオープンです。これは、エンドポインタがスライスの最後の要素の&lt;em&gt;1つ&lt;/em&gt;先を指していることを意味します。このように、空のスライスは2つの等しいポインターで表され、2つのポインターの差はスライスのサイズを表します。</target>
        </trans-unit>
        <trans-unit id="1c27af8743c2ff7ed690feb622313cb681b2d0e2" translate="yes" xml:space="preserve">
          <source>The returned slice can be used to fill the vector with data (e.g. by reading from a file) before marking the data as initialized using the &lt;a href=&quot;struct.vec#method.set_len&quot;&gt;&lt;code&gt;set_len&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">返されたスライスを使用して、&lt;a href=&quot;struct.vec#method.set_len&quot;&gt; &lt;code&gt;set_len&lt;/code&gt; &lt;/a&gt;メソッドを使用してデータを初期化済みとしてマークする前に、（ファイルから読み取るなどして）ベクトルをデータで埋めることができます。</target>
        </trans-unit>
        <trans-unit id="bf0c4a80af7569dc2827892f37e1cf7abb925f27" translate="yes" xml:space="preserve">
          <source>The returned slice does &lt;strong&gt;not&lt;/strong&gt; contain the trailing nul terminator, and it is guaranteed to not have any interior nul bytes. If you need the nul terminator, use &lt;a href=&quot;#method.as_bytes_with_nul&quot;&gt;&lt;code&gt;as_bytes_with_nul&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">返されたスライスはない&lt;strong&gt;ではない&lt;/strong&gt;末尾のNULターミネータを含み、どんなインテリアNULバイトを持っていないことが保証されます。nulターミネータが必要な場合は、代わりに&lt;a href=&quot;#method.as_bytes_with_nul&quot;&gt; &lt;code&gt;as_bytes_with_nul&lt;/code&gt; &lt;/a&gt;を使用してください。</target>
        </trans-unit>
        <trans-unit id="0a368474e9b2e8c2f52646dd2d7918f986464f59" translate="yes" xml:space="preserve">
          <source>The returned slice does &lt;strong&gt;not&lt;/strong&gt; contain the trailing nul terminator, and it is guaranteed to not have any interior nul bytes. If you need the nul terminator, use &lt;a href=&quot;struct.cstring#method.as_bytes_with_nul&quot;&gt;&lt;code&gt;CString::as_bytes_with_nul&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">返されたスライスはない&lt;strong&gt;ではない&lt;/strong&gt;末尾のNULターミネータを含み、どんなインテリアNULバイトを持っていないことが保証されます。nulターミネータが必要な場合は、代わりに&lt;a href=&quot;struct.cstring#method.as_bytes_with_nul&quot;&gt; &lt;code&gt;CString::as_bytes_with_nul&lt;/code&gt; &lt;/a&gt;使用してください。</target>
        </trans-unit>
        <trans-unit id="23c2a4410e35e072d95d91733db13ddd5bf58ad1" translate="yes" xml:space="preserve">
          <source>The returned slice will &lt;strong&gt;not&lt;/strong&gt; contain the trailing nul terminator that this C string has.</source>
          <target state="translated">返されるスライスには、このC文字列が持つ末尾のヌルターミネータ&lt;strong&gt;は&lt;/strong&gt;含まれ&lt;strong&gt;ません&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="a46b9c2f552385dbbfeb1cece6cdbcca5271f43e" translate="yes" xml:space="preserve">
          <source>The returned string must not be considered to be a unique identifier of a type as multiple types may map to the same type name. Similarly, there is no guarantee that all parts of a type will appear in the returned string: for example, lifetime specifiers are currently not included. In addition, the output may change between versions of the compiler.</source>
          <target state="translated">複数の型が同じ型名にマッピングされる可能性があるため、返される文字列は型の一意の識別子と考えてはいけません。同様に、型のすべての部分が返される文字列に含まれるという保証はありません:例えば、寿命指定子は現在のところ含まれていません。さらに、コンパイラのバージョンによって出力が変わる可能性があります。</target>
        </trans-unit>
        <trans-unit id="ca6695d62fb3138a05ebea6941a15916ea38fd70" translate="yes" xml:space="preserve">
          <source>The returned type after indexing.</source>
          <target state="translated">インデックスを作成した後に返される型。</target>
        </trans-unit>
        <trans-unit id="323e9e5f7457b4d404421a53102d137f9784ffb2" translate="yes" xml:space="preserve">
          <source>The returned type after the call operator is used.</source>
          <target state="translated">呼び出しオペレータを使用した後の戻り値の型です。</target>
        </trans-unit>
        <trans-unit id="2d5978ed3eb5e45dd0ed7362549dedf897ab386a" translate="yes" xml:space="preserve">
          <source>The returned type implements &lt;a href=&quot;../iter/trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt; where the &lt;code&gt;Item&lt;/code&gt; is &lt;a href=&quot;../result/enum.result&quot;&gt;&lt;code&gt;Result&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;a href=&quot;../primitive.u8&quot;&gt;&lt;code&gt;u8&lt;/code&gt;&lt;/a&gt;&lt;code&gt;, &lt;/code&gt;&lt;a href=&quot;struct.error&quot;&gt;&lt;code&gt;io::Error&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;. The yielded item is &lt;a href=&quot;../result/enum.result#variant.Ok&quot;&gt;&lt;code&gt;Ok&lt;/code&gt;&lt;/a&gt; if a byte was successfully read and &lt;a href=&quot;../result/enum.result#variant.Err&quot;&gt;&lt;code&gt;Err&lt;/code&gt;&lt;/a&gt; otherwise. EOF is mapped to returning &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; from this iterator.</source>
          <target state="translated">返されるタイプは、 &lt;code&gt;Item&lt;/code&gt; が&lt;a href=&quot;../result/enum.result&quot;&gt; &lt;code&gt;Result&lt;/code&gt; &lt;/a&gt; &lt;code&gt;&amp;lt;&lt;/code&gt; &lt;a href=&quot;../primitive.u8&quot;&gt; &lt;code&gt;u8&lt;/code&gt; &lt;/a&gt; &lt;code&gt;, &lt;/code&gt; &lt;a href=&quot;struct.error&quot;&gt; &lt;code&gt;io::Error&lt;/code&gt; &lt;/a&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; である&lt;a href=&quot;../iter/trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt;実装します。生成されたアイテムは、バイトが正常に読み取られた場合は&lt;a href=&quot;../result/enum.result#variant.Ok&quot;&gt; &lt;code&gt;Ok&lt;/code&gt; &lt;/a&gt;、それ以外の場合は&lt;a href=&quot;../result/enum.result#variant.Err&quot;&gt; &lt;code&gt;Err&lt;/code&gt; &lt;/a&gt;です。EOFは、このイテレータから&lt;a href=&quot;../option/enum.option#variant.None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt;を返すようにマップされています。</target>
        </trans-unit>
        <trans-unit id="94490bb5f034be81aa72ad51da07b198637a8c28" translate="yes" xml:space="preserve">
          <source>The returned type implements &lt;a href=&quot;../iter/trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt; where the &lt;code&gt;Item&lt;/code&gt; is &lt;a href=&quot;../result/enum.result&quot;&gt;&lt;code&gt;Result&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;a href=&quot;https://doc.rust-lang.org/nightly/std/primitive.u8.html&quot;&gt;&lt;code&gt;u8&lt;/code&gt;&lt;/a&gt;&lt;code&gt;, &lt;/code&gt;&lt;a href=&quot;struct.error&quot;&gt;&lt;code&gt;io::Error&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;. The yielded item is &lt;a href=&quot;../result/enum.result#variant.Ok&quot;&gt;&lt;code&gt;Ok&lt;/code&gt;&lt;/a&gt; if a byte was successfully read and &lt;a href=&quot;../result/enum.result#variant.Err&quot;&gt;&lt;code&gt;Err&lt;/code&gt;&lt;/a&gt; otherwise. EOF is mapped to returning &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; from this iterator.</source>
          <target state="translated">返される型は、 &lt;code&gt;Item&lt;/code&gt; が&lt;a href=&quot;../result/enum.result&quot;&gt; &lt;code&gt;Result&lt;/code&gt; &lt;/a&gt; &lt;code&gt;&amp;lt;&lt;/code&gt; &lt;a href=&quot;https://doc.rust-lang.org/nightly/std/primitive.u8.html&quot;&gt; &lt;code&gt;u8&lt;/code&gt; &lt;/a&gt; &lt;code&gt;, &lt;/code&gt; &lt;a href=&quot;struct.error&quot;&gt; &lt;code&gt;io::Error&lt;/code&gt; &lt;/a&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; である&lt;a href=&quot;../iter/trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; を&lt;/a&gt;実装します。生成されたアイテムは、バイトが正常に読み取られた場合は&lt;a href=&quot;../result/enum.result#variant.Ok&quot;&gt; &lt;code&gt;Ok&lt;/code&gt; &lt;/a&gt;、それ以外の場合は&lt;a href=&quot;../result/enum.result#variant.Err&quot;&gt; &lt;code&gt;Err&lt;/code&gt; &lt;/a&gt;です。EOFは、このイテレータから&lt;a href=&quot;../option/enum.option#variant.None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt;を返すようにマップされています。</target>
        </trans-unit>
        <trans-unit id="a0b4fa361f895a3f7a940a0df4cc75d5065e98e6" translate="yes" xml:space="preserve">
          <source>The returned value corresponds to the &lt;code&gt;atime&lt;/code&gt; field of &lt;code&gt;stat&lt;/code&gt; on Unix platforms and the &lt;code&gt;ftLastAccessTime&lt;/code&gt; field on Windows platforms.</source>
          <target state="translated">戻り値は、Unixプラットフォームでは &lt;code&gt;stat&lt;/code&gt; の &lt;code&gt;atime&lt;/code&gt; フィールドに、Windowsプラットフォームでは &lt;code&gt;ftLastAccessTime&lt;/code&gt; フィールドに対応します。</target>
        </trans-unit>
        <trans-unit id="ab7615b505b03838f921f8936a1701e974958831" translate="yes" xml:space="preserve">
          <source>The returned value corresponds to the &lt;code&gt;birthtime&lt;/code&gt; field of &lt;code&gt;stat&lt;/code&gt; on Unix platforms and the &lt;code&gt;ftCreationTime&lt;/code&gt; field on Windows platforms.</source>
          <target state="translated">戻り値は、Unixプラットフォームでは &lt;code&gt;stat&lt;/code&gt; の &lt;code&gt;birthtime&lt;/code&gt; フィールドに、Windowsプラットフォームでは &lt;code&gt;ftCreationTime&lt;/code&gt; フィールドに対応しています。</target>
        </trans-unit>
        <trans-unit id="2eef349b822dea9863943a97049788d8df72cce1" translate="yes" xml:space="preserve">
          <source>The returned value corresponds to the &lt;code&gt;btime&lt;/code&gt; field of &lt;code&gt;statx&lt;/code&gt; on Linux kernel starting from to 4.11, the &lt;code&gt;birthtime&lt;/code&gt; field of &lt;code&gt;stat&lt;/code&gt; on other Unix platforms, and the &lt;code&gt;ftCreationTime&lt;/code&gt; field on Windows platforms.</source>
          <target state="translated">返された値が対応する &lt;code&gt;btime&lt;/code&gt; 分野 &lt;code&gt;statx&lt;/code&gt; 4.11から始まるLinuxカーネル、上 &lt;code&gt;birthtime&lt;/code&gt; の分野 &lt;code&gt;stat&lt;/code&gt; 他のUNIXプラットフォームでは、と &lt;code&gt;ftCreationTime&lt;/code&gt; のWindowsプラットフォーム上のフィールド。</target>
        </trans-unit>
        <trans-unit id="c5896159de75927b2d1b622cfd587f254e9fed43" translate="yes" xml:space="preserve">
          <source>The returned value corresponds to the &lt;code&gt;mtime&lt;/code&gt; field of &lt;code&gt;stat&lt;/code&gt; on Unix platforms and the &lt;code&gt;ftLastWriteTime&lt;/code&gt; field on Windows platforms.</source>
          <target state="translated">戻り値は、Unixプラットフォームでは &lt;code&gt;stat&lt;/code&gt; の &lt;code&gt;mtime&lt;/code&gt; フィールドに、Windowsプラットフォームでは &lt;code&gt;ftLastWriteTime&lt;/code&gt; フィールドに対応します。</target>
        </trans-unit>
        <trans-unit id="a0ea9c14c32dc6d6e0d323b13279abc6935b1d15" translate="yes" xml:space="preserve">
          <source>The returned value does include the fractional (nanosecond) part of the duration.</source>
          <target state="translated">返される値には、持続時間の小数(ナノ秒)部分が含まれます。</target>
        </trans-unit>
        <trans-unit id="ff15d0950ff1afde3f0762acc64a9f002a6a04c1" translate="yes" xml:space="preserve">
          <source>The returned value does not have meaning for directories.</source>
          <target state="translated">返された値は、ディレクトリに対しては意味を持ちません。</target>
        </trans-unit>
        <trans-unit id="e8c08d63d79b2a138a0f12bb7a91ea3ec23dcec7" translate="yes" xml:space="preserve">
          <source>The returned value does not include the fractional (nanosecond) part of the duration, which can be obtained using &lt;a href=&quot;#method.subsec_nanos&quot;&gt;&lt;code&gt;subsec_nanos&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">戻り値には、期間の小数部分（ナノ秒）は含まれません。これは、&lt;a href=&quot;#method.subsec_nanos&quot;&gt; &lt;code&gt;subsec_nanos&lt;/code&gt; &lt;/a&gt;を使用して取得できます。</target>
        </trans-unit>
        <trans-unit id="1bfa4d7247e116de4261b1e09435dc9dcadacc45" translate="yes" xml:space="preserve">
          <source>The returned value does not include the fractional (nanosecond) part of the duration, which can be obtained using &lt;a href=&quot;struct.duration#method.subsec_nanos&quot;&gt;&lt;code&gt;subsec_nanos&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">戻り値には、&lt;a href=&quot;struct.duration#method.subsec_nanos&quot;&gt; &lt;code&gt;subsec_nanos&lt;/code&gt; &lt;/a&gt;を使用して取得できる期間の小数部（ナノ秒）は含まれません。</target>
        </trans-unit>
        <trans-unit id="1e5135e5751b93b5d235f37608301c3018208e63" translate="yes" xml:space="preserve">
          <source>The returned value is the number of &lt;strong&gt;elements&lt;/strong&gt;, not the number of bytes.</source>
          <target state="translated">戻り値は&lt;strong&gt;要素&lt;/strong&gt;の数であり、バイト数ではありません。</target>
        </trans-unit>
        <trans-unit id="70d2d5505f46c3741e892512e8371427a53745d7" translate="yes" xml:space="preserve">
          <source>The right shift assignment operator &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;.</source>
          <target state="translated">右シフト代入演算子 &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e00fa6358174afd137529285f589695abe7555ab" translate="yes" xml:space="preserve">
          <source>The right shift operator &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;. Note that because this trait is implemented for all integer types with multiple right-hand-side types, Rust's type checker has special handling for &lt;code&gt;_ &amp;gt;&amp;gt; _&lt;/code&gt;, setting the result type for integer operations to the type of the left-hand-side operand. This means that though &lt;code&gt;a &amp;gt;&amp;gt; b&lt;/code&gt; and &lt;code&gt;a.shr(b)&lt;/code&gt; are one and the same from an evaluation standpoint, they are different when it comes to type inference.</source>
          <target state="translated">右シフト演算子 &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; 。この特性は複数の右側の型を持つすべての整数型に実装されているため、Rustの型チェッカーは &lt;code&gt;_ &amp;gt;&amp;gt; _&lt;/code&gt; に対して特別な処理を行い、整数演算の結果の型を左側のオペランドの型に設定します。 。つまり、 &lt;code&gt;a &amp;gt;&amp;gt; b&lt;/code&gt; と &lt;code&gt;a.shr(b)&lt;/code&gt; は、評価の観点からはまったく同じものですが、型推論に関しては異なります。</target>
        </trans-unit>
        <trans-unit id="4bed85e5cf48df182fbdc5f50e1999ffc9d50cbb" translate="yes" xml:space="preserve">
          <source>The right way to suppress the warning is to actually write error handling, but because you just want to crash this program when a problem occurs, you can use &lt;code&gt;expect&lt;/code&gt;. You&amp;rsquo;ll learn about recovering from errors in Chapter 9.</source>
          <target state="translated">警告を抑制する正しい方法は、実際にエラー処理を記述することですが、問題が発生したときにこのプログラムをクラッシュさせたいだけなので、 &lt;code&gt;expect&lt;/code&gt; を使用できます。エラーからの回復については、第9章で学習します。</target>
        </trans-unit>
        <trans-unit id="93b14b29a7aed966fc23a390a9832d3b882cc69b" translate="yes" xml:space="preserve">
          <source>The root directory component, appears after any prefix and before anything else.</source>
          <target state="translated">ルートディレクトリのコンポーネントは、任意の接頭辞の後に表示され、他の何かの前に表示されます。</target>
        </trans-unit>
        <trans-unit id="a168d72d668df499616b725b5ca80c1ff007a04a" translate="yes" xml:space="preserve">
          <source>The rules for &lt;a href=&quot;../special-types-and-traits#send&quot;&gt;&lt;code&gt;Send&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../special-types-and-traits#sync&quot;&gt;&lt;code&gt;Sync&lt;/code&gt;&lt;/a&gt; match those for normal struct types, while &lt;a href=&quot;../special-types-and-traits#clone&quot;&gt;&lt;code&gt;Clone&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../special-types-and-traits#copy&quot;&gt;&lt;code&gt;Copy&lt;/code&gt;&lt;/a&gt; behave as if &lt;a href=&quot;../attributes/derive&quot;&gt;derived&lt;/a&gt;. For &lt;a href=&quot;../special-types-and-traits#clone&quot;&gt;&lt;code&gt;Clone&lt;/code&gt;&lt;/a&gt;, the order of cloning of the captured variables is left unspecified.</source>
          <target state="translated">&lt;a href=&quot;../special-types-and-traits#send&quot;&gt; &lt;code&gt;Send&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;../special-types-and-traits#sync&quot;&gt; &lt;code&gt;Sync&lt;/code&gt; &lt;/a&gt;のルールは通常の構造体タイプのルールと一致しますが、&lt;a href=&quot;../special-types-and-traits#clone&quot;&gt; &lt;code&gt;Clone&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;../special-types-and-traits#copy&quot;&gt; &lt;code&gt;Copy&lt;/code&gt; &lt;/a&gt;&lt;a href=&quot;../attributes/derive&quot;&gt;派生&lt;/a&gt;したかのように動作します。以下のために&lt;a href=&quot;../special-types-and-traits#clone&quot;&gt; &lt;code&gt;Clone&lt;/code&gt; &lt;/a&gt;、捕捉された変数のクローニングの順序が指定されていないままです。</target>
        </trans-unit>
        <trans-unit id="3563595879dbbd21c6c2906f7bd54a9b3679529d" translate="yes" xml:space="preserve">
          <source>The rust compiler cannot link to an external library if you don't give it its name. Example:</source>
          <target state="translated">外部ライブラリに名前を付けないと、rustコンパイラは外部ライブラリにリンクすることができません。例</target>
        </trans-unit>
        <trans-unit id="54065002f88e1cb544dc442e2b3686e62225bf94" translate="yes" xml:space="preserve">
          <source>The rust compiler maintains for each target a blacklist of ABIs unsupported on that target. If an ABI is present in such a list this usually means that the target / ABI combination is currently unsupported by llvm.</source>
          <target state="translated">rust コンパイラは各ターゲットに対して、そのターゲットでサポートされていない ABI のブラックリストを保持しています。このようなリストに ABI がある場合、これは通常、ターゲットと ABI の組み合わせが llvm によってサポートされていないことを意味します。</target>
        </trans-unit>
        <trans-unit id="e602506551cf00543c3919704a07e8c114c13f33" translate="yes" xml:space="preserve">
          <source>The rust compiler maintains for each target a list of unsupported ABIs on that target. If an ABI is present in such a list this usually means that the target / ABI combination is currently unsupported by llvm.</source>
          <target state="translated">rust コンパイラは各ターゲットに対して、そのターゲット上のサポートされていない ABI のリストを保持しています。このようなリストに ABI がある場合、これは通常、ターゲットと ABI の組み合わせが llvm によってサポートされていないことを意味します。</target>
        </trans-unit>
        <trans-unit id="d8dcfff8659995d9c806c4ff5bfe72343be6d124" translate="yes" xml:space="preserve">
          <source>The rustfix tool is included with Rust installations and can automatically fix some compiler warnings. If you&amp;rsquo;ve written code in Rust, you&amp;rsquo;ve probably seen compiler warnings. For example, consider this code:</source>
          <target state="translated">rustfixツールはRustインストールに含まれており、コンパイラの警告を自動的に修正できます。Rustでコードを記述したことがある場合、おそらくコンパイラの警告を見たことがあるでしょう。たとえば、次のコードを考えてみます。</target>
        </trans-unit>
        <trans-unit id="d95e676c8653714db7acc846f5781f129f187994" translate="yes" xml:space="preserve">
          <source>The safety and conciseness of &lt;code&gt;for&lt;/code&gt; loops make them the most commonly used loop construct in Rust. Even in situations in which you want to run some code a certain number of times, as in the countdown example that used a &lt;code&gt;while&lt;/code&gt; loop in Listing 3-3, most Rustaceans would use a &lt;code&gt;for&lt;/code&gt; loop. The way to do that would be to use a &lt;code&gt;Range&lt;/code&gt;, which is a type provided by the standard library that generates all numbers in sequence starting from one number and ending before another number.</source>
          <target state="translated">&lt;code&gt;for&lt;/code&gt; ループの安全性と簡潔さにより、それらはRustで最も一般的に使用されるループ構造になります。コードリスト3-3の &lt;code&gt;while&lt;/code&gt; ループを使用したカウントダウンの例のように、コードを特定の回数実行したい場合でも、ほとんどのルスタシア人は &lt;code&gt;for&lt;/code&gt; ループを使用します。これを行う方法は、1つの数値から始まり別の数値の前に終わるすべての数値を順番に生成する標準ライブラリによって提供されるタイプである &lt;code&gt;Range&lt;/code&gt; を使用することです。</target>
        </trans-unit>
        <trans-unit id="8de5417b2f4455bae199197d09ad86c5d8b15755" translate="yes" xml:space="preserve">
          <source>The safety conditions are described in the &lt;a href=&quot;index#memory-layout&quot;&gt;memory layout&lt;/a&gt; section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34c5f02c44747e09b58d1ec500165079e9867619" translate="yes" xml:space="preserve">
          <source>The same applies to transmutes to &lt;code&gt;*mut fn()&lt;/code&gt;, which were observed in practice. Note though that use of this type is generally incorrect. The intention is typically to describe a function pointer, but just &lt;code&gt;fn()&lt;/code&gt; alone suffices for that. &lt;code&gt;*mut fn()&lt;/code&gt; is a pointer to a fn pointer. (Since these values are typically just passed to C code, however, this rarely makes a difference in practice.)</source>
          <target state="translated">同じことが、実際に観察された &lt;code&gt;*mut fn()&lt;/code&gt; への変換にも当てはまります。ただし、このタイプの使用は一般に正しくないことに注意してください。意図は通常、関数ポインターを記述することですが、 &lt;code&gt;fn()&lt;/code&gt; だけで十分です。 &lt;code&gt;*mut fn()&lt;/code&gt; はfnポインターへのポインターです。（ただし、これらの値は通常Cコードに渡されるだけなので、実際にはほとんど違いがありません。）</target>
        </trans-unit>
        <trans-unit id="a7f4b342720ddcec9a49dfb2ca6daf016843320d" translate="yes" xml:space="preserve">
          <source>The same as &lt;a href=&quot;../../../iter/trait.iterator#method.fold&quot;&gt;&lt;code&gt;fold()&lt;/code&gt;&lt;/a&gt;, but uses the first element in the iterator as the initial value, folding every subsequent element into it. If the iterator is empty, return &lt;a href=&quot;../../../option/enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt;; otherwise, return the result of the fold. &lt;a href=&quot;../../../iter/trait.iterator#method.fold_first&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;../../../iter/trait.iterator#method.fold&quot;&gt; &lt;code&gt;fold()&lt;/code&gt; &lt;/a&gt;と同じですが、イテレータの最初の要素を初期値として使用し、後続のすべての要素をフォールドします。イテレータが空の場合は、&lt;a href=&quot;../../../option/enum.option#variant.None&quot;&gt; &lt;code&gt;None&lt;/code&gt; を&lt;/a&gt;返します。それ以外の場合は、折り畳みの結果を返します。&lt;a href=&quot;../../../iter/trait.iterator#method.fold_first&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c676ce454b9f3ef8b4d42559af1943bf2b7913d9" translate="yes" xml:space="preserve">
          <source>The same as &lt;a href=&quot;../../iter/trait.iterator#method.fold&quot;&gt;&lt;code&gt;fold()&lt;/code&gt;&lt;/a&gt;, but uses the first element in the iterator as the initial value, folding every subsequent element into it. If the iterator is empty, return &lt;a href=&quot;../../option/enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt;; otherwise, return the result of the fold. &lt;a href=&quot;../../iter/trait.iterator#method.fold_first&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;../../iter/trait.iterator#method.fold&quot;&gt; &lt;code&gt;fold()&lt;/code&gt; &lt;/a&gt;と同じですが、イテレータの最初の要素を初期値として使用し、後続のすべての要素をフォールドします。イテレータが空の場合は、&lt;a href=&quot;../../option/enum.option#variant.None&quot;&gt; &lt;code&gt;None&lt;/code&gt; を&lt;/a&gt;返します。それ以外の場合は、折り畳みの結果を返します。&lt;a href=&quot;../../iter/trait.iterator#method.fold_first&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="fb7e4f0db03c726bc5bd7452fa0f56591b66e33d" translate="yes" xml:space="preserve">
          <source>The same as &lt;a href=&quot;../iter/trait.iterator#method.fold&quot;&gt;&lt;code&gt;fold()&lt;/code&gt;&lt;/a&gt;, but uses the first element in the iterator as the initial value, folding every subsequent element into it. If the iterator is empty, return &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt;; otherwise, return the result of the fold. &lt;a href=&quot;../iter/trait.iterator#method.fold_first&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;../iter/trait.iterator#method.fold&quot;&gt; &lt;code&gt;fold()&lt;/code&gt; &lt;/a&gt;と同じですが、イテレータの最初の要素を初期値として使用し、後続のすべての要素をフォールドします。イテレータが空の場合は、&lt;a href=&quot;../option/enum.option#variant.None&quot;&gt; &lt;code&gt;None&lt;/code&gt; を&lt;/a&gt;返します。それ以外の場合は、折り畳みの結果を返します。&lt;a href=&quot;../iter/trait.iterator#method.fold_first&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="dcf7a6ad9f8fb40e4ba7caca628efe6809216b4f" translate="yes" xml:space="preserve">
          <source>The same as &lt;a href=&quot;../iter/trait.iterator#method.fold&quot;&gt;&lt;code&gt;fold()&lt;/code&gt;&lt;/a&gt;, but uses the first element in the iterator as the initial value, folding every subsequent element into it. If the iterator is empty, return &lt;a href=&quot;enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt;; otherwise, return the result of the fold. &lt;a href=&quot;../iter/trait.iterator#method.fold_first&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;../iter/trait.iterator#method.fold&quot;&gt; &lt;code&gt;fold()&lt;/code&gt; &lt;/a&gt;と同じですが、イテレータの最初の要素を初期値として使用し、後続のすべての要素をフォールドします。イテレータが空の場合は、&lt;a href=&quot;enum.option#variant.None&quot;&gt; &lt;code&gt;None&lt;/code&gt; を&lt;/a&gt;返します。それ以外の場合は、折り畳みの結果を返します。&lt;a href=&quot;../iter/trait.iterator#method.fold_first&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f1ae9b3d116905ba91635f77fa80dd3badbdd424" translate="yes" xml:space="preserve">
          <source>The same as &lt;a href=&quot;iter/trait.iterator#method.fold&quot;&gt;&lt;code&gt;fold()&lt;/code&gt;&lt;/a&gt;, but uses the first element in the iterator as the initial value, folding every subsequent element into it. If the iterator is empty, return &lt;a href=&quot;option/enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt;; otherwise, return the result of the fold. &lt;a href=&quot;iter/trait.iterator#method.fold_first&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;iter/trait.iterator#method.fold&quot;&gt; &lt;code&gt;fold()&lt;/code&gt; &lt;/a&gt;と同じですが、イテレータの最初の要素を初期値として使用し、後続のすべての要素をフォールドします。イテレータが空の場合は、&lt;a href=&quot;option/enum.option#variant.None&quot;&gt; &lt;code&gt;None&lt;/code&gt; を&lt;/a&gt;返します。それ以外の場合は、折り畳みの結果を返します。&lt;a href=&quot;iter/trait.iterator#method.fold_first&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3f595892b4fea20450f05cddbe7763f0e003caa0" translate="yes" xml:space="preserve">
          <source>The same as &lt;a href=&quot;trait.iterator#method.fold&quot;&gt;&lt;code&gt;fold()&lt;/code&gt;&lt;/a&gt;, but uses the first element in the iterator as the initial value, folding every subsequent element into it. If the iterator is empty, return &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt;; otherwise, return the result of the fold.</source>
          <target state="translated">&lt;a href=&quot;trait.iterator#method.fold&quot;&gt; &lt;code&gt;fold()&lt;/code&gt; &lt;/a&gt;と同じですが、イテレータの最初の要素を初期値として使用し、後続のすべての要素をフォールドします。イテレータが空の場合は、&lt;a href=&quot;../option/enum.option#variant.None&quot;&gt; &lt;code&gt;None&lt;/code&gt; を&lt;/a&gt;返します。それ以外の場合は、折り畳みの結果を返します。</target>
        </trans-unit>
        <trans-unit id="f5b129096713d6e93f0f6771f5a02e553c2efcf3" translate="yes" xml:space="preserve">
          <source>The same as &lt;a href=&quot;trait.iterator#method.fold&quot;&gt;&lt;code&gt;fold()&lt;/code&gt;&lt;/a&gt;, but uses the first element in the iterator as the initial value, folding every subsequent element into it. If the iterator is empty, return &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt;; otherwise, return the result of the fold. &lt;a href=&quot;trait.iterator#method.fold_first&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;trait.iterator#method.fold&quot;&gt; &lt;code&gt;fold()&lt;/code&gt; &lt;/a&gt;と同じですが、イテレータの最初の要素を初期値として使用し、後続のすべての要素をフォールドします。イテレータが空の場合は、&lt;a href=&quot;../option/enum.option#variant.None&quot;&gt; &lt;code&gt;None&lt;/code&gt; を&lt;/a&gt;返します。それ以外の場合は、折り畳みの結果を返します。&lt;a href=&quot;trait.iterator#method.fold_first&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="902a2b25118315948a58ef98f0d17bd457899153" translate="yes" xml:space="preserve">
          <source>The same goes for doc comments:</source>
          <target state="translated">docのコメントも同様です。</target>
        </trans-unit>
        <trans-unit id="2e8159833047b3772ef09e1ff09bc6721b1345cc" translate="yes" xml:space="preserve">
          <source>The same restrictions of accessing the target of the pointer as with &lt;a href=&quot;struct.weak#method.as_ptr&quot;&gt;&lt;code&gt;as_ptr&lt;/code&gt;&lt;/a&gt; apply.</source>
          <target state="translated">&lt;a href=&quot;struct.weak#method.as_ptr&quot;&gt; &lt;code&gt;as_ptr&lt;/code&gt; の&lt;/a&gt;場合と同じように、ポインタのターゲットにアクセスする際の制限が適用されます。</target>
        </trans-unit>
        <trans-unit id="2bc57fcef5c1050ba1f9373a34844306a6911e2e" translate="yes" xml:space="preserve">
          <source>The same restrictions of accessing the target of the pointer as with &lt;a href=&quot;struct.weak#method.as_raw&quot;&gt;&lt;code&gt;as_raw&lt;/code&gt;&lt;/a&gt; apply.</source>
          <target state="translated">&lt;a href=&quot;struct.weak#method.as_raw&quot;&gt; &lt;code&gt;as_raw&lt;/code&gt; &lt;/a&gt;と同じように、ポインターのターゲットにアクセスするのと同じ制限が適用されます。</target>
        </trans-unit>
        <trans-unit id="e53c2cdb1077121198b1a8746e267d3b3a805b0e" translate="yes" xml:space="preserve">
          <source>The scope in which the variable &lt;code&gt;s&lt;/code&gt; is valid is the same as any function parameter&amp;rsquo;s scope, but we don&amp;rsquo;t drop what the reference points to when it goes out of scope because we don&amp;rsquo;t have ownership. When functions have references as parameters instead of the actual values, we won&amp;rsquo;t need to return the values in order to give back ownership, because we never had ownership.</source>
          <target state="translated">変数 &lt;code&gt;s&lt;/code&gt; が有効なスコープは、関数パラメーターのスコープと同じですが、所有権がないため、スコープから外れたときに参照が指すものを削除しません。関数が実際の値の代わりにパラメーターとして参照を持つ場合、所有権がなかったため、所有権を返すために値を返す必要はありません。</target>
        </trans-unit>
        <trans-unit id="2c0f9db762db77543e23786689d772ed7e180cf6" translate="yes" xml:space="preserve">
          <source>The scopes of the immutable references &lt;code&gt;r1&lt;/code&gt; and &lt;code&gt;r2&lt;/code&gt; end after the &lt;code&gt;println!&lt;/code&gt; where they are last used, which is before the mutable reference &lt;code&gt;r3&lt;/code&gt; is created. These scopes don&amp;rsquo;t overlap, so this code is allowed.</source>
          <target state="translated">不変参照 &lt;code&gt;r1&lt;/code&gt; および &lt;code&gt;r2&lt;/code&gt; のスコープは、 &lt;code&gt;println!&lt;/code&gt; の後に終了します。それらが最後に使用された場所。これは、可変参照 &lt;code&gt;r3&lt;/code&gt; が作成される前です。これらのスコープは重複しないため、このコードは許可されます。</target>
        </trans-unit>
        <trans-unit id="547c47e37f57601f738482d42256219a9633dd7e" translate="yes" xml:space="preserve">
          <source>The search path to be used may be controlled by setting the &lt;code&gt;PATH&lt;/code&gt; environment variable on the Command, but this has some implementation limitations on Windows (see issue #37519).</source>
          <target state="translated">使用する検索パスは、コマンドに &lt;code&gt;PATH&lt;/code&gt; 環境変数を設定することで制御できますが、これにはWindowsでの実装上の制限があります（問題＃37519を参照）。</target>
        </trans-unit>
        <trans-unit id="3a555019f8dcc01c39b7fc4a4df1fa78e901c698" translate="yes" xml:space="preserve">
          <source>The second case example is a bit particular: the main function must always have this definition:</source>
          <target state="translated">2 番目の例は少し特殊です:メイン関数は常にこの定義を持っていなければなりません。</target>
        </trans-unit>
        <trans-unit id="02a1a4dab2732977e1598d466f79a0132530331a" translate="yes" xml:space="preserve">
          <source>The second form of macros is &lt;em&gt;procedural macros&lt;/em&gt;, which act more like functions (and are a type of procedure). Procedural macros accept some code as an input, operate on that code, and produce some code as an output rather than matching against patterns and replacing the code with other code as declarative macros do.</source>
          <target state="translated">マクロの2番目の形式は、&lt;em&gt;手続き型マクロ&lt;/em&gt;であり、関数のように機能します（手続きの一種です）。手続き型マクロは、一部のコードを入力として受け入れ、そのコードを操作して、パターンと照合して宣言型マクロのようにコードを他のコードに置き換えるのではなく、一部のコードを出力として生成します。</target>
        </trans-unit>
        <trans-unit id="014f5e70707fe70de5f920ceaf6bbf6f00b7acd7" translate="yes" xml:space="preserve">
          <source>The second half of the tuple that is returned is an &lt;a href=&quot;../option/enum.option&quot;&gt;&lt;code&gt;Option&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;a href=&quot;../primitive.usize&quot;&gt;&lt;code&gt;usize&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;. A &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; here means that either there is no known upper bound, or the upper bound is larger than &lt;a href=&quot;../primitive.usize&quot;&gt;&lt;code&gt;usize&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">返されるタプルの後半は&lt;a href=&quot;../option/enum.option&quot;&gt; &lt;code&gt;Option&lt;/code&gt; &lt;/a&gt; &lt;code&gt;&amp;lt;&lt;/code&gt; &lt;a href=&quot;../primitive.usize&quot;&gt; &lt;code&gt;usize&lt;/code&gt; &lt;/a&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; です。&lt;a href=&quot;../option/enum.option#variant.None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt;ここにありませんが知られているいずれかのことを意味は上限ない、または上よりも大きくなっているバインド&lt;a href=&quot;../primitive.usize&quot;&gt; &lt;code&gt;usize&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="4961749eb1f24345f8436cc7b35d0ebccb81384a" translate="yes" xml:space="preserve">
          <source>The second invariant says that a separated complex NT must use a separator token that is part of the predetermined follow set for the internal contents of the NT. This ensures that a legal macro definition will continue to parse an input fragment into the same delimited sequence of &lt;code&gt;tt ...&lt;/code&gt;'s, even as new syntactic forms are added to the language.</source>
          <target state="translated">2番目の不変条件は、分離された複雑なNTは、NTの内部コンテンツの事前に設定されたフォローセットの一部であるセパレータトークンを使用する必要があることを示しています。これにより、新しい構文形式が言語に追加されても、合法的なマクロ定義が入力フラグメントを &lt;code&gt;tt ...&lt;/code&gt; の同じ区切られたシーケンスに解析し続けることが保証されます。</target>
        </trans-unit>
        <trans-unit id="3069a4f51af6a3b6633b4d681ece722a85d63fa2" translate="yes" xml:space="preserve">
          <source>The second is mutable references. They can be created from &lt;code&gt;mut&lt;/code&gt; variables and must be unique: no other variables can have a mutable reference, nor a shared reference.</source>
          <target state="translated">2つ目は、変更可能な参照です。それらは &lt;code&gt;mut&lt;/code&gt; 変数から作成でき、一意である必要があります。他の変数が可変参照や共有参照を持つことはできません。</target>
        </trans-unit>
        <trans-unit id="3f2dca747a6f3fa79f2291ae843df5963e36bbc5" translate="yes" xml:space="preserve">
          <source>The second is that it is the offset in bytes between successive elements in an array with that item type.</source>
          <target state="translated">2つ目は、その項目型を持つ配列の連続する要素間のバイト単位のオフセットです。</target>
        </trans-unit>
        <trans-unit id="a1e02e9dcee081f5b8c19c27d767e65c0ff37f76" translate="yes" xml:space="preserve">
          <source>The second is to generally improve your knowledge of a facet of the language. In that case, just browse the table of contents until you see something you want to know more about, and just start reading. If a link looks interesting, click it, and read about that section.</source>
          <target state="translated">2つ目は、一般的に言語の一面に関する知識を向上させることです。その場合は、もっと知りたいことが見つかるまで目次を見て、読み始めてください。興味がありそうなリンクがあれば、それをクリックして、そのセクションについて読んでください。</target>
        </trans-unit>
        <trans-unit id="df5949936d6a2cd7eaf61fe27eb1fac54cf960fb" translate="yes" xml:space="preserve">
          <source>The second line that we added to the middle of the code prints the secret number. This is useful while we&amp;rsquo;re developing the program to be able to test it, but we&amp;rsquo;ll delete it from the final version. It&amp;rsquo;s not much of a game if the program prints the answer as soon as it starts!</source>
          <target state="translated">コードの中央に追加した2行目には、秘密の番号が出力されます。これは、プログラムをテストしてテストできるようにするときに役立ちますが、最終バージョンから削除します。プログラムが開始するとすぐに答えを出力するのは、それほど大したことではありません。</target>
        </trans-unit>
        <trans-unit id="c1f82d829df68033c418a80c29f6453df31bb3f7" translate="yes" xml:space="preserve">
          <source>The second operand of a &lt;a href=&quot;expressions/operator-expr#lazy-boolean-operators&quot;&gt;lazy boolean expression&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;expressions/operator-expr#lazy-boolean-operators&quot;&gt;怠惰なブール式&lt;/a&gt;の第2オペランド。</target>
        </trans-unit>
        <trans-unit id="57bb822113e197cd1e10145a43fbd748bc848a6a" translate="yes" xml:space="preserve">
          <source>The second problem with the current &lt;code&gt;Cacher&lt;/code&gt; implementation is that it only accepts closures that take one parameter of type &lt;code&gt;u32&lt;/code&gt; and return a &lt;code&gt;u32&lt;/code&gt;. We might want to cache the results of closures that take a string slice and return &lt;code&gt;usize&lt;/code&gt; values, for example. To fix this issue, try introducing more generic parameters to increase the flexibility of the &lt;code&gt;Cacher&lt;/code&gt; functionality.</source>
          <target state="translated">現在の第2の問題 &lt;code&gt;Cacher&lt;/code&gt; の実装は、それが唯一のタイプの一つのパラメータ取る閉鎖受け入れるということです &lt;code&gt;u32&lt;/code&gt; して返す &lt;code&gt;u32&lt;/code&gt; 。たとえば、文字列スライスを取り、 &lt;code&gt;usize&lt;/code&gt; 値を返すクロージャの結果をキャッシュしたい場合があります。この問題を修正するには、より一般的なパラメーターを導入して、 &lt;code&gt;Cacher&lt;/code&gt; 機能の柔軟性を高めてください。</target>
        </trans-unit>
        <trans-unit id="92462e612674a20cc7e3c63f701740ce5bea5c75" translate="yes" xml:space="preserve">
          <source>The second rule applies because there is exactly one input lifetime. The second rule specifies that the lifetime of the one input parameter gets assigned to the output lifetime, so the signature is now this:</source>
          <target state="translated">2番目の規則が適用されるのは、入力パラメータの寿命が正確に1つであるからです。2番目の規則は、1つの入力パラメータの寿命が出力の寿命に代入されることを指定しているので、シグネチャは次のようになります。</target>
        </trans-unit>
        <trans-unit id="66815e0776a29457690bd505c60d2e19937fa654" translate="yes" xml:space="preserve">
          <source>The second rule is if there is exactly one input lifetime parameter, that lifetime is assigned to all output lifetime parameters: &lt;code&gt;fn foo&amp;lt;'a&amp;gt;(x: &amp;amp;'a i32) -&amp;gt; &amp;amp;'a i32&lt;/code&gt;.</source>
          <target state="translated">2番目のルールは、入力存続期間パラメーターが1つだけある場合、その存続期間はすべての出力存続期間パラメーターに割り当てられます： &lt;code&gt;fn foo&amp;lt;'a&amp;gt;(x: &amp;amp;'a i32) -&amp;gt; &amp;amp;'a i32&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="aedd96f8435bb44ce30001804fbe27f5473ed0ee" translate="yes" xml:space="preserve">
          <source>The second time we call &lt;code&gt;add_to_waitlist&lt;/code&gt; in &lt;code&gt;eat_at_restaurant&lt;/code&gt;, we use a relative path. The path starts with &lt;code&gt;front_of_house&lt;/code&gt;, the name of the module defined at the same level of the module tree as &lt;code&gt;eat_at_restaurant&lt;/code&gt;. Here the filesystem equivalent would be using the path &lt;code&gt;front_of_house/hosting/add_to_waitlist&lt;/code&gt;. Starting with a name means that the path is relative.</source>
          <target state="translated">2回目に &lt;code&gt;add_to_waitlist&lt;/code&gt; で &lt;code&gt;eat_at_restaurant&lt;/code&gt; を呼び出すときは、相対パスを使用します。パスが始まる &lt;code&gt;front_of_house&lt;/code&gt; としてモジュール・ツリーの同じレベルで定義されたモジュールの名前、 &lt;code&gt;eat_at_restaurant&lt;/code&gt; 。ここで同等のファイルシステムは、パス &lt;code&gt;front_of_house/hosting/add_to_waitlist&lt;/code&gt; を使用します。名前で始まるということは、パスが相対パスであることを意味します。</target>
        </trans-unit>
        <trans-unit id="6719785aa3871b4c2a2d425aeb686279358fe018" translate="yes" xml:space="preserve">
          <source>The second trait important to the smart pointer pattern is &lt;code&gt;Drop&lt;/code&gt;, which lets you customize what happens when a value is about to go out of scope. You can provide an implementation for the &lt;code&gt;Drop&lt;/code&gt; trait on any type, and the code you specify can be used to release resources like files or network connections. We&amp;rsquo;re introducing &lt;code&gt;Drop&lt;/code&gt; in the context of smart pointers because the functionality of the &lt;code&gt;Drop&lt;/code&gt; trait is almost always used when implementing a smart pointer. For example, &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; customizes &lt;code&gt;Drop&lt;/code&gt; to deallocate the space on the heap that the box points to.</source>
          <target state="translated">スマートポインターパターンにとって2番目に重要な特性は &lt;code&gt;Drop&lt;/code&gt; です。これにより、値がスコープから外れるときにどうなるかをカスタマイズできます。任意のタイプの &lt;code&gt;Drop&lt;/code&gt; トレイトの実装を提供でき、指定したコードを使用して、ファイルやネットワーク接続などのリソースを解放できます。スマートポインターを実装する場合、ほとんどの場合 &lt;code&gt;Drop&lt;/code&gt; トレイトの機能が使用されるため、スマートポインターのコンテキストで &lt;code&gt;Drop&lt;/code&gt; を導入します。たとえば、 &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; &lt;code&gt;Drop&lt;/code&gt; をカスタマイズして、ボックスが指すヒープ上のスペースの割り当てを解除します。</target>
        </trans-unit>
        <trans-unit id="445effcb8001016422ef7635d91738ff3683b61e" translate="yes" xml:space="preserve">
          <source>The second trait important to the smart pointer pattern is &lt;code&gt;Drop&lt;/code&gt;, which lets you customize what happens when a value is about to go out of scope. You can provide an implementation for the &lt;code&gt;Drop&lt;/code&gt; trait on any type, and the code you specify can be used to release resources like files or network connections. We&amp;rsquo;re introducing &lt;code&gt;Drop&lt;/code&gt; in the context of smart pointers because the functionality of the &lt;code&gt;Drop&lt;/code&gt; trait is almost always used when implementing a smart pointer. For example, when a &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; is dropped it will deallocate the space on the heap that the box points to.</source>
          <target state="translated">スマートポインタパターンにとって重要な2番目の特性は &lt;code&gt;Drop&lt;/code&gt; です。これにより、値がスコープから外れそうになったときに何が起こるかをカスタマイズできます。 &lt;code&gt;Drop&lt;/code&gt; 特性の実装を任意のタイプで提供でき、指定したコードを使用して、ファイルやネットワーク接続などのリソースを解放できます。 &lt;code&gt;Drop&lt;/code&gt; 特性の機能はほとんどの場合、スマートポインターを実装するときに使用されるため、スマートポインターのコンテキストで &lt;code&gt;Drop&lt;/code&gt; を導入します。たとえば、 &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; をドロップすると、ボックスが指すヒープ上のスペースの割り当てが解除されます。</target>
        </trans-unit>
        <trans-unit id="b9253951b95bdbecdb3d6ee784fab1524db5c9af" translate="yes" xml:space="preserve">
          <source>The second type of operation that requires an unsafe block is calls to unsafe functions. Unsafe functions and methods look exactly like regular functions and methods, but they have an extra &lt;code&gt;unsafe&lt;/code&gt; before the rest of the definition. The &lt;code&gt;unsafe&lt;/code&gt; keyword in this context indicates the function has requirements we need to uphold when we call this function, because Rust can&amp;rsquo;t guarantee we&amp;rsquo;ve met these requirements. By calling an unsafe function within an &lt;code&gt;unsafe&lt;/code&gt; block, we&amp;rsquo;re saying that we&amp;rsquo;ve read this function&amp;rsquo;s documentation and take responsibility for upholding the function&amp;rsquo;s contracts.</source>
          <target state="translated">安全でないブロックを必要とする2番目のタイプの操作は、安全でない関数の呼び出しです。安全でない関数とメソッドは、通常の関数とメソッドとまったく同じように見えますが、残りの定義の前に、余分な &lt;code&gt;unsafe&lt;/code&gt; がありません。このコンテキストでの &lt;code&gt;unsafe&lt;/code&gt; キーワードは、Rustがこれらの要件を満たしていることを保証できないため、この関数を呼び出すときに維持する必要がある要件が関数にあることを示しています。 &lt;code&gt;unsafe&lt;/code&gt; ブロック内で安全でない関数を呼び出すことにより、この関数のドキュメントを読み、関数のコントラクトを維持する責任を負うことになります。</target>
        </trans-unit>
        <trans-unit id="3b5790cbd3c99b8bfcd34f57b9dbfe5e2b8bc741" translate="yes" xml:space="preserve">
          <source>The second-to-last line of the output shows the location and the name of the installed binary, which in the case of &lt;code&gt;ripgrep&lt;/code&gt; is &lt;code&gt;rg&lt;/code&gt;. As long as the installation directory is in your &lt;code&gt;$PATH&lt;/code&gt;, as mentioned previously, you can then run &lt;code&gt;rg --help&lt;/code&gt; and start using a faster, rustier tool for searching files!</source>
          <target state="translated">出力の最後から2番目の行には、インストールされているバイナリの場所と名前が表示されます &lt;code&gt;ripgrep&lt;/code&gt; の場合は &lt;code&gt;rg&lt;/code&gt; です。前述のように、インストールディレクトリが &lt;code&gt;$PATH&lt;/code&gt; にある限り、 &lt;code&gt;rg --help&lt;/code&gt; を実行して、ファイルを検索するためのより高速で錆びたツールの使用を開始できます。</target>
        </trans-unit>
        <trans-unit id="599ddbb55a436b4b2320e8d917bb378c0d788288" translate="yes" xml:space="preserve">
          <source>The semantics for passing a value to a function are similar to those for assigning a value to a variable. Passing a variable to a function will move or copy, just as assignment does. Listing 4-3 has an example with some annotations showing where variables go into and out of scope.</source>
          <target state="translated">関数に値を渡すときのセマンティクスは、変数に値を代入するときのセマンティクスと似ています。変数を関数に渡すことは代入が行われるのと同じように、移動もしくはコピーを行います。リスト4-3は変数がスコープに入ったりスコープ外に出たりする場所を示す注釈をつけた例を示しています。</target>
        </trans-unit>
        <trans-unit id="0ebf78e0ec598941096cd9f3613dea835a20177d" translate="yes" xml:space="preserve">
          <source>The semantics of this function are equivalent to &lt;a href=&quot;#method.wait&quot;&gt;&lt;code&gt;wait&lt;/code&gt;&lt;/a&gt; except that the thread will be blocked for roughly no longer than &lt;code&gt;dur&lt;/code&gt;. This method should not be used for precise timing due to anomalies such as preemption or platform differences that may not cause the maximum amount of time waited to be precisely &lt;code&gt;dur&lt;/code&gt;.</source>
          <target state="translated">この関数のセマンティクスは、スレッドがおよそ &lt;code&gt;dur&lt;/code&gt; より長くブロックされないことを除いて、&lt;a href=&quot;#method.wait&quot;&gt; &lt;code&gt;wait&lt;/code&gt; &lt;/a&gt;と同等です。この方法は、プリエンプションやプラットフォームの違いなどの異常が原因で、最大待機時間を正確に &lt;code&gt;dur&lt;/code&gt; できない可能性があるため、正確なタイミングには使用しないでください。</target>
        </trans-unit>
        <trans-unit id="9f8ab2e3b0b43343b07ba616db0d9b83ddc1ec9a" translate="yes" xml:space="preserve">
          <source>The semantics of this function are equivalent to &lt;a href=&quot;#method.wait&quot;&gt;&lt;code&gt;wait&lt;/code&gt;&lt;/a&gt; except that the thread will be blocked for roughly no longer than &lt;code&gt;ms&lt;/code&gt; milliseconds. This method should not be used for precise timing due to anomalies such as preemption or platform differences that may not cause the maximum amount of time waited to be precisely &lt;code&gt;ms&lt;/code&gt;.</source>
          <target state="translated">この関数のセマンティクスは、スレッドがおよそ &lt;code&gt;ms&lt;/code&gt; ミリ秒を超えてブロックされることを除いて、&lt;a href=&quot;#method.wait&quot;&gt; &lt;code&gt;wait&lt;/code&gt; &lt;/a&gt;と同等です。この方法は、プリエンプションやプラットフォームの違いなどの異常により、最大待機時間を正確に &lt;code&gt;ms&lt;/code&gt; にすることができないため、正確なタイミングには使用しないでください。</target>
        </trans-unit>
        <trans-unit id="10369644dc806ec3584f4bc1cd00c1b37924dd8f" translate="yes" xml:space="preserve">
          <source>The semantics of this function are equivalent to &lt;a href=&quot;#method.wait_until&quot;&gt;&lt;code&gt;wait_until&lt;/code&gt;&lt;/a&gt; except that the thread will be blocked for roughly no longer than &lt;code&gt;dur&lt;/code&gt;. This method should not be used for precise timing due to anomalies such as preemption or platform differences that may not cause the maximum amount of time waited to be precisely &lt;code&gt;dur&lt;/code&gt;.</source>
          <target state="translated">この関数のセマンティクスは、スレッドがおよそ &lt;code&gt;dur&lt;/code&gt; より長くブロックされることを除いて、&lt;a href=&quot;#method.wait_until&quot;&gt; &lt;code&gt;wait_until&lt;/code&gt; &lt;/a&gt;と同等です。この方法は、プリエンプションやプラットフォームの違いなどの異常が原因で、最大待機時間を正確に &lt;code&gt;dur&lt;/code&gt; できない可能性があるため、正確なタイミングには使用しないでください。</target>
        </trans-unit>
        <trans-unit id="599bdbbdba24d3dd39b2e820e78610be901175cf" translate="yes" xml:space="preserve">
          <source>The semantics of this function are equivalent to &lt;a href=&quot;fn.park&quot;&gt;&lt;code&gt;park&lt;/code&gt;&lt;/a&gt; except that the thread will be blocked for roughly no longer than &lt;code&gt;dur&lt;/code&gt;. This method should not be used for precise timing due to anomalies such as preemption or platform differences that may not cause the maximum amount of time waited to be precisely &lt;code&gt;dur&lt;/code&gt; long.</source>
          <target state="translated">この関数のセマンティクスは、スレッドがおよそ &lt;code&gt;dur&lt;/code&gt; より長くブロックされることを除いて、&lt;a href=&quot;fn.park&quot;&gt; &lt;code&gt;park&lt;/code&gt; &lt;/a&gt;と同等です。この方法は、そのような時間の最大量を正確にする待機引き起こさないプリエンプションまたはプラットフォームの違いなどの異常を正確なタイミングのために使用すべきではない &lt;code&gt;dur&lt;/code&gt; 長いです。</target>
        </trans-unit>
        <trans-unit id="9563714599dd3161cea050e5c59d88f3adc62446" translate="yes" xml:space="preserve">
          <source>The semantics of this function are equivalent to &lt;a href=&quot;fn.park&quot;&gt;&lt;code&gt;park&lt;/code&gt;&lt;/a&gt; except that the thread will be blocked for roughly no longer than &lt;code&gt;dur&lt;/code&gt;. This method should not be used for precise timing due to anomalies such as preemption or platform differences that may not cause the maximum amount of time waited to be precisely &lt;code&gt;ms&lt;/code&gt; long.</source>
          <target state="translated">この関数のセマンティクスは、スレッドがおよそ &lt;code&gt;dur&lt;/code&gt; より長くブロックされないことを除いて、&lt;a href=&quot;fn.park&quot;&gt; &lt;code&gt;park&lt;/code&gt; &lt;/a&gt;と同等です。この方法は、プリエンプションやプラットフォームの違いなどの異常により、最大待機時間を正確に &lt;code&gt;ms&lt;/code&gt; にできないため、正確なタイミングには使用しないでください。</target>
        </trans-unit>
        <trans-unit id="8ace657d10944a484e642331ec94fc1a6e6161be" translate="yes" xml:space="preserve">
          <source>The semantics of this function are equivalent to &lt;a href=&quot;struct.condvar#method.wait&quot;&gt;&lt;code&gt;wait&lt;/code&gt;&lt;/a&gt; except that the thread will be blocked for roughly no longer than &lt;code&gt;dur&lt;/code&gt;. This method should not be used for precise timing due to anomalies such as preemption or platform differences that may not cause the maximum amount of time waited to be precisely &lt;code&gt;dur&lt;/code&gt;.</source>
          <target state="translated">この関数のセマンティクスは、スレッドがおよそ &lt;code&gt;dur&lt;/code&gt; より長くブロックされないことを除いて、&lt;a href=&quot;struct.condvar#method.wait&quot;&gt; &lt;code&gt;wait&lt;/code&gt; &lt;/a&gt;と同等です。この方法は、プリエンプションやプラットフォームの違いなどの異常が原因で正確なタイミングをとるのに使用しないでください。これにより、最大待機時間が正確に &lt;code&gt;dur&lt;/code&gt; なることはありません。</target>
        </trans-unit>
        <trans-unit id="d3371efd221cedf557721fc9ee15bda8759a39a9" translate="yes" xml:space="preserve">
          <source>The semantics of this function are equivalent to &lt;a href=&quot;struct.condvar#method.wait&quot;&gt;&lt;code&gt;wait&lt;/code&gt;&lt;/a&gt; except that the thread will be blocked for roughly no longer than &lt;code&gt;ms&lt;/code&gt; milliseconds. This method should not be used for precise timing due to anomalies such as preemption or platform differences that may not cause the maximum amount of time waited to be precisely &lt;code&gt;ms&lt;/code&gt;.</source>
          <target state="translated">この関数のセマンティクスは、スレッドがおよそ &lt;code&gt;ms&lt;/code&gt; 秒以内にブロックされることを除いて、&lt;a href=&quot;struct.condvar#method.wait&quot;&gt; &lt;code&gt;wait&lt;/code&gt; &lt;/a&gt;と同等です。この方法は、プリエンプションやプラットフォームの違いなど、最大待機時間が正確に &lt;code&gt;ms&lt;/code&gt; ならない可能性があるため、正確なタイミングには使用しないでください。</target>
        </trans-unit>
        <trans-unit id="6e595d1de9f2e3618f10b608ff234b6ad2944f66" translate="yes" xml:space="preserve">
          <source>The semantics of this function are equivalent to &lt;a href=&quot;struct.condvar#method.wait_while&quot;&gt;&lt;code&gt;wait_while&lt;/code&gt;&lt;/a&gt; except that the thread will be blocked for roughly no longer than &lt;code&gt;dur&lt;/code&gt;. This method should not be used for precise timing due to anomalies such as preemption or platform differences that may not cause the maximum amount of time waited to be precisely &lt;code&gt;dur&lt;/code&gt;.</source>
          <target state="translated">この関数のセマンティクスは、スレッドがおおよそ &lt;code&gt;dur&lt;/code&gt; を超えてブロックされないことを除いて、&lt;a href=&quot;struct.condvar#method.wait_while&quot;&gt; &lt;code&gt;wait_while&lt;/code&gt; &lt;/a&gt;と同等です。この方法は、プリエンプションやプラットフォームの違いなどの異常が原因で正確なタイミングをとるのに使用しないでください。これにより、最大待機時間が正確に &lt;code&gt;dur&lt;/code&gt; なることはありません。</target>
        </trans-unit>
        <trans-unit id="9ce3d66bfcd3164df001d8c8d3ea53b374782f46" translate="yes" xml:space="preserve">
          <source>The semicolon &lt;code&gt;;&lt;/code&gt; can be used to discard the result of an expression at the end of a block, making the expression (and thus the block) evaluate to &lt;code&gt;()&lt;/code&gt;. For example,</source>
          <target state="translated">セミコロン &lt;code&gt;;&lt;/code&gt; ブロックの最後にある式の結果を破棄して、式（つまりブロック）を &lt;code&gt;()&lt;/code&gt; に評価するために使用できます。例えば、</target>
        </trans-unit>
        <trans-unit id="bb5601bddd79e71c2b7b66e9a5ead92eff60bcdd" translate="yes" xml:space="preserve">
          <source>The send and receive operations on channels will all return a &lt;a href=&quot;../../result/enum.result&quot;&gt;&lt;code&gt;Result&lt;/code&gt;&lt;/a&gt; indicating whether the operation succeeded or not. An unsuccessful operation is normally indicative of the other half of a channel having &quot;hung up&quot; by being dropped in its corresponding thread.</source>
          <target state="translated">チャネルの送受信操作はすべて、操作が成功したかどうかを示す&lt;a href=&quot;../../result/enum.result&quot;&gt; &lt;code&gt;Result&lt;/code&gt; &lt;/a&gt;を返します。操作の失敗は、通常、対応するスレッドにドロップされることにより、チャネルのもう半分が「ハングアップ」したことを示しています。</target>
        </trans-unit>
        <trans-unit id="ea8d26ff0d36fb568a938927807eafbc1ae6f29d" translate="yes" xml:space="preserve">
          <source>The sending-half of Rust's asynchronous &lt;a href=&quot;fn.channel&quot;&gt;&lt;code&gt;channel&lt;/code&gt;&lt;/a&gt; type. This half can only be owned by one thread, but it can be cloned to send to other threads.</source>
          <target state="translated">Rustの非同期&lt;a href=&quot;fn.channel&quot;&gt; &lt;code&gt;channel&lt;/code&gt; &lt;/a&gt;タイプの送信側の半分。この半分は1つのスレッドのみが所有できますが、複製して他のスレッドに送信できます。</target>
        </trans-unit>
        <trans-unit id="52ce535fefd9bc68502a1a5978b6409a82fd1bcb" translate="yes" xml:space="preserve">
          <source>The sending-half of Rust's synchronous &lt;a href=&quot;fn.sync_channel&quot;&gt;&lt;code&gt;sync_channel&lt;/code&gt;&lt;/a&gt; type.</source>
          <target state="translated">Rustの同期&lt;a href=&quot;fn.sync_channel&quot;&gt; &lt;code&gt;sync_channel&lt;/code&gt; &lt;/a&gt;タイプの送信側の半分。</target>
        </trans-unit>
        <trans-unit id="937e495e6de5b225295fc788a2b8a9723c5d12e3" translate="yes" xml:space="preserve">
          <source>The sequential nature of the tuple applies to its implementations of various traits. For example, in &lt;code&gt;PartialOrd&lt;/code&gt; and &lt;code&gt;Ord&lt;/code&gt;, the elements are compared sequentially until the first non-equal set is found.</source>
          <target state="translated">タプルの順次的な性質は、さまざまな特性の実装に適用されます。たとえば、 &lt;code&gt;PartialOrd&lt;/code&gt; と &lt;code&gt;Ord&lt;/code&gt; では、最初の等しくないセットが見つかるまで、要素が順番に比較されます。</target>
        </trans-unit>
        <trans-unit id="faf864ad82a0182728e07d76ebfb5f1fdf6dc8f4" translate="yes" xml:space="preserve">
          <source>The signed two's complement integer types consist of:</source>
          <target state="translated">符号付き2の補数整数型は、以下のように構成されます。</target>
        </trans-unit>
        <trans-unit id="0a593fcbffb90fbe9434a8bd0cd231a38381ce34" translate="yes" xml:space="preserve">
          <source>The simplest Rust programs, like the one we&amp;rsquo;ve written so far, don&amp;rsquo;t have any dependencies. So if we had built the &amp;ldquo;Hello, world!&amp;rdquo; project with Cargo, it would only use the part of Cargo that handles building your code. As you write more complex Rust programs, you&amp;rsquo;ll add dependencies, and if you start a project using Cargo, adding dependencies will be much easier to do.</source>
          <target state="translated">これまでに作成したような最も単純なRustプログラムには、依存関係はありません。つまり、「Hello、world！」を構築した場合です。Cargoを使用したプロジェクトでは、コードのビルドを処理するCargoの部分のみを使用します。より複雑なRustプログラムを作成すると、依存関係が追加されます。Cargoを使用してプロジェクトを開始すると、依存関係の追加がはるかに簡単になります。</target>
        </trans-unit>
        <trans-unit id="0dca1ad1ce59bbb51cae453b849e2d3bd139c7cf" translate="yes" xml:space="preserve">
          <source>The simplest Rust programs, like the one we&amp;rsquo;ve written so far, don&amp;rsquo;t have any dependencies. So if we had built the Hello, world! project with Cargo, it would only use the part of Cargo that handles building your code. As you write more complex Rust programs, you&amp;rsquo;ll add dependencies, and if you start a project using Cargo, adding dependencies will be much easier to do.</source>
          <target state="translated">これまでに作成したような最も単純なRustプログラムには、依存関係はありません。もしもしHello、world！Cargoを使用したプロジェクトでは、コードのビルドを処理するCargoの部分のみを使用します。より複雑なRustプログラムを作成すると、依存関係が追加されます。Cargoを使用してプロジェクトを開始すると、依存関係の追加がはるかに簡単になります。</target>
        </trans-unit>
        <trans-unit id="cc9fb663ff26b10b3b0480942ea72891d7b9e8a8" translate="yes" xml:space="preserve">
          <source>The single-address property of statics is required.</source>
          <target state="translated">statics の single-address プロパティは必須です。</target>
        </trans-unit>
        <trans-unit id="019cb91a15aad53bc6628eee08e1df33b769b170" translate="yes" xml:space="preserve">
          <source>The size and offset of fields is determined by the following algorithm.</source>
          <target state="translated">フィールドのサイズとオフセットは、以下のアルゴリズムで決定されます。</target>
        </trans-unit>
        <trans-unit id="cd076db2ed4f4f71100b51cbd80768553b1f9904" translate="yes" xml:space="preserve">
          <source>The size of a &lt;code&gt;SocketAddr&lt;/code&gt; instance may vary depending on the target operating system.</source>
          <target state="translated">&lt;code&gt;SocketAddr&lt;/code&gt; インスタンスのサイズは、ターゲットのオペレーティングシステムによって異なる場合があります。</target>
        </trans-unit>
        <trans-unit id="36d5ae29044e3939345f3681fd2eee4951ec1d94" translate="yes" xml:space="preserve">
          <source>The size of a &lt;code&gt;SocketAddrV4&lt;/code&gt; struct may vary depending on the target operating system.</source>
          <target state="translated">&lt;code&gt;SocketAddrV4&lt;/code&gt; 構造体のサイズは、ターゲットのオペレーティングシステムによって異なる場合があります。</target>
        </trans-unit>
        <trans-unit id="aa0a80c41eafe63e764438582cea6579e34fa99a" translate="yes" xml:space="preserve">
          <source>The size of a &lt;code&gt;SocketAddrV6&lt;/code&gt; struct may vary depending on the target operating system.</source>
          <target state="translated">&lt;code&gt;SocketAddrV6&lt;/code&gt; 構造体のサイズは、ターゲットのオペレーティングシステムによって異なる場合があります。</target>
        </trans-unit>
        <trans-unit id="e8de810002bae6a69cc3fd5fc7b805d907b3e5fa" translate="yes" xml:space="preserve">
          <source>The size of a &lt;code&gt;SystemTime&lt;/code&gt; struct may vary depending on the target operating system.</source>
          <target state="translated">&lt;code&gt;SystemTime&lt;/code&gt; 構造体のサイズは、ターゲットのオペレーティングシステムによって異なる場合があります。</target>
        </trans-unit>
        <trans-unit id="5b0dd86b903ec8c3b54b21a61cbefcfccd34c7a3" translate="yes" xml:space="preserve">
          <source>The size of a recursive type must be finite; in other words the recursive fields of the type must be &lt;a href=&quot;types/pointer&quot;&gt;pointer types&lt;/a&gt;.</source>
          <target state="translated">再帰型のサイズは有限でなければなりません。つまり、型の再帰フィールドは&lt;a href=&quot;types/pointer&quot;&gt;ポインタ&lt;/a&gt;型でなければなりません。</target>
        </trans-unit>
        <trans-unit id="c26f5c42f6a164861e02ed67750e160fcf8f0712" translate="yes" xml:space="preserve">
          <source>The size of a symbolic link is the length of the pathname it contains, without a terminating null byte.</source>
          <target state="translated">シンボリックリンクのサイズは、それが含むパス名の長さで、終端のヌルバイトは含まれていません。</target>
        </trans-unit>
        <trans-unit id="e1eaacf69ef80cbba3a3f01cf2e10bd4a9a5fca5" translate="yes" xml:space="preserve">
          <source>The size of a type in bytes.</source>
          <target state="translated">タイプのサイズをバイト単位で指定します。</target>
        </trans-unit>
        <trans-unit id="96cd8943bd738b362434700faacd7dc900194564" translate="yes" xml:space="preserve">
          <source>The size of a union is the size of its largest field.</source>
          <target state="translated">組合の大きさは、その最大のフィールドの大きさです。</target>
        </trans-unit>
        <trans-unit id="b7e7e7e0bae0750a49867bf9a72696378b080c09" translate="yes" xml:space="preserve">
          <source>The size of a value has two definitions.</source>
          <target state="translated">値のサイズには2つの定義があります。</target>
        </trans-unit>
        <trans-unit id="5e402a67efb4a62fa553a5f1394c869ac08acac0" translate="yes" xml:space="preserve">
          <source>The size of an &lt;code&gt;Instant&lt;/code&gt; struct may vary depending on the target operating system.</source>
          <target state="translated">&lt;code&gt;Instant&lt;/code&gt; struct のサイズは、ターゲットのオペレーティングシステムによって異なる場合があります。</target>
        </trans-unit>
        <trans-unit id="ba89d7b73eb9567f0b0c3196e6cf2e84c9f4c35c" translate="yes" xml:space="preserve">
          <source>The size of an &lt;code&gt;IpAddr&lt;/code&gt; instance may vary depending on the target operating system.</source>
          <target state="translated">&lt;code&gt;IpAddr&lt;/code&gt; インスタンスのサイズは、ターゲットのオペレーティングシステムによって異なる場合があります。</target>
        </trans-unit>
        <trans-unit id="64ef5aa718e0f2a4fb9998a036169d75f54db6df" translate="yes" xml:space="preserve">
          <source>The size of an &lt;code&gt;Ipv4Addr&lt;/code&gt; struct may vary depending on the target operating system.</source>
          <target state="translated">&lt;code&gt;Ipv4Addr&lt;/code&gt; 構造体のサイズは、ターゲットのオペレーティングシステムによって異なる場合があります。</target>
        </trans-unit>
        <trans-unit id="b28d6468d140c4a12bab4e35b4415d244e5f859a" translate="yes" xml:space="preserve">
          <source>The size of an &lt;code&gt;Ipv6Addr&lt;/code&gt; struct may vary depending on the target operating system.</source>
          <target state="translated">&lt;code&gt;Ipv6Addr&lt;/code&gt; 構造体のサイズは、ターゲットのオペレーティングシステムによって異なる場合があります。</target>
        </trans-unit>
        <trans-unit id="a01d57dab257711e2df9579c72d88d59028c40dc" translate="yes" xml:space="preserve">
          <source>The size of most primitives is given in this table.</source>
          <target state="translated">ほとんどのプリミティブのサイズをこの表に示します。</target>
        </trans-unit>
        <trans-unit id="5a098a792b06569a6bb6f2b7d98cf8797dcd4ec6" translate="yes" xml:space="preserve">
          <source>The size of the referenced value in bytes.</source>
          <target state="translated">参照される値のサイズをバイト単位で指定します。</target>
        </trans-unit>
        <trans-unit id="62333b23a5b2b89de3b055144daa334820b9c575" translate="yes" xml:space="preserve">
          <source>The size of this integer type in bits.</source>
          <target state="translated">この整数型のサイズをビット単位で指定します。</target>
        </trans-unit>
        <trans-unit id="7c1fbeb1b5be430f1bc9e3a92e1dadba4b4fdb71" translate="yes" xml:space="preserve">
          <source>The size of this primitive is how many bytes it takes to reference any location in memory. For example, on a 32 bit target, this is 4 bytes and on a 64 bit target, this is 8 bytes.</source>
          <target state="translated">このプリミティブのサイズは、メモリ内の任意の場所を参照するのに必要なバイト数です。例えば、32 ビットのターゲットでは 4 バイト、64 ビットのターゲットでは 8 バイトです。</target>
        </trans-unit>
        <trans-unit id="eaea58fd5debec4469854dd4c0d7e96ee309fa5f" translate="yes" xml:space="preserve">
          <source>The slice is assumed to be partitioned according to the given predicate. This means that all elements for which the predicate returns true are at the start of the slice and all elements for which the predicate returns false are at the end. For example, [7, 15, 3, 5, 4, 12, 6] is a partitioned under the predicate x % 2 != 0 (all odd numbers are at the start, all even at the end).</source>
          <target state="translated">スライスは、与えられた述語に従って分割されると仮定されます。これは、述語が真を返すすべての要素がスライスの先頭にあり、述語が偽を返すすべての要素が末尾にあることを意味します。例えば、[7,15,3,5,4,12,6]は、x % 2 !=0という述語の下で分割されています(すべての奇数は先頭にあり、すべての偶数は末尾にあります)。</target>
        </trans-unit>
        <trans-unit id="8e51743ff7cd79535af677e289113dcff07dbe9c" translate="yes" xml:space="preserve">
          <source>The slice used to create a &lt;a href=&quot;struct.cstr&quot;&gt;&lt;code&gt;CStr&lt;/code&gt;&lt;/a&gt; must have one and only one nul byte at the end of the slice.</source>
          <target state="translated">&lt;a href=&quot;struct.cstr&quot;&gt; &lt;code&gt;CStr&lt;/code&gt; の&lt;/a&gt;作成に使用されるスライスには、スライスの最後に1つだけのNULバイトが必要です。</target>
        </trans-unit>
        <trans-unit id="06c3ab06faa47dfc08256f59e9e6b62a827af728" translate="yes" xml:space="preserve">
          <source>The slice used to create a &lt;a href=&quot;struct.cstr&quot;&gt;&lt;code&gt;CStr&lt;/code&gt;&lt;/a&gt; must have one and only one nul byte, positioned at the end.</source>
          <target state="translated">&lt;a href=&quot;struct.cstr&quot;&gt; &lt;code&gt;CStr&lt;/code&gt; の&lt;/a&gt;作成に使用されるスライスには、最後に配置された唯一のヌルバイトが必要です。</target>
        </trans-unit>
        <trans-unit id="ad56ccc65a97d6c0192795237bde8dc8a187bcc7" translate="yes" xml:space="preserve">
          <source>The slices implement &lt;code&gt;IntoIterator&lt;/code&gt;. The iterator yields references to the slice elements.</source>
          <target state="translated">スライスは &lt;code&gt;IntoIterator&lt;/code&gt; を実装します。イテレータはスライス要素への参照を生成します。</target>
        </trans-unit>
        <trans-unit id="4d54f29cfdc5fb0b14c6bc3d825908235a2d1e62" translate="yes" xml:space="preserve">
          <source>The smallest value that can be represented by this integer type.</source>
          <target state="translated">この整数型で表現できる最小値。</target>
        </trans-unit>
        <trans-unit id="2ed21758c259b01204be09a1e5a970a7587f0275" translate="yes" xml:space="preserve">
          <source>The smallest value that can be represented by this integer type. Use &lt;a href=&quot;../primitive.i128#associatedconstant.MIN&quot;&gt;&lt;code&gt;i128::MIN&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">この整数型で表すことができる最小値。代わりに&lt;a href=&quot;../primitive.i128#associatedconstant.MIN&quot;&gt; &lt;code&gt;i128::MIN&lt;/code&gt; &lt;/a&gt;使用してください。</target>
        </trans-unit>
        <trans-unit id="b5a50b28fc392edeb96ae6e8bbc1f3f65f1879e9" translate="yes" xml:space="preserve">
          <source>The smallest value that can be represented by this integer type. Use &lt;a href=&quot;../primitive.i16#associatedconstant.MIN&quot;&gt;&lt;code&gt;i16::MIN&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">この整数型で表すことができる最小値。代わりに&lt;a href=&quot;../primitive.i16#associatedconstant.MIN&quot;&gt; &lt;code&gt;i16::MIN&lt;/code&gt; &lt;/a&gt;使用してください。</target>
        </trans-unit>
        <trans-unit id="fab5eaa27a5d1f357d4d2bc91b9af02383caede4" translate="yes" xml:space="preserve">
          <source>The smallest value that can be represented by this integer type. Use &lt;a href=&quot;../primitive.i32#associatedconstant.MIN&quot;&gt;&lt;code&gt;i32::MIN&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">この整数型で表すことができる最小値。代わりに&lt;a href=&quot;../primitive.i32#associatedconstant.MIN&quot;&gt; &lt;code&gt;i32::MIN&lt;/code&gt; &lt;/a&gt;使用してください。</target>
        </trans-unit>
        <trans-unit id="fc283863a8f984dedbdb2f90ee6338a2b682ff86" translate="yes" xml:space="preserve">
          <source>The smallest value that can be represented by this integer type. Use &lt;a href=&quot;../primitive.i64#associatedconstant.MIN&quot;&gt;&lt;code&gt;i64::MIN&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">この整数型で表すことができる最小値。代わりに&lt;a href=&quot;../primitive.i64#associatedconstant.MIN&quot;&gt; &lt;code&gt;i64::MIN&lt;/code&gt; &lt;/a&gt;使用してください。</target>
        </trans-unit>
        <trans-unit id="da8fcd8d47309d686d033e491c707f9a8e4582c1" translate="yes" xml:space="preserve">
          <source>The smallest value that can be represented by this integer type. Use &lt;a href=&quot;../primitive.i8#associatedconstant.MIN&quot;&gt;&lt;code&gt;i8::MIN&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">この整数型で表すことができる最小値。代わりに&lt;a href=&quot;../primitive.i8#associatedconstant.MIN&quot;&gt; &lt;code&gt;i8::MIN&lt;/code&gt; &lt;/a&gt;使用してください。</target>
        </trans-unit>
        <trans-unit id="124d5af779df7e9ad406378d4ae95baeff0f8e12" translate="yes" xml:space="preserve">
          <source>The smallest value that can be represented by this integer type. Use &lt;a href=&quot;../primitive.isize#associatedconstant.MIN&quot;&gt;&lt;code&gt;isize::MIN&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">この整数型で表すことができる最小値。代わりに&lt;a href=&quot;../primitive.isize#associatedconstant.MIN&quot;&gt; &lt;code&gt;isize::MIN&lt;/code&gt; &lt;/a&gt;使用してください。</target>
        </trans-unit>
        <trans-unit id="d7283dc0e8aef63acf9dd8ecc15410819b62a917" translate="yes" xml:space="preserve">
          <source>The smallest value that can be represented by this integer type. Use &lt;a href=&quot;../primitive.u128#associatedconstant.MIN&quot;&gt;&lt;code&gt;u128::MIN&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">この整数型で表すことができる最小値。代わりに&lt;a href=&quot;../primitive.u128#associatedconstant.MIN&quot;&gt; &lt;code&gt;u128::MIN&lt;/code&gt; &lt;/a&gt;使用してください。</target>
        </trans-unit>
        <trans-unit id="4e1d26d88d80abad9936f065a519a8e6dae555c2" translate="yes" xml:space="preserve">
          <source>The smallest value that can be represented by this integer type. Use &lt;a href=&quot;../primitive.u16#associatedconstant.MIN&quot;&gt;&lt;code&gt;u16::MIN&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">この整数型で表すことができる最小値。代わりに&lt;a href=&quot;../primitive.u16#associatedconstant.MIN&quot;&gt; &lt;code&gt;u16::MIN&lt;/code&gt; &lt;/a&gt;使用してください。</target>
        </trans-unit>
        <trans-unit id="3c5170dcabff61b3cd439cd574c1475742baecf6" translate="yes" xml:space="preserve">
          <source>The smallest value that can be represented by this integer type. Use &lt;a href=&quot;../primitive.u32#associatedconstant.MIN&quot;&gt;&lt;code&gt;u32::MIN&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">この整数型で表すことができる最小値。代わりに&lt;a href=&quot;../primitive.u32#associatedconstant.MIN&quot;&gt; &lt;code&gt;u32::MIN&lt;/code&gt; &lt;/a&gt;使用してください。</target>
        </trans-unit>
        <trans-unit id="0709e957f7976c853e280aae68478111e39066d5" translate="yes" xml:space="preserve">
          <source>The smallest value that can be represented by this integer type. Use &lt;a href=&quot;../primitive.u64#associatedconstant.MIN&quot;&gt;&lt;code&gt;u64::MIN&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">この整数型で表すことができる最小値。代わりに&lt;a href=&quot;../primitive.u64#associatedconstant.MIN&quot;&gt; &lt;code&gt;u64::MIN&lt;/code&gt; &lt;/a&gt;使用してください。</target>
        </trans-unit>
        <trans-unit id="fa14915f9b53a3b041d9be135f24e5f469a12ccc" translate="yes" xml:space="preserve">
          <source>The smallest value that can be represented by this integer type. Use &lt;a href=&quot;../primitive.u8#associatedconstant.MIN&quot;&gt;&lt;code&gt;u8::MIN&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">この整数型で表すことができる最小値。代わりに&lt;a href=&quot;../primitive.u8#associatedconstant.MIN&quot;&gt; &lt;code&gt;u8::MIN&lt;/code&gt; &lt;/a&gt;使用してください。</target>
        </trans-unit>
        <trans-unit id="275bb49ca6506b300934116c83ccd1ff11d81477" translate="yes" xml:space="preserve">
          <source>The smallest value that can be represented by this integer type. Use &lt;a href=&quot;../primitive.usize#associatedconstant.MIN&quot;&gt;&lt;code&gt;usize::MIN&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">この整数型で表すことができる最小値。代わりに&lt;a href=&quot;../primitive.usize#associatedconstant.MIN&quot;&gt; &lt;code&gt;usize::MIN&lt;/code&gt; &lt;/a&gt;使用してください。</target>
        </trans-unit>
        <trans-unit id="c371b87930b46855075594aef0b191a2dcbb6afc" translate="yes" xml:space="preserve">
          <source>The smart pointer &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; is also not &lt;code&gt;Sync&lt;/code&gt; for the same reasons that it&amp;rsquo;s not &lt;code&gt;Send&lt;/code&gt;. The &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; type (which we talked about in Chapter 15) and the family of related &lt;code&gt;Cell&amp;lt;T&amp;gt;&lt;/code&gt; types are not &lt;code&gt;Sync&lt;/code&gt;. The implementation of borrow checking that &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; does at runtime is not thread-safe. The smart pointer &lt;code&gt;Mutex&amp;lt;T&amp;gt;&lt;/code&gt; is &lt;code&gt;Sync&lt;/code&gt; and can be used to share access with multiple threads as you saw in the &lt;a href=&quot;ch16-03-shared-state#sharing-a-mutext-between-multiple-threads&quot;&gt;&amp;ldquo;Sharing a &lt;code&gt;Mutex&amp;lt;T&amp;gt;&lt;/code&gt; Between Multiple Threads&amp;rdquo;&lt;/a&gt; section.</source>
          <target state="translated">スマートポインター &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; も、 &lt;code&gt;Send&lt;/code&gt; ではないのと同じ理由で &lt;code&gt;Sync&lt;/code&gt; ではありません。 &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; （私たちは15章での話）タイプと関連の家族 &lt;code&gt;Cell&amp;lt;T&amp;gt;&lt;/code&gt; のタイプではありません &lt;code&gt;Sync&lt;/code&gt; 。 &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; が実行時に行う借用チェックの実装は、スレッドセーフではありません。スマートポインター &lt;code&gt;Mutex&amp;lt;T&amp;gt;&lt;/code&gt; は &lt;code&gt;Sync&lt;/code&gt; あり、&lt;a href=&quot;ch16-03-shared-state#sharing-a-mutext-between-multiple-threads&quot;&gt;「&lt;/a&gt;複数のスレッド間での &lt;code&gt;Mutex&amp;lt;T&amp;gt;&lt;/code&gt; 共有」セクションで見たように、複数のスレッドとアクセスを共有するために使用できます。</target>
        </trans-unit>
        <trans-unit id="348ea7c78b50388dc12ad8afa807cfbceb141e14" translate="yes" xml:space="preserve">
          <source>The socket will be closed when the value is dropped.</source>
          <target state="translated">値を落とすとソケットが閉じてしまいます。</target>
        </trans-unit>
        <trans-unit id="26c3406d4e79e978c77c7f71fb4706519f7ecd96" translate="yes" xml:space="preserve">
          <source>The solution here is to return the &lt;code&gt;String&lt;/code&gt; directly:</source>
          <target state="translated">ここでの解決策は、 &lt;code&gt;String&lt;/code&gt; 直接返すことです。</target>
        </trans-unit>
        <trans-unit id="b153caaa35f5e55b36f6162bb71df5061ac16716" translate="yes" xml:space="preserve">
          <source>The solution is to choose a different name that doesn't conflict with any external crate imported into the current module.</source>
          <target state="translated">解決策は、現在のモジュールにインポートされた外部のクレートと競合しない別の名前を選択することです。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
