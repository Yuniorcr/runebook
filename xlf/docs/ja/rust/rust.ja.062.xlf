<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="rust">
    <body>
      <group id="rust">
        <trans-unit id="7ad6de0505e79afe733be59c25c78e77748c9ec6" translate="yes" xml:space="preserve">
          <source>Returns the size of a type in bytes.</source>
          <target state="translated">型のサイズをバイト単位で返します。</target>
        </trans-unit>
        <trans-unit id="4ab55a093c4d747f70a70ca22d5f574fecd8954f" translate="yes" xml:space="preserve">
          <source>Returns the size of the file (if it is a regular file or a symbolic link) in bytes.</source>
          <target state="translated">ファイルのサイズをバイト単位で返します(通常のファイルまたはシンボリックリンクの場合)。</target>
        </trans-unit>
        <trans-unit id="ab6857e7ad65f594a548e2232b4c32d4c45dc30a" translate="yes" xml:space="preserve">
          <source>Returns the size of the file (if it is a regular file or a symbolic link) in bytes. &lt;a href=&quot;../os/linux/fs/trait.metadataext#tymethod.st_size&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">ファイルのサイズ（通常のファイルまたはシンボリックリンクの場合）をバイト単位で返します。&lt;a href=&quot;../os/linux/fs/trait.metadataext#tymethod.st_size&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="596ea0232a4d065a64fde2f486071c2a597a139d" translate="yes" xml:space="preserve">
          <source>Returns the size of the file, in bytes, this metadata is for.</source>
          <target state="translated">このメタデータが対象としているファイルのサイズをバイト単位で返します。</target>
        </trans-unit>
        <trans-unit id="e3c2387c476eb088dd4a2b997b29073bc3408f87" translate="yes" xml:space="preserve">
          <source>Returns the size of the pointed-to value in bytes.</source>
          <target state="translated">ポインテッドトゥ値のサイズをバイト単位で返します。</target>
        </trans-unit>
        <trans-unit id="32bf033f7107839197600c893b817513a6c17e0d" translate="yes" xml:space="preserve">
          <source>Returns the smallest integer greater than or equal to a number.</source>
          <target state="translated">数値以上の最小の整数を返します。</target>
        </trans-unit>
        <trans-unit id="b59a3f2aa87e88bf5431631e4df52338b23c8902" translate="yes" xml:space="preserve">
          <source>Returns the smallest integer greater than or equal to an &lt;code&gt;f32&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;f32&lt;/code&gt; 以上の最小の整数を返します。</target>
        </trans-unit>
        <trans-unit id="28bd143b890a1dd19b9c42465e4a4e0673681aeb" translate="yes" xml:space="preserve">
          <source>Returns the smallest integer greater than or equal to an &lt;code&gt;f64&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;f64&lt;/code&gt; 以上の最小の整数を返します。</target>
        </trans-unit>
        <trans-unit id="b7e460cb206a1385113e4f9b7160a6a8e71b5cd3" translate="yes" xml:space="preserve">
          <source>Returns the smallest power of two greater than or equal to &lt;code&gt;n&lt;/code&gt;. If the next power of two is greater than the type's maximum value, &lt;code&gt;None&lt;/code&gt; is returned, otherwise the power of two is wrapped in &lt;code&gt;Some&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;n&lt;/code&gt; 以上の最小の2の累乗を返します。次の2のべき乗が型の最大値より大きい場合は &lt;code&gt;None&lt;/code&gt; が返され、それ以外の場合は2のべき乗が &lt;code&gt;Some&lt;/code&gt; にラップされます。</target>
        </trans-unit>
        <trans-unit id="9c18590c98b090fd7b97738ceeb4be855663893a" translate="yes" xml:space="preserve">
          <source>Returns the smallest power of two greater than or equal to &lt;code&gt;n&lt;/code&gt;. If the next power of two is greater than the type's maximum value, the return value is wrapped to &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;n&lt;/code&gt; 以上の最小の2の累乗を返します。次の2の累乗が型の最大値より大きい場合、戻り値は &lt;code&gt;0&lt;/code&gt; にラップされます。</target>
        </trans-unit>
        <trans-unit id="4cd3eec23838310ec32b907db88edb3cc932a796" translate="yes" xml:space="preserve">
          <source>Returns the smallest power of two greater than or equal to &lt;code&gt;self&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;self&lt;/code&gt; 以上の最小の2のべき乗を返します。</target>
        </trans-unit>
        <trans-unit id="a7ad453b16957fdb2bb77c37c31544afecd12301" translate="yes" xml:space="preserve">
          <source>Returns the smallest value that can be represented by this integer type.</source>
          <target state="translated">この整数型で表現できる最小値を返します。</target>
        </trans-unit>
        <trans-unit id="290cdc5140b6389d4b43579e0a84d62136cf1260" translate="yes" xml:space="preserve">
          <source>Returns the socket address of the local half of this TCP connection.</source>
          <target state="translated">このTCP接続のローカル半分のソケットアドレスを返します。</target>
        </trans-unit>
        <trans-unit id="8c7f1ae8ae82d29fa352423e4b438aa08dc9cba8" translate="yes" xml:space="preserve">
          <source>Returns the socket address of the local half of this connection.</source>
          <target state="translated">この接続のローカル半分のソケットアドレスを返します。</target>
        </trans-unit>
        <trans-unit id="006b46ce56639d41f45e56bf9edb9ba2eea62e08" translate="yes" xml:space="preserve">
          <source>Returns the socket address of the remote half of this connection.</source>
          <target state="translated">この接続のリモート側のソケットアドレスを返します。</target>
        </trans-unit>
        <trans-unit id="3356af1c420785b78b73f03cb8b8639ef4169753" translate="yes" xml:space="preserve">
          <source>Returns the socket address of the remote peer of this TCP connection.</source>
          <target state="translated">このTCP接続のリモートピアのソケットアドレスを返します。</target>
        </trans-unit>
        <trans-unit id="be0156fe45dd769b5dac60a507d422d80dac537b" translate="yes" xml:space="preserve">
          <source>Returns the socket address of the remote peer this socket was connected to.</source>
          <target state="translated">このソケットが接続されているリモートピアのソケットアドレスを返します。</target>
        </trans-unit>
        <trans-unit id="95355a6d70618c715f149c9a5ebd25a9a16c9ce9" translate="yes" xml:space="preserve">
          <source>Returns the socket address that this socket was created from.</source>
          <target state="translated">このソケットが作成されたソケットアドレスを返します。</target>
        </trans-unit>
        <trans-unit id="460cfbdbb3f494bb341f4d449e902bb3420d8045" translate="yes" xml:space="preserve">
          <source>Returns the square root of an &lt;code&gt;f32&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;f32&lt;/code&gt; の平方根を返します</target>
        </trans-unit>
        <trans-unit id="bd0e705be2c1897c62ebbdeff195d246b2dda06d" translate="yes" xml:space="preserve">
          <source>Returns the square root of an &lt;code&gt;f64&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;f64&lt;/code&gt; の平方根を返します</target>
        </trans-unit>
        <trans-unit id="6a1843677592374dc17851134c3d54d3f7223126" translate="yes" xml:space="preserve">
          <source>Returns the start value as a &lt;code&gt;Bound&lt;/code&gt;.</source>
          <target state="translated">開始値を &lt;code&gt;Bound&lt;/code&gt; として返します。</target>
        </trans-unit>
        <trans-unit id="e6b86a33bd5aa1ecdb4f8e9a240ff20d86b527ec" translate="yes" xml:space="preserve">
          <source>Returns the symmetric difference of &lt;code&gt;self&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt; as a new &lt;code&gt;BTreeSet&amp;lt;T&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;self&lt;/code&gt; と &lt;code&gt;rhs&lt;/code&gt; の対称差を新しい &lt;code&gt;BTreeSet&amp;lt;T&amp;gt;&lt;/code&gt; として返します。</target>
        </trans-unit>
        <trans-unit id="dc1aaf74dc56c8a619e913235e8c7aa762c9a44d" translate="yes" xml:space="preserve">
          <source>Returns the symmetric difference of &lt;code&gt;self&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt; as a new &lt;code&gt;HashSet&amp;lt;T, S&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;self&lt;/code&gt; と &lt;code&gt;rhs&lt;/code&gt; の対称差を新しい &lt;code&gt;HashSet&amp;lt;T, S&amp;gt;&lt;/code&gt; として返します。</target>
        </trans-unit>
        <trans-unit id="21d51347b12d3977a2076de884aca1ad5ba99d04" translate="yes" xml:space="preserve">
          <source>Returns the system time corresponding to &quot;now&quot;.</source>
          <target state="translated">now に対応するシステム時刻を返します。</target>
        </trans-unit>
        <trans-unit id="afe3d9242e2d934af6d07a4b1dac82abbdabeb6a" translate="yes" xml:space="preserve">
          <source>Returns the total number of nanoseconds contained by this &lt;code&gt;Duration&lt;/code&gt;.</source>
          <target state="translated">この &lt;code&gt;Duration&lt;/code&gt; に含まれるナノ秒の合計数を返します。</target>
        </trans-unit>
        <trans-unit id="b247e92aea7b5cee1ffa599a624b89bcad6f6857" translate="yes" xml:space="preserve">
          <source>Returns the total number of whole microseconds contained by this &lt;code&gt;Duration&lt;/code&gt;.</source>
          <target state="translated">この &lt;code&gt;Duration&lt;/code&gt; に含まれるマイクロ秒の総数を返します。</target>
        </trans-unit>
        <trans-unit id="b345394e3cbbefe1c77de3c579ece46340bb34f8" translate="yes" xml:space="preserve">
          <source>Returns the total number of whole milliseconds contained by this &lt;code&gt;Duration&lt;/code&gt;.</source>
          <target state="translated">この &lt;code&gt;Duration&lt;/code&gt; に含まれるミリ秒の総数を返します。</target>
        </trans-unit>
        <trans-unit id="ed5f25a2b2709329320e75ee032e7a629d1410c5" translate="yes" xml:space="preserve">
          <source>Returns the total size of this file in bytes.</source>
          <target state="translated">このファイルの合計サイズをバイト単位で返します。</target>
        </trans-unit>
        <trans-unit id="8622948abb4c3129687690dd304247bb6571bcc2" translate="yes" xml:space="preserve">
          <source>Returns the total size of this file in bytes. &lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.size&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">このファイルの合計サイズをバイト単位で返します。&lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.size&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3c25cff868d33e26c28d926991fe9caa5cb98d81" translate="yes" xml:space="preserve">
          <source>Returns the underlying &lt;code&gt;d_ino&lt;/code&gt; field in the contained &lt;code&gt;dirent&lt;/code&gt; structure.</source>
          <target state="translated">含まれる &lt;code&gt;dirent&lt;/code&gt; 構造体の基になる &lt;code&gt;d_ino&lt;/code&gt; フィールドを返します。</target>
        </trans-unit>
        <trans-unit id="b89f96114e1ef82606c3f4d6bfbaaa27228d7362" translate="yes" xml:space="preserve">
          <source>Returns the underlying &lt;code&gt;d_ino&lt;/code&gt; field in the contained &lt;code&gt;dirent&lt;/code&gt; structure. &lt;a href=&quot;../os/unix/fs/trait.direntryext#tymethod.ino&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">含まれる &lt;code&gt;dirent&lt;/code&gt; 構造体の基になる &lt;code&gt;d_ino&lt;/code&gt; フィールドを返します。&lt;a href=&quot;../os/unix/fs/trait.direntryext#tymethod.ino&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="71b833977f125414585afe78c2a30e982ea7a3c2" translate="yes" xml:space="preserve">
          <source>Returns the underlying raw &lt;code&gt;st_mode&lt;/code&gt; bits that contain the standard Unix permissions for this file.</source>
          <target state="translated">このファイルの標準的なUnix権限を含む、基になるraw &lt;code&gt;st_mode&lt;/code&gt; ビットを返します。</target>
        </trans-unit>
        <trans-unit id="e0e96412d993c2edb28c5bf3ea18e69b86632385" translate="yes" xml:space="preserve">
          <source>Returns the underlying raw &lt;code&gt;st_mode&lt;/code&gt; bits that contain the standard Unix permissions for this file. &lt;a href=&quot;../os/unix/fs/trait.permissionsext#tymethod.mode&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">このファイルの標準的なUnix権限を含む、基になるraw &lt;code&gt;st_mode&lt;/code&gt; ビットを返します。&lt;a href=&quot;../os/unix/fs/trait.permissionsext#tymethod.mode&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a0e272c3d22ad5b5acb84c6c9e56981705ea1a81" translate="yes" xml:space="preserve">
          <source>Returns the union of &lt;code&gt;self&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt; as a new &lt;code&gt;BTreeSet&amp;lt;T&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;self&lt;/code&gt; と &lt;code&gt;rhs&lt;/code&gt; の和集合を新しい &lt;code&gt;BTreeSet&amp;lt;T&amp;gt;&lt;/code&gt; として返します。</target>
        </trans-unit>
        <trans-unit id="334d0670ad0fa6aca1264ca018365740fad472eb" translate="yes" xml:space="preserve">
          <source>Returns the union of &lt;code&gt;self&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt; as a new &lt;code&gt;HashSet&amp;lt;T, S&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;self&lt;/code&gt; と &lt;code&gt;rhs&lt;/code&gt; の和集合を新しい &lt;code&gt;HashSet&amp;lt;T, S&amp;gt;&lt;/code&gt; として返します。</target>
        </trans-unit>
        <trans-unit id="d905f4d6997cd1a5fd676b9c358c17f6454381c4" translate="yes" xml:space="preserve">
          <source>Returns the unpaired surrogate which caused this error.</source>
          <target state="translated">このエラーの原因となったペアリングされていないサロゲートを返します。</target>
        </trans-unit>
        <trans-unit id="d89ba898545e92c59008e3e9e9e9e2ca5c4c79b6" translate="yes" xml:space="preserve">
          <source>Returns the upper bound of the range (inclusive).</source>
          <target state="translated">範囲の上限を返します(範囲を含む)。</target>
        </trans-unit>
        <trans-unit id="99d0f8c4096bad66de3f1182c097eca425647b98" translate="yes" xml:space="preserve">
          <source>Returns the uppercase equivalent of this string slice, as a new &lt;a href=&quot;string/struct.string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この文字列スライスに相当する大文字を新しい&lt;a href=&quot;string/struct.string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;として返します。</target>
        </trans-unit>
        <trans-unit id="489a80d3875efc73c9834c732a48c5d439a2a33b" translate="yes" xml:space="preserve">
          <source>Returns the user ID of the file owner.</source>
          <target state="translated">ファイルの所有者のユーザーIDを返します。</target>
        </trans-unit>
        <trans-unit id="a2fd3d78d551c5bf85a307804e004ebbb3d4322f" translate="yes" xml:space="preserve">
          <source>Returns the user ID of the file owner. &lt;a href=&quot;../os/linux/fs/trait.metadataext#tymethod.st_uid&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">ファイル所有者のユーザーIDを返します。&lt;a href=&quot;../os/linux/fs/trait.metadataext#tymethod.st_uid&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="abc0b77fc35d749ebc9192e80bcc0edc4e827a6a" translate="yes" xml:space="preserve">
          <source>Returns the user ID of the owner of this file.</source>
          <target state="translated">このファイルの所有者のユーザーIDを返します。</target>
        </trans-unit>
        <trans-unit id="a7f382c8ce378856de3a313aabb11958470a144d" translate="yes" xml:space="preserve">
          <source>Returns the user ID of the owner of this file. &lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.uid&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">このファイルの所有者のユーザーIDを返します。&lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.uid&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="938f665fa2f6e8ca3e23318a1ecb7d846f60d130" translate="yes" xml:space="preserve">
          <source>Returns the value as a primitive type.</source>
          <target state="translated">値をプリミティブ型として返します。</target>
        </trans-unit>
        <trans-unit id="d96c8a0ebc9847b35c0e2a2a28868ecaf96fbf28" translate="yes" xml:space="preserve">
          <source>Returns the value of the 'HOME' environment variable if it is set (including to an empty string).</source>
          <target state="translated">環境変数 'HOME' が設定されている場合(空文字列を含む)、その値を返します。</target>
        </trans-unit>
        <trans-unit id="40325bf8bdeef6e2f82bd584359925e59eeee6af" translate="yes" xml:space="preserve">
          <source>Returns the value of the &lt;code&gt;SO_ERROR&lt;/code&gt; option.</source>
          <target state="translated">&lt;code&gt;SO_ERROR&lt;/code&gt; オプションの値を返します。</target>
        </trans-unit>
        <trans-unit id="a764c124837649c50395d3b1b211f5a4c46e3f3b" translate="yes" xml:space="preserve">
          <source>Returns the value of the &lt;code&gt;TMPDIR&lt;/code&gt; environment variable if it is set, otherwise for non-Android it returns &lt;code&gt;/tmp&lt;/code&gt;. If Android, since there is no global temporary folder (it is usually allocated per-app), it returns &lt;code&gt;/data/local/tmp&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;TMPDIR&lt;/code&gt; 環境変数が設定されている場合はその値を返し、それ以外の場合はAndroid以外では &lt;code&gt;/tmp&lt;/code&gt; を返します。Androidの場合、グローバル一時フォルダー（通常はアプリごとに割り当てられます）がないため、 &lt;code&gt;/data/local/tmp&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="5adecd48691250a49a6bd206b4e6fcc12d6525bb" translate="yes" xml:space="preserve">
          <source>Returns the value of the &lt;code&gt;dwFileAttributes&lt;/code&gt; field of this metadata.</source>
          <target state="translated">このメタデータの &lt;code&gt;dwFileAttributes&lt;/code&gt; フィールドの値を返します。</target>
        </trans-unit>
        <trans-unit id="eb6bb8145f27615c9229db90c0fe499b900ef0ea" translate="yes" xml:space="preserve">
          <source>Returns the value of the &lt;code&gt;dwFileAttributes&lt;/code&gt; field of this metadata. &lt;a href=&quot;../os/windows/fs/trait.metadataext#tymethod.file_attributes&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">このメタデータの &lt;code&gt;dwFileAttributes&lt;/code&gt; フィールドの値を返します。&lt;a href=&quot;../os/windows/fs/trait.metadataext#tymethod.file_attributes&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="65f909ba283b06a81bab19947ad469aad37c5efd" translate="yes" xml:space="preserve">
          <source>Returns the value of the &lt;code&gt;ftCreationTime&lt;/code&gt; field of this metadata.</source>
          <target state="translated">このメタデータの &lt;code&gt;ftCreationTime&lt;/code&gt; フィールドの値を返します。</target>
        </trans-unit>
        <trans-unit id="4f356ec43deb2e4831bb93733877a52e387ecf9d" translate="yes" xml:space="preserve">
          <source>Returns the value of the &lt;code&gt;ftCreationTime&lt;/code&gt; field of this metadata. &lt;a href=&quot;../os/windows/fs/trait.metadataext#tymethod.creation_time&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">このメタデータの &lt;code&gt;ftCreationTime&lt;/code&gt; フィールドの値を返します。&lt;a href=&quot;../os/windows/fs/trait.metadataext#tymethod.creation_time&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="56a140ac2b221e638070ae238ebc2bdf5c096e84" translate="yes" xml:space="preserve">
          <source>Returns the value of the &lt;code&gt;ftLastAccessTime&lt;/code&gt; field of this metadata.</source>
          <target state="translated">このメタデータの &lt;code&gt;ftLastAccessTime&lt;/code&gt; フィールドの値を返します。</target>
        </trans-unit>
        <trans-unit id="dcadee8deeeed464b969afc782db57ebcafd4549" translate="yes" xml:space="preserve">
          <source>Returns the value of the &lt;code&gt;ftLastAccessTime&lt;/code&gt; field of this metadata. &lt;a href=&quot;../os/windows/fs/trait.metadataext#tymethod.last_access_time&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">このメタデータの &lt;code&gt;ftLastAccessTime&lt;/code&gt; フィールドの値を返します。&lt;a href=&quot;../os/windows/fs/trait.metadataext#tymethod.last_access_time&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1622e337a803cf23bc08cec15d271a505df66512" translate="yes" xml:space="preserve">
          <source>Returns the value of the &lt;code&gt;ftLastWriteTime&lt;/code&gt; field of this metadata.</source>
          <target state="translated">このメタデータの &lt;code&gt;ftLastWriteTime&lt;/code&gt; フィールドの値を返します。</target>
        </trans-unit>
        <trans-unit id="5ebe4f26442072092bdd9babe655a0f41b85b722" translate="yes" xml:space="preserve">
          <source>Returns the value of the &lt;code&gt;ftLastWriteTime&lt;/code&gt; field of this metadata. &lt;a href=&quot;../os/windows/fs/trait.metadataext#tymethod.last_write_time&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">このメタデータの &lt;code&gt;ftLastWriteTime&lt;/code&gt; フィールドの値を返します。&lt;a href=&quot;../os/windows/fs/trait.metadataext#tymethod.last_write_time&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5649276827c26014c5e106c3e981ac3641c878b8" translate="yes" xml:space="preserve">
          <source>Returns the value of the &lt;code&gt;nFileSize{High,Low}&lt;/code&gt; fields of this metadata.</source>
          <target state="translated">このメタデータの &lt;code&gt;nFileSize{High,Low}&lt;/code&gt; フィールドの値を返します。</target>
        </trans-unit>
        <trans-unit id="0fd27516b70428468d6098230117b2dc0a8b22af" translate="yes" xml:space="preserve">
          <source>Returns the value of the &lt;code&gt;nFileSize{High,Low}&lt;/code&gt; fields of this metadata. &lt;a href=&quot;../os/windows/fs/trait.metadataext#tymethod.file_size&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">このメタデータの &lt;code&gt;nFileSize{High,Low}&lt;/code&gt; フィールドの値を返します。&lt;a href=&quot;../os/windows/fs/trait.metadataext#tymethod.file_size&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="828c16ee28a67cc49cb771d93b72e813c86e66af" translate="yes" xml:space="preserve">
          <source>Returns the value of the discriminant for the variant in 'v', cast to a &lt;code&gt;u64&lt;/code&gt;; if &lt;code&gt;T&lt;/code&gt; has no discriminant, returns 0.</source>
          <target state="translated">'v'のバリアントの判別式の値を &lt;code&gt;u64&lt;/code&gt; にキャストして返します。 &lt;code&gt;T&lt;/code&gt; に判別式がない場合、0を返します。</target>
        </trans-unit>
        <trans-unit id="8a219748648d60dfa73d595fe4f723347de2ea15" translate="yes" xml:space="preserve">
          <source>Returns the value of, in order, the &lt;code&gt;TMP&lt;/code&gt;, &lt;code&gt;TEMP&lt;/code&gt;, &lt;code&gt;USERPROFILE&lt;/code&gt; environment variable if any are set and not the empty string. Otherwise, &lt;code&gt;temp_dir&lt;/code&gt; returns the path of the Windows directory. This behavior is identical to that of &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/aa364992(v=vs.85).aspx&quot;&gt;&lt;code&gt;GetTempPath&lt;/code&gt;&lt;/a&gt;, which this function uses internally.</source>
          <target state="translated">空の文字列ではなく、 &lt;code&gt;TMP&lt;/code&gt; 、 &lt;code&gt;TEMP&lt;/code&gt; 、 &lt;code&gt;USERPROFILE&lt;/code&gt; 環境変数が設定されている場合、それらの値を順に返します。それ以外の場合、 &lt;code&gt;temp_dir&lt;/code&gt; はWindowsディレクトリのパスを返します。この動作は、この関数が内部で使用する&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/aa364992(v=vs.85).aspx&quot;&gt; &lt;code&gt;GetTempPath&lt;/code&gt; の&lt;/a&gt;動作と同じです。</target>
        </trans-unit>
        <trans-unit id="a67b8ba6d2c094a98d9d77b92a4224f63a9b3a0a" translate="yes" xml:space="preserve">
          <source>Returns the write timeout of this socket.</source>
          <target state="translated">このソケットの書き込みタイムアウトを返します。</target>
        </trans-unit>
        <trans-unit id="8caec21be10402429ae482b8b4f054e8779889c5" translate="yes" xml:space="preserve">
          <source>Returns this &lt;code&gt;String&lt;/code&gt;'s capacity, in bytes.</source>
          <target state="translated">この &lt;code&gt;String&lt;/code&gt; の容量をバイト単位で返します。</target>
        </trans-unit>
        <trans-unit id="21c916f27ab0290429e470d20dd116e3f85dc9cc" translate="yes" xml:space="preserve">
          <source>Returns two &lt;code&gt;UnixDatagrams&lt;/code&gt;s which are connected to each other.</source>
          <target state="translated">相互に接続されている2つの &lt;code&gt;UnixDatagrams&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="1997def92c07aa40771a479b14582d7c9199601a" translate="yes" xml:space="preserve">
          <source>Returns two &lt;code&gt;UnixStream&lt;/code&gt;s which are connected to each other.</source>
          <target state="translated">相互に接続されている2つの &lt;code&gt;UnixStream&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="58b5908caa858b790207e758925108c2f9bb59b2" translate="yes" xml:space="preserve">
          <source>Returns two slices. The first contains no consecutive repeated elements. The second contains all the duplicates in no specified order.</source>
          <target state="translated">2つのスライスを返します。1つ目のスライスには、連続した繰り返し要素が含まれていません。2つ目のスライスは、指定された順序ではなく、すべての重複要素を含みます。</target>
        </trans-unit>
        <trans-unit id="2e7c2bb1bfe446ed32e1ab9672cc673aa173f1ca" translate="yes" xml:space="preserve">
          <source>Rev</source>
          <target state="translated">Rev</target>
        </trans-unit>
        <trans-unit id="1b23bbd2e4082fee5f5c745e3cbf4bdcf5bca02f" translate="yes" xml:space="preserve">
          <source>Rev::all</source>
          <target state="translated">Rev::all</target>
        </trans-unit>
        <trans-unit id="ea75cddccbdebb8689380f055fe25d5c97e641e8" translate="yes" xml:space="preserve">
          <source>Rev::any</source>
          <target state="translated">Rev::any</target>
        </trans-unit>
        <trans-unit id="8cc8e88e690bc6681b64607317f27b5ce469bacf" translate="yes" xml:space="preserve">
          <source>Rev::borrow</source>
          <target state="translated">Rev::borrow</target>
        </trans-unit>
        <trans-unit id="e2c9f6498ab8be3ec1160607f061244988a68069" translate="yes" xml:space="preserve">
          <source>Rev::borrow_mut</source>
          <target state="translated">Rev::borrow_mut</target>
        </trans-unit>
        <trans-unit id="73dedb69b68b627e1da0fa0ad68f89639ea0dc58" translate="yes" xml:space="preserve">
          <source>Rev::by_ref</source>
          <target state="translated">Rev::by_ref</target>
        </trans-unit>
        <trans-unit id="6de60f5aa1ad60301b61eeb377b5ccf5c544536c" translate="yes" xml:space="preserve">
          <source>Rev::chain</source>
          <target state="translated">Rev::chain</target>
        </trans-unit>
        <trans-unit id="e4d458e0e8c6b2df185803f6fa9e267ace7c591d" translate="yes" xml:space="preserve">
          <source>Rev::clone</source>
          <target state="translated">Rev::clone</target>
        </trans-unit>
        <trans-unit id="8404df5a18edcc0d8879c9cf2b77a33bf8b7dcef" translate="yes" xml:space="preserve">
          <source>Rev::clone_from</source>
          <target state="translated">Rev::clone_from</target>
        </trans-unit>
        <trans-unit id="1e0d93f9be1c00147e833a50c4a743cb53a3ee55" translate="yes" xml:space="preserve">
          <source>Rev::clone_into</source>
          <target state="translated">Rev::clone_into</target>
        </trans-unit>
        <trans-unit id="7b0e62b62cf92f3958926fdad9beac39623add70" translate="yes" xml:space="preserve">
          <source>Rev::cloned</source>
          <target state="translated">Rev::cloned</target>
        </trans-unit>
        <trans-unit id="4587b57f8345a4a3e332998677d7623ed93892bf" translate="yes" xml:space="preserve">
          <source>Rev::cmp</source>
          <target state="translated">Rev::cmp</target>
        </trans-unit>
        <trans-unit id="6c408188f25a62347600f9f6f7efc47d107ffba5" translate="yes" xml:space="preserve">
          <source>Rev::collect</source>
          <target state="translated">Rev::collect</target>
        </trans-unit>
        <trans-unit id="0a4354f5e33fdf26d7b5b515676d4cb202a571e7" translate="yes" xml:space="preserve">
          <source>Rev::copied</source>
          <target state="translated">Rev::copied</target>
        </trans-unit>
        <trans-unit id="fa1132674a1131c0a0397182fa3fd35714b88c64" translate="yes" xml:space="preserve">
          <source>Rev::count</source>
          <target state="translated">Rev::count</target>
        </trans-unit>
        <trans-unit id="e7f33ff3b18fb0f96be20642157a1c5b94d511be" translate="yes" xml:space="preserve">
          <source>Rev::cycle</source>
          <target state="translated">Rev::cycle</target>
        </trans-unit>
        <trans-unit id="7d9d010b059a96e262ac8e5a6cdaab5542ee4687" translate="yes" xml:space="preserve">
          <source>Rev::enumerate</source>
          <target state="translated">Rev::enumerate</target>
        </trans-unit>
        <trans-unit id="bf2b839bd26ba50d8e6e5fedcd66fb40e0954dbb" translate="yes" xml:space="preserve">
          <source>Rev::eq</source>
          <target state="translated">Rev::eq</target>
        </trans-unit>
        <trans-unit id="e7db1b47702a233fc622c97b15e840fcf2355811" translate="yes" xml:space="preserve">
          <source>Rev::filter</source>
          <target state="translated">Rev::filter</target>
        </trans-unit>
        <trans-unit id="c0636967a7dd6c6b5fee9571848c89e0e6b37fa4" translate="yes" xml:space="preserve">
          <source>Rev::filter_map</source>
          <target state="translated">Rev::filter_map</target>
        </trans-unit>
        <trans-unit id="7e246913ec9f2d6ac5302634f16110029ac885b8" translate="yes" xml:space="preserve">
          <source>Rev::find</source>
          <target state="translated">Rev::find</target>
        </trans-unit>
        <trans-unit id="0190e76cc1988765fc2380f700844d31a354a7bb" translate="yes" xml:space="preserve">
          <source>Rev::find_map</source>
          <target state="translated">Rev::find_map</target>
        </trans-unit>
        <trans-unit id="9ec5179cd3ca49c74bb4e760048b7220f38d9284" translate="yes" xml:space="preserve">
          <source>Rev::flat_map</source>
          <target state="translated">Rev::flat_map</target>
        </trans-unit>
        <trans-unit id="225d34652551554f3a89a77e062a7a155988bda8" translate="yes" xml:space="preserve">
          <source>Rev::flatten</source>
          <target state="translated">Rev::flatten</target>
        </trans-unit>
        <trans-unit id="62575efece92a283feda80baa61c2a97054001e2" translate="yes" xml:space="preserve">
          <source>Rev::fmt</source>
          <target state="translated">Rev::fmt</target>
        </trans-unit>
        <trans-unit id="7d95ad31053fb338311f4d08c6d297a8a283a2b6" translate="yes" xml:space="preserve">
          <source>Rev::fold</source>
          <target state="translated">Rev::fold</target>
        </trans-unit>
        <trans-unit id="1593c69705065114910fc862fec9b3464e7a1e61" translate="yes" xml:space="preserve">
          <source>Rev::for_each</source>
          <target state="translated">Rev::for_each</target>
        </trans-unit>
        <trans-unit id="a39bffcf3500f02b5b324ace604d5f73f4508502" translate="yes" xml:space="preserve">
          <source>Rev::from</source>
          <target state="translated">Rev::from</target>
        </trans-unit>
        <trans-unit id="cbd60e5ba280b4f4324145a1adda2da6a971136b" translate="yes" xml:space="preserve">
          <source>Rev::fuse</source>
          <target state="translated">Rev::fuse</target>
        </trans-unit>
        <trans-unit id="873cbd9880d26c0cdf87aa55ef6d401f65c26c7f" translate="yes" xml:space="preserve">
          <source>Rev::ge</source>
          <target state="translated">Rev::ge</target>
        </trans-unit>
        <trans-unit id="25fe417873e9bf8d09530ff11b2a90f30504e382" translate="yes" xml:space="preserve">
          <source>Rev::gt</source>
          <target state="translated">Rev::gt</target>
        </trans-unit>
        <trans-unit id="f92c8c41775902f0d18700f58581689338de0da4" translate="yes" xml:space="preserve">
          <source>Rev::inspect</source>
          <target state="translated">Rev::inspect</target>
        </trans-unit>
        <trans-unit id="de43a1487bfa1f9ce9ac44d597b981808c53d44e" translate="yes" xml:space="preserve">
          <source>Rev::into</source>
          <target state="translated">Rev::into</target>
        </trans-unit>
        <trans-unit id="41b12c6f490ca67e5c059f82cd7f389f81691d0d" translate="yes" xml:space="preserve">
          <source>Rev::into_iter</source>
          <target state="translated">Rev::into_iter</target>
        </trans-unit>
        <trans-unit id="78dc9bcc5c42dbf0e33ca10baa365d630a987c3b" translate="yes" xml:space="preserve">
          <source>Rev::is_empty</source>
          <target state="translated">Rev::is_empty</target>
        </trans-unit>
        <trans-unit id="ee1895eadacc62b4170b5e3c9dc596b78a2e596b" translate="yes" xml:space="preserve">
          <source>Rev::is_sorted</source>
          <target state="translated">Rev::is_sorted</target>
        </trans-unit>
        <trans-unit id="0b14e8596fb406e0e5a02fb4edae19c0c0f50bf8" translate="yes" xml:space="preserve">
          <source>Rev::is_sorted_by</source>
          <target state="translated">Rev::is_sorted_by</target>
        </trans-unit>
        <trans-unit id="a0339aa17e6fee4a535dfa746c5ebffcbbc064ff" translate="yes" xml:space="preserve">
          <source>Rev::is_sorted_by_key</source>
          <target state="translated">Rev::is_sorted_by_key</target>
        </trans-unit>
        <trans-unit id="69271a231d2a43f1ce9b3323a711616c3ae5178e" translate="yes" xml:space="preserve">
          <source>Rev::last</source>
          <target state="translated">Rev::last</target>
        </trans-unit>
        <trans-unit id="62a279d095cd31928b407efcc98deec091e8388e" translate="yes" xml:space="preserve">
          <source>Rev::le</source>
          <target state="translated">Rev::le</target>
        </trans-unit>
        <trans-unit id="9d8b8b5216a3192ea158a98424a34191c93833cd" translate="yes" xml:space="preserve">
          <source>Rev::len</source>
          <target state="translated">Rev::len</target>
        </trans-unit>
        <trans-unit id="8e9ac96d4de2466ecd316c1f91603ec27b26f6dc" translate="yes" xml:space="preserve">
          <source>Rev::lt</source>
          <target state="translated">Rev::lt</target>
        </trans-unit>
        <trans-unit id="a309ff1b530a86315f29996f8e5e95f42d96df65" translate="yes" xml:space="preserve">
          <source>Rev::map</source>
          <target state="translated">Rev::map</target>
        </trans-unit>
        <trans-unit id="13fc0b5b7e4061cfabc93fd97e77df45f8bf14de" translate="yes" xml:space="preserve">
          <source>Rev::max</source>
          <target state="translated">Rev::max</target>
        </trans-unit>
        <trans-unit id="f2a8f41d4959a1a4b0b54bf592703f38eda6e0cc" translate="yes" xml:space="preserve">
          <source>Rev::max_by</source>
          <target state="translated">Rev::max_by</target>
        </trans-unit>
        <trans-unit id="3a57fc722077bd36001915718274271fa4c84941" translate="yes" xml:space="preserve">
          <source>Rev::max_by_key</source>
          <target state="translated">Rev::max_by_key</target>
        </trans-unit>
        <trans-unit id="ae572218c9ac7eef60e456cb22b794f75d7e0ca3" translate="yes" xml:space="preserve">
          <source>Rev::min</source>
          <target state="translated">Rev::min</target>
        </trans-unit>
        <trans-unit id="717b07a4d2d09558b9eeb735fd03732d28942baf" translate="yes" xml:space="preserve">
          <source>Rev::min_by</source>
          <target state="translated">Rev::min_by</target>
        </trans-unit>
        <trans-unit id="b635b9d188dc18da9a1c7e703b8e4a520ac3c126" translate="yes" xml:space="preserve">
          <source>Rev::min_by_key</source>
          <target state="translated">Rev::min_by_key</target>
        </trans-unit>
        <trans-unit id="09141d32e008f2b05aadaf1044ecf1a4840592ce" translate="yes" xml:space="preserve">
          <source>Rev::ne</source>
          <target state="translated">Rev::ne</target>
        </trans-unit>
        <trans-unit id="9c639ae7e696436752695f9128ab7443996d43be" translate="yes" xml:space="preserve">
          <source>Rev::next</source>
          <target state="translated">Rev::next</target>
        </trans-unit>
        <trans-unit id="68086698a40e9aec1c5dec320ad4b73283d254df" translate="yes" xml:space="preserve">
          <source>Rev::next_back</source>
          <target state="translated">Rev::next_back</target>
        </trans-unit>
        <trans-unit id="05d6eba031162aff3541fcb21f99e39a85d56d67" translate="yes" xml:space="preserve">
          <source>Rev::nth</source>
          <target state="translated">Rev::nth</target>
        </trans-unit>
        <trans-unit id="a81bfd09b0b8a63e11fb54e6a20098189b515425" translate="yes" xml:space="preserve">
          <source>Rev::nth_back</source>
          <target state="translated">Rev::nth_back</target>
        </trans-unit>
        <trans-unit id="49153ede378f17d37a9c87e1ca317129d8b017a1" translate="yes" xml:space="preserve">
          <source>Rev::partial_cmp</source>
          <target state="translated">Rev::partial_cmp</target>
        </trans-unit>
        <trans-unit id="170d9a09a9560f1dd862ddfcb40722d73ffda2fb" translate="yes" xml:space="preserve">
          <source>Rev::partition</source>
          <target state="translated">Rev::partition</target>
        </trans-unit>
        <trans-unit id="c5affa24edae4f7086a827c7943e67c9ad19eca7" translate="yes" xml:space="preserve">
          <source>Rev::peekable</source>
          <target state="translated">Rev::peekable</target>
        </trans-unit>
        <trans-unit id="746df81e7e44e4774446265edbe5fdc1b8168630" translate="yes" xml:space="preserve">
          <source>Rev::position</source>
          <target state="translated">Rev::position</target>
        </trans-unit>
        <trans-unit id="06891f0cbd66b42213b0a521d231f478938da958" translate="yes" xml:space="preserve">
          <source>Rev::product</source>
          <target state="translated">Rev::product</target>
        </trans-unit>
        <trans-unit id="61b3079d136894c7e064b5b52e1d2ad981672e74" translate="yes" xml:space="preserve">
          <source>Rev::rev</source>
          <target state="translated">Rev::rev</target>
        </trans-unit>
        <trans-unit id="606dc7c354c4c3f0a918e0dd90f032f63a4d96ea" translate="yes" xml:space="preserve">
          <source>Rev::rfind</source>
          <target state="translated">Rev::rfind</target>
        </trans-unit>
        <trans-unit id="d93e6da3d5fa06554cb27eecda1ab00a2639f4ca" translate="yes" xml:space="preserve">
          <source>Rev::rfold</source>
          <target state="translated">Rev::rfold</target>
        </trans-unit>
        <trans-unit id="69887a513371a72a506e9e2b72d6574e1a006ab7" translate="yes" xml:space="preserve">
          <source>Rev::rposition</source>
          <target state="translated">Rev::rposition</target>
        </trans-unit>
        <trans-unit id="2ac558d4958028cac5d050c97576307d3b0c7e90" translate="yes" xml:space="preserve">
          <source>Rev::scan</source>
          <target state="translated">Rev::scan</target>
        </trans-unit>
        <trans-unit id="32bf46d57176ec58a7308c23938fc7a8a6065450" translate="yes" xml:space="preserve">
          <source>Rev::size_hint</source>
          <target state="translated">Rev::size_hint</target>
        </trans-unit>
        <trans-unit id="745daae6d469e14032d310fcbbe039b267f61011" translate="yes" xml:space="preserve">
          <source>Rev::skip</source>
          <target state="translated">Rev::skip</target>
        </trans-unit>
        <trans-unit id="dc68a43da7c6b96a30d49d1450c76f344182303e" translate="yes" xml:space="preserve">
          <source>Rev::skip_while</source>
          <target state="translated">Rev::skip_while</target>
        </trans-unit>
        <trans-unit id="054143a0994b6cd5dd1b483213f5a6c9b1c0b2d1" translate="yes" xml:space="preserve">
          <source>Rev::step_by</source>
          <target state="translated">Rev::step_by</target>
        </trans-unit>
        <trans-unit id="d9663cdc74ad7a47d90d5d997ca949efed24b49c" translate="yes" xml:space="preserve">
          <source>Rev::sum</source>
          <target state="translated">Rev::sum</target>
        </trans-unit>
        <trans-unit id="544a9b94c47ffe3adf4fb88e67c57140817601d9" translate="yes" xml:space="preserve">
          <source>Rev::take</source>
          <target state="translated">Rev::take</target>
        </trans-unit>
        <trans-unit id="7ef936397559c6de4b345f55afcfa6da8c20a28c" translate="yes" xml:space="preserve">
          <source>Rev::take_while</source>
          <target state="translated">Rev::take_while</target>
        </trans-unit>
        <trans-unit id="db658a06bd7f55c9638ea4ee61d0f929584e7346" translate="yes" xml:space="preserve">
          <source>Rev::to_owned</source>
          <target state="translated">Rev::to_owned</target>
        </trans-unit>
        <trans-unit id="4a55fa5472997f719fcb65ca32e38a9494c590c7" translate="yes" xml:space="preserve">
          <source>Rev::try_fold</source>
          <target state="translated">Rev::try_fold</target>
        </trans-unit>
        <trans-unit id="cd736368392119bec6e68191bd957a8b923eac5e" translate="yes" xml:space="preserve">
          <source>Rev::try_for_each</source>
          <target state="translated">Rev::try_for_each</target>
        </trans-unit>
        <trans-unit id="dbeb577d71ccd2a54b3e5a954ded27049870aadb" translate="yes" xml:space="preserve">
          <source>Rev::try_from</source>
          <target state="translated">Rev::try_from</target>
        </trans-unit>
        <trans-unit id="966fc760987fd15f6fba61c00189cc38fffafabd" translate="yes" xml:space="preserve">
          <source>Rev::try_into</source>
          <target state="translated">Rev::try_into</target>
        </trans-unit>
        <trans-unit id="e03bbf2925edcd0e55fbf87c143dcf7214a33801" translate="yes" xml:space="preserve">
          <source>Rev::try_rfold</source>
          <target state="translated">Rev::try_rfold</target>
        </trans-unit>
        <trans-unit id="4866aacf5f321e53501fb39991d7e92a23530109" translate="yes" xml:space="preserve">
          <source>Rev::type_id</source>
          <target state="translated">Rev::type_id</target>
        </trans-unit>
        <trans-unit id="d40b36de24f921fb9d83203737a9d9313e304ed4" translate="yes" xml:space="preserve">
          <source>Rev::unzip</source>
          <target state="translated">Rev::unzip</target>
        </trans-unit>
        <trans-unit id="d26061185131ee794acff98f8cdee42eb789c3a8" translate="yes" xml:space="preserve">
          <source>Rev::zip</source>
          <target state="translated">Rev::zip</target>
        </trans-unit>
        <trans-unit id="57f9933768794f845d000833d367d5698393211d" translate="yes" xml:space="preserve">
          <source>Reverse</source>
          <target state="translated">Reverse</target>
        </trans-unit>
        <trans-unit id="855b7acdf3d35ac4f2adcc88572889dbbd152c8d" translate="yes" xml:space="preserve">
          <source>Reverse::borrow</source>
          <target state="translated">Reverse::borrow</target>
        </trans-unit>
        <trans-unit id="b2b7d426909b05c0abe69fafc7ad9a3373457083" translate="yes" xml:space="preserve">
          <source>Reverse::borrow_mut</source>
          <target state="translated">Reverse::borrow_mut</target>
        </trans-unit>
        <trans-unit id="ae49fc0d147862750a761b423bb48bdac7aea4ed" translate="yes" xml:space="preserve">
          <source>Reverse::clamp</source>
          <target state="translated">Reverse::clamp</target>
        </trans-unit>
        <trans-unit id="e018a9a3e3f5e4a17f25be205ffa5619450a465e" translate="yes" xml:space="preserve">
          <source>Reverse::clone</source>
          <target state="translated">Reverse::clone</target>
        </trans-unit>
        <trans-unit id="1acbb09e0fd503239dfba6d9885e42b30ce68ef2" translate="yes" xml:space="preserve">
          <source>Reverse::clone_from</source>
          <target state="translated">Reverse::clone_from</target>
        </trans-unit>
        <trans-unit id="6fae25f3227a651fa4dab3d82eae4c6d090bf5f7" translate="yes" xml:space="preserve">
          <source>Reverse::clone_into</source>
          <target state="translated">Reverse::clone_into</target>
        </trans-unit>
        <trans-unit id="3576dde77728ccb6dac97f18c9329186fcd25b47" translate="yes" xml:space="preserve">
          <source>Reverse::cmp</source>
          <target state="translated">Reverse::cmp</target>
        </trans-unit>
        <trans-unit id="87d225b7af09dcef297be52eee959d2c55588a88" translate="yes" xml:space="preserve">
          <source>Reverse::default</source>
          <target state="translated">Reverse::default</target>
        </trans-unit>
        <trans-unit id="a524d78b7983211c5e0bd0dfb57a20e67c068d6b" translate="yes" xml:space="preserve">
          <source>Reverse::eq</source>
          <target state="translated">Reverse::eq</target>
        </trans-unit>
        <trans-unit id="27d1dc581d53e247cf1e2bafb5f52a5822dffafb" translate="yes" xml:space="preserve">
          <source>Reverse::fmt</source>
          <target state="translated">Reverse::fmt</target>
        </trans-unit>
        <trans-unit id="ec878d46af0f49ce6792c30cd0b6e1b7235b1958" translate="yes" xml:space="preserve">
          <source>Reverse::from</source>
          <target state="translated">Reverse::from</target>
        </trans-unit>
        <trans-unit id="7c6d0cd9a450b5ac7a9861f8ecd935be369486df" translate="yes" xml:space="preserve">
          <source>Reverse::ge</source>
          <target state="translated">Reverse::ge</target>
        </trans-unit>
        <trans-unit id="ce7cdbde47d875eaad55efb2ef9ffe90f4a03ed4" translate="yes" xml:space="preserve">
          <source>Reverse::gt</source>
          <target state="translated">Reverse::gt</target>
        </trans-unit>
        <trans-unit id="ff3888b2d1d36cd518958cda6a06bbafd40ca557" translate="yes" xml:space="preserve">
          <source>Reverse::hash</source>
          <target state="translated">Reverse::hash</target>
        </trans-unit>
        <trans-unit id="0132646776d34a7463118179e279a28498b7466b" translate="yes" xml:space="preserve">
          <source>Reverse::hash_slice</source>
          <target state="translated">Reverse::hash_slice</target>
        </trans-unit>
        <trans-unit id="e9e019daf91ab04cdc269196e09f2db10403fa64" translate="yes" xml:space="preserve">
          <source>Reverse::into</source>
          <target state="translated">Reverse::into</target>
        </trans-unit>
        <trans-unit id="d9b1e02561cb84eb59fa254f199d5e53c05c8368" translate="yes" xml:space="preserve">
          <source>Reverse::le</source>
          <target state="translated">Reverse::le</target>
        </trans-unit>
        <trans-unit id="4d9a8bfcbe29163526e5bc5a1ad6df0efaa28d68" translate="yes" xml:space="preserve">
          <source>Reverse::lt</source>
          <target state="translated">Reverse::lt</target>
        </trans-unit>
        <trans-unit id="fce2114bbd923c0c4b66d5fbd541e6a46db8b2b1" translate="yes" xml:space="preserve">
          <source>Reverse::max</source>
          <target state="translated">Reverse::max</target>
        </trans-unit>
        <trans-unit id="744f7afa0a87464baa627359381d12071537458e" translate="yes" xml:space="preserve">
          <source>Reverse::min</source>
          <target state="translated">Reverse::min</target>
        </trans-unit>
        <trans-unit id="2947ceb046e4341b0a7b1b01d461498d6d47d77c" translate="yes" xml:space="preserve">
          <source>Reverse::ne</source>
          <target state="translated">Reverse::ne</target>
        </trans-unit>
        <trans-unit id="1a0af82a6b449d1fc4be8050ad565202d480b99c" translate="yes" xml:space="preserve">
          <source>Reverse::partial_cmp</source>
          <target state="translated">Reverse::partial_cmp</target>
        </trans-unit>
        <trans-unit id="dfc38fb2b46e97d4339fe9223ac9e35b911966f9" translate="yes" xml:space="preserve">
          <source>Reverse::to_owned</source>
          <target state="translated">Reverse::to_owned</target>
        </trans-unit>
        <trans-unit id="6b9dbc8067fbcb99860916ed4280269ddf4b0187" translate="yes" xml:space="preserve">
          <source>Reverse::try_from</source>
          <target state="translated">Reverse::try_from</target>
        </trans-unit>
        <trans-unit id="4198456beaa5540ba8be310ee2d5cc7d8f48ea67" translate="yes" xml:space="preserve">
          <source>Reverse::try_into</source>
          <target state="translated">Reverse::try_into</target>
        </trans-unit>
        <trans-unit id="6860559d5fa051e4b834b6077771242282766826" translate="yes" xml:space="preserve">
          <source>Reverse::type_id</source>
          <target state="translated">Reverse::type_id</target>
        </trans-unit>
        <trans-unit id="de938e717e63356d75f69d3afd8292bf2f96a32f" translate="yes" xml:space="preserve">
          <source>ReverseSearcher</source>
          <target state="translated">ReverseSearcher</target>
        </trans-unit>
        <trans-unit id="8d7236df59f914f9071c6e16648b2ef0addf66a1" translate="yes" xml:space="preserve">
          <source>Reverses an iterator's direction.</source>
          <target state="translated">イテレータの方向を反転させます。</target>
        </trans-unit>
        <trans-unit id="eb8aead23318719eb265935da0734b397d74d732" translate="yes" xml:space="preserve">
          <source>Reverses an iterator's direction. &lt;a href=&quot;../../../iter/trait.iterator#method.rev&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">イテレータの方向を逆にします。&lt;a href=&quot;../../../iter/trait.iterator#method.rev&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="da5c53b657810a4cbe93c7e2f2fa480619340afb" translate="yes" xml:space="preserve">
          <source>Reverses an iterator's direction. &lt;a href=&quot;../../iter/trait.iterator#method.rev&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">イテレータの方向を逆にします。&lt;a href=&quot;../../iter/trait.iterator#method.rev&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a52ff52ba0845d9c1a9b2c750fd96d9a3a6a3c27" translate="yes" xml:space="preserve">
          <source>Reverses an iterator's direction. &lt;a href=&quot;../iter/trait.iterator#method.rev&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">イテレータの方向を逆にします。&lt;a href=&quot;../iter/trait.iterator#method.rev&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f9284c1c2c9fd85ba7767c59c99017b534d9eee9" translate="yes" xml:space="preserve">
          <source>Reverses an iterator's direction. &lt;a href=&quot;iter/trait.iterator#method.rev&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">イテレータの方向を逆にします。&lt;a href=&quot;iter/trait.iterator#method.rev&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="729ff069e224b910aab08299c613befadec11121" translate="yes" xml:space="preserve">
          <source>Reverses an iterator's direction. &lt;a href=&quot;trait.iterator#method.rev&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">イテレータの方向を逆にします。&lt;a href=&quot;trait.iterator#method.rev&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="42ebe1d1b22b768e5e0a52d253bd9764dab488b1" translate="yes" xml:space="preserve">
          <source>Reverses the &lt;code&gt;Ordering&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Ordering&lt;/code&gt; 逆にします。</target>
        </trans-unit>
        <trans-unit id="2bd561cb07cd33c0a2ed2162929bc80a36033f08" translate="yes" xml:space="preserve">
          <source>Reverses the bit pattern of the integer.</source>
          <target state="translated">整数のビットパターンを反転します。</target>
        </trans-unit>
        <trans-unit id="c045f20a6ee66e7b7d06320153c9befa95e70b3f" translate="yes" xml:space="preserve">
          <source>Reverses the bits in an integer type &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">整数型 &lt;code&gt;T&lt;/code&gt; のビットを反転します。</target>
        </trans-unit>
        <trans-unit id="79e3db360b190aa279792f3cec009bf516b1404c" translate="yes" xml:space="preserve">
          <source>Reverses the byte order of the integer.</source>
          <target state="translated">整数のバイト順を反転させます。</target>
        </trans-unit>
        <trans-unit id="64b09f1db72cf0ec7ade643d2317db8963d83387" translate="yes" xml:space="preserve">
          <source>Reverses the bytes in an integer type &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">整数型 &lt;code&gt;T&lt;/code&gt; のバイトを反転します。</target>
        </trans-unit>
        <trans-unit id="eb94381be35515f566147dc309094fe9e5f3b42c" translate="yes" xml:space="preserve">
          <source>Reverses the order of elements in the slice, in place.</source>
          <target state="translated">スライス内の要素の順序を反転させます。</target>
        </trans-unit>
        <trans-unit id="043399b4f9587dfd6e880bb527cf9885c51d0675" translate="yes" xml:space="preserve">
          <source>Rewrite the expression without functional record update syntax:</source>
          <target state="translated">関数レコード更新構文を使用せずに式を書き換えます。</target>
        </trans-unit>
        <trans-unit id="5c8afd877c560b80edb72541a6eaea0dba68d13a" translate="yes" xml:space="preserve">
          <source>Right Shift**</source>
          <target state="translated">右シフト</target>
        </trans-unit>
        <trans-unit id="9ef3e151188d7e4dfc0cdde88b74ac2276235a35" translate="yes" xml:space="preserve">
          <source>Right now, our web server will return the HTML in the file no matter what the client requested. Let&amp;rsquo;s add functionality to check that the browser is requesting &lt;em&gt;/&lt;/em&gt; before returning the HTML file and return an error if the browser requests anything else. For this we need to modify &lt;code&gt;handle_connection&lt;/code&gt;, as shown in Listing 20-6. This new code checks the content of the request received against what we know a request for &lt;em&gt;/&lt;/em&gt; looks like and adds &lt;code&gt;if&lt;/code&gt; and &lt;code&gt;else&lt;/code&gt; blocks to treat requests differently.</source>
          <target state="translated">現在、クライアントが何を要求しても、WebサーバーはファイルにHTMLを返します。ブラウザーがHTMLファイルを返す前に&lt;em&gt;/&lt;/em&gt;を要求していることを確認する機能を追加して、ブラウザーが何かを要求した場合はエラーを返します。このためには、リスト20-6で示されるように、 &lt;code&gt;handle_connection&lt;/code&gt; を修正する必要があります。この新しいコードは、受信した要求の内容を、&lt;em&gt;/の&lt;/em&gt;要求がどのように見えるかを確認し、 &lt;code&gt;if&lt;/code&gt; および &lt;code&gt;else&lt;/code&gt; ブロックを追加して、要求を異なる方法で処理します。</target>
        </trans-unit>
        <trans-unit id="18ab96a1810297bde0b9141142db3dfb5bb9d2bc" translate="yes" xml:space="preserve">
          <source>Right now, the program generated by &lt;code&gt;cargo new&lt;/code&gt; cannot process arguments we give it. Some existing libraries on &lt;a href=&quot;https://crates.io/&quot;&gt;crates.io&lt;/a&gt; can help with writing a program that accepts command line arguments, but because you&amp;rsquo;re just learning this concept, let&amp;rsquo;s implement this capability ourselves.</source>
          <target state="translated">現時点では、 &lt;code&gt;cargo new&lt;/code&gt; によって生成されたプログラムは、指定した引数を処理できません。&lt;a href=&quot;https://crates.io/&quot;&gt;crates.ioの&lt;/a&gt;一部の既存のライブラリは、コマンドライン引数を受け入れるプログラムの作成に役立ちますが、この概念を学習しているだけなので、この機能を自分で実装してみましょう。</target>
        </trans-unit>
        <trans-unit id="7b9dbd2a05c55e3ec29e51c514e9c4050f82aedb" translate="yes" xml:space="preserve">
          <source>Right now, the server will process each request in turn, meaning it won&amp;rsquo;t process a second connection until the first is finished processing. If the server received more and more requests, this serial execution would be less and less optimal. If the server receives a request that takes a long time to process, subsequent requests will have to wait until the long request is finished, even if the new requests can be processed quickly. We&amp;rsquo;ll need to fix this, but first, we&amp;rsquo;ll look at the problem in action.</source>
          <target state="translated">現在、サーバーは各要求を順番に処理します。つまり、最初の処理が完了するまで、2番目の接続は処理されません。サーバーがますます多くのリクエストを受信する場合、このシリアル実行はますます最適ではなくなります。サーバーが処理に長い時間がかかる要求を受け取った場合、新しい要求をすばやく処理できる場合でも、後続の要求は長い要求が終了するまで待機する必要があります。これを修正する必要がありますが、最初に、動作中の問題を確認します。</target>
        </trans-unit>
        <trans-unit id="c480af39db009c0318ae7e74d0323b0c502a0fd5" translate="yes" xml:space="preserve">
          <source>Right-exclusive range literal</source>
          <target state="translated">右専用範囲リテラル</target>
        </trans-unit>
        <trans-unit id="59325f597d1c37aeeec754c26100e96a2e30be66" translate="yes" xml:space="preserve">
          <source>Right-inclusive range literal</source>
          <target state="translated">右包含範囲リテラル</target>
        </trans-unit>
        <trans-unit id="9b48ae49c811eaa74c51d9a2c4444bab2f4e6c28" translate="yes" xml:space="preserve">
          <source>Right-shift</source>
          <target state="translated">Right-shift</target>
        </trans-unit>
        <trans-unit id="f367c94b8369cb645d39410fa6aec58a35c66b87" translate="yes" xml:space="preserve">
          <source>Right-shift and assignment</source>
          <target state="translated">右シフトと割り当て</target>
        </trans-unit>
        <trans-unit id="87ab4fb697063b10dcdc96979db348b5d934b10e" translate="yes" xml:space="preserve">
          <source>Rotate a subslice:</source>
          <target state="translated">サブスライスを回転させます。</target>
        </trans-unit>
        <trans-unit id="e2e2300fcc3d5d8ec414a7eaacdbbcb51bb451c4" translate="yes" xml:space="preserve">
          <source>Rotates &lt;code&gt;len() - k&lt;/code&gt; places to the left.</source>
          <target state="translated">&lt;code&gt;len() - k&lt;/code&gt; 桁左に回転します。</target>
        </trans-unit>
        <trans-unit id="ce3f746edcfb3b9e0b1137f1b27b633f9dbc1e06" translate="yes" xml:space="preserve">
          <source>Rotates &lt;code&gt;len() - mid&lt;/code&gt; places to the right.</source>
          <target state="translated">&lt;code&gt;len() - mid&lt;/code&gt; 回転します-中央の場所を右に。</target>
        </trans-unit>
        <trans-unit id="96b03b8904b0a15cce1085562454a38f8c416656" translate="yes" xml:space="preserve">
          <source>Rotates item &lt;code&gt;mid&lt;/code&gt; into the first position.</source>
          <target state="translated">アイテムを最初の位置 &lt;code&gt;mid&lt;/code&gt; 回転させます。</target>
        </trans-unit>
        <trans-unit id="435514cee1befe7c5f78629addaceeb41d851af0" translate="yes" xml:space="preserve">
          <source>Rotates the double-ended queue &lt;code&gt;k&lt;/code&gt; places to the right.</source>
          <target state="translated">両端キューを &lt;code&gt;k&lt;/code&gt; 桁右に回転します。</target>
        </trans-unit>
        <trans-unit id="f6e0de855ccd5f7c0b8c806d3b9f3e85016db057" translate="yes" xml:space="preserve">
          <source>Rotates the double-ended queue &lt;code&gt;mid&lt;/code&gt; places to the left.</source>
          <target state="translated">両端キューを &lt;code&gt;mid&lt;/code&gt; 位置で左に回転します。</target>
        </trans-unit>
        <trans-unit id="a3eb1eddf6dbbb2384431fa9dbaf6f2680d9416d" translate="yes" xml:space="preserve">
          <source>Rotates the first item into position &lt;code&gt;k&lt;/code&gt;.</source>
          <target state="translated">最初のアイテムを位置 &lt;code&gt;k&lt;/code&gt; に回転します。</target>
        </trans-unit>
        <trans-unit id="1ed009359b30c6f889c504f86a394c588c0f7b7a" translate="yes" xml:space="preserve">
          <source>Rotates the slice in-place such that the first &lt;code&gt;mid&lt;/code&gt; elements of the slice move to the end while the last &lt;code&gt;self.len() - mid&lt;/code&gt; elements move to the front. After calling &lt;code&gt;rotate_left&lt;/code&gt;, the element previously at index &lt;code&gt;mid&lt;/code&gt; will become the first element in the slice.</source>
          <target state="translated">最後の &lt;code&gt;self.len() - mid&lt;/code&gt; 要素が前に移動する間、スライスの最初の &lt;code&gt;mid&lt;/code&gt; 要素が最後に移動するようにスライスをインプレースで回転します。 &lt;code&gt;rotate_left&lt;/code&gt; を呼び出した後、以前にインデックス &lt;code&gt;mid&lt;/code&gt; にあった要素がスライスの最初の要素になります。</target>
        </trans-unit>
        <trans-unit id="04b7ac171ea5b32f47f9900517a2fadf3a9c0d83" translate="yes" xml:space="preserve">
          <source>Rotates the slice in-place such that the first &lt;code&gt;self.len() - k&lt;/code&gt; elements of the slice move to the end while the last &lt;code&gt;k&lt;/code&gt; elements move to the front. After calling &lt;code&gt;rotate_right&lt;/code&gt;, the element previously at index &lt;code&gt;self.len() - k&lt;/code&gt; will become the first element in the slice.</source>
          <target state="translated">スライスをインプレースで回転し、スライスの最初の &lt;code&gt;self.len() - k&lt;/code&gt; 要素が最後に移動し、最後の &lt;code&gt;k&lt;/code&gt; 要素が手前に移動するようにします。 &lt;code&gt;rotate_right&lt;/code&gt; を呼び出した後、以前にインデックス &lt;code&gt;self.len() - k&lt;/code&gt; にあった要素がスライスの最初の要素になります。</target>
        </trans-unit>
        <trans-unit id="5c601ca5828939fb30e1667600554d785890002f" translate="yes" xml:space="preserve">
          <source>Rotating a subslice:</source>
          <target state="translated">サブスライスを回転させる。</target>
        </trans-unit>
        <trans-unit id="4e37bfdd52117be2c062494638d3e5c44c84094a" translate="yes" xml:space="preserve">
          <source>Round up the current size to the nearest multiple of the next field's &lt;a href=&quot;fn.align_of&quot;&gt;alignment&lt;/a&gt;.</source>
          <target state="translated">現在のサイズを次のフィールドの&lt;a href=&quot;fn.align_of&quot;&gt;配置の&lt;/a&gt;最も近い倍数に切り上げます。</target>
        </trans-unit>
        <trans-unit id="58cf18a9ecd627eed5f1c04bd8628968731bb80a" translate="yes" xml:space="preserve">
          <source>Ruby: &lt;strike&gt;block syntax&lt;/strike&gt;</source>
          <target state="translated">Ruby：&lt;strike&gt;ブロック構文&lt;/strike&gt;</target>
        </trans-unit>
        <trans-unit id="0b36b4e006f637aa6590232050c05151c7ad67ec" translate="yes" xml:space="preserve">
          <source>Run the &lt;code&gt;cargo publish&lt;/code&gt; command again. It should succeed now:</source>
          <target state="translated">&lt;code&gt;cargo publish&lt;/code&gt; コマンドを再度実行します。今は成功するはずです：</target>
        </trans-unit>
        <trans-unit id="923b0697706f694d4ca0d13f16f9a1afd423c9a4" translate="yes" xml:space="preserve">
          <source>Run the code with this change. Drat! We still get an error:</source>
          <target state="translated">この変更をしてコードを実行してください。畜生! まだエラーが出ます</target>
        </trans-unit>
        <trans-unit id="3f16915758c73edf89a7ea497581557bcdd0d1f8" translate="yes" xml:space="preserve">
          <source>Run the code you want to test.</source>
          <target state="translated">テストしたいコードを実行します。</target>
        </trans-unit>
        <trans-unit id="e196a338a67e0d1bafa6837b0b8c2270766eed56" translate="yes" xml:space="preserve">
          <source>Run the program again, and look at the output:</source>
          <target state="translated">もう一度プログラムを実行して、出力を見ます。</target>
        </trans-unit>
        <trans-unit id="fab2784a99af076ad38bcd6561c56938260806b6" translate="yes" xml:space="preserve">
          <source>Run the tests again using &lt;code&gt;cargo test&lt;/code&gt;. The output should look like Listing 11-4, which shows that our &lt;code&gt;exploration&lt;/code&gt; test passed and &lt;code&gt;another&lt;/code&gt; failed.</source>
          <target state="translated">&lt;code&gt;cargo test&lt;/code&gt; を使用してテストを再度実行します。出力はリスト11-4のようになります。これは、 &lt;code&gt;exploration&lt;/code&gt; テストが成功し、 &lt;code&gt;another&lt;/code&gt; テストが失敗したことを示しています。</target>
        </trans-unit>
        <trans-unit id="d0d45a5d41408cca9fc6eeaa7d959b93e0fc34a3" translate="yes" xml:space="preserve">
          <source>Run the tests again:</source>
          <target state="translated">もう一度テストを実行してください。</target>
        </trans-unit>
        <trans-unit id="513c6246dbce19675f37c27f2bbb4ac8a4d4b4e2" translate="yes" xml:space="preserve">
          <source>Run this code now and request &lt;em&gt;127.0.0.1:7878&lt;/em&gt;; you should get the HTML in &lt;em&gt;hello.html&lt;/em&gt;. If you make any other request, such as &lt;em&gt;127.0.0.1:7878/something-else&lt;/em&gt;, you&amp;rsquo;ll get a connection error like those you saw when running the code in Listing 20-1 and Listing 20-2.</source>
          <target state="translated">ここでこのコードを実行し、&lt;em&gt;127.0.0.1&lt;/em&gt;：&lt;em&gt;7878&lt;/em&gt;を要求します。HTMLを&lt;em&gt;hello.htmlで&lt;/em&gt;取得する必要があります。&lt;em&gt;127.0.0.1:7878/something-else&lt;/em&gt;などの他のリクエストを行うと、リスト20-1とリスト20-2のコードを実行したときに見たような接続エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="e35c6b16535d8da5f5670a5eab95ccaf77d4012a" translate="yes" xml:space="preserve">
          <source>Run this code with &lt;code&gt;cargo run&lt;/code&gt; and load &lt;em&gt;127.0.0.1:7878&lt;/em&gt; in your browser; you should see your HTML rendered!</source>
          <target state="translated">で、このコードを実行し &lt;code&gt;cargo run&lt;/code&gt; と負荷&lt;em&gt;127.0.0.1:7878&lt;/em&gt;ブラウザで。HTMLが表示されるはずです！</target>
        </trans-unit>
        <trans-unit id="23437fed19097bdfdfbe0b8267f38604c310de83" translate="yes" xml:space="preserve">
          <source>Run this test with the &lt;code&gt;Cacher&lt;/code&gt; implementation in Listing 13-9 and Listing 13-10, and the test will fail on the &lt;code&gt;assert_eq!&lt;/code&gt; with this message:</source>
          <target state="translated">で、このテストを実行します &lt;code&gt;Cacher&lt;/code&gt; 13-9とリスト13-10のリストの実装、およびテストが上で失敗します &lt;code&gt;assert_eq!&lt;/code&gt; このメッセージで：</target>
        </trans-unit>
        <trans-unit id="d3d8bf74c1c629197f4536b35815a9f7a259419d" translate="yes" xml:space="preserve">
          <source>Running &lt;code&gt;cargo clippy&lt;/code&gt; on this project results in this error:</source>
          <target state="translated">このプロジェクトで &lt;code&gt;cargo clippy&lt;/code&gt; を実行すると、次のエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="f395b53628f20c5c4b3bbd548137966e23fc9dab" translate="yes" xml:space="preserve">
          <source>Running Code on Cleanup with the &lt;code id=&quot;running-code-on-cleanup-with-the-drop-trait&quot;&gt;Drop&lt;/code&gt; Trait</source>
          <target state="translated">&lt;code id=&quot;running-code-on-cleanup-with-the-drop-trait&quot;&gt;Drop&lt;/code&gt; Traitを使用したクリーンアップでのコードの実行</target>
        </trans-unit>
        <trans-unit id="564030da0f34d36e19aa75d7720530ab88c94b03" translate="yes" xml:space="preserve">
          <source>Running Single Tests</source>
          <target state="translated">シングルテストの実行</target>
        </trans-unit>
        <trans-unit id="e69e378bddb35dc41b1601835b2e69f3cbc1a82e" translate="yes" xml:space="preserve">
          <source>Running Tests in Parallel or Consecutively</source>
          <target state="translated">並列または連続してテストを実行する</target>
        </trans-unit>
        <trans-unit id="1e1d8cbafc2cddc28df09bc7a99cf83551dd23e4" translate="yes" xml:space="preserve">
          <source>Running a Subset of Tests by Name</source>
          <target state="translated">テストのサブセットを名前で実行する</target>
        </trans-unit>
        <trans-unit id="103fa497687d08956605ccfefaf1c40f881c8239" translate="yes" xml:space="preserve">
          <source>Running the code in Listing 8-25 will print &lt;code&gt;{&quot;Yellow&quot;: 50, &quot;Blue&quot;: 10}&lt;/code&gt;. The first call to &lt;code&gt;entry&lt;/code&gt; will insert the key for the Yellow team with the value 50 because the Yellow team doesn&amp;rsquo;t have a value already. The second call to &lt;code&gt;entry&lt;/code&gt; will not change the hash map because the Blue team already has the value 10.</source>
          <target state="translated">リスト8-25のコードを実行すると、 &lt;code&gt;{&quot;Yellow&quot;: 50, &quot;Blue&quot;: 10}&lt;/code&gt; ます。 &lt;code&gt;entry&lt;/code&gt; の最初の呼び出しは、黄色のチームがまだ値を持っていないため、値50の黄色のチームのキーを挿入します。 &lt;code&gt;entry&lt;/code&gt; の2回目の呼び出しではハッシュマップは変更されません。これは、Blueチームがすでに値10を持っているためです。</target>
        </trans-unit>
        <trans-unit id="1c9add0452877e9f24dc2bf7d578c6ed2f3e1d8b" translate="yes" xml:space="preserve">
          <source>Running the tests now produces the following:</source>
          <target state="translated">テストを実行すると以下のようになります。</target>
        </trans-unit>
        <trans-unit id="f25b19c8b9c8cd64ad4a2e8f5f7c3c28f70fa2a3" translate="yes" xml:space="preserve">
          <source>Running this code prints the following:</source>
          <target state="translated">このコードを実行すると、以下のように表示されます。</target>
        </trans-unit>
        <trans-unit id="1e3c357826826fa11f1cba26866e53be103107ea" translate="yes" xml:space="preserve">
          <source>Running this code using &lt;code&gt;cargo run&lt;/code&gt; produces the following result:</source>
          <target state="translated">カーゴランを使用してこのコードを &lt;code&gt;cargo run&lt;/code&gt; すると、次の結果が生成されます。</target>
        </trans-unit>
        <trans-unit id="c569a779f618ce9a2967d5affac56fe27ca64ca3" translate="yes" xml:space="preserve">
          <source>Running this code will print &lt;code&gt;*waving arms furiously*&lt;/code&gt;, showing that Rust called the &lt;code&gt;fly&lt;/code&gt; method implemented on &lt;code&gt;Human&lt;/code&gt; directly.</source>
          <target state="translated">このコードを実行すると &lt;code&gt;*waving arms furiously*&lt;/code&gt; と表示され、Rust が &lt;code&gt;Human&lt;/code&gt; に直接実装された &lt;code&gt;fly&lt;/code&gt; メソッドを呼び出したことを示します。</target>
        </trans-unit>
        <trans-unit id="050611088b4215f09f3ddc0798cae6177d1f772f" translate="yes" xml:space="preserve">
          <source>Running this code will print &lt;code&gt;The value of x is: 6&lt;/code&gt;. But if we place a semicolon at the end of the line containing &lt;code&gt;x + 1&lt;/code&gt;, changing it from an expression to a statement, we&amp;rsquo;ll get an error.</source>
          <target state="translated">このコードを実行すると &lt;code&gt;The value of x is: 6&lt;/code&gt; ます。ただし、 &lt;code&gt;x + 1&lt;/code&gt; を含む行の最後にセミコロンを配置して、式からステートメントに変更すると、エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="0cf90b9dd90262dc86c7e18ab1cd2e79c2411dea" translate="yes" xml:space="preserve">
          <source>Running this code will print &lt;code&gt;number was something other than zero&lt;/code&gt;.</source>
          <target state="translated">このコードを実行すると &lt;code&gt;number was something other than zero&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d3da00eed1960155f07dbe554383fc0ea4f0b115" translate="yes" xml:space="preserve">
          <source>Running this code will print the following:</source>
          <target state="translated">このコードを実行すると、以下のように表示されます。</target>
        </trans-unit>
        <trans-unit id="e4fcdd04ec6ff3e0b0277e41acfba1bf839f5a18" translate="yes" xml:space="preserve">
          <source>Running this command reformats all the Rust code in the current crate. This should only change the code style, not the code semantics. For more information on &lt;code&gt;rustfmt&lt;/code&gt;, see &lt;a href=&quot;https://github.com/rust-lang/rustfmt&quot;&gt;its documentation&lt;/a&gt;.</source>
          <target state="translated">このコマンドを実行すると、現在のクレート内のすべてのRustコードが再フォーマットされます。これにより、コードのセマンティクスではなく、コードスタイルのみが変更されます。詳細については &lt;code&gt;rustfmt&lt;/code&gt; 、参照&lt;a href=&quot;https://github.com/rust-lang/rustfmt&quot;&gt;マニュアルの&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="7d1170a5c907c3d621f9e3318eb8f67085d5957f" translate="yes" xml:space="preserve">
          <source>Running this test produces the following:</source>
          <target state="translated">このテストを実行すると、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="c4740e4ca28c9c8d6a8447aef5c33425e6de4802" translate="yes" xml:space="preserve">
          <source>Runtime</source>
          <target state="translated">Runtime</target>
        </trans-unit>
        <trans-unit id="5359eea6ab0e87db9479836bb9761e7ad6a157fe" translate="yes" xml:space="preserve">
          <source>Runtime characteristics</source>
          <target state="translated">ランタイム特性</target>
        </trans-unit>
        <trans-unit id="e2ae20d9ae7fcacb605c03c198e0a1c51d446f50" translate="yes" xml:space="preserve">
          <source>Rust</source>
          <target state="translated">Rust</target>
        </trans-unit>
        <trans-unit id="1fc5c6604c5a3ad4a813390059fa989765293b6c" translate="yes" xml:space="preserve">
          <source>Rust 2015 does not permit the use of &lt;code&gt;async fn&lt;/code&gt;.</source>
          <target state="translated">Rust 2015では、 &lt;code&gt;async fn&lt;/code&gt; の使用は許可されていません。</target>
        </trans-unit>
        <trans-unit id="a577c02cc01ad8b1a35ad9c0d2cad0f98a6cf0b5" translate="yes" xml:space="preserve">
          <source>Rust &lt;em&gt;does&lt;/em&gt; include functionality to print out debugging information, but we have to explicitly opt in to make that functionality available for our struct. To do that, we add the annotation &lt;code&gt;#[derive(Debug)]&lt;/code&gt; just before the struct definition, as shown in Listing 5-12.</source>
          <target state="translated">Rustに&lt;em&gt;は&lt;/em&gt;デバッグ情報を出力する機能&lt;em&gt;が&lt;/em&gt;含まれていますが、その機能を構造体で使用できるように明示的にオプトインする必要があります。これを行うには、リスト5-12に示すように、構造体定義の直前に注釈 &lt;code&gt;#[derive(Debug)]&lt;/code&gt; を追加します。</target>
        </trans-unit>
        <trans-unit id="2c33a40099b2ccd85bf32fbbe3e68ef69581fe7f" translate="yes" xml:space="preserve">
          <source>Rust &lt;em&gt;infers&lt;/em&gt; how to capture &lt;code&gt;v&lt;/code&gt;, and because &lt;code&gt;println!&lt;/code&gt; only needs a reference to &lt;code&gt;v&lt;/code&gt;, the closure tries to borrow &lt;code&gt;v&lt;/code&gt;. However, there&amp;rsquo;s a problem: Rust can&amp;rsquo;t tell how long the spawned thread will run, so it doesn&amp;rsquo;t know if the reference to &lt;code&gt;v&lt;/code&gt; will always be valid.</source>
          <target state="translated">錆&lt;em&gt;推論&lt;/em&gt;キャプチャする方法 &lt;code&gt;v&lt;/code&gt; 、そして理由 &lt;code&gt;println!&lt;/code&gt; &lt;code&gt;v&lt;/code&gt; への参照のみが必要で、クロージャーは &lt;code&gt;v&lt;/code&gt; を借りようとします。ただし、問題があります。Rustは、生成されたスレッドが実行される時間を認識できないため、 &lt;code&gt;v&lt;/code&gt; への参照が常に有効かどうかがわかりません。</target>
        </trans-unit>
        <trans-unit id="a0209ede66a299d6f835fa4fdb4f3764cda36010" translate="yes" xml:space="preserve">
          <source>Rust Compiler Error Index</source>
          <target state="translated">Rust コンパイラエラーインデックス</target>
        </trans-unit>
        <trans-unit id="e86e2f7e2be516ce0300d8b3591468341035e99b" translate="yes" xml:space="preserve">
          <source>Rust Documentation</source>
          <target state="translated">Rust ドキュメント</target>
        </trans-unit>
        <trans-unit id="bdda1ab5e01f657b125db05f2df30c737c186ccb" translate="yes" xml:space="preserve">
          <source>Rust accomplishes this by performing monomorphization of the code that is using generics at compile time. &lt;em&gt;Monomorphization&lt;/em&gt; is the process of turning generic code into specific code by filling in the concrete types that are used when compiled.</source>
          <target state="translated">Rustは、コンパイル時にジェネリックを使用しているコードのモノモーフィゼーションを実行することでこれを実現します。&lt;em&gt;モノモーフィゼーション&lt;/em&gt;は、コンパイル時に使用される具象型を入力することにより、汎用コードを特定のコードに変換するプロセスです。</target>
        </trans-unit>
        <trans-unit id="effe1b768c4ce9dd07e450e0add6036006e9bc1f" translate="yes" xml:space="preserve">
          <source>Rust actually makes it somewhat difficult to produce this loop in the first place. In order to end up with two values that point at each other, one of them needs to be mutable. This is difficult because &lt;a href=&quot;struct.rc&quot;&gt;&lt;code&gt;Rc&lt;/code&gt;&lt;/a&gt; enforces memory safety by only giving out shared references to the value it wraps, and these don't allow direct mutation. We need to wrap the part of the value we wish to mutate in a &lt;a href=&quot;../cell/struct.refcell&quot;&gt;&lt;code&gt;RefCell&lt;/code&gt;&lt;/a&gt;, which provides &lt;em&gt;interior mutability&lt;/em&gt;: a method to achieve mutability through a shared reference. &lt;a href=&quot;../cell/struct.refcell&quot;&gt;&lt;code&gt;RefCell&lt;/code&gt;&lt;/a&gt; enforces Rust's borrowing rules at runtime.</source>
          <target state="translated">Rustは、最初からこのループを生成するのをやや難しくしています。相互を指す2つの値で終わるためには、それらの1つが変更可能である必要があります。&lt;a href=&quot;struct.rc&quot;&gt; &lt;code&gt;Rc&lt;/code&gt; &lt;/a&gt;はラップする値への共有参照のみを与えることでメモリの安全性を強化し、これらは直接の変更を許可しないため、これは困難です。変更したい値の一部を&lt;a href=&quot;../cell/struct.refcell&quot;&gt; &lt;code&gt;RefCell&lt;/code&gt; &lt;/a&gt;でラップする必要があります。これは、&lt;em&gt;内部の&lt;/em&gt;可変性を提供します。これは、共有参照を通じて可変性を実現するためのメソッドです。&lt;a href=&quot;../cell/struct.refcell&quot;&gt; &lt;code&gt;RefCell&lt;/code&gt; は&lt;/a&gt;、実行時にRustの借用ルールを適用します。</target>
        </trans-unit>
        <trans-unit id="ae0d2b578d61b694ca8792ea668e7a392f999440" translate="yes" xml:space="preserve">
          <source>Rust allows publicly re-exporting items through a &lt;code&gt;pub use&lt;/code&gt; directive. Because this is a public directive, this allows the item to be used in the current module through the rules above. It essentially allows public access into the re-exported item. For example, this program is valid:</source>
          <target state="translated">Rustでは、 &lt;code&gt;pub use&lt;/code&gt; ディレクティブを使用して、アイテムを公に再エクスポートできます。これはパブリックディレクティブであるため、上記のルールを使用して、アイテムを現在のモジュールで使用できます。本質的に、再エクスポートされたアイテムへのパブリックアクセスを許可します。たとえば、次のプログラムは有効です。</target>
        </trans-unit>
        <trans-unit id="4985d4ad4c4fe1e9dd624f9f2f34b2f73c6ed42b" translate="yes" xml:space="preserve">
          <source>Rust also brings contemporary developer tools to the systems programming world:</source>
          <target state="translated">Rustはまた、システムプログラミングの世界に現代的な開発者ツールをもたらします。</target>
        </trans-unit>
        <trans-unit id="5dd2b7d9e5548848e20c79e786ff2b0d3869e782" translate="yes" xml:space="preserve">
          <source>Rust also has a pattern we can use when we don&amp;rsquo;t want to list all possible values. For example, a &lt;code&gt;u8&lt;/code&gt; can have valid values of 0 through 255. If we only care about the values 1, 3, 5, and 7, we don&amp;rsquo;t want to have to list out 0, 2, 4, 6, 8, 9 all the way up to 255. Fortunately, we don&amp;rsquo;t have to: we can use the special pattern &lt;code&gt;_&lt;/code&gt; instead:</source>
          <target state="translated">Rustには、考えられるすべての値をリストしたくない場合に使用できるパターンもあります。たとえば、 &lt;code&gt;u8&lt;/code&gt; は0〜255の有効な値を持つことができます。値1、3、5、および7のみを考慮する場合、0、2、4、6、8をリストする必要はありません。 9から255まで。幸いなことに、私たちは特別なパターン &lt;code&gt;_&lt;/code&gt; を代わりに使うことができます：</target>
        </trans-unit>
        <trans-unit id="e19038a4b8947e67e71fb4a5db45a42bb503b2ee" translate="yes" xml:space="preserve">
          <source>Rust also has another kind of comment, documentation comments, which we&amp;rsquo;ll discuss in the &amp;ldquo;Publishing a Crate to Crates.io&amp;rdquo; section of Chapter 14.</source>
          <target state="translated">Rustには、ドキュメントコメントという別の種類のコメントもあります。これについては、第14章の「クレートをCrates.ioに公開する」セクションで説明します。</target>
        </trans-unit>
        <trans-unit id="bbdbd64aac3d17c7509c8b7d6b785d5bd17d6f9e" translate="yes" xml:space="preserve">
          <source>Rust also has two primitive types for &lt;em&gt;floating-point numbers&lt;/em&gt;, which are numbers with decimal points. Rust&amp;rsquo;s floating-point types are &lt;code&gt;f32&lt;/code&gt; and &lt;code&gt;f64&lt;/code&gt;, which are 32 bits and 64 bits in size, respectively. The default type is &lt;code&gt;f64&lt;/code&gt; because on modern CPUs it&amp;rsquo;s roughly the same speed as &lt;code&gt;f32&lt;/code&gt; but is capable of more precision.</source>
          <target state="translated">Rustには、&lt;em&gt;浮動小数点数の&lt;/em&gt; 2つのプリミティブ型もあり&lt;em&gt;ます&lt;/em&gt;。これらは小数点付きの数値です。Rustの浮動小数点型は &lt;code&gt;f32&lt;/code&gt; と &lt;code&gt;f64&lt;/code&gt; で、それぞれ32ビットと64ビットのサイズです。最近のCPUでは &lt;code&gt;f32&lt;/code&gt; とほぼ同じ速度ですが、より高い精度が可能なため、デフォルトのタイプは &lt;code&gt;f64&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="29c1f1ea8c701993d0c6c3c7c3f0fda1a6673205" translate="yes" xml:space="preserve">
          <source>Rust and Cargo have features that help make your published package easier for people to use and to find in the first place. We&amp;rsquo;ll talk about some of these features next and then explain how to publish a package.</source>
          <target state="translated">RustとCargoには、公開されたパッケージを人々が使いやすく、そもそも見つけやすくする機能があります。次に、これらの機能のいくつかについて説明し、次にパッケージを公開する方法を説明します。</target>
        </trans-unit>
        <trans-unit id="7f3133698a0220ad7c68f52e85cdd6fbb05996b0" translate="yes" xml:space="preserve">
          <source>Rust attempts to mitigate the negative effects of using threads, but programming in a multithreaded context still takes careful thought and requires a code structure that is different from that in programs running in a single thread.</source>
          <target state="translated">Rust はスレッドを使用することによる悪影響を軽減しようとしていますが、マルチスレッドのコンテキストでのプログラミングには慎重な検討が必要で、シングルスレッドで実行されるプログラムとは異なるコード構造が必要です。</target>
        </trans-unit>
        <trans-unit id="c689ed78369011848abbd3ac8af6ba4c0ea496a6" translate="yes" xml:space="preserve">
          <source>Rust automatically called &lt;code&gt;drop&lt;/code&gt; for us when our instances went out of scope, calling the code we specified. Variables are dropped in the reverse order of their creation, so &lt;code&gt;d&lt;/code&gt; was dropped before &lt;code&gt;c&lt;/code&gt;. This example gives you a visual guide to how the &lt;code&gt;drop&lt;/code&gt; method works; usually you would specify the cleanup code that your type needs to run rather than a print message.</source>
          <target state="translated">Rustは、インスタンスがスコープ外に出ると自動的に &lt;code&gt;drop&lt;/code&gt; を呼び出し、指定したコードを呼び出しました。変数は作成時と逆の順序で削除されるため、 &lt;code&gt;d&lt;/code&gt; は &lt;code&gt;c&lt;/code&gt; の前に削除されました。この例は、 &lt;code&gt;drop&lt;/code&gt; メソッドがどのように機能するかを視覚的に示しています。通常は、印刷メッセージではなく、タイプで実行する必要があるクリーンアップコードを指定します。</target>
        </trans-unit>
        <trans-unit id="cb4fa52344abf16e13622ef8bb3c3893fe286a01" translate="yes" xml:space="preserve">
          <source>Rust breaks down these barriers by eliminating the old pitfalls and providing a friendly, polished set of tools to help you along the way. Programmers who need to &amp;ldquo;dip down&amp;rdquo; into lower-level control can do so with Rust, without taking on the customary risk of crashes or security holes, and without having to learn the fine points of a fickle toolchain. Better yet, the language is designed to guide you naturally towards reliable code that is efficient in terms of speed and memory usage.</source>
          <target state="translated">Rustは、古い落とし穴をなくし、友好的で洗練された一連のツールを提供することで、これらの障壁を取り除きます。下位レベルの制御に「浸る」必要があるプログラマは、クラッシュやセキュリティホールの通常のリスクを負うことなく、また気まぐれなツールチェーンの細かい点を学ぶ必要なく、Rustを使用してこれを行うことができます。さらに良いことに、この言語は、速度とメモリ使用量の点で効率的な信頼できるコードに自然に導くように設計されています。</target>
        </trans-unit>
        <trans-unit id="cdaf4a6bf131d48ffa2af0a612ccc9c24734bcff" translate="yes" xml:space="preserve">
          <source>Rust can tell that &lt;code&gt;c&lt;/code&gt; is within the first pattern&amp;rsquo;s range and prints &lt;code&gt;early ASCII letter&lt;/code&gt;.</source>
          <target state="translated">Rustは、 &lt;code&gt;c&lt;/code&gt; が最初のパターンの範囲内にあることを認識し、 &lt;code&gt;early ASCII letter&lt;/code&gt; を出力します。</target>
        </trans-unit>
        <trans-unit id="f0aa4b6eb356ff042802f189c6b9ce9b6d9bb7f5" translate="yes" xml:space="preserve">
          <source>Rust can&amp;rsquo;t figure out how much space to allocate for recursively defined types, so the compiler gives the error in Listing 15-4. But the error does include this helpful suggestion:</source>
          <target state="translated">Rustは再帰的に定義された型に割り当てるスペースの量を把握できないため、コンパイラーはリスト15-4のエラーを出します。しかし、エラーにはこの役立つ提案が含まれています。</target>
        </trans-unit>
        <trans-unit id="9cb61601ebccc0f0be25f7b4aa2fa6eed3577955" translate="yes" xml:space="preserve">
          <source>Rust can&amp;rsquo;t possibly know which of the two arguments we need, so we need to tell it. Because &lt;code&gt;contents&lt;/code&gt; is the argument that contains all of our text and we want to return the parts of that text that match, we know &lt;code&gt;contents&lt;/code&gt; is the argument that should be connected to the return value using the lifetime syntax.</source>
          <target state="translated">Rustは必要な2つの引数のどちらかを知ることができないため、それを伝える必要があります。ので &lt;code&gt;contents&lt;/code&gt; 一致し、我々が知っていることを、私たちのすべてのテキストが含まれている引数であり、我々はそのテキストの一部を返したい &lt;code&gt;contents&lt;/code&gt; 生涯の構文を使用して、戻り値に接続する必要が引数です。</target>
        </trans-unit>
        <trans-unit id="51a6c6ddffe8c70b5e18c5cd678688a6e33bff5b" translate="yes" xml:space="preserve">
          <source>Rust chose to have the module system function this way so that hiding inner implementation details is the default. That way, you know which parts of the inner code you can change without breaking outer code. But you can expose inner parts of child modules code to outer ancestor modules by using the &lt;code&gt;pub&lt;/code&gt; keyword to make an item public.</source>
          <target state="translated">Rustは、モジュールシステムをこのように機能させることを選択したため、内部実装の詳細を非表示にすることがデフォルトです。これにより、外部コードを壊すことなく、内部コードのどの部分を変更できるかがわかります。ただし、 &lt;code&gt;pub&lt;/code&gt; キーワードを使用してアイテムをパブリックにすることで、子モジュールコードの内部を外部の祖先モジュールに公開できます。</target>
        </trans-unit>
        <trans-unit id="e084b33e4de65ea0dae7e0617381c6117a4a157d" translate="yes" xml:space="preserve">
          <source>Rust code uses &lt;em&gt;snake case&lt;/em&gt; as the conventional style for function and variable names. In snake case, all letters are lowercase and underscores separate words. Here&amp;rsquo;s a program that contains an example function definition:</source>
          <target state="translated">Rustコードでは、関数名と変数名の従来のスタイルとして&lt;em&gt;スネークケース&lt;/em&gt;を使用しています。ヘビの場合、すべての文字は小文字で、下線は別個の単語です。次に、関数定義の例を含むプログラムを示します。</target>
        </trans-unit>
        <trans-unit id="e2a256ae150c413740aa7cd085658b2d9a62fbaa" translate="yes" xml:space="preserve">
          <source>Rust code, including within &lt;code&gt;unsafe&lt;/code&gt; blocks and &lt;code&gt;unsafe&lt;/code&gt; functions is incorrect if it exhibits any of the behaviors in the following list. It is the programmer's responsibility when writing &lt;code&gt;unsafe&lt;/code&gt; code that it is not possible to let &lt;code&gt;safe&lt;/code&gt; code exhibit these behaviors.</source>
          <target state="translated">&lt;code&gt;unsafe&lt;/code&gt; でないブロックや &lt;code&gt;unsafe&lt;/code&gt; 関数内に含まれるRustコードは、次のリストのいずれかの動作を示す場合は正しくありません。書くときにはプログラマの責任である &lt;code&gt;unsafe&lt;/code&gt; コードを、それを聞かせすることはできないことを &lt;code&gt;safe&lt;/code&gt; コードはこれらの動作を示します。</target>
        </trans-unit>
        <trans-unit id="267e97a30b8e7e2b82eb0bd15c0545ae0f9ce0a2" translate="yes" xml:space="preserve">
          <source>Rust comes with a variety of things in its standard library. However, if you had to manually import every single thing that you used, it would be very verbose. But importing a lot of things that a program never uses isn't good either. A balance needs to be struck.</source>
          <target state="translated">Rustには標準ライブラリに様々なものが付属しています。しかし、使ったものをいちいち手動でインポートしなければならないとなると、非常に冗長になってしまいます。しかし、プログラムが絶対に使わないものをたくさんインポートするのも良くありません。バランスをとる必要があります。</target>
        </trans-unit>
        <trans-unit id="30050a292030028105b725a80cfd11137e292a84" translate="yes" xml:space="preserve">
          <source>Rust complains that it doesn&amp;rsquo;t make sense to use &lt;code&gt;if let&lt;/code&gt; with an irrefutable pattern:</source>
          <target state="translated">Rust は、反駁できないパターンで &lt;code&gt;if let&lt;/code&gt; した場合、使用しても意味がないと不平を言っています。</target>
        </trans-unit>
        <trans-unit id="151a36819a9041707f7a83143365261d69ad15c3" translate="yes" xml:space="preserve">
          <source>Rust de-sugars this into:</source>
          <target state="translated">サビはこれを脱糖する</target>
        </trans-unit>
        <trans-unit id="7f9478ac9f9f1e9c53d0bbd8f2f29a740e10b88f" translate="yes" xml:space="preserve">
          <source>Rust development operates on a &lt;em&gt;train schedule&lt;/em&gt;. That is, all development is done on the &lt;code&gt;master&lt;/code&gt; branch of the Rust repository. Releases follow a software release train model, which has been used by Cisco IOS and other software projects. There are three &lt;em&gt;release channels&lt;/em&gt; for Rust:</source>
          <target state="translated">錆の開発は&lt;em&gt;列車のスケジュールで行われ&lt;/em&gt;ます。つまり、すべての開発はRustリポジトリの &lt;code&gt;master&lt;/code&gt; ブランチで行われます。リリースは、Cisco IOSおよびその他のソフトウェアプロジェクトで使用されているソフトウェアリリーストレインモデルに従います。Rustには3つの&lt;em&gt;リリースチャネル&lt;/em&gt;があります。</target>
        </trans-unit>
        <trans-unit id="c1ceba7cafe03c43c23515eea22061c0156f8ee3" translate="yes" xml:space="preserve">
          <source>Rust divides keywords into three categories:</source>
          <target state="translated">ラストはキーワードを3つに分けています。</target>
        </trans-unit>
        <trans-unit id="520af2b0caca1d9f181466e2056d3f0b0b57619e" translate="yes" xml:space="preserve">
          <source>Rust does deref coercion when it finds types and trait implementations in three cases:</source>
          <target state="translated">Rustは、3つのケースで型や形質の実装を見つけると、強制的に deref を行います。</target>
        </trans-unit>
        <trans-unit id="44dd2f2386da2c0cdd5e7d3c775c2fc5131419be" translate="yes" xml:space="preserve">
          <source>Rust does not currently have a rigorously and formally defined memory model, so the precise semantics of what &quot;volatile&quot; means here is subject to change over time. That being said, the semantics will almost always end up pretty similar to &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf&quot;&gt;C11's definition of volatile&lt;/a&gt;.</source>
          <target state="translated">現在、Rustには厳密かつ正式に定義されたメモリモデルがないため、ここでの「揮発性」の意味の正確なセマンティクスは、時間とともに変化する可能性があります。そうは言っても、セマンティクスはほとんどの場合、&lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf&quot;&gt;C11のvolatileの定義に&lt;/a&gt;かなり似たものになります。</target>
        </trans-unit>
        <trans-unit id="2f345e86ce4bdfb609568cfe8dcd5b348d517588" translate="yes" xml:space="preserve">
          <source>Rust does not permit a closure to directly reference its own type, either through an argument (as in the example above) or by capturing itself through its environment. This restriction helps keep closure inference tractable.</source>
          <target state="translated">Rustでは、クロージャが(上記の例のように)引数を介して、あるいは環境を介して自身の型を直接参照することはできません。この制限はクロージャの推論を扱いやすくするのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="e25c8c25102888075b13676dc7cdde6255be9b8e" translate="yes" xml:space="preserve">
          <source>Rust does not yet have a defined memory model. Various academics and industry are working on various proposals, but for now, this is an under-defined place in the language.</source>
          <target state="translated">Rustにはまだ定義されたメモリモデルがありません。様々な学者や業界が様々な提案をしていますが、今のところ言語の中では未定義なところです。</target>
        </trans-unit>
        <trans-unit id="34f3af8d8ef49dee8de54e673fbeb4ddba63eab4" translate="yes" xml:space="preserve">
          <source>Rust doesn&amp;rsquo;t allow you to create your own operators or overload arbitrary operators. But you can overload the operations and corresponding traits listed in &lt;code&gt;std::ops&lt;/code&gt; by implementing the traits associated with the operator. For example, in Listing 19-14 we overload the &lt;code&gt;+&lt;/code&gt; operator to add two &lt;code&gt;Point&lt;/code&gt; instances together. We do this by implementing the &lt;code&gt;Add&lt;/code&gt; trait on a &lt;code&gt;Point&lt;/code&gt; struct:</source>
          <target state="translated">Rustでは、独自の演算子を作成したり、任意の演算子をオーバーロードしたりすることはできません。ただし、演算子に関連付けられた特性を実装することで、 &lt;code&gt;std::ops&lt;/code&gt; リストされている操作と対応する特性をオーバーロードできます。たとえば、リスト19-14では、 &lt;code&gt;+&lt;/code&gt; 演算子をオーバーロードして、2つの &lt;code&gt;Point&lt;/code&gt; インスタンスを一緒に追加しています。これを行うには、 &lt;code&gt;Point&lt;/code&gt; 構造体に &lt;code&gt;Add&lt;/code&gt; トレイトを実装します。</target>
        </trans-unit>
        <trans-unit id="c421a151bfbb2f6d54a7d626539462864b68cd48" translate="yes" xml:space="preserve">
          <source>Rust doesn&amp;rsquo;t have an equivalent to the &lt;code&gt;-&amp;gt;&lt;/code&gt; operator; instead, Rust has a feature called &lt;em&gt;automatic referencing and dereferencing&lt;/em&gt;. Calling methods is one of the few places in Rust that has this behavior.</source>
          <target state="translated">Rustには &lt;code&gt;-&amp;gt;&lt;/code&gt; 演算子に相当するものはありません。代わりに、Rustには&lt;em&gt;自動参照と自動参照と&lt;/em&gt;呼ばれる機能があります。メソッドの呼び出しは、Rustでこの動作を行う数少ない場所の1つです。</target>
        </trans-unit>
        <trans-unit id="5b42e515beb4780bad0d430e54e0d456e0ed5719" translate="yes" xml:space="preserve">
          <source>Rust doesn&amp;rsquo;t have objects in the same sense as other languages have objects, and Rust doesn&amp;rsquo;t have mock object functionality built into the standard library as some other languages do. However, you can definitely create a struct that will serve the same purposes as a mock object.</source>
          <target state="translated">Rustには他の言語のオブジェクトと同じ意味のオブジェクトはありません。また、Rustには、他の一部の言語のように標準ライブラリに組み込まれたモックオブジェクト機能はありません。ただし、モックオブジェクトと同じ目的に役立つ構造体を作成することは間違いありません。</target>
        </trans-unit>
        <trans-unit id="742db479bb4771b176a5e708d26cf5692112a273" translate="yes" xml:space="preserve">
          <source>Rust doesn&amp;rsquo;t let us call &lt;code&gt;drop&lt;/code&gt; explicitly because Rust would still automatically call &lt;code&gt;drop&lt;/code&gt; on the value at the end of &lt;code&gt;main&lt;/code&gt;. This would be a &lt;em&gt;double free&lt;/em&gt; error because Rust would be trying to clean up the same value twice.</source>
          <target state="translated">Rustは &lt;code&gt;main&lt;/code&gt; の最後にある値に対して &lt;code&gt;drop&lt;/code&gt; を自動的に呼び出すため、Rustは明示的に &lt;code&gt;drop&lt;/code&gt; を呼び出しません。Rustは同じ値を2回クリーンアップしようとしているため、これは&lt;em&gt;二重解放&lt;/em&gt;エラーになります。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a5ddfc059c10a99d099217277479972f1dff9d9d" translate="yes" xml:space="preserve">
          <source>Rust enforces that there can only be one mutable reference to a particular piece of data in a particular scope. Because of this, attempting to use &lt;code&gt;swap_with_slice&lt;/code&gt; on a single slice will result in a compile failure:</source>
          <target state="translated">Rustは、特定のスコープ内の特定のデータへの変更可能な参照は1つだけであることを強制します。このため、単一のスライスで &lt;code&gt;swap_with_slice&lt;/code&gt; を使用しようとすると、コンパイルエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="b8796c82063dd394ca7b901b43bcdd5623524f60" translate="yes" xml:space="preserve">
          <source>Rust enforces that there can only be one mutable reference with no immutable references to a particular piece of data in a particular scope. Because of this, attempting to use &lt;code&gt;clone_from_slice&lt;/code&gt; on a single slice will result in a compile failure:</source>
          <target state="translated">Rustは、特定のスコープ内の特定のデータへの不変の参照がなく、変更可能な参照は1つだけであることを強制します。このため、単一のスライスで &lt;code&gt;clone_from_slice&lt;/code&gt; を使用しようとすると、コンパイルが失敗します。</target>
        </trans-unit>
        <trans-unit id="706c743ee2c8c57c9cf12e956040ea8994faeb61" translate="yes" xml:space="preserve">
          <source>Rust enforces that there can only be one mutable reference with no immutable references to a particular piece of data in a particular scope. Because of this, attempting to use &lt;code&gt;copy_from_slice&lt;/code&gt; on a single slice will result in a compile failure:</source>
          <target state="translated">Rustは、特定のスコープ内の特定のデータへの不変の参照がなく、変更可能な参照は1つだけであることを強制します。このため、単一のスライスで &lt;code&gt;copy_from_slice&lt;/code&gt; を使用しようとすると、コンパイルエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="89181f89a95db183f5b3d8303bfdfb2bc964fac0" translate="yes" xml:space="preserve">
          <source>Rust groups errors into two major categories: &lt;em&gt;recoverable&lt;/em&gt; and &lt;em&gt;unrecoverable&lt;/em&gt; errors. For a recoverable error, such as a file not found error, it&amp;rsquo;s reasonable to report the problem to the user and retry the operation. Unrecoverable errors are always symptoms of bugs, like trying to access a location beyond the end of an array.</source>
          <target state="translated">Rustはエラーを2つの主要なカテゴリにグループ化します。&lt;em&gt;回復可能&lt;/em&gt;&lt;em&gt;な&lt;/em&gt;エラーと&lt;em&gt;回復不可能な&lt;/em&gt;エラーです。ファイルが見つからないなどの回復可能なエラーの場合は、ユーザーに問題を報告して操作を再試行するのが妥当です。回復不可能なエラーは常に、アレイの末尾を超えた場所にアクセスしようとするなど、バグの症状です。</target>
        </trans-unit>
        <trans-unit id="17426c688445460fafbc02d6e3ab0f35fb6f21ba" translate="yes" xml:space="preserve">
          <source>Rust has a helpful method to handle line-by-line iteration of strings, conveniently named &lt;code&gt;lines&lt;/code&gt;, that works as shown in Listing 12-17. Note this won&amp;rsquo;t compile yet.</source>
          <target state="translated">錆が便利という名前の文字列のハンドルライン・バイ・ラインの繰り返しに役立つ方法がある &lt;code&gt;lines&lt;/code&gt; リスト12-17のように動作します。これはまだコンパイルされないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="1d698a54ce65a1a8a252d0c52823bbef706cfe2a" translate="yes" xml:space="preserve">
          <source>Rust has a number of features that allow you to manage your code&amp;rsquo;s organization, including which details are exposed, which details are private, and what names are in each scope in your programs. These features, sometimes collectively referred to as the &lt;em&gt;module system&lt;/em&gt;, and include:</source>
          <target state="translated">Rustには、公開する詳細、非公開の詳細、プログラムの各スコープに含まれる名前など、コードの編成を管理できるいくつかの機能があります。これらの機能は、まとめて&lt;em&gt;モジュールシステム&lt;/em&gt;と呼ばれることもあり、次のものが含まれます。</target>
        </trans-unit>
        <trans-unit id="49935161924130a0652e8dffafd8b2c317e5e61b" translate="yes" xml:space="preserve">
          <source>Rust has a special annotation called the &lt;code&gt;Copy&lt;/code&gt; trait that we can place on types like integers that are stored on the stack (we&amp;rsquo;ll talk more about traits in Chapter 10). If a type has the &lt;code&gt;Copy&lt;/code&gt; trait, an older variable is still usable after assignment. Rust won&amp;rsquo;t let us annotate a type with the &lt;code&gt;Copy&lt;/code&gt; trait if the type, or any of its parts, has implemented the &lt;code&gt;Drop&lt;/code&gt; trait. If the type needs something special to happen when the value goes out of scope and we add the &lt;code&gt;Copy&lt;/code&gt; annotation to that type, we&amp;rsquo;ll get a compile-time error. To learn about how to add the &lt;code&gt;Copy&lt;/code&gt; annotation to your type, see &lt;a href=&quot;appendix-03-derivable-traits&quot;&gt;&amp;ldquo;Derivable Traits&amp;rdquo;&lt;/a&gt; in Appendix C.</source>
          <target state="translated">Rustには、スタックに格納されている整数などの型に配置できる &lt;code&gt;Copy&lt;/code&gt; トレイトと呼ばれる特別な注釈があります（トレイトについては、第10章で詳しく説明します）。タイプに &lt;code&gt;Copy&lt;/code&gt; トレイトがある場合、割り当て後も古い変数を使用できます。タイプまたはその一部が &lt;code&gt;Drop&lt;/code&gt; トレイトを実装している場合、Rustはタイプに &lt;code&gt;Copy&lt;/code&gt; トレイトのアノテーションを付けません。値がスコープ外に出たときに型に特別な処理が必要な場合、その型に &lt;code&gt;Copy&lt;/code&gt; アノテーションを追加すると、コンパイル時エラーが発生します。タイプに &lt;code&gt;Copy&lt;/code&gt; アノテーションを追加する方法については、付録Cの&lt;a href=&quot;appendix-03-derivable-traits&quot;&gt;「派生可能な特性」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="eb74ed2b9f402bf372b86ede78b5b956776b5eac" translate="yes" xml:space="preserve">
          <source>Rust has a special type named &lt;code&gt;!&lt;/code&gt; that&amp;rsquo;s known in type theory lingo as the &lt;em&gt;empty type&lt;/em&gt; because it has no values. We prefer to call it the &lt;em&gt;never type&lt;/em&gt; because it stands in the place of the return type when a function will never return. Here is an example:</source>
          <target state="translated">Rustには &lt;code&gt;!&lt;/code&gt; という名前の特別なタイプがあります。型理論では、値がないため、&lt;em&gt;空の型&lt;/em&gt;として知られています。関数が決して戻らない場合は、戻り型の代わりに使用されるため、&lt;em&gt;決して型&lt;/em&gt;とは呼びません。次に例を示します。</target>
        </trans-unit>
        <trans-unit id="e20f831507fc3015fa4b5f62f8ae95078cffc507" translate="yes" xml:space="preserve">
          <source>Rust has an extremely powerful control flow operator called &lt;code&gt;match&lt;/code&gt; that allows you to compare a value against a series of patterns and then execute code based on which pattern matches. Patterns can be made up of literal values, variable names, wildcards, and many other things; Chapter 18 covers all the different kinds of patterns and what they do. The power of &lt;code&gt;match&lt;/code&gt; comes from the expressiveness of the patterns and the fact that the compiler confirms that all possible cases are handled.</source>
          <target state="translated">Rustには &lt;code&gt;match&lt;/code&gt; と呼ばれる非常に強力な制御フロー演算子があり、値を一連のパターンと比較し、どのパターンが一致するかに基づいてコードを実行できます。パターンは、リテラル値、変数名、ワイルドカード、その他多くのもので構成できます。第18章では、さまざまな種類のパターンとそれらの機能について説明します。 &lt;code&gt;match&lt;/code&gt; の力は、パターンの表現力と、コンパイラーがすべての可能なケースが処理されていることを確認するという事実に由来します。</target>
        </trans-unit>
        <trans-unit id="274075ef85f35df55435242c1d906ad5d8960c88" translate="yes" xml:space="preserve">
          <source>Rust has provided a number of traits for us to use with the &lt;code&gt;derive&lt;/code&gt; annotation that can add useful behavior to our custom types. Those traits and their behaviors are listed in Appendix C. We&amp;rsquo;ll cover how to implement these traits with custom behavior as well as how to create your own traits in Chapter 10.</source>
          <target state="translated">Rustは、カスタム型に有用な動作を追加できる &lt;code&gt;derive&lt;/code&gt; アノテーションで使用できるいくつかの特性を提供しています。これらの特性とその動作は付録Cにリストされています。カスタム動作でこれらの特性を実装する方法と、独自の特性を作成する方法については、第10章で説明します。</target>
        </trans-unit>
        <trans-unit id="9abfc06989ca660b27a8bdfcf34e581735c33394" translate="yes" xml:space="preserve">
          <source>Rust has rules that allow lifetimes to be elided in various places where the compiler can infer a sensible default choice.</source>
          <target state="translated">Rustには、コンパイラが賢明なデフォルトの選択を推測できる様々な場所でライフタイムを省略できるルールがあります。</target>
        </trans-unit>
        <trans-unit id="f8345bc804bda40bffec95786aae64fa77a56f07" translate="yes" xml:space="preserve">
          <source>Rust has three kinds of loops: &lt;code&gt;loop&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, and &lt;code&gt;for&lt;/code&gt;. Let&amp;rsquo;s try each one.</source>
          <target state="translated">Rustには、 &lt;code&gt;loop&lt;/code&gt; 、 &lt;code&gt;while&lt;/code&gt; 、 &lt;code&gt;for&lt;/code&gt; の 3種類のループがあります。それぞれ試してみましょう。</target>
        </trans-unit>
        <trans-unit id="1a4b07d2a6fb6a7fe95444fa2c7afda8086fcf0c" translate="yes" xml:space="preserve">
          <source>Rust has two kinds of statement: &lt;a href=&quot;statements#declaration-statements&quot;&gt;declaration statements&lt;/a&gt; and &lt;a href=&quot;statements#expression-statements&quot;&gt;expression statements&lt;/a&gt;.</source>
          <target state="translated">Rustには、&lt;a href=&quot;statements#declaration-statements&quot;&gt;宣言ステートメント&lt;/a&gt;と&lt;a href=&quot;statements#expression-statements&quot;&gt;式ステートメントの&lt;/a&gt; 2種類のステートメントがあります。</target>
        </trans-unit>
        <trans-unit id="005babc4bad22226436a0f4a1424db5097b9ced6" translate="yes" xml:space="preserve">
          <source>Rust has two ways to reference an element so you can choose how the program behaves when you try to use an index value that the vector doesn&amp;rsquo;t have an element for. As an example, let&amp;rsquo;s see what a program will do if it has a vector that holds five elements and then tries to access an element at index 100, as shown in Listing 8-6.</source>
          <target state="translated">Rustには要素を参照する方法が2つあるので、ベクトルに要素がないインデックス値を使用しようとした場合のプログラムの動作を選択できます。例として、リスト8-6に示すように、プログラムに5つの要素を保持するベクトルがあり、インデックス100の要素にアクセスしようとした場合のプログラムを見てみましょう。</target>
        </trans-unit>
        <trans-unit id="8024edbf38de66c89e3d81c184c687bc31f1dd00" translate="yes" xml:space="preserve">
          <source>Rust input is interpreted as a sequence of Unicode code points encoded in UTF-8.</source>
          <target state="translated">Rust の入力は、UTF-8 でエンコードされた Unicode コードポイントのシーケンスとして解釈されます。</target>
        </trans-unit>
        <trans-unit id="c8cbae13f648a692e7452cc98631131e1d6323f2" translate="yes" xml:space="preserve">
          <source>Rust instead uses generics to abstract over different possible types and trait bounds to impose constraints on what those types must provide. This is sometimes called &lt;em&gt;bounded parametric polymorphism&lt;/em&gt;.</source>
          <target state="translated">Rustは代わりにジェネリックを使用して、考えられるさまざまなタイプと特性の境界を抽象化し、それらのタイプが提供する必要があるものに制約を課します。これは、「&lt;em&gt;境界パラメトリック多態性」&lt;/em&gt;と呼ばれることもあります。</target>
        </trans-unit>
        <trans-unit id="b1053cabf6d03bc378398388561e05d76d497e05" translate="yes" xml:space="preserve">
          <source>Rust is &lt;em&gt;primarily&lt;/em&gt; an expression language. This means that most forms of value-producing or effect-causing evaluation are directed by the uniform syntax category of &lt;em&gt;expressions&lt;/em&gt;. Each kind of expression can typically &lt;em&gt;nest&lt;/em&gt; within each other kind of expression, and rules for evaluation of expressions involve specifying both the value produced by the expression and the order in which its sub-expressions are themselves evaluated.</source>
          <target state="translated">Rustは&lt;em&gt;主に&lt;/em&gt;式言語です。つまり、価値を生み出す、または効果をもたらす評価のほとんどの形式は、&lt;em&gt;式の&lt;/em&gt;統一構文カテゴリによって指示されます。各種類の式は、通常、他の種類の式の中に&lt;em&gt;入れ子&lt;/em&gt;にすることができ、式の評価の規則には、式によって生成される値と、そのサブ式自体が評価される順序の両方を指定することが含まれます。</target>
        </trans-unit>
        <trans-unit id="5db5878515e4389bbf8421d74fcb5d667d66d9ab" translate="yes" xml:space="preserve">
          <source>Rust is a &quot;free-form&quot; language, meaning that all forms of whitespace serve only to separate &lt;em&gt;tokens&lt;/em&gt; in the grammar, and have no semantic significance.</source>
          <target state="translated">Rustは「自由形式」の言語です。つまり、すべての形式の空白は、文法で&lt;em&gt;トークン&lt;/em&gt;を分離&lt;em&gt;する&lt;/em&gt;ためにのみ機能し、意味上の意味はありません。</target>
        </trans-unit>
        <trans-unit id="3cea4d3df9c4c79e41064c918cdf547361978c7e" translate="yes" xml:space="preserve">
          <source>Rust is for people who crave speed and stability in a language. By speed, we mean the speed of the programs that you can create with Rust and the speed at which Rust lets you write them. The Rust compiler&amp;rsquo;s checks ensure stability through feature additions and refactoring. This is in contrast to the brittle legacy code in languages without these checks, which developers are often afraid to modify. By striving for zero-cost abstractions, higher-level features that compile to lower-level code as fast as code written manually, Rust endeavors to make safe code be fast code as well.</source>
          <target state="translated">Rustは、言語のスピードと安定性を渇望する人々のためのものです。速度とは、Rustで作成できるプログラムの速度と、Rustでプログラムを作成できる速度を意味します。Rustコンパイラのチェックは、機能の追加とリファクタリングを通じて安定性を保証します。これは、これらのチェックを行わない言語の脆弱なレガシーコードとは対照的です。これらのチェックは、開発者が変更を恐れています。ゼロコストの抽象化、低レベルのコードにコンパイルして手動で記述したコードと同じくらい高速な機能を追求することにより、Rustは安全なコードも高速なコードになるように努めています。</target>
        </trans-unit>
        <trans-unit id="7bf10b5f2d62512e2d305590c2208014f45470d4" translate="yes" xml:space="preserve">
          <source>Rust is for people who want to build the Rust programming language, community, developer tools, and libraries. We&amp;rsquo;d love to have you contribute to the Rust language.</source>
          <target state="translated">Rustは、Rustプログラミング言語、コミュニティ、開発者ツール、およびライブラリを構築したい人向けです。Rust言語に貢献していただきたいと思います。</target>
        </trans-unit>
        <trans-unit id="2dd06888c30776a4c25d59c7d1262374011d3d0b" translate="yes" xml:space="preserve">
          <source>Rust is for students and those who are interested in learning about systems concepts. Using Rust, many people have learned about topics like operating systems development. The community is very welcoming and happy to answer student questions. Through efforts such as this book, the Rust teams want to make systems concepts more accessible to more people, especially those new to programming.</source>
          <target state="translated">Rustは、学生やシステムの概念を学ぶことに興味がある人のためのものです。Rustを使って、多くの人がオペレーティングシステム開発のようなトピックについて学んでいます。コミュニティは非常に歓迎されており、学生の質問に喜んで答えてくれます。この本のような取り組みを通じて、Rust チームは、システムの概念をより多くの人、特にプログラミングに慣れていない人にもっと身近なものにしたいと考えています。</target>
        </trans-unit>
        <trans-unit id="fe5a0dfe919ae890cb83e73c25365cbc5b82b5b4" translate="yes" xml:space="preserve">
          <source>Rust is ideal for many people for a variety of reasons. Let&amp;rsquo;s look at a few of the most important groups.</source>
          <target state="translated">Rustはさまざまな理由で多くの人にとって理想的です。最も重要なグループのいくつかを見てみましょう。</target>
        </trans-unit>
        <trans-unit id="42421e785d37bc9b73d820b74a50d1fba537bea2" translate="yes" xml:space="preserve">
          <source>Rust is not a particularly original language, with design elements coming from a wide range of sources. Some of these are listed below (including elements that have since been removed):</source>
          <target state="translated">Rust は特に独創的な言語ではなく、デザイン要素は様々なソースから来ています。そのうちのいくつかを以下に示します (その後削除された要素を含む)。</target>
        </trans-unit>
        <trans-unit id="b44eb4eed4591a2484384d8f13e00b4678784a52" translate="yes" xml:space="preserve">
          <source>Rust is proving to be a productive tool for collaborating among large teams of developers with varying levels of systems programming knowledge. Low-level code is prone to a variety of subtle bugs, which in most other languages can be caught only through extensive testing and careful code review by experienced developers. In Rust, the compiler plays a gatekeeper role by refusing to compile code with these elusive bugs, including concurrency bugs. By working alongside the compiler, the team can spend their time focusing on the program&amp;rsquo;s logic rather than chasing down bugs.</source>
          <target state="translated">Rustは、さまざまなレベルのシステムプログラミングの知識を持つ開発者の大規模なチーム間でコラボレーションするための生産的なツールであることを証明しています。低レベルのコードにはさまざまな微妙なバグが発生する傾向があり、他のほとんどの言語では、経験豊富な開発者による広範なテストと注意深いコードレビューによってのみ発見できます。Rustでは、同時実行性のバグを含むこれらのとらえどころのないバグでコードをコンパイルすることを拒否することにより、コンパイラーはゲートキーパーの役割を果たします。コンパイラーと一緒に作業することにより、チームはバグを追跡するのではなく、プログラムのロジックに集中することに時間を費やすことができます。</target>
        </trans-unit>
        <trans-unit id="e7fcfa2c0e9d01cf1bef3a319720c713bacd4522" translate="yes" xml:space="preserve">
          <source>Rust is still a work in progress with places where the compiler could be improved, but in the future, the code in Listing 20-20 should work just fine. People just like you are working to fix this and other issues! After you&amp;rsquo;ve finished this book, we would love for you to join in.</source>
          <target state="translated">Rustはコンパイラが改善される可能性のある場所でまだ進行中の作業ですが、将来的には、リスト20-20のコードは問題なく動作するはずです。あなたと同じような人々がこの問題やその他の問題を修正しようとしています！この本が完成したら、ぜひ参加してください。</target>
        </trans-unit>
        <trans-unit id="009bd344314f5929e591a576862f0addd792ad2d" translate="yes" xml:space="preserve">
          <source>Rust itself does not have a Python-like equivalent of named parameters to a function, but the &lt;a href=&quot;../macro.format&quot;&gt;&lt;code&gt;format!&lt;/code&gt;&lt;/a&gt; macro is a syntax extension which allows it to leverage named parameters. Named parameters are listed at the end of the argument list and have the syntax:</source>
          <target state="translated">Rust自体には、関数の名前付きパラメーターに相当するPythonのようなパラメーターはありませんが、&lt;a href=&quot;../macro.format&quot;&gt; &lt;code&gt;format!&lt;/code&gt; &lt;/a&gt;マクロは、名前付きパラメーターを活用できるようにする構文拡張です。名前付きパラメーターは引数リストの最後にリストされ、構文は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="5773a78f91f6dd61a894f54aca9217a3e2589f2c" translate="yes" xml:space="preserve">
          <source>Rust knows that we didn&amp;rsquo;t cover every possible case and even knows which pattern we forgot! Matches in Rust are &lt;em&gt;exhaustive&lt;/em&gt;: we must exhaust every last possibility in order for the code to be valid. Especially in the case of &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt;, when Rust prevents us from forgetting to explicitly handle the &lt;code&gt;None&lt;/code&gt; case, it protects us from assuming that we have a value when we might have null, thus making the billion-dollar mistake discussed earlier.</source>
          <target state="translated">ラストは、すべての可能性のあるケースをカバーしたわけではなく、どのパターンを忘れたかさえ知っています！Rustでの一致は&lt;em&gt;完全&lt;/em&gt;なものです。コードを有効にするには、すべての可能性を&lt;em&gt;網羅&lt;/em&gt;する必要があります。特に &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; 場合、Rustが明示的に &lt;code&gt;None&lt;/code&gt; ケースを処理することを忘れないようにすることで、nullがある可能性があるときに値があると想定することから保護され、前述の10億ドルの間違いを犯します。</target>
        </trans-unit>
        <trans-unit id="6037ceeea4fb74411f6b08d6b6645ce5f8d0bdce" translate="yes" xml:space="preserve">
          <source>Rust lets you organize your packages into crates and your crates into modules so you can refer to items defined in one module from another module. You can do this by specifying absolute or relative paths. These paths can be brought into scope with a &lt;code&gt;use&lt;/code&gt; statement so you can use a shorter path for multiple uses of the item in that scope. Module code is private by default, but you can make definitions public by adding the &lt;code&gt;pub&lt;/code&gt; keyword.</source>
          <target state="translated">Rustを使用すると、パッケージをクレートに、クレートをモジュールに編成できるため、あるモジュールで定義されたアイテムを別のモジュールから参照できます。これを行うには、絶対パスまたは相対パスを指定します。これらのパスは、 &lt;code&gt;use&lt;/code&gt; ステートメントを使用してスコープに入れることができるので、そのスコープ内のアイテムを複数回使用するために短いパスを使用できます。モジュールコードはデフォルトで非公開ですが、 &lt;code&gt;pub&lt;/code&gt; キーワードを追加することで定義を公開できます。</target>
        </trans-unit>
        <trans-unit id="d3bfbc1a861d0c5db39d3370b938cda066a42dac" translate="yes" xml:space="preserve">
          <source>Rust memory safety is based on this rule: Given an object &lt;code&gt;T&lt;/code&gt;, it is only possible to have one of the following:</source>
          <target state="translated">Rustメモリーの安全性はこのルールに基づいています。オブジェクト &lt;code&gt;T&lt;/code&gt; が指定されている場合、次のいずれかのみを使用できます。</target>
        </trans-unit>
        <trans-unit id="86b4aec68c04f34ea15c657bcbc637e9391e2aab" translate="yes" xml:space="preserve">
          <source>Rust needs to know how much memory to allocate for any value of a particular type, and all values of a type must use the same amount of memory. If Rust allowed us to write this code, these two &lt;code&gt;str&lt;/code&gt; values would need to take up the same amount of space. But they have different lengths: &lt;code&gt;s1&lt;/code&gt; needs 12 bytes of storage and &lt;code&gt;s2&lt;/code&gt; needs 15. This is why it&amp;rsquo;s not possible to create a variable holding a dynamically sized type.</source>
          <target state="translated">Rustは特定の型の値に割り当てるメモリ量を知る必要があり、型のすべての値は同じ量のメモリを使用する必要があります。 Rustがこのコードの記述を許可した場合、これら2つの &lt;code&gt;str&lt;/code&gt; 値は同じ量のスペースを占める必要があります。ただし、長さは異なります &lt;code&gt;s1&lt;/code&gt; は12バイトのストレージが必要で、 &lt;code&gt;s2&lt;/code&gt; には15 バイトが必要です。このため、動的にサイズ設定される型を保持する変数を作成することはできません。</target>
        </trans-unit>
        <trans-unit id="1b76d3101d775a50daedde876a1dc0606265c7b7" translate="yes" xml:space="preserve">
          <source>Rust needs to know what types will be in the vector at compile time so it knows exactly how much memory on the heap will be needed to store each element. A secondary advantage is that we can be explicit about what types are allowed in this vector. If Rust allowed a vector to hold any type, there would be a chance that one or more of the types would cause errors with the operations performed on the elements of the vector. Using an enum plus a &lt;code&gt;match&lt;/code&gt; expression means that Rust will ensure at compile time that every possible case is handled, as discussed in Chapter 6.</source>
          <target state="translated">Rustは、コンパイル時にベクターにどの型が入るかを知る必要があるため、各要素を格納するために必要なヒープ上のメモリ量を正確に把握します。副次的な利点は、このベクトルで許可される型について明示的にできることです。 Rustがベクトルに任意の型を保持することを許可した場合、1つ以上の型がベクトルの要素に対して実行される操作でエラーを引き起こす可能性があります。 enumと &lt;code&gt;match&lt;/code&gt; 式を使用すると、第6章で説明するように、Rustはコンパイル時にすべての可能なケースが処理されることを保証します。</target>
        </trans-unit>
        <trans-unit id="2c1cfd45b3ac0b28a948d8b4a2f4de2f8d870925" translate="yes" xml:space="preserve">
          <source>Rust only looks at the signature of the called function, as such it must already specify all requirements that will be used for every type parameter.</source>
          <target state="translated">Rust は呼び出された関数のシグネチャだけを見るので、すべての型パラメータに使用されるすべての要件をすでに指定している必要があります。</target>
        </trans-unit>
        <trans-unit id="1ed887a173c68a2fae7555ba7b47d26cdae56e96" translate="yes" xml:space="preserve">
          <source>Rust only supports variadic parameters for interoperability with C code in its FFI. As such, variadic parameters can only be used with functions which are using the C ABI. Examples of erroneous code:</source>
          <target state="translated">Rust は、FFI の C コードとの相互運用性のために、バリアディック パラメータのみをサポートしています。そのため、バリアディックパラメータは C ABI を使用している関数でのみ使用できます。誤ったコードの例。</target>
        </trans-unit>
        <trans-unit id="e7d6720314fd90db94a4f0505ed35c899b634d9a" translate="yes" xml:space="preserve">
          <source>Rust provides different ways of interpreting the raw string data that computers store so that each program can choose the interpretation it needs, no matter what human language the data is in.</source>
          <target state="translated">Rustは、コンピュータが保存する生の文字列データを解釈するための様々な方法を提供しており、データがどのような人間の言語であっても、各プログラムが必要な解釈を選択できるようになっています。</target>
        </trans-unit>
        <trans-unit id="1a9d1ac483b5a0d5a30d4a6b20b099a21ce7d1ed" translate="yes" xml:space="preserve">
          <source>Rust releases every six weeks, like clockwork. If you know the date of one Rust release, you can know the date of the next one: it&amp;rsquo;s six weeks later. A nice aspect of having releases scheduled every six weeks is that the next train is coming soon. If a feature happens to miss a particular release, there&amp;rsquo;s no need to worry: another one is happening in a short time! This helps reduce pressure to sneak possibly unpolished features in close to the release deadline.</source>
          <target state="translated">時計仕掛けのように、Rustは6週間ごとにリリースします。 1つのRustリリースの日付がわかっている場合、次のリリースの日付を知ることができます。それは6週間後です。 6週間ごとにリリースをスケジュールすることの良い点は、次の列車がすぐに来るということです。機能が特定のリリースを見逃した場合でも、心配する必要はありません。別の機能が短時間で発生します！これにより、リリースの期限近くに、未研磨の機能をこっそりとこなすプレッシャーを軽減できます。</target>
        </trans-unit>
        <trans-unit id="14633826285dcf815682cf46efd1f87adcad6f15" translate="yes" xml:space="preserve">
          <source>Rust represents owned strings with the &lt;a href=&quot;../string/struct.string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; type, and borrowed slices of strings with the &lt;a href=&quot;../primitive.str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt; primitive. Both are always in UTF-8 encoding, and may contain nul bytes in the middle, i.e., if you look at the bytes that make up the string, there may be a &lt;code&gt;\0&lt;/code&gt; among them. Both &lt;code&gt;String&lt;/code&gt; and &lt;code&gt;str&lt;/code&gt; store their length explicitly; there are no nul terminators at the end of strings like in C.</source>
          <target state="translated">Rustは所有する文字列を&lt;a href=&quot;../string/struct.string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;タイプで表し、借りた文字列のスライスを&lt;a href=&quot;../primitive.str&quot;&gt; &lt;code&gt;str&lt;/code&gt; &lt;/a&gt;プリミティブで表します。どちらも常にUTF-8エンコーディングであり、途中にnulバイトが含まれる可能性があります。つまり、文字列を構成するバイトを見ると、それらの間に &lt;code&gt;\0&lt;/code&gt; がある可能性があります。 &lt;code&gt;String&lt;/code&gt; と &lt;code&gt;str&lt;/code&gt; はどちらも長さを明示的に保存します。 Cのように文字列の終わりにNULターミネータはありません。</target>
        </trans-unit>
        <trans-unit id="a1035dbea9907a4eef978b13fc5c640f49f6ff75" translate="yes" xml:space="preserve">
          <source>Rust substitutes the &lt;code&gt;*&lt;/code&gt; operator with a call to the &lt;code&gt;deref&lt;/code&gt; method and then a plain dereference so we don&amp;rsquo;t have to think about whether or not we need to call the &lt;code&gt;deref&lt;/code&gt; method. This Rust feature lets us write code that functions identically whether we have a regular reference or a type that implements &lt;code&gt;Deref&lt;/code&gt;.</source>
          <target state="translated">Rustは &lt;code&gt;*&lt;/code&gt; 演算子を &lt;code&gt;deref&lt;/code&gt; メソッドの呼び出しで置き換え、次に単純な逆参照を行うので、 &lt;code&gt;deref&lt;/code&gt; メソッドを呼び出す必要があるかどうかを考える必要はありません。このRust機能を使用すると、通常の参照であっても、 &lt;code&gt;Deref&lt;/code&gt; を実装する型であっても、同じように機能するコードを作成できます。</target>
        </trans-unit>
        <trans-unit id="aef02265ae4e5b20b25f7169f2eb182b32c41901" translate="yes" xml:space="preserve">
          <source>Rust supports four loop expressions:</source>
          <target state="translated">Rustは4つのループ式をサポートしています。</target>
        </trans-unit>
        <trans-unit id="39846c5622487afb1918e636190776d3ba8814ed" translate="yes" xml:space="preserve">
          <source>Rust supports the basic mathematical operations you&amp;rsquo;d expect for all of the number types: addition, subtraction, multiplication, division, and remainder. The following code shows how you&amp;rsquo;d use each one in a &lt;code&gt;let&lt;/code&gt; statement:</source>
          <target state="translated">Rustは、加算、減算、乗算、除算、剰余など、すべての数値タイプに期待される基本的な数学演算をサポートしています。次のコードは、 &lt;code&gt;let&lt;/code&gt; ステートメントでそれぞれをどのように使用するかを示しています。</target>
        </trans-unit>
        <trans-unit id="f198f3079c114496b224a182d1c6f07406996d50" translate="yes" xml:space="preserve">
          <source>Rust takes a different path: the memory is automatically returned once the variable that owns it goes out of scope. Here&amp;rsquo;s a version of our scope example from Listing 4-1 using a &lt;code&gt;String&lt;/code&gt; instead of a string literal:</source>
          <target state="translated">Rustは別のパスを使用します。メモリを所有する変数がスコープ外になると、メモリは自動的に返されます。ここで使用してリスト4-1からの私達の範囲の例のバージョンだ &lt;code&gt;String&lt;/code&gt; 文字列リテラルの代わりには：</target>
        </trans-unit>
        <trans-unit id="995e5bc0763da76eea3b582149feb3d425499836" translate="yes" xml:space="preserve">
          <source>Rust tells us that our code ignored the &lt;code&gt;Result&lt;/code&gt; value and the &lt;code&gt;Result&lt;/code&gt; value might indicate that an error occurred. But we&amp;rsquo;re not checking to see whether or not there was an error, and the compiler reminds us that we probably meant to have some error-handling code here! Let&amp;rsquo;s rectify that problem now.</source>
          <target state="translated">Rustは、コードが &lt;code&gt;Result&lt;/code&gt; 値を無視し、 &lt;code&gt;Result&lt;/code&gt; 値がエラーが発生したことを示す可能性があることを示しています。しかし、エラーが発生したかどうかを確認することはしていません。コンパイラーは、おそらくここにエラー処理コードを含めるつもりだったことを思い出させます！今すぐその問題を修正しましょう。</target>
        </trans-unit>
        <trans-unit id="438b72da10259b8d5d86767186b4d727d3dbea23" translate="yes" xml:space="preserve">
          <source>Rust treats all function calls as sugar for a more explicit, fully-qualified syntax. Upon compilation, Rust will desugar all function calls into the explicit form. Rust may sometimes require you to qualify function calls with trait, depending on the ambiguity of a call in light of in-scope items.</source>
          <target state="translated">Rust は、より明示的で完全修飾された構文のために、すべての関数呼び出しを砂糖として扱います。コンパイル時に、Rust はすべての関数呼び出しを明示的な形式に脱糖します。Rust は、スコープ内の項目に照らして呼び出しの曖昧さに応じて、関数呼び出しを trait で修飾する必要がある場合があります。</target>
        </trans-unit>
        <trans-unit id="d2dc323b3d2c25d779075b9140a6d1e2c6e50939" translate="yes" xml:space="preserve">
          <source>Rust types can be classified in various useful ways according to their intrinsic properties. These classifications are represented as traits.</source>
          <target state="translated">錆の種類は、その固有の特性に応じて様々な有用な方法で分類することができます。これらの分類は形質として表されます。</target>
        </trans-unit>
        <trans-unit id="f77a840183554b84c65d125ee38f75c043f2f8d3" translate="yes" xml:space="preserve">
          <source>Rust uses the WhatWG Infra Standard's &lt;a href=&quot;https://infra.spec.whatwg.org/#ascii-whitespace&quot;&gt;definition of ASCII whitespace&lt;/a&gt;. There are several other definitions in wide use. For instance, &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap07.html#tag_07_03_01&quot;&gt;the POSIX locale&lt;/a&gt; includes U+000B VERTICAL TAB as well as all the above characters, but&amp;mdash;from the very same specification&amp;mdash;&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_06_05&quot;&gt;the default rule for &quot;field splitting&quot; in the Bourne shell&lt;/a&gt; considers &lt;em&gt;only&lt;/em&gt; SPACE, HORIZONTAL TAB, and LINE FEED as whitespace.</source>
          <target state="translated">RustはWhatWG Infra Standardの&lt;a href=&quot;https://infra.spec.whatwg.org/#ascii-whitespace&quot;&gt;ASCII空白&lt;/a&gt;の定義を使用しています。広く使用されている他のいくつかの定義があります。たとえば&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap07.html#tag_07_03_01&quot;&gt;、POSIXロケールに&lt;/a&gt;はU + 000B VERTICAL TABと上記のすべての文字が含まれますが、まったく同じ仕様に&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_06_05&quot;&gt;あるため、Bourneシェルの「フィールド分割」のデフォルトルールでは、&lt;/a&gt; SPACE、HORIZONTAL TAB、およびLINE FEED &lt;em&gt;のみが&lt;/em&gt;考慮されます。空白として。</target>
        </trans-unit>
        <trans-unit id="80250cb612ec2f012c7bb709a162afa7cc99b219" translate="yes" xml:space="preserve">
          <source>Rust warns that you haven&amp;rsquo;t used the &lt;code&gt;Result&lt;/code&gt; value returned from &lt;code&gt;read_line&lt;/code&gt;, indicating that the program hasn&amp;rsquo;t handled a possible error.</source>
          <target state="translated">Rust は、 &lt;code&gt;read_line&lt;/code&gt; から返された &lt;code&gt;Result&lt;/code&gt; 値を使用していないことを警告し、プログラムがエラーの可能性を処理していないことを示します。</target>
        </trans-unit>
        <trans-unit id="99846f3671ba325d4d0a5778686542964bf3788a" translate="yes" xml:space="preserve">
          <source>Rust&amp;rsquo;s &lt;code&gt;char&lt;/code&gt; type is four bytes in size and represents a Unicode Scalar Value, which means it can represent a lot more than just ASCII. Accented letters; Chinese, Japanese, and Korean characters; emoji; and zero-width spaces are all valid &lt;code&gt;char&lt;/code&gt; values in Rust. Unicode Scalar Values range from &lt;code&gt;U+0000&lt;/code&gt; to &lt;code&gt;U+D7FF&lt;/code&gt; and &lt;code&gt;U+E000&lt;/code&gt; to &lt;code&gt;U+10FFFF&lt;/code&gt; inclusive. However, a &amp;ldquo;character&amp;rdquo; isn&amp;rsquo;t really a concept in Unicode, so your human intuition for what a &amp;ldquo;character&amp;rdquo; is may not match up with what a &lt;code&gt;char&lt;/code&gt; is in Rust. We&amp;rsquo;ll discuss this topic in detail in &lt;a href=&quot;ch08-02-strings#storing-utf-8-encoded-text-with-strings&quot;&gt;&amp;ldquo;Storing UTF-8 Encoded Text with Strings&amp;rdquo;&lt;/a&gt; in Chapter 8.</source>
          <target state="translated">Rustの &lt;code&gt;char&lt;/code&gt; 型のサイズは4バイトで、Unicodeスカラー値を表します。つまり、ASCIIだけでなく、それ以上のものを表すことができます。アクセント付きの手紙;中国語、日本語、韓国語の文字。絵文字;ゼロ幅のスペースはすべてRustで有効な &lt;code&gt;char&lt;/code&gt; 値です。 Unicodeのスカラ値は、範囲 &lt;code&gt;U+0000&lt;/code&gt; に &lt;code&gt;U+D7FF&lt;/code&gt; と &lt;code&gt;U+E000&lt;/code&gt; に &lt;code&gt;U+10FFFF&lt;/code&gt; の包括的。ただし、「文字」は実際にはUnicodeの概念ではないため、「文字」が何であるかに対する人間の直感は、Rustの &lt;code&gt;char&lt;/code&gt; と一致しない場合があります。このトピックについては、第8章の&lt;a href=&quot;ch08-02-strings#storing-utf-8-encoded-text-with-strings&quot;&gt;「文字列を含むUTF-8エンコードテキストの保存」&lt;/a&gt;で詳しく説明します。</target>
        </trans-unit>
        <trans-unit id="a5a4edf491f9a6786fd28bf09333db3dadc399c0" translate="yes" xml:space="preserve">
          <source>Rust&amp;rsquo;s borrow checker can&amp;rsquo;t understand that we&amp;rsquo;re borrowing different parts of the slice; it only knows that we&amp;rsquo;re borrowing from the same slice twice. Borrowing different parts of a slice is fundamentally okay because the two slices aren&amp;rsquo;t overlapping, but Rust isn&amp;rsquo;t smart enough to know this. When we know code is okay, but Rust doesn&amp;rsquo;t, it&amp;rsquo;s time to reach for unsafe code.</source>
          <target state="translated">Rustの借用チェッカーは、スライスのさまざまな部分を借用していることを理解できません。同じスライスから2回借りていることだけがわかります。2つのスライスが重なっていないため、スライスの異なる部分を借りることは基本的に問題ありませんが、Rustはこれを知るのに十分なほどスマートではありません。コードが大丈夫であることがわかっていても、Rustがそうでない場合は、安全でないコードに手を差し伸べる時が来ました。</target>
        </trans-unit>
        <trans-unit id="8c55a2a82b7377101f0771c9bcd044aae6cf6540" translate="yes" xml:space="preserve">
          <source>Rust&amp;rsquo;s central feature is &lt;em&gt;ownership&lt;/em&gt;. Although the feature is straightforward to explain, it has deep implications for the rest of the language.</source>
          <target state="translated">Rustの中心的な機能は&lt;em&gt;所有権&lt;/em&gt;です。この機能は簡単に説明できますが、他の言語にも深い影響があります。</target>
        </trans-unit>
        <trans-unit id="5d2271b00baf8fce0728901fd42c87e83d55abd0" translate="yes" xml:space="preserve">
          <source>Rust&amp;rsquo;s closures are anonymous functions you can save in a variable or pass as arguments to other functions. You can create the closure in one place and then call the closure to evaluate it in a different context. Unlike functions, closures can capture values from the scope in which they&amp;rsquo;re defined. We&amp;rsquo;ll demonstrate how these closure features allow for code reuse and behavior customization.</source>
          <target state="translated">Rustのクロージャーは、変数に保存したり、引数として他の関数に渡したりできる無名関数です。 1つの場所でクロージャを作成してから、そのクロージャを呼び出して別のコンテキストで評価することができます。関数とは異なり、クロージャは、それらが定義されているスコープから値をキャプチャできます。これらのクロージャ機能がコードの再利用と動作のカスタマイズをどのように可能にするかを示します。</target>
        </trans-unit>
        <trans-unit id="fd4c91ef23d0c1a58d5181596522ff41f1f360e9" translate="yes" xml:space="preserve">
          <source>Rust&amp;rsquo;s commitment to reliability extends to error handling. Errors are a fact of life in software, so Rust has a number of features for handling situations in which something goes wrong. In many cases, Rust requires you to acknowledge the possibility of an error and take some action before your code will compile. This requirement makes your program more robust by ensuring that you&amp;rsquo;ll discover errors and handle them appropriately before you&amp;rsquo;ve deployed your code to production!</source>
          <target state="translated">Rustの信頼性への取り組みは、エラー処理にも及びます。エラーはソフトウェアの日常の事実であるため、Rustには、問題が発生した状況を処理するための多数の機能があります。多くの場合、Rustでは、エラーが発生する可能性を認識し、コードをコンパイルする前に何らかのアクションを実行する必要があります。この要件により、コードを本番環境にデプロイする前にエラーを検出して適切に処理できるため、プログラムがより堅牢になります。</target>
        </trans-unit>
        <trans-unit id="50fd346e441893c513c7336bf8c9281fb59b1c1a" translate="yes" xml:space="preserve">
          <source>Rust&amp;rsquo;s design has taken inspiration from many existing languages and techniques, and one significant influence is &lt;em&gt;functional programming&lt;/em&gt;. Programming in a functional style often includes using functions as values by passing them in arguments, returning them from other functions, assigning them to variables for later execution, and so forth.</source>
          <target state="translated">Rustの設計は、多くの既存の言語と技法からインスピレーションを得ており、重要な影響の1つは&lt;em&gt;関数型プログラミング&lt;/em&gt;です。関数スタイルでのプログラミングには、多くの場合、関数を引数として渡すことによる値としての使用、他の関数からの戻り、後で実行するための変数への割り当てなどが含まれます。</target>
        </trans-unit>
        <trans-unit id="4cc35a990ff86bc53c3ee8555d1b3d65805dc72a" translate="yes" xml:space="preserve">
          <source>Rust&amp;rsquo;s error handling features are designed to help you write more robust code. The &lt;code&gt;panic!&lt;/code&gt; macro signals that your program is in a state it can&amp;rsquo;t handle and lets you tell the process to stop instead of trying to proceed with invalid or incorrect values. The &lt;code&gt;Result&lt;/code&gt; enum uses Rust&amp;rsquo;s type system to indicate that operations might fail in a way that your code could recover from. You can use &lt;code&gt;Result&lt;/code&gt; to tell code that calls your code that it needs to handle potential success or failure as well. Using &lt;code&gt;panic!&lt;/code&gt; and &lt;code&gt;Result&lt;/code&gt; in the appropriate situations will make your code more reliable in the face of inevitable problems.</source>
          <target state="translated">Rustのエラー処理機能は、より堅牢なコードを記述できるように設計されています。 &lt;code&gt;panic!&lt;/code&gt; マクロは、プログラムが処理できない状態であることを通知し、無効な値や誤った値で処理を続行するのではなく、プロセスを停止するように指示できます。 &lt;code&gt;Result&lt;/code&gt; 列挙型は、操作があなたのコードから回復できるような方法で失敗する可能性があることを示すために、錆の型システムを使用しています。 &lt;code&gt;Result&lt;/code&gt; を使用して、コードを呼び出すコードに、成功または失敗の可能性も処理する必要があることを伝えることができます。使用して &lt;code&gt;panic!&lt;/code&gt; そして &lt;code&gt;Result&lt;/code&gt; 、適切な状況では避けられない問題に直面してあなたのコードはより信頼性の高いようになります。</target>
        </trans-unit>
        <trans-unit id="0978df93a2cae0fac3519f383fbc09538259dfbb" translate="yes" xml:space="preserve">
          <source>Rust&amp;rsquo;s memory safety guarantees make it difficult, but not impossible, to accidentally create memory that is never cleaned up (known as a &lt;em&gt;memory leak&lt;/em&gt;). Preventing memory leaks entirely is not one of Rust&amp;rsquo;s guarantees in the same way that disallowing data races at compile time is, meaning memory leaks are memory safe in Rust. We can see that Rust allows memory leaks by using &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; and &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt;: it&amp;rsquo;s possible to create references where items refer to each other in a cycle. This creates memory leaks because the reference count of each item in the cycle will never reach 0, and the values will never be dropped.</source>
          <target state="translated">Rustのメモリ安全性保証により、クリーンアップされないメモリを誤って作成することは困難ですが、不可能ではありません（&lt;em&gt;メモリリークと&lt;/em&gt;呼ばれ&lt;em&gt;ます&lt;/em&gt;）。メモリリークを完全に防止することは、コンパイル時にデータの競合を禁止するのと同じように、Rustの保証の1つではありません。つまり、メモリリークはRustでメモリセーフです。 Rustは &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; と &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; を使用してメモリリークを許可していることがわかります。循環内でアイテムが相互に参照する参照を作成することが可能です。これにより、サイクル内の各アイテムの参照カウントが0になることはなく、値が削除されることもないため、メモリリークが発生します。</target>
        </trans-unit>
        <trans-unit id="c83ae6d5141700914f4870b9a16bff718d75b311" translate="yes" xml:space="preserve">
          <source>Rust&amp;rsquo;s ownership rules have saved us again! We got an error from the code in Listing 16-3 because Rust was being conservative and only borrowing &lt;code&gt;v&lt;/code&gt; for the thread, which meant the main thread could theoretically invalidate the spawned thread&amp;rsquo;s reference. By telling Rust to move ownership of &lt;code&gt;v&lt;/code&gt; to the spawned thread, we&amp;rsquo;re guaranteeing Rust that the main thread won&amp;rsquo;t use &lt;code&gt;v&lt;/code&gt; anymore. If we change Listing 16-4 in the same way, we&amp;rsquo;re then violating the ownership rules when we try to use &lt;code&gt;v&lt;/code&gt; in the main thread. The &lt;code&gt;move&lt;/code&gt; keyword overrides Rust&amp;rsquo;s conservative default of borrowing; it doesn&amp;rsquo;t let us violate the ownership rules.</source>
          <target state="translated">Rustの所有権ルールは私たちを再び救ってくれました！リスト16-3のコードからエラーが発生しました。Rustは保守的であり、スレッドの &lt;code&gt;v&lt;/code&gt; しか借りていなかったためです。つまり、メインスレッドは、生成されたスレッドの参照を理論的に無効にできました。 Rustに &lt;code&gt;v&lt;/code&gt; の所有権を生成されたスレッドに移動するように指示することで、メインスレッドが &lt;code&gt;v&lt;/code&gt; を使用しないことをRustに保証します。リスト16-4を同じ方法で変更すると、メインスレッドで &lt;code&gt;v&lt;/code&gt; を使用しようとしたときに所有権規則に違反することになります。 &lt;code&gt;move&lt;/code&gt; 借り入れのキーワードオーバーライド錆の保守的なデフォルト。所有権のルールに違反することはできません。</target>
        </trans-unit>
        <trans-unit id="acb5b5af69714850a9eaace832e90521d0ab51b4" translate="yes" xml:space="preserve">
          <source>Rust&amp;rsquo;s patterns are very useful in that they help distinguish between different kinds of data. When used in &lt;code&gt;match&lt;/code&gt; expressions, Rust ensures your patterns cover every possible value, or your program won&amp;rsquo;t compile. Patterns in &lt;code&gt;let&lt;/code&gt; statements and function parameters make those constructs more useful, enabling the destructuring of values into smaller parts at the same time as assigning to variables. We can create simple or complex patterns to suit our needs.</source>
          <target state="translated">Rustのパターンは、さまざまな種類のデータを区別するのに役立つという点で非常に便利です。 &lt;code&gt;match&lt;/code&gt; 式で使用すると、Rustはパターンがすべての可能な値をカバーするようにします。そうしないと、プログラムはコンパイルされません。 &lt;code&gt;let&lt;/code&gt; ステートメントと関数パラメーターのパターンは、これらの構成要素をより便利にし、変数への割り当てと同時に値をより小さな部分に分解できるようにします。ニーズに合わせて単純なパターンや複雑なパターンを作成できます。</target>
        </trans-unit>
        <trans-unit id="dce982e836868a2e5286452911eb980f53708aba" translate="yes" xml:space="preserve">
          <source>Rust&amp;rsquo;s speed, safety, single binary output, and cross-platform support make it an ideal language for creating command line tools, so for our project, we&amp;rsquo;ll make our own version of the classic command line tool &lt;code&gt;grep&lt;/code&gt; (&lt;strong&gt;g&lt;/strong&gt;lobally search a &lt;strong&gt;r&lt;/strong&gt;egular &lt;strong&gt;e&lt;/strong&gt;xpression and &lt;strong&gt;p&lt;/strong&gt;rint). In the simplest use case, &lt;code&gt;grep&lt;/code&gt; searches a specified file for a specified string. To do so, &lt;code&gt;grep&lt;/code&gt; takes as its arguments a filename and a string. Then it reads the file, finds lines in that file that contain the string argument, and prints those lines.</source>
          <target state="translated">Rustの速度、安全性、単一のバイナリ出力、およびクロスプラットフォームサポートにより、Rustはコマンドラインツールを作成するための理想的な言語となっているため、プロジェクトでは、独自のバージョンの従来のコマンドラインツール &lt;code&gt;grep&lt;/code&gt; （&lt;strong&gt;g&lt;/strong&gt; lobally search &lt;strong&gt;r&lt;/strong&gt; egular &lt;strong&gt;e&lt;/strong&gt; xpression and &lt;strong&gt;p&lt;/strong&gt; rint ）。最も簡単な使用例では、 &lt;code&gt;grep&lt;/code&gt; は指定されたファイルで指定された文字列を検索します。そのために、 &lt;code&gt;grep&lt;/code&gt; は引数としてファイル名と文字列を受け取ります。次に、ファイルを読み取り、文字列引数を含むそのファイル内の行を見つけて、それらの行を出力します。</target>
        </trans-unit>
        <trans-unit id="c6ca1c192ffb4864e88d3222cca77235e6772b0f" translate="yes" xml:space="preserve">
          <source>Rust&amp;rsquo;s standard library also includes a number of other string types, such as &lt;code&gt;OsString&lt;/code&gt;, &lt;code&gt;OsStr&lt;/code&gt;, &lt;code&gt;CString&lt;/code&gt;, and &lt;code&gt;CStr&lt;/code&gt;. Library crates can provide even more options for storing string data. See how those names all end in &lt;code&gt;String&lt;/code&gt; or &lt;code&gt;Str&lt;/code&gt;? They refer to owned and borrowed variants, just like the &lt;code&gt;String&lt;/code&gt; and &lt;code&gt;str&lt;/code&gt; types you&amp;rsquo;ve seen previously. These string types can store text in different encodings or be represented in memory in a different way, for example. We won&amp;rsquo;t discuss these other string types in this chapter; see their API documentation for more about how to use them and when each is appropriate.</source>
          <target state="translated">Rustの標準ライブラリには、 &lt;code&gt;OsString&lt;/code&gt; 、 &lt;code&gt;OsStr&lt;/code&gt; 、 &lt;code&gt;CString&lt;/code&gt; 、 &lt;code&gt;CStr&lt;/code&gt; などの他の文字列タイプも多数含まれています。ライブラリクレートは、文字列データを保存するためのさらに多くのオプションを提供できます。それらの名前がす​​べて &lt;code&gt;String&lt;/code&gt; または &lt;code&gt;Str&lt;/code&gt; で終わる方法を確認してください。これらは、以前に見た &lt;code&gt;String&lt;/code&gt; 型と &lt;code&gt;str&lt;/code&gt; 型と同様に、所有および借用したバリアントを参照します。これらの文字列タイプは、テキストを異なるエンコーディングで格納したり、メモリ内で異なる方法で表現したりできます。この章では、これらの他の文字列型については説明しません。それらの使用方法とそれぞれが適切な場合の詳細については、APIドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="aa9ff7a849c1640cd4cc865fda33cc9c81cac848" translate="yes" xml:space="preserve">
          <source>Rust&amp;rsquo;s standard library includes a number of very useful data structures called &lt;em&gt;collections&lt;/em&gt;. Most other data types represent one specific value, but collections can contain multiple values. Unlike the built-in array and tuple types, the data these collections point to is stored on the heap, which means the amount of data does not need to be known at compile time and can grow or shrink as the program runs. Each kind of collection has different capabilities and costs, and choosing an appropriate one for your current situation is a skill you&amp;rsquo;ll develop over time. In this chapter, we&amp;rsquo;ll discuss three collections that are used very often in Rust programs:</source>
          <target state="translated">Rustの標準ライブラリには、&lt;em&gt;コレクション&lt;/em&gt;と呼ばれる非常に便利なデータ構造が多数含まれてい&lt;em&gt;ます&lt;/em&gt;。他のほとんどのデータ型は1つの特定の値を表しますが、コレクションには複数の値を含めることができます。組み込みの配列およびタプル型とは異なり、これらのコレクションが指すデータはヒープに格納されます。つまり、コンパイル時にデータ量を知る必要がなく、プログラムの実行に伴ってデータ量が増減する可能性があります。コレクションの種類ごとに異なる機能とコストがあり、現在の状況に適切なコレクションを選択することは、時間をかけて開発するスキルです。この章では、Rustプログラムで頻繁に使用される3つのコレクションについて説明します。</target>
        </trans-unit>
        <trans-unit id="98e2048971bf413ef392b0aef43b635b310936b3" translate="yes" xml:space="preserve">
          <source>Rust&amp;rsquo;s testing features provide a way to specify how code should function to ensure it continues to work as you expect, even as you make changes. Unit tests exercise different parts of a library separately and can test private implementation details. Integration tests check that many parts of the library work together correctly, and they use the library&amp;rsquo;s public API to test the code in the same way external code will use it. Even though Rust&amp;rsquo;s type system and ownership rules help prevent some kinds of bugs, tests are still important to reduce logic bugs having to do with how your code is expected to behave.</source>
          <target state="translated">Rustのテスト機能は、変更を加えても、コードが期待どおりに動作し続けることを保証するためにコードがどのように機能するかを指定する方法を提供します。単体テストは、ライブラリのさまざまな部分を個別に実行し、プライベートな実装の詳細をテストできます。統合テストは、ライブラリの多くの部分が正しく連携していることを確認し、ライブラリのパブリックAPIを使用して、外部コードが使用するのと同じ方法でコードをテストします。Rustの型システムと所有権ルールは、ある種のバグを防ぐのに役立ちますが、コードがどのように動作するかを想定してロジックのバグを減らすには、テストが依然として重要です。</target>
        </trans-unit>
        <trans-unit id="acb8e83983bd289d54829daf197d511dbb760356" translate="yes" xml:space="preserve">
          <source>Rust's &quot;try catch&quot; construct which invokes the function pointer &lt;code&gt;f&lt;/code&gt; with the data pointer &lt;code&gt;data&lt;/code&gt;.</source>
          <target state="translated">データポインタ &lt;code&gt;data&lt;/code&gt; で関数ポインタ &lt;code&gt;f&lt;/code&gt; を呼び出すRustの「try catch」構成。</target>
        </trans-unit>
        <trans-unit id="8dbe1f8233c456628e66e6df4dd93fab7b6e6c9e" translate="yes" xml:space="preserve">
          <source>Rust's &lt;code&gt;for&lt;/code&gt; loop syntax is actually sugar for iterators. Here's a basic example of &lt;code&gt;for&lt;/code&gt;:</source>
          <target state="translated">Rustの &lt;code&gt;for&lt;/code&gt; ループ構文は、実際にはイテレーターにとって砂糖です。 &lt;code&gt;for&lt;/code&gt; の基本的な例を次に示します。</target>
        </trans-unit>
        <trans-unit id="c2b907ea71a52b75f8ec4f141b77e18171f372ef" translate="yes" xml:space="preserve">
          <source>Rust's collections can be grouped into four major categories:</source>
          <target state="translated">ラストのコレクションは大きく4つのカテゴリーに分類できます。</target>
        </trans-unit>
        <trans-unit id="66232bbafcf2029b1b02f4fd6262d62c2d92282a" translate="yes" xml:space="preserve">
          <source>Rust's memory orderings are &lt;a href=&quot;https://llvm.org/docs/LangRef.html#memory-model-for-concurrent-operations&quot;&gt;the same as LLVM's&lt;/a&gt;.</source>
          <target state="translated">Rustのメモリの順序は&lt;a href=&quot;https://llvm.org/docs/LangRef.html#memory-model-for-concurrent-operations&quot;&gt;LLVMと同じ&lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="a7ab800f18895158ef3a0e63fde445a7b639f33a" translate="yes" xml:space="preserve">
          <source>Rust's name resolution operates on a global hierarchy of namespaces. Each level in the hierarchy can be thought of as some item. The items are one of those mentioned above, but also include external crates. Declaring or defining a new module can be thought of as inserting a new tree into the hierarchy at the location of the definition.</source>
          <target state="translated">Rust の名前解決は、名前空間のグローバル階層上で動作します。階層内の各レベルは、何らかのアイテムと考えることができます。アイテムは上で述べたものの一つですが、外部のクレートも含まれます。新しいモジュールを宣言したり定義したりすることは、定義した場所の階層に新しいツリーを挿入することと考えることができます。</target>
        </trans-unit>
        <trans-unit id="319f62fa60443741e4ab911db14f80e727aef59a" translate="yes" xml:space="preserve">
          <source>Rust's pointer types must always point to a valid location; there are no &quot;null&quot; pointers. Instead, Rust has &lt;em&gt;optional&lt;/em&gt; pointers, like the optional owned box, &lt;a href=&quot;enum.option&quot;&gt;&lt;code&gt;Option&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;a href=&quot;../boxed/struct.box&quot;&gt;&lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">Rustのポインタ型は常に有効な場所を指す必要があります。「null」ポインタはありません。代わりに、錆があり&lt;em&gt;、オプション&lt;/em&gt;、オプションの所有ボックス、などのポインタ、&lt;a href=&quot;enum.option&quot;&gt; &lt;code&gt;Option&lt;/code&gt; &lt;/a&gt; &lt;code&gt;&amp;lt;&lt;/code&gt; &lt;a href=&quot;../boxed/struct.box&quot;&gt; &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; &lt;/a&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="a2aff2ec84d10e9cd75ff34f3e37a6ab05271846" translate="yes" xml:space="preserve">
          <source>Rust's semantics obey a &lt;em&gt;phase distinction&lt;/em&gt; between compile-time and run-time.&lt;sup&gt;&lt;a href=&quot;crates-and-source-files#phase-distinction&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; Semantic rules that have a &lt;em&gt;static interpretation&lt;/em&gt; govern the success or failure of compilation, while semantic rules that have a &lt;em&gt;dynamic interpretation&lt;/em&gt; govern the behavior of the program at run-time.</source>
          <target state="translated">Rustのセマンティクスは、コンパイル時と実行時の&lt;em&gt;フェーズの区別に&lt;/em&gt;従います。&lt;sup&gt;&lt;a href=&quot;crates-and-source-files#phase-distinction&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;em&gt;静的な解釈&lt;/em&gt;を持つセマンティックルールはコンパイルの成功または失敗を制御し、&lt;em&gt;動的な解釈&lt;/em&gt;を持つセマンティックルールは実行時のプログラムの動作を制御します。</target>
        </trans-unit>
        <trans-unit id="54f00e0c31d6eace7a6ea3416d8819187abd4302" translate="yes" xml:space="preserve">
          <source>Rust's standard collection library provides efficient implementations of the most common general purpose programming data structures. By using the standard implementations, it should be possible for two libraries to communicate without significant data conversion.</source>
          <target state="translated">Rustの標準コレクションライブラリは、最も一般的な汎用プログラミングデータ構造の効率的な実装を提供します。標準の実装を使用することで、2つのライブラリが大幅なデータ変換なしで通信することが可能になるはずです。</target>
        </trans-unit>
        <trans-unit id="ab17aa57ae62fb04a69af0b7a8f3f507e272a3c7" translate="yes" xml:space="preserve">
          <source>Rust's type system is a conservative approximation of the dynamic safety requirements, so in some cases there is a performance cost to using safe code. For example, a doubly-linked list is not a tree structure and can only be represented with reference-counted pointers in safe code. By using &lt;code&gt;unsafe&lt;/code&gt; blocks to represent the reverse links as raw pointers, it can be implemented with only boxes.</source>
          <target state="translated">Rustの型システムは動的安全要件の控えめな近似であるため、場合によっては、安全なコードを使用するとパフォーマンスが低下します。たとえば、二重リンクリストはツリー構造ではなく、安全なコードで参照カウントポインターでのみ表すことができます。 &lt;code&gt;unsafe&lt;/code&gt; ブロックを使用してリバースリンクを生のポインタとして表すことにより、ボックスのみで実装できます。</target>
        </trans-unit>
        <trans-unit id="95599064eb377b63b994bbd7ad3f097bbf8eb92c" translate="yes" xml:space="preserve">
          <source>Rustfmt ensures a consistent coding style across developers.</source>
          <target state="translated">Rustfmtは、開発者間で一貫したコーディングスタイルを実現します。</target>
        </trans-unit>
        <trans-unit id="7b00c77b80323c6107761b3476057383a88402b5" translate="yes" xml:space="preserve">
          <source>Rustup and the Role of Rust Nightly</source>
          <target state="translated">ラストアップと毎晩の役割</target>
        </trans-unit>
        <trans-unit id="baf8407c83848beb2a63399a672432e0718f8d96" translate="yes" xml:space="preserve">
          <source>Rustup makes it easy to change between different release channels of Rust, on a global or per-project basis. By default, you&amp;rsquo;ll have stable Rust installed. To install nightly, for example:</source>
          <target state="translated">Rustupを使用すると、グローバルまたはプロジェクトごとに、Rustの異なるリリースチャネル間を簡単に変更できます。デフォルトでは、安定したRustがインストールされています。たとえば、夜間にインストールするには：</target>
        </trans-unit>
        <trans-unit id="d6a79be61e4215763db3baff3a7d68db38c8b2c3" translate="yes" xml:space="preserve">
          <source>RwLock</source>
          <target state="translated">RwLock</target>
        </trans-unit>
        <trans-unit id="3365fb12186db42cf39d5ce267adfc330507d4c2" translate="yes" xml:space="preserve">
          <source>RwLock::borrow</source>
          <target state="translated">RwLock::borrow</target>
        </trans-unit>
        <trans-unit id="bb95ca5081bbeb594b1afea186814e0d4f3253b7" translate="yes" xml:space="preserve">
          <source>RwLock::borrow_mut</source>
          <target state="translated">RwLock::borrow_mut</target>
        </trans-unit>
        <trans-unit id="032d2409c530ffd60c7c9c9f5aca0a52823fe35c" translate="yes" xml:space="preserve">
          <source>RwLock::default</source>
          <target state="translated">RwLock::default</target>
        </trans-unit>
        <trans-unit id="9f88cff40297be1aa94fa7e0823c98c7da6761a9" translate="yes" xml:space="preserve">
          <source>RwLock::drop</source>
          <target state="translated">RwLock::drop</target>
        </trans-unit>
        <trans-unit id="6eb75710cfca86f6ddcbd36cc0b480fab516efae" translate="yes" xml:space="preserve">
          <source>RwLock::fmt</source>
          <target state="translated">RwLock::fmt</target>
        </trans-unit>
        <trans-unit id="c39d1dd0d486dff9ebac4064c7f836672e22c020" translate="yes" xml:space="preserve">
          <source>RwLock::from</source>
          <target state="translated">RwLock::from</target>
        </trans-unit>
        <trans-unit id="f7459df51d92ce400094c19b830db9351fd1b575" translate="yes" xml:space="preserve">
          <source>RwLock::get_mut</source>
          <target state="translated">RwLock::get_mut</target>
        </trans-unit>
        <trans-unit id="dd170c316defa574a85c99622fe930a63bdba387" translate="yes" xml:space="preserve">
          <source>RwLock::into</source>
          <target state="translated">RwLock::into</target>
        </trans-unit>
        <trans-unit id="eb5fe8aa0193d0a1e704de4241f5c0a52119717b" translate="yes" xml:space="preserve">
          <source>RwLock::into_inner</source>
          <target state="translated">RwLock::into_inner</target>
        </trans-unit>
        <trans-unit id="597790ef6ee26d29fd19484b562c98ca7fe22839" translate="yes" xml:space="preserve">
          <source>RwLock::is_poisoned</source>
          <target state="translated">RwLock::is_poisoned</target>
        </trans-unit>
        <trans-unit id="b30631b8ae7fdfb2874a8151b77ee5739805b2a2" translate="yes" xml:space="preserve">
          <source>RwLock::new</source>
          <target state="translated">RwLock::new</target>
        </trans-unit>
        <trans-unit id="4524aac3589f9c6e93e60d12fae19353e0443eda" translate="yes" xml:space="preserve">
          <source>RwLock::read</source>
          <target state="translated">RwLock::read</target>
        </trans-unit>
        <trans-unit id="10894ce864637dc75066a6e702be6357e58a0ade" translate="yes" xml:space="preserve">
          <source>RwLock::try_from</source>
          <target state="translated">RwLock::try_from</target>
        </trans-unit>
        <trans-unit id="3c79ebfc0ddf697963209773c64e4debde0a15e5" translate="yes" xml:space="preserve">
          <source>RwLock::try_into</source>
          <target state="translated">RwLock::try_into</target>
        </trans-unit>
        <trans-unit id="27f9f9706495b3fa597d7283c5f6d5aa96cad168" translate="yes" xml:space="preserve">
          <source>RwLock::try_read</source>
          <target state="translated">RwLock::try_read</target>
        </trans-unit>
        <trans-unit id="2cc72c47f44da367af1f6c95ad58fcbe7aabe9f8" translate="yes" xml:space="preserve">
          <source>RwLock::try_write</source>
          <target state="translated">RwLock::try_write</target>
        </trans-unit>
        <trans-unit id="51d4ce46fd209b39c881192d2c4a306b0c6af7e1" translate="yes" xml:space="preserve">
          <source>RwLock::type_id</source>
          <target state="translated">RwLock::type_id</target>
        </trans-unit>
        <trans-unit id="75bc0e47bce9b9726f4994afdff85b10cc3177b6" translate="yes" xml:space="preserve">
          <source>RwLock::write</source>
          <target state="translated">RwLock::write</target>
        </trans-unit>
        <trans-unit id="1eaef0c1b72634db80d0da04d80181a719336691" translate="yes" xml:space="preserve">
          <source>RwLockReadGuard</source>
          <target state="translated">RwLockReadGuard</target>
        </trans-unit>
        <trans-unit id="0a54fda840526b11982d5a172884305a72f1ca53" translate="yes" xml:space="preserve">
          <source>RwLockReadGuard::borrow</source>
          <target state="translated">RwLockReadGuard::borrow</target>
        </trans-unit>
        <trans-unit id="c10f603294158a203e3030a16eeb77610e66012d" translate="yes" xml:space="preserve">
          <source>RwLockReadGuard::borrow_mut</source>
          <target state="translated">RwLockReadGuard::borrow_mut</target>
        </trans-unit>
        <trans-unit id="480c8174e6d098df5d439363919b8fc988424a6a" translate="yes" xml:space="preserve">
          <source>RwLockReadGuard::deref</source>
          <target state="translated">RwLockReadGuard::deref</target>
        </trans-unit>
        <trans-unit id="96929e2bf6e62cb9881175383a8c72f54d7b407d" translate="yes" xml:space="preserve">
          <source>RwLockReadGuard::drop</source>
          <target state="translated">RwLockReadGuard::drop</target>
        </trans-unit>
        <trans-unit id="0630cc72c5534d080bc3a4d09dfe50c25c31af45" translate="yes" xml:space="preserve">
          <source>RwLockReadGuard::fmt</source>
          <target state="translated">RwLockReadGuard::fmt</target>
        </trans-unit>
        <trans-unit id="71fd112b2871ddf5eac0a9570c1f499e0f71e75c" translate="yes" xml:space="preserve">
          <source>RwLockReadGuard::from</source>
          <target state="translated">RwLockReadGuard::from</target>
        </trans-unit>
        <trans-unit id="9c60a6eeb95abf755a1eead5ad53991ff0cb74d1" translate="yes" xml:space="preserve">
          <source>RwLockReadGuard::into</source>
          <target state="translated">RwLockReadGuard::into</target>
        </trans-unit>
        <trans-unit id="74ee51ebc9a6d12c966b59ef0ecb6343b0e0c6eb" translate="yes" xml:space="preserve">
          <source>RwLockReadGuard::to_string</source>
          <target state="translated">RwLockReadGuard::to_string</target>
        </trans-unit>
        <trans-unit id="0ee2730589747bc1dcb5c453d764648feefc433d" translate="yes" xml:space="preserve">
          <source>RwLockReadGuard::try_from</source>
          <target state="translated">RwLockReadGuard::try_from</target>
        </trans-unit>
        <trans-unit id="2f498acbf30669bd7f472bd5abfc012da4c81500" translate="yes" xml:space="preserve">
          <source>RwLockReadGuard::try_into</source>
          <target state="translated">RwLockReadGuard::try_into</target>
        </trans-unit>
        <trans-unit id="a25712e2a0bf4758e52e5eff9b33eef96baad24b" translate="yes" xml:space="preserve">
          <source>RwLockReadGuard::type_id</source>
          <target state="translated">RwLockReadGuard::type_id</target>
        </trans-unit>
        <trans-unit id="9646cc55e4cc9faafa8ece87c06c08f6b888f1fd" translate="yes" xml:space="preserve">
          <source>RwLockWriteGuard</source>
          <target state="translated">RwLockWriteGuard</target>
        </trans-unit>
        <trans-unit id="baedc99a4037b217d239bb9bc2bebea8bc2c7b05" translate="yes" xml:space="preserve">
          <source>RwLockWriteGuard::borrow</source>
          <target state="translated">RwLockWriteGuard::borrow</target>
        </trans-unit>
        <trans-unit id="0c8f19451559b2d3e5a6164478662b652678e260" translate="yes" xml:space="preserve">
          <source>RwLockWriteGuard::borrow_mut</source>
          <target state="translated">RwLockWriteGuard::borrow_mut</target>
        </trans-unit>
        <trans-unit id="630e28276d78c2514d28310665f4fbd77b887ea3" translate="yes" xml:space="preserve">
          <source>RwLockWriteGuard::deref</source>
          <target state="translated">RwLockWriteGuard::deref</target>
        </trans-unit>
        <trans-unit id="39d9907938496daf9bc33b22be826e596782bce1" translate="yes" xml:space="preserve">
          <source>RwLockWriteGuard::deref_mut</source>
          <target state="translated">RwLockWriteGuard::deref_mut</target>
        </trans-unit>
        <trans-unit id="79f1ca0d2c6b0fad41ae7415d45c5eb9a7acfbb9" translate="yes" xml:space="preserve">
          <source>RwLockWriteGuard::drop</source>
          <target state="translated">RwLockWriteGuard::drop</target>
        </trans-unit>
        <trans-unit id="fde0bc83a3fb9bf572594f7ed1454a2e150083e6" translate="yes" xml:space="preserve">
          <source>RwLockWriteGuard::fmt</source>
          <target state="translated">RwLockWriteGuard::fmt</target>
        </trans-unit>
        <trans-unit id="2c0a3448edb216dbb966834cc4ad56db6eb11560" translate="yes" xml:space="preserve">
          <source>RwLockWriteGuard::from</source>
          <target state="translated">RwLockWriteGuard::from</target>
        </trans-unit>
        <trans-unit id="3193eae71ac8c5c78d9a237c77ce0e37b3805579" translate="yes" xml:space="preserve">
          <source>RwLockWriteGuard::into</source>
          <target state="translated">RwLockWriteGuard::into</target>
        </trans-unit>
        <trans-unit id="8c6e6d90fe4c368b63537f92416cb8aaff689f72" translate="yes" xml:space="preserve">
          <source>RwLockWriteGuard::to_string</source>
          <target state="translated">RwLockWriteGuard::to_string</target>
        </trans-unit>
        <trans-unit id="5f6159162b69b6697a022b81d0b5f2b64a1c0cb9" translate="yes" xml:space="preserve">
          <source>RwLockWriteGuard::try_from</source>
          <target state="translated">RwLockWriteGuard::try_from</target>
        </trans-unit>
        <trans-unit id="6959809c31f98cada5a72df18f7f305cf5bec8cb" translate="yes" xml:space="preserve">
          <source>RwLockWriteGuard::try_into</source>
          <target state="translated">RwLockWriteGuard::try_into</target>
        </trans-unit>
        <trans-unit id="701e18958d5f1087e9d3ad9d6157e1b774a80327" translate="yes" xml:space="preserve">
          <source>RwLockWriteGuard::type_id</source>
          <target state="translated">RwLockWriteGuard::type_id</target>
        </trans-unit>
        <trans-unit id="1a6ea37b53bc27138b60916fd0439bdf3ab78ec1" translate="yes" xml:space="preserve">
          <source>SHEBANG : &lt;code&gt;#!&lt;/code&gt; ~[&lt;code&gt;[&lt;/code&gt;&lt;code&gt;\n&lt;/code&gt;] ~&lt;code&gt;\n&lt;/code&gt;&lt;sup&gt;*&lt;/sup&gt;</source>
          <target state="translated">SHEBANG： &lt;code&gt;#!&lt;/code&gt; 〜[ &lt;code&gt;[&lt;/code&gt; &lt;code&gt;\n&lt;/code&gt; ]〜 &lt;code&gt;\n&lt;/code&gt; &lt;sup&gt;*&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="3c4b26856c9be2e3649537787b8c0e28472a0786" translate="yes" xml:space="preserve">
          <source>SHEBANG&lt;sup&gt;?&lt;/sup&gt;</source>
          <target state="translated">SHEBANG&lt;sup&gt;?&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="6de691384f5963f51651150662473268acfe159d" translate="yes" xml:space="preserve">
          <source>SIMD</source>
          <target state="translated">SIMD</target>
        </trans-unit>
        <trans-unit id="22eeb276e780b6ff6b8c438850d1f60bc7878e9e" translate="yes" xml:space="preserve">
          <source>SML, OCaml: algebraic data types, pattern matching, type inference, semicolon statement separation</source>
          <target state="translated">SML,OCaml:代数的データ型,パターンマッチング,型推論,セミコロン文の分離</target>
        </trans-unit>
        <trans-unit id="1de58b523ce999eba59e4751ca7a7e72e85af4e7" translate="yes" xml:space="preserve">
          <source>SOCKET</source>
          <target state="translated">SOCKET</target>
        </trans-unit>
        <trans-unit id="f648fd3aed746e2278113a2f8a9ee9de6ce669d2" translate="yes" xml:space="preserve">
          <source>SQRT_2</source>
          <target state="translated">SQRT_2</target>
        </trans-unit>
        <trans-unit id="e417c0c14e2d13af7eccbb6839d6c2e941c30381" translate="yes" xml:space="preserve">
          <source>STRING_CONTINUE :</source>
          <target state="translated">STRING_CONTINUE .</target>
        </trans-unit>
        <trans-unit id="920882e835fec2971971f3c5aa2aa60559e73a5f" translate="yes" xml:space="preserve">
          <source>STRING_LITERAL :</source>
          <target state="translated">STRING_LITERAL .</target>
        </trans-unit>
        <trans-unit id="b78310097f7848cdd92f6380a2ed0c9ed3dd8c55" translate="yes" xml:space="preserve">
          <source>Safe traits should not have unsafe implementations, therefore marking an implementation for a safe trait unsafe will cause a compiler error. Removing the unsafe marker on the trait noted in the error will resolve this problem.</source>
          <target state="translated">安全な形質は安全でない実装を持つべきではないため、安全な形質の実装に安全でないマークを付けると、コンパイラ・エラーが発生します。エラーが表示された形質の安全でないマーカーを削除すると、この問題は解決します。</target>
        </trans-unit>
        <trans-unit id="db6e7e410412f58574f766c3911f49badd42beca" translate="yes" xml:space="preserve">
          <source>Safety</source>
          <target state="translated">Safety</target>
        </trans-unit>
        <trans-unit id="c5b8fb7a6bc8b245138411045130aa3d0bdb87c5" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;to_ascii_lowercase(a) == to_ascii_lowercase(b)&lt;/code&gt;, but without allocating and copying temporaries.</source>
          <target state="translated">&lt;code&gt;to_ascii_lowercase(a) == to_ascii_lowercase(b)&lt;/code&gt; と同じですが、一時的な割り当てとコピーは行いません。</target>
        </trans-unit>
        <trans-unit id="c03bf99c5e921d67f76a77fc0f90dc0a457c4266" translate="yes" xml:space="preserve">
          <source>Saturating absolute value. Computes &lt;code&gt;self.abs()&lt;/code&gt;, returning &lt;code&gt;MAX&lt;/code&gt; if &lt;code&gt;self == MIN&lt;/code&gt; instead of overflowing.</source>
          <target state="translated">飽和絶対値。 &lt;code&gt;self.abs()&lt;/code&gt; を計算し、オーバーフローせずに、 &lt;code&gt;self == MIN&lt;/code&gt; 場合に &lt;code&gt;MAX&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="109dd1091641bc8ecebd701747ce54878af442b0" translate="yes" xml:space="preserve">
          <source>Saturating integer addition. Computes &lt;code&gt;self + rhs&lt;/code&gt;, saturating at the numeric bounds instead of overflowing.</source>
          <target state="translated">飽和整数加算。 &lt;code&gt;self + rhs&lt;/code&gt; 計算し、オーバーフローするのではなく、数値範囲で飽和します。</target>
        </trans-unit>
        <trans-unit id="57c9631709dc7db15f7aaacb3d3f0fcd0d500a59" translate="yes" xml:space="preserve">
          <source>Saturating integer exponentiation. Computes &lt;code&gt;self.pow(exp)&lt;/code&gt;, saturating at the numeric bounds instead of overflowing.</source>
          <target state="translated">飽和整数指数。 &lt;code&gt;self.pow(exp)&lt;/code&gt; を計算し、オーバーフローするのではなく、数値境界で飽和します。</target>
        </trans-unit>
        <trans-unit id="6a26ed5271afaadaf17f7bb99258598a883dbde5" translate="yes" xml:space="preserve">
          <source>Saturating integer multiplication. Computes &lt;code&gt;self * rhs&lt;/code&gt;, saturating at the numeric bounds instead of overflowing.</source>
          <target state="translated">飽和整数乗算。オーバーフローするのではなく、数値の境界で飽和する &lt;code&gt;self * rhs&lt;/code&gt; 計算します。</target>
        </trans-unit>
        <trans-unit id="4e9045498e8f92673c01343fe3158929d9ad0d53" translate="yes" xml:space="preserve">
          <source>Saturating integer negation. Computes &lt;code&gt;-self&lt;/code&gt;, returning &lt;code&gt;MAX&lt;/code&gt; if &lt;code&gt;self == MIN&lt;/code&gt; instead of overflowing.</source>
          <target state="translated">飽和整数否定。 &lt;code&gt;-self&lt;/code&gt; を計算し、オーバーフローせずに、 &lt;code&gt;self == MIN&lt;/code&gt; 場合に &lt;code&gt;MAX&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="bba0f92a2b8115b3e1c85e5395b32ac513ceaf4c" translate="yes" xml:space="preserve">
          <source>Saturating integer subtraction. Computes &lt;code&gt;self - rhs&lt;/code&gt;, saturating at the numeric bounds instead of overflowing.</source>
          <target state="translated">飽和減算。オーバーフローするのではなく、数値の境界で飽和する &lt;code&gt;self - rhs&lt;/code&gt; 計算します。</target>
        </trans-unit>
        <trans-unit id="94d7918aa6bb0576d26a84c1d4e645527e1b43b1" translate="yes" xml:space="preserve">
          <source>Save and run the program using &lt;code&gt;cargo run&lt;/code&gt;. You should receive an error message, as shown in this output:</source>
          <target state="translated">カーゴランを使用してプログラムを保存して実行し &lt;code&gt;cargo run&lt;/code&gt; 。次の出力に示すように、エラーメッセージが表示されます。</target>
        </trans-unit>
        <trans-unit id="f699547c1a083d346822dc0ad796b31a9ab59d87" translate="yes" xml:space="preserve">
          <source>Save the file and go back to your terminal window. On Linux or macOS, enter the following commands to compile and run the file:</source>
          <target state="translated">ファイルを保存して、ターミナルウィンドウに戻ります。LinuxやmacOSでは、以下のコマンドを入力してファイルをコンパイルして実行します。</target>
        </trans-unit>
        <trans-unit id="a78cbddc900d04991e91d2fb8a0c3d608d5fa9d3" translate="yes" xml:space="preserve">
          <source>Saving the Argument Values in Variables</source>
          <target state="translated">引数値を変数に保存する</target>
        </trans-unit>
        <trans-unit id="9ce8f737a0ce307980f869c94d0a5ceba9f4cfab" translate="yes" xml:space="preserve">
          <source>Scalar Types</source>
          <target state="translated">スカラーの種類</target>
        </trans-unit>
        <trans-unit id="28cba55d2aadf568463a9e7e645f8c7b1eed5e8b" translate="yes" xml:space="preserve">
          <source>Scan</source>
          <target state="translated">Scan</target>
        </trans-unit>
        <trans-unit id="a83428f0f19b6d4372010255ff2ef9ab272578d1" translate="yes" xml:space="preserve">
          <source>Scan::all</source>
          <target state="translated">Scan::all</target>
        </trans-unit>
        <trans-unit id="fdda2ce8b15a6d2075229afe525b7e8a55d35d11" translate="yes" xml:space="preserve">
          <source>Scan::any</source>
          <target state="translated">Scan::any</target>
        </trans-unit>
        <trans-unit id="8ae964ef6b78e951ac3b26e79dfd44bec458e86b" translate="yes" xml:space="preserve">
          <source>Scan::borrow</source>
          <target state="translated">Scan::borrow</target>
        </trans-unit>
        <trans-unit id="1d1fa2d81c469a644938a10e857fd20595b68115" translate="yes" xml:space="preserve">
          <source>Scan::borrow_mut</source>
          <target state="translated">Scan::borrow_mut</target>
        </trans-unit>
        <trans-unit id="dcdbeb94289a891920ae7362a81de3677cc1e082" translate="yes" xml:space="preserve">
          <source>Scan::by_ref</source>
          <target state="translated">Scan::by_ref</target>
        </trans-unit>
        <trans-unit id="44a5d113010b539112c7aebbe1efadf9df2440bf" translate="yes" xml:space="preserve">
          <source>Scan::chain</source>
          <target state="translated">Scan::chain</target>
        </trans-unit>
        <trans-unit id="7c3cbcfdfe9b063409170df12dc8d39dc6dc99d3" translate="yes" xml:space="preserve">
          <source>Scan::clone</source>
          <target state="translated">Scan::clone</target>
        </trans-unit>
        <trans-unit id="c6db19d8a19119f74425bfa04127af8420e4efc4" translate="yes" xml:space="preserve">
          <source>Scan::clone_from</source>
          <target state="translated">Scan::clone_from</target>
        </trans-unit>
        <trans-unit id="ac3ef15de8d0ee0bec5955a3a3ab25a55df08f3a" translate="yes" xml:space="preserve">
          <source>Scan::clone_into</source>
          <target state="translated">Scan::clone_into</target>
        </trans-unit>
        <trans-unit id="2ee78a8b1e01eb5cb984ff82e377950705941cbe" translate="yes" xml:space="preserve">
          <source>Scan::cloned</source>
          <target state="translated">Scan::cloned</target>
        </trans-unit>
        <trans-unit id="1d217f90eb9953f90f7cee01645024cf8b353e47" translate="yes" xml:space="preserve">
          <source>Scan::cmp</source>
          <target state="translated">Scan::cmp</target>
        </trans-unit>
        <trans-unit id="f624c4e941292af5212a257f7d7e45e1f746c610" translate="yes" xml:space="preserve">
          <source>Scan::collect</source>
          <target state="translated">Scan::collect</target>
        </trans-unit>
        <trans-unit id="140d6d7c8506b513cdbb183e0de556d84140332b" translate="yes" xml:space="preserve">
          <source>Scan::copied</source>
          <target state="translated">Scan::copied</target>
        </trans-unit>
        <trans-unit id="37be80a9aeac96c59cb970c7ab59d3d0750db5f5" translate="yes" xml:space="preserve">
          <source>Scan::count</source>
          <target state="translated">Scan::count</target>
        </trans-unit>
        <trans-unit id="6ba6c8f1417e8d7b7f648fd7ce48940adf9144f3" translate="yes" xml:space="preserve">
          <source>Scan::cycle</source>
          <target state="translated">Scan::cycle</target>
        </trans-unit>
        <trans-unit id="7ec31279e2f8b96943422c4871166206fb63dfed" translate="yes" xml:space="preserve">
          <source>Scan::enumerate</source>
          <target state="translated">Scan::enumerate</target>
        </trans-unit>
        <trans-unit id="25a5e40162d5f49695e798626fd7358037ea86f6" translate="yes" xml:space="preserve">
          <source>Scan::eq</source>
          <target state="translated">Scan::eq</target>
        </trans-unit>
        <trans-unit id="bba6fdabd86b647187c140d88b617db38d432ecc" translate="yes" xml:space="preserve">
          <source>Scan::filter</source>
          <target state="translated">Scan::filter</target>
        </trans-unit>
        <trans-unit id="22b9545f456094f84f04af42526f62045be3f6e5" translate="yes" xml:space="preserve">
          <source>Scan::filter_map</source>
          <target state="translated">Scan::filter_map</target>
        </trans-unit>
        <trans-unit id="ec6b0559d3037a1ec9affdf74744f00da3bcd772" translate="yes" xml:space="preserve">
          <source>Scan::find</source>
          <target state="translated">Scan::find</target>
        </trans-unit>
        <trans-unit id="ce8589a77e6e6f30ec5a666a8478289269d79b74" translate="yes" xml:space="preserve">
          <source>Scan::find_map</source>
          <target state="translated">Scan::find_map</target>
        </trans-unit>
        <trans-unit id="1dba7e901c826e550e1d530ba916001117fa283f" translate="yes" xml:space="preserve">
          <source>Scan::flat_map</source>
          <target state="translated">Scan::flat_map</target>
        </trans-unit>
        <trans-unit id="5ba5682fc67c867be5c841cec5f95757e352b127" translate="yes" xml:space="preserve">
          <source>Scan::flatten</source>
          <target state="translated">Scan::flatten</target>
        </trans-unit>
        <trans-unit id="54d858c081c6321abe7f407a8a917413095b9e98" translate="yes" xml:space="preserve">
          <source>Scan::fmt</source>
          <target state="translated">Scan::fmt</target>
        </trans-unit>
        <trans-unit id="ee544b0cc856e0647a04c15e5aa58914fff7d3dd" translate="yes" xml:space="preserve">
          <source>Scan::fold</source>
          <target state="translated">Scan::fold</target>
        </trans-unit>
        <trans-unit id="877effb4069116cb008b7b02185836741deeb1bd" translate="yes" xml:space="preserve">
          <source>Scan::for_each</source>
          <target state="translated">Scan::for_each</target>
        </trans-unit>
        <trans-unit id="d596133dfad2ba2eb63caf025a1006ba5d46cdbe" translate="yes" xml:space="preserve">
          <source>Scan::from</source>
          <target state="translated">Scan::from</target>
        </trans-unit>
        <trans-unit id="05f2371a703b3bb956c34eefeb2778aa851dc375" translate="yes" xml:space="preserve">
          <source>Scan::fuse</source>
          <target state="translated">Scan::fuse</target>
        </trans-unit>
        <trans-unit id="5c5199789fc91ccfc059a9513dde8cc16dc76c24" translate="yes" xml:space="preserve">
          <source>Scan::ge</source>
          <target state="translated">Scan::ge</target>
        </trans-unit>
        <trans-unit id="b10b247c902a2bfa3e7132b61f9fc779d22e5f18" translate="yes" xml:space="preserve">
          <source>Scan::gt</source>
          <target state="translated">Scan::gt</target>
        </trans-unit>
        <trans-unit id="02d37e0f76b525bbfed8d07b3144e6b3574d8747" translate="yes" xml:space="preserve">
          <source>Scan::inspect</source>
          <target state="translated">Scan::inspect</target>
        </trans-unit>
        <trans-unit id="e77e489028848d463f401f4c49d8009a9ef763fb" translate="yes" xml:space="preserve">
          <source>Scan::into</source>
          <target state="translated">Scan::into</target>
        </trans-unit>
        <trans-unit id="8f74006cbeb828113f5fc9538a8101d864393fe2" translate="yes" xml:space="preserve">
          <source>Scan::into_iter</source>
          <target state="translated">Scan::into_iter</target>
        </trans-unit>
        <trans-unit id="97aceb0807e7408fc95fa9e8207b84bd8085b8c9" translate="yes" xml:space="preserve">
          <source>Scan::is_sorted</source>
          <target state="translated">Scan::is_sorted</target>
        </trans-unit>
        <trans-unit id="7ee340cb30ed71bb397fabe21931f6dab7264f46" translate="yes" xml:space="preserve">
          <source>Scan::is_sorted_by</source>
          <target state="translated">Scan::is_sorted_by</target>
        </trans-unit>
        <trans-unit id="58036d9ce660f7aef80fc0b987f4b2d1d619f2fd" translate="yes" xml:space="preserve">
          <source>Scan::is_sorted_by_key</source>
          <target state="translated">Scan::is_sorted_by_key</target>
        </trans-unit>
        <trans-unit id="8f663c380aa3d6bda22377b6769b2cb7e3745f74" translate="yes" xml:space="preserve">
          <source>Scan::last</source>
          <target state="translated">Scan::last</target>
        </trans-unit>
        <trans-unit id="62a5c990f54f0366a46db77c2e2b1ef1c18f7174" translate="yes" xml:space="preserve">
          <source>Scan::le</source>
          <target state="translated">Scan::le</target>
        </trans-unit>
        <trans-unit id="cfa5cf71030074646966407091c6fa5aa1ba85eb" translate="yes" xml:space="preserve">
          <source>Scan::lt</source>
          <target state="translated">Scan::lt</target>
        </trans-unit>
        <trans-unit id="44e4a34744c1e0cdc7555d5c68d6d19573656894" translate="yes" xml:space="preserve">
          <source>Scan::map</source>
          <target state="translated">Scan::map</target>
        </trans-unit>
        <trans-unit id="f2a07a63439a0ebcde98f43e8b3fbb80d4952811" translate="yes" xml:space="preserve">
          <source>Scan::max</source>
          <target state="translated">Scan::max</target>
        </trans-unit>
        <trans-unit id="3cfafd3b9dad17f4287fad1302263c256bdb9da2" translate="yes" xml:space="preserve">
          <source>Scan::max_by</source>
          <target state="translated">Scan::max_by</target>
        </trans-unit>
        <trans-unit id="c65b07c42c554193abc8eceb99ec17650b947d6e" translate="yes" xml:space="preserve">
          <source>Scan::max_by_key</source>
          <target state="translated">Scan::max_by_key</target>
        </trans-unit>
        <trans-unit id="75992f861a2f69a877ca4c109354b275b180bd95" translate="yes" xml:space="preserve">
          <source>Scan::min</source>
          <target state="translated">Scan::min</target>
        </trans-unit>
        <trans-unit id="b26db00332d6adb34cd1adc934b3dc8b34c8f9dc" translate="yes" xml:space="preserve">
          <source>Scan::min_by</source>
          <target state="translated">Scan::min_by</target>
        </trans-unit>
        <trans-unit id="8bd0f12b39a926d27ef33306910f880301f2454a" translate="yes" xml:space="preserve">
          <source>Scan::min_by_key</source>
          <target state="translated">Scan::min_by_key</target>
        </trans-unit>
        <trans-unit id="29d50c77efde6dbc085b208d7c218943a0ea0714" translate="yes" xml:space="preserve">
          <source>Scan::ne</source>
          <target state="translated">Scan::ne</target>
        </trans-unit>
        <trans-unit id="1ab71f992ffe8596c0341900bef028b3308973f8" translate="yes" xml:space="preserve">
          <source>Scan::next</source>
          <target state="translated">Scan::next</target>
        </trans-unit>
        <trans-unit id="c5850266e5e6c46cb795904dd076371082aa08f3" translate="yes" xml:space="preserve">
          <source>Scan::nth</source>
          <target state="translated">Scan::nth</target>
        </trans-unit>
        <trans-unit id="ff5105bc82f317b54ad32741845c344dd57225c9" translate="yes" xml:space="preserve">
          <source>Scan::partial_cmp</source>
          <target state="translated">Scan::partial_cmp</target>
        </trans-unit>
        <trans-unit id="23ebf388b9af419edd8a10316e92a28cdcc54ea5" translate="yes" xml:space="preserve">
          <source>Scan::partition</source>
          <target state="translated">Scan::partition</target>
        </trans-unit>
        <trans-unit id="78ca9808b2d539ab3576f5e1204530b9bd1adc02" translate="yes" xml:space="preserve">
          <source>Scan::peekable</source>
          <target state="translated">Scan::peekable</target>
        </trans-unit>
        <trans-unit id="2b0d89811cd472d52b60e91c8231f7ff0add786d" translate="yes" xml:space="preserve">
          <source>Scan::position</source>
          <target state="translated">Scan::position</target>
        </trans-unit>
        <trans-unit id="d8e52b56df09d900a46a0d11405db4d163939745" translate="yes" xml:space="preserve">
          <source>Scan::product</source>
          <target state="translated">Scan::product</target>
        </trans-unit>
        <trans-unit id="f564b9f823c397c793d11fee1b39b46f01f0e5a0" translate="yes" xml:space="preserve">
          <source>Scan::rev</source>
          <target state="translated">Scan::rev</target>
        </trans-unit>
        <trans-unit id="2b6ef2d07d09325ad0a4156fe82830daa7c2000c" translate="yes" xml:space="preserve">
          <source>Scan::rposition</source>
          <target state="translated">Scan::rposition</target>
        </trans-unit>
        <trans-unit id="e16bad2125996665ff244f29435a894ef4dd3342" translate="yes" xml:space="preserve">
          <source>Scan::scan</source>
          <target state="translated">Scan::scan</target>
        </trans-unit>
        <trans-unit id="7948a9c7ae9eaead157d3b15d36b95efb521f5d8" translate="yes" xml:space="preserve">
          <source>Scan::size_hint</source>
          <target state="translated">Scan::size_hint</target>
        </trans-unit>
        <trans-unit id="e80e6e3937516c92e418a5fe916bfac2e483b066" translate="yes" xml:space="preserve">
          <source>Scan::skip</source>
          <target state="translated">Scan::skip</target>
        </trans-unit>
        <trans-unit id="242d9090f46800125c301ef29b2906cc536d0877" translate="yes" xml:space="preserve">
          <source>Scan::skip_while</source>
          <target state="translated">Scan::skip_while</target>
        </trans-unit>
        <trans-unit id="9f63e26973be9f3afb89ae3f4e2ed85606b635af" translate="yes" xml:space="preserve">
          <source>Scan::step_by</source>
          <target state="translated">Scan::step_by</target>
        </trans-unit>
        <trans-unit id="6b16e51cd58da3de9d5f7eea0e0f07ca046d979c" translate="yes" xml:space="preserve">
          <source>Scan::sum</source>
          <target state="translated">Scan::sum</target>
        </trans-unit>
        <trans-unit id="a7282175f1d0da9413967d85f69c6e868558487e" translate="yes" xml:space="preserve">
          <source>Scan::take</source>
          <target state="translated">Scan::take</target>
        </trans-unit>
        <trans-unit id="a150dc4d16df56db4605174e979cea6899d1ad9c" translate="yes" xml:space="preserve">
          <source>Scan::take_while</source>
          <target state="translated">Scan::take_while</target>
        </trans-unit>
        <trans-unit id="13a823d246b96299ec57e999197efc7fa9ae0a31" translate="yes" xml:space="preserve">
          <source>Scan::to_owned</source>
          <target state="translated">Scan::to_owned</target>
        </trans-unit>
        <trans-unit id="3ef6fcb77ca31a6f969ff19b4b3aa9051300806f" translate="yes" xml:space="preserve">
          <source>Scan::try_fold</source>
          <target state="translated">Scan::try_fold</target>
        </trans-unit>
        <trans-unit id="db1f0815536f2e7e0fccb46f579eb7c1f5f467fc" translate="yes" xml:space="preserve">
          <source>Scan::try_for_each</source>
          <target state="translated">Scan::try_for_each</target>
        </trans-unit>
        <trans-unit id="e3ca0918eba1feb0dd819a8739d918a22b7a106d" translate="yes" xml:space="preserve">
          <source>Scan::try_from</source>
          <target state="translated">Scan::try_from</target>
        </trans-unit>
        <trans-unit id="bd50714b4294891b30df26cd83bd683f7dc15be8" translate="yes" xml:space="preserve">
          <source>Scan::try_into</source>
          <target state="translated">Scan::try_into</target>
        </trans-unit>
        <trans-unit id="046b6bc008c7041f8edf76e7602802d827d08367" translate="yes" xml:space="preserve">
          <source>Scan::type_id</source>
          <target state="translated">Scan::type_id</target>
        </trans-unit>
        <trans-unit id="569da91365c91b5131222d7de125089d3f265484" translate="yes" xml:space="preserve">
          <source>Scan::unzip</source>
          <target state="translated">Scan::unzip</target>
        </trans-unit>
        <trans-unit id="e947a087f9ad656a226215379de2667c1377de6e" translate="yes" xml:space="preserve">
          <source>Scan::zip</source>
          <target state="translated">Scan::zip</target>
        </trans-unit>
        <trans-unit id="fb63302c6f22a6965dfa609e8e20a66d7199f9dd" translate="yes" xml:space="preserve">
          <source>Schedules a closure to be run just before the &lt;code&gt;exec&lt;/code&gt; function is invoked.</source>
          <target state="translated">&lt;code&gt;exec&lt;/code&gt; 関数が呼び出される直前にクロージャーが実行されるようにスケジュールします。</target>
        </trans-unit>
        <trans-unit id="c21507c1a91d893abdec9840fa9ae19963c02140" translate="yes" xml:space="preserve">
          <source>Schedules a closure to be run just before the &lt;code&gt;exec&lt;/code&gt; function is invoked. &lt;a href=&quot;../os/unix/process/trait.commandext#method.before_exec&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;exec&lt;/code&gt; 関数が呼び出される直前にクロージャーが実行されるようにスケジュールします。&lt;a href=&quot;../os/unix/process/trait.commandext#method.before_exec&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3828bb2307999d77ee3cc9989b1f128ccf8cc518" translate="yes" xml:space="preserve">
          <source>Schedules a closure to be run just before the &lt;code&gt;exec&lt;/code&gt; function is invoked. &lt;a href=&quot;../os/unix/process/trait.commandext#tymethod.pre_exec&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;exec&lt;/code&gt; 関数が呼び出される直前にクロージャーが実行されるようにスケジュールします。&lt;a href=&quot;../os/unix/process/trait.commandext#tymethod.pre_exec&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="99d69565bd3ab366d37906300f1bf9bb70804a55" translate="yes" xml:space="preserve">
          <source>Scheme: hygienic macros</source>
          <target state="translated">スキーム:衛生的なマクロ</target>
        </trans-unit>
        <trans-unit id="f869c7563d63df9f222d947a975a45138e95b942" translate="yes" xml:space="preserve">
          <source>Scoping, Exporting, and Importing</source>
          <target state="translated">スコーピング、エクスポート、インポート</target>
        </trans-unit>
        <trans-unit id="d908d24ab618c48e6ae073715a0ab05f7bb4153e" translate="yes" xml:space="preserve">
          <source>Scripts without case are not changed:</source>
          <target state="translated">大文字小文字のないスクリプトは変更されません。</target>
        </trans-unit>
        <trans-unit id="92f5c17a4180087f0927972817e9d930fd2be3b1" translate="yes" xml:space="preserve">
          <source>Scrutinee</source>
          <target state="translated">Scrutinee</target>
        </trans-unit>
        <trans-unit id="057c00f982acbbd131543e7b48e94d17da16d57d" translate="yes" xml:space="preserve">
          <source>SearchStep</source>
          <target state="translated">SearchStep</target>
        </trans-unit>
        <trans-unit id="3373ce77abd3e6c254656b5ae418e3b5a03551cc" translate="yes" xml:space="preserve">
          <source>Searcher</source>
          <target state="translated">Searcher</target>
        </trans-unit>
        <trans-unit id="11363ade1d3d6a9830725b9ee63abd37a1ea1520" translate="yes" xml:space="preserve">
          <source>Searches for an element in an iterator from the right, returning its index.</source>
          <target state="translated">右からイテレータ内の要素を検索し、そのインデックスを返します。</target>
        </trans-unit>
        <trans-unit id="ea94f8f1fd65b3e808118ecb3c6a64d1be80abc0" translate="yes" xml:space="preserve">
          <source>Searches for an element in an iterator from the right, returning its index. &lt;a href=&quot;../../../iter/trait.iterator#method.rposition&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">右からイテレータの要素を検索し、そのインデックスを返します。&lt;a href=&quot;../../../iter/trait.iterator#method.rposition&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a32b846472e7629b89337b736deb7cba8899702b" translate="yes" xml:space="preserve">
          <source>Searches for an element in an iterator from the right, returning its index. &lt;a href=&quot;../../iter/trait.iterator#method.rposition&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">右からイテレータの要素を検索し、そのインデックスを返します。&lt;a href=&quot;../../iter/trait.iterator#method.rposition&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2fbabe20f2ae80e8b4000f5a8fda30a8bcd233af" translate="yes" xml:space="preserve">
          <source>Searches for an element in an iterator from the right, returning its index. &lt;a href=&quot;../iter/trait.iterator#method.rposition&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">右からイテレータの要素を検索し、そのインデックスを返します。&lt;a href=&quot;../iter/trait.iterator#method.rposition&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="58a6f63decee1650a72cc8d3d4b0dc8ae926d3ea" translate="yes" xml:space="preserve">
          <source>Searches for an element in an iterator from the right, returning its index. &lt;a href=&quot;iter/trait.iterator#method.rposition&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">右からイテレータの要素を検索し、そのインデックスを返します。&lt;a href=&quot;iter/trait.iterator#method.rposition&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="fe2da068b1383ba78d78179215e20384ebd856f5" translate="yes" xml:space="preserve">
          <source>Searches for an element in an iterator from the right, returning its index. &lt;a href=&quot;trait.iterator#method.rposition&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">右からイテレータの要素を検索し、そのインデックスを返します。&lt;a href=&quot;trait.iterator#method.rposition&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="888aace1ecfca3a664f3926fcdf9d9c8737ed80d" translate="yes" xml:space="preserve">
          <source>Searches for an element in an iterator, returning its index.</source>
          <target state="translated">イテレータ内の要素を検索し、そのインデックスを返します。</target>
        </trans-unit>
        <trans-unit id="b1e4dd5c105e14ff5ce136025420dedeece55e5c" translate="yes" xml:space="preserve">
          <source>Searches for an element in an iterator, returning its index. &lt;a href=&quot;../../../iter/trait.iterator#method.position&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">イテレータの要素を検索し、そのインデックスを返します。&lt;a href=&quot;../../../iter/trait.iterator#method.position&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d5cf7f1d717e2cb1cdd88f6ee856563d8c126e03" translate="yes" xml:space="preserve">
          <source>Searches for an element in an iterator, returning its index. &lt;a href=&quot;../../iter/trait.iterator#method.position&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">イテレータの要素を検索し、そのインデックスを返します。&lt;a href=&quot;../../iter/trait.iterator#method.position&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="898fb33cb492658409d014bf819e485b96a05d7f" translate="yes" xml:space="preserve">
          <source>Searches for an element in an iterator, returning its index. &lt;a href=&quot;../iter/trait.iterator#method.position&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">イテレータの要素を検索し、そのインデックスを返します。&lt;a href=&quot;../iter/trait.iterator#method.position&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1eb70845c5eb53f54ffe500cb5ff9dd1a042ee65" translate="yes" xml:space="preserve">
          <source>Searches for an element in an iterator, returning its index. &lt;a href=&quot;iter/trait.iterator#method.position&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">イテレータの要素を検索し、そのインデックスを返します。&lt;a href=&quot;iter/trait.iterator#method.position&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="736c00e0587ecd076f8c2f0471322e982b180ef4" translate="yes" xml:space="preserve">
          <source>Searches for an element in an iterator, returning its index. &lt;a href=&quot;trait.iterator#method.position&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">イテレータの要素を検索し、そのインデックスを返します。&lt;a href=&quot;trait.iterator#method.position&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9d823a12940ddccec2fac026ab8506ebd4fce1ad" translate="yes" xml:space="preserve">
          <source>Searches for an element of an iterator from the back that satisfies a predicate.</source>
          <target state="translated">述語を満たすイテレータの要素を後ろから探します。</target>
        </trans-unit>
        <trans-unit id="532083e20b7883df5506427bdf3897cf9c69ee57" translate="yes" xml:space="preserve">
          <source>Searches for an element of an iterator from the back that satisfies a predicate. &lt;a href=&quot;../../iter/trait.doubleendediterator#method.rfind&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">述語を満たすイテレータの要素を後ろから検索します。&lt;a href=&quot;../../iter/trait.doubleendediterator#method.rfind&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="746936471fbd43113547a89d6d3b931297227e42" translate="yes" xml:space="preserve">
          <source>Searches for an element of an iterator from the back that satisfies a predicate. &lt;a href=&quot;../iter/trait.doubleendediterator#method.rfind&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">述語を満たすイテレータの要素を後ろから検索します。&lt;a href=&quot;../iter/trait.doubleendediterator#method.rfind&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="85288c4b67b128aa63ce0cba0a0f6c128e49b4a1" translate="yes" xml:space="preserve">
          <source>Searches for an element of an iterator from the back that satisfies a predicate. &lt;a href=&quot;iter/trait.doubleendediterator#method.rfind&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">述語を満たすイテレータの要素を後ろから検索します。&lt;a href=&quot;iter/trait.doubleendediterator#method.rfind&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="65a626fe71f749af973dfce0d72fd7e24c3b262a" translate="yes" xml:space="preserve">
          <source>Searches for an element of an iterator from the back that satisfies a predicate. &lt;a href=&quot;trait.doubleendediterator#method.rfind&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">述語を満たすイテレータの要素を後ろから検索します。&lt;a href=&quot;trait.doubleendediterator#method.rfind&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b5689009b2419d56c677d881fa744acad45be906" translate="yes" xml:space="preserve">
          <source>Searches for an element of an iterator that satisfies a predicate.</source>
          <target state="translated">述語を満たすイテレータの要素を検索します。</target>
        </trans-unit>
        <trans-unit id="b92e1c9d3102e3784e7bf1b1ae13ecbed92601c8" translate="yes" xml:space="preserve">
          <source>Searches for an element of an iterator that satisfies a predicate. &lt;a href=&quot;../../../iter/trait.iterator#method.find&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">述語を満たす反復子の要素を検索します。&lt;a href=&quot;../../../iter/trait.iterator#method.find&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3cdaab1b181a213143c872a425525e5ad8e5466c" translate="yes" xml:space="preserve">
          <source>Searches for an element of an iterator that satisfies a predicate. &lt;a href=&quot;../../iter/trait.iterator#method.find&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">述語を満たす反復子の要素を検索します。&lt;a href=&quot;../../iter/trait.iterator#method.find&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="cf92031246f6c4823820728ce733391b75632750" translate="yes" xml:space="preserve">
          <source>Searches for an element of an iterator that satisfies a predicate. &lt;a href=&quot;../iter/trait.iterator#method.find&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">述語を満たす反復子の要素を検索します。&lt;a href=&quot;../iter/trait.iterator#method.find&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2f547a648c4bbc4e82d48e90d04b24d4601646c0" translate="yes" xml:space="preserve">
          <source>Searches for an element of an iterator that satisfies a predicate. &lt;a href=&quot;iter/trait.iterator#method.find&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">述語を満たす反復子の要素を検索します。&lt;a href=&quot;iter/trait.iterator#method.find&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="87ac7333a913b0c4084d8e023b09ac4cdffe8559" translate="yes" xml:space="preserve">
          <source>Searches for an element of an iterator that satisfies a predicate. &lt;a href=&quot;trait.iterator#method.find&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">述語を満たす反復子の要素を検索します。&lt;a href=&quot;trait.iterator#method.find&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="333fc641daf7d2737df9c4e746769731b83136e8" translate="yes" xml:space="preserve">
          <source>Searches for chars that are equal to a given char</source>
          <target state="translated">与えられた文字と等しい文字を検索します。</target>
        </trans-unit>
        <trans-unit id="702c314d5b30f1accfdbb832ab87fbb0b341a336" translate="yes" xml:space="preserve">
          <source>Searches for chars that are equal to any of the chars in the array</source>
          <target state="translated">配列内のいずれかの文字と等しい文字を検索します。</target>
        </trans-unit>
        <trans-unit id="ba66da2741c0ff78a37e961a37db7788a9edb5a8" translate="yes" xml:space="preserve">
          <source>Searches for chars that match the given predicate</source>
          <target state="translated">与えられた述語にマッチする文字を検索します。</target>
        </trans-unit>
        <trans-unit id="f79707c4ffd13504e8a620181e79d250b74fd521" translate="yes" xml:space="preserve">
          <source>Searching Each Line for the Query</source>
          <target state="translated">クエリの各行を検索する</target>
        </trans-unit>
        <trans-unit id="554e5e25f0d86fc7d48da5b753f3b192e04d6a22" translate="yes" xml:space="preserve">
          <source>Second example:</source>
          <target state="translated">第二の例。</target>
        </trans-unit>
        <trans-unit id="ddb8f6a409190e926fb7592f2d1a6011c5f9d5bd" translate="yes" xml:space="preserve">
          <source>Second, &lt;code&gt;println!&lt;/code&gt; calls a Rust macro. If it called a function instead, it would be entered as &lt;code&gt;println&lt;/code&gt; (without the &lt;code&gt;!&lt;/code&gt;). We&amp;rsquo;ll discuss Rust macros in more detail in Chapter 19. For now, you just need to know that using a &lt;code&gt;!&lt;/code&gt; means that you&amp;rsquo;re calling a macro instead of a normal function.</source>
          <target state="translated">次に、 &lt;code&gt;println!&lt;/code&gt; Rustマクロを呼び出します。代わりに関数を呼び出すと、 &lt;code&gt;println&lt;/code&gt; として入力されます（ &lt;code&gt;!&lt;/code&gt; なし）。 Rustマクロについては第19章で詳しく説明します。今のところは、 &lt;code&gt;!&lt;/code&gt; 通常の関数の代わりにマクロを呼び出すことを意味します。</target>
        </trans-unit>
        <trans-unit id="e0edb499b1c552b3dc16b17f7114852ca1f2a36c" translate="yes" xml:space="preserve">
          <source>Second, each repetition in the transcriber must contain at least one metavariable to decide now many times to expand it. If multiple metavariables appear in the same repetition, they must be bound to the same number of fragments. For instance, &lt;code&gt;( $( $i:ident ),* ; $( $j:ident ),* ) =&amp;gt; ( $( ($i,$j) ),*&lt;/code&gt; must bind the same number of &lt;code&gt;$i&lt;/code&gt; fragments as &lt;code&gt;$j&lt;/code&gt; fragments. This means that invoking the macro with &lt;code&gt;(a, b, c; d, e, f&lt;/code&gt;) is legal and expands to &lt;code&gt;((a,d), (b,e), c,f))&lt;/code&gt;, but &lt;code&gt;(a, b, c; d, e)&lt;/code&gt; is illegal because it does not have the same number. This requirement applies to every layer of nested repetitions.</source>
          <target state="translated">次に、トランスクライバーの各繰り返しには、少なくとも1つのメタ変数が含まれている必要があります。複数のメタ変数が同じ繰り返しで現れる場合、それらは同じ数のフラグメントにバインドされている必要があります。たとえば、 &lt;code&gt;( $( $i:ident ),* ; $( $j:ident ),* ) =&amp;gt; ( $( ($i,$j) ),*&lt;/code&gt; 同じ数のバインドする必要があります &lt;code&gt;$i&lt;/code&gt; として断片を &lt;code&gt;$j&lt;/code&gt; フラグメント。これは、 &lt;code&gt;(a, b, c; d, e, f&lt;/code&gt; ）でマクロを呼び出すことが正当であり、 &lt;code&gt;((a,d), (b,e), c,f))&lt;/code&gt; に展開されるが、 &lt;code&gt;(a, b, c; d, e)&lt;/code&gt; は同じ番号を持たないため、不正です。この要件は、ネストされた繰り返しのすべてのレイヤーに適用されます。</target>
        </trans-unit>
        <trans-unit id="9a073c305891d074dfc05591aefc3b14e4c5555c" translate="yes" xml:space="preserve">
          <source>Second, implicit methods on &lt;a href=&quot;../book/ch03-02-data-types&quot;&gt;primitive types&lt;/a&gt; are documented here. This can be a source of confusion for two reasons:</source>
          <target state="translated">次に、&lt;a href=&quot;../book/ch03-02-data-types&quot;&gt;プリミティブ型の&lt;/a&gt;暗黙的なメソッドがここに文書化されています。これは2つの理由で混乱の原因となる可能性があります。</target>
        </trans-unit>
        <trans-unit id="cc4af03ac46d7dd2d589609d8142afb265cb45e5" translate="yes" xml:space="preserve">
          <source>Second, it can be used to import macros from another crate, by attaching it to an &lt;code&gt;extern crate&lt;/code&gt; declaration appearing in the crate's root module. Macros imported this way are imported into the prelude of the crate, not textually, which means that they can be shadowed by any other name. While macros imported by &lt;code&gt;#[macro_use]&lt;/code&gt; can be used before the import statement, in case of a conflict, the last macro imported wins. Optionally, a list of macros to import can be specified using the &lt;a href=&quot;attributes#meta-item-attribute-syntax&quot;&gt;&lt;em&gt;MetaListIdents&lt;/em&gt;&lt;/a&gt; syntax; this is not supported when &lt;code&gt;#[macro_use]&lt;/code&gt; is applied to a module.</source>
          <target state="translated">第2 に、クレートのルートモジュールに表示される &lt;code&gt;extern crate&lt;/code&gt; 宣言に添付することにより、別のクレートからマクロをインポートするために使用できます。この方法でインポートされたマクロは、テキストではなくクレートのプレリュードにインポートされます。つまり、他の名前でシャドウすることができます。 &lt;code&gt;#[macro_use]&lt;/code&gt; によってインポートされたマクロはimportステートメントの前に使用できますが、競合が発生した場合は、最後にインポートされたマクロが優先されます。必要に応じて、インポートするマクロのリストを&lt;a href=&quot;attributes#meta-item-attribute-syntax&quot;&gt;&lt;em&gt;MetaListIdents&lt;/em&gt;&lt;/a&gt;構文を使用して指定できます。これは、 &lt;code&gt;#[macro_use]&lt;/code&gt; がモジュールに適用されている場合はサポートされません。</target>
        </trans-unit>
        <trans-unit id="97208cc673dd09ce82f68d9602b8fe562c39c03b" translate="yes" xml:space="preserve">
          <source>Second, the &lt;code&gt;five&lt;/code&gt; function has no parameters and defines the type of the return value, but the body of the function is a lonely &lt;code&gt;5&lt;/code&gt; with no semicolon because it&amp;rsquo;s an expression whose value we want to return.</source>
          <target state="translated">2番目に、 &lt;code&gt;five&lt;/code&gt; 関数にはパラメーターがなく、戻り値の型を定義しますが、関数の本体は、値を返す式であるため、セミコロンのない孤独な &lt;code&gt;5&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="4edacf5668ae7bc8aecc8dd49a240019787fb54c" translate="yes" xml:space="preserve">
          <source>Second, we can see in the signature that &lt;code&gt;add&lt;/code&gt; takes ownership of &lt;code&gt;self&lt;/code&gt;, because &lt;code&gt;self&lt;/code&gt; does &lt;em&gt;not&lt;/em&gt; have an &lt;code&gt;&amp;amp;&lt;/code&gt;. This means &lt;code&gt;s1&lt;/code&gt; in Listing 8-18 will be moved into the &lt;code&gt;add&lt;/code&gt; call and no longer be valid after that. So although &lt;code&gt;let s3 = s1 + &amp;amp;s2;&lt;/code&gt; looks like it will copy both strings and create a new one, this statement actually takes ownership of &lt;code&gt;s1&lt;/code&gt;, appends a copy of the contents of &lt;code&gt;s2&lt;/code&gt;, and then returns ownership of the result. In other words, it looks like it&amp;rsquo;s making a lot of copies but isn&amp;rsquo;t; the implementation is more efficient than copying.</source>
          <target state="translated">次に、署名には、 &lt;code&gt;add&lt;/code&gt; が &lt;code&gt;self&lt;/code&gt; の所有権を取ることがわかります。&lt;em&gt;これ&lt;/em&gt;は、 &lt;code&gt;self&lt;/code&gt; に &lt;code&gt;&amp;amp;&lt;/code&gt; が&lt;em&gt;ない&lt;/em&gt;ためです。これは、リスト8-18の &lt;code&gt;s1&lt;/code&gt; が &lt;code&gt;add&lt;/code&gt; 呼び出しに移動され、その後は無効になることを意味します。したがって、 &lt;code&gt;let s3 = s1 + &amp;amp;s2;&lt;/code&gt; 両方の文字列をコピーして新しい文字列を作成するように見えます。このステートメントは実際には &lt;code&gt;s1&lt;/code&gt; の所有権を取得し、 &lt;code&gt;s2&lt;/code&gt; の内容のコピーを追加して、結果の所有権を返します。つまり、多くのコピーを作成しているように見えますが、そうではありません。実装はコピーよりも効率的です。</target>
        </trans-unit>
        <trans-unit id="945d69a3e9b1262e6a65728582125632ae46e284" translate="yes" xml:space="preserve">
          <source>Second, we convert the bytes in the buffer to a string and print that string. The &lt;code&gt;String::from_utf8_lossy&lt;/code&gt; function takes a &lt;code&gt;&amp;amp;[u8]&lt;/code&gt; and produces a &lt;code&gt;String&lt;/code&gt; from it. The &amp;ldquo;lossy&amp;rdquo; part of the name indicates the behavior of this function when it sees an invalid UTF-8 sequence: it will replace the invalid sequence with &lt;code&gt;�&lt;/code&gt;, the &lt;code&gt;U+FFFD REPLACEMENT CHARACTER&lt;/code&gt;. You might see replacement characters for characters in the buffer that aren&amp;rsquo;t filled by request data.</source>
          <target state="translated">次に、バッファ内のバイトを文字列に変換し、その文字列を出力します。 &lt;code&gt;String::from_utf8_lossy&lt;/code&gt; 機能がかかる &lt;code&gt;&amp;amp;[u8]&lt;/code&gt; して生成し &lt;code&gt;String&lt;/code&gt; 、それから。それは不正なUTF-8シーケンスを見ているときに名前の「不可逆」の部分は、この関数の動作を示しています。それはで無効なシーケンスに置き換えられます &lt;code&gt;�&lt;/code&gt; 、 &lt;code&gt;U+FFFD REPLACEMENT CHARACTER&lt;/code&gt; 。リクエストデータで満たされていないバッファ内の文字の置換文字が表示される場合があります。</target>
        </trans-unit>
        <trans-unit id="9e79dfeb52515135908df7ef8a4402c9cf237457" translate="yes" xml:space="preserve">
          <source>Second, we&amp;rsquo;ve removed the call to &lt;code&gt;expect&lt;/code&gt; in favor of the &lt;code&gt;?&lt;/code&gt; operator, as we talked about in &lt;a href=&quot;ch09-02-recoverable-errors-with-result#a-shortcut-for-propagating-errors-the--operator&quot;&gt;Chapter 9&lt;/a&gt;. Rather than &lt;code&gt;panic!&lt;/code&gt; on an error, &lt;code&gt;?&lt;/code&gt; will return the error value from the current function for the caller to handle.</source>
          <target state="translated">第二に、我々は、呼び出しを削除した &lt;code&gt;expect&lt;/code&gt; に賛成 &lt;code&gt;?&lt;/code&gt; &lt;a href=&quot;ch09-02-recoverable-errors-with-result#a-shortcut-for-propagating-errors-the--operator&quot;&gt;第9章&lt;/a&gt;で説明したように、演算子。 &lt;code&gt;panic!&lt;/code&gt; はなく！エラーの場合、 &lt;code&gt;?&lt;/code&gt; 呼び出し元が処理できるように、現在の関数からエラー値を返します。</target>
        </trans-unit>
        <trans-unit id="f25ce1b8a399bd8621a57427a20039b4b13935db" translate="yes" xml:space="preserve">
          <source>Security</source>
          <target state="translated">Security</target>
        </trans-unit>
        <trans-unit id="8a13fe09bb6db614bb3789b1ed210e6989bc7612" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#method.chunks&quot;&gt;&lt;code&gt;chunks&lt;/code&gt;&lt;/a&gt; for a variant of this iterator that also returns the remainder as a smaller chunk, and &lt;a href=&quot;#method.rchunks_exact&quot;&gt;&lt;code&gt;rchunks_exact&lt;/code&gt;&lt;/a&gt; for the same iterator but starting at the end of the slice.</source>
          <target state="translated">残りをより小さいチャンクとしても返すこのイテレータのバリアントについては、&lt;a href=&quot;#method.chunks&quot;&gt; &lt;code&gt;chunks&lt;/code&gt; &lt;/a&gt;を参照してください。同じイテレータについては、スライスの最後から始まる&lt;a href=&quot;#method.rchunks_exact&quot;&gt; &lt;code&gt;rchunks_exact&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="ad53b94a6533ff2d11534623a32f3e1cf407ac05" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#method.chunks_exact&quot;&gt;&lt;code&gt;chunks_exact&lt;/code&gt;&lt;/a&gt; for a variant of this iterator that returns chunks of always exactly &lt;code&gt;chunk_size&lt;/code&gt; elements, and &lt;a href=&quot;#method.rchunks&quot;&gt;&lt;code&gt;rchunks&lt;/code&gt;&lt;/a&gt; for the same iterator but starting at the end of the slice of the slice.</source>
          <target state="translated">参照してください&lt;a href=&quot;#method.chunks_exact&quot;&gt; &lt;code&gt;chunks_exact&lt;/code&gt; &lt;/a&gt;のリターンチャンクが常に正確にすることを、このイテレータの変異体について &lt;code&gt;chunk_size&lt;/code&gt; 要素、および&lt;a href=&quot;#method.rchunks&quot;&gt; &lt;code&gt;rchunks&lt;/code&gt; を&lt;/a&gt;同じイテレータのためではなく、スライスのスライスの終わりから始まります。</target>
        </trans-unit>
        <trans-unit id="a301ebf0252ab69de735b799a6daa8fd205fac9a" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#method.chunks_exact_mut&quot;&gt;&lt;code&gt;chunks_exact_mut&lt;/code&gt;&lt;/a&gt; for a variant of this iterator that returns chunks of always exactly &lt;code&gt;chunk_size&lt;/code&gt; elements, and &lt;a href=&quot;#method.rchunks_mut&quot;&gt;&lt;code&gt;rchunks_mut&lt;/code&gt;&lt;/a&gt; for the same iterator but starting at the end of the slice of the slice.</source>
          <target state="translated">参照してください&lt;a href=&quot;#method.chunks_exact_mut&quot;&gt; &lt;code&gt;chunks_exact_mut&lt;/code&gt; &lt;/a&gt;この戻りチャンクが常に正確というイテレータのバリアントの &lt;code&gt;chunk_size&lt;/code&gt; 要素を、そして&lt;a href=&quot;#method.rchunks_mut&quot;&gt; &lt;code&gt;rchunks_mut&lt;/code&gt; &lt;/a&gt;同じイテレータのためではなく、スライスのスライスの終わりから始まります。</target>
        </trans-unit>
        <trans-unit id="edaf8a9ebbe2ba6f933b491ded7f7c453a863e8c" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#method.chunks_mut&quot;&gt;&lt;code&gt;chunks_mut&lt;/code&gt;&lt;/a&gt; for a variant of this iterator that also returns the remainder as a smaller chunk, and &lt;a href=&quot;#method.rchunks_exact_mut&quot;&gt;&lt;code&gt;rchunks_exact_mut&lt;/code&gt;&lt;/a&gt; for the same iterator but starting at the end of the slice of the slice.</source>
          <target state="translated">残りをより小さいチャンクとしても返すこのイテレータのバリアントについては&lt;a href=&quot;#method.rchunks_exact_mut&quot;&gt; &lt;code&gt;rchunks_exact_mut&lt;/code&gt; &lt;/a&gt;を、同じイテレータについてはスライスのスライスの最後から始まる&lt;a href=&quot;#method.chunks_mut&quot;&gt; &lt;code&gt;chunks_mut&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="7214a0c4565a2b79c37054fc238c92ff1ed1713c" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#method.is_absolute&quot;&gt;&lt;code&gt;is_absolute&lt;/code&gt;&lt;/a&gt;'s documentation for more details.</source>
          <target state="translated">詳細については、&lt;a href=&quot;#method.is_absolute&quot;&gt; &lt;code&gt;is_absolute&lt;/code&gt; &lt;/a&gt;のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="b50f34b335847aa8295f6b01826574d74bbc15e2" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#method.rchunks&quot;&gt;&lt;code&gt;rchunks&lt;/code&gt;&lt;/a&gt; for a variant of this iterator that also returns the remainder as a smaller chunk, and &lt;a href=&quot;#method.chunks_exact&quot;&gt;&lt;code&gt;chunks_exact&lt;/code&gt;&lt;/a&gt; for the same iterator but starting at the beginning of the slice.</source>
          <target state="translated">残りをより小さいチャンクとして返すこのイテレータのバリアントについては&lt;a href=&quot;#method.chunks_exact&quot;&gt; &lt;code&gt;chunks_exact&lt;/code&gt; &lt;/a&gt;を、同じイテレータについてはスライスの先頭から開始する&lt;a href=&quot;#method.rchunks&quot;&gt; &lt;code&gt;rchunks&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="9979021bccd2efc766458b56892f3b499ecbd6ef" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#method.rchunks_exact&quot;&gt;&lt;code&gt;rchunks_exact&lt;/code&gt;&lt;/a&gt; for a variant of this iterator that returns chunks of always exactly &lt;code&gt;chunk_size&lt;/code&gt; elements, and &lt;a href=&quot;#method.chunks&quot;&gt;&lt;code&gt;chunks&lt;/code&gt;&lt;/a&gt; for the same iterator but starting at the beginning of the slice.</source>
          <target state="translated">常に正確に &lt;code&gt;chunk_size&lt;/code&gt; 要素のチャンクを返すこのイテレータのバリアントについては&lt;a href=&quot;#method.rchunks_exact&quot;&gt; &lt;code&gt;rchunks_exact&lt;/code&gt; &lt;/a&gt;を参照してください。また、同じイテレータのスライスの先頭から始まる&lt;a href=&quot;#method.chunks&quot;&gt; &lt;code&gt;chunks&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="aff7ed3f854512f12d681629cf01f859b8f4ed24" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#method.rchunks_exact_mut&quot;&gt;&lt;code&gt;rchunks_exact_mut&lt;/code&gt;&lt;/a&gt; for a variant of this iterator that returns chunks of always exactly &lt;code&gt;chunk_size&lt;/code&gt; elements, and &lt;a href=&quot;#method.chunks_mut&quot;&gt;&lt;code&gt;chunks_mut&lt;/code&gt;&lt;/a&gt; for the same iterator but starting at the beginning of the slice.</source>
          <target state="translated">参照してください&lt;a href=&quot;#method.rchunks_exact_mut&quot;&gt; &lt;code&gt;rchunks_exact_mut&lt;/code&gt; &lt;/a&gt;この戻りチャンクが常に正確というイテレータのバリアントの &lt;code&gt;chunk_size&lt;/code&gt; 要素を、そして&lt;a href=&quot;#method.chunks_mut&quot;&gt; &lt;code&gt;chunks_mut&lt;/code&gt; &lt;/a&gt;同じイテレータのためではなく、スライスの先頭から始まります。</target>
        </trans-unit>
        <trans-unit id="7e05e55b1d4fcd0ae7cfc2ecc3606e1d31985ac7" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#method.rchunks_mut&quot;&gt;&lt;code&gt;rchunks_mut&lt;/code&gt;&lt;/a&gt; for a variant of this iterator that also returns the remainder as a smaller chunk, and &lt;a href=&quot;#method.chunks_exact_mut&quot;&gt;&lt;code&gt;chunks_exact_mut&lt;/code&gt;&lt;/a&gt; for the same iterator but starting at the beginning of the slice.</source>
          <target state="translated">残りをより小さいチャンクとして返すこのイテレーターのバリアントについては&lt;a href=&quot;#method.chunks_exact_mut&quot;&gt; &lt;code&gt;chunks_exact_mut&lt;/code&gt; &lt;/a&gt;を、同じイテレーターであるがスライスの先頭から開始する場合の&lt;a href=&quot;#method.rchunks_mut&quot;&gt; &lt;code&gt;rchunks_mut&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="30b44f2b97828c5798bd74c5cb56ed3adcd6cab6" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#method.read_to_end&quot;&gt;&lt;code&gt;read_to_end&lt;/code&gt;&lt;/a&gt; for other error semantics.</source>
          <target state="translated">その他のエラーセマンティクスについては、&lt;a href=&quot;#method.read_to_end&quot;&gt; &lt;code&gt;read_to_end&lt;/code&gt; &lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="cb8374b4383c115aa6bb93fe476933ce8d82c2c3" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#variant.Read&quot;&gt;&lt;code&gt;Shutdown::Read&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#variant.Write&quot;&gt;&lt;code&gt;Shutdown::Write&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">詳細については、&lt;a href=&quot;#variant.Read&quot;&gt; &lt;code&gt;Shutdown::Read&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#variant.Write&quot;&gt; &lt;code&gt;Shutdown::Write&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="dd02ad7b79cb810db76f32ac11a1d341441c6c18" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;enum.ipaddr&quot;&gt;&lt;code&gt;IpAddr&lt;/code&gt;&lt;/a&gt; for a type encompassing both IPv4 and IPv6 addresses.</source>
          <target state="translated">IPv4アドレスとIPv6アドレスの両方を含むタイプについては、&lt;a href=&quot;enum.ipaddr&quot;&gt; &lt;code&gt;IpAddr&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="d0d20fe1b5c6691e296fc4ad9d04188bc107d2e9" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;enum.prefix&quot;&gt;&lt;code&gt;Prefix&lt;/code&gt;&lt;/a&gt;'s documentation for more information on the different kinds of prefixes.</source>
          <target state="translated">さまざまな種類の接頭辞の詳細については、&lt;a href=&quot;enum.prefix&quot;&gt; &lt;code&gt;Prefix&lt;/code&gt; &lt;/a&gt;のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="27f023fba6e8d14455766073d8c5d21b58e5464b" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;enum.socketaddr&quot;&gt;&lt;code&gt;SocketAddr&lt;/code&gt;&lt;/a&gt; for a type encompassing both IPv4 and IPv6 socket addresses.</source>
          <target state="translated">IPv4とIPv6の両方のソケットアドレスを含むタイプについては、&lt;a href=&quot;enum.socketaddr&quot;&gt; &lt;code&gt;SocketAddr&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="70683490ae88162ba5317936bdeb81eac5791fbb" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;fmt/index&quot;&gt;&lt;code&gt;std::fmt&lt;/code&gt;&lt;/a&gt; for more information on the format string syntax.</source>
          <target state="translated">フォーマット文字列の構文の詳細については、&lt;a href=&quot;fmt/index&quot;&gt; &lt;code&gt;std::fmt&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="29f60592601875cc5a5ce38cc10ec59d5cbb6de7" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;fn.remove_file&quot;&gt;&lt;code&gt;fs::remove_file&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;fn.remove_dir&quot;&gt;&lt;code&gt;fs::remove_dir&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;fn.remove_file&quot;&gt; &lt;code&gt;fs::remove_file&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;fn.remove_dir&quot;&gt; &lt;code&gt;fs::remove_dir&lt;/code&gt; &lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="7c18a8a03336ae70998b8592562c66c653cc40cd" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://doc.rust-lang.org/nomicon/send-and-sync.html&quot;&gt;the Nomicon&lt;/a&gt; for more details about &lt;code&gt;Sync&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Sync&lt;/code&gt; の詳細については&lt;a href=&quot;https://doc.rust-lang.org/nomicon/send-and-sync.html&quot;&gt;、Nomicon&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="f5ba25b4491615c19d3722047fc94b7603c652f7" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://doc.rust-lang.org/nomicon/send-and-sync.html&quot;&gt;the Nomicon&lt;/a&gt; for more details.</source>
          <target state="translated">詳細について&lt;a href=&quot;https://doc.rust-lang.org/nomicon/send-and-sync.html&quot;&gt;は、Nomicon&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="44ad661c6b55136293e0c7164c35451a0e3281e1" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://github.com/rust-lang/rfcs/blob/master/text/0560-integer-overflow.md&quot;&gt;RFC 560&lt;/a&gt; for error conditions, rationale, and more details about integer overflow.</source>
          <target state="translated">エラー条件、根拠、および整数オーバーフローの詳細については、&lt;a href=&quot;https://github.com/rust-lang/rfcs/blob/master/text/0560-integer-overflow.md&quot;&gt;RFC 560&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="1fd8b0e5025ea999368357669eb9e615d24ce186" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://github.com/rust-lang/rfcs/blob/master/text/0911-const-fn.md&quot;&gt;RFC 911&lt;/a&gt; for more details on the design of &lt;code&gt;const fn&lt;/code&gt;s.</source>
          <target state="translated">参照してください&lt;a href=&quot;https://github.com/rust-lang/rfcs/blob/master/text/0911-const-fn.md&quot;&gt;RFC 911&lt;/a&gt;の設計の詳細については、 &lt;code&gt;const fn&lt;/code&gt; 秒。</target>
        </trans-unit>
        <trans-unit id="f0f7f73bb841f9097f2099a2bd26bd89ec57269c" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://github.com/rust-lang/rfcs/blob/master/text/1522-conservative-impl-trait.md&quot;&gt;RFC 1522&lt;/a&gt; for more details.</source>
          <target state="translated">詳細については、&lt;a href=&quot;https://github.com/rust-lang/rfcs/blob/master/text/1522-conservative-impl-trait.md&quot;&gt;RFC 1522&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="341ee4f18b96b94d5f3913f41221f7474b554168" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;notation&quot;&gt;Notation&lt;/a&gt; for more detail.</source>
          <target state="translated">詳細については、&lt;a href=&quot;notation&quot;&gt;表記法&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="972bae082186c64fbfd97c0611f966d97e0f3bbc" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;ptr/fn.copy&quot;&gt;&lt;code&gt;ptr::copy&lt;/code&gt;&lt;/a&gt; for safety concerns and examples.</source>
          <target state="translated">安全上の懸念と例については、&lt;a href=&quot;ptr/fn.copy&quot;&gt; &lt;code&gt;ptr::copy&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="4a2efa607c2f9efd05c8f4fb3dd65f5a178fe36d" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;ptr/fn.copy_nonoverlapping&quot;&gt;&lt;code&gt;ptr::copy_nonoverlapping&lt;/code&gt;&lt;/a&gt; for safety concerns and examples.</source>
          <target state="translated">安全上の懸念と例については、&lt;a href=&quot;ptr/fn.copy_nonoverlapping&quot;&gt; &lt;code&gt;ptr::copy_nonoverlapping&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="851c43367302bcceb8d84cadb6759ffc4492d6b7" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;ptr/fn.drop_in_place&quot;&gt;&lt;code&gt;ptr::drop_in_place&lt;/code&gt;&lt;/a&gt; for safety concerns and examples.</source>
          <target state="translated">安全上の懸念と例については、&lt;a href=&quot;ptr/fn.drop_in_place&quot;&gt; &lt;code&gt;ptr::drop_in_place&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="69b1154db3deb834a573304ef00619edd7738644" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;ptr/fn.read&quot;&gt;&lt;code&gt;ptr::read&lt;/code&gt;&lt;/a&gt; for safety concerns and examples.</source>
          <target state="translated">安全上の懸念と例については、&lt;a href=&quot;ptr/fn.read&quot;&gt; &lt;code&gt;ptr::read&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="2b430283b5482aede759e6433b387eba9aad4d05" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;ptr/fn.read_unaligned&quot;&gt;&lt;code&gt;ptr::read_unaligned&lt;/code&gt;&lt;/a&gt; for safety concerns and examples.</source>
          <target state="translated">安全上の懸念と例については、&lt;a href=&quot;ptr/fn.read_unaligned&quot;&gt; &lt;code&gt;ptr::read_unaligned&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="2f1c66be6a57de6ea3f7a9900acf0b07472d4c4c" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;ptr/fn.read_volatile&quot;&gt;&lt;code&gt;ptr::read_volatile&lt;/code&gt;&lt;/a&gt; for safety concerns and examples.</source>
          <target state="translated">安全上の懸念と例については、&lt;a href=&quot;ptr/fn.read_volatile&quot;&gt; &lt;code&gt;ptr::read_volatile&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="7ecaa8597e3a5f6f0bc305f4dcaf26239ba18209" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;ptr/fn.replace&quot;&gt;&lt;code&gt;ptr::replace&lt;/code&gt;&lt;/a&gt; for safety concerns and examples.</source>
          <target state="translated">安全上の懸念と例については、&lt;a href=&quot;ptr/fn.replace&quot;&gt; &lt;code&gt;ptr::replace&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="41ca19c37c44e13e4783ee2c86e6f12bcec2190c" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;ptr/fn.swap&quot;&gt;&lt;code&gt;ptr::swap&lt;/code&gt;&lt;/a&gt; for safety concerns and examples.</source>
          <target state="translated">安全上の懸念と例については、&lt;a href=&quot;ptr/fn.swap&quot;&gt; &lt;code&gt;ptr::swap&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="dc13b3c74118eea647adf7d6c3a290dd62768d26" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;ptr/fn.write&quot;&gt;&lt;code&gt;ptr::write&lt;/code&gt;&lt;/a&gt; for safety concerns and examples.</source>
          <target state="translated">安全上の懸念と例については、&lt;a href=&quot;ptr/fn.write&quot;&gt; &lt;code&gt;ptr::write&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="76ef5570f01a9fbfe90fdfe1fba5407ca8b93791" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;ptr/fn.write_bytes&quot;&gt;&lt;code&gt;ptr::write_bytes&lt;/code&gt;&lt;/a&gt; for safety concerns and examples.</source>
          <target state="translated">安全上の懸念と例については、&lt;a href=&quot;ptr/fn.write_bytes&quot;&gt; &lt;code&gt;ptr::write_bytes&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="24eec72977711be501e6f3e1bb69cc5e2891626c" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;ptr/fn.write_unaligned&quot;&gt;&lt;code&gt;ptr::write_unaligned&lt;/code&gt;&lt;/a&gt; for safety concerns and examples.</source>
          <target state="translated">安全上の懸念と例については、&lt;a href=&quot;ptr/fn.write_unaligned&quot;&gt; &lt;code&gt;ptr::write_unaligned&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="1bce77a7b346a67606634ba24ac27755ce56c7ed" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;ptr/fn.write_volatile&quot;&gt;&lt;code&gt;ptr::write_volatile&lt;/code&gt;&lt;/a&gt; for safety concerns and examples.</source>
          <target state="translated">安全上の懸念と例については、&lt;a href=&quot;ptr/fn.write_volatile&quot;&gt; &lt;code&gt;ptr::write_volatile&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="78df71e316ba5edeeca33937d63fcf6d54758758" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;struct.btreemap&quot;&gt;&lt;code&gt;BTreeMap&lt;/code&gt;&lt;/a&gt;'s documentation for a detailed discussion of this collection's performance benefits and drawbacks.</source>
          <target state="translated">このコレクションのパフォーマンスの利点と欠点の詳細については、&lt;a href=&quot;struct.btreemap&quot;&gt; &lt;code&gt;BTreeMap&lt;/code&gt; &lt;/a&gt;のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="bd6a1a0288002d86b6069fd21311e5cbd0663b77" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;struct.pathbuf#method.push&quot;&gt;&lt;code&gt;PathBuf::push&lt;/code&gt;&lt;/a&gt; for more details on what it means to adjoin a path.</source>
          <target state="translated">参照&lt;a href=&quot;struct.pathbuf#method.push&quot;&gt; &lt;code&gt;PathBuf::push&lt;/code&gt; &lt;/a&gt;それがパスに隣接して何を意味するのかの詳細については。</target>
        </trans-unit>
        <trans-unit id="94c21296e1f6ae9d012718f5863687c9e8dc55c1" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;struct.pathbuf#method.set_extension&quot;&gt;&lt;code&gt;PathBuf::set_extension&lt;/code&gt;&lt;/a&gt; for more details.</source>
          <target state="translated">詳細については、&lt;a href=&quot;struct.pathbuf#method.set_extension&quot;&gt; &lt;code&gt;PathBuf::set_extension&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="dfa7b26a3f4db66a464bece31851b8d86818f7f8" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;struct.pathbuf#method.set_file_name&quot;&gt;&lt;code&gt;PathBuf::set_file_name&lt;/code&gt;&lt;/a&gt; for more details.</source>
          <target state="translated">詳細については、&lt;a href=&quot;struct.pathbuf#method.set_file_name&quot;&gt; &lt;code&gt;PathBuf::set_file_name&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="e5f7275b9d5f14c0872aca5702c25ef924c7a7f5" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;struct.syncsender#method.send&quot;&gt;&lt;code&gt;send&lt;/code&gt;&lt;/a&gt; for notes about guarantees of whether the receiver has received the data or not if this function is successful.</source>
          <target state="translated">この関数が成功した場合に受信者がデータを受信したかどうかの保証については、&lt;a href=&quot;struct.syncsender#method.send&quot;&gt; &lt;code&gt;send&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="86a905795e30477334aa445a9647e2b9062f6913" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;thread/struct.localkey&quot;&gt;LocalKey documentation&lt;/a&gt; for more information.</source>
          <target state="translated">詳細については、&lt;a href=&quot;thread/struct.localkey&quot;&gt;LocalKeyのドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="6b900f7c84247513b4423008ec6a08ea2c7fe610" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;trait.globalalloc#method.alloc_zeroed&quot;&gt;&lt;code&gt;GlobalAlloc::alloc_zeroed&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;trait.globalalloc#method.alloc_zeroed&quot;&gt; &lt;code&gt;GlobalAlloc::alloc_zeroed&lt;/code&gt; &lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="e2b18ce9d95985463bc331652e45e3e90f73ff9a" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;trait.globalalloc#method.realloc&quot;&gt;&lt;code&gt;GlobalAlloc::realloc&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;trait.globalalloc#method.realloc&quot;&gt; &lt;code&gt;GlobalAlloc::realloc&lt;/code&gt; &lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="9164fd30a08331605d710758de24a8ef25138219" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;trait.globalalloc#tymethod.alloc&quot;&gt;&lt;code&gt;GlobalAlloc::alloc&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;trait.globalalloc#tymethod.alloc&quot;&gt; &lt;code&gt;GlobalAlloc::alloc&lt;/code&gt; &lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="2bdc617001eb4f1263d54b0f93b73343a8b5f305" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;trait.globalalloc#tymethod.dealloc&quot;&gt;&lt;code&gt;GlobalAlloc::dealloc&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;trait.globalalloc#tymethod.dealloc&quot;&gt; &lt;code&gt;GlobalAlloc::dealloc&lt;/code&gt; &lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="a86ba0292af4fa02f7d1d2fc126212b338bc798d" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;trait.seek&quot;&gt;&lt;code&gt;std::io::Seek&lt;/code&gt;&lt;/a&gt; for more details.</source>
          <target state="translated">詳細については、&lt;a href=&quot;trait.seek&quot;&gt; &lt;code&gt;std::io::Seek&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="118dc710e74fc36d342f3a8191784163ef5e4d91" translate="yes" xml:space="preserve">
          <source>See &lt;code&gt;OsString&lt;/code&gt; introduction for information about encoding.</source>
          <target state="translated">エンコードについては、 &lt;code&gt;OsString&lt;/code&gt; の概要をご覧ください。</target>
        </trans-unit>
        <trans-unit id="a76df453b90814b857b917897c5a54c5c0335cae" translate="yes" xml:space="preserve">
          <source>See &lt;code&gt;from_bits&lt;/code&gt; for some discussion of the portability of this operation (there are almost no issues).</source>
          <target state="translated">この操作の移植性については、 &lt;code&gt;from_bits&lt;/code&gt; を参照してください（ほとんど問題はありません）。</target>
        </trans-unit>
        <trans-unit id="d06e3277392bda59f92ee25a953e14ab2862ecba" translate="yes" xml:space="preserve">
          <source>See &lt;em&gt;&lt;a href=&quot;items/functions#extern-functions&quot;&gt;extern functions&lt;/a&gt;&lt;/em&gt; for information on specifying the ABI for exporting functions. See &lt;em&gt;&lt;a href=&quot;items/external-blocks&quot;&gt;external blocks&lt;/a&gt;&lt;/em&gt; for information on specifying the ABI for linking external libraries.</source>
          <target state="translated">&lt;em&gt;&lt;a href=&quot;items/functions#extern-functions&quot;&gt;関数&lt;/a&gt;&lt;/em&gt;をエクスポートするためのABIの指定については、&lt;em&gt;extern関数&lt;/em&gt;を参照してください。外部ライブラリをリンクするためのABIの指定については、&lt;em&gt;&lt;a href=&quot;items/external-blocks&quot;&gt;外部ブロック&lt;/a&gt;&lt;/em&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="67373bb92cd7ecbf243edb9d60ad6f00f86a6052" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">も参照してください。</target>
        </trans-unit>
        <trans-unit id="2d8243a2c0e464492c9d563c4f92c56ae3421bcc" translate="yes" xml:space="preserve">
          <source>See also</source>
          <target state="translated">参照:</target>
        </trans-unit>
        <trans-unit id="54b76a65569e44a672110c944b0a48a3fe458998" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;struct.arc#method.get_mut&quot;&gt;&lt;code&gt;get_mut&lt;/code&gt;&lt;/a&gt;, which will fail rather than cloning.</source>
          <target state="translated">&lt;a href=&quot;struct.arc#method.get_mut&quot;&gt; &lt;code&gt;get_mut&lt;/code&gt; &lt;/a&gt;も参照してください。クローンではなく失敗します。</target>
        </trans-unit>
        <trans-unit id="0fe20fa068742b872ec033cf4f0aec8c1d3869be" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;struct.arc#method.make_mut&quot;&gt;&lt;code&gt;make_mut&lt;/code&gt;&lt;/a&gt;, which will &lt;a href=&quot;../clone/trait.clone#tymethod.clone&quot;&gt;&lt;code&gt;clone&lt;/code&gt;&lt;/a&gt; the inner value when it's shared.</source>
          <target state="translated">共有されるときに内部値を&lt;a href=&quot;../clone/trait.clone#tymethod.clone&quot;&gt; &lt;code&gt;clone&lt;/code&gt; &lt;/a&gt;する&lt;a href=&quot;struct.arc#method.make_mut&quot;&gt; &lt;code&gt;make_mut&lt;/code&gt; &lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="8386281089e89688f659aff2a942789b811c16c4" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;struct.rc#method.get_mut&quot;&gt;&lt;code&gt;get_mut&lt;/code&gt;&lt;/a&gt;, which will fail rather than cloning.</source>
          <target state="translated">&lt;a href=&quot;struct.rc#method.get_mut&quot;&gt; &lt;code&gt;get_mut&lt;/code&gt; &lt;/a&gt;も参照してください。クローンではなく失敗します。</target>
        </trans-unit>
        <trans-unit id="9e5afe237adccc0b69c648652691604f2a2ed0f8" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;struct.rc#method.make_mut&quot;&gt;&lt;code&gt;make_mut&lt;/code&gt;&lt;/a&gt;, which will &lt;a href=&quot;../clone/trait.clone#tymethod.clone&quot;&gt;&lt;code&gt;clone&lt;/code&gt;&lt;/a&gt; the inner value when it's shared.</source>
          <target state="translated">共有されるときに内部値を&lt;a href=&quot;../clone/trait.clone#tymethod.clone&quot;&gt; &lt;code&gt;clone&lt;/code&gt; &lt;/a&gt;する&lt;a href=&quot;struct.rc#method.make_mut&quot;&gt; &lt;code&gt;make_mut&lt;/code&gt; &lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="c6bfb5e1e36a59642f91de9994e8882f47dda82d" translate="yes" xml:space="preserve">
          <source>See also https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html</source>
          <target state="translated">https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html も参照してください。</target>
        </trans-unit>
        <trans-unit id="e5c3885bb44ac46bcc02b68414219a472b58219b" translate="yes" xml:space="preserve">
          <source>See also https://github.com/rust-lang/rust/issues/14587</source>
          <target state="translated">https://github.com/rust-lang/rust/issues/14587 も参照してください。</target>
        </trans-unit>
        <trans-unit id="d7138b78c6c8108f90e5b4d89b6d8f41411790c0" translate="yes" xml:space="preserve">
          <source>See also the &lt;a href=&quot;https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib&quot;&gt;unstable book&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib&quot;&gt;不安定版&lt;/a&gt;もご覧ください。</target>
        </trans-unit>
        <trans-unit id="9f215ba916abc6b1359b435f2c9df9a30b6cd333" translate="yes" xml:space="preserve">
          <source>See also the error E0303.</source>
          <target state="translated">エラー E0303 も参照してください。</target>
        </trans-unit>
        <trans-unit id="975331600721122c8b6c490b24b5a3194e20ba87" translate="yes" xml:space="preserve">
          <source>See also the macro &lt;a href=&quot;macro.compile_error&quot;&gt;&lt;code&gt;compile_error!&lt;/code&gt;&lt;/a&gt;, for raising errors during compilation.</source>
          <target state="translated">マクロ&lt;a href=&quot;macro.compile_error&quot;&gt; &lt;code&gt;compile_error!&lt;/code&gt; &lt;/a&gt;も参照してください！、コンパイル中にエラーを発生させるため。</target>
        </trans-unit>
        <trans-unit id="0c38fa3060947548f6786fc74f5ae06ea0102e4b" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;http://www.unicode.org/versions/&quot;&gt;http://www.unicode.org/versions/&lt;/a&gt;</source>
          <target state="translated">参照：&lt;a href=&quot;http://www.unicode.org/versions/&quot;&gt;http&lt;/a&gt; : //www.unicode.org/versions/</target>
        </trans-unit>
        <trans-unit id="7d3586da26e662ce0cee6add8b03cdee21890ba7" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;trait.fromiterator&quot;&gt;&lt;code&gt;FromIterator&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;trait.fromiterator&quot;&gt; &lt;code&gt;FromIterator&lt;/code&gt; &lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="a62291d237eff3d21aea8354620568e8d491d695" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;trait.intoiterator&quot;&gt;&lt;code&gt;IntoIterator&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;trait.intoiterator&quot;&gt; &lt;code&gt;IntoIterator&lt;/code&gt; &lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="27904624b02c857ef930c02ca7dd19adc5875459" translate="yes" xml:space="preserve">
          <source>See each trait for usage examples.</source>
          <target state="translated">使用例については、それぞれの特性を参照してください。</target>
        </trans-unit>
        <trans-unit id="8d65150a5b476931ea1fddc837309bb4a8972134" translate="yes" xml:space="preserve">
          <source>See issue #34202 for more details.</source>
          <target state="translated">詳細は#34202号をご覧ください。</target>
        </trans-unit>
        <trans-unit id="50733ac9f0546ca231f65aef305264ab0f8e0aa2" translate="yes" xml:space="preserve">
          <source>See main &lt;code&gt;OsString&lt;/code&gt; documentation information about encoding.</source>
          <target state="translated">エンコーディングに関する &lt;code&gt;OsString&lt;/code&gt; の主要なドキュメント情報を参照してください。</target>
        </trans-unit>
        <trans-unit id="b9a0ec6eef1339731cf9450ebf1dd6a57f4a99a0" translate="yes" xml:space="preserve">
          <source>See more: https://doc.rust-lang.org/reference/attributes.html#conditional-compilation</source>
          <target state="translated">もっと見る:https://doc.rust-lang.org/reference/attributes.html#conditional-compilation</target>
        </trans-unit>
        <trans-unit id="4b9681d4bfaf16cd0e0426811f6e48d3e33f0138" translate="yes" xml:space="preserve">
          <source>See the 'Use Declarations' section of the reference for more information on this topic:</source>
          <target state="translated">このトピックの詳細については、リファレンスの「使用宣言」のセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="48c0f59e4834bc04f6a3d35a7d5545c776d4b7da" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;#method.flowinfo&quot;&gt;&lt;code&gt;flowinfo&lt;/code&gt;&lt;/a&gt; method's documentation for more details.</source>
          <target state="translated">詳細については、&lt;a href=&quot;#method.flowinfo&quot;&gt; &lt;code&gt;flowinfo&lt;/code&gt; &lt;/a&gt;メソッドのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="9516800e65f62b51b6a56f0f866db795a30d8df4" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;#method.scope_id&quot;&gt;&lt;code&gt;scope_id&lt;/code&gt;&lt;/a&gt; method's documentation for more details.</source>
          <target state="translated">詳しくは、&lt;a href=&quot;#method.scope_id&quot;&gt; &lt;code&gt;scope_id&lt;/code&gt; &lt;/a&gt;メソッドのドキュメントをご覧ください。</target>
        </trans-unit>
        <trans-unit id="a428edd5265ba0f8ae9ca0508b6e3d5fd3a0007e" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;../../book/ch13-01-closures&quot;&gt;chapter on closures in &lt;em&gt;The Rust Programming Language&lt;/em&gt;&lt;/a&gt; for some more information on this topic.</source>
          <target state="translated">このトピックの詳細については、&lt;a href=&quot;../../book/ch13-01-closures&quot;&gt;&lt;em&gt;Rustプログラミング言語の&lt;/em&gt;&lt;/a&gt;クロージャーに関する章を&lt;em&gt;&lt;/em&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="4ebee77c95f1b3a0acd252551468cb0fbd79423b" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;../../std/macro.is_x86_feature_detected&quot;&gt;&lt;code&gt;is_x86_feature_detected&lt;/code&gt;&lt;/a&gt; macro in the standard library for runtime feature detection on the x86 platforms.</source>
          <target state="translated">x86プラットフォームでのランタイム機能検出については、標準ライブラリの&lt;a href=&quot;../../std/macro.is_x86_feature_detected&quot;&gt; &lt;code&gt;is_x86_feature_detected&lt;/code&gt; &lt;/a&gt;マクロを参照してください。</target>
        </trans-unit>
        <trans-unit id="9e0260d159aa7cecd714bae0af0cf22f55ca5a37" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;../conditional-compilation#target_feature&quot;&gt;&lt;code&gt;target_feature&lt;/code&gt; conditional compilation option&lt;/a&gt; for selectively enabling or disabling compilation of code based on compile-time settings. Note that this option is not affected by the &lt;code&gt;target_feature&lt;/code&gt; attribute, and is only driven by the features enabled for the entire crate.</source>
          <target state="translated">コンパイル時の設定に基づいてコードのコンパイルを選択的に有効または無効にする&lt;a href=&quot;../conditional-compilation#target_feature&quot;&gt;方法&lt;/a&gt;については、 &lt;code&gt;target_feature&lt;/code&gt; 条件付きコンパイルオプションを参照してください。このオプションは &lt;code&gt;target_feature&lt;/code&gt; 属性の影響を受けず、クレート全体で有効になっている機能によってのみ駆動されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="280b9d7e3c39fd798193927226a61441295094de" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;../index&quot;&gt;module-level documentation&lt;/a&gt; for more.</source>
          <target state="translated">詳細については、&lt;a href=&quot;../index&quot;&gt;モジュールレベルのドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="9b763e7812e448276ee1852643c6a5ff61d991c5" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;../rc/index#examples&quot;&gt;&lt;code&gt;rc&lt;/code&gt; documentation&lt;/a&gt; for more examples of reference counting in general.</source>
          <target state="translated">一般的な参照カウントの例については、&lt;a href=&quot;../rc/index#examples&quot;&gt; &lt;code&gt;rc&lt;/code&gt; のドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="9e882d9ce880f6d4a62fbf0ebd5db5c16e8211f3" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;attributes/codegen#the-target_feature-attribute&quot;&gt;&lt;code&gt;target_feature&lt;/code&gt; attribute&lt;/a&gt; for more details on the available features. An additional feature of &lt;code&gt;crt-static&lt;/code&gt; is available to the &lt;code&gt;target_feature&lt;/code&gt; option to indicate that a &lt;a href=&quot;linkage#static-and-dynamic-c-runtimes&quot;&gt;static C runtime&lt;/a&gt; is available.</source>
          <target state="translated">使用可能な機能の詳細については、&lt;a href=&quot;attributes/codegen#the-target_feature-attribute&quot;&gt; &lt;code&gt;target_feature&lt;/code&gt; 属性&lt;/a&gt;を参照してください。 &lt;code&gt;target_feature&lt;/code&gt; オプションで &lt;code&gt;crt-static&lt;/code&gt; の追加機能を使用して、&lt;a href=&quot;linkage#static-and-dynamic-c-runtimes&quot;&gt;静的Cランタイム&lt;/a&gt;が使用可能であることを示すことができます。</target>
        </trans-unit>
        <trans-unit id="9c007695fde0760a7ebeb4cd2fa6b3747cc0c62f" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;fn.discriminant&quot;&gt;&lt;code&gt;discriminant&lt;/code&gt;&lt;/a&gt; function in this module for more information.</source>
          <target state="translated">詳細については、このモジュールの&lt;a href=&quot;fn.discriminant&quot;&gt; &lt;code&gt;discriminant&lt;/code&gt; &lt;/a&gt;関数を参照してください。</target>
        </trans-unit>
        <trans-unit id="d9d16f809cee6c899e4e1a7481ca3b74db7327fc" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;fn.park&quot;&gt;park documentation&lt;/a&gt; for more detail.</source>
          <target state="translated">詳細については、&lt;a href=&quot;fn.park&quot;&gt;公園のドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="c12c05e5acf344ed5eaf6e4291006a35cd23aed8" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;fn.park&quot;&gt;park documentation&lt;/a&gt; for more details.</source>
          <target state="translated">詳細については、&lt;a href=&quot;fn.park&quot;&gt;公園のドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="11109860147d417370969ceb98561a0db14c0fff" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;https://github.com/rust-lang/rfcs/blob/master/text/0982-dst-coercion.md&quot;&gt;DST coercion RFC&lt;/a&gt; and &lt;a href=&quot;https://doc.rust-lang.org/nomicon/coercions.html&quot;&gt;the nomicon entry on coercion&lt;/a&gt; for more details.</source>
          <target state="translated">詳細については、&lt;a href=&quot;https://github.com/rust-lang/rfcs/blob/master/text/0982-dst-coercion.md&quot;&gt;DST強制RFC&lt;/a&gt;と&lt;a href=&quot;https://doc.rust-lang.org/nomicon/coercions.html&quot;&gt;強制&lt;/a&gt;に関するノミコンエントリを参照してください。</target>
        </trans-unit>
        <trans-unit id="31bd11ecb52f9fd7f2cc0aa62a69119b33f72284" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;index&quot;&gt;&lt;code&gt;std::result&lt;/code&gt;&lt;/a&gt; module documentation for details.</source>
          <target state="translated">詳細については、&lt;a href=&quot;index&quot;&gt; &lt;code&gt;std::result&lt;/code&gt; &lt;/a&gt;モジュールのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="d2289374edb613ed6991996263eed3764bf58b17" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;index&quot;&gt;module-level documentation&lt;/a&gt; for more details.</source>
          <target state="translated">詳細については、&lt;a href=&quot;index&quot;&gt;モジュールレベルのドキュメント&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="ad5d942f0c74c3b958b3c6c1b82586522996d2cc" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;index&quot;&gt;module-level documentation&lt;/a&gt; for more.</source>
          <target state="translated">詳細については、&lt;a href=&quot;index&quot;&gt;モジュールレベルのドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="ea5ada2477a5b61be620058a92832da074e391de" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;index#conversions&quot;&gt;module's toplevel documentation about conversions&lt;/a&gt; for a discussion on the traits which &lt;code&gt;OsStr&lt;/code&gt; implements for &lt;a href=&quot;index#conversions&quot;&gt;conversions&lt;/a&gt; from/to native representations.</source>
          <target state="translated">ネイティブ表現との間の&lt;a href=&quot;index#conversions&quot;&gt;変換の&lt;/a&gt;ために &lt;code&gt;OsStr&lt;/code&gt; が実装する特性については、&lt;a href=&quot;index#conversions&quot;&gt;変換に関するモジュールの&lt;/a&gt;最上位のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="633ea9d8c810b765d7660d1828dae99092c8a390" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;index#conversions&quot;&gt;module's toplevel documentation about conversions&lt;/a&gt; for a discussion on the traits which &lt;code&gt;OsString&lt;/code&gt; implements for &lt;a href=&quot;index#conversions&quot;&gt;conversions&lt;/a&gt; from/to native representations.</source>
          <target state="translated">ネイティブ表現との間の&lt;a href=&quot;index#conversions&quot;&gt;変換の&lt;/a&gt;ために &lt;code&gt;OsString&lt;/code&gt; が実装する特性については、&lt;a href=&quot;index#conversions&quot;&gt;変換に関するモジュールの&lt;/a&gt;最上位のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="2f3b336fe1366fd2448cd1418c2e1b02c0061749" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;struct.hashmap#method.raw_entry&quot;&gt;&lt;code&gt;HashMap::raw_entry&lt;/code&gt;&lt;/a&gt; docs for usage examples.</source>
          <target state="translated">使用例については、&lt;a href=&quot;struct.hashmap#method.raw_entry&quot;&gt; &lt;code&gt;HashMap::raw_entry&lt;/code&gt; &lt;/a&gt;ドキュメントをご覧ください。</target>
        </trans-unit>
        <trans-unit id="0c4b480939fa0c71caf6300474692f45d9200737" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;struct.hashmap#method.raw_entry_mut&quot;&gt;&lt;code&gt;HashMap::raw_entry_mut&lt;/code&gt;&lt;/a&gt; docs for usage examples.</source>
          <target state="translated">使用例については、&lt;a href=&quot;struct.hashmap#method.raw_entry_mut&quot;&gt; &lt;code&gt;HashMap::raw_entry_mut&lt;/code&gt; &lt;/a&gt;ドキュメントをご覧ください。</target>
        </trans-unit>
        <trans-unit id="34c3c7a1ca1e3b7e67385319fd0c1bdf6f7a99a2" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;struct.openoptions#method.open&quot;&gt;&lt;code&gt;OpenOptions::open&lt;/code&gt;&lt;/a&gt; function for more details.</source>
          <target state="translated">詳細については、&lt;a href=&quot;struct.openoptions#method.open&quot;&gt; &lt;code&gt;OpenOptions::open&lt;/code&gt; &lt;/a&gt;関数を参照してください。</target>
        </trans-unit>
        <trans-unit id="73c34259348cfb6ad56df7138ee496a1e7625262" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;struct.openoptions#method.open&quot;&gt;&lt;code&gt;OpenOptions::open&lt;/code&gt;&lt;/a&gt; method for more details.</source>
          <target state="translated">詳細については、&lt;a href=&quot;struct.openoptions#method.open&quot;&gt; &lt;code&gt;OpenOptions::open&lt;/code&gt; &lt;/a&gt;メソッドを参照してください。</target>
        </trans-unit>
        <trans-unit id="8cda6ebbfff7845946643b600b627a3b6b0d17c2" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;union.maybeuninit&quot;&gt;type-level documentation&lt;/a&gt; for some examples.</source>
          <target state="translated">いくつかの例については、&lt;a href=&quot;union.maybeuninit&quot;&gt;型レベルのドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="69de7fd488c1bed770c455c5d651418fbdd9cd29" translate="yes" xml:space="preserve">
          <source>See the Declaration Statements section of the reference for more information about what constitutes an Item declaration and what does not:</source>
          <target state="translated">アイテム宣言を構成するものとそうでないものの詳細については、リファレンスの宣言文の項を参照してください。</target>
        </trans-unit>
        <trans-unit id="a6d66beca44a312c1d7ad072d4f4f25d4fa81573" translate="yes" xml:space="preserve">
          <source>See the docs for &lt;a href=&quot;struct.fromutf8error&quot;&gt;&lt;code&gt;FromUtf8Error&lt;/code&gt;&lt;/a&gt; for more details on what you can do with this error.</source>
          <target state="translated">このエラーで何ができるかについての詳細は、&lt;a href=&quot;struct.fromutf8error&quot;&gt; &lt;code&gt;FromUtf8Error&lt;/code&gt; &lt;/a&gt;のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="582d71b0a7e1ec7d8d2e366b70d8107c5784ab5a" translate="yes" xml:space="preserve">
          <source>See the docs for &lt;a href=&quot;struct.utf8error&quot;&gt;&lt;code&gt;Utf8Error&lt;/code&gt;&lt;/a&gt; for more details on the kinds of errors that can be returned.</source>
          <target state="translated">返される可能性のあるエラーの種類の詳細については、&lt;a href=&quot;struct.utf8error&quot;&gt; &lt;code&gt;Utf8Error&lt;/code&gt; &lt;/a&gt;のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="78b065d4cc11abcb243097f0f63add7a8b83feaa" translate="yes" xml:space="preserve">
          <source>See the documentation for &lt;a href=&quot;#method.len_utf8&quot;&gt;&lt;code&gt;len_utf8&lt;/code&gt;&lt;/a&gt; for more explanation of this concept. This function is a mirror, but for UTF-16 instead of UTF-8.</source>
          <target state="translated">この概念の詳細については、&lt;a href=&quot;#method.len_utf8&quot;&gt; &lt;code&gt;len_utf8&lt;/code&gt; &lt;/a&gt;のドキュメントを参照してください。この関数はミラーですが、UTF-8ではなくUTF-16に対応しています。</target>
        </trans-unit>
        <trans-unit id="5fd25191940193341f958db537c36b0b248a6882" translate="yes" xml:space="preserve">
          <source>See the documentation for &lt;a href=&quot;struct.ipv4addr#method.is_documentation&quot;&gt;&lt;code&gt;Ipv4Addr::is_documentation&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;struct.ipv6addr#method.is_documentation&quot;&gt;&lt;code&gt;Ipv6Addr::is_documentation&lt;/code&gt;&lt;/a&gt; for more details.</source>
          <target state="translated">詳細については、&lt;a href=&quot;struct.ipv4addr#method.is_documentation&quot;&gt; &lt;code&gt;Ipv4Addr::is_documentation&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;struct.ipv6addr#method.is_documentation&quot;&gt; &lt;code&gt;Ipv6Addr::is_documentation&lt;/code&gt; &lt;/a&gt;のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="7ed1f45214f9fb1ab65b3d9c5862ba392c986f08" translate="yes" xml:space="preserve">
          <source>See the documentation for &lt;a href=&quot;struct.ipv4addr#method.is_global&quot;&gt;&lt;code&gt;Ipv4Addr::is_global&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;struct.ipv6addr#method.is_global&quot;&gt;&lt;code&gt;Ipv6Addr::is_global&lt;/code&gt;&lt;/a&gt; for more details.</source>
          <target state="translated">詳細については、&lt;a href=&quot;struct.ipv4addr#method.is_global&quot;&gt; &lt;code&gt;Ipv4Addr::is_global&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;struct.ipv6addr#method.is_global&quot;&gt; &lt;code&gt;Ipv6Addr::is_global&lt;/code&gt; &lt;/a&gt;のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="ae56b84e07d1f99c8baf18c931552fe65fce5926" translate="yes" xml:space="preserve">
          <source>See the documentation for &lt;a href=&quot;struct.ipv4addr#method.is_loopback&quot;&gt;&lt;code&gt;Ipv4Addr::is_loopback&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;struct.ipv6addr#method.is_loopback&quot;&gt;&lt;code&gt;Ipv6Addr::is_loopback&lt;/code&gt;&lt;/a&gt; for more details.</source>
          <target state="translated">詳細については、&lt;a href=&quot;struct.ipv4addr#method.is_loopback&quot;&gt; &lt;code&gt;Ipv4Addr::is_loopback&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;struct.ipv6addr#method.is_loopback&quot;&gt; &lt;code&gt;Ipv6Addr::is_loopback&lt;/code&gt; &lt;/a&gt;のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="3615519e1cfb28c060666f204c8ad03a417dc12c" translate="yes" xml:space="preserve">
          <source>See the documentation for &lt;a href=&quot;struct.ipv4addr#method.is_multicast&quot;&gt;&lt;code&gt;Ipv4Addr::is_multicast&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;struct.ipv6addr#method.is_multicast&quot;&gt;&lt;code&gt;Ipv6Addr::is_multicast&lt;/code&gt;&lt;/a&gt; for more details.</source>
          <target state="translated">詳細については、&lt;a href=&quot;struct.ipv4addr#method.is_multicast&quot;&gt; &lt;code&gt;Ipv4Addr::is_multicast&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;struct.ipv6addr#method.is_multicast&quot;&gt; &lt;code&gt;Ipv6Addr::is_multicast&lt;/code&gt; &lt;/a&gt;のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="1a7665c66fb62a1dc84142abaebd233d604592f0" translate="yes" xml:space="preserve">
          <source>See the documentation for &lt;a href=&quot;struct.ipv4addr#method.is_unspecified&quot;&gt;&lt;code&gt;Ipv4Addr::is_unspecified&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;struct.ipv6addr#method.is_unspecified&quot;&gt;&lt;code&gt;Ipv6Addr::is_unspecified&lt;/code&gt;&lt;/a&gt; for more details.</source>
          <target state="translated">詳細については、&lt;a href=&quot;struct.ipv4addr#method.is_unspecified&quot;&gt; &lt;code&gt;Ipv4Addr::is_unspecified&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;struct.ipv6addr#method.is_unspecified&quot;&gt; &lt;code&gt;Ipv6Addr::is_unspecified&lt;/code&gt; &lt;/a&gt;のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="59d420255aede65deb10ef2b925ffdbbeb151830" translate="yes" xml:space="preserve">
          <source>See the documentation for each trait for an example implementation.</source>
          <target state="translated">実装例については、各形質のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="74b94fdb468ed97656de488b7ee63d2166bba4d1" translate="yes" xml:space="preserve">
          <source>See the documentation of &lt;a href=&quot;../slice/fn.from_raw_parts&quot;&gt;&lt;code&gt;from_raw_parts&lt;/code&gt;&lt;/a&gt; for more details.</source>
          <target state="translated">詳細については、&lt;a href=&quot;../slice/fn.from_raw_parts&quot;&gt; &lt;code&gt;from_raw_parts&lt;/code&gt; &lt;/a&gt;のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="c143ad09c3e3a3086ceea144028fb830f9f60b4d" translate="yes" xml:space="preserve">
          <source>See the documentation of &lt;a href=&quot;fn.from_raw_parts&quot;&gt;&lt;code&gt;from_raw_parts&lt;/code&gt;&lt;/a&gt; for more details.</source>
          <target state="translated">詳細については、&lt;a href=&quot;fn.from_raw_parts&quot;&gt; &lt;code&gt;from_raw_parts&lt;/code&gt; &lt;/a&gt;のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="f9630d5c32c08ed5f2adfedea80bdb2f04c78522" translate="yes" xml:space="preserve">
          <source>See the immutable version, &lt;a href=&quot;fn.from_utf8_unchecked&quot;&gt;&lt;code&gt;from_utf8_unchecked()&lt;/code&gt;&lt;/a&gt;, for more information.</source>
          <target state="translated">詳細については、不変バージョン&lt;a href=&quot;fn.from_utf8_unchecked&quot;&gt; &lt;code&gt;from_utf8_unchecked()&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="a684821bc55021a042524a8b4fe83274eada7c49" translate="yes" xml:space="preserve">
          <source>See the module docmentation for an example.</source>
          <target state="translated">例については、モジュールの docmentation を参照してください。</target>
        </trans-unit>
        <trans-unit id="66067589fef60b45adfcdd0be56cbd47ceb31861" translate="yes" xml:space="preserve">
          <source>See the safe version, &lt;a href=&quot;fn.from_utf8&quot;&gt;&lt;code&gt;from_utf8&lt;/code&gt;&lt;/a&gt;, for more information.</source>
          <target state="translated">詳細については、安全なバージョン&lt;a href=&quot;fn.from_utf8&quot;&gt; &lt;code&gt;from_utf8&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="02797524d0407212d3c13196d668a1ec0b584c95" translate="yes" xml:space="preserve">
          <source>See the safe version, &lt;a href=&quot;struct.string#method.from_utf8&quot;&gt;&lt;code&gt;from_utf8&lt;/code&gt;&lt;/a&gt;, for more details.</source>
          <target state="translated">詳細については、安全なバージョン&lt;a href=&quot;struct.string#method.from_utf8&quot;&gt; &lt;code&gt;from_utf8&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="5a380b25e8aec1bf4c0bb052091f04bb7475ba5d" translate="yes" xml:space="preserve">
          <source>See: &lt;a href=&quot;https://131002.net/siphash/&quot;&gt;https://131002.net/siphash/&lt;/a&gt;</source>
          <target state="translated">参照：&lt;a href=&quot;https://131002.net/siphash/&quot;&gt;https&lt;/a&gt; : //131002.net/siphash/</target>
        </trans-unit>
        <trans-unit id="1ad08a39c58306085b282bedc81d14f73f8f8804" translate="yes" xml:space="preserve">
          <source>Seek</source>
          <target state="translated">Seek</target>
        </trans-unit>
        <trans-unit id="8cad73bf2364e24f55074dbda1f20524c7aa442a" translate="yes" xml:space="preserve">
          <source>Seek and BufRead</source>
          <target state="translated">シークとバフリード</target>
        </trans-unit>
        <trans-unit id="fe3553957a3c1946b9d7133bb39545773c745764" translate="yes" xml:space="preserve">
          <source>Seek to an offset, in bytes, in a stream.</source>
          <target state="translated">ストリーム内のオフセットをバイト単位で指定します。</target>
        </trans-unit>
        <trans-unit id="924445c1672d1d6775d6c8f71c0bfeb6be4cc6c3" translate="yes" xml:space="preserve">
          <source>Seek to an offset, in bytes, in a stream. &lt;a href=&quot;../io/trait.seek#tymethod.seek&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">ストリーム内のオフセットをバイト単位でシークします。&lt;a href=&quot;../io/trait.seek#tymethod.seek&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1852a8e7cc8adbe4f70045cf88aac4234a34f29c" translate="yes" xml:space="preserve">
          <source>Seek to an offset, in bytes, in a stream. &lt;a href=&quot;io/trait.seek#tymethod.seek&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">ストリーム内のオフセットをバイト単位でシークします。&lt;a href=&quot;io/trait.seek#tymethod.seek&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="78bc551723e7ee57fbfdb669abf732a9f2963f45" translate="yes" xml:space="preserve">
          <source>Seek to an offset, in bytes, in a stream. &lt;a href=&quot;trait.seek#tymethod.seek&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">ストリーム内のオフセットをバイト単位でシークします。&lt;a href=&quot;trait.seek#tymethod.seek&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a3a1aaff6368ce2d4bcde1b13b8d780900df19ec" translate="yes" xml:space="preserve">
          <source>Seek to an offset, in bytes, in the underlying reader.</source>
          <target state="translated">基底にあるリーダーのオフセットをバイト単位で求めます。</target>
        </trans-unit>
        <trans-unit id="782f434ab05191ad8dcf37f6402e80f067899a8f" translate="yes" xml:space="preserve">
          <source>Seek to the offset, in bytes, in the underlying writer.</source>
          <target state="translated">ライタのオフセットをバイト単位で指定します。</target>
        </trans-unit>
        <trans-unit id="ec171d003aaa6719b15e05123a04ab9032c9c7b3" translate="yes" xml:space="preserve">
          <source>Seek::seek</source>
          <target state="translated">Seek::seek</target>
        </trans-unit>
        <trans-unit id="1474abe7d1382971659ad860575c56839881b1fc" translate="yes" xml:space="preserve">
          <source>Seek::stream_len</source>
          <target state="translated">Seek::stream_len</target>
        </trans-unit>
        <trans-unit id="44ac8a5eab63412cc08c36851544baee81d6b123" translate="yes" xml:space="preserve">
          <source>Seek::stream_position</source>
          <target state="translated">Seek::stream_position</target>
        </trans-unit>
        <trans-unit id="fd510396cd5c0eab5e11482493ad588e4024cb70" translate="yes" xml:space="preserve">
          <source>SeekFrom</source>
          <target state="translated">SeekFrom</target>
        </trans-unit>
        <trans-unit id="427eb95bd1cd22558d933079e29c00dd37d72d4a" translate="yes" xml:space="preserve">
          <source>SeekFrom::borrow</source>
          <target state="translated">SeekFrom::borrow</target>
        </trans-unit>
        <trans-unit id="7ad79c009f36c63ae456cd688e9bf99703b65ceb" translate="yes" xml:space="preserve">
          <source>SeekFrom::borrow_mut</source>
          <target state="translated">SeekFrom::borrow_mut</target>
        </trans-unit>
        <trans-unit id="397dd4c0b4ce83e85eb5e83ad6cbd7e1291a52e2" translate="yes" xml:space="preserve">
          <source>SeekFrom::clone</source>
          <target state="translated">SeekFrom::clone</target>
        </trans-unit>
        <trans-unit id="c59e5f54f77f9b2a10aeabaa613f148a9c710494" translate="yes" xml:space="preserve">
          <source>SeekFrom::clone_from</source>
          <target state="translated">SeekFrom::clone_from</target>
        </trans-unit>
        <trans-unit id="37b1fe523d77193ab2ea28520f4816544f0379ec" translate="yes" xml:space="preserve">
          <source>SeekFrom::clone_into</source>
          <target state="translated">SeekFrom::clone_into</target>
        </trans-unit>
        <trans-unit id="75500845d36a29fe6122926b364563db80213be2" translate="yes" xml:space="preserve">
          <source>SeekFrom::eq</source>
          <target state="translated">SeekFrom::eq</target>
        </trans-unit>
        <trans-unit id="872a5d7d22f5f8275059aebcda452b8ca718f73b" translate="yes" xml:space="preserve">
          <source>SeekFrom::fmt</source>
          <target state="translated">SeekFrom::fmt</target>
        </trans-unit>
        <trans-unit id="182e03eead0de8ff70d9ea28f7c3f82a0f61861e" translate="yes" xml:space="preserve">
          <source>SeekFrom::from</source>
          <target state="translated">SeekFrom::from</target>
        </trans-unit>
        <trans-unit id="1f8cf9e3cc706bab03d7a56e94734740e227026d" translate="yes" xml:space="preserve">
          <source>SeekFrom::into</source>
          <target state="translated">SeekFrom::into</target>
        </trans-unit>
        <trans-unit id="8875d1fe13daed6b50b4b4189d74089d5d2f3a11" translate="yes" xml:space="preserve">
          <source>SeekFrom::ne</source>
          <target state="translated">SeekFrom::ne</target>
        </trans-unit>
        <trans-unit id="8ffdcc93187a1610d8bd75f706e4173ad5e1734d" translate="yes" xml:space="preserve">
          <source>SeekFrom::to_owned</source>
          <target state="translated">SeekFrom::to_owned</target>
        </trans-unit>
        <trans-unit id="a73a30ab7b54ddb1c73905159f71899b77c42ac6" translate="yes" xml:space="preserve">
          <source>SeekFrom::try_from</source>
          <target state="translated">SeekFrom::try_from</target>
        </trans-unit>
        <trans-unit id="fb695942bfd603a2603f4be02afdfa21f3f72031" translate="yes" xml:space="preserve">
          <source>SeekFrom::try_into</source>
          <target state="translated">SeekFrom::try_into</target>
        </trans-unit>
        <trans-unit id="d971512c7a548ec6b3ef2e746ac5d96e04b6fbd2" translate="yes" xml:space="preserve">
          <source>SeekFrom::type_id</source>
          <target state="translated">SeekFrom::type_id</target>
        </trans-unit>
        <trans-unit id="e94fa27c4c8f72ef70c9f53dee8d71a248bfe38b" translate="yes" xml:space="preserve">
          <source>Seeking always discards the internal buffer, even if the seek position would otherwise fall within it. This guarantees that calling &lt;code&gt;.into_inner()&lt;/code&gt; immediately after a seek yields the underlying reader at the same position.</source>
          <target state="translated">シーク位置は、シーク位置に収まる場合でも、常に内部バッファーを破棄します。これにより、シークの直後に &lt;code&gt;.into_inner()&lt;/code&gt; を呼び出すと、同じ位置にあるリーダーが生成されることが保証されます。</target>
        </trans-unit>
        <trans-unit id="31109716dc13ddb7d5f6f990170f4796d7e99c79" translate="yes" xml:space="preserve">
          <source>Seeking always writes out the internal buffer before seeking.</source>
          <target state="translated">シークは常にシークの前に内部バッファを書き出します。</target>
        </trans-unit>
        <trans-unit id="924f937be2634763f41633daba31264f87f5680d" translate="yes" xml:space="preserve">
          <source>Seeking to a negative offset is considered an error.</source>
          <target state="translated">負のオフセットを求めるとエラーとなります。</target>
        </trans-unit>
        <trans-unit id="2629798180cc3f6ffd83624c6b2bf1abe5169dc8" translate="yes" xml:space="preserve">
          <source>Seeks relative to the current position. If the new position lies within the buffer, the buffer will not be flushed, allowing for more efficient seeks. This method does not return the location of the underlying reader, so the caller must track this information themselves if it is required.</source>
          <target state="translated">現在の位置からの相対的なシークを行います。新しい位置がバッファ内にある場合、バッファはフラッシュされないので、より効率的なシークが可能になります。このメソッドは基本的にリーダの位置を返しませんので、必要な場合は呼び出し元が自分で追跡しなければなりません。</target>
        </trans-unit>
        <trans-unit id="d94b8b9292d869d5680654530dc8da6a48edacc9" translate="yes" xml:space="preserve">
          <source>Seeks to a given position and reads a number of bytes.</source>
          <target state="translated">指定された位置を探し、バイト数を読み込みます。</target>
        </trans-unit>
        <trans-unit id="7e1ba3cab33940d33de9b4f51e9bd8cb4d9b7632" translate="yes" xml:space="preserve">
          <source>Seeks to a given position and reads a number of bytes. &lt;a href=&quot;../os/windows/fs/trait.fileext#tymethod.seek_read&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">指定された位置にシークし、バイト数を読み取ります。&lt;a href=&quot;../os/windows/fs/trait.fileext#tymethod.seek_read&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4bafebf79da45b92d8f1c9f8c383607f5183cb6d" translate="yes" xml:space="preserve">
          <source>Seeks to a given position and writes a number of bytes.</source>
          <target state="translated">指定された位置を探してバイト数を書き込む。</target>
        </trans-unit>
        <trans-unit id="bd6c2ecd4a4fa9835635d0bd224cad8f4129d5d2" translate="yes" xml:space="preserve">
          <source>Seeks to a given position and writes a number of bytes. &lt;a href=&quot;../os/windows/fs/trait.fileext#tymethod.seek_write&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">指定された位置にシークし、バイト数を書き込みます。&lt;a href=&quot;../os/windows/fs/trait.fileext#tymethod.seek_write&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e102517374a81d4e2f92c28774a0b02079ebacf4" translate="yes" xml:space="preserve">
          <source>Self</source>
          <target state="translated">Self</target>
        </trans-unit>
        <trans-unit id="fe03c3515833357d89e7094df960e757cae3bc1d" translate="yes" xml:space="preserve">
          <source>Semantics</source>
          <target state="translated">Semantics</target>
        </trans-unit>
        <trans-unit id="3210d8feaecd3e3c6262e3c74f346be6eadfe55f" translate="yes" xml:space="preserve">
          <source>Semi</source>
          <target state="translated">Semi</target>
        </trans-unit>
        <trans-unit id="9bc2575c3930437e80555f78757b783c842e8e66" translate="yes" xml:space="preserve">
          <source>Send</source>
          <target state="translated">Send</target>
        </trans-unit>
        <trans-unit id="54779295321c6e0a5194c3ef66c341fba0d404fb" translate="yes" xml:space="preserve">
          <source>SendError</source>
          <target state="translated">SendError</target>
        </trans-unit>
        <trans-unit id="17b874d289117b1353bc5080960074585aed4227" translate="yes" xml:space="preserve">
          <source>Sender</source>
          <target state="translated">Sender</target>
        </trans-unit>
        <trans-unit id="4e0a5e08d9f9bcae02371f3ba106ea3edcb24c9b" translate="yes" xml:space="preserve">
          <source>Sending Multiple Values and Seeing the Receiver Waiting</source>
          <target state="translated">複数の値を送信して、受信者が待っているのを見る</target>
        </trans-unit>
        <trans-unit id="046ad62eccd114c9444fd7a6738d8f920b7d7369" translate="yes" xml:space="preserve">
          <source>Sending Requests to Threads via Channels</source>
          <target state="translated">チャンネルを介したスレッドへのリクエスト送信</target>
        </trans-unit>
        <trans-unit id="86838eeb9351f7893a6219c56be5576aec30fb22" translate="yes" xml:space="preserve">
          <source>Sends a value on this synchronous channel.</source>
          <target state="translated">この同期チャネルに値を送信します。</target>
        </trans-unit>
        <trans-unit id="875987b19366de0d72af6e8dc1274dcc3d9ce725" translate="yes" xml:space="preserve">
          <source>Sends data on the socket to the given address. On success, returns the number of bytes written.</source>
          <target state="translated">ソケット上のデータを指定されたアドレスに送信する。成功した場合、書き込まれたバイト数を返す。</target>
        </trans-unit>
        <trans-unit id="30b360cb8d4554ed38340e6613a64788ed8447f1" translate="yes" xml:space="preserve">
          <source>Sends data on the socket to the remote address to which it is connected.</source>
          <target state="translated">ソケットのデータを接続先のリモートアドレスに送信します。</target>
        </trans-unit>
        <trans-unit id="d73fae814c13c0f3a1cfe4339fec819242f46820" translate="yes" xml:space="preserve">
          <source>Sends data on the socket to the socket's peer.</source>
          <target state="translated">ソケットのデータをソケットのピアに送信します。</target>
        </trans-unit>
        <trans-unit id="f7ace41157173d82b5b14c021d27f646fa80ec18" translate="yes" xml:space="preserve">
          <source>Sends data on the socket to the specified address.</source>
          <target state="translated">ソケット上のデータを指定したアドレスに送信します。</target>
        </trans-unit>
        <trans-unit id="bb2ebdecf0afbd58ee653fe08097784770f3ad88" translate="yes" xml:space="preserve">
          <source>Separating Modules into Different Files</source>
          <target state="translated">モジュールを別のファイルに分ける</target>
        </trans-unit>
        <trans-unit id="eb68bb453a78e471b661f27a57ad46a70b7a8f79" translate="yes" xml:space="preserve">
          <source>Separation of Concerns for Binary Projects</source>
          <target state="translated">バイナリプロジェクトの懸念の分離</target>
        </trans-unit>
        <trans-unit id="0333ded9cb11951aa9ed251144f6cd1c67d32585" translate="yes" xml:space="preserve">
          <source>Separators at the start or end of a string are neighbored by empty strings.</source>
          <target state="translated">文字列の先頭または末尾のセパレータは、空の文字列に隣接しています。</target>
        </trans-unit>
        <trans-unit id="74f3eda32fc0025d1630d3e705ef4629c5affc16" translate="yes" xml:space="preserve">
          <source>Sequence types (&lt;a href=&quot;types/tuple&quot;&gt;tuple&lt;/a&gt;, &lt;a href=&quot;types/array&quot;&gt;array&lt;/a&gt;, &lt;a href=&quot;types/slice&quot;&gt;slice&lt;/a&gt;).</source>
          <target state="translated">シーケンス型（&lt;a href=&quot;types/tuple&quot;&gt;タプル&lt;/a&gt;、&lt;a href=&quot;types/array&quot;&gt;配列&lt;/a&gt;、&lt;a href=&quot;types/slice&quot;&gt;スライス&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="9a20643d87a8a338495f31251b121b1741b7ff7c" translate="yes" xml:space="preserve">
          <source>Sequence types:</source>
          <target state="translated">シーケンスの種類。</target>
        </trans-unit>
        <trans-unit id="b5fb636023abb67d347041d398442118f79ea091" translate="yes" xml:space="preserve">
          <source>Sequences</source>
          <target state="translated">Sequences</target>
        </trans-unit>
        <trans-unit id="5b018ff2e321cba1df1dcab575212a7a3b8da5b5" translate="yes" xml:space="preserve">
          <source>Sequences: &lt;a href=&quot;../vec/struct.vec&quot;&gt;&lt;code&gt;Vec&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;struct.vecdeque&quot;&gt;&lt;code&gt;VecDeque&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;struct.linkedlist&quot;&gt;&lt;code&gt;LinkedList&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">シーケンス：&lt;a href=&quot;../vec/struct.vec&quot;&gt; &lt;code&gt;Vec&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;struct.vecdeque&quot;&gt; &lt;code&gt;VecDeque&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;struct.linkedlist&quot;&gt; &lt;code&gt;LinkedList&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="832d2c638f42cd0e241118f709349a347318c42f" translate="yes" xml:space="preserve">
          <source>Sequentially consistent - sequentially consistent operations are guaranteed to happen in order. This is the standard mode for working with atomic types and is equivalent to Java's &lt;code&gt;volatile&lt;/code&gt;.</source>
          <target state="translated">順次一貫性-順次一貫性のある操作が順番に発生することが保証されています。これは、アトミック型を操作するための標準モードであり、Javaの &lt;code&gt;volatile&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="08daf45ab10abcae6be0fff2b6976fdc73bb76f9" translate="yes" xml:space="preserve">
          <source>Set Configuration Options</source>
          <target state="translated">設定オプションの設定</target>
        </trans-unit>
        <trans-unit id="dae96399e29b7b956dede96d462f45495b13a4b7" translate="yes" xml:space="preserve">
          <source>Set the &lt;code&gt;RUST_MIN_STACK&lt;/code&gt; environment variable to an integer representing the desired stack size (in bytes). Note that setting &lt;a href=&quot;struct.builder#method.stack_size&quot;&gt;&lt;code&gt;Builder::stack_size&lt;/code&gt;&lt;/a&gt; will override this.</source>
          <target state="translated">&lt;code&gt;RUST_MIN_STACK&lt;/code&gt; 環境変数を、目的のスタックサイズ（バイト単位）を表す整数に設定します。&lt;a href=&quot;struct.builder#method.stack_size&quot;&gt; &lt;code&gt;Builder::stack_size&lt;/code&gt; &lt;/a&gt;を設定すると、これが上書きされることに注意してください。</target>
        </trans-unit>
        <trans-unit id="51dd44e4b93ed157267953067415bbd676cce642" translate="yes" xml:space="preserve">
          <source>Set the field public:</source>
          <target state="translated">フィールドの公開を設定します。</target>
        </trans-unit>
        <trans-unit id="404b96569bfb0a8f7adb51901316c79fcc86c80c" translate="yes" xml:space="preserve">
          <source>Set up any needed data or state.</source>
          <target state="translated">必要なデータや状態を設定します。</target>
        </trans-unit>
        <trans-unit id="22d71ea734ba02339845986ef6707923d879c259" translate="yes" xml:space="preserve">
          <source>Set when the crate being compiled is being compiled with the &lt;code&gt;proc_macro&lt;/code&gt;&lt;a href=&quot;linkage&quot;&gt;crate type&lt;/a&gt;.</source>
          <target state="translated">コンパイルされるクレートが &lt;code&gt;proc_macro&lt;/code&gt; &lt;a href=&quot;linkage&quot;&gt;クレートタイプ&lt;/a&gt;でコンパイルされるときに設定されます。</target>
        </trans-unit>
        <trans-unit id="056ba70bd63e725f8843ebaf5c09105c3eab8106" translate="yes" xml:space="preserve">
          <source>Sets &lt;code&gt;count * size_of::&amp;lt;T&amp;gt;()&lt;/code&gt; bytes of memory starting at &lt;code&gt;dst&lt;/code&gt; to &lt;code&gt;val&lt;/code&gt;.</source>
          <target state="translated">セットは &lt;code&gt;count * size_of::&amp;lt;T&amp;gt;()&lt;/code&gt; から始まるバイトのメモリ &lt;code&gt;dst&lt;/code&gt; へ &lt;code&gt;val&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c1997c6c112c8704556cc0c7cef7f08de7459cd3" translate="yes" xml:space="preserve">
          <source>Sets extra flags for the &lt;code&gt;dwFileFlags&lt;/code&gt; argument to the call to &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/hh449422.aspx&quot;&gt;&lt;code&gt;CreateFile2&lt;/code&gt;&lt;/a&gt; to the specified value (or combines it with &lt;code&gt;attributes&lt;/code&gt; and &lt;code&gt;security_qos_flags&lt;/code&gt; to set the &lt;code&gt;dwFlagsAndAttributes&lt;/code&gt; for &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/aa363858.aspx&quot;&gt;&lt;code&gt;CreateFile&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/hh449422.aspx&quot;&gt; &lt;code&gt;CreateFile2&lt;/code&gt; &lt;/a&gt;の呼び出しに対する &lt;code&gt;dwFileFlags&lt;/code&gt; 引数の追加のフラグを指定された値に設定し &lt;code&gt;attributes&lt;/code&gt; （または、属性と &lt;code&gt;security_qos_flags&lt;/code&gt; と組み合わせて、&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/aa363858.aspx&quot;&gt; &lt;code&gt;CreateFile&lt;/code&gt; &lt;/a&gt;の &lt;code&gt;dwFlagsAndAttributes&lt;/code&gt; を設定します）。</target>
        </trans-unit>
        <trans-unit id="b2b2a84c201b69ee93f1779805a7ef6d5dba2dc7" translate="yes" xml:space="preserve">
          <source>Sets extra flags for the &lt;code&gt;dwFileFlags&lt;/code&gt; argument to the call to [&lt;code&gt;CreateFile2&lt;/code&gt;] to the specified value (or combines it with &lt;code&gt;attributes&lt;/code&gt; and &lt;code&gt;security_qos_flags&lt;/code&gt; to set the &lt;code&gt;dwFlagsAndAttributes&lt;/code&gt; for [&lt;code&gt;CreateFile&lt;/code&gt;]). &lt;a href=&quot;../os/windows/fs/trait.openoptionsext#tymethod.custom_flags&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">[ &lt;code&gt;CreateFile2&lt;/code&gt; ]の呼び出しに対する &lt;code&gt;dwFileFlags&lt;/code&gt; 引数の追加のフラグを指定された値に設定し &lt;code&gt;attributes&lt;/code&gt; （またはそれを属性および &lt;code&gt;security_qos_flags&lt;/code&gt; と組み合わせて[ &lt;code&gt;CreateFile&lt;/code&gt; ]の &lt;code&gt;dwFlagsAndAttributes&lt;/code&gt; を設定します）。&lt;a href=&quot;../os/windows/fs/trait.openoptionsext#tymethod.custom_flags&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7f8f12c8cb7cc24b4a8a0f0db06296cfa587f636" translate="yes" xml:space="preserve">
          <source>Sets the &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/ms684863(v=vs.85).aspx&quot;&gt;process creation flags&lt;/a&gt; to be passed to &lt;code&gt;CreateProcess&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;CreateProcess&lt;/code&gt; に渡される&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/ms684863(v=vs.85).aspx&quot;&gt;プロセス作成フラグ&lt;/a&gt;を設定します。</target>
        </trans-unit>
        <trans-unit id="7049d876eb8c7c61c52d531c4b19a0066ccd493e" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;dwFileAttributes&lt;/code&gt; argument to the call to &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/hh449422.aspx&quot;&gt;&lt;code&gt;CreateFile2&lt;/code&gt;&lt;/a&gt; to the specified value (or combines it with &lt;code&gt;custom_flags&lt;/code&gt; and &lt;code&gt;security_qos_flags&lt;/code&gt; to set the &lt;code&gt;dwFlagsAndAttributes&lt;/code&gt; for &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/aa363858.aspx&quot;&gt;&lt;code&gt;CreateFile&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">設定 &lt;code&gt;dwFileAttributes&lt;/code&gt; のへの呼び出しの引数&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/hh449422.aspx&quot;&gt; &lt;code&gt;CreateFile2&lt;/code&gt; &lt;/a&gt;指定した値（またはと結合し、それを &lt;code&gt;custom_flags&lt;/code&gt; と &lt;code&gt;security_qos_flags&lt;/code&gt; 設定する &lt;code&gt;dwFlagsAndAttributes&lt;/code&gt; のため&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/aa363858.aspx&quot;&gt; &lt;code&gt;CreateFile&lt;/code&gt; &lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="fbfe58dd4d4871e3f5efaa00ce9114bb2a23276c" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;dwFileAttributes&lt;/code&gt; argument to the call to [&lt;code&gt;CreateFile2&lt;/code&gt;] to the specified value (or combines it with &lt;code&gt;custom_flags&lt;/code&gt; and &lt;code&gt;security_qos_flags&lt;/code&gt; to set the &lt;code&gt;dwFlagsAndAttributes&lt;/code&gt; for [&lt;code&gt;CreateFile&lt;/code&gt;]). &lt;a href=&quot;../os/windows/fs/trait.openoptionsext#tymethod.attributes&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">セット &lt;code&gt;dwFileAttributes&lt;/code&gt; のにコールの引数[ &lt;code&gt;CreateFile2&lt;/code&gt; ]指定された値に（又はそれと結合し &lt;code&gt;custom_flags&lt;/code&gt; と &lt;code&gt;security_qos_flags&lt;/code&gt; 設定する &lt;code&gt;dwFlagsAndAttributes&lt;/code&gt; ために【 &lt;code&gt;CreateFile&lt;/code&gt; ]）。&lt;a href=&quot;../os/windows/fs/trait.openoptionsext#tymethod.attributes&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="14c359e1959e15fb05ad53df0726c01f8bd34c1f" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;dwSecurityQosFlags&lt;/code&gt; argument to the call to &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/hh449422.aspx&quot;&gt;&lt;code&gt;CreateFile2&lt;/code&gt;&lt;/a&gt; to the specified value (or combines it with &lt;code&gt;custom_flags&lt;/code&gt; and &lt;code&gt;attributes&lt;/code&gt; to set the &lt;code&gt;dwFlagsAndAttributes&lt;/code&gt; for &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/aa363858.aspx&quot;&gt;&lt;code&gt;CreateFile&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">設定し &lt;code&gt;dwSecurityQosFlags&lt;/code&gt; のへの呼び出しの引数&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/hh449422.aspx&quot;&gt; &lt;code&gt;CreateFile2&lt;/code&gt; &lt;/a&gt;指定された値（またはと結合し、それをする &lt;code&gt;custom_flags&lt;/code&gt; し、 &lt;code&gt;attributes&lt;/code&gt; を設定するに &lt;code&gt;dwFlagsAndAttributes&lt;/code&gt; のため&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/aa363858.aspx&quot;&gt; &lt;code&gt;CreateFile&lt;/code&gt; &lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="c9c08d809d7457fa9085725f05f2e7a3c7b3d518" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;dwSecurityQosFlags&lt;/code&gt; argument to the call to [&lt;code&gt;CreateFile2&lt;/code&gt;] to the specified value (or combines it with &lt;code&gt;custom_flags&lt;/code&gt; and &lt;code&gt;attributes&lt;/code&gt; to set the &lt;code&gt;dwFlagsAndAttributes&lt;/code&gt; for [&lt;code&gt;CreateFile&lt;/code&gt;]). &lt;a href=&quot;../os/windows/fs/trait.openoptionsext#tymethod.security_qos_flags&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">セット &lt;code&gt;dwSecurityQosFlags&lt;/code&gt; のにコールの引数[ &lt;code&gt;CreateFile2&lt;/code&gt; ]指定された値に（又はそれと結合し &lt;code&gt;custom_flags&lt;/code&gt; と &lt;code&gt;attributes&lt;/code&gt; 設定すること &lt;code&gt;dwFlagsAndAttributes&lt;/code&gt; ために【 &lt;code&gt;CreateFile&lt;/code&gt; ]）。&lt;a href=&quot;../os/windows/fs/trait.openoptionsext#tymethod.security_qos_flags&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2661cce730a72f4d98c68c762bfe1b056ab79aca" translate="yes" xml:space="preserve">
          <source>Sets the [process creation flags][1] to be passed to &lt;code&gt;CreateProcess&lt;/code&gt;. &lt;a href=&quot;../os/windows/process/trait.commandext#tymethod.creation_flags&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;CreateProcess&lt;/code&gt; に渡される[プロセス作成フラグ] [1]を設定します。&lt;a href=&quot;../os/windows/process/trait.commandext#tymethod.creation_flags&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ce814bac4a4ff2457a43a54737b048c532a0aa20" translate="yes" xml:space="preserve">
          <source>Sets the child process's user ID. This translates to a &lt;code&gt;setuid&lt;/code&gt; call in the child process. Failure in the &lt;code&gt;setuid&lt;/code&gt; call will cause the spawn to fail.</source>
          <target state="translated">子プロセスのユーザーIDを設定します。これは、子プロセスの &lt;code&gt;setuid&lt;/code&gt; 呼び出しに変換されます。障害 &lt;code&gt;setuid&lt;/code&gt; 呼び出しが産卵が失敗します。</target>
        </trans-unit>
        <trans-unit id="92c9734578513f6eb162eafc8f52f7e5c45af308" translate="yes" xml:space="preserve">
          <source>Sets the child process's user ID. This translates to a &lt;code&gt;setuid&lt;/code&gt; call in the child process. Failure in the &lt;code&gt;setuid&lt;/code&gt; call will cause the spawn to fail. &lt;a href=&quot;../os/unix/process/trait.commandext#tymethod.uid&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">子プロセスのユーザーIDを設定します。これは、子プロセスの &lt;code&gt;setuid&lt;/code&gt; 呼び出しに変換されます。障害 &lt;code&gt;setuid&lt;/code&gt; 呼び出しが産卵が失敗します。&lt;a href=&quot;../os/unix/process/trait.commandext#tymethod.uid&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="be925dac0770ceeb65dc7dab3c58942103c0193b" translate="yes" xml:space="preserve">
          <source>Sets the contained value.</source>
          <target state="translated">含まれる値を設定します。</target>
        </trans-unit>
        <trans-unit id="84421e00729f731b6dc5d7abdf2db4ceb9ad632e" translate="yes" xml:space="preserve">
          <source>Sets the environment variable &lt;code&gt;k&lt;/code&gt; to the value &lt;code&gt;v&lt;/code&gt; for the currently running process.</source>
          <target state="translated">現在実行中のプロセスの環境変数 &lt;code&gt;k&lt;/code&gt; を値 &lt;code&gt;v&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="a4812769d4da90fe71d6f09aebd56ba76ad7c55c" translate="yes" xml:space="preserve">
          <source>Sets the mode bits that a new file will be created with.</source>
          <target state="translated">新しいファイルが作成されるモードビットを設定します。</target>
        </trans-unit>
        <trans-unit id="955aa039d64d79d9dad058215e85b20785d0e35e" translate="yes" xml:space="preserve">
          <source>Sets the mode bits that a new file will be created with. &lt;a href=&quot;../os/unix/fs/trait.openoptionsext#tymethod.mode&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">新しいファイルの作成に使用するモードビットを設定します。&lt;a href=&quot;../os/unix/fs/trait.openoptionsext#tymethod.mode&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e0cbebddda1d8a36d60c3bfc4c2f172a5dfd1cf1" translate="yes" xml:space="preserve">
          <source>Sets the mode to create new directories with. This option defaults to 0o777.</source>
          <target state="translated">新しいディレクトリを作成するモードを設定します。このオプションのデフォルトは 0o777 です。</target>
        </trans-unit>
        <trans-unit id="160dff498214cf800fe8e6ed575a29543e73aa1e" translate="yes" xml:space="preserve">
          <source>Sets the mode to create new directories with. This option defaults to 0o777. &lt;a href=&quot;../os/unix/fs/trait.dirbuilderext#tymethod.mode&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">新しいディレクトリを作成するためのモードを設定します。このオプションのデフォルトは0o777です。&lt;a href=&quot;../os/unix/fs/trait.dirbuilderext#tymethod.mode&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e87b20d19230f415e2da9ee8d384e2e7f53a1338" translate="yes" xml:space="preserve">
          <source>Sets the number of bytes that can be read before this instance will return EOF. This is the same as constructing a new &lt;code&gt;Take&lt;/code&gt; instance, so the amount of bytes read and the previous limit value don't matter when calling this method.</source>
          <target state="translated">このインスタンスがEOFを返す前に読み取ることができるバイト数を設定します。これは、新しい &lt;code&gt;Take&lt;/code&gt; インスタンスを作成するのと同じなので、このメソッドを呼び出すときに、読み取られるバイト数と以前の制限値は関係ありません。</target>
        </trans-unit>
        <trans-unit id="24067d9725617c3bf841afad38e871ecdb2b8b7c" translate="yes" xml:space="preserve">
          <source>Sets the offset to the current position plus the specified number of bytes.</source>
          <target state="translated">現在位置のオフセットに指定したバイト数を加えたオフセットを設定します。</target>
        </trans-unit>
        <trans-unit id="f692318bc7ba083cabf3eab2161e8b8a3db450a8" translate="yes" xml:space="preserve">
          <source>Sets the offset to the provided number of bytes.</source>
          <target state="translated">オフセットを指定したバイト数に設定します。</target>
        </trans-unit>
        <trans-unit id="8122e908afce6f0667699e3813f1e8d32970f72a" translate="yes" xml:space="preserve">
          <source>Sets the offset to the size of this object plus the specified number of bytes.</source>
          <target state="translated">このオブジェクトのサイズに指定したバイト数を加えたオフセットを設定します。</target>
        </trans-unit>
        <trans-unit id="d53bb0ea056c01fc83f1046964138b58730e3466" translate="yes" xml:space="preserve">
          <source>Sets the option for creating a new file.</source>
          <target state="translated">新規ファイルの作成オプションを設定します。</target>
        </trans-unit>
        <trans-unit id="a4ca2dc204930d580267421bba1b96fad30633e8" translate="yes" xml:space="preserve">
          <source>Sets the option for read access.</source>
          <target state="translated">読み取りアクセスのオプションを設定します。</target>
        </trans-unit>
        <trans-unit id="a2430e3abe880986a68d19900b4421b33ba19eff" translate="yes" xml:space="preserve">
          <source>Sets the option for the append mode.</source>
          <target state="translated">追加モードのオプションを設定します。</target>
        </trans-unit>
        <trans-unit id="17be9cfeb89520af373651100921b4bb71a1889a" translate="yes" xml:space="preserve">
          <source>Sets the option for truncating a previous file.</source>
          <target state="translated">前のファイルを切り詰めるオプションを設定します。</target>
        </trans-unit>
        <trans-unit id="16c8143af49856abc8e90268804d7514a3d7528e" translate="yes" xml:space="preserve">
          <source>Sets the option for write access.</source>
          <target state="translated">書き込みアクセスのオプションを設定します。</target>
        </trans-unit>
        <trans-unit id="1b7621414a1f97229400fc9d3e514b0597043a44" translate="yes" xml:space="preserve">
          <source>Sets the option to always create a new file.</source>
          <target state="translated">常に新しいファイルを作成するオプションを設定します。</target>
        </trans-unit>
        <trans-unit id="1d46ba2f67ddfc3dff7f86a2a919aa5a23732a6e" translate="yes" xml:space="preserve">
          <source>Sets the position of this cursor.</source>
          <target state="translated">このカーソルの位置を設定します。</target>
        </trans-unit>
        <trans-unit id="b3da43878310bb987b12a2a789e4843007f193c6" translate="yes" xml:space="preserve">
          <source>Sets the read timeout for the socket.</source>
          <target state="translated">ソケットの読み込みタイムアウトを設定します。</target>
        </trans-unit>
        <trans-unit id="b7376de16de9b1d1e300186fc4fd48c1d1c5cd30" translate="yes" xml:space="preserve">
          <source>Sets the read timeout to the timeout specified.</source>
          <target state="translated">読み出しタイムアウトを指定したタイムアウトに設定します。</target>
        </trans-unit>
        <trans-unit id="aa11b46378475b94c8efe9cda3223fb982804092" translate="yes" xml:space="preserve">
          <source>Sets the size of the stack (in bytes) for the new thread.</source>
          <target state="translated">新しいスレッドのスタックのサイズを(バイト単位で)設定します。</target>
        </trans-unit>
        <trans-unit id="1c37ab19f8d28a8c744a9164fe95294a0c392d67" translate="yes" xml:space="preserve">
          <source>Sets the underlying raw bits for this set of permissions.</source>
          <target state="translated">このパーミッションのセットの基礎となる生のビットを設定します。</target>
        </trans-unit>
        <trans-unit id="13ce1408fbaf53bac968b7533d7d2200354d74b1" translate="yes" xml:space="preserve">
          <source>Sets the underlying raw bits for this set of permissions. &lt;a href=&quot;../os/unix/fs/trait.permissionsext#tymethod.set_mode&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">この一連の権限の基になる生のビットを設定します。&lt;a href=&quot;../os/unix/fs/trait.permissionsext#tymethod.set_mode&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f6247c67fdde05b90f2f61d79183aaa3b8c42a3b" translate="yes" xml:space="preserve">
          <source>Sets the value for the &lt;code&gt;IP_TTL&lt;/code&gt; option on this socket.</source>
          <target state="translated">このソケットの &lt;code&gt;IP_TTL&lt;/code&gt; オプションの値を設定します。</target>
        </trans-unit>
        <trans-unit id="eba828773afb5d489ceb41078d353587693e2adb" translate="yes" xml:space="preserve">
          <source>Sets the value of the &lt;code&gt;IPV6_MULTICAST_LOOP&lt;/code&gt; option for this socket.</source>
          <target state="translated">このソケットの &lt;code&gt;IPV6_MULTICAST_LOOP&lt;/code&gt; オプションの値を設定します。</target>
        </trans-unit>
        <trans-unit id="2ab8f780b368dbeb7517ffd586ad48535186d012" translate="yes" xml:space="preserve">
          <source>Sets the value of the &lt;code&gt;IP_MULTICAST_LOOP&lt;/code&gt; option for this socket.</source>
          <target state="translated">このソケットの &lt;code&gt;IP_MULTICAST_LOOP&lt;/code&gt; オプションの値を設定します。</target>
        </trans-unit>
        <trans-unit id="e21680fb32b3995fb896d39033963adff3ef366d" translate="yes" xml:space="preserve">
          <source>Sets the value of the &lt;code&gt;IP_MULTICAST_TTL&lt;/code&gt; option for this socket.</source>
          <target state="translated">このソケットの &lt;code&gt;IP_MULTICAST_TTL&lt;/code&gt; オプションの値を設定します。</target>
        </trans-unit>
        <trans-unit id="741b26687f9044b8d9908692d6d3a66f63d46ab1" translate="yes" xml:space="preserve">
          <source>Sets the value of the &lt;code&gt;MaybeUninit&amp;lt;T&amp;gt;&lt;/code&gt;. This overwrites any previous value without dropping it, so be careful not to use this twice unless you want to skip running the destructor. For your convenience, this also returns a mutable reference to the (now safely initialized) contents of &lt;code&gt;self&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;MaybeUninit&amp;lt;T&amp;gt;&lt;/code&gt; の値を設定します。これは以前の値を上書きせずに上書きするため、デストラクタの実行をスキップしたくない場合を除いて、これを2回使用しないように注意してください。便宜上、これは &lt;code&gt;self&lt;/code&gt; の（安全に初期化された）内容への変更可能な参照も返します。</target>
        </trans-unit>
        <trans-unit id="172ebb8097446a67c0c722df012162dce14f82c5" translate="yes" xml:space="preserve">
          <source>Sets the value of the &lt;code&gt;SO_BROADCAST&lt;/code&gt; option for this socket.</source>
          <target state="translated">このソケットの &lt;code&gt;SO_BROADCAST&lt;/code&gt; オプションの値を設定します。</target>
        </trans-unit>
        <trans-unit id="c7234a0198b456bcf2f71df391fadfb348fd3dd9" translate="yes" xml:space="preserve">
          <source>Sets the value of the &lt;code&gt;TCP_NODELAY&lt;/code&gt; option on this socket.</source>
          <target state="translated">このソケットの &lt;code&gt;TCP_NODELAY&lt;/code&gt; オプションの値を設定します。</target>
        </trans-unit>
        <trans-unit id="48774c5ebac7053f3e138fc9e16b60e25a96813f" translate="yes" xml:space="preserve">
          <source>Sets the value of the entry with the &lt;code&gt;OccupiedEntry&lt;/code&gt;'s key, and returns the entry's old value.</source>
          <target state="translated">&lt;code&gt;OccupiedEntry&lt;/code&gt; のキーを使用してエントリの値を設定し、エントリの古い値を返します。</target>
        </trans-unit>
        <trans-unit id="9a97e926f2854934263a3694fe0ee01cd600c728" translate="yes" xml:space="preserve">
          <source>Sets the value of the entry with the &lt;code&gt;VacantEntry&lt;/code&gt;'s key, and returns a mutable reference to it.</source>
          <target state="translated">&lt;code&gt;VacantEntry&lt;/code&gt; のキーでエントリの値を設定し、それに可変の参照を返します。</target>
        </trans-unit>
        <trans-unit id="981e589453aa7f155c53bded824501cfd42b0b49" translate="yes" xml:space="preserve">
          <source>Sets the value of the entry with the VacantEntry's key, and returns a mutable reference to it.</source>
          <target state="translated">VacantEntryのキーを持つエントリの値を設定し、そのエントリへの変更可能な参照を返します。</target>
        </trans-unit>
        <trans-unit id="56aece52ed7de18f860194beff0c22badf73b565" translate="yes" xml:space="preserve">
          <source>Sets the value of the entry, and returns the entry's old value.</source>
          <target state="translated">エントリの値を設定し、エントリの古い値を返します。</target>
        </trans-unit>
        <trans-unit id="b28a94630a0acc7871fd1f9dbb549fc4e9500580" translate="yes" xml:space="preserve">
          <source>Sets the working directory for the child process.</source>
          <target state="translated">子プロセスの作業ディレクトリを設定します。</target>
        </trans-unit>
        <trans-unit id="30663c629c124008aabdc3b273cddf6652a105f6" translate="yes" xml:space="preserve">
          <source>Sets the write timeout for the socket.</source>
          <target state="translated">ソケットの書き込みタイムアウトを設定します。</target>
        </trans-unit>
        <trans-unit id="25c45219c7bdebc8bc195905393e683675912de8" translate="yes" xml:space="preserve">
          <source>Sets the write timeout to the timeout specified.</source>
          <target state="translated">書き込みタイムアウトを指定したタイムアウトに設定します。</target>
        </trans-unit>
        <trans-unit id="2e0fb8d45f30de32cff3bc0c4111bea5168140bc" translate="yes" xml:space="preserve">
          <source>Sets: &lt;a href=&quot;struct.hashset&quot;&gt;&lt;code&gt;HashSet&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;struct.btreeset&quot;&gt;&lt;code&gt;BTreeSet&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">セット：&lt;a href=&quot;struct.hashset&quot;&gt; &lt;code&gt;HashSet&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;struct.btreeset&quot;&gt; &lt;code&gt;BTreeSet&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f70c27ebb58d70f30f9995aec6d95a82b5ae2008" translate="yes" xml:space="preserve">
          <source>Setting Up a Crates.io Account</source>
          <target state="translated">Crates.ioアカウントの設定</target>
        </trans-unit>
        <trans-unit id="710d049d145a06ebbd1617ee838a19ad46dfc041" translate="yes" xml:space="preserve">
          <source>Setting Up a New Project</source>
          <target state="translated">新規プロジェクトの設定</target>
        </trans-unit>
        <trans-unit id="72f70b4118af352fd7668af0419df15bf165f323" translate="yes" xml:space="preserve">
          <source>Setting up any other configuration</source>
          <target state="translated">その他の設定</target>
        </trans-unit>
        <trans-unit id="61104eb5b2de0f76a2dfb77a41d0b8cbdff3338b" translate="yes" xml:space="preserve">
          <source>Several methods on &lt;a href=&quot;struct.command&quot;&gt;&lt;code&gt;Command&lt;/code&gt;&lt;/a&gt;, such as &lt;a href=&quot;struct.command#method.spawn&quot;&gt;&lt;code&gt;spawn&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;struct.command#method.output&quot;&gt;&lt;code&gt;output&lt;/code&gt;&lt;/a&gt;, can be used to spawn a process. In particular, &lt;a href=&quot;struct.command#method.output&quot;&gt;&lt;code&gt;output&lt;/code&gt;&lt;/a&gt; spawns the child process and waits until the process terminates, while &lt;a href=&quot;struct.command#method.spawn&quot;&gt;&lt;code&gt;spawn&lt;/code&gt;&lt;/a&gt; will return a &lt;a href=&quot;struct.child&quot;&gt;&lt;code&gt;Child&lt;/code&gt;&lt;/a&gt; that represents the spawned child process.</source>
          <target state="translated">&lt;a href=&quot;struct.command#method.spawn&quot;&gt; &lt;code&gt;spawn&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;struct.command#method.output&quot;&gt; &lt;code&gt;output&lt;/code&gt; &lt;/a&gt;などの&lt;a href=&quot;struct.command&quot;&gt; &lt;code&gt;Command&lt;/code&gt; の&lt;/a&gt;いくつかのメソッドを使用して、プロセスを生成できます。特に、&lt;a href=&quot;struct.command#method.output&quot;&gt; &lt;code&gt;output&lt;/code&gt; &lt;/a&gt;は子プロセスを生成し、プロセスが終了するまで待機し&lt;a href=&quot;struct.command#method.spawn&quot;&gt; &lt;code&gt;spawn&lt;/code&gt; &lt;/a&gt;が、spawnは生成された子プロセスを表す&lt;a href=&quot;struct.child&quot;&gt; &lt;code&gt;Child&lt;/code&gt; &lt;/a&gt;を返します。</target>
        </trans-unit>
        <trans-unit id="e5819bb82d7f59ef413ffed5a5f1abb2caad63ff" translate="yes" xml:space="preserve">
          <source>Several other collection methods also return iterators to yield a sequence of results but avoid allocating an entire collection to store the result in. This provides maximum flexibility as &lt;code&gt;collect&lt;/code&gt; or &lt;code&gt;extend&lt;/code&gt; can be called to &quot;pipe&quot; the sequence into any collection if desired. Otherwise, the sequence can be looped over with a &lt;code&gt;for&lt;/code&gt; loop. The iterator can also be discarded after partial use, preventing the computation of the unused items.</source>
          <target state="translated">他のいくつかのコレクションメソッドもイテレータを返し、結果のシーケンスを生成しますが、コレクション全体を割り当てて結果を保存することは避けます。これにより、必要に応じてコレクションにシーケンスを「パイプ」 &lt;code&gt;collect&lt;/code&gt; または &lt;code&gt;extend&lt;/code&gt; を呼び出すことができるため、最大限の柔軟性が得られます。それ以外の場合、シーケンスは &lt;code&gt;for&lt;/code&gt; ループでループできます。イテレータは、部分的に使用した後で破棄して、未使用のアイテムの計算を防ぐこともできます。</target>
        </trans-unit>
        <trans-unit id="89615f01358699eaa4c024997d32b57e06506f92" translate="yes" xml:space="preserve">
          <source>Several rules determine what a package can contain. A package &lt;em&gt;must&lt;/em&gt; contain zero or one library crates, and no more. It can contain as many binary crates as you&amp;rsquo;d like, but it must contain at least one crate (either library or binary).</source>
          <target state="translated">いくつかのルールは、パッケージに含めることができるものを決定します。パッケージに&lt;em&gt;は&lt;/em&gt;、0個または1個のライブラリクレートが含まれている&lt;em&gt;必要&lt;/em&gt;が&lt;em&gt;あり&lt;/em&gt;ます。必要な数のバイナリクレートを含めることができますが、少なくとも1つのクレート（ライブラリまたはバイナリ）を含める必要があります。</target>
        </trans-unit>
        <trans-unit id="08c2f3e4082ea69d621aae9852fccdc01e59f915" translate="yes" xml:space="preserve">
          <source>Several situations often occur which result in ambiguities about the receiver or referent of method or associated function calls. These situations may include:</source>
          <target state="translated">いくつかの状況が頻繁に発生し、その結果、メソッドや関連する関数呼び出しの受信者や参照元が曖昧になることがあります。これらの状況には以下のようなものがあります。</target>
        </trans-unit>
        <trans-unit id="7331278fb5718617e233df649e90ba9b72bfb49e" translate="yes" xml:space="preserve">
          <source>Shadowing</source>
          <target state="translated">Shadowing</target>
        </trans-unit>
        <trans-unit id="2713f25473e60389b391aef93ff444fbbf771b5f" translate="yes" xml:space="preserve">
          <source>Shadowing is different from marking a variable as &lt;code&gt;mut&lt;/code&gt;, because we&amp;rsquo;ll get a compile-time error if we accidentally try to reassign to this variable without using the &lt;code&gt;let&lt;/code&gt; keyword. By using &lt;code&gt;let&lt;/code&gt;, we can perform a few transformations on a value but have the variable be immutable after those transformations have been completed.</source>
          <target state="translated">シャドーイングは、変数を &lt;code&gt;mut&lt;/code&gt; としてマークすることとは異なります。なぜなら、 &lt;code&gt;let&lt;/code&gt; キーワードを使用せずにこの変数に誤って再割り当てしようとすると、コンパイル時エラーが発生するためです。 &lt;code&gt;let&lt;/code&gt; を使用すると、値に対していくつかの変換を実行できますが、これらの変換が完了した後は変数を不変にすることができます。</target>
        </trans-unit>
        <trans-unit id="bc84f8ef1f7ad8b864597d728a0025759b1dbefd" translate="yes" xml:space="preserve">
          <source>Shareable mutable containers exist to permit mutability in a controlled manner, even in the presence of aliasing. Both &lt;code&gt;Cell&amp;lt;T&amp;gt;&lt;/code&gt; and &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; allow doing this in a single-threaded way. However, neither &lt;code&gt;Cell&amp;lt;T&amp;gt;&lt;/code&gt; nor &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; are thread safe (they do not implement &lt;code&gt;Sync&lt;/code&gt;). If you need to do aliasing and mutation between multiple threads it is possible to use &lt;a href=&quot;../sync/struct.mutex&quot;&gt;&lt;code&gt;Mutex&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../sync/struct.rwlock&quot;&gt;&lt;code&gt;RwLock&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://doc.rust-lang.org/core/sync/atomic/index.html&quot;&gt;&lt;code&gt;atomic&lt;/code&gt;&lt;/a&gt; types.</source>
          <target state="translated">共有可能な可変コンテナは、エイリアシングが存在する場合でも、制御された方法で可変性を可能にするために存在します。 &lt;code&gt;Cell&amp;lt;T&amp;gt;&lt;/code&gt; と &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; 両方で、これをシングルスレッドで実行できます。ただし、 &lt;code&gt;Cell&amp;lt;T&amp;gt;&lt;/code&gt; も &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; もスレッドセーフではありません（ &lt;code&gt;Sync&lt;/code&gt; を実装していません）。複数のスレッド間でエイリアスとミュー&lt;a href=&quot;../sync/struct.rwlock&quot;&gt; &lt;code&gt;RwLock&lt;/code&gt; &lt;/a&gt;を行う必要がある場合は、&lt;a href=&quot;../sync/struct.mutex&quot;&gt; &lt;code&gt;Mutex&lt;/code&gt; &lt;/a&gt;、RwLock、または&lt;a href=&quot;https://doc.rust-lang.org/core/sync/atomic/index.html&quot;&gt; &lt;code&gt;atomic&lt;/code&gt; &lt;/a&gt;タイプを使用できます。</target>
        </trans-unit>
        <trans-unit id="47055abd20bfa696eaa641c29ba59506a0723b3b" translate="yes" xml:space="preserve">
          <source>Shareable mutable containers.</source>
          <target state="translated">共有可能なミューティアブルコンテナ。</target>
        </trans-unit>
        <trans-unit id="6c0ab5121c59b8d5ea846df7afe17c324651264a" translate="yes" xml:space="preserve">
          <source>Shared &lt;a href=&quot;expressions/operator-expr#borrow-operators&quot;&gt;borrow&lt;/a&gt;s, except if applied to a type with &lt;a href=&quot;interior-mutability&quot;&gt;interior mutability&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;interior-mutability&quot;&gt;内部の可変性&lt;/a&gt;を持つ型に適用される場合を除いて、共有&lt;a href=&quot;expressions/operator-expr#borrow-operators&quot;&gt;ボロー&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="efb0f6a277d017eb755bd966e4139004b6a0e92d" translate="yes" xml:space="preserve">
          <source>Shared references</source>
          <target state="translated">共通参照</target>
        </trans-unit>
        <trans-unit id="9034ede4e461b638eb9c97844c736d00fbd4d26b" translate="yes" xml:space="preserve">
          <source>Shared references (&lt;code&gt;&amp;amp;&lt;/code&gt;)</source>
          <target state="translated">共有参照（ &lt;code&gt;&amp;amp;&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="46585726f307293b1800a9a3aa2d1ca0bd93a70c" translate="yes" xml:space="preserve">
          <source>Shared references in Rust disallow mutation by default, and &lt;a href=&quot;struct.rc&quot;&gt;&lt;code&gt;Rc&lt;/code&gt;&lt;/a&gt; is no exception: you cannot generally obtain a mutable reference to something inside an &lt;a href=&quot;struct.rc&quot;&gt;&lt;code&gt;Rc&lt;/code&gt;&lt;/a&gt;. If you need mutability, put a &lt;a href=&quot;../cell/struct.cell&quot;&gt;&lt;code&gt;Cell&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../cell/struct.refcell&quot;&gt;&lt;code&gt;RefCell&lt;/code&gt;&lt;/a&gt; inside the &lt;a href=&quot;struct.rc&quot;&gt;&lt;code&gt;Rc&lt;/code&gt;&lt;/a&gt;; see &lt;a href=&quot;../cell/index#introducing-mutability-inside-of-something-immutable&quot;&gt;an example of mutability inside an Rc&lt;/a&gt;.</source>
          <target state="translated">Rustの共有参照はデフォルトで変更を許可しません&lt;a href=&quot;struct.rc&quot;&gt; &lt;code&gt;Rc&lt;/code&gt; &lt;/a&gt;も例外ではありません。通常、&lt;a href=&quot;struct.rc&quot;&gt; &lt;code&gt;Rc&lt;/code&gt; &lt;/a&gt;内の何かへの変更可能な参照を取得することはできません。&lt;a href=&quot;../cell/struct.refcell&quot;&gt; &lt;code&gt;RefCell&lt;/code&gt; &lt;/a&gt;性が必要な場合は、&lt;a href=&quot;struct.rc&quot;&gt; &lt;code&gt;Rc&lt;/code&gt; &lt;/a&gt;内に&lt;a href=&quot;../cell/struct.cell&quot;&gt; &lt;code&gt;Cell&lt;/code&gt; &lt;/a&gt;またはRefCellを配置します。&lt;a href=&quot;../cell/index#introducing-mutability-inside-of-something-immutable&quot;&gt;Rc内の可変性の例を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="40a3598e8561b60a959aeb32086eff6075229cde" translate="yes" xml:space="preserve">
          <source>Shared references in Rust disallow mutation by default, and &lt;code&gt;Arc&lt;/code&gt; is no exception: you cannot generally obtain a mutable reference to something inside an &lt;code&gt;Arc&lt;/code&gt;. If you need to mutate through an &lt;code&gt;Arc&lt;/code&gt;, use &lt;a href=&quot;struct.mutex&quot;&gt;&lt;code&gt;Mutex&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;struct.rwlock&quot;&gt;&lt;code&gt;RwLock&lt;/code&gt;&lt;/a&gt;, or one of the &lt;a href=&quot;atomic/index&quot;&gt;&lt;code&gt;Atomic&lt;/code&gt;&lt;/a&gt; types.</source>
          <target state="translated">Rustの共有参照はデフォルトで変更を許可しません &lt;code&gt;Arc&lt;/code&gt; も例外ではありません。通常、 &lt;code&gt;Arc&lt;/code&gt; 内の何かへの変更可能な参照を取得することはできません。 &lt;code&gt;Arc&lt;/code&gt; を使用して変更する必要がある場合は、&lt;a href=&quot;struct.mutex&quot;&gt; &lt;code&gt;Mutex&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;struct.rwlock&quot;&gt; &lt;code&gt;RwLock&lt;/code&gt; &lt;/a&gt;、または&lt;a href=&quot;atomic/index&quot;&gt; &lt;code&gt;Atomic&lt;/code&gt; &lt;/a&gt;タイプのいずれかを使用します。</target>
        </trans-unit>
        <trans-unit id="593db75233f83bf705ba47b80f89e77132b687a9" translate="yes" xml:space="preserve">
          <source>Shared usage:</source>
          <target state="translated">共有使用。</target>
        </trans-unit>
        <trans-unit id="673382c3c69cfed5a7912b68d101e6192c783dc6" translate="yes" xml:space="preserve">
          <source>Shared-State Concurrency</source>
          <target state="translated">共有状態同時実行</target>
        </trans-unit>
        <trans-unit id="6169a2056c60b167b8282bd75cdfe59b58d65bd5" translate="yes" xml:space="preserve">
          <source>Sharing a &lt;code id=&quot;sharing-a-mutext-between-multiple-threads&quot;&gt;Mutex&amp;lt;T&amp;gt;&lt;/code&gt; Between Multiple Threads</source>
          <target state="translated">複数のスレッド間での &lt;code id=&quot;sharing-a-mutext-between-multiple-threads&quot;&gt;Mutex&amp;lt;T&amp;gt;&lt;/code&gt; 共有</target>
        </trans-unit>
        <trans-unit id="324a15157bab42e3c53455c8f61c8f20832b2737" translate="yes" xml:space="preserve">
          <source>Sharing a mutable &lt;a href=&quot;atomic/struct.atomicusize&quot;&gt;&lt;code&gt;AtomicUsize&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">変更可能な&lt;a href=&quot;atomic/struct.atomicusize&quot;&gt; &lt;code&gt;AtomicUsize&lt;/code&gt; の&lt;/a&gt;共有：</target>
        </trans-unit>
        <trans-unit id="82f15567a2685045ef8f40616c2d3738ec734a12" translate="yes" xml:space="preserve">
          <source>Sharing code with Cargo and &lt;a href=&quot;https://crates.io/&quot;&gt;crates.io&lt;/a&gt; is part of what makes the Rust ecosystem useful for many different tasks. Rust&amp;rsquo;s standard library is small and stable, but crates are easy to share, use, and improve on a timeline different from that of the language. Don&amp;rsquo;t be shy about sharing code that&amp;rsquo;s useful to you on &lt;a href=&quot;https://crates.io/&quot;&gt;crates.io&lt;/a&gt;; it&amp;rsquo;s likely that it will be useful to someone else as well!</source>
          <target state="translated">Cargoや&lt;a href=&quot;https://crates.io/&quot;&gt;crates.io&lt;/a&gt;とコードを共有することは、Rustエコシステムをさまざまなタスクに役立てる要素の1つです。Rustの標準ライブラリは小さくて安定していますが、クレートは、言語とは異なるタイムラインで簡単に共有、使用、改善できます。&lt;a href=&quot;https://crates.io/&quot;&gt;crates.ioで&lt;/a&gt;役立つコードを共有することをためらわないでください。他の人にも役立つ可能性があります！</target>
        </trans-unit>
        <trans-unit id="67f17a5330dc55e4e9b3e034e07a772f7a33d885" translate="yes" xml:space="preserve">
          <source>Sharing some immutable data between threads:</source>
          <target state="translated">スレッド間でいくつかの不変データを共有します。</target>
        </trans-unit>
        <trans-unit id="a73b9d910499d7e9122df15ec6a61f388b0cf770" translate="yes" xml:space="preserve">
          <source>Shift Left assignment</source>
          <target state="translated">シフト左の割り当て</target>
        </trans-unit>
        <trans-unit id="9644be9a65880acda2805fe590f041d97c6eb267" translate="yes" xml:space="preserve">
          <source>Shifts self left by &lt;code&gt;rhs&lt;/code&gt; bits.</source>
          <target state="translated">自己を &lt;code&gt;rhs&lt;/code&gt; ビットだけ左にシフトします。</target>
        </trans-unit>
        <trans-unit id="ad4f0f48c2b3202d71235b86b5a91bf878ce3107" translate="yes" xml:space="preserve">
          <source>Shifts self right by &lt;code&gt;rhs&lt;/code&gt; bits.</source>
          <target state="translated">自己を &lt;code&gt;rhs&lt;/code&gt; ビットだけ右にシフトします。</target>
        </trans-unit>
        <trans-unit id="11e010168669b1cf7287a7252ba46dd7f3818df3" translate="yes" xml:space="preserve">
          <source>Shifts the bits to the left by a specified amount, &lt;code&gt;n&lt;/code&gt;, wrapping the truncated bits to the end of the resulting integer.</source>
          <target state="translated">指定された量 &lt;code&gt;n&lt;/code&gt; だけビットを左にシフトし、切り捨てられたビットを結果の整数の最後にラップします。</target>
        </trans-unit>
        <trans-unit id="5ac204c3b620b0da07df3a3a93bbbd9881603f4b" translate="yes" xml:space="preserve">
          <source>Shifts the bits to the right by a specified amount, &lt;code&gt;n&lt;/code&gt;, wrapping the truncated bits to the beginning of the resulting integer.</source>
          <target state="translated">指定された量 &lt;code&gt;n&lt;/code&gt; だけビットを右にシフトし、切り捨てられたビットを結果の整数の先頭にラップします。</target>
        </trans-unit>
        <trans-unit id="68dd94e15896ac518c15a989512e222f2ef6a32f" translate="yes" xml:space="preserve">
          <source>Shl</source>
          <target state="translated">Shl</target>
        </trans-unit>
        <trans-unit id="b4f7133227be359658e629e21e4d7212dd4c6630" translate="yes" xml:space="preserve">
          <source>Shl::shl</source>
          <target state="translated">Shl::shl</target>
        </trans-unit>
        <trans-unit id="fab36f0e94913cb82274aa118d6cd8b1cd309b24" translate="yes" xml:space="preserve">
          <source>ShlAssign</source>
          <target state="translated">ShlAssign</target>
        </trans-unit>
        <trans-unit id="187e5103f590efc111bcc28a740cf12d609481a8" translate="yes" xml:space="preserve">
          <source>ShlAssign::shl_assign</source>
          <target state="translated">ShlAssign::shl_assign</target>
        </trans-unit>
        <trans-unit id="08b4fdcfec7317f43094a61220b3895b503d45ba" translate="yes" xml:space="preserve">
          <source>ShlEq</source>
          <target state="translated">ShlEq</target>
        </trans-unit>
        <trans-unit id="970d3edc8ee6484f10b0dc33454ed8b18f501c9c" translate="yes" xml:space="preserve">
          <source>Short-circuiting:</source>
          <target state="translated">Short-circuiting:</target>
        </trans-unit>
        <trans-unit id="8ef804f3bc9be06d2d21c37f5a5cbf91e14b9120" translate="yes" xml:space="preserve">
          <source>Shortcuts for Panic on Error: &lt;code id=&quot;shortcuts-for-panic-on-error-unwrap-and-expect&quot;&gt;unwrap&lt;/code&gt; and &lt;code&gt;expect&lt;/code&gt;</source>
          <target state="translated">エラー時のパニックのショートカット： &lt;code id=&quot;shortcuts-for-panic-on-error-unwrap-and-expect&quot;&gt;unwrap&lt;/code&gt; して &lt;code&gt;expect&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1519ba7b83f7f3dff24c0cd12128ef5a8f8e5854" translate="yes" xml:space="preserve">
          <source>Shortens the &lt;code&gt;VecDeque&lt;/code&gt;, dropping excess elements from the back.</source>
          <target state="translated">短縮 &lt;code&gt;VecDeque&lt;/code&gt; が戻ってから余分な要素を落とし、。</target>
        </trans-unit>
        <trans-unit id="fbcf2a3caecdc661be199d600355577ff28f4f06" translate="yes" xml:space="preserve">
          <source>Shortens the vector, keeping the first &lt;code&gt;len&lt;/code&gt; elements and dropping the rest.</source>
          <target state="translated">最初の &lt;code&gt;len&lt;/code&gt; 個の要素を保持し、残りを削除して、ベクトルを短くします。</target>
        </trans-unit>
        <trans-unit id="ddd2f2ef3c60685bbea8a983f9758868186426bf" translate="yes" xml:space="preserve">
          <source>Shortens this &lt;code&gt;String&lt;/code&gt; to the specified length.</source>
          <target state="translated">この &lt;code&gt;String&lt;/code&gt; を指定された長さに短縮します。</target>
        </trans-unit>
        <trans-unit id="5433cd73ac014316d0b32695693eab5029601309" translate="yes" xml:space="preserve">
          <source>Shorthand</source>
          <target state="translated">Shorthand</target>
        </trans-unit>
        <trans-unit id="cc23e4ff4c1d8e274c5ed8343ec98d723d9f8289" translate="yes" xml:space="preserve">
          <source>Shorthand syntax can be used without specifying a type, which have the following equivalents:</source>
          <target state="translated">型を指定しなくても短縮構文を使用することができ、以下のような同等のものがあります。</target>
        </trans-unit>
        <trans-unit id="3b952e9b07b3fe0b117ef7067ea04f65566f57e1" translate="yes" xml:space="preserve">
          <source>Shouldn't you fix the old borrow checker?</source>
          <target state="translated">古い借金チェッカーを直すべきでは?</target>
        </trans-unit>
        <trans-unit id="ae48efbc4001279fcd3b5db13e51b3c64358a064" translate="yes" xml:space="preserve">
          <source>Showing Function Output</source>
          <target state="translated">関数出力の表示</target>
        </trans-unit>
        <trans-unit id="dd82155a8b68da09dce5b73bc5ba683be2a2e6bb" translate="yes" xml:space="preserve">
          <source>Shown above are the three typical forms an &lt;code&gt;if&lt;/code&gt; block comes in. First is the usual kind of thing you'd see in many languages, with an optional &lt;code&gt;else&lt;/code&gt; block. Second uses &lt;code&gt;if&lt;/code&gt; as an expression, which is only possible if all branches return the same type. An &lt;code&gt;if&lt;/code&gt; expression can be used everywhere you'd expect. The third kind of &lt;code&gt;if&lt;/code&gt; block is an &lt;code&gt;if let&lt;/code&gt; block, which behaves similarly to using a &lt;code&gt;match&lt;/code&gt; expression:</source>
          <target state="translated">上記に示すのは、 &lt;code&gt;if&lt;/code&gt; ブロックが入る3つの典型的な形式です。1つ目は、オプションの &lt;code&gt;else&lt;/code&gt; ブロックを使用して、多くの言語で表示される通常の種類のものです。次に、 &lt;code&gt;if&lt;/code&gt; を式として使用します。これは、すべてのブランチが同じタイプを返す場合にのみ可能です。 &lt;code&gt;if&lt;/code&gt; あなたが期待どこでも表現を使用することができます。3番目の種類の &lt;code&gt;if&lt;/code&gt; ブロックは &lt;code&gt;if let&lt;/code&gt; ブロックであり、 &lt;code&gt;match&lt;/code&gt; 式を使用する場合と同様に動作します。</target>
        </trans-unit>
        <trans-unit id="96b7fb4e78da868e0c9827ccb76f419e702be96d" translate="yes" xml:space="preserve">
          <source>Shr</source>
          <target state="translated">Shr</target>
        </trans-unit>
        <trans-unit id="f36c07d10a129025ed6f7de89f17c89f5fa79a78" translate="yes" xml:space="preserve">
          <source>Shr::shr</source>
          <target state="translated">Shr::shr</target>
        </trans-unit>
        <trans-unit id="3f1f217f4b2181edd79493260631c2539d4caaba" translate="yes" xml:space="preserve">
          <source>ShrAssign</source>
          <target state="translated">ShrAssign</target>
        </trans-unit>
        <trans-unit id="2255ac6ebcd241085e280eb2295078d441bdda79" translate="yes" xml:space="preserve">
          <source>ShrAssign::shr_assign</source>
          <target state="translated">ShrAssign::shr_assign</target>
        </trans-unit>
        <trans-unit id="182a6a62df03a168a7f6aa9aee943c5b1852df36" translate="yes" xml:space="preserve">
          <source>ShrEq</source>
          <target state="translated">ShrEq</target>
        </trans-unit>
        <trans-unit id="a2e8287961bf4d750e060a317afad9275baac758" translate="yes" xml:space="preserve">
          <source>Shrink or grow a block of memory to the given &lt;code&gt;new_size&lt;/code&gt;. The block is described by the given &lt;code&gt;ptr&lt;/code&gt; pointer and &lt;code&gt;layout&lt;/code&gt;.</source>
          <target state="translated">メモリブロックを指定された &lt;code&gt;new_size&lt;/code&gt; に縮小または拡張します。ブロックは、指定された &lt;code&gt;ptr&lt;/code&gt; ポインターと &lt;code&gt;layout&lt;/code&gt; によって記述されます。</target>
        </trans-unit>
        <trans-unit id="b4f3cd5485206277c6c062154ec892c9fa28a869" translate="yes" xml:space="preserve">
          <source>Shrink or grow a block of memory to the given &lt;code&gt;new_size&lt;/code&gt;. The block is described by the given &lt;code&gt;ptr&lt;/code&gt; pointer and &lt;code&gt;layout&lt;/code&gt;. &lt;a href=&quot;trait.globalalloc#method.realloc&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">メモリブロックを指定された &lt;code&gt;new_size&lt;/code&gt; に縮小または拡張します。ブロックは、指定された &lt;code&gt;ptr&lt;/code&gt; ポインターと &lt;code&gt;layout&lt;/code&gt; によって記述されます。&lt;a href=&quot;trait.globalalloc#method.realloc&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c20b48c0ee956dcfaa9d46479585794f19c8eebb" translate="yes" xml:space="preserve">
          <source>Shrinks the capacity of the &lt;code&gt;OsString&lt;/code&gt; to match its length.</source>
          <target state="translated">&lt;code&gt;OsString&lt;/code&gt; の容量を縮小して、長さに合わせます。</target>
        </trans-unit>
        <trans-unit id="1efdcc127416c637cab6f872bfd7932d82d4f999" translate="yes" xml:space="preserve">
          <source>Shrinks the capacity of the &lt;code&gt;OsString&lt;/code&gt; with a lower bound.</source>
          <target state="translated">&lt;code&gt;OsString&lt;/code&gt; の容量を下限で縮小します。</target>
        </trans-unit>
        <trans-unit id="5375857e16ae324dfb1997e42702f7399cf86d21" translate="yes" xml:space="preserve">
          <source>Shrinks the capacity of the &lt;code&gt;VecDeque&lt;/code&gt; as much as possible.</source>
          <target state="translated">&lt;code&gt;VecDeque&lt;/code&gt; の容量を可能な限り縮小します。</target>
        </trans-unit>
        <trans-unit id="cf5ab0cc658b57dad7fbe1c6d97a13265747811a" translate="yes" xml:space="preserve">
          <source>Shrinks the capacity of the &lt;code&gt;VecDeque&lt;/code&gt; with a lower bound.</source>
          <target state="translated">&lt;code&gt;VecDeque&lt;/code&gt; の容量を下限で縮小します。</target>
        </trans-unit>
        <trans-unit id="f7e75e702aa678b2c8afd319c5f7d6e708e14fc4" translate="yes" xml:space="preserve">
          <source>Shrinks the capacity of the map as much as possible. It will drop down as much as possible while maintaining the internal rules and possibly leaving some space in accordance with the resize policy.</source>
          <target state="translated">マップの容量を可能な限り縮小します。内部ルールを維持しつつ、リサイズポリシーに合わせてスペースを残すこともありますが、可能な限り縮小されます。</target>
        </trans-unit>
        <trans-unit id="a73d69b53df9ccbc822b8b0d7db2eb53f35372a9" translate="yes" xml:space="preserve">
          <source>Shrinks the capacity of the map with a lower limit. It will drop down no lower than the supplied limit while maintaining the internal rules and possibly leaving some space in accordance with the resize policy.</source>
          <target state="translated">マップの容量を下限値で縮小します。内部ルールを維持しつつ、リサイズポリシーに従ってスペースを残すこともありますが、指定された制限値よりも低くなることはありません。</target>
        </trans-unit>
        <trans-unit id="f6a7222c172a077d372006fe5331fabe3d3a3bb9" translate="yes" xml:space="preserve">
          <source>Shrinks the capacity of the set as much as possible. It will drop down as much as possible while maintaining the internal rules and possibly leaving some space in accordance with the resize policy.</source>
          <target state="translated">セットの容量を可能な限り縮小します。内部ルールを維持しつつ、リサイズポリシーに合わせてある程度のスペースを残しつつ、可能な限り縮小します。</target>
        </trans-unit>
        <trans-unit id="41858f7da9677542d00322810b88fc317754e30d" translate="yes" xml:space="preserve">
          <source>Shrinks the capacity of the set with a lower limit. It will drop down no lower than the supplied limit while maintaining the internal rules and possibly leaving some space in accordance with the resize policy.</source>
          <target state="translated">セットの容量を下限値で縮小します。内部ルールを維持しつつ、リサイズポリシーに沿って若干のスペースを残すこともありますが、与えられた制限値よりも下がらないように縮小されます。</target>
        </trans-unit>
        <trans-unit id="f2755abeb335e151fc605b5e1aa1b06db921994c" translate="yes" xml:space="preserve">
          <source>Shrinks the capacity of the vector as much as possible.</source>
          <target state="translated">ベクトルの容量を可能な限り縮小します。</target>
        </trans-unit>
        <trans-unit id="866f94bf32c3c6585c11a10955ec4880b640599a" translate="yes" xml:space="preserve">
          <source>Shrinks the capacity of the vector with a lower bound.</source>
          <target state="translated">ベクトルの容量を下界で縮小します。</target>
        </trans-unit>
        <trans-unit id="884255f5ec002cc73e9d4491a38d215fe85e8f07" translate="yes" xml:space="preserve">
          <source>Shrinks the capacity of this &lt;code&gt;String&lt;/code&gt; to match its length.</source>
          <target state="translated">この &lt;code&gt;String&lt;/code&gt; の容量をその長さに合わせて縮小します。</target>
        </trans-unit>
        <trans-unit id="7729558eff0a7d6641a344899c70cf2659a69f1c" translate="yes" xml:space="preserve">
          <source>Shrinks the capacity of this &lt;code&gt;String&lt;/code&gt; with a lower bound.</source>
          <target state="translated">この &lt;code&gt;String&lt;/code&gt; の容量を下限で縮小します。</target>
        </trans-unit>
        <trans-unit id="f16273e2258552ff78d0e39e1cd8d789c334fb49" translate="yes" xml:space="preserve">
          <source>Shut down the read, write, or both halves of this connection.</source>
          <target state="translated">この接続の読み取り、書き込み、またはその両方をシャットダウンします。</target>
        </trans-unit>
        <trans-unit id="7fddb7d8d1d60b1eeefa9af01082e0811d4b484d" translate="yes" xml:space="preserve">
          <source>Shutdown</source>
          <target state="translated">Shutdown</target>
        </trans-unit>
        <trans-unit id="fabfdc53cc8b2f529866f21ba7c330d11cb0d9e3" translate="yes" xml:space="preserve">
          <source>Shutdown::borrow</source>
          <target state="translated">Shutdown::borrow</target>
        </trans-unit>
        <trans-unit id="5a9c75f496ce5fe9fb60bc9bcf25af7721cda69e" translate="yes" xml:space="preserve">
          <source>Shutdown::borrow_mut</source>
          <target state="translated">Shutdown::borrow_mut</target>
        </trans-unit>
        <trans-unit id="7f592764c49224c545a0438c226f21d982d4c009" translate="yes" xml:space="preserve">
          <source>Shutdown::clone</source>
          <target state="translated">Shutdown::clone</target>
        </trans-unit>
        <trans-unit id="e36a6bb7a2896af9fd3bebae97a483df5b95a5f7" translate="yes" xml:space="preserve">
          <source>Shutdown::clone_from</source>
          <target state="translated">Shutdown::clone_from</target>
        </trans-unit>
        <trans-unit id="a45f057caba64efa0a9d4675e1c38314b625f074" translate="yes" xml:space="preserve">
          <source>Shutdown::clone_into</source>
          <target state="translated">Shutdown::clone_into</target>
        </trans-unit>
        <trans-unit id="d813e9bf46e7c81fc5799513f15d5397083ba019" translate="yes" xml:space="preserve">
          <source>Shutdown::eq</source>
          <target state="translated">Shutdown::eq</target>
        </trans-unit>
        <trans-unit id="e80f887be13571a33861afe3c0e47bb311b6f4c9" translate="yes" xml:space="preserve">
          <source>Shutdown::fmt</source>
          <target state="translated">Shutdown::fmt</target>
        </trans-unit>
        <trans-unit id="4a8fa437b5bb408022ca927b5a21b3e3ae6559e4" translate="yes" xml:space="preserve">
          <source>Shutdown::from</source>
          <target state="translated">Shutdown::from</target>
        </trans-unit>
        <trans-unit id="f19f6cd7ccdb5181c93271062d07ff63717634e0" translate="yes" xml:space="preserve">
          <source>Shutdown::into</source>
          <target state="translated">Shutdown::into</target>
        </trans-unit>
        <trans-unit id="adbe53901f9e868771630cf338a14fad559e4103" translate="yes" xml:space="preserve">
          <source>Shutdown::ne</source>
          <target state="translated">Shutdown::ne</target>
        </trans-unit>
        <trans-unit id="a19a47443edf4ef55ec746d90cb8acc1aa93a945" translate="yes" xml:space="preserve">
          <source>Shutdown::to_owned</source>
          <target state="translated">Shutdown::to_owned</target>
        </trans-unit>
        <trans-unit id="8323a24a68d991e914c3f3df7846d2d7061b5328" translate="yes" xml:space="preserve">
          <source>Shutdown::try_from</source>
          <target state="translated">Shutdown::try_from</target>
        </trans-unit>
        <trans-unit id="16444bbdd0bcc5aef40242a6445faf40136e6cf5" translate="yes" xml:space="preserve">
          <source>Shutdown::try_into</source>
          <target state="translated">Shutdown::try_into</target>
        </trans-unit>
        <trans-unit id="4349539edfc1eb706cb0a1b24d07db1a042d53a3" translate="yes" xml:space="preserve">
          <source>Shutdown::type_id</source>
          <target state="translated">Shutdown::type_id</target>
        </trans-unit>
        <trans-unit id="77317819ad1195b76b8414b5deebf1e238ce5a9c" translate="yes" xml:space="preserve">
          <source>Shuts down the read, write, or both halves of this connection.</source>
          <target state="translated">この接続の読み取り、書き込み、またはその両方をシャットダウンします。</target>
        </trans-unit>
        <trans-unit id="ac15b088947f5be00e8e8573eba4c4a716935fa1" translate="yes" xml:space="preserve">
          <source>Sign/&lt;code&gt;#&lt;/code&gt;/&lt;code&gt;0&lt;/code&gt;</source>
          <target state="translated">Sign/&lt;code&gt;#&lt;/code&gt;/&lt;code&gt;0&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ed1f48fc84cca9ffbe6a5cc1d6f3512080246462" translate="yes" xml:space="preserve">
          <source>Signaling to the Threads to Stop Listening for Jobs</source>
          <target state="translated">求人情報を聞くのをやめるためのスレッドへの合図</target>
        </trans-unit>
        <trans-unit id="1873c23eef44d368cb455909e4c7bf540ce35eef" translate="yes" xml:space="preserve">
          <source>Signals the processor that it is entering a busy-wait spin-loop.</source>
          <target state="translated">プロセッサがビジーウェイトスピンループに入ったことを通知します。</target>
        </trans-unit>
        <trans-unit id="6e3665d85fde70112ccec1bb287428d4fd142fcc" translate="yes" xml:space="preserve">
          <source>Signed</source>
          <target state="translated">Signed</target>
        </trans-unit>
        <trans-unit id="bbc2b0c702b08dd5d5de05934c9988f7f0eff014" translate="yes" xml:space="preserve">
          <source>Significantly, closure expressions &lt;em&gt;capture their environment&lt;/em&gt;, which regular &lt;a href=&quot;../items/functions&quot;&gt;function definitions&lt;/a&gt; do not. Without the &lt;code&gt;move&lt;/code&gt; keyword, the closure expression &lt;a href=&quot;../types/closure#capture-modes&quot;&gt;infers how it captures each variable from its environment&lt;/a&gt;, preferring to capture by shared reference, effectively borrowing all outer variables mentioned inside the closure's body. If needed the compiler will infer that instead mutable references should be taken, or that the values should be moved or copied (depending on their type) from the environment. A closure can be forced to capture its environment by copying or moving values by prefixing it with the &lt;code&gt;move&lt;/code&gt; keyword. This is often used to ensure that the closure's type is &lt;code&gt;'static&lt;/code&gt;.</source>
          <target state="translated">重要なことに、クロージャ式&lt;em&gt;はそれらの環境をキャプチャしますが&lt;/em&gt;、通常の&lt;a href=&quot;../items/functions&quot;&gt;関数定義&lt;/a&gt;は&lt;em&gt;キャプチャし&lt;/em&gt;ません。 &lt;code&gt;move&lt;/code&gt; キーワードがない場合、クロージャ式&lt;a href=&quot;../types/closure#capture-modes&quot;&gt;は、環境から各変数をキャプチャする方法を推測し&lt;/a&gt;、共有参照によるキャプチャを優先して、クロージャの本体内で言及されているすべての外部変数を効果的に借用します。必要に応じて、コンパイラーは代わりに変更可能な参照を取得する必要がある、または値を環境から（タイプに応じて）移動またはコピーする必要があると推測します。 &lt;code&gt;move&lt;/code&gt; キーワードを接頭辞として値をコピーまたは移動することにより、クロージャは環境を強制的に取得できます。これは、クロージャのタイプが &lt;code&gt;'static&lt;/code&gt; あることを保証するためによく使用されます。</target>
        </trans-unit>
        <trans-unit id="a3a265e9f838485e31901511e6f2045135b0cce6" translate="yes" xml:space="preserve">
          <source>Similar in construction to &lt;code&gt;if let&lt;/code&gt;, the &lt;code&gt;while let&lt;/code&gt; conditional loop allows a &lt;code&gt;while&lt;/code&gt; loop to run for as long as a pattern continues to match. The example in Listing 18-2 shows a &lt;code&gt;while let&lt;/code&gt; loop that uses a vector as a stack and prints the values in the vector in the opposite order in which they were pushed.</source>
          <target state="translated">&lt;code&gt;if let&lt;/code&gt; と構造が似ていますが、 &lt;code&gt;while let&lt;/code&gt; 条件付きループでは、パターンが一致し続ける限り、 &lt;code&gt;while&lt;/code&gt; ループを実行できます。リスト18-2の例は、ベクターをスタックとして使用し、プッシュされた順序とは逆の順序でベクターの値を出力する &lt;code&gt;while let&lt;/code&gt; ループを示しています。</target>
        </trans-unit>
        <trans-unit id="64ae3c66d57a2a6b39e286d0598b2a92f6754d01" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;../../../io/trait.read#method.read_exact&quot;&gt;&lt;code&gt;Read::read_exact&lt;/code&gt;&lt;/a&gt; but uses &lt;a href=&quot;#tymethod.read_at&quot;&gt;&lt;code&gt;read_at&lt;/code&gt;&lt;/a&gt; instead of &lt;code&gt;read&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../../io/trait.read#method.read_exact&quot;&gt; &lt;code&gt;Read::read_exact&lt;/code&gt; &lt;/a&gt;似ていますが、&lt;a href=&quot;#tymethod.read_at&quot;&gt; &lt;code&gt;read_at&lt;/code&gt; &lt;/a&gt;ではなくread_atを使用し &lt;code&gt;read&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="edd67ee22ad5d982cd10f26e69756d73303d48b2" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt;, &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; is only for use in single-threaded scenarios and will give you a compile-time error if you try using it in a multithreaded context. We&amp;rsquo;ll talk about how to get the functionality of &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; in a multithreaded program in Chapter 16.</source>
          <target state="translated">&lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; と同様に、 &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; はシングルスレッドシナリオでのみ使用でき、マルチスレッドコンテキストで使用しようとするとコンパイル時エラーが発生します。第16章では、マルチスレッドプログラムで &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; 機能を取得する方法について説明します。</target>
        </trans-unit>
        <trans-unit id="4994bf8a405f841ed46d5b238330129c5daee3e1" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;request_review&lt;/code&gt;, if we call the &lt;code&gt;approve&lt;/code&gt; method on a &lt;code&gt;Draft&lt;/code&gt;, it will have no effect because it will return &lt;code&gt;self&lt;/code&gt;. When we call &lt;code&gt;approve&lt;/code&gt; on &lt;code&gt;PendingReview&lt;/code&gt;, it returns a new, boxed instance of the &lt;code&gt;Published&lt;/code&gt; struct. The &lt;code&gt;Published&lt;/code&gt; struct implements the &lt;code&gt;State&lt;/code&gt; trait, and for both the &lt;code&gt;request_review&lt;/code&gt; method and the &lt;code&gt;approve&lt;/code&gt; method, it returns itself, because the post should stay in the &lt;code&gt;Published&lt;/code&gt; state in those cases.</source>
          <target state="translated">&lt;code&gt;request_review&lt;/code&gt; と同様に、 &lt;code&gt;Draft&lt;/code&gt; で &lt;code&gt;approve&lt;/code&gt; メソッドを呼び出しても、 &lt;code&gt;self&lt;/code&gt; を返すため、何の効果もありません。私たちが呼び出すと &lt;code&gt;approve&lt;/code&gt; に &lt;code&gt;PendingReview&lt;/code&gt; 、それは新しい、箱入りインスタンスを返し &lt;code&gt;Published&lt;/code&gt; 構造体を。 &lt;code&gt;Published&lt;/code&gt; 構造体の実装 &lt;code&gt;State&lt;/code&gt; 特性、および両方のための &lt;code&gt;request_review&lt;/code&gt; の方法および &lt;code&gt;approve&lt;/code&gt; 後にはに滞在する必要があるので、それは、自分自身を返し、メソッドを &lt;code&gt;Published&lt;/code&gt; これらのケースで状態。</target>
        </trans-unit>
        <trans-unit id="88e10b6c2ce7d024990190fdfd83529adab1128c" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;uid&lt;/code&gt;, but sets the group ID of the child process. This has the same semantics as the &lt;code&gt;uid&lt;/code&gt; field.</source>
          <target state="translated">&lt;code&gt;uid&lt;/code&gt; に似ていますが、子プロセスのグループIDを設定します。これは、 &lt;code&gt;uid&lt;/code&gt; フィールドと同じセマンティクスを持っています。</target>
        </trans-unit>
        <trans-unit id="4e3696cd516232fdd3724614c9f05eedaa21b3e4" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;uid&lt;/code&gt;, but sets the group ID of the child process. This has the same semantics as the &lt;code&gt;uid&lt;/code&gt; field. &lt;a href=&quot;../os/unix/process/trait.commandext#tymethod.gid&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;uid&lt;/code&gt; に似ていますが、子プロセスのグループIDを設定します。これは、 &lt;code&gt;uid&lt;/code&gt; フィールドと同じセマンティクスを持っています。&lt;a href=&quot;../os/unix/process/trait.commandext#tymethod.gid&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f4bd1c5d39c2240e3d2e352bf6eab674bdb7120d" translate="yes" xml:space="preserve">
          <source>Similar to how we used test-driven development in the project in Chapter 12, we&amp;rsquo;ll use compiler-driven development here. We&amp;rsquo;ll write the code that calls the functions we want, and then we&amp;rsquo;ll look at errors from the compiler to determine what we should change next to get the code to work.</source>
          <target state="translated">第12章のプロジェクトでテスト駆動開発を使用した方法と同様に、ここではコンパイラ駆動開発を使用します。必要な関数を呼び出すコードを記述してから、コンパイラーのエラーを調べて、コードを機能させるために次に何を変更する必要があるかを判断します。</target>
        </trans-unit>
        <trans-unit id="a44c70a0afcab0a2cb8b8b5e6459531560f406d9" translate="yes" xml:space="preserve">
          <source>Similar to how you use the &lt;code&gt;Deref&lt;/code&gt; trait to override the &lt;code&gt;*&lt;/code&gt; operator on immutable references, you can use the &lt;code&gt;DerefMut&lt;/code&gt; trait to override the &lt;code&gt;*&lt;/code&gt; operator on mutable references.</source>
          <target state="translated">あなたが使用する方法と同様に &lt;code&gt;Deref&lt;/code&gt; 上書きする形質を &lt;code&gt;*&lt;/code&gt; 不変の参照にオペレータを、あなたが使用することができます &lt;code&gt;DerefMut&lt;/code&gt; 上書きする形質を &lt;code&gt;*&lt;/code&gt; 変更可能な参照にオペレータを。</target>
        </trans-unit>
        <trans-unit id="07b70f124a730d4cd85b8e804701685c3f75301d" translate="yes" xml:space="preserve">
          <source>Similar to the way a function takes parameters with unknown values to run the same code on multiple concrete values, functions can take parameters of some generic type instead of a concrete type, like &lt;code&gt;i32&lt;/code&gt; or &lt;code&gt;String&lt;/code&gt;. In fact, we&amp;rsquo;ve already used generics in Chapter 6 with &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt;, Chapter 8 with &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; and &lt;code&gt;HashMap&amp;lt;K, V&amp;gt;&lt;/code&gt;, and Chapter 9 with &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt;. In this chapter, you&amp;rsquo;ll explore how to define your own types, functions, and methods with generics!</source>
          <target state="translated">関数が未知の値を持つパラメーターを取り、複数の具象値に対して同じコードを実行するのと同様に、関数は &lt;code&gt;i32&lt;/code&gt; や &lt;code&gt;String&lt;/code&gt; などの具象型ではなく、いくつかのジェネリック型のパラメーターを受け取ることができます。実際、第6章では &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; 、第8章では &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; および &lt;code&gt;HashMap&amp;lt;K, V&amp;gt;&lt;/code&gt; 、第9章では &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt; ジェネリックをすでに使用しています。この章では、ジェネリックで独自の型、関数、メソッドを定義する方法を探ります。</target>
        </trans-unit>
        <trans-unit id="6e8f822081e736e94d313c98afa2efd044c3746e" translate="yes" xml:space="preserve">
          <source>Similarily, calling &lt;code&gt;Pin::new_unchecked&lt;/code&gt; on an &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; is unsafe because there could be aliases to the same data that are not subject to the pinning restrictions:</source>
          <target state="translated">&lt;code&gt;Pin::new_unchecked&lt;/code&gt; に、 &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; Pin :: new_uncheckedを呼び出すのは安全ではありません。同じデータへのエイリアスがあり、ピン留めの制約を受けない可能性があるためです。</target>
        </trans-unit>
        <trans-unit id="fc1608213ac13199c43c176b1bb1a0dafa112729" translate="yes" xml:space="preserve">
          <source>Similarities Between &lt;code id=&quot;similarities-between-refcelltrct-and-mutextarct&quot;&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt;/&lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; and &lt;code&gt;Mutex&amp;lt;T&amp;gt;&lt;/code&gt;/&lt;code&gt;Arc&amp;lt;T&amp;gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code id=&quot;similarities-between-refcelltrct-and-mutextarct&quot;&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; / &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; と &lt;code&gt;Mutex&amp;lt;T&amp;gt;&lt;/code&gt; / &lt;code&gt;Arc&amp;lt;T&amp;gt;&lt;/code&gt; 類似点</target>
        </trans-unit>
        <trans-unit id="c9732fced80440502cea1e483af3c96733c510ed" translate="yes" xml:space="preserve">
          <source>Similarly to how adding more unit test functions adds more result lines to the unit tests section, adding more test functions to the integration test file adds more result lines to this integration test file&amp;rsquo;s section. Each integration test file has its own section, so if we add more files in the &lt;em&gt;tests&lt;/em&gt; directory, there will be more integration test sections.</source>
          <target state="translated">単体テスト関数を追加すると、ユニットテストセクションに結果行が追加されるのと同様に、統合テストファイルにテスト関数を追加すると、この統合テストファイルのセクションに結果行が追加されます。各統合テストファイルには独自のセクションがあるため、&lt;em&gt;tests&lt;/em&gt;ディレクトリにさらにファイルを追加すると、統合テストセクションが多くなります。</target>
        </trans-unit>
        <trans-unit id="5b862eb4b9399982687d0163ad488253ccdc9958" translate="yes" xml:space="preserve">
          <source>Similarly, &lt;a href=&quot;../../../ffi/struct.osstr&quot;&gt;&lt;code&gt;OsStr&lt;/code&gt;&lt;/a&gt; is the Rust wrapper for borrowed strings from preferred representation of the operating system. On Windows, the &lt;a href=&quot;trait.osstrext&quot;&gt;&lt;code&gt;OsStrExt&lt;/code&gt;&lt;/a&gt; trait provides the &lt;a href=&quot;trait.osstrext#tymethod.encode_wide&quot;&gt;&lt;code&gt;encode_wide&lt;/code&gt;&lt;/a&gt; method, which outputs an &lt;a href=&quot;struct.encodewide&quot;&gt;&lt;code&gt;EncodeWide&lt;/code&gt;&lt;/a&gt; iterator. You can &lt;a href=&quot;../../../iter/trait.iterator#method.collect&quot;&gt;&lt;code&gt;collect&lt;/code&gt;&lt;/a&gt; this iterator, for example, to obtain a &lt;code&gt;Vec&amp;lt;u16&amp;gt;&lt;/code&gt;; you can later get a pointer to this vector's contents and feed it to Windows APIs.</source>
          <target state="translated">同様に、&lt;a href=&quot;../../../ffi/struct.osstr&quot;&gt; &lt;code&gt;OsStr&lt;/code&gt; &lt;/a&gt;は、オペレーティングシステムの優先表現から借用した文字列のRustラッパーです。Windowsでは、&lt;a href=&quot;trait.osstrext&quot;&gt; &lt;code&gt;OsStrExt&lt;/code&gt; の&lt;/a&gt;特色は、提供&lt;a href=&quot;trait.osstrext#tymethod.encode_wide&quot;&gt; &lt;code&gt;encode_wide&lt;/code&gt; の&lt;/a&gt;出力方法、&lt;a href=&quot;struct.encodewide&quot;&gt; &lt;code&gt;EncodeWide&lt;/code&gt; の&lt;/a&gt;イテレータを。たとえば、このイテレータを&lt;a href=&quot;../../../iter/trait.iterator#method.collect&quot;&gt; &lt;code&gt;collect&lt;/code&gt; &lt;/a&gt;て &lt;code&gt;Vec&amp;lt;u16&amp;gt;&lt;/code&gt; を取得できます。このベクターのコンテンツへのポインターを後で取得して、Windows APIにフィードできます。</target>
        </trans-unit>
        <trans-unit id="331d62920cf450c0aa7d5ef9d689f928128d9ddb" translate="yes" xml:space="preserve">
          <source>Similarly, entirely uninitialized memory may have any content, while a &lt;code&gt;bool&lt;/code&gt; must always be &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;. Hence, creating an uninitialized &lt;code&gt;bool&lt;/code&gt; is undefined behavior:</source>
          <target state="translated">同様に、完全に初期化されていないメモリにはコンテンツが含まれる可能性がありますが、 &lt;code&gt;bool&lt;/code&gt; は常に &lt;code&gt;true&lt;/code&gt; または &lt;code&gt;false&lt;/code&gt; でなければなりません。したがって、初期化されていない &lt;code&gt;bool&lt;/code&gt; を作成することは未定義の動作です：</target>
        </trans-unit>
        <trans-unit id="ed164c6b174ba78425b6e3b0cccce0c52c2d4a48" translate="yes" xml:space="preserve">
          <source>Similarly, for structs, match with &lt;code&gt;..&lt;/code&gt; to avoid this error.</source>
          <target state="translated">同様に、構造体の場合は、 &lt;code&gt;..&lt;/code&gt; と照合してこのエラーを回避します。</target>
        </trans-unit>
        <trans-unit id="bb8e5654df6f95ffc903dbcd643004ef73553391" translate="yes" xml:space="preserve">
          <source>Similarly, here is an example of calling supertrait methods on trait objects.</source>
          <target state="translated">同様に、ここでは trait オブジェクトに対して supertrait メソッドを呼び出す例を示します。</target>
        </trans-unit>
        <trans-unit id="7053a5d2b2cc9ee0f9baea0c0b8570f148cfc9b7" translate="yes" xml:space="preserve">
          <source>Similarly, the &lt;code&gt;unwrap&lt;/code&gt; and &lt;code&gt;expect&lt;/code&gt; methods are very handy when prototyping, before you&amp;rsquo;re ready to decide how to handle errors. They leave clear markers in your code for when you&amp;rsquo;re ready to make your program more robust.</source>
          <target state="translated">同様に、 &lt;code&gt;unwrap&lt;/code&gt; メソッドと &lt;code&gt;expect&lt;/code&gt; メソッドは、プロトタイピング時に、エラーの処理方法を決定する前に非常に便利です。プログラムをより堅牢にする準備ができたときのために、コードに明確なマーカーを残します。</target>
        </trans-unit>
        <trans-unit id="909815a68ff4f68cdf616f89894d91c5fbf5f80e" translate="yes" xml:space="preserve">
          <source>Similarly, the second arm matches any point on the &lt;code&gt;y&lt;/code&gt; axis by specifying that the &lt;code&gt;x&lt;/code&gt; field matches if its value is &lt;code&gt;0&lt;/code&gt; and creates a variable &lt;code&gt;y&lt;/code&gt; for the value of the &lt;code&gt;y&lt;/code&gt; field. The third arm doesn&amp;rsquo;t specify any literals, so it matches any other &lt;code&gt;Point&lt;/code&gt; and creates variables for both the &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; fields.</source>
          <target state="translated">同様に、2番目のアームは、値が &lt;code&gt;0&lt;/code&gt; の場合に &lt;code&gt;x&lt;/code&gt; フィールドが一致することを指定することにより、 &lt;code&gt;y&lt;/code&gt; 軸上の任意の点と一致し、 &lt;code&gt;y&lt;/code&gt; フィールドの値に対して変数 &lt;code&gt;y&lt;/code&gt; を作成します。3番目のアームはリテラルを指定しないため、他の &lt;code&gt;Point&lt;/code&gt; と一致し、 &lt;code&gt;x&lt;/code&gt; フィールドと &lt;code&gt;y&lt;/code&gt; フィールドの両方に変数を作成します。</target>
        </trans-unit>
        <trans-unit id="5da9bf3bc246d43649d642f7bf04333c4a2ee655" translate="yes" xml:space="preserve">
          <source>Similarly, this book does not usually document the specifics of &lt;code&gt;rustc&lt;/code&gt; as a tool or of Cargo. &lt;code&gt;rustc&lt;/code&gt; has its own &lt;a href=&quot;https://doc.rust-lang.org/rustc/index.html&quot;&gt;book&lt;/a&gt;. Cargo has a &lt;a href=&quot;https://doc.rust-lang.org/cargo/index.html&quot;&gt;book&lt;/a&gt; that contains a &lt;a href=&quot;https://doc.rust-lang.org/cargo/reference/index.html&quot;&gt;reference&lt;/a&gt;. There are a few pages such as &lt;a href=&quot;linkage&quot;&gt;linkage&lt;/a&gt; that still describe how &lt;code&gt;rustc&lt;/code&gt; works.</source>
          <target state="translated">同様に、この本は通常、ツールとしての &lt;code&gt;rustc&lt;/code&gt; やCargoの詳細を文書化していません。 &lt;code&gt;rustc&lt;/code&gt; には独自の&lt;a href=&quot;https://doc.rust-lang.org/rustc/index.html&quot;&gt;本があり&lt;/a&gt;ます。貨物には、&lt;a href=&quot;https://doc.rust-lang.org/cargo/reference/index.html&quot;&gt;参考文献&lt;/a&gt;を含む&lt;a href=&quot;https://doc.rust-lang.org/cargo/index.html&quot;&gt;本&lt;/a&gt;があります。 &lt;code&gt;rustc&lt;/code&gt; がどのように機能するかを説明している&lt;a href=&quot;linkage&quot;&gt;リンケージ&lt;/a&gt;などのページがいくつかあります。</target>
        </trans-unit>
        <trans-unit id="2bd04063dfceec281f5e4d66a8b58a68fc14c509" translate="yes" xml:space="preserve">
          <source>Similarly, you can call builder methods after spawning a process and then spawn a new process with the modified settings.</source>
          <target state="translated">同様に、プロセスをスポーンした後にビルダーメソッドを呼び出し、変更した設定で新しいプロセスをスポーンすることができます。</target>
        </trans-unit>
        <trans-unit id="6d9ea6b63528572b56d731de1e5520f39fc27921" translate="yes" xml:space="preserve">
          <source>Simple Paths</source>
          <target state="translated">シンプルなパス</target>
        </trans-unit>
        <trans-unit id="5c152b8373cb9fabbb581e0ae99f8530d663375b" translate="yes" xml:space="preserve">
          <source>Simple and safe type conversions that may fail in a controlled way under some circumstances. It is the reciprocal of &lt;a href=&quot;trait.tryinto&quot;&gt;&lt;code&gt;TryInto&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">状況によっては制御された方法で失敗する可能性がある単純で安全な型変換。これは、&lt;a href=&quot;trait.tryinto&quot;&gt; &lt;code&gt;TryInto&lt;/code&gt; &lt;/a&gt;の逆です。</target>
        </trans-unit>
        <trans-unit id="1eab99ad89fb7c87259173deb7be33f807b20b8a" translate="yes" xml:space="preserve">
          <source>Simple paths are used in &lt;a href=&quot;visibility-and-privacy&quot;&gt;visibility&lt;/a&gt; markers, &lt;a href=&quot;attributes&quot;&gt;attributes&lt;/a&gt;, &lt;a href=&quot;macros-by-example&quot;&gt;macros&lt;/a&gt;, and &lt;a href=&quot;items/use-declarations&quot;&gt;&lt;code&gt;use&lt;/code&gt;&lt;/a&gt; items. Examples:</source>
          <target state="translated">単純なパスは、&lt;a href=&quot;visibility-and-privacy&quot;&gt;可視性&lt;/a&gt;マーカー、&lt;a href=&quot;attributes&quot;&gt;属性&lt;/a&gt;、&lt;a href=&quot;macros-by-example&quot;&gt;マクロ&lt;/a&gt;、および&lt;a href=&quot;items/use-declarations&quot;&gt; &lt;code&gt;use&lt;/code&gt; &lt;/a&gt;アイテムで使用されます。例：</target>
        </trans-unit>
        <trans-unit id="d30ca8657f691b790156ae3e1eda88a721749a7f" translate="yes" xml:space="preserve">
          <source>Simple patterns:</source>
          <target state="translated">シンプルなパターン。</target>
        </trans-unit>
        <trans-unit id="f9e72abc4ccbeabab6d891f4fb04960cf410c43e" translate="yes" xml:space="preserve">
          <source>Simple usage</source>
          <target state="translated">簡単な使い方</target>
        </trans-unit>
        <trans-unit id="521b9cdb40aeee087c0baf82b63bf75e645545cd" translate="yes" xml:space="preserve">
          <source>Simple usage:</source>
          <target state="translated">シンプルな使い方。</target>
        </trans-unit>
        <trans-unit id="540febaa026e0c164b7b6c82435c094ba3f10d68" translate="yes" xml:space="preserve">
          <source>Simply put, a type &lt;code&gt;T&lt;/code&gt; implements &lt;code&gt;UnwindSafe&lt;/code&gt; if it cannot easily allow witnessing a broken invariant through the use of &lt;code&gt;catch_unwind&lt;/code&gt; (catching a panic). This trait is an auto trait, so it is automatically implemented for many types, and it is also structurally composed (e.g., a struct is unwind safe if all of its components are unwind safe).</source>
          <target state="translated">簡単に言うと、タイプ &lt;code&gt;T&lt;/code&gt; は、 &lt;code&gt;catch_unwind&lt;/code&gt; （パニックをキャッチ）を使用して壊れた不変条件を簡単に確認できない場合、 &lt;code&gt;UnwindSafe&lt;/code&gt; を実装します。このトレイトは自動トレイトなので、多くのタイプに対して自動的に実装され、構造的にも構成されます（たとえば、すべてのコンポーネントがアンワインドセーフの場合、構造体はアンワインドセーフです）。</target>
        </trans-unit>
        <trans-unit id="7c0fcb3a991c60765331a98cb1ff570fc3f074b7" translate="yes" xml:space="preserve">
          <source>Simulating a Slow Request in the Current Server Implementation</source>
          <target state="translated">現在のサーバー実装での遅いリクエストのシミュレーション</target>
        </trans-unit>
        <trans-unit id="1c95e390ae299ab0a4224d3333c97e6af7ae7eb5" translate="yes" xml:space="preserve">
          <source>Simultaneously binding a list of paths with a common prefix and their common parent module, using the &lt;code&gt;self&lt;/code&gt; keyword, such as &lt;code&gt;use a::b::{self, c, d::e};&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;use a::b::{self, c, d::e};&lt;/code&gt; などの &lt;code&gt;self&lt;/code&gt; キーワードを使用して、パスのリストに共通のプレフィックスとそれらの共通の親モジュールを同時にバインドします。</target>
        </trans-unit>
        <trans-unit id="bfb7386ffac3ad84f3f639dd029ef6518cae9303" translate="yes" xml:space="preserve">
          <source>Simultaneously binding a list of paths with a common prefix, using the glob-like brace syntax &lt;code&gt;use a::b::{c, d, e::f, g::h::i};&lt;/code&gt;</source>
          <target state="translated">globのようなブレース構文を &lt;code&gt;use a::b::{c, d, e::f, g::h::i};&lt;/code&gt; パスのリストに共通のプレフィックスを同時にバインドするには、a :: b :: {c、d、e :: f、g :: h :: i}を使用します。</target>
        </trans-unit>
        <trans-unit id="ddbdcfff59de6a5aac21219338aec3ba07afbdc5" translate="yes" xml:space="preserve">
          <source>Simultaneously computes the sine and cosine of the number, &lt;code&gt;x&lt;/code&gt;. Returns &lt;code&gt;(sin(x), cos(x))&lt;/code&gt;.</source>
          <target state="translated">数値 &lt;code&gt;x&lt;/code&gt; の正弦と余弦を同時に計算します。 &lt;code&gt;(sin(x), cos(x))&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="8c4638b0d965c7d35475023eaa850cf6607c84bf" translate="yes" xml:space="preserve">
          <source>Simultaneously waits for the child to exit and collect all remaining output on the stdout/stderr handles, returning an &lt;code&gt;Output&lt;/code&gt; instance.</source>
          <target state="translated">子が終了するのを同時に待機し、stdout / stderrハンドルの残りのすべての出力を収集して、 &lt;code&gt;Output&lt;/code&gt; インスタンスを返します。</target>
        </trans-unit>
        <trans-unit id="b580c75acd8a59ac52d76a587525a6d1f2ad2173" translate="yes" xml:space="preserve">
          <source>Since &lt;a href=&quot;../cell/struct.refcell&quot;&gt;&lt;code&gt;RefCell&lt;/code&gt;&lt;/a&gt; enforces the borrow rules at runtime, &lt;code&gt;drop&lt;/code&gt; can release a &lt;a href=&quot;../cell/struct.refcell&quot;&gt;&lt;code&gt;RefCell&lt;/code&gt;&lt;/a&gt; borrow:</source>
          <target state="translated">&lt;a href=&quot;../cell/struct.refcell&quot;&gt; &lt;code&gt;RefCell&lt;/code&gt; &lt;/a&gt;は実行時に借用規則を適用するため、 &lt;code&gt;drop&lt;/code&gt; は&lt;a href=&quot;../cell/struct.refcell&quot;&gt; &lt;code&gt;RefCell&lt;/code&gt; &lt;/a&gt;借用を解放できます。</target>
        </trans-unit>
        <trans-unit id="1c6dcce02f4add8169e3d2f77fc05356bfe10cc0" translate="yes" xml:space="preserve">
          <source>Since &lt;a href=&quot;trait.fnonce&quot;&gt;&lt;code&gt;FnOnce&lt;/code&gt;&lt;/a&gt; is a supertrait of &lt;code&gt;FnMut&lt;/code&gt;, any instance of &lt;code&gt;FnMut&lt;/code&gt; can be used where a &lt;a href=&quot;trait.fnonce&quot;&gt;&lt;code&gt;FnOnce&lt;/code&gt;&lt;/a&gt; is expected, and since &lt;a href=&quot;trait.fn&quot;&gt;&lt;code&gt;Fn&lt;/code&gt;&lt;/a&gt; is a subtrait of &lt;code&gt;FnMut&lt;/code&gt;, any instance of &lt;a href=&quot;trait.fn&quot;&gt;&lt;code&gt;Fn&lt;/code&gt;&lt;/a&gt; can be used where &lt;code&gt;FnMut&lt;/code&gt; is expected.</source>
          <target state="translated">以来&lt;a href=&quot;trait.fnonce&quot;&gt; &lt;code&gt;FnOnce&lt;/code&gt; で&lt;/a&gt;のsupertraitある &lt;code&gt;FnMut&lt;/code&gt; 、任意のインスタンス &lt;code&gt;FnMut&lt;/code&gt; をどこに使用することができる&lt;a href=&quot;trait.fnonce&quot;&gt; &lt;code&gt;FnOnce&lt;/code&gt; が&lt;/a&gt;期待され、そしてため&lt;a href=&quot;trait.fn&quot;&gt; &lt;code&gt;Fn&lt;/code&gt; は&lt;/a&gt;のsubtraitある &lt;code&gt;FnMut&lt;/code&gt; 、任意のインスタンス&lt;a href=&quot;trait.fn&quot;&gt; &lt;code&gt;Fn&lt;/code&gt; が&lt;/a&gt;ここで使用することができる &lt;code&gt;FnMut&lt;/code&gt; が期待されます。</target>
        </trans-unit>
        <trans-unit id="c26b94cb5b32aac4f4b274599dd1a658b6761ca7" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;!&lt;/code&gt; has no values, it has no default value either. It's true that we could write an &lt;code&gt;impl&lt;/code&gt; for this which simply panics, but the same is true for any type (we could &lt;code&gt;impl Default&lt;/code&gt; for (eg.) &lt;a href=&quot;fs/struct.file&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt; by just making &lt;a href=&quot;default/trait.default#tymethod.default&quot;&gt;&lt;code&gt;default()&lt;/code&gt;&lt;/a&gt; panic.)</source>
          <target state="translated">以来 &lt;code&gt;!&lt;/code&gt; 値はなく、デフォルト値もありません。単純にパニックするこのための &lt;code&gt;impl&lt;/code&gt; を書くことができるのは事実ですが、同じことがすべてのタイプに当てはまり&lt;a href=&quot;default/trait.default#tymethod.default&quot;&gt; &lt;code&gt;default()&lt;/code&gt; &lt;/a&gt;パニックするだけで、（たとえば）&lt;a href=&quot;fs/struct.file&quot;&gt; &lt;code&gt;File&lt;/code&gt; &lt;/a&gt; &lt;code&gt;impl Default&lt;/code&gt; を実装できます）。</target>
        </trans-unit>
        <trans-unit id="6538e8c17f8ab9a15a41a6c2b62591b4db139233" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;'static&lt;/code&gt; outlives the lifetime parameter &lt;code&gt;'a&lt;/code&gt;, &lt;code&gt;&amp;amp;'static str&lt;/code&gt; is a subtype of &lt;code&gt;&amp;amp;'a str&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;'static&lt;/code&gt; は存続期間パラメーター &lt;code&gt;'a&lt;/code&gt; 超えるので、 &lt;code&gt;&amp;amp;'static str&lt;/code&gt; は &lt;code&gt;&amp;amp;'a str&lt;/code&gt; サブタイプです。</target>
        </trans-unit>
        <trans-unit id="54da8d1cecd13aae6b43892c91292b5d0b233e7f" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;?&lt;/code&gt; represents at most one occurrence, it cannot be used with a separator.</source>
          <target state="translated">以来 &lt;code&gt;?&lt;/code&gt; 最大で1つのオカレンスを表し、セパレータと一緒に使用することはできません。</target>
        </trans-unit>
        <trans-unit id="c9806b12ce1093b7dae486d7b9b428620b9d39e1" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;Clone&lt;/code&gt; is more general than &lt;a href=&quot;../marker/trait.copy&quot;&gt;&lt;code&gt;Copy&lt;/code&gt;&lt;/a&gt;, you can automatically make anything &lt;a href=&quot;../marker/trait.copy&quot;&gt;&lt;code&gt;Copy&lt;/code&gt;&lt;/a&gt; be &lt;code&gt;Clone&lt;/code&gt; as well.</source>
          <target state="translated">以来 &lt;code&gt;Clone&lt;/code&gt; より一般的である&lt;a href=&quot;../marker/trait.copy&quot;&gt; &lt;code&gt;Copy&lt;/code&gt; &lt;/a&gt;、自動的に何でも作ることができます&lt;a href=&quot;../marker/trait.copy&quot;&gt; &lt;code&gt;Copy&lt;/code&gt; &lt;/a&gt;可能 &lt;code&gt;Clone&lt;/code&gt; にも。</target>
        </trans-unit>
        <trans-unit id="8e572576a02e098cf819824ba101e184709a2232" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;MyStruct&lt;/code&gt; is a type that is not marked &lt;code&gt;Copy&lt;/code&gt;, the data gets moved out of &lt;code&gt;x&lt;/code&gt; when we set &lt;code&gt;y&lt;/code&gt;. This is fundamental to Rust's ownership system: outside of workarounds like &lt;code&gt;Rc&lt;/code&gt;, a value cannot be owned by more than one variable.</source>
          <target state="translated">&lt;code&gt;MyStruct&lt;/code&gt; は &lt;code&gt;Copy&lt;/code&gt; とマークされていないタイプなので、 &lt;code&gt;y&lt;/code&gt; を設定すると、データは &lt;code&gt;x&lt;/code&gt; から移動されます。これは、錆の所有権制度の基本である：のような回避策の外 &lt;code&gt;Rc&lt;/code&gt; は、値が複数の変数が所有することはできません。</target>
        </trans-unit>
        <trans-unit id="496588742528c660f3dc424fab673464dbf01876" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;consume()&lt;/code&gt; is meant to be used with &lt;a href=&quot;#tymethod.fill_buf&quot;&gt;&lt;code&gt;fill_buf&lt;/code&gt;&lt;/a&gt;, that method's example includes an example of &lt;code&gt;consume()&lt;/code&gt;.</source>
          <target state="translated">ので &lt;code&gt;consume()&lt;/code&gt; して使用されることを意味する&lt;a href=&quot;#tymethod.fill_buf&quot;&gt; &lt;code&gt;fill_buf&lt;/code&gt; &lt;/a&gt;、その方法の一例は、一例含む &lt;code&gt;consume()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1c5531c624a4d1e39bfd0832114ff1d071877ab0" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;return;&lt;/code&gt; is just like &lt;code&gt;return ();&lt;/code&gt;, there is a mismatch between the function's return type and the value being returned.</source>
          <target state="translated">&lt;code&gt;return;&lt;/code&gt; 以来; ちょうど &lt;code&gt;return ();&lt;/code&gt; 、関数の戻り値の型と返される値の間に不一致があります。</target>
        </trans-unit>
        <trans-unit id="106e002553ec8f223d69f89942bc4486d15f8e50" translate="yes" xml:space="preserve">
          <source>Since Rust itself has no notion of immovable types, and considers moves (e.g. through assignment or &lt;a href=&quot;../mem/fn.replace&quot;&gt;&lt;code&gt;mem::replace&lt;/code&gt;&lt;/a&gt;) to always be safe, this trait cannot prevent types from moving by itself.</source>
          <target state="translated">Rust自体は不動の型の概念を持たず、移動（たとえば、割り当てまたは&lt;a href=&quot;../mem/fn.replace&quot;&gt; &lt;code&gt;mem::replace&lt;/code&gt; &lt;/a&gt;）は常に安全であると見なしているため、この特性は型がそれ自体で移動するのを防ぐことはできません。</target>
        </trans-unit>
        <trans-unit id="1f285e86fcd5f303d057612bb02278ca3219d62a" translate="yes" xml:space="preserve">
          <source>Since a &lt;code&gt;Weak&lt;/code&gt; reference does not count towards ownership, it will not prevent the inner value from being dropped, and &lt;code&gt;Weak&lt;/code&gt; itself makes no guarantees about the value still being present and may return &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; when &lt;a href=&quot;struct.weak#method.upgrade&quot;&gt;&lt;code&gt;upgrade&lt;/code&gt;&lt;/a&gt;d.</source>
          <target state="translated">以来 &lt;code&gt;Weak&lt;/code&gt; 参照は所有権にはカウントされません、それが削除されてから内部値を防ぐことはできません、と &lt;code&gt;Weak&lt;/code&gt; 自体が価値まだいる存在について保証しませんし、返さないことがあり&lt;a href=&quot;../option/enum.option#variant.None&quot;&gt; &lt;code&gt;None&lt;/code&gt; を&lt;/a&gt;するとき&lt;a href=&quot;struct.weak#method.upgrade&quot;&gt; &lt;code&gt;upgrade&lt;/code&gt; &lt;/a&gt; D。</target>
        </trans-unit>
        <trans-unit id="0b5e80c5d1baff33e622575e429a6609253a9875" translate="yes" xml:space="preserve">
          <source>Since a trait object can contain references, the lifetimes of those references need to be expressed as part of the trait object. This lifetime is written as &lt;code&gt;Trait + 'a&lt;/code&gt;. There are &lt;a href=&quot;../lifetime-elision#default-trait-object-lifetimes&quot;&gt;defaults&lt;/a&gt; that allow this lifetime to usually be inferred with a sensible choice.</source>
          <target state="translated">特性オブジェクトには参照を含めることができるため、それらの参照の存続期間は特性オブジェクトの一部として表現する必要があります。この存続期間は、 &lt;code&gt;Trait + 'a&lt;/code&gt; として記述されます。通常、この有効期間を賢明な選択で推論できる&lt;a href=&quot;../lifetime-elision#default-trait-object-lifetimes&quot;&gt;デフォルト&lt;/a&gt;があります。</target>
        </trans-unit>
        <trans-unit id="20e98f0e177bac52b1c7e34f6c53603646a0456a" translate="yes" xml:space="preserve">
          <source>Since both &lt;a href=&quot;trait.fn&quot;&gt;&lt;code&gt;Fn&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;trait.fnmut&quot;&gt;&lt;code&gt;FnMut&lt;/code&gt;&lt;/a&gt; are subtraits of &lt;code&gt;FnOnce&lt;/code&gt;, any instance of &lt;a href=&quot;trait.fn&quot;&gt;&lt;code&gt;Fn&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;trait.fnmut&quot;&gt;&lt;code&gt;FnMut&lt;/code&gt;&lt;/a&gt; can be used where a &lt;code&gt;FnOnce&lt;/code&gt; is expected.</source>
          <target state="translated">&lt;a href=&quot;trait.fn&quot;&gt; &lt;code&gt;Fn&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;trait.fnmut&quot;&gt; &lt;code&gt;FnMut&lt;/code&gt; &lt;/a&gt;は両方ともFnOnceの &lt;code&gt;FnOnce&lt;/code&gt; であるため、&lt;a href=&quot;trait.fn&quot;&gt; &lt;code&gt;Fn&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;trait.fnmut&quot;&gt; &lt;code&gt;FnMut&lt;/code&gt; の&lt;/a&gt;インスタンスは、 &lt;code&gt;FnOnce&lt;/code&gt; が期待される場所で使用できます。</target>
        </trans-unit>
        <trans-unit id="3d51e0cb7393cc23f814f7df339e871875cf9298" translate="yes" xml:space="preserve">
          <source>Since both &lt;a href=&quot;trait.fnmut&quot;&gt;&lt;code&gt;FnMut&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;trait.fnonce&quot;&gt;&lt;code&gt;FnOnce&lt;/code&gt;&lt;/a&gt; are supertraits of &lt;code&gt;Fn&lt;/code&gt;, any instance of &lt;code&gt;Fn&lt;/code&gt; can be used as a parameter where a &lt;a href=&quot;trait.fnmut&quot;&gt;&lt;code&gt;FnMut&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;trait.fnonce&quot;&gt;&lt;code&gt;FnOnce&lt;/code&gt;&lt;/a&gt; is expected.</source>
          <target state="translated">両方のため&lt;a href=&quot;trait.fnmut&quot;&gt; &lt;code&gt;FnMut&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;trait.fnonce&quot;&gt; &lt;code&gt;FnOnce&lt;/code&gt; で&lt;/a&gt;のsupertraitsある &lt;code&gt;Fn&lt;/code&gt; は、任意のインスタンス &lt;code&gt;Fn&lt;/code&gt; がパラメータとして使用することができる&lt;a href=&quot;trait.fnmut&quot;&gt; &lt;code&gt;FnMut&lt;/code&gt; &lt;/a&gt;又は&lt;a href=&quot;trait.fnonce&quot;&gt; &lt;code&gt;FnOnce&lt;/code&gt; が&lt;/a&gt;期待されます。</target>
        </trans-unit>
        <trans-unit id="551e6652d59fd9a852edd6ce421865877e505046" translate="yes" xml:space="preserve">
          <source>Since our new thread runs in parallel, the stack frame containing &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; may well have disappeared by the time we try to use them. Even if we call &lt;code&gt;thr.join()&lt;/code&gt; within foo (which blocks until &lt;code&gt;thr&lt;/code&gt; has completed, ensuring the stack frame won't disappear), we will not succeed: the compiler cannot prove that this behaviour is safe, and so won't let us do it.</source>
          <target state="translated">新しいスレッドは並行して実行されるため、 &lt;code&gt;x&lt;/code&gt; と &lt;code&gt;y&lt;/code&gt; を含むスタックフレームは、それらを使用しようとするときには消えている可能性があります。foo内で &lt;code&gt;thr.join()&lt;/code&gt; を呼び出しても（ &lt;code&gt;thr&lt;/code&gt; が完了するまでブロックされ、スタックフレームが消えないことを保証します）、成功しません。コンパイラはこの動作が安全であることを証明できないため、許可しません。私たちがやります。</target>
        </trans-unit>
        <trans-unit id="095fdf5547d3660f78803933a7399a71c65c3ba1" translate="yes" xml:space="preserve">
          <source>Since some characters can expand into multiple characters when changing the case, this function returns a &lt;a href=&quot;string/struct.string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; instead of modifying the parameter in-place.</source>
          <target state="translated">大文字と小文字を変更すると、一部の文字が複数の文字に展開される可能性があるため、この関数はパラメーターをインプレースで変更する代わりに&lt;a href=&quot;string/struct.string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;を返します。</target>
        </trans-unit>
        <trans-unit id="996ff67fa6512e8ea590630f1af9075b393fc7b8" translate="yes" xml:space="preserve">
          <source>Since the &lt;a href=&quot;result/enum.result#variant.Err&quot;&gt;&lt;code&gt;Err&lt;/code&gt;&lt;/a&gt; variant contains a &lt;code&gt;!&lt;/code&gt;, it can never occur. If the &lt;code&gt;exhaustive_patterns&lt;/code&gt; feature is present this means we can exhaustively match on &lt;a href=&quot;result/enum.result&quot;&gt;&lt;code&gt;Result&amp;lt;T, !&amp;gt;&lt;/code&gt;&lt;/a&gt; by just taking the &lt;a href=&quot;result/enum.result#variant.Ok&quot;&gt;&lt;code&gt;Ok&lt;/code&gt;&lt;/a&gt; variant. This illustrates another behaviour of &lt;code&gt;!&lt;/code&gt; - it can be used to &quot;delete&quot; certain enum variants from generic types like &lt;code&gt;Result&lt;/code&gt;.</source>
          <target state="translated">以来&lt;a href=&quot;result/enum.result#variant.Err&quot;&gt; &lt;code&gt;Err&lt;/code&gt; &lt;/a&gt;バリアントが含まれています &lt;code&gt;!&lt;/code&gt; 、発生することはありません。 &lt;code&gt;exhaustive_patterns&lt;/code&gt; 機能が存在する場合、これは、&lt;a href=&quot;result/enum.result#variant.Ok&quot;&gt; &lt;code&gt;Ok&lt;/code&gt; &lt;/a&gt;バリアントを取得するだけで&lt;a href=&quot;result/enum.result&quot;&gt; &lt;code&gt;Result&amp;lt;T, !&amp;gt;&lt;/code&gt; &lt;/a&gt;徹底的に照合できることを意味します。これは、 &lt;code&gt;!&lt;/code&gt; の別の動作を示しています。 - 「削除」特定の列挙型のような一般的なタイプから変異体を使用することができます &lt;code&gt;Result&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="02dc928dc96c27acf83c332b2f0b99c175919f2e" translate="yes" xml:space="preserve">
          <source>Since the argument to &lt;code&gt;chain()&lt;/code&gt; uses &lt;a href=&quot;trait.intoiterator&quot;&gt;&lt;code&gt;IntoIterator&lt;/code&gt;&lt;/a&gt;, we can pass anything that can be converted into an &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;, not just an &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt; itself. For example, slices (&lt;code&gt;&amp;amp;[T]&lt;/code&gt;) implement &lt;a href=&quot;trait.intoiterator&quot;&gt;&lt;code&gt;IntoIterator&lt;/code&gt;&lt;/a&gt;, and so can be passed to &lt;code&gt;chain()&lt;/code&gt; directly:</source>
          <target state="translated">引数ので、 &lt;code&gt;chain()&lt;/code&gt; 使用しています&lt;a href=&quot;trait.intoiterator&quot;&gt; &lt;code&gt;IntoIterator&lt;/code&gt; を&lt;/a&gt;、私たちは、に変換することができます何でも渡すことができます&lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt;だけではなく、&lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt;自身を。たとえば、スライス（ &lt;code&gt;&amp;amp;[T]&lt;/code&gt; ）は&lt;a href=&quot;trait.intoiterator&quot;&gt; &lt;code&gt;IntoIterator&lt;/code&gt; を&lt;/a&gt;実装しているため、 &lt;code&gt;chain()&lt;/code&gt; に直接渡すことができます。</target>
        </trans-unit>
        <trans-unit id="a895265506313c461054e22d44ad004a5290527c" translate="yes" xml:space="preserve">
          <source>Since the argument to &lt;code&gt;zip()&lt;/code&gt; uses &lt;a href=&quot;trait.intoiterator&quot;&gt;&lt;code&gt;IntoIterator&lt;/code&gt;&lt;/a&gt;, we can pass anything that can be converted into an &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;, not just an &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt; itself. For example, slices (&lt;code&gt;&amp;amp;[T]&lt;/code&gt;) implement &lt;a href=&quot;trait.intoiterator&quot;&gt;&lt;code&gt;IntoIterator&lt;/code&gt;&lt;/a&gt;, and so can be passed to &lt;code&gt;zip()&lt;/code&gt; directly:</source>
          <target state="translated">&lt;code&gt;zip()&lt;/code&gt; への引数は&lt;a href=&quot;trait.intoiterator&quot;&gt; &lt;code&gt;IntoIterator&lt;/code&gt; &lt;/a&gt;を使用するため、&lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt;自体だけでなく、&lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt;に変換できるすべてのものを渡すことができます。たとえば、スライス（ &lt;code&gt;&amp;amp;[T]&lt;/code&gt; ）は&lt;a href=&quot;trait.intoiterator&quot;&gt; &lt;code&gt;IntoIterator&lt;/code&gt; を&lt;/a&gt;実装しているため、直接 &lt;code&gt;zip()&lt;/code&gt; に渡すことができます。</target>
        </trans-unit>
        <trans-unit id="d74a16dbce9fae58c39cce1fd66b21ace599f36b" translate="yes" xml:space="preserve">
          <source>Since the enum is already public, adding &lt;code&gt;pub&lt;/code&gt; on one its elements is unnecessary. Example:</source>
          <target state="translated">列挙型はすでに公開されているため、その要素の1つに &lt;code&gt;pub&lt;/code&gt; を追加する必要はありません。例：</target>
        </trans-unit>
        <trans-unit id="16af503f8386670f482deb401cd8105b1c60875c" translate="yes" xml:space="preserve">
          <source>Since the last element is zero, it would underflow. Thus, the resulting value is &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">最後の要素はゼロなので、アンダーフローします。したがって、結果の値は &lt;code&gt;None&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="78c2449ef951719357023f624a45507fe4592e5f" translate="yes" xml:space="preserve">
          <source>Since the third element caused an underflow, no further elements were taken, so the final value of &lt;code&gt;shared&lt;/code&gt; is 6 (= &lt;code&gt;3 + 2 + 1&lt;/code&gt;), not 16.</source>
          <target state="translated">3番目の要素がアンダーフローを引き起こしたため、それ以上の要素は取得されなかったため、 &lt;code&gt;shared&lt;/code&gt; の最終的な値は16ではなく6（= &lt;code&gt;3 + 2 + 1&lt;/code&gt; ）です。</target>
        </trans-unit>
        <trans-unit id="9ae4b12cefea6c705a428595fef84ba94949d6b8" translate="yes" xml:space="preserve">
          <source>Since this call borrows the &lt;code&gt;Mutex&lt;/code&gt; mutably, no actual locking needs to take place -- the mutable borrow statically guarantees no locks exist.</source>
          <target state="translated">この呼び出しは &lt;code&gt;Mutex&lt;/code&gt; ミュータブルに借用するため、実際のロックを行う必要はありません。可変の借用は、ロックが存在しないことを静的に保証します。</target>
        </trans-unit>
        <trans-unit id="500751d314a9f5868d6621b41878f53a69f9d880" translate="yes" xml:space="preserve">
          <source>Since this call borrows the &lt;code&gt;RwLock&lt;/code&gt; mutably, no actual locking needs to take place -- the mutable borrow statically guarantees no locks exist.</source>
          <target state="translated">この呼び出しは &lt;code&gt;RwLock&lt;/code&gt; をミュータブルに借用するため、実際のロックを行う必要はありません-可変ボローは、ロックが存在しないことを静的に保証します。</target>
        </trans-unit>
        <trans-unit id="8a08fbb9b9d229eef360d5f515027ef774d609b9" translate="yes" xml:space="preserve">
          <source>Since this compares pointers it means that &lt;code&gt;Weak::new()&lt;/code&gt; will equal each other, even though they don't point to any value.</source>
          <target state="translated">これはポインタを比較するので、たとえ値を指さなくても、 &lt;code&gt;Weak::new()&lt;/code&gt; は互いに等しいことを意味します。</target>
        </trans-unit>
        <trans-unit id="cf2f4735d740fd043cfc0f0f6661429a49ef1b73" translate="yes" xml:space="preserve">
          <source>Since this enum has no variant, a value of this type can never actually exist. This can be useful for generic APIs that use &lt;a href=&quot;../result/enum.result&quot;&gt;&lt;code&gt;Result&lt;/code&gt;&lt;/a&gt; and parameterize the error type, to indicate that the result is always &lt;a href=&quot;../result/enum.result#variant.Ok&quot;&gt;&lt;code&gt;Ok&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この列挙型にはバリアントがないため、この型の値が実際に存在することはありません。これは、&lt;a href=&quot;../result/enum.result&quot;&gt; &lt;code&gt;Result&lt;/code&gt; &lt;/a&gt;を使用してエラータイプをパラメーター化し、結果が常に&lt;a href=&quot;../result/enum.result#variant.Ok&quot;&gt; &lt;code&gt;Ok&lt;/code&gt; &lt;/a&gt;であることを示す汎用APIに役立ちます。</target>
        </trans-unit>
        <trans-unit id="76b5e2d69255c4231c83c94903ea5b7b37a4db43" translate="yes" xml:space="preserve">
          <source>Since type parameters are evaluated in-order, you may be able to fix this issue by doing:</source>
          <target state="translated">型のパラメータは順番に評価されるので、この問題を修正するには、以下のようにするとよいでしょう。</target>
        </trans-unit>
        <trans-unit id="586ab9e36a2a610444fcbcb9e44aed06a4a34545" translate="yes" xml:space="preserve">
          <source>Since union fields share common storage, gaining write access to one field of a union can give write access to all its remaining fields. Borrow checking rules have to be adjusted to account for this fact. As a result, if one field of a union is borrowed, all its remaining fields are borrowed as well for the same lifetime.</source>
          <target state="translated">ユニオンフィールドは共通のストレージを共有しているため、あるユニオンの1つのフィールドに書き込みアクセスすると、残りのすべてのフィールドへの書き込みアクセスが可能になります。借用チェックのルールは、この事実を考慮して調整する必要があります。その結果、ユニオンの1つのフィールドが借用されると、残りのすべてのフィールドも同じライフタイムで借用されることになります。</target>
        </trans-unit>
        <trans-unit id="6c20c8f37c4b7bf77f2a31df2f6719c9fb72df7d" translate="yes" xml:space="preserve">
          <source>Since unsigned types do not have negative equivalents all applications of this function will wrap (except for &lt;code&gt;-0&lt;/code&gt;). For values smaller than the corresponding signed type's maximum the result is the same as casting the corresponding signed value. Any larger values are equivalent to &lt;code&gt;MAX + 1 - (val - MAX - 1)&lt;/code&gt; where &lt;code&gt;MAX&lt;/code&gt; is the corresponding signed type's maximum.</source>
          <target state="translated">符号なし型には同等の負の値がないため、この関数のすべてのアプリケーションがラップします（ &lt;code&gt;-0&lt;/code&gt; を除く）。対応する符号付き型の最大値より小さい値の場合、結果は対応する符号付き値をキャストした場合と同じです。より大きな値は、 &lt;code&gt;MAX + 1 - (val - MAX - 1)&lt;/code&gt; と同等です。ここで、 &lt;code&gt;MAX&lt;/code&gt; は対応する符号付きタイプの最大値です。</target>
        </trans-unit>
        <trans-unit id="cbaa65c28e509bdfabc1a47426821c06f77d26f9" translate="yes" xml:space="preserve">
          <source>Since we cannot access items defined inside a function, the visibility of its items does not impact outer code. So using the &lt;code&gt;pub&lt;/code&gt; keyword in this context is invalid.</source>
          <target state="translated">関数内で定義されたアイテムにはアクセスできないため、そのアイテムの可視性は外部コードに影響を与えません。したがって、このコンテキストで &lt;code&gt;pub&lt;/code&gt; キーワードを使用することは無効です。</target>
        </trans-unit>
        <trans-unit id="4dba81bbe7820e8868eb07b19a8befa396058675" translate="yes" xml:space="preserve">
          <source>Since, for the positive integers, all common definitions of division are equal, this is exactly equal to &lt;code&gt;self % rhs&lt;/code&gt;.</source>
          <target state="translated">正の整数の場合、一般的な除算の定義はすべて等しいため、これは &lt;code&gt;self % rhs&lt;/code&gt; とまったく同じです。</target>
        </trans-unit>
        <trans-unit id="dda0de02b51725f6a06052d7f7ac014a8396a781" translate="yes" xml:space="preserve">
          <source>Since, for the positive integers, all common definitions of division are equal, this is exactly equal to &lt;code&gt;self / rhs&lt;/code&gt;.</source>
          <target state="translated">正の整数の場合、除算のすべての一般的な定義は等しいため、これは &lt;code&gt;self / rhs&lt;/code&gt; とまったく同じです。</target>
        </trans-unit>
        <trans-unit id="b103261a83b179716c89c6c92972b372068f6b15" translate="yes" xml:space="preserve">
          <source>Single quote</source>
          <target state="translated">単一の引用</target>
        </trans-unit>
        <trans-unit id="fa3c3ce2e1143e5f02a7e1c6ba83790a55e509ea" translate="yes" xml:space="preserve">
          <source>Single quote is escaped as &lt;code&gt;'&lt;/code&gt;.</source>
          <target state="translated">単一引用符は &lt;code&gt;'&lt;/code&gt; としてエスケープされます。</target>
        </trans-unit>
        <trans-unit id="c87f2f54a082c54d228ff842301df84465a008c3" translate="yes" xml:space="preserve">
          <source>Single-element tuple expression</source>
          <target state="translated">単一要素タプル式</target>
        </trans-unit>
        <trans-unit id="eeac5881e3707a24870f65943d84687eb7b0c026" translate="yes" xml:space="preserve">
          <source>Single-element tuple type</source>
          <target state="translated">単一要素タプル型</target>
        </trans-unit>
        <trans-unit id="d75a58a33dda256da44b82cf7f4c80227b9e1afe" translate="yes" xml:space="preserve">
          <source>Single-threaded reference-counting pointers. 'Rc' stands for 'Reference Counted'.</source>
          <target state="translated">シングルスレッドの参照カウントポインタ。'Rc' は 'Reference Counted' の略です。</target>
        </trans-unit>
        <trans-unit id="e53e8d5300c878019a997d4cfb7201c7ed2ee003" translate="yes" xml:space="preserve">
          <source>Sink</source>
          <target state="translated">Sink</target>
        </trans-unit>
        <trans-unit id="60c77f672b65aaac8580302bf8cda9c91ba1cad6" translate="yes" xml:space="preserve">
          <source>Sink::borrow</source>
          <target state="translated">Sink::borrow</target>
        </trans-unit>
        <trans-unit id="6d9c51b3db09f18a5f1f96544a01a60b2f227eab" translate="yes" xml:space="preserve">
          <source>Sink::borrow_mut</source>
          <target state="translated">Sink::borrow_mut</target>
        </trans-unit>
        <trans-unit id="1da011f3be06f5727221fdf2c29af5810aa1e90c" translate="yes" xml:space="preserve">
          <source>Sink::by_ref</source>
          <target state="translated">Sink::by_ref</target>
        </trans-unit>
        <trans-unit id="736ddcaae3f79d64fd9ada96bbbcd86659dcb149" translate="yes" xml:space="preserve">
          <source>Sink::flush</source>
          <target state="translated">Sink::flush</target>
        </trans-unit>
        <trans-unit id="1cc460d6dea281e2f0b294cba322984d76827293" translate="yes" xml:space="preserve">
          <source>Sink::fmt</source>
          <target state="translated">Sink::fmt</target>
        </trans-unit>
        <trans-unit id="2395cef4421cc589b077a40b42899b78928eca8a" translate="yes" xml:space="preserve">
          <source>Sink::from</source>
          <target state="translated">Sink::from</target>
        </trans-unit>
        <trans-unit id="08d05b7e780b04c22db75adb4dcbf52a0fd47257" translate="yes" xml:space="preserve">
          <source>Sink::into</source>
          <target state="translated">Sink::into</target>
        </trans-unit>
        <trans-unit id="4be29718f19d2b922b9f5929c80d09871c9ec765" translate="yes" xml:space="preserve">
          <source>Sink::try_from</source>
          <target state="translated">Sink::try_from</target>
        </trans-unit>
        <trans-unit id="8eec324a6cd9312538375d319f03ae5b437fac6f" translate="yes" xml:space="preserve">
          <source>Sink::try_into</source>
          <target state="translated">Sink::try_into</target>
        </trans-unit>
        <trans-unit id="754adefc1f84a53a66700415103c74fc10d2208d" translate="yes" xml:space="preserve">
          <source>Sink::type_id</source>
          <target state="translated">Sink::type_id</target>
        </trans-unit>
        <trans-unit id="5472b671b415c7460696ca133e1af23bc3ba15b8" translate="yes" xml:space="preserve">
          <source>Sink::write</source>
          <target state="translated">Sink::write</target>
        </trans-unit>
        <trans-unit id="8b5df7265c21521886c1d6e0faf91eb2236fc6a1" translate="yes" xml:space="preserve">
          <source>Sink::write_all</source>
          <target state="translated">Sink::write_all</target>
        </trans-unit>
        <trans-unit id="ae44c989306894e93f20c1bd3c46e78e41aa999e" translate="yes" xml:space="preserve">
          <source>Sink::write_fmt</source>
          <target state="translated">Sink::write_fmt</target>
        </trans-unit>
        <trans-unit id="2b518739227f1ce8933d3bddfccc03d9fdb432e6" translate="yes" xml:space="preserve">
          <source>Sink::write_vectored</source>
          <target state="translated">Sink::write_vectored</target>
        </trans-unit>
        <trans-unit id="c0d73ca2870698f5904e43434297eaf18f9ba593" translate="yes" xml:space="preserve">
          <source>SipHash is a general-purpose hashing function: it runs at a good speed (competitive with Spooky and City) and permits strong &lt;em&gt;keyed&lt;/em&gt; hashing. This lets you key your hashtables from a strong RNG, such as &lt;a href=&quot;https://doc.rust-lang.org/rand/rand/os/struct.OsRng.html&quot;&gt;&lt;code&gt;rand::os::OsRng&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">SipHashは汎用のハッシュ関数です。高速で実行され（SpookyやCityと競合）、強力な&lt;em&gt;キー付き&lt;/em&gt;ハッシュが可能です。これにより、&lt;a href=&quot;https://doc.rust-lang.org/rand/rand/os/struct.OsRng.html&quot;&gt; &lt;code&gt;rand::os::OsRng&lt;/code&gt; &lt;/a&gt;などの強力なRNGからハッシュテーブルにキーを設定できます。</target>
        </trans-unit>
        <trans-unit id="f9cb0c54ab98623776ca7d12c37c5a965ab239e3" translate="yes" xml:space="preserve">
          <source>SipHasher</source>
          <target state="translated">SipHasher</target>
        </trans-unit>
        <trans-unit id="9cedebf8939af7acb2722fe2fa6e5500dcc0267d" translate="yes" xml:space="preserve">
          <source>SipHasher::borrow</source>
          <target state="translated">SipHasher::borrow</target>
        </trans-unit>
        <trans-unit id="6f78bf5c40eda613634b22b06fd42ab3d0250faa" translate="yes" xml:space="preserve">
          <source>SipHasher::borrow_mut</source>
          <target state="translated">SipHasher::borrow_mut</target>
        </trans-unit>
        <trans-unit id="cc289741e2695624776b986e52b00d8f23a94048" translate="yes" xml:space="preserve">
          <source>SipHasher::clone</source>
          <target state="translated">SipHasher::clone</target>
        </trans-unit>
        <trans-unit id="97fe54ce712ce3a5267fa485ee5a26f2658a360a" translate="yes" xml:space="preserve">
          <source>SipHasher::clone_from</source>
          <target state="translated">SipHasher::clone_from</target>
        </trans-unit>
        <trans-unit id="625ae718fa03c7281d696cebdc8b4d5ef419ba8e" translate="yes" xml:space="preserve">
          <source>SipHasher::clone_into</source>
          <target state="translated">SipHasher::clone_into</target>
        </trans-unit>
        <trans-unit id="5e14ff4d39e15208d2ce324e1c3d9b1cd2601aac" translate="yes" xml:space="preserve">
          <source>SipHasher::default</source>
          <target state="translated">SipHasher::default</target>
        </trans-unit>
        <trans-unit id="7161704faf8df64e88863702b3e55cf0aa7ed08f" translate="yes" xml:space="preserve">
          <source>SipHasher::finish</source>
          <target state="translated">SipHasher::finish</target>
        </trans-unit>
        <trans-unit id="dbf68c90fc16c278c984e9a20353b175f9bf5fae" translate="yes" xml:space="preserve">
          <source>SipHasher::fmt</source>
          <target state="translated">SipHasher::fmt</target>
        </trans-unit>
        <trans-unit id="55aaab86cd50570c6967e5cb1be889d31f00c5c3" translate="yes" xml:space="preserve">
          <source>SipHasher::from</source>
          <target state="translated">SipHasher::from</target>
        </trans-unit>
        <trans-unit id="f5f59a1bd2f303a9262c508b718d3d6df44c4aaa" translate="yes" xml:space="preserve">
          <source>SipHasher::into</source>
          <target state="translated">SipHasher::into</target>
        </trans-unit>
        <trans-unit id="e4a8f7f5784838af85c04408b90d9ea75e69b189" translate="yes" xml:space="preserve">
          <source>SipHasher::new</source>
          <target state="translated">SipHasher::new</target>
        </trans-unit>
        <trans-unit id="e33acab93fc2fc493546063a61939686f7af77ee" translate="yes" xml:space="preserve">
          <source>SipHasher::new_with_keys</source>
          <target state="translated">SipHasher::new_with_keys</target>
        </trans-unit>
        <trans-unit id="3b90ab6bf88c2dbd6667b56cb38a8e459989460c" translate="yes" xml:space="preserve">
          <source>SipHasher::to_owned</source>
          <target state="translated">SipHasher::to_owned</target>
        </trans-unit>
        <trans-unit id="12c806474a3ae608918282ae770dec9b62f0b382" translate="yes" xml:space="preserve">
          <source>SipHasher::try_from</source>
          <target state="translated">SipHasher::try_from</target>
        </trans-unit>
        <trans-unit id="2cd9d0b149edef9bacd57b249b8149d3817315c7" translate="yes" xml:space="preserve">
          <source>SipHasher::try_into</source>
          <target state="translated">SipHasher::try_into</target>
        </trans-unit>
        <trans-unit id="cbb961e7c7039fb46a1b3b6615e8e9ad0c6e6000" translate="yes" xml:space="preserve">
          <source>SipHasher::type_id</source>
          <target state="translated">SipHasher::type_id</target>
        </trans-unit>
        <trans-unit id="8dce40dc64d99daa5c7c82a5dd674ea488a633de" translate="yes" xml:space="preserve">
          <source>SipHasher::write</source>
          <target state="translated">SipHasher::write</target>
        </trans-unit>
        <trans-unit id="c5c657a251d28888ab38871cd5365bc241246900" translate="yes" xml:space="preserve">
          <source>SipHasher::write_i128</source>
          <target state="translated">SipHasher::write_i128</target>
        </trans-unit>
        <trans-unit id="081f835a8f97633ee9c90294cbf01e6872a68e4d" translate="yes" xml:space="preserve">
          <source>SipHasher::write_i16</source>
          <target state="translated">SipHasher::write_i16</target>
        </trans-unit>
        <trans-unit id="534c0d75c7057a1243d040ed54d6d2089e7a7cf2" translate="yes" xml:space="preserve">
          <source>SipHasher::write_i32</source>
          <target state="translated">SipHasher::write_i32</target>
        </trans-unit>
        <trans-unit id="216359e513bd8a5178869764748567d747157db7" translate="yes" xml:space="preserve">
          <source>SipHasher::write_i64</source>
          <target state="translated">SipHasher::write_i64</target>
        </trans-unit>
        <trans-unit id="114f8115dd2a8666c8ced62d0e00a14733a00d63" translate="yes" xml:space="preserve">
          <source>SipHasher::write_i8</source>
          <target state="translated">SipHasher::write_i8</target>
        </trans-unit>
        <trans-unit id="15e7675543a4110211cbe808fcb13bd45e7008de" translate="yes" xml:space="preserve">
          <source>SipHasher::write_isize</source>
          <target state="translated">SipHasher::write_isize</target>
        </trans-unit>
        <trans-unit id="a259163f68fa6032e75f103bf4080aa27ba329d2" translate="yes" xml:space="preserve">
          <source>SipHasher::write_u128</source>
          <target state="translated">SipHasher::write_u128</target>
        </trans-unit>
        <trans-unit id="099c7c79450a47f4f8124fb8b6727a36a03390dc" translate="yes" xml:space="preserve">
          <source>SipHasher::write_u16</source>
          <target state="translated">SipHasher::write_u16</target>
        </trans-unit>
        <trans-unit id="d7ecaa1047bea8c31cd7f22a3bcdc883bc97810d" translate="yes" xml:space="preserve">
          <source>SipHasher::write_u32</source>
          <target state="translated">SipHasher::write_u32</target>
        </trans-unit>
        <trans-unit id="31d6e5ccde9767e49d1674c68c727f65298672fe" translate="yes" xml:space="preserve">
          <source>SipHasher::write_u64</source>
          <target state="translated">SipHasher::write_u64</target>
        </trans-unit>
        <trans-unit id="9169019178e6022743fc9d89de5f8e8745aaaf95" translate="yes" xml:space="preserve">
          <source>SipHasher::write_u8</source>
          <target state="translated">SipHasher::write_u8</target>
        </trans-unit>
        <trans-unit id="4da530848e33a9c560398180914f191393e00574" translate="yes" xml:space="preserve">
          <source>SipHasher::write_usize</source>
          <target state="translated">SipHasher::write_usize</target>
        </trans-unit>
        <trans-unit id="ee91ac0df1cda6cca56ba0ddc07b04ecdae2eb79" translate="yes" xml:space="preserve">
          <source>Six weeks after the first beta was created, it&amp;rsquo;s time for a stable release! The &lt;code&gt;stable&lt;/code&gt; branch is produced from the &lt;code&gt;beta&lt;/code&gt; branch:</source>
          <target state="translated">最初のベータ版が作成されてから6週間後、安定版リリースの時間です。 &lt;code&gt;stable&lt;/code&gt; 枝をから生成された &lt;code&gt;beta&lt;/code&gt; ブランチ：</target>
        </trans-unit>
        <trans-unit id="b7152342a267362add3c0d7f69f720f7a9c76c9e" translate="yes" xml:space="preserve">
          <source>Size</source>
          <target state="translated">Size</target>
        </trans-unit>
        <trans-unit id="8b2137531250f928e063debe4f1ffaa0a169ef4c" translate="yes" xml:space="preserve">
          <source>Size and Alignment</source>
          <target state="translated">サイズとアライメント</target>
        </trans-unit>
        <trans-unit id="2e8e7d128fe5b9a8867e6a426fb44ec115e0e9a2" translate="yes" xml:space="preserve">
          <source>Size of &lt;code&gt;#[repr(C)]&lt;/code&gt; items</source>
          <target state="translated">&lt;code&gt;#[repr(C)]&lt;/code&gt; アイテムのサイズ</target>
        </trans-unit>
        <trans-unit id="aa6a08373f71dd56c89763573898cda876af66a9" translate="yes" xml:space="preserve">
          <source>Size of Enums</source>
          <target state="translated">列挙型のサイズ</target>
        </trans-unit>
        <trans-unit id="6b52ecd2f9fc6e1813053b01f83a05b834e08941" translate="yes" xml:space="preserve">
          <source>Size of Structs</source>
          <target state="translated">構造物のサイズ</target>
        </trans-unit>
        <trans-unit id="1feff492ca8a9a3bc4a26e483e6cb0262d851ca0" translate="yes" xml:space="preserve">
          <source>Size of Unions</source>
          <target state="translated">組合の規模</target>
        </trans-unit>
        <trans-unit id="2ecf7208ad77d957cb2e1a89293524823cf35c3e" translate="yes" xml:space="preserve">
          <source>Sized</source>
          <target state="translated">Sized</target>
        </trans-unit>
        <trans-unit id="3da474537ac378c616d6b301acc1674bc348cecd" translate="yes" xml:space="preserve">
          <source>Skip</source>
          <target state="translated">Skip</target>
        </trans-unit>
        <trans-unit id="bf47c2169ff524c7aead5b6e515a8d42bd4b77a9" translate="yes" xml:space="preserve">
          <source>Skip to the next iteration of a loop.</source>
          <target state="translated">ループの次の反復にスキップします。</target>
        </trans-unit>
        <trans-unit id="8d67699e65efc053e93dca13ef4b1f6202ba1901" translate="yes" xml:space="preserve">
          <source>Skip::all</source>
          <target state="translated">Skip::all</target>
        </trans-unit>
        <trans-unit id="141e853bf04e8103da2b2c07dbf8000f54f570bf" translate="yes" xml:space="preserve">
          <source>Skip::any</source>
          <target state="translated">Skip::any</target>
        </trans-unit>
        <trans-unit id="c572bc5841959dca75e9c92d6139c6c8321aabf8" translate="yes" xml:space="preserve">
          <source>Skip::borrow</source>
          <target state="translated">Skip::borrow</target>
        </trans-unit>
        <trans-unit id="bb425ddbe3925202b0b1566fb4567e3171373ac7" translate="yes" xml:space="preserve">
          <source>Skip::borrow_mut</source>
          <target state="translated">Skip::borrow_mut</target>
        </trans-unit>
        <trans-unit id="abc1b8180d94b0691f88b2c8b5f9022896fcd951" translate="yes" xml:space="preserve">
          <source>Skip::by_ref</source>
          <target state="translated">Skip::by_ref</target>
        </trans-unit>
        <trans-unit id="ac8d08d116f5cee3f4346786234b2f95b0e8712c" translate="yes" xml:space="preserve">
          <source>Skip::chain</source>
          <target state="translated">Skip::chain</target>
        </trans-unit>
        <trans-unit id="05348998f0a735c96821775992fcabcbe0f2637b" translate="yes" xml:space="preserve">
          <source>Skip::clone</source>
          <target state="translated">Skip::clone</target>
        </trans-unit>
        <trans-unit id="ab942803336d4a18c570f4b33a95565c2f912da9" translate="yes" xml:space="preserve">
          <source>Skip::clone_from</source>
          <target state="translated">Skip::clone_from</target>
        </trans-unit>
        <trans-unit id="54eb30686bf309c8534a4169a59b2eb41600beb1" translate="yes" xml:space="preserve">
          <source>Skip::clone_into</source>
          <target state="translated">Skip::clone_into</target>
        </trans-unit>
        <trans-unit id="ed4e38033dd806ff8d752e63571ae83c6733409d" translate="yes" xml:space="preserve">
          <source>Skip::cloned</source>
          <target state="translated">Skip::cloned</target>
        </trans-unit>
        <trans-unit id="b0bf2a0cd01bdd325ee257ee06de3b9c617e0d11" translate="yes" xml:space="preserve">
          <source>Skip::cmp</source>
          <target state="translated">Skip::cmp</target>
        </trans-unit>
        <trans-unit id="02c0a58a456fffb957ceb2519514865d280ec66a" translate="yes" xml:space="preserve">
          <source>Skip::collect</source>
          <target state="translated">Skip::collect</target>
        </trans-unit>
        <trans-unit id="f572ea5aae0784c24ea52b6f645ec73b1b72c674" translate="yes" xml:space="preserve">
          <source>Skip::copied</source>
          <target state="translated">Skip::copied</target>
        </trans-unit>
        <trans-unit id="40d90248faa89c2b6340db905f56295e956458ea" translate="yes" xml:space="preserve">
          <source>Skip::count</source>
          <target state="translated">Skip::count</target>
        </trans-unit>
        <trans-unit id="5c13df6d2d71e1aeab130ef4967e90660241c022" translate="yes" xml:space="preserve">
          <source>Skip::cycle</source>
          <target state="translated">Skip::cycle</target>
        </trans-unit>
        <trans-unit id="81f0912435fda5e9269d1b7959e08d64503d681f" translate="yes" xml:space="preserve">
          <source>Skip::enumerate</source>
          <target state="translated">Skip::enumerate</target>
        </trans-unit>
        <trans-unit id="8d4632bae1e84eda74aeae1018124ebf229eda3e" translate="yes" xml:space="preserve">
          <source>Skip::eq</source>
          <target state="translated">Skip::eq</target>
        </trans-unit>
        <trans-unit id="eb8a3a22b5ea79cfb61fb7507a6d78a8f1292f27" translate="yes" xml:space="preserve">
          <source>Skip::filter</source>
          <target state="translated">Skip::filter</target>
        </trans-unit>
        <trans-unit id="874be171075c0b4b3eee66f8ced42abe0b0e3baa" translate="yes" xml:space="preserve">
          <source>Skip::filter_map</source>
          <target state="translated">Skip::filter_map</target>
        </trans-unit>
        <trans-unit id="a30fb0f619bbc4f631f8c4492f10c577c7f6de5b" translate="yes" xml:space="preserve">
          <source>Skip::find</source>
          <target state="translated">Skip::find</target>
        </trans-unit>
        <trans-unit id="dbc55aa235c22a0214953850ca711401b23ed4a4" translate="yes" xml:space="preserve">
          <source>Skip::find_map</source>
          <target state="translated">Skip::find_map</target>
        </trans-unit>
        <trans-unit id="8a9e86e948e9bd0ef00a26f68bef19063068548f" translate="yes" xml:space="preserve">
          <source>Skip::flat_map</source>
          <target state="translated">Skip::flat_map</target>
        </trans-unit>
        <trans-unit id="e16f1f9ef8d1d4589cd1c4bd5ed7f80c4d5f6ddd" translate="yes" xml:space="preserve">
          <source>Skip::flatten</source>
          <target state="translated">Skip::flatten</target>
        </trans-unit>
        <trans-unit id="9086b93356bb81e44b2d7f1412ac4fe86bd0dcb1" translate="yes" xml:space="preserve">
          <source>Skip::fmt</source>
          <target state="translated">Skip::fmt</target>
        </trans-unit>
        <trans-unit id="e3d9c86bbe78f52a56ad6fff4a0b01475f10581d" translate="yes" xml:space="preserve">
          <source>Skip::fold</source>
          <target state="translated">Skip::fold</target>
        </trans-unit>
        <trans-unit id="c8e88869f2740a973d0537592ce1555579baa1b7" translate="yes" xml:space="preserve">
          <source>Skip::for_each</source>
          <target state="translated">Skip::for_each</target>
        </trans-unit>
        <trans-unit id="c104bc225095dfb31451ec18bca1d818a9b034cc" translate="yes" xml:space="preserve">
          <source>Skip::from</source>
          <target state="translated">Skip::from</target>
        </trans-unit>
        <trans-unit id="e67aaeac0314d54938507d57ca05493c7d19a56d" translate="yes" xml:space="preserve">
          <source>Skip::fuse</source>
          <target state="translated">Skip::fuse</target>
        </trans-unit>
        <trans-unit id="f0e121a4c13868ff9f1bc27cbb52b11b553a299c" translate="yes" xml:space="preserve">
          <source>Skip::ge</source>
          <target state="translated">Skip::ge</target>
        </trans-unit>
        <trans-unit id="5cfa9f35d793092fb95d4bd2c5bfbdee2b01d07e" translate="yes" xml:space="preserve">
          <source>Skip::gt</source>
          <target state="translated">Skip::gt</target>
        </trans-unit>
        <trans-unit id="32d75c54c889166e3bbe5ec4632b338aaa132ad5" translate="yes" xml:space="preserve">
          <source>Skip::inspect</source>
          <target state="translated">Skip::inspect</target>
        </trans-unit>
        <trans-unit id="3d8db1257125ff8e4340421bc43225609fe092b2" translate="yes" xml:space="preserve">
          <source>Skip::into</source>
          <target state="translated">Skip::into</target>
        </trans-unit>
        <trans-unit id="55521a2f13f746b7b112a71469d51f5284ad5f45" translate="yes" xml:space="preserve">
          <source>Skip::into_iter</source>
          <target state="translated">Skip::into_iter</target>
        </trans-unit>
        <trans-unit id="5038f6c0c3001beb5f7a911c129fa9f1cee58ee5" translate="yes" xml:space="preserve">
          <source>Skip::is_empty</source>
          <target state="translated">Skip::is_empty</target>
        </trans-unit>
        <trans-unit id="272bf3795578cd2bc47dda4c90cfee7e48d2a48e" translate="yes" xml:space="preserve">
          <source>Skip::is_sorted</source>
          <target state="translated">Skip::is_sorted</target>
        </trans-unit>
        <trans-unit id="f24a2c232270c929008d3680d05c96536a1217b0" translate="yes" xml:space="preserve">
          <source>Skip::is_sorted_by</source>
          <target state="translated">Skip::is_sorted_by</target>
        </trans-unit>
        <trans-unit id="47d5c21e2c2c68b022473e8f093afd6958451210" translate="yes" xml:space="preserve">
          <source>Skip::is_sorted_by_key</source>
          <target state="translated">Skip::is_sorted_by_key</target>
        </trans-unit>
        <trans-unit id="10bf154533e067f3dd7f0c05e621c3870a0af4da" translate="yes" xml:space="preserve">
          <source>Skip::last</source>
          <target state="translated">Skip::last</target>
        </trans-unit>
        <trans-unit id="315ffa7298e0fefbae874a8a39d9da1e324efed4" translate="yes" xml:space="preserve">
          <source>Skip::le</source>
          <target state="translated">Skip::le</target>
        </trans-unit>
        <trans-unit id="74eddfb30c713b021758da54f8dfa23e300f61e7" translate="yes" xml:space="preserve">
          <source>Skip::len</source>
          <target state="translated">Skip::len</target>
        </trans-unit>
        <trans-unit id="45c696c0e3866151d3a57b3bff59b8fff75e35d0" translate="yes" xml:space="preserve">
          <source>Skip::lt</source>
          <target state="translated">Skip::lt</target>
        </trans-unit>
        <trans-unit id="636efebe4a0de6af6b19ee04711f693b72aa7384" translate="yes" xml:space="preserve">
          <source>Skip::map</source>
          <target state="translated">Skip::map</target>
        </trans-unit>
        <trans-unit id="3110dfcf391e72c609e1fcb719b14d271b6338f1" translate="yes" xml:space="preserve">
          <source>Skip::max</source>
          <target state="translated">Skip::max</target>
        </trans-unit>
        <trans-unit id="cf79602620d165a3c07f034e49eccbc6fae960cf" translate="yes" xml:space="preserve">
          <source>Skip::max_by</source>
          <target state="translated">Skip::max_by</target>
        </trans-unit>
        <trans-unit id="cb499c31e556db2f15927d4f82a032492a61ceca" translate="yes" xml:space="preserve">
          <source>Skip::max_by_key</source>
          <target state="translated">Skip::max_by_key</target>
        </trans-unit>
        <trans-unit id="de3235931a068719ad0f8fc80b83d097f439212e" translate="yes" xml:space="preserve">
          <source>Skip::min</source>
          <target state="translated">Skip::min</target>
        </trans-unit>
        <trans-unit id="8e5aeeb79f94b335034d3d7c10d7cc32b084728e" translate="yes" xml:space="preserve">
          <source>Skip::min_by</source>
          <target state="translated">Skip::min_by</target>
        </trans-unit>
        <trans-unit id="446117a44e4232d0b4427dfab79f31d57b72b374" translate="yes" xml:space="preserve">
          <source>Skip::min_by_key</source>
          <target state="translated">Skip::min_by_key</target>
        </trans-unit>
        <trans-unit id="016ccdf91210df76c448998f1e0e4b330645b257" translate="yes" xml:space="preserve">
          <source>Skip::ne</source>
          <target state="translated">Skip::ne</target>
        </trans-unit>
        <trans-unit id="8712be814c452b15d7f4b42f9c05395226c88dcb" translate="yes" xml:space="preserve">
          <source>Skip::next</source>
          <target state="translated">Skip::next</target>
        </trans-unit>
        <trans-unit id="534d1f6dac0a6c0bdd3cac0df7681b2be1851f06" translate="yes" xml:space="preserve">
          <source>Skip::next_back</source>
          <target state="translated">Skip::next_back</target>
        </trans-unit>
        <trans-unit id="0ebc6ec7583aba4767668232540e401fd9ba6c7b" translate="yes" xml:space="preserve">
          <source>Skip::nth</source>
          <target state="translated">Skip::nth</target>
        </trans-unit>
        <trans-unit id="273d494c50d7f8cb0a2fb38ae8a28f07301aa066" translate="yes" xml:space="preserve">
          <source>Skip::nth_back</source>
          <target state="translated">Skip::nth_back</target>
        </trans-unit>
        <trans-unit id="dea71f0f125872655107e8b4862adffe97b60b5b" translate="yes" xml:space="preserve">
          <source>Skip::partial_cmp</source>
          <target state="translated">Skip::partial_cmp</target>
        </trans-unit>
        <trans-unit id="aa7460464f565bc9cd21936e33b7617d739e1591" translate="yes" xml:space="preserve">
          <source>Skip::partition</source>
          <target state="translated">Skip::partition</target>
        </trans-unit>
        <trans-unit id="075b408bc35851d7da6cfa726867a7bd57d185c9" translate="yes" xml:space="preserve">
          <source>Skip::peekable</source>
          <target state="translated">Skip::peekable</target>
        </trans-unit>
        <trans-unit id="47240470807be493a133c5eaddde44f49995839f" translate="yes" xml:space="preserve">
          <source>Skip::position</source>
          <target state="translated">Skip::position</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
