<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="rust">
    <body>
      <group id="rust">
        <trans-unit id="545e192087f2dee8a1244b50285f56354faded13" translate="yes" xml:space="preserve">
          <source>The warning suggests that we use &lt;code&gt;_i&lt;/code&gt; as a name instead: the underscore indicates that we intend for this variable to be unused. We can automatically apply that suggestion using the &lt;code&gt;rustfix&lt;/code&gt; tool by running the command &lt;code&gt;cargo fix&lt;/code&gt;:</source>
          <target state="translated">警告は、代わりに &lt;code&gt;_i&lt;/code&gt; を名前として使用することを示唆しています。アンダースコアは、この変数を使用しないことを意図していることを示しています。 &lt;code&gt;rustfix&lt;/code&gt; ツールを使用して、 &lt;code&gt;cargo fix&lt;/code&gt; コマンドを実行することにより、その提案を自動的に適用できます。</target>
        </trans-unit>
        <trans-unit id="71e5980a6bfd716abaaef858ffaa58512cff6b9e" translate="yes" xml:space="preserve">
          <source>The warning we get is this:</source>
          <target state="translated">私たちが受ける警告はこれです。</target>
        </trans-unit>
        <trans-unit id="01d3cf24ed7ac31e045df84ed43b543301d5071c" translate="yes" xml:space="preserve">
          <source>The way in which you need to specify lifetime parameters depends on what your function is doing. For example, if we changed the implementation of the &lt;code&gt;longest&lt;/code&gt; function to always return the first parameter rather than the longest string slice, we wouldn&amp;rsquo;t need to specify a lifetime on the &lt;code&gt;y&lt;/code&gt; parameter. The following code will compile:</source>
          <target state="translated">ライフタイムパラメータを指定する必要がある方法は、関数の動作によって異なります。たとえば、最長の文字列スライスではなく常に最初のパラメーターを返すように &lt;code&gt;longest&lt;/code&gt; 関数の実装を変更した場合、 &lt;code&gt;y&lt;/code&gt; パラメーターに有効期間を指定する必要はありません。次のコードはコンパイルされます。</target>
        </trans-unit>
        <trans-unit id="5b549318fc3f4ca028012969aeab8043ad858528" translate="yes" xml:space="preserve">
          <source>The way privacy works in Rust is that all items (functions, methods, structs, enums, modules, and constants) are private by default. Items in a parent module can&amp;rsquo;t use the private items inside child modules, but items in child modules can use the items in their ancestor modules. The reason is that child modules wrap and hide their implementation details, but the child modules can see the context in which they&amp;rsquo;re defined. To continue with the restaurant metaphor, think of the privacy rules as being like the back office of a restaurant: what goes on in there is private to restaurant customers, but office managers can see and do everything in the restaurant in which they operate.</source>
          <target state="translated">Rustでプライバシーが機能する方法は、すべてのアイテム（関数、メソッド、構造体、列挙型、モジュール、および定数）がデフォルトでプライベートであることです。親モジュールのアイテムは子モジュール内のプライベートアイテムを使用できませんが、子モジュールのアイテムは祖先モジュールのアイテムを使用できます。その理由は、子モジュールはその実装の詳細をラップして非表示にしますが、子モジュールはそれらが定義されているコンテキストを見ることができるからです。レストランのメタファーを続けるには、プライバシールールをレストランのバックオフィスのようなものと考えてください。そこで行われていることはレストランの顧客に限定されますが、オフィスマネージャーは彼らが運営するレストラン内のすべてを表示および実行できます。</target>
        </trans-unit>
        <trans-unit id="c954766baf952dffb19514bc82ccc04508ad4747" translate="yes" xml:space="preserve">
          <source>The way to define helper attributes is to put an &lt;code&gt;attributes&lt;/code&gt; key in the &lt;code&gt;proc_macro_derive&lt;/code&gt; macro with a comma separated list of identifiers that are the names of the helper attributes.</source>
          <target state="translated">ヘルパー属性を定義する方法は、 &lt;code&gt;attributes&lt;/code&gt; キーを &lt;code&gt;proc_macro_derive&lt;/code&gt; マクロに、ヘルパー属性の名前である識別子のコンマ区切りのリストとともに配置することです。</target>
        </trans-unit>
        <trans-unit id="b4ad5969b00a7de4e50dcfbec4f420300a121d22" translate="yes" xml:space="preserve">
          <source>The way to demonstrate this behavior is by running the program with &lt;code&gt;&amp;gt;&lt;/code&gt; and the filename, &lt;em&gt;output.txt&lt;/em&gt;, that we want to redirect the standard output stream to. We won&amp;rsquo;t pass any arguments, which should cause an error:</source>
          <target state="translated">この動作を示す方法は、標準出力ストリームをリダイレクトする先の &lt;code&gt;&amp;gt;&lt;/code&gt; とファイル名&lt;em&gt;output.txtを指定&lt;/em&gt;してプログラムを実行することです。エラーの原因となる引数は渡されません。</target>
        </trans-unit>
        <trans-unit id="4860fccc5b2b1b15ffbccd4a99af016a4e435d30" translate="yes" xml:space="preserve">
          <source>The wildcard pattern is always irrefutable.</source>
          <target state="translated">ワイルドカードパターンは常に反論の余地がありません。</target>
        </trans-unit>
        <trans-unit id="6ed876d97357afb4218b62acc26e1fb7fcb7f367" translate="yes" xml:space="preserve">
          <source>The workspace has one &lt;em&gt;target&lt;/em&gt; directory at the top level for the compiled artifacts to be placed into; the &lt;code&gt;adder&lt;/code&gt; crate doesn&amp;rsquo;t have its own &lt;em&gt;target&lt;/em&gt; directory. Even if we were to run &lt;code&gt;cargo build&lt;/code&gt; from inside the &lt;em&gt;adder&lt;/em&gt; directory, the compiled artifacts would still end up in &lt;em&gt;add/target&lt;/em&gt; rather than &lt;em&gt;add/adder/target&lt;/em&gt;. Cargo structures the &lt;em&gt;target&lt;/em&gt; directory in a workspace like this because the crates in a workspace are meant to depend on each other. If each crate had its own &lt;em&gt;target&lt;/em&gt; directory, each crate would have to recompile each of the other crates in the workspace to have the artifacts in its own &lt;em&gt;target&lt;/em&gt; directory. By sharing one &lt;em&gt;target&lt;/em&gt; directory, the crates can avoid unnecessary rebuilding.</source>
          <target state="translated">ワークスペースには、コンパイルされたアーティファクトを配置するための最上位レベルに1つの&lt;em&gt;ターゲット&lt;/em&gt;ディレクトリがあります。 &lt;code&gt;adder&lt;/code&gt; クレートは、自身の持っていません&lt;em&gt;ターゲット&lt;/em&gt;ディレクトリを。私たちが実行したとしても &lt;code&gt;cargo build&lt;/code&gt; 内側から&lt;em&gt;加算器&lt;/em&gt;ディレクトリ、コンパイル済みのアーティファクトはまだで終わるでしょう&lt;em&gt;アド/ターゲット&lt;/em&gt;ではなく、&lt;em&gt;追加/加算/ターゲット&lt;/em&gt;。ワークスペース内のクレートは相互に依存することを目的としているため、Cargo はワークスペース内の&lt;em&gt;ターゲット&lt;/em&gt;ディレクトリをこのように構築します。各クレートに独自の&lt;em&gt;ターゲット&lt;/em&gt;ディレクトリがある場合、各クレートは、ワークスペース内の他の各クレートを再コンパイルして、独自の成果物を持つ必要があります。&lt;em&gt;ターゲット&lt;/em&gt;ディレクトリ。1つの&lt;em&gt;ターゲット&lt;/em&gt;ディレクトリを共有することにより、クレートは不要な再構築を回避できます。</target>
        </trans-unit>
        <trans-unit id="94338f88d478ec6b62411179604be0f6a0e553b2" translate="yes" xml:space="preserve">
          <source>The workspace has one &lt;em&gt;target&lt;/em&gt; directory at the top level for the compiled artifacts to be placed into; the &lt;code&gt;adder&lt;/code&gt; package doesn&amp;rsquo;t have its own &lt;em&gt;target&lt;/em&gt; directory. Even if we were to run &lt;code&gt;cargo build&lt;/code&gt; from inside the &lt;em&gt;adder&lt;/em&gt; directory, the compiled artifacts would still end up in &lt;em&gt;add/target&lt;/em&gt; rather than &lt;em&gt;add/adder/target&lt;/em&gt;. Cargo structures the &lt;em&gt;target&lt;/em&gt; directory in a workspace like this because the crates in a workspace are meant to depend on each other. If each crate had its own &lt;em&gt;target&lt;/em&gt; directory, each crate would have to recompile each of the other crates in the workspace to have the artifacts in its own &lt;em&gt;target&lt;/em&gt; directory. By sharing one &lt;em&gt;target&lt;/em&gt; directory, the crates can avoid unnecessary rebuilding.</source>
          <target state="translated">ワークスペースには、コンパイルされたアーティファクトを配置するための最上位に1つの&lt;em&gt;ターゲット&lt;/em&gt;ディレクトリがあります。 &lt;code&gt;adder&lt;/code&gt; パッケージは、独自の持っていません&lt;em&gt;ターゲット&lt;/em&gt;ディレクトリを。私たちが実行したとしても &lt;code&gt;cargo build&lt;/code&gt; 内側から&lt;em&gt;加算器&lt;/em&gt;ディレクトリ、コンパイル済みのアーティファクトはまだで終わるでしょう&lt;em&gt;アド/ターゲット&lt;/em&gt;ではなく、&lt;em&gt;追加/加算/ターゲット&lt;/em&gt;。ワークスペース内のクレートは相互に依存することを意図しているため、貨物はこのようにワークスペース内の&lt;em&gt;ターゲット&lt;/em&gt;ディレクトリを構築します。各クレートに独自の&lt;em&gt;ターゲット&lt;/em&gt;ディレクトリがある場合、各クレートは、アーティファクトを独自に持つために、ワークスペース内の他の各クレートを再コンパイルする必要があります。&lt;em&gt;ターゲット&lt;/em&gt;ディレクトリ。1つの&lt;em&gt;ターゲット&lt;/em&gt;ディレクトリを共有することで、クレートは不要な再構築を回避できます。</target>
        </trans-unit>
        <trans-unit id="77f8b60c8bbd1e207542248a0d2f457b8e7e406f" translate="yes" xml:space="preserve">
          <source>The worst case cost of &lt;code&gt;pop&lt;/code&gt; on a heap containing &lt;em&gt;n&lt;/em&gt; elements is &lt;em&gt;O&lt;/em&gt;(log(&lt;em&gt;n&lt;/em&gt;)).</source>
          <target state="translated">&lt;em&gt;n個の&lt;/em&gt;要素を含むヒープでの &lt;code&gt;pop&lt;/code&gt; の最悪の場合のコストは&lt;em&gt;O&lt;/em&gt;（log（&lt;em&gt;n&lt;/em&gt;））です。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="99d51b0abe084f304807f0bb44acfa16e7f4af5a" translate="yes" xml:space="preserve">
          <source>The worst case cost of &lt;code&gt;pop&lt;/code&gt; on a heap containing &lt;em&gt;n&lt;/em&gt; elements is O(log n).</source>
          <target state="translated">&lt;em&gt;n個の&lt;/em&gt;要素を含むヒープでの &lt;code&gt;pop&lt;/code&gt; の最悪の場合のコストはO（log n）です。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="fc0b397ce3728851f33d0ec0d540c025798521e0" translate="yes" xml:space="preserve">
          <source>The worst case cost of a &lt;em&gt;single&lt;/em&gt; call to &lt;code&gt;push&lt;/code&gt; is &lt;em&gt;O&lt;/em&gt;(&lt;em&gt;n&lt;/em&gt;). The worst case occurs when capacity is exhausted and needs a resize. The resize cost has been amortized in the previous figures.</source>
          <target state="translated">&lt;code&gt;push&lt;/code&gt; する&lt;em&gt;1回の&lt;/em&gt;呼び出しの最悪の場合のコストは&lt;em&gt;O&lt;/em&gt;（&lt;em&gt;n&lt;/em&gt;）です。最悪のケースは、容量が使い果たされてサイズ変更が必要な場合に発生します。サイズ変更費用は前の図で償却されています。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="238b65c05553bd00df49cce92fea6a1b783b67b3" translate="yes" xml:space="preserve">
          <source>The worst case cost of a &lt;em&gt;single&lt;/em&gt; call to &lt;code&gt;push&lt;/code&gt; is O(n). The worst case occurs when capacity is exhausted and needs a resize. The resize cost has been amortized in the previous figures.</source>
          <target state="translated">&lt;code&gt;push&lt;/code&gt; する&lt;em&gt;単一の&lt;/em&gt;呼び出しの最悪の場合のコストはO（n）です。最悪のケースは、容量が使い果たされ、サイズ変更が必要な場合に発生します。前の図では、サイズ変更コストは償却されています。</target>
        </trans-unit>
        <trans-unit id="9abd2f24e6d1b46930e8a99311ffd002b596e31a" translate="yes" xml:space="preserve">
          <source>The writing portion of the &lt;a href=&quot;struct.tcpstream&quot;&gt;&lt;code&gt;TcpStream&lt;/code&gt;&lt;/a&gt; should be shut down.</source>
          <target state="translated">&lt;a href=&quot;struct.tcpstream&quot;&gt; &lt;code&gt;TcpStream&lt;/code&gt; &lt;/a&gt;の書き込み部分はシャットダウンする必要があります。</target>
        </trans-unit>
        <trans-unit id="4a689baec3acd327f6907f5ce5547d1d13e010a8" translate="yes" xml:space="preserve">
          <source>Their definition should always match the ABI defined in &lt;code&gt;rustc::back::abi&lt;/code&gt;.</source>
          <target state="translated">それらの定義は、 &lt;code&gt;rustc::back::abi&lt;/code&gt; 定義されたABIと常に一致する必要があります。</target>
        </trans-unit>
        <trans-unit id="1e1df95ca1bc76e0d356b0c10d06f6035304f599" translate="yes" xml:space="preserve">
          <source>Their definition should always match the ABI defined in &lt;code&gt;rustc_middle::ty::layout&lt;/code&gt;.</source>
          <target state="translated">それらの定義は、 &lt;code&gt;rustc_middle::ty::layout&lt;/code&gt; 定義されているABIと常に一致する必要があります。</target>
        </trans-unit>
        <trans-unit id="534bcf9b4ee06ae0b390b746db849c9e3d0f83df" translate="yes" xml:space="preserve">
          <source>Then create a new directory, &lt;em&gt;src/bin&lt;/em&gt;, and move the binary crate rooted in &lt;em&gt;src/main.rs&lt;/em&gt; into &lt;em&gt;src/bin/main.rs&lt;/em&gt;. Doing so will make the library crate the primary crate in the &lt;em&gt;hello&lt;/em&gt; directory; we can still run the binary in &lt;em&gt;src/bin/main.rs&lt;/em&gt; using &lt;code&gt;cargo run&lt;/code&gt;. After moving the &lt;em&gt;main.rs&lt;/em&gt; file, edit it to bring the library crate in and bring &lt;code&gt;ThreadPool&lt;/code&gt; into scope by adding the following code to the top of &lt;em&gt;src/bin/main.rs&lt;/em&gt;:</source>
          <target state="translated">次に、新しいディレクトリ&lt;em&gt;src / binを&lt;/em&gt;作成し、&lt;em&gt;src / main.rs&lt;/em&gt;をルートとするバイナリクレートを&lt;em&gt;src / bin / main.rsに移動し&lt;/em&gt;ます。そうすることで、ライブラリが&lt;em&gt;hello&lt;/em&gt;ディレクトリのプライマリクレートになります。それでも、 &lt;code&gt;cargo run&lt;/code&gt; を使用して&lt;em&gt;src / bin / main.rsで&lt;/em&gt;バイナリを実行できます。&lt;em&gt;main.rs&lt;/em&gt;ファイルを移動した後、次のコードを&lt;em&gt;src / bin / main.rsの&lt;/em&gt;先頭に追加して、ファイルを編集してライブラリクレートを入れ、 &lt;code&gt;ThreadPool&lt;/code&gt; をスコープに入れます。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="848cf8d4f1542ccd5c9500b227f162479dfe2c8c" translate="yes" xml:space="preserve">
          <source>Then generate a new library crate named &lt;code&gt;add-one&lt;/code&gt;:</source>
          <target state="translated">次に、 &lt;code&gt;add-one&lt;/code&gt; という名前の新しいライブラリクレートを生成します。</target>
        </trans-unit>
        <trans-unit id="02ec96ae1b226ff410efb69c0d4d60e58a7042ce" translate="yes" xml:space="preserve">
          <source>Then implementing the &lt;code&gt;OutlinePrint&lt;/code&gt; trait on &lt;code&gt;Point&lt;/code&gt; will compile successfully, and we can call &lt;code&gt;outline_print&lt;/code&gt; on a &lt;code&gt;Point&lt;/code&gt; instance to display it within an outline of asterisks.</source>
          <target state="translated">次に、 &lt;code&gt;Point&lt;/code&gt; に &lt;code&gt;OutlinePrint&lt;/code&gt; トレイトを実装すると正常にコンパイルされ、 &lt;code&gt;Point&lt;/code&gt; インスタンスで &lt;code&gt;outline_print&lt;/code&gt; を呼び出して、アスタリスクのアウトライン内に表示することができます。</target>
        </trans-unit>
        <trans-unit id="3aac37973a618f0b45f35c262a8297327ce65a0e" translate="yes" xml:space="preserve">
          <source>Then install the language server support in your particular IDE; you&amp;rsquo;ll gain abilities such as autocompletion, jump to definition, and inline errors.</source>
          <target state="translated">次に、特定のIDEに言語サーバーサポートをインストールします。オートコンプリート、定義へのジャンプ、インラインエラーなどの機能を利用できます。</target>
        </trans-unit>
        <trans-unit id="636019afbd1be275dc1f855f27602c31a7743704" translate="yes" xml:space="preserve">
          <source>Then run &lt;code&gt;cargo test&lt;/code&gt; again. The output now shows &lt;code&gt;exploration&lt;/code&gt; instead of &lt;code&gt;it_works&lt;/code&gt;:</source>
          <target state="translated">その後、 &lt;code&gt;cargo test&lt;/code&gt; 再度実行します。出力には &lt;code&gt;it_works&lt;/code&gt; ではなく &lt;code&gt;exploration&lt;/code&gt; が表示されます。</target>
        </trans-unit>
        <trans-unit id="7eae4a5123d629fb5914cfbce2d33e244889b442" translate="yes" xml:space="preserve">
          <source>Then the compiler applies the first rule, which specifies that each parameter gets its own lifetime. We&amp;rsquo;ll call it &lt;code&gt;'a&lt;/code&gt; as usual, so now the signature is this:</source>
          <target state="translated">次に、コンパイラーは最初の規則を適用します。これは、各パラメーターが独自の存続期間を取得することを指定します。我々はそれを呼ぶだろう &lt;code&gt;'a&lt;/code&gt; いつものように、今署名はこれです：</target>
        </trans-unit>
        <trans-unit id="fe1bb69db1725d721fdb3af05034044cb61cb940" translate="yes" xml:space="preserve">
          <source>Then we add five new lines at the bottom that use the &lt;code&gt;Ordering&lt;/code&gt; type. The &lt;code&gt;cmp&lt;/code&gt; method compares two values and can be called on anything that can be compared. It takes a reference to whatever you want to compare with: here it&amp;rsquo;s comparing the &lt;code&gt;guess&lt;/code&gt; to the &lt;code&gt;secret_number&lt;/code&gt;. Then it returns a variant of the &lt;code&gt;Ordering&lt;/code&gt; enum we brought into scope with the &lt;code&gt;use&lt;/code&gt; statement. We use a &lt;a href=&quot;ch06-02-match&quot;&gt;&lt;code&gt;match&lt;/code&gt;&lt;/a&gt; expression to decide what to do next based on which variant of &lt;code&gt;Ordering&lt;/code&gt; was returned from the call to &lt;code&gt;cmp&lt;/code&gt; with the values in &lt;code&gt;guess&lt;/code&gt; and &lt;code&gt;secret_number&lt;/code&gt;.</source>
          <target state="translated">次に、下部に &lt;code&gt;Ordering&lt;/code&gt; タイプを使用する5つの新しい行を追加します。 &lt;code&gt;cmp&lt;/code&gt; 方法は、2つの値を比較し、比較することができるもので呼び出すことができます。それはあなたが比較したいものへの参照を取ります：ここでは &lt;code&gt;guess&lt;/code&gt; を &lt;code&gt;secret_number&lt;/code&gt; と比較しています。次に、 &lt;code&gt;use&lt;/code&gt; ステートメントでスコープに組み込んだ &lt;code&gt;Ordering&lt;/code&gt; enumのバリアントを返します。&lt;a href=&quot;ch06-02-match&quot;&gt; &lt;code&gt;match&lt;/code&gt; &lt;/a&gt;式を使用して、 &lt;code&gt;guess&lt;/code&gt; と &lt;code&gt;secret_number&lt;/code&gt; の値を持つ &lt;code&gt;cmp&lt;/code&gt; の呼び出しから返された &lt;code&gt;Ordering&lt;/code&gt; のバリアントに基づいて、次に何をするかを決定します。</target>
        </trans-unit>
        <trans-unit id="42504942265ee7c7c73ee70d30a7653d906cc136" translate="yes" xml:space="preserve">
          <source>Then we create a &lt;em&gt;src/front_of_house&lt;/em&gt; directory and a file &lt;em&gt;src/front_of_house/hosting.rs&lt;/em&gt; to contain the definitions made in the &lt;code&gt;hosting&lt;/code&gt; module:</source>
          <target state="translated">次に、&lt;em&gt;src / front_of_house&lt;/em&gt;ディレクトリと&lt;em&gt;src / front_of_house / hosting.rs&lt;/em&gt;ファイルを作成して、 &lt;code&gt;hosting&lt;/code&gt; モジュールで作成した定義を&lt;em&gt;含め&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="8c054131a62b68de933e0bf587b858ee6793392b" translate="yes" xml:space="preserve">
          <source>Then we create a new &lt;code&gt;String&lt;/code&gt; in variable &lt;code&gt;s&lt;/code&gt; and call the &lt;code&gt;read_to_string&lt;/code&gt; method on the file handle in &lt;code&gt;f&lt;/code&gt; to read the contents of the file into &lt;code&gt;s&lt;/code&gt;. The &lt;code&gt;read_to_string&lt;/code&gt; method also returns a &lt;code&gt;Result&lt;/code&gt; because it might fail, even though &lt;code&gt;File::open&lt;/code&gt; succeeded. So we need another &lt;code&gt;match&lt;/code&gt; to handle that &lt;code&gt;Result&lt;/code&gt;: if &lt;code&gt;read_to_string&lt;/code&gt; succeeds, then our function has succeeded, and we return the username from the file that&amp;rsquo;s now in &lt;code&gt;s&lt;/code&gt; wrapped in an &lt;code&gt;Ok&lt;/code&gt;. If &lt;code&gt;read_to_string&lt;/code&gt; fails, we return the error value in the same way that we returned the error value in the &lt;code&gt;match&lt;/code&gt; that handled the return value of &lt;code&gt;File::open&lt;/code&gt;. However, we don&amp;rsquo;t need to explicitly say &lt;code&gt;return&lt;/code&gt;, because this is the last expression in the function.</source>
          <target state="translated">次に、変数 &lt;code&gt;s&lt;/code&gt; に新しい &lt;code&gt;String&lt;/code&gt; を作成し、 &lt;code&gt;f&lt;/code&gt; のファイルハンドルで &lt;code&gt;read_to_string&lt;/code&gt; メソッドを呼び出して、ファイルの内容を &lt;code&gt;s&lt;/code&gt; に読み取ります。 &lt;code&gt;read_to_string&lt;/code&gt; 方法も返す &lt;code&gt;Result&lt;/code&gt; 、それが失敗する可能性があるためにもかかわらず、 &lt;code&gt;File::open&lt;/code&gt; 成功しました。私たちは別の必要があるので、 &lt;code&gt;match&lt;/code&gt; その処理するために &lt;code&gt;Result&lt;/code&gt; 次の場合 &lt;code&gt;read_to_string&lt;/code&gt; は成功し、その後、私たちの関数が成功した、と私たちは、今のファイルからユーザ名を返す &lt;code&gt;s&lt;/code&gt; に包まれて &lt;code&gt;Ok&lt;/code&gt; 。 &lt;code&gt;read_to_string&lt;/code&gt; の場合失敗した場合は、 &lt;code&gt;File::open&lt;/code&gt; 戻り値を処理した &lt;code&gt;match&lt;/code&gt; でエラー値を返したのと同じ方法でエラー値を返します。ただし、 &lt;code&gt;return&lt;/code&gt; は関数の最後の式なので、明示的に返す必要はありません。</target>
        </trans-unit>
        <trans-unit id="deae9012508053fe94f96907583eae7e4c8a687f" translate="yes" xml:space="preserve">
          <source>Then we implement an associated function named &lt;code&gt;new&lt;/code&gt; on &lt;code&gt;Guess&lt;/code&gt; that creates instances of &lt;code&gt;Guess&lt;/code&gt; values. The &lt;code&gt;new&lt;/code&gt; function is defined to have one parameter named &lt;code&gt;value&lt;/code&gt; of type &lt;code&gt;i32&lt;/code&gt; and to return a &lt;code&gt;Guess&lt;/code&gt;. The code in the body of the &lt;code&gt;new&lt;/code&gt; function tests &lt;code&gt;value&lt;/code&gt; to make sure it&amp;rsquo;s between 1 and 100. If &lt;code&gt;value&lt;/code&gt; doesn&amp;rsquo;t pass this test, we make a &lt;code&gt;panic!&lt;/code&gt; call, which will alert the programmer who is writing the calling code that they have a bug they need to fix, because creating a &lt;code&gt;Guess&lt;/code&gt; with a &lt;code&gt;value&lt;/code&gt; outside this range would violate the contract that &lt;code&gt;Guess::new&lt;/code&gt; is relying on. The conditions in which &lt;code&gt;Guess::new&lt;/code&gt; might panic should be discussed in its public-facing API documentation; we&amp;rsquo;ll cover documentation conventions indicating the possibility of a &lt;code&gt;panic!&lt;/code&gt; in the API documentation that you create in Chapter 14. If &lt;code&gt;value&lt;/code&gt; does pass the test, we create a new &lt;code&gt;Guess&lt;/code&gt; with its &lt;code&gt;value&lt;/code&gt; field set to the &lt;code&gt;value&lt;/code&gt; parameter and return the &lt;code&gt;Guess&lt;/code&gt;.</source>
          <target state="translated">次に、 &lt;code&gt;Guess&lt;/code&gt; に &lt;code&gt;new&lt;/code&gt; という名前の関連する関数を実装し、 &lt;code&gt;Guess&lt;/code&gt; 値のインスタンスを作成します。 &lt;code&gt;new&lt;/code&gt; 機能は、一つのパラメータの名前持つように定義された &lt;code&gt;value&lt;/code&gt; 型の &lt;code&gt;i32&lt;/code&gt; して返すように &lt;code&gt;Guess&lt;/code&gt; 。 &lt;code&gt;new&lt;/code&gt; 関数の本体のコードは、 &lt;code&gt;value&lt;/code&gt; が1から100の間であることを確認するために値をテストします。 &lt;code&gt;value&lt;/code&gt; がこのテストに合格しない場合、 &lt;code&gt;panic!&lt;/code&gt; 作成しているため、彼らは修正する必要があるバグを持っていることを呼び出すコードを書いているプログラマが通知されます呼び出し、 &lt;code&gt;Guess&lt;/code&gt; して &lt;code&gt;value&lt;/code&gt; この範囲外では、 &lt;code&gt;Guess::new&lt;/code&gt; が依存している契約に違反します。 &lt;code&gt;Guess::new&lt;/code&gt; パニックが発生する可能性がある条件については、公開されているAPIドキュメントで説明する必要があります。 &lt;code&gt;panic!&lt;/code&gt; 可能性を示すドキュメンテーション規則をカバーします！場合は、第14章で作成することをAPIドキュメントに &lt;code&gt;value&lt;/code&gt; テストに合格しない、我々は新しい作成 &lt;code&gt;Guess&lt;/code&gt; その持つ &lt;code&gt;value&lt;/code&gt; にフィールドセット &lt;code&gt;value&lt;/code&gt; パラメータを返すと &lt;code&gt;Guess&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="06b6b70a87228a4df8ed0e498c6c809f243dabd9" translate="yes" xml:space="preserve">
          <source>Then we return two mutable slices in a tuple: one from the start of the original slice to the &lt;code&gt;mid&lt;/code&gt; index and another from &lt;code&gt;mid&lt;/code&gt; to the end of the slice.</source>
          <target state="translated">次に、2つの変更可能なスライスをタプルで返します。1つは元のスライスの最初から &lt;code&gt;mid&lt;/code&gt; インデックスまで、もう1つは &lt;code&gt;mid&lt;/code&gt; からスライスの最後までです。</target>
        </trans-unit>
        <trans-unit id="d29498b87e97b7beddcde1cb5378fcb2cbabe3a8" translate="yes" xml:space="preserve">
          <source>Then you must define an implementation for &lt;a href=&quot;trait.ord#tymethod.cmp&quot;&gt;&lt;code&gt;cmp&lt;/code&gt;&lt;/a&gt;. You may find it useful to use &lt;a href=&quot;trait.ord#tymethod.cmp&quot;&gt;&lt;code&gt;cmp&lt;/code&gt;&lt;/a&gt; on your type's fields.</source>
          <target state="translated">次に、&lt;a href=&quot;trait.ord#tymethod.cmp&quot;&gt; &lt;code&gt;cmp&lt;/code&gt; の&lt;/a&gt;実装を定義する必要があります。タイプのフィールドで&lt;a href=&quot;trait.ord#tymethod.cmp&quot;&gt; &lt;code&gt;cmp&lt;/code&gt; &lt;/a&gt;を使用すると便利な場合があります。</target>
        </trans-unit>
        <trans-unit id="884190657324310c04e2504f5fc0e76845d895ae" translate="yes" xml:space="preserve">
          <source>Then you must define an implementation for &lt;code&gt;cmp()&lt;/code&gt;. You may find it useful to use &lt;code&gt;cmp()&lt;/code&gt; on your type's fields.</source>
          <target state="translated">次に、 &lt;code&gt;cmp()&lt;/code&gt; の実装を定義する必要があります。タイプのフィールドで &lt;code&gt;cmp()&lt;/code&gt; を使用すると便利な場合があります。</target>
        </trans-unit>
        <trans-unit id="0d177ce772cf21906084a9438690b47406434422" translate="yes" xml:space="preserve">
          <source>Then you&amp;rsquo;ll learn how to use &lt;em&gt;traits&lt;/em&gt; to define behavior in a generic way. You can combine traits with generic types to constrain a generic type to only those types that have a particular behavior, as opposed to just any type.</source>
          <target state="translated">次に、&lt;em&gt;特性&lt;/em&gt;を使用して一般的な方法で動作を定義する方法を学びます。特性をジェネリック型と組み合わせて、ジェネリック型を、任意の型だけではなく、特定の動作を持つ型のみに制約できます。</target>
        </trans-unit>
        <trans-unit id="ddeec83a6e1ebd77d0b40c2a12564ec960334a02" translate="yes" xml:space="preserve">
          <source>Then, for each candidate type &lt;code&gt;T&lt;/code&gt;, search for a &lt;a href=&quot;../visibility-and-privacy&quot;&gt;visible&lt;/a&gt; method with a receiver of that type in the following places:</source>
          <target state="translated">次に、候補タイプ &lt;code&gt;T&lt;/code&gt; ごとに、次の場所でそのタイプのレシーバーを使用して&lt;a href=&quot;../visibility-and-privacy&quot;&gt;可視&lt;/a&gt;メソッドを検索します。</target>
        </trans-unit>
        <trans-unit id="c7f32ff9ae959e326529e5b742ae1c333e7b2254" translate="yes" xml:space="preserve">
          <source>Then, in your new &lt;em&gt;variables&lt;/em&gt; directory, open &lt;em&gt;src/main.rs&lt;/em&gt; and replace its code with the following code that won&amp;rsquo;t compile just yet:</source>
          <target state="translated">次に、新しい&lt;em&gt;変数&lt;/em&gt;ディレクトリで&lt;em&gt;src / main.rs&lt;/em&gt;を開き、そのコードを、まだコンパイルされていない次のコードに置き換えます。</target>
        </trans-unit>
        <trans-unit id="0c8f840e153942ef31581018e9e810864accdec7" translate="yes" xml:space="preserve">
          <source>Then, to bring &lt;code&gt;rand&lt;/code&gt; definitions into the scope of our package, we added a &lt;code&gt;use&lt;/code&gt; line starting with the name of the crate, &lt;code&gt;rand&lt;/code&gt;, and listed the items we wanted to bring into scope. Recall that in the &lt;a href=&quot;ch02-00-guessing-game-tutorial#generating-a-random-number&quot;&gt;&amp;ldquo;Generating a Random Number&amp;rdquo;&lt;/a&gt; section in Chapter 2, we brought the &lt;code&gt;Rng&lt;/code&gt; trait into scope and called the &lt;code&gt;rand::thread_rng&lt;/code&gt; function:</source>
          <target state="translated">次に、 &lt;code&gt;rand&lt;/code&gt; 定義をパッケージのスコープに含めるために、クレートの名前である &lt;code&gt;rand&lt;/code&gt; で始まる &lt;code&gt;use&lt;/code&gt; 行を追加し、スコープに入れたいアイテムをリストしました。第2章の&lt;a href=&quot;ch02-00-guessing-game-tutorial#generating-a-random-number&quot;&gt;「乱数の生成」&lt;/a&gt;セクションで、 &lt;code&gt;Rng&lt;/code&gt; 特性をスコープに入れ、 &lt;code&gt;rand::thread_rng&lt;/code&gt; 関数を呼び出したことを思い出してください。</target>
        </trans-unit>
        <trans-unit id="cbbc8078ba28a9ecb4224d46afd42558773fa640" translate="yes" xml:space="preserve">
          <source>Then, to bring &lt;code&gt;rand&lt;/code&gt; definitions into the scope of our package, we added a &lt;code&gt;use&lt;/code&gt; line starting with the name of the package, &lt;code&gt;rand&lt;/code&gt;, and listed the items we wanted to bring into scope. Recall that in the &lt;a href=&quot;ch02-00-guessing-game-tutorial#generating-a-random-number&quot;&gt;&amp;ldquo;Generating a Random Number&amp;rdquo;&lt;/a&gt; section in Chapter 2, we brought the &lt;code&gt;Rng&lt;/code&gt; trait into scope and called the &lt;code&gt;rand::thread_rng&lt;/code&gt; function:</source>
          <target state="translated">次に、 &lt;code&gt;rand&lt;/code&gt; 定義をパッケージのスコープに入れるために、パッケージの名前 &lt;code&gt;rand&lt;/code&gt; で始まる &lt;code&gt;use&lt;/code&gt; 行を追加し、スコープに入れたいアイテムをリストしました。第2章の&lt;a href=&quot;ch02-00-guessing-game-tutorial#generating-a-random-number&quot;&gt;「乱数の生成」&lt;/a&gt;セクションで、 &lt;code&gt;Rng&lt;/code&gt; トレイトをスコープに &lt;code&gt;rand::thread_rng&lt;/code&gt; 、rand :: thread_rng関数を呼び出したことを思い出してください。</target>
        </trans-unit>
        <trans-unit id="ea0671790854fadbc007a7d3ab3c99a7a0c53f74" translate="yes" xml:space="preserve">
          <source>Theoretically, this code should compile. Unfortunately, the Rust compiler isn&amp;rsquo;t perfect yet, and we get this error:</source>
          <target state="translated">理論的には、このコードはコンパイルする必要があります。残念ながら、Rustコンパイラはまだ完全ではなく、次のエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="7bb0fb711ce84d52df9718e0b2a2ec2dabc6a07f" translate="yes" xml:space="preserve">
          <source>There are a couple of solutions for this.</source>
          <target state="translated">これにはいくつかの解決策があります。</target>
        </trans-unit>
        <trans-unit id="530488aa6f064fc1ecb7dc7a5a0bf4b2dc63964c" translate="yes" xml:space="preserve">
          <source>There are a few things that &lt;code&gt;transmute&lt;/code&gt; is really useful for.</source>
          <target state="translated">&lt;code&gt;transmute&lt;/code&gt; が本当に役立ついくつかのことがあります。</target>
        </trans-unit>
        <trans-unit id="e38257a0874550d292627aecb2605763613ccaf1" translate="yes" xml:space="preserve">
          <source>There are a handful of shortcuts provided to make writing constructors more convenient, most common of which is the Field Init shorthand. When there is a variable and a field of the same name, the assignment can be simplified from &lt;code&gt;field: field&lt;/code&gt; into simply &lt;code&gt;field&lt;/code&gt;. The following example of a hypothetical constructor demonstrates this:</source>
          <target state="translated">コンストラクターの作成をより便利にするためにいくつかのショートカットが用意されていますが、最も一般的なものはField Init省略形です。変数と同じ名前のフィールドがある場合、割り当ては &lt;code&gt;field: field&lt;/code&gt; から単純な &lt;code&gt;field&lt;/code&gt; に単純化できます。次の架空のコンストラクターの例は、これを示しています。</target>
        </trans-unit>
        <trans-unit id="63a966968ec2346aede6a0d18395aa406c237072" translate="yes" xml:space="preserve">
          <source>There are a number of &lt;a href=&quot;#functions-1&quot;&gt;functions&lt;/a&gt; that offer access to various features. For example, we can use three of these functions to copy everything from standard input to standard output:</source>
          <target state="translated">さまざまな機能へのアクセスを提供する多くの&lt;a href=&quot;#functions-1&quot;&gt;機能&lt;/a&gt;があります。たとえば、次の3つの関数を使用して、すべてを標準入力から標準出力にコピーできます。</target>
        </trans-unit>
        <trans-unit id="1f79d0ffb253cf5d15cccef1c760f3edf4c3cd7b" translate="yes" xml:space="preserve">
          <source>There are a number of &lt;code&gt;debug_*&lt;/code&gt; methods on &lt;a href=&quot;struct.formatter&quot;&gt;&lt;code&gt;Formatter&lt;/code&gt;&lt;/a&gt; to help you with manual implementations, such as &lt;a href=&quot;struct.formatter#method.debug_struct&quot;&gt;&lt;code&gt;debug_struct&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;struct.formatter&quot;&gt; &lt;code&gt;Formatter&lt;/code&gt; &lt;/a&gt;には、&lt;a href=&quot;struct.formatter#method.debug_struct&quot;&gt; &lt;code&gt;debug_struct&lt;/code&gt; &lt;/a&gt;などの手動実装を支援する多くの &lt;code&gt;debug_*&lt;/code&gt; メソッドがあります。</target>
        </trans-unit>
        <trans-unit id="8e1d6f0ae7b1514d15119ee9f085506bcbaba7ce" translate="yes" xml:space="preserve">
          <source>There are a number of helper methods on the &lt;a href=&quot;struct.formatter&quot;&gt;&lt;code&gt;Formatter&lt;/code&gt;&lt;/a&gt; struct to help you with manual implementations, such as &lt;a href=&quot;struct.formatter#method.debug_struct&quot;&gt;&lt;code&gt;debug_struct&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;struct.formatter&quot;&gt; &lt;code&gt;Formatter&lt;/code&gt; &lt;/a&gt;構造体には、&lt;a href=&quot;struct.formatter#method.debug_struct&quot;&gt; &lt;code&gt;debug_struct&lt;/code&gt; &lt;/a&gt;などの手動実装を支援するためのヘルパーメソッドがいくつかあります。</target>
        </trans-unit>
        <trans-unit id="087920b8740a66ec282180bff3885f708e5bb842" translate="yes" xml:space="preserve">
          <source>There are a number of related macros in the &lt;a href=&quot;../macro.format&quot;&gt;&lt;code&gt;format!&lt;/code&gt;&lt;/a&gt; family. The ones that are currently implemented are:</source>
          <target state="translated">&lt;a href=&quot;../macro.format&quot;&gt; &lt;code&gt;format!&lt;/code&gt; &lt;/a&gt;は、関連するマクロが多数あります！家族。現在実装されているものは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="28043d56de08a63f7e30e165bfcf6d512b961039" translate="yes" xml:space="preserve">
          <source>There are also some platform-specific ABI strings:</source>
          <target state="translated">また、プラットフォーム固有のABI文字列もあります。</target>
        </trans-unit>
        <trans-unit id="4e3263bd4c02d9329fee29d313cf8ea903653894" translate="yes" xml:space="preserve">
          <source>There are both a positive and negative trait implementation for the same type.</source>
          <target state="translated">同じタイプでも正の形質実装と負の形質実装があります。</target>
        </trans-unit>
        <trans-unit id="9dfc0ac14db9531a0dcf3d9f3c7feabed396e9c2" translate="yes" xml:space="preserve">
          <source>There are conflicting trait implementations for the same type.</source>
          <target state="translated">同じ型には相反する形質の実装があります。</target>
        </trans-unit>
        <trans-unit id="cb600a231699778e7c442e8d1b0c5af1c6ce3e98" translate="yes" xml:space="preserve">
          <source>There are conflicting trait implementations for the same type. Example of erroneous code:</source>
          <target state="translated">同じ型に相反する形質の実装があります。誤ったコードの例。</target>
        </trans-unit>
        <trans-unit id="c7d32d1dc6c93776049af2c0d8da18ad1a5c107b" translate="yes" xml:space="preserve">
          <source>There are insufficient permissions to access the current directory.</source>
          <target state="translated">カレントディレクトリにアクセスするためのパーミッションが不足しています。</target>
        </trans-unit>
        <trans-unit id="320a725df7a67ccef8f0da8b29889ac40ad1812c" translate="yes" xml:space="preserve">
          <source>There are limitations when matching on non-exhaustive types outside of the defining crate:</source>
          <target state="translated">定義された木枠外の非網羅的な型でマッチングする場合は制限があります。</target>
        </trans-unit>
        <trans-unit id="c57d9d7a8463095f936949e3bd422fd7ce763db3" translate="yes" xml:space="preserve">
          <source>There are multiple trade-offs to consider in addition to the prevention of bugs. For example, in cases where you&amp;rsquo;re using large data structures, mutating an instance in place may be faster than copying and returning newly allocated instances. With smaller data structures, creating new instances and writing in a more functional programming style may be easier to think through, so lower performance might be a worthwhile penalty for gaining that clarity.</source>
          <target state="translated">バグの防止に加えて、考慮すべき複数のトレードオフがあります。たとえば、大きなデータ構造を使用している場合、インスタンスを適切に変更すると、新しく割り当てられたインスタンスをコピーして返すよりも高速になる場合があります。データ構造が小さい場合は、新しいインスタンスを作成してより機能的なプログラミングスタイルで記述する方が簡単に考えることができるため、パフォーマンスを低下させることは、その明快さを得る価値のある不利益になる場合があります。</target>
        </trans-unit>
        <trans-unit id="d53022046c1585c76ce2c3d1de0757bc5d58a5d7" translate="yes" xml:space="preserve">
          <source>There are multiple ways to create a new &lt;a href=&quot;struct.string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; from a string literal:</source>
          <target state="translated">文字列リテラルから新しい&lt;a href=&quot;struct.string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;を作成する方法はいくつかあります。</target>
        </trans-unit>
        <trans-unit id="b89e39f486cb11ae236a0c1ba092d84b1be61d5a" translate="yes" xml:space="preserve">
          <source>There are multiple ways we could change how our web server works to avoid having more requests back up behind a slow request; the one we&amp;rsquo;ll implement is a thread pool.</source>
          <target state="translated">遅いリクエストの背後でより多くのリクエストがバックアップされるのを避けるために、Webサーバーの動作を変更する方法はいくつかあります。実装するのはスレッドプールです。</target>
        </trans-unit>
        <trans-unit id="cbbb8fb2683dd85eb0ca22283c9bb44fdd37598e" translate="yes" xml:space="preserve">
          <source>There are no function calls, macros, or even &lt;code&gt;let&lt;/code&gt; statements in the &lt;code&gt;five&lt;/code&gt; function&amp;mdash;just the number &lt;code&gt;5&lt;/code&gt; by itself. That&amp;rsquo;s a perfectly valid function in Rust. Note that the function&amp;rsquo;s return type is specified too, as &lt;code&gt;-&amp;gt; i32&lt;/code&gt;. Try running this code; the output should look like this:</source>
          <target state="translated">そこには関数呼び出し、マクロはありません、あるいは &lt;code&gt;let&lt;/code&gt; 中文 &lt;code&gt;five&lt;/code&gt; 機能だけで数 &lt;code&gt;5&lt;/code&gt; を自身で。これはRustで完全に有効な関数です。関数の戻り値の型も &lt;code&gt;-&amp;gt; i32&lt;/code&gt; ように指定されていることに注意してください。このコードを実行してみてください。出力は次のようになります。</target>
        </trans-unit>
        <trans-unit id="e3048305fc74fc67f0b28e1af09fa647633b200c" translate="yes" xml:space="preserve">
          <source>There are no generic type parameters.</source>
          <target state="translated">汎用型のパラメータはありません。</target>
        </trans-unit>
        <trans-unit id="6dc334d98456ba931a1cb0e3e3cebe2b287fda18" translate="yes" xml:space="preserve">
          <source>There are no guarantees of data layout made by this representation.</source>
          <target state="translated">この表現は、データレイアウトを保証するものではありません。</target>
        </trans-unit>
        <trans-unit id="73292d3af30172448139b6d5386689eb5562d30e" translate="yes" xml:space="preserve">
          <source>There are no guarantees whatsoever that offsetting the pointer will not overflow or go beyond the allocation that the pointer points into. It is up to the caller to ensure that the returned offset is correct in all terms other than alignment.</source>
          <target state="translated">ポインタのオフセットがオーバーフローしたり、ポインタが指すアロケーションを超えたりしないことは保証されていません。返されたオフセットがアライメント以外のすべての点で正しいことを確認するのは呼び出し側の責任です。</target>
        </trans-unit>
        <trans-unit id="a86100f636fbb472fb5b1863356f0448a9ae85a5" translate="yes" xml:space="preserve">
          <source>There are no guarantees whatsover that offsetting the pointer will not overflow or go beyond the allocation that the pointer points into. It is up to the caller to ensure that the returned offset is correct in all terms other than alignment.</source>
          <target state="translated">ポインタのオフセットがオーバーフローしたり、ポインタが指すアロケーションを超えたりしないことは保証されていません。返されたオフセットがアライメント以外のすべての点で正しいことを確認するのは呼び出し側の責任です。</target>
        </trans-unit>
        <trans-unit id="19e4b768de5872c5fc351b9acc570966e33874d6" translate="yes" xml:space="preserve">
          <source>There are several functions and structs in this module that have a counterpart ending in &lt;code&gt;os&lt;/code&gt;. Those ending in &lt;code&gt;os&lt;/code&gt; will return an &lt;a href=&quot;../ffi/struct.osstring&quot;&gt;&lt;code&gt;OsString&lt;/code&gt;&lt;/a&gt; and those without will be returning a &lt;a href=&quot;../string/struct.string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このモジュールには、対応するものが &lt;code&gt;os&lt;/code&gt; で終わる関数と構造体がいくつかあります。 &lt;code&gt;os&lt;/code&gt; で終わるものは&lt;a href=&quot;../ffi/struct.osstring&quot;&gt; &lt;code&gt;OsString&lt;/code&gt; &lt;/a&gt;を返し、ないものは&lt;a href=&quot;../string/struct.string&quot;&gt; &lt;code&gt;String&lt;/code&gt; を&lt;/a&gt;返します。</target>
        </trans-unit>
        <trans-unit id="dc0876b472387aa80fcef964fda60c94ca27eb85" translate="yes" xml:space="preserve">
          <source>There are several functions and structs in this module that have a counterpart ending in &lt;code&gt;os&lt;/code&gt;. Those ending in &lt;code&gt;os&lt;/code&gt; will return an &lt;a href=&quot;../ffi/struct.osstring&quot;&gt;&lt;code&gt;OsString&lt;/code&gt;&lt;/a&gt; and those without will return a &lt;a href=&quot;../string/struct.string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このモジュールには、 &lt;code&gt;os&lt;/code&gt; で終わる対応する関数と構造体がいくつかあります。 &lt;code&gt;os&lt;/code&gt; で終わるものは&lt;a href=&quot;../ffi/struct.osstring&quot;&gt; &lt;code&gt;OsString&lt;/code&gt; &lt;/a&gt;を返し、そうでないものは&lt;a href=&quot;../string/struct.string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;を返します。</target>
        </trans-unit>
        <trans-unit id="171ee597fab4c6d0bdea510dd3f56d6a9c12c0b6" translate="yes" xml:space="preserve">
          <source>There are several implementations of common traits for slices. Some examples include:</source>
          <target state="translated">スライスのための一般的な形質の実装がいくつかあります。いくつかの例としては、以下のようなものがあります。</target>
        </trans-unit>
        <trans-unit id="0f5d6b4dc4e0f0d18f10b896c43b04863d873b17" translate="yes" xml:space="preserve">
          <source>There are several kinds of items:</source>
          <target state="translated">数種類のアイテムがあります。</target>
        </trans-unit>
        <trans-unit id="5ab16cf7d574dfc1dbe1b281f7a85326a916ba94" translate="yes" xml:space="preserve">
          <source>There are several structs that are useful for slices, such as &lt;a href=&quot;struct.iter&quot;&gt;&lt;code&gt;Iter&lt;/code&gt;&lt;/a&gt;, which represents iteration over a slice.</source>
          <target state="translated">&lt;a href=&quot;struct.iter&quot;&gt; &lt;code&gt;Iter&lt;/code&gt; &lt;/a&gt;など、スライスの反復を表す、スライスに役立つ構造体がいくつかあります。</target>
        </trans-unit>
        <trans-unit id="567ae72d32f4d2be3989eaf8a9904e62f889b537" translate="yes" xml:space="preserve">
          <source>There are six &lt;code&gt;char&lt;/code&gt; values here, but the fourth and sixth are not letters: they&amp;rsquo;re diacritics that don&amp;rsquo;t make sense on their own. Finally, if we look at them as grapheme clusters, we&amp;rsquo;d get what a person would call the four letters that make up the Hindi word:</source>
          <target state="translated">ここには6つの &lt;code&gt;char&lt;/code&gt; 値がありますが、4番目と6番目は文字ではありません。それらは、それ自体では意味をなさない分音記号です。最後に、それらを書記素クラスタとして見ると、ヒンディー語を構成する4つの文字を人が何と呼ぶか​​がわかります。</target>
        </trans-unit>
        <trans-unit id="6ce75e9d71dbebf75ae807b3a16056d1528fd37b" translate="yes" xml:space="preserve">
          <source>There are some known bugs that trigger this message.</source>
          <target state="translated">このメッセージのトリガーとなるいくつかの既知のバグがあります。</target>
        </trans-unit>
        <trans-unit id="926439ef5401fe133e30f193394b46730a6ce040" translate="yes" xml:space="preserve">
          <source>There are some strange edge cases with &lt;code&gt;macro_rules!&lt;/code&gt;. In the future, Rust will have a second kind of declarative macro that will work in a similar fashion but fix some of these edge cases. After that update, &lt;code&gt;macro_rules!&lt;/code&gt; will be effectively deprecated. With this in mind, as well as the fact that most Rust programmers will &lt;em&gt;use&lt;/em&gt; macros more than &lt;em&gt;write&lt;/em&gt; macros, we won&amp;rsquo;t discuss &lt;code&gt;macro_rules!&lt;/code&gt; any further. To learn more about how to write macros, consult the online documentation or other resources, such as &lt;a href=&quot;https://danielkeep.github.io/tlborm/book/index.html&quot;&gt;&amp;ldquo;The Little Book of Rust Macros&amp;rdquo;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;macro_rules!&lt;/code&gt; は、いくつかの奇妙なエッジケースがあります！。将来的に、Rustには同様の方法で機能するがこれらのエッジケースの一部を修正する2種類目の宣言マクロが含まれる予定です。その更新後、 &lt;code&gt;macro_rules!&lt;/code&gt; 実質的に非推奨になります。これを念頭に置き、ほとんどのRustプログラマーがマクロを&lt;em&gt;書く&lt;/em&gt;よりもマクロを&lt;em&gt;使用&lt;/em&gt;するという事実を踏まえて、 &lt;code&gt;macro_rules!&lt;/code&gt; については説明しません！それ以上。マクロの作成方法の詳細については、オンラインドキュメントまたは&lt;a href=&quot;https://danielkeep.github.io/tlborm/book/index.html&quot;&gt;「The Little Book of Rust Macros」&lt;/a&gt;などの他のリソースを参照してください。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="720348f040959c3669acec057ca2d47ad7fb3d69" translate="yes" xml:space="preserve">
          <source>There are three ABI strings which are cross-platform, and which all compilers are guaranteed to support:</source>
          <target state="translated">クロスプラットフォームであり、すべてのコンパイラがサポートを保証しているABI文字列が3つあります。</target>
        </trans-unit>
        <trans-unit id="0142bb3f41cab04708310e3fe823a323c32ee0b3" translate="yes" xml:space="preserve">
          <source>There are three common methods which can create iterators from a collection:</source>
          <target state="translated">コレクションからイテレータを作成できる一般的なメソッドは3つあります。</target>
        </trans-unit>
        <trans-unit id="987579e087a6ff5bbf6e70931c97c8842a5d0e0c" translate="yes" xml:space="preserve">
          <source>There are three possible ways to specify the desired &lt;code&gt;precision&lt;/code&gt;:</source>
          <target state="translated">必要な &lt;code&gt;precision&lt;/code&gt; を指定するには、次の3つの方法があります。</target>
        </trans-unit>
        <trans-unit id="3a65e426e444ff8c29bebad4488c8514ade91574" translate="yes" xml:space="preserve">
          <source>There are three ways to use the inline attribute:</source>
          <target state="translated">inline属性の使い方は3つあります。</target>
        </trans-unit>
        <trans-unit id="481486972e8a90ddff463b54cf1c4f208b0477e6" translate="yes" xml:space="preserve">
          <source>There are two input lifetimes, so Rust applies the first lifetime elision rule and gives both &lt;code&gt;&amp;amp;self&lt;/code&gt; and &lt;code&gt;announcement&lt;/code&gt; their own lifetimes. Then, because one of the parameters is &lt;code&gt;&amp;amp;self&lt;/code&gt;, the return type gets the lifetime of &lt;code&gt;&amp;amp;self&lt;/code&gt;, and all lifetimes have been accounted for.</source>
          <target state="translated">2つの入力ライフタイムがあるため、Rustは最初のライフタイム省略ルールを適用し、 &lt;code&gt;&amp;amp;self&lt;/code&gt; と &lt;code&gt;announcement&lt;/code&gt; 両方に独自のライフタイムを与えます。次に、パラメーターの1つが &lt;code&gt;&amp;amp;self&lt;/code&gt; であるため、戻り値の型は &lt;code&gt;&amp;amp;self&lt;/code&gt; の有効期間を取得し、すべての有効期間が考慮されます。</target>
        </trans-unit>
        <trans-unit id="ffdf24d7c3a95e9cacfa7c11d178ec9960ec72fd" translate="yes" xml:space="preserve">
          <source>There are two issues with the above example:</source>
          <target state="translated">上記の例には2つの問題点があります。</target>
        </trans-unit>
        <trans-unit id="c1575bd4949a087cd0961e57e825f5b7d2464821" translate="yes" xml:space="preserve">
          <source>There are two main ways to read this document.</source>
          <target state="translated">この文書の読み方は大きく分けて2つあります。</target>
        </trans-unit>
        <trans-unit id="86663982f114c71c4b638d9b0fa35d92d8fc55c4" translate="yes" xml:space="preserve">
          <source>There are two options that would work instead. The first would be to change the line &lt;code&gt;example_func(&amp;amp;example_string);&lt;/code&gt; to &lt;code&gt;example_func(example_string.as_str());&lt;/code&gt;, using the method &lt;a href=&quot;struct.string#method.as_str&quot;&gt;&lt;code&gt;as_str()&lt;/code&gt;&lt;/a&gt; to explicitly extract the string slice containing the string. The second way changes &lt;code&gt;example_func(&amp;amp;example_string);&lt;/code&gt; to &lt;code&gt;example_func(&amp;amp;*example_string);&lt;/code&gt;. In this case we are dereferencing a &lt;code&gt;String&lt;/code&gt; to a &lt;a href=&quot;../primitive.str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt;, then referencing the &lt;a href=&quot;../primitive.str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt; back to &lt;a href=&quot;../primitive.str&quot;&gt;&lt;code&gt;&amp;amp;str&lt;/code&gt;&lt;/a&gt;. The second way is more idiomatic, however both work to do the conversion explicitly rather than relying on the implicit conversion.</source>
          <target state="translated">代わりに機能する2つのオプションがあります。最初は、行 &lt;code&gt;example_func(&amp;amp;example_string);&lt;/code&gt; を変更することです。 &lt;code&gt;example_func(example_string.as_str());&lt;/code&gt; 、メソッド&lt;a href=&quot;struct.string#method.as_str&quot;&gt; &lt;code&gt;as_str()&lt;/code&gt; &lt;/a&gt;を使用して、文字列を含む文字列スライスを明示的に抽出します。 2番目の方法は、 &lt;code&gt;example_func(&amp;amp;example_string);&lt;/code&gt; を変更します。 &lt;code&gt;example_func(&amp;amp;*example_string);&lt;/code&gt; 。このケースでは逆参照されている &lt;code&gt;String&lt;/code&gt; に&lt;a href=&quot;../primitive.str&quot;&gt; &lt;code&gt;str&lt;/code&gt; &lt;/a&gt;、その後参照する、&lt;a href=&quot;../primitive.str&quot;&gt; &lt;code&gt;str&lt;/code&gt; &lt;/a&gt;にバック&lt;a href=&quot;../primitive.str&quot;&gt; &lt;code&gt;&amp;amp;str&lt;/code&gt; &lt;/a&gt;。 2番目の方法はより慣用的ですが、どちらも暗黙的な変換に依存するのではなく、明示的に変換を実行します。</target>
        </trans-unit>
        <trans-unit id="022a56e5687a1a83c185eae56c2be99a7be6379c" translate="yes" xml:space="preserve">
          <source>There are two options to work around this issue. The first is simply to rename one of the types. Alternatively, one can specify the intended type using the following syntax:</source>
          <target state="translated">この問題を回避するには2つの方法があります。1つ目は、単に型の名前を変更することです。あるいは、以下の構文を使って目的の型を指定することもできます。</target>
        </trans-unit>
        <trans-unit id="7601f9a3aa302729abcf51730ab0dacad11e1f7d" translate="yes" xml:space="preserve">
          <source>There are two possible solutions:</source>
          <target state="translated">解決策は2つ考えられます。</target>
        </trans-unit>
        <trans-unit id="3f08d38f311f1d8aebf1cc8c4c04305ba58884d5" translate="yes" xml:space="preserve">
          <source>There are two syntactic forms for creating an array:</source>
          <target state="translated">配列を作成するためには、2つの構文形式があります。</target>
        </trans-unit>
        <trans-unit id="63a18bac877b16a7425895e1b31ade8a29a01453" translate="yes" xml:space="preserve">
          <source>There are two types of &lt;code&gt;static&lt;/code&gt; items: those declared in association with the &lt;a href=&quot;keyword.mut&quot;&gt;&lt;code&gt;mut&lt;/code&gt;&lt;/a&gt; keyword and those without.</source>
          <target state="translated">&lt;code&gt;static&lt;/code&gt; アイテムには、&lt;a href=&quot;keyword.mut&quot;&gt; &lt;code&gt;mut&lt;/code&gt; &lt;/a&gt;キーワードに関連付けて宣言されたものと、関連付けられていないものの2種類があります。</target>
        </trans-unit>
        <trans-unit id="86a631e5c1cd817983c93f98903db4ea59d68db2" translate="yes" xml:space="preserve">
          <source>There are two types of implementations:</source>
          <target state="translated">実装には2種類あります。</target>
        </trans-unit>
        <trans-unit id="fa155718008a683c96cef5cc6a71a54ea03f305c" translate="yes" xml:space="preserve">
          <source>There are two ways to define new macros:</source>
          <target state="translated">新しいマクロを定義するには2つの方法があります。</target>
        </trans-unit>
        <trans-unit id="9880ebdf9a583de2d652297bd89e0b5ff4d36ffb" translate="yes" xml:space="preserve">
          <source>There are two ways to implement &lt;code&gt;Copy&lt;/code&gt; on your type. The simplest is to use &lt;code&gt;derive&lt;/code&gt;:</source>
          <target state="translated">タイプに &lt;code&gt;Copy&lt;/code&gt; を実装するには2つの方法があります。最も簡単なのは、 &lt;code&gt;derive&lt;/code&gt; を使用することです。</target>
        </trans-unit>
        <trans-unit id="b2a9fbbbcf33cff3a0df902072d56db76dfeaf3c" translate="yes" xml:space="preserve">
          <source>There are two ways to solve this error. The first is to make the public type signature only public to a module that also has access to the private type. This is done by using pub(crate) or pub(in crate::my_mod::etc) Example:</source>
          <target state="translated">このエラーを解決する方法は2つあります。1つ目は、プライベート型にもアクセスできるモジュールに対してのみ、パブリック型のシグネチャを公開することです。これは pub(crate)または pub(in crate::my_mod::etc)を使用して行います。</target>
        </trans-unit>
        <trans-unit id="dc647999e3aa70d53b9f18def550d41889259047" translate="yes" xml:space="preserve">
          <source>There are various restrictions on transmuting between types in Rust; for example types being transmuted must have the same size. To apply all these restrictions, the compiler must know the exact types that may be transmuted. When type parameters are involved, this cannot always be done.</source>
          <target state="translated">例えば、変換される型は同じサイズでなければなりません。これらの制限をすべて適用するには、コンパイラは変換される型を正確に把握していなければなりません。型のパラメータが関与している場合、これは常に実行できるわけではありません。</target>
        </trans-unit>
        <trans-unit id="0019607d06d61b11d32e87172ee0ea679ebbb977" translate="yes" xml:space="preserve">
          <source>There are various rules:</source>
          <target state="translated">様々なルールがあります。</target>
        </trans-unit>
        <trans-unit id="0d6ed4037ecbcc5953e35640da903ed6a8a40981" translate="yes" xml:space="preserve">
          <source>There can only be one owner at a time.</source>
          <target state="translated">オーナーは一度に一人しかいられません。</target>
        </trans-unit>
        <trans-unit id="f4471e590e73989497aca327361dde4b0c93c59c" translate="yes" xml:space="preserve">
          <source>There is a difference between what the &lt;code&gt;match&lt;/code&gt; expression from Listing 9-6 and the &lt;code&gt;?&lt;/code&gt; operator do: error values that have the &lt;code&gt;?&lt;/code&gt; operator called on them go through the &lt;code&gt;from&lt;/code&gt; function, defined in the &lt;code&gt;From&lt;/code&gt; trait in the standard library, which is used to convert errors from one type into another. When the &lt;code&gt;?&lt;/code&gt; operator calls the &lt;code&gt;from&lt;/code&gt; function, the error type received is converted into the error type defined in the return type of the current function. This is useful when a function returns one error type to represent all the ways a function might fail, even if parts might fail for many different reasons. As long as each error type implements the &lt;code&gt;from&lt;/code&gt; function to define how to convert itself to the returned error type, the &lt;code&gt;?&lt;/code&gt; operator takes care of the conversion automatically.</source>
          <target state="translated">リスト9-6の &lt;code&gt;match&lt;/code&gt; 表現と &lt;code&gt;?&lt;/code&gt; には違いがあります。演算子は行います： &lt;code&gt;?&lt;/code&gt; を持つエラー値呼び出された演算子は、標準ライブラリの &lt;code&gt;From&lt;/code&gt; トレイトで定義されている &lt;code&gt;from&lt;/code&gt; 関数を通過します。これは、エラーをあるタイプから別のタイプに変換するために使用されます。いつ &lt;code&gt;?&lt;/code&gt; 演算子が &lt;code&gt;from&lt;/code&gt; 関数を呼び出すと、受け取ったエラータイプが現在の関数の戻り値のタイプで定義されているエラータイプに変換されます。これは、関数が1つのエラータイプを返し、さまざまな理由でパーツが失敗する可能性がある場合でも、関数が失敗するすべての方法を表す場合に役立ちます。各エラータイプが &lt;code&gt;from&lt;/code&gt; を実装している限り自分自身を返されたエラータイプに変換する方法を定義する関数 &lt;code&gt;?&lt;/code&gt; 演算子は変換を自動的に処理します。</target>
        </trans-unit>
        <trans-unit id="42bfb7d2a182c3982d4afcf52f4999394d469590" translate="yes" xml:space="preserve">
          <source>There is a difference between what the &lt;code&gt;match&lt;/code&gt; expression from Listing 9-6 does and what the &lt;code&gt;?&lt;/code&gt; operator does: error values that have the &lt;code&gt;?&lt;/code&gt; operator called on them go through the &lt;code&gt;from&lt;/code&gt; function, defined in the &lt;code&gt;From&lt;/code&gt; trait in the standard library, which is used to convert errors from one type into another. When the &lt;code&gt;?&lt;/code&gt; operator calls the &lt;code&gt;from&lt;/code&gt; function, the error type received is converted into the error type defined in the return type of the current function. This is useful when a function returns one error type to represent all the ways a function might fail, even if parts might fail for many different reasons. As long as each error type implements the &lt;code&gt;from&lt;/code&gt; function to define how to convert itself to the returned error type, the &lt;code&gt;?&lt;/code&gt; operator takes care of the conversion automatically.</source>
          <target state="translated">リスト9-6の &lt;code&gt;match&lt;/code&gt; 式の機能と &lt;code&gt;?&lt;/code&gt; の機能には違いがあります。演算子は： &lt;code&gt;?&lt;/code&gt; を持つエラー値それらに呼び出された演算子は、標準ライブラリの &lt;code&gt;From&lt;/code&gt; 特性で定義されている &lt;code&gt;from&lt;/code&gt; 関数を通過します。この関数は、エラーをあるタイプから別のタイプに変換するために使用されます。いつ &lt;code&gt;?&lt;/code&gt; 演算子が &lt;code&gt;from&lt;/code&gt; 関数を呼び出すと、受け取ったエラータイプは、現在の関数の戻り値の型で定義されたエラータイプに変換されます。これは、さまざまな理由でパーツが失敗する可能性がある場合でも、関数が1つのエラータイプを返し、関数が失敗する可能性のあるすべての方法を表す場合に役立ちます。各エラータイプが実装している限り &lt;code&gt;from&lt;/code&gt; 機能、返されたエラーの種類に自分自身を変換する方法を定義するには &lt;code&gt;?&lt;/code&gt; オペレーターが自動的に変換を処理します。</target>
        </trans-unit>
        <trans-unit id="6b478d4cf3daf7fb5af886fd070b460cffb3f99a" translate="yes" xml:space="preserve">
          <source>There is a large variety of prefix types, see &lt;a href=&quot;enum.prefix&quot;&gt;&lt;code&gt;Prefix&lt;/code&gt;&lt;/a&gt;'s documentation for more.</source>
          <target state="translated">プレフィックスにはさまざまな種類があります。詳しくは&lt;a href=&quot;enum.prefix&quot;&gt; &lt;code&gt;Prefix&lt;/code&gt; &lt;/a&gt;のドキュメントをご覧ください。</target>
        </trans-unit>
        <trans-unit id="b6a45e45d5b815dc5996fef1ade397970afb9eee" translate="yes" xml:space="preserve">
          <source>There is a natural point at which we can return the memory our &lt;code&gt;String&lt;/code&gt; needs to the allocator: when &lt;code&gt;s&lt;/code&gt; goes out of scope. When a variable goes out of scope, Rust calls a special function for us. This function is called &lt;code&gt;drop&lt;/code&gt;, and it&amp;rsquo;s where the author of &lt;code&gt;String&lt;/code&gt; can put the code to return the memory. Rust calls &lt;code&gt;drop&lt;/code&gt; automatically at the closing curly bracket.</source>
          <target state="translated">私達は私達のメモリを返すことができた時に自然なポイントがある &lt;code&gt;String&lt;/code&gt; アロケータに必要が次の場合 &lt;code&gt;s&lt;/code&gt; スコープ外になります。変数がスコープ外になると、Rustは特別な関数を呼び出します。この関数は &lt;code&gt;drop&lt;/code&gt; と呼ばれ、 &lt;code&gt;String&lt;/code&gt; の作成者がコードを配置してメモリを返すことができる場所です。さびの呼び出しは、閉じ中括弧で自動的に &lt;code&gt;drop&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="9b02d233f669a1e206e4e2c20ce1d2df695bab4c" translate="yes" xml:space="preserve">
          <source>There is a natural point at which we can return the memory our &lt;code&gt;String&lt;/code&gt; needs to the operating system: when &lt;code&gt;s&lt;/code&gt; goes out of scope. When a variable goes out of scope, Rust calls a special function for us. This function is called &lt;code&gt;drop&lt;/code&gt;, and it&amp;rsquo;s where the author of &lt;code&gt;String&lt;/code&gt; can put the code to return the memory. Rust calls &lt;code&gt;drop&lt;/code&gt; automatically at the closing curly bracket.</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; が必要とするメモリをオペレーティングシステムに返すことができる自然なポイントがあります。それは、 &lt;code&gt;s&lt;/code&gt; がスコープ外になったときです。変数がスコープ外になると、Rustは特別な関数を呼び出します。この関数は &lt;code&gt;drop&lt;/code&gt; と呼ばれ、 &lt;code&gt;String&lt;/code&gt; の作成者がメモリを返すコードを配置できる場所です。Rust呼び出しは、閉じ中括弧で自動的に &lt;code&gt;drop&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="f99c36775b0b7e1c59faa2f7b94f6fd5d85206bb" translate="yes" xml:space="preserve">
          <source>There is a small difference between the two: the &lt;code&gt;derive&lt;/code&gt; strategy will also place a &lt;code&gt;Copy&lt;/code&gt; bound on type parameters, which isn't always desired.</source>
          <target state="translated">2つの間に小さな違いがあり &lt;code&gt;derive&lt;/code&gt; 戦略では、型パラメーターに &lt;code&gt;Copy&lt;/code&gt; バウンドも配置されますが、これは必ずしも望ましいことではありません。</target>
        </trans-unit>
        <trans-unit id="ba88e1e16f5f4f6fd310c5a8bb2e8dd5b7b7dc78" translate="yes" xml:space="preserve">
          <source>There is currently a known issue (see &lt;a href=&quot;https://github.com/rust-lang/rust/issues/39364&quot;&gt;&lt;code&gt;#39364&lt;/code&gt;&lt;/a&gt;) that causes &lt;code&gt;recv_timeout&lt;/code&gt; to panic unexpectedly with the following example:</source>
          <target state="translated">現在、次の例で &lt;code&gt;recv_timeout&lt;/code&gt; が予期せずパニックを引き起こす既知の問題（&lt;a href=&quot;https://github.com/rust-lang/rust/issues/39364&quot;&gt; &lt;code&gt;#39364&lt;/code&gt; を&lt;/a&gt;参照）があります。</target>
        </trans-unit>
        <trans-unit id="ac69e37cd6f18587422e7c6b701f3aed59b4a925" translate="yes" xml:space="preserve">
          <source>There is currently no supported way to create a raw pointer or reference to a field of a struct inside &lt;code&gt;MaybeUninit&amp;lt;Struct&amp;gt;&lt;/code&gt;. That means it is not possible to create a struct by calling &lt;code&gt;MaybeUninit::uninit::&amp;lt;Struct&amp;gt;()&lt;/code&gt; and then writing to its fields.</source>
          <target state="translated">現在、 &lt;code&gt;MaybeUninit&amp;lt;Struct&amp;gt;&lt;/code&gt; 内の構造体のフィールドへの生のポインタまたは参照を作成するためのサポートされている方法はありません。つまり、 &lt;code&gt;MaybeUninit::uninit::&amp;lt;Struct&amp;gt;()&lt;/code&gt; を呼び出してフィールドに書き込むことで構造体を作成することはできません。</target>
        </trans-unit>
        <trans-unit id="06e1ced9251455647a44280e8880c2f024531277" translate="yes" xml:space="preserve">
          <source>There is no consensus in the programming community about what features a language must have to be considered object oriented. Rust is influenced by many programming paradigms, including OOP; for example, we explored the features that came from functional programming in Chapter 13. Arguably, OOP languages share certain common characteristics, namely objects, encapsulation, and inheritance. Let&amp;rsquo;s look at what each of those characteristics means and whether Rust supports it.</source>
          <target state="translated">プログラミングコミュニティでは、言語をオブジェクト指向と見なさなければならない機能についてコンセンサスはありません。 Rustは、OOPを含む多くのプログラミングパラダイムの影響を受けています。たとえば、関数プログラミングからもたらされる機能については、第13章で説明しました。間違いなく、OOP言語は、オブジェクト、カプセル化、継承などの特定の共通特性を共有しています。これらの各特性の意味と、Rustがそれをサポートしているかどうかを見てみましょう。</target>
        </trans-unit>
        <trans-unit id="3940029042247daa011ed3a6db287dfc70d15650" translate="yes" xml:space="preserve">
          <source>There is no guarantee that an all-zero byte-pattern represents a valid value of some type &lt;code&gt;T&lt;/code&gt;. For example, the all-zero byte-pattern is not a valid value for reference types (&lt;code&gt;&amp;amp;T&lt;/code&gt; and &lt;code&gt;&amp;amp;mut T&lt;/code&gt;). Using &lt;code&gt;zeroed&lt;/code&gt; on such types causes immediate &lt;a href=&quot;../../reference/behavior-considered-undefined&quot;&gt;undefined behavior&lt;/a&gt; because &lt;a href=&quot;union.maybeuninit#initialization-invariant&quot;&gt;the Rust compiler assumes&lt;/a&gt; that there always is a valid value in a variable it considers initialized.</source>
          <target state="translated">すべてゼロのバイトパターンが何らかのタイプ &lt;code&gt;T&lt;/code&gt; の有効な値を表すという保証はありません。たとえば、すべて0のバイトパターンは、参照タイプ（ &lt;code&gt;&amp;amp;T&lt;/code&gt; および &lt;code&gt;&amp;amp;mut T&lt;/code&gt; ）の有効な値ではありません。&lt;a href=&quot;union.maybeuninit#initialization-invariant&quot;&gt;Rustコンパイラーは&lt;/a&gt;、初期化されていると見なされる変数に常に有効な値があると想定するため、このような型に &lt;code&gt;zeroed&lt;/code&gt; を使用すると、即座に&lt;a href=&quot;../../reference/behavior-considered-undefined&quot;&gt;未定義の動作&lt;/a&gt;が発生します。</target>
        </trans-unit>
        <trans-unit id="3d516718a20e6c51e7b81919f2ed7f10da7e19e0" translate="yes" xml:space="preserve">
          <source>There is no guarantee that an all-zero byte-pattern represents a valid value of some type &lt;code&gt;T&lt;/code&gt;. For example, the all-zero byte-pattern is not a valid value for reference types (&lt;code&gt;&amp;amp;T&lt;/code&gt;, &lt;code&gt;&amp;amp;mut T&lt;/code&gt;) and functions pointers. Using &lt;code&gt;zeroed&lt;/code&gt; on such types causes immediate &lt;a href=&quot;../../reference/behavior-considered-undefined&quot;&gt;undefined behavior&lt;/a&gt; because &lt;a href=&quot;union.maybeuninit#initialization-invariant&quot;&gt;the Rust compiler assumes&lt;/a&gt; that there always is a valid value in a variable it considers initialized.</source>
          <target state="translated">すべてゼロのバイトパターンが、あるタイプ &lt;code&gt;T&lt;/code&gt; の有効な値を表すという保証はありません。たとえば、すべてゼロのバイトパターンは、参照型（ &lt;code&gt;&amp;amp;T&lt;/code&gt; 、 &lt;code&gt;&amp;amp;mut T&lt;/code&gt; ）および関数ポインターの有効な値ではありません。&lt;a href=&quot;union.maybeuninit#initialization-invariant&quot;&gt;Rustコンパイラは&lt;/a&gt;、初期化されたと見なす変数に常に有効な値があると想定するため、このような型で &lt;code&gt;zeroed&lt;/code&gt; を使用すると、すぐに&lt;a href=&quot;../../reference/behavior-considered-undefined&quot;&gt;未定義の動作&lt;/a&gt;が発生します。</target>
        </trans-unit>
        <trans-unit id="77cd938f61b73cdc8199024bd862cf47becca43c" translate="yes" xml:space="preserve">
          <source>There is no guarantee that the memory pointed to by &lt;code&gt;ptr&lt;/code&gt; contains a valid nul terminator byte at the end of the string.</source>
          <target state="translated">&lt;code&gt;ptr&lt;/code&gt; が指すメモリの文字列の最後に有効なNULターミネータバイトが含まれているという保証はありません。</target>
        </trans-unit>
        <trans-unit id="37d385330ea581c420be55585ac9b53b42ed4426" translate="yes" xml:space="preserve">
          <source>There is no guarantee to the validity of &lt;code&gt;ptr&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ptr&lt;/code&gt; の有効性は保証されません。</target>
        </trans-unit>
        <trans-unit id="90b4dcdc90eb015a6d81f3692edc057c91c2b6f8" translate="yes" xml:space="preserve">
          <source>There is no implementation of &lt;a href=&quot;../ops/trait.drop&quot;&gt;&lt;code&gt;Drop&lt;/code&gt;&lt;/a&gt; for child processes, so if you do not ensure the &lt;code&gt;Child&lt;/code&gt; has exited then it will continue to run, even after the &lt;code&gt;Child&lt;/code&gt; handle to the child process has gone out of scope.</source>
          <target state="translated">のない実装はありません&lt;a href=&quot;../ops/trait.drop&quot;&gt; &lt;code&gt;Drop&lt;/code&gt; &lt;/a&gt;子プロセスのためには、あなたが保証するものではありません。もしそうなら、 &lt;code&gt;Child&lt;/code&gt; それはした後も、引き続き実行されます終了した &lt;code&gt;Child&lt;/code&gt; 子プロセスへのハンドルがスコープ外に行ってきました。</target>
        </trans-unit>
        <trans-unit id="96d59d760142fd31188eb3940b02911fcbc69887" translate="yes" xml:space="preserve">
          <source>There is no implementation of &lt;a href=&quot;https://doc.rust-lang.org/core/ops/trait.Drop.html&quot;&gt;&lt;code&gt;Drop&lt;/code&gt;&lt;/a&gt; for child processes, so if you do not ensure the &lt;code&gt;Child&lt;/code&gt; has exited then it will continue to run, even after the &lt;code&gt;Child&lt;/code&gt; handle to the child process has gone out of scope.</source>
          <target state="translated">子プロセスの&lt;a href=&quot;https://doc.rust-lang.org/core/ops/trait.Drop.html&quot;&gt; &lt;code&gt;Drop&lt;/code&gt; &lt;/a&gt;の実装はないため、 &lt;code&gt;Child&lt;/code&gt; が終了したことを確認しないと、子プロセスの &lt;code&gt;Child&lt;/code&gt; ハンドルがスコープから外れた後でも、子プロセスは引き続き実行されます。</target>
        </trans-unit>
        <trans-unit id="f7865277b670de1ac383b78686d6c6c3ef225ff1" translate="yes" xml:space="preserve">
          <source>There is no implicit capture of the containing function's generic parameters, parameters, and local variables. For example, &lt;code&gt;inner&lt;/code&gt; may not access &lt;code&gt;outer_var&lt;/code&gt;.</source>
          <target state="translated">包含関数のジェネリックパラメーター、パラメーター、およびローカル変数の暗黙的なキャプチャはありません。たとえば、 &lt;code&gt;inner&lt;/code&gt; は &lt;code&gt;outer_var&lt;/code&gt; にアクセスできません。</target>
        </trans-unit>
        <trans-unit id="98bc5a98bb823e7a07123a40b084c3311e58d239" translate="yes" xml:space="preserve">
          <source>There is no meaningful value to associate with your keys.</source>
          <target state="translated">キーに関連付ける意味のある価値はありません。</target>
        </trans-unit>
        <trans-unit id="e47f071471a1ed59d24ce5598360fe16b663897e" translate="yes" xml:space="preserve">
          <source>There is no syntax that directly refers to a function item type, but the compiler will display the type as something like &lt;code&gt;fn(u32) -&amp;gt; i32 {fn_name}&lt;/code&gt; in error messages.</source>
          <target state="translated">関数項目のタイプを直接参照する構文はありませんが、コンパイラーはタイプを &lt;code&gt;fn(u32) -&amp;gt; i32 {fn_name}&lt;/code&gt; ようなものとしてエラーメッセージに表示します。</target>
        </trans-unit>
        <trans-unit id="6352ff90262f746d2ceb9b5382b99f239203c508" translate="yes" xml:space="preserve">
          <source>There is no way to express the &lt;code&gt;if x &amp;lt; 5&lt;/code&gt; condition within a pattern, so the match guard gives us the ability to express this logic.</source>
          <target state="translated">パターン内で &lt;code&gt;if x &amp;lt; 5&lt;/code&gt; 条件を表現する方法はないため、マッチガードはこのロジックを表現する機能を提供します。</target>
        </trans-unit>
        <trans-unit id="f04c5e1cecb9254e859f18bc80c9ad5ecd03b1f1" translate="yes" xml:space="preserve">
          <source>There is no way to refer to all trait objects generically, so the only way to create values of this type is with functions like &lt;a href=&quot;../intrinsics/fn.transmute&quot;&gt;&lt;code&gt;std::mem::transmute&lt;/code&gt;&lt;/a&gt;. Similarly, the only way to create a true trait object from a &lt;code&gt;TraitObject&lt;/code&gt; value is with &lt;code&gt;transmute&lt;/code&gt;.</source>
          <target state="translated">すべての特性オブジェクトを総称的に参照する方法はないため、このタイプの値を作成する唯一の方法は、&lt;a href=&quot;../intrinsics/fn.transmute&quot;&gt; &lt;code&gt;std::mem::transmute&lt;/code&gt; &lt;/a&gt;などの関数を使用することです。同様に、 &lt;code&gt;TraitObject&lt;/code&gt; 値から真の特性オブジェクトを作成する唯一の方法は、 &lt;code&gt;transmute&lt;/code&gt; を使用することです。</target>
        </trans-unit>
        <trans-unit id="0ac27f2fb34cee3cbd54d9db13f601fadc62dc92" translate="yes" xml:space="preserve">
          <source>There is no way to refer to all trait objects generically, so the only way to create values of this type is with functions like &lt;a href=&quot;../mem/fn.transmute&quot;&gt;&lt;code&gt;std::mem::transmute&lt;/code&gt;&lt;/a&gt;. Similarly, the only way to create a true trait object from a &lt;code&gt;TraitObject&lt;/code&gt; value is with &lt;code&gt;transmute&lt;/code&gt;.</source>
          <target state="translated">すべての特性オブジェクトを一般的に参照する方法はないため、このタイプの値を作成する唯一の方法は、&lt;a href=&quot;../mem/fn.transmute&quot;&gt; &lt;code&gt;std::mem::transmute&lt;/code&gt; &lt;/a&gt;ような関数を使用することです。同様に、 &lt;code&gt;TraitObject&lt;/code&gt; 値から真のトレイトオブジェクトを作成する唯一の方法は、 &lt;code&gt;transmute&lt;/code&gt; を使用することです。</target>
        </trans-unit>
        <trans-unit id="e9f689cb8e372a1fb3e4dbcf70bbf33a833163e2" translate="yes" xml:space="preserve">
          <source>There is no wrong way to read this book: if you want to skip ahead, go for it! You might have to jump back to earlier chapters if you experience any confusion. But do whatever works for you.</source>
          <target state="translated">この本の読み方に間違いはありません:先に飛ばしたい場合は、それを目指してください。あなたが混乱を経験した場合は、以前の章にジャンプバックしなければならないかもしれません。しかし、あなたのために働くものは何でもしてください。</target>
        </trans-unit>
        <trans-unit id="f89524ca0c10b9d4f1257c768a5b98aab1c4ca9b" translate="yes" xml:space="preserve">
          <source>There is one more similarity between enums and structs: just as we&amp;rsquo;re able to define methods on structs using &lt;code&gt;impl&lt;/code&gt;, we&amp;rsquo;re also able to define methods on enums. Here&amp;rsquo;s a method named &lt;code&gt;call&lt;/code&gt; that we could define on our &lt;code&gt;Message&lt;/code&gt; enum:</source>
          <target state="translated">列挙型と構造体の間に1つの以上の類似性があります：私たちが使用して構造体のメソッドを定義することができるしているだけのよう &lt;code&gt;impl&lt;/code&gt; 、我々はまた、列挙型のメソッドを定義することができるしています。 &lt;code&gt;Message&lt;/code&gt; 列挙で定義できる &lt;code&gt;call&lt;/code&gt; という名前のメソッドは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="dd5de49f07fcfe0b32f34685bec57fc973c95f95" translate="yes" xml:space="preserve">
          <source>There is possibly no limit to the number of &lt;code&gt;else&lt;/code&gt; blocks that could follow an &lt;code&gt;if&lt;/code&gt; expression however if you have several then a &lt;a href=&quot;keyword.match&quot;&gt;&lt;code&gt;match&lt;/code&gt;&lt;/a&gt; expression might be preferable.</source>
          <target state="translated">&lt;code&gt;if&lt;/code&gt; 式の後に続く &lt;code&gt;else&lt;/code&gt; ブロックの数に制限はない可能性がありますが、複数ある場合は、&lt;a href=&quot;keyword.match&quot;&gt; &lt;code&gt;match&lt;/code&gt; &lt;/a&gt;式の方が望ましい場合があります。</target>
        </trans-unit>
        <trans-unit id="602b0e48a3f43914053d4b199337461ae231047f" translate="yes" xml:space="preserve">
          <source>There is usually no need to create a &lt;code&gt;Thread&lt;/code&gt; struct yourself, one should instead use a function like &lt;code&gt;spawn&lt;/code&gt; to create new threads, see the docs of &lt;a href=&quot;struct.builder&quot;&gt;&lt;code&gt;Builder&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;fn.spawn&quot;&gt;&lt;code&gt;spawn&lt;/code&gt;&lt;/a&gt; for more details.</source>
          <target state="translated">通常、自分で &lt;code&gt;Thread&lt;/code&gt; 構造体を作成する必要はありません。代わりに、 &lt;code&gt;spawn&lt;/code&gt; などの関数を使用して新しいスレッドを作成&lt;a href=&quot;fn.spawn&quot;&gt; &lt;code&gt;spawn&lt;/code&gt; &lt;/a&gt;必要があります。詳細については、&lt;a href=&quot;struct.builder&quot;&gt; &lt;code&gt;Builder&lt;/code&gt; &lt;/a&gt;およびspawnのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="f5aa017ba54ffa17080a39771f2c83f220593384" translate="yes" xml:space="preserve">
          <source>There will be an error about &lt;code&gt;bool&lt;/code&gt; not implementing &lt;code&gt;Index&amp;lt;u8&amp;gt;&lt;/code&gt;, followed by a note saying &quot;the type &lt;code&gt;bool&lt;/code&gt; cannot be indexed by &lt;code&gt;u8&lt;/code&gt;&quot;.</source>
          <target state="translated">&lt;code&gt;bool&lt;/code&gt; が &lt;code&gt;Index&amp;lt;u8&amp;gt;&lt;/code&gt; 実装していないというエラーが発生し、その後に「タイプ &lt;code&gt;bool&lt;/code&gt; は &lt;code&gt;u8&lt;/code&gt; で索引付けできない」という注記が続きます。</target>
        </trans-unit>
        <trans-unit id="7649fb68743c30fa670731965f40aa4090d73b82" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s a lot more to say about &lt;a href=&quot;http://doc.crates.io&quot;&gt;Cargo&lt;/a&gt; and &lt;a href=&quot;http://doc.crates.io/crates-io.html&quot;&gt;its ecosystem&lt;/a&gt; which we&amp;rsquo;ll discuss in Chapter 14, but for now, that&amp;rsquo;s all you need to know. Cargo makes it very easy to reuse libraries, so Rustaceans are able to write smaller projects that are assembled from a number of packages.</source>
          <target state="translated">&lt;a href=&quot;http://doc.crates.io&quot;&gt;Cargo&lt;/a&gt;と&lt;a href=&quot;http://doc.crates.io/crates-io.html&quot;&gt;そのエコシステム&lt;/a&gt;については、第14章で説明しますが、今のところ、これで十分です。Cargoを使用すると、ライブラリの再利用が非常に簡単になるため、Rustaceansは、多数のパッケージからアセンブルされた小さなプロジェクトを作成できます。</target>
        </trans-unit>
        <trans-unit id="2bf65550ac389c6cc7469a24526e0ae8bf661af9" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s a tendency among many Rustaceans to avoid using &lt;code&gt;clone&lt;/code&gt; to fix ownership problems because of its runtime cost. In &lt;a href=&quot;ch13-00-functional-features&quot;&gt;Chapter 13&lt;/a&gt;, you&amp;rsquo;ll learn how to use more efficient methods in this type of situation. But for now, it&amp;rsquo;s okay to copy a few strings to continue making progress because you&amp;rsquo;ll make these copies only once and your filename and query string are very small. It&amp;rsquo;s better to have a working program that&amp;rsquo;s a bit inefficient than to try to hyperoptimize code on your first pass. As you become more experienced with Rust, it&amp;rsquo;ll be easier to start with the most efficient solution, but for now, it&amp;rsquo;s perfectly acceptable to call &lt;code&gt;clone&lt;/code&gt;.</source>
          <target state="translated">多くのRustaceansの間では、ランタイムコストのために、 &lt;code&gt;clone&lt;/code&gt; を使用して所有権の問題を修正するのを避ける傾向があります。では&lt;a href=&quot;ch13-00-functional-features&quot;&gt;第13章&lt;/a&gt;、あなたは、この種の状況では、より効率的な方法を使用する方法を学びます。ただし、今のところ、いくつかの文字列をコピーして作業を続けても問題ありません。これらのコピーは1回だけ作成し、ファイル名とクエリ文字列は非常に小さいためです。最初のパスでコードを超最適化しようとするよりも、少し非効率的なプログラムを使用する方が良いでしょう。 Rustに慣れるにつれて、最も効率的なソリューションから始めるのが簡単になりますが、今のところ、 &lt;code&gt;clone&lt;/code&gt; を呼び出すことはまったく問題ありません。</target>
        </trans-unit>
        <trans-unit id="66fb5ab158cd4be714eaa0eeb00d2ccbb6eb7bd5" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s another advantage to using an enum rather than a struct: each variant can have different types and amounts of associated data. Version four type IP addresses will always have four numeric components that will have values between 0 and 255. If we wanted to store &lt;code&gt;V4&lt;/code&gt; addresses as four &lt;code&gt;u8&lt;/code&gt; values but still express &lt;code&gt;V6&lt;/code&gt; addresses as one &lt;code&gt;String&lt;/code&gt; value, we wouldn&amp;rsquo;t be able to with a struct. Enums handle this case with ease:</source>
          <target state="translated">構造体ではなく列挙型を使用することには、もう1つの利点があります。各バリアントには、関連するデータのタイプと量が異なる可能性があります。バージョン4種類のIPアドレスは、常に我々が保存したい場合は0〜255の値を持つことになります4つの数字のコンポーネントがあります &lt;code&gt;V4&lt;/code&gt; 4つのとしてアドレスを &lt;code&gt;u8&lt;/code&gt; 値が、それでも表現 &lt;code&gt;V6&lt;/code&gt; 一つとして、アドレス &lt;code&gt;String&lt;/code&gt; 値を、我々はAとすることはできません構造。列挙型はこのケースを簡単に処理します：</target>
        </trans-unit>
        <trans-unit id="a401bf0a884425f212fc0c2849df8bdacf839a70" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s another solution to the problem of bringing two types of the same name into the same scope with &lt;code&gt;use&lt;/code&gt;: after the path, we can specify &lt;code&gt;as&lt;/code&gt; and a new local name, or alias, for the type. Listing 7-16 shows another way to write the code in Listing 7-15 by renaming one of the two &lt;code&gt;Result&lt;/code&gt; types using &lt;code&gt;as&lt;/code&gt;.</source>
          <target state="translated">同じ名前の2つのタイプを同じスコープに &lt;code&gt;use&lt;/code&gt; して問題を解決する別の方法があります。パスの後に、タイプ &lt;code&gt;as&lt;/code&gt; 新しいローカル名またはエイリアスを指定できます。リスト7-16は、 &lt;code&gt;as&lt;/code&gt; を使用して2つの &lt;code&gt;Result&lt;/code&gt; タイプの1つを名前変更することにより、リスト7-15のコードを記述する別の方法を示しています。</target>
        </trans-unit>
        <trans-unit id="e2494d175673de3a22a42c411f830ff3208f6ec7" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s another wrinkle we haven&amp;rsquo;t talked about yet. This code using integers &amp;ndash; part of which was shown in Listing 4-2 &amp;ndash; works and is valid:</source>
          <target state="translated">まだ話していない別のしわがあります。整数を使用するこのコード（リスト4-2にその一部を示しています）は機能し、有効です。</target>
        </trans-unit>
        <trans-unit id="04733e00c121b49528c905aab2fa6e90d06dc6c3" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s another wrinkle we haven&amp;rsquo;t talked about yet. This code using integers, part of which was shown in Listing 4-2, works and is valid:</source>
          <target state="translated">まだ話していない別のしわがあります。整数を使用するこのコードは、コードリスト4-2に示すコードの一部で機能し、有効です。</target>
        </trans-unit>
        <trans-unit id="6058c5e16c87f1a91c60dc38f9f510ce010e9805" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s debate within the testing community about whether or not private functions should be tested directly, and other languages make it difficult or impossible to test private functions. Regardless of which testing ideology you adhere to, Rust&amp;rsquo;s privacy rules do allow you to test private functions. Consider the code in Listing 11-12 with the private function &lt;code&gt;internal_adder&lt;/code&gt;.</source>
          <target state="translated">プライベート関数を直接テストする必要があるかどうかについては、テストコミュニティ内で議論があり、他の言語ではプライベート関数のテストが困難または不可能になっています。Rustのプライバシールールでは、どのテストイデオロギーを遵守するかに関係なく、プライベート関数をテストできます。プライベート関数 &lt;code&gt;internal_adder&lt;/code&gt; を含むリスト11-12のコードを考えます。</target>
        </trans-unit>
        <trans-unit id="908f1205edb5e08b15769591fe9ecf304d371a0b" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s no mechanism being used to synchronize access to the data.</source>
          <target state="translated">データへのアクセスを同期するために使用されているメカニズムはありません。</target>
        </trans-unit>
        <trans-unit id="8e1fa626ffc94c26aaee1b60bc06a3539eef3bfd" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s no reason to separate these methods into multiple &lt;code&gt;impl&lt;/code&gt; blocks here, but this is valid syntax. We&amp;rsquo;ll see a case in which multiple &lt;code&gt;impl&lt;/code&gt; blocks are useful in Chapter 10, where we discuss generic types and traits.</source>
          <target state="translated">ここでこれらのメソッドを複数の &lt;code&gt;impl&lt;/code&gt; ブロックに分離する理由はありませんが、これは有効な構文です。第10章では、複数の &lt;code&gt;impl&lt;/code&gt; ブロックが役立つケースについて説明し、ジェネリック型と特性について説明します。</target>
        </trans-unit>
        <trans-unit id="68d4631903746cfba7c6e6864ab36c77a56f918c" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s no strong reason behind this idiom: it&amp;rsquo;s just the convention that has emerged, and folks have gotten used to reading and writing Rust code this way.</source>
          <target state="translated">このイディオムの背後に強い理由はありません。それは、出現した慣習に過ぎず、人々はこの方法でRustコードを読み書きすることに慣れています。</target>
        </trans-unit>
        <trans-unit id="c6cc13f913f5af22a31d9a866ef0ab4e915bc64e" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s not a good way to encode this information in the types you use.</source>
          <target state="translated">この情報を使用するタイプでエンコードする良い方法はありません。</target>
        </trans-unit>
        <trans-unit id="42ede15289d883de11e0a80cc68d82337478321c" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s one more catch with this release model: unstable features. Rust uses a technique called &amp;ldquo;feature flags&amp;rdquo; to determine what features are enabled in a given release. If a new feature is under active development, it lands on &lt;code&gt;master&lt;/code&gt;, and therefore, in nightly, but behind a &lt;em&gt;feature flag&lt;/em&gt;. If you, as a user, wish to try out the work-in-progress feature, you can, but you must be using a nightly release of Rust and annotate your source code with the appropriate flag to opt in.</source>
          <target state="translated">このリリースモデルにはもう1つ問題点があります。それは、不安定な機能です。Rustは、「機能フラグ」と呼ばれる手法を使用して、特定のリリースで有効になっている機能を判別します。新しい機能が活発に開発されている場合、それは &lt;code&gt;master&lt;/code&gt; に到達します。したがって、毎晩、&lt;em&gt;機能フラグの&lt;/em&gt;後ろに表示され&lt;em&gt;ます&lt;/em&gt;。ユーザーとして、進行中の機能を試してみたい場合は可能ですが、Rustのナイトリーリリースを使用して、オプトインする適切なフラグでソースコードに注釈を付ける必要があります。</target>
        </trans-unit>
        <trans-unit id="daaeaab720a0d66e562ebf5f2bea02ac0a5abbb2" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s one more situation involving &lt;code&gt;pub&lt;/code&gt; that we haven&amp;rsquo;t covered, and that is our last module system feature: the &lt;code&gt;use&lt;/code&gt; keyword. We&amp;rsquo;ll cover &lt;code&gt;use&lt;/code&gt; by itself first, and then we&amp;rsquo;ll show how to combine &lt;code&gt;pub&lt;/code&gt; and &lt;code&gt;use&lt;/code&gt;.</source>
          <target state="translated">まだカバーしていない &lt;code&gt;pub&lt;/code&gt; に関連するもう1つの状況があります。それが最後のモジュールシステム機能です： &lt;code&gt;use&lt;/code&gt; キーワード。私たちは、取り上げる &lt;code&gt;use&lt;/code&gt; 最初にそれ自体で、その後、私たちはどのように組み合わせるかを示します &lt;code&gt;pub&lt;/code&gt; して &lt;code&gt;use&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5e8c77371d51b56070c8afcedaaaf9336a342d93" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s one other aspect of &lt;code&gt;match&lt;/code&gt; we need to discuss. Consider this version of our &lt;code&gt;plus_one&lt;/code&gt; function that has a bug and won&amp;rsquo;t compile:</source>
          <target state="translated">私たちが議論する必要がある &lt;code&gt;match&lt;/code&gt; のもう一つの側面があります。バグがあり、コンパイルされないこのバージョンの &lt;code&gt;plus_one&lt;/code&gt; 関数を考えてみます。</target>
        </trans-unit>
        <trans-unit id="3cab02a3373b42bd604f431d95c5d649fedd71e0" translate="yes" xml:space="preserve">
          <source>There's a trait in the standard library for converting something into an iterator: &lt;a href=&quot;trait.intoiterator&quot;&gt;&lt;code&gt;IntoIterator&lt;/code&gt;&lt;/a&gt;. This trait has one method, &lt;a href=&quot;trait.intoiterator#tymethod.into_iter&quot;&gt;&lt;code&gt;into_iter&lt;/code&gt;&lt;/a&gt;, which converts the thing implementing &lt;a href=&quot;trait.intoiterator&quot;&gt;&lt;code&gt;IntoIterator&lt;/code&gt;&lt;/a&gt; into an iterator. Let's take a look at that &lt;code&gt;for&lt;/code&gt; loop again, and what the compiler converts it into:</source>
          <target state="translated">標準ライブラリには、何かをイテレータに変換するための特性&lt;a href=&quot;trait.intoiterator&quot;&gt; &lt;code&gt;IntoIterator&lt;/code&gt; があり&lt;/a&gt;ます。このトレイトには、&lt;a href=&quot;trait.intoiterator#tymethod.into_iter&quot;&gt; &lt;code&gt;into_iter&lt;/code&gt; &lt;/a&gt;実装するものをイテレータに変換するメソッド&lt;a href=&quot;trait.intoiterator&quot;&gt; &lt;code&gt;IntoIterator&lt;/code&gt; &lt;/a&gt;があります。その &lt;code&gt;for&lt;/code&gt; ループをもう一度見てみましょう。コンパイラーはこれを次のように変換します。</target>
        </trans-unit>
        <trans-unit id="126dd99b7c8920c551aa5435d3f5f50326fcb2aa" translate="yes" xml:space="preserve">
          <source>There's no easy fix for this, generally code will need to be refactored so that you no longer need to derive from &lt;code&gt;Super&amp;lt;Self&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">これを簡単に修正する方法はありません。通常、コードをリファクタリングして、 &lt;code&gt;Super&amp;lt;Self&amp;gt;&lt;/code&gt; から派生する必要がないようにする必要があります。</target>
        </trans-unit>
        <trans-unit id="488dc2b946582ce5502bb699e0ad78fcce8b394c" translate="yes" xml:space="preserve">
          <source>There's one more subtle bit here: the standard library contains an interesting implementation of &lt;a href=&quot;trait.intoiterator&quot;&gt;&lt;code&gt;IntoIterator&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">ここにもう1つ微妙な点があります。標準ライブラリには、&lt;a href=&quot;trait.intoiterator&quot;&gt; &lt;code&gt;IntoIterator&lt;/code&gt; の&lt;/a&gt;興味深い実装が含まれています。</target>
        </trans-unit>
        <trans-unit id="fd800f0b62b0c62a6a6fb9b356e68d3a2d4685be" translate="yes" xml:space="preserve">
          <source>There, the where clause &lt;code&gt;T: 'a&lt;/code&gt; that appears on the impl is not known to be satisfied on the struct. To make this example compile, you have to add a where-clause like &lt;code&gt;T: 'a&lt;/code&gt; to the struct definition:</source>
          <target state="translated">そこでは、implに現れるwhere句 &lt;code&gt;T: 'a&lt;/code&gt; は、構造体で満たされていることがわかりません。この例をコンパイルするには、 &lt;code&gt;T: 'a&lt;/code&gt; ようなwhere句を構造体定義に追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="943a55d68bc8d1a8af15546966743386da3f91a8" translate="yes" xml:space="preserve">
          <source>Therefore, Rust&amp;rsquo;s type system and trait bounds ensure that you can never accidentally send an &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; value across threads unsafely. When we tried to do this in Listing 16-14, we got the error &lt;code&gt;the trait Send is not implemented for Rc&amp;lt;Mutex&amp;lt;i32&amp;gt;&amp;gt;&lt;/code&gt;. When we switched to &lt;code&gt;Arc&amp;lt;T&amp;gt;&lt;/code&gt;, which is &lt;code&gt;Send&lt;/code&gt;, the code compiled.</source>
          <target state="translated">したがって、Rustの型システムとトレイトの境界により、誤って &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; 値をスレッド間で安全に送信できないことがなくなります。リスト16-14でこれを行おうとすると &lt;code&gt;the trait Send is not implemented for Rc&amp;lt;Mutex&amp;lt;i32&amp;gt;&amp;gt;&lt;/code&gt; というエラーが発生しました。 &lt;code&gt;Arc&amp;lt;T&amp;gt;&lt;/code&gt; （ &lt;code&gt;Send&lt;/code&gt; ）に切り替えると、コードがコンパイルされました。</target>
        </trans-unit>
        <trans-unit id="92887ab1d8d0b7fee43ce74855c566c18dd9ff66" translate="yes" xml:space="preserve">
          <source>Therefore, pinning also comes with a &lt;a href=&quot;../ops/trait.drop#tymethod.drop&quot;&gt;&lt;code&gt;drop&lt;/code&gt;&lt;/a&gt;-related guarantee.</source>
          <target state="translated">したがって、ピン留めには&lt;a href=&quot;../ops/trait.drop#tymethod.drop&quot;&gt; &lt;code&gt;drop&lt;/code&gt; &lt;/a&gt;関連の保証も付いています。</target>
        </trans-unit>
        <trans-unit id="a965d0af2f94e5f3318be18d630d6ce398f8ad8c" translate="yes" xml:space="preserve">
          <source>Therefore, pinning also comes with a &lt;code&gt;drop&lt;/code&gt;-related guarantee.</source>
          <target state="translated">したがって、ピン留めには &lt;code&gt;drop&lt;/code&gt; 関連の保証も付いています。</target>
        </trans-unit>
        <trans-unit id="0034e8adfe6fdcd359b83e7e3154391d1a05f64e" translate="yes" xml:space="preserve">
          <source>Therefore, we cannot rely on naive check for &lt;code&gt;StructuralPartialEq&lt;/code&gt; and mere &lt;code&gt;Eq&lt;/code&gt;.</source>
          <target state="translated">したがって、 &lt;code&gt;StructuralPartialEq&lt;/code&gt; と単なる &lt;code&gt;Eq&lt;/code&gt; の単純なチェックに依存することはできません。</target>
        </trans-unit>
        <trans-unit id="f3da5db36b6a5c8b63c646979b9f9638e2ffed72" translate="yes" xml:space="preserve">
          <source>These abstractions can be built out of lower-level primitives. For efficiency, the sync objects in the standard library are usually implemented with help from the operating system's kernel, which is able to reschedule the threads while they are blocked on acquiring a lock.</source>
          <target state="translated">これらの抽象化は、低レベルのプリミティブから構築することができます。効率化のために、標準ライブラリの同期オブジェクトは通常、オペレーティングシステムのカーネルの助けを借りて実装されています。</target>
        </trans-unit>
        <trans-unit id="0b4543381c3d34027ca13b9d929f743b5e4c9c39" translate="yes" xml:space="preserve">
          <source>These also point to memory owned by some other value. A mutable reference type is written &lt;code&gt;&amp;amp;mut type&lt;/code&gt; or &lt;code&gt;&amp;amp;'a mut type&lt;/code&gt;. A mutable reference (that hasn't been borrowed) is the only way to access the value it points to, so is not &lt;code&gt;Copy&lt;/code&gt;.</source>
          <target state="translated">これらは、他の値が所有するメモリも指します。可変参照型は &lt;code&gt;&amp;amp;mut type&lt;/code&gt; または &lt;code&gt;&amp;amp;'a mut type&lt;/code&gt; と記述されます。（借用されていない）可変参照は、それが指す値にアクセスする唯一の方法であるため、 &lt;code&gt;Copy&lt;/code&gt; ではありません。</target>
        </trans-unit>
        <trans-unit id="1edbd620f4ea3fb93fdd0d7dd71adad12120dfa7" translate="yes" xml:space="preserve">
          <source>These ampersands are &lt;em&gt;references&lt;/em&gt;, and they allow you to refer to some value without taking ownership of it. Figure 4-5 shows a diagram.</source>
          <target state="translated">これらのアンパサンドは&lt;em&gt;参照&lt;/em&gt;であり、それらを使用すると、所有権を取得することなく、ある値を参照できます。図4-5に図を示します。</target>
        </trans-unit>
        <trans-unit id="c26ef3d23f517e371ad3e5a198bcf65faf103392" translate="yes" xml:space="preserve">
          <source>These are all flags altering the behavior of the formatter.</source>
          <target state="translated">これらはすべてフォーマッタの動作を変更するフラグです。</target>
        </trans-unit>
        <trans-unit id="4fbf8436660d61da218272cb68549a2354d27ae0" translate="yes" xml:space="preserve">
          <source>These are equivalent to the following explicit lifetime annotations:</source>
          <target state="translated">これらは、以下の明示的なライフタイムアノテーションに相当します。</target>
        </trans-unit>
        <trans-unit id="3f42eae85e77f8aae9c5335f688c216fd7101df0" translate="yes" xml:space="preserve">
          <source>These are fairly high-level and quick break-downs of when each collection should be considered. Detailed discussions of strengths and weaknesses of individual collections can be found on their own documentation pages.</source>
          <target state="translated">これらは、各コレクションがいつ検討されるべきかについて、かなりハイレベルで簡単に説明したものです。個々のコレクションの長所と短所についての詳細な議論は、それぞれの文書のページに記載されている。</target>
        </trans-unit>
        <trans-unit id="f5b38a7809c6c63bf242f85f557b82e6e93c16bc" translate="yes" xml:space="preserve">
          <source>These are often used in combination with &lt;a href=&quot;external-blocks&quot;&gt;external block&lt;/a&gt; items which provide function &lt;em&gt;declarations&lt;/em&gt; that can be used to call functions without providing their &lt;em&gt;definition&lt;/em&gt;:</source>
          <target state="translated">これらは、&lt;em&gt;定義&lt;/em&gt;を提供せずに関数を呼び出すために使用できる関数&lt;em&gt;宣言&lt;/em&gt;を提供する&lt;a href=&quot;external-blocks&quot;&gt;外部ブロック&lt;/a&gt;項目と組み合わせて使用​​されることがよくあります。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="69b2114a065741874c57309ba27c70784c7ddedd" translate="yes" xml:space="preserve">
          <source>These are the last two unary operators. This table summarizes the behavior of them on primitive types and which traits are used to overload these operators for other types. Remember that signed integers are always represented using two's complement. The operands of all of these operators are evaluated in &lt;a href=&quot;../expressions#place-expressions-and-value-expressions&quot;&gt;value expression context&lt;/a&gt; so are moved or copied.</source>
          <target state="translated">これらは最後の2つの単項演算子です。この表は、プリミティブ型でのそれらの動作と、他の型のこれらの演算子をオーバーロードするために使用される特性をまとめたものです。符号付き整数は常に2の補数を使用して表されることに注意してください。これらすべての演算子のオペランドは、&lt;a href=&quot;../expressions#place-expressions-and-value-expressions&quot;&gt;値式のコンテキストで&lt;/a&gt;評価されるため、移動またはコピーされます。</target>
        </trans-unit>
        <trans-unit id="25cb76396a6daa0dab5184b03f4b6697d1acd40a" translate="yes" xml:space="preserve">
          <source>These attributes are meant to only be used by the standard library and are rejected in your own crates.</source>
          <target state="translated">これらの属性は標準ライブラリでのみ使用されることを意図しており、独自のクレートでは拒否されます。</target>
        </trans-unit>
        <trans-unit id="b6db5a380dbbbf8a2cd7b3c9d1a9637a5d119ab4" translate="yes" xml:space="preserve">
          <source>These attributes do not work on typedefs, since typedefs are just aliases.</source>
          <target state="translated">これらの属性はtypedefに対しては機能しません。</target>
        </trans-unit>
        <trans-unit id="45e9c8e478d7d23050c1bb7760888996d75acd57" translate="yes" xml:space="preserve">
          <source>These axioms, along with careful use of &lt;a href=&quot;../primitive.pointer#method.offset&quot;&gt;&lt;code&gt;offset&lt;/code&gt;&lt;/a&gt; for pointer arithmetic, are enough to correctly implement many useful things in unsafe code. Stronger guarantees will be provided eventually, as the &lt;a href=&quot;https://doc.rust-lang.org/nomicon/aliasing.html&quot;&gt;aliasing&lt;/a&gt; rules are being determined. For more information, see the &lt;a href=&quot;../../book/ch19-01-unsafe-rust#dereferencing-a-raw-pointer&quot;&gt;book&lt;/a&gt; as well as the section in the reference devoted to &lt;a href=&quot;../../reference/behavior-considered-undefined&quot;&gt;undefined behavior&lt;/a&gt;.</source>
          <target state="translated">これらの公理は、ポインター計算に&lt;a href=&quot;../primitive.pointer#method.offset&quot;&gt; &lt;code&gt;offset&lt;/code&gt; &lt;/a&gt;を注意深く使用することで、安全でないコードで多くの有用なものを正しく実装するのに十分です。&lt;a href=&quot;https://doc.rust-lang.org/nomicon/aliasing.html&quot;&gt;エイリアシング&lt;/a&gt;規則が決定されているため、最終的にはより強力な保証が提供されます。詳細については、&lt;a href=&quot;../../book/ch19-01-unsafe-rust#dereferencing-a-raw-pointer&quot;&gt;本&lt;/a&gt;と、&lt;a href=&quot;../../reference/behavior-considered-undefined&quot;&gt;未定義の動作&lt;/a&gt;に関するリファレンスのセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="7913b3c72a22fc6b243e0539a47297d89428aedf" translate="yes" xml:space="preserve">
          <source>These can all be interpreted as flags for a particular formatter.</source>
          <target state="translated">これらはすべて、特定のフォーマッタのフラグとして解釈できます。</target>
        </trans-unit>
        <trans-unit id="0e39a0bd16ba8ecfd732cbb117c3248fda60a735" translate="yes" xml:space="preserve">
          <source>These can be fixed by declaring lifetime parameters:</source>
          <target state="translated">これらはライフタイムパラメータを宣言することで固定することができます。</target>
        </trans-unit>
        <trans-unit id="d454f3116d0aed2fb7a537cae1b229f52b361113" translate="yes" xml:space="preserve">
          <source>These channels come in two flavors:</source>
          <target state="translated">これらのチャンネルには2つのフレーバーがあります。</target>
        </trans-unit>
        <trans-unit id="c31b94922e5b65f02fef2f529b0b7e4859486143" translate="yes" xml:space="preserve">
          <source>These components describe the shape of the data we&amp;rsquo;re working with, which we then match against values to determine whether our program has the correct data to continue running a particular piece of code.</source>
          <target state="translated">これらのコンポーネントは、操作しているデータの形状を記述し、値と照合して、プログラムに特定のコードの実行を継続するための正しいデータがあるかどうかを判断します。</target>
        </trans-unit>
        <trans-unit id="01d073371ba3433dace28c44e03a57f2a2d8dbcd" translate="yes" xml:space="preserve">
          <source>These default object lifetime bounds are used instead of the lifetime parameter elision rules defined above when the lifetime bound is omitted entirely. If &lt;code&gt;'_&lt;/code&gt; is used as the lifetime bound then the bound follows the usual elision rules.</source>
          <target state="translated">これらのデフォルトのオブジェクトライフタイムバウンドは、ライフタイムバウンドが完全に省略されている場合に、上記で定義されたライフタイムパラメータ省略ルールの代わりに使用されます。場合 &lt;code&gt;'_&lt;/code&gt; バインド寿命として使用され、その後バウンドは、通常のエリジオンの規則に従います。</target>
        </trans-unit>
        <trans-unit id="3cb556ed4e688a43a755806e0180a1ae20f4245d" translate="yes" xml:space="preserve">
          <source>These enumerations can be cast to integer types with the &lt;code&gt;as&lt;/code&gt; operator by a &lt;a href=&quot;../expressions/operator-expr#semantics&quot;&gt;numeric cast&lt;/a&gt;. The enumeration can optionally specify which integer each discriminant gets by following the variant name with &lt;code&gt;=&lt;/code&gt; followed by a &lt;a href=&quot;../const_eval#constant-expressions&quot;&gt;constant expression&lt;/a&gt;. If the first variant in the declaration is unspecified, then it is set to zero. For every other unspecified discriminant, it is set to one higher than the previous variant in the declaration.</source>
          <target state="translated">これらの列挙は、&lt;a href=&quot;../expressions/operator-expr#semantics&quot;&gt;数値キャスト&lt;/a&gt;によって &lt;code&gt;as&lt;/code&gt; 演算子を使用して整数型にキャストできます。列挙型では、バリアント名の後に &lt;code&gt;=&lt;/code&gt; を付けて&lt;a href=&quot;../const_eval#constant-expressions&quot;&gt;定数式を続ける&lt;/a&gt;ことで、各判別子が取得する整数をオプションで指定できます。宣言の最初のバリアントが指定されていない場合は、ゼロに設定されます。他のすべての指定されていない判別式では、宣言の前のバリアントよりも1つ高く設定されます。</target>
        </trans-unit>
        <trans-unit id="56f44a74054755cd230d668bfd5dc0a8f5aa2ac0" translate="yes" xml:space="preserve">
          <source>These keywords aren't used yet, but they are reserved for future use. They have the same restrictions as strict keywords. The reasoning behind this is to make current programs forward compatible with future versions of Rust by forbidding them to use these keywords.</source>
          <target state="translated">これらのキーワードはまだ使用されていませんが、将来の使用のために予約されています。厳密なキーワードと同じ制限があります。この背景にある理由は、これらのキーワードを使用することを禁止することで、現在のプログラムを将来のバージョンの Rust と互換性のあるものにするためです。</target>
        </trans-unit>
        <trans-unit id="f2eab53396d35c8dd4df2e3ab58dfee415a7015e" translate="yes" xml:space="preserve">
          <source>These keywords can only be used in their correct contexts. They cannot be used as the names of:</source>
          <target state="translated">これらのキーワードは、正しい文脈でのみ使用できます。名前としては使用できません。</target>
        </trans-unit>
        <trans-unit id="aec421e6db4795c07bbf5e8ae6411e119af0b089" translate="yes" xml:space="preserve">
          <source>These keywords have special meaning only in certain contexts. For example, it is possible to declare a variable or method with the name &lt;code&gt;union&lt;/code&gt;.</source>
          <target state="translated">これらのキーワードは、特定のコンテキストでのみ特別な意味を持ちます。たとえば、 &lt;code&gt;union&lt;/code&gt; という名前の変数またはメソッドを宣言することができます。</target>
        </trans-unit>
        <trans-unit id="24355b40ed9274fe2bce5ed7512a65c55ffdfb11" translate="yes" xml:space="preserve">
          <source>These lines define a function in Rust. The &lt;code&gt;main&lt;/code&gt; function is special: it is always the first code that runs in every executable Rust program. The first line declares a function named &lt;code&gt;main&lt;/code&gt; that has no parameters and returns nothing. If there were parameters, they would go inside the parentheses, &lt;code&gt;()&lt;/code&gt;.</source>
          <target state="translated">これらの行は、Rustの関数を定義しています。 &lt;code&gt;main&lt;/code&gt; 機能は、特別である：それは常に最初のコードであること、すべての実行可能な錆のプログラムで実行されます。1行目は、パラメーターがなく何も返さない &lt;code&gt;main&lt;/code&gt; という名前の関数を宣言しています。パラメータがある場合、それらは括弧 &lt;code&gt;()&lt;/code&gt; の内側に入ります。</target>
        </trans-unit>
        <trans-unit id="78ee21b3b578a8828b900a4d7bb5e92af7fdfb9f" translate="yes" xml:space="preserve">
          <source>These lines show Cargo only updates the build with your tiny change to the &lt;em&gt;src/main.rs&lt;/em&gt; file. Your dependencies haven&amp;rsquo;t changed, so Cargo knows it can reuse what it has already downloaded and compiled for those. It just rebuilds your part of the code.</source>
          <target state="translated">これらの行は、Cargoが&lt;em&gt;src / main.rs&lt;/em&gt;ファイルにわずかな変更を加えただけでビルドを更新することを&lt;em&gt;示してい&lt;/em&gt;ます。依存関係は変更されていないため、Cargoはすでにダウンロードしてコンパイルしたものを再利用できることを認識しています。コードの一部を再構築するだけです。</target>
        </trans-unit>
        <trans-unit id="ba54db094123009e0eb01fa8adef8c82df9419e8" translate="yes" xml:space="preserve">
          <source>These macros are defined by a &lt;a href=&quot;visibility-and-privacy&quot;&gt;public&lt;/a&gt;&lt;a href=&quot;items/functions&quot;&gt;function&lt;/a&gt; with the &lt;code&gt;proc_macro&lt;/code&gt;&lt;a href=&quot;attributes&quot;&gt;attribute&lt;/a&gt; and a signature of &lt;code&gt;(TokenStream) -&amp;gt; TokenStream&lt;/code&gt;. The input &lt;a href=&quot;https://doc.rust-lang.org/proc_macro/struct.TokenStream.html&quot;&gt;&lt;code&gt;TokenStream&lt;/code&gt;&lt;/a&gt; is what is inside the delimiters of the macro invocation and the output &lt;a href=&quot;https://doc.rust-lang.org/proc_macro/struct.TokenStream.html&quot;&gt;&lt;code&gt;TokenStream&lt;/code&gt;&lt;/a&gt; replaces the entire macro invocation.</source>
          <target state="translated">これらのマクロは、 &lt;code&gt;proc_macro&lt;/code&gt; &lt;a href=&quot;attributes&quot;&gt;属性&lt;/a&gt;と &lt;code&gt;(TokenStream) -&amp;gt; TokenStream&lt;/code&gt; シグネチャを持つ&lt;a href=&quot;visibility-and-privacy&quot;&gt;パブリック&lt;/a&gt;&lt;a href=&quot;items/functions&quot;&gt;関数&lt;/a&gt;によって定義されます。入力&lt;a href=&quot;https://doc.rust-lang.org/proc_macro/struct.TokenStream.html&quot;&gt; &lt;code&gt;TokenStream&lt;/code&gt; &lt;/a&gt;はマクロ呼び出しの区切り文字の内側にあり、出力&lt;a href=&quot;https://doc.rust-lang.org/proc_macro/struct.TokenStream.html&quot;&gt; &lt;code&gt;TokenStream&lt;/code&gt; &lt;/a&gt;はマクロ呼び出し全体を置き換えます。</target>
        </trans-unit>
        <trans-unit id="c77584f3dda90ac8527f5ef32d9ad1f6daeca4c8" translate="yes" xml:space="preserve">
          <source>These macros are defined by a &lt;a href=&quot;visibility-and-privacy&quot;&gt;public&lt;/a&gt;&lt;a href=&quot;items/functions&quot;&gt;function&lt;/a&gt; with the &lt;code&gt;proc_macro&lt;/code&gt;&lt;a href=&quot;attributes&quot;&gt;attribute&lt;/a&gt; and a signature of &lt;code&gt;(TokenStream) -&amp;gt; TokenStream&lt;/code&gt;. The input &lt;a href=&quot;https://doc.rust-lang.org/proc_macro/struct.TokenStream.html&quot;&gt;&lt;code&gt;TokenStream&lt;/code&gt;&lt;/a&gt; is what is inside the delimiters of the macro invocation and the output &lt;a href=&quot;https://doc.rust-lang.org/proc_macro/struct.TokenStream.html&quot;&gt;&lt;code&gt;TokenStream&lt;/code&gt;&lt;/a&gt; replaces the entire macro invocation. It may contain an arbitrary number of &lt;a href=&quot;items&quot;&gt;items&lt;/a&gt;. These macros cannot expand to syntax that defines new &lt;code&gt;macro_rules&lt;/code&gt; style macros.</source>
          <target state="translated">これらのマクロは、 &lt;code&gt;proc_macro&lt;/code&gt; &lt;a href=&quot;attributes&quot;&gt;属性&lt;/a&gt;と &lt;code&gt;(TokenStream) -&amp;gt; TokenStream&lt;/code&gt; シグネチャを持つ&lt;a href=&quot;visibility-and-privacy&quot;&gt;public &lt;/a&gt;&lt;a href=&quot;items/functions&quot;&gt;関数&lt;/a&gt;によって定義されます。入力&lt;a href=&quot;https://doc.rust-lang.org/proc_macro/struct.TokenStream.html&quot;&gt; &lt;code&gt;TokenStream&lt;/code&gt; &lt;/a&gt;はマクロ呼び出しの区切り文字の内側にあり、出力&lt;a href=&quot;https://doc.rust-lang.org/proc_macro/struct.TokenStream.html&quot;&gt; &lt;code&gt;TokenStream&lt;/code&gt; &lt;/a&gt;はマクロ呼び出し全体を置き換えます。任意の数の&lt;a href=&quot;items&quot;&gt;アイテムを&lt;/a&gt;含めることができます。これらのマクロは、新しい &lt;code&gt;macro_rules&lt;/code&gt; スタイルのマクロを定義する構文に拡張できません。</target>
        </trans-unit>
        <trans-unit id="254739acb173823a2863a1c41d3ebb09cfa13aeb" translate="yes" xml:space="preserve">
          <source>These macros are only invokable in &lt;a href=&quot;items/modules&quot;&gt;modules&lt;/a&gt;. They cannot even be invoked to create &lt;a href=&quot;statements#item-declarations&quot;&gt;item declaration statements&lt;/a&gt;. Furthermore, they must either be invoked with curly braces and no semicolon or a different delimiter followed by a semicolon. For example, &lt;code&gt;make_answer&lt;/code&gt; from the previous example can be invoked as &lt;code&gt;make_answer!{}&lt;/code&gt;, &lt;code&gt;make_answer!();&lt;/code&gt; or &lt;code&gt;make_answer![];&lt;/code&gt;.</source>
          <target state="translated">これらのマクロは&lt;a href=&quot;items/modules&quot;&gt;モジュールで&lt;/a&gt;のみ呼び出すことができます。&lt;a href=&quot;statements#item-declarations&quot;&gt;アイテム宣言ステートメント&lt;/a&gt;を作成するために呼び出すこともできません。さらに、それらはセミコロンなしの中括弧で呼び出すか、セミコロンが後に続く別の区切り文字で呼び出す必要があります。たとえば、前の例の &lt;code&gt;make_answer&lt;/code&gt; は、 &lt;code&gt;make_answer!{}&lt;/code&gt; 、 &lt;code&gt;make_answer!();&lt;/code&gt; として呼び出すことができます。または &lt;code&gt;make_answer![];&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5391198458bfd8d81a447bc30f66734e6f03394d" translate="yes" xml:space="preserve">
          <source>These markers can be combined, so &lt;code&gt;unsafe extern &quot;stdcall&quot; fn()&lt;/code&gt; is a valid type.</source>
          <target state="translated">これらのマーカーは組み合わせることができるため、 &lt;code&gt;unsafe extern &quot;stdcall&quot; fn()&lt;/code&gt; は有効なタイプです。</target>
        </trans-unit>
        <trans-unit id="8c3ea3ec32e230deeef1943701b442105e65b661" translate="yes" xml:space="preserve">
          <source>These operators cannot be overloaded.</source>
          <target state="translated">これらの演算子に負荷をかけることはできません。</target>
        </trans-unit>
        <trans-unit id="12f02bfbd76d4dd6ccf6a1d0f95634f64537447a" translate="yes" xml:space="preserve">
          <source>These point to memory &lt;em&gt;owned by some other value&lt;/em&gt;. When a shared reference to a value is created it prevents direct mutation of the value. &lt;a href=&quot;../interior-mutability&quot;&gt;Interior mutability&lt;/a&gt; provides an exception for this in certain circumstances. As the name suggests, any number of shared references to a value may exist. A shared reference type is written &lt;code&gt;&amp;amp;type&lt;/code&gt;, or &lt;code&gt;&amp;amp;'a type&lt;/code&gt; when you need to specify an explicit lifetime. Copying a reference is a &quot;shallow&quot; operation: it involves only copying the pointer itself, that is, pointers are &lt;code&gt;Copy&lt;/code&gt;. Releasing a reference has no effect on the value it points to, but referencing of a &lt;a href=&quot;../expressions#temporaries&quot;&gt;temporary value&lt;/a&gt; will keep it alive during the scope of the reference itself.</source>
          <target state="translated">これらは&lt;em&gt;、他の値が所有&lt;/em&gt;するメモリを指し&lt;em&gt;ます&lt;/em&gt;。値への共有参照が作成されると、値の直接の変更が防止されます。&lt;a href=&quot;../interior-mutability&quot;&gt;内部の可変性&lt;/a&gt;は、特定の状況でこれに対する例外を提供します。名前が示すように、値への共有参照はいくつでも存在する可能性があります。共有参照型は、明示的な有効期間を指定する必要がある場合は、 &lt;code&gt;&amp;amp;type&lt;/code&gt; または &lt;code&gt;&amp;amp;'a type&lt;/code&gt; と記述されます。参照のコピーは「浅い」操作です。これには、ポインター自体のコピーのみが含まれます。つまり、ポインターは &lt;code&gt;Copy&lt;/code&gt; です。参照を解放しても、それが指す値には影響しませんが、&lt;a href=&quot;../expressions#temporaries&quot;&gt;一時的な値&lt;/a&gt;を参照すると、参照自体のスコープ内で参照が存続します。</target>
        </trans-unit>
        <trans-unit id="3fc236a778b843e2aeed416fa4b2cc9e1a08823c" translate="yes" xml:space="preserve">
          <source>These point to memory &lt;em&gt;owned by some other value&lt;/em&gt;. When a shared reference to a value is created it prevents direct mutation of the value. &lt;a href=&quot;../interior-mutability&quot;&gt;Interior mutability&lt;/a&gt; provides an exception for this in certain circumstances. As the name suggests, any number of shared references to a value may exist. A shared reference type is written &lt;code&gt;&amp;amp;type&lt;/code&gt;, or &lt;code&gt;&amp;amp;'a type&lt;/code&gt; when you need to specify an explicit lifetime. Copying a reference is a &quot;shallow&quot; operation: it involves only copying the pointer itself, that is, pointers are &lt;code&gt;Copy&lt;/code&gt;. Releasing a reference has no effect on the value it points to, but referencing of a &lt;a href=&quot;../expressions#temporary-lifetimes&quot;&gt;temporary value&lt;/a&gt; will keep it alive during the scope of the reference itself.</source>
          <target state="translated">これらは&lt;em&gt;、他の値が所有&lt;/em&gt;するメモリを指し&lt;em&gt;ます&lt;/em&gt;。値への共有参照が作成されると、値の直接的な変更が防止されます。&lt;a href=&quot;../interior-mutability&quot;&gt;内部の可変性&lt;/a&gt;は、特定の状況でこれに対する例外を提供します。名前が示すように、値への共有参照はいくつでも存在できます。共有参照型は &lt;code&gt;&amp;amp;type&lt;/code&gt; 、または明示的な存続期間を指定する必要がある場合は &lt;code&gt;&amp;amp;'a type&lt;/code&gt; と記述されます。参照のコピーは「浅い」操作です。これには、ポインタ自体のコピーのみが含まれます。つまり、ポインタは &lt;code&gt;Copy&lt;/code&gt; です。参照を解放しても、参照先の値には影響しませんが、&lt;a href=&quot;../expressions#temporary-lifetimes&quot;&gt;一時的な値&lt;/a&gt;を参照すると、参照自体のスコープ内でその値が維持されます。</target>
        </trans-unit>
        <trans-unit id="e5e8141a80455494c8061b88eb7d52c5630351cf" translate="yes" xml:space="preserve">
          <source>These profile names might be familiar from the output of your builds:</source>
          <target state="translated">これらのプロファイル名は、あなたのビルドの出力で見覚えがあるかもしれません。</target>
        </trans-unit>
        <trans-unit id="1ad28c50cb4ab16e536724b4f61aca4d7477f454" translate="yes" xml:space="preserve">
          <source>These safety checks can be relaxed for a section of the code by wrapping the unsafe instructions with an &lt;code&gt;unsafe&lt;/code&gt; block. For instance:</source>
          <target state="translated">これらの安全性チェックは、安全でない命令を &lt;code&gt;unsafe&lt;/code&gt; ブロックでラップすることにより、コードのセクションに対して緩和できます。例えば：</target>
        </trans-unit>
        <trans-unit id="7c9be14b653ccb0fc4412a262bd32a7bb0662862" translate="yes" xml:space="preserve">
          <source>These traits, along with &lt;a href=&quot;../../../ffi/struct.osstring&quot;&gt;&lt;code&gt;OsString&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../../ffi/struct.osstr&quot;&gt;&lt;code&gt;OsStr&lt;/code&gt;&lt;/a&gt;, work in conjunction so that it is possible to &lt;strong&gt;round-trip&lt;/strong&gt; strings from Windows and back, with no loss of data, even if the strings are ill-formed UTF-16.</source>
          <target state="translated">これらの特性は&lt;a href=&quot;../../../ffi/struct.osstring&quot;&gt; &lt;code&gt;OsString&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;../../../ffi/struct.osstr&quot;&gt; &lt;code&gt;OsStr&lt;/code&gt; &lt;/a&gt;と連携して機能するため、文字列が不正な形式の UTF-16であっても、データを失うことなく、Windowsから文字列を&lt;strong&gt;往復&lt;/strong&gt;することができます。</target>
        </trans-unit>
        <trans-unit id="0cc726c49519e90aab3de25bfe65c626d294217a" translate="yes" xml:space="preserve">
          <source>These two cases are surprisingly powerful for creating module hierarchies exposing public APIs while hiding internal implementation details. To help explain, here's a few use cases and what they would entail:</source>
          <target state="translated">これら2つのケースは、内部実装の詳細を隠しながら公開APIを公開するモジュール階層を作成するために驚くほど強力です。説明を助けるために、ここではいくつかのユースケースとその内容を紹介します。</target>
        </trans-unit>
        <trans-unit id="8ac19292e9dd15d2d45f1f79b996a19bf6206f30" translate="yes" xml:space="preserve">
          <source>These two examples illustrate the problem:</source>
          <target state="translated">この2つの例は、問題を説明しています。</target>
        </trans-unit>
        <trans-unit id="dca9d4b1de7c5a2be4c4d5727e7917fd8aab654c" translate="yes" xml:space="preserve">
          <source>These two formatting traits have distinct purposes:</source>
          <target state="translated">この2つの書式設定の特徴は、それぞれ異なる目的を持っています。</target>
        </trans-unit>
        <trans-unit id="742fffc208f85aff3d0f6f3059eddfffa585c4ab" translate="yes" xml:space="preserve">
          <source>These two functions might be implemented in Rust as follows. Here, the &lt;code&gt;struct Foo*&lt;/code&gt; type from C is translated to &lt;code&gt;Box&amp;lt;Foo&amp;gt;&lt;/code&gt;, which captures the ownership constraints. Note also that the nullable argument to &lt;code&gt;foo_delete&lt;/code&gt; is represented in Rust as &lt;code&gt;Option&amp;lt;Box&amp;lt;Foo&amp;gt;&amp;gt;&lt;/code&gt;, since &lt;code&gt;Box&amp;lt;Foo&amp;gt;&lt;/code&gt; cannot be null.</source>
          <target state="translated">これらの2つの関数は、次のようにRustに実装される可能性があります。ここで、Cの &lt;code&gt;struct Foo*&lt;/code&gt; タイプは、所有権の制約をキャプチャする &lt;code&gt;Box&amp;lt;Foo&amp;gt;&lt;/code&gt; 変換されます。NULL可能引数ことにも注意してください &lt;code&gt;foo_delete&lt;/code&gt; が錆で表される &lt;code&gt;Option&amp;lt;Box&amp;lt;Foo&amp;gt;&amp;gt;&lt;/code&gt; 、以来 &lt;code&gt;Box&amp;lt;Foo&amp;gt;&lt;/code&gt; nullにすることはできません。</target>
        </trans-unit>
        <trans-unit id="6f982f08c4e46524b8318daa35d1f6508b56f9c5" translate="yes" xml:space="preserve">
          <source>These two terms are often used interchangeably, and what they are attempting to convey is the answer to the question &quot;Can this item be used at this location?&quot;</source>
          <target state="translated">この2つの用語はしばしば互換性を持って使用されますが、この2つの用語が伝えようとしているのは、&quot;このアイテムはこの場所で使用できますか?&quot;という質問に対する答えです。</target>
        </trans-unit>
        <trans-unit id="327e657798ef3a0fe98594c42be8998daff24b69" translate="yes" xml:space="preserve">
          <source>These types provide access to the underlying data through references to the type of that data. They are said to be &amp;lsquo;borrowed as&amp;rsquo; that type. For instance, a &lt;a href=&quot;../boxed/struct.box&quot;&gt;&lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; can be borrowed as &lt;code&gt;T&lt;/code&gt; while a &lt;a href=&quot;../string/struct.string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; can be borrowed as &lt;code&gt;str&lt;/code&gt;.</source>
          <target state="translated">これらのタイプは、そのデータのタイプへの参照を通じて、基になるデータへのアクセスを提供します。彼らはそのタイプを「借りた」と言われています。たとえば、&lt;a href=&quot;../boxed/struct.box&quot;&gt; &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; &lt;/a&gt;は &lt;code&gt;T&lt;/code&gt; として借用でき、&lt;a href=&quot;../string/struct.string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;は &lt;code&gt;str&lt;/code&gt; として借用できます。</target>
        </trans-unit>
        <trans-unit id="a24b18110788da060d08a87d6e0370b2f3f11b2d" translate="yes" xml:space="preserve">
          <source>These will always be ORed with &lt;code&gt;CREATE_UNICODE_ENVIRONMENT&lt;/code&gt;.</source>
          <target state="translated">これらは常に &lt;code&gt;CREATE_UNICODE_ENVIRONMENT&lt;/code&gt; とORされます。</target>
        </trans-unit>
        <trans-unit id="4d9283345c9b012905e98bac4c4ff6bf77874d49" translate="yes" xml:space="preserve">
          <source>They are &lt;code&gt;'static&lt;/code&gt; because they're stored directly in the final binary, and so will be valid for the &lt;code&gt;'static&lt;/code&gt; duration.</source>
          <target state="translated">彼らは &lt;code&gt;'static&lt;/code&gt; それらが最終バイナリに直接保存されていて、そのために有効になりますので、 &lt;code&gt;'static&lt;/code&gt; 期間。</target>
        </trans-unit>
        <trans-unit id="86b3fa967e9ddc952d15703cad09add6ed0fe12c" translate="yes" xml:space="preserve">
          <source>They are never allowed before:</source>
          <target state="translated">今までは絶対に許されなかった。</target>
        </trans-unit>
        <trans-unit id="a91c6bc4d714ec79e34b3b499dac181a1c8a5b61" translate="yes" xml:space="preserve">
          <source>They are written as &lt;code&gt;impl&lt;/code&gt; followed by a set of trait bounds.</source>
          <target state="translated">それらは、一連の特性境界が続く &lt;code&gt;impl&lt;/code&gt; として記述されます。</target>
        </trans-unit>
        <trans-unit id="d6f10b3f0570fbded7ab662d2bff2e38078266a6" translate="yes" xml:space="preserve">
          <source>They can be used as targets of transmutes in unsafe code for manipulating the raw representations directly.</source>
          <target state="translated">これらは、生の表現を直接操作するための安全でないコードのトランスマートのターゲットとして使用することができます。</target>
        </trans-unit>
        <trans-unit id="81857ae63bf1641ca750521f716199457233e82d" translate="yes" xml:space="preserve">
          <source>They never take parameters and never return types.</source>
          <target state="translated">それらは決してパラメータを取りませんし、型を返すこともありません。</target>
        </trans-unit>
        <trans-unit id="3eb09871747750e3ee06b75fa9a63f7cfbbd1d29" translate="yes" xml:space="preserve">
          <source>Thin pointers are &quot;simple&quot; pointers: they are purely a reference to a memory address.</source>
          <target state="translated">薄いポインタは「単純な」ポインタであり、純粋にメモリアドレスへの参照です。</target>
        </trans-unit>
        <trans-unit id="4d4a58caf1c3fd49804715c525d371aaf6cc87c9" translate="yes" xml:space="preserve">
          <source>Things can get a little tricky once you start intermingling the two types of positional specifiers. The &quot;next argument&quot; specifier can be thought of as an iterator over the argument. Each time a &quot;next argument&quot; specifier is seen, the iterator advances. This leads to behavior like this:</source>
          <target state="translated">2つのタイプの位置指定子を混同し始めると、少し厄介なことになります。次の引数」指定子は、引数の上のイテレータと考えることができます。次の引数」指定子を見るたびに、イテレータは進みます。これは次のような動作につながります。</target>
        </trans-unit>
        <trans-unit id="9af9ddcb5af382b3006b61fbf3f41b42b2b57797" translate="yes" xml:space="preserve">
          <source>Think of a &lt;code&gt;match&lt;/code&gt; expression as being like a coin-sorting machine: coins slide down a track with variously sized holes along it, and each coin falls through the first hole it encounters that it fits into. In the same way, values go through each pattern in a &lt;code&gt;match&lt;/code&gt;, and at the first pattern the value &amp;ldquo;fits,&amp;rdquo; the value falls into the associated code block to be used during execution.</source>
          <target state="translated">&lt;code&gt;match&lt;/code&gt; 式は、コイン分類機のようなものと考えてください。コインは、さまざまなサイズの穴に沿ってトラックを滑り落ち、各コインは、最初に遭遇した穴から落下します。同様に、値は &lt;code&gt;match&lt;/code&gt; の各パターンを通過し、最初のパターンで値が「適合」すると、値は実行中に使用される関連コードブロックに分類されます。</target>
        </trans-unit>
        <trans-unit id="1fdd8b4a97ce68f59e33b3f6b509748be1aa6f2f" translate="yes" xml:space="preserve">
          <source>Think of being seated at a restaurant. When you enter, you state the number of people in your group, and the staff finds an empty table that fits everyone and leads you there. If someone in your group comes late, they can ask where you&amp;rsquo;ve been seated to find you.</source>
          <target state="translated">レストランに座っていると考えてください。あなたが入るとき、あなたはあなたのグループの人々の数を述べます、そして、スタッフは皆に合う空のテーブルを見つけて、そこであなたを導きます。グループの誰かが遅れて来る場合、彼らはあなたを見つけるためにあなたが座っている場所を尋ねることができます。</target>
        </trans-unit>
        <trans-unit id="0748eff7f6f3425a675a552a35d84af9fe1be56c" translate="yes" xml:space="preserve">
          <source>Thinking about the relationships another way, a parent node should own its children: if a parent node is dropped, its child nodes should be dropped as well. However, a child should not own its parent: if we drop a child node, the parent should still exist. This is a case for weak references!</source>
          <target state="translated">親ノードが削除された場合、その子ノードも削除されなければなりません。しかし、子は親を所有してはいけません:子ノードを削除しても、親は存在するはずです。これは弱い参照の場合です。</target>
        </trans-unit>
        <trans-unit id="399cffdf26999603bae93a3715241addff90c419" translate="yes" xml:space="preserve">
          <source>Thinking in Terms of Lifetimes</source>
          <target state="translated">寿命で考える</target>
        </trans-unit>
        <trans-unit id="7407b5aadd0d88118f5b7bf8fb59e7e1d6d93882" translate="yes" xml:space="preserve">
          <source>Third, the &lt;code&gt;run&lt;/code&gt; function now returns an &lt;code&gt;Ok&lt;/code&gt; value in the success case. We&amp;rsquo;ve declared the &lt;code&gt;run&lt;/code&gt; function&amp;rsquo;s success type as &lt;code&gt;()&lt;/code&gt; in the signature, which means we need to wrap the unit type value in the &lt;code&gt;Ok&lt;/code&gt; value. This &lt;code&gt;Ok(())&lt;/code&gt; syntax might look a bit strange at first, but using &lt;code&gt;()&lt;/code&gt; like this is the idiomatic way to indicate that we&amp;rsquo;re calling &lt;code&gt;run&lt;/code&gt; for its side effects only; it doesn&amp;rsquo;t return a value we need.</source>
          <target state="translated">3番目に、 &lt;code&gt;run&lt;/code&gt; 関数は成功した場合に &lt;code&gt;Ok&lt;/code&gt; 値を返すようになりました。シグネチャで &lt;code&gt;run&lt;/code&gt; 関数の成功タイプを &lt;code&gt;()&lt;/code&gt; として宣言しました。つまり、ユニットタイプ値を &lt;code&gt;Ok&lt;/code&gt; 値でラップする必要があります。この &lt;code&gt;Ok(())&lt;/code&gt; 構文は、最初は少し奇妙に見えるかもしれませんが、このように &lt;code&gt;()&lt;/code&gt; を使用することは、 &lt;code&gt;run&lt;/code&gt; を副作用として呼び出すことを示す慣用的な方法です。必要な値を返しません。</target>
        </trans-unit>
        <trans-unit id="5ed975d1877254eff4f647cec29b338bbca64ef4" translate="yes" xml:space="preserve">
          <source>Third, the standard library defines &lt;a href=&quot;prelude/index&quot;&gt;The Rust Prelude&lt;/a&gt;, a small collection of items - mostly traits - that are imported into every module of every crate. The traits in the prelude are pervasive, making the prelude documentation a good entry point to learning about the library.</source>
          <target state="translated">3番目に、標準ライブラリは&lt;a href=&quot;prelude/index&quot;&gt;、Rust Preludeを&lt;/a&gt;定義します。これは、すべてのクレートのすべてのモジュールにインポートされるアイテムの小さなコレクション（主に特性）です。プレリュードの特徴は広範であり、プレリュードのドキュメントは、ライブラリについて学ぶための優れたエントリポイントになります。</target>
        </trans-unit>
        <trans-unit id="2c016402b0d7abec88d04b55dd5a8f4c018ceb4a" translate="yes" xml:space="preserve">
          <source>Third, you see the &lt;code&gt;&quot;Hello, world!&quot;&lt;/code&gt; string. We pass this string as an argument to &lt;code&gt;println!&lt;/code&gt;, and the string is printed to the screen.</source>
          <target state="translated">3番目に、 &lt;code&gt;&quot;Hello, world!&quot;&lt;/code&gt; ストリング。この文字列を引数として &lt;code&gt;println!&lt;/code&gt; 渡します！、文字列が画面に出力されます。</target>
        </trans-unit>
        <trans-unit id="756c69ab3ae5844d50aa9add76723030b90c2e84" translate="yes" xml:space="preserve">
          <source>This &lt;a href=&quot;../io/type.result&quot;&gt;&lt;code&gt;io::Result&lt;/code&gt;&lt;/a&gt; will be an &lt;a href=&quot;../result/enum.result#variant.Err&quot;&gt;&lt;code&gt;Err&lt;/code&gt;&lt;/a&gt; if there's some sort of intermittent IO error during iteration.</source>
          <target state="translated">反復中にある種の断続的なIOエラーがある場合、この&lt;a href=&quot;../io/type.result&quot;&gt; &lt;code&gt;io::Result&lt;/code&gt; &lt;/a&gt;は&lt;a href=&quot;../result/enum.result#variant.Err&quot;&gt; &lt;code&gt;Err&lt;/code&gt; &lt;/a&gt;になります。</target>
        </trans-unit>
        <trans-unit id="45e5b6731a2eea68db70299dc76799ac1e3d8403" translate="yes" xml:space="preserve">
          <source>This &lt;a href=&quot;fn.sync_channel&quot;&gt;&lt;code&gt;sync_channel&lt;/code&gt;&lt;/a&gt;'s receiving half has disconnected, so the data could not be sent. The data is returned back to the callee in this case.</source>
          <target state="translated">この&lt;a href=&quot;fn.sync_channel&quot;&gt; &lt;code&gt;sync_channel&lt;/code&gt; &lt;/a&gt;の受信側の半分が切断されたため、データを送信できませんでした。この場合、データは呼び出し先に返されます。</target>
        </trans-unit>
        <trans-unit id="e029dc532e12308a313b095f5b88bb0b2db85884" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;#[route]&lt;/code&gt; attribute would be defined by the framework as a procedural macro. The signature of the macro definition function would look like this:</source>
          <target state="translated">この &lt;code&gt;#[route]&lt;/code&gt; 属性は、フレームワークによって手続き型マクロとして定義されます。マクロ定義関数のシグネチャは次のようになります。</target>
        </trans-unit>
        <trans-unit id="dc8fa4acf3fa662b100c7f01811572d66ca46b05" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;Message&lt;/code&gt; enum will either be a &lt;code&gt;NewJob&lt;/code&gt; variant that holds the &lt;code&gt;Job&lt;/code&gt; the thread should run, or it will be a &lt;code&gt;Terminate&lt;/code&gt; variant that will cause the thread to exit its loop and stop.</source>
          <target state="translated">この &lt;code&gt;Message&lt;/code&gt; 列挙は、スレッドが実行する &lt;code&gt;Job&lt;/code&gt; を保持する &lt;code&gt;NewJob&lt;/code&gt; バリアントか、スレッドをループから抜けて停止させる &lt;code&gt;Terminate&lt;/code&gt; バリアントのいずれかになります。</target>
        </trans-unit>
        <trans-unit id="2ac2c44f291b0094f7e740b5540fe932bd4487e6" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;enum&lt;/code&gt; is constructed from the &lt;a href=&quot;../struct.btreemap#method.entry&quot;&gt;&lt;code&gt;entry&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../struct.btreemap&quot;&gt;&lt;code&gt;BTreeMap&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この &lt;code&gt;enum&lt;/code&gt; は、&lt;a href=&quot;../struct.btreemap&quot;&gt; &lt;code&gt;BTreeMap&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;../struct.btreemap#method.entry&quot;&gt; &lt;code&gt;entry&lt;/code&gt; &lt;/a&gt;メソッドから作成されます。</target>
        </trans-unit>
        <trans-unit id="c64bdd9b3fc3f77ac39443372876ff3d0846511f" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;enum&lt;/code&gt; is constructed from the &lt;a href=&quot;../struct.hashmap#method.entry&quot;&gt;&lt;code&gt;entry&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../struct.hashmap&quot;&gt;&lt;code&gt;HashMap&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この &lt;code&gt;enum&lt;/code&gt; は、&lt;a href=&quot;../struct.hashmap&quot;&gt; &lt;code&gt;HashMap&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;../struct.hashmap#method.entry&quot;&gt; &lt;code&gt;entry&lt;/code&gt; &lt;/a&gt;メソッドから作成されます。</target>
        </trans-unit>
        <trans-unit id="df201a49abc9a95b4b9db82dff3855ec3856b74c" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;enum&lt;/code&gt; is constructed from the &lt;a href=&quot;struct.btreemap#method.entry&quot;&gt;&lt;code&gt;entry&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.btreemap&quot;&gt;&lt;code&gt;BTreeMap&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この &lt;code&gt;enum&lt;/code&gt; は、&lt;a href=&quot;struct.btreemap&quot;&gt; &lt;code&gt;BTreeMap&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;struct.btreemap#method.entry&quot;&gt; &lt;code&gt;entry&lt;/code&gt; &lt;/a&gt;メソッドから構築されます。</target>
        </trans-unit>
        <trans-unit id="78b77c0bae34af9fbe0dd6db2b8a03354e7c6a07" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;enum&lt;/code&gt; is constructed from the &lt;a href=&quot;struct.hashmap#method.entry&quot;&gt;&lt;code&gt;entry&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.hashmap&quot;&gt;&lt;code&gt;HashMap&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この &lt;code&gt;enum&lt;/code&gt; は、&lt;a href=&quot;struct.hashmap&quot;&gt; &lt;code&gt;HashMap&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;struct.hashmap#method.entry&quot;&gt; &lt;code&gt;entry&lt;/code&gt; &lt;/a&gt;メソッドから構築されます。</target>
        </trans-unit>
        <trans-unit id="e4ed5614390f8cd7c309ba2eff1ecf5972023c00" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;enum&lt;/code&gt; is constructed through the &lt;a href=&quot;../struct.hashmap#method.raw_entry_mut&quot;&gt;&lt;code&gt;raw_entry_mut&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../struct.hashmap&quot;&gt;&lt;code&gt;HashMap&lt;/code&gt;&lt;/a&gt;, then calling one of the methods of that &lt;a href=&quot;struct.rawentrybuildermut&quot;&gt;&lt;code&gt;RawEntryBuilderMut&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この &lt;code&gt;enum&lt;/code&gt; を通じて構築され&lt;a href=&quot;../struct.hashmap#method.raw_entry_mut&quot;&gt; &lt;code&gt;raw_entry_mut&lt;/code&gt; &lt;/a&gt;の方法&lt;a href=&quot;../struct.hashmap&quot;&gt; &lt;code&gt;HashMap&lt;/code&gt; &lt;/a&gt;その方法の一つ呼び出し、&lt;a href=&quot;struct.rawentrybuildermut&quot;&gt; &lt;code&gt;RawEntryBuilderMut&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e49b2cde36d96ef41241461160aaa7f39ffe4733" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;enum&lt;/code&gt; is constructed through the &lt;a href=&quot;struct.hashmap#method.raw_entry_mut&quot;&gt;&lt;code&gt;raw_entry_mut&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.hashmap&quot;&gt;&lt;code&gt;HashMap&lt;/code&gt;&lt;/a&gt;, then calling one of the methods of that &lt;a href=&quot;struct.rawentrybuildermut&quot;&gt;&lt;code&gt;RawEntryBuilderMut&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この &lt;code&gt;enum&lt;/code&gt; を通じて構築され&lt;a href=&quot;struct.hashmap#method.raw_entry_mut&quot;&gt; &lt;code&gt;raw_entry_mut&lt;/code&gt; &lt;/a&gt;の方法&lt;a href=&quot;struct.hashmap&quot;&gt; &lt;code&gt;HashMap&lt;/code&gt; &lt;/a&gt;その方法の一つ呼び出し、&lt;a href=&quot;struct.rawentrybuildermut&quot;&gt; &lt;code&gt;RawEntryBuilderMut&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="484cddb60aced3f0fd2c66d36c2d02b11434898c" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;enum&lt;/code&gt; is created by iterating over &lt;a href=&quot;struct.components&quot;&gt;&lt;code&gt;Components&lt;/code&gt;&lt;/a&gt;, which in turn is created by the &lt;a href=&quot;struct.path#method.components&quot;&gt;&lt;code&gt;components&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.path&quot;&gt;&lt;code&gt;Path&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この &lt;code&gt;enum&lt;/code&gt; は、&lt;a href=&quot;struct.components&quot;&gt; &lt;code&gt;Components&lt;/code&gt; を&lt;/a&gt;繰り返し処理することによって作成されます。これは、&lt;a href=&quot;struct.path&quot;&gt; &lt;code&gt;Path&lt;/code&gt; の&lt;/a&gt;&lt;a href=&quot;struct.path#method.components&quot;&gt; &lt;code&gt;components&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。</target>
        </trans-unit>
        <trans-unit id="94a9ddcdadd6c80893c9aa067a5c5342d16c5ca8" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;enum&lt;/code&gt; is slightly awkward: it will never actually exist. This error is part of the type signature of the implementation of &lt;a href=&quot;../str/trait.fromstr&quot;&gt;&lt;code&gt;FromStr&lt;/code&gt;&lt;/a&gt; on &lt;a href=&quot;struct.string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt;. The return type of &lt;a href=&quot;../str/trait.fromstr#tymethod.from_str&quot;&gt;&lt;code&gt;from_str&lt;/code&gt;&lt;/a&gt;, requires that an error be defined, but, given that a &lt;a href=&quot;struct.string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; can always be made into a new &lt;a href=&quot;struct.string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; without error, this type will never actually be returned. As such, it is only here to satisfy said signature, and is useless otherwise.</source>
          <target state="translated">この &lt;code&gt;enum&lt;/code&gt; は少し厄介です。実際には存在しません。このエラーは、&lt;a href=&quot;struct.string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;に対する&lt;a href=&quot;../str/trait.fromstr&quot;&gt; &lt;code&gt;FromStr&lt;/code&gt; &lt;/a&gt;の実装の型シグネチャの一部です。&lt;a href=&quot;../str/trait.fromstr#tymethod.from_str&quot;&gt; &lt;code&gt;from_str&lt;/code&gt; &lt;/a&gt;の戻り値の型では、エラーを定義する必要がありますが、&lt;a href=&quot;struct.string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;は常にエラーなしで新しい&lt;a href=&quot;struct.string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;列にできるので、この型は実際には返されません。したがって、上記の署名を満たすのはここだけであり、それ以外の場合は役に立たない。</target>
        </trans-unit>
        <trans-unit id="7bafcd26f5f930140b3a1e3e5a967a8f857b2aca" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;enum&lt;/code&gt; is used as the return type for &lt;a href=&quot;../primitive.f32#method.classify&quot;&gt;&lt;code&gt;f32::classify&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../primitive.f64#method.classify&quot;&gt;&lt;code&gt;f64::classify&lt;/code&gt;&lt;/a&gt;. See their documentation for more.</source>
          <target state="translated">この &lt;code&gt;enum&lt;/code&gt; 型は、&lt;a href=&quot;../primitive.f32#method.classify&quot;&gt; &lt;code&gt;f32::classify&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;../primitive.f64#method.classify&quot;&gt; &lt;code&gt;f64::classify&lt;/code&gt; &lt;/a&gt;の戻り型として使用されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="779a09142baa1b4c0c25a858cbd603a82e00fb14" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;new&lt;/code&gt; function creates a new, empty string. You&amp;rsquo;ll find a &lt;code&gt;new&lt;/code&gt; function on many types, because it&amp;rsquo;s a common name for a function that makes a new value of some kind.</source>
          <target state="translated">この &lt;code&gt;new&lt;/code&gt; 関数は、新しい空の文字列を作成します。 &lt;code&gt;new&lt;/code&gt; 関数は、ある種の新しい値を作成する関数の一般的な名前であるため、多くの型で見つかります。</target>
        </trans-unit>
        <trans-unit id="87637c77d83fe48f3ea16980edd287161d7c7814" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by &lt;a href=&quot;../struct.binaryheap#method.drain&quot;&gt;&lt;code&gt;BinaryHeap::drain()&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は&lt;a href=&quot;../struct.binaryheap#method.drain&quot;&gt; &lt;code&gt;BinaryHeap::drain()&lt;/code&gt; &lt;/a&gt;によって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="710441e6744b3faabea4c32e6f7f503845ba9cca" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by &lt;a href=&quot;../struct.binaryheap#method.drain_sorted&quot;&gt;&lt;code&gt;BinaryHeap::drain_sorted()&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は&lt;a href=&quot;../struct.binaryheap#method.drain_sorted&quot;&gt; &lt;code&gt;BinaryHeap::drain_sorted()&lt;/code&gt; &lt;/a&gt;によって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="4f1beb7abacff5cc6b2aa66c11f692cb37b24895" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by &lt;a href=&quot;../struct.binaryheap#method.into_iter&quot;&gt;&lt;code&gt;BinaryHeap::into_iter()&lt;/code&gt;&lt;/a&gt; (provided by the &lt;code&gt;IntoIterator&lt;/code&gt; trait). See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;../struct.binaryheap#method.into_iter&quot;&gt; &lt;code&gt;BinaryHeap::into_iter()&lt;/code&gt; &lt;/a&gt;（ &lt;code&gt;IntoIterator&lt;/code&gt; トレイトによって提供されます）によって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="19187356eb493c3adfe1d6a3c45949ebe90718ce" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by &lt;a href=&quot;../struct.binaryheap#method.iter&quot;&gt;&lt;code&gt;BinaryHeap::iter()&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は&lt;a href=&quot;../struct.binaryheap#method.iter&quot;&gt; &lt;code&gt;BinaryHeap::iter()&lt;/code&gt; &lt;/a&gt;によって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="ea9db5c8e782224fe1f85e1a720f71f672146c1f" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by &lt;a href=&quot;../struct.linkedlist#method.iter&quot;&gt;&lt;code&gt;LinkedList::iter()&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は&lt;a href=&quot;../struct.linkedlist#method.iter&quot;&gt; &lt;code&gt;LinkedList::iter()&lt;/code&gt; &lt;/a&gt;によって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="365f4e6ab5c3e3c131d4abcf66926cc6d747c3d0" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by &lt;a href=&quot;../struct.linkedlist#method.iter_mut&quot;&gt;&lt;code&gt;LinkedList::iter_mut()&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;../struct.linkedlist#method.iter_mut&quot;&gt; &lt;code&gt;LinkedList::iter_mut()&lt;/code&gt; &lt;/a&gt;によって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="1a70b0d26c2b2bbcfc4bcd9397bbda3af835a2c7" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by &lt;a href=&quot;fn.pending&quot;&gt;&lt;code&gt;pending()&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は&lt;a href=&quot;fn.pending&quot;&gt; &lt;code&gt;pending()&lt;/code&gt; &lt;/a&gt;によって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="c0010fa18c26eb3966e8839f207aad6f2ebfdb7b" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by &lt;a href=&quot;fn.ready&quot;&gt;&lt;code&gt;ready()&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は&lt;a href=&quot;fn.ready&quot;&gt; &lt;code&gt;ready()&lt;/code&gt; &lt;/a&gt;によって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="ffa5a9dc90635ee7464510b7b23324baed884a35" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by &lt;a href=&quot;struct.cstring#method.into_string&quot;&gt;&lt;code&gt;CString::into_string()&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;struct.cstring#method.into_string&quot;&gt; &lt;code&gt;CString::into_string()&lt;/code&gt; &lt;/a&gt;によって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="3a98a7a0b86bcb3ca3daaeceee9ee6241f18b9ac" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by &lt;a href=&quot;struct.vec#method.drain&quot;&gt;&lt;code&gt;Vec::drain&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は&lt;a href=&quot;struct.vec#method.drain&quot;&gt; &lt;code&gt;Vec::drain&lt;/code&gt; &lt;/a&gt;によって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="bc70d905416c075e472dedc5615406f53740db49" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by &lt;a href=&quot;trait.iterator#method.chain&quot;&gt;&lt;code&gt;Iterator::chain&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は&lt;a href=&quot;trait.iterator#method.chain&quot;&gt; &lt;code&gt;Iterator::chain&lt;/code&gt; &lt;/a&gt;によって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="05ed5bb9307267a5e340c3a66e14a4d93b6b2120" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by &lt;a href=&quot;trait.iterator#method.flat_map&quot;&gt;&lt;code&gt;Iterator::flat_map&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は&lt;a href=&quot;trait.iterator#method.flat_map&quot;&gt; &lt;code&gt;Iterator::flat_map&lt;/code&gt; &lt;/a&gt;によって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="f04b21219d876a2efb53733e31a16e7043a08a65" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by &lt;a href=&quot;trait.iterator#method.fuse&quot;&gt;&lt;code&gt;Iterator::fuse&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は&lt;a href=&quot;trait.iterator#method.fuse&quot;&gt; &lt;code&gt;Iterator::fuse&lt;/code&gt; &lt;/a&gt;によって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="b34a5adfa6d1f401a24be7fc9f321c6bf3e63061" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by &lt;a href=&quot;trait.iterator#method.zip&quot;&gt;&lt;code&gt;Iterator::zip&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は&lt;a href=&quot;trait.iterator#method.zip&quot;&gt; &lt;code&gt;Iterator::zip&lt;/code&gt; &lt;/a&gt;によって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="7f5b4ce43667b25dc7c0338aa4a9d348ba82ad8b" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../../iter/trait.intoiterator#tymethod.into_iter&quot;&gt;&lt;code&gt;into_iter&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../struct.btreemap&quot;&gt;&lt;code&gt;BTreeMap&lt;/code&gt;&lt;/a&gt; (provided by the &lt;code&gt;IntoIterator&lt;/code&gt; trait). See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; によって作成され&lt;a href=&quot;../../iter/trait.intoiterator#tymethod.into_iter&quot;&gt; &lt;code&gt;into_iter&lt;/code&gt; の&lt;/a&gt;上の方法&lt;a href=&quot;../struct.btreemap&quot;&gt; &lt;code&gt;BTreeMap&lt;/code&gt; &lt;/a&gt;（によって提供 &lt;code&gt;IntoIterator&lt;/code&gt; の形質）。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="c15db34b76ad48367be1e50fb80a630f7544ccea" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../../iter/trait.intoiterator#tymethod.into_iter&quot;&gt;&lt;code&gt;into_iter&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../struct.hashmap&quot;&gt;&lt;code&gt;HashMap&lt;/code&gt;&lt;/a&gt; (provided by the &lt;code&gt;IntoIterator&lt;/code&gt; trait). See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;../struct.hashmap&quot;&gt; &lt;code&gt;HashMap&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;../../iter/trait.intoiterator#tymethod.into_iter&quot;&gt; &lt;code&gt;into_iter&lt;/code&gt; &lt;/a&gt;メソッド（ &lt;code&gt;IntoIterator&lt;/code&gt; トレイトによって提供される）によって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="8af255e3f384d8c63465da3dc3dea71b03731e21" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../../iter/trait.intoiterator#tymethod.into_iter&quot;&gt;&lt;code&gt;into_iter&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../struct.hashset&quot;&gt;&lt;code&gt;HashSet&lt;/code&gt;&lt;/a&gt; (provided by the &lt;code&gt;IntoIterator&lt;/code&gt; trait). See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;../struct.hashset&quot;&gt; &lt;code&gt;HashSet&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;../../iter/trait.intoiterator#tymethod.into_iter&quot;&gt; &lt;code&gt;into_iter&lt;/code&gt; &lt;/a&gt;メソッド（ &lt;code&gt;IntoIterator&lt;/code&gt; トレイトによって提供される）によって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="04527249225c0957b4a2dad0cb713b606320b989" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../primitive.char#method.escape_debug&quot;&gt;&lt;code&gt;escape_debug&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../primitive.char&quot;&gt;&lt;code&gt;char&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;../primitive.char&quot;&gt; &lt;code&gt;char&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;../primitive.char#method.escape_debug&quot;&gt; &lt;code&gt;escape_debug&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="db12edeeb870acc98aa06b33b39a8bb3d306d517" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../primitive.char#method.escape_default&quot;&gt;&lt;code&gt;escape_default&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../primitive.char&quot;&gt;&lt;code&gt;char&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;../primitive.char&quot;&gt; &lt;code&gt;char&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;../primitive.char#method.escape_default&quot;&gt; &lt;code&gt;escape_default&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="cc81870e647a4c66d45285572c3d1fa6c0473baa" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../primitive.char#method.escape_unicode&quot;&gt;&lt;code&gt;escape_unicode&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../primitive.char&quot;&gt;&lt;code&gt;char&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;../primitive.char&quot;&gt; &lt;code&gt;char&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;../primitive.char#method.escape_unicode&quot;&gt; &lt;code&gt;escape_unicode&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="1fe84815a63364d86bf9311c9ac78e8bdb20701b" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../primitive.char#method.to_lowercase&quot;&gt;&lt;code&gt;to_lowercase&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../primitive.char&quot;&gt;&lt;code&gt;char&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;../primitive.char&quot;&gt; &lt;code&gt;char&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;../primitive.char#method.to_lowercase&quot;&gt; &lt;code&gt;to_lowercase&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="27eb64d64fc617e07c6f09849f8a1efd113c9e7c" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../primitive.char#method.to_uppercase&quot;&gt;&lt;code&gt;to_uppercase&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../primitive.char&quot;&gt;&lt;code&gt;char&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;../primitive.char&quot;&gt; &lt;code&gt;char&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;../primitive.char#method.to_uppercase&quot;&gt; &lt;code&gt;to_uppercase&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="23afadfd08d170366a910c9a9eb67a47d53c58e4" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../struct.binaryheap#method.peek_mut&quot;&gt;&lt;code&gt;peek_mut&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../struct.binaryheap&quot;&gt;&lt;code&gt;BinaryHeap&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;../struct.binaryheap#method.peek_mut&quot;&gt; &lt;code&gt;peek_mut&lt;/code&gt; &lt;/a&gt;メソッドによって作成され&lt;a href=&quot;../struct.binaryheap&quot;&gt; &lt;code&gt;BinaryHeap&lt;/code&gt; &lt;/a&gt;。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="600939e3b3f6d85fd06ffcedc1a550628427f081" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../struct.btreemap#method.into_keys&quot;&gt;&lt;code&gt;into_keys&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../struct.btreemap&quot;&gt;&lt;code&gt;BTreeMap&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;../struct.btreemap#method.into_keys&quot;&gt; &lt;code&gt;into_keys&lt;/code&gt; &lt;/a&gt;メソッドによって作成され&lt;a href=&quot;../struct.btreemap&quot;&gt; &lt;code&gt;BTreeMap&lt;/code&gt; &lt;/a&gt;。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="a19a52d05723c4f0efb8bd5c1f2d68262e4edffd" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../struct.btreemap#method.into_values&quot;&gt;&lt;code&gt;into_values&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../struct.btreemap&quot;&gt;&lt;code&gt;BTreeMap&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;../struct.btreemap#method.into_values&quot;&gt; &lt;code&gt;into_values&lt;/code&gt; &lt;/a&gt;メソッドによって作成され&lt;a href=&quot;../struct.btreemap&quot;&gt; &lt;code&gt;BTreeMap&lt;/code&gt; &lt;/a&gt;。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="3045bd58f26065df50d0790fb43c60769a4e62d7" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../struct.btreemap#method.iter&quot;&gt;&lt;code&gt;iter&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../struct.btreemap&quot;&gt;&lt;code&gt;BTreeMap&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;../struct.btreemap&quot;&gt; &lt;code&gt;BTreeMap&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;../struct.btreemap#method.iter&quot;&gt; &lt;code&gt;iter&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="946c012883128ea40231fbdcbdc1a628bae08f1e" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../struct.btreemap#method.iter_mut&quot;&gt;&lt;code&gt;iter_mut&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../struct.btreemap&quot;&gt;&lt;code&gt;BTreeMap&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;../struct.btreemap#method.iter_mut&quot;&gt; &lt;code&gt;iter_mut&lt;/code&gt; &lt;/a&gt;メソッドによって作成され&lt;a href=&quot;../struct.btreemap&quot;&gt; &lt;code&gt;BTreeMap&lt;/code&gt; &lt;/a&gt;。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="74b659096d73f7bbdedbdc8e5c8915fc609d68c8" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../struct.btreemap#method.keys&quot;&gt;&lt;code&gt;keys&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../struct.btreemap&quot;&gt;&lt;code&gt;BTreeMap&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;../struct.btreemap&quot;&gt; &lt;code&gt;BTreeMap&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;../struct.btreemap#method.keys&quot;&gt; &lt;code&gt;keys&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="7dc938cc7827ae09ff7a33e57fec9dc1ea67e47b" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../struct.btreemap#method.range&quot;&gt;&lt;code&gt;range&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../struct.btreemap&quot;&gt;&lt;code&gt;BTreeMap&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;../struct.btreemap&quot;&gt; &lt;code&gt;BTreeMap&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;../struct.btreemap#method.range&quot;&gt; &lt;code&gt;range&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="d48ee20f7abe01686d61e8b564a9e2e8709cc261" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../struct.btreemap#method.range_mut&quot;&gt;&lt;code&gt;range_mut&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../struct.btreemap&quot;&gt;&lt;code&gt;BTreeMap&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;../struct.btreemap#method.range_mut&quot;&gt; &lt;code&gt;range_mut&lt;/code&gt; &lt;/a&gt;メソッドによって作成され&lt;a href=&quot;../struct.btreemap&quot;&gt; &lt;code&gt;BTreeMap&lt;/code&gt; &lt;/a&gt;。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="7a6de9bc6d12983868c379e76acf4b7b905e3489" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../struct.btreemap#method.values&quot;&gt;&lt;code&gt;values&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../struct.btreemap&quot;&gt;&lt;code&gt;BTreeMap&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;../struct.btreemap&quot;&gt; &lt;code&gt;BTreeMap&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;../struct.btreemap#method.values&quot;&gt; &lt;code&gt;values&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="d705a35c8c3bfa5da6919c4661f259de8364f195" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../struct.btreemap#method.values_mut&quot;&gt;&lt;code&gt;values_mut&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../struct.btreemap&quot;&gt;&lt;code&gt;BTreeMap&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;../struct.btreemap#method.values_mut&quot;&gt; &lt;code&gt;values_mut&lt;/code&gt; &lt;/a&gt;メソッドによって作成され&lt;a href=&quot;../struct.btreemap&quot;&gt; &lt;code&gt;BTreeMap&lt;/code&gt; &lt;/a&gt;。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="61f91f31f3bd872cb2fbd24fadf5b75ed09458a4" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../struct.btreeset#method.difference&quot;&gt;&lt;code&gt;difference&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../struct.btreeset&quot;&gt;&lt;code&gt;BTreeSet&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;../struct.btreeset&quot;&gt; &lt;code&gt;BTreeSet&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;../struct.btreeset#method.difference&quot;&gt; &lt;code&gt;difference&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="2e1d52e053b2cbaba0cc8f9612b34ec9509994b9" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../struct.btreeset#method.intersection&quot;&gt;&lt;code&gt;intersection&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../struct.btreeset&quot;&gt;&lt;code&gt;BTreeSet&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;../struct.btreeset&quot;&gt; &lt;code&gt;BTreeSet&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;../struct.btreeset#method.intersection&quot;&gt; &lt;code&gt;intersection&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="954e936cd5243200003d839739bf6bf3e1d2ccbf" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../struct.btreeset#method.into_iter&quot;&gt;&lt;code&gt;into_iter&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../struct.btreeset&quot;&gt;&lt;code&gt;BTreeSet&lt;/code&gt;&lt;/a&gt; (provided by the &lt;code&gt;IntoIterator&lt;/code&gt; trait). See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; によって作成され&lt;a href=&quot;../struct.btreeset#method.into_iter&quot;&gt; &lt;code&gt;into_iter&lt;/code&gt; の&lt;/a&gt;上の方法&lt;a href=&quot;../struct.btreeset&quot;&gt; &lt;code&gt;BTreeSet&lt;/code&gt; &lt;/a&gt;（によって提供 &lt;code&gt;IntoIterator&lt;/code&gt; の形質）。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="3c45f5db49cb3dd47f14e3527ee6323bafd674c6" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../struct.btreeset#method.iter&quot;&gt;&lt;code&gt;iter&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../struct.btreeset&quot;&gt;&lt;code&gt;BTreeSet&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;../struct.btreeset&quot;&gt; &lt;code&gt;BTreeSet&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;../struct.btreeset#method.iter&quot;&gt; &lt;code&gt;iter&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="53de499d6a94e0c9ad1a96537dd61a0c1c130aff" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../struct.btreeset#method.range&quot;&gt;&lt;code&gt;range&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../struct.btreeset&quot;&gt;&lt;code&gt;BTreeSet&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;../struct.btreeset&quot;&gt; &lt;code&gt;BTreeSet&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;../struct.btreeset#method.range&quot;&gt; &lt;code&gt;range&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="c55b8ab08d80bad9c8193338715f67b024c7ee2c" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../struct.btreeset#method.symmetric_difference&quot;&gt;&lt;code&gt;symmetric_difference&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../struct.btreeset&quot;&gt;&lt;code&gt;BTreeSet&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;../struct.btreeset&quot;&gt; &lt;code&gt;BTreeSet&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;../struct.btreeset#method.symmetric_difference&quot;&gt; &lt;code&gt;symmetric_difference&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="34001f1785210d90fc10385cb9a1251eed89d761" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../struct.btreeset#method.union&quot;&gt;&lt;code&gt;union&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../struct.btreeset&quot;&gt;&lt;code&gt;BTreeSet&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;../struct.btreeset&quot;&gt; &lt;code&gt;BTreeSet&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;../struct.btreeset#method.union&quot;&gt; &lt;code&gt;union&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="6645dd14e44dee8f928de9c50e60665ec2facacc" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../struct.hashmap#method.drain&quot;&gt;&lt;code&gt;drain&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../struct.hashmap&quot;&gt;&lt;code&gt;HashMap&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;../struct.hashmap&quot;&gt; &lt;code&gt;HashMap&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;../struct.hashmap#method.drain&quot;&gt; &lt;code&gt;drain&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="305c738458e34e26e1734f78e5058c6e48d5e7b3" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../struct.hashmap#method.drain_filter&quot;&gt;&lt;code&gt;drain_filter&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../struct.hashmap&quot;&gt;&lt;code&gt;HashMap&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;../struct.hashmap&quot;&gt; &lt;code&gt;HashMap&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;../struct.hashmap#method.drain_filter&quot;&gt; &lt;code&gt;drain_filter&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。</target>
        </trans-unit>
        <trans-unit id="b1bd35d1cd7726da10e33bba8ce8805e4d7d627f" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../struct.hashmap#method.into_keys&quot;&gt;&lt;code&gt;into_keys&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../struct.hashmap&quot;&gt;&lt;code&gt;HashMap&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;../struct.hashmap&quot;&gt; &lt;code&gt;HashMap&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;../struct.hashmap#method.into_keys&quot;&gt; &lt;code&gt;into_keys&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="774e7d6c5f4fef0d016668cc714ac56903ab5226" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../struct.hashmap#method.into_values&quot;&gt;&lt;code&gt;into_values&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../struct.hashmap&quot;&gt;&lt;code&gt;HashMap&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;../struct.hashmap&quot;&gt; &lt;code&gt;HashMap&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;../struct.hashmap#method.into_values&quot;&gt; &lt;code&gt;into_values&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="50fc5746ddfb14a344eb233b7116066c64b4c8c4" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../struct.hashmap#method.iter&quot;&gt;&lt;code&gt;iter&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../struct.hashmap&quot;&gt;&lt;code&gt;HashMap&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;../struct.hashmap&quot;&gt; &lt;code&gt;HashMap&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;../struct.hashmap#method.iter&quot;&gt; &lt;code&gt;iter&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="a09bcc28d870cda3d50f44865ac154f6c773dbcc" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../struct.hashmap#method.iter_mut&quot;&gt;&lt;code&gt;iter_mut&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../struct.hashmap&quot;&gt;&lt;code&gt;HashMap&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;../struct.hashmap&quot;&gt; &lt;code&gt;HashMap&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;../struct.hashmap#method.iter_mut&quot;&gt; &lt;code&gt;iter_mut&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="b3485f5d7a78d5f8bb97e7e58730359d2b64777f" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../struct.hashmap#method.keys&quot;&gt;&lt;code&gt;keys&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../struct.hashmap&quot;&gt;&lt;code&gt;HashMap&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;../struct.hashmap&quot;&gt; &lt;code&gt;HashMap&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;../struct.hashmap#method.keys&quot;&gt; &lt;code&gt;keys&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="b03cef3dcf96a8183c51975b4910dd74475edf71" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../struct.hashmap#method.values&quot;&gt;&lt;code&gt;values&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../struct.hashmap&quot;&gt;&lt;code&gt;HashMap&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;../struct.hashmap&quot;&gt; &lt;code&gt;HashMap&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;../struct.hashmap#method.values&quot;&gt; &lt;code&gt;values&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="53c20090054cf2ac21ecbfded86e3ada5a3c452b" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../struct.hashmap#method.values_mut&quot;&gt;&lt;code&gt;values_mut&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../struct.hashmap&quot;&gt;&lt;code&gt;HashMap&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;../struct.hashmap&quot;&gt; &lt;code&gt;HashMap&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;../struct.hashmap#method.values_mut&quot;&gt; &lt;code&gt;values_mut&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="92667a13f4b88964b565e8c1428280771a1f58ae" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../struct.hashset#method.difference&quot;&gt;&lt;code&gt;difference&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../struct.hashset&quot;&gt;&lt;code&gt;HashSet&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;../struct.hashset&quot;&gt; &lt;code&gt;HashSet&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;../struct.hashset#method.difference&quot;&gt; &lt;code&gt;difference&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="8b53023bc8c2f123d3aa8476357c0065c17e5bc5" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../struct.hashset#method.drain&quot;&gt;&lt;code&gt;drain&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../struct.hashset&quot;&gt;&lt;code&gt;HashSet&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;../struct.hashset&quot;&gt; &lt;code&gt;HashSet&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;../struct.hashset#method.drain&quot;&gt; &lt;code&gt;drain&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="2f3f79e8e523849b31d44d7222fee9b2cd8c8e08" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../struct.hashset#method.drain_filter&quot;&gt;&lt;code&gt;drain_filter&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../struct.hashset&quot;&gt;&lt;code&gt;HashSet&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;../struct.hashset&quot;&gt; &lt;code&gt;HashSet&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;../struct.hashset#method.drain_filter&quot;&gt; &lt;code&gt;drain_filter&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。</target>
        </trans-unit>
        <trans-unit id="e0c7b733ae497921c7ee1e58f9d3737d0bc5abf0" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../struct.hashset#method.intersection&quot;&gt;&lt;code&gt;intersection&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../struct.hashset&quot;&gt;&lt;code&gt;HashSet&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;../struct.hashset&quot;&gt; &lt;code&gt;HashSet&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;../struct.hashset#method.intersection&quot;&gt; &lt;code&gt;intersection&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="7faf396162375db95ee521b7f44471b3dddb5889" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../struct.hashset#method.iter&quot;&gt;&lt;code&gt;iter&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../struct.hashset&quot;&gt;&lt;code&gt;HashSet&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;../struct.hashset&quot;&gt; &lt;code&gt;HashSet&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;../struct.hashset#method.iter&quot;&gt; &lt;code&gt;iter&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="14c7d030bde45fb3ec268ba764828f4e1837eb77" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../struct.hashset#method.symmetric_difference&quot;&gt;&lt;code&gt;symmetric_difference&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../struct.hashset&quot;&gt;&lt;code&gt;HashSet&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;../struct.hashset&quot;&gt; &lt;code&gt;HashSet&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;../struct.hashset#method.symmetric_difference&quot;&gt; &lt;code&gt;symmetric_difference&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="fce08bc41dc77fbc27830928bbf1bf5b41c36d96" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../struct.hashset#method.union&quot;&gt;&lt;code&gt;union&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../struct.hashset&quot;&gt;&lt;code&gt;HashSet&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;../struct.hashset&quot;&gt; &lt;code&gt;HashSet&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;../struct.hashset#method.union&quot;&gt; &lt;code&gt;union&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="265bcebc25d757509c4b717937ff253a8b8647e5" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../struct.linkedlist#method.into_iter&quot;&gt;&lt;code&gt;into_iter&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../struct.linkedlist&quot;&gt;&lt;code&gt;LinkedList&lt;/code&gt;&lt;/a&gt; (provided by the &lt;code&gt;IntoIterator&lt;/code&gt; trait). See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; によって作成され&lt;a href=&quot;../struct.linkedlist#method.into_iter&quot;&gt; &lt;code&gt;into_iter&lt;/code&gt; 用&lt;/a&gt;のメソッド&lt;a href=&quot;../struct.linkedlist&quot;&gt; &lt;code&gt;LinkedList&lt;/code&gt; の&lt;/a&gt;（によって提供 &lt;code&gt;IntoIterator&lt;/code&gt; の形質）。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="ae30ff0dcb4ca01b32359edc18207fe2e8799225" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../struct.vecdeque#method.drain&quot;&gt;&lt;code&gt;drain&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../struct.vecdeque&quot;&gt;&lt;code&gt;VecDeque&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;../struct.vecdeque&quot;&gt; &lt;code&gt;VecDeque&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;../struct.vecdeque#method.drain&quot;&gt; &lt;code&gt;drain&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="d0622f000a63c5582f4bf61c6400ba69e79c3e9b" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../struct.vecdeque#method.into_iter&quot;&gt;&lt;code&gt;into_iter&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../struct.vecdeque&quot;&gt;&lt;code&gt;VecDeque&lt;/code&gt;&lt;/a&gt; (provided by the &lt;code&gt;IntoIterator&lt;/code&gt; trait). See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; によって作成され&lt;a href=&quot;../struct.vecdeque#method.into_iter&quot;&gt; &lt;code&gt;into_iter&lt;/code&gt; の&lt;/a&gt;上の方法&lt;a href=&quot;../struct.vecdeque&quot;&gt; &lt;code&gt;VecDeque&lt;/code&gt; &lt;/a&gt;（によって提供 &lt;code&gt;IntoIterator&lt;/code&gt; の形質）。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="9c39e95770f6e995aeb4f6547fcd0d3b5d042bb7" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../struct.vecdeque#method.iter&quot;&gt;&lt;code&gt;iter&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../struct.vecdeque&quot;&gt;&lt;code&gt;VecDeque&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;../struct.vecdeque&quot;&gt; &lt;code&gt;VecDeque&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;../struct.vecdeque#method.iter&quot;&gt; &lt;code&gt;iter&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="a2950ed2e16c6715dede3635ac1905a727cb8d87" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../struct.vecdeque#method.iter_mut&quot;&gt;&lt;code&gt;iter_mut&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../struct.vecdeque&quot;&gt;&lt;code&gt;VecDeque&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;../struct.vecdeque#method.iter_mut&quot;&gt; &lt;code&gt;iter_mut&lt;/code&gt; &lt;/a&gt;メソッドによって作成され&lt;a href=&quot;../struct.vecdeque&quot;&gt; &lt;code&gt;VecDeque&lt;/code&gt; &lt;/a&gt;。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="df020e51f3f4500bc1f8be7714b7e55fb7923be6" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;enum.option#method.into_iter&quot;&gt;&lt;code&gt;Option::into_iter&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;enum.option#method.into_iter&quot;&gt; &lt;code&gt;Option::into_iter&lt;/code&gt; &lt;/a&gt;関数によって作成されます。</target>
        </trans-unit>
        <trans-unit id="ed85839c71b9b41d697c086ba092e08ee354cb7a" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;enum.option#method.iter&quot;&gt;&lt;code&gt;Option::iter&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;enum.option#method.iter&quot;&gt; &lt;code&gt;Option::iter&lt;/code&gt; &lt;/a&gt;関数によって作成されます。</target>
        </trans-unit>
        <trans-unit id="f832fbc0a1897989e972bccbdf14ab8c06df2a8b" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;enum.option#method.iter_mut&quot;&gt;&lt;code&gt;Option::iter_mut&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;enum.option#method.iter_mut&quot;&gt; &lt;code&gt;Option::iter_mut&lt;/code&gt; &lt;/a&gt;関数によって作成されます。</target>
        </trans-unit>
        <trans-unit id="29c33d9d981b66ee3e763795fb7a865338012f4a" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;fn.empty&quot;&gt;&lt;code&gt;empty()&lt;/code&gt;&lt;/a&gt; function. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;fn.empty&quot;&gt; &lt;code&gt;empty()&lt;/code&gt; &lt;/a&gt;関数によって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="f3c09e42d5e7d0d1aee87da5c6a31ae546137c1a" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;fn.empty&quot;&gt;&lt;code&gt;empty&lt;/code&gt;&lt;/a&gt; function. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;fn.empty&quot;&gt; &lt;code&gt;empty&lt;/code&gt; &lt;/a&gt;関数によって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="583b1959fdeeb9dda8ffebe215f3e85158c8bc2e" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;fn.escape_default&quot;&gt;&lt;code&gt;escape_default&lt;/code&gt;&lt;/a&gt; function. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;fn.escape_default&quot;&gt; &lt;code&gt;escape_default&lt;/code&gt; &lt;/a&gt;関数によって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="2441b8d854782799a5af16365bc544396e7a30e1" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;fn.from_fn&quot;&gt;&lt;code&gt;iter::from_fn()&lt;/code&gt;&lt;/a&gt; function. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;fn.from_fn&quot;&gt; &lt;code&gt;iter::from_fn()&lt;/code&gt; &lt;/a&gt;関数によって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="be7c13071482b2c3923f2e736bd014b0019bfa3c" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;fn.from_fn&quot;&gt;&lt;code&gt;iter::from_fn&lt;/code&gt;&lt;/a&gt; function. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は&lt;a href=&quot;fn.from_fn&quot;&gt; &lt;code&gt;iter::from_fn&lt;/code&gt; &lt;/a&gt;関数によって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="94d40c5fdbd8b948ffc41faa923b27505f807e3f" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;fn.once&quot;&gt;&lt;code&gt;once()&lt;/code&gt;&lt;/a&gt; function. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;fn.once&quot;&gt; &lt;code&gt;once()&lt;/code&gt; &lt;/a&gt;関数によって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="b2d0d0c848c068f0195f43a41a604e9ed15435ea" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;fn.once&quot;&gt;&lt;code&gt;once&lt;/code&gt;&lt;/a&gt; function. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;fn.once&quot;&gt; &lt;code&gt;once&lt;/code&gt; &lt;/a&gt;関数によって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="8bb25d152dad7b00112a30e9ef34eaf19e870657" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;fn.once_with&quot;&gt;&lt;code&gt;once_with()&lt;/code&gt;&lt;/a&gt; function. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;fn.once_with&quot;&gt; &lt;code&gt;once_with()&lt;/code&gt; &lt;/a&gt;関数によって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="582110272ac53674cd7341259d0b80e92c531007" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;fn.once_with&quot;&gt;&lt;code&gt;once_with&lt;/code&gt;&lt;/a&gt; function. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;fn.once_with&quot;&gt; &lt;code&gt;once_with&lt;/code&gt; &lt;/a&gt;関数によって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="c2e53dc5041d32296d06a4432a5dc5ef029bc8fa" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;fn.repeat&quot;&gt;&lt;code&gt;repeat()&lt;/code&gt;&lt;/a&gt; function. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;fn.repeat&quot;&gt; &lt;code&gt;repeat()&lt;/code&gt; &lt;/a&gt;関数によって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="f750c0f224dd89d4b261959a2e6c2e0e53f46764" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;fn.repeat&quot;&gt;&lt;code&gt;repeat&lt;/code&gt;&lt;/a&gt; function. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;fn.repeat&quot;&gt; &lt;code&gt;repeat&lt;/code&gt; &lt;/a&gt;関数によって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="66f063558b4204049186f9de5672edf7bb33b08f" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;fn.repeat_with&quot;&gt;&lt;code&gt;repeat_with()&lt;/code&gt;&lt;/a&gt; function. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;fn.repeat_with&quot;&gt; &lt;code&gt;repeat_with()&lt;/code&gt; &lt;/a&gt;関数によって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="937c3c66fd7a919cfaca746517ec0915d37c92b5" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;fn.repeat_with&quot;&gt;&lt;code&gt;repeat_with&lt;/code&gt;&lt;/a&gt; function. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;fn.repeat_with&quot;&gt; &lt;code&gt;repeat_with&lt;/code&gt; &lt;/a&gt;関数によって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="aab81d3f94443c5e362d592846bb5f615688f696" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;fn.spawn&quot;&gt;&lt;code&gt;thread::spawn&lt;/code&gt;&lt;/a&gt; function and the &lt;a href=&quot;struct.builder#method.spawn&quot;&gt;&lt;code&gt;thread::Builder::spawn&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;fn.spawn&quot;&gt; &lt;code&gt;thread::spawn&lt;/code&gt; &lt;/a&gt;関数と&lt;a href=&quot;struct.builder#method.spawn&quot;&gt; &lt;code&gt;thread::Builder::spawn&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。</target>
        </trans-unit>
        <trans-unit id="721e1f5adffa977a66b66d77bbfc4af0a336248f" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;fn.successors&quot;&gt;&lt;code&gt;iter::successors()&lt;/code&gt;&lt;/a&gt; function. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;fn.successors&quot;&gt; &lt;code&gt;iter::successors()&lt;/code&gt; &lt;/a&gt;関数によって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="2bba3b7b1d3ddee116465f88074412d173b46ad3" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;fn.successors&quot;&gt;&lt;code&gt;successors&lt;/code&gt;&lt;/a&gt; function. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;fn.successors&quot;&gt; &lt;code&gt;successors&lt;/code&gt; &lt;/a&gt;関数によって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="750025df63cee4f9476b600e410c271d4dc26282" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.binaryheap#method.drain&quot;&gt;&lt;code&gt;drain&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.binaryheap&quot;&gt;&lt;code&gt;BinaryHeap&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は&lt;a href=&quot;struct.binaryheap&quot;&gt; &lt;code&gt;BinaryHeap&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;struct.binaryheap#method.drain&quot;&gt; &lt;code&gt;drain&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="e18a9e9bb705ac20d27c1b54b01a06909af9f5aa" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.binaryheap#method.into_iter&quot;&gt;&lt;code&gt;into_iter&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.binaryheap&quot;&gt;&lt;code&gt;BinaryHeap&lt;/code&gt;&lt;/a&gt; (provided by the &lt;code&gt;IntoIterator&lt;/code&gt; trait). See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; によって作成され&lt;a href=&quot;struct.binaryheap#method.into_iter&quot;&gt; &lt;code&gt;into_iter&lt;/code&gt; 用&lt;/a&gt;のメソッド&lt;a href=&quot;struct.binaryheap&quot;&gt; &lt;code&gt;BinaryHeap&lt;/code&gt; &lt;/a&gt;（によって提供 &lt;code&gt;IntoIterator&lt;/code&gt; の形質）。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="41506355b29f22e9b8811a8d2b60d92fed5ea6d5" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.binaryheap#method.iter&quot;&gt;&lt;code&gt;iter&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.binaryheap&quot;&gt;&lt;code&gt;BinaryHeap&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は&lt;a href=&quot;struct.binaryheap&quot;&gt; &lt;code&gt;BinaryHeap&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;struct.binaryheap#method.iter&quot;&gt; &lt;code&gt;iter&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="e9675a6cb1b893dbb78e5cb9089bf79a6f234027" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.binaryheap#method.peek_mut&quot;&gt;&lt;code&gt;peek_mut&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.binaryheap&quot;&gt;&lt;code&gt;BinaryHeap&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は&lt;a href=&quot;struct.binaryheap#method.peek_mut&quot;&gt; &lt;code&gt;peek_mut&lt;/code&gt; &lt;/a&gt;メソッドによって作成され&lt;a href=&quot;struct.binaryheap&quot;&gt; &lt;code&gt;BinaryHeap&lt;/code&gt; &lt;/a&gt;。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="a3e0e69a8fe926bff3713eb4f60caf8069defb24" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.btreemap#method.into_iter&quot;&gt;&lt;code&gt;into_iter&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.btreemap&quot;&gt;&lt;code&gt;BTreeMap&lt;/code&gt;&lt;/a&gt; (provided by the &lt;code&gt;IntoIterator&lt;/code&gt; trait). See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; によって作成され&lt;a href=&quot;struct.btreemap#method.into_iter&quot;&gt; &lt;code&gt;into_iter&lt;/code&gt; の&lt;/a&gt;上の方法&lt;a href=&quot;struct.btreemap&quot;&gt; &lt;code&gt;BTreeMap&lt;/code&gt; &lt;/a&gt;（によって提供 &lt;code&gt;IntoIterator&lt;/code&gt; の形質）。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="514e5b56a0002147cc9f7ac8a43433a6a65225d9" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.btreemap#method.iter&quot;&gt;&lt;code&gt;iter&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.btreemap&quot;&gt;&lt;code&gt;BTreeMap&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;struct.btreemap&quot;&gt; &lt;code&gt;BTreeMap&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;struct.btreemap#method.iter&quot;&gt; &lt;code&gt;iter&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="f716d42a3e459fcee9b6f36db5dc5c8168d480b5" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.btreemap#method.iter_mut&quot;&gt;&lt;code&gt;iter_mut&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.btreemap&quot;&gt;&lt;code&gt;BTreeMap&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;struct.btreemap#method.iter_mut&quot;&gt; &lt;code&gt;iter_mut&lt;/code&gt; &lt;/a&gt;メソッドによって作成され&lt;a href=&quot;struct.btreemap&quot;&gt; &lt;code&gt;BTreeMap&lt;/code&gt; &lt;/a&gt;。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="1f4535b44687ead67d4ff87d0edaec473f93f580" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.btreemap#method.keys&quot;&gt;&lt;code&gt;keys&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.btreemap&quot;&gt;&lt;code&gt;BTreeMap&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;struct.btreemap&quot;&gt; &lt;code&gt;BTreeMap&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;struct.btreemap#method.keys&quot;&gt; &lt;code&gt;keys&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="d31858adce6dfcdec67ca057f391304b96efe373" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.btreemap#method.range&quot;&gt;&lt;code&gt;range&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.btreemap&quot;&gt;&lt;code&gt;BTreeMap&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;struct.btreemap&quot;&gt; &lt;code&gt;BTreeMap&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;struct.btreemap#method.range&quot;&gt; &lt;code&gt;range&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="beff4242dfe6af7e412bdc0cbf43b9ab3e974e59" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.btreemap#method.range_mut&quot;&gt;&lt;code&gt;range_mut&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.btreemap&quot;&gt;&lt;code&gt;BTreeMap&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;struct.btreemap#method.range_mut&quot;&gt; &lt;code&gt;range_mut&lt;/code&gt; &lt;/a&gt;メソッドによって作成され&lt;a href=&quot;struct.btreemap&quot;&gt; &lt;code&gt;BTreeMap&lt;/code&gt; &lt;/a&gt;。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="61ccad7bbc2caef64224c9df6c46da6d30f71236" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.btreemap#method.values&quot;&gt;&lt;code&gt;values&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.btreemap&quot;&gt;&lt;code&gt;BTreeMap&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;struct.btreemap&quot;&gt; &lt;code&gt;BTreeMap&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;struct.btreemap#method.values&quot;&gt; &lt;code&gt;values&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="32f656567e75b1c61207668fdcd4fee681fb158f" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.btreemap#method.values_mut&quot;&gt;&lt;code&gt;values_mut&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.btreemap&quot;&gt;&lt;code&gt;BTreeMap&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;struct.btreemap#method.values_mut&quot;&gt; &lt;code&gt;values_mut&lt;/code&gt; &lt;/a&gt;メソッドによって作成され&lt;a href=&quot;struct.btreemap&quot;&gt; &lt;code&gt;BTreeMap&lt;/code&gt; &lt;/a&gt;。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="954c25018729177ec5a7cd425af966f38ad45de9" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.btreeset#method.difference&quot;&gt;&lt;code&gt;difference&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.btreeset&quot;&gt;&lt;code&gt;BTreeSet&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;struct.btreeset&quot;&gt; &lt;code&gt;BTreeSet&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;struct.btreeset#method.difference&quot;&gt; &lt;code&gt;difference&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="311036e0ac34eb0ce755d849d1ee9dcf0da2fa6d" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.btreeset#method.intersection&quot;&gt;&lt;code&gt;intersection&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.btreeset&quot;&gt;&lt;code&gt;BTreeSet&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;struct.btreeset&quot;&gt; &lt;code&gt;BTreeSet&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;struct.btreeset#method.intersection&quot;&gt; &lt;code&gt;intersection&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="cd64d67da228b8471603fbb0b2df44241b404edf" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.btreeset#method.into_iter&quot;&gt;&lt;code&gt;into_iter&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.btreeset&quot;&gt;&lt;code&gt;BTreeSet&lt;/code&gt;&lt;/a&gt; (provided by the &lt;code&gt;IntoIterator&lt;/code&gt; trait). See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; によって作成され&lt;a href=&quot;struct.btreeset#method.into_iter&quot;&gt; &lt;code&gt;into_iter&lt;/code&gt; の&lt;/a&gt;上の方法&lt;a href=&quot;struct.btreeset&quot;&gt; &lt;code&gt;BTreeSet&lt;/code&gt; &lt;/a&gt;（によって提供 &lt;code&gt;IntoIterator&lt;/code&gt; の形質）。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="b2d51f3eed3f11c0fe92a56c05aa30ba63101b5b" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.btreeset#method.iter&quot;&gt;&lt;code&gt;iter&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.btreeset&quot;&gt;&lt;code&gt;BTreeSet&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;struct.btreeset&quot;&gt; &lt;code&gt;BTreeSet&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;struct.btreeset#method.iter&quot;&gt; &lt;code&gt;iter&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="4952396a08a80db78884e7472ef4fcdc98f30b89" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.btreeset#method.range&quot;&gt;&lt;code&gt;range&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.btreeset&quot;&gt;&lt;code&gt;BTreeSet&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;struct.btreeset&quot;&gt; &lt;code&gt;BTreeSet&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;struct.btreeset#method.range&quot;&gt; &lt;code&gt;range&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="03065ec43e94189db8db5b6c22bcd04c4d9e3d5f" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.btreeset#method.symmetric_difference&quot;&gt;&lt;code&gt;symmetric_difference&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.btreeset&quot;&gt;&lt;code&gt;BTreeSet&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;struct.btreeset&quot;&gt; &lt;code&gt;BTreeSet&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;struct.btreeset#method.symmetric_difference&quot;&gt; &lt;code&gt;symmetric_difference&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="06c95a89e54823ffe6dff81406fba47c36a4dc6c" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.btreeset#method.union&quot;&gt;&lt;code&gt;union&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.btreeset&quot;&gt;&lt;code&gt;BTreeSet&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;struct.btreeset&quot;&gt; &lt;code&gt;BTreeSet&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;struct.btreeset#method.union&quot;&gt; &lt;code&gt;union&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="512853e49000d203253875f2ca8249d15ea7353e" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.cstring#method.into_string&quot;&gt;&lt;code&gt;into_string&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.cstring&quot;&gt;&lt;code&gt;CString&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;struct.cstring&quot;&gt; &lt;code&gt;CString&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;struct.cstring#method.into_string&quot;&gt; &lt;code&gt;into_string&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="faa8b1395fad10dcbfc423094256b61e6d205866" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.hashmap#method.drain&quot;&gt;&lt;code&gt;drain&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.hashmap&quot;&gt;&lt;code&gt;HashMap&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は&lt;a href=&quot;struct.hashmap&quot;&gt; &lt;code&gt;HashMap&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;struct.hashmap#method.drain&quot;&gt; &lt;code&gt;drain&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="0800ef408d255e0937c01c82d43d77be20d45343" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.hashmap#method.into_iter&quot;&gt;&lt;code&gt;into_iter&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.hashmap&quot;&gt;&lt;code&gt;HashMap&lt;/code&gt;&lt;/a&gt; (provided by the &lt;code&gt;IntoIterator&lt;/code&gt; trait). See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;struct.hashmap&quot;&gt; &lt;code&gt;HashMap&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;struct.hashmap#method.into_iter&quot;&gt; &lt;code&gt;into_iter&lt;/code&gt; &lt;/a&gt;メソッド（ &lt;code&gt;IntoIterator&lt;/code&gt; トレイトによって提供される）によって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="0608e2c033c0bbc3bd28c971540c2b970498e946" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.hashmap#method.iter&quot;&gt;&lt;code&gt;iter&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.hashmap&quot;&gt;&lt;code&gt;HashMap&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は&lt;a href=&quot;struct.hashmap&quot;&gt; &lt;code&gt;HashMap&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;struct.hashmap#method.iter&quot;&gt; &lt;code&gt;iter&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="0d3d57080a3c9ea2da73c2cffa1d26e9e4a02705" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.hashmap#method.iter_mut&quot;&gt;&lt;code&gt;iter_mut&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.hashmap&quot;&gt;&lt;code&gt;HashMap&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;struct.hashmap&quot;&gt; &lt;code&gt;HashMap&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;struct.hashmap#method.iter_mut&quot;&gt; &lt;code&gt;iter_mut&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="24475378883de5203105dba62856d4abf99e3544" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.hashmap#method.keys&quot;&gt;&lt;code&gt;keys&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.hashmap&quot;&gt;&lt;code&gt;HashMap&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;struct.hashmap&quot;&gt; &lt;code&gt;HashMap&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;struct.hashmap#method.keys&quot;&gt; &lt;code&gt;keys&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="9d0295f8ffe26eaa9c9d5777a9c742f561e9829a" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.hashmap#method.values&quot;&gt;&lt;code&gt;values&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.hashmap&quot;&gt;&lt;code&gt;HashMap&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;struct.hashmap&quot;&gt; &lt;code&gt;HashMap&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;struct.hashmap#method.values&quot;&gt; &lt;code&gt;values&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="29c5ae45f57800a030c9d11a0a477ba58c24833e" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.hashmap#method.values_mut&quot;&gt;&lt;code&gt;values_mut&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.hashmap&quot;&gt;&lt;code&gt;HashMap&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は&lt;a href=&quot;struct.hashmap&quot;&gt; &lt;code&gt;HashMap&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;struct.hashmap#method.values_mut&quot;&gt; &lt;code&gt;values_mut&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="7513d477a389bb5cb5a430e327122b1af796c3fd" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.hashset#method.difference&quot;&gt;&lt;code&gt;difference&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.hashset&quot;&gt;&lt;code&gt;HashSet&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は&lt;a href=&quot;struct.hashset&quot;&gt; &lt;code&gt;HashSet&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;struct.hashset#method.difference&quot;&gt; &lt;code&gt;difference&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="86301ec13deb5075922cbd995e23feac257a9d81" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.hashset#method.drain&quot;&gt;&lt;code&gt;drain&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.hashset&quot;&gt;&lt;code&gt;HashSet&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は&lt;a href=&quot;struct.hashset&quot;&gt; &lt;code&gt;HashSet&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;struct.hashset#method.drain&quot;&gt; &lt;code&gt;drain&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="3ebb8dfa5cf525c05fe6f08d21ee543480482796" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.hashset#method.intersection&quot;&gt;&lt;code&gt;intersection&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.hashset&quot;&gt;&lt;code&gt;HashSet&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は&lt;a href=&quot;struct.hashset&quot;&gt; &lt;code&gt;HashSet&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;struct.hashset#method.intersection&quot;&gt; &lt;code&gt;intersection&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="b4fe9a5189ce4199be4828187c5779ad99c77194" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.hashset#method.into_iter&quot;&gt;&lt;code&gt;into_iter&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.hashset&quot;&gt;&lt;code&gt;HashSet&lt;/code&gt;&lt;/a&gt; (provided by the &lt;code&gt;IntoIterator&lt;/code&gt; trait). See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;struct.hashset&quot;&gt; &lt;code&gt;HashSet&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;struct.hashset#method.into_iter&quot;&gt; &lt;code&gt;into_iter&lt;/code&gt; &lt;/a&gt;メソッド（ &lt;code&gt;IntoIterator&lt;/code&gt; トレイトによって提供される）によって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="d0c83c37cc0812ff3b4a5b7bded4f379cae37eda" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.hashset#method.iter&quot;&gt;&lt;code&gt;iter&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.hashset&quot;&gt;&lt;code&gt;HashSet&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は&lt;a href=&quot;struct.hashset&quot;&gt; &lt;code&gt;HashSet&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;struct.hashset#method.iter&quot;&gt; &lt;code&gt;iter&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="2eb620627c49c8366b81c168c1e2da24ad0ba352" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.hashset#method.symmetric_difference&quot;&gt;&lt;code&gt;symmetric_difference&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.hashset&quot;&gt;&lt;code&gt;HashSet&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;struct.hashset&quot;&gt; &lt;code&gt;HashSet&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;struct.hashset#method.symmetric_difference&quot;&gt; &lt;code&gt;symmetric_difference&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="150f20ec4e603307925c0aee02dfd449f9a510cf" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.hashset#method.union&quot;&gt;&lt;code&gt;union&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.hashset&quot;&gt;&lt;code&gt;HashSet&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は&lt;a href=&quot;struct.hashset&quot;&gt; &lt;code&gt;HashSet&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;struct.hashset#method.union&quot;&gt; &lt;code&gt;union&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="2d89966c70887a327798b302de57b322446d731d" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.linkedlist#method.into_iter&quot;&gt;&lt;code&gt;into_iter&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.linkedlist&quot;&gt;&lt;code&gt;LinkedList&lt;/code&gt;&lt;/a&gt; (provided by the &lt;code&gt;IntoIterator&lt;/code&gt; trait). See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; によって作成され&lt;a href=&quot;struct.linkedlist#method.into_iter&quot;&gt; &lt;code&gt;into_iter&lt;/code&gt; 用&lt;/a&gt;のメソッド&lt;a href=&quot;struct.linkedlist&quot;&gt; &lt;code&gt;LinkedList&lt;/code&gt; の&lt;/a&gt;（によって提供 &lt;code&gt;IntoIterator&lt;/code&gt; の形質）。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="58115891c3a0ac7312c6ea2a52ac61968cc4906c" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.linkedlist#method.iter&quot;&gt;&lt;code&gt;iter&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.linkedlist&quot;&gt;&lt;code&gt;LinkedList&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は&lt;a href=&quot;struct.linkedlist&quot;&gt; &lt;code&gt;LinkedList&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;struct.linkedlist#method.iter&quot;&gt; &lt;code&gt;iter&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="f0659eea6bed999fa3680d324080162cd5e8a132" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.linkedlist#method.iter_mut&quot;&gt;&lt;code&gt;iter_mut&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.linkedlist&quot;&gt;&lt;code&gt;LinkedList&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は&lt;a href=&quot;struct.linkedlist#method.iter_mut&quot;&gt; &lt;code&gt;iter_mut&lt;/code&gt; &lt;/a&gt;メソッドによって作成され&lt;a href=&quot;struct.linkedlist&quot;&gt; &lt;code&gt;LinkedList&lt;/code&gt; &lt;/a&gt;。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="0aae0dd86db056d40eff085617d4cf75e5ca4cd1" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.path#method.ancestors&quot;&gt;&lt;code&gt;ancestors&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.path&quot;&gt;&lt;code&gt;Path&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;struct.path&quot;&gt; &lt;code&gt;Path&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;struct.path#method.ancestors&quot;&gt; &lt;code&gt;ancestors&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="678416258ee794f65fdd4a1cd12a337537c5938c" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.path#method.components&quot;&gt;&lt;code&gt;components&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.path&quot;&gt;&lt;code&gt;Path&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;struct.path&quot;&gt; &lt;code&gt;Path&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;struct.path#method.components&quot;&gt; &lt;code&gt;components&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="f7998e185f302bc549a882f13518743e61ee46ed" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.path#method.iter&quot;&gt;&lt;code&gt;iter&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.path&quot;&gt;&lt;code&gt;Path&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;struct.path&quot;&gt; &lt;code&gt;Path&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;struct.path#method.iter&quot;&gt; &lt;code&gt;iter&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="2cd612b3807ec02a5c6d66e1f1c48af60492df83" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.path#method.strip_prefix&quot;&gt;&lt;code&gt;strip_prefix&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.path&quot;&gt;&lt;code&gt;Path&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;struct.path&quot;&gt; &lt;code&gt;Path&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;struct.path#method.strip_prefix&quot;&gt; &lt;code&gt;strip_prefix&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="088542ff6ce5390ea17e8720dd59c0a74e6b5452" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.tcplistener#method.incoming&quot;&gt;&lt;code&gt;TcpListener::incoming&lt;/code&gt;&lt;/a&gt; method. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;struct.tcplistener#method.incoming&quot;&gt; &lt;code&gt;TcpListener::incoming&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="1b5816e88e64a2f2821568b7180ce9b608c65d11" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.tcplistener#method.incoming&quot;&gt;&lt;code&gt;incoming&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.tcplistener&quot;&gt;&lt;code&gt;TcpListener&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;struct.tcplistener&quot;&gt; &lt;code&gt;TcpListener&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;struct.tcplistener#method.incoming&quot;&gt; &lt;code&gt;incoming&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="1f4d8367fad76ae04d5e19a5385a27f59c0aaf13" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.vec#method.drain&quot;&gt;&lt;code&gt;drain&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.vec&quot;&gt;&lt;code&gt;Vec&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は&lt;a href=&quot;struct.vec&quot;&gt; &lt;code&gt;Vec&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;struct.vec#method.drain&quot;&gt; &lt;code&gt;drain&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。</target>
        </trans-unit>
        <trans-unit id="5f3bc5ceaa1713a6dc6144c9424b5691a097a496" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.vecdeque#method.drain&quot;&gt;&lt;code&gt;drain&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.vecdeque&quot;&gt;&lt;code&gt;VecDeque&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;struct.vecdeque&quot;&gt; &lt;code&gt;VecDeque&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;struct.vecdeque#method.drain&quot;&gt; &lt;code&gt;drain&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="b345fb68ea41cbf5a17dfb308f9d1a6e9820cc06" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.vecdeque#method.into_iter&quot;&gt;&lt;code&gt;into_iter&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.vecdeque&quot;&gt;&lt;code&gt;VecDeque&lt;/code&gt;&lt;/a&gt; (provided by the &lt;code&gt;IntoIterator&lt;/code&gt; trait). See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; によって作成され&lt;a href=&quot;struct.vecdeque#method.into_iter&quot;&gt; &lt;code&gt;into_iter&lt;/code&gt; の&lt;/a&gt;上の方法&lt;a href=&quot;struct.vecdeque&quot;&gt; &lt;code&gt;VecDeque&lt;/code&gt; &lt;/a&gt;（によって提供 &lt;code&gt;IntoIterator&lt;/code&gt; の形質）。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="5c15922d5946c2fdadf8c55e5b28d91817f56274" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.vecdeque#method.iter&quot;&gt;&lt;code&gt;iter&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.vecdeque&quot;&gt;&lt;code&gt;VecDeque&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;struct.vecdeque&quot;&gt; &lt;code&gt;VecDeque&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;struct.vecdeque#method.iter&quot;&gt; &lt;code&gt;iter&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="6dcf16ee1a7554354a5a44529cc2c194dcf3a513" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.vecdeque#method.iter_mut&quot;&gt;&lt;code&gt;iter_mut&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.vecdeque&quot;&gt;&lt;code&gt;VecDeque&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;struct.vecdeque#method.iter_mut&quot;&gt; &lt;code&gt;iter_mut&lt;/code&gt; &lt;/a&gt;メソッドによって作成され&lt;a href=&quot;struct.vecdeque&quot;&gt; &lt;code&gt;VecDeque&lt;/code&gt; &lt;/a&gt;。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="c378dde9d0a6525bd047bdf905231180a99f3491" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;trait.iterator#method.chain&quot;&gt;&lt;code&gt;chain&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;trait.iterator#method.chain&quot;&gt; &lt;code&gt;chain&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="b7e65fcf3ce565260fcf0013397e867c30f8522f" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;trait.iterator#method.cloned&quot;&gt;&lt;code&gt;cloned&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;trait.iterator#method.cloned&quot;&gt; &lt;code&gt;cloned&lt;/code&gt; &lt;/a&gt;されたメソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="f5b898ca8f830f2683dbb470bc2669fdcc151557" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;trait.iterator#method.copied&quot;&gt;&lt;code&gt;copied&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;trait.iterator#method.copied&quot;&gt; &lt;code&gt;copied&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="6792715370c3a92e84d28374f5832cff5986bd03" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;trait.iterator#method.cycle&quot;&gt;&lt;code&gt;cycle&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;trait.iterator#method.cycle&quot;&gt; &lt;code&gt;cycle&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="eef34875ae92021a31b6bedf0e5ef3ef03a55346" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;trait.iterator#method.enumerate&quot;&gt;&lt;code&gt;enumerate&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;trait.iterator#method.enumerate&quot;&gt; &lt;code&gt;enumerate&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="9fb0d2f619194cb6fd2c5912cd0ab4f8aa1436b0" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;trait.iterator#method.filter&quot;&gt;&lt;code&gt;filter&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;trait.iterator#method.filter&quot;&gt; &lt;code&gt;filter&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="7b10e5f9bf83042ee3e1d8a41324ee574deb204c" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;trait.iterator#method.filter_map&quot;&gt;&lt;code&gt;filter_map&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;trait.iterator#method.filter_map&quot;&gt; &lt;code&gt;filter_map&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="e8efe5c2b3a46412d14b079c4efde7503ec17047" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;trait.iterator#method.flat_map&quot;&gt;&lt;code&gt;flat_map&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;trait.iterator#method.flat_map&quot;&gt; &lt;code&gt;flat_map&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="06ac94503cae6df0f4ea2938d28112afa01fe8f9" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;trait.iterator#method.flatten&quot;&gt;&lt;code&gt;flatten&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;trait.iterator#method.flatten&quot;&gt; &lt;code&gt;flatten&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="b8c0c8898fdf0a69bb894be3b262576aa94693ed" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;trait.iterator#method.fuse&quot;&gt;&lt;code&gt;fuse&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;trait.iterator#method.fuse&quot;&gt; &lt;code&gt;fuse&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="16538eabad39936ba061176498ea306e212f6f92" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;trait.iterator#method.inspect&quot;&gt;&lt;code&gt;inspect&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;trait.iterator#method.inspect&quot;&gt; &lt;code&gt;inspect&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="a0b5389b001bb0bbe98e28bcb36e5aebd8a66723" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;trait.iterator#method.map&quot;&gt;&lt;code&gt;map&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;trait.iterator#method.map&quot;&gt; &lt;code&gt;map&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="b50dc251fa4cf84989ab18f9a900ba7288f0b114" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;trait.iterator#method.map_while&quot;&gt;&lt;code&gt;map_while&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;trait.iterator#method.map_while&quot;&gt; &lt;code&gt;map_while&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="2a63b8c96bdf4e631228dfff76c51a72895aa1c2" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;trait.iterator#method.peekable&quot;&gt;&lt;code&gt;peekable&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;trait.iterator#method.peekable&quot;&gt; &lt;code&gt;peekable&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="77b9d3dc967cfc65e7923a1d25d998d0359bf8da" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;trait.iterator#method.rev&quot;&gt;&lt;code&gt;rev&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;trait.iterator#method.rev&quot;&gt; &lt;code&gt;rev&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="0c534d67b85da417a0620daeb199532327c51e03" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;trait.iterator#method.scan&quot;&gt;&lt;code&gt;scan&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;trait.iterator#method.scan&quot;&gt; &lt;code&gt;scan&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="d55ea7e68cc78050a3929f56a9674ef3cbe9031c" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;trait.iterator#method.skip&quot;&gt;&lt;code&gt;skip&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;trait.iterator#method.skip&quot;&gt; &lt;code&gt;skip&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="752b3b9ee442b1ede4f01e7280612ee155b893b6" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;trait.iterator#method.skip_while&quot;&gt;&lt;code&gt;skip_while&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;trait.iterator#method.skip_while&quot;&gt; &lt;code&gt;skip_while&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="e4194d8e81f0d479a0971b522dc10170de8177ce" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;trait.iterator#method.step_by&quot;&gt;&lt;code&gt;step_by&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;trait.iterator#method.step_by&quot;&gt; &lt;code&gt;step_by&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="ae2f32a2383fa23779c3295dfc6285ad6be64c98" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;trait.iterator#method.take&quot;&gt;&lt;code&gt;take&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;trait.iterator#method.take&quot;&gt; &lt;code&gt;take&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="431a8793b970c81fcc0ab5b7d979a63311ac642a" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;trait.iterator#method.take_while&quot;&gt;&lt;code&gt;take_while&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;trait.iterator#method.take_while&quot;&gt; &lt;code&gt;take_while&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="f6420f53e024dcbfd568efb25b94839f7a579e39" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;trait.iterator#method.zip&quot;&gt;&lt;code&gt;zip&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;trait.iterator#method.zip&quot;&gt; &lt;code&gt;zip&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="8be96a57f8e063c35aa0cfee79161d9fbe1f4027" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;code&gt;into_iter&lt;/code&gt; method on &lt;a href=&quot;struct.vec&quot;&gt;&lt;code&gt;Vec&lt;/code&gt;&lt;/a&gt; (provided by the &lt;a href=&quot;../iter/trait.intoiterator&quot;&gt;&lt;code&gt;IntoIterator&lt;/code&gt;&lt;/a&gt; trait).</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;struct.vec&quot;&gt; &lt;code&gt;Vec&lt;/code&gt; &lt;/a&gt;の &lt;code&gt;into_iter&lt;/code&gt; メソッド（&lt;a href=&quot;../iter/trait.intoiterator&quot;&gt; &lt;code&gt;IntoIterator&lt;/code&gt; &lt;/a&gt;トレイトによって提供される）によって作成されます。</target>
        </trans-unit>
        <trans-unit id="75da1f33c5a1b29ca9ce3084de81aca63a2c8c06" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is used to represent the exit status of a child process. Child processes are created via the &lt;a href=&quot;struct.command&quot;&gt;&lt;code&gt;Command&lt;/code&gt;&lt;/a&gt; struct and their exit status is exposed through the &lt;a href=&quot;struct.command#method.status&quot;&gt;&lt;code&gt;status&lt;/code&gt;&lt;/a&gt; method, or the &lt;a href=&quot;struct.child#method.wait&quot;&gt;&lt;code&gt;wait&lt;/code&gt;&lt;/a&gt; method of a &lt;a href=&quot;struct.child&quot;&gt;&lt;code&gt;Child&lt;/code&gt;&lt;/a&gt; process.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、子プロセスの終了ステータスを表すために使用されます。子プロセスは&lt;a href=&quot;struct.command&quot;&gt; &lt;code&gt;Command&lt;/code&gt; &lt;/a&gt;構造体を介して作成され、その終了ステータスは、&lt;a href=&quot;struct.command#method.status&quot;&gt; &lt;code&gt;status&lt;/code&gt; &lt;/a&gt;メソッド&lt;a href=&quot;struct.child&quot;&gt; &lt;code&gt;Child&lt;/code&gt; &lt;/a&gt;プロセスの&lt;a href=&quot;struct.child#method.wait&quot;&gt; &lt;code&gt;wait&lt;/code&gt; &lt;/a&gt;メソッドを通じて公開されます。</target>
        </trans-unit>
        <trans-unit id="5f5bb1decbaa26846cd44955c2f8ab7127199a37" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;use&lt;/code&gt; statement brings all public items defined in &lt;code&gt;std::collections&lt;/code&gt; into the current scope. Be careful when using the glob operator! Glob can make it harder to tell what names are in scope and where a name used in your program was defined.</source>
          <target state="translated">この &lt;code&gt;use&lt;/code&gt; ステートメントは、 &lt;code&gt;std::collections&lt;/code&gt; 定義されているすべてのパブリックアイテムを現在のスコープに移動します。glob演算子を使用するときは注意してください！Globは、どの名前がスコープ内にあり、プログラムで使用されている名前がどこで定義されたかをわかりにくくする場合があります。</target>
        </trans-unit>
        <trans-unit id="caecafb5a4fb0937d47c4a448338d709acd25fe7" translate="yes" xml:space="preserve">
          <source>This &lt;strong&gt;channel&lt;/strong&gt; is currently empty, but the &lt;strong&gt;Sender&lt;/strong&gt;(s) have not yet disconnected, so data may yet become available.</source>
          <target state="translated">この&lt;strong&gt;チャネル&lt;/strong&gt;は現在空ですが、&lt;strong&gt;送信者&lt;/strong&gt;はまだ切断されていないため、データがまだ利用可能になる可能性があります。</target>
        </trans-unit>
        <trans-unit id="8266d9d9a47bf63d7284fb3019e831be816c08a4" translate="yes" xml:space="preserve">
          <source>This Greek letter convention is usually just employed when the presence of a sequence is a technical detail; in particular, when we wish to &lt;em&gt;emphasize&lt;/em&gt; that we are operating on a sequence of token-trees, we will use the notation &quot;tt ...&quot; for the sequence, not a Greek letter.</source>
          <target state="translated">このギリシャ文字の規約は通常、シーケンスの存在が技術的な詳細である場合にのみ使用されます。特に、一連のトークンツリーで操作していることを&lt;em&gt;強調&lt;/em&gt;したい場合は、ギリシャ文字ではなく「tt ...」という表記を使用します。</target>
        </trans-unit>
        <trans-unit id="75b75d5ae6c1390e9d9181dd6cf33a8dbc7fda14" translate="yes" xml:space="preserve">
          <source>This alias exists for backwards compatibility, and may be eventually deprecated.</source>
          <target state="translated">このエイリアスは下位互換性のために存在し、最終的には非推奨となる可能性があります。</target>
        </trans-unit>
        <trans-unit id="6b20bc4e00b7823d1d79ae42b369f4aec802629c" translate="yes" xml:space="preserve">
          <source>This allows a program to terminate immediately and provide feedback to the caller of the program. &lt;code&gt;panic!&lt;/code&gt; should be used when a program reaches an unrecoverable state.</source>
          <target state="translated">これにより、プログラムは即座に終了し、プログラムの呼び出し元にフィードバックを提供できます。 &lt;code&gt;panic!&lt;/code&gt; プログラムが回復不可能な状態に達したときに使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="720612fc48419da4fea633357e945fe3ab75a62a" translate="yes" xml:space="preserve">
          <source>This allows creating a custom iterator with any behavior without using the more verbose syntax of creating a dedicated type and implementing the &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt; trait for it.</source>
          <target state="translated">これにより、専用タイプを作成してその&lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt;特性を実装するというより冗長な構文を使用せずに、任意の動作でカスタムイテレーターを作成できます。</target>
        </trans-unit>
        <trans-unit id="8257259a712f5169c7b4c3c0a8b238e35c31bcfe" translate="yes" xml:space="preserve">
          <source>This allows creating a custom iterator with any behavior without using the more verbose syntax of creating a dedicated type and implementing the &lt;code&gt;Iterator&lt;/code&gt; trait for it.</source>
          <target state="translated">これにより、専用のタイプを作成してその &lt;code&gt;Iterator&lt;/code&gt; トレイトを実装するというより冗長な構文を使用せずに、任意の動作でカスタムイテレーターを作成できます。</target>
        </trans-unit>
        <trans-unit id="df65a862360a6e0bd203ebc75d215550a55a7ec8" translate="yes" xml:space="preserve">
          <source>This allows the value to be dropped again.</source>
          <target state="translated">これにより、再び値を落とすことができます。</target>
        </trans-unit>
        <trans-unit id="6f7c82b24f94be6c3280942f62546df8a8a85985" translate="yes" xml:space="preserve">
          <source>This allows writing a projection that creates a &lt;a href=&quot;struct.pin&quot;&gt;&lt;code&gt;Pin&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;&amp;amp;mut Field&amp;gt;&lt;/code&gt;, thus witnessing that the field is pinned:</source>
          <target state="translated">これにより、&lt;a href=&quot;struct.pin&quot;&gt; &lt;code&gt;Pin&lt;/code&gt; &lt;/a&gt; &lt;code&gt;&amp;lt;&amp;amp;mut Field&amp;gt;&lt;/code&gt; を作成するプロジェクションを記述できるため、フィールドが固定されていることがわかります。</target>
        </trans-unit>
        <trans-unit id="e583956f9df46a2ff992eeadbf1d346839209a48" translate="yes" xml:space="preserve">
          <source>This allows writing a projection that creates a &lt;code&gt;Pin&amp;lt;&amp;amp;mut Field&amp;gt;&lt;/code&gt;, thus witnessing that the field is pinned:</source>
          <target state="translated">これにより、 &lt;code&gt;Pin&amp;lt;&amp;amp;mut Field&amp;gt;&lt;/code&gt; を作成するプロジェクションを記述できるようになり、フィールドが固定されていることがわかります。</target>
        </trans-unit>
        <trans-unit id="9ed737638d9ae3e5d76efaebf6336aa8e810e97d" translate="yes" xml:space="preserve">
          <source>This allows your code to type-check, which is useful if you are prototyping or implementing a trait that requires multiple methods which you don't plan of using all of.</source>
          <target state="translated">これは、プロトタイプを作成したり、複数のメソッドを必要とする形質を実装したりする場合に便利ですが、すべてのメソッドを使用する予定はありません。</target>
        </trans-unit>
        <trans-unit id="d056f20cad4a501761c404be3055779184b1614f" translate="yes" xml:space="preserve">
          <source>This also in turn requires the annotation &lt;code&gt;T: 'a&lt;/code&gt;, indicating that any references in &lt;code&gt;T&lt;/code&gt; are valid over the lifetime &lt;code&gt;'a&lt;/code&gt;.</source>
          <target state="translated">また、これには注釈 &lt;code&gt;T: 'a&lt;/code&gt; が必要です。これは、 &lt;code&gt;T&lt;/code&gt; 内のすべての参照が有効期間 &lt;code&gt;'a&lt;/code&gt; にわたって有効であることを示します。</target>
        </trans-unit>
        <trans-unit id="60e1ada09db527973a7bebfb74dc7b9bbc576185" translate="yes" xml:space="preserve">
          <source>This also means that all resources such as file descriptors and memory-mapped regions got duplicated. It is your responsibility to make sure that the closure does not violate library invariants by making invalid use of these duplicates.</source>
          <target state="translated">これはまた、ファイル記述子やメモリマップされた領域などのすべてのリソースが重複していることを意味します。これらの複製を無効に利用することで、クロージャがライブラリの不変性に違反しないようにするのはあなたの責任です。</target>
        </trans-unit>
        <trans-unit id="c5dab5f83abd965944fb4f235779eceb37146b12" translate="yes" xml:space="preserve">
          <source>This and &lt;a href=&quot;../macro.println&quot;&gt;&lt;code&gt;println!&lt;/code&gt;&lt;/a&gt; emit their output to stdout. Similarly to the &lt;a href=&quot;../macro.write&quot;&gt;&lt;code&gt;write!&lt;/code&gt;&lt;/a&gt; macro, the goal of these macros is to avoid intermediate allocations when printing output. Example usage is:</source>
          <target state="translated">これと&lt;a href=&quot;../macro.println&quot;&gt; &lt;code&gt;println!&lt;/code&gt; &lt;/a&gt;出力をstdoutに出力します。&lt;a href=&quot;../macro.write&quot;&gt; &lt;code&gt;write!&lt;/code&gt; &lt;/a&gt;同様に！マクロ、これらのマクロの目的は、出力を印刷するときに中間の割り当てを回避することです。使用例は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="acaf201fd6cc02b279b5987151a707c144a7e5c9" translate="yes" xml:space="preserve">
          <source>This and &lt;a href=&quot;../macro.writeln&quot;&gt;&lt;code&gt;writeln!&lt;/code&gt;&lt;/a&gt; are two macros which are used to emit the format string to a specified stream. This is used to prevent intermediate allocations of format strings and instead directly write the output. Under the hood, this function is actually invoking the &lt;a href=&quot;../io/trait.write#method.write_fmt&quot;&gt;&lt;code&gt;write_fmt&lt;/code&gt;&lt;/a&gt; function defined on the &lt;a href=&quot;../io/trait.write&quot;&gt;&lt;code&gt;std::io::Write&lt;/code&gt;&lt;/a&gt; trait. Example usage is:</source>
          <target state="translated">これと&lt;a href=&quot;../macro.writeln&quot;&gt; &lt;code&gt;writeln!&lt;/code&gt; &lt;/a&gt;指定されたストリームにフォーマット文字列を出力するために使用される2つのマクロです。これは、フォーマット文字列の中間割り当てを防ぐために使用され、代わりに出力を直接書き込みます。&lt;a href=&quot;../io/trait.write#method.write_fmt&quot;&gt; &lt;code&gt;write_fmt&lt;/code&gt; &lt;/a&gt;的には、この関数は&lt;a href=&quot;../io/trait.write&quot;&gt; &lt;code&gt;std::io::Write&lt;/code&gt; &lt;/a&gt;トレイトで定義されたwrite_fmt関数を実際に呼び出しています。使用例は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="7dd14a6dd33e863c7c3a9afcbc1b94db44474940" translate="yes" xml:space="preserve">
          <source>This appendix contains a glossary of Rust&amp;rsquo;s syntax, including operators and other symbols that appear by themselves or in the context of paths, generics, trait bounds, macros, attributes, comments, tuples, and brackets.</source>
          <target state="translated">この付録には、Rustの構文の用語集が含まれています。これには、単独で、またはパス、ジェネリック、トレイトの境界、マクロ、属性、コメント、タプル、およびブラケットのコンテキストで表示される演算子やその他の記号が含まれます。</target>
        </trans-unit>
        <trans-unit id="98f7d37c50386fc1a7bc45c602df60e2a6b2f88d" translate="yes" xml:space="preserve">
          <source>This appendix is about how Rust is made and how that affects you as a Rust developer.</source>
          <target state="translated">この付録は、Rust がどのように作られているか、そしてそれが Rust 開発者としてどのように影響するかについてです。</target>
        </trans-unit>
        <trans-unit id="0a5a5ca6ad8b433739f4a95c725e50e77d092d65" translate="yes" xml:space="preserve">
          <source>This applies even if the result of this method is unused!</source>
          <target state="translated">これは、このメソッドの結果が未使用であっても適用されます!</target>
        </trans-unit>
        <trans-unit id="2b1ddafbbcba87aafd5e8ce9688cb9d0214c48d2" translate="yes" xml:space="preserve">
          <source>This applies even if the result of this method is unused! (The part about being initialized is not yet fully decided, but until it is, the only safe approach is to ensure that they are indeed initialized.)</source>
          <target state="translated">これは、このメソッドの結果が未使用であっても適用されます! (初期化されるという部分はまだ完全には決まっていませんが、それが決まるまでは、本当に初期化されているかどうかを確認することが唯一の安全な方法です)。</target>
        </trans-unit>
        <trans-unit id="cf4d5070c48104546a550c9a051a5f05bc584068" translate="yes" xml:space="preserve">
          <source>This associated type corresponds to the &lt;code&gt;yield&lt;/code&gt; expression and the values which are allowed to be returned each time a generator yields. For example an iterator-as-a-generator would likely have this type as &lt;code&gt;T&lt;/code&gt;, the type being iterated over.</source>
          <target state="translated">この関連するタイプは、 &lt;code&gt;yield&lt;/code&gt; 式と、ジェネレーターがyieldするたびに返すことができる値に対応しています。たとえば、ジェネレーターとしてのイテレーターは、このタイプを &lt;code&gt;T&lt;/code&gt; として持つ可能性が高く、タイプが反復されます。</target>
        </trans-unit>
        <trans-unit id="fe55ae487fde4fa4dff7b2d6d6cdbe76cfbf6518" translate="yes" xml:space="preserve">
          <source>This attribute allows configuring the choice of global allocator. You can use this to implement a completely custom global allocator to route all default allocation requests to a custom object.</source>
          <target state="translated">この属性は、グローバルアロケータの選択を設定することができます。これを使用して、すべてのデフォルトの割り当て要求をカスタムオブジェクトにルーティングするための完全にカスタムなグローバルアロケータを実装することができます。</target>
        </trans-unit>
        <trans-unit id="ef26e5c3cab23c11bb733ef68934315ad78b85fb" translate="yes" xml:space="preserve">
          <source>This avoids reallocating where possible, but the conditions for that are strict, and subject to change, and so shouldn't be relied upon unless the &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; came from &lt;code&gt;From&amp;lt;VecDeque&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt; and hasn't been reallocated.</source>
          <target state="translated">これにより、可能な場合は再割り当てを回避できますが、その条件は厳格であり、変更される可能性があるため、 &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; が &lt;code&gt;From&amp;lt;VecDeque&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt; からのものであり、再割り当てされていない限り、これに依存しないでください。</target>
        </trans-unit>
        <trans-unit id="83aca27198b7bcda96ac6aa2d82d76c078c81a23" translate="yes" xml:space="preserve">
          <source>This behavior is no longer valid in edition 2018.</source>
          <target state="translated">この動作は2018年版では無効になりました。</target>
        </trans-unit>
        <trans-unit id="c09355cbc8b51304e7c4f53224a50044b1a70814" translate="yes" xml:space="preserve">
          <source>This book also does not serve as a reference to the &lt;a href=&quot;../std/index&quot;&gt;standard library&lt;/a&gt; included in the language distribution. Those libraries are documented separately by extracting documentation attributes from their source code. Many of the features that one might expect to be language features are library features in Rust, so what you're looking for may be there, not here.</source>
          <target state="translated">この本は、言語配布に含まれている&lt;a href=&quot;../std/index&quot;&gt;標準ライブラリ&lt;/a&gt;への参照としても役立ちません。これらのライブラリは、ソースコードからドキュメンテーション属性を抽出することで個別にドキュメント化されます。言語機能であると期待できる機能の多くはRustのライブラリ機能であるため、探しているものがここではなく、そこにある可能性があります。</target>
        </trans-unit>
        <trans-unit id="8e20080fb8e1699ed580bf1c766151d2b69a59c9" translate="yes" xml:space="preserve">
          <source>This book also only serves as a reference to what is available in stable Rust. For unstable features being worked on, see the &lt;a href=&quot;https://doc.rust-lang.org/nightly/unstable-book/index.html&quot;&gt;Unstable Book&lt;/a&gt;.</source>
          <target state="translated">この本は、安定したRustで利用できるものへの参照としても役立ちます。作業中の不安定な機能については、「&lt;a href=&quot;https://doc.rust-lang.org/nightly/unstable-book/index.html&quot;&gt;不安定版」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="32b7e021bdc132a2756c978c8a1d27d9e8d25d04" translate="yes" xml:space="preserve">
          <source>This book assumes that you&amp;rsquo;ve written code in another programming language but doesn&amp;rsquo;t make any assumptions about which one. We&amp;rsquo;ve tried to make the material broadly accessible to those from a wide variety of programming backgrounds. We don&amp;rsquo;t spend a lot of time talking about what programming &lt;em&gt;is&lt;/em&gt; or how to think about it. If you&amp;rsquo;re entirely new to programming, you would be better served by reading a book that specifically provides an introduction to programming.</source>
          <target state="translated">この本は、あなたが別のプログラミング言語でコードを書いたことを前提としていますが、どの言語についても何も想定していません。私たちは、さまざまなプログラミングの背景を持つ人々がその素材を広く利用できるようにしています。プログラミング&lt;em&gt;とは&lt;/em&gt;何か、それについてどう考えるかについて&lt;em&gt;は&lt;/em&gt;、あまり時間をかけません。プログラミングにまったく慣れていない場合は、プログラミングの概要を具体的に説明した本を読んだほうがよいでしょう。</target>
        </trans-unit>
        <trans-unit id="fb8d9819998123cf06ddd8f5a1ff9953b5c7298e" translate="yes" xml:space="preserve">
          <source>This book does not assume you are reading this book sequentially. Each chapter generally can be read standalone, but will cross-link to other chapters for facets of the language they refer to, but do not discuss.</source>
          <target state="translated">本書は、本書を順次読むことを前提としたものではありません。各章は一般的に単独で読むことができますが、他の章にクロスリンクして、参照しているが、議論していない言語の面については、他の章を参照しています。</target>
        </trans-unit>
        <trans-unit id="74d346bfc5c0837e4df013dba9f47fd4b57ffe9b" translate="yes" xml:space="preserve">
          <source>This book does not serve as an introduction to the language. Background familiarity with the language is assumed. A separate &lt;a href=&quot;../index&quot;&gt;book&lt;/a&gt; is available to help acquire such background familiarity.</source>
          <target state="translated">この本は、言語の紹介にはなりません。言語に精通していることを前提としています。そのような背景知識を習得するのに役立つ別の&lt;a href=&quot;../index&quot;&gt;本&lt;/a&gt;が入手可能です。</target>
        </trans-unit>
        <trans-unit id="4589512ba2ae3140ba2d5cf22da84c708acf0a3c" translate="yes" xml:space="preserve">
          <source>This book fully embraces the potential of Rust to empower its users. It&amp;rsquo;s a friendly and approachable text intended to help you level up not just your knowledge of Rust, but also your reach and confidence as a programmer in general. So dive in, get ready to learn&amp;mdash;and welcome to the Rust community!</source>
          <target state="translated">この本は、Rustがユーザーに力を与える可能性を十分に取り入れています。これは、Rustに関する知識だけでなく、プログラマーとしてのリーチと自信を高めるための、親しみやすく親しみやすいテキストです。さあ、始めましょう。学ぶ準備をしてください。そしてRustコミュニティにようこそ！</target>
        </trans-unit>
        <trans-unit id="5eac84b162d067e7c7224575575cec18251ae81c" translate="yes" xml:space="preserve">
          <source>This book is the primary reference for the Rust programming language. It provides three kinds of material:</source>
          <target state="translated">本書は、プログラミング言語Rustの主要なリファレンスです。3種類の資料を提供しています。</target>
        </trans-unit>
        <trans-unit id="4dac54ff1b6d498bb0e5ad5ca44a29d6b2c3c87b" translate="yes" xml:space="preserve">
          <source>This book only contains information about stable features, as in-progress features are still changing, and surely they&amp;rsquo;ll be different between when this book was written and when they get enabled in stable builds. You can find documentation for nightly-only features online.</source>
          <target state="translated">進行中の機能はまだ変更されているため、この本には安定した機能に関する情報のみが含まれており、この本が作成されたときと安定したビルドで有効になるときとで違います。夜間限定機能のドキュメントはオンラインで見つけることができます。</target>
        </trans-unit>
        <trans-unit id="9b40452b3457baf6eb9c9eb4c95b596dc78a3493" translate="yes" xml:space="preserve">
          <source>This broken invariant is then later observed.</source>
          <target state="translated">この壊れた不変量は後に観測されます。</target>
        </trans-unit>
        <trans-unit id="626674212943f16d78b9c64b216d4813683d4bcd" translate="yes" xml:space="preserve">
          <source>This buffer is always stored on the heap.</source>
          <target state="translated">このバッファは常にヒープに格納されます。</target>
        </trans-unit>
        <trans-unit id="533f834501c9981cf01926064551726140f691d1" translate="yes" xml:space="preserve">
          <source>This builder also supports platform-specific options.</source>
          <target state="translated">このビルダーは、プラットフォーム固有のオプションもサポートしています。</target>
        </trans-unit>
        <trans-unit id="828127de31395e4a312b7fc3b3384b3f2a31aa51" translate="yes" xml:space="preserve">
          <source>This builder exposes the ability to configure how a &lt;a href=&quot;struct.file&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt; is opened and what operations are permitted on the open file. The &lt;a href=&quot;struct.file#method.open&quot;&gt;&lt;code&gt;File::open&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;struct.file#method.create&quot;&gt;&lt;code&gt;File::create&lt;/code&gt;&lt;/a&gt; methods are aliases for commonly used options using this builder.</source>
          <target state="translated">このビルダーは、&lt;a href=&quot;struct.file&quot;&gt; &lt;code&gt;File&lt;/code&gt; &lt;/a&gt;を開く方法と、開いているファイルで許可される操作を構成する機能を公開します。&lt;a href=&quot;struct.file#method.open&quot;&gt; &lt;code&gt;File::open&lt;/code&gt; &lt;/a&gt;し、&lt;a href=&quot;struct.file#method.create&quot;&gt; &lt;code&gt;File::create&lt;/code&gt; &lt;/a&gt;方法は、このビルダーを使用して一般的に使用されるオプションの別名です。</target>
        </trans-unit>
        <trans-unit id="e3a75e262b3ddd48064e08eaf81396d4af4ef1e5" translate="yes" xml:space="preserve">
          <source>This call borrows &lt;code&gt;Cell&lt;/code&gt; mutably (at compile-time) which guarantees that we possess the only reference.</source>
          <target state="translated">この呼び出しは、 &lt;code&gt;Cell&lt;/code&gt; を（コンパイル時に）変更可能に借用し、唯一の参照を所有していることを保証します。</target>
        </trans-unit>
        <trans-unit id="5a4e17ce4bfa3ac12c6fb727cdafac307c2e7b00" translate="yes" xml:space="preserve">
          <source>This call borrows &lt;code&gt;RefCell&lt;/code&gt; mutably (at compile-time) so there is no need for dynamic checks.</source>
          <target state="translated">この呼び出しは &lt;code&gt;RefCell&lt;/code&gt; を変更可能に（コンパイル時に）借りるので、動的チェックの必要はありません。</target>
        </trans-unit>
        <trans-unit id="6f04390b2a6147633d5eca54b6b75468f6c87ab6" translate="yes" xml:space="preserve">
          <source>This call borrows the &lt;code&gt;UnsafeCell&lt;/code&gt; mutably (at compile-time) which guarantees that we possess the only reference.</source>
          <target state="translated">この呼び出しは、 &lt;code&gt;UnsafeCell&lt;/code&gt; を（コンパイル時に）可変的に借用します。これにより、唯一の参照を所有することが保証されます。</target>
        </trans-unit>
        <trans-unit id="07dea4d9325843f5f46d2875aa2d7fc09a6140cf" translate="yes" xml:space="preserve">
          <source>This call is similar to &lt;a href=&quot;#method.get_mut&quot;&gt;&lt;code&gt;get_mut&lt;/code&gt;&lt;/a&gt; but more specialized. It borrows &lt;code&gt;RefCell&lt;/code&gt; mutably to ensure no borrows exist and then resets the state tracking shared borrows. This is relevant if some &lt;code&gt;Ref&lt;/code&gt; or &lt;code&gt;RefMut&lt;/code&gt; borrows have been leaked.</source>
          <target state="translated">この呼び出しは&lt;a href=&quot;#method.get_mut&quot;&gt; &lt;code&gt;get_mut&lt;/code&gt; に&lt;/a&gt;似ていますが、より特殊化されています。これは借り &lt;code&gt;RefCell&lt;/code&gt; がmutablyない借りが存在しないことを確認すると、共有借りトラッキング状態をリセットします。これは、一部の &lt;code&gt;Ref&lt;/code&gt; または &lt;code&gt;RefMut&lt;/code&gt; の借用がリークされた場合に関連します。</target>
        </trans-unit>
        <trans-unit id="bafb9cba9c70e76a1a3bb46e83a3fb5e4a1e4a73" translate="yes" xml:space="preserve">
          <source>This can also be thought of as the fallible form of &lt;a href=&quot;#method.for_each&quot;&gt;&lt;code&gt;for_each()&lt;/code&gt;&lt;/a&gt; or as the stateless version of &lt;a href=&quot;#method.try_fold&quot;&gt;&lt;code&gt;try_fold()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これは、&lt;a href=&quot;#method.for_each&quot;&gt; &lt;code&gt;for_each()&lt;/code&gt; の&lt;/a&gt;誤った形式、または&lt;a href=&quot;#method.try_fold&quot;&gt; &lt;code&gt;try_fold()&lt;/code&gt; の&lt;/a&gt;ステートレスバージョンと考えることもできます。</target>
        </trans-unit>
        <trans-unit id="561a3555fef68cbba4ae35243cef025c7f810a34" translate="yes" xml:space="preserve">
          <source>This can also be thought of as the fallible form of &lt;a href=&quot;trait.iterator#method.for_each&quot;&gt;&lt;code&gt;for_each()&lt;/code&gt;&lt;/a&gt; or as the stateless version of &lt;a href=&quot;trait.iterator#method.try_fold&quot;&gt;&lt;code&gt;try_fold()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これは、&lt;a href=&quot;trait.iterator#method.for_each&quot;&gt; &lt;code&gt;for_each()&lt;/code&gt; の&lt;/a&gt;フォールブル形式、または&lt;a href=&quot;trait.iterator#method.try_fold&quot;&gt; &lt;code&gt;try_fold()&lt;/code&gt; の&lt;/a&gt;ステートレスバージョンと考えることもできます。</target>
        </trans-unit>
        <trans-unit id="dc5e7768aa508543b82b361f251df561c08e6d32" translate="yes" xml:space="preserve">
          <source>This can also be used in multithreaded applications, in order to send a message to other threads warning that a thread has panicked (e.g., for monitoring purposes).</source>
          <target state="translated">これはマルチスレッドアプリケーションでも使用でき、スレッドがパニックに陥ったことを警告するメッセージを他のスレッドに送ることができます (監視目的など)。</target>
        </trans-unit>
        <trans-unit id="3ff7f3a5aeb76318844d8c8fdfdc79fcab462b99" translate="yes" xml:space="preserve">
          <source>This can also happen when using a type implementing &lt;code&gt;Fn&lt;/code&gt; or &lt;code&gt;FnMut&lt;/code&gt;, as neither allows moving out of them (they usually represent closures which can be called more than once). Much of the text following applies equally well to non-&lt;code&gt;FnOnce&lt;/code&gt; closure bodies.</source>
          <target state="translated">これは、 &lt;code&gt;Fn&lt;/code&gt; または &lt;code&gt;FnMut&lt;/code&gt; を実装する型を使用している場合にも発生する可能性があります。どちらもそれらから移動できないためです（通常、これらは複数回呼び出すことができるクロージャを表します）。以下のテキストの多くは、 &lt;code&gt;FnOnce&lt;/code&gt; 以外のクロージャーボディにも同様に当てはまります。</target>
        </trans-unit>
        <trans-unit id="115ef26a79f6ceeca6376e7547342f4fb025dc8d" translate="yes" xml:space="preserve">
          <source>This can be cast to a pointer of any kind. Ensure that the access is unique (no active references, mutable or not) when casting to &lt;code&gt;&amp;amp;mut T&lt;/code&gt;, and ensure that there are no mutations or mutable aliases going on when casting to &lt;code&gt;&amp;amp;T&lt;/code&gt;</source>
          <target state="translated">これは、あらゆる種類のポインタにキャストできます。 &lt;code&gt;&amp;amp;mut T&lt;/code&gt; にキャストするときにアクセスが一意であること（アクティブな参照がない、変更可能かどうか）、および &lt;code&gt;&amp;amp;T&lt;/code&gt; にキャストするときに変更または変更可能なエイリアスがないことを確認してください</target>
        </trans-unit>
        <trans-unit id="214edc09ead3c27edfef862878240910ed92a93e" translate="yes" xml:space="preserve">
          <source>This can be constructed by the &lt;a href=&quot;struct.formatter#method.debug_list&quot;&gt;&lt;code&gt;Formatter::debug_list&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">これは&lt;a href=&quot;struct.formatter#method.debug_list&quot;&gt; &lt;code&gt;Formatter::debug_list&lt;/code&gt; &lt;/a&gt;メソッドで作成できます。</target>
        </trans-unit>
        <trans-unit id="c7514961910752b90460d88f227b5817215d7f6e" translate="yes" xml:space="preserve">
          <source>This can be constructed by the &lt;a href=&quot;struct.formatter#method.debug_map&quot;&gt;&lt;code&gt;Formatter::debug_map&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">これは&lt;a href=&quot;struct.formatter#method.debug_map&quot;&gt; &lt;code&gt;Formatter::debug_map&lt;/code&gt; &lt;/a&gt;メソッドで構築できます。</target>
        </trans-unit>
        <trans-unit id="db45b1697100bb4357e93b4848fb22d93091bccd" translate="yes" xml:space="preserve">
          <source>This can be constructed by the &lt;a href=&quot;struct.formatter#method.debug_set&quot;&gt;&lt;code&gt;Formatter::debug_set&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">これは&lt;a href=&quot;struct.formatter#method.debug_set&quot;&gt; &lt;code&gt;Formatter::debug_set&lt;/code&gt; &lt;/a&gt;メソッドで構築できます。</target>
        </trans-unit>
        <trans-unit id="efbf03337e671dc0f2d75f1c2d72ed7746b99e34" translate="yes" xml:space="preserve">
          <source>This can be constructed by the &lt;a href=&quot;struct.formatter#method.debug_struct&quot;&gt;&lt;code&gt;Formatter::debug_struct&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">これは&lt;a href=&quot;struct.formatter#method.debug_struct&quot;&gt; &lt;code&gt;Formatter::debug_struct&lt;/code&gt; &lt;/a&gt;メソッドで構築できます。</target>
        </trans-unit>
        <trans-unit id="daed88198496b5861ca72aa01db8f1e07a7a1fbc" translate="yes" xml:space="preserve">
          <source>This can be constructed by the &lt;a href=&quot;struct.formatter#method.debug_tuple&quot;&gt;&lt;code&gt;Formatter::debug_tuple&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">これは&lt;a href=&quot;struct.formatter#method.debug_tuple&quot;&gt; &lt;code&gt;Formatter::debug_tuple&lt;/code&gt; &lt;/a&gt;メソッドで作成できます。</target>
        </trans-unit>
        <trans-unit id="f00711c55f275b9886eb0ce781693c9e5c9caed4" translate="yes" xml:space="preserve">
          <source>This can be resolved by changing the type annotation or removing it entirely if it can be inferred.</source>
          <target state="translated">これは、型のアノテーションを変更するか、推測できる場合は完全に削除することで解決できます。</target>
        </trans-unit>
        <trans-unit id="21c003ed23b457ffebe1b7112c3e64636889beae" translate="yes" xml:space="preserve">
          <source>This can be used to avoid allocations in the most trivial case.</source>
          <target state="translated">これは、最も些細なケースでの割り当てを回避するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="2479ae89d6780ca289ef37404c0461658bc53872" translate="yes" xml:space="preserve">
          <source>This can be used to compare &lt;code&gt;&amp;amp;T&lt;/code&gt; references (which coerce to &lt;code&gt;*const T&lt;/code&gt; implicitly) by their address rather than comparing the values they point to (which is what the &lt;code&gt;PartialEq for &amp;amp;T&lt;/code&gt; implementation does).</source>
          <target state="translated">これは、 &lt;code&gt;&amp;amp;T&lt;/code&gt; 参照（ &lt;code&gt;*const T&lt;/code&gt; に暗黙的に強制される）を、それらが指す値（ &lt;code&gt;PartialEq for &amp;amp;T&lt;/code&gt; 実装のPartialEqが行うこと）を比較するのではなく、アドレスで比較するために使用できます。</target>
        </trans-unit>
        <trans-unit id="b3720c96ba6b1476408a923be1876044bc567298" translate="yes" xml:space="preserve">
          <source>This can be used to compare enums that carry data, while disregarding the actual data:</source>
          <target state="translated">これは、実際のデータを無視して、データを運ぶ列挙型を比較するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="27925db5758baea8a7b4ada29852f78f4d3d7a94" translate="yes" xml:space="preserve">
          <source>This can be used to handle errors that would otherwise only be caught when the &lt;code&gt;File&lt;/code&gt; is closed. Dropping a file will ignore errors in synchronizing this in-memory data.</source>
          <target state="translated">これは、 &lt;code&gt;File&lt;/code&gt; が閉じられたときにのみキャッチされるエラーを処理するために使用できます。ファイルを削除すると、このメモリ内データを同期する際のエラーは無視されます。</target>
        </trans-unit>
        <trans-unit id="9856559b29a29e0f25c3e61f2c093f50c7905e19" translate="yes" xml:space="preserve">
          <source>This can be used to hash a &lt;code&gt;&amp;amp;T&lt;/code&gt; reference (which coerces to &lt;code&gt;*const T&lt;/code&gt; implicitly) by its address rather than the value it points to (which is what the &lt;code&gt;Hash for &amp;amp;T&lt;/code&gt; implementation does).</source>
          <target state="translated">これは、 &lt;code&gt;&amp;amp;T&lt;/code&gt; 参照が指す値（これは &lt;code&gt;Hash for &amp;amp;T&lt;/code&gt; 実装のハッシュです）ではなく、アドレスによって＆T参照（ &lt;code&gt;*const T&lt;/code&gt; に暗黙的に強制される）をハッシュするために使用できます。</target>
        </trans-unit>
        <trans-unit id="13a7b507773148ef054095424c9d9ac4d8251d3e" translate="yes" xml:space="preserve">
          <source>This can be used to safely get a strong reference (by calling &lt;a href=&quot;struct.weak#method.upgrade&quot;&gt;&lt;code&gt;upgrade&lt;/code&gt;&lt;/a&gt; later) or to deallocate the weak count by dropping the &lt;code&gt;Weak&amp;lt;T&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">これは、（後で&lt;a href=&quot;struct.weak#method.upgrade&quot;&gt; &lt;code&gt;upgrade&lt;/code&gt; &lt;/a&gt;を呼び出すことによって）強力な参照を安全に取得するため、または &lt;code&gt;Weak&amp;lt;T&amp;gt;&lt;/code&gt; 削除して弱いカウントの割り当てを解除するために使用できます。</target>
        </trans-unit>
        <trans-unit id="fb4c5fc4f14344c508855aa0c67808589d2ea5df" translate="yes" xml:space="preserve">
          <source>This can be useful if you are prototyping and are just looking to have your code type-check, or if you're implementing a trait that requires multiple methods, and you're only planning on using one of them.</source>
          <target state="translated">これは、プロトタイピングをしていて、コードのタイプチェックをしてもらいたい場合や、複数のメソッドを必要とする形質を実装していて、そのうちの1つだけを使う予定の場合に便利です。</target>
        </trans-unit>
        <trans-unit id="1ab14e32989b6a2b12b8a3fb1b8ae13359f650e9" translate="yes" xml:space="preserve">
          <source>This can be useful if you are prototyping and are just looking to have your code typecheck.</source>
          <target state="translated">これは、プロトタイピングをしていて、コードをタイプチェックしたいだけの場合に便利です。</target>
        </trans-unit>
        <trans-unit id="13e97c3892555defded3caf3fd786d6a9bf7c197" translate="yes" xml:space="preserve">
          <source>This can be useful if you are prototyping and are just looking to have your code typecheck. &lt;code&gt;todo!&lt;/code&gt; works exactly like &lt;code&gt;unimplemented!&lt;/code&gt;. The only difference between the two macros is the name.</source>
          <target state="translated">これは、プロトタイプを作成していて、コードのタイプチェックを行うだけの場合に役立ちます。 &lt;code&gt;todo!&lt;/code&gt; &lt;code&gt;unimplemented!&lt;/code&gt; ように動作します！。2つのマクロの唯一の違いは名前です。</target>
        </trans-unit>
        <trans-unit id="8c8e1855be0fe981425a92585a82ff10846bce81" translate="yes" xml:space="preserve">
          <source>This can be useful when we want to access a &lt;code&gt;MaybeUninit&lt;/code&gt; that has been initialized but don't have ownership of the &lt;code&gt;MaybeUninit&lt;/code&gt; (preventing the use of &lt;code&gt;.assume_init()&lt;/code&gt;).</source>
          <target state="translated">これは、初期化されているが &lt;code&gt;MaybeUninit&lt;/code&gt; の所有権を持たない &lt;code&gt;MaybeUninit&lt;/code&gt; にアクセスする場合に &lt;code&gt;.assume_init()&lt;/code&gt; 使用を防止します）。</target>
        </trans-unit>
        <trans-unit id="1ab94494ce69e91c90f0acb5a81528e74b707291" translate="yes" xml:space="preserve">
          <source>This can never cause a problem in safe code because implementing a type that relies on pinning requires unsafe code, but be aware that deciding to make use of pinning in your type (for example by implementing some operation on &lt;a href=&quot;struct.pin&quot;&gt;&lt;code&gt;Pin&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;&amp;amp;Self&amp;gt;&lt;/code&gt; or &lt;a href=&quot;struct.pin&quot;&gt;&lt;code&gt;Pin&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;&amp;amp;mut Self&amp;gt;&lt;/code&gt;) has consequences for your &lt;a href=&quot;../ops/trait.drop#tymethod.drop&quot;&gt;&lt;code&gt;Drop&lt;/code&gt;&lt;/a&gt; implementation as well: if an element of your type could have been pinned, you must treat &lt;a href=&quot;../ops/trait.drop#tymethod.drop&quot;&gt;&lt;code&gt;Drop&lt;/code&gt;&lt;/a&gt; as implicitly taking &lt;a href=&quot;struct.pin&quot;&gt;&lt;code&gt;Pin&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;&amp;amp;mut Self&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">固定に依存する型を実装するには安全でないコードが必要になるため、これによって安全なコードで問題が発生することはありませんが、型で固定を使用することを決定することに注意してください（たとえば、&lt;a href=&quot;struct.pin&quot;&gt; &lt;code&gt;Pin&lt;/code&gt; &lt;/a&gt; &lt;code&gt;&amp;lt;&amp;amp;Self&amp;gt;&lt;/code&gt; または&lt;a href=&quot;struct.pin&quot;&gt; &lt;code&gt;Pin&lt;/code&gt; &lt;/a&gt; &lt;code&gt;&amp;lt;&amp;amp;mut Self&amp;gt;&lt;/code&gt; 何らかの操作を実装することによって）Self&amp;gt;）は、&lt;a href=&quot;../ops/trait.drop#tymethod.drop&quot;&gt; &lt;code&gt;Drop&lt;/code&gt; の&lt;/a&gt;実装にも影響を及ぼします。タイプの要素が固定されている可能性がある場合は、&lt;a href=&quot;../ops/trait.drop#tymethod.drop&quot;&gt; &lt;code&gt;Drop&lt;/code&gt; &lt;/a&gt;を暗黙的に&lt;a href=&quot;struct.pin&quot;&gt; &lt;code&gt;Pin&lt;/code&gt; &lt;/a&gt; &lt;code&gt;&amp;lt;&amp;amp;mut Self&amp;gt;&lt;/code&gt; を取るものとして扱う必要があります。</target>
        </trans-unit>
        <trans-unit id="b8075fc432fec0682f4342dc70f37276a8d8a19f" translate="yes" xml:space="preserve">
          <source>This can never cause a problem in safe code because implementing a type that relies on pinning requires unsafe code, but be aware that deciding to make use of pinning in your type (for example by implementing some operation on &lt;code&gt;Pin&amp;lt;&amp;amp;Self&amp;gt;&lt;/code&gt; or &lt;code&gt;Pin&amp;lt;&amp;amp;mut Self&amp;gt;&lt;/code&gt;) has consequences for your &lt;code&gt;Drop&lt;/code&gt; implementation as well: if an element of your type could have been pinned, you must treat Drop as implicitly taking &lt;code&gt;Pin&amp;lt;&amp;amp;mut Self&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">ピン留めに依存する型を実装することは安全でないコードを必要とするため、これが安全なコードで問題を引き起こすことは決してありませんが、（たとえば、 &lt;code&gt;Pin&amp;lt;&amp;amp;Self&amp;gt;&lt;/code&gt; または &lt;code&gt;Pin&amp;lt;&amp;amp;mut Self&amp;gt;&lt;/code&gt; 何らかの操作を実装することによって）タイプでピン留めを利用することを決定することに注意してくださいSelf&amp;gt;）も &lt;code&gt;Drop&lt;/code&gt; 実装に影響を与えます。自分のタイプの要素が固定されている可能性がある場合、Dropを暗黙的に &lt;code&gt;Pin&amp;lt;&amp;amp;mut Self&amp;gt;&lt;/code&gt; として扱う必要があります。</target>
        </trans-unit>
        <trans-unit id="cadc6079abb6a4bbc592c234ce0da222e1a2fdc1" translate="yes" xml:space="preserve">
          <source>This change unifies all the calls to &lt;code&gt;simulated_expensive_calculation&lt;/code&gt; and solves the problem of the first &lt;code&gt;if&lt;/code&gt; block unnecessarily calling the function twice. Unfortunately, we&amp;rsquo;re now calling this function and waiting for the result in all cases, which includes the inner &lt;code&gt;if&lt;/code&gt; block that doesn&amp;rsquo;t use the result value at all.</source>
          <target state="translated">この変更により、 &lt;code&gt;simulated_expensive_calculation&lt;/code&gt; へのすべての呼び出しが統合され、ブロックが関数を不必要に2回呼び出した &lt;code&gt;if&lt;/code&gt; の最初の問題が解決されます。残念ながら、この関数を呼び出して、すべてのケースで結果を待機しています。これには、結果の値をまったく使用しない内部の &lt;code&gt;if&lt;/code&gt; ブロックが含まれます。</target>
        </trans-unit>
        <trans-unit id="d160910b055fc36b0155788ef2b0b90383b734d2" translate="yes" xml:space="preserve">
          <source>This channel has an internal buffer on which messages will be queued. &lt;code&gt;bound&lt;/code&gt; specifies the buffer size. When the internal buffer becomes full, future sends will &lt;em&gt;block&lt;/em&gt; waiting for the buffer to open up. Note that a buffer size of 0 is valid, in which case this becomes &quot;rendezvous channel&quot; where each &lt;a href=&quot;struct.syncsender#method.send&quot;&gt;&lt;code&gt;send&lt;/code&gt;&lt;/a&gt; will not return until a &lt;a href=&quot;struct.receiver#method.recv&quot;&gt;&lt;code&gt;recv&lt;/code&gt;&lt;/a&gt; is paired with it.</source>
          <target state="translated">このチャネルには、メッセージがキューに入れられる内部バッファがあります。 &lt;code&gt;bound&lt;/code&gt; はバッファサイズを指定します。内部バッファーがいっぱいになると、将来の送信はバッファーが開くのを待って&lt;em&gt;ブロック&lt;/em&gt;します。バッファサイズ0は有効であることに注意してください。この場合、これは「ランデブーチャネル」になり、&lt;a href=&quot;struct.receiver#method.recv&quot;&gt; &lt;code&gt;recv&lt;/code&gt; &lt;/a&gt;がペアになるまで各&lt;a href=&quot;struct.syncsender#method.send&quot;&gt; &lt;code&gt;send&lt;/code&gt; &lt;/a&gt;は戻りません。</target>
        </trans-unit>
        <trans-unit id="fb1d7eb08fcc70de9ba8181af70c6fc4dce88829" translate="yes" xml:space="preserve">
          <source>This chapter covered how to use smart pointers to make different guarantees and trade-offs from those Rust makes by default with regular references. The &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; type has a known size and points to data allocated on the heap. The &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; type keeps track of the number of references to data on the heap so that data can have multiple owners. The &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; type with its interior mutability gives us a type that we can use when we need an immutable type but need to change an inner value of that type; it also enforces the borrowing rules at runtime instead of at compile time.</source>
          <target state="translated">この章では、スマートポインターを使用して、Rustが通常の参照でデフォルトで行うものとは異なる保証とトレードオフを作成する方法について説明しました。 &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; 型はヒープ上に割り当てられたデータに既知のサイズおよび点を有します。 &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; 、データが複数の所有者を持つことができますので、タイプは、ヒープ上のデータへの参照の数を追跡します。内部の &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; 型は、不変の型が必要であるがその型の内部値を変更する必要がある場合に使用できる型を提供します。また、コンパイル時ではなく実行時に借用ルールを適用します。</target>
        </trans-unit>
        <trans-unit id="d76b58ff9e32a83f32bdf3cb1438b47bc33ded06" translate="yes" xml:space="preserve">
          <source>This chapter covers concepts that appear in almost every programming language and how they work in Rust. Many programming languages have much in common at their core. None of the concepts presented in this chapter are unique to Rust, but we&amp;rsquo;ll discuss them in the context of Rust and explain the conventions around using these concepts.</source>
          <target state="translated">この章では、ほとんどすべてのプログラミング言語に見られる概念と、Rustでどのように機能するかについて説明します。多くのプログラミング言語のコアには多くの共通点があります。この章で説明する概念はRustに固有のものはありませんが、Rustのコンテキストでそれらについて説明し、これらの概念の使用に関する規則について説明します。</target>
        </trans-unit>
        <trans-unit id="29ea0fbfb2601396e36f35e6ef2ff2eccf09482a" translate="yes" xml:space="preserve">
          <source>This chapter is a recap of the many skills you&amp;rsquo;ve learned so far and an exploration of a few more standard library features. We&amp;rsquo;ll build a command line tool that interacts with file and command line input/output to practice some of the Rust concepts you now have under your belt.</source>
          <target state="translated">この章では、これまでに学んだ多くのスキルの要約と、さらにいくつかの標準ライブラリ機能の探索について説明します。ファイルとコマンドラインの入出力を操作するコマンドラインツールを構築して、現在持っているRustの概念のいくつかを実践します。</target>
        </trans-unit>
        <trans-unit id="ba9d120769583a2b06ff5bcafb1b013c4c1c420a" translate="yes" xml:space="preserve">
          <source>This chapter is a reference on all things related to patterns. We&amp;rsquo;ll cover the valid places to use patterns, the difference between refutable and irrefutable patterns, and the different kinds of pattern syntax that you might see. By the end of the chapter, you&amp;rsquo;ll know how to use patterns to express many concepts in a clear way.</source>
          <target state="translated">この章は、パターンに関連するすべてのもののリファレンスです。パターンを使用する有効な場所、反駁可能なパターンと反駁できないパターンの違い、およびさまざまな種類のパターン構文について説明します。この章の終わりには、パターンを使用して多くの概念を明確に表現する方法がわかります。</target>
        </trans-unit>
        <trans-unit id="4ca695707d3d924a4c7520a559258f62a52be801" translate="yes" xml:space="preserve">
          <source>This chapter recapped some of the major concepts you&amp;rsquo;ve learned so far and covered how to perform common I/O operations in Rust. By using command line arguments, files, environment variables, and the &lt;code&gt;eprintln!&lt;/code&gt; macro for printing errors, you&amp;rsquo;re now prepared to write command line applications. By using the concepts in previous chapters, your code will be well organized, store data effectively in the appropriate data structures, handle errors nicely, and be well tested.</source>
          <target state="translated">この章では、これまでに学習した主な概念の一部を要約し、Rustで一般的なI / O操作を実行する方法について説明しました。コマンドライン引数、ファイル、環境変数、 &lt;code&gt;eprintln!&lt;/code&gt; エラーを印刷するためのマクロを使用して、コマンドラインアプリケーションを作成する準備が整いました。前の章の概念を使用することにより、コードは適切に編成され、適切なデータ構造にデータを効果的に格納し、エラーを適切に処理し、十分にテストされます。</target>
        </trans-unit>
        <trans-unit id="4f14f23451903925edc1325ae4f6812d472301ab" translate="yes" xml:space="preserve">
          <source>This closure will be run in the context of the child process after a &lt;code&gt;fork&lt;/code&gt;. This primarily means that any modifications made to memory on behalf of this closure will &lt;strong&gt;not&lt;/strong&gt; be visible to the parent process. This is often a very constrained environment where normal operations like &lt;code&gt;malloc&lt;/code&gt; or acquiring a mutex are not guaranteed to work (due to other threads perhaps still running when the &lt;code&gt;fork&lt;/code&gt; was run).</source>
          <target state="translated">このクロージャーは &lt;code&gt;fork&lt;/code&gt; の後で子プロセスのコンテキストで実行されます。これは主に、このクロージャーのためにメモリに加えられた変更は、親プロセスには見え&lt;strong&gt;ない&lt;/strong&gt;ことを意味します。これは非常に制約された環境であることが多く、 &lt;code&gt;malloc&lt;/code&gt; やmutexの取得などの通常の操作が動作することが保証されていません（ &lt;code&gt;fork&lt;/code&gt; が実行されたときにおそらく他のスレッドがまだ実行されているため）。</target>
        </trans-unit>
        <trans-unit id="22a1461b442324db65b2ce2aa52db0c09471bd28" translate="yes" xml:space="preserve">
          <source>This code also sets &lt;code&gt;s&lt;/code&gt; to &lt;code&gt;tic-tac-toe&lt;/code&gt;. The &lt;code&gt;format!&lt;/code&gt; macro works in the same way as &lt;code&gt;println!&lt;/code&gt;, but instead of printing the output to the screen, it returns a &lt;code&gt;String&lt;/code&gt; with the contents. The version of the code using &lt;code&gt;format!&lt;/code&gt; is much easier to read and doesn&amp;rsquo;t take ownership of any of its parameters.</source>
          <target state="translated">このコードは、 &lt;code&gt;s&lt;/code&gt; を &lt;code&gt;tic-tac-toe&lt;/code&gt; にも設定します。 &lt;code&gt;format!&lt;/code&gt; マクロは &lt;code&gt;println!&lt;/code&gt; と同じように機能します！ただし、出力を画面に出力する代わりに、内容を含む &lt;code&gt;String&lt;/code&gt; を返します。 &lt;code&gt;format!&lt;/code&gt; を使用したコードのバージョン！読みやすく、そのパラメータの所有権を持ちません。</target>
        </trans-unit>
        <trans-unit id="d361c400527932085f404cf9d818fa511cfc4bc4" translate="yes" xml:space="preserve">
          <source>This code block contains unsafe code.</source>
          <target state="translated">このコードブロックには安全でないコードが含まれています。</target>
        </trans-unit>
        <trans-unit id="d2b577d02f895994167db7646bcb5bc51980294d" translate="yes" xml:space="preserve">
          <source>This code compiles and runs but doesn&amp;rsquo;t result in the desired threading behavior: a slow request will still cause other requests to wait to be processed. The reason is somewhat subtle: the &lt;code&gt;Mutex&lt;/code&gt; struct has no public &lt;code&gt;unlock&lt;/code&gt; method because the ownership of the lock is based on the lifetime of the &lt;code&gt;MutexGuard&amp;lt;T&amp;gt;&lt;/code&gt; within the &lt;code&gt;LockResult&amp;lt;MutexGuard&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt; that the &lt;code&gt;lock&lt;/code&gt; method returns. At compile time, the borrow checker can then enforce the rule that a resource guarded by a &lt;code&gt;Mutex&lt;/code&gt; cannot be accessed unless we hold the lock. But this implementation can also result in the lock being held longer than intended if we don&amp;rsquo;t think carefully about the lifetime of the &lt;code&gt;MutexGuard&amp;lt;T&amp;gt;&lt;/code&gt;. Because the values in the &lt;code&gt;while let&lt;/code&gt; expression remain in scope for the duration of the block, the lock remains held for the duration of the call to &lt;code&gt;job()&lt;/code&gt;, meaning other workers cannot receive jobs.</source>
          <target state="translated">このコードはコンパイルされて実行されますが、目的のスレッド動作にはなりません。リクエストが遅いと、他のリクエストが処理されるのを待つことになります。理由はやや微妙です。 &lt;code&gt;unlock&lt;/code&gt; の所有権は、 &lt;code&gt;lock&lt;/code&gt; メソッドが返す &lt;code&gt;LockResult&amp;lt;MutexGuard&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt; 内の &lt;code&gt;MutexGuard&amp;lt;T&amp;gt;&lt;/code&gt; 存続期間に基づいているため、 &lt;code&gt;Mutex&lt;/code&gt; 構造体にはパブリックロック解除メソッドがありません。コンパイル時に、ボローチェッカーは、ロックを保持しない限り、 &lt;code&gt;Mutex&lt;/code&gt; によって保護されているリソースにアクセスできないというルールを適用できます。ただし、この実装では、 &lt;code&gt;MutexGuard&amp;lt;T&amp;gt;&lt;/code&gt; 存続期間について慎重に検討しないと、ロックが意図したよりも長く保持される可能性もあります。。 &lt;code&gt;while let&lt;/code&gt; 式の値は、ブロックの期間中スコープ内にとどまるため、 &lt;code&gt;job()&lt;/code&gt; の呼び出しの間、ロックは保持されたままになります。つまり、他のワーカーはジョブを受け取ることができません。</target>
        </trans-unit>
        <trans-unit id="8be923288a70fe6e854b5bc75a5a5f3ea2e87376" translate="yes" xml:space="preserve">
          <source>This code compiles and runs but doesn&amp;rsquo;t result in the desired threading behavior: a slow request will still cause other requests to wait to be processed. The reason is somewhat subtle: the &lt;code&gt;Mutex&lt;/code&gt; struct has no public &lt;code&gt;unlock&lt;/code&gt; method because the ownership of the lock is based on the lifetime of the &lt;code&gt;MutexGuard&amp;lt;T&amp;gt;&lt;/code&gt; within the &lt;code&gt;LockResult&amp;lt;MutexGuard&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt; that the &lt;code&gt;lock&lt;/code&gt; method returns. At compile time, the borrow checker can then enforce the rule that a resource guarded by a &lt;code&gt;Mutex&lt;/code&gt; cannot be accessed unless we hold the lock. But this implementation can also result in the lock being held longer than intended if we don&amp;rsquo;t think carefully about the lifetime of the &lt;code&gt;MutexGuard&amp;lt;T&amp;gt;&lt;/code&gt;. Because the values in the &lt;code&gt;while&lt;/code&gt; expression remain in scope for the duration of the block, the lock remains held for the duration of the call to &lt;code&gt;job.call_box()&lt;/code&gt;, meaning other workers cannot receive jobs.</source>
          <target state="translated">このコードはコンパイルされて実行されますが、望ましいスレッド動作にはなりません。要求が遅いと、他の要求の処理が待機します。理由はやや微妙です。 &lt;code&gt;unlock&lt;/code&gt; の所有権は、 &lt;code&gt;lock&lt;/code&gt; メソッドが返す &lt;code&gt;LockResult&amp;lt;MutexGuard&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt; 内の &lt;code&gt;MutexGuard&amp;lt;T&amp;gt;&lt;/code&gt; 存続期間に基づいているため、 &lt;code&gt;Mutex&lt;/code&gt; 構造体にはpublic unlockメソッドがありません。コンパイル時に、借用チェッカーは、ロックを保持しない限り、 &lt;code&gt;Mutex&lt;/code&gt; によって保護されているリソースにアクセスできないという規則を適用できます。しかし、この実装では、 &lt;code&gt;MutexGuard&amp;lt;T&amp;gt;&lt;/code&gt; 有効期間を注意深く考慮しないと、意図したよりも長くロックが保持される可能性があります。。 &lt;code&gt;while&lt;/code&gt; 式の値はブロックの期間中はスコープ内に留まるため、 &lt;code&gt;job.call_box()&lt;/code&gt; の呼び出し中はロックが保持されたままになるため、他のワーカーはジョブを受信できません。</target>
        </trans-unit>
        <trans-unit id="a9ddcc8d0db1cdd5bd0507394434501db1a0bedf" translate="yes" xml:space="preserve">
          <source>This code contains a lot of information, so let&amp;rsquo;s go over it line by line. To obtain user input and then print the result as output, we need to bring the &lt;code&gt;io&lt;/code&gt; (input/output) library into scope. The &lt;code&gt;io&lt;/code&gt; library comes from the standard library (which is known as &lt;code&gt;std&lt;/code&gt;):</source>
          <target state="translated">このコードには多くの情報が含まれているため、1行ずつ見ていきましょう。ユーザー入力を取得し、その結果を出力として印刷するには、 &lt;code&gt;io&lt;/code&gt; （入力/出力）ライブラリをスコープに含める必要があります。 &lt;code&gt;io&lt;/code&gt; ライブラリは、（として知られている標準ライブラリから来ている &lt;code&gt;std&lt;/code&gt; ）：</target>
        </trans-unit>
        <trans-unit id="a2cf7c9b3ea591cd958e0136c121e6bf9f333d13" translate="yes" xml:space="preserve">
          <source>This code creates a string containing &lt;code&gt;initial contents&lt;/code&gt;.</source>
          <target state="translated">このコードは、 &lt;code&gt;initial contents&lt;/code&gt; を含む文字列を作成します。</target>
        </trans-unit>
        <trans-unit id="37eb73353618177bcb3ef1d909b78d97976287b7" translate="yes" xml:space="preserve">
          <source>This code creates the variables &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; that match the values of the &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; fields of the &lt;code&gt;p&lt;/code&gt; struct. This example shows that the names of the variables in the pattern don&amp;rsquo;t have to match the field names of the struct. But it&amp;rsquo;s common to want the variable names to match the field names to make it easier to remember which variables came from which fields.</source>
          <target state="translated">このコードは、 &lt;code&gt;p&lt;/code&gt; 構造体の &lt;code&gt;x&lt;/code&gt; および &lt;code&gt;y&lt;/code&gt; フィールドの値と一致する変数 &lt;code&gt;a&lt;/code&gt; および &lt;code&gt;b&lt;/code&gt; を作成します。この例は、パターン内の変数の名前が構造体のフィールド名と一致する必要がないことを示しています。ただし、変数名をフィールド名と一致させて、どの変数がどのフィールドからのものかを簡単に思い出せるようにするのが一般的です。</target>
        </trans-unit>
        <trans-unit id="4c6b27e7fab9563bf2abcf70ff023ebf232f1887" translate="yes" xml:space="preserve">
          <source>This code creates the variables &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; that match the &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; fields of the &lt;code&gt;p&lt;/code&gt; variable. The outcome is that the variables &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; contain the values from the &lt;code&gt;p&lt;/code&gt; struct.</source>
          <target state="translated">このコードは、 &lt;code&gt;p&lt;/code&gt; 変数の &lt;code&gt;x&lt;/code&gt; および &lt;code&gt;y&lt;/code&gt; フィールドに一致する変数 &lt;code&gt;x&lt;/code&gt; および &lt;code&gt;y&lt;/code&gt; を作成します。その結果、変数 &lt;code&gt;x&lt;/code&gt; および &lt;code&gt;y&lt;/code&gt; には、 &lt;code&gt;p&lt;/code&gt; 構造体からの値が含まれます。</target>
        </trans-unit>
        <trans-unit id="519fd3df45d223b502667d31300a65c73f22de3a" translate="yes" xml:space="preserve">
          <source>This code does not compile!</source>
          <target state="translated">このコードはコンパイルできません。</target>
        </trans-unit>
        <trans-unit id="a8563da8c7fd875eb235c5cf17bc917dd4b6aba0" translate="yes" xml:space="preserve">
          <source>This code does not produce the desired behavior.</source>
          <target state="translated">このコードは、希望する動作を生成しません。</target>
        </trans-unit>
        <trans-unit id="0426964d440764948892b9452f7b1a751866e79c" translate="yes" xml:space="preserve">
          <source>This code illustrates that you can put any kind of data inside an enum variant: strings, numeric types, or structs, for example. You can even include another enum! Also, standard library types are often not much more complicated than what you might come up with.</source>
          <target state="translated">このコードは、文字列、数値型、構造体など、あらゆる種類のデータを enum バリアントの中に入れることができることを示しています。例えば、文字列、数値型、構造体などです。また、標準ライブラリの型は、あなたが思いつくものよりもそれほど複雑ではないことが多いです。</target>
        </trans-unit>
        <trans-unit id="23d4be6e177cb0763cfd5315e376249487e60755" translate="yes" xml:space="preserve">
          <source>This code is a bit messy, but it&amp;rsquo;s good enough for simulation purposes. We created a second request &lt;code&gt;sleep&lt;/code&gt;, whose data our server recognizes. We added an &lt;code&gt;else if&lt;/code&gt; after the &lt;code&gt;if&lt;/code&gt; block to check for the request to &lt;em&gt;/sleep&lt;/em&gt;. When that request is received, the server will sleep for 5 seconds before rendering the successful HTML page.</source>
          <target state="translated">このコードは少し面倒ですが、シミュレーションの目的には十分です。2番目のリクエスト &lt;code&gt;sleep&lt;/code&gt; を作成しました。このデータはサーバーが認識します。 &lt;code&gt;if&lt;/code&gt; ブロックの後に &lt;code&gt;else if&lt;/code&gt; を追加して、&lt;em&gt;/ sleep&lt;/em&gt;へのリクエストを確認しました。その要求を受信すると、サーバーは5秒間スリープしてから、正常なHTMLページをレンダリングします。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="9400019c8ed3d0b61a4a67558c972e785c9498d4" translate="yes" xml:space="preserve">
          <source>This code is a bit nicer, isn&amp;rsquo;t it?</source>
          <target state="translated">このコードはもう少しいいですね。</target>
        </trans-unit>
        <trans-unit id="a9d573288ab51576cf8efa92e3fc2409e71975a4" translate="yes" xml:space="preserve">
          <source>This code is for an animal shelter that wants to name all puppies Spot, which is implemented in the &lt;code&gt;baby_name&lt;/code&gt; associated function that is defined on &lt;code&gt;Dog&lt;/code&gt;. The &lt;code&gt;Dog&lt;/code&gt; type also implements the trait &lt;code&gt;Animal&lt;/code&gt;, which describes characteristics that all animals have. Baby dogs are called puppies, and that is expressed in the implementation of the &lt;code&gt;Animal&lt;/code&gt; trait on &lt;code&gt;Dog&lt;/code&gt; in the &lt;code&gt;baby_name&lt;/code&gt; function associated with the &lt;code&gt;Animal&lt;/code&gt; trait.</source>
          <target state="translated">このコードは、すべての子犬のスポットに名前を付けたいアニマルシェルター用です。これは、 &lt;code&gt;Dog&lt;/code&gt; で定義されている &lt;code&gt;baby_name&lt;/code&gt; 関連関数に実装されています。 &lt;code&gt;Dog&lt;/code&gt; 種類もトレイトを実装 &lt;code&gt;Animal&lt;/code&gt; すべての動物が持っている特性を説明し、。赤ちゃんの犬は子犬と呼ばれ、そのはの実装で表現された &lt;code&gt;Animal&lt;/code&gt; の形質の &lt;code&gt;Dog&lt;/code&gt; で &lt;code&gt;baby_name&lt;/code&gt; のに関連した機能 &lt;code&gt;Animal&lt;/code&gt; 特性。</target>
        </trans-unit>
        <trans-unit id="28ab5f7e147cb2d4d661943464a31c7e543917cd" translate="yes" xml:space="preserve">
          <source>This code is much easier to read and write! Choosing a meaningful name for a type alias can help communicate your intent as well (&lt;em&gt;thunk&lt;/em&gt; is a word for code to be evaluated at a later time, so it&amp;rsquo;s an appropriate name for a closure that gets stored).</source>
          <target state="translated">このコードは読み書きがはるかに簡単です！タイプエイリアスに意味のある名前を選択すると、意図を伝えるのにも役立ちます（&lt;em&gt;サンク&lt;/em&gt;は、後で評価されるコードの単語なので、格納されるクロージャの適切な名前です）。</target>
        </trans-unit>
        <trans-unit id="49a0f8f422e51179065e97042cbf65579f27fccc" translate="yes" xml:space="preserve">
          <source>This code is not legal: it is not possible to specialize &lt;code&gt;Drop&lt;/code&gt; to a subset of implementations of a generic type. In order for this code to work, &lt;code&gt;MyStruct&lt;/code&gt; must also require that &lt;code&gt;T&lt;/code&gt; implements &lt;code&gt;Foo&lt;/code&gt;. Alternatively, another option is to wrap the generic type in another that specializes appropriately:</source>
          <target state="translated">このコードは正しくありません &lt;code&gt;Drop&lt;/code&gt; をジェネリック型の実装のサブセットに特化することはできません。このコードが機能するためには、 &lt;code&gt;MyStruct&lt;/code&gt; は &lt;code&gt;T&lt;/code&gt; が &lt;code&gt;Foo&lt;/code&gt; を実装することも要求する必要があります。または、別の方法として、ジェネリック型を適切に特化した別の型にラップすることもできます。</target>
        </trans-unit>
        <trans-unit id="e6419e6d86ad5d4d771d701592b7c8059bf718cc" translate="yes" xml:space="preserve">
          <source>This code is not legal: it is not possible to specialize &lt;code&gt;Drop&lt;/code&gt; to a subset of implementations of a generic type. One workaround for this is to wrap the generic type, as shown below:</source>
          <target state="translated">このコードは正しくありません &lt;code&gt;Drop&lt;/code&gt; をジェネリック型の実装のサブセットに特化することはできません。これを回避する1つの方法は、以下に示すように、ジェネリック型をラップすることです。</target>
        </trans-unit>
        <trans-unit id="7561545f94912a4c2f636ef3be71bf5e25ba09fc" translate="yes" xml:space="preserve">
          <source>This code is printing a prompt stating what the game is and requesting input from the user.</source>
          <target state="translated">このコードは、ゲームが何であるかを示すプロンプトを表示し、ユーザーに入力を要求しています。</target>
        </trans-unit>
        <trans-unit id="7103520ca1aa03619df8713fc5365e846d9c5ad3" translate="yes" xml:space="preserve">
          <source>This code is read as &amp;ldquo;the function &lt;code&gt;bar&lt;/code&gt; returns never.&amp;rdquo; Functions that return never are called &lt;em&gt;diverging functions&lt;/em&gt;. We can&amp;rsquo;t create values of the type &lt;code&gt;!&lt;/code&gt; so &lt;code&gt;bar&lt;/code&gt; can never possibly return.</source>
          <target state="translated">このコードは、「関数 &lt;code&gt;bar&lt;/code&gt; が戻ることはありません」と読み取られます。決して戻らない&lt;em&gt;関数&lt;/em&gt;は、&lt;em&gt;分岐関数&lt;/em&gt;と呼ばれ&lt;em&gt;ます&lt;/em&gt;。タイプの値を作成できません &lt;code&gt;!&lt;/code&gt; そのため、 &lt;code&gt;bar&lt;/code&gt; が戻ることはありません。</target>
        </trans-unit>
        <trans-unit id="bcd0c3078c2294c0e6fda3c229de0e1561bef882" translate="yes" xml:space="preserve">
          <source>This code is similar to &lt;a href=&quot;ch09-03-to-panic-or-not-to-panic#creating-custom-types-for-validation&quot;&gt;the &lt;code&gt;Guess::new&lt;/code&gt; function we wrote in Listing 9-10&lt;/a&gt;, where we called &lt;code&gt;panic!&lt;/code&gt; when the &lt;code&gt;value&lt;/code&gt; argument was out of the range of valid values. Instead of checking for a range of values here, we&amp;rsquo;re checking that the length of &lt;code&gt;args&lt;/code&gt; is at least 3 and the rest of the function can operate under the assumption that this condition has been met. If &lt;code&gt;args&lt;/code&gt; has fewer than three items, this condition will be true, and we call the &lt;code&gt;panic!&lt;/code&gt; macro to end the program immediately.</source>
          <target state="translated">このコードは、 &lt;code&gt;panic!&lt;/code&gt; を呼び出したコード&lt;a href=&quot;ch09-03-to-panic-or-not-to-panic#creating-custom-types-for-validation&quot;&gt;リスト9-10&lt;/a&gt;で記述した &lt;code&gt;Guess::new&lt;/code&gt; 関数に似ています。とき &lt;code&gt;value&lt;/code&gt; 引数が有効な値の範囲外でした。ここでは値の範囲をチェックする代わりに、 &lt;code&gt;args&lt;/code&gt; の長さが3以上であり、関数の残りの部分がこの条件が満たされているという前提の下で動作できることをチェックしています。 &lt;code&gt;args&lt;/code&gt; のアイテムが3つ未満の場合、この条件は真となり、 &lt;code&gt;panic!&lt;/code&gt; と呼ばれます！プログラムをすぐに終了するマクロ。</target>
        </trans-unit>
        <trans-unit id="7a83ac1e4ecf68353438d16df2a11f1d38c56035" translate="yes" xml:space="preserve">
          <source>This code is the automatically generated test module. The attribute &lt;code&gt;cfg&lt;/code&gt; stands for &lt;em&gt;configuration&lt;/em&gt; and tells Rust that the following item should only be included given a certain configuration option. In this case, the configuration option is &lt;code&gt;test&lt;/code&gt;, which is provided by Rust for compiling and running tests. By using the &lt;code&gt;cfg&lt;/code&gt; attribute, Cargo compiles our test code only if we actively run the tests with &lt;code&gt;cargo test&lt;/code&gt;. This includes any helper functions that might be within this module, in addition to the functions annotated with &lt;code&gt;#[test]&lt;/code&gt;.</source>
          <target state="translated">このコードは、自動生成されたテストモジュールです。属性 &lt;code&gt;cfg&lt;/code&gt; は&lt;em&gt;構成&lt;/em&gt;を表し、特定の構成オプションが指定されている場合にのみ次の項目を含める必要があることをRustに伝えます。この場合、構成オプションは &lt;code&gt;test&lt;/code&gt; です。これは、テストをコンパイルして実行するためにRustによって提供されます。使用することにより &lt;code&gt;cfg&lt;/code&gt; 属性を、カーゴは、我々は積極的にテストを実行する場合にのみ、我々のテストコードをコンパイルする &lt;code&gt;cargo test&lt;/code&gt; 。これには、 &lt;code&gt;#[test]&lt;/code&gt; で注釈が付けられた関数に加えて、このモジュール内にある可能性のあるヘルパー関数が含まれます。</target>
        </trans-unit>
        <trans-unit id="fb14b558eed9a012f6129027202f61756e6e0b8d" translate="yes" xml:space="preserve">
          <source>This code lets us break complex types into their component parts so we can use the values we&amp;rsquo;re interested in separately.</source>
          <target state="translated">このコードを使用すると、複雑な型をコンポーネント部分に分割できるため、必要な値を個別に使用できます。</target>
        </trans-unit>
        <trans-unit id="bf80b97b3cceef068893acf5a419fa57178f1aed" translate="yes" xml:space="preserve">
          <source>This code means the type &lt;code&gt;Point&amp;lt;f32&amp;gt;&lt;/code&gt; will have a method named &lt;code&gt;distance_from_origin&lt;/code&gt; and other instances of &lt;code&gt;Point&amp;lt;T&amp;gt;&lt;/code&gt; where &lt;code&gt;T&lt;/code&gt; is not of type &lt;code&gt;f32&lt;/code&gt; will not have this method defined. The method measures how far our point is from the point at coordinates (0.0, 0.0) and uses mathematical operations that are available only for floating point types.</source>
          <target state="translated">このコードは、型手段 &lt;code&gt;Point&amp;lt;f32&amp;gt;&lt;/code&gt; 指定されたメソッドがあります &lt;code&gt;distance_from_origin&lt;/code&gt; との他のインスタンス &lt;code&gt;Point&amp;lt;T&amp;gt;&lt;/code&gt; &lt;code&gt;T&lt;/code&gt; は、型ではない &lt;code&gt;f32&lt;/code&gt; このメソッドが定義されていないであろうが。このメソッドは、ポイントが座標（0.0、0.0）のポイントからどれだけ離れているかを測定し、浮動小数点タイプでのみ使用可能な数学演算を使用します。</target>
        </trans-unit>
        <trans-unit id="edb9c9f6097f3c4e5bd16a047b4ef0c91c5eda3e" translate="yes" xml:space="preserve">
          <source>This code overrides the default setting of &lt;code&gt;0&lt;/code&gt;. Now when we run &lt;code&gt;cargo build&lt;/code&gt;, Cargo will use the defaults for the &lt;code&gt;dev&lt;/code&gt; profile plus our customization to &lt;code&gt;opt-level&lt;/code&gt;. Because we set &lt;code&gt;opt-level&lt;/code&gt; to &lt;code&gt;1&lt;/code&gt;, Cargo will apply more optimizations than the default, but not as many as in a release build.</source>
          <target state="translated">このコードは、デフォルト設定の &lt;code&gt;0&lt;/code&gt; をオーバーライドします。これで、 &lt;code&gt;cargo build&lt;/code&gt; を実行すると、Cargoは &lt;code&gt;dev&lt;/code&gt; プロファイルのデフォルトと &lt;code&gt;opt-level&lt;/code&gt; へのカスタマイズを使用します。 &lt;code&gt;opt-level&lt;/code&gt; を &lt;code&gt;1&lt;/code&gt; に設定しているため、Cargoはデフォルトよりも多くの最適化を適用しますが、リリースビルドほど多くはありません。</target>
        </trans-unit>
        <trans-unit id="cbd474aff68e6272a4d817ab514ba2ba338dc2b1" translate="yes" xml:space="preserve">
          <source>This code panics!</source>
          <target state="translated">このコードはパニックになる!</target>
        </trans-unit>
        <trans-unit id="1520d0fd722c3577359ba16db239ceb0ddeebd5f" translate="yes" xml:space="preserve">
          <source>This code prints &lt;code&gt;1 new tweet: (Read more from @horse_ebooks...)&lt;/code&gt;.</source>
          <target state="translated">このコードは、 &lt;code&gt;1 new tweet: (Read more from @horse_ebooks...)&lt;/code&gt; 出力します（@horse_ebooksから続きを読む...）。</target>
        </trans-unit>
        <trans-unit id="6d78693e95ef2bffb056748f86ea7d4fd87f6784" translate="yes" xml:space="preserve">
          <source>This code prints &lt;code&gt;1 new tweet: horse_ebooks: of course, as you probably already know, people&lt;/code&gt;.</source>
          <target state="translated">このコードは &lt;code&gt;1 new tweet: horse_ebooks: of course, as you probably already know, people&lt;/code&gt; 出力します：horse_ebooks：もちろん、おそらくご存じのとおり、人々。</target>
        </trans-unit>
        <trans-unit id="a4e90b820e3471ed9be465d87743c5461551a7f0" translate="yes" xml:space="preserve">
          <source>This code prints &lt;code&gt;Current location: (3, 5)&lt;/code&gt;. The values &lt;code&gt;&amp;amp;(3, 5)&lt;/code&gt; match the pattern &lt;code&gt;&amp;amp;(x, y)&lt;/code&gt;, so &lt;code&gt;x&lt;/code&gt; is the value &lt;code&gt;3&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; is the value &lt;code&gt;5&lt;/code&gt;.</source>
          <target state="translated">このコードは、 &lt;code&gt;Current location: (3, 5)&lt;/code&gt; 出力します：（3、5）。値 &lt;code&gt;&amp;amp;(3, 5)&lt;/code&gt; はパターン &lt;code&gt;&amp;amp;(x, y)&lt;/code&gt; に一致するため、 &lt;code&gt;x&lt;/code&gt; は値 &lt;code&gt;3&lt;/code&gt; で、 &lt;code&gt;y&lt;/code&gt; は値 &lt;code&gt;5&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="fb3c413eeb04880ff8b53ff489dddef4151c97bb" translate="yes" xml:space="preserve">
          <source>This code prints &lt;code&gt;New article available! (Read more...)&lt;/code&gt;.</source>
          <target state="translated">このコードは &lt;code&gt;New article available! (Read more...)&lt;/code&gt; 印刷します！（続きを読む...）。</target>
        </trans-unit>
        <trans-unit id="4bdc1d17208e27666bda4fd318b994f6acf7818b" translate="yes" xml:space="preserve">
          <source>This code prints &lt;code&gt;The answer is: 12&lt;/code&gt;. We specify that the parameter &lt;code&gt;f&lt;/code&gt; in &lt;code&gt;do_twice&lt;/code&gt; is an &lt;code&gt;fn&lt;/code&gt; that takes one parameter of type &lt;code&gt;i32&lt;/code&gt; and returns an &lt;code&gt;i32&lt;/code&gt;. We can then call &lt;code&gt;f&lt;/code&gt; in the body of &lt;code&gt;do_twice&lt;/code&gt;. In &lt;code&gt;main&lt;/code&gt;, we can pass the function name &lt;code&gt;add_one&lt;/code&gt; as the first argument to &lt;code&gt;do_twice&lt;/code&gt;.</source>
          <target state="translated">このコードは次のように出力します &lt;code&gt;The answer is: 12&lt;/code&gt; です。私たちは、パラメータのように指定する &lt;code&gt;f&lt;/code&gt; で &lt;code&gt;do_twice&lt;/code&gt; がある &lt;code&gt;fn&lt;/code&gt; 型の一つのパラメータ取り &lt;code&gt;i32&lt;/code&gt; して返す &lt;code&gt;i32&lt;/code&gt; 。次に、 &lt;code&gt;do_twice&lt;/code&gt; の本体で &lt;code&gt;f&lt;/code&gt; を呼び出すことができます。では &lt;code&gt;main&lt;/code&gt; 、我々は関数名を渡すことができ &lt;code&gt;add_one&lt;/code&gt; を最初の引数として &lt;code&gt;do_twice&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f51af940300a3743a5ab26b4b6248a93015d25fc" translate="yes" xml:space="preserve">
          <source>This code prints &lt;code&gt;one or two&lt;/code&gt;.</source>
          <target state="translated">このコードは &lt;code&gt;one or two&lt;/code&gt; 出力します。</target>
        </trans-unit>
        <trans-unit id="fa3fc2ca0fc1e2ca4079f6b9c2e26f148c6f028f" translate="yes" xml:space="preserve">
          <source>This code prints &lt;code&gt;one&lt;/code&gt; because the value in &lt;code&gt;x&lt;/code&gt; is 1. This syntax is useful when you want your code to take an action if it gets a particular concrete value.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; の値が &lt;code&gt;one&lt;/code&gt; ため、このコードは1を出力します。この構文は、特定の具体的な値を取得した場合にコードにアクションを実行させる場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="f76e20cf8d5177f5195a6770ae0f2388492d5a80" translate="yes" xml:space="preserve">
          <source>This code prints the following:</source>
          <target state="translated">このコードは以下のように表示します。</target>
        </trans-unit>
        <trans-unit id="2da1adcf6ac7d40ff872dbb16e9f7a36210c0c52" translate="yes" xml:space="preserve">
          <source>This code should compile and produce the result we want when we use it with the &lt;code&gt;main&lt;/code&gt; function in Listing 10-20.</source>
          <target state="translated">このコードはコンパイルして、リスト10-20の &lt;code&gt;main&lt;/code&gt; 関数で使用したときに必要な結果を生成する必要があります。</target>
        </trans-unit>
        <trans-unit id="fc992e6806cb1bd5a9c534e91522711af45f4b36" translate="yes" xml:space="preserve">
          <source>This code should look generally familiar: a trait with one method and an associated type. The new part is &lt;code&gt;RHS=Self&lt;/code&gt;: this syntax is called &lt;em&gt;default type parameters&lt;/em&gt;. The &lt;code&gt;RHS&lt;/code&gt; generic type parameter (short for &amp;ldquo;right hand side&amp;rdquo;) defines the type of the &lt;code&gt;rhs&lt;/code&gt; parameter in the &lt;code&gt;add&lt;/code&gt; method. If we don&amp;rsquo;t specify a concrete type for &lt;code&gt;RHS&lt;/code&gt; when we implement the &lt;code&gt;Add&lt;/code&gt; trait, the type of &lt;code&gt;RHS&lt;/code&gt; will default to &lt;code&gt;Self&lt;/code&gt;, which will be the type we&amp;rsquo;re implementing &lt;code&gt;Add&lt;/code&gt; on.</source>
          <target state="translated">このコードはおなじみのはずです。1つのメソッドとそれに関連する型を持つ特性です。新しい部分は &lt;code&gt;RHS=Self&lt;/code&gt; です。この構文は、&lt;em&gt;デフォルトの型パラメーター&lt;/em&gt;と呼ばれ&lt;em&gt;ます&lt;/em&gt;。 &lt;code&gt;RHS&lt;/code&gt; ジェネリック型パラメータ（「右側」の略）は、タイプ定義 &lt;code&gt;rhs&lt;/code&gt; におけるパラメータ &lt;code&gt;add&lt;/code&gt; 方法。 &lt;code&gt;Add&lt;/code&gt; トレイトを実装するときに &lt;code&gt;RHS&lt;/code&gt; の具象タイプを指定しない場合、 &lt;code&gt;RHS&lt;/code&gt; のタイプはデフォルトで &lt;code&gt;Self&lt;/code&gt; になり、これが &lt;code&gt;Add&lt;/code&gt; を実装するタイプになります。</target>
        </trans-unit>
        <trans-unit id="58a84861deaa80c4db75f055d7277e059fbe6bb3" translate="yes" xml:space="preserve">
          <source>This code should look generally familiar: a trait with one method and an associated type. The new part is &lt;code&gt;Rhs=Self&lt;/code&gt;: this syntax is called &lt;em&gt;default type parameters&lt;/em&gt;. The &lt;code&gt;Rhs&lt;/code&gt; generic type parameter (short for &amp;ldquo;right hand side&amp;rdquo;) defines the type of the &lt;code&gt;rhs&lt;/code&gt; parameter in the &lt;code&gt;add&lt;/code&gt; method. If we don&amp;rsquo;t specify a concrete type for &lt;code&gt;Rhs&lt;/code&gt; when we implement the &lt;code&gt;Add&lt;/code&gt; trait, the type of &lt;code&gt;Rhs&lt;/code&gt; will default to &lt;code&gt;Self&lt;/code&gt;, which will be the type we&amp;rsquo;re implementing &lt;code&gt;Add&lt;/code&gt; on.</source>
          <target state="translated">このコードは一般的に見覚えがあるはずです。1つのメソッドと関連するタイプを持つトレイトです。新しい部分は &lt;code&gt;Rhs=Self&lt;/code&gt; です：この構文は&lt;em&gt;デフォルトの型パラメーター&lt;/em&gt;と呼ばれ&lt;em&gt;ます&lt;/em&gt;。 &lt;code&gt;Rhs&lt;/code&gt; ジェネリック型パラメータ（「右側」の略）は、タイプ定義 &lt;code&gt;rhs&lt;/code&gt; におけるパラメータ &lt;code&gt;add&lt;/code&gt; 方法。 &lt;code&gt;Add&lt;/code&gt; トレイトを実装するときに &lt;code&gt;Rhs&lt;/code&gt; の具体的なタイプを指定しない場合、 &lt;code&gt;Rhs&lt;/code&gt; のタイプはデフォルトで &lt;code&gt;Self&lt;/code&gt; になり、これが &lt;code&gt;Add&lt;/code&gt; を実装するタイプになります。</target>
        </trans-unit>
        <trans-unit id="9916bd76554811c91bac8fdab30ae1e7bf834537" translate="yes" xml:space="preserve">
          <source>This code still won&amp;rsquo;t work, but let&amp;rsquo;s check it again to get the next error that we need to address:</source>
          <target state="translated">このコードはまだ機能しませんが、もう一度確認して、対処する必要がある次のエラーを取得します。</target>
        </trans-unit>
        <trans-unit id="d27513508379ea6cd339c0bb4a46ef6e82c466b9" translate="yes" xml:space="preserve">
          <source>This code stores a list of integers in the variable &lt;code&gt;number_list&lt;/code&gt; and places the first number in the list in a variable named &lt;code&gt;largest&lt;/code&gt;. Then it iterates through all the numbers in the list, and if the current number is greater than the number stored in &lt;code&gt;largest&lt;/code&gt;, it replaces the number in that variable. However, if the current number is less than or equal to the largest number seen so far, the variable doesn&amp;rsquo;t change, and the code moves on to the next number in the list. After considering all the numbers in the list, &lt;code&gt;largest&lt;/code&gt; should hold the largest number, which in this case is 100.</source>
          <target state="translated">この変数のコードを格納する整数のリストを &lt;code&gt;number_list&lt;/code&gt; と場所という名前の変数にリストの最初の数 &lt;code&gt;largest&lt;/code&gt; 。そして、それは、リスト内のすべての数値を反復処理し、現在の数はに保存されている数よりも大きい場合 &lt;code&gt;largest&lt;/code&gt; 、その変数に番号を置き換えます。ただし、現在の数値がこれまでに見た最大の数値以下の場合、変数は変更されず、コードはリスト内の次の数値に移動します。リスト内のすべての数字を考慮した後、 &lt;code&gt;largest&lt;/code&gt; 、この場合には100の最大の数を、保持する必要があります。</target>
        </trans-unit>
        <trans-unit id="65e3fdd29c21c5766164366857eab04eba8f916b" translate="yes" xml:space="preserve">
          <source>This code will compile and will store the number of &lt;code&gt;Worker&lt;/code&gt; instances we specified as an argument to &lt;code&gt;ThreadPool::new&lt;/code&gt;. But we&amp;rsquo;re &lt;em&gt;still&lt;/em&gt; not processing the closure that we get in &lt;code&gt;execute&lt;/code&gt;. Let&amp;rsquo;s look at how to do that next.</source>
          <target state="translated">このコードはコンパイルし、 &lt;code&gt;ThreadPool::new&lt;/code&gt; 引数として指定した &lt;code&gt;Worker&lt;/code&gt; インスタンスの数を格納します。しかし、 &lt;code&gt;execute&lt;/code&gt; に取得するクロージャは&lt;em&gt;まだ&lt;/em&gt;処理して&lt;em&gt;い&lt;/em&gt;ません。次にその方法を見てみましょう。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="045fdd180c10e009660c1c81e0cc6eab5a5aa968" translate="yes" xml:space="preserve">
          <source>This code will compile just fine. For more about trait objects, refer to the section &lt;a href=&quot;ch17-02-trait-objects#using-trait-objects-that-allow-for-values-of-different-types&quot;&gt;&amp;ldquo;Using Trait Objects That Allow for Values of Different Types&amp;rdquo;&lt;/a&gt; in Chapter 17.</source>
          <target state="translated">このコードは問題なくコンパイルされます。特性オブジェクトの詳細については、第17章の&lt;a href=&quot;ch17-02-trait-objects#using-trait-objects-that-allow-for-values-of-different-types&quot;&gt;「さまざまなタイプの値を許可する特性オブジェクトの使用」&lt;/a&gt;のセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="457c8af0abaf5c3ca5e095102658cc6466fc1c3e" translate="yes" xml:space="preserve">
          <source>This code will compile without any errors. Note the &lt;code&gt;r#&lt;/code&gt; prefix on the function name in its definition as well as where the function is called in &lt;code&gt;main&lt;/code&gt;.</source>
          <target state="translated">このコードはエラーなしでコンパイルされます。定義内の関数名の &lt;code&gt;r#&lt;/code&gt; プレフィックスと、関数が &lt;code&gt;main&lt;/code&gt; で呼び出される場所に注意してください。</target>
        </trans-unit>
        <trans-unit id="a4e6558f8bd1055ab8e1efd4008b36e362cb01bc" translate="yes" xml:space="preserve">
          <source>This code will completely ignore the value passed as the first argument, &lt;code&gt;3&lt;/code&gt;, and will print &lt;code&gt;This code only uses the y parameter: 4&lt;/code&gt;.</source>
          <target state="translated">このコードは、完全に第一引数として渡された値は無視されます &lt;code&gt;3&lt;/code&gt; 、及び印刷する &lt;code&gt;This code only uses the y parameter: 4&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f597cb1c1231379b4a9ac9b16a64f6f09dac15f9" translate="yes" xml:space="preserve">
          <source>This code will now print &lt;code&gt;Default case, x = Some(5)&lt;/code&gt;. The pattern in the second match arm doesn&amp;rsquo;t introduce a new variable &lt;code&gt;y&lt;/code&gt; that would shadow the outer &lt;code&gt;y&lt;/code&gt;, meaning we can use the outer &lt;code&gt;y&lt;/code&gt; in the match guard. Instead of specifying the pattern as &lt;code&gt;Some(y)&lt;/code&gt;, which would have shadowed the outer &lt;code&gt;y&lt;/code&gt;, we specify &lt;code&gt;Some(n)&lt;/code&gt;. This creates a new variable &lt;code&gt;n&lt;/code&gt; that doesn&amp;rsquo;t shadow anything because there is no &lt;code&gt;n&lt;/code&gt; variable outside the &lt;code&gt;match&lt;/code&gt;.</source>
          <target state="translated">このコードは &lt;code&gt;Default case, x = Some(5)&lt;/code&gt; ます。2番目のマッチアームのパターンは、外側の &lt;code&gt;y&lt;/code&gt; をシャドウする新しい変数 &lt;code&gt;y&lt;/code&gt; を導入していません。つまり、マッチガードで外側の &lt;code&gt;y&lt;/code&gt; を使用できます。パターンを &lt;code&gt;Some(y)&lt;/code&gt; として指定する代わりに、外側の &lt;code&gt;y&lt;/code&gt; をシャドーイングするのではなく、 &lt;code&gt;Some(n)&lt;/code&gt; を指定します。これは、 &lt;code&gt;match&lt;/code&gt; 外側に &lt;code&gt;n&lt;/code&gt; 変数がないため、何も隠さない新しい変数 &lt;code&gt;n&lt;/code&gt; を作成します。</target>
        </trans-unit>
        <trans-unit id="1bcf93c595538a9e0c98606ec2aa75cae859981c" translate="yes" xml:space="preserve">
          <source>This code will print &lt;code&gt;Can't overwrite an existing customized value&lt;/code&gt; and then &lt;code&gt;setting is Some(5)&lt;/code&gt;. In the first match arm, we don&amp;rsquo;t need to match on or use the values inside either &lt;code&gt;Some&lt;/code&gt; variant, but we do need to test for the case when &lt;code&gt;setting_value&lt;/code&gt; and &lt;code&gt;new_setting_value&lt;/code&gt; are the &lt;code&gt;Some&lt;/code&gt; variant. In that case, we print why we&amp;rsquo;re not changing &lt;code&gt;setting_value&lt;/code&gt;, and it doesn&amp;rsquo;t get changed.</source>
          <target state="translated">このコードは &lt;code&gt;Can't overwrite an existing customized value&lt;/code&gt; を上書きできませんを出力し、 &lt;code&gt;setting is Some(5)&lt;/code&gt; です。最初のマッチアームでは、 &lt;code&gt;Some&lt;/code&gt; バリアントのいずれかで値を照合したり使用したりする必要はありませんが、 &lt;code&gt;setting_value&lt;/code&gt; および &lt;code&gt;new_setting_value&lt;/code&gt; が &lt;code&gt;Some&lt;/code&gt; バリアントである場合をテストする必要があります。その場合、 &lt;code&gt;setting_value&lt;/code&gt; を変更しない理由を出力しますが、変更されません。</target>
        </trans-unit>
        <trans-unit id="59fe6f0c2e0e4f24920973a91f227ffd825f4348" translate="yes" xml:space="preserve">
          <source>This code will print &lt;code&gt;Change the color to red 0, green 160, and blue 255&lt;/code&gt;. Try changing the value of &lt;code&gt;msg&lt;/code&gt; to see the code from the other arms run.</source>
          <target state="translated">このコードは &lt;code&gt;Change the color to red 0, green 160, and blue 255&lt;/code&gt; ます。 &lt;code&gt;msg&lt;/code&gt; の値を変更して、他のアームの実行からのコードを確認してください。</target>
        </trans-unit>
        <trans-unit id="3c54f68158af593ed8370c89b1e792c808e333b9" translate="yes" xml:space="preserve">
          <source>This code will print &lt;code&gt;Hello, Macro! My name is Pancakes!&lt;/code&gt; when we&amp;rsquo;re done. The first step is to make a new library crate, like this:</source>
          <target state="translated">このコードは &lt;code&gt;Hello, Macro! My name is Pancakes!&lt;/code&gt; 終わったら 最初のステップは、次のような新しいライブラリクレートを作成することです。</target>
        </trans-unit>
        <trans-unit id="6ef0c24b1ac6e78f32662fb7a47aa078602f7661" translate="yes" xml:space="preserve">
          <source>This code will print &lt;code&gt;Some numbers: 2, 8, 32&lt;/code&gt;, and the values 4 and 16 will be ignored.</source>
          <target state="translated">このコードは &lt;code&gt;Some numbers: 2, 8, 32&lt;/code&gt; 、および値4と16は無視されます。</target>
        </trans-unit>
        <trans-unit id="6e7f6cc166031d911beb7caaef0389c2805500c8" translate="yes" xml:space="preserve">
          <source>This code will print &lt;code&gt;{&quot;Blue&quot;: 25}&lt;/code&gt;. The original value of &lt;code&gt;10&lt;/code&gt; has been overwritten.</source>
          <target state="translated">このコードは &lt;code&gt;{&quot;Blue&quot;: 25}&lt;/code&gt; ます。元の値 &lt;code&gt;10&lt;/code&gt; は上書きされています。</target>
        </trans-unit>
        <trans-unit id="4c7854ef3442e5dc7384d2ebe52264fddb2a172b" translate="yes" xml:space="preserve">
          <source>This code will print &lt;code&gt;{&quot;world&quot;: 2, &quot;hello&quot;: 1, &quot;wonderful&quot;: 1}&lt;/code&gt;. The &lt;code&gt;or_insert&lt;/code&gt; method actually returns a mutable reference (&lt;code&gt;&amp;amp;mut V&lt;/code&gt;) to the value for this key. Here we store that mutable reference in the &lt;code&gt;count&lt;/code&gt; variable, so in order to assign to that value, we must first dereference &lt;code&gt;count&lt;/code&gt; using the asterisk (&lt;code&gt;*&lt;/code&gt;). The mutable reference goes out of scope at the end of the &lt;code&gt;for&lt;/code&gt; loop, so all of these changes are safe and allowed by the borrowing rules.</source>
          <target state="translated">このコードは、 &lt;code&gt;{&quot;world&quot;: 2, &quot;hello&quot;: 1, &quot;wonderful&quot;: 1}&lt;/code&gt; ます。 &lt;code&gt;or_insert&lt;/code&gt; の方法は、実際には変更可能な参照（戻り &lt;code&gt;&amp;amp;mut V&lt;/code&gt; このキーの値にします）。ここでは、その可変参照を &lt;code&gt;count&lt;/code&gt; 変数に格納しているため、その値に割り当てるには、最初にアスタリスク（ &lt;code&gt;*&lt;/code&gt; ）を使用して &lt;code&gt;count&lt;/code&gt; を逆参照する必要があります。変更可能な参照は &lt;code&gt;for&lt;/code&gt; ループの最後でスコープ外になるため、これらの変更はすべて安全であり、借用ルールによって許可されます。</target>
        </trans-unit>
        <trans-unit id="d2527fb52597f9416819ef1fc01a194d639282f6" translate="yes" xml:space="preserve">
          <source>This code will print each pair in an arbitrary order:</source>
          <target state="translated">このコードは、各ペアを任意の順序で表示します。</target>
        </trans-unit>
        <trans-unit id="bacd4441a056463b6c76d4dcb3493a2106b165e0" translate="yes" xml:space="preserve">
          <source>This code will print the 18 bytes that make up this &lt;code&gt;String&lt;/code&gt;:</source>
          <target state="translated">このコードは、この &lt;code&gt;String&lt;/code&gt; を構成する18バイトを出力します。</target>
        </trans-unit>
        <trans-unit id="df66479dcc3e1d9cca2a55caf3dadeea76d13542" translate="yes" xml:space="preserve">
          <source>This code will print the following:</source>
          <target state="translated">このコードでは以下のように表示されます。</target>
        </trans-unit>
        <trans-unit id="6cf1c1dee0071b4d526326a9881c97e561ec0f1a" translate="yes" xml:space="preserve">
          <source>This code will result in the following error:</source>
          <target state="translated">このコードでは、以下のようなエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="bd9279581006b04d3fb15d53d9a31240a9bda944" translate="yes" xml:space="preserve">
          <source>This code works just fine because we never bind &lt;code&gt;s&lt;/code&gt; to anything; it isn&amp;rsquo;t moved.</source>
          <target state="translated">&lt;code&gt;s&lt;/code&gt; を何にもバインドしないため、このコードは問題なく機能します。動かない。</target>
        </trans-unit>
        <trans-unit id="a72012f28327d683a9fda9d6b4835b6ec97dd74b" translate="yes" xml:space="preserve">
          <source>This code works the way the business wants it to now, but let&amp;rsquo;s say the data science team decides that we need to make some changes to the way we call the &lt;code&gt;simulated_expensive_calculation&lt;/code&gt; function in the future. To simplify the update when those changes happen, we want to refactor this code so it calls the &lt;code&gt;simulated_expensive_calculation&lt;/code&gt; function only once. We also want to cut the place where we&amp;rsquo;re currently unnecessarily calling the function twice without adding any other calls to that function in the process. That is, we don&amp;rsquo;t want to call it if the result isn&amp;rsquo;t needed, and we still want to call it only once.</source>
          <target state="translated">このコードは、ビジネスが今望んでいる方法で機能しますが、データサイエンスチームが、今後、 &lt;code&gt;simulated_expensive_calculation&lt;/code&gt; 関数を呼び出す方法に変更を加える必要があると判断したとします。これらの変更が発生したときの更新を簡素化するために、このコードをリファクタリングして、 &lt;code&gt;simulated_expensive_calculation&lt;/code&gt; 関数を1回だけ呼び出すようにします。また、プロセス内でその関数に他の呼び出しを追加せずに、現在関数を2度不必要に呼び出している場所を削減したいと考えています。つまり、結果が必要ない場合は呼び出したくありませんが、それでも一度だけ呼び出したいです。</target>
        </trans-unit>
        <trans-unit id="29594b80ae15e7f3a6760f8d699f1007a88ab197" translate="yes" xml:space="preserve">
          <source>This code would attempt to link with &lt;code&gt;libmy_c_library.so&lt;/code&gt; on unix-like systems and &lt;code&gt;my_c_library.dll&lt;/code&gt; on Windows at runtime, and panic if it can't find something to link to. Rust code could then use &lt;code&gt;my_c_function&lt;/code&gt; as if it were any other unsafe Rust function. Working with non-Rust languages and FFI is inherently unsafe, so wrappers are usually built around C APIs.</source>
          <target state="translated">このコードは、UNIXライクなシステムでは &lt;code&gt;my_c_library.dll&lt;/code&gt; 、Windowsでは実行時に &lt;code&gt;libmy_c_library.so&lt;/code&gt; とリンクしようとし、リンク先が見つからない場合はパニックを引き起こします。Rustコードは、他の安全でないRust関数であるかのように &lt;code&gt;my_c_function&lt;/code&gt; を使用できます。Rust以外の言語とFFIでの作業は本質的に安全ではないため、通常、ラッパーはC APIを中心に構築されます。</target>
        </trans-unit>
        <trans-unit id="94ac7a59ef0f9f139e040ad72861c14b2eb19308" translate="yes" xml:space="preserve">
          <source>This code would print &lt;code&gt;x = 5 and y = 10&lt;/code&gt;.</source>
          <target state="translated">このコードは、 &lt;code&gt;x = 5 and y = 10&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="0be10b63965c309b87ed0545b477401b58dc21cb" translate="yes" xml:space="preserve">
          <source>This command creates an executable file in &lt;em&gt;target/debug/hello_cargo&lt;/em&gt; (or &lt;em&gt;target\debug\hello_cargo.exe&lt;/em&gt; on Windows) rather than in your current directory. You can run the executable with this command:</source>
          <target state="translated">このコマンドは、現在のディレクトリではなく、&lt;em&gt;target / debug / hello_cargo&lt;/em&gt;（Windowsの場合は&lt;em&gt;target \ debug \ hello_cargo.exe&lt;/em&gt;）に実行可能ファイルを作成します。次のコマンドで実行可能ファイルを実行できます。</target>
        </trans-unit>
        <trans-unit id="4dd02fcb167dbab5d0f3cc67c54c6c5da2a62c5e" translate="yes" xml:space="preserve">
          <source>This command gives you &lt;code&gt;rustfmt&lt;/code&gt; and &lt;code&gt;cargo-fmt&lt;/code&gt;, similar to how Rust gives you both &lt;code&gt;rustc&lt;/code&gt; and &lt;code&gt;cargo&lt;/code&gt;. To format any Cargo project, enter the following:</source>
          <target state="translated">このコマンドは、与え &lt;code&gt;rustfmt&lt;/code&gt; と &lt;code&gt;cargo-fmt&lt;/code&gt; 錆はあなたの両方できますどのように似て、 &lt;code&gt;rustc&lt;/code&gt; や &lt;code&gt;cargo&lt;/code&gt; 。Cargoプロジェクトをフォーマットするには、次のように入力します。</target>
        </trans-unit>
        <trans-unit id="616fc540cd704c55f34b7ddb4249c489ab431fea" translate="yes" xml:space="preserve">
          <source>This command ran all tests with &lt;code&gt;add&lt;/code&gt; in the name and filtered out the test named &lt;code&gt;one_hundred&lt;/code&gt;. Also note that the module in which a test appears becomes part of the test&amp;rsquo;s name, so we can run all the tests in a module by filtering on the module&amp;rsquo;s name.</source>
          <target state="translated">このコマンドは、名前に &lt;code&gt;add&lt;/code&gt; を使用してすべてのテストを実行し、 &lt;code&gt;one_hundred&lt;/code&gt; という名前のテストを除外しました。また、テストが表示されるモジュールはテスト名の一部になるため、モジュールの名前でフィルタリングすることにより、モジュール内のすべてのテストを実行できます。</target>
        </trans-unit>
        <trans-unit id="8ea7582e38a836907de1d30ee5b58334fa20a196" translate="yes" xml:space="preserve">
          <source>This command runs only the tests in the &lt;em&gt;tests/integration_test.rs&lt;/em&gt; file.</source>
          <target state="translated">このコマンドは、&lt;em&gt;tests / integration_test.rs&lt;/em&gt;ファイル内の&lt;em&gt;テスト&lt;/em&gt;のみを実行します。</target>
        </trans-unit>
        <trans-unit id="0760093e6150870ee34facc6b7a5327edc5dc69d" translate="yes" xml:space="preserve">
          <source>This command will inform Cargo of your API token and store it locally in &lt;em&gt;~/.cargo/credentials&lt;/em&gt;. Note that this token is a &lt;em&gt;secret&lt;/em&gt;: do not share it with anyone else. If you do share it with anyone for any reason, you should revoke it and generate a new token on &lt;a href=&quot;https://crates.io/&quot;&gt;crates.io&lt;/a&gt;.</source>
          <target state="translated">このコマンドはCargoにAPIトークンを通知し、ローカルで&lt;em&gt;〜/ .cargo / credentialsに保存します&lt;/em&gt;。このトークンは&lt;em&gt;秘密&lt;/em&gt;です。他の人と共有しないでください。なんらかの理由で他の人と共有する場合は、それを取り消して、&lt;a href=&quot;https://crates.io/&quot;&gt;crates.ioで&lt;/a&gt;新しいトークンを生成する必要があります。</target>
        </trans-unit>
        <trans-unit id="5e88705efdf159f3ff9b6126f1c10159a182f8df" translate="yes" xml:space="preserve">
          <source>This compiles because &lt;code&gt;longer&lt;/code&gt; outlives &lt;code&gt;shorter&lt;/code&gt;, thus the constraint is respected:</source>
          <target state="translated">長い &lt;code&gt;shorter&lt;/code&gt; &lt;code&gt;longer&lt;/code&gt; ため、これはコンパイルされます。したがって、制約が尊重されます。</target>
        </trans-unit>
        <trans-unit id="3f29dc82f5ad5c21f66ea4c65c4df005f9bfa118" translate="yes" xml:space="preserve">
          <source>This computes the integer &lt;code&gt;n&lt;/code&gt; such that &lt;code&gt;self = n * rhs + self.rem_euclid(rhs)&lt;/code&gt;, with &lt;code&gt;0 &amp;lt;= self.rem_euclid(rhs) &amp;lt; rhs&lt;/code&gt;.</source>
          <target state="translated">これは、 &lt;code&gt;0 &amp;lt;= self.rem_euclid(rhs) &amp;lt; rhs&lt;/code&gt; 、 &lt;code&gt;self = n * rhs + self.rem_euclid(rhs)&lt;/code&gt; となるような整数 &lt;code&gt;n&lt;/code&gt; を計算します。</target>
        </trans-unit>
        <trans-unit id="92466c99e75537fb86fdcb8b6177060d58e36e85" translate="yes" xml:space="preserve">
          <source>This computes the integer &lt;code&gt;n&lt;/code&gt; such that &lt;code&gt;self = n * rhs + self.rem_euclid(rhs)&lt;/code&gt;. In other words, the result is &lt;code&gt;self / rhs&lt;/code&gt; rounded to the integer &lt;code&gt;n&lt;/code&gt; such that &lt;code&gt;self &amp;gt;= n * rhs&lt;/code&gt;.</source>
          <target state="translated">これは、 &lt;code&gt;self = n * rhs + self.rem_euclid(rhs)&lt;/code&gt; ような整数 &lt;code&gt;n&lt;/code&gt; を計算します。換言すれば、結果は &lt;code&gt;self / rhs&lt;/code&gt; 整数に丸め &lt;code&gt;n&lt;/code&gt; ように &lt;code&gt;self &amp;gt;= n * rhs&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="30ff452f5fae3358ab149e5ae5cfa16c08f607d2" translate="yes" xml:space="preserve">
          <source>This concept&amp;mdash;of being concerned only with the messages a value responds to rather than the value&amp;rsquo;s concrete type&amp;mdash;is similar to the concept &lt;em&gt;duck typing&lt;/em&gt; in dynamically typed languages: if it walks like a duck and quacks like a duck, then it must be a duck! In the implementation of &lt;code&gt;run&lt;/code&gt; on &lt;code&gt;Screen&lt;/code&gt; in Listing 17-5, &lt;code&gt;run&lt;/code&gt; doesn&amp;rsquo;t need to know what the concrete type of each component is. It doesn&amp;rsquo;t check whether a component is an instance of a &lt;code&gt;Button&lt;/code&gt; or a &lt;code&gt;SelectBox&lt;/code&gt;, it just calls the &lt;code&gt;draw&lt;/code&gt; method on the component. By specifying &lt;code&gt;Box&amp;lt;dyn Draw&amp;gt;&lt;/code&gt; as the type of the values in the &lt;code&gt;components&lt;/code&gt; vector, we&amp;rsquo;ve defined &lt;code&gt;Screen&lt;/code&gt; to need values that we can call the &lt;code&gt;draw&lt;/code&gt; method on.</source>
          <target state="translated">この概念（値の具体的なタイプではなく、値が応答するメッセージのみに関係&lt;em&gt;する）&lt;/em&gt;は、動的に型付けされた言語での&lt;em&gt;ダックタイピング&lt;/em&gt;の概念に似てい&lt;em&gt;ます。アヒルの&lt;/em&gt;ように歩き、アヒルのように鳴く場合、それはアヒル！リスト17-5 の &lt;code&gt;run&lt;/code&gt; on &lt;code&gt;Screen&lt;/code&gt; の実装では、 &lt;code&gt;run&lt;/code&gt; は各コンポーネントの具体的なタイプを知る必要はありません。コンポーネントが &lt;code&gt;Button&lt;/code&gt; または &lt;code&gt;SelectBox&lt;/code&gt; のインスタンスであるかどうかはチェックせず、コンポーネントの &lt;code&gt;draw&lt;/code&gt; メソッドを呼び出すだけです。 &lt;code&gt;components&lt;/code&gt; ベクトルの値のタイプとして &lt;code&gt;Box&amp;lt;dyn Draw&amp;gt;&lt;/code&gt; を指定することにより、 &lt;code&gt;Screen&lt;/code&gt; &lt;code&gt;draw&lt;/code&gt; メソッドを呼び出すことができる値が必要な画面。</target>
        </trans-unit>
        <trans-unit id="80fbf38c87a2fe3d71541d31605bf9ab62ed6238" translate="yes" xml:space="preserve">
          <source>This concept&amp;mdash;of being concerned only with the messages a value responds to rather than the value&amp;rsquo;s concrete type&amp;mdash;is similar to the concept of &lt;em&gt;duck typing&lt;/em&gt; in dynamically typed languages: if it walks like a duck and quacks like a duck, then it must be a duck! In the implementation of &lt;code&gt;run&lt;/code&gt; on &lt;code&gt;Screen&lt;/code&gt; in Listing 17-5, &lt;code&gt;run&lt;/code&gt; doesn&amp;rsquo;t need to know what the concrete type of each component is. It doesn&amp;rsquo;t check whether a component is an instance of a &lt;code&gt;Button&lt;/code&gt; or a &lt;code&gt;SelectBox&lt;/code&gt;, it just calls the &lt;code&gt;draw&lt;/code&gt; method on the component. By specifying &lt;code&gt;Box&amp;lt;dyn Draw&amp;gt;&lt;/code&gt; as the type of the values in the &lt;code&gt;components&lt;/code&gt; vector, we&amp;rsquo;ve defined &lt;code&gt;Screen&lt;/code&gt; to need values that we can call the &lt;code&gt;draw&lt;/code&gt; method on.</source>
          <target state="translated">値の具体的な型ではなく、値が応答するメッセージのみに関係するというこの概念は、動的に型指定された言語での&lt;em&gt;ダックタイピング&lt;/em&gt;の概念に似てい&lt;em&gt;ます。アヒルの&lt;/em&gt;ように歩き、アヒルのように鳴く場合は、アヒル！実装では &lt;code&gt;run&lt;/code&gt; 上の &lt;code&gt;Screen&lt;/code&gt; のリスト17-5で、 &lt;code&gt;run&lt;/code&gt; 各構成要素の具体的な種類が何であるかを知っている必要はありません。コンポーネントが &lt;code&gt;Button&lt;/code&gt; または &lt;code&gt;SelectBox&lt;/code&gt; のインスタンスであるかどうかはチェックせず、コンポーネントの &lt;code&gt;draw&lt;/code&gt; メソッドを呼び出すだけです。 &lt;code&gt;components&lt;/code&gt; ベクトルの値のタイプとして &lt;code&gt;Box&amp;lt;dyn Draw&amp;gt;&lt;/code&gt; を指定することにより、次のように定義しました。 &lt;code&gt;Screen&lt;/code&gt; &lt;code&gt;draw&lt;/code&gt; メソッドを呼び出すことができる値を必要とする画面。</target>
        </trans-unit>
        <trans-unit id="918897f830b93edc22b990902ff69a6fc36b08cc" translate="yes" xml:space="preserve">
          <source>This conditional structure lets us support complex requirements. With the hardcoded values we have here, this example will print &lt;code&gt;Using purple as the background color&lt;/code&gt;.</source>
          <target state="translated">この条件付き構造により、複雑な要件をサポートできます。ここにハードコードされた値を &lt;code&gt;Using purple as the background color&lt;/code&gt; すると、この例では背景色として紫を使用が出力されます。</target>
        </trans-unit>
        <trans-unit id="3dcd38b0035fd15b13996ae1be8e3f24e8144a2a" translate="yes" xml:space="preserve">
          <source>This constant is defined to be &quot;1970-01-01 00:00:00 UTC&quot; on all systems with respect to the system clock. Using &lt;code&gt;duration_since&lt;/code&gt; on an existing &lt;a href=&quot;struct.systemtime&quot;&gt;&lt;code&gt;SystemTime&lt;/code&gt;&lt;/a&gt; instance can tell how far away from this point in time a measurement lies, and using &lt;code&gt;UNIX_EPOCH + duration&lt;/code&gt; can be used to create a &lt;a href=&quot;struct.systemtime&quot;&gt;&lt;code&gt;SystemTime&lt;/code&gt;&lt;/a&gt; instance to represent another fixed point in time.</source>
          <target state="translated">この定数は、システムクロックに関してすべてのシステムで「1970-01-01 00:00:00 UTC」と定義されています。既存の&lt;a href=&quot;struct.systemtime&quot;&gt; &lt;code&gt;SystemTime&lt;/code&gt; &lt;/a&gt;インスタンスで &lt;code&gt;duration_since&lt;/code&gt; を使用すると、この時点からどれだけ離れているかを測定できます &lt;code&gt;UNIX_EPOCH + duration&lt;/code&gt; を使用すると、&lt;a href=&quot;struct.systemtime&quot;&gt; &lt;code&gt;SystemTime&lt;/code&gt; &lt;/a&gt;インスタンスを作成して別の固定時点を表すことができます。</target>
        </trans-unit>
        <trans-unit id="b5d0e066df6c05d48b8ed4d894544fa1aeed7cdf" translate="yes" xml:space="preserve">
          <source>This constant is defined to be &quot;1970-01-01 00:00:00 UTC&quot; on all systems with respect to the system clock. Using &lt;code&gt;duration_since&lt;/code&gt; on an existing &lt;code&gt;SystemTime&lt;/code&gt; instance can tell how far away from this point in time a measurement lies, and using &lt;code&gt;UNIX_EPOCH + duration&lt;/code&gt; can be used to create a &lt;code&gt;SystemTime&lt;/code&gt; instance to represent another fixed point in time.</source>
          <target state="translated">この定数は、システムクロックに関してすべてのシステムで「1970-01-01 00:00:00 UTC」と定義されています。既存の &lt;code&gt;SystemTime&lt;/code&gt; インスタンスで &lt;code&gt;duration_since&lt;/code&gt; を使用すると、この時点からどれだけ離れているかを測定できます &lt;code&gt;UNIX_EPOCH + duration&lt;/code&gt; を使用すると、 &lt;code&gt;SystemTime&lt;/code&gt; インスタンスを作成して別の固定時点を表すことができます。</target>
        </trans-unit>
        <trans-unit id="b2173ef48f94c265cfdd9db0c9cedd205cdc4005" translate="yes" xml:space="preserve">
          <source>This construct eliminates a lot of nesting that would be necessary if you used &lt;code&gt;loop&lt;/code&gt;, &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;else&lt;/code&gt;, and &lt;code&gt;break&lt;/code&gt;, and it&amp;rsquo;s clearer. While a condition holds true, the code runs; otherwise, it exits the loop.</source>
          <target state="translated">この構造により、 &lt;code&gt;loop&lt;/code&gt; 、 &lt;code&gt;if&lt;/code&gt; 、 &lt;code&gt;else&lt;/code&gt; 、および &lt;code&gt;break&lt;/code&gt; を使用した場合に必要となる多くの入れ子がなくなり、より明確になります。条件が満たされている間、コードが実行されます。それ以外の場合は、ループを終了します。</target>
        </trans-unit>
        <trans-unit id="0f3921b041a98aaf2f8084439e4ed88136086a63" translate="yes" xml:space="preserve">
          <source>This construct is allowed because the first &lt;code&gt;spaces&lt;/code&gt; variable is a string type and the second &lt;code&gt;spaces&lt;/code&gt; variable, which is a brand-new variable that happens to have the same name as the first one, is a number type. Shadowing thus spares us from having to come up with different names, such as &lt;code&gt;spaces_str&lt;/code&gt; and &lt;code&gt;spaces_num&lt;/code&gt;; instead, we can reuse the simpler &lt;code&gt;spaces&lt;/code&gt; name. However, if we try to use &lt;code&gt;mut&lt;/code&gt; for this, as shown here, we&amp;rsquo;ll get a compile-time error:</source>
          <target state="translated">この構築物は、最初ので、許可されている &lt;code&gt;spaces&lt;/code&gt; 変数は文字列型と第二である &lt;code&gt;spaces&lt;/code&gt; 最初のものと同じ名前を持つようにたまたまブランドの新しい変数である変数、数値型です。したがって、 &lt;code&gt;spaces_num&lt;/code&gt; 、 &lt;code&gt;spaces_str&lt;/code&gt; やspace_numなどの異なる名前を付ける必要がなくなります。代わりに、単純な &lt;code&gt;spaces&lt;/code&gt; 名を再利用できます。ただし、ここに示すように &lt;code&gt;mut&lt;/code&gt; を使用しようとすると、コンパイル時エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="2fc6477635d5d363ee444b003b473b1635177727" translate="yes" xml:space="preserve">
          <source>This constructor is unsafe because we cannot guarantee that the data pointed to by &lt;code&gt;pointer&lt;/code&gt; is pinned, meaning that the data will not be moved or its storage invalidated until it gets dropped. If the constructed &lt;code&gt;Pin&amp;lt;P&amp;gt;&lt;/code&gt; does not guarantee that the data &lt;code&gt;P&lt;/code&gt; points to is pinned, that is a violation of the API contract and may lead to undefined behavior in later (safe) operations.</source>
          <target state="translated">このコンストラクタは安全ではありません。 &lt;code&gt;pointer&lt;/code&gt; が指すデータが固定されていることを保証できないためです。つまり、データが削除されるまで、データが移動したり、ストレージが無効になったりすることはありません。構築された &lt;code&gt;Pin&amp;lt;P&amp;gt;&lt;/code&gt; が &lt;code&gt;P&lt;/code&gt; がポイントするデータが固定されることを保証しない場合、それはAPIコントラクトの違反であり、後の（安全な）操作で未定義の動作を引き起こす可能性があります。</target>
        </trans-unit>
        <trans-unit id="ff43397602787e15a0f1ce39d92c367ec0e4e2ba" translate="yes" xml:space="preserve">
          <source>This constructor will panic if &lt;code&gt;secs&lt;/code&gt; is not finite, negative or overflows &lt;code&gt;Duration&lt;/code&gt;.</source>
          <target state="translated">このコンストラクタは、 &lt;code&gt;secs&lt;/code&gt; が有限でないか、負であるか、または &lt;code&gt;Duration&lt;/code&gt; をオーバーフローするとパニックになります。</target>
        </trans-unit>
        <trans-unit id="62c6e72ea916575b1c7e9925b7cd6a1ec78f970b" translate="yes" xml:space="preserve">
          <source>This constructor will panic if the carry from the nanoseconds overflows the seconds counter.</source>
          <target state="translated">このコンストラクタは、ナノ秒からのキャリーが秒カウンターをオーバーフローした場合にパニックを起こします。</target>
        </trans-unit>
        <trans-unit id="6b22e102a899811cfc691dccd223a5bfd8615f73" translate="yes" xml:space="preserve">
          <source>This consumes the &lt;code&gt;String&lt;/code&gt; on the left-hand side and re-uses its buffer (growing it if necessary). This is done to avoid allocating a new &lt;code&gt;String&lt;/code&gt; and copying the entire contents on every operation, which would lead to &lt;code&gt;O(n^2)&lt;/code&gt; running time when building an &lt;code&gt;n&lt;/code&gt;-byte string by repeated concatenation.</source>
          <target state="translated">これにより、左側の &lt;code&gt;String&lt;/code&gt; が消費され、そのバッファが再利用されます（必要に応じて拡大されます）。これは、新しい &lt;code&gt;String&lt;/code&gt; を割り当て、すべての操作で内容全体をコピーすることを避けるために行われます。これにより、繰り返し連結によって &lt;code&gt;n&lt;/code&gt; バイトの文字列を構築するときに &lt;code&gt;O(n^2)&lt;/code&gt; 実行時間が発生します。</target>
        </trans-unit>
        <trans-unit id="ff15f14738d56f849296682dc30e5c72af4309e0" translate="yes" xml:space="preserve">
          <source>This consumes the &lt;code&gt;String&lt;/code&gt; on the left-hand side and re-uses its buffer (growing it if necessary). This is done to avoid allocating a new &lt;code&gt;String&lt;/code&gt; and copying the entire contents on every operation, which would lead to &lt;em&gt;O&lt;/em&gt;(&lt;em&gt;n&lt;/em&gt;^2) running time when building an &lt;em&gt;n&lt;/em&gt;-byte string by repeated concatenation.</source>
          <target state="translated">これにより、左側の &lt;code&gt;String&lt;/code&gt; が消費され、そのバッファが再利用されます（必要に応じて拡張されます）。これは、新しい &lt;code&gt;String&lt;/code&gt; を割り当てて、すべての操作で内容全体をコピーすることを回避するために行われます。これにより、連結を繰り返して&lt;em&gt;n&lt;/em&gt;バイトの文字列を作成するときに&lt;em&gt;O&lt;/em&gt;（&lt;em&gt;n&lt;/em&gt; ^ 2）の実行時間が発生します。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="9c1a59da820eab802e08d64caefd05fd88b5910a" translate="yes" xml:space="preserve">
          <source>This consumes the &lt;code&gt;String&lt;/code&gt;, so we do not need to copy its contents.</source>
          <target state="translated">これは &lt;code&gt;String&lt;/code&gt; を消費するため、その内容をコピーする必要はありません。</target>
        </trans-unit>
        <trans-unit id="bdf3d0a305b0dd41c0720025809f7bbdfc2e29a7" translate="yes" xml:space="preserve">
          <source>This conversion allocates a new error with a simple representation of error kind.</source>
          <target state="translated">この変換は,エラーの種類を単純に表現した新しいエラーを割り当てます。</target>
        </trans-unit>
        <trans-unit id="680616b748f55e8f2a3a0b7bc442fa697101f3ab" translate="yes" xml:space="preserve">
          <source>This conversion allocates on the heap and performs a copy of &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="translated">この変換はヒープに割り当てられ、 &lt;code&gt;s&lt;/code&gt; のコピーを実行します。</target>
        </trans-unit>
        <trans-unit id="9a31c836c91541651df449cd7fae82a0fb324fe3" translate="yes" xml:space="preserve">
          <source>This conversion allocates on the heap and performs a copy of &lt;code&gt;slice&lt;/code&gt;.</source>
          <target state="translated">この変換はヒープに割り当てられ、 &lt;code&gt;slice&lt;/code&gt; コピーを実行します。</target>
        </trans-unit>
        <trans-unit id="9fa8116281488d60de9f3c4d7eaa019ecce22d9b" translate="yes" xml:space="preserve">
          <source>This conversion always returns &lt;code&gt;RecvTimeoutError::Disconnected&lt;/code&gt;.</source>
          <target state="translated">この変換は常に &lt;code&gt;RecvTimeoutError::Disconnected&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="a1ed0a334eeab7a53114c9e9ec5ed0ef897b2581" translate="yes" xml:space="preserve">
          <source>This conversion always returns &lt;code&gt;TryRecvError::Disconnected&lt;/code&gt;.</source>
          <target state="translated">この変換は常に &lt;code&gt;TryRecvError::Disconnected&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="82865c3f0e8956130ac1b56ac62e2b0276fe13c6" translate="yes" xml:space="preserve">
          <source>This conversion always returns a &lt;code&gt;TrySendError::Disconnected&lt;/code&gt; containing the data in the &lt;code&gt;SendError&amp;lt;T&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">この変換は常に、 &lt;code&gt;SendError&amp;lt;T&amp;gt;&lt;/code&gt; データを含む &lt;code&gt;TrySendError::Disconnected&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="191fbbeba587abac9c4a996c422eb2e1a86f8da6" translate="yes" xml:space="preserve">
          <source>This conversion creates a &lt;a href=&quot;../net/enum.socketaddr#variant.V4&quot;&gt;&lt;code&gt;SocketAddr::V4&lt;/code&gt;&lt;/a&gt; for a &lt;a href=&quot;../net/enum.ipaddr#variant.V4&quot;&gt;&lt;code&gt;IpAddr::V4&lt;/code&gt;&lt;/a&gt; and creates a &lt;a href=&quot;../net/enum.socketaddr#variant.V6&quot;&gt;&lt;code&gt;SocketAddr::V6&lt;/code&gt;&lt;/a&gt; for a &lt;a href=&quot;../net/enum.ipaddr#variant.V6&quot;&gt;&lt;code&gt;IpAddr::V6&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この変換により、&lt;a href=&quot;../net/enum.ipaddr#variant.V4&quot;&gt; &lt;code&gt;IpAddr::V4&lt;/code&gt; &lt;/a&gt;&lt;a href=&quot;../net/enum.socketaddr#variant.V4&quot;&gt; &lt;code&gt;SocketAddr::V4&lt;/code&gt; &lt;/a&gt;が作成され、&lt;a href=&quot;../net/enum.ipaddr#variant.V6&quot;&gt; &lt;code&gt;IpAddr::V6&lt;/code&gt; &lt;/a&gt;&lt;a href=&quot;../net/enum.socketaddr#variant.V6&quot;&gt; &lt;code&gt;SocketAddr::V6&lt;/code&gt; &lt;/a&gt;が作成されます。</target>
        </trans-unit>
        <trans-unit id="e3e202dba3c3f87c15f9baf72668c6b89f20fb13" translate="yes" xml:space="preserve">
          <source>This conversion creates a &lt;a href=&quot;enum.socketaddr#variant.V4&quot;&gt;&lt;code&gt;SocketAddr::V4&lt;/code&gt;&lt;/a&gt; for a &lt;a href=&quot;enum.ipaddr#variant.V4&quot;&gt;&lt;code&gt;IpAddr::V4&lt;/code&gt;&lt;/a&gt; and creates a &lt;a href=&quot;enum.socketaddr#variant.V6&quot;&gt;&lt;code&gt;SocketAddr::V6&lt;/code&gt;&lt;/a&gt; for a &lt;a href=&quot;enum.ipaddr#variant.V6&quot;&gt;&lt;code&gt;IpAddr::V6&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この変換により、&lt;a href=&quot;enum.ipaddr#variant.V4&quot;&gt; &lt;code&gt;IpAddr::V4&lt;/code&gt; &lt;/a&gt;&lt;a href=&quot;enum.socketaddr#variant.V4&quot;&gt; &lt;code&gt;SocketAddr::V4&lt;/code&gt; &lt;/a&gt;が作成され、&lt;a href=&quot;enum.ipaddr#variant.V6&quot;&gt; &lt;code&gt;IpAddr::V6&lt;/code&gt; &lt;/a&gt;&lt;a href=&quot;enum.socketaddr#variant.V6&quot;&gt; &lt;code&gt;SocketAddr::V6&lt;/code&gt; &lt;/a&gt;が作成されます。</target>
        </trans-unit>
        <trans-unit id="3b1a65936a10e1c346d064991eab656396fb2bba" translate="yes" xml:space="preserve">
          <source>This conversion currently should not allocate memory, but this behavior is not guaranteed on all platforms or in all future versions.</source>
          <target state="translated">この変換は現在メモリを割り当ててはいけませんが、この動作はすべてのプラットフォームや将来のすべてのバージョンで保証されているわけではありません。</target>
        </trans-unit>
        <trans-unit id="e7f2cebd3b32b1fc620100acfba14583ac5721f8" translate="yes" xml:space="preserve">
          <source>This conversion does not allocate on the heap and happens in place.</source>
          <target state="translated">この変換はヒープ上では割り当てられず、その場で行われます。</target>
        </trans-unit>
        <trans-unit id="ece3abafa7c5e7855afc6b2c712b92113a0c3cfa" translate="yes" xml:space="preserve">
          <source>This conversion does not allocate or copy memory.</source>
          <target state="translated">この変換はメモリを割り当てたりコピーしたりしません。</target>
        </trans-unit>
        <trans-unit id="bfaed574bc93990621932481bdc991a5d31277ba" translate="yes" xml:space="preserve">
          <source>This conversion happens in-place, and has &lt;em&gt;O&lt;/em&gt;(&lt;em&gt;n&lt;/em&gt;) time complexity.</source>
          <target state="translated">この変換はインプレースで行われ、&lt;em&gt;O&lt;/em&gt;（&lt;em&gt;n&lt;/em&gt;）時間計算量があります。</target>
        </trans-unit>
        <trans-unit id="eb0a6b0407963e31db76813c54686486ddeb6e67" translate="yes" xml:space="preserve">
          <source>This conversion may entail doing a check for UTF-8 validity.</source>
          <target state="translated">この変換には、UTF-8の有効性のチェックが必要な場合があります。</target>
        </trans-unit>
        <trans-unit id="0fd6ab28cb16ba2dd2d81ceb7549687e9cec1f65" translate="yes" xml:space="preserve">
          <source>This conversion may entail doing a check for UTF-8 validity. Note that validation is performed because non-UTF-8 strings are perfectly valid for some OS.</source>
          <target state="translated">この変換には、UTF-8の有効性のチェックが必要な場合があります。一部のOSではUTF-8以外の文字列が完全に有効であるため、検証が行われることに注意してください。</target>
        </trans-unit>
        <trans-unit id="8330bc0df78d6eb52dcc8484b74d30aa78ea3703" translate="yes" xml:space="preserve">
          <source>This conversion moves the array to newly heap-allocated memory.</source>
          <target state="translated">この変換は、配列を新たにヒープ割り当てられたメモリに移動させます。</target>
        </trans-unit>
        <trans-unit id="0d8209ee4e143c8cb222975b9c2887b40d4af1c6" translate="yes" xml:space="preserve">
          <source>This conversion requires no data movement or allocation, and has constant time complexity.</source>
          <target state="translated">この変換は、データの移動や割り当てを必要とせず、一定の時間的な複雑さを持っています。</target>
        </trans-unit>
        <trans-unit id="a2f146b8b2fc9fbff68e3aacb1296a0b784db40b" translate="yes" xml:space="preserve">
          <source>This converts the weak pointer into a raw pointer, preserving the original weak count. It can be turned back into the &lt;code&gt;Weak&amp;lt;T&amp;gt;&lt;/code&gt; with &lt;a href=&quot;struct.weak#method.from_raw&quot;&gt;&lt;code&gt;from_raw&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これにより、ウィークポインターが生のポインターに変換され、元のウィークカウントが保持されます。これは、背面に回すことができる &lt;code&gt;Weak&amp;lt;T&amp;gt;&lt;/code&gt; と&lt;a href=&quot;struct.weak#method.from_raw&quot;&gt; &lt;code&gt;from_raw&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="068161e531a8b3af305ba6f7bb36fd2b7ca30a9c" translate="yes" xml:space="preserve">
          <source>This converts the weak pointer into a raw pointer, while still preserving the ownership of one weak reference (the weak count is not modified by this operation). It can be turned back into the &lt;code&gt;Weak&amp;lt;T&amp;gt;&lt;/code&gt; with &lt;a href=&quot;struct.weak#method.from_raw&quot;&gt;&lt;code&gt;from_raw&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これにより、1つの弱参照の所有権を保持したまま、弱ポインタ​​ーが生のポインターに変換されます（弱カウントはこの操作によって変更されません）。これは、背面に回すことができる &lt;code&gt;Weak&amp;lt;T&amp;gt;&lt;/code&gt; と&lt;a href=&quot;struct.weak#method.from_raw&quot;&gt; &lt;code&gt;from_raw&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0c699db8a5191d953bd2f9a766d34a17f9fc7bd1" translate="yes" xml:space="preserve">
          <source>This corresponds to the type returned from a generator either with a &lt;code&gt;return&lt;/code&gt; statement or implicitly as the last expression of a generator literal. For example futures would use this as &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt; as it represents a completed future.</source>
          <target state="translated">これは、 &lt;code&gt;return&lt;/code&gt; ステートメントを使用して、またはジェネレーターリテラルの最後の式として暗黙的に、ジェネレーターから返される型に対応します。たとえば、フューチャーは完成したフューチャーを表すため &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt; これをResult &amp;lt;T、E&amp;gt;として使用します。</target>
        </trans-unit>
        <trans-unit id="4049b3c18034165d976b921c99656187a99b1c48" translate="yes" xml:space="preserve">
          <source>This could be called as &lt;code&gt;&amp;lt;Foo as Foo&amp;gt;::foo()&lt;/code&gt;, which would not be able to pick an implementation.</source>
          <target state="translated">これは &lt;code&gt;&amp;lt;Foo as Foo&amp;gt;::foo()&lt;/code&gt; として呼び出すことができ、実装を選択することはできません。</target>
        </trans-unit>
        <trans-unit id="287539a4f23b39a26818b82e9ae17d404cfd326d" translate="yes" xml:space="preserve">
          <source>This could be caused by a typo. Did you misspell the macro's name?</source>
          <target state="translated">誤字脱字が原因かもしれません。マクロの名前のスペルを間違えたのでしょうか?</target>
        </trans-unit>
        <trans-unit id="13b235947bdbb45d737ce6790102efc941982f83" translate="yes" xml:space="preserve">
          <source>This crate primarily contains a &lt;a href=&quot;https://doc.rust-lang.org/proc_macro/struct.TokenStream.html&quot;&gt;&lt;code&gt;TokenStream&lt;/code&gt;&lt;/a&gt; type. Procedural macros operate over &lt;em&gt;token streams&lt;/em&gt; instead of AST nodes, which is a far more stable interface over time for both the compiler and for procedural macros to target. A &lt;em&gt;token stream&lt;/em&gt; is roughly equivalent to &lt;code&gt;Vec&amp;lt;TokenTree&amp;gt;&lt;/code&gt; where a &lt;code&gt;TokenTree&lt;/code&gt; can roughly be thought of as lexical token. For example &lt;code&gt;foo&lt;/code&gt; is an &lt;code&gt;Ident&lt;/code&gt; token, &lt;code&gt;.&lt;/code&gt; is a &lt;code&gt;Punct&lt;/code&gt; token, and &lt;code&gt;1.2&lt;/code&gt; is a &lt;code&gt;Literal&lt;/code&gt; token. The &lt;code&gt;TokenStream&lt;/code&gt; type, unlike &lt;code&gt;Vec&amp;lt;TokenTree&amp;gt;&lt;/code&gt;, is cheap to clone.</source>
          <target state="translated">このクレートには、主に&lt;a href=&quot;https://doc.rust-lang.org/proc_macro/struct.TokenStream.html&quot;&gt; &lt;code&gt;TokenStream&lt;/code&gt; &lt;/a&gt;タイプが含まれています。手続き型マクロはASTノードの代わりに&lt;em&gt;トークンストリーム&lt;/em&gt;上で動作し&lt;em&gt;ます&lt;/em&gt;。これは、コンパイラーと手続き型マクロの両方が対象とする、時間の経過とともにはるかに安定したインターフェイスです。&lt;em&gt;トークンストリームは、&lt;/em&gt;ほぼ同等である &lt;code&gt;Vec&amp;lt;TokenTree&amp;gt;&lt;/code&gt; &lt;code&gt;TokenTree&lt;/code&gt; は概ね字句トークンと考えることができます。たとえば、 &lt;code&gt;foo&lt;/code&gt; は &lt;code&gt;Ident&lt;/code&gt; トークンです &lt;code&gt;.&lt;/code&gt; ある &lt;code&gt;Punct&lt;/code&gt; トークン、および &lt;code&gt;1.2&lt;/code&gt; がある &lt;code&gt;Literal&lt;/code&gt; トークン。 &lt;code&gt;TokenStream&lt;/code&gt; のタイプは、とは違って &lt;code&gt;Vec&amp;lt;TokenTree&amp;gt;&lt;/code&gt; 、クローンに安いです。</target>
        </trans-unit>
        <trans-unit id="5fc5d0b91b345a05b4241830102cb300bf80ef47" translate="yes" xml:space="preserve">
          <source>This creates another pointer to the same allocation, increasing the strong reference count.</source>
          <target state="translated">これは、同じアロケーションへの別のポインタを作成し、強力な参照カウントを増加させます。</target>
        </trans-unit>
        <trans-unit id="cff1a339d3f6091f32453655f9ee1f32c7930920" translate="yes" xml:space="preserve">
          <source>This creates another pointer to the same inner value, increasing the strong reference count.</source>
          <target state="translated">これにより、同じ内部値への別のポインタが作成され、強力な参照カウントが増加します。</target>
        </trans-unit>
        <trans-unit id="c793b99248db7ed16f6d7097d8baba33c4688bf2" translate="yes" xml:space="preserve">
          <source>This defines a trait with two methods. All values that have &lt;a href=&quot;implementations&quot;&gt;implementations&lt;/a&gt; of this trait while the trait is in scope can have their &lt;code&gt;draw&lt;/code&gt; and &lt;code&gt;bounding_box&lt;/code&gt; methods called.</source>
          <target state="translated">これは、2つのメソッドで特性を定義します。トレイトがスコープ内にあるときにこのトレイトの&lt;a href=&quot;implementations&quot;&gt;実装&lt;/a&gt;を持つすべての値は、 &lt;code&gt;draw&lt;/code&gt; および &lt;code&gt;bounding_box&lt;/code&gt; メソッドを呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="1d48ec195193e5a8a6ddc6d7306e5931fc440ce0" translate="yes" xml:space="preserve">
          <source>This definition is similar to the custom derive macro&amp;rsquo;s signature: we receive the tokens that are inside the parentheses and return the code we wanted to generate.</source>
          <target state="translated">この定義は、カスタム派生マクロの署名に似ています。括弧内にあるトークンを受け取り、生成したいコードを返します。</target>
        </trans-unit>
        <trans-unit id="7ec7ae52304bec8c18c92988cc904eba30640fe1" translate="yes" xml:space="preserve">
          <source>This definition should now make more sense to you. As you can see, &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; is an enum that is generic over type &lt;code&gt;T&lt;/code&gt; and has two variants: &lt;code&gt;Some&lt;/code&gt;, which holds one value of type &lt;code&gt;T&lt;/code&gt;, and a &lt;code&gt;None&lt;/code&gt; variant that doesn&amp;rsquo;t hold any value. By using the &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; enum, we can express the abstract concept of having an optional value, and because &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; is generic, we can use this abstraction no matter what the type of the optional value is.</source>
          <target state="translated">この定義は、あなたにとってより意味のあるものになるはずです。あなたが見ることができるように、 &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; 種類以上の一般的なもので列挙型である &lt;code&gt;T&lt;/code&gt; ：と二つの変種がある &lt;code&gt;Some&lt;/code&gt; 、いずれかのタイプの値を保持 &lt;code&gt;T&lt;/code&gt; 、および &lt;code&gt;None&lt;/code&gt; 任意の値を保持していないバリアントを。 &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; enum を使用することで、オプションの値を持つという抽象的な概念を表現できます &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; はジェネリックであるため、オプションの値のタイプに関係なく、この抽象化を使用できます。</target>
        </trans-unit>
        <trans-unit id="a1dc77bf501a21c3fcf8fcfdb984f36618d4b9d8" translate="yes" xml:space="preserve">
          <source>This demonstrates that we&amp;rsquo;re now using standard output for successful output and standard error for error output as appropriate.</source>
          <target state="translated">これは、正常な出力には標準出力を、エラー出力には標準エラーを適切に使用していることを示しています。</target>
        </trans-unit>
        <trans-unit id="fab63306db027b7791c0993bab148aa9b72c14e9" translate="yes" xml:space="preserve">
          <source>This description is obviously informal. Making it more precise is expected to proceed as part of a general effort to specify the Rust type checker more precisely.</source>
          <target state="translated">この記述は明らかに非公式なものです。より正確にすることは、Rust 型チェッカーをより正確に指定するための一般的な努力の一環として行われることが期待されています。</target>
        </trans-unit>
        <trans-unit id="5155c706e717eca62f9640a389101247c0cf2c80" translate="yes" xml:space="preserve">
          <source>This destructor consists of two components:</source>
          <target state="translated">このデストラクタは2つのコンポーネントから構成されています。</target>
        </trans-unit>
        <trans-unit id="0501267bf2be740a305fdf189b227a4c7486d27e" translate="yes" xml:space="preserve">
          <source>This distinction would also exist in an interpreter. Static checks like syntactic analysis, type checking, and lints should happen before the program is executed regardless of when it is executed.</source>
          <target state="translated">この区別はインタプリタにも存在します。構文解析、型チェック、リントのような静的チェックは、プログラムがいつ実行されたかに関係なく、プログラムが実行される前に行われるべきです。</target>
        </trans-unit>
        <trans-unit id="f074ad4712bf36f567466c2e78802eda538edf52" translate="yes" xml:space="preserve">
          <source>This documentation describes a number of methods and trait implementations on the &lt;code&gt;char&lt;/code&gt; type. For technical reasons, there is additional, separate documentation in &lt;a href=&quot;char/index&quot;&gt;the &lt;code&gt;std::char&lt;/code&gt; module&lt;/a&gt; as well.</source>
          <target state="translated">このドキュメントでは、 &lt;code&gt;char&lt;/code&gt; 型のいくつかのメソッドと特性の実装について説明します。技術的な理由から、&lt;a href=&quot;char/index&quot;&gt; &lt;code&gt;std::char&lt;/code&gt; &lt;/a&gt;モジュールにも追加の個別のドキュメントがあります。</target>
        </trans-unit>
        <trans-unit id="68839ac29f4116303cf30db2371868d96097990a" translate="yes" xml:space="preserve">
          <source>This does call the argument's implementation of &lt;a href=&quot;../ops/trait.drop&quot;&gt;&lt;code&gt;Drop&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これは、引数の&lt;a href=&quot;../ops/trait.drop&quot;&gt; &lt;code&gt;Drop&lt;/code&gt; &lt;/a&gt;の実装を呼び出します。</target>
        </trans-unit>
        <trans-unit id="e9a625eacba45783e02d255cb539fbdd648ae63a" translate="yes" xml:space="preserve">
          <source>This does not include the path to the program as the first argument; it only includes the arguments specified with &lt;a href=&quot;struct.command#method.arg&quot;&gt;&lt;code&gt;Command::arg&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;struct.command#method.args&quot;&gt;&lt;code&gt;Command::args&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これには、最初の引数としてプログラムへのパスは含まれません。&lt;a href=&quot;struct.command#method.arg&quot;&gt; &lt;code&gt;Command::arg&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;struct.command#method.args&quot;&gt; &lt;code&gt;Command::args&lt;/code&gt; &lt;/a&gt;指定された引数のみが含まれます。</target>
        </trans-unit>
        <trans-unit id="46fdf1d9a29edff79b3169310e8e3c74c04e6cd6" translate="yes" xml:space="preserve">
          <source>This does not preserve ordering, but is &lt;em&gt;O&lt;/em&gt;(1).</source>
          <target state="translated">これは順序を保持しませんが、&lt;em&gt;O&lt;/em&gt;（1）です。</target>
        </trans-unit>
        <trans-unit id="cc3143ca0c8ed5c4ad51a7f5632b38d278a744be" translate="yes" xml:space="preserve">
          <source>This does not preserve ordering, but is O(1).</source>
          <target state="translated">これは順序を保持しないが、O(1)である。</target>
        </trans-unit>
        <trans-unit id="302cbd1c584e8c39bda1206e23be2bed7460cc52" translate="yes" xml:space="preserve">
          <source>This does not take ownership of the original allocation and requires no resource management later, but you must not use the pointer after its lifetime.</source>
          <target state="translated">これは元の割り当ての所有権を取らないので、後でリソース管理をする必要はありませんが、そのポインタの寿命が終わった後は使用してはいけません。</target>
        </trans-unit>
        <trans-unit id="601f0aa53280d7fb3fab96e73d4cc042d197513d" translate="yes" xml:space="preserve">
          <source>This does so by calling the argument's implementation of &lt;a href=&quot;../ops/trait.drop&quot;&gt;&lt;code&gt;Drop&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これは、引数の&lt;a href=&quot;../ops/trait.drop&quot;&gt; &lt;code&gt;Drop&lt;/code&gt; &lt;/a&gt;の実装を呼び出すことによって行われます。</target>
        </trans-unit>
        <trans-unit id="7ec03adb1087f5abb7a8507c877e74407679b28c" translate="yes" xml:space="preserve">
          <source>This doesn't actually allocate if &lt;code&gt;T&lt;/code&gt; is zero-sized.</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; のサイズがゼロの場合、これは実際には割り当てられません。</target>
        </trans-unit>
        <trans-unit id="1a27813265527dd550d73a565f67475ec4a26516" translate="yes" xml:space="preserve">
          <source>This effectively does nothing for types which implement &lt;code&gt;Copy&lt;/code&gt;, e.g. integers. Such values are copied and &lt;em&gt;then&lt;/em&gt; moved into the function, so the value persists after this function call.</source>
          <target state="translated">これは、整数など、 &lt;code&gt;Copy&lt;/code&gt; を実装する型には効果がありません。このような値がコピーされ、&lt;em&gt;その後、&lt;/em&gt;機能に移動するので、この関数呼び出し後の値を持続します。</target>
        </trans-unit>
        <trans-unit id="eb1f652575dd2244737e0203d7e6859c386e1f92" translate="yes" xml:space="preserve">
          <source>This enables some memory layout optimization. For example, &lt;code&gt;Option&amp;lt;NonZeroI128&amp;gt;&lt;/code&gt; is the same size as &lt;code&gt;i128&lt;/code&gt;:</source>
          <target state="translated">これにより、メモリレイアウトの最適化が可能になります。たとえば、 &lt;code&gt;Option&amp;lt;NonZeroI128&amp;gt;&lt;/code&gt; はi128と同じサイズ &lt;code&gt;i128&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f67f6cc0c2c10dc19997b3839443098a644f1d26" translate="yes" xml:space="preserve">
          <source>This enables some memory layout optimization. For example, &lt;code&gt;Option&amp;lt;NonZeroI16&amp;gt;&lt;/code&gt; is the same size as &lt;code&gt;i16&lt;/code&gt;:</source>
          <target state="translated">これにより、メモリレイアウトの最適化が可能になります。たとえば、 &lt;code&gt;Option&amp;lt;NonZeroI16&amp;gt;&lt;/code&gt; はi16と同じサイズ &lt;code&gt;i16&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="734061adf87b0795fad2886322ea47c0aec2f2ad" translate="yes" xml:space="preserve">
          <source>This enables some memory layout optimization. For example, &lt;code&gt;Option&amp;lt;NonZeroI32&amp;gt;&lt;/code&gt; is the same size as &lt;code&gt;i32&lt;/code&gt;:</source>
          <target state="translated">これにより、メモリレイアウトの最適化が可能になります。たとえば、 &lt;code&gt;Option&amp;lt;NonZeroI32&amp;gt;&lt;/code&gt; は &lt;code&gt;i32&lt;/code&gt; と同じサイズです。</target>
        </trans-unit>
        <trans-unit id="00340c6c435ce7c1fdb4cf194be81cf07905d3dd" translate="yes" xml:space="preserve">
          <source>This enables some memory layout optimization. For example, &lt;code&gt;Option&amp;lt;NonZeroI64&amp;gt;&lt;/code&gt; is the same size as &lt;code&gt;i64&lt;/code&gt;:</source>
          <target state="translated">これにより、メモリレイアウトの最適化が可能になります。たとえば、 &lt;code&gt;Option&amp;lt;NonZeroI64&amp;gt;&lt;/code&gt; はi64と同じサイズ &lt;code&gt;i64&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="278e3b6e04cd3eac83950c68db7f2e8e510eb775" translate="yes" xml:space="preserve">
          <source>This enables some memory layout optimization. For example, &lt;code&gt;Option&amp;lt;NonZeroI8&amp;gt;&lt;/code&gt; is the same size as &lt;code&gt;i8&lt;/code&gt;:</source>
          <target state="translated">これにより、メモリレイアウトの最適化が可能になります。たとえば、 &lt;code&gt;Option&amp;lt;NonZeroI8&amp;gt;&lt;/code&gt; は &lt;code&gt;i8&lt;/code&gt; と同じサイズです。</target>
        </trans-unit>
        <trans-unit id="d6a41567af1e9968e9c90e92ec21b8804316cfe8" translate="yes" xml:space="preserve">
          <source>This enables some memory layout optimization. For example, &lt;code&gt;Option&amp;lt;NonZeroIsize&amp;gt;&lt;/code&gt; is the same size as &lt;code&gt;isize&lt;/code&gt;:</source>
          <target state="translated">これにより、メモリレイアウトの最適化が可能になります。たとえば、 &lt;code&gt;Option&amp;lt;NonZeroIsize&amp;gt;&lt;/code&gt; はisizeと同じサイズ &lt;code&gt;isize&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cf2e6ed40009c7af3e4c82c9a64e0f2f0797bce2" translate="yes" xml:space="preserve">
          <source>This enables some memory layout optimization. For example, &lt;code&gt;Option&amp;lt;NonZeroU128&amp;gt;&lt;/code&gt; is the same size as &lt;code&gt;u128&lt;/code&gt;:</source>
          <target state="translated">これにより、メモリレイアウトの最適化が可能になります。たとえば、 &lt;code&gt;Option&amp;lt;NonZeroU128&amp;gt;&lt;/code&gt; はu128と同じサイズ &lt;code&gt;u128&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="76da8b2ba60cec40f8f5e62e107f1dbcb755bbbb" translate="yes" xml:space="preserve">
          <source>This enables some memory layout optimization. For example, &lt;code&gt;Option&amp;lt;NonZeroU16&amp;gt;&lt;/code&gt; is the same size as &lt;code&gt;u16&lt;/code&gt;:</source>
          <target state="translated">これにより、メモリレイアウトの最適化が可能になります。たとえば、 &lt;code&gt;Option&amp;lt;NonZeroU16&amp;gt;&lt;/code&gt; はu16と同じサイズ &lt;code&gt;u16&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ccbf5b5bf97bc9198c28f18b82543d27c5b27285" translate="yes" xml:space="preserve">
          <source>This enables some memory layout optimization. For example, &lt;code&gt;Option&amp;lt;NonZeroU32&amp;gt;&lt;/code&gt; is the same size as &lt;code&gt;u32&lt;/code&gt;:</source>
          <target state="translated">これにより、メモリレイアウトの最適化が可能になります。たとえば、 &lt;code&gt;Option&amp;lt;NonZeroU32&amp;gt;&lt;/code&gt; は &lt;code&gt;u32&lt;/code&gt; と同じサイズです。</target>
        </trans-unit>
        <trans-unit id="538d2876995cecf5e64928ddfeb01ab1a800bbde" translate="yes" xml:space="preserve">
          <source>This enables some memory layout optimization. For example, &lt;code&gt;Option&amp;lt;NonZeroU64&amp;gt;&lt;/code&gt; is the same size as &lt;code&gt;u64&lt;/code&gt;:</source>
          <target state="translated">これにより、メモリレイアウトの最適化が可能になります。たとえば、 &lt;code&gt;Option&amp;lt;NonZeroU64&amp;gt;&lt;/code&gt; はu64と同じサイズ &lt;code&gt;u64&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d0129491a9c802e31402a256b2ed3248526999bd" translate="yes" xml:space="preserve">
          <source>This enables some memory layout optimization. For example, &lt;code&gt;Option&amp;lt;NonZeroU8&amp;gt;&lt;/code&gt; is the same size as &lt;code&gt;u8&lt;/code&gt;:</source>
          <target state="translated">これにより、メモリレイアウトの最適化が可能になります。たとえば、 &lt;code&gt;Option&amp;lt;NonZeroU8&amp;gt;&lt;/code&gt; はu8と同じサイズ &lt;code&gt;u8&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="444ef8a1b6149aa40edb45ac918d2fcc6dd0e6a5" translate="yes" xml:space="preserve">
          <source>This enables some memory layout optimization. For example, &lt;code&gt;Option&amp;lt;NonZeroUsize&amp;gt;&lt;/code&gt; is the same size as &lt;code&gt;usize&lt;/code&gt;:</source>
          <target state="translated">これにより、メモリレイアウトの最適化が可能になります。たとえば、 &lt;code&gt;Option&amp;lt;NonZeroUsize&amp;gt;&lt;/code&gt; はusizeと同じサイズ &lt;code&gt;usize&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="05b9c29faea2a683215e0b23ceda6c29cb84253c" translate="yes" xml:space="preserve">
          <source>This enum can contain either an &lt;a href=&quot;struct.ipv4addr&quot;&gt;&lt;code&gt;Ipv4Addr&lt;/code&gt;&lt;/a&gt; or an &lt;a href=&quot;struct.ipv6addr&quot;&gt;&lt;code&gt;Ipv6Addr&lt;/code&gt;&lt;/a&gt;, see their respective documentation for more details.</source>
          <target state="translated">この列挙型は、どちらか含めることができます&lt;a href=&quot;struct.ipv4addr&quot;&gt; &lt;code&gt;Ipv4Addr&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;struct.ipv6addr&quot;&gt; &lt;code&gt;Ipv6Addr&lt;/code&gt; が&lt;/a&gt;、詳細については、それぞれのマニュアルを参照してください。</target>
        </trans-unit>
        <trans-unit id="760b8f1ec007bba813777fc9f56dd941c92b8841" translate="yes" xml:space="preserve">
          <source>This enum has four variants with different types:</source>
          <target state="translated">このenumには、タイプの異なる4つのバリアントがあります。</target>
        </trans-unit>
        <trans-unit id="ced6caa3ad1703b55bcd5c2e59bf560b6691cb01" translate="yes" xml:space="preserve">
          <source>This enum has the same role as &lt;a href=&quot;../primitive.never&quot;&gt;the &lt;code&gt;!&lt;/code&gt; &amp;ldquo;never&amp;rdquo; type&lt;/a&gt;, which is unstable in this version of Rust. When &lt;code&gt;!&lt;/code&gt; is stabilized, we plan to make &lt;code&gt;Infallible&lt;/code&gt; a type alias to it:</source>
          <target state="translated">この列挙型は&lt;a href=&quot;../primitive.never&quot;&gt;、 &lt;code&gt;!&lt;/code&gt; &lt;/a&gt;Reverのこのバージョンでは不安定な「never」タイプ。いつ &lt;code&gt;!&lt;/code&gt; が安定している場合は、 &lt;code&gt;Infallible&lt;/code&gt; をそのタイプエイリアスにする予定です。</target>
        </trans-unit>
        <trans-unit id="6ee104c9c1676af30fcb1ff39c18e2ed9e455f59" translate="yes" xml:space="preserve">
          <source>This enum is returned from the &lt;code&gt;Generator::resume&lt;/code&gt; method and indicates the possible return values of a generator. Currently this corresponds to either a suspension point (&lt;code&gt;Yielded&lt;/code&gt;) or a termination point (&lt;code&gt;Complete&lt;/code&gt;).</source>
          <target state="translated">この列挙型は &lt;code&gt;Generator::resume&lt;/code&gt; メソッドから返され、ジェネレーターの戻り値の可能性を示します。現在、これは中断ポイント（ &lt;code&gt;Yielded&lt;/code&gt; ）または終了ポイント（ &lt;code&gt;Complete&lt;/code&gt; ）に対応しています。</target>
        </trans-unit>
        <trans-unit id="1703fcf1fccea6643fefc20e49e4c80e84f95499" translate="yes" xml:space="preserve">
          <source>This enumeration is the list of possible errors that made &lt;a href=&quot;struct.receiver#method.recv_timeout&quot;&gt;&lt;code&gt;recv_timeout&lt;/code&gt;&lt;/a&gt; unable to return data when called. This can occur with both a &lt;a href=&quot;fn.channel&quot;&gt;&lt;code&gt;channel&lt;/code&gt;&lt;/a&gt; and a &lt;a href=&quot;fn.sync_channel&quot;&gt;&lt;code&gt;sync_channel&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この列挙は、&lt;a href=&quot;struct.receiver#method.recv_timeout&quot;&gt; &lt;code&gt;recv_timeout&lt;/code&gt; が呼び出さ&lt;/a&gt;れたときにデータを返せなかった可能性のあるエラーのリストです。これは、&lt;a href=&quot;fn.channel&quot;&gt; &lt;code&gt;channel&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;fn.sync_channel&quot;&gt; &lt;code&gt;sync_channel&lt;/code&gt; の&lt;/a&gt;両方で発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="cbe05c4f5a229c7e20d58b03f49460f0df3da02f" translate="yes" xml:space="preserve">
          <source>This enumeration is the list of the possible error outcomes for the &lt;a href=&quot;struct.syncsender#method.try_send&quot;&gt;&lt;code&gt;try_send&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">この列挙は、&lt;a href=&quot;struct.syncsender#method.try_send&quot;&gt; &lt;code&gt;try_send&lt;/code&gt; &lt;/a&gt;メソッドの考えられるエラー結果のリストです。</target>
        </trans-unit>
        <trans-unit id="6dc63139830daa8f080f2bf636d153d6ed98ad21" translate="yes" xml:space="preserve">
          <source>This enumeration is the list of the possible reasons that &lt;a href=&quot;struct.receiver#method.try_recv&quot;&gt;&lt;code&gt;try_recv&lt;/code&gt;&lt;/a&gt; could not return data when called. This can occur with both a &lt;a href=&quot;fn.channel&quot;&gt;&lt;code&gt;channel&lt;/code&gt;&lt;/a&gt; and a &lt;a href=&quot;fn.sync_channel&quot;&gt;&lt;code&gt;sync_channel&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この列挙は、&lt;a href=&quot;struct.receiver#method.try_recv&quot;&gt; &lt;code&gt;try_recv&lt;/code&gt; &lt;/a&gt;が呼び出されたときにデータを返せなかった考えられる理由のリストです。これは、&lt;a href=&quot;fn.channel&quot;&gt; &lt;code&gt;channel&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;fn.sync_channel&quot;&gt; &lt;code&gt;sync_channel&lt;/code&gt; の&lt;/a&gt;両方で発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="c1093396faf4de8ad558d41dcf5187f56b3280a8" translate="yes" xml:space="preserve">
          <source>This error also frequently arises with iteration:</source>
          <target state="translated">このエラーはイテレーションでも頻繁に発生します。</target>
        </trans-unit>
        <trans-unit id="94b9a993ad00befb67d90a954bbd93d2df863b1b" translate="yes" xml:space="preserve">
          <source>This error appears when the curly braces contain an identifier which doesn't match with any of the type parameters or the string &lt;code&gt;Self&lt;/code&gt;. This might happen if you misspelled a type parameter, or if you intended to use literal curly braces. If it is the latter, escape the curly braces with a second curly brace of the same type; e.g., a literal &lt;code&gt;{&lt;/code&gt; is &lt;code&gt;{{&lt;/code&gt;.</source>
          <target state="translated">このエラーは、中括弧にタイプパラメータまたは文字列 &lt;code&gt;Self&lt;/code&gt; と一致しない識別子が含まれている場合に表示されます。これは、型パラメーターのスペルを間違えた場合、またはリテラルの中かっこを使用する場合に発生する可能性があります。後者の場合は、同じタイプの2番目の中括弧で中括弧をエスケープします。たとえば、リテラル &lt;code&gt;{&lt;/code&gt; は &lt;code&gt;{{&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="584182c12fbcdc7236283566d4fe892f8514a84a" translate="yes" xml:space="preserve">
          <source>This error appears when the curly braces do not contain an identifier. Please add one of the same name as a type parameter. If you intended to use literal braces, use &lt;code&gt;{{&lt;/code&gt; and &lt;code&gt;}}&lt;/code&gt; to escape them.</source>
          <target state="translated">このエラーは、中括弧に識別子が含まれていない場合に表示されます。タイプパラメータとして同じ名前の1つを追加してください。中かっこを使用する場合は、 &lt;code&gt;{{&lt;/code&gt; および &lt;code&gt;}}&lt;/code&gt; を使用してエスケープします。</target>
        </trans-unit>
        <trans-unit id="0250b09263b0cf211b3144438a4935e1e43d799a" translate="yes" xml:space="preserve">
          <source>This error can be fixed by changing &lt;code&gt;demo&lt;/code&gt; so that the destructor does not run while the string-data is borrowed; for example by taking &lt;code&gt;S&lt;/code&gt; by reference:</source>
          <target state="translated">このエラーは、文字列データが借用されている間、デストラクタが実行されないように &lt;code&gt;demo&lt;/code&gt; を変更することで修正できます。たとえば、参照によって &lt;code&gt;S&lt;/code&gt; を取得することにより：</target>
        </trans-unit>
        <trans-unit id="cf00137495add2df4af51c96509efb72f8de11bd" translate="yes" xml:space="preserve">
          <source>This error can be fixed by creating a reference to the fields of a struct, enum, or tuple using the &lt;code&gt;ref&lt;/code&gt; keyword:</source>
          <target state="translated">このエラーは、 &lt;code&gt;ref&lt;/code&gt; キーワードを使用して、構造体、列挙型、またはタプルのフィールドへの参照を作成することで修正できます。</target>
        </trans-unit>
        <trans-unit id="0dff7bc132443224671e948d9ffe4c7e1624395f" translate="yes" xml:space="preserve">
          <source>This error can be fixed by fully reinitializing the structure in question:</source>
          <target state="translated">このエラーは、問題の構造体を完全に再初期化することで修正することができます。</target>
        </trans-unit>
        <trans-unit id="9c719c44866ac61477960cb8b276b7f76f8c6533" translate="yes" xml:space="preserve">
          <source>This error can be fixed by making the container mutable:</source>
          <target state="translated">このエラーは、コンテナを mutable にすることで修正することができます。</target>
        </trans-unit>
        <trans-unit id="413b5d16e5f0759b900c5fe5dc8c6c4f80d50366" translate="yes" xml:space="preserve">
          <source>This error can be solved by adding type annotations that provide the missing information to the compiler. In this case, the solution is to use a concrete type:</source>
          <target state="translated">このエラーは、コンパイラに不足している情報を提供する型アノテーションを追加することで解決できます。この場合、解決策は具象型を使用することです。</target>
        </trans-unit>
        <trans-unit id="2f0e10eb9c6b47c452a0e1f4fb8a082452a2d703" translate="yes" xml:space="preserve">
          <source>This error code indicates a mismatch between the lifetimes appearing in the function signature (i.e., the parameter types and the return type) and the data-flow found in the function body.</source>
          <target state="translated">このエラー・コードは、関数シグネチャ(すなわち、パラメータ・タイプとリターン・タイプ)に現れるライフタイムと、関数本体に見られるデータ・フローとの間の不一致を示します。</target>
        </trans-unit>
        <trans-unit id="21caa47590bc7c04cd88dfba7269f8c13368e7a3" translate="yes" xml:space="preserve">
          <source>This error generally appears when two items with the same name are imported into a module. Here, the &lt;code&gt;foo&lt;/code&gt; functions are imported and reexported from the &lt;code&gt;collider&lt;/code&gt; module and therefore, when we're using &lt;code&gt;collider::foo()&lt;/code&gt;, both functions collide.</source>
          <target state="translated">このエラーは通常、同じ名前の2つのアイテムがモジュールにインポートされたときに発生します。ここでは、 &lt;code&gt;foo&lt;/code&gt; 関数が &lt;code&gt;collider&lt;/code&gt; モジュールからインポートおよび再エクスポートされるため、 &lt;code&gt;collider::foo()&lt;/code&gt; を使用している場合、両方の関数が衝突します。</target>
        </trans-unit>
        <trans-unit id="3dfae522bf711393bcf17e2c72e0d218bd40909c" translate="yes" xml:space="preserve">
          <source>This error indicates a type mismatch in closure arguments.</source>
          <target state="translated">このエラーは、クロージャ引数の型の不一致を示します。</target>
        </trans-unit>
        <trans-unit id="1f7e9e73655654d551ddbe67dfdca41396aade3d" translate="yes" xml:space="preserve">
          <source>This error indicates a violation of one of Rust's orphan rules for trait implementations. The rule concerns the use of type parameters in an implementation of a foreign trait (a trait defined in another crate), and states that type parameters must be &quot;covered&quot; by a local type.</source>
          <target state="translated">このエラーは、Rust の trait 実装のためのオーファン ルールの 1 つに違反していることを示しています。このルールは、外国の形質(別の木枠で定義された形質)の実装における型パラメータの使用に関するもので、型パラメータはローカル型によって &quot;カバー &quot;されなければならないとされています。</target>
        </trans-unit>
        <trans-unit id="5926fa6825473ce8b14051d29bff524913459d93" translate="yes" xml:space="preserve">
          <source>This error indicates a violation of one of Rust's orphan rules for trait implementations. The rule concerns the use of type parameters in an implementation of a foreign trait (a trait defined in another crate), and states that type parameters must be &quot;covered&quot; by a local type. To understand what this means, it is perhaps easiest to consider a few examples.</source>
          <target state="translated">このエラーは、Rust の trait 実装のためのオーファン ルールの 1 つに違反していることを示しています。このルールは、外国の形質(別の木枠で定義された形質)の実装における型パラメータの使用に関するもので、型パラメータはローカル型によって &quot;カバー &quot;されなければならないと規定されています。これが何を意味するのかを理解するには、いくつかの例を考えるのが一番簡単でしょう。</target>
        </trans-unit>
        <trans-unit id="62c66f8f6d53d3993670c86c1f09308676282e5b" translate="yes" xml:space="preserve">
          <source>This error indicates a violation of one of Rust's orphan rules for trait implementations. The rule prohibits any implementation of a foreign trait (a trait defined in another crate) where</source>
          <target state="translated">このエラーは、Rustの特徴の実装に関するオーファンルールの1つに違反していることを示しています。このルールは、次のような場合に、外国の形質(別の木箱で定義された形質)の実装を禁止しています。</target>
        </trans-unit>
        <trans-unit id="447a5e9fa4c8cf25c5cd5302f4311b3fbd33ec5e" translate="yes" xml:space="preserve">
          <source>This error indicates that a &lt;code&gt;#[lang = &quot;..&quot;]&lt;/code&gt; attribute was placed on the wrong type of item.</source>
          <target state="translated">このエラーは、 &lt;code&gt;#[lang = &quot;..&quot;]&lt;/code&gt; 属性が間違ったタイプのアイテムに配置されたことを示しています。</target>
        </trans-unit>
        <trans-unit id="04b6c6e07e059a0181ccbe377eeeabdfa436d081" translate="yes" xml:space="preserve">
          <source>This error indicates that a &lt;code&gt;#[non_exhaustive]&lt;/code&gt; attribute was incorrectly placed on something other than a struct or enum.</source>
          <target state="translated">このエラーは、 &lt;code&gt;#[non_exhaustive]&lt;/code&gt; 属性が構造体または列挙型以外のものに誤って配置されたことを示しています。</target>
        </trans-unit>
        <trans-unit id="7022f431bbd32573cf9101aaa229f54136c6e815" translate="yes" xml:space="preserve">
          <source>This error indicates that a &lt;code&gt;#[repr(..)]&lt;/code&gt; attribute was placed on an unsupported item.</source>
          <target state="translated">このエラーは、 &lt;code&gt;#[repr(..)]&lt;/code&gt; 属性がサポートされていないアイテムに配置されたことを示します。</target>
        </trans-unit>
        <trans-unit id="ca9d1588d95295137d9296e3cc73990ee881720a" translate="yes" xml:space="preserve">
          <source>This error indicates that a binary assignment operator like &lt;code&gt;+=&lt;/code&gt; or &lt;code&gt;^=&lt;/code&gt; was applied to a type that doesn't support it. For example:</source>
          <target state="translated">このエラーは、 &lt;code&gt;+=&lt;/code&gt; や &lt;code&gt;^=&lt;/code&gt; などのバイナリ代入演算子が、それをサポートしない型に適用されたことを示しています。例えば：</target>
        </trans-unit>
        <trans-unit id="942586ad68f246da14ea422c40de5e3f0b9face6" translate="yes" xml:space="preserve">
          <source>This error indicates that a incorrect visibility restriction was specified.</source>
          <target state="translated">このエラーは、不正な可視性制限が指定されたことを示します。</target>
        </trans-unit>
        <trans-unit id="0ed5220e5bb81a5a254920c1211412f9ef92a217" translate="yes" xml:space="preserve">
          <source>This error indicates that a lifetime is missing from a type. If it is an error inside a function signature, the problem may be with failing to adhere to the lifetime elision rules (see below).</source>
          <target state="translated">このエラーは、型からライフタイムが抜けていることを示します。これが関数シグネチャ内のエラーである場合、問題はライフタイムのエリシオンルールを守らなかったことにあるかもしれません (後述)。</target>
        </trans-unit>
        <trans-unit id="163c07e3082230bfd9dd310e7a36d455707b90b1" translate="yes" xml:space="preserve">
          <source>This error indicates that a mutable variable is being used while it is still captured by a closure. Because the closure has borrowed the variable, it is not available for use until the closure goes out of scope.</source>
          <target state="translated">このエラーは、クロージャによって捕捉されている間に突然変異可能な変数が使用されていることを示しています。クロージャがその変数を借用しているため、クロージャがスコープ外になるまで使用することはできません。</target>
        </trans-unit>
        <trans-unit id="5f5aeaeedbb41e69e7d361beb7e7f664611c650d" translate="yes" xml:space="preserve">
          <source>This error indicates that a mutable variable is used while it is still captured by a closure. Because the closure has borrowed the variable, it is not available until the closure goes out of scope.</source>
          <target state="translated">このエラーは、クロージャによって捕捉されたままの突然変異可能な変数が使用されていることを示しています。クロージャがその変数を借用しているため、クロージャがスコープ外になるまでその変数を使用することはできません。</target>
        </trans-unit>
        <trans-unit id="f276e617d109dc1e2831917bc3e9ec17e8a46ef1" translate="yes" xml:space="preserve">
          <source>This error indicates that a pattern for a struct fails to specify a sub-pattern for every one of the struct's fields. Ensure that each field from the struct's definition is mentioned in the pattern, or use &lt;code&gt;..&lt;/code&gt; to ignore unwanted fields.</source>
          <target state="translated">このエラーは、構造体のパターンが、構造体のすべてのフィールドのサブパターンを指定できないことを示しています。構造体の定義の各フィールドがパターンに記載されていることを確認するか、 &lt;code&gt;..&lt;/code&gt; を使用して不要なフィールドを無視します。</target>
        </trans-unit>
        <trans-unit id="cf2673db078cb233aef2cf4d975d04209851d888" translate="yes" xml:space="preserve">
          <source>This error indicates that a pointer to a trait type cannot be implicitly dereferenced by a pattern. Every trait defines a type, but because the size of trait implementors isn't fixed, this type has no compile-time size. Therefore, all accesses to trait types must be through pointers. If you encounter this error you should try to avoid dereferencing the pointer.</source>
          <target state="translated">このエラーは、形質型へのポインタがパターンによって暗黙的に参照されないことを示しています。すべての trait は型を定義していますが、 trait の実装者のサイズは固定されていないので、この型はコンパイル時のサイズを持っていません。したがって、形質型へのアクセスはすべてポインタを介して行わなければなりません。このエラーに遭遇した場合は、ポインタを参照しないようにしなければなりません。</target>
        </trans-unit>
        <trans-unit id="828017bc333a648d7ba2ba05b6d8defb66538498" translate="yes" xml:space="preserve">
          <source>This error indicates that a struct pattern attempted to extract a non-existent field from a struct. Struct fields are identified by the name used before the colon &lt;code&gt;:&lt;/code&gt; so struct patterns should resemble the declaration of the struct type being matched.</source>
          <target state="translated">このエラーは、構造体パターンが存在しないフィールドを構造体から抽出しようとしたことを示しています。構造体フィールドは、コロンの前に使用される名前で識別されます &lt;code&gt;:&lt;/code&gt; したがって、構造体パターンは、一致する構造体型の宣言に似ている必要があります。</target>
        </trans-unit>
        <trans-unit id="8fe4ff510197fbaaaaa06c8b33b203c1e4dc7f1a" translate="yes" xml:space="preserve">
          <source>This error indicates that a temporary value is being dropped while a borrow is still in active use.</source>
          <target state="translated">このエラーは、借用中に一時的な値が削除されたことを示します。</target>
        </trans-unit>
        <trans-unit id="29f636e2d8527491e9c968890f3142a6d2d79a49" translate="yes" xml:space="preserve">
          <source>This error indicates that a type or lifetime parameter has been declared but not actually used. Here is an example that demonstrates the error:</source>
          <target state="translated">このエラーは、型またはライフタイム・パラメータが宣言されているが、実際には使用されていないことを示しています。以下に、このエラーを示す例を示します。</target>
        </trans-unit>
        <trans-unit id="021899c7481112f5b1115194dfebb6c6433d75e6" translate="yes" xml:space="preserve">
          <source>This error indicates that a variable usage inside an inner function is invalid because the variable comes from a dynamic environment. Inner functions do not have access to their containing environment.</source>
          <target state="translated">このエラーは、変数が動的環境から来ているため、内部関数内での変数の使用が無効であることを示しています。内部関数は、その内部環境にアクセスすることができません。</target>
        </trans-unit>
        <trans-unit id="ee2b7895f62fe245340d50c3f8c134d38d139ea0" translate="yes" xml:space="preserve">
          <source>This error indicates that an &lt;code&gt;#[inline(..)]&lt;/code&gt; attribute was incorrectly placed on something other than a function or method.</source>
          <target state="translated">このエラーは、 &lt;code&gt;#[inline(..)]&lt;/code&gt; 属性が関数またはメソッド以外のものに誤って配置されたことを示しています。</target>
        </trans-unit>
        <trans-unit id="b354ce81cf352c1f70206a250c5709ec2f51795d" translate="yes" xml:space="preserve">
          <source>This error indicates that an attempted implementation of a trait method has the wrong number of function parameters.</source>
          <target state="translated">このエラーは、形質メソッドの実装を試みた際に、関数パラメータの数が間違っていることを示しています。</target>
        </trans-unit>
        <trans-unit id="e0c31ba5c6bda555cd8ea81a836bf176c496c77b" translate="yes" xml:space="preserve">
          <source>This error indicates that an attempted implementation of a trait method has the wrong number of type or const parameters.</source>
          <target state="translated">このエラーは、形質メソッドの実装を試みた際に、型または const パラメータの数が間違っていることを示しています。</target>
        </trans-unit>
        <trans-unit id="b75e5fdc31d31d1c4e71b1b39da466c4c14335c3" translate="yes" xml:space="preserve">
          <source>This error indicates that an empty match expression is invalid because the type it is matching on is non-empty (there exist values of this type). In safe code it is impossible to create an instance of an empty type, so empty match expressions are almost never desired. This error is typically fixed by adding one or more cases to the match expression.</source>
          <target state="translated">このエラーは、マッチングする型が空ではない (この型の値が存在する)ため、空のマッチ式が無効であることを示します。安全なコードでは、空の型のインスタンスを作成することは不可能なので、空のマッチ式はほとんど望まれません。このエラーは、通常、マッチ式に 1 つ以上のケースを追加することで修正されます。</target>
        </trans-unit>
        <trans-unit id="aa5d0ed3544dd02116d741311bf5dc31cbf1e877" translate="yes" xml:space="preserve">
          <source>This error indicates that during an attempt to build a struct or struct-like enum variant, one of the fields was not provided. Erroneous code example:</source>
          <target state="translated">このエラーは、構造体または構造体に似た列挙バリアントを構築しようとしたときに、フィールドの 1 つが提供されなかったことを示しています。誤ったコード例です。</target>
        </trans-unit>
        <trans-unit id="4fe613edd2e0d9ed1781cdd172cb95fcc86dda95" translate="yes" xml:space="preserve">
          <source>This error indicates that during an attempt to build a struct or struct-like enum variant, one of the fields was specified more than once. Each field should be specified exactly one time. Example:</source>
          <target state="translated">このエラーは、struct または struct-like enum variant を構築しようとしたときに、フィールドの 1 つが複数回指定されたことを示しています。各フィールドは正確に一度だけ指定する必要があります。例を参照してください。</target>
        </trans-unit>
        <trans-unit id="3e8ed17cc79bcd070351fc2c779882f025c94d0d" translate="yes" xml:space="preserve">
          <source>This error indicates that during an attempt to build a struct or struct-like enum variant, one of the fields was specified more than once. Erroneous code example:</source>
          <target state="translated">このエラーは、struct または struct-like enum variant を構築しようとしたときに、フィールドの 1 つが複数回指定されたことを示します。誤ったコード例です。</target>
        </trans-unit>
        <trans-unit id="184a0c9f21c2159367397ab03b1af11810a4b7a9" translate="yes" xml:space="preserve">
          <source>This error indicates that next we need to create an associated function named &lt;code&gt;new&lt;/code&gt; for &lt;code&gt;ThreadPool&lt;/code&gt;. We also know that &lt;code&gt;new&lt;/code&gt; needs to have one parameter that can accept &lt;code&gt;4&lt;/code&gt; as an argument and should return a &lt;code&gt;ThreadPool&lt;/code&gt; instance. Let&amp;rsquo;s implement the simplest &lt;code&gt;new&lt;/code&gt; function that will have those characteristics:</source>
          <target state="translated">このエラーは、次に、 &lt;code&gt;ThreadPool&lt;/code&gt; の &lt;code&gt;new&lt;/code&gt; という名前の関連する関数を作成する必要があることを示しています。また、 &lt;code&gt;new&lt;/code&gt; には、引数として &lt;code&gt;4&lt;/code&gt; を受け入れることができる1つのパラメーターが必要であり、 &lt;code&gt;ThreadPool&lt;/code&gt; インスタンスを返す必要があることも知っています。これらの特性を持つ最も単純な &lt;code&gt;new&lt;/code&gt; 関数を実装しましょう：</target>
        </trans-unit>
        <trans-unit id="2dad13e650883f25d2104ae52eca1fef407497bf" translate="yes" xml:space="preserve">
          <source>This error indicates that not enough type parameters were found in a type or trait.</source>
          <target state="translated">このエラーは、型または形質の中に十分な型パラメータが見つからなかったことを示しています。</target>
        </trans-unit>
        <trans-unit id="ca21a72c98d3df2023442d374a3dadbb098c691b" translate="yes" xml:space="preserve">
          <source>This error indicates that some types or traits depend on each other and therefore cannot be constructed.</source>
          <target state="translated">このエラーは、いくつかの型や形質が互いに依存しているため、構築できないことを示しています。</target>
        </trans-unit>
        <trans-unit id="04671a501f0a2d188e9fcc11f1a02fbc634b9fe6" translate="yes" xml:space="preserve">
          <source>This error indicates that the bindings in a match arm would require a value to be moved into more than one location, thus violating unique ownership. Code like the following is invalid as it requires the entire &lt;code&gt;Option&amp;lt;String&amp;gt;&lt;/code&gt; to be moved into a variable called &lt;code&gt;op_string&lt;/code&gt; while simultaneously requiring the inner &lt;code&gt;String&lt;/code&gt; to be moved into a variable called &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="translated">このエラーは、マッチアームのバインディングが値を複数の場所に移動する必要があるため、一意の所有権に違反することを示しています。次のようなコードは、 &lt;code&gt;Option&amp;lt;String&amp;gt;&lt;/code&gt; 全体を &lt;code&gt;op_string&lt;/code&gt; と呼ばれる変数に移動する必要があると同時に、内部の &lt;code&gt;String&lt;/code&gt; を &lt;code&gt;s&lt;/code&gt; と呼ばれる変数に移動する必要があるため、無効です。</target>
        </trans-unit>
        <trans-unit id="0593569b391769294fc0cbd6c435421f4f05566e" translate="yes" xml:space="preserve">
          <source>This error indicates that the compiler cannot guarantee a matching pattern for one or more possible inputs to a match expression. Guaranteed matches are required in order to assign values to match expressions, or alternatively, determine the flow of execution.</source>
          <target state="translated">このエラーは、コンパイラがマッチ式への 1 つ以上の入力に対してマッチング・パターンを保証できないことを示しています。マッチ式に値を割り当てるか、または実行のフローを決定するには、保証されたマッチが必要です。</target>
        </trans-unit>
        <trans-unit id="e6ec80fb058ca19fb5e7892d541e007d08b04d8f" translate="yes" xml:space="preserve">
          <source>This error indicates that the compiler cannot guarantee a matching pattern for one or more possible inputs to a match expression. Guaranteed matches are required in order to assign values to match expressions, or alternatively, determine the flow of execution. Erroneous code example:</source>
          <target state="translated">このエラーは、コンパイラがマッチ式への 1 つ以上の入力に対してマッチング・パターンを保証できないことを示しています。マッチ式に値を割り当てるため、または実行のフローを決定するためには、保証されたマッチが必要です。誤ったコード例。</target>
        </trans-unit>
        <trans-unit id="561856cda5e25152013aec070f3d54bab7aa1df8" translate="yes" xml:space="preserve">
          <source>This error indicates that the compiler found multiple functions with the &lt;code&gt;#[main]&lt;/code&gt; attribute. This is an error because there must be a unique entry point into a Rust program. Example:</source>
          <target state="translated">このエラーは、コンパイラが &lt;code&gt;#[main]&lt;/code&gt; 属性を持つ複数の関数を見つけたことを示しています。Rustプログラムへの一意のエントリポイントが必要なため、これはエラーです。例：</target>
        </trans-unit>
        <trans-unit id="5bea3375dcc80f531e3766516bd9f6d7115c2ccf" translate="yes" xml:space="preserve">
          <source>This error indicates that the compiler found multiple functions with the &lt;code&gt;#[start]&lt;/code&gt; attribute. This is an error because there must be a unique entry point into a Rust program. Example:</source>
          <target state="translated">このエラーは、コンパイラが &lt;code&gt;#[start]&lt;/code&gt; 属性を持つ複数の関数を見つけたことを示しています。Rustプログラムへの一意のエントリポイントが必要なため、これはエラーです。例：</target>
        </trans-unit>
        <trans-unit id="8f30ae6ab3b3757a6fafd59d7ba821bfd1db82b1" translate="yes" xml:space="preserve">
          <source>This error indicates that the compiler was unable to sensibly evaluate a constant expression that had to be evaluated. Attempting to divide by 0 or causing an integer overflow are two ways to induce this error.</source>
          <target state="translated">このエラーは、コンパイラが評価する必要のある定数式を賢明に評価できなかったことを示しています。0 で割ろうとするか、整数オーバーフローを起こすと、このエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="f36d8b8d1d8446198729b807cb2a4a2419af004e" translate="yes" xml:space="preserve">
          <source>This error indicates that the compiler was unable to sensibly evaluate an constant expression that had to be evaluated. Attempting to divide by 0 or causing integer overflow are two ways to induce this error. For example:</source>
          <target state="translated">このエラーは、コンパイラが評価する必要のある定数式を賢明に評価できなかったことを示しています。0 で割ろうとしたり、整数オーバーフローを起こしたりすると、このエラーが発生します。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="6a1e2255560b86b2d9499ff55662d827b519b332" translate="yes" xml:space="preserve">
          <source>This error indicates that the numeric value for the method being passed exists but the type of the numeric value or binding could not be identified.</source>
          <target state="translated">このエラーは、渡されるメソッドの数値は存在するが、数値またはバインディングの型が特定できなかったことを示します。</target>
        </trans-unit>
        <trans-unit id="148347b598d68fa69c31f92c37c1da55d76c0063" translate="yes" xml:space="preserve">
          <source>This error indicates that the struct, enum or enum variant cannot be instantiated from outside of the defining crate as it has been marked as &lt;code&gt;non_exhaustive&lt;/code&gt; and as such more fields/variants may be added in future that could cause adverse side effects for this code.</source>
          <target state="translated">このエラーは、struct、enum、またはenumバリアントが &lt;code&gt;non_exhaustive&lt;/code&gt; としてマークされているため、定義するクレートの外部からインスタンス化できないことを示しています。このコードに悪影響を引き起こす可能性があるフィールドやバリアントが将来追加される可能性があります。</target>
        </trans-unit>
        <trans-unit id="fcad2c51ea5b37a57bae2601eed616fe3e726b2e" translate="yes" xml:space="preserve">
          <source>This error indicates that the struct, enum or enum variant must be matched non-exhaustively as it has been marked as &lt;code&gt;non_exhaustive&lt;/code&gt;.</source>
          <target state="translated">このエラーは、struct、enum、またはenumバリアントが &lt;code&gt;non_exhaustive&lt;/code&gt; としてマークされているため、非網羅的に一致する必要があることを示しています。</target>
        </trans-unit>
        <trans-unit id="37c7a2a28ca533246457e808e16c999f3f050492" translate="yes" xml:space="preserve">
          <source>This error indicates that there is a mismatch between generic parameters and impl Trait parameters in a trait declaration versus its impl.</source>
          <target state="translated">このエラーは、形質宣言のジェネリックパラメータとそのインプルのTraitパラメータの間に不一致があることを示しています。</target>
        </trans-unit>
        <trans-unit id="51a28020fb3170ca33d27d23beb6ff4c2ae9ce5c" translate="yes" xml:space="preserve">
          <source>This error indicates that too many type parameters were found in a type or trait.</source>
          <target state="translated">このエラーは、型または形質に型パラメータが多すぎたことを示します。</target>
        </trans-unit>
        <trans-unit id="52a40c02e70b32e434b6bbe135867f805601219b" translate="yes" xml:space="preserve">
          <source>This error indicates that type inference did not result in one unique possible type, and extra information is required. In most cases this can be provided by adding a type annotation. Sometimes you need to specify a generic type parameter manually.</source>
          <target state="translated">このエラーは、型の推論が一意の可能性のある型を一つも得られなかったことを示しており、追加の情報が必要です。ほとんどの場合、これは型アノテーションを追加することで提供することができます。一般的な型パラメータを手動で指定する必要がある場合もあります。</target>
        </trans-unit>
        <trans-unit id="4c3b94702358e1162bf8effa04b8b4b7e098714c" translate="yes" xml:space="preserve">
          <source>This error indicates that you are trying to borrow a variable as mutable when it has already been borrowed as immutable.</source>
          <target state="translated">このエラーは、変数が既に不変として借用されている場合に、変数を mutable として借用しようとしていることを示しています。</target>
        </trans-unit>
        <trans-unit id="5d266dd2a168d28b90102ea5f40d828bae3909b4" translate="yes" xml:space="preserve">
          <source>This error indicates the use of a loop keyword (&lt;code&gt;break&lt;/code&gt; or &lt;code&gt;continue&lt;/code&gt;) inside a closure but outside of any loop. Erroneous code example:</source>
          <target state="translated">このエラーは、クロージャー内でループの外側でループキーワード（ &lt;code&gt;break&lt;/code&gt; または &lt;code&gt;continue&lt;/code&gt; ）が使用されていることを示しています。誤ったコード例：</target>
        </trans-unit>
        <trans-unit id="a14d78d3da966b89fe122674705e062ddb4c4c41" translate="yes" xml:space="preserve">
          <source>This error indicates the use of a loop keyword (&lt;code&gt;break&lt;/code&gt; or &lt;code&gt;continue&lt;/code&gt;) outside of a loop. Without a loop to break out of or continue in, no sensible action can be taken. Erroneous code example:</source>
          <target state="translated">このエラーは、ループの外側でループキーワード（ &lt;code&gt;break&lt;/code&gt; または &lt;code&gt;continue&lt;/code&gt; ）が使用されていることを示しています。抜け出す、または続けるループがないと、賢明なアクションを実行できません。誤ったコード例：</target>
        </trans-unit>
        <trans-unit id="50520313e8b1d1b1c6569c98ff40cb57f7812069" translate="yes" xml:space="preserve">
          <source>This error is created by the &lt;a href=&quot;struct.cstr#method.from_bytes_with_nul&quot;&gt;&lt;code&gt;CStr::from_bytes_with_nul&lt;/code&gt;&lt;/a&gt; method. See its documentation for more.</source>
          <target state="translated">このエラーは、&lt;a href=&quot;struct.cstr#method.from_bytes_with_nul&quot;&gt; &lt;code&gt;CStr::from_bytes_with_nul&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="1b9e91e9541342a47e9d0b1ac521444fa8e68a88" translate="yes" xml:space="preserve">
          <source>This error is created by the &lt;a href=&quot;struct.cstr#method.from_bytes_with_nul&quot;&gt;&lt;code&gt;from_bytes_with_nul&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.cstr&quot;&gt;&lt;code&gt;CStr&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">このエラーは、&lt;a href=&quot;struct.cstr&quot;&gt; &lt;code&gt;CStr&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;struct.cstr#method.from_bytes_with_nul&quot;&gt; &lt;code&gt;from_bytes_with_nul&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="bbb5b15b9e8658856b49fb418cbe7dfc72c8452a" translate="yes" xml:space="preserve">
          <source>This error is created by the &lt;a href=&quot;struct.cstring#method.from_vec_with_nul&quot;&gt;&lt;code&gt;CString::from_vec_with_nul&lt;/code&gt;&lt;/a&gt; method. See its documentation for more.</source>
          <target state="translated">このエラーは、&lt;a href=&quot;struct.cstring#method.from_vec_with_nul&quot;&gt; &lt;code&gt;CString::from_vec_with_nul&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="7f88231c82f77383d008a182af5374b0e8d20578" translate="yes" xml:space="preserve">
          <source>This error is created by the &lt;a href=&quot;struct.cstring#method.new&quot;&gt;&lt;code&gt;new&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.cstring&quot;&gt;&lt;code&gt;CString&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">このエラーは、&lt;a href=&quot;struct.cstring&quot;&gt; &lt;code&gt;CString&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;struct.cstring#method.new&quot;&gt; &lt;code&gt;new&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="e66887716e5bc2fbc972f3ffc3450120cd6c7b7e" translate="yes" xml:space="preserve">
          <source>This error is fairly cryptic because the problem is fairly cryptic. To call a &lt;code&gt;FnOnce&lt;/code&gt; closure that is stored in a &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; (which is what our &lt;code&gt;Job&lt;/code&gt; type alias is), the closure needs to move itself &lt;em&gt;out&lt;/em&gt; of the &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; because the closure takes ownership of &lt;code&gt;self&lt;/code&gt; when we call it. In general, Rust doesn&amp;rsquo;t allow us to move a value out of a &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; because Rust doesn&amp;rsquo;t know how big the value inside the &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; will be: recall in Chapter 15 that we used &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; precisely because we had something of an unknown size that we wanted to store in a &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; to get a value of a known size.</source>
          <target state="translated">問題はかなり不可解なので、このエラーはかなり不可解です。呼び出すには &lt;code&gt;FnOnce&lt;/code&gt; の中に保存されている閉鎖 &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; （私達の何である &lt;code&gt;Job&lt;/code&gt; 自体を移動するタイプの別名がある）、閉鎖ニーズを&lt;em&gt;アウト&lt;/em&gt;の &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; の閉鎖がの所有権がかかるため &lt;code&gt;self&lt;/code&gt; 、我々はそれを呼び出すとき。一般的には、錆は、私たちは外の値を移動することはできません &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; 錆がわからないので、どのように大きな内部値 &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; になります：章私たちが使用したことを15でリコール &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; 既知のサイズの値を取得するために &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; に格納したい未知のサイズのものがあったためです。</target>
        </trans-unit>
        <trans-unit id="ac1c7bfe67c403881a0d5e5220daf766f18ab15b" translate="yes" xml:space="preserve">
          <source>This error is used as the error type for the &lt;a href=&quot;../str/trait.fromstr&quot;&gt;&lt;code&gt;FromStr&lt;/code&gt;&lt;/a&gt; implementation for &lt;a href=&quot;../primitive.f32&quot;&gt;&lt;code&gt;f32&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../primitive.f64&quot;&gt;&lt;code&gt;f64&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このエラーは、&lt;a href=&quot;../primitive.f32&quot;&gt; &lt;code&gt;f32&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;../primitive.f64&quot;&gt; &lt;code&gt;f64&lt;/code&gt; の&lt;/a&gt;&lt;a href=&quot;../str/trait.fromstr&quot;&gt; &lt;code&gt;FromStr&lt;/code&gt; &lt;/a&gt;実装のエラータイプとして使用されます。</target>
        </trans-unit>
        <trans-unit id="a413bd30b0780353f6f0cb9ec7112a60510b4c1b" translate="yes" xml:space="preserve">
          <source>This error is used as the error type for the &lt;a href=&quot;../str/trait.fromstr&quot;&gt;&lt;code&gt;FromStr&lt;/code&gt;&lt;/a&gt; implementation for &lt;a href=&quot;enum.ipaddr&quot;&gt;&lt;code&gt;IpAddr&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;struct.ipv4addr&quot;&gt;&lt;code&gt;Ipv4Addr&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;struct.ipv6addr&quot;&gt;&lt;code&gt;Ipv6Addr&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;enum.socketaddr&quot;&gt;&lt;code&gt;SocketAddr&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;struct.socketaddrv4&quot;&gt;&lt;code&gt;SocketAddrV4&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;struct.socketaddrv6&quot;&gt;&lt;code&gt;SocketAddrV6&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このエラーは、&lt;a href=&quot;enum.ipaddr&quot;&gt; &lt;code&gt;IpAddr&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;struct.ipv4addr&quot;&gt; &lt;code&gt;Ipv4Addr&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;struct.ipv6addr&quot;&gt; &lt;code&gt;Ipv6Addr&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;enum.socketaddr&quot;&gt; &lt;code&gt;SocketAddr&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;struct.socketaddrv4&quot;&gt; &lt;code&gt;SocketAddrV4&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;struct.socketaddrv6&quot;&gt; &lt;code&gt;SocketAddrV6&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;../str/trait.fromstr&quot;&gt; &lt;code&gt;FromStr&lt;/code&gt; &lt;/a&gt;実装のエラータイプとして使用されます。</target>
        </trans-unit>
        <trans-unit id="dbd5a817ebd0158354fc9b6704f3a0f2b0fc517f" translate="yes" xml:space="preserve">
          <source>This error is used as the error type for the &lt;code&gt;from_str_radix()&lt;/code&gt; functions on the primitive integer types, such as &lt;a href=&quot;../primitive.i8#method.from_str_radix&quot;&gt;&lt;code&gt;i8::from_str_radix&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このエラーは、&lt;a href=&quot;../primitive.i8#method.from_str_radix&quot;&gt; &lt;code&gt;i8::from_str_radix&lt;/code&gt; &lt;/a&gt;などのプリミティブ整数タイプの &lt;code&gt;from_str_radix()&lt;/code&gt; 関数のエラータイプとして使用されます。</target>
        </trans-unit>
        <trans-unit id="022d759f57798a79780636ae9f03f6fedf32312c" translate="yes" xml:space="preserve">
          <source>This error lets us know that either we&amp;rsquo;re passing something to &lt;code&gt;Screen&lt;/code&gt; we didn&amp;rsquo;t mean to pass and we should pass a different type or we should implement &lt;code&gt;Draw&lt;/code&gt; on &lt;code&gt;String&lt;/code&gt; so that &lt;code&gt;Screen&lt;/code&gt; is able to call &lt;code&gt;draw&lt;/code&gt; on it.</source>
          <target state="translated">このエラーは、渡そうとしているのではない何かを &lt;code&gt;Screen&lt;/code&gt; に渡していて、別のタイプを渡すべきか、または &lt;code&gt;Screen&lt;/code&gt; がその上で &lt;code&gt;draw&lt;/code&gt; を呼び出せるように &lt;code&gt;String&lt;/code&gt; &lt;code&gt;Draw&lt;/code&gt; を実装する必要があることを知らせます。</target>
        </trans-unit>
        <trans-unit id="7089a49860a1eeefd308980067bc3b5e6f3e5841" translate="yes" xml:space="preserve">
          <source>This error lets you know that Rust has this constant defined more precisely and that your program would be more correct if you used the constant instead. You would then change your code to use the &lt;code&gt;PI&lt;/code&gt; constant. The following code doesn&amp;rsquo;t result in any errors or warnings from Clippy:</source>
          <target state="translated">このエラーにより、Rustでこの定数がより正確に定義されていること、およびその定数を代わりに使用した場合、プログラムがより正確になることがわかります。次に、 &lt;code&gt;PI&lt;/code&gt; 定数を使用するようにコードを変更します。次のコードでは、Clippyからのエラーや警告は発生しません。</target>
        </trans-unit>
        <trans-unit id="7527f99b3dbab9d3281da26cc0de240205ca3ed7" translate="yes" xml:space="preserve">
          <source>This error may also commonly be found when working with unsafe code. For example, when using raw pointers one may wish to specify the lifetime for which the pointed-at data is valid. An initial attempt (below) causes this error:</source>
          <target state="translated">このエラーは、安全でないコードを使用している場合にもよく見られることがあります。例えば、生のポインタを使用している場合、ポイントされたデータが有効な有効期限を指定したい場合があります。最初の試み(下記)でこのエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="1e7204b5ea49e32896ab0ba12a29a6e3937bc0f3" translate="yes" xml:space="preserve">
          <source>This error means that an attempt was made to match a struct type enum variant as a non-struct type:</source>
          <target state="translated">このエラーは、構造体型のenum variantを非構造体型としてマッチさせようとしたことを意味します。</target>
        </trans-unit>
        <trans-unit id="76d97f884e0ba6f5c3488397207d55a3b212ce21" translate="yes" xml:space="preserve">
          <source>This error means that an attempt was made to match something which is neither a tuple struct nor a tuple variant. Only these two elements are allowed as a pattern:</source>
          <target state="translated">このエラーは、タプル構造体でもタプルバリアントでもないものにマッチしようとしたことを意味します。パターンとして許可されるのは、この2つの要素のみです。</target>
        </trans-unit>
        <trans-unit id="c1988ee636e2a4d68092372fb6c89de2473339d3" translate="yes" xml:space="preserve">
          <source>This error means that an incorrect number of generic arguments were provided:</source>
          <target state="translated">このエラーは、一般的な引数の数が正しくないことを意味します。</target>
        </trans-unit>
        <trans-unit id="368e8d1bf22974707354d4d21e3f6ab34ed1757e" translate="yes" xml:space="preserve">
          <source>This error means you can&amp;rsquo;t use this trait as a trait object in this way. If you&amp;rsquo;re interested in more details on object safety, see &lt;a href=&quot;https://github.com/rust-lang/rfcs/blob/master/text/0255-object-safety.md&quot;&gt;Rust RFC 255&lt;/a&gt;.</source>
          <target state="translated">このエラーは、この方法でこの特性を特性オブジェクトとして使用できないことを意味します。オブジェクトの安全性の詳細に興味がある場合は、&lt;a href=&quot;https://github.com/rust-lang/rfcs/blob/master/text/0255-object-safety.md&quot;&gt;Rust RFC 255を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="027a2fdf6a3f9948a9c92b0f1c99c26f859c6929" translate="yes" xml:space="preserve">
          <source>This error message refers to a feature we haven&amp;rsquo;t covered yet: lifetimes. We&amp;rsquo;ll discuss lifetimes in detail in Chapter 10. But, if you disregard the parts about lifetimes, the message does contain the key to why this code is a problem:</source>
          <target state="translated">このエラーメッセージは、まだカバーしていない機能であるライフタイムに関するものです。ライフタイムについては第10章で詳しく説明しますが、ライフタイムに関する部分を無視すると、メッセージにはこのコードが問題である理由の鍵が含まれます。</target>
        </trans-unit>
        <trans-unit id="b934f7e266f094b4b999e8bf2f04c71dea6d6829" translate="yes" xml:space="preserve">
          <source>This error message states that we&amp;rsquo;re not allowed to explicitly call &lt;code&gt;drop&lt;/code&gt;. The error message uses the term &lt;em&gt;destructor&lt;/em&gt;, which is the general programming term for a function that cleans up an instance. A &lt;em&gt;destructor&lt;/em&gt; is analogous to a &lt;em&gt;constructor&lt;/em&gt;, which creates an instance. The &lt;code&gt;drop&lt;/code&gt; function in Rust is one particular destructor.</source>
          <target state="translated">このエラーメッセージは、明示的に &lt;code&gt;drop&lt;/code&gt; を呼び出すことができないことを示しています。エラーメッセージでは、&lt;em&gt;デストラクタ&lt;/em&gt;という用語を使用します。これは、インスタンスをクリーンアップする関数の一般的なプログラミング用語です。&lt;em&gt;デストラクタ&lt;/em&gt;に類似している&lt;em&gt;コンストラクタ&lt;/em&gt;インスタンスを作成し、。Rust の &lt;code&gt;drop&lt;/code&gt; 関数は、特定のデストラクタです。</target>
        </trans-unit>
        <trans-unit id="2c2b32b5586db42f3b0dff4da46b1782d86e698e" translate="yes" xml:space="preserve">
          <source>This error occurs because a borrow in a generator persists across a yield point.</source>
          <target state="translated">このエラーは、ジェネレータ内の借用がイールド・ポイントを越えて持続するために発生します。</target>
        </trans-unit>
        <trans-unit id="1e6bf835d8f1dd37c8b25ebb4f51cc6621c79aa9" translate="yes" xml:space="preserve">
          <source>This error occurs because a borrow of a thread-local variable was made inside a function which outlived the lifetime of the function.</source>
          <target state="translated">このエラーは、スレッドローカル変数の借用が関数内で行われたために発生します。</target>
        </trans-unit>
        <trans-unit id="249f7bc8f6d82a80564f1c3f396aa42dbc6e451f" translate="yes" xml:space="preserve">
          <source>This error occurs because a value was dropped while it was still borrowed</source>
          <target state="translated">借用中に値を落としてしまったため、このエラーが発生しました。</target>
        </trans-unit>
        <trans-unit id="074bebec9bc1d161aacdccb6e09fa091949d4c0d" translate="yes" xml:space="preserve">
          <source>This error occurs because you tried to mutably borrow a non-mutable variable.</source>
          <target state="translated">このエラーは、非可変型変数を突然変異的に借用しようとしたために発生します。</target>
        </trans-unit>
        <trans-unit id="1c3db0f8ef7d737dfd4c2dc90ac02bc9a5c77f3f" translate="yes" xml:space="preserve">
          <source>This error occurs when a bound in an implementation of a trait does not match the bounds specified in the original trait. For example:</source>
          <target state="translated">このエラーは、形質の実装における境界が、元の形質で指定された境界と一致しない場合に発生します。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="093dfc68eae74dcc328a7c8a1a3d68f0b36d7fb4" translate="yes" xml:space="preserve">
          <source>This error occurs when a method is used on a type which doesn't implement it:</source>
          <target state="translated">このエラーは、メソッドを実装していない型でメソッドを使用した場合に発生します。</target>
        </trans-unit>
        <trans-unit id="da941b6947e460e43f6112767122feb782f16207" translate="yes" xml:space="preserve">
          <source>This error occurs when an &lt;code&gt;if&lt;/code&gt; expression without an &lt;code&gt;else&lt;/code&gt; block is used in a context where a type other than &lt;code&gt;()&lt;/code&gt; is expected, for example a &lt;code&gt;let&lt;/code&gt; expression:</source>
          <target state="translated">このエラーが発生 &lt;code&gt;if&lt;/code&gt; 無し式 &lt;code&gt;else&lt;/code&gt; ブロック以外のタイプはコンテキストで使用されている &lt;code&gt;()&lt;/code&gt; 例えば、予想される &lt;code&gt;let&lt;/code&gt; 式：</target>
        </trans-unit>
        <trans-unit id="5a28a2c48baba84d59c80917ee2d999515b5d378" translate="yes" xml:space="preserve">
          <source>This error occurs when an &lt;code&gt;if&lt;/code&gt; expression without an &lt;code&gt;else&lt;/code&gt; block is used in a context where a type other than &lt;code&gt;()&lt;/code&gt; is expected. In the previous code example, the &lt;code&gt;let&lt;/code&gt; expression was expecting a value but since there was no &lt;code&gt;else&lt;/code&gt;, no value was returned.</source>
          <target state="translated">このエラーは、 &lt;code&gt;else&lt;/code&gt; ブロックのない &lt;code&gt;if&lt;/code&gt; 式が、 &lt;code&gt;()&lt;/code&gt; 以外の型が予期されるコンテキストで使用された場合に発生します。前のコード例では、 &lt;code&gt;let&lt;/code&gt; 式は値を期待していましたが、 &lt;code&gt;else&lt;/code&gt; に値がなかったため、値は返されませんでした。</target>
        </trans-unit>
        <trans-unit id="d0370ddda8b1bb558216506bbbbafb414b273904" translate="yes" xml:space="preserve">
          <source>This error occurs when an attempt is made to assign to a borrowed value.</source>
          <target state="translated">このエラーは、借用値に代入しようとしたときに発生します。</target>
        </trans-unit>
        <trans-unit id="81568110c66c811e652efe84f4e84d35ccd0ca5f" translate="yes" xml:space="preserve">
          <source>This error occurs when an attempt is made to borrow state past the end of the lifetime of a type that implements the &lt;code&gt;Drop&lt;/code&gt; trait.</source>
          <target state="translated">このエラーは、 &lt;code&gt;Drop&lt;/code&gt; トレイトを実装する型のライフタイムの終わりを過ぎて状態を借用しようとしたときに発生します。</target>
        </trans-unit>
        <trans-unit id="552e357ec5f4118a4e87577f4bd866d88ddeba4b" translate="yes" xml:space="preserve">
          <source>This error occurs when an attempt is made to move a borrowed variable into a closure.</source>
          <target state="translated">このエラーは、借用した変数をクロージャに移動しようとしたときに発生します。</target>
        </trans-unit>
        <trans-unit id="08dbd4d1c622d91c2a3b2e7680f087d95c0c0ad4" translate="yes" xml:space="preserve">
          <source>This error occurs when an attempt is made to move out of a value whose type implements the &lt;code&gt;Drop&lt;/code&gt; trait.</source>
          <target state="translated">このエラーは、 &lt;code&gt;Drop&lt;/code&gt; トレイトを実装するタイプの値から移動しようとしたときに発生します。</target>
        </trans-unit>
        <trans-unit id="a382ee4f257c1e4d223e9634a0678761229064a5" translate="yes" xml:space="preserve">
          <source>This error occurs when an attempt is made to mutate or mutably reference data that a closure has captured immutably.</source>
          <target state="translated">このエラーは、クロージャが不変に捕捉したデータを突然変異的に参照しようとした場合に発生します。</target>
        </trans-unit>
        <trans-unit id="b0cd32a89f254835e1067e05e21bdf36f5041728" translate="yes" xml:space="preserve">
          <source>This error occurs when an attempt is made to mutate or mutably reference data that a closure has captured immutably. Examples of this error are shown below:</source>
          <target state="translated">このエラーは、クロージャが不変に捕捉したデータを突然変異的に参照しようとした場合に発生します。このエラーの例を以下に示します。</target>
        </trans-unit>
        <trans-unit id="6dbb4812461df19f2be9097a66c157fbdbf8c85f" translate="yes" xml:space="preserve">
          <source>This error occurs when an attempt is made to mutate the target of a mutable reference stored inside an immutable container.</source>
          <target state="translated">このエラーは、不変コンテナ内に格納された変異可能な参照のターゲットを変異させようとしたときに発生します。</target>
        </trans-unit>
        <trans-unit id="e494d266acb1b46fd28c9cc0c8ca718e819da16c" translate="yes" xml:space="preserve">
          <source>This error occurs when an attempt is made to partially reinitialize a structure that is currently uninitialized.</source>
          <target state="translated">このエラーは、現在初期化されていない構造体を部分的に再初期化しようとしたときに発生します。</target>
        </trans-unit>
        <trans-unit id="8feee21757ea4763c54c8d19077d7ff7e0dd5208" translate="yes" xml:space="preserve">
          <source>This error occurs when an attempt is made to reassign an immutable variable. For example:</source>
          <target state="translated">このエラーは、不変変数を再割り当てしようとしたときに発生します。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="b105f193c377f1f9fe2f520a0094f3220a7d20d3" translate="yes" xml:space="preserve">
          <source>This error occurs when an attempt is made to use a variable after its contents have been moved elsewhere. For example:</source>
          <target state="translated">このエラーは、変数の内容が他の場所に移動された後に変数を使用しようとした場合に発生します。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="7658c866cb10684f9a43de713daa72ba91346907" translate="yes" xml:space="preserve">
          <source>This error occurs when an attempt is made to use data captured by a closure, when that data may no longer exist. It's most commonly seen when attempting to return a closure as shown in the previous code example.</source>
          <target state="translated">このエラーは、クロージャによって捕捉されたデータを使用しようとしたときに、そのデータがもはや存在しない可能性がある場合に発生します。これは、前のコード例で示したようにクロージャを戻そうとしたときに最もよく見られます。</target>
        </trans-unit>
        <trans-unit id="47a25aa9b1a97609269b45b233bf81af91519446" translate="yes" xml:space="preserve">
          <source>This error occurs when an attempt is made to use data captured by a closure, when that data may no longer exist. It's most commonly seen when attempting to return a closure:</source>
          <target state="translated">このエラーは、クロージャによってキャプチャされたデータを使用しようとしたときに、そのデータがもはや存在しない可能性がある場合に発生します。これは、クロージャを戻そうとしたときに最もよく見られます。</target>
        </trans-unit>
        <trans-unit id="25b45e0aeb2d0b344f458087fd222c2b9143243a" translate="yes" xml:space="preserve">
          <source>This error occurs when an expression was used in a place where the compiler expected an expression of a different type. It can occur in several cases, the most common being when calling a function and passing an argument which has a different type than the matching type in the function declaration.</source>
          <target state="translated">このエラーは、コンパイラが異なる型の式を期待している場所で式が使用された場合に発生します。このエラーはいくつかのケースで発生する可能性がありますが、最も一般的なのは、関数を呼び出して、関数宣言で一致する型とは異なる型を持つ引数を渡した場合です。</target>
        </trans-unit>
        <trans-unit id="fa2c4bec036eb23e59f4739f281ec16e241dd98a" translate="yes" xml:space="preserve">
          <source>This error occurs when the compiler doesn't have enough information to unambiguously choose an implementation.</source>
          <target state="translated">このエラーは、コンパイラが実装を明確に選択するのに十分な情報を持っていない場合に発生します。</target>
        </trans-unit>
        <trans-unit id="b03f07ba71f847bb7aaff9d23af91941f61b2264" translate="yes" xml:space="preserve">
          <source>This error occurs when the compiler is unable to infer the concrete type of a variable. It can occur in several cases, the most common being a mismatch between two types: the type the author explicitly assigned, and the type the compiler inferred.</source>
          <target state="translated">このエラーは、コンパイラが変数の具体的な型を推測できない場合に発生します。このエラーはいくつかのケースで発生しますが、最も一般的なのは、作成者が明示的に割り当てた型とコンパイラが推測した型の2つの型の不一致です。</target>
        </trans-unit>
        <trans-unit id="f68d6da4cba1c2fe73a0bdd6ed998a8c685d2f7a" translate="yes" xml:space="preserve">
          <source>This error occurs when the compiler is unable to unambiguously infer the return type of a function or method which is generic on return type, such as the &lt;code&gt;collect&lt;/code&gt; method for &lt;code&gt;Iterator&lt;/code&gt;s.</source>
          <target state="translated">このエラーは、コンパイラーが、 &lt;code&gt;Iterator&lt;/code&gt; の &lt;code&gt;collect&lt;/code&gt; メソッドなど、戻り値の型で一般的な関数またはメソッドの戻り値の型を明確に推測できない場合に発生します。</target>
        </trans-unit>
        <trans-unit id="f8852702dc84baa326e19b865b76e83190126314" translate="yes" xml:space="preserve">
          <source>This error occurs when the compiler was unable to infer the concrete type of a variable. It can occur for several cases, the most common of which is a mismatch in the expected type that the compiler inferred for a variable's initializing expression, and the actual type explicitly assigned to the variable.</source>
          <target state="translated">このエラーは、コンパイラが変数の具体的な型を推測できなかった場合に発生します。このエラーはいくつかのケースで発生する可能性がありますが、最も一般的なのは、コンパイラが変数の初期化式で推定した期待される型と、変数に明示的に割り当てられた実際の型が不一致であることです。</target>
        </trans-unit>
        <trans-unit id="40572c6042150247d80f8e73ff85712050d543de" translate="yes" xml:space="preserve">
          <source>This error occurs when there was a recursive trait requirement that overflowed before it could be evaluated. Often this means that there is unbounded recursion in resolving some type bounds.</source>
          <target state="translated">このエラーは、再帰的な形質要件があって、それが評価される前にオーバーフローした場合に発生します。多くの場合、これは、いくつかの型の境界を解決する際に拘束されない再帰があることを意味します。</target>
        </trans-unit>
        <trans-unit id="4c98fdf7c35ee8cb8fdd6e9ff309c4211fcf94cf" translate="yes" xml:space="preserve">
          <source>This error occurs when there was a recursive trait requirement that overflowed before it could be evaluated. This often means that there is an unbounded recursion in resolving some type bounds.</source>
          <target state="translated">このエラーは、再帰的な形質要件があって、それが評価される前にオーバーフローした場合に発生します。これは多くの場合、いくつかの型の境界を解決する際に境界のない再帰が発生していることを意味します。</target>
        </trans-unit>
        <trans-unit id="7b6569d564fb77649858b1d55f9d8b2a0efd5a34" translate="yes" xml:space="preserve">
          <source>This error occurs when you defined methods or associated functions with same name.</source>
          <target state="translated">同名のメソッドや関連する関数を定義した場合に発生します。</target>
        </trans-unit>
        <trans-unit id="31aab3dcb3c76822f5a50ebdbab3c624e3384795" translate="yes" xml:space="preserve">
          <source>This error points at a file we didn&amp;rsquo;t write, &lt;em&gt;libcore/slice/mod.rs&lt;/em&gt;. That&amp;rsquo;s the implementation of &lt;code&gt;slice&lt;/code&gt; in the Rust source code. The code that gets run when we use &lt;code&gt;[]&lt;/code&gt; on our vector &lt;code&gt;v&lt;/code&gt; is in &lt;em&gt;libcore/slice/mod.rs&lt;/em&gt;, and that is where the &lt;code&gt;panic!&lt;/code&gt; is actually happening.</source>
          <target state="translated">このエラーは、作成していないファイル&lt;em&gt;libcore / slice / mod.rsを指してい&lt;/em&gt;ます。これは、Rustソースコードの &lt;code&gt;slice&lt;/code&gt; の実装です。ベクトル &lt;code&gt;v&lt;/code&gt; で &lt;code&gt;[]&lt;/code&gt; を使用したときに実行されるコードは&lt;em&gt;libcore / slice / mod.rs&lt;/em&gt;にあり、そこに &lt;code&gt;panic!&lt;/code&gt; 実際に起こっています。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="daff356f50087f066d8d7f295e45f7db503c47eb" translate="yes" xml:space="preserve">
          <source>This error points out that we&amp;rsquo;re only allowed to use the &lt;code&gt;?&lt;/code&gt; operator in a function that returns &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt;. When you&amp;rsquo;re writing code in a function that doesn&amp;rsquo;t return &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt;, and you want to use &lt;code&gt;?&lt;/code&gt; when you call other functions that return &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt;, you have two choices to fix this problem. One technique is to change the return type of your function to be &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt; if you have no restrictions preventing that. The other technique is to use a &lt;code&gt;match&lt;/code&gt; or one of the &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt; methods to handle the &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt; in whatever way is appropriate.</source>
          <target state="translated">このエラーは、 &lt;code&gt;?&lt;/code&gt; &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt; を返す関数の演算子。 &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt; 返さない関数でコードを書いていて、使用したい場合は &lt;code&gt;?&lt;/code&gt; &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt; を返す他の関数を呼び出す場合、この問題を解決するには2つの選択肢があります。 1つの手法は &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt; それを妨げる制限がない場合、関数の戻り値の型をResult &amp;lt;T、E&amp;gt;に変更することです。他の技術が使用することである &lt;code&gt;match&lt;/code&gt; のまたは1 &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt; 処理するための方法 &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt; 方法が適切であるものは何でもです。</target>
        </trans-unit>
        <trans-unit id="ef0f484866e508390ede392520c4e2f457d726bf" translate="yes" xml:space="preserve">
          <source>This error points out that we&amp;rsquo;re only allowed to use the &lt;code&gt;?&lt;/code&gt; operator in a function that returns &lt;code&gt;Result&lt;/code&gt; or &lt;code&gt;Option&lt;/code&gt; or another type that implements &lt;code&gt;std::ops::Try&lt;/code&gt;. When you&amp;rsquo;re writing code in a function that doesn&amp;rsquo;t return one of these types, and you want to use &lt;code&gt;?&lt;/code&gt; when you call other functions that return &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt;, you have two choices to fix this problem. One technique is to change the return type of your function to be &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt; if you have no restrictions preventing that. The other technique is to use a &lt;code&gt;match&lt;/code&gt; or one of the &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt; methods to handle the &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt; in whatever way is appropriate.</source>
          <target state="translated">このエラーは、 &lt;code&gt;?&lt;/code&gt; の使用のみが許可されていることを示しています。 &lt;code&gt;Result&lt;/code&gt; または &lt;code&gt;Option&lt;/code&gt; 、あるいは &lt;code&gt;std::ops::Try&lt;/code&gt; を実装する別の型を返す関数の演算子。これらのタイプのいずれかを返さない関数でコードを記述していて、使用したい場合は &lt;code&gt;?&lt;/code&gt; &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt; を返す他の関数を呼び出す場合、この問題を修正するには2つの選択肢があります。 1つの手法は &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt; それを妨げる制限がない場合に、関数の戻り値の型をResult &amp;lt;T、E&amp;gt;に変更することです。他の技術が使用することである &lt;code&gt;match&lt;/code&gt; のまたは1 &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt; 処理するための方法 &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt; 適切な方法で。</target>
        </trans-unit>
        <trans-unit id="f5d927c97470a6bdf532b94621efe13e0092f99e" translate="yes" xml:space="preserve">
          <source>This error suggests that the expression arm corresponding to the noted pattern will never be reached as for all possible values of the expression being matched, one of the preceding patterns will match.</source>
          <target state="translated">このエラーは、指定されたパターンに対応する式アームに到達することができないことを示唆しています。</target>
        </trans-unit>
        <trans-unit id="f4cd2a99a6de016ca859c1b751566814099aa1c3" translate="yes" xml:space="preserve">
          <source>This error type&amp;rsquo;s methods can be used to create functionality similar to &lt;code&gt;String::from_utf8_lossy&lt;/code&gt; without allocating heap memory:</source>
          <target state="translated">このエラータイプのメソッドを使用すると、ヒープメモリを割り当てなくても、 &lt;code&gt;String::from_utf8_lossy&lt;/code&gt; と同様の機能を作成できます。</target>
        </trans-unit>
        <trans-unit id="fb422fab14fffbfe5c78207ee2ae02a65418bd40" translate="yes" xml:space="preserve">
          <source>This error usually happens when trying to pass in a value to an input inline assembly operand that is actually a pair of values. In particular, this can happen when trying to pass in a slice, for instance a &lt;code&gt;&amp;amp;str&lt;/code&gt;. In Rust, these values are represented internally as a pair of values, the pointer and its length. When passed as an input operand, this pair of values can not be coerced into a register and thus we must fail with an error.</source>
          <target state="translated">このエラーは通常、実際には値のペアである入力インラインアセンブリオペランドに値を渡そうとしたときに発生します。特に、これは &lt;code&gt;&amp;amp;str&lt;/code&gt; などのスライスを渡そうとしたときに発生する可能性があります。Rustでは、これらの値は内部的に値のペア、ポインターとその長さとして表されます。入力オペランドとして渡される場合、この値のペアはレジスターに強制変換できないため、エラーで失敗する必要があります。</target>
        </trans-unit>
        <trans-unit id="46906d1c89db9bd7d3aa62947de98893bb4109ab" translate="yes" xml:space="preserve">
          <source>This error was returned when attempting to write the internal buffer.</source>
          <target state="translated">このエラーは、内部バッファへの書き込みを試みたときに返されました。</target>
        </trans-unit>
        <trans-unit id="3d919bd775721ac4d8e4678ab5d56f5c5d828138" translate="yes" xml:space="preserve">
          <source>This error will be emitted by the compiler when using an invalid receiver type, like in the following example:</source>
          <target state="translated">このエラーは、以下の例のように、無効なレシーバ・タイプを使用している場合にコンパイラから出力されます。</target>
        </trans-unit>
        <trans-unit id="6f5335a8d7c6f37faeab381d52fe1092a252bd8d" translate="yes" xml:space="preserve">
          <source>This example also shows how to use &lt;code&gt;move&lt;/code&gt;, in order to give ownership of values to a thread.</source>
          <target state="translated">この例は、スレッドに値の所有権を与えるために &lt;code&gt;move&lt;/code&gt; を使用する方法も示しています。</target>
        </trans-unit>
        <trans-unit id="175716bea92c9d941f0898dc29c4ed209e64c353" translate="yes" xml:space="preserve">
          <source>This example builds a string, starting with an initial value and continuing with each element from the back until the front:</source>
          <target state="translated">この例では、初期値から始まり、後ろから前に向かって各要素が続く文字列を構築しています。</target>
        </trans-unit>
        <trans-unit id="4d013525fa73f401dcf7648ce7d8e69f8100f085" translate="yes" xml:space="preserve">
          <source>This example creates a &lt;code&gt;Point&lt;/code&gt; struct that implements &lt;a href=&quot;trait.add&quot;&gt;&lt;code&gt;Add&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;trait.sub&quot;&gt;&lt;code&gt;Sub&lt;/code&gt;&lt;/a&gt;, and then demonstrates adding and subtracting two &lt;code&gt;Point&lt;/code&gt;s.</source>
          <target state="translated">この例では、&lt;a href=&quot;trait.add&quot;&gt; &lt;code&gt;Add&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;trait.sub&quot;&gt; &lt;code&gt;Sub&lt;/code&gt; &lt;/a&gt;を実装する &lt;code&gt;Point&lt;/code&gt; 構造体を作成し、2つの &lt;code&gt;Point&lt;/code&gt; の加算と減算を示します。</target>
        </trans-unit>
        <trans-unit id="612bd6352093018ae655e26b99b1150fb9f0d9dc" translate="yes" xml:space="preserve">
          <source>This example creates a &lt;code&gt;Point&lt;/code&gt; struct that implements the &lt;code&gt;AddAssign&lt;/code&gt; trait, and then demonstrates add-assigning to a mutable &lt;code&gt;Point&lt;/code&gt;.</source>
          <target state="translated">この例では、 &lt;code&gt;AddAssign&lt;/code&gt; トレイトを実装する &lt;code&gt;Point&lt;/code&gt; 構造体を作成し、変更可能な &lt;code&gt;Point&lt;/code&gt; への追加割り当てを示します。</target>
        </trans-unit>
        <trans-unit id="84b61046cfa323fa19b23ac20e12034ef787e01b" translate="yes" xml:space="preserve">
          <source>This example creates a &lt;code&gt;Point&lt;/code&gt; struct that implements the &lt;code&gt;SubAssign&lt;/code&gt; trait, and then demonstrates sub-assigning to a mutable &lt;code&gt;Point&lt;/code&gt;.</source>
          <target state="translated">この例では、 &lt;code&gt;SubAssign&lt;/code&gt; トレイトを実装する &lt;code&gt;Point&lt;/code&gt; 構造体を作成し、変更可能な &lt;code&gt;Point&lt;/code&gt; へのサブ割り当てを示します。</target>
        </trans-unit>
        <trans-unit id="979ade7fbba01641154de5a065a6e6890cf54db4" translate="yes" xml:space="preserve">
          <source>This example creates a function with two parameters, both of which are &lt;code&gt;i32&lt;/code&gt; types. The function then prints the values in both of its parameters. Note that function parameters don&amp;rsquo;t all need to be the same type, they just happen to be in this example.</source>
          <target state="translated">この例では、2つのパラメーターを持つ関数を作成します。どちらも &lt;code&gt;i32&lt;/code&gt; 型です。次に、関数は両方のパラメーターの値を出力します。関数のパラメータはすべて同じ型である必要はないことに注意してください。これらはたまたまこの例にあります。</target>
        </trans-unit>
        <trans-unit id="701db2e46c2038eecc101dd4ef0779ff5ad8d4cc" translate="yes" xml:space="preserve">
          <source>This example implements &lt;code&gt;Rem&lt;/code&gt; on a &lt;code&gt;SplitSlice&lt;/code&gt; object. After &lt;code&gt;Rem&lt;/code&gt; is implemented, one can use the &lt;code&gt;%&lt;/code&gt; operator to find out what the remaining elements of the slice would be after splitting it into equal slices of a given length.</source>
          <target state="translated">この例では、 &lt;code&gt;SplitSlice&lt;/code&gt; オブジェクトに &lt;code&gt;Rem&lt;/code&gt; を実装します。 &lt;code&gt;Rem&lt;/code&gt; が実装された後、 &lt;code&gt;%&lt;/code&gt; 演算子を使用して、スライスを所定の長さの等しいスライスに分割した後のスライスの残りの要素を見つけることができます。</target>
        </trans-unit>
        <trans-unit id="3d81c01c409b8ce1936b460c9219c2266b9648d9" translate="yes" xml:space="preserve">
          <source>This example prints 3, 2, and then 1. The &lt;code&gt;pop&lt;/code&gt; method takes the last element out of the vector and returns &lt;code&gt;Some(value)&lt;/code&gt;. If the vector is empty, &lt;code&gt;pop&lt;/code&gt; returns &lt;code&gt;None&lt;/code&gt;. The &lt;code&gt;while&lt;/code&gt; loop continues running the code in its block as long as &lt;code&gt;pop&lt;/code&gt; returns &lt;code&gt;Some&lt;/code&gt;. When &lt;code&gt;pop&lt;/code&gt; returns &lt;code&gt;None&lt;/code&gt;, the loop stops. We can use &lt;code&gt;while let&lt;/code&gt; to pop every element off our stack.</source>
          <target state="translated">この例では、3、2、次に1と出力します &lt;code&gt;pop&lt;/code&gt; メソッドは、ベクトルから最後の要素を取り出し、 &lt;code&gt;Some(value)&lt;/code&gt; を返します。ベクトルが空の場合、 &lt;code&gt;pop&lt;/code&gt; は &lt;code&gt;None&lt;/code&gt; を返します。 &lt;code&gt;while&lt;/code&gt; ループが長いほど、そのブロック内のコードを実行し続け &lt;code&gt;pop&lt;/code&gt; 戻り &lt;code&gt;Some&lt;/code&gt; 。ときに &lt;code&gt;pop&lt;/code&gt; 返す &lt;code&gt;None&lt;/code&gt; 、ループが停止します。スタックからすべての要素をポップ &lt;code&gt;while let&lt;/code&gt; 使用できます。</target>
        </trans-unit>
        <trans-unit id="33bd3bf0b7b00466cfe4514bc631cc4d45b75356" translate="yes" xml:space="preserve">
          <source>This example shows an inner attribute on a function. The function will only be available while running tests.</source>
          <target state="translated">この例では、関数の内部属性を示しています。この関数はテストを実行している間だけ利用可能になります。</target>
        </trans-unit>
        <trans-unit id="02dcd48945408a840f3079c83663da1b30b196c7" translate="yes" xml:space="preserve">
          <source>This example shows how one can use &lt;code&gt;allow&lt;/code&gt; and &lt;code&gt;warn&lt;/code&gt; to toggle a particular check on and off:</source>
          <target state="translated">この例は、 &lt;code&gt;allow&lt;/code&gt; と &lt;code&gt;warn&lt;/code&gt; を使用して特定のチェックのオンとオフを切り替える方法を示しています。</target>
        </trans-unit>
        <trans-unit id="b51a82804a004969c18f750e315e49a925f322a3" translate="yes" xml:space="preserve">
          <source>This example shows how one can use &lt;code&gt;forbid&lt;/code&gt; to disallow uses of &lt;code&gt;allow&lt;/code&gt; for that lint check:</source>
          <target state="translated">この1つはどのように使用できるかの例が示す &lt;code&gt;forbid&lt;/code&gt; の不許可の用途に &lt;code&gt;allow&lt;/code&gt; ことリントチェックのために：</target>
        </trans-unit>
        <trans-unit id="20dcd5999998e80d936e0fa700c4a9a09932a423" translate="yes" xml:space="preserve">
          <source>This example shows how the compiler helps you find errors in your programs. Even though compiler errors can be frustrating, they only mean your program isn&amp;rsquo;t safely doing what you want it to do yet; they do &lt;em&gt;not&lt;/em&gt; mean that you&amp;rsquo;re not a good programmer! Experienced Rustaceans still get compiler errors.</source>
          <target state="translated">この例は、コンパイラーがプログラムのエラーを見つけるのにどのように役立つかを示しています。コンパイラエラーはイライラする可能性がありますが、プログラムがまだやりたいことを安全に実行していないことを意味するだけです。彼らはあなたが良いプログラマでは&lt;em&gt;ない&lt;/em&gt;という意味ではありません！経験豊富なRustaceansは依然としてコンパイラエラーを受け取ります。</target>
        </trans-unit>
        <trans-unit id="2cb4570e4e31d810429621e0a69fd89abfdb2ea3" translate="yes" xml:space="preserve">
          <source>This example shows using a custom derive attribute to modify the meaning of a generic parameter.</source>
          <target state="translated">この例では、カスタム導出属性を使用して汎用パラメータの意味を変更しています。</target>
        </trans-unit>
        <trans-unit id="e1b71afb4f7ccdfd339dd3d129a43084a3b35c6b" translate="yes" xml:space="preserve">
          <source>This example spawns a thread which will update the boolean value and then wait 100 milliseconds before notifying the condvar.</source>
          <target state="translated">この例では、ブール値を更新し、100ミリ秒待ってから condvar に通知するスレッドを生成しています。</target>
        </trans-unit>
        <trans-unit id="b7617cea2234e7524bc25112d50668635c06f962" translate="yes" xml:space="preserve">
          <source>This example will print &lt;code&gt;Found an id in range: 5&lt;/code&gt;. By specifying &lt;code&gt;id_variable @&lt;/code&gt; before the range &lt;code&gt;3...7&lt;/code&gt;, we&amp;rsquo;re capturing whatever value matched the range while also testing that the value matched the range pattern.</source>
          <target state="translated">この例では &lt;code&gt;Found an id in range: 5&lt;/code&gt; ます。範囲 &lt;code&gt;3...7&lt;/code&gt; 前に &lt;code&gt;id_variable @&lt;/code&gt; を指定することにより、範囲に一致するすべての値をキャプチャすると同時に、値が範囲パターンに一致することをテストします。</target>
        </trans-unit>
        <trans-unit id="6bcb3e1c80011a7567e2eb18a8ff65f6e860aa55" translate="yes" xml:space="preserve">
          <source>This example will print &lt;code&gt;Found an id in range: 5&lt;/code&gt;. By specifying &lt;code&gt;id_variable @&lt;/code&gt; before the range &lt;code&gt;3..=7&lt;/code&gt;, we&amp;rsquo;re capturing whatever value matched the range while also testing that the value matched the range pattern.</source>
          <target state="translated">この例では &lt;code&gt;Found an id in range: 5&lt;/code&gt; ます。範囲 &lt;code&gt;3..=7&lt;/code&gt; 前に &lt;code&gt;id_variable @&lt;/code&gt; を指定することにより、値が範囲パターンに一致することをテストしながら、範囲に一致する値をキャプチャします。</target>
        </trans-unit>
        <trans-unit id="0792a7553f859fe5307a072fac84a140057b4ecf" translate="yes" xml:space="preserve">
          <source>This example will print &lt;code&gt;less than five: 4&lt;/code&gt;. When &lt;code&gt;num&lt;/code&gt; is compared to the pattern in the first arm, it matches, because &lt;code&gt;Some(4)&lt;/code&gt; matches &lt;code&gt;Some(x)&lt;/code&gt;. Then the match guard checks whether the value in &lt;code&gt;x&lt;/code&gt; is less than &lt;code&gt;5&lt;/code&gt;, and because it is, the first arm is selected.</source>
          <target state="translated">この例では &lt;code&gt;less than five: 4&lt;/code&gt; されます：4。場合 &lt;code&gt;num&lt;/code&gt; を第一のアーム内のパターンと比較されているので、それは、一致した &lt;code&gt;Some(4)&lt;/code&gt; と一致する &lt;code&gt;Some(x)&lt;/code&gt; 。次に、マッチガードは &lt;code&gt;x&lt;/code&gt; の値が &lt;code&gt;5&lt;/code&gt; 未満かどうかをチェックし、5未満であるため、最初のアームが選択されます。</target>
        </trans-unit>
        <trans-unit id="e9c51ef5db1956234586460cd5d4e3f2d56f3c15" translate="yes" xml:space="preserve">
          <source>This exists solely for &lt;a href=&quot;../mem/fn.forget_unsized&quot;&gt;&lt;code&gt;mem::forget_unsized&lt;/code&gt;&lt;/a&gt;; normal &lt;code&gt;forget&lt;/code&gt; uses &lt;code&gt;ManuallyDrop&lt;/code&gt; instead.</source>
          <target state="translated">これは&lt;a href=&quot;../mem/fn.forget_unsized&quot;&gt; &lt;code&gt;mem::forget_unsized&lt;/code&gt; &lt;/a&gt; ;にのみ存在します。通常の &lt;code&gt;forget&lt;/code&gt; 用途は &lt;code&gt;ManuallyDrop&lt;/code&gt; 代わりに。</target>
        </trans-unit>
        <trans-unit id="13f35b34cb9f0940df9ede968c0941933fe5a63e" translate="yes" xml:space="preserve">
          <source>This explicitly states that you expect the trait object &lt;code&gt;SomeTrait&lt;/code&gt; to contain references (with a maximum lifetime of &lt;code&gt;'a&lt;/code&gt;).</source>
          <target state="translated">これは、トレイトオブジェクト &lt;code&gt;SomeTrait&lt;/code&gt; に参照が含まれることを期待していることを明示的に示しています（最大有効期間は &lt;code&gt;'a&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="55550702354f0f532a45a47534287ba31230892e" translate="yes" xml:space="preserve">
          <source>This expression:</source>
          <target state="translated">この表現。</target>
        </trans-unit>
        <trans-unit id="d4d243a04a2e7c3baa5aaa70386526d20f9c61fb" translate="yes" xml:space="preserve">
          <source>This fails because &lt;code&gt;&amp;amp;mut T&lt;/code&gt; is not &lt;code&gt;Copy&lt;/code&gt;, even when &lt;code&gt;T&lt;/code&gt; is &lt;code&gt;Copy&lt;/code&gt; (this differs from the behavior for &lt;code&gt;&amp;amp;T&lt;/code&gt;, which is always &lt;code&gt;Copy&lt;/code&gt;).</source>
          <target state="translated">これは、失敗した &lt;code&gt;&amp;amp;mut T&lt;/code&gt; いない &lt;code&gt;Copy&lt;/code&gt; 場合でも、 &lt;code&gt;T&lt;/code&gt; がある &lt;code&gt;Copy&lt;/code&gt; （のための行動から、この異なっ &lt;code&gt;&amp;amp;T&lt;/code&gt; 常に、 &lt;code&gt;Copy&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="96a49ec58cf9d3de1eca61f7643ce5de9d8c4e5e" translate="yes" xml:space="preserve">
          <source>This fails because &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; does not implement &lt;code&gt;Copy&lt;/code&gt; for any &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">これは失敗し &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; 実装していない &lt;code&gt;Copy&lt;/code&gt; いずれかの &lt;code&gt;T&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="77c78e0cdd88af63c9805574659b7e0844c8f178" translate="yes" xml:space="preserve">
          <source>This fails to compile because &lt;code&gt;T&lt;/code&gt; does not appear in the trait or in the implementing type.</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; が特性または実装型に表示されないため、これはコンパイルに失敗します。</target>
        </trans-unit>
        <trans-unit id="586c08bc607fd5a338c048e0f30142b22328caf5" translate="yes" xml:space="preserve">
          <source>This field contains the file system attribute information for a file or directory. For possible values and their descriptions, see &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/fileio/file-attribute-constants&quot;&gt;File Attribute Constants&lt;/a&gt; in the Windows Dev Center.</source>
          <target state="translated">このフィールドには、ファイルまたはディレクトリのファイルシステム属性情報が含まれます。可能な値とその説明については、Windows DevCenterの「&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/fileio/file-attribute-constants&quot;&gt;ファイル属性定数&lt;/a&gt;」を参照してください。</target>
        </trans-unit>
        <trans-unit id="0c5af671ad45076c8c92a16a6b71ec7dd6cf3c8d" translate="yes" xml:space="preserve">
          <source>This field contains the file system attribute information for a file or directory. For possible values and their descriptions, see &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/gg258117.aspx&quot;&gt;File Attribute Constants&lt;/a&gt; in the Windows Dev Center.</source>
          <target state="translated">このフィールドには、ファイルまたはディレクトリのファイルシステム属性情報が含まれます。可能な値とその説明については、Windowsデベロッパーセンターの&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/gg258117.aspx&quot;&gt;ファイル属性定数&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="a06da2f86acca1e87efa6c64e9e56d6bba45e46d" translate="yes" xml:space="preserve">
          <source>This field may not be available on all platforms, and will return an &lt;code&gt;Err&lt;/code&gt; on platforms or filesystems where it is not available.</source>
          <target state="translated">このフィールドはすべてのプラットフォームで使用できるわけではなく、使用できないプラットフォームまたはファイルシステムでは &lt;code&gt;Err&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="fed8ac050f10d4961483960b90a8bb5fa116bf7c" translate="yes" xml:space="preserve">
          <source>This field may not be available on all platforms, and will return an &lt;code&gt;Err&lt;/code&gt; on platforms where it is not available.</source>
          <target state="translated">このフィールドはすべてのプラットフォームで使用できるわけではなく、使用できないプラットフォームでは &lt;code&gt;Err&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="5368359fd79a3572b28925e44099327d749ce6f1" translate="yes" xml:space="preserve">
          <source>This file is in the &lt;a href=&quot;https://github.com/toml-lang/toml&quot;&gt;&lt;em&gt;TOML&lt;/em&gt;&lt;/a&gt; (&lt;em&gt;Tom&amp;rsquo;s Obvious, Minimal Language&lt;/em&gt;) format, which is Cargo&amp;rsquo;s configuration format.</source>
          <target state="translated">このファイルは、Cargoの構成形式である&lt;a href=&quot;https://github.com/toml-lang/toml&quot;&gt;&lt;em&gt;TOML&lt;/em&gt;&lt;/a&gt;（&lt;em&gt;Tom's Obvious、Minimal Language&lt;/em&gt;）形式です。</target>
        </trans-unit>
        <trans-unit id="403b498b0ea95a8401971fc9fa18c953b57bf6c7" translate="yes" xml:space="preserve">
          <source>This file is in the &lt;a href=&quot;https://toml.io&quot;&gt;&lt;em&gt;TOML&lt;/em&gt;&lt;/a&gt; (&lt;em&gt;Tom&amp;rsquo;s Obvious, Minimal Language&lt;/em&gt;) format, which is Cargo&amp;rsquo;s configuration format.</source>
          <target state="translated">このファイルは、Cargoの構成形式である&lt;a href=&quot;https://toml.io&quot;&gt;&lt;em&gt;TOML&lt;/em&gt;&lt;/a&gt;（&lt;em&gt;Tom's Obvious、Minimal Language&lt;/em&gt;）形式です。</target>
        </trans-unit>
        <trans-unit id="f0537f20b3c4c0b16d4802ffcd175906f9816b83" translate="yes" xml:space="preserve">
          <source>This following example shows the stringified &lt;a href=&quot;https://doc.rust-lang.org/proc_macro/struct.TokenStream.html&quot;&gt;&lt;code&gt;TokenStream&lt;/code&gt;s&lt;/a&gt; that the attribute macros see. The output will show in the output of the compiler. The output is shown in the comments after the function prefixed with &quot;out:&quot;.</source>
          <target state="translated">この次の例が示す文字列化&lt;a href=&quot;https://doc.rust-lang.org/proc_macro/struct.TokenStream.html&quot;&gt; &lt;code&gt;TokenStream&lt;/code&gt; の&lt;/a&gt;属性マクロが見ていることを。出力はコンパイラの出力に表示されます。出力は、 &quot;out：&quot;で始まる関数の後のコメントに表示されます。</target>
        </trans-unit>
        <trans-unit id="a9c265b88652152ca2b28f53cb136d7ff3a25c8d" translate="yes" xml:space="preserve">
          <source>This function &lt;strong&gt;consumes ownership&lt;/strong&gt; of the specified file descriptor. The returned object will take responsibility for closing it when the object goes out of scope.</source>
          <target state="translated">この関数は、指定されたファイル記述子の&lt;strong&gt;所有権&lt;/strong&gt;を&lt;strong&gt;消費し&lt;/strong&gt;ます。返されたオブジェクトは、オブジェクトがスコープ外に出たときにそれを閉じる責任があります。</target>
        </trans-unit>
        <trans-unit id="7770f6814daf86198289168c0cb8b4e0eaa39b97" translate="yes" xml:space="preserve">
          <source>This function &lt;strong&gt;transfers ownership&lt;/strong&gt; of the underlying file descriptor to the caller. Callers are then the unique owners of the file descriptor and must close the descriptor once it's no longer needed.</source>
          <target state="translated">この関数は、基礎となるファイル記述子の&lt;strong&gt;所有権&lt;/strong&gt;を呼び出し元に&lt;strong&gt;転送し&lt;/strong&gt;ます。呼び出し元はファイル記述子の一意の所有者であり、不要になったときに記述子を閉じる必要があります。</target>
        </trans-unit>
        <trans-unit id="9e16870fdc5324388fb513d47d710cb2a9d23e70" translate="yes" xml:space="preserve">
          <source>This function &lt;strong&gt;transfers ownership&lt;/strong&gt; of the underlying handle to the caller. Callers are then the unique owners of the handle and must close it once it's no longer needed.</source>
          <target state="translated">この関数は、基になるハンドルの&lt;strong&gt;所有権&lt;/strong&gt;を呼び出し元に&lt;strong&gt;転送し&lt;/strong&gt;ます。呼び出し元はハンドルの一意の所有者であり、不要になったら閉じる必要があります。</target>
        </trans-unit>
        <trans-unit id="90c9a08f16b0c10b615b5b0843cebfac39017e99" translate="yes" xml:space="preserve">
          <source>This function &lt;strong&gt;transfers ownership&lt;/strong&gt; of the underlying pthread_t to the caller. Callers are then the unique owners of the pthread_t and must either detach or join the pthread_t once it's no longer needed.</source>
          <target state="translated">この関数は、基礎となるpthread_tの&lt;strong&gt;所有権&lt;/strong&gt;を呼び出し元に&lt;strong&gt;転送し&lt;/strong&gt;ます。呼び出し元はpthread_tの一意の所有者であり、pthread_tが不要になると、pthread_tを切り離すか、結合する必要があります。</target>
        </trans-unit>
        <trans-unit id="06669b18e93261495eb1fcf2252cb895da69c39a" translate="yes" xml:space="preserve">
          <source>This function &lt;strong&gt;transfers ownership&lt;/strong&gt; of the underlying socket to the caller. Callers are then the unique owners of the socket and must close it once it's no longer needed.</source>
          <target state="translated">この関数は、基になるソケットの&lt;strong&gt;所有権&lt;/strong&gt;を呼び出し元に&lt;strong&gt;転送し&lt;/strong&gt;ます。その場合、呼び出し元はソケットの一意の所有者であり、不要になったらソケットを閉じる必要があります。</target>
        </trans-unit>
        <trans-unit id="3028ce76268abc4493b0febc5668a0c85baa5e06" translate="yes" xml:space="preserve">
          <source>This function accepts strings such as</source>
          <target state="translated">この関数は、次のような文字列を受け付けます。</target>
        </trans-unit>
        <trans-unit id="3b6b07c29d146488fec502f1e37e5fcc2f92d5fd" translate="yes" xml:space="preserve">
          <source>This function allows inspecting the location, in code, of where an error happened. The returned &lt;code&gt;Backtrace&lt;/code&gt; contains information about the stack trace of the OS thread of execution of where the error originated from.</source>
          <target state="translated">この関数を使用すると、エラーが発生した場所をコードで検査できます。返される &lt;code&gt;Backtrace&lt;/code&gt; トレースには、エラーの発生元の実行のOSスレッドのスタックトレースに関する情報が含まれています。</target>
        </trans-unit>
        <trans-unit id="dcca4cdb6fc324905436b470716282df197ae1a7" translate="yes" xml:space="preserve">
          <source>This function behaves the same as &lt;code&gt;capture&lt;/code&gt; except that it ignores the values of the &lt;code&gt;RUST_BACKTRACE&lt;/code&gt; and &lt;code&gt;RUST_LIB_BACKTRACE&lt;/code&gt; environment variables, always capturing a backtrace.</source>
          <target state="translated">この関数は、 &lt;code&gt;RUST_BACKTRACE&lt;/code&gt; および &lt;code&gt;RUST_LIB_BACKTRACE&lt;/code&gt; 環境変数の値を無視し、常にバックトレースを &lt;code&gt;capture&lt;/code&gt; を除いて、キャプチャと同じように動作します。</target>
        </trans-unit>
        <trans-unit id="e1eb2ceefa3b664d9a9270981fa8cbdd469bffdd" translate="yes" xml:space="preserve">
          <source>This function can be used for control flow based on &lt;code&gt;Result&lt;/code&gt; values.</source>
          <target state="translated">この関数は、 &lt;code&gt;Result&lt;/code&gt; 値に基づく制御フローに使用できます。</target>
        </trans-unit>
        <trans-unit id="069d719c6868f05d1ad9a84a0abe1540eb6a83ca" translate="yes" xml:space="preserve">
          <source>This function can be used for control flow based on result values.</source>
          <target state="translated">この機能は、結果値に基づく制御フローに使用することができます。</target>
        </trans-unit>
        <trans-unit id="1f2e8570607d30aa900e189937d7916fe8ed3230" translate="yes" xml:space="preserve">
          <source>This function can be used to compose the results of two functions.</source>
          <target state="translated">この関数は、2つの関数の結果を合成することができます。</target>
        </trans-unit>
        <trans-unit id="890b1ba5d17963460809400c8357e2da154ed2a6" translate="yes" xml:space="preserve">
          <source>This function can be used to pass through a successful result while handling an error.</source>
          <target state="translated">この関数は、エラー処理中に成功した結果を通過させるために使用することができます。</target>
        </trans-unit>
        <trans-unit id="f898974fbfac52e97eb29d82afb416cf7dbf9a7a" translate="yes" xml:space="preserve">
          <source>This function can be used to unpack a successful result while handling an error.</source>
          <target state="translated">この関数は、エラー処理中に成功した結果をアンパックするために使用することができます。</target>
        </trans-unit>
        <trans-unit id="663e29d3010e4fe834fdfef457c75d87463c66ed" translate="yes" xml:space="preserve">
          <source>This function can be written in a much shorter way, but we&amp;rsquo;re going to start by doing a lot of it manually in order to explore error handling; at the end, we&amp;rsquo;ll show the shorter way. Let&amp;rsquo;s look at the return type of the function first: &lt;code&gt;Result&amp;lt;String, io::Error&amp;gt;&lt;/code&gt;. This means the function is returning a value of the type &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt; where the generic parameter &lt;code&gt;T&lt;/code&gt; has been filled in with the concrete type &lt;code&gt;String&lt;/code&gt; and the generic type &lt;code&gt;E&lt;/code&gt; has been filled in with the concrete type &lt;code&gt;io::Error&lt;/code&gt;. If this function succeeds without any problems, the code that calls this function will receive an &lt;code&gt;Ok&lt;/code&gt; value that holds a &lt;code&gt;String&lt;/code&gt;&amp;mdash;the username that this function read from the file. If this function encounters any problems, the code that calls this function will receive an &lt;code&gt;Err&lt;/code&gt; value that holds an instance of &lt;code&gt;io::Error&lt;/code&gt; that contains more information about what the problems were. We chose &lt;code&gt;io::Error&lt;/code&gt; as the return type of this function because that happens to be the type of the error value returned from both of the operations we&amp;rsquo;re calling in this function&amp;rsquo;s body that might fail: the &lt;code&gt;File::open&lt;/code&gt; function and the &lt;code&gt;read_to_string&lt;/code&gt; method.</source>
          <target state="translated">この関数はもっと短い方法で書くことができますが、エラー処理を調べるために、最初に多くの関数を手動で作成します。最後に、短い方法を示します。最初に関数の戻り値の型を見てみましょう： &lt;code&gt;Result&amp;lt;String, io::Error&amp;gt;&lt;/code&gt; 。これは、関数がタイプ &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt; 値を返すことを意味します。ここで、ジェネリックパラメーター &lt;code&gt;T&lt;/code&gt; は具象タイプ &lt;code&gt;String&lt;/code&gt; で埋められ、ジェネリックタイプ &lt;code&gt;E&lt;/code&gt; は具象タイプ &lt;code&gt;io::Error&lt;/code&gt; 埋められています。この関数が問題なく成功した場合、この関数を呼び出すコードは &lt;code&gt;String&lt;/code&gt; を保持する &lt;code&gt;Ok&lt;/code&gt; 値を受け取ります-この関数がファイルから読み取るユーザー名。この関数で問題が発生した場合、この関数を呼び出すコードは、問題の内容に関する詳細を含む &lt;code&gt;io::Error&lt;/code&gt; インスタンスを保持する &lt;code&gt;Err&lt;/code&gt; 値を受け取ります。この関数の戻り値の型として &lt;code&gt;io::Error&lt;/code&gt; を選択したのは、この関数の本体で呼び出している両方の操作から返されたエラー値の型であるため、 &lt;code&gt;File::open&lt;/code&gt; 関数と &lt;code&gt;read_to_string&lt;/code&gt; メソッド。</target>
        </trans-unit>
        <trans-unit id="cb45099429d3a43cd1fd9c5de5abe0335d7b7e9d" translate="yes" xml:space="preserve">
          <source>This function corresponds to &lt;a href=&quot;../mem/fn.replace&quot;&gt;&lt;code&gt;std::mem::replace&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この関数は&lt;a href=&quot;../mem/fn.replace&quot;&gt; &lt;code&gt;std::mem::replace&lt;/code&gt; &lt;/a&gt;対応します。</target>
        </trans-unit>
        <trans-unit id="bc55369db6754d8ec7579c34bfc5b97438f6a7f6" translate="yes" xml:space="preserve">
          <source>This function corresponds to &lt;a href=&quot;../mem/fn.swap&quot;&gt;&lt;code&gt;std::mem::swap&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この関数は&lt;a href=&quot;../mem/fn.swap&quot;&gt; &lt;code&gt;std::mem::swap&lt;/code&gt; &lt;/a&gt;対応します。</target>
        </trans-unit>
        <trans-unit id="ac167c5922dc46db61626cca7bc837d30e8e8d77" translate="yes" xml:space="preserve">
          <source>This function currently corresponds to &lt;code&gt;opendir&lt;/code&gt;, &lt;code&gt;lstat&lt;/code&gt;, &lt;code&gt;rm&lt;/code&gt; and &lt;code&gt;rmdir&lt;/code&gt; functions on Unix and the &lt;code&gt;FindFirstFile&lt;/code&gt;, &lt;code&gt;GetFileAttributesEx&lt;/code&gt;, &lt;code&gt;DeleteFile&lt;/code&gt;, and &lt;code&gt;RemoveDirectory&lt;/code&gt; functions on Windows. Note that, this &lt;a href=&quot;../io/index#platform-specific-behavior&quot;&gt;may change in the future&lt;/a&gt;.</source>
          <target state="translated">この関数は現在、UNIXの &lt;code&gt;opendir&lt;/code&gt; 、 &lt;code&gt;lstat&lt;/code&gt; 、 &lt;code&gt;rm&lt;/code&gt; および &lt;code&gt;rmdir&lt;/code&gt; 関数、およびWindows の &lt;code&gt;FindFirstFile&lt;/code&gt; 、 &lt;code&gt;GetFileAttributesEx&lt;/code&gt; 、 &lt;code&gt;DeleteFile&lt;/code&gt; 、および &lt;code&gt;RemoveDirectory&lt;/code&gt; 関数に対応しています。これ&lt;a href=&quot;../io/index#platform-specific-behavior&quot;&gt;は将来変更される可能性があることに&lt;/a&gt;注意してください。</target>
        </trans-unit>
        <trans-unit id="bea785a55c87ae52504d49f8f95ea16d8aa3ce9e" translate="yes" xml:space="preserve">
          <source>This function currently corresponds to the &lt;code&gt;chmod&lt;/code&gt; function on Unix and the &lt;code&gt;SetFileAttributes&lt;/code&gt; function on Windows. Note that, this &lt;a href=&quot;../io/index#platform-specific-behavior&quot;&gt;may change in the future&lt;/a&gt;.</source>
          <target state="translated">この関数は現在、Unix の &lt;code&gt;chmod&lt;/code&gt; 関数とWindowsの &lt;code&gt;SetFileAttributes&lt;/code&gt; 関数に対応しています。これ&lt;a href=&quot;../io/index#platform-specific-behavior&quot;&gt;は将来変更される可能性があることに&lt;/a&gt;注意してください。</target>
        </trans-unit>
        <trans-unit id="04e383479b2228c3ffffa98975698e9dda256dbb" translate="yes" xml:space="preserve">
          <source>This function currently corresponds to the &lt;code&gt;fchmod&lt;/code&gt; function on Unix and the &lt;code&gt;SetFileInformationByHandle&lt;/code&gt; function on Windows. Note that, this &lt;a href=&quot;../io/index#platform-specific-behavior&quot;&gt;may change in the future&lt;/a&gt;.</source>
          <target state="translated">この関数は現在、Unix の &lt;code&gt;fchmod&lt;/code&gt; 関数とWindowsの &lt;code&gt;SetFileInformationByHandle&lt;/code&gt; 関数に対応しています。これ&lt;a href=&quot;../io/index#platform-specific-behavior&quot;&gt;は将来変更される可能性があることに&lt;/a&gt;注意してください。</target>
        </trans-unit>
        <trans-unit id="0176ddcd073fa8b60d6460114db8d5951e367349" translate="yes" xml:space="preserve">
          <source>This function currently corresponds to the &lt;code&gt;link&lt;/code&gt; function on Unix and the &lt;code&gt;CreateHardLink&lt;/code&gt; function on Windows. Note that, this &lt;a href=&quot;../io/index#platform-specific-behavior&quot;&gt;may change in the future&lt;/a&gt;.</source>
          <target state="translated">この関数は現在、Unix の &lt;code&gt;link&lt;/code&gt; 関数とWindowsの &lt;code&gt;CreateHardLink&lt;/code&gt; 関数に対応しています。これ&lt;a href=&quot;../io/index#platform-specific-behavior&quot;&gt;は将来変更される可能性があることに&lt;/a&gt;注意してください。</target>
        </trans-unit>
        <trans-unit id="21169ffe61676853807722591cc30f485744220c" translate="yes" xml:space="preserve">
          <source>This function currently corresponds to the &lt;code&gt;linkat&lt;/code&gt; function with no flags on Unix and the &lt;code&gt;CreateHardLink&lt;/code&gt; function on Windows. Note that, this &lt;a href=&quot;../io/index#platform-specific-behavior&quot;&gt;may change in the future&lt;/a&gt;.</source>
          <target state="translated">この関数は、現在に対応 &lt;code&gt;linkat&lt;/code&gt; のUnix上でフラグなしとして機能 &lt;code&gt;CreateHardLink&lt;/code&gt; のWindows上の機能。これ&lt;a href=&quot;../io/index#platform-specific-behavior&quot;&gt;は将来変更される可能性があることに&lt;/a&gt;注意してください。</target>
        </trans-unit>
        <trans-unit id="01e2694d82da90e8f24cd10e750a58377e07410c" translate="yes" xml:space="preserve">
          <source>This function currently corresponds to the &lt;code&gt;lstat&lt;/code&gt; function on Unix and the &lt;code&gt;GetFileAttributesEx&lt;/code&gt; function on Windows. Note that, this &lt;a href=&quot;../io/index#platform-specific-behavior&quot;&gt;may change in the future&lt;/a&gt;.</source>
          <target state="translated">この関数は現在、Unix の &lt;code&gt;lstat&lt;/code&gt; 関数とWindowsの &lt;code&gt;GetFileAttributesEx&lt;/code&gt; 関数に対応しています。これ&lt;a href=&quot;../io/index#platform-specific-behavior&quot;&gt;は将来変更される可能性があることに&lt;/a&gt;注意してください。</target>
        </trans-unit>
        <trans-unit id="3537e3f2c9af1f7a17489b68fe05b364816b75fc" translate="yes" xml:space="preserve">
          <source>This function currently corresponds to the &lt;code&gt;mkdir&lt;/code&gt; function on Unix and the &lt;code&gt;CreateDirectory&lt;/code&gt; function on Windows. Note that, this &lt;a href=&quot;../io/index#platform-specific-behavior&quot;&gt;may change in the future&lt;/a&gt;.</source>
          <target state="translated">この関数は現在、Unix の &lt;code&gt;mkdir&lt;/code&gt; 関数とWindowsの &lt;code&gt;CreateDirectory&lt;/code&gt; 関数に対応しています。これ&lt;a href=&quot;../io/index#platform-specific-behavior&quot;&gt;は将来変更される可能性があることに&lt;/a&gt;注意してください。</target>
        </trans-unit>
        <trans-unit id="4ffbba2d718a3b3920d07fee5dfb64d2a84ce583" translate="yes" xml:space="preserve">
          <source>This function currently corresponds to the &lt;code&gt;open&lt;/code&gt; function in Unix with &lt;code&gt;O_RDONLY&lt;/code&gt; for &lt;code&gt;from&lt;/code&gt; and &lt;code&gt;O_WRONLY&lt;/code&gt;, &lt;code&gt;O_CREAT&lt;/code&gt;, and &lt;code&gt;O_TRUNC&lt;/code&gt; for &lt;code&gt;to&lt;/code&gt;. &lt;code&gt;O_CLOEXEC&lt;/code&gt; is set for returned file descriptors. On Windows, this function currently corresponds to &lt;code&gt;CopyFileEx&lt;/code&gt;. Alternate NTFS streams are copied but only the size of the main stream is returned by this function. On MacOS, this function corresponds to &lt;code&gt;fclonefileat&lt;/code&gt; and &lt;code&gt;fcopyfile&lt;/code&gt;. Note that, this &lt;a href=&quot;../io/index#platform-specific-behavior&quot;&gt;may change in the future&lt;/a&gt;.</source>
          <target state="translated">この関数は、現在に該当する &lt;code&gt;open&lt;/code&gt; したUnixにおける機能 &lt;code&gt;O_RDONLY&lt;/code&gt; 用 &lt;code&gt;from&lt;/code&gt; と &lt;code&gt;O_WRONLY&lt;/code&gt; 、 &lt;code&gt;O_CREAT&lt;/code&gt; 、および &lt;code&gt;O_TRUNC&lt;/code&gt; のため &lt;code&gt;to&lt;/code&gt; 。返されたファイル記述子に &lt;code&gt;O_CLOEXEC&lt;/code&gt; が設定されます。 Windowsでは、この関数は現在 &lt;code&gt;CopyFileEx&lt;/code&gt; に対応しています。代替NTFSストリームがコピーされますが、この関数によって返されるのはメインストリームのサイズのみです。 MacOSでは、この関数は &lt;code&gt;fclonefileat&lt;/code&gt; および &lt;code&gt;fcopyfile&lt;/code&gt; に対応します。これ&lt;a href=&quot;../io/index#platform-specific-behavior&quot;&gt;は将来変更される可能性があることに&lt;/a&gt;注意してください。</target>
        </trans-unit>
        <trans-unit id="69a3d5683d593b686853078a406cbc99ddb7840f" translate="yes" xml:space="preserve">
          <source>This function currently corresponds to the &lt;code&gt;opendir&lt;/code&gt; function on Unix and the &lt;code&gt;FindFirstFile&lt;/code&gt; function on Windows. Advancing the iterator currently corresponds to &lt;code&gt;readdir&lt;/code&gt; on Unix and &lt;code&gt;FindNextFile&lt;/code&gt; on Windows. Note that, this &lt;a href=&quot;../io/index#platform-specific-behavior&quot;&gt;may change in the future&lt;/a&gt;.</source>
          <target state="translated">この関数は現在、Unixの &lt;code&gt;opendir&lt;/code&gt; 関数とWindowsの &lt;code&gt;FindFirstFile&lt;/code&gt; 関数に対応しています。イテレータを進めることは、現在、Unixの &lt;code&gt;readdir&lt;/code&gt; とWindowsの &lt;code&gt;FindNextFile&lt;/code&gt; に対応しています。これ&lt;a href=&quot;../io/index#platform-specific-behavior&quot;&gt;は将来変更される可能性があることに&lt;/a&gt;注意してください。</target>
        </trans-unit>
        <trans-unit id="85bdcb1c22d0b90cfc515b44a49195abde2937e0" translate="yes" xml:space="preserve">
          <source>This function currently corresponds to the &lt;code&gt;opendir&lt;/code&gt; function on Unix and the &lt;code&gt;FindFirstFile&lt;/code&gt; function on Windows. Note that, this &lt;a href=&quot;../io/index#platform-specific-behavior&quot;&gt;may change in the future&lt;/a&gt;.</source>
          <target state="translated">この関数は現在、UNIX の &lt;code&gt;opendir&lt;/code&gt; 関数とWindowsの &lt;code&gt;FindFirstFile&lt;/code&gt; 関数に対応しています。これ&lt;a href=&quot;../io/index#platform-specific-behavior&quot;&gt;は将来変更される可能性があることに&lt;/a&gt;注意してください。</target>
        </trans-unit>
        <trans-unit id="c6d0089b9c1b95a34e4ecb4a009ec095c9db172d" translate="yes" xml:space="preserve">
          <source>This function currently corresponds to the &lt;code&gt;readlink&lt;/code&gt; function on Unix and the &lt;code&gt;CreateFile&lt;/code&gt; function with &lt;code&gt;FILE_FLAG_OPEN_REPARSE_POINT&lt;/code&gt; and &lt;code&gt;FILE_FLAG_BACKUP_SEMANTICS&lt;/code&gt; flags on Windows. Note that, this &lt;a href=&quot;../io/index#platform-specific-behavior&quot;&gt;may change in the future&lt;/a&gt;.</source>
          <target state="translated">この関数は、現在に対応 &lt;code&gt;readlink&lt;/code&gt; Unix上の機能と &lt;code&gt;CreateFile&lt;/code&gt; と機能 &lt;code&gt;FILE_FLAG_OPEN_REPARSE_POINT&lt;/code&gt; と &lt;code&gt;FILE_FLAG_BACKUP_SEMANTICS&lt;/code&gt; Windows上のフラグ。これ&lt;a href=&quot;../io/index#platform-specific-behavior&quot;&gt;は将来変更される可能性があることに&lt;/a&gt;注意してください。</target>
        </trans-unit>
        <trans-unit id="83d811fb4fcc08f1492a059a3536fbb7a2a90ca2" translate="yes" xml:space="preserve">
          <source>This function currently corresponds to the &lt;code&gt;realpath&lt;/code&gt; function on Unix and the &lt;code&gt;CreateFile&lt;/code&gt; and &lt;code&gt;GetFinalPathNameByHandle&lt;/code&gt; functions on Windows. Note that, this &lt;a href=&quot;../io/index#platform-specific-behavior&quot;&gt;may change in the future&lt;/a&gt;.</source>
          <target state="translated">この関数は現在、Unix の &lt;code&gt;realpath&lt;/code&gt; 関数およびWindowsの &lt;code&gt;CreateFile&lt;/code&gt; 関数と &lt;code&gt;GetFinalPathNameByHandle&lt;/code&gt; 関数に対応しています。これ&lt;a href=&quot;../io/index#platform-specific-behavior&quot;&gt;は将来変更される可能性があることに&lt;/a&gt;注意してください。</target>
        </trans-unit>
        <trans-unit id="e8892007c2c9e02432f47cff4848a4e40ebbc10c" translate="yes" xml:space="preserve">
          <source>This function currently corresponds to the &lt;code&gt;rename&lt;/code&gt; function on Unix and the &lt;code&gt;MoveFileEx&lt;/code&gt; function with the &lt;code&gt;MOVEFILE_REPLACE_EXISTING&lt;/code&gt; flag on Windows.</source>
          <target state="translated">この関数は現在、Unix の &lt;code&gt;rename&lt;/code&gt; 関数とWindowsの &lt;code&gt;MOVEFILE_REPLACE_EXISTING&lt;/code&gt; フラグを指定した &lt;code&gt;MoveFileEx&lt;/code&gt; 関数に対応しています。</target>
        </trans-unit>
        <trans-unit id="8dd8f559f50531dc710476fe85e80e2f8d9753bd" translate="yes" xml:space="preserve">
          <source>This function currently corresponds to the &lt;code&gt;rmdir&lt;/code&gt; function on Unix and the &lt;code&gt;RemoveDirectory&lt;/code&gt; function on Windows. Note that, this &lt;a href=&quot;../io/index#platform-specific-behavior&quot;&gt;may change in the future&lt;/a&gt;.</source>
          <target state="translated">この関数は現在、UNIX の &lt;code&gt;rmdir&lt;/code&gt; 関数とWindowsの &lt;code&gt;RemoveDirectory&lt;/code&gt; 関数に対応しています。これ&lt;a href=&quot;../io/index#platform-specific-behavior&quot;&gt;は将来変更される可能性があることに&lt;/a&gt;注意してください。</target>
        </trans-unit>
        <trans-unit id="b504889b373cb94fdb7ee56e28d937c2f36d6f0b" translate="yes" xml:space="preserve">
          <source>This function currently corresponds to the &lt;code&gt;stat&lt;/code&gt; function on Unix and the &lt;code&gt;GetFileAttributesEx&lt;/code&gt; function on Windows. Note that, this &lt;a href=&quot;../io/index#platform-specific-behavior&quot;&gt;may change in the future&lt;/a&gt;.</source>
          <target state="translated">この関数は現在、Unix の &lt;code&gt;stat&lt;/code&gt; 関数とWindowsの &lt;code&gt;GetFileAttributesEx&lt;/code&gt; 関数に対応しています。これ&lt;a href=&quot;../io/index#platform-specific-behavior&quot;&gt;は将来変更される可能性があることに&lt;/a&gt;注意してください。</target>
        </trans-unit>
        <trans-unit id="6672293739936665c26201ef3156432a0e98fd87" translate="yes" xml:space="preserve">
          <source>This function currently corresponds to the &lt;code&gt;unlink&lt;/code&gt; function on Unix and the &lt;code&gt;DeleteFile&lt;/code&gt; function on Windows. Note that, this &lt;a href=&quot;../io/index#platform-specific-behavior&quot;&gt;may change in the future&lt;/a&gt;.</source>
          <target state="translated">この関数は現在、Unix の &lt;code&gt;unlink&lt;/code&gt; 関数とWindowsの &lt;code&gt;DeleteFile&lt;/code&gt; 関数に対応しています。これ&lt;a href=&quot;../io/index#platform-specific-behavior&quot;&gt;は将来変更される可能性があることに&lt;/a&gt;注意してください。</target>
        </trans-unit>
        <trans-unit id="c94bdac48da7a0fc40fd1e5a086497b625f64825" translate="yes" xml:space="preserve">
          <source>This function does &lt;strong&gt;not&lt;/strong&gt; follow symbolic links and it will simply remove the symbolic link itself.</source>
          <target state="translated">この関数はシンボリックリンクをたどら&lt;strong&gt;ず&lt;/strong&gt;、単にシンボリックリンク自体を削除します。</target>
        </trans-unit>
        <trans-unit id="977a8c203f0461d37e9d1afc3c85702bdcf54979" translate="yes" xml:space="preserve">
          <source>This function does not block.</source>
          <target state="translated">この機能はブロックしません。</target>
        </trans-unit>
        <trans-unit id="99013d0e9f610e4b4ac531acb8d3cae6c5f35caf" translate="yes" xml:space="preserve">
          <source>This function does not provide any guarantees about whether it blocks waiting for data, but if an object needs to block for a read and cannot, it will typically signal this via an &lt;a href=&quot;../result/enum.result#variant.Err&quot;&gt;&lt;code&gt;Err&lt;/code&gt;&lt;/a&gt; return value.</source>
          <target state="translated">この関数は、データの待機をブロックするかどうかについての保証を提供しませんが、オブジェクトが読み取りのためにブロックする必要があり、ブロックできない場合、通常、&lt;a href=&quot;../result/enum.result#variant.Err&quot;&gt; &lt;code&gt;Err&lt;/code&gt; &lt;/a&gt;戻り値を介してこれを通知します。</target>
        </trans-unit>
        <trans-unit id="6f6f2506f47f0d38fd935eda8f1d3f32af31d36c" translate="yes" xml:space="preserve">
          <source>This function does not provide any guarantees about whether it blocks waiting for data, but if an object needs to block for a read but cannot it will typically signal this via an &lt;a href=&quot;../result/enum.result#variant.Err&quot;&gt;&lt;code&gt;Err&lt;/code&gt;&lt;/a&gt; return value.</source>
          <target state="translated">この関数は、データ待機をブロックするかどうかについては保証しませんが、オブジェクトが読み取りのためにブロックする必要があるが、通常は&lt;a href=&quot;../result/enum.result#variant.Err&quot;&gt; &lt;code&gt;Err&lt;/code&gt; &lt;/a&gt;戻り値を介してこれを通知できない場合。</target>
        </trans-unit>
        <trans-unit id="c9eb6fee31ded1ada354009451436d0884930106" translate="yes" xml:space="preserve">
          <source>This function does not provide any guarantees with respect to the ordering of whether contentious readers or writers will acquire the lock first.</source>
          <target state="translated">本機能は、競合する読者やライターが先にロックを取得するかどうかの順序について、何ら保証するものではありません。</target>
        </trans-unit>
        <trans-unit id="710d2720b9947751fee0e57d2b8d496c47712e72" translate="yes" xml:space="preserve">
          <source>This function does not resolve trait objects, meaning that &lt;code&gt;type_name_of_val(&amp;amp;7u32 as &amp;amp;dyn Debug)&lt;/code&gt; may return &lt;code&gt;&quot;dyn Debug&quot;&lt;/code&gt;, but not &lt;code&gt;&quot;u32&quot;&lt;/code&gt;.</source>
          <target state="translated">この関数はトレイトオブジェクトを解決しません。つまり、 &lt;code&gt;type_name_of_val(&amp;amp;7u32 as &amp;amp;dyn Debug)&lt;/code&gt; は &lt;code&gt;&quot;dyn Debug&quot;&lt;/code&gt; dynDebug 」を返すことができますが、 &lt;code&gt;&quot;u32&quot;&lt;/code&gt; は返すことができません。</target>
        </trans-unit>
        <trans-unit id="4305826482cc10423eedc0c48122ffd5b51fb63b" translate="yes" xml:space="preserve">
          <source>This function doesn't create the file if it doesn't exist. Use the &lt;a href=&quot;#method.create&quot;&gt;&lt;code&gt;create&lt;/code&gt;&lt;/a&gt; method to do so.</source>
          <target state="translated">この関数は、ファイルが存在しない場合は作成しません。これを行うには、&lt;a href=&quot;#method.create&quot;&gt; &lt;code&gt;create&lt;/code&gt; &lt;/a&gt;メソッドを使用します。</target>
        </trans-unit>
        <trans-unit id="33592db8fb3f9eb9295ccd92b371a923eae06e5a" translate="yes" xml:space="preserve">
          <source>This function doesn't create the file if it doesn't exist. Use the &lt;a href=&quot;struct.openoptions#method.create&quot;&gt;&lt;code&gt;OpenOptions::create&lt;/code&gt;&lt;/a&gt; method to do so.</source>
          <target state="translated">この関数は、ファイルが存在しない場合、ファイルを作成しません。これを行うには、&lt;a href=&quot;struct.openoptions#method.create&quot;&gt; &lt;code&gt;OpenOptions::create&lt;/code&gt; &lt;/a&gt;メソッドを使用します。</target>
        </trans-unit>
        <trans-unit id="c2ecd58992bf3950332fa012ed014d7ac0b8bc7f" translate="yes" xml:space="preserve">
          <source>This function first gets the total length of the slice. Then it asserts that the index given as a parameter is within the slice by checking whether it&amp;rsquo;s less than or equal to the length. The assertion means that if we pass an index that is greater than the index to split the slice at, the function will panic before it attempts to use that index.</source>
          <target state="translated">この関数は、最初にスライスの全長を取得します。次に、パラメーターとして指定されたインデックスが長さ以下であるかどうかをチェックすることにより、スライス内にあることをアサートします。このアサーションは、スライスを分割するインデックスより大きいインデックスを渡すと、関数がそのインデックスを使用しようとする前にパニックを起こすことを意味します。</target>
        </trans-unit>
        <trans-unit id="ef704585a456099301abe7c7cdfceffbef996018" translate="yes" xml:space="preserve">
          <source>This function first gets the total length of the slice. Then it asserts that the index given as a parameter is within the slice by checking whether it&amp;rsquo;s less than or equal to the length. The assertion means that if we pass an index that is greater than the length to split the slice at, the function will panic before it attempts to use that index.</source>
          <target state="translated">この関数は、最初にスライスの全長を取得します。次に、パラメータとして指定されたインデックスが長さ以下であるかどうかをチェックすることにより、スライス内にあることを表明します。アサーションは、スライスを分割する長さより大きいインデックスを渡すと、関数がそのインデックスを使用しようとする前にパニックになることを意味します。</target>
        </trans-unit>
        <trans-unit id="457e092a949142d636a9e03fab0c159238f5daa4" translate="yes" xml:space="preserve">
          <source>This function forwards calls to the &lt;a href=&quot;trait.globalalloc#method.alloc_zeroed&quot;&gt;&lt;code&gt;GlobalAlloc::alloc_zeroed&lt;/code&gt;&lt;/a&gt; method of the allocator registered with the &lt;code&gt;#[global_allocator]&lt;/code&gt; attribute if there is one, or the &lt;code&gt;std&lt;/code&gt; crate&amp;rsquo;s default.</source>
          <target state="translated">この関数は、 &lt;code&gt;#[global_allocator]&lt;/code&gt; 属性で登録されているアロケータの&lt;a href=&quot;trait.globalalloc#method.alloc_zeroed&quot;&gt; &lt;code&gt;GlobalAlloc::alloc_zeroed&lt;/code&gt; &lt;/a&gt;メソッドへの呼び出しを転送します（存在する場合）、または &lt;code&gt;std&lt;/code&gt; クレートのデフォルト。</target>
        </trans-unit>
        <trans-unit id="dac6968f4833b95b4cfc0a37edb3317e41dafb8d" translate="yes" xml:space="preserve">
          <source>This function forwards calls to the &lt;a href=&quot;trait.globalalloc#method.realloc&quot;&gt;&lt;code&gt;GlobalAlloc::realloc&lt;/code&gt;&lt;/a&gt; method of the allocator registered with the &lt;code&gt;#[global_allocator]&lt;/code&gt; attribute if there is one, or the &lt;code&gt;std&lt;/code&gt; crate&amp;rsquo;s default.</source>
          <target state="translated">この関数は、 &lt;code&gt;#[global_allocator]&lt;/code&gt; 属性で登録されているアロケーターの&lt;a href=&quot;trait.globalalloc#method.realloc&quot;&gt; &lt;code&gt;GlobalAlloc::realloc&lt;/code&gt; &lt;/a&gt;メソッドへの呼び出しを転送します（存在する場合）、または &lt;code&gt;std&lt;/code&gt; クレートのデフォルト。</target>
        </trans-unit>
        <trans-unit id="0ee226de8b2847b4bcaa66f0141bab39ef9c2e4e" translate="yes" xml:space="preserve">
          <source>This function forwards calls to the &lt;a href=&quot;trait.globalalloc#tymethod.alloc&quot;&gt;&lt;code&gt;GlobalAlloc::alloc&lt;/code&gt;&lt;/a&gt; method of the allocator registered with the &lt;code&gt;#[global_allocator]&lt;/code&gt; attribute if there is one, or the &lt;code&gt;std&lt;/code&gt; crate&amp;rsquo;s default.</source>
          <target state="translated">この関数は、 &lt;code&gt;#[global_allocator]&lt;/code&gt; 属性で登録されているアロケーターの&lt;a href=&quot;trait.globalalloc#tymethod.alloc&quot;&gt; &lt;code&gt;GlobalAlloc::alloc&lt;/code&gt; &lt;/a&gt;メソッドへの呼び出しを転送します（存在する場合）、または &lt;code&gt;std&lt;/code&gt; クレートのデフォルト。</target>
        </trans-unit>
        <trans-unit id="43408a3e60cf657f5104a853eae37001a5663e2b" translate="yes" xml:space="preserve">
          <source>This function forwards calls to the &lt;a href=&quot;trait.globalalloc#tymethod.dealloc&quot;&gt;&lt;code&gt;GlobalAlloc::dealloc&lt;/code&gt;&lt;/a&gt; method of the allocator registered with the &lt;code&gt;#[global_allocator]&lt;/code&gt; attribute if there is one, or the &lt;code&gt;std&lt;/code&gt; crate&amp;rsquo;s default.</source>
          <target state="translated">この関数は、 &lt;code&gt;#[global_allocator]&lt;/code&gt; 属性で登録されているアロケーターの&lt;a href=&quot;trait.globalalloc#tymethod.dealloc&quot;&gt; &lt;code&gt;GlobalAlloc::dealloc&lt;/code&gt; &lt;/a&gt;メソッドへの呼び出しを転送します（存在する場合）、または &lt;code&gt;std&lt;/code&gt; クレートのデフォルト。</target>
        </trans-unit>
        <trans-unit id="438ebff47f84838c22c79fbc8bfdda182cd513dc" translate="yes" xml:space="preserve">
          <source>This function gets called when a &lt;a href=&quot;struct.rawwaker&quot;&gt;&lt;code&gt;RawWaker&lt;/code&gt;&lt;/a&gt; gets dropped.</source>
          <target state="translated">この関数は、&lt;a href=&quot;struct.rawwaker&quot;&gt; &lt;code&gt;RawWaker&lt;/code&gt; &lt;/a&gt;がドロップされると呼び出されます。</target>
        </trans-unit>
        <trans-unit id="13819f0b7aa144e5ea6bcb9cc9f9a6808e198851" translate="yes" xml:space="preserve">
          <source>This function has the same error semantics as &lt;a href=&quot;#method.read_until&quot;&gt;&lt;code&gt;read_until&lt;/code&gt;&lt;/a&gt; and will also return an error if the read bytes are not valid UTF-8. If an I/O error is encountered then &lt;code&gt;buf&lt;/code&gt; may contain some bytes already read in the event that all data read so far was valid UTF-8.</source>
          <target state="translated">この関数には、&lt;a href=&quot;#method.read_until&quot;&gt; &lt;code&gt;read_until&lt;/code&gt; &lt;/a&gt;と同じエラーセマンティクスがあり、読み取られたバイトが有効なUTF-8でない場合もエラーを返します。I / Oエラーが発生した場合、これまでに読み取られたすべてのデータが有効なUTF-8であった場合、 &lt;code&gt;buf&lt;/code&gt; にはすでに読み取られたいくつかのバイトが含まれる可能性があります。</target>
        </trans-unit>
        <trans-unit id="2b30023fb932961fde08dc32d5756888772fda90" translate="yes" xml:space="preserve">
          <source>This function has the same error semantics as &lt;a href=&quot;trait.bufread#method.read_until&quot;&gt;&lt;code&gt;read_until&lt;/code&gt;&lt;/a&gt; and will also return an error if the read bytes are not valid UTF-8. If an I/O error is encountered then &lt;code&gt;buf&lt;/code&gt; may contain some bytes already read in the event that all data read so far was valid UTF-8.</source>
          <target state="translated">この関数のエラーセマンティクスは&lt;a href=&quot;trait.bufread#method.read_until&quot;&gt; &lt;code&gt;read_until&lt;/code&gt; &lt;/a&gt;と同じであり、読み取られたバイトが有効なUTF-8でない場合にもエラーを返します。I / Oエラーが発生した場合、これまでに読み取られたすべてのデータが有効なUTF-8であった場合、 &lt;code&gt;buf&lt;/code&gt; にはすでに読み取られたバイトが含まれている可能性があります。</target>
        </trans-unit>
        <trans-unit id="f52e89cf7de02d11dddd72bc5753735b903e55b9" translate="yes" xml:space="preserve">
          <source>This function has the same safety guarantees as the &lt;a href=&quot;trait.iterator#method.size_hint&quot;&gt;&lt;code&gt;Iterator::size_hint&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">この関数には、&lt;a href=&quot;trait.iterator#method.size_hint&quot;&gt; &lt;code&gt;Iterator::size_hint&lt;/code&gt; &lt;/a&gt;関数と同じ安全性が保証されています。</target>
        </trans-unit>
        <trans-unit id="adea46a33368b546562d3adbbc93c24db07769c5" translate="yes" xml:space="preserve">
          <source>This function has the same safety guarantees as the &lt;a href=&quot;trait.iterator#method.size_hint&quot;&gt;&lt;code&gt;size_hint&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">この関数には、&lt;a href=&quot;trait.iterator#method.size_hint&quot;&gt; &lt;code&gt;size_hint&lt;/code&gt; &lt;/a&gt;関数と同じ安全性の保証があります。</target>
        </trans-unit>
        <trans-unit id="1b144c49949055dde44dc3050173804acf39c11f" translate="yes" xml:space="preserve">
          <source>This function internally uses the &lt;a href=&quot;#method.write_all&quot;&gt;&lt;code&gt;write_all&lt;/code&gt;&lt;/a&gt; method on this trait and hence will continuously write data so long as no errors are received. This also means that partial writes are not indicated in this signature.</source>
          <target state="translated">この関数は、このトレイトで内部的に&lt;a href=&quot;#method.write_all&quot;&gt; &lt;code&gt;write_all&lt;/code&gt; &lt;/a&gt;メソッドを使用するため、エラーが受信されない限り、データを継続的に書き込みます。これは、この署名では部分的な書き込みが示されていないことも意味します。</target>
        </trans-unit>
        <trans-unit id="66530779d87bba553e9df64d147255f7af9fe886" translate="yes" xml:space="preserve">
          <source>This function internally uses the &lt;a href=&quot;trait.write#method.write_all&quot;&gt;&lt;code&gt;write_all&lt;/code&gt;&lt;/a&gt; method on this trait and hence will continuously write data so long as no errors are received. This also means that partial writes are not indicated in this signature.</source>
          <target state="translated">この関数は、このトレイトで内部的に&lt;a href=&quot;trait.write#method.write_all&quot;&gt; &lt;code&gt;write_all&lt;/code&gt; &lt;/a&gt;メソッドを使用するため、エラーが受信されない限り、データを継続的に書き込みます。これは、部分的な書き込みがこの署名に示されていないことも意味します。</target>
        </trans-unit>
        <trans-unit id="1f9b7d260474b82b56786f2b96849de01b420191" translate="yes" xml:space="preserve">
          <source>This function is a lower-level call. It needs to be paired with the &lt;a href=&quot;#tymethod.consume&quot;&gt;&lt;code&gt;consume&lt;/code&gt;&lt;/a&gt; method to function properly. When calling this method, none of the contents will be &quot;read&quot; in the sense that later calling &lt;code&gt;read&lt;/code&gt; may return the same contents. As such, &lt;a href=&quot;#tymethod.consume&quot;&gt;&lt;code&gt;consume&lt;/code&gt;&lt;/a&gt; must be called with the number of bytes that are consumed from this buffer to ensure that the bytes are never returned twice.</source>
          <target state="translated">この関数は、低レベルの呼び出しです。正しく機能&lt;a href=&quot;#tymethod.consume&quot;&gt; &lt;code&gt;consume&lt;/code&gt; &lt;/a&gt;ためには、それは消費メソッドと組み合わせる必要があります。このメソッドを呼び出すと、後で &lt;code&gt;read&lt;/code&gt; を呼び出すと同じコンテンツが返される可能性があるという意味で、どのコンテンツも「読み取られ」ません。そのため、このバッファから消費されるバイト数を指定して、そのバイトが2度返されないようにするために、&lt;a href=&quot;#tymethod.consume&quot;&gt; &lt;code&gt;consume&lt;/code&gt; を&lt;/a&gt;呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="1da3425b653a05b924f0c013401f366dcdf5aa2c" translate="yes" xml:space="preserve">
          <source>This function is a lower-level call. It needs to be paired with the &lt;a href=&quot;#tymethod.fill_buf&quot;&gt;&lt;code&gt;fill_buf&lt;/code&gt;&lt;/a&gt; method to function properly. This function does not perform any I/O, it simply informs this object that some amount of its buffer, returned from &lt;a href=&quot;#tymethod.fill_buf&quot;&gt;&lt;code&gt;fill_buf&lt;/code&gt;&lt;/a&gt;, has been consumed and should no longer be returned. As such, this function may do odd things if &lt;a href=&quot;#tymethod.fill_buf&quot;&gt;&lt;code&gt;fill_buf&lt;/code&gt;&lt;/a&gt; isn't called before calling it.</source>
          <target state="translated">この関数は、低レベルの呼び出しです。正しく機能するためには、&lt;a href=&quot;#tymethod.fill_buf&quot;&gt; &lt;code&gt;fill_buf&lt;/code&gt; &lt;/a&gt;メソッドと組み合わせる必要があります。この関数は、I / Oを実行せず、&lt;a href=&quot;#tymethod.fill_buf&quot;&gt; &lt;code&gt;fill_buf&lt;/code&gt; &lt;/a&gt;から返されたバッファーの一部が消費されており、返されるべきではないことをこのオブジェクトに通知するだけです。そのため、この関数は、&lt;a href=&quot;#tymethod.fill_buf&quot;&gt; &lt;code&gt;fill_buf&lt;/code&gt; &lt;/a&gt;が呼び出される前に呼び出されない場合、奇妙なことを行う可能性があります。</target>
        </trans-unit>
        <trans-unit id="854ee5963ab7cb501fb556356449a0a75bec7aa8" translate="yes" xml:space="preserve">
          <source>This function is a lower-level call. It needs to be paired with the &lt;a href=&quot;trait.bufread#tymethod.consume&quot;&gt;&lt;code&gt;consume&lt;/code&gt;&lt;/a&gt; method to function properly. When calling this method, none of the contents will be &quot;read&quot; in the sense that later calling &lt;code&gt;read&lt;/code&gt; may return the same contents. As such, &lt;a href=&quot;trait.bufread#tymethod.consume&quot;&gt;&lt;code&gt;consume&lt;/code&gt;&lt;/a&gt; must be called with the number of bytes that are consumed from this buffer to ensure that the bytes are never returned twice.</source>
          <target state="translated">この関数は低レベルの呼び出しです。正しく機能&lt;a href=&quot;trait.bufread#tymethod.consume&quot;&gt; &lt;code&gt;consume&lt;/code&gt; &lt;/a&gt;は、consumメソッドと組み合わせる必要があります。このメソッドを呼び出すと、後で &lt;code&gt;read&lt;/code&gt; を呼び出すと同じコンテンツが返される可能性があるという意味で、どのコンテンツも「読み取り」されません。そのため、&lt;a href=&quot;trait.bufread#tymethod.consume&quot;&gt; &lt;code&gt;consume&lt;/code&gt; &lt;/a&gt;バイトは二回返されないことを確実にするために、このバッファから消費されたバイト数を呼び出さなければなりません。</target>
        </trans-unit>
        <trans-unit id="579c281433d14ce69320e4d857132a7a2c6352d3" translate="yes" xml:space="preserve">
          <source>This function is a lower-level call. It needs to be paired with the &lt;a href=&quot;trait.bufread#tymethod.fill_buf&quot;&gt;&lt;code&gt;fill_buf&lt;/code&gt;&lt;/a&gt; method to function properly. This function does not perform any I/O, it simply informs this object that some amount of its buffer, returned from &lt;a href=&quot;trait.bufread#tymethod.fill_buf&quot;&gt;&lt;code&gt;fill_buf&lt;/code&gt;&lt;/a&gt;, has been consumed and should no longer be returned. As such, this function may do odd things if &lt;a href=&quot;trait.bufread#tymethod.fill_buf&quot;&gt;&lt;code&gt;fill_buf&lt;/code&gt;&lt;/a&gt; isn't called before calling it.</source>
          <target state="translated">この関数は低レベルの呼び出しです。正しく機能するには、&lt;a href=&quot;trait.bufread#tymethod.fill_buf&quot;&gt; &lt;code&gt;fill_buf&lt;/code&gt; &lt;/a&gt;メソッドとペアにする必要があります。この関数はI / Oを実行せず、&lt;a href=&quot;trait.bufread#tymethod.fill_buf&quot;&gt; &lt;code&gt;fill_buf&lt;/code&gt; &lt;/a&gt;から返されたバッファの一部が消費されており、もう返されないことをこのオブジェクトに通知するだけです。そのため、&lt;a href=&quot;trait.bufread#tymethod.fill_buf&quot;&gt; &lt;code&gt;fill_buf&lt;/code&gt; を&lt;/a&gt;呼び出す前に呼び出さないと、この関数は奇妙なことをする可能性があります。</target>
        </trans-unit>
        <trans-unit id="415a263593c43f00d8f5a632e9e771b274ca8329" translate="yes" xml:space="preserve">
          <source>This function is a no-op, and does not even read from &lt;code&gt;dummy&lt;/code&gt;.</source>
          <target state="translated">この関数はノーオペレーションであり、 &lt;code&gt;dummy&lt;/code&gt; からの読み取りも行いません。</target>
        </trans-unit>
        <trans-unit id="04e44698b394de41883f1cf69eb125285be21b0e" translate="yes" xml:space="preserve">
          <source>This function is also unsafe as the primitives currently returned have the contract that they are the sole owner of the file descriptor they are wrapping. Usage of this function could accidentally allow violating this contract which can cause memory unsafety in code that relies on it being true.</source>
          <target state="translated">この関数は、現在返されるプリミティブが、ラッピングしているファイルディスクリプタの唯一の所有者であるという契約を持っているため、安全ではありません。この関数を使用すると、誤ってこの契約に違反してしまう可能性があり、この契約が真であることに依存しているコードではメモリの安全性が損なわれる可能性があります。</target>
        </trans-unit>
        <trans-unit id="f34531fffd31ebc3903cc0f2c5f5bc232a9d53da" translate="yes" xml:space="preserve">
          <source>This function is blocking and should be used carefully: it is possible for an attacker to continuously send bytes without ever sending a newline or EOF.</source>
          <target state="translated">この関数はブロッキングされているため、注意して使用する必要があります:攻撃者は改行やEOFを送信せずにバイトを継続的に送信することが可能です。</target>
        </trans-unit>
        <trans-unit id="767fc2a16ab91407b9680a74099aea95b9c90341" translate="yes" xml:space="preserve">
          <source>This function is blocking and should be used carefully: it is possible for an attacker to continuously send bytes without ever sending the delimiter or EOF.</source>
          <target state="translated">攻撃者はデリミタやEOFを送らずにバイトを送り続ける可能性があります。</target>
        </trans-unit>
        <trans-unit id="e4f07981812bfb90d5d613f3cd12334bfad99018" translate="yes" xml:space="preserve">
          <source>This function is blocking, and should not be used in &lt;code&gt;async&lt;/code&gt; functions.</source>
          <target state="translated">この関数はブロックしているため、 &lt;code&gt;async&lt;/code&gt; 関数では使用しないでください。</target>
        </trans-unit>
        <trans-unit id="2491a3d7b07b5d574df89b38429aea33453977ac" translate="yes" xml:space="preserve">
          <source>This function is different from &lt;a href=&quot;../../thread/fn.yield_now&quot;&gt;&lt;code&gt;std::thread::yield_now&lt;/code&gt;&lt;/a&gt; which directly yields to the system's scheduler, whereas &lt;code&gt;spin_loop_hint&lt;/code&gt; does not interact with the operating system.</source>
          <target state="translated">この関数は、システムのスケジューラーに直接譲る&lt;a href=&quot;../../thread/fn.yield_now&quot;&gt; &lt;code&gt;std::thread::yield_now&lt;/code&gt; &lt;/a&gt;とは異なりますが、 &lt;code&gt;spin_loop_hint&lt;/code&gt; はオペレーティングシステムと対話しません。</target>
        </trans-unit>
        <trans-unit id="98d00324eb55b3a641f30a2bb642d7084ef611a4" translate="yes" xml:space="preserve">
          <source>This function is different from &lt;a href=&quot;../thread/fn.yield_now&quot;&gt;&lt;code&gt;thread::yield_now&lt;/code&gt;&lt;/a&gt; which directly yields to the system's scheduler, whereas &lt;code&gt;spin_loop&lt;/code&gt; does not interact with the operating system.</source>
          <target state="translated">この関数は、システムのスケジューラーに直接譲る&lt;a href=&quot;../thread/fn.yield_now&quot;&gt; &lt;code&gt;thread::yield_now&lt;/code&gt; &lt;/a&gt;とは異なりますが、 &lt;code&gt;spin_loop&lt;/code&gt; はオペレーティングシステムと相互作用しません。</target>
        </trans-unit>
        <trans-unit id="2844b634a91113f81bf8561b54a56d96807ba95f" translate="yes" xml:space="preserve">
          <source>This function is different than &lt;a href=&quot;../../thread/fn.yield_now&quot;&gt;&lt;code&gt;std::thread::yield_now&lt;/code&gt;&lt;/a&gt; which directly yields to the system's scheduler, whereas &lt;code&gt;spin_loop_hint&lt;/code&gt; only signals the processor that it is entering a busy-wait spin-loop without yielding control to the system's scheduler.</source>
          <target state="translated">この関数は、システムのスケジューラに直接&lt;a href=&quot;../../thread/fn.yield_now&quot;&gt; &lt;code&gt;std::thread::yield_now&lt;/code&gt; &lt;/a&gt;するstd :: thread :: yield_nowとは異なりますが、 &lt;code&gt;spin_loop_hint&lt;/code&gt; は、システムのスケジューラに制御を委譲せずにビジー待機スピンループに入ったことをプロセッサに通知するだけです。</target>
        </trans-unit>
        <trans-unit id="98f804e178831934e2704907d9977fcb07b49649" translate="yes" xml:space="preserve">
          <source>This function is different than &lt;a href=&quot;../thread/fn.yield_now&quot;&gt;&lt;code&gt;std::thread::yield_now&lt;/code&gt;&lt;/a&gt; which directly yields to the system's scheduler, whereas &lt;code&gt;spin_loop&lt;/code&gt; only signals the processor that it is entering a busy-wait spin-loop without yielding control to the system's scheduler.</source>
          <target state="translated">この関数は、システムのスケジューラに直接&lt;a href=&quot;../thread/fn.yield_now&quot;&gt; &lt;code&gt;std::thread::yield_now&lt;/code&gt; &lt;/a&gt;を渡すstd :: thread :: yield_nowとは異なりますが、 &lt;code&gt;spin_loop&lt;/code&gt; は、システムのスケジューラに制御を制御せずにビジー待機スピンループに入ったことをプロセッサに通知するだけです。</target>
        </trans-unit>
        <trans-unit id="41b9515d2076760cfa3f4b5d6d17d095ddb905fd" translate="yes" xml:space="preserve">
          <source>This function is expected to be deprecated in favor of &lt;a href=&quot;../../hint/fn.spin_loop&quot;&gt;&lt;code&gt;hint::spin_loop&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この関数は、&lt;a href=&quot;../../hint/fn.spin_loop&quot;&gt; &lt;code&gt;hint::spin_loop&lt;/code&gt; &lt;/a&gt;優先して、非推奨になると予想されます。</target>
        </trans-unit>
        <trans-unit id="467a74dd68a231eab8ded24aa170197676eb9466" translate="yes" xml:space="preserve">
          <source>This function is expected to be deprecated in favor of the &lt;code&gt;alloc&lt;/code&gt; method of the &lt;a href=&quot;struct.global&quot;&gt;&lt;code&gt;Global&lt;/code&gt;&lt;/a&gt; type when it and the &lt;a href=&quot;trait.alloc&quot;&gt;&lt;code&gt;Alloc&lt;/code&gt;&lt;/a&gt; trait become stable.</source>
          <target state="translated">この関数は、&lt;a href=&quot;struct.global&quot;&gt; &lt;code&gt;Global&lt;/code&gt; &lt;/a&gt;タイプの &lt;code&gt;alloc&lt;/code&gt; メソッドが優先され、&lt;a href=&quot;trait.alloc&quot;&gt; &lt;code&gt;Alloc&lt;/code&gt; &lt;/a&gt;トレイトが安定したときに廃止される予定です。</target>
        </trans-unit>
        <trans-unit id="af165703deff9d928fee107e2b077ae27c60ea8e" translate="yes" xml:space="preserve">
          <source>This function is expected to be deprecated in favor of the &lt;code&gt;alloc&lt;/code&gt; method of the &lt;a href=&quot;struct.global&quot;&gt;&lt;code&gt;Global&lt;/code&gt;&lt;/a&gt; type when it and the &lt;a href=&quot;trait.allocref&quot;&gt;&lt;code&gt;AllocRef&lt;/code&gt;&lt;/a&gt; trait become stable.</source>
          <target state="translated">この関数は、&lt;a href=&quot;struct.global&quot;&gt; &lt;code&gt;Global&lt;/code&gt; &lt;/a&gt;タイプの &lt;code&gt;alloc&lt;/code&gt; メソッドと&lt;a href=&quot;trait.allocref&quot;&gt; &lt;code&gt;AllocRef&lt;/code&gt; &lt;/a&gt;トレイトが安定すると、廃止される予定です。</target>
        </trans-unit>
        <trans-unit id="6654c3116763d1cd428eebcad450e10896b561da" translate="yes" xml:space="preserve">
          <source>This function is expected to be deprecated in favor of the &lt;code&gt;alloc_zeroed&lt;/code&gt; method of the &lt;a href=&quot;struct.global&quot;&gt;&lt;code&gt;Global&lt;/code&gt;&lt;/a&gt; type when it and the &lt;a href=&quot;trait.alloc&quot;&gt;&lt;code&gt;Alloc&lt;/code&gt;&lt;/a&gt; trait become stable.</source>
          <target state="translated">この関数は、&lt;a href=&quot;trait.alloc&quot;&gt; &lt;code&gt;Alloc&lt;/code&gt; &lt;/a&gt;トレイトが安定したときに、&lt;a href=&quot;struct.global&quot;&gt; &lt;code&gt;Global&lt;/code&gt; &lt;/a&gt;タイプの &lt;code&gt;alloc_zeroed&lt;/code&gt; メソッドを優先して非推奨になる予定です。</target>
        </trans-unit>
        <trans-unit id="bcbf3e248baf2acbd0ca22a0a9243de796c9b484" translate="yes" xml:space="preserve">
          <source>This function is expected to be deprecated in favor of the &lt;code&gt;alloc_zeroed&lt;/code&gt; method of the &lt;a href=&quot;struct.global&quot;&gt;&lt;code&gt;Global&lt;/code&gt;&lt;/a&gt; type when it and the &lt;a href=&quot;trait.allocref&quot;&gt;&lt;code&gt;AllocRef&lt;/code&gt;&lt;/a&gt; trait become stable.</source>
          <target state="translated">この関数は、この関数と&lt;a href=&quot;trait.allocref&quot;&gt; &lt;code&gt;AllocRef&lt;/code&gt; &lt;/a&gt;トレイトが安定したときに、&lt;a href=&quot;struct.global&quot;&gt; &lt;code&gt;Global&lt;/code&gt; &lt;/a&gt;タイプの &lt;code&gt;alloc_zeroed&lt;/code&gt; メソッドを優先して非推奨になると予想されます。</target>
        </trans-unit>
        <trans-unit id="0400d9b530af2cdc75200e564b1d3df4717e5b0d" translate="yes" xml:space="preserve">
          <source>This function is expected to be deprecated in favor of the &lt;code&gt;dealloc&lt;/code&gt; method of the &lt;a href=&quot;struct.global&quot;&gt;&lt;code&gt;Global&lt;/code&gt;&lt;/a&gt; type when it and the &lt;a href=&quot;trait.alloc&quot;&gt;&lt;code&gt;Alloc&lt;/code&gt;&lt;/a&gt; trait become stable.</source>
          <target state="translated">この関数は、&lt;a href=&quot;trait.alloc&quot;&gt; &lt;code&gt;Alloc&lt;/code&gt; &lt;/a&gt;トレイトが安定したときに、&lt;a href=&quot;struct.global&quot;&gt; &lt;code&gt;Global&lt;/code&gt; &lt;/a&gt;タイプの &lt;code&gt;dealloc&lt;/code&gt; メソッドを優先して非推奨になる予定です。</target>
        </trans-unit>
        <trans-unit id="9ed58253cb2bb6abe90cf553f72f373e1d0723cc" translate="yes" xml:space="preserve">
          <source>This function is expected to be deprecated in favor of the &lt;code&gt;dealloc&lt;/code&gt; method of the &lt;a href=&quot;struct.global&quot;&gt;&lt;code&gt;Global&lt;/code&gt;&lt;/a&gt; type when it and the &lt;a href=&quot;trait.allocref&quot;&gt;&lt;code&gt;AllocRef&lt;/code&gt;&lt;/a&gt; trait become stable.</source>
          <target state="translated">この関数は、&lt;a href=&quot;struct.global&quot;&gt; &lt;code&gt;Global&lt;/code&gt; &lt;/a&gt;タイプの &lt;code&gt;dealloc&lt;/code&gt; メソッドと&lt;a href=&quot;trait.allocref&quot;&gt; &lt;code&gt;AllocRef&lt;/code&gt; &lt;/a&gt;トレイトが安定したときに非推奨になり、廃止される予定です。</target>
        </trans-unit>
        <trans-unit id="9c9fc6e063817eb54b121ff88e105f246093f7ff" translate="yes" xml:space="preserve">
          <source>This function is expected to be deprecated in favor of the &lt;code&gt;realloc&lt;/code&gt; method of the &lt;a href=&quot;struct.global&quot;&gt;&lt;code&gt;Global&lt;/code&gt;&lt;/a&gt; type when it and the &lt;a href=&quot;trait.alloc&quot;&gt;&lt;code&gt;Alloc&lt;/code&gt;&lt;/a&gt; trait become stable.</source>
          <target state="translated">この関数は、&lt;a href=&quot;trait.alloc&quot;&gt; &lt;code&gt;Alloc&lt;/code&gt; &lt;/a&gt;トレイトが安定したときに、&lt;a href=&quot;struct.global&quot;&gt; &lt;code&gt;Global&lt;/code&gt; &lt;/a&gt;タイプの &lt;code&gt;realloc&lt;/code&gt; メソッドを優先して非推奨になる予定です。</target>
        </trans-unit>
        <trans-unit id="fa62f51911ddb19be8f5aa47587e29e20dee089f" translate="yes" xml:space="preserve">
          <source>This function is expected to be deprecated in favor of the &lt;code&gt;realloc&lt;/code&gt; method of the &lt;a href=&quot;struct.global&quot;&gt;&lt;code&gt;Global&lt;/code&gt;&lt;/a&gt; type when it and the &lt;a href=&quot;trait.allocref&quot;&gt;&lt;code&gt;AllocRef&lt;/code&gt;&lt;/a&gt; trait become stable.</source>
          <target state="translated">この関数は、&lt;a href=&quot;struct.global&quot;&gt; &lt;code&gt;Global&lt;/code&gt; &lt;/a&gt;タイプの &lt;code&gt;realloc&lt;/code&gt; メソッドと&lt;a href=&quot;trait.allocref&quot;&gt; &lt;code&gt;AllocRef&lt;/code&gt; &lt;/a&gt;トレイトが安定したときに非推奨になり、廃止される予定です。</target>
        </trans-unit>
        <trans-unit id="5b11361fb076bd1f28fd827ccd142c64af2b467e" translate="yes" xml:space="preserve">
          <source>This function is just a shim intended to be removed when the &lt;code&gt;unsized_locals&lt;/code&gt; feature gets stabilized.</source>
          <target state="translated">この関数は、 &lt;code&gt;unsized_locals&lt;/code&gt; 機能が安定したときに削除されることを意図した単なるシムです。</target>
        </trans-unit>
        <trans-unit id="bc7e9741757bc42e41e144d227e772dfb6ad20fc" translate="yes" xml:space="preserve">
          <source>This function is mainly useful for data that lives for the remainder of the program's life. Dropping the returned reference will cause a memory leak.</source>
          <target state="translated">この関数は、主にプログラムの残りの寿命まで生きるデータに対して有用です。返された参照を削除するとメモリリークが発生します。</target>
        </trans-unit>
        <trans-unit id="177431c922c0d0a7a204582e17b86736e812c93b" translate="yes" xml:space="preserve">
          <source>This function is mainly useful for data that lives for the remainder of the program's life. Dropping the returned reference will cause a memory leak. If this is not acceptable, the reference should first be wrapped with the &lt;a href=&quot;struct.box#method.from_raw&quot;&gt;&lt;code&gt;Box::from_raw&lt;/code&gt;&lt;/a&gt; function producing a &lt;code&gt;Box&lt;/code&gt;. This &lt;code&gt;Box&lt;/code&gt; can then be dropped which will properly destroy &lt;code&gt;T&lt;/code&gt; and release the allocated memory.</source>
          <target state="translated">この関数は主に、プログラムの残りの期間にわたって存続するデータに役立ちます。返された参照を削除すると、メモリリークが発生します。これが受け入れられない場合は、参照が最初でラップする必要があります&lt;a href=&quot;struct.box#method.from_raw&quot;&gt; &lt;code&gt;Box::from_raw&lt;/code&gt; &lt;/a&gt;生産機能 &lt;code&gt;Box&lt;/code&gt; 。次に、この &lt;code&gt;Box&lt;/code&gt; をドロップして、 &lt;code&gt;T&lt;/code&gt; を適切に破棄し、割り当てられたメモリを解放することができます。</target>
        </trans-unit>
        <trans-unit id="59cb1896e3dcd115f785bf2479cb4580b1b9722d" translate="yes" xml:space="preserve">
          <source>This function is not magic; it is literally defined as</source>
          <target state="translated">この関数は魔法ではありません。</target>
        </trans-unit>
        <trans-unit id="cc2ffe8b61942162bfcfde0b12c33ce86e8880cb" translate="yes" xml:space="preserve">
          <source>This function is only safe to call if the following conditions hold:</source>
          <target state="translated">この関数は、以下の条件が満たされている場合にのみ、安全に呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="eeccb3e706f48a212133104a654e31843b7b7b92" translate="yes" xml:space="preserve">
          <source>This function is primarily used for optimization purposes.</source>
          <target state="translated">この機能は主に最適化のために使用されます。</target>
        </trans-unit>
        <trans-unit id="93c7910f6179639ce884370e8d94a5595d080311" translate="yes" xml:space="preserve">
          <source>This function is primarily useful for allowing byte-wise pointer arithmetic on potentially fat pointers:</source>
          <target state="translated">この関数は主に、太る可能性のあるポインタのバイト単位のポインタ演算を可能にするのに便利です。</target>
        </trans-unit>
        <trans-unit id="1cd0464bff7e9c8dd1499717db18b2f31952ba8c" translate="yes" xml:space="preserve">
          <source>This function is safe, but actually using the return value is unsafe. See the documentation of &lt;a href=&quot;../slice/fn.from_raw_parts&quot;&gt;&lt;code&gt;slice::from_raw_parts&lt;/code&gt;&lt;/a&gt; for slice safety requirements.</source>
          <target state="translated">この関数は安全ですが、実際に戻り値を使用することは安全ではありません。スライスの安全要件については、&lt;a href=&quot;../slice/fn.from_raw_parts&quot;&gt; &lt;code&gt;slice::from_raw_parts&lt;/code&gt; &lt;/a&gt;ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="47c5699202ba358abe356e82ca7c6c5715bfdeae" translate="yes" xml:space="preserve">
          <source>This function is safe, but actually using the return value is unsafe. See the documentation of &lt;a href=&quot;../slice/fn.from_raw_parts_mut&quot;&gt;&lt;code&gt;slice::from_raw_parts_mut&lt;/code&gt;&lt;/a&gt; for slice safety requirements.</source>
          <target state="translated">この関数は安全ですが、実際に戻り値を使用することは安全ではありません。スライスの安全要件については、&lt;a href=&quot;../slice/fn.from_raw_parts_mut&quot;&gt; &lt;code&gt;slice::from_raw_parts_mut&lt;/code&gt; &lt;/a&gt;ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="451ae39575c352f08886704c7ffa48d2181b8a99" translate="yes" xml:space="preserve">
          <source>This function is safe, but dereferencing the return value is unsafe. See the documentation of &lt;a href=&quot;../slice/fn.from_raw_parts&quot;&gt;&lt;code&gt;slice::from_raw_parts&lt;/code&gt;&lt;/a&gt; for slice safety requirements.</source>
          <target state="translated">この関数は安全ですが、戻り値の逆参照は安全ではありません。スライスの安全要件については、&lt;a href=&quot;../slice/fn.from_raw_parts&quot;&gt; &lt;code&gt;slice::from_raw_parts&lt;/code&gt; &lt;/a&gt;ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="1a4d03cae95a52ccbe2043ee8d63640e5a40a11f" translate="yes" xml:space="preserve">
          <source>This function is safe, even when the non-null raw slice cannot be dereferenced to a slice because the pointer does not have a valid address.</source>
          <target state="translated">この関数は、ポインタが有効なアドレスを持っていないために、非ヌルでない生のスライスをスライスに派生できない場合でも安全です。</target>
        </trans-unit>
        <trans-unit id="f368bea1b2408b163770a1c33d9edf8ea07be6d6" translate="yes" xml:space="preserve">
          <source>This function is safe, even when the raw slice cannot be cast to a slice reference because the pointer is null or unaligned.</source>
          <target state="translated">この関数は、ポインタがNULLまたはアラインメントされていないために、生のスライスをスライス参照にキャストできない場合でも安全です。</target>
        </trans-unit>
        <trans-unit id="9a9053fe38824d2de0054cbaba771d8a6b62c54f" translate="yes" xml:space="preserve">
          <source>This function is semantically equivalent to &lt;a href=&quot;../mem/fn.replace&quot;&gt;&lt;code&gt;mem::replace&lt;/code&gt;&lt;/a&gt; except that it operates on raw pointers instead of references. When references are available, &lt;a href=&quot;../mem/fn.replace&quot;&gt;&lt;code&gt;mem::replace&lt;/code&gt;&lt;/a&gt; should be preferred.</source>
          <target state="translated">この関数は、参照の代わりに生のポインタを操作する&lt;a href=&quot;../mem/fn.replace&quot;&gt; &lt;code&gt;mem::replace&lt;/code&gt; &lt;/a&gt;を除いて、mem :: replaceと意味的に同等です。参照が利用可能な場合、&lt;a href=&quot;../mem/fn.replace&quot;&gt; &lt;code&gt;mem::replace&lt;/code&gt; &lt;/a&gt;が推奨されます。</target>
        </trans-unit>
        <trans-unit id="7bc2ee69e11ff49cf8f44aa7be972ea956317ef2" translate="yes" xml:space="preserve">
          <source>This function is similar to &lt;a href=&quot;struct.file#method.sync_all&quot;&gt;&lt;code&gt;sync_all&lt;/code&gt;&lt;/a&gt;, except that it may not synchronize file metadata to the filesystem.</source>
          <target state="translated">この関数は&lt;a href=&quot;struct.file#method.sync_all&quot;&gt; &lt;code&gt;sync_all&lt;/code&gt; &lt;/a&gt;に似ていますが、ファイルメタデータをファイルシステムに同期しない場合があります。</target>
        </trans-unit>
        <trans-unit id="c9cbe9f2a91fb1ea199b620a6bb920ab34b40788" translate="yes" xml:space="preserve">
          <source>This function is similar to &lt;code&gt;wake&lt;/code&gt;, but must not consume the provided data pointer.</source>
          <target state="translated">この関数は &lt;code&gt;wake&lt;/code&gt; に似ていますが、提供されたデータポインターを消費しないようにする必要があります。</target>
        </trans-unit>
        <trans-unit id="3817c9c59ae829a4e4b6db71acecc27e54fc335a" translate="yes" xml:space="preserve">
          <source>This function is similar to the &lt;a href=&quot;../boxed/struct.box#method.leak&quot;&gt;&lt;code&gt;leak&lt;/code&gt;&lt;/a&gt; function on &lt;a href=&quot;../boxed/struct.box&quot;&gt;&lt;code&gt;Box&lt;/code&gt;&lt;/a&gt; except that there is no way to recover the leaked memory.</source>
          <target state="translated">この関数は、リークされたメモリを回復する方法がないことを除いて、&lt;a href=&quot;../boxed/struct.box&quot;&gt; &lt;code&gt;Box&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;../boxed/struct.box#method.leak&quot;&gt; &lt;code&gt;leak&lt;/code&gt; &lt;/a&gt;関数に似ています。</target>
        </trans-unit>
        <trans-unit id="a4ebf22d46bf6517393acc377fdd446867946954" translate="yes" xml:space="preserve">
          <source>This function is similar to the &lt;code&gt;leak&lt;/code&gt; function on &lt;code&gt;Box&lt;/code&gt;.</source>
          <target state="translated">この機能は、 &lt;code&gt;Box&lt;/code&gt; の &lt;code&gt;leak&lt;/code&gt; 機能に似ています。</target>
        </trans-unit>
        <trans-unit id="b2a62d49d2d0f2fe0fb6a0071ccf5e43d3885dc1" translate="yes" xml:space="preserve">
          <source>This function is the equivalent of &lt;a href=&quot;#method.to_bytes&quot;&gt;&lt;code&gt;to_bytes&lt;/code&gt;&lt;/a&gt; except that it will retain the trailing nul terminator instead of chopping it off.</source>
          <target state="translated">この関数は、末尾のヌルターミネーターを&lt;a href=&quot;#method.to_bytes&quot;&gt; &lt;code&gt;to_bytes&lt;/code&gt; &lt;/a&gt;ではなく保持することを除いて、to_bytesと同等です。</target>
        </trans-unit>
        <trans-unit id="aa81adf357f1575ab28bd1d9c5804caf46b4ba04" translate="yes" xml:space="preserve">
          <source>This function is the equivalent of &lt;a href=&quot;struct.cstr#method.to_bytes&quot;&gt;&lt;code&gt;CStr::to_bytes&lt;/code&gt;&lt;/a&gt; except that it will retain the trailing nul terminator instead of chopping it off.</source>
          <target state="translated">この関数は、&lt;a href=&quot;struct.cstr#method.to_bytes&quot;&gt; &lt;code&gt;CStr::to_bytes&lt;/code&gt; &lt;/a&gt;と同等ですが、末尾のnulターミネータを切り落とす代わりに保持する点が異なります。</target>
        </trans-unit>
        <trans-unit id="bbca71aedd00db40d26ceff11e63bc8c656a9f3e" translate="yes" xml:space="preserve">
          <source>This function is the inverse of &lt;a href=&quot;#method.offset&quot;&gt;&lt;code&gt;offset&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この関数は、&lt;a href=&quot;#method.offset&quot;&gt; &lt;code&gt;offset&lt;/code&gt; &lt;/a&gt;の逆です。</target>
        </trans-unit>
        <trans-unit id="60af8a75ca29fd4b9524979a42c65b475dac17ca" translate="yes" xml:space="preserve">
          <source>This function is the inverse of &lt;a href=&quot;#method.offset-1&quot;&gt;&lt;code&gt;offset&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この関数は、&lt;a href=&quot;#method.offset-1&quot;&gt; &lt;code&gt;offset&lt;/code&gt; &lt;/a&gt;の逆です。</target>
        </trans-unit>
        <trans-unit id="a968e659e413eae940af237b572b89fdec65a1f7" translate="yes" xml:space="preserve">
          <source>This function is the mirror of &lt;a href=&quot;#method.guaranteed_eq&quot;&gt;&lt;code&gt;guaranteed_eq&lt;/code&gt;&lt;/a&gt;, but not its inverse. There are pointer comparisons for which both functions return &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">この関数は&lt;a href=&quot;#method.guaranteed_eq&quot;&gt; &lt;code&gt;guaranteed_eq&lt;/code&gt; &lt;/a&gt;のミラーですが、その逆ではありません。両方の関数が &lt;code&gt;false&lt;/code&gt; を返すポインター比較があります。</target>
        </trans-unit>
        <trans-unit id="df5c6e62763bfc43519897ed41868fc1d62d6938" translate="yes" xml:space="preserve">
          <source>This function is the mirror of &lt;a href=&quot;#method.guaranteed_ne&quot;&gt;&lt;code&gt;guaranteed_ne&lt;/code&gt;&lt;/a&gt;, but not its inverse. There are pointer comparisons for which both functions return &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">この関数は&lt;a href=&quot;#method.guaranteed_ne&quot;&gt; &lt;code&gt;guaranteed_ne&lt;/code&gt; &lt;/a&gt;のミラーですが、その逆ではありません。両方の関数が &lt;code&gt;false&lt;/code&gt; を返すポインター比較があります。</target>
        </trans-unit>
        <trans-unit id="f4e91aa4b5730d86849f9ad126912325901a438a" translate="yes" xml:space="preserve">
          <source>This function is unsafe as it does not verify the preconditions from &lt;a href=&quot;#method.from_size_align&quot;&gt;&lt;code&gt;Layout::from_size_align&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この関数は、&lt;a href=&quot;#method.from_size_align&quot;&gt; &lt;code&gt;Layout::from_size_align&lt;/code&gt; &lt;/a&gt;前提条件を検証しないため、安全ではありません。</target>
        </trans-unit>
        <trans-unit id="8570a34fff9bbf02e64d50247313e6b25b11941e" translate="yes" xml:space="preserve">
          <source>This function is unsafe as it does not verify the preconditions from &lt;a href=&quot;struct.layout#method.from_size_align&quot;&gt;&lt;code&gt;Layout::from_size_align&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この関数は、&lt;a href=&quot;struct.layout#method.from_size_align&quot;&gt; &lt;code&gt;Layout::from_size_align&lt;/code&gt; &lt;/a&gt;前提条件を検証しないため、安全ではありません。</target>
        </trans-unit>
        <trans-unit id="c0adf1d1fbca05371274b33d836dbb8ba3b0da96" translate="yes" xml:space="preserve">
          <source>This function is unsafe as there is no guarantee that the given pointer is valid for &lt;code&gt;len&lt;/code&gt; elements, nor whether the lifetime inferred is a suitable lifetime for the returned slice.</source>
          <target state="translated">この関数は、与えられたポインタが &lt;code&gt;len&lt;/code&gt; 要素に対して有効であるという保証も、推論された寿命が返されたスライスに適切な寿命であるかどうかも保証されていないため、安全ではありません。</target>
        </trans-unit>
        <trans-unit id="ead8661237451bd45c2559207ff2f0d2dcefd5f7" translate="yes" xml:space="preserve">
          <source>This function is unsafe because improper use may lead to memory problems. For example, a double-free may occur if the function is called twice on the same raw pointer.</source>
          <target state="translated">この関数は不適切に使用するとメモリの問題を引き起こす可能性があるため、安全ではありません。例えば、同じ生ポインタに対してこの関数が2回呼ばれた場合、ダブルフリーが発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="35f3e90c9d123dc330088febbcb755f29e299a96" translate="yes" xml:space="preserve">
          <source>This function is unsafe because improper use may lead to memory unsafety, even if the returned &lt;code&gt;Arc&amp;lt;T&amp;gt;&lt;/code&gt; is never accessed.</source>
          <target state="translated">返された &lt;code&gt;Arc&amp;lt;T&amp;gt;&lt;/code&gt; アクセスしなくても、不適切な使用はメモリの安全性を損なう可能性があるため、この関数は安全ではありません。</target>
        </trans-unit>
        <trans-unit id="e8bd102f6698ee49286a5c128925e7efc3ca2420" translate="yes" xml:space="preserve">
          <source>This function is unsafe because improper use may lead to memory unsafety, even if the returned &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; is never accessed.</source>
          <target state="translated">返された &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; アクセスしなくても、不適切な使用はメモリの安全性を損なう可能性があるため、この関数は安全ではありません。</target>
        </trans-unit>
        <trans-unit id="1f0606f18b84a9d14096f66fc981df0b42c6d0bf" translate="yes" xml:space="preserve">
          <source>This function is unsafe because it does not check that the bytes passed to it are valid UTF-8. If this constraint is violated, it may cause memory unsafety issues with future users of the &lt;code&gt;String&lt;/code&gt;, as the rest of the standard library assumes that &lt;code&gt;String&lt;/code&gt;s are valid UTF-8.</source>
          <target state="translated">この関数は、渡されたバイトが有効なUTF-8であることをチェックしないため、安全ではありません。この制約に違反すると、標準ライブラリの残りの部分で &lt;code&gt;String&lt;/code&gt; が有効なUTF-8であると想定されるため、将来 &lt;code&gt;String&lt;/code&gt; を使用するユーザーにメモリの安全上の問題が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="36c2b1be1ffd545e988489f24fde5b599256ff94" translate="yes" xml:space="preserve">
          <source>This function is unsafe because it does not check that the bytes passed to it are valid UTF-8. If this constraint is violated, undefined behavior results, as the rest of Rust assumes that &lt;a href=&quot;../primitive.str&quot;&gt;&lt;code&gt;&amp;amp;str&lt;/code&gt;&lt;/a&gt;s are valid UTF-8.</source>
          <target state="translated">この関数は、渡されたバイトが有効なUTF-8であることをチェックしないため、安全ではありません。この制約に違反すると、Rustの残りの部分が&lt;a href=&quot;../primitive.str&quot;&gt; &lt;code&gt;&amp;amp;str&lt;/code&gt; &lt;/a&gt;が有効なUTF-8であると想定するため、未定義の動作が発生します。</target>
        </trans-unit>
        <trans-unit id="d26d0eb0451d8006697165ba21e7f4a6d2affd96" translate="yes" xml:space="preserve">
          <source>This function is unsafe because undefined behavior can result if the caller does not ensure all of the following:</source>
          <target state="translated">この関数は、呼び出し元が以下のすべてを保証していない場合、未定義の動作が発生する可能性があるため、安全ではありません。</target>
        </trans-unit>
        <trans-unit id="42a04935e77664a45c1ca55344796f0f9622e5b5" translate="yes" xml:space="preserve">
          <source>This function is unsafe because undefined behavior can result if the caller does not ensure both:</source>
          <target state="translated">この関数は、呼び出し元が両方を確保していない場合、未定義の動作が発生する可能性があるため、安全ではありません。</target>
        </trans-unit>
        <trans-unit id="b81cd2be550f8d99eeb1700fa914c58868e2867c" translate="yes" xml:space="preserve">
          <source>This function is unsafe because undefined behavior can result if the caller does not ensure that &lt;code&gt;layout&lt;/code&gt; has non-zero size.</source>
          <target state="translated">呼び出し側が &lt;code&gt;layout&lt;/code&gt; サイズがゼロ以外であることを保証しない場合、未定義の動作が発生する可能性があるため、この関数は安全ではありません。</target>
        </trans-unit>
        <trans-unit id="454ec0a5acadcaac0aa85170f5ed93cb46c13302" translate="yes" xml:space="preserve">
          <source>This function is unsafe for the same reasons as &lt;a href=&quot;fn.from_raw_parts&quot;&gt;&lt;code&gt;from_raw_parts&lt;/code&gt;&lt;/a&gt;, as well as not being able to provide a non-aliasing guarantee of the returned mutable slice. &lt;code&gt;data&lt;/code&gt; must be non-null and aligned even for zero-length slices as with &lt;a href=&quot;fn.from_raw_parts&quot;&gt;&lt;code&gt;from_raw_parts&lt;/code&gt;&lt;/a&gt;. The total size of the slice must be no larger than &lt;code&gt;isize::MAX&lt;/code&gt;&lt;strong&gt;bytes&lt;/strong&gt; in memory.</source>
          <target state="translated">この関数は、&lt;a href=&quot;fn.from_raw_parts&quot;&gt; &lt;code&gt;from_raw_parts&lt;/code&gt; &lt;/a&gt;と同じ理由で安全ではなく、返される可変スライスの非エイリアス保証を提供することもできません。&lt;a href=&quot;fn.from_raw_parts&quot;&gt; &lt;code&gt;from_raw_parts&lt;/code&gt; の&lt;/a&gt;ように、 &lt;code&gt;data&lt;/code&gt; はnull以外であり、長さがゼロのスライスであっても整列する必要があります。スライスの合計サイズは、メモリ内の &lt;code&gt;isize::MAX&lt;/code&gt; &lt;strong&gt;バイト&lt;/strong&gt;以下でなければなりません。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="eecdc0e72496ca31779009b14276f9c964f0fc63" translate="yes" xml:space="preserve">
          <source>This function is unsafe for the same reasons that &lt;code&gt;alloc&lt;/code&gt; is.</source>
          <target state="translated">この関数は、 &lt;code&gt;alloc&lt;/code&gt; と同じ理由で安全ではありません。</target>
        </trans-unit>
        <trans-unit id="f46ccfd28f902efc152ad3d0bc725d272999fa8f" translate="yes" xml:space="preserve">
          <source>This function is unsafe for the same reasons that &lt;code&gt;alloc&lt;/code&gt; is. However the allocated block of memory is guaranteed to be initialized.</source>
          <target state="translated">この関数は、 &lt;code&gt;alloc&lt;/code&gt; と同じ理由で安全ではありません。ただし、割り当てられたメモリブロックは初期化されることが保証されています。</target>
        </trans-unit>
        <trans-unit id="c8935ef267a58bf14edf52661928291938f416d8" translate="yes" xml:space="preserve">
          <source>This function is unsafe for the same reasons that &lt;code&gt;realloc&lt;/code&gt; is.</source>
          <target state="translated">この関数は、 &lt;code&gt;realloc&lt;/code&gt; と同じ理由で安全ではありません。</target>
        </trans-unit>
        <trans-unit id="010c54d09909e31d21b794c4e10275c4b255b332" translate="yes" xml:space="preserve">
          <source>This function is unsafe, as it may construct invalid &lt;code&gt;char&lt;/code&gt; values.</source>
          <target state="translated">この関数は無効な &lt;code&gt;char&lt;/code&gt; 値を構成する可能性があるため、安全ではありません。</target>
        </trans-unit>
        <trans-unit id="71a1e970e4af15e1e28b626518e246fe2beaa9ff" translate="yes" xml:space="preserve">
          <source>This function is unsafe. You must guarantee that the data you return will not move so long as the argument value does not move (for example, because it is one of the fields of that value), and also that you do not move out of the argument you receive to the interior function.</source>
          <target state="translated">この関数は安全ではありません。引数の値が動かない限り(例えば、その値のフィールドの一つであるため)、返すデータが動かないことを保証しなければならず、また、受け取った引数から内部の関数に移動しないことも保証しなければなりません。</target>
        </trans-unit>
        <trans-unit id="39a3dbf4634bdba5a0505dade8771f96ac64c22f" translate="yes" xml:space="preserve">
          <source>This function is unsafe. You must guarantee that you will continue to treat the pointer &lt;code&gt;P&lt;/code&gt; as pinned after you call this function, so that the invariants on the &lt;code&gt;Pin&lt;/code&gt; type can be upheld. If the code using the resulting &lt;code&gt;P&lt;/code&gt; does not continue to maintain the pinning invariants that is a violation of the API contract and may lead to undefined behavior in later (safe) operations.</source>
          <target state="translated">この関数は安全ではありません。この関数を呼び出した後も、ポインター &lt;code&gt;P&lt;/code&gt; を固定されたものとして扱い続けることを保証する必要があります。これにより、 &lt;code&gt;Pin&lt;/code&gt; 型の不変条件が維持されます。結果の &lt;code&gt;P&lt;/code&gt; を使用するコードがAPIコントラクトの違反である固定不変式を維持し続けず、後の（安全な）操作で未定義の動作を引き起こす可能性がある場合。</target>
        </trans-unit>
        <trans-unit id="6c0c82733953c468905548df35ad6822c84f6c7f" translate="yes" xml:space="preserve">
          <source>This function is unsafe. You must guarantee that you will never move the data out of the mutable reference you receive when you call this function, so that the invariants on the &lt;code&gt;Pin&lt;/code&gt; type can be upheld.</source>
          <target state="translated">この関数は安全ではありません。この関数を呼び出すときに受け取る可変参照からデータを移動しないことを保証する必要があります。これにより、 &lt;code&gt;Pin&lt;/code&gt; 型の不変条件が維持されます。</target>
        </trans-unit>
        <trans-unit id="a2e566f884f51c3384b3aa58f5bde7f2e2df2f79" translate="yes" xml:space="preserve">
          <source>This function is used to generically create I/O errors which do not originate from the OS itself. The &lt;code&gt;error&lt;/code&gt; argument is an arbitrary payload which will be contained in this &lt;a href=&quot;struct.error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この関数は、OS自体に起因しないI / Oエラーを一般的に作成するために使用されます。 &lt;code&gt;error&lt;/code&gt; 引数は、この中に含まれる任意のペイロードで&lt;a href=&quot;struct.error&quot;&gt; &lt;code&gt;Error&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="94b97e70917e2ec0dff12c2bd6e40f05c9be7d64" translate="yes" xml:space="preserve">
          <source>This function is used to generically create I/O errors which do not originate from the OS itself. The &lt;code&gt;error&lt;/code&gt; argument is an arbitrary payload which will be contained in this &lt;code&gt;Error&lt;/code&gt;.</source>
          <target state="translated">この関数は、OS自体に起因しないI / Oエラーを一般的に作成するために使用されます。 &lt;code&gt;error&lt;/code&gt; 引数は、この中に含まれる任意のペイロードで &lt;code&gt;Error&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5970a37a4fd89e4e4191139591e16ccec329bf2a" translate="yes" xml:space="preserve">
          <source>This function is useful for interacting with foreign interfaces which use two pointers to refer to a range of elements in memory, as is common in C++.</source>
          <target state="translated">この関数は,C++で一般的なように,メモリ内の要素の範囲を参照するために2つのポインタを使用する外部インタフェースとのインタラクションに役立ちます.</target>
        </trans-unit>
        <trans-unit id="0bf849f4d8fe700d85a6260475a19ac69c25acf8" translate="yes" xml:space="preserve">
          <source>This function is very easy to write, thanks to &lt;code&gt;match&lt;/code&gt;, and will look like Listing 6-5.</source>
          <target state="translated">この関数は &lt;code&gt;match&lt;/code&gt; のおかげで非常に簡単に記述でき、リスト6-5のようになります。</target>
        </trans-unit>
        <trans-unit id="19c2bab36fa633ea4bf26b73afdd5bd0e16edc9a" translate="yes" xml:space="preserve">
          <source>This function is, in some sense, the opposite of &lt;a href=&quot;#method.zip&quot;&gt;&lt;code&gt;zip&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この関数は、ある意味では&lt;a href=&quot;#method.zip&quot;&gt; &lt;code&gt;zip&lt;/code&gt; &lt;/a&gt;の反対です。</target>
        </trans-unit>
        <trans-unit id="a37c6f8dc5c32c647225cb24a1c4f508d03c0fdf" translate="yes" xml:space="preserve">
          <source>This function is, in some sense, the opposite of &lt;a href=&quot;trait.iterator#method.zip&quot;&gt;&lt;code&gt;zip&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この関数は、ある意味で&lt;a href=&quot;trait.iterator#method.zip&quot;&gt; &lt;code&gt;zip&lt;/code&gt; &lt;/a&gt;の反対です。</target>
        </trans-unit>
        <trans-unit id="2ee7b59ee419592da35ea7242eb2e8123baaf3cf" translate="yes" xml:space="preserve">
          <source>This function may &lt;a href=&quot;../macro.panic&quot;&gt;&lt;code&gt;panic!&lt;/code&gt;&lt;/a&gt; if it is used with more than one mutex over time.</source>
          <target state="translated">この機能は&lt;a href=&quot;../macro.panic&quot;&gt; &lt;code&gt;panic!&lt;/code&gt; &lt;/a&gt;可能性があります！時間の経過とともに複数のミューテックスで使用される場合。</target>
        </trans-unit>
        <trans-unit id="f705e261edec6d4798f68322cebb8b5768877e5d" translate="yes" xml:space="preserve">
          <source>This function may fail as the underlying system clock is susceptible to drift and updates (e.g., the system clock could go backwards), so this function may not always succeed. If successful, &lt;a href=&quot;../result/enum.result#variant.Ok&quot;&gt;&lt;code&gt;Ok&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(&lt;/code&gt;&lt;a href=&quot;struct.duration&quot;&gt;&lt;code&gt;Duration&lt;/code&gt;&lt;/a&gt;&lt;code&gt;)&lt;/code&gt; is returned where the duration represents the amount of time elapsed from this time measurement to the current time.</source>
          <target state="translated">基になるシステムクロックはドリフトや更新の影響を受けやすいため（たとえば、システムクロックが逆方向に進む可能性があるため）、この関数は失敗する可能性があります。そのため、この関数が常に成功するとは限りません。成功した場合、&lt;a href=&quot;../result/enum.result#variant.Ok&quot;&gt; &lt;code&gt;Ok&lt;/code&gt; &lt;/a&gt; &lt;code&gt;(&lt;/code&gt; &lt;a href=&quot;struct.duration&quot;&gt; &lt;code&gt;Duration&lt;/code&gt; &lt;/a&gt; &lt;code&gt;)&lt;/code&gt; が返されます。ここで、durationは、この時間測定から現在の時間までの経過時間を表します。</target>
        </trans-unit>
        <trans-unit id="a43d8a17e850a82c732c367bf89a844d3d96e4fe" translate="yes" xml:space="preserve">
          <source>This function may fail because measurements taken earlier are not guaranteed to always be before later measurements (due to anomalies such as the system clock being adjusted either forwards or backwards).</source>
          <target state="translated">以前の測定値が常に後の測定値より前になるとは限らないため(システムクロックが前方または後方に調整されているなどの異常があるため)、この機能は失敗する可能性があります。</target>
        </trans-unit>
        <trans-unit id="8dd49c0cb240e2dbb52b64ec4b25e571052a70a5" translate="yes" xml:space="preserve">
          <source>This function may fail because measurements taken earlier are not guaranteed to always be before later measurements (due to anomalies such as the system clock being adjusted either forwards or backwards). &lt;a href=&quot;struct.instant&quot;&gt;&lt;code&gt;Instant&lt;/code&gt;&lt;/a&gt; can be used to measure elapsed time without this risk of failure.</source>
          <target state="translated">以前に行われた測定が常に後の測定の前になるとは限らないため、この機能は失敗する可能性があります（システムクロックが順方向または逆方向に調整されるなどの異常のため）。&lt;a href=&quot;struct.instant&quot;&gt; &lt;code&gt;Instant&lt;/code&gt; &lt;/a&gt;を使用すると、この障害のリスクなしに経過時間を測定できます。</target>
        </trans-unit>
        <trans-unit id="5904fd4e8b5ae82205f779a00c5c8f588077b44a" translate="yes" xml:space="preserve">
          <source>This function may panic if &lt;code&gt;key&lt;/code&gt; is empty, contains an ASCII equals sign &lt;code&gt;'='&lt;/code&gt; or the NUL character &lt;code&gt;'\0'&lt;/code&gt;, or when the value contains the NUL character.</source>
          <target state="translated">この関数は、 &lt;code&gt;key&lt;/code&gt; が空の場合、ASCII等号 &lt;code&gt;'='&lt;/code&gt; またはNUL文字 &lt;code&gt;'\0'&lt;/code&gt; が含まれている場合、または値にNUL文字が含まれている場合にパニックになる可能性があります。</target>
        </trans-unit>
        <trans-unit id="9a0dc67c9d122eb74decfcdabf36a2e9b439b108" translate="yes" xml:space="preserve">
          <source>This function may panic if it is called after the &lt;code&gt;Complete&lt;/code&gt; variant has been returned previously. While generator literals in the language are guaranteed to panic on resuming after &lt;code&gt;Complete&lt;/code&gt;, this is not guaranteed for all implementations of the &lt;code&gt;Generator&lt;/code&gt; trait.</source>
          <target state="translated">&lt;code&gt;Complete&lt;/code&gt; バリアントが以前に返された後に呼び出された場合、この関数はパニックになる可能性があります。言語のジェネレータリテラルは &lt;code&gt;Complete&lt;/code&gt; 後の再開でパニックになることが保証されていますが、これは &lt;code&gt;Generator&lt;/code&gt; トレイトのすべての実装で保証されているわけではありません。</target>
        </trans-unit>
        <trans-unit id="22c11ebcd140410550c98ffdd0ada9fb8238ab32" translate="yes" xml:space="preserve">
          <source>This function may panic if the current time is earlier than this instant, which is something that can happen if an &lt;code&gt;Instant&lt;/code&gt; is produced synthetically.</source>
          <target state="translated">現在の時刻がこのインスタントよりも早い場合、この関数はパニックになる可能性があります。これは、 &lt;code&gt;Instant&lt;/code&gt; が合成的に生成された場合に発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="24a0a37cf3864874d04875e7b90815fd8bf61604" translate="yes" xml:space="preserve">
          <source>This function may panic if the resulting point in time cannot be represented by the underlying data structure. See &lt;a href=&quot;../time/struct.instant#method.checked_add&quot;&gt;&lt;code&gt;Instant::checked_add&lt;/code&gt;&lt;/a&gt; for a version without panic.</source>
          <target state="translated">結果の時点を基になるデータ構造で表すことができない場合、この関数はパニックになる可能性があります。パニックのないバージョンについては、&lt;a href=&quot;../time/struct.instant#method.checked_add&quot;&gt; &lt;code&gt;Instant::checked_add&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="8aed85a838914397cfff90a6f158e84b7b3b4829" translate="yes" xml:space="preserve">
          <source>This function may panic if the resulting point in time cannot be represented by the underlying data structure. See &lt;a href=&quot;../time/struct.instant#method.checked_add&quot;&gt;&lt;code&gt;checked_add&lt;/code&gt;&lt;/a&gt; for a version without panic.</source>
          <target state="translated">結果の時点が基になるデータ構造で表現できない場合、この関数はパニックになる可能性があります。パニックのないバージョンについては、&lt;a href=&quot;../time/struct.instant#method.checked_add&quot;&gt; &lt;code&gt;checked_add&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="9bc75e1d489664d08b58daa300cbacf1f7764cb4" translate="yes" xml:space="preserve">
          <source>This function may panic if the resulting point in time cannot be represented by the underlying data structure. See &lt;a href=&quot;../time/struct.systemtime#method.checked_add&quot;&gt;&lt;code&gt;SystemTime::checked_add&lt;/code&gt;&lt;/a&gt; for a version without panic.</source>
          <target state="translated">結果の時点を基になるデータ構造で表すことができない場合、この関数はパニックになる可能性があります。パニックのないバージョンについては、&lt;a href=&quot;../time/struct.systemtime#method.checked_add&quot;&gt; &lt;code&gt;SystemTime::checked_add&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="366269740ca74a1798b4e975775caf12fd1ce852" translate="yes" xml:space="preserve">
          <source>This function may panic if the resulting point in time cannot be represented by the underlying data structure. See &lt;a href=&quot;../time/struct.systemtime#method.checked_add&quot;&gt;&lt;code&gt;checked_add&lt;/code&gt;&lt;/a&gt; for a version without panic.</source>
          <target state="translated">結果の時点が基になるデータ構造で表現できない場合、この関数はパニックになる可能性があります。パニックのないバージョンについては、&lt;a href=&quot;../time/struct.systemtime#method.checked_add&quot;&gt; &lt;code&gt;checked_add&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="401bf91c85ca55e966355c7f85b21d7639dab4cd" translate="yes" xml:space="preserve">
          <source>This function may panic if the resulting point in time cannot be represented by the underlying data structure. See &lt;a href=&quot;struct.instant#method.checked_add&quot;&gt;&lt;code&gt;Instant::checked_add&lt;/code&gt;&lt;/a&gt; for a version without panic.</source>
          <target state="translated">結果の時点を基になるデータ構造で表すことができない場合、この関数はパニックになる可能性があります。パニックのないバージョンについては、&lt;a href=&quot;struct.instant#method.checked_add&quot;&gt; &lt;code&gt;Instant::checked_add&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="2f02bfc3fdf0149848c26b5693e3c3c2e193c842" translate="yes" xml:space="preserve">
          <source>This function may panic if the resulting point in time cannot be represented by the underlying data structure. See &lt;a href=&quot;struct.instant#method.checked_add&quot;&gt;&lt;code&gt;checked_add&lt;/code&gt;&lt;/a&gt; for a version without panic.</source>
          <target state="translated">結果の時点が基になるデータ構造で表現できない場合、この関数はパニックになる可能性があります。パニックのないバージョンについては、&lt;a href=&quot;struct.instant#method.checked_add&quot;&gt; &lt;code&gt;checked_add&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="6625bc40abfc907779e7819cb337a56bc6be6b98" translate="yes" xml:space="preserve">
          <source>This function may panic if the resulting point in time cannot be represented by the underlying data structure. See &lt;a href=&quot;struct.systemtime#method.checked_add&quot;&gt;&lt;code&gt;SystemTime::checked_add&lt;/code&gt;&lt;/a&gt; for a version without panic.</source>
          <target state="translated">結果の時点を基になるデータ構造で表すことができない場合、この関数はパニックになる可能性があります。パニックのないバージョンについては、&lt;a href=&quot;struct.systemtime#method.checked_add&quot;&gt; &lt;code&gt;SystemTime::checked_add&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="df93ffa2c06e7d9c793296fff9096b1f4a09746a" translate="yes" xml:space="preserve">
          <source>This function may panic if the resulting point in time cannot be represented by the underlying data structure. See &lt;a href=&quot;struct.systemtime#method.checked_add&quot;&gt;&lt;code&gt;checked_add&lt;/code&gt;&lt;/a&gt; for a version without panic.</source>
          <target state="translated">結果の時点が基になるデータ構造で表現できない場合、この関数はパニックになる可能性があります。パニックのないバージョンについては、&lt;a href=&quot;struct.systemtime#method.checked_add&quot;&gt; &lt;code&gt;checked_add&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="f047ee1947a40935115c87e9ff5da84ba7c716fb" translate="yes" xml:space="preserve">
          <source>This function may panic on some platforms if a thread attempts to join itself or otherwise may create a deadlock with joining threads.</source>
          <target state="translated">この関数は、スレッドが自分自身に参加しようとした場合にプラットフォームによってはパニックを起こす可能性があります。</target>
        </trans-unit>
        <trans-unit id="2aa9c9fbe6e7d8e79dbcc09f82ff622cc49e7e8c" translate="yes" xml:space="preserve">
          <source>This function might panic if the iterator has more than &lt;a href=&quot;../usize/constant.max&quot;&gt;&lt;code&gt;usize::MAX&lt;/code&gt;&lt;/a&gt; elements.</source>
          <target state="translated">イテレータに&lt;a href=&quot;../usize/constant.max&quot;&gt; &lt;code&gt;usize::MAX&lt;/code&gt; &lt;/a&gt;要素以上ある場合、この関数はパニックになる可能性があります。</target>
        </trans-unit>
        <trans-unit id="d1fc6a40a80536289c51eca2e61adf3162489e6d" translate="yes" xml:space="preserve">
          <source>This function might panic if the iterator has more than &lt;code&gt;usize::MAX&lt;/code&gt; non-matching elements.</source>
          <target state="translated">イテレータに &lt;code&gt;usize::MAX&lt;/code&gt; 以外の一致しない要素がある場合、この関数はパニックになる可能性があります。</target>
        </trans-unit>
        <trans-unit id="e85b3c94c6e63ddd25298570364b3a6122b73135" translate="yes" xml:space="preserve">
          <source>This function might panic when called if the lock is already held by the current thread.</source>
          <target state="translated">この関数は、現在のスレッドが既にロックを保持している場合に呼び出されるとパニックになる可能性があります。</target>
        </trans-unit>
        <trans-unit id="b3552c30ec404d25019fce8d0e95a821dc885077" translate="yes" xml:space="preserve">
          <source>This function panics if &lt;code&gt;T&lt;/code&gt; is a Zero-Sized Type (&quot;ZST&quot;).</source>
          <target state="translated">この関数は、 &lt;code&gt;T&lt;/code&gt; がゼロサイズタイプ（ &quot;ZST&quot;）の場合にパニックになります。</target>
        </trans-unit>
        <trans-unit id="101814bfeeecf8436008ed4880368756ae5c8d29" translate="yes" xml:space="preserve">
          <source>This function panics if &lt;code&gt;T&lt;/code&gt; is a zero-sized type.</source>
          <target state="translated">この関数は、 &lt;code&gt;T&lt;/code&gt; がサイズがゼロのタイプの場合にパニックになります。</target>
        </trans-unit>
        <trans-unit id="9eaa9b63e5ef7b899f75363fe8681ac3e3da2fd4" translate="yes" xml:space="preserve">
          <source>This function panics if &lt;code&gt;radix&lt;/code&gt; is not in the range from 2 to 36.</source>
          <target state="translated">&lt;code&gt;radix&lt;/code&gt; が2から36の範囲にない場合、この関数はパニックになります。</target>
        </trans-unit>
        <trans-unit id="f62c2a73ad1ab98a4ef40a980a80cd47e78cfc5e" translate="yes" xml:space="preserve">
          <source>This function reads as many bytes as necessary to completely fill the specified buffer &lt;code&gt;buf&lt;/code&gt;.</source>
          <target state="translated">この関数は、指定されたバッファ &lt;code&gt;buf&lt;/code&gt; を完全に満たすのに必要なだけのバイトを読み取ります。</target>
        </trans-unit>
        <trans-unit id="c39eec7f7794b4915b46c58cff436d679c91fcab" translate="yes" xml:space="preserve">
          <source>This function reads the value of &lt;code&gt;errno&lt;/code&gt; for the target platform (e.g. &lt;code&gt;GetLastError&lt;/code&gt; on Windows) and will return a corresponding instance of &lt;a href=&quot;struct.error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; for the error code.</source>
          <target state="translated">この関数は、ターゲットプラットフォーム（Windowsの &lt;code&gt;GetLastError&lt;/code&gt; など）の &lt;code&gt;errno&lt;/code&gt; の値を読み取り、エラーコードに対応する&lt;a href=&quot;struct.error&quot;&gt; &lt;code&gt;Error&lt;/code&gt; の&lt;/a&gt;インスタンスを返します。</target>
        </trans-unit>
        <trans-unit id="32152f76d2e83d5c89836d9aa45ce33c14bc03d9" translate="yes" xml:space="preserve">
          <source>This function reads the value of &lt;code&gt;errno&lt;/code&gt; for the target platform (e.g. &lt;code&gt;GetLastError&lt;/code&gt; on Windows) and will return a corresponding instance of &lt;code&gt;Error&lt;/code&gt; for the error code.</source>
          <target state="translated">この関数は、ターゲットプラットフォーム（Windowsの &lt;code&gt;GetLastError&lt;/code&gt; など）の &lt;code&gt;errno&lt;/code&gt; の値を読み取り、エラーコードに対応する &lt;code&gt;Error&lt;/code&gt; のインスタンスを返します。</target>
        </trans-unit>
        <trans-unit id="1cc405a72fa71224d4a044b7593cdccf93a633ec" translate="yes" xml:space="preserve">
          <source>This function returning &lt;code&gt;false&lt;/code&gt; does not mean that &lt;a href=&quot;struct.once&quot;&gt;&lt;code&gt;Once&lt;/code&gt;&lt;/a&gt; has not been executed. For example, it may have been executed in the time between when &lt;code&gt;is_completed&lt;/code&gt; starts executing and when it returns, in which case the &lt;code&gt;false&lt;/code&gt; return value would be stale (but still permissible).</source>
          <target state="translated">&lt;code&gt;false&lt;/code&gt; を返すこの関数は、&lt;a href=&quot;struct.once&quot;&gt; &lt;code&gt;Once&lt;/code&gt; &lt;/a&gt;が実行されていないことを意味するものではありません。たとえば、 &lt;code&gt;is_completed&lt;/code&gt; が実行を開始してから戻るまでの間に実行された可能性があります。その場合、 &lt;code&gt;false&lt;/code&gt; 戻り値は古くなります（ただし、引き続き許容されます）。</target>
        </trans-unit>
        <trans-unit id="05ed95f7312c1878141bc36d8d210b9fa11581c5" translate="yes" xml:space="preserve">
          <source>This function returns a &lt;a href=&quot;../borrow/enum.cow&quot;&gt;&lt;code&gt;Cow&amp;lt;'a, str&amp;gt;&lt;/code&gt;&lt;/a&gt;. If our byte slice is invalid UTF-8, then we need to insert the replacement characters, which will change the size of the string, and hence, require a &lt;code&gt;String&lt;/code&gt;. But if it's already valid UTF-8, we don't need a new allocation. This return type allows us to handle both cases.</source>
          <target state="translated">この関数は、&lt;a href=&quot;../borrow/enum.cow&quot;&gt; &lt;code&gt;Cow&amp;lt;'a, str&amp;gt;&lt;/code&gt; &lt;/a&gt;返します。バイトスライスが無効なUTF-8の場合、置換文字を挿入する必要があります。これにより、文字列のサイズが変更されるため、 &lt;code&gt;String&lt;/code&gt; が必要になります。しかし、それがすでに有効なUTF-8である場合、新しい割り当ては必要ありません。この戻り値の型により、両方のケースを処理できます。</target>
        </trans-unit>
        <trans-unit id="12ee7d651a482e6bf7ef02b5e21ea7e98deba17a" translate="yes" xml:space="preserve">
          <source>This function returns a new OpenOptions object that you can use to open or create a file with specific options if &lt;code&gt;open()&lt;/code&gt; or &lt;code&gt;create()&lt;/code&gt; are not appropriate.</source>
          <target state="translated">この関数は、 &lt;code&gt;open()&lt;/code&gt; または &lt;code&gt;create()&lt;/code&gt; が適切でない場合に、特定のオプションを使用してファイルを開いたり作成したりするために使用できる新しいOpenOptionsオブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="6f72ba6fb91e1ce3e00f9d70494a4d758f1ff97b" translate="yes" xml:space="preserve">
          <source>This function returns a new instance of &lt;code&gt;Read&lt;/code&gt; which will read at most &lt;code&gt;limit&lt;/code&gt; bytes, after which it will always return EOF (&lt;a href=&quot;../result/enum.result#variant.Ok&quot;&gt;&lt;code&gt;Ok(0)&lt;/code&gt;&lt;/a&gt;). Any read errors will not count towards the number of bytes read and future calls to &lt;a href=&quot;trait.read#tymethod.read&quot;&gt;&lt;code&gt;read()&lt;/code&gt;&lt;/a&gt; may succeed.</source>
          <target state="translated">この関数は、最大で &lt;code&gt;limit&lt;/code&gt; バイトを読み取る &lt;code&gt;Read&lt;/code&gt; の新しいインスタンスを返します。その後、常にEOF（&lt;a href=&quot;../result/enum.result#variant.Ok&quot;&gt; &lt;code&gt;Ok(0)&lt;/code&gt; &lt;/a&gt;）を返します。読み取りエラーは読み取りバイト数にカウントされず、&lt;a href=&quot;trait.read#tymethod.read&quot;&gt; &lt;code&gt;read()&lt;/code&gt; &lt;/a&gt;への今後の呼び出しは成功する可能性があります。</target>
        </trans-unit>
        <trans-unit id="ef0ad46bb886f62fbf2201ba9b9f859d8daf73a5" translate="yes" xml:space="preserve">
          <source>This function returns:</source>
          <target state="translated">この関数は返します。</target>
        </trans-unit>
        <trans-unit id="e286b47aa27a1649f35422e9cb038c26279f95e3" translate="yes" xml:space="preserve">
          <source>This function runs the destructor of the contained value and thus the wrapped value now represents uninitialized data. It is up to the user of this method to ensure the uninitialized data is not actually used.</source>
          <target state="translated">この関数は、格納されている値のデストラクタを実行します。初期化されていないデータが実際に使用されないかどうかは、このメソッドを使用するユーザー次第です。</target>
        </trans-unit>
        <trans-unit id="d626c9a67f6c1bb6dde6295b947e23c4df085081" translate="yes" xml:space="preserve">
          <source>This function runs the destructor of the contained value. Other than changes made by the destructor itself, the memory is left unchanged, and so as far as the compiler is concerned still holds a bit-pattern which is valid for the type &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">この関数は、含まれている値のデストラクタを実行します。デストラクタ自体によって行われた変更を除いて、メモリは変更されないままであり、コンパイラに関する限り、タイプ &lt;code&gt;T&lt;/code&gt; に有効なビットパターンを保持します。</target>
        </trans-unit>
        <trans-unit id="7791922c183e6e6d1b0127e9349abae66c275dd6" translate="yes" xml:space="preserve">
          <source>This function semantically moves out the contained value without preventing further usage, leaving the state of this container unchanged. It is your responsibility to ensure that this &lt;code&gt;ManuallyDrop&lt;/code&gt; is not used again.</source>
          <target state="translated">この関数は、それ以上の使用を妨げることなく、含まれている値を意味的に移動し、このコンテナーの状態を変更しません。この &lt;code&gt;ManuallyDrop&lt;/code&gt; が再び使用されないようにするのはあなたの責任です。</target>
        </trans-unit>
        <trans-unit id="e07f846f13b5b07afd4d29501d5ea48bcae4f64b" translate="yes" xml:space="preserve">
          <source>This function semantically moves out the contained value without preventing further usage. It is up to the user of this method to ensure that this container is not used again.</source>
          <target state="translated">この関数は、それ以上の使用を防ぐことなく、含まれている値を意味的に移動させます。このコンテナが再び使用されないようにするのは、このメソッドのユーザ次第です。</target>
        </trans-unit>
        <trans-unit id="b73fe46d5d15372cef97957fc6bcb2aba3a35b19" translate="yes" xml:space="preserve">
          <source>This function specifies a new multicast group for this socket to join. The address must be a valid multicast address, and &lt;code&gt;interface&lt;/code&gt; is the address of the local interface with which the system should join the multicast group. If it's equal to &lt;code&gt;INADDR_ANY&lt;/code&gt; then an appropriate interface is chosen by the system.</source>
          <target state="translated">この関数は、このソケットが参加する新しいマルチキャストグループを指定します。アドレスは有効なマルチキャストアドレスである必要があり、 &lt;code&gt;interface&lt;/code&gt; は、システムがマルチキャストグループに参加する必要があるローカルインターフェイスのアドレスです。 &lt;code&gt;INADDR_ANY&lt;/code&gt; と等しい場合、適切なインターフェースがシステムによって選択されます。</target>
        </trans-unit>
        <trans-unit id="1f12ea05478bb3baf501603f551862b3ebf72f88" translate="yes" xml:space="preserve">
          <source>This function specifies a new multicast group for this socket to join. The address must be a valid multicast address, and &lt;code&gt;interface&lt;/code&gt; is the index of the interface to join/leave (or 0 to indicate any interface).</source>
          <target state="translated">この関数は、このソケットが参加する新しいマルチキャストグループを指定します。アドレスは有効なマルチキャストアドレスでなければなりません、と &lt;code&gt;interface&lt;/code&gt; （任意のインターフェイスを示すために、または0）/休暇に参加するためのインタフェースのインデックスです。</target>
        </trans-unit>
        <trans-unit id="24119e41ff16fdb059a46c613efe17ad7fc57293" translate="yes" xml:space="preserve">
          <source>This function takes a string slice and emits it to the internal buffer after applying the relevant formatting flags specified. The flags recognized for generic strings are:</source>
          <target state="translated">この関数は,文字列のスライスを受け取り,指定された書式設定フラグを適用した後,内部バッファに出力します.一般的な文字列に対して認識されるフラグは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="5aebd3cecb06bef11683a2b627652c498c3d60b0" translate="yes" xml:space="preserve">
          <source>This function will &lt;a href=&quot;../macro.panic&quot;&gt;&lt;code&gt;panic!&lt;/code&gt;&lt;/a&gt; if it is used with more than one mutex over time. Each condition variable is dynamically bound to exactly one mutex to ensure defined behavior across platforms. If this functionality is not desired, then unsafe primitives in &lt;code&gt;sys&lt;/code&gt; are provided.</source>
          <target state="translated">この機能は&lt;a href=&quot;../macro.panic&quot;&gt; &lt;code&gt;panic!&lt;/code&gt; &lt;/a&gt;時間の経過とともに複数のミューテックスで使用される場合。各条件変数は正確に1つのミューテックスに動的にバインドされ、プラットフォーム間で定義された動作を保証します。この機能が必要ない場合は、 &lt;code&gt;sys&lt;/code&gt; の安全でないプリミティブが提供されます。</target>
        </trans-unit>
        <trans-unit id="78327b333ccf6b689aaecb9ee26d119fa6c5777a" translate="yes" xml:space="preserve">
          <source>This function will &lt;code&gt;panic!()&lt;/code&gt; if the key currently has its destructor running, and it &lt;strong&gt;may&lt;/strong&gt; panic if the destructor has previously been run for this thread.</source>
          <target state="translated">この関数は、キーが現在デストラクタを実行している場合は &lt;code&gt;panic!()&lt;/code&gt; およびデストラクタがこのスレッドに対して以前に実行されている場合&lt;strong&gt;は&lt;/strong&gt;パニックする&lt;strong&gt;可能性があり&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="de2e867f0f0c2461353251de2093fad37d9de75b" translate="yes" xml:space="preserve">
          <source>This function will &lt;em&gt;block&lt;/em&gt; until space in the internal buffer becomes available or a receiver is available to hand off the message to.</source>
          <target state="translated">この関数は、内部バッファーのスペースが利用可能になるか、メッセージを渡すレシーバーが利用可能になるまで&lt;em&gt;ブロック&lt;/em&gt;します。</target>
        </trans-unit>
        <trans-unit id="aa7ba2de98a6c309498a7c489e34ef4ae855d255" translate="yes" xml:space="preserve">
          <source>This function will &lt;strong&gt;consume ownership&lt;/strong&gt; of the handle given, passing responsibility for closing the handle to the returned object.</source>
          <target state="translated">この関数は、指定されたハンドルの&lt;strong&gt;所有権&lt;/strong&gt;を&lt;strong&gt;消費&lt;/strong&gt;し、返されたオブジェクトへのハンドルを閉じる責任を渡します。</target>
        </trans-unit>
        <trans-unit id="b6de52c208f12c4efe8542e2cc11b06fa42d2cf9" translate="yes" xml:space="preserve">
          <source>This function will &lt;strong&gt;consume ownership&lt;/strong&gt; of the socket provided and it will be closed when the returned object goes out of scope.</source>
          <target state="translated">この関数は、指定されたソケットの&lt;strong&gt;所有権&lt;/strong&gt;を&lt;strong&gt;消費&lt;/strong&gt;し、返されたオブジェクトがスコープ外になると閉じられます。</target>
        </trans-unit>
        <trans-unit id="34a9593fc439cb6bab67a9e273e42357e335b574" translate="yes" xml:space="preserve">
          <source>This function will &lt;strong&gt;overwrite&lt;/strong&gt; the contents of &lt;code&gt;to&lt;/code&gt;.</source>
          <target state="translated">この関数は &lt;code&gt;to&lt;/code&gt; の内容を&lt;strong&gt;上書きします&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="b50d15cbddd54c77fb77c9639aae5bb9352e901e" translate="yes" xml:space="preserve">
          <source>This function will always block the current thread if there is no data available and it's possible for more data to be sent. Once a message is sent to the corresponding &lt;a href=&quot;struct.sender&quot;&gt;&lt;code&gt;Sender&lt;/code&gt;&lt;/a&gt; (or &lt;a href=&quot;struct.syncsender&quot;&gt;&lt;code&gt;SyncSender&lt;/code&gt;&lt;/a&gt;), then this receiver will wake up and return that message.</source>
          <target state="translated">この関数は、使用可能なデータがなく、さらに多くのデータを送信できる場合、常に現在のスレッドをブロックします。メッセージが対応する&lt;a href=&quot;struct.sender&quot;&gt; &lt;code&gt;Sender&lt;/code&gt; &lt;/a&gt;（または&lt;a href=&quot;struct.syncsender&quot;&gt; &lt;code&gt;SyncSender&lt;/code&gt; &lt;/a&gt;）に送信されると、このレシーバーが起動し、そのメッセージを返します。</target>
        </trans-unit>
        <trans-unit id="2f7bc7c7785b26db5d2ba1d43d57ec9e10153387" translate="yes" xml:space="preserve">
          <source>This function will atomically unlock the mutex specified (represented by &lt;code&gt;guard&lt;/code&gt;) and block the current thread. This means that any calls to &lt;a href=&quot;#method.notify_one&quot;&gt;&lt;code&gt;notify_one&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#method.notify_all&quot;&gt;&lt;code&gt;notify_all&lt;/code&gt;&lt;/a&gt; which happen logically after the mutex is unlocked are candidates to wake this thread up. When this function call returns, the lock specified will have been re-acquired.</source>
          <target state="translated">この関数は、指定されたミューテックス（ &lt;code&gt;guard&lt;/code&gt; で表される）を自動的にロック解除し、現在のスレッドをブロックします。つまり、mutexがロック解除された後に論理的に発生する&lt;a href=&quot;#method.notify_one&quot;&gt; &lt;code&gt;notify_one&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#method.notify_all&quot;&gt; &lt;code&gt;notify_all&lt;/code&gt; &lt;/a&gt;への呼び出しは、このスレッドをウェイクアップする候補となります。この関数呼び出しが戻ると、指定されたロックが再取得されます。</target>
        </trans-unit>
        <trans-unit id="07010b30f6fb56afc898bded5d3cc83a49e39776" translate="yes" xml:space="preserve">
          <source>This function will atomically unlock the mutex specified (represented by &lt;code&gt;guard&lt;/code&gt;) and block the current thread. This means that any calls to &lt;a href=&quot;struct.condvar#method.notify_one&quot;&gt;&lt;code&gt;notify_one&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;struct.condvar#method.notify_all&quot;&gt;&lt;code&gt;notify_all&lt;/code&gt;&lt;/a&gt; which happen logically after the mutex is unlocked are candidates to wake this thread up. When this function call returns, the lock specified will have been re-acquired.</source>
          <target state="translated">この関数は、指定されたミューテックス（ &lt;code&gt;guard&lt;/code&gt; で表される）をアトミックにロック解除し、現在のスレッドをブロックします。これは、ミューテックスのロックが解除された後に論理的に発生する&lt;a href=&quot;struct.condvar#method.notify_one&quot;&gt; &lt;code&gt;notify_one&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;struct.condvar#method.notify_all&quot;&gt; &lt;code&gt;notify_all&lt;/code&gt; の&lt;/a&gt;呼び出しが、このスレッドをウェイクアップする候補であることを意味します。この関数呼び出しが戻ると、指定されたロックが再取得されます。</target>
        </trans-unit>
        <trans-unit id="d633c453ad140c0449c1db8cbeeaa851bc2659b6" translate="yes" xml:space="preserve">
          <source>This function will attempt to ensure that all in-memory data reaches the filesystem before returning.</source>
          <target state="translated">この関数は、すべてのメモリ内データがファイルシステムに到達してから戻るようにします。</target>
        </trans-unit>
        <trans-unit id="3cdc162bace3b7e0f3af0944a143fb84bab4d03d" translate="yes" xml:space="preserve">
          <source>This function will attempt to write the entire contents of &lt;code&gt;buf&lt;/code&gt;, but the entire write may not succeed, or the write may also generate an error. A call to &lt;code&gt;write&lt;/code&gt; represents &lt;em&gt;at most one&lt;/em&gt; attempt to write to any wrapped object.</source>
          <target state="translated">この関数は &lt;code&gt;buf&lt;/code&gt; の内容全体を書き込もうとしますが、書き込み全体が成功しないか、書き込みがエラーを生成する場合もあります。 &lt;code&gt;write&lt;/code&gt; の呼び出しは、ラップされたオブジェクトへの書き込みの&lt;em&gt;最大1つの&lt;/em&gt;試行を表します。</target>
        </trans-unit>
        <trans-unit id="41d06b3c8e4189760b322760b47992d4717d7848" translate="yes" xml:space="preserve">
          <source>This function will be a noop if the &lt;code&gt;RUST_BACKTRACE&lt;/code&gt; or &lt;code&gt;RUST_LIB_BACKTRACE&lt;/code&gt; backtrace variables are both not set. If either environment variable is set and enabled then this function will actually capture a backtrace. Capturing a backtrace can be both memory intensive and slow, so these environment variables allow liberally using &lt;code&gt;Backtrace::capture&lt;/code&gt; and only incurring a slowdown when the environment variables are set.</source>
          <target state="translated">&lt;code&gt;RUST_BACKTRACE&lt;/code&gt; または &lt;code&gt;RUST_LIB_BACKTRACE&lt;/code&gt; バックトレース変数が両方とも設定されていない場合、この関数はnoopになります。いずれかの環境変数が設定されて有効になっている場合、この関数は実際にバックトレースをキャプチャします。バックトレースのキャプチャはメモリを大量に消費すると同時に低速になる可能性があるため、これらの環境変数を使用 &lt;code&gt;Backtrace::capture&lt;/code&gt; と、Backtrace ::キャプチャを自由に使用でき、環境変数が設定されている場合にのみ速度が低下します。</target>
        </trans-unit>
        <trans-unit id="d59143ff7e9860f113062c67363bd75c2092c35a" translate="yes" xml:space="preserve">
          <source>This function will be called when &lt;code&gt;wake&lt;/code&gt; is called on the &lt;a href=&quot;struct.waker&quot;&gt;&lt;code&gt;Waker&lt;/code&gt;&lt;/a&gt;. It must wake up the task associated with this &lt;a href=&quot;struct.rawwaker&quot;&gt;&lt;code&gt;RawWaker&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この関数は、&lt;a href=&quot;struct.waker&quot;&gt; &lt;code&gt;Waker&lt;/code&gt; &lt;/a&gt; &lt;code&gt;wake&lt;/code&gt; が呼び出されたときに呼び出されます。この&lt;a href=&quot;struct.rawwaker&quot;&gt; &lt;code&gt;RawWaker&lt;/code&gt; に&lt;/a&gt;関連付けられているタスクをウェイクアップする必要があります。</target>
        </trans-unit>
        <trans-unit id="12cb59dc2a2a1b37303ef992097df532faaa8b94" translate="yes" xml:space="preserve">
          <source>This function will be called when &lt;code&gt;wake_by_ref&lt;/code&gt; is called on the &lt;a href=&quot;struct.waker&quot;&gt;&lt;code&gt;Waker&lt;/code&gt;&lt;/a&gt;. It must wake up the task associated with this &lt;a href=&quot;struct.rawwaker&quot;&gt;&lt;code&gt;RawWaker&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この関数は、&lt;a href=&quot;struct.waker&quot;&gt; &lt;code&gt;Waker&lt;/code&gt; で&lt;/a&gt; &lt;code&gt;wake_by_ref&lt;/code&gt; が呼び出されたときに呼び出されます。この&lt;a href=&quot;struct.rawwaker&quot;&gt; &lt;code&gt;RawWaker&lt;/code&gt; に&lt;/a&gt;関連付けられているタスクをウェイクアップする必要があります。</target>
        </trans-unit>
        <trans-unit id="76c72888278b0a8cb4941353a709e0ecd237c2c8" translate="yes" xml:space="preserve">
          <source>This function will be called when the &lt;a href=&quot;struct.rawwaker&quot;&gt;&lt;code&gt;RawWaker&lt;/code&gt;&lt;/a&gt; gets cloned, e.g. when the &lt;a href=&quot;struct.waker&quot;&gt;&lt;code&gt;Waker&lt;/code&gt;&lt;/a&gt; in which the &lt;a href=&quot;struct.rawwaker&quot;&gt;&lt;code&gt;RawWaker&lt;/code&gt;&lt;/a&gt; is stored gets cloned.</source>
          <target state="translated">この関数は、&lt;a href=&quot;struct.rawwaker&quot;&gt; &lt;code&gt;RawWaker&lt;/code&gt; &lt;/a&gt;が複製されたとき、たとえば&lt;a href=&quot;struct.rawwaker&quot;&gt; &lt;code&gt;RawWaker&lt;/code&gt; &lt;/a&gt;が格納されている&lt;a href=&quot;struct.waker&quot;&gt; &lt;code&gt;Waker&lt;/code&gt; &lt;/a&gt;が複製されたときに呼び出されます。</target>
        </trans-unit>
        <trans-unit id="83e27c1cac935244e1d8ce7e9b3bc5a49eb326cd" translate="yes" xml:space="preserve">
          <source>This function will block the calling thread until a new TCP connection is established. When established, the corresponding &lt;a href=&quot;struct.tcpstream&quot;&gt;&lt;code&gt;TcpStream&lt;/code&gt;&lt;/a&gt; and the remote peer's address will be returned.</source>
          <target state="translated">この関数は、新しいTCP接続が確立されるまで呼び出しスレッドをブロックします。確立されると、対応する&lt;a href=&quot;struct.tcpstream&quot;&gt; &lt;code&gt;TcpStream&lt;/code&gt; &lt;/a&gt;とリモートピアのアドレスが返されます。</target>
        </trans-unit>
        <trans-unit id="b771e75bfd99083821bb9279c74d5a51cd594b6a" translate="yes" xml:space="preserve">
          <source>This function will block the calling thread until a new Unix connection is established. When established, the corresponding &lt;a href=&quot;struct.unixstream&quot;&gt;&lt;code&gt;UnixStream&lt;/code&gt;&lt;/a&gt; and the remote peer's address will be returned.</source>
          <target state="translated">この関数は、新しいUnix接続が確立されるまで、呼び出しスレッドをブロックします。確立されると、対応する&lt;a href=&quot;struct.unixstream&quot;&gt; &lt;code&gt;UnixStream&lt;/code&gt; &lt;/a&gt;とリモートピアのアドレスが返されます。</target>
        </trans-unit>
        <trans-unit id="4d1cb142862a95e8531c0e6c5eeff4f29562add6" translate="yes" xml:space="preserve">
          <source>This function will block the local thread until it is available to acquire the mutex. Upon returning, the thread is the only thread with the lock held. An RAII guard is returned to allow scoped unlock of the lock. When the guard goes out of scope, the mutex will be unlocked.</source>
          <target state="translated">この関数は、ミューテックスを取得できるようになるまでローカルスレッドをブロックします。復帰時には、そのスレッドはロックが保持されている唯一のスレッドとなります。RAII ガードが返され、ロックのアンロックがスコープされるようになります。ガードがスコープ外になると、ミューテックスはアンロックされます。</target>
        </trans-unit>
        <trans-unit id="1061d2d5e43718addf8cd833a952b821898f457c" translate="yes" xml:space="preserve">
          <source>This function will capture a stack backtrace of the current OS thread of execution, returning a &lt;code&gt;Backtrace&lt;/code&gt; type which can be later used to print the entire stack trace or render it to a string.</source>
          <target state="translated">この関数は、現在実行中のOSスレッドのスタックバックトレースをキャプチャし、後でスタックトレース全体を出力したり、文字列にレンダリングしたりするために使用できる &lt;code&gt;Backtrace&lt;/code&gt; タイプを返します。</target>
        </trans-unit>
        <trans-unit id="e63b5a3d38dde4813e2c02e7906910d9bbecad76" translate="yes" xml:space="preserve">
          <source>This function will cast the provided &lt;code&gt;bytes&lt;/code&gt; to a &lt;code&gt;CStr&lt;/code&gt; wrapper after ensuring that the byte slice is nul-terminated and does not contain any interior nul bytes.</source>
          <target state="translated">この関数は、バイトスライスがNULで終了し、内部のNULバイトが含まれていないことを確認した後、提供された &lt;code&gt;bytes&lt;/code&gt; を &lt;code&gt;CStr&lt;/code&gt; ラッパーにキャストします。</target>
        </trans-unit>
        <trans-unit id="8c3891c10a9a0ae62223a6915ab48a717d1803e4" translate="yes" xml:space="preserve">
          <source>This function will cast the provided &lt;code&gt;bytes&lt;/code&gt; to a &lt;code&gt;CStr&lt;/code&gt; wrapper without performing any sanity checks. The provided slice &lt;strong&gt;must&lt;/strong&gt; be nul-terminated and not contain any interior nul bytes.</source>
          <target state="translated">この関数は、サニティチェックを実行せずに、提供された &lt;code&gt;bytes&lt;/code&gt; を &lt;code&gt;CStr&lt;/code&gt; ラッパーにキャストします。提供されるスライス&lt;strong&gt;は&lt;/strong&gt;、ヌル文字で終了している&lt;strong&gt;必要&lt;/strong&gt;があり、内部ヌルバイトを含んでいません。</target>
        </trans-unit>
        <trans-unit id="8f259ce0614bcf2d0063ac4400649f231860a760" translate="yes" xml:space="preserve">
          <source>This function will cause all pending and future I/O calls on the specified portions to immediately return with an appropriate value (see the documentation of &lt;a href=&quot;../../../net/enum.shutdown&quot;&gt;&lt;code&gt;Shutdown&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">この関数は、指定された部分のすべての保留中および将来のI / O呼び出しを直ちに適切な値で返します（&lt;a href=&quot;../../../net/enum.shutdown&quot;&gt; &lt;code&gt;Shutdown&lt;/code&gt; &lt;/a&gt;のドキュメントを参照）。</target>
        </trans-unit>
        <trans-unit id="f2081c3bcdd573e767785b3929fff378af8293c8" translate="yes" xml:space="preserve">
          <source>This function will cause all pending and future I/O on the specified portions to return immediately with an appropriate value (see the documentation of &lt;a href=&quot;enum.shutdown&quot;&gt;&lt;code&gt;Shutdown&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">この関数は、指定された部分のすべての保留中および将来のI / Oを適切な値ですぐに返します（&lt;a href=&quot;enum.shutdown&quot;&gt; &lt;code&gt;Shutdown&lt;/code&gt; &lt;/a&gt;のドキュメントを参照）。</target>
        </trans-unit>
        <trans-unit id="e9782cf601eece8d5d886326b28d5030905f50d6" translate="yes" xml:space="preserve">
          <source>This function will consume the provided data and use the underlying bytes to construct a new string, ensuring that there is a trailing 0 byte. This trailing 0 byte will be appended by this function; the provided data should &lt;em&gt;not&lt;/em&gt; contain any 0 bytes in it.</source>
          <target state="translated">この関数は、提供されたデータを消費し、基になるバイトを使用して新しい文字列を作成し、後続の0バイトがあることを確認します。この末尾の0バイトは、この関数によって追加されます。提供されるデータには0バイトを含め&lt;em&gt;ない&lt;/em&gt;でください。</target>
        </trans-unit>
        <trans-unit id="4a81f58ae0af06c0e29ed9547bff428e9a075df5" translate="yes" xml:space="preserve">
          <source>This function will continuously read data from &lt;code&gt;reader&lt;/code&gt; and then write it into &lt;code&gt;writer&lt;/code&gt; in a streaming fashion until &lt;code&gt;reader&lt;/code&gt; returns EOF.</source>
          <target state="translated">この関数は、 &lt;code&gt;reader&lt;/code&gt; からデータを継続的に読み取り、 &lt;code&gt;reader&lt;/code&gt; がEOFを返すまでストリーミング形式で &lt;code&gt;writer&lt;/code&gt; に書き込みます。</target>
        </trans-unit>
        <trans-unit id="74b77ba5c4f9d07323cf0380138b2c4acac538aa" translate="yes" xml:space="preserve">
          <source>This function will correctly account for the flags provided as well as the minimum width. It will not take precision into account.</source>
          <target state="translated">この関数は、指定されたフラグと最小幅を正しく考慮します。精度は考慮されません。</target>
        </trans-unit>
        <trans-unit id="0e2de984561c8e2a215768e0c15afc535bb75bf0" translate="yes" xml:space="preserve">
          <source>This function will create a file if it does not exist, and will entirely replace its contents if it does.</source>
          <target state="translated">この関数は、ファイルが存在しない場合にはファイルを作成し、存在する場合にはその内容を完全に置き換えます。</target>
        </trans-unit>
        <trans-unit id="f65976cf8345e044488976485c5a6e346af5a578" translate="yes" xml:space="preserve">
          <source>This function will create a file if it does not exist, and will truncate it if it does.</source>
          <target state="translated">この関数は、ファイルが存在しない場合はファイルを作成し、存在する場合はファイルを切り捨てます。</target>
        </trans-unit>
        <trans-unit id="0e1b8893ba63c7e2758784f05b5644780ac55d15" translate="yes" xml:space="preserve">
          <source>This function will ignore all instances of &lt;a href=&quot;enum.errorkind#variant.Interrupted&quot;&gt;&lt;code&gt;ErrorKind::Interrupted&lt;/code&gt;&lt;/a&gt; and will otherwise return any errors returned by &lt;a href=&quot;#tymethod.fill_buf&quot;&gt;&lt;code&gt;fill_buf&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この機能は、すべてのインスタンスは無視されます&lt;a href=&quot;enum.errorkind#variant.Interrupted&quot;&gt; &lt;code&gt;ErrorKind::Interrupted&lt;/code&gt; &lt;/a&gt;し、それ以外で返されたエラーが返されます&lt;a href=&quot;#tymethod.fill_buf&quot;&gt; &lt;code&gt;fill_buf&lt;/code&gt; を&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a56b9fb350dbbed0024c336c03c94d6b856e68cd" translate="yes" xml:space="preserve">
          <source>This function will ignore all instances of &lt;a href=&quot;enum.errorkind#variant.Interrupted&quot;&gt;&lt;code&gt;ErrorKind::Interrupted&lt;/code&gt;&lt;/a&gt; and will otherwise return any errors returned by &lt;a href=&quot;trait.bufread#tymethod.fill_buf&quot;&gt;&lt;code&gt;fill_buf&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この機能は、すべてのインスタンスは無視されます&lt;a href=&quot;enum.errorkind#variant.Interrupted&quot;&gt; &lt;code&gt;ErrorKind::Interrupted&lt;/code&gt; &lt;/a&gt;し、それ以外で返されたエラーが返されます&lt;a href=&quot;trait.bufread#tymethod.fill_buf&quot;&gt; &lt;code&gt;fill_buf&lt;/code&gt; を&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="326c8120454de566fb3a6866a530ebb7b6b992dc" translate="yes" xml:space="preserve">
          <source>This function will never panic, but it may return &lt;a href=&quot;../../result/enum.result#variant.Err&quot;&gt;&lt;code&gt;Err&lt;/code&gt;&lt;/a&gt; if the &lt;a href=&quot;struct.receiver&quot;&gt;&lt;code&gt;Receiver&lt;/code&gt;&lt;/a&gt; has disconnected and is no longer able to receive information.</source>
          <target state="translated">この関数はパニックになることはありませんが、&lt;a href=&quot;struct.receiver&quot;&gt; &lt;code&gt;Receiver&lt;/code&gt; &lt;/a&gt;が切断されて情報を受信できなくなった場合は&lt;a href=&quot;../../result/enum.result#variant.Err&quot;&gt; &lt;code&gt;Err&lt;/code&gt; を&lt;/a&gt;返すことがあります。</target>
        </trans-unit>
        <trans-unit id="9fc6b983aea89da54a39cad92dbfed108559d536" translate="yes" xml:space="preserve">
          <source>This function will never return and will immediately terminate the current process. The exit code is passed through to the underlying OS and will be available for consumption by another process.</source>
          <target state="translated">この関数は決して戻ることはなく、現在のプロセスを直ちに終了させます。終了コードは、基盤となる OS に渡され、別のプロセスで利用できるようになります。</target>
        </trans-unit>
        <trans-unit id="c4fd0f129a9f8ea495fd3f5d41ad244c1f805fd1" translate="yes" xml:space="preserve">
          <source>This function will not block the calling thread and will only check to see if the child process has exited or not. If the child has exited then on Unix the process ID is reaped. This function is guaranteed to repeatedly return a successful exit status so long as the child has already exited.</source>
          <target state="translated">この関数は呼び出したスレッドをブロックせず、子プロセスが終了したかどうかだけをチェックします。子プロセスが終了した場合、Unix ではプロセス ID が reape されます。この関数は、子プロセスが既に終了している限り、繰り返し成功した終了ステータスを返すことが保証されています。</target>
        </trans-unit>
        <trans-unit id="db8a9f6074ffbe2434b96b3349b436c824d317bf" translate="yes" xml:space="preserve">
          <source>This function will not return while other writers or other readers currently have access to the lock.</source>
          <target state="translated">この関数は、他のライターや他の読者が現在ロックにアクセスしている間は戻りません。</target>
        </trans-unit>
        <trans-unit id="f40a0312ebfb2b0e54e13329e7ace227d51b5cf1" translate="yes" xml:space="preserve">
          <source>This function will not traverse symlinks if this entry points at a symlink.</source>
          <target state="translated">このエントリがシンボリックリンクを指している場合、この関数はシンボリックリンクをトラバースしません。</target>
        </trans-unit>
        <trans-unit id="30de93c6705afd606c5b68502e92fede48ab8cb8" translate="yes" xml:space="preserve">
          <source>This function will not traverse symlinks if this entry points at a symlink. To traverse symlinks use &lt;a href=&quot;fn.metadata&quot;&gt;&lt;code&gt;fs::metadata&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;struct.file#method.metadata&quot;&gt;&lt;code&gt;fs::File::metadata&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このエントリがシンボリックリンクを指している場合、この関数はシンボリックリンクをトラバースしません。シンボリックリンクをトラバースするには、&lt;a href=&quot;fn.metadata&quot;&gt; &lt;code&gt;fs::metadata&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;struct.file#method.metadata&quot;&gt; &lt;code&gt;fs::File::metadata&lt;/code&gt; &lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="c834f424a9053dbdf6234c9da264d70e8ba7b880" translate="yes" xml:space="preserve">
          <source>This function will panic if &lt;code&gt;earlier&lt;/code&gt; is later than &lt;code&gt;self&lt;/code&gt;.</source>
          <target state="translated">この関数は、 &lt;code&gt;self&lt;/code&gt; よりも &lt;code&gt;earlier&lt;/code&gt; 場合にパニックになります。</target>
        </trans-unit>
        <trans-unit id="255f788a8373ceb0a89289a41ca323624e5b7999" translate="yes" xml:space="preserve">
          <source>This function will panic if &lt;code&gt;k&lt;/code&gt; is greater than the length of the slice. Note that &lt;code&gt;k == self.len()&lt;/code&gt; does &lt;em&gt;not&lt;/em&gt; panic and is a no-op rotation.</source>
          <target state="translated">&lt;code&gt;k&lt;/code&gt; がスライスの長さより大きい場合、この関数はパニックになります。 &lt;code&gt;k == self.len()&lt;/code&gt; はパニックに&lt;em&gt;ならず&lt;/em&gt;、何もしないローテーションであることに注意してください。</target>
        </trans-unit>
        <trans-unit id="95270b721e4d05b72ba071aee1067eda4042613d" translate="yes" xml:space="preserve">
          <source>This function will panic if &lt;code&gt;mid&lt;/code&gt; is greater than the length of the slice. Note that &lt;code&gt;mid == self.len()&lt;/code&gt; does &lt;em&gt;not&lt;/em&gt; panic and is a no-op rotation.</source>
          <target state="translated">この関数は、 &lt;code&gt;mid&lt;/code&gt; がスライスの長さより大きい場合、パニックになります。 &lt;code&gt;mid == self.len()&lt;/code&gt; はパニックに&lt;em&gt;ならず&lt;/em&gt;、何もしないローテーションであることに注意してください。</target>
        </trans-unit>
        <trans-unit id="e717b0d6a1e36e01967338ee832d65ba4d48839e" translate="yes" xml:space="preserve">
          <source>This function will panic if &lt;code&gt;rhs&lt;/code&gt; is 0 or the division results in overflow.</source>
          <target state="translated">&lt;code&gt;rhs&lt;/code&gt; が0の場合、または除算によってオーバーフローが発生した場合、この関数はパニックになります。</target>
        </trans-unit>
        <trans-unit id="46e96193daf65415936b126b06264ed8418f5b5e" translate="yes" xml:space="preserve">
          <source>This function will panic if &lt;code&gt;rhs&lt;/code&gt; is 0.</source>
          <target state="translated">&lt;code&gt;rhs&lt;/code&gt; が0の場合、この関数はパニックになります。</target>
        </trans-unit>
        <trans-unit id="d72d270dceb6908b40e770de6a7cca4ee6d954fb" translate="yes" xml:space="preserve">
          <source>This function will panic if either range exceeds the end of the slice, or if the end of &lt;code&gt;src&lt;/code&gt; is before the start.</source>
          <target state="translated">この関数は、いずれかの範囲がスライスの終わりを超えるか、 &lt;code&gt;src&lt;/code&gt; の終わりが開始の前にある場合、パニックになります。</target>
        </trans-unit>
        <trans-unit id="ffa5cde970751a9af3f3c95b9bc636f122bbdd4f" translate="yes" xml:space="preserve">
          <source>This function will panic if the capacity would overflow.</source>
          <target state="translated">この機能は、容量がオーバーフローしてしまうとパニックになります。</target>
        </trans-unit>
        <trans-unit id="157be01a917f2466c041055463b9f02120a94753" translate="yes" xml:space="preserve">
          <source>This function will panic if the position of the inner reader is smaller than the amount of buffered data. That can happen if the inner reader has an incorrect implementation of &lt;a href=&quot;trait.seek#method.stream_position&quot;&gt;&lt;code&gt;Seek::stream_position&lt;/code&gt;&lt;/a&gt;, or if the position has gone out of sync due to calling &lt;a href=&quot;trait.seek#tymethod.seek&quot;&gt;&lt;code&gt;Seek::seek&lt;/code&gt;&lt;/a&gt; directly on the underlying reader.</source>
          <target state="translated">内部リーダーの位置がバッファリングされたデータの量よりも小さい場合、この関数はパニックになります。これは、内部リーダーに&lt;a href=&quot;trait.seek#method.stream_position&quot;&gt; &lt;code&gt;Seek::stream_position&lt;/code&gt; &lt;/a&gt;実装が正しくない場合、または基になるリーダーで&lt;a href=&quot;trait.seek#tymethod.seek&quot;&gt; &lt;code&gt;Seek::seek&lt;/code&gt; &lt;/a&gt;直接呼び出したために位置が同期しなくなった場合に発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="b80c161450352b3f264fa270e71aafac41ce5a3b" translate="yes" xml:space="preserve">
          <source>This function will panic if the two slices have different lengths.</source>
          <target state="translated">この関数は、2つのスライスの長さが異なる場合にパニックを起こします。</target>
        </trans-unit>
        <trans-unit id="f9a04d3eaea11b5bf70c2b1e292fe13090c46ff0" translate="yes" xml:space="preserve">
          <source>This function will read bytes from the underlying stream until the delimiter or EOF is found. Once found, all bytes up to, and including, the delimiter (if found) will be appended to &lt;code&gt;buf&lt;/code&gt;.</source>
          <target state="translated">この関数は、区切り文字またはEOFが見つかるまで、基になるストリームからバイトを読み取ります。見つかったら、区切り文字（見つかった場合）までのすべてのバイトが &lt;code&gt;buf&lt;/code&gt; に追加されます。</target>
        </trans-unit>
        <trans-unit id="1dad503d6df9a455b05b17e9982a9b93c55eab53" translate="yes" xml:space="preserve">
          <source>This function will read bytes from the underlying stream until the newline delimiter (the 0xA byte) or EOF is found. Once found, all bytes up to, and including, the delimiter (if found) will be appended to &lt;code&gt;buf&lt;/code&gt;.</source>
          <target state="translated">この関数は、改行区切り文字（0xAバイト）またはEOFが見つかるまで、基になるストリームからバイトを読み取ります。見つかったら、区切り文字（見つかった場合）までのすべてのバイトが &lt;code&gt;buf&lt;/code&gt; に追加されます。</target>
        </trans-unit>
        <trans-unit id="4641b6a37e2fa63178c9c82e80780dcf197015e4" translate="yes" xml:space="preserve">
          <source>This function will read bytes from the underlying stream until the newline delimiter (the &lt;code&gt;0xA&lt;/code&gt; byte) or EOF is found. Once found, all bytes up to, and including, the delimiter (if found) will be appended to &lt;code&gt;buf&lt;/code&gt;.</source>
          <target state="translated">この関数は、改行区切り文字（ &lt;code&gt;0xA&lt;/code&gt; バイト）またはEOFが見つかるまで、基になるストリームからバイトを読み取ります。検出されると、区切り文字（見つかった場合）までのすべてのバイトが &lt;code&gt;buf&lt;/code&gt; に追加されます。</target>
        </trans-unit>
        <trans-unit id="5509bdb3a49d4f3afca9be3c4e49fc0d8f43d023" translate="yes" xml:space="preserve">
          <source>This function will resume execution of the generator or start execution if it hasn't already. This call will return back into the generator's last suspension point, resuming execution from the latest &lt;code&gt;yield&lt;/code&gt;. The generator will continue executing until it either yields or returns, at which point this function will return.</source>
          <target state="translated">この関数は、ジェネレータの実行を再開するか、まだ実行していない場合は実行を開始します。この呼び出しは、ジェネレーターの最後の中断ポイントに戻り、最新の &lt;code&gt;yield&lt;/code&gt; から実行を再開します。ジェネレーターは、生成されるか戻るまで実行を継続し、その時点でこの関数が戻ります。</target>
        </trans-unit>
        <trans-unit id="379fb0237a1103a33f0bdfcecfb22299eb043557" translate="yes" xml:space="preserve">
          <source>This function will return &lt;code&gt;Ok&lt;/code&gt; with the closure's result if the closure does not panic, and will return &lt;code&gt;Err(cause)&lt;/code&gt; if the closure panics. The &lt;code&gt;cause&lt;/code&gt; returned is the object with which panic was originally invoked.</source>
          <target state="translated">この関数は、クロージャがパニックにならない場合はクロージャの結果とともに &lt;code&gt;Ok&lt;/code&gt; を返し、クロージャがパニックになる場合は &lt;code&gt;Err(cause)&lt;/code&gt; を返します。 &lt;code&gt;cause&lt;/code&gt; 返されたが、元々呼び出されたパニックを持つオブジェクトです。</target>
        </trans-unit>
        <trans-unit id="d89140f93781fe909c3c1a3e0e29b63c7e369dd7" translate="yes" xml:space="preserve">
          <source>This function will return an I/O error if the underlying reader was read, but returned an error.</source>
          <target state="translated">この関数は、基礎となるリーダが読み込まれたが、エラーを返した場合、I/Oエラーを返します。</target>
        </trans-unit>
        <trans-unit id="53872c0f37fe2cee76394788d7b1f123503054e5" translate="yes" xml:space="preserve">
          <source>This function will return an error if &lt;code&gt;path&lt;/code&gt; does not already exist. Other errors may also be returned according to &lt;a href=&quot;struct.openoptions#method.open&quot;&gt;&lt;code&gt;OpenOptions::open&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; が存在しない場合、この関数はエラーを返します。&lt;a href=&quot;struct.openoptions#method.open&quot;&gt; &lt;code&gt;OpenOptions::open&lt;/code&gt; &lt;/a&gt;に従って他のエラーも返される場合があります。</target>
        </trans-unit>
        <trans-unit id="89c6971a5e8debeb3922f37bf3a67af3e6b7d708" translate="yes" xml:space="preserve">
          <source>This function will return an error if the RwLock is poisoned. An RwLock is poisoned whenever a writer panics while holding an exclusive lock. An error will be returned when the lock is acquired.</source>
          <target state="translated">この関数は、RwLockがポイズンされた場合にエラーを返します。排他的なロックを保持している間にライターがパニックに陥ると、RwLockはポイズンされます。ロックが取得されるとエラーが返されます。</target>
        </trans-unit>
        <trans-unit id="dd9f12f8f4834cac09e7d8702d9c30c5d7a3ff26" translate="yes" xml:space="preserve">
          <source>This function will return an error if the RwLock is poisoned. An RwLock is poisoned whenever a writer panics while holding an exclusive lock. An error will only be returned if the lock would have otherwise been acquired.</source>
          <target state="translated">この関数は、RwLockがポイズンされた場合にエラーを返します。排他的なロックを保持している間にライターがパニックに陥ると、RwLockはポイズンされます。エラーが返されるのは、ロックが取得されていない場合のみです。</target>
        </trans-unit>
        <trans-unit id="853f4abcb0adc2f4d392d459e3d4bcbfc1ffde02" translate="yes" xml:space="preserve">
          <source>This function will return an error if the RwLock is poisoned. An RwLock is poisoned whenever a writer panics while holding an exclusive lock. The failure will occur immediately after the lock has been acquired.</source>
          <target state="translated">この関数は、RwLockがポイズンされた場合にエラーを返します。排他的なロックを保持している間にライターがパニックに陥ると、RwLockはポイズンされます。ロックを取得した直後に障害が発生します。</target>
        </trans-unit>
        <trans-unit id="08332f9ce278762f6fd52afefe704489d0688f37" translate="yes" xml:space="preserve">
          <source>This function will return an error if the file is not opened for writing.</source>
          <target state="translated">この関数は、書き込みのためにファイルが開かれていない場合にエラーを返します。</target>
        </trans-unit>
        <trans-unit id="cdbfb4a0b16adba4591761f7aedf5e4a9ea34196" translate="yes" xml:space="preserve">
          <source>This function will return an error if the file is not opened for writing. Also, std::io::ErrorKind::InvalidInput will be returned if the desired length would cause an overflow due to the implementation specifics.</source>
          <target state="translated">この関数は、ファイルが書き込み用にオープンされていない場合にエラーを返します。また、実装の都合上、希望する長さでオーバーフローが発生する場合は、 std::io::ErrorKind::InvalidInput を返します。</target>
        </trans-unit>
        <trans-unit id="b6cdf441223c3eb9f4334399883d69c73ecd1bf4" translate="yes" xml:space="preserve">
          <source>This function will return an error if the mutex being waited on is poisoned when this thread re-acquires the lock. For more information, see information about &lt;a href=&quot;struct.mutex#poisoning&quot;&gt;poisoning&lt;/a&gt; on the &lt;a href=&quot;struct.mutex&quot;&gt;&lt;code&gt;Mutex&lt;/code&gt;&lt;/a&gt; type.</source>
          <target state="translated">このスレッドがロックを再取得したときに、待機中のミューテックスが汚染されている場合、この関数はエラーを返します。詳細については、&lt;a href=&quot;struct.mutex&quot;&gt; &lt;code&gt;Mutex&lt;/code&gt; &lt;/a&gt;タイプの&lt;a href=&quot;struct.mutex#poisoning&quot;&gt;ポイズニング&lt;/a&gt;に関する情報を参照してください。</target>
        </trans-unit>
        <trans-unit id="27a931587ff628dc51ea9585254e81a44150f056" translate="yes" xml:space="preserve">
          <source>This function will return an error if the supplied bytes contain an internal 0 byte. The &lt;a href=&quot;struct.nulerror&quot;&gt;&lt;code&gt;NulError&lt;/code&gt;&lt;/a&gt; returned will contain the bytes as well as the position of the nul byte.</source>
          <target state="translated">指定されたバイトに内部0バイトが含まれている場合、この関数はエラーを返します。&lt;a href=&quot;struct.nulerror&quot;&gt; &lt;code&gt;NulError&lt;/code&gt; は&lt;/a&gt; NULバイトの位置だけでなく、バイトが含まれています返されました。</target>
        </trans-unit>
        <trans-unit id="dbf84289e9d9e4926b496bd897b3083ec6312b71" translate="yes" xml:space="preserve">
          <source>This function will return an error if the user lacks permission change attributes on the underlying file. It may also return an error in other os-specific unspecified cases.</source>
          <target state="translated">この関数は、ユーザがそのファイルのパーミッション変更属性を欠いている場合にエラーを返します。また、その他のOS固有の不特定多数の場合にもエラーを返すことがあります。</target>
        </trans-unit>
        <trans-unit id="5d42b76127c0c24013b14924e889090949109ff6" translate="yes" xml:space="preserve">
          <source>This function will return an error immediately if any call to &lt;a href=&quot;trait.read#tymethod.read&quot;&gt;&lt;code&gt;read&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;trait.write#tymethod.write&quot;&gt;&lt;code&gt;write&lt;/code&gt;&lt;/a&gt; returns an error. All instances of &lt;a href=&quot;enum.errorkind#variant.Interrupted&quot;&gt;&lt;code&gt;ErrorKind::Interrupted&lt;/code&gt;&lt;/a&gt; are handled by this function and the underlying operation is retried.</source>
          <target state="translated">この関数は、&lt;a href=&quot;trait.read#tymethod.read&quot;&gt; &lt;code&gt;read&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;trait.write#tymethod.write&quot;&gt; &lt;code&gt;write&lt;/code&gt; &lt;/a&gt;呼び出しでエラーが返された場合、すぐにエラーを返します。&lt;a href=&quot;enum.errorkind#variant.Interrupted&quot;&gt; &lt;code&gt;ErrorKind::Interrupted&lt;/code&gt; &lt;/a&gt;すべてのインスタンスはこの関数によって処理され、基になる操作が再試行されます。</target>
        </trans-unit>
        <trans-unit id="6020fefae74dafb3cbf7677aedde54d28946007d" translate="yes" xml:space="preserve">
          <source>This function will return an error immediately if any call to &lt;code&gt;read&lt;/code&gt; or &lt;code&gt;write&lt;/code&gt; returns an error. All instances of &lt;code&gt;ErrorKind::Interrupted&lt;/code&gt; are handled by this function and the underlying operation is retried.</source>
          <target state="translated">この関数は、 &lt;code&gt;read&lt;/code&gt; または &lt;code&gt;write&lt;/code&gt; 呼び出しがエラーを返した場合、すぐにエラーを返します。 &lt;code&gt;ErrorKind::Interrupted&lt;/code&gt; すべてのインスタンスはこの関数によって処理され、基になる操作が再試行されます。</target>
        </trans-unit>
        <trans-unit id="789ed5daa8073ac179354d082eb69d8ff28cdee6" translate="yes" xml:space="preserve">
          <source>This function will return an error in the following situations, but is not limited to just these cases:</source>
          <target state="translated">この関数は、以下のような場合にエラーを返しますが、これらの場合に限定されるものではありません。</target>
        </trans-unit>
        <trans-unit id="6c2926688126ed0bb4700cfc41330adcd34075d1" translate="yes" xml:space="preserve">
          <source>This function will return an error under a number of different circumstances. Some of these error conditions are listed here, together with their &lt;a href=&quot;../io/enum.errorkind&quot;&gt;&lt;code&gt;ErrorKind&lt;/code&gt;&lt;/a&gt;. The mapping to &lt;a href=&quot;../io/enum.errorkind&quot;&gt;&lt;code&gt;ErrorKind&lt;/code&gt;&lt;/a&gt;s is not part of the compatibility contract of the function, especially the &lt;code&gt;Other&lt;/code&gt; kind might change to more specific kinds in the future.</source>
          <target state="translated">この関数は、さまざまな状況でエラーを返します。これらのエラー条件の一部が、それらの&lt;a href=&quot;../io/enum.errorkind&quot;&gt; &lt;code&gt;ErrorKind&lt;/code&gt; &lt;/a&gt;とともにここにリストされています。&lt;a href=&quot;../io/enum.errorkind&quot;&gt; &lt;code&gt;ErrorKind&lt;/code&gt; &lt;/a&gt;へのマッピングは、関数の互換性規約の一部ではありません。特に、 &lt;code&gt;Other&lt;/code&gt; 種類は、将来、より具体的な種類に変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="dbf346cba719ecc4a64a28fdc51747223ea1ead1" translate="yes" xml:space="preserve">
          <source>This function will return an error under a number of different circumstances. Some of these error conditions are listed here, together with their &lt;a href=&quot;../io/enum.errorkind&quot;&gt;&lt;code&gt;io::ErrorKind&lt;/code&gt;&lt;/a&gt;. The mapping to &lt;a href=&quot;../io/enum.errorkind&quot;&gt;&lt;code&gt;io::ErrorKind&lt;/code&gt;&lt;/a&gt;s is not part of the compatibility contract of the function, especially the &lt;a href=&quot;../io/enum.errorkind#variant.Other&quot;&gt;&lt;code&gt;Other&lt;/code&gt;&lt;/a&gt; kind might change to more specific kinds in the future.</source>
          <target state="translated">この関数は、さまざまな状況でエラーを返します。これらのエラー状態のいくつかは、&lt;a href=&quot;../io/enum.errorkind&quot;&gt; &lt;code&gt;io::ErrorKind&lt;/code&gt; &lt;/a&gt;とともにここにリストされています。&lt;a href=&quot;../io/enum.errorkind&quot;&gt; &lt;code&gt;io::ErrorKind&lt;/code&gt; &lt;/a&gt;へのマッピングは、関数の互換性コントラクトの一部ではありません。特に、&lt;a href=&quot;../io/enum.errorkind#variant.Other&quot;&gt; &lt;code&gt;Other&lt;/code&gt; の&lt;/a&gt;種類は、将来、より具体的な種類に変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="b6a8bd83b584fa0f13cb1bcd08f12c3e0060dff9" translate="yes" xml:space="preserve">
          <source>This function will return an instance of &lt;a href=&quot;struct.error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; on error.</source>
          <target state="translated">この関数は、&lt;a href=&quot;struct.error&quot;&gt; &lt;code&gt;Error&lt;/code&gt; &lt;/a&gt;にエラーのインスタンスを返します。</target>
        </trans-unit>
        <trans-unit id="6fae4edeb2bc2b830762c223977c0f9e31e7f71d" translate="yes" xml:space="preserve">
          <source>This function will return any I/O error reported while formatting.</source>
          <target state="translated">この関数は、フォーマット中に報告されたI/Oエラーを返します。</target>
        </trans-unit>
        <trans-unit id="82d9dcac7df30707ace2de701aba5471ae21281c" translate="yes" xml:space="preserve">
          <source>This function will return the first error of non-&lt;a href=&quot;../../../io/enum.errorkind#variant.Interrupted&quot;&gt;&lt;code&gt;ErrorKind::Interrupted&lt;/code&gt;&lt;/a&gt; kind that &lt;a href=&quot;#tymethod.write_at&quot;&gt;&lt;code&gt;write_at&lt;/code&gt;&lt;/a&gt; returns.</source>
          <target state="translated">この関数は、非の最初のエラーが返されます&lt;a href=&quot;../../../io/enum.errorkind#variant.Interrupted&quot;&gt; &lt;code&gt;ErrorKind::Interrupted&lt;/code&gt; &lt;/a&gt;という種類を&lt;a href=&quot;#tymethod.write_at&quot;&gt; &lt;code&gt;write_at&lt;/code&gt; &lt;/a&gt;戻ります。</target>
        </trans-unit>
        <trans-unit id="cbfac2234e26fd5ad38b1fb7d157edb650781848" translate="yes" xml:space="preserve">
          <source>This function will return the first error of non-&lt;a href=&quot;../../../io/enum.errorkind#variant.Interrupted&quot;&gt;&lt;code&gt;io::ErrorKind::Interrupted&lt;/code&gt;&lt;/a&gt; kind that &lt;a href=&quot;trait.fileext#tymethod.write_at&quot;&gt;&lt;code&gt;write_at&lt;/code&gt;&lt;/a&gt; returns.</source>
          <target state="translated">この関数は、&lt;a href=&quot;trait.fileext#tymethod.write_at&quot;&gt; &lt;code&gt;write_at&lt;/code&gt; &lt;/a&gt;が返す&lt;a href=&quot;../../../io/enum.errorkind#variant.Interrupted&quot;&gt; &lt;code&gt;io::ErrorKind::Interrupted&lt;/code&gt; &lt;/a&gt;種類の最初のエラーを返します。</target>
        </trans-unit>
        <trans-unit id="e505864f4a28d60809a69e771d2b212f82c7410c" translate="yes" xml:space="preserve">
          <source>This function will return the first error of non-&lt;a href=&quot;enum.errorkind#variant.Interrupted&quot;&gt;&lt;code&gt;ErrorKind::Interrupted&lt;/code&gt;&lt;/a&gt; kind that &lt;a href=&quot;#tymethod.write&quot;&gt;&lt;code&gt;write&lt;/code&gt;&lt;/a&gt; returns.</source>
          <target state="translated">この関数は、&lt;a href=&quot;#tymethod.write&quot;&gt; &lt;code&gt;write&lt;/code&gt; &lt;/a&gt;が返す非&lt;a href=&quot;enum.errorkind#variant.Interrupted&quot;&gt; &lt;code&gt;ErrorKind::Interrupted&lt;/code&gt; &lt;/a&gt;種類の最初のエラーを返します。</target>
        </trans-unit>
        <trans-unit id="e4e34f750f27d3b0d205fe34d5653142bb6c6abe" translate="yes" xml:space="preserve">
          <source>This function will return the first error of non-&lt;a href=&quot;enum.errorkind#variant.Interrupted&quot;&gt;&lt;code&gt;ErrorKind::Interrupted&lt;/code&gt;&lt;/a&gt; kind that &lt;a href=&quot;trait.write#tymethod.write&quot;&gt;&lt;code&gt;write&lt;/code&gt;&lt;/a&gt; returns.</source>
          <target state="translated">この関数は、&lt;a href=&quot;trait.write#tymethod.write&quot;&gt; &lt;code&gt;write&lt;/code&gt; &lt;/a&gt;が返す非&lt;a href=&quot;enum.errorkind#variant.Interrupted&quot;&gt; &lt;code&gt;ErrorKind::Interrupted&lt;/code&gt; &lt;/a&gt;種類の最初のエラーを返します。</target>
        </trans-unit>
        <trans-unit id="749cf49b6adfac5a93f23dcbbade901579686611" translate="yes" xml:space="preserve">
          <source>This function will still &lt;code&gt;panic!()&lt;/code&gt; if the key is uninitialized and the key's initializer panics.</source>
          <target state="translated">キーが初期化されておらず、キーの初期化子がパニックを起こした場合、この関数は引き続き &lt;code&gt;panic!()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="aa2dcaf81660e38d976b3c073799f64e35c409b8" translate="yes" xml:space="preserve">
          <source>This function will traverse symbolic links to query information about the destination file.</source>
          <target state="translated">この関数は、シンボリックリンクを辿って、送信先のファイルに関する情報を照会します。</target>
        </trans-unit>
        <trans-unit id="7a60f9a71c97e3c48d6ddbb61757095cfb7454e6" translate="yes" xml:space="preserve">
          <source>This function will traverse symbolic links to query information about the destination file. In case of broken symbolic links this will return &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">この関数は、シンボリックリンクをたどって、宛先ファイルに関する情報を照会します。シンボリックリンクが壊れている場合、これは &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="e2e9a4f19c05867342225932a802795ba8df8be2" translate="yes" xml:space="preserve">
          <source>This function will unsafely assume the pointer &lt;code&gt;src&lt;/code&gt; is valid for &lt;a href=&quot;fn.size_of&quot;&gt;&lt;code&gt;size_of::&amp;lt;U&amp;gt;&lt;/code&gt;&lt;/a&gt; bytes by transmuting &lt;code&gt;&amp;amp;T&lt;/code&gt; to &lt;code&gt;&amp;amp;U&lt;/code&gt; and then reading the &lt;code&gt;&amp;amp;U&lt;/code&gt; (except that this is done in a way that is correct even when &lt;code&gt;&amp;amp;U&lt;/code&gt; makes stricter alignment requirements than &lt;code&gt;&amp;amp;T&lt;/code&gt;). It will also unsafely create a copy of the contained value instead of moving out of &lt;code&gt;src&lt;/code&gt;.</source>
          <target state="translated">この関数は、危険な状態でポインタと仮定します &lt;code&gt;src&lt;/code&gt; が有効です&lt;a href=&quot;fn.size_of&quot;&gt; &lt;code&gt;size_of::&amp;lt;U&amp;gt;&lt;/code&gt; &lt;/a&gt;核変換によってバイト &lt;code&gt;&amp;amp;T&lt;/code&gt; に &lt;code&gt;&amp;amp;U&lt;/code&gt; 、その後読ん &lt;code&gt;&amp;amp;U&lt;/code&gt; （これは場合でも、正しい方法で行われていることを除いて &lt;code&gt;&amp;amp;U&lt;/code&gt; より厳しいアライメント要件作る &lt;code&gt;&amp;amp;T&lt;/code&gt; ） 。また、 &lt;code&gt;src&lt;/code&gt; から移動する代わりに、含まれている値のコピーを安全に作成しません。</target>
        </trans-unit>
        <trans-unit id="2144ac018e241484dd88280c401709723264165b" translate="yes" xml:space="preserve">
          <source>This function will unsafely assume the pointer &lt;code&gt;src&lt;/code&gt; is valid for &lt;a href=&quot;fn.size_of&quot;&gt;&lt;code&gt;size_of::&amp;lt;U&amp;gt;&lt;/code&gt;&lt;/a&gt; bytes by transmuting &lt;code&gt;&amp;amp;T&lt;/code&gt; to &lt;code&gt;&amp;amp;U&lt;/code&gt; and then reading the &lt;code&gt;&amp;amp;U&lt;/code&gt;. It will also unsafely create a copy of the contained value instead of moving out of &lt;code&gt;src&lt;/code&gt;.</source>
          <target state="translated">この関数は、危険な状態でポインタと仮定します &lt;code&gt;src&lt;/code&gt; が有効です&lt;a href=&quot;fn.size_of&quot;&gt; &lt;code&gt;size_of::&amp;lt;U&amp;gt;&lt;/code&gt; &lt;/a&gt;核変換によってバイト &lt;code&gt;&amp;amp;T&lt;/code&gt; に &lt;code&gt;&amp;amp;U&lt;/code&gt; 、その後読ん &lt;code&gt;&amp;amp;U&lt;/code&gt; を。また、 &lt;code&gt;src&lt;/code&gt; から移動する代わりに、含まれている値のコピーを安全に作成しません。</target>
        </trans-unit>
        <trans-unit id="be98532def31c781d65ddc0b9dc20df02eb564e6" translate="yes" xml:space="preserve">
          <source>This function will wrap the provided &lt;code&gt;ptr&lt;/code&gt; with a &lt;code&gt;CStr&lt;/code&gt; wrapper, which allows inspection and interoperation of non-owned C strings. The total size of the raw C string must be smaller than &lt;code&gt;isize::MAX&lt;/code&gt;&lt;strong&gt;bytes&lt;/strong&gt; in memory due to calling the &lt;code&gt;slice::from_raw_parts&lt;/code&gt; function. This method is unsafe for a number of reasons:</source>
          <target state="translated">この関数は、提供された &lt;code&gt;ptr&lt;/code&gt; を &lt;code&gt;CStr&lt;/code&gt; ラッパーでラップします。これにより、所有されていないC文字列の検査と相互運用が可能になります。生のC文字列の合計サイズは、 &lt;code&gt;slice::from_raw_parts&lt;/code&gt; 関数を呼び出すため、メモリ内の &lt;code&gt;isize::MAX&lt;/code&gt; &lt;strong&gt;バイト&lt;/strong&gt;よりも小さくする必要があります。この方法は、いくつかの理由で安全ではありません。</target>
        </trans-unit>
        <trans-unit id="d5bb3f5f774e85331b120930c24070df4dbb7ef1" translate="yes" xml:space="preserve">
          <source>This function will wrap the provided &lt;code&gt;ptr&lt;/code&gt; with a &lt;code&gt;CStr&lt;/code&gt; wrapper, which allows inspection and interoperation of non-owned C strings. This method is unsafe for a number of reasons:</source>
          <target state="translated">この関数は、提供された &lt;code&gt;ptr&lt;/code&gt; を &lt;code&gt;CStr&lt;/code&gt; ラッパーでラップします。これにより、所有されていないC文字列の検査と相互運用が可能になります。この方法は、いくつかの理由で安全ではありません。</target>
        </trans-unit>
        <trans-unit id="eb6de22f90abba9d8b2e22f07508357043cd45b1" translate="yes" xml:space="preserve">
          <source>This function will yield errors whenever &lt;a href=&quot;#method.read_until&quot;&gt;&lt;code&gt;read_until&lt;/code&gt;&lt;/a&gt; would have also yielded an error.</source>
          <target state="translated">この関数は、&lt;a href=&quot;#method.read_until&quot;&gt; &lt;code&gt;read_until&lt;/code&gt; &lt;/a&gt;でもエラーが発生する場合は常にエラーを発生させます。</target>
        </trans-unit>
        <trans-unit id="0ec10f22723b4146e4ed97d9a1ccb195f6666569" translate="yes" xml:space="preserve">
          <source>This function will yield errors whenever &lt;a href=&quot;trait.bufread#method.read_until&quot;&gt;&lt;code&gt;read_until&lt;/code&gt;&lt;/a&gt; would have also yielded an error.</source>
          <target state="translated">この関数は、&lt;a href=&quot;trait.bufread#method.read_until&quot;&gt; &lt;code&gt;read_until&lt;/code&gt; &lt;/a&gt;でもエラーが発生する場合は常に、エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="761c3823fedfe961f64b60f5bbf8dadb1c015978" translate="yes" xml:space="preserve">
          <source>This function works on a best-effort basis, and may return false even when the &lt;code&gt;Waker&lt;/code&gt;s would awaken the same task. However, if this function returns &lt;code&gt;true&lt;/code&gt;, it is guaranteed that the &lt;code&gt;Waker&lt;/code&gt;s will awaken the same task.</source>
          <target state="translated">この関数はベストエフォートベースで機能し、 &lt;code&gt;Waker&lt;/code&gt; が同じタスクを起こした場合でもfalseを返すことがあります。ただし、この関数が &lt;code&gt;true&lt;/code&gt; を返す場合、 &lt;code&gt;Waker&lt;/code&gt; が同じタスクを起こすことが保証されます。</target>
        </trans-unit>
        <trans-unit id="0fef1eb994767850b63d5d3191f1364d1d996711" translate="yes" xml:space="preserve">
          <source>This function works similar to &lt;a href=&quot;../iter/trait.iterator#method.filter&quot;&gt;&lt;code&gt;Iterator::filter()&lt;/code&gt;&lt;/a&gt;. You can imagine the &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; being an iterator over one or zero elements. &lt;code&gt;filter()&lt;/code&gt; lets you decide which elements to keep.</source>
          <target state="translated">この関数は、&lt;a href=&quot;../iter/trait.iterator#method.filter&quot;&gt; &lt;code&gt;Iterator::filter()&lt;/code&gt; &lt;/a&gt;と同様に機能します。 &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; が1つまたは0の要素に対するイテレーターであると想像できます。 &lt;code&gt;filter()&lt;/code&gt; を使用すると、保持する要素を決定できます。</target>
        </trans-unit>
        <trans-unit id="7ae0840523d6333733f66bb75a006add83e1ec36" translate="yes" xml:space="preserve">
          <source>This function works similar to &lt;code&gt;Iterator::filter()&lt;/code&gt;. You can imagine the &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; being an iterator over one or zero elements. &lt;code&gt;filter()&lt;/code&gt; lets you decide which elements to keep.</source>
          <target state="translated">この関数は、 &lt;code&gt;Iterator::filter()&lt;/code&gt; と同様に機能します。 &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; が1つまたはゼロの要素のイテレーターであると想像できます。 &lt;code&gt;filter()&lt;/code&gt; を使用すると、保持する要素を決定できます。</target>
        </trans-unit>
        <trans-unit id="113d936138ddc7ae4f63a1a50d8105ac5a7add0d" translate="yes" xml:space="preserve">
          <source>This function&amp;rsquo;s signature is less cluttered: the function name, parameter list, and return type are close together, similar to a function without lots of trait bounds.</source>
          <target state="translated">この関数のシグネチャは整理されています。関数名、パラメーターリスト、および戻り値の型は、多くの特性境界のない関数と同様に、接近しています。</target>
        </trans-unit>
        <trans-unit id="59db1f1ce2d556d00a44653625d9c4310aa82a71" translate="yes" xml:space="preserve">
          <source>This function, &lt;code&gt;first_word&lt;/code&gt;, has a &lt;code&gt;&amp;amp;String&lt;/code&gt; as a parameter. We don&amp;rsquo;t want ownership, so this is fine. But what should we return? We don&amp;rsquo;t really have a way to talk about &lt;em&gt;part&lt;/em&gt; of a string. However, we could return the index of the end of the word. Let&amp;rsquo;s try that, as shown in Listing 4-7.</source>
          <target state="translated">この関数 &lt;code&gt;first_word&lt;/code&gt; には、パラメーターとして &lt;code&gt;&amp;amp;String&lt;/code&gt; があります。私たちは所有権を望んでいないので、これは問題ありません。しかし、何を返すべきでしょうか？文字列の&lt;em&gt;一部&lt;/em&gt;について話す方法は実際にはありません。ただし、単語の終わりのインデックスを返すことができます。リスト4-7に示すように、それを試してみましょう。</target>
        </trans-unit>
        <trans-unit id="c0b65dd63b8d87baa6cb2781b4c83fe9b710f211" translate="yes" xml:space="preserve">
          <source>This function, unlike &lt;code&gt;spawn&lt;/code&gt;, will &lt;strong&gt;not&lt;/strong&gt;&lt;code&gt;fork&lt;/code&gt; the process to create a new child. Like spawn, however, the default behavior for the stdio descriptors will be to inherited from the current process.</source>
          <target state="translated">この関数は、 &lt;code&gt;spawn&lt;/code&gt; とは異なり、新しい子を作成するプロセスを &lt;code&gt;fork&lt;/code&gt; し&lt;strong&gt;ません&lt;/strong&gt;。ただし、spawnと同様に、stdio記述子のデフォルトの動作は現在のプロセスから継承されます。</target>
        </trans-unit>
        <trans-unit id="a7e07fc3dba284598652a13174e554562e5525f8" translate="yes" xml:space="preserve">
          <source>This handle encapsulates a &lt;a href=&quot;struct.rawwaker&quot;&gt;&lt;code&gt;RawWaker&lt;/code&gt;&lt;/a&gt; instance, which defines the executor-specific wakeup behavior.</source>
          <target state="translated">このハンドルは、&lt;a href=&quot;struct.rawwaker&quot;&gt; &lt;code&gt;RawWaker&lt;/code&gt; &lt;/a&gt;固有のウェイクアップ動作を定義するRawWakerインスタンスをカプセル化します。</target>
        </trans-unit>
        <trans-unit id="d605d26d55dc2758f0b6de9e17a49a349f074534" translate="yes" xml:space="preserve">
          <source>This handle implements both the &lt;a href=&quot;trait.read&quot;&gt;&lt;code&gt;Read&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;trait.bufread&quot;&gt;&lt;code&gt;BufRead&lt;/code&gt;&lt;/a&gt; traits, and is constructed via the &lt;a href=&quot;struct.stdin#method.lock&quot;&gt;&lt;code&gt;Stdin::lock&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">このハンドルは、&lt;a href=&quot;trait.read&quot;&gt; &lt;code&gt;Read&lt;/code&gt; &lt;/a&gt;トレイトと&lt;a href=&quot;trait.bufread&quot;&gt; &lt;code&gt;BufRead&lt;/code&gt; &lt;/a&gt;トレイトの両方を実装し、&lt;a href=&quot;struct.stdin#method.lock&quot;&gt; &lt;code&gt;Stdin::lock&lt;/code&gt; &lt;/a&gt;メソッドを介して構築されます。</target>
        </trans-unit>
        <trans-unit id="f7258bae2e88ec63ae3dd338b65d64451a9b331b" translate="yes" xml:space="preserve">
          <source>This handle implements the &lt;a href=&quot;trait.write&quot;&gt;&lt;code&gt;Write&lt;/code&gt;&lt;/a&gt; trait, and is constructed via the &lt;a href=&quot;struct.stdout#method.lock&quot;&gt;&lt;code&gt;Stdout::lock&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">このハンドルは&lt;a href=&quot;trait.write&quot;&gt; &lt;code&gt;Write&lt;/code&gt; &lt;/a&gt;トレイトを実装し、&lt;a href=&quot;struct.stdout#method.lock&quot;&gt; &lt;code&gt;Stdout::lock&lt;/code&gt; &lt;/a&gt;メソッドを介して構築されます。</target>
        </trans-unit>
        <trans-unit id="d288bcdc54960c2a1210bed705519ebb1c8b509b" translate="yes" xml:space="preserve">
          <source>This handle implements the &lt;code&gt;Read&lt;/code&gt; trait, but beware that concurrent reads of &lt;code&gt;Stdin&lt;/code&gt; must be executed with care.</source>
          <target state="translated">このハンドルは &lt;code&gt;Read&lt;/code&gt; トレイトを実装しますが、 &lt;code&gt;Stdin&lt;/code&gt; の同時読み取りは注意して実行する必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="01441d3c1d26b75fb46c2c721477af0652ee7979" translate="yes" xml:space="preserve">
          <source>This handle implements the &lt;code&gt;Write&lt;/code&gt; trait and is constructed via the &lt;a href=&quot;struct.stderr#method.lock&quot;&gt;&lt;code&gt;Stderr::lock&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">このハンドルは &lt;code&gt;Write&lt;/code&gt; トレイトを実装し、&lt;a href=&quot;struct.stderr#method.lock&quot;&gt; &lt;code&gt;Stderr::lock&lt;/code&gt; &lt;/a&gt;メソッドを介して構築されます。</target>
        </trans-unit>
        <trans-unit id="2708f4eb8582ea4d70309feff62a1d2748e13184" translate="yes" xml:space="preserve">
          <source>This handle is not buffered.</source>
          <target state="translated">このハンドルはバッファリングされていません。</target>
        </trans-unit>
        <trans-unit id="6c48d5f61a1b6b181a01656b1e94697dc7bb9249" translate="yes" xml:space="preserve">
          <source>This happens because the pointer returned by &lt;code&gt;as_ptr&lt;/code&gt; does not carry any lifetime information and the &lt;a href=&quot;struct.cstring&quot;&gt;&lt;code&gt;CString&lt;/code&gt;&lt;/a&gt; is deallocated immediately after the &lt;code&gt;CString::new(&quot;Hello&quot;).expect(&quot;CString::new failed&quot;).as_ptr()&lt;/code&gt; expression is evaluated. To fix the problem, bind the &lt;code&gt;CString&lt;/code&gt; to a local variable:</source>
          <target state="translated">返されたポインタので、これが起こる &lt;code&gt;as_ptr&lt;/code&gt; は、任意の寿命情報を運ばないと&lt;a href=&quot;struct.cstring&quot;&gt; &lt;code&gt;CString&lt;/code&gt; &lt;/a&gt;直後に割り当て解除され &lt;code&gt;CString::new(&quot;Hello&quot;).expect(&quot;CString::new failed&quot;).as_ptr()&lt;/code&gt; 式が評価されます。この問題を修正するには、 &lt;code&gt;CString&lt;/code&gt; をローカル変数にバインドします。</target>
        </trans-unit>
        <trans-unit id="6047b82331195849fba72da79674452a117df64d" translate="yes" xml:space="preserve">
          <source>This happens when a trait has a method like the following:</source>
          <target state="translated">これは、形質が以下のような方法を持っている場合に起こります。</target>
        </trans-unit>
        <trans-unit id="863bad715d4f6d1bd75efa3884a2cc5b250ca381" translate="yes" xml:space="preserve">
          <source>This has the same behavior as the &lt;a href=&quot;../string/struct.string#method.push_str&quot;&gt;&lt;code&gt;push_str&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">これは、&lt;a href=&quot;../string/struct.string#method.push_str&quot;&gt; &lt;code&gt;push_str&lt;/code&gt; &lt;/a&gt;メソッドと同じ動作です。</target>
        </trans-unit>
        <trans-unit id="6a3c452ab4ee63f33d895b0f991faaa23887feb8" translate="yes" xml:space="preserve">
          <source>This has the same behavior as the &lt;a href=&quot;struct.string#method.push_str&quot;&gt;&lt;code&gt;push_str&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">これは、&lt;a href=&quot;struct.string#method.push_str&quot;&gt; &lt;code&gt;push_str&lt;/code&gt; &lt;/a&gt;メソッドと同じ動作です。</target>
        </trans-unit>
        <trans-unit id="b58a8c2add590746e5048b4f132cbbc19047500f" translate="yes" xml:space="preserve">
          <source>This has the same effect as &lt;a href=&quot;union.maybeuninit#method.zeroed&quot;&gt;&lt;code&gt;MaybeUninit::zeroed().assume_init()&lt;/code&gt;&lt;/a&gt;. It is useful for FFI sometimes, but should generally be avoided.</source>
          <target state="translated">これは&lt;a href=&quot;union.maybeuninit#method.zeroed&quot;&gt; &lt;code&gt;MaybeUninit::zeroed().assume_init()&lt;/code&gt; &lt;/a&gt;。assume_init（）と同じ効果があります。FFIの場合に役立ちますが、通常は避けてください。</target>
        </trans-unit>
        <trans-unit id="c7eb4340faf9e85d2da20b4776ce2bebbe29c12a" translate="yes" xml:space="preserve">
          <source>This has the same lifetime as the original slice, and so the iterator can continue to be used while this exists.</source>
          <target state="translated">これは元のスライスと同じライフタイムを持つので、これが存在する間はイテレータを使用し続けることができます。</target>
        </trans-unit>
        <trans-unit id="65d35375dd8acb85bc9eba434584e8313fb0a245" translate="yes" xml:space="preserve">
          <source>This hasher is not guaranteed to be the same as all other &lt;code&gt;DefaultHasher&lt;/code&gt; instances, but is the same as all other &lt;code&gt;DefaultHasher&lt;/code&gt; instances created through &lt;code&gt;new&lt;/code&gt; or &lt;code&gt;default&lt;/code&gt;.</source>
          <target state="translated">このハッシュは、他のすべての &lt;code&gt;DefaultHasher&lt;/code&gt; インスタンスと同じであるとは限りませんが、 &lt;code&gt;new&lt;/code&gt; または &lt;code&gt;default&lt;/code&gt; で作成された他のすべての &lt;code&gt;DefaultHasher&lt;/code&gt; インスタンスと同じです。</target>
        </trans-unit>
        <trans-unit id="90feee4915436dfe2be982f4c15a9da7834c5004" translate="yes" xml:space="preserve">
          <source>This implementation is specialized for slice iterators, where it uses &lt;a href=&quot;../primitive.slice#method.copy_from_slice&quot;&gt;&lt;code&gt;copy_from_slice&lt;/code&gt;&lt;/a&gt; to append the entire slice at once.</source>
          <target state="translated">この実装はスライス反復子に特化しており、&lt;a href=&quot;../primitive.slice#method.copy_from_slice&quot;&gt; &lt;code&gt;copy_from_slice&lt;/code&gt; &lt;/a&gt;を使用して一度にスライス全体を追加します。</target>
        </trans-unit>
        <trans-unit id="0b6b99c1c8632506c647afb83336adc1ee13b73f" translate="yes" xml:space="preserve">
          <source>This information corresponds to the &lt;code&gt;sin6_flowinfo&lt;/code&gt; field in C's &lt;code&gt;netinet/in.h&lt;/code&gt;, as specified in &lt;a href=&quot;https://tools.ietf.org/html/rfc2553#section-3.3&quot;&gt;IETF RFC 2553, Section 3.3&lt;/a&gt;. It combines information about the flow label and the traffic class as specified in &lt;a href=&quot;https://tools.ietf.org/html/rfc2460&quot;&gt;IETF RFC 2460&lt;/a&gt;, respectively &lt;a href=&quot;https://tools.ietf.org/html/rfc2460#section-6&quot;&gt;Section 6&lt;/a&gt; and &lt;a href=&quot;https://tools.ietf.org/html/rfc2460#section-7&quot;&gt;Section 7&lt;/a&gt;.</source>
          <target state="translated">この情報は、&lt;a href=&quot;https://tools.ietf.org/html/rfc2553#section-3.3&quot;&gt;IETF RFC 2553、セクション3.3で&lt;/a&gt;指定されているように、Cの &lt;code&gt;netinet/in.h&lt;/code&gt; の &lt;code&gt;sin6_flowinfo&lt;/code&gt; フィールドに対応しています。&lt;a href=&quot;https://tools.ietf.org/html/rfc2460&quot;&gt;IETF RFC 2460&lt;/a&gt;でそれぞれ&lt;a href=&quot;https://tools.ietf.org/html/rfc2460#section-6&quot;&gt;セクション6&lt;/a&gt;と&lt;a href=&quot;https://tools.ietf.org/html/rfc2460#section-7&quot;&gt;セクション7に&lt;/a&gt;指定されているように、フローラベルとトラフィッククラスに関する情報を組み合わせます。</target>
        </trans-unit>
        <trans-unit id="3af31b70c11ef4a3b608a04beaf7ba9284e068c3" translate="yes" xml:space="preserve">
          <source>This information corresponds to the &lt;code&gt;sin6_scope_id&lt;/code&gt; field in C's &lt;code&gt;netinet/in.h&lt;/code&gt;, as specified in &lt;a href=&quot;https://tools.ietf.org/html/rfc2553#section-3.3&quot;&gt;IETF RFC 2553, Section 3.3&lt;/a&gt;.</source>
          <target state="translated">この情報は、&lt;a href=&quot;https://tools.ietf.org/html/rfc2553#section-3.3&quot;&gt;IETF RFC 2553、セクション3.3で&lt;/a&gt;指定されているCの &lt;code&gt;netinet/in.h&lt;/code&gt; の &lt;code&gt;sin6_scope_id&lt;/code&gt; フィールドに対応しています。</target>
        </trans-unit>
        <trans-unit id="ec67651ac375d4791b71fe8abc3629f814f16ccf" translate="yes" xml:space="preserve">
          <source>This information is a hint and implementations are not required to preserve it.</source>
          <target state="translated">この情報はヒントであり、実装は保存する必要はありません。</target>
        </trans-unit>
        <trans-unit id="63ed31757d724807cc9238c95c5432cd39c9735a" translate="yes" xml:space="preserve">
          <source>This instance may reach &lt;code&gt;EOF&lt;/code&gt; after reading fewer bytes than indicated by this method if the underlying &lt;a href=&quot;trait.read&quot;&gt;&lt;code&gt;Read&lt;/code&gt;&lt;/a&gt; instance reaches EOF.</source>
          <target state="translated">基になる&lt;a href=&quot;trait.read&quot;&gt; &lt;code&gt;Read&lt;/code&gt; &lt;/a&gt;インスタンスがEOFに達した場合、このインスタンスは、このメソッドで示されるよりも少ないバイト数を読み取った後、 &lt;code&gt;EOF&lt;/code&gt; に達する可能性があります。</target>
        </trans-unit>
        <trans-unit id="3e890a8fb1ba0d0cd9928016f0c75ede3fcfd9a0" translate="yes" xml:space="preserve">
          <source>This intrinsic does not have a stable counterpart.</source>
          <target state="translated">この本質的なものには、安定した相手がいません。</target>
        </trans-unit>
        <trans-unit id="b4ee533fa428c42a5629056a56b7692fc9445d45" translate="yes" xml:space="preserve">
          <source>This intrinsic should not be used outside of the compiler.</source>
          <target state="translated">この本質的なものは、コンパイラの外で使用してはいけません。</target>
        </trans-unit>
        <trans-unit id="1fa64cf4a4634521305dce783239fdfdeec13027" translate="yes" xml:space="preserve">
          <source>This is a &quot;helper marker trait&quot; used to provide impl blocks for the &lt;a href=&quot;trait.unwindsafe&quot;&gt;&lt;code&gt;UnwindSafe&lt;/code&gt;&lt;/a&gt; trait, for more information see that documentation.</source>
          <target state="translated">これは、&lt;a href=&quot;trait.unwindsafe&quot;&gt; &lt;code&gt;UnwindSafe&lt;/code&gt; &lt;/a&gt;トレイトの実装ブロックを提供するために使用される「ヘルパーマーカートレイト」です。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="dca2a0780f1a583478627dae521a3cd19fa18332" translate="yes" xml:space="preserve">
          <source>This is a convenience function for using &lt;a href=&quot;struct.file#method.create&quot;&gt;&lt;code&gt;File::create&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../io/trait.write#method.write_all&quot;&gt;&lt;code&gt;write_all&lt;/code&gt;&lt;/a&gt; with fewer imports.</source>
          <target state="translated">これは、インポートを減らして&lt;a href=&quot;struct.file#method.create&quot;&gt; &lt;code&gt;File::create&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;../io/trait.write#method.write_all&quot;&gt; &lt;code&gt;write_all&lt;/code&gt; &lt;/a&gt;を使用するための便利な関数です。</target>
        </trans-unit>
        <trans-unit id="8a3e47d631d6356541264338a28634452afdd7c3" translate="yes" xml:space="preserve">
          <source>This is a convenience function for using &lt;a href=&quot;struct.file#method.open&quot;&gt;&lt;code&gt;File::open&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../io/trait.read#method.read_to_end&quot;&gt;&lt;code&gt;read_to_end&lt;/code&gt;&lt;/a&gt; with fewer imports and without an intermediate variable. It pre-allocates a buffer based on the file size when available, so it is generally faster than reading into a vector created with &lt;a href=&quot;../vec/struct.vec#method.new&quot;&gt;&lt;code&gt;Vec::new()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これは、&lt;a href=&quot;struct.file#method.open&quot;&gt; &lt;code&gt;File::open&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;../io/trait.read#method.read_to_end&quot;&gt; &lt;code&gt;read_to_end&lt;/code&gt; &lt;/a&gt;をインポート数が少なく、中間変数なしで使用するための便利な関数です。利用可能な場合はファイルサイズに基づいてバッファを事前に割り当てるため、通常、&lt;a href=&quot;../vec/struct.vec#method.new&quot;&gt; &lt;code&gt;Vec::new()&lt;/code&gt; &lt;/a&gt;作成されたベクターに読み込むよりも高速です。</target>
        </trans-unit>
        <trans-unit id="187131cff0eb9e697908b49a26f702ec337c3799" translate="yes" xml:space="preserve">
          <source>This is a convenience function for using &lt;a href=&quot;struct.file#method.open&quot;&gt;&lt;code&gt;File::open&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../io/trait.read#method.read_to_end&quot;&gt;&lt;code&gt;read_to_end&lt;/code&gt;&lt;/a&gt; with fewer imports and without an intermediate variable. It pre-allocates a buffer based on the file size when available, so it is generally faster than reading into a vector created with &lt;code&gt;Vec::new()&lt;/code&gt;.</source>
          <target state="translated">これは、インポートが少なく、中間変数がない&lt;a href=&quot;struct.file#method.open&quot;&gt; &lt;code&gt;File::open&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;../io/trait.read#method.read_to_end&quot;&gt; &lt;code&gt;read_to_end&lt;/code&gt; &lt;/a&gt;を使用するための便利な関数です。利用可能な場合は、ファイルサイズに基づいてバッファを事前に割り当てるため、通常は &lt;code&gt;Vec::new()&lt;/code&gt; 作成されたベクターに読み込むよりも高速です。</target>
        </trans-unit>
        <trans-unit id="4ad096cd1a7e9fdbf72506102cbfdd2fbcf9b981" translate="yes" xml:space="preserve">
          <source>This is a convenience function for using &lt;a href=&quot;struct.file#method.open&quot;&gt;&lt;code&gt;File::open&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../io/trait.read#method.read_to_string&quot;&gt;&lt;code&gt;read_to_string&lt;/code&gt;&lt;/a&gt; with fewer imports and without an intermediate variable. It pre-allocates a buffer based on the file size when available, so it is generally faster than reading into a string created with &lt;a href=&quot;../string/struct.string#method.new&quot;&gt;&lt;code&gt;String::new()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これは、&lt;a href=&quot;struct.file#method.open&quot;&gt; &lt;code&gt;File::open&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;../io/trait.read#method.read_to_string&quot;&gt; &lt;code&gt;read_to_string&lt;/code&gt; &lt;/a&gt;をインポート数が少なく、中間変数なしで使用するための便利な関数です。使用可能な場合はファイルサイズに基づいてバッファを事前に割り当てるため、通常、&lt;a href=&quot;../string/struct.string#method.new&quot;&gt; &lt;code&gt;String::new()&lt;/code&gt; &lt;/a&gt;作成された文字列を読み取るよりも高速です。</target>
        </trans-unit>
        <trans-unit id="9c7392177420bfa03e5c328d086366669dabd90c" translate="yes" xml:space="preserve">
          <source>This is a convenience function for using &lt;a href=&quot;struct.file#method.open&quot;&gt;&lt;code&gt;File::open&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../io/trait.read#method.read_to_string&quot;&gt;&lt;code&gt;read_to_string&lt;/code&gt;&lt;/a&gt; with fewer imports and without an intermediate variable. It pre-allocates a buffer based on the file size when available, so it is generally faster than reading into a string created with &lt;code&gt;String::new()&lt;/code&gt;.</source>
          <target state="translated">これは、インポートが少なく、中間変数がない&lt;a href=&quot;struct.file#method.open&quot;&gt; &lt;code&gt;File::open&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;../io/trait.read#method.read_to_string&quot;&gt; &lt;code&gt;read_to_string&lt;/code&gt; &lt;/a&gt;を使用するための便利な関数です。利用可能な場合はファイルサイズに基づいてバッファを事前に割り当てるため、一般に、 &lt;code&gt;String::new()&lt;/code&gt; 作成された文字列を読み取るよりも高速です。</target>
        </trans-unit>
        <trans-unit id="6368465bb72af615f875d8e839f3e68ea414aaaa" translate="yes" xml:space="preserve">
          <source>This is a convenience function that coerces errors to false. If you want to check errors, call &lt;a href=&quot;../fs/fn.metadata&quot;&gt;&lt;code&gt;fs::metadata&lt;/code&gt;&lt;/a&gt; and handle its &lt;a href=&quot;../result/enum.result&quot;&gt;&lt;code&gt;Result&lt;/code&gt;&lt;/a&gt;. Then call &lt;a href=&quot;../fs/struct.metadata#method.is_dir&quot;&gt;&lt;code&gt;fs::Metadata::is_dir&lt;/code&gt;&lt;/a&gt; if it was &lt;a href=&quot;../result/enum.result#variant.Ok&quot;&gt;&lt;code&gt;Ok&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これは、エラーをfalseに強制変換する便利な関数です。エラーを確認したい場合は、&lt;a href=&quot;../fs/fn.metadata&quot;&gt; &lt;code&gt;fs::metadata&lt;/code&gt; &lt;/a&gt;を呼び出してその&lt;a href=&quot;../result/enum.result&quot;&gt; &lt;code&gt;Result&lt;/code&gt; &lt;/a&gt;を処理します。次に、&lt;a href=&quot;../result/enum.result#variant.Ok&quot;&gt; &lt;code&gt;Ok&lt;/code&gt; &lt;/a&gt;場合は&lt;a href=&quot;../fs/struct.metadata#method.is_dir&quot;&gt; &lt;code&gt;fs::Metadata::is_dir&lt;/code&gt; &lt;/a&gt;呼び出します。</target>
        </trans-unit>
        <trans-unit id="8ec158d2dde1ce8ee75d1772394d851e65f39fd6" translate="yes" xml:space="preserve">
          <source>This is a convenience function that coerces errors to false. If you want to check errors, call &lt;a href=&quot;../fs/fn.metadata&quot;&gt;&lt;code&gt;fs::metadata&lt;/code&gt;&lt;/a&gt; and handle its &lt;a href=&quot;../result/enum.result&quot;&gt;&lt;code&gt;Result&lt;/code&gt;&lt;/a&gt;. Then call &lt;a href=&quot;../fs/struct.metadata#method.is_file&quot;&gt;&lt;code&gt;fs::Metadata::is_file&lt;/code&gt;&lt;/a&gt; if it was &lt;a href=&quot;../result/enum.result#variant.Ok&quot;&gt;&lt;code&gt;Ok&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これは、エラーをfalseに強制変換する便利な関数です。エラーを確認したい場合は、&lt;a href=&quot;../fs/fn.metadata&quot;&gt; &lt;code&gt;fs::metadata&lt;/code&gt; &lt;/a&gt;を呼び出してその&lt;a href=&quot;../result/enum.result&quot;&gt; &lt;code&gt;Result&lt;/code&gt; &lt;/a&gt;を処理します。次に、&lt;a href=&quot;../result/enum.result#variant.Ok&quot;&gt; &lt;code&gt;Ok&lt;/code&gt; &lt;/a&gt;場合は&lt;a href=&quot;../fs/struct.metadata#method.is_file&quot;&gt; &lt;code&gt;fs::Metadata::is_file&lt;/code&gt; &lt;/a&gt;呼び出します。</target>
        </trans-unit>
        <trans-unit id="2f680ca8918b755dd586b16c26d23dbb3dd42957" translate="yes" xml:space="preserve">
          <source>This is a convenience function that coerces errors to false. If you want to check errors, call &lt;a href=&quot;../fs/fn.metadata&quot;&gt;&lt;code&gt;fs::metadata&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これは、エラーをfalseに強制変換する便利な関数です。エラーを確認したい場合は、&lt;a href=&quot;../fs/fn.metadata&quot;&gt; &lt;code&gt;fs::metadata&lt;/code&gt; &lt;/a&gt;呼び出します。</target>
        </trans-unit>
        <trans-unit id="dac9be08ca6ab3c0d6956dc411e028285b59848d" translate="yes" xml:space="preserve">
          <source>This is a convenience function that coerces errors to false. If you want to check errors, call &lt;a href=&quot;../fs/fn.metadata&quot;&gt;fs::metadata&lt;/a&gt; and handle its Result. Then call &lt;a href=&quot;../fs/struct.metadata#method.is_dir&quot;&gt;fs::Metadata::is_dir&lt;/a&gt; if it was Ok.</source>
          <target state="translated">これはエラーをfalseに強制する便利な関数です。エラーをチェックしたい場合は、&lt;a href=&quot;../fs/fn.metadata&quot;&gt;fs :: metadata&lt;/a&gt;を呼び出し、その結果を処理します。次に、問題がなければ、&lt;a href=&quot;../fs/struct.metadata#method.is_dir&quot;&gt;fs :: Metadata :: is_dirを&lt;/a&gt;呼び出します。</target>
        </trans-unit>
        <trans-unit id="78d539aab76737f8cf396eefb6d1ce6f5b6f255b" translate="yes" xml:space="preserve">
          <source>This is a convenience function that coerces errors to false. If you want to check errors, call &lt;a href=&quot;../fs/fn.metadata&quot;&gt;fs::metadata&lt;/a&gt; and handle its Result. Then call &lt;a href=&quot;../fs/struct.metadata#method.is_file&quot;&gt;fs::Metadata::is_file&lt;/a&gt; if it was Ok.</source>
          <target state="translated">これはエラーをfalseに強制する便利な関数です。エラーをチェックしたい場合は、&lt;a href=&quot;../fs/fn.metadata&quot;&gt;fs :: metadata&lt;/a&gt;を呼び出し、その結果を処理します。次に、OKの場合は&lt;a href=&quot;../fs/struct.metadata#method.is_file&quot;&gt;fs :: Metadata :: is_fileを&lt;/a&gt;呼び出します。</target>
        </trans-unit>
        <trans-unit id="63bfc9edacf3bb27391de3d729c554b4c3c2df6a" translate="yes" xml:space="preserve">
          <source>This is a convenience function that coerces errors to false. If you want to check errors, call &lt;a href=&quot;../fs/fn.metadata&quot;&gt;fs::metadata&lt;/a&gt;.</source>
          <target state="translated">これはエラーをfalseに強制する便利な関数です。エラーをチェックしたい場合は、&lt;a href=&quot;../fs/fn.metadata&quot;&gt;fs :: metadataを&lt;/a&gt;呼び出します。</target>
        </trans-unit>
        <trans-unit id="748753921bdcefd01924d5e43ae2dad4f042e3b3" translate="yes" xml:space="preserve">
          <source>This is a cost-free conversion.</source>
          <target state="translated">これはコストのかからない変換です。</target>
        </trans-unit>
        <trans-unit id="0bed32ad8a4ac210351c4fe08ac569f4ede1369a" translate="yes" xml:space="preserve">
          <source>This is a curious macro used to safely pass around an opaque object describing the format string. This object does not require any heap allocations to create, and it only references information on the stack. Under the hood, all of the related macros are implemented in terms of this. First off, some example usage is:</source>
          <target state="translated">これは、フォーマット文字列を記述する不透明なオブジェクトを安全に渡すために使用される不思議なマクロです。このオブジェクトは、作成にヒープの割り当てを必要とせず、スタック上の情報を参照するだけです。裏では、関連するすべてのマクロはこれを利用して実装されています。まず、いくつかの使用例です。</target>
        </trans-unit>
        <trans-unit id="29fa7c971247c161eeccc64d10b730dfdf57cf6f" translate="yes" xml:space="preserve">
          <source>This is a curious macro which is used to safely pass around an opaque object describing the format string. This object does not require any heap allocations to create, and it only references information on the stack. Under the hood, all of the related macros are implemented in terms of this. First off, some example usage is:</source>
          <target state="translated">これは、フォーマット文字列を記述した不透明なオブジェクトを安全に渡すために使用される不思議なマクロです。このオブジェクトは、作成にヒープの割り当てを必要とせず、スタック上の情報を参照するだけです。裏では、関連するマクロはすべてこれを利用して実装されています。まず、いくつかの使用例です。</target>
        </trans-unit>
        <trans-unit id="a5cb34f6e2e869f23ba4b01f87c2789e85bd0de1" translate="yes" xml:space="preserve">
          <source>This is a generic method to go from &lt;code&gt;&amp;amp;Pin&amp;lt;Pointer&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt; to &lt;code&gt;Pin&amp;lt;&amp;amp;T&amp;gt;&lt;/code&gt;. It is safe because, as part of the contract of &lt;code&gt;Pin::new_unchecked&lt;/code&gt;, the pointee cannot move after &lt;code&gt;Pin&amp;lt;Pointer&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt; got created. &quot;Malicious&quot; implementations of &lt;code&gt;Pointer::Deref&lt;/code&gt; are likewise ruled out by the contract of &lt;code&gt;Pin::new_unchecked&lt;/code&gt;.</source>
          <target state="translated">これは、 &lt;code&gt;&amp;amp;Pin&amp;lt;Pointer&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt; から &lt;code&gt;Pin&amp;lt;&amp;amp;T&amp;gt;&lt;/code&gt; に移動するための一般的な方法です。 &lt;code&gt;Pin::new_unchecked&lt;/code&gt; コントラクトの一部として、 &lt;code&gt;Pin&amp;lt;Pointer&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt; が作成された後、指示先は移動できないため、安全です。 &lt;code&gt;Pointer::Deref&lt;/code&gt; &lt;code&gt;Pin::new_unchecked&lt;/code&gt; 「悪意のある」実装は、同様にPin :: new_uncheckedの契約によって除外されます。</target>
        </trans-unit>
        <trans-unit id="56c4f5951c7828ae5ee50cc814a919ce365cfc61" translate="yes" xml:space="preserve">
          <source>This is a generic method to go from &lt;code&gt;&amp;amp;mut Pin&amp;lt;Pointer&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt; to &lt;code&gt;Pin&amp;lt;&amp;amp;mut T&amp;gt;&lt;/code&gt;. It is safe because, as part of the contract of &lt;code&gt;Pin::new_unchecked&lt;/code&gt;, the pointee cannot move after &lt;code&gt;Pin&amp;lt;Pointer&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt; got created. &quot;Malicious&quot; implementations of &lt;code&gt;Pointer::DerefMut&lt;/code&gt; are likewise ruled out by the contract of &lt;code&gt;Pin::new_unchecked&lt;/code&gt;.</source>
          <target state="translated">これは、 &lt;code&gt;&amp;amp;mut Pin&amp;lt;Pointer&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt; から &lt;code&gt;Pin&amp;lt;&amp;amp;mut T&amp;gt;&lt;/code&gt; に移動するための一般的な方法です。 &lt;code&gt;Pin::new_unchecked&lt;/code&gt; コントラクトの一部として、 &lt;code&gt;Pin&amp;lt;Pointer&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt; が作成された後、指示先は移動できないため、安全です。 &lt;code&gt;Pointer::DerefMut&lt;/code&gt; 「悪意のある」実装は、同様に &lt;code&gt;Pin::new_unchecked&lt;/code&gt; 規約によって除外されます。</target>
        </trans-unit>
        <trans-unit id="89763ee5b7958c417ffa6362fe62836bd12504df" translate="yes" xml:space="preserve">
          <source>This is a great time to build a more substantial program to get used to reading and writing Rust code. So, in Chapter 2, we&amp;rsquo;ll build a guessing game program. If you would rather start by learning how common programming concepts work in Rust, see Chapter 3 and then return to Chapter 2.</source>
          <target state="translated">これは、Rustコードの読み書きに慣れるためのより充実したプログラムを構築する絶好の機会です。したがって、第2章では、推測ゲームプログラムを作成します。Rustでプログラミングの一般的な概念がどのように機能するかを学ぶことから始めたい場合は、第3章を参照してから第2章に戻ってください。</target>
        </trans-unit>
        <trans-unit id="b462da8b85a8420993ace33b35e2459c3b0f94de" translate="yes" xml:space="preserve">
          <source>This is a hack to workaround a limitation in our type-system.</source>
          <target state="translated">これは、私たちの型システムの制限を回避するためのハックです。</target>
        </trans-unit>
        <trans-unit id="88ca2eb8b4f8037d6f9bc35aac9a7c204a66255a" translate="yes" xml:space="preserve">
          <source>This is a larger example that implements &lt;a href=&quot;http://en.wikipedia.org/wiki/Dijkstra%27s_algorithm&quot;&gt;Dijkstra's algorithm&lt;/a&gt; to solve the &lt;a href=&quot;http://en.wikipedia.org/wiki/Shortest_path_problem&quot;&gt;shortest path problem&lt;/a&gt; on a &lt;a href=&quot;http://en.wikipedia.org/wiki/Directed_graph&quot;&gt;directed graph&lt;/a&gt;. It shows how to use &lt;a href=&quot;struct.binaryheap&quot;&gt;&lt;code&gt;BinaryHeap&lt;/code&gt;&lt;/a&gt; with custom types.</source>
          <target state="translated">これは、&lt;a href=&quot;http://en.wikipedia.org/wiki/Dijkstra%27s_algorithm&quot;&gt;ダイクストラのアルゴリズム&lt;/a&gt;を実装して&lt;a href=&quot;http://en.wikipedia.org/wiki/Directed_graph&quot;&gt;有向グラフ&lt;/a&gt;上の&lt;a href=&quot;http://en.wikipedia.org/wiki/Shortest_path_problem&quot;&gt;最短経路問題&lt;/a&gt;を解決する、より大きな例です。カスタムタイプで&lt;a href=&quot;struct.binaryheap&quot;&gt; &lt;code&gt;BinaryHeap&lt;/code&gt; &lt;/a&gt;を使用する方法を示します。</target>
        </trans-unit>
        <trans-unit id="0ce22a5b8db2ccd4642599318fe60aee2faa03ed" translate="yes" xml:space="preserve">
          <source>This is a larger example that implements &lt;a href=&quot;https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm&quot;&gt;Dijkstra's algorithm&lt;/a&gt; to solve the &lt;a href=&quot;https://en.wikipedia.org/wiki/Shortest_path_problem&quot;&gt;shortest path problem&lt;/a&gt; on a &lt;a href=&quot;https://en.wikipedia.org/wiki/Directed_graph&quot;&gt;directed graph&lt;/a&gt;. It shows how to use &lt;a href=&quot;../struct.binaryheap&quot;&gt;&lt;code&gt;BinaryHeap&lt;/code&gt;&lt;/a&gt; with custom types.</source>
          <target state="translated">これは、&lt;a href=&quot;https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm&quot;&gt;ダイクストラのアルゴリズム&lt;/a&gt;を実装して&lt;a href=&quot;https://en.wikipedia.org/wiki/Directed_graph&quot;&gt;有向グラフの&lt;/a&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Shortest_path_problem&quot;&gt;最短経路問題&lt;/a&gt;を解決する、より大きな例です。カスタムタイプで&lt;a href=&quot;../struct.binaryheap&quot;&gt; &lt;code&gt;BinaryHeap&lt;/code&gt; &lt;/a&gt;を使用する方法を示します。</target>
        </trans-unit>
        <trans-unit id="26c511330b7bfd645fe1ae62ba92f808907b836b" translate="yes" xml:space="preserve">
          <source>This is a low-level operation that maintains none of the normal invariants of the type. Normally changing the length of a vector is done using one of the safe operations instead, such as &lt;a href=&quot;#method.truncate&quot;&gt;&lt;code&gt;truncate&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#method.resize&quot;&gt;&lt;code&gt;resize&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#method.extend-1&quot;&gt;&lt;code&gt;extend&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;#method.clear&quot;&gt;&lt;code&gt;clear&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これは、タイプの通常の不変条件を維持しない低レベルの操作です。通常、ベクトルの長さの&lt;a href=&quot;#method.resize&quot;&gt; &lt;code&gt;resize&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#method.truncate&quot;&gt; &lt;code&gt;truncate&lt;/code&gt; &lt;/a&gt;、サイズ変更、&lt;a href=&quot;#method.extend-1&quot;&gt; &lt;code&gt;extend&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#method.clear&quot;&gt; &lt;code&gt;clear&lt;/code&gt; &lt;/a&gt;などの安全な操作のいずれかを使用して行われます。</target>
        </trans-unit>
        <trans-unit id="f83da737778161016a797e059513bd95b7a1b562" translate="yes" xml:space="preserve">
          <source>This is a low-level operation that maintains none of the normal invariants of the type. Normally changing the length of a vector is done using one of the safe operations instead, such as &lt;a href=&quot;struct.vec#method.truncate&quot;&gt;&lt;code&gt;truncate&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;struct.vec#method.resize&quot;&gt;&lt;code&gt;resize&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../iter/trait.extend#tymethod.extend&quot;&gt;&lt;code&gt;extend&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;struct.vec#method.clear&quot;&gt;&lt;code&gt;clear&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これは、このタイプの正規不変量を維持しない低レベルの操作です。通常、ベクトルの長さの変更は、代わりに、&lt;a href=&quot;struct.vec#method.truncate&quot;&gt; &lt;code&gt;truncate&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;struct.vec#method.resize&quot;&gt; &lt;code&gt;resize&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../iter/trait.extend#tymethod.extend&quot;&gt; &lt;code&gt;extend&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;struct.vec#method.clear&quot;&gt; &lt;code&gt;clear&lt;/code&gt; &lt;/a&gt;などの安全な操作の1つを使用して行われます。</target>
        </trans-unit>
        <trans-unit id="e5a83358209b9d321dd626221b446c20e90a835f" translate="yes" xml:space="preserve">
          <source>This is a lower-level version of &lt;a href=&quot;enum.entry&quot;&gt;&lt;code&gt;Entry&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これは&lt;a href=&quot;enum.entry&quot;&gt; &lt;code&gt;Entry&lt;/code&gt; の&lt;/a&gt;下位バージョンです。</target>
        </trans-unit>
        <trans-unit id="d779513c1e09f65a072541be686df3371c86d19d" translate="yes" xml:space="preserve">
          <source>This is a minimal HTML5 document with a heading and some text. To return this from the server when a request is received, we&amp;rsquo;ll modify &lt;code&gt;handle_connection&lt;/code&gt; as shown in Listing 20-5 to read the HTML file, add it to the response as a body, and send it.</source>
          <target state="translated">これは、見出しとテキストを含む最小限のHTML5ドキュメントです。リクエストが受信されたときにサーバーからこれを返すために、リスト20-5に示すように &lt;code&gt;handle_connection&lt;/code&gt; を変更してHTMLファイルを読み取り、本文として応答に追加して送信します。</target>
        </trans-unit>
        <trans-unit id="b1799e7b3d355702a52652e9f785dc24c41920f9" translate="yes" xml:space="preserve">
          <source>This is a parameter for the &quot;minimum width&quot; that the format should take up. If the value's string does not fill up this many characters, then the padding specified by fill/alignment will be used to take up the required space (see below).</source>
          <target state="translated">これは、フォーマットが占有すべき「最小幅」のパラメータです。値の文字列がこれだけの文字数で埋まらない場合は、fill/alignmentで指定されたパディングが必要なスペースを占有するために使用されます(後述)。</target>
        </trans-unit>
        <trans-unit id="3a7bcaac4b774ad822d1d354cccc21a6015fca6e" translate="yes" xml:space="preserve">
          <source>This is a parameter for the &quot;minimum width&quot; that the format should take up. If the value's string does not fill up this many characters, then the padding specified by fill/alignment will be used to take up the required space.</source>
          <target state="translated">これは、フォーマットが占有すべき「最小幅」のパラメータです。値の文字列がこれだけの文字数で埋まらない場合は、fill/alignmentで指定されたパディングが必要なスペースを占有するために使用されます。</target>
        </trans-unit>
        <trans-unit id="b084ef158428b63f0e7eeac68dee8b3d095bdb3c" translate="yes" xml:space="preserve">
          <source>This is a situation in which interior mutability can help! We&amp;rsquo;ll store the &lt;code&gt;sent_messages&lt;/code&gt; within a &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt;, and then the &lt;code&gt;send&lt;/code&gt; message will be able to modify &lt;code&gt;sent_messages&lt;/code&gt; to store the messages we&amp;rsquo;ve seen. Listing 15-22 shows what that looks like:</source>
          <target state="translated">これは、内部の可変性が役立つ状況です。私たちは、保存します &lt;code&gt;sent_messages&lt;/code&gt; を内 &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; 、その後、 &lt;code&gt;send&lt;/code&gt; メッセージは、変更することができるようになります &lt;code&gt;sent_messages&lt;/code&gt; を私たちが見てきたメッセージを格納します。リスト15-22はそれがどのように見えるかを示しています：</target>
        </trans-unit>
        <trans-unit id="871d091695de2003c7e2185527248e9604155d93" translate="yes" xml:space="preserve">
          <source>This is a syntax error at the level of attribute declarations. The proper syntax for &lt;code&gt;align&lt;/code&gt; representation hint is the following:</source>
          <target state="translated">これは、属性宣言のレベルでの構文エラーです。 &lt;code&gt;align&lt;/code&gt; 表現ヒントの適切な構文は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="e698a362ad50285269b0f450993154391ed3fb9c" translate="yes" xml:space="preserve">
          <source>This is a syntax error at the level of attribute declarations. The proper syntax for macro imports is the following:</source>
          <target state="translated">これは、属性宣言のレベルでの構文エラーです。マクロのインポートの適切な構文は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="7207d1f263b95ee330100ad60d168c6bbd00e341" translate="yes" xml:space="preserve">
          <source>This is a very simple case, of course. In more complex cases, we may wish to have more than one reference to the value that was borrowed -- in those cases, something like the &lt;code&gt;Rc&lt;/code&gt; or &lt;code&gt;Arc&lt;/code&gt; types may be useful.</source>
          <target state="translated">もちろん、これは非常に単純なケースです。より複雑なケースでは、借用された値への複数の参照が必要になる場合があります。これらのケースでは、 &lt;code&gt;Rc&lt;/code&gt; または &lt;code&gt;Arc&lt;/code&gt; タイプなどが役立つ場合があります。</target>
        </trans-unit>
        <trans-unit id="795aa426a1aadc3299f800d117f15424e179c91c" translate="yes" xml:space="preserve">
          <source>This is a wrapper around a kind of pointer which makes that pointer &quot;pin&quot; its value in place, preventing the value referenced by that pointer from being moved unless it implements &lt;a href=&quot;../marker/trait.unpin&quot;&gt;&lt;code&gt;Unpin&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これは、ある種のポインターのラッパーであり、そのポインターをその値に「固定」し、そのポインターによって参照される値が&lt;a href=&quot;../marker/trait.unpin&quot;&gt; &lt;code&gt;Unpin&lt;/code&gt; を&lt;/a&gt;実装しない限り移動しないようにします。</target>
        </trans-unit>
        <trans-unit id="40cc1dd050d81853f1d6473844a8f5105ed4ba71" translate="yes" xml:space="preserve">
          <source>This is also available via &lt;a href=&quot;../convert/trait.from&quot;&gt;&lt;code&gt;From&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これは&lt;a href=&quot;../convert/trait.from&quot;&gt; &lt;code&gt;From&lt;/code&gt; から&lt;/a&gt;も利用できます。</target>
        </trans-unit>
        <trans-unit id="69c7de76e4d6cac4ead699615a01132090109223" translate="yes" xml:space="preserve">
          <source>This is an &lt;code&gt;O(n)&lt;/code&gt; operation as it requires copying every element in the buffer.</source>
          <target state="translated">バッファ内のすべての要素をコピーする必要があるため、これは &lt;code&gt;O(n)&lt;/code&gt; 操作です。</target>
        </trans-unit>
        <trans-unit id="7714852846e41026b7148ab604a67c761a44e811" translate="yes" xml:space="preserve">
          <source>This is an &lt;code&gt;O(n)&lt;/code&gt; operation, as it requires copying every element in the buffer.</source>
          <target state="translated">バッファ内のすべての要素をコピーする必要があるため、これは &lt;code&gt;O(n)&lt;/code&gt; 操作です。</target>
        </trans-unit>
        <trans-unit id="0851cea6a2c1ead7bc3e7afcac1e76a989dd5af9" translate="yes" xml:space="preserve">
          <source>This is an &lt;em&gt;O&lt;/em&gt;(&lt;em&gt;n&lt;/em&gt;) operation as it requires copying every element in the buffer.</source>
          <target state="translated">バッファ内のすべての要素をコピーする必要があるため、これは&lt;em&gt;O&lt;/em&gt;（&lt;em&gt;n&lt;/em&gt;）操作です。</target>
        </trans-unit>
        <trans-unit id="ebfdb05e0c25e262e85513236d16ce28096eaa2c" translate="yes" xml:space="preserve">
          <source>This is an &lt;em&gt;O&lt;/em&gt;(&lt;em&gt;n&lt;/em&gt;) operation, as it requires copying every element in the buffer.</source>
          <target state="translated">バッファ内のすべての要素をコピーする必要があるため、これは&lt;em&gt;O&lt;/em&gt;（&lt;em&gt;n&lt;/em&gt;）操作です。</target>
        </trans-unit>
        <trans-unit id="e7773930b7607b5b74b44eb47accc2cfca7d33e4" translate="yes" xml:space="preserve">
          <source>This is an &lt;em&gt;unsized&lt;/em&gt; type, meaning that it must always be used behind a pointer like &lt;code&gt;&amp;amp;&lt;/code&gt; or &lt;a href=&quot;../boxed/struct.box&quot;&gt;&lt;code&gt;Box&lt;/code&gt;&lt;/a&gt;. For an owned version of this type, see &lt;a href=&quot;struct.pathbuf&quot;&gt;&lt;code&gt;PathBuf&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これは&lt;em&gt;サイズのない&lt;/em&gt;型です。つまり、常に &lt;code&gt;&amp;amp;&lt;/code&gt; や&lt;a href=&quot;../boxed/struct.box&quot;&gt; &lt;code&gt;Box&lt;/code&gt; &lt;/a&gt;などのポインターの後ろで使用する必要があります。このタイプの所有バージョンについては、&lt;a href=&quot;struct.pathbuf&quot;&gt; &lt;code&gt;PathBuf&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="ae5b715f0a76526280a5abae050e91bd520680ba" translate="yes" xml:space="preserve">
          <source>This is an absolute path starting with &lt;code&gt;std&lt;/code&gt;, the name of the standard library crate.</source>
          <target state="translated">これは、標準ライブラリクレートの名前である &lt;code&gt;std&lt;/code&gt; で始まる絶対パスです。</target>
        </trans-unit>
        <trans-unit id="fb3851cbc0fb3af560d20b0226cbd7a0adc72483" translate="yes" xml:space="preserve">
          <source>This is an alias to &lt;a href=&quot;../fs/fn.canonicalize&quot;&gt;&lt;code&gt;fs::canonicalize&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これは&lt;a href=&quot;../fs/fn.canonicalize&quot;&gt; &lt;code&gt;fs::canonicalize&lt;/code&gt; &lt;/a&gt;エイリアスです。</target>
        </trans-unit>
        <trans-unit id="ccff757092656f4cd5645f893d07b3a2270144b9" translate="yes" xml:space="preserve">
          <source>This is an alias to &lt;a href=&quot;../fs/fn.metadata&quot;&gt;&lt;code&gt;fs::metadata&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これは&lt;a href=&quot;../fs/fn.metadata&quot;&gt; &lt;code&gt;fs::metadata&lt;/code&gt; &lt;/a&gt;エイリアスです。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
