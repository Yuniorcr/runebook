<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="rust">
    <body>
      <group id="rust">
        <trans-unit id="15171a122c9ce22a8b1a51961d40b1161cecfb6b" translate="yes" xml:space="preserve">
          <source>Both the lower- and upper-bounds (&lt;code&gt;l&lt;/code&gt; and &lt;code&gt;u&lt;/code&gt; respectively) are provided, because an allocator based on size classes could misbehave if one attempts to deallocate a block without providing a correct value for its size (i.e., one within the range &lt;code&gt;[l, u]&lt;/code&gt;).</source>
          <target state="translated">下限と上限の両方（それぞれ &lt;code&gt;l&lt;/code&gt; と &lt;code&gt;u&lt;/code&gt; ）が提供されます。これは、サイズクラスに基づくアロケータが、サイズの正しい値（つまり、範囲 &lt;code&gt;[l, u]&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="98967fc7894aa4615d5bff073afe78f05a767908" translate="yes" xml:space="preserve">
          <source>Both the reading and the writing portions of the &lt;a href=&quot;struct.tcpstream&quot;&gt;&lt;code&gt;TcpStream&lt;/code&gt;&lt;/a&gt; should be shut down.</source>
          <target state="translated">&lt;a href=&quot;struct.tcpstream&quot;&gt; &lt;code&gt;TcpStream&lt;/code&gt; &lt;/a&gt;の読み取り部分と書き込み部分の両方をシャットダウンする必要があります。</target>
        </trans-unit>
        <trans-unit id="c7bb49751d5e5b9335e672e163e91914b0f06be3" translate="yes" xml:space="preserve">
          <source>Both the stack and the heap are parts of memory that are available to your code to use at runtime, but they are structured in different ways. The stack stores values in the order it gets them and removes the values in the opposite order. This is referred to as &lt;em&gt;last in, first out&lt;/em&gt;. Think of a stack of plates: when you add more plates, you put them on top of the pile, and when you need a plate, you take one off the top. Adding or removing plates from the middle or bottom wouldn&amp;rsquo;t work as well! Adding data is called &lt;em&gt;pushing onto the stack&lt;/em&gt;, and removing data is called &lt;em&gt;popping off the stack&lt;/em&gt;.</source>
          <target state="translated">スタックとヒープはどちらも、実行時にコードで使用できるメモリの一部ですが、構造は異なります。スタックは値を取得した順序で格納し、逆の順序で値を削除します。これは後入れ先出しと呼ば&lt;em&gt;れ&lt;/em&gt;ます。プレートのスタックについて考えてください。プレートを追加するときは、それらをパイルの一番上に置き、プレートが必要なときは、プレートを上から外します。中央または下部からプレートを追加または削除することもできません。データの追加&lt;em&gt;はスタックへのプッシュ&lt;/em&gt;と呼ば&lt;em&gt;れ、&lt;/em&gt;データの削除&lt;em&gt;はスタックからのポップ&lt;/em&gt;と呼ばれ&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="0d50912827dc83752805291122efdab8614525af" translate="yes" xml:space="preserve">
          <source>Both the starting and other pointer must be either in bounds or one byte past the end of the same allocated object.</source>
          <target state="translated">開始ポインタと他のポインタの両方が境界内にあるか、同じ割り当てられたオブジェクトの終了点を1バイト過ぎていなければなりません。</target>
        </trans-unit>
        <trans-unit id="d01b29b32d289e0c8b9a18df5a84772808d7bfc2" translate="yes" xml:space="preserve">
          <source>Both the starting and other pointer must be either in bounds or one byte past the end of the same allocated object. Note that in Rust, every (stack-allocated) variable is considered a separate allocated object.</source>
          <target state="translated">開始ポインタと他のポインタの両方が、同じ割り当てられたオブジェクトの終端から1バイト以上離れているか、境界内にある必要があります。Rust では、すべての (スタック割り当てされた)変数は別個の割り当てオブジェクトとみなされることに注意してください。</target>
        </trans-unit>
        <trans-unit id="72784f6c1c0665f0bf4dbcd1fd7585be3cfa702f" translate="yes" xml:space="preserve">
          <source>Both the starting and resulting pointer must be either in bounds or one byte past the end of an allocated object. If either pointer is out of bounds or arithmetic overflow occurs then any further use of the returned value will result in undefined behavior.</source>
          <target state="translated">開始ポインタと結果のポインタは、どちらも範囲内にあるか、または割り当てられたオブジェクトの終わりを 1 バイト過ぎていなければなりません。どちらかのポインタが範囲外であったり、算術オーバーフローが発生した場合は、それ以上の値の使用は未定義の動作となります。</target>
        </trans-unit>
        <trans-unit id="ab5604b532321bee04b244b342d737f8189eea86" translate="yes" xml:space="preserve">
          <source>Both the starting and resulting pointer must be either in bounds or one byte past the end of the same allocated object.</source>
          <target state="translated">開始ポインタと結果のポインタのどちらも、同じ割り当てられたオブジェクトの終端から1バイト以上離れているか、境界内にある必要があります。</target>
        </trans-unit>
        <trans-unit id="b2aa47636e98a60617bcdd3e67a5924dfb004f66" translate="yes" xml:space="preserve">
          <source>Both the starting and resulting pointer must be either in bounds or one byte past the end of the same allocated object. Note that in Rust, every (stack-allocated) variable is considered a separate allocated object.</source>
          <target state="translated">開始ポインタと結果のポインタは、どちらも境界内にあるか、同じ割り当てられたオブジェクトの終端から1バイト以上離れていなければなりません。Rust では、すべての (スタック割り当てされた)変数は別個の割り当てオブジェクトとみなされることに注意してください。</target>
        </trans-unit>
        <trans-unit id="66fee1cf29e97c8fc0875ae5e9908b627fd1605d" translate="yes" xml:space="preserve">
          <source>Both types must have the same size. Neither the original, nor the result, may be an &lt;a href=&quot;https://doc.rust-lang.org/nomicon/what-unsafe-does.html&quot;&gt;invalid value&lt;/a&gt;.</source>
          <target state="translated">両方のタイプは同じサイズでなければなりません。元の&lt;a href=&quot;https://doc.rust-lang.org/nomicon/what-unsafe-does.html&quot;&gt;値&lt;/a&gt;も結果も無効な値になることはありません。</target>
        </trans-unit>
        <trans-unit id="2c346acf685cb1f6817015d7708b959e84444f26" translate="yes" xml:space="preserve">
          <source>Bound</source>
          <target state="translated">Bound</target>
        </trans-unit>
        <trans-unit id="6b7a8fef068d73e848dac8523afae549fc821d96" translate="yes" xml:space="preserve">
          <source>Bound::borrow</source>
          <target state="translated">Bound::borrow</target>
        </trans-unit>
        <trans-unit id="18bb2e890d75080b556aef676184c5919be5992a" translate="yes" xml:space="preserve">
          <source>Bound::borrow_mut</source>
          <target state="translated">Bound::borrow_mut</target>
        </trans-unit>
        <trans-unit id="377e882cd7fc9a872bb54ce900229dd706dfc18e" translate="yes" xml:space="preserve">
          <source>Bound::clone</source>
          <target state="translated">Bound::clone</target>
        </trans-unit>
        <trans-unit id="27441f23a3225df9857b23126eebcbeaa6dcfa57" translate="yes" xml:space="preserve">
          <source>Bound::clone_from</source>
          <target state="translated">Bound::clone_from</target>
        </trans-unit>
        <trans-unit id="d4f69fa455be1a2d7f74f09dcf28628a95d81806" translate="yes" xml:space="preserve">
          <source>Bound::clone_into</source>
          <target state="translated">Bound::clone_into</target>
        </trans-unit>
        <trans-unit id="252db2d859de80913734f1d7a97d46b455067071" translate="yes" xml:space="preserve">
          <source>Bound::cloned</source>
          <target state="translated">Bound::cloned</target>
        </trans-unit>
        <trans-unit id="46c76647f9ac933b457df321f87cbafee078c04b" translate="yes" xml:space="preserve">
          <source>Bound::eq</source>
          <target state="translated">Bound::eq</target>
        </trans-unit>
        <trans-unit id="109b368628394a6771e9026bb249cb9a770aa495" translate="yes" xml:space="preserve">
          <source>Bound::fmt</source>
          <target state="translated">Bound::fmt</target>
        </trans-unit>
        <trans-unit id="d2a47e1914c25c25b3e40fc39fb12d33547d7e82" translate="yes" xml:space="preserve">
          <source>Bound::from</source>
          <target state="translated">Bound::from</target>
        </trans-unit>
        <trans-unit id="ba919ff9d1df1744fb627fa7855b8f05cc2b77ed" translate="yes" xml:space="preserve">
          <source>Bound::hash</source>
          <target state="translated">Bound::hash</target>
        </trans-unit>
        <trans-unit id="5a473f87e1bb852dc398c279b415db545cd4b24e" translate="yes" xml:space="preserve">
          <source>Bound::hash_slice</source>
          <target state="translated">Bound::hash_slice</target>
        </trans-unit>
        <trans-unit id="54778a9e486243aa16573515109523bbf492d0d1" translate="yes" xml:space="preserve">
          <source>Bound::into</source>
          <target state="translated">Bound::into</target>
        </trans-unit>
        <trans-unit id="dedfd5e96791c9889a42b174f98bd419bce5e68f" translate="yes" xml:space="preserve">
          <source>Bound::ne</source>
          <target state="translated">Bound::ne</target>
        </trans-unit>
        <trans-unit id="ab242a98c5b08c66ef7dc6a8a0cb34b4b2961e44" translate="yes" xml:space="preserve">
          <source>Bound::to_owned</source>
          <target state="translated">Bound::to_owned</target>
        </trans-unit>
        <trans-unit id="9a69c2090e4312fb09b145cc8cc6bd670302d586" translate="yes" xml:space="preserve">
          <source>Bound::try_from</source>
          <target state="translated">Bound::try_from</target>
        </trans-unit>
        <trans-unit id="763620a7caa5bb18601b6f9a97d64ddf732e2329" translate="yes" xml:space="preserve">
          <source>Bound::try_into</source>
          <target state="translated">Bound::try_into</target>
        </trans-unit>
        <trans-unit id="f370fdaa52e7ec335a260ab2d97b2ca401271f1b" translate="yes" xml:space="preserve">
          <source>Bound::type_id</source>
          <target state="translated">Bound::type_id</target>
        </trans-unit>
        <trans-unit id="c5964dba854ca10e309192dd054d46319ddd1bae" translate="yes" xml:space="preserve">
          <source>Bounds are constraints on a type or trait. For example, if a bound is placed on the argument a function takes, types passed to that function must abide by that constraint.</source>
          <target state="translated">境界は、型や特性に対する制約です。例えば、関数が取る引数に境界が設定されている場合、その関数に渡される型はその制約に従わなければなりません。</target>
        </trans-unit>
        <trans-unit id="ca6bc4b3d93728fa4fe8f6d78ae36c82b188ed72" translate="yes" xml:space="preserve">
          <source>Bounds on an item must be satisfied when using the item. When type checking and borrow checking a generic item, the bounds can be used to determine that a trait is implemented for a type. For example, given &lt;code&gt;Ty: Trait&lt;/code&gt;</source>
          <target state="translated">アイテムの境界は、アイテムを使用するときに満たされる必要があります。ジェネリックアイテムを型チェックおよび借用チェックする場合、境界を使用して、型に特性が実装されていることを確認できます。たとえば、 &lt;code&gt;Ty: Trait&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8db62bb4eebb31a7863a25492026fe5ef94ccb8d" translate="yes" xml:space="preserve">
          <source>Bounds that don't use the item's parameters or higher-ranked lifetimes are checked when the item is defined. It is an error for such a bound to be false.</source>
          <target state="translated">アイテムのパラメータや上位ランクのライフタイムを使用しない境界は、アイテムが定義されたときにチェックされます。このような境界が false であるとエラーになります。</target>
        </trans-unit>
        <trans-unit id="4b064da5fe9593f583b40c21207783b175e1ebf2" translate="yes" xml:space="preserve">
          <source>Bounds written after declaring a &lt;a href=&quot;items/generics&quot;&gt;generic parameter&lt;/a&gt;: &lt;code&gt;fn f&amp;lt;A: Copy&amp;gt;() {}&lt;/code&gt; is the same as &lt;code&gt;fn f&amp;lt;A&amp;gt; where A: Copy () {}&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;items/generics&quot;&gt;ジェネリックパラメーターを&lt;/a&gt;宣言した後に記述された境界： &lt;code&gt;fn f&amp;lt;A: Copy&amp;gt;() {}&lt;/code&gt; は、 &lt;code&gt;fn f&amp;lt;A&amp;gt; where A: Copy () {}&lt;/code&gt; と同じで、A：Copy（）{}です。</target>
        </trans-unit>
        <trans-unit id="239ca5767afac9641593464ce02bc454d6ac07a9" translate="yes" xml:space="preserve">
          <source>Box</source>
          <target state="translated">Box</target>
        </trans-unit>
        <trans-unit id="98f85596ae7b9b42504e10a1325d441abcd2486d" translate="yes" xml:space="preserve">
          <source>Box::all</source>
          <target state="translated">Box::all</target>
        </trans-unit>
        <trans-unit id="b639107f3271721c720775da7e802911f662b1b1" translate="yes" xml:space="preserve">
          <source>Box::any</source>
          <target state="translated">Box::any</target>
        </trans-unit>
        <trans-unit id="7c64d4849917073ddc48c9ebb00f360df4c9d7a4" translate="yes" xml:space="preserve">
          <source>Box::as_mut</source>
          <target state="translated">Box::as_mut</target>
        </trans-unit>
        <trans-unit id="6848e42541571d900c21f082d7585fb9168d4af7" translate="yes" xml:space="preserve">
          <source>Box::as_ref</source>
          <target state="translated">Box::as_ref</target>
        </trans-unit>
        <trans-unit id="6d56f42ac2a542e91194b361d21189ab4bd414b3" translate="yes" xml:space="preserve">
          <source>Box::borrow</source>
          <target state="translated">Box::borrow</target>
        </trans-unit>
        <trans-unit id="c99f2a149a7bc2bb960eba8eda77967bcecf0e8d" translate="yes" xml:space="preserve">
          <source>Box::borrow_mut</source>
          <target state="translated">Box::borrow_mut</target>
        </trans-unit>
        <trans-unit id="17f5075e3006cf9d119c727bb0e54e46c7eebaa6" translate="yes" xml:space="preserve">
          <source>Box::by_ref</source>
          <target state="translated">Box::by_ref</target>
        </trans-unit>
        <trans-unit id="61d60a2dfd95d2edba019ae7a505a5a8b6bad430" translate="yes" xml:space="preserve">
          <source>Box::bytes</source>
          <target state="translated">Box::bytes</target>
        </trans-unit>
        <trans-unit id="46fe884decfe5370e5c5fe2408915b53963bbffb" translate="yes" xml:space="preserve">
          <source>Box::call</source>
          <target state="translated">Box::call</target>
        </trans-unit>
        <trans-unit id="374988426e0ba138e6f583dbe0ce037ce343561c" translate="yes" xml:space="preserve">
          <source>Box::call_mut</source>
          <target state="translated">Box::call_mut</target>
        </trans-unit>
        <trans-unit id="221be09338afb54138c6ba69b6155871dd1f1604" translate="yes" xml:space="preserve">
          <source>Box::call_once</source>
          <target state="translated">Box::call_once</target>
        </trans-unit>
        <trans-unit id="212e1a3fbba385ceea9d2d039d37d904ae132bdd" translate="yes" xml:space="preserve">
          <source>Box::cause</source>
          <target state="translated">Box::cause</target>
        </trans-unit>
        <trans-unit id="1eb80191936cdac28f33c70fb0561232cbe1a0ce" translate="yes" xml:space="preserve">
          <source>Box::chain</source>
          <target state="translated">Box::chain</target>
        </trans-unit>
        <trans-unit id="9a890655e788211db3d21c5daf10e4fa6bedbf64" translate="yes" xml:space="preserve">
          <source>Box::clamp</source>
          <target state="translated">Box::clamp</target>
        </trans-unit>
        <trans-unit id="332b16f27092792c1ac7aba3b13ed4a2b647f865" translate="yes" xml:space="preserve">
          <source>Box::clone</source>
          <target state="translated">Box::clone</target>
        </trans-unit>
        <trans-unit id="0511825945441353f0c46a388bf94987ad6afb32" translate="yes" xml:space="preserve">
          <source>Box::clone_from</source>
          <target state="translated">Box::clone_from</target>
        </trans-unit>
        <trans-unit id="df3fac12d073e919e309cdc2ac6374e292180e78" translate="yes" xml:space="preserve">
          <source>Box::clone_into</source>
          <target state="translated">Box::clone_into</target>
        </trans-unit>
        <trans-unit id="6e363e6d0300a78f70074a806f60975e864accad" translate="yes" xml:space="preserve">
          <source>Box::cloned</source>
          <target state="translated">Box::cloned</target>
        </trans-unit>
        <trans-unit id="6c96b7576d584aee2f26ba1a32a3f04121f43e20" translate="yes" xml:space="preserve">
          <source>Box::cmp</source>
          <target state="translated">Box::cmp</target>
        </trans-unit>
        <trans-unit id="eeef833143ebcf0bc697aec2eefdc455624f9e0d" translate="yes" xml:space="preserve">
          <source>Box::collect</source>
          <target state="translated">Box::collect</target>
        </trans-unit>
        <trans-unit id="3d0f23afd6563472c47a167b48b8410fc559e492" translate="yes" xml:space="preserve">
          <source>Box::consume</source>
          <target state="translated">Box::consume</target>
        </trans-unit>
        <trans-unit id="44105eeec746662536d53672c3fb78098daee296" translate="yes" xml:space="preserve">
          <source>Box::copied</source>
          <target state="translated">Box::copied</target>
        </trans-unit>
        <trans-unit id="7ad1e95ce02daa64c1eaef18f06b9d8a7b568791" translate="yes" xml:space="preserve">
          <source>Box::count</source>
          <target state="translated">Box::count</target>
        </trans-unit>
        <trans-unit id="63ba5f4100a0be0c367e10e279bbb76a90044076" translate="yes" xml:space="preserve">
          <source>Box::cycle</source>
          <target state="translated">Box::cycle</target>
        </trans-unit>
        <trans-unit id="3100809b3c22540251ee4d32f870f0ab5d85f812" translate="yes" xml:space="preserve">
          <source>Box::default</source>
          <target state="translated">Box::default</target>
        </trans-unit>
        <trans-unit id="d2afb24813ad916ee3f3c876745772187d20e4b6" translate="yes" xml:space="preserve">
          <source>Box::deref</source>
          <target state="translated">Box::deref</target>
        </trans-unit>
        <trans-unit id="c38310d47b15e572611b4edc0c34463c00ac8351" translate="yes" xml:space="preserve">
          <source>Box::deref_mut</source>
          <target state="translated">Box::deref_mut</target>
        </trans-unit>
        <trans-unit id="4407e689e2360934dc281ec09f440aa221be5ae6" translate="yes" xml:space="preserve">
          <source>Box::description</source>
          <target state="translated">Box::description</target>
        </trans-unit>
        <trans-unit id="3166dd8642b65175a3bd7c7a52199fb715fe0594" translate="yes" xml:space="preserve">
          <source>Box::downcast</source>
          <target state="translated">Box::downcast</target>
        </trans-unit>
        <trans-unit id="daa5d80c59542cc920cd455f7d64b23c983bc609" translate="yes" xml:space="preserve">
          <source>Box::drop</source>
          <target state="translated">Box::drop</target>
        </trans-unit>
        <trans-unit id="1ce09716c9c1deae7f81c32dcf52fa616b12ca02" translate="yes" xml:space="preserve">
          <source>Box::enumerate</source>
          <target state="translated">Box::enumerate</target>
        </trans-unit>
        <trans-unit id="6cf03ef281bd05acc9e8788a558b01545153452e" translate="yes" xml:space="preserve">
          <source>Box::eq</source>
          <target state="translated">Box::eq</target>
        </trans-unit>
        <trans-unit id="4d3c429c86bcb5b6eb5c6bb097bc1d76c3b6d725" translate="yes" xml:space="preserve">
          <source>Box::fill_buf</source>
          <target state="translated">Box::fill_buf</target>
        </trans-unit>
        <trans-unit id="e0cfe090654acd2813dda2cadb04ff611bd40f8c" translate="yes" xml:space="preserve">
          <source>Box::filter</source>
          <target state="translated">Box::filter</target>
        </trans-unit>
        <trans-unit id="883f1c107d0f7a023ce3ace96cd45f32b3a24f77" translate="yes" xml:space="preserve">
          <source>Box::filter_map</source>
          <target state="translated">Box::filter_map</target>
        </trans-unit>
        <trans-unit id="8dba1be2d1b661c2a19ed51cf35f61687ebb811c" translate="yes" xml:space="preserve">
          <source>Box::find</source>
          <target state="translated">Box::find</target>
        </trans-unit>
        <trans-unit id="f1e4c766b00488cdb2e145cf4a27a074f88b9608" translate="yes" xml:space="preserve">
          <source>Box::find_map</source>
          <target state="translated">Box::find_map</target>
        </trans-unit>
        <trans-unit id="c5e9fddfd660282ca666cc6d744b46cd9a98281c" translate="yes" xml:space="preserve">
          <source>Box::finish</source>
          <target state="translated">Box::finish</target>
        </trans-unit>
        <trans-unit id="7698c71e0db1c73d3407ac25452c69edf519bc43" translate="yes" xml:space="preserve">
          <source>Box::flat_map</source>
          <target state="translated">Box::flat_map</target>
        </trans-unit>
        <trans-unit id="59e78e2254012fa056fb63d3af090ff23d9caa18" translate="yes" xml:space="preserve">
          <source>Box::flatten</source>
          <target state="translated">Box::flatten</target>
        </trans-unit>
        <trans-unit id="a6f7e58af02021c1636cef25915365d21c74a8a2" translate="yes" xml:space="preserve">
          <source>Box::flush</source>
          <target state="translated">Box::flush</target>
        </trans-unit>
        <trans-unit id="c6784df312e8ae8f90011ca22e8d36adb66a847a" translate="yes" xml:space="preserve">
          <source>Box::fmt</source>
          <target state="translated">Box::fmt</target>
        </trans-unit>
        <trans-unit id="fddbdef17bce1a8df59157b8fd1db42560d5f3ee" translate="yes" xml:space="preserve">
          <source>Box::fold</source>
          <target state="translated">Box::fold</target>
        </trans-unit>
        <trans-unit id="0a52ad01f142af48e3794dd7e59fc9bc3c7aa5d4" translate="yes" xml:space="preserve">
          <source>Box::for_each</source>
          <target state="translated">Box::for_each</target>
        </trans-unit>
        <trans-unit id="ed62e9121c4c62c0d5ce944ae44d5048012950db" translate="yes" xml:space="preserve">
          <source>Box::from</source>
          <target state="translated">Box::from</target>
        </trans-unit>
        <trans-unit id="91aab981ee80cfea73883f72f3f4a7df87328afd" translate="yes" xml:space="preserve">
          <source>Box::from_iter</source>
          <target state="translated">Box::from_iter</target>
        </trans-unit>
        <trans-unit id="99a56fd56f3eda7092816760238ede7c3fa6109f" translate="yes" xml:space="preserve">
          <source>Box::from_raw</source>
          <target state="translated">Box::from_raw</target>
        </trans-unit>
        <trans-unit id="10348aa1512f4c519b5613b846a2d8d6cfc47b88" translate="yes" xml:space="preserve">
          <source>Box::fuse</source>
          <target state="translated">Box::fuse</target>
        </trans-unit>
        <trans-unit id="530d37fa415cfa7c32ec4b55571698e45da6f959" translate="yes" xml:space="preserve">
          <source>Box::ge</source>
          <target state="translated">Box::ge</target>
        </trans-unit>
        <trans-unit id="4b72a4352f4fe91f47f069cdabc6e6ad95f13b44" translate="yes" xml:space="preserve">
          <source>Box::gt</source>
          <target state="translated">Box::gt</target>
        </trans-unit>
        <trans-unit id="16c6635f4bb22fdb3cea4763415a3155c214ed75" translate="yes" xml:space="preserve">
          <source>Box::hash</source>
          <target state="translated">Box::hash</target>
        </trans-unit>
        <trans-unit id="4c2a4b460b5d8fc9bdda66cc71714fbab479852a" translate="yes" xml:space="preserve">
          <source>Box::hash_slice</source>
          <target state="translated">Box::hash_slice</target>
        </trans-unit>
        <trans-unit id="343ef75a47ac9840e34ddf7a2da0d02c25787582" translate="yes" xml:space="preserve">
          <source>Box::initializer</source>
          <target state="translated">Box::initializer</target>
        </trans-unit>
        <trans-unit id="63ff0ff3838d20603f1ee804508fc3e64e303af2" translate="yes" xml:space="preserve">
          <source>Box::inspect</source>
          <target state="translated">Box::inspect</target>
        </trans-unit>
        <trans-unit id="85607e14d6de81746b803858c2540ca8c6b44bdb" translate="yes" xml:space="preserve">
          <source>Box::into</source>
          <target state="translated">Box::into</target>
        </trans-unit>
        <trans-unit id="f6b1af13daabe54761e736d7c80500ab6b9a1674" translate="yes" xml:space="preserve">
          <source>Box::into_iter</source>
          <target state="translated">Box::into_iter</target>
        </trans-unit>
        <trans-unit id="acbaecb1989ceef80f562e795d009f33656980ca" translate="yes" xml:space="preserve">
          <source>Box::into_pin</source>
          <target state="translated">Box::into_pin</target>
        </trans-unit>
        <trans-unit id="4842429f228dc17504f648e08a5f4f16e0e2062a" translate="yes" xml:space="preserve">
          <source>Box::into_raw</source>
          <target state="translated">Box::into_raw</target>
        </trans-unit>
        <trans-unit id="3f79bc4ecb72c296f646e58c0e20ae529797f781" translate="yes" xml:space="preserve">
          <source>Box::into_raw_non_null</source>
          <target state="translated">Box::into_raw_non_null</target>
        </trans-unit>
        <trans-unit id="3614510072231db3137f0d7aeb928f934f1c493d" translate="yes" xml:space="preserve">
          <source>Box::into_searcher</source>
          <target state="translated">Box::into_searcher</target>
        </trans-unit>
        <trans-unit id="2a8c6b52f333bc0cef92fffa23a800dc8255b691" translate="yes" xml:space="preserve">
          <source>Box::is_contained_in</source>
          <target state="translated">Box::is_contained_in</target>
        </trans-unit>
        <trans-unit id="6f2c2c3465fb0d25bc14172b3cdf438dd8946893" translate="yes" xml:space="preserve">
          <source>Box::is_empty</source>
          <target state="translated">Box::is_empty</target>
        </trans-unit>
        <trans-unit id="5ce85dca8b5589117e52c9eb46ed6631b186778a" translate="yes" xml:space="preserve">
          <source>Box::is_prefix_of</source>
          <target state="translated">Box::is_prefix_of</target>
        </trans-unit>
        <trans-unit id="b2d0a3538bcce4d4341580322555cb175af9e055" translate="yes" xml:space="preserve">
          <source>Box::is_sorted</source>
          <target state="translated">Box::is_sorted</target>
        </trans-unit>
        <trans-unit id="e8bc76461809058c2bf78bd03616e55f959cee1e" translate="yes" xml:space="preserve">
          <source>Box::is_sorted_by</source>
          <target state="translated">Box::is_sorted_by</target>
        </trans-unit>
        <trans-unit id="0a88b0e90b45af6841206b9222039635add3e64f" translate="yes" xml:space="preserve">
          <source>Box::is_sorted_by_key</source>
          <target state="translated">Box::is_sorted_by_key</target>
        </trans-unit>
        <trans-unit id="a72dc555efdbfa80a6b0d5c0b4f285602f05c856" translate="yes" xml:space="preserve">
          <source>Box::is_suffix_of</source>
          <target state="translated">Box::is_suffix_of</target>
        </trans-unit>
        <trans-unit id="e5727693a6c4cd3248cc40c999eef24607bc94c4" translate="yes" xml:space="preserve">
          <source>Box::last</source>
          <target state="translated">Box::last</target>
        </trans-unit>
        <trans-unit id="d894e0ab37daa6ed36ffcb6dc6f6ae6feafe4d29" translate="yes" xml:space="preserve">
          <source>Box::le</source>
          <target state="translated">Box::le</target>
        </trans-unit>
        <trans-unit id="bb0f72b159e3eafd1c056e394655cd200d490416" translate="yes" xml:space="preserve">
          <source>Box::leak</source>
          <target state="translated">Box::leak</target>
        </trans-unit>
        <trans-unit id="d677d8cc4fbf16dda95f7cc9f6f227fc9bf5458e" translate="yes" xml:space="preserve">
          <source>Box::len</source>
          <target state="translated">Box::len</target>
        </trans-unit>
        <trans-unit id="45bad95b762a8b026bd24017358dab88a4d6860e" translate="yes" xml:space="preserve">
          <source>Box::lines</source>
          <target state="translated">Box::lines</target>
        </trans-unit>
        <trans-unit id="72b25c9787fb55646beeb56c75cec4a153ebed4b" translate="yes" xml:space="preserve">
          <source>Box::lt</source>
          <target state="translated">Box::lt</target>
        </trans-unit>
        <trans-unit id="f2618ca0d7141ef535495cca35bfb5aa17708bc5" translate="yes" xml:space="preserve">
          <source>Box::map</source>
          <target state="translated">Box::map</target>
        </trans-unit>
        <trans-unit id="0bc41a6cab2d616f4a773cadf7a4a0287ec2ab6e" translate="yes" xml:space="preserve">
          <source>Box::max</source>
          <target state="translated">Box::max</target>
        </trans-unit>
        <trans-unit id="b5a62311ec4389dcea655a4a653acc770ae70df8" translate="yes" xml:space="preserve">
          <source>Box::max_by</source>
          <target state="translated">Box::max_by</target>
        </trans-unit>
        <trans-unit id="d0583d8c8a9191551534a635b566f913b18db0e0" translate="yes" xml:space="preserve">
          <source>Box::max_by_key</source>
          <target state="translated">Box::max_by_key</target>
        </trans-unit>
        <trans-unit id="5516ccddf3095fdf20b85d48497a76f13db9f3ab" translate="yes" xml:space="preserve">
          <source>Box::min</source>
          <target state="translated">Box::min</target>
        </trans-unit>
        <trans-unit id="57731c7eaf53528b46c94a8f5b04067977541b8e" translate="yes" xml:space="preserve">
          <source>Box::min_by</source>
          <target state="translated">Box::min_by</target>
        </trans-unit>
        <trans-unit id="5e6b2f4822e5c3d83d1318a14c7f1a3668b8120b" translate="yes" xml:space="preserve">
          <source>Box::min_by_key</source>
          <target state="translated">Box::min_by_key</target>
        </trans-unit>
        <trans-unit id="4df5d8b53f02075451eb004c4d2840a8ab301c06" translate="yes" xml:space="preserve">
          <source>Box::ne</source>
          <target state="translated">Box::ne</target>
        </trans-unit>
        <trans-unit id="1cb94d98d7b75dacb7e7e360644f9c7e2642829f" translate="yes" xml:space="preserve">
          <source>Box::new</source>
          <target state="translated">Box::new</target>
        </trans-unit>
        <trans-unit id="773581cb76ebc7fffb4b726bb7032d772321f18e" translate="yes" xml:space="preserve">
          <source>Box::next</source>
          <target state="translated">Box::next</target>
        </trans-unit>
        <trans-unit id="39a9d8e0d1ae73478ca6c4fc28570233d4f2d14d" translate="yes" xml:space="preserve">
          <source>Box::next_back</source>
          <target state="translated">Box::next_back</target>
        </trans-unit>
        <trans-unit id="ca8b4b8a75b7ab2fc6b63b0e3e0d3d3ac349fcbc" translate="yes" xml:space="preserve">
          <source>Box::nth</source>
          <target state="translated">Box::nth</target>
        </trans-unit>
        <trans-unit id="be1768702f171a2bca631f2dada36573e66e8f4c" translate="yes" xml:space="preserve">
          <source>Box::nth_back</source>
          <target state="translated">Box::nth_back</target>
        </trans-unit>
        <trans-unit id="33b92276543ebbb381ab00cfcca61326250e018b" translate="yes" xml:space="preserve">
          <source>Box::partial_cmp</source>
          <target state="translated">Box::partial_cmp</target>
        </trans-unit>
        <trans-unit id="5b3f3a9486d3aeafde57fba826b8530482d99578" translate="yes" xml:space="preserve">
          <source>Box::partition</source>
          <target state="translated">Box::partition</target>
        </trans-unit>
        <trans-unit id="25aab183ce8da5ce9aed71f8d43b59e269353ccd" translate="yes" xml:space="preserve">
          <source>Box::peekable</source>
          <target state="translated">Box::peekable</target>
        </trans-unit>
        <trans-unit id="7019628ce869ea317ecd4415266260c422269408" translate="yes" xml:space="preserve">
          <source>Box::pin</source>
          <target state="translated">Box::pin</target>
        </trans-unit>
        <trans-unit id="a64f04fc6eed8dea5f38347397b9cc737e345f6e" translate="yes" xml:space="preserve">
          <source>Box::poll</source>
          <target state="translated">Box::poll</target>
        </trans-unit>
        <trans-unit id="66f2f092e4949c0626ea7b22dc1d4ebcf3d8b35e" translate="yes" xml:space="preserve">
          <source>Box::position</source>
          <target state="translated">Box::position</target>
        </trans-unit>
        <trans-unit id="57081d934e6bca1d6c19e21b481ef88439c1ee29" translate="yes" xml:space="preserve">
          <source>Box::product</source>
          <target state="translated">Box::product</target>
        </trans-unit>
        <trans-unit id="ea6a41b1734b82596faa66a349b6d33c1eda5c8d" translate="yes" xml:space="preserve">
          <source>Box::read</source>
          <target state="translated">Box::read</target>
        </trans-unit>
        <trans-unit id="69cd72a2d8a6222800a925198c4edf4f739e25b2" translate="yes" xml:space="preserve">
          <source>Box::read_exact</source>
          <target state="translated">Box::read_exact</target>
        </trans-unit>
        <trans-unit id="59c4bf761ac478484370f960e729c2e181694f6b" translate="yes" xml:space="preserve">
          <source>Box::read_line</source>
          <target state="translated">Box::read_line</target>
        </trans-unit>
        <trans-unit id="225ac79c4a0e4ea7979de019038d83deebd58806" translate="yes" xml:space="preserve">
          <source>Box::read_to_end</source>
          <target state="translated">Box::read_to_end</target>
        </trans-unit>
        <trans-unit id="205cd1994c8e50578c7806614a239f1080cfe645" translate="yes" xml:space="preserve">
          <source>Box::read_to_string</source>
          <target state="translated">Box::read_to_string</target>
        </trans-unit>
        <trans-unit id="4c38943094e12187cb5a7db1759bb984e9e47e21" translate="yes" xml:space="preserve">
          <source>Box::read_until</source>
          <target state="translated">Box::read_until</target>
        </trans-unit>
        <trans-unit id="16e2f9a63976d963a9dadcb35033a821c2fd7839" translate="yes" xml:space="preserve">
          <source>Box::read_vectored</source>
          <target state="translated">Box::read_vectored</target>
        </trans-unit>
        <trans-unit id="be7cce92911dcff76ffbac8e0427e42b77defdcf" translate="yes" xml:space="preserve">
          <source>Box::resume</source>
          <target state="translated">Box::resume</target>
        </trans-unit>
        <trans-unit id="ba5e0dd2c587258859a5333578ab5d32da0e967a" translate="yes" xml:space="preserve">
          <source>Box::rev</source>
          <target state="translated">Box::rev</target>
        </trans-unit>
        <trans-unit id="481e8d3053595c86bd37ed7ee98159dd62804d15" translate="yes" xml:space="preserve">
          <source>Box::rfind</source>
          <target state="translated">Box::rfind</target>
        </trans-unit>
        <trans-unit id="54e7ee564e103a781122b5dcc4e5a645a42b47bd" translate="yes" xml:space="preserve">
          <source>Box::rfold</source>
          <target state="translated">Box::rfold</target>
        </trans-unit>
        <trans-unit id="3a8d8f3503f8d9c26ee23ddbea5e59c9d42ec95c" translate="yes" xml:space="preserve">
          <source>Box::rposition</source>
          <target state="translated">Box::rposition</target>
        </trans-unit>
        <trans-unit id="9ac7a2e2ffe1a294d38f090349bc38f76aec74fc" translate="yes" xml:space="preserve">
          <source>Box::scan</source>
          <target state="translated">Box::scan</target>
        </trans-unit>
        <trans-unit id="96b0a5023a90b5ef63be3a93fee81259968341fc" translate="yes" xml:space="preserve">
          <source>Box::seek</source>
          <target state="translated">Box::seek</target>
        </trans-unit>
        <trans-unit id="74f4a9a8cd31d8cee51b7c80648f8274c91f190c" translate="yes" xml:space="preserve">
          <source>Box::size_hint</source>
          <target state="translated">Box::size_hint</target>
        </trans-unit>
        <trans-unit id="d72a34eac3284a3b3a67c2581cf2c305c16367ed" translate="yes" xml:space="preserve">
          <source>Box::skip</source>
          <target state="translated">Box::skip</target>
        </trans-unit>
        <trans-unit id="ba0e0743f07d0bf5ee26ccb3b8bb456ca5c70a56" translate="yes" xml:space="preserve">
          <source>Box::skip_while</source>
          <target state="translated">Box::skip_while</target>
        </trans-unit>
        <trans-unit id="b4722d8b75a76a5d774eca59914b8e1f4a48cca6" translate="yes" xml:space="preserve">
          <source>Box::source</source>
          <target state="translated">Box::source</target>
        </trans-unit>
        <trans-unit id="6e2bc46519fb279c9f87dbfe9d290154772983d7" translate="yes" xml:space="preserve">
          <source>Box::split</source>
          <target state="translated">Box::split</target>
        </trans-unit>
        <trans-unit id="225ff95675533f61ead8e887a7efbf592dd8a88f" translate="yes" xml:space="preserve">
          <source>Box::step_by</source>
          <target state="translated">Box::step_by</target>
        </trans-unit>
        <trans-unit id="33aa1522a0173cb9f96a98672c2ecf9a96e294c9" translate="yes" xml:space="preserve">
          <source>Box::stream_len</source>
          <target state="translated">Box::stream_len</target>
        </trans-unit>
        <trans-unit id="8371eaea74f952c9831c9ca9261a497c2c38eef9" translate="yes" xml:space="preserve">
          <source>Box::stream_position</source>
          <target state="translated">Box::stream_position</target>
        </trans-unit>
        <trans-unit id="6a478949bfaddf9def7439c2f20d3359d537230c" translate="yes" xml:space="preserve">
          <source>Box::sum</source>
          <target state="translated">Box::sum</target>
        </trans-unit>
        <trans-unit id="3c2abaa93fcb6bfd17a1261c06f7ff566f12ec7e" translate="yes" xml:space="preserve">
          <source>Box::take</source>
          <target state="translated">Box::take</target>
        </trans-unit>
        <trans-unit id="83963a222e9c0ad7e60f41957e4013159d79d919" translate="yes" xml:space="preserve">
          <source>Box::take_while</source>
          <target state="translated">Box::take_while</target>
        </trans-unit>
        <trans-unit id="97ebc881815c3d1efcf8d9cc64f80490df826bb5" translate="yes" xml:space="preserve">
          <source>Box::to_owned</source>
          <target state="translated">Box::to_owned</target>
        </trans-unit>
        <trans-unit id="e508f4dc0d39c5987210d26aebaa3c2b4fce966c" translate="yes" xml:space="preserve">
          <source>Box::to_string</source>
          <target state="translated">Box::to_string</target>
        </trans-unit>
        <trans-unit id="34d3b2ca86670782e3636c41900e981e1db73054" translate="yes" xml:space="preserve">
          <source>Box::try_fold</source>
          <target state="translated">Box::try_fold</target>
        </trans-unit>
        <trans-unit id="4db298c22768eb776696c78cedb8c0ae9382c043" translate="yes" xml:space="preserve">
          <source>Box::try_for_each</source>
          <target state="translated">Box::try_for_each</target>
        </trans-unit>
        <trans-unit id="7ac87b84f99e12af4f84963a001dac862d957033" translate="yes" xml:space="preserve">
          <source>Box::try_from</source>
          <target state="translated">Box::try_from</target>
        </trans-unit>
        <trans-unit id="1190ad3065eb03769687c99bebeafccd52070617" translate="yes" xml:space="preserve">
          <source>Box::try_into</source>
          <target state="translated">Box::try_into</target>
        </trans-unit>
        <trans-unit id="190b967a40f310701525c6f92772eaa4b9d2bd91" translate="yes" xml:space="preserve">
          <source>Box::try_rfold</source>
          <target state="translated">Box::try_rfold</target>
        </trans-unit>
        <trans-unit id="e36c00466fad6adf381b361fedd323c0c0614989" translate="yes" xml:space="preserve">
          <source>Box::type_id</source>
          <target state="translated">Box::type_id</target>
        </trans-unit>
        <trans-unit id="04ea83b7ee01a03b421cd55b0df6992834e06afd" translate="yes" xml:space="preserve">
          <source>Box::unzip</source>
          <target state="translated">Box::unzip</target>
        </trans-unit>
        <trans-unit id="f72865295b955292507dfb70d5c51051dce354f9" translate="yes" xml:space="preserve">
          <source>Box::write</source>
          <target state="translated">Box::write</target>
        </trans-unit>
        <trans-unit id="a94c15e5cef594b7628ec618df5db798a9a567ec" translate="yes" xml:space="preserve">
          <source>Box::write_all</source>
          <target state="translated">Box::write_all</target>
        </trans-unit>
        <trans-unit id="d6fe1ce7bcfe4c269caf62f37074c2cd561a9897" translate="yes" xml:space="preserve">
          <source>Box::write_fmt</source>
          <target state="translated">Box::write_fmt</target>
        </trans-unit>
        <trans-unit id="56912c1495209bdea8854c66cc01bcdf4719afb0" translate="yes" xml:space="preserve">
          <source>Box::write_i128</source>
          <target state="translated">Box::write_i128</target>
        </trans-unit>
        <trans-unit id="d8e0c426cff723fe078d8e082d1a63933f6fa573" translate="yes" xml:space="preserve">
          <source>Box::write_i16</source>
          <target state="translated">Box::write_i16</target>
        </trans-unit>
        <trans-unit id="b68b48a66507e48ff6196e7556e4456e2d325cec" translate="yes" xml:space="preserve">
          <source>Box::write_i32</source>
          <target state="translated">Box::write_i32</target>
        </trans-unit>
        <trans-unit id="1e11f9892c3582d233d19c49b718f4eb56d5716f" translate="yes" xml:space="preserve">
          <source>Box::write_i64</source>
          <target state="translated">Box::write_i64</target>
        </trans-unit>
        <trans-unit id="2c4fbd1565526cebde3d781e65ee574490c3d5c4" translate="yes" xml:space="preserve">
          <source>Box::write_i8</source>
          <target state="translated">Box::write_i8</target>
        </trans-unit>
        <trans-unit id="be62022bb4b9817d94a1db6940ba1ef163a6bd39" translate="yes" xml:space="preserve">
          <source>Box::write_isize</source>
          <target state="translated">Box::write_isize</target>
        </trans-unit>
        <trans-unit id="2096d69d1a029ab28f266f5d6155819f93d05482" translate="yes" xml:space="preserve">
          <source>Box::write_u128</source>
          <target state="translated">Box::write_u128</target>
        </trans-unit>
        <trans-unit id="4bae89c6a373e3f8634ed54d131ceda19618fee5" translate="yes" xml:space="preserve">
          <source>Box::write_u16</source>
          <target state="translated">Box::write_u16</target>
        </trans-unit>
        <trans-unit id="71e4bac27351110d97b5fef0556d35917fbefb90" translate="yes" xml:space="preserve">
          <source>Box::write_u32</source>
          <target state="translated">Box::write_u32</target>
        </trans-unit>
        <trans-unit id="5abd678e805a3ff64f5524701426655948efcbfa" translate="yes" xml:space="preserve">
          <source>Box::write_u64</source>
          <target state="translated">Box::write_u64</target>
        </trans-unit>
        <trans-unit id="cf853a1d87ba811daf4dddf980c6bca3ee9f7551" translate="yes" xml:space="preserve">
          <source>Box::write_u8</source>
          <target state="translated">Box::write_u8</target>
        </trans-unit>
        <trans-unit id="570c96fc9a4d7852a96d0f8be3123d2af8641252" translate="yes" xml:space="preserve">
          <source>Box::write_usize</source>
          <target state="translated">Box::write_usize</target>
        </trans-unit>
        <trans-unit id="8c5f38686db9dd2e3d3338655cf9aa7453b4beec" translate="yes" xml:space="preserve">
          <source>Box::write_vectored</source>
          <target state="translated">Box::write_vectored</target>
        </trans-unit>
        <trans-unit id="58b9235154ec59648f9006bdb375b1a70414fdbc" translate="yes" xml:space="preserve">
          <source>Box::zip</source>
          <target state="translated">Box::zip</target>
        </trans-unit>
        <trans-unit id="1f1c95cf9dbdc5a10d4adddb4bd7ed9693d03299" translate="yes" xml:space="preserve">
          <source>Boxes don&amp;rsquo;t have performance overhead, other than storing their data on the heap instead of on the stack. But they don&amp;rsquo;t have many extra capabilities either. You&amp;rsquo;ll use them most often in these situations:</source>
          <target state="translated">ボックスには、スタックではなくヒープにデータを格納する以外は、パフォーマンスのオーバーヘッドはありません。しかし、それらには多くの追加機能もありません。以下の状況で最も頻繁に使用します。</target>
        </trans-unit>
        <trans-unit id="aae55045560cd96320cd77d712fdc24ac8ab83dc" translate="yes" xml:space="preserve">
          <source>Boxes provide only the indirection and heap allocation; they don&amp;rsquo;t have any other special capabilities, like those we&amp;rsquo;ll see with the other smart pointer types. They also don&amp;rsquo;t have any performance overhead that these special capabilities incur, so they can be useful in cases like the cons list where the indirection is the only feature we need. We&amp;rsquo;ll look at more use cases for boxes in Chapter 17, too.</source>
          <target state="translated">ボックスは、間接指定とヒープ割り当てのみを提供します。他のスマートポインター型で見られるような他の特別な機能はありません。また、これらの特別な機能で発生するパフォーマンスオーバーヘッドもないため、間接リストが必要な唯一の機能であるconsリストのような場合に役立ちます。ボックスの使用例については、第17章でも説明します。</target>
        </trans-unit>
        <trans-unit id="e42a1e70b4003a66462fd8b1b6f1d551425eedd6" translate="yes" xml:space="preserve">
          <source>Bracket</source>
          <target state="translated">Bracket</target>
        </trans-unit>
        <trans-unit id="acb83a12e9c51df23e23f19306bba0bcb0739442" translate="yes" xml:space="preserve">
          <source>Bracket punctuation is used in various parts of the grammar. An open bracket must always be paired with a close bracket. Brackets and the tokens within them are referred to as &quot;token trees&quot; in &lt;a href=&quot;macros-by-example&quot;&gt;macros&lt;/a&gt;. The three types of brackets are:</source>
          <target state="translated">ブラケットの句読点は、文法のさまざまな部分で使用されています。開き角括弧は常に閉じ角括弧とペアにする必要があります。ブラケットとその中のトークンは、&lt;a href=&quot;macros-by-example&quot;&gt;マクロでは&lt;/a&gt;「トークンツリー」と呼ばれます。ブラケットには次の3つのタイプがあります。</target>
        </trans-unit>
        <trans-unit id="4a3ba41cdc1bb875b6f34a0f7504f134b4c82482" translate="yes" xml:space="preserve">
          <source>Breaking cycles with &lt;code&gt;Weak&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Weak&lt;/code&gt; サイクルを壊す</target>
        </trans-unit>
        <trans-unit id="d3dfd81f5eef2bda69d2fe0e0bb117502ea1d295" translate="yes" xml:space="preserve">
          <source>Breaking the &lt;a href=&quot;http://llvm.org/docs/LangRef.html#pointer-aliasing-rules&quot;&gt;pointer aliasing rules&lt;/a&gt; on accesses through raw pointers; a subset of the rules used by C.</source>
          <target state="translated">速報&lt;a href=&quot;http://llvm.org/docs/LangRef.html#pointer-aliasing-rules&quot;&gt;ルールエイリアシングポインタ&lt;/a&gt;生のポインタ経由のアクセスには、Cが使用するルールのサブセット</target>
        </trans-unit>
        <trans-unit id="f28978f6dd2c2e9099f5d850ca4e0176d065b5c7" translate="yes" xml:space="preserve">
          <source>Breaking the &lt;a href=&quot;http://llvm.org/docs/LangRef.html#pointer-aliasing-rules&quot;&gt;pointer aliasing rules&lt;/a&gt;. &lt;code&gt;&amp;amp;mut T&lt;/code&gt; and &lt;code&gt;&amp;amp;T&lt;/code&gt; follow LLVM&amp;rsquo;s scoped &lt;a href=&quot;http://llvm.org/docs/LangRef.html#noalias&quot;&gt;noalias&lt;/a&gt; model, except if the &lt;code&gt;&amp;amp;T&lt;/code&gt; contains an &lt;a href=&quot;../std/cell/struct.unsafecell&quot;&gt;&lt;code&gt;UnsafeCell&amp;lt;U&amp;gt;&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Breaking the &lt;a href=&quot;http://llvm.org/docs/LangRef.html#pointer-aliasing-rules&quot;&gt;pointer aliasing rules&lt;/a&gt;. &lt;code&gt;&amp;amp;mut T&lt;/code&gt; and &lt;code&gt;&amp;amp;T&lt;/code&gt; follow LLVM&amp;rsquo;s scoped &lt;a href=&quot;http://llvm.org/docs/LangRef.html#noalias&quot;&gt;noalias&lt;/a&gt; model, except if the &lt;code&gt;&amp;amp;T&lt;/code&gt; contains an &lt;a href=&quot;../std/cell/struct.unsafecell&quot;&gt; &lt;code&gt;UnsafeCell&amp;lt;U&amp;gt;&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="0a02e7efbe4ea860996a720e8eb0268c763977ce" translate="yes" xml:space="preserve">
          <source>Bringing Paths into Scope with the &lt;code id=&quot;bringing-paths-into-scope-with-the-use-keyword&quot;&gt;use&lt;/code&gt; Keyword</source>
          <target state="translated">&lt;code id=&quot;bringing-paths-into-scope-with-the-use-keyword&quot;&gt;use&lt;/code&gt; キーワードを使用してパスをスコープに入れる</target>
        </trans-unit>
        <trans-unit id="de407e52f1ad71f30175ca74f0b3e4d7802969ce" translate="yes" xml:space="preserve">
          <source>BufRead</source>
          <target state="translated">BufRead</target>
        </trans-unit>
        <trans-unit id="8b3cd1796576fb8d47f83bdc75d05d245fd7a0c8" translate="yes" xml:space="preserve">
          <source>BufRead::consume</source>
          <target state="translated">BufRead::consume</target>
        </trans-unit>
        <trans-unit id="4d60e62622ce6e5b2975982fde7166d4b99157d4" translate="yes" xml:space="preserve">
          <source>BufRead::fill_buf</source>
          <target state="translated">BufRead::fill_buf</target>
        </trans-unit>
        <trans-unit id="6454a42afc6b7f969ba1e20a170de8e3b928a4de" translate="yes" xml:space="preserve">
          <source>BufRead::lines</source>
          <target state="translated">BufRead::lines</target>
        </trans-unit>
        <trans-unit id="a22b5e33039f43dd9be253a22ba693c7821fc40d" translate="yes" xml:space="preserve">
          <source>BufRead::read_line</source>
          <target state="translated">BufRead::read_line</target>
        </trans-unit>
        <trans-unit id="138f0ef5dd5df09e1375e2687113f694b0a114b9" translate="yes" xml:space="preserve">
          <source>BufRead::read_until</source>
          <target state="translated">BufRead::read_until</target>
        </trans-unit>
        <trans-unit id="afb4634d5bb2cfba4eca69e0cbaed77038a91269" translate="yes" xml:space="preserve">
          <source>BufRead::split</source>
          <target state="translated">BufRead::split</target>
        </trans-unit>
        <trans-unit id="232d94f57b3293280b5ad36975b73111f3c6dfa0" translate="yes" xml:space="preserve">
          <source>BufReader</source>
          <target state="translated">BufReader</target>
        </trans-unit>
        <trans-unit id="cb39e958e39ef179b2597f4ef6e19c98ca4fc4d5" translate="yes" xml:space="preserve">
          <source>BufReader and BufWriter</source>
          <target state="translated">BufReader と BufWriter</target>
        </trans-unit>
        <trans-unit id="30498daca312f601d5026a239b4f9877ca9ee7af" translate="yes" xml:space="preserve">
          <source>BufReader::borrow</source>
          <target state="translated">BufReader::borrow</target>
        </trans-unit>
        <trans-unit id="46b667a41b30eb52818f00950425d6b07af15300" translate="yes" xml:space="preserve">
          <source>BufReader::borrow_mut</source>
          <target state="translated">BufReader::borrow_mut</target>
        </trans-unit>
        <trans-unit id="6abdb3c76752714b4a06017a9219fa1f25214580" translate="yes" xml:space="preserve">
          <source>BufReader::buffer</source>
          <target state="translated">BufReader::buffer</target>
        </trans-unit>
        <trans-unit id="8a5b395c3f2044900bdcdf2f9ebf60ebd12d7819" translate="yes" xml:space="preserve">
          <source>BufReader::by_ref</source>
          <target state="translated">BufReader::by_ref</target>
        </trans-unit>
        <trans-unit id="6e8f568e8d439bbf991a8a007e038953a8f83b25" translate="yes" xml:space="preserve">
          <source>BufReader::bytes</source>
          <target state="translated">BufReader::bytes</target>
        </trans-unit>
        <trans-unit id="111bdc9e9c0fa8f11edaf0bb19720dadd4d441c2" translate="yes" xml:space="preserve">
          <source>BufReader::chain</source>
          <target state="translated">BufReader::chain</target>
        </trans-unit>
        <trans-unit id="698d6344bd09525535c43a69fdbd270c56fe0314" translate="yes" xml:space="preserve">
          <source>BufReader::consume</source>
          <target state="translated">BufReader::consume</target>
        </trans-unit>
        <trans-unit id="d753e03e42fea9b39b03754697893d50f45f25ac" translate="yes" xml:space="preserve">
          <source>BufReader::fill_buf</source>
          <target state="translated">BufReader::fill_buf</target>
        </trans-unit>
        <trans-unit id="4002c8a4271852b7c3dc4a005ad07b6218b6d9be" translate="yes" xml:space="preserve">
          <source>BufReader::fmt</source>
          <target state="translated">BufReader::fmt</target>
        </trans-unit>
        <trans-unit id="588a32e3d887d2adc2a42cbd852909e916738169" translate="yes" xml:space="preserve">
          <source>BufReader::from</source>
          <target state="translated">BufReader::from</target>
        </trans-unit>
        <trans-unit id="a565473360a69fedb15e98a54613f95fb3b56dfd" translate="yes" xml:space="preserve">
          <source>BufReader::get_mut</source>
          <target state="translated">BufReader::get_mut</target>
        </trans-unit>
        <trans-unit id="5594c6c6ae64375a5d272ff27f83db1d85077211" translate="yes" xml:space="preserve">
          <source>BufReader::get_ref</source>
          <target state="translated">BufReader::get_ref</target>
        </trans-unit>
        <trans-unit id="1e90aba1df228b628f7c7f3e2ab8e5bae2aa2919" translate="yes" xml:space="preserve">
          <source>BufReader::initializer</source>
          <target state="translated">BufReader::initializer</target>
        </trans-unit>
        <trans-unit id="9dfefe7d50b25c323182190a7738d15409036741" translate="yes" xml:space="preserve">
          <source>BufReader::into</source>
          <target state="translated">BufReader::into</target>
        </trans-unit>
        <trans-unit id="7af433e3bd4af270fc73a60a513c7c29c50b1691" translate="yes" xml:space="preserve">
          <source>BufReader::into_inner</source>
          <target state="translated">BufReader::into_inner</target>
        </trans-unit>
        <trans-unit id="015fca5819c404e186e79049e56378d531c3a868" translate="yes" xml:space="preserve">
          <source>BufReader::lines</source>
          <target state="translated">BufReader::lines</target>
        </trans-unit>
        <trans-unit id="261dc9dd5d56c7bd6b24e8c4987e0bacc36d731b" translate="yes" xml:space="preserve">
          <source>BufReader::new</source>
          <target state="translated">BufReader::new</target>
        </trans-unit>
        <trans-unit id="474a9aceabea88ca192dfa1182137bb4a5716f95" translate="yes" xml:space="preserve">
          <source>BufReader::read</source>
          <target state="translated">BufReader::read</target>
        </trans-unit>
        <trans-unit id="8fb011a69fd96b7a252fae27bab3618d9916ea15" translate="yes" xml:space="preserve">
          <source>BufReader::read_exact</source>
          <target state="translated">BufReader::read_exact</target>
        </trans-unit>
        <trans-unit id="043d1ca9b3f16093053e017427e6b59fce891b84" translate="yes" xml:space="preserve">
          <source>BufReader::read_line</source>
          <target state="translated">BufReader::read_line</target>
        </trans-unit>
        <trans-unit id="0cf3db2b85b3a36c4fe27bb356f920ec381e6a39" translate="yes" xml:space="preserve">
          <source>BufReader::read_to_end</source>
          <target state="translated">BufReader::read_to_end</target>
        </trans-unit>
        <trans-unit id="c014e4bd71ac8b1202507174a0590c77d72041f7" translate="yes" xml:space="preserve">
          <source>BufReader::read_to_string</source>
          <target state="translated">BufReader::read_to_string</target>
        </trans-unit>
        <trans-unit id="bf7f4de24e9cecff5fc9e9886289abdb93482e12" translate="yes" xml:space="preserve">
          <source>BufReader::read_until</source>
          <target state="translated">BufReader::read_until</target>
        </trans-unit>
        <trans-unit id="f1ac9fb503b6a30e103494d5ed7e213639e7e66d" translate="yes" xml:space="preserve">
          <source>BufReader::read_vectored</source>
          <target state="translated">BufReader::read_vectored</target>
        </trans-unit>
        <trans-unit id="b8518cd0ac9ab115738a223331f69d244e196ae1" translate="yes" xml:space="preserve">
          <source>BufReader::seek</source>
          <target state="translated">BufReader::seek</target>
        </trans-unit>
        <trans-unit id="99a5d03be61779b43803bbfee3dbfdce8a113d6d" translate="yes" xml:space="preserve">
          <source>BufReader::seek_relative</source>
          <target state="translated">BufReader::seek_relative</target>
        </trans-unit>
        <trans-unit id="43d93e963620260620093d161241006ece71cae8" translate="yes" xml:space="preserve">
          <source>BufReader::split</source>
          <target state="translated">BufReader::split</target>
        </trans-unit>
        <trans-unit id="e0ac1010e5c4fb0756b34d4592bffff3a410e86d" translate="yes" xml:space="preserve">
          <source>BufReader::stream_len</source>
          <target state="translated">BufReader::stream_len</target>
        </trans-unit>
        <trans-unit id="ca5bf56485cb95f3a60dbe8260139b54147feee2" translate="yes" xml:space="preserve">
          <source>BufReader::stream_position</source>
          <target state="translated">BufReader::stream_position</target>
        </trans-unit>
        <trans-unit id="70fc9c931ae2fc7872314fb275a9549018b33695" translate="yes" xml:space="preserve">
          <source>BufReader::take</source>
          <target state="translated">BufReader::take</target>
        </trans-unit>
        <trans-unit id="4d06dc939cd79e29aeb98db83609f9129bc27937" translate="yes" xml:space="preserve">
          <source>BufReader::try_from</source>
          <target state="translated">BufReader::try_from</target>
        </trans-unit>
        <trans-unit id="9cf0b40fa99c93bde7e68af3011e8e90b8e27ca1" translate="yes" xml:space="preserve">
          <source>BufReader::try_into</source>
          <target state="translated">BufReader::try_into</target>
        </trans-unit>
        <trans-unit id="c0358cb609681901098856ec216b94cf80a87fed" translate="yes" xml:space="preserve">
          <source>BufReader::type_id</source>
          <target state="translated">BufReader::type_id</target>
        </trans-unit>
        <trans-unit id="76a07371464a5bc5c675c8a1103f1bfcdcb90928" translate="yes" xml:space="preserve">
          <source>BufReader::with_capacity</source>
          <target state="translated">BufReader::with_capacity</target>
        </trans-unit>
        <trans-unit id="eb547b03e4fb9da19636fe86aa475ec275f26aea" translate="yes" xml:space="preserve">
          <source>BufWriter</source>
          <target state="translated">BufWriter</target>
        </trans-unit>
        <trans-unit id="c0fe0ec21d292209b8751b7b3bbc325ff8c3dfdd" translate="yes" xml:space="preserve">
          <source>BufWriter::borrow</source>
          <target state="translated">BufWriter::borrow</target>
        </trans-unit>
        <trans-unit id="2adb49e625ca6186b4c41c7d1737d0e2634f05fb" translate="yes" xml:space="preserve">
          <source>BufWriter::borrow_mut</source>
          <target state="translated">BufWriter::borrow_mut</target>
        </trans-unit>
        <trans-unit id="c3ac09907f785459d01129cbdf9eb5797fc53c72" translate="yes" xml:space="preserve">
          <source>BufWriter::buffer</source>
          <target state="translated">BufWriter::buffer</target>
        </trans-unit>
        <trans-unit id="a82155a82c33131bd98d9e864c9f25f36481894a" translate="yes" xml:space="preserve">
          <source>BufWriter::by_ref</source>
          <target state="translated">BufWriter::by_ref</target>
        </trans-unit>
        <trans-unit id="31f24b83e544c2b05b1fbfd0a2b99edbc784d128" translate="yes" xml:space="preserve">
          <source>BufWriter::drop</source>
          <target state="translated">BufWriter::drop</target>
        </trans-unit>
        <trans-unit id="70ed6813c46c4821d4c3ceb922ec9e68c5b46a68" translate="yes" xml:space="preserve">
          <source>BufWriter::flush</source>
          <target state="translated">BufWriter::flush</target>
        </trans-unit>
        <trans-unit id="e322ea4bb3c530e22344a65d6d425dbe30797f57" translate="yes" xml:space="preserve">
          <source>BufWriter::fmt</source>
          <target state="translated">BufWriter::fmt</target>
        </trans-unit>
        <trans-unit id="ae28528b6704424a2fa6c25aacbe28d13e5e2328" translate="yes" xml:space="preserve">
          <source>BufWriter::from</source>
          <target state="translated">BufWriter::from</target>
        </trans-unit>
        <trans-unit id="8f2da80a85c436ae0e170c960857685d65f2c7fa" translate="yes" xml:space="preserve">
          <source>BufWriter::get_mut</source>
          <target state="translated">BufWriter::get_mut</target>
        </trans-unit>
        <trans-unit id="ae8ffbf65314cc80e578ef8e21fd9216b111a598" translate="yes" xml:space="preserve">
          <source>BufWriter::get_ref</source>
          <target state="translated">BufWriter::get_ref</target>
        </trans-unit>
        <trans-unit id="c2bb0d2480650e2a139a3ac97642b7fac7000daf" translate="yes" xml:space="preserve">
          <source>BufWriter::into</source>
          <target state="translated">BufWriter::into</target>
        </trans-unit>
        <trans-unit id="a254cafb67eb39c14e0dd9b99733426aaca0cce1" translate="yes" xml:space="preserve">
          <source>BufWriter::into_inner</source>
          <target state="translated">BufWriter::into_inner</target>
        </trans-unit>
        <trans-unit id="0d50fa17068770487074b33532e6632cdc747a7d" translate="yes" xml:space="preserve">
          <source>BufWriter::new</source>
          <target state="translated">BufWriter::new</target>
        </trans-unit>
        <trans-unit id="8acb320f731050f7faa230a67adf20edf2a91802" translate="yes" xml:space="preserve">
          <source>BufWriter::seek</source>
          <target state="translated">BufWriter::seek</target>
        </trans-unit>
        <trans-unit id="0bc901a9b97e04338c295bff32fc59abb34658a0" translate="yes" xml:space="preserve">
          <source>BufWriter::stream_len</source>
          <target state="translated">BufWriter::stream_len</target>
        </trans-unit>
        <trans-unit id="aef24c4f9e117e8540e0bceb74c3c1079dca3c4a" translate="yes" xml:space="preserve">
          <source>BufWriter::stream_position</source>
          <target state="translated">BufWriter::stream_position</target>
        </trans-unit>
        <trans-unit id="c3a46f518f714d6be6bad831bd9935498f844ddb" translate="yes" xml:space="preserve">
          <source>BufWriter::try_from</source>
          <target state="translated">BufWriter::try_from</target>
        </trans-unit>
        <trans-unit id="d12f6fca054766123bb42142de217202212ff449" translate="yes" xml:space="preserve">
          <source>BufWriter::try_into</source>
          <target state="translated">BufWriter::try_into</target>
        </trans-unit>
        <trans-unit id="8af6d7318c0dbf54915f72f0993742b25781c289" translate="yes" xml:space="preserve">
          <source>BufWriter::type_id</source>
          <target state="translated">BufWriter::type_id</target>
        </trans-unit>
        <trans-unit id="7f3e3e6e70dd67251f7be13ef8952baade49da92" translate="yes" xml:space="preserve">
          <source>BufWriter::with_capacity</source>
          <target state="translated">BufWriter::with_capacity</target>
        </trans-unit>
        <trans-unit id="04509abb12d543e33b20e9a92d6a3a9ce8f7becf" translate="yes" xml:space="preserve">
          <source>BufWriter::write</source>
          <target state="translated">BufWriter::write</target>
        </trans-unit>
        <trans-unit id="7904c0be7d3caaf53c1b1cdb84256218cdaa0206" translate="yes" xml:space="preserve">
          <source>BufWriter::write_all</source>
          <target state="translated">BufWriter::write_all</target>
        </trans-unit>
        <trans-unit id="1656f0c433aa13f34246f1c4269f0f93dd7be7a2" translate="yes" xml:space="preserve">
          <source>BufWriter::write_fmt</source>
          <target state="translated">BufWriter::write_fmt</target>
        </trans-unit>
        <trans-unit id="34b5f10d3b6a9f9a1dbde260a02e2b2206afca57" translate="yes" xml:space="preserve">
          <source>BufWriter::write_vectored</source>
          <target state="translated">BufWriter::write_vectored</target>
        </trans-unit>
        <trans-unit id="930e02964f6bea5730ba5c65d98e4f502a26535a" translate="yes" xml:space="preserve">
          <source>Buffering behavior:</source>
          <target state="translated">バッファリング行動。</target>
        </trans-unit>
        <trans-unit id="c236b467cd75457e8973d308434bf8606946e8b7" translate="yes" xml:space="preserve">
          <source>Bugs that happen only in certain situations and are hard to reproduce and fix reliably</source>
          <target state="translated">特定の状況でのみ発生し、再現性や修正が困難なバグを確実に修正することができる</target>
        </trans-unit>
        <trans-unit id="c123195418c1603314c7d0aac5cbca5fe90623f5" translate="yes" xml:space="preserve">
          <source>Build the thread with &lt;a href=&quot;struct.builder&quot;&gt;&lt;code&gt;Builder&lt;/code&gt;&lt;/a&gt; and pass the desired stack size to &lt;a href=&quot;struct.builder#method.stack_size&quot;&gt;&lt;code&gt;Builder::stack_size&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;struct.builder&quot;&gt; &lt;code&gt;Builder&lt;/code&gt; &lt;/a&gt;でスレッドをビルドし、目的のスタックサイズを&lt;a href=&quot;struct.builder#method.stack_size&quot;&gt; &lt;code&gt;Builder::stack_size&lt;/code&gt; &lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="97ac06ac37241fed7f3a8298db93e9bbc2d242b6" translate="yes" xml:space="preserve">
          <source>BuildHasher</source>
          <target state="translated">BuildHasher</target>
        </trans-unit>
        <trans-unit id="aaba5ed0cc289313d5a04c86f6c4f1a124a0ff97" translate="yes" xml:space="preserve">
          <source>BuildHasher::build_hasher</source>
          <target state="translated">BuildHasher::build_hasher</target>
        </trans-unit>
        <trans-unit id="6972ec88ec81efc886ecfcc5774a514315adaba3" translate="yes" xml:space="preserve">
          <source>BuildHasherDefault</source>
          <target state="translated">BuildHasherDefault</target>
        </trans-unit>
        <trans-unit id="3b3934e3550748f2a7b58e6593d8d16993a3f234" translate="yes" xml:space="preserve">
          <source>BuildHasherDefault::borrow</source>
          <target state="translated">BuildHasherDefault::borrow</target>
        </trans-unit>
        <trans-unit id="f55eee0b0d59698190e3d541df7887945783f03c" translate="yes" xml:space="preserve">
          <source>BuildHasherDefault::borrow_mut</source>
          <target state="translated">BuildHasherDefault::borrow_mut</target>
        </trans-unit>
        <trans-unit id="9a17d9b6eba5bdb1a3199b04f87f79fe486b4427" translate="yes" xml:space="preserve">
          <source>BuildHasherDefault::build_hasher</source>
          <target state="translated">BuildHasherDefault::build_hasher</target>
        </trans-unit>
        <trans-unit id="3378e7d2427ed05874269a577e08932c432618d4" translate="yes" xml:space="preserve">
          <source>BuildHasherDefault::clone</source>
          <target state="translated">BuildHasherDefault::clone</target>
        </trans-unit>
        <trans-unit id="010bd4789bebb3ef5a2996e2b1be4fdb5f283ea4" translate="yes" xml:space="preserve">
          <source>BuildHasherDefault::clone_from</source>
          <target state="translated">BuildHasherDefault::clone_from</target>
        </trans-unit>
        <trans-unit id="e746cdbc6b12a8b851323bb7c641b3af90edca43" translate="yes" xml:space="preserve">
          <source>BuildHasherDefault::clone_into</source>
          <target state="translated">BuildHasherDefault::clone_into</target>
        </trans-unit>
        <trans-unit id="52e1f05a4973d5628107a410168778a062f1bf48" translate="yes" xml:space="preserve">
          <source>BuildHasherDefault::default</source>
          <target state="translated">BuildHasherDefault::default</target>
        </trans-unit>
        <trans-unit id="805858a4f2f04c612c4359d30c11b771cbbf2670" translate="yes" xml:space="preserve">
          <source>BuildHasherDefault::eq</source>
          <target state="translated">BuildHasherDefault::eq</target>
        </trans-unit>
        <trans-unit id="a489341b69637e6985483361e2ba9bd4e930658e" translate="yes" xml:space="preserve">
          <source>BuildHasherDefault::fmt</source>
          <target state="translated">BuildHasherDefault::fmt</target>
        </trans-unit>
        <trans-unit id="7dc7ccadfebe0f90b3109993492f2510fdea1e97" translate="yes" xml:space="preserve">
          <source>BuildHasherDefault::from</source>
          <target state="translated">BuildHasherDefault::from</target>
        </trans-unit>
        <trans-unit id="b214b1f4540f86833e16b1674e570a06864bb810" translate="yes" xml:space="preserve">
          <source>BuildHasherDefault::into</source>
          <target state="translated">BuildHasherDefault::into</target>
        </trans-unit>
        <trans-unit id="3124ec3e2cb6d3f2d095ae07854f9d9f327708f0" translate="yes" xml:space="preserve">
          <source>BuildHasherDefault::ne</source>
          <target state="translated">BuildHasherDefault::ne</target>
        </trans-unit>
        <trans-unit id="3e47f2f0c29a4813a680f3068d5450f9f31a9f4d" translate="yes" xml:space="preserve">
          <source>BuildHasherDefault::to_owned</source>
          <target state="translated">BuildHasherDefault::to_owned</target>
        </trans-unit>
        <trans-unit id="36b39c1513469044cd761bd64a80f0c4a9902c0a" translate="yes" xml:space="preserve">
          <source>BuildHasherDefault::try_from</source>
          <target state="translated">BuildHasherDefault::try_from</target>
        </trans-unit>
        <trans-unit id="6b3bf2bc5c2ef00504b85f45d8356c19b7018273" translate="yes" xml:space="preserve">
          <source>BuildHasherDefault::try_into</source>
          <target state="translated">BuildHasherDefault::try_into</target>
        </trans-unit>
        <trans-unit id="c27d762f5384033048f5c3b6349a62aa6d74a8ff" translate="yes" xml:space="preserve">
          <source>BuildHasherDefault::type_id</source>
          <target state="translated">BuildHasherDefault::type_id</target>
        </trans-unit>
        <trans-unit id="4759bf14d7a511508e86c343c934894b6e8db533" translate="yes" xml:space="preserve">
          <source>Builder</source>
          <target state="translated">Builder</target>
        </trans-unit>
        <trans-unit id="004d20f8006198411988eea17651cdf655cc4482" translate="yes" xml:space="preserve">
          <source>Builder methods are provided to change these defaults and otherwise configure the process.</source>
          <target state="translated">ビルダーメソッドは、これらのデフォルトを変更したり、プロセスを設定したりするために提供されています。</target>
        </trans-unit>
        <trans-unit id="e817e9752d05edc9cdf54971d106867fe037888c" translate="yes" xml:space="preserve">
          <source>Builder::borrow</source>
          <target state="translated">Builder::borrow</target>
        </trans-unit>
        <trans-unit id="94bb1918ddf68bff15586c79a231491744cc5934" translate="yes" xml:space="preserve">
          <source>Builder::borrow_mut</source>
          <target state="translated">Builder::borrow_mut</target>
        </trans-unit>
        <trans-unit id="f7d73832b38ead1d7c82f9bab9bcef56bfdd3661" translate="yes" xml:space="preserve">
          <source>Builder::fmt</source>
          <target state="translated">Builder::fmt</target>
        </trans-unit>
        <trans-unit id="e7b6a7ffdb6a96182506cdb6f845b1b5f8083113" translate="yes" xml:space="preserve">
          <source>Builder::from</source>
          <target state="translated">Builder::from</target>
        </trans-unit>
        <trans-unit id="c646de2596ac054c72581071ffd5afa499f6b38e" translate="yes" xml:space="preserve">
          <source>Builder::into</source>
          <target state="translated">Builder::into</target>
        </trans-unit>
        <trans-unit id="25158ae2faf4770ff3631697763e4f649748735c" translate="yes" xml:space="preserve">
          <source>Builder::name</source>
          <target state="translated">Builder::name</target>
        </trans-unit>
        <trans-unit id="a2fdc90cb0342f15602e461493244bbda8d11380" translate="yes" xml:space="preserve">
          <source>Builder::new</source>
          <target state="translated">Builder::new</target>
        </trans-unit>
        <trans-unit id="a5c0502ee99c0af55e1f1a9757c75ceb61f0e365" translate="yes" xml:space="preserve">
          <source>Builder::spawn</source>
          <target state="translated">Builder::spawn</target>
        </trans-unit>
        <trans-unit id="d28e4127e494164e81f16f028a028d507078db82" translate="yes" xml:space="preserve">
          <source>Builder::spawn_unchecked</source>
          <target state="translated">Builder::spawn_unchecked</target>
        </trans-unit>
        <trans-unit id="79550b63f469160e0886e9b4b6fb46be05f50a29" translate="yes" xml:space="preserve">
          <source>Builder::stack_size</source>
          <target state="translated">Builder::stack_size</target>
        </trans-unit>
        <trans-unit id="96b55ab18feea8a44f0d0d096d39f3af52a2e131" translate="yes" xml:space="preserve">
          <source>Builder::try_from</source>
          <target state="translated">Builder::try_from</target>
        </trans-unit>
        <trans-unit id="77877ce5fde9f3242e4b6af9ede23afdcb23f7db" translate="yes" xml:space="preserve">
          <source>Builder::try_into</source>
          <target state="translated">Builder::try_into</target>
        </trans-unit>
        <trans-unit id="6247790fc07eec46462f144d1ed4dedc1cb780eb" translate="yes" xml:space="preserve">
          <source>Builder::type_id</source>
          <target state="translated">Builder::type_id</target>
        </trans-unit>
        <trans-unit id="3bf882813c900c304e2632ba4dffda0948193670" translate="yes" xml:space="preserve">
          <source>Building a Single-Threaded Web Server</source>
          <target state="translated">シングルスレッドWebサーバの構築</target>
        </trans-unit>
        <trans-unit id="253443e211e899460868732743aa41ea5e5f944a" translate="yes" xml:space="preserve">
          <source>Building and Running a Cargo Project</source>
          <target state="translated">貨物プロジェクトの構築と運営</target>
        </trans-unit>
        <trans-unit id="1916501f700c410fd7bea37cffb5b95a293dc381" translate="yes" xml:space="preserve">
          <source>Building for Release</source>
          <target state="translated">リリースのためのビル</target>
        </trans-unit>
        <trans-unit id="0ad2d2fb6e92d2b6c89500bfdd36e70bf53d31d2" translate="yes" xml:space="preserve">
          <source>Building the &lt;code id=&quot;building-the-threadpool-struct-using-compiler-driven-development&quot;&gt;ThreadPool&lt;/code&gt; Struct Using Compiler Driven Development</source>
          <target state="translated">コンパイラー駆動開発を使用した &lt;code id=&quot;building-the-threadpool-struct-using-compiler-driven-development&quot;&gt;ThreadPool&lt;/code&gt; 構造体の構築</target>
        </trans-unit>
        <trans-unit id="20da59d3c16c7bbc43ecdc04a9ed654b4ef329d2" translate="yes" xml:space="preserve">
          <source>Built in &lt;a href=&quot;expressions/operator-expr#negation-operators&quot;&gt;negation&lt;/a&gt;, &lt;a href=&quot;expressions/operator-expr#arithmetic-and-logical-binary-operators&quot;&gt;arithmetic, logical&lt;/a&gt;, &lt;a href=&quot;expressions/operator-expr#comparison-operators&quot;&gt;comparison&lt;/a&gt; or &lt;a href=&quot;expressions/operator-expr#lazy-boolean-operators&quot;&gt;lazy boolean&lt;/a&gt; operators used on integer and floating point types, &lt;code&gt;bool&lt;/code&gt; and &lt;code&gt;char&lt;/code&gt;.</source>
          <target state="translated">組み込みの&lt;a href=&quot;expressions/operator-expr#negation-operators&quot;&gt;否定&lt;/a&gt;、&lt;a href=&quot;expressions/operator-expr#arithmetic-and-logical-binary-operators&quot;&gt;算術、論理&lt;/a&gt;、&lt;a href=&quot;expressions/operator-expr#comparison-operators&quot;&gt;比較、&lt;/a&gt;または整数および浮動小数点型の &lt;code&gt;bool&lt;/code&gt; および &lt;code&gt;char&lt;/code&gt; で使用される&lt;a href=&quot;expressions/operator-expr#lazy-boolean-operators&quot;&gt;遅延ブール&lt;/a&gt;演算子。</target>
        </trans-unit>
        <trans-unit id="89e36b16f75fb9635eac3a25e8d8d0058e587b9c" translate="yes" xml:space="preserve">
          <source>Built-in &lt;a href=&quot;expressions/operator-expr#negation-operators&quot;&gt;negation&lt;/a&gt;, &lt;a href=&quot;expressions/operator-expr#arithmetic-and-logical-binary-operators&quot;&gt;arithmetic&lt;/a&gt;, &lt;a href=&quot;expressions/operator-expr#arithmetic-and-logical-binary-operators&quot;&gt;logical&lt;/a&gt;, &lt;a href=&quot;expressions/operator-expr#comparison-operators&quot;&gt;comparison&lt;/a&gt; or &lt;a href=&quot;expressions/operator-expr#lazy-boolean-operators&quot;&gt;lazy boolean&lt;/a&gt; operators used on integer and floating point types, &lt;code&gt;bool&lt;/code&gt;, and &lt;code&gt;char&lt;/code&gt;.</source>
          <target state="translated">Built-in &lt;a href=&quot;expressions/operator-expr#negation-operators&quot;&gt;negation&lt;/a&gt;, &lt;a href=&quot;expressions/operator-expr#arithmetic-and-logical-binary-operators&quot;&gt;arithmetic&lt;/a&gt;, &lt;a href=&quot;expressions/operator-expr#arithmetic-and-logical-binary-operators&quot;&gt;logical&lt;/a&gt;, &lt;a href=&quot;expressions/operator-expr#comparison-operators&quot;&gt;comparison&lt;/a&gt; or &lt;a href=&quot;expressions/operator-expr#lazy-boolean-operators&quot;&gt;lazy boolean&lt;/a&gt; operators used on integer and floating point types, &lt;code&gt;bool&lt;/code&gt; , and &lt;code&gt;char&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="dd0f66ac77e682a233d8ddb635dd00b67a90ab76" translate="yes" xml:space="preserve">
          <source>Built-in attributes</source>
          <target state="translated">内蔵属性</target>
        </trans-unit>
        <trans-unit id="1dac87263c85b5a8f82799db9805041e3360af6d" translate="yes" xml:space="preserve">
          <source>Built-in attributes index</source>
          <target state="translated">組込み属性インデックス</target>
        </trans-unit>
        <trans-unit id="3b55724056edf0c168a344b916c46cc4f550e2f6" translate="yes" xml:space="preserve">
          <source>Built-in types are tightly integrated into the language, in nontrivial ways that are not possible to emulate in user-defined types. User-defined types have limited capabilities.</source>
          <target state="translated">組み込みの型は、ユーザー定義型ではエミュレートできないような非自明な方法で言語に緊密に統合されています。ユーザー定義型の機能は限られています。</target>
        </trans-unit>
        <trans-unit id="6c6bb0e181beb9458279ac502a39fa01da91b8fe" translate="yes" xml:space="preserve">
          <source>But &lt;code&gt;drain_filter&lt;/code&gt; is easier to use. &lt;code&gt;drain_filter&lt;/code&gt; is also more efficient, because it can backshift the elements of the array in bulk.</source>
          <target state="translated">しかし、 &lt;code&gt;drain_filter&lt;/code&gt; の方が使いやすいです。 &lt;code&gt;drain_filter&lt;/code&gt; は、それがバルクで配列の要素をbackshiftできるため、また、より効率的です。</target>
        </trans-unit>
        <trans-unit id="ab56537680f4a94c82e8bdfe87270e033203a404" translate="yes" xml:space="preserve">
          <source>But Rust isn&amp;rsquo;t limited to low-level systems programming. It&amp;rsquo;s expressive and ergonomic enough to make CLI apps, web servers, and many other kinds of code quite pleasant to write &amp;mdash; you&amp;rsquo;ll find simple examples of both later in the book. Working with Rust allows you to build skills that transfer from one domain to another; you can learn Rust by writing a web app, then apply those same skills to target your Raspberry Pi.</source>
          <target state="translated">しかし、Rustは低レベルのシステムプログラミングに限定されません。これは、CLIアプリ、Webサーバー、およびその他の多くの種類のコードを書きやすくするのに十分な表現力と人間工学に基づいています。この両方の簡単な例は、この本の後半にあります。Rustを使用すると、あるドメインから別のドメインに移行するスキルを構築できます。Webアプリを作成してRustを学習し、同じスキルを適用してRaspberry Piをターゲットにすることができます。</target>
        </trans-unit>
        <trans-unit id="c9bc5d1aa2362cf2e31f1ee01e7de1ef4e0a2d19" translate="yes" xml:space="preserve">
          <source>But again, the compiler gives us a helpful note:</source>
          <target state="translated">しかし、またしても、コンパイラが親切にメモをしてくれます。</target>
        </trans-unit>
        <trans-unit id="b5737faee592fa19b426fe0f0898f071a967af3e" translate="yes" xml:space="preserve">
          <source>But are the two implementations truly equivalent? The intuitive assumption might be that the more low-level loop will be faster. Let&amp;rsquo;s talk about performance.</source>
          <target state="translated">しかし、2つの実装は本当に同等ですか？直感的な仮定は、より低レベルのループがより高速になることです。パフォーマンスについて話しましょう。</target>
        </trans-unit>
        <trans-unit id="d5233374bc70817ae86cada9a53675c9bf92e0c7" translate="yes" xml:space="preserve">
          <source>But be sure to remember that valid Unicode scalar values may be made up of more than 1 byte.</source>
          <target state="translated">しかし、有効なUnicodeスカラ値は1バイト以上で構成されている可能性があることを覚えておいてください。</target>
        </trans-unit>
        <trans-unit id="0f72ae39afec7a59586e27c05c7b3e5e6adecf93" translate="yes" xml:space="preserve">
          <source>But before we get started, we should mention one detail: the method we&amp;rsquo;ll use won&amp;rsquo;t be the best way to build a web server with Rust. A number of production-ready crates are available on &lt;a href=&quot;https://crates.io/&quot;&gt;crates.io&lt;/a&gt; that provide more complete web server and thread pool implementations than we&amp;rsquo;ll build.</source>
          <target state="translated">ただし、始める前に、1つ詳細を説明する必要があります。ここで使用する方法は、RustでWebサーバーを構築するための最良の方法ではありません。多数の本番&lt;a href=&quot;https://crates.io/&quot;&gt;環境&lt;/a&gt;対応のクレートがcrates.ioから入手できます。これらは、私たちが構築するよりも完全なWebサーバーおよびスレッドプールの実装を提供します。</target>
        </trans-unit>
        <trans-unit id="2b053f01b33d2a55c1c75c2c507abf7135d9a246" translate="yes" xml:space="preserve">
          <source>But by default, Cargo will only look for versions greater than &lt;code&gt;0.3.0&lt;/code&gt; and less than &lt;code&gt;0.4.0&lt;/code&gt;. If the &lt;code&gt;rand&lt;/code&gt; crate has released two new versions, &lt;code&gt;0.3.15&lt;/code&gt; and &lt;code&gt;0.4.0&lt;/code&gt;, you would see the following if you ran &lt;code&gt;cargo update&lt;/code&gt;:</source>
          <target state="translated">ただし、デフォルトでは、Cargoは &lt;code&gt;0.3.0&lt;/code&gt; より大きく &lt;code&gt;0.4.0&lt;/code&gt; より小さいバージョンのみを検索します。 &lt;code&gt;rand&lt;/code&gt; &lt;code&gt;0.3.15&lt;/code&gt; と &lt;code&gt;0.4.0&lt;/code&gt; の 2つの新しいバージョンをリリースした場合、 &lt;code&gt;cargo update&lt;/code&gt; を実行すると次のようになります。</target>
        </trans-unit>
        <trans-unit id="041215ad4156f8d52d141c6b1d6e0db864c4a8a2" translate="yes" xml:space="preserve">
          <source>But by default, Cargo will only look for versions greater than &lt;code&gt;0.5.5&lt;/code&gt; and less than &lt;code&gt;0.6.0&lt;/code&gt;. If the &lt;code&gt;rand&lt;/code&gt; crate has released two new versions, &lt;code&gt;0.5.6&lt;/code&gt; and &lt;code&gt;0.6.0&lt;/code&gt;, you would see the following if you ran &lt;code&gt;cargo update&lt;/code&gt;:</source>
          <target state="translated">But by default, Cargo will only look for versions greater than &lt;code&gt;0.5.5&lt;/code&gt; and less than &lt;code&gt;0.6.0&lt;/code&gt; . If the &lt;code&gt;rand&lt;/code&gt; crate has released two new versions, &lt;code&gt;0.5.6&lt;/code&gt; and &lt;code&gt;0.6.0&lt;/code&gt; , you would see the following if you ran &lt;code&gt;cargo update&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="48958431e414a42071536586c915fe4c3022be36" translate="yes" xml:space="preserve">
          <source>But for now, let&amp;rsquo;s work around this problem using a handy trick. We can tell Rust explicitly that in this case we can take ownership of the value inside the &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; using &lt;code&gt;self: Box&amp;lt;Self&amp;gt;&lt;/code&gt;; then, once we have ownership of the closure, we can call it. This involves defining a new trait &lt;code&gt;FnBox&lt;/code&gt; with the method &lt;code&gt;call_box&lt;/code&gt; that will use &lt;code&gt;self: Box&amp;lt;Self&amp;gt;&lt;/code&gt; in its signature, defining &lt;code&gt;FnBox&lt;/code&gt; for any type that implements &lt;code&gt;FnOnce()&lt;/code&gt;, changing our type alias to use the new trait, and changing &lt;code&gt;Worker&lt;/code&gt; to use the &lt;code&gt;call_box&lt;/code&gt; method. These changes are shown in Listing 20-21.</source>
          <target state="translated">しかし、とりあえず、便利なトリックを使ってこの問題を回避しましょう。この場合、 &lt;code&gt;self: Box&amp;lt;Self&amp;gt;&lt;/code&gt; を使用して &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; 内の値の所有権を取得できることをRustに明示的に示すことができます。Box &amp;lt;Self&amp;gt; ;次に、クロージャーの所有権を取得したら、それを呼び出すことができます。これには、シグネチャで &lt;code&gt;self: Box&amp;lt;Self&amp;gt;&lt;/code&gt; を使用するメソッド &lt;code&gt;call_box&lt;/code&gt; で新しい特性 &lt;code&gt;FnBox&lt;/code&gt; を定義し、 &lt;code&gt;FnOnce()&lt;/code&gt; を実装する任意の型の &lt;code&gt;FnBox&lt;/code&gt; を定義し、新しい特性を使用するように型エイリアスを変更し、使用する &lt;code&gt;Worker&lt;/code&gt; を変更します &lt;code&gt;call_box&lt;/code&gt; の方法。これらの変更をリスト20-21に示します。</target>
        </trans-unit>
        <trans-unit id="0be702d32a09b655da72a7b7225dc839aaba10a3" translate="yes" xml:space="preserve">
          <source>But for the following two exceptions, this function is semantically equivalent to &lt;a href=&quot;../mem/fn.swap&quot;&gt;&lt;code&gt;mem::swap&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">ただし、次の2つの例外を除いて、この関数は意味的に&lt;a href=&quot;../mem/fn.swap&quot;&gt; &lt;code&gt;mem::swap&lt;/code&gt; &lt;/a&gt;と同等です。</target>
        </trans-unit>
        <trans-unit id="470268269eb0c32844b8d1e2e02e3f2f66584bd8" translate="yes" xml:space="preserve">
          <source>But if we used the different structs, which each have their own type, we couldn&amp;rsquo;t as easily define a function to take any of these kinds of messages as we could with the &lt;code&gt;Message&lt;/code&gt; enum defined in Listing 6-2, which is a single type.</source>
          <target state="translated">しかし、それぞれが独自のタイプを持つさまざまな構造体を使用した場合、リスト6-2で定義されている &lt;code&gt;Message&lt;/code&gt; 列挙型を使用する場合と同じように、これらの種類のメッセージを受け取る関数を簡単に定義できません。タイプ。</target>
        </trans-unit>
        <trans-unit id="79200d10e04d305f55f7036bcbaaafae7d4d999b" translate="yes" xml:space="preserve">
          <source>But if your closure has state, iterating backwards may act in a way you do not expect. Let's go through an example. First, in the forward direction:</source>
          <target state="translated">しかし、クロージャがステートを持っている場合、逆方向にイテレーションすると予期しない方法で動作することがあります。例を見てみましょう。まず、順方向に。</target>
        </trans-unit>
        <trans-unit id="42768b6451354f549c20c5936efbed0901a61a1c" translate="yes" xml:space="preserve">
          <source>But let&amp;rsquo;s see what happens when we instead move &lt;code&gt;handle.join()&lt;/code&gt; before the &lt;code&gt;for&lt;/code&gt; loop in &lt;code&gt;main&lt;/code&gt;, like this:</source>
          <target state="translated">しかし、次のように &lt;code&gt;main&lt;/code&gt; の &lt;code&gt;for&lt;/code&gt; ループの前に &lt;code&gt;handle.join()&lt;/code&gt; を移動するとどうなるか見てみましょう。</target>
        </trans-unit>
        <trans-unit id="1fbf462a87fb38288cb0e833c1357211d81cfbfe" translate="yes" xml:space="preserve">
          <source>But mutability can be very useful. Variables are immutable only by default; as you did in Chapter 2, you can make them mutable by adding &lt;code&gt;mut&lt;/code&gt; in front of the variable name. In addition to allowing this value to change, &lt;code&gt;mut&lt;/code&gt; conveys intent to future readers of the code by indicating that other parts of the code will be changing this variable value.</source>
          <target state="translated">しかし、可変性は非常に役立ちます。変数はデフォルトでのみ不変です。第2章で行ったように、変数名の前に &lt;code&gt;mut&lt;/code&gt; を追加することで、変数を変更可能にすることができます。この値の変更を許可することに加えて、 &lt;code&gt;mut&lt;/code&gt; はコードの他の部分がこの変数の値を変更することを示すことにより、コードの将来の読者に意図を伝えます。</target>
        </trans-unit>
        <trans-unit id="e1df74418ef370eb96db59d017c1ab1ddf4aab63" translate="yes" xml:space="preserve">
          <source>But mutability can be very useful. Variables are immutable only by default; as you did in Chapter 2, you can make them mutable by adding &lt;code&gt;mut&lt;/code&gt; in front of the variable name. In addition to allowing this value to change, &lt;code&gt;mut&lt;/code&gt; conveys intent to future readers of the code by indicating that other parts of the code will be changing this variable&amp;rsquo;s value.</source>
          <target state="translated">But mutability can be very useful. Variables are immutable only by default; as you did in Chapter 2, you can make them mutable by adding &lt;code&gt;mut&lt;/code&gt; in front of the variable name. In addition to allowing this value to change, &lt;code&gt;mut&lt;/code&gt; conveys intent to future readers of the code by indicating that other parts of the code will be changing this variable&amp;rsquo;s value.</target>
        </trans-unit>
        <trans-unit id="ca01c2ad1998dcba761dee195dffb89226d07502" translate="yes" xml:space="preserve">
          <source>But mutable references have one big restriction: you can have only one mutable reference to a particular piece of data in a particular scope. This code will fail:</source>
          <target state="translated">それは、特定のスコープ内の特定のデータに対するミュータブル参照は1つしか持てないということです。このコードは失敗します。</target>
        </trans-unit>
        <trans-unit id="c6250d5ccc2a1416a071df325ba8b22edb3b1273" translate="yes" xml:space="preserve">
          <source>But structs aren&amp;rsquo;t the only way you can create custom types: let&amp;rsquo;s turn to Rust&amp;rsquo;s enum feature to add another tool to your toolbox.</source>
          <target state="translated">ただし、構造体だけがカスタムタイプを作成できる唯一の方法ではありません。Rustの列挙型機能を使用して、ツールボックスに別のツールを追加しましょう。</target>
        </trans-unit>
        <trans-unit id="e46bfa80d370a9ed637759cea72a8f30b0485064" translate="yes" xml:space="preserve">
          <source>But this approach is error prone; we could cause the program to panic if the index length is incorrect. It&amp;rsquo;s also slow, because the compiler adds runtime code to perform the conditional check on every element on every iteration through the loop.</source>
          <target state="translated">ただし、このアプローチはエラーが発生しやすくなります。インデックスの長さが正しくないと、プログラムがパニックになる可能性があります。また、コンパイラはランタイムコードを追加して、ループのすべての反復ですべての要素の条件チェックを実行するため、処理が遅くなります。</target>
        </trans-unit>
        <trans-unit id="de89e89b70a2e3c19b2a830c292d1b9e969da48e" translate="yes" xml:space="preserve">
          <source>But this code does:</source>
          <target state="translated">しかし、このコードはそうです。</target>
        </trans-unit>
        <trans-unit id="52cdbd656052ab3ea671f0d02157a3b7b3a6c824" translate="yes" xml:space="preserve">
          <source>But this code seems to contradict what we just learned: we don&amp;rsquo;t have a call to &lt;code&gt;clone&lt;/code&gt;, but &lt;code&gt;x&lt;/code&gt; is still valid and wasn&amp;rsquo;t moved into &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="translated">しかし、このコードは、私たちが学んだことと矛盾するようだ：私たちはへの呼び出しがありません &lt;code&gt;clone&lt;/code&gt; が、 &lt;code&gt;x&lt;/code&gt; まだ有効であるとに移動されていなかった &lt;code&gt;y&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f041deb6530f49ecfbaae593b78e17efac482d38" translate="yes" xml:space="preserve">
          <source>But this is too much ceremony and a lot of work for a concept that should be common. Luckily for us, Rust has a feature for this concept, called &lt;em&gt;references&lt;/em&gt;.</source>
          <target state="translated">しかし、これはあまりにも多くの儀式であり、一般的であるはずの概念に対しては多くの作業です。幸運なことに、Rustにはこの概念の機能である&lt;em&gt;参照があり&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="2ad53668e46657588df9ef2114136e4f4dac0e42" translate="yes" xml:space="preserve">
          <source>But we also have to make some small changes to &lt;code&gt;main&lt;/code&gt;. The &lt;code&gt;request_review&lt;/code&gt; and &lt;code&gt;approve&lt;/code&gt; methods return new instances rather than modifying the struct they&amp;rsquo;re called on, so we need to add more &lt;code&gt;let post =&lt;/code&gt; shadowing assignments to save the returned instances. We also can&amp;rsquo;t have the assertions about the draft and pending review post&amp;rsquo;s contents be empty strings, nor do we need them: we can&amp;rsquo;t compile code that tries to use the content of posts in those states any longer. The updated code in &lt;code&gt;main&lt;/code&gt; is shown in Listing 17-21:</source>
          <target state="translated">しかし、 &lt;code&gt;main&lt;/code&gt; にもいくつかの小さな変更を加える必要があります。 &lt;code&gt;request_review&lt;/code&gt; と &lt;code&gt;approve&lt;/code&gt; の方法は、我々はより多く追加する必要があるので、むしろ彼らは上と呼ばれている構造体を修正するよりも、新しいインスタンスを返す &lt;code&gt;let post =&lt;/code&gt; 返されたインスタンスを保存するために割り当てをシャドウイング。また、ドラフトと保留中のレビュー投稿のコンテンツに関するアサーションを空の文字列にすることも、それらを必要とすることもできません。それらの状態で投稿のコンテンツを使用しようとするコードをコンパイルすることはできません。 &lt;code&gt;main&lt;/code&gt; で更新されたコードをリスト17-21に示します。</target>
        </trans-unit>
        <trans-unit id="08cb86c283fbceae016dfe9e91e73ec38c2b76a7" translate="yes" xml:space="preserve">
          <source>But we can&amp;rsquo;t implement external traits on external types. For example, we can&amp;rsquo;t implement the &lt;code&gt;Display&lt;/code&gt; trait on &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; within our &lt;code&gt;aggregator&lt;/code&gt; crate, because &lt;code&gt;Display&lt;/code&gt; and &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; are defined in the standard library and aren&amp;rsquo;t local to our &lt;code&gt;aggregator&lt;/code&gt; crate. This restriction is part of a property of programs called &lt;em&gt;coherence&lt;/em&gt;, and more specifically the &lt;em&gt;orphan rule&lt;/em&gt;, so named because the parent type is not present. This rule ensures that other people&amp;rsquo;s code can&amp;rsquo;t break your code and vice versa. Without the rule, two crates could implement the same trait for the same type, and Rust wouldn&amp;rsquo;t know which implementation to use.</source>
          <target state="translated">しかし、外部型に外部トレイトを実装することはできません。たとえば、 &lt;code&gt;Display&lt;/code&gt; と &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; は標準ライブラリで定義されており、 &lt;code&gt;aggregator&lt;/code&gt; クレートに対してローカルではないため、 &lt;code&gt;aggregator&lt;/code&gt; クレート内で &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; &lt;code&gt;Display&lt;/code&gt; トレイトを実装することはできません。この制限は、&lt;em&gt;coherence&lt;/em&gt;と呼ばれるプログラムのプロパティの一部であり、より具体的には、親タイプが存在しないために名前が付けられた&lt;em&gt;孤立ルール&lt;/em&gt;です。このルールは、他の人のコードがあなたのコードを壊したり、その逆をしたりできないことを保証します。ルールがなければ、2つの箱が同じ型に同じ特性を実装する可能性があり、Rustはどの実装を使用するかを知りません。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e2def28f767ccc15567e67d96a674194d2cda727" translate="yes" xml:space="preserve">
          <source>But we&amp;rsquo;re not quite done yet! In the worker, our closure being passed to &lt;code&gt;thread::spawn&lt;/code&gt; still only &lt;em&gt;references&lt;/em&gt; the receiving end of the channel. Instead, we need the closure to loop forever, asking the receiving end of the channel for a job and running the job when it gets one. Let&amp;rsquo;s make the change shown in Listing 20-20 to &lt;code&gt;Worker::new&lt;/code&gt;.</source>
          <target state="translated">しかし、まだ完了していません。ワーカーでは、 &lt;code&gt;thread::spawn&lt;/code&gt; に渡されるクロージャーは、チャネルの受信側のみを&lt;em&gt;参照&lt;/em&gt;します。代わりに、ループを永久にループして、チャネルの受信側にジョブを要求し、チャネルが取得されたときにジョブを実行する必要があります。リスト20-20で示されているように &lt;code&gt;Worker::new&lt;/code&gt; を変更してみましょう。</target>
        </trans-unit>
        <trans-unit id="91d9b7bfa8f54bae2ca712d22c222ac19da54446" translate="yes" xml:space="preserve">
          <source>But what use is a type you can never create values for? Recall the code from Listing 2-5; we&amp;rsquo;ve reproduced part of it here in Listing 19-26.</source>
          <target state="translated">しかし、値を作成できないタイプの用途は何ですか？リスト2-5のコードを思い出してください。リスト19-26では、その一部を再現しています。</target>
        </trans-unit>
        <trans-unit id="f5817afbaa27eca7b4e5b48d721c41770590cf6f" translate="yes" xml:space="preserve">
          <source>But when it comes to supporting this in traits, there are &lt;a href=&quot;https://smallcultfollowing.com/babysteps/blog/2019/10/26/async-fn-in-traits-are-hard/&quot;&gt;a few implementation issues&lt;/a&gt;. One of them is returning &lt;code&gt;impl Trait&lt;/code&gt; in traits is not supported, as it would require &lt;a href=&quot;https://github.com/rust-lang/rust/issues/44265&quot;&gt;Generic Associated Types&lt;/a&gt; to be supported:</source>
          <target state="translated">But when it comes to supporting this in traits, there are &lt;a href=&quot;https://smallcultfollowing.com/babysteps/blog/2019/10/26/async-fn-in-traits-are-hard/&quot;&gt;a few implementation issues&lt;/a&gt;. One of them is returning &lt;code&gt;impl Trait&lt;/code&gt; in traits is not supported, as it would require &lt;a href=&quot;https://github.com/rust-lang/rust/issues/44265&quot;&gt;Generic Associated Types&lt;/a&gt; to be supported:</target>
        </trans-unit>
        <trans-unit id="3b1144e8d867db6585bb0fed6af4e27df37f58b6" translate="yes" xml:space="preserve">
          <source>But you&amp;rsquo;ll more often see them used in this format, with the comment on a separate line above the code it&amp;rsquo;s annotating:</source>
          <target state="translated">しかし、この形式で使用されていることが多く、注釈を付けているコードの上の別の行にコメントが付いています。</target>
        </trans-unit>
        <trans-unit id="14c5580ac9c2810afbb01f7bb2cceb390e04edb0" translate="yes" xml:space="preserve">
          <source>By adding &lt;code&gt;--undo&lt;/code&gt; to the command, you can also undo a yank and allow projects to start depending on a version again:</source>
          <target state="translated">コマンドに &lt;code&gt;--undo&lt;/code&gt; を追加することで、ヤンクを元に戻し、バージョンに応じてプロジェクトを再開できるようにすることもできます。</target>
        </trans-unit>
        <trans-unit id="57268469c25c87f6ad4c099c6346794a32838869" translate="yes" xml:space="preserve">
          <source>By adding the &lt;code&gt;move&lt;/code&gt; keyword before the closure, we force the closure to take ownership of the values it&amp;rsquo;s using rather than allowing Rust to infer that it should borrow the values. The modification to Listing 16-3 shown in Listing 16-5 will compile and run as we intend:</source>
          <target state="translated">クロージャーの前に &lt;code&gt;move&lt;/code&gt; キーワードを追加することで、Rustが値を借用する必要があると推測するのではなく、クロージャーに使用している値の所有権を強制的に取得します。リスト16-5に示されているリスト16-3への変更は、意図したとおりにコンパイルおよび実行されます。</target>
        </trans-unit>
        <trans-unit id="24cf831e0672b0a0d0cb2aabe568cf79d0a637c3" translate="yes" xml:space="preserve">
          <source>By changing &lt;code&gt;impl PartialEq for Book&lt;/code&gt; to &lt;code&gt;impl PartialEq&amp;lt;BookFormat&amp;gt; for Book&lt;/code&gt;, we allow &lt;code&gt;BookFormat&lt;/code&gt;s to be compared with &lt;code&gt;Book&lt;/code&gt;s.</source>
          <target state="translated">変更することで、 &lt;code&gt;impl PartialEq for Book&lt;/code&gt; に &lt;code&gt;impl PartialEq&amp;lt;BookFormat&amp;gt; for Book&lt;/code&gt; 、我々は許可 &lt;code&gt;BookFormat&lt;/code&gt; sがと比較する &lt;code&gt;Book&lt;/code&gt; 秒。</target>
        </trans-unit>
        <trans-unit id="376ca023c76f3036478e22fdb169869008d8aa9e" translate="yes" xml:space="preserve">
          <source>By controlling which tests run, you can make sure your &lt;code&gt;cargo test&lt;/code&gt; results will be fast. When you&amp;rsquo;re at a point where it makes sense to check the results of the &lt;code&gt;ignored&lt;/code&gt; tests and you have time to wait for the results, you can run &lt;code&gt;cargo test -- --ignored&lt;/code&gt; instead.</source>
          <target state="translated">実行するテストを制御することにより、 &lt;code&gt;cargo test&lt;/code&gt; 結果が速くなることを確認できます。 &lt;code&gt;ignored&lt;/code&gt; テストの結果を確認する意味があり、結果を待つ時間がある場合は、代わりに &lt;code&gt;cargo test -- --ignored&lt;/code&gt; 実行できます。</target>
        </trans-unit>
        <trans-unit id="5a2bb1d27a87d404cc9474290490c53d74fd41c0" translate="yes" xml:space="preserve">
          <source>By convention, &lt;code&gt;self.cmp(&amp;amp;other)&lt;/code&gt; returns the ordering matching the expression &lt;code&gt;self &amp;lt;operator&amp;gt; other&lt;/code&gt; if true.</source>
          <target state="translated">慣例により、 &lt;code&gt;self.cmp(&amp;amp;other)&lt;/code&gt; は、true &lt;code&gt;self &amp;lt;operator&amp;gt; other&lt;/code&gt; 場合、式self &amp;lt;operator&amp;gt; otherに一致する順序を返します。</target>
        </trans-unit>
        <trans-unit id="de8a1d92f6dd3bd8db18180b7b2a50fb4ed9f5aa" translate="yes" xml:space="preserve">
          <source>By default &lt;code&gt;security_qos_flags&lt;/code&gt; is not set. It should be specified when opening a named pipe, to control to which degree a server process can act on behalf of a client process (security impersonation level).</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;security_qos_flags&lt;/code&gt; は設定されていません。名前付きパイプを開くときに指定して、サーバープロセスがクライアントプロセスに代わって動作できる度合い（セキュリティ偽装レベル）を制御します。</target>
        </trans-unit>
        <trans-unit id="6095051ff401d433de5d730cac4f12b5941e6537" translate="yes" xml:space="preserve">
          <source>By default &lt;code&gt;share_mode&lt;/code&gt; is set to &lt;code&gt;FILE_SHARE_READ | FILE_SHARE_WRITE | FILE_SHARE_DELETE&lt;/code&gt;. This allows other processes to read, write, and delete/rename the same file while it is open. Removing any of the flags will prevent other processes from performing the corresponding operation until the file handle is closed.</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;share_mode&lt;/code&gt; はFILE_SHARE_READに設定されてい &lt;code&gt;FILE_SHARE_READ | FILE_SHARE_WRITE | FILE_SHARE_DELETE&lt;/code&gt; 。これにより、他のプロセスが開いている間に同じファイルを読み取り、書き込み、削除/名前変更できます。フラグを削除すると、ファイルハンドルが閉じられるまで、他のプロセスが対応する操作を実行できなくなります。</target>
        </trans-unit>
        <trans-unit id="45de1662a54cdc16cef2847d72223197060768f7" translate="yes" xml:space="preserve">
          <source>By default external blocks assume that the library they are calling uses the standard C ABI on the specific platform. Other ABIs may be specified using an &lt;code&gt;abi&lt;/code&gt; string, as shown here:</source>
          <target state="translated">デフォルトでは、外部ブロックは、呼び出しているライブラリが特定のプラットフォームの標準C ABIを使用すると想定しています。以下に示すように、他のABIは &lt;code&gt;abi&lt;/code&gt; 文字列を使用して指定できます。</target>
        </trans-unit>
        <trans-unit id="fc473c24bd4f443ffeef08b0cf6f41ff8de8d915" translate="yes" xml:space="preserve">
          <source>By default, &lt;a href=&quot;keyword.match&quot;&gt;&lt;code&gt;match&lt;/code&gt;&lt;/a&gt; statements consume all they can, which can sometimes be a problem, when you don't really need the value to be moved and owned:</source>
          <target state="translated">By default, &lt;a href=&quot;keyword.match&quot;&gt; &lt;code&gt;match&lt;/code&gt; &lt;/a&gt; statements consume all they can, which can sometimes be a problem, when you don't really need the value to be moved and owned:</target>
        </trans-unit>
        <trans-unit id="ad11d86076f62fa9cc433e025f374e132c103f7a" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;HashMap&lt;/code&gt; uses a &amp;ldquo;cryptographically strong&amp;rdquo;&lt;sup&gt;&lt;a href=&quot;#siphash&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; hashing function that can provide resistance to Denial of Service (DoS) attacks. This is not the fastest hashing algorithm available, but the trade-off for better security that comes with the drop in performance is worth it. If you profile your code and find that the default hash function is too slow for your purposes, you can switch to another function by specifying a different &lt;em&gt;hasher&lt;/em&gt;. A hasher is a type that implements the &lt;code&gt;BuildHasher&lt;/code&gt; trait. We&amp;rsquo;ll talk about traits and how to implement them in Chapter 10. You don&amp;rsquo;t necessarily have to implement your own hasher from scratch; &lt;a href=&quot;https://crates.io/&quot;&gt;crates.io&lt;/a&gt; has libraries shared by other Rust users that provide hashers implementing many common hashing algorithms.</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;HashMap&lt;/code&gt; は「暗号的に強力な」&lt;sup&gt;&lt;a href=&quot;#siphash&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;ハッシュ関数を使用して、サービス拒否（DoS）攻撃への耐性を提供できます。これは利用可能な最速のハッシュアルゴリズムではありませんが、パフォーマンスの低下に伴うセキュリティの向上と引き換えに価値があります。コードのプロファイルを作成し、デフォルトのハッシュ関数が目的に対して遅すぎる場合は、別の&lt;em&gt;hasherを&lt;/em&gt;指定することで別の関数に切り替えることができます。ハッシャーは、 &lt;code&gt;BuildHasher&lt;/code&gt; トレイトを実装する型です。特性とその実装方法については、第10章で説明します。独自のハッシャーを最初から実装する必要はありません。&lt;a href=&quot;https://crates.io/&quot;&gt;crates.io&lt;/a&gt; 多くの一般的なハッシュアルゴリズムを実装するハッシャーを提供する他のRustユーザーが共有するライブラリがあります。</target>
        </trans-unit>
        <trans-unit id="da46918183f148a703a5dca98e668e41fe0f6742" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;HashMap&lt;/code&gt; uses a hashing algorithm selected to provide resistance against HashDoS attacks. The algorithm is randomly seeded, and a reasonable best-effort is made to generate this seed from a high quality, secure source of randomness provided by the host without blocking the program. Because of this, the randomness of the seed depends on the output quality of the system's random number generator when the seed is created. In particular, seeds generated when the system's entropy pool is abnormally low such as during system boot may be of a lower quality.</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;HashMap&lt;/code&gt; はHashDoS攻撃に対する耐性を提供するために選択されたハッシュアルゴリズムを使用します。アルゴリズムはランダムにシードされ、プログラムをブロックすることなくホストによって提供されるランダム性の高品質で安全なソースからこのシードを生成するために妥当な最善の努力がなされます。このため、シードのランダム性は、シード作成時のシステムの乱数ジェネレーターの出力品質に依存します。特に、システムのブート時など、システムのエントロピープールが異常に低い場合に生成されるシードは、品質が低くなる可能性があります。</target>
        </trans-unit>
        <trans-unit id="d651c937af4d96b8135fb3517b9d184e89c5453c" translate="yes" xml:space="preserve">
          <source>By default, Rust brings only a few types into the scope of every program in &lt;a href=&quot;../std/prelude/index&quot;&gt;the &lt;em&gt;prelude&lt;/em&gt;&lt;/a&gt;. If a type you want to use isn&amp;rsquo;t in the prelude, you have to bring that type into scope explicitly with a &lt;code&gt;use&lt;/code&gt; statement. Using the &lt;code&gt;std::io&lt;/code&gt; library provides you with a number of useful features, including the ability to accept user input.</source>
          <target state="translated">デフォルトでは、Rustは&lt;a href=&quot;../std/prelude/index&quot;&gt;、&lt;em&gt;プレリュード&lt;/em&gt;&lt;/a&gt;内のすべてのプログラムのスコープにいくつかのタイプのみをもたらします。使用したい型がプレリュードにない場合は、 &lt;code&gt;use&lt;/code&gt; ステートメントを使用して、その型を明示的にスコープに含める必要があります。 &lt;code&gt;std::io&lt;/code&gt; ライブラリを使用すると、ユーザー入力を受け入れる機能など、いくつかの便利な機能が提供されます。</target>
        </trans-unit>
        <trans-unit id="0c4c1f7def0235335f03f717a82baeaf139f3d6d" translate="yes" xml:space="preserve">
          <source>By default, a macro has no path-based scope. However, if it has the &lt;code&gt;#[macro_export]&lt;/code&gt; attribute, then it is declared in the crate root scope and can be referred to normally as such:</source>
          <target state="translated">デフォルトでは、マクロにはパスベースのスコープがありません。ただし、 &lt;code&gt;#[macro_export]&lt;/code&gt; 属性がある場合は、クレートルートスコープで宣言され、通常は次のように参照できます。</target>
        </trans-unit>
        <trans-unit id="0cbf310ab8fadfa7c76780733e623179e3214d1c" translate="yes" xml:space="preserve">
          <source>By default, all identifiers referred to in a macro are expanded as-is, and are looked up at the macro's invocation site. This can lead to issues if a macro refers to an item or macro which isn't in scope at the invocation site. To alleviate this, the &lt;code&gt;$crate&lt;/code&gt; metavariable can be used at the start of a path to force lookup to occur inside the crate defining the macro.</source>
          <target state="translated">デフォルトでは、マクロで参照されるすべての識別子はそのまま展開され、マクロの呼び出しサイトで検索されます。これにより、マクロが呼び出しサイトのスコープにないアイテムまたはマクロを参照する場合、問題が発生する可能性があります。これを軽減するために、パスの開始時に &lt;code&gt;$crate&lt;/code&gt; crateメタ変数を使用して、マクロを定義するクレート内でルックアップを強制的に実行できます。</target>
        </trans-unit>
        <trans-unit id="642089d05c107d61f37af46fec5f28d39e938fae" translate="yes" xml:space="preserve">
          <source>By default, all types in Rust are movable. Rust allows passing all types by-value, and common smart-pointer types such as &lt;a href=&quot;../boxed/struct.box&quot;&gt;&lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;&amp;amp;mut T&lt;/code&gt; allow replacing and moving the values they contain: you can move out of a &lt;a href=&quot;../boxed/struct.box&quot;&gt;&lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;, or you can use &lt;a href=&quot;../mem/fn.swap&quot;&gt;&lt;code&gt;mem::swap&lt;/code&gt;&lt;/a&gt;. &lt;a href=&quot;struct.pin&quot;&gt;&lt;code&gt;Pin&amp;lt;P&amp;gt;&lt;/code&gt;&lt;/a&gt; wraps a pointer type &lt;code&gt;P&lt;/code&gt;, so &lt;a href=&quot;struct.pin&quot;&gt;&lt;code&gt;Pin&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;a href=&quot;../boxed/struct.box&quot;&gt;&lt;code&gt;Box&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt; functions much like a regular &lt;a href=&quot;../boxed/struct.box&quot;&gt;&lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;: when a &lt;a href=&quot;struct.pin&quot;&gt;&lt;code&gt;Pin&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;a href=&quot;../boxed/struct.box&quot;&gt;&lt;code&gt;Box&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt; gets dropped, so do its contents, and the memory gets deallocated. Similarly, &lt;a href=&quot;struct.pin&quot;&gt;&lt;code&gt;Pin&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;&amp;amp;mut T&amp;gt;&lt;/code&gt; is a lot like &lt;code&gt;&amp;amp;mut T&lt;/code&gt;. However, &lt;a href=&quot;struct.pin&quot;&gt;&lt;code&gt;Pin&amp;lt;P&amp;gt;&lt;/code&gt;&lt;/a&gt; does not let clients actually obtain a &lt;a href=&quot;../boxed/struct.box&quot;&gt;&lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; or &lt;code&gt;&amp;amp;mut T&lt;/code&gt; to pinned data, which implies that you cannot use operations such as &lt;a href=&quot;../mem/fn.swap&quot;&gt;&lt;code&gt;mem::swap&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">By default, all types in Rust are movable. Rust allows passing all types by-value, and common smart-pointer types such as &lt;a href=&quot;../boxed/struct.box&quot;&gt; &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; &lt;/a&gt; and &lt;code&gt;&amp;amp;mut T&lt;/code&gt; allow replacing and moving the values they contain: you can move out of a &lt;a href=&quot;../boxed/struct.box&quot;&gt; &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; &lt;/a&gt;, or you can use &lt;a href=&quot;../mem/fn.swap&quot;&gt; &lt;code&gt;mem::swap&lt;/code&gt; &lt;/a&gt;. &lt;a href=&quot;struct.pin&quot;&gt; &lt;code&gt;Pin&amp;lt;P&amp;gt;&lt;/code&gt; &lt;/a&gt; wraps a pointer type &lt;code&gt;P&lt;/code&gt; , so &lt;a href=&quot;struct.pin&quot;&gt; &lt;code&gt;Pin&lt;/code&gt; &lt;/a&gt; &lt;code&gt;&amp;lt;&lt;/code&gt; &lt;a href=&quot;../boxed/struct.box&quot;&gt; &lt;code&gt;Box&lt;/code&gt; &lt;/a&gt; &lt;code&gt;&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt; functions much like a regular &lt;a href=&quot;../boxed/struct.box&quot;&gt; &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; &lt;/a&gt;: when a &lt;a href=&quot;struct.pin&quot;&gt; &lt;code&gt;Pin&lt;/code&gt; &lt;/a&gt; &lt;code&gt;&amp;lt;&lt;/code&gt; &lt;a href=&quot;../boxed/struct.box&quot;&gt; &lt;code&gt;Box&lt;/code&gt; &lt;/a&gt; &lt;code&gt;&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt; gets dropped, so do its contents, and the memory gets deallocated. Similarly, &lt;a href=&quot;struct.pin&quot;&gt; &lt;code&gt;Pin&lt;/code&gt; &lt;/a&gt; &lt;code&gt;&amp;lt;&amp;amp;mut T&amp;gt;&lt;/code&gt; is a lot like &lt;code&gt;&amp;amp;mut T&lt;/code&gt; . However, &lt;a href=&quot;struct.pin&quot;&gt; &lt;code&gt;Pin&amp;lt;P&amp;gt;&lt;/code&gt; &lt;/a&gt; does not let clients actually obtain a &lt;a href=&quot;../boxed/struct.box&quot;&gt; &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; &lt;/a&gt; or &lt;code&gt;&amp;amp;mut T&lt;/code&gt; to pinned data, which implies that you cannot use operations such as &lt;a href=&quot;../mem/fn.swap&quot;&gt; &lt;code&gt;mem::swap&lt;/code&gt; &lt;/a&gt;:</target>
        </trans-unit>
        <trans-unit id="85f73f88e9b11f78d793846432896a45a47d865c" translate="yes" xml:space="preserve">
          <source>By default, all types in Rust are movable. Rust allows passing all types by-value, and common smart-pointer types such as &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;amp;mut T&lt;/code&gt; allow replacing and moving the values they contain: you can move out of a &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt;, or you can use &lt;a href=&quot;../mem/fn.swap&quot;&gt;&lt;code&gt;mem::swap&lt;/code&gt;&lt;/a&gt;. &lt;a href=&quot;struct.pin&quot;&gt;&lt;code&gt;Pin&amp;lt;P&amp;gt;&lt;/code&gt;&lt;/a&gt; wraps a pointer type &lt;code&gt;P&lt;/code&gt;, so &lt;code&gt;Pin&amp;lt;Box&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt; functions much like a regular &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt;: when a &lt;code&gt;Pin&amp;lt;Box&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt; gets dropped, so do its contents, and the memory gets deallocated. Similarly, &lt;code&gt;Pin&amp;lt;&amp;amp;mut T&amp;gt;&lt;/code&gt; is a lot like &lt;code&gt;&amp;amp;mut T&lt;/code&gt;. However, &lt;a href=&quot;struct.pin&quot;&gt;&lt;code&gt;Pin&amp;lt;P&amp;gt;&lt;/code&gt;&lt;/a&gt; does not let clients actually obtain a &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;amp;mut T&lt;/code&gt; to pinned data, which implies that you cannot use operations such as &lt;a href=&quot;../mem/fn.swap&quot;&gt;&lt;code&gt;mem::swap&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">デフォルトでは、Rustのすべてのタイプは移動可能です。 Rustはすべての型を値で渡すことができ、 &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; や &lt;code&gt;&amp;amp;mut T&lt;/code&gt; などの一般的なスマートポインター型は、それらに含まれる値を置き換えたり移動したりできます&lt;a href=&quot;../mem/fn.swap&quot;&gt; &lt;code&gt;mem::swap&lt;/code&gt; &lt;/a&gt; &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; 外に移動したり、memを使用したりできます。 ：swap。&lt;a href=&quot;struct.pin&quot;&gt; &lt;code&gt;Pin&amp;lt;P&amp;gt;&lt;/code&gt; &lt;/a&gt;ポインタ型のラップ &lt;code&gt;P&lt;/code&gt; を、そう &lt;code&gt;Pin&amp;lt;Box&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt; ずっと定期的に同様の機能 &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; ： &lt;code&gt;Pin&amp;lt;Box&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt; ので、その内容を行い、切断されます、そしてメモリが割り当て解除を取得。同様に、 &lt;code&gt;Pin&amp;lt;&amp;amp;mut T&amp;gt;&lt;/code&gt; は &lt;code&gt;&amp;amp;mut T&lt;/code&gt; によく似ています。ただし、&lt;a href=&quot;struct.pin&quot;&gt; &lt;code&gt;Pin&amp;lt;P&amp;gt;&lt;/code&gt; &lt;/a&gt;クライアントが実際に取得することはできません &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; または &lt;code&gt;&amp;amp;mut T&lt;/code&gt; 固定データ。これは、&lt;a href=&quot;../mem/fn.swap&quot;&gt; &lt;code&gt;mem::swap&lt;/code&gt; &lt;/a&gt;などの操作を使用できないことを意味します。</target>
        </trans-unit>
        <trans-unit id="df4968e3432ef000f1bcc3fb95cf2b7eb0f19a6b" translate="yes" xml:space="preserve">
          <source>By default, everything in Rust is &lt;em&gt;private&lt;/em&gt;, with two exceptions: Associated items in a &lt;code&gt;pub&lt;/code&gt; Trait are public by default; Enum variants in a &lt;code&gt;pub&lt;/code&gt; enum are also public by default. When an item is declared as &lt;code&gt;pub&lt;/code&gt;, it can be thought of as being accessible to the outside world. For example:</source>
          <target state="translated">デフォルトでは、Rustのすべてが&lt;em&gt;非公開ですが&lt;/em&gt;、次の2つの例外があり &lt;code&gt;pub&lt;/code&gt; 。pub Traitの関連アイテムはデフォルトで公開されています。 &lt;code&gt;pub&lt;/code&gt; enumのEnumバリアントもデフォルトでパブリックです。アイテムが &lt;code&gt;pub&lt;/code&gt; として宣言されている場合、そのアイテムは外部からアクセスできると考えることができます。例えば：</target>
        </trans-unit>
        <trans-unit id="e8c258fdae97b1ecf4c355834b8cc2789a53356b" translate="yes" xml:space="preserve">
          <source>By default, generic functions will work only on types that have a known size at compile time. However, you can use the following special syntax to relax this restriction:</source>
          <target state="translated">デフォルトでは、ジェネリック関数はコンパイル時に既知のサイズを持つ型に対してのみ動作します。しかし、この制限を緩和するために、以下の特別な構文を使用することができます。</target>
        </trans-unit>
        <trans-unit id="a9c4cd7fe13c5d5855eca814505fcc712b580495" translate="yes" xml:space="preserve">
          <source>By default, identifier patterns bind a variable to a copy of or move from the matched value depending on whether the matched value implements &lt;a href=&quot;special-types-and-traits#copy&quot;&gt;&lt;code&gt;Copy&lt;/code&gt;&lt;/a&gt;. This can be changed to bind to a reference by using the &lt;code&gt;ref&lt;/code&gt; keyword, or to a mutable reference using &lt;code&gt;ref mut&lt;/code&gt;. For example:</source>
          <target state="translated">デフォルトでは、識別子パターンは、一致した値が&lt;a href=&quot;special-types-and-traits#copy&quot;&gt; &lt;code&gt;Copy&lt;/code&gt; を&lt;/a&gt;実装しているかどうかに応じて、変数を一致した値のコピーにバインドするか、一致した値から移動します。これは、 &lt;code&gt;ref&lt;/code&gt; キーワードを使用して参照にバインドするか、 &lt;code&gt;ref mut&lt;/code&gt; を使用して変更可能な参照にバインドするように変更できます。例えば：</target>
        </trans-unit>
        <trans-unit id="972aa10d3aec7b320258dca3f2fe0bcadcd844ff" translate="yes" xml:space="preserve">
          <source>By default, if a test passes, Rust&amp;rsquo;s test library captures anything printed to standard output. For example, if we call &lt;code&gt;println!&lt;/code&gt; in a test and the test passes, we won&amp;rsquo;t see the &lt;code&gt;println!&lt;/code&gt; output in the terminal; we&amp;rsquo;ll see only the line that indicates the test passed. If a test fails, we&amp;rsquo;ll see whatever was printed to standard output with the rest of the failure message.</source>
          <target state="translated">デフォルトでは、テストに合格すると、Rustのテストライブラリは標準出力に出力されたものをすべてキャプチャします。たとえば、 &lt;code&gt;println!&lt;/code&gt; テストでテストに合格すると、 &lt;code&gt;println!&lt;/code&gt; は表示されません。端末での出力。合格したテストを示す行のみが表示されます。テストが失敗すると、標準出力に出力されたすべてのものが表示され、残りの失敗メッセージが表示されます。</target>
        </trans-unit>
        <trans-unit id="d95184642912361a38b12a6b5acfd4cc05172698" translate="yes" xml:space="preserve">
          <source>By default, stdin, stdout and stderr are inherited from the parent.</source>
          <target state="translated">デフォルトでは、stdin、stdout、stderrは親から継承されます。</target>
        </trans-unit>
        <trans-unit id="f620f1067d553e3bfb80fd71b1c203148dc846fc" translate="yes" xml:space="preserve">
          <source>By default, stdin, stdout and stderr are inherited from the parent. In order to capture the output into this &lt;code&gt;Result&amp;lt;Output&amp;gt;&lt;/code&gt; it is necessary to create new pipes between parent and child. Use &lt;code&gt;stdout(Stdio::piped())&lt;/code&gt; or &lt;code&gt;stderr(Stdio::piped())&lt;/code&gt;, respectively.</source>
          <target state="translated">デフォルトでは、stdin、stdout、およびstderrは親から継承されます。この &lt;code&gt;Result&amp;lt;Output&amp;gt;&lt;/code&gt; に出力をキャプチャするには、親と子の間に新しいパイプを作成する必要があります。使用 &lt;code&gt;stdout(Stdio::piped())&lt;/code&gt; または &lt;code&gt;stderr(Stdio::piped())&lt;/code&gt; 、それぞれ。</target>
        </trans-unit>
        <trans-unit id="1a3d2a96946537e440c011c1b793bac6cb6bf93c" translate="yes" xml:space="preserve">
          <source>By default, stdout and stderr are captured (and used to provide the resulting output). Stdin is not inherited from the parent and any attempt by the child process to read from the stdin stream will result in the stream immediately closing.</source>
          <target state="translated">デフォルトでは、stdout と stderr はキャプチャされます (そして結果の出力を提供するために使用されます)。Stdin は親からは継承されず、子プロセスが stdin ストリームから読み込もうとすると、そのストリームは即座に閉じられます。</target>
        </trans-unit>
        <trans-unit id="ef6b7759d538ef3f99e9eadac17fdfe2aa668d92" translate="yes" xml:space="preserve">
          <source>By default, variable bindings have 'move semantics.' In other words:</source>
          <target state="translated">デフォルトでは、変数バインディングは 'move semantics' を持っています。言い換えれば</target>
        </trans-unit>
        <trans-unit id="07d2d74e176689aec98a3f3118957a0424dbbe81" translate="yes" xml:space="preserve">
          <source>By default, variables in Rust are immutable. To fix this error, add the keyword &lt;code&gt;mut&lt;/code&gt; after the keyword &lt;code&gt;let&lt;/code&gt; when declaring the variable. For example:</source>
          <target state="translated">デフォルトでは、Rustの変数は不変です。このエラーを修正するには、変数を宣言するときにキーワード &lt;code&gt;let&lt;/code&gt; の後にキーワード &lt;code&gt;mut&lt;/code&gt; を追加します。例えば：</target>
        </trans-unit>
        <trans-unit id="878411518946b9f6ea5793ecae83ce111ee3e9e7" translate="yes" xml:space="preserve">
          <source>By default, when a panic occurs, the program starts &lt;em&gt;unwinding&lt;/em&gt;, which means Rust walks back up the stack and cleans up the data from each function it encounters. But this walking back and cleanup is a lot of work. The alternative is to immediately &lt;em&gt;abort&lt;/em&gt;, which ends the program without cleaning up. Memory that the program was using will then need to be cleaned up by the operating system. If in your project you need to make the resulting binary as small as possible, you can switch from unwinding to aborting upon a panic by adding &lt;code&gt;panic = 'abort'&lt;/code&gt; to the appropriate &lt;code&gt;[profile]&lt;/code&gt; sections in your &lt;em&gt;Cargo.toml&lt;/em&gt; file. For example, if you want to abort on panic in release mode, add this:</source>
          <target state="translated">デフォルトでは、パニックが発生すると、プログラムは&lt;em&gt;巻き戻しを&lt;/em&gt;開始します。つまり、Rustはスタックを元に&lt;em&gt;戻し&lt;/em&gt;、発生した各関数のデータをクリーンアップします。しかし、このウォーキングとクリーンアップは多くの作業です。代わりの方法は、ただちに&lt;em&gt;中止して&lt;/em&gt;、クリーンアップせずにプログラムを終了することです。プログラムが使用していたメモリは、オペレーティングシステムによってクリーンアップされる必要があります。プロジェクトで結果のバイナリを可能な限り小さくする必要がある場合は、&lt;em&gt;Cargo.toml&lt;/em&gt;ファイルの適切な &lt;code&gt;[profile]&lt;/code&gt; セクションに &lt;code&gt;panic = 'abort'&lt;/code&gt; を追加することで、パニック時に巻き戻しから中止に切り替えることができます。たとえば、リリースモードでパニックが発生した場合は、次のように追加します。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="70961236b49c3241db36d35bd68586bfb070a6d8" translate="yes" xml:space="preserve">
          <source>By implementing &lt;code&gt;FromIterator&lt;/code&gt; for a type, you define how it will be created from an iterator. This is common for types which describe a collection of some kind.</source>
          <target state="translated">タイプに &lt;code&gt;FromIterator&lt;/code&gt; を実装することにより、イテレーターからそれを作成する方法を定義します。これは、ある種のコレクションを表す型に共通です。</target>
        </trans-unit>
        <trans-unit id="8fe6d2f7538ddf4711df03e9fa6aac2aec872193" translate="yes" xml:space="preserve">
          <source>By implementing &lt;code&gt;IntoIterator&lt;/code&gt; for a type, you define how it will be converted to an iterator. This is common for types which describe a collection of some kind.</source>
          <target state="translated">型に &lt;code&gt;IntoIterator&lt;/code&gt; を実装することにより、型をイテレーターに変換する方法を定義します。これは、ある種のコレクションを表す型に共通です。</target>
        </trans-unit>
        <trans-unit id="a0afc41378ee2d3e0b24873888e49fe44ab2bb88" translate="yes" xml:space="preserve">
          <source>By implementing the state pattern exactly as it&amp;rsquo;s defined for object-oriented languages, we&amp;rsquo;re not taking as full advantage of Rust&amp;rsquo;s strengths as we could. Let&amp;rsquo;s look at some changes we can make to the &lt;code&gt;blog&lt;/code&gt; crate that can make invalid states and transitions into compile time errors.</source>
          <target state="translated">オブジェクト指向言語に対して定義されているとおりに状態パターンを実装することにより、Rustの強みを最大限に活用できなくなります。無効な状態になり、コンパイル時エラーに移行する可能性がある、 &lt;code&gt;blog&lt;/code&gt; クレートに加えることができるいくつかの変更を見てみましょう。</target>
        </trans-unit>
        <trans-unit id="46180f00b512e17d9f64273f452da441a283a2bb" translate="yes" xml:space="preserve">
          <source>By inserting the &lt;code&gt;unsafe&lt;/code&gt; block around our call to &lt;code&gt;dangerous&lt;/code&gt;, we&amp;rsquo;re asserting to Rust that we&amp;rsquo;ve read the function&amp;rsquo;s documentation, we understand how to use it properly, and we&amp;rsquo;ve verified that we&amp;rsquo;re fulfilling the contract of the function.</source>
          <target state="translated">&lt;code&gt;dangerous&lt;/code&gt; への呼び出しの周りに &lt;code&gt;unsafe&lt;/code&gt; ブロックを挿入することにより、関数のドキュメントを読み、それを適切に使用する方法を理解し、関数の規約を満たしていることを確認したことをRustに主張しています。</target>
        </trans-unit>
        <trans-unit id="ebd43141acc082c32de2ba198e30637d83a5941d" translate="yes" xml:space="preserve">
          <source>By introducing the explicit &lt;code&gt;let value&lt;/code&gt;, we allocate storage that will last until the end of the enclosing block (when &lt;code&gt;value&lt;/code&gt; goes out of scope). When we borrow &lt;code&gt;&amp;amp;value&lt;/code&gt;, we are borrowing a local variable that already exists, and hence no temporary is created.</source>
          <target state="translated">明示的な &lt;code&gt;let value&lt;/code&gt; 導入することで、囲みブロックの最後（ &lt;code&gt;value&lt;/code&gt; がスコープ外になるとき）まで続くストレージを割り当てます。私たちが借りたとき &lt;code&gt;&amp;amp;value&lt;/code&gt; 、我々はすでに存在しているローカル変数を借りている、したがって一切の一時は作成されません。</target>
        </trans-unit>
        <trans-unit id="69e12568cda798dc4c41d36b6782b17be36886bc" translate="yes" xml:space="preserve">
          <source>By now, you&amp;rsquo;ve learned the most commonly used parts of the Rust programming language. Before we do one more project in Chapter 20, we&amp;rsquo;ll look at a few aspects of the language you might run into every once in a while. You can use this chapter as a reference for when you encounter any unknowns when using Rust. The features you&amp;rsquo;ll learn to use in this chapter are useful in very specific situations. Although you might not reach for them often, we want to make sure you have a grasp of all the features Rust has to offer.</source>
          <target state="translated">ここまでで、Rustプログラミング言語の最も一般的に使用される部分を学びました。第20章でもう1つのプロジェクトを実行する前に、時々遭遇する可能性のある言語のいくつかの側面を見ていきます。この章は、Rustを使用しているときに不明な点が発生した場合の参考資料として使用できます。この章で学習する機能は、非常に特殊な状況で役立ちます。あまり手が届かない場合もありますが、Rustが提供するすべての機能を確実に把握しておく必要があります。</target>
        </trans-unit>
        <trans-unit id="3b8d2c5ef438bc901d43221175865fde334c590c" translate="yes" xml:space="preserve">
          <source>By opting out of having Rust enforce these guarantees, you can give up guaranteed safety in exchange for greater performance or the ability to interface with another language or hardware where Rust&amp;rsquo;s guarantees don&amp;rsquo;t apply.</source>
          <target state="translated">Rustがこれらの保証を強制することをオプトアウトすることで、パフォーマンスの向上や、Rustの保証が適用されない別の言語やハードウェアとのインターフェース機能と引き換えに、保証された安全性を放棄できます。</target>
        </trans-unit>
        <trans-unit id="27764f2a26f0e207cc2fb6a676294f8c54a5721a" translate="yes" xml:space="preserve">
          <source>By requesting the current thread, using the &lt;a href=&quot;fn.current&quot;&gt;&lt;code&gt;thread::current&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">&lt;a href=&quot;fn.current&quot;&gt; &lt;code&gt;thread::current&lt;/code&gt; &lt;/a&gt;関数を使用して、現在のスレッドを要求する。</target>
        </trans-unit>
        <trans-unit id="cbc7153ee55504f6099241a26bcc3f7667184521" translate="yes" xml:space="preserve">
          <source>By spawning a new thread, e.g., using the &lt;a href=&quot;fn.spawn&quot;&gt;&lt;code&gt;thread::spawn&lt;/code&gt;&lt;/a&gt; function, and calling &lt;a href=&quot;struct.joinhandle#method.thread&quot;&gt;&lt;code&gt;thread&lt;/code&gt;&lt;/a&gt; on the &lt;a href=&quot;struct.joinhandle&quot;&gt;&lt;code&gt;JoinHandle&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">たとえば&lt;a href=&quot;fn.spawn&quot;&gt; &lt;code&gt;thread::spawn&lt;/code&gt; &lt;/a&gt;関数を使用して新しいスレッドを生成し、&lt;a href=&quot;struct.joinhandle&quot;&gt; &lt;code&gt;JoinHandle&lt;/code&gt; で&lt;/a&gt;&lt;a href=&quot;struct.joinhandle#method.thread&quot;&gt; &lt;code&gt;thread&lt;/code&gt; &lt;/a&gt;を呼び出します。</target>
        </trans-unit>
        <trans-unit id="12606d21fd7d24ec782af86e2fc775ab3b2a1534" translate="yes" xml:space="preserve">
          <source>By the same token, if your slice includes the last byte of the &lt;code&gt;String&lt;/code&gt;, you can drop the trailing number. That means these are equal:</source>
          <target state="translated">同様に、スライスに &lt;code&gt;String&lt;/code&gt; の最後のバイトが含まれている場合は、末尾の数字を削除できます。つまり、これらは等しいということです。</target>
        </trans-unit>
        <trans-unit id="eed2e06fae66dfdcb759c3aa75071abdbcec3d30" translate="yes" xml:space="preserve">
          <source>By using &lt;code&gt;impl Summary&lt;/code&gt; for the return type, we specify that the &lt;code&gt;returns_summarizable&lt;/code&gt; function returns some type that implements the &lt;code&gt;Summary&lt;/code&gt; trait without naming the concrete type. In this case, &lt;code&gt;returns_summarizable&lt;/code&gt; returns a &lt;code&gt;Tweet&lt;/code&gt;, but the code calling this function doesn&amp;rsquo;t know that.</source>
          <target state="translated">戻り値の型に &lt;code&gt;impl Summary&lt;/code&gt; を使用することにより、 &lt;code&gt;returns_summarizable&lt;/code&gt; 関数が具象型に名前を付けずに &lt;code&gt;Summary&lt;/code&gt; 特性を実装する型を返すように指定します。この場合、 &lt;code&gt;returns_summarizable&lt;/code&gt; は &lt;code&gt;Tweet&lt;/code&gt; を返しますが、この関数を呼び出すコードはそれを知りません。</target>
        </trans-unit>
        <trans-unit id="e9aacb122cfae0a7a0d083ca40090e9b5f6410c8" translate="yes" xml:space="preserve">
          <source>By using &lt;code&gt;loop&lt;/code&gt; instead and acquiring the lock and a job within the block rather than outside it, the &lt;code&gt;MutexGuard&lt;/code&gt; returned from the &lt;code&gt;lock&lt;/code&gt; method is dropped as soon as the &lt;code&gt;let job&lt;/code&gt; statement ends. This ensures that the lock is held during the call to &lt;code&gt;recv&lt;/code&gt;, but it is released before the call to &lt;code&gt;job.call_box()&lt;/code&gt;, allowing multiple requests to be serviced concurrently.</source>
          <target state="translated">代わりに &lt;code&gt;loop&lt;/code&gt; を使用して、ロックとブロックの外側ではなくブロック内のジョブを取得することにより、 &lt;code&gt;lock&lt;/code&gt; メソッドから返された &lt;code&gt;MutexGuard&lt;/code&gt; は、 &lt;code&gt;let job&lt;/code&gt; ステートメントが終了するとすぐに削除されます。これにより、 &lt;code&gt;recv&lt;/code&gt; の呼び出し中にロックが確実に保持されますが、 &lt;code&gt;job.call_box()&lt;/code&gt; の呼び出しの前にロックが解放されるため、複数の要求を同時に処理できます。</target>
        </trans-unit>
        <trans-unit id="a1dc62ff68dd92e2b08c605e1735e02b6fb42d3d" translate="yes" xml:space="preserve">
          <source>By using &lt;code&gt;loop&lt;/code&gt; instead and acquiring the lock without assigning to a variable, the temporary &lt;code&gt;MutexGuard&lt;/code&gt; returned from the &lt;code&gt;lock&lt;/code&gt; method is dropped as soon as the &lt;code&gt;let job&lt;/code&gt; statement ends. This ensures that the lock is held during the call to &lt;code&gt;recv&lt;/code&gt;, but it is released before the call to &lt;code&gt;job()&lt;/code&gt;, allowing multiple requests to be serviced concurrently.</source>
          <target state="translated">By using &lt;code&gt;loop&lt;/code&gt; instead and acquiring the lock without assigning to a variable, the temporary &lt;code&gt;MutexGuard&lt;/code&gt; returned from the &lt;code&gt;lock&lt;/code&gt; method is dropped as soon as the &lt;code&gt;let job&lt;/code&gt; statement ends. This ensures that the lock is held during the call to &lt;code&gt;recv&lt;/code&gt; , but it is released before the call to &lt;code&gt;job()&lt;/code&gt; , allowing multiple requests to be serviced concurrently.</target>
        </trans-unit>
        <trans-unit id="96a33cddb0085e977a7cbf3fab6625f1af56ae11" translate="yes" xml:space="preserve">
          <source>By using &lt;code&gt;pub use&lt;/code&gt;, external code can now call the &lt;code&gt;add_to_waitlist&lt;/code&gt; function using &lt;code&gt;hosting::add_to_waitlist&lt;/code&gt;. If we hadn&amp;rsquo;t specified &lt;code&gt;pub use&lt;/code&gt;, the &lt;code&gt;eat_at_restaurant&lt;/code&gt; function could call &lt;code&gt;hosting::add_to_waitlist&lt;/code&gt; in its scope, but external code couldn&amp;rsquo;t take advantage of this new path.</source>
          <target state="translated">&lt;code&gt;pub use&lt;/code&gt; を使用することにより、外部コードは &lt;code&gt;hosting::add_to_waitlist&lt;/code&gt; を使用して &lt;code&gt;add_to_waitlist&lt;/code&gt; 関数を呼び出すことができるようになりました。 &lt;code&gt;pub use&lt;/code&gt; を指定していない場合、 &lt;code&gt;eat_at_restaurant&lt;/code&gt; 関数はスコープ内で &lt;code&gt;hosting::add_to_waitlist&lt;/code&gt; を呼び出すことができますが、外部コードはこの新しいパスを利用できません。</target>
        </trans-unit>
        <trans-unit id="433cfee29840720f9bbafd30efe0a38d5e74bfb2" translate="yes" xml:space="preserve">
          <source>By using &lt;code&gt;unsafe impl&lt;/code&gt;, we&amp;rsquo;re promising that we&amp;rsquo;ll uphold the invariants that the compiler can&amp;rsquo;t verify.</source>
          <target state="translated">&lt;code&gt;unsafe impl&lt;/code&gt; を使用することにより、コンパイラーが検証できない不変条件を維持することを約束します。</target>
        </trans-unit>
        <trans-unit id="9f1a9fce35b987ffd7d1760b4240dc3939988c2c" translate="yes" xml:space="preserve">
          <source>By using a trait bound with an &lt;code&gt;impl&lt;/code&gt; block that uses generic type parameters, we can implement methods conditionally for types that implement the specified traits. For example, the type &lt;code&gt;Pair&amp;lt;T&amp;gt;&lt;/code&gt; in Listing 10-16 always implements the &lt;code&gt;new&lt;/code&gt; function. But &lt;code&gt;Pair&amp;lt;T&amp;gt;&lt;/code&gt; only implements the &lt;code&gt;cmp_display&lt;/code&gt; method if its inner type &lt;code&gt;T&lt;/code&gt; implements the &lt;code&gt;PartialOrd&lt;/code&gt; trait that enables comparison &lt;em&gt;and&lt;/em&gt; the &lt;code&gt;Display&lt;/code&gt; trait that enables printing.</source>
          <target state="translated">ジェネリック型パラメーターを使用する &lt;code&gt;impl&lt;/code&gt; ブロックにバインドされた特性を使用することにより、指定された特性を実装する型に対して条件付きでメソッドを実装できます。たとえば、リスト10-16の &lt;code&gt;Pair&amp;lt;T&amp;gt;&lt;/code&gt; 型は常に &lt;code&gt;new&lt;/code&gt; 関数を実装します。しかし、 &lt;code&gt;Pair&amp;lt;T&amp;gt;&lt;/code&gt; 唯一の実装 &lt;code&gt;cmp_display&lt;/code&gt; の方法を場合は、その内側型 &lt;code&gt;T&lt;/code&gt; の実装 &lt;code&gt;PartialOrd&lt;/code&gt; 比較可能な形質&lt;em&gt;と&lt;/em&gt; &lt;code&gt;Display&lt;/code&gt; 印刷可能形質を。</target>
        </trans-unit>
        <trans-unit id="e575a61c7bb4198f04719172d2b19e840714927a" translate="yes" xml:space="preserve">
          <source>By using modules, we can group related definitions together and name why they&amp;rsquo;re related. Programmers using this code would have an easier time finding the definitions they wanted to use because they could navigate the code based on the groups rather than having to read through all the definitions. Programmers adding new functionality to this code would know where to place the code to keep the program organized.</source>
          <target state="translated">モジュールを使用することにより、関連する定義をグループ化し、それらが関連している理由に名前を付けることができます。このコードを使用するプログラマーは、すべての定義を読む必要がなく、グループに基づいてコードをナビゲートできるため、使用したい定義を見つけやすくなります。このコードに新しい機能を追加するプログラマは、プログラムを整理しておくためにコードをどこに配置するかを知っています。</target>
        </trans-unit>
        <trans-unit id="0b9231ce9a42a6d6d2c8f8b26aa846a1ea4f8ea3" translate="yes" xml:space="preserve">
          <source>By using these and other tools in the Rust ecosystem, developers can be productive while writing systems-level code.</source>
          <target state="translated">Rust のエコシステムでこれらのツールやその他のツールを使用することで、開発者はシステムレベルのコードを書きながら生産性を高めることができます。</target>
        </trans-unit>
        <trans-unit id="2b10818a6a4d9d5c0ec3347fc6c8f03ab8bee8b6" translate="yes" xml:space="preserve">
          <source>By using this method, you are making a promise about the &lt;code&gt;P::Deref&lt;/code&gt; and &lt;code&gt;P::DerefMut&lt;/code&gt; implementations, if they exist. Most importantly, they must not move out of their &lt;code&gt;self&lt;/code&gt; arguments: &lt;code&gt;Pin::as_mut&lt;/code&gt; and &lt;code&gt;Pin::as_ref&lt;/code&gt; will call &lt;code&gt;DerefMut::deref_mut&lt;/code&gt; and &lt;code&gt;Deref::deref&lt;/code&gt;&lt;em&gt;on the pinned pointer&lt;/em&gt; and expect these methods to uphold the pinning invariants. Moreover, by calling this method you promise that the reference &lt;code&gt;P&lt;/code&gt; dereferences to will not be moved out of again; in particular, it must not be possible to obtain a &lt;code&gt;&amp;amp;mut P::Target&lt;/code&gt; and then move out of that reference (using, for example &lt;a href=&quot;../mem/fn.swap&quot;&gt;&lt;code&gt;mem::swap&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">この方法を使用することにより、あなたはおよそ約束作っている &lt;code&gt;P::Deref&lt;/code&gt; と &lt;code&gt;P::DerefMut&lt;/code&gt; が存在する場合、実装を。最も重要なのは、それらが &lt;code&gt;self&lt;/code&gt; 引数から移動してはならないことです &lt;code&gt;Pin::as_mut&lt;/code&gt; および &lt;code&gt;Pin::as_ref&lt;/code&gt; は&lt;em&gt;、固定されたポインターで&lt;/em&gt; &lt;code&gt;DerefMut::deref_mut&lt;/code&gt; およびDeref &lt;code&gt;Deref::deref&lt;/code&gt; を呼び出し、これらのメソッドが固定された不変式を維持することを期待します。さらに、このメソッドを呼び出すことにより、 &lt;code&gt;P&lt;/code&gt; が参照解除する参照が再び外に出されないことが保証されます。特に、 &lt;code&gt;&amp;amp;mut P::Target&lt;/code&gt; を取得して、その参照から移動することはできません（たとえば、&lt;a href=&quot;../mem/fn.swap&quot;&gt; &lt;code&gt;mem::swap&lt;/code&gt; &lt;/a&gt;&lt;em&gt;&lt;/em&gt;）。</target>
        </trans-unit>
        <trans-unit id="bcdb56a053eed7c5213a43f696d9db1ac84162fc" translate="yes" xml:space="preserve">
          <source>By using trait bounds we can accept arguments of different types as long as they can be converted to the specified type &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">特性境界を使用することにより、指定された型 &lt;code&gt;T&lt;/code&gt; に変換できる限り、異なる型の引数を受け入れることができます。</target>
        </trans-unit>
        <trans-unit id="301603101f50fc1a91e6b20fad60e030ba9789b8" translate="yes" xml:space="preserve">
          <source>By wrapping the stream with a &lt;code&gt;BufWriter&amp;lt;W&amp;gt;&lt;/code&gt;, these ten writes are all grouped together by the buffer and will all be written out in one system call when the &lt;code&gt;stream&lt;/code&gt; is flushed.</source>
          <target state="translated">By wrapping the stream with a &lt;code&gt;BufWriter&amp;lt;W&amp;gt;&lt;/code&gt; , these ten writes are all grouped together by the buffer and will all be written out in one system call when the &lt;code&gt;stream&lt;/code&gt; is flushed.</target>
        </trans-unit>
        <trans-unit id="8dae0e28ac851e86945ef16395330c4f51fd0970" translate="yes" xml:space="preserve">
          <source>By wrapping the stream with a &lt;code&gt;BufWriter&lt;/code&gt;, these ten writes are all grouped together by the buffer, and will all be written out in one system call when the &lt;code&gt;stream&lt;/code&gt; is dropped.</source>
          <target state="translated">ストリームを &lt;code&gt;BufWriter&lt;/code&gt; でラップすることにより、これらの10個の書き込みはすべてバッファーによってグループ化され、 &lt;code&gt;stream&lt;/code&gt; がドロップされると、すべてが1つのシステムコールで書き出されます。</target>
        </trans-unit>
        <trans-unit id="1548ce31fadb001aea0a12a579d52d9306c7253a" translate="yes" xml:space="preserve">
          <source>Bypasses Rust's normal memory-initialization checks by pretending to produce a value of type &lt;code&gt;T&lt;/code&gt;, while doing nothing at all.</source>
          <target state="translated">Rustの通常のメモリ初期化チェックをバイパスし、タイプ &lt;code&gt;T&lt;/code&gt; の値を生成するふりをして、何もしません。</target>
        </trans-unit>
        <trans-unit id="7803ee252527503b67d1eeb0deb252622746cebd" translate="yes" xml:space="preserve">
          <source>Byte</source>
          <target state="translated">Byte</target>
        </trans-unit>
        <trans-unit id="afdbaede89ef0f8a02124c499ef64ef1f0406d22" translate="yes" xml:space="preserve">
          <source>Byte (&lt;code&gt;u8&lt;/code&gt; only)</source>
          <target state="translated">バイト（ &lt;code&gt;u8&lt;/code&gt; のみ）</target>
        </trans-unit>
        <trans-unit id="e461b64db66675f3379c1e15d16c6c99827a8b32" translate="yes" xml:space="preserve">
          <source>Byte and byte string literals</source>
          <target state="translated">バイトおよびバイト文字列リテラル</target>
        </trans-unit>
        <trans-unit id="bed6860ca009a5f59b4930b17f9fae2513fd51cb" translate="yes" xml:space="preserve">
          <source>Byte escapes</source>
          <target state="translated">バイトが逃げる</target>
        </trans-unit>
        <trans-unit id="2bf9a238164dde110e7112a731c7b6d180525024" translate="yes" xml:space="preserve">
          <source>Byte literals</source>
          <target state="translated">バイトリテラル</target>
        </trans-unit>
        <trans-unit id="65c69de6b60d275943eb0b345c38a4da863d03c4" translate="yes" xml:space="preserve">
          <source>Byte order mark</source>
          <target state="translated">バイトオーダーマーク</target>
        </trans-unit>
        <trans-unit id="e7860363275fd51d964677e4db11dc87fb2b83e0" translate="yes" xml:space="preserve">
          <source>Byte string</source>
          <target state="translated">バイト文字列</target>
        </trans-unit>
        <trans-unit id="7510135fa5665d61b3d40af81c44ebe6703847a9" translate="yes" xml:space="preserve">
          <source>Byte string literal; constructs a &lt;code&gt;[u8]&lt;/code&gt; instead of a string</source>
          <target state="translated">バイト文字列リテラル。文字列の代わりに &lt;code&gt;[u8]&lt;/code&gt; を構築します</target>
        </trans-unit>
        <trans-unit id="d5501080013d3dce57e266b31385c7ea19dd9672" translate="yes" xml:space="preserve">
          <source>Byte string literals</source>
          <target state="translated">バイト文字列リテラル</target>
        </trans-unit>
        <trans-unit id="013842b4ad25a64e13616ea1267e8fb94bd63a6f" translate="yes" xml:space="preserve">
          <source>Byte-based interfaces are unwieldy and can be inefficient, as we'd need to be making near-constant calls to the operating system. To help with this, &lt;code&gt;std::io&lt;/code&gt; comes with two structs, &lt;a href=&quot;struct.bufreader&quot;&gt;&lt;code&gt;BufReader&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;struct.bufwriter&quot;&gt;&lt;code&gt;BufWriter&lt;/code&gt;&lt;/a&gt;, which wrap readers and writers. The wrapper uses a buffer, reducing the number of calls and providing nicer methods for accessing exactly what you want.</source>
          <target state="translated">バイトベースのインターフェイスは扱いにくく、オペレーティングシステムに対してほぼ一定の呼び出しを行う必要があるため、非効率的です。これを支援するために、 &lt;code&gt;std::io&lt;/code&gt; は、リーダーとライターをラップする2つの構造体&lt;a href=&quot;struct.bufreader&quot;&gt; &lt;code&gt;BufReader&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;struct.bufwriter&quot;&gt; &lt;code&gt;BufWriter&lt;/code&gt; &lt;/a&gt;が付属しています。ラッパーはバッファーを使用して、呼び出しの数を減らし、必要なものに正確にアクセスするためのより優れたメソッドを提供します。</target>
        </trans-unit>
        <trans-unit id="8e5fdab92dece79d7629d6d901687613ddc6ab5a" translate="yes" xml:space="preserve">
          <source>Bytes</source>
          <target state="translated">Bytes</target>
        </trans-unit>
        <trans-unit id="ac774cda628eb294788ac5a8af4246ebdb046c2e" translate="yes" xml:space="preserve">
          <source>Bytes and Scalar Values and Grapheme Clusters! Oh My!</source>
          <target state="translated">バイトとスカラー値とグラフェンクラスター! おぉぉぉぉぉぉぉぉぉぉぉぉぉぉぉぉぉぉぉぉぉぉぉぉぉぉぉぉぉぉぉぉぉぉぉぉぉぉぉぉぉぉぉぉぉぉぉぉぉぉぉぉぉぉぉぉぉぉぉぉぉぉぉぉぉぉぉぉぉぉぉぉぉぉぉぉぉ</target>
        </trans-unit>
        <trans-unit id="63a26fef0a88c04dcaa35220a18f6ec6efa06bb9" translate="yes" xml:space="preserve">
          <source>Bytes::all</source>
          <target state="translated">Bytes::all</target>
        </trans-unit>
        <trans-unit id="ce7f0f3ceb8a803663be41eda4062efc6e909fc1" translate="yes" xml:space="preserve">
          <source>Bytes::any</source>
          <target state="translated">Bytes::any</target>
        </trans-unit>
        <trans-unit id="979369045d5514f553522214d3aeb625b48dd8a9" translate="yes" xml:space="preserve">
          <source>Bytes::borrow</source>
          <target state="translated">Bytes::borrow</target>
        </trans-unit>
        <trans-unit id="113f2dc7029b7c717fa9381d4e2943d9b1b2fc76" translate="yes" xml:space="preserve">
          <source>Bytes::borrow_mut</source>
          <target state="translated">Bytes::borrow_mut</target>
        </trans-unit>
        <trans-unit id="34427e43eec5e510b45622026cd37a560d9c2986" translate="yes" xml:space="preserve">
          <source>Bytes::by_ref</source>
          <target state="translated">Bytes::by_ref</target>
        </trans-unit>
        <trans-unit id="f07eec0f48fad142ac4fee1d3559e7e8d852d460" translate="yes" xml:space="preserve">
          <source>Bytes::chain</source>
          <target state="translated">Bytes::chain</target>
        </trans-unit>
        <trans-unit id="e0bf1210a39ee968daf6f1af8bf1ba9b5fc128dd" translate="yes" xml:space="preserve">
          <source>Bytes::clone</source>
          <target state="translated">Bytes::clone</target>
        </trans-unit>
        <trans-unit id="d328e30cabdbfda128a510cf1e8c0e446be3fec8" translate="yes" xml:space="preserve">
          <source>Bytes::clone_from</source>
          <target state="translated">Bytes::clone_from</target>
        </trans-unit>
        <trans-unit id="297e685afff3be463f3a3c3239b3251c10cb9c58" translate="yes" xml:space="preserve">
          <source>Bytes::clone_into</source>
          <target state="translated">Bytes::clone_into</target>
        </trans-unit>
        <trans-unit id="df2a47344e3e5b26dba12c9f96d298455119f06c" translate="yes" xml:space="preserve">
          <source>Bytes::cloned</source>
          <target state="translated">Bytes::cloned</target>
        </trans-unit>
        <trans-unit id="8c02ce01cfc4f2e89b9e4d7eed3369aa07faf8c3" translate="yes" xml:space="preserve">
          <source>Bytes::cmp</source>
          <target state="translated">Bytes::cmp</target>
        </trans-unit>
        <trans-unit id="299642d3a1e23a4fa629457b5fe1a7d7023f1ab5" translate="yes" xml:space="preserve">
          <source>Bytes::collect</source>
          <target state="translated">Bytes::collect</target>
        </trans-unit>
        <trans-unit id="6f693335f9495019383b9eadbf3b449bcfc675f9" translate="yes" xml:space="preserve">
          <source>Bytes::copied</source>
          <target state="translated">Bytes::copied</target>
        </trans-unit>
        <trans-unit id="93d1e678c86a68151617f0b02af7cadb48251558" translate="yes" xml:space="preserve">
          <source>Bytes::count</source>
          <target state="translated">Bytes::count</target>
        </trans-unit>
        <trans-unit id="1e5c00a470b7fc4f8da25723aad0fc52e134f397" translate="yes" xml:space="preserve">
          <source>Bytes::cycle</source>
          <target state="translated">Bytes::cycle</target>
        </trans-unit>
        <trans-unit id="9d81621cbab864e41b9591bee2a211c1e6fb3870" translate="yes" xml:space="preserve">
          <source>Bytes::enumerate</source>
          <target state="translated">Bytes::enumerate</target>
        </trans-unit>
        <trans-unit id="ea17a535e18dd3c17944b57230746af970ccf214" translate="yes" xml:space="preserve">
          <source>Bytes::eq</source>
          <target state="translated">Bytes::eq</target>
        </trans-unit>
        <trans-unit id="491e10ca5d759167723a7ee86c3ca2eea1265ab7" translate="yes" xml:space="preserve">
          <source>Bytes::filter</source>
          <target state="translated">Bytes::filter</target>
        </trans-unit>
        <trans-unit id="9742812b0b1477fbb5396ffff48eb2034a65761d" translate="yes" xml:space="preserve">
          <source>Bytes::filter_map</source>
          <target state="translated">Bytes::filter_map</target>
        </trans-unit>
        <trans-unit id="63e7f3cfad0e9eae54402838e01bfca54ca3afa5" translate="yes" xml:space="preserve">
          <source>Bytes::find</source>
          <target state="translated">Bytes::find</target>
        </trans-unit>
        <trans-unit id="290c24197673b5bfcbef8c08eea1c3d3b80c4622" translate="yes" xml:space="preserve">
          <source>Bytes::find_map</source>
          <target state="translated">Bytes::find_map</target>
        </trans-unit>
        <trans-unit id="9f757e2b209fe7676c23fb7de2d9a9666f266a57" translate="yes" xml:space="preserve">
          <source>Bytes::flat_map</source>
          <target state="translated">Bytes::flat_map</target>
        </trans-unit>
        <trans-unit id="ebffc4bee04033b63ddade2d5c137b7551135bbd" translate="yes" xml:space="preserve">
          <source>Bytes::flatten</source>
          <target state="translated">Bytes::flatten</target>
        </trans-unit>
        <trans-unit id="59f9148fe24ec4969d305fc0671cc3b707da545a" translate="yes" xml:space="preserve">
          <source>Bytes::fmt</source>
          <target state="translated">Bytes::fmt</target>
        </trans-unit>
        <trans-unit id="a8078f4655b1978965a5909b5351cb14c6583a92" translate="yes" xml:space="preserve">
          <source>Bytes::fold</source>
          <target state="translated">Bytes::fold</target>
        </trans-unit>
        <trans-unit id="7f2d08f4da0fc0d0fb55752871e004cb4680946d" translate="yes" xml:space="preserve">
          <source>Bytes::for_each</source>
          <target state="translated">Bytes::for_each</target>
        </trans-unit>
        <trans-unit id="62699a9360bcc212fa6c249680ba5b7f48e3fb42" translate="yes" xml:space="preserve">
          <source>Bytes::from</source>
          <target state="translated">Bytes::from</target>
        </trans-unit>
        <trans-unit id="603aaacbdc014366acd2253fbfbd1087387d3bd3" translate="yes" xml:space="preserve">
          <source>Bytes::fuse</source>
          <target state="translated">Bytes::fuse</target>
        </trans-unit>
        <trans-unit id="ef1515771c9b976e1008ae36cc109565b4569ae9" translate="yes" xml:space="preserve">
          <source>Bytes::ge</source>
          <target state="translated">Bytes::ge</target>
        </trans-unit>
        <trans-unit id="445e8b743c0007a524c7e482f8c83e4f69760410" translate="yes" xml:space="preserve">
          <source>Bytes::gt</source>
          <target state="translated">Bytes::gt</target>
        </trans-unit>
        <trans-unit id="24ede3c149e7de7883c58aaa99ee5d5463be74e6" translate="yes" xml:space="preserve">
          <source>Bytes::inspect</source>
          <target state="translated">Bytes::inspect</target>
        </trans-unit>
        <trans-unit id="8cfa8a5aca1d21185175b454e814b3c9674137dc" translate="yes" xml:space="preserve">
          <source>Bytes::into</source>
          <target state="translated">Bytes::into</target>
        </trans-unit>
        <trans-unit id="28993249bc6a265b1f1403816b2a9c4d5624ad5b" translate="yes" xml:space="preserve">
          <source>Bytes::into_iter</source>
          <target state="translated">Bytes::into_iter</target>
        </trans-unit>
        <trans-unit id="290c12fce35e73f7ad4e780c36b8daeaf1f6eaf9" translate="yes" xml:space="preserve">
          <source>Bytes::is_empty</source>
          <target state="translated">Bytes::is_empty</target>
        </trans-unit>
        <trans-unit id="37772f76db83eabf7ef6ed6382f4a6562ec04eaa" translate="yes" xml:space="preserve">
          <source>Bytes::is_sorted</source>
          <target state="translated">Bytes::is_sorted</target>
        </trans-unit>
        <trans-unit id="63f09c7e5213825da442ff7939106416cc2db665" translate="yes" xml:space="preserve">
          <source>Bytes::is_sorted_by</source>
          <target state="translated">Bytes::is_sorted_by</target>
        </trans-unit>
        <trans-unit id="b26f21acb6f08d8c9a5ac1405c3ead0d4c9a6b00" translate="yes" xml:space="preserve">
          <source>Bytes::is_sorted_by_key</source>
          <target state="translated">Bytes::is_sorted_by_key</target>
        </trans-unit>
        <trans-unit id="f50aedc8dbbe9f4f7c0a8193c92f7fe881b11817" translate="yes" xml:space="preserve">
          <source>Bytes::last</source>
          <target state="translated">Bytes::last</target>
        </trans-unit>
        <trans-unit id="725cf533de1247b9f7939a230859f03c71c3a394" translate="yes" xml:space="preserve">
          <source>Bytes::le</source>
          <target state="translated">Bytes::le</target>
        </trans-unit>
        <trans-unit id="ae500d3c2531704059d772fbff739f3873572e45" translate="yes" xml:space="preserve">
          <source>Bytes::len</source>
          <target state="translated">Bytes::len</target>
        </trans-unit>
        <trans-unit id="b194acd634d0bc66745521f9549d62c66e9a152e" translate="yes" xml:space="preserve">
          <source>Bytes::lt</source>
          <target state="translated">Bytes::lt</target>
        </trans-unit>
        <trans-unit id="61ba21505c7ffe82b863e8bcbc73617c7e13b85c" translate="yes" xml:space="preserve">
          <source>Bytes::map</source>
          <target state="translated">Bytes::map</target>
        </trans-unit>
        <trans-unit id="fe2bc9537a5830454b8a500254016c0d67be2211" translate="yes" xml:space="preserve">
          <source>Bytes::max</source>
          <target state="translated">Bytes::max</target>
        </trans-unit>
        <trans-unit id="43d95dea33020faf006b7b4de468897537052a42" translate="yes" xml:space="preserve">
          <source>Bytes::max_by</source>
          <target state="translated">Bytes::max_by</target>
        </trans-unit>
        <trans-unit id="f7973f4371d6448647f6bb7f82a3cd4cc0be52b8" translate="yes" xml:space="preserve">
          <source>Bytes::max_by_key</source>
          <target state="translated">Bytes::max_by_key</target>
        </trans-unit>
        <trans-unit id="c3d094313a068051eedc54593c00089e5d5e0eaa" translate="yes" xml:space="preserve">
          <source>Bytes::min</source>
          <target state="translated">Bytes::min</target>
        </trans-unit>
        <trans-unit id="a26247387b6acf6339ec71745edbdff81c2ade56" translate="yes" xml:space="preserve">
          <source>Bytes::min_by</source>
          <target state="translated">Bytes::min_by</target>
        </trans-unit>
        <trans-unit id="f5a98f7f6167a1b442d3efa2009d49ad462460d2" translate="yes" xml:space="preserve">
          <source>Bytes::min_by_key</source>
          <target state="translated">Bytes::min_by_key</target>
        </trans-unit>
        <trans-unit id="be90f56db4ada597b587d016fd327003ea0bc760" translate="yes" xml:space="preserve">
          <source>Bytes::ne</source>
          <target state="translated">Bytes::ne</target>
        </trans-unit>
        <trans-unit id="d23038a4910063cad42deff4ad9cf09d48b283fc" translate="yes" xml:space="preserve">
          <source>Bytes::next</source>
          <target state="translated">Bytes::next</target>
        </trans-unit>
        <trans-unit id="8748f7bca019be483c7116e17eaefea91e8337c8" translate="yes" xml:space="preserve">
          <source>Bytes::next_back</source>
          <target state="translated">Bytes::next_back</target>
        </trans-unit>
        <trans-unit id="1a968f4f100322f4def3905de036617309b7b5ca" translate="yes" xml:space="preserve">
          <source>Bytes::nth</source>
          <target state="translated">Bytes::nth</target>
        </trans-unit>
        <trans-unit id="7015bc5abccea19494e4724bb7c18d8ce992e0ad" translate="yes" xml:space="preserve">
          <source>Bytes::nth_back</source>
          <target state="translated">Bytes::nth_back</target>
        </trans-unit>
        <trans-unit id="984cab5be49f32fc6d25120ded4daae67af8fff5" translate="yes" xml:space="preserve">
          <source>Bytes::partial_cmp</source>
          <target state="translated">Bytes::partial_cmp</target>
        </trans-unit>
        <trans-unit id="c5a60b3f92a5a9558e9901c7ea8df4400c6ec0e1" translate="yes" xml:space="preserve">
          <source>Bytes::partition</source>
          <target state="translated">Bytes::partition</target>
        </trans-unit>
        <trans-unit id="fd964e1b6678d8175a0f6d2defa63df03aeae2a2" translate="yes" xml:space="preserve">
          <source>Bytes::peekable</source>
          <target state="translated">Bytes::peekable</target>
        </trans-unit>
        <trans-unit id="7a779a538f4d43ba65ab857aaed4f38c84785133" translate="yes" xml:space="preserve">
          <source>Bytes::position</source>
          <target state="translated">Bytes::position</target>
        </trans-unit>
        <trans-unit id="e26b896020a4dd543d300e63cedf53c6c693b23f" translate="yes" xml:space="preserve">
          <source>Bytes::product</source>
          <target state="translated">Bytes::product</target>
        </trans-unit>
        <trans-unit id="9520a4396d3dd25e6d144b70f3b61774361a54c7" translate="yes" xml:space="preserve">
          <source>Bytes::rev</source>
          <target state="translated">Bytes::rev</target>
        </trans-unit>
        <trans-unit id="c91ff74ba08c7c6ea28c25fc12b5996c8b1497a4" translate="yes" xml:space="preserve">
          <source>Bytes::rfind</source>
          <target state="translated">Bytes::rfind</target>
        </trans-unit>
        <trans-unit id="6d8c28436a470bc527732d151cc6081f1ba37f43" translate="yes" xml:space="preserve">
          <source>Bytes::rfold</source>
          <target state="translated">Bytes::rfold</target>
        </trans-unit>
        <trans-unit id="952ea423fc26cfa8babe6fc58fba9d219ed14f15" translate="yes" xml:space="preserve">
          <source>Bytes::rposition</source>
          <target state="translated">Bytes::rposition</target>
        </trans-unit>
        <trans-unit id="5ca3ed55d60687599d621bf21650f4ef1969fe93" translate="yes" xml:space="preserve">
          <source>Bytes::scan</source>
          <target state="translated">Bytes::scan</target>
        </trans-unit>
        <trans-unit id="ab036dbdadf0542cb3bddc197d995e0027d66c95" translate="yes" xml:space="preserve">
          <source>Bytes::size_hint</source>
          <target state="translated">Bytes::size_hint</target>
        </trans-unit>
        <trans-unit id="7aea93693f858b30cc323b010a39049b5066d25e" translate="yes" xml:space="preserve">
          <source>Bytes::skip</source>
          <target state="translated">Bytes::skip</target>
        </trans-unit>
        <trans-unit id="1238ebec8be4b2a081cb75d76acedcc89efe036e" translate="yes" xml:space="preserve">
          <source>Bytes::skip_while</source>
          <target state="translated">Bytes::skip_while</target>
        </trans-unit>
        <trans-unit id="9c76a1cf5e4f9d6e469d340364ab845f02735723" translate="yes" xml:space="preserve">
          <source>Bytes::step_by</source>
          <target state="translated">Bytes::step_by</target>
        </trans-unit>
        <trans-unit id="79350f102ae506e77c2e1822a20d032e242e08cf" translate="yes" xml:space="preserve">
          <source>Bytes::sum</source>
          <target state="translated">Bytes::sum</target>
        </trans-unit>
        <trans-unit id="4668fe7f8a3335637251054d9c9c06434224fd9e" translate="yes" xml:space="preserve">
          <source>Bytes::take</source>
          <target state="translated">Bytes::take</target>
        </trans-unit>
        <trans-unit id="8188c9f2c65727da6ad6418e7435a0a4d4ae1b63" translate="yes" xml:space="preserve">
          <source>Bytes::take_while</source>
          <target state="translated">Bytes::take_while</target>
        </trans-unit>
        <trans-unit id="1e3d429d72ab5a83b39ca62419e469d95fab4a82" translate="yes" xml:space="preserve">
          <source>Bytes::to_owned</source>
          <target state="translated">Bytes::to_owned</target>
        </trans-unit>
        <trans-unit id="557ed7e76c591066179253aea6bd6a17cfa01f82" translate="yes" xml:space="preserve">
          <source>Bytes::try_fold</source>
          <target state="translated">Bytes::try_fold</target>
        </trans-unit>
        <trans-unit id="3a174ee7598d8449eeadbf2f070bb9163bfdbeef" translate="yes" xml:space="preserve">
          <source>Bytes::try_for_each</source>
          <target state="translated">Bytes::try_for_each</target>
        </trans-unit>
        <trans-unit id="35ddd98f9595299a1b8243f3586e6b1c8d7fa048" translate="yes" xml:space="preserve">
          <source>Bytes::try_from</source>
          <target state="translated">Bytes::try_from</target>
        </trans-unit>
        <trans-unit id="fdf97aa086611d5f965642e0fa40ebed09455a54" translate="yes" xml:space="preserve">
          <source>Bytes::try_into</source>
          <target state="translated">Bytes::try_into</target>
        </trans-unit>
        <trans-unit id="e81eae2ced7b712e89d1325cb3b29c2687db0961" translate="yes" xml:space="preserve">
          <source>Bytes::try_rfold</source>
          <target state="translated">Bytes::try_rfold</target>
        </trans-unit>
        <trans-unit id="93ac1e902ab13110128cd8b40340c9498d027d14" translate="yes" xml:space="preserve">
          <source>Bytes::type_id</source>
          <target state="translated">Bytes::type_id</target>
        </trans-unit>
        <trans-unit id="b8daa236d91d2a612c5d7612ed9d46cc96bcda6a" translate="yes" xml:space="preserve">
          <source>Bytes::unzip</source>
          <target state="translated">Bytes::unzip</target>
        </trans-unit>
        <trans-unit id="47375bdc573035dbf1f0a151a6ddce0a88145906" translate="yes" xml:space="preserve">
          <source>Bytes::zip</source>
          <target state="translated">Bytes::zip</target>
        </trans-unit>
        <trans-unit id="10de289426da74ae5996820227d1ae99ba3ca1bf" translate="yes" xml:space="preserve">
          <source>C chars are most commonly used to make C strings. Unlike Rust, where the length of a string is included alongside the string, C strings mark the end of a string with the character &lt;code&gt;'\0'&lt;/code&gt;. See &lt;a href=&quot;../../ffi/struct.cstr&quot;&gt;&lt;code&gt;CStr&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">C文字は、C文字列を作成するために最も一般的に使用されます。Rustとは異なり、文字列の長さが文字列とともに含まれる場合、C文字列は文字列の終わりを文字 &lt;code&gt;'\0'&lt;/code&gt; マークします。詳細については、&lt;a href=&quot;../../ffi/struct.cstr&quot;&gt; &lt;code&gt;CStr&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="ec4ff1ee46ab9f978c49b43b23216a55c335e53d" translate="yes" xml:space="preserve">
          <source>C strings are different from Rust strings:</source>
          <target state="translated">Cの弦はRustの弦とは違います。</target>
        </trans-unit>
        <trans-unit id="4d0a3cd3d0843046e9dc208601e2f872fffb7682" translate="yes" xml:space="preserve">
          <source>C#: attributes</source>
          <target state="translated">C#:属性</target>
        </trans-unit>
        <trans-unit id="8f7e71dd73911b35b0704326383804842772d25d" translate="yes" xml:space="preserve">
          <source>C++: references, RAII, smart pointers, move semantics, monomorphization, memory model</source>
          <target state="translated">C++:参照、RAII、スマートポインタ、移動セマンティクス、モノモルフィケーション、メモリモデル</target>
        </trans-unit>
        <trans-unit id="d6f809f9a8c2683f3d057fe632dca0828c0f7e4a" translate="yes" xml:space="preserve">
          <source>C-like enum</source>
          <target state="translated">シーライク列挙</target>
        </trans-unit>
        <trans-unit id="ce41a223396980a3e03634cbe778c52da0c75b6e" translate="yes" xml:space="preserve">
          <source>CAPITAL</source>
          <target state="translated">CAPITAL</target>
        </trans-unit>
        <trans-unit id="ee6b489f0289728c3819dc331f1663c96ca0785c" translate="yes" xml:space="preserve">
          <source>CHAR_LITERAL</source>
          <target state="translated">CHAR_LITERAL</target>
        </trans-unit>
        <trans-unit id="69b56ccff3a6c4424734f57c05d156739380a264" translate="yes" xml:space="preserve">
          <source>CHAR_LITERAL :</source>
          <target state="translated">CHAR_LITERAL .</target>
        </trans-unit>
        <trans-unit id="c855bb9cac705e9e3b723e75b21f4d07cd808dc4" translate="yes" xml:space="preserve">
          <source>CStr</source>
          <target state="translated">CStr</target>
        </trans-unit>
        <trans-unit id="6d8a542fd21b3338ea60a85ae47f0c199d520fae" translate="yes" xml:space="preserve">
          <source>CStr::as_ptr</source>
          <target state="translated">CStr::as_ptr</target>
        </trans-unit>
        <trans-unit id="1f95e3e4ec8be2f019c66897e9c3b6624d851e96" translate="yes" xml:space="preserve">
          <source>CStr::as_ref</source>
          <target state="translated">CStr::as_ref</target>
        </trans-unit>
        <trans-unit id="d700139dd31629deaacc42e4bc9a9d4d45caef0d" translate="yes" xml:space="preserve">
          <source>CStr::borrow</source>
          <target state="translated">CStr::borrow</target>
        </trans-unit>
        <trans-unit id="cc55b0f7e0eedd59a730a23f4f91745521f7abe7" translate="yes" xml:space="preserve">
          <source>CStr::borrow_mut</source>
          <target state="translated">CStr::borrow_mut</target>
        </trans-unit>
        <trans-unit id="fcca1c0586380cf9ec8aaa4478ef4dea99e9db80" translate="yes" xml:space="preserve">
          <source>CStr::clamp</source>
          <target state="translated">CStr::clamp</target>
        </trans-unit>
        <trans-unit id="95ad44c6acf49d720b284daa7324a4c4e8ee9b77" translate="yes" xml:space="preserve">
          <source>CStr::clone_into</source>
          <target state="translated">CStr::clone_into</target>
        </trans-unit>
        <trans-unit id="17ee9041b05f19b08c9a207a0b264abb06217788" translate="yes" xml:space="preserve">
          <source>CStr::cmp</source>
          <target state="translated">CStr::cmp</target>
        </trans-unit>
        <trans-unit id="ef2eafc91f57240446e72aeaeeb2a32e68e97a8b" translate="yes" xml:space="preserve">
          <source>CStr::default</source>
          <target state="translated">CStr::default</target>
        </trans-unit>
        <trans-unit id="54ffaa14459cec5f2273ff104ef1742c78574036" translate="yes" xml:space="preserve">
          <source>CStr::eq</source>
          <target state="translated">CStr::eq</target>
        </trans-unit>
        <trans-unit id="0c4c69764320e8a42e866e61f90c9ac980102de3" translate="yes" xml:space="preserve">
          <source>CStr::fmt</source>
          <target state="translated">CStr::fmt</target>
        </trans-unit>
        <trans-unit id="e9fd5cc915fb0074a2adb82bcea1b9cf07e8ac22" translate="yes" xml:space="preserve">
          <source>CStr::from</source>
          <target state="translated">CStr::from</target>
        </trans-unit>
        <trans-unit id="fef3690a19e427664444d03dfffa43ae3fa6be59" translate="yes" xml:space="preserve">
          <source>CStr::from_bytes_with_nul</source>
          <target state="translated">CStr::from_bytes_with_nul</target>
        </trans-unit>
        <trans-unit id="75111e68b3cace6dc1f25160989a55c75672d185" translate="yes" xml:space="preserve">
          <source>CStr::from_bytes_with_nul_unchecked</source>
          <target state="translated">CStr::from_bytes_with_nul_unchecked</target>
        </trans-unit>
        <trans-unit id="137aefe4f0efa206a17e644e536709f7164f7036" translate="yes" xml:space="preserve">
          <source>CStr::from_ptr</source>
          <target state="translated">CStr::from_ptr</target>
        </trans-unit>
        <trans-unit id="3445b2e9c6d30848e46a0c458e92c18f5478648a" translate="yes" xml:space="preserve">
          <source>CStr::ge</source>
          <target state="translated">CStr::ge</target>
        </trans-unit>
        <trans-unit id="728fbce40efc66cebd46be16b8f1cf779090113f" translate="yes" xml:space="preserve">
          <source>CStr::gt</source>
          <target state="translated">CStr::gt</target>
        </trans-unit>
        <trans-unit id="be0afeee394794477755e07edeb627b53d61bdf3" translate="yes" xml:space="preserve">
          <source>CStr::hash</source>
          <target state="translated">CStr::hash</target>
        </trans-unit>
        <trans-unit id="bb72c84064e334eba596cbe9844aa70e70ee849a" translate="yes" xml:space="preserve">
          <source>CStr::hash_slice</source>
          <target state="translated">CStr::hash_slice</target>
        </trans-unit>
        <trans-unit id="c6bf567f09e2b2bd042059269552397aad871cae" translate="yes" xml:space="preserve">
          <source>CStr::into_c_string</source>
          <target state="translated">CStr::into_c_string</target>
        </trans-unit>
        <trans-unit id="69ab262092debd4569770196660f4febe98420dc" translate="yes" xml:space="preserve">
          <source>CStr::le</source>
          <target state="translated">CStr::le</target>
        </trans-unit>
        <trans-unit id="f1e9e41f63590d10b51a2a294c025ee665034901" translate="yes" xml:space="preserve">
          <source>CStr::lt</source>
          <target state="translated">CStr::lt</target>
        </trans-unit>
        <trans-unit id="348c458cc35acb0213f545d380dceae16ee7b792" translate="yes" xml:space="preserve">
          <source>CStr::max</source>
          <target state="translated">CStr::max</target>
        </trans-unit>
        <trans-unit id="000883cbb32a65bd5d06415a6ea2b885840b8dea" translate="yes" xml:space="preserve">
          <source>CStr::min</source>
          <target state="translated">CStr::min</target>
        </trans-unit>
        <trans-unit id="9f6acbf3ad450fc26ec407cb9b07020457f45140" translate="yes" xml:space="preserve">
          <source>CStr::ne</source>
          <target state="translated">CStr::ne</target>
        </trans-unit>
        <trans-unit id="7abb5f8b92e7fded6ba1d77d76970093cc652367" translate="yes" xml:space="preserve">
          <source>CStr::partial_cmp</source>
          <target state="translated">CStr::partial_cmp</target>
        </trans-unit>
        <trans-unit id="65caa5cdc2514ebded75efc52eddee11acbc1be0" translate="yes" xml:space="preserve">
          <source>CStr::to_bytes</source>
          <target state="translated">CStr::to_bytes</target>
        </trans-unit>
        <trans-unit id="e4257d44ce77a2f26ac5c252e77fb8c42eef081a" translate="yes" xml:space="preserve">
          <source>CStr::to_bytes_with_nul</source>
          <target state="translated">CStr::to_bytes_with_nul</target>
        </trans-unit>
        <trans-unit id="44ead7aea7dc02cf1786c76006d27afcf9a480c8" translate="yes" xml:space="preserve">
          <source>CStr::to_owned</source>
          <target state="translated">CStr::to_owned</target>
        </trans-unit>
        <trans-unit id="ad62220819d69a73a1b88d26957191be23aa8128" translate="yes" xml:space="preserve">
          <source>CStr::to_str</source>
          <target state="translated">CStr::to_str</target>
        </trans-unit>
        <trans-unit id="f8b6323ef660a7621fafb52f71e3630988494495" translate="yes" xml:space="preserve">
          <source>CStr::to_string_lossy</source>
          <target state="translated">CStr::to_string_lossy</target>
        </trans-unit>
        <trans-unit id="1cc3da01043c1b71efdad57e85215058364b7064" translate="yes" xml:space="preserve">
          <source>CStr::type_id</source>
          <target state="translated">CStr::type_id</target>
        </trans-unit>
        <trans-unit id="10fdabde5da32be8abb7d3568067d963d8ef529e" translate="yes" xml:space="preserve">
          <source>CString</source>
          <target state="translated">CString</target>
        </trans-unit>
        <trans-unit id="52e001b95a1b9cf3308a26a6e981035005eab758" translate="yes" xml:space="preserve">
          <source>CString::as_bytes</source>
          <target state="translated">CString::as_bytes</target>
        </trans-unit>
        <trans-unit id="13cab1dddf5c51f1e61f9eee6b49a5636b9bd814" translate="yes" xml:space="preserve">
          <source>CString::as_bytes_with_nul</source>
          <target state="translated">CString::as_bytes_with_nul</target>
        </trans-unit>
        <trans-unit id="797335508475be49326111108ab36a086a72caa3" translate="yes" xml:space="preserve">
          <source>CString::as_c_str</source>
          <target state="translated">CString::as_c_str</target>
        </trans-unit>
        <trans-unit id="7de000d37b9a976d4527e4c70754ba8afd0351c7" translate="yes" xml:space="preserve">
          <source>CString::as_ptr</source>
          <target state="translated">CString::as_ptr</target>
        </trans-unit>
        <trans-unit id="bc0fb3daa028d7ff58f6946c49b2f5b96bc9d602" translate="yes" xml:space="preserve">
          <source>CString::as_ref</source>
          <target state="translated">CString::as_ref</target>
        </trans-unit>
        <trans-unit id="36a33aa7aa5aa4d2d81432af9a988f0f942736ad" translate="yes" xml:space="preserve">
          <source>CString::borrow</source>
          <target state="translated">CString::borrow</target>
        </trans-unit>
        <trans-unit id="8528461b0edd762ff495176944d805d1dde0f8ec" translate="yes" xml:space="preserve">
          <source>CString::borrow_mut</source>
          <target state="translated">CString::borrow_mut</target>
        </trans-unit>
        <trans-unit id="2a50234e42cd54310e4916caa569a9a5aa96a13c" translate="yes" xml:space="preserve">
          <source>CString::clamp</source>
          <target state="translated">CString::clamp</target>
        </trans-unit>
        <trans-unit id="24f213d2e0d20a811ae38f00f41648ad4c89ab8e" translate="yes" xml:space="preserve">
          <source>CString::clone</source>
          <target state="translated">CString::clone</target>
        </trans-unit>
        <trans-unit id="7f0df7e2af8f0985cf2add0b160cbcac287070e5" translate="yes" xml:space="preserve">
          <source>CString::clone_from</source>
          <target state="translated">CString::clone_from</target>
        </trans-unit>
        <trans-unit id="3cabdc5e34bb6bea49169d33f360d4ee04f6ed25" translate="yes" xml:space="preserve">
          <source>CString::clone_into</source>
          <target state="translated">CString::clone_into</target>
        </trans-unit>
        <trans-unit id="d7277d1a271df4865a6f33570de006450712f4a0" translate="yes" xml:space="preserve">
          <source>CString::cmp</source>
          <target state="translated">CString::cmp</target>
        </trans-unit>
        <trans-unit id="baa89c11dc8118d826240007d81976bd7413a3b6" translate="yes" xml:space="preserve">
          <source>CString::default</source>
          <target state="translated">CString::default</target>
        </trans-unit>
        <trans-unit id="347d98047b56cd9966454be82309f4e8529682ff" translate="yes" xml:space="preserve">
          <source>CString::deref</source>
          <target state="translated">CString::deref</target>
        </trans-unit>
        <trans-unit id="ab34938730f49553f7aecab1bb2c2843aa651704" translate="yes" xml:space="preserve">
          <source>CString::drop</source>
          <target state="translated">CString::drop</target>
        </trans-unit>
        <trans-unit id="60996dc07ecd992dd60d5ceec16cc375ea67d6b9" translate="yes" xml:space="preserve">
          <source>CString::eq</source>
          <target state="translated">CString::eq</target>
        </trans-unit>
        <trans-unit id="e70be0cad84fe664f3a9891f184d6d6a7283a582" translate="yes" xml:space="preserve">
          <source>CString::fmt</source>
          <target state="translated">CString::fmt</target>
        </trans-unit>
        <trans-unit id="cbf381ece793251aee2eeadc010afe3c0f4a86e0" translate="yes" xml:space="preserve">
          <source>CString::from</source>
          <target state="translated">CString::from</target>
        </trans-unit>
        <trans-unit id="a143620acced132aa78acde78ce1bd6ab7b63f7e" translate="yes" xml:space="preserve">
          <source>CString::from_raw</source>
          <target state="translated">CString::from_raw</target>
        </trans-unit>
        <trans-unit id="dc9b49de9e2271c2ed3506615af6e6d8c4861395" translate="yes" xml:space="preserve">
          <source>CString::from_vec_unchecked</source>
          <target state="translated">CString::from_vec_unchecked</target>
        </trans-unit>
        <trans-unit id="1a539736b4bb0e500f677893082fd23c664398df" translate="yes" xml:space="preserve">
          <source>CString::ge</source>
          <target state="translated">CString::ge</target>
        </trans-unit>
        <trans-unit id="668f249df3f7a2e1e7a9e166dd065bd8ea489b01" translate="yes" xml:space="preserve">
          <source>CString::gt</source>
          <target state="translated">CString::gt</target>
        </trans-unit>
        <trans-unit id="e46cf065cca5e3cd1f01cce699aa22189f1cb26b" translate="yes" xml:space="preserve">
          <source>CString::hash</source>
          <target state="translated">CString::hash</target>
        </trans-unit>
        <trans-unit id="0833d863637dfd6ed73ce7a7ea13d011f707f04d" translate="yes" xml:space="preserve">
          <source>CString::hash_slice</source>
          <target state="translated">CString::hash_slice</target>
        </trans-unit>
        <trans-unit id="432d0b1932bbe3eb2d6ef0fa7ec29b9397259ae9" translate="yes" xml:space="preserve">
          <source>CString::index</source>
          <target state="translated">CString::index</target>
        </trans-unit>
        <trans-unit id="cd0ce393340efaa8f18ad5cb50aad07f3d2eeea4" translate="yes" xml:space="preserve">
          <source>CString::into</source>
          <target state="translated">CString::into</target>
        </trans-unit>
        <trans-unit id="59bfaa59d401f415773f033626b7896ccc5c6f79" translate="yes" xml:space="preserve">
          <source>CString::into_boxed_c_str</source>
          <target state="translated">CString::into_boxed_c_str</target>
        </trans-unit>
        <trans-unit id="96b480440e4b607a24895b6512350ea1afafd31c" translate="yes" xml:space="preserve">
          <source>CString::into_bytes</source>
          <target state="translated">CString::into_bytes</target>
        </trans-unit>
        <trans-unit id="cc5eefdedab1063685f507370a9d8ab88c34cbda" translate="yes" xml:space="preserve">
          <source>CString::into_bytes_with_nul</source>
          <target state="translated">CString::into_bytes_with_nul</target>
        </trans-unit>
        <trans-unit id="aefcc1dc128b6b5cd3742344d58563aafb746370" translate="yes" xml:space="preserve">
          <source>CString::into_raw</source>
          <target state="translated">CString::into_raw</target>
        </trans-unit>
        <trans-unit id="f2693a15445d228f3db30100d51e43c8372af6e2" translate="yes" xml:space="preserve">
          <source>CString::into_string</source>
          <target state="translated">CString::into_string</target>
        </trans-unit>
        <trans-unit id="8bee9b3af5aa7e5de7c21a5ebc17b1acccf5ee8e" translate="yes" xml:space="preserve">
          <source>CString::le</source>
          <target state="translated">CString::le</target>
        </trans-unit>
        <trans-unit id="a139512687d9e3c6e3a92b9473958b2f7df1eb47" translate="yes" xml:space="preserve">
          <source>CString::lt</source>
          <target state="translated">CString::lt</target>
        </trans-unit>
        <trans-unit id="eaaa87d3cf20a5d0e070b569e586340d5ecb604f" translate="yes" xml:space="preserve">
          <source>CString::max</source>
          <target state="translated">CString::max</target>
        </trans-unit>
        <trans-unit id="72b7071a2efa7b6ad66daf332571bc9f191bed64" translate="yes" xml:space="preserve">
          <source>CString::min</source>
          <target state="translated">CString::min</target>
        </trans-unit>
        <trans-unit id="2516dc9b57566e8c9c5ced5df9a3f6886f48ed5c" translate="yes" xml:space="preserve">
          <source>CString::ne</source>
          <target state="translated">CString::ne</target>
        </trans-unit>
        <trans-unit id="057c250d247622d3e7250ede8d66d4f4fe5f006a" translate="yes" xml:space="preserve">
          <source>CString::new</source>
          <target state="translated">CString::new</target>
        </trans-unit>
        <trans-unit id="eff1b495447d52f2ff92fe44126c3e0f7e62bd18" translate="yes" xml:space="preserve">
          <source>CString::partial_cmp</source>
          <target state="translated">CString::partial_cmp</target>
        </trans-unit>
        <trans-unit id="ba7cc72bb439ffacb3c246cdf7d4ea38bf7c37ba" translate="yes" xml:space="preserve">
          <source>CString::to_bytes</source>
          <target state="translated">CString::to_bytes</target>
        </trans-unit>
        <trans-unit id="52c93cc3f089d3ead1daed54786cb1adefbefc0e" translate="yes" xml:space="preserve">
          <source>CString::to_bytes_with_nul</source>
          <target state="translated">CString::to_bytes_with_nul</target>
        </trans-unit>
        <trans-unit id="d066a96cc2aeab0a52ff35a69bfade1ebb5b679e" translate="yes" xml:space="preserve">
          <source>CString::to_owned</source>
          <target state="translated">CString::to_owned</target>
        </trans-unit>
        <trans-unit id="2511594a074122956a7b9aac6c3b45531240e7fc" translate="yes" xml:space="preserve">
          <source>CString::to_str</source>
          <target state="translated">CString::to_str</target>
        </trans-unit>
        <trans-unit id="b9d046be15dc8b7b1d4ad0b19b0da5323bf450ae" translate="yes" xml:space="preserve">
          <source>CString::to_string_lossy</source>
          <target state="translated">CString::to_string_lossy</target>
        </trans-unit>
        <trans-unit id="9d84fa601d6e1d36b0d57472ca64c553b64dab03" translate="yes" xml:space="preserve">
          <source>CString::try_from</source>
          <target state="translated">CString::try_from</target>
        </trans-unit>
        <trans-unit id="f11ef73d8e97b738c053ffd9938664b3d2273bd5" translate="yes" xml:space="preserve">
          <source>CString::try_into</source>
          <target state="translated">CString::try_into</target>
        </trans-unit>
        <trans-unit id="1a51fb95b46c52bf3add938b9cfe7d50ef6bacbf" translate="yes" xml:space="preserve">
          <source>CString::type_id</source>
          <target state="translated">CString::type_id</target>
        </trans-unit>
        <trans-unit id="ec9fe493034beaebc0e01624240518933e14a78a" translate="yes" xml:space="preserve">
          <source>Caching values is a generally useful behavior that we might want to use in other parts of our code with different closures. However, there are two problems with the current implementation of &lt;code&gt;Cacher&lt;/code&gt; that would make reusing it in different contexts difficult.</source>
          <target state="translated">値のキャッシュは、さまざまなクロージャーを使用してコードの他の部分で使用する可能性のある、一般的に有用な動作です。ただし、 &lt;code&gt;Cacher&lt;/code&gt; の現在の実装には、異なるコンテキストでの再利用を困難にする2つの問題があります。</target>
        </trans-unit>
        <trans-unit id="ca70ff3bbc1574ec864e13a85775af1c9fd2dc54" translate="yes" xml:space="preserve">
          <source>Calculates &lt;code&gt;self&lt;/code&gt; + &lt;code&gt;rhs&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;self&lt;/code&gt; + &lt;code&gt;rhs&lt;/code&gt; を計算します</target>
        </trans-unit>
        <trans-unit id="c60cc01325d6ae275f88e47a24f1234f7eab35f7" translate="yes" xml:space="preserve">
          <source>Calculates &lt;code&gt;self&lt;/code&gt; - &lt;code&gt;rhs&lt;/code&gt;</source>
          <target state="translated">計算しの &lt;code&gt;self&lt;/code&gt; - &lt;code&gt;rhs&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a2ce2b6e7049ed5ebef3ea78f7f49e41b51d70f5" translate="yes" xml:space="preserve">
          <source>Calculates Euclidean division, the matching method for &lt;code&gt;rem_euclid&lt;/code&gt;.</source>
          <target state="translated">ユークリッド除算、 &lt;code&gt;rem_euclid&lt;/code&gt; のマッチング方法を計算します。</target>
        </trans-unit>
        <trans-unit id="9f1a1acd0979000f557bd9fe260b8e844069c43f" translate="yes" xml:space="preserve">
          <source>Calculates the distance between two pointers. The returned value is in units of T: the distance in bytes is divided by &lt;code&gt;mem::size_of::&amp;lt;T&amp;gt;()&lt;/code&gt;.</source>
          <target state="translated">2つのポインター間の距離を計算します。戻り値はTの単位です。バイト単位の距離は &lt;code&gt;mem::size_of::&amp;lt;T&amp;gt;()&lt;/code&gt; 除算されます。</target>
        </trans-unit>
        <trans-unit id="5127f08bc025120d1faa493287d1d0eee0006108" translate="yes" xml:space="preserve">
          <source>Calculates the divisor when &lt;code&gt;self&lt;/code&gt; is divided by &lt;code&gt;rhs&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;self&lt;/code&gt; が &lt;code&gt;rhs&lt;/code&gt; で除算されたときに除数を計算します。</target>
        </trans-unit>
        <trans-unit id="fc217ee649e4f99c72864fd7fe451c173d18439f" translate="yes" xml:space="preserve">
          <source>Calculates the least nonnegative remainder of &lt;code&gt;self (mod rhs)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;self (mod rhs)&lt;/code&gt; の最小の非負の剰余を計算します。</target>
        </trans-unit>
        <trans-unit id="aa698abba4132e7de76a90696509e57b698e9680" translate="yes" xml:space="preserve">
          <source>Calculates the least remainder of &lt;code&gt;self (mod rhs)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;self (mod rhs)&lt;/code&gt; 残りの最小値（mod rhs）を計算します。</target>
        </trans-unit>
        <trans-unit id="c7ea3c4efe85a6701802881e07221808f6b72f10" translate="yes" xml:space="preserve">
          <source>Calculates the length of the hypotenuse of a right-angle triangle given legs of length &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="translated">長さ &lt;code&gt;x&lt;/code&gt; および &lt;code&gt;y&lt;/code&gt; のレッグが与えられた直角三角形の斜辺の長さを計算します。</target>
        </trans-unit>
        <trans-unit id="2204ea9d183af2eb3c958e206adf62733fcb72b8" translate="yes" xml:space="preserve">
          <source>Calculates the multiplication of &lt;code&gt;self&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;self&lt;/code&gt; と &lt;code&gt;rhs&lt;/code&gt; の乗算を計算します。</target>
        </trans-unit>
        <trans-unit id="e1f0a45d6193bb4f48999acaf0e6da752bd21197" translate="yes" xml:space="preserve">
          <source>Calculates the offset from a pointer (convenience for &lt;code&gt;.offset((count as isize).wrapping_neg())&lt;/code&gt;).</source>
          <target state="translated">ポインターからのオフセットを計算します（ &lt;code&gt;.offset((count as isize).wrapping_neg())&lt;/code&gt; の利便性）。</target>
        </trans-unit>
        <trans-unit id="2cdd04036e314797a2d49a1129ff94310c799250" translate="yes" xml:space="preserve">
          <source>Calculates the offset from a pointer (convenience for &lt;code&gt;.offset(count as isize)&lt;/code&gt;).</source>
          <target state="translated">ポインターからのオフセットを計算します（ &lt;code&gt;.offset(count as isize)&lt;/code&gt; の利便性）。</target>
        </trans-unit>
        <trans-unit id="5c58135d353fa0b65d9d7d232ccec38157ca294b" translate="yes" xml:space="preserve">
          <source>Calculates the offset from a pointer using wrapping arithmetic.</source>
          <target state="translated">ラッピング演算を用いてポインタからのオフセットを計算します。</target>
        </trans-unit>
        <trans-unit id="3a96ac2990d9d6aa59d405db07b7ab3697d51ab5" translate="yes" xml:space="preserve">
          <source>Calculates the offset from a pointer using wrapping arithmetic. (convenience for &lt;code&gt;.wrapping_offset((count as isize).wrapping_sub())&lt;/code&gt;)</source>
          <target state="translated">ラッピング演算を使用して、ポインターからのオフセットを計算します。（ &lt;code&gt;.wrapping_offset((count as isize).wrapping_sub())&lt;/code&gt; 利便性）</target>
        </trans-unit>
        <trans-unit id="4437f7540901d3da485cf44951a321623f5d54ea" translate="yes" xml:space="preserve">
          <source>Calculates the offset from a pointer using wrapping arithmetic. (convenience for &lt;code&gt;.wrapping_offset(count as isize)&lt;/code&gt;)</source>
          <target state="translated">ラッピング演算を使用して、ポインターからのオフセットを計算します。（ &lt;code&gt;.wrapping_offset(count as isize)&lt;/code&gt; 利便性）</target>
        </trans-unit>
        <trans-unit id="fced3b907bf59a9a00c1e327030e6d3af8cc26ee" translate="yes" xml:space="preserve">
          <source>Calculates the offset from a pointer using wrapping arithmetic. &lt;code&gt;count&lt;/code&gt; is in units of T; e.g., a &lt;code&gt;count&lt;/code&gt; of 3 represents a pointer offset of &lt;code&gt;3 * size_of::&amp;lt;T&amp;gt;()&lt;/code&gt; bytes.</source>
          <target state="translated">ラッピング演算を使用して、ポインターからのオフセットを計算します。 &lt;code&gt;count&lt;/code&gt; はTの単位です。たとえば、 &lt;code&gt;count&lt;/code&gt; 3は、 &lt;code&gt;3 * size_of::&amp;lt;T&amp;gt;()&lt;/code&gt; バイトのポインターオフセットを表します。</target>
        </trans-unit>
        <trans-unit id="bb349c3d2b61d501336bb2fe8cf2ff557d376135" translate="yes" xml:space="preserve">
          <source>Calculates the offset from a pointer, potentially wrapping.</source>
          <target state="translated">ポインタからのオフセットを計算します。</target>
        </trans-unit>
        <trans-unit id="bceae705a5fda0d95a2adc01d7e85d8d0a2f7b90" translate="yes" xml:space="preserve">
          <source>Calculates the offset from a pointer.</source>
          <target state="translated">ポインタからのオフセットを計算します。</target>
        </trans-unit>
        <trans-unit id="20e05ec484d26186b0ee114ebaa6c93c15ef1c02" translate="yes" xml:space="preserve">
          <source>Calculates the quotient of Euclidean division &lt;code&gt;self.div_euclid(rhs)&lt;/code&gt;.</source>
          <target state="translated">ユークリッド除算の商 &lt;code&gt;self.div_euclid(rhs)&lt;/code&gt; を計算します。</target>
        </trans-unit>
        <trans-unit id="39720ba2c3f54664835e5cfd429b8dbb6ddb3ddb" translate="yes" xml:space="preserve">
          <source>Calculates the quotient of Euclidean division of &lt;code&gt;self&lt;/code&gt; by &lt;code&gt;rhs&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;rhs&lt;/code&gt; による &lt;code&gt;self&lt;/code&gt; のユークリッド除算の商を計算します。</target>
        </trans-unit>
        <trans-unit id="f5a8c64bc432948fb8acbf8240c8594765e8fa48" translate="yes" xml:space="preserve">
          <source>Calculates the remainder &lt;code&gt;self.rem_euclid(rhs)&lt;/code&gt; as if by Euclidean division.</source>
          <target state="translated">ユークリッド除算の場合と同様に、残りの &lt;code&gt;self.rem_euclid(rhs)&lt;/code&gt; を計算します。</target>
        </trans-unit>
        <trans-unit id="dd73ba699034056b9c5150298e8d456b025d264b" translate="yes" xml:space="preserve">
          <source>Calculates the remainder when &lt;code&gt;self&lt;/code&gt; is divided by &lt;code&gt;rhs&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;self&lt;/code&gt; を &lt;code&gt;rhs&lt;/code&gt; で除算したときの余りを計算します。</target>
        </trans-unit>
        <trans-unit id="beb148e8941aab843a69c5323a4e82bfc27fae30" translate="yes" xml:space="preserve">
          <source>Calculations in applications like audio decoders often prioritize performance most highly. Here, we&amp;rsquo;re creating an iterator, using two adaptors, and then consuming the value. What assembly code would this Rust code compile to? Well, as of this writing, it compiles down to the same assembly you&amp;rsquo;d write by hand. There&amp;rsquo;s no loop at all corresponding to the iteration over the values in &lt;code&gt;coefficients&lt;/code&gt;: Rust knows that there are 12 iterations, so it &amp;ldquo;unrolls&amp;rdquo; the loop. &lt;em&gt;Unrolling&lt;/em&gt; is an optimization that removes the overhead of the loop controlling code and instead generates repetitive code for each iteration of the loop.</source>
          <target state="translated">オーディオデコーダーなどのアプリケーションでの計算では、多くの場合、パフォーマンスが最も優先されます。ここでは、2つのアダプターを使用してイテレーターを作成し、その値を使用しています。このRustコードはどのアセンブリコードにコンパイルできますか？まあ、これを書いている時点では、手動で書くのと同じアセンブリにコンパイルされています。 &lt;code&gt;coefficients&lt;/code&gt; の値の反復に対応するループはまったくありません。Rustは12回の反復があることを知っているため、ループを「展開」します。&lt;em&gt;アンロール&lt;/em&gt;は、ループを制御するコードのオーバーヘッドを削除し、代わりにループの反復ごとに反復的なコードを生成する最適化です。</target>
        </trans-unit>
        <trans-unit id="f8b36fa1c392c82310456798302780289916c221" translate="yes" xml:space="preserve">
          <source>Call &lt;code&gt;unsafe&lt;/code&gt; functions</source>
          <target state="translated">Call &lt;code&gt;unsafe&lt;/code&gt; functions</target>
        </trans-unit>
        <trans-unit id="21f282ae75f0466a6ba7a1e840066c459209e8a0" translate="yes" xml:space="preserve">
          <source>Call an unsafe function or method</source>
          <target state="translated">安全でない関数やメソッドを呼び出す</target>
        </trans-unit>
        <trans-unit id="0298ffd4d4d74b375411d1b2e3969f0f3205473d" translate="yes" xml:space="preserve">
          <source>Call expressions</source>
          <target state="translated">呼び出し式</target>
        </trans-unit>
        <trans-unit id="6249f8a9ffd810d4ed69b84e3c802196af864e8b" translate="yes" xml:space="preserve">
          <source>Call traits and coercions</source>
          <target state="translated">コール形質と強要</target>
        </trans-unit>
        <trans-unit id="3c586bbc683322c086eef8701f61479b8313e2e3" translate="yes" xml:space="preserve">
          <source>Callers of memory allocation APIs wishing to abort computation in response to an allocation error are encouraged to call this function, rather than directly invoking &lt;code&gt;panic!&lt;/code&gt; or similar.</source>
          <target state="translated">割り当てエラーに応じて計算を中止したいメモリ割り当てAPIの呼び出し元は、直接 &lt;code&gt;panic!&lt;/code&gt; を呼び出すのではなく、この関数を呼び出すことをお勧めします。または類似。</target>
        </trans-unit>
        <trans-unit id="0a1fed80ce769e9299beec7ef90b5a7b9c915af1" translate="yes" xml:space="preserve">
          <source>Callers of this function are responsible that these preconditions are satisfied:</source>
          <target state="translated">この関数の呼び出し元は、これらの前提条件が満たされていることに責任を持ちます。</target>
        </trans-unit>
        <trans-unit id="d1c291d9a0fdcacf48fd819bb42d20e5d81ebaea" translate="yes" xml:space="preserve">
          <source>Callers of this function are responsible that three preconditions are satisfied:</source>
          <target state="translated">この関数の呼び出し元は、3つの前提条件が満たされていることに責任があります。</target>
        </trans-unit>
        <trans-unit id="7d8639a217f023f0e5aaf72760a98b8b29436661" translate="yes" xml:space="preserve">
          <source>Calling &lt;a href=&quot;#method.wait&quot;&gt;&lt;code&gt;wait&lt;/code&gt;&lt;/a&gt; (or other functions that wrap around it) will make the parent process wait until the child has actually exited before continuing.</source>
          <target state="translated">&lt;a href=&quot;#method.wait&quot;&gt; &lt;code&gt;wait&lt;/code&gt; &lt;/a&gt;（またはそれをラップする他の関数）を呼び出すと、続行する前に、子プロセスが実際に終了するまで親プロセスを待機させます。</target>
        </trans-unit>
        <trans-unit id="481d687176f898ccda26367fc40f1ddb55f0bae7" translate="yes" xml:space="preserve">
          <source>Calling &lt;a href=&quot;struct.child#method.wait&quot;&gt;&lt;code&gt;wait&lt;/code&gt;&lt;/a&gt; (or other functions that wrap around it) will make the parent process wait until the child has actually exited before continuing.</source>
          <target state="translated">Calling &lt;a href=&quot;struct.child#method.wait&quot;&gt; &lt;code&gt;wait&lt;/code&gt; &lt;/a&gt; (or other functions that wrap around it) will make the parent process wait until the child has actually exited before continuing.</target>
        </trans-unit>
        <trans-unit id="2e7c98d8910ba30f7a29fe334c3bdf59a65f7d25" translate="yes" xml:space="preserve">
          <source>Calling &lt;a href=&quot;trait.iterator#tymethod.next&quot;&gt;&lt;code&gt;next&lt;/code&gt;&lt;/a&gt; this way gets repetitive. Rust has a construct which can call &lt;a href=&quot;trait.iterator#tymethod.next&quot;&gt;&lt;code&gt;next&lt;/code&gt;&lt;/a&gt; on your iterator, until it reaches &lt;code&gt;None&lt;/code&gt;. Let's go over that next.</source>
          <target state="translated">Calling &lt;a href=&quot;trait.iterator#tymethod.next&quot;&gt; &lt;code&gt;next&lt;/code&gt; &lt;/a&gt; this way gets repetitive. Rust has a construct which can call &lt;a href=&quot;trait.iterator#tymethod.next&quot;&gt; &lt;code&gt;next&lt;/code&gt; &lt;/a&gt; on your iterator, until it reaches &lt;code&gt;None&lt;/code&gt; . Let's go over that next.</target>
        </trans-unit>
        <trans-unit id="062a68bd5946d6865cea7336de4cb67da3dd476e" translate="yes" xml:space="preserve">
          <source>Calling &lt;code id=&quot;calling-confignew-and-handling-errors&quot;&gt;Config::new&lt;/code&gt; and Handling Errors</source>
          <target state="translated">&lt;code id=&quot;calling-confignew-and-handling-errors&quot;&gt;Config::new&lt;/code&gt; 呼び出しとエラーの処理</target>
        </trans-unit>
        <trans-unit id="f2db88eb30c547ef9dcc31ceb834f1125361cdd6" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;advance_back_by(0)&lt;/code&gt; does not consume any elements and always returns [&lt;code&gt;Ok(())&lt;/code&gt;].</source>
          <target state="translated">Calling &lt;code&gt;advance_back_by(0)&lt;/code&gt; does not consume any elements and always returns [ &lt;code&gt;Ok(())&lt;/code&gt; ].</target>
        </trans-unit>
        <trans-unit id="29810a8b26f09a3007bc1a15cd51bd68ab82979c" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;advance_by(0)&lt;/code&gt; does not consume any elements and always returns [&lt;code&gt;Ok(())&lt;/code&gt;].</source>
          <target state="translated">Calling &lt;code&gt;advance_by(0)&lt;/code&gt; does not consume any elements and always returns [ &lt;code&gt;Ok(())&lt;/code&gt; ].</target>
        </trans-unit>
        <trans-unit id="e40c65454f5635fc0b10e5666dc4831c6b5a85ea" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;into_owned&lt;/code&gt; on a &lt;code&gt;Cow::Borrowed&lt;/code&gt; clones the underlying data and becomes a &lt;code&gt;Cow::Owned&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;Cow::Borrowed&lt;/code&gt; &lt;code&gt;into_owned&lt;/code&gt; を呼び出すと、基になるデータが複製され、 &lt;code&gt;Cow::Owned&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="d45f4417b85022c3db61725f3af3e2cc322eb41e" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;into_owned&lt;/code&gt; on a &lt;code&gt;Cow::Owned&lt;/code&gt; is a no-op:</source>
          <target state="translated">&lt;code&gt;Cow::Owned&lt;/code&gt; &lt;code&gt;into_owned&lt;/code&gt; を呼び出すと何も起こりません。</target>
        </trans-unit>
        <trans-unit id="695c031ebd8b1d35a483a10782e7c17d879fd0d1" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;join&lt;/code&gt; on the handle blocks the thread currently running until the thread represented by the handle terminates. &lt;em&gt;Blocking&lt;/em&gt; a thread means that thread is prevented from performing work or exiting. Because we&amp;rsquo;ve put the call to &lt;code&gt;join&lt;/code&gt; after the main thread&amp;rsquo;s &lt;code&gt;for&lt;/code&gt; loop, running Listing 16-2 should produce output similar to this:</source>
          <target state="translated">ハンドルで &lt;code&gt;join&lt;/code&gt; を呼び出すと、ハンドルで表されるスレッドが終了するまで、現在実行中のスレッドがブロックされます。スレッドを&lt;em&gt;ブロック&lt;/em&gt;するとは、スレッドが作業を実行したり終了したりできないようにすることです。メインスレッドの &lt;code&gt;for&lt;/code&gt; ループの後に &lt;code&gt;join&lt;/code&gt; の呼び出しを配置し​​ているため、リスト16-2を実行すると、次のような出力が生成されます。</target>
        </trans-unit>
        <trans-unit id="bba53e5336fa9eed56530a5c7e1f4d704c60b408" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;next()&lt;/code&gt; this way gets repetitive. Rust has a construct which can call &lt;code&gt;next()&lt;/code&gt; on your iterator, until it reaches &lt;code&gt;None&lt;/code&gt;. Let's go over that next.</source>
          <target state="translated">この方法で &lt;code&gt;next()&lt;/code&gt; を呼び出すと、繰り返しが多くなります。Rustには、 &lt;code&gt;None&lt;/code&gt; に到達するまでイテレータで &lt;code&gt;next()&lt;/code&gt; を呼び出すことができる構成要素があります。次はそれについて見ていきましょう。</target>
        </trans-unit>
        <trans-unit id="52eefc013b01e5d9adae0a652dc16672febe75fe" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;nth()&lt;/code&gt; multiple times doesn't rewind the iterator:</source>
          <target state="translated">&lt;code&gt;nth()&lt;/code&gt; を複数回呼び出しても、イテレータは巻き戻されません。</target>
        </trans-unit>
        <trans-unit id="162f7cd67f7da63727e6f1ac3373291fc6afc8f1" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;nth_back()&lt;/code&gt; multiple times doesn't rewind the iterator:</source>
          <target state="translated">&lt;code&gt;nth_back()&lt;/code&gt; を複数回呼び出しても、イテレータは巻き戻されません。</target>
        </trans-unit>
        <trans-unit id="c598d6b0bb84ae897f110d0577b80a5562b3ffe9" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;to_string_lossy&lt;/code&gt; on a &lt;code&gt;CStr&lt;/code&gt; containing invalid UTF-8:</source>
          <target state="translated">無効なUTF-8を含む &lt;code&gt;CStr&lt;/code&gt; で &lt;code&gt;to_string_lossy&lt;/code&gt; を呼び出す：</target>
        </trans-unit>
        <trans-unit id="7e6835821e80fa4f9f034eef42e8cd6c55d7f554" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;to_string_lossy&lt;/code&gt; on a &lt;code&gt;CStr&lt;/code&gt; containing valid UTF-8:</source>
          <target state="translated">有効なUTF-8を含む &lt;code&gt;CStr&lt;/code&gt; で &lt;code&gt;to_string_lossy&lt;/code&gt; を呼び出す：</target>
        </trans-unit>
        <trans-unit id="7c7011eb1a41a55a7c56907e801179e9dea5b3cf" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;to_string_lossy&lt;/code&gt; on a &lt;code&gt;Path&lt;/code&gt; with valid unicode:</source>
          <target state="translated">有効なユニコードを &lt;code&gt;to_string_lossy&lt;/code&gt; して &lt;code&gt;Path&lt;/code&gt; でto_string_lossyを呼び出す：</target>
        </trans-unit>
        <trans-unit id="f31c7c45b0c7aeef2d4d0ffc68da4406c29790a0" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;to_string_lossy&lt;/code&gt; on an &lt;code&gt;OsStr&lt;/code&gt; with invalid unicode:</source>
          <target state="translated">無効なユニコードを &lt;code&gt;to_string_lossy&lt;/code&gt; して &lt;code&gt;OsStr&lt;/code&gt; でto_string_lossyを呼び出す：</target>
        </trans-unit>
        <trans-unit id="9de067b738f05e2c853ce62bda78f70da2c52df0" translate="yes" xml:space="preserve">
          <source>Calling Rust Functions from Other Languages</source>
          <target state="translated">他の言語からRust関数を呼び出す</target>
        </trans-unit>
        <trans-unit id="469b5b1db440c09f5ea9cbc0b01c11c197598149" translate="yes" xml:space="preserve">
          <source>Calling a &lt;code&gt;run&lt;/code&gt; function in &lt;em&gt;lib.rs&lt;/em&gt;</source>
          <target state="translated">呼び出し &lt;code&gt;run&lt;/code&gt; 中の関数&lt;em&gt;lib.rsを&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c98cab239f2466bb3a3bef081514cf79b241c2da" translate="yes" xml:space="preserve">
          <source>Calling a by-value closure</source>
          <target state="translated">値によるクロージャの呼び出し</target>
        </trans-unit>
        <trans-unit id="c225172ba8dd6c241a62db17923fd52257ec1ecf" translate="yes" xml:space="preserve">
          <source>Calling a closure</source>
          <target state="translated">閉鎖の呼び出し</target>
        </trans-unit>
        <trans-unit id="3000ca5cbcd1109b15d9b1fea7a62a08e027beeb" translate="yes" xml:space="preserve">
          <source>Calling a function with the wrong call ABI or unwinding from a function with the wrong unwind ABI.</source>
          <target state="translated">間違った呼び出しABIで関数を呼び出したり、間違った巻き戻しABIで関数から巻き戻したりした場合。</target>
        </trans-unit>
        <trans-unit id="430899e63ff06c11168e52a7ad1cd9798d9e810e" translate="yes" xml:space="preserve">
          <source>Calling a mutably capturing closure</source>
          <target state="translated">変異的に捕捉されるクロージャの呼び出し</target>
        </trans-unit>
        <trans-unit id="eeeb342591bb15dc955bacb8ca5d948735ea0a0e" translate="yes" xml:space="preserve">
          <source>Calling an Unsafe Function or Method</source>
          <target state="translated">安全でない関数やメソッドの呼び出し</target>
        </trans-unit>
        <trans-unit id="dd4cba3cdf6aee25a0708da105b4aa73ef9194d2" translate="yes" xml:space="preserve">
          <source>Calling an unsafe function (including an intrinsic or foreign function).</source>
          <target state="translated">安全でない関数の呼び出し (本質的な関数または外部関数を含む)。</target>
        </trans-unit>
        <trans-unit id="b8ce24087e4cce4c1779eadefe24214064c78c10" translate="yes" xml:space="preserve">
          <source>Calling functions marked unsafe</source>
          <target state="translated">安全でないとマークされた関数の呼び出し</target>
        </trans-unit>
        <trans-unit id="92b8d2a38649974749bb36dd214a74950b90f29a" translate="yes" xml:space="preserve">
          <source>Calling functions via FFI</source>
          <target state="translated">FFIを介した機能の呼び出し</target>
        </trans-unit>
        <trans-unit id="b8dfbd67e3bce8053bc02fac21adfe30570f8667" translate="yes" xml:space="preserve">
          <source>Calling its &lt;a href=&quot;../std/ops/trait.drop&quot;&gt;&lt;code&gt;std::ops::Drop::drop&lt;/code&gt;&lt;/a&gt; method, if it has one.</source>
          <target state="translated">&lt;a href=&quot;../std/ops/trait.drop&quot;&gt; &lt;code&gt;std::ops::Drop::drop&lt;/code&gt; &lt;/a&gt;メソッドがある場合は、それを呼び出します。</target>
        </trans-unit>
        <trans-unit id="4a9d183dccc32e902a934e57b39dbf24776d3a36" translate="yes" xml:space="preserve">
          <source>Calling next on a fused iterator that has returned &lt;code&gt;None&lt;/code&gt; once is guaranteed to return &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; again. This trait should be implemented by all iterators that behave this way because it allows optimizing &lt;a href=&quot;trait.iterator#method.fuse&quot;&gt;&lt;code&gt;Iterator::fuse()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Calling next on a fused iterator that has returned &lt;code&gt;None&lt;/code&gt; once is guaranteed to return &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt; again. This trait should be implemented by all iterators that behave this way because it allows optimizing &lt;a href=&quot;trait.iterator#method.fuse&quot;&gt; &lt;code&gt;Iterator::fuse()&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="6cbee1e3dfc8c33deb1f76b5bfd498db4ce5ef9a" translate="yes" xml:space="preserve">
          <source>Calling next on a fused iterator that has returned &lt;code&gt;None&lt;/code&gt; once is guaranteed to return &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; again. This trait should be implemented by all iterators that behave this way because it allows optimizing &lt;a href=&quot;trait.iterator#method.fuse&quot;&gt;&lt;code&gt;Iterator::fuse&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">一度 &lt;code&gt;None&lt;/code&gt; を返した融合イテレータでnextを呼び出すと、再び&lt;a href=&quot;../option/enum.option#variant.None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt;を返すことが保証されます。この特性は、&lt;a href=&quot;trait.iterator#method.fuse&quot;&gt; &lt;code&gt;Iterator::fuse&lt;/code&gt; &lt;/a&gt;最適化できるため、このように動作するすべての反復子によって実装する必要があります。</target>
        </trans-unit>
        <trans-unit id="48b70cef98bea7c46d62ecdc6c6d6c2fb2f1a678" translate="yes" xml:space="preserve">
          <source>Calling the command line parsing logic with the argument values</source>
          <target state="translated">引数の値でコマンドライン解析ロジックを呼び出す</target>
        </trans-unit>
        <trans-unit id="b17f2dea9d34711d4634fe61d5262d4b3a7e4949" translate="yes" xml:space="preserve">
          <source>Calling this function multiple times may result in different behavior, depending on the operating system. On Linux, the second call will return &lt;code&gt;Ok(())&lt;/code&gt;, but on macOS, it will return &lt;code&gt;ErrorKind::NotConnected&lt;/code&gt;. This may change in the future.</source>
          <target state="translated">この関数を複数回呼び出すと、オペレーティングシステムによっては異なる動作が発生する可能性があります。Linuxでは、2番目の呼び出しは &lt;code&gt;Ok(())&lt;/code&gt; を返しますが、macOSでは &lt;code&gt;ErrorKind::NotConnected&lt;/code&gt; ます。これは将来変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="4cea1097671638adc27e477a5119485fa2aecc7d" translate="yes" xml:space="preserve">
          <source>Calling this method with an out-of-bounds index is &lt;em&gt;&lt;a href=&quot;../../reference/behavior-considered-undefined&quot;&gt;undefined behavior&lt;/a&gt;&lt;/em&gt; even if the resulting reference is not used.</source>
          <target state="translated">Calling this method with an out-of-bounds index is &lt;em&gt;&lt;a href=&quot;../../reference/behavior-considered-undefined&quot;&gt;undefined behavior&lt;/a&gt;&lt;/em&gt; even if the resulting reference is not used.</target>
        </trans-unit>
        <trans-unit id="c84369d3cd0fd24226e8475363ef8bafba6016b8" translate="yes" xml:space="preserve">
          <source>Calling this method with an out-of-bounds index is &lt;em&gt;&lt;a href=&quot;../reference/behavior-considered-undefined&quot;&gt;undefined behavior&lt;/a&gt;&lt;/em&gt; even if the resulting reference is not used.</source>
          <target state="translated">Calling this method with an out-of-bounds index is &lt;em&gt;&lt;a href=&quot;../reference/behavior-considered-undefined&quot;&gt;undefined behavior&lt;/a&gt;&lt;/em&gt; even if the resulting reference is not used.</target>
        </trans-unit>
        <trans-unit id="6de5835c634ba536357a78df4d3dca323f88d417" translate="yes" xml:space="preserve">
          <source>Calling this method with an out-of-bounds index or when &lt;code&gt;self&lt;/code&gt; is not dereferencable is &lt;em&gt;&lt;a href=&quot;../../reference/behavior-considered-undefined&quot;&gt;undefined behavior&lt;/a&gt;&lt;/em&gt; even if the resulting pointer is not used.</source>
          <target state="translated">Calling this method with an out-of-bounds index or when &lt;code&gt;self&lt;/code&gt; is not dereferencable is &lt;em&gt;&lt;a href=&quot;../../reference/behavior-considered-undefined&quot;&gt;undefined behavior&lt;/a&gt;&lt;/em&gt; even if the resulting pointer is not used.</target>
        </trans-unit>
        <trans-unit id="f9a6314df9e5901bb23d3392581da8969bc4be97" translate="yes" xml:space="preserve">
          <source>Calling this method with an out-of-bounds index or when &lt;code&gt;self&lt;/code&gt; is not dereferencable is &lt;em&gt;&lt;a href=&quot;../reference/behavior-considered-undefined&quot;&gt;undefined behavior&lt;/a&gt;&lt;/em&gt; even if the resulting pointer is not used.</source>
          <target state="translated">Calling this method with an out-of-bounds index or when &lt;code&gt;self&lt;/code&gt; is not dereferencable is &lt;em&gt;&lt;a href=&quot;../reference/behavior-considered-undefined&quot;&gt;undefined behavior&lt;/a&gt;&lt;/em&gt; even if the resulting pointer is not used.</target>
        </trans-unit>
        <trans-unit id="a432cbdab953f751c07835790f0e4fa2e1cbdcd7" translate="yes" xml:space="preserve">
          <source>Calling this when the content is not yet fully initialized causes undefined behavior: it is up to the caller to guarantee that the &lt;code&gt;MaybeUninit&amp;lt;T&amp;gt;&lt;/code&gt; really is in an initialized state.</source>
          <target state="translated">Calling this when the content is not yet fully initialized causes undefined behavior: it is up to the caller to guarantee that the &lt;code&gt;MaybeUninit&amp;lt;T&amp;gt;&lt;/code&gt; really is in an initialized state.</target>
        </trans-unit>
        <trans-unit id="ecc0b986c27dcc0ae97794ee7ef1d48ffcfe2925" translate="yes" xml:space="preserve">
          <source>Calling this when the content is not yet fully initialized causes undefined behavior: it is up to the caller to guarantee that the &lt;code&gt;MaybeUninit&amp;lt;T&amp;gt;&lt;/code&gt; really is in an initialized state. For instance, &lt;code&gt;.assume_init_mut()&lt;/code&gt; cannot be used to initialize a &lt;code&gt;MaybeUninit&lt;/code&gt;.</source>
          <target state="translated">Calling this when the content is not yet fully initialized causes undefined behavior: it is up to the caller to guarantee that the &lt;code&gt;MaybeUninit&amp;lt;T&amp;gt;&lt;/code&gt; really is in an initialized state. For instance, &lt;code&gt;.assume_init_mut()&lt;/code&gt; cannot be used to initialize a &lt;code&gt;MaybeUninit&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="575e1c052b421159bac0ed88e5f50e064494a831" translate="yes" xml:space="preserve">
          <source>Calls &lt;code&gt;op&lt;/code&gt; if the result is &lt;a href=&quot;enum.result#variant.Err&quot;&gt;&lt;code&gt;Err&lt;/code&gt;&lt;/a&gt;, otherwise returns the &lt;a href=&quot;enum.result#variant.Ok&quot;&gt;&lt;code&gt;Ok&lt;/code&gt;&lt;/a&gt; value of &lt;code&gt;self&lt;/code&gt;.</source>
          <target state="translated">結果が&lt;a href=&quot;enum.result#variant.Err&quot;&gt; &lt;code&gt;Err&lt;/code&gt; の&lt;/a&gt;場合は &lt;code&gt;op&lt;/code&gt; を呼び出し、そうでない場合は &lt;code&gt;self&lt;/code&gt; の&lt;a href=&quot;enum.result#variant.Ok&quot;&gt; &lt;code&gt;Ok&lt;/code&gt; &lt;/a&gt;値を返します。</target>
        </trans-unit>
        <trans-unit id="f961f899a2cfefa64e10f259f8eb29aaf36dad04" translate="yes" xml:space="preserve">
          <source>Calls &lt;code&gt;op&lt;/code&gt; if the result is &lt;a href=&quot;enum.result#variant.Ok&quot;&gt;&lt;code&gt;Ok&lt;/code&gt;&lt;/a&gt;, otherwise returns the &lt;a href=&quot;enum.result#variant.Err&quot;&gt;&lt;code&gt;Err&lt;/code&gt;&lt;/a&gt; value of &lt;code&gt;self&lt;/code&gt;.</source>
          <target state="translated">結果が&lt;a href=&quot;enum.result#variant.Ok&quot;&gt; &lt;code&gt;Ok&lt;/code&gt; の&lt;/a&gt;場合は &lt;code&gt;op&lt;/code&gt; を呼び出し、それ以外の場合は &lt;code&gt;self&lt;/code&gt; の&lt;a href=&quot;enum.result#variant.Err&quot;&gt; &lt;code&gt;Err&lt;/code&gt; &lt;/a&gt;値を返します。</target>
        </trans-unit>
        <trans-unit id="e95d263a4a075ff123b003c74cd1a9d0ca465605" translate="yes" xml:space="preserve">
          <source>Calls a closure on each element of an iterator.</source>
          <target state="translated">イテレータの各要素のクロージャを呼び出します。</target>
        </trans-unit>
        <trans-unit id="396c20d59d986fb07a8fb04d5022a6446eb8eff0" translate="yes" xml:space="preserve">
          <source>Calls a closure on each element of an iterator. &lt;a href=&quot;../../../iter/trait.iterator#method.for_each&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">イテレータの各要素でクロージャを呼び出します。&lt;a href=&quot;../../../iter/trait.iterator#method.for_each&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="6cfce5b305846828d89983a5f01e9f39ff3f593f" translate="yes" xml:space="preserve">
          <source>Calls a closure on each element of an iterator. &lt;a href=&quot;../../iter/trait.iterator#method.for_each&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">イテレータの各要素でクロージャを呼び出します。&lt;a href=&quot;../../iter/trait.iterator#method.for_each&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="53b452c2ba01d8ad9acc0876cf64e78699e18a45" translate="yes" xml:space="preserve">
          <source>Calls a closure on each element of an iterator. &lt;a href=&quot;../iter/trait.iterator#method.for_each&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">イテレータの各要素でクロージャを呼び出します。&lt;a href=&quot;../iter/trait.iterator#method.for_each&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f2da9126523f32597a07db6c54ee2184d55ce5c2" translate="yes" xml:space="preserve">
          <source>Calls a closure on each element of an iterator. &lt;a href=&quot;iter/trait.iterator#method.for_each&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">イテレータの各要素でクロージャを呼び出します。&lt;a href=&quot;iter/trait.iterator#method.for_each&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="39a1d0073e96739a4a7cf3debb043e2bb44d2b46" translate="yes" xml:space="preserve">
          <source>Calls a closure on each element of an iterator. &lt;a href=&quot;trait.iterator#method.for_each&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">イテレータの各要素でクロージャを呼び出します。&lt;a href=&quot;trait.iterator#method.for_each&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="fa7a44819ff5dd8ef777e95d162b39eea9940e2a" translate="yes" xml:space="preserve">
          <source>Calls of &lt;a href=&quot;items/functions#const-functions&quot;&gt;const functions&lt;/a&gt; and const methods.</source>
          <target state="translated">&lt;a href=&quot;items/functions#const-functions&quot;&gt;const関数&lt;/a&gt;とconstメソッドの呼び出し。</target>
        </trans-unit>
        <trans-unit id="677169912cc36864d10f29e6c2b2cb3ca7cc5a6e" translate="yes" xml:space="preserve">
          <source>Calls to &lt;code&gt;write&lt;/code&gt; are not guaranteed to block waiting for data to be written, and a write which would otherwise block can be indicated through an &lt;a href=&quot;../result/enum.result#variant.Err&quot;&gt;&lt;code&gt;Err&lt;/code&gt;&lt;/a&gt; variant.</source>
          <target state="translated">&lt;code&gt;write&lt;/code&gt; 呼び出しは、データが書き込まれるのを待ってブロックすることは保証されていません。そうでなければブロックされる書き込みは、&lt;a href=&quot;../result/enum.result#variant.Err&quot;&gt; &lt;code&gt;Err&lt;/code&gt; &lt;/a&gt;バリアントによって示されます。</target>
        </trans-unit>
        <trans-unit id="30fc82876340b5cd98aa5e28dc1e1ded678cb8bb" translate="yes" xml:space="preserve">
          <source>Calls to other &lt;em&gt;safe&lt;/em&gt; const functions (whether by function call or method call)</source>
          <target state="translated">他の&lt;em&gt;安全な&lt;/em&gt; const関数の呼び出し（関数呼び出しまたはメソッド呼び出しによる）</target>
        </trans-unit>
        <trans-unit id="c1fad511b779575835db0e2fe05a2f679a24bff7" translate="yes" xml:space="preserve">
          <source>Can &lt;code&gt;CaseInsensitiveString&lt;/code&gt; implement &lt;code&gt;Borrow&amp;lt;str&amp;gt;&lt;/code&gt;? It certainly can provide a reference to a string slice via its contained owned string. But because its &lt;code&gt;Hash&lt;/code&gt; implementation differs, it behaves differently from &lt;code&gt;str&lt;/code&gt; and therefore must not, in fact, implement &lt;code&gt;Borrow&amp;lt;str&amp;gt;&lt;/code&gt;. If it wants to allow others access to the underlying &lt;code&gt;str&lt;/code&gt;, it can do that via &lt;code&gt;AsRef&amp;lt;str&amp;gt;&lt;/code&gt; which doesn&amp;rsquo;t carry any extra requirements.</source>
          <target state="translated">&lt;code&gt;CaseInsensitiveString&lt;/code&gt; は &lt;code&gt;Borrow&amp;lt;str&amp;gt;&lt;/code&gt; 実装できますか？確かに、含まれている所有文字列を介して文字列スライスへの参照を提供できます。ただし、 &lt;code&gt;Hash&lt;/code&gt; 実装は異なるため、 &lt;code&gt;str&lt;/code&gt; とは動作が異なり、実際には &lt;code&gt;Borrow&amp;lt;str&amp;gt;&lt;/code&gt; 実装してはなりません。他の人が基になる &lt;code&gt;str&lt;/code&gt; にアクセスできるようにしたい場合は、 &lt;code&gt;AsRef&amp;lt;str&amp;gt;&lt;/code&gt; を介して行うことができます。追加の要件はありません。</target>
        </trans-unit>
        <trans-unit id="bbee583b112c61027e995c9cbc6b83f64f2c6016" translate="yes" xml:space="preserve">
          <source>Can I turn these warnings into errors by denying a lint?</source>
          <target state="translated">リントを否定することで、これらの警告をエラーに変えることができるのでしょうか?</target>
        </trans-unit>
        <trans-unit id="ffedd5c94247b98253125279c378517d376f585f" translate="yes" xml:space="preserve">
          <source>Cannot convert inline assembly operand to a single LLVM value.</source>
          <target state="translated">インラインアセンブリオペランドを単一のLLVM値に変換できません。</target>
        </trans-unit>
        <trans-unit id="064d19e691ce5c4c741753adfe6009671077b524" translate="yes" xml:space="preserve">
          <source>Cannot mutate place in this match guard.</source>
          <target state="translated">このマッチガードの場所を変異させることはできません。</target>
        </trans-unit>
        <trans-unit id="b5e1a76747d8e8f7e23797139376312ac515519f" translate="yes" xml:space="preserve">
          <source>Cannot return value that references local variable</source>
          <target state="translated">ローカル変数を参照する値を返すことができない</target>
        </trans-unit>
        <trans-unit id="18946a7345ea25ae184b2fa7fd09696f851660ca" translate="yes" xml:space="preserve">
          <source>CannotReallocInPlace</source>
          <target state="translated">CannotReallocInPlace</target>
        </trans-unit>
        <trans-unit id="db708338b8108bceb02a5ab38088ad773c7a38f5" translate="yes" xml:space="preserve">
          <source>CannotReallocInPlace::borrow</source>
          <target state="translated">CannotReallocInPlace::borrow</target>
        </trans-unit>
        <trans-unit id="fbb3b1ed781e98b772cd25d7177cc80bcc94e34d" translate="yes" xml:space="preserve">
          <source>CannotReallocInPlace::borrow_mut</source>
          <target state="translated">CannotReallocInPlace::borrow_mut</target>
        </trans-unit>
        <trans-unit id="6a68da32986df1cc594041b4ac0f8b52b907e956" translate="yes" xml:space="preserve">
          <source>CannotReallocInPlace::cause</source>
          <target state="translated">CannotReallocInPlace::cause</target>
        </trans-unit>
        <trans-unit id="0db277ddb0842c8a035d8720f8ee7ca44be8a600" translate="yes" xml:space="preserve">
          <source>CannotReallocInPlace::clone</source>
          <target state="translated">CannotReallocInPlace::clone</target>
        </trans-unit>
        <trans-unit id="c0b3d6b832bf50e8f5f2e1a868329bf3eb6b5e6a" translate="yes" xml:space="preserve">
          <source>CannotReallocInPlace::clone_from</source>
          <target state="translated">CannotReallocInPlace::clone_from</target>
        </trans-unit>
        <trans-unit id="e22e1c5bc5858fa8d7ecb67f7ca21dd0bfd35fe4" translate="yes" xml:space="preserve">
          <source>CannotReallocInPlace::clone_into</source>
          <target state="translated">CannotReallocInPlace::clone_into</target>
        </trans-unit>
        <trans-unit id="3f38ff0fdbbf2f703ff8e60b4973e01fb2a3bf31" translate="yes" xml:space="preserve">
          <source>CannotReallocInPlace::description</source>
          <target state="translated">CannotReallocInPlace::description</target>
        </trans-unit>
        <trans-unit id="8d3358893adcc87c82c15d615a64fca665ba176c" translate="yes" xml:space="preserve">
          <source>CannotReallocInPlace::eq</source>
          <target state="translated">CannotReallocInPlace::eq</target>
        </trans-unit>
        <trans-unit id="c436414dc0b3a3215eaec90aedd27a561b91d920" translate="yes" xml:space="preserve">
          <source>CannotReallocInPlace::fmt</source>
          <target state="translated">CannotReallocInPlace::fmt</target>
        </trans-unit>
        <trans-unit id="f3df1a70f83c9e629b222262e235b2194c9feea5" translate="yes" xml:space="preserve">
          <source>CannotReallocInPlace::from</source>
          <target state="translated">CannotReallocInPlace::from</target>
        </trans-unit>
        <trans-unit id="f38c26641404735febdd63d9ebbcb95632c7fc10" translate="yes" xml:space="preserve">
          <source>CannotReallocInPlace::into</source>
          <target state="translated">CannotReallocInPlace::into</target>
        </trans-unit>
        <trans-unit id="677b61d26186f5001fbbb338b1eb39badeb9035c" translate="yes" xml:space="preserve">
          <source>CannotReallocInPlace::ne</source>
          <target state="translated">CannotReallocInPlace::ne</target>
        </trans-unit>
        <trans-unit id="3aba62335d5c79a8d639fce91781f21d828e3d6c" translate="yes" xml:space="preserve">
          <source>CannotReallocInPlace::source</source>
          <target state="translated">CannotReallocInPlace::source</target>
        </trans-unit>
        <trans-unit id="4de309649814b9340379f621201577de2e665add" translate="yes" xml:space="preserve">
          <source>CannotReallocInPlace::to_owned</source>
          <target state="translated">CannotReallocInPlace::to_owned</target>
        </trans-unit>
        <trans-unit id="ab6f21ac0212ee889c5ddb86f6b0fa133ac082b4" translate="yes" xml:space="preserve">
          <source>CannotReallocInPlace::to_string</source>
          <target state="translated">CannotReallocInPlace::to_string</target>
        </trans-unit>
        <trans-unit id="f3203a2632d9e1d1c1b0b63fb1fc421d48f9d3fa" translate="yes" xml:space="preserve">
          <source>CannotReallocInPlace::try_from</source>
          <target state="translated">CannotReallocInPlace::try_from</target>
        </trans-unit>
        <trans-unit id="1fd1104d18cfb0e5a2e789df04e4a5b40e046d7c" translate="yes" xml:space="preserve">
          <source>CannotReallocInPlace::try_into</source>
          <target state="translated">CannotReallocInPlace::try_into</target>
        </trans-unit>
        <trans-unit id="0844df8570619a7f92b1ec959e1e9f9855538d7f" translate="yes" xml:space="preserve">
          <source>CannotReallocInPlace::type_id</source>
          <target state="translated">CannotReallocInPlace::type_id</target>
        </trans-unit>
        <trans-unit id="77c5882354fe35c06ec86f582037bab9711670ae" translate="yes" xml:space="preserve">
          <source>Canonical paths</source>
          <target state="translated">正準経路</target>
        </trans-unit>
        <trans-unit id="3a333c720c89e44e8e70bacda4bf0073f227911d" translate="yes" xml:space="preserve">
          <source>Capacity Management</source>
          <target state="translated">容量管理</target>
        </trans-unit>
        <trans-unit id="7a9b6deb8b492b7b6bc5256cd674c23336f610fb" translate="yes" xml:space="preserve">
          <source>Capacity and reallocation</source>
          <target state="translated">キャパシティと再配置</target>
        </trans-unit>
        <trans-unit id="8907e14a9398ea113a7bc411fe35367c56410c78" translate="yes" xml:space="preserve">
          <source>Capture a &lt;a href=&quot;../book/ch13-01-closures&quot;&gt;closure&lt;/a&gt;'s environment by value.</source>
          <target state="translated">Capture a &lt;a href=&quot;../book/ch13-01-closures&quot;&gt;closure&lt;/a&gt;'s environment by value.</target>
        </trans-unit>
        <trans-unit id="7d0cdb20337630c37884981fdf257c3959384c63" translate="yes" xml:space="preserve">
          <source>Capture a &lt;a href=&quot;https://doc.rust-lang.org/book/second-edition/ch13-01-closures.html&quot;&gt;closure&lt;/a&gt;'s environment by value.</source>
          <target state="translated">値によって&lt;a href=&quot;https://doc.rust-lang.org/book/second-edition/ch13-01-closures.html&quot;&gt;クロージャ&lt;/a&gt;の環境をキャプチャします。</target>
        </trans-unit>
        <trans-unit id="c20f3daba48c455aa890155202bd389442a301f5" translate="yes" xml:space="preserve">
          <source>Capture modes</source>
          <target state="translated">キャプチャモード</target>
        </trans-unit>
        <trans-unit id="6d71da6e52376ced7bee988e2638d4f0306eaeb0" translate="yes" xml:space="preserve">
          <source>Captures a common usage pattern for allocators.</source>
          <target state="translated">アロケータの一般的な使用パターンをキャプチャします。</target>
        </trans-unit>
        <trans-unit id="db0cd8f7115682a21391fe6952f165764529474e" translate="yes" xml:space="preserve">
          <source>Captures can occur by a special kind of borrow called a &lt;em&gt;unique immutable borrow&lt;/em&gt;, which cannot be used anywhere else in the language and cannot be written out explicitly. It occurs when modifying the referent of a mutable reference, as in the following example:</source>
          <target state="translated">キャプチャは、&lt;em&gt;一意の不変&lt;/em&gt;借用と呼ばれる特別な種類の借用によって発生する可能性があります。これは、言語内の他の場所では使用できず、明示的に書き出すこともできません。これは、次の例のように、可変参照のリファレントを変更するときに発生します。</target>
        </trans-unit>
        <trans-unit id="9f1a539db9fcfa734a9bb87c16648df26afa2363" translate="yes" xml:space="preserve">
          <source>Capturing the Environment with Closures</source>
          <target state="translated">クロージャーで環境をとらえる</target>
        </trans-unit>
        <trans-unit id="936f4787c691ca05a5fc9bd5ef003981d0fd23ea" translate="yes" xml:space="preserve">
          <source>Care should be taken to avoid modifying the internal I/O state of the underlying reader as doing so may corrupt the internal limit of this &lt;code&gt;Take&lt;/code&gt;.</source>
          <target state="translated">基になるリーダーの内部I / O状態を変更しないように注意してください。変更すると、この &lt;code&gt;Take&lt;/code&gt; の内部制限が破損する可能性があります。</target>
        </trans-unit>
        <trans-unit id="fe82bd2dff83026c3424e65f908960ac659e90f7" translate="yes" xml:space="preserve">
          <source>Care should be taken to avoid modifying the internal I/O state of the underlying readers as doing so may corrupt the internal state of this &lt;code&gt;Chain&lt;/code&gt;.</source>
          <target state="translated">基になるリーダーの内部I / O状態を変更しないように注意してください。変更すると、この &lt;code&gt;Chain&lt;/code&gt; 内部状態が破損する可能性があります。</target>
        </trans-unit>
        <trans-unit id="5a94b5eb8a1b561609332355ea058ca164007f39" translate="yes" xml:space="preserve">
          <source>Care should be taken to avoid modifying the internal I/O state of the underlying value as it may corrupt this cursor's position.</source>
          <target state="translated">このカーソルの位置を破壊する可能性があるため、基礎となる値の内部I/O状態を変更しないように注意する必要があります。</target>
        </trans-unit>
        <trans-unit id="9daf6bef99f447bfc89398170bddc979a688326f" translate="yes" xml:space="preserve">
          <source>Caret</source>
          <target state="translated">Caret</target>
        </trans-unit>
        <trans-unit id="4b543686834ff9c96b5aa004bf03e54b07ab8c7f" translate="yes" xml:space="preserve">
          <source>CaretEq</source>
          <target state="translated">CaretEq</target>
        </trans-unit>
        <trans-unit id="9b4b64d79f6456643db96cea75e7d608d9b3ccf0" translate="yes" xml:space="preserve">
          <source>Cargo Workspaces</source>
          <target state="translated">貨物のワークスペース</target>
        </trans-unit>
        <trans-unit id="6130a368f6b496bf7db8ed44dbce227dd6638c23" translate="yes" xml:space="preserve">
          <source>Cargo also provides a command called &lt;code&gt;cargo check&lt;/code&gt;. This command quickly checks your code to make sure it compiles but doesn&amp;rsquo;t produce an executable:</source>
          <target state="translated">Cargoには、 &lt;code&gt;cargo check&lt;/code&gt; というコマンドも用意されています。次のコマンドは、コードをすばやくチェックして、コンパイルできることを確認しますが、実行可能ファイルを生成しません。</target>
        </trans-unit>
        <trans-unit id="fae03eebb0a7d0738a55960ac298edd80e989e03" translate="yes" xml:space="preserve">
          <source>Cargo as Convention</source>
          <target state="translated">条約としての貨物</target>
        </trans-unit>
        <trans-unit id="6cab0b08bd02b6050df842408e982af9a890db09" translate="yes" xml:space="preserve">
          <source>Cargo can do even more than what we cover in this chapter, so for a full explanation of all its features, see &lt;a href=&quot;https://doc.rust-lang.org/cargo/index.html&quot;&gt;its documentation&lt;/a&gt;.</source>
          <target state="translated">Cargoは、この章で説明する以上のことができるので、そのすべての機能の完全な説明については、&lt;a href=&quot;https://doc.rust-lang.org/cargo/index.html&quot;&gt;そのドキュメントを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="fe0ae1f402f8c118952421638bbda4a0245c7148" translate="yes" xml:space="preserve">
          <source>Cargo compiled and ran the test. After the &lt;code&gt;Compiling&lt;/code&gt;, &lt;code&gt;Finished&lt;/code&gt;, and &lt;code&gt;Running&lt;/code&gt; lines is the line &lt;code&gt;running 1 test&lt;/code&gt;. The next line shows the name of the generated test function, called &lt;code&gt;it_works&lt;/code&gt;, and the result of running that test, &lt;code&gt;ok&lt;/code&gt;. The overall summary of running the tests appears next. The text &lt;code&gt;test result: ok.&lt;/code&gt; means that all the tests passed, and the portion that reads &lt;code&gt;1 passed; 0 failed&lt;/code&gt; totals the number of tests that passed or failed.</source>
          <target state="translated">Cargoはテストをコンパイルして実行しました。後 &lt;code&gt;Compiling&lt;/code&gt; 、 &lt;code&gt;Finished&lt;/code&gt; 、そして &lt;code&gt;Running&lt;/code&gt; ラインはラインである &lt;code&gt;running 1 test&lt;/code&gt; 。次の行は、 &lt;code&gt;it_works&lt;/code&gt; と呼ばれる生成されたテスト関数の名前と、そのテストの実行結果 &lt;code&gt;ok&lt;/code&gt; を示しています。次に、テスト実行の全体的な概要が表示されます。テキスト &lt;code&gt;test result: ok.&lt;/code&gt; すべてのテストに合格し、 &lt;code&gt;1 passed; 0 failed&lt;/code&gt; を読み取る部分が合格したことを意味します。0失敗は、合格または失敗したテストの数の合計です。</target>
        </trans-unit>
        <trans-unit id="c4eb5dc5401a6eb645def4ec38a6872d478358c8" translate="yes" xml:space="preserve">
          <source>Cargo doesn&amp;rsquo;t assume that crates in a workspace will depend on each other, so we need to be explicit about the dependency relationships between the crates.</source>
          <target state="translated">Cargoは、ワークスペース内のクレートが相互に依存するとは想定していないため、クレート間の依存関係について明示する必要があります。</target>
        </trans-unit>
        <trans-unit id="52522f7f0d2d3ffaca1376b83b97f819f079abb5" translate="yes" xml:space="preserve">
          <source>Cargo expects your source files to live inside the &lt;em&gt;src&lt;/em&gt; directory. The top-level project directory is just for README files, license information, configuration files, and anything else not related to your code. Using Cargo helps you organize your projects. There&amp;rsquo;s a place for everything, and everything is in its place.</source>
          <target state="translated">Cargoは、ソースファイルが&lt;em&gt;src&lt;/em&gt;ディレクトリ内にあることを期待しています。最上位のプロジェクトディレクトリは、READMEファイル、ライセンス情報、構成ファイルなど、コードに関係のないもののためのものです。Cargoを使用すると、プロジェクトを整理するのに役立ちます。すべてのための場所があり、すべてがその場所にあります。</target>
        </trans-unit>
        <trans-unit id="d57f99fa82a3139814f0281a8d7db9f6bec5efb4" translate="yes" xml:space="preserve">
          <source>Cargo has a mechanism that ensures you can rebuild the same artifact every time you or anyone else builds your code: Cargo will use only the versions of the dependencies you specified until you indicate otherwise. For example, what happens if next week version 0.3.15 of the &lt;code&gt;rand&lt;/code&gt; crate comes out and contains an important bug fix but also contains a regression that will break your code?</source>
          <target state="translated">Cargoには、あなたや他の誰かがコードをビルドするたびに同じアーティファクトを再ビルドできるようにするメカニズムがあります。Cargoは、指定しない限り、指定した依存関係のバージョンのみを使用します。たとえば、来週、 &lt;code&gt;rand&lt;/code&gt; crateのバージョン0.3.15がリリースされ、重要なバグ修正が含まれているが、コードを破壊するリグレッションも含まれている場合はどうなりますか？</target>
        </trans-unit>
        <trans-unit id="5fecba2ec115df22ddce40ef5e4003254a79f411" translate="yes" xml:space="preserve">
          <source>Cargo has a mechanism that ensures you can rebuild the same artifact every time you or anyone else builds your code: Cargo will use only the versions of the dependencies you specified until you indicate otherwise. For example, what happens if next week version 0.5.6 of the &lt;code&gt;rand&lt;/code&gt; crate comes out and contains an important bug fix but also contains a regression that will break your code?</source>
          <target state="translated">Cargo has a mechanism that ensures you can rebuild the same artifact every time you or anyone else builds your code: Cargo will use only the versions of the dependencies you specified until you indicate otherwise. For example, what happens if next week version 0.5.6 of the &lt;code&gt;rand&lt;/code&gt; crate comes out and contains an important bug fix but also contains a regression that will break your code?</target>
        </trans-unit>
        <trans-unit id="4c0760997d436c57df9967acadb1f0cd394905b7" translate="yes" xml:space="preserve">
          <source>Cargo has default settings for each of the profiles that apply when there aren&amp;rsquo;t any &lt;code&gt;[profile.*]&lt;/code&gt; sections in the project&amp;rsquo;s &lt;em&gt;Cargo.toml&lt;/em&gt; file. By adding &lt;code&gt;[profile.*]&lt;/code&gt; sections for any profile you want to customize, you can override any subset of the default settings. For example, here are the default values for the &lt;code&gt;opt-level&lt;/code&gt; setting for the &lt;code&gt;dev&lt;/code&gt; and &lt;code&gt;release&lt;/code&gt; profiles:</source>
          <target state="translated">Cargoには、プロジェクトの&lt;em&gt;Cargo.toml&lt;/em&gt;ファイルに &lt;code&gt;[profile.*]&lt;/code&gt; セクションがない場合に適用される各プロファイルのデフォルト設定があります。追加することにより、 &lt;code&gt;[profile.*]&lt;/code&gt; カスタマイズしたいすべてのプロファイルのセクションでは、デフォルトの設定の任意のサブセットを上書きすることができます。たとえば、 &lt;code&gt;dev&lt;/code&gt; プロファイルと &lt;code&gt;release&lt;/code&gt; プロファイルの &lt;code&gt;opt-level&lt;/code&gt; 設定のデフォルト値は次のとおりです。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="76600e94499958e17fb67485a1e7c2de5c580fda" translate="yes" xml:space="preserve">
          <source>Cargo has generated a &amp;ldquo;Hello, world!&amp;rdquo; program for you, just like the one we wrote in Listing 1-1! So far, the differences between our previous project and the project Cargo generates are that Cargo placed the code in the &lt;em&gt;src&lt;/em&gt; directory, and we have a &lt;em&gt;Cargo.toml&lt;/em&gt; configuration file in the top directory.</source>
          <target state="translated">Cargo has generated a &amp;ldquo;Hello, world!&amp;rdquo; program for you, just like the one we wrote in Listing 1-1! So far, the differences between our previous project and the project Cargo generates are that Cargo placed the code in the &lt;em&gt;src&lt;/em&gt; directory, and we have a &lt;em&gt;Cargo.toml&lt;/em&gt; configuration file in the top directory.</target>
        </trans-unit>
        <trans-unit id="825feaa769cfa687d8ced1e2139c1216c1d12d6b" translate="yes" xml:space="preserve">
          <source>Cargo has generated a Hello, world! program for you, just like the one we wrote in Listing 1-1! So far, the differences between our previous project and the project Cargo generates are that Cargo placed the code in the &lt;em&gt;src&lt;/em&gt; directory, and we have a &lt;em&gt;Cargo.toml&lt;/em&gt; configuration file in the top directory.</source>
          <target state="translated">CargoはHello、world！を生成しました。リスト1-1で書いたものと同じように、あなたのためのプログラム！これまでのところ、以前のプロジェクトとCargoが生成するプロジェクトとの違いは、Cargoがコードを&lt;em&gt;src&lt;/em&gt;ディレクトリに配置したことと、&lt;em&gt;Cargo.toml&lt;/em&gt;構成ファイルがトップディレクトリにあることです。</target>
        </trans-unit>
        <trans-unit id="0a83870f62c314f3acba94fea811002e0cc3ce2e" translate="yes" xml:space="preserve">
          <source>Cargo has two main profiles: the &lt;code&gt;dev&lt;/code&gt; profile Cargo uses when you run &lt;code&gt;cargo build&lt;/code&gt; and the &lt;code&gt;release&lt;/code&gt; profile Cargo uses when you run &lt;code&gt;cargo build --release&lt;/code&gt;. The &lt;code&gt;dev&lt;/code&gt; profile is defined with good defaults for development, and the &lt;code&gt;release&lt;/code&gt; profile has good defaults for release builds.</source>
          <target state="translated">貨物は、主に2つのプロファイルを持っている： &lt;code&gt;dev&lt;/code&gt; あなたが実行したときに、プロファイル貨物が使用する &lt;code&gt;cargo build&lt;/code&gt; と &lt;code&gt;release&lt;/code&gt; あなたが実行したときに、プロファイル貨物の用途を &lt;code&gt;cargo build --release&lt;/code&gt; 。 &lt;code&gt;dev&lt;/code&gt; のプロファイルは、開発のための良いデフォルトで定義され、 &lt;code&gt;release&lt;/code&gt; リリースビルド用のプロファイルが良いデフォルト値を持っています。</target>
        </trans-unit>
        <trans-unit id="c5de1c8d0a6943cf5337f673e50bc6b42acba179" translate="yes" xml:space="preserve">
          <source>Cargo is Rust&amp;rsquo;s build system and package manager. Most Rustaceans use this tool to manage their Rust projects because Cargo handles a lot of tasks for you, such as building your code, downloading the libraries your code depends on, and building those libraries. (We call libraries your code needs &lt;em&gt;dependencies&lt;/em&gt;.)</source>
          <target state="translated">CargoはRustのビルドシステムおよびパッケージマネージャーです。 Cargoは、コードのビルド、コードが依存するライブラリのダウンロード、それらのライブラリのビルドなど、多くのタスクを処理するため、ほとんどのRustaceansはこのツールを使用してRustプロジェクトを管理します。 （私たちは、あなたのコードが&lt;em&gt;依存関係を&lt;/em&gt;必要とするライブラリを呼び出します。）</target>
        </trans-unit>
        <trans-unit id="859dcf5d594c277f177bb6ea8aa8d8cbd67df76f" translate="yes" xml:space="preserve">
          <source>Cargo is designed so you can extend it with new subcommands without having to modify Cargo. If a binary in your &lt;code&gt;$PATH&lt;/code&gt; is named &lt;code&gt;cargo-something&lt;/code&gt;, you can run it as if it was a Cargo subcommand by running &lt;code&gt;cargo something&lt;/code&gt;. Custom commands like this are also listed when you run &lt;code&gt;cargo --list&lt;/code&gt;. Being able to use &lt;code&gt;cargo install&lt;/code&gt; to install extensions and then run them just like the built-in Cargo tools is a super convenient benefit of Cargo&amp;rsquo;s design!</source>
          <target state="translated">Cargoは、Cargoを変更せずに新しいサブコマンドで拡張できるように設計されています。あなたの中のバイナリた場合 &lt;code&gt;$PATH&lt;/code&gt; 命名された &lt;code&gt;cargo-something&lt;/code&gt; 、それは実行して、貨物のサブコマンドであるかのように、あなたはそれを実行することができ &lt;code&gt;cargo something&lt;/code&gt; 。このようなカスタムコマンドは、 &lt;code&gt;cargo --list&lt;/code&gt; を実行すると表示されます。Cargo &lt;code&gt;cargo install&lt;/code&gt; を使用して拡張機能をインストールし、組み込みのCargoツールと同じように拡張機能を実行できることは、Cargoのデザインの非常に便利な利点です。</target>
        </trans-unit>
        <trans-unit id="e6dcbd31bafff88f294fdfd94f11ce85c6af9ea9" translate="yes" xml:space="preserve">
          <source>Cargo&amp;rsquo;s use of external crates is where it really shines. Before we can write code that uses &lt;code&gt;rand&lt;/code&gt;, we need to modify the &lt;em&gt;Cargo.toml&lt;/em&gt; file to include the &lt;code&gt;rand&lt;/code&gt; crate as a dependency. Open that file now and add the following line to the bottom beneath the &lt;code&gt;[dependencies]&lt;/code&gt; section header that Cargo created for you:</source>
          <target state="translated">Cargoの外部クレートの使用は、それが本当に際立っているところです。 &lt;code&gt;rand&lt;/code&gt; を使用するコードを作成する前に、&lt;em&gt;Cargo.toml&lt;/em&gt;ファイルを変更して、依存関係として &lt;code&gt;rand&lt;/code&gt; クレートを含める必要があります。ここでそのファイルを開き、Cargoが作成した &lt;code&gt;[dependencies]&lt;/code&gt; セクションヘッダーの下の下部に次の行を追加します。</target>
        </trans-unit>
        <trans-unit id="d0e5d0ec3b6fcc84bd7ceec5061561ddfbd803d9" translate="yes" xml:space="preserve">
          <source>Cargo, the included dependency manager and build tool, makes adding, compiling, and managing dependencies painless and consistent across the Rust ecosystem.</source>
          <target state="translated">Cargoは、付属の依存関係マネージャとビルドツールで、Rustエコシステム全体で依存関係の追加、コンパイル、管理を容易にし、一貫性を持たせます。</target>
        </trans-unit>
        <trans-unit id="df10067f5a8780a3c7f1ce6b060b8d78df100b22" translate="yes" xml:space="preserve">
          <source>Carriage return</source>
          <target state="translated">キャリッジリターン</target>
        </trans-unit>
        <trans-unit id="62cdd8dfae78019369c43aae3726f0b8b375ee76" translate="yes" xml:space="preserve">
          <source>Carriage return is escaped as &lt;code&gt;\r&lt;/code&gt;.</source>
          <target state="translated">復帰は &lt;code&gt;\r&lt;/code&gt; としてエスケープされます。</target>
        </trans-unit>
        <trans-unit id="10268b4d95e1b2cce7aee0339d945b9ae2dd41ba" translate="yes" xml:space="preserve">
          <source>Cases in Which You Have More Information Than the Compiler</source>
          <target state="translated">コンパイラよりも多くの情報を持っている場合</target>
        </trans-unit>
        <trans-unit id="86bc837d3c31c98372bd6f6083018ac62b4368fc" translate="yes" xml:space="preserve">
          <source>Cast between types, or rename an import.</source>
          <target state="translated">タイプ間のキャストやインポートの名前を変更します。</target>
        </trans-unit>
        <trans-unit id="2ae2166389b335b7f4c25092cf9112650b632f71" translate="yes" xml:space="preserve">
          <source>Cast performed by &lt;code&gt;e as U&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;e as U&lt;/code&gt; キャスト</target>
        </trans-unit>
        <trans-unit id="3358afde0c287145e4ea20d608fde5fdae224bed" translate="yes" xml:space="preserve">
          <source>Cast to a pointer of another type</source>
          <target state="translated">別の型のポインタにキャスト</target>
        </trans-unit>
        <trans-unit id="3715fdbfdabbfd0fce470cbc5beac1754055c03c" translate="yes" xml:space="preserve">
          <source>Cast to a pointer to a different type</source>
          <target state="translated">別の型へのポインタへのキャスト</target>
        </trans-unit>
        <trans-unit id="fd26704362b0bfabb9ec158f63b5957d241e0e29" translate="yes" xml:space="preserve">
          <source>Casting between two integers of the same size (e.g. i32 -&amp;gt; u32) is a no-op</source>
          <target state="translated">同じサイズの2つの整数間のキャスト（例：i32-&amp;gt; u32）は何もしません</target>
        </trans-unit>
        <trans-unit id="e37fbb5d946c7608992e6aba78d6bf55abfc7d5c" translate="yes" xml:space="preserve">
          <source>Casting from a float to an integer will round the float towards zero</source>
          <target state="translated">浮動小数点数から整数へのキャストは、浮動小数点数をゼロに丸めます。</target>
        </trans-unit>
        <trans-unit id="db8b986e848c7678ba68608a3994cebe157b8911" translate="yes" xml:space="preserve">
          <source>Casting from a larger integer to a smaller integer (e.g. u32 -&amp;gt; u8) will truncate</source>
          <target state="translated">大きな整数から小さな整数へのキャスト（例：u32-&amp;gt; u8）は切り捨てられます</target>
        </trans-unit>
        <trans-unit id="aabb7e74250ea015819c09fc6010251eaf517a1c" translate="yes" xml:space="preserve">
          <source>Casting from a smaller integer to a larger integer (e.g. u8 -&amp;gt; u32) will</source>
          <target state="translated">小さい整数から大きい整数へのキャスト（例：u8-&amp;gt; u32）</target>
        </trans-unit>
        <trans-unit id="3e946cacf40515335c912e63718fe396339aa25c" translate="yes" xml:space="preserve">
          <source>Casting from an f32 to an f64 is perfect and lossless</source>
          <target state="translated">f32からf64へのキャストは完璧でロスレスです。</target>
        </trans-unit>
        <trans-unit id="703c3d839ce0b8e7fe06292713cd7bf5349f0d64" translate="yes" xml:space="preserve">
          <source>Casting from an f64 to an f32 will produce the closest possible f32 **</source>
          <target state="translated">f64からf32へのキャストは、可能な限り近いf32を生成します **。</target>
        </trans-unit>
        <trans-unit id="8773bd2412eced3bdfc907d8954e78f0fc6e8712" translate="yes" xml:space="preserve">
          <source>Casting from an f64 to an f32 will produce the closest possible value (rounding strategy unspecified)</source>
          <target state="translated">f64からf32へのキャストは、可能な限り最も近い値を生成します(丸め方は未指定)。</target>
        </trans-unit>
        <trans-unit id="5d63cac748495a7362211aabb1bd9ee08e8b3242" translate="yes" xml:space="preserve">
          <source>Casting from an integer to float will produce the closest possible float *</source>
          <target state="translated">整数から float へのキャストは,可能な限り最も近い float*を生成します.</target>
        </trans-unit>
        <trans-unit id="016b641972acb57a73a2395438ad1440988a4af3" translate="yes" xml:space="preserve">
          <source>Casting from an integer to float will produce the floating point representation of the integer, rounded if necessary (rounding strategy unspecified)</source>
          <target state="translated">整数から float へのキャストは、必要に応じて丸められた整数の浮動小数点表現を生成します(丸めの方法は指定されていません)。</target>
        </trans-unit>
        <trans-unit id="1bcada0b290d8b570562bc205de2195379961144" translate="yes" xml:space="preserve">
          <source>Casts an enum to its discriminant, then uses a numeric cast if needed.</source>
          <target state="translated">enumをその判別器にキャストし、必要に応じて数値キャストを使用します。</target>
        </trans-unit>
        <trans-unit id="f3850d4f598526710f234a54fe262c8ed7f03567" translate="yes" xml:space="preserve">
          <source>Casts except for raw pointer to integer casts</source>
          <target state="translated">整数キャストへの生ポインタを除くキャスト</target>
        </trans-unit>
        <trans-unit id="c665bff72d39db95c0a4402b35ce70577e30fc64" translate="yes" xml:space="preserve">
          <source>Casts to a pointer of another type.</source>
          <target state="translated">別の型のポインタにキャストします。</target>
        </trans-unit>
        <trans-unit id="bab077cb44c56758a71fdc95b6ef923bd1476afd" translate="yes" xml:space="preserve">
          <source>Casts to the &lt;code&gt;char&lt;/code&gt; with the corresponding code point.</source>
          <target state="translated">対応するコードポイントで &lt;code&gt;char&lt;/code&gt; にキャストします。</target>
        </trans-unit>
        <trans-unit id="1f98b96088984f58d6f43126796ba7cd87115a78" translate="yes" xml:space="preserve">
          <source>Catching borrowing errors at runtime rather than compile time means that you would find a mistake in your code later in the development process and possibly not until your code was deployed to production. Also, your code would incur a small runtime performance penalty as a result of keeping track of the borrows at runtime rather than compile time. However, using &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; makes it possible to write a mock object that can modify itself to keep track of the messages it has seen while you&amp;rsquo;re using it in a context where only immutable values are allowed. You can use &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; despite its trade-offs to get more functionality than regular references provide.</source>
          <target state="translated">コンパイル時ではなく実行時に借用エラーをキャッチすると、開発プロセスの後半でコードに誤りが見つかる可能性があり、コードが本番環境にデプロイされるまでは見当たらない可能性があります。また、コンパイル時ではなく実行時に借用を追跡するため、コードの実行時のパフォーマンスがわずかに低下します。ただし、 &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; を使用すると、不変値のみが許可されているコンテキストで使用しているときに表示されたメッセージを追跡するためにそれ自体を変更できるモックオブジェクトを作成できます。トレードオフにもかかわらず &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; 使用して、通常の参照が提供するよりも多くの機能を取得できます。</target>
        </trans-unit>
        <trans-unit id="92542e5399f55f2d0ff6cb71cde0c802734b5a29" translate="yes" xml:space="preserve">
          <source>Causes compilation to fail with the given error message when encountered.</source>
          <target state="translated">エラーメッセージが発生した場合に、コンパイルが失敗するようにします。</target>
        </trans-unit>
        <trans-unit id="e2c83c0817f92378b4d75b2046644ebe16e4eed6" translate="yes" xml:space="preserve">
          <source>Caution must be taken when calling methods on the mutable reference returned as extra writes could corrupt the output stream.</source>
          <target state="translated">余分な書き込みがあると出力ストリームが破損する可能性があるため、返された変異可能な参照に対してメソッドを呼び出す際には注意が必要です。</target>
        </trans-unit>
        <trans-unit id="09dbd187de708ee21b01806ae5b0ca883102654a" translate="yes" xml:space="preserve">
          <source>Caveat</source>
          <target state="translated">Caveat</target>
        </trans-unit>
        <trans-unit id="56c856e04a702792ee7494e4d85443fbf5d92c9a" translate="yes" xml:space="preserve">
          <source>Cebuano</source>
          <target state="translated">Cebuano</target>
        </trans-unit>
        <trans-unit id="4607bc7c42ac8db29bfc2cd922416f6e854c18d1" translate="yes" xml:space="preserve">
          <source>Cell</source>
          <target state="translated">Cell</target>
        </trans-unit>
        <trans-unit id="4df4ed628351791829257d94ad0813e5e3d83b52" translate="yes" xml:space="preserve">
          <source>Cell types come in two flavors: &lt;code&gt;Cell&amp;lt;T&amp;gt;&lt;/code&gt; and &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt;. &lt;code&gt;Cell&amp;lt;T&amp;gt;&lt;/code&gt; implements interior mutability by moving values in and out of the &lt;code&gt;Cell&amp;lt;T&amp;gt;&lt;/code&gt;. To use references instead of values, one must use the &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; type, acquiring a write lock before mutating. &lt;code&gt;Cell&amp;lt;T&amp;gt;&lt;/code&gt; provides methods to retrieve and change the current interior value:</source>
          <target state="translated">セル型には、 &lt;code&gt;Cell&amp;lt;T&amp;gt;&lt;/code&gt; と &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; 2つの種類があります。 &lt;code&gt;Cell&amp;lt;T&amp;gt;&lt;/code&gt; は、 &lt;code&gt;Cell&amp;lt;T&amp;gt;&lt;/code&gt; 値を出し入れすることにより、内部の可変性を実装します。値の代わりに参照を使用するには、 &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; タイプを使用して、変更前に書き込みロックを取得する必要があります。 &lt;code&gt;Cell&amp;lt;T&amp;gt;&lt;/code&gt; は、現在の内部値を取得および変更するメソッドを提供します。</target>
        </trans-unit>
        <trans-unit id="48dd4ef834e56adfbb68416a64e0663d8599a054" translate="yes" xml:space="preserve">
          <source>Cell::as_ptr</source>
          <target state="translated">Cell::as_ptr</target>
        </trans-unit>
        <trans-unit id="0d7e0163576e426d7859658d7cb27a5203e3e1ef" translate="yes" xml:space="preserve">
          <source>Cell::as_slice_of_cells</source>
          <target state="translated">Cell::as_slice_of_cells</target>
        </trans-unit>
        <trans-unit id="24ea70ddb05e0524feb5fd3207ac5f711dc6f0d6" translate="yes" xml:space="preserve">
          <source>Cell::borrow</source>
          <target state="translated">Cell::borrow</target>
        </trans-unit>
        <trans-unit id="0754f341aa2db7bbcf581590e062562f757b06c3" translate="yes" xml:space="preserve">
          <source>Cell::borrow_mut</source>
          <target state="translated">Cell::borrow_mut</target>
        </trans-unit>
        <trans-unit id="362ecb62fffb738daa64db7bf594fa17d89fa6cc" translate="yes" xml:space="preserve">
          <source>Cell::clamp</source>
          <target state="translated">Cell::clamp</target>
        </trans-unit>
        <trans-unit id="2d8b5d709a30aef00b0eb5b270932a33cefb07ed" translate="yes" xml:space="preserve">
          <source>Cell::clone</source>
          <target state="translated">Cell::clone</target>
        </trans-unit>
        <trans-unit id="e6e4ff9e5189a293d64401b67d88a8b34b3d688c" translate="yes" xml:space="preserve">
          <source>Cell::clone_from</source>
          <target state="translated">Cell::clone_from</target>
        </trans-unit>
        <trans-unit id="0067c8e07b34f5ca3bc31fe68cde3b73dd65c529" translate="yes" xml:space="preserve">
          <source>Cell::clone_into</source>
          <target state="translated">Cell::clone_into</target>
        </trans-unit>
        <trans-unit id="ac7c1813db60d3ceae267c09f1b49dd2d8b060bf" translate="yes" xml:space="preserve">
          <source>Cell::cmp</source>
          <target state="translated">Cell::cmp</target>
        </trans-unit>
        <trans-unit id="eda50fe388574d7abf640a426001e3d03601f41d" translate="yes" xml:space="preserve">
          <source>Cell::default</source>
          <target state="translated">Cell::default</target>
        </trans-unit>
        <trans-unit id="95e6d856a58cc93ea0ac0610c4cc4543b9fb6e6f" translate="yes" xml:space="preserve">
          <source>Cell::eq</source>
          <target state="translated">Cell::eq</target>
        </trans-unit>
        <trans-unit id="9e7be83b56c4210f928f8dbe23259025f457cf04" translate="yes" xml:space="preserve">
          <source>Cell::fmt</source>
          <target state="translated">Cell::fmt</target>
        </trans-unit>
        <trans-unit id="c5b19e87999d71a90010f9265c756a8dbae96476" translate="yes" xml:space="preserve">
          <source>Cell::from</source>
          <target state="translated">Cell::from</target>
        </trans-unit>
        <trans-unit id="80f18e414981b02746f88eace0ca9b124176cf67" translate="yes" xml:space="preserve">
          <source>Cell::from_mut</source>
          <target state="translated">Cell::from_mut</target>
        </trans-unit>
        <trans-unit id="d960fa542df3050b294ac84f74b949e7219ccb2b" translate="yes" xml:space="preserve">
          <source>Cell::ge</source>
          <target state="translated">Cell::ge</target>
        </trans-unit>
        <trans-unit id="b7460c43994cefee91fee8367e5b8ceb32898981" translate="yes" xml:space="preserve">
          <source>Cell::get</source>
          <target state="translated">Cell::get</target>
        </trans-unit>
        <trans-unit id="b45695950f375e64c97d0c097280c9717dbbc048" translate="yes" xml:space="preserve">
          <source>Cell::get_mut</source>
          <target state="translated">Cell::get_mut</target>
        </trans-unit>
        <trans-unit id="2d53cbf1d324ee13bc81c24edf43bb1ebb73c3ca" translate="yes" xml:space="preserve">
          <source>Cell::gt</source>
          <target state="translated">Cell::gt</target>
        </trans-unit>
        <trans-unit id="0bb6531752a904a7583ca649d5e49945b5da74a4" translate="yes" xml:space="preserve">
          <source>Cell::into</source>
          <target state="translated">Cell::into</target>
        </trans-unit>
        <trans-unit id="3ca0cfbf64ef6f411b4414cb205a6820ee159299" translate="yes" xml:space="preserve">
          <source>Cell::into_inner</source>
          <target state="translated">Cell::into_inner</target>
        </trans-unit>
        <trans-unit id="b53a5cf7d6e0b073abf65f1f5a2d742cc7522472" translate="yes" xml:space="preserve">
          <source>Cell::le</source>
          <target state="translated">Cell::le</target>
        </trans-unit>
        <trans-unit id="33e386853917e76a71dd993958193c136cc535c9" translate="yes" xml:space="preserve">
          <source>Cell::lt</source>
          <target state="translated">Cell::lt</target>
        </trans-unit>
        <trans-unit id="8f7d30714f46b5a562336654aa520be3afba7aea" translate="yes" xml:space="preserve">
          <source>Cell::max</source>
          <target state="translated">Cell::max</target>
        </trans-unit>
        <trans-unit id="ffce3ad84e2d0d3e65f16e561d54bf22f4f1273a" translate="yes" xml:space="preserve">
          <source>Cell::min</source>
          <target state="translated">Cell::min</target>
        </trans-unit>
        <trans-unit id="9e0082129811243cbfc2e92dd13a3da5a42c314f" translate="yes" xml:space="preserve">
          <source>Cell::ne</source>
          <target state="translated">Cell::ne</target>
        </trans-unit>
        <trans-unit id="7e0a9ead4a41cc5e68f27e5e44c6fd1cf21a7ebe" translate="yes" xml:space="preserve">
          <source>Cell::new</source>
          <target state="translated">Cell::new</target>
        </trans-unit>
        <trans-unit id="8169ff33cea54836ab5cb49e7aebdf6899f013c5" translate="yes" xml:space="preserve">
          <source>Cell::partial_cmp</source>
          <target state="translated">Cell::partial_cmp</target>
        </trans-unit>
        <trans-unit id="ce0f79c05450d6fd3fbaab2d277d00a9d025cc01" translate="yes" xml:space="preserve">
          <source>Cell::replace</source>
          <target state="translated">Cell::replace</target>
        </trans-unit>
        <trans-unit id="2217e7f92e883073d7cd8a327243f5598967f99a" translate="yes" xml:space="preserve">
          <source>Cell::set</source>
          <target state="translated">Cell::set</target>
        </trans-unit>
        <trans-unit id="ccb759e5d08ce2fe208250b4867c08119a5f9b1e" translate="yes" xml:space="preserve">
          <source>Cell::swap</source>
          <target state="translated">Cell::swap</target>
        </trans-unit>
        <trans-unit id="5b19592aa92ab3f1f864127a10aae71791a3475e" translate="yes" xml:space="preserve">
          <source>Cell::take</source>
          <target state="translated">Cell::take</target>
        </trans-unit>
        <trans-unit id="c24f65d0f1a9ef301e7874629928ae9b3a3db01e" translate="yes" xml:space="preserve">
          <source>Cell::to_owned</source>
          <target state="translated">Cell::to_owned</target>
        </trans-unit>
        <trans-unit id="135b1795234ded619836f1cb107c7715ee162c78" translate="yes" xml:space="preserve">
          <source>Cell::try_from</source>
          <target state="translated">Cell::try_from</target>
        </trans-unit>
        <trans-unit id="de09b934b071519838a8f1b2a0f0ea9fae735031" translate="yes" xml:space="preserve">
          <source>Cell::try_into</source>
          <target state="translated">Cell::try_into</target>
        </trans-unit>
        <trans-unit id="c35faebeed3694a09badc3c9d596e308d9fbf61d" translate="yes" xml:space="preserve">
          <source>Cell::type_id</source>
          <target state="translated">Cell::type_id</target>
        </trans-unit>
        <trans-unit id="a3a81a1cdc01f1b4e938ea98d168e1fbd18dc16a" translate="yes" xml:space="preserve">
          <source>Cell::update</source>
          <target state="translated">Cell::update</target>
        </trans-unit>
        <trans-unit id="b1a3416d2077c8bfcafca7b0ecd3f0cecbe10e55" translate="yes" xml:space="preserve">
          <source>Certain Rust types must be cast before passing them to a variadic function, because of arcane ABI rules dictated by the C standard. To fix the error, cast the value to the type specified by the error message (which you may need to import from &lt;code&gt;std::os::raw&lt;/code&gt;).</source>
          <target state="translated">C標準で規定されている難解なABI規則のため、特定のRust型を可変関数に渡す前にキャストする必要があります。エラーを修正するには、エラーメッセージで指定されたタイプに値をキャストします（ &lt;code&gt;std::os::raw&lt;/code&gt; からインポートする必要がある場合があります）。</target>
        </trans-unit>
        <trans-unit id="a045057bcf496c5138b4f260127b9c2a7520aaf9" translate="yes" xml:space="preserve">
          <source>Certain expressions will treat an expression as a place expression by implicitly borrowing it. For example, it is possible to compare two unsized &lt;a href=&quot;types/slice&quot;&gt;slices&lt;/a&gt; for equality directly, because the &lt;code&gt;==&lt;/code&gt; operator implicitly borrows it's operands:</source>
          <target state="translated">特定の式は、暗黙的に式を借用することにより、式を場所式として扱います。たとえば、 &lt;code&gt;==&lt;/code&gt; 演算子は暗黙的にそのオペランドを借用するため、サイズが等しい2つの&lt;a href=&quot;types/slice&quot;&gt;スライス&lt;/a&gt;が等しいかどうかを直接比較することが可能です。</target>
        </trans-unit>
        <trans-unit id="7841bd461cdefa1cb80a5325de5c95118882e295" translate="yes" xml:space="preserve">
          <source>Certain forms of expressions, called constant expressions, can be evaluated at compile time. In &lt;a href=&quot;#const-context&quot;&gt;const contexts&lt;/a&gt;, these are the only allowed expressions, and are always evaluated at compile time. In other places, such as &lt;a href=&quot;statements#let-statements&quot;&gt;let statements&lt;/a&gt;, constant expressions &lt;em&gt;may&lt;/em&gt; be, but are not guaranteed to be, evaluated at compile time. Behaviors such as out of bounds &lt;a href=&quot;expressions/array-expr#array-and-slice-indexing-expressions&quot;&gt;array indexing&lt;/a&gt; or &lt;a href=&quot;expressions/operator-expr#overflow&quot;&gt;overflow&lt;/a&gt; are compiler errors if the value must be evaluated at compile time (i.e. in const contexts). Otherwise, these behaviors are warnings, but will likely panic at run-time.</source>
          <target state="translated">Certain forms of expressions, called constant expressions, can be evaluated at compile time. In &lt;a href=&quot;#const-context&quot;&gt;const contexts&lt;/a&gt;, these are the only allowed expressions, and are always evaluated at compile time. In other places, such as &lt;a href=&quot;statements#let-statements&quot;&gt;let statements&lt;/a&gt;, constant expressions &lt;em&gt;may&lt;/em&gt; be, but are not guaranteed to be, evaluated at compile time. Behaviors such as out of bounds &lt;a href=&quot;expressions/array-expr#array-and-slice-indexing-expressions&quot;&gt;array indexing&lt;/a&gt; or &lt;a href=&quot;expressions/operator-expr#overflow&quot;&gt;overflow&lt;/a&gt; are compiler errors if the value must be evaluated at compile time (i.e. in const contexts). Otherwise, these behaviors are warnings, but will likely panic at run-time.</target>
        </trans-unit>
        <trans-unit id="484b1c57d9aa3f200c281c83b5670a8b7511fe9c" translate="yes" xml:space="preserve">
          <source>Certain forms of expressions, called constant expressions, can be evaluated at compile time. In &lt;a href=&quot;const_eval#const-context&quot;&gt;const contexts&lt;/a&gt;, these are the only allowed expressions, and are always evaluated at compile time. In other places, such as &lt;a href=&quot;statements#let-statements&quot;&gt;let statements&lt;/a&gt;, constant expressions &lt;em&gt;may&lt;/em&gt; be, but are not guaranteed to be, evaluated at compile time. Behaviors such as out of bounds &lt;a href=&quot;expressions/array-expr#array-and-slice-indexing-expressions&quot;&gt;array indexing&lt;/a&gt; or &lt;a href=&quot;expressions/operator-expr#overflow&quot;&gt;overflow&lt;/a&gt; are compiler errors if the value must be evaluated at compile time (i.e. in const contexts). Otherwise, these behaviors are warnings, but will likely panic at run-time.</source>
          <target state="translated">定数式と呼ばれる特定の形式の式は、コンパイル時に評価できます。では&lt;a href=&quot;const_eval#const-context&quot;&gt;constのコンテキスト&lt;/a&gt;、これらは唯一許さ式である、と常にコンパイル時に評価されています。&lt;a href=&quot;statements#let-statements&quot;&gt;letステートメント&lt;/a&gt;などの他の場所では、定数式&lt;em&gt;は&lt;/em&gt;コンパイル時に評価される場合がありますが、評価されるとは限りません。値がコンパイル時に（つまりconstコンテキストで）評価される必要がある場合、範囲外の&lt;a href=&quot;expressions/array-expr#array-and-slice-indexing-expressions&quot;&gt;配列のインデックス付け&lt;/a&gt;や&lt;a href=&quot;expressions/operator-expr#overflow&quot;&gt;オーバーフロー&lt;/a&gt;などの動作はコンパイラエラーです。それ以外の場合、これらの動作は警告ですが、実行時にパニックになる可能性があります。</target>
        </trans-unit>
        <trans-unit id="4dfaa173bc2e54f4ea58a5a9aa47c2ef8348db1c" translate="yes" xml:space="preserve">
          <source>Certain types and traits that exist in &lt;a href=&quot;../std/index&quot;&gt;the standard library&lt;/a&gt; are known to the Rust compiler. This chapter documents the special features of these types and traits.</source>
          <target state="translated">&lt;a href=&quot;../std/index&quot;&gt;標準ライブラリに&lt;/a&gt;存在する特定のタイプと特性は、Rustコンパイラに認識されています。この章では、これらのタイプと特性の特別な機能について説明します。</target>
        </trans-unit>
        <trans-unit id="d81f3692d7cd234a9b91ed4f4582f15dd8290d89" translate="yes" xml:space="preserve">
          <source>Chain</source>
          <target state="translated">Chain</target>
        </trans-unit>
        <trans-unit id="1b82733f53155096fec9474c1ad8b318eda77f63" translate="yes" xml:space="preserve">
          <source>Chain::all</source>
          <target state="translated">Chain::all</target>
        </trans-unit>
        <trans-unit id="0213f0f3adde0927755a07f9788d3767a617008c" translate="yes" xml:space="preserve">
          <source>Chain::any</source>
          <target state="translated">Chain::any</target>
        </trans-unit>
        <trans-unit id="a37736f1183001064655ade18bb4f291f9bbc05f" translate="yes" xml:space="preserve">
          <source>Chain::borrow</source>
          <target state="translated">Chain::borrow</target>
        </trans-unit>
        <trans-unit id="30c74a10cbbb5860a6b1cc3fa07c6fae420cf772" translate="yes" xml:space="preserve">
          <source>Chain::borrow_mut</source>
          <target state="translated">Chain::borrow_mut</target>
        </trans-unit>
        <trans-unit id="98e80c0b0285eb5bed8081d7f4a2398e62e01164" translate="yes" xml:space="preserve">
          <source>Chain::by_ref</source>
          <target state="translated">Chain::by_ref</target>
        </trans-unit>
        <trans-unit id="014ba9f7ea2696f1d027c3b7edf3d3b4bfba780c" translate="yes" xml:space="preserve">
          <source>Chain::bytes</source>
          <target state="translated">Chain::bytes</target>
        </trans-unit>
        <trans-unit id="cb46642887ca107ccf47c86b009ac98c44fe1bb1" translate="yes" xml:space="preserve">
          <source>Chain::chain</source>
          <target state="translated">Chain::chain</target>
        </trans-unit>
        <trans-unit id="d649190519616be1098b4aaeedda898a20320409" translate="yes" xml:space="preserve">
          <source>Chain::clone</source>
          <target state="translated">Chain::clone</target>
        </trans-unit>
        <trans-unit id="1edc2ab6752846cd09954833abda07944f777091" translate="yes" xml:space="preserve">
          <source>Chain::clone_from</source>
          <target state="translated">Chain::clone_from</target>
        </trans-unit>
        <trans-unit id="91a283e7d90d1f8517c5fe0a616ffb63680c78dd" translate="yes" xml:space="preserve">
          <source>Chain::clone_into</source>
          <target state="translated">Chain::clone_into</target>
        </trans-unit>
        <trans-unit id="af3f639894e154771839a93b9eeb510892478d1d" translate="yes" xml:space="preserve">
          <source>Chain::cloned</source>
          <target state="translated">Chain::cloned</target>
        </trans-unit>
        <trans-unit id="e342d90f23a25722769803a71a3c7a41d7020d33" translate="yes" xml:space="preserve">
          <source>Chain::cmp</source>
          <target state="translated">Chain::cmp</target>
        </trans-unit>
        <trans-unit id="c40b71074beb3107222b57dd476d516685d9a814" translate="yes" xml:space="preserve">
          <source>Chain::collect</source>
          <target state="translated">Chain::collect</target>
        </trans-unit>
        <trans-unit id="ae59ce32fd7a895e6b358fc458a00de9bf286b94" translate="yes" xml:space="preserve">
          <source>Chain::consume</source>
          <target state="translated">Chain::consume</target>
        </trans-unit>
        <trans-unit id="b8e50ea8c9d017524df39290d83c69e9e2a51a4d" translate="yes" xml:space="preserve">
          <source>Chain::copied</source>
          <target state="translated">Chain::copied</target>
        </trans-unit>
        <trans-unit id="cd9311b802ad0325536aab1fd6cd80192eb46215" translate="yes" xml:space="preserve">
          <source>Chain::count</source>
          <target state="translated">Chain::count</target>
        </trans-unit>
        <trans-unit id="5ad362d803d4944ded3c4d762c17bbccb5b943d8" translate="yes" xml:space="preserve">
          <source>Chain::cycle</source>
          <target state="translated">Chain::cycle</target>
        </trans-unit>
        <trans-unit id="89b9fc633b4d9bad4ad9994e23fa6537d31a9bfe" translate="yes" xml:space="preserve">
          <source>Chain::enumerate</source>
          <target state="translated">Chain::enumerate</target>
        </trans-unit>
        <trans-unit id="180e0de0dc8eec2a7bdc65d124b4deaa9621dade" translate="yes" xml:space="preserve">
          <source>Chain::eq</source>
          <target state="translated">Chain::eq</target>
        </trans-unit>
        <trans-unit id="90fb1f503dc000cbeb702ddc9542d66d6f27b40a" translate="yes" xml:space="preserve">
          <source>Chain::fill_buf</source>
          <target state="translated">Chain::fill_buf</target>
        </trans-unit>
        <trans-unit id="7cd6e3916588ab5c5727bc3d3a336590d1072aa4" translate="yes" xml:space="preserve">
          <source>Chain::filter</source>
          <target state="translated">Chain::filter</target>
        </trans-unit>
        <trans-unit id="38214e980122efd0fe5c791b190cd4619909a035" translate="yes" xml:space="preserve">
          <source>Chain::filter_map</source>
          <target state="translated">Chain::filter_map</target>
        </trans-unit>
        <trans-unit id="81cbfc51ad38c6db54cfad1ff517d45952b9b3d0" translate="yes" xml:space="preserve">
          <source>Chain::find</source>
          <target state="translated">Chain::find</target>
        </trans-unit>
        <trans-unit id="05112babeaddc2aab7fea187237423466d3bda92" translate="yes" xml:space="preserve">
          <source>Chain::find_map</source>
          <target state="translated">Chain::find_map</target>
        </trans-unit>
        <trans-unit id="cb89312f759b77745bd448b460dfea67edf57dc9" translate="yes" xml:space="preserve">
          <source>Chain::flat_map</source>
          <target state="translated">Chain::flat_map</target>
        </trans-unit>
        <trans-unit id="5b5166df3a4c1a9c567f1e50cab2ccb06cfc6059" translate="yes" xml:space="preserve">
          <source>Chain::flatten</source>
          <target state="translated">Chain::flatten</target>
        </trans-unit>
        <trans-unit id="dc468132a5dbaa36bf7ee409bee6fb579af3b60a" translate="yes" xml:space="preserve">
          <source>Chain::fmt</source>
          <target state="translated">Chain::fmt</target>
        </trans-unit>
        <trans-unit id="66eb326b5ed011659ff56b1d9808851a76bf9c24" translate="yes" xml:space="preserve">
          <source>Chain::fold</source>
          <target state="translated">Chain::fold</target>
        </trans-unit>
        <trans-unit id="13981f9c65901acd06a7055e10c4721967d02a55" translate="yes" xml:space="preserve">
          <source>Chain::for_each</source>
          <target state="translated">Chain::for_each</target>
        </trans-unit>
        <trans-unit id="f89896ffb04c61d14f4d8e32078eb5ba456abd1e" translate="yes" xml:space="preserve">
          <source>Chain::from</source>
          <target state="translated">Chain::from</target>
        </trans-unit>
        <trans-unit id="33fbc1e11907581323cf04fff2c01ec64f9dbbf7" translate="yes" xml:space="preserve">
          <source>Chain::fuse</source>
          <target state="translated">Chain::fuse</target>
        </trans-unit>
        <trans-unit id="0f64597461d1060870a5357d58955c23fb1f9117" translate="yes" xml:space="preserve">
          <source>Chain::ge</source>
          <target state="translated">Chain::ge</target>
        </trans-unit>
        <trans-unit id="665bf2eeb76a66698512864c346032a25f289ba5" translate="yes" xml:space="preserve">
          <source>Chain::get_mut</source>
          <target state="translated">Chain::get_mut</target>
        </trans-unit>
        <trans-unit id="4febd13e77ca8221618081266a9f088e0d5d3995" translate="yes" xml:space="preserve">
          <source>Chain::get_ref</source>
          <target state="translated">Chain::get_ref</target>
        </trans-unit>
        <trans-unit id="615dcf373549546bb720132ec1e9a4902588cca2" translate="yes" xml:space="preserve">
          <source>Chain::gt</source>
          <target state="translated">Chain::gt</target>
        </trans-unit>
        <trans-unit id="69fc66220e86b279145edc65e175ea2d6980c57c" translate="yes" xml:space="preserve">
          <source>Chain::initializer</source>
          <target state="translated">Chain::initializer</target>
        </trans-unit>
        <trans-unit id="0a1e0d24c6b6afc911808b40fdff23263748e294" translate="yes" xml:space="preserve">
          <source>Chain::inspect</source>
          <target state="translated">Chain::inspect</target>
        </trans-unit>
        <trans-unit id="d4a576504ea88f9480b480179ad285d5e1e00385" translate="yes" xml:space="preserve">
          <source>Chain::into</source>
          <target state="translated">Chain::into</target>
        </trans-unit>
        <trans-unit id="92065c6bef39f1ef48972714ba0f3e5cd126ba1b" translate="yes" xml:space="preserve">
          <source>Chain::into_inner</source>
          <target state="translated">Chain::into_inner</target>
        </trans-unit>
        <trans-unit id="bf6ab9275f6118b08a7f5a91653d3dcbaf3ed5ba" translate="yes" xml:space="preserve">
          <source>Chain::into_iter</source>
          <target state="translated">Chain::into_iter</target>
        </trans-unit>
        <trans-unit id="c62c114b95762caa21916b3f015139588c68e999" translate="yes" xml:space="preserve">
          <source>Chain::is_sorted</source>
          <target state="translated">Chain::is_sorted</target>
        </trans-unit>
        <trans-unit id="c23e7b865b9e334142fa9cd78cf3ef1645f1d616" translate="yes" xml:space="preserve">
          <source>Chain::is_sorted_by</source>
          <target state="translated">Chain::is_sorted_by</target>
        </trans-unit>
        <trans-unit id="3c86fbc00842bab5b2512cc85760975526d63a19" translate="yes" xml:space="preserve">
          <source>Chain::is_sorted_by_key</source>
          <target state="translated">Chain::is_sorted_by_key</target>
        </trans-unit>
        <trans-unit id="3f3ae826a531d9687e1ed33e30f7c927bf648e82" translate="yes" xml:space="preserve">
          <source>Chain::last</source>
          <target state="translated">Chain::last</target>
        </trans-unit>
        <trans-unit id="fd920cdbfdd6ca73353eabfbc8f44c55b1ed7d89" translate="yes" xml:space="preserve">
          <source>Chain::le</source>
          <target state="translated">Chain::le</target>
        </trans-unit>
        <trans-unit id="ed5fe64d8040fd6d1d7884275a33a1b1afc69c38" translate="yes" xml:space="preserve">
          <source>Chain::lines</source>
          <target state="translated">Chain::lines</target>
        </trans-unit>
        <trans-unit id="5d6129cf51f59250b00a299b799af8d9c3f313ff" translate="yes" xml:space="preserve">
          <source>Chain::lt</source>
          <target state="translated">Chain::lt</target>
        </trans-unit>
        <trans-unit id="e6a0ebd53d317e00fc62638391c26e09349c8adc" translate="yes" xml:space="preserve">
          <source>Chain::map</source>
          <target state="translated">Chain::map</target>
        </trans-unit>
        <trans-unit id="68cb6ab3b8776fb82ba6fc36db0271f891cd86ff" translate="yes" xml:space="preserve">
          <source>Chain::max</source>
          <target state="translated">Chain::max</target>
        </trans-unit>
        <trans-unit id="8ad354b6c1e4d2915371673d235e079a10b255fa" translate="yes" xml:space="preserve">
          <source>Chain::max_by</source>
          <target state="translated">Chain::max_by</target>
        </trans-unit>
        <trans-unit id="4771cb53ae25e84c2b3fbdedaf3f7a7d8792cf84" translate="yes" xml:space="preserve">
          <source>Chain::max_by_key</source>
          <target state="translated">Chain::max_by_key</target>
        </trans-unit>
        <trans-unit id="381a44c7dfda059ee3af86d3f2ce67ce9fc3cc0a" translate="yes" xml:space="preserve">
          <source>Chain::min</source>
          <target state="translated">Chain::min</target>
        </trans-unit>
        <trans-unit id="224e48329264cff5ddb9bba2916e4044938563dd" translate="yes" xml:space="preserve">
          <source>Chain::min_by</source>
          <target state="translated">Chain::min_by</target>
        </trans-unit>
        <trans-unit id="8e519b741138a48996b12aa0bef340998d65a166" translate="yes" xml:space="preserve">
          <source>Chain::min_by_key</source>
          <target state="translated">Chain::min_by_key</target>
        </trans-unit>
        <trans-unit id="0f1e85e6bf4b824117a13dab3714072f0d07e383" translate="yes" xml:space="preserve">
          <source>Chain::ne</source>
          <target state="translated">Chain::ne</target>
        </trans-unit>
        <trans-unit id="61c3b1c7122626db5a0c62d2538b897315b62c9a" translate="yes" xml:space="preserve">
          <source>Chain::next</source>
          <target state="translated">Chain::next</target>
        </trans-unit>
        <trans-unit id="6b874bd0ff0b41d0ca43e6437dc52d64d6ebcb8e" translate="yes" xml:space="preserve">
          <source>Chain::next_back</source>
          <target state="translated">Chain::next_back</target>
        </trans-unit>
        <trans-unit id="038918f8a551b65fa1d179fcb6e1caf401927515" translate="yes" xml:space="preserve">
          <source>Chain::nth</source>
          <target state="translated">Chain::nth</target>
        </trans-unit>
        <trans-unit id="32b2c491901513f373fc2b64bd481227fca6c6e3" translate="yes" xml:space="preserve">
          <source>Chain::nth_back</source>
          <target state="translated">Chain::nth_back</target>
        </trans-unit>
        <trans-unit id="c50e4fa9ce495c6c72d03dd2358f5d8c97f2f631" translate="yes" xml:space="preserve">
          <source>Chain::partial_cmp</source>
          <target state="translated">Chain::partial_cmp</target>
        </trans-unit>
        <trans-unit id="57d8a7e321cdc85718596c418d6dca1a4d09ef4e" translate="yes" xml:space="preserve">
          <source>Chain::partition</source>
          <target state="translated">Chain::partition</target>
        </trans-unit>
        <trans-unit id="594658cc41013289c194b90ad67aa99e032546ce" translate="yes" xml:space="preserve">
          <source>Chain::peekable</source>
          <target state="translated">Chain::peekable</target>
        </trans-unit>
        <trans-unit id="0bf900c2572e63f7c84fd0e43ae4a4e0e18d63a0" translate="yes" xml:space="preserve">
          <source>Chain::position</source>
          <target state="translated">Chain::position</target>
        </trans-unit>
        <trans-unit id="b102c811470d874773804b4d51dc3351bca7f303" translate="yes" xml:space="preserve">
          <source>Chain::product</source>
          <target state="translated">Chain::product</target>
        </trans-unit>
        <trans-unit id="14506f04af639fa99d54aa64b5fcfe4d211942a1" translate="yes" xml:space="preserve">
          <source>Chain::read</source>
          <target state="translated">Chain::read</target>
        </trans-unit>
        <trans-unit id="7b52a243a141d4a7496a1af726d77d750537c080" translate="yes" xml:space="preserve">
          <source>Chain::read_exact</source>
          <target state="translated">Chain::read_exact</target>
        </trans-unit>
        <trans-unit id="302184a4fd8efd550f088331cc949e7e2f34e06b" translate="yes" xml:space="preserve">
          <source>Chain::read_line</source>
          <target state="translated">Chain::read_line</target>
        </trans-unit>
        <trans-unit id="65733d73e4097dcc3afdbb937efed9028ed269cd" translate="yes" xml:space="preserve">
          <source>Chain::read_to_end</source>
          <target state="translated">Chain::read_to_end</target>
        </trans-unit>
        <trans-unit id="ff966f9b9dc533871f0548dbe9f4da1d008289c5" translate="yes" xml:space="preserve">
          <source>Chain::read_to_string</source>
          <target state="translated">Chain::read_to_string</target>
        </trans-unit>
        <trans-unit id="1a7df76576c52d8842f4ee97a42bdfa2ae2c9dc8" translate="yes" xml:space="preserve">
          <source>Chain::read_until</source>
          <target state="translated">Chain::read_until</target>
        </trans-unit>
        <trans-unit id="72a0d8b48b25c3059a22896cdbe4aac9e7ff581d" translate="yes" xml:space="preserve">
          <source>Chain::read_vectored</source>
          <target state="translated">Chain::read_vectored</target>
        </trans-unit>
        <trans-unit id="8edaa647ad56e16ca6d15ac6eefbe9953b95642d" translate="yes" xml:space="preserve">
          <source>Chain::rev</source>
          <target state="translated">Chain::rev</target>
        </trans-unit>
        <trans-unit id="54e788a55ebb82a5ee4c7e393aa70648e862df58" translate="yes" xml:space="preserve">
          <source>Chain::rfind</source>
          <target state="translated">Chain::rfind</target>
        </trans-unit>
        <trans-unit id="616ca6e2078e5c8d0f88469aed7d25f49374936b" translate="yes" xml:space="preserve">
          <source>Chain::rfold</source>
          <target state="translated">Chain::rfold</target>
        </trans-unit>
        <trans-unit id="465600d6772d7053c88fdfdd0b451abd3c9fbac3" translate="yes" xml:space="preserve">
          <source>Chain::rposition</source>
          <target state="translated">Chain::rposition</target>
        </trans-unit>
        <trans-unit id="452ca349485e8bfc7449ee7c3ee4d10ccfc99cab" translate="yes" xml:space="preserve">
          <source>Chain::scan</source>
          <target state="translated">Chain::scan</target>
        </trans-unit>
        <trans-unit id="ed535e1e9fb01de6877512f454d84178a076b7c5" translate="yes" xml:space="preserve">
          <source>Chain::size_hint</source>
          <target state="translated">Chain::size_hint</target>
        </trans-unit>
        <trans-unit id="0b03ec3293cb2c174f53942d9c30df6a3f9bf4fd" translate="yes" xml:space="preserve">
          <source>Chain::skip</source>
          <target state="translated">Chain::skip</target>
        </trans-unit>
        <trans-unit id="6ef40fa9b4f8bf452c925afc2ac976673bb0370c" translate="yes" xml:space="preserve">
          <source>Chain::skip_while</source>
          <target state="translated">Chain::skip_while</target>
        </trans-unit>
        <trans-unit id="716e7f2b3466f192f283908163a5d9ba2213bb49" translate="yes" xml:space="preserve">
          <source>Chain::split</source>
          <target state="translated">Chain::split</target>
        </trans-unit>
        <trans-unit id="83733089b1a5c36f3f1b1c8a77647f06218bd992" translate="yes" xml:space="preserve">
          <source>Chain::step_by</source>
          <target state="translated">Chain::step_by</target>
        </trans-unit>
        <trans-unit id="4d17227d47c7b2b7736cae05d4955282bcbe9400" translate="yes" xml:space="preserve">
          <source>Chain::sum</source>
          <target state="translated">Chain::sum</target>
        </trans-unit>
        <trans-unit id="c3e98ad87f62ad9c551eb491befe942a7a75b2ac" translate="yes" xml:space="preserve">
          <source>Chain::take</source>
          <target state="translated">Chain::take</target>
        </trans-unit>
        <trans-unit id="d7e5fa70bbbc6fcf8ae553d9d4f54c68738a577a" translate="yes" xml:space="preserve">
          <source>Chain::take_while</source>
          <target state="translated">Chain::take_while</target>
        </trans-unit>
        <trans-unit id="b373f4426edc7e4207d02964236dc0d5163c3a31" translate="yes" xml:space="preserve">
          <source>Chain::to_owned</source>
          <target state="translated">Chain::to_owned</target>
        </trans-unit>
        <trans-unit id="faa45040ecdf4b085456e15bae1b74843340e880" translate="yes" xml:space="preserve">
          <source>Chain::try_fold</source>
          <target state="translated">Chain::try_fold</target>
        </trans-unit>
        <trans-unit id="133cd86be1a4e066f53f0d212f48a297e48fe142" translate="yes" xml:space="preserve">
          <source>Chain::try_for_each</source>
          <target state="translated">Chain::try_for_each</target>
        </trans-unit>
        <trans-unit id="fe8a5b4042b09556dbff881a55e123991b66d041" translate="yes" xml:space="preserve">
          <source>Chain::try_from</source>
          <target state="translated">Chain::try_from</target>
        </trans-unit>
        <trans-unit id="071cb829aee3b1825f5a5c43d066c9a3fecb6ba6" translate="yes" xml:space="preserve">
          <source>Chain::try_into</source>
          <target state="translated">Chain::try_into</target>
        </trans-unit>
        <trans-unit id="2304c98b6614021a735c406442d8a00a711e3f97" translate="yes" xml:space="preserve">
          <source>Chain::try_rfold</source>
          <target state="translated">Chain::try_rfold</target>
        </trans-unit>
        <trans-unit id="28a8ffe46c6bc453afdb747b772076551e4079a0" translate="yes" xml:space="preserve">
          <source>Chain::type_id</source>
          <target state="translated">Chain::type_id</target>
        </trans-unit>
        <trans-unit id="b1b7567abf27b702ebe8dd05b1ce2679d3f03dfa" translate="yes" xml:space="preserve">
          <source>Chain::unzip</source>
          <target state="translated">Chain::unzip</target>
        </trans-unit>
        <trans-unit id="ec65cf6ebb8491b38b103ac0b4fed46d5ed9ee66" translate="yes" xml:space="preserve">
          <source>Chain::zip</source>
          <target state="translated">Chain::zip</target>
        </trans-unit>
        <trans-unit id="748ceba5bff91e541e8a756ec7457ef0763a96ac" translate="yes" xml:space="preserve">
          <source>Chaining together with another iterator. Let's say that we want to iterate over each file of the &lt;code&gt;.foo&lt;/code&gt; directory, but also a configuration file, &lt;code&gt;.foorc&lt;/code&gt;:</source>
          <target state="translated">別のイテレーターと一緒にチェーンします。 &lt;code&gt;.foo&lt;/code&gt; ディレクトリの各ファイルだけでなく、構成ファイル &lt;code&gt;.foorc&lt;/code&gt; も反復処理するとします。</target>
        </trans-unit>
        <trans-unit id="1b1afeff88ef4e9f436f6d94c27bd915a3465dc3" translate="yes" xml:space="preserve">
          <source>Chains the ordering with the given function.</source>
          <target state="translated">与えられた関数を使って順序を連鎖させます。</target>
        </trans-unit>
        <trans-unit id="0fa038f72fc2d0c1b67b006ff527931d7f084821" translate="yes" xml:space="preserve">
          <source>Chains two orderings.</source>
          <target state="translated">2つのオーダーを連鎖させます。</target>
        </trans-unit>
        <trans-unit id="7e778b67df6fc38c30c1ff7251080ec9db05df79" translate="yes" xml:space="preserve">
          <source>Change &lt;code&gt;ThreadPool&lt;/code&gt; to hold a vector of &lt;code&gt;Worker&lt;/code&gt; instances.</source>
          <target state="translated">&lt;code&gt;ThreadPool&lt;/code&gt; を変更して、 &lt;code&gt;Worker&lt;/code&gt; インスタンスのベクターを保持します。</target>
        </trans-unit>
        <trans-unit id="4ba420d07a0e41b02491d6e59d0ad42e5818a029" translate="yes" xml:space="preserve">
          <source>Change calls to &lt;code&gt;unwrap&lt;/code&gt; to more robust error handling.</source>
          <target state="translated">&lt;code&gt;unwrap&lt;/code&gt; の呼び出しを変更して、より堅牢なエラー処理に変更します。</target>
        </trans-unit>
        <trans-unit id="2c94b13aae0d9952f74eca6bcdd8ad156e66048c" translate="yes" xml:space="preserve">
          <source>Change this:</source>
          <target state="translated">これを変えろ</target>
        </trans-unit>
        <trans-unit id="8218f6e380263f9e5b2bac2c18e9c764a3d9111d" translate="yes" xml:space="preserve">
          <source>Change your code so the warning does no longer trigger. For backwards compatibility, this unsound code may still compile (with a warning) right now. However, at some point in the future, the compiler will no longer accept this code and will throw a hard error.</source>
          <target state="translated">警告が発生しないようにコードを変更してください。下位互換性のために、この健全でないコードは今でも(警告が出て)コンパイルできるかもしれません。しかし、将来のある時点で、コンパイラはこのコードを受け入れなくなり、ハードエラーが発生するようになります。</target>
        </trans-unit>
        <trans-unit id="93c63d0e6eb2e83b8cfd1e4ed02f95b39b503dd7" translate="yes" xml:space="preserve">
          <source>Changes the IP address associated with this socket address.</source>
          <target state="translated">このソケットアドレスに関連付けられたIPアドレスを変更します。</target>
        </trans-unit>
        <trans-unit id="0bce5cfed46fd217fc9a7e95b2bf76139cbcca09" translate="yes" xml:space="preserve">
          <source>Changes the current working directory to the specified path.</source>
          <target state="translated">現在の作業ディレクトリを指定したパスに変更します。</target>
        </trans-unit>
        <trans-unit id="39ab9d9d444bfb60048e9c4fece991905d4d1e86" translate="yes" xml:space="preserve">
          <source>Changes the error value of this &lt;code&gt;Poll&lt;/code&gt; with the closure provided.</source>
          <target state="translated">指定されたクロージャーを使用して、この &lt;code&gt;Poll&lt;/code&gt; のエラー値を変更します。</target>
        </trans-unit>
        <trans-unit id="0894eebb4c57f7024798d2e982313f80048e999c" translate="yes" xml:space="preserve">
          <source>Changes the flow information associated with this socket address.</source>
          <target state="translated">このソケットアドレスに関連付けられたフロー情報を変更します。</target>
        </trans-unit>
        <trans-unit id="bf9993ddf13f81ad8923d2fa35426c9a955c5b81" translate="yes" xml:space="preserve">
          <source>Changes the permissions found on a file or a directory.</source>
          <target state="translated">ファイルやディレクトリのパーミッションを変更します。</target>
        </trans-unit>
        <trans-unit id="61711d1fe8d75e55f64d975c4dce683ca8cb8280" translate="yes" xml:space="preserve">
          <source>Changes the permissions on the underlying file.</source>
          <target state="translated">基礎となるファイルのパーミッションを変更します。</target>
        </trans-unit>
        <trans-unit id="408bb0a68e350e78c9beed91c6ebd7c0f8e579c7" translate="yes" xml:space="preserve">
          <source>Changes the port number associated with this socket address.</source>
          <target state="translated">このソケットアドレスに関連付けられたポート番号を変更します。</target>
        </trans-unit>
        <trans-unit id="75710c0ecb185bcb6900007274a6a69b1ebee627" translate="yes" xml:space="preserve">
          <source>Changes the ready value of this &lt;code&gt;Poll&lt;/code&gt; with the closure provided.</source>
          <target state="translated">指定されたクロージャーを使用して、この &lt;code&gt;Poll&lt;/code&gt; の作動可能値を変更します。</target>
        </trans-unit>
        <trans-unit id="55faf8715d899d564c8282fa041515429baa40e6" translate="yes" xml:space="preserve">
          <source>Changes the scope ID associated with this socket address.</source>
          <target state="translated">このソケットアドレスに関連付けられたスコープIDを変更します。</target>
        </trans-unit>
        <trans-unit id="ab4c7d1363d3773530b37d140a46e1672de67741" translate="yes" xml:space="preserve">
          <source>Changes the success value of this &lt;code&gt;Poll&lt;/code&gt; with the closure provided.</source>
          <target state="translated">指定されたクロージャーでこの &lt;code&gt;Poll&lt;/code&gt; の成功値を変更します。</target>
        </trans-unit>
        <trans-unit id="a1f60265c7d64466c0f8fb8e720ccaaeac9dc69c" translate="yes" xml:space="preserve">
          <source>Channels and Ownership Transference</source>
          <target state="translated">チャネルと所有権の移転</target>
        </trans-unit>
        <trans-unit id="d0554cbc167d40e5ef8c4d0eb34bc6cf3b7958bb" translate="yes" xml:space="preserve">
          <source>Chapter 1 explains how to install Rust, how to write a &amp;ldquo;Hello, world!&amp;rdquo; program, and how to use Cargo, Rust&amp;rsquo;s package manager and build tool. Chapter 2 is a hands-on introduction to the Rust language. Here we cover concepts at a high level, and later chapters will provide additional detail. If you want to get your hands dirty right away, Chapter 2 is the place for that. At first, you might even want to skip Chapter 3, which covers Rust features similar to those of other programming languages, and head straight to Chapter 4 to learn about Rust&amp;rsquo;s ownership system. However, if you&amp;rsquo;re a particularly meticulous learner who prefers to learn every detail before moving on to the next, you might want to skip Chapter 2 and go straight to Chapter 3, returning to Chapter 2 when you&amp;rsquo;d like to work on a project applying the details you&amp;rsquo;ve learned.</source>
          <target state="translated">Chapter 1 explains how to install Rust, how to write a &amp;ldquo;Hello, world!&amp;rdquo; program, and how to use Cargo, Rust&amp;rsquo;s package manager and build tool. Chapter 2 is a hands-on introduction to the Rust language. Here we cover concepts at a high level, and later chapters will provide additional detail. If you want to get your hands dirty right away, Chapter 2 is the place for that. At first, you might even want to skip Chapter 3, which covers Rust features similar to those of other programming languages, and head straight to Chapter 4 to learn about Rust&amp;rsquo;s ownership system. However, if you&amp;rsquo;re a particularly meticulous learner who prefers to learn every detail before moving on to the next, you might want to skip Chapter 2 and go straight to Chapter 3, returning to Chapter 2 when you&amp;rsquo;d like to work on a project applying the details you&amp;rsquo;ve learned.</target>
        </trans-unit>
        <trans-unit id="e141060577fc1ffdfcb3314987d4c83fff4a4f32" translate="yes" xml:space="preserve">
          <source>Chapter 1 explains how to install Rust, how to write a Hello, world! program, and how to use Cargo, Rust&amp;rsquo;s package manager and build tool. Chapter 2 is a hands-on introduction to the Rust language. Here we cover concepts at a high level, and later chapters will provide additional detail. If you want to get your hands dirty right away, Chapter 2 is the place for that. At first, you might even want to skip Chapter 3, which covers Rust features similar to those of other programming languages, and head straight to Chapter 4 to learn about Rust&amp;rsquo;s ownership system. However, if you&amp;rsquo;re a particularly meticulous learner who prefers to learn every detail before moving on to the next, you might want to skip Chapter 2 and go straight to Chapter 3, returning to Chapter 2 when you&amp;rsquo;d like to work on a project applying the details you&amp;rsquo;ve learned.</source>
          <target state="translated">第1章では、Rustのインストール方法、Hello、world！の記述方法について説明します。プログラム、およびRustのパッケージマネージャーとビルドツールであるCargoの使用方法。第2章は、Rust言語の実践的な紹介です。ここでは、高レベルの概念について説明し、後の章でさらに詳細を説明します。すぐに手を汚したい場合は、第2章が最適です。最初は、他のプログラミング言語と同様のRust機能をカバーする第3章をスキップし、第4章に進んでRustの所有権システムについて学ぶこともできます。ただし、次のステップに進む前にすべての詳細を学習することを好む特に注意深い学習者である場合は、第2章をスキップして第3章に直接進み、第2章に戻って、あなたが学んだ詳細を適用するプロジェクト。</target>
        </trans-unit>
        <trans-unit id="4b4a4c0c5c058918fb9c43359faa406f18687d83" translate="yes" xml:space="preserve">
          <source>Chapter 10 digs into generics, traits, and lifetimes, which give you the power to define code that applies to multiple types. Chapter 11 is all about testing, which even with Rust&amp;rsquo;s safety guarantees is necessary to ensure your program&amp;rsquo;s logic is correct. In Chapter 12, we&amp;rsquo;ll build our own implementation of a subset of functionality from the &lt;code&gt;grep&lt;/code&gt; command line tool that searches for text within files. For this, we&amp;rsquo;ll use many of the concepts we discussed in the previous chapters.</source>
          <target state="translated">第10章では、ジェネリック、トレイト、ライフタイムについて詳しく説明します。これにより、複数のタイプに適用されるコードを定義できます。第11章はすべてテストに関するものであり、Rustの安全性の保証があっても、プログラムのロジックが正しいことを確認するために必要です。第12章では、ファイル内のテキストを検索する &lt;code&gt;grep&lt;/code&gt; コマンドラインツールから、機能のサブセットの独自の実装を構築します。これには、前の章で説明した概念の多くを使用します。</target>
        </trans-unit>
        <trans-unit id="b95d863c86889b972ff474802eee7694178add17" translate="yes" xml:space="preserve">
          <source>Chapter 10 has new sections titled &amp;ldquo;Traits as Parameters&amp;rdquo; and &amp;ldquo;Returning Types that Implement Traits&amp;rdquo; that explain the new &lt;code&gt;impl Trait&lt;/code&gt; syntax.</source>
          <target state="translated">第10章「パラメータとして形質」と新しい説明「形質を実装返すタイプ」というタイトルの新しいセクションがある &lt;code&gt;impl Trait&lt;/code&gt; 構文を。</target>
        </trans-unit>
        <trans-unit id="3c825c90d9bd44cae9d713ef783d540535fa1068" translate="yes" xml:space="preserve">
          <source>Chapter 11 has a new section titled &amp;ldquo;Using &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt; in Tests&amp;rdquo; that shows how to write tests that use the &lt;code&gt;?&lt;/code&gt; operator.</source>
          <target state="translated">第11章には、「テスト &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt; 使用」というタイトルの新しいセクションがあり、 &lt;code&gt;?&lt;/code&gt; を使用するテストの作成方法が示されています。オペレーター。</target>
        </trans-unit>
        <trans-unit id="272194055c04afdb04bea3693656526567f6cd6d" translate="yes" xml:space="preserve">
          <source>Chapter 13 explores closures and iterators: features of Rust that come from functional programming languages. In Chapter 14, we&amp;rsquo;ll examine Cargo in more depth and talk about best practices for sharing your libraries with others. Chapter 15 discusses smart pointers that the standard library provides and the traits that enable their functionality.</source>
          <target state="translated">第13章では、クロージャーとイテレーター（関数型プログラミング言語に由来するRustの機能）について説明します。第14章では、Cargoをさらに詳しく調べ、ライブラリを他のユーザーと共有するためのベストプラクティスについて説明します。第15章では、標準ライブラリが提供するスマートポインタと、その機能を有効にする特性について説明します。</target>
        </trans-unit>
        <trans-unit id="335638665cd539d111c6df41a4bded7a86d288c2" translate="yes" xml:space="preserve">
          <source>Chapter 18 is a reference on patterns and pattern matching, which are powerful ways of expressing ideas throughout Rust programs. Chapter 19 contains a smorgasbord of advanced topics of interest, including unsafe Rust, macros, and more about lifetimes, traits, types, functions, and closures.</source>
          <target state="translated">第 18 章は、Rust プログラム全体でアイデアを表現する強力な方法であるパターンとパターンマッチングについてのリファレンスです。第 19 章では、安全でない Rust、マクロ、ライフタイム、形質、型、関数、クロージャなどの高度なトピックが掲載されています。</target>
        </trans-unit>
        <trans-unit id="cacfb78cb44d1121da023e8f6353824bcd7442f7" translate="yes" xml:space="preserve">
          <source>Chapter 5 discusses structs and methods, and Chapter 6 covers enums, &lt;code&gt;match&lt;/code&gt; expressions, and the &lt;code&gt;if let&lt;/code&gt; control flow construct. You&amp;rsquo;ll use structs and enums to make custom types in Rust.</source>
          <target state="translated">第5章では構造体とメソッドについて説明し、第6章では列挙型、 &lt;code&gt;match&lt;/code&gt; 式、および &lt;code&gt;if let&lt;/code&gt; について説明します制御フロー構造について説明します。Rustでカスタム型を作成するには、構造体と列挙型を使用します。</target>
        </trans-unit>
        <trans-unit id="65a7f257641d151b9665f79649bdc602c003ca9a" translate="yes" xml:space="preserve">
          <source>Chapter 7, &amp;ldquo;Managing Growing Projects with Packages, Crates, and Modules,&amp;rdquo; has been mostly rewritten. The module system and the way paths work in the 2018 Edition were made more consistent.</source>
          <target state="translated">第7章「パッケージ、クレート、モジュールを使用して成長するプロジェクトを管理する」は、ほとんどが書き直されました。2018年版でのモジュールシステムとパスの動作方法の一貫性が向上しました。</target>
        </trans-unit>
        <trans-unit id="90e1b514f4229ff09bc2fc133975c58e9f1311b1" translate="yes" xml:space="preserve">
          <source>Chapters that informally describe each language construct and their use.</source>
          <target state="translated">各言語の構成要素とその使用法を非公式に記述した章。</target>
        </trans-unit>
        <trans-unit id="5931610305cf738b147b070e0328e9e0416733f3" translate="yes" xml:space="preserve">
          <source>Chapters that informally describe the memory model, concurrency model, runtime services, linkage model and debugging facilities.</source>
          <target state="translated">メモリモデル、同時実行モデル、ランタイムサービス、リンケージモデル、デバッグ機能を非公式に記述した章。</target>
        </trans-unit>
        <trans-unit id="74187519e4e11a841b89aa1e16a1b00b3944387a" translate="yes" xml:space="preserve">
          <source>Chapters that informally describe the memory model, concurrency model, runtime services, linkage model, and debugging facilities.</source>
          <target state="translated">メモリモデル、同時実行モデル、ランタイムサービス、リンケージモデル、デバッグ機能を非公式に記述した章。</target>
        </trans-unit>
        <trans-unit id="9d8ff35909d619e1e155e2a5affc66dfe8c2ec06" translate="yes" xml:space="preserve">
          <source>CharIndices</source>
          <target state="translated">CharIndices</target>
        </trans-unit>
        <trans-unit id="d95c75da9358378de2a1b053637768df967a6f31" translate="yes" xml:space="preserve">
          <source>CharIndices::all</source>
          <target state="translated">CharIndices::all</target>
        </trans-unit>
        <trans-unit id="d830b39dff1b294a60ea911d5b74bdca9e0dfbf0" translate="yes" xml:space="preserve">
          <source>CharIndices::any</source>
          <target state="translated">CharIndices::any</target>
        </trans-unit>
        <trans-unit id="3b8d54005fde4e7ee8fcb9a25c7d8001a81864ed" translate="yes" xml:space="preserve">
          <source>CharIndices::as_str</source>
          <target state="translated">CharIndices::as_str</target>
        </trans-unit>
        <trans-unit id="66672b4006d0a3ba8b4a5ad5acb4f63bf7f10323" translate="yes" xml:space="preserve">
          <source>CharIndices::borrow</source>
          <target state="translated">CharIndices::borrow</target>
        </trans-unit>
        <trans-unit id="202893e490a72fd403a08936003376ab8f42bcfe" translate="yes" xml:space="preserve">
          <source>CharIndices::borrow_mut</source>
          <target state="translated">CharIndices::borrow_mut</target>
        </trans-unit>
        <trans-unit id="54926a64b10ae65fb9a895ffc07b62d303d981fa" translate="yes" xml:space="preserve">
          <source>CharIndices::by_ref</source>
          <target state="translated">CharIndices::by_ref</target>
        </trans-unit>
        <trans-unit id="f63369912b55caadda95543738dbdbfd2a825232" translate="yes" xml:space="preserve">
          <source>CharIndices::chain</source>
          <target state="translated">CharIndices::chain</target>
        </trans-unit>
        <trans-unit id="88fa501742bf8af2468e36b43c7cfc05320cea02" translate="yes" xml:space="preserve">
          <source>CharIndices::clone</source>
          <target state="translated">CharIndices::clone</target>
        </trans-unit>
        <trans-unit id="e963d55f4bcdab8bba0b99670a953ebe7da603c9" translate="yes" xml:space="preserve">
          <source>CharIndices::clone_from</source>
          <target state="translated">CharIndices::clone_from</target>
        </trans-unit>
        <trans-unit id="71575257755bcb84e7d982bc57d477dbf5697303" translate="yes" xml:space="preserve">
          <source>CharIndices::clone_into</source>
          <target state="translated">CharIndices::clone_into</target>
        </trans-unit>
        <trans-unit id="2cfc720d0911b2e7473887224dc90faa22acb3f7" translate="yes" xml:space="preserve">
          <source>CharIndices::cloned</source>
          <target state="translated">CharIndices::cloned</target>
        </trans-unit>
        <trans-unit id="618ba6e23e03cf10749a2d53bb81b69780e03dbe" translate="yes" xml:space="preserve">
          <source>CharIndices::cmp</source>
          <target state="translated">CharIndices::cmp</target>
        </trans-unit>
        <trans-unit id="181cdecb116804c13771fa8a297adc252db5fb6c" translate="yes" xml:space="preserve">
          <source>CharIndices::collect</source>
          <target state="translated">CharIndices::collect</target>
        </trans-unit>
        <trans-unit id="4299db8cb0d1de53b11af02200112164a52417ff" translate="yes" xml:space="preserve">
          <source>CharIndices::copied</source>
          <target state="translated">CharIndices::copied</target>
        </trans-unit>
        <trans-unit id="bf4cba553eaf4e8a09ab275684988b273c286703" translate="yes" xml:space="preserve">
          <source>CharIndices::count</source>
          <target state="translated">CharIndices::count</target>
        </trans-unit>
        <trans-unit id="9f7e63d42530e697cf96649c600ecdb3425ac7cf" translate="yes" xml:space="preserve">
          <source>CharIndices::cycle</source>
          <target state="translated">CharIndices::cycle</target>
        </trans-unit>
        <trans-unit id="231db685b9f206969adeb00c11054afacb6bf3c7" translate="yes" xml:space="preserve">
          <source>CharIndices::enumerate</source>
          <target state="translated">CharIndices::enumerate</target>
        </trans-unit>
        <trans-unit id="fe03f80e25520c1008efa97187b7d78a458b331f" translate="yes" xml:space="preserve">
          <source>CharIndices::eq</source>
          <target state="translated">CharIndices::eq</target>
        </trans-unit>
        <trans-unit id="105c244bfde08c6c1e4a761ba347c8f13eb82797" translate="yes" xml:space="preserve">
          <source>CharIndices::filter</source>
          <target state="translated">CharIndices::filter</target>
        </trans-unit>
        <trans-unit id="bcd72ec35162455a98e0ef690981a7923d307a4f" translate="yes" xml:space="preserve">
          <source>CharIndices::filter_map</source>
          <target state="translated">CharIndices::filter_map</target>
        </trans-unit>
        <trans-unit id="463e3691e7440e9532182ab4d1c7175f46d2221d" translate="yes" xml:space="preserve">
          <source>CharIndices::find</source>
          <target state="translated">CharIndices::find</target>
        </trans-unit>
        <trans-unit id="8039fc2d7c94fc4027372430f01719b9b024d9f4" translate="yes" xml:space="preserve">
          <source>CharIndices::find_map</source>
          <target state="translated">CharIndices::find_map</target>
        </trans-unit>
        <trans-unit id="97730d64c830bd6689bbf54c1ae36047e30a9345" translate="yes" xml:space="preserve">
          <source>CharIndices::flat_map</source>
          <target state="translated">CharIndices::flat_map</target>
        </trans-unit>
        <trans-unit id="d333bbcd29a0397bf5df640ee7e595a0611c651e" translate="yes" xml:space="preserve">
          <source>CharIndices::flatten</source>
          <target state="translated">CharIndices::flatten</target>
        </trans-unit>
        <trans-unit id="15dcdffd3d343e149db1aaf18b45a5d57ea4a84a" translate="yes" xml:space="preserve">
          <source>CharIndices::fmt</source>
          <target state="translated">CharIndices::fmt</target>
        </trans-unit>
        <trans-unit id="d70d3e12984e4ef05d40889c61a896823b4f4068" translate="yes" xml:space="preserve">
          <source>CharIndices::fold</source>
          <target state="translated">CharIndices::fold</target>
        </trans-unit>
        <trans-unit id="d244e01e70842f17b9cf3bf846e6101827411b2c" translate="yes" xml:space="preserve">
          <source>CharIndices::for_each</source>
          <target state="translated">CharIndices::for_each</target>
        </trans-unit>
        <trans-unit id="e7668f1f7e7abf7df942b353d648715bfe87b087" translate="yes" xml:space="preserve">
          <source>CharIndices::from</source>
          <target state="translated">CharIndices::from</target>
        </trans-unit>
        <trans-unit id="586e881e70d85b542f49b17229c1797b1d7e1e6b" translate="yes" xml:space="preserve">
          <source>CharIndices::fuse</source>
          <target state="translated">CharIndices::fuse</target>
        </trans-unit>
        <trans-unit id="af52655d27c378c29b28bb1df9c98558899bac0f" translate="yes" xml:space="preserve">
          <source>CharIndices::ge</source>
          <target state="translated">CharIndices::ge</target>
        </trans-unit>
        <trans-unit id="23a26cd8ccee0e4108e45c6594ed474151623109" translate="yes" xml:space="preserve">
          <source>CharIndices::gt</source>
          <target state="translated">CharIndices::gt</target>
        </trans-unit>
        <trans-unit id="8bf302521d997e69f09178ee9710e0f5ad04e454" translate="yes" xml:space="preserve">
          <source>CharIndices::inspect</source>
          <target state="translated">CharIndices::inspect</target>
        </trans-unit>
        <trans-unit id="6abc7c4e8c4b55c070be92e904f927e74dcbd8aa" translate="yes" xml:space="preserve">
          <source>CharIndices::into</source>
          <target state="translated">CharIndices::into</target>
        </trans-unit>
        <trans-unit id="ffe683f100af03e7b4662ead21e90db87e2021cd" translate="yes" xml:space="preserve">
          <source>CharIndices::into_iter</source>
          <target state="translated">CharIndices::into_iter</target>
        </trans-unit>
        <trans-unit id="7f6f26057fb9afa3a78f6e5633789f9328ffda63" translate="yes" xml:space="preserve">
          <source>CharIndices::is_sorted</source>
          <target state="translated">CharIndices::is_sorted</target>
        </trans-unit>
        <trans-unit id="33b187e6de6e9f7a0aade1214de316f9ed9c3895" translate="yes" xml:space="preserve">
          <source>CharIndices::is_sorted_by</source>
          <target state="translated">CharIndices::is_sorted_by</target>
        </trans-unit>
        <trans-unit id="cce09e567dc9e397ae4404fd5d90435c8d1c2ba9" translate="yes" xml:space="preserve">
          <source>CharIndices::is_sorted_by_key</source>
          <target state="translated">CharIndices::is_sorted_by_key</target>
        </trans-unit>
        <trans-unit id="80fbb41d402a28ad0bd79c7e476749c04e4edb6c" translate="yes" xml:space="preserve">
          <source>CharIndices::last</source>
          <target state="translated">CharIndices::last</target>
        </trans-unit>
        <trans-unit id="586333fe28be8257a76a9bf9903f3bf196bb4676" translate="yes" xml:space="preserve">
          <source>CharIndices::le</source>
          <target state="translated">CharIndices::le</target>
        </trans-unit>
        <trans-unit id="e19474bedbf5a57e14cb4ac670eae859d4c8118a" translate="yes" xml:space="preserve">
          <source>CharIndices::lt</source>
          <target state="translated">CharIndices::lt</target>
        </trans-unit>
        <trans-unit id="46df42228a03362f79967ca336c9ac738aba784b" translate="yes" xml:space="preserve">
          <source>CharIndices::map</source>
          <target state="translated">CharIndices::map</target>
        </trans-unit>
        <trans-unit id="894db9222daf188dd94873ccade1add30d833f85" translate="yes" xml:space="preserve">
          <source>CharIndices::max</source>
          <target state="translated">CharIndices::max</target>
        </trans-unit>
        <trans-unit id="d59a0e2ac8cc8435a0083ab0ce4bb832fbb765eb" translate="yes" xml:space="preserve">
          <source>CharIndices::max_by</source>
          <target state="translated">CharIndices::max_by</target>
        </trans-unit>
        <trans-unit id="ed44ee485fe63206c34f53dbecf3e4f6325dad33" translate="yes" xml:space="preserve">
          <source>CharIndices::max_by_key</source>
          <target state="translated">CharIndices::max_by_key</target>
        </trans-unit>
        <trans-unit id="939c88a825e2a4afdcbeb1b82219e9bba318dc99" translate="yes" xml:space="preserve">
          <source>CharIndices::min</source>
          <target state="translated">CharIndices::min</target>
        </trans-unit>
        <trans-unit id="78b324bf19c724109aec99b684423eaf80970026" translate="yes" xml:space="preserve">
          <source>CharIndices::min_by</source>
          <target state="translated">CharIndices::min_by</target>
        </trans-unit>
        <trans-unit id="9c47d1f8d6e8ae30c3d32cdff6fc3d702ba31de3" translate="yes" xml:space="preserve">
          <source>CharIndices::min_by_key</source>
          <target state="translated">CharIndices::min_by_key</target>
        </trans-unit>
        <trans-unit id="eb5a3bb43e05804e9371580a57c30846a9b2a84b" translate="yes" xml:space="preserve">
          <source>CharIndices::ne</source>
          <target state="translated">CharIndices::ne</target>
        </trans-unit>
        <trans-unit id="0a46827b0511bfffa73036c46cf94c2f050c8168" translate="yes" xml:space="preserve">
          <source>CharIndices::next</source>
          <target state="translated">CharIndices::next</target>
        </trans-unit>
        <trans-unit id="f4f9efa09d57f2e61bcb261a8be36ad80bbced76" translate="yes" xml:space="preserve">
          <source>CharIndices::next_back</source>
          <target state="translated">CharIndices::next_back</target>
        </trans-unit>
        <trans-unit id="cc2d6ee5d5210abf5e5a95dc331fc376a184b857" translate="yes" xml:space="preserve">
          <source>CharIndices::nth</source>
          <target state="translated">CharIndices::nth</target>
        </trans-unit>
        <trans-unit id="066dac9a3385b98fcbbe8b4b7109e8894b079357" translate="yes" xml:space="preserve">
          <source>CharIndices::nth_back</source>
          <target state="translated">CharIndices::nth_back</target>
        </trans-unit>
        <trans-unit id="c8d904e5b5d865fb6fce3be7e219b79347adf1f7" translate="yes" xml:space="preserve">
          <source>CharIndices::partial_cmp</source>
          <target state="translated">CharIndices::partial_cmp</target>
        </trans-unit>
        <trans-unit id="34ce5ec82a8525f7f4fa3eaf8665acf81b143d34" translate="yes" xml:space="preserve">
          <source>CharIndices::partition</source>
          <target state="translated">CharIndices::partition</target>
        </trans-unit>
        <trans-unit id="074deba1479136682af501a725fc61c3b59ceab1" translate="yes" xml:space="preserve">
          <source>CharIndices::peekable</source>
          <target state="translated">CharIndices::peekable</target>
        </trans-unit>
        <trans-unit id="45e9a0b751a5a03973f598a45a0a0fc85ae4ab68" translate="yes" xml:space="preserve">
          <source>CharIndices::position</source>
          <target state="translated">CharIndices::position</target>
        </trans-unit>
        <trans-unit id="3174001914710f754b62077540312dfd626227ae" translate="yes" xml:space="preserve">
          <source>CharIndices::product</source>
          <target state="translated">CharIndices::product</target>
        </trans-unit>
        <trans-unit id="314d3944595a54328c3c0bf4def538376f2de50e" translate="yes" xml:space="preserve">
          <source>CharIndices::rev</source>
          <target state="translated">CharIndices::rev</target>
        </trans-unit>
        <trans-unit id="bd7e23480d003480676a4bd7fcecc446ee043037" translate="yes" xml:space="preserve">
          <source>CharIndices::rfind</source>
          <target state="translated">CharIndices::rfind</target>
        </trans-unit>
        <trans-unit id="37d963ab2b667370c7e13679780046267e416d6b" translate="yes" xml:space="preserve">
          <source>CharIndices::rfold</source>
          <target state="translated">CharIndices::rfold</target>
        </trans-unit>
        <trans-unit id="8e2dd45e83fb26e34d043dc65cdfc1f43a7cf3a6" translate="yes" xml:space="preserve">
          <source>CharIndices::rposition</source>
          <target state="translated">CharIndices::rposition</target>
        </trans-unit>
        <trans-unit id="add3a830f26e1c6b2d81831dfb80de7c02aef64c" translate="yes" xml:space="preserve">
          <source>CharIndices::scan</source>
          <target state="translated">CharIndices::scan</target>
        </trans-unit>
        <trans-unit id="e41d57637b3aff257f73f4e1a3fbd5061b88f347" translate="yes" xml:space="preserve">
          <source>CharIndices::size_hint</source>
          <target state="translated">CharIndices::size_hint</target>
        </trans-unit>
        <trans-unit id="dce5c19e2f6a1164c53697ee830a9adf94771b11" translate="yes" xml:space="preserve">
          <source>CharIndices::skip</source>
          <target state="translated">CharIndices::skip</target>
        </trans-unit>
        <trans-unit id="523340b2bc399753c54d305889d7d915c59dc5fb" translate="yes" xml:space="preserve">
          <source>CharIndices::skip_while</source>
          <target state="translated">CharIndices::skip_while</target>
        </trans-unit>
        <trans-unit id="3047fd02e80644721daaccef7f15f9bbf3642f2a" translate="yes" xml:space="preserve">
          <source>CharIndices::step_by</source>
          <target state="translated">CharIndices::step_by</target>
        </trans-unit>
        <trans-unit id="25fc874e9b7a1c6df4a1ecf854c20c3b1e7df366" translate="yes" xml:space="preserve">
          <source>CharIndices::sum</source>
          <target state="translated">CharIndices::sum</target>
        </trans-unit>
        <trans-unit id="cdf50b743430dc40151c74f644721c2363c596ee" translate="yes" xml:space="preserve">
          <source>CharIndices::take</source>
          <target state="translated">CharIndices::take</target>
        </trans-unit>
        <trans-unit id="740c45e786cd312b6194c5c3f42e490eac4b3f88" translate="yes" xml:space="preserve">
          <source>CharIndices::take_while</source>
          <target state="translated">CharIndices::take_while</target>
        </trans-unit>
        <trans-unit id="41cac169dfe59408672b1112e3890e76eb5dd3f7" translate="yes" xml:space="preserve">
          <source>CharIndices::to_owned</source>
          <target state="translated">CharIndices::to_owned</target>
        </trans-unit>
        <trans-unit id="7c31631a84bc5eead7d4d17e476262f3b77e8459" translate="yes" xml:space="preserve">
          <source>CharIndices::try_fold</source>
          <target state="translated">CharIndices::try_fold</target>
        </trans-unit>
        <trans-unit id="06a6fb329d0601423ad361d98e2621b4eca7a0f5" translate="yes" xml:space="preserve">
          <source>CharIndices::try_for_each</source>
          <target state="translated">CharIndices::try_for_each</target>
        </trans-unit>
        <trans-unit id="34001df567d79c2def2f3028ffe632066a8d3335" translate="yes" xml:space="preserve">
          <source>CharIndices::try_from</source>
          <target state="translated">CharIndices::try_from</target>
        </trans-unit>
        <trans-unit id="c04573cceb2046e74e5082ad9e2dd3b3f62fcf7e" translate="yes" xml:space="preserve">
          <source>CharIndices::try_into</source>
          <target state="translated">CharIndices::try_into</target>
        </trans-unit>
        <trans-unit id="5502bc4462deeda290db7d11a9d94e17c348c7c2" translate="yes" xml:space="preserve">
          <source>CharIndices::try_rfold</source>
          <target state="translated">CharIndices::try_rfold</target>
        </trans-unit>
        <trans-unit id="1b3a737b7fe6616204932c8f432a9d0d04f348b6" translate="yes" xml:space="preserve">
          <source>CharIndices::type_id</source>
          <target state="translated">CharIndices::type_id</target>
        </trans-unit>
        <trans-unit id="2a4232be4fb371c32c1149ed7be0cf8ffb347bc7" translate="yes" xml:space="preserve">
          <source>CharIndices::unzip</source>
          <target state="translated">CharIndices::unzip</target>
        </trans-unit>
        <trans-unit id="e743686a511898384a68f91e2cba5bbd733b8ba9" translate="yes" xml:space="preserve">
          <source>CharIndices::zip</source>
          <target state="translated">CharIndices::zip</target>
        </trans-unit>
        <trans-unit id="9008fc808202ecba278f15d6efa763fc292a3afb" translate="yes" xml:space="preserve">
          <source>CharPredicateSearcher</source>
          <target state="translated">CharPredicateSearcher</target>
        </trans-unit>
        <trans-unit id="9b86ad0720937e4ca1157cdb245a9ec48c4da34f" translate="yes" xml:space="preserve">
          <source>CharSearcher</source>
          <target state="translated">CharSearcher</target>
        </trans-unit>
        <trans-unit id="a763ef25e9b862e8d874b656a2bb16c4549f7cf5" translate="yes" xml:space="preserve">
          <source>CharSliceSearcher</source>
          <target state="translated">CharSliceSearcher</target>
        </trans-unit>
        <trans-unit id="43411166cda4cf9c4fe3ab13b166fd13df4799a1" translate="yes" xml:space="preserve">
          <source>CharTryFromError</source>
          <target state="translated">CharTryFromError</target>
        </trans-unit>
        <trans-unit id="eba463ce5979bc1f1e9983a1e56f1c12465bc84e" translate="yes" xml:space="preserve">
          <source>CharTryFromError::borrow</source>
          <target state="translated">CharTryFromError::borrow</target>
        </trans-unit>
        <trans-unit id="ddb33d86179d5696fcde972247394dcedeba6e61" translate="yes" xml:space="preserve">
          <source>CharTryFromError::borrow_mut</source>
          <target state="translated">CharTryFromError::borrow_mut</target>
        </trans-unit>
        <trans-unit id="8a9b686d92fabf6bc24df37159ce88e0e4eb7cdd" translate="yes" xml:space="preserve">
          <source>CharTryFromError::cause</source>
          <target state="translated">CharTryFromError::cause</target>
        </trans-unit>
        <trans-unit id="eced79c957b42982e44d319778632084a83f781b" translate="yes" xml:space="preserve">
          <source>CharTryFromError::clone</source>
          <target state="translated">CharTryFromError::clone</target>
        </trans-unit>
        <trans-unit id="55bc0bbb8059f9c41044127e786a1826232d7a30" translate="yes" xml:space="preserve">
          <source>CharTryFromError::clone_from</source>
          <target state="translated">CharTryFromError::clone_from</target>
        </trans-unit>
        <trans-unit id="7e8d48c2c11969aed6e06dd470f4d83d235ddf66" translate="yes" xml:space="preserve">
          <source>CharTryFromError::clone_into</source>
          <target state="translated">CharTryFromError::clone_into</target>
        </trans-unit>
        <trans-unit id="7028c1e6b410fc7df09a065619f9bc358c482b19" translate="yes" xml:space="preserve">
          <source>CharTryFromError::description</source>
          <target state="translated">CharTryFromError::description</target>
        </trans-unit>
        <trans-unit id="46047f411f22e37e2b80a2cad531e54cd3a74fcc" translate="yes" xml:space="preserve">
          <source>CharTryFromError::eq</source>
          <target state="translated">CharTryFromError::eq</target>
        </trans-unit>
        <trans-unit id="4cb49316b970db6cc3f07f361bc9d2bdac4b0e66" translate="yes" xml:space="preserve">
          <source>CharTryFromError::fmt</source>
          <target state="translated">CharTryFromError::fmt</target>
        </trans-unit>
        <trans-unit id="67a2e470e1a7efe0ab36544777b143b2c6ebd295" translate="yes" xml:space="preserve">
          <source>CharTryFromError::from</source>
          <target state="translated">CharTryFromError::from</target>
        </trans-unit>
        <trans-unit id="0121e2dd1bed23d78fa50799a348be6b38ef5651" translate="yes" xml:space="preserve">
          <source>CharTryFromError::into</source>
          <target state="translated">CharTryFromError::into</target>
        </trans-unit>
        <trans-unit id="1f67e3f91c06faff89cd1a28e28fea9afff95a46" translate="yes" xml:space="preserve">
          <source>CharTryFromError::ne</source>
          <target state="translated">CharTryFromError::ne</target>
        </trans-unit>
        <trans-unit id="7d0f3cc1d84c9433cfd428472a850716411b496c" translate="yes" xml:space="preserve">
          <source>CharTryFromError::source</source>
          <target state="translated">CharTryFromError::source</target>
        </trans-unit>
        <trans-unit id="5ede2e22e519136798b2884703627e080e8c5c9c" translate="yes" xml:space="preserve">
          <source>CharTryFromError::to_owned</source>
          <target state="translated">CharTryFromError::to_owned</target>
        </trans-unit>
        <trans-unit id="5ec5dfe6e6348ae8c6a7bc406f31a5e905ec7fe1" translate="yes" xml:space="preserve">
          <source>CharTryFromError::to_string</source>
          <target state="translated">CharTryFromError::to_string</target>
        </trans-unit>
        <trans-unit id="9fb2f16295c83d9df4a912527a4552a83979db5b" translate="yes" xml:space="preserve">
          <source>CharTryFromError::try_from</source>
          <target state="translated">CharTryFromError::try_from</target>
        </trans-unit>
        <trans-unit id="63bbd869285e5d1a6a9676c32a8df2ab5318245e" translate="yes" xml:space="preserve">
          <source>CharTryFromError::try_into</source>
          <target state="translated">CharTryFromError::try_into</target>
        </trans-unit>
        <trans-unit id="8a564b491acd4f2e974dcea75006b2cd82d1e9c5" translate="yes" xml:space="preserve">
          <source>CharTryFromError::type_id</source>
          <target state="translated">CharTryFromError::type_id</target>
        </trans-unit>
        <trans-unit id="ee9946c82d4a077c5be79e3015a3d2479d9fcaf2" translate="yes" xml:space="preserve">
          <source>Character</source>
          <target state="translated">Character</target>
        </trans-unit>
        <trans-unit id="e8a9e750ffbf6823c8fee5f5b1eaf8fd9f61c9a7" translate="yes" xml:space="preserve">
          <source>Character and string literals</source>
          <target state="translated">文字と文字列リテラル</target>
        </trans-unit>
        <trans-unit id="542829561029b8c0aef927ec68ddb94fee7f1e68" translate="yes" xml:space="preserve">
          <source>Character escapes</source>
          <target state="translated">キャラクターが逃げる</target>
        </trans-unit>
        <trans-unit id="4e9dedca31fc0a76de315c47da7f7ed9522f709a" translate="yes" xml:space="preserve">
          <source>Character literal</source>
          <target state="translated">文字リテラル</target>
        </trans-unit>
        <trans-unit id="b86bbfa9fed7ada0a389375eb5146d27ca6ab1fb" translate="yes" xml:space="preserve">
          <source>Character literals</source>
          <target state="translated">文字リテラル</target>
        </trans-unit>
        <trans-unit id="78f55926b9eb12239bdf25820debc2ea21f99947" translate="yes" xml:space="preserve">
          <source>Character types (char).</source>
          <target state="translated">文字の種類(char)。</target>
        </trans-unit>
        <trans-unit id="b4fcb0a4e232e25dfe7f1583cd65a18cacf83fc9" translate="yes" xml:space="preserve">
          <source>Character used as 'fill' whenever there is alignment.</source>
          <target state="translated">アラインメントがある場合には、'fill'として使用される文字。</target>
        </trans-unit>
        <trans-unit id="558a3dbbc9e8acf499270d66297d4e89392c0844" translate="yes" xml:space="preserve">
          <source>Characteristics of Object-Oriented Languages</source>
          <target state="translated">オブジェクト指向言語の特徴</target>
        </trans-unit>
        <trans-unit id="b6f59f08fd6d58c6725e21a9ec24e068148ec586" translate="yes" xml:space="preserve">
          <source>Characters</source>
          <target state="translated">Characters</target>
        </trans-unit>
        <trans-unit id="5cc71b5dc21d4f5ec7cd33a768f69aae8735eee5" translate="yes" xml:space="preserve">
          <source>Characters and strings</source>
          <target state="translated">文字と文字列</target>
        </trans-unit>
        <trans-unit id="fa756d077568ca3fa7947f31c705c22d117ea195" translate="yes" xml:space="preserve">
          <source>Chars</source>
          <target state="translated">Chars</target>
        </trans-unit>
        <trans-unit id="642b2ec56011ad95daf84547c4884566e939fd9c" translate="yes" xml:space="preserve">
          <source>Chars::all</source>
          <target state="translated">Chars::all</target>
        </trans-unit>
        <trans-unit id="e1fb58fa02ee28877b02088b32302f9dcbcf91db" translate="yes" xml:space="preserve">
          <source>Chars::any</source>
          <target state="translated">Chars::any</target>
        </trans-unit>
        <trans-unit id="74f5db25b312ceac677e5492fbd398a312f477f8" translate="yes" xml:space="preserve">
          <source>Chars::as_str</source>
          <target state="translated">Chars::as_str</target>
        </trans-unit>
        <trans-unit id="040b63c4702b88c8cb7e00af18e35a30def6e594" translate="yes" xml:space="preserve">
          <source>Chars::borrow</source>
          <target state="translated">Chars::borrow</target>
        </trans-unit>
        <trans-unit id="2fe5ff77b94e201431cd75b4f37c757b112263b9" translate="yes" xml:space="preserve">
          <source>Chars::borrow_mut</source>
          <target state="translated">Chars::borrow_mut</target>
        </trans-unit>
        <trans-unit id="c13b5e1d1c3be7dba2e3541c199a9f01baf7de0a" translate="yes" xml:space="preserve">
          <source>Chars::by_ref</source>
          <target state="translated">Chars::by_ref</target>
        </trans-unit>
        <trans-unit id="b3ec34a5da40ce122c5f6ba27ac3162501647b44" translate="yes" xml:space="preserve">
          <source>Chars::chain</source>
          <target state="translated">Chars::chain</target>
        </trans-unit>
        <trans-unit id="4d669e9e9869740e11ee07973f08ce03aea655f4" translate="yes" xml:space="preserve">
          <source>Chars::clone</source>
          <target state="translated">Chars::clone</target>
        </trans-unit>
        <trans-unit id="aed060c538facf10e6a24f7e109db6296c60b6a7" translate="yes" xml:space="preserve">
          <source>Chars::clone_from</source>
          <target state="translated">Chars::clone_from</target>
        </trans-unit>
        <trans-unit id="42337f46e179882b3d729ce4a1e7e2535edf92a3" translate="yes" xml:space="preserve">
          <source>Chars::clone_into</source>
          <target state="translated">Chars::clone_into</target>
        </trans-unit>
        <trans-unit id="94525c3d0fc5e96583af6e3a069ce2c97b39e98a" translate="yes" xml:space="preserve">
          <source>Chars::cloned</source>
          <target state="translated">Chars::cloned</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
