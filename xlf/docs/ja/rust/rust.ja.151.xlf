<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="rust">
    <body>
      <group id="rust">
        <trans-unit id="184f5f1102022e13bc531fc4c3a2f314884b9200" translate="yes" xml:space="preserve">
          <source>The solution is to coerce the array to a slice by calling a slice method:</source>
          <target state="translated">解決策は、sliceメソッドを呼び出して配列をスライスに強制することです。</target>
        </trans-unit>
        <trans-unit id="4b8f691075403fc3cc04a12f17630d0a22222627" translate="yes" xml:space="preserve">
          <source>The solution is to declare the imports at the top of the block, function, or file.</source>
          <target state="translated">解決策は、ブロック、関数、ファイルの先頭にインポートを宣言することです。</target>
        </trans-unit>
        <trans-unit id="6d341bfc87265fdb3200162c1071f84eb34afeb9" translate="yes" xml:space="preserve">
          <source>The solution to this problem is to ensure that the items that you are re-exporting are themselves marked with &lt;code&gt;pub&lt;/code&gt;:</source>
          <target state="translated">この問題の解決策は、再エクスポートするアイテム自体が &lt;code&gt;pub&lt;/code&gt; でマークされていることを確認することです。</target>
        </trans-unit>
        <trans-unit id="ca1c4540563346f3ae5ba53810b40773e7e12128" translate="yes" xml:space="preserve">
          <source>The solution to this problem is to ensure that the module that you are re-exporting is itself marked with &lt;code&gt;pub&lt;/code&gt;:</source>
          <target state="translated">この問題の解決策は、再エクスポートするモジュール自体が &lt;code&gt;pub&lt;/code&gt; でマークされていることを確認することです。</target>
        </trans-unit>
        <trans-unit id="ca9d7e79f3cd051af83e1b93c6feb0514cb1adc8" translate="yes" xml:space="preserve">
          <source>The solution to this problem is to remove the extraneous associated constant:</source>
          <target state="translated">この問題を解決するには、不要な関連定数を削除する必要があります。</target>
        </trans-unit>
        <trans-unit id="b66ecfc5844845f6ce826665530fcbac23beb458" translate="yes" xml:space="preserve">
          <source>The solution to this problem is to remove the extraneous associated type:</source>
          <target state="translated">この問題の解決策は、不要な関連型を削除することです。</target>
        </trans-unit>
        <trans-unit id="f5e669f80a825dd22d2d4e3f89464bdf72e0692e" translate="yes" xml:space="preserve">
          <source>The solution to this problem is usually to switch to using a &lt;code&gt;move&lt;/code&gt; closure. This approach moves (or copies, where possible) data into the closure, rather than taking references to it. For example:</source>
          <target state="translated">この問題の解決策は、通常、 &lt;code&gt;move&lt;/code&gt; クロージャーの使用に切り替えることです。このアプローチでは、データを参照するのではなく、クロージャーにデータを移動（または可能な場合はコピー）します。例えば：</target>
        </trans-unit>
        <trans-unit id="4bc18e7ccda6a6b48c7507cdd496e8030bd28ca8" translate="yes" xml:space="preserve">
          <source>The source files from which this book is generated can be found on &lt;a href=&quot;https://github.com/rust-lang/book/tree/master/src&quot;&gt;GitHub&lt;/a&gt;.</source>
          <target state="translated">この本の生成元であるソースファイルは、&lt;a href=&quot;https://github.com/rust-lang/book/tree/master/src&quot;&gt;GitHubにあります&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a49d6b47901cd19039274da891afacb7623398fb" translate="yes" xml:space="preserve">
          <source>The spawned thread may outlive the caller (unless the caller thread is the main thread; the whole process is terminated when the main thread finishes). The join handle can be used to block on termination of the child thread, including recovering its panics.</source>
          <target state="translated">スポーンされたスレッドは呼び出し元よりも長生きすることがあります(呼び出し元のスレッドがメインスレッドでない限り、メインスレッドが終了した時点でプロセス全体が終了します)。メインスレッドが終了するとプロセス全体が終了します。 joinハンドルは、パニックの回復を含め、子スレッドの終了をブロックするために使用できます。</target>
        </trans-unit>
        <trans-unit id="3de206631f62d211730a1cc35e89663e7062bcfa" translate="yes" xml:space="preserve">
          <source>The specified environment variable was found, but it did not contain valid unicode data. The found data is returned as a payload of this variant.</source>
          <target state="translated">指定された環境変数が見つかりましたが、有効な unicode データが含まれていませんでした。見つかったデータは、このバリアントのペイロードとして返されます。</target>
        </trans-unit>
        <trans-unit id="ea36c8e1fa9f0022c16977222444b4a3c0ab84f9" translate="yes" xml:space="preserve">
          <source>The specified environment variable was not present in the current process's environment.</source>
          <target state="translated">指定された環境変数が現在のプロセスの環境に存在しませんでした。</target>
        </trans-unit>
        <trans-unit id="9c4c268712a390c3c5b86d16dfd79086d462c7e5" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../any/fn.type_name&quot;&gt;&lt;code&gt;core::any::type_name&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この組み込みの安定化バージョンは&lt;a href=&quot;../any/fn.type_name&quot;&gt; &lt;code&gt;core::any::type_name&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="45eb3e7f185d35fea76d0fcc8feefcf81bfa67b6" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../any/fn.type_name&quot;&gt;&lt;code&gt;crate::any::type_name&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この組み込み関数の安定化バージョンは、&lt;a href=&quot;../any/fn.type_name&quot;&gt; &lt;code&gt;crate::any::type_name&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="89d879802905e96d1dbbee3b2bc193bcd1e8d256" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../any/struct.typeid#method.of&quot;&gt;&lt;code&gt;core::any::TypeId::of&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この組み込み関数の安定化バージョンは、&lt;a href=&quot;../any/struct.typeid#method.of&quot;&gt; &lt;code&gt;core::any::TypeId::of&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="dd9900dab1e575f89f6a70cab38ccde57d12f174" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../any/struct.typeid#method.of&quot;&gt;&lt;code&gt;crate::any::TypeId::of&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この組み込みの安定化バージョンは、&lt;a href=&quot;../any/struct.typeid#method.of&quot;&gt; &lt;code&gt;crate::any::TypeId::of&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="57f913c926721dcfb858ba0f49073ea9578b8b3f" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../hint/fn.unreachable_unchecked&quot;&gt;&lt;code&gt;core::hint::unreachable_unchecked&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この組み込みの安定化バージョンは&lt;a href=&quot;../hint/fn.unreachable_unchecked&quot;&gt; &lt;code&gt;core::hint::unreachable_unchecked&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="176610383e559ab75c30b3e60918dcf39baa4491" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../hint/fn.unreachable_unchecked&quot;&gt;&lt;code&gt;crate::hint::unreachable_unchecked&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この組み込みの安定化バージョンは&lt;a href=&quot;../hint/fn.unreachable_unchecked&quot;&gt; &lt;code&gt;crate::hint::unreachable_unchecked&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="769e7a49a82fbc73600ab216f157a9a4edfed6d2" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../hint/fn.unreachable_unchecked&quot;&gt;&lt;code&gt;std::hint::unreachable_unchecked&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この組み込み関数の安定版は&lt;a href=&quot;../hint/fn.unreachable_unchecked&quot;&gt; &lt;code&gt;std::hint::unreachable_unchecked&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="68bf1becb5538df04aef3bc27ba3a8fc1c5f4d80" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../mem/fn.align_of&quot;&gt;&lt;code&gt;core::mem::align_of&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この組み込みの安定化バージョンは&lt;a href=&quot;../mem/fn.align_of&quot;&gt; &lt;code&gt;core::mem::align_of&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="5f707ad710f27d4a519df162d93207b489b43663" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../mem/fn.align_of&quot;&gt;&lt;code&gt;crate::mem::align_of&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この組み込みの安定化バージョンは&lt;a href=&quot;../mem/fn.align_of&quot;&gt; &lt;code&gt;crate::mem::align_of&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="bb235568e3ec680a5ddbb056614a4544c534c3b1" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../mem/fn.align_of_val&quot;&gt;&lt;code&gt;core::mem::align_of_val&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この組み込みの安定化バージョンは&lt;a href=&quot;../mem/fn.align_of_val&quot;&gt; &lt;code&gt;core::mem::align_of_val&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="0bb92f5b8279175442866093e128f5cb80c5d7d4" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../mem/fn.align_of_val&quot;&gt;&lt;code&gt;crate::mem::align_of_val&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この組み込みの安定化バージョンは&lt;a href=&quot;../mem/fn.align_of_val&quot;&gt; &lt;code&gt;crate::mem::align_of_val&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="5b63712fb966ee55e431373c44ee70e5bdcc0d5f" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../mem/fn.discriminant&quot;&gt;&lt;code&gt;core::mem::discriminant&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この組み込みの安定化バージョンは&lt;a href=&quot;../mem/fn.discriminant&quot;&gt; &lt;code&gt;core::mem::discriminant&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="d0a9a6b3a12732480c74ccdbdd6c6cd441416852" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../mem/fn.discriminant&quot;&gt;&lt;code&gt;crate::mem::discriminant&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この組み込み関数の安定化バージョンは、&lt;a href=&quot;../mem/fn.discriminant&quot;&gt; &lt;code&gt;crate::mem::discriminant&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="2f183bce94483cede38b2e29f8c8da04b39e389f" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../mem/fn.needs_drop&quot;&gt;&lt;code&gt;mem::needs_drop&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この組み込みの安定化バージョンは&lt;a href=&quot;../mem/fn.needs_drop&quot;&gt; &lt;code&gt;mem::needs_drop&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="626a03e32989e459202fcca2e29d114287d2e779" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../mem/fn.needs_drop&quot;&gt;&lt;code&gt;std::mem::needs_drop&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この組み込み関数の安定版は&lt;a href=&quot;../mem/fn.needs_drop&quot;&gt; &lt;code&gt;std::mem::needs_drop&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="cf0f4e1682c5598721794a53177e6ce27697d607" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../mem/fn.size_of&quot;&gt;&lt;code&gt;core::mem::size_of&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この組み込みの安定化バージョンは&lt;a href=&quot;../mem/fn.size_of&quot;&gt; &lt;code&gt;core::mem::size_of&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="1b581000bfc2472e309baf4b78516cb35a337926" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../mem/fn.size_of&quot;&gt;&lt;code&gt;std::mem::size_of&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この組み込み関数の安定化バージョンは&lt;a href=&quot;../mem/fn.size_of&quot;&gt; &lt;code&gt;std::mem::size_of&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="4df5be2153e7097fd8b00742eff3c445821681d5" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../mem/fn.size_of_val&quot;&gt;&lt;code&gt;mem::size_of_val&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この組み込みの安定化バージョンは&lt;a href=&quot;../mem/fn.size_of_val&quot;&gt; &lt;code&gt;mem::size_of_val&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="5867b1e1c4944c1f7ed32488f5be2fa294b4986f" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../mem/fn.size_of_val&quot;&gt;&lt;code&gt;std::mem::size_of_val&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この組み込み関数の安定化バージョンは&lt;a href=&quot;../mem/fn.size_of_val&quot;&gt; &lt;code&gt;std::mem::size_of_val&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="c59076c6d4d0031edb1c4f415f280b4da6dafbd0" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../primitive.f32#method.abs&quot;&gt;&lt;code&gt;f32::abs&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1746aa772dc9c98fd4e848556bc017af5d5a5814" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../primitive.f32#method.abs&quot;&gt;&lt;code&gt;std::f32::abs&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">この組み込みの安定化バージョンは&lt;a href=&quot;../primitive.f32#method.abs&quot;&gt; &lt;code&gt;std::f32::abs&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="47013c0ec935095e1a4e5659f91e1818366ac3e5" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../primitive.f32#method.ceil&quot;&gt;&lt;code&gt;f32::ceil&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd019f674bd918f6d03e4b0946395283db961b78" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../primitive.f32#method.ceil&quot;&gt;&lt;code&gt;std::f32::ceil&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">この組み込みの安定化バージョンは&lt;a href=&quot;../primitive.f32#method.ceil&quot;&gt; &lt;code&gt;std::f32::ceil&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ff2a20e7040f371886fddde3d5d0aea49e7b9e75" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../primitive.f32#method.copysign&quot;&gt;&lt;code&gt;f32::copysign&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26bbd19c72d02740271e9c35e7a28be8dc08d048" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../primitive.f32#method.copysign&quot;&gt;&lt;code&gt;std::f32::copysign&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">この組み込みの安定化バージョンは&lt;a href=&quot;../primitive.f32#method.copysign&quot;&gt; &lt;code&gt;std::f32::copysign&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ec5cc01e5c172311009522a07ac5d183750d6d81" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../primitive.f32#method.cos&quot;&gt;&lt;code&gt;f32::cos&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61c494ecc8ddd36d321a87c24568cbae459fddb9" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../primitive.f32#method.cos&quot;&gt;&lt;code&gt;std::f32::cos&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">この組み込みの安定化バージョンは&lt;a href=&quot;../primitive.f32#method.cos&quot;&gt; &lt;code&gt;std::f32::cos&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f06ef82a78f7a4024acdcdb7d73d0d0ac173270a" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../primitive.f32#method.exp&quot;&gt;&lt;code&gt;f32::exp&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94b0a8ab3fca707be3b5a4c013197b6ace7d6752" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../primitive.f32#method.exp&quot;&gt;&lt;code&gt;std::f32::exp&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">この組み込みの安定化バージョンは&lt;a href=&quot;../primitive.f32#method.exp&quot;&gt; &lt;code&gt;std::f32::exp&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e71b674a8b3daccfabfde5a3327bc5ce0e9a7433" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../primitive.f32#method.exp2&quot;&gt;&lt;code&gt;f32::exp2&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="336a8852727ebc5c24637be3db7e37b682324956" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../primitive.f32#method.exp2&quot;&gt;&lt;code&gt;std::f32::exp2&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">この組み込みの安定化バージョンは&lt;a href=&quot;../primitive.f32#method.exp2&quot;&gt; &lt;code&gt;std::f32::exp2&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ef999425e063cf922fc52c938e7f64b251f8528a" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../primitive.f32#method.floor&quot;&gt;&lt;code&gt;f32::floor&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46e4b0f6edf39422d28e3db71bd5ccc4aa08c8f3" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../primitive.f32#method.floor&quot;&gt;&lt;code&gt;std::f32::floor&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">この組み込みの安定化バージョンは&lt;a href=&quot;../primitive.f32#method.floor&quot;&gt; &lt;code&gt;std::f32::floor&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7b4e945064f35f2cb6d90bc10c0ca36ea2ce1fc5" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../primitive.f32#method.ln&quot;&gt;&lt;code&gt;f32::ln&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c54f6e18bc6b7c8320c4a68ccd5c641025d11b6" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../primitive.f32#method.ln&quot;&gt;&lt;code&gt;std::f32::ln&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">この組み込み関数の安定化バージョンは&lt;a href=&quot;../primitive.f32#method.ln&quot;&gt; &lt;code&gt;std::f32::ln&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9f4ef290bee69ae88378d994f355ffa4fb435beb" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../primitive.f32#method.log10&quot;&gt;&lt;code&gt;f32::log10&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8fbd8555b23fb5da5a31c3691aceae539093012" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../primitive.f32#method.log10&quot;&gt;&lt;code&gt;std::f32::log10&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">この組み込みの安定化バージョンは&lt;a href=&quot;../primitive.f32#method.log10&quot;&gt; &lt;code&gt;std::f32::log10&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="47c9c0a841eaf6a6f0fa9aa6dc7785deb7fd8ac5" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../primitive.f32#method.log2&quot;&gt;&lt;code&gt;f32::log2&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="163981a463a3f186e653d8b1d906aacc60bb507a" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../primitive.f32#method.log2&quot;&gt;&lt;code&gt;std::f32::log2&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">この組み込みの安定化バージョンは&lt;a href=&quot;../primitive.f32#method.log2&quot;&gt; &lt;code&gt;std::f32::log2&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="aad71542a1a997b3c3c61f5ecfa210cbb95931d8" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../primitive.f32#method.max&quot;&gt;&lt;code&gt;f32::max&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">この組み込みの安定化バージョンは&lt;a href=&quot;../primitive.f32#method.max&quot;&gt; &lt;code&gt;f32::max&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="275c6f9b837c44f59265b27a725f706ea01e4d88" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../primitive.f32#method.min&quot;&gt;&lt;code&gt;f32::min&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">この組み込みの安定化バージョンは&lt;a href=&quot;../primitive.f32#method.min&quot;&gt; &lt;code&gt;f32::min&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8f2f31fe43255d310cae69c74b408f6410f5ded2" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../primitive.f32#method.mul_add&quot;&gt;&lt;code&gt;f32::mul_add&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37a1adc351bf8541ff50457503f42947d2223aa1" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../primitive.f32#method.mul_add&quot;&gt;&lt;code&gt;std::f32::mul_add&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">この組み込みの安定化バージョンは&lt;a href=&quot;../primitive.f32#method.mul_add&quot;&gt; &lt;code&gt;std::f32::mul_add&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="6d06b2fdd5487c383c0b421cebefc28c6a24ea36" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../primitive.f32#method.powf&quot;&gt;&lt;code&gt;f32::powf&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="824767dc22e0a666300f3bbc86838e9e982d5929" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../primitive.f32#method.powf&quot;&gt;&lt;code&gt;std::f32::powf&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">この組み込みの安定化バージョンは&lt;a href=&quot;../primitive.f32#method.powf&quot;&gt; &lt;code&gt;std::f32::powf&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e7d21f72d00e2760827f66a8c462f67a27736316" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../primitive.f32#method.powi&quot;&gt;&lt;code&gt;f32::powi&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a9c8c235c9463f3bd3c7f8d97084f0aa09a4e6b" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../primitive.f32#method.powi&quot;&gt;&lt;code&gt;std::f32::powi&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">この組み込みの安定化バージョンは&lt;a href=&quot;../primitive.f32#method.powi&quot;&gt; &lt;code&gt;std::f32::powi&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3c881538f43f115b6ccda31fbe918dd558ba56f8" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../primitive.f32#method.round&quot;&gt;&lt;code&gt;f32::round&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f7c21362121499d029cb16e6e1a0c1b3f1e8a1a" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../primitive.f32#method.round&quot;&gt;&lt;code&gt;std::f32::round&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">この組み込みの安定化バージョンは&lt;a href=&quot;../primitive.f32#method.round&quot;&gt; &lt;code&gt;std::f32::round&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="675171a011c1c0dfda9fdb538a7b419773cfeee8" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../primitive.f32#method.sin&quot;&gt;&lt;code&gt;f32::sin&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4af107006e6e31e8e831e5d5f7bf515b2e1cc7d" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../primitive.f32#method.sin&quot;&gt;&lt;code&gt;std::f32::sin&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">この組み込みの安定化バージョンは&lt;a href=&quot;../primitive.f32#method.sin&quot;&gt; &lt;code&gt;std::f32::sin&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5d0e62ce93ec102c4eead3eff69bc612612edb07" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../primitive.f32#method.sqrt&quot;&gt;&lt;code&gt;f32::sqrt&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34b79ebb4c8dc7ee3e2e853d2ae83194460b52cd" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../primitive.f32#method.sqrt&quot;&gt;&lt;code&gt;std::f32::sqrt&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">この組み込みの安定化バージョンは&lt;a href=&quot;../primitive.f32#method.sqrt&quot;&gt; &lt;code&gt;std::f32::sqrt&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5b0f76f9eba1cda2a09785fdd498932063401952" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../primitive.f32#method.trunc&quot;&gt;&lt;code&gt;f32::trunc&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c2f3efeb8ac74af1f762963525599c78dfb84b4" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../primitive.f32#method.trunc&quot;&gt;&lt;code&gt;std::f32::trunc&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">この組み込みの安定化バージョンは&lt;a href=&quot;../primitive.f32#method.trunc&quot;&gt; &lt;code&gt;std::f32::trunc&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d88a568ad8f8f15ad581e2d5ef7c8ca62ce8387a" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../primitive.f64#method.abs&quot;&gt;&lt;code&gt;f64::abs&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f50e2d709a0ab57a5af9a3d0b85809c7253cdbbe" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../primitive.f64#method.abs&quot;&gt;&lt;code&gt;std::f64::abs&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">この組み込みの安定化バージョンは&lt;a href=&quot;../primitive.f64#method.abs&quot;&gt; &lt;code&gt;std::f64::abs&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7ac445ccfe25309fd842b9fe20592468190678f7" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../primitive.f64#method.ceil&quot;&gt;&lt;code&gt;f64::ceil&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8077c0447a55f70ad3a41280e7cdad8b5a596e3" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../primitive.f64#method.ceil&quot;&gt;&lt;code&gt;std::f64::ceil&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">この組み込みの安定化バージョンは&lt;a href=&quot;../primitive.f64#method.ceil&quot;&gt; &lt;code&gt;std::f64::ceil&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d43f75605bcf4ddc2af35ee89730b68b196c9219" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../primitive.f64#method.copysign&quot;&gt;&lt;code&gt;f64::copysign&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c784852d478dc5b87ed608a83b4485e61ffaa08" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../primitive.f64#method.copysign&quot;&gt;&lt;code&gt;std::f64::copysign&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">この組み込みの安定化バージョンは&lt;a href=&quot;../primitive.f64#method.copysign&quot;&gt; &lt;code&gt;std::f64::copysign&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3550799fc1b021ace5a8f1df4ae70f43d6163e8d" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../primitive.f64#method.cos&quot;&gt;&lt;code&gt;f64::cos&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3706879950fc2f859ec3405d83c39468b3d127b" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../primitive.f64#method.cos&quot;&gt;&lt;code&gt;std::f64::cos&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">この組み込みの安定化バージョンは&lt;a href=&quot;../primitive.f64#method.cos&quot;&gt; &lt;code&gt;std::f64::cos&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="bcb9280b04f00b11f52eea8164711ab78a092d25" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../primitive.f64#method.exp&quot;&gt;&lt;code&gt;f64::exp&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fe60787bdb5a14582899986ea8a8eb5151f047a" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../primitive.f64#method.exp&quot;&gt;&lt;code&gt;std::f64::exp&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">この組み込みの安定化バージョンは&lt;a href=&quot;../primitive.f64#method.exp&quot;&gt; &lt;code&gt;std::f64::exp&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d7f04aba7f3a4beeef49c10ce9640ff19e53f34b" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../primitive.f64#method.exp2&quot;&gt;&lt;code&gt;f64::exp2&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d57c3217aae4fa0b39647c7df0a1a27ba3ce04c" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../primitive.f64#method.exp2&quot;&gt;&lt;code&gt;std::f64::exp2&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">この組み込みの安定化バージョンは&lt;a href=&quot;../primitive.f64#method.exp2&quot;&gt; &lt;code&gt;std::f64::exp2&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="fae80008b865720f6e13bfbc5cb79b02660d2353" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../primitive.f64#method.floor&quot;&gt;&lt;code&gt;f64::floor&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06ec2f6c9475943bd6d7a554d14049a4e570f218" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../primitive.f64#method.floor&quot;&gt;&lt;code&gt;std::f64::floor&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">この組み込みの安定化バージョンは&lt;a href=&quot;../primitive.f64#method.floor&quot;&gt; &lt;code&gt;std::f64::floor&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="afd11870530d9075c63b4f2c171a0c02c8ef5bd2" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../primitive.f64#method.ln&quot;&gt;&lt;code&gt;f64::ln&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95c322d0525dc747c93c991f848c51c52ac90096" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../primitive.f64#method.ln&quot;&gt;&lt;code&gt;std::f64::ln&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">この組み込み関数の安定化バージョンは&lt;a href=&quot;../primitive.f64#method.ln&quot;&gt; &lt;code&gt;std::f64::ln&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="6a849c91cc9020bd1712dfc308a1d7d29fd8face" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../primitive.f64#method.log10&quot;&gt;&lt;code&gt;f64::log10&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85342dac467b551f64948da385b26bae5ec304e2" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../primitive.f64#method.log10&quot;&gt;&lt;code&gt;std::f64::log10&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">この組み込みの安定化バージョンは&lt;a href=&quot;../primitive.f64#method.log10&quot;&gt; &lt;code&gt;std::f64::log10&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9055c0969c2b78cf9771c996a47a48e0769baeb7" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../primitive.f64#method.log2&quot;&gt;&lt;code&gt;f64::log2&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1fcf5615e4f3f284291f587c194c0ee80f02e1b" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../primitive.f64#method.log2&quot;&gt;&lt;code&gt;std::f64::log2&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">この組み込みの安定化バージョンは&lt;a href=&quot;../primitive.f64#method.log2&quot;&gt; &lt;code&gt;std::f64::log2&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a33d40ec03fc6fd7670da5d91bb3dff1514508d8" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../primitive.f64#method.max&quot;&gt;&lt;code&gt;f64::max&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">この組み込みの安定化バージョンは&lt;a href=&quot;../primitive.f64#method.max&quot;&gt; &lt;code&gt;f64::max&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5c5caceb4a4959b387b99fbf4eb4112cfa719de9" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../primitive.f64#method.min&quot;&gt;&lt;code&gt;f64::min&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">この組み込みの安定化バージョンは&lt;a href=&quot;../primitive.f64#method.min&quot;&gt; &lt;code&gt;f64::min&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="518adc096d165e8f401829826bfaabd640d9a726" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../primitive.f64#method.mul_add&quot;&gt;&lt;code&gt;f64::mul_add&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="184af9c54cafa84b2f1da9d8430a1cc45e2501b8" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../primitive.f64#method.mul_add&quot;&gt;&lt;code&gt;std::f64::mul_add&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">この組み込みの安定化バージョンは&lt;a href=&quot;../primitive.f64#method.mul_add&quot;&gt; &lt;code&gt;std::f64::mul_add&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1cdfbf12432c22c607219d187794a3b529a7e2e0" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../primitive.f64#method.powf&quot;&gt;&lt;code&gt;f64::powf&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8a62ab1447e5a688dfc2804caf90414ec922c3e" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../primitive.f64#method.powf&quot;&gt;&lt;code&gt;std::f64::powf&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">この組み込みの安定化バージョンは&lt;a href=&quot;../primitive.f64#method.powf&quot;&gt; &lt;code&gt;std::f64::powf&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8d54daeba51c0c9cfed548b84a0682e9821fb0b6" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../primitive.f64#method.powi&quot;&gt;&lt;code&gt;f64::powi&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53fa85dcefba2eba944e099df5e0b7568320b594" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../primitive.f64#method.powi&quot;&gt;&lt;code&gt;std::f64::powi&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">この組み込みの安定化バージョンは&lt;a href=&quot;../primitive.f64#method.powi&quot;&gt; &lt;code&gt;std::f64::powi&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="aa845dfec19ebaf2ac42966a984b43ad55a0ddad" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../primitive.f64#method.round&quot;&gt;&lt;code&gt;f64::round&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab11dcc6899cdf3c196ec2500a4f98d80cd92c0f" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../primitive.f64#method.round&quot;&gt;&lt;code&gt;std::f64::round&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">この組み込みの安定化バージョンは&lt;a href=&quot;../primitive.f64#method.round&quot;&gt; &lt;code&gt;std::f64::round&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e47e25508412a5764ef644028828d65890164d90" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../primitive.f64#method.sin&quot;&gt;&lt;code&gt;f64::sin&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbc17db1c9e9aeccadbae543736abc641bf19581" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../primitive.f64#method.sin&quot;&gt;&lt;code&gt;std::f64::sin&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">この組み込みの安定化バージョンは&lt;a href=&quot;../primitive.f64#method.sin&quot;&gt; &lt;code&gt;std::f64::sin&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="aab8fda9ab2f4c6fd89c1ca7b171ffb239f10245" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../primitive.f64#method.sqrt&quot;&gt;&lt;code&gt;f64::sqrt&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9259a474b9633d2c178bcfa8945b9cf932f9b62" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../primitive.f64#method.sqrt&quot;&gt;&lt;code&gt;std::f64::sqrt&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">この組み込みの安定化バージョンは&lt;a href=&quot;../primitive.f64#method.sqrt&quot;&gt; &lt;code&gt;std::f64::sqrt&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="bcd69b9cb458bcc7c40b2d8d643f01b68bc057b5" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../primitive.f64#method.trunc&quot;&gt;&lt;code&gt;f64::trunc&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09d46fbb4d6dd94cb20b274b64fb45bedd897ee1" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../primitive.f64#method.trunc&quot;&gt;&lt;code&gt;std::f64::trunc&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">この組み込みの安定化バージョンは&lt;a href=&quot;../primitive.f64#method.trunc&quot;&gt; &lt;code&gt;std::f64::trunc&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e24ba042f8ed9a32e5152ef40108b6331e9ff075" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../primitive.pointer#method.offset&quot;&gt;&lt;code&gt;std::pointer::offset&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この組み込み関数の安定化バージョンは、&lt;a href=&quot;../primitive.pointer#method.offset&quot;&gt; &lt;code&gt;std::pointer::offset&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="a8ef8497ee38f892bb72694c3c391e01cf452f3c" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../primitive.pointer#method.wrapping_offset&quot;&gt;&lt;code&gt;std::pointer::wrapping_offset&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この組み込み関数の安定化バージョンは、&lt;a href=&quot;../primitive.pointer#method.wrapping_offset&quot;&gt; &lt;code&gt;std::pointer::wrapping_offset&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="93a878abfa4b4b05965b5ed62c9134a4b23816af" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../process/fn.abort&quot;&gt;&lt;code&gt;std::process::abort&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">この組み込み関数の安定化バージョンは&lt;a href=&quot;../process/fn.abort&quot;&gt; &lt;code&gt;std::process::abort&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f777a2d25d61f2a8a030aed5ab4e20e176d153a8" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../ptr/fn.read_volatile&quot;&gt;&lt;code&gt;core::ptr::read_volatile&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この組み込みの安定化バージョンは&lt;a href=&quot;../ptr/fn.read_volatile&quot;&gt; &lt;code&gt;core::ptr::read_volatile&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="dc0344746e9b397b268af814908260e075e04e91" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../ptr/fn.read_volatile&quot;&gt;&lt;code&gt;crate::ptr::read_volatile&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この組み込みの安定化バージョンは&lt;a href=&quot;../ptr/fn.read_volatile&quot;&gt; &lt;code&gt;crate::ptr::read_volatile&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="05ad03e9160cb2408f7bd5aa45c03727935da29f" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../ptr/fn.write&quot;&gt;&lt;code&gt;core::ptr::write&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この組み込みの安定化バージョンは&lt;a href=&quot;../ptr/fn.write&quot;&gt; &lt;code&gt;core::ptr::write&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="118ab008d64be2589235ff02dc721d1434d90f79" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../ptr/fn.write&quot;&gt;&lt;code&gt;crate::ptr::write&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この組み込みの安定化バージョンは&lt;a href=&quot;../ptr/fn.write&quot;&gt; &lt;code&gt;crate::ptr::write&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="aac108773792d7b27741d0ad608d7eda680fdf09" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../ptr/fn.write_volatile&quot;&gt;&lt;code&gt;core::ptr::write_volatile&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この組み込みの安定化バージョンは&lt;a href=&quot;../ptr/fn.write_volatile&quot;&gt; &lt;code&gt;core::ptr::write_volatile&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="70902b9a0728e1e3dbaf882574f3b031e91654e0" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;../ptr/fn.write_volatile&quot;&gt;&lt;code&gt;crate::ptr::write_volatile&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この組み込みの安定化バージョンは&lt;a href=&quot;../ptr/fn.write_volatile&quot;&gt; &lt;code&gt;crate::ptr::write_volatile&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="625b254ad12639bd7cf3b4b8d18b0e6a86ce6669" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;fn.needs_drop&quot;&gt;&lt;code&gt;needs_drop&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この組み込みの安定化バージョンは&lt;a href=&quot;fn.needs_drop&quot;&gt; &lt;code&gt;needs_drop&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="4decf20d903cd057fdbbe638ed8d8e3f26c756a4" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;fn.size_of&quot;&gt;&lt;code&gt;size_of&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この組み込み関数の安定化バージョンは&lt;a href=&quot;fn.size_of&quot;&gt; &lt;code&gt;size_of&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="e4c9dc52f1e3d1631dde7d53032bcc39a6df9f72" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is &lt;a href=&quot;fn.size_of_val&quot;&gt;&lt;code&gt;size_of_val&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この組み込み関数の安定化バージョンは&lt;a href=&quot;fn.size_of_val&quot;&gt; &lt;code&gt;size_of_val&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="58429d40c9c7f24b0a6d088073711682d0c11242" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is available in &lt;a href=&quot;../sync/atomic/fn.compiler_fence&quot;&gt;&lt;code&gt;atomic::compiler_fence&lt;/code&gt;&lt;/a&gt; by passing &lt;a href=&quot;../sync/atomic/enum.ordering#variant.AcqRel&quot;&gt;&lt;code&gt;Ordering::AcqRel&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;.</source>
          <target state="translated">この固有の安定したバージョンが利用可能である&lt;a href=&quot;../sync/atomic/fn.compiler_fence&quot;&gt; &lt;code&gt;atomic::compiler_fence&lt;/code&gt; &lt;/a&gt;渡すことによって、&lt;a href=&quot;../sync/atomic/enum.ordering#variant.AcqRel&quot;&gt; &lt;code&gt;Ordering::AcqRel&lt;/code&gt; &lt;/a&gt;として &lt;code&gt;order&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5311916c06b10b8c928d0abda98be268ace4e6d6" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is available in &lt;a href=&quot;../sync/atomic/fn.compiler_fence&quot;&gt;&lt;code&gt;atomic::compiler_fence&lt;/code&gt;&lt;/a&gt; by passing &lt;a href=&quot;../sync/atomic/enum.ordering#variant.Acquire&quot;&gt;&lt;code&gt;Ordering::Acquire&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;.</source>
          <target state="translated">この組み込み関数の安定化バージョンは、&lt;a href=&quot;../sync/atomic/enum.ordering#variant.Acquire&quot;&gt; &lt;code&gt;Ordering::Acquire&lt;/code&gt; &lt;/a&gt;を &lt;code&gt;order&lt;/code&gt; として渡すことで&lt;a href=&quot;../sync/atomic/fn.compiler_fence&quot;&gt; &lt;code&gt;atomic::compiler_fence&lt;/code&gt; &lt;/a&gt;使用できます。</target>
        </trans-unit>
        <trans-unit id="3081645830dba10410e4d31cc6a792e5fa76abfc" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is available in &lt;a href=&quot;../sync/atomic/fn.compiler_fence&quot;&gt;&lt;code&gt;atomic::compiler_fence&lt;/code&gt;&lt;/a&gt; by passing &lt;a href=&quot;../sync/atomic/enum.ordering#variant.Release&quot;&gt;&lt;code&gt;Ordering::Release&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;.</source>
          <target state="translated">この組み込み関数の安定化バージョンは、&lt;a href=&quot;../sync/atomic/enum.ordering#variant.Release&quot;&gt; &lt;code&gt;Ordering::Release&lt;/code&gt; &lt;/a&gt;を &lt;code&gt;order&lt;/code&gt; として渡すことにより、&lt;a href=&quot;../sync/atomic/fn.compiler_fence&quot;&gt; &lt;code&gt;atomic::compiler_fence&lt;/code&gt; &lt;/a&gt;使用できます。</target>
        </trans-unit>
        <trans-unit id="5e8d39a214853d9287e37063d7cab0006a733cdd" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is available in &lt;a href=&quot;../sync/atomic/fn.compiler_fence&quot;&gt;&lt;code&gt;atomic::compiler_fence&lt;/code&gt;&lt;/a&gt; by passing &lt;a href=&quot;../sync/atomic/enum.ordering#variant.SeqCst&quot;&gt;&lt;code&gt;Ordering::SeqCst&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;.</source>
          <target state="translated">この固有の安定したバージョンが利用可能である&lt;a href=&quot;../sync/atomic/fn.compiler_fence&quot;&gt; &lt;code&gt;atomic::compiler_fence&lt;/code&gt; &lt;/a&gt;渡すことによって、&lt;a href=&quot;../sync/atomic/enum.ordering#variant.SeqCst&quot;&gt; &lt;code&gt;Ordering::SeqCst&lt;/code&gt; &lt;/a&gt;として &lt;code&gt;order&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2cb2b502c2611a7e2eb731a194ab104f5f862370" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is available in &lt;a href=&quot;../sync/atomic/fn.fence&quot;&gt;&lt;code&gt;atomic::fence&lt;/code&gt;&lt;/a&gt; by passing &lt;a href=&quot;../sync/atomic/enum.ordering#variant.AcqRel&quot;&gt;&lt;code&gt;Ordering::AcqRel&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;.</source>
          <target state="translated">この固有の安定したバージョンが利用可能である&lt;a href=&quot;../sync/atomic/fn.fence&quot;&gt; &lt;code&gt;atomic::fence&lt;/code&gt; &lt;/a&gt;渡すことによって、&lt;a href=&quot;../sync/atomic/enum.ordering#variant.AcqRel&quot;&gt; &lt;code&gt;Ordering::AcqRel&lt;/code&gt; &lt;/a&gt;として &lt;code&gt;order&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="365e7e84eb752771b266d7d9e0c92f84d3398fe0" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is available in &lt;a href=&quot;../sync/atomic/fn.fence&quot;&gt;&lt;code&gt;atomic::fence&lt;/code&gt;&lt;/a&gt; by passing &lt;a href=&quot;../sync/atomic/enum.ordering#variant.Acquire&quot;&gt;&lt;code&gt;Ordering::Acquire&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;.</source>
          <target state="translated">この組み込み関数の安定化バージョンは、&lt;a href=&quot;../sync/atomic/enum.ordering#variant.Acquire&quot;&gt; &lt;code&gt;Ordering::Acquire&lt;/code&gt; &lt;/a&gt;を &lt;code&gt;order&lt;/code&gt; として渡すことで&lt;a href=&quot;../sync/atomic/fn.fence&quot;&gt; &lt;code&gt;atomic::fence&lt;/code&gt; &lt;/a&gt;使用できます。</target>
        </trans-unit>
        <trans-unit id="7f323b62e22f70b85a5b00e81ad1dd75f18bb93e" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is available in &lt;a href=&quot;../sync/atomic/fn.fence&quot;&gt;&lt;code&gt;atomic::fence&lt;/code&gt;&lt;/a&gt; by passing &lt;a href=&quot;../sync/atomic/enum.ordering#variant.Release&quot;&gt;&lt;code&gt;Ordering::Release&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;.</source>
          <target state="translated">この組み込み関数の安定化バージョンは、&lt;a href=&quot;../sync/atomic/enum.ordering#variant.Release&quot;&gt; &lt;code&gt;Ordering::Release&lt;/code&gt; &lt;/a&gt;を &lt;code&gt;order&lt;/code&gt; として渡すことで&lt;a href=&quot;../sync/atomic/fn.fence&quot;&gt; &lt;code&gt;atomic::fence&lt;/code&gt; &lt;/a&gt;使用できます。</target>
        </trans-unit>
        <trans-unit id="c1bdf72440b67a4b60d0cb051b353e1a1e5f17d8" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is available in &lt;a href=&quot;../sync/atomic/fn.fence&quot;&gt;&lt;code&gt;atomic::fence&lt;/code&gt;&lt;/a&gt; by passing &lt;a href=&quot;../sync/atomic/enum.ordering#variant.SeqCst&quot;&gt;&lt;code&gt;Ordering::SeqCst&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;.</source>
          <target state="translated">この固有の安定したバージョンが利用可能である&lt;a href=&quot;../sync/atomic/fn.fence&quot;&gt; &lt;code&gt;atomic::fence&lt;/code&gt; &lt;/a&gt;渡すことによって、&lt;a href=&quot;../sync/atomic/enum.ordering#variant.SeqCst&quot;&gt; &lt;code&gt;Ordering::SeqCst&lt;/code&gt; &lt;/a&gt;として &lt;code&gt;order&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="dfb231858cd4689ec5627a23d29186ff8d439dec" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is available on the &lt;a href=&quot;../sync/atomic/index&quot;&gt;&lt;code&gt;atomic&lt;/code&gt;&lt;/a&gt; signed integer types via the &lt;code&gt;fetch_max&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering#variant.AcqRel&quot;&gt;&lt;code&gt;Ordering::AcqRel&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomici32#method.fetch_max&quot;&gt;&lt;code&gt;AtomicI32::fetch_max&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この固有の安定化されたバージョンが利用可能である&lt;a href=&quot;../sync/atomic/index&quot;&gt; &lt;code&gt;atomic&lt;/code&gt; &lt;/a&gt;を介して、符号付き整数型 &lt;code&gt;fetch_max&lt;/code&gt; 通すことによって方法&lt;a href=&quot;../sync/atomic/enum.ordering#variant.AcqRel&quot;&gt; &lt;code&gt;Ordering::AcqRel&lt;/code&gt; &lt;/a&gt;ように &lt;code&gt;order&lt;/code&gt; 。たとえば、&lt;a href=&quot;../sync/atomic/struct.atomici32#method.fetch_max&quot;&gt; &lt;code&gt;AtomicI32::fetch_max&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="ba45a4ad89ca37d142fe08556abef04250897691" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is available on the &lt;a href=&quot;../sync/atomic/index&quot;&gt;&lt;code&gt;atomic&lt;/code&gt;&lt;/a&gt; signed integer types via the &lt;code&gt;fetch_max&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering#variant.Acquire&quot;&gt;&lt;code&gt;Ordering::Acquire&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomici32#method.fetch_max&quot;&gt;&lt;code&gt;AtomicI32::fetch_max&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この組み込み型の安定化バージョンは、&lt;a href=&quot;../sync/atomic/enum.ordering#variant.Acquire&quot;&gt; &lt;code&gt;Ordering::Acquire&lt;/code&gt; &lt;/a&gt;を &lt;code&gt;order&lt;/code&gt; として渡すことにより、 &lt;code&gt;fetch_max&lt;/code&gt; メソッドを介して&lt;a href=&quot;../sync/atomic/index&quot;&gt; &lt;code&gt;atomic&lt;/code&gt; &lt;/a&gt;符号付き整数型で使用できます。たとえば、&lt;a href=&quot;../sync/atomic/struct.atomici32#method.fetch_max&quot;&gt; &lt;code&gt;AtomicI32::fetch_max&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="f793986afe8163ac71ccb416509b9ce1b93b28a7" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is available on the &lt;a href=&quot;../sync/atomic/index&quot;&gt;&lt;code&gt;atomic&lt;/code&gt;&lt;/a&gt; signed integer types via the &lt;code&gt;fetch_max&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering#variant.Relaxed&quot;&gt;&lt;code&gt;Ordering::Relaxed&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomici32#method.fetch_max&quot;&gt;&lt;code&gt;AtomicI32::fetch_max&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この組み込み型の安定化バージョンは、&lt;a href=&quot;../sync/atomic/enum.ordering#variant.Relaxed&quot;&gt; &lt;code&gt;Ordering::Relaxed&lt;/code&gt; &lt;/a&gt;を &lt;code&gt;order&lt;/code&gt; として渡すことにより、 &lt;code&gt;fetch_max&lt;/code&gt; メソッドを介して&lt;a href=&quot;../sync/atomic/index&quot;&gt; &lt;code&gt;atomic&lt;/code&gt; &lt;/a&gt;符号付き整数型で使用できます。たとえば、&lt;a href=&quot;../sync/atomic/struct.atomici32#method.fetch_max&quot;&gt; &lt;code&gt;AtomicI32::fetch_max&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="11f793b659028e7642830af52530c7830ca89493" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is available on the &lt;a href=&quot;../sync/atomic/index&quot;&gt;&lt;code&gt;atomic&lt;/code&gt;&lt;/a&gt; signed integer types via the &lt;code&gt;fetch_max&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering#variant.Release&quot;&gt;&lt;code&gt;Ordering::Release&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomici32#method.fetch_max&quot;&gt;&lt;code&gt;AtomicI32::fetch_max&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この組み込み型の安定化バージョンは、&lt;a href=&quot;../sync/atomic/enum.ordering#variant.Release&quot;&gt; &lt;code&gt;Ordering::Release&lt;/code&gt; &lt;/a&gt;を &lt;code&gt;order&lt;/code&gt; として渡すことにより、 &lt;code&gt;fetch_max&lt;/code&gt; メソッドを介して&lt;a href=&quot;../sync/atomic/index&quot;&gt; &lt;code&gt;atomic&lt;/code&gt; &lt;/a&gt;符号付き整数型で使用できます。たとえば、&lt;a href=&quot;../sync/atomic/struct.atomici32#method.fetch_max&quot;&gt; &lt;code&gt;AtomicI32::fetch_max&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="49aafe40a8bc9c4c0d4799be407063a6be2f80b8" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is available on the &lt;a href=&quot;../sync/atomic/index&quot;&gt;&lt;code&gt;atomic&lt;/code&gt;&lt;/a&gt; signed integer types via the &lt;code&gt;fetch_max&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering#variant.SeqCst&quot;&gt;&lt;code&gt;Ordering::SeqCst&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomici32#method.fetch_max&quot;&gt;&lt;code&gt;AtomicI32::fetch_max&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この固有の安定化されたバージョンが利用可能である&lt;a href=&quot;../sync/atomic/index&quot;&gt; &lt;code&gt;atomic&lt;/code&gt; &lt;/a&gt;を介して、符号付き整数型 &lt;code&gt;fetch_max&lt;/code&gt; 渡すことによって方法&lt;a href=&quot;../sync/atomic/enum.ordering#variant.SeqCst&quot;&gt; &lt;code&gt;Ordering::SeqCst&lt;/code&gt; &lt;/a&gt;ように &lt;code&gt;order&lt;/code&gt; 。たとえば、&lt;a href=&quot;../sync/atomic/struct.atomici32#method.fetch_max&quot;&gt; &lt;code&gt;AtomicI32::fetch_max&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="d1036b996bdd682cf46fc64099bdeb270500f551" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is available on the &lt;a href=&quot;../sync/atomic/index&quot;&gt;&lt;code&gt;atomic&lt;/code&gt;&lt;/a&gt; signed integer types via the &lt;code&gt;fetch_min&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering#variant.AcqRel&quot;&gt;&lt;code&gt;Ordering::AcqRel&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomici32#method.fetch_min&quot;&gt;&lt;code&gt;AtomicI32::fetch_min&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この固有の安定化されたバージョンが利用可能である&lt;a href=&quot;../sync/atomic/index&quot;&gt; &lt;code&gt;atomic&lt;/code&gt; &lt;/a&gt;を介して、符号付き整数型 &lt;code&gt;fetch_min&lt;/code&gt; 通すことによって方法&lt;a href=&quot;../sync/atomic/enum.ordering#variant.AcqRel&quot;&gt; &lt;code&gt;Ordering::AcqRel&lt;/code&gt; &lt;/a&gt;ように &lt;code&gt;order&lt;/code&gt; 。たとえば、&lt;a href=&quot;../sync/atomic/struct.atomici32#method.fetch_min&quot;&gt; &lt;code&gt;AtomicI32::fetch_min&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="cb8002438bcf3c0d48b47c6879f85d416ab04436" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is available on the &lt;a href=&quot;../sync/atomic/index&quot;&gt;&lt;code&gt;atomic&lt;/code&gt;&lt;/a&gt; signed integer types via the &lt;code&gt;fetch_min&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering#variant.Acquire&quot;&gt;&lt;code&gt;Ordering::Acquire&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomici32#method.fetch_min&quot;&gt;&lt;code&gt;AtomicI32::fetch_min&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この組み込み型の安定化バージョンは、&lt;a href=&quot;../sync/atomic/enum.ordering#variant.Acquire&quot;&gt; &lt;code&gt;Ordering::Acquire&lt;/code&gt; &lt;/a&gt;を &lt;code&gt;order&lt;/code&gt; として渡すことにより、 &lt;code&gt;fetch_min&lt;/code&gt; メソッドを介して&lt;a href=&quot;../sync/atomic/index&quot;&gt; &lt;code&gt;atomic&lt;/code&gt; &lt;/a&gt;符号付き整数型で使用できます。たとえば、&lt;a href=&quot;../sync/atomic/struct.atomici32#method.fetch_min&quot;&gt; &lt;code&gt;AtomicI32::fetch_min&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="0a7b18952940b9b8182e6a6746cc4d6878e30de3" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is available on the &lt;a href=&quot;../sync/atomic/index&quot;&gt;&lt;code&gt;atomic&lt;/code&gt;&lt;/a&gt; signed integer types via the &lt;code&gt;fetch_min&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering#variant.Relaxed&quot;&gt;&lt;code&gt;Ordering::Relaxed&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomici32#method.fetch_min&quot;&gt;&lt;code&gt;AtomicI32::fetch_min&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この組み込み型の安定化バージョンは、&lt;a href=&quot;../sync/atomic/enum.ordering#variant.Relaxed&quot;&gt; &lt;code&gt;Ordering::Relaxed&lt;/code&gt; &lt;/a&gt;を &lt;code&gt;order&lt;/code&gt; として渡すことにより、 &lt;code&gt;fetch_min&lt;/code&gt; メソッドを介して&lt;a href=&quot;../sync/atomic/index&quot;&gt; &lt;code&gt;atomic&lt;/code&gt; &lt;/a&gt;符号付き整数型で使用できます。たとえば、&lt;a href=&quot;../sync/atomic/struct.atomici32#method.fetch_min&quot;&gt; &lt;code&gt;AtomicI32::fetch_min&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="b2bf12a3e1dda34bbe1170fb23b2c7e3980fa2e2" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is available on the &lt;a href=&quot;../sync/atomic/index&quot;&gt;&lt;code&gt;atomic&lt;/code&gt;&lt;/a&gt; signed integer types via the &lt;code&gt;fetch_min&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering#variant.Release&quot;&gt;&lt;code&gt;Ordering::Release&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomici32#method.fetch_min&quot;&gt;&lt;code&gt;AtomicI32::fetch_min&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この組み込み型の安定化バージョンは、&lt;a href=&quot;../sync/atomic/enum.ordering#variant.Release&quot;&gt; &lt;code&gt;Ordering::Release&lt;/code&gt; &lt;/a&gt;を &lt;code&gt;order&lt;/code&gt; として渡すことにより、 &lt;code&gt;fetch_min&lt;/code&gt; メソッドを介して&lt;a href=&quot;../sync/atomic/index&quot;&gt; &lt;code&gt;atomic&lt;/code&gt; &lt;/a&gt;符号付き整数型で使用できます。たとえば、&lt;a href=&quot;../sync/atomic/struct.atomici32#method.fetch_min&quot;&gt; &lt;code&gt;AtomicI32::fetch_min&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="e9e3416a187e1174aeae58104e7efc1c7ee03ff6" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is available on the &lt;a href=&quot;../sync/atomic/index&quot;&gt;&lt;code&gt;atomic&lt;/code&gt;&lt;/a&gt; signed integer types via the &lt;code&gt;fetch_min&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering#variant.SeqCst&quot;&gt;&lt;code&gt;Ordering::SeqCst&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomici32#method.fetch_min&quot;&gt;&lt;code&gt;AtomicI32::fetch_min&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この固有の安定化されたバージョンが利用可能である&lt;a href=&quot;../sync/atomic/index&quot;&gt; &lt;code&gt;atomic&lt;/code&gt; &lt;/a&gt;を介して、符号付き整数型 &lt;code&gt;fetch_min&lt;/code&gt; 渡すことによって方法&lt;a href=&quot;../sync/atomic/enum.ordering#variant.SeqCst&quot;&gt; &lt;code&gt;Ordering::SeqCst&lt;/code&gt; &lt;/a&gt;ように &lt;code&gt;order&lt;/code&gt; 。たとえば、&lt;a href=&quot;../sync/atomic/struct.atomici32#method.fetch_min&quot;&gt; &lt;code&gt;AtomicI32::fetch_min&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="17459feca9539df018355d8750621e9dbfee25c8" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is available on the &lt;a href=&quot;../sync/atomic/index&quot;&gt;&lt;code&gt;atomic&lt;/code&gt;&lt;/a&gt; types via the &lt;code&gt;compare_exchange&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering#variant.AcqRel&quot;&gt;&lt;code&gt;Ordering::AcqRel&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;success&lt;/code&gt; and &lt;a href=&quot;../sync/atomic/enum.ordering#variant.Acquire&quot;&gt;&lt;code&gt;Ordering::Acquire&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;failure&lt;/code&gt; parameters. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.compare_exchange&quot;&gt;&lt;code&gt;AtomicBool::compare_exchange&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この固有の安定したバージョンで利用可能である&lt;a href=&quot;../sync/atomic/index&quot;&gt; &lt;code&gt;atomic&lt;/code&gt; &lt;/a&gt;を介し種類 &lt;code&gt;compare_exchange&lt;/code&gt; の渡すことで、法&lt;a href=&quot;../sync/atomic/enum.ordering#variant.AcqRel&quot;&gt; &lt;code&gt;Ordering::AcqRel&lt;/code&gt; &lt;/a&gt;として &lt;code&gt;success&lt;/code&gt; し、&lt;a href=&quot;../sync/atomic/enum.ordering#variant.Acquire&quot;&gt; &lt;code&gt;Ordering::Acquire&lt;/code&gt; &lt;/a&gt;など &lt;code&gt;failure&lt;/code&gt; パラメータ。たとえば、&lt;a href=&quot;../sync/atomic/struct.atomicbool#method.compare_exchange&quot;&gt; &lt;code&gt;AtomicBool::compare_exchange&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="84bb6ebc113b49007d6fcfdfafa151470c4d97fb" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is available on the &lt;a href=&quot;../sync/atomic/index&quot;&gt;&lt;code&gt;atomic&lt;/code&gt;&lt;/a&gt; types via the &lt;code&gt;compare_exchange&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering#variant.AcqRel&quot;&gt;&lt;code&gt;Ordering::AcqRel&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;success&lt;/code&gt; and &lt;a href=&quot;../sync/atomic/enum.ordering#variant.Relaxed&quot;&gt;&lt;code&gt;Ordering::Relaxed&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;failure&lt;/code&gt; parameters. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.compare_exchange&quot;&gt;&lt;code&gt;AtomicBool::compare_exchange&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この固有の安定したバージョンが利用可能である&lt;a href=&quot;../sync/atomic/index&quot;&gt; &lt;code&gt;atomic&lt;/code&gt; &lt;/a&gt;を介した種類 &lt;code&gt;compare_exchange&lt;/code&gt; の渡すことにより、法&lt;a href=&quot;../sync/atomic/enum.ordering#variant.AcqRel&quot;&gt; &lt;code&gt;Ordering::AcqRel&lt;/code&gt; &lt;/a&gt;として &lt;code&gt;success&lt;/code&gt; し、&lt;a href=&quot;../sync/atomic/enum.ordering#variant.Relaxed&quot;&gt; &lt;code&gt;Ordering::Relaxed&lt;/code&gt; &lt;/a&gt;として &lt;code&gt;failure&lt;/code&gt; パラメータ。たとえば、&lt;a href=&quot;../sync/atomic/struct.atomicbool#method.compare_exchange&quot;&gt; &lt;code&gt;AtomicBool::compare_exchange&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b287de0c6ccb4c255ae592a699ddf51d510069e0" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is available on the &lt;a href=&quot;../sync/atomic/index&quot;&gt;&lt;code&gt;atomic&lt;/code&gt;&lt;/a&gt; types via the &lt;code&gt;compare_exchange&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering#variant.Acquire&quot;&gt;&lt;code&gt;Ordering::Acquire&lt;/code&gt;&lt;/a&gt; as both the &lt;code&gt;success&lt;/code&gt; and &lt;code&gt;failure&lt;/code&gt; parameters. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.compare_exchange&quot;&gt;&lt;code&gt;AtomicBool::compare_exchange&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この組み込み関数の安定化バージョンは、 &lt;code&gt;success&lt;/code&gt; パラメーターと &lt;code&gt;failure&lt;/code&gt; パラメーターの両方として&lt;a href=&quot;../sync/atomic/enum.ordering#variant.Acquire&quot;&gt; &lt;code&gt;Ordering::Acquire&lt;/code&gt; &lt;/a&gt;を渡すことにより、 &lt;code&gt;compare_exchange&lt;/code&gt; メソッドを介して&lt;a href=&quot;../sync/atomic/index&quot;&gt; &lt;code&gt;atomic&lt;/code&gt; &lt;/a&gt;タイプで使用できます。たとえば、&lt;a href=&quot;../sync/atomic/struct.atomicbool#method.compare_exchange&quot;&gt; &lt;code&gt;AtomicBool::compare_exchange&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="dc152c646978658d528a198a309e91d74e54a326" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is available on the &lt;a href=&quot;../sync/atomic/index&quot;&gt;&lt;code&gt;atomic&lt;/code&gt;&lt;/a&gt; types via the &lt;code&gt;compare_exchange&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering#variant.Acquire&quot;&gt;&lt;code&gt;Ordering::Acquire&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;success&lt;/code&gt; and &lt;a href=&quot;../sync/atomic/enum.ordering#variant.Relaxed&quot;&gt;&lt;code&gt;Ordering::Relaxed&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;failure&lt;/code&gt; parameters. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.compare_exchange&quot;&gt;&lt;code&gt;AtomicBool::compare_exchange&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この固有の安定したバージョンが利用可能である&lt;a href=&quot;../sync/atomic/index&quot;&gt; &lt;code&gt;atomic&lt;/code&gt; &lt;/a&gt;を介した種類 &lt;code&gt;compare_exchange&lt;/code&gt; の渡すことにより、法&lt;a href=&quot;../sync/atomic/enum.ordering#variant.Acquire&quot;&gt; &lt;code&gt;Ordering::Acquire&lt;/code&gt; &lt;/a&gt;て &lt;code&gt;success&lt;/code&gt; し、&lt;a href=&quot;../sync/atomic/enum.ordering#variant.Relaxed&quot;&gt; &lt;code&gt;Ordering::Relaxed&lt;/code&gt; &lt;/a&gt;として &lt;code&gt;failure&lt;/code&gt; パラメータ。たとえば、&lt;a href=&quot;../sync/atomic/struct.atomicbool#method.compare_exchange&quot;&gt; &lt;code&gt;AtomicBool::compare_exchange&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2c1db276c3b3b4fd7ceb4e380bed1da5745f7ffc" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is available on the &lt;a href=&quot;../sync/atomic/index&quot;&gt;&lt;code&gt;atomic&lt;/code&gt;&lt;/a&gt; types via the &lt;code&gt;compare_exchange&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering#variant.Relaxed&quot;&gt;&lt;code&gt;Ordering::Relaxed&lt;/code&gt;&lt;/a&gt; as both the &lt;code&gt;success&lt;/code&gt; and &lt;code&gt;failure&lt;/code&gt; parameters. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.compare_exchange&quot;&gt;&lt;code&gt;AtomicBool::compare_exchange&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この組み込み関数の安定化バージョンは、 &lt;code&gt;success&lt;/code&gt; パラメーターと &lt;code&gt;failure&lt;/code&gt; パラメーターの両方として&lt;a href=&quot;../sync/atomic/enum.ordering#variant.Relaxed&quot;&gt; &lt;code&gt;Ordering::Relaxed&lt;/code&gt; &lt;/a&gt;を渡すことにより、 &lt;code&gt;compare_exchange&lt;/code&gt; メソッドを介して&lt;a href=&quot;../sync/atomic/index&quot;&gt; &lt;code&gt;atomic&lt;/code&gt; &lt;/a&gt;タイプで使用できます。たとえば、&lt;a href=&quot;../sync/atomic/struct.atomicbool#method.compare_exchange&quot;&gt; &lt;code&gt;AtomicBool::compare_exchange&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="951c50a3c5ccad37a2e3fca1e84b631f4373b483" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is available on the &lt;a href=&quot;../sync/atomic/index&quot;&gt;&lt;code&gt;atomic&lt;/code&gt;&lt;/a&gt; types via the &lt;code&gt;compare_exchange&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering#variant.Release&quot;&gt;&lt;code&gt;Ordering::Release&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;success&lt;/code&gt; and &lt;a href=&quot;../sync/atomic/enum.ordering#variant.Relaxed&quot;&gt;&lt;code&gt;Ordering::Relaxed&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;failure&lt;/code&gt; parameters. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.compare_exchange&quot;&gt;&lt;code&gt;AtomicBool::compare_exchange&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この固有の安定したバージョンが利用可能である&lt;a href=&quot;../sync/atomic/index&quot;&gt; &lt;code&gt;atomic&lt;/code&gt; &lt;/a&gt;を介した種類 &lt;code&gt;compare_exchange&lt;/code&gt; の渡すことにより、法&lt;a href=&quot;../sync/atomic/enum.ordering#variant.Release&quot;&gt; &lt;code&gt;Ordering::Release&lt;/code&gt; &lt;/a&gt;として &lt;code&gt;success&lt;/code&gt; し、&lt;a href=&quot;../sync/atomic/enum.ordering#variant.Relaxed&quot;&gt; &lt;code&gt;Ordering::Relaxed&lt;/code&gt; &lt;/a&gt;として &lt;code&gt;failure&lt;/code&gt; パラメータ。たとえば、&lt;a href=&quot;../sync/atomic/struct.atomicbool#method.compare_exchange&quot;&gt; &lt;code&gt;AtomicBool::compare_exchange&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="128d2037df6a05cf07d2834b7655c68820b3bd26" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is available on the &lt;a href=&quot;../sync/atomic/index&quot;&gt;&lt;code&gt;atomic&lt;/code&gt;&lt;/a&gt; types via the &lt;code&gt;compare_exchange&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering#variant.SeqCst&quot;&gt;&lt;code&gt;Ordering::SeqCst&lt;/code&gt;&lt;/a&gt; as both the &lt;code&gt;success&lt;/code&gt; and &lt;code&gt;failure&lt;/code&gt; parameters. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.compare_exchange&quot;&gt;&lt;code&gt;AtomicBool::compare_exchange&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この組み込み関数の安定化バージョンは、 &lt;code&gt;success&lt;/code&gt; パラメーターと &lt;code&gt;failure&lt;/code&gt; パラメーターの両方として&lt;a href=&quot;../sync/atomic/enum.ordering#variant.SeqCst&quot;&gt; &lt;code&gt;Ordering::SeqCst&lt;/code&gt; &lt;/a&gt;を渡すことにより、 &lt;code&gt;compare_exchange&lt;/code&gt; メソッドを介して&lt;a href=&quot;../sync/atomic/index&quot;&gt; &lt;code&gt;atomic&lt;/code&gt; &lt;/a&gt;タイプで使用できます。たとえば、&lt;a href=&quot;../sync/atomic/struct.atomicbool#method.compare_exchange&quot;&gt; &lt;code&gt;AtomicBool::compare_exchange&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0ab03d58d5f671c0a0db830b6b05ae77f18309c3" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is available on the &lt;a href=&quot;../sync/atomic/index&quot;&gt;&lt;code&gt;atomic&lt;/code&gt;&lt;/a&gt; types via the &lt;code&gt;compare_exchange&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering#variant.SeqCst&quot;&gt;&lt;code&gt;Ordering::SeqCst&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;success&lt;/code&gt; and &lt;a href=&quot;../sync/atomic/enum.ordering#variant.Acquire&quot;&gt;&lt;code&gt;Ordering::Acquire&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;failure&lt;/code&gt; parameters. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.compare_exchange&quot;&gt;&lt;code&gt;AtomicBool::compare_exchange&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この固有の安定したバージョンで利用可能である&lt;a href=&quot;../sync/atomic/index&quot;&gt; &lt;code&gt;atomic&lt;/code&gt; &lt;/a&gt;を介し種類 &lt;code&gt;compare_exchange&lt;/code&gt; の渡すことで、法&lt;a href=&quot;../sync/atomic/enum.ordering#variant.SeqCst&quot;&gt; &lt;code&gt;Ordering::SeqCst&lt;/code&gt; &lt;/a&gt;として &lt;code&gt;success&lt;/code&gt; し、&lt;a href=&quot;../sync/atomic/enum.ordering#variant.Acquire&quot;&gt; &lt;code&gt;Ordering::Acquire&lt;/code&gt; &lt;/a&gt;など &lt;code&gt;failure&lt;/code&gt; パラメータ。たとえば、&lt;a href=&quot;../sync/atomic/struct.atomicbool#method.compare_exchange&quot;&gt; &lt;code&gt;AtomicBool::compare_exchange&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="88060a6c5fb7a5ab11e95c384921daa2c4d4f5bf" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is available on the &lt;a href=&quot;../sync/atomic/index&quot;&gt;&lt;code&gt;atomic&lt;/code&gt;&lt;/a&gt; types via the &lt;code&gt;compare_exchange&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering#variant.SeqCst&quot;&gt;&lt;code&gt;Ordering::SeqCst&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;success&lt;/code&gt; and &lt;a href=&quot;../sync/atomic/enum.ordering#variant.Relaxed&quot;&gt;&lt;code&gt;Ordering::Relaxed&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;failure&lt;/code&gt; parameters. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.compare_exchange&quot;&gt;&lt;code&gt;AtomicBool::compare_exchange&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この固有の安定したバージョンがで提供されて&lt;a href=&quot;../sync/atomic/index&quot;&gt; &lt;code&gt;atomic&lt;/code&gt; &lt;/a&gt;を介し種類 &lt;code&gt;compare_exchange&lt;/code&gt; の渡すことで、法&lt;a href=&quot;../sync/atomic/enum.ordering#variant.SeqCst&quot;&gt; &lt;code&gt;Ordering::SeqCst&lt;/code&gt; &lt;/a&gt;として &lt;code&gt;success&lt;/code&gt; し、&lt;a href=&quot;../sync/atomic/enum.ordering#variant.Relaxed&quot;&gt; &lt;code&gt;Ordering::Relaxed&lt;/code&gt; &lt;/a&gt;として &lt;code&gt;failure&lt;/code&gt; パラメータ。たとえば、&lt;a href=&quot;../sync/atomic/struct.atomicbool#method.compare_exchange&quot;&gt; &lt;code&gt;AtomicBool::compare_exchange&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="bd12eff27bb275374d877eb262054ae1c853f908" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is available on the &lt;a href=&quot;../sync/atomic/index&quot;&gt;&lt;code&gt;atomic&lt;/code&gt;&lt;/a&gt; types via the &lt;code&gt;compare_exchange_weak&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering#variant.AcqRel&quot;&gt;&lt;code&gt;Ordering::AcqRel&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;success&lt;/code&gt; and &lt;a href=&quot;../sync/atomic/enum.ordering#variant.Acquire&quot;&gt;&lt;code&gt;Ordering::Acquire&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;failure&lt;/code&gt; parameters. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.compare_exchange_weak&quot;&gt;&lt;code&gt;AtomicBool::compare_exchange_weak&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この固有の安定したバージョンで利用可能である&lt;a href=&quot;../sync/atomic/index&quot;&gt; &lt;code&gt;atomic&lt;/code&gt; &lt;/a&gt;を介し種類 &lt;code&gt;compare_exchange_weak&lt;/code&gt; の渡すことで、法&lt;a href=&quot;../sync/atomic/enum.ordering#variant.AcqRel&quot;&gt; &lt;code&gt;Ordering::AcqRel&lt;/code&gt; &lt;/a&gt;として &lt;code&gt;success&lt;/code&gt; し、&lt;a href=&quot;../sync/atomic/enum.ordering#variant.Acquire&quot;&gt; &lt;code&gt;Ordering::Acquire&lt;/code&gt; &lt;/a&gt;など &lt;code&gt;failure&lt;/code&gt; パラメータ。たとえば、&lt;a href=&quot;../sync/atomic/struct.atomicbool#method.compare_exchange_weak&quot;&gt; &lt;code&gt;AtomicBool::compare_exchange_weak&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="af1fc10d6447bc6c5afd961766bf358a30dcbdba" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is available on the &lt;a href=&quot;../sync/atomic/index&quot;&gt;&lt;code&gt;atomic&lt;/code&gt;&lt;/a&gt; types via the &lt;code&gt;compare_exchange_weak&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering#variant.AcqRel&quot;&gt;&lt;code&gt;Ordering::AcqRel&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;success&lt;/code&gt; and &lt;a href=&quot;../sync/atomic/enum.ordering#variant.Relaxed&quot;&gt;&lt;code&gt;Ordering::Relaxed&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;failure&lt;/code&gt; parameters. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.compare_exchange_weak&quot;&gt;&lt;code&gt;AtomicBool::compare_exchange_weak&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この固有の安定したバージョンがで提供されて&lt;a href=&quot;../sync/atomic/index&quot;&gt; &lt;code&gt;atomic&lt;/code&gt; &lt;/a&gt;を介し種類 &lt;code&gt;compare_exchange_weak&lt;/code&gt; の渡すことで、法&lt;a href=&quot;../sync/atomic/enum.ordering#variant.AcqRel&quot;&gt; &lt;code&gt;Ordering::AcqRel&lt;/code&gt; &lt;/a&gt;として &lt;code&gt;success&lt;/code&gt; し、&lt;a href=&quot;../sync/atomic/enum.ordering#variant.Relaxed&quot;&gt; &lt;code&gt;Ordering::Relaxed&lt;/code&gt; &lt;/a&gt;として &lt;code&gt;failure&lt;/code&gt; パラメータ。たとえば、&lt;a href=&quot;../sync/atomic/struct.atomicbool#method.compare_exchange_weak&quot;&gt; &lt;code&gt;AtomicBool::compare_exchange_weak&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="00f0f125817ae56a57898beaed413be79b5a5f7f" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is available on the &lt;a href=&quot;../sync/atomic/index&quot;&gt;&lt;code&gt;atomic&lt;/code&gt;&lt;/a&gt; types via the &lt;code&gt;compare_exchange_weak&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering#variant.Acquire&quot;&gt;&lt;code&gt;Ordering::Acquire&lt;/code&gt;&lt;/a&gt; as both the &lt;code&gt;success&lt;/code&gt; and &lt;code&gt;failure&lt;/code&gt; parameters. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.compare_exchange_weak&quot;&gt;&lt;code&gt;AtomicBool::compare_exchange_weak&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この組み込み関数の安定化バージョンは、 &lt;code&gt;success&lt;/code&gt; パラメーターと &lt;code&gt;failure&lt;/code&gt; パラメーターの両方として&lt;a href=&quot;../sync/atomic/enum.ordering#variant.Acquire&quot;&gt; &lt;code&gt;Ordering::Acquire&lt;/code&gt; &lt;/a&gt;を渡すことにより、 &lt;code&gt;compare_exchange_weak&lt;/code&gt; メソッドを介して&lt;a href=&quot;../sync/atomic/index&quot;&gt; &lt;code&gt;atomic&lt;/code&gt; &lt;/a&gt;タイプで使用できます。たとえば、&lt;a href=&quot;../sync/atomic/struct.atomicbool#method.compare_exchange_weak&quot;&gt; &lt;code&gt;AtomicBool::compare_exchange_weak&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5a4f22637924c144abe1815857665dade4d3c51b" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is available on the &lt;a href=&quot;../sync/atomic/index&quot;&gt;&lt;code&gt;atomic&lt;/code&gt;&lt;/a&gt; types via the &lt;code&gt;compare_exchange_weak&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering#variant.Acquire&quot;&gt;&lt;code&gt;Ordering::Acquire&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;success&lt;/code&gt; and &lt;a href=&quot;../sync/atomic/enum.ordering#variant.Relaxed&quot;&gt;&lt;code&gt;Ordering::Relaxed&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;failure&lt;/code&gt; parameters. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.compare_exchange_weak&quot;&gt;&lt;code&gt;AtomicBool::compare_exchange_weak&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この固有の安定したバージョンが利用可能である&lt;a href=&quot;../sync/atomic/index&quot;&gt; &lt;code&gt;atomic&lt;/code&gt; &lt;/a&gt;を介し種類 &lt;code&gt;compare_exchange_weak&lt;/code&gt; 渡すことによって、法&lt;a href=&quot;../sync/atomic/enum.ordering#variant.Acquire&quot;&gt; &lt;code&gt;Ordering::Acquire&lt;/code&gt; &lt;/a&gt;て &lt;code&gt;success&lt;/code&gt; し、&lt;a href=&quot;../sync/atomic/enum.ordering#variant.Relaxed&quot;&gt; &lt;code&gt;Ordering::Relaxed&lt;/code&gt; &lt;/a&gt;として &lt;code&gt;failure&lt;/code&gt; パラメータ。たとえば、&lt;a href=&quot;../sync/atomic/struct.atomicbool#method.compare_exchange_weak&quot;&gt; &lt;code&gt;AtomicBool::compare_exchange_weak&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="862ae83bdd80acbffd544e29d0952bfef39ef310" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is available on the &lt;a href=&quot;../sync/atomic/index&quot;&gt;&lt;code&gt;atomic&lt;/code&gt;&lt;/a&gt; types via the &lt;code&gt;compare_exchange_weak&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering#variant.Relaxed&quot;&gt;&lt;code&gt;Ordering::Relaxed&lt;/code&gt;&lt;/a&gt; as both the &lt;code&gt;success&lt;/code&gt; and &lt;code&gt;failure&lt;/code&gt; parameters. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.compare_exchange_weak&quot;&gt;&lt;code&gt;AtomicBool::compare_exchange_weak&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この組み込み関数の安定化バージョンは、 &lt;code&gt;success&lt;/code&gt; パラメーターと &lt;code&gt;failure&lt;/code&gt; パラメーターの両方として&lt;a href=&quot;../sync/atomic/enum.ordering#variant.Relaxed&quot;&gt; &lt;code&gt;Ordering::Relaxed&lt;/code&gt; &lt;/a&gt;を渡すことにより、 &lt;code&gt;compare_exchange_weak&lt;/code&gt; メソッドを介して&lt;a href=&quot;../sync/atomic/index&quot;&gt; &lt;code&gt;atomic&lt;/code&gt; &lt;/a&gt;タイプで使用できます。たとえば、&lt;a href=&quot;../sync/atomic/struct.atomicbool#method.compare_exchange_weak&quot;&gt; &lt;code&gt;AtomicBool::compare_exchange_weak&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="301da9988d8a43a17c9bdfe746d0d24a87f91ac5" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is available on the &lt;a href=&quot;../sync/atomic/index&quot;&gt;&lt;code&gt;atomic&lt;/code&gt;&lt;/a&gt; types via the &lt;code&gt;compare_exchange_weak&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering#variant.Release&quot;&gt;&lt;code&gt;Ordering::Release&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;success&lt;/code&gt; and &lt;a href=&quot;../sync/atomic/enum.ordering#variant.Relaxed&quot;&gt;&lt;code&gt;Ordering::Relaxed&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;failure&lt;/code&gt; parameters. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.compare_exchange_weak&quot;&gt;&lt;code&gt;AtomicBool::compare_exchange_weak&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この固有の安定したバージョンが利用可能である&lt;a href=&quot;../sync/atomic/index&quot;&gt; &lt;code&gt;atomic&lt;/code&gt; &lt;/a&gt;を介した種類 &lt;code&gt;compare_exchange_weak&lt;/code&gt; の渡すことにより、法&lt;a href=&quot;../sync/atomic/enum.ordering#variant.Release&quot;&gt; &lt;code&gt;Ordering::Release&lt;/code&gt; &lt;/a&gt;として &lt;code&gt;success&lt;/code&gt; し、&lt;a href=&quot;../sync/atomic/enum.ordering#variant.Relaxed&quot;&gt; &lt;code&gt;Ordering::Relaxed&lt;/code&gt; &lt;/a&gt;として &lt;code&gt;failure&lt;/code&gt; パラメータ。たとえば、&lt;a href=&quot;../sync/atomic/struct.atomicbool#method.compare_exchange_weak&quot;&gt; &lt;code&gt;AtomicBool::compare_exchange_weak&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e408b07db98e8ee6804e680f2894d658fb2f63fb" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is available on the &lt;a href=&quot;../sync/atomic/index&quot;&gt;&lt;code&gt;atomic&lt;/code&gt;&lt;/a&gt; types via the &lt;code&gt;compare_exchange_weak&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering#variant.SeqCst&quot;&gt;&lt;code&gt;Ordering::SeqCst&lt;/code&gt;&lt;/a&gt; as both the &lt;code&gt;success&lt;/code&gt; and &lt;code&gt;failure&lt;/code&gt; parameters. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.compare_exchange_weak&quot;&gt;&lt;code&gt;AtomicBool::compare_exchange_weak&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この組み込み関数の安定化バージョンは、 &lt;code&gt;success&lt;/code&gt; パラメーターと &lt;code&gt;failure&lt;/code&gt; パラメーターの両方として&lt;a href=&quot;../sync/atomic/enum.ordering#variant.SeqCst&quot;&gt; &lt;code&gt;Ordering::SeqCst&lt;/code&gt; &lt;/a&gt;を渡すことにより、 &lt;code&gt;compare_exchange_weak&lt;/code&gt; メソッドを介して&lt;a href=&quot;../sync/atomic/index&quot;&gt; &lt;code&gt;atomic&lt;/code&gt; &lt;/a&gt;タイプで使用できます。たとえば、&lt;a href=&quot;../sync/atomic/struct.atomicbool#method.compare_exchange_weak&quot;&gt; &lt;code&gt;AtomicBool::compare_exchange_weak&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="4d2ce54b599780814ddae4cc41ff6842ce0dffc8" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is available on the &lt;a href=&quot;../sync/atomic/index&quot;&gt;&lt;code&gt;atomic&lt;/code&gt;&lt;/a&gt; types via the &lt;code&gt;compare_exchange_weak&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering#variant.SeqCst&quot;&gt;&lt;code&gt;Ordering::SeqCst&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;success&lt;/code&gt; and &lt;a href=&quot;../sync/atomic/enum.ordering#variant.Acquire&quot;&gt;&lt;code&gt;Ordering::Acquire&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;failure&lt;/code&gt; parameters. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.compare_exchange_weak&quot;&gt;&lt;code&gt;AtomicBool::compare_exchange_weak&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この固有の安定したバージョンで利用可能である&lt;a href=&quot;../sync/atomic/index&quot;&gt; &lt;code&gt;atomic&lt;/code&gt; &lt;/a&gt;を介し種類 &lt;code&gt;compare_exchange_weak&lt;/code&gt; の渡すことで、法&lt;a href=&quot;../sync/atomic/enum.ordering#variant.SeqCst&quot;&gt; &lt;code&gt;Ordering::SeqCst&lt;/code&gt; &lt;/a&gt;として &lt;code&gt;success&lt;/code&gt; し、&lt;a href=&quot;../sync/atomic/enum.ordering#variant.Acquire&quot;&gt; &lt;code&gt;Ordering::Acquire&lt;/code&gt; &lt;/a&gt;など &lt;code&gt;failure&lt;/code&gt; パラメータ。たとえば、&lt;a href=&quot;../sync/atomic/struct.atomicbool#method.compare_exchange_weak&quot;&gt; &lt;code&gt;AtomicBool::compare_exchange_weak&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c3c44a7a6b16b40cf235a33892e670e0a8bc5178" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is available on the &lt;a href=&quot;../sync/atomic/index&quot;&gt;&lt;code&gt;atomic&lt;/code&gt;&lt;/a&gt; types via the &lt;code&gt;compare_exchange_weak&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering#variant.SeqCst&quot;&gt;&lt;code&gt;Ordering::SeqCst&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;success&lt;/code&gt; and &lt;a href=&quot;../sync/atomic/enum.ordering#variant.Relaxed&quot;&gt;&lt;code&gt;Ordering::Relaxed&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;failure&lt;/code&gt; parameters. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.compare_exchange_weak&quot;&gt;&lt;code&gt;AtomicBool::compare_exchange_weak&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この固有の安定したバージョンがで提供されて&lt;a href=&quot;../sync/atomic/index&quot;&gt; &lt;code&gt;atomic&lt;/code&gt; &lt;/a&gt;を介し種類 &lt;code&gt;compare_exchange_weak&lt;/code&gt; の渡すことで、法&lt;a href=&quot;../sync/atomic/enum.ordering#variant.SeqCst&quot;&gt; &lt;code&gt;Ordering::SeqCst&lt;/code&gt; &lt;/a&gt;として &lt;code&gt;success&lt;/code&gt; し、&lt;a href=&quot;../sync/atomic/enum.ordering#variant.Relaxed&quot;&gt; &lt;code&gt;Ordering::Relaxed&lt;/code&gt; &lt;/a&gt;として &lt;code&gt;failure&lt;/code&gt; パラメータ。たとえば、&lt;a href=&quot;../sync/atomic/struct.atomicbool#method.compare_exchange_weak&quot;&gt; &lt;code&gt;AtomicBool::compare_exchange_weak&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="eae6f5127b74d22ebf6510c20a59c81a3de0cdfc" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is available on the &lt;a href=&quot;../sync/atomic/index&quot;&gt;&lt;code&gt;atomic&lt;/code&gt;&lt;/a&gt; types via the &lt;code&gt;fetch_add&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering#variant.AcqRel&quot;&gt;&lt;code&gt;Ordering::AcqRel&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicisize#method.fetch_add&quot;&gt;&lt;code&gt;AtomicIsize::fetch_add&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この固有の安定したバージョンが利用可能である&lt;a href=&quot;../sync/atomic/index&quot;&gt; &lt;code&gt;atomic&lt;/code&gt; &lt;/a&gt;を介した種類 &lt;code&gt;fetch_add&lt;/code&gt; 渡すことによって、法&lt;a href=&quot;../sync/atomic/enum.ordering#variant.AcqRel&quot;&gt; &lt;code&gt;Ordering::AcqRel&lt;/code&gt; &lt;/a&gt;として &lt;code&gt;order&lt;/code&gt; 。たとえば、&lt;a href=&quot;../sync/atomic/struct.atomicisize#method.fetch_add&quot;&gt; &lt;code&gt;AtomicIsize::fetch_add&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="695ca0d01b208d0e14efcb78593ea9daca909ab8" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is available on the &lt;a href=&quot;../sync/atomic/index&quot;&gt;&lt;code&gt;atomic&lt;/code&gt;&lt;/a&gt; types via the &lt;code&gt;fetch_add&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering#variant.Acquire&quot;&gt;&lt;code&gt;Ordering::Acquire&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicisize#method.fetch_add&quot;&gt;&lt;code&gt;AtomicIsize::fetch_add&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この組み込み関数の安定化バージョンは、&lt;a href=&quot;../sync/atomic/enum.ordering#variant.Acquire&quot;&gt; &lt;code&gt;Ordering::Acquire&lt;/code&gt; &lt;/a&gt;を &lt;code&gt;order&lt;/code&gt; として渡すことにより、 &lt;code&gt;fetch_add&lt;/code&gt; メソッドを介して&lt;a href=&quot;../sync/atomic/index&quot;&gt; &lt;code&gt;atomic&lt;/code&gt; &lt;/a&gt;型で使用できます。たとえば、&lt;a href=&quot;../sync/atomic/struct.atomicisize#method.fetch_add&quot;&gt; &lt;code&gt;AtomicIsize::fetch_add&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="e4a2657e5f8e4cdd6d19f74f32446cf634f2c708" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is available on the &lt;a href=&quot;../sync/atomic/index&quot;&gt;&lt;code&gt;atomic&lt;/code&gt;&lt;/a&gt; types via the &lt;code&gt;fetch_add&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering#variant.Relaxed&quot;&gt;&lt;code&gt;Ordering::Relaxed&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicisize#method.fetch_add&quot;&gt;&lt;code&gt;AtomicIsize::fetch_add&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この組み込み関数の安定化バージョンは、&lt;a href=&quot;../sync/atomic/enum.ordering#variant.Relaxed&quot;&gt; &lt;code&gt;Ordering::Relaxed&lt;/code&gt; &lt;/a&gt;を &lt;code&gt;order&lt;/code&gt; として渡すことにより、 &lt;code&gt;fetch_add&lt;/code&gt; メソッドを介して&lt;a href=&quot;../sync/atomic/index&quot;&gt; &lt;code&gt;atomic&lt;/code&gt; &lt;/a&gt;型で使用できます。たとえば、&lt;a href=&quot;../sync/atomic/struct.atomicisize#method.fetch_add&quot;&gt; &lt;code&gt;AtomicIsize::fetch_add&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="b27a067a3ca05d7ed184ca857f007a3ba758dcd5" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is available on the &lt;a href=&quot;../sync/atomic/index&quot;&gt;&lt;code&gt;atomic&lt;/code&gt;&lt;/a&gt; types via the &lt;code&gt;fetch_add&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering#variant.Release&quot;&gt;&lt;code&gt;Ordering::Release&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicisize#method.fetch_add&quot;&gt;&lt;code&gt;AtomicIsize::fetch_add&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この組み込み関数の安定化バージョンは、&lt;a href=&quot;../sync/atomic/enum.ordering#variant.Release&quot;&gt; &lt;code&gt;Ordering::Release&lt;/code&gt; &lt;/a&gt;を &lt;code&gt;order&lt;/code&gt; として渡すことにより、 &lt;code&gt;fetch_add&lt;/code&gt; メソッドを介して&lt;a href=&quot;../sync/atomic/index&quot;&gt; &lt;code&gt;atomic&lt;/code&gt; &lt;/a&gt;型で使用できます。たとえば、&lt;a href=&quot;../sync/atomic/struct.atomicisize#method.fetch_add&quot;&gt; &lt;code&gt;AtomicIsize::fetch_add&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="6f042c7aafd7bdff469934311d53691a7a1a1045" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is available on the &lt;a href=&quot;../sync/atomic/index&quot;&gt;&lt;code&gt;atomic&lt;/code&gt;&lt;/a&gt; types via the &lt;code&gt;fetch_add&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering#variant.SeqCst&quot;&gt;&lt;code&gt;Ordering::SeqCst&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicisize#method.fetch_add&quot;&gt;&lt;code&gt;AtomicIsize::fetch_add&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この固有の安定したバージョンが利用可能である&lt;a href=&quot;../sync/atomic/index&quot;&gt; &lt;code&gt;atomic&lt;/code&gt; &lt;/a&gt;を介し種類 &lt;code&gt;fetch_add&lt;/code&gt; 渡すことによって、法&lt;a href=&quot;../sync/atomic/enum.ordering#variant.SeqCst&quot;&gt; &lt;code&gt;Ordering::SeqCst&lt;/code&gt; &lt;/a&gt;として &lt;code&gt;order&lt;/code&gt; 。たとえば、&lt;a href=&quot;../sync/atomic/struct.atomicisize#method.fetch_add&quot;&gt; &lt;code&gt;AtomicIsize::fetch_add&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="91da36591ebb40c0553e91c9f934d905043cb8a9" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is available on the &lt;a href=&quot;../sync/atomic/index&quot;&gt;&lt;code&gt;atomic&lt;/code&gt;&lt;/a&gt; types via the &lt;code&gt;fetch_and&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering#variant.AcqRel&quot;&gt;&lt;code&gt;Ordering::AcqRel&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.fetch_and&quot;&gt;&lt;code&gt;AtomicBool::fetch_and&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この固有の安定したバージョンが利用可能である&lt;a href=&quot;../sync/atomic/index&quot;&gt; &lt;code&gt;atomic&lt;/code&gt; &lt;/a&gt;を介した種類 &lt;code&gt;fetch_and&lt;/code&gt; 渡すことによって、法&lt;a href=&quot;../sync/atomic/enum.ordering#variant.AcqRel&quot;&gt; &lt;code&gt;Ordering::AcqRel&lt;/code&gt; &lt;/a&gt;として &lt;code&gt;order&lt;/code&gt; 。たとえば、&lt;a href=&quot;../sync/atomic/struct.atomicbool#method.fetch_and&quot;&gt; &lt;code&gt;AtomicBool::fetch_and&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8e00a651851675118139e87206d58986105c4eb0" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is available on the &lt;a href=&quot;../sync/atomic/index&quot;&gt;&lt;code&gt;atomic&lt;/code&gt;&lt;/a&gt; types via the &lt;code&gt;fetch_and&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering#variant.Acquire&quot;&gt;&lt;code&gt;Ordering::Acquire&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.fetch_and&quot;&gt;&lt;code&gt;AtomicBool::fetch_and&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この組み込み関数の安定化バージョンは、&lt;a href=&quot;../sync/atomic/enum.ordering#variant.Acquire&quot;&gt; &lt;code&gt;Ordering::Acquire&lt;/code&gt; &lt;/a&gt;を &lt;code&gt;order&lt;/code&gt; として渡すことにより、 &lt;code&gt;fetch_and&lt;/code&gt; メソッドを介して&lt;a href=&quot;../sync/atomic/index&quot;&gt; &lt;code&gt;atomic&lt;/code&gt; &lt;/a&gt;タイプで使用できます。たとえば、&lt;a href=&quot;../sync/atomic/struct.atomicbool#method.fetch_and&quot;&gt; &lt;code&gt;AtomicBool::fetch_and&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="18a857da52573d4e17b52a7e7c33c2b45cbcba5f" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is available on the &lt;a href=&quot;../sync/atomic/index&quot;&gt;&lt;code&gt;atomic&lt;/code&gt;&lt;/a&gt; types via the &lt;code&gt;fetch_and&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering#variant.Relaxed&quot;&gt;&lt;code&gt;Ordering::Relaxed&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.fetch_and&quot;&gt;&lt;code&gt;AtomicBool::fetch_and&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この組み込み関数の安定化バージョンは、&lt;a href=&quot;../sync/atomic/enum.ordering#variant.Relaxed&quot;&gt; &lt;code&gt;Ordering::Relaxed&lt;/code&gt; &lt;/a&gt;を &lt;code&gt;order&lt;/code&gt; として渡すことにより、 &lt;code&gt;fetch_and&lt;/code&gt; メソッドを介して&lt;a href=&quot;../sync/atomic/index&quot;&gt; &lt;code&gt;atomic&lt;/code&gt; &lt;/a&gt;タイプで使用できます。たとえば、&lt;a href=&quot;../sync/atomic/struct.atomicbool#method.fetch_and&quot;&gt; &lt;code&gt;AtomicBool::fetch_and&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="af7b5f35485a9f9923b0a484a1951a30bb3a1887" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is available on the &lt;a href=&quot;../sync/atomic/index&quot;&gt;&lt;code&gt;atomic&lt;/code&gt;&lt;/a&gt; types via the &lt;code&gt;fetch_and&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering#variant.Release&quot;&gt;&lt;code&gt;Ordering::Release&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.fetch_and&quot;&gt;&lt;code&gt;AtomicBool::fetch_and&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この組み込み関数の安定化バージョンは、&lt;a href=&quot;../sync/atomic/enum.ordering#variant.Release&quot;&gt; &lt;code&gt;Ordering::Release&lt;/code&gt; &lt;/a&gt;を &lt;code&gt;order&lt;/code&gt; として渡すことにより、 &lt;code&gt;fetch_and&lt;/code&gt; メソッドを介して&lt;a href=&quot;../sync/atomic/index&quot;&gt; &lt;code&gt;atomic&lt;/code&gt; &lt;/a&gt;タイプで使用できます。たとえば、&lt;a href=&quot;../sync/atomic/struct.atomicbool#method.fetch_and&quot;&gt; &lt;code&gt;AtomicBool::fetch_and&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="993970aa50aa2516408dfe30230dc45762d3f244" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is available on the &lt;a href=&quot;../sync/atomic/index&quot;&gt;&lt;code&gt;atomic&lt;/code&gt;&lt;/a&gt; types via the &lt;code&gt;fetch_and&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering#variant.SeqCst&quot;&gt;&lt;code&gt;Ordering::SeqCst&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.fetch_and&quot;&gt;&lt;code&gt;AtomicBool::fetch_and&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この固有の安定したバージョンが利用可能である&lt;a href=&quot;../sync/atomic/index&quot;&gt; &lt;code&gt;atomic&lt;/code&gt; &lt;/a&gt;を介し種類 &lt;code&gt;fetch_and&lt;/code&gt; 渡すことによって、法&lt;a href=&quot;../sync/atomic/enum.ordering#variant.SeqCst&quot;&gt; &lt;code&gt;Ordering::SeqCst&lt;/code&gt; &lt;/a&gt;として &lt;code&gt;order&lt;/code&gt; 。たとえば、&lt;a href=&quot;../sync/atomic/struct.atomicbool#method.fetch_and&quot;&gt; &lt;code&gt;AtomicBool::fetch_and&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="460da953958feb4d29ef7b565f8bb84fe0c27874" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is available on the &lt;a href=&quot;../sync/atomic/index&quot;&gt;&lt;code&gt;atomic&lt;/code&gt;&lt;/a&gt; types via the &lt;code&gt;fetch_or&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering#variant.AcqRel&quot;&gt;&lt;code&gt;Ordering::AcqRel&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.fetch_or&quot;&gt;&lt;code&gt;AtomicBool::fetch_or&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この固有の安定したバージョンが利用可能である&lt;a href=&quot;../sync/atomic/index&quot;&gt; &lt;code&gt;atomic&lt;/code&gt; &lt;/a&gt;を介した種類 &lt;code&gt;fetch_or&lt;/code&gt; 渡すことによって、法&lt;a href=&quot;../sync/atomic/enum.ordering#variant.AcqRel&quot;&gt; &lt;code&gt;Ordering::AcqRel&lt;/code&gt; &lt;/a&gt;として &lt;code&gt;order&lt;/code&gt; 。たとえば、&lt;a href=&quot;../sync/atomic/struct.atomicbool#method.fetch_or&quot;&gt; &lt;code&gt;AtomicBool::fetch_or&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="fe64adf45d801b3817879d281caf34973915fca3" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is available on the &lt;a href=&quot;../sync/atomic/index&quot;&gt;&lt;code&gt;atomic&lt;/code&gt;&lt;/a&gt; types via the &lt;code&gt;fetch_or&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering#variant.Acquire&quot;&gt;&lt;code&gt;Ordering::Acquire&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.fetch_or&quot;&gt;&lt;code&gt;AtomicBool::fetch_or&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この組み込み関数の安定化バージョンは、&lt;a href=&quot;../sync/atomic/enum.ordering#variant.Acquire&quot;&gt; &lt;code&gt;Ordering::Acquire&lt;/code&gt; &lt;/a&gt;を &lt;code&gt;order&lt;/code&gt; として渡すことにより、 &lt;code&gt;fetch_or&lt;/code&gt; メソッドを介して&lt;a href=&quot;../sync/atomic/index&quot;&gt; &lt;code&gt;atomic&lt;/code&gt; &lt;/a&gt;タイプで使用できます。たとえば、&lt;a href=&quot;../sync/atomic/struct.atomicbool#method.fetch_or&quot;&gt; &lt;code&gt;AtomicBool::fetch_or&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="30017d261ccaa47677175bc1d115dd370a15f192" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is available on the &lt;a href=&quot;../sync/atomic/index&quot;&gt;&lt;code&gt;atomic&lt;/code&gt;&lt;/a&gt; types via the &lt;code&gt;fetch_or&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering#variant.Relaxed&quot;&gt;&lt;code&gt;Ordering::Relaxed&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.fetch_or&quot;&gt;&lt;code&gt;AtomicBool::fetch_or&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この組み込み関数の安定化バージョンは、&lt;a href=&quot;../sync/atomic/enum.ordering#variant.Relaxed&quot;&gt; &lt;code&gt;Ordering::Relaxed&lt;/code&gt; &lt;/a&gt;を &lt;code&gt;order&lt;/code&gt; として渡すことにより、 &lt;code&gt;fetch_or&lt;/code&gt; メソッドを介して&lt;a href=&quot;../sync/atomic/index&quot;&gt; &lt;code&gt;atomic&lt;/code&gt; &lt;/a&gt;タイプで使用できます。たとえば、&lt;a href=&quot;../sync/atomic/struct.atomicbool#method.fetch_or&quot;&gt; &lt;code&gt;AtomicBool::fetch_or&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="6b88f8c0000bb8e04847190fb1bea4c60b0d2d4b" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is available on the &lt;a href=&quot;../sync/atomic/index&quot;&gt;&lt;code&gt;atomic&lt;/code&gt;&lt;/a&gt; types via the &lt;code&gt;fetch_or&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering#variant.Release&quot;&gt;&lt;code&gt;Ordering::Release&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.fetch_or&quot;&gt;&lt;code&gt;AtomicBool::fetch_or&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この組み込み関数の安定化バージョンは、&lt;a href=&quot;../sync/atomic/enum.ordering#variant.Release&quot;&gt; &lt;code&gt;Ordering::Release&lt;/code&gt; &lt;/a&gt;を &lt;code&gt;order&lt;/code&gt; として渡すことにより、 &lt;code&gt;fetch_or&lt;/code&gt; メソッドを介して&lt;a href=&quot;../sync/atomic/index&quot;&gt; &lt;code&gt;atomic&lt;/code&gt; &lt;/a&gt;タイプで使用できます。たとえば、&lt;a href=&quot;../sync/atomic/struct.atomicbool#method.fetch_or&quot;&gt; &lt;code&gt;AtomicBool::fetch_or&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="5515cfd3dce0baaa5d0933d153812410aa18e81b" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is available on the &lt;a href=&quot;../sync/atomic/index&quot;&gt;&lt;code&gt;atomic&lt;/code&gt;&lt;/a&gt; types via the &lt;code&gt;fetch_or&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering#variant.SeqCst&quot;&gt;&lt;code&gt;Ordering::SeqCst&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.fetch_or&quot;&gt;&lt;code&gt;AtomicBool::fetch_or&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この固有の安定したバージョンが利用可能である&lt;a href=&quot;../sync/atomic/index&quot;&gt; &lt;code&gt;atomic&lt;/code&gt; &lt;/a&gt;を介し種類 &lt;code&gt;fetch_or&lt;/code&gt; 渡すことによって、法&lt;a href=&quot;../sync/atomic/enum.ordering#variant.SeqCst&quot;&gt; &lt;code&gt;Ordering::SeqCst&lt;/code&gt; &lt;/a&gt;として &lt;code&gt;order&lt;/code&gt; 。たとえば、&lt;a href=&quot;../sync/atomic/struct.atomicbool#method.fetch_or&quot;&gt; &lt;code&gt;AtomicBool::fetch_or&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="94f2a12d751dc3a744709ca812719eed5be6639d" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is available on the &lt;a href=&quot;../sync/atomic/index&quot;&gt;&lt;code&gt;atomic&lt;/code&gt;&lt;/a&gt; types via the &lt;code&gt;fetch_sub&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering#variant.AcqRel&quot;&gt;&lt;code&gt;Ordering::AcqRel&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicisize#method.fetch_sub&quot;&gt;&lt;code&gt;AtomicIsize::fetch_sub&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この固有の安定したバージョンが利用可能である&lt;a href=&quot;../sync/atomic/index&quot;&gt; &lt;code&gt;atomic&lt;/code&gt; &lt;/a&gt;を介した種類 &lt;code&gt;fetch_sub&lt;/code&gt; 渡すことによって、法&lt;a href=&quot;../sync/atomic/enum.ordering#variant.AcqRel&quot;&gt; &lt;code&gt;Ordering::AcqRel&lt;/code&gt; &lt;/a&gt;として &lt;code&gt;order&lt;/code&gt; 。たとえば、&lt;a href=&quot;../sync/atomic/struct.atomicisize#method.fetch_sub&quot;&gt; &lt;code&gt;AtomicIsize::fetch_sub&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="a7b08115a886002f8e0b6d94070bb4e793dcb17c" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is available on the &lt;a href=&quot;../sync/atomic/index&quot;&gt;&lt;code&gt;atomic&lt;/code&gt;&lt;/a&gt; types via the &lt;code&gt;fetch_sub&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering#variant.Acquire&quot;&gt;&lt;code&gt;Ordering::Acquire&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicisize#method.fetch_sub&quot;&gt;&lt;code&gt;AtomicIsize::fetch_sub&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この組み込み関数の安定化バージョンは、&lt;a href=&quot;../sync/atomic/enum.ordering#variant.Acquire&quot;&gt; &lt;code&gt;Ordering::Acquire&lt;/code&gt; &lt;/a&gt;を &lt;code&gt;order&lt;/code&gt; として渡すことで &lt;code&gt;fetch_sub&lt;/code&gt; メソッドを介して&lt;a href=&quot;../sync/atomic/index&quot;&gt; &lt;code&gt;atomic&lt;/code&gt; &lt;/a&gt;タイプで使用できます。たとえば、&lt;a href=&quot;../sync/atomic/struct.atomicisize#method.fetch_sub&quot;&gt; &lt;code&gt;AtomicIsize::fetch_sub&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="65021746bc3a29e483b54a665e8fe3993f3b7531" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is available on the &lt;a href=&quot;../sync/atomic/index&quot;&gt;&lt;code&gt;atomic&lt;/code&gt;&lt;/a&gt; types via the &lt;code&gt;fetch_sub&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering#variant.Relaxed&quot;&gt;&lt;code&gt;Ordering::Relaxed&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicisize#method.fetch_sub&quot;&gt;&lt;code&gt;AtomicIsize::fetch_sub&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この組み込み関数の安定化バージョンは、&lt;a href=&quot;../sync/atomic/enum.ordering#variant.Relaxed&quot;&gt; &lt;code&gt;Ordering::Relaxed&lt;/code&gt; &lt;/a&gt;を &lt;code&gt;order&lt;/code&gt; として渡すことにより、 &lt;code&gt;fetch_sub&lt;/code&gt; メソッドを介して&lt;a href=&quot;../sync/atomic/index&quot;&gt; &lt;code&gt;atomic&lt;/code&gt; &lt;/a&gt;タイプで使用できます。たとえば、&lt;a href=&quot;../sync/atomic/struct.atomicisize#method.fetch_sub&quot;&gt; &lt;code&gt;AtomicIsize::fetch_sub&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="9074d1309228123f0a179daab86adda956d06578" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is available on the &lt;a href=&quot;../sync/atomic/index&quot;&gt;&lt;code&gt;atomic&lt;/code&gt;&lt;/a&gt; types via the &lt;code&gt;fetch_sub&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering#variant.Release&quot;&gt;&lt;code&gt;Ordering::Release&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicisize#method.fetch_sub&quot;&gt;&lt;code&gt;AtomicIsize::fetch_sub&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この組み込み関数の安定化バージョンは、&lt;a href=&quot;../sync/atomic/enum.ordering#variant.Release&quot;&gt; &lt;code&gt;Ordering::Release&lt;/code&gt; &lt;/a&gt;を &lt;code&gt;order&lt;/code&gt; として渡すことにより、 &lt;code&gt;fetch_sub&lt;/code&gt; メソッドを介して&lt;a href=&quot;../sync/atomic/index&quot;&gt; &lt;code&gt;atomic&lt;/code&gt; &lt;/a&gt;タイプで使用できます。たとえば、&lt;a href=&quot;../sync/atomic/struct.atomicisize#method.fetch_sub&quot;&gt; &lt;code&gt;AtomicIsize::fetch_sub&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="bf31a4dfb044ce9c3c11fede562f450062e8cb70" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is available on the &lt;a href=&quot;../sync/atomic/index&quot;&gt;&lt;code&gt;atomic&lt;/code&gt;&lt;/a&gt; types via the &lt;code&gt;fetch_sub&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering#variant.SeqCst&quot;&gt;&lt;code&gt;Ordering::SeqCst&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicisize#method.fetch_sub&quot;&gt;&lt;code&gt;AtomicIsize::fetch_sub&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この固有の安定したバージョンが利用可能である&lt;a href=&quot;../sync/atomic/index&quot;&gt; &lt;code&gt;atomic&lt;/code&gt; &lt;/a&gt;を介し種類 &lt;code&gt;fetch_sub&lt;/code&gt; 渡すことによって、法&lt;a href=&quot;../sync/atomic/enum.ordering#variant.SeqCst&quot;&gt; &lt;code&gt;Ordering::SeqCst&lt;/code&gt; &lt;/a&gt;として &lt;code&gt;order&lt;/code&gt; 。たとえば、&lt;a href=&quot;../sync/atomic/struct.atomicisize#method.fetch_sub&quot;&gt; &lt;code&gt;AtomicIsize::fetch_sub&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="0a08ca4aeb864c545fa763c7c1bc0c6adeca1e10" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is available on the &lt;a href=&quot;../sync/atomic/index&quot;&gt;&lt;code&gt;atomic&lt;/code&gt;&lt;/a&gt; types via the &lt;code&gt;fetch_xor&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering#variant.AcqRel&quot;&gt;&lt;code&gt;Ordering::AcqRel&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.fetch_xor&quot;&gt;&lt;code&gt;AtomicBool::fetch_xor&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この固有の安定したバージョンが利用可能である&lt;a href=&quot;../sync/atomic/index&quot;&gt; &lt;code&gt;atomic&lt;/code&gt; &lt;/a&gt;を介した種類 &lt;code&gt;fetch_xor&lt;/code&gt; 渡すことによって、法&lt;a href=&quot;../sync/atomic/enum.ordering#variant.AcqRel&quot;&gt; &lt;code&gt;Ordering::AcqRel&lt;/code&gt; &lt;/a&gt;として &lt;code&gt;order&lt;/code&gt; 。たとえば、&lt;a href=&quot;../sync/atomic/struct.atomicbool#method.fetch_xor&quot;&gt; &lt;code&gt;AtomicBool::fetch_xor&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="23e04028b595d303c299af1a09560b78dc738b23" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is available on the &lt;a href=&quot;../sync/atomic/index&quot;&gt;&lt;code&gt;atomic&lt;/code&gt;&lt;/a&gt; types via the &lt;code&gt;fetch_xor&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering#variant.Acquire&quot;&gt;&lt;code&gt;Ordering::Acquire&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.fetch_xor&quot;&gt;&lt;code&gt;AtomicBool::fetch_xor&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この組み込み関数の安定化バージョンは、&lt;a href=&quot;../sync/atomic/enum.ordering#variant.Acquire&quot;&gt; &lt;code&gt;Ordering::Acquire&lt;/code&gt; &lt;/a&gt;を &lt;code&gt;order&lt;/code&gt; として渡すことにより、 &lt;code&gt;fetch_xor&lt;/code&gt; メソッドを介して&lt;a href=&quot;../sync/atomic/index&quot;&gt; &lt;code&gt;atomic&lt;/code&gt; &lt;/a&gt;タイプで使用できます。たとえば、&lt;a href=&quot;../sync/atomic/struct.atomicbool#method.fetch_xor&quot;&gt; &lt;code&gt;AtomicBool::fetch_xor&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="d03d95dd3b76208c05df63103f2a4773075d06c7" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is available on the &lt;a href=&quot;../sync/atomic/index&quot;&gt;&lt;code&gt;atomic&lt;/code&gt;&lt;/a&gt; types via the &lt;code&gt;fetch_xor&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering#variant.Relaxed&quot;&gt;&lt;code&gt;Ordering::Relaxed&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.fetch_xor&quot;&gt;&lt;code&gt;AtomicBool::fetch_xor&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この組み込み関数の安定化バージョンは、&lt;a href=&quot;../sync/atomic/enum.ordering#variant.Relaxed&quot;&gt; &lt;code&gt;Ordering::Relaxed&lt;/code&gt; &lt;/a&gt;を &lt;code&gt;order&lt;/code&gt; として渡すことにより、 &lt;code&gt;fetch_xor&lt;/code&gt; メソッドを介して&lt;a href=&quot;../sync/atomic/index&quot;&gt; &lt;code&gt;atomic&lt;/code&gt; &lt;/a&gt;タイプで使用できます。たとえば、&lt;a href=&quot;../sync/atomic/struct.atomicbool#method.fetch_xor&quot;&gt; &lt;code&gt;AtomicBool::fetch_xor&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="527ff76b4c308bdfc8590a98e3e2f36b010f0a65" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is available on the &lt;a href=&quot;../sync/atomic/index&quot;&gt;&lt;code&gt;atomic&lt;/code&gt;&lt;/a&gt; types via the &lt;code&gt;fetch_xor&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering#variant.Release&quot;&gt;&lt;code&gt;Ordering::Release&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.fetch_xor&quot;&gt;&lt;code&gt;AtomicBool::fetch_xor&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この組み込み関数の安定化バージョンは、&lt;a href=&quot;../sync/atomic/enum.ordering#variant.Release&quot;&gt; &lt;code&gt;Ordering::Release&lt;/code&gt; &lt;/a&gt;を &lt;code&gt;order&lt;/code&gt; として渡すことにより、 &lt;code&gt;fetch_xor&lt;/code&gt; メソッドを介して&lt;a href=&quot;../sync/atomic/index&quot;&gt; &lt;code&gt;atomic&lt;/code&gt; &lt;/a&gt;タイプで使用できます。たとえば、&lt;a href=&quot;../sync/atomic/struct.atomicbool#method.fetch_xor&quot;&gt; &lt;code&gt;AtomicBool::fetch_xor&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="2ecf9233457e6140afc96f591e6de39578ed746f" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is available on the &lt;a href=&quot;../sync/atomic/index&quot;&gt;&lt;code&gt;atomic&lt;/code&gt;&lt;/a&gt; types via the &lt;code&gt;fetch_xor&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering#variant.SeqCst&quot;&gt;&lt;code&gt;Ordering::SeqCst&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.fetch_xor&quot;&gt;&lt;code&gt;AtomicBool::fetch_xor&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この固有の安定したバージョンが利用可能である&lt;a href=&quot;../sync/atomic/index&quot;&gt; &lt;code&gt;atomic&lt;/code&gt; &lt;/a&gt;を介し種類 &lt;code&gt;fetch_xor&lt;/code&gt; 渡すことによって、法&lt;a href=&quot;../sync/atomic/enum.ordering#variant.SeqCst&quot;&gt; &lt;code&gt;Ordering::SeqCst&lt;/code&gt; &lt;/a&gt;として &lt;code&gt;order&lt;/code&gt; 。たとえば、&lt;a href=&quot;../sync/atomic/struct.atomicbool#method.fetch_xor&quot;&gt; &lt;code&gt;AtomicBool::fetch_xor&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="b72330976c1ede5cb1f5f36f1315049842fbbb63" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is available on the &lt;a href=&quot;../sync/atomic/index&quot;&gt;&lt;code&gt;atomic&lt;/code&gt;&lt;/a&gt; types via the &lt;code&gt;load&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering#variant.Acquire&quot;&gt;&lt;code&gt;Ordering::Acquire&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.load&quot;&gt;&lt;code&gt;AtomicBool::load&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この組み込み関数の安定化バージョンは、&lt;a href=&quot;../sync/atomic/enum.ordering#variant.Acquire&quot;&gt; &lt;code&gt;Ordering::Acquire&lt;/code&gt; &lt;/a&gt;を &lt;code&gt;order&lt;/code&gt; として渡すことにより、 &lt;code&gt;load&lt;/code&gt; メソッドを介して&lt;a href=&quot;../sync/atomic/index&quot;&gt; &lt;code&gt;atomic&lt;/code&gt; &lt;/a&gt;タイプで使用できます。たとえば、&lt;a href=&quot;../sync/atomic/struct.atomicbool#method.load&quot;&gt; &lt;code&gt;AtomicBool::load&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="07780502f5ae712c09c48bfbf053afbea4b8cc74" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is available on the &lt;a href=&quot;../sync/atomic/index&quot;&gt;&lt;code&gt;atomic&lt;/code&gt;&lt;/a&gt; types via the &lt;code&gt;load&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering#variant.Relaxed&quot;&gt;&lt;code&gt;Ordering::Relaxed&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.load&quot;&gt;&lt;code&gt;AtomicBool::load&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この組み込み関数の安定化バージョンは、&lt;a href=&quot;../sync/atomic/enum.ordering#variant.Relaxed&quot;&gt; &lt;code&gt;Ordering::Relaxed&lt;/code&gt; &lt;/a&gt;を &lt;code&gt;order&lt;/code&gt; として渡すことにより、 &lt;code&gt;load&lt;/code&gt; メソッドを介して&lt;a href=&quot;../sync/atomic/index&quot;&gt; &lt;code&gt;atomic&lt;/code&gt; &lt;/a&gt;タイプで使用できます。たとえば、&lt;a href=&quot;../sync/atomic/struct.atomicbool#method.load&quot;&gt; &lt;code&gt;AtomicBool::load&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="61ddb64e96ce0f4ae971acf4e42bb38eda10bc9a" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is available on the &lt;a href=&quot;../sync/atomic/index&quot;&gt;&lt;code&gt;atomic&lt;/code&gt;&lt;/a&gt; types via the &lt;code&gt;load&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering#variant.SeqCst&quot;&gt;&lt;code&gt;Ordering::SeqCst&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.load&quot;&gt;&lt;code&gt;AtomicBool::load&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この固有の安定したバージョンが利用可能である&lt;a href=&quot;../sync/atomic/index&quot;&gt; &lt;code&gt;atomic&lt;/code&gt; &lt;/a&gt;を経由しての種類 &lt;code&gt;load&lt;/code&gt; 渡すことにより、法&lt;a href=&quot;../sync/atomic/enum.ordering#variant.SeqCst&quot;&gt; &lt;code&gt;Ordering::SeqCst&lt;/code&gt; &lt;/a&gt;として &lt;code&gt;order&lt;/code&gt; 。たとえば、&lt;a href=&quot;../sync/atomic/struct.atomicbool#method.load&quot;&gt; &lt;code&gt;AtomicBool::load&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="dd50153000fdd2e98065597c848234d48c5ae7ef" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is available on the &lt;a href=&quot;../sync/atomic/index&quot;&gt;&lt;code&gt;atomic&lt;/code&gt;&lt;/a&gt; types via the &lt;code&gt;store&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering#variant.Relaxed&quot;&gt;&lt;code&gt;Ordering::Relaxed&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.store&quot;&gt;&lt;code&gt;AtomicBool::store&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この組み込み関数の安定化バージョンは、&lt;a href=&quot;../sync/atomic/enum.ordering#variant.Relaxed&quot;&gt; &lt;code&gt;Ordering::Relaxed&lt;/code&gt; &lt;/a&gt;を &lt;code&gt;order&lt;/code&gt; として渡すことにより、 &lt;code&gt;store&lt;/code&gt; メソッドを介して&lt;a href=&quot;../sync/atomic/index&quot;&gt; &lt;code&gt;atomic&lt;/code&gt; &lt;/a&gt;タイプで使用できます。たとえば、&lt;a href=&quot;../sync/atomic/struct.atomicbool#method.store&quot;&gt; &lt;code&gt;AtomicBool::store&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3a6dbd5587aa433e73f8c34d35d442568a18d942" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is available on the &lt;a href=&quot;../sync/atomic/index&quot;&gt;&lt;code&gt;atomic&lt;/code&gt;&lt;/a&gt; types via the &lt;code&gt;store&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering#variant.Release&quot;&gt;&lt;code&gt;Ordering::Release&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.store&quot;&gt;&lt;code&gt;AtomicBool::store&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この組み込み関数の安定化バージョンは、&lt;a href=&quot;../sync/atomic/enum.ordering#variant.Release&quot;&gt; &lt;code&gt;Ordering::Release&lt;/code&gt; &lt;/a&gt;を &lt;code&gt;order&lt;/code&gt; として渡すことにより、 &lt;code&gt;store&lt;/code&gt; メソッドを介して&lt;a href=&quot;../sync/atomic/index&quot;&gt; &lt;code&gt;atomic&lt;/code&gt; &lt;/a&gt;タイプで使用できます。たとえば、&lt;a href=&quot;../sync/atomic/struct.atomicbool#method.store&quot;&gt; &lt;code&gt;AtomicBool::store&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="83f72e56df4940284d7926cf923d2abdf7ea9bb4" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is available on the &lt;a href=&quot;../sync/atomic/index&quot;&gt;&lt;code&gt;atomic&lt;/code&gt;&lt;/a&gt; types via the &lt;code&gt;store&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering#variant.SeqCst&quot;&gt;&lt;code&gt;Ordering::SeqCst&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.store&quot;&gt;&lt;code&gt;AtomicBool::store&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この固有の安定したバージョンが利用可能である&lt;a href=&quot;../sync/atomic/index&quot;&gt; &lt;code&gt;atomic&lt;/code&gt; &lt;/a&gt;を介し種類 &lt;code&gt;store&lt;/code&gt; 渡すことにより、法&lt;a href=&quot;../sync/atomic/enum.ordering#variant.SeqCst&quot;&gt; &lt;code&gt;Ordering::SeqCst&lt;/code&gt; &lt;/a&gt;として &lt;code&gt;order&lt;/code&gt; 。たとえば、&lt;a href=&quot;../sync/atomic/struct.atomicbool#method.store&quot;&gt; &lt;code&gt;AtomicBool::store&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="52da2c5cb5cf0d647cd3855825f192673441bdbd" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is available on the &lt;a href=&quot;../sync/atomic/index&quot;&gt;&lt;code&gt;atomic&lt;/code&gt;&lt;/a&gt; types via the &lt;code&gt;swap&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering#variant.AcqRel&quot;&gt;&lt;code&gt;Ordering::AcqRel&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.swap&quot;&gt;&lt;code&gt;AtomicBool::swap&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この固有の安定したバージョンが利用可能である&lt;a href=&quot;../sync/atomic/index&quot;&gt; &lt;code&gt;atomic&lt;/code&gt; &lt;/a&gt;を介した種類の &lt;code&gt;swap&lt;/code&gt; 渡すことにより、法&lt;a href=&quot;../sync/atomic/enum.ordering#variant.AcqRel&quot;&gt; &lt;code&gt;Ordering::AcqRel&lt;/code&gt; &lt;/a&gt;として &lt;code&gt;order&lt;/code&gt; 。たとえば、&lt;a href=&quot;../sync/atomic/struct.atomicbool#method.swap&quot;&gt; &lt;code&gt;AtomicBool::swap&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="1b30bfb1f2876b5af31915eef811a342ebcdd3b6" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is available on the &lt;a href=&quot;../sync/atomic/index&quot;&gt;&lt;code&gt;atomic&lt;/code&gt;&lt;/a&gt; types via the &lt;code&gt;swap&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering#variant.Acquire&quot;&gt;&lt;code&gt;Ordering::Acquire&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.swap&quot;&gt;&lt;code&gt;AtomicBool::swap&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この組み込み関数の安定化バージョンは、&lt;a href=&quot;../sync/atomic/enum.ordering#variant.Acquire&quot;&gt; &lt;code&gt;Ordering::Acquire&lt;/code&gt; &lt;/a&gt;を &lt;code&gt;order&lt;/code&gt; として渡すことにより、 &lt;code&gt;swap&lt;/code&gt; メソッドを介して&lt;a href=&quot;../sync/atomic/index&quot;&gt; &lt;code&gt;atomic&lt;/code&gt; &lt;/a&gt;タイプで使用できます。たとえば、&lt;a href=&quot;../sync/atomic/struct.atomicbool#method.swap&quot;&gt; &lt;code&gt;AtomicBool::swap&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="4382bd14df2effe7e74aa90568e6832848eea4e2" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is available on the &lt;a href=&quot;../sync/atomic/index&quot;&gt;&lt;code&gt;atomic&lt;/code&gt;&lt;/a&gt; types via the &lt;code&gt;swap&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering#variant.Relaxed&quot;&gt;&lt;code&gt;Ordering::Relaxed&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.swap&quot;&gt;&lt;code&gt;AtomicBool::swap&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この組み込み関数の安定化バージョンは、&lt;a href=&quot;../sync/atomic/enum.ordering#variant.Relaxed&quot;&gt; &lt;code&gt;Ordering::Relaxed&lt;/code&gt; &lt;/a&gt;を &lt;code&gt;order&lt;/code&gt; として渡すことにより、 &lt;code&gt;swap&lt;/code&gt; メソッドを介して&lt;a href=&quot;../sync/atomic/index&quot;&gt; &lt;code&gt;atomic&lt;/code&gt; &lt;/a&gt;タイプで使用できます。たとえば、&lt;a href=&quot;../sync/atomic/struct.atomicbool#method.swap&quot;&gt; &lt;code&gt;AtomicBool::swap&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="c61255cb553ed1c231e1f72bb0423d91f01ae315" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is available on the &lt;a href=&quot;../sync/atomic/index&quot;&gt;&lt;code&gt;atomic&lt;/code&gt;&lt;/a&gt; types via the &lt;code&gt;swap&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering#variant.Release&quot;&gt;&lt;code&gt;Ordering::Release&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.swap&quot;&gt;&lt;code&gt;AtomicBool::swap&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この組み込み関数の安定化バージョンは、&lt;a href=&quot;../sync/atomic/enum.ordering#variant.Release&quot;&gt; &lt;code&gt;Ordering::Release&lt;/code&gt; &lt;/a&gt;を &lt;code&gt;order&lt;/code&gt; として渡すことにより、 &lt;code&gt;swap&lt;/code&gt; メソッドを介して&lt;a href=&quot;../sync/atomic/index&quot;&gt; &lt;code&gt;atomic&lt;/code&gt; &lt;/a&gt;タイプで使用できます。たとえば、&lt;a href=&quot;../sync/atomic/struct.atomicbool#method.swap&quot;&gt; &lt;code&gt;AtomicBool::swap&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="a69be96162b6a1c17ecee094d784c23706a36adc" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is available on the &lt;a href=&quot;../sync/atomic/index&quot;&gt;&lt;code&gt;atomic&lt;/code&gt;&lt;/a&gt; types via the &lt;code&gt;swap&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering#variant.SeqCst&quot;&gt;&lt;code&gt;Ordering::SeqCst&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.swap&quot;&gt;&lt;code&gt;AtomicBool::swap&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この固有の安定したバージョンが利用可能である&lt;a href=&quot;../sync/atomic/index&quot;&gt; &lt;code&gt;atomic&lt;/code&gt; &lt;/a&gt;を経由してのタイプ &lt;code&gt;swap&lt;/code&gt; 渡すことにより、法&lt;a href=&quot;../sync/atomic/enum.ordering#variant.SeqCst&quot;&gt; &lt;code&gt;Ordering::SeqCst&lt;/code&gt; &lt;/a&gt;として &lt;code&gt;order&lt;/code&gt; 。たとえば、&lt;a href=&quot;../sync/atomic/struct.atomicbool#method.swap&quot;&gt; &lt;code&gt;AtomicBool::swap&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="f289d7def13530cb2e5c5d7eaa967ea0cbc29ea7" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is available on the &lt;a href=&quot;../sync/atomic/index&quot;&gt;&lt;code&gt;atomic&lt;/code&gt;&lt;/a&gt; unsigned integer types via the &lt;code&gt;fetch_max&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering#variant.AcqRel&quot;&gt;&lt;code&gt;Ordering::AcqRel&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicu32#method.fetch_max&quot;&gt;&lt;code&gt;AtomicU32::fetch_max&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この固有の安定化されたバージョンが利用可能である&lt;a href=&quot;../sync/atomic/index&quot;&gt; &lt;code&gt;atomic&lt;/code&gt; &lt;/a&gt;を介して、符号なし整数型 &lt;code&gt;fetch_max&lt;/code&gt; 通すことによって方法&lt;a href=&quot;../sync/atomic/enum.ordering#variant.AcqRel&quot;&gt; &lt;code&gt;Ordering::AcqRel&lt;/code&gt; &lt;/a&gt;ように &lt;code&gt;order&lt;/code&gt; 。たとえば、&lt;a href=&quot;../sync/atomic/struct.atomicu32#method.fetch_max&quot;&gt; &lt;code&gt;AtomicU32::fetch_max&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="4eb5f9b2cac38e545e679417e0916b9477cb828c" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is available on the &lt;a href=&quot;../sync/atomic/index&quot;&gt;&lt;code&gt;atomic&lt;/code&gt;&lt;/a&gt; unsigned integer types via the &lt;code&gt;fetch_max&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering#variant.Acquire&quot;&gt;&lt;code&gt;Ordering::Acquire&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicu32#method.fetch_max&quot;&gt;&lt;code&gt;AtomicU32::fetch_max&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この組み込み関数の安定化バージョンは、&lt;a href=&quot;../sync/atomic/enum.ordering#variant.Acquire&quot;&gt; &lt;code&gt;Ordering::Acquire&lt;/code&gt; &lt;/a&gt;を &lt;code&gt;order&lt;/code&gt; として渡すことにより、 &lt;code&gt;fetch_max&lt;/code&gt; メソッドを介して&lt;a href=&quot;../sync/atomic/index&quot;&gt; &lt;code&gt;atomic&lt;/code&gt; &lt;/a&gt;符号なし整数型で使用できます。たとえば、&lt;a href=&quot;../sync/atomic/struct.atomicu32#method.fetch_max&quot;&gt; &lt;code&gt;AtomicU32::fetch_max&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="aedb9c670fb8b498f17ad50461be8607159cf171" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is available on the &lt;a href=&quot;../sync/atomic/index&quot;&gt;&lt;code&gt;atomic&lt;/code&gt;&lt;/a&gt; unsigned integer types via the &lt;code&gt;fetch_max&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering#variant.Relaxed&quot;&gt;&lt;code&gt;Ordering::Relaxed&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicu32#method.fetch_max&quot;&gt;&lt;code&gt;AtomicU32::fetch_max&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この組み込み関数の安定化バージョンは、&lt;a href=&quot;../sync/atomic/enum.ordering#variant.Relaxed&quot;&gt; &lt;code&gt;Ordering::Relaxed&lt;/code&gt; &lt;/a&gt;を &lt;code&gt;order&lt;/code&gt; として渡すことにより、 &lt;code&gt;fetch_max&lt;/code&gt; メソッドを介して&lt;a href=&quot;../sync/atomic/index&quot;&gt; &lt;code&gt;atomic&lt;/code&gt; &lt;/a&gt;符号なし整数型で使用できます。たとえば、&lt;a href=&quot;../sync/atomic/struct.atomicu32#method.fetch_max&quot;&gt; &lt;code&gt;AtomicU32::fetch_max&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="044d7d27fe09f49e2ad99740d35c149e3d409936" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is available on the &lt;a href=&quot;../sync/atomic/index&quot;&gt;&lt;code&gt;atomic&lt;/code&gt;&lt;/a&gt; unsigned integer types via the &lt;code&gt;fetch_max&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering#variant.Release&quot;&gt;&lt;code&gt;Ordering::Release&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicu32#method.fetch_max&quot;&gt;&lt;code&gt;AtomicU32::fetch_max&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この組み込み関数の安定化バージョンは、&lt;a href=&quot;../sync/atomic/enum.ordering#variant.Release&quot;&gt; &lt;code&gt;Ordering::Release&lt;/code&gt; &lt;/a&gt;を &lt;code&gt;order&lt;/code&gt; として渡すことにより、 &lt;code&gt;fetch_max&lt;/code&gt; メソッドを介して&lt;a href=&quot;../sync/atomic/index&quot;&gt; &lt;code&gt;atomic&lt;/code&gt; &lt;/a&gt;符号なし整数型で使用できます。たとえば、&lt;a href=&quot;../sync/atomic/struct.atomicu32#method.fetch_max&quot;&gt; &lt;code&gt;AtomicU32::fetch_max&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="0c22889aedce154435ee258d0c40e6448efdbc64" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is available on the &lt;a href=&quot;../sync/atomic/index&quot;&gt;&lt;code&gt;atomic&lt;/code&gt;&lt;/a&gt; unsigned integer types via the &lt;code&gt;fetch_max&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering#variant.SeqCst&quot;&gt;&lt;code&gt;Ordering::SeqCst&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicu32#method.fetch_max&quot;&gt;&lt;code&gt;AtomicU32::fetch_max&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この固有の安定化されたバージョンが利用可能である&lt;a href=&quot;../sync/atomic/index&quot;&gt; &lt;code&gt;atomic&lt;/code&gt; &lt;/a&gt;を介して、符号なし整数型 &lt;code&gt;fetch_max&lt;/code&gt; 通すことによって方法&lt;a href=&quot;../sync/atomic/enum.ordering#variant.SeqCst&quot;&gt; &lt;code&gt;Ordering::SeqCst&lt;/code&gt; &lt;/a&gt;ように &lt;code&gt;order&lt;/code&gt; 。たとえば、&lt;a href=&quot;../sync/atomic/struct.atomicu32#method.fetch_max&quot;&gt; &lt;code&gt;AtomicU32::fetch_max&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="9a58dd280c30118ad91cca00ca18fbb4a646d3fb" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is available on the &lt;a href=&quot;../sync/atomic/index&quot;&gt;&lt;code&gt;atomic&lt;/code&gt;&lt;/a&gt; unsigned integer types via the &lt;code&gt;fetch_min&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering#variant.AcqRel&quot;&gt;&lt;code&gt;Ordering::AcqRel&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicu32#method.fetch_min&quot;&gt;&lt;code&gt;AtomicU32::fetch_min&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この固有の安定化されたバージョンが利用可能である&lt;a href=&quot;../sync/atomic/index&quot;&gt; &lt;code&gt;atomic&lt;/code&gt; &lt;/a&gt;を介して、符号なし整数型 &lt;code&gt;fetch_min&lt;/code&gt; 通すことによって方法&lt;a href=&quot;../sync/atomic/enum.ordering#variant.AcqRel&quot;&gt; &lt;code&gt;Ordering::AcqRel&lt;/code&gt; &lt;/a&gt;ように &lt;code&gt;order&lt;/code&gt; 。たとえば、&lt;a href=&quot;../sync/atomic/struct.atomicu32#method.fetch_min&quot;&gt; &lt;code&gt;AtomicU32::fetch_min&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="89f1a35ffbfc66293f3ecb009316545b57e972fd" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is available on the &lt;a href=&quot;../sync/atomic/index&quot;&gt;&lt;code&gt;atomic&lt;/code&gt;&lt;/a&gt; unsigned integer types via the &lt;code&gt;fetch_min&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering#variant.Acquire&quot;&gt;&lt;code&gt;Ordering::Acquire&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicu32#method.fetch_min&quot;&gt;&lt;code&gt;AtomicU32::fetch_min&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この組み込み関数の安定化バージョンは、&lt;a href=&quot;../sync/atomic/enum.ordering#variant.Acquire&quot;&gt; &lt;code&gt;Ordering::Acquire&lt;/code&gt; &lt;/a&gt;を &lt;code&gt;order&lt;/code&gt; として渡すことにより、 &lt;code&gt;fetch_min&lt;/code&gt; メソッドを介して&lt;a href=&quot;../sync/atomic/index&quot;&gt; &lt;code&gt;atomic&lt;/code&gt; &lt;/a&gt;符号なし整数型で使用できます。たとえば、&lt;a href=&quot;../sync/atomic/struct.atomicu32#method.fetch_min&quot;&gt; &lt;code&gt;AtomicU32::fetch_min&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="6f36baf03828badd5e395776499479459fdf74dd" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is available on the &lt;a href=&quot;../sync/atomic/index&quot;&gt;&lt;code&gt;atomic&lt;/code&gt;&lt;/a&gt; unsigned integer types via the &lt;code&gt;fetch_min&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering#variant.Relaxed&quot;&gt;&lt;code&gt;Ordering::Relaxed&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicu32#method.fetch_min&quot;&gt;&lt;code&gt;AtomicU32::fetch_min&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この組み込み関数の安定化バージョンは、&lt;a href=&quot;../sync/atomic/enum.ordering#variant.Relaxed&quot;&gt; &lt;code&gt;Ordering::Relaxed&lt;/code&gt; &lt;/a&gt;を &lt;code&gt;order&lt;/code&gt; として渡すことにより、 &lt;code&gt;fetch_min&lt;/code&gt; メソッドを介して&lt;a href=&quot;../sync/atomic/index&quot;&gt; &lt;code&gt;atomic&lt;/code&gt; &lt;/a&gt;符号なし整数型で使用できます。たとえば、&lt;a href=&quot;../sync/atomic/struct.atomicu32#method.fetch_min&quot;&gt; &lt;code&gt;AtomicU32::fetch_min&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="d7b26c022d9640d58bf0ee1df55fea1127cc8b08" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is available on the &lt;a href=&quot;../sync/atomic/index&quot;&gt;&lt;code&gt;atomic&lt;/code&gt;&lt;/a&gt; unsigned integer types via the &lt;code&gt;fetch_min&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering#variant.Release&quot;&gt;&lt;code&gt;Ordering::Release&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicu32#method.fetch_min&quot;&gt;&lt;code&gt;AtomicU32::fetch_min&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この組み込み関数の安定化バージョンは、&lt;a href=&quot;../sync/atomic/enum.ordering#variant.Release&quot;&gt; &lt;code&gt;Ordering::Release&lt;/code&gt; &lt;/a&gt;を &lt;code&gt;order&lt;/code&gt; として渡すことにより、 &lt;code&gt;fetch_min&lt;/code&gt; メソッドを介して&lt;a href=&quot;../sync/atomic/index&quot;&gt; &lt;code&gt;atomic&lt;/code&gt; &lt;/a&gt;符号なし整数型で使用できます。たとえば、&lt;a href=&quot;../sync/atomic/struct.atomicu32#method.fetch_min&quot;&gt; &lt;code&gt;AtomicU32::fetch_min&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="b715010a7a857987bd13e4e2c7860444d5f72aff" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is available on the &lt;a href=&quot;../sync/atomic/index&quot;&gt;&lt;code&gt;atomic&lt;/code&gt;&lt;/a&gt; unsigned integer types via the &lt;code&gt;fetch_min&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering#variant.SeqCst&quot;&gt;&lt;code&gt;Ordering::SeqCst&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicu32#method.fetch_min&quot;&gt;&lt;code&gt;AtomicU32::fetch_min&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この固有の安定化されたバージョンが利用可能である&lt;a href=&quot;../sync/atomic/index&quot;&gt; &lt;code&gt;atomic&lt;/code&gt; &lt;/a&gt;を介して、符号なし整数型 &lt;code&gt;fetch_min&lt;/code&gt; 通すことによって方法&lt;a href=&quot;../sync/atomic/enum.ordering#variant.SeqCst&quot;&gt; &lt;code&gt;Ordering::SeqCst&lt;/code&gt; &lt;/a&gt;ように &lt;code&gt;order&lt;/code&gt; 。たとえば、&lt;a href=&quot;../sync/atomic/struct.atomicu32#method.fetch_min&quot;&gt; &lt;code&gt;AtomicU32::fetch_min&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="d5f8d269b525f2aa0c49880dc3986476498a5a32" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is available on the &lt;a href=&quot;../sync/atomic/struct.atomicbool&quot;&gt;&lt;code&gt;AtomicBool&lt;/code&gt;&lt;/a&gt; type via the &lt;code&gt;fetch_nand&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering#variant.AcqRel&quot;&gt;&lt;code&gt;Ordering::AcqRel&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.fetch_nand&quot;&gt;&lt;code&gt;AtomicBool::fetch_nand&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この固有の安定したバージョンがで提供されています&lt;a href=&quot;../sync/atomic/struct.atomicbool&quot;&gt; &lt;code&gt;AtomicBool&lt;/code&gt; の&lt;/a&gt;経由種類 &lt;code&gt;fetch_nand&lt;/code&gt; 渡すことによって、法&lt;a href=&quot;../sync/atomic/enum.ordering#variant.AcqRel&quot;&gt; &lt;code&gt;Ordering::AcqRel&lt;/code&gt; &lt;/a&gt;として &lt;code&gt;order&lt;/code&gt; 。たとえば、&lt;a href=&quot;../sync/atomic/struct.atomicbool#method.fetch_nand&quot;&gt; &lt;code&gt;AtomicBool::fetch_nand&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="45b7d1ba04947e0d60fd8323f25d9cb851df4d45" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is available on the &lt;a href=&quot;../sync/atomic/struct.atomicbool&quot;&gt;&lt;code&gt;AtomicBool&lt;/code&gt;&lt;/a&gt; type via the &lt;code&gt;fetch_nand&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering#variant.Acquire&quot;&gt;&lt;code&gt;Ordering::Acquire&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.fetch_nand&quot;&gt;&lt;code&gt;AtomicBool::fetch_nand&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この固有の安定したバージョンがで提供されています&lt;a href=&quot;../sync/atomic/struct.atomicbool&quot;&gt; &lt;code&gt;AtomicBool&lt;/code&gt; の&lt;/a&gt;経由種類 &lt;code&gt;fetch_nand&lt;/code&gt; 渡すことによって、法&lt;a href=&quot;../sync/atomic/enum.ordering#variant.Acquire&quot;&gt; &lt;code&gt;Ordering::Acquire&lt;/code&gt; &lt;/a&gt;て &lt;code&gt;order&lt;/code&gt; 。たとえば、&lt;a href=&quot;../sync/atomic/struct.atomicbool#method.fetch_nand&quot;&gt; &lt;code&gt;AtomicBool::fetch_nand&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="f0f46b18b5f9509f4b838f2cd1cc47b1cca4ac44" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is available on the &lt;a href=&quot;../sync/atomic/struct.atomicbool&quot;&gt;&lt;code&gt;AtomicBool&lt;/code&gt;&lt;/a&gt; type via the &lt;code&gt;fetch_nand&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering#variant.Relaxed&quot;&gt;&lt;code&gt;Ordering::Relaxed&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.fetch_nand&quot;&gt;&lt;code&gt;AtomicBool::fetch_nand&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この固有の安定したバージョンがで提供されています&lt;a href=&quot;../sync/atomic/struct.atomicbool&quot;&gt; &lt;code&gt;AtomicBool&lt;/code&gt; の&lt;/a&gt;経由種類 &lt;code&gt;fetch_nand&lt;/code&gt; 渡すことによって、法&lt;a href=&quot;../sync/atomic/enum.ordering#variant.Relaxed&quot;&gt; &lt;code&gt;Ordering::Relaxed&lt;/code&gt; &lt;/a&gt;て &lt;code&gt;order&lt;/code&gt; 。たとえば、&lt;a href=&quot;../sync/atomic/struct.atomicbool#method.fetch_nand&quot;&gt; &lt;code&gt;AtomicBool::fetch_nand&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="6eee377d6930faac324afa2f516a7fca7070547e" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is available on the &lt;a href=&quot;../sync/atomic/struct.atomicbool&quot;&gt;&lt;code&gt;AtomicBool&lt;/code&gt;&lt;/a&gt; type via the &lt;code&gt;fetch_nand&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering#variant.Release&quot;&gt;&lt;code&gt;Ordering::Release&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.fetch_nand&quot;&gt;&lt;code&gt;AtomicBool::fetch_nand&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この固有の安定したバージョンがで提供されています&lt;a href=&quot;../sync/atomic/struct.atomicbool&quot;&gt; &lt;code&gt;AtomicBool&lt;/code&gt; の&lt;/a&gt;経由種類 &lt;code&gt;fetch_nand&lt;/code&gt; 渡すことによって、法&lt;a href=&quot;../sync/atomic/enum.ordering#variant.Release&quot;&gt; &lt;code&gt;Ordering::Release&lt;/code&gt; &lt;/a&gt;と &lt;code&gt;order&lt;/code&gt; 。たとえば、&lt;a href=&quot;../sync/atomic/struct.atomicbool#method.fetch_nand&quot;&gt; &lt;code&gt;AtomicBool::fetch_nand&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="c150f5488b1c18a2f570344ce5e7e4fbf333ebdf" translate="yes" xml:space="preserve">
          <source>The stabilized version of this intrinsic is available on the &lt;a href=&quot;../sync/atomic/struct.atomicbool&quot;&gt;&lt;code&gt;AtomicBool&lt;/code&gt;&lt;/a&gt; type via the &lt;code&gt;fetch_nand&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering#variant.SeqCst&quot;&gt;&lt;code&gt;Ordering::SeqCst&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.fetch_nand&quot;&gt;&lt;code&gt;AtomicBool::fetch_nand&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この固有の安定したバージョンがで提供されています&lt;a href=&quot;../sync/atomic/struct.atomicbool&quot;&gt; &lt;code&gt;AtomicBool&lt;/code&gt; の&lt;/a&gt;経由種類 &lt;code&gt;fetch_nand&lt;/code&gt; 渡すことによって、法&lt;a href=&quot;../sync/atomic/enum.ordering#variant.SeqCst&quot;&gt; &lt;code&gt;Ordering::SeqCst&lt;/code&gt; &lt;/a&gt;として &lt;code&gt;order&lt;/code&gt; 。たとえば、&lt;a href=&quot;../sync/atomic/struct.atomicbool#method.fetch_nand&quot;&gt; &lt;code&gt;AtomicBool::fetch_nand&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="4467e4d025c942d0e46a8d42d28e9cb70772aadf" translate="yes" xml:space="preserve">
          <source>The stabilized versions of this intrinsic are available on the integer primitives via the &lt;code&gt;count_ones&lt;/code&gt; method. For example, &lt;a href=&quot;../primitive.u32#method.count_ones&quot;&gt;&lt;code&gt;u32::count_ones&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">この組み込み関数の安定化バージョンは、 &lt;code&gt;count_ones&lt;/code&gt; メソッドを介して整数プリミティブで使用できます。たとえば、&lt;a href=&quot;../primitive.u32#method.count_ones&quot;&gt; &lt;code&gt;u32::count_ones&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f49764c7bf099d11524ff3ae31ea8122bd687603" translate="yes" xml:space="preserve">
          <source>The stabilized versions of this intrinsic are available on the integer primitives via the &lt;code&gt;leading_zeros&lt;/code&gt; method. For example, &lt;a href=&quot;../primitive.u32#method.leading_zeros&quot;&gt;&lt;code&gt;u32::leading_zeros&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">この組み込み関数の安定化バージョンは、 &lt;code&gt;leading_zeros&lt;/code&gt; メソッドを介して整数プリミティブで使用できます。たとえば、&lt;a href=&quot;../primitive.u32#method.leading_zeros&quot;&gt; &lt;code&gt;u32::leading_zeros&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="94453dce8a2a385d273d4c54481b7123c231b9e1" translate="yes" xml:space="preserve">
          <source>The stabilized versions of this intrinsic are available on the integer primitives via the &lt;code&gt;overflowing_add&lt;/code&gt; method. For example, &lt;a href=&quot;../primitive.u32#method.overflowing_add&quot;&gt;&lt;code&gt;u32::overflowing_add&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">この組み込み関数の安定化バージョンは、 &lt;code&gt;overflowing_add&lt;/code&gt; メソッドを介して整数プリミティブで使用できます。たとえば、&lt;a href=&quot;../primitive.u32#method.overflowing_add&quot;&gt; &lt;code&gt;u32::overflowing_add&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="975a6bc8f0eb314f9e1b240024dd857b1481fb4f" translate="yes" xml:space="preserve">
          <source>The stabilized versions of this intrinsic are available on the integer primitives via the &lt;code&gt;overflowing_mul&lt;/code&gt; method. For example, &lt;a href=&quot;../primitive.u32#method.overflowing_mul&quot;&gt;&lt;code&gt;u32::overflowing_mul&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">この組み込み関数の安定化バージョンは、 &lt;code&gt;overflowing_mul&lt;/code&gt; メソッドを介して整数プリミティブで使用できます。たとえば、&lt;a href=&quot;../primitive.u32#method.overflowing_mul&quot;&gt; &lt;code&gt;u32::overflowing_mul&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="05ac2c8d4649564823e71195e6e1991816e3c134" translate="yes" xml:space="preserve">
          <source>The stabilized versions of this intrinsic are available on the integer primitives via the &lt;code&gt;overflowing_sub&lt;/code&gt; method. For example, &lt;a href=&quot;../primitive.u32#method.overflowing_sub&quot;&gt;&lt;code&gt;u32::overflowing_sub&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">この組み込み関数の安定化バージョンは、 &lt;code&gt;overflowing_sub&lt;/code&gt; メソッドを介して整数プリミティブで使用できます。たとえば、&lt;a href=&quot;../primitive.u32#method.overflowing_sub&quot;&gt; &lt;code&gt;u32::overflowing_sub&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="cea1555efef9a893424297cca53eccdff2cb4c12" translate="yes" xml:space="preserve">
          <source>The stabilized versions of this intrinsic are available on the integer primitives via the &lt;code&gt;reverse_bits&lt;/code&gt; method. For example, &lt;a href=&quot;../primitive.u32#method.reverse_bits&quot;&gt;&lt;code&gt;u32::reverse_bits&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">この組み込み関数の安定化バージョンは、 &lt;code&gt;reverse_bits&lt;/code&gt; メソッドを介して整数プリミティブで使用できます。たとえば、&lt;a href=&quot;../primitive.u32#method.reverse_bits&quot;&gt; &lt;code&gt;u32::reverse_bits&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="02b9a60eaad995a8b508e08e5f720afcfb3cdf4f" translate="yes" xml:space="preserve">
          <source>The stabilized versions of this intrinsic are available on the integer primitives via the &lt;code&gt;rotate_left&lt;/code&gt; method. For example, &lt;a href=&quot;../primitive.u32#method.rotate_left&quot;&gt;&lt;code&gt;u32::rotate_left&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">この組み込み関数の安定化バージョンは、 &lt;code&gt;rotate_left&lt;/code&gt; メソッドを介して整数プリミティブで使用できます。たとえば、&lt;a href=&quot;../primitive.u32#method.rotate_left&quot;&gt; &lt;code&gt;u32::rotate_left&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a39d8d5e922a37bc7cb7a4273c351e3237285524" translate="yes" xml:space="preserve">
          <source>The stabilized versions of this intrinsic are available on the integer primitives via the &lt;code&gt;rotate_right&lt;/code&gt; method. For example, &lt;a href=&quot;../primitive.u32#method.rotate_right&quot;&gt;&lt;code&gt;u32::rotate_right&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">この組み込み関数の安定化バージョンは、 &lt;code&gt;rotate_right&lt;/code&gt; メソッドを介して整数プリミティブで使用できます。たとえば、&lt;a href=&quot;../primitive.u32#method.rotate_right&quot;&gt; &lt;code&gt;u32::rotate_right&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1c9cb80ab093ca12a015c158de3a354687ef2774" translate="yes" xml:space="preserve">
          <source>The stabilized versions of this intrinsic are available on the integer primitives via the &lt;code&gt;saturating_add&lt;/code&gt; method. For example, &lt;a href=&quot;../primitive.u32#method.saturating_add&quot;&gt;&lt;code&gt;u32::saturating_add&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">この組み込み関数の安定化バージョンは、 &lt;code&gt;saturating_add&lt;/code&gt; メソッドを介して整数プリミティブで使用できます。たとえば、&lt;a href=&quot;../primitive.u32#method.saturating_add&quot;&gt; &lt;code&gt;u32::saturating_add&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="0dfb3fdba827a384aada0939a551d1f733164685" translate="yes" xml:space="preserve">
          <source>The stabilized versions of this intrinsic are available on the integer primitives via the &lt;code&gt;saturating_sub&lt;/code&gt; method. For example, &lt;a href=&quot;../primitive.u32#method.saturating_sub&quot;&gt;&lt;code&gt;u32::saturating_sub&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">この組み込み関数の安定化バージョンは、 &lt;code&gt;saturating_sub&lt;/code&gt; メソッドを介して整数プリミティブで使用できます。たとえば、&lt;a href=&quot;../primitive.u32#method.saturating_sub&quot;&gt; &lt;code&gt;u32::saturating_sub&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7476e3eb126b1478bcad495831ba6637eb3d2b14" translate="yes" xml:space="preserve">
          <source>The stabilized versions of this intrinsic are available on the integer primitives via the &lt;code&gt;swap_bytes&lt;/code&gt; method. For example, &lt;a href=&quot;../primitive.u32#method.swap_bytes&quot;&gt;&lt;code&gt;u32::swap_bytes&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">この組み込み関数の安定化バージョンは、 &lt;code&gt;swap_bytes&lt;/code&gt; メソッドを介して整数プリミティブで使用できます。たとえば、&lt;a href=&quot;../primitive.u32#method.swap_bytes&quot;&gt; &lt;code&gt;u32::swap_bytes&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e398694f9fea1333665249a1e9c25a4d94f59367" translate="yes" xml:space="preserve">
          <source>The stabilized versions of this intrinsic are available on the integer primitives via the &lt;code&gt;trailing_zeros&lt;/code&gt; method. For example, &lt;a href=&quot;../primitive.u32#method.trailing_zeros&quot;&gt;&lt;code&gt;u32::trailing_zeros&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">この組み込み関数の安定化バージョンは、 &lt;code&gt;trailing_zeros&lt;/code&gt; メソッドを介して整数プリミティブで使用できます。たとえば、&lt;a href=&quot;../primitive.u32#method.trailing_zeros&quot;&gt; &lt;code&gt;u32::trailing_zeros&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7c77154ad25fdd3e2bc406487defdcb53ca75726" translate="yes" xml:space="preserve">
          <source>The stabilized versions of this intrinsic are available on the integer primitives via the &lt;code&gt;wrapping_add&lt;/code&gt; method. For example, &lt;a href=&quot;../primitive.u32#method.wrapping_add&quot;&gt;&lt;code&gt;u32::wrapping_add&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">この組み込み関数の安定化バージョンは、 &lt;code&gt;wrapping_add&lt;/code&gt; メソッドを介して整数プリミティブで使用できます。たとえば、&lt;a href=&quot;../primitive.u32#method.wrapping_add&quot;&gt; &lt;code&gt;u32::wrapping_add&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="fc2b20ca06dc1c8110b4d0397b1994d813ffed56" translate="yes" xml:space="preserve">
          <source>The stabilized versions of this intrinsic are available on the integer primitives via the &lt;code&gt;wrapping_mul&lt;/code&gt; method. For example, &lt;a href=&quot;../primitive.u32#method.wrapping_mul&quot;&gt;&lt;code&gt;u32::wrapping_mul&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">この組み込み関数の安定化バージョンは、 &lt;code&gt;wrapping_mul&lt;/code&gt; メソッドを介して整数プリミティブで使用できます。たとえば、&lt;a href=&quot;../primitive.u32#method.wrapping_mul&quot;&gt; &lt;code&gt;u32::wrapping_mul&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="00df89161b3ee01f6671c6eedc0e25647116beb0" translate="yes" xml:space="preserve">
          <source>The stabilized versions of this intrinsic are available on the integer primitives via the &lt;code&gt;wrapping_sub&lt;/code&gt; method. For example, &lt;a href=&quot;../primitive.u32#method.wrapping_sub&quot;&gt;&lt;code&gt;u32::wrapping_sub&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">この組み込み関数の安定化バージョンは、 &lt;code&gt;wrapping_sub&lt;/code&gt; メソッドを介して整数プリミティブで使用できます。たとえば、&lt;a href=&quot;../primitive.u32#method.wrapping_sub&quot;&gt; &lt;code&gt;u32::wrapping_sub&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="07e69ca4af06caf0678a0eb7f58dbb4160ebfce9" translate="yes" xml:space="preserve">
          <source>The standard library API documentation describes methods that vectors, strings, and hash maps have that will be helpful for these exercises!</source>
          <target state="translated">標準ライブラリAPIのドキュメントには、これらの演習に役立つであろうベクトル、文字列、ハッシュマップが持つメソッドが記述されています!</target>
        </trans-unit>
        <trans-unit id="ecfac3d3b7b498f942f6cc167a3014bcca50e8db" translate="yes" xml:space="preserve">
          <source>The standard library also provides a &lt;code&gt;Wrapping&amp;lt;T&amp;gt;&lt;/code&gt; newtype which ensures all standard arithmetic operations for &lt;code&gt;T&lt;/code&gt; have wrapping semantics.</source>
          <target state="translated">標準ライブラリも提供 &lt;code&gt;Wrapping&amp;lt;T&amp;gt;&lt;/code&gt; のためのすべての標準的な演算を保証するのnewtype &lt;code&gt;T&lt;/code&gt; はラッピングセマンティクスを持っています。</target>
        </trans-unit>
        <trans-unit id="e62bb358494cb55da1b597b5302098f7179da4a8" translate="yes" xml:space="preserve">
          <source>The standard library contains additional 'smart pointer' types beyond references and raw pointers.</source>
          <target state="translated">標準ライブラリには、参照や生ポインタ以外の「スマートポインタ」型が追加されています。</target>
        </trans-unit>
        <trans-unit id="4aeb001acf27f60d5c3f4949174f0ea7b98815a0" translate="yes" xml:space="preserve">
          <source>The standard library documentation for the &lt;code&gt;env::args&lt;/code&gt; function shows that the type of the iterator it returns is &lt;code&gt;std::env::Args&lt;/code&gt;. We&amp;rsquo;ve updated the signature of the &lt;code&gt;Config::new&lt;/code&gt; function so the parameter &lt;code&gt;args&lt;/code&gt; has the type &lt;code&gt;std::env::Args&lt;/code&gt; instead of &lt;code&gt;&amp;amp;[String]&lt;/code&gt;. Because we&amp;rsquo;re taking ownership of &lt;code&gt;args&lt;/code&gt; and we&amp;rsquo;ll be mutating &lt;code&gt;args&lt;/code&gt; by iterating over it, we can add the &lt;code&gt;mut&lt;/code&gt; keyword into the specification of the &lt;code&gt;args&lt;/code&gt; parameter to make it mutable.</source>
          <target state="translated">&lt;code&gt;env::args&lt;/code&gt; 関数の標準ライブラリのドキュメントは、それが返すイテレータのタイプが &lt;code&gt;std::env::Args&lt;/code&gt; ことを示しています。 &lt;code&gt;Config::new&lt;/code&gt; 関数のシグネチャを更新して、パラメーター &lt;code&gt;args&lt;/code&gt; の型が &lt;code&gt;&amp;amp;[String]&lt;/code&gt; ではなく &lt;code&gt;std::env::Args&lt;/code&gt; ようにしました。我々はの所有権取っているので &lt;code&gt;args&lt;/code&gt; 、我々が変異することがあります &lt;code&gt;args&lt;/code&gt; 、反復処理を行うことで、我々は、追加することができます &lt;code&gt;mut&lt;/code&gt; の仕様にキーワードを &lt;code&gt;args&lt;/code&gt; それを可変にするパラメータ。</target>
        </trans-unit>
        <trans-unit id="0ac01984afb710ebee7af9fdef959461335b5771" translate="yes" xml:space="preserve">
          <source>The standard library does &lt;em&gt;not&lt;/em&gt; automatically wait on child processes (not even if the &lt;code&gt;Child&lt;/code&gt; is dropped), it is up to the application developer to do so. As a consequence, dropping &lt;code&gt;Child&lt;/code&gt; handles without waiting on them first is not recommended in long-running applications.</source>
          <target state="translated">標準ライブラリは子プロセスを自動的に待機しませ&lt;em&gt;ん&lt;/em&gt;（ &lt;code&gt;Child&lt;/code&gt; がドロップされた場合でも）。待機するかどうかはアプリケーション開発者に任されています。結果として、最初にそれらを待たずに &lt;code&gt;Child&lt;/code&gt; ハンドルをドロップすることは、長時間実行されるアプリケーションでは推奨されません。</target>
        </trans-unit>
        <trans-unit id="c3da8861a8cd359749d019429f14004546548517" translate="yes" xml:space="preserve">
          <source>The standard library exports many modules &lt;em&gt;with the same name as primitive types&lt;/em&gt;. These define additional items related to the primitive type, but not the all-important methods.</source>
          <target state="translated">標準ライブラリは&lt;em&gt;、プリミティブ型と同じ名前の&lt;/em&gt;多くのモジュール&lt;em&gt;を&lt;/em&gt;エクスポートし&lt;em&gt;ます&lt;/em&gt;。これらは、プリミティブ型に関連する追加の項目を定義しますが、重要なメソッドは定義しません。</target>
        </trans-unit>
        <trans-unit id="be570bfc11d12183d4ccfc099e5e91a1312fadce" translate="yes" xml:space="preserve">
          <source>The standard library exposes three common ways to deal with contiguous regions of memory:</source>
          <target state="translated">標準ライブラリは、メモリの連続領域を扱う3つの一般的な方法を公開しています。</target>
        </trans-unit>
        <trans-unit id="d66210e7b423f4f4e31543419e308e2c95ac4c07" translate="yes" xml:space="preserve">
          <source>The standard library has other types that provide interior mutability, such as &lt;code&gt;Cell&amp;lt;T&amp;gt;&lt;/code&gt;, which is similar except that instead of giving references to the inner value, the value is copied in and out of the &lt;code&gt;Cell&amp;lt;T&amp;gt;&lt;/code&gt;. There&amp;rsquo;s also &lt;code&gt;Mutex&amp;lt;T&amp;gt;&lt;/code&gt;, which offers interior mutability that&amp;rsquo;s safe to use across threads; we&amp;rsquo;ll discuss its use in Chapter 16. Check out the standard library docs for more details on the differences between these types.</source>
          <target state="translated">標準ライブラリには、 &lt;code&gt;Cell&amp;lt;T&amp;gt;&lt;/code&gt; などの内部の可変性を提供する他のタイプがあります。これは、内部値への参照を与える代わりに、値が &lt;code&gt;Cell&amp;lt;T&amp;gt;&lt;/code&gt; 内外にコピーされることを除いて同様です。スレッド間で安全に使用できる内部の可変性を提供する &lt;code&gt;Mutex&amp;lt;T&amp;gt;&lt;/code&gt; もあります。これらのタイプの違いの詳細については、標準ライブラリのドキュメントを確認してください。</target>
        </trans-unit>
        <trans-unit id="a3eb5ea324c5e016fa7225e0db42ddd0287496a0" translate="yes" xml:space="preserve">
          <source>The standard library implements some I/O traits on various types which are commonly used as a buffer, like &lt;code&gt;Cursor&amp;lt;&lt;/code&gt;&lt;a href=&quot;../vec/struct.vec&quot;&gt;&lt;code&gt;Vec&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;u8&amp;gt;&amp;gt;&lt;/code&gt; and &lt;code&gt;Cursor&amp;lt;&lt;/code&gt;&lt;a href=&quot;../primitive.slice&quot;&gt;&lt;code&gt;&amp;amp;[u8]&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">標準ライブラリは、 &lt;code&gt;Cursor&amp;lt;&lt;/code&gt; &lt;a href=&quot;../vec/struct.vec&quot;&gt; &lt;code&gt;Vec&lt;/code&gt; &lt;/a&gt; &lt;code&gt;&amp;lt;u8&amp;gt;&amp;gt;&lt;/code&gt; や &lt;code&gt;Cursor&amp;lt;&lt;/code&gt; &lt;a href=&quot;../primitive.slice&quot;&gt; &lt;code&gt;&amp;amp;[u8]&lt;/code&gt; &lt;/a&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; のように、一般的にバッファとして使用されるさまざまなタイプのI / O特性を実装しています。</target>
        </trans-unit>
        <trans-unit id="bac69e8dd1e3e493ce33a798e654cad2d62974e3" translate="yes" xml:space="preserve">
          <source>The standard library implements some I/O traits on various types which are commonly used as a buffer, like &lt;code&gt;Cursor&amp;lt;&lt;/code&gt;&lt;a href=&quot;../vec/struct.vec&quot;&gt;&lt;code&gt;Vec&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;u8&amp;gt;&amp;gt;&lt;/code&gt; and &lt;code&gt;Cursor&amp;lt;&lt;/code&gt;&lt;a href=&quot;../slice/index&quot;&gt;&lt;code&gt;&amp;amp;[u8]&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">標準ライブラリは、 &lt;code&gt;Cursor&amp;lt;&lt;/code&gt; &lt;a href=&quot;../vec/struct.vec&quot;&gt; &lt;code&gt;Vec&lt;/code&gt; &lt;/a&gt; &lt;code&gt;&amp;lt;u8&amp;gt;&amp;gt;&lt;/code&gt; や &lt;code&gt;Cursor&amp;lt;&lt;/code&gt; &lt;a href=&quot;../slice/index&quot;&gt; &lt;code&gt;&amp;amp;[u8]&lt;/code&gt; &lt;/a&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; など、バッファとして一般的に使用されるさまざまなタイプにいくつかのI / O特性を実装しています。</target>
        </trans-unit>
        <trans-unit id="cd43fc91f30c20105f33015f4862eaa4ba469ffd" translate="yes" xml:space="preserve">
          <source>The standard library in general strives to support both statically linked and dynamically linked C runtimes for targets as appropriate. For example the &lt;code&gt;x86_64-pc-windows-msvc&lt;/code&gt; and &lt;code&gt;x86_64-unknown-linux-musl&lt;/code&gt; targets typically come with both runtimes and the user selects which one they'd like. All targets in the compiler have a default mode of linking to the C runtime. Typically targets are linked dynamically by default, but there are exceptions which are static by default such as:</source>
          <target state="translated">一般に、標準ライブラリは、静的にリンクされたCランタイムと動的にリンクされたCランタイムの両方を適切にサポートするよう努めています。たとえば、 &lt;code&gt;x86_64-pc-windows-msvc&lt;/code&gt; および &lt;code&gt;x86_64-unknown-linux-musl&lt;/code&gt; ターゲットには通常、両方のランタイムが付属しており、ユーザーはどちらを使用するかを選択します。コンパイラーのすべてのターゲットには、Cランタイムにリンクするデフォルトのモードがあります。通常、ターゲットはデフォルトで動的にリンクされますが、次のようなデフォルトで静的な例外があります。</target>
        </trans-unit>
        <trans-unit id="e62009a1ff01cf79d8a5846c788aa68bf271141c" translate="yes" xml:space="preserve">
          <source>The standard library provides an implementation of &lt;code&gt;panic_handler&lt;/code&gt; that defaults to unwinding the stack but that can be &lt;a href=&quot;../book/ch09-01-unrecoverable-errors-with-panic&quot;&gt;changed to abort the process&lt;/a&gt;. The standard library's panic behavior can be modified at runtime with the &lt;a href=&quot;../std/panic/fn.set_hook&quot;&gt;set_hook&lt;/a&gt; function.</source>
          <target state="translated">標準ライブラリは、デフォルトでスタックの巻き戻しを行う &lt;code&gt;panic_handler&lt;/code&gt; の実装を提供しますが&lt;a href=&quot;../book/ch09-01-unrecoverable-errors-with-panic&quot;&gt;、プロセスを中止&lt;/a&gt;するように変更できます。標準ライブラリのパニック動作は、&lt;a href=&quot;../std/panic/fn.set_hook&quot;&gt;set_hook&lt;/a&gt;関数を使用して実行時に変更できます。</target>
        </trans-unit>
        <trans-unit id="a6bfe00112d50ce1df3b69fa8e0f97c99e921c7e" translate="yes" xml:space="preserve">
          <source>The standard library&amp;rsquo;s &lt;code&gt;Add&lt;/code&gt; trait is an example of the second purpose: usually, you&amp;rsquo;ll add two like types, but the &lt;code&gt;Add&lt;/code&gt; trait provides the ability to customize beyond that. Using a default type parameter in the &lt;code&gt;Add&lt;/code&gt; trait definition means you don&amp;rsquo;t have to specify the extra parameter most of the time. In other words, a bit of implementation boilerplate isn&amp;rsquo;t needed, making it easier to use the trait.</source>
          <target state="translated">標準ライブラリの &lt;code&gt;Add&lt;/code&gt; トレイトは、2番目の目的の例です。通常、2つのタイプを追加しますが、 &lt;code&gt;Add&lt;/code&gt; トレイトはそれ以上にカスタマイズする機能を提供します。 &lt;code&gt;Add&lt;/code&gt; トレイト定義でデフォルトのタイプパラメータを使用すると、ほとんどの場合、追加のパラメータを指定する必要がなくなります。言い換えれば、少しボイラープレートを実装する必要がなく、トレイトを使いやすくしています。</target>
        </trans-unit>
        <trans-unit id="0eb239c2b2b429ca2fb24dfb5a68ef2028451c54" translate="yes" xml:space="preserve">
          <source>The start and end of the string (when &lt;code&gt;index == self.len()&lt;/code&gt;) are considered to be boundaries.</source>
          <target state="translated">文字列の開始と終了（ &lt;code&gt;index == self.len()&lt;/code&gt; ）は境界と見なされます。</target>
        </trans-unit>
        <trans-unit id="cc00d65ec1e11702c522241a5699948a50675d34" translate="yes" xml:space="preserve">
          <source>The starting index must come before the ending index;</source>
          <target state="translated">開始インデックスは、終了インデックスの前に来なければなりません。</target>
        </trans-unit>
        <trans-unit id="7d09dcb9f35a47d4d0374a51c368ed9570b886f1" translate="yes" xml:space="preserve">
          <source>The starting index must not exceed the ending index;</source>
          <target state="translated">開始インデックスは、終了インデックスを超えてはならない。</target>
        </trans-unit>
        <trans-unit id="71f319cd135ed3830fb0df0009e873ba0d9d3bd8" translate="yes" xml:space="preserve">
          <source>The static initializer is a &lt;a href=&quot;../const_eval#constant-expressions&quot;&gt;constant expression&lt;/a&gt; evaluated at compile time. Static initializers may refer to other statics.</source>
          <target state="translated">静的初期化子は、コンパイル時に評価される&lt;a href=&quot;../const_eval#constant-expressions&quot;&gt;定数式&lt;/a&gt;です。静的初期化子は、他の静的を参照する場合があります。</target>
        </trans-unit>
        <trans-unit id="37ec0e6627e56520c118b2a4c9fe270333b4a9ac" translate="yes" xml:space="preserve">
          <source>The status (exit code) of the process.</source>
          <target state="translated">プロセスの状態(終了コード)。</target>
        </trans-unit>
        <trans-unit id="2deb263189905df596d3c94b6a6e46fb7fad91f4" translate="yes" xml:space="preserve">
          <source>The status code 200 is the standard success response. The text is a tiny successful HTTP response. Let&amp;rsquo;s write this to the stream as our response to a successful request! From the &lt;code&gt;handle_connection&lt;/code&gt; function, remove the &lt;code&gt;println!&lt;/code&gt; that was printing the request data and replace it with the code in Listing 20-3.</source>
          <target state="translated">ステータスコード200は、標準の成功応答です。テキストは小さな成功したHTTP応答です。これを、成功した要求への応答としてストリームに書き込みましょう！ &lt;code&gt;handle_connection&lt;/code&gt; 関数から、 &lt;code&gt;println!&lt;/code&gt; を削除します。これはリクエストデータを出力し、リスト20-3のコードに置き換えます。</target>
        </trans-unit>
        <trans-unit id="121dc7dfe8e1f05a50f59cc42ea3919e004fbd87" translate="yes" xml:space="preserve">
          <source>The stdin handle to the child process, if any, will be closed before waiting. This helps avoid deadlock: it ensures that the child does not block waiting for input from the parent, while the parent waits for the child to exit.</source>
          <target state="translated">子プロセスへの標準入力ハンドルがある場合は、待機する前に閉じられます。これはデッドロックを回避するのに役立ちます。 親プロセスが子プロセスの終了を待っている間、子プロセスが親プロセスからの入力待ちをブロックしないようにします。</target>
        </trans-unit>
        <trans-unit id="9e925de820aa28eb2278cfb5b172897339fec44e" translate="yes" xml:space="preserve">
          <source>The stem is:</source>
          <target state="translated">ステムは</target>
        </trans-unit>
        <trans-unit id="f0b062427634e6f3b4d22b8847d4a85e632115c3" translate="yes" xml:space="preserve">
          <source>The stream of &lt;a href=&quot;enum.searchstep#variant.Match&quot;&gt;&lt;code&gt;Match&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;enum.searchstep#variant.Reject&quot;&gt;&lt;code&gt;Reject&lt;/code&gt;&lt;/a&gt; values up to a &lt;a href=&quot;enum.searchstep#variant.Done&quot;&gt;&lt;code&gt;Done&lt;/code&gt;&lt;/a&gt; will contain index ranges that are adjacent, non-overlapping, covering the whole haystack, and laying on utf8 boundaries.</source>
          <target state="translated">&lt;a href=&quot;enum.searchstep#variant.Done&quot;&gt; &lt;code&gt;Done&lt;/code&gt; &lt;/a&gt;までの&lt;a href=&quot;enum.searchstep#variant.Match&quot;&gt; &lt;code&gt;Match&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;enum.searchstep#variant.Reject&quot;&gt; &lt;code&gt;Reject&lt;/code&gt; &lt;/a&gt;値のストリームには、隣接し、重複せず、干し草の山全体をカバーし、utf8境界に配置されるインデックス範囲が含まれます。</target>
        </trans-unit>
        <trans-unit id="29cd101b0d8222a260b75e7043b8f85140377fdb" translate="yes" xml:space="preserve">
          <source>The stream of &lt;code&gt;Match&lt;/code&gt; and &lt;code&gt;Reject&lt;/code&gt; values up to a &lt;code&gt;Done&lt;/code&gt; will contain index ranges that are adjacent, non-overlapping, covering the whole haystack, and laying on utf8 boundaries.</source>
          <target state="translated">&lt;code&gt;Done&lt;/code&gt; までの &lt;code&gt;Match&lt;/code&gt; および &lt;code&gt;Reject&lt;/code&gt; 値のストリームには、隣接する重複しないインデックス範囲が含まれ、干し草全体をカバーし、utf8境界に配置されます。</target>
        </trans-unit>
        <trans-unit id="fe598c8b995968505dc48317e5f0bc507dd1c32a" translate="yes" xml:space="preserve">
          <source>The stream typically has a fixed size, allowing seeking relative to either end or the current offset.</source>
          <target state="translated">ストリームは通常、固定サイズを持ち、どちらかの端または現在のオフセットからの相対的なシークを可能にします。</target>
        </trans-unit>
        <trans-unit id="3f8a9a233edfd6e32f4b57b8721cdb5b1b1aca0a" translate="yes" xml:space="preserve">
          <source>The string &lt;code&gt;s3&lt;/code&gt; will contain &lt;code&gt;Hello, world!&lt;/code&gt; as a result of this code. The reason &lt;code&gt;s1&lt;/code&gt; is no longer valid after the addition and the reason we used a reference to &lt;code&gt;s2&lt;/code&gt; has to do with the signature of the method that gets called when we use the &lt;code&gt;+&lt;/code&gt; operator. The &lt;code&gt;+&lt;/code&gt; operator uses the &lt;code&gt;add&lt;/code&gt; method, whose signature looks something like this:</source>
          <target state="translated">文字列 &lt;code&gt;s3&lt;/code&gt; には &lt;code&gt;Hello, world!&lt;/code&gt; が含まれます。このコードの結果として。理由 &lt;code&gt;s1&lt;/code&gt; はさらに、我々はを参照する使用の理由の後にはもはや有効ではない &lt;code&gt;s2&lt;/code&gt; が、我々が使用したときに呼び出されるメソッドのシグネチャに関係している &lt;code&gt;+&lt;/code&gt; の演算子を。 &lt;code&gt;+&lt;/code&gt; の演算子は、使用する &lt;code&gt;add&lt;/code&gt; その署名次のようになります方法を、：</target>
        </trans-unit>
        <trans-unit id="00f2d10e6fe0131d33ac9bca9a600be0160e329e" translate="yes" xml:space="preserve">
          <source>The string Pattern API.</source>
          <target state="translated">文字列パターンAPI。</target>
        </trans-unit>
        <trans-unit id="12fed2044893f571a9f644790505d48a15787f1f" translate="yes" xml:space="preserve">
          <source>The string is expected to be an optional &lt;code&gt;+&lt;/code&gt; or &lt;code&gt;-&lt;/code&gt; sign followed by digits. Leading and trailing whitespace represent an error. Digits are a subset of these characters, depending on &lt;code&gt;radix&lt;/code&gt;:</source>
          <target state="translated">文字列は、オプションの &lt;code&gt;+&lt;/code&gt; または &lt;code&gt;-&lt;/code&gt; 記号とそれに続く数字であることが期待されます。先頭と末尾の空白はエラーを表します。数字は、 &lt;code&gt;radix&lt;/code&gt; に応じて、これらの文字のサブセットです。</target>
        </trans-unit>
        <trans-unit id="c23316acb8db6205270f951b08328de7cc2d92db" translate="yes" xml:space="preserve">
          <source>The string is expected to be an optional &lt;code&gt;+&lt;/code&gt; sign followed by digits. Leading and trailing whitespace represent an error. Digits are a subset of these characters, depending on &lt;code&gt;radix&lt;/code&gt;:</source>
          <target state="translated">文字列は、オプションの &lt;code&gt;+&lt;/code&gt; 記号とそれに続く数字であることが期待されます。先頭と末尾の空白はエラーを表します。数字は、 &lt;code&gt;radix&lt;/code&gt; に応じて、これらの文字のサブセットです。</target>
        </trans-unit>
        <trans-unit id="468f8218bbd425a57c6d5b5fde91fdb78d951a69" translate="yes" xml:space="preserve">
          <source>The string on the right-hand side is only borrowed; its contents are copied into the returned &lt;code&gt;String&lt;/code&gt;.</source>
          <target state="translated">右側の弦は借りただけです。その内容は、返された &lt;code&gt;String&lt;/code&gt; にコピーされます。</target>
        </trans-unit>
        <trans-unit id="86da74512bec8006d79316da49e5b54d47ae707d" translate="yes" xml:space="preserve">
          <source>The string will be able to hold exactly &lt;code&gt;capacity&lt;/code&gt; length units of other OS strings without reallocating. If &lt;code&gt;capacity&lt;/code&gt; is 0, the string will not allocate.</source>
          <target state="translated">文字列は、再割り当てすることなく、他のOS文字列の &lt;code&gt;capacity&lt;/code&gt; 長単位を正確に保持できます。場合は &lt;code&gt;capacity&lt;/code&gt; 0で、文字列が割り当てられないでしょう。</target>
        </trans-unit>
        <trans-unit id="b6f927907143ca3f662c21fec70de91f1f0df225" translate="yes" xml:space="preserve">
          <source>The struct &lt;code&gt;PointList&lt;/code&gt; cannot implement &lt;code&gt;Copy&lt;/code&gt;, because &lt;a href=&quot;../vec/struct.vec&quot;&gt;&lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; is not &lt;code&gt;Copy&lt;/code&gt;. If we attempt to derive a &lt;code&gt;Copy&lt;/code&gt; implementation, we'll get an error:</source>
          <target state="translated">&lt;a href=&quot;../vec/struct.vec&quot;&gt; &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; &lt;/a&gt;は &lt;code&gt;Copy&lt;/code&gt; ではないため、構造体 &lt;code&gt;PointList&lt;/code&gt; は &lt;code&gt;Copy&lt;/code&gt; を実装できません。 &lt;code&gt;Copy&lt;/code&gt; 実装を派生させようとすると、エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="5c8326afa9ea5c7b5b28789d2c040dda354125af" translate="yes" xml:space="preserve">
          <source>The struct is marked &lt;code&gt;pub&lt;/code&gt; so that other code can use it, but the fields within the struct remain private. This is important in this case because we want to ensure that whenever a value is added or removed from the list, the average is also updated. We do this by implementing &lt;code&gt;add&lt;/code&gt;, &lt;code&gt;remove&lt;/code&gt;, and &lt;code&gt;average&lt;/code&gt; methods on the struct, as shown in Listing 17-2:</source>
          <target state="translated">他のコードが使用できるように、構造体は &lt;code&gt;pub&lt;/code&gt; とマークされていますが、構造体内のフィールドはプライベートのままです。この場合、これは重要です。値がリストに追加またはリストから削除されるたびに、平均値も更新されるようにするためです。リスト17-2で示されるように、構造体に &lt;code&gt;add&lt;/code&gt; 、 &lt;code&gt;remove&lt;/code&gt; 、および &lt;code&gt;average&lt;/code&gt; メソッドを実装することでこれを行います。</target>
        </trans-unit>
        <trans-unit id="9c1c27f7e80229e155110850a64cfa98b9973379" translate="yes" xml:space="preserve">
          <source>The struct must only be &lt;a href=&quot;../marker/trait.unpin&quot;&gt;&lt;code&gt;Unpin&lt;/code&gt;&lt;/a&gt; if all the structural fields are &lt;a href=&quot;../marker/trait.unpin&quot;&gt;&lt;code&gt;Unpin&lt;/code&gt;&lt;/a&gt;. This is the default, but &lt;a href=&quot;../marker/trait.unpin&quot;&gt;&lt;code&gt;Unpin&lt;/code&gt;&lt;/a&gt; is a safe trait, so as the author of the struct it is your responsibility &lt;em&gt;not&lt;/em&gt; to add something like &lt;code&gt;impl&amp;lt;T&amp;gt; Unpin for Struct&amp;lt;T&amp;gt;&lt;/code&gt;. (Notice that adding a projection operation requires unsafe code, so the fact that &lt;a href=&quot;../marker/trait.unpin&quot;&gt;&lt;code&gt;Unpin&lt;/code&gt;&lt;/a&gt; is a safe trait does not break the principle that you only have to worry about any of this if you use &lt;code&gt;unsafe&lt;/code&gt;.)</source>
          <target state="translated">すべての構造体フィールドが&lt;a href=&quot;../marker/trait.unpin&quot;&gt; &lt;code&gt;Unpin&lt;/code&gt; である&lt;/a&gt;場合にのみ、構造体を&lt;a href=&quot;../marker/trait.unpin&quot;&gt; &lt;code&gt;Unpin&lt;/code&gt; に&lt;/a&gt;する必要があります。これはデフォルトですが、&lt;a href=&quot;../marker/trait.unpin&quot;&gt; &lt;code&gt;Unpin&lt;/code&gt; &lt;/a&gt;は安全な特性であるため、構造体の作成者は、 &lt;code&gt;impl&amp;lt;T&amp;gt; Unpin for Struct&amp;lt;T&amp;gt;&lt;/code&gt; ようなものを追加し&lt;em&gt;ないの&lt;/em&gt;はあなたの責任です。（お知らせは、投影操作を追加すると、危険なコードを必要とするという事実ので、&lt;a href=&quot;../marker/trait.unpin&quot;&gt; &lt;code&gt;Unpin&lt;/code&gt; &lt;/a&gt;使用する場合にのみ、このいずれかを心配する必要があるという原則壊れない安全な形質である &lt;code&gt;unsafe&lt;/code&gt; 。）</target>
        </trans-unit>
        <trans-unit id="a87dba90688420e84c6cfc3a67588b540866213a" translate="yes" xml:space="preserve">
          <source>The struct must only be &lt;a href=&quot;../marker/trait.unpin&quot;&gt;&lt;code&gt;Unpin&lt;/code&gt;&lt;/a&gt; if all the structural fields are &lt;code&gt;Unpin&lt;/code&gt;. This is the default, but &lt;code&gt;Unpin&lt;/code&gt; is a safe trait, so as the author of the struct it is your responsibility &lt;em&gt;not&lt;/em&gt; to add something like &lt;code&gt;impl&amp;lt;T&amp;gt; Unpin for Struct&amp;lt;T&amp;gt;&lt;/code&gt;. (Notice that adding a projection operation requires unsafe code, so the fact that &lt;code&gt;Unpin&lt;/code&gt; is a safe trait does not break the principle that you only have to worry about any of this if you use &lt;code&gt;unsafe&lt;/code&gt;.)</source>
          <target state="translated">構造体は、すべての構造フィールドが &lt;code&gt;Unpin&lt;/code&gt; の場合にのみ&lt;a href=&quot;../marker/trait.unpin&quot;&gt; &lt;code&gt;Unpin&lt;/code&gt; で&lt;/a&gt;なければなりません。これがデフォルトですが、 &lt;code&gt;Unpin&lt;/code&gt; 、あなたの責任ですので、構造体の著者として、安全な形質である&lt;em&gt;ではない&lt;/em&gt;ようなものを追加する &lt;code&gt;impl&amp;lt;T&amp;gt; Unpin for Struct&amp;lt;T&amp;gt;&lt;/code&gt; 。 （プロジェクション操作を追加するには安全でないコードが必要なので、 &lt;code&gt;Unpin&lt;/code&gt; が安全な特性であるという事実は、 &lt;code&gt;unsafe&lt;/code&gt; を使用する場合にのみこれについて心配する必要があるという原則を破ることはありません。）&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a32a0dfa31f0f0289e823ec593ac2d0e0186cb3f" translate="yes" xml:space="preserve">
          <source>The structure in the &lt;code&gt;vec!&lt;/code&gt; body is similar to the structure of a &lt;code&gt;match&lt;/code&gt; expression. Here we have one arm with the pattern &lt;code&gt;( $( $x:expr ),* )&lt;/code&gt;, followed by &lt;code&gt;=&amp;gt;&lt;/code&gt; and the block of code associated with this pattern. If the pattern matches, the associated block of code will be emitted. Given that this is the only pattern in this macro, there is only one valid way to match; any other pattern will result in an error. More complex macros will have more than one arm.</source>
          <target state="translated">&lt;code&gt;vec!&lt;/code&gt; の構造！bodyは、 &lt;code&gt;match&lt;/code&gt; 式の構造に似ています。ここには、パターン &lt;code&gt;( $( $x:expr ),* )&lt;/code&gt; 後に1つのアームがあり、その後に &lt;code&gt;=&amp;gt;&lt;/code&gt; とこのパターンに関連付けられたコードのブロックが続きます。パターンが一致すると、関連するコードブロックが発行されます。これがこのマクロの唯一のパターンであることを考えると、一致する有効な方法は1つしかありません。他のパターンはエラーになります。より複雑なマクロには複数のアームがあります。</target>
        </trans-unit>
        <trans-unit id="feedd74875f823ef27b80e0ba6fe89baf9a484a0" translate="yes" xml:space="preserve">
          <source>The structure of your public API is a major consideration when publishing a crate. People who use your crate are less familiar with the structure than you are and might have difficulty finding the pieces they want to use if your crate has a large module hierarchy.</source>
          <target state="translated">パブリック API の構造は、クレートを公開する際の大きな考慮事項です。あなたのクレートを使用する人は、あなたよりも構造に慣れていないため、クレートに大きなモジュール階層がある場合、使用するピースを見つけるのに苦労するかもしれません。</target>
        </trans-unit>
        <trans-unit id="8bdec152aa7987052184ceacfeaf61672bfbc336" translate="yes" xml:space="preserve">
          <source>The subtraction assignment operator &lt;code&gt;-=&lt;/code&gt;.</source>
          <target state="translated">減算代入演算子 &lt;code&gt;-=&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9df0e8a4e443e9ee7a165601e70a6b8ea73f8885" translate="yes" xml:space="preserve">
          <source>The subtraction operator &lt;code&gt;-&lt;/code&gt;.</source>
          <target state="translated">減算演算子 &lt;code&gt;-&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="28fd4d4d9eae938e322b4e3df0e6f419cbd1966d" translate="yes" xml:space="preserve">
          <source>The summary line displays at the end: overall, our test result is &lt;code&gt;FAILED&lt;/code&gt;. We had one test pass and one test fail.</source>
          <target state="translated">要約行が最後に表示されます。全体として、テスト結果は &lt;code&gt;FAILED&lt;/code&gt; です。テストは1回成功し、1回は失敗しました。</target>
        </trans-unit>
        <trans-unit id="ee42b5387704f2d9fe3e70d6349076680fb579e8" translate="yes" xml:space="preserve">
          <source>The supplied key may be any borrowed form of the map's key type, but &lt;a href=&quot;../../hash/trait.hash&quot;&gt;&lt;code&gt;Hash&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../cmp/trait.eq&quot;&gt;&lt;code&gt;Eq&lt;/code&gt;&lt;/a&gt; on the borrowed form &lt;em&gt;must&lt;/em&gt; match those for the key type.</source>
          <target state="translated">提供されるキーは、マップのキータイプの任意の借用形式にすることができますが、借用フォームの&lt;a href=&quot;../../hash/trait.hash&quot;&gt; &lt;code&gt;Hash&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;../../cmp/trait.eq&quot;&gt; &lt;code&gt;Eq&lt;/code&gt; &lt;/a&gt;は、キータイプのそれらと一致する&lt;em&gt;必要があり&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="4d0db9da1f6030ddf936168ba198ea7e2ea2a8e7" translate="yes" xml:space="preserve">
          <source>The supplied key may be any borrowed form of the map's key type, but &lt;a href=&quot;../hash/trait.hash&quot;&gt;&lt;code&gt;Hash&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../cmp/trait.eq&quot;&gt;&lt;code&gt;Eq&lt;/code&gt;&lt;/a&gt; on the borrowed form &lt;em&gt;must&lt;/em&gt; match those for the key type.</source>
          <target state="translated">提供されるキーは、マップのキータイプの任意の借用形式にすることができますが、借用フォームの&lt;a href=&quot;../hash/trait.hash&quot;&gt; &lt;code&gt;Hash&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;../cmp/trait.eq&quot;&gt; &lt;code&gt;Eq&lt;/code&gt; &lt;/a&gt;は、キータイプのそれらと一致する&lt;em&gt;必要があり&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="6157ddf403c8a4c61dced75b578898d85ccde0c2" translate="yes" xml:space="preserve">
          <source>The supplied key may be any borrowed form of the map's key type, but the ordering on the borrowed form &lt;em&gt;must&lt;/em&gt; match the ordering on the key type.</source>
          <target state="translated">提供されるキーは、マップのキータイプの任意の借用形式にすることができますが、借用フォームの順序は、キータイプの順序と一致する&lt;em&gt;必要があり&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="9a3120ffbc7b98288aabd741823275a65245701a" translate="yes" xml:space="preserve">
          <source>The symbol &lt;code&gt;^C&lt;/code&gt; represents where you pressed ctrl-c . You may or may not see the word &lt;code&gt;again!&lt;/code&gt; printed after the &lt;code&gt;^C&lt;/code&gt;, depending on where the code was in the loop when it received the interrupt signal.</source>
          <target state="translated">記号 &lt;code&gt;^C&lt;/code&gt; は、ctrl-cを押した場所を表します。あなたは &lt;code&gt;again!&lt;/code&gt; その単語を見るかもしれないし、見ないかもしれません！割り込み信号を受信したときにコードがループのどこにあったかに応じて、 &lt;code&gt;^C&lt;/code&gt; 後に出力されます。</target>
        </trans-unit>
        <trans-unit id="266a6ae6e0b1b671aa6c8cd7616208233ffe3a4b" translate="yes" xml:space="preserve">
          <source>The syntax &lt;code&gt;..&lt;/code&gt; will expand to as many values as it needs to be. Listing 18-24 shows how to use &lt;code&gt;..&lt;/code&gt; with a tuple.</source>
          <target state="translated">構文 &lt;code&gt;..&lt;/code&gt; は、必要な数の値に展開されます。リスト18-24はタプルで &lt;code&gt;..&lt;/code&gt; を使用する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="79fc3d3c405b115d38b7334d712d4081f0801fc2" translate="yes" xml:space="preserve">
          <source>The syntax &lt;code&gt;if let&lt;/code&gt; takes a pattern and an expression separated by an equal sign. It works the same way as a &lt;code&gt;match&lt;/code&gt;, where the expression is given to the &lt;code&gt;match&lt;/code&gt; and the pattern is its first arm.</source>
          <target state="translated">&lt;code&gt;if let&lt;/code&gt; の構文は、等号で区切られたパターンと式を取ります。これは &lt;code&gt;match&lt;/code&gt; と同じように機能します。ここで、表現は &lt;code&gt;match&lt;/code&gt; 与えられ、パターンはその最初のアームです。</target>
        </trans-unit>
        <trans-unit id="751b24fbac99aa6572c9e1b012dbbe4901f9dd78" translate="yes" xml:space="preserve">
          <source>The syntax and semantics for generators is unstable and will require a further RFC for stabilization. At this time, though, the syntax is closure-like:</source>
          <target state="translated">ジェネレータの構文とセマンティクスは不安定であり、安定化のためにさらなるRFCが必要になります。しかし、現時点では、構文はクロージャのようなものです。</target>
        </trans-unit>
        <trans-unit id="f94369f4bb8ebdf54603588e1760be815601c761" translate="yes" xml:space="preserve">
          <source>The syntax for the formatting language used is drawn from other languages, so it should not be too alien. Arguments are formatted with Python-like syntax, meaning that arguments are surrounded by &lt;code&gt;{}&lt;/code&gt; instead of the C-like &lt;code&gt;%&lt;/code&gt;. The actual grammar for the formatting syntax is:</source>
          <target state="translated">使用されるフォーマット言語の構文は他の言語から抽出されているため、あまり異質であってはなりません。引数はPythonのような構文でフォーマットされます。つまり、引数はCのような &lt;code&gt;%&lt;/code&gt; ではなく &lt;code&gt;{}&lt;/code&gt; で囲まれます。フォーマット構文の実際の文法は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="b1fb2c0dcb9e4f22d10669f04073e3418ad44567" translate="yes" xml:space="preserve">
          <source>The syntax for using generics in struct definitions is similar to that used in function definitions. First, we declare the name of the type parameter inside angle brackets just after the name of the struct. Then we can use the generic type in the struct definition where we would otherwise specify concrete data types.</source>
          <target state="translated">構造体定義でジェネリックを使用する構文は、関数定義で使用する構文に似ています。まず、構造体の名前の直後にある角括弧内で型パラメータの名前を宣言します。次に、構造体定義では、具体的なデータ型を指定しない場合には汎用型を使用できます。</target>
        </trans-unit>
        <trans-unit id="be667267584bb9b3dbb1d7d6c41e7cff90529baf" translate="yes" xml:space="preserve">
          <source>The syntax given to this macro is the same syntax as the &lt;a href=&quot;../reference/conditional-compilation#the-cfg-attribute&quot;&gt;&lt;code&gt;cfg&lt;/code&gt;&lt;/a&gt; attribute.</source>
          <target state="translated">このマクロに与えられる構文は、&lt;a href=&quot;../reference/conditional-compilation#the-cfg-attribute&quot;&gt; &lt;code&gt;cfg&lt;/code&gt; &lt;/a&gt;属性と同じ構文です。</target>
        </trans-unit>
        <trans-unit id="37efe90a09f5adb20955a8d29f6006705ceea1f4" translate="yes" xml:space="preserve">
          <source>The syntax is &lt;code&gt;type Name = ExistingType;&lt;/code&gt;.</source>
          <target state="translated">構文は &lt;code&gt;type Name = ExistingType;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a952c08ff986f0fd0f90d2e270d99cd3e69c17a4" translate="yes" xml:space="preserve">
          <source>The syntax is the following: &lt;code&gt;dyn BaseTrait + AutoTrait1 + ... AutoTraitN&lt;/code&gt;. Only one &lt;code&gt;BaseTrait&lt;/code&gt; can be used so this will not compile:</source>
          <target state="translated">構文は次のとおりです &lt;code&gt;dyn BaseTrait + AutoTrait1 + ... AutoTraitN&lt;/code&gt; 。使用できる &lt;code&gt;BaseTrait&lt;/code&gt; は1つだけなので、これはコンパイルされません。</target>
        </trans-unit>
        <trans-unit id="4a5b87227107115d71da53fde65c7898c2f8a55f" translate="yes" xml:space="preserve">
          <source>The tail (elements in the vector after &lt;code&gt;range&lt;/code&gt;) is empty,</source>
          <target state="translated">尾（ &lt;code&gt;range&lt;/code&gt; 内のベクトルの要素）は空です。</target>
        </trans-unit>
        <trans-unit id="018e9509238447c67e6197a11d4f5ea0ec53b22e" translate="yes" xml:space="preserve">
          <source>The tail expression of &lt;a href=&quot;expressions/block-expr&quot;&gt;block expressions&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;expressions/block-expr&quot;&gt;ブロック式&lt;/a&gt;の尻尾式。</target>
        </trans-unit>
        <trans-unit id="73007ab480751859048a54c88693df26b24125bb" translate="yes" xml:space="preserve">
          <source>The task context refers to the &lt;a href=&quot;../../std/task/struct.context&quot;&gt;&lt;code&gt;Context&lt;/code&gt;&lt;/a&gt; which was supplied to the current &lt;a href=&quot;block-expr#async-context&quot;&gt;async context&lt;/a&gt; when the async context itself was polled. Because &lt;code&gt;await&lt;/code&gt; expressions are only legal in an async context, there must be some task context available.</source>
          <target state="translated">タスクコンテキストは、非同期コンテキスト自体がポーリングされたときに現在の&lt;a href=&quot;block-expr#async-context&quot;&gt;非同期コンテキスト&lt;/a&gt;に提供された&lt;a href=&quot;../../std/task/struct.context&quot;&gt; &lt;code&gt;Context&lt;/code&gt; &lt;/a&gt;を指します。 &lt;code&gt;await&lt;/code&gt; 式は非同期コンテキストでのみ有効であるため、使用可能なタスクコンテキストが必要です。</target>
        </trans-unit>
        <trans-unit id="8066bd3121283d3517acd4ab40b658c1a009321c" translate="yes" xml:space="preserve">
          <source>The temporary scopes for expressions in &lt;code&gt;let&lt;/code&gt; statements are sometimes &lt;em&gt;extended&lt;/em&gt; to the scope of the block containing the &lt;code&gt;let&lt;/code&gt; statement. This is done when the usual temporary scope would be too small, based on certain syntactic rules. For example:</source>
          <target state="translated">表現のための一時的なスコープ &lt;code&gt;let&lt;/code&gt; 文は時々されている&lt;em&gt;拡張&lt;/em&gt;含むブロックの範囲に &lt;code&gt;let&lt;/code&gt; 文を。これは、特定の構文規則に基づいて、通常の一時スコープが小さすぎる場合に実行されます。例えば：</target>
        </trans-unit>
        <trans-unit id="c615f1f00b080ca7312a1e8d344f8e1a91bfada3" translate="yes" xml:space="preserve">
          <source>The test shows that when we call &lt;code&gt;shoes_in_my_size&lt;/code&gt;, we get back only shoes that have the same size as the value we specified.</source>
          <target state="translated">このテストでは、 &lt;code&gt;shoes_in_my_size&lt;/code&gt; を呼び出すと、指定した値と同じサイズの靴のみが返されることが示されています。</target>
        </trans-unit>
        <trans-unit id="6d51660220a74ee89098ef8ef16d38d84170be2b" translate="yes" xml:space="preserve">
          <source>The text &lt;code&gt;Dropping CustomSmartPointer with data `some data`!&lt;/code&gt; is printed between the &lt;code&gt;CustomSmartPointer created.&lt;/code&gt; and &lt;code&gt;CustomSmartPointer dropped before the end of main.&lt;/code&gt; text, showing that the &lt;code&gt;drop&lt;/code&gt; method code is called to drop &lt;code&gt;c&lt;/code&gt; at that point.</source>
          <target state="translated">テキスト &lt;code&gt;Dropping CustomSmartPointer with data `some data`!&lt;/code&gt; &lt;code&gt;CustomSmartPointer created.&lt;/code&gt; されたCustomSmartPointerの間に印刷されます。また、 &lt;code&gt;CustomSmartPointer dropped before the end of main.&lt;/code&gt; テキスト、 &lt;code&gt;drop&lt;/code&gt; メソッドコードがその時点で &lt;code&gt;c&lt;/code&gt; をドロップするために呼び出されることを示します。</target>
        </trans-unit>
        <trans-unit id="c9d885657469b7761a884865d71e05fd15d67a2e" translate="yes" xml:space="preserve">
          <source>The text of this string is stored directly in the program&amp;rsquo;s binary, which is always available. Therefore, the lifetime of all string literals is &lt;code&gt;'static&lt;/code&gt;.</source>
          <target state="translated">この文字列のテキストは、常に利用可能なプログラムのバイナリに直接保存されます。したがって、すべての文字列リテラルの有効期間は &lt;code&gt;'static&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="a2418c922b0dbbb7a6749b73d736e8d2a5be9d0c" translate="yes" xml:space="preserve">
          <source>The third argument is a function called if a panic occurs. This function takes the data pointer and a pointer to the target-specific exception object that was caught. For more information see the compiler's source as well as std's catch implementation.</source>
          <target state="translated">第3引数は、パニックが発生した場合に呼び出される関数です。この関数は、データポインタとキャッチされたターゲット固有の例外オブジェクトへのポインタを取ります。詳細については、コンパイラのソースと std の catch の実装を参照してください。</target>
        </trans-unit>
        <trans-unit id="bb9a02cbbbeece965fc06bf102b3dfcc209b80a8" translate="yes" xml:space="preserve">
          <source>The third case is trickier: Rust will also coerce a mutable reference to an immutable one. But the reverse is &lt;em&gt;not&lt;/em&gt; possible: immutable references will never coerce to mutable references. Because of the borrowing rules, if you have a mutable reference, that mutable reference must be the only reference to that data (otherwise, the program wouldn&amp;rsquo;t compile). Converting one mutable reference to one immutable reference will never break the borrowing rules. Converting an immutable reference to a mutable reference would require that the initial immutable reference is the only immutable reference to that data, but the borrowing rules don&amp;rsquo;t guarantee that. Therefore, Rust can&amp;rsquo;t make the assumption that converting an immutable reference to a mutable reference is possible.</source>
          <target state="translated">3番目のケースはよりトリッキーです。Rustは不変の参照への可変の参照も強制します。ただし、その逆は不可能です。不変の参照が変更可能な参照に強制されることはあり&lt;em&gt;ません&lt;/em&gt;。借用規則により、可変参照がある場合は、その可変参照がそのデータへの唯一の参照である必要があります（そうでない場合、プログラムはコンパイルされません）。 1つの可変参照を1つの不変参照に変換しても、借用規則に違反することはありません。不変の参照を可変の参照に変換するには、最初の不変の参照がそのデータへの唯一の不変の参照である必要がありますが、借用規則はそれを保証しません。したがって、Rustは、不変の参照を可変の参照に変換できると想定することはできません。</target>
        </trans-unit>
        <trans-unit id="f9782d2dad9c654fee52ed918f0366cbe2abfa6a" translate="yes" xml:space="preserve">
          <source>The third case is trickier: Rust will also coerce a mutable reference to an immutable one. But the reverse is &lt;em&gt;not&lt;/em&gt; possible: immutable references will never coerce to mutable references. Because of the borrowing rules, if you have a mutable reference, that mutable reference must be the only reference to that data (otherwise, the program wouldn&amp;rsquo;t compile). Converting one mutable reference to one immutable reference will never break the borrowing rules. Converting an immutable reference to a mutable reference would require that there is only one immutable reference to that data, and the borrowing rules don&amp;rsquo;t guarantee that. Therefore, Rust can&amp;rsquo;t make the assumption that converting an immutable reference to a mutable reference is possible.</source>
          <target state="translated">3番目のケースはよりトリッキーです。Rustは、不変の参照への可変参照も強制します。ただし、その逆は不可能です。不変の参照が変更可能な参照に強制されることはあり&lt;em&gt;ません&lt;/em&gt;。借用規則のため、変更可能な参照がある場合、その変更可能な参照はそのデータへの唯一の参照でなければなりません（そうしないと、プログラムはコンパイルされません）。 1つの可変参照を1つの不変参照に変換しても、借用規則に違反することはありません。不変参照を変更可能な参照に変換するには、そのデータへの不変参照が1つだけ存在する必要があり、借用ルールはそれを保証しません。したがって、Rustは、不変の参照を変更可能な参照に変換することが可能であると想定できません。</target>
        </trans-unit>
        <trans-unit id="25bc1d6b7d2fd810584a49b63e54dae85fbc7654" translate="yes" xml:space="preserve">
          <source>The third invariant says that when we have a complex NT that can match two or more copies of the same thing with no separation in between, it must be permissible for them to be placed next to each other as per the first invariant. This invariant also requires they be nonempty, which eliminates a possible ambiguity.</source>
          <target state="translated">第三の不変量は、同じものの二つ以上のコピーを分離せずに一致させることができる複雑なNTを持つとき、第一の不変量のように、それらが隣り合って配置されることが許されなければならないと言うものである。この不変量はまた、それらが非空であることを要求するので、可能性のある曖昧さを排除します。</target>
        </trans-unit>
        <trans-unit id="6858985d6a527c37bd8cd37f82674daea04d146f" translate="yes" xml:space="preserve">
          <source>The third pointer is a target-specific data pointer which is filled in with the specifics of the exception that occurred. For examples on Unix platforms this is a &lt;code&gt;*mut *mut T&lt;/code&gt; which is filled in by the compiler and on MSVC it's &lt;code&gt;*mut [usize; 2]&lt;/code&gt;. For more information see the compiler's source as well as std's catch implementation.</source>
          <target state="translated">3番目のポインターはターゲット固有のデータポインターで、発生した例外の詳細が入力されます。 Unixプラットフォームの例では、これは &lt;code&gt;*mut *mut T&lt;/code&gt; であり、コンパイラーによって入力され、MSVCでは &lt;code&gt;*mut [usize; 2]&lt;/code&gt; 。詳細については、コンパイラのソースとstdのcatch実装を参照してください。</target>
        </trans-unit>
        <trans-unit id="af84a0e541b5cb8aad0df743eb686112ab5e9865" translate="yes" xml:space="preserve">
          <source>The third problem is that we&amp;rsquo;ve used &lt;code&gt;expect&lt;/code&gt; to print an error message when reading the file fails, but the error message just prints &lt;code&gt;Something went wrong reading the file&lt;/code&gt;. Reading a file can fail in a number of ways: for example, the file could be missing, or we might not have permission to open it. Right now, regardless of the situation, we&amp;rsquo;d print the &lt;code&gt;Something went wrong reading the file&lt;/code&gt; error message, which wouldn&amp;rsquo;t give the user any information!</source>
          <target state="translated">3番目の問題は、ファイルの読み取りが失敗したときにエラーメッセージを出力 &lt;code&gt;expect&lt;/code&gt; を期待していたのに、エラーメッセージが出力されるだけで &lt;code&gt;Something went wrong reading the file&lt;/code&gt; 。ファイルの読み取りは、いくつかの点で失敗する可能性があります。たとえば、ファイルが見つからない、またはファイルを開く権限がない可能性があります。現時点では、状況に関係なく &lt;code&gt;Something went wrong reading the file&lt;/code&gt; エラーメッセージの読み取りに問題が発生したため、ユーザーに情報を提供しませんでした。</target>
        </trans-unit>
        <trans-unit id="f9f5c0bd316756e98b375cf7ab85326d6fd86b72" translate="yes" xml:space="preserve">
          <source>The third rule is if there are multiple input lifetime parameters, but one of them is &lt;code&gt;&amp;amp;self&lt;/code&gt; or &lt;code&gt;&amp;amp;mut self&lt;/code&gt; because this is a method, the lifetime of &lt;code&gt;self&lt;/code&gt; is assigned to all output lifetime parameters. This third rule makes methods much nicer to read and write because fewer symbols are necessary.</source>
          <target state="translated">3番目のルールは、複数の入力存続期間パラメーターがあるが、それらの1つが &lt;code&gt;&amp;amp;self&lt;/code&gt; または &lt;code&gt;&amp;amp;mut self&lt;/code&gt; である場合です。これはメソッドであるため、 &lt;code&gt;self&lt;/code&gt; の存続期間はすべての出力存続期間パラメーターに割り当てられます。この3番目のルールにより、必要なシンボルが少なくなるため、メソッドの読み取りと書き込みが大幅に改善されます。</target>
        </trans-unit>
        <trans-unit id="c69636ef08912707db1c3ff91b55a817a8ac72a9" translate="yes" xml:space="preserve">
          <source>The thread may sleep longer than the duration specified due to scheduling specifics or platform-dependent functionality. It will never sleep less.</source>
          <target state="translated">スレッドは、スケジューリングの仕様やプラットフォーム依存の機能のために、指定された期間よりも長くスリープすることがあります。スレッドのスリープ時間が短くなることはありません。</target>
        </trans-unit>
        <trans-unit id="cd58c0bda6dec6815740b7eed1b811cfbd96ccbb" translate="yes" xml:space="preserve">
          <source>The thread name is provided to the OS where applicable (e.g., &lt;code&gt;pthread_setname_np&lt;/code&gt; in unix-like platforms).</source>
          <target state="translated">スレッド名は、必要に &lt;code&gt;pthread_setname_np&lt;/code&gt; てOSに提供されます（たとえば、UNIXのようなプラットフォームではpthread_setname_np）。</target>
        </trans-unit>
        <trans-unit id="3218fca211a825167101461324b25d4344214224" translate="yes" xml:space="preserve">
          <source>The threading model</source>
          <target state="translated">スレッディングモデル</target>
        </trans-unit>
        <trans-unit id="2518c4f037fbaea8573cb319d8682ea0e18ad153" translate="yes" xml:space="preserve">
          <source>The three forms of iteration</source>
          <target state="translated">イテレーションの3つの形態</target>
        </trans-unit>
        <trans-unit id="6e441e5631d84f73392a981b4df2ae8555997336" translate="yes" xml:space="preserve">
          <source>The three kinds of procedural macros (custom derive, attribute-like, and function-like) all work in a similar fashion.</source>
          <target state="translated">3種類の手続き型マクロ(カスタム派生、属性的なもの、関数的なもの)は、すべて似たような方法で動作します。</target>
        </trans-unit>
        <trans-unit id="d7a7ac48a6db407723719df4ec95a88c69119a40" translate="yes" xml:space="preserve">
          <source>The three sections of output include the unit tests, the integration test, and the doc tests. The first section for the unit tests is the same as we&amp;rsquo;ve been seeing: one line for each unit test (one named &lt;code&gt;internal&lt;/code&gt; that we added in Listing 11-12) and then a summary line for the unit tests.</source>
          <target state="translated">出力の3つのセクションには、単体テスト、統合テスト、ドキュメントテストが含まれます。ユニットテストの最初のセクションは、これまで見てきたものと同じです。各ユニットテストの1行（リスト11-12で追加した &lt;code&gt;internal&lt;/code&gt; という名前の行）と、ユニットテストの概要行です。</target>
        </trans-unit>
        <trans-unit id="779ae776bee7c2504118b220c1641bc64af7f7ac" translate="yes" xml:space="preserve">
          <source>The time complexity degrades if elements are pushed in predominantly ascending order. In the worst case, elements are pushed in ascending sorted order and the amortized cost per push is &lt;em&gt;O&lt;/em&gt;(log(&lt;em&gt;n&lt;/em&gt;)) against a heap containing &lt;em&gt;n&lt;/em&gt; elements.</source>
          <target state="translated">要素が主に昇順でプッシュされると、時間計算量が低下します。最悪の場合、要素は昇順でプッシュされ、プッシュあたりの償却コストは、&lt;em&gt;n個の&lt;/em&gt;要素を含むヒープに対して&lt;em&gt;O&lt;/em&gt;（log（&lt;em&gt;n&lt;/em&gt;））です。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6df380516e9cdddf51f2d5d2da6e443a2e517824" translate="yes" xml:space="preserve">
          <source>The time complexity degrades if elements are pushed in predominantly ascending order. In the worst case, elements are pushed in ascending sorted order and the amortized cost per push is O(log n) against a heap containing &lt;em&gt;n&lt;/em&gt; elements.</source>
          <target state="translated">要素が主に昇順でプッシュされると、時間の複雑さが低下します。最悪の場合、要素は昇順でプッシュされ、&lt;em&gt;n&lt;/em&gt;要素を含むヒープに対するプッシュあたりの償却コストはO（log n）になります。</target>
        </trans-unit>
        <trans-unit id="95e46fd08ac08fd408281a4c8d24f1d26e9263c5" translate="yes" xml:space="preserve">
          <source>The to-be-stabilized version of this intrinsic is &lt;a href=&quot;../mem/fn.variant_count&quot;&gt;&lt;code&gt;mem::variant_count&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この組み込み関数の安定化されるバージョンは&lt;a href=&quot;../mem/fn.variant_count&quot;&gt; &lt;code&gt;mem::variant_count&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="7075cd0ebc9560a0210fd04b57fb94c1b2316eda" translate="yes" xml:space="preserve">
          <source>The tokens that can begin a type are, as of this writing, {&lt;code&gt;(&lt;/code&gt;, &lt;code&gt;[&lt;/code&gt;, &lt;code&gt;!&lt;/code&gt;, &lt;code&gt;\*&lt;/code&gt;, &lt;code&gt;&amp;amp;&lt;/code&gt;, &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;, &lt;code&gt;?&lt;/code&gt;, lifetimes, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;::&lt;/code&gt;, any non-keyword identifier, &lt;code&gt;super&lt;/code&gt;, &lt;code&gt;self&lt;/code&gt;, &lt;code&gt;Self&lt;/code&gt;, &lt;code&gt;extern&lt;/code&gt;, &lt;code&gt;crate&lt;/code&gt;, &lt;code&gt;$crate&lt;/code&gt;, &lt;code&gt;_&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;impl&lt;/code&gt;, &lt;code&gt;fn&lt;/code&gt;, &lt;code&gt;unsafe&lt;/code&gt;, &lt;code&gt;typeof&lt;/code&gt;, &lt;code&gt;dyn&lt;/code&gt;}, although this list may not be complete because people won't always remember to update the appendix when new ones are added.</source>
          <target state="translated">タイプを開始できるトークンは、これを書いている時点で、{ &lt;code&gt;(&lt;/code&gt; 、 &lt;code&gt;[&lt;/code&gt; 、 &lt;code&gt;!&lt;/code&gt; 、 &lt;code&gt;\*&lt;/code&gt; 、 &lt;code&gt;&amp;amp;&lt;/code&gt; 、 &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; 、 &lt;code&gt;?&lt;/code&gt; 、ライフタイム、 &lt;code&gt;&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; 、 &lt;code&gt;::&lt;/code&gt; 、非キーワード識別子、 &lt;code&gt;super&lt;/code&gt; 、 &lt;code&gt;self&lt;/code&gt; 、 &lt;code&gt;Self&lt;/code&gt; 、 &lt;code&gt;extern&lt;/code&gt; 、 &lt;code&gt;crate&lt;/code&gt; 、 &lt;code&gt;$crate&lt;/code&gt; 、 &lt;code&gt;_&lt;/code&gt; 、 &lt;code&gt;for&lt;/code&gt; 、 &lt;code&gt;impl&lt;/code&gt; 、 &lt;code&gt;fn&lt;/code&gt; 、 &lt;code&gt;unsafe&lt;/code&gt; 、 &lt;code&gt;typeof&lt;/code&gt; 、 &lt;code&gt;dyn&lt;/code&gt; }ただし、新しいリストが追加されたときに付録を更新することを常に覚えているとは限らないため、このリストは完全ではない場合があります。</target>
        </trans-unit>
        <trans-unit id="3d918eb4366eadb0401bfe8b5fc6b1b9ce9e5b76" translate="yes" xml:space="preserve">
          <source>The top-level &lt;em&gt;Cargo.lock&lt;/em&gt; now contains information about the dependency of &lt;code&gt;add-one&lt;/code&gt; on &lt;code&gt;rand&lt;/code&gt;. However, even though &lt;code&gt;rand&lt;/code&gt; is used somewhere in the workspace, we can&amp;rsquo;t use it in other crates in the workspace unless we add &lt;code&gt;rand&lt;/code&gt; to their &lt;em&gt;Cargo.toml&lt;/em&gt; files as well. For example, if we add &lt;code&gt;use rand;&lt;/code&gt; to the &lt;em&gt;adder/src/main.rs&lt;/em&gt; file for the &lt;code&gt;adder&lt;/code&gt; crate, we&amp;rsquo;ll get an error:</source>
          <target state="translated">トップレベル&lt;em&gt;Cargo.lockは&lt;/em&gt;今の依存関係に関する情報が含まれている &lt;code&gt;add-one&lt;/code&gt; 上の &lt;code&gt;rand&lt;/code&gt; 。ただし、 &lt;code&gt;rand&lt;/code&gt; がワークスペースのどこかで使用されていても、&lt;em&gt;Cargo.toml&lt;/em&gt;ファイルに &lt;code&gt;rand&lt;/code&gt; を追加しない限り、ワークスペースの他のクレートでは使用できません。たとえば、 &lt;code&gt;use rand;&lt;/code&gt; を追加すると、&lt;em&gt;加算器/ SRC / main.rsの&lt;/em&gt;ためのファイル &lt;code&gt;adder&lt;/code&gt; クレート、我々はエラーになります：&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c0d4e33f5ea540060f03c5345b86c179052a0077" translate="yes" xml:space="preserve">
          <source>The top-level &lt;em&gt;Cargo.lock&lt;/em&gt; now contains information about the dependency of &lt;code&gt;add-one&lt;/code&gt; on &lt;code&gt;rand&lt;/code&gt;. However, even though &lt;code&gt;rand&lt;/code&gt; is used somewhere in the workspace, we can&amp;rsquo;t use it in other crates in the workspace unless we add &lt;code&gt;rand&lt;/code&gt; to their &lt;em&gt;Cargo.toml&lt;/em&gt; files as well. For example, if we add &lt;code&gt;use rand;&lt;/code&gt; to the &lt;em&gt;adder/src/main.rs&lt;/em&gt; file for the &lt;code&gt;adder&lt;/code&gt; package, we&amp;rsquo;ll get an error:</source>
          <target state="translated">トップレベルの&lt;em&gt;Cargo.lockに&lt;/em&gt;は、 &lt;code&gt;add-one&lt;/code&gt; の &lt;code&gt;rand&lt;/code&gt; への依存性に関する情報が含まれるようになりました。しかし、にもかかわらず、 &lt;code&gt;rand&lt;/code&gt; 、ワークスペース内の使用済みのどこかである、我々は追加しない限り、ワークスペース内の他の木箱でそれを使用することはできません &lt;code&gt;rand&lt;/code&gt; 自分に&lt;em&gt;Cargo.tomlの&lt;/em&gt;ファイルにも。たとえば、 &lt;code&gt;use rand;&lt;/code&gt; を追加すると、 &lt;code&gt;adder&lt;/code&gt; パッケージの&lt;em&gt;adder / src / main.rs&lt;/em&gt;ファイルに、次のエラーが表示されます。</target>
        </trans-unit>
        <trans-unit id="ad3286fb14b7fd80e70223a9fcdf3dbb91a27203" translate="yes" xml:space="preserve">
          <source>The total size &lt;code&gt;len * mem::size_of::&amp;lt;T&amp;gt;()&lt;/code&gt; of the slice must be no larger than &lt;code&gt;isize::MAX&lt;/code&gt;. See the safety documentation of &lt;a href=&quot;../primitive.pointer#method.offset&quot;&gt;&lt;code&gt;pointer::offset&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">スライスの合計サイズ &lt;code&gt;len * mem::size_of::&amp;lt;T&amp;gt;()&lt;/code&gt; は、 &lt;code&gt;isize::MAX&lt;/code&gt; より大きくてはなりません。&lt;a href=&quot;../primitive.pointer#method.offset&quot;&gt; &lt;code&gt;pointer::offset&lt;/code&gt; &lt;/a&gt;安全文書を参照してください。</target>
        </trans-unit>
        <trans-unit id="cb4d3d21f95395d566b73337877fe60f19b91950" translate="yes" xml:space="preserve">
          <source>The total size &lt;code&gt;ptr.len() * mem::size_of::&amp;lt;T&amp;gt;()&lt;/code&gt; of the slice must be no larger than &lt;code&gt;isize::MAX&lt;/code&gt;. See the safety documentation of &lt;a href=&quot;../primitive.pointer#method.offset&quot;&gt;&lt;code&gt;pointer::offset&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;ptr.len() * mem::size_of::&amp;lt;T&amp;gt;()&lt;/code&gt; の合計サイズptr.len（）* mem :: size_of :: &amp;lt;T&amp;gt;（）は、 &lt;code&gt;isize::MAX&lt;/code&gt; より大きくてはなりません。&lt;a href=&quot;../primitive.pointer#method.offset&quot;&gt; &lt;code&gt;pointer::offset&lt;/code&gt; &lt;/a&gt;安全文書を参照してください。</target>
        </trans-unit>
        <trans-unit id="f198377d0780cd2ae0fe23c39d58fa6a11c3ce1b" translate="yes" xml:space="preserve">
          <source>The total size &lt;code&gt;ptr.len() * mem::size_of::&amp;lt;T&amp;gt;()&lt;/code&gt; of the slice must be no larger than &lt;code&gt;isize::MAX&lt;/code&gt;. See the safety documentation of &lt;a href=&quot;primitive.pointer#method.offset&quot;&gt;&lt;code&gt;pointer::offset&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;ptr.len() * mem::size_of::&amp;lt;T&amp;gt;()&lt;/code&gt; の合計サイズptr.len（）* mem :: size_of :: &amp;lt;T&amp;gt;（）は、 &lt;code&gt;isize::MAX&lt;/code&gt; より大きくてはなりません。&lt;a href=&quot;primitive.pointer#method.offset&quot;&gt; &lt;code&gt;pointer::offset&lt;/code&gt; &lt;/a&gt;安全文書を参照してください。</target>
        </trans-unit>
        <trans-unit id="8c818e1dc9d477cbb1ce03a32e397d907f841e91" translate="yes" xml:space="preserve">
          <source>The total size of the slice must be no larger than &lt;code&gt;isize::MAX&lt;/code&gt;&lt;strong&gt;bytes&lt;/strong&gt; in memory. See the safety documentation of &lt;a href=&quot;../primitive.pointer#method.offset&quot;&gt;&lt;code&gt;pointer::offset&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">スライスの合計サイズは、メモリ内の &lt;code&gt;isize::MAX&lt;/code&gt; &lt;strong&gt;バイト&lt;/strong&gt;以下でなければなりません。&lt;a href=&quot;../primitive.pointer#method.offset&quot;&gt; &lt;code&gt;pointer::offset&lt;/code&gt; &lt;/a&gt;安全性に関するドキュメントをご覧ください。</target>
        </trans-unit>
        <trans-unit id="4da1db74e1e609ac8cd961cdfb0fa46bfc3d2c9d" translate="yes" xml:space="preserve">
          <source>The trait also provides convenience methods like &lt;a href=&quot;#method.write_all&quot;&gt;&lt;code&gt;write_all&lt;/code&gt;&lt;/a&gt;, which calls &lt;code&gt;write&lt;/code&gt; in a loop until its entire input has been written.</source>
          <target state="translated">トレイトには、&lt;a href=&quot;#method.write_all&quot;&gt; &lt;code&gt;write_all&lt;/code&gt; &lt;/a&gt;などの便利なメソッドも用意されています。このメソッドは、入力全体が書き込まれるまでループ内で &lt;code&gt;write&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="903fc77fd3444aa853b4918c8904a108213ce8a6" translate="yes" xml:space="preserve">
          <source>The trait also provides convenience methods like &lt;a href=&quot;trait.write#method.write_all&quot;&gt;&lt;code&gt;write_all&lt;/code&gt;&lt;/a&gt;, which calls &lt;code&gt;write&lt;/code&gt; in a loop until its entire input has been written.</source>
          <target state="translated">このトレイトは、入力全体が書き込まれるまでループで &lt;code&gt;write&lt;/code&gt; を呼び出す&lt;a href=&quot;trait.write#method.write_all&quot;&gt; &lt;code&gt;write_all&lt;/code&gt; の&lt;/a&gt;ような便利なメソッドも提供します。</target>
        </trans-unit>
        <trans-unit id="ddef280ba8303b75d43b99adadcdec8f8b461c8f" translate="yes" xml:space="preserve">
          <source>The trait being implemented is defined in the same crate.</source>
          <target state="translated">実装されている形質は同じ木箱に定義されています。</target>
        </trans-unit>
        <trans-unit id="fe160012593c71ba4d94a64501b55cb584b3c84d" translate="yes" xml:space="preserve">
          <source>The trait cannot contain associated constants</source>
          <target state="translated">形質は、関連する定数を含むことはできません。</target>
        </trans-unit>
        <trans-unit id="f49c4617e26c7a90e7ceb5715737675232c71e5c" translate="yes" xml:space="preserve">
          <source>The trait cannot require &lt;code&gt;Self: Sized&lt;/code&gt;</source>
          <target state="translated">トレイトは &lt;code&gt;Self: Sized&lt;/code&gt; 必要としません：サイズ</target>
        </trans-unit>
        <trans-unit id="3bbcc07233474a5558580dca4726567afce0f2c1" translate="yes" xml:space="preserve">
          <source>The trait cannot use &lt;code&gt;Self&lt;/code&gt; as a type parameter in the supertrait listing</source>
          <target state="translated">トレイトは、スーパートレイトリストのタイプパラメータとして &lt;code&gt;Self&lt;/code&gt; を使用できません</target>
        </trans-unit>
        <trans-unit id="6c46ccc8f602f9dc98f8190aa7e9cb78c7a8a015" translate="yes" xml:space="preserve">
          <source>The trait implemented by builtin generator types.</source>
          <target state="translated">ビルトインジェネレーター型で実装されている形質。</target>
        </trans-unit>
        <trans-unit id="0c6838569af8d3e59a65e8aec127e2d3a1e1e919" translate="yes" xml:space="preserve">
          <source>The trait is known as the &lt;em&gt;implemented trait&lt;/em&gt;. The implementing type implements the implemented trait.</source>
          <target state="translated">トレイトは&lt;em&gt;実装されたトレイト&lt;/em&gt;として知られてい&lt;em&gt;ます&lt;/em&gt;。実装タイプは実装された特性を実装します。</target>
        </trans-unit>
        <trans-unit id="8cf3ab6548fb883dab5c1d88de8c77fdb3ccf054" translate="yes" xml:space="preserve">
          <source>The trait is marked unsafe because the indices returned by the &lt;a href=&quot;trait.searcher#tymethod.next&quot;&gt;&lt;code&gt;next()&lt;/code&gt;&lt;/a&gt; methods are required to lie on valid utf8 boundaries in the haystack. This enables consumers of this trait to slice the haystack without additional runtime checks.</source>
          <target state="translated">&lt;a href=&quot;trait.searcher#tymethod.next&quot;&gt; &lt;code&gt;next()&lt;/code&gt; &lt;/a&gt;メソッドによって返されるインデックスは、干し草の山の有効なutf8境界上にある必要があるため、この特性は安全でないとマークされます。これにより、このトレイトのコンシューマーは、追加のランタイムチェックなしで干し草の山をスライスできます。</target>
        </trans-unit>
        <trans-unit id="478884f7bada94b695fbee645bd59c060678235f" translate="yes" xml:space="preserve">
          <source>The trait is marked unsafe because the indices returned by the &lt;code&gt;next()&lt;/code&gt; methods are required to lie on valid utf8 boundaries in the haystack. This enables consumers of this trait to slice the haystack without additional runtime checks.</source>
          <target state="translated">&lt;code&gt;next()&lt;/code&gt; メソッドによって返されるインデックスは、干し草の有効なutf8境界上にある必要があるため、この特性は安全でないとマークされています。これにより、このトレイトのコンシューマーは、ランタイムチェックを追加せずに干し草の山をスライスできます。</target>
        </trans-unit>
        <trans-unit id="6d63a097c314f3198ade51464ed8a948cd1d46d3" translate="yes" xml:space="preserve">
          <source>The trait is marked unsafe in order to restrict implementors to fixed-size arrays. User of this trait can assume that implementors have the exact layout in memory of a fixed size array (for example, for unsafe initialization).</source>
          <target state="translated">この特性は,実装者を固定サイズの配列に限定するために,安全ではないとマークされています.この特性のユーザは、実装者が固定サイズの配列のメモリ上に正確なレイアウトを持っていると仮定することができます (例えば、安全ではない初期化のために)。</target>
        </trans-unit>
        <trans-unit id="6234c814e87094f91726f24487a4768fa303bb49" translate="yes" xml:space="preserve">
          <source>The trait is unsafe because implementers must uphold additional safety properties. See &lt;a href=&quot;trait.sourceiter#tymethod.as_inner&quot;&gt;&lt;code&gt;as_inner&lt;/code&gt;&lt;/a&gt; for details.</source>
          <target state="translated">実装者は追加の安全特性を維持する必要があるため、この特性は安全ではありません。詳細については、&lt;a href=&quot;trait.sourceiter#tymethod.as_inner&quot;&gt; &lt;code&gt;as_inner&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="ffd4884c0b4bf389a086599eb28e009d3c721bad" translate="yes" xml:space="preserve">
          <source>The trait itself acts as a builder for an associated &lt;a href=&quot;trait.searcher&quot;&gt;&lt;code&gt;Searcher&lt;/code&gt;&lt;/a&gt; type, which does the actual work of finding occurrences of the pattern in a string.</source>
          <target state="translated">トレイト自体は、関連付けられた&lt;a href=&quot;trait.searcher&quot;&gt; &lt;code&gt;Searcher&lt;/code&gt; &lt;/a&gt;タイプのビルダーとして機能し、文字列内のパターンの出現を見つける実際の作業を行います。</target>
        </trans-unit>
        <trans-unit id="bf58bfdb142c3e3e2fca00b9412242993f764d14" translate="yes" xml:space="preserve">
          <source>The trait itself acts as a builder for an associated &lt;code&gt;Searcher&lt;/code&gt; type, which does the actual work of finding occurrences of the pattern in a string.</source>
          <target state="translated">トレイト自体は、関連付けられた &lt;code&gt;Searcher&lt;/code&gt; タイプのビルダーとして機能し、文字列内のパターンの出現を見つける実際の作業を行います。</target>
        </trans-unit>
        <trans-unit id="4f44d782a6ca223ce6d84156fccfcf74f2f98110" translate="yes" xml:space="preserve">
          <source>The trait with a supertrait is called a &lt;strong&gt;subtrait&lt;/strong&gt; of its supertrait.</source>
          <target state="translated">スーパー特性を持つ特性は、そのスーパー&lt;strong&gt;特性のサブ&lt;/strong&gt;特性と呼ばれます。</target>
        </trans-unit>
        <trans-unit id="d7357f4482763332c4dcdb5f743346a154d2e9c6" translate="yes" xml:space="preserve">
          <source>The traits in &lt;a href=&quot;../std/ops/index&quot;&gt;&lt;code&gt;std::ops&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../std/cmp/index&quot;&gt;&lt;code&gt;std::cmp&lt;/code&gt;&lt;/a&gt; are used to overload &lt;a href=&quot;expressions/operator-expr&quot;&gt;operators&lt;/a&gt;, &lt;a href=&quot;expressions/array-expr#array-and-slice-indexing-expressions&quot;&gt;indexing expressions&lt;/a&gt; and &lt;a href=&quot;expressions/call-expr&quot;&gt;call expressions&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../std/ops/index&quot;&gt; &lt;code&gt;std::ops&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;../std/cmp/index&quot;&gt; &lt;code&gt;std::cmp&lt;/code&gt; &lt;/a&gt;の特性は、&lt;a href=&quot;expressions/operator-expr&quot;&gt;演算子&lt;/a&gt;、&lt;a href=&quot;expressions/array-expr#array-and-slice-indexing-expressions&quot;&gt;インデックス式&lt;/a&gt;、&lt;a href=&quot;expressions/call-expr&quot;&gt;呼び出し式の&lt;/a&gt;オーバーロードに使用されます。</target>
        </trans-unit>
        <trans-unit id="9ada4715a52a3666c1e6ea1e317fd6cc2974a5b0" translate="yes" xml:space="preserve">
          <source>The traits in &lt;a href=&quot;../std/ops/index&quot;&gt;&lt;code&gt;std::ops&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../std/cmp/index&quot;&gt;&lt;code&gt;std::cmp&lt;/code&gt;&lt;/a&gt; are used to overload &lt;a href=&quot;expressions/operator-expr&quot;&gt;operators&lt;/a&gt;, &lt;a href=&quot;expressions/array-expr#array-and-slice-indexing-expressions&quot;&gt;indexing expressions&lt;/a&gt;, and &lt;a href=&quot;expressions/call-expr&quot;&gt;call expressions&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../std/ops/index&quot;&gt; &lt;code&gt;std::ops&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;../std/cmp/index&quot;&gt; &lt;code&gt;std::cmp&lt;/code&gt; &lt;/a&gt;の特性は、&lt;a href=&quot;expressions/operator-expr&quot;&gt;演算子の&lt;/a&gt;オーバーロード、&lt;a href=&quot;expressions/array-expr#array-and-slice-indexing-expressions&quot;&gt;式のインデックス作成&lt;/a&gt;、および&lt;a href=&quot;expressions/call-expr&quot;&gt;式の呼び出しに&lt;/a&gt;使用されます。</target>
        </trans-unit>
        <trans-unit id="f43292c5d9ba5055790b8cc673c3ce1d90efd4b3" translate="yes" xml:space="preserve">
          <source>The traits in this module are often used as trait bounds for generic functions such that to arguments of multiple types are supported. See the documentation of each trait for examples.</source>
          <target state="translated">このモジュールの形質は、複数の型の引数への引数をサポートするような汎用関数の形質境界としてよく使用されます。例については、それぞれの特徴のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="bbf2160d65d5756f9a6fd20c174d5b77d26006ee" translate="yes" xml:space="preserve">
          <source>The traits in this module provide a way to convert from one type to another type. Each trait serves a different purpose:</source>
          <target state="translated">このモジュールの形質は、あるタイプから別のタイプに変換する方法を提供します。それぞれの形質は異なる目的を果たします。</target>
        </trans-unit>
        <trans-unit id="be87d5e421f146f48239b20f0b61521f853fc415" translate="yes" xml:space="preserve">
          <source>The transmitting end has a &lt;code&gt;send&lt;/code&gt; method that takes the value we want to send. The &lt;code&gt;send&lt;/code&gt; method returns a &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt; type, so if the receiving end has already been dropped and there&amp;rsquo;s nowhere to send a value, the send operation will return an error. In this example, we&amp;rsquo;re calling &lt;code&gt;unwrap&lt;/code&gt; to panic in case of an error. But in a real application, we would handle it properly: return to Chapter 9 to review strategies for proper error handling.</source>
          <target state="translated">送信側には、 &lt;code&gt;send&lt;/code&gt; する値を受け取るsendメソッドがあります。 &lt;code&gt;send&lt;/code&gt; メソッドが戻ると &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt; 種類、受信側がすでに削除されて、値を送信するためにどこにもありませんしているそうだとすれば、送信操作はエラーを返します。この例では、エラーが発生した場合にパニックを &lt;code&gt;unwrap&lt;/code&gt; するためにunwrapを呼び出しています。しかし、実際のアプリケーションでは、適切に処理します。第9章に戻って、適切なエラー処理の戦略を確認してください。</target>
        </trans-unit>
        <trans-unit id="358565a5dd8811594d3e7971e93dfbda2791693b" translate="yes" xml:space="preserve">
          <source>The tuple pattern is refutable when one of its subpatterns is refutable.</source>
          <target state="translated">タプルパターンは、そのサブパターンの1つが反論可能な場合に反論可能となります。</target>
        </trans-unit>
        <trans-unit id="8b3273a21950fc06ce8b8962828961e34d0be457" translate="yes" xml:space="preserve">
          <source>The two are compared by calling &lt;code&gt;&amp;gt;&lt;/code&gt; on their inner values.</source>
          <target state="translated">2つは、それらの内部値に対して &lt;code&gt;&amp;gt;&lt;/code&gt; を呼び出すことによって比較されます。</target>
        </trans-unit>
        <trans-unit id="de2c6ddac182efa31cffea571db9b44146fe9838" translate="yes" xml:space="preserve">
          <source>The two are compared by calling &lt;code&gt;&amp;gt;=&lt;/code&gt; on their inner values.</source>
          <target state="translated">2つは、それらの内部値で &lt;code&gt;&amp;gt;=&lt;/code&gt; を呼び出すことによって比較されます。</target>
        </trans-unit>
        <trans-unit id="9c699eaaa968f03f7073bd19cfb4a4bc4c553e9a" translate="yes" xml:space="preserve">
          <source>The two are compared by calling &lt;code&gt;&amp;lt;&lt;/code&gt; on their inner values.</source>
          <target state="translated">2つは、その内部値で &lt;code&gt;&amp;lt;&lt;/code&gt; を呼び出すことによって比較されます。</target>
        </trans-unit>
        <trans-unit id="169dd7de97da6fed33fb4c7fffa1d0926634fd12" translate="yes" xml:space="preserve">
          <source>The two are compared by calling &lt;code&gt;&amp;lt;=&lt;/code&gt; on their inner values.</source>
          <target state="translated">2つは、それらの内部値に対して &lt;code&gt;&amp;lt;=&lt;/code&gt; を呼び出すことによって比較されます。</target>
        </trans-unit>
        <trans-unit id="4559f811138e10e2014d510114ff2517b250941f" translate="yes" xml:space="preserve">
          <source>The two are compared by calling &lt;code&gt;cmp()&lt;/code&gt; on their inner values.</source>
          <target state="translated">2つは、それらの内部値に対して &lt;code&gt;cmp()&lt;/code&gt; を呼び出すことによって比較されます。</target>
        </trans-unit>
        <trans-unit id="39163b76dc0823f8bfd4c0f4a8969c804a3f8075" translate="yes" xml:space="preserve">
          <source>The two are compared by calling &lt;code&gt;partial_cmp()&lt;/code&gt; on their inner values.</source>
          <target state="translated">2つは、それらの内部値に対して &lt;code&gt;partial_cmp()&lt;/code&gt; を呼び出すことによって比較されます。</target>
        </trans-unit>
        <trans-unit id="a9f918beee4f5cf9d1253c5c05628d38cf96954a" translate="yes" xml:space="preserve">
          <source>The two configurations available are:</source>
          <target state="translated">利用可能な2つの構成があります。</target>
        </trans-unit>
        <trans-unit id="450583e125671dcb6a167d6b29518dd2bf3867fb" translate="yes" xml:space="preserve">
          <source>The two kinds of declaration statements are item declarations and &lt;code&gt;let&lt;/code&gt; statements.</source>
          <target state="translated">2種類の宣言ステートメントは、アイテム宣言と &lt;code&gt;let&lt;/code&gt; ステートメントです。</target>
        </trans-unit>
        <trans-unit id="29e11129b6c15c504dcd359f5946098de2a818e8" translate="yes" xml:space="preserve">
          <source>The two main protocols involved in web servers are the &lt;em&gt;Hypertext Transfer Protocol&lt;/em&gt;&lt;em&gt;(HTTP)&lt;/em&gt; and the &lt;em&gt;Transmission Control Protocol&lt;/em&gt;&lt;em&gt;(TCP)&lt;/em&gt;. Both protocols are &lt;em&gt;request-response&lt;/em&gt; protocols, meaning a &lt;em&gt;client&lt;/em&gt; initiates requests and a &lt;em&gt;server&lt;/em&gt; listens to the requests and provides a response to the client. The contents of those requests and responses are defined by the protocols.</source>
          <target state="translated">Webサーバーに含まれる2つの主なプロトコルは、&lt;em&gt;ハイパーテキスト転送プロトコル&lt;/em&gt;&lt;em&gt;（HTTP）&lt;/em&gt;と&lt;em&gt;伝送制御プロトコル&lt;/em&gt;&lt;em&gt;（TCP）&lt;/em&gt;です。どちらのプロトコルも&lt;em&gt;要求/応答&lt;/em&gt;プロトコルです。つまり、&lt;em&gt;クライアント&lt;/em&gt;が要求を開始し、&lt;em&gt;サーバー&lt;/em&gt;が要求をリッスンしてクライアントに応答を提供します。これらの要求と応答の内容は、プロトコルによって定義されます。</target>
        </trans-unit>
        <trans-unit id="203df10027d062d490c4fbf35780fe4d1eed13fd" translate="yes" xml:space="preserve">
          <source>The two most common ways to evaluate an iterator are to use a &lt;code&gt;for&lt;/code&gt; loop like this, or using the &lt;a href=&quot;trait.iterator#method.collect&quot;&gt;&lt;code&gt;collect&lt;/code&gt;&lt;/a&gt; method to produce a new collection.</source>
          <target state="translated">イテレータを評価する最も一般的な2つの方法は、このような &lt;code&gt;for&lt;/code&gt; ループを使用するか、&lt;a href=&quot;trait.iterator#method.collect&quot;&gt; &lt;code&gt;collect&lt;/code&gt; &lt;/a&gt;メソッドを使用して新しいコレクションを作成することです。</target>
        </trans-unit>
        <trans-unit id="f0616989ceb9af09d65c6d30395a15645c3fb4ed" translate="yes" xml:space="preserve">
          <source>The two new lines are:</source>
          <target state="translated">新たに加わった2つの路線は</target>
        </trans-unit>
        <trans-unit id="e483fee205c9c53971b14b5a333e04a44a6db99b" translate="yes" xml:space="preserve">
          <source>The two pointed-to values may overlap. If the values do overlap, then the overlapping region of memory from &lt;code&gt;x&lt;/code&gt; will be used. This is demonstrated in the second example below.</source>
          <target state="translated">2つのポイントされた値が重複する場合があります。値が重複する場合、 &lt;code&gt;x&lt;/code&gt; からのメモリの重複領域が使用されます。これは、下の2番目の例で示されています。</target>
        </trans-unit>
        <trans-unit id="7540e3538a7ee2b354c6ad5eceba51e063d25c18" translate="yes" xml:space="preserve">
          <source>The two slices returned go from the start of the string slice to &lt;code&gt;mid&lt;/code&gt;, and from &lt;code&gt;mid&lt;/code&gt; to the end of the string slice.</source>
          <target state="translated">返される2つのスライスは、文字列スライスの先頭から &lt;code&gt;mid&lt;/code&gt; まで、および &lt;code&gt;mid&lt;/code&gt; から文字列スライスの最後までです。</target>
        </trans-unit>
        <trans-unit id="643186e43b6d06589052d125f62e5365b9c9a558" translate="yes" xml:space="preserve">
          <source>The two threads continue alternating, but the main thread waits because of the call to &lt;code&gt;handle.join()&lt;/code&gt; and does not end until the spawned thread is finished.</source>
          <target state="translated">2つのスレッドは交互に継続しますが、メインスレッドは &lt;code&gt;handle.join()&lt;/code&gt; の呼び出しのために待機し、生成されたスレッドが終了するまで終了しません。</target>
        </trans-unit>
        <trans-unit id="6005b5c0e8b9fae85cf0f2f496cddef96188c2e3" translate="yes" xml:space="preserve">
          <source>The two values of the boolean type are written &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">ブール型の2つの値は、 &lt;code&gt;true&lt;/code&gt; と &lt;code&gt;false&lt;/code&gt; に書き込まれます。</target>
        </trans-unit>
        <trans-unit id="8b6bd47b4f42af9e321626a41d3ac1a949889256" translate="yes" xml:space="preserve">
          <source>The type &lt;a href=&quot;struct.rc&quot;&gt;&lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; provides shared ownership of a value of type &lt;code&gt;T&lt;/code&gt;, allocated in the heap. Invoking &lt;a href=&quot;../clone/trait.clone#tymethod.clone&quot;&gt;&lt;code&gt;clone&lt;/code&gt;&lt;/a&gt; on &lt;a href=&quot;struct.rc&quot;&gt;&lt;code&gt;Rc&lt;/code&gt;&lt;/a&gt; produces a new pointer to the same allocation in the heap. When the last &lt;a href=&quot;struct.rc&quot;&gt;&lt;code&gt;Rc&lt;/code&gt;&lt;/a&gt; pointer to a given allocation is destroyed, the value stored in that allocation (often referred to as &quot;inner value&quot;) is also dropped.</source>
          <target state="translated">タイプ&lt;a href=&quot;struct.rc&quot;&gt; &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; &lt;/a&gt;は、ヒープに割り当てられたタイプ &lt;code&gt;T&lt;/code&gt; の値の共有所有権を提供します。&lt;a href=&quot;struct.rc&quot;&gt; &lt;code&gt;Rc&lt;/code&gt; で&lt;/a&gt;&lt;a href=&quot;../clone/trait.clone#tymethod.clone&quot;&gt; &lt;code&gt;clone&lt;/code&gt; &lt;/a&gt;を呼び出すと、ヒープ内の同じ割り当てへの新しいポインターが生成されます。特定の割り当てへの最後の&lt;a href=&quot;struct.rc&quot;&gt; &lt;code&gt;Rc&lt;/code&gt; &lt;/a&gt;ポインタが破棄されると、その割り当てに格納されている値（「内部値」と呼ばれることが多い）も削除されます。</target>
        </trans-unit>
        <trans-unit id="372e682a79086a952e254015d9198d707b3497b2" translate="yes" xml:space="preserve">
          <source>The type &lt;a href=&quot;struct.rc&quot;&gt;&lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; provides shared ownership of a value of type &lt;code&gt;T&lt;/code&gt;, allocated in the heap. Invoking &lt;a href=&quot;../clone/trait.clone#tymethod.clone&quot;&gt;&lt;code&gt;clone&lt;/code&gt;&lt;/a&gt; on &lt;a href=&quot;struct.rc&quot;&gt;&lt;code&gt;Rc&lt;/code&gt;&lt;/a&gt; produces a new pointer to the same value in the heap. When the last &lt;a href=&quot;struct.rc&quot;&gt;&lt;code&gt;Rc&lt;/code&gt;&lt;/a&gt; pointer to a given value is destroyed, the pointed-to value is also destroyed.</source>
          <target state="translated">型&lt;a href=&quot;struct.rc&quot;&gt; &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; &lt;/a&gt;は、ヒープに割り当てられた型 &lt;code&gt;T&lt;/code&gt; の値の共有所有権を提供します。&lt;a href=&quot;struct.rc&quot;&gt; &lt;code&gt;Rc&lt;/code&gt; で&lt;/a&gt;&lt;a href=&quot;../clone/trait.clone#tymethod.clone&quot;&gt; &lt;code&gt;clone&lt;/code&gt; &lt;/a&gt;を呼び出すと、ヒープ内の同じ値への新しいポインターが生成されます。指定された値への最後の&lt;a href=&quot;struct.rc&quot;&gt; &lt;code&gt;Rc&lt;/code&gt; &lt;/a&gt;ポインターが破棄されると、ポイントされた値も破棄されます。</target>
        </trans-unit>
        <trans-unit id="061bd0bf671c2d672c454254d90151c86753f8be" translate="yes" xml:space="preserve">
          <source>The type &lt;code&gt;Arc&amp;lt;T&amp;gt;&lt;/code&gt; provides shared ownership of a value of type &lt;code&gt;T&lt;/code&gt;, allocated in the heap. Invoking &lt;a href=&quot;../clone/trait.clone#tymethod.clone&quot;&gt;&lt;code&gt;clone&lt;/code&gt;&lt;/a&gt; on &lt;code&gt;Arc&lt;/code&gt; produces a new &lt;code&gt;Arc&lt;/code&gt; instance, which points to the same allocation on the heap as the source &lt;code&gt;Arc&lt;/code&gt;, while increasing a reference count. When the last &lt;code&gt;Arc&lt;/code&gt; pointer to a given allocation is destroyed, the value stored in that allocation (often referred to as &quot;inner value&quot;) is also dropped.</source>
          <target state="translated">タイプ &lt;code&gt;Arc&amp;lt;T&amp;gt;&lt;/code&gt; は、ヒープに割り当てられたタイプ &lt;code&gt;T&lt;/code&gt; の値の共有所有権を提供します。 &lt;code&gt;Arc&lt;/code&gt; で&lt;a href=&quot;../clone/trait.clone#tymethod.clone&quot;&gt; &lt;code&gt;clone&lt;/code&gt; &lt;/a&gt;を呼び出すと、新しい &lt;code&gt;Arc&lt;/code&gt; インスタンスが生成されます。これは、参照カウントを増やしながら、ソース &lt;code&gt;Arc&lt;/code&gt; と同じヒープ上の割り当てを指します。特定の割り当てへの最後の &lt;code&gt;Arc&lt;/code&gt; ポインターが破棄されると、その割り当てに格納されている値（「内部値」と呼ばれることが多い）も削除されます。</target>
        </trans-unit>
        <trans-unit id="6e13391af6d4685735ce2468fa0b2df950149996" translate="yes" xml:space="preserve">
          <source>The type &lt;code&gt;Arc&amp;lt;T&amp;gt;&lt;/code&gt; provides shared ownership of a value of type &lt;code&gt;T&lt;/code&gt;, allocated in the heap. Invoking &lt;a href=&quot;../clone/trait.clone#tymethod.clone&quot;&gt;&lt;code&gt;clone&lt;/code&gt;&lt;/a&gt; on &lt;code&gt;Arc&lt;/code&gt; produces a new &lt;code&gt;Arc&lt;/code&gt; instance, which points to the same value on the heap as the source &lt;code&gt;Arc&lt;/code&gt;, while increasing a reference count. When the last &lt;code&gt;Arc&lt;/code&gt; pointer to a given value is destroyed, the pointed-to value is also destroyed.</source>
          <target state="translated">タイプ &lt;code&gt;Arc&amp;lt;T&amp;gt;&lt;/code&gt; は、ヒープに割り当てられたタイプ &lt;code&gt;T&lt;/code&gt; の値の共有所有権を提供します。 &lt;code&gt;Arc&lt;/code&gt; で&lt;a href=&quot;../clone/trait.clone#tymethod.clone&quot;&gt; &lt;code&gt;clone&lt;/code&gt; &lt;/a&gt;を呼び出すと、新しい &lt;code&gt;Arc&lt;/code&gt; インスタンスが生成されます。これは、参照カウントを増やしながら、ヒープ上のソース &lt;code&gt;Arc&lt;/code&gt; と同じ値を指します。指定された値への最後の &lt;code&gt;Arc&lt;/code&gt; ポインターが破棄されると、ポイントされた値も破棄されます。</target>
        </trans-unit>
        <trans-unit id="c30f5ce28986d51c472e8b2cb793889a1cf9299e" translate="yes" xml:space="preserve">
          <source>The type &lt;code&gt;Cow&lt;/code&gt; is a smart pointer providing clone-on-write functionality: it can enclose and provide immutable access to borrowed data, and clone the data lazily when mutation or ownership is required. The type is designed to work with general borrowed data via the &lt;code&gt;Borrow&lt;/code&gt; trait.</source>
          <target state="translated">タイプ &lt;code&gt;Cow&lt;/code&gt; は、クローンオンライト機能を提供するスマートポインターです。借用データを囲み、不変のアクセスを提供し、ミューテーションまたは所有権が必要な場合にデータをレイジーにクローンできます。タイプは、 &lt;code&gt;Borrow&lt;/code&gt; トレイトを介して一般的な借用データを処理するように設計されています。</target>
        </trans-unit>
        <trans-unit id="9f7d7514bdc86a24a5ff52dd05fe5c13a9b5c0e6" translate="yes" xml:space="preserve">
          <source>The type &lt;code&gt;Item&lt;/code&gt; is a placeholder type, and the &lt;code&gt;next&lt;/code&gt; method&amp;rsquo;s definition shows that it will return values of type &lt;code&gt;Option&amp;lt;Self::Item&amp;gt;&lt;/code&gt;. Implementors of the &lt;code&gt;Iterator&lt;/code&gt; trait will specify the concrete type for &lt;code&gt;Item&lt;/code&gt;, and the &lt;code&gt;next&lt;/code&gt; method will return an &lt;code&gt;Option&lt;/code&gt; containing a value of that concrete type.</source>
          <target state="translated">タイプ &lt;code&gt;Item&lt;/code&gt; はプレースホルダータイプであり、 &lt;code&gt;next&lt;/code&gt; メソッドの定義は、タイプ &lt;code&gt;Option&amp;lt;Self::Item&amp;gt;&lt;/code&gt; 値を返すことを示しています。 &lt;code&gt;Iterator&lt;/code&gt; トレイトの実装者は &lt;code&gt;Item&lt;/code&gt; の具象タイプを指定し、 &lt;code&gt;next&lt;/code&gt; メソッドはその具象タイプの値を含む &lt;code&gt;Option&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="b50c152c5140d221fbe925adaec14a20d6c4527c" translate="yes" xml:space="preserve">
          <source>The type &lt;code&gt;Self&lt;/code&gt; acts as an alias to the type of the current trait implementer, or &quot;receiver type&quot;. Besides the already mentioned &lt;code&gt;Self&lt;/code&gt;, &lt;code&gt;&amp;amp;Self&lt;/code&gt; and &lt;code&gt;&amp;amp;mut Self&lt;/code&gt; valid receiver types, the following are also valid: &lt;code&gt;self: Box&amp;lt;Self&amp;gt;&lt;/code&gt;, &lt;code&gt;self: Rc&amp;lt;Self&amp;gt;&lt;/code&gt;, &lt;code&gt;self: Arc&amp;lt;Self&amp;gt;&lt;/code&gt;, and &lt;code&gt;self: Pin&amp;lt;P&amp;gt;&lt;/code&gt; (where P is one of the previous types except &lt;code&gt;Self&lt;/code&gt;). Note that &lt;code&gt;Self&lt;/code&gt; can also be the underlying implementing type, like &lt;code&gt;Foo&lt;/code&gt; in the following example:</source>
          <target state="translated">タイプ &lt;code&gt;Self&lt;/code&gt; は、現在のトレイト実装者のタイプ、つまり「レシーバータイプ」のエイリアスとして機能します。すでに述べた &lt;code&gt;Self&lt;/code&gt; 、 &lt;code&gt;&amp;amp;Self&lt;/code&gt; 、 &lt;code&gt;&amp;amp;mut Self&lt;/code&gt; の有効なレシーバータイプに加えて、次のものも有効です： &lt;code&gt;self: Box&amp;lt;Self&amp;gt;&lt;/code&gt; 、 &lt;code&gt;self: Rc&amp;lt;Self&amp;gt;&lt;/code&gt; 、 &lt;code&gt;self: Arc&amp;lt;Self&amp;gt;&lt;/code&gt; 、 &lt;code&gt;self: Pin&amp;lt;P&amp;gt;&lt;/code&gt; （ここでPは、 &lt;code&gt;Self&lt;/code&gt; を除く以前のタイプの1つです）。次の例の &lt;code&gt;Foo&lt;/code&gt; のように、 &lt;code&gt;Self&lt;/code&gt; も基礎となる実装タイプになる可能性があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="86f527297d32ae3d914332f31c2f8f0967b4e336" translate="yes" xml:space="preserve">
          <source>The type alias helps in two ways: it makes code easier to write &lt;em&gt;and&lt;/em&gt; it gives us a consistent interface across all of &lt;code&gt;std::io&lt;/code&gt;. Because it&amp;rsquo;s an alias, it&amp;rsquo;s just another &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt;, which means we can use any methods that work on &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt; with it, as well as special syntax like the &lt;code&gt;?&lt;/code&gt; operator.</source>
          <target state="translated">型エイリアスは、2つの点で役立ちます。コードを記述&lt;em&gt;し&lt;/em&gt;やすくし、すべての &lt;code&gt;std::io&lt;/code&gt; にわたって一貫したインターフェイスを提供します。それは別名なので、それはちょうど別だ &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt; 私たちは仕事というの任意の方法を使用できることを意味し、 &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt; それでだけでなく、のような特殊な構文 &lt;code&gt;?&lt;/code&gt; オペレーター。</target>
        </trans-unit>
        <trans-unit id="ea0e2aaa51d45e0a422d27f3c58e30936523ccce" translate="yes" xml:space="preserve">
          <source>The type annotation &lt;code&gt;HashMap&amp;lt;_, _&amp;gt;&lt;/code&gt; is needed here because it&amp;rsquo;s possible to &lt;code&gt;collect&lt;/code&gt; into many different data structures and Rust doesn&amp;rsquo;t know which you want unless you specify. For the parameters for the key and value types, however, we use underscores, and Rust can infer the types that the hash map contains based on the types of the data in the vectors.</source>
          <target state="translated">型注釈 &lt;code&gt;HashMap&amp;lt;_, _&amp;gt;&lt;/code&gt; が必要なのは、多くの異なるデータ構造に &lt;code&gt;collect&lt;/code&gt; ことが可能であり、Rustは指定しない限りどちらを使用するかわからないためです。ただし、キーと値の型のパラメーターにはアンダースコアを使用し、Rustはベクター内のデータの型に基づいてハッシュマップに含まれる型を推測できます。</target>
        </trans-unit>
        <trans-unit id="19887ad86a95d19b831c6b68bb5aee99f3125dcd" translate="yes" xml:space="preserve">
          <source>The type annotation &lt;code&gt;HashMap&amp;lt;_, _&amp;gt;&lt;/code&gt; is needed here because it&amp;rsquo;s possible to &lt;code&gt;collect&lt;/code&gt; into many different data structures and Rust doesn&amp;rsquo;t know which you want unless you specify. For the parameters for the key and value types, however, we use underscores, and Rust can infer the types that the hash map contains based on the types of the data in the vectors. In Listing 8-21, the key type will be &lt;code&gt;String&lt;/code&gt; and the value type will be &lt;code&gt;i32&lt;/code&gt;, just as the types were in Listing 8-20.</source>
          <target state="translated">ここでは、型アノテーション &lt;code&gt;HashMap&amp;lt;_, _&amp;gt;&lt;/code&gt; が必要です。これは、さまざまなデータ構造に &lt;code&gt;collect&lt;/code&gt; ことが可能であり、Rustは、指定しない限り、どちらが必要かわからないためです。ただし、キータイプと値タイプのパラメーターにはアンダースコアを使用し、Rustは、ベクトル内のデータのタイプに基づいて、ハッシュマップに含まれるタイプを推測できます。リスト8-21では、リスト8-20のタイプと同様に、キータイプは &lt;code&gt;String&lt;/code&gt; になり、値タイプは &lt;code&gt;i32&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="fdf52c33ab9420faf47eea0ae86189b509c83d56" translate="yes" xml:space="preserve">
          <source>The type definition contains some field whose type requires an outlives annotation. Outlives annotations (e.g., &lt;code&gt;T: 'a&lt;/code&gt;) are used to guarantee that all the data in T is valid for at least the lifetime &lt;code&gt;'a&lt;/code&gt;. This scenario most commonly arises when the type contains an associated type reference like &lt;code&gt;&amp;lt;T as SomeTrait&amp;lt;'a&amp;gt;&amp;gt;::Output&lt;/code&gt;, as shown in the previous code.</source>
          <target state="translated">タイプ定義には、タイプがoutlivesアノテーションを必要とするフィールドが含まれています。存続期間の注釈（たとえば、 &lt;code&gt;T: 'a&lt;/code&gt; ）は、T内のすべてのデータが少なくとも存続期間 &lt;code&gt;'a&lt;/code&gt; の間有効であることを保証するために使用されます。このシナリオは、前のコードに示されているように、タイプに &lt;code&gt;&amp;lt;T as SomeTrait&amp;lt;'a&amp;gt;&amp;gt;::Output&lt;/code&gt; ような関連するタイプ参照が含まれている場合に最も一般的に発生します。</target>
        </trans-unit>
        <trans-unit id="06a3cc90dfa59efcb3be0ad0da5e31c3b001a903" translate="yes" xml:space="preserve">
          <source>The type definition contains some field whose type requires an outlives annotation. Outlives annotations (e.g., &lt;code&gt;T: 'a&lt;/code&gt;) are used to guarantee that all the data in T is valid for at least the lifetime &lt;code&gt;'a&lt;/code&gt;. This scenario most commonly arises when the type contains an associated type reference like &lt;code&gt;&amp;lt;T as SomeTrait&amp;lt;'a&amp;gt;&amp;gt;::Output&lt;/code&gt;, as shown in this example:</source>
          <target state="translated">型定義には、型に存続アノテーションが必要ないくつかのフィールドが含まれています。Outlivesアノテーション（例 &lt;code&gt;T: 'a&lt;/code&gt; ）は、Tのすべてのデータが少なくともライフタイム &lt;code&gt;'a&lt;/code&gt; の間有効であることを保証するために使用されます。このシナリオは、次の例に示すように、タイプに &lt;code&gt;&amp;lt;T as SomeTrait&amp;lt;'a&amp;gt;&amp;gt;::Output&lt;/code&gt; などの関連するタイプ参照が含まれている場合に最もよく発生します。</target>
        </trans-unit>
        <trans-unit id="fc99bc0924bfaeb5da14796b8d2b7f81fb11367e" translate="yes" xml:space="preserve">
          <source>The type does not fulfill the required lifetime.</source>
          <target state="translated">このタイプは、必要な寿命を満たしていません。</target>
        </trans-unit>
        <trans-unit id="9e9c0bf21d5e45e81b33f072a97367bb2e667f29" translate="yes" xml:space="preserve">
          <source>The type must have the &lt;code&gt;Sync&lt;/code&gt; trait bound to allow thread-safe access.</source>
          <target state="translated">スレッドセーフなアクセスを可能にするには、型に &lt;code&gt;Sync&lt;/code&gt; トレイトがバインドされている必要があります。</target>
        </trans-unit>
        <trans-unit id="5761684433f543db118c22f7a347176798eaf3c5" translate="yes" xml:space="preserve">
          <source>The type name should not be considered a unique identifier of a type; multiple types may share the same type name.</source>
          <target state="translated">型名は型の一意な識別子とみなされるべきではありません;複数の型は同じ型名を共有することができます。</target>
        </trans-unit>
        <trans-unit id="8abd0fc7da623f26ad9fecceeea94f5bfc1f633a" translate="yes" xml:space="preserve">
          <source>The type name used is not in scope.</source>
          <target state="translated">使用されている型名はスコープに入っていません。</target>
        </trans-unit>
        <trans-unit id="89e2360bf1d9e23be29f6ad88e266a77e3f4f82f" translate="yes" xml:space="preserve">
          <source>The type of &lt;code&gt;guess&lt;/code&gt; in this code would have to be an integer &lt;em&gt;and&lt;/em&gt; a string, and Rust requires that &lt;code&gt;guess&lt;/code&gt; have only one type. So what does &lt;code&gt;continue&lt;/code&gt; return? How were we allowed to return a &lt;code&gt;u32&lt;/code&gt; from one arm and have another arm that ends with &lt;code&gt;continue&lt;/code&gt; in Listing 19-26?</source>
          <target state="translated">このコードの &lt;code&gt;guess&lt;/code&gt; のタイプは整数&lt;em&gt;と&lt;/em&gt;文字列でなければなりません。Rustは &lt;code&gt;guess&lt;/code&gt; タイプが1つだけであることを要求します。だから何をし &lt;code&gt;continue&lt;/code&gt; リターンを？リスト19-26で、あるアームから &lt;code&gt;u32&lt;/code&gt; を返し、最後に別のアームを &lt;code&gt;continue&lt;/code&gt; ことがどのように許可されましたか？</target>
        </trans-unit>
        <trans-unit id="ae6cd25ffa500de06212f0c2207844d88b02a6be" translate="yes" xml:space="preserve">
          <source>The type of &lt;code&gt;s&lt;/code&gt; here is &lt;code&gt;&amp;amp;str&lt;/code&gt;: it&amp;rsquo;s a slice pointing to that specific point of the binary. This is also why string literals are immutable; &lt;code&gt;&amp;amp;str&lt;/code&gt; is an immutable reference.</source>
          <target state="translated">ここで &lt;code&gt;s&lt;/code&gt; のタイプは &lt;code&gt;&amp;amp;str&lt;/code&gt; です。これは、バイナリのその特定のポイントを指すスライスです。これは、文字列リテラルが不変である理由でもあります。 &lt;code&gt;&amp;amp;str&lt;/code&gt; は不変の参照です。</target>
        </trans-unit>
        <trans-unit id="34ca2b2668ed637a52d925af5ee324f0385b2620" translate="yes" xml:space="preserve">
          <source>The type of a block is the type of the final expression, or &lt;code&gt;()&lt;/code&gt; if the final expression is omitted.</source>
          <target state="translated">ブロックのタイプは、最終式のタイプ、または最終式が省略されている場合は &lt;code&gt;()&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="04575cb944f5ba2523fe623e2ff7231ff81edabc" translate="yes" xml:space="preserve">
          <source>The type of a const parameter references other generic parameters.</source>
          <target state="translated">constパラメータの型は、他の汎用パラメータを参照します。</target>
        </trans-unit>
        <trans-unit id="ed47b86a36c39f67b1e05de4464008d8a1956f2c" translate="yes" xml:space="preserve">
          <source>The type of an &lt;em&gt;unsuffixed&lt;/em&gt; floating-point literal is determined by type inference:</source>
          <target state="translated">&lt;em&gt;接尾辞なしの&lt;/em&gt;浮動小数点リテラルの型は、型推論によって決定されます。</target>
        </trans-unit>
        <trans-unit id="6114cd343a30b85f17666d6fd494268587f7b8ea" translate="yes" xml:space="preserve">
          <source>The type of an &lt;em&gt;unsuffixed&lt;/em&gt; integer literal is determined by type inference:</source>
          <target state="translated">&lt;em&gt;接尾辞のない&lt;/em&gt;整数リテラルの型は、型推論によって決定されます。</target>
        </trans-unit>
        <trans-unit id="89c2fbc4e2ada9abaa3500c6a37ddee8522542e8" translate="yes" xml:space="preserve">
          <source>The type of the discriminant, which must satisfy the trait bounds required by &lt;code&gt;mem::Discriminant&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;mem::Discriminant&lt;/code&gt; 要求する特性の範囲を満たさなければならない判別式のタイプ。</target>
        </trans-unit>
        <trans-unit id="f7d869126e3c264254879784374ee68ec03547b9" translate="yes" xml:space="preserve">
          <source>The type of the elements being iterated over.</source>
          <target state="translated">反復される要素の型。</target>
        </trans-unit>
        <trans-unit id="af8245e533db8494bb30cc9dc28768887bbb8570" translate="yes" xml:space="preserve">
          <source>The type of the value that &lt;code&gt;File::open&lt;/code&gt; returns inside the &lt;code&gt;Err&lt;/code&gt; variant is &lt;code&gt;io::Error&lt;/code&gt;, which is a struct provided by the standard library. This struct has a method &lt;code&gt;kind&lt;/code&gt; that we can call to get an &lt;code&gt;io::ErrorKind&lt;/code&gt; value. The enum &lt;code&gt;io::ErrorKind&lt;/code&gt; is provided by the standard library and has variants representing the different kinds of errors that might result from an &lt;code&gt;io&lt;/code&gt; operation. The variant we want to use is &lt;code&gt;ErrorKind::NotFound&lt;/code&gt;, which indicates the file we&amp;rsquo;re trying to open doesn&amp;rsquo;t exist yet. So we match on &lt;code&gt;f&lt;/code&gt;, but we also have an inner match on &lt;code&gt;error.kind()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Err&lt;/code&gt; バリアント内で &lt;code&gt;File::open&lt;/code&gt; が返す値のタイプは &lt;code&gt;io::Error&lt;/code&gt; 、これは標準ライブラリによって提供される構造体です。この構造体には、 &lt;code&gt;io::ErrorKind&lt;/code&gt; 値を取得するために呼び出すことができるメソッドの &lt;code&gt;kind&lt;/code&gt; があります。列挙型 &lt;code&gt;io::ErrorKind&lt;/code&gt; は標準ライブラリによって提供され、 &lt;code&gt;io&lt;/code&gt; 操作から発生する可能性のあるさまざまな種類のエラーを表すバリアントがあります。使用したいバリアントは &lt;code&gt;ErrorKind::NotFound&lt;/code&gt; 。これは、開こうとしているファイルがまだ存在しないことを示しています。したがって、 &lt;code&gt;f&lt;/code&gt; で一致しますが、 &lt;code&gt;error.kind()&lt;/code&gt; でも内部一致があります。</target>
        </trans-unit>
        <trans-unit id="545510a669763ef63063641881497bf7dd3f481a" translate="yes" xml:space="preserve">
          <source>The type of this value when viewed as failed.</source>
          <target state="translated">失敗したと見なしたときのこの値の型。</target>
        </trans-unit>
        <trans-unit id="8b60f120f0bca222851815dfc6ed07a4a0520575" translate="yes" xml:space="preserve">
          <source>The type of this value when viewed as successful.</source>
          <target state="translated">成功したと見たときのこの値のタイプ。</target>
        </trans-unit>
        <trans-unit id="bf039a86046c9f49aceed05895007223ced0c5ff" translate="yes" xml:space="preserve">
          <source>The type of value produced on completion.</source>
          <target state="translated">完成時に生み出される価値の種類。</target>
        </trans-unit>
        <trans-unit id="16751927675b4a2fde8980932985c3b025559cb0" translate="yes" xml:space="preserve">
          <source>The type of value this generator returns.</source>
          <target state="translated">このジェネレータが返す値のタイプ。</target>
        </trans-unit>
        <trans-unit id="bf293514c386bb6e45033b7b50e4549a332b83ad" translate="yes" xml:space="preserve">
          <source>The type of value this generator returns. &lt;a href=&quot;../ops/trait.generator#associatedtype.Return&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">このジェネレータが返す値のタイプ。&lt;a href=&quot;../ops/trait.generator#associatedtype.Return&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="fcbd5cd653d3daa61c5d5d30831f8972d04f844c" translate="yes" xml:space="preserve">
          <source>The type of value this generator returns. &lt;a href=&quot;ops/trait.generator#associatedtype.Return&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">このジェネレータが返す値のタイプ。&lt;a href=&quot;ops/trait.generator#associatedtype.Return&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c5e0eda41ab22396cfa2f1334045d1746f855426" translate="yes" xml:space="preserve">
          <source>The type of value this generator yields.</source>
          <target state="translated">このジェネレータが生成する値のタイプ。</target>
        </trans-unit>
        <trans-unit id="b8cb8237cc8b58247dbdfe05ac4618d5ded726d1" translate="yes" xml:space="preserve">
          <source>The type of value this generator yields. &lt;a href=&quot;../ops/trait.generator#associatedtype.Yield&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">このジェネレータが生成する値のタイプ。&lt;a href=&quot;../ops/trait.generator#associatedtype.Yield&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="becf5070fa5e52c8db7c1d497d6f97d2d8cc4f48" translate="yes" xml:space="preserve">
          <source>The type of value this generator yields. &lt;a href=&quot;ops/trait.generator#associatedtype.Yield&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">このジェネレータが生成する値のタイプ。&lt;a href=&quot;ops/trait.generator#associatedtype.Yield&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="586fe8d7efe2a1acc6c511b646a3a08c88efbb26" translate="yes" xml:space="preserve">
          <source>The type parameter &lt;code&gt;T&lt;/code&gt; represents the data that this lock protects. It is required that &lt;code&gt;T&lt;/code&gt; satisfies &lt;a href=&quot;../marker/trait.send&quot;&gt;&lt;code&gt;Send&lt;/code&gt;&lt;/a&gt; to be shared across threads and &lt;a href=&quot;../marker/trait.sync&quot;&gt;&lt;code&gt;Sync&lt;/code&gt;&lt;/a&gt; to allow concurrent access through readers. The RAII guards returned from the locking methods implement &lt;a href=&quot;../ops/trait.deref&quot;&gt;&lt;code&gt;Deref&lt;/code&gt;&lt;/a&gt; (and &lt;a href=&quot;../ops/trait.derefmut&quot;&gt;&lt;code&gt;DerefMut&lt;/code&gt;&lt;/a&gt; for the &lt;code&gt;write&lt;/code&gt; methods) to allow access to the content of the lock.</source>
          <target state="translated">タイプパラメータ &lt;code&gt;T&lt;/code&gt; は、このロックが保護するデータを表します。 &lt;code&gt;T&lt;/code&gt; は、スレッド間で共有される&lt;a href=&quot;../marker/trait.send&quot;&gt; &lt;code&gt;Send&lt;/code&gt; &lt;/a&gt;と、リーダーを介した同時アクセスを可能にする&lt;a href=&quot;../marker/trait.sync&quot;&gt; &lt;code&gt;Sync&lt;/code&gt; &lt;/a&gt;を満たす必要があります。ロックメソッドから返さRAIIガードは、実施&lt;a href=&quot;../ops/trait.deref&quot;&gt; &lt;code&gt;Deref&lt;/code&gt; &lt;/a&gt;（及び&lt;a href=&quot;../ops/trait.derefmut&quot;&gt; &lt;code&gt;DerefMut&lt;/code&gt; の&lt;/a&gt;ための &lt;code&gt;write&lt;/code&gt; ロックのコンテンツへのアクセスを許可する方法）。</target>
        </trans-unit>
        <trans-unit id="f6f9ae50a3ab94a8cf9005786a7b9af006ffe517" translate="yes" xml:space="preserve">
          <source>The type parameters can also be explicitly supplied in a trailing &lt;a href=&quot;../paths&quot;&gt;path&lt;/a&gt; component after the function name. This might be necessary if there is not sufficient context to determine the type parameters. For example, &lt;code&gt;mem::size_of::&amp;lt;u32&amp;gt;() == 4&lt;/code&gt;.</source>
          <target state="translated">型パラメーターは、関数名の後に続く&lt;a href=&quot;../paths&quot;&gt;パス&lt;/a&gt;コンポーネントで明示的に指定することもできます。これは、タイプパラメータを決定するための十分なコンテキストがない場合に必要になることがあります。たとえば、 &lt;code&gt;mem::size_of::&amp;lt;u32&amp;gt;() == 4&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="618c44497e554625efd295f7702914ef5292c792" translate="yes" xml:space="preserve">
          <source>The type placeholder &lt;code&gt;_&lt;/code&gt; can be used outside item's signature as follows:</source>
          <target state="translated">タイププレースホルダー &lt;code&gt;_&lt;/code&gt; は、アイテムの署名の外で次のように使用できます。</target>
        </trans-unit>
        <trans-unit id="ba2931173dcc6550d705628d261c402eccc53232" translate="yes" xml:space="preserve">
          <source>The type placeholder &lt;code&gt;_&lt;/code&gt; was used within a type on an item's signature.</source>
          <target state="translated">タイププレースホルダー &lt;code&gt;_&lt;/code&gt; は、アイテムの署名のタイプ内で使用されました。</target>
        </trans-unit>
        <trans-unit id="11d805f97c85ceb05a75d626e5740cb0e2204f44" translate="yes" xml:space="preserve">
          <source>The type returned by formatter methods.</source>
          <target state="translated">フォーマッタのメソッドが返す型。</target>
        </trans-unit>
        <trans-unit id="1c16d9adfa415d1c3d1e4550b932c426a82800c2" translate="yes" xml:space="preserve">
          <source>The type returned in the event of a conversion error.</source>
          <target state="translated">変換エラーが発生した場合に返される型。</target>
        </trans-unit>
        <trans-unit id="2d7863bb088ba575c630ae75df049f3bc518eb6c" translate="yes" xml:space="preserve">
          <source>The type that the &lt;code&gt;else&lt;/code&gt; blocks evaluate to must be compatible with the type that the &lt;code&gt;if&lt;/code&gt; block evaluates to.</source>
          <target state="translated">タイプの &lt;code&gt;else&lt;/code&gt; のブロックがに評価し、その型と互換性がなければならない &lt;code&gt;if&lt;/code&gt; 、ブロックが評価されます。</target>
        </trans-unit>
        <trans-unit id="f8e8d68133a2235c54df1609c3fa9dc8e972aa60" translate="yes" xml:space="preserve">
          <source>The type to return is inferred from context; this is equivalent to &lt;code&gt;Default::default()&lt;/code&gt; but shorter to type.</source>
          <target state="translated">返されるタイプはコンテキストから推測されます。これは &lt;code&gt;Default::default()&lt;/code&gt; と同等ですが、入力するのが短くなります。</target>
        </trans-unit>
        <trans-unit id="6b611879bfea657d3652c629b736393c4b650211" translate="yes" xml:space="preserve">
          <source>The type you are trying to impl &lt;code&gt;CoerceUnsized&lt;/code&gt; for is not a struct. &lt;code&gt;CoerceUnsized&lt;/code&gt; can only be implemented for a struct. Unsized types are already able to be coerced without an implementation of &lt;code&gt;CoerceUnsized&lt;/code&gt; whereas a struct containing an unsized type needs to know the unsized type field it's containing is able to be coerced. An &lt;a href=&quot;book/ch19-04-advanced-types#dynamically-sized-types-and-the-sized-trait&quot;&gt;unsized type&lt;/a&gt; is any type that the compiler doesn't know the length or alignment of at compile time. Any struct containing an unsized type is also unsized.</source>
          <target state="translated">&lt;code&gt;CoerceUnsized&lt;/code&gt; を実装しようとしている型は構造体ではありません。 &lt;code&gt;CoerceUnsized&lt;/code&gt; は、構造体に対してのみ実装できます。サイズなしの型は、CoerceUnsizedの実装なしで強制的に &lt;code&gt;CoerceUnsized&lt;/code&gt; できますが、サイズなしの型を含む構造体は、それが含むサイズなしの型フィールドを強制的に変換できる必要があります。&lt;a href=&quot;book/ch19-04-advanced-types#dynamically-sized-types-and-the-sized-trait&quot;&gt;無サイズタイプは&lt;/a&gt;、コンパイラがコンパイル時の長さや配置を知っていないことをどのようなタイプです。サイズなしの型を含む構造体もサイズなしです。</target>
        </trans-unit>
        <trans-unit id="63c27305b7150da660772855aa4571d697d89b10" translate="yes" xml:space="preserve">
          <source>The type you can compare with is controlled by &lt;code&gt;PartialEq&lt;/code&gt;'s type parameter. For example, let's tweak our previous code a bit:</source>
          <target state="translated">比較できる型は、 &lt;code&gt;PartialEq&lt;/code&gt; の型パラメーターによって制御されます。たとえば、前のコードを少し調整してみましょう。</target>
        </trans-unit>
        <trans-unit id="93ef2caad28212460c75d9146f8dc4d0899b2d98" translate="yes" xml:space="preserve">
          <source>The type-checker needed to know the type of an expression, but that type had not yet been inferred.</source>
          <target state="translated">タイプチェッカーは式のタイプを知る必要がありましたが、そのタイプはまだ推測されていませんでした。</target>
        </trans-unit>
        <trans-unit id="f584bedf990c038f22247101ab8b097fb3a593e8" translate="yes" xml:space="preserve">
          <source>The types &lt;code&gt;*const T&lt;/code&gt;, &lt;code&gt;&amp;amp;T&lt;/code&gt;, &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt;, &lt;code&gt;Option&amp;lt;&amp;amp;T&amp;gt;&lt;/code&gt;, and &lt;code&gt;Option&amp;lt;Box&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt; all have the same size. If &lt;code&gt;T&lt;/code&gt; is Sized, all of those types have the same size as &lt;code&gt;usize&lt;/code&gt;.</source>
          <target state="translated">タイプ &lt;code&gt;*const T&lt;/code&gt; 、 &lt;code&gt;&amp;amp;T&lt;/code&gt; 、 &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; 、 &lt;code&gt;Option&amp;lt;&amp;amp;T&amp;gt;&lt;/code&gt; 、および &lt;code&gt;Option&amp;lt;Box&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt; すべて同じサイズです。 &lt;code&gt;T&lt;/code&gt; がSizedの場合、それらすべての型は &lt;code&gt;usize&lt;/code&gt; と同じサイズです。</target>
        </trans-unit>
        <trans-unit id="5722d857751fd92f7cd76388f248410597abc535" translate="yes" xml:space="preserve">
          <source>The types &lt;code&gt;char&lt;/code&gt; and &lt;code&gt;str&lt;/code&gt; hold textual data.</source>
          <target state="translated">&lt;code&gt;char&lt;/code&gt; 型と &lt;code&gt;str&lt;/code&gt; 型はテキストデータを保持します。</target>
        </trans-unit>
        <trans-unit id="99894423e354dd0b37e0c9ced81c62b48fcf23b2" translate="yes" xml:space="preserve">
          <source>The types of any associated constants in a trait implementation must match the types in the trait definition.</source>
          <target state="translated">このような場合には、「Together」を使用することで、「Together」を使用することができます。</target>
        </trans-unit>
        <trans-unit id="ff52a3715390889940af516c60b08b678feeadf3" translate="yes" xml:space="preserve">
          <source>The types of any associated constants in a trait implementation must match the types in the trait definition. This error indicates that there was a mismatch.</source>
          <target state="translated">形質実装の関連する定数の型は、形質定義の型と一致していなければなりません。このエラーは、不一致を示します。</target>
        </trans-unit>
        <trans-unit id="2a9653c2b160c32821b432c07707efaa597921f1" translate="yes" xml:space="preserve">
          <source>The typical way to obtain a &lt;code&gt;Weak&lt;/code&gt; pointer is to call &lt;a href=&quot;struct.arc#method.downgrade&quot;&gt;&lt;code&gt;Arc::downgrade&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Weak&lt;/code&gt; ポインターを取得する一般的な方法は、&lt;a href=&quot;struct.arc#method.downgrade&quot;&gt; &lt;code&gt;Arc::downgrade&lt;/code&gt; &lt;/a&gt;を呼び出すことです。</target>
        </trans-unit>
        <trans-unit id="d7670bf148a2a36a6287e0959f849df36450aeea" translate="yes" xml:space="preserve">
          <source>The typical way to obtain a &lt;code&gt;Weak&lt;/code&gt; pointer is to call &lt;a href=&quot;struct.rc#method.downgrade&quot;&gt;&lt;code&gt;Rc::downgrade&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Weak&lt;/code&gt; ポインターを取得する一般的な方法は、&lt;a href=&quot;struct.rc#method.downgrade&quot;&gt; &lt;code&gt;Rc::downgrade&lt;/code&gt; &lt;/a&gt;を呼び出すことです。</target>
        </trans-unit>
        <trans-unit id="e38264f429668f9c24babca8440ad652db0e6325" translate="yes" xml:space="preserve">
          <source>The unary logical negation operator &lt;code&gt;!&lt;/code&gt;.</source>
          <target state="translated">単項論理否定演算子 &lt;code&gt;!&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6144b29ea1cdce68ecac471463a0fdc0639b34f9" translate="yes" xml:space="preserve">
          <source>The unary negation operator &lt;code&gt;-&lt;/code&gt;.</source>
          <target state="translated">単項否定演算子 &lt;code&gt;-&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7181a66c31dbb848d4da8d3e96055db8ae78d130" translate="yes" xml:space="preserve">
          <source>The underlying &lt;a href=&quot;struct.metadata&quot;&gt;&lt;code&gt;Metadata&lt;/code&gt;&lt;/a&gt; struct needs to be retrieved with the &lt;a href=&quot;fn.symlink_metadata&quot;&gt;&lt;code&gt;fs::symlink_metadata&lt;/code&gt;&lt;/a&gt; function and not the &lt;a href=&quot;fn.metadata&quot;&gt;&lt;code&gt;fs::metadata&lt;/code&gt;&lt;/a&gt; function. The &lt;a href=&quot;fn.metadata&quot;&gt;&lt;code&gt;fs::metadata&lt;/code&gt;&lt;/a&gt; function follows symbolic links, so &lt;a href=&quot;struct.filetype#method.is_symlink&quot;&gt;&lt;code&gt;is_symlink&lt;/code&gt;&lt;/a&gt; would always return &lt;code&gt;false&lt;/code&gt; for the target file.</source>
          <target state="translated">基礎となる&lt;a href=&quot;struct.metadata&quot;&gt; &lt;code&gt;Metadata&lt;/code&gt; &lt;/a&gt;構造体は、&lt;a href=&quot;fn.symlink_metadata&quot;&gt; &lt;code&gt;fs::symlink_metadata&lt;/code&gt; &lt;/a&gt;関数ではなく、&lt;a href=&quot;fn.metadata&quot;&gt; &lt;code&gt;fs::metadata&lt;/code&gt; &lt;/a&gt;symlink_metadata関数で取得する必要があります。&lt;a href=&quot;fn.metadata&quot;&gt; &lt;code&gt;fs::metadata&lt;/code&gt; &lt;/a&gt;ので機能は、シンボリックリンクをたどり&lt;a href=&quot;struct.filetype#method.is_symlink&quot;&gt; &lt;code&gt;is_symlink&lt;/code&gt; は&lt;/a&gt;常に戻ってくる &lt;code&gt;false&lt;/code&gt; ターゲットファイルのために。</target>
        </trans-unit>
        <trans-unit id="5ba52bb287979fcbe21a62414e5cba80ede6c6c5" translate="yes" xml:space="preserve">
          <source>The underlying &lt;code&gt;RefCell&lt;/code&gt; can never be mutably borrowed from again and will always appear already immutably borrowed. It is not a good idea to leak more than a constant number of references. The &lt;code&gt;RefCell&lt;/code&gt; can be immutably borrowed again if only a smaller number of leaks have occurred in total.</source>
          <target state="translated">基になる &lt;code&gt;RefCell&lt;/code&gt; は、二度と変更可能に借用することはできず、常に不変に借用されているように見えます。一定数以上の参照をリークすることはお勧めできません。 &lt;code&gt;RefCell&lt;/code&gt; は、漏洩の唯一の小さな数は、合計で発生した場合immutably再び借りすることができます。</target>
        </trans-unit>
        <trans-unit id="16573dc48843cb6201240052d6b60dde180482de" translate="yes" xml:space="preserve">
          <source>The underlying &lt;code&gt;RefCell&lt;/code&gt; can not be borrowed from again and will always appear already mutably borrowed, making the returned reference the only to the interior.</source>
          <target state="translated">基になる &lt;code&gt;RefCell&lt;/code&gt; を再度借用することはできず、常に可変的に借用されているように見え、返された参照は内部のみになります。</target>
        </trans-unit>
        <trans-unit id="485a92064bc4fcb63908fa7e1b3b1ad970b9f88b" translate="yes" xml:space="preserve">
          <source>The underlying &lt;code&gt;RefCell&lt;/code&gt; will remain mutably borrowed until both returned &lt;code&gt;RefMut&lt;/code&gt;s go out of scope.</source>
          <target state="translated">基になる &lt;code&gt;RefCell&lt;/code&gt; は、返された両方の &lt;code&gt;RefMut&lt;/code&gt; が範囲外になるまで、可変に借用されたままになります。</target>
        </trans-unit>
        <trans-unit id="9efa2c9dbfc51e4660e725c77fd7efb185f3f6ff" translate="yes" xml:space="preserve">
          <source>The underlying value can be retrieved through the &lt;code&gt;.0&lt;/code&gt; index of the &lt;code&gt;Wrapping&lt;/code&gt; tuple.</source>
          <target state="translated">基になる値は、 &lt;code&gt;Wrapping&lt;/code&gt; タプルの &lt;code&gt;.0&lt;/code&gt; インデックスを介して取得できます。</target>
        </trans-unit>
        <trans-unit id="1be4ec15824529c7ce6527861e8c2980ac38212f" translate="yes" xml:space="preserve">
          <source>The unique, unnameable symbols are created after macro expansion so that macros may safely emit multiple references to &lt;code&gt;_&lt;/code&gt; imports. For example, the following should not produce an error:</source>
          <target state="translated">マクロが &lt;code&gt;_&lt;/code&gt; インポートへの複数の参照を安全に発行できるように、マクロ展開後に一意の名前のないシンボルが作成されます。たとえば、次の場合はエラーが発生しないはずです。</target>
        </trans-unit>
        <trans-unit id="f4f440ca9518cd96f0fe9c31f85a61d77e18e0f3" translate="yes" xml:space="preserve">
          <source>The unsafe counterpart of this macro is the &lt;a href=&quot;hint/fn.unreachable_unchecked&quot;&gt;&lt;code&gt;unreachable_unchecked&lt;/code&gt;&lt;/a&gt; function, which will cause undefined behavior if the code is reached.</source>
          <target state="translated">このマクロの安全でない対応物は&lt;a href=&quot;hint/fn.unreachable_unchecked&quot;&gt; &lt;code&gt;unreachable_unchecked&lt;/code&gt; &lt;/a&gt;関数であり、コードに到達すると未定義の動作を引き起こします。</target>
        </trans-unit>
        <trans-unit id="c1a83814a7bcbd2091dc90767bec8f24c5d3f1e3" translate="yes" xml:space="preserve">
          <source>The unsigned integer types consist of:</source>
          <target state="translated">符号なし整数型は、以下のように構成されています。</target>
        </trans-unit>
        <trans-unit id="2d2ce136339d709e77fd2d67b03ff1b69af40d44" translate="yes" xml:space="preserve">
          <source>The upper bound of the range (exclusive).</source>
          <target state="translated">範囲の上限(排他的)。</target>
        </trans-unit>
        <trans-unit id="20d82b105410f2577709f06e6539062262a0ca81" translate="yes" xml:space="preserve">
          <source>The upper bound of the range (inclusive)</source>
          <target state="translated">範囲の上限(含む</target>
        </trans-unit>
        <trans-unit id="e68185f2e9603472a1563c4f776b66b2c6a3b822" translate="yes" xml:space="preserve">
          <source>The use of the &lt;a href=&quot;keyword.impl&quot;&gt;&lt;code&gt;impl&lt;/code&gt;&lt;/a&gt; keyword in this position allows the function writer to hide the concrete type as an implementation detail which can change without breaking user's code.</source>
          <target state="translated">この位置で&lt;a href=&quot;keyword.impl&quot;&gt; &lt;code&gt;impl&lt;/code&gt; &lt;/a&gt;キーワードを使用すると、関数の作成者は、ユーザーのコードを壊すことなく変更できる実装の詳細として具象型を非表示にできます。</target>
        </trans-unit>
        <trans-unit id="39cef1794b05feb8ec892ea4cd89efe908da35c8" translate="yes" xml:space="preserve">
          <source>The user could always interrupt the program by using the keyboard shortcut ctrl-c. But there&amp;rsquo;s another way to escape this insatiable monster, as mentioned in the &lt;code&gt;parse&lt;/code&gt; discussion in &lt;a href=&quot;#comparing-the-guess-to-the-secret-number&quot;&gt;&amp;ldquo;Comparing the Guess to the Secret Number&amp;rdquo;&lt;/a&gt;: if the user enters a non-number answer, the program will crash. The user can take advantage of that in order to quit, as shown here:</source>
          <target state="translated">ユーザーは、キーボードショートカットのctrl-cを使用して、常にプログラムに割り込むことができます。しかし、&lt;a href=&quot;#comparing-the-guess-to-the-secret-number&quot;&gt;「推測と秘密の番号の比較」&lt;/a&gt;の &lt;code&gt;parse&lt;/code&gt; 述べたように、この飽くなきモンスターを脱出する別の方法があります。ユーザーが数値以外の回答を入力すると、プログラムがクラッシュします。次に示すように、ユーザーはそれを利用して終了することができます。</target>
        </trans-unit>
        <trans-unit id="e62c088fdd6cf7f93babb9263d9008d71eaadccf" translate="yes" xml:space="preserve">
          <source>The user lacks permissions to perform &lt;code&gt;metadata&lt;/code&gt; call on &lt;code&gt;path&lt;/code&gt;.</source>
          <target state="translated">ユーザーは、 &lt;code&gt;path&lt;/code&gt; &lt;code&gt;metadata&lt;/code&gt; 呼び出しを実行する権限がありません。</target>
        </trans-unit>
        <trans-unit id="0dc65bb53b7876e2a52ec0de6c50b31a471724ba" translate="yes" xml:space="preserve">
          <source>The user lacks permissions to remove the directory at the provided &lt;code&gt;path&lt;/code&gt;.</source>
          <target state="translated">ユーザーには、指定された &lt;code&gt;path&lt;/code&gt; あるディレクトリを削除する権限がありません。</target>
        </trans-unit>
        <trans-unit id="4ed8999bb1ca133f6f343fbba9eb07d31db22560" translate="yes" xml:space="preserve">
          <source>The user lacks permissions to remove the file.</source>
          <target state="translated">ユーザーはファイルを削除する権限を持っていません。</target>
        </trans-unit>
        <trans-unit id="da243dceea5f741ec03e2474a95470f701358e02" translate="yes" xml:space="preserve">
          <source>The user lacks permissions to view contents.</source>
          <target state="translated">ユーザーはコンテンツを表示する権限を持っていません。</target>
        </trans-unit>
        <trans-unit id="a0ceecf91cf3de088e4866146d667401fc9825c7" translate="yes" xml:space="preserve">
          <source>The user lacks the permission to change attributes of the file.</source>
          <target state="translated">ユーザーはファイルの属性を変更する権限を持っていません。</target>
        </trans-unit>
        <trans-unit id="0728943e3f9e2dd60ac0860b5efc3c86277bbcf8" translate="yes" xml:space="preserve">
          <source>The user of &lt;code&gt;from_raw&lt;/code&gt; has to make sure a specific value of &lt;code&gt;T&lt;/code&gt; is only dropped once.</source>
          <target state="translated">&lt;code&gt;from_raw&lt;/code&gt; のユーザーは、 &lt;code&gt;T&lt;/code&gt; の特定の値が1回だけドロップされることを確認する必要があります。</target>
        </trans-unit>
        <trans-unit id="8bc0d661ff73b2e7b2da5a4e28c09493dbabbf98" translate="yes" xml:space="preserve">
          <source>The value &lt;code&gt;to_drop&lt;/code&gt; points to must be valid for dropping, which may mean it must uphold additional invariants - this is type-dependent.</source>
          <target state="translated">&lt;code&gt;to_drop&lt;/code&gt; が指す値は、ドロップに対して有効である必要があります。これは、追加の不変条件を保持する必要があることを意味する場合があります。これはタイプに依存します。</target>
        </trans-unit>
        <trans-unit id="9ef61ff6808c20e3aee33111c7be00b7f9eb3ce9" translate="yes" xml:space="preserve">
          <source>The value being coerced is the actual parameter, and it is coerced to the type of the formal parameter.</source>
          <target state="translated">強制されている値は実際のパラメータであり、形式パラメータの型に強制されています。</target>
        </trans-unit>
        <trans-unit id="a4543ae96f3c210a98b1abf8fa6e1fffb99a3a60" translate="yes" xml:space="preserve">
          <source>The value contained in the &lt;code&gt;Result::Err&lt;/code&gt; variant is the value the thread panicked with; that is, the argument the &lt;code&gt;panic!&lt;/code&gt; macro was called with. Unlike with normal errors, this value doesn't implement the &lt;a href=&quot;../error/trait.error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; trait.</source>
          <target state="translated">&lt;code&gt;Result::Err&lt;/code&gt; バリアントに含まれる値は、スレッドがパニックに陥った値です。つまり、議論は &lt;code&gt;panic!&lt;/code&gt; マクロはで呼び出されました。通常のエラーとは異なり、この値は&lt;a href=&quot;../error/trait.error&quot;&gt; &lt;code&gt;Error&lt;/code&gt; &lt;/a&gt;特性を実装していません。</target>
        </trans-unit>
        <trans-unit id="3a5a7553814237ff25467a69b929b269b579c5c7" translate="yes" xml:space="preserve">
          <source>The value for &lt;code&gt;push&lt;/code&gt; is an expected cost; the method documentation gives a more detailed analysis.</source>
          <target state="translated">&lt;code&gt;push&lt;/code&gt; の値は予想コストです。メソッドのドキュメントは、より詳細な分析を提供します。</target>
        </trans-unit>
        <trans-unit id="7655c33f10da48be510d779b36c1473fc0c444da" translate="yes" xml:space="preserve">
          <source>The value for the width can also be provided as a &lt;a href=&quot;../primitive.usize&quot;&gt;&lt;code&gt;usize&lt;/code&gt;&lt;/a&gt; in the list of parameters by adding a postfix &lt;code&gt;$&lt;/code&gt;, indicating that the second argument is a &lt;a href=&quot;../primitive.usize&quot;&gt;&lt;code&gt;usize&lt;/code&gt;&lt;/a&gt; specifying the width.</source>
          <target state="translated">幅の値は、2番目の引数が幅を指定する&lt;a href=&quot;../primitive.usize&quot;&gt; &lt;code&gt;usize&lt;/code&gt; である&lt;/a&gt;ことを示す接尾辞 &lt;code&gt;$&lt;/code&gt; を追加することにより、パラメーターのリストで&lt;a href=&quot;../primitive.usize&quot;&gt; &lt;code&gt;usize&lt;/code&gt; &lt;/a&gt;として提供することもできます。</target>
        </trans-unit>
        <trans-unit id="d7971e26c81d228c6b498e7c0267b27f63e3a2f0" translate="yes" xml:space="preserve">
          <source>The value for the width can also be provided as a &lt;a href=&quot;../primitive.usize&quot;&gt;&lt;code&gt;usize&lt;/code&gt;&lt;/a&gt; in the list of parameters by using the dollar syntax indicating that the second argument is a &lt;a href=&quot;../primitive.usize&quot;&gt;&lt;code&gt;usize&lt;/code&gt;&lt;/a&gt; specifying the width, for example:</source>
          <target state="translated">幅の値は、2番目の引数が幅を指定する&lt;a href=&quot;../primitive.usize&quot;&gt; &lt;code&gt;usize&lt;/code&gt; である&lt;/a&gt;ことを示すドル構文を使用して、パラメーターのリストで&lt;a href=&quot;../primitive.usize&quot;&gt; &lt;code&gt;usize&lt;/code&gt; &lt;/a&gt;として提供することもできます。次に例を示します。</target>
        </trans-unit>
        <trans-unit id="a708656013343fb0ab99fafd8d21e4229d39b962" translate="yes" xml:space="preserve">
          <source>The value may be any borrowed form of the set's value type, but &lt;a href=&quot;../../hash/trait.hash&quot;&gt;&lt;code&gt;Hash&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../cmp/trait.eq&quot;&gt;&lt;code&gt;Eq&lt;/code&gt;&lt;/a&gt; on the borrowed form &lt;em&gt;must&lt;/em&gt; match those for the value type.</source>
          <target state="translated">値は、セットの値型の任意の借用形式にすることができますが、借用形式の&lt;a href=&quot;../../hash/trait.hash&quot;&gt; &lt;code&gt;Hash&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;../../cmp/trait.eq&quot;&gt; &lt;code&gt;Eq&lt;/code&gt; &lt;/a&gt;は、値型の値と一致する&lt;em&gt;必要があり&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="6f10fa6eb368dac898013f2276c185e31dd968d4" translate="yes" xml:space="preserve">
          <source>The value may be any borrowed form of the set's value type, but &lt;a href=&quot;../hash/trait.hash&quot;&gt;&lt;code&gt;Hash&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../cmp/trait.eq&quot;&gt;&lt;code&gt;Eq&lt;/code&gt;&lt;/a&gt; on the borrowed form &lt;em&gt;must&lt;/em&gt; match those for the value type.</source>
          <target state="translated">値は、セットの値型の任意の借用形式にすることができますが、借用形式の&lt;a href=&quot;../hash/trait.hash&quot;&gt; &lt;code&gt;Hash&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;../cmp/trait.eq&quot;&gt; &lt;code&gt;Eq&lt;/code&gt; &lt;/a&gt;は、値型の値と一致する&lt;em&gt;必要があり&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="cc1bf7113b6ffebee8a5cbda9953ce0f46aa8389" translate="yes" xml:space="preserve">
          <source>The value may be any borrowed form of the set's value type, but the ordering on the borrowed form &lt;em&gt;must&lt;/em&gt; match the ordering on the value type.</source>
          <target state="translated">値はセットの値タイプの任意の借用形式にすることができますが、借用フォームの順序は値タイプの順序と一致する&lt;em&gt;必要があり&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="5386004ae808f6aad83668aa6e791c4916959b45" translate="yes" xml:space="preserve">
          <source>The value must not be zero.</source>
          <target state="translated">値はゼロであってはなりません。</target>
        </trans-unit>
        <trans-unit id="72b7ccc4c541479713442aeb6f9117133107de5e" translate="yes" xml:space="preserve">
          <source>The value must:</source>
          <target state="translated">値が必要です。</target>
        </trans-unit>
        <trans-unit id="fe1619fc66fbf6e80510234756b7616df221cbcc" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;N&lt;/code&gt; that was specified for &lt;code&gt;repr(align(N))&lt;/code&gt; was not a power of two, or was greater than 2^29.</source>
          <target state="translated">&lt;code&gt;repr(align(N))&lt;/code&gt; に指定された &lt;code&gt;N&lt;/code&gt; の値が2の累乗ではなかったか、2 ^ 29を超えていました。</target>
        </trans-unit>
        <trans-unit id="744a6000b03885b8f256f7629c96527779c5f909" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;upper_i&lt;/code&gt; here relies on the language of the text: if we're in &lt;code&gt;en-US&lt;/code&gt;, it should be &lt;code&gt;&quot;I&quot;&lt;/code&gt;, but if we're in &lt;code&gt;tr_TR&lt;/code&gt;, it should be &lt;code&gt;&quot;İ&quot;&lt;/code&gt;. &lt;code&gt;to_uppercase()&lt;/code&gt; does not take this into account, and so:</source>
          <target state="translated">ここでの &lt;code&gt;upper_i&lt;/code&gt; の値はテキストの言語に依存します &lt;code&gt;en-US&lt;/code&gt; 場合は &lt;code&gt;&quot;I&quot;&lt;/code&gt; である必要がありますが、 &lt;code&gt;tr_TR&lt;/code&gt; の場合は &lt;code&gt;&quot;İ&quot;&lt;/code&gt; である必要があります。 &lt;code&gt;to_uppercase()&lt;/code&gt; はこれを考慮しないため、次のようになります。</target>
        </trans-unit>
        <trans-unit id="5ddda6614ea7e3e67438b2aae41a24ac0eb3ff50" translate="yes" xml:space="preserve">
          <source>The value of statics and constants must be known at compile time, and they live for the entire lifetime of a program. Creating a boxed value allocates memory on the heap at runtime, and therefore cannot be done at compile time.</source>
          <target state="translated">スタティックと定数の値はコンパイル時に知っておく必要があり、それらはプログラムの寿命の間ずっと生き続けます。枠付きの値を作成すると、実行時にヒープ上のメモリが割り当てられるため、コンパイル時にはできません。</target>
        </trans-unit>
        <trans-unit id="b739d6552c67cec966b03a294f348b71a38926c7" translate="yes" xml:space="preserve">
          <source>The value of statics and constants must be known at compile time, and they live for the entire lifetime of a program. Creating a boxed value allocates memory on the heap at runtime, and therefore cannot be done at compile time. Erroneous code example:</source>
          <target state="translated">スタティックと定数の値はコンパイル時に知っておく必要があり、それらはプログラムの寿命の間ずっと生き続けます。枠付きの値を作成すると、実行時にヒープ上のメモリが割り当てられるため、コンパイル時にはできません。誤ったコード例。</target>
        </trans-unit>
        <trans-unit id="4b2ff9e347c3c08ba8e806ad69a147ed48871d42" translate="yes" xml:space="preserve">
          <source>The value returned is equivalent to &lt;code&gt;self.seek(SeekFrom::Current(0))&lt;/code&gt; but does not flush the internal buffer. Due to this optimization the function does not guarantee that calling &lt;code&gt;.into_inner()&lt;/code&gt; immediately afterwards will yield the underlying reader at the same position. Use &lt;a href=&quot;struct.bufreader#method.seek&quot;&gt;&lt;code&gt;BufReader::seek&lt;/code&gt;&lt;/a&gt; instead if you require that guarantee.</source>
          <target state="translated">返される値は &lt;code&gt;self.seek(SeekFrom::Current(0))&lt;/code&gt; と同等ですが、内部バッファーをフラッシュしません。この最適化により、関数は、直後に &lt;code&gt;.into_inner()&lt;/code&gt; を呼び出すと、基になるリーダーが同じ位置にあることを保証しません。その保証が必要な場合は、代わりに&lt;a href=&quot;struct.bufreader#method.seek&quot;&gt; &lt;code&gt;BufReader::seek&lt;/code&gt; &lt;/a&gt;使用してください。</target>
        </trans-unit>
        <trans-unit id="39c061cf746d3ba8e95a5a5598de09efb58fb7b8" translate="yes" xml:space="preserve">
          <source>The variable &lt;code&gt;s&lt;/code&gt; has type &lt;code&gt;String&lt;/code&gt;, and its use in the guard is as a variable of type &lt;code&gt;String&lt;/code&gt;. The guard code effectively executes in a separate scope to the body of the arm, so the value would be moved into this anonymous scope and therefore becomes unavailable in the body of the arm.</source>
          <target state="translated">変数 &lt;code&gt;s&lt;/code&gt; の型は &lt;code&gt;String&lt;/code&gt; で、ガードでの使用は &lt;code&gt;String&lt;/code&gt; 型の変数としてです。ガードコードは腕の本体とは別のスコープで効果的に実行されるため、値はこの匿名スコープに移動され、腕の本体では使用できなくなります。</target>
        </trans-unit>
        <trans-unit id="8e557a8691f00e33607a16e96773df5a29940a13" translate="yes" xml:space="preserve">
          <source>The variable &lt;code&gt;s&lt;/code&gt; refers to a string literal, where the value of the string is hardcoded into the text of our program. The variable is valid from the point at which it&amp;rsquo;s declared until the end of the current &lt;em&gt;scope&lt;/em&gt;. Listing 4-1 has comments annotating where the variable &lt;code&gt;s&lt;/code&gt; is valid.</source>
          <target state="translated">変数 &lt;code&gt;s&lt;/code&gt; は文字列リテラルを参照します。文字列の値はプログラムのテキストにハードコードされています。変数は、宣言された時点から現在の&lt;em&gt;スコープの&lt;/em&gt;最後まで&lt;em&gt;有効&lt;/em&gt;です。リスト4-1には、変数 &lt;code&gt;s&lt;/code&gt; が有効な場所を示すコメントがあります。</target>
        </trans-unit>
        <trans-unit id="5e699bc2ac5d00c87b2c7f3b8e3a9da4a553a5d0" translate="yes" xml:space="preserve">
          <source>The variable &lt;code&gt;tup&lt;/code&gt; binds to the entire tuple, because a tuple is considered a single compound element. To get the individual values out of a tuple, we can use pattern matching to destructure a tuple value, like this:</source>
          <target state="translated">タプルは単一の複合要素と見なされるため、変数 &lt;code&gt;tup&lt;/code&gt; はタプル全体にバインドされます。タプルから個々の値を取得するには、次のようにパターンマッチングを使用してタプル値を分解します。</target>
        </trans-unit>
        <trans-unit id="b81aa2b0402a0e499f7595712bef15edfd23e380" translate="yes" xml:space="preserve">
          <source>The variable &lt;code&gt;x&lt;/code&gt; doesn&amp;rsquo;t &amp;ldquo;live long enough.&amp;rdquo; The reason is that &lt;code&gt;x&lt;/code&gt; will be out of scope when the inner scope ends on line 7. But &lt;code&gt;r&lt;/code&gt; is still valid for the outer scope; because its scope is larger, we say that it &amp;ldquo;lives longer.&amp;rdquo; If Rust allowed this code to work, &lt;code&gt;r&lt;/code&gt; would be referencing memory that was deallocated when &lt;code&gt;x&lt;/code&gt; went out of scope, and anything we tried to do with &lt;code&gt;r&lt;/code&gt; wouldn&amp;rsquo;t work correctly. So how does Rust determine that this code is invalid? It uses a borrow checker.</source>
          <target state="translated">変数 &lt;code&gt;x&lt;/code&gt; は「十分に長く存続」しません。その理由は、内側のスコープが7行目で終了すると &lt;code&gt;x&lt;/code&gt; はスコープ外になるためです。しかし、 &lt;code&gt;r&lt;/code&gt; は依然として外側のスコープに対して有効です。スコープが大きいため、「寿命が長い」と言います。錆が仕事にこのコードを許可された場合、 &lt;code&gt;r&lt;/code&gt; は時に割り当て解除されたメモリ参照されるだろう &lt;code&gt;x&lt;/code&gt; 範囲を出て行ったが、私たちはして実行しようとしました何も &lt;code&gt;r&lt;/code&gt; が正常に動作しません。では、Rustはこのコードが無効であるとどのように判断するのでしょうか。借用チェッカーを使用します。</target>
        </trans-unit>
        <trans-unit id="b4588e360f79d1cb0e5f79f31bf6e7bc2ece8336" translate="yes" xml:space="preserve">
          <source>The variable &lt;code&gt;x&lt;/code&gt; holds an &lt;code&gt;i32&lt;/code&gt; value, &lt;code&gt;5&lt;/code&gt;. We set &lt;code&gt;y&lt;/code&gt; equal to a reference to &lt;code&gt;x&lt;/code&gt;. We can assert that &lt;code&gt;x&lt;/code&gt; is equal to &lt;code&gt;5&lt;/code&gt;. However, if we want to make an assertion about the value in &lt;code&gt;y&lt;/code&gt;, we have to use &lt;code&gt;*y&lt;/code&gt; to follow the reference to the value it&amp;rsquo;s pointing to (hence &lt;em&gt;dereference&lt;/em&gt;). Once we dereference &lt;code&gt;y&lt;/code&gt;, we have access to the integer value &lt;code&gt;y&lt;/code&gt; is pointing to that we can compare with &lt;code&gt;5&lt;/code&gt;.</source>
          <target state="translated">変数 &lt;code&gt;x&lt;/code&gt; は &lt;code&gt;i32&lt;/code&gt; 値 &lt;code&gt;5&lt;/code&gt; を保持します。 &lt;code&gt;y&lt;/code&gt; を &lt;code&gt;x&lt;/code&gt; への参照に等しく設定します。 &lt;code&gt;x&lt;/code&gt; が &lt;code&gt;5&lt;/code&gt; に等しいと断言できます。ただし、 &lt;code&gt;y&lt;/code&gt; の値についてアサーションを作成する場合は、 &lt;code&gt;*y&lt;/code&gt; を使用して、参照先の値への参照を追跡する必要があります（したがって、&lt;em&gt;dereference&lt;/em&gt;）。 &lt;code&gt;y&lt;/code&gt; を間接参照すると、 &lt;code&gt;5&lt;/code&gt; と比較できる &lt;code&gt;y&lt;/code&gt; が指す整数値にアクセスできます。</target>
        </trans-unit>
        <trans-unit id="b7511a7213b8989f428e5bec2c5234f95d46bda2" translate="yes" xml:space="preserve">
          <source>The variables that a &lt;a href=&quot;types/closure&quot;&gt;closure&lt;/a&gt; captures by move are dropped in an unspecified order.</source>
          <target state="translated">&lt;a href=&quot;types/closure&quot;&gt;クロージャ&lt;/a&gt;が移動によってキャプチャする変数は、不特定の順序で削除されます。</target>
        </trans-unit>
        <trans-unit id="f517012aa2f18b099c9314a6c9154f5976be9a45" translate="yes" xml:space="preserve">
          <source>The variance of other &lt;code&gt;struct&lt;/code&gt;, &lt;code&gt;enum&lt;/code&gt;, &lt;code&gt;union&lt;/code&gt; and tuple types is decided by looking at the variance of the types of their fields. If the parameter is used in positions with different variances then the parameter is invariant. For example the following struct is covariant in &lt;code&gt;'a&lt;/code&gt; and &lt;code&gt;T&lt;/code&gt; and invariant in &lt;code&gt;'b&lt;/code&gt; and &lt;code&gt;U&lt;/code&gt;.</source>
          <target state="translated">他の &lt;code&gt;struct&lt;/code&gt; 、 &lt;code&gt;enum&lt;/code&gt; 、 &lt;code&gt;union&lt;/code&gt; 、およびtupleタイプの分散は、それらのフィールドのタイプの分散を見ることによって決定されます。パラメータが異なる分散の位置で使用される場合、パラメータは不変です。たとえば、次の構造体は &lt;code&gt;'a&lt;/code&gt; と &lt;code&gt;T&lt;/code&gt; では共変で、 &lt;code&gt;'b&lt;/code&gt; と &lt;code&gt;U&lt;/code&gt; では不変です。</target>
        </trans-unit>
        <trans-unit id="edea3e36560d105a970958779d2fd8e9db94e633" translate="yes" xml:space="preserve">
          <source>The variance of other &lt;code&gt;struct&lt;/code&gt;, &lt;code&gt;enum&lt;/code&gt;, &lt;code&gt;union&lt;/code&gt;, and tuple types is decided by looking at the variance of the types of their fields. If the parameter is used in positions with different variances then the parameter is invariant. For example the following struct is covariant in &lt;code&gt;'a&lt;/code&gt; and &lt;code&gt;T&lt;/code&gt; and invariant in &lt;code&gt;'b&lt;/code&gt; and &lt;code&gt;U&lt;/code&gt;.</source>
          <target state="translated">他の &lt;code&gt;struct&lt;/code&gt; 、 &lt;code&gt;enum&lt;/code&gt; 、 &lt;code&gt;union&lt;/code&gt; 、およびタプルのタイプの分散は、それらのフィールドのタイプの分散を調べることによって決定されます。パラメータが異なる分散の位置で使用される場合、パラメータは不変です。たとえば、次の構造体は &lt;code&gt;'a&lt;/code&gt; と &lt;code&gt;T&lt;/code&gt; で共変であり、 &lt;code&gt;'b&lt;/code&gt; と &lt;code&gt;U&lt;/code&gt; で不変です。</target>
        </trans-unit>
        <trans-unit id="c0eb1ade80b4414ebb3db98e5e4492d2cfa8b829" translate="yes" xml:space="preserve">
          <source>The vector used to create a &lt;a href=&quot;struct.cstring&quot;&gt;&lt;code&gt;CString&lt;/code&gt;&lt;/a&gt; must have one and only one nul byte, positioned at the end.</source>
          <target state="translated">&lt;a href=&quot;struct.cstring&quot;&gt; &lt;code&gt;CString&lt;/code&gt; の&lt;/a&gt;作成に使用されるベクトルには、最後に配置された1つのnulバイトのみが必要です。</target>
        </trans-unit>
        <trans-unit id="a2a9da86bd97667912e395039b2e850ba36a8d1a" translate="yes" xml:space="preserve">
          <source>The vector will be able to hold exactly &lt;code&gt;capacity&lt;/code&gt; elements without reallocating. If &lt;code&gt;capacity&lt;/code&gt; is 0, the vector will not allocate.</source>
          <target state="translated">ベクトルは、再割り当てすることなく、 &lt;code&gt;capacity&lt;/code&gt; 要素を正確に保持できます。場合は &lt;code&gt;capacity&lt;/code&gt; 0である、ベクトルは割り当てません。</target>
        </trans-unit>
        <trans-unit id="4a1a063010e523349572dfe2f3d4599fdbf7faf0" translate="yes" xml:space="preserve">
          <source>The vector will not allocate until elements are pushed onto it.</source>
          <target state="translated">ベクトルは、要素がその上にプッシュされるまで確保されません。</target>
        </trans-unit>
        <trans-unit id="4d0b594b3c2a18ead8ab96882d29be04515f3b55" translate="yes" xml:space="preserve">
          <source>The version numbering scheme is explained in &lt;a href=&quot;https://www.unicode.org/versions/Unicode11.0.0/ch03.pdf#page=4&quot;&gt;Unicode 11.0 or later, Section 3.1 Versions of the Unicode Standard&lt;/a&gt;.</source>
          <target state="translated">バージョン番号付けスキームは、&lt;a href=&quot;https://www.unicode.org/versions/Unicode11.0.0/ch03.pdf#page=4&quot;&gt;Unicode11.0以降のセクション3.1Unicode標準のバージョンで&lt;/a&gt;説明されています。</target>
        </trans-unit>
        <trans-unit id="0be7c75604b320ccdf03b29c2cf5dc9816b16f93" translate="yes" xml:space="preserve">
          <source>The version of &lt;a href=&quot;http://www.unicode.org/&quot;&gt;Unicode&lt;/a&gt; that the Unicode parts of &lt;code&gt;char&lt;/code&gt; and &lt;code&gt;str&lt;/code&gt; methods are based on.</source>
          <target state="translated">バージョン&lt;a href=&quot;http://www.unicode.org/&quot;&gt;ユニコード&lt;/a&gt;のユニコード部品こと &lt;code&gt;char&lt;/code&gt; と &lt;code&gt;str&lt;/code&gt; 方法は基づいています。</target>
        </trans-unit>
        <trans-unit id="f1a9780d68fd5f1336a540e5d09603fdf5d5a727" translate="yes" xml:space="preserve">
          <source>The version of &lt;a href=&quot;https://www.unicode.org/&quot;&gt;Unicode&lt;/a&gt; that the Unicode parts of &lt;code&gt;char&lt;/code&gt; and &lt;code&gt;str&lt;/code&gt; methods are based on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e7d7937a98ae8b5db75096586d34257981a3b35" translate="yes" xml:space="preserve">
          <source>The version of the call operator that takes a by-value receiver.</source>
          <target state="translated">バイ値の受信機を取る呼び出しオペレータのバージョン。</target>
        </trans-unit>
        <trans-unit id="98bb0c84eb64933810db44150740704106b58e5b" translate="yes" xml:space="preserve">
          <source>The version of the call operator that takes a mutable receiver.</source>
          <target state="translated">変形可能な受信機を受け取る呼び出し演算子のバージョン。</target>
        </trans-unit>
        <trans-unit id="a10ea779af62c4002732377426c5466fd9b100f8" translate="yes" xml:space="preserve">
          <source>The version of the call operator that takes an immutable receiver.</source>
          <target state="translated">不変の受信機を取るコールオペレータのバージョン。</target>
        </trans-unit>
        <trans-unit id="69df36660018fe57f4bfd6fa17c4ad5d9397540f" translate="yes" xml:space="preserve">
          <source>The volatile intrinsics provide operations intended to act on I/O memory, which are guaranteed to not be reordered by the compiler across other volatile intrinsics. See the LLVM documentation on [&lt;a href=&quot;http://llvm.org/docs/LangRef.html#volatile-memory-accesses&quot;&gt;volatile&lt;/a&gt;].</source>
          <target state="translated">揮発性組み込み関数は、I / Oメモリで動作することを目的とした操作を提供します。これは、他の揮発性組み込み関数間でコンパイラによって並べ替えられないことが保証されています。[ &lt;a href=&quot;http://llvm.org/docs/LangRef.html#volatile-memory-accesses&quot;&gt;volatile&lt;/a&gt; ]のLLVMドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="dae64c2954322dc51425cf56ba3a3099f9cd4814" translate="yes" xml:space="preserve">
          <source>The volatile intrinsics provide operations intended to act on I/O memory, which are guaranteed to not be reordered by the compiler across other volatile intrinsics. See the LLVM documentation on [&lt;a href=&quot;https://llvm.org/docs/LangRef.html#volatile-memory-accesses&quot;&gt;volatile&lt;/a&gt;].</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3879e8ab569a056c97968189092bda667116aee8" translate="yes" xml:space="preserve">
          <source>The volatile parameter is set to &lt;code&gt;true&lt;/code&gt;, so it will not be optimized out unless size is equal to zero.</source>
          <target state="translated">volatileパラメーターは &lt;code&gt;true&lt;/code&gt; に設定されているため、サイズがゼロに等しくない限り、最適化されません。</target>
        </trans-unit>
        <trans-unit id="545e192087f2dee8a1244b50285f56354faded13" translate="yes" xml:space="preserve">
          <source>The warning suggests that we use &lt;code&gt;_i&lt;/code&gt; as a name instead: the underscore indicates that we intend for this variable to be unused. We can automatically apply that suggestion using the &lt;code&gt;rustfix&lt;/code&gt; tool by running the command &lt;code&gt;cargo fix&lt;/code&gt;:</source>
          <target state="translated">警告は、代わりに &lt;code&gt;_i&lt;/code&gt; を名前として使用することを示唆しています。アンダースコアは、この変数を使用しないことを意図していることを示しています。 &lt;code&gt;rustfix&lt;/code&gt; ツールを使用して、 &lt;code&gt;cargo fix&lt;/code&gt; コマンドを実行することにより、その提案を自動的に適用できます。</target>
        </trans-unit>
        <trans-unit id="71e5980a6bfd716abaaef858ffaa58512cff6b9e" translate="yes" xml:space="preserve">
          <source>The warning we get is this:</source>
          <target state="translated">私たちが受ける警告はこれです。</target>
        </trans-unit>
        <trans-unit id="01d3cf24ed7ac31e045df84ed43b543301d5071c" translate="yes" xml:space="preserve">
          <source>The way in which you need to specify lifetime parameters depends on what your function is doing. For example, if we changed the implementation of the &lt;code&gt;longest&lt;/code&gt; function to always return the first parameter rather than the longest string slice, we wouldn&amp;rsquo;t need to specify a lifetime on the &lt;code&gt;y&lt;/code&gt; parameter. The following code will compile:</source>
          <target state="translated">ライフタイムパラメータを指定する必要がある方法は、関数の動作によって異なります。たとえば、最長の文字列スライスではなく常に最初のパラメーターを返すように &lt;code&gt;longest&lt;/code&gt; 関数の実装を変更した場合、 &lt;code&gt;y&lt;/code&gt; パラメーターに有効期間を指定する必要はありません。次のコードはコンパイルされます。</target>
        </trans-unit>
        <trans-unit id="5b549318fc3f4ca028012969aeab8043ad858528" translate="yes" xml:space="preserve">
          <source>The way privacy works in Rust is that all items (functions, methods, structs, enums, modules, and constants) are private by default. Items in a parent module can&amp;rsquo;t use the private items inside child modules, but items in child modules can use the items in their ancestor modules. The reason is that child modules wrap and hide their implementation details, but the child modules can see the context in which they&amp;rsquo;re defined. To continue with the restaurant metaphor, think of the privacy rules as being like the back office of a restaurant: what goes on in there is private to restaurant customers, but office managers can see and do everything in the restaurant in which they operate.</source>
          <target state="translated">Rustでプライバシーが機能する方法は、すべてのアイテム（関数、メソッド、構造体、列挙型、モジュール、および定数）がデフォルトでプライベートであることです。親モジュールのアイテムは子モジュール内のプライベートアイテムを使用できませんが、子モジュールのアイテムは祖先モジュールのアイテムを使用できます。その理由は、子モジュールはその実装の詳細をラップして非表示にしますが、子モジュールはそれらが定義されているコンテキストを見ることができるからです。レストランのメタファーを続けるには、プライバシールールをレストランのバックオフィスのようなものと考えてください。そこで行われていることはレストランの顧客に限定されますが、オフィスマネージャーは彼らが運営するレストラン内のすべてを表示および実行できます。</target>
        </trans-unit>
        <trans-unit id="c954766baf952dffb19514bc82ccc04508ad4747" translate="yes" xml:space="preserve">
          <source>The way to define helper attributes is to put an &lt;code&gt;attributes&lt;/code&gt; key in the &lt;code&gt;proc_macro_derive&lt;/code&gt; macro with a comma separated list of identifiers that are the names of the helper attributes.</source>
          <target state="translated">ヘルパー属性を定義する方法は、 &lt;code&gt;attributes&lt;/code&gt; キーを &lt;code&gt;proc_macro_derive&lt;/code&gt; マクロに、ヘルパー属性の名前である識別子のコンマ区切りのリストとともに配置することです。</target>
        </trans-unit>
        <trans-unit id="b4ad5969b00a7de4e50dcfbec4f420300a121d22" translate="yes" xml:space="preserve">
          <source>The way to demonstrate this behavior is by running the program with &lt;code&gt;&amp;gt;&lt;/code&gt; and the filename, &lt;em&gt;output.txt&lt;/em&gt;, that we want to redirect the standard output stream to. We won&amp;rsquo;t pass any arguments, which should cause an error:</source>
          <target state="translated">この動作を示す方法は、標準出力ストリームをリダイレクトする先の &lt;code&gt;&amp;gt;&lt;/code&gt; とファイル名&lt;em&gt;output.txtを指定&lt;/em&gt;してプログラムを実行することです。エラーの原因となる引数は渡されません。</target>
        </trans-unit>
        <trans-unit id="4860fccc5b2b1b15ffbccd4a99af016a4e435d30" translate="yes" xml:space="preserve">
          <source>The wildcard pattern is always irrefutable.</source>
          <target state="translated">ワイルドカードパターンは常に反論の余地がありません。</target>
        </trans-unit>
        <trans-unit id="6ed876d97357afb4218b62acc26e1fb7fcb7f367" translate="yes" xml:space="preserve">
          <source>The workspace has one &lt;em&gt;target&lt;/em&gt; directory at the top level for the compiled artifacts to be placed into; the &lt;code&gt;adder&lt;/code&gt; crate doesn&amp;rsquo;t have its own &lt;em&gt;target&lt;/em&gt; directory. Even if we were to run &lt;code&gt;cargo build&lt;/code&gt; from inside the &lt;em&gt;adder&lt;/em&gt; directory, the compiled artifacts would still end up in &lt;em&gt;add/target&lt;/em&gt; rather than &lt;em&gt;add/adder/target&lt;/em&gt;. Cargo structures the &lt;em&gt;target&lt;/em&gt; directory in a workspace like this because the crates in a workspace are meant to depend on each other. If each crate had its own &lt;em&gt;target&lt;/em&gt; directory, each crate would have to recompile each of the other crates in the workspace to have the artifacts in its own &lt;em&gt;target&lt;/em&gt; directory. By sharing one &lt;em&gt;target&lt;/em&gt; directory, the crates can avoid unnecessary rebuilding.</source>
          <target state="translated">ワークスペースには、コンパイルされたアーティファクトを配置するための最上位レベルに1つの&lt;em&gt;ターゲット&lt;/em&gt;ディレクトリがあります。 &lt;code&gt;adder&lt;/code&gt; クレートは、自身の持っていません&lt;em&gt;ターゲット&lt;/em&gt;ディレクトリを。私たちが実行したとしても &lt;code&gt;cargo build&lt;/code&gt; 内側から&lt;em&gt;加算器&lt;/em&gt;ディレクトリ、コンパイル済みのアーティファクトはまだで終わるでしょう&lt;em&gt;アド/ターゲット&lt;/em&gt;ではなく、&lt;em&gt;追加/加算/ターゲット&lt;/em&gt;。ワークスペース内のクレートは相互に依存することを目的としているため、Cargo はワークスペース内の&lt;em&gt;ターゲット&lt;/em&gt;ディレクトリをこのように構築します。各クレートに独自の&lt;em&gt;ターゲット&lt;/em&gt;ディレクトリがある場合、各クレートは、ワークスペース内の他の各クレートを再コンパイルして、独自の成果物を持つ必要があります。&lt;em&gt;ターゲット&lt;/em&gt;ディレクトリ。1つの&lt;em&gt;ターゲット&lt;/em&gt;ディレクトリを共有することにより、クレートは不要な再構築を回避できます。</target>
        </trans-unit>
        <trans-unit id="94338f88d478ec6b62411179604be0f6a0e553b2" translate="yes" xml:space="preserve">
          <source>The workspace has one &lt;em&gt;target&lt;/em&gt; directory at the top level for the compiled artifacts to be placed into; the &lt;code&gt;adder&lt;/code&gt; package doesn&amp;rsquo;t have its own &lt;em&gt;target&lt;/em&gt; directory. Even if we were to run &lt;code&gt;cargo build&lt;/code&gt; from inside the &lt;em&gt;adder&lt;/em&gt; directory, the compiled artifacts would still end up in &lt;em&gt;add/target&lt;/em&gt; rather than &lt;em&gt;add/adder/target&lt;/em&gt;. Cargo structures the &lt;em&gt;target&lt;/em&gt; directory in a workspace like this because the crates in a workspace are meant to depend on each other. If each crate had its own &lt;em&gt;target&lt;/em&gt; directory, each crate would have to recompile each of the other crates in the workspace to have the artifacts in its own &lt;em&gt;target&lt;/em&gt; directory. By sharing one &lt;em&gt;target&lt;/em&gt; directory, the crates can avoid unnecessary rebuilding.</source>
          <target state="translated">ワークスペースには、コンパイルされたアーティファクトを配置するための最上位に1つの&lt;em&gt;ターゲット&lt;/em&gt;ディレクトリがあります。 &lt;code&gt;adder&lt;/code&gt; パッケージは、独自の持っていません&lt;em&gt;ターゲット&lt;/em&gt;ディレクトリを。私たちが実行したとしても &lt;code&gt;cargo build&lt;/code&gt; 内側から&lt;em&gt;加算器&lt;/em&gt;ディレクトリ、コンパイル済みのアーティファクトはまだで終わるでしょう&lt;em&gt;アド/ターゲット&lt;/em&gt;ではなく、&lt;em&gt;追加/加算/ターゲット&lt;/em&gt;。ワークスペース内のクレートは相互に依存することを意図しているため、貨物はこのようにワークスペース内の&lt;em&gt;ターゲット&lt;/em&gt;ディレクトリを構築します。各クレートに独自の&lt;em&gt;ターゲット&lt;/em&gt;ディレクトリがある場合、各クレートは、アーティファクトを独自に持つために、ワークスペース内の他の各クレートを再コンパイルする必要があります。&lt;em&gt;ターゲット&lt;/em&gt;ディレクトリ。1つの&lt;em&gt;ターゲット&lt;/em&gt;ディレクトリを共有することで、クレートは不要な再構築を回避できます。</target>
        </trans-unit>
        <trans-unit id="77f8b60c8bbd1e207542248a0d2f457b8e7e406f" translate="yes" xml:space="preserve">
          <source>The worst case cost of &lt;code&gt;pop&lt;/code&gt; on a heap containing &lt;em&gt;n&lt;/em&gt; elements is &lt;em&gt;O&lt;/em&gt;(log(&lt;em&gt;n&lt;/em&gt;)).</source>
          <target state="translated">&lt;em&gt;n個の&lt;/em&gt;要素を含むヒープでの &lt;code&gt;pop&lt;/code&gt; の最悪の場合のコストは&lt;em&gt;O&lt;/em&gt;（log（&lt;em&gt;n&lt;/em&gt;））です。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="99d51b0abe084f304807f0bb44acfa16e7f4af5a" translate="yes" xml:space="preserve">
          <source>The worst case cost of &lt;code&gt;pop&lt;/code&gt; on a heap containing &lt;em&gt;n&lt;/em&gt; elements is O(log n).</source>
          <target state="translated">&lt;em&gt;n個の&lt;/em&gt;要素を含むヒープでの &lt;code&gt;pop&lt;/code&gt; の最悪の場合のコストはO（log n）です。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="fc0b397ce3728851f33d0ec0d540c025798521e0" translate="yes" xml:space="preserve">
          <source>The worst case cost of a &lt;em&gt;single&lt;/em&gt; call to &lt;code&gt;push&lt;/code&gt; is &lt;em&gt;O&lt;/em&gt;(&lt;em&gt;n&lt;/em&gt;). The worst case occurs when capacity is exhausted and needs a resize. The resize cost has been amortized in the previous figures.</source>
          <target state="translated">&lt;code&gt;push&lt;/code&gt; する&lt;em&gt;1回の&lt;/em&gt;呼び出しの最悪の場合のコストは&lt;em&gt;O&lt;/em&gt;（&lt;em&gt;n&lt;/em&gt;）です。最悪のケースは、容量が使い果たされてサイズ変更が必要な場合に発生します。サイズ変更費用は前の図で償却されています。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="238b65c05553bd00df49cce92fea6a1b783b67b3" translate="yes" xml:space="preserve">
          <source>The worst case cost of a &lt;em&gt;single&lt;/em&gt; call to &lt;code&gt;push&lt;/code&gt; is O(n). The worst case occurs when capacity is exhausted and needs a resize. The resize cost has been amortized in the previous figures.</source>
          <target state="translated">&lt;code&gt;push&lt;/code&gt; する&lt;em&gt;単一の&lt;/em&gt;呼び出しの最悪の場合のコストはO（n）です。最悪のケースは、容量が使い果たされ、サイズ変更が必要な場合に発生します。前の図では、サイズ変更コストは償却されています。</target>
        </trans-unit>
        <trans-unit id="9abd2f24e6d1b46930e8a99311ffd002b596e31a" translate="yes" xml:space="preserve">
          <source>The writing portion of the &lt;a href=&quot;struct.tcpstream&quot;&gt;&lt;code&gt;TcpStream&lt;/code&gt;&lt;/a&gt; should be shut down.</source>
          <target state="translated">&lt;a href=&quot;struct.tcpstream&quot;&gt; &lt;code&gt;TcpStream&lt;/code&gt; &lt;/a&gt;の書き込み部分はシャットダウンする必要があります。</target>
        </trans-unit>
        <trans-unit id="4a689baec3acd327f6907f5ce5547d1d13e010a8" translate="yes" xml:space="preserve">
          <source>Their definition should always match the ABI defined in &lt;code&gt;rustc::back::abi&lt;/code&gt;.</source>
          <target state="translated">それらの定義は、 &lt;code&gt;rustc::back::abi&lt;/code&gt; 定義されたABIと常に一致する必要があります。</target>
        </trans-unit>
        <trans-unit id="1e1df95ca1bc76e0d356b0c10d06f6035304f599" translate="yes" xml:space="preserve">
          <source>Their definition should always match the ABI defined in &lt;code&gt;rustc_middle::ty::layout&lt;/code&gt;.</source>
          <target state="translated">それらの定義は、 &lt;code&gt;rustc_middle::ty::layout&lt;/code&gt; 定義されているABIと常に一致する必要があります。</target>
        </trans-unit>
        <trans-unit id="534bcf9b4ee06ae0b390b746db849c9e3d0f83df" translate="yes" xml:space="preserve">
          <source>Then create a new directory, &lt;em&gt;src/bin&lt;/em&gt;, and move the binary crate rooted in &lt;em&gt;src/main.rs&lt;/em&gt; into &lt;em&gt;src/bin/main.rs&lt;/em&gt;. Doing so will make the library crate the primary crate in the &lt;em&gt;hello&lt;/em&gt; directory; we can still run the binary in &lt;em&gt;src/bin/main.rs&lt;/em&gt; using &lt;code&gt;cargo run&lt;/code&gt;. After moving the &lt;em&gt;main.rs&lt;/em&gt; file, edit it to bring the library crate in and bring &lt;code&gt;ThreadPool&lt;/code&gt; into scope by adding the following code to the top of &lt;em&gt;src/bin/main.rs&lt;/em&gt;:</source>
          <target state="translated">次に、新しいディレクトリ&lt;em&gt;src / binを&lt;/em&gt;作成し、&lt;em&gt;src / main.rs&lt;/em&gt;をルートとするバイナリクレートを&lt;em&gt;src / bin / main.rsに移動し&lt;/em&gt;ます。そうすることで、ライブラリが&lt;em&gt;hello&lt;/em&gt;ディレクトリのプライマリクレートになります。それでも、 &lt;code&gt;cargo run&lt;/code&gt; を使用して&lt;em&gt;src / bin / main.rsで&lt;/em&gt;バイナリを実行できます。&lt;em&gt;main.rs&lt;/em&gt;ファイルを移動した後、次のコードを&lt;em&gt;src / bin / main.rsの&lt;/em&gt;先頭に追加して、ファイルを編集してライブラリクレートを入れ、 &lt;code&gt;ThreadPool&lt;/code&gt; をスコープに入れます。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="848cf8d4f1542ccd5c9500b227f162479dfe2c8c" translate="yes" xml:space="preserve">
          <source>Then generate a new library crate named &lt;code&gt;add-one&lt;/code&gt;:</source>
          <target state="translated">次に、 &lt;code&gt;add-one&lt;/code&gt; という名前の新しいライブラリクレートを生成します。</target>
        </trans-unit>
        <trans-unit id="02ec96ae1b226ff410efb69c0d4d60e58a7042ce" translate="yes" xml:space="preserve">
          <source>Then implementing the &lt;code&gt;OutlinePrint&lt;/code&gt; trait on &lt;code&gt;Point&lt;/code&gt; will compile successfully, and we can call &lt;code&gt;outline_print&lt;/code&gt; on a &lt;code&gt;Point&lt;/code&gt; instance to display it within an outline of asterisks.</source>
          <target state="translated">次に、 &lt;code&gt;Point&lt;/code&gt; に &lt;code&gt;OutlinePrint&lt;/code&gt; トレイトを実装すると正常にコンパイルされ、 &lt;code&gt;Point&lt;/code&gt; インスタンスで &lt;code&gt;outline_print&lt;/code&gt; を呼び出して、アスタリスクのアウトライン内に表示することができます。</target>
        </trans-unit>
        <trans-unit id="3aac37973a618f0b45f35c262a8297327ce65a0e" translate="yes" xml:space="preserve">
          <source>Then install the language server support in your particular IDE; you&amp;rsquo;ll gain abilities such as autocompletion, jump to definition, and inline errors.</source>
          <target state="translated">次に、特定のIDEに言語サーバーサポートをインストールします。オートコンプリート、定義へのジャンプ、インラインエラーなどの機能を利用できます。</target>
        </trans-unit>
        <trans-unit id="636019afbd1be275dc1f855f27602c31a7743704" translate="yes" xml:space="preserve">
          <source>Then run &lt;code&gt;cargo test&lt;/code&gt; again. The output now shows &lt;code&gt;exploration&lt;/code&gt; instead of &lt;code&gt;it_works&lt;/code&gt;:</source>
          <target state="translated">その後、 &lt;code&gt;cargo test&lt;/code&gt; 再度実行します。出力には &lt;code&gt;it_works&lt;/code&gt; ではなく &lt;code&gt;exploration&lt;/code&gt; が表示されます。</target>
        </trans-unit>
        <trans-unit id="7eae4a5123d629fb5914cfbce2d33e244889b442" translate="yes" xml:space="preserve">
          <source>Then the compiler applies the first rule, which specifies that each parameter gets its own lifetime. We&amp;rsquo;ll call it &lt;code&gt;'a&lt;/code&gt; as usual, so now the signature is this:</source>
          <target state="translated">次に、コンパイラーは最初の規則を適用します。これは、各パラメーターが独自の存続期間を取得することを指定します。我々はそれを呼ぶだろう &lt;code&gt;'a&lt;/code&gt; いつものように、今署名はこれです：</target>
        </trans-unit>
        <trans-unit id="fe1bb69db1725d721fdb3af05034044cb61cb940" translate="yes" xml:space="preserve">
          <source>Then we add five new lines at the bottom that use the &lt;code&gt;Ordering&lt;/code&gt; type. The &lt;code&gt;cmp&lt;/code&gt; method compares two values and can be called on anything that can be compared. It takes a reference to whatever you want to compare with: here it&amp;rsquo;s comparing the &lt;code&gt;guess&lt;/code&gt; to the &lt;code&gt;secret_number&lt;/code&gt;. Then it returns a variant of the &lt;code&gt;Ordering&lt;/code&gt; enum we brought into scope with the &lt;code&gt;use&lt;/code&gt; statement. We use a &lt;a href=&quot;ch06-02-match&quot;&gt;&lt;code&gt;match&lt;/code&gt;&lt;/a&gt; expression to decide what to do next based on which variant of &lt;code&gt;Ordering&lt;/code&gt; was returned from the call to &lt;code&gt;cmp&lt;/code&gt; with the values in &lt;code&gt;guess&lt;/code&gt; and &lt;code&gt;secret_number&lt;/code&gt;.</source>
          <target state="translated">次に、下部に &lt;code&gt;Ordering&lt;/code&gt; タイプを使用する5つの新しい行を追加します。 &lt;code&gt;cmp&lt;/code&gt; 方法は、2つの値を比較し、比較することができるもので呼び出すことができます。それはあなたが比較したいものへの参照を取ります：ここでは &lt;code&gt;guess&lt;/code&gt; を &lt;code&gt;secret_number&lt;/code&gt; と比較しています。次に、 &lt;code&gt;use&lt;/code&gt; ステートメントでスコープに組み込んだ &lt;code&gt;Ordering&lt;/code&gt; enumのバリアントを返します。&lt;a href=&quot;ch06-02-match&quot;&gt; &lt;code&gt;match&lt;/code&gt; &lt;/a&gt;式を使用して、 &lt;code&gt;guess&lt;/code&gt; と &lt;code&gt;secret_number&lt;/code&gt; の値を持つ &lt;code&gt;cmp&lt;/code&gt; の呼び出しから返された &lt;code&gt;Ordering&lt;/code&gt; のバリアントに基づいて、次に何をするかを決定します。</target>
        </trans-unit>
        <trans-unit id="42504942265ee7c7c73ee70d30a7653d906cc136" translate="yes" xml:space="preserve">
          <source>Then we create a &lt;em&gt;src/front_of_house&lt;/em&gt; directory and a file &lt;em&gt;src/front_of_house/hosting.rs&lt;/em&gt; to contain the definitions made in the &lt;code&gt;hosting&lt;/code&gt; module:</source>
          <target state="translated">次に、&lt;em&gt;src / front_of_house&lt;/em&gt;ディレクトリと&lt;em&gt;src / front_of_house / hosting.rs&lt;/em&gt;ファイルを作成して、 &lt;code&gt;hosting&lt;/code&gt; モジュールで作成した定義を&lt;em&gt;含め&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="8c054131a62b68de933e0bf587b858ee6793392b" translate="yes" xml:space="preserve">
          <source>Then we create a new &lt;code&gt;String&lt;/code&gt; in variable &lt;code&gt;s&lt;/code&gt; and call the &lt;code&gt;read_to_string&lt;/code&gt; method on the file handle in &lt;code&gt;f&lt;/code&gt; to read the contents of the file into &lt;code&gt;s&lt;/code&gt;. The &lt;code&gt;read_to_string&lt;/code&gt; method also returns a &lt;code&gt;Result&lt;/code&gt; because it might fail, even though &lt;code&gt;File::open&lt;/code&gt; succeeded. So we need another &lt;code&gt;match&lt;/code&gt; to handle that &lt;code&gt;Result&lt;/code&gt;: if &lt;code&gt;read_to_string&lt;/code&gt; succeeds, then our function has succeeded, and we return the username from the file that&amp;rsquo;s now in &lt;code&gt;s&lt;/code&gt; wrapped in an &lt;code&gt;Ok&lt;/code&gt;. If &lt;code&gt;read_to_string&lt;/code&gt; fails, we return the error value in the same way that we returned the error value in the &lt;code&gt;match&lt;/code&gt; that handled the return value of &lt;code&gt;File::open&lt;/code&gt;. However, we don&amp;rsquo;t need to explicitly say &lt;code&gt;return&lt;/code&gt;, because this is the last expression in the function.</source>
          <target state="translated">次に、変数 &lt;code&gt;s&lt;/code&gt; に新しい &lt;code&gt;String&lt;/code&gt; を作成し、 &lt;code&gt;f&lt;/code&gt; のファイルハンドルで &lt;code&gt;read_to_string&lt;/code&gt; メソッドを呼び出して、ファイルの内容を &lt;code&gt;s&lt;/code&gt; に読み取ります。 &lt;code&gt;read_to_string&lt;/code&gt; 方法も返す &lt;code&gt;Result&lt;/code&gt; 、それが失敗する可能性があるためにもかかわらず、 &lt;code&gt;File::open&lt;/code&gt; 成功しました。私たちは別の必要があるので、 &lt;code&gt;match&lt;/code&gt; その処理するために &lt;code&gt;Result&lt;/code&gt; 次の場合 &lt;code&gt;read_to_string&lt;/code&gt; は成功し、その後、私たちの関数が成功した、と私たちは、今のファイルからユーザ名を返す &lt;code&gt;s&lt;/code&gt; に包まれて &lt;code&gt;Ok&lt;/code&gt; 。 &lt;code&gt;read_to_string&lt;/code&gt; の場合失敗した場合は、 &lt;code&gt;File::open&lt;/code&gt; 戻り値を処理した &lt;code&gt;match&lt;/code&gt; でエラー値を返したのと同じ方法でエラー値を返します。ただし、 &lt;code&gt;return&lt;/code&gt; は関数の最後の式なので、明示的に返す必要はありません。</target>
        </trans-unit>
        <trans-unit id="deae9012508053fe94f96907583eae7e4c8a687f" translate="yes" xml:space="preserve">
          <source>Then we implement an associated function named &lt;code&gt;new&lt;/code&gt; on &lt;code&gt;Guess&lt;/code&gt; that creates instances of &lt;code&gt;Guess&lt;/code&gt; values. The &lt;code&gt;new&lt;/code&gt; function is defined to have one parameter named &lt;code&gt;value&lt;/code&gt; of type &lt;code&gt;i32&lt;/code&gt; and to return a &lt;code&gt;Guess&lt;/code&gt;. The code in the body of the &lt;code&gt;new&lt;/code&gt; function tests &lt;code&gt;value&lt;/code&gt; to make sure it&amp;rsquo;s between 1 and 100. If &lt;code&gt;value&lt;/code&gt; doesn&amp;rsquo;t pass this test, we make a &lt;code&gt;panic!&lt;/code&gt; call, which will alert the programmer who is writing the calling code that they have a bug they need to fix, because creating a &lt;code&gt;Guess&lt;/code&gt; with a &lt;code&gt;value&lt;/code&gt; outside this range would violate the contract that &lt;code&gt;Guess::new&lt;/code&gt; is relying on. The conditions in which &lt;code&gt;Guess::new&lt;/code&gt; might panic should be discussed in its public-facing API documentation; we&amp;rsquo;ll cover documentation conventions indicating the possibility of a &lt;code&gt;panic!&lt;/code&gt; in the API documentation that you create in Chapter 14. If &lt;code&gt;value&lt;/code&gt; does pass the test, we create a new &lt;code&gt;Guess&lt;/code&gt; with its &lt;code&gt;value&lt;/code&gt; field set to the &lt;code&gt;value&lt;/code&gt; parameter and return the &lt;code&gt;Guess&lt;/code&gt;.</source>
          <target state="translated">次に、 &lt;code&gt;Guess&lt;/code&gt; に &lt;code&gt;new&lt;/code&gt; という名前の関連する関数を実装し、 &lt;code&gt;Guess&lt;/code&gt; 値のインスタンスを作成します。 &lt;code&gt;new&lt;/code&gt; 機能は、一つのパラメータの名前持つように定義された &lt;code&gt;value&lt;/code&gt; 型の &lt;code&gt;i32&lt;/code&gt; して返すように &lt;code&gt;Guess&lt;/code&gt; 。 &lt;code&gt;new&lt;/code&gt; 関数の本体のコードは、 &lt;code&gt;value&lt;/code&gt; が1から100の間であることを確認するために値をテストします。 &lt;code&gt;value&lt;/code&gt; がこのテストに合格しない場合、 &lt;code&gt;panic!&lt;/code&gt; 作成しているため、彼らは修正する必要があるバグを持っていることを呼び出すコードを書いているプログラマが通知されます呼び出し、 &lt;code&gt;Guess&lt;/code&gt; して &lt;code&gt;value&lt;/code&gt; この範囲外では、 &lt;code&gt;Guess::new&lt;/code&gt; が依存している契約に違反します。 &lt;code&gt;Guess::new&lt;/code&gt; パニックが発生する可能性がある条件については、公開されているAPIドキュメントで説明する必要があります。 &lt;code&gt;panic!&lt;/code&gt; 可能性を示すドキュメンテーション規則をカバーします！場合は、第14章で作成することをAPIドキュメントに &lt;code&gt;value&lt;/code&gt; テストに合格しない、我々は新しい作成 &lt;code&gt;Guess&lt;/code&gt; その持つ &lt;code&gt;value&lt;/code&gt; にフィールドセット &lt;code&gt;value&lt;/code&gt; パラメータを返すと &lt;code&gt;Guess&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="06b6b70a87228a4df8ed0e498c6c809f243dabd9" translate="yes" xml:space="preserve">
          <source>Then we return two mutable slices in a tuple: one from the start of the original slice to the &lt;code&gt;mid&lt;/code&gt; index and another from &lt;code&gt;mid&lt;/code&gt; to the end of the slice.</source>
          <target state="translated">次に、2つの変更可能なスライスをタプルで返します。1つは元のスライスの最初から &lt;code&gt;mid&lt;/code&gt; インデックスまで、もう1つは &lt;code&gt;mid&lt;/code&gt; からスライスの最後までです。</target>
        </trans-unit>
        <trans-unit id="d29498b87e97b7beddcde1cb5378fcb2cbabe3a8" translate="yes" xml:space="preserve">
          <source>Then you must define an implementation for &lt;a href=&quot;trait.ord#tymethod.cmp&quot;&gt;&lt;code&gt;cmp&lt;/code&gt;&lt;/a&gt;. You may find it useful to use &lt;a href=&quot;trait.ord#tymethod.cmp&quot;&gt;&lt;code&gt;cmp&lt;/code&gt;&lt;/a&gt; on your type's fields.</source>
          <target state="translated">次に、&lt;a href=&quot;trait.ord#tymethod.cmp&quot;&gt; &lt;code&gt;cmp&lt;/code&gt; の&lt;/a&gt;実装を定義する必要があります。タイプのフィールドで&lt;a href=&quot;trait.ord#tymethod.cmp&quot;&gt; &lt;code&gt;cmp&lt;/code&gt; &lt;/a&gt;を使用すると便利な場合があります。</target>
        </trans-unit>
        <trans-unit id="884190657324310c04e2504f5fc0e76845d895ae" translate="yes" xml:space="preserve">
          <source>Then you must define an implementation for &lt;code&gt;cmp()&lt;/code&gt;. You may find it useful to use &lt;code&gt;cmp()&lt;/code&gt; on your type's fields.</source>
          <target state="translated">次に、 &lt;code&gt;cmp()&lt;/code&gt; の実装を定義する必要があります。タイプのフィールドで &lt;code&gt;cmp()&lt;/code&gt; を使用すると便利な場合があります。</target>
        </trans-unit>
        <trans-unit id="0d177ce772cf21906084a9438690b47406434422" translate="yes" xml:space="preserve">
          <source>Then you&amp;rsquo;ll learn how to use &lt;em&gt;traits&lt;/em&gt; to define behavior in a generic way. You can combine traits with generic types to constrain a generic type to only those types that have a particular behavior, as opposed to just any type.</source>
          <target state="translated">次に、&lt;em&gt;特性&lt;/em&gt;を使用して一般的な方法で動作を定義する方法を学びます。特性をジェネリック型と組み合わせて、ジェネリック型を、任意の型だけではなく、特定の動作を持つ型のみに制約できます。</target>
        </trans-unit>
        <trans-unit id="ddeec83a6e1ebd77d0b40c2a12564ec960334a02" translate="yes" xml:space="preserve">
          <source>Then, for each candidate type &lt;code&gt;T&lt;/code&gt;, search for a &lt;a href=&quot;../visibility-and-privacy&quot;&gt;visible&lt;/a&gt; method with a receiver of that type in the following places:</source>
          <target state="translated">次に、候補タイプ &lt;code&gt;T&lt;/code&gt; ごとに、次の場所でそのタイプのレシーバーを使用して&lt;a href=&quot;../visibility-and-privacy&quot;&gt;可視&lt;/a&gt;メソッドを検索します。</target>
        </trans-unit>
        <trans-unit id="c7f32ff9ae959e326529e5b742ae1c333e7b2254" translate="yes" xml:space="preserve">
          <source>Then, in your new &lt;em&gt;variables&lt;/em&gt; directory, open &lt;em&gt;src/main.rs&lt;/em&gt; and replace its code with the following code that won&amp;rsquo;t compile just yet:</source>
          <target state="translated">次に、新しい&lt;em&gt;変数&lt;/em&gt;ディレクトリで&lt;em&gt;src / main.rs&lt;/em&gt;を開き、そのコードを、まだコンパイルされていない次のコードに置き換えます。</target>
        </trans-unit>
        <trans-unit id="0c8f840e153942ef31581018e9e810864accdec7" translate="yes" xml:space="preserve">
          <source>Then, to bring &lt;code&gt;rand&lt;/code&gt; definitions into the scope of our package, we added a &lt;code&gt;use&lt;/code&gt; line starting with the name of the crate, &lt;code&gt;rand&lt;/code&gt;, and listed the items we wanted to bring into scope. Recall that in the &lt;a href=&quot;ch02-00-guessing-game-tutorial#generating-a-random-number&quot;&gt;&amp;ldquo;Generating a Random Number&amp;rdquo;&lt;/a&gt; section in Chapter 2, we brought the &lt;code&gt;Rng&lt;/code&gt; trait into scope and called the &lt;code&gt;rand::thread_rng&lt;/code&gt; function:</source>
          <target state="translated">次に、 &lt;code&gt;rand&lt;/code&gt; 定義をパッケージのスコープに含めるために、クレートの名前である &lt;code&gt;rand&lt;/code&gt; で始まる &lt;code&gt;use&lt;/code&gt; 行を追加し、スコープに入れたいアイテムをリストしました。第2章の&lt;a href=&quot;ch02-00-guessing-game-tutorial#generating-a-random-number&quot;&gt;「乱数の生成」&lt;/a&gt;セクションで、 &lt;code&gt;Rng&lt;/code&gt; 特性をスコープに入れ、 &lt;code&gt;rand::thread_rng&lt;/code&gt; 関数を呼び出したことを思い出してください。</target>
        </trans-unit>
        <trans-unit id="cbbc8078ba28a9ecb4224d46afd42558773fa640" translate="yes" xml:space="preserve">
          <source>Then, to bring &lt;code&gt;rand&lt;/code&gt; definitions into the scope of our package, we added a &lt;code&gt;use&lt;/code&gt; line starting with the name of the package, &lt;code&gt;rand&lt;/code&gt;, and listed the items we wanted to bring into scope. Recall that in the &lt;a href=&quot;ch02-00-guessing-game-tutorial#generating-a-random-number&quot;&gt;&amp;ldquo;Generating a Random Number&amp;rdquo;&lt;/a&gt; section in Chapter 2, we brought the &lt;code&gt;Rng&lt;/code&gt; trait into scope and called the &lt;code&gt;rand::thread_rng&lt;/code&gt; function:</source>
          <target state="translated">次に、 &lt;code&gt;rand&lt;/code&gt; 定義をパッケージのスコープに入れるために、パッケージの名前 &lt;code&gt;rand&lt;/code&gt; で始まる &lt;code&gt;use&lt;/code&gt; 行を追加し、スコープに入れたいアイテムをリストしました。第2章の&lt;a href=&quot;ch02-00-guessing-game-tutorial#generating-a-random-number&quot;&gt;「乱数の生成」&lt;/a&gt;セクションで、 &lt;code&gt;Rng&lt;/code&gt; トレイトをスコープに &lt;code&gt;rand::thread_rng&lt;/code&gt; 、rand :: thread_rng関数を呼び出したことを思い出してください。</target>
        </trans-unit>
        <trans-unit id="ea0671790854fadbc007a7d3ab3c99a7a0c53f74" translate="yes" xml:space="preserve">
          <source>Theoretically, this code should compile. Unfortunately, the Rust compiler isn&amp;rsquo;t perfect yet, and we get this error:</source>
          <target state="translated">理論的には、このコードはコンパイルする必要があります。残念ながら、Rustコンパイラはまだ完全ではなく、次のエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="7bb0fb711ce84d52df9718e0b2a2ec2dabc6a07f" translate="yes" xml:space="preserve">
          <source>There are a couple of solutions for this.</source>
          <target state="translated">これにはいくつかの解決策があります。</target>
        </trans-unit>
        <trans-unit id="530488aa6f064fc1ecb7dc7a5a0bf4b2dc63964c" translate="yes" xml:space="preserve">
          <source>There are a few things that &lt;code&gt;transmute&lt;/code&gt; is really useful for.</source>
          <target state="translated">&lt;code&gt;transmute&lt;/code&gt; が本当に役立ついくつかのことがあります。</target>
        </trans-unit>
        <trans-unit id="e38257a0874550d292627aecb2605763613ccaf1" translate="yes" xml:space="preserve">
          <source>There are a handful of shortcuts provided to make writing constructors more convenient, most common of which is the Field Init shorthand. When there is a variable and a field of the same name, the assignment can be simplified from &lt;code&gt;field: field&lt;/code&gt; into simply &lt;code&gt;field&lt;/code&gt;. The following example of a hypothetical constructor demonstrates this:</source>
          <target state="translated">コンストラクターの作成をより便利にするためにいくつかのショートカットが用意されていますが、最も一般的なものはField Init省略形です。変数と同じ名前のフィールドがある場合、割り当ては &lt;code&gt;field: field&lt;/code&gt; から単純な &lt;code&gt;field&lt;/code&gt; に単純化できます。次の架空のコンストラクターの例は、これを示しています。</target>
        </trans-unit>
        <trans-unit id="63a966968ec2346aede6a0d18395aa406c237072" translate="yes" xml:space="preserve">
          <source>There are a number of &lt;a href=&quot;#functions-1&quot;&gt;functions&lt;/a&gt; that offer access to various features. For example, we can use three of these functions to copy everything from standard input to standard output:</source>
          <target state="translated">さまざまな機能へのアクセスを提供する多くの&lt;a href=&quot;#functions-1&quot;&gt;機能&lt;/a&gt;があります。たとえば、次の3つの関数を使用して、すべてを標準入力から標準出力にコピーできます。</target>
        </trans-unit>
        <trans-unit id="1f79d0ffb253cf5d15cccef1c760f3edf4c3cd7b" translate="yes" xml:space="preserve">
          <source>There are a number of &lt;code&gt;debug_*&lt;/code&gt; methods on &lt;a href=&quot;struct.formatter&quot;&gt;&lt;code&gt;Formatter&lt;/code&gt;&lt;/a&gt; to help you with manual implementations, such as &lt;a href=&quot;struct.formatter#method.debug_struct&quot;&gt;&lt;code&gt;debug_struct&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;struct.formatter&quot;&gt; &lt;code&gt;Formatter&lt;/code&gt; &lt;/a&gt;には、&lt;a href=&quot;struct.formatter#method.debug_struct&quot;&gt; &lt;code&gt;debug_struct&lt;/code&gt; &lt;/a&gt;などの手動実装を支援する多くの &lt;code&gt;debug_*&lt;/code&gt; メソッドがあります。</target>
        </trans-unit>
        <trans-unit id="8e1d6f0ae7b1514d15119ee9f085506bcbaba7ce" translate="yes" xml:space="preserve">
          <source>There are a number of helper methods on the &lt;a href=&quot;struct.formatter&quot;&gt;&lt;code&gt;Formatter&lt;/code&gt;&lt;/a&gt; struct to help you with manual implementations, such as &lt;a href=&quot;struct.formatter#method.debug_struct&quot;&gt;&lt;code&gt;debug_struct&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;struct.formatter&quot;&gt; &lt;code&gt;Formatter&lt;/code&gt; &lt;/a&gt;構造体には、&lt;a href=&quot;struct.formatter#method.debug_struct&quot;&gt; &lt;code&gt;debug_struct&lt;/code&gt; &lt;/a&gt;などの手動実装を支援するためのヘルパーメソッドがいくつかあります。</target>
        </trans-unit>
        <trans-unit id="087920b8740a66ec282180bff3885f708e5bb842" translate="yes" xml:space="preserve">
          <source>There are a number of related macros in the &lt;a href=&quot;../macro.format&quot;&gt;&lt;code&gt;format!&lt;/code&gt;&lt;/a&gt; family. The ones that are currently implemented are:</source>
          <target state="translated">&lt;a href=&quot;../macro.format&quot;&gt; &lt;code&gt;format!&lt;/code&gt; &lt;/a&gt;は、関連するマクロが多数あります！家族。現在実装されているものは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="28043d56de08a63f7e30e165bfcf6d512b961039" translate="yes" xml:space="preserve">
          <source>There are also some platform-specific ABI strings:</source>
          <target state="translated">また、プラットフォーム固有のABI文字列もあります。</target>
        </trans-unit>
        <trans-unit id="4e3263bd4c02d9329fee29d313cf8ea903653894" translate="yes" xml:space="preserve">
          <source>There are both a positive and negative trait implementation for the same type.</source>
          <target state="translated">同じタイプでも正の形質実装と負の形質実装があります。</target>
        </trans-unit>
        <trans-unit id="9dfc0ac14db9531a0dcf3d9f3c7feabed396e9c2" translate="yes" xml:space="preserve">
          <source>There are conflicting trait implementations for the same type.</source>
          <target state="translated">同じ型には相反する形質の実装があります。</target>
        </trans-unit>
        <trans-unit id="cb600a231699778e7c442e8d1b0c5af1c6ce3e98" translate="yes" xml:space="preserve">
          <source>There are conflicting trait implementations for the same type. Example of erroneous code:</source>
          <target state="translated">同じ型に相反する形質の実装があります。誤ったコードの例。</target>
        </trans-unit>
        <trans-unit id="c7d32d1dc6c93776049af2c0d8da18ad1a5c107b" translate="yes" xml:space="preserve">
          <source>There are insufficient permissions to access the current directory.</source>
          <target state="translated">カレントディレクトリにアクセスするためのパーミッションが不足しています。</target>
        </trans-unit>
        <trans-unit id="320a725df7a67ccef8f0da8b29889ac40ad1812c" translate="yes" xml:space="preserve">
          <source>There are limitations when matching on non-exhaustive types outside of the defining crate:</source>
          <target state="translated">定義された木枠外の非網羅的な型でマッチングする場合は制限があります。</target>
        </trans-unit>
        <trans-unit id="c57d9d7a8463095f936949e3bd422fd7ce763db3" translate="yes" xml:space="preserve">
          <source>There are multiple trade-offs to consider in addition to the prevention of bugs. For example, in cases where you&amp;rsquo;re using large data structures, mutating an instance in place may be faster than copying and returning newly allocated instances. With smaller data structures, creating new instances and writing in a more functional programming style may be easier to think through, so lower performance might be a worthwhile penalty for gaining that clarity.</source>
          <target state="translated">バグの防止に加えて、考慮すべき複数のトレードオフがあります。たとえば、大きなデータ構造を使用している場合、インスタンスを適切に変更すると、新しく割り当てられたインスタンスをコピーして返すよりも高速になる場合があります。データ構造が小さい場合は、新しいインスタンスを作成してより機能的なプログラミングスタイルで記述する方が簡単に考えることができるため、パフォーマンスを低下させることは、その明快さを得る価値のある不利益になる場合があります。</target>
        </trans-unit>
        <trans-unit id="d53022046c1585c76ce2c3d1de0757bc5d58a5d7" translate="yes" xml:space="preserve">
          <source>There are multiple ways to create a new &lt;a href=&quot;struct.string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; from a string literal:</source>
          <target state="translated">文字列リテラルから新しい&lt;a href=&quot;struct.string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;を作成する方法はいくつかあります。</target>
        </trans-unit>
        <trans-unit id="b89e39f486cb11ae236a0c1ba092d84b1be61d5a" translate="yes" xml:space="preserve">
          <source>There are multiple ways we could change how our web server works to avoid having more requests back up behind a slow request; the one we&amp;rsquo;ll implement is a thread pool.</source>
          <target state="translated">遅いリクエストの背後でより多くのリクエストがバックアップされるのを避けるために、Webサーバーの動作を変更する方法はいくつかあります。実装するのはスレッドプールです。</target>
        </trans-unit>
        <trans-unit id="cbbb8fb2683dd85eb0ca22283c9bb44fdd37598e" translate="yes" xml:space="preserve">
          <source>There are no function calls, macros, or even &lt;code&gt;let&lt;/code&gt; statements in the &lt;code&gt;five&lt;/code&gt; function&amp;mdash;just the number &lt;code&gt;5&lt;/code&gt; by itself. That&amp;rsquo;s a perfectly valid function in Rust. Note that the function&amp;rsquo;s return type is specified too, as &lt;code&gt;-&amp;gt; i32&lt;/code&gt;. Try running this code; the output should look like this:</source>
          <target state="translated">そこには関数呼び出し、マクロはありません、あるいは &lt;code&gt;let&lt;/code&gt; 中文 &lt;code&gt;five&lt;/code&gt; 機能だけで数 &lt;code&gt;5&lt;/code&gt; を自身で。これはRustで完全に有効な関数です。関数の戻り値の型も &lt;code&gt;-&amp;gt; i32&lt;/code&gt; ように指定されていることに注意してください。このコードを実行してみてください。出力は次のようになります。</target>
        </trans-unit>
        <trans-unit id="e3048305fc74fc67f0b28e1af09fa647633b200c" translate="yes" xml:space="preserve">
          <source>There are no generic type parameters.</source>
          <target state="translated">汎用型のパラメータはありません。</target>
        </trans-unit>
        <trans-unit id="6dc334d98456ba931a1cb0e3e3cebe2b287fda18" translate="yes" xml:space="preserve">
          <source>There are no guarantees of data layout made by this representation.</source>
          <target state="translated">この表現は、データレイアウトを保証するものではありません。</target>
        </trans-unit>
        <trans-unit id="73292d3af30172448139b6d5386689eb5562d30e" translate="yes" xml:space="preserve">
          <source>There are no guarantees whatsoever that offsetting the pointer will not overflow or go beyond the allocation that the pointer points into. It is up to the caller to ensure that the returned offset is correct in all terms other than alignment.</source>
          <target state="translated">ポインタのオフセットがオーバーフローしたり、ポインタが指すアロケーションを超えたりしないことは保証されていません。返されたオフセットがアライメント以外のすべての点で正しいことを確認するのは呼び出し側の責任です。</target>
        </trans-unit>
        <trans-unit id="a86100f636fbb472fb5b1863356f0448a9ae85a5" translate="yes" xml:space="preserve">
          <source>There are no guarantees whatsover that offsetting the pointer will not overflow or go beyond the allocation that the pointer points into. It is up to the caller to ensure that the returned offset is correct in all terms other than alignment.</source>
          <target state="translated">ポインタのオフセットがオーバーフローしたり、ポインタが指すアロケーションを超えたりしないことは保証されていません。返されたオフセットがアライメント以外のすべての点で正しいことを確認するのは呼び出し側の責任です。</target>
        </trans-unit>
        <trans-unit id="19e4b768de5872c5fc351b9acc570966e33874d6" translate="yes" xml:space="preserve">
          <source>There are several functions and structs in this module that have a counterpart ending in &lt;code&gt;os&lt;/code&gt;. Those ending in &lt;code&gt;os&lt;/code&gt; will return an &lt;a href=&quot;../ffi/struct.osstring&quot;&gt;&lt;code&gt;OsString&lt;/code&gt;&lt;/a&gt; and those without will be returning a &lt;a href=&quot;../string/struct.string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このモジュールには、対応するものが &lt;code&gt;os&lt;/code&gt; で終わる関数と構造体がいくつかあります。 &lt;code&gt;os&lt;/code&gt; で終わるものは&lt;a href=&quot;../ffi/struct.osstring&quot;&gt; &lt;code&gt;OsString&lt;/code&gt; &lt;/a&gt;を返し、ないものは&lt;a href=&quot;../string/struct.string&quot;&gt; &lt;code&gt;String&lt;/code&gt; を&lt;/a&gt;返します。</target>
        </trans-unit>
        <trans-unit id="dc0876b472387aa80fcef964fda60c94ca27eb85" translate="yes" xml:space="preserve">
          <source>There are several functions and structs in this module that have a counterpart ending in &lt;code&gt;os&lt;/code&gt;. Those ending in &lt;code&gt;os&lt;/code&gt; will return an &lt;a href=&quot;../ffi/struct.osstring&quot;&gt;&lt;code&gt;OsString&lt;/code&gt;&lt;/a&gt; and those without will return a &lt;a href=&quot;../string/struct.string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このモジュールには、 &lt;code&gt;os&lt;/code&gt; で終わる対応する関数と構造体がいくつかあります。 &lt;code&gt;os&lt;/code&gt; で終わるものは&lt;a href=&quot;../ffi/struct.osstring&quot;&gt; &lt;code&gt;OsString&lt;/code&gt; &lt;/a&gt;を返し、そうでないものは&lt;a href=&quot;../string/struct.string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;を返します。</target>
        </trans-unit>
        <trans-unit id="171ee597fab4c6d0bdea510dd3f56d6a9c12c0b6" translate="yes" xml:space="preserve">
          <source>There are several implementations of common traits for slices. Some examples include:</source>
          <target state="translated">スライスのための一般的な形質の実装がいくつかあります。いくつかの例としては、以下のようなものがあります。</target>
        </trans-unit>
        <trans-unit id="0f5d6b4dc4e0f0d18f10b896c43b04863d873b17" translate="yes" xml:space="preserve">
          <source>There are several kinds of items:</source>
          <target state="translated">数種類のアイテムがあります。</target>
        </trans-unit>
        <trans-unit id="5ab16cf7d574dfc1dbe1b281f7a85326a916ba94" translate="yes" xml:space="preserve">
          <source>There are several structs that are useful for slices, such as &lt;a href=&quot;struct.iter&quot;&gt;&lt;code&gt;Iter&lt;/code&gt;&lt;/a&gt;, which represents iteration over a slice.</source>
          <target state="translated">&lt;a href=&quot;struct.iter&quot;&gt; &lt;code&gt;Iter&lt;/code&gt; &lt;/a&gt;など、スライスの反復を表す、スライスに役立つ構造体がいくつかあります。</target>
        </trans-unit>
        <trans-unit id="567ae72d32f4d2be3989eaf8a9904e62f889b537" translate="yes" xml:space="preserve">
          <source>There are six &lt;code&gt;char&lt;/code&gt; values here, but the fourth and sixth are not letters: they&amp;rsquo;re diacritics that don&amp;rsquo;t make sense on their own. Finally, if we look at them as grapheme clusters, we&amp;rsquo;d get what a person would call the four letters that make up the Hindi word:</source>
          <target state="translated">ここには6つの &lt;code&gt;char&lt;/code&gt; 値がありますが、4番目と6番目は文字ではありません。それらは、それ自体では意味をなさない分音記号です。最後に、それらを書記素クラスタとして見ると、ヒンディー語を構成する4つの文字を人が何と呼ぶか​​がわかります。</target>
        </trans-unit>
        <trans-unit id="6ce75e9d71dbebf75ae807b3a16056d1528fd37b" translate="yes" xml:space="preserve">
          <source>There are some known bugs that trigger this message.</source>
          <target state="translated">このメッセージのトリガーとなるいくつかの既知のバグがあります。</target>
        </trans-unit>
        <trans-unit id="926439ef5401fe133e30f193394b46730a6ce040" translate="yes" xml:space="preserve">
          <source>There are some strange edge cases with &lt;code&gt;macro_rules!&lt;/code&gt;. In the future, Rust will have a second kind of declarative macro that will work in a similar fashion but fix some of these edge cases. After that update, &lt;code&gt;macro_rules!&lt;/code&gt; will be effectively deprecated. With this in mind, as well as the fact that most Rust programmers will &lt;em&gt;use&lt;/em&gt; macros more than &lt;em&gt;write&lt;/em&gt; macros, we won&amp;rsquo;t discuss &lt;code&gt;macro_rules!&lt;/code&gt; any further. To learn more about how to write macros, consult the online documentation or other resources, such as &lt;a href=&quot;https://danielkeep.github.io/tlborm/book/index.html&quot;&gt;&amp;ldquo;The Little Book of Rust Macros&amp;rdquo;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;macro_rules!&lt;/code&gt; は、いくつかの奇妙なエッジケースがあります！。将来的に、Rustには同様の方法で機能するがこれらのエッジケースの一部を修正する2種類目の宣言マクロが含まれる予定です。その更新後、 &lt;code&gt;macro_rules!&lt;/code&gt; 実質的に非推奨になります。これを念頭に置き、ほとんどのRustプログラマーがマクロを&lt;em&gt;書く&lt;/em&gt;よりもマクロを&lt;em&gt;使用&lt;/em&gt;するという事実を踏まえて、 &lt;code&gt;macro_rules!&lt;/code&gt; については説明しません！それ以上。マクロの作成方法の詳細については、オンラインドキュメントまたは&lt;a href=&quot;https://danielkeep.github.io/tlborm/book/index.html&quot;&gt;「The Little Book of Rust Macros」&lt;/a&gt;などの他のリソースを参照してください。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="720348f040959c3669acec057ca2d47ad7fb3d69" translate="yes" xml:space="preserve">
          <source>There are three ABI strings which are cross-platform, and which all compilers are guaranteed to support:</source>
          <target state="translated">クロスプラットフォームであり、すべてのコンパイラがサポートを保証しているABI文字列が3つあります。</target>
        </trans-unit>
        <trans-unit id="0142bb3f41cab04708310e3fe823a323c32ee0b3" translate="yes" xml:space="preserve">
          <source>There are three common methods which can create iterators from a collection:</source>
          <target state="translated">コレクションからイテレータを作成できる一般的なメソッドは3つあります。</target>
        </trans-unit>
        <trans-unit id="987579e087a6ff5bbf6e70931c97c8842a5d0e0c" translate="yes" xml:space="preserve">
          <source>There are three possible ways to specify the desired &lt;code&gt;precision&lt;/code&gt;:</source>
          <target state="translated">必要な &lt;code&gt;precision&lt;/code&gt; を指定するには、次の3つの方法があります。</target>
        </trans-unit>
        <trans-unit id="3a65e426e444ff8c29bebad4488c8514ade91574" translate="yes" xml:space="preserve">
          <source>There are three ways to use the inline attribute:</source>
          <target state="translated">inline属性の使い方は3つあります。</target>
        </trans-unit>
        <trans-unit id="481486972e8a90ddff463b54cf1c4f208b0477e6" translate="yes" xml:space="preserve">
          <source>There are two input lifetimes, so Rust applies the first lifetime elision rule and gives both &lt;code&gt;&amp;amp;self&lt;/code&gt; and &lt;code&gt;announcement&lt;/code&gt; their own lifetimes. Then, because one of the parameters is &lt;code&gt;&amp;amp;self&lt;/code&gt;, the return type gets the lifetime of &lt;code&gt;&amp;amp;self&lt;/code&gt;, and all lifetimes have been accounted for.</source>
          <target state="translated">2つの入力ライフタイムがあるため、Rustは最初のライフタイム省略ルールを適用し、 &lt;code&gt;&amp;amp;self&lt;/code&gt; と &lt;code&gt;announcement&lt;/code&gt; 両方に独自のライフタイムを与えます。次に、パラメーターの1つが &lt;code&gt;&amp;amp;self&lt;/code&gt; であるため、戻り値の型は &lt;code&gt;&amp;amp;self&lt;/code&gt; の有効期間を取得し、すべての有効期間が考慮されます。</target>
        </trans-unit>
        <trans-unit id="ffdf24d7c3a95e9cacfa7c11d178ec9960ec72fd" translate="yes" xml:space="preserve">
          <source>There are two issues with the above example:</source>
          <target state="translated">上記の例には2つの問題点があります。</target>
        </trans-unit>
        <trans-unit id="c1575bd4949a087cd0961e57e825f5b7d2464821" translate="yes" xml:space="preserve">
          <source>There are two main ways to read this document.</source>
          <target state="translated">この文書の読み方は大きく分けて2つあります。</target>
        </trans-unit>
        <trans-unit id="86663982f114c71c4b638d9b0fa35d92d8fc55c4" translate="yes" xml:space="preserve">
          <source>There are two options that would work instead. The first would be to change the line &lt;code&gt;example_func(&amp;amp;example_string);&lt;/code&gt; to &lt;code&gt;example_func(example_string.as_str());&lt;/code&gt;, using the method &lt;a href=&quot;struct.string#method.as_str&quot;&gt;&lt;code&gt;as_str()&lt;/code&gt;&lt;/a&gt; to explicitly extract the string slice containing the string. The second way changes &lt;code&gt;example_func(&amp;amp;example_string);&lt;/code&gt; to &lt;code&gt;example_func(&amp;amp;*example_string);&lt;/code&gt;. In this case we are dereferencing a &lt;code&gt;String&lt;/code&gt; to a &lt;a href=&quot;../primitive.str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt;, then referencing the &lt;a href=&quot;../primitive.str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt; back to &lt;a href=&quot;../primitive.str&quot;&gt;&lt;code&gt;&amp;amp;str&lt;/code&gt;&lt;/a&gt;. The second way is more idiomatic, however both work to do the conversion explicitly rather than relying on the implicit conversion.</source>
          <target state="translated">代わりに機能する2つのオプションがあります。最初は、行 &lt;code&gt;example_func(&amp;amp;example_string);&lt;/code&gt; を変更することです。 &lt;code&gt;example_func(example_string.as_str());&lt;/code&gt; 、メソッド&lt;a href=&quot;struct.string#method.as_str&quot;&gt; &lt;code&gt;as_str()&lt;/code&gt; &lt;/a&gt;を使用して、文字列を含む文字列スライスを明示的に抽出します。 2番目の方法は、 &lt;code&gt;example_func(&amp;amp;example_string);&lt;/code&gt; を変更します。 &lt;code&gt;example_func(&amp;amp;*example_string);&lt;/code&gt; 。このケースでは逆参照されている &lt;code&gt;String&lt;/code&gt; に&lt;a href=&quot;../primitive.str&quot;&gt; &lt;code&gt;str&lt;/code&gt; &lt;/a&gt;、その後参照する、&lt;a href=&quot;../primitive.str&quot;&gt; &lt;code&gt;str&lt;/code&gt; &lt;/a&gt;にバック&lt;a href=&quot;../primitive.str&quot;&gt; &lt;code&gt;&amp;amp;str&lt;/code&gt; &lt;/a&gt;。 2番目の方法はより慣用的ですが、どちらも暗黙的な変換に依存するのではなく、明示的に変換を実行します。</target>
        </trans-unit>
        <trans-unit id="022a56e5687a1a83c185eae56c2be99a7be6379c" translate="yes" xml:space="preserve">
          <source>There are two options to work around this issue. The first is simply to rename one of the types. Alternatively, one can specify the intended type using the following syntax:</source>
          <target state="translated">この問題を回避するには2つの方法があります。1つ目は、単に型の名前を変更することです。あるいは、以下の構文を使って目的の型を指定することもできます。</target>
        </trans-unit>
        <trans-unit id="7601f9a3aa302729abcf51730ab0dacad11e1f7d" translate="yes" xml:space="preserve">
          <source>There are two possible solutions:</source>
          <target state="translated">解決策は2つ考えられます。</target>
        </trans-unit>
        <trans-unit id="3f08d38f311f1d8aebf1cc8c4c04305ba58884d5" translate="yes" xml:space="preserve">
          <source>There are two syntactic forms for creating an array:</source>
          <target state="translated">配列を作成するためには、2つの構文形式があります。</target>
        </trans-unit>
        <trans-unit id="63a18bac877b16a7425895e1b31ade8a29a01453" translate="yes" xml:space="preserve">
          <source>There are two types of &lt;code&gt;static&lt;/code&gt; items: those declared in association with the &lt;a href=&quot;keyword.mut&quot;&gt;&lt;code&gt;mut&lt;/code&gt;&lt;/a&gt; keyword and those without.</source>
          <target state="translated">&lt;code&gt;static&lt;/code&gt; アイテムには、&lt;a href=&quot;keyword.mut&quot;&gt; &lt;code&gt;mut&lt;/code&gt; &lt;/a&gt;キーワードに関連付けて宣言されたものと、関連付けられていないものの2種類があります。</target>
        </trans-unit>
        <trans-unit id="86a631e5c1cd817983c93f98903db4ea59d68db2" translate="yes" xml:space="preserve">
          <source>There are two types of implementations:</source>
          <target state="translated">実装には2種類あります。</target>
        </trans-unit>
        <trans-unit id="fa155718008a683c96cef5cc6a71a54ea03f305c" translate="yes" xml:space="preserve">
          <source>There are two ways to define new macros:</source>
          <target state="translated">新しいマクロを定義するには2つの方法があります。</target>
        </trans-unit>
        <trans-unit id="9880ebdf9a583de2d652297bd89e0b5ff4d36ffb" translate="yes" xml:space="preserve">
          <source>There are two ways to implement &lt;code&gt;Copy&lt;/code&gt; on your type. The simplest is to use &lt;code&gt;derive&lt;/code&gt;:</source>
          <target state="translated">タイプに &lt;code&gt;Copy&lt;/code&gt; を実装するには2つの方法があります。最も簡単なのは、 &lt;code&gt;derive&lt;/code&gt; を使用することです。</target>
        </trans-unit>
        <trans-unit id="b2a9fbbbcf33cff3a0df902072d56db76dfeaf3c" translate="yes" xml:space="preserve">
          <source>There are two ways to solve this error. The first is to make the public type signature only public to a module that also has access to the private type. This is done by using pub(crate) or pub(in crate::my_mod::etc) Example:</source>
          <target state="translated">このエラーを解決する方法は2つあります。1つ目は、プライベート型にもアクセスできるモジュールに対してのみ、パブリック型のシグネチャを公開することです。これは pub(crate)または pub(in crate::my_mod::etc)を使用して行います。</target>
        </trans-unit>
        <trans-unit id="dc647999e3aa70d53b9f18def550d41889259047" translate="yes" xml:space="preserve">
          <source>There are various restrictions on transmuting between types in Rust; for example types being transmuted must have the same size. To apply all these restrictions, the compiler must know the exact types that may be transmuted. When type parameters are involved, this cannot always be done.</source>
          <target state="translated">例えば、変換される型は同じサイズでなければなりません。これらの制限をすべて適用するには、コンパイラは変換される型を正確に把握していなければなりません。型のパラメータが関与している場合、これは常に実行できるわけではありません。</target>
        </trans-unit>
        <trans-unit id="0019607d06d61b11d32e87172ee0ea679ebbb977" translate="yes" xml:space="preserve">
          <source>There are various rules:</source>
          <target state="translated">様々なルールがあります。</target>
        </trans-unit>
        <trans-unit id="0d6ed4037ecbcc5953e35640da903ed6a8a40981" translate="yes" xml:space="preserve">
          <source>There can only be one owner at a time.</source>
          <target state="translated">オーナーは一度に一人しかいられません。</target>
        </trans-unit>
        <trans-unit id="f4471e590e73989497aca327361dde4b0c93c59c" translate="yes" xml:space="preserve">
          <source>There is a difference between what the &lt;code&gt;match&lt;/code&gt; expression from Listing 9-6 and the &lt;code&gt;?&lt;/code&gt; operator do: error values that have the &lt;code&gt;?&lt;/code&gt; operator called on them go through the &lt;code&gt;from&lt;/code&gt; function, defined in the &lt;code&gt;From&lt;/code&gt; trait in the standard library, which is used to convert errors from one type into another. When the &lt;code&gt;?&lt;/code&gt; operator calls the &lt;code&gt;from&lt;/code&gt; function, the error type received is converted into the error type defined in the return type of the current function. This is useful when a function returns one error type to represent all the ways a function might fail, even if parts might fail for many different reasons. As long as each error type implements the &lt;code&gt;from&lt;/code&gt; function to define how to convert itself to the returned error type, the &lt;code&gt;?&lt;/code&gt; operator takes care of the conversion automatically.</source>
          <target state="translated">リスト9-6の &lt;code&gt;match&lt;/code&gt; 表現と &lt;code&gt;?&lt;/code&gt; には違いがあります。演算子は行います： &lt;code&gt;?&lt;/code&gt; を持つエラー値呼び出された演算子は、標準ライブラリの &lt;code&gt;From&lt;/code&gt; トレイトで定義されている &lt;code&gt;from&lt;/code&gt; 関数を通過します。これは、エラーをあるタイプから別のタイプに変換するために使用されます。いつ &lt;code&gt;?&lt;/code&gt; 演算子が &lt;code&gt;from&lt;/code&gt; 関数を呼び出すと、受け取ったエラータイプが現在の関数の戻り値のタイプで定義されているエラータイプに変換されます。これは、関数が1つのエラータイプを返し、さまざまな理由でパーツが失敗する可能性がある場合でも、関数が失敗するすべての方法を表す場合に役立ちます。各エラータイプが &lt;code&gt;from&lt;/code&gt; を実装している限り自分自身を返されたエラータイプに変換する方法を定義する関数 &lt;code&gt;?&lt;/code&gt; 演算子は変換を自動的に処理します。</target>
        </trans-unit>
        <trans-unit id="42bfb7d2a182c3982d4afcf52f4999394d469590" translate="yes" xml:space="preserve">
          <source>There is a difference between what the &lt;code&gt;match&lt;/code&gt; expression from Listing 9-6 does and what the &lt;code&gt;?&lt;/code&gt; operator does: error values that have the &lt;code&gt;?&lt;/code&gt; operator called on them go through the &lt;code&gt;from&lt;/code&gt; function, defined in the &lt;code&gt;From&lt;/code&gt; trait in the standard library, which is used to convert errors from one type into another. When the &lt;code&gt;?&lt;/code&gt; operator calls the &lt;code&gt;from&lt;/code&gt; function, the error type received is converted into the error type defined in the return type of the current function. This is useful when a function returns one error type to represent all the ways a function might fail, even if parts might fail for many different reasons. As long as each error type implements the &lt;code&gt;from&lt;/code&gt; function to define how to convert itself to the returned error type, the &lt;code&gt;?&lt;/code&gt; operator takes care of the conversion automatically.</source>
          <target state="translated">リスト9-6の &lt;code&gt;match&lt;/code&gt; 式の機能と &lt;code&gt;?&lt;/code&gt; の機能には違いがあります。演算子は： &lt;code&gt;?&lt;/code&gt; を持つエラー値それらに呼び出された演算子は、標準ライブラリの &lt;code&gt;From&lt;/code&gt; 特性で定義されている &lt;code&gt;from&lt;/code&gt; 関数を通過します。この関数は、エラーをあるタイプから別のタイプに変換するために使用されます。いつ &lt;code&gt;?&lt;/code&gt; 演算子が &lt;code&gt;from&lt;/code&gt; 関数を呼び出すと、受け取ったエラータイプは、現在の関数の戻り値の型で定義されたエラータイプに変換されます。これは、さまざまな理由でパーツが失敗する可能性がある場合でも、関数が1つのエラータイプを返し、関数が失敗する可能性のあるすべての方法を表す場合に役立ちます。各エラータイプが実装している限り &lt;code&gt;from&lt;/code&gt; 機能、返されたエラーの種類に自分自身を変換する方法を定義するには &lt;code&gt;?&lt;/code&gt; オペレーターが自動的に変換を処理します。</target>
        </trans-unit>
        <trans-unit id="6b478d4cf3daf7fb5af886fd070b460cffb3f99a" translate="yes" xml:space="preserve">
          <source>There is a large variety of prefix types, see &lt;a href=&quot;enum.prefix&quot;&gt;&lt;code&gt;Prefix&lt;/code&gt;&lt;/a&gt;'s documentation for more.</source>
          <target state="translated">プレフィックスにはさまざまな種類があります。詳しくは&lt;a href=&quot;enum.prefix&quot;&gt; &lt;code&gt;Prefix&lt;/code&gt; &lt;/a&gt;のドキュメントをご覧ください。</target>
        </trans-unit>
        <trans-unit id="b6a45e45d5b815dc5996fef1ade397970afb9eee" translate="yes" xml:space="preserve">
          <source>There is a natural point at which we can return the memory our &lt;code&gt;String&lt;/code&gt; needs to the allocator: when &lt;code&gt;s&lt;/code&gt; goes out of scope. When a variable goes out of scope, Rust calls a special function for us. This function is called &lt;code&gt;drop&lt;/code&gt;, and it&amp;rsquo;s where the author of &lt;code&gt;String&lt;/code&gt; can put the code to return the memory. Rust calls &lt;code&gt;drop&lt;/code&gt; automatically at the closing curly bracket.</source>
          <target state="translated">私達は私達のメモリを返すことができた時に自然なポイントがある &lt;code&gt;String&lt;/code&gt; アロケータに必要が次の場合 &lt;code&gt;s&lt;/code&gt; スコープ外になります。変数がスコープ外になると、Rustは特別な関数を呼び出します。この関数は &lt;code&gt;drop&lt;/code&gt; と呼ばれ、 &lt;code&gt;String&lt;/code&gt; の作成者がコードを配置してメモリを返すことができる場所です。さびの呼び出しは、閉じ中括弧で自動的に &lt;code&gt;drop&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="9b02d233f669a1e206e4e2c20ce1d2df695bab4c" translate="yes" xml:space="preserve">
          <source>There is a natural point at which we can return the memory our &lt;code&gt;String&lt;/code&gt; needs to the operating system: when &lt;code&gt;s&lt;/code&gt; goes out of scope. When a variable goes out of scope, Rust calls a special function for us. This function is called &lt;code&gt;drop&lt;/code&gt;, and it&amp;rsquo;s where the author of &lt;code&gt;String&lt;/code&gt; can put the code to return the memory. Rust calls &lt;code&gt;drop&lt;/code&gt; automatically at the closing curly bracket.</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; が必要とするメモリをオペレーティングシステムに返すことができる自然なポイントがあります。それは、 &lt;code&gt;s&lt;/code&gt; がスコープ外になったときです。変数がスコープ外になると、Rustは特別な関数を呼び出します。この関数は &lt;code&gt;drop&lt;/code&gt; と呼ばれ、 &lt;code&gt;String&lt;/code&gt; の作成者がメモリを返すコードを配置できる場所です。Rust呼び出しは、閉じ中括弧で自動的に &lt;code&gt;drop&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="f99c36775b0b7e1c59faa2f7b94f6fd5d85206bb" translate="yes" xml:space="preserve">
          <source>There is a small difference between the two: the &lt;code&gt;derive&lt;/code&gt; strategy will also place a &lt;code&gt;Copy&lt;/code&gt; bound on type parameters, which isn't always desired.</source>
          <target state="translated">2つの間に小さな違いがあり &lt;code&gt;derive&lt;/code&gt; 戦略では、型パラメーターに &lt;code&gt;Copy&lt;/code&gt; バウンドも配置されますが、これは必ずしも望ましいことではありません。</target>
        </trans-unit>
        <trans-unit id="ba88e1e16f5f4f6fd310c5a8bb2e8dd5b7b7dc78" translate="yes" xml:space="preserve">
          <source>There is currently a known issue (see &lt;a href=&quot;https://github.com/rust-lang/rust/issues/39364&quot;&gt;&lt;code&gt;#39364&lt;/code&gt;&lt;/a&gt;) that causes &lt;code&gt;recv_timeout&lt;/code&gt; to panic unexpectedly with the following example:</source>
          <target state="translated">現在、次の例で &lt;code&gt;recv_timeout&lt;/code&gt; が予期せずパニックを引き起こす既知の問題（&lt;a href=&quot;https://github.com/rust-lang/rust/issues/39364&quot;&gt; &lt;code&gt;#39364&lt;/code&gt; を&lt;/a&gt;参照）があります。</target>
        </trans-unit>
        <trans-unit id="ac69e37cd6f18587422e7c6b701f3aed59b4a925" translate="yes" xml:space="preserve">
          <source>There is currently no supported way to create a raw pointer or reference to a field of a struct inside &lt;code&gt;MaybeUninit&amp;lt;Struct&amp;gt;&lt;/code&gt;. That means it is not possible to create a struct by calling &lt;code&gt;MaybeUninit::uninit::&amp;lt;Struct&amp;gt;()&lt;/code&gt; and then writing to its fields.</source>
          <target state="translated">現在、 &lt;code&gt;MaybeUninit&amp;lt;Struct&amp;gt;&lt;/code&gt; 内の構造体のフィールドへの生のポインタまたは参照を作成するためのサポートされている方法はありません。つまり、 &lt;code&gt;MaybeUninit::uninit::&amp;lt;Struct&amp;gt;()&lt;/code&gt; を呼び出してフィールドに書き込むことで構造体を作成することはできません。</target>
        </trans-unit>
        <trans-unit id="06e1ced9251455647a44280e8880c2f024531277" translate="yes" xml:space="preserve">
          <source>There is no consensus in the programming community about what features a language must have to be considered object oriented. Rust is influenced by many programming paradigms, including OOP; for example, we explored the features that came from functional programming in Chapter 13. Arguably, OOP languages share certain common characteristics, namely objects, encapsulation, and inheritance. Let&amp;rsquo;s look at what each of those characteristics means and whether Rust supports it.</source>
          <target state="translated">プログラミングコミュニティでは、言語をオブジェクト指向と見なさなければならない機能についてコンセンサスはありません。 Rustは、OOPを含む多くのプログラミングパラダイムの影響を受けています。たとえば、関数プログラミングからもたらされる機能については、第13章で説明しました。間違いなく、OOP言語は、オブジェクト、カプセル化、継承などの特定の共通特性を共有しています。これらの各特性の意味と、Rustがそれをサポートしているかどうかを見てみましょう。</target>
        </trans-unit>
        <trans-unit id="3940029042247daa011ed3a6db287dfc70d15650" translate="yes" xml:space="preserve">
          <source>There is no guarantee that an all-zero byte-pattern represents a valid value of some type &lt;code&gt;T&lt;/code&gt;. For example, the all-zero byte-pattern is not a valid value for reference types (&lt;code&gt;&amp;amp;T&lt;/code&gt; and &lt;code&gt;&amp;amp;mut T&lt;/code&gt;). Using &lt;code&gt;zeroed&lt;/code&gt; on such types causes immediate &lt;a href=&quot;../../reference/behavior-considered-undefined&quot;&gt;undefined behavior&lt;/a&gt; because &lt;a href=&quot;union.maybeuninit#initialization-invariant&quot;&gt;the Rust compiler assumes&lt;/a&gt; that there always is a valid value in a variable it considers initialized.</source>
          <target state="translated">すべてゼロのバイトパターンが何らかのタイプ &lt;code&gt;T&lt;/code&gt; の有効な値を表すという保証はありません。たとえば、すべて0のバイトパターンは、参照タイプ（ &lt;code&gt;&amp;amp;T&lt;/code&gt; および &lt;code&gt;&amp;amp;mut T&lt;/code&gt; ）の有効な値ではありません。&lt;a href=&quot;union.maybeuninit#initialization-invariant&quot;&gt;Rustコンパイラーは&lt;/a&gt;、初期化されていると見なされる変数に常に有効な値があると想定するため、このような型に &lt;code&gt;zeroed&lt;/code&gt; を使用すると、即座に&lt;a href=&quot;../../reference/behavior-considered-undefined&quot;&gt;未定義の動作&lt;/a&gt;が発生します。</target>
        </trans-unit>
        <trans-unit id="3d516718a20e6c51e7b81919f2ed7f10da7e19e0" translate="yes" xml:space="preserve">
          <source>There is no guarantee that an all-zero byte-pattern represents a valid value of some type &lt;code&gt;T&lt;/code&gt;. For example, the all-zero byte-pattern is not a valid value for reference types (&lt;code&gt;&amp;amp;T&lt;/code&gt;, &lt;code&gt;&amp;amp;mut T&lt;/code&gt;) and functions pointers. Using &lt;code&gt;zeroed&lt;/code&gt; on such types causes immediate &lt;a href=&quot;../../reference/behavior-considered-undefined&quot;&gt;undefined behavior&lt;/a&gt; because &lt;a href=&quot;union.maybeuninit#initialization-invariant&quot;&gt;the Rust compiler assumes&lt;/a&gt; that there always is a valid value in a variable it considers initialized.</source>
          <target state="translated">すべてゼロのバイトパターンが、あるタイプ &lt;code&gt;T&lt;/code&gt; の有効な値を表すという保証はありません。たとえば、すべてゼロのバイトパターンは、参照型（ &lt;code&gt;&amp;amp;T&lt;/code&gt; 、 &lt;code&gt;&amp;amp;mut T&lt;/code&gt; ）および関数ポインターの有効な値ではありません。&lt;a href=&quot;union.maybeuninit#initialization-invariant&quot;&gt;Rustコンパイラは&lt;/a&gt;、初期化されたと見なす変数に常に有効な値があると想定するため、このような型で &lt;code&gt;zeroed&lt;/code&gt; を使用すると、すぐに&lt;a href=&quot;../../reference/behavior-considered-undefined&quot;&gt;未定義の動作&lt;/a&gt;が発生します。</target>
        </trans-unit>
        <trans-unit id="77cd938f61b73cdc8199024bd862cf47becca43c" translate="yes" xml:space="preserve">
          <source>There is no guarantee that the memory pointed to by &lt;code&gt;ptr&lt;/code&gt; contains a valid nul terminator byte at the end of the string.</source>
          <target state="translated">&lt;code&gt;ptr&lt;/code&gt; が指すメモリの文字列の最後に有効なNULターミネータバイトが含まれているという保証はありません。</target>
        </trans-unit>
        <trans-unit id="37d385330ea581c420be55585ac9b53b42ed4426" translate="yes" xml:space="preserve">
          <source>There is no guarantee to the validity of &lt;code&gt;ptr&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ptr&lt;/code&gt; の有効性は保証されません。</target>
        </trans-unit>
        <trans-unit id="90b4dcdc90eb015a6d81f3692edc057c91c2b6f8" translate="yes" xml:space="preserve">
          <source>There is no implementation of &lt;a href=&quot;../ops/trait.drop&quot;&gt;&lt;code&gt;Drop&lt;/code&gt;&lt;/a&gt; for child processes, so if you do not ensure the &lt;code&gt;Child&lt;/code&gt; has exited then it will continue to run, even after the &lt;code&gt;Child&lt;/code&gt; handle to the child process has gone out of scope.</source>
          <target state="translated">のない実装はありません&lt;a href=&quot;../ops/trait.drop&quot;&gt; &lt;code&gt;Drop&lt;/code&gt; &lt;/a&gt;子プロセスのためには、あなたが保証するものではありません。もしそうなら、 &lt;code&gt;Child&lt;/code&gt; それはした後も、引き続き実行されます終了した &lt;code&gt;Child&lt;/code&gt; 子プロセスへのハンドルがスコープ外に行ってきました。</target>
        </trans-unit>
        <trans-unit id="96d59d760142fd31188eb3940b02911fcbc69887" translate="yes" xml:space="preserve">
          <source>There is no implementation of &lt;a href=&quot;https://doc.rust-lang.org/core/ops/trait.Drop.html&quot;&gt;&lt;code&gt;Drop&lt;/code&gt;&lt;/a&gt; for child processes, so if you do not ensure the &lt;code&gt;Child&lt;/code&gt; has exited then it will continue to run, even after the &lt;code&gt;Child&lt;/code&gt; handle to the child process has gone out of scope.</source>
          <target state="translated">子プロセスの&lt;a href=&quot;https://doc.rust-lang.org/core/ops/trait.Drop.html&quot;&gt; &lt;code&gt;Drop&lt;/code&gt; &lt;/a&gt;の実装はないため、 &lt;code&gt;Child&lt;/code&gt; が終了したことを確認しないと、子プロセスの &lt;code&gt;Child&lt;/code&gt; ハンドルがスコープから外れた後でも、子プロセスは引き続き実行されます。</target>
        </trans-unit>
        <trans-unit id="f7865277b670de1ac383b78686d6c6c3ef225ff1" translate="yes" xml:space="preserve">
          <source>There is no implicit capture of the containing function's generic parameters, parameters, and local variables. For example, &lt;code&gt;inner&lt;/code&gt; may not access &lt;code&gt;outer_var&lt;/code&gt;.</source>
          <target state="translated">包含関数のジェネリックパラメーター、パラメーター、およびローカル変数の暗黙的なキャプチャはありません。たとえば、 &lt;code&gt;inner&lt;/code&gt; は &lt;code&gt;outer_var&lt;/code&gt; にアクセスできません。</target>
        </trans-unit>
        <trans-unit id="98bc5a98bb823e7a07123a40b084c3311e58d239" translate="yes" xml:space="preserve">
          <source>There is no meaningful value to associate with your keys.</source>
          <target state="translated">キーに関連付ける意味のある価値はありません。</target>
        </trans-unit>
        <trans-unit id="e47f071471a1ed59d24ce5598360fe16b663897e" translate="yes" xml:space="preserve">
          <source>There is no syntax that directly refers to a function item type, but the compiler will display the type as something like &lt;code&gt;fn(u32) -&amp;gt; i32 {fn_name}&lt;/code&gt; in error messages.</source>
          <target state="translated">関数項目のタイプを直接参照する構文はありませんが、コンパイラーはタイプを &lt;code&gt;fn(u32) -&amp;gt; i32 {fn_name}&lt;/code&gt; ようなものとしてエラーメッセージに表示します。</target>
        </trans-unit>
        <trans-unit id="6352ff90262f746d2ceb9b5382b99f239203c508" translate="yes" xml:space="preserve">
          <source>There is no way to express the &lt;code&gt;if x &amp;lt; 5&lt;/code&gt; condition within a pattern, so the match guard gives us the ability to express this logic.</source>
          <target state="translated">パターン内で &lt;code&gt;if x &amp;lt; 5&lt;/code&gt; 条件を表現する方法はないため、マッチガードはこのロジックを表現する機能を提供します。</target>
        </trans-unit>
        <trans-unit id="f04c5e1cecb9254e859f18bc80c9ad5ecd03b1f1" translate="yes" xml:space="preserve">
          <source>There is no way to refer to all trait objects generically, so the only way to create values of this type is with functions like &lt;a href=&quot;../intrinsics/fn.transmute&quot;&gt;&lt;code&gt;std::mem::transmute&lt;/code&gt;&lt;/a&gt;. Similarly, the only way to create a true trait object from a &lt;code&gt;TraitObject&lt;/code&gt; value is with &lt;code&gt;transmute&lt;/code&gt;.</source>
          <target state="translated">すべての特性オブジェクトを総称的に参照する方法はないため、このタイプの値を作成する唯一の方法は、&lt;a href=&quot;../intrinsics/fn.transmute&quot;&gt; &lt;code&gt;std::mem::transmute&lt;/code&gt; &lt;/a&gt;などの関数を使用することです。同様に、 &lt;code&gt;TraitObject&lt;/code&gt; 値から真の特性オブジェクトを作成する唯一の方法は、 &lt;code&gt;transmute&lt;/code&gt; を使用することです。</target>
        </trans-unit>
        <trans-unit id="0ac27f2fb34cee3cbd54d9db13f601fadc62dc92" translate="yes" xml:space="preserve">
          <source>There is no way to refer to all trait objects generically, so the only way to create values of this type is with functions like &lt;a href=&quot;../mem/fn.transmute&quot;&gt;&lt;code&gt;std::mem::transmute&lt;/code&gt;&lt;/a&gt;. Similarly, the only way to create a true trait object from a &lt;code&gt;TraitObject&lt;/code&gt; value is with &lt;code&gt;transmute&lt;/code&gt;.</source>
          <target state="translated">すべての特性オブジェクトを一般的に参照する方法はないため、このタイプの値を作成する唯一の方法は、&lt;a href=&quot;../mem/fn.transmute&quot;&gt; &lt;code&gt;std::mem::transmute&lt;/code&gt; &lt;/a&gt;ような関数を使用することです。同様に、 &lt;code&gt;TraitObject&lt;/code&gt; 値から真のトレイトオブジェクトを作成する唯一の方法は、 &lt;code&gt;transmute&lt;/code&gt; を使用することです。</target>
        </trans-unit>
        <trans-unit id="e9f689cb8e372a1fb3e4dbcf70bbf33a833163e2" translate="yes" xml:space="preserve">
          <source>There is no wrong way to read this book: if you want to skip ahead, go for it! You might have to jump back to earlier chapters if you experience any confusion. But do whatever works for you.</source>
          <target state="translated">この本の読み方に間違いはありません:先に飛ばしたい場合は、それを目指してください。あなたが混乱を経験した場合は、以前の章にジャンプバックしなければならないかもしれません。しかし、あなたのために働くものは何でもしてください。</target>
        </trans-unit>
        <trans-unit id="f89524ca0c10b9d4f1257c768a5b98aab1c4ca9b" translate="yes" xml:space="preserve">
          <source>There is one more similarity between enums and structs: just as we&amp;rsquo;re able to define methods on structs using &lt;code&gt;impl&lt;/code&gt;, we&amp;rsquo;re also able to define methods on enums. Here&amp;rsquo;s a method named &lt;code&gt;call&lt;/code&gt; that we could define on our &lt;code&gt;Message&lt;/code&gt; enum:</source>
          <target state="translated">列挙型と構造体の間に1つの以上の類似性があります：私たちが使用して構造体のメソッドを定義することができるしているだけのよう &lt;code&gt;impl&lt;/code&gt; 、我々はまた、列挙型のメソッドを定義することができるしています。 &lt;code&gt;Message&lt;/code&gt; 列挙で定義できる &lt;code&gt;call&lt;/code&gt; という名前のメソッドは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="dd5de49f07fcfe0b32f34685bec57fc973c95f95" translate="yes" xml:space="preserve">
          <source>There is possibly no limit to the number of &lt;code&gt;else&lt;/code&gt; blocks that could follow an &lt;code&gt;if&lt;/code&gt; expression however if you have several then a &lt;a href=&quot;keyword.match&quot;&gt;&lt;code&gt;match&lt;/code&gt;&lt;/a&gt; expression might be preferable.</source>
          <target state="translated">&lt;code&gt;if&lt;/code&gt; 式の後に続く &lt;code&gt;else&lt;/code&gt; ブロックの数に制限はない可能性がありますが、複数ある場合は、&lt;a href=&quot;keyword.match&quot;&gt; &lt;code&gt;match&lt;/code&gt; &lt;/a&gt;式の方が望ましい場合があります。</target>
        </trans-unit>
        <trans-unit id="602b0e48a3f43914053d4b199337461ae231047f" translate="yes" xml:space="preserve">
          <source>There is usually no need to create a &lt;code&gt;Thread&lt;/code&gt; struct yourself, one should instead use a function like &lt;code&gt;spawn&lt;/code&gt; to create new threads, see the docs of &lt;a href=&quot;struct.builder&quot;&gt;&lt;code&gt;Builder&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;fn.spawn&quot;&gt;&lt;code&gt;spawn&lt;/code&gt;&lt;/a&gt; for more details.</source>
          <target state="translated">通常、自分で &lt;code&gt;Thread&lt;/code&gt; 構造体を作成する必要はありません。代わりに、 &lt;code&gt;spawn&lt;/code&gt; などの関数を使用して新しいスレッドを作成&lt;a href=&quot;fn.spawn&quot;&gt; &lt;code&gt;spawn&lt;/code&gt; &lt;/a&gt;必要があります。詳細については、&lt;a href=&quot;struct.builder&quot;&gt; &lt;code&gt;Builder&lt;/code&gt; &lt;/a&gt;およびspawnのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="f5aa017ba54ffa17080a39771f2c83f220593384" translate="yes" xml:space="preserve">
          <source>There will be an error about &lt;code&gt;bool&lt;/code&gt; not implementing &lt;code&gt;Index&amp;lt;u8&amp;gt;&lt;/code&gt;, followed by a note saying &quot;the type &lt;code&gt;bool&lt;/code&gt; cannot be indexed by &lt;code&gt;u8&lt;/code&gt;&quot;.</source>
          <target state="translated">&lt;code&gt;bool&lt;/code&gt; が &lt;code&gt;Index&amp;lt;u8&amp;gt;&lt;/code&gt; 実装していないというエラーが発生し、その後に「タイプ &lt;code&gt;bool&lt;/code&gt; は &lt;code&gt;u8&lt;/code&gt; で索引付けできない」という注記が続きます。</target>
        </trans-unit>
        <trans-unit id="7649fb68743c30fa670731965f40aa4090d73b82" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s a lot more to say about &lt;a href=&quot;http://doc.crates.io&quot;&gt;Cargo&lt;/a&gt; and &lt;a href=&quot;http://doc.crates.io/crates-io.html&quot;&gt;its ecosystem&lt;/a&gt; which we&amp;rsquo;ll discuss in Chapter 14, but for now, that&amp;rsquo;s all you need to know. Cargo makes it very easy to reuse libraries, so Rustaceans are able to write smaller projects that are assembled from a number of packages.</source>
          <target state="translated">&lt;a href=&quot;http://doc.crates.io&quot;&gt;Cargo&lt;/a&gt;と&lt;a href=&quot;http://doc.crates.io/crates-io.html&quot;&gt;そのエコシステム&lt;/a&gt;については、第14章で説明しますが、今のところ、これで十分です。Cargoを使用すると、ライブラリの再利用が非常に簡単になるため、Rustaceansは、多数のパッケージからアセンブルされた小さなプロジェクトを作成できます。</target>
        </trans-unit>
        <trans-unit id="2bf65550ac389c6cc7469a24526e0ae8bf661af9" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s a tendency among many Rustaceans to avoid using &lt;code&gt;clone&lt;/code&gt; to fix ownership problems because of its runtime cost. In &lt;a href=&quot;ch13-00-functional-features&quot;&gt;Chapter 13&lt;/a&gt;, you&amp;rsquo;ll learn how to use more efficient methods in this type of situation. But for now, it&amp;rsquo;s okay to copy a few strings to continue making progress because you&amp;rsquo;ll make these copies only once and your filename and query string are very small. It&amp;rsquo;s better to have a working program that&amp;rsquo;s a bit inefficient than to try to hyperoptimize code on your first pass. As you become more experienced with Rust, it&amp;rsquo;ll be easier to start with the most efficient solution, but for now, it&amp;rsquo;s perfectly acceptable to call &lt;code&gt;clone&lt;/code&gt;.</source>
          <target state="translated">多くのRustaceansの間では、ランタイムコストのために、 &lt;code&gt;clone&lt;/code&gt; を使用して所有権の問題を修正するのを避ける傾向があります。では&lt;a href=&quot;ch13-00-functional-features&quot;&gt;第13章&lt;/a&gt;、あなたは、この種の状況では、より効率的な方法を使用する方法を学びます。ただし、今のところ、いくつかの文字列をコピーして作業を続けても問題ありません。これらのコピーは1回だけ作成し、ファイル名とクエリ文字列は非常に小さいためです。最初のパスでコードを超最適化しようとするよりも、少し非効率的なプログラムを使用する方が良いでしょう。 Rustに慣れるにつれて、最も効率的なソリューションから始めるのが簡単になりますが、今のところ、 &lt;code&gt;clone&lt;/code&gt; を呼び出すことはまったく問題ありません。</target>
        </trans-unit>
        <trans-unit id="66fb5ab158cd4be714eaa0eeb00d2ccbb6eb7bd5" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s another advantage to using an enum rather than a struct: each variant can have different types and amounts of associated data. Version four type IP addresses will always have four numeric components that will have values between 0 and 255. If we wanted to store &lt;code&gt;V4&lt;/code&gt; addresses as four &lt;code&gt;u8&lt;/code&gt; values but still express &lt;code&gt;V6&lt;/code&gt; addresses as one &lt;code&gt;String&lt;/code&gt; value, we wouldn&amp;rsquo;t be able to with a struct. Enums handle this case with ease:</source>
          <target state="translated">構造体ではなく列挙型を使用することには、もう1つの利点があります。各バリアントには、関連するデータのタイプと量が異なる可能性があります。バージョン4種類のIPアドレスは、常に我々が保存したい場合は0〜255の値を持つことになります4つの数字のコンポーネントがあります &lt;code&gt;V4&lt;/code&gt; 4つのとしてアドレスを &lt;code&gt;u8&lt;/code&gt; 値が、それでも表現 &lt;code&gt;V6&lt;/code&gt; 一つとして、アドレス &lt;code&gt;String&lt;/code&gt; 値を、我々はAとすることはできません構造。列挙型はこのケースを簡単に処理します：</target>
        </trans-unit>
        <trans-unit id="a401bf0a884425f212fc0c2849df8bdacf839a70" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s another solution to the problem of bringing two types of the same name into the same scope with &lt;code&gt;use&lt;/code&gt;: after the path, we can specify &lt;code&gt;as&lt;/code&gt; and a new local name, or alias, for the type. Listing 7-16 shows another way to write the code in Listing 7-15 by renaming one of the two &lt;code&gt;Result&lt;/code&gt; types using &lt;code&gt;as&lt;/code&gt;.</source>
          <target state="translated">同じ名前の2つのタイプを同じスコープに &lt;code&gt;use&lt;/code&gt; して問題を解決する別の方法があります。パスの後に、タイプ &lt;code&gt;as&lt;/code&gt; 新しいローカル名またはエイリアスを指定できます。リスト7-16は、 &lt;code&gt;as&lt;/code&gt; を使用して2つの &lt;code&gt;Result&lt;/code&gt; タイプの1つを名前変更することにより、リスト7-15のコードを記述する別の方法を示しています。</target>
        </trans-unit>
        <trans-unit id="e2494d175673de3a22a42c411f830ff3208f6ec7" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s another wrinkle we haven&amp;rsquo;t talked about yet. This code using integers &amp;ndash; part of which was shown in Listing 4-2 &amp;ndash; works and is valid:</source>
          <target state="translated">まだ話していない別のしわがあります。整数を使用するこのコード（リスト4-2にその一部を示しています）は機能し、有効です。</target>
        </trans-unit>
        <trans-unit id="04733e00c121b49528c905aab2fa6e90d06dc6c3" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s another wrinkle we haven&amp;rsquo;t talked about yet. This code using integers, part of which was shown in Listing 4-2, works and is valid:</source>
          <target state="translated">まだ話していない別のしわがあります。整数を使用するこのコードは、コードリスト4-2に示すコードの一部で機能し、有効です。</target>
        </trans-unit>
        <trans-unit id="6058c5e16c87f1a91c60dc38f9f510ce010e9805" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s debate within the testing community about whether or not private functions should be tested directly, and other languages make it difficult or impossible to test private functions. Regardless of which testing ideology you adhere to, Rust&amp;rsquo;s privacy rules do allow you to test private functions. Consider the code in Listing 11-12 with the private function &lt;code&gt;internal_adder&lt;/code&gt;.</source>
          <target state="translated">プライベート関数を直接テストする必要があるかどうかについては、テストコミュニティ内で議論があり、他の言語ではプライベート関数のテストが困難または不可能になっています。Rustのプライバシールールでは、どのテストイデオロギーを遵守するかに関係なく、プライベート関数をテストできます。プライベート関数 &lt;code&gt;internal_adder&lt;/code&gt; を含むリスト11-12のコードを考えます。</target>
        </trans-unit>
        <trans-unit id="908f1205edb5e08b15769591fe9ecf304d371a0b" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s no mechanism being used to synchronize access to the data.</source>
          <target state="translated">データへのアクセスを同期するために使用されているメカニズムはありません。</target>
        </trans-unit>
        <trans-unit id="8e1fa626ffc94c26aaee1b60bc06a3539eef3bfd" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s no reason to separate these methods into multiple &lt;code&gt;impl&lt;/code&gt; blocks here, but this is valid syntax. We&amp;rsquo;ll see a case in which multiple &lt;code&gt;impl&lt;/code&gt; blocks are useful in Chapter 10, where we discuss generic types and traits.</source>
          <target state="translated">ここでこれらのメソッドを複数の &lt;code&gt;impl&lt;/code&gt; ブロックに分離する理由はありませんが、これは有効な構文です。第10章では、複数の &lt;code&gt;impl&lt;/code&gt; ブロックが役立つケースについて説明し、ジェネリック型と特性について説明します。</target>
        </trans-unit>
        <trans-unit id="68d4631903746cfba7c6e6864ab36c77a56f918c" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s no strong reason behind this idiom: it&amp;rsquo;s just the convention that has emerged, and folks have gotten used to reading and writing Rust code this way.</source>
          <target state="translated">このイディオムの背後に強い理由はありません。それは、出現した慣習に過ぎず、人々はこの方法でRustコードを読み書きすることに慣れています。</target>
        </trans-unit>
        <trans-unit id="c6cc13f913f5af22a31d9a866ef0ab4e915bc64e" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s not a good way to encode this information in the types you use.</source>
          <target state="translated">この情報を使用するタイプでエンコードする良い方法はありません。</target>
        </trans-unit>
        <trans-unit id="42ede15289d883de11e0a80cc68d82337478321c" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s one more catch with this release model: unstable features. Rust uses a technique called &amp;ldquo;feature flags&amp;rdquo; to determine what features are enabled in a given release. If a new feature is under active development, it lands on &lt;code&gt;master&lt;/code&gt;, and therefore, in nightly, but behind a &lt;em&gt;feature flag&lt;/em&gt;. If you, as a user, wish to try out the work-in-progress feature, you can, but you must be using a nightly release of Rust and annotate your source code with the appropriate flag to opt in.</source>
          <target state="translated">このリリースモデルにはもう1つ問題点があります。それは、不安定な機能です。Rustは、「機能フラグ」と呼ばれる手法を使用して、特定のリリースで有効になっている機能を判別します。新しい機能が活発に開発されている場合、それは &lt;code&gt;master&lt;/code&gt; に到達します。したがって、毎晩、&lt;em&gt;機能フラグの&lt;/em&gt;後ろに表示され&lt;em&gt;ます&lt;/em&gt;。ユーザーとして、進行中の機能を試してみたい場合は可能ですが、Rustのナイトリーリリースを使用して、オプトインする適切なフラグでソースコードに注釈を付ける必要があります。</target>
        </trans-unit>
        <trans-unit id="daaeaab720a0d66e562ebf5f2bea02ac0a5abbb2" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s one more situation involving &lt;code&gt;pub&lt;/code&gt; that we haven&amp;rsquo;t covered, and that is our last module system feature: the &lt;code&gt;use&lt;/code&gt; keyword. We&amp;rsquo;ll cover &lt;code&gt;use&lt;/code&gt; by itself first, and then we&amp;rsquo;ll show how to combine &lt;code&gt;pub&lt;/code&gt; and &lt;code&gt;use&lt;/code&gt;.</source>
          <target state="translated">まだカバーしていない &lt;code&gt;pub&lt;/code&gt; に関連するもう1つの状況があります。それが最後のモジュールシステム機能です： &lt;code&gt;use&lt;/code&gt; キーワード。私たちは、取り上げる &lt;code&gt;use&lt;/code&gt; 最初にそれ自体で、その後、私たちはどのように組み合わせるかを示します &lt;code&gt;pub&lt;/code&gt; して &lt;code&gt;use&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5e8c77371d51b56070c8afcedaaaf9336a342d93" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s one other aspect of &lt;code&gt;match&lt;/code&gt; we need to discuss. Consider this version of our &lt;code&gt;plus_one&lt;/code&gt; function that has a bug and won&amp;rsquo;t compile:</source>
          <target state="translated">私たちが議論する必要がある &lt;code&gt;match&lt;/code&gt; のもう一つの側面があります。バグがあり、コンパイルされないこのバージョンの &lt;code&gt;plus_one&lt;/code&gt; 関数を考えてみます。</target>
        </trans-unit>
        <trans-unit id="3cab02a3373b42bd604f431d95c5d649fedd71e0" translate="yes" xml:space="preserve">
          <source>There's a trait in the standard library for converting something into an iterator: &lt;a href=&quot;trait.intoiterator&quot;&gt;&lt;code&gt;IntoIterator&lt;/code&gt;&lt;/a&gt;. This trait has one method, &lt;a href=&quot;trait.intoiterator#tymethod.into_iter&quot;&gt;&lt;code&gt;into_iter&lt;/code&gt;&lt;/a&gt;, which converts the thing implementing &lt;a href=&quot;trait.intoiterator&quot;&gt;&lt;code&gt;IntoIterator&lt;/code&gt;&lt;/a&gt; into an iterator. Let's take a look at that &lt;code&gt;for&lt;/code&gt; loop again, and what the compiler converts it into:</source>
          <target state="translated">標準ライブラリには、何かをイテレータに変換するための特性&lt;a href=&quot;trait.intoiterator&quot;&gt; &lt;code&gt;IntoIterator&lt;/code&gt; があり&lt;/a&gt;ます。このトレイトには、&lt;a href=&quot;trait.intoiterator#tymethod.into_iter&quot;&gt; &lt;code&gt;into_iter&lt;/code&gt; &lt;/a&gt;実装するものをイテレータに変換するメソッド&lt;a href=&quot;trait.intoiterator&quot;&gt; &lt;code&gt;IntoIterator&lt;/code&gt; &lt;/a&gt;があります。その &lt;code&gt;for&lt;/code&gt; ループをもう一度見てみましょう。コンパイラーはこれを次のように変換します。</target>
        </trans-unit>
        <trans-unit id="126dd99b7c8920c551aa5435d3f5f50326fcb2aa" translate="yes" xml:space="preserve">
          <source>There's no easy fix for this, generally code will need to be refactored so that you no longer need to derive from &lt;code&gt;Super&amp;lt;Self&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">これを簡単に修正する方法はありません。通常、コードをリファクタリングして、 &lt;code&gt;Super&amp;lt;Self&amp;gt;&lt;/code&gt; から派生する必要がないようにする必要があります。</target>
        </trans-unit>
        <trans-unit id="488dc2b946582ce5502bb699e0ad78fcce8b394c" translate="yes" xml:space="preserve">
          <source>There's one more subtle bit here: the standard library contains an interesting implementation of &lt;a href=&quot;trait.intoiterator&quot;&gt;&lt;code&gt;IntoIterator&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">ここにもう1つ微妙な点があります。標準ライブラリには、&lt;a href=&quot;trait.intoiterator&quot;&gt; &lt;code&gt;IntoIterator&lt;/code&gt; の&lt;/a&gt;興味深い実装が含まれています。</target>
        </trans-unit>
        <trans-unit id="fd800f0b62b0c62a6a6fb9b356e68d3a2d4685be" translate="yes" xml:space="preserve">
          <source>There, the where clause &lt;code&gt;T: 'a&lt;/code&gt; that appears on the impl is not known to be satisfied on the struct. To make this example compile, you have to add a where-clause like &lt;code&gt;T: 'a&lt;/code&gt; to the struct definition:</source>
          <target state="translated">そこでは、implに現れるwhere句 &lt;code&gt;T: 'a&lt;/code&gt; は、構造体で満たされていることがわかりません。この例をコンパイルするには、 &lt;code&gt;T: 'a&lt;/code&gt; ようなwhere句を構造体定義に追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="943a55d68bc8d1a8af15546966743386da3f91a8" translate="yes" xml:space="preserve">
          <source>Therefore, Rust&amp;rsquo;s type system and trait bounds ensure that you can never accidentally send an &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; value across threads unsafely. When we tried to do this in Listing 16-14, we got the error &lt;code&gt;the trait Send is not implemented for Rc&amp;lt;Mutex&amp;lt;i32&amp;gt;&amp;gt;&lt;/code&gt;. When we switched to &lt;code&gt;Arc&amp;lt;T&amp;gt;&lt;/code&gt;, which is &lt;code&gt;Send&lt;/code&gt;, the code compiled.</source>
          <target state="translated">したがって、Rustの型システムとトレイトの境界により、誤って &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; 値をスレッド間で安全に送信できないことがなくなります。リスト16-14でこれを行おうとすると &lt;code&gt;the trait Send is not implemented for Rc&amp;lt;Mutex&amp;lt;i32&amp;gt;&amp;gt;&lt;/code&gt; というエラーが発生しました。 &lt;code&gt;Arc&amp;lt;T&amp;gt;&lt;/code&gt; （ &lt;code&gt;Send&lt;/code&gt; ）に切り替えると、コードがコンパイルされました。</target>
        </trans-unit>
        <trans-unit id="92887ab1d8d0b7fee43ce74855c566c18dd9ff66" translate="yes" xml:space="preserve">
          <source>Therefore, pinning also comes with a &lt;a href=&quot;../ops/trait.drop#tymethod.drop&quot;&gt;&lt;code&gt;drop&lt;/code&gt;&lt;/a&gt;-related guarantee.</source>
          <target state="translated">したがって、ピン留めには&lt;a href=&quot;../ops/trait.drop#tymethod.drop&quot;&gt; &lt;code&gt;drop&lt;/code&gt; &lt;/a&gt;関連の保証も付いています。</target>
        </trans-unit>
        <trans-unit id="a965d0af2f94e5f3318be18d630d6ce398f8ad8c" translate="yes" xml:space="preserve">
          <source>Therefore, pinning also comes with a &lt;code&gt;drop&lt;/code&gt;-related guarantee.</source>
          <target state="translated">したがって、ピン留めには &lt;code&gt;drop&lt;/code&gt; 関連の保証も付いています。</target>
        </trans-unit>
        <trans-unit id="0034e8adfe6fdcd359b83e7e3154391d1a05f64e" translate="yes" xml:space="preserve">
          <source>Therefore, we cannot rely on naive check for &lt;code&gt;StructuralPartialEq&lt;/code&gt; and mere &lt;code&gt;Eq&lt;/code&gt;.</source>
          <target state="translated">したがって、 &lt;code&gt;StructuralPartialEq&lt;/code&gt; と単なる &lt;code&gt;Eq&lt;/code&gt; の単純なチェックに依存することはできません。</target>
        </trans-unit>
        <trans-unit id="f3da5db36b6a5c8b63c646979b9f9638e2ffed72" translate="yes" xml:space="preserve">
          <source>These abstractions can be built out of lower-level primitives. For efficiency, the sync objects in the standard library are usually implemented with help from the operating system's kernel, which is able to reschedule the threads while they are blocked on acquiring a lock.</source>
          <target state="translated">これらの抽象化は、低レベルのプリミティブから構築することができます。効率化のために、標準ライブラリの同期オブジェクトは通常、オペレーティングシステムのカーネルの助けを借りて実装されています。</target>
        </trans-unit>
        <trans-unit id="0b4543381c3d34027ca13b9d929f743b5e4c9c39" translate="yes" xml:space="preserve">
          <source>These also point to memory owned by some other value. A mutable reference type is written &lt;code&gt;&amp;amp;mut type&lt;/code&gt; or &lt;code&gt;&amp;amp;'a mut type&lt;/code&gt;. A mutable reference (that hasn't been borrowed) is the only way to access the value it points to, so is not &lt;code&gt;Copy&lt;/code&gt;.</source>
          <target state="translated">これらは、他の値が所有するメモリも指します。可変参照型は &lt;code&gt;&amp;amp;mut type&lt;/code&gt; または &lt;code&gt;&amp;amp;'a mut type&lt;/code&gt; と記述されます。（借用されていない）可変参照は、それが指す値にアクセスする唯一の方法であるため、 &lt;code&gt;Copy&lt;/code&gt; ではありません。</target>
        </trans-unit>
        <trans-unit id="1edbd620f4ea3fb93fdd0d7dd71adad12120dfa7" translate="yes" xml:space="preserve">
          <source>These ampersands are &lt;em&gt;references&lt;/em&gt;, and they allow you to refer to some value without taking ownership of it. Figure 4-5 shows a diagram.</source>
          <target state="translated">これらのアンパサンドは&lt;em&gt;参照&lt;/em&gt;であり、それらを使用すると、所有権を取得することなく、ある値を参照できます。図4-5に図を示します。</target>
        </trans-unit>
        <trans-unit id="c26ef3d23f517e371ad3e5a198bcf65faf103392" translate="yes" xml:space="preserve">
          <source>These are all flags altering the behavior of the formatter.</source>
          <target state="translated">これらはすべてフォーマッタの動作を変更するフラグです。</target>
        </trans-unit>
        <trans-unit id="4fbf8436660d61da218272cb68549a2354d27ae0" translate="yes" xml:space="preserve">
          <source>These are equivalent to the following explicit lifetime annotations:</source>
          <target state="translated">これらは、以下の明示的なライフタイムアノテーションに相当します。</target>
        </trans-unit>
        <trans-unit id="3f42eae85e77f8aae9c5335f688c216fd7101df0" translate="yes" xml:space="preserve">
          <source>These are fairly high-level and quick break-downs of when each collection should be considered. Detailed discussions of strengths and weaknesses of individual collections can be found on their own documentation pages.</source>
          <target state="translated">これらは、各コレクションがいつ検討されるべきかについて、かなりハイレベルで簡単に説明したものです。個々のコレクションの長所と短所についての詳細な議論は、それぞれの文書のページに記載されている。</target>
        </trans-unit>
        <trans-unit id="f5b38a7809c6c63bf242f85f557b82e6e93c16bc" translate="yes" xml:space="preserve">
          <source>These are often used in combination with &lt;a href=&quot;external-blocks&quot;&gt;external block&lt;/a&gt; items which provide function &lt;em&gt;declarations&lt;/em&gt; that can be used to call functions without providing their &lt;em&gt;definition&lt;/em&gt;:</source>
          <target state="translated">これらは、&lt;em&gt;定義&lt;/em&gt;を提供せずに関数を呼び出すために使用できる関数&lt;em&gt;宣言&lt;/em&gt;を提供する&lt;a href=&quot;external-blocks&quot;&gt;外部ブロック&lt;/a&gt;項目と組み合わせて使用​​されることがよくあります。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="69b2114a065741874c57309ba27c70784c7ddedd" translate="yes" xml:space="preserve">
          <source>These are the last two unary operators. This table summarizes the behavior of them on primitive types and which traits are used to overload these operators for other types. Remember that signed integers are always represented using two's complement. The operands of all of these operators are evaluated in &lt;a href=&quot;../expressions#place-expressions-and-value-expressions&quot;&gt;value expression context&lt;/a&gt; so are moved or copied.</source>
          <target state="translated">これらは最後の2つの単項演算子です。この表は、プリミティブ型でのそれらの動作と、他の型のこれらの演算子をオーバーロードするために使用される特性をまとめたものです。符号付き整数は常に2の補数を使用して表されることに注意してください。これらすべての演算子のオペランドは、&lt;a href=&quot;../expressions#place-expressions-and-value-expressions&quot;&gt;値式のコンテキストで&lt;/a&gt;評価されるため、移動またはコピーされます。</target>
        </trans-unit>
        <trans-unit id="25cb76396a6daa0dab5184b03f4b6697d1acd40a" translate="yes" xml:space="preserve">
          <source>These attributes are meant to only be used by the standard library and are rejected in your own crates.</source>
          <target state="translated">これらの属性は標準ライブラリでのみ使用されることを意図しており、独自のクレートでは拒否されます。</target>
        </trans-unit>
        <trans-unit id="b6db5a380dbbbf8a2cd7b3c9d1a9637a5d119ab4" translate="yes" xml:space="preserve">
          <source>These attributes do not work on typedefs, since typedefs are just aliases.</source>
          <target state="translated">これらの属性はtypedefに対しては機能しません。</target>
        </trans-unit>
        <trans-unit id="45e9c8e478d7d23050c1bb7760888996d75acd57" translate="yes" xml:space="preserve">
          <source>These axioms, along with careful use of &lt;a href=&quot;../primitive.pointer#method.offset&quot;&gt;&lt;code&gt;offset&lt;/code&gt;&lt;/a&gt; for pointer arithmetic, are enough to correctly implement many useful things in unsafe code. Stronger guarantees will be provided eventually, as the &lt;a href=&quot;https://doc.rust-lang.org/nomicon/aliasing.html&quot;&gt;aliasing&lt;/a&gt; rules are being determined. For more information, see the &lt;a href=&quot;../../book/ch19-01-unsafe-rust#dereferencing-a-raw-pointer&quot;&gt;book&lt;/a&gt; as well as the section in the reference devoted to &lt;a href=&quot;../../reference/behavior-considered-undefined&quot;&gt;undefined behavior&lt;/a&gt;.</source>
          <target state="translated">これらの公理は、ポインター計算に&lt;a href=&quot;../primitive.pointer#method.offset&quot;&gt; &lt;code&gt;offset&lt;/code&gt; &lt;/a&gt;を注意深く使用することで、安全でないコードで多くの有用なものを正しく実装するのに十分です。&lt;a href=&quot;https://doc.rust-lang.org/nomicon/aliasing.html&quot;&gt;エイリアシング&lt;/a&gt;規則が決定されているため、最終的にはより強力な保証が提供されます。詳細については、&lt;a href=&quot;../../book/ch19-01-unsafe-rust#dereferencing-a-raw-pointer&quot;&gt;本&lt;/a&gt;と、&lt;a href=&quot;../../reference/behavior-considered-undefined&quot;&gt;未定義の動作&lt;/a&gt;に関するリファレンスのセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="7913b3c72a22fc6b243e0539a47297d89428aedf" translate="yes" xml:space="preserve">
          <source>These can all be interpreted as flags for a particular formatter.</source>
          <target state="translated">これらはすべて、特定のフォーマッタのフラグとして解釈できます。</target>
        </trans-unit>
        <trans-unit id="0e39a0bd16ba8ecfd732cbb117c3248fda60a735" translate="yes" xml:space="preserve">
          <source>These can be fixed by declaring lifetime parameters:</source>
          <target state="translated">これらはライフタイムパラメータを宣言することで固定することができます。</target>
        </trans-unit>
        <trans-unit id="d454f3116d0aed2fb7a537cae1b229f52b361113" translate="yes" xml:space="preserve">
          <source>These channels come in two flavors:</source>
          <target state="translated">これらのチャンネルには2つのフレーバーがあります。</target>
        </trans-unit>
        <trans-unit id="c31b94922e5b65f02fef2f529b0b7e4859486143" translate="yes" xml:space="preserve">
          <source>These components describe the shape of the data we&amp;rsquo;re working with, which we then match against values to determine whether our program has the correct data to continue running a particular piece of code.</source>
          <target state="translated">これらのコンポーネントは、操作しているデータの形状を記述し、値と照合して、プログラムに特定のコードの実行を継続するための正しいデータがあるかどうかを判断します。</target>
        </trans-unit>
        <trans-unit id="01d073371ba3433dace28c44e03a57f2a2d8dbcd" translate="yes" xml:space="preserve">
          <source>These default object lifetime bounds are used instead of the lifetime parameter elision rules defined above when the lifetime bound is omitted entirely. If &lt;code&gt;'_&lt;/code&gt; is used as the lifetime bound then the bound follows the usual elision rules.</source>
          <target state="translated">これらのデフォルトのオブジェクトライフタイムバウンドは、ライフタイムバウンドが完全に省略されている場合に、上記で定義されたライフタイムパラメータ省略ルールの代わりに使用されます。場合 &lt;code&gt;'_&lt;/code&gt; バインド寿命として使用され、その後バウンドは、通常のエリジオンの規則に従います。</target>
        </trans-unit>
        <trans-unit id="3cb556ed4e688a43a755806e0180a1ae20f4245d" translate="yes" xml:space="preserve">
          <source>These enumerations can be cast to integer types with the &lt;code&gt;as&lt;/code&gt; operator by a &lt;a href=&quot;../expressions/operator-expr#semantics&quot;&gt;numeric cast&lt;/a&gt;. The enumeration can optionally specify which integer each discriminant gets by following the variant name with &lt;code&gt;=&lt;/code&gt; followed by a &lt;a href=&quot;../const_eval#constant-expressions&quot;&gt;constant expression&lt;/a&gt;. If the first variant in the declaration is unspecified, then it is set to zero. For every other unspecified discriminant, it is set to one higher than the previous variant in the declaration.</source>
          <target state="translated">これらの列挙は、&lt;a href=&quot;../expressions/operator-expr#semantics&quot;&gt;数値キャスト&lt;/a&gt;によって &lt;code&gt;as&lt;/code&gt; 演算子を使用して整数型にキャストできます。列挙型では、バリアント名の後に &lt;code&gt;=&lt;/code&gt; を付けて&lt;a href=&quot;../const_eval#constant-expressions&quot;&gt;定数式を続ける&lt;/a&gt;ことで、各判別子が取得する整数をオプションで指定できます。宣言の最初のバリアントが指定されていない場合は、ゼロに設定されます。他のすべての指定されていない判別式では、宣言の前のバリアントよりも1つ高く設定されます。</target>
        </trans-unit>
        <trans-unit id="56f44a74054755cd230d668bfd5dc0a8f5aa2ac0" translate="yes" xml:space="preserve">
          <source>These keywords aren't used yet, but they are reserved for future use. They have the same restrictions as strict keywords. The reasoning behind this is to make current programs forward compatible with future versions of Rust by forbidding them to use these keywords.</source>
          <target state="translated">これらのキーワードはまだ使用されていませんが、将来の使用のために予約されています。厳密なキーワードと同じ制限があります。この背景にある理由は、これらのキーワードを使用することを禁止することで、現在のプログラムを将来のバージョンの Rust と互換性のあるものにするためです。</target>
        </trans-unit>
        <trans-unit id="f2eab53396d35c8dd4df2e3ab58dfee415a7015e" translate="yes" xml:space="preserve">
          <source>These keywords can only be used in their correct contexts. They cannot be used as the names of:</source>
          <target state="translated">これらのキーワードは、正しい文脈でのみ使用できます。名前としては使用できません。</target>
        </trans-unit>
        <trans-unit id="aec421e6db4795c07bbf5e8ae6411e119af0b089" translate="yes" xml:space="preserve">
          <source>These keywords have special meaning only in certain contexts. For example, it is possible to declare a variable or method with the name &lt;code&gt;union&lt;/code&gt;.</source>
          <target state="translated">これらのキーワードは、特定のコンテキストでのみ特別な意味を持ちます。たとえば、 &lt;code&gt;union&lt;/code&gt; という名前の変数またはメソッドを宣言することができます。</target>
        </trans-unit>
        <trans-unit id="24355b40ed9274fe2bce5ed7512a65c55ffdfb11" translate="yes" xml:space="preserve">
          <source>These lines define a function in Rust. The &lt;code&gt;main&lt;/code&gt; function is special: it is always the first code that runs in every executable Rust program. The first line declares a function named &lt;code&gt;main&lt;/code&gt; that has no parameters and returns nothing. If there were parameters, they would go inside the parentheses, &lt;code&gt;()&lt;/code&gt;.</source>
          <target state="translated">これらの行は、Rustの関数を定義しています。 &lt;code&gt;main&lt;/code&gt; 機能は、特別である：それは常に最初のコードであること、すべての実行可能な錆のプログラムで実行されます。1行目は、パラメーターがなく何も返さない &lt;code&gt;main&lt;/code&gt; という名前の関数を宣言しています。パラメータがある場合、それらは括弧 &lt;code&gt;()&lt;/code&gt; の内側に入ります。</target>
        </trans-unit>
        <trans-unit id="78ee21b3b578a8828b900a4d7bb5e92af7fdfb9f" translate="yes" xml:space="preserve">
          <source>These lines show Cargo only updates the build with your tiny change to the &lt;em&gt;src/main.rs&lt;/em&gt; file. Your dependencies haven&amp;rsquo;t changed, so Cargo knows it can reuse what it has already downloaded and compiled for those. It just rebuilds your part of the code.</source>
          <target state="translated">これらの行は、Cargoが&lt;em&gt;src / main.rs&lt;/em&gt;ファイルにわずかな変更を加えただけでビルドを更新することを&lt;em&gt;示してい&lt;/em&gt;ます。依存関係は変更されていないため、Cargoはすでにダウンロードしてコンパイルしたものを再利用できることを認識しています。コードの一部を再構築するだけです。</target>
        </trans-unit>
        <trans-unit id="ba54db094123009e0eb01fa8adef8c82df9419e8" translate="yes" xml:space="preserve">
          <source>These macros are defined by a &lt;a href=&quot;visibility-and-privacy&quot;&gt;public&lt;/a&gt;&lt;a href=&quot;items/functions&quot;&gt;function&lt;/a&gt; with the &lt;code&gt;proc_macro&lt;/code&gt;&lt;a href=&quot;attributes&quot;&gt;attribute&lt;/a&gt; and a signature of &lt;code&gt;(TokenStream) -&amp;gt; TokenStream&lt;/code&gt;. The input &lt;a href=&quot;https://doc.rust-lang.org/proc_macro/struct.TokenStream.html&quot;&gt;&lt;code&gt;TokenStream&lt;/code&gt;&lt;/a&gt; is what is inside the delimiters of the macro invocation and the output &lt;a href=&quot;https://doc.rust-lang.org/proc_macro/struct.TokenStream.html&quot;&gt;&lt;code&gt;TokenStream&lt;/code&gt;&lt;/a&gt; replaces the entire macro invocation.</source>
          <target state="translated">これらのマクロは、 &lt;code&gt;proc_macro&lt;/code&gt; &lt;a href=&quot;attributes&quot;&gt;属性&lt;/a&gt;と &lt;code&gt;(TokenStream) -&amp;gt; TokenStream&lt;/code&gt; シグネチャを持つ&lt;a href=&quot;visibility-and-privacy&quot;&gt;パブリック&lt;/a&gt;&lt;a href=&quot;items/functions&quot;&gt;関数&lt;/a&gt;によって定義されます。入力&lt;a href=&quot;https://doc.rust-lang.org/proc_macro/struct.TokenStream.html&quot;&gt; &lt;code&gt;TokenStream&lt;/code&gt; &lt;/a&gt;はマクロ呼び出しの区切り文字の内側にあり、出力&lt;a href=&quot;https://doc.rust-lang.org/proc_macro/struct.TokenStream.html&quot;&gt; &lt;code&gt;TokenStream&lt;/code&gt; &lt;/a&gt;はマクロ呼び出し全体を置き換えます。</target>
        </trans-unit>
        <trans-unit id="c77584f3dda90ac8527f5ef32d9ad1f6daeca4c8" translate="yes" xml:space="preserve">
          <source>These macros are defined by a &lt;a href=&quot;visibility-and-privacy&quot;&gt;public&lt;/a&gt;&lt;a href=&quot;items/functions&quot;&gt;function&lt;/a&gt; with the &lt;code&gt;proc_macro&lt;/code&gt;&lt;a href=&quot;attributes&quot;&gt;attribute&lt;/a&gt; and a signature of &lt;code&gt;(TokenStream) -&amp;gt; TokenStream&lt;/code&gt;. The input &lt;a href=&quot;https://doc.rust-lang.org/proc_macro/struct.TokenStream.html&quot;&gt;&lt;code&gt;TokenStream&lt;/code&gt;&lt;/a&gt; is what is inside the delimiters of the macro invocation and the output &lt;a href=&quot;https://doc.rust-lang.org/proc_macro/struct.TokenStream.html&quot;&gt;&lt;code&gt;TokenStream&lt;/code&gt;&lt;/a&gt; replaces the entire macro invocation. It may contain an arbitrary number of &lt;a href=&quot;items&quot;&gt;items&lt;/a&gt;. These macros cannot expand to syntax that defines new &lt;code&gt;macro_rules&lt;/code&gt; style macros.</source>
          <target state="translated">これらのマクロは、 &lt;code&gt;proc_macro&lt;/code&gt; &lt;a href=&quot;attributes&quot;&gt;属性&lt;/a&gt;と &lt;code&gt;(TokenStream) -&amp;gt; TokenStream&lt;/code&gt; シグネチャを持つ&lt;a href=&quot;visibility-and-privacy&quot;&gt;public &lt;/a&gt;&lt;a href=&quot;items/functions&quot;&gt;関数&lt;/a&gt;によって定義されます。入力&lt;a href=&quot;https://doc.rust-lang.org/proc_macro/struct.TokenStream.html&quot;&gt; &lt;code&gt;TokenStream&lt;/code&gt; &lt;/a&gt;はマクロ呼び出しの区切り文字の内側にあり、出力&lt;a href=&quot;https://doc.rust-lang.org/proc_macro/struct.TokenStream.html&quot;&gt; &lt;code&gt;TokenStream&lt;/code&gt; &lt;/a&gt;はマクロ呼び出し全体を置き換えます。任意の数の&lt;a href=&quot;items&quot;&gt;アイテムを&lt;/a&gt;含めることができます。これらのマクロは、新しい &lt;code&gt;macro_rules&lt;/code&gt; スタイルのマクロを定義する構文に拡張できません。</target>
        </trans-unit>
        <trans-unit id="254739acb173823a2863a1c41d3ebb09cfa13aeb" translate="yes" xml:space="preserve">
          <source>These macros are only invokable in &lt;a href=&quot;items/modules&quot;&gt;modules&lt;/a&gt;. They cannot even be invoked to create &lt;a href=&quot;statements#item-declarations&quot;&gt;item declaration statements&lt;/a&gt;. Furthermore, they must either be invoked with curly braces and no semicolon or a different delimiter followed by a semicolon. For example, &lt;code&gt;make_answer&lt;/code&gt; from the previous example can be invoked as &lt;code&gt;make_answer!{}&lt;/code&gt;, &lt;code&gt;make_answer!();&lt;/code&gt; or &lt;code&gt;make_answer![];&lt;/code&gt;.</source>
          <target state="translated">これらのマクロは&lt;a href=&quot;items/modules&quot;&gt;モジュールで&lt;/a&gt;のみ呼び出すことができます。&lt;a href=&quot;statements#item-declarations&quot;&gt;アイテム宣言ステートメント&lt;/a&gt;を作成するために呼び出すこともできません。さらに、それらはセミコロンなしの中括弧で呼び出すか、セミコロンが後に続く別の区切り文字で呼び出す必要があります。たとえば、前の例の &lt;code&gt;make_answer&lt;/code&gt; は、 &lt;code&gt;make_answer!{}&lt;/code&gt; 、 &lt;code&gt;make_answer!();&lt;/code&gt; として呼び出すことができます。または &lt;code&gt;make_answer![];&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5391198458bfd8d81a447bc30f66734e6f03394d" translate="yes" xml:space="preserve">
          <source>These markers can be combined, so &lt;code&gt;unsafe extern &quot;stdcall&quot; fn()&lt;/code&gt; is a valid type.</source>
          <target state="translated">これらのマーカーは組み合わせることができるため、 &lt;code&gt;unsafe extern &quot;stdcall&quot; fn()&lt;/code&gt; は有効なタイプです。</target>
        </trans-unit>
        <trans-unit id="8c3ea3ec32e230deeef1943701b442105e65b661" translate="yes" xml:space="preserve">
          <source>These operators cannot be overloaded.</source>
          <target state="translated">これらの演算子に負荷をかけることはできません。</target>
        </trans-unit>
        <trans-unit id="12f02bfbd76d4dd6ccf6a1d0f95634f64537447a" translate="yes" xml:space="preserve">
          <source>These point to memory &lt;em&gt;owned by some other value&lt;/em&gt;. When a shared reference to a value is created it prevents direct mutation of the value. &lt;a href=&quot;../interior-mutability&quot;&gt;Interior mutability&lt;/a&gt; provides an exception for this in certain circumstances. As the name suggests, any number of shared references to a value may exist. A shared reference type is written &lt;code&gt;&amp;amp;type&lt;/code&gt;, or &lt;code&gt;&amp;amp;'a type&lt;/code&gt; when you need to specify an explicit lifetime. Copying a reference is a &quot;shallow&quot; operation: it involves only copying the pointer itself, that is, pointers are &lt;code&gt;Copy&lt;/code&gt;. Releasing a reference has no effect on the value it points to, but referencing of a &lt;a href=&quot;../expressions#temporaries&quot;&gt;temporary value&lt;/a&gt; will keep it alive during the scope of the reference itself.</source>
          <target state="translated">これらは&lt;em&gt;、他の値が所有&lt;/em&gt;するメモリを指し&lt;em&gt;ます&lt;/em&gt;。値への共有参照が作成されると、値の直接の変更が防止されます。&lt;a href=&quot;../interior-mutability&quot;&gt;内部の可変性&lt;/a&gt;は、特定の状況でこれに対する例外を提供します。名前が示すように、値への共有参照はいくつでも存在する可能性があります。共有参照型は、明示的な有効期間を指定する必要がある場合は、 &lt;code&gt;&amp;amp;type&lt;/code&gt; または &lt;code&gt;&amp;amp;'a type&lt;/code&gt; と記述されます。参照のコピーは「浅い」操作です。これには、ポインター自体のコピーのみが含まれます。つまり、ポインターは &lt;code&gt;Copy&lt;/code&gt; です。参照を解放しても、それが指す値には影響しませんが、&lt;a href=&quot;../expressions#temporaries&quot;&gt;一時的な値&lt;/a&gt;を参照すると、参照自体のスコープ内で参照が存続します。</target>
        </trans-unit>
        <trans-unit id="3fc236a778b843e2aeed416fa4b2cc9e1a08823c" translate="yes" xml:space="preserve">
          <source>These point to memory &lt;em&gt;owned by some other value&lt;/em&gt;. When a shared reference to a value is created it prevents direct mutation of the value. &lt;a href=&quot;../interior-mutability&quot;&gt;Interior mutability&lt;/a&gt; provides an exception for this in certain circumstances. As the name suggests, any number of shared references to a value may exist. A shared reference type is written &lt;code&gt;&amp;amp;type&lt;/code&gt;, or &lt;code&gt;&amp;amp;'a type&lt;/code&gt; when you need to specify an explicit lifetime. Copying a reference is a &quot;shallow&quot; operation: it involves only copying the pointer itself, that is, pointers are &lt;code&gt;Copy&lt;/code&gt;. Releasing a reference has no effect on the value it points to, but referencing of a &lt;a href=&quot;../expressions#temporary-lifetimes&quot;&gt;temporary value&lt;/a&gt; will keep it alive during the scope of the reference itself.</source>
          <target state="translated">これらは&lt;em&gt;、他の値が所有&lt;/em&gt;するメモリを指し&lt;em&gt;ます&lt;/em&gt;。値への共有参照が作成されると、値の直接的な変更が防止されます。&lt;a href=&quot;../interior-mutability&quot;&gt;内部の可変性&lt;/a&gt;は、特定の状況でこれに対する例外を提供します。名前が示すように、値への共有参照はいくつでも存在できます。共有参照型は &lt;code&gt;&amp;amp;type&lt;/code&gt; 、または明示的な存続期間を指定する必要がある場合は &lt;code&gt;&amp;amp;'a type&lt;/code&gt; と記述されます。参照のコピーは「浅い」操作です。これには、ポインタ自体のコピーのみが含まれます。つまり、ポインタは &lt;code&gt;Copy&lt;/code&gt; です。参照を解放しても、参照先の値には影響しませんが、&lt;a href=&quot;../expressions#temporary-lifetimes&quot;&gt;一時的な値&lt;/a&gt;を参照すると、参照自体のスコープ内でその値が維持されます。</target>
        </trans-unit>
        <trans-unit id="e5e8141a80455494c8061b88eb7d52c5630351cf" translate="yes" xml:space="preserve">
          <source>These profile names might be familiar from the output of your builds:</source>
          <target state="translated">これらのプロファイル名は、あなたのビルドの出力で見覚えがあるかもしれません。</target>
        </trans-unit>
        <trans-unit id="1ad28c50cb4ab16e536724b4f61aca4d7477f454" translate="yes" xml:space="preserve">
          <source>These safety checks can be relaxed for a section of the code by wrapping the unsafe instructions with an &lt;code&gt;unsafe&lt;/code&gt; block. For instance:</source>
          <target state="translated">これらの安全性チェックは、安全でない命令を &lt;code&gt;unsafe&lt;/code&gt; ブロックでラップすることにより、コードのセクションに対して緩和できます。例えば：</target>
        </trans-unit>
        <trans-unit id="7c9be14b653ccb0fc4412a262bd32a7bb0662862" translate="yes" xml:space="preserve">
          <source>These traits, along with &lt;a href=&quot;../../../ffi/struct.osstring&quot;&gt;&lt;code&gt;OsString&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../../ffi/struct.osstr&quot;&gt;&lt;code&gt;OsStr&lt;/code&gt;&lt;/a&gt;, work in conjunction so that it is possible to &lt;strong&gt;round-trip&lt;/strong&gt; strings from Windows and back, with no loss of data, even if the strings are ill-formed UTF-16.</source>
          <target state="translated">これらの特性は&lt;a href=&quot;../../../ffi/struct.osstring&quot;&gt; &lt;code&gt;OsString&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;../../../ffi/struct.osstr&quot;&gt; &lt;code&gt;OsStr&lt;/code&gt; &lt;/a&gt;と連携して機能するため、文字列が不正な形式の UTF-16であっても、データを失うことなく、Windowsから文字列を&lt;strong&gt;往復&lt;/strong&gt;することができます。</target>
        </trans-unit>
        <trans-unit id="0cc726c49519e90aab3de25bfe65c626d294217a" translate="yes" xml:space="preserve">
          <source>These two cases are surprisingly powerful for creating module hierarchies exposing public APIs while hiding internal implementation details. To help explain, here's a few use cases and what they would entail:</source>
          <target state="translated">これら2つのケースは、内部実装の詳細を隠しながら公開APIを公開するモジュール階層を作成するために驚くほど強力です。説明を助けるために、ここではいくつかのユースケースとその内容を紹介します。</target>
        </trans-unit>
        <trans-unit id="8ac19292e9dd15d2d45f1f79b996a19bf6206f30" translate="yes" xml:space="preserve">
          <source>These two examples illustrate the problem:</source>
          <target state="translated">この2つの例は、問題を説明しています。</target>
        </trans-unit>
        <trans-unit id="dca9d4b1de7c5a2be4c4d5727e7917fd8aab654c" translate="yes" xml:space="preserve">
          <source>These two formatting traits have distinct purposes:</source>
          <target state="translated">この2つの書式設定の特徴は、それぞれ異なる目的を持っています。</target>
        </trans-unit>
        <trans-unit id="742fffc208f85aff3d0f6f3059eddfffa585c4ab" translate="yes" xml:space="preserve">
          <source>These two functions might be implemented in Rust as follows. Here, the &lt;code&gt;struct Foo*&lt;/code&gt; type from C is translated to &lt;code&gt;Box&amp;lt;Foo&amp;gt;&lt;/code&gt;, which captures the ownership constraints. Note also that the nullable argument to &lt;code&gt;foo_delete&lt;/code&gt; is represented in Rust as &lt;code&gt;Option&amp;lt;Box&amp;lt;Foo&amp;gt;&amp;gt;&lt;/code&gt;, since &lt;code&gt;Box&amp;lt;Foo&amp;gt;&lt;/code&gt; cannot be null.</source>
          <target state="translated">これらの2つの関数は、次のようにRustに実装される可能性があります。ここで、Cの &lt;code&gt;struct Foo*&lt;/code&gt; タイプは、所有権の制約をキャプチャする &lt;code&gt;Box&amp;lt;Foo&amp;gt;&lt;/code&gt; 変換されます。NULL可能引数ことにも注意してください &lt;code&gt;foo_delete&lt;/code&gt; が錆で表される &lt;code&gt;Option&amp;lt;Box&amp;lt;Foo&amp;gt;&amp;gt;&lt;/code&gt; 、以来 &lt;code&gt;Box&amp;lt;Foo&amp;gt;&lt;/code&gt; nullにすることはできません。</target>
        </trans-unit>
        <trans-unit id="6f982f08c4e46524b8318daa35d1f6508b56f9c5" translate="yes" xml:space="preserve">
          <source>These two terms are often used interchangeably, and what they are attempting to convey is the answer to the question &quot;Can this item be used at this location?&quot;</source>
          <target state="translated">この2つの用語はしばしば互換性を持って使用されますが、この2つの用語が伝えようとしているのは、&quot;このアイテムはこの場所で使用できますか?&quot;という質問に対する答えです。</target>
        </trans-unit>
        <trans-unit id="327e657798ef3a0fe98594c42be8998daff24b69" translate="yes" xml:space="preserve">
          <source>These types provide access to the underlying data through references to the type of that data. They are said to be &amp;lsquo;borrowed as&amp;rsquo; that type. For instance, a &lt;a href=&quot;../boxed/struct.box&quot;&gt;&lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; can be borrowed as &lt;code&gt;T&lt;/code&gt; while a &lt;a href=&quot;../string/struct.string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; can be borrowed as &lt;code&gt;str&lt;/code&gt;.</source>
          <target state="translated">これらのタイプは、そのデータのタイプへの参照を通じて、基になるデータへのアクセスを提供します。彼らはそのタイプを「借りた」と言われています。たとえば、&lt;a href=&quot;../boxed/struct.box&quot;&gt; &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; &lt;/a&gt;は &lt;code&gt;T&lt;/code&gt; として借用でき、&lt;a href=&quot;../string/struct.string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;は &lt;code&gt;str&lt;/code&gt; として借用できます。</target>
        </trans-unit>
        <trans-unit id="a24b18110788da060d08a87d6e0370b2f3f11b2d" translate="yes" xml:space="preserve">
          <source>These will always be ORed with &lt;code&gt;CREATE_UNICODE_ENVIRONMENT&lt;/code&gt;.</source>
          <target state="translated">これらは常に &lt;code&gt;CREATE_UNICODE_ENVIRONMENT&lt;/code&gt; とORされます。</target>
        </trans-unit>
        <trans-unit id="4d9283345c9b012905e98bac4c4ff6bf77874d49" translate="yes" xml:space="preserve">
          <source>They are &lt;code&gt;'static&lt;/code&gt; because they're stored directly in the final binary, and so will be valid for the &lt;code&gt;'static&lt;/code&gt; duration.</source>
          <target state="translated">彼らは &lt;code&gt;'static&lt;/code&gt; それらが最終バイナリに直接保存されていて、そのために有効になりますので、 &lt;code&gt;'static&lt;/code&gt; 期間。</target>
        </trans-unit>
        <trans-unit id="86b3fa967e9ddc952d15703cad09add6ed0fe12c" translate="yes" xml:space="preserve">
          <source>They are never allowed before:</source>
          <target state="translated">今までは絶対に許されなかった。</target>
        </trans-unit>
        <trans-unit id="a91c6bc4d714ec79e34b3b499dac181a1c8a5b61" translate="yes" xml:space="preserve">
          <source>They are written as &lt;code&gt;impl&lt;/code&gt; followed by a set of trait bounds.</source>
          <target state="translated">それらは、一連の特性境界が続く &lt;code&gt;impl&lt;/code&gt; として記述されます。</target>
        </trans-unit>
        <trans-unit id="d6f10b3f0570fbded7ab662d2bff2e38078266a6" translate="yes" xml:space="preserve">
          <source>They can be used as targets of transmutes in unsafe code for manipulating the raw representations directly.</source>
          <target state="translated">これらは、生の表現を直接操作するための安全でないコードのトランスマートのターゲットとして使用することができます。</target>
        </trans-unit>
        <trans-unit id="81857ae63bf1641ca750521f716199457233e82d" translate="yes" xml:space="preserve">
          <source>They never take parameters and never return types.</source>
          <target state="translated">それらは決してパラメータを取りませんし、型を返すこともありません。</target>
        </trans-unit>
        <trans-unit id="3eb09871747750e3ee06b75fa9a63f7cfbbd1d29" translate="yes" xml:space="preserve">
          <source>Thin pointers are &quot;simple&quot; pointers: they are purely a reference to a memory address.</source>
          <target state="translated">薄いポインタは「単純な」ポインタであり、純粋にメモリアドレスへの参照です。</target>
        </trans-unit>
        <trans-unit id="4d4a58caf1c3fd49804715c525d371aaf6cc87c9" translate="yes" xml:space="preserve">
          <source>Things can get a little tricky once you start intermingling the two types of positional specifiers. The &quot;next argument&quot; specifier can be thought of as an iterator over the argument. Each time a &quot;next argument&quot; specifier is seen, the iterator advances. This leads to behavior like this:</source>
          <target state="translated">2つのタイプの位置指定子を混同し始めると、少し厄介なことになります。次の引数」指定子は、引数の上のイテレータと考えることができます。次の引数」指定子を見るたびに、イテレータは進みます。これは次のような動作につながります。</target>
        </trans-unit>
        <trans-unit id="9af9ddcb5af382b3006b61fbf3f41b42b2b57797" translate="yes" xml:space="preserve">
          <source>Think of a &lt;code&gt;match&lt;/code&gt; expression as being like a coin-sorting machine: coins slide down a track with variously sized holes along it, and each coin falls through the first hole it encounters that it fits into. In the same way, values go through each pattern in a &lt;code&gt;match&lt;/code&gt;, and at the first pattern the value &amp;ldquo;fits,&amp;rdquo; the value falls into the associated code block to be used during execution.</source>
          <target state="translated">&lt;code&gt;match&lt;/code&gt; 式は、コイン分類機のようなものと考えてください。コインは、さまざまなサイズの穴に沿ってトラックを滑り落ち、各コインは、最初に遭遇した穴から落下します。同様に、値は &lt;code&gt;match&lt;/code&gt; の各パターンを通過し、最初のパターンで値が「適合」すると、値は実行中に使用される関連コードブロックに分類されます。</target>
        </trans-unit>
        <trans-unit id="1fdd8b4a97ce68f59e33b3f6b509748be1aa6f2f" translate="yes" xml:space="preserve">
          <source>Think of being seated at a restaurant. When you enter, you state the number of people in your group, and the staff finds an empty table that fits everyone and leads you there. If someone in your group comes late, they can ask where you&amp;rsquo;ve been seated to find you.</source>
          <target state="translated">レストランに座っていると考えてください。あなたが入るとき、あなたはあなたのグループの人々の数を述べます、そして、スタッフは皆に合う空のテーブルを見つけて、そこであなたを導きます。グループの誰かが遅れて来る場合、彼らはあなたを見つけるためにあなたが座っている場所を尋ねることができます。</target>
        </trans-unit>
        <trans-unit id="0748eff7f6f3425a675a552a35d84af9fe1be56c" translate="yes" xml:space="preserve">
          <source>Thinking about the relationships another way, a parent node should own its children: if a parent node is dropped, its child nodes should be dropped as well. However, a child should not own its parent: if we drop a child node, the parent should still exist. This is a case for weak references!</source>
          <target state="translated">親ノードが削除された場合、その子ノードも削除されなければなりません。しかし、子は親を所有してはいけません:子ノードを削除しても、親は存在するはずです。これは弱い参照の場合です。</target>
        </trans-unit>
        <trans-unit id="399cffdf26999603bae93a3715241addff90c419" translate="yes" xml:space="preserve">
          <source>Thinking in Terms of Lifetimes</source>
          <target state="translated">寿命で考える</target>
        </trans-unit>
        <trans-unit id="7407b5aadd0d88118f5b7bf8fb59e7e1d6d93882" translate="yes" xml:space="preserve">
          <source>Third, the &lt;code&gt;run&lt;/code&gt; function now returns an &lt;code&gt;Ok&lt;/code&gt; value in the success case. We&amp;rsquo;ve declared the &lt;code&gt;run&lt;/code&gt; function&amp;rsquo;s success type as &lt;code&gt;()&lt;/code&gt; in the signature, which means we need to wrap the unit type value in the &lt;code&gt;Ok&lt;/code&gt; value. This &lt;code&gt;Ok(())&lt;/code&gt; syntax might look a bit strange at first, but using &lt;code&gt;()&lt;/code&gt; like this is the idiomatic way to indicate that we&amp;rsquo;re calling &lt;code&gt;run&lt;/code&gt; for its side effects only; it doesn&amp;rsquo;t return a value we need.</source>
          <target state="translated">3番目に、 &lt;code&gt;run&lt;/code&gt; 関数は成功した場合に &lt;code&gt;Ok&lt;/code&gt; 値を返すようになりました。シグネチャで &lt;code&gt;run&lt;/code&gt; 関数の成功タイプを &lt;code&gt;()&lt;/code&gt; として宣言しました。つまり、ユニットタイプ値を &lt;code&gt;Ok&lt;/code&gt; 値でラップする必要があります。この &lt;code&gt;Ok(())&lt;/code&gt; 構文は、最初は少し奇妙に見えるかもしれませんが、このように &lt;code&gt;()&lt;/code&gt; を使用することは、 &lt;code&gt;run&lt;/code&gt; を副作用として呼び出すことを示す慣用的な方法です。必要な値を返しません。</target>
        </trans-unit>
        <trans-unit id="5ed975d1877254eff4f647cec29b338bbca64ef4" translate="yes" xml:space="preserve">
          <source>Third, the standard library defines &lt;a href=&quot;prelude/index&quot;&gt;The Rust Prelude&lt;/a&gt;, a small collection of items - mostly traits - that are imported into every module of every crate. The traits in the prelude are pervasive, making the prelude documentation a good entry point to learning about the library.</source>
          <target state="translated">3番目に、標準ライブラリは&lt;a href=&quot;prelude/index&quot;&gt;、Rust Preludeを&lt;/a&gt;定義します。これは、すべてのクレートのすべてのモジュールにインポートされるアイテムの小さなコレクション（主に特性）です。プレリュードの特徴は広範であり、プレリュードのドキュメントは、ライブラリについて学ぶための優れたエントリポイントになります。</target>
        </trans-unit>
        <trans-unit id="2c016402b0d7abec88d04b55dd5a8f4c018ceb4a" translate="yes" xml:space="preserve">
          <source>Third, you see the &lt;code&gt;&quot;Hello, world!&quot;&lt;/code&gt; string. We pass this string as an argument to &lt;code&gt;println!&lt;/code&gt;, and the string is printed to the screen.</source>
          <target state="translated">3番目に、 &lt;code&gt;&quot;Hello, world!&quot;&lt;/code&gt; ストリング。この文字列を引数として &lt;code&gt;println!&lt;/code&gt; 渡します！、文字列が画面に出力されます。</target>
        </trans-unit>
        <trans-unit id="756c69ab3ae5844d50aa9add76723030b90c2e84" translate="yes" xml:space="preserve">
          <source>This &lt;a href=&quot;../io/type.result&quot;&gt;&lt;code&gt;io::Result&lt;/code&gt;&lt;/a&gt; will be an &lt;a href=&quot;../result/enum.result#variant.Err&quot;&gt;&lt;code&gt;Err&lt;/code&gt;&lt;/a&gt; if there's some sort of intermittent IO error during iteration.</source>
          <target state="translated">反復中にある種の断続的なIOエラーがある場合、この&lt;a href=&quot;../io/type.result&quot;&gt; &lt;code&gt;io::Result&lt;/code&gt; &lt;/a&gt;は&lt;a href=&quot;../result/enum.result#variant.Err&quot;&gt; &lt;code&gt;Err&lt;/code&gt; &lt;/a&gt;になります。</target>
        </trans-unit>
        <trans-unit id="45e5b6731a2eea68db70299dc76799ac1e3d8403" translate="yes" xml:space="preserve">
          <source>This &lt;a href=&quot;fn.sync_channel&quot;&gt;&lt;code&gt;sync_channel&lt;/code&gt;&lt;/a&gt;'s receiving half has disconnected, so the data could not be sent. The data is returned back to the callee in this case.</source>
          <target state="translated">この&lt;a href=&quot;fn.sync_channel&quot;&gt; &lt;code&gt;sync_channel&lt;/code&gt; &lt;/a&gt;の受信側の半分が切断されたため、データを送信できませんでした。この場合、データは呼び出し先に返されます。</target>
        </trans-unit>
        <trans-unit id="e029dc532e12308a313b095f5b88bb0b2db85884" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;#[route]&lt;/code&gt; attribute would be defined by the framework as a procedural macro. The signature of the macro definition function would look like this:</source>
          <target state="translated">この &lt;code&gt;#[route]&lt;/code&gt; 属性は、フレームワークによって手続き型マクロとして定義されます。マクロ定義関数のシグネチャは次のようになります。</target>
        </trans-unit>
        <trans-unit id="dc8fa4acf3fa662b100c7f01811572d66ca46b05" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;Message&lt;/code&gt; enum will either be a &lt;code&gt;NewJob&lt;/code&gt; variant that holds the &lt;code&gt;Job&lt;/code&gt; the thread should run, or it will be a &lt;code&gt;Terminate&lt;/code&gt; variant that will cause the thread to exit its loop and stop.</source>
          <target state="translated">この &lt;code&gt;Message&lt;/code&gt; 列挙は、スレッドが実行する &lt;code&gt;Job&lt;/code&gt; を保持する &lt;code&gt;NewJob&lt;/code&gt; バリアントか、スレッドをループから抜けて停止させる &lt;code&gt;Terminate&lt;/code&gt; バリアントのいずれかになります。</target>
        </trans-unit>
        <trans-unit id="2ac2c44f291b0094f7e740b5540fe932bd4487e6" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;enum&lt;/code&gt; is constructed from the &lt;a href=&quot;../struct.btreemap#method.entry&quot;&gt;&lt;code&gt;entry&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../struct.btreemap&quot;&gt;&lt;code&gt;BTreeMap&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この &lt;code&gt;enum&lt;/code&gt; は、&lt;a href=&quot;../struct.btreemap&quot;&gt; &lt;code&gt;BTreeMap&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;../struct.btreemap#method.entry&quot;&gt; &lt;code&gt;entry&lt;/code&gt; &lt;/a&gt;メソッドから作成されます。</target>
        </trans-unit>
        <trans-unit id="c64bdd9b3fc3f77ac39443372876ff3d0846511f" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;enum&lt;/code&gt; is constructed from the &lt;a href=&quot;../struct.hashmap#method.entry&quot;&gt;&lt;code&gt;entry&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../struct.hashmap&quot;&gt;&lt;code&gt;HashMap&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この &lt;code&gt;enum&lt;/code&gt; は、&lt;a href=&quot;../struct.hashmap&quot;&gt; &lt;code&gt;HashMap&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;../struct.hashmap#method.entry&quot;&gt; &lt;code&gt;entry&lt;/code&gt; &lt;/a&gt;メソッドから作成されます。</target>
        </trans-unit>
        <trans-unit id="df201a49abc9a95b4b9db82dff3855ec3856b74c" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;enum&lt;/code&gt; is constructed from the &lt;a href=&quot;struct.btreemap#method.entry&quot;&gt;&lt;code&gt;entry&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.btreemap&quot;&gt;&lt;code&gt;BTreeMap&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この &lt;code&gt;enum&lt;/code&gt; は、&lt;a href=&quot;struct.btreemap&quot;&gt; &lt;code&gt;BTreeMap&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;struct.btreemap#method.entry&quot;&gt; &lt;code&gt;entry&lt;/code&gt; &lt;/a&gt;メソッドから構築されます。</target>
        </trans-unit>
        <trans-unit id="78b77c0bae34af9fbe0dd6db2b8a03354e7c6a07" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;enum&lt;/code&gt; is constructed from the &lt;a href=&quot;struct.hashmap#method.entry&quot;&gt;&lt;code&gt;entry&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.hashmap&quot;&gt;&lt;code&gt;HashMap&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この &lt;code&gt;enum&lt;/code&gt; は、&lt;a href=&quot;struct.hashmap&quot;&gt; &lt;code&gt;HashMap&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;struct.hashmap#method.entry&quot;&gt; &lt;code&gt;entry&lt;/code&gt; &lt;/a&gt;メソッドから構築されます。</target>
        </trans-unit>
        <trans-unit id="e4ed5614390f8cd7c309ba2eff1ecf5972023c00" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;enum&lt;/code&gt; is constructed through the &lt;a href=&quot;../struct.hashmap#method.raw_entry_mut&quot;&gt;&lt;code&gt;raw_entry_mut&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../struct.hashmap&quot;&gt;&lt;code&gt;HashMap&lt;/code&gt;&lt;/a&gt;, then calling one of the methods of that &lt;a href=&quot;struct.rawentrybuildermut&quot;&gt;&lt;code&gt;RawEntryBuilderMut&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この &lt;code&gt;enum&lt;/code&gt; を通じて構築され&lt;a href=&quot;../struct.hashmap#method.raw_entry_mut&quot;&gt; &lt;code&gt;raw_entry_mut&lt;/code&gt; &lt;/a&gt;の方法&lt;a href=&quot;../struct.hashmap&quot;&gt; &lt;code&gt;HashMap&lt;/code&gt; &lt;/a&gt;その方法の一つ呼び出し、&lt;a href=&quot;struct.rawentrybuildermut&quot;&gt; &lt;code&gt;RawEntryBuilderMut&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e49b2cde36d96ef41241461160aaa7f39ffe4733" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;enum&lt;/code&gt; is constructed through the &lt;a href=&quot;struct.hashmap#method.raw_entry_mut&quot;&gt;&lt;code&gt;raw_entry_mut&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.hashmap&quot;&gt;&lt;code&gt;HashMap&lt;/code&gt;&lt;/a&gt;, then calling one of the methods of that &lt;a href=&quot;struct.rawentrybuildermut&quot;&gt;&lt;code&gt;RawEntryBuilderMut&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この &lt;code&gt;enum&lt;/code&gt; を通じて構築され&lt;a href=&quot;struct.hashmap#method.raw_entry_mut&quot;&gt; &lt;code&gt;raw_entry_mut&lt;/code&gt; &lt;/a&gt;の方法&lt;a href=&quot;struct.hashmap&quot;&gt; &lt;code&gt;HashMap&lt;/code&gt; &lt;/a&gt;その方法の一つ呼び出し、&lt;a href=&quot;struct.rawentrybuildermut&quot;&gt; &lt;code&gt;RawEntryBuilderMut&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="484cddb60aced3f0fd2c66d36c2d02b11434898c" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;enum&lt;/code&gt; is created by iterating over &lt;a href=&quot;struct.components&quot;&gt;&lt;code&gt;Components&lt;/code&gt;&lt;/a&gt;, which in turn is created by the &lt;a href=&quot;struct.path#method.components&quot;&gt;&lt;code&gt;components&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.path&quot;&gt;&lt;code&gt;Path&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この &lt;code&gt;enum&lt;/code&gt; は、&lt;a href=&quot;struct.components&quot;&gt; &lt;code&gt;Components&lt;/code&gt; を&lt;/a&gt;繰り返し処理することによって作成されます。これは、&lt;a href=&quot;struct.path&quot;&gt; &lt;code&gt;Path&lt;/code&gt; の&lt;/a&gt;&lt;a href=&quot;struct.path#method.components&quot;&gt; &lt;code&gt;components&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。</target>
        </trans-unit>
        <trans-unit id="94a9ddcdadd6c80893c9aa067a5c5342d16c5ca8" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;enum&lt;/code&gt; is slightly awkward: it will never actually exist. This error is part of the type signature of the implementation of &lt;a href=&quot;../str/trait.fromstr&quot;&gt;&lt;code&gt;FromStr&lt;/code&gt;&lt;/a&gt; on &lt;a href=&quot;struct.string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt;. The return type of &lt;a href=&quot;../str/trait.fromstr#tymethod.from_str&quot;&gt;&lt;code&gt;from_str&lt;/code&gt;&lt;/a&gt;, requires that an error be defined, but, given that a &lt;a href=&quot;struct.string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; can always be made into a new &lt;a href=&quot;struct.string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; without error, this type will never actually be returned. As such, it is only here to satisfy said signature, and is useless otherwise.</source>
          <target state="translated">この &lt;code&gt;enum&lt;/code&gt; は少し厄介です。実際には存在しません。このエラーは、&lt;a href=&quot;struct.string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;に対する&lt;a href=&quot;../str/trait.fromstr&quot;&gt; &lt;code&gt;FromStr&lt;/code&gt; &lt;/a&gt;の実装の型シグネチャの一部です。&lt;a href=&quot;../str/trait.fromstr#tymethod.from_str&quot;&gt; &lt;code&gt;from_str&lt;/code&gt; &lt;/a&gt;の戻り値の型では、エラーを定義する必要がありますが、&lt;a href=&quot;struct.string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;は常にエラーなしで新しい&lt;a href=&quot;struct.string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;列にできるので、この型は実際には返されません。したがって、上記の署名を満たすのはここだけであり、それ以外の場合は役に立たない。</target>
        </trans-unit>
        <trans-unit id="7bafcd26f5f930140b3a1e3e5a967a8f857b2aca" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;enum&lt;/code&gt; is used as the return type for &lt;a href=&quot;../primitive.f32#method.classify&quot;&gt;&lt;code&gt;f32::classify&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../primitive.f64#method.classify&quot;&gt;&lt;code&gt;f64::classify&lt;/code&gt;&lt;/a&gt;. See their documentation for more.</source>
          <target state="translated">この &lt;code&gt;enum&lt;/code&gt; 型は、&lt;a href=&quot;../primitive.f32#method.classify&quot;&gt; &lt;code&gt;f32::classify&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;../primitive.f64#method.classify&quot;&gt; &lt;code&gt;f64::classify&lt;/code&gt; &lt;/a&gt;の戻り型として使用されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="779a09142baa1b4c0c25a858cbd603a82e00fb14" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;new&lt;/code&gt; function creates a new, empty string. You&amp;rsquo;ll find a &lt;code&gt;new&lt;/code&gt; function on many types, because it&amp;rsquo;s a common name for a function that makes a new value of some kind.</source>
          <target state="translated">この &lt;code&gt;new&lt;/code&gt; 関数は、新しい空の文字列を作成します。 &lt;code&gt;new&lt;/code&gt; 関数は、ある種の新しい値を作成する関数の一般的な名前であるため、多くの型で見つかります。</target>
        </trans-unit>
        <trans-unit id="87637c77d83fe48f3ea16980edd287161d7c7814" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by &lt;a href=&quot;../struct.binaryheap#method.drain&quot;&gt;&lt;code&gt;BinaryHeap::drain()&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は&lt;a href=&quot;../struct.binaryheap#method.drain&quot;&gt; &lt;code&gt;BinaryHeap::drain()&lt;/code&gt; &lt;/a&gt;によって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="710441e6744b3faabea4c32e6f7f503845ba9cca" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by &lt;a href=&quot;../struct.binaryheap#method.drain_sorted&quot;&gt;&lt;code&gt;BinaryHeap::drain_sorted()&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は&lt;a href=&quot;../struct.binaryheap#method.drain_sorted&quot;&gt; &lt;code&gt;BinaryHeap::drain_sorted()&lt;/code&gt; &lt;/a&gt;によって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="4f1beb7abacff5cc6b2aa66c11f692cb37b24895" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by &lt;a href=&quot;../struct.binaryheap#method.into_iter&quot;&gt;&lt;code&gt;BinaryHeap::into_iter()&lt;/code&gt;&lt;/a&gt; (provided by the &lt;code&gt;IntoIterator&lt;/code&gt; trait). See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;../struct.binaryheap#method.into_iter&quot;&gt; &lt;code&gt;BinaryHeap::into_iter()&lt;/code&gt; &lt;/a&gt;（ &lt;code&gt;IntoIterator&lt;/code&gt; トレイトによって提供されます）によって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="19187356eb493c3adfe1d6a3c45949ebe90718ce" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by &lt;a href=&quot;../struct.binaryheap#method.iter&quot;&gt;&lt;code&gt;BinaryHeap::iter()&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は&lt;a href=&quot;../struct.binaryheap#method.iter&quot;&gt; &lt;code&gt;BinaryHeap::iter()&lt;/code&gt; &lt;/a&gt;によって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="ea9db5c8e782224fe1f85e1a720f71f672146c1f" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by &lt;a href=&quot;../struct.linkedlist#method.iter&quot;&gt;&lt;code&gt;LinkedList::iter()&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は&lt;a href=&quot;../struct.linkedlist#method.iter&quot;&gt; &lt;code&gt;LinkedList::iter()&lt;/code&gt; &lt;/a&gt;によって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="365f4e6ab5c3e3c131d4abcf66926cc6d747c3d0" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by &lt;a href=&quot;../struct.linkedlist#method.iter_mut&quot;&gt;&lt;code&gt;LinkedList::iter_mut()&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;../struct.linkedlist#method.iter_mut&quot;&gt; &lt;code&gt;LinkedList::iter_mut()&lt;/code&gt; &lt;/a&gt;によって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="1a70b0d26c2b2bbcfc4bcd9397bbda3af835a2c7" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by &lt;a href=&quot;fn.pending&quot;&gt;&lt;code&gt;pending()&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は&lt;a href=&quot;fn.pending&quot;&gt; &lt;code&gt;pending()&lt;/code&gt; &lt;/a&gt;によって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="c0010fa18c26eb3966e8839f207aad6f2ebfdb7b" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by &lt;a href=&quot;fn.ready&quot;&gt;&lt;code&gt;ready()&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は&lt;a href=&quot;fn.ready&quot;&gt; &lt;code&gt;ready()&lt;/code&gt; &lt;/a&gt;によって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="ffa5a9dc90635ee7464510b7b23324baed884a35" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by &lt;a href=&quot;struct.cstring#method.into_string&quot;&gt;&lt;code&gt;CString::into_string()&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;struct.cstring#method.into_string&quot;&gt; &lt;code&gt;CString::into_string()&lt;/code&gt; &lt;/a&gt;によって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="3a98a7a0b86bcb3ca3daaeceee9ee6241f18b9ac" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by &lt;a href=&quot;struct.vec#method.drain&quot;&gt;&lt;code&gt;Vec::drain&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は&lt;a href=&quot;struct.vec#method.drain&quot;&gt; &lt;code&gt;Vec::drain&lt;/code&gt; &lt;/a&gt;によって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="bc70d905416c075e472dedc5615406f53740db49" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by &lt;a href=&quot;trait.iterator#method.chain&quot;&gt;&lt;code&gt;Iterator::chain&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は&lt;a href=&quot;trait.iterator#method.chain&quot;&gt; &lt;code&gt;Iterator::chain&lt;/code&gt; &lt;/a&gt;によって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="05ed5bb9307267a5e340c3a66e14a4d93b6b2120" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by &lt;a href=&quot;trait.iterator#method.flat_map&quot;&gt;&lt;code&gt;Iterator::flat_map&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は&lt;a href=&quot;trait.iterator#method.flat_map&quot;&gt; &lt;code&gt;Iterator::flat_map&lt;/code&gt; &lt;/a&gt;によって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="f04b21219d876a2efb53733e31a16e7043a08a65" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by &lt;a href=&quot;trait.iterator#method.fuse&quot;&gt;&lt;code&gt;Iterator::fuse&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は&lt;a href=&quot;trait.iterator#method.fuse&quot;&gt; &lt;code&gt;Iterator::fuse&lt;/code&gt; &lt;/a&gt;によって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="b34a5adfa6d1f401a24be7fc9f321c6bf3e63061" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by &lt;a href=&quot;trait.iterator#method.zip&quot;&gt;&lt;code&gt;Iterator::zip&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は&lt;a href=&quot;trait.iterator#method.zip&quot;&gt; &lt;code&gt;Iterator::zip&lt;/code&gt; &lt;/a&gt;によって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="7f5b4ce43667b25dc7c0338aa4a9d348ba82ad8b" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../../iter/trait.intoiterator#tymethod.into_iter&quot;&gt;&lt;code&gt;into_iter&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../struct.btreemap&quot;&gt;&lt;code&gt;BTreeMap&lt;/code&gt;&lt;/a&gt; (provided by the &lt;code&gt;IntoIterator&lt;/code&gt; trait). See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; によって作成され&lt;a href=&quot;../../iter/trait.intoiterator#tymethod.into_iter&quot;&gt; &lt;code&gt;into_iter&lt;/code&gt; の&lt;/a&gt;上の方法&lt;a href=&quot;../struct.btreemap&quot;&gt; &lt;code&gt;BTreeMap&lt;/code&gt; &lt;/a&gt;（によって提供 &lt;code&gt;IntoIterator&lt;/code&gt; の形質）。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="c15db34b76ad48367be1e50fb80a630f7544ccea" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../../iter/trait.intoiterator#tymethod.into_iter&quot;&gt;&lt;code&gt;into_iter&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../struct.hashmap&quot;&gt;&lt;code&gt;HashMap&lt;/code&gt;&lt;/a&gt; (provided by the &lt;code&gt;IntoIterator&lt;/code&gt; trait). See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;../struct.hashmap&quot;&gt; &lt;code&gt;HashMap&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;../../iter/trait.intoiterator#tymethod.into_iter&quot;&gt; &lt;code&gt;into_iter&lt;/code&gt; &lt;/a&gt;メソッド（ &lt;code&gt;IntoIterator&lt;/code&gt; トレイトによって提供される）によって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="8af255e3f384d8c63465da3dc3dea71b03731e21" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../../iter/trait.intoiterator#tymethod.into_iter&quot;&gt;&lt;code&gt;into_iter&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../struct.hashset&quot;&gt;&lt;code&gt;HashSet&lt;/code&gt;&lt;/a&gt; (provided by the &lt;code&gt;IntoIterator&lt;/code&gt; trait). See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;../struct.hashset&quot;&gt; &lt;code&gt;HashSet&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;../../iter/trait.intoiterator#tymethod.into_iter&quot;&gt; &lt;code&gt;into_iter&lt;/code&gt; &lt;/a&gt;メソッド（ &lt;code&gt;IntoIterator&lt;/code&gt; トレイトによって提供される）によって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="4e4d6244bc27d0d285cfa54d11b50c87b3df5b10" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../../iter/trait.intoiterator#tymethod.into_iter&quot;&gt;&lt;code&gt;into_iter&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.hashmap&quot;&gt;&lt;code&gt;HashMap&lt;/code&gt;&lt;/a&gt; (provided by the &lt;code&gt;IntoIterator&lt;/code&gt; trait). See its documentation for more.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2755a24920256090117fe1db3482d286484fdff1" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../../iter/trait.intoiterator#tymethod.into_iter&quot;&gt;&lt;code&gt;into_iter&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.hashset&quot;&gt;&lt;code&gt;HashSet&lt;/code&gt;&lt;/a&gt; (provided by the &lt;code&gt;IntoIterator&lt;/code&gt; trait). See its documentation for more.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04527249225c0957b4a2dad0cb713b606320b989" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../primitive.char#method.escape_debug&quot;&gt;&lt;code&gt;escape_debug&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../primitive.char&quot;&gt;&lt;code&gt;char&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;../primitive.char&quot;&gt; &lt;code&gt;char&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;../primitive.char#method.escape_debug&quot;&gt; &lt;code&gt;escape_debug&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="db12edeeb870acc98aa06b33b39a8bb3d306d517" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../primitive.char#method.escape_default&quot;&gt;&lt;code&gt;escape_default&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../primitive.char&quot;&gt;&lt;code&gt;char&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;../primitive.char&quot;&gt; &lt;code&gt;char&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;../primitive.char#method.escape_default&quot;&gt; &lt;code&gt;escape_default&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="cc81870e647a4c66d45285572c3d1fa6c0473baa" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../primitive.char#method.escape_unicode&quot;&gt;&lt;code&gt;escape_unicode&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../primitive.char&quot;&gt;&lt;code&gt;char&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;../primitive.char&quot;&gt; &lt;code&gt;char&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;../primitive.char#method.escape_unicode&quot;&gt; &lt;code&gt;escape_unicode&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="1fe84815a63364d86bf9311c9ac78e8bdb20701b" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../primitive.char#method.to_lowercase&quot;&gt;&lt;code&gt;to_lowercase&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../primitive.char&quot;&gt;&lt;code&gt;char&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;../primitive.char&quot;&gt; &lt;code&gt;char&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;../primitive.char#method.to_lowercase&quot;&gt; &lt;code&gt;to_lowercase&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="27eb64d64fc617e07c6f09849f8a1efd113c9e7c" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../primitive.char#method.to_uppercase&quot;&gt;&lt;code&gt;to_uppercase&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../primitive.char&quot;&gt;&lt;code&gt;char&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;../primitive.char&quot;&gt; &lt;code&gt;char&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;../primitive.char#method.to_uppercase&quot;&gt; &lt;code&gt;to_uppercase&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="23afadfd08d170366a910c9a9eb67a47d53c58e4" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../struct.binaryheap#method.peek_mut&quot;&gt;&lt;code&gt;peek_mut&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../struct.binaryheap&quot;&gt;&lt;code&gt;BinaryHeap&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;../struct.binaryheap#method.peek_mut&quot;&gt; &lt;code&gt;peek_mut&lt;/code&gt; &lt;/a&gt;メソッドによって作成され&lt;a href=&quot;../struct.binaryheap&quot;&gt; &lt;code&gt;BinaryHeap&lt;/code&gt; &lt;/a&gt;。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="600939e3b3f6d85fd06ffcedc1a550628427f081" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../struct.btreemap#method.into_keys&quot;&gt;&lt;code&gt;into_keys&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../struct.btreemap&quot;&gt;&lt;code&gt;BTreeMap&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;../struct.btreemap#method.into_keys&quot;&gt; &lt;code&gt;into_keys&lt;/code&gt; &lt;/a&gt;メソッドによって作成され&lt;a href=&quot;../struct.btreemap&quot;&gt; &lt;code&gt;BTreeMap&lt;/code&gt; &lt;/a&gt;。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="a19a52d05723c4f0efb8bd5c1f2d68262e4edffd" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../struct.btreemap#method.into_values&quot;&gt;&lt;code&gt;into_values&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../struct.btreemap&quot;&gt;&lt;code&gt;BTreeMap&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;../struct.btreemap#method.into_values&quot;&gt; &lt;code&gt;into_values&lt;/code&gt; &lt;/a&gt;メソッドによって作成され&lt;a href=&quot;../struct.btreemap&quot;&gt; &lt;code&gt;BTreeMap&lt;/code&gt; &lt;/a&gt;。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="3045bd58f26065df50d0790fb43c60769a4e62d7" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../struct.btreemap#method.iter&quot;&gt;&lt;code&gt;iter&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../struct.btreemap&quot;&gt;&lt;code&gt;BTreeMap&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;../struct.btreemap&quot;&gt; &lt;code&gt;BTreeMap&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;../struct.btreemap#method.iter&quot;&gt; &lt;code&gt;iter&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="946c012883128ea40231fbdcbdc1a628bae08f1e" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../struct.btreemap#method.iter_mut&quot;&gt;&lt;code&gt;iter_mut&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../struct.btreemap&quot;&gt;&lt;code&gt;BTreeMap&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;../struct.btreemap#method.iter_mut&quot;&gt; &lt;code&gt;iter_mut&lt;/code&gt; &lt;/a&gt;メソッドによって作成され&lt;a href=&quot;../struct.btreemap&quot;&gt; &lt;code&gt;BTreeMap&lt;/code&gt; &lt;/a&gt;。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="74b659096d73f7bbdedbdc8e5c8915fc609d68c8" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../struct.btreemap#method.keys&quot;&gt;&lt;code&gt;keys&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../struct.btreemap&quot;&gt;&lt;code&gt;BTreeMap&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;../struct.btreemap&quot;&gt; &lt;code&gt;BTreeMap&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;../struct.btreemap#method.keys&quot;&gt; &lt;code&gt;keys&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="7dc938cc7827ae09ff7a33e57fec9dc1ea67e47b" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../struct.btreemap#method.range&quot;&gt;&lt;code&gt;range&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../struct.btreemap&quot;&gt;&lt;code&gt;BTreeMap&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;../struct.btreemap&quot;&gt; &lt;code&gt;BTreeMap&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;../struct.btreemap#method.range&quot;&gt; &lt;code&gt;range&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="d48ee20f7abe01686d61e8b564a9e2e8709cc261" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../struct.btreemap#method.range_mut&quot;&gt;&lt;code&gt;range_mut&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../struct.btreemap&quot;&gt;&lt;code&gt;BTreeMap&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;../struct.btreemap#method.range_mut&quot;&gt; &lt;code&gt;range_mut&lt;/code&gt; &lt;/a&gt;メソッドによって作成され&lt;a href=&quot;../struct.btreemap&quot;&gt; &lt;code&gt;BTreeMap&lt;/code&gt; &lt;/a&gt;。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="7a6de9bc6d12983868c379e76acf4b7b905e3489" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../struct.btreemap#method.values&quot;&gt;&lt;code&gt;values&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../struct.btreemap&quot;&gt;&lt;code&gt;BTreeMap&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;../struct.btreemap&quot;&gt; &lt;code&gt;BTreeMap&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;../struct.btreemap#method.values&quot;&gt; &lt;code&gt;values&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="d705a35c8c3bfa5da6919c4661f259de8364f195" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../struct.btreemap#method.values_mut&quot;&gt;&lt;code&gt;values_mut&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../struct.btreemap&quot;&gt;&lt;code&gt;BTreeMap&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;../struct.btreemap#method.values_mut&quot;&gt; &lt;code&gt;values_mut&lt;/code&gt; &lt;/a&gt;メソッドによって作成され&lt;a href=&quot;../struct.btreemap&quot;&gt; &lt;code&gt;BTreeMap&lt;/code&gt; &lt;/a&gt;。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="61f91f31f3bd872cb2fbd24fadf5b75ed09458a4" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../struct.btreeset#method.difference&quot;&gt;&lt;code&gt;difference&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../struct.btreeset&quot;&gt;&lt;code&gt;BTreeSet&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;../struct.btreeset&quot;&gt; &lt;code&gt;BTreeSet&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;../struct.btreeset#method.difference&quot;&gt; &lt;code&gt;difference&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="2e1d52e053b2cbaba0cc8f9612b34ec9509994b9" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../struct.btreeset#method.intersection&quot;&gt;&lt;code&gt;intersection&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../struct.btreeset&quot;&gt;&lt;code&gt;BTreeSet&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;../struct.btreeset&quot;&gt; &lt;code&gt;BTreeSet&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;../struct.btreeset#method.intersection&quot;&gt; &lt;code&gt;intersection&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="954e936cd5243200003d839739bf6bf3e1d2ccbf" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../struct.btreeset#method.into_iter&quot;&gt;&lt;code&gt;into_iter&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../struct.btreeset&quot;&gt;&lt;code&gt;BTreeSet&lt;/code&gt;&lt;/a&gt; (provided by the &lt;code&gt;IntoIterator&lt;/code&gt; trait). See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; によって作成され&lt;a href=&quot;../struct.btreeset#method.into_iter&quot;&gt; &lt;code&gt;into_iter&lt;/code&gt; の&lt;/a&gt;上の方法&lt;a href=&quot;../struct.btreeset&quot;&gt; &lt;code&gt;BTreeSet&lt;/code&gt; &lt;/a&gt;（によって提供 &lt;code&gt;IntoIterator&lt;/code&gt; の形質）。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="3c45f5db49cb3dd47f14e3527ee6323bafd674c6" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../struct.btreeset#method.iter&quot;&gt;&lt;code&gt;iter&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../struct.btreeset&quot;&gt;&lt;code&gt;BTreeSet&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;../struct.btreeset&quot;&gt; &lt;code&gt;BTreeSet&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;../struct.btreeset#method.iter&quot;&gt; &lt;code&gt;iter&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="53de499d6a94e0c9ad1a96537dd61a0c1c130aff" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../struct.btreeset#method.range&quot;&gt;&lt;code&gt;range&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../struct.btreeset&quot;&gt;&lt;code&gt;BTreeSet&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;../struct.btreeset&quot;&gt; &lt;code&gt;BTreeSet&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;../struct.btreeset#method.range&quot;&gt; &lt;code&gt;range&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="c55b8ab08d80bad9c8193338715f67b024c7ee2c" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../struct.btreeset#method.symmetric_difference&quot;&gt;&lt;code&gt;symmetric_difference&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../struct.btreeset&quot;&gt;&lt;code&gt;BTreeSet&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;../struct.btreeset&quot;&gt; &lt;code&gt;BTreeSet&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;../struct.btreeset#method.symmetric_difference&quot;&gt; &lt;code&gt;symmetric_difference&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="34001f1785210d90fc10385cb9a1251eed89d761" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../struct.btreeset#method.union&quot;&gt;&lt;code&gt;union&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../struct.btreeset&quot;&gt;&lt;code&gt;BTreeSet&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;../struct.btreeset&quot;&gt; &lt;code&gt;BTreeSet&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;../struct.btreeset#method.union&quot;&gt; &lt;code&gt;union&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="6645dd14e44dee8f928de9c50e60665ec2facacc" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../struct.hashmap#method.drain&quot;&gt;&lt;code&gt;drain&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../struct.hashmap&quot;&gt;&lt;code&gt;HashMap&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;../struct.hashmap&quot;&gt; &lt;code&gt;HashMap&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;../struct.hashmap#method.drain&quot;&gt; &lt;code&gt;drain&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="305c738458e34e26e1734f78e5058c6e48d5e7b3" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../struct.hashmap#method.drain_filter&quot;&gt;&lt;code&gt;drain_filter&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../struct.hashmap&quot;&gt;&lt;code&gt;HashMap&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;../struct.hashmap&quot;&gt; &lt;code&gt;HashMap&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;../struct.hashmap#method.drain_filter&quot;&gt; &lt;code&gt;drain_filter&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。</target>
        </trans-unit>
        <trans-unit id="b1bd35d1cd7726da10e33bba8ce8805e4d7d627f" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../struct.hashmap#method.into_keys&quot;&gt;&lt;code&gt;into_keys&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../struct.hashmap&quot;&gt;&lt;code&gt;HashMap&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;../struct.hashmap&quot;&gt; &lt;code&gt;HashMap&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;../struct.hashmap#method.into_keys&quot;&gt; &lt;code&gt;into_keys&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="774e7d6c5f4fef0d016668cc714ac56903ab5226" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../struct.hashmap#method.into_values&quot;&gt;&lt;code&gt;into_values&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../struct.hashmap&quot;&gt;&lt;code&gt;HashMap&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;../struct.hashmap&quot;&gt; &lt;code&gt;HashMap&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;../struct.hashmap#method.into_values&quot;&gt; &lt;code&gt;into_values&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="50fc5746ddfb14a344eb233b7116066c64b4c8c4" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../struct.hashmap#method.iter&quot;&gt;&lt;code&gt;iter&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../struct.hashmap&quot;&gt;&lt;code&gt;HashMap&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;../struct.hashmap&quot;&gt; &lt;code&gt;HashMap&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;../struct.hashmap#method.iter&quot;&gt; &lt;code&gt;iter&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="a09bcc28d870cda3d50f44865ac154f6c773dbcc" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../struct.hashmap#method.iter_mut&quot;&gt;&lt;code&gt;iter_mut&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../struct.hashmap&quot;&gt;&lt;code&gt;HashMap&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;../struct.hashmap&quot;&gt; &lt;code&gt;HashMap&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;../struct.hashmap#method.iter_mut&quot;&gt; &lt;code&gt;iter_mut&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="b3485f5d7a78d5f8bb97e7e58730359d2b64777f" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../struct.hashmap#method.keys&quot;&gt;&lt;code&gt;keys&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../struct.hashmap&quot;&gt;&lt;code&gt;HashMap&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;../struct.hashmap&quot;&gt; &lt;code&gt;HashMap&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;../struct.hashmap#method.keys&quot;&gt; &lt;code&gt;keys&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="b03cef3dcf96a8183c51975b4910dd74475edf71" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../struct.hashmap#method.values&quot;&gt;&lt;code&gt;values&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../struct.hashmap&quot;&gt;&lt;code&gt;HashMap&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;../struct.hashmap&quot;&gt; &lt;code&gt;HashMap&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;../struct.hashmap#method.values&quot;&gt; &lt;code&gt;values&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="53c20090054cf2ac21ecbfded86e3ada5a3c452b" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../struct.hashmap#method.values_mut&quot;&gt;&lt;code&gt;values_mut&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../struct.hashmap&quot;&gt;&lt;code&gt;HashMap&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;../struct.hashmap&quot;&gt; &lt;code&gt;HashMap&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;../struct.hashmap#method.values_mut&quot;&gt; &lt;code&gt;values_mut&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="92667a13f4b88964b565e8c1428280771a1f58ae" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../struct.hashset#method.difference&quot;&gt;&lt;code&gt;difference&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../struct.hashset&quot;&gt;&lt;code&gt;HashSet&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;../struct.hashset&quot;&gt; &lt;code&gt;HashSet&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;../struct.hashset#method.difference&quot;&gt; &lt;code&gt;difference&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="8b53023bc8c2f123d3aa8476357c0065c17e5bc5" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../struct.hashset#method.drain&quot;&gt;&lt;code&gt;drain&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../struct.hashset&quot;&gt;&lt;code&gt;HashSet&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;../struct.hashset&quot;&gt; &lt;code&gt;HashSet&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;../struct.hashset#method.drain&quot;&gt; &lt;code&gt;drain&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="2f3f79e8e523849b31d44d7222fee9b2cd8c8e08" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../struct.hashset#method.drain_filter&quot;&gt;&lt;code&gt;drain_filter&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../struct.hashset&quot;&gt;&lt;code&gt;HashSet&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;../struct.hashset&quot;&gt; &lt;code&gt;HashSet&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;../struct.hashset#method.drain_filter&quot;&gt; &lt;code&gt;drain_filter&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。</target>
        </trans-unit>
        <trans-unit id="e0c7b733ae497921c7ee1e58f9d3737d0bc5abf0" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../struct.hashset#method.intersection&quot;&gt;&lt;code&gt;intersection&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../struct.hashset&quot;&gt;&lt;code&gt;HashSet&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;../struct.hashset&quot;&gt; &lt;code&gt;HashSet&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;../struct.hashset#method.intersection&quot;&gt; &lt;code&gt;intersection&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="7faf396162375db95ee521b7f44471b3dddb5889" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../struct.hashset#method.iter&quot;&gt;&lt;code&gt;iter&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../struct.hashset&quot;&gt;&lt;code&gt;HashSet&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;../struct.hashset&quot;&gt; &lt;code&gt;HashSet&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;../struct.hashset#method.iter&quot;&gt; &lt;code&gt;iter&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="14c7d030bde45fb3ec268ba764828f4e1837eb77" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../struct.hashset#method.symmetric_difference&quot;&gt;&lt;code&gt;symmetric_difference&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../struct.hashset&quot;&gt;&lt;code&gt;HashSet&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;../struct.hashset&quot;&gt; &lt;code&gt;HashSet&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;../struct.hashset#method.symmetric_difference&quot;&gt; &lt;code&gt;symmetric_difference&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="fce08bc41dc77fbc27830928bbf1bf5b41c36d96" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../struct.hashset#method.union&quot;&gt;&lt;code&gt;union&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../struct.hashset&quot;&gt;&lt;code&gt;HashSet&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;../struct.hashset&quot;&gt; &lt;code&gt;HashSet&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;../struct.hashset#method.union&quot;&gt; &lt;code&gt;union&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="265bcebc25d757509c4b717937ff253a8b8647e5" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../struct.linkedlist#method.into_iter&quot;&gt;&lt;code&gt;into_iter&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../struct.linkedlist&quot;&gt;&lt;code&gt;LinkedList&lt;/code&gt;&lt;/a&gt; (provided by the &lt;code&gt;IntoIterator&lt;/code&gt; trait). See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; によって作成され&lt;a href=&quot;../struct.linkedlist#method.into_iter&quot;&gt; &lt;code&gt;into_iter&lt;/code&gt; 用&lt;/a&gt;のメソッド&lt;a href=&quot;../struct.linkedlist&quot;&gt; &lt;code&gt;LinkedList&lt;/code&gt; の&lt;/a&gt;（によって提供 &lt;code&gt;IntoIterator&lt;/code&gt; の形質）。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="ae30ff0dcb4ca01b32359edc18207fe2e8799225" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../struct.vecdeque#method.drain&quot;&gt;&lt;code&gt;drain&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../struct.vecdeque&quot;&gt;&lt;code&gt;VecDeque&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;../struct.vecdeque&quot;&gt; &lt;code&gt;VecDeque&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;../struct.vecdeque#method.drain&quot;&gt; &lt;code&gt;drain&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="d0622f000a63c5582f4bf61c6400ba69e79c3e9b" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../struct.vecdeque#method.into_iter&quot;&gt;&lt;code&gt;into_iter&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../struct.vecdeque&quot;&gt;&lt;code&gt;VecDeque&lt;/code&gt;&lt;/a&gt; (provided by the &lt;code&gt;IntoIterator&lt;/code&gt; trait). See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; によって作成され&lt;a href=&quot;../struct.vecdeque#method.into_iter&quot;&gt; &lt;code&gt;into_iter&lt;/code&gt; の&lt;/a&gt;上の方法&lt;a href=&quot;../struct.vecdeque&quot;&gt; &lt;code&gt;VecDeque&lt;/code&gt; &lt;/a&gt;（によって提供 &lt;code&gt;IntoIterator&lt;/code&gt; の形質）。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="9c39e95770f6e995aeb4f6547fcd0d3b5d042bb7" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../struct.vecdeque#method.iter&quot;&gt;&lt;code&gt;iter&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../struct.vecdeque&quot;&gt;&lt;code&gt;VecDeque&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;../struct.vecdeque&quot;&gt; &lt;code&gt;VecDeque&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;../struct.vecdeque#method.iter&quot;&gt; &lt;code&gt;iter&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="bd4b5977c5727925e70d8f76687b773a1fdddf98" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../struct.vecdeque#method.iter&quot;&gt;&lt;code&gt;iter&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../struct.vecdeque&quot;&gt;&lt;code&gt;super::VecDeque&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2950ed2e16c6715dede3635ac1905a727cb8d87" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../struct.vecdeque#method.iter_mut&quot;&gt;&lt;code&gt;iter_mut&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../struct.vecdeque&quot;&gt;&lt;code&gt;VecDeque&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;../struct.vecdeque#method.iter_mut&quot;&gt; &lt;code&gt;iter_mut&lt;/code&gt; &lt;/a&gt;メソッドによって作成され&lt;a href=&quot;../struct.vecdeque&quot;&gt; &lt;code&gt;VecDeque&lt;/code&gt; &lt;/a&gt;。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="12f5ffb0f8059183926ec32cc230f390a47befb7" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;../struct.vecdeque#method.iter_mut&quot;&gt;&lt;code&gt;iter_mut&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../struct.vecdeque&quot;&gt;&lt;code&gt;super::VecDeque&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df020e51f3f4500bc1f8be7714b7e55fb7923be6" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;enum.option#method.into_iter&quot;&gt;&lt;code&gt;Option::into_iter&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;enum.option#method.into_iter&quot;&gt; &lt;code&gt;Option::into_iter&lt;/code&gt; &lt;/a&gt;関数によって作成されます。</target>
        </trans-unit>
        <trans-unit id="ed85839c71b9b41d697c086ba092e08ee354cb7a" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;enum.option#method.iter&quot;&gt;&lt;code&gt;Option::iter&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;enum.option#method.iter&quot;&gt; &lt;code&gt;Option::iter&lt;/code&gt; &lt;/a&gt;関数によって作成されます。</target>
        </trans-unit>
        <trans-unit id="f832fbc0a1897989e972bccbdf14ab8c06df2a8b" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;enum.option#method.iter_mut&quot;&gt;&lt;code&gt;Option::iter_mut&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;enum.option#method.iter_mut&quot;&gt; &lt;code&gt;Option::iter_mut&lt;/code&gt; &lt;/a&gt;関数によって作成されます。</target>
        </trans-unit>
        <trans-unit id="29c33d9d981b66ee3e763795fb7a865338012f4a" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;fn.empty&quot;&gt;&lt;code&gt;empty()&lt;/code&gt;&lt;/a&gt; function. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;fn.empty&quot;&gt; &lt;code&gt;empty()&lt;/code&gt; &lt;/a&gt;関数によって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="f3c09e42d5e7d0d1aee87da5c6a31ae546137c1a" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;fn.empty&quot;&gt;&lt;code&gt;empty&lt;/code&gt;&lt;/a&gt; function. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;fn.empty&quot;&gt; &lt;code&gt;empty&lt;/code&gt; &lt;/a&gt;関数によって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="583b1959fdeeb9dda8ffebe215f3e85158c8bc2e" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;fn.escape_default&quot;&gt;&lt;code&gt;escape_default&lt;/code&gt;&lt;/a&gt; function. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;fn.escape_default&quot;&gt; &lt;code&gt;escape_default&lt;/code&gt; &lt;/a&gt;関数によって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="2441b8d854782799a5af16365bc544396e7a30e1" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;fn.from_fn&quot;&gt;&lt;code&gt;iter::from_fn()&lt;/code&gt;&lt;/a&gt; function. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;fn.from_fn&quot;&gt; &lt;code&gt;iter::from_fn()&lt;/code&gt; &lt;/a&gt;関数によって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="be7c13071482b2c3923f2e736bd014b0019bfa3c" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;fn.from_fn&quot;&gt;&lt;code&gt;iter::from_fn&lt;/code&gt;&lt;/a&gt; function. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は&lt;a href=&quot;fn.from_fn&quot;&gt; &lt;code&gt;iter::from_fn&lt;/code&gt; &lt;/a&gt;関数によって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="94d40c5fdbd8b948ffc41faa923b27505f807e3f" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;fn.once&quot;&gt;&lt;code&gt;once()&lt;/code&gt;&lt;/a&gt; function. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;fn.once&quot;&gt; &lt;code&gt;once()&lt;/code&gt; &lt;/a&gt;関数によって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="b2d0d0c848c068f0195f43a41a604e9ed15435ea" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;fn.once&quot;&gt;&lt;code&gt;once&lt;/code&gt;&lt;/a&gt; function. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;fn.once&quot;&gt; &lt;code&gt;once&lt;/code&gt; &lt;/a&gt;関数によって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="8bb25d152dad7b00112a30e9ef34eaf19e870657" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;fn.once_with&quot;&gt;&lt;code&gt;once_with()&lt;/code&gt;&lt;/a&gt; function. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;fn.once_with&quot;&gt; &lt;code&gt;once_with()&lt;/code&gt; &lt;/a&gt;関数によって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="582110272ac53674cd7341259d0b80e92c531007" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;fn.once_with&quot;&gt;&lt;code&gt;once_with&lt;/code&gt;&lt;/a&gt; function. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;fn.once_with&quot;&gt; &lt;code&gt;once_with&lt;/code&gt; &lt;/a&gt;関数によって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="c2e53dc5041d32296d06a4432a5dc5ef029bc8fa" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;fn.repeat&quot;&gt;&lt;code&gt;repeat()&lt;/code&gt;&lt;/a&gt; function. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;fn.repeat&quot;&gt; &lt;code&gt;repeat()&lt;/code&gt; &lt;/a&gt;関数によって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="f750c0f224dd89d4b261959a2e6c2e0e53f46764" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;fn.repeat&quot;&gt;&lt;code&gt;repeat&lt;/code&gt;&lt;/a&gt; function. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;fn.repeat&quot;&gt; &lt;code&gt;repeat&lt;/code&gt; &lt;/a&gt;関数によって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="66f063558b4204049186f9de5672edf7bb33b08f" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;fn.repeat_with&quot;&gt;&lt;code&gt;repeat_with()&lt;/code&gt;&lt;/a&gt; function. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;fn.repeat_with&quot;&gt; &lt;code&gt;repeat_with()&lt;/code&gt; &lt;/a&gt;関数によって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="937c3c66fd7a919cfaca746517ec0915d37c92b5" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;fn.repeat_with&quot;&gt;&lt;code&gt;repeat_with&lt;/code&gt;&lt;/a&gt; function. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;fn.repeat_with&quot;&gt; &lt;code&gt;repeat_with&lt;/code&gt; &lt;/a&gt;関数によって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="aab81d3f94443c5e362d592846bb5f615688f696" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;fn.spawn&quot;&gt;&lt;code&gt;thread::spawn&lt;/code&gt;&lt;/a&gt; function and the &lt;a href=&quot;struct.builder#method.spawn&quot;&gt;&lt;code&gt;thread::Builder::spawn&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;fn.spawn&quot;&gt; &lt;code&gt;thread::spawn&lt;/code&gt; &lt;/a&gt;関数と&lt;a href=&quot;struct.builder#method.spawn&quot;&gt; &lt;code&gt;thread::Builder::spawn&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。</target>
        </trans-unit>
        <trans-unit id="721e1f5adffa977a66b66d77bbfc4af0a336248f" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;fn.successors&quot;&gt;&lt;code&gt;iter::successors()&lt;/code&gt;&lt;/a&gt; function. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;fn.successors&quot;&gt; &lt;code&gt;iter::successors()&lt;/code&gt; &lt;/a&gt;関数によって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="2bba3b7b1d3ddee116465f88074412d173b46ad3" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;fn.successors&quot;&gt;&lt;code&gt;successors&lt;/code&gt;&lt;/a&gt; function. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;fn.successors&quot;&gt; &lt;code&gt;successors&lt;/code&gt; &lt;/a&gt;関数によって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="750025df63cee4f9476b600e410c271d4dc26282" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.binaryheap#method.drain&quot;&gt;&lt;code&gt;drain&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.binaryheap&quot;&gt;&lt;code&gt;BinaryHeap&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は&lt;a href=&quot;struct.binaryheap&quot;&gt; &lt;code&gt;BinaryHeap&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;struct.binaryheap#method.drain&quot;&gt; &lt;code&gt;drain&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="e18a9e9bb705ac20d27c1b54b01a06909af9f5aa" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.binaryheap#method.into_iter&quot;&gt;&lt;code&gt;into_iter&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.binaryheap&quot;&gt;&lt;code&gt;BinaryHeap&lt;/code&gt;&lt;/a&gt; (provided by the &lt;code&gt;IntoIterator&lt;/code&gt; trait). See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; によって作成され&lt;a href=&quot;struct.binaryheap#method.into_iter&quot;&gt; &lt;code&gt;into_iter&lt;/code&gt; 用&lt;/a&gt;のメソッド&lt;a href=&quot;struct.binaryheap&quot;&gt; &lt;code&gt;BinaryHeap&lt;/code&gt; &lt;/a&gt;（によって提供 &lt;code&gt;IntoIterator&lt;/code&gt; の形質）。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="41506355b29f22e9b8811a8d2b60d92fed5ea6d5" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.binaryheap#method.iter&quot;&gt;&lt;code&gt;iter&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.binaryheap&quot;&gt;&lt;code&gt;BinaryHeap&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は&lt;a href=&quot;struct.binaryheap&quot;&gt; &lt;code&gt;BinaryHeap&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;struct.binaryheap#method.iter&quot;&gt; &lt;code&gt;iter&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="e9675a6cb1b893dbb78e5cb9089bf79a6f234027" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.binaryheap#method.peek_mut&quot;&gt;&lt;code&gt;peek_mut&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.binaryheap&quot;&gt;&lt;code&gt;BinaryHeap&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は&lt;a href=&quot;struct.binaryheap#method.peek_mut&quot;&gt; &lt;code&gt;peek_mut&lt;/code&gt; &lt;/a&gt;メソッドによって作成され&lt;a href=&quot;struct.binaryheap&quot;&gt; &lt;code&gt;BinaryHeap&lt;/code&gt; &lt;/a&gt;。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="a3e0e69a8fe926bff3713eb4f60caf8069defb24" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.btreemap#method.into_iter&quot;&gt;&lt;code&gt;into_iter&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.btreemap&quot;&gt;&lt;code&gt;BTreeMap&lt;/code&gt;&lt;/a&gt; (provided by the &lt;code&gt;IntoIterator&lt;/code&gt; trait). See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; によって作成され&lt;a href=&quot;struct.btreemap#method.into_iter&quot;&gt; &lt;code&gt;into_iter&lt;/code&gt; の&lt;/a&gt;上の方法&lt;a href=&quot;struct.btreemap&quot;&gt; &lt;code&gt;BTreeMap&lt;/code&gt; &lt;/a&gt;（によって提供 &lt;code&gt;IntoIterator&lt;/code&gt; の形質）。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="514e5b56a0002147cc9f7ac8a43433a6a65225d9" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.btreemap#method.iter&quot;&gt;&lt;code&gt;iter&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.btreemap&quot;&gt;&lt;code&gt;BTreeMap&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;struct.btreemap&quot;&gt; &lt;code&gt;BTreeMap&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;struct.btreemap#method.iter&quot;&gt; &lt;code&gt;iter&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="f716d42a3e459fcee9b6f36db5dc5c8168d480b5" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.btreemap#method.iter_mut&quot;&gt;&lt;code&gt;iter_mut&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.btreemap&quot;&gt;&lt;code&gt;BTreeMap&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;struct.btreemap#method.iter_mut&quot;&gt; &lt;code&gt;iter_mut&lt;/code&gt; &lt;/a&gt;メソッドによって作成され&lt;a href=&quot;struct.btreemap&quot;&gt; &lt;code&gt;BTreeMap&lt;/code&gt; &lt;/a&gt;。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="1f4535b44687ead67d4ff87d0edaec473f93f580" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.btreemap#method.keys&quot;&gt;&lt;code&gt;keys&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.btreemap&quot;&gt;&lt;code&gt;BTreeMap&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;struct.btreemap&quot;&gt; &lt;code&gt;BTreeMap&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;struct.btreemap#method.keys&quot;&gt; &lt;code&gt;keys&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="d31858adce6dfcdec67ca057f391304b96efe373" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.btreemap#method.range&quot;&gt;&lt;code&gt;range&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.btreemap&quot;&gt;&lt;code&gt;BTreeMap&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;struct.btreemap&quot;&gt; &lt;code&gt;BTreeMap&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;struct.btreemap#method.range&quot;&gt; &lt;code&gt;range&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="beff4242dfe6af7e412bdc0cbf43b9ab3e974e59" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.btreemap#method.range_mut&quot;&gt;&lt;code&gt;range_mut&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.btreemap&quot;&gt;&lt;code&gt;BTreeMap&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;struct.btreemap#method.range_mut&quot;&gt; &lt;code&gt;range_mut&lt;/code&gt; &lt;/a&gt;メソッドによって作成され&lt;a href=&quot;struct.btreemap&quot;&gt; &lt;code&gt;BTreeMap&lt;/code&gt; &lt;/a&gt;。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="61ccad7bbc2caef64224c9df6c46da6d30f71236" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.btreemap#method.values&quot;&gt;&lt;code&gt;values&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.btreemap&quot;&gt;&lt;code&gt;BTreeMap&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;struct.btreemap&quot;&gt; &lt;code&gt;BTreeMap&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;struct.btreemap#method.values&quot;&gt; &lt;code&gt;values&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="32f656567e75b1c61207668fdcd4fee681fb158f" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.btreemap#method.values_mut&quot;&gt;&lt;code&gt;values_mut&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.btreemap&quot;&gt;&lt;code&gt;BTreeMap&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;struct.btreemap#method.values_mut&quot;&gt; &lt;code&gt;values_mut&lt;/code&gt; &lt;/a&gt;メソッドによって作成され&lt;a href=&quot;struct.btreemap&quot;&gt; &lt;code&gt;BTreeMap&lt;/code&gt; &lt;/a&gt;。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="954c25018729177ec5a7cd425af966f38ad45de9" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.btreeset#method.difference&quot;&gt;&lt;code&gt;difference&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.btreeset&quot;&gt;&lt;code&gt;BTreeSet&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;struct.btreeset&quot;&gt; &lt;code&gt;BTreeSet&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;struct.btreeset#method.difference&quot;&gt; &lt;code&gt;difference&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="311036e0ac34eb0ce755d849d1ee9dcf0da2fa6d" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.btreeset#method.intersection&quot;&gt;&lt;code&gt;intersection&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.btreeset&quot;&gt;&lt;code&gt;BTreeSet&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;struct.btreeset&quot;&gt; &lt;code&gt;BTreeSet&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;struct.btreeset#method.intersection&quot;&gt; &lt;code&gt;intersection&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="cd64d67da228b8471603fbb0b2df44241b404edf" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.btreeset#method.into_iter&quot;&gt;&lt;code&gt;into_iter&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.btreeset&quot;&gt;&lt;code&gt;BTreeSet&lt;/code&gt;&lt;/a&gt; (provided by the &lt;code&gt;IntoIterator&lt;/code&gt; trait). See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; によって作成され&lt;a href=&quot;struct.btreeset#method.into_iter&quot;&gt; &lt;code&gt;into_iter&lt;/code&gt; の&lt;/a&gt;上の方法&lt;a href=&quot;struct.btreeset&quot;&gt; &lt;code&gt;BTreeSet&lt;/code&gt; &lt;/a&gt;（によって提供 &lt;code&gt;IntoIterator&lt;/code&gt; の形質）。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="b2d51f3eed3f11c0fe92a56c05aa30ba63101b5b" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.btreeset#method.iter&quot;&gt;&lt;code&gt;iter&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.btreeset&quot;&gt;&lt;code&gt;BTreeSet&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;struct.btreeset&quot;&gt; &lt;code&gt;BTreeSet&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;struct.btreeset#method.iter&quot;&gt; &lt;code&gt;iter&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="4952396a08a80db78884e7472ef4fcdc98f30b89" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.btreeset#method.range&quot;&gt;&lt;code&gt;range&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.btreeset&quot;&gt;&lt;code&gt;BTreeSet&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;struct.btreeset&quot;&gt; &lt;code&gt;BTreeSet&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;struct.btreeset#method.range&quot;&gt; &lt;code&gt;range&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="03065ec43e94189db8db5b6c22bcd04c4d9e3d5f" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.btreeset#method.symmetric_difference&quot;&gt;&lt;code&gt;symmetric_difference&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.btreeset&quot;&gt;&lt;code&gt;BTreeSet&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;struct.btreeset&quot;&gt; &lt;code&gt;BTreeSet&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;struct.btreeset#method.symmetric_difference&quot;&gt; &lt;code&gt;symmetric_difference&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="06c95a89e54823ffe6dff81406fba47c36a4dc6c" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.btreeset#method.union&quot;&gt;&lt;code&gt;union&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.btreeset&quot;&gt;&lt;code&gt;BTreeSet&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;struct.btreeset&quot;&gt; &lt;code&gt;BTreeSet&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;struct.btreeset#method.union&quot;&gt; &lt;code&gt;union&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="512853e49000d203253875f2ca8249d15ea7353e" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.cstring#method.into_string&quot;&gt;&lt;code&gt;into_string&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.cstring&quot;&gt;&lt;code&gt;CString&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;struct.cstring&quot;&gt; &lt;code&gt;CString&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;struct.cstring#method.into_string&quot;&gt; &lt;code&gt;into_string&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="faa8b1395fad10dcbfc423094256b61e6d205866" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.hashmap#method.drain&quot;&gt;&lt;code&gt;drain&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.hashmap&quot;&gt;&lt;code&gt;HashMap&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は&lt;a href=&quot;struct.hashmap&quot;&gt; &lt;code&gt;HashMap&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;struct.hashmap#method.drain&quot;&gt; &lt;code&gt;drain&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="fa6f9e85339b1a29569ed12beacf3087627ad001" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.hashmap#method.drain_filter&quot;&gt;&lt;code&gt;drain_filter&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.hashmap&quot;&gt;&lt;code&gt;HashMap&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0800ef408d255e0937c01c82d43d77be20d45343" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.hashmap#method.into_iter&quot;&gt;&lt;code&gt;into_iter&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.hashmap&quot;&gt;&lt;code&gt;HashMap&lt;/code&gt;&lt;/a&gt; (provided by the &lt;code&gt;IntoIterator&lt;/code&gt; trait). See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;struct.hashmap&quot;&gt; &lt;code&gt;HashMap&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;struct.hashmap#method.into_iter&quot;&gt; &lt;code&gt;into_iter&lt;/code&gt; &lt;/a&gt;メソッド（ &lt;code&gt;IntoIterator&lt;/code&gt; トレイトによって提供される）によって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="4705ba350d7c8c1275936b511a97c6cd8aba318f" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.hashmap#method.into_keys&quot;&gt;&lt;code&gt;into_keys&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.hashmap&quot;&gt;&lt;code&gt;HashMap&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1b4e82dfb1dab57d4444a18c5890a931db0dff2" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.hashmap#method.into_values&quot;&gt;&lt;code&gt;into_values&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.hashmap&quot;&gt;&lt;code&gt;HashMap&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0608e2c033c0bbc3bd28c971540c2b970498e946" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.hashmap#method.iter&quot;&gt;&lt;code&gt;iter&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.hashmap&quot;&gt;&lt;code&gt;HashMap&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は&lt;a href=&quot;struct.hashmap&quot;&gt; &lt;code&gt;HashMap&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;struct.hashmap#method.iter&quot;&gt; &lt;code&gt;iter&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="0d3d57080a3c9ea2da73c2cffa1d26e9e4a02705" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.hashmap#method.iter_mut&quot;&gt;&lt;code&gt;iter_mut&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.hashmap&quot;&gt;&lt;code&gt;HashMap&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;struct.hashmap&quot;&gt; &lt;code&gt;HashMap&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;struct.hashmap#method.iter_mut&quot;&gt; &lt;code&gt;iter_mut&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="24475378883de5203105dba62856d4abf99e3544" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.hashmap#method.keys&quot;&gt;&lt;code&gt;keys&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.hashmap&quot;&gt;&lt;code&gt;HashMap&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;struct.hashmap&quot;&gt; &lt;code&gt;HashMap&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;struct.hashmap#method.keys&quot;&gt; &lt;code&gt;keys&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="9d0295f8ffe26eaa9c9d5777a9c742f561e9829a" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.hashmap#method.values&quot;&gt;&lt;code&gt;values&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.hashmap&quot;&gt;&lt;code&gt;HashMap&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;struct.hashmap&quot;&gt; &lt;code&gt;HashMap&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;struct.hashmap#method.values&quot;&gt; &lt;code&gt;values&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="29c5ae45f57800a030c9d11a0a477ba58c24833e" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.hashmap#method.values_mut&quot;&gt;&lt;code&gt;values_mut&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.hashmap&quot;&gt;&lt;code&gt;HashMap&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は&lt;a href=&quot;struct.hashmap&quot;&gt; &lt;code&gt;HashMap&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;struct.hashmap#method.values_mut&quot;&gt; &lt;code&gt;values_mut&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="7513d477a389bb5cb5a430e327122b1af796c3fd" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.hashset#method.difference&quot;&gt;&lt;code&gt;difference&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.hashset&quot;&gt;&lt;code&gt;HashSet&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は&lt;a href=&quot;struct.hashset&quot;&gt; &lt;code&gt;HashSet&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;struct.hashset#method.difference&quot;&gt; &lt;code&gt;difference&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="86301ec13deb5075922cbd995e23feac257a9d81" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.hashset#method.drain&quot;&gt;&lt;code&gt;drain&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.hashset&quot;&gt;&lt;code&gt;HashSet&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は&lt;a href=&quot;struct.hashset&quot;&gt; &lt;code&gt;HashSet&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;struct.hashset#method.drain&quot;&gt; &lt;code&gt;drain&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="df914df61467a304488c25085aad0396f75c08a3" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.hashset#method.drain_filter&quot;&gt;&lt;code&gt;drain_filter&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.hashset&quot;&gt;&lt;code&gt;HashSet&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ebb8dfa5cf525c05fe6f08d21ee543480482796" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.hashset#method.intersection&quot;&gt;&lt;code&gt;intersection&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.hashset&quot;&gt;&lt;code&gt;HashSet&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は&lt;a href=&quot;struct.hashset&quot;&gt; &lt;code&gt;HashSet&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;struct.hashset#method.intersection&quot;&gt; &lt;code&gt;intersection&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="b4fe9a5189ce4199be4828187c5779ad99c77194" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.hashset#method.into_iter&quot;&gt;&lt;code&gt;into_iter&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.hashset&quot;&gt;&lt;code&gt;HashSet&lt;/code&gt;&lt;/a&gt; (provided by the &lt;code&gt;IntoIterator&lt;/code&gt; trait). See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;struct.hashset&quot;&gt; &lt;code&gt;HashSet&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;struct.hashset#method.into_iter&quot;&gt; &lt;code&gt;into_iter&lt;/code&gt; &lt;/a&gt;メソッド（ &lt;code&gt;IntoIterator&lt;/code&gt; トレイトによって提供される）によって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="d0c83c37cc0812ff3b4a5b7bded4f379cae37eda" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.hashset#method.iter&quot;&gt;&lt;code&gt;iter&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.hashset&quot;&gt;&lt;code&gt;HashSet&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は&lt;a href=&quot;struct.hashset&quot;&gt; &lt;code&gt;HashSet&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;struct.hashset#method.iter&quot;&gt; &lt;code&gt;iter&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="2eb620627c49c8366b81c168c1e2da24ad0ba352" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.hashset#method.symmetric_difference&quot;&gt;&lt;code&gt;symmetric_difference&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.hashset&quot;&gt;&lt;code&gt;HashSet&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;struct.hashset&quot;&gt; &lt;code&gt;HashSet&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;struct.hashset#method.symmetric_difference&quot;&gt; &lt;code&gt;symmetric_difference&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="150f20ec4e603307925c0aee02dfd449f9a510cf" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.hashset#method.union&quot;&gt;&lt;code&gt;union&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.hashset&quot;&gt;&lt;code&gt;HashSet&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は&lt;a href=&quot;struct.hashset&quot;&gt; &lt;code&gt;HashSet&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;struct.hashset#method.union&quot;&gt; &lt;code&gt;union&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="2d89966c70887a327798b302de57b322446d731d" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.linkedlist#method.into_iter&quot;&gt;&lt;code&gt;into_iter&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.linkedlist&quot;&gt;&lt;code&gt;LinkedList&lt;/code&gt;&lt;/a&gt; (provided by the &lt;code&gt;IntoIterator&lt;/code&gt; trait). See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; によって作成され&lt;a href=&quot;struct.linkedlist#method.into_iter&quot;&gt; &lt;code&gt;into_iter&lt;/code&gt; 用&lt;/a&gt;のメソッド&lt;a href=&quot;struct.linkedlist&quot;&gt; &lt;code&gt;LinkedList&lt;/code&gt; の&lt;/a&gt;（によって提供 &lt;code&gt;IntoIterator&lt;/code&gt; の形質）。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="58115891c3a0ac7312c6ea2a52ac61968cc4906c" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.linkedlist#method.iter&quot;&gt;&lt;code&gt;iter&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.linkedlist&quot;&gt;&lt;code&gt;LinkedList&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は&lt;a href=&quot;struct.linkedlist&quot;&gt; &lt;code&gt;LinkedList&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;struct.linkedlist#method.iter&quot;&gt; &lt;code&gt;iter&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="f0659eea6bed999fa3680d324080162cd5e8a132" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.linkedlist#method.iter_mut&quot;&gt;&lt;code&gt;iter_mut&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.linkedlist&quot;&gt;&lt;code&gt;LinkedList&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は&lt;a href=&quot;struct.linkedlist#method.iter_mut&quot;&gt; &lt;code&gt;iter_mut&lt;/code&gt; &lt;/a&gt;メソッドによって作成され&lt;a href=&quot;struct.linkedlist&quot;&gt; &lt;code&gt;LinkedList&lt;/code&gt; &lt;/a&gt;。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="0aae0dd86db056d40eff085617d4cf75e5ca4cd1" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.path#method.ancestors&quot;&gt;&lt;code&gt;ancestors&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.path&quot;&gt;&lt;code&gt;Path&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;struct.path&quot;&gt; &lt;code&gt;Path&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;struct.path#method.ancestors&quot;&gt; &lt;code&gt;ancestors&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="678416258ee794f65fdd4a1cd12a337537c5938c" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.path#method.components&quot;&gt;&lt;code&gt;components&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.path&quot;&gt;&lt;code&gt;Path&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;struct.path&quot;&gt; &lt;code&gt;Path&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;struct.path#method.components&quot;&gt; &lt;code&gt;components&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="f7998e185f302bc549a882f13518743e61ee46ed" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.path#method.iter&quot;&gt;&lt;code&gt;iter&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.path&quot;&gt;&lt;code&gt;Path&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;struct.path&quot;&gt; &lt;code&gt;Path&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;struct.path#method.iter&quot;&gt; &lt;code&gt;iter&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="2cd612b3807ec02a5c6d66e1f1c48af60492df83" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.path#method.strip_prefix&quot;&gt;&lt;code&gt;strip_prefix&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.path&quot;&gt;&lt;code&gt;Path&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;struct.path&quot;&gt; &lt;code&gt;Path&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;struct.path#method.strip_prefix&quot;&gt; &lt;code&gt;strip_prefix&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="088542ff6ce5390ea17e8720dd59c0a74e6b5452" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.tcplistener#method.incoming&quot;&gt;&lt;code&gt;TcpListener::incoming&lt;/code&gt;&lt;/a&gt; method. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;struct.tcplistener#method.incoming&quot;&gt; &lt;code&gt;TcpListener::incoming&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="1b5816e88e64a2f2821568b7180ce9b608c65d11" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.tcplistener#method.incoming&quot;&gt;&lt;code&gt;incoming&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.tcplistener&quot;&gt;&lt;code&gt;TcpListener&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;struct.tcplistener&quot;&gt; &lt;code&gt;TcpListener&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;struct.tcplistener#method.incoming&quot;&gt; &lt;code&gt;incoming&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="1f4d8367fad76ae04d5e19a5385a27f59c0aaf13" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.vec#method.drain&quot;&gt;&lt;code&gt;drain&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.vec&quot;&gt;&lt;code&gt;Vec&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は&lt;a href=&quot;struct.vec&quot;&gt; &lt;code&gt;Vec&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;struct.vec#method.drain&quot;&gt; &lt;code&gt;drain&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。</target>
        </trans-unit>
        <trans-unit id="5f3bc5ceaa1713a6dc6144c9424b5691a097a496" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.vecdeque#method.drain&quot;&gt;&lt;code&gt;drain&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.vecdeque&quot;&gt;&lt;code&gt;VecDeque&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;struct.vecdeque&quot;&gt; &lt;code&gt;VecDeque&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;struct.vecdeque#method.drain&quot;&gt; &lt;code&gt;drain&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="b345fb68ea41cbf5a17dfb308f9d1a6e9820cc06" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.vecdeque#method.into_iter&quot;&gt;&lt;code&gt;into_iter&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.vecdeque&quot;&gt;&lt;code&gt;VecDeque&lt;/code&gt;&lt;/a&gt; (provided by the &lt;code&gt;IntoIterator&lt;/code&gt; trait). See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; によって作成され&lt;a href=&quot;struct.vecdeque#method.into_iter&quot;&gt; &lt;code&gt;into_iter&lt;/code&gt; の&lt;/a&gt;上の方法&lt;a href=&quot;struct.vecdeque&quot;&gt; &lt;code&gt;VecDeque&lt;/code&gt; &lt;/a&gt;（によって提供 &lt;code&gt;IntoIterator&lt;/code&gt; の形質）。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="5c15922d5946c2fdadf8c55e5b28d91817f56274" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.vecdeque#method.iter&quot;&gt;&lt;code&gt;iter&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.vecdeque&quot;&gt;&lt;code&gt;VecDeque&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;struct.vecdeque&quot;&gt; &lt;code&gt;VecDeque&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;struct.vecdeque#method.iter&quot;&gt; &lt;code&gt;iter&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="6dcf16ee1a7554354a5a44529cc2c194dcf3a513" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;struct.vecdeque#method.iter_mut&quot;&gt;&lt;code&gt;iter_mut&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.vecdeque&quot;&gt;&lt;code&gt;VecDeque&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;struct.vecdeque#method.iter_mut&quot;&gt; &lt;code&gt;iter_mut&lt;/code&gt; &lt;/a&gt;メソッドによって作成され&lt;a href=&quot;struct.vecdeque&quot;&gt; &lt;code&gt;VecDeque&lt;/code&gt; &lt;/a&gt;。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="c378dde9d0a6525bd047bdf905231180a99f3491" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;trait.iterator#method.chain&quot;&gt;&lt;code&gt;chain&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;trait.iterator#method.chain&quot;&gt; &lt;code&gt;chain&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="b7e65fcf3ce565260fcf0013397e867c30f8522f" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;trait.iterator#method.cloned&quot;&gt;&lt;code&gt;cloned&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;trait.iterator#method.cloned&quot;&gt; &lt;code&gt;cloned&lt;/code&gt; &lt;/a&gt;されたメソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="f5b898ca8f830f2683dbb470bc2669fdcc151557" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;trait.iterator#method.copied&quot;&gt;&lt;code&gt;copied&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;trait.iterator#method.copied&quot;&gt; &lt;code&gt;copied&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="6792715370c3a92e84d28374f5832cff5986bd03" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;trait.iterator#method.cycle&quot;&gt;&lt;code&gt;cycle&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;trait.iterator#method.cycle&quot;&gt; &lt;code&gt;cycle&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="eef34875ae92021a31b6bedf0e5ef3ef03a55346" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;trait.iterator#method.enumerate&quot;&gt;&lt;code&gt;enumerate&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;trait.iterator#method.enumerate&quot;&gt; &lt;code&gt;enumerate&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="9fb0d2f619194cb6fd2c5912cd0ab4f8aa1436b0" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;trait.iterator#method.filter&quot;&gt;&lt;code&gt;filter&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;trait.iterator#method.filter&quot;&gt; &lt;code&gt;filter&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="7b10e5f9bf83042ee3e1d8a41324ee574deb204c" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;trait.iterator#method.filter_map&quot;&gt;&lt;code&gt;filter_map&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;trait.iterator#method.filter_map&quot;&gt; &lt;code&gt;filter_map&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="e8efe5c2b3a46412d14b079c4efde7503ec17047" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;trait.iterator#method.flat_map&quot;&gt;&lt;code&gt;flat_map&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;trait.iterator#method.flat_map&quot;&gt; &lt;code&gt;flat_map&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="06ac94503cae6df0f4ea2938d28112afa01fe8f9" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;trait.iterator#method.flatten&quot;&gt;&lt;code&gt;flatten&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;trait.iterator#method.flatten&quot;&gt; &lt;code&gt;flatten&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="b8c0c8898fdf0a69bb894be3b262576aa94693ed" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;trait.iterator#method.fuse&quot;&gt;&lt;code&gt;fuse&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;trait.iterator#method.fuse&quot;&gt; &lt;code&gt;fuse&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="16538eabad39936ba061176498ea306e212f6f92" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;trait.iterator#method.inspect&quot;&gt;&lt;code&gt;inspect&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;trait.iterator#method.inspect&quot;&gt; &lt;code&gt;inspect&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="a0b5389b001bb0bbe98e28bcb36e5aebd8a66723" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;trait.iterator#method.map&quot;&gt;&lt;code&gt;map&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;trait.iterator#method.map&quot;&gt; &lt;code&gt;map&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="b50dc251fa4cf84989ab18f9a900ba7288f0b114" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;trait.iterator#method.map_while&quot;&gt;&lt;code&gt;map_while&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;trait.iterator#method.map_while&quot;&gt; &lt;code&gt;map_while&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="2a63b8c96bdf4e631228dfff76c51a72895aa1c2" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;trait.iterator#method.peekable&quot;&gt;&lt;code&gt;peekable&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;trait.iterator#method.peekable&quot;&gt; &lt;code&gt;peekable&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="77b9d3dc967cfc65e7923a1d25d998d0359bf8da" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;trait.iterator#method.rev&quot;&gt;&lt;code&gt;rev&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;trait.iterator#method.rev&quot;&gt; &lt;code&gt;rev&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="0c534d67b85da417a0620daeb199532327c51e03" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;trait.iterator#method.scan&quot;&gt;&lt;code&gt;scan&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;trait.iterator#method.scan&quot;&gt; &lt;code&gt;scan&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="d55ea7e68cc78050a3929f56a9674ef3cbe9031c" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;trait.iterator#method.skip&quot;&gt;&lt;code&gt;skip&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;trait.iterator#method.skip&quot;&gt; &lt;code&gt;skip&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="752b3b9ee442b1ede4f01e7280612ee155b893b6" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;trait.iterator#method.skip_while&quot;&gt;&lt;code&gt;skip_while&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;trait.iterator#method.skip_while&quot;&gt; &lt;code&gt;skip_while&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="e4194d8e81f0d479a0971b522dc10170de8177ce" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;trait.iterator#method.step_by&quot;&gt;&lt;code&gt;step_by&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;trait.iterator#method.step_by&quot;&gt; &lt;code&gt;step_by&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="ae2f32a2383fa23779c3295dfc6285ad6be64c98" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;trait.iterator#method.take&quot;&gt;&lt;code&gt;take&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;trait.iterator#method.take&quot;&gt; &lt;code&gt;take&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="431a8793b970c81fcc0ab5b7d979a63311ac642a" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;trait.iterator#method.take_while&quot;&gt;&lt;code&gt;take_while&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;trait.iterator#method.take_while&quot;&gt; &lt;code&gt;take_while&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="f6420f53e024dcbfd568efb25b94839f7a579e39" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;a href=&quot;trait.iterator#method.zip&quot;&gt;&lt;code&gt;zip&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;trait.iterator#method.zip&quot;&gt; &lt;code&gt;zip&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="8be96a57f8e063c35aa0cfee79161d9fbe1f4027" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is created by the &lt;code&gt;into_iter&lt;/code&gt; method on &lt;a href=&quot;struct.vec&quot;&gt;&lt;code&gt;Vec&lt;/code&gt;&lt;/a&gt; (provided by the &lt;a href=&quot;../iter/trait.intoiterator&quot;&gt;&lt;code&gt;IntoIterator&lt;/code&gt;&lt;/a&gt; trait).</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、&lt;a href=&quot;struct.vec&quot;&gt; &lt;code&gt;Vec&lt;/code&gt; &lt;/a&gt;の &lt;code&gt;into_iter&lt;/code&gt; メソッド（&lt;a href=&quot;../iter/trait.intoiterator&quot;&gt; &lt;code&gt;IntoIterator&lt;/code&gt; &lt;/a&gt;トレイトによって提供される）によって作成されます。</target>
        </trans-unit>
        <trans-unit id="75da1f33c5a1b29ca9ce3084de81aca63a2c8c06" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;struct&lt;/code&gt; is used to represent the exit status of a child process. Child processes are created via the &lt;a href=&quot;struct.command&quot;&gt;&lt;code&gt;Command&lt;/code&gt;&lt;/a&gt; struct and their exit status is exposed through the &lt;a href=&quot;struct.command#method.status&quot;&gt;&lt;code&gt;status&lt;/code&gt;&lt;/a&gt; method, or the &lt;a href=&quot;struct.child#method.wait&quot;&gt;&lt;code&gt;wait&lt;/code&gt;&lt;/a&gt; method of a &lt;a href=&quot;struct.child&quot;&gt;&lt;code&gt;Child&lt;/code&gt;&lt;/a&gt; process.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; は、子プロセスの終了ステータスを表すために使用されます。子プロセスは&lt;a href=&quot;struct.command&quot;&gt; &lt;code&gt;Command&lt;/code&gt; &lt;/a&gt;構造体を介して作成され、その終了ステータスは、&lt;a href=&quot;struct.command#method.status&quot;&gt; &lt;code&gt;status&lt;/code&gt; &lt;/a&gt;メソッド&lt;a href=&quot;struct.child&quot;&gt; &lt;code&gt;Child&lt;/code&gt; &lt;/a&gt;プロセスの&lt;a href=&quot;struct.child#method.wait&quot;&gt; &lt;code&gt;wait&lt;/code&gt; &lt;/a&gt;メソッドを通じて公開されます。</target>
        </trans-unit>
        <trans-unit id="5f5bb1decbaa26846cd44955c2f8ab7127199a37" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;use&lt;/code&gt; statement brings all public items defined in &lt;code&gt;std::collections&lt;/code&gt; into the current scope. Be careful when using the glob operator! Glob can make it harder to tell what names are in scope and where a name used in your program was defined.</source>
          <target state="translated">この &lt;code&gt;use&lt;/code&gt; ステートメントは、 &lt;code&gt;std::collections&lt;/code&gt; 定義されているすべてのパブリックアイテムを現在のスコープに移動します。glob演算子を使用するときは注意してください！Globは、どの名前がスコープ内にあり、プログラムで使用されている名前がどこで定義されたかをわかりにくくする場合があります。</target>
        </trans-unit>
        <trans-unit id="caecafb5a4fb0937d47c4a448338d709acd25fe7" translate="yes" xml:space="preserve">
          <source>This &lt;strong&gt;channel&lt;/strong&gt; is currently empty, but the &lt;strong&gt;Sender&lt;/strong&gt;(s) have not yet disconnected, so data may yet become available.</source>
          <target state="translated">この&lt;strong&gt;チャネル&lt;/strong&gt;は現在空ですが、&lt;strong&gt;送信者&lt;/strong&gt;はまだ切断されていないため、データがまだ利用可能になる可能性があります。</target>
        </trans-unit>
        <trans-unit id="8266d9d9a47bf63d7284fb3019e831be816c08a4" translate="yes" xml:space="preserve">
          <source>This Greek letter convention is usually just employed when the presence of a sequence is a technical detail; in particular, when we wish to &lt;em&gt;emphasize&lt;/em&gt; that we are operating on a sequence of token-trees, we will use the notation &quot;tt ...&quot; for the sequence, not a Greek letter.</source>
          <target state="translated">このギリシャ文字の規約は通常、シーケンスの存在が技術的な詳細である場合にのみ使用されます。特に、一連のトークンツリーで操作していることを&lt;em&gt;強調&lt;/em&gt;したい場合は、ギリシャ文字ではなく「tt ...」という表記を使用します。</target>
        </trans-unit>
        <trans-unit id="75b75d5ae6c1390e9d9181dd6cf33a8dbc7fda14" translate="yes" xml:space="preserve">
          <source>This alias exists for backwards compatibility, and may be eventually deprecated.</source>
          <target state="translated">このエイリアスは下位互換性のために存在し、最終的には非推奨となる可能性があります。</target>
        </trans-unit>
        <trans-unit id="6b20bc4e00b7823d1d79ae42b369f4aec802629c" translate="yes" xml:space="preserve">
          <source>This allows a program to terminate immediately and provide feedback to the caller of the program. &lt;code&gt;panic!&lt;/code&gt; should be used when a program reaches an unrecoverable state.</source>
          <target state="translated">これにより、プログラムは即座に終了し、プログラムの呼び出し元にフィードバックを提供できます。 &lt;code&gt;panic!&lt;/code&gt; プログラムが回復不可能な状態に達したときに使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="720612fc48419da4fea633357e945fe3ab75a62a" translate="yes" xml:space="preserve">
          <source>This allows creating a custom iterator with any behavior without using the more verbose syntax of creating a dedicated type and implementing the &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt; trait for it.</source>
          <target state="translated">これにより、専用タイプを作成してその&lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt;特性を実装するというより冗長な構文を使用せずに、任意の動作でカスタムイテレーターを作成できます。</target>
        </trans-unit>
        <trans-unit id="8257259a712f5169c7b4c3c0a8b238e35c31bcfe" translate="yes" xml:space="preserve">
          <source>This allows creating a custom iterator with any behavior without using the more verbose syntax of creating a dedicated type and implementing the &lt;code&gt;Iterator&lt;/code&gt; trait for it.</source>
          <target state="translated">これにより、専用のタイプを作成してその &lt;code&gt;Iterator&lt;/code&gt; トレイトを実装するというより冗長な構文を使用せずに、任意の動作でカスタムイテレーターを作成できます。</target>
        </trans-unit>
        <trans-unit id="df65a862360a6e0bd203ebc75d215550a55a7ec8" translate="yes" xml:space="preserve">
          <source>This allows the value to be dropped again.</source>
          <target state="translated">これにより、再び値を落とすことができます。</target>
        </trans-unit>
        <trans-unit id="6f7c82b24f94be6c3280942f62546df8a8a85985" translate="yes" xml:space="preserve">
          <source>This allows writing a projection that creates a &lt;a href=&quot;struct.pin&quot;&gt;&lt;code&gt;Pin&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;&amp;amp;mut Field&amp;gt;&lt;/code&gt;, thus witnessing that the field is pinned:</source>
          <target state="translated">これにより、&lt;a href=&quot;struct.pin&quot;&gt; &lt;code&gt;Pin&lt;/code&gt; &lt;/a&gt; &lt;code&gt;&amp;lt;&amp;amp;mut Field&amp;gt;&lt;/code&gt; を作成するプロジェクションを記述できるため、フィールドが固定されていることがわかります。</target>
        </trans-unit>
        <trans-unit id="e583956f9df46a2ff992eeadbf1d346839209a48" translate="yes" xml:space="preserve">
          <source>This allows writing a projection that creates a &lt;code&gt;Pin&amp;lt;&amp;amp;mut Field&amp;gt;&lt;/code&gt;, thus witnessing that the field is pinned:</source>
          <target state="translated">これにより、 &lt;code&gt;Pin&amp;lt;&amp;amp;mut Field&amp;gt;&lt;/code&gt; を作成するプロジェクションを記述できるようになり、フィールドが固定されていることがわかります。</target>
        </trans-unit>
        <trans-unit id="9ed737638d9ae3e5d76efaebf6336aa8e810e97d" translate="yes" xml:space="preserve">
          <source>This allows your code to type-check, which is useful if you are prototyping or implementing a trait that requires multiple methods which you don't plan of using all of.</source>
          <target state="translated">これは、プロトタイプを作成したり、複数のメソッドを必要とする形質を実装したりする場合に便利ですが、すべてのメソッドを使用する予定はありません。</target>
        </trans-unit>
        <trans-unit id="d056f20cad4a501761c404be3055779184b1614f" translate="yes" xml:space="preserve">
          <source>This also in turn requires the annotation &lt;code&gt;T: 'a&lt;/code&gt;, indicating that any references in &lt;code&gt;T&lt;/code&gt; are valid over the lifetime &lt;code&gt;'a&lt;/code&gt;.</source>
          <target state="translated">また、これには注釈 &lt;code&gt;T: 'a&lt;/code&gt; が必要です。これは、 &lt;code&gt;T&lt;/code&gt; 内のすべての参照が有効期間 &lt;code&gt;'a&lt;/code&gt; にわたって有効であることを示します。</target>
        </trans-unit>
        <trans-unit id="60e1ada09db527973a7bebfb74dc7b9bbc576185" translate="yes" xml:space="preserve">
          <source>This also means that all resources such as file descriptors and memory-mapped regions got duplicated. It is your responsibility to make sure that the closure does not violate library invariants by making invalid use of these duplicates.</source>
          <target state="translated">これはまた、ファイル記述子やメモリマップされた領域などのすべてのリソースが重複していることを意味します。これらの複製を無効に利用することで、クロージャがライブラリの不変性に違反しないようにするのはあなたの責任です。</target>
        </trans-unit>
        <trans-unit id="c5dab5f83abd965944fb4f235779eceb37146b12" translate="yes" xml:space="preserve">
          <source>This and &lt;a href=&quot;../macro.println&quot;&gt;&lt;code&gt;println!&lt;/code&gt;&lt;/a&gt; emit their output to stdout. Similarly to the &lt;a href=&quot;../macro.write&quot;&gt;&lt;code&gt;write!&lt;/code&gt;&lt;/a&gt; macro, the goal of these macros is to avoid intermediate allocations when printing output. Example usage is:</source>
          <target state="translated">これと&lt;a href=&quot;../macro.println&quot;&gt; &lt;code&gt;println!&lt;/code&gt; &lt;/a&gt;出力をstdoutに出力します。&lt;a href=&quot;../macro.write&quot;&gt; &lt;code&gt;write!&lt;/code&gt; &lt;/a&gt;同様に！マクロ、これらのマクロの目的は、出力を印刷するときに中間の割り当てを回避することです。使用例は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="acaf201fd6cc02b279b5987151a707c144a7e5c9" translate="yes" xml:space="preserve">
          <source>This and &lt;a href=&quot;../macro.writeln&quot;&gt;&lt;code&gt;writeln!&lt;/code&gt;&lt;/a&gt; are two macros which are used to emit the format string to a specified stream. This is used to prevent intermediate allocations of format strings and instead directly write the output. Under the hood, this function is actually invoking the &lt;a href=&quot;../io/trait.write#method.write_fmt&quot;&gt;&lt;code&gt;write_fmt&lt;/code&gt;&lt;/a&gt; function defined on the &lt;a href=&quot;../io/trait.write&quot;&gt;&lt;code&gt;std::io::Write&lt;/code&gt;&lt;/a&gt; trait. Example usage is:</source>
          <target state="translated">これと&lt;a href=&quot;../macro.writeln&quot;&gt; &lt;code&gt;writeln!&lt;/code&gt; &lt;/a&gt;指定されたストリームにフォーマット文字列を出力するために使用される2つのマクロです。これは、フォーマット文字列の中間割り当てを防ぐために使用され、代わりに出力を直接書き込みます。&lt;a href=&quot;../io/trait.write#method.write_fmt&quot;&gt; &lt;code&gt;write_fmt&lt;/code&gt; &lt;/a&gt;的には、この関数は&lt;a href=&quot;../io/trait.write&quot;&gt; &lt;code&gt;std::io::Write&lt;/code&gt; &lt;/a&gt;トレイトで定義されたwrite_fmt関数を実際に呼び出しています。使用例は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="7dd14a6dd33e863c7c3a9afcbc1b94db44474940" translate="yes" xml:space="preserve">
          <source>This appendix contains a glossary of Rust&amp;rsquo;s syntax, including operators and other symbols that appear by themselves or in the context of paths, generics, trait bounds, macros, attributes, comments, tuples, and brackets.</source>
          <target state="translated">この付録には、Rustの構文の用語集が含まれています。これには、単独で、またはパス、ジェネリック、トレイトの境界、マクロ、属性、コメント、タプル、およびブラケットのコンテキストで表示される演算子やその他の記号が含まれます。</target>
        </trans-unit>
        <trans-unit id="98f7d37c50386fc1a7bc45c602df60e2a6b2f88d" translate="yes" xml:space="preserve">
          <source>This appendix is about how Rust is made and how that affects you as a Rust developer.</source>
          <target state="translated">この付録は、Rust がどのように作られているか、そしてそれが Rust 開発者としてどのように影響するかについてです。</target>
        </trans-unit>
        <trans-unit id="0a5a5ca6ad8b433739f4a95c725e50e77d092d65" translate="yes" xml:space="preserve">
          <source>This applies even if the result of this method is unused!</source>
          <target state="translated">これは、このメソッドの結果が未使用であっても適用されます!</target>
        </trans-unit>
        <trans-unit id="2b1ddafbbcba87aafd5e8ce9688cb9d0214c48d2" translate="yes" xml:space="preserve">
          <source>This applies even if the result of this method is unused! (The part about being initialized is not yet fully decided, but until it is, the only safe approach is to ensure that they are indeed initialized.)</source>
          <target state="translated">これは、このメソッドの結果が未使用であっても適用されます! (初期化されるという部分はまだ完全には決まっていませんが、それが決まるまでは、本当に初期化されているかどうかを確認することが唯一の安全な方法です)。</target>
        </trans-unit>
        <trans-unit id="cf4d5070c48104546a550c9a051a5f05bc584068" translate="yes" xml:space="preserve">
          <source>This associated type corresponds to the &lt;code&gt;yield&lt;/code&gt; expression and the values which are allowed to be returned each time a generator yields. For example an iterator-as-a-generator would likely have this type as &lt;code&gt;T&lt;/code&gt;, the type being iterated over.</source>
          <target state="translated">この関連するタイプは、 &lt;code&gt;yield&lt;/code&gt; 式と、ジェネレーターがyieldするたびに返すことができる値に対応しています。たとえば、ジェネレーターとしてのイテレーターは、このタイプを &lt;code&gt;T&lt;/code&gt; として持つ可能性が高く、タイプが反復されます。</target>
        </trans-unit>
        <trans-unit id="fe55ae487fde4fa4dff7b2d6d6cdbe76cfbf6518" translate="yes" xml:space="preserve">
          <source>This attribute allows configuring the choice of global allocator. You can use this to implement a completely custom global allocator to route all default allocation requests to a custom object.</source>
          <target state="translated">この属性は、グローバルアロケータの選択を設定することができます。これを使用して、すべてのデフォルトの割り当て要求をカスタムオブジェクトにルーティングするための完全にカスタムなグローバルアロケータを実装することができます。</target>
        </trans-unit>
        <trans-unit id="ef26e5c3cab23c11bb733ef68934315ad78b85fb" translate="yes" xml:space="preserve">
          <source>This avoids reallocating where possible, but the conditions for that are strict, and subject to change, and so shouldn't be relied upon unless the &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; came from &lt;code&gt;From&amp;lt;VecDeque&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt; and hasn't been reallocated.</source>
          <target state="translated">これにより、可能な場合は再割り当てを回避できますが、その条件は厳格であり、変更される可能性があるため、 &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; が &lt;code&gt;From&amp;lt;VecDeque&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt; からのものであり、再割り当てされていない限り、これに依存しないでください。</target>
        </trans-unit>
        <trans-unit id="83aca27198b7bcda96ac6aa2d82d76c078c81a23" translate="yes" xml:space="preserve">
          <source>This behavior is no longer valid in edition 2018.</source>
          <target state="translated">この動作は2018年版では無効になりました。</target>
        </trans-unit>
        <trans-unit id="c09355cbc8b51304e7c4f53224a50044b1a70814" translate="yes" xml:space="preserve">
          <source>This book also does not serve as a reference to the &lt;a href=&quot;../std/index&quot;&gt;standard library&lt;/a&gt; included in the language distribution. Those libraries are documented separately by extracting documentation attributes from their source code. Many of the features that one might expect to be language features are library features in Rust, so what you're looking for may be there, not here.</source>
          <target state="translated">この本は、言語配布に含まれている&lt;a href=&quot;../std/index&quot;&gt;標準ライブラリ&lt;/a&gt;への参照としても役立ちません。これらのライブラリは、ソースコードからドキュメンテーション属性を抽出することで個別にドキュメント化されます。言語機能であると期待できる機能の多くはRustのライブラリ機能であるため、探しているものがここではなく、そこにある可能性があります。</target>
        </trans-unit>
        <trans-unit id="8e20080fb8e1699ed580bf1c766151d2b69a59c9" translate="yes" xml:space="preserve">
          <source>This book also only serves as a reference to what is available in stable Rust. For unstable features being worked on, see the &lt;a href=&quot;https://doc.rust-lang.org/nightly/unstable-book/index.html&quot;&gt;Unstable Book&lt;/a&gt;.</source>
          <target state="translated">この本は、安定したRustで利用できるものへの参照としても役立ちます。作業中の不安定な機能については、「&lt;a href=&quot;https://doc.rust-lang.org/nightly/unstable-book/index.html&quot;&gt;不安定版」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="32b7e021bdc132a2756c978c8a1d27d9e8d25d04" translate="yes" xml:space="preserve">
          <source>This book assumes that you&amp;rsquo;ve written code in another programming language but doesn&amp;rsquo;t make any assumptions about which one. We&amp;rsquo;ve tried to make the material broadly accessible to those from a wide variety of programming backgrounds. We don&amp;rsquo;t spend a lot of time talking about what programming &lt;em&gt;is&lt;/em&gt; or how to think about it. If you&amp;rsquo;re entirely new to programming, you would be better served by reading a book that specifically provides an introduction to programming.</source>
          <target state="translated">この本は、あなたが別のプログラミング言語でコードを書いたことを前提としていますが、どの言語についても何も想定していません。私たちは、さまざまなプログラミングの背景を持つ人々がその素材を広く利用できるようにしています。プログラミング&lt;em&gt;とは&lt;/em&gt;何か、それについてどう考えるかについて&lt;em&gt;は&lt;/em&gt;、あまり時間をかけません。プログラミングにまったく慣れていない場合は、プログラミングの概要を具体的に説明した本を読んだほうがよいでしょう。</target>
        </trans-unit>
        <trans-unit id="fb8d9819998123cf06ddd8f5a1ff9953b5c7298e" translate="yes" xml:space="preserve">
          <source>This book does not assume you are reading this book sequentially. Each chapter generally can be read standalone, but will cross-link to other chapters for facets of the language they refer to, but do not discuss.</source>
          <target state="translated">本書は、本書を順次読むことを前提としたものではありません。各章は一般的に単独で読むことができますが、他の章にクロスリンクして、参照しているが、議論していない言語の面については、他の章を参照しています。</target>
        </trans-unit>
        <trans-unit id="74d346bfc5c0837e4df013dba9f47fd4b57ffe9b" translate="yes" xml:space="preserve">
          <source>This book does not serve as an introduction to the language. Background familiarity with the language is assumed. A separate &lt;a href=&quot;../index&quot;&gt;book&lt;/a&gt; is available to help acquire such background familiarity.</source>
          <target state="translated">この本は、言語の紹介にはなりません。言語に精通していることを前提としています。そのような背景知識を習得するのに役立つ別の&lt;a href=&quot;../index&quot;&gt;本&lt;/a&gt;が入手可能です。</target>
        </trans-unit>
        <trans-unit id="4589512ba2ae3140ba2d5cf22da84c708acf0a3c" translate="yes" xml:space="preserve">
          <source>This book fully embraces the potential of Rust to empower its users. It&amp;rsquo;s a friendly and approachable text intended to help you level up not just your knowledge of Rust, but also your reach and confidence as a programmer in general. So dive in, get ready to learn&amp;mdash;and welcome to the Rust community!</source>
          <target state="translated">この本は、Rustがユーザーに力を与える可能性を十分に取り入れています。これは、Rustに関する知識だけでなく、プログラマーとしてのリーチと自信を高めるための、親しみやすく親しみやすいテキストです。さあ、始めましょう。学ぶ準備をしてください。そしてRustコミュニティにようこそ！</target>
        </trans-unit>
        <trans-unit id="5eac84b162d067e7c7224575575cec18251ae81c" translate="yes" xml:space="preserve">
          <source>This book is the primary reference for the Rust programming language. It provides three kinds of material:</source>
          <target state="translated">本書は、プログラミング言語Rustの主要なリファレンスです。3種類の資料を提供しています。</target>
        </trans-unit>
        <trans-unit id="4dac54ff1b6d498bb0e5ad5ca44a29d6b2c3c87b" translate="yes" xml:space="preserve">
          <source>This book only contains information about stable features, as in-progress features are still changing, and surely they&amp;rsquo;ll be different between when this book was written and when they get enabled in stable builds. You can find documentation for nightly-only features online.</source>
          <target state="translated">進行中の機能はまだ変更されているため、この本には安定した機能に関する情報のみが含まれており、この本が作成されたときと安定したビルドで有効になるときとで違います。夜間限定機能のドキュメントはオンラインで見つけることができます。</target>
        </trans-unit>
        <trans-unit id="9b40452b3457baf6eb9c9eb4c95b596dc78a3493" translate="yes" xml:space="preserve">
          <source>This broken invariant is then later observed.</source>
          <target state="translated">この壊れた不変量は後に観測されます。</target>
        </trans-unit>
        <trans-unit id="626674212943f16d78b9c64b216d4813683d4bcd" translate="yes" xml:space="preserve">
          <source>This buffer is always stored on the heap.</source>
          <target state="translated">このバッファは常にヒープに格納されます。</target>
        </trans-unit>
        <trans-unit id="533f834501c9981cf01926064551726140f691d1" translate="yes" xml:space="preserve">
          <source>This builder also supports platform-specific options.</source>
          <target state="translated">このビルダーは、プラットフォーム固有のオプションもサポートしています。</target>
        </trans-unit>
        <trans-unit id="828127de31395e4a312b7fc3b3384b3f2a31aa51" translate="yes" xml:space="preserve">
          <source>This builder exposes the ability to configure how a &lt;a href=&quot;struct.file&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt; is opened and what operations are permitted on the open file. The &lt;a href=&quot;struct.file#method.open&quot;&gt;&lt;code&gt;File::open&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;struct.file#method.create&quot;&gt;&lt;code&gt;File::create&lt;/code&gt;&lt;/a&gt; methods are aliases for commonly used options using this builder.</source>
          <target state="translated">このビルダーは、&lt;a href=&quot;struct.file&quot;&gt; &lt;code&gt;File&lt;/code&gt; &lt;/a&gt;を開く方法と、開いているファイルで許可される操作を構成する機能を公開します。&lt;a href=&quot;struct.file#method.open&quot;&gt; &lt;code&gt;File::open&lt;/code&gt; &lt;/a&gt;し、&lt;a href=&quot;struct.file#method.create&quot;&gt; &lt;code&gt;File::create&lt;/code&gt; &lt;/a&gt;方法は、このビルダーを使用して一般的に使用されるオプションの別名です。</target>
        </trans-unit>
        <trans-unit id="e3a75e262b3ddd48064e08eaf81396d4af4ef1e5" translate="yes" xml:space="preserve">
          <source>This call borrows &lt;code&gt;Cell&lt;/code&gt; mutably (at compile-time) which guarantees that we possess the only reference.</source>
          <target state="translated">この呼び出しは、 &lt;code&gt;Cell&lt;/code&gt; を（コンパイル時に）変更可能に借用し、唯一の参照を所有していることを保証します。</target>
        </trans-unit>
        <trans-unit id="5a4e17ce4bfa3ac12c6fb727cdafac307c2e7b00" translate="yes" xml:space="preserve">
          <source>This call borrows &lt;code&gt;RefCell&lt;/code&gt; mutably (at compile-time) so there is no need for dynamic checks.</source>
          <target state="translated">この呼び出しは &lt;code&gt;RefCell&lt;/code&gt; を変更可能に（コンパイル時に）借りるので、動的チェックの必要はありません。</target>
        </trans-unit>
        <trans-unit id="6f04390b2a6147633d5eca54b6b75468f6c87ab6" translate="yes" xml:space="preserve">
          <source>This call borrows the &lt;code&gt;UnsafeCell&lt;/code&gt; mutably (at compile-time) which guarantees that we possess the only reference.</source>
          <target state="translated">この呼び出しは、 &lt;code&gt;UnsafeCell&lt;/code&gt; を（コンパイル時に）可変的に借用します。これにより、唯一の参照を所有することが保証されます。</target>
        </trans-unit>
        <trans-unit id="07dea4d9325843f5f46d2875aa2d7fc09a6140cf" translate="yes" xml:space="preserve">
          <source>This call is similar to &lt;a href=&quot;#method.get_mut&quot;&gt;&lt;code&gt;get_mut&lt;/code&gt;&lt;/a&gt; but more specialized. It borrows &lt;code&gt;RefCell&lt;/code&gt; mutably to ensure no borrows exist and then resets the state tracking shared borrows. This is relevant if some &lt;code&gt;Ref&lt;/code&gt; or &lt;code&gt;RefMut&lt;/code&gt; borrows have been leaked.</source>
          <target state="translated">この呼び出しは&lt;a href=&quot;#method.get_mut&quot;&gt; &lt;code&gt;get_mut&lt;/code&gt; に&lt;/a&gt;似ていますが、より特殊化されています。これは借り &lt;code&gt;RefCell&lt;/code&gt; がmutablyない借りが存在しないことを確認すると、共有借りトラッキング状態をリセットします。これは、一部の &lt;code&gt;Ref&lt;/code&gt; または &lt;code&gt;RefMut&lt;/code&gt; の借用がリークされた場合に関連します。</target>
        </trans-unit>
        <trans-unit id="e72e4c34a367723e7d0f2fd64a605d769a73a61b" translate="yes" xml:space="preserve">
          <source>This call is similar to &lt;a href=&quot;struct.refcell#method.get_mut&quot;&gt;&lt;code&gt;get_mut&lt;/code&gt;&lt;/a&gt; but more specialized. It borrows &lt;code&gt;RefCell&lt;/code&gt; mutably to ensure no borrows exist and then resets the state tracking shared borrows. This is relevant if some &lt;code&gt;Ref&lt;/code&gt; or &lt;code&gt;RefMut&lt;/code&gt; borrows have been leaked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bafb9cba9c70e76a1a3bb46e83a3fb5e4a1e4a73" translate="yes" xml:space="preserve">
          <source>This can also be thought of as the fallible form of &lt;a href=&quot;#method.for_each&quot;&gt;&lt;code&gt;for_each()&lt;/code&gt;&lt;/a&gt; or as the stateless version of &lt;a href=&quot;#method.try_fold&quot;&gt;&lt;code&gt;try_fold()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これは、&lt;a href=&quot;#method.for_each&quot;&gt; &lt;code&gt;for_each()&lt;/code&gt; の&lt;/a&gt;誤った形式、または&lt;a href=&quot;#method.try_fold&quot;&gt; &lt;code&gt;try_fold()&lt;/code&gt; の&lt;/a&gt;ステートレスバージョンと考えることもできます。</target>
        </trans-unit>
        <trans-unit id="561a3555fef68cbba4ae35243cef025c7f810a34" translate="yes" xml:space="preserve">
          <source>This can also be thought of as the fallible form of &lt;a href=&quot;trait.iterator#method.for_each&quot;&gt;&lt;code&gt;for_each()&lt;/code&gt;&lt;/a&gt; or as the stateless version of &lt;a href=&quot;trait.iterator#method.try_fold&quot;&gt;&lt;code&gt;try_fold()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これは、&lt;a href=&quot;trait.iterator#method.for_each&quot;&gt; &lt;code&gt;for_each()&lt;/code&gt; の&lt;/a&gt;フォールブル形式、または&lt;a href=&quot;trait.iterator#method.try_fold&quot;&gt; &lt;code&gt;try_fold()&lt;/code&gt; の&lt;/a&gt;ステートレスバージョンと考えることもできます。</target>
        </trans-unit>
        <trans-unit id="dc5e7768aa508543b82b361f251df561c08e6d32" translate="yes" xml:space="preserve">
          <source>This can also be used in multithreaded applications, in order to send a message to other threads warning that a thread has panicked (e.g., for monitoring purposes).</source>
          <target state="translated">これはマルチスレッドアプリケーションでも使用でき、スレッドがパニックに陥ったことを警告するメッセージを他のスレッドに送ることができます (監視目的など)。</target>
        </trans-unit>
        <trans-unit id="3ff7f3a5aeb76318844d8c8fdfdc79fcab462b99" translate="yes" xml:space="preserve">
          <source>This can also happen when using a type implementing &lt;code&gt;Fn&lt;/code&gt; or &lt;code&gt;FnMut&lt;/code&gt;, as neither allows moving out of them (they usually represent closures which can be called more than once). Much of the text following applies equally well to non-&lt;code&gt;FnOnce&lt;/code&gt; closure bodies.</source>
          <target state="translated">これは、 &lt;code&gt;Fn&lt;/code&gt; または &lt;code&gt;FnMut&lt;/code&gt; を実装する型を使用している場合にも発生する可能性があります。どちらもそれらから移動できないためです（通常、これらは複数回呼び出すことができるクロージャを表します）。以下のテキストの多くは、 &lt;code&gt;FnOnce&lt;/code&gt; 以外のクロージャーボディにも同様に当てはまります。</target>
        </trans-unit>
        <trans-unit id="115ef26a79f6ceeca6376e7547342f4fb025dc8d" translate="yes" xml:space="preserve">
          <source>This can be cast to a pointer of any kind. Ensure that the access is unique (no active references, mutable or not) when casting to &lt;code&gt;&amp;amp;mut T&lt;/code&gt;, and ensure that there are no mutations or mutable aliases going on when casting to &lt;code&gt;&amp;amp;T&lt;/code&gt;</source>
          <target state="translated">これは、あらゆる種類のポインタにキャストできます。 &lt;code&gt;&amp;amp;mut T&lt;/code&gt; にキャストするときにアクセスが一意であること（アクティブな参照がない、変更可能かどうか）、および &lt;code&gt;&amp;amp;T&lt;/code&gt; にキャストするときに変更または変更可能なエイリアスがないことを確認してください</target>
        </trans-unit>
        <trans-unit id="214edc09ead3c27edfef862878240910ed92a93e" translate="yes" xml:space="preserve">
          <source>This can be constructed by the &lt;a href=&quot;struct.formatter#method.debug_list&quot;&gt;&lt;code&gt;Formatter::debug_list&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">これは&lt;a href=&quot;struct.formatter#method.debug_list&quot;&gt; &lt;code&gt;Formatter::debug_list&lt;/code&gt; &lt;/a&gt;メソッドで作成できます。</target>
        </trans-unit>
        <trans-unit id="c7514961910752b90460d88f227b5817215d7f6e" translate="yes" xml:space="preserve">
          <source>This can be constructed by the &lt;a href=&quot;struct.formatter#method.debug_map&quot;&gt;&lt;code&gt;Formatter::debug_map&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">これは&lt;a href=&quot;struct.formatter#method.debug_map&quot;&gt; &lt;code&gt;Formatter::debug_map&lt;/code&gt; &lt;/a&gt;メソッドで構築できます。</target>
        </trans-unit>
        <trans-unit id="db45b1697100bb4357e93b4848fb22d93091bccd" translate="yes" xml:space="preserve">
          <source>This can be constructed by the &lt;a href=&quot;struct.formatter#method.debug_set&quot;&gt;&lt;code&gt;Formatter::debug_set&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">これは&lt;a href=&quot;struct.formatter#method.debug_set&quot;&gt; &lt;code&gt;Formatter::debug_set&lt;/code&gt; &lt;/a&gt;メソッドで構築できます。</target>
        </trans-unit>
        <trans-unit id="efbf03337e671dc0f2d75f1c2d72ed7746b99e34" translate="yes" xml:space="preserve">
          <source>This can be constructed by the &lt;a href=&quot;struct.formatter#method.debug_struct&quot;&gt;&lt;code&gt;Formatter::debug_struct&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">これは&lt;a href=&quot;struct.formatter#method.debug_struct&quot;&gt; &lt;code&gt;Formatter::debug_struct&lt;/code&gt; &lt;/a&gt;メソッドで構築できます。</target>
        </trans-unit>
        <trans-unit id="daed88198496b5861ca72aa01db8f1e07a7a1fbc" translate="yes" xml:space="preserve">
          <source>This can be constructed by the &lt;a href=&quot;struct.formatter#method.debug_tuple&quot;&gt;&lt;code&gt;Formatter::debug_tuple&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">これは&lt;a href=&quot;struct.formatter#method.debug_tuple&quot;&gt; &lt;code&gt;Formatter::debug_tuple&lt;/code&gt; &lt;/a&gt;メソッドで作成できます。</target>
        </trans-unit>
        <trans-unit id="f00711c55f275b9886eb0ce781693c9e5c9caed4" translate="yes" xml:space="preserve">
          <source>This can be resolved by changing the type annotation or removing it entirely if it can be inferred.</source>
          <target state="translated">これは、型のアノテーションを変更するか、推測できる場合は完全に削除することで解決できます。</target>
        </trans-unit>
        <trans-unit id="21c003ed23b457ffebe1b7112c3e64636889beae" translate="yes" xml:space="preserve">
          <source>This can be used to avoid allocations in the most trivial case.</source>
          <target state="translated">これは、最も些細なケースでの割り当てを回避するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="2479ae89d6780ca289ef37404c0461658bc53872" translate="yes" xml:space="preserve">
          <source>This can be used to compare &lt;code&gt;&amp;amp;T&lt;/code&gt; references (which coerce to &lt;code&gt;*const T&lt;/code&gt; implicitly) by their address rather than comparing the values they point to (which is what the &lt;code&gt;PartialEq for &amp;amp;T&lt;/code&gt; implementation does).</source>
          <target state="translated">これは、 &lt;code&gt;&amp;amp;T&lt;/code&gt; 参照（ &lt;code&gt;*const T&lt;/code&gt; に暗黙的に強制される）を、それらが指す値（ &lt;code&gt;PartialEq for &amp;amp;T&lt;/code&gt; 実装のPartialEqが行うこと）を比較するのではなく、アドレスで比較するために使用できます。</target>
        </trans-unit>
        <trans-unit id="b3720c96ba6b1476408a923be1876044bc567298" translate="yes" xml:space="preserve">
          <source>This can be used to compare enums that carry data, while disregarding the actual data:</source>
          <target state="translated">これは、実際のデータを無視して、データを運ぶ列挙型を比較するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="27925db5758baea8a7b4ada29852f78f4d3d7a94" translate="yes" xml:space="preserve">
          <source>This can be used to handle errors that would otherwise only be caught when the &lt;code&gt;File&lt;/code&gt; is closed. Dropping a file will ignore errors in synchronizing this in-memory data.</source>
          <target state="translated">これは、 &lt;code&gt;File&lt;/code&gt; が閉じられたときにのみキャッチされるエラーを処理するために使用できます。ファイルを削除すると、このメモリ内データを同期する際のエラーは無視されます。</target>
        </trans-unit>
        <trans-unit id="9856559b29a29e0f25c3e61f2c093f50c7905e19" translate="yes" xml:space="preserve">
          <source>This can be used to hash a &lt;code&gt;&amp;amp;T&lt;/code&gt; reference (which coerces to &lt;code&gt;*const T&lt;/code&gt; implicitly) by its address rather than the value it points to (which is what the &lt;code&gt;Hash for &amp;amp;T&lt;/code&gt; implementation does).</source>
          <target state="translated">これは、 &lt;code&gt;&amp;amp;T&lt;/code&gt; 参照が指す値（これは &lt;code&gt;Hash for &amp;amp;T&lt;/code&gt; 実装のハッシュです）ではなく、アドレスによって＆T参照（ &lt;code&gt;*const T&lt;/code&gt; に暗黙的に強制される）をハッシュするために使用できます。</target>
        </trans-unit>
        <trans-unit id="13a7b507773148ef054095424c9d9ac4d8251d3e" translate="yes" xml:space="preserve">
          <source>This can be used to safely get a strong reference (by calling &lt;a href=&quot;struct.weak#method.upgrade&quot;&gt;&lt;code&gt;upgrade&lt;/code&gt;&lt;/a&gt; later) or to deallocate the weak count by dropping the &lt;code&gt;Weak&amp;lt;T&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">これは、（後で&lt;a href=&quot;struct.weak#method.upgrade&quot;&gt; &lt;code&gt;upgrade&lt;/code&gt; &lt;/a&gt;を呼び出すことによって）強力な参照を安全に取得するため、または &lt;code&gt;Weak&amp;lt;T&amp;gt;&lt;/code&gt; 削除して弱いカウントの割り当てを解除するために使用できます。</target>
        </trans-unit>
        <trans-unit id="d817729d2569d0ddec2d2ba9e954b932bf7153c3" translate="yes" xml:space="preserve">
          <source>This can be used to simply obtain ownership of the underlying error; it can also be used for advanced error recovery.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb4c5fc4f14344c508855aa0c67808589d2ea5df" translate="yes" xml:space="preserve">
          <source>This can be useful if you are prototyping and are just looking to have your code type-check, or if you're implementing a trait that requires multiple methods, and you're only planning on using one of them.</source>
          <target state="translated">これは、プロトタイピングをしていて、コードのタイプチェックをしてもらいたい場合や、複数のメソッドを必要とする形質を実装していて、そのうちの1つだけを使う予定の場合に便利です。</target>
        </trans-unit>
        <trans-unit id="1ab14e32989b6a2b12b8a3fb1b8ae13359f650e9" translate="yes" xml:space="preserve">
          <source>This can be useful if you are prototyping and are just looking to have your code typecheck.</source>
          <target state="translated">これは、プロトタイピングをしていて、コードをタイプチェックしたいだけの場合に便利です。</target>
        </trans-unit>
        <trans-unit id="13e97c3892555defded3caf3fd786d6a9bf7c197" translate="yes" xml:space="preserve">
          <source>This can be useful if you are prototyping and are just looking to have your code typecheck. &lt;code&gt;todo!&lt;/code&gt; works exactly like &lt;code&gt;unimplemented!&lt;/code&gt;. The only difference between the two macros is the name.</source>
          <target state="translated">これは、プロトタイプを作成していて、コードのタイプチェックを行うだけの場合に役立ちます。 &lt;code&gt;todo!&lt;/code&gt; &lt;code&gt;unimplemented!&lt;/code&gt; ように動作します！。2つのマクロの唯一の違いは名前です。</target>
        </trans-unit>
        <trans-unit id="8c8e1855be0fe981425a92585a82ff10846bce81" translate="yes" xml:space="preserve">
          <source>This can be useful when we want to access a &lt;code&gt;MaybeUninit&lt;/code&gt; that has been initialized but don't have ownership of the &lt;code&gt;MaybeUninit&lt;/code&gt; (preventing the use of &lt;code&gt;.assume_init()&lt;/code&gt;).</source>
          <target state="translated">これは、初期化されているが &lt;code&gt;MaybeUninit&lt;/code&gt; の所有権を持たない &lt;code&gt;MaybeUninit&lt;/code&gt; にアクセスする場合に &lt;code&gt;.assume_init()&lt;/code&gt; 使用を防止します）。</target>
        </trans-unit>
        <trans-unit id="1ab94494ce69e91c90f0acb5a81528e74b707291" translate="yes" xml:space="preserve">
          <source>This can never cause a problem in safe code because implementing a type that relies on pinning requires unsafe code, but be aware that deciding to make use of pinning in your type (for example by implementing some operation on &lt;a href=&quot;struct.pin&quot;&gt;&lt;code&gt;Pin&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;&amp;amp;Self&amp;gt;&lt;/code&gt; or &lt;a href=&quot;struct.pin&quot;&gt;&lt;code&gt;Pin&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;&amp;amp;mut Self&amp;gt;&lt;/code&gt;) has consequences for your &lt;a href=&quot;../ops/trait.drop#tymethod.drop&quot;&gt;&lt;code&gt;Drop&lt;/code&gt;&lt;/a&gt; implementation as well: if an element of your type could have been pinned, you must treat &lt;a href=&quot;../ops/trait.drop#tymethod.drop&quot;&gt;&lt;code&gt;Drop&lt;/code&gt;&lt;/a&gt; as implicitly taking &lt;a href=&quot;struct.pin&quot;&gt;&lt;code&gt;Pin&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;&amp;amp;mut Self&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">固定に依存する型を実装するには安全でないコードが必要になるため、これによって安全なコードで問題が発生することはありませんが、型で固定を使用することを決定することに注意してください（たとえば、&lt;a href=&quot;struct.pin&quot;&gt; &lt;code&gt;Pin&lt;/code&gt; &lt;/a&gt; &lt;code&gt;&amp;lt;&amp;amp;Self&amp;gt;&lt;/code&gt; または&lt;a href=&quot;struct.pin&quot;&gt; &lt;code&gt;Pin&lt;/code&gt; &lt;/a&gt; &lt;code&gt;&amp;lt;&amp;amp;mut Self&amp;gt;&lt;/code&gt; 何らかの操作を実装することによって）Self&amp;gt;）は、&lt;a href=&quot;../ops/trait.drop#tymethod.drop&quot;&gt; &lt;code&gt;Drop&lt;/code&gt; の&lt;/a&gt;実装にも影響を及ぼします。タイプの要素が固定されている可能性がある場合は、&lt;a href=&quot;../ops/trait.drop#tymethod.drop&quot;&gt; &lt;code&gt;Drop&lt;/code&gt; &lt;/a&gt;を暗黙的に&lt;a href=&quot;struct.pin&quot;&gt; &lt;code&gt;Pin&lt;/code&gt; &lt;/a&gt; &lt;code&gt;&amp;lt;&amp;amp;mut Self&amp;gt;&lt;/code&gt; を取るものとして扱う必要があります。</target>
        </trans-unit>
        <trans-unit id="b8075fc432fec0682f4342dc70f37276a8d8a19f" translate="yes" xml:space="preserve">
          <source>This can never cause a problem in safe code because implementing a type that relies on pinning requires unsafe code, but be aware that deciding to make use of pinning in your type (for example by implementing some operation on &lt;code&gt;Pin&amp;lt;&amp;amp;Self&amp;gt;&lt;/code&gt; or &lt;code&gt;Pin&amp;lt;&amp;amp;mut Self&amp;gt;&lt;/code&gt;) has consequences for your &lt;code&gt;Drop&lt;/code&gt; implementation as well: if an element of your type could have been pinned, you must treat Drop as implicitly taking &lt;code&gt;Pin&amp;lt;&amp;amp;mut Self&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">ピン留めに依存する型を実装することは安全でないコードを必要とするため、これが安全なコードで問題を引き起こすことは決してありませんが、（たとえば、 &lt;code&gt;Pin&amp;lt;&amp;amp;Self&amp;gt;&lt;/code&gt; または &lt;code&gt;Pin&amp;lt;&amp;amp;mut Self&amp;gt;&lt;/code&gt; 何らかの操作を実装することによって）タイプでピン留めを利用することを決定することに注意してくださいSelf&amp;gt;）も &lt;code&gt;Drop&lt;/code&gt; 実装に影響を与えます。自分のタイプの要素が固定されている可能性がある場合、Dropを暗黙的に &lt;code&gt;Pin&amp;lt;&amp;amp;mut Self&amp;gt;&lt;/code&gt; として扱う必要があります。</target>
        </trans-unit>
        <trans-unit id="cadc6079abb6a4bbc592c234ce0da222e1a2fdc1" translate="yes" xml:space="preserve">
          <source>This change unifies all the calls to &lt;code&gt;simulated_expensive_calculation&lt;/code&gt; and solves the problem of the first &lt;code&gt;if&lt;/code&gt; block unnecessarily calling the function twice. Unfortunately, we&amp;rsquo;re now calling this function and waiting for the result in all cases, which includes the inner &lt;code&gt;if&lt;/code&gt; block that doesn&amp;rsquo;t use the result value at all.</source>
          <target state="translated">この変更により、 &lt;code&gt;simulated_expensive_calculation&lt;/code&gt; へのすべての呼び出しが統合され、ブロックが関数を不必要に2回呼び出した &lt;code&gt;if&lt;/code&gt; の最初の問題が解決されます。残念ながら、この関数を呼び出して、すべてのケースで結果を待機しています。これには、結果の値をまったく使用しない内部の &lt;code&gt;if&lt;/code&gt; ブロックが含まれます。</target>
        </trans-unit>
        <trans-unit id="d160910b055fc36b0155788ef2b0b90383b734d2" translate="yes" xml:space="preserve">
          <source>This channel has an internal buffer on which messages will be queued. &lt;code&gt;bound&lt;/code&gt; specifies the buffer size. When the internal buffer becomes full, future sends will &lt;em&gt;block&lt;/em&gt; waiting for the buffer to open up. Note that a buffer size of 0 is valid, in which case this becomes &quot;rendezvous channel&quot; where each &lt;a href=&quot;struct.syncsender#method.send&quot;&gt;&lt;code&gt;send&lt;/code&gt;&lt;/a&gt; will not return until a &lt;a href=&quot;struct.receiver#method.recv&quot;&gt;&lt;code&gt;recv&lt;/code&gt;&lt;/a&gt; is paired with it.</source>
          <target state="translated">このチャネルには、メッセージがキューに入れられる内部バッファがあります。 &lt;code&gt;bound&lt;/code&gt; はバッファサイズを指定します。内部バッファーがいっぱいになると、将来の送信はバッファーが開くのを待って&lt;em&gt;ブロック&lt;/em&gt;します。バッファサイズ0は有効であることに注意してください。この場合、これは「ランデブーチャネル」になり、&lt;a href=&quot;struct.receiver#method.recv&quot;&gt; &lt;code&gt;recv&lt;/code&gt; &lt;/a&gt;がペアになるまで各&lt;a href=&quot;struct.syncsender#method.send&quot;&gt; &lt;code&gt;send&lt;/code&gt; &lt;/a&gt;は戻りません。</target>
        </trans-unit>
        <trans-unit id="fb1d7eb08fcc70de9ba8181af70c6fc4dce88829" translate="yes" xml:space="preserve">
          <source>This chapter covered how to use smart pointers to make different guarantees and trade-offs from those Rust makes by default with regular references. The &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; type has a known size and points to data allocated on the heap. The &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; type keeps track of the number of references to data on the heap so that data can have multiple owners. The &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; type with its interior mutability gives us a type that we can use when we need an immutable type but need to change an inner value of that type; it also enforces the borrowing rules at runtime instead of at compile time.</source>
          <target state="translated">この章では、スマートポインターを使用して、Rustが通常の参照でデフォルトで行うものとは異なる保証とトレードオフを作成する方法について説明しました。 &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; 型はヒープ上に割り当てられたデータに既知のサイズおよび点を有します。 &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; 、データが複数の所有者を持つことができますので、タイプは、ヒープ上のデータへの参照の数を追跡します。内部の &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; 型は、不変の型が必要であるがその型の内部値を変更する必要がある場合に使用できる型を提供します。また、コンパイル時ではなく実行時に借用ルールを適用します。</target>
        </trans-unit>
        <trans-unit id="d76b58ff9e32a83f32bdf3cb1438b47bc33ded06" translate="yes" xml:space="preserve">
          <source>This chapter covers concepts that appear in almost every programming language and how they work in Rust. Many programming languages have much in common at their core. None of the concepts presented in this chapter are unique to Rust, but we&amp;rsquo;ll discuss them in the context of Rust and explain the conventions around using these concepts.</source>
          <target state="translated">この章では、ほとんどすべてのプログラミング言語に見られる概念と、Rustでどのように機能するかについて説明します。多くのプログラミング言語のコアには多くの共通点があります。この章で説明する概念はRustに固有のものはありませんが、Rustのコンテキストでそれらについて説明し、これらの概念の使用に関する規則について説明します。</target>
        </trans-unit>
        <trans-unit id="29ea0fbfb2601396e36f35e6ef2ff2eccf09482a" translate="yes" xml:space="preserve">
          <source>This chapter is a recap of the many skills you&amp;rsquo;ve learned so far and an exploration of a few more standard library features. We&amp;rsquo;ll build a command line tool that interacts with file and command line input/output to practice some of the Rust concepts you now have under your belt.</source>
          <target state="translated">この章では、これまでに学んだ多くのスキルの要約と、さらにいくつかの標準ライブラリ機能の探索について説明します。ファイルとコマンドラインの入出力を操作するコマンドラインツールを構築して、現在持っているRustの概念のいくつかを実践します。</target>
        </trans-unit>
        <trans-unit id="ba9d120769583a2b06ff5bcafb1b013c4c1c420a" translate="yes" xml:space="preserve">
          <source>This chapter is a reference on all things related to patterns. We&amp;rsquo;ll cover the valid places to use patterns, the difference between refutable and irrefutable patterns, and the different kinds of pattern syntax that you might see. By the end of the chapter, you&amp;rsquo;ll know how to use patterns to express many concepts in a clear way.</source>
          <target state="translated">この章は、パターンに関連するすべてのもののリファレンスです。パターンを使用する有効な場所、反駁可能なパターンと反駁できないパターンの違い、およびさまざまな種類のパターン構文について説明します。この章の終わりには、パターンを使用して多くの概念を明確に表現する方法がわかります。</target>
        </trans-unit>
        <trans-unit id="4ca695707d3d924a4c7520a559258f62a52be801" translate="yes" xml:space="preserve">
          <source>This chapter recapped some of the major concepts you&amp;rsquo;ve learned so far and covered how to perform common I/O operations in Rust. By using command line arguments, files, environment variables, and the &lt;code&gt;eprintln!&lt;/code&gt; macro for printing errors, you&amp;rsquo;re now prepared to write command line applications. By using the concepts in previous chapters, your code will be well organized, store data effectively in the appropriate data structures, handle errors nicely, and be well tested.</source>
          <target state="translated">この章では、これまでに学習した主な概念の一部を要約し、Rustで一般的なI / O操作を実行する方法について説明しました。コマンドライン引数、ファイル、環境変数、 &lt;code&gt;eprintln!&lt;/code&gt; エラーを印刷するためのマクロを使用して、コマンドラインアプリケーションを作成する準備が整いました。前の章の概念を使用することにより、コードは適切に編成され、適切なデータ構造にデータを効果的に格納し、エラーを適切に処理し、十分にテストされます。</target>
        </trans-unit>
        <trans-unit id="4f14f23451903925edc1325ae4f6812d472301ab" translate="yes" xml:space="preserve">
          <source>This closure will be run in the context of the child process after a &lt;code&gt;fork&lt;/code&gt;. This primarily means that any modifications made to memory on behalf of this closure will &lt;strong&gt;not&lt;/strong&gt; be visible to the parent process. This is often a very constrained environment where normal operations like &lt;code&gt;malloc&lt;/code&gt; or acquiring a mutex are not guaranteed to work (due to other threads perhaps still running when the &lt;code&gt;fork&lt;/code&gt; was run).</source>
          <target state="translated">このクロージャーは &lt;code&gt;fork&lt;/code&gt; の後で子プロセスのコンテキストで実行されます。これは主に、このクロージャーのためにメモリに加えられた変更は、親プロセスには見え&lt;strong&gt;ない&lt;/strong&gt;ことを意味します。これは非常に制約された環境であることが多く、 &lt;code&gt;malloc&lt;/code&gt; やmutexの取得などの通常の操作が動作することが保証されていません（ &lt;code&gt;fork&lt;/code&gt; が実行されたときにおそらく他のスレッドがまだ実行されているため）。</target>
        </trans-unit>
        <trans-unit id="22a1461b442324db65b2ce2aa52db0c09471bd28" translate="yes" xml:space="preserve">
          <source>This code also sets &lt;code&gt;s&lt;/code&gt; to &lt;code&gt;tic-tac-toe&lt;/code&gt;. The &lt;code&gt;format!&lt;/code&gt; macro works in the same way as &lt;code&gt;println!&lt;/code&gt;, but instead of printing the output to the screen, it returns a &lt;code&gt;String&lt;/code&gt; with the contents. The version of the code using &lt;code&gt;format!&lt;/code&gt; is much easier to read and doesn&amp;rsquo;t take ownership of any of its parameters.</source>
          <target state="translated">このコードは、 &lt;code&gt;s&lt;/code&gt; を &lt;code&gt;tic-tac-toe&lt;/code&gt; にも設定します。 &lt;code&gt;format!&lt;/code&gt; マクロは &lt;code&gt;println!&lt;/code&gt; と同じように機能します！ただし、出力を画面に出力する代わりに、内容を含む &lt;code&gt;String&lt;/code&gt; を返します。 &lt;code&gt;format!&lt;/code&gt; を使用したコードのバージョン！読みやすく、そのパラメータの所有権を持ちません。</target>
        </trans-unit>
        <trans-unit id="d361c400527932085f404cf9d818fa511cfc4bc4" translate="yes" xml:space="preserve">
          <source>This code block contains unsafe code.</source>
          <target state="translated">このコードブロックには安全でないコードが含まれています。</target>
        </trans-unit>
        <trans-unit id="0d78aab047e6dda70e180b20c3bdb5a9c1b43bef" translate="yes" xml:space="preserve">
          <source>This code compiles and runs but doesn&amp;rsquo;t result in the desired threading behavior: a slow request will still cause other requests to wait to be processed. The reason is somewhat subtle: the &lt;code&gt;Mutex&lt;/code&gt; struct has no public &lt;code&gt;unlock&lt;/code&gt; method because the ownership of the lock is based on the lifetime of the &lt;code&gt;MutexGuard&amp;lt;T&amp;gt;&lt;/code&gt; within the &lt;code&gt;LockResult&amp;lt;MutexGuard&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt; that the &lt;code&gt;lock&lt;/code&gt; method returns. At compile time, the borrow checker can then enforce the rule that a resource guarded by a &lt;code&gt;Mutex&lt;/code&gt; cannot be accessed unless we hold the lock. But this implementation can also result in the lock being held longer than intended if we don&amp;rsquo;t think carefully about the lifetime of the &lt;code&gt;MutexGuard&amp;lt;T&amp;gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2b577d02f895994167db7646bcb5bc51980294d" translate="yes" xml:space="preserve">
          <source>This code compiles and runs but doesn&amp;rsquo;t result in the desired threading behavior: a slow request will still cause other requests to wait to be processed. The reason is somewhat subtle: the &lt;code&gt;Mutex&lt;/code&gt; struct has no public &lt;code&gt;unlock&lt;/code&gt; method because the ownership of the lock is based on the lifetime of the &lt;code&gt;MutexGuard&amp;lt;T&amp;gt;&lt;/code&gt; within the &lt;code&gt;LockResult&amp;lt;MutexGuard&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt; that the &lt;code&gt;lock&lt;/code&gt; method returns. At compile time, the borrow checker can then enforce the rule that a resource guarded by a &lt;code&gt;Mutex&lt;/code&gt; cannot be accessed unless we hold the lock. But this implementation can also result in the lock being held longer than intended if we don&amp;rsquo;t think carefully about the lifetime of the &lt;code&gt;MutexGuard&amp;lt;T&amp;gt;&lt;/code&gt;. Because the values in the &lt;code&gt;while let&lt;/code&gt; expression remain in scope for the duration of the block, the lock remains held for the duration of the call to &lt;code&gt;job()&lt;/code&gt;, meaning other workers cannot receive jobs.</source>
          <target state="translated">このコードはコンパイルされて実行されますが、目的のスレッド動作にはなりません。リクエストが遅いと、他のリクエストが処理されるのを待つことになります。理由はやや微妙です。 &lt;code&gt;unlock&lt;/code&gt; の所有権は、 &lt;code&gt;lock&lt;/code&gt; メソッドが返す &lt;code&gt;LockResult&amp;lt;MutexGuard&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt; 内の &lt;code&gt;MutexGuard&amp;lt;T&amp;gt;&lt;/code&gt; 存続期間に基づいているため、 &lt;code&gt;Mutex&lt;/code&gt; 構造体にはパブリックロック解除メソッドがありません。コンパイル時に、ボローチェッカーは、ロックを保持しない限り、 &lt;code&gt;Mutex&lt;/code&gt; によって保護されているリソースにアクセスできないというルールを適用できます。ただし、この実装では、 &lt;code&gt;MutexGuard&amp;lt;T&amp;gt;&lt;/code&gt; 存続期間について慎重に検討しないと、ロックが意図したよりも長く保持される可能性もあります。。 &lt;code&gt;while let&lt;/code&gt; 式の値は、ブロックの期間中スコープ内にとどまるため、 &lt;code&gt;job()&lt;/code&gt; の呼び出しの間、ロックは保持されたままになります。つまり、他のワーカーはジョブを受け取ることができません。</target>
        </trans-unit>
        <trans-unit id="8be923288a70fe6e854b5bc75a5a5f3ea2e87376" translate="yes" xml:space="preserve">
          <source>This code compiles and runs but doesn&amp;rsquo;t result in the desired threading behavior: a slow request will still cause other requests to wait to be processed. The reason is somewhat subtle: the &lt;code&gt;Mutex&lt;/code&gt; struct has no public &lt;code&gt;unlock&lt;/code&gt; method because the ownership of the lock is based on the lifetime of the &lt;code&gt;MutexGuard&amp;lt;T&amp;gt;&lt;/code&gt; within the &lt;code&gt;LockResult&amp;lt;MutexGuard&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt; that the &lt;code&gt;lock&lt;/code&gt; method returns. At compile time, the borrow checker can then enforce the rule that a resource guarded by a &lt;code&gt;Mutex&lt;/code&gt; cannot be accessed unless we hold the lock. But this implementation can also result in the lock being held longer than intended if we don&amp;rsquo;t think carefully about the lifetime of the &lt;code&gt;MutexGuard&amp;lt;T&amp;gt;&lt;/code&gt;. Because the values in the &lt;code&gt;while&lt;/code&gt; expression remain in scope for the duration of the block, the lock remains held for the duration of the call to &lt;code&gt;job.call_box()&lt;/code&gt;, meaning other workers cannot receive jobs.</source>
          <target state="translated">このコードはコンパイルされて実行されますが、望ましいスレッド動作にはなりません。要求が遅いと、他の要求の処理が待機します。理由はやや微妙です。 &lt;code&gt;unlock&lt;/code&gt; の所有権は、 &lt;code&gt;lock&lt;/code&gt; メソッドが返す &lt;code&gt;LockResult&amp;lt;MutexGuard&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt; 内の &lt;code&gt;MutexGuard&amp;lt;T&amp;gt;&lt;/code&gt; 存続期間に基づいているため、 &lt;code&gt;Mutex&lt;/code&gt; 構造体にはpublic unlockメソッドがありません。コンパイル時に、借用チェッカーは、ロックを保持しない限り、 &lt;code&gt;Mutex&lt;/code&gt; によって保護されているリソースにアクセスできないという規則を適用できます。しかし、この実装では、 &lt;code&gt;MutexGuard&amp;lt;T&amp;gt;&lt;/code&gt; 有効期間を注意深く考慮しないと、意図したよりも長くロックが保持される可能性があります。。 &lt;code&gt;while&lt;/code&gt; 式の値はブロックの期間中はスコープ内に留まるため、 &lt;code&gt;job.call_box()&lt;/code&gt; の呼び出し中はロックが保持されたままになるため、他のワーカーはジョブを受信できません。</target>
        </trans-unit>
        <trans-unit id="a9ddcc8d0db1cdd5bd0507394434501db1a0bedf" translate="yes" xml:space="preserve">
          <source>This code contains a lot of information, so let&amp;rsquo;s go over it line by line. To obtain user input and then print the result as output, we need to bring the &lt;code&gt;io&lt;/code&gt; (input/output) library into scope. The &lt;code&gt;io&lt;/code&gt; library comes from the standard library (which is known as &lt;code&gt;std&lt;/code&gt;):</source>
          <target state="translated">このコードには多くの情報が含まれているため、1行ずつ見ていきましょう。ユーザー入力を取得し、その結果を出力として印刷するには、 &lt;code&gt;io&lt;/code&gt; （入力/出力）ライブラリをスコープに含める必要があります。 &lt;code&gt;io&lt;/code&gt; ライブラリは、（として知られている標準ライブラリから来ている &lt;code&gt;std&lt;/code&gt; ）：</target>
        </trans-unit>
        <trans-unit id="a2cf7c9b3ea591cd958e0136c121e6bf9f333d13" translate="yes" xml:space="preserve">
          <source>This code creates a string containing &lt;code&gt;initial contents&lt;/code&gt;.</source>
          <target state="translated">このコードは、 &lt;code&gt;initial contents&lt;/code&gt; を含む文字列を作成します。</target>
        </trans-unit>
        <trans-unit id="37eb73353618177bcb3ef1d909b78d97976287b7" translate="yes" xml:space="preserve">
          <source>This code creates the variables &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; that match the values of the &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; fields of the &lt;code&gt;p&lt;/code&gt; struct. This example shows that the names of the variables in the pattern don&amp;rsquo;t have to match the field names of the struct. But it&amp;rsquo;s common to want the variable names to match the field names to make it easier to remember which variables came from which fields.</source>
          <target state="translated">このコードは、 &lt;code&gt;p&lt;/code&gt; 構造体の &lt;code&gt;x&lt;/code&gt; および &lt;code&gt;y&lt;/code&gt; フィールドの値と一致する変数 &lt;code&gt;a&lt;/code&gt; および &lt;code&gt;b&lt;/code&gt; を作成します。この例は、パターン内の変数の名前が構造体のフィールド名と一致する必要がないことを示しています。ただし、変数名をフィールド名と一致させて、どの変数がどのフィールドからのものかを簡単に思い出せるようにするのが一般的です。</target>
        </trans-unit>
        <trans-unit id="4c6b27e7fab9563bf2abcf70ff023ebf232f1887" translate="yes" xml:space="preserve">
          <source>This code creates the variables &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; that match the &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; fields of the &lt;code&gt;p&lt;/code&gt; variable. The outcome is that the variables &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; contain the values from the &lt;code&gt;p&lt;/code&gt; struct.</source>
          <target state="translated">このコードは、 &lt;code&gt;p&lt;/code&gt; 変数の &lt;code&gt;x&lt;/code&gt; および &lt;code&gt;y&lt;/code&gt; フィールドに一致する変数 &lt;code&gt;x&lt;/code&gt; および &lt;code&gt;y&lt;/code&gt; を作成します。その結果、変数 &lt;code&gt;x&lt;/code&gt; および &lt;code&gt;y&lt;/code&gt; には、 &lt;code&gt;p&lt;/code&gt; 構造体からの値が含まれます。</target>
        </trans-unit>
        <trans-unit id="519fd3df45d223b502667d31300a65c73f22de3a" translate="yes" xml:space="preserve">
          <source>This code does not compile!</source>
          <target state="translated">このコードはコンパイルできません。</target>
        </trans-unit>
        <trans-unit id="a8563da8c7fd875eb235c5cf17bc917dd4b6aba0" translate="yes" xml:space="preserve">
          <source>This code does not produce the desired behavior.</source>
          <target state="translated">このコードは、希望する動作を生成しません。</target>
        </trans-unit>
        <trans-unit id="0426964d440764948892b9452f7b1a751866e79c" translate="yes" xml:space="preserve">
          <source>This code illustrates that you can put any kind of data inside an enum variant: strings, numeric types, or structs, for example. You can even include another enum! Also, standard library types are often not much more complicated than what you might come up with.</source>
          <target state="translated">このコードは、文字列、数値型、構造体など、あらゆる種類のデータを enum バリアントの中に入れることができることを示しています。例えば、文字列、数値型、構造体などです。また、標準ライブラリの型は、あなたが思いつくものよりもそれほど複雑ではないことが多いです。</target>
        </trans-unit>
        <trans-unit id="23d4be6e177cb0763cfd5315e376249487e60755" translate="yes" xml:space="preserve">
          <source>This code is a bit messy, but it&amp;rsquo;s good enough for simulation purposes. We created a second request &lt;code&gt;sleep&lt;/code&gt;, whose data our server recognizes. We added an &lt;code&gt;else if&lt;/code&gt; after the &lt;code&gt;if&lt;/code&gt; block to check for the request to &lt;em&gt;/sleep&lt;/em&gt;. When that request is received, the server will sleep for 5 seconds before rendering the successful HTML page.</source>
          <target state="translated">このコードは少し面倒ですが、シミュレーションの目的には十分です。2番目のリクエスト &lt;code&gt;sleep&lt;/code&gt; を作成しました。このデータはサーバーが認識します。 &lt;code&gt;if&lt;/code&gt; ブロックの後に &lt;code&gt;else if&lt;/code&gt; を追加して、&lt;em&gt;/ sleep&lt;/em&gt;へのリクエストを確認しました。その要求を受信すると、サーバーは5秒間スリープしてから、正常なHTMLページをレンダリングします。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="9400019c8ed3d0b61a4a67558c972e785c9498d4" translate="yes" xml:space="preserve">
          <source>This code is a bit nicer, isn&amp;rsquo;t it?</source>
          <target state="translated">このコードはもう少しいいですね。</target>
        </trans-unit>
        <trans-unit id="a9d573288ab51576cf8efa92e3fc2409e71975a4" translate="yes" xml:space="preserve">
          <source>This code is for an animal shelter that wants to name all puppies Spot, which is implemented in the &lt;code&gt;baby_name&lt;/code&gt; associated function that is defined on &lt;code&gt;Dog&lt;/code&gt;. The &lt;code&gt;Dog&lt;/code&gt; type also implements the trait &lt;code&gt;Animal&lt;/code&gt;, which describes characteristics that all animals have. Baby dogs are called puppies, and that is expressed in the implementation of the &lt;code&gt;Animal&lt;/code&gt; trait on &lt;code&gt;Dog&lt;/code&gt; in the &lt;code&gt;baby_name&lt;/code&gt; function associated with the &lt;code&gt;Animal&lt;/code&gt; trait.</source>
          <target state="translated">このコードは、すべての子犬のスポットに名前を付けたいアニマルシェルター用です。これは、 &lt;code&gt;Dog&lt;/code&gt; で定義されている &lt;code&gt;baby_name&lt;/code&gt; 関連関数に実装されています。 &lt;code&gt;Dog&lt;/code&gt; 種類もトレイトを実装 &lt;code&gt;Animal&lt;/code&gt; すべての動物が持っている特性を説明し、。赤ちゃんの犬は子犬と呼ばれ、そのはの実装で表現された &lt;code&gt;Animal&lt;/code&gt; の形質の &lt;code&gt;Dog&lt;/code&gt; で &lt;code&gt;baby_name&lt;/code&gt; のに関連した機能 &lt;code&gt;Animal&lt;/code&gt; 特性。</target>
        </trans-unit>
        <trans-unit id="28ab5f7e147cb2d4d661943464a31c7e543917cd" translate="yes" xml:space="preserve">
          <source>This code is much easier to read and write! Choosing a meaningful name for a type alias can help communicate your intent as well (&lt;em&gt;thunk&lt;/em&gt; is a word for code to be evaluated at a later time, so it&amp;rsquo;s an appropriate name for a closure that gets stored).</source>
          <target state="translated">このコードは読み書きがはるかに簡単です！タイプエイリアスに意味のある名前を選択すると、意図を伝えるのにも役立ちます（&lt;em&gt;サンク&lt;/em&gt;は、後で評価されるコードの単語なので、格納されるクロージャの適切な名前です）。</target>
        </trans-unit>
        <trans-unit id="49a0f8f422e51179065e97042cbf65579f27fccc" translate="yes" xml:space="preserve">
          <source>This code is not legal: it is not possible to specialize &lt;code&gt;Drop&lt;/code&gt; to a subset of implementations of a generic type. In order for this code to work, &lt;code&gt;MyStruct&lt;/code&gt; must also require that &lt;code&gt;T&lt;/code&gt; implements &lt;code&gt;Foo&lt;/code&gt;. Alternatively, another option is to wrap the generic type in another that specializes appropriately:</source>
          <target state="translated">このコードは正しくありません &lt;code&gt;Drop&lt;/code&gt; をジェネリック型の実装のサブセットに特化することはできません。このコードが機能するためには、 &lt;code&gt;MyStruct&lt;/code&gt; は &lt;code&gt;T&lt;/code&gt; が &lt;code&gt;Foo&lt;/code&gt; を実装することも要求する必要があります。または、別の方法として、ジェネリック型を適切に特化した別の型にラップすることもできます。</target>
        </trans-unit>
        <trans-unit id="e6419e6d86ad5d4d771d701592b7c8059bf718cc" translate="yes" xml:space="preserve">
          <source>This code is not legal: it is not possible to specialize &lt;code&gt;Drop&lt;/code&gt; to a subset of implementations of a generic type. One workaround for this is to wrap the generic type, as shown below:</source>
          <target state="translated">このコードは正しくありません &lt;code&gt;Drop&lt;/code&gt; をジェネリック型の実装のサブセットに特化することはできません。これを回避する1つの方法は、以下に示すように、ジェネリック型をラップすることです。</target>
        </trans-unit>
        <trans-unit id="7561545f94912a4c2f636ef3be71bf5e25ba09fc" translate="yes" xml:space="preserve">
          <source>This code is printing a prompt stating what the game is and requesting input from the user.</source>
          <target state="translated">このコードは、ゲームが何であるかを示すプロンプトを表示し、ユーザーに入力を要求しています。</target>
        </trans-unit>
        <trans-unit id="7103520ca1aa03619df8713fc5365e846d9c5ad3" translate="yes" xml:space="preserve">
          <source>This code is read as &amp;ldquo;the function &lt;code&gt;bar&lt;/code&gt; returns never.&amp;rdquo; Functions that return never are called &lt;em&gt;diverging functions&lt;/em&gt;. We can&amp;rsquo;t create values of the type &lt;code&gt;!&lt;/code&gt; so &lt;code&gt;bar&lt;/code&gt; can never possibly return.</source>
          <target state="translated">このコードは、「関数 &lt;code&gt;bar&lt;/code&gt; が戻ることはありません」と読み取られます。決して戻らない&lt;em&gt;関数&lt;/em&gt;は、&lt;em&gt;分岐関数&lt;/em&gt;と呼ばれ&lt;em&gt;ます&lt;/em&gt;。タイプの値を作成できません &lt;code&gt;!&lt;/code&gt; そのため、 &lt;code&gt;bar&lt;/code&gt; が戻ることはありません。</target>
        </trans-unit>
        <trans-unit id="bcd0c3078c2294c0e6fda3c229de0e1561bef882" translate="yes" xml:space="preserve">
          <source>This code is similar to &lt;a href=&quot;ch09-03-to-panic-or-not-to-panic#creating-custom-types-for-validation&quot;&gt;the &lt;code&gt;Guess::new&lt;/code&gt; function we wrote in Listing 9-10&lt;/a&gt;, where we called &lt;code&gt;panic!&lt;/code&gt; when the &lt;code&gt;value&lt;/code&gt; argument was out of the range of valid values. Instead of checking for a range of values here, we&amp;rsquo;re checking that the length of &lt;code&gt;args&lt;/code&gt; is at least 3 and the rest of the function can operate under the assumption that this condition has been met. If &lt;code&gt;args&lt;/code&gt; has fewer than three items, this condition will be true, and we call the &lt;code&gt;panic!&lt;/code&gt; macro to end the program immediately.</source>
          <target state="translated">このコードは、 &lt;code&gt;panic!&lt;/code&gt; を呼び出したコード&lt;a href=&quot;ch09-03-to-panic-or-not-to-panic#creating-custom-types-for-validation&quot;&gt;リスト9-10&lt;/a&gt;で記述した &lt;code&gt;Guess::new&lt;/code&gt; 関数に似ています。とき &lt;code&gt;value&lt;/code&gt; 引数が有効な値の範囲外でした。ここでは値の範囲をチェックする代わりに、 &lt;code&gt;args&lt;/code&gt; の長さが3以上であり、関数の残りの部分がこの条件が満たされているという前提の下で動作できることをチェックしています。 &lt;code&gt;args&lt;/code&gt; のアイテムが3つ未満の場合、この条件は真となり、 &lt;code&gt;panic!&lt;/code&gt; と呼ばれます！プログラムをすぐに終了するマクロ。</target>
        </trans-unit>
        <trans-unit id="7a83ac1e4ecf68353438d16df2a11f1d38c56035" translate="yes" xml:space="preserve">
          <source>This code is the automatically generated test module. The attribute &lt;code&gt;cfg&lt;/code&gt; stands for &lt;em&gt;configuration&lt;/em&gt; and tells Rust that the following item should only be included given a certain configuration option. In this case, the configuration option is &lt;code&gt;test&lt;/code&gt;, which is provided by Rust for compiling and running tests. By using the &lt;code&gt;cfg&lt;/code&gt; attribute, Cargo compiles our test code only if we actively run the tests with &lt;code&gt;cargo test&lt;/code&gt;. This includes any helper functions that might be within this module, in addition to the functions annotated with &lt;code&gt;#[test]&lt;/code&gt;.</source>
          <target state="translated">このコードは、自動生成されたテストモジュールです。属性 &lt;code&gt;cfg&lt;/code&gt; は&lt;em&gt;構成&lt;/em&gt;を表し、特定の構成オプションが指定されている場合にのみ次の項目を含める必要があることをRustに伝えます。この場合、構成オプションは &lt;code&gt;test&lt;/code&gt; です。これは、テストをコンパイルして実行するためにRustによって提供されます。使用することにより &lt;code&gt;cfg&lt;/code&gt; 属性を、カーゴは、我々は積極的にテストを実行する場合にのみ、我々のテストコードをコンパイルする &lt;code&gt;cargo test&lt;/code&gt; 。これには、 &lt;code&gt;#[test]&lt;/code&gt; で注釈が付けられた関数に加えて、このモジュール内にある可能性のあるヘルパー関数が含まれます。</target>
        </trans-unit>
        <trans-unit id="fb14b558eed9a012f6129027202f61756e6e0b8d" translate="yes" xml:space="preserve">
          <source>This code lets us break complex types into their component parts so we can use the values we&amp;rsquo;re interested in separately.</source>
          <target state="translated">このコードを使用すると、複雑な型をコンポーネント部分に分割できるため、必要な値を個別に使用できます。</target>
        </trans-unit>
        <trans-unit id="bf80b97b3cceef068893acf5a419fa57178f1aed" translate="yes" xml:space="preserve">
          <source>This code means the type &lt;code&gt;Point&amp;lt;f32&amp;gt;&lt;/code&gt; will have a method named &lt;code&gt;distance_from_origin&lt;/code&gt; and other instances of &lt;code&gt;Point&amp;lt;T&amp;gt;&lt;/code&gt; where &lt;code&gt;T&lt;/code&gt; is not of type &lt;code&gt;f32&lt;/code&gt; will not have this method defined. The method measures how far our point is from the point at coordinates (0.0, 0.0) and uses mathematical operations that are available only for floating point types.</source>
          <target state="translated">このコードは、型手段 &lt;code&gt;Point&amp;lt;f32&amp;gt;&lt;/code&gt; 指定されたメソッドがあります &lt;code&gt;distance_from_origin&lt;/code&gt; との他のインスタンス &lt;code&gt;Point&amp;lt;T&amp;gt;&lt;/code&gt; &lt;code&gt;T&lt;/code&gt; は、型ではない &lt;code&gt;f32&lt;/code&gt; このメソッドが定義されていないであろうが。このメソッドは、ポイントが座標（0.0、0.0）のポイントからどれだけ離れているかを測定し、浮動小数点タイプでのみ使用可能な数学演算を使用します。</target>
        </trans-unit>
        <trans-unit id="edb9c9f6097f3c4e5bd16a047b4ef0c91c5eda3e" translate="yes" xml:space="preserve">
          <source>This code overrides the default setting of &lt;code&gt;0&lt;/code&gt;. Now when we run &lt;code&gt;cargo build&lt;/code&gt;, Cargo will use the defaults for the &lt;code&gt;dev&lt;/code&gt; profile plus our customization to &lt;code&gt;opt-level&lt;/code&gt;. Because we set &lt;code&gt;opt-level&lt;/code&gt; to &lt;code&gt;1&lt;/code&gt;, Cargo will apply more optimizations than the default, but not as many as in a release build.</source>
          <target state="translated">このコードは、デフォルト設定の &lt;code&gt;0&lt;/code&gt; をオーバーライドします。これで、 &lt;code&gt;cargo build&lt;/code&gt; を実行すると、Cargoは &lt;code&gt;dev&lt;/code&gt; プロファイルのデフォルトと &lt;code&gt;opt-level&lt;/code&gt; へのカスタマイズを使用します。 &lt;code&gt;opt-level&lt;/code&gt; を &lt;code&gt;1&lt;/code&gt; に設定しているため、Cargoはデフォルトよりも多くの最適化を適用しますが、リリースビルドほど多くはありません。</target>
        </trans-unit>
        <trans-unit id="cbd474aff68e6272a4d817ab514ba2ba338dc2b1" translate="yes" xml:space="preserve">
          <source>This code panics!</source>
          <target state="translated">このコードはパニックになる!</target>
        </trans-unit>
        <trans-unit id="1520d0fd722c3577359ba16db239ceb0ddeebd5f" translate="yes" xml:space="preserve">
          <source>This code prints &lt;code&gt;1 new tweet: (Read more from @horse_ebooks...)&lt;/code&gt;.</source>
          <target state="translated">このコードは、 &lt;code&gt;1 new tweet: (Read more from @horse_ebooks...)&lt;/code&gt; 出力します（@horse_ebooksから続きを読む...）。</target>
        </trans-unit>
        <trans-unit id="6d78693e95ef2bffb056748f86ea7d4fd87f6784" translate="yes" xml:space="preserve">
          <source>This code prints &lt;code&gt;1 new tweet: horse_ebooks: of course, as you probably already know, people&lt;/code&gt;.</source>
          <target state="translated">このコードは &lt;code&gt;1 new tweet: horse_ebooks: of course, as you probably already know, people&lt;/code&gt; 出力します：horse_ebooks：もちろん、おそらくご存じのとおり、人々。</target>
        </trans-unit>
        <trans-unit id="a4e90b820e3471ed9be465d87743c5461551a7f0" translate="yes" xml:space="preserve">
          <source>This code prints &lt;code&gt;Current location: (3, 5)&lt;/code&gt;. The values &lt;code&gt;&amp;amp;(3, 5)&lt;/code&gt; match the pattern &lt;code&gt;&amp;amp;(x, y)&lt;/code&gt;, so &lt;code&gt;x&lt;/code&gt; is the value &lt;code&gt;3&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; is the value &lt;code&gt;5&lt;/code&gt;.</source>
          <target state="translated">このコードは、 &lt;code&gt;Current location: (3, 5)&lt;/code&gt; 出力します：（3、5）。値 &lt;code&gt;&amp;amp;(3, 5)&lt;/code&gt; はパターン &lt;code&gt;&amp;amp;(x, y)&lt;/code&gt; に一致するため、 &lt;code&gt;x&lt;/code&gt; は値 &lt;code&gt;3&lt;/code&gt; で、 &lt;code&gt;y&lt;/code&gt; は値 &lt;code&gt;5&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="fb3c413eeb04880ff8b53ff489dddef4151c97bb" translate="yes" xml:space="preserve">
          <source>This code prints &lt;code&gt;New article available! (Read more...)&lt;/code&gt;.</source>
          <target state="translated">このコードは &lt;code&gt;New article available! (Read more...)&lt;/code&gt; 印刷します！（続きを読む...）。</target>
        </trans-unit>
        <trans-unit id="4bdc1d17208e27666bda4fd318b994f6acf7818b" translate="yes" xml:space="preserve">
          <source>This code prints &lt;code&gt;The answer is: 12&lt;/code&gt;. We specify that the parameter &lt;code&gt;f&lt;/code&gt; in &lt;code&gt;do_twice&lt;/code&gt; is an &lt;code&gt;fn&lt;/code&gt; that takes one parameter of type &lt;code&gt;i32&lt;/code&gt; and returns an &lt;code&gt;i32&lt;/code&gt;. We can then call &lt;code&gt;f&lt;/code&gt; in the body of &lt;code&gt;do_twice&lt;/code&gt;. In &lt;code&gt;main&lt;/code&gt;, we can pass the function name &lt;code&gt;add_one&lt;/code&gt; as the first argument to &lt;code&gt;do_twice&lt;/code&gt;.</source>
          <target state="translated">このコードは次のように出力します &lt;code&gt;The answer is: 12&lt;/code&gt; です。私たちは、パラメータのように指定する &lt;code&gt;f&lt;/code&gt; で &lt;code&gt;do_twice&lt;/code&gt; がある &lt;code&gt;fn&lt;/code&gt; 型の一つのパラメータ取り &lt;code&gt;i32&lt;/code&gt; して返す &lt;code&gt;i32&lt;/code&gt; 。次に、 &lt;code&gt;do_twice&lt;/code&gt; の本体で &lt;code&gt;f&lt;/code&gt; を呼び出すことができます。では &lt;code&gt;main&lt;/code&gt; 、我々は関数名を渡すことができ &lt;code&gt;add_one&lt;/code&gt; を最初の引数として &lt;code&gt;do_twice&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f51af940300a3743a5ab26b4b6248a93015d25fc" translate="yes" xml:space="preserve">
          <source>This code prints &lt;code&gt;one or two&lt;/code&gt;.</source>
          <target state="translated">このコードは &lt;code&gt;one or two&lt;/code&gt; 出力します。</target>
        </trans-unit>
        <trans-unit id="fa3fc2ca0fc1e2ca4079f6b9c2e26f148c6f028f" translate="yes" xml:space="preserve">
          <source>This code prints &lt;code&gt;one&lt;/code&gt; because the value in &lt;code&gt;x&lt;/code&gt; is 1. This syntax is useful when you want your code to take an action if it gets a particular concrete value.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; の値が &lt;code&gt;one&lt;/code&gt; ため、このコードは1を出力します。この構文は、特定の具体的な値を取得した場合にコードにアクションを実行させる場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="f76e20cf8d5177f5195a6770ae0f2388492d5a80" translate="yes" xml:space="preserve">
          <source>This code prints the following:</source>
          <target state="translated">このコードは以下のように表示します。</target>
        </trans-unit>
        <trans-unit id="2da1adcf6ac7d40ff872dbb16e9f7a36210c0c52" translate="yes" xml:space="preserve">
          <source>This code should compile and produce the result we want when we use it with the &lt;code&gt;main&lt;/code&gt; function in Listing 10-20.</source>
          <target state="translated">このコードはコンパイルして、リスト10-20の &lt;code&gt;main&lt;/code&gt; 関数で使用したときに必要な結果を生成する必要があります。</target>
        </trans-unit>
        <trans-unit id="fc992e6806cb1bd5a9c534e91522711af45f4b36" translate="yes" xml:space="preserve">
          <source>This code should look generally familiar: a trait with one method and an associated type. The new part is &lt;code&gt;RHS=Self&lt;/code&gt;: this syntax is called &lt;em&gt;default type parameters&lt;/em&gt;. The &lt;code&gt;RHS&lt;/code&gt; generic type parameter (short for &amp;ldquo;right hand side&amp;rdquo;) defines the type of the &lt;code&gt;rhs&lt;/code&gt; parameter in the &lt;code&gt;add&lt;/code&gt; method. If we don&amp;rsquo;t specify a concrete type for &lt;code&gt;RHS&lt;/code&gt; when we implement the &lt;code&gt;Add&lt;/code&gt; trait, the type of &lt;code&gt;RHS&lt;/code&gt; will default to &lt;code&gt;Self&lt;/code&gt;, which will be the type we&amp;rsquo;re implementing &lt;code&gt;Add&lt;/code&gt; on.</source>
          <target state="translated">このコードはおなじみのはずです。1つのメソッドとそれに関連する型を持つ特性です。新しい部分は &lt;code&gt;RHS=Self&lt;/code&gt; です。この構文は、&lt;em&gt;デフォルトの型パラメーター&lt;/em&gt;と呼ばれ&lt;em&gt;ます&lt;/em&gt;。 &lt;code&gt;RHS&lt;/code&gt; ジェネリック型パラメータ（「右側」の略）は、タイプ定義 &lt;code&gt;rhs&lt;/code&gt; におけるパラメータ &lt;code&gt;add&lt;/code&gt; 方法。 &lt;code&gt;Add&lt;/code&gt; トレイトを実装するときに &lt;code&gt;RHS&lt;/code&gt; の具象タイプを指定しない場合、 &lt;code&gt;RHS&lt;/code&gt; のタイプはデフォルトで &lt;code&gt;Self&lt;/code&gt; になり、これが &lt;code&gt;Add&lt;/code&gt; を実装するタイプになります。</target>
        </trans-unit>
        <trans-unit id="58a84861deaa80c4db75f055d7277e059fbe6bb3" translate="yes" xml:space="preserve">
          <source>This code should look generally familiar: a trait with one method and an associated type. The new part is &lt;code&gt;Rhs=Self&lt;/code&gt;: this syntax is called &lt;em&gt;default type parameters&lt;/em&gt;. The &lt;code&gt;Rhs&lt;/code&gt; generic type parameter (short for &amp;ldquo;right hand side&amp;rdquo;) defines the type of the &lt;code&gt;rhs&lt;/code&gt; parameter in the &lt;code&gt;add&lt;/code&gt; method. If we don&amp;rsquo;t specify a concrete type for &lt;code&gt;Rhs&lt;/code&gt; when we implement the &lt;code&gt;Add&lt;/code&gt; trait, the type of &lt;code&gt;Rhs&lt;/code&gt; will default to &lt;code&gt;Self&lt;/code&gt;, which will be the type we&amp;rsquo;re implementing &lt;code&gt;Add&lt;/code&gt; on.</source>
          <target state="translated">このコードは一般的に見覚えがあるはずです。1つのメソッドと関連するタイプを持つトレイトです。新しい部分は &lt;code&gt;Rhs=Self&lt;/code&gt; です：この構文は&lt;em&gt;デフォルトの型パラメーター&lt;/em&gt;と呼ばれ&lt;em&gt;ます&lt;/em&gt;。 &lt;code&gt;Rhs&lt;/code&gt; ジェネリック型パラメータ（「右側」の略）は、タイプ定義 &lt;code&gt;rhs&lt;/code&gt; におけるパラメータ &lt;code&gt;add&lt;/code&gt; 方法。 &lt;code&gt;Add&lt;/code&gt; トレイトを実装するときに &lt;code&gt;Rhs&lt;/code&gt; の具体的なタイプを指定しない場合、 &lt;code&gt;Rhs&lt;/code&gt; のタイプはデフォルトで &lt;code&gt;Self&lt;/code&gt; になり、これが &lt;code&gt;Add&lt;/code&gt; を実装するタイプになります。</target>
        </trans-unit>
        <trans-unit id="9916bd76554811c91bac8fdab30ae1e7bf834537" translate="yes" xml:space="preserve">
          <source>This code still won&amp;rsquo;t work, but let&amp;rsquo;s check it again to get the next error that we need to address:</source>
          <target state="translated">このコードはまだ機能しませんが、もう一度確認して、対処する必要がある次のエラーを取得します。</target>
        </trans-unit>
        <trans-unit id="d27513508379ea6cd339c0bb4a46ef6e82c466b9" translate="yes" xml:space="preserve">
          <source>This code stores a list of integers in the variable &lt;code&gt;number_list&lt;/code&gt; and places the first number in the list in a variable named &lt;code&gt;largest&lt;/code&gt;. Then it iterates through all the numbers in the list, and if the current number is greater than the number stored in &lt;code&gt;largest&lt;/code&gt;, it replaces the number in that variable. However, if the current number is less than or equal to the largest number seen so far, the variable doesn&amp;rsquo;t change, and the code moves on to the next number in the list. After considering all the numbers in the list, &lt;code&gt;largest&lt;/code&gt; should hold the largest number, which in this case is 100.</source>
          <target state="translated">この変数のコードを格納する整数のリストを &lt;code&gt;number_list&lt;/code&gt; と場所という名前の変数にリストの最初の数 &lt;code&gt;largest&lt;/code&gt; 。そして、それは、リスト内のすべての数値を反復処理し、現在の数はに保存されている数よりも大きい場合 &lt;code&gt;largest&lt;/code&gt; 、その変数に番号を置き換えます。ただし、現在の数値がこれまでに見た最大の数値以下の場合、変数は変更されず、コードはリスト内の次の数値に移動します。リスト内のすべての数字を考慮した後、 &lt;code&gt;largest&lt;/code&gt; 、この場合には100の最大の数を、保持する必要があります。</target>
        </trans-unit>
        <trans-unit id="65e3fdd29c21c5766164366857eab04eba8f916b" translate="yes" xml:space="preserve">
          <source>This code will compile and will store the number of &lt;code&gt;Worker&lt;/code&gt; instances we specified as an argument to &lt;code&gt;ThreadPool::new&lt;/code&gt;. But we&amp;rsquo;re &lt;em&gt;still&lt;/em&gt; not processing the closure that we get in &lt;code&gt;execute&lt;/code&gt;. Let&amp;rsquo;s look at how to do that next.</source>
          <target state="translated">このコードはコンパイルし、 &lt;code&gt;ThreadPool::new&lt;/code&gt; 引数として指定した &lt;code&gt;Worker&lt;/code&gt; インスタンスの数を格納します。しかし、 &lt;code&gt;execute&lt;/code&gt; に取得するクロージャは&lt;em&gt;まだ&lt;/em&gt;処理して&lt;em&gt;い&lt;/em&gt;ません。次にその方法を見てみましょう。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="045fdd180c10e009660c1c81e0cc6eab5a5aa968" translate="yes" xml:space="preserve">
          <source>This code will compile just fine. For more about trait objects, refer to the section &lt;a href=&quot;ch17-02-trait-objects#using-trait-objects-that-allow-for-values-of-different-types&quot;&gt;&amp;ldquo;Using Trait Objects That Allow for Values of Different Types&amp;rdquo;&lt;/a&gt; in Chapter 17.</source>
          <target state="translated">このコードは問題なくコンパイルされます。特性オブジェクトの詳細については、第17章の&lt;a href=&quot;ch17-02-trait-objects#using-trait-objects-that-allow-for-values-of-different-types&quot;&gt;「さまざまなタイプの値を許可する特性オブジェクトの使用」&lt;/a&gt;のセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="457c8af0abaf5c3ca5e095102658cc6466fc1c3e" translate="yes" xml:space="preserve">
          <source>This code will compile without any errors. Note the &lt;code&gt;r#&lt;/code&gt; prefix on the function name in its definition as well as where the function is called in &lt;code&gt;main&lt;/code&gt;.</source>
          <target state="translated">このコードはエラーなしでコンパイルされます。定義内の関数名の &lt;code&gt;r#&lt;/code&gt; プレフィックスと、関数が &lt;code&gt;main&lt;/code&gt; で呼び出される場所に注意してください。</target>
        </trans-unit>
        <trans-unit id="a4e6558f8bd1055ab8e1efd4008b36e362cb01bc" translate="yes" xml:space="preserve">
          <source>This code will completely ignore the value passed as the first argument, &lt;code&gt;3&lt;/code&gt;, and will print &lt;code&gt;This code only uses the y parameter: 4&lt;/code&gt;.</source>
          <target state="translated">このコードは、完全に第一引数として渡された値は無視されます &lt;code&gt;3&lt;/code&gt; 、及び印刷する &lt;code&gt;This code only uses the y parameter: 4&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f597cb1c1231379b4a9ac9b16a64f6f09dac15f9" translate="yes" xml:space="preserve">
          <source>This code will now print &lt;code&gt;Default case, x = Some(5)&lt;/code&gt;. The pattern in the second match arm doesn&amp;rsquo;t introduce a new variable &lt;code&gt;y&lt;/code&gt; that would shadow the outer &lt;code&gt;y&lt;/code&gt;, meaning we can use the outer &lt;code&gt;y&lt;/code&gt; in the match guard. Instead of specifying the pattern as &lt;code&gt;Some(y)&lt;/code&gt;, which would have shadowed the outer &lt;code&gt;y&lt;/code&gt;, we specify &lt;code&gt;Some(n)&lt;/code&gt;. This creates a new variable &lt;code&gt;n&lt;/code&gt; that doesn&amp;rsquo;t shadow anything because there is no &lt;code&gt;n&lt;/code&gt; variable outside the &lt;code&gt;match&lt;/code&gt;.</source>
          <target state="translated">このコードは &lt;code&gt;Default case, x = Some(5)&lt;/code&gt; ます。2番目のマッチアームのパターンは、外側の &lt;code&gt;y&lt;/code&gt; をシャドウする新しい変数 &lt;code&gt;y&lt;/code&gt; を導入していません。つまり、マッチガードで外側の &lt;code&gt;y&lt;/code&gt; を使用できます。パターンを &lt;code&gt;Some(y)&lt;/code&gt; として指定する代わりに、外側の &lt;code&gt;y&lt;/code&gt; をシャドーイングするのではなく、 &lt;code&gt;Some(n)&lt;/code&gt; を指定します。これは、 &lt;code&gt;match&lt;/code&gt; 外側に &lt;code&gt;n&lt;/code&gt; 変数がないため、何も隠さない新しい変数 &lt;code&gt;n&lt;/code&gt; を作成します。</target>
        </trans-unit>
        <trans-unit id="1bcf93c595538a9e0c98606ec2aa75cae859981c" translate="yes" xml:space="preserve">
          <source>This code will print &lt;code&gt;Can't overwrite an existing customized value&lt;/code&gt; and then &lt;code&gt;setting is Some(5)&lt;/code&gt;. In the first match arm, we don&amp;rsquo;t need to match on or use the values inside either &lt;code&gt;Some&lt;/code&gt; variant, but we do need to test for the case when &lt;code&gt;setting_value&lt;/code&gt; and &lt;code&gt;new_setting_value&lt;/code&gt; are the &lt;code&gt;Some&lt;/code&gt; variant. In that case, we print why we&amp;rsquo;re not changing &lt;code&gt;setting_value&lt;/code&gt;, and it doesn&amp;rsquo;t get changed.</source>
          <target state="translated">このコードは &lt;code&gt;Can't overwrite an existing customized value&lt;/code&gt; を上書きできませんを出力し、 &lt;code&gt;setting is Some(5)&lt;/code&gt; です。最初のマッチアームでは、 &lt;code&gt;Some&lt;/code&gt; バリアントのいずれかで値を照合したり使用したりする必要はありませんが、 &lt;code&gt;setting_value&lt;/code&gt; および &lt;code&gt;new_setting_value&lt;/code&gt; が &lt;code&gt;Some&lt;/code&gt; バリアントである場合をテストする必要があります。その場合、 &lt;code&gt;setting_value&lt;/code&gt; を変更しない理由を出力しますが、変更されません。</target>
        </trans-unit>
        <trans-unit id="59fe6f0c2e0e4f24920973a91f227ffd825f4348" translate="yes" xml:space="preserve">
          <source>This code will print &lt;code&gt;Change the color to red 0, green 160, and blue 255&lt;/code&gt;. Try changing the value of &lt;code&gt;msg&lt;/code&gt; to see the code from the other arms run.</source>
          <target state="translated">このコードは &lt;code&gt;Change the color to red 0, green 160, and blue 255&lt;/code&gt; ます。 &lt;code&gt;msg&lt;/code&gt; の値を変更して、他のアームの実行からのコードを確認してください。</target>
        </trans-unit>
        <trans-unit id="3c54f68158af593ed8370c89b1e792c808e333b9" translate="yes" xml:space="preserve">
          <source>This code will print &lt;code&gt;Hello, Macro! My name is Pancakes!&lt;/code&gt; when we&amp;rsquo;re done. The first step is to make a new library crate, like this:</source>
          <target state="translated">このコードは &lt;code&gt;Hello, Macro! My name is Pancakes!&lt;/code&gt; 終わったら 最初のステップは、次のような新しいライブラリクレートを作成することです。</target>
        </trans-unit>
        <trans-unit id="6ef0c24b1ac6e78f32662fb7a47aa078602f7661" translate="yes" xml:space="preserve">
          <source>This code will print &lt;code&gt;Some numbers: 2, 8, 32&lt;/code&gt;, and the values 4 and 16 will be ignored.</source>
          <target state="translated">このコードは &lt;code&gt;Some numbers: 2, 8, 32&lt;/code&gt; 、および値4と16は無視されます。</target>
        </trans-unit>
        <trans-unit id="6e7f6cc166031d911beb7caaef0389c2805500c8" translate="yes" xml:space="preserve">
          <source>This code will print &lt;code&gt;{&quot;Blue&quot;: 25}&lt;/code&gt;. The original value of &lt;code&gt;10&lt;/code&gt; has been overwritten.</source>
          <target state="translated">このコードは &lt;code&gt;{&quot;Blue&quot;: 25}&lt;/code&gt; ます。元の値 &lt;code&gt;10&lt;/code&gt; は上書きされています。</target>
        </trans-unit>
        <trans-unit id="4c7854ef3442e5dc7384d2ebe52264fddb2a172b" translate="yes" xml:space="preserve">
          <source>This code will print &lt;code&gt;{&quot;world&quot;: 2, &quot;hello&quot;: 1, &quot;wonderful&quot;: 1}&lt;/code&gt;. The &lt;code&gt;or_insert&lt;/code&gt; method actually returns a mutable reference (&lt;code&gt;&amp;amp;mut V&lt;/code&gt;) to the value for this key. Here we store that mutable reference in the &lt;code&gt;count&lt;/code&gt; variable, so in order to assign to that value, we must first dereference &lt;code&gt;count&lt;/code&gt; using the asterisk (&lt;code&gt;*&lt;/code&gt;). The mutable reference goes out of scope at the end of the &lt;code&gt;for&lt;/code&gt; loop, so all of these changes are safe and allowed by the borrowing rules.</source>
          <target state="translated">このコードは、 &lt;code&gt;{&quot;world&quot;: 2, &quot;hello&quot;: 1, &quot;wonderful&quot;: 1}&lt;/code&gt; ます。 &lt;code&gt;or_insert&lt;/code&gt; の方法は、実際には変更可能な参照（戻り &lt;code&gt;&amp;amp;mut V&lt;/code&gt; このキーの値にします）。ここでは、その可変参照を &lt;code&gt;count&lt;/code&gt; 変数に格納しているため、その値に割り当てるには、最初にアスタリスク（ &lt;code&gt;*&lt;/code&gt; ）を使用して &lt;code&gt;count&lt;/code&gt; を逆参照する必要があります。変更可能な参照は &lt;code&gt;for&lt;/code&gt; ループの最後でスコープ外になるため、これらの変更はすべて安全であり、借用ルールによって許可されます。</target>
        </trans-unit>
        <trans-unit id="d2527fb52597f9416819ef1fc01a194d639282f6" translate="yes" xml:space="preserve">
          <source>This code will print each pair in an arbitrary order:</source>
          <target state="translated">このコードは、各ペアを任意の順序で表示します。</target>
        </trans-unit>
        <trans-unit id="bacd4441a056463b6c76d4dcb3493a2106b165e0" translate="yes" xml:space="preserve">
          <source>This code will print the 18 bytes that make up this &lt;code&gt;String&lt;/code&gt;:</source>
          <target state="translated">このコードは、この &lt;code&gt;String&lt;/code&gt; を構成する18バイトを出力します。</target>
        </trans-unit>
        <trans-unit id="df66479dcc3e1d9cca2a55caf3dadeea76d13542" translate="yes" xml:space="preserve">
          <source>This code will print the following:</source>
          <target state="translated">このコードでは以下のように表示されます。</target>
        </trans-unit>
        <trans-unit id="6cf1c1dee0071b4d526326a9881c97e561ec0f1a" translate="yes" xml:space="preserve">
          <source>This code will result in the following error:</source>
          <target state="translated">このコードでは、以下のようなエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="bd9279581006b04d3fb15d53d9a31240a9bda944" translate="yes" xml:space="preserve">
          <source>This code works just fine because we never bind &lt;code&gt;s&lt;/code&gt; to anything; it isn&amp;rsquo;t moved.</source>
          <target state="translated">&lt;code&gt;s&lt;/code&gt; を何にもバインドしないため、このコードは問題なく機能します。動かない。</target>
        </trans-unit>
        <trans-unit id="a72012f28327d683a9fda9d6b4835b6ec97dd74b" translate="yes" xml:space="preserve">
          <source>This code works the way the business wants it to now, but let&amp;rsquo;s say the data science team decides that we need to make some changes to the way we call the &lt;code&gt;simulated_expensive_calculation&lt;/code&gt; function in the future. To simplify the update when those changes happen, we want to refactor this code so it calls the &lt;code&gt;simulated_expensive_calculation&lt;/code&gt; function only once. We also want to cut the place where we&amp;rsquo;re currently unnecessarily calling the function twice without adding any other calls to that function in the process. That is, we don&amp;rsquo;t want to call it if the result isn&amp;rsquo;t needed, and we still want to call it only once.</source>
          <target state="translated">このコードは、ビジネスが今望んでいる方法で機能しますが、データサイエンスチームが、今後、 &lt;code&gt;simulated_expensive_calculation&lt;/code&gt; 関数を呼び出す方法に変更を加える必要があると判断したとします。これらの変更が発生したときの更新を簡素化するために、このコードをリファクタリングして、 &lt;code&gt;simulated_expensive_calculation&lt;/code&gt; 関数を1回だけ呼び出すようにします。また、プロセス内でその関数に他の呼び出しを追加せずに、現在関数を2度不必要に呼び出している場所を削減したいと考えています。つまり、結果が必要ない場合は呼び出したくありませんが、それでも一度だけ呼び出したいです。</target>
        </trans-unit>
        <trans-unit id="29594b80ae15e7f3a6760f8d699f1007a88ab197" translate="yes" xml:space="preserve">
          <source>This code would attempt to link with &lt;code&gt;libmy_c_library.so&lt;/code&gt; on unix-like systems and &lt;code&gt;my_c_library.dll&lt;/code&gt; on Windows at runtime, and panic if it can't find something to link to. Rust code could then use &lt;code&gt;my_c_function&lt;/code&gt; as if it were any other unsafe Rust function. Working with non-Rust languages and FFI is inherently unsafe, so wrappers are usually built around C APIs.</source>
          <target state="translated">このコードは、UNIXライクなシステムでは &lt;code&gt;my_c_library.dll&lt;/code&gt; 、Windowsでは実行時に &lt;code&gt;libmy_c_library.so&lt;/code&gt; とリンクしようとし、リンク先が見つからない場合はパニックを引き起こします。Rustコードは、他の安全でないRust関数であるかのように &lt;code&gt;my_c_function&lt;/code&gt; を使用できます。Rust以外の言語とFFIでの作業は本質的に安全ではないため、通常、ラッパーはC APIを中心に構築されます。</target>
        </trans-unit>
        <trans-unit id="94ac7a59ef0f9f139e040ad72861c14b2eb19308" translate="yes" xml:space="preserve">
          <source>This code would print &lt;code&gt;x = 5 and y = 10&lt;/code&gt;.</source>
          <target state="translated">このコードは、 &lt;code&gt;x = 5 and y = 10&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="0be10b63965c309b87ed0545b477401b58dc21cb" translate="yes" xml:space="preserve">
          <source>This command creates an executable file in &lt;em&gt;target/debug/hello_cargo&lt;/em&gt; (or &lt;em&gt;target\debug\hello_cargo.exe&lt;/em&gt; on Windows) rather than in your current directory. You can run the executable with this command:</source>
          <target state="translated">このコマンドは、現在のディレクトリではなく、&lt;em&gt;target / debug / hello_cargo&lt;/em&gt;（Windowsの場合は&lt;em&gt;target \ debug \ hello_cargo.exe&lt;/em&gt;）に実行可能ファイルを作成します。次のコマンドで実行可能ファイルを実行できます。</target>
        </trans-unit>
        <trans-unit id="4dd02fcb167dbab5d0f3cc67c54c6c5da2a62c5e" translate="yes" xml:space="preserve">
          <source>This command gives you &lt;code&gt;rustfmt&lt;/code&gt; and &lt;code&gt;cargo-fmt&lt;/code&gt;, similar to how Rust gives you both &lt;code&gt;rustc&lt;/code&gt; and &lt;code&gt;cargo&lt;/code&gt;. To format any Cargo project, enter the following:</source>
          <target state="translated">このコマンドは、与え &lt;code&gt;rustfmt&lt;/code&gt; と &lt;code&gt;cargo-fmt&lt;/code&gt; 錆はあなたの両方できますどのように似て、 &lt;code&gt;rustc&lt;/code&gt; や &lt;code&gt;cargo&lt;/code&gt; 。Cargoプロジェクトをフォーマットするには、次のように入力します。</target>
        </trans-unit>
        <trans-unit id="616fc540cd704c55f34b7ddb4249c489ab431fea" translate="yes" xml:space="preserve">
          <source>This command ran all tests with &lt;code&gt;add&lt;/code&gt; in the name and filtered out the test named &lt;code&gt;one_hundred&lt;/code&gt;. Also note that the module in which a test appears becomes part of the test&amp;rsquo;s name, so we can run all the tests in a module by filtering on the module&amp;rsquo;s name.</source>
          <target state="translated">このコマンドは、名前に &lt;code&gt;add&lt;/code&gt; を使用してすべてのテストを実行し、 &lt;code&gt;one_hundred&lt;/code&gt; という名前のテストを除外しました。また、テストが表示されるモジュールはテスト名の一部になるため、モジュールの名前でフィルタリングすることにより、モジュール内のすべてのテストを実行できます。</target>
        </trans-unit>
        <trans-unit id="8ea7582e38a836907de1d30ee5b58334fa20a196" translate="yes" xml:space="preserve">
          <source>This command runs only the tests in the &lt;em&gt;tests/integration_test.rs&lt;/em&gt; file.</source>
          <target state="translated">このコマンドは、&lt;em&gt;tests / integration_test.rs&lt;/em&gt;ファイル内の&lt;em&gt;テスト&lt;/em&gt;のみを実行します。</target>
        </trans-unit>
        <trans-unit id="0760093e6150870ee34facc6b7a5327edc5dc69d" translate="yes" xml:space="preserve">
          <source>This command will inform Cargo of your API token and store it locally in &lt;em&gt;~/.cargo/credentials&lt;/em&gt;. Note that this token is a &lt;em&gt;secret&lt;/em&gt;: do not share it with anyone else. If you do share it with anyone for any reason, you should revoke it and generate a new token on &lt;a href=&quot;https://crates.io/&quot;&gt;crates.io&lt;/a&gt;.</source>
          <target state="translated">このコマンドはCargoにAPIトークンを通知し、ローカルで&lt;em&gt;〜/ .cargo / credentialsに保存します&lt;/em&gt;。このトークンは&lt;em&gt;秘密&lt;/em&gt;です。他の人と共有しないでください。なんらかの理由で他の人と共有する場合は、それを取り消して、&lt;a href=&quot;https://crates.io/&quot;&gt;crates.ioで&lt;/a&gt;新しいトークンを生成する必要があります。</target>
        </trans-unit>
        <trans-unit id="5e88705efdf159f3ff9b6126f1c10159a182f8df" translate="yes" xml:space="preserve">
          <source>This compiles because &lt;code&gt;longer&lt;/code&gt; outlives &lt;code&gt;shorter&lt;/code&gt;, thus the constraint is respected:</source>
          <target state="translated">長い &lt;code&gt;shorter&lt;/code&gt; &lt;code&gt;longer&lt;/code&gt; ため、これはコンパイルされます。したがって、制約が尊重されます。</target>
        </trans-unit>
        <trans-unit id="3f29dc82f5ad5c21f66ea4c65c4df005f9bfa118" translate="yes" xml:space="preserve">
          <source>This computes the integer &lt;code&gt;n&lt;/code&gt; such that &lt;code&gt;self = n * rhs + self.rem_euclid(rhs)&lt;/code&gt;, with &lt;code&gt;0 &amp;lt;= self.rem_euclid(rhs) &amp;lt; rhs&lt;/code&gt;.</source>
          <target state="translated">これは、 &lt;code&gt;0 &amp;lt;= self.rem_euclid(rhs) &amp;lt; rhs&lt;/code&gt; 、 &lt;code&gt;self = n * rhs + self.rem_euclid(rhs)&lt;/code&gt; となるような整数 &lt;code&gt;n&lt;/code&gt; を計算します。</target>
        </trans-unit>
        <trans-unit id="92466c99e75537fb86fdcb8b6177060d58e36e85" translate="yes" xml:space="preserve">
          <source>This computes the integer &lt;code&gt;n&lt;/code&gt; such that &lt;code&gt;self = n * rhs + self.rem_euclid(rhs)&lt;/code&gt;. In other words, the result is &lt;code&gt;self / rhs&lt;/code&gt; rounded to the integer &lt;code&gt;n&lt;/code&gt; such that &lt;code&gt;self &amp;gt;= n * rhs&lt;/code&gt;.</source>
          <target state="translated">これは、 &lt;code&gt;self = n * rhs + self.rem_euclid(rhs)&lt;/code&gt; ような整数 &lt;code&gt;n&lt;/code&gt; を計算します。換言すれば、結果は &lt;code&gt;self / rhs&lt;/code&gt; 整数に丸め &lt;code&gt;n&lt;/code&gt; ように &lt;code&gt;self &amp;gt;= n * rhs&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="30ff452f5fae3358ab149e5ae5cfa16c08f607d2" translate="yes" xml:space="preserve">
          <source>This concept&amp;mdash;of being concerned only with the messages a value responds to rather than the value&amp;rsquo;s concrete type&amp;mdash;is similar to the concept &lt;em&gt;duck typing&lt;/em&gt; in dynamically typed languages: if it walks like a duck and quacks like a duck, then it must be a duck! In the implementation of &lt;code&gt;run&lt;/code&gt; on &lt;code&gt;Screen&lt;/code&gt; in Listing 17-5, &lt;code&gt;run&lt;/code&gt; doesn&amp;rsquo;t need to know what the concrete type of each component is. It doesn&amp;rsquo;t check whether a component is an instance of a &lt;code&gt;Button&lt;/code&gt; or a &lt;code&gt;SelectBox&lt;/code&gt;, it just calls the &lt;code&gt;draw&lt;/code&gt; method on the component. By specifying &lt;code&gt;Box&amp;lt;dyn Draw&amp;gt;&lt;/code&gt; as the type of the values in the &lt;code&gt;components&lt;/code&gt; vector, we&amp;rsquo;ve defined &lt;code&gt;Screen&lt;/code&gt; to need values that we can call the &lt;code&gt;draw&lt;/code&gt; method on.</source>
          <target state="translated">この概念（値の具体的なタイプではなく、値が応答するメッセージのみに関係&lt;em&gt;する）&lt;/em&gt;は、動的に型付けされた言語での&lt;em&gt;ダックタイピング&lt;/em&gt;の概念に似てい&lt;em&gt;ます。アヒルの&lt;/em&gt;ように歩き、アヒルのように鳴く場合、それはアヒル！リスト17-5 の &lt;code&gt;run&lt;/code&gt; on &lt;code&gt;Screen&lt;/code&gt; の実装では、 &lt;code&gt;run&lt;/code&gt; は各コンポーネントの具体的なタイプを知る必要はありません。コンポーネントが &lt;code&gt;Button&lt;/code&gt; または &lt;code&gt;SelectBox&lt;/code&gt; のインスタンスであるかどうかはチェックせず、コンポーネントの &lt;code&gt;draw&lt;/code&gt; メソッドを呼び出すだけです。 &lt;code&gt;components&lt;/code&gt; ベクトルの値のタイプとして &lt;code&gt;Box&amp;lt;dyn Draw&amp;gt;&lt;/code&gt; を指定することにより、 &lt;code&gt;Screen&lt;/code&gt; &lt;code&gt;draw&lt;/code&gt; メソッドを呼び出すことができる値が必要な画面。</target>
        </trans-unit>
        <trans-unit id="80fbf38c87a2fe3d71541d31605bf9ab62ed6238" translate="yes" xml:space="preserve">
          <source>This concept&amp;mdash;of being concerned only with the messages a value responds to rather than the value&amp;rsquo;s concrete type&amp;mdash;is similar to the concept of &lt;em&gt;duck typing&lt;/em&gt; in dynamically typed languages: if it walks like a duck and quacks like a duck, then it must be a duck! In the implementation of &lt;code&gt;run&lt;/code&gt; on &lt;code&gt;Screen&lt;/code&gt; in Listing 17-5, &lt;code&gt;run&lt;/code&gt; doesn&amp;rsquo;t need to know what the concrete type of each component is. It doesn&amp;rsquo;t check whether a component is an instance of a &lt;code&gt;Button&lt;/code&gt; or a &lt;code&gt;SelectBox&lt;/code&gt;, it just calls the &lt;code&gt;draw&lt;/code&gt; method on the component. By specifying &lt;code&gt;Box&amp;lt;dyn Draw&amp;gt;&lt;/code&gt; as the type of the values in the &lt;code&gt;components&lt;/code&gt; vector, we&amp;rsquo;ve defined &lt;code&gt;Screen&lt;/code&gt; to need values that we can call the &lt;code&gt;draw&lt;/code&gt; method on.</source>
          <target state="translated">値の具体的な型ではなく、値が応答するメッセージのみに関係するというこの概念は、動的に型指定された言語での&lt;em&gt;ダックタイピング&lt;/em&gt;の概念に似てい&lt;em&gt;ます。アヒルの&lt;/em&gt;ように歩き、アヒルのように鳴く場合は、アヒル！実装では &lt;code&gt;run&lt;/code&gt; 上の &lt;code&gt;Screen&lt;/code&gt; のリスト17-5で、 &lt;code&gt;run&lt;/code&gt; 各構成要素の具体的な種類が何であるかを知っている必要はありません。コンポーネントが &lt;code&gt;Button&lt;/code&gt; または &lt;code&gt;SelectBox&lt;/code&gt; のインスタンスであるかどうかはチェックせず、コンポーネントの &lt;code&gt;draw&lt;/code&gt; メソッドを呼び出すだけです。 &lt;code&gt;components&lt;/code&gt; ベクトルの値のタイプとして &lt;code&gt;Box&amp;lt;dyn Draw&amp;gt;&lt;/code&gt; を指定することにより、次のように定義しました。 &lt;code&gt;Screen&lt;/code&gt; &lt;code&gt;draw&lt;/code&gt; メソッドを呼び出すことができる値を必要とする画面。</target>
        </trans-unit>
        <trans-unit id="918897f830b93edc22b990902ff69a6fc36b08cc" translate="yes" xml:space="preserve">
          <source>This conditional structure lets us support complex requirements. With the hardcoded values we have here, this example will print &lt;code&gt;Using purple as the background color&lt;/code&gt;.</source>
          <target state="translated">この条件付き構造により、複雑な要件をサポートできます。ここにハードコードされた値を &lt;code&gt;Using purple as the background color&lt;/code&gt; すると、この例では背景色として紫を使用が出力されます。</target>
        </trans-unit>
        <trans-unit id="3dcd38b0035fd15b13996ae1be8e3f24e8144a2a" translate="yes" xml:space="preserve">
          <source>This constant is defined to be &quot;1970-01-01 00:00:00 UTC&quot; on all systems with respect to the system clock. Using &lt;code&gt;duration_since&lt;/code&gt; on an existing &lt;a href=&quot;struct.systemtime&quot;&gt;&lt;code&gt;SystemTime&lt;/code&gt;&lt;/a&gt; instance can tell how far away from this point in time a measurement lies, and using &lt;code&gt;UNIX_EPOCH + duration&lt;/code&gt; can be used to create a &lt;a href=&quot;struct.systemtime&quot;&gt;&lt;code&gt;SystemTime&lt;/code&gt;&lt;/a&gt; instance to represent another fixed point in time.</source>
          <target state="translated">この定数は、システムクロックに関してすべてのシステムで「1970-01-01 00:00:00 UTC」と定義されています。既存の&lt;a href=&quot;struct.systemtime&quot;&gt; &lt;code&gt;SystemTime&lt;/code&gt; &lt;/a&gt;インスタンスで &lt;code&gt;duration_since&lt;/code&gt; を使用すると、この時点からどれだけ離れているかを測定できます &lt;code&gt;UNIX_EPOCH + duration&lt;/code&gt; を使用すると、&lt;a href=&quot;struct.systemtime&quot;&gt; &lt;code&gt;SystemTime&lt;/code&gt; &lt;/a&gt;インスタンスを作成して別の固定時点を表すことができます。</target>
        </trans-unit>
        <trans-unit id="b5d0e066df6c05d48b8ed4d894544fa1aeed7cdf" translate="yes" xml:space="preserve">
          <source>This constant is defined to be &quot;1970-01-01 00:00:00 UTC&quot; on all systems with respect to the system clock. Using &lt;code&gt;duration_since&lt;/code&gt; on an existing &lt;code&gt;SystemTime&lt;/code&gt; instance can tell how far away from this point in time a measurement lies, and using &lt;code&gt;UNIX_EPOCH + duration&lt;/code&gt; can be used to create a &lt;code&gt;SystemTime&lt;/code&gt; instance to represent another fixed point in time.</source>
          <target state="translated">この定数は、システムクロックに関してすべてのシステムで「1970-01-01 00:00:00 UTC」と定義されています。既存の &lt;code&gt;SystemTime&lt;/code&gt; インスタンスで &lt;code&gt;duration_since&lt;/code&gt; を使用すると、この時点からどれだけ離れているかを測定できます &lt;code&gt;UNIX_EPOCH + duration&lt;/code&gt; を使用すると、 &lt;code&gt;SystemTime&lt;/code&gt; インスタンスを作成して別の固定時点を表すことができます。</target>
        </trans-unit>
        <trans-unit id="b2173ef48f94c265cfdd9db0c9cedd205cdc4005" translate="yes" xml:space="preserve">
          <source>This construct eliminates a lot of nesting that would be necessary if you used &lt;code&gt;loop&lt;/code&gt;, &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;else&lt;/code&gt;, and &lt;code&gt;break&lt;/code&gt;, and it&amp;rsquo;s clearer. While a condition holds true, the code runs; otherwise, it exits the loop.</source>
          <target state="translated">この構造により、 &lt;code&gt;loop&lt;/code&gt; 、 &lt;code&gt;if&lt;/code&gt; 、 &lt;code&gt;else&lt;/code&gt; 、および &lt;code&gt;break&lt;/code&gt; を使用した場合に必要となる多くの入れ子がなくなり、より明確になります。条件が満たされている間、コードが実行されます。それ以外の場合は、ループを終了します。</target>
        </trans-unit>
        <trans-unit id="0f3921b041a98aaf2f8084439e4ed88136086a63" translate="yes" xml:space="preserve">
          <source>This construct is allowed because the first &lt;code&gt;spaces&lt;/code&gt; variable is a string type and the second &lt;code&gt;spaces&lt;/code&gt; variable, which is a brand-new variable that happens to have the same name as the first one, is a number type. Shadowing thus spares us from having to come up with different names, such as &lt;code&gt;spaces_str&lt;/code&gt; and &lt;code&gt;spaces_num&lt;/code&gt;; instead, we can reuse the simpler &lt;code&gt;spaces&lt;/code&gt; name. However, if we try to use &lt;code&gt;mut&lt;/code&gt; for this, as shown here, we&amp;rsquo;ll get a compile-time error:</source>
          <target state="translated">この構築物は、最初ので、許可されている &lt;code&gt;spaces&lt;/code&gt; 変数は文字列型と第二である &lt;code&gt;spaces&lt;/code&gt; 最初のものと同じ名前を持つようにたまたまブランドの新しい変数である変数、数値型です。したがって、 &lt;code&gt;spaces_num&lt;/code&gt; 、 &lt;code&gt;spaces_str&lt;/code&gt; やspace_numなどの異なる名前を付ける必要がなくなります。代わりに、単純な &lt;code&gt;spaces&lt;/code&gt; 名を再利用できます。ただし、ここに示すように &lt;code&gt;mut&lt;/code&gt; を使用しようとすると、コンパイル時エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="2fc6477635d5d363ee444b003b473b1635177727" translate="yes" xml:space="preserve">
          <source>This constructor is unsafe because we cannot guarantee that the data pointed to by &lt;code&gt;pointer&lt;/code&gt; is pinned, meaning that the data will not be moved or its storage invalidated until it gets dropped. If the constructed &lt;code&gt;Pin&amp;lt;P&amp;gt;&lt;/code&gt; does not guarantee that the data &lt;code&gt;P&lt;/code&gt; points to is pinned, that is a violation of the API contract and may lead to undefined behavior in later (safe) operations.</source>
          <target state="translated">このコンストラクタは安全ではありません。 &lt;code&gt;pointer&lt;/code&gt; が指すデータが固定されていることを保証できないためです。つまり、データが削除されるまで、データが移動したり、ストレージが無効になったりすることはありません。構築された &lt;code&gt;Pin&amp;lt;P&amp;gt;&lt;/code&gt; が &lt;code&gt;P&lt;/code&gt; がポイントするデータが固定されることを保証しない場合、それはAPIコントラクトの違反であり、後の（安全な）操作で未定義の動作を引き起こす可能性があります。</target>
        </trans-unit>
        <trans-unit id="ff43397602787e15a0f1ce39d92c367ec0e4e2ba" translate="yes" xml:space="preserve">
          <source>This constructor will panic if &lt;code&gt;secs&lt;/code&gt; is not finite, negative or overflows &lt;code&gt;Duration&lt;/code&gt;.</source>
          <target state="translated">このコンストラクタは、 &lt;code&gt;secs&lt;/code&gt; が有限でないか、負であるか、または &lt;code&gt;Duration&lt;/code&gt; をオーバーフローするとパニックになります。</target>
        </trans-unit>
        <trans-unit id="62c6e72ea916575b1c7e9925b7cd6a1ec78f970b" translate="yes" xml:space="preserve">
          <source>This constructor will panic if the carry from the nanoseconds overflows the seconds counter.</source>
          <target state="translated">このコンストラクタは、ナノ秒からのキャリーが秒カウンターをオーバーフローした場合にパニックを起こします。</target>
        </trans-unit>
        <trans-unit id="6b22e102a899811cfc691dccd223a5bfd8615f73" translate="yes" xml:space="preserve">
          <source>This consumes the &lt;code&gt;String&lt;/code&gt; on the left-hand side and re-uses its buffer (growing it if necessary). This is done to avoid allocating a new &lt;code&gt;String&lt;/code&gt; and copying the entire contents on every operation, which would lead to &lt;code&gt;O(n^2)&lt;/code&gt; running time when building an &lt;code&gt;n&lt;/code&gt;-byte string by repeated concatenation.</source>
          <target state="translated">これにより、左側の &lt;code&gt;String&lt;/code&gt; が消費され、そのバッファが再利用されます（必要に応じて拡大されます）。これは、新しい &lt;code&gt;String&lt;/code&gt; を割り当て、すべての操作で内容全体をコピーすることを避けるために行われます。これにより、繰り返し連結によって &lt;code&gt;n&lt;/code&gt; バイトの文字列を構築するときに &lt;code&gt;O(n^2)&lt;/code&gt; 実行時間が発生します。</target>
        </trans-unit>
        <trans-unit id="ff15f14738d56f849296682dc30e5c72af4309e0" translate="yes" xml:space="preserve">
          <source>This consumes the &lt;code&gt;String&lt;/code&gt; on the left-hand side and re-uses its buffer (growing it if necessary). This is done to avoid allocating a new &lt;code&gt;String&lt;/code&gt; and copying the entire contents on every operation, which would lead to &lt;em&gt;O&lt;/em&gt;(&lt;em&gt;n&lt;/em&gt;^2) running time when building an &lt;em&gt;n&lt;/em&gt;-byte string by repeated concatenation.</source>
          <target state="translated">これにより、左側の &lt;code&gt;String&lt;/code&gt; が消費され、そのバッファが再利用されます（必要に応じて拡張されます）。これは、新しい &lt;code&gt;String&lt;/code&gt; を割り当てて、すべての操作で内容全体をコピーすることを回避するために行われます。これにより、連結を繰り返して&lt;em&gt;n&lt;/em&gt;バイトの文字列を作成するときに&lt;em&gt;O&lt;/em&gt;（&lt;em&gt;n&lt;/em&gt; ^ 2）の実行時間が発生します。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="9c1a59da820eab802e08d64caefd05fd88b5910a" translate="yes" xml:space="preserve">
          <source>This consumes the &lt;code&gt;String&lt;/code&gt;, so we do not need to copy its contents.</source>
          <target state="translated">これは &lt;code&gt;String&lt;/code&gt; を消費するため、その内容をコピーする必要はありません。</target>
        </trans-unit>
        <trans-unit id="1fb456c0fbe6b818fcfe6664fed41526ed5a6d4f" translate="yes" xml:space="preserve">
          <source>This control message contains file descriptors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aced2a02c36041d35f97f86959c8c51a1e4fb1a8" translate="yes" xml:space="preserve">
          <source>This control message contains unix credentials.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdf3d0a305b0dd41c0720025809f7bbdfc2e29a7" translate="yes" xml:space="preserve">
          <source>This conversion allocates a new error with a simple representation of error kind.</source>
          <target state="translated">この変換は,エラーの種類を単純に表現した新しいエラーを割り当てます。</target>
        </trans-unit>
        <trans-unit id="680616b748f55e8f2a3a0b7bc442fa697101f3ab" translate="yes" xml:space="preserve">
          <source>This conversion allocates on the heap and performs a copy of &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="translated">この変換はヒープに割り当てられ、 &lt;code&gt;s&lt;/code&gt; のコピーを実行します。</target>
        </trans-unit>
        <trans-unit id="9a31c836c91541651df449cd7fae82a0fb324fe3" translate="yes" xml:space="preserve">
          <source>This conversion allocates on the heap and performs a copy of &lt;code&gt;slice&lt;/code&gt;.</source>
          <target state="translated">この変換はヒープに割り当てられ、 &lt;code&gt;slice&lt;/code&gt; コピーを実行します。</target>
        </trans-unit>
        <trans-unit id="9fa8116281488d60de9f3c4d7eaa019ecce22d9b" translate="yes" xml:space="preserve">
          <source>This conversion always returns &lt;code&gt;RecvTimeoutError::Disconnected&lt;/code&gt;.</source>
          <target state="translated">この変換は常に &lt;code&gt;RecvTimeoutError::Disconnected&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="a1ed0a334eeab7a53114c9e9ec5ed0ef897b2581" translate="yes" xml:space="preserve">
          <source>This conversion always returns &lt;code&gt;TryRecvError::Disconnected&lt;/code&gt;.</source>
          <target state="translated">この変換は常に &lt;code&gt;TryRecvError::Disconnected&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="82865c3f0e8956130ac1b56ac62e2b0276fe13c6" translate="yes" xml:space="preserve">
          <source>This conversion always returns a &lt;code&gt;TrySendError::Disconnected&lt;/code&gt; containing the data in the &lt;code&gt;SendError&amp;lt;T&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">この変換は常に、 &lt;code&gt;SendError&amp;lt;T&amp;gt;&lt;/code&gt; データを含む &lt;code&gt;TrySendError::Disconnected&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="191fbbeba587abac9c4a996c422eb2e1a86f8da6" translate="yes" xml:space="preserve">
          <source>This conversion creates a &lt;a href=&quot;../net/enum.socketaddr#variant.V4&quot;&gt;&lt;code&gt;SocketAddr::V4&lt;/code&gt;&lt;/a&gt; for a &lt;a href=&quot;../net/enum.ipaddr#variant.V4&quot;&gt;&lt;code&gt;IpAddr::V4&lt;/code&gt;&lt;/a&gt; and creates a &lt;a href=&quot;../net/enum.socketaddr#variant.V6&quot;&gt;&lt;code&gt;SocketAddr::V6&lt;/code&gt;&lt;/a&gt; for a &lt;a href=&quot;../net/enum.ipaddr#variant.V6&quot;&gt;&lt;code&gt;IpAddr::V6&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この変換により、&lt;a href=&quot;../net/enum.ipaddr#variant.V4&quot;&gt; &lt;code&gt;IpAddr::V4&lt;/code&gt; &lt;/a&gt;&lt;a href=&quot;../net/enum.socketaddr#variant.V4&quot;&gt; &lt;code&gt;SocketAddr::V4&lt;/code&gt; &lt;/a&gt;が作成され、&lt;a href=&quot;../net/enum.ipaddr#variant.V6&quot;&gt; &lt;code&gt;IpAddr::V6&lt;/code&gt; &lt;/a&gt;&lt;a href=&quot;../net/enum.socketaddr#variant.V6&quot;&gt; &lt;code&gt;SocketAddr::V6&lt;/code&gt; &lt;/a&gt;が作成されます。</target>
        </trans-unit>
        <trans-unit id="e3e202dba3c3f87c15f9baf72668c6b89f20fb13" translate="yes" xml:space="preserve">
          <source>This conversion creates a &lt;a href=&quot;enum.socketaddr#variant.V4&quot;&gt;&lt;code&gt;SocketAddr::V4&lt;/code&gt;&lt;/a&gt; for a &lt;a href=&quot;enum.ipaddr#variant.V4&quot;&gt;&lt;code&gt;IpAddr::V4&lt;/code&gt;&lt;/a&gt; and creates a &lt;a href=&quot;enum.socketaddr#variant.V6&quot;&gt;&lt;code&gt;SocketAddr::V6&lt;/code&gt;&lt;/a&gt; for a &lt;a href=&quot;enum.ipaddr#variant.V6&quot;&gt;&lt;code&gt;IpAddr::V6&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この変換により、&lt;a href=&quot;enum.ipaddr#variant.V4&quot;&gt; &lt;code&gt;IpAddr::V4&lt;/code&gt; &lt;/a&gt;&lt;a href=&quot;enum.socketaddr#variant.V4&quot;&gt; &lt;code&gt;SocketAddr::V4&lt;/code&gt; &lt;/a&gt;が作成され、&lt;a href=&quot;enum.ipaddr#variant.V6&quot;&gt; &lt;code&gt;IpAddr::V6&lt;/code&gt; &lt;/a&gt;&lt;a href=&quot;enum.socketaddr#variant.V6&quot;&gt; &lt;code&gt;SocketAddr::V6&lt;/code&gt; &lt;/a&gt;が作成されます。</target>
        </trans-unit>
        <trans-unit id="3b1a65936a10e1c346d064991eab656396fb2bba" translate="yes" xml:space="preserve">
          <source>This conversion currently should not allocate memory, but this behavior is not guaranteed on all platforms or in all future versions.</source>
          <target state="translated">この変換は現在メモリを割り当ててはいけませんが、この動作はすべてのプラットフォームや将来のすべてのバージョンで保証されているわけではありません。</target>
        </trans-unit>
        <trans-unit id="e7f2cebd3b32b1fc620100acfba14583ac5721f8" translate="yes" xml:space="preserve">
          <source>This conversion does not allocate on the heap and happens in place.</source>
          <target state="translated">この変換はヒープ上では割り当てられず、その場で行われます。</target>
        </trans-unit>
        <trans-unit id="ece3abafa7c5e7855afc6b2c712b92113a0c3cfa" translate="yes" xml:space="preserve">
          <source>This conversion does not allocate or copy memory.</source>
          <target state="translated">この変換はメモリを割り当てたりコピーしたりしません。</target>
        </trans-unit>
        <trans-unit id="bfaed574bc93990621932481bdc991a5d31277ba" translate="yes" xml:space="preserve">
          <source>This conversion happens in-place, and has &lt;em&gt;O&lt;/em&gt;(&lt;em&gt;n&lt;/em&gt;) time complexity.</source>
          <target state="translated">この変換はインプレースで行われ、&lt;em&gt;O&lt;/em&gt;（&lt;em&gt;n&lt;/em&gt;）時間計算量があります。</target>
        </trans-unit>
        <trans-unit id="eb0a6b0407963e31db76813c54686486ddeb6e67" translate="yes" xml:space="preserve">
          <source>This conversion may entail doing a check for UTF-8 validity.</source>
          <target state="translated">この変換には、UTF-8の有効性のチェックが必要な場合があります。</target>
        </trans-unit>
        <trans-unit id="0fd6ab28cb16ba2dd2d81ceb7549687e9cec1f65" translate="yes" xml:space="preserve">
          <source>This conversion may entail doing a check for UTF-8 validity. Note that validation is performed because non-UTF-8 strings are perfectly valid for some OS.</source>
          <target state="translated">この変換には、UTF-8の有効性のチェックが必要な場合があります。一部のOSではUTF-8以外の文字列が完全に有効であるため、検証が行われることに注意してください。</target>
        </trans-unit>
        <trans-unit id="8330bc0df78d6eb52dcc8484b74d30aa78ea3703" translate="yes" xml:space="preserve">
          <source>This conversion moves the array to newly heap-allocated memory.</source>
          <target state="translated">この変換は、配列を新たにヒープ割り当てられたメモリに移動させます。</target>
        </trans-unit>
        <trans-unit id="0d8209ee4e143c8cb222975b9c2887b40d4af1c6" translate="yes" xml:space="preserve">
          <source>This conversion requires no data movement or allocation, and has constant time complexity.</source>
          <target state="translated">この変換は、データの移動や割り当てを必要とせず、一定の時間的な複雑さを持っています。</target>
        </trans-unit>
        <trans-unit id="a2f146b8b2fc9fbff68e3aacb1296a0b784db40b" translate="yes" xml:space="preserve">
          <source>This converts the weak pointer into a raw pointer, preserving the original weak count. It can be turned back into the &lt;code&gt;Weak&amp;lt;T&amp;gt;&lt;/code&gt; with &lt;a href=&quot;struct.weak#method.from_raw&quot;&gt;&lt;code&gt;from_raw&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これにより、ウィークポインターが生のポインターに変換され、元のウィークカウントが保持されます。これは、背面に回すことができる &lt;code&gt;Weak&amp;lt;T&amp;gt;&lt;/code&gt; と&lt;a href=&quot;struct.weak#method.from_raw&quot;&gt; &lt;code&gt;from_raw&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="068161e531a8b3af305ba6f7bb36fd2b7ca30a9c" translate="yes" xml:space="preserve">
          <source>This converts the weak pointer into a raw pointer, while still preserving the ownership of one weak reference (the weak count is not modified by this operation). It can be turned back into the &lt;code&gt;Weak&amp;lt;T&amp;gt;&lt;/code&gt; with &lt;a href=&quot;struct.weak#method.from_raw&quot;&gt;&lt;code&gt;from_raw&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これにより、1つの弱参照の所有権を保持したまま、弱ポインタ​​ーが生のポインターに変換されます（弱カウントはこの操作によって変更されません）。これは、背面に回すことができる &lt;code&gt;Weak&amp;lt;T&amp;gt;&lt;/code&gt; と&lt;a href=&quot;struct.weak#method.from_raw&quot;&gt; &lt;code&gt;from_raw&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0c699db8a5191d953bd2f9a766d34a17f9fc7bd1" translate="yes" xml:space="preserve">
          <source>This corresponds to the type returned from a generator either with a &lt;code&gt;return&lt;/code&gt; statement or implicitly as the last expression of a generator literal. For example futures would use this as &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt; as it represents a completed future.</source>
          <target state="translated">これは、 &lt;code&gt;return&lt;/code&gt; ステートメントを使用して、またはジェネレーターリテラルの最後の式として暗黙的に、ジェネレーターから返される型に対応します。たとえば、フューチャーは完成したフューチャーを表すため &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt; これをResult &amp;lt;T、E&amp;gt;として使用します。</target>
        </trans-unit>
        <trans-unit id="4049b3c18034165d976b921c99656187a99b1c48" translate="yes" xml:space="preserve">
          <source>This could be called as &lt;code&gt;&amp;lt;Foo as Foo&amp;gt;::foo()&lt;/code&gt;, which would not be able to pick an implementation.</source>
          <target state="translated">これは &lt;code&gt;&amp;lt;Foo as Foo&amp;gt;::foo()&lt;/code&gt; として呼び出すことができ、実装を選択することはできません。</target>
        </trans-unit>
        <trans-unit id="287539a4f23b39a26818b82e9ae17d404cfd326d" translate="yes" xml:space="preserve">
          <source>This could be caused by a typo. Did you misspell the macro's name?</source>
          <target state="translated">誤字脱字が原因かもしれません。マクロの名前のスペルを間違えたのでしょうか?</target>
        </trans-unit>
        <trans-unit id="13b235947bdbb45d737ce6790102efc941982f83" translate="yes" xml:space="preserve">
          <source>This crate primarily contains a &lt;a href=&quot;https://doc.rust-lang.org/proc_macro/struct.TokenStream.html&quot;&gt;&lt;code&gt;TokenStream&lt;/code&gt;&lt;/a&gt; type. Procedural macros operate over &lt;em&gt;token streams&lt;/em&gt; instead of AST nodes, which is a far more stable interface over time for both the compiler and for procedural macros to target. A &lt;em&gt;token stream&lt;/em&gt; is roughly equivalent to &lt;code&gt;Vec&amp;lt;TokenTree&amp;gt;&lt;/code&gt; where a &lt;code&gt;TokenTree&lt;/code&gt; can roughly be thought of as lexical token. For example &lt;code&gt;foo&lt;/code&gt; is an &lt;code&gt;Ident&lt;/code&gt; token, &lt;code&gt;.&lt;/code&gt; is a &lt;code&gt;Punct&lt;/code&gt; token, and &lt;code&gt;1.2&lt;/code&gt; is a &lt;code&gt;Literal&lt;/code&gt; token. The &lt;code&gt;TokenStream&lt;/code&gt; type, unlike &lt;code&gt;Vec&amp;lt;TokenTree&amp;gt;&lt;/code&gt;, is cheap to clone.</source>
          <target state="translated">このクレートには、主に&lt;a href=&quot;https://doc.rust-lang.org/proc_macro/struct.TokenStream.html&quot;&gt; &lt;code&gt;TokenStream&lt;/code&gt; &lt;/a&gt;タイプが含まれています。手続き型マクロはASTノードの代わりに&lt;em&gt;トークンストリーム&lt;/em&gt;上で動作し&lt;em&gt;ます&lt;/em&gt;。これは、コンパイラーと手続き型マクロの両方が対象とする、時間の経過とともにはるかに安定したインターフェイスです。&lt;em&gt;トークンストリームは、&lt;/em&gt;ほぼ同等である &lt;code&gt;Vec&amp;lt;TokenTree&amp;gt;&lt;/code&gt; &lt;code&gt;TokenTree&lt;/code&gt; は概ね字句トークンと考えることができます。たとえば、 &lt;code&gt;foo&lt;/code&gt; は &lt;code&gt;Ident&lt;/code&gt; トークンです &lt;code&gt;.&lt;/code&gt; ある &lt;code&gt;Punct&lt;/code&gt; トークン、および &lt;code&gt;1.2&lt;/code&gt; がある &lt;code&gt;Literal&lt;/code&gt; トークン。 &lt;code&gt;TokenStream&lt;/code&gt; のタイプは、とは違って &lt;code&gt;Vec&amp;lt;TokenTree&amp;gt;&lt;/code&gt; 、クローンに安いです。</target>
        </trans-unit>
        <trans-unit id="5fc5d0b91b345a05b4241830102cb300bf80ef47" translate="yes" xml:space="preserve">
          <source>This creates another pointer to the same allocation, increasing the strong reference count.</source>
          <target state="translated">これは、同じアロケーションへの別のポインタを作成し、強力な参照カウントを増加させます。</target>
        </trans-unit>
        <trans-unit id="cff1a339d3f6091f32453655f9ee1f32c7930920" translate="yes" xml:space="preserve">
          <source>This creates another pointer to the same inner value, increasing the strong reference count.</source>
          <target state="translated">これにより、同じ内部値への別のポインタが作成され、強力な参照カウントが増加します。</target>
        </trans-unit>
        <trans-unit id="c793b99248db7ed16f6d7097d8baba33c4688bf2" translate="yes" xml:space="preserve">
          <source>This defines a trait with two methods. All values that have &lt;a href=&quot;implementations&quot;&gt;implementations&lt;/a&gt; of this trait while the trait is in scope can have their &lt;code&gt;draw&lt;/code&gt; and &lt;code&gt;bounding_box&lt;/code&gt; methods called.</source>
          <target state="translated">これは、2つのメソッドで特性を定義します。トレイトがスコープ内にあるときにこのトレイトの&lt;a href=&quot;implementations&quot;&gt;実装&lt;/a&gt;を持つすべての値は、 &lt;code&gt;draw&lt;/code&gt; および &lt;code&gt;bounding_box&lt;/code&gt; メソッドを呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="1d48ec195193e5a8a6ddc6d7306e5931fc440ce0" translate="yes" xml:space="preserve">
          <source>This definition is similar to the custom derive macro&amp;rsquo;s signature: we receive the tokens that are inside the parentheses and return the code we wanted to generate.</source>
          <target state="translated">この定義は、カスタム派生マクロの署名に似ています。括弧内にあるトークンを受け取り、生成したいコードを返します。</target>
        </trans-unit>
        <trans-unit id="7ec7ae52304bec8c18c92988cc904eba30640fe1" translate="yes" xml:space="preserve">
          <source>This definition should now make more sense to you. As you can see, &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; is an enum that is generic over type &lt;code&gt;T&lt;/code&gt; and has two variants: &lt;code&gt;Some&lt;/code&gt;, which holds one value of type &lt;code&gt;T&lt;/code&gt;, and a &lt;code&gt;None&lt;/code&gt; variant that doesn&amp;rsquo;t hold any value. By using the &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; enum, we can express the abstract concept of having an optional value, and because &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; is generic, we can use this abstraction no matter what the type of the optional value is.</source>
          <target state="translated">この定義は、あなたにとってより意味のあるものになるはずです。あなたが見ることができるように、 &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; 種類以上の一般的なもので列挙型である &lt;code&gt;T&lt;/code&gt; ：と二つの変種がある &lt;code&gt;Some&lt;/code&gt; 、いずれかのタイプの値を保持 &lt;code&gt;T&lt;/code&gt; 、および &lt;code&gt;None&lt;/code&gt; 任意の値を保持していないバリアントを。 &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; enum を使用することで、オプションの値を持つという抽象的な概念を表現できます &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; はジェネリックであるため、オプションの値のタイプに関係なく、この抽象化を使用できます。</target>
        </trans-unit>
        <trans-unit id="a1dc77bf501a21c3fcf8fcfdb984f36618d4b9d8" translate="yes" xml:space="preserve">
          <source>This demonstrates that we&amp;rsquo;re now using standard output for successful output and standard error for error output as appropriate.</source>
          <target state="translated">これは、正常な出力には標準出力を、エラー出力には標準エラーを適切に使用していることを示しています。</target>
        </trans-unit>
        <trans-unit id="fab63306db027b7791c0993bab148aa9b72c14e9" translate="yes" xml:space="preserve">
          <source>This description is obviously informal. Making it more precise is expected to proceed as part of a general effort to specify the Rust type checker more precisely.</source>
          <target state="translated">この記述は明らかに非公式なものです。より正確にすることは、Rust 型チェッカーをより正確に指定するための一般的な努力の一環として行われることが期待されています。</target>
        </trans-unit>
        <trans-unit id="5155c706e717eca62f9640a389101247c0cf2c80" translate="yes" xml:space="preserve">
          <source>This destructor consists of two components:</source>
          <target state="translated">このデストラクタは2つのコンポーネントから構成されています。</target>
        </trans-unit>
        <trans-unit id="0501267bf2be740a305fdf189b227a4c7486d27e" translate="yes" xml:space="preserve">
          <source>This distinction would also exist in an interpreter. Static checks like syntactic analysis, type checking, and lints should happen before the program is executed regardless of when it is executed.</source>
          <target state="translated">この区別はインタプリタにも存在します。構文解析、型チェック、リントのような静的チェックは、プログラムがいつ実行されたかに関係なく、プログラムが実行される前に行われるべきです。</target>
        </trans-unit>
        <trans-unit id="f074ad4712bf36f567466c2e78802eda538edf52" translate="yes" xml:space="preserve">
          <source>This documentation describes a number of methods and trait implementations on the &lt;code&gt;char&lt;/code&gt; type. For technical reasons, there is additional, separate documentation in &lt;a href=&quot;char/index&quot;&gt;the &lt;code&gt;std::char&lt;/code&gt; module&lt;/a&gt; as well.</source>
          <target state="translated">このドキュメントでは、 &lt;code&gt;char&lt;/code&gt; 型のいくつかのメソッドと特性の実装について説明します。技術的な理由から、&lt;a href=&quot;char/index&quot;&gt; &lt;code&gt;std::char&lt;/code&gt; &lt;/a&gt;モジュールにも追加の個別のドキュメントがあります。</target>
        </trans-unit>
        <trans-unit id="68839ac29f4116303cf30db2371868d96097990a" translate="yes" xml:space="preserve">
          <source>This does call the argument's implementation of &lt;a href=&quot;../ops/trait.drop&quot;&gt;&lt;code&gt;Drop&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これは、引数の&lt;a href=&quot;../ops/trait.drop&quot;&gt; &lt;code&gt;Drop&lt;/code&gt; &lt;/a&gt;の実装を呼び出します。</target>
        </trans-unit>
        <trans-unit id="e9a625eacba45783e02d255cb539fbdd648ae63a" translate="yes" xml:space="preserve">
          <source>This does not include the path to the program as the first argument; it only includes the arguments specified with &lt;a href=&quot;struct.command#method.arg&quot;&gt;&lt;code&gt;Command::arg&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;struct.command#method.args&quot;&gt;&lt;code&gt;Command::args&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これには、最初の引数としてプログラムへのパスは含まれません。&lt;a href=&quot;struct.command#method.arg&quot;&gt; &lt;code&gt;Command::arg&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;struct.command#method.args&quot;&gt; &lt;code&gt;Command::args&lt;/code&gt; &lt;/a&gt;指定された引数のみが含まれます。</target>
        </trans-unit>
        <trans-unit id="46fdf1d9a29edff79b3169310e8e3c74c04e6cd6" translate="yes" xml:space="preserve">
          <source>This does not preserve ordering, but is &lt;em&gt;O&lt;/em&gt;(1).</source>
          <target state="translated">これは順序を保持しませんが、&lt;em&gt;O&lt;/em&gt;（1）です。</target>
        </trans-unit>
        <trans-unit id="cc3143ca0c8ed5c4ad51a7f5632b38d278a744be" translate="yes" xml:space="preserve">
          <source>This does not preserve ordering, but is O(1).</source>
          <target state="translated">これは順序を保持しないが、O(1)である。</target>
        </trans-unit>
        <trans-unit id="302cbd1c584e8c39bda1206e23be2bed7460cc52" translate="yes" xml:space="preserve">
          <source>This does not take ownership of the original allocation and requires no resource management later, but you must not use the pointer after its lifetime.</source>
          <target state="translated">これは元の割り当ての所有権を取らないので、後でリソース管理をする必要はありませんが、そのポインタの寿命が終わった後は使用してはいけません。</target>
        </trans-unit>
        <trans-unit id="601f0aa53280d7fb3fab96e73d4cc042d197513d" translate="yes" xml:space="preserve">
          <source>This does so by calling the argument's implementation of &lt;a href=&quot;../ops/trait.drop&quot;&gt;&lt;code&gt;Drop&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これは、引数の&lt;a href=&quot;../ops/trait.drop&quot;&gt; &lt;code&gt;Drop&lt;/code&gt; &lt;/a&gt;の実装を呼び出すことによって行われます。</target>
        </trans-unit>
        <trans-unit id="7ec03adb1087f5abb7a8507c877e74407679b28c" translate="yes" xml:space="preserve">
          <source>This doesn't actually allocate if &lt;code&gt;T&lt;/code&gt; is zero-sized.</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; のサイズがゼロの場合、これは実際には割り当てられません。</target>
        </trans-unit>
        <trans-unit id="1a27813265527dd550d73a565f67475ec4a26516" translate="yes" xml:space="preserve">
          <source>This effectively does nothing for types which implement &lt;code&gt;Copy&lt;/code&gt;, e.g. integers. Such values are copied and &lt;em&gt;then&lt;/em&gt; moved into the function, so the value persists after this function call.</source>
          <target state="translated">これは、整数など、 &lt;code&gt;Copy&lt;/code&gt; を実装する型には効果がありません。このような値がコピーされ、&lt;em&gt;その後、&lt;/em&gt;機能に移動するので、この関数呼び出し後の値を持続します。</target>
        </trans-unit>
        <trans-unit id="eb1f652575dd2244737e0203d7e6859c386e1f92" translate="yes" xml:space="preserve">
          <source>This enables some memory layout optimization. For example, &lt;code&gt;Option&amp;lt;NonZeroI128&amp;gt;&lt;/code&gt; is the same size as &lt;code&gt;i128&lt;/code&gt;:</source>
          <target state="translated">これにより、メモリレイアウトの最適化が可能になります。たとえば、 &lt;code&gt;Option&amp;lt;NonZeroI128&amp;gt;&lt;/code&gt; はi128と同じサイズ &lt;code&gt;i128&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f67f6cc0c2c10dc19997b3839443098a644f1d26" translate="yes" xml:space="preserve">
          <source>This enables some memory layout optimization. For example, &lt;code&gt;Option&amp;lt;NonZeroI16&amp;gt;&lt;/code&gt; is the same size as &lt;code&gt;i16&lt;/code&gt;:</source>
          <target state="translated">これにより、メモリレイアウトの最適化が可能になります。たとえば、 &lt;code&gt;Option&amp;lt;NonZeroI16&amp;gt;&lt;/code&gt; はi16と同じサイズ &lt;code&gt;i16&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="734061adf87b0795fad2886322ea47c0aec2f2ad" translate="yes" xml:space="preserve">
          <source>This enables some memory layout optimization. For example, &lt;code&gt;Option&amp;lt;NonZeroI32&amp;gt;&lt;/code&gt; is the same size as &lt;code&gt;i32&lt;/code&gt;:</source>
          <target state="translated">これにより、メモリレイアウトの最適化が可能になります。たとえば、 &lt;code&gt;Option&amp;lt;NonZeroI32&amp;gt;&lt;/code&gt; は &lt;code&gt;i32&lt;/code&gt; と同じサイズです。</target>
        </trans-unit>
        <trans-unit id="00340c6c435ce7c1fdb4cf194be81cf07905d3dd" translate="yes" xml:space="preserve">
          <source>This enables some memory layout optimization. For example, &lt;code&gt;Option&amp;lt;NonZeroI64&amp;gt;&lt;/code&gt; is the same size as &lt;code&gt;i64&lt;/code&gt;:</source>
          <target state="translated">これにより、メモリレイアウトの最適化が可能になります。たとえば、 &lt;code&gt;Option&amp;lt;NonZeroI64&amp;gt;&lt;/code&gt; はi64と同じサイズ &lt;code&gt;i64&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="278e3b6e04cd3eac83950c68db7f2e8e510eb775" translate="yes" xml:space="preserve">
          <source>This enables some memory layout optimization. For example, &lt;code&gt;Option&amp;lt;NonZeroI8&amp;gt;&lt;/code&gt; is the same size as &lt;code&gt;i8&lt;/code&gt;:</source>
          <target state="translated">これにより、メモリレイアウトの最適化が可能になります。たとえば、 &lt;code&gt;Option&amp;lt;NonZeroI8&amp;gt;&lt;/code&gt; は &lt;code&gt;i8&lt;/code&gt; と同じサイズです。</target>
        </trans-unit>
        <trans-unit id="d6a41567af1e9968e9c90e92ec21b8804316cfe8" translate="yes" xml:space="preserve">
          <source>This enables some memory layout optimization. For example, &lt;code&gt;Option&amp;lt;NonZeroIsize&amp;gt;&lt;/code&gt; is the same size as &lt;code&gt;isize&lt;/code&gt;:</source>
          <target state="translated">これにより、メモリレイアウトの最適化が可能になります。たとえば、 &lt;code&gt;Option&amp;lt;NonZeroIsize&amp;gt;&lt;/code&gt; はisizeと同じサイズ &lt;code&gt;isize&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cf2e6ed40009c7af3e4c82c9a64e0f2f0797bce2" translate="yes" xml:space="preserve">
          <source>This enables some memory layout optimization. For example, &lt;code&gt;Option&amp;lt;NonZeroU128&amp;gt;&lt;/code&gt; is the same size as &lt;code&gt;u128&lt;/code&gt;:</source>
          <target state="translated">これにより、メモリレイアウトの最適化が可能になります。たとえば、 &lt;code&gt;Option&amp;lt;NonZeroU128&amp;gt;&lt;/code&gt; はu128と同じサイズ &lt;code&gt;u128&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="76da8b2ba60cec40f8f5e62e107f1dbcb755bbbb" translate="yes" xml:space="preserve">
          <source>This enables some memory layout optimization. For example, &lt;code&gt;Option&amp;lt;NonZeroU16&amp;gt;&lt;/code&gt; is the same size as &lt;code&gt;u16&lt;/code&gt;:</source>
          <target state="translated">これにより、メモリレイアウトの最適化が可能になります。たとえば、 &lt;code&gt;Option&amp;lt;NonZeroU16&amp;gt;&lt;/code&gt; はu16と同じサイズ &lt;code&gt;u16&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ccbf5b5bf97bc9198c28f18b82543d27c5b27285" translate="yes" xml:space="preserve">
          <source>This enables some memory layout optimization. For example, &lt;code&gt;Option&amp;lt;NonZeroU32&amp;gt;&lt;/code&gt; is the same size as &lt;code&gt;u32&lt;/code&gt;:</source>
          <target state="translated">これにより、メモリレイアウトの最適化が可能になります。たとえば、 &lt;code&gt;Option&amp;lt;NonZeroU32&amp;gt;&lt;/code&gt; は &lt;code&gt;u32&lt;/code&gt; と同じサイズです。</target>
        </trans-unit>
        <trans-unit id="538d2876995cecf5e64928ddfeb01ab1a800bbde" translate="yes" xml:space="preserve">
          <source>This enables some memory layout optimization. For example, &lt;code&gt;Option&amp;lt;NonZeroU64&amp;gt;&lt;/code&gt; is the same size as &lt;code&gt;u64&lt;/code&gt;:</source>
          <target state="translated">これにより、メモリレイアウトの最適化が可能になります。たとえば、 &lt;code&gt;Option&amp;lt;NonZeroU64&amp;gt;&lt;/code&gt; はu64と同じサイズ &lt;code&gt;u64&lt;/code&gt; 。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
