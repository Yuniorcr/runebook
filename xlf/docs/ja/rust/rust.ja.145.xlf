<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="rust">
    <body>
      <group id="rust">
        <trans-unit id="9d100ce5589542ca940be1976bd5873a4f885c2a" translate="yes" xml:space="preserve">
          <source>Returns the &lt;code&gt;n&lt;/code&gt;th element from the end of the iterator. &lt;a href=&quot;../iter/trait.doubleendediterator#method.nth_back&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">イテレータの末尾から &lt;code&gt;n&lt;/code&gt; 番目の要素を返します。&lt;a href=&quot;../iter/trait.doubleendediterator#method.nth_back&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="38ef14d37b67e942e2153f5c9d696c3418ebb368" translate="yes" xml:space="preserve">
          <source>Returns the &lt;code&gt;n&lt;/code&gt;th element from the end of the iterator. &lt;a href=&quot;iter/trait.doubleendediterator#method.nth_back&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">イテレータの末尾から &lt;code&gt;n&lt;/code&gt; 番目の要素を返します。&lt;a href=&quot;iter/trait.doubleendediterator#method.nth_back&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="58ca0a7a5ea51c978b54d16bf5bd591fb190a5fe" translate="yes" xml:space="preserve">
          <source>Returns the &lt;code&gt;n&lt;/code&gt;th element from the end of the iterator. &lt;a href=&quot;trait.doubleendediterator#method.nth_back&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">イテレータの末尾から &lt;code&gt;n&lt;/code&gt; 番目の要素を返します。&lt;a href=&quot;trait.doubleendediterator#method.nth_back&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="14e269878aad58bfba0f8a6b9a5d62a272706507" translate="yes" xml:space="preserve">
          <source>Returns the &lt;code&gt;n&lt;/code&gt;th element of the iterator.</source>
          <target state="translated">イテレータの &lt;code&gt;n&lt;/code&gt; 番目の要素を返します。</target>
        </trans-unit>
        <trans-unit id="b9033512050d13ee4fd6379769391e49de67e8a0" translate="yes" xml:space="preserve">
          <source>Returns the &lt;code&gt;n&lt;/code&gt;th element of the iterator. &lt;a href=&quot;../../../iter/trait.iterator#method.nth&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">イテレータの &lt;code&gt;n&lt;/code&gt; 番目の要素を返します。&lt;a href=&quot;../../../iter/trait.iterator#method.nth&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="18689ac1d66567743c12371477712deb272ddff6" translate="yes" xml:space="preserve">
          <source>Returns the &lt;code&gt;n&lt;/code&gt;th element of the iterator. &lt;a href=&quot;../../iter/trait.iterator#method.nth&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">イテレータの &lt;code&gt;n&lt;/code&gt; 番目の要素を返します。&lt;a href=&quot;../../iter/trait.iterator#method.nth&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="77dd18914e5d697fcef45b39830d0a4287533017" translate="yes" xml:space="preserve">
          <source>Returns the &lt;code&gt;n&lt;/code&gt;th element of the iterator. &lt;a href=&quot;../iter/trait.iterator#method.nth&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">イテレータの &lt;code&gt;n&lt;/code&gt; 番目の要素を返します。&lt;a href=&quot;../iter/trait.iterator#method.nth&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5f21157c3f7a41ca454f82ba07d4877e4e38fc48" translate="yes" xml:space="preserve">
          <source>Returns the &lt;code&gt;n&lt;/code&gt;th element of the iterator. &lt;a href=&quot;iter/trait.iterator#method.nth&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">イテレータの &lt;code&gt;n&lt;/code&gt; 番目の要素を返します。&lt;a href=&quot;iter/trait.iterator#method.nth&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e55a448e57797917ffc9942478894a44fc7c5bea" translate="yes" xml:space="preserve">
          <source>Returns the &lt;code&gt;n&lt;/code&gt;th element of the iterator. &lt;a href=&quot;trait.iterator#method.nth&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">イテレータの &lt;code&gt;n&lt;/code&gt; 番目の要素を返します。&lt;a href=&quot;trait.iterator#method.nth&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="460ca8fe4283e5e27aa6b84168d1789b45971471" translate="yes" xml:space="preserve">
          <source>Returns the ID of the device containing the file.</source>
          <target state="translated">ファイルを格納しているデバイスのIDを返します。</target>
        </trans-unit>
        <trans-unit id="390b0b5c091fdc42b36c6c1a6468dfd2992db22c" translate="yes" xml:space="preserve">
          <source>Returns the ID of the device containing the file. &lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.dev&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">ファイルを含むデバイスのIDを返します。&lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.dev&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a836ea954851ab388f8e87a14fae0a9de53bc224" translate="yes" xml:space="preserve">
          <source>Returns the IP address associated with this socket address.</source>
          <target state="translated">このソケットアドレスに関連付けられたIPアドレスを返します。</target>
        </trans-unit>
        <trans-unit id="4cd21405eac57719d505795085caf6e1f1cbb2ff" translate="yes" xml:space="preserve">
          <source>Returns the OS error that this error represents (if any).</source>
          <target state="translated">このエラーが表すOSのエラーを返します(もしあれば)。</target>
        </trans-unit>
        <trans-unit id="00c287196a9bc77774ec1ee000e67c43c9ddee81" translate="yes" xml:space="preserve">
          <source>Returns the OS-assigned process identifier associated with this child.</source>
          <target state="translated">この子に関連付けられた OS 割り当てられたプロセス識別子を返します。</target>
        </trans-unit>
        <trans-unit id="af01d0b295d0e18424cfa1df98f194156ee4be60" translate="yes" xml:space="preserve">
          <source>Returns the OS-assigned process identifier associated with this process's parent.</source>
          <target state="translated">このプロセスの親に関連付けられた OS 割り当てられたプロセス識別子を返します。</target>
        </trans-unit>
        <trans-unit id="d2642c21b17ad0bbc68b66a3f6af93dcd035e754" translate="yes" xml:space="preserve">
          <source>Returns the OS-assigned process identifier associated with this process.</source>
          <target state="translated">このプロセスに関連付けられた OS 割り当てられたプロセス識別子を返します。</target>
        </trans-unit>
        <trans-unit id="7f153b8459edfc5a0116cdf6d7bab65fb3039366" translate="yes" xml:space="preserve">
          <source>Returns the absolute value of an &lt;code&gt;f32&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;f32&lt;/code&gt; の絶対値を返します。</target>
        </trans-unit>
        <trans-unit id="95dfcf5e56a7c2e226404c8515fc2a003c87d1b1" translate="yes" xml:space="preserve">
          <source>Returns the absolute value of an &lt;code&gt;f64&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;f64&lt;/code&gt; の絶対値を返します。</target>
        </trans-unit>
        <trans-unit id="4b47d10077be98d2837baa6f429539b4ba07be79" translate="yes" xml:space="preserve">
          <source>Returns the address of this socket's peer.</source>
          <target state="translated">このソケットの接続先のアドレスを返します。</target>
        </trans-unit>
        <trans-unit id="1096db2ef0d57868e6fc5de2530c28afaab9c5c4" translate="yes" xml:space="preserve">
          <source>Returns the address of this socket.</source>
          <target state="translated">このソケットのアドレスを返します。</target>
        </trans-unit>
        <trans-unit id="f68892931676b291794ef02d77f7452d92d980e3" translate="yes" xml:space="preserve">
          <source>Returns the address's multicast scope if the address is multicast.</source>
          <target state="translated">アドレスがマルチキャストの場合、そのアドレスのマルチキャストスコープを返します。</target>
        </trans-unit>
        <trans-unit id="571a27f18f24855498fe4bc29f0edc5098eb7508" translate="yes" xml:space="preserve">
          <source>Returns the amount of padding we must insert after &lt;code&gt;self&lt;/code&gt; to ensure that the following address will satisfy &lt;code&gt;align&lt;/code&gt; (measured in bytes).</source>
          <target state="translated">次のアドレスが &lt;code&gt;align&lt;/code&gt; （バイト単位で測定）を満たすことを保証するために、 &lt;code&gt;self&lt;/code&gt; 後に挿入する必要があるパディングの量を返します。</target>
        </trans-unit>
        <trans-unit id="83f57dc9849811be04d028f0498d59905edc2d8c" translate="yes" xml:space="preserve">
          <source>Returns the amount of time elapsed from an earlier point in time.</source>
          <target state="translated">この関数は、以前の時点からの経過時間を返します。</target>
        </trans-unit>
        <trans-unit id="661f516e7ce38ed44d8bed6493a9d9f2fa25da91" translate="yes" xml:space="preserve">
          <source>Returns the amount of time elapsed from another instant to this one, or None if that instant is earlier than this one.</source>
          <target state="translated">別の瞬間からこの瞬間までの経過時間を返します。</target>
        </trans-unit>
        <trans-unit id="ea5b1537a461194a8a8070b9f16e33cf940fbf4b" translate="yes" xml:space="preserve">
          <source>Returns the amount of time elapsed from another instant to this one, or None if that instant is later than this one.</source>
          <target state="translated">別の瞬間からこの瞬間までの経過時間を返します。</target>
        </trans-unit>
        <trans-unit id="6648173167bfd6e04de078f1133974688e8e73d5" translate="yes" xml:space="preserve">
          <source>Returns the amount of time elapsed from another instant to this one, or zero duration if that instant is earlier than this one.</source>
          <target state="translated">別の瞬間からこの瞬間までの経過時間を返します。</target>
        </trans-unit>
        <trans-unit id="ebbde0901130c337b5daccbbe55bba4893561a1a" translate="yes" xml:space="preserve">
          <source>Returns the amount of time elapsed from another instant to this one, or zero duration if that instant is later than this one.</source>
          <target state="translated">別の瞬間からこの瞬間までの経過時間を返します。</target>
        </trans-unit>
        <trans-unit id="481ac3655a5f50eefcf07bd434a47b2156a2b005" translate="yes" xml:space="preserve">
          <source>Returns the amount of time elapsed from another instant to this one.</source>
          <target state="translated">この関数は、別の瞬間からこの瞬間までの経過時間を返します。</target>
        </trans-unit>
        <trans-unit id="a5e6b1a067c8544d3444c8c0c62e8c7492579150" translate="yes" xml:space="preserve">
          <source>Returns the amount of time elapsed since this instant was created.</source>
          <target state="translated">この瞬間が作成されてからの経過時間を返します。</target>
        </trans-unit>
        <trans-unit id="4c335823604c40ba9a05d70db0422f547fa50030" translate="yes" xml:space="preserve">
          <source>Returns the amount of time elapsed since this system time was created.</source>
          <target state="translated">このシステム時刻が作成されてからの経過時間を返します。</target>
        </trans-unit>
        <trans-unit id="9c7b60f00593f18e99c03513fef76bfdb8651c3a" translate="yes" xml:space="preserve">
          <source>Returns the arguments that this program was started with (normally passed via the command line).</source>
          <target state="translated">このプログラムが開始された引数を返します (通常はコマンドライン経由で渡されます)。</target>
        </trans-unit>
        <trans-unit id="eddd2de90acb530a0cd14a32cb480accd0e13dad" translate="yes" xml:space="preserve">
          <source>Returns the arguments which this program was started with (normally passed via the command line).</source>
          <target state="translated">このプログラムが開始された引数を返します (通常はコマンドライン経由で渡されます)。</target>
        </trans-unit>
        <trans-unit id="db2a0c893c8bdbce488ae7385c9b4f666ffeb5df" translate="yes" xml:space="preserve">
          <source>Returns the bare file name of this directory entry without any other leading path component.</source>
          <target state="translated">このディレクトリエントリの裸のファイル名を返します。</target>
        </trans-unit>
        <trans-unit id="3999977e878d4aa0df89e8853564ae3d1f1c567f" translate="yes" xml:space="preserve">
          <source>Returns the base 10 logarithm of an &lt;code&gt;f32&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;f32&lt;/code&gt; の 10を底とする対数を返します。</target>
        </trans-unit>
        <trans-unit id="df12b968d4a5f671f7a70567b9e9ead6d13963a5" translate="yes" xml:space="preserve">
          <source>Returns the base 10 logarithm of an &lt;code&gt;f64&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;f64&lt;/code&gt; の 10を底とする対数を返します。</target>
        </trans-unit>
        <trans-unit id="e1db5ea5edb2aaee417a72427aba39448ccf01d9" translate="yes" xml:space="preserve">
          <source>Returns the base 10 logarithm of the number.</source>
          <target state="translated">数値の基底10対数を返します。</target>
        </trans-unit>
        <trans-unit id="6151fcf3f9961fbd57add2141f31d87f2d6ce8ee" translate="yes" xml:space="preserve">
          <source>Returns the base 2 logarithm of an &lt;code&gt;f32&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;f32&lt;/code&gt; の 2を底とする対数を返します。</target>
        </trans-unit>
        <trans-unit id="7c3d2718f63f9ae2596878aaf828552f161b630a" translate="yes" xml:space="preserve">
          <source>Returns the base 2 logarithm of an &lt;code&gt;f64&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;f64&lt;/code&gt; の 2を底とする対数を返します。</target>
        </trans-unit>
        <trans-unit id="71d28db9d18df1e09f50774b6e91e66160fb9960" translate="yes" xml:space="preserve">
          <source>Returns the base 2 logarithm of the number.</source>
          <target state="translated">数値の基底2対数を返します。</target>
        </trans-unit>
        <trans-unit id="f7c1584217383858ca96b2bfee2d773c2a8de3d7" translate="yes" xml:space="preserve">
          <source>Returns the block size for filesystem I/O.</source>
          <target state="translated">ファイルシステムI/Oのブロックサイズを返します。</target>
        </trans-unit>
        <trans-unit id="240a0cf3374a2fba84e36a7cd86f62cc346d0b41" translate="yes" xml:space="preserve">
          <source>Returns the block size for filesystem I/O. &lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.blksize&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">ファイルシステムI / Oのブロックサイズを返します。&lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.blksize&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5c5839565fa033887cf64e24322a4b97f0c1be77" translate="yes" xml:space="preserve">
          <source>Returns the blocksize for filesystem I/O.</source>
          <target state="translated">ファイルシステムI/Oのブロックサイズを返します。</target>
        </trans-unit>
        <trans-unit id="0a707b00168a099a156be97cf00c9be0bc23f3e8" translate="yes" xml:space="preserve">
          <source>Returns the blocksize for filesystem I/O. &lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.blksize&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">ファイルシステムI / Oのブロックサイズを返します。&lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.blksize&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f4e14676896dc292fcb2906c4529e0d9b8ddb708" translate="yes" xml:space="preserve">
          <source>Returns the bounds on the remaining length of the iterator.</source>
          <target state="translated">イテレータの残りの長さの境界を返します。</target>
        </trans-unit>
        <trans-unit id="d2a3690a9a9438438e3196a0f625ac7a1a2c741c" translate="yes" xml:space="preserve">
          <source>Returns the bounds on the remaining length of the iterator. &lt;a href=&quot;../../../iter/trait.iterator#method.size_hint&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">イテレータの残りの長さの境界を返します。&lt;a href=&quot;../../../iter/trait.iterator#method.size_hint&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8891999a029776a6e5e86fccbe09d33ed70b4be9" translate="yes" xml:space="preserve">
          <source>Returns the bounds on the remaining length of the iterator. &lt;a href=&quot;../../iter/trait.iterator#method.size_hint&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">イテレータの残りの長さの境界を返します。&lt;a href=&quot;../../iter/trait.iterator#method.size_hint&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1229a7eaa643cf7a2a40fae1eb4dcdc17b538bfa" translate="yes" xml:space="preserve">
          <source>Returns the bounds on the remaining length of the iterator. &lt;a href=&quot;../iter/trait.iterator#method.size_hint&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">イテレータの残りの長さの境界を返します。&lt;a href=&quot;../iter/trait.iterator#method.size_hint&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="85cfd8e260500745daa31eee7d23e3e22d4b7d22" translate="yes" xml:space="preserve">
          <source>Returns the bounds on the remaining length of the iterator. &lt;a href=&quot;iter/trait.iterator#method.size_hint&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">イテレータの残りの長さの境界を返します。&lt;a href=&quot;iter/trait.iterator#method.size_hint&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d3f770f0e889ff8f81994451fc65d944f57657d5" translate="yes" xml:space="preserve">
          <source>Returns the bounds on the remaining length of the iterator. &lt;a href=&quot;trait.iterator#method.size_hint&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">イテレータの残りの長さの境界を返します。&lt;a href=&quot;trait.iterator#method.size_hint&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a4e2be8472a8a9457bd5d5e78f8221e9bef80138" translate="yes" xml:space="preserve">
          <source>Returns the buffered writer instance which generated the error.</source>
          <target state="translated">エラーを発生させたバッファリングされたライタのインスタンスを返します。</target>
        </trans-unit>
        <trans-unit id="a9e06b89d312a13a698accce9ab692b3154b3aee" translate="yes" xml:space="preserve">
          <source>Returns the byte index for the first character of the rightmost match of the pattern in this string slice.</source>
          <target state="translated">この文字列スライス内のパターンの右端にマッチした最初の文字のバイトインデックスを返します。</target>
        </trans-unit>
        <trans-unit id="3e5a4ca96fd13952f46f410156017da97dafd2ff" translate="yes" xml:space="preserve">
          <source>Returns the byte index of the first character of this string slice that matches the pattern.</source>
          <target state="translated">パターンにマッチするこの文字列スライスの最初の文字のバイトインデックスを返します。</target>
        </trans-unit>
        <trans-unit id="02b84b401fc0589b3df759db66246dbfed302080" translate="yes" xml:space="preserve">
          <source>Returns the byte index of the last character of this string slice that matches the pattern.</source>
          <target state="translated">パターンにマッチするこの文字列スライスの最後の文字のバイトインデックスを返します。</target>
        </trans-unit>
        <trans-unit id="7d24ad341a0641c6eb96d57c5580b7c6c6becab8" translate="yes" xml:space="preserve">
          <source>Returns the bytes that were attempted to convert to a &lt;a href=&quot;struct.cstring&quot;&gt;&lt;code&gt;CString&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;struct.cstring&quot;&gt; &lt;code&gt;CString&lt;/code&gt; &lt;/a&gt;への変換が試行されたバイトを返します。</target>
        </trans-unit>
        <trans-unit id="3152ec978afaed4f94ff8a3c0c87e246ebf77786" translate="yes" xml:space="preserve">
          <source>Returns the bytes that were attempted to convert to a &lt;code&gt;String&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; に変換しようとしたバイトを返します。</target>
        </trans-unit>
        <trans-unit id="d28550fb4c351327cf7364182abd1608f112396c" translate="yes" xml:space="preserve">
          <source>Returns the canonical, absolute form of a path with all intermediate components normalized and symbolic links resolved.</source>
          <target state="translated">すべての中間成分が正規化され、シンボリックリンクが解決されたパスの正準絶対形式を返します。</target>
        </trans-unit>
        <trans-unit id="b22f913bd6b9484a1f42e1902c6c01f377894183" translate="yes" xml:space="preserve">
          <source>Returns the canonical, absolute form of the path with all intermediate components normalized and symbolic links resolved.</source>
          <target state="translated">すべての中間成分が正規化され、シンボリックリンクが解決されたパスの正準絶対形式を返します。</target>
        </trans-unit>
        <trans-unit id="cac6fc43f3588b9f8aef8eac8588d180eb977700" translate="yes" xml:space="preserve">
          <source>Returns the capacity of the buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9ab6128abe535c42ef1eeb3f662fdd9ea0274b3" translate="yes" xml:space="preserve">
          <source>Returns the capacity this &lt;code&gt;OsString&lt;/code&gt; can hold without reallocating.</source>
          <target state="translated">この &lt;code&gt;OsString&lt;/code&gt; が再割り当てなしで保持できる容量を返します。</target>
        </trans-unit>
        <trans-unit id="d967275614b5f84a38f46f57abee9525f99c53e0" translate="yes" xml:space="preserve">
          <source>Returns the column from which the panic originated.</source>
          <target state="translated">パニックの元となったカラムを返します。</target>
        </trans-unit>
        <trans-unit id="15a54fdcea23bc3207c0820544f58b05251853f2" translate="yes" xml:space="preserve">
          <source>Returns the contained &lt;a href=&quot;enum.option#variant.Some&quot;&gt;&lt;code&gt;Some&lt;/code&gt;&lt;/a&gt; value or a default</source>
          <target state="translated">含まれている&lt;a href=&quot;enum.option#variant.Some&quot;&gt; &lt;code&gt;Some&lt;/code&gt; &lt;/a&gt;値またはデフォルトを返します</target>
        </trans-unit>
        <trans-unit id="95f55a258801e09e8855a2e49b7f314eeea3c5c0" translate="yes" xml:space="preserve">
          <source>Returns the contained &lt;a href=&quot;enum.option#variant.Some&quot;&gt;&lt;code&gt;Some&lt;/code&gt;&lt;/a&gt; value or a provided default.</source>
          <target state="translated">含まれている&lt;a href=&quot;enum.option#variant.Some&quot;&gt; &lt;code&gt;Some&lt;/code&gt; &lt;/a&gt;値または指定されたデフォルトを返します。</target>
        </trans-unit>
        <trans-unit id="89c70929838869ba6753c741e2fae771ce02a01f" translate="yes" xml:space="preserve">
          <source>Returns the contained &lt;a href=&quot;enum.option#variant.Some&quot;&gt;&lt;code&gt;Some&lt;/code&gt;&lt;/a&gt; value or computes it from a closure.</source>
          <target state="translated">含まれている&lt;a href=&quot;enum.option#variant.Some&quot;&gt; &lt;code&gt;Some&lt;/code&gt; &lt;/a&gt;値を返すか、クロージャから計算します。</target>
        </trans-unit>
        <trans-unit id="f89e8b695fae613ce3f3aff08b41d6f7db5c060a" translate="yes" xml:space="preserve">
          <source>Returns the contained &lt;a href=&quot;enum.option#variant.Some&quot;&gt;&lt;code&gt;Some&lt;/code&gt;&lt;/a&gt; value, consuming the &lt;code&gt;self&lt;/code&gt; value.</source>
          <target state="translated">含まれている&lt;a href=&quot;enum.option#variant.Some&quot;&gt; &lt;code&gt;Some&lt;/code&gt; &lt;/a&gt;値を返し、 &lt;code&gt;self&lt;/code&gt; 値を消費します。</target>
        </trans-unit>
        <trans-unit id="3623b1354b4df0775e774ded0153095c27a36b6c" translate="yes" xml:space="preserve">
          <source>Returns the contained &lt;a href=&quot;enum.result#variant.Err&quot;&gt;&lt;code&gt;Err&lt;/code&gt;&lt;/a&gt; value, consuming the &lt;code&gt;self&lt;/code&gt; value.</source>
          <target state="translated">含まれている&lt;a href=&quot;enum.result#variant.Err&quot;&gt; &lt;code&gt;Err&lt;/code&gt; &lt;/a&gt;値を返し、 &lt;code&gt;self&lt;/code&gt; 値を消費します。</target>
        </trans-unit>
        <trans-unit id="08d6548ed9286025a9ddf59bce14c4eca7ad8203" translate="yes" xml:space="preserve">
          <source>Returns the contained &lt;a href=&quot;enum.result#variant.Ok&quot;&gt;&lt;code&gt;Ok&lt;/code&gt;&lt;/a&gt; value or a default</source>
          <target state="translated">含まれている&lt;a href=&quot;enum.result#variant.Ok&quot;&gt; &lt;code&gt;Ok&lt;/code&gt; &lt;/a&gt;値またはデフォルトを返します</target>
        </trans-unit>
        <trans-unit id="6a4e0c85ed3449ae717cac97c7edd7bd13a5252d" translate="yes" xml:space="preserve">
          <source>Returns the contained &lt;a href=&quot;enum.result#variant.Ok&quot;&gt;&lt;code&gt;Ok&lt;/code&gt;&lt;/a&gt; value or a provided default.</source>
          <target state="translated">含まれている&lt;a href=&quot;enum.result#variant.Ok&quot;&gt; &lt;code&gt;Ok&lt;/code&gt; &lt;/a&gt;値または指定されたデフォルトを返します。</target>
        </trans-unit>
        <trans-unit id="79aab72d6ce60ac70b1927592b9e210cae775c74" translate="yes" xml:space="preserve">
          <source>Returns the contained &lt;a href=&quot;enum.result#variant.Ok&quot;&gt;&lt;code&gt;Ok&lt;/code&gt;&lt;/a&gt; value or computes it from a closure.</source>
          <target state="translated">含まれている&lt;a href=&quot;enum.result#variant.Ok&quot;&gt; &lt;code&gt;Ok&lt;/code&gt; &lt;/a&gt;値を返すか、クロージャから計算します。</target>
        </trans-unit>
        <trans-unit id="70edb5dd3948fc277210f0ef7acb0105b034649c" translate="yes" xml:space="preserve">
          <source>Returns the contained &lt;a href=&quot;enum.result#variant.Ok&quot;&gt;&lt;code&gt;Ok&lt;/code&gt;&lt;/a&gt; value, but never panics.</source>
          <target state="translated">含まれている&lt;a href=&quot;enum.result#variant.Ok&quot;&gt; &lt;code&gt;Ok&lt;/code&gt; &lt;/a&gt;値を返しますが、パニックになることはありません。</target>
        </trans-unit>
        <trans-unit id="e39c151183f347a1bcafac05f20de48e8149381e" translate="yes" xml:space="preserve">
          <source>Returns the contained &lt;a href=&quot;enum.result#variant.Ok&quot;&gt;&lt;code&gt;Ok&lt;/code&gt;&lt;/a&gt; value, consuming the &lt;code&gt;self&lt;/code&gt; value.</source>
          <target state="translated">含まれている&lt;a href=&quot;enum.result#variant.Ok&quot;&gt; &lt;code&gt;Ok&lt;/code&gt; &lt;/a&gt;値を返し、 &lt;code&gt;self&lt;/code&gt; 値を消費します。</target>
        </trans-unit>
        <trans-unit id="a5b065deea9e2ccfc3e580aca6f6c5988a80c071" translate="yes" xml:space="preserve">
          <source>Returns the contained value or a default</source>
          <target state="translated">含まれている値またはデフォルトの値を返します。</target>
        </trans-unit>
        <trans-unit id="93f961829488fd9c219fce4ac6ca7541e9dadd92" translate="yes" xml:space="preserve">
          <source>Returns the contained value or a default.</source>
          <target state="translated">指定した値、またはデフォルト値を返します。</target>
        </trans-unit>
        <trans-unit id="67ad33ae23070362998c7baca57e9a9f374d5f1c" translate="yes" xml:space="preserve">
          <source>Returns the contained value or computes it from a closure.</source>
          <target state="translated">含まれている値を返すか、クロージャから計算します。</target>
        </trans-unit>
        <trans-unit id="8ad8e32a54b07c26a39be9ab7bd26314d57e3768" translate="yes" xml:space="preserve">
          <source>Returns the contained value, if the &lt;code&gt;Arc&lt;/code&gt; has exactly one strong reference.</source>
          <target state="translated">&lt;code&gt;Arc&lt;/code&gt; が厳密に1つの強い参照を持つ場合、含まれている値を返します。</target>
        </trans-unit>
        <trans-unit id="293a13a062c053cd7511db6be9751e6c3c51d924" translate="yes" xml:space="preserve">
          <source>Returns the contained value, if the &lt;code&gt;Rc&lt;/code&gt; has exactly one strong reference.</source>
          <target state="translated">&lt;code&gt;Rc&lt;/code&gt; に厳密な参照が1つしかない場合、含まれている値を返します。</target>
        </trans-unit>
        <trans-unit id="61717e1212e78080790cfa608d226ba09775fff4" translate="yes" xml:space="preserve">
          <source>Returns the contents of the internal buffer, filling it with more data from the inner reader if it is empty.</source>
          <target state="translated">内部バッファの内容を返し、空の場合は内部リーダからのデータで埋めます。</target>
        </trans-unit>
        <trans-unit id="62a8f07433d90548504485b3f2bd761a7d3e7f35" translate="yes" xml:space="preserve">
          <source>Returns the contents of the internal buffer, filling it with more data from the inner reader if it is empty. &lt;a href=&quot;../io/trait.bufread#tymethod.fill_buf&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">内部バッファーの内容を返し、それが空の場合は内部リーダーからのデータを追加します。&lt;a href=&quot;../io/trait.bufread#tymethod.fill_buf&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="bffb5d5e3bef8e89831b85ce20b9dbe7bef0b262" translate="yes" xml:space="preserve">
          <source>Returns the contents of the internal buffer, filling it with more data from the inner reader if it is empty. &lt;a href=&quot;io/trait.bufread#tymethod.fill_buf&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">内部バッファーの内容を返し、それが空の場合は内部リーダーからのデータを追加します。&lt;a href=&quot;io/trait.bufread#tymethod.fill_buf&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b56cc621e993a837e4a3d3762bf2b8e4393543fc" translate="yes" xml:space="preserve">
          <source>Returns the contents of the internal buffer, filling it with more data from the inner reader if it is empty. &lt;a href=&quot;trait.bufread#tymethod.fill_buf&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">内部バッファーの内容を返し、それが空の場合は内部リーダーからのデータを追加します。&lt;a href=&quot;trait.bufread#tymethod.fill_buf&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f885e71cdbfbcea491b671f027f8bb7b577a086f" translate="yes" xml:space="preserve">
          <source>Returns the contents of this &lt;code&gt;CString&lt;/code&gt; as a slice of bytes.</source>
          <target state="translated">この &lt;code&gt;CString&lt;/code&gt; の内容をバイトのスライスとして返します。</target>
        </trans-unit>
        <trans-unit id="3d26a0158e604a34cfc901250ba325c7db826bd5" translate="yes" xml:space="preserve">
          <source>Returns the contents of this address if it is a &lt;code&gt;pathname&lt;/code&gt; address.</source>
          <target state="translated">&lt;code&gt;pathname&lt;/code&gt; アドレスの場合、このアドレスの内容を返します。</target>
        </trans-unit>
        <trans-unit id="28fc865a2862de98a872098b58fe7c7f86082f67" translate="yes" xml:space="preserve">
          <source>Returns the corresponding &lt;a href=&quot;enum.errorkind&quot;&gt;&lt;code&gt;ErrorKind&lt;/code&gt;&lt;/a&gt; for this error.</source>
          <target state="translated">このエラーに対応する&lt;a href=&quot;enum.errorkind&quot;&gt; &lt;code&gt;ErrorKind&lt;/code&gt; &lt;/a&gt;を返します。</target>
        </trans-unit>
        <trans-unit id="b03b5dda5aedfc46816e9b36b141e565db65ce6c" translate="yes" xml:space="preserve">
          <source>Returns the corresponding &lt;code&gt;ErrorKind&lt;/code&gt; for this error.</source>
          <target state="translated">このエラーに対応する &lt;code&gt;ErrorKind&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="0290d0663939a4a469aef359cdde538eed028a13" translate="yes" xml:space="preserve">
          <source>Returns the cosine of an &lt;code&gt;f32&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;f32&lt;/code&gt; の余弦を返します。</target>
        </trans-unit>
        <trans-unit id="a14a6e9cbec9670ac4b4ccae6c476cf435f754d9" translate="yes" xml:space="preserve">
          <source>Returns the cosine of an &lt;code&gt;f64&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;f64&lt;/code&gt; の余弦を返します。</target>
        </trans-unit>
        <trans-unit id="d6085cc922831cf44bc01ee1fda8b427a3535d5f" translate="yes" xml:space="preserve">
          <source>Returns the creation time listed in this metadata.</source>
          <target state="translated">このメタデータに記載されている作成時刻を返します。</target>
        </trans-unit>
        <trans-unit id="084ce23da0d611b52ee355c6c2e6eab564e8d293" translate="yes" xml:space="preserve">
          <source>Returns the cubic root of a number.</source>
          <target state="translated">数値の3乗根を返します。</target>
        </trans-unit>
        <trans-unit id="997023fe32fbfc90fbf5d802c09ec861905c3cbd" translate="yes" xml:space="preserve">
          <source>Returns the current position of this cursor.</source>
          <target state="translated">このカーソルの現在位置を返します。</target>
        </trans-unit>
        <trans-unit id="39488e0dd8d1a6a459ff877c39a362351edd5507" translate="yes" xml:space="preserve">
          <source>Returns the current seek position from the start of the stream.</source>
          <target state="translated">ストリームの開始位置からの現在のシーク位置を返します。</target>
        </trans-unit>
        <trans-unit id="35a7977795b1c187ff460d7619e6740e7eab4a31" translate="yes" xml:space="preserve">
          <source>Returns the current seek position from the start of the stream. &lt;a href=&quot;../io/trait.seek#method.stream_position&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">ストリームの先頭から現在のシーク位置を返します。&lt;a href=&quot;../io/trait.seek#method.stream_position&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4a57476cd33067734277138c4a7c3301e250e6c2" translate="yes" xml:space="preserve">
          <source>Returns the current seek position from the start of the stream. &lt;a href=&quot;io/trait.seek#method.stream_position&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">ストリームの先頭から現在のシーク位置を返します。&lt;a href=&quot;io/trait.seek#method.stream_position&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ba7239a7b3b1a78bcc00446cc6158fc282e3b433" translate="yes" xml:space="preserve">
          <source>Returns the current seek position from the start of the stream. &lt;a href=&quot;trait.seek#method.stream_position&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">ストリームの先頭から現在のシーク位置を返します。&lt;a href=&quot;trait.seek#method.stream_position&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f6ddab0dded93136752be9b842101b1d6ba6ef77" translate="yes" xml:space="preserve">
          <source>Returns the current working directory as a &lt;a href=&quot;../path/struct.pathbuf&quot;&gt;&lt;code&gt;PathBuf&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">現在の作業ディレクトリを&lt;a href=&quot;../path/struct.pathbuf&quot;&gt; &lt;code&gt;PathBuf&lt;/code&gt; &lt;/a&gt;として返します。</target>
        </trans-unit>
        <trans-unit id="9bc0aaf9066d9dd63671e4cca867635aaa19f66a" translate="yes" xml:space="preserve">
          <source>Returns the cursor position index within the &lt;code&gt;LinkedList&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;LinkedList&lt;/code&gt; 内のカーソル位置インデックスを返します。</target>
        </trans-unit>
        <trans-unit id="74804b705faa501c028edeb8453a757ad2f8932d" translate="yes" xml:space="preserve">
          <source>Returns the default value of &lt;code&gt;()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;()&lt;/code&gt; のデフォルト値を返します</target>
        </trans-unit>
        <trans-unit id="5722a2e73eb46920ce6f3053e0e53b893eaff195" translate="yes" xml:space="preserve">
          <source>Returns the default value of &lt;code&gt;0.0&lt;/code&gt;</source>
          <target state="translated">デフォルト値 &lt;code&gt;0.0&lt;/code&gt; を返します</target>
        </trans-unit>
        <trans-unit id="ab62f83932e8f488bbfc7d7430c307c63931ad3a" translate="yes" xml:space="preserve">
          <source>Returns the default value of &lt;code&gt;0&lt;/code&gt;</source>
          <target state="translated">デフォルト値 &lt;code&gt;0&lt;/code&gt; を返します</target>
        </trans-unit>
        <trans-unit id="64f6f0364caff5aaf72ec04bdaab6f6b9b41494f" translate="yes" xml:space="preserve">
          <source>Returns the default value of &lt;code&gt;\x00&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;\x00&lt;/code&gt; デフォルト値を返します</target>
        </trans-unit>
        <trans-unit id="28b7bcae2b6814bbd77abceec8d6747ba4de557b" translate="yes" xml:space="preserve">
          <source>Returns the default value of &lt;code&gt;false&lt;/code&gt;</source>
          <target state="translated">デフォルト値の &lt;code&gt;false&lt;/code&gt; を返します</target>
        </trans-unit>
        <trans-unit id="c69ba2a59bc2c58f7569f9f294f9ca9c73dea195" translate="yes" xml:space="preserve">
          <source>Returns the device ID of this file (if it is a special one).</source>
          <target state="translated">このファイルのデバイスIDを返します(特殊なものであれば)。</target>
        </trans-unit>
        <trans-unit id="f3b0d9ec42b53df755966f88296c9569ef0a5c50" translate="yes" xml:space="preserve">
          <source>Returns the device ID of this file (if it is a special one). &lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.rdev&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">このファイルのデバイスIDを返します（特別な場合）。&lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.rdev&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="181f80a2944af3f709e8a5acb7280ec496506acd" translate="yes" xml:space="preserve">
          <source>Returns the device ID on which this file resides.</source>
          <target state="translated">このファイルが存在するデバイスIDを返します。</target>
        </trans-unit>
        <trans-unit id="b98ab569fab62e7bf6f2b06c0a56e45794878166" translate="yes" xml:space="preserve">
          <source>Returns the device ID on which this file resides. &lt;a href=&quot;../os/linux/fs/trait.metadataext#tymethod.st_dev&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">このファイルが存在するデバイスIDを返します。&lt;a href=&quot;../os/linux/fs/trait.metadataext#tymethod.st_dev&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2631a317e4b16bd101a2adbfbc04fa29b56c076a" translate="yes" xml:space="preserve">
          <source>Returns the device ID that this file represents. Only relevant for special file.</source>
          <target state="translated">このファイルが表すデバイスIDを返します。特殊なファイルにのみ関連します。</target>
        </trans-unit>
        <trans-unit id="0a33c1cec7f8f0efea3df218ed7eedf1c0eee109" translate="yes" xml:space="preserve">
          <source>Returns the device ID that this file represents. Only relevant for special file. &lt;a href=&quot;../os/linux/fs/trait.metadataext#tymethod.st_rdev&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">このファイルが表すデバイスIDを返します。特殊ファイルにのみ関連します。&lt;a href=&quot;../os/linux/fs/trait.metadataext#tymethod.st_rdev&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e71fcc7d553990b9c89d36828565d2b0078328c0" translate="yes" xml:space="preserve">
          <source>Returns the difference between the clock time when this system time was created, and the current clock time.</source>
          <target state="translated">このシステム時刻が作成された時の時刻と現在の時刻の差を返します。</target>
        </trans-unit>
        <trans-unit id="b9d24e33a3a33bd79f939093cab0c11b18014a34" translate="yes" xml:space="preserve">
          <source>Returns the difference of &lt;code&gt;self&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt; as a new &lt;code&gt;BTreeSet&amp;lt;T&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;self&lt;/code&gt; と &lt;code&gt;rhs&lt;/code&gt; の差を新しい &lt;code&gt;BTreeSet&amp;lt;T&amp;gt;&lt;/code&gt; として返します。</target>
        </trans-unit>
        <trans-unit id="2b212cfed5a4fd26409beb817968c4efa9bf8ad6" translate="yes" xml:space="preserve">
          <source>Returns the difference of &lt;code&gt;self&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt; as a new &lt;code&gt;HashSet&amp;lt;T, S&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;self&lt;/code&gt; と &lt;code&gt;rhs&lt;/code&gt; の差を新しい &lt;code&gt;HashSet&amp;lt;T, S&amp;gt;&lt;/code&gt; として返します。</target>
        </trans-unit>
        <trans-unit id="83d19ce03568322fde7a0c72ea57be816c0d6480" translate="yes" xml:space="preserve">
          <source>Returns the eight 16-bit segments that make up this address.</source>
          <target state="translated">このアドレスを構成する8つの16ビットのセグメントを返します。</target>
        </trans-unit>
        <trans-unit id="7745d26921de367760bb15cf644b3f30226872f4" translate="yes" xml:space="preserve">
          <source>Returns the element that gives the maximum value from the specified function.</source>
          <target state="translated">指定した関数の最大値を与える要素を返します。</target>
        </trans-unit>
        <trans-unit id="bb5381765a00a3d0ce3096269a3ba471a59a41f1" translate="yes" xml:space="preserve">
          <source>Returns the element that gives the maximum value from the specified function. &lt;a href=&quot;../../../iter/trait.iterator#method.max_by_key&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">指定された関数から最大値を与える要素を返します。&lt;a href=&quot;../../../iter/trait.iterator#method.max_by_key&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="50163f43ee0e83a5976c23424822af3ffc3e92ee" translate="yes" xml:space="preserve">
          <source>Returns the element that gives the maximum value from the specified function. &lt;a href=&quot;../../iter/trait.iterator#method.max_by_key&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">指定された関数から最大値を与える要素を返します。&lt;a href=&quot;../../iter/trait.iterator#method.max_by_key&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="82c531284da35ffcb3cfd25a321e3624a7fb85d1" translate="yes" xml:space="preserve">
          <source>Returns the element that gives the maximum value from the specified function. &lt;a href=&quot;../iter/trait.iterator#method.max_by_key&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">指定された関数から最大値を与える要素を返します。&lt;a href=&quot;../iter/trait.iterator#method.max_by_key&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9c4eb2b8585ef4b9491f95a16f72ae832b96ef1d" translate="yes" xml:space="preserve">
          <source>Returns the element that gives the maximum value from the specified function. &lt;a href=&quot;iter/trait.iterator#method.max_by_key&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">指定された関数から最大値を与える要素を返します。&lt;a href=&quot;iter/trait.iterator#method.max_by_key&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f75f1849f6ee013d414fbfd16341df18e9596e05" translate="yes" xml:space="preserve">
          <source>Returns the element that gives the maximum value from the specified function. &lt;a href=&quot;trait.iterator#method.max_by_key&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">指定された関数から最大値を与える要素を返します。&lt;a href=&quot;trait.iterator#method.max_by_key&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f3e0642512129975c59c5b67eafdcfa17585e45c" translate="yes" xml:space="preserve">
          <source>Returns the element that gives the maximum value with respect to the specified comparison function.</source>
          <target state="translated">指定した比較関数に対して最大値を与える要素を返します。</target>
        </trans-unit>
        <trans-unit id="6942069630752434b69fa518af7af4b843040c02" translate="yes" xml:space="preserve">
          <source>Returns the element that gives the maximum value with respect to the specified comparison function. &lt;a href=&quot;../../../iter/trait.iterator#method.max_by&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">指定された比較関数に関して最大​​値を与える要素を返します。&lt;a href=&quot;../../../iter/trait.iterator#method.max_by&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="39d42b9245417e2e45664c1c452af8c2dcad7575" translate="yes" xml:space="preserve">
          <source>Returns the element that gives the maximum value with respect to the specified comparison function. &lt;a href=&quot;../../iter/trait.iterator#method.max_by&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">指定された比較関数に関して最大​​値を与える要素を返します。&lt;a href=&quot;../../iter/trait.iterator#method.max_by&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="6cf2f94c83e1a777636c1b8f13f98fbfbb359792" translate="yes" xml:space="preserve">
          <source>Returns the element that gives the maximum value with respect to the specified comparison function. &lt;a href=&quot;../iter/trait.iterator#method.max_by&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">指定された比較関数に関して最大​​値を与える要素を返します。&lt;a href=&quot;../iter/trait.iterator#method.max_by&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="462a8b6200c132c1659a6c5483922c1765c25183" translate="yes" xml:space="preserve">
          <source>Returns the element that gives the maximum value with respect to the specified comparison function. &lt;a href=&quot;iter/trait.iterator#method.max_by&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">指定された比較関数に関して最大​​値を与える要素を返します。&lt;a href=&quot;iter/trait.iterator#method.max_by&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2309005f0fef3ccdfc8ea8129d2a5047595bf152" translate="yes" xml:space="preserve">
          <source>Returns the element that gives the maximum value with respect to the specified comparison function. &lt;a href=&quot;trait.iterator#method.max_by&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">指定された比較関数に関して最大​​値を与える要素を返します。&lt;a href=&quot;trait.iterator#method.max_by&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="41d83b5d88e22e38a9dbe39585dfa0b7f240246d" translate="yes" xml:space="preserve">
          <source>Returns the element that gives the minimum value from the specified function.</source>
          <target state="translated">指定した関数の最小値を与える要素を返します。</target>
        </trans-unit>
        <trans-unit id="0443cbe148f4f0ed1cfe84b5c27315d8e03b5854" translate="yes" xml:space="preserve">
          <source>Returns the element that gives the minimum value from the specified function. &lt;a href=&quot;../../../iter/trait.iterator#method.min_by_key&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">指定された関数から最小値を与える要素を返します。&lt;a href=&quot;../../../iter/trait.iterator#method.min_by_key&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1443a6dce791dde1d9c5b46639ac6741d15d9f98" translate="yes" xml:space="preserve">
          <source>Returns the element that gives the minimum value from the specified function. &lt;a href=&quot;../../iter/trait.iterator#method.min_by_key&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">指定された関数から最小値を与える要素を返します。&lt;a href=&quot;../../iter/trait.iterator#method.min_by_key&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="053f1091cc4eb8e27c85d8e13b6f1e8608ba77bd" translate="yes" xml:space="preserve">
          <source>Returns the element that gives the minimum value from the specified function. &lt;a href=&quot;../iter/trait.iterator#method.min_by_key&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">指定された関数から最小値を与える要素を返します。&lt;a href=&quot;../iter/trait.iterator#method.min_by_key&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5d0fae82fca1af93f383d20d37602f56e408a86a" translate="yes" xml:space="preserve">
          <source>Returns the element that gives the minimum value from the specified function. &lt;a href=&quot;iter/trait.iterator#method.min_by_key&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">指定された関数から最小値を与える要素を返します。&lt;a href=&quot;iter/trait.iterator#method.min_by_key&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9038e7ba8c46a00e367d3da9d09547296b444fdd" translate="yes" xml:space="preserve">
          <source>Returns the element that gives the minimum value from the specified function. &lt;a href=&quot;trait.iterator#method.min_by_key&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">指定された関数から最小値を与える要素を返します。&lt;a href=&quot;trait.iterator#method.min_by_key&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7bbb81860f75085b883db3a6921a708a002d3b8d" translate="yes" xml:space="preserve">
          <source>Returns the element that gives the minimum value with respect to the specified comparison function.</source>
          <target state="translated">指定した比較関数に関して最小値を与える要素を返します。</target>
        </trans-unit>
        <trans-unit id="320318de598a123e57f84cb3c025f97baa6e0ab7" translate="yes" xml:space="preserve">
          <source>Returns the element that gives the minimum value with respect to the specified comparison function. &lt;a href=&quot;../../../iter/trait.iterator#method.min_by&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">指定された比較関数に関して最小値を与える要素を返します。&lt;a href=&quot;../../../iter/trait.iterator#method.min_by&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="da5ce4a73e39e1032840752e4915959b46d0fde5" translate="yes" xml:space="preserve">
          <source>Returns the element that gives the minimum value with respect to the specified comparison function. &lt;a href=&quot;../../iter/trait.iterator#method.min_by&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">指定された比較関数に関して最小値を与える要素を返します。&lt;a href=&quot;../../iter/trait.iterator#method.min_by&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="6424f2c5a1c6d95fadd173fa9aa97613bd314826" translate="yes" xml:space="preserve">
          <source>Returns the element that gives the minimum value with respect to the specified comparison function. &lt;a href=&quot;../iter/trait.iterator#method.min_by&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">指定された比較関数に関して最小値を与える要素を返します。&lt;a href=&quot;../iter/trait.iterator#method.min_by&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="953a6bb221b5c86e51fd26a772d8fff3e7727473" translate="yes" xml:space="preserve">
          <source>Returns the element that gives the minimum value with respect to the specified comparison function. &lt;a href=&quot;iter/trait.iterator#method.min_by&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">指定された比較関数に関して最小値を与える要素を返します。&lt;a href=&quot;iter/trait.iterator#method.min_by&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a475ae2f4ab13dedea41258d28190b0454ac6f63" translate="yes" xml:space="preserve">
          <source>Returns the element that gives the minimum value with respect to the specified comparison function. &lt;a href=&quot;trait.iterator#method.min_by&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">指定された比較関数に関して最小値を与える要素を返します。&lt;a href=&quot;trait.iterator#method.min_by&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4eec695ac77816e8f920ba066e16824a3607a343" translate="yes" xml:space="preserve">
          <source>Returns the end value as a &lt;code&gt;Bound&lt;/code&gt;.</source>
          <target state="translated">終了値を &lt;code&gt;Bound&lt;/code&gt; として返します。</target>
        </trans-unit>
        <trans-unit id="7b4333bce3947fcbaadfabbfd651c4c43e347ae8" translate="yes" xml:space="preserve">
          <source>Returns the error which caused the call to &lt;a href=&quot;struct.bufwriter#method.into_inner&quot;&gt;&lt;code&gt;BufWriter::into_inner()&lt;/code&gt;&lt;/a&gt; to fail.</source>
          <target state="translated">&lt;a href=&quot;struct.bufwriter#method.into_inner&quot;&gt; &lt;code&gt;BufWriter::into_inner()&lt;/code&gt; &lt;/a&gt;呼び出しが失敗する原因となったエラーを返します。</target>
        </trans-unit>
        <trans-unit id="9930d7737e0e2c08ecaaff5d4a74e1cd7210948e" translate="yes" xml:space="preserve">
          <source>Returns the error which caused the call to &lt;code&gt;into_inner()&lt;/code&gt; to fail.</source>
          <target state="translated">&lt;code&gt;into_inner()&lt;/code&gt; の呼び出しを失敗させたエラーを返します。</target>
        </trans-unit>
        <trans-unit id="f9d8e85ef34ebf5088d10366b034b3fff3297d03" translate="yes" xml:space="preserve">
          <source>Returns the exact length of the iterator.</source>
          <target state="translated">イテレータの正確な長さを返します。</target>
        </trans-unit>
        <trans-unit id="dfb022eb139d6da0c86a4c0a88440bfa66ab499d" translate="yes" xml:space="preserve">
          <source>Returns the exact length of the iterator. &lt;a href=&quot;../../iter/trait.exactsizeiterator#method.len&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">Returns the exact length of the iterator. &lt;a href=&quot;../../iter/trait.exactsizeiterator#method.len&quot;&gt;Read more&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3e2261c216ed4bce171da1f8702941faa654f02b" translate="yes" xml:space="preserve">
          <source>Returns the exact length of the iterator. &lt;a href=&quot;../iter/trait.exactsizeiterator#method.len&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">Returns the exact length of the iterator. &lt;a href=&quot;../iter/trait.exactsizeiterator#method.len&quot;&gt;Read more&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="537356a268fb5f824034c12f05bb64f93221075a" translate="yes" xml:space="preserve">
          <source>Returns the exact length of the iterator. &lt;a href=&quot;iter/trait.exactsizeiterator#method.len&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">Returns the exact length of the iterator. &lt;a href=&quot;iter/trait.exactsizeiterator#method.len&quot;&gt;Read more&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="158867de75e65092e06f8e09c644a429790fc3fc" translate="yes" xml:space="preserve">
          <source>Returns the exact length of the iterator. &lt;a href=&quot;trait.exactsizeiterator#method.len&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">Returns the exact length of the iterator. &lt;a href=&quot;trait.exactsizeiterator#method.len&quot;&gt;Read more&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5962202649ec673f7ee6fdf337862f68a375c939" translate="yes" xml:space="preserve">
          <source>Returns the exact number of times the iterator will iterate.</source>
          <target state="translated">イテレータが反復処理を行う正確な回数を返します。</target>
        </trans-unit>
        <trans-unit id="f033612b812dcb115ee88f27537d36043163b376" translate="yes" xml:space="preserve">
          <source>Returns the exact number of times the iterator will iterate. &lt;a href=&quot;../../iter/trait.exactsizeiterator#method.len&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">イテレータが反復する正確な回数を返します。&lt;a href=&quot;../../iter/trait.exactsizeiterator#method.len&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="16c5ccfc9ac661fe921b2a21b9103ff312f84598" translate="yes" xml:space="preserve">
          <source>Returns the exact number of times the iterator will iterate. &lt;a href=&quot;../iter/trait.exactsizeiterator#method.len&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">イテレータが反復する正確な回数を返します。&lt;a href=&quot;../iter/trait.exactsizeiterator#method.len&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="02fb630e12001e45abb9046cd431397c5a161393" translate="yes" xml:space="preserve">
          <source>Returns the exact number of times the iterator will iterate. &lt;a href=&quot;iter/trait.exactsizeiterator#method.len&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">イテレータが反復する正確な回数を返します。&lt;a href=&quot;iter/trait.exactsizeiterator#method.len&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8e6bc996c28438070b2c4d7500cec4888863af5a" translate="yes" xml:space="preserve">
          <source>Returns the exact number of times the iterator will iterate. &lt;a href=&quot;trait.exactsizeiterator#method.len&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">イテレータが反復する正確な回数を返します。&lt;a href=&quot;trait.exactsizeiterator#method.len&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="eaee2eeccb629c630e5905f0b3ce242f0e70e55f" translate="yes" xml:space="preserve">
          <source>Returns the exit code of the process, if any.</source>
          <target state="translated">プロセスの終了コードを返します。</target>
        </trans-unit>
        <trans-unit id="c46549fd4519eac200d7025db93e7bb82ec51c56" translate="yes" xml:space="preserve">
          <source>Returns the exponential of an &lt;code&gt;f32&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;f32&lt;/code&gt; の指数を返します。</target>
        </trans-unit>
        <trans-unit id="f3da97caa1fafcb8a130fff71bf53e2faf622790" translate="yes" xml:space="preserve">
          <source>Returns the exponential of an &lt;code&gt;f64&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;f64&lt;/code&gt; の指数を返します。</target>
        </trans-unit>
        <trans-unit id="20054b5c455db28478d1a0abc7636b79620b24c9" translate="yes" xml:space="preserve">
          <source>Returns the file type and mode.</source>
          <target state="translated">ファイルの種類とモードを返します。</target>
        </trans-unit>
        <trans-unit id="29173c277e0a8fc5747faccd34be42ea6c198ad4" translate="yes" xml:space="preserve">
          <source>Returns the file type and mode. &lt;a href=&quot;../os/linux/fs/trait.metadataext#tymethod.st_mode&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">ファイルの種類とモードを返します。&lt;a href=&quot;../os/linux/fs/trait.metadataext#tymethod.st_mode&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8c7ca6382527376d2edcd8da3d859ce37e7911a9" translate="yes" xml:space="preserve">
          <source>Returns the file type for the file that this entry points at.</source>
          <target state="translated">このエントリが指すファイルのファイルタイプを返します。</target>
        </trans-unit>
        <trans-unit id="a1534c8640f4fe800de9cb7dae21a242a9864c27" translate="yes" xml:space="preserve">
          <source>Returns the file type for this metadata.</source>
          <target state="translated">このメタデータのファイルタイプを返します。</target>
        </trans-unit>
        <trans-unit id="9e847b6bb3f5504d2cf5374472d3451d7e9bd580" translate="yes" xml:space="preserve">
          <source>Returns the final component of the &lt;code&gt;Path&lt;/code&gt;, if there is one.</source>
          <target state="translated">&lt;code&gt;Path&lt;/code&gt; の最後のコンポーネントがあれば、それを返します。</target>
        </trans-unit>
        <trans-unit id="f986133e42ae70418cc420c3e41e12a1f3fe07ef" translate="yes" xml:space="preserve">
          <source>Returns the first and all the rest of the elements of the slice, or &lt;code&gt;None&lt;/code&gt; if it is empty.</source>
          <target state="translated">スライスの最初の要素と残りのすべての要素、または空の場合は &lt;code&gt;None&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="6df3b2311101bc474f1cbb40155b6f5441324bdd" translate="yes" xml:space="preserve">
          <source>Returns the first argument if the comparison determines them to be equal.</source>
          <target state="translated">比較の結果、両者が等しいと判断された場合、第1引数を返します。</target>
        </trans-unit>
        <trans-unit id="437b18f8639cc9b926df56af39e4604c50f764f9" translate="yes" xml:space="preserve">
          <source>Returns the first element of the slice, or &lt;code&gt;None&lt;/code&gt; if it is empty.</source>
          <target state="translated">スライスの最初の要素を返します。空の場合は &lt;code&gt;None&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="0b3e99069b488a7f51f60669058e47a93b76b677" translate="yes" xml:space="preserve">
          <source>Returns the first entry in the map for in-place manipulation. The key of this entry is the minimum key in the map.</source>
          <target state="translated">インプレース操作のためのマップ内の最初のエントリを返します。このエントリのキーは、マップ内の最小キーです。</target>
        </trans-unit>
        <trans-unit id="74530f1b5938d1658bbab73d4adb5f515bf97643" translate="yes" xml:space="preserve">
          <source>Returns the first key-value pair in the map. The key in this pair is the minimum key in the map.</source>
          <target state="translated">マップ内の最初のキーと値のペアを返します。このペアのキーは、マップ内の最小キーです。</target>
        </trans-unit>
        <trans-unit id="75d47ad3e742059ef698b5878928948b880b76e9" translate="yes" xml:space="preserve">
          <source>Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.</source>
          <target state="translated">数値の浮動小数点カテゴリを返します。1つのプロパティだけをテストする場合は、特定の述語を使用した方が一般的に速いです。</target>
        </trans-unit>
        <trans-unit id="49e202e605b7bd28c9cd4b32f5e972ed286ed689" translate="yes" xml:space="preserve">
          <source>Returns the flow information associated with this address.</source>
          <target state="translated">このアドレスに関連するフロー情報を返します。</target>
        </trans-unit>
        <trans-unit id="ebc964882a27c9907c13d4408b850f0c053463ad" translate="yes" xml:space="preserve">
          <source>Returns the four eight-bit integers that make up this address.</source>
          <target state="translated">このアドレスを構成する4つの8ビット整数を返します。</target>
        </trans-unit>
        <trans-unit id="23a2c0dcfd31b6c2e9c9888d0121bf38980344c7" translate="yes" xml:space="preserve">
          <source>Returns the fractional part of a number.</source>
          <target state="translated">数値の端数部分を返します。</target>
        </trans-unit>
        <trans-unit id="c9ae259a22b2843e1409b67296fea665b489b3c0" translate="yes" xml:space="preserve">
          <source>Returns the fractional part of this &lt;code&gt;Duration&lt;/code&gt;, in nanoseconds.</source>
          <target state="translated">この &lt;code&gt;Duration&lt;/code&gt; の小数部をナノ秒単位で返します。</target>
        </trans-unit>
        <trans-unit id="bef624893ef149ad78a29ca49323a67983fcf807" translate="yes" xml:space="preserve">
          <source>Returns the fractional part of this &lt;code&gt;Duration&lt;/code&gt;, in whole microseconds.</source>
          <target state="translated">この &lt;code&gt;Duration&lt;/code&gt; の小数部をマイクロ秒単位で返します。</target>
        </trans-unit>
        <trans-unit id="429fb28498e19cb96e485fa379316b5cdb475039" translate="yes" xml:space="preserve">
          <source>Returns the fractional part of this &lt;code&gt;Duration&lt;/code&gt;, in whole milliseconds.</source>
          <target state="translated">この &lt;code&gt;Duration&lt;/code&gt; の小数部をミリ秒単位で返します。</target>
        </trans-unit>
        <trans-unit id="4fe276fd03e779f2448dc9c5743f17bdbd043791" translate="yes" xml:space="preserve">
          <source>Returns the full filesystem path of the current running executable.</source>
          <target state="translated">現在実行中の実行ファイルのフルファイルシステムパスを返します。</target>
        </trans-unit>
        <trans-unit id="d7d90dec7d9868f5e5e1932b8128e5811ca21180" translate="yes" xml:space="preserve">
          <source>Returns the full path to the file that this entry represents.</source>
          <target state="translated">このエントリが表すファイルへのフルパスを返します。</target>
        </trans-unit>
        <trans-unit id="71eba06405f179b611cd49f0368d873651d1e32d" translate="yes" xml:space="preserve">
          <source>Returns the greatest item in the binary heap, or &lt;code&gt;None&lt;/code&gt; if it is empty.</source>
          <target state="translated">バイナリヒープ内の最大の項目を返します。空の場合は &lt;code&gt;None&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="045b7e93299e7237bee97de9a0dbf3ddda51f3c5" translate="yes" xml:space="preserve">
          <source>Returns the group ID of the file owner.</source>
          <target state="translated">ファイルの所有者のグループIDを返します。</target>
        </trans-unit>
        <trans-unit id="4a557d49ccda95ec6e0b99ed25a0ee4823c94f97" translate="yes" xml:space="preserve">
          <source>Returns the group ID of the file owner. &lt;a href=&quot;../os/linux/fs/trait.metadataext#tymethod.st_gid&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">ファイル所有者のグループIDを返します。&lt;a href=&quot;../os/linux/fs/trait.metadataext#tymethod.st_gid&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a2c114378ffcffa33547a268c64967ffa367a1de" translate="yes" xml:space="preserve">
          <source>Returns the group ID of the owner of this file.</source>
          <target state="translated">このファイルの所有者のグループIDを返します。</target>
        </trans-unit>
        <trans-unit id="cb37218b7673220aef8159e0e33e6e616d1ec2d3" translate="yes" xml:space="preserve">
          <source>Returns the group ID of the owner of this file. &lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.gid&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">このファイルの所有者のグループIDを返します。&lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.gid&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="bc1701d228422894681a4f69e8a12241974ea7ee" translate="yes" xml:space="preserve">
          <source>Returns the hash value for the values written so far.</source>
          <target state="translated">これまでに書き込まれた値のハッシュ値を返します。</target>
        </trans-unit>
        <trans-unit id="1074a0bc0454984fa22f8f545cef825d19b02694" translate="yes" xml:space="preserve">
          <source>Returns the hash value for the values written so far. &lt;a href=&quot;../../hash/trait.hasher#tymethod.finish&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">これまでに書き込まれた値のハッシュ値を返します。&lt;a href=&quot;../../hash/trait.hasher#tymethod.finish&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="0e7dae3c3c526bc02d0f5433fee81441a9191f70" translate="yes" xml:space="preserve">
          <source>Returns the hash value for the values written so far. &lt;a href=&quot;../hash/trait.hasher#tymethod.finish&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">これまでに書き込まれた値のハッシュ値を返します。&lt;a href=&quot;../hash/trait.hasher#tymethod.finish&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8bb75a36c996ce5b24d080509086ed2a565c1634" translate="yes" xml:space="preserve">
          <source>Returns the hash value for the values written so far. &lt;a href=&quot;hash/trait.hasher#tymethod.finish&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">これまでに書き込まれた値のハッシュ値を返します。&lt;a href=&quot;hash/trait.hasher#tymethod.finish&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="891e6e5d9637f6e0543be915bdd8db7a0eb16e60" translate="yes" xml:space="preserve">
          <source>Returns the hash value for the values written so far. &lt;a href=&quot;trait.hasher#tymethod.finish&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">これまでに書き込まれた値のハッシュ値を返します。&lt;a href=&quot;trait.hasher#tymethod.finish&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="75c0b203793b8b7484a5f62aa01cd8599798558c" translate="yes" xml:space="preserve">
          <source>Returns the index in the given string up to which valid UTF-8 was verified.</source>
          <target state="translated">UTF-8が有効であることが確認された文字列のインデックスを返します。</target>
        </trans-unit>
        <trans-unit id="fa1ff971c586fc730f98793935b6144319f4808c" translate="yes" xml:space="preserve">
          <source>Returns the index of the partition point according to the given predicate (the index of the first element of the second partition).</source>
          <target state="translated">与えられた述語に従った分割点のインデックス(第二分割の最初の要素のインデックス)を返します。</target>
        </trans-unit>
        <trans-unit id="8d717e336600fb2761f002896412c5a624281f80" translate="yes" xml:space="preserve">
          <source>Returns the inner pointer to this C string.</source>
          <target state="translated">この C 文字列の内部ポインタを返します。</target>
        </trans-unit>
        <trans-unit id="b784d9da31090d15aa9f5a33e60503c49931dee0" translate="yes" xml:space="preserve">
          <source>Returns the inner value, if the &lt;code&gt;Arc&lt;/code&gt; has exactly one strong reference.</source>
          <target state="translated">Returns the inner value, if the &lt;code&gt;Arc&lt;/code&gt; has exactly one strong reference.</target>
        </trans-unit>
        <trans-unit id="f509e24ecece50330c3bd7ac415fcdf7a6b5a997" translate="yes" xml:space="preserve">
          <source>Returns the inner value, if the &lt;code&gt;Rc&lt;/code&gt; has exactly one strong reference.</source>
          <target state="translated">Returns the inner value, if the &lt;code&gt;Rc&lt;/code&gt; has exactly one strong reference.</target>
        </trans-unit>
        <trans-unit id="4f8d72748348ad00715db12f5684b27b98cb0442" translate="yes" xml:space="preserve">
          <source>Returns the inode number.</source>
          <target state="translated">inode番号を返します。</target>
        </trans-unit>
        <trans-unit id="d2ba37e26258afa6e8cd7aa434389d5c1d115e02" translate="yes" xml:space="preserve">
          <source>Returns the inode number. &lt;a href=&quot;../os/linux/fs/trait.metadataext#tymethod.st_ino&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">iノード番号を返します。&lt;a href=&quot;../os/linux/fs/trait.metadataext#tymethod.st_ino&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a71311f22ec6788f34a10389ef2a3f732a47c264" translate="yes" xml:space="preserve">
          <source>Returns the inode number. &lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.ino&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">iノード番号を返します。&lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.ino&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b08a689f37adf08d820155dd21fe59b2c115d985" translate="yes" xml:space="preserve">
          <source>Returns the integer part of a number.</source>
          <target state="translated">数値の整数部を返します。</target>
        </trans-unit>
        <trans-unit id="ca9424867c58d209b837105a4ec6eb48b25b0236" translate="yes" xml:space="preserve">
          <source>Returns the integer part of an &lt;code&gt;f32&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;f32&lt;/code&gt; の整数部分を返します。</target>
        </trans-unit>
        <trans-unit id="4162d7ee466feb25cbea3134d78b69877eb6af9d" translate="yes" xml:space="preserve">
          <source>Returns the integer part of an &lt;code&gt;f64&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;f64&lt;/code&gt; の整数部分を返します。</target>
        </trans-unit>
        <trans-unit id="9a27800e3a9a14d645a518f397df1f0296b050f8" translate="yes" xml:space="preserve">
          <source>Returns the intersection of &lt;code&gt;self&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt; as a new &lt;code&gt;BTreeSet&amp;lt;T&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;self&lt;/code&gt; と &lt;code&gt;rhs&lt;/code&gt; の共通部分を新しい &lt;code&gt;BTreeSet&amp;lt;T&amp;gt;&lt;/code&gt; として返します。</target>
        </trans-unit>
        <trans-unit id="ae38197230c1ca8d7ed05ba875d9f766bc5916a3" translate="yes" xml:space="preserve">
          <source>Returns the intersection of &lt;code&gt;self&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt; as a new &lt;code&gt;HashSet&amp;lt;T, S&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;self&lt;/code&gt; と &lt;code&gt;rhs&lt;/code&gt; の共通部分を新しい &lt;code&gt;HashSet&amp;lt;T, S&amp;gt;&lt;/code&gt; として返します。</target>
        </trans-unit>
        <trans-unit id="000b142c65f0ffc55c0952e16185ceec069c6a97" translate="yes" xml:space="preserve">
          <source>Returns the iterator of the control messages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f591b6d3dce26e4e5d951568101e01b047f0c4d6" translate="yes" xml:space="preserve">
          <source>Returns the key-value pair corresponding to the supplied key.</source>
          <target state="translated">指定したキーに対応するキーと値のペアを返します。</target>
        </trans-unit>
        <trans-unit id="0f241c8b9c22095b4caa4196cdf8d6baf6f075e3" translate="yes" xml:space="preserve">
          <source>Returns the largest integer less than or equal to a number.</source>
          <target state="translated">数値以下の最大の整数を返します。</target>
        </trans-unit>
        <trans-unit id="3905281a5c2304e35d4706f9df6f06d9b6c21621" translate="yes" xml:space="preserve">
          <source>Returns the largest integer less than or equal to an &lt;code&gt;f32&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;f32&lt;/code&gt; 以下の最大の整数を返します。</target>
        </trans-unit>
        <trans-unit id="58468e60f3c653924ae6b45c987a06a90c0fc64d" translate="yes" xml:space="preserve">
          <source>Returns the largest integer less than or equal to an &lt;code&gt;f64&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;f64&lt;/code&gt; 以下の最大の整数を返します。</target>
        </trans-unit>
        <trans-unit id="25554e99150223030893966c6cc41386280e3d36" translate="yes" xml:space="preserve">
          <source>Returns the largest value that can be represented by this integer type.</source>
          <target state="translated">この整数型で表現できる最大の値を返します。</target>
        </trans-unit>
        <trans-unit id="0bef1b8ab72414262be32c625754b59f61edb577" translate="yes" xml:space="preserve">
          <source>Returns the last access time of the file, in nanoseconds since &lt;a href=&quot;#tymethod.atime&quot;&gt;&lt;code&gt;atime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#tymethod.atime&quot;&gt; &lt;code&gt;atime&lt;/code&gt; &lt;/a&gt;からのファイルの最終アクセス時刻をナノ秒単位で返します。</target>
        </trans-unit>
        <trans-unit id="fe53d0ce6581a799fd9d7d619aff8a495115546d" translate="yes" xml:space="preserve">
          <source>Returns the last access time of the file, in nanoseconds since &lt;a href=&quot;#tymethod.st_atime&quot;&gt;&lt;code&gt;st_atime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#tymethod.st_atime&quot;&gt; &lt;code&gt;st_atime&lt;/code&gt; &lt;/a&gt;からのナノ秒単位で、ファイルの最終アクセス時間を返します。</target>
        </trans-unit>
        <trans-unit id="73eda5b60e08be7e100d8681c7cbf1eb2eb360d1" translate="yes" xml:space="preserve">
          <source>Returns the last access time of the file, in nanoseconds since &lt;a href=&quot;../os/linux/fs/trait.metadataext#tymethod.st_atime&quot;&gt;&lt;code&gt;st_atime&lt;/code&gt;&lt;/a&gt;. &lt;a href=&quot;../os/linux/fs/trait.metadataext#tymethod.st_atime_nsec&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">Returns the last access time of the file, in nanoseconds since &lt;a href=&quot;../os/linux/fs/trait.metadataext#tymethod.st_atime&quot;&gt; &lt;code&gt;st_atime&lt;/code&gt; &lt;/a&gt;. &lt;a href=&quot;../os/linux/fs/trait.metadataext#tymethod.st_atime_nsec&quot;&gt;Read more&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="18f319c5d1287f14eda4fd2bed89fbada163b589" translate="yes" xml:space="preserve">
          <source>Returns the last access time of the file, in nanoseconds since &lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.atime&quot;&gt;&lt;code&gt;atime&lt;/code&gt;&lt;/a&gt;. &lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.atime_nsec&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">Returns the last access time of the file, in nanoseconds since &lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.atime&quot;&gt; &lt;code&gt;atime&lt;/code&gt; &lt;/a&gt;. &lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.atime_nsec&quot;&gt;Read more&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9cd07c2b53c400adc569f5664fe3d7c004966501" translate="yes" xml:space="preserve">
          <source>Returns the last access time of the file, in nanoseconds since &lt;a href=&quot;trait.metadataext#tymethod.atime&quot;&gt;&lt;code&gt;atime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Returns the last access time of the file, in nanoseconds since &lt;a href=&quot;trait.metadataext#tymethod.atime&quot;&gt; &lt;code&gt;atime&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="019f38f66a7253a180beacdbf1b3adaf12f22d1d" translate="yes" xml:space="preserve">
          <source>Returns the last access time of the file, in nanoseconds since &lt;a href=&quot;trait.metadataext#tymethod.st_atime&quot;&gt;&lt;code&gt;st_atime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Returns the last access time of the file, in nanoseconds since &lt;a href=&quot;trait.metadataext#tymethod.st_atime&quot;&gt; &lt;code&gt;st_atime&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="126c5e2645067d74de261356df1c0ca59bb916ca" translate="yes" xml:space="preserve">
          <source>Returns the last access time of the file, in nanoseconds since [&lt;code&gt;atime&lt;/code&gt;]. &lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.atime_nsec&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">[ &lt;code&gt;atime&lt;/code&gt; ] からのファイルの最終アクセス時刻をナノ秒単位で返します。&lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.atime_nsec&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f99b0d5ca8429f1fc89d18b6df2974236e019252" translate="yes" xml:space="preserve">
          <source>Returns the last access time of the file, in nanoseconds since [&lt;code&gt;st_atime&lt;/code&gt;]. &lt;a href=&quot;../os/linux/fs/trait.metadataext#tymethod.st_atime_nsec&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">[ &lt;code&gt;st_atime&lt;/code&gt; ] 以降のファイルの最終アクセス時刻をナノ秒単位で返します。&lt;a href=&quot;../os/linux/fs/trait.metadataext#tymethod.st_atime_nsec&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="fc00d6fc33d00a791780097af4452b2ea413ef76" translate="yes" xml:space="preserve">
          <source>Returns the last access time of the file, in seconds since Unix Epoch.</source>
          <target state="translated">Unix Epoch以降のファイルの最終アクセス時刻を秒単位で返します。</target>
        </trans-unit>
        <trans-unit id="5dac7cdb7c4c3eb84d94b6cb55c0b864850f06b1" translate="yes" xml:space="preserve">
          <source>Returns the last access time of the file, in seconds since Unix Epoch. &lt;a href=&quot;../os/linux/fs/trait.metadataext#tymethod.st_atime&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">Unixエポック以降のファイルの最終アクセス時間を秒単位で返します。&lt;a href=&quot;../os/linux/fs/trait.metadataext#tymethod.st_atime&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="fb45cce5245c0281778ccc23f057ed2218a32288" translate="yes" xml:space="preserve">
          <source>Returns the last access time of the file, in seconds since Unix Epoch. &lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.atime&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">Unixエポック以降のファイルの最終アクセス時間を秒単位で返します。&lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.atime&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c268f1dd33e61836bff10ee9c3dd2908a1617fac" translate="yes" xml:space="preserve">
          <source>Returns the last access time of this metadata.</source>
          <target state="translated">このメタデータの最後のアクセス時刻を返します。</target>
        </trans-unit>
        <trans-unit id="429d7b4cdcf9eb4b7652bca97f6ee66d4a73f574" translate="yes" xml:space="preserve">
          <source>Returns the last and all the rest of the elements of the slice, or &lt;code&gt;None&lt;/code&gt; if it is empty.</source>
          <target state="translated">スライスの最後の要素と残りのすべての要素を返します。空の場合は &lt;code&gt;None&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="9f374a694761f83970c8b898112ca6744a644713" translate="yes" xml:space="preserve">
          <source>Returns the last element of the slice, or &lt;code&gt;None&lt;/code&gt; if it is empty.</source>
          <target state="translated">スライスの最後の要素を返します。空の場合は &lt;code&gt;None&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="5f57ae38a720939527bfddebf1f8bb089a52d737" translate="yes" xml:space="preserve">
          <source>Returns the last entry in the map for in-place manipulation. The key of this entry is the maximum key in the map.</source>
          <target state="translated">インプレース操作のためのマップ内の最後のエントリを返します。このエントリのキーは、マップ内の最大キーです。</target>
        </trans-unit>
        <trans-unit id="29992e35b286e8e2fc2845c6d800039d86309da3" translate="yes" xml:space="preserve">
          <source>Returns the last key-value pair in the map. The key in this pair is the maximum key in the map.</source>
          <target state="translated">マップ内の最後のキーと値のペアを返します。このペアのキーは、マップ内の最大キーです。</target>
        </trans-unit>
        <trans-unit id="e7e83cf50f9f20b4e01791f0c4d1472f628fa234" translate="yes" xml:space="preserve">
          <source>Returns the last modification time listed in this metadata.</source>
          <target state="translated">このメタデータに記載されている最終更新時刻を返します。</target>
        </trans-unit>
        <trans-unit id="b3444fc5884888c4149406ecabaf1ef2ee33450b" translate="yes" xml:space="preserve">
          <source>Returns the last modification time of the file, in nanoseconds since &lt;a href=&quot;#tymethod.mtime&quot;&gt;&lt;code&gt;mtime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ファイルの最終変更時刻を&lt;a href=&quot;#tymethod.mtime&quot;&gt; &lt;code&gt;mtime&lt;/code&gt; &lt;/a&gt;からのナノ秒で返します。</target>
        </trans-unit>
        <trans-unit id="e060d444a8564a17f555e558ace75cc5cd5d2643" translate="yes" xml:space="preserve">
          <source>Returns the last modification time of the file, in nanoseconds since &lt;a href=&quot;#tymethod.st_mtime&quot;&gt;&lt;code&gt;st_mtime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#tymethod.st_mtime&quot;&gt; &lt;code&gt;st_mtime&lt;/code&gt; &lt;/a&gt;からのナノ秒単位で、ファイルの最終変更時刻を返します。</target>
        </trans-unit>
        <trans-unit id="20e9acca0a22f7d3e5550e4125b0911f44d51f67" translate="yes" xml:space="preserve">
          <source>Returns the last modification time of the file, in nanoseconds since &lt;a href=&quot;../os/linux/fs/trait.metadataext#tymethod.st_mtime&quot;&gt;&lt;code&gt;st_mtime&lt;/code&gt;&lt;/a&gt;. &lt;a href=&quot;../os/linux/fs/trait.metadataext#tymethod.st_mtime_nsec&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">Returns the last modification time of the file, in nanoseconds since &lt;a href=&quot;../os/linux/fs/trait.metadataext#tymethod.st_mtime&quot;&gt; &lt;code&gt;st_mtime&lt;/code&gt; &lt;/a&gt;. &lt;a href=&quot;../os/linux/fs/trait.metadataext#tymethod.st_mtime_nsec&quot;&gt;Read more&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="092018db95b8c650c86aa7709203df8159fb4244" translate="yes" xml:space="preserve">
          <source>Returns the last modification time of the file, in nanoseconds since &lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.mtime&quot;&gt;&lt;code&gt;mtime&lt;/code&gt;&lt;/a&gt;. &lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.mtime_nsec&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">Returns the last modification time of the file, in nanoseconds since &lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.mtime&quot;&gt; &lt;code&gt;mtime&lt;/code&gt; &lt;/a&gt;. &lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.mtime_nsec&quot;&gt;Read more&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2c8576dfc2ca4942ca770cd0e32d4f66b1da52ae" translate="yes" xml:space="preserve">
          <source>Returns the last modification time of the file, in nanoseconds since &lt;a href=&quot;trait.metadataext#tymethod.mtime&quot;&gt;&lt;code&gt;mtime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Returns the last modification time of the file, in nanoseconds since &lt;a href=&quot;trait.metadataext#tymethod.mtime&quot;&gt; &lt;code&gt;mtime&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="8de92934b5231894c5c4fa85564215381b1179bf" translate="yes" xml:space="preserve">
          <source>Returns the last modification time of the file, in nanoseconds since &lt;a href=&quot;trait.metadataext#tymethod.st_mtime&quot;&gt;&lt;code&gt;st_mtime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Returns the last modification time of the file, in nanoseconds since &lt;a href=&quot;trait.metadataext#tymethod.st_mtime&quot;&gt; &lt;code&gt;st_mtime&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="b091b94d117baa719c72b97a49c167ab605b9dfe" translate="yes" xml:space="preserve">
          <source>Returns the last modification time of the file, in nanoseconds since [&lt;code&gt;mtime&lt;/code&gt;]. &lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.mtime_nsec&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">[ &lt;code&gt;mtime&lt;/code&gt; ] からのファイルの最終変更時刻をナノ秒単位で返します。&lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.mtime_nsec&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1e5b592106d2c023ba4785eba5178823e1c980ef" translate="yes" xml:space="preserve">
          <source>Returns the last modification time of the file, in nanoseconds since [&lt;code&gt;st_mtime&lt;/code&gt;]. &lt;a href=&quot;../os/linux/fs/trait.metadataext#tymethod.st_mtime_nsec&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">[ &lt;code&gt;st_mtime&lt;/code&gt; ] からのファイルの最終変更時刻をナノ秒単位で返します。&lt;a href=&quot;../os/linux/fs/trait.metadataext#tymethod.st_mtime_nsec&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="cc8c7fac340274a6084a4e051cbfe4396730a8c5" translate="yes" xml:space="preserve">
          <source>Returns the last modification time of the file, in seconds since Unix Epoch.</source>
          <target state="translated">Unix Epoch以降のファイルの最終更新時刻を秒単位で返します。</target>
        </trans-unit>
        <trans-unit id="2fe56bd33e7e0772a902d69c107c402cce5ad5b7" translate="yes" xml:space="preserve">
          <source>Returns the last modification time of the file, in seconds since Unix Epoch. &lt;a href=&quot;../os/linux/fs/trait.metadataext#tymethod.st_mtime&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">Unixエポック以降のファイルの最終変更時間を秒単位で返します。&lt;a href=&quot;../os/linux/fs/trait.metadataext#tymethod.st_mtime&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="44a75fafadbb2629c831f6f75c39838bf00b601b" translate="yes" xml:space="preserve">
          <source>Returns the last modification time of the file, in seconds since Unix Epoch. &lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.mtime&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">Unixエポック以降のファイルの最終変更時間を秒単位で返します。&lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.mtime&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1372c8863cf9cb3a180a94cd4db833598d425e7e" translate="yes" xml:space="preserve">
          <source>Returns the last status change time of the file, in nanoseconds since &lt;a href=&quot;#tymethod.ctime&quot;&gt;&lt;code&gt;ctime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ファイルの最後のステータス変更時刻を&lt;a href=&quot;#tymethod.ctime&quot;&gt; &lt;code&gt;ctime&lt;/code&gt; &lt;/a&gt;からのナノ秒で返します。</target>
        </trans-unit>
        <trans-unit id="76869f2d7d1d679722a686863fde8180a44ee1f3" translate="yes" xml:space="preserve">
          <source>Returns the last status change time of the file, in nanoseconds since &lt;a href=&quot;#tymethod.st_ctime&quot;&gt;&lt;code&gt;st_ctime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#tymethod.st_ctime&quot;&gt; &lt;code&gt;st_ctime&lt;/code&gt; &lt;/a&gt;からのナノ秒単位で、ファイルの最後のステータス変更時刻を返します。</target>
        </trans-unit>
        <trans-unit id="9474ea59bcf20e1ce71a573d1205fbc2507593b1" translate="yes" xml:space="preserve">
          <source>Returns the last status change time of the file, in nanoseconds since &lt;a href=&quot;../os/linux/fs/trait.metadataext#tymethod.st_ctime&quot;&gt;&lt;code&gt;st_ctime&lt;/code&gt;&lt;/a&gt;. &lt;a href=&quot;../os/linux/fs/trait.metadataext#tymethod.st_ctime_nsec&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">Returns the last status change time of the file, in nanoseconds since &lt;a href=&quot;../os/linux/fs/trait.metadataext#tymethod.st_ctime&quot;&gt; &lt;code&gt;st_ctime&lt;/code&gt; &lt;/a&gt;. &lt;a href=&quot;../os/linux/fs/trait.metadataext#tymethod.st_ctime_nsec&quot;&gt;Read more&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="750574dfb11b2c8f23426829e7c5a6bf6fd7b3d2" translate="yes" xml:space="preserve">
          <source>Returns the last status change time of the file, in nanoseconds since &lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.ctime&quot;&gt;&lt;code&gt;ctime&lt;/code&gt;&lt;/a&gt;. &lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.ctime_nsec&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">Returns the last status change time of the file, in nanoseconds since &lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.ctime&quot;&gt; &lt;code&gt;ctime&lt;/code&gt; &lt;/a&gt;. &lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.ctime_nsec&quot;&gt;Read more&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d90d94e0c4c344d3c9434c93a7f8c301b656e10c" translate="yes" xml:space="preserve">
          <source>Returns the last status change time of the file, in nanoseconds since &lt;a href=&quot;trait.metadataext#tymethod.ctime&quot;&gt;&lt;code&gt;ctime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Returns the last status change time of the file, in nanoseconds since &lt;a href=&quot;trait.metadataext#tymethod.ctime&quot;&gt; &lt;code&gt;ctime&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="a286484c1ca204bfbf797dc7fbe17dceb44fd791" translate="yes" xml:space="preserve">
          <source>Returns the last status change time of the file, in nanoseconds since &lt;a href=&quot;trait.metadataext#tymethod.st_ctime&quot;&gt;&lt;code&gt;st_ctime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Returns the last status change time of the file, in nanoseconds since &lt;a href=&quot;trait.metadataext#tymethod.st_ctime&quot;&gt; &lt;code&gt;st_ctime&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="57bcb38dad77fdd499a13fefde02fa0fa7784902" translate="yes" xml:space="preserve">
          <source>Returns the last status change time of the file, in nanoseconds since [&lt;code&gt;ctime&lt;/code&gt;]. &lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.ctime_nsec&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">[ &lt;code&gt;ctime&lt;/code&gt; ] 以降のファイルの最後のステータス変更時刻をナノ秒単位で返します。&lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.ctime_nsec&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="38211dd62e14ec33ec3e4596407a9d4393423172" translate="yes" xml:space="preserve">
          <source>Returns the last status change time of the file, in nanoseconds since [&lt;code&gt;st_ctime&lt;/code&gt;]. &lt;a href=&quot;../os/linux/fs/trait.metadataext#tymethod.st_ctime_nsec&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">[ &lt;code&gt;st_ctime&lt;/code&gt; ] からのナノ秒単位で、ファイルの最後のステータス変更時刻を返します。&lt;a href=&quot;../os/linux/fs/trait.metadataext#tymethod.st_ctime_nsec&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="00ffec13fd3490355665d7c7f61413e58cba13e2" translate="yes" xml:space="preserve">
          <source>Returns the last status change time of the file, in seconds since Unix Epoch.</source>
          <target state="translated">Unix Epoch以降のファイルの最後のステータス変更時刻を秒単位で返します。</target>
        </trans-unit>
        <trans-unit id="963e3a7bee6fc1221e9e031fc0406c8bfe9c5c81" translate="yes" xml:space="preserve">
          <source>Returns the last status change time of the file, in seconds since Unix Epoch. &lt;a href=&quot;../os/linux/fs/trait.metadataext#tymethod.st_ctime&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">Unixエポック以降のファイルの最後のステータス変更時間を秒単位で返します。&lt;a href=&quot;../os/linux/fs/trait.metadataext#tymethod.st_ctime&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7c6aa771a5359a820e246f0834b0187ff59562cc" translate="yes" xml:space="preserve">
          <source>Returns the last status change time of the file, in seconds since Unix Epoch. &lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.ctime&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">Unixエポック以降のファイルの最後のステータス変更時間を秒単位で返します。&lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.ctime&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="520e1369a3755aa0a1447abf256749b096f14815" translate="yes" xml:space="preserve">
          <source>Returns the length of &lt;code&gt;self&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;self&lt;/code&gt; の長さを返します。</target>
        </trans-unit>
        <trans-unit id="4c30f16bbcbb944348ccb41dc99138faf1df12c9" translate="yes" xml:space="preserve">
          <source>Returns the length of a non-null raw slice.</source>
          <target state="translated">NULLではない生のスライスの長さを返します。</target>
        </trans-unit>
        <trans-unit id="70a81ea088dfb28cd7b0e7259a380e2b8f279569" translate="yes" xml:space="preserve">
          <source>Returns the length of a raw slice.</source>
          <target state="translated">生のスライスの長さを返します。</target>
        </trans-unit>
        <trans-unit id="4b766728b43f92f96c53be68bd6aa3bc18704fa8" translate="yes" xml:space="preserve">
          <source>Returns the length of the &lt;code&gt;LinkedList&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;LinkedList&lt;/code&gt; の長さを返します。</target>
        </trans-unit>
        <trans-unit id="5788b1a53289e0e37aae8baadc110091ba5ce966" translate="yes" xml:space="preserve">
          <source>Returns the length of the binary heap.</source>
          <target state="translated">バイナリヒープの長さを返します。</target>
        </trans-unit>
        <trans-unit id="31b2f87e85d573faa9db9993fefaf0dcf7dd5d9c" translate="yes" xml:space="preserve">
          <source>Returns the length of this &lt;code&gt;OsStr&lt;/code&gt;.</source>
          <target state="translated">この &lt;code&gt;OsStr&lt;/code&gt; の長さを返します。</target>
        </trans-unit>
        <trans-unit id="fcff822dfed2e93a8caeff9931edb93305c3e7f7" translate="yes" xml:space="preserve">
          <source>Returns the length of this &lt;code&gt;String&lt;/code&gt;, in bytes, not &lt;a href=&quot;../primitive.char&quot;&gt;&lt;code&gt;char&lt;/code&gt;&lt;/a&gt;s or graphemes. In other words, it may not be what a human considers the length of the string.</source>
          <target state="translated">Returns the length of this &lt;code&gt;String&lt;/code&gt; , in bytes, not &lt;a href=&quot;../primitive.char&quot;&gt; &lt;code&gt;char&lt;/code&gt; &lt;/a&gt;s or graphemes. In other words, it may not be what a human considers the length of the string.</target>
        </trans-unit>
        <trans-unit id="0c1a3ee91a2ad73ea92e9bcfe3a438fd902e5a98" translate="yes" xml:space="preserve">
          <source>Returns the length of this &lt;code&gt;String&lt;/code&gt;, in bytes.</source>
          <target state="translated">この &lt;code&gt;String&lt;/code&gt; の長さをバイト単位で返します。</target>
        </trans-unit>
        <trans-unit id="795fed791a9e8a31900da01797052f66e0a6a4fa" translate="yes" xml:space="preserve">
          <source>Returns the length of this stream (in bytes).</source>
          <target state="translated">このストリームの長さ(バイト数)を返します。</target>
        </trans-unit>
        <trans-unit id="dd26ded6c352bda77f7a3083b091a4db9ce330e3" translate="yes" xml:space="preserve">
          <source>Returns the length of this stream (in bytes). &lt;a href=&quot;../io/trait.seek#method.stream_len&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">このストリームの長さ（バイト単位）を返します。&lt;a href=&quot;../io/trait.seek#method.stream_len&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3093bd7216ddc6503c04245839bb9066034a9c12" translate="yes" xml:space="preserve">
          <source>Returns the length of this stream (in bytes). &lt;a href=&quot;io/trait.seek#method.stream_len&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">このストリームの長さ（バイト単位）を返します。&lt;a href=&quot;io/trait.seek#method.stream_len&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="73cd7d7e328372f3f88cd0d3c8536595de82b2a6" translate="yes" xml:space="preserve">
          <source>Returns the length of this stream (in bytes). &lt;a href=&quot;trait.seek#method.stream_len&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">このストリームの長さ（バイト単位）を返します。&lt;a href=&quot;trait.seek#method.stream_len&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e22395aa1b3ef8348ba981d896ef437bd6045935" translate="yes" xml:space="preserve">
          <source>Returns the line number from which the panic originated.</source>
          <target state="translated">パニックの元となった行番号を返します。</target>
        </trans-unit>
        <trans-unit id="dbdf91714d79ece726f4db7ba9256f266be6b45c" translate="yes" xml:space="preserve">
          <source>Returns the local socket address of this listener.</source>
          <target state="translated">このリスナーのローカルソケットアドレスを返します。</target>
        </trans-unit>
        <trans-unit id="55697a7e6e463058024c2512d8554f0f3212443d" translate="yes" xml:space="preserve">
          <source>Returns the logarithm of the number with respect to an arbitrary base.</source>
          <target state="translated">任意の基底に関する数値の対数を返します。</target>
        </trans-unit>
        <trans-unit id="4b628909503d6cf3eeeeb0549626a7bf17505461" translate="yes" xml:space="preserve">
          <source>Returns the lower bound of the range (inclusive).</source>
          <target state="translated">範囲の下界を返します(範囲を含む)。</target>
        </trans-unit>
        <trans-unit id="272641259261755267f1cba14521e8322a467656" translate="yes" xml:space="preserve">
          <source>Returns the lowercase equivalent of this string slice, as a new &lt;a href=&quot;string/struct.string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この文字列スライスに相当する小文字を新しい&lt;a href=&quot;string/struct.string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;として返します。</target>
        </trans-unit>
        <trans-unit id="0a465e9c28cd028d5e1df8477b3548ec6f461fca" translate="yes" xml:space="preserve">
          <source>Returns the lowercase equivalent of this string slice, as a new &lt;a href=&quot;struct.string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Returns the lowercase equivalent of this string slice, as a new &lt;a href=&quot;struct.string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="e039685c308ed74e0730672f176d0db99cb9020e" translate="yes" xml:space="preserve">
          <source>Returns the maximum element of an iterator.</source>
          <target state="translated">イテレータの最大要素を返します。</target>
        </trans-unit>
        <trans-unit id="2135561cb6b2b9c756db5a4559f01d27eda7e19e" translate="yes" xml:space="preserve">
          <source>Returns the maximum element of an iterator. &lt;a href=&quot;../../../iter/trait.iterator#method.max&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">イテレータの最大要素を返します。&lt;a href=&quot;../../../iter/trait.iterator#method.max&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3359996d97c36b7ac95ba00680611de0c76fe2f8" translate="yes" xml:space="preserve">
          <source>Returns the maximum element of an iterator. &lt;a href=&quot;../../iter/trait.iterator#method.max&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">イテレータの最大要素を返します。&lt;a href=&quot;../../iter/trait.iterator#method.max&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="50186ac96fa893850730c9ee56859eb47b531105" translate="yes" xml:space="preserve">
          <source>Returns the maximum element of an iterator. &lt;a href=&quot;../iter/trait.iterator#method.max&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">イテレータの最大要素を返します。&lt;a href=&quot;../iter/trait.iterator#method.max&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3019abfd5e8950da5748e3ac7432cfdd9a4d8305" translate="yes" xml:space="preserve">
          <source>Returns the maximum element of an iterator. &lt;a href=&quot;iter/trait.iterator#method.max&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">イテレータの最大要素を返します。&lt;a href=&quot;iter/trait.iterator#method.max&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e3c9ee65dcb7d1e0ac427c46da554f19b9be65e0" translate="yes" xml:space="preserve">
          <source>Returns the maximum element of an iterator. &lt;a href=&quot;trait.iterator#method.max&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">イテレータの最大要素を返します。&lt;a href=&quot;trait.iterator#method.max&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8fd61b1f3c3b7358c36d58923a9f04dacedfdfc5" translate="yes" xml:space="preserve">
          <source>Returns the maximum of the two numbers.</source>
          <target state="translated">2つの数値の最大値を返します。</target>
        </trans-unit>
        <trans-unit id="30c3b32049dbb64746fe6d73975b99a2dc6c4f66" translate="yes" xml:space="preserve">
          <source>Returns the maximum of two &lt;code&gt;f32&lt;/code&gt; values.</source>
          <target state="translated">2つの &lt;code&gt;f32&lt;/code&gt; 値の最大値を返します。</target>
        </trans-unit>
        <trans-unit id="247cc627a7ac900b32b26fb9b8c6d5ad9385c7f8" translate="yes" xml:space="preserve">
          <source>Returns the maximum of two &lt;code&gt;f64&lt;/code&gt; values.</source>
          <target state="translated">2つの &lt;code&gt;f64&lt;/code&gt; 値の最大値を返します。</target>
        </trans-unit>
        <trans-unit id="4962568c93c1a037a9696e5bca9fbffeabf92088" translate="yes" xml:space="preserve">
          <source>Returns the maximum of two values with respect to the specified comparison function.</source>
          <target state="translated">指定された比較関数に対する2つの値の最大値を返します。</target>
        </trans-unit>
        <trans-unit id="a3de35e96efd02a2755cead497840bb3d6839e3e" translate="yes" xml:space="preserve">
          <source>Returns the metadata for the file that this entry points at.</source>
          <target state="translated">このエントリが指すファイルのメタデータを返します。</target>
        </trans-unit>
        <trans-unit id="f17d644b364550b8b9020fb92c8806c2c9812b48" translate="yes" xml:space="preserve">
          <source>Returns the minimum element of an iterator.</source>
          <target state="translated">イテレータの最小要素を返します。</target>
        </trans-unit>
        <trans-unit id="205b01799fe0e02bada45f6baef02bf547a4717c" translate="yes" xml:space="preserve">
          <source>Returns the minimum element of an iterator. &lt;a href=&quot;../../../iter/trait.iterator#method.min&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">イテレータの最小要素を返します。&lt;a href=&quot;../../../iter/trait.iterator#method.min&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="fcf6d8f76d948c4e400182f514005c8a0d110c32" translate="yes" xml:space="preserve">
          <source>Returns the minimum element of an iterator. &lt;a href=&quot;../../iter/trait.iterator#method.min&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">イテレータの最小要素を返します。&lt;a href=&quot;../../iter/trait.iterator#method.min&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5e2d130f2bfef7b60c573f849d6ecfa0c2f2f976" translate="yes" xml:space="preserve">
          <source>Returns the minimum element of an iterator. &lt;a href=&quot;../iter/trait.iterator#method.min&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">イテレータの最小要素を返します。&lt;a href=&quot;../iter/trait.iterator#method.min&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="901b9764f12d444a30a37a9ade0622026900fa66" translate="yes" xml:space="preserve">
          <source>Returns the minimum element of an iterator. &lt;a href=&quot;iter/trait.iterator#method.min&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">イテレータの最小要素を返します。&lt;a href=&quot;iter/trait.iterator#method.min&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3700b3a95f0c02c2283ada4be60a59f814923832" translate="yes" xml:space="preserve">
          <source>Returns the minimum element of an iterator. &lt;a href=&quot;trait.iterator#method.min&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">イテレータの最小要素を返します。&lt;a href=&quot;trait.iterator#method.min&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ca84abbb5e5ae81280f44971ed9a2a687c192be8" translate="yes" xml:space="preserve">
          <source>Returns the minimum of the two numbers.</source>
          <target state="translated">2つの数値の最小値を返します。</target>
        </trans-unit>
        <trans-unit id="ecda6fabdc2696641b0ec126986b008c51cc454e" translate="yes" xml:space="preserve">
          <source>Returns the minimum of two &lt;code&gt;f32&lt;/code&gt; values.</source>
          <target state="translated">2つの &lt;code&gt;f32&lt;/code&gt; 値の最小値を返します。</target>
        </trans-unit>
        <trans-unit id="52c45a95830729cd310f3809848b0e7067a0096d" translate="yes" xml:space="preserve">
          <source>Returns the minimum of two &lt;code&gt;f64&lt;/code&gt; values.</source>
          <target state="translated">2つの &lt;code&gt;f64&lt;/code&gt; 値の最小値を返します。</target>
        </trans-unit>
        <trans-unit id="42b2132694a69312ad1525e463be14b3fe5ae0f5" translate="yes" xml:space="preserve">
          <source>Returns the minimum of two values with respect to the specified comparison function.</source>
          <target state="translated">指定された比較関数に関して、2つの値の最小値を返します。</target>
        </trans-unit>
        <trans-unit id="dc6615edb5165359b08e1212e95589fae45987d7" translate="yes" xml:space="preserve">
          <source>Returns the name of a type as a string slice.</source>
          <target state="translated">型の名前を文字列スライスとして返します。</target>
        </trans-unit>
        <trans-unit id="a828256461022107db16350b7504b0d9239c081a" translate="yes" xml:space="preserve">
          <source>Returns the name of the source file from which the panic originated.</source>
          <target state="translated">パニックが発生したソースファイルの名前を返します。</target>
        </trans-unit>
        <trans-unit id="3f4e19eee28692cda80dc81ade04047c7c8a9f55" translate="yes" xml:space="preserve">
          <source>Returns the name of the type of the pointed-to value as a string slice. This is the same as &lt;code&gt;type_name::&amp;lt;T&amp;gt;()&lt;/code&gt;, but can be used where the type of a variable is not easily available.</source>
          <target state="translated">Returns the name of the type of the pointed-to value as a string slice. This is the same as &lt;code&gt;type_name::&amp;lt;T&amp;gt;()&lt;/code&gt; , but can be used where the type of a variable is not easily available.</target>
        </trans-unit>
        <trans-unit id="83333fccf6ef75f54e0218546c7f725da1ebface" translate="yes" xml:space="preserve">
          <source>Returns the natural logarithm of an &lt;code&gt;f32&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;f32&lt;/code&gt; の自然対数を返します。</target>
        </trans-unit>
        <trans-unit id="a5ab689a5bae1343ba9a9f3bfb72e68ef394c018" translate="yes" xml:space="preserve">
          <source>Returns the natural logarithm of an &lt;code&gt;f64&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;f64&lt;/code&gt; の自然対数を返します。</target>
        </trans-unit>
        <trans-unit id="dd24a7328e5a280a50328c4d1161c9e543f887b5" translate="yes" xml:space="preserve">
          <source>Returns the natural logarithm of the number.</source>
          <target state="translated">数値の自然対数を返します。</target>
        </trans-unit>
        <trans-unit id="7237905abd66fd12dcfc26285a6307a450f5654f" translate="yes" xml:space="preserve">
          <source>Returns the nearest integer to a number. Round half-way cases away from &lt;code&gt;0.0&lt;/code&gt;.</source>
          <target state="translated">数値に最も近い整数を返します。中間ケースを &lt;code&gt;0.0&lt;/code&gt; から離れて丸めます。</target>
        </trans-unit>
        <trans-unit id="cb642cb9e0d9834abf0326cb195f07477b421233" translate="yes" xml:space="preserve">
          <source>Returns the nearest integer to an &lt;code&gt;f32&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;f32&lt;/code&gt; に最も近い整数を返します。</target>
        </trans-unit>
        <trans-unit id="8c2a297f62690660d2c8c66bf770c97c7d792116" translate="yes" xml:space="preserve">
          <source>Returns the nearest integer to an &lt;code&gt;f32&lt;/code&gt;. May raise an inexact floating-point exception if the argument is not an integer.</source>
          <target state="translated">&lt;code&gt;f32&lt;/code&gt; に最も近い整数を返します。引数が整数でない場合、不正確な浮動小数点例外が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="21886742e30f552ab55260a40c0dfc411b212b95" translate="yes" xml:space="preserve">
          <source>Returns the nearest integer to an &lt;code&gt;f32&lt;/code&gt;. Rounds half-way cases away from zero.</source>
          <target state="translated">&lt;code&gt;f32&lt;/code&gt; に最も近い整数を返します。中間ケースをゼロから四捨五入します。</target>
        </trans-unit>
        <trans-unit id="64d2e0d5f5f9bf1f5571360f810d07d13da9fc4c" translate="yes" xml:space="preserve">
          <source>Returns the nearest integer to an &lt;code&gt;f64&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;f64&lt;/code&gt; に最も近い整数を返します。</target>
        </trans-unit>
        <trans-unit id="c4ac32407096b500363b8636a1dc0b5f0a8b79dc" translate="yes" xml:space="preserve">
          <source>Returns the nearest integer to an &lt;code&gt;f64&lt;/code&gt;. May raise an inexact floating-point exception if the argument is not an integer.</source>
          <target state="translated">&lt;code&gt;f64&lt;/code&gt; に最も近い整数を返します。引数が整数でない場合、不正確な浮動小数点例外が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="fc52ce4b4d190d8db6e2e9afd8bd2d3a54c597c7" translate="yes" xml:space="preserve">
          <source>Returns the nearest integer to an &lt;code&gt;f64&lt;/code&gt;. Rounds half-way cases away from zero.</source>
          <target state="translated">&lt;code&gt;f64&lt;/code&gt; に最も近い整数を返します。中間ケースをゼロから四捨五入します。</target>
        </trans-unit>
        <trans-unit id="e4f5b3c77ebb2efbd715912995a73410c47b8d5b" translate="yes" xml:space="preserve">
          <source>Returns the number of 16-bit code units this &lt;code&gt;char&lt;/code&gt; would need if encoded in UTF-16.</source>
          <target state="translated">UTF-16でエンコードされている場合、この &lt;code&gt;char&lt;/code&gt; が必要とする16ビットのコード単位の数を返します。</target>
        </trans-unit>
        <trans-unit id="6281e8c8df622284747d80c8ac8f829737dc6435" translate="yes" xml:space="preserve">
          <source>Returns the number of &lt;em&gt;successor&lt;/em&gt; steps required to get from &lt;code&gt;start&lt;/code&gt; to &lt;code&gt;end&lt;/code&gt;.</source>
          <target state="translated">Returns the number of &lt;em&gt;successor&lt;/em&gt; steps required to get from &lt;code&gt;start&lt;/code&gt; to &lt;code&gt;end&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="720495806ad0e14053a539d5ed16665ef8c1b45b" translate="yes" xml:space="preserve">
          <source>Returns the number of &lt;em&gt;successor&lt;/em&gt; steps required to get from &lt;code&gt;start&lt;/code&gt; to &lt;code&gt;end&lt;/code&gt;. &lt;a href=&quot;iter/trait.step#tymethod.steps_between&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">Returns the number of &lt;em&gt;successor&lt;/em&gt; steps required to get from &lt;code&gt;start&lt;/code&gt; to &lt;code&gt;end&lt;/code&gt; . &lt;a href=&quot;iter/trait.step#tymethod.steps_between&quot;&gt;Read more&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e0a7f3574ab5097dd0265c4a9d8549969beb7906" translate="yes" xml:space="preserve">
          <source>Returns the number of &lt;em&gt;whole&lt;/em&gt; seconds contained by this &lt;code&gt;Duration&lt;/code&gt;.</source>
          <target state="translated">数を返します&lt;em&gt;全体&lt;/em&gt;これに含まれている秒 &lt;code&gt;Duration&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="96930962b8edcd03a1fa8561a83c6fec41c9989a" translate="yes" xml:space="preserve">
          <source>Returns the number of bits set in an integer type &lt;code&gt;T&lt;/code&gt;</source>
          <target state="translated">整数型 &lt;code&gt;T&lt;/code&gt; に設定されているビット数を返します</target>
        </trans-unit>
        <trans-unit id="28c529d34cbb9a98aaac0741ad1eeebbae42b8dc" translate="yes" xml:space="preserve">
          <source>Returns the number of blocks allocated to the file, 512-byte units.</source>
          <target state="translated">ファイルに割り当てられたブロック数を 512 バイト単位で返します。</target>
        </trans-unit>
        <trans-unit id="eddff80318319ea022b5496c8822b394111ee355" translate="yes" xml:space="preserve">
          <source>Returns the number of blocks allocated to the file, 512-byte units. &lt;a href=&quot;../os/linux/fs/trait.metadataext#tymethod.st_blocks&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">ファイルに割り当てられたブロックの数を512バイト単位で返します。&lt;a href=&quot;../os/linux/fs/trait.metadataext#tymethod.st_blocks&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="0e890b8da5e9f5ed3855b2c0ebaf360294627c90" translate="yes" xml:space="preserve">
          <source>Returns the number of blocks allocated to the file, in 512-byte units.</source>
          <target state="translated">ファイルに割り当てられたブロック数を 512 バイト単位で返します。</target>
        </trans-unit>
        <trans-unit id="855d42c182e54c20593bc45e8be3be8b7d7f8735" translate="yes" xml:space="preserve">
          <source>Returns the number of blocks allocated to the file, in 512-byte units. &lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.blocks&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">ファイルに割り当てられたブロックの数を512バイト単位で返します。&lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.blocks&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="6434b6944d2238b15a52d8a3e969badaeca1acd5" translate="yes" xml:space="preserve">
          <source>Returns the number of bytes read.</source>
          <target state="translated">読み込んだバイト数を返します。</target>
        </trans-unit>
        <trans-unit id="ee242ec486fc4bd3b3ac4fa373d2caf18fa97a52" translate="yes" xml:space="preserve">
          <source>Returns the number of bytes that can be read before this instance will return EOF.</source>
          <target state="translated">このインスタンスがEOFを返すまでに読み込めるバイト数を返します。</target>
        </trans-unit>
        <trans-unit id="03258f40d4ec53e1df9bba9496419fe9c8eacad5" translate="yes" xml:space="preserve">
          <source>Returns the number of bytes the internal buffer can hold at once.</source>
          <target state="translated">内部バッファが一度に保持できるバイト数を返します。</target>
        </trans-unit>
        <trans-unit id="dc667e25a161ffe5f865ed1e184f902a17a34a4b" translate="yes" xml:space="preserve">
          <source>Returns the number of bytes the internal buffer can hold without flushing.</source>
          <target state="translated">内部バッファがフラッシュせずに保持できるバイト数を返します。</target>
        </trans-unit>
        <trans-unit id="34295ce135f3d1c1247d249b273d39da97aa1a1b" translate="yes" xml:space="preserve">
          <source>Returns the number of bytes this &lt;code&gt;char&lt;/code&gt; would need if encoded in UTF-8.</source>
          <target state="translated">UTF-8でエンコードされている場合、この &lt;code&gt;char&lt;/code&gt; が必要とするバイト数を返します。</target>
        </trans-unit>
        <trans-unit id="1851900c6b83fd96b21463287e58ed074d952fb8" translate="yes" xml:space="preserve">
          <source>Returns the number of bytes written.</source>
          <target state="translated">書き込まれたバイト数を返します。</target>
        </trans-unit>
        <trans-unit id="b10d409e1330d3f9dc58defe912aa849299ede80" translate="yes" xml:space="preserve">
          <source>Returns the number of elements in the &lt;code&gt;VecDeque&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;VecDeque&lt;/code&gt; の要素数を返します。</target>
        </trans-unit>
        <trans-unit id="24c3b1fe85f698a84f93ffe3c38ed093349a4fbc" translate="yes" xml:space="preserve">
          <source>Returns the number of elements in the map.</source>
          <target state="translated">マップ内の要素数を返します。</target>
        </trans-unit>
        <trans-unit id="1cbf3b2f459f250f2c2d9e23c7b2faf808ddc568" translate="yes" xml:space="preserve">
          <source>Returns the number of elements in the set.</source>
          <target state="translated">セットの要素数を返します。</target>
        </trans-unit>
        <trans-unit id="c012fe0604da402f4dc1758c756c9188e1bbdc5c" translate="yes" xml:space="preserve">
          <source>Returns the number of elements in the slice.</source>
          <target state="translated">スライス内の要素数を返します。</target>
        </trans-unit>
        <trans-unit id="8e3bc830d0ddf8fdc5d4aec673164e97e3d68f19" translate="yes" xml:space="preserve">
          <source>Returns the number of elements in the vector, also referred to as its 'length'.</source>
          <target state="translated">ベクトルの要素数を返します。</target>
        </trans-unit>
        <trans-unit id="c545b209598e28721cdaf0bee4a0d709a4638984" translate="yes" xml:space="preserve">
          <source>Returns the number of elements the &lt;code&gt;VecDeque&lt;/code&gt; can hold without reallocating.</source>
          <target state="translated">&lt;code&gt;VecDeque&lt;/code&gt; が再割り当てせずに保持できる要素の数を返します。</target>
        </trans-unit>
        <trans-unit id="8cdab4b15f25c7eb0c9ed75a8262458f6c286463" translate="yes" xml:space="preserve">
          <source>Returns the number of elements the binary heap can hold without reallocating.</source>
          <target state="translated">バイナリヒープが再割り当てせずに保持できる要素数を返します。</target>
        </trans-unit>
        <trans-unit id="1becc1d39ab8dbc391f6aad03e1c15b64ad56109" translate="yes" xml:space="preserve">
          <source>Returns the number of elements the map can hold without reallocating.</source>
          <target state="translated">マップが再割り当てせずに保持できる要素の数を返します。</target>
        </trans-unit>
        <trans-unit id="2e970bbfaa04c221f60030aec585bd8dddfe9864" translate="yes" xml:space="preserve">
          <source>Returns the number of elements the set can hold without reallocating.</source>
          <target state="translated">セットが再割り当てせずに保持できる要素数を返します。</target>
        </trans-unit>
        <trans-unit id="32e1df76d723addf95da715139184ea2ec30efc5" translate="yes" xml:space="preserve">
          <source>Returns the number of elements the vector can hold without reallocating.</source>
          <target state="translated">ベクトルが再割り当てせずに保持できる要素数を返します。</target>
        </trans-unit>
        <trans-unit id="7df2aa4d3dc9f6d3ff4c9009c185489b61395196" translate="yes" xml:space="preserve">
          <source>Returns the number of hard links pointing to this file.</source>
          <target state="translated">このファイルを指すハードリンクの数を返します。</target>
        </trans-unit>
        <trans-unit id="4c9a095340d4ec401e05ccf76c5ebdfb6820d552" translate="yes" xml:space="preserve">
          <source>Returns the number of hard links pointing to this file. &lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.nlink&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">このファイルを指すハードリンクの数を返します。&lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.nlink&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8ad0b9dafd2155adc5c331e542d5a8a2c3c9b01a" translate="yes" xml:space="preserve">
          <source>Returns the number of hard links to file.</source>
          <target state="translated">ファイルへのハードリンクの数を返します。</target>
        </trans-unit>
        <trans-unit id="d78e77a67dbf1414bcf10daa7d2a7ed9f95eb421" translate="yes" xml:space="preserve">
          <source>Returns the number of hard links to file. &lt;a href=&quot;../os/linux/fs/trait.metadataext#tymethod.st_nlink&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">ファイルへのハードリンクの数を返します。&lt;a href=&quot;../os/linux/fs/trait.metadataext#tymethod.st_nlink&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f9cc5c3d3aacafec3b4f9c9e53f0b47bc73aeecd" translate="yes" xml:space="preserve">
          <source>Returns the number of hardware threads available to the program.</source>
          <target state="translated">プログラムで利用可能なハードウェアスレッドの数を返します。</target>
        </trans-unit>
        <trans-unit id="94b420c8d458f142295c871d40b6fad08bd72b03" translate="yes" xml:space="preserve">
          <source>Returns the number of leading ones in the binary representation of &lt;code&gt;self&lt;/code&gt;.</source>
          <target state="translated">Returns the number of leading ones in the binary representation of &lt;code&gt;self&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a92db6deee30912ade983794ce70aad03edb0b0f" translate="yes" xml:space="preserve">
          <source>Returns the number of leading unset bits (zeroes) in an integer type &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">整数型 &lt;code&gt;T&lt;/code&gt; の先頭の未設定ビット（ゼロ）の数を返します。</target>
        </trans-unit>
        <trans-unit id="dae5a5045ddc829a1383c4ac50a88d9dcf10d66d" translate="yes" xml:space="preserve">
          <source>Returns the number of leading zeros in the binary representation of &lt;code&gt;self&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;self&lt;/code&gt; のバイナリ表現の先行ゼロの数を返します。</target>
        </trans-unit>
        <trans-unit id="d832cefaae934438ce2d4ef386004669cb52ba4b" translate="yes" xml:space="preserve">
          <source>Returns the number of ones in the binary representation of &lt;code&gt;self&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;self&lt;/code&gt; バイナリ表現で1の数を返します。</target>
        </trans-unit>
        <trans-unit id="97655611ca81b408277e39f6a5decfef237a405a" translate="yes" xml:space="preserve">
          <source>Returns the number of seconds contained by this &lt;code&gt;Duration&lt;/code&gt; as &lt;code&gt;f32&lt;/code&gt;.</source>
          <target state="translated">この &lt;code&gt;Duration&lt;/code&gt; に含まれる秒数を &lt;code&gt;f32&lt;/code&gt; として返します。</target>
        </trans-unit>
        <trans-unit id="0b5e2120974f53ae492dacc5bfc48941d7abe632" translate="yes" xml:space="preserve">
          <source>Returns the number of seconds contained by this &lt;code&gt;Duration&lt;/code&gt; as &lt;code&gt;f64&lt;/code&gt;.</source>
          <target state="translated">この &lt;code&gt;Duration&lt;/code&gt; に含まれる秒数を &lt;code&gt;f64&lt;/code&gt; として返します。</target>
        </trans-unit>
        <trans-unit id="63a46f40f8ef8cc408902bd6c925cd90edfaa7b7" translate="yes" xml:space="preserve">
          <source>Returns the number of steps between two step objects. The count is inclusive of &lt;code&gt;start&lt;/code&gt; and exclusive of &lt;code&gt;end&lt;/code&gt;.</source>
          <target state="translated">2つのステップオブジェクト間のステップ数を返します。カウントには &lt;code&gt;start&lt;/code&gt; が含まれ、 &lt;code&gt;end&lt;/code&gt; は含まれません。</target>
        </trans-unit>
        <trans-unit id="427639049bb9cfb4a7d577a0181f28d0bf88bae0" translate="yes" xml:space="preserve">
          <source>Returns the number of steps between two step objects. The count is inclusive of &lt;code&gt;start&lt;/code&gt; and exclusive of &lt;code&gt;end&lt;/code&gt;. &lt;a href=&quot;iter/trait.step#tymethod.steps_between&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">2つのステップオブジェクト間のステップ数を返します。カウントには &lt;code&gt;start&lt;/code&gt; が含まれ、 &lt;code&gt;end&lt;/code&gt; は含まれません。&lt;a href=&quot;iter/trait.step#tymethod.steps_between&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3903587ab9df7f73d17b443d8e643044dd070f41" translate="yes" xml:space="preserve">
          <source>Returns the number of trailing ones in the binary representation of &lt;code&gt;self&lt;/code&gt;.</source>
          <target state="translated">Returns the number of trailing ones in the binary representation of &lt;code&gt;self&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6671fd92a76e925fab2823d109d27a8de831276a" translate="yes" xml:space="preserve">
          <source>Returns the number of trailing unset bits (zeroes) in an integer type &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">整数型 &lt;code&gt;T&lt;/code&gt; の末尾の未設定ビット（ゼロ）の数を返します。</target>
        </trans-unit>
        <trans-unit id="eab9f3d5e6f6155d60647266e42f2a504f019bbe" translate="yes" xml:space="preserve">
          <source>Returns the number of trailing zeros in the binary representation of &lt;code&gt;self&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;self&lt;/code&gt; のバイナリ表現の後続ゼロの数を返します。</target>
        </trans-unit>
        <trans-unit id="7265b51e472568d48ac8c1b69e47a4e011138184" translate="yes" xml:space="preserve">
          <source>Returns the number of used bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29aa7f303b62d8d46db345a5c69b269a2bd376d4" translate="yes" xml:space="preserve">
          <source>Returns the number of variants in the enum type &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">Returns the number of variants in the enum type &lt;code&gt;T&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d28178561c062cbbb07342994184104c8af4e2d5" translate="yes" xml:space="preserve">
          <source>Returns the number of variants of the type &lt;code&gt;T&lt;/code&gt; cast to a &lt;code&gt;usize&lt;/code&gt;; if &lt;code&gt;T&lt;/code&gt; has no variants, returns 0. Uninhabited variants will be counted.</source>
          <target state="translated">Returns the number of variants of the type &lt;code&gt;T&lt;/code&gt; cast to a &lt;code&gt;usize&lt;/code&gt; ; if &lt;code&gt;T&lt;/code&gt; has no variants, returns 0. Uninhabited variants will be counted.</target>
        </trans-unit>
        <trans-unit id="bd348e230a91a18bbcc6c0bb5c3e441a0cca4cf3" translate="yes" xml:space="preserve">
          <source>Returns the number of zeros in the binary representation of &lt;code&gt;self&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;self&lt;/code&gt; のバイナリ表現のゼロの数を返します。</target>
        </trans-unit>
        <trans-unit id="45352dec964cff88c866e11d68ce5116072729fc" translate="yes" xml:space="preserve">
          <source>Returns the option if it contains a value, otherwise calls &lt;code&gt;f&lt;/code&gt; and returns the result.</source>
          <target state="translated">値が含まれている場合はオプションを返し、それ以外の場合は &lt;code&gt;f&lt;/code&gt; を呼び出して結果を返します。</target>
        </trans-unit>
        <trans-unit id="bf06fc2805b54388d8ded252fa41db96d725052b" translate="yes" xml:space="preserve">
          <source>Returns the option if it contains a value, otherwise returns &lt;code&gt;optb&lt;/code&gt;.</source>
          <target state="translated">値が含まれている場合はオプションを返し、それ以外の場合は &lt;code&gt;optb&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="a1316e8e7b8a477f38d0ee7bfc3da417f22443f6" translate="yes" xml:space="preserve">
          <source>Returns the parsed prefix data.</source>
          <target state="translated">解析したプレフィックスデータを返します。</target>
        </trans-unit>
        <trans-unit id="b117b7285a3c2821075991e8b1033779e34a0299" translate="yes" xml:space="preserve">
          <source>Returns the path of a temporary directory.</source>
          <target state="translated">一時ディレクトリのパスを返します。</target>
        </trans-unit>
        <trans-unit id="f563d04b456eaf4db8367341d7334d73bc450a66" translate="yes" xml:space="preserve">
          <source>Returns the path of the current user's home directory if known.</source>
          <target state="translated">現在のユーザのホームディレクトリがわかれば、そのパスを返します。</target>
        </trans-unit>
        <trans-unit id="77153ca4078bcb66c4d4032735b644ce465f0ba7" translate="yes" xml:space="preserve">
          <source>Returns the path to the program that was given to &lt;a href=&quot;struct.command#method.new&quot;&gt;&lt;code&gt;Command::new&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Returns the path to the program that was given to &lt;a href=&quot;struct.command#method.new&quot;&gt; &lt;code&gt;Command::new&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="6e3f5fb3a7dd65253c6914c653f8edf30e8c49a8" translate="yes" xml:space="preserve">
          <source>Returns the payload associated with the panic.</source>
          <target state="translated">パニックに関連するペイロードを返します。</target>
        </trans-unit>
        <trans-unit id="fca8b37c782fe927223a8e8018197d19aeba86d6" translate="yes" xml:space="preserve">
          <source>Returns the permissions of the file this metadata is for.</source>
          <target state="translated">このメタデータが対象としているファイルのパーミッションを返します。</target>
        </trans-unit>
        <trans-unit id="2720e85bef6b0dbe798fe6e2d3c68a82211bb1c4" translate="yes" xml:space="preserve">
          <source>Returns the port number associated with this socket address.</source>
          <target state="translated">このソケットアドレスに関連付けられたポート番号を返します。</target>
        </trans-unit>
        <trans-unit id="9f005ac121d3b3785fafcb15a6d606f9d600acb9" translate="yes" xml:space="preserve">
          <source>Returns the position of the nul byte in the slice that caused &lt;a href=&quot;struct.cstring#method.new&quot;&gt;&lt;code&gt;CString::new&lt;/code&gt;&lt;/a&gt; to fail.</source>
          <target state="translated">&lt;a href=&quot;struct.cstring#method.new&quot;&gt; &lt;code&gt;CString::new&lt;/code&gt; &lt;/a&gt;失敗の原因となったスライス内のNULバイトの位置を返します。</target>
        </trans-unit>
        <trans-unit id="e153e3cdb60ebf2bb17cc783e5a6250ad233aa99" translate="yes" xml:space="preserve">
          <source>Returns the positive duration which represents how far forward the second system time was from the first.</source>
          <target state="translated">これは、2番目のシステム時刻が1番目のシステム時刻からどれだけ進んでいるかを表します。</target>
        </trans-unit>
        <trans-unit id="1201f05ed3305d32cba2b7425d656cbb7cd2fe1f" translate="yes" xml:space="preserve">
          <source>Returns the previous value.</source>
          <target state="translated">前の値を返します。</target>
        </trans-unit>
        <trans-unit id="c186f4f82806ac77dac17f3f7d7d9eccefbb2c57" translate="yes" xml:space="preserve">
          <source>Returns the raw &lt;a href=&quot;../ffi/struct.osstr&quot;&gt;&lt;code&gt;OsStr&lt;/code&gt;&lt;/a&gt; slice for this prefix.</source>
          <target state="translated">この接頭辞の未加工の&lt;a href=&quot;../ffi/struct.osstr&quot;&gt; &lt;code&gt;OsStr&lt;/code&gt; &lt;/a&gt;スライスを返します。</target>
        </trans-unit>
        <trans-unit id="b78e6c162194bf676f86c06904e67bb4f8e7600f" translate="yes" xml:space="preserve">
          <source>Returns the raw pointer to the underlying data, the length of the string (in bytes), and the allocated capacity of the data (in bytes). These are the same arguments in the same order as the arguments to &lt;a href=&quot;struct.string#method.from_raw_parts&quot;&gt;&lt;code&gt;from_raw_parts&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Returns the raw pointer to the underlying data, the length of the string (in bytes), and the allocated capacity of the data (in bytes). These are the same arguments in the same order as the arguments to &lt;a href=&quot;struct.string#method.from_raw_parts&quot;&gt; &lt;code&gt;from_raw_parts&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="429e163c7cf1f3e8308132df2a867e58aa484cb4" translate="yes" xml:space="preserve">
          <source>Returns the raw pointer to the underlying data, the length of the vector (in elements), and the allocated capacity of the data (in elements). These are the same arguments in the same order as the arguments to &lt;a href=&quot;struct.vec#method.from_raw_parts&quot;&gt;&lt;code&gt;from_raw_parts&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Returns the raw pointer to the underlying data, the length of the vector (in elements), and the allocated capacity of the data (in elements). These are the same arguments in the same order as the arguments to &lt;a href=&quot;struct.vec#method.from_raw_parts&quot;&gt; &lt;code&gt;from_raw_parts&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="8c881c82669753a4e11654cc018eaa4d3811a032" translate="yes" xml:space="preserve">
          <source>Returns the raw pointer to the underlying data, the length of the vector (in elements), the allocated capacity of the data (in elements), and the allocator. These are the same arguments in the same order as the arguments to &lt;a href=&quot;struct.vec#method.from_raw_parts_in&quot;&gt;&lt;code&gt;from_raw_parts_in&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88640dffcf207b874bdca27192e40ad25f550caf" translate="yes" xml:space="preserve">
          <source>Returns the read timeout of this socket.</source>
          <target state="translated">このソケットの読み込みタイムアウトを返します。</target>
        </trans-unit>
        <trans-unit id="5ea8cd21e899dde4ef3730be8e94fce1fe13c572" translate="yes" xml:space="preserve">
          <source>Returns the remainder of an unchecked division, resulting in undefined behavior where y = 0 or x = &lt;code&gt;T::MIN&lt;/code&gt; and y = -1</source>
          <target state="translated">Returns the remainder of an unchecked division, resulting in undefined behavior where y = 0 or x = &lt;code&gt;T::MIN&lt;/code&gt; and y = -1</target>
        </trans-unit>
        <trans-unit id="b3ef261a1b92a9a4b088c4c70c49986d741571ac" translate="yes" xml:space="preserve">
          <source>Returns the remainder of an unchecked division, resulting in undefined behavior where y = 0 or x = &lt;code&gt;T::min_value()&lt;/code&gt; and y = -1</source>
          <target state="translated">未チェックの除算の余りを返し、y = 0またはx = &lt;code&gt;T::min_value()&lt;/code&gt; およびy = -1の場合の未定義の動作を引き起こします</target>
        </trans-unit>
        <trans-unit id="806d06dcbf92ab05dcfe63d70b146835efc0932e" translate="yes" xml:space="preserve">
          <source>Returns the remainder of the original slice that is not going to be returned by the iterator. The returned slice has at most &lt;code&gt;N-1&lt;/code&gt; elements.</source>
          <target state="translated">イテレータによって返されない元のスライスの残りを返します。返されるスライスには、最大で &lt;code&gt;N-1&lt;/code&gt; 個の要素が含まれます。</target>
        </trans-unit>
        <trans-unit id="dc5f23684b71c80bcea64e7b07dfcd58a70e8023" translate="yes" xml:space="preserve">
          <source>Returns the remainder of the original slice that is not going to be returned by the iterator. The returned slice has at most &lt;code&gt;chunk_size-1&lt;/code&gt; elements.</source>
          <target state="translated">イテレータから返されない、元のスライスの残りを返します。返されるスライスには最大で &lt;code&gt;chunk_size-1&lt;/code&gt; の要素があります。</target>
        </trans-unit>
        <trans-unit id="fd0dfb5ec6eaddd847ec72cc05e6d88b1bed5b75" translate="yes" xml:space="preserve">
          <source>Returns the remaining (sub)string of this iterator as a slice.</source>
          <target state="translated">このイテレータの残りの(サブ)文字列をスライスとして返します。</target>
        </trans-unit>
        <trans-unit id="04a157d0e715a8c9d1c559dc1fad65fa0f8ba1d9" translate="yes" xml:space="preserve">
          <source>Returns the remaining items of this iterator as a mutable slice.</source>
          <target state="translated">このイテレータの残りの項目を、変異可能なスライスとして返します。</target>
        </trans-unit>
        <trans-unit id="027545cdbb69dd8feabe3057b3d85880ce87cfaf" translate="yes" xml:space="preserve">
          <source>Returns the remaining items of this iterator as a slice.</source>
          <target state="translated">このイテレータの残りの項目をスライスとして返します。</target>
        </trans-unit>
        <trans-unit id="5ab3aa67dfc786bc08d01fb6227be4aea4004418" translate="yes" xml:space="preserve">
          <source>Returns the remaining spare capacity of the vector as a slice of &lt;code&gt;MaybeUninit&amp;lt;T&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">Returns the remaining spare capacity of the vector as a slice of &lt;code&gt;MaybeUninit&amp;lt;T&amp;gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="abbc1df3f511a61b305b46fcb9fdb889f766936b" translate="yes" xml:space="preserve">
          <source>Returns the result of an unchecked addition, resulting in undefined behavior when &lt;code&gt;x + y &amp;gt; T::MAX&lt;/code&gt; or &lt;code&gt;x + y &amp;lt; T::MIN&lt;/code&gt;.</source>
          <target state="translated">Returns the result of an unchecked addition, resulting in undefined behavior when &lt;code&gt;x + y &amp;gt; T::MAX&lt;/code&gt; or &lt;code&gt;x + y &amp;lt; T::MIN&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="70fc3f0c75305aeeca36c3927e9f1404a9e09390" translate="yes" xml:space="preserve">
          <source>Returns the result of an unchecked addition, resulting in undefined behavior when &lt;code&gt;x + y &amp;gt; T::max_value()&lt;/code&gt; or &lt;code&gt;x + y &amp;lt; T::min_value()&lt;/code&gt;.</source>
          <target state="translated">未チェックの加算の結果を返し、 &lt;code&gt;x + y &amp;gt; T::max_value()&lt;/code&gt; または &lt;code&gt;x + y &amp;lt; T::min_value()&lt;/code&gt; 場合の動作は未定義になります。</target>
        </trans-unit>
        <trans-unit id="b5737e2a90e952931b3da37731b673f06fdd1624" translate="yes" xml:space="preserve">
          <source>Returns the result of an unchecked multiplication, resulting in undefined behavior when &lt;code&gt;x * y &amp;gt; T::MAX&lt;/code&gt; or &lt;code&gt;x * y &amp;lt; T::MIN&lt;/code&gt;.</source>
          <target state="translated">Returns the result of an unchecked multiplication, resulting in undefined behavior when &lt;code&gt;x * y &amp;gt; T::MAX&lt;/code&gt; or &lt;code&gt;x * y &amp;lt; T::MIN&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b9745bee6c80d896cf8f39d7600119e7d9e0b6e6" translate="yes" xml:space="preserve">
          <source>Returns the result of an unchecked multiplication, resulting in undefined behavior when &lt;code&gt;x * y &amp;gt; T::max_value()&lt;/code&gt; or &lt;code&gt;x * y &amp;lt; T::min_value()&lt;/code&gt;.</source>
          <target state="translated">未チェックの乗算の結果を返し、 &lt;code&gt;x * y &amp;gt; T::max_value()&lt;/code&gt; または &lt;code&gt;x * y &amp;lt; T::min_value()&lt;/code&gt; 場合の動作は未定義になります。</target>
        </trans-unit>
        <trans-unit id="de414e90ec1393c95c07a4e47e5e93f614417b18" translate="yes" xml:space="preserve">
          <source>Returns the result of an unchecked substraction, resulting in undefined behavior when &lt;code&gt;x - y &amp;gt; T::max_value()&lt;/code&gt; or &lt;code&gt;x - y &amp;lt; T::min_value()&lt;/code&gt;.</source>
          <target state="translated">未チェックの &lt;code&gt;x - y &amp;gt; T::max_value()&lt;/code&gt; の結果を返します。その結果、x-y&amp;gt; T :: max_value（）または &lt;code&gt;x - y &amp;lt; T::min_value()&lt;/code&gt; 場合、動作は未定義になります。</target>
        </trans-unit>
        <trans-unit id="64c4926926f86f33410ade9b87a59fa898e299fa" translate="yes" xml:space="preserve">
          <source>Returns the result of an unchecked subtraction, resulting in undefined behavior when &lt;code&gt;x - y &amp;gt; T::MAX&lt;/code&gt; or &lt;code&gt;x - y &amp;lt; T::MIN&lt;/code&gt;.</source>
          <target state="translated">Returns the result of an unchecked subtraction, resulting in undefined behavior when &lt;code&gt;x - y &amp;gt; T::MAX&lt;/code&gt; or &lt;code&gt;x - y &amp;lt; T::MIN&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8ae3db5fb2b9f920328b0a1c07245a941fda453a" translate="yes" xml:space="preserve">
          <source>Returns the rights applied to this file.</source>
          <target state="translated">このファイルに適用されている権利を返します。</target>
        </trans-unit>
        <trans-unit id="fa0c068d11859365b18192e20c77088112832e94" translate="yes" xml:space="preserve">
          <source>Returns the rights applied to this file. &lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.mode&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">このファイルに適用される権利を返します。&lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.mode&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ee530c291660835f1f45ef41a5ab581ece61ca13" translate="yes" xml:space="preserve">
          <source>Returns the scope ID associated with this address.</source>
          <target state="translated">このアドレスに関連付けられたスコープIDを返します。</target>
        </trans-unit>
        <trans-unit id="678c9b03c50c34623a2e47a9879f160e0a560b4f" translate="yes" xml:space="preserve">
          <source>Returns the second argument if the comparison determines them to be equal.</source>
          <target state="translated">第2引数は、比較して両者が等しいと判断された場合に返します。</target>
        </trans-unit>
        <trans-unit id="ff680bbab3415d4c9f332372b7218874374e1ad6" translate="yes" xml:space="preserve">
          <source>Returns the sine of an &lt;code&gt;f32&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;f32&lt;/code&gt; の正弦を返します。</target>
        </trans-unit>
        <trans-unit id="488db317dfe78ab272e32db4af358f727947f930" translate="yes" xml:space="preserve">
          <source>Returns the sine of an &lt;code&gt;f64&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;f64&lt;/code&gt; の正弦を返します。</target>
        </trans-unit>
        <trans-unit id="893ab8c9895f0365c4b58fcc52206bd9e9ee20c1" translate="yes" xml:space="preserve">
          <source>Returns the sixteen eight-bit integers the IPv6 address consists of.</source>
          <target state="translated">IPv6アドレスが構成する16個の8ビット整数を返します。</target>
        </trans-unit>
        <trans-unit id="7ad6de0505e79afe733be59c25c78e77748c9ec6" translate="yes" xml:space="preserve">
          <source>Returns the size of a type in bytes.</source>
          <target state="translated">型のサイズをバイト単位で返します。</target>
        </trans-unit>
        <trans-unit id="4ab55a093c4d747f70a70ca22d5f574fecd8954f" translate="yes" xml:space="preserve">
          <source>Returns the size of the file (if it is a regular file or a symbolic link) in bytes.</source>
          <target state="translated">ファイルのサイズをバイト単位で返します(通常のファイルまたはシンボリックリンクの場合)。</target>
        </trans-unit>
        <trans-unit id="ab6857e7ad65f594a548e2232b4c32d4c45dc30a" translate="yes" xml:space="preserve">
          <source>Returns the size of the file (if it is a regular file or a symbolic link) in bytes. &lt;a href=&quot;../os/linux/fs/trait.metadataext#tymethod.st_size&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">ファイルのサイズ（通常のファイルまたはシンボリックリンクの場合）をバイト単位で返します。&lt;a href=&quot;../os/linux/fs/trait.metadataext#tymethod.st_size&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="596ea0232a4d065a64fde2f486071c2a597a139d" translate="yes" xml:space="preserve">
          <source>Returns the size of the file, in bytes, this metadata is for.</source>
          <target state="translated">このメタデータが対象としているファイルのサイズをバイト単位で返します。</target>
        </trans-unit>
        <trans-unit id="e3c2387c476eb088dd4a2b997b29073bc3408f87" translate="yes" xml:space="preserve">
          <source>Returns the size of the pointed-to value in bytes.</source>
          <target state="translated">ポインテッドトゥ値のサイズをバイト単位で返します。</target>
        </trans-unit>
        <trans-unit id="32bf033f7107839197600c893b817513a6c17e0d" translate="yes" xml:space="preserve">
          <source>Returns the smallest integer greater than or equal to a number.</source>
          <target state="translated">数値以上の最小の整数を返します。</target>
        </trans-unit>
        <trans-unit id="b59a3f2aa87e88bf5431631e4df52338b23c8902" translate="yes" xml:space="preserve">
          <source>Returns the smallest integer greater than or equal to an &lt;code&gt;f32&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;f32&lt;/code&gt; 以上の最小の整数を返します。</target>
        </trans-unit>
        <trans-unit id="28bd143b890a1dd19b9c42465e4a4e0673681aeb" translate="yes" xml:space="preserve">
          <source>Returns the smallest integer greater than or equal to an &lt;code&gt;f64&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;f64&lt;/code&gt; 以上の最小の整数を返します。</target>
        </trans-unit>
        <trans-unit id="b7e460cb206a1385113e4f9b7160a6a8e71b5cd3" translate="yes" xml:space="preserve">
          <source>Returns the smallest power of two greater than or equal to &lt;code&gt;n&lt;/code&gt;. If the next power of two is greater than the type's maximum value, &lt;code&gt;None&lt;/code&gt; is returned, otherwise the power of two is wrapped in &lt;code&gt;Some&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;n&lt;/code&gt; 以上の最小の2の累乗を返します。次の2のべき乗が型の最大値より大きい場合は &lt;code&gt;None&lt;/code&gt; が返され、それ以外の場合は2のべき乗が &lt;code&gt;Some&lt;/code&gt; にラップされます。</target>
        </trans-unit>
        <trans-unit id="9c18590c98b090fd7b97738ceeb4be855663893a" translate="yes" xml:space="preserve">
          <source>Returns the smallest power of two greater than or equal to &lt;code&gt;n&lt;/code&gt;. If the next power of two is greater than the type's maximum value, the return value is wrapped to &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;n&lt;/code&gt; 以上の最小の2の累乗を返します。次の2の累乗が型の最大値より大きい場合、戻り値は &lt;code&gt;0&lt;/code&gt; にラップされます。</target>
        </trans-unit>
        <trans-unit id="4cd3eec23838310ec32b907db88edb3cc932a796" translate="yes" xml:space="preserve">
          <source>Returns the smallest power of two greater than or equal to &lt;code&gt;self&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;self&lt;/code&gt; 以上の最小の2のべき乗を返します。</target>
        </trans-unit>
        <trans-unit id="a7ad453b16957fdb2bb77c37c31544afecd12301" translate="yes" xml:space="preserve">
          <source>Returns the smallest value that can be represented by this integer type.</source>
          <target state="translated">この整数型で表現できる最小値を返します。</target>
        </trans-unit>
        <trans-unit id="290cdc5140b6389d4b43579e0a84d62136cf1260" translate="yes" xml:space="preserve">
          <source>Returns the socket address of the local half of this TCP connection.</source>
          <target state="translated">このTCP接続のローカル半分のソケットアドレスを返します。</target>
        </trans-unit>
        <trans-unit id="8c7f1ae8ae82d29fa352423e4b438aa08dc9cba8" translate="yes" xml:space="preserve">
          <source>Returns the socket address of the local half of this connection.</source>
          <target state="translated">この接続のローカル半分のソケットアドレスを返します。</target>
        </trans-unit>
        <trans-unit id="006b46ce56639d41f45e56bf9edb9ba2eea62e08" translate="yes" xml:space="preserve">
          <source>Returns the socket address of the remote half of this connection.</source>
          <target state="translated">この接続のリモート側のソケットアドレスを返します。</target>
        </trans-unit>
        <trans-unit id="3356af1c420785b78b73f03cb8b8639ef4169753" translate="yes" xml:space="preserve">
          <source>Returns the socket address of the remote peer of this TCP connection.</source>
          <target state="translated">このTCP接続のリモートピアのソケットアドレスを返します。</target>
        </trans-unit>
        <trans-unit id="be0156fe45dd769b5dac60a507d422d80dac537b" translate="yes" xml:space="preserve">
          <source>Returns the socket address of the remote peer this socket was connected to.</source>
          <target state="translated">このソケットが接続されているリモートピアのソケットアドレスを返します。</target>
        </trans-unit>
        <trans-unit id="95355a6d70618c715f149c9a5ebd25a9a16c9ce9" translate="yes" xml:space="preserve">
          <source>Returns the socket address that this socket was created from.</source>
          <target state="translated">このソケットが作成されたソケットアドレスを返します。</target>
        </trans-unit>
        <trans-unit id="91ccde3304769ed5877c00e052aec5a0535d7ea9" translate="yes" xml:space="preserve">
          <source>Returns the source location of the caller of this function. If that function's caller is annotated then its call location will be returned, and so on up the stack to the first call within a non-tracked function body.</source>
          <target state="translated">この関数の呼び出し元の位置を返します。その関数の呼び出し元がアノテーションされている場合は、その呼び出し元の場所が返されます。</target>
        </trans-unit>
        <trans-unit id="d91af5a12b9cefb8820321cc141efdd296d7610c" translate="yes" xml:space="preserve">
          <source>Returns the square root of a number.</source>
          <target state="translated">数値の平方根を返します。</target>
        </trans-unit>
        <trans-unit id="460cfbdbb3f494bb341f4d449e902bb3420d8045" translate="yes" xml:space="preserve">
          <source>Returns the square root of an &lt;code&gt;f32&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;f32&lt;/code&gt; の平方根を返します</target>
        </trans-unit>
        <trans-unit id="bd0e705be2c1897c62ebbdeff195d246b2dda06d" translate="yes" xml:space="preserve">
          <source>Returns the square root of an &lt;code&gt;f64&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;f64&lt;/code&gt; の平方根を返します</target>
        </trans-unit>
        <trans-unit id="6a1843677592374dc17851134c3d54d3f7223126" translate="yes" xml:space="preserve">
          <source>Returns the start value as a &lt;code&gt;Bound&lt;/code&gt;.</source>
          <target state="translated">開始値を &lt;code&gt;Bound&lt;/code&gt; として返します。</target>
        </trans-unit>
        <trans-unit id="116a6689c371cfd5ef6c7093fabfdfa749dde9ca" translate="yes" xml:space="preserve">
          <source>Returns the status of this backtrace, indicating whether this backtrace request was unsupported, disabled, or a stack trace was actually captured.</source>
          <target state="translated">このバックトレースのステータスを返し、このバックトレース要求がサポートされていないのか、無効になっているのか、あるいは実際にスタックトレースがキャプチャされたのかを示します。</target>
        </trans-unit>
        <trans-unit id="e6b86a33bd5aa1ecdb4f8e9a240ff20d86b527ec" translate="yes" xml:space="preserve">
          <source>Returns the symmetric difference of &lt;code&gt;self&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt; as a new &lt;code&gt;BTreeSet&amp;lt;T&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;self&lt;/code&gt; と &lt;code&gt;rhs&lt;/code&gt; の対称差を新しい &lt;code&gt;BTreeSet&amp;lt;T&amp;gt;&lt;/code&gt; として返します。</target>
        </trans-unit>
        <trans-unit id="dc1aaf74dc56c8a619e913235e8c7aa762c9a44d" translate="yes" xml:space="preserve">
          <source>Returns the symmetric difference of &lt;code&gt;self&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt; as a new &lt;code&gt;HashSet&amp;lt;T, S&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;self&lt;/code&gt; と &lt;code&gt;rhs&lt;/code&gt; の対称差を新しい &lt;code&gt;HashSet&amp;lt;T, S&amp;gt;&lt;/code&gt; として返します。</target>
        </trans-unit>
        <trans-unit id="21d51347b12d3977a2076de884aca1ad5ba99d04" translate="yes" xml:space="preserve">
          <source>Returns the system time corresponding to &quot;now&quot;.</source>
          <target state="translated">now に対応するシステム時刻を返します。</target>
        </trans-unit>
        <trans-unit id="afe3d9242e2d934af6d07a4b1dac82abbdabeb6a" translate="yes" xml:space="preserve">
          <source>Returns the total number of nanoseconds contained by this &lt;code&gt;Duration&lt;/code&gt;.</source>
          <target state="translated">この &lt;code&gt;Duration&lt;/code&gt; に含まれるナノ秒の合計数を返します。</target>
        </trans-unit>
        <trans-unit id="b247e92aea7b5cee1ffa599a624b89bcad6f6857" translate="yes" xml:space="preserve">
          <source>Returns the total number of whole microseconds contained by this &lt;code&gt;Duration&lt;/code&gt;.</source>
          <target state="translated">この &lt;code&gt;Duration&lt;/code&gt; に含まれるマイクロ秒の総数を返します。</target>
        </trans-unit>
        <trans-unit id="b345394e3cbbefe1c77de3c579ece46340bb34f8" translate="yes" xml:space="preserve">
          <source>Returns the total number of whole milliseconds contained by this &lt;code&gt;Duration&lt;/code&gt;.</source>
          <target state="translated">この &lt;code&gt;Duration&lt;/code&gt; に含まれるミリ秒の総数を返します。</target>
        </trans-unit>
        <trans-unit id="ed5f25a2b2709329320e75ee032e7a629d1410c5" translate="yes" xml:space="preserve">
          <source>Returns the total size of this file in bytes.</source>
          <target state="translated">このファイルの合計サイズをバイト単位で返します。</target>
        </trans-unit>
        <trans-unit id="8622948abb4c3129687690dd304247bb6571bcc2" translate="yes" xml:space="preserve">
          <source>Returns the total size of this file in bytes. &lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.size&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">このファイルの合計サイズをバイト単位で返します。&lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.size&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4040f71366469bc690c4ccd7ecefc49d3e076068" translate="yes" xml:space="preserve">
          <source>Returns the two raw pointers spanning the slice.</source>
          <target state="translated">スライスにまたがる2つの生ポインタを返します。</target>
        </trans-unit>
        <trans-unit id="1ea66515e0299f048802d6c53a06e60586e915e7" translate="yes" xml:space="preserve">
          <source>Returns the two unsafe mutable pointers spanning the slice.</source>
          <target state="translated">スライスにまたがる2つの安全でない変異可能なポインタを返します。</target>
        </trans-unit>
        <trans-unit id="3c25cff868d33e26c28d926991fe9caa5cb98d81" translate="yes" xml:space="preserve">
          <source>Returns the underlying &lt;code&gt;d_ino&lt;/code&gt; field in the contained &lt;code&gt;dirent&lt;/code&gt; structure.</source>
          <target state="translated">含まれる &lt;code&gt;dirent&lt;/code&gt; 構造体の基になる &lt;code&gt;d_ino&lt;/code&gt; フィールドを返します。</target>
        </trans-unit>
        <trans-unit id="b89f96114e1ef82606c3f4d6bfbaaa27228d7362" translate="yes" xml:space="preserve">
          <source>Returns the underlying &lt;code&gt;d_ino&lt;/code&gt; field in the contained &lt;code&gt;dirent&lt;/code&gt; structure. &lt;a href=&quot;../os/unix/fs/trait.direntryext#tymethod.ino&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">含まれる &lt;code&gt;dirent&lt;/code&gt; 構造体の基になる &lt;code&gt;d_ino&lt;/code&gt; フィールドを返します。&lt;a href=&quot;../os/unix/fs/trait.direntryext#tymethod.ino&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="71b833977f125414585afe78c2a30e982ea7a3c2" translate="yes" xml:space="preserve">
          <source>Returns the underlying raw &lt;code&gt;st_mode&lt;/code&gt; bits that contain the standard Unix permissions for this file.</source>
          <target state="translated">このファイルの標準的なUnix権限を含む、基になるraw &lt;code&gt;st_mode&lt;/code&gt; ビットを返します。</target>
        </trans-unit>
        <trans-unit id="e0e96412d993c2edb28c5bf3ea18e69b86632385" translate="yes" xml:space="preserve">
          <source>Returns the underlying raw &lt;code&gt;st_mode&lt;/code&gt; bits that contain the standard Unix permissions for this file. &lt;a href=&quot;../os/unix/fs/trait.permissionsext#tymethod.mode&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">このファイルの標準的なUnix権限を含む、基になるraw &lt;code&gt;st_mode&lt;/code&gt; ビットを返します。&lt;a href=&quot;../os/unix/fs/trait.permissionsext#tymethod.mode&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a0e272c3d22ad5b5acb84c6c9e56981705ea1a81" translate="yes" xml:space="preserve">
          <source>Returns the union of &lt;code&gt;self&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt; as a new &lt;code&gt;BTreeSet&amp;lt;T&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;self&lt;/code&gt; と &lt;code&gt;rhs&lt;/code&gt; の和集合を新しい &lt;code&gt;BTreeSet&amp;lt;T&amp;gt;&lt;/code&gt; として返します。</target>
        </trans-unit>
        <trans-unit id="334d0670ad0fa6aca1264ca018365740fad472eb" translate="yes" xml:space="preserve">
          <source>Returns the union of &lt;code&gt;self&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt; as a new &lt;code&gt;HashSet&amp;lt;T, S&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;self&lt;/code&gt; と &lt;code&gt;rhs&lt;/code&gt; の和集合を新しい &lt;code&gt;HashSet&amp;lt;T, S&amp;gt;&lt;/code&gt; として返します。</target>
        </trans-unit>
        <trans-unit id="d905f4d6997cd1a5fd676b9c358c17f6454381c4" translate="yes" xml:space="preserve">
          <source>Returns the unpaired surrogate which caused this error.</source>
          <target state="translated">このエラーの原因となったペアリングされていないサロゲートを返します。</target>
        </trans-unit>
        <trans-unit id="d89ba898545e92c59008e3e9e9e9e2ca5c4c79b6" translate="yes" xml:space="preserve">
          <source>Returns the upper bound of the range (inclusive).</source>
          <target state="translated">範囲の上限を返します(範囲を含む)。</target>
        </trans-unit>
        <trans-unit id="99d0f8c4096bad66de3f1182c097eca425647b98" translate="yes" xml:space="preserve">
          <source>Returns the uppercase equivalent of this string slice, as a new &lt;a href=&quot;string/struct.string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この文字列スライスに相当する大文字を新しい&lt;a href=&quot;string/struct.string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;として返します。</target>
        </trans-unit>
        <trans-unit id="101c75b29fcce7c17fe86967d0f82bfb6bee7742" translate="yes" xml:space="preserve">
          <source>Returns the uppercase equivalent of this string slice, as a new &lt;a href=&quot;struct.string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Returns the uppercase equivalent of this string slice, as a new &lt;a href=&quot;struct.string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="489a80d3875efc73c9834c732a48c5d439a2a33b" translate="yes" xml:space="preserve">
          <source>Returns the user ID of the file owner.</source>
          <target state="translated">ファイルの所有者のユーザーIDを返します。</target>
        </trans-unit>
        <trans-unit id="a2fd3d78d551c5bf85a307804e004ebbb3d4322f" translate="yes" xml:space="preserve">
          <source>Returns the user ID of the file owner. &lt;a href=&quot;../os/linux/fs/trait.metadataext#tymethod.st_uid&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">ファイル所有者のユーザーIDを返します。&lt;a href=&quot;../os/linux/fs/trait.metadataext#tymethod.st_uid&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="abc0b77fc35d749ebc9192e80bcc0edc4e827a6a" translate="yes" xml:space="preserve">
          <source>Returns the user ID of the owner of this file.</source>
          <target state="translated">このファイルの所有者のユーザーIDを返します。</target>
        </trans-unit>
        <trans-unit id="a7f382c8ce378856de3a313aabb11958470a144d" translate="yes" xml:space="preserve">
          <source>Returns the user ID of the owner of this file. &lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.uid&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">このファイルの所有者のユーザーIDを返します。&lt;a href=&quot;../os/unix/fs/trait.metadataext#tymethod.uid&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="938f665fa2f6e8ca3e23318a1ecb7d846f60d130" translate="yes" xml:space="preserve">
          <source>Returns the value as a primitive type.</source>
          <target state="translated">値をプリミティブ型として返します。</target>
        </trans-unit>
        <trans-unit id="d96c8a0ebc9847b35c0e2a2a28868ecaf96fbf28" translate="yes" xml:space="preserve">
          <source>Returns the value of the 'HOME' environment variable if it is set (including to an empty string).</source>
          <target state="translated">環境変数 'HOME' が設定されている場合(空文字列を含む)、その値を返します。</target>
        </trans-unit>
        <trans-unit id="40325bf8bdeef6e2f82bd584359925e59eeee6af" translate="yes" xml:space="preserve">
          <source>Returns the value of the &lt;code&gt;SO_ERROR&lt;/code&gt; option.</source>
          <target state="translated">&lt;code&gt;SO_ERROR&lt;/code&gt; オプションの値を返します。</target>
        </trans-unit>
        <trans-unit id="a764c124837649c50395d3b1b211f5a4c46e3f3b" translate="yes" xml:space="preserve">
          <source>Returns the value of the &lt;code&gt;TMPDIR&lt;/code&gt; environment variable if it is set, otherwise for non-Android it returns &lt;code&gt;/tmp&lt;/code&gt;. If Android, since there is no global temporary folder (it is usually allocated per-app), it returns &lt;code&gt;/data/local/tmp&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;TMPDIR&lt;/code&gt; 環境変数が設定されている場合はその値を返し、それ以外の場合はAndroid以外では &lt;code&gt;/tmp&lt;/code&gt; を返します。Androidの場合、グローバル一時フォルダー（通常はアプリごとに割り当てられます）がないため、 &lt;code&gt;/data/local/tmp&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="5adecd48691250a49a6bd206b4e6fcc12d6525bb" translate="yes" xml:space="preserve">
          <source>Returns the value of the &lt;code&gt;dwFileAttributes&lt;/code&gt; field of this metadata.</source>
          <target state="translated">このメタデータの &lt;code&gt;dwFileAttributes&lt;/code&gt; フィールドの値を返します。</target>
        </trans-unit>
        <trans-unit id="eb6bb8145f27615c9229db90c0fe499b900ef0ea" translate="yes" xml:space="preserve">
          <source>Returns the value of the &lt;code&gt;dwFileAttributes&lt;/code&gt; field of this metadata. &lt;a href=&quot;../os/windows/fs/trait.metadataext#tymethod.file_attributes&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">このメタデータの &lt;code&gt;dwFileAttributes&lt;/code&gt; フィールドの値を返します。&lt;a href=&quot;../os/windows/fs/trait.metadataext#tymethod.file_attributes&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="92c89ad0443d60c2d2d860a665d8f99956fad746" translate="yes" xml:space="preserve">
          <source>Returns the value of the &lt;code&gt;dwVolumeSerialNumber&lt;/code&gt; field of this metadata.</source>
          <target state="translated">Returns the value of the &lt;code&gt;dwVolumeSerialNumber&lt;/code&gt; field of this metadata.</target>
        </trans-unit>
        <trans-unit id="cc2dcbb3b4c800dce7f5527955c1d938dd6f017b" translate="yes" xml:space="preserve">
          <source>Returns the value of the &lt;code&gt;dwVolumeSerialNumber&lt;/code&gt; field of this metadata. &lt;a href=&quot;../os/windows/fs/trait.metadataext#tymethod.volume_serial_number&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">Returns the value of the &lt;code&gt;dwVolumeSerialNumber&lt;/code&gt; field of this metadata. &lt;a href=&quot;../os/windows/fs/trait.metadataext#tymethod.volume_serial_number&quot;&gt;Read more&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="65f909ba283b06a81bab19947ad469aad37c5efd" translate="yes" xml:space="preserve">
          <source>Returns the value of the &lt;code&gt;ftCreationTime&lt;/code&gt; field of this metadata.</source>
          <target state="translated">このメタデータの &lt;code&gt;ftCreationTime&lt;/code&gt; フィールドの値を返します。</target>
        </trans-unit>
        <trans-unit id="4f356ec43deb2e4831bb93733877a52e387ecf9d" translate="yes" xml:space="preserve">
          <source>Returns the value of the &lt;code&gt;ftCreationTime&lt;/code&gt; field of this metadata. &lt;a href=&quot;../os/windows/fs/trait.metadataext#tymethod.creation_time&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">このメタデータの &lt;code&gt;ftCreationTime&lt;/code&gt; フィールドの値を返します。&lt;a href=&quot;../os/windows/fs/trait.metadataext#tymethod.creation_time&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="56a140ac2b221e638070ae238ebc2bdf5c096e84" translate="yes" xml:space="preserve">
          <source>Returns the value of the &lt;code&gt;ftLastAccessTime&lt;/code&gt; field of this metadata.</source>
          <target state="translated">このメタデータの &lt;code&gt;ftLastAccessTime&lt;/code&gt; フィールドの値を返します。</target>
        </trans-unit>
        <trans-unit id="dcadee8deeeed464b969afc782db57ebcafd4549" translate="yes" xml:space="preserve">
          <source>Returns the value of the &lt;code&gt;ftLastAccessTime&lt;/code&gt; field of this metadata. &lt;a href=&quot;../os/windows/fs/trait.metadataext#tymethod.last_access_time&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">このメタデータの &lt;code&gt;ftLastAccessTime&lt;/code&gt; フィールドの値を返します。&lt;a href=&quot;../os/windows/fs/trait.metadataext#tymethod.last_access_time&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1622e337a803cf23bc08cec15d271a505df66512" translate="yes" xml:space="preserve">
          <source>Returns the value of the &lt;code&gt;ftLastWriteTime&lt;/code&gt; field of this metadata.</source>
          <target state="translated">このメタデータの &lt;code&gt;ftLastWriteTime&lt;/code&gt; フィールドの値を返します。</target>
        </trans-unit>
        <trans-unit id="5ebe4f26442072092bdd9babe655a0f41b85b722" translate="yes" xml:space="preserve">
          <source>Returns the value of the &lt;code&gt;ftLastWriteTime&lt;/code&gt; field of this metadata. &lt;a href=&quot;../os/windows/fs/trait.metadataext#tymethod.last_write_time&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">このメタデータの &lt;code&gt;ftLastWriteTime&lt;/code&gt; フィールドの値を返します。&lt;a href=&quot;../os/windows/fs/trait.metadataext#tymethod.last_write_time&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="86848c8c28c9c755c8dca8d6501fd14db86b7db5" translate="yes" xml:space="preserve">
          <source>Returns the value of the &lt;code&gt;nFileIndex{Low,High}&lt;/code&gt; fields of this metadata.</source>
          <target state="translated">Returns the value of the &lt;code&gt;nFileIndex{Low,High}&lt;/code&gt; fields of this metadata.</target>
        </trans-unit>
        <trans-unit id="d00c41e7ccae89f6778864a834d489d285339736" translate="yes" xml:space="preserve">
          <source>Returns the value of the &lt;code&gt;nFileIndex{Low,High}&lt;/code&gt; fields of this metadata. &lt;a href=&quot;../os/windows/fs/trait.metadataext#tymethod.file_index&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">Returns the value of the &lt;code&gt;nFileIndex{Low,High}&lt;/code&gt; fields of this metadata. &lt;a href=&quot;../os/windows/fs/trait.metadataext#tymethod.file_index&quot;&gt;Read more&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5649276827c26014c5e106c3e981ac3641c878b8" translate="yes" xml:space="preserve">
          <source>Returns the value of the &lt;code&gt;nFileSize{High,Low}&lt;/code&gt; fields of this metadata.</source>
          <target state="translated">このメタデータの &lt;code&gt;nFileSize{High,Low}&lt;/code&gt; フィールドの値を返します。</target>
        </trans-unit>
        <trans-unit id="0fd27516b70428468d6098230117b2dc0a8b22af" translate="yes" xml:space="preserve">
          <source>Returns the value of the &lt;code&gt;nFileSize{High,Low}&lt;/code&gt; fields of this metadata. &lt;a href=&quot;../os/windows/fs/trait.metadataext#tymethod.file_size&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">このメタデータの &lt;code&gt;nFileSize{High,Low}&lt;/code&gt; フィールドの値を返します。&lt;a href=&quot;../os/windows/fs/trait.metadataext#tymethod.file_size&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="dffd4114a3206536e7e9263202c4210aa1b2b397" translate="yes" xml:space="preserve">
          <source>Returns the value of the &lt;code&gt;nNumberOfLinks&lt;/code&gt; field of this metadata.</source>
          <target state="translated">Returns the value of the &lt;code&gt;nNumberOfLinks&lt;/code&gt; field of this metadata.</target>
        </trans-unit>
        <trans-unit id="eb52e882245afc361d616ab9c767b7235abaa798" translate="yes" xml:space="preserve">
          <source>Returns the value of the &lt;code&gt;nNumberOfLinks&lt;/code&gt; field of this metadata. &lt;a href=&quot;../os/windows/fs/trait.metadataext#tymethod.number_of_links&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">Returns the value of the &lt;code&gt;nNumberOfLinks&lt;/code&gt; field of this metadata. &lt;a href=&quot;../os/windows/fs/trait.metadataext#tymethod.number_of_links&quot;&gt;Read more&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="828c16ee28a67cc49cb771d93b72e813c86e66af" translate="yes" xml:space="preserve">
          <source>Returns the value of the discriminant for the variant in 'v', cast to a &lt;code&gt;u64&lt;/code&gt;; if &lt;code&gt;T&lt;/code&gt; has no discriminant, returns 0.</source>
          <target state="translated">'v'のバリアントの判別式の値を &lt;code&gt;u64&lt;/code&gt; にキャストして返します。 &lt;code&gt;T&lt;/code&gt; に判別式がない場合、0を返します。</target>
        </trans-unit>
        <trans-unit id="6d250788706415d21292031499161c1e7e5e50ae" translate="yes" xml:space="preserve">
          <source>Returns the value of type &lt;code&gt;T&lt;/code&gt; represented by the all-zero byte-pattern.</source>
          <target state="translated">Returns the value of type &lt;code&gt;T&lt;/code&gt; represented by the all-zero byte-pattern.</target>
        </trans-unit>
        <trans-unit id="dce4c05888323014bf6fe3b384ec95b46c0f3d51" translate="yes" xml:space="preserve">
          <source>Returns the value of, in order, the &lt;code&gt;TMP&lt;/code&gt;, &lt;code&gt;TEMP&lt;/code&gt;, &lt;code&gt;USERPROFILE&lt;/code&gt; environment variable if any are set and not the empty string. Otherwise, &lt;code&gt;temp_dir&lt;/code&gt; returns the path of the Windows directory. This behavior is identical to that of &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-gettemppatha&quot;&gt;&lt;code&gt;GetTempPath&lt;/code&gt;&lt;/a&gt;, which this function uses internally.</source>
          <target state="translated">Returns the value of, in order, the &lt;code&gt;TMP&lt;/code&gt; , &lt;code&gt;TEMP&lt;/code&gt; , &lt;code&gt;USERPROFILE&lt;/code&gt; environment variable if any are set and not the empty string. Otherwise, &lt;code&gt;temp_dir&lt;/code&gt; returns the path of the Windows directory. This behavior is identical to that of &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-gettemppatha&quot;&gt; &lt;code&gt;GetTempPath&lt;/code&gt; &lt;/a&gt;, which this function uses internally.</target>
        </trans-unit>
        <trans-unit id="8a219748648d60dfa73d595fe4f723347de2ea15" translate="yes" xml:space="preserve">
          <source>Returns the value of, in order, the &lt;code&gt;TMP&lt;/code&gt;, &lt;code&gt;TEMP&lt;/code&gt;, &lt;code&gt;USERPROFILE&lt;/code&gt; environment variable if any are set and not the empty string. Otherwise, &lt;code&gt;temp_dir&lt;/code&gt; returns the path of the Windows directory. This behavior is identical to that of &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/aa364992(v=vs.85).aspx&quot;&gt;&lt;code&gt;GetTempPath&lt;/code&gt;&lt;/a&gt;, which this function uses internally.</source>
          <target state="translated">空の文字列ではなく、 &lt;code&gt;TMP&lt;/code&gt; 、 &lt;code&gt;TEMP&lt;/code&gt; 、 &lt;code&gt;USERPROFILE&lt;/code&gt; 環境変数が設定されている場合、それらの値を順に返します。それ以外の場合、 &lt;code&gt;temp_dir&lt;/code&gt; はWindowsディレクトリのパスを返します。この動作は、この関数が内部で使用する&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/aa364992(v=vs.85).aspx&quot;&gt; &lt;code&gt;GetTempPath&lt;/code&gt; の&lt;/a&gt;動作と同じです。</target>
        </trans-unit>
        <trans-unit id="9572733b23def3bda923317c53e2462509fdef4f" translate="yes" xml:space="preserve">
          <source>Returns the value that would be obtained by taking the &lt;em&gt;predecessor&lt;/em&gt; of &lt;code&gt;self&lt;/code&gt;&lt;code&gt;count&lt;/code&gt; times.</source>
          <target state="translated">Returns the value that would be obtained by taking the &lt;em&gt;predecessor&lt;/em&gt; of &lt;code&gt;self&lt;/code&gt; &lt;code&gt;count&lt;/code&gt; times.</target>
        </trans-unit>
        <trans-unit id="403367a2c73e6abb177e2cafc577b6dc88e29ebe" translate="yes" xml:space="preserve">
          <source>Returns the value that would be obtained by taking the &lt;em&gt;predecessor&lt;/em&gt; of &lt;code&gt;self&lt;/code&gt;&lt;code&gt;count&lt;/code&gt; times. &lt;a href=&quot;iter/trait.step#method.backward&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">Returns the value that would be obtained by taking the &lt;em&gt;predecessor&lt;/em&gt; of &lt;code&gt;self&lt;/code&gt; &lt;code&gt;count&lt;/code&gt; times. &lt;a href=&quot;iter/trait.step#method.backward&quot;&gt;Read more&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1df4381fa032c7f3be63e70b1bb68a16ea9a6c33" translate="yes" xml:space="preserve">
          <source>Returns the value that would be obtained by taking the &lt;em&gt;predecessor&lt;/em&gt; of &lt;code&gt;self&lt;/code&gt;&lt;code&gt;count&lt;/code&gt; times. &lt;a href=&quot;iter/trait.step#method.backward_unchecked&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">Returns the value that would be obtained by taking the &lt;em&gt;predecessor&lt;/em&gt; of &lt;code&gt;self&lt;/code&gt; &lt;code&gt;count&lt;/code&gt; times. &lt;a href=&quot;iter/trait.step#method.backward_unchecked&quot;&gt;Read more&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2c9466d5ae5f2ed727012926d1a526795f93812c" translate="yes" xml:space="preserve">
          <source>Returns the value that would be obtained by taking the &lt;em&gt;successor&lt;/em&gt; of &lt;code&gt;self&lt;/code&gt;&lt;code&gt;count&lt;/code&gt; times.</source>
          <target state="translated">Returns the value that would be obtained by taking the &lt;em&gt;successor&lt;/em&gt; of &lt;code&gt;self&lt;/code&gt; &lt;code&gt;count&lt;/code&gt; times.</target>
        </trans-unit>
        <trans-unit id="63a2e27926b3ea97136c2cbeae2a696f26714a4c" translate="yes" xml:space="preserve">
          <source>Returns the value that would be obtained by taking the &lt;em&gt;successor&lt;/em&gt; of &lt;code&gt;self&lt;/code&gt;&lt;code&gt;count&lt;/code&gt; times. &lt;a href=&quot;iter/trait.step#method.forward&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">Returns the value that would be obtained by taking the &lt;em&gt;successor&lt;/em&gt; of &lt;code&gt;self&lt;/code&gt; &lt;code&gt;count&lt;/code&gt; times. &lt;a href=&quot;iter/trait.step#method.forward&quot;&gt;Read more&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="943537b7ccdeae46a9e14e22e0be87747384997b" translate="yes" xml:space="preserve">
          <source>Returns the value that would be obtained by taking the &lt;em&gt;successor&lt;/em&gt; of &lt;code&gt;self&lt;/code&gt;&lt;code&gt;count&lt;/code&gt; times. &lt;a href=&quot;iter/trait.step#method.forward_unchecked&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">Returns the value that would be obtained by taking the &lt;em&gt;successor&lt;/em&gt; of &lt;code&gt;self&lt;/code&gt; &lt;code&gt;count&lt;/code&gt; times. &lt;a href=&quot;iter/trait.step#method.forward_unchecked&quot;&gt;Read more&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="180c7bc8bee0b2996a708179ca2a1339202ef346" translate="yes" xml:space="preserve">
          <source>Returns the value that would be obtained by taking the &lt;em&gt;successor&lt;/em&gt; of &lt;code&gt;self&lt;/code&gt;&lt;code&gt;count&lt;/code&gt; times. &lt;a href=&quot;iter/trait.step#tymethod.backward_checked&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">Returns the value that would be obtained by taking the &lt;em&gt;successor&lt;/em&gt; of &lt;code&gt;self&lt;/code&gt; &lt;code&gt;count&lt;/code&gt; times. &lt;a href=&quot;iter/trait.step#tymethod.backward_checked&quot;&gt;Read more&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2ee676444ff6fb19214e9757a17a060a2fb301a6" translate="yes" xml:space="preserve">
          <source>Returns the value that would be obtained by taking the &lt;em&gt;successor&lt;/em&gt; of &lt;code&gt;self&lt;/code&gt;&lt;code&gt;count&lt;/code&gt; times. &lt;a href=&quot;iter/trait.step#tymethod.forward_checked&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">Returns the value that would be obtained by taking the &lt;em&gt;successor&lt;/em&gt; of &lt;code&gt;self&lt;/code&gt; &lt;code&gt;count&lt;/code&gt; times. &lt;a href=&quot;iter/trait.step#tymethod.forward_checked&quot;&gt;Read more&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2b1bd9a4882eef9e73cc693287c83649ea87c4eb" translate="yes" xml:space="preserve">
          <source>Returns the working directory for the child process.</source>
          <target state="translated">子プロセスの作業ディレクトリを返します。</target>
        </trans-unit>
        <trans-unit id="a67b8ba6d2c094a98d9d77b92a4224f63a9b3a0a" translate="yes" xml:space="preserve">
          <source>Returns the write timeout of this socket.</source>
          <target state="translated">このソケットの書き込みタイムアウトを返します。</target>
        </trans-unit>
        <trans-unit id="8caec21be10402429ae482b8b4f054e8779889c5" translate="yes" xml:space="preserve">
          <source>Returns this &lt;code&gt;String&lt;/code&gt;'s capacity, in bytes.</source>
          <target state="translated">この &lt;code&gt;String&lt;/code&gt; の容量をバイト単位で返します。</target>
        </trans-unit>
        <trans-unit id="308a7c84947e79b1e736191bfde42d8448c456e8" translate="yes" xml:space="preserve">
          <source>Returns true if the data is borrowed, i.e. if &lt;code&gt;to_mut&lt;/code&gt; would require additional work.</source>
          <target state="translated">Returns true if the data is borrowed, i.e. if &lt;code&gt;to_mut&lt;/code&gt; would require additional work.</target>
        </trans-unit>
        <trans-unit id="9e745d96228426bb4c41181e369568fe5b8ee672" translate="yes" xml:space="preserve">
          <source>Returns true if the data is owned, i.e. if &lt;code&gt;to_mut&lt;/code&gt; would be a no-op.</source>
          <target state="translated">Returns true if the data is owned, i.e. if &lt;code&gt;to_mut&lt;/code&gt; would be a no-op.</target>
        </trans-unit>
        <trans-unit id="8eebdc50ab4275c0509d65d8f6e232f5ca9d4782" translate="yes" xml:space="preserve">
          <source>Returns true if this &lt;code&gt;Duration&lt;/code&gt; spans no time.</source>
          <target state="translated">Returns true if this &lt;code&gt;Duration&lt;/code&gt; spans no time.</target>
        </trans-unit>
        <trans-unit id="21c916f27ab0290429e470d20dd116e3f85dc9cc" translate="yes" xml:space="preserve">
          <source>Returns two &lt;code&gt;UnixDatagrams&lt;/code&gt;s which are connected to each other.</source>
          <target state="translated">相互に接続されている2つの &lt;code&gt;UnixDatagrams&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="1997def92c07aa40771a479b14582d7c9199601a" translate="yes" xml:space="preserve">
          <source>Returns two &lt;code&gt;UnixStream&lt;/code&gt;s which are connected to each other.</source>
          <target state="translated">相互に接続されている2つの &lt;code&gt;UnixStream&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="58b5908caa858b790207e758925108c2f9bb59b2" translate="yes" xml:space="preserve">
          <source>Returns two slices. The first contains no consecutive repeated elements. The second contains all the duplicates in no specified order.</source>
          <target state="translated">2つのスライスを返します。1つ目のスライスには、連続した繰り返し要素が含まれていません。2つ目のスライスは、指定された順序ではなく、すべての重複要素を含みます。</target>
        </trans-unit>
        <trans-unit id="a705988224286fd86b2b12e8e04c9bf23cfd2249" translate="yes" xml:space="preserve">
          <source>Returns whether the given expression matches any of the given patterns.</source>
          <target state="translated">与えられた式が、与えられたパターンのいずれかにマッチするかどうかを返します。</target>
        </trans-unit>
        <trans-unit id="c1b01afed4877df00cb2e26656f68975f1855f4a" translate="yes" xml:space="preserve">
          <source>Returns whether two pointers are guaranteed to be equal.</source>
          <target state="translated">2つのポインタが等しいことが保証されているかどうかを返します。</target>
        </trans-unit>
        <trans-unit id="8e478b8166bf08569ea56ce3a1298383c77bc647" translate="yes" xml:space="preserve">
          <source>Returns whether two pointers are guaranteed to be unequal.</source>
          <target state="translated">2つのポインタが不等号であることが保証されているかどうかを返します。</target>
        </trans-unit>
        <trans-unit id="2e7c2bb1bfe446ed32e1ab9672cc673aa173f1ca" translate="yes" xml:space="preserve">
          <source>Rev</source>
          <target state="translated">Rev</target>
        </trans-unit>
        <trans-unit id="1b23bbd2e4082fee5f5c745e3cbf4bdcf5bca02f" translate="yes" xml:space="preserve">
          <source>Rev::all</source>
          <target state="translated">Rev::all</target>
        </trans-unit>
        <trans-unit id="ea75cddccbdebb8689380f055fe25d5c97e641e8" translate="yes" xml:space="preserve">
          <source>Rev::any</source>
          <target state="translated">Rev::any</target>
        </trans-unit>
        <trans-unit id="8cc8e88e690bc6681b64607317f27b5ce469bacf" translate="yes" xml:space="preserve">
          <source>Rev::borrow</source>
          <target state="translated">Rev::borrow</target>
        </trans-unit>
        <trans-unit id="e2c9f6498ab8be3ec1160607f061244988a68069" translate="yes" xml:space="preserve">
          <source>Rev::borrow_mut</source>
          <target state="translated">Rev::borrow_mut</target>
        </trans-unit>
        <trans-unit id="73dedb69b68b627e1da0fa0ad68f89639ea0dc58" translate="yes" xml:space="preserve">
          <source>Rev::by_ref</source>
          <target state="translated">Rev::by_ref</target>
        </trans-unit>
        <trans-unit id="6de60f5aa1ad60301b61eeb377b5ccf5c544536c" translate="yes" xml:space="preserve">
          <source>Rev::chain</source>
          <target state="translated">Rev::chain</target>
        </trans-unit>
        <trans-unit id="e4d458e0e8c6b2df185803f6fa9e267ace7c591d" translate="yes" xml:space="preserve">
          <source>Rev::clone</source>
          <target state="translated">Rev::clone</target>
        </trans-unit>
        <trans-unit id="8404df5a18edcc0d8879c9cf2b77a33bf8b7dcef" translate="yes" xml:space="preserve">
          <source>Rev::clone_from</source>
          <target state="translated">Rev::clone_from</target>
        </trans-unit>
        <trans-unit id="1e0d93f9be1c00147e833a50c4a743cb53a3ee55" translate="yes" xml:space="preserve">
          <source>Rev::clone_into</source>
          <target state="translated">Rev::clone_into</target>
        </trans-unit>
        <trans-unit id="7b0e62b62cf92f3958926fdad9beac39623add70" translate="yes" xml:space="preserve">
          <source>Rev::cloned</source>
          <target state="translated">Rev::cloned</target>
        </trans-unit>
        <trans-unit id="4587b57f8345a4a3e332998677d7623ed93892bf" translate="yes" xml:space="preserve">
          <source>Rev::cmp</source>
          <target state="translated">Rev::cmp</target>
        </trans-unit>
        <trans-unit id="6c408188f25a62347600f9f6f7efc47d107ffba5" translate="yes" xml:space="preserve">
          <source>Rev::collect</source>
          <target state="translated">Rev::collect</target>
        </trans-unit>
        <trans-unit id="0a4354f5e33fdf26d7b5b515676d4cb202a571e7" translate="yes" xml:space="preserve">
          <source>Rev::copied</source>
          <target state="translated">Rev::copied</target>
        </trans-unit>
        <trans-unit id="fa1132674a1131c0a0397182fa3fd35714b88c64" translate="yes" xml:space="preserve">
          <source>Rev::count</source>
          <target state="translated">Rev::count</target>
        </trans-unit>
        <trans-unit id="e7f33ff3b18fb0f96be20642157a1c5b94d511be" translate="yes" xml:space="preserve">
          <source>Rev::cycle</source>
          <target state="translated">Rev::cycle</target>
        </trans-unit>
        <trans-unit id="7d9d010b059a96e262ac8e5a6cdaab5542ee4687" translate="yes" xml:space="preserve">
          <source>Rev::enumerate</source>
          <target state="translated">Rev::enumerate</target>
        </trans-unit>
        <trans-unit id="bf2b839bd26ba50d8e6e5fedcd66fb40e0954dbb" translate="yes" xml:space="preserve">
          <source>Rev::eq</source>
          <target state="translated">Rev::eq</target>
        </trans-unit>
        <trans-unit id="e7db1b47702a233fc622c97b15e840fcf2355811" translate="yes" xml:space="preserve">
          <source>Rev::filter</source>
          <target state="translated">Rev::filter</target>
        </trans-unit>
        <trans-unit id="c0636967a7dd6c6b5fee9571848c89e0e6b37fa4" translate="yes" xml:space="preserve">
          <source>Rev::filter_map</source>
          <target state="translated">Rev::filter_map</target>
        </trans-unit>
        <trans-unit id="7e246913ec9f2d6ac5302634f16110029ac885b8" translate="yes" xml:space="preserve">
          <source>Rev::find</source>
          <target state="translated">Rev::find</target>
        </trans-unit>
        <trans-unit id="0190e76cc1988765fc2380f700844d31a354a7bb" translate="yes" xml:space="preserve">
          <source>Rev::find_map</source>
          <target state="translated">Rev::find_map</target>
        </trans-unit>
        <trans-unit id="9ec5179cd3ca49c74bb4e760048b7220f38d9284" translate="yes" xml:space="preserve">
          <source>Rev::flat_map</source>
          <target state="translated">Rev::flat_map</target>
        </trans-unit>
        <trans-unit id="225d34652551554f3a89a77e062a7a155988bda8" translate="yes" xml:space="preserve">
          <source>Rev::flatten</source>
          <target state="translated">Rev::flatten</target>
        </trans-unit>
        <trans-unit id="62575efece92a283feda80baa61c2a97054001e2" translate="yes" xml:space="preserve">
          <source>Rev::fmt</source>
          <target state="translated">Rev::fmt</target>
        </trans-unit>
        <trans-unit id="7d95ad31053fb338311f4d08c6d297a8a283a2b6" translate="yes" xml:space="preserve">
          <source>Rev::fold</source>
          <target state="translated">Rev::fold</target>
        </trans-unit>
        <trans-unit id="1593c69705065114910fc862fec9b3464e7a1e61" translate="yes" xml:space="preserve">
          <source>Rev::for_each</source>
          <target state="translated">Rev::for_each</target>
        </trans-unit>
        <trans-unit id="a39bffcf3500f02b5b324ace604d5f73f4508502" translate="yes" xml:space="preserve">
          <source>Rev::from</source>
          <target state="translated">Rev::from</target>
        </trans-unit>
        <trans-unit id="cbd60e5ba280b4f4324145a1adda2da6a971136b" translate="yes" xml:space="preserve">
          <source>Rev::fuse</source>
          <target state="translated">Rev::fuse</target>
        </trans-unit>
        <trans-unit id="873cbd9880d26c0cdf87aa55ef6d401f65c26c7f" translate="yes" xml:space="preserve">
          <source>Rev::ge</source>
          <target state="translated">Rev::ge</target>
        </trans-unit>
        <trans-unit id="25fe417873e9bf8d09530ff11b2a90f30504e382" translate="yes" xml:space="preserve">
          <source>Rev::gt</source>
          <target state="translated">Rev::gt</target>
        </trans-unit>
        <trans-unit id="f92c8c41775902f0d18700f58581689338de0da4" translate="yes" xml:space="preserve">
          <source>Rev::inspect</source>
          <target state="translated">Rev::inspect</target>
        </trans-unit>
        <trans-unit id="de43a1487bfa1f9ce9ac44d597b981808c53d44e" translate="yes" xml:space="preserve">
          <source>Rev::into</source>
          <target state="translated">Rev::into</target>
        </trans-unit>
        <trans-unit id="41b12c6f490ca67e5c059f82cd7f389f81691d0d" translate="yes" xml:space="preserve">
          <source>Rev::into_iter</source>
          <target state="translated">Rev::into_iter</target>
        </trans-unit>
        <trans-unit id="78dc9bcc5c42dbf0e33ca10baa365d630a987c3b" translate="yes" xml:space="preserve">
          <source>Rev::is_empty</source>
          <target state="translated">Rev::is_empty</target>
        </trans-unit>
        <trans-unit id="ee1895eadacc62b4170b5e3c9dc596b78a2e596b" translate="yes" xml:space="preserve">
          <source>Rev::is_sorted</source>
          <target state="translated">Rev::is_sorted</target>
        </trans-unit>
        <trans-unit id="0b14e8596fb406e0e5a02fb4edae19c0c0f50bf8" translate="yes" xml:space="preserve">
          <source>Rev::is_sorted_by</source>
          <target state="translated">Rev::is_sorted_by</target>
        </trans-unit>
        <trans-unit id="a0339aa17e6fee4a535dfa746c5ebffcbbc064ff" translate="yes" xml:space="preserve">
          <source>Rev::is_sorted_by_key</source>
          <target state="translated">Rev::is_sorted_by_key</target>
        </trans-unit>
        <trans-unit id="69271a231d2a43f1ce9b3323a711616c3ae5178e" translate="yes" xml:space="preserve">
          <source>Rev::last</source>
          <target state="translated">Rev::last</target>
        </trans-unit>
        <trans-unit id="62a279d095cd31928b407efcc98deec091e8388e" translate="yes" xml:space="preserve">
          <source>Rev::le</source>
          <target state="translated">Rev::le</target>
        </trans-unit>
        <trans-unit id="9d8b8b5216a3192ea158a98424a34191c93833cd" translate="yes" xml:space="preserve">
          <source>Rev::len</source>
          <target state="translated">Rev::len</target>
        </trans-unit>
        <trans-unit id="8e9ac96d4de2466ecd316c1f91603ec27b26f6dc" translate="yes" xml:space="preserve">
          <source>Rev::lt</source>
          <target state="translated">Rev::lt</target>
        </trans-unit>
        <trans-unit id="a309ff1b530a86315f29996f8e5e95f42d96df65" translate="yes" xml:space="preserve">
          <source>Rev::map</source>
          <target state="translated">Rev::map</target>
        </trans-unit>
        <trans-unit id="13fc0b5b7e4061cfabc93fd97e77df45f8bf14de" translate="yes" xml:space="preserve">
          <source>Rev::max</source>
          <target state="translated">Rev::max</target>
        </trans-unit>
        <trans-unit id="f2a8f41d4959a1a4b0b54bf592703f38eda6e0cc" translate="yes" xml:space="preserve">
          <source>Rev::max_by</source>
          <target state="translated">Rev::max_by</target>
        </trans-unit>
        <trans-unit id="3a57fc722077bd36001915718274271fa4c84941" translate="yes" xml:space="preserve">
          <source>Rev::max_by_key</source>
          <target state="translated">Rev::max_by_key</target>
        </trans-unit>
        <trans-unit id="ae572218c9ac7eef60e456cb22b794f75d7e0ca3" translate="yes" xml:space="preserve">
          <source>Rev::min</source>
          <target state="translated">Rev::min</target>
        </trans-unit>
        <trans-unit id="717b07a4d2d09558b9eeb735fd03732d28942baf" translate="yes" xml:space="preserve">
          <source>Rev::min_by</source>
          <target state="translated">Rev::min_by</target>
        </trans-unit>
        <trans-unit id="b635b9d188dc18da9a1c7e703b8e4a520ac3c126" translate="yes" xml:space="preserve">
          <source>Rev::min_by_key</source>
          <target state="translated">Rev::min_by_key</target>
        </trans-unit>
        <trans-unit id="09141d32e008f2b05aadaf1044ecf1a4840592ce" translate="yes" xml:space="preserve">
          <source>Rev::ne</source>
          <target state="translated">Rev::ne</target>
        </trans-unit>
        <trans-unit id="9c639ae7e696436752695f9128ab7443996d43be" translate="yes" xml:space="preserve">
          <source>Rev::next</source>
          <target state="translated">Rev::next</target>
        </trans-unit>
        <trans-unit id="68086698a40e9aec1c5dec320ad4b73283d254df" translate="yes" xml:space="preserve">
          <source>Rev::next_back</source>
          <target state="translated">Rev::next_back</target>
        </trans-unit>
        <trans-unit id="05d6eba031162aff3541fcb21f99e39a85d56d67" translate="yes" xml:space="preserve">
          <source>Rev::nth</source>
          <target state="translated">Rev::nth</target>
        </trans-unit>
        <trans-unit id="a81bfd09b0b8a63e11fb54e6a20098189b515425" translate="yes" xml:space="preserve">
          <source>Rev::nth_back</source>
          <target state="translated">Rev::nth_back</target>
        </trans-unit>
        <trans-unit id="49153ede378f17d37a9c87e1ca317129d8b017a1" translate="yes" xml:space="preserve">
          <source>Rev::partial_cmp</source>
          <target state="translated">Rev::partial_cmp</target>
        </trans-unit>
        <trans-unit id="170d9a09a9560f1dd862ddfcb40722d73ffda2fb" translate="yes" xml:space="preserve">
          <source>Rev::partition</source>
          <target state="translated">Rev::partition</target>
        </trans-unit>
        <trans-unit id="c5affa24edae4f7086a827c7943e67c9ad19eca7" translate="yes" xml:space="preserve">
          <source>Rev::peekable</source>
          <target state="translated">Rev::peekable</target>
        </trans-unit>
        <trans-unit id="746df81e7e44e4774446265edbe5fdc1b8168630" translate="yes" xml:space="preserve">
          <source>Rev::position</source>
          <target state="translated">Rev::position</target>
        </trans-unit>
        <trans-unit id="06891f0cbd66b42213b0a521d231f478938da958" translate="yes" xml:space="preserve">
          <source>Rev::product</source>
          <target state="translated">Rev::product</target>
        </trans-unit>
        <trans-unit id="61b3079d136894c7e064b5b52e1d2ad981672e74" translate="yes" xml:space="preserve">
          <source>Rev::rev</source>
          <target state="translated">Rev::rev</target>
        </trans-unit>
        <trans-unit id="606dc7c354c4c3f0a918e0dd90f032f63a4d96ea" translate="yes" xml:space="preserve">
          <source>Rev::rfind</source>
          <target state="translated">Rev::rfind</target>
        </trans-unit>
        <trans-unit id="d93e6da3d5fa06554cb27eecda1ab00a2639f4ca" translate="yes" xml:space="preserve">
          <source>Rev::rfold</source>
          <target state="translated">Rev::rfold</target>
        </trans-unit>
        <trans-unit id="69887a513371a72a506e9e2b72d6574e1a006ab7" translate="yes" xml:space="preserve">
          <source>Rev::rposition</source>
          <target state="translated">Rev::rposition</target>
        </trans-unit>
        <trans-unit id="2ac558d4958028cac5d050c97576307d3b0c7e90" translate="yes" xml:space="preserve">
          <source>Rev::scan</source>
          <target state="translated">Rev::scan</target>
        </trans-unit>
        <trans-unit id="32bf46d57176ec58a7308c23938fc7a8a6065450" translate="yes" xml:space="preserve">
          <source>Rev::size_hint</source>
          <target state="translated">Rev::size_hint</target>
        </trans-unit>
        <trans-unit id="745daae6d469e14032d310fcbbe039b267f61011" translate="yes" xml:space="preserve">
          <source>Rev::skip</source>
          <target state="translated">Rev::skip</target>
        </trans-unit>
        <trans-unit id="dc68a43da7c6b96a30d49d1450c76f344182303e" translate="yes" xml:space="preserve">
          <source>Rev::skip_while</source>
          <target state="translated">Rev::skip_while</target>
        </trans-unit>
        <trans-unit id="054143a0994b6cd5dd1b483213f5a6c9b1c0b2d1" translate="yes" xml:space="preserve">
          <source>Rev::step_by</source>
          <target state="translated">Rev::step_by</target>
        </trans-unit>
        <trans-unit id="d9663cdc74ad7a47d90d5d997ca949efed24b49c" translate="yes" xml:space="preserve">
          <source>Rev::sum</source>
          <target state="translated">Rev::sum</target>
        </trans-unit>
        <trans-unit id="544a9b94c47ffe3adf4fb88e67c57140817601d9" translate="yes" xml:space="preserve">
          <source>Rev::take</source>
          <target state="translated">Rev::take</target>
        </trans-unit>
        <trans-unit id="7ef936397559c6de4b345f55afcfa6da8c20a28c" translate="yes" xml:space="preserve">
          <source>Rev::take_while</source>
          <target state="translated">Rev::take_while</target>
        </trans-unit>
        <trans-unit id="db658a06bd7f55c9638ea4ee61d0f929584e7346" translate="yes" xml:space="preserve">
          <source>Rev::to_owned</source>
          <target state="translated">Rev::to_owned</target>
        </trans-unit>
        <trans-unit id="4a55fa5472997f719fcb65ca32e38a9494c590c7" translate="yes" xml:space="preserve">
          <source>Rev::try_fold</source>
          <target state="translated">Rev::try_fold</target>
        </trans-unit>
        <trans-unit id="cd736368392119bec6e68191bd957a8b923eac5e" translate="yes" xml:space="preserve">
          <source>Rev::try_for_each</source>
          <target state="translated">Rev::try_for_each</target>
        </trans-unit>
        <trans-unit id="dbeb577d71ccd2a54b3e5a954ded27049870aadb" translate="yes" xml:space="preserve">
          <source>Rev::try_from</source>
          <target state="translated">Rev::try_from</target>
        </trans-unit>
        <trans-unit id="966fc760987fd15f6fba61c00189cc38fffafabd" translate="yes" xml:space="preserve">
          <source>Rev::try_into</source>
          <target state="translated">Rev::try_into</target>
        </trans-unit>
        <trans-unit id="e03bbf2925edcd0e55fbf87c143dcf7214a33801" translate="yes" xml:space="preserve">
          <source>Rev::try_rfold</source>
          <target state="translated">Rev::try_rfold</target>
        </trans-unit>
        <trans-unit id="4866aacf5f321e53501fb39991d7e92a23530109" translate="yes" xml:space="preserve">
          <source>Rev::type_id</source>
          <target state="translated">Rev::type_id</target>
        </trans-unit>
        <trans-unit id="d40b36de24f921fb9d83203737a9d9313e304ed4" translate="yes" xml:space="preserve">
          <source>Rev::unzip</source>
          <target state="translated">Rev::unzip</target>
        </trans-unit>
        <trans-unit id="d26061185131ee794acff98f8cdee42eb789c3a8" translate="yes" xml:space="preserve">
          <source>Rev::zip</source>
          <target state="translated">Rev::zip</target>
        </trans-unit>
        <trans-unit id="57f9933768794f845d000833d367d5698393211d" translate="yes" xml:space="preserve">
          <source>Reverse</source>
          <target state="translated">Reverse</target>
        </trans-unit>
        <trans-unit id="855b7acdf3d35ac4f2adcc88572889dbbd152c8d" translate="yes" xml:space="preserve">
          <source>Reverse::borrow</source>
          <target state="translated">Reverse::borrow</target>
        </trans-unit>
        <trans-unit id="b2b7d426909b05c0abe69fafc7ad9a3373457083" translate="yes" xml:space="preserve">
          <source>Reverse::borrow_mut</source>
          <target state="translated">Reverse::borrow_mut</target>
        </trans-unit>
        <trans-unit id="ae49fc0d147862750a761b423bb48bdac7aea4ed" translate="yes" xml:space="preserve">
          <source>Reverse::clamp</source>
          <target state="translated">Reverse::clamp</target>
        </trans-unit>
        <trans-unit id="e018a9a3e3f5e4a17f25be205ffa5619450a465e" translate="yes" xml:space="preserve">
          <source>Reverse::clone</source>
          <target state="translated">Reverse::clone</target>
        </trans-unit>
        <trans-unit id="1acbb09e0fd503239dfba6d9885e42b30ce68ef2" translate="yes" xml:space="preserve">
          <source>Reverse::clone_from</source>
          <target state="translated">Reverse::clone_from</target>
        </trans-unit>
        <trans-unit id="6fae25f3227a651fa4dab3d82eae4c6d090bf5f7" translate="yes" xml:space="preserve">
          <source>Reverse::clone_into</source>
          <target state="translated">Reverse::clone_into</target>
        </trans-unit>
        <trans-unit id="3576dde77728ccb6dac97f18c9329186fcd25b47" translate="yes" xml:space="preserve">
          <source>Reverse::cmp</source>
          <target state="translated">Reverse::cmp</target>
        </trans-unit>
        <trans-unit id="87d225b7af09dcef297be52eee959d2c55588a88" translate="yes" xml:space="preserve">
          <source>Reverse::default</source>
          <target state="translated">Reverse::default</target>
        </trans-unit>
        <trans-unit id="a524d78b7983211c5e0bd0dfb57a20e67c068d6b" translate="yes" xml:space="preserve">
          <source>Reverse::eq</source>
          <target state="translated">Reverse::eq</target>
        </trans-unit>
        <trans-unit id="27d1dc581d53e247cf1e2bafb5f52a5822dffafb" translate="yes" xml:space="preserve">
          <source>Reverse::fmt</source>
          <target state="translated">Reverse::fmt</target>
        </trans-unit>
        <trans-unit id="ec878d46af0f49ce6792c30cd0b6e1b7235b1958" translate="yes" xml:space="preserve">
          <source>Reverse::from</source>
          <target state="translated">Reverse::from</target>
        </trans-unit>
        <trans-unit id="7c6d0cd9a450b5ac7a9861f8ecd935be369486df" translate="yes" xml:space="preserve">
          <source>Reverse::ge</source>
          <target state="translated">Reverse::ge</target>
        </trans-unit>
        <trans-unit id="ce7cdbde47d875eaad55efb2ef9ffe90f4a03ed4" translate="yes" xml:space="preserve">
          <source>Reverse::gt</source>
          <target state="translated">Reverse::gt</target>
        </trans-unit>
        <trans-unit id="ff3888b2d1d36cd518958cda6a06bbafd40ca557" translate="yes" xml:space="preserve">
          <source>Reverse::hash</source>
          <target state="translated">Reverse::hash</target>
        </trans-unit>
        <trans-unit id="0132646776d34a7463118179e279a28498b7466b" translate="yes" xml:space="preserve">
          <source>Reverse::hash_slice</source>
          <target state="translated">Reverse::hash_slice</target>
        </trans-unit>
        <trans-unit id="e9e019daf91ab04cdc269196e09f2db10403fa64" translate="yes" xml:space="preserve">
          <source>Reverse::into</source>
          <target state="translated">Reverse::into</target>
        </trans-unit>
        <trans-unit id="d9b1e02561cb84eb59fa254f199d5e53c05c8368" translate="yes" xml:space="preserve">
          <source>Reverse::le</source>
          <target state="translated">Reverse::le</target>
        </trans-unit>
        <trans-unit id="4d9a8bfcbe29163526e5bc5a1ad6df0efaa28d68" translate="yes" xml:space="preserve">
          <source>Reverse::lt</source>
          <target state="translated">Reverse::lt</target>
        </trans-unit>
        <trans-unit id="fce2114bbd923c0c4b66d5fbd541e6a46db8b2b1" translate="yes" xml:space="preserve">
          <source>Reverse::max</source>
          <target state="translated">Reverse::max</target>
        </trans-unit>
        <trans-unit id="744f7afa0a87464baa627359381d12071537458e" translate="yes" xml:space="preserve">
          <source>Reverse::min</source>
          <target state="translated">Reverse::min</target>
        </trans-unit>
        <trans-unit id="2947ceb046e4341b0a7b1b01d461498d6d47d77c" translate="yes" xml:space="preserve">
          <source>Reverse::ne</source>
          <target state="translated">Reverse::ne</target>
        </trans-unit>
        <trans-unit id="1a0af82a6b449d1fc4be8050ad565202d480b99c" translate="yes" xml:space="preserve">
          <source>Reverse::partial_cmp</source>
          <target state="translated">Reverse::partial_cmp</target>
        </trans-unit>
        <trans-unit id="dfc38fb2b46e97d4339fe9223ac9e35b911966f9" translate="yes" xml:space="preserve">
          <source>Reverse::to_owned</source>
          <target state="translated">Reverse::to_owned</target>
        </trans-unit>
        <trans-unit id="6b9dbc8067fbcb99860916ed4280269ddf4b0187" translate="yes" xml:space="preserve">
          <source>Reverse::try_from</source>
          <target state="translated">Reverse::try_from</target>
        </trans-unit>
        <trans-unit id="4198456beaa5540ba8be310ee2d5cc7d8f48ea67" translate="yes" xml:space="preserve">
          <source>Reverse::try_into</source>
          <target state="translated">Reverse::try_into</target>
        </trans-unit>
        <trans-unit id="6860559d5fa051e4b834b6077771242282766826" translate="yes" xml:space="preserve">
          <source>Reverse::type_id</source>
          <target state="translated">Reverse::type_id</target>
        </trans-unit>
        <trans-unit id="de938e717e63356d75f69d3afd8292bf2f96a32f" translate="yes" xml:space="preserve">
          <source>ReverseSearcher</source>
          <target state="translated">ReverseSearcher</target>
        </trans-unit>
        <trans-unit id="8d7236df59f914f9071c6e16648b2ef0addf66a1" translate="yes" xml:space="preserve">
          <source>Reverses an iterator's direction.</source>
          <target state="translated">イテレータの方向を反転させます。</target>
        </trans-unit>
        <trans-unit id="eb8aead23318719eb265935da0734b397d74d732" translate="yes" xml:space="preserve">
          <source>Reverses an iterator's direction. &lt;a href=&quot;../../../iter/trait.iterator#method.rev&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">イテレータの方向を逆にします。&lt;a href=&quot;../../../iter/trait.iterator#method.rev&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="da5c53b657810a4cbe93c7e2f2fa480619340afb" translate="yes" xml:space="preserve">
          <source>Reverses an iterator's direction. &lt;a href=&quot;../../iter/trait.iterator#method.rev&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">イテレータの方向を逆にします。&lt;a href=&quot;../../iter/trait.iterator#method.rev&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a52ff52ba0845d9c1a9b2c750fd96d9a3a6a3c27" translate="yes" xml:space="preserve">
          <source>Reverses an iterator's direction. &lt;a href=&quot;../iter/trait.iterator#method.rev&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">イテレータの方向を逆にします。&lt;a href=&quot;../iter/trait.iterator#method.rev&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f9284c1c2c9fd85ba7767c59c99017b534d9eee9" translate="yes" xml:space="preserve">
          <source>Reverses an iterator's direction. &lt;a href=&quot;iter/trait.iterator#method.rev&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">イテレータの方向を逆にします。&lt;a href=&quot;iter/trait.iterator#method.rev&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="729ff069e224b910aab08299c613befadec11121" translate="yes" xml:space="preserve">
          <source>Reverses an iterator's direction. &lt;a href=&quot;trait.iterator#method.rev&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">イテレータの方向を逆にします。&lt;a href=&quot;trait.iterator#method.rev&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="42ebe1d1b22b768e5e0a52d253bd9764dab488b1" translate="yes" xml:space="preserve">
          <source>Reverses the &lt;code&gt;Ordering&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Ordering&lt;/code&gt; 逆にします。</target>
        </trans-unit>
        <trans-unit id="2bd561cb07cd33c0a2ed2162929bc80a36033f08" translate="yes" xml:space="preserve">
          <source>Reverses the bit pattern of the integer.</source>
          <target state="translated">整数のビットパターンを反転します。</target>
        </trans-unit>
        <trans-unit id="c045f20a6ee66e7b7d06320153c9befa95e70b3f" translate="yes" xml:space="preserve">
          <source>Reverses the bits in an integer type &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">整数型 &lt;code&gt;T&lt;/code&gt; のビットを反転します。</target>
        </trans-unit>
        <trans-unit id="79e3db360b190aa279792f3cec009bf516b1404c" translate="yes" xml:space="preserve">
          <source>Reverses the byte order of the integer.</source>
          <target state="translated">整数のバイト順を反転させます。</target>
        </trans-unit>
        <trans-unit id="64b09f1db72cf0ec7ade643d2317db8963d83387" translate="yes" xml:space="preserve">
          <source>Reverses the bytes in an integer type &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">整数型 &lt;code&gt;T&lt;/code&gt; のバイトを反転します。</target>
        </trans-unit>
        <trans-unit id="4ba3654366e538ecbe6a202e08718e335edbe9a1" translate="yes" xml:space="preserve">
          <source>Reverses the order of bits in the integer. The least significant bit becomes the most significant bit, second least-significant bit becomes second most-significant bit, etc.</source>
          <target state="translated">整数のビットの順序を反転させます。最下位のビットが最上位のビットになり、2 番目に下位のビットが 2 番目に上位のビットになります。</target>
        </trans-unit>
        <trans-unit id="eb94381be35515f566147dc309094fe9e5f3b42c" translate="yes" xml:space="preserve">
          <source>Reverses the order of elements in the slice, in place.</source>
          <target state="translated">スライス内の要素の順序を反転させます。</target>
        </trans-unit>
        <trans-unit id="043399b4f9587dfd6e880bb527cf9885c51d0675" translate="yes" xml:space="preserve">
          <source>Rewrite the expression without functional record update syntax:</source>
          <target state="translated">関数レコード更新構文を使用せずに式を書き換えます。</target>
        </trans-unit>
        <trans-unit id="5c8afd877c560b80edb72541a6eaea0dba68d13a" translate="yes" xml:space="preserve">
          <source>Right Shift**</source>
          <target state="translated">右シフト</target>
        </trans-unit>
        <trans-unit id="9ef3e151188d7e4dfc0cdde88b74ac2276235a35" translate="yes" xml:space="preserve">
          <source>Right now, our web server will return the HTML in the file no matter what the client requested. Let&amp;rsquo;s add functionality to check that the browser is requesting &lt;em&gt;/&lt;/em&gt; before returning the HTML file and return an error if the browser requests anything else. For this we need to modify &lt;code&gt;handle_connection&lt;/code&gt;, as shown in Listing 20-6. This new code checks the content of the request received against what we know a request for &lt;em&gt;/&lt;/em&gt; looks like and adds &lt;code&gt;if&lt;/code&gt; and &lt;code&gt;else&lt;/code&gt; blocks to treat requests differently.</source>
          <target state="translated">現在、クライアントが何を要求しても、WebサーバーはファイルにHTMLを返します。ブラウザーがHTMLファイルを返す前に&lt;em&gt;/&lt;/em&gt;を要求していることを確認する機能を追加して、ブラウザーが何かを要求した場合はエラーを返します。このためには、リスト20-6で示されるように、 &lt;code&gt;handle_connection&lt;/code&gt; を修正する必要があります。この新しいコードは、受信した要求の内容を、&lt;em&gt;/の&lt;/em&gt;要求がどのように見えるかを確認し、 &lt;code&gt;if&lt;/code&gt; および &lt;code&gt;else&lt;/code&gt; ブロックを追加して、要求を異なる方法で処理します。</target>
        </trans-unit>
        <trans-unit id="18ab96a1810297bde0b9141142db3dfb5bb9d2bc" translate="yes" xml:space="preserve">
          <source>Right now, the program generated by &lt;code&gt;cargo new&lt;/code&gt; cannot process arguments we give it. Some existing libraries on &lt;a href=&quot;https://crates.io/&quot;&gt;crates.io&lt;/a&gt; can help with writing a program that accepts command line arguments, but because you&amp;rsquo;re just learning this concept, let&amp;rsquo;s implement this capability ourselves.</source>
          <target state="translated">現時点では、 &lt;code&gt;cargo new&lt;/code&gt; によって生成されたプログラムは、指定した引数を処理できません。&lt;a href=&quot;https://crates.io/&quot;&gt;crates.ioの&lt;/a&gt;一部の既存のライブラリは、コマンドライン引数を受け入れるプログラムの作成に役立ちますが、この概念を学習しているだけなので、この機能を自分で実装してみましょう。</target>
        </trans-unit>
        <trans-unit id="7b9dbd2a05c55e3ec29e51c514e9c4050f82aedb" translate="yes" xml:space="preserve">
          <source>Right now, the server will process each request in turn, meaning it won&amp;rsquo;t process a second connection until the first is finished processing. If the server received more and more requests, this serial execution would be less and less optimal. If the server receives a request that takes a long time to process, subsequent requests will have to wait until the long request is finished, even if the new requests can be processed quickly. We&amp;rsquo;ll need to fix this, but first, we&amp;rsquo;ll look at the problem in action.</source>
          <target state="translated">現在、サーバーは各要求を順番に処理します。つまり、最初の処理が完了するまで、2番目の接続は処理されません。サーバーがますます多くのリクエストを受信する場合、このシリアル実行はますます最適ではなくなります。サーバーが処理に長い時間がかかる要求を受け取った場合、新しい要求をすばやく処理できる場合でも、後続の要求は長い要求が終了するまで待機する必要があります。これを修正する必要がありますが、最初に、動作中の問題を確認します。</target>
        </trans-unit>
        <trans-unit id="c480af39db009c0318ae7e74d0323b0c502a0fd5" translate="yes" xml:space="preserve">
          <source>Right-exclusive range literal</source>
          <target state="translated">右専用範囲リテラル</target>
        </trans-unit>
        <trans-unit id="59325f597d1c37aeeec754c26100e96a2e30be66" translate="yes" xml:space="preserve">
          <source>Right-inclusive range literal</source>
          <target state="translated">右包含範囲リテラル</target>
        </trans-unit>
        <trans-unit id="9b48ae49c811eaa74c51d9a2c4444bab2f4e6c28" translate="yes" xml:space="preserve">
          <source>Right-shift</source>
          <target state="translated">Right-shift</target>
        </trans-unit>
        <trans-unit id="f367c94b8369cb645d39410fa6aec58a35c66b87" translate="yes" xml:space="preserve">
          <source>Right-shift and assignment</source>
          <target state="translated">右シフトと割り当て</target>
        </trans-unit>
        <trans-unit id="87ab4fb697063b10dcdc96979db348b5d934b10e" translate="yes" xml:space="preserve">
          <source>Rotate a subslice:</source>
          <target state="translated">サブスライスを回転させます。</target>
        </trans-unit>
        <trans-unit id="e2e2300fcc3d5d8ec414a7eaacdbbcb51bb451c4" translate="yes" xml:space="preserve">
          <source>Rotates &lt;code&gt;len() - k&lt;/code&gt; places to the left.</source>
          <target state="translated">&lt;code&gt;len() - k&lt;/code&gt; 桁左に回転します。</target>
        </trans-unit>
        <trans-unit id="ce3f746edcfb3b9e0b1137f1b27b633f9dbc1e06" translate="yes" xml:space="preserve">
          <source>Rotates &lt;code&gt;len() - mid&lt;/code&gt; places to the right.</source>
          <target state="translated">&lt;code&gt;len() - mid&lt;/code&gt; 回転します-中央の場所を右に。</target>
        </trans-unit>
        <trans-unit id="96b03b8904b0a15cce1085562454a38f8c416656" translate="yes" xml:space="preserve">
          <source>Rotates item &lt;code&gt;mid&lt;/code&gt; into the first position.</source>
          <target state="translated">アイテムを最初の位置 &lt;code&gt;mid&lt;/code&gt; 回転させます。</target>
        </trans-unit>
        <trans-unit id="435514cee1befe7c5f78629addaceeb41d851af0" translate="yes" xml:space="preserve">
          <source>Rotates the double-ended queue &lt;code&gt;k&lt;/code&gt; places to the right.</source>
          <target state="translated">両端キューを &lt;code&gt;k&lt;/code&gt; 桁右に回転します。</target>
        </trans-unit>
        <trans-unit id="f6e0de855ccd5f7c0b8c806d3b9f3e85016db057" translate="yes" xml:space="preserve">
          <source>Rotates the double-ended queue &lt;code&gt;mid&lt;/code&gt; places to the left.</source>
          <target state="translated">両端キューを &lt;code&gt;mid&lt;/code&gt; 位置で左に回転します。</target>
        </trans-unit>
        <trans-unit id="a3eb1eddf6dbbb2384431fa9dbaf6f2680d9416d" translate="yes" xml:space="preserve">
          <source>Rotates the first item into position &lt;code&gt;k&lt;/code&gt;.</source>
          <target state="translated">最初のアイテムを位置 &lt;code&gt;k&lt;/code&gt; に回転します。</target>
        </trans-unit>
        <trans-unit id="1ed009359b30c6f889c504f86a394c588c0f7b7a" translate="yes" xml:space="preserve">
          <source>Rotates the slice in-place such that the first &lt;code&gt;mid&lt;/code&gt; elements of the slice move to the end while the last &lt;code&gt;self.len() - mid&lt;/code&gt; elements move to the front. After calling &lt;code&gt;rotate_left&lt;/code&gt;, the element previously at index &lt;code&gt;mid&lt;/code&gt; will become the first element in the slice.</source>
          <target state="translated">最後の &lt;code&gt;self.len() - mid&lt;/code&gt; 要素が前に移動する間、スライスの最初の &lt;code&gt;mid&lt;/code&gt; 要素が最後に移動するようにスライスをインプレースで回転します。 &lt;code&gt;rotate_left&lt;/code&gt; を呼び出した後、以前にインデックス &lt;code&gt;mid&lt;/code&gt; にあった要素がスライスの最初の要素になります。</target>
        </trans-unit>
        <trans-unit id="04b7ac171ea5b32f47f9900517a2fadf3a9c0d83" translate="yes" xml:space="preserve">
          <source>Rotates the slice in-place such that the first &lt;code&gt;self.len() - k&lt;/code&gt; elements of the slice move to the end while the last &lt;code&gt;k&lt;/code&gt; elements move to the front. After calling &lt;code&gt;rotate_right&lt;/code&gt;, the element previously at index &lt;code&gt;self.len() - k&lt;/code&gt; will become the first element in the slice.</source>
          <target state="translated">スライスをインプレースで回転し、スライスの最初の &lt;code&gt;self.len() - k&lt;/code&gt; 要素が最後に移動し、最後の &lt;code&gt;k&lt;/code&gt; 要素が手前に移動するようにします。 &lt;code&gt;rotate_right&lt;/code&gt; を呼び出した後、以前にインデックス &lt;code&gt;self.len() - k&lt;/code&gt; にあった要素がスライスの最初の要素になります。</target>
        </trans-unit>
        <trans-unit id="5c601ca5828939fb30e1667600554d785890002f" translate="yes" xml:space="preserve">
          <source>Rotating a subslice:</source>
          <target state="translated">サブスライスを回転させる。</target>
        </trans-unit>
        <trans-unit id="4e37bfdd52117be2c062494638d3e5c44c84094a" translate="yes" xml:space="preserve">
          <source>Round up the current size to the nearest multiple of the next field's &lt;a href=&quot;fn.align_of&quot;&gt;alignment&lt;/a&gt;.</source>
          <target state="translated">現在のサイズを次のフィールドの&lt;a href=&quot;fn.align_of&quot;&gt;配置の&lt;/a&gt;最も近い倍数に切り上げます。</target>
        </trans-unit>
        <trans-unit id="50e5426091a53777b8711a517e2b93745535294e" translate="yes" xml:space="preserve">
          <source>Rounds toward zero and converts to any primitive integer type, assuming that the value is finite and fits in that type.</source>
          <target state="translated">ゼロに向かってラウンドし、値が有限でその型に収まると仮定して、任意のプリミティブ整数型に変換します。</target>
        </trans-unit>
        <trans-unit id="58cf18a9ecd627eed5f1c04bd8628968731bb80a" translate="yes" xml:space="preserve">
          <source>Ruby: &lt;strike&gt;block syntax&lt;/strike&gt;</source>
          <target state="translated">Ruby：&lt;strike&gt;ブロック構文&lt;/strike&gt;</target>
        </trans-unit>
        <trans-unit id="ecf5f644a238902f7f393f69b82ea575cf5c3b7f" translate="yes" xml:space="preserve">
          <source>Ruby: closure syntax, &lt;strike&gt;block syntax&lt;/strike&gt;</source>
          <target state="translated">Ruby: closure syntax, &lt;strike&gt;block syntax&lt;/strike&gt;</target>
        </trans-unit>
        <trans-unit id="0b36b4e006f637aa6590232050c05151c7ad67ec" translate="yes" xml:space="preserve">
          <source>Run the &lt;code&gt;cargo publish&lt;/code&gt; command again. It should succeed now:</source>
          <target state="translated">&lt;code&gt;cargo publish&lt;/code&gt; コマンドを再度実行します。今は成功するはずです：</target>
        </trans-unit>
        <trans-unit id="923b0697706f694d4ca0d13f16f9a1afd423c9a4" translate="yes" xml:space="preserve">
          <source>Run the code with this change. Drat! We still get an error:</source>
          <target state="translated">この変更をしてコードを実行してください。畜生! まだエラーが出ます</target>
        </trans-unit>
        <trans-unit id="3f16915758c73edf89a7ea497581557bcdd0d1f8" translate="yes" xml:space="preserve">
          <source>Run the code you want to test.</source>
          <target state="translated">テストしたいコードを実行します。</target>
        </trans-unit>
        <trans-unit id="e196a338a67e0d1bafa6837b0b8c2270766eed56" translate="yes" xml:space="preserve">
          <source>Run the program again, and look at the output:</source>
          <target state="translated">もう一度プログラムを実行して、出力を見ます。</target>
        </trans-unit>
        <trans-unit id="fab2784a99af076ad38bcd6561c56938260806b6" translate="yes" xml:space="preserve">
          <source>Run the tests again using &lt;code&gt;cargo test&lt;/code&gt;. The output should look like Listing 11-4, which shows that our &lt;code&gt;exploration&lt;/code&gt; test passed and &lt;code&gt;another&lt;/code&gt; failed.</source>
          <target state="translated">&lt;code&gt;cargo test&lt;/code&gt; を使用してテストを再度実行します。出力はリスト11-4のようになります。これは、 &lt;code&gt;exploration&lt;/code&gt; テストが成功し、 &lt;code&gt;another&lt;/code&gt; テストが失敗したことを示しています。</target>
        </trans-unit>
        <trans-unit id="d0d45a5d41408cca9fc6eeaa7d959b93e0fc34a3" translate="yes" xml:space="preserve">
          <source>Run the tests again:</source>
          <target state="translated">もう一度テストを実行してください。</target>
        </trans-unit>
        <trans-unit id="513c6246dbce19675f37c27f2bbb4ac8a4d4b4e2" translate="yes" xml:space="preserve">
          <source>Run this code now and request &lt;em&gt;127.0.0.1:7878&lt;/em&gt;; you should get the HTML in &lt;em&gt;hello.html&lt;/em&gt;. If you make any other request, such as &lt;em&gt;127.0.0.1:7878/something-else&lt;/em&gt;, you&amp;rsquo;ll get a connection error like those you saw when running the code in Listing 20-1 and Listing 20-2.</source>
          <target state="translated">ここでこのコードを実行し、&lt;em&gt;127.0.0.1&lt;/em&gt;：&lt;em&gt;7878&lt;/em&gt;を要求します。HTMLを&lt;em&gt;hello.htmlで&lt;/em&gt;取得する必要があります。&lt;em&gt;127.0.0.1:7878/something-else&lt;/em&gt;などの他のリクエストを行うと、リスト20-1とリスト20-2のコードを実行したときに見たような接続エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="e35c6b16535d8da5f5670a5eab95ccaf77d4012a" translate="yes" xml:space="preserve">
          <source>Run this code with &lt;code&gt;cargo run&lt;/code&gt; and load &lt;em&gt;127.0.0.1:7878&lt;/em&gt; in your browser; you should see your HTML rendered!</source>
          <target state="translated">で、このコードを実行し &lt;code&gt;cargo run&lt;/code&gt; と負荷&lt;em&gt;127.0.0.1:7878&lt;/em&gt;ブラウザで。HTMLが表示されるはずです！</target>
        </trans-unit>
        <trans-unit id="23437fed19097bdfdfbe0b8267f38604c310de83" translate="yes" xml:space="preserve">
          <source>Run this test with the &lt;code&gt;Cacher&lt;/code&gt; implementation in Listing 13-9 and Listing 13-10, and the test will fail on the &lt;code&gt;assert_eq!&lt;/code&gt; with this message:</source>
          <target state="translated">で、このテストを実行します &lt;code&gt;Cacher&lt;/code&gt; 13-9とリスト13-10のリストの実装、およびテストが上で失敗します &lt;code&gt;assert_eq!&lt;/code&gt; このメッセージで：</target>
        </trans-unit>
        <trans-unit id="d3d8bf74c1c629197f4536b35815a9f7a259419d" translate="yes" xml:space="preserve">
          <source>Running &lt;code&gt;cargo clippy&lt;/code&gt; on this project results in this error:</source>
          <target state="translated">このプロジェクトで &lt;code&gt;cargo clippy&lt;/code&gt; を実行すると、次のエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="f395b53628f20c5c4b3bbd548137966e23fc9dab" translate="yes" xml:space="preserve">
          <source>Running Code on Cleanup with the &lt;code id=&quot;running-code-on-cleanup-with-the-drop-trait&quot;&gt;Drop&lt;/code&gt; Trait</source>
          <target state="translated">&lt;code id=&quot;running-code-on-cleanup-with-the-drop-trait&quot;&gt;Drop&lt;/code&gt; Traitを使用したクリーンアップでのコードの実行</target>
        </trans-unit>
        <trans-unit id="564030da0f34d36e19aa75d7720530ab88c94b03" translate="yes" xml:space="preserve">
          <source>Running Single Tests</source>
          <target state="translated">シングルテストの実行</target>
        </trans-unit>
        <trans-unit id="e69e378bddb35dc41b1601835b2e69f3cbc1a82e" translate="yes" xml:space="preserve">
          <source>Running Tests in Parallel or Consecutively</source>
          <target state="translated">並列または連続してテストを実行する</target>
        </trans-unit>
        <trans-unit id="1e1d8cbafc2cddc28df09bc7a99cf83551dd23e4" translate="yes" xml:space="preserve">
          <source>Running a Subset of Tests by Name</source>
          <target state="translated">テストのサブセットを名前で実行する</target>
        </trans-unit>
        <trans-unit id="103fa497687d08956605ccfefaf1c40f881c8239" translate="yes" xml:space="preserve">
          <source>Running the code in Listing 8-25 will print &lt;code&gt;{&quot;Yellow&quot;: 50, &quot;Blue&quot;: 10}&lt;/code&gt;. The first call to &lt;code&gt;entry&lt;/code&gt; will insert the key for the Yellow team with the value 50 because the Yellow team doesn&amp;rsquo;t have a value already. The second call to &lt;code&gt;entry&lt;/code&gt; will not change the hash map because the Blue team already has the value 10.</source>
          <target state="translated">リスト8-25のコードを実行すると、 &lt;code&gt;{&quot;Yellow&quot;: 50, &quot;Blue&quot;: 10}&lt;/code&gt; ます。 &lt;code&gt;entry&lt;/code&gt; の最初の呼び出しは、黄色のチームがまだ値を持っていないため、値50の黄色のチームのキーを挿入します。 &lt;code&gt;entry&lt;/code&gt; の2回目の呼び出しではハッシュマップは変更されません。これは、Blueチームがすでに値10を持っているためです。</target>
        </trans-unit>
        <trans-unit id="1c9add0452877e9f24dc2bf7d578c6ed2f3e1d8b" translate="yes" xml:space="preserve">
          <source>Running the tests now produces the following:</source>
          <target state="translated">テストを実行すると以下のようになります。</target>
        </trans-unit>
        <trans-unit id="f25b19c8b9c8cd64ad4a2e8f5f7c3c28f70fa2a3" translate="yes" xml:space="preserve">
          <source>Running this code prints the following:</source>
          <target state="translated">このコードを実行すると、以下のように表示されます。</target>
        </trans-unit>
        <trans-unit id="1e3c357826826fa11f1cba26866e53be103107ea" translate="yes" xml:space="preserve">
          <source>Running this code using &lt;code&gt;cargo run&lt;/code&gt; produces the following result:</source>
          <target state="translated">カーゴランを使用してこのコードを &lt;code&gt;cargo run&lt;/code&gt; すると、次の結果が生成されます。</target>
        </trans-unit>
        <trans-unit id="c569a779f618ce9a2967d5affac56fe27ca64ca3" translate="yes" xml:space="preserve">
          <source>Running this code will print &lt;code&gt;*waving arms furiously*&lt;/code&gt;, showing that Rust called the &lt;code&gt;fly&lt;/code&gt; method implemented on &lt;code&gt;Human&lt;/code&gt; directly.</source>
          <target state="translated">このコードを実行すると &lt;code&gt;*waving arms furiously*&lt;/code&gt; と表示され、Rust が &lt;code&gt;Human&lt;/code&gt; に直接実装された &lt;code&gt;fly&lt;/code&gt; メソッドを呼び出したことを示します。</target>
        </trans-unit>
        <trans-unit id="050611088b4215f09f3ddc0798cae6177d1f772f" translate="yes" xml:space="preserve">
          <source>Running this code will print &lt;code&gt;The value of x is: 6&lt;/code&gt;. But if we place a semicolon at the end of the line containing &lt;code&gt;x + 1&lt;/code&gt;, changing it from an expression to a statement, we&amp;rsquo;ll get an error.</source>
          <target state="translated">このコードを実行すると &lt;code&gt;The value of x is: 6&lt;/code&gt; ます。ただし、 &lt;code&gt;x + 1&lt;/code&gt; を含む行の最後にセミコロンを配置して、式からステートメントに変更すると、エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="0cf90b9dd90262dc86c7e18ab1cd2e79c2411dea" translate="yes" xml:space="preserve">
          <source>Running this code will print &lt;code&gt;number was something other than zero&lt;/code&gt;.</source>
          <target state="translated">このコードを実行すると &lt;code&gt;number was something other than zero&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d3da00eed1960155f07dbe554383fc0ea4f0b115" translate="yes" xml:space="preserve">
          <source>Running this code will print the following:</source>
          <target state="translated">このコードを実行すると、以下のように表示されます。</target>
        </trans-unit>
        <trans-unit id="e4fcdd04ec6ff3e0b0277e41acfba1bf839f5a18" translate="yes" xml:space="preserve">
          <source>Running this command reformats all the Rust code in the current crate. This should only change the code style, not the code semantics. For more information on &lt;code&gt;rustfmt&lt;/code&gt;, see &lt;a href=&quot;https://github.com/rust-lang/rustfmt&quot;&gt;its documentation&lt;/a&gt;.</source>
          <target state="translated">このコマンドを実行すると、現在のクレート内のすべてのRustコードが再フォーマットされます。これにより、コードのセマンティクスではなく、コードスタイルのみが変更されます。詳細については &lt;code&gt;rustfmt&lt;/code&gt; 、参照&lt;a href=&quot;https://github.com/rust-lang/rustfmt&quot;&gt;マニュアルの&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="7d1170a5c907c3d621f9e3318eb8f67085d5957f" translate="yes" xml:space="preserve">
          <source>Running this test produces the following:</source>
          <target state="translated">このテストを実行すると、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="c4740e4ca28c9c8d6a8447aef5c33425e6de4802" translate="yes" xml:space="preserve">
          <source>Runtime</source>
          <target state="translated">Runtime</target>
        </trans-unit>
        <trans-unit id="5359eea6ab0e87db9479836bb9761e7ad6a157fe" translate="yes" xml:space="preserve">
          <source>Runtime characteristics</source>
          <target state="translated">ランタイム特性</target>
        </trans-unit>
        <trans-unit id="581d4fec52b7eb5bd873dc892c1ee2b7004ec350" translate="yes" xml:space="preserve">
          <source>Runtime checks are present to ensure there is only one nul byte in the &lt;a href=&quot;../vec/struct.vec&quot;&gt;&lt;code&gt;Vec&lt;/code&gt;&lt;/a&gt;, its last element.</source>
          <target state="translated">Runtime checks are present to ensure there is only one nul byte in the &lt;a href=&quot;../vec/struct.vec&quot;&gt; &lt;code&gt;Vec&lt;/code&gt; &lt;/a&gt;, its last element.</target>
        </trans-unit>
        <trans-unit id="e2ae20d9ae7fcacb605c03c198e0a1c51d446f50" translate="yes" xml:space="preserve">
          <source>Rust</source>
          <target state="translated">Rust</target>
        </trans-unit>
        <trans-unit id="1fc5c6604c5a3ad4a813390059fa989765293b6c" translate="yes" xml:space="preserve">
          <source>Rust 2015 does not permit the use of &lt;code&gt;async fn&lt;/code&gt;.</source>
          <target state="translated">Rust 2015では、 &lt;code&gt;async fn&lt;/code&gt; の使用は許可されていません。</target>
        </trans-unit>
        <trans-unit id="a577c02cc01ad8b1a35ad9c0d2cad0f98a6cf0b5" translate="yes" xml:space="preserve">
          <source>Rust &lt;em&gt;does&lt;/em&gt; include functionality to print out debugging information, but we have to explicitly opt in to make that functionality available for our struct. To do that, we add the annotation &lt;code&gt;#[derive(Debug)]&lt;/code&gt; just before the struct definition, as shown in Listing 5-12.</source>
          <target state="translated">Rustに&lt;em&gt;は&lt;/em&gt;デバッグ情報を出力する機能&lt;em&gt;が&lt;/em&gt;含まれていますが、その機能を構造体で使用できるように明示的にオプトインする必要があります。これを行うには、リスト5-12に示すように、構造体定義の直前に注釈 &lt;code&gt;#[derive(Debug)]&lt;/code&gt; を追加します。</target>
        </trans-unit>
        <trans-unit id="2c33a40099b2ccd85bf32fbbe3e68ef69581fe7f" translate="yes" xml:space="preserve">
          <source>Rust &lt;em&gt;infers&lt;/em&gt; how to capture &lt;code&gt;v&lt;/code&gt;, and because &lt;code&gt;println!&lt;/code&gt; only needs a reference to &lt;code&gt;v&lt;/code&gt;, the closure tries to borrow &lt;code&gt;v&lt;/code&gt;. However, there&amp;rsquo;s a problem: Rust can&amp;rsquo;t tell how long the spawned thread will run, so it doesn&amp;rsquo;t know if the reference to &lt;code&gt;v&lt;/code&gt; will always be valid.</source>
          <target state="translated">錆&lt;em&gt;推論&lt;/em&gt;キャプチャする方法 &lt;code&gt;v&lt;/code&gt; 、そして理由 &lt;code&gt;println!&lt;/code&gt; &lt;code&gt;v&lt;/code&gt; への参照のみが必要で、クロージャーは &lt;code&gt;v&lt;/code&gt; を借りようとします。ただし、問題があります。Rustは、生成されたスレッドが実行される時間を認識できないため、 &lt;code&gt;v&lt;/code&gt; への参照が常に有効かどうかがわかりません。</target>
        </trans-unit>
        <trans-unit id="a0209ede66a299d6f835fa4fdb4f3764cda36010" translate="yes" xml:space="preserve">
          <source>Rust Compiler Error Index</source>
          <target state="translated">Rust コンパイラエラーインデックス</target>
        </trans-unit>
        <trans-unit id="e86e2f7e2be516ce0300d8b3591468341035e99b" translate="yes" xml:space="preserve">
          <source>Rust Documentation</source>
          <target state="translated">Rust ドキュメント</target>
        </trans-unit>
        <trans-unit id="bdda1ab5e01f657b125db05f2df30c737c186ccb" translate="yes" xml:space="preserve">
          <source>Rust accomplishes this by performing monomorphization of the code that is using generics at compile time. &lt;em&gt;Monomorphization&lt;/em&gt; is the process of turning generic code into specific code by filling in the concrete types that are used when compiled.</source>
          <target state="translated">Rustは、コンパイル時にジェネリックを使用しているコードのモノモーフィゼーションを実行することでこれを実現します。&lt;em&gt;モノモーフィゼーション&lt;/em&gt;は、コンパイル時に使用される具象型を入力することにより、汎用コードを特定のコードに変換するプロセスです。</target>
        </trans-unit>
        <trans-unit id="effe1b768c4ce9dd07e450e0add6036006e9bc1f" translate="yes" xml:space="preserve">
          <source>Rust actually makes it somewhat difficult to produce this loop in the first place. In order to end up with two values that point at each other, one of them needs to be mutable. This is difficult because &lt;a href=&quot;struct.rc&quot;&gt;&lt;code&gt;Rc&lt;/code&gt;&lt;/a&gt; enforces memory safety by only giving out shared references to the value it wraps, and these don't allow direct mutation. We need to wrap the part of the value we wish to mutate in a &lt;a href=&quot;../cell/struct.refcell&quot;&gt;&lt;code&gt;RefCell&lt;/code&gt;&lt;/a&gt;, which provides &lt;em&gt;interior mutability&lt;/em&gt;: a method to achieve mutability through a shared reference. &lt;a href=&quot;../cell/struct.refcell&quot;&gt;&lt;code&gt;RefCell&lt;/code&gt;&lt;/a&gt; enforces Rust's borrowing rules at runtime.</source>
          <target state="translated">Rustは、最初からこのループを生成するのをやや難しくしています。相互を指す2つの値で終わるためには、それらの1つが変更可能である必要があります。&lt;a href=&quot;struct.rc&quot;&gt; &lt;code&gt;Rc&lt;/code&gt; &lt;/a&gt;はラップする値への共有参照のみを与えることでメモリの安全性を強化し、これらは直接の変更を許可しないため、これは困難です。変更したい値の一部を&lt;a href=&quot;../cell/struct.refcell&quot;&gt; &lt;code&gt;RefCell&lt;/code&gt; &lt;/a&gt;でラップする必要があります。これは、&lt;em&gt;内部の&lt;/em&gt;可変性を提供します。これは、共有参照を通じて可変性を実現するためのメソッドです。&lt;a href=&quot;../cell/struct.refcell&quot;&gt; &lt;code&gt;RefCell&lt;/code&gt; は&lt;/a&gt;、実行時にRustの借用ルールを適用します。</target>
        </trans-unit>
        <trans-unit id="ae0d2b578d61b694ca8792ea668e7a392f999440" translate="yes" xml:space="preserve">
          <source>Rust allows publicly re-exporting items through a &lt;code&gt;pub use&lt;/code&gt; directive. Because this is a public directive, this allows the item to be used in the current module through the rules above. It essentially allows public access into the re-exported item. For example, this program is valid:</source>
          <target state="translated">Rustでは、 &lt;code&gt;pub use&lt;/code&gt; ディレクティブを使用して、アイテムを公に再エクスポートできます。これはパブリックディレクティブであるため、上記のルールを使用して、アイテムを現在のモジュールで使用できます。本質的に、再エクスポートされたアイテムへのパブリックアクセスを許可します。たとえば、次のプログラムは有効です。</target>
        </trans-unit>
        <trans-unit id="4985d4ad4c4fe1e9dd624f9f2f34b2f73c6ed42b" translate="yes" xml:space="preserve">
          <source>Rust also brings contemporary developer tools to the systems programming world:</source>
          <target state="translated">Rustはまた、システムプログラミングの世界に現代的な開発者ツールをもたらします。</target>
        </trans-unit>
        <trans-unit id="5dd2b7d9e5548848e20c79e786ff2b0d3869e782" translate="yes" xml:space="preserve">
          <source>Rust also has a pattern we can use when we don&amp;rsquo;t want to list all possible values. For example, a &lt;code&gt;u8&lt;/code&gt; can have valid values of 0 through 255. If we only care about the values 1, 3, 5, and 7, we don&amp;rsquo;t want to have to list out 0, 2, 4, 6, 8, 9 all the way up to 255. Fortunately, we don&amp;rsquo;t have to: we can use the special pattern &lt;code&gt;_&lt;/code&gt; instead:</source>
          <target state="translated">Rustには、考えられるすべての値をリストしたくない場合に使用できるパターンもあります。たとえば、 &lt;code&gt;u8&lt;/code&gt; は0〜255の有効な値を持つことができます。値1、3、5、および7のみを考慮する場合、0、2、4、6、8をリストする必要はありません。 9から255まで。幸いなことに、私たちは特別なパターン &lt;code&gt;_&lt;/code&gt; を代わりに使うことができます：</target>
        </trans-unit>
        <trans-unit id="e19038a4b8947e67e71fb4a5db45a42bb503b2ee" translate="yes" xml:space="preserve">
          <source>Rust also has another kind of comment, documentation comments, which we&amp;rsquo;ll discuss in the &amp;ldquo;Publishing a Crate to Crates.io&amp;rdquo; section of Chapter 14.</source>
          <target state="translated">Rustには、ドキュメントコメントという別の種類のコメントもあります。これについては、第14章の「クレートをCrates.ioに公開する」セクションで説明します。</target>
        </trans-unit>
        <trans-unit id="bbdbd64aac3d17c7509c8b7d6b785d5bd17d6f9e" translate="yes" xml:space="preserve">
          <source>Rust also has two primitive types for &lt;em&gt;floating-point numbers&lt;/em&gt;, which are numbers with decimal points. Rust&amp;rsquo;s floating-point types are &lt;code&gt;f32&lt;/code&gt; and &lt;code&gt;f64&lt;/code&gt;, which are 32 bits and 64 bits in size, respectively. The default type is &lt;code&gt;f64&lt;/code&gt; because on modern CPUs it&amp;rsquo;s roughly the same speed as &lt;code&gt;f32&lt;/code&gt; but is capable of more precision.</source>
          <target state="translated">Rustには、&lt;em&gt;浮動小数点数の&lt;/em&gt; 2つのプリミティブ型もあり&lt;em&gt;ます&lt;/em&gt;。これらは小数点付きの数値です。Rustの浮動小数点型は &lt;code&gt;f32&lt;/code&gt; と &lt;code&gt;f64&lt;/code&gt; で、それぞれ32ビットと64ビットのサイズです。最近のCPUでは &lt;code&gt;f32&lt;/code&gt; とほぼ同じ速度ですが、より高い精度が可能なため、デフォルトのタイプは &lt;code&gt;f64&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="29c1f1ea8c701993d0c6c3c7c3f0fda1a6673205" translate="yes" xml:space="preserve">
          <source>Rust and Cargo have features that help make your published package easier for people to use and to find in the first place. We&amp;rsquo;ll talk about some of these features next and then explain how to publish a package.</source>
          <target state="translated">RustとCargoには、公開されたパッケージを人々が使いやすく、そもそも見つけやすくする機能があります。次に、これらの機能のいくつかについて説明し、次にパッケージを公開する方法を説明します。</target>
        </trans-unit>
        <trans-unit id="7f3133698a0220ad7c68f52e85cdd6fbb05996b0" translate="yes" xml:space="preserve">
          <source>Rust attempts to mitigate the negative effects of using threads, but programming in a multithreaded context still takes careful thought and requires a code structure that is different from that in programs running in a single thread.</source>
          <target state="translated">Rust はスレッドを使用することによる悪影響を軽減しようとしていますが、マルチスレッドのコンテキストでのプログラミングには慎重な検討が必要で、シングルスレッドで実行されるプログラムとは異なるコード構造が必要です。</target>
        </trans-unit>
        <trans-unit id="c689ed78369011848abbd3ac8af6ba4c0ea496a6" translate="yes" xml:space="preserve">
          <source>Rust automatically called &lt;code&gt;drop&lt;/code&gt; for us when our instances went out of scope, calling the code we specified. Variables are dropped in the reverse order of their creation, so &lt;code&gt;d&lt;/code&gt; was dropped before &lt;code&gt;c&lt;/code&gt;. This example gives you a visual guide to how the &lt;code&gt;drop&lt;/code&gt; method works; usually you would specify the cleanup code that your type needs to run rather than a print message.</source>
          <target state="translated">Rustは、インスタンスがスコープ外に出ると自動的に &lt;code&gt;drop&lt;/code&gt; を呼び出し、指定したコードを呼び出しました。変数は作成時と逆の順序で削除されるため、 &lt;code&gt;d&lt;/code&gt; は &lt;code&gt;c&lt;/code&gt; の前に削除されました。この例は、 &lt;code&gt;drop&lt;/code&gt; メソッドがどのように機能するかを視覚的に示しています。通常は、印刷メッセージではなく、タイプで実行する必要があるクリーンアップコードを指定します。</target>
        </trans-unit>
        <trans-unit id="cb4fa52344abf16e13622ef8bb3c3893fe286a01" translate="yes" xml:space="preserve">
          <source>Rust breaks down these barriers by eliminating the old pitfalls and providing a friendly, polished set of tools to help you along the way. Programmers who need to &amp;ldquo;dip down&amp;rdquo; into lower-level control can do so with Rust, without taking on the customary risk of crashes or security holes, and without having to learn the fine points of a fickle toolchain. Better yet, the language is designed to guide you naturally towards reliable code that is efficient in terms of speed and memory usage.</source>
          <target state="translated">Rustは、古い落とし穴をなくし、友好的で洗練された一連のツールを提供することで、これらの障壁を取り除きます。下位レベルの制御に「浸る」必要があるプログラマは、クラッシュやセキュリティホールの通常のリスクを負うことなく、また気まぐれなツールチェーンの細かい点を学ぶ必要なく、Rustを使用してこれを行うことができます。さらに良いことに、この言語は、速度とメモリ使用量の点で効率的な信頼できるコードに自然に導くように設計されています。</target>
        </trans-unit>
        <trans-unit id="cdaf4a6bf131d48ffa2af0a612ccc9c24734bcff" translate="yes" xml:space="preserve">
          <source>Rust can tell that &lt;code&gt;c&lt;/code&gt; is within the first pattern&amp;rsquo;s range and prints &lt;code&gt;early ASCII letter&lt;/code&gt;.</source>
          <target state="translated">Rustは、 &lt;code&gt;c&lt;/code&gt; が最初のパターンの範囲内にあることを認識し、 &lt;code&gt;early ASCII letter&lt;/code&gt; を出力します。</target>
        </trans-unit>
        <trans-unit id="f0aa4b6eb356ff042802f189c6b9ce9b6d9bb7f5" translate="yes" xml:space="preserve">
          <source>Rust can&amp;rsquo;t figure out how much space to allocate for recursively defined types, so the compiler gives the error in Listing 15-4. But the error does include this helpful suggestion:</source>
          <target state="translated">Rustは再帰的に定義された型に割り当てるスペースの量を把握できないため、コンパイラーはリスト15-4のエラーを出します。しかし、エラーにはこの役立つ提案が含まれています。</target>
        </trans-unit>
        <trans-unit id="9cb61601ebccc0f0be25f7b4aa2fa6eed3577955" translate="yes" xml:space="preserve">
          <source>Rust can&amp;rsquo;t possibly know which of the two arguments we need, so we need to tell it. Because &lt;code&gt;contents&lt;/code&gt; is the argument that contains all of our text and we want to return the parts of that text that match, we know &lt;code&gt;contents&lt;/code&gt; is the argument that should be connected to the return value using the lifetime syntax.</source>
          <target state="translated">Rustは必要な2つの引数のどちらかを知ることができないため、それを伝える必要があります。ので &lt;code&gt;contents&lt;/code&gt; 一致し、我々が知っていることを、私たちのすべてのテキストが含まれている引数であり、我々はそのテキストの一部を返したい &lt;code&gt;contents&lt;/code&gt; 生涯の構文を使用して、戻り値に接続する必要が引数です。</target>
        </trans-unit>
        <trans-unit id="51a6c6ddffe8c70b5e18c5cd678688a6e33bff5b" translate="yes" xml:space="preserve">
          <source>Rust chose to have the module system function this way so that hiding inner implementation details is the default. That way, you know which parts of the inner code you can change without breaking outer code. But you can expose inner parts of child modules code to outer ancestor modules by using the &lt;code&gt;pub&lt;/code&gt; keyword to make an item public.</source>
          <target state="translated">Rustは、モジュールシステムをこのように機能させることを選択したため、内部実装の詳細を非表示にすることがデフォルトです。これにより、外部コードを壊すことなく、内部コードのどの部分を変更できるかがわかります。ただし、 &lt;code&gt;pub&lt;/code&gt; キーワードを使用してアイテムをパブリックにすることで、子モジュールコードの内部を外部の祖先モジュールに公開できます。</target>
        </trans-unit>
        <trans-unit id="b4ffd6d9ef1384aeb9bcafe5fc321bee1c46b8a9" translate="yes" xml:space="preserve">
          <source>Rust chose to have the module system function this way so that hiding inner implementation details is the default. That way, you know which parts of the inner code you can change without breaking outer code. But you can expose inner parts of child modules' code to outer ancestor modules by using the &lt;code&gt;pub&lt;/code&gt; keyword to make an item public.</source>
          <target state="translated">Rust chose to have the module system function this way so that hiding inner implementation details is the default. That way, you know which parts of the inner code you can change without breaking outer code. But you can expose inner parts of child modules' code to outer ancestor modules by using the &lt;code&gt;pub&lt;/code&gt; keyword to make an item public.</target>
        </trans-unit>
        <trans-unit id="aed85801e6aa03885ea34ff196d1f5d07d63ebd2" translate="yes" xml:space="preserve">
          <source>Rust code is incorrect if it exhibits any of the behaviors in the following list. This includes code within &lt;code&gt;unsafe&lt;/code&gt; blocks and &lt;code&gt;unsafe&lt;/code&gt; functions. &lt;code&gt;unsafe&lt;/code&gt; only means that avoiding undefined behavior is on the programmer; it does not change anything about the fact that Rust programs must never cause undefined behavior.</source>
          <target state="translated">Rust code is incorrect if it exhibits any of the behaviors in the following list. This includes code within &lt;code&gt;unsafe&lt;/code&gt; blocks and &lt;code&gt;unsafe&lt;/code&gt; functions. &lt;code&gt;unsafe&lt;/code&gt; only means that avoiding undefined behavior is on the programmer; it does not change anything about the fact that Rust programs must never cause undefined behavior.</target>
        </trans-unit>
        <trans-unit id="e084b33e4de65ea0dae7e0617381c6117a4a157d" translate="yes" xml:space="preserve">
          <source>Rust code uses &lt;em&gt;snake case&lt;/em&gt; as the conventional style for function and variable names. In snake case, all letters are lowercase and underscores separate words. Here&amp;rsquo;s a program that contains an example function definition:</source>
          <target state="translated">Rustコードでは、関数名と変数名の従来のスタイルとして&lt;em&gt;スネークケース&lt;/em&gt;を使用しています。ヘビの場合、すべての文字は小文字で、下線は別個の単語です。次に、関数定義の例を含むプログラムを示します。</target>
        </trans-unit>
        <trans-unit id="e2a256ae150c413740aa7cd085658b2d9a62fbaa" translate="yes" xml:space="preserve">
          <source>Rust code, including within &lt;code&gt;unsafe&lt;/code&gt; blocks and &lt;code&gt;unsafe&lt;/code&gt; functions is incorrect if it exhibits any of the behaviors in the following list. It is the programmer's responsibility when writing &lt;code&gt;unsafe&lt;/code&gt; code that it is not possible to let &lt;code&gt;safe&lt;/code&gt; code exhibit these behaviors.</source>
          <target state="translated">&lt;code&gt;unsafe&lt;/code&gt; でないブロックや &lt;code&gt;unsafe&lt;/code&gt; 関数内に含まれるRustコードは、次のリストのいずれかの動作を示す場合は正しくありません。書くときにはプログラマの責任である &lt;code&gt;unsafe&lt;/code&gt; コードを、それを聞かせすることはできないことを &lt;code&gt;safe&lt;/code&gt; コードはこれらの動作を示します。</target>
        </trans-unit>
        <trans-unit id="267e97a30b8e7e2b82eb0bd15c0545ae0f9ce0a2" translate="yes" xml:space="preserve">
          <source>Rust comes with a variety of things in its standard library. However, if you had to manually import every single thing that you used, it would be very verbose. But importing a lot of things that a program never uses isn't good either. A balance needs to be struck.</source>
          <target state="translated">Rustには標準ライブラリに様々なものが付属しています。しかし、使ったものをいちいち手動でインポートしなければならないとなると、非常に冗長になってしまいます。しかし、プログラムが絶対に使わないものをたくさんインポートするのも良くありません。バランスをとる必要があります。</target>
        </trans-unit>
        <trans-unit id="e5b94cc5e4660404ce6dbefdb4f8787d02d4269a" translate="yes" xml:space="preserve">
          <source>Rust compilers, including &lt;code&gt;rustc&lt;/code&gt;, will perform optimizations. The reference does not specify what optimizations are allowed or disallowed. Instead, think of the compiled program as a black box. You can only probe by running it, feeding it input and observing its output. Everything that happens that way must conform to what the reference says.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30050a292030028105b725a80cfd11137e292a84" translate="yes" xml:space="preserve">
          <source>Rust complains that it doesn&amp;rsquo;t make sense to use &lt;code&gt;if let&lt;/code&gt; with an irrefutable pattern:</source>
          <target state="translated">Rust は、反駁できないパターンで &lt;code&gt;if let&lt;/code&gt; した場合、使用しても意味がないと不平を言っています。</target>
        </trans-unit>
        <trans-unit id="151a36819a9041707f7a83143365261d69ad15c3" translate="yes" xml:space="preserve">
          <source>Rust de-sugars this into:</source>
          <target state="translated">サビはこれを脱糖する</target>
        </trans-unit>
        <trans-unit id="7f9478ac9f9f1e9c53d0bbd8f2f29a740e10b88f" translate="yes" xml:space="preserve">
          <source>Rust development operates on a &lt;em&gt;train schedule&lt;/em&gt;. That is, all development is done on the &lt;code&gt;master&lt;/code&gt; branch of the Rust repository. Releases follow a software release train model, which has been used by Cisco IOS and other software projects. There are three &lt;em&gt;release channels&lt;/em&gt; for Rust:</source>
          <target state="translated">錆の開発は&lt;em&gt;列車のスケジュールで行われ&lt;/em&gt;ます。つまり、すべての開発はRustリポジトリの &lt;code&gt;master&lt;/code&gt; ブランチで行われます。リリースは、Cisco IOSおよびその他のソフトウェアプロジェクトで使用されているソフトウェアリリーストレインモデルに従います。Rustには3つの&lt;em&gt;リリースチャネル&lt;/em&gt;があります。</target>
        </trans-unit>
        <trans-unit id="c1ceba7cafe03c43c23515eea22061c0156f8ee3" translate="yes" xml:space="preserve">
          <source>Rust divides keywords into three categories:</source>
          <target state="translated">ラストはキーワードを3つに分けています。</target>
        </trans-unit>
        <trans-unit id="520af2b0caca1d9f181466e2056d3f0b0b57619e" translate="yes" xml:space="preserve">
          <source>Rust does deref coercion when it finds types and trait implementations in three cases:</source>
          <target state="translated">Rustは、3つのケースで型や形質の実装を見つけると、強制的に deref を行います。</target>
        </trans-unit>
        <trans-unit id="44dd2f2386da2c0cdd5e7d3c775c2fc5131419be" translate="yes" xml:space="preserve">
          <source>Rust does not currently have a rigorously and formally defined memory model, so the precise semantics of what &quot;volatile&quot; means here is subject to change over time. That being said, the semantics will almost always end up pretty similar to &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf&quot;&gt;C11's definition of volatile&lt;/a&gt;.</source>
          <target state="translated">現在、Rustには厳密かつ正式に定義されたメモリモデルがないため、ここでの「揮発性」の意味の正確なセマンティクスは、時間とともに変化する可能性があります。そうは言っても、セマンティクスはほとんどの場合、&lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf&quot;&gt;C11のvolatileの定義に&lt;/a&gt;かなり似たものになります。</target>
        </trans-unit>
        <trans-unit id="fbbe7c11a19a771711fe824dd3e7ec32cef70acb" translate="yes" xml:space="preserve">
          <source>Rust does not currently support this.</source>
          <target state="translated">Rustは現在サポートしていません。</target>
        </trans-unit>
        <trans-unit id="2f345e86ce4bdfb609568cfe8dcd5b348d517588" translate="yes" xml:space="preserve">
          <source>Rust does not permit a closure to directly reference its own type, either through an argument (as in the example above) or by capturing itself through its environment. This restriction helps keep closure inference tractable.</source>
          <target state="translated">Rustでは、クロージャが(上記の例のように)引数を介して、あるいは環境を介して自身の型を直接参照することはできません。この制限はクロージャの推論を扱いやすくするのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="e25c8c25102888075b13676dc7cdde6255be9b8e" translate="yes" xml:space="preserve">
          <source>Rust does not yet have a defined memory model. Various academics and industry are working on various proposals, but for now, this is an under-defined place in the language.</source>
          <target state="translated">Rustにはまだ定義されたメモリモデルがありません。様々な学者や業界が様々な提案をしていますが、今のところ言語の中では未定義なところです。</target>
        </trans-unit>
        <trans-unit id="0eb864e233b19fcb363897f43533f05fca7a7717" translate="yes" xml:space="preserve">
          <source>Rust does not yet have a defined memory model. Various academics and industry professionals are working on various proposals, but for now, this is an under-defined place in the language.</source>
          <target state="translated">Rustにはまだ定義されたメモリモデルがありません。様々な学者や業界関係者が様々な提案をしていますが、今のところ言語の中では未定義なところです。</target>
        </trans-unit>
        <trans-unit id="34f3af8d8ef49dee8de54e673fbeb4ddba63eab4" translate="yes" xml:space="preserve">
          <source>Rust doesn&amp;rsquo;t allow you to create your own operators or overload arbitrary operators. But you can overload the operations and corresponding traits listed in &lt;code&gt;std::ops&lt;/code&gt; by implementing the traits associated with the operator. For example, in Listing 19-14 we overload the &lt;code&gt;+&lt;/code&gt; operator to add two &lt;code&gt;Point&lt;/code&gt; instances together. We do this by implementing the &lt;code&gt;Add&lt;/code&gt; trait on a &lt;code&gt;Point&lt;/code&gt; struct:</source>
          <target state="translated">Rustでは、独自の演算子を作成したり、任意の演算子をオーバーロードしたりすることはできません。ただし、演算子に関連付けられた特性を実装することで、 &lt;code&gt;std::ops&lt;/code&gt; リストされている操作と対応する特性をオーバーロードできます。たとえば、リスト19-14では、 &lt;code&gt;+&lt;/code&gt; 演算子をオーバーロードして、2つの &lt;code&gt;Point&lt;/code&gt; インスタンスを一緒に追加しています。これを行うには、 &lt;code&gt;Point&lt;/code&gt; 構造体に &lt;code&gt;Add&lt;/code&gt; トレイトを実装します。</target>
        </trans-unit>
        <trans-unit id="c421a151bfbb2f6d54a7d626539462864b68cd48" translate="yes" xml:space="preserve">
          <source>Rust doesn&amp;rsquo;t have an equivalent to the &lt;code&gt;-&amp;gt;&lt;/code&gt; operator; instead, Rust has a feature called &lt;em&gt;automatic referencing and dereferencing&lt;/em&gt;. Calling methods is one of the few places in Rust that has this behavior.</source>
          <target state="translated">Rustには &lt;code&gt;-&amp;gt;&lt;/code&gt; 演算子に相当するものはありません。代わりに、Rustには&lt;em&gt;自動参照と自動参照と&lt;/em&gt;呼ばれる機能があります。メソッドの呼び出しは、Rustでこの動作を行う数少ない場所の1つです。</target>
        </trans-unit>
        <trans-unit id="5b42e515beb4780bad0d430e54e0d456e0ed5719" translate="yes" xml:space="preserve">
          <source>Rust doesn&amp;rsquo;t have objects in the same sense as other languages have objects, and Rust doesn&amp;rsquo;t have mock object functionality built into the standard library as some other languages do. However, you can definitely create a struct that will serve the same purposes as a mock object.</source>
          <target state="translated">Rustには他の言語のオブジェクトと同じ意味のオブジェクトはありません。また、Rustには、他の一部の言語のように標準ライブラリに組み込まれたモックオブジェクト機能はありません。ただし、モックオブジェクトと同じ目的に役立つ構造体を作成することは間違いありません。</target>
        </trans-unit>
        <trans-unit id="742db479bb4771b176a5e708d26cf5692112a273" translate="yes" xml:space="preserve">
          <source>Rust doesn&amp;rsquo;t let us call &lt;code&gt;drop&lt;/code&gt; explicitly because Rust would still automatically call &lt;code&gt;drop&lt;/code&gt; on the value at the end of &lt;code&gt;main&lt;/code&gt;. This would be a &lt;em&gt;double free&lt;/em&gt; error because Rust would be trying to clean up the same value twice.</source>
          <target state="translated">Rustは &lt;code&gt;main&lt;/code&gt; の最後にある値に対して &lt;code&gt;drop&lt;/code&gt; を自動的に呼び出すため、Rustは明示的に &lt;code&gt;drop&lt;/code&gt; を呼び出しません。Rustは同じ値を2回クリーンアップしようとしているため、これは&lt;em&gt;二重解放&lt;/em&gt;エラーになります。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a5ddfc059c10a99d099217277479972f1dff9d9d" translate="yes" xml:space="preserve">
          <source>Rust enforces that there can only be one mutable reference to a particular piece of data in a particular scope. Because of this, attempting to use &lt;code&gt;swap_with_slice&lt;/code&gt; on a single slice will result in a compile failure:</source>
          <target state="translated">Rustは、特定のスコープ内の特定のデータへの変更可能な参照は1つだけであることを強制します。このため、単一のスライスで &lt;code&gt;swap_with_slice&lt;/code&gt; を使用しようとすると、コンパイルエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="b8796c82063dd394ca7b901b43bcdd5623524f60" translate="yes" xml:space="preserve">
          <source>Rust enforces that there can only be one mutable reference with no immutable references to a particular piece of data in a particular scope. Because of this, attempting to use &lt;code&gt;clone_from_slice&lt;/code&gt; on a single slice will result in a compile failure:</source>
          <target state="translated">Rustは、特定のスコープ内の特定のデータへの不変の参照がなく、変更可能な参照は1つだけであることを強制します。このため、単一のスライスで &lt;code&gt;clone_from_slice&lt;/code&gt; を使用しようとすると、コンパイルが失敗します。</target>
        </trans-unit>
        <trans-unit id="706c743ee2c8c57c9cf12e956040ea8994faeb61" translate="yes" xml:space="preserve">
          <source>Rust enforces that there can only be one mutable reference with no immutable references to a particular piece of data in a particular scope. Because of this, attempting to use &lt;code&gt;copy_from_slice&lt;/code&gt; on a single slice will result in a compile failure:</source>
          <target state="translated">Rustは、特定のスコープ内の特定のデータへの不変の参照がなく、変更可能な参照は1つだけであることを強制します。このため、単一のスライスで &lt;code&gt;copy_from_slice&lt;/code&gt; を使用しようとすると、コンパイルエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="89181f89a95db183f5b3d8303bfdfb2bc964fac0" translate="yes" xml:space="preserve">
          <source>Rust groups errors into two major categories: &lt;em&gt;recoverable&lt;/em&gt; and &lt;em&gt;unrecoverable&lt;/em&gt; errors. For a recoverable error, such as a file not found error, it&amp;rsquo;s reasonable to report the problem to the user and retry the operation. Unrecoverable errors are always symptoms of bugs, like trying to access a location beyond the end of an array.</source>
          <target state="translated">Rustはエラーを2つの主要なカテゴリにグループ化します。&lt;em&gt;回復可能&lt;/em&gt;&lt;em&gt;な&lt;/em&gt;エラーと&lt;em&gt;回復不可能な&lt;/em&gt;エラーです。ファイルが見つからないなどの回復可能なエラーの場合は、ユーザーに問題を報告して操作を再試行するのが妥当です。回復不可能なエラーは常に、アレイの末尾を超えた場所にアクセスしようとするなど、バグの症状です。</target>
        </trans-unit>
        <trans-unit id="946b8888318bdae2b8d175a0fe4086722fd4b5fc" translate="yes" xml:space="preserve">
          <source>Rust guarantees to optimize the following types &lt;code&gt;T&lt;/code&gt; such that &lt;a href=&quot;enum.option&quot;&gt;&lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; has the same size as &lt;code&gt;T&lt;/code&gt;:</source>
          <target state="translated">錆は、次のタイプに最適化することを保証 &lt;code&gt;T&lt;/code&gt; のように&lt;a href=&quot;enum.option&quot;&gt; &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; &lt;/a&gt;同じ大きさを有し、 &lt;code&gt;T&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="48061a332738260059547f58be5cc62d50260cf9" translate="yes" xml:space="preserve">
          <source>Rust guarantees to optimize the following types &lt;code&gt;T&lt;/code&gt; such that [&lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt;] has the same size as &lt;code&gt;T&lt;/code&gt;:</source>
          <target state="translated">Rust guarantees to optimize the following types &lt;code&gt;T&lt;/code&gt; such that [ &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; ] has the same size as &lt;code&gt;T&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="17426c688445460fafbc02d6e3ab0f35fb6f21ba" translate="yes" xml:space="preserve">
          <source>Rust has a helpful method to handle line-by-line iteration of strings, conveniently named &lt;code&gt;lines&lt;/code&gt;, that works as shown in Listing 12-17. Note this won&amp;rsquo;t compile yet.</source>
          <target state="translated">錆が便利という名前の文字列のハンドルライン・バイ・ラインの繰り返しに役立つ方法がある &lt;code&gt;lines&lt;/code&gt; リスト12-17のように動作します。これはまだコンパイルされないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="1d698a54ce65a1a8a252d0c52823bbef706cfe2a" translate="yes" xml:space="preserve">
          <source>Rust has a number of features that allow you to manage your code&amp;rsquo;s organization, including which details are exposed, which details are private, and what names are in each scope in your programs. These features, sometimes collectively referred to as the &lt;em&gt;module system&lt;/em&gt;, and include:</source>
          <target state="translated">Rustには、公開する詳細、非公開の詳細、プログラムの各スコープに含まれる名前など、コードの編成を管理できるいくつかの機能があります。これらの機能は、まとめて&lt;em&gt;モジュールシステム&lt;/em&gt;と呼ばれることもあり、次のものが含まれます。</target>
        </trans-unit>
        <trans-unit id="d0ae5edd5a8810915e1c78a72e4cc1021a8ebd40" translate="yes" xml:space="preserve">
          <source>Rust has a number of features that allow you to manage your code&amp;rsquo;s organization, including which details are exposed, which details are private, and what names are in each scope in your programs. These features, sometimes collectively referred to as the &lt;em&gt;module system&lt;/em&gt;, include:</source>
          <target state="translated">Rust has a number of features that allow you to manage your code&amp;rsquo;s organization, including which details are exposed, which details are private, and what names are in each scope in your programs. These features, sometimes collectively referred to as the &lt;em&gt;module system&lt;/em&gt;, include:</target>
        </trans-unit>
        <trans-unit id="49935161924130a0652e8dffafd8b2c317e5e61b" translate="yes" xml:space="preserve">
          <source>Rust has a special annotation called the &lt;code&gt;Copy&lt;/code&gt; trait that we can place on types like integers that are stored on the stack (we&amp;rsquo;ll talk more about traits in Chapter 10). If a type has the &lt;code&gt;Copy&lt;/code&gt; trait, an older variable is still usable after assignment. Rust won&amp;rsquo;t let us annotate a type with the &lt;code&gt;Copy&lt;/code&gt; trait if the type, or any of its parts, has implemented the &lt;code&gt;Drop&lt;/code&gt; trait. If the type needs something special to happen when the value goes out of scope and we add the &lt;code&gt;Copy&lt;/code&gt; annotation to that type, we&amp;rsquo;ll get a compile-time error. To learn about how to add the &lt;code&gt;Copy&lt;/code&gt; annotation to your type, see &lt;a href=&quot;appendix-03-derivable-traits&quot;&gt;&amp;ldquo;Derivable Traits&amp;rdquo;&lt;/a&gt; in Appendix C.</source>
          <target state="translated">Rustには、スタックに格納されている整数などの型に配置できる &lt;code&gt;Copy&lt;/code&gt; トレイトと呼ばれる特別な注釈があります（トレイトについては、第10章で詳しく説明します）。タイプに &lt;code&gt;Copy&lt;/code&gt; トレイトがある場合、割り当て後も古い変数を使用できます。タイプまたはその一部が &lt;code&gt;Drop&lt;/code&gt; トレイトを実装している場合、Rustはタイプに &lt;code&gt;Copy&lt;/code&gt; トレイトのアノテーションを付けません。値がスコープ外に出たときに型に特別な処理が必要な場合、その型に &lt;code&gt;Copy&lt;/code&gt; アノテーションを追加すると、コンパイル時エラーが発生します。タイプに &lt;code&gt;Copy&lt;/code&gt; アノテーションを追加する方法については、付録Cの&lt;a href=&quot;appendix-03-derivable-traits&quot;&gt;「派生可能な特性」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="d250dac13ee732a5203fad399c6c0a0094b44fcf" translate="yes" xml:space="preserve">
          <source>Rust has a special annotation called the &lt;code&gt;Copy&lt;/code&gt; trait that we can place on types like integers that are stored on the stack (we&amp;rsquo;ll talk more about traits in Chapter 10). If a type implements the &lt;code&gt;Copy&lt;/code&gt; trait, an older variable is still usable after assignment. Rust won&amp;rsquo;t let us annotate a type with the &lt;code&gt;Copy&lt;/code&gt; trait if the type, or any of its parts, has implemented the &lt;code&gt;Drop&lt;/code&gt; trait. If the type needs something special to happen when the value goes out of scope and we add the &lt;code&gt;Copy&lt;/code&gt; annotation to that type, we&amp;rsquo;ll get a compile-time error. To learn about how to add the &lt;code&gt;Copy&lt;/code&gt; annotation to your type to implement the trait, see &lt;a href=&quot;appendix-03-derivable-traits&quot;&gt;&amp;ldquo;Derivable Traits&amp;rdquo;&lt;/a&gt; in Appendix C.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb74ed2b9f402bf372b86ede78b5b956776b5eac" translate="yes" xml:space="preserve">
          <source>Rust has a special type named &lt;code&gt;!&lt;/code&gt; that&amp;rsquo;s known in type theory lingo as the &lt;em&gt;empty type&lt;/em&gt; because it has no values. We prefer to call it the &lt;em&gt;never type&lt;/em&gt; because it stands in the place of the return type when a function will never return. Here is an example:</source>
          <target state="translated">Rustには &lt;code&gt;!&lt;/code&gt; という名前の特別なタイプがあります。型理論では、値がないため、&lt;em&gt;空の型&lt;/em&gt;として知られています。関数が決して戻らない場合は、戻り型の代わりに使用されるため、&lt;em&gt;決して型&lt;/em&gt;とは呼びません。次に例を示します。</target>
        </trans-unit>
        <trans-unit id="706acaa256465c2dcf2f521cfbdce1b8adb60b94" translate="yes" xml:space="preserve">
          <source>Rust has a well-defined &lt;a href=&quot;../../reference/destructors&quot;&gt;drop order&lt;/a&gt; of values. To make sure that fields or locals are dropped in a specific order, reorder the declarations such that the implicit drop order is the correct one.</source>
          <target state="translated">Rust has a well-defined &lt;a href=&quot;../../reference/destructors&quot;&gt;drop order&lt;/a&gt; of values. To make sure that fields or locals are dropped in a specific order, reorder the declarations such that the implicit drop order is the correct one.</target>
        </trans-unit>
        <trans-unit id="e20f831507fc3015fa4b5f62f8ae95078cffc507" translate="yes" xml:space="preserve">
          <source>Rust has an extremely powerful control flow operator called &lt;code&gt;match&lt;/code&gt; that allows you to compare a value against a series of patterns and then execute code based on which pattern matches. Patterns can be made up of literal values, variable names, wildcards, and many other things; Chapter 18 covers all the different kinds of patterns and what they do. The power of &lt;code&gt;match&lt;/code&gt; comes from the expressiveness of the patterns and the fact that the compiler confirms that all possible cases are handled.</source>
          <target state="translated">Rustには &lt;code&gt;match&lt;/code&gt; と呼ばれる非常に強力な制御フロー演算子があり、値を一連のパターンと比較し、どのパターンが一致するかに基づいてコードを実行できます。パターンは、リテラル値、変数名、ワイルドカード、その他多くのもので構成できます。第18章では、さまざまな種類のパターンとそれらの機能について説明します。 &lt;code&gt;match&lt;/code&gt; の力は、パターンの表現力と、コンパイラーがすべての可能なケースが処理されていることを確認するという事実に由来します。</target>
        </trans-unit>
        <trans-unit id="274075ef85f35df55435242c1d906ad5d8960c88" translate="yes" xml:space="preserve">
          <source>Rust has provided a number of traits for us to use with the &lt;code&gt;derive&lt;/code&gt; annotation that can add useful behavior to our custom types. Those traits and their behaviors are listed in Appendix C. We&amp;rsquo;ll cover how to implement these traits with custom behavior as well as how to create your own traits in Chapter 10.</source>
          <target state="translated">Rustは、カスタム型に有用な動作を追加できる &lt;code&gt;derive&lt;/code&gt; アノテーションで使用できるいくつかの特性を提供しています。これらの特性とその動作は付録Cにリストされています。カスタム動作でこれらの特性を実装する方法と、独自の特性を作成する方法については、第10章で説明します。</target>
        </trans-unit>
        <trans-unit id="9abfc06989ca660b27a8bdfcf34e581735c33394" translate="yes" xml:space="preserve">
          <source>Rust has rules that allow lifetimes to be elided in various places where the compiler can infer a sensible default choice.</source>
          <target state="translated">Rustには、コンパイラが賢明なデフォルトの選択を推測できる様々な場所でライフタイムを省略できるルールがあります。</target>
        </trans-unit>
        <trans-unit id="f8345bc804bda40bffec95786aae64fa77a56f07" translate="yes" xml:space="preserve">
          <source>Rust has three kinds of loops: &lt;code&gt;loop&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, and &lt;code&gt;for&lt;/code&gt;. Let&amp;rsquo;s try each one.</source>
          <target state="translated">Rustには、 &lt;code&gt;loop&lt;/code&gt; 、 &lt;code&gt;while&lt;/code&gt; 、 &lt;code&gt;for&lt;/code&gt; の 3種類のループがあります。それぞれ試してみましょう。</target>
        </trans-unit>
        <trans-unit id="69ac847beaa0b2c5daa7fb301847708a789caa24" translate="yes" xml:space="preserve">
          <source>Rust has two kinds of statement: &lt;a href=&quot;#declaration-statements&quot;&gt;declaration statements&lt;/a&gt; and &lt;a href=&quot;#expression-statements&quot;&gt;expression statements&lt;/a&gt;.</source>
          <target state="translated">Rust has two kinds of statement: &lt;a href=&quot;#declaration-statements&quot;&gt;declaration statements&lt;/a&gt; and &lt;a href=&quot;#expression-statements&quot;&gt;expression statements&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="1a4b07d2a6fb6a7fe95444fa2c7afda8086fcf0c" translate="yes" xml:space="preserve">
          <source>Rust has two kinds of statement: &lt;a href=&quot;statements#declaration-statements&quot;&gt;declaration statements&lt;/a&gt; and &lt;a href=&quot;statements#expression-statements&quot;&gt;expression statements&lt;/a&gt;.</source>
          <target state="translated">Rustには、&lt;a href=&quot;statements#declaration-statements&quot;&gt;宣言ステートメント&lt;/a&gt;と&lt;a href=&quot;statements#expression-statements&quot;&gt;式ステートメントの&lt;/a&gt; 2種類のステートメントがあります。</target>
        </trans-unit>
        <trans-unit id="005babc4bad22226436a0f4a1424db5097b9ced6" translate="yes" xml:space="preserve">
          <source>Rust has two ways to reference an element so you can choose how the program behaves when you try to use an index value that the vector doesn&amp;rsquo;t have an element for. As an example, let&amp;rsquo;s see what a program will do if it has a vector that holds five elements and then tries to access an element at index 100, as shown in Listing 8-6.</source>
          <target state="translated">Rustには要素を参照する方法が2つあるので、ベクトルに要素がないインデックス値を使用しようとした場合のプログラムの動作を選択できます。例として、リスト8-6に示すように、プログラムに5つの要素を保持するベクトルがあり、インデックス100の要素にアクセスしようとした場合のプログラムを見てみましょう。</target>
        </trans-unit>
        <trans-unit id="8024edbf38de66c89e3d81c184c687bc31f1dd00" translate="yes" xml:space="preserve">
          <source>Rust input is interpreted as a sequence of Unicode code points encoded in UTF-8.</source>
          <target state="translated">Rust の入力は、UTF-8 でエンコードされた Unicode コードポイントのシーケンスとして解釈されます。</target>
        </trans-unit>
        <trans-unit id="c8cbae13f648a692e7452cc98631131e1d6323f2" translate="yes" xml:space="preserve">
          <source>Rust instead uses generics to abstract over different possible types and trait bounds to impose constraints on what those types must provide. This is sometimes called &lt;em&gt;bounded parametric polymorphism&lt;/em&gt;.</source>
          <target state="translated">Rustは代わりにジェネリックを使用して、考えられるさまざまなタイプと特性の境界を抽象化し、それらのタイプが提供する必要があるものに制約を課します。これは、「&lt;em&gt;境界パラメトリック多態性」&lt;/em&gt;と呼ばれることもあります。</target>
        </trans-unit>
        <trans-unit id="b1053cabf6d03bc378398388561e05d76d497e05" translate="yes" xml:space="preserve">
          <source>Rust is &lt;em&gt;primarily&lt;/em&gt; an expression language. This means that most forms of value-producing or effect-causing evaluation are directed by the uniform syntax category of &lt;em&gt;expressions&lt;/em&gt;. Each kind of expression can typically &lt;em&gt;nest&lt;/em&gt; within each other kind of expression, and rules for evaluation of expressions involve specifying both the value produced by the expression and the order in which its sub-expressions are themselves evaluated.</source>
          <target state="translated">Rustは&lt;em&gt;主に&lt;/em&gt;式言語です。つまり、価値を生み出す、または効果をもたらす評価のほとんどの形式は、&lt;em&gt;式の&lt;/em&gt;統一構文カテゴリによって指示されます。各種類の式は、通常、他の種類の式の中に&lt;em&gt;入れ子&lt;/em&gt;にすることができ、式の評価の規則には、式によって生成される値と、そのサブ式自体が評価される順序の両方を指定することが含まれます。</target>
        </trans-unit>
        <trans-unit id="5db5878515e4389bbf8421d74fcb5d667d66d9ab" translate="yes" xml:space="preserve">
          <source>Rust is a &quot;free-form&quot; language, meaning that all forms of whitespace serve only to separate &lt;em&gt;tokens&lt;/em&gt; in the grammar, and have no semantic significance.</source>
          <target state="translated">Rustは「自由形式」の言語です。つまり、すべての形式の空白は、文法で&lt;em&gt;トークン&lt;/em&gt;を分離&lt;em&gt;する&lt;/em&gt;ためにのみ機能し、意味上の意味はありません。</target>
        </trans-unit>
        <trans-unit id="3cea4d3df9c4c79e41064c918cdf547361978c7e" translate="yes" xml:space="preserve">
          <source>Rust is for people who crave speed and stability in a language. By speed, we mean the speed of the programs that you can create with Rust and the speed at which Rust lets you write them. The Rust compiler&amp;rsquo;s checks ensure stability through feature additions and refactoring. This is in contrast to the brittle legacy code in languages without these checks, which developers are often afraid to modify. By striving for zero-cost abstractions, higher-level features that compile to lower-level code as fast as code written manually, Rust endeavors to make safe code be fast code as well.</source>
          <target state="translated">Rustは、言語のスピードと安定性を渇望する人々のためのものです。速度とは、Rustで作成できるプログラムの速度と、Rustでプログラムを作成できる速度を意味します。Rustコンパイラのチェックは、機能の追加とリファクタリングを通じて安定性を保証します。これは、これらのチェックを行わない言語の脆弱なレガシーコードとは対照的です。これらのチェックは、開発者が変更を恐れています。ゼロコストの抽象化、低レベルのコードにコンパイルして手動で記述したコードと同じくらい高速な機能を追求することにより、Rustは安全なコードも高速なコードになるように努めています。</target>
        </trans-unit>
        <trans-unit id="7bf10b5f2d62512e2d305590c2208014f45470d4" translate="yes" xml:space="preserve">
          <source>Rust is for people who want to build the Rust programming language, community, developer tools, and libraries. We&amp;rsquo;d love to have you contribute to the Rust language.</source>
          <target state="translated">Rustは、Rustプログラミング言語、コミュニティ、開発者ツール、およびライブラリを構築したい人向けです。Rust言語に貢献していただきたいと思います。</target>
        </trans-unit>
        <trans-unit id="2dd06888c30776a4c25d59c7d1262374011d3d0b" translate="yes" xml:space="preserve">
          <source>Rust is for students and those who are interested in learning about systems concepts. Using Rust, many people have learned about topics like operating systems development. The community is very welcoming and happy to answer student questions. Through efforts such as this book, the Rust teams want to make systems concepts more accessible to more people, especially those new to programming.</source>
          <target state="translated">Rustは、学生やシステムの概念を学ぶことに興味がある人のためのものです。Rustを使って、多くの人がオペレーティングシステム開発のようなトピックについて学んでいます。コミュニティは非常に歓迎されており、学生の質問に喜んで答えてくれます。この本のような取り組みを通じて、Rust チームは、システムの概念をより多くの人、特にプログラミングに慣れていない人にもっと身近なものにしたいと考えています。</target>
        </trans-unit>
        <trans-unit id="fe5a0dfe919ae890cb83e73c25365cbc5b82b5b4" translate="yes" xml:space="preserve">
          <source>Rust is ideal for many people for a variety of reasons. Let&amp;rsquo;s look at a few of the most important groups.</source>
          <target state="translated">Rustはさまざまな理由で多くの人にとって理想的です。最も重要なグループのいくつかを見てみましょう。</target>
        </trans-unit>
        <trans-unit id="42421e785d37bc9b73d820b74a50d1fba537bea2" translate="yes" xml:space="preserve">
          <source>Rust is not a particularly original language, with design elements coming from a wide range of sources. Some of these are listed below (including elements that have since been removed):</source>
          <target state="translated">Rust は特に独創的な言語ではなく、デザイン要素は様々なソースから来ています。そのうちのいくつかを以下に示します (その後削除された要素を含む)。</target>
        </trans-unit>
        <trans-unit id="b44eb4eed4591a2484384d8f13e00b4678784a52" translate="yes" xml:space="preserve">
          <source>Rust is proving to be a productive tool for collaborating among large teams of developers with varying levels of systems programming knowledge. Low-level code is prone to a variety of subtle bugs, which in most other languages can be caught only through extensive testing and careful code review by experienced developers. In Rust, the compiler plays a gatekeeper role by refusing to compile code with these elusive bugs, including concurrency bugs. By working alongside the compiler, the team can spend their time focusing on the program&amp;rsquo;s logic rather than chasing down bugs.</source>
          <target state="translated">Rustは、さまざまなレベルのシステムプログラミングの知識を持つ開発者の大規模なチーム間でコラボレーションするための生産的なツールであることを証明しています。低レベルのコードにはさまざまな微妙なバグが発生する傾向があり、他のほとんどの言語では、経験豊富な開発者による広範なテストと注意深いコードレビューによってのみ発見できます。Rustでは、同時実行性のバグを含むこれらのとらえどころのないバグでコードをコンパイルすることを拒否することにより、コンパイラーはゲートキーパーの役割を果たします。コンパイラーと一緒に作業することにより、チームはバグを追跡するのではなく、プログラムのロジックに集中することに時間を費やすことができます。</target>
        </trans-unit>
        <trans-unit id="e7fcfa2c0e9d01cf1bef3a319720c713bacd4522" translate="yes" xml:space="preserve">
          <source>Rust is still a work in progress with places where the compiler could be improved, but in the future, the code in Listing 20-20 should work just fine. People just like you are working to fix this and other issues! After you&amp;rsquo;ve finished this book, we would love for you to join in.</source>
          <target state="translated">Rustはコンパイラが改善される可能性のある場所でまだ進行中の作業ですが、将来的には、リスト20-20のコードは問題なく動作するはずです。あなたと同じような人々がこの問題やその他の問題を修正しようとしています！この本が完成したら、ぜひ参加してください。</target>
        </trans-unit>
        <trans-unit id="414ef5b7fed42f865260a7cd152d3f2a763ca163" translate="yes" xml:space="preserve">
          <source>Rust itself does not have a Python-like equivalent of named parameters to a function, but the &lt;a href=&quot;../macro.format&quot;&gt;&lt;code&gt;format!&lt;/code&gt;&lt;/a&gt; macro is a syntax extension that allows it to leverage named parameters. Named parameters are listed at the end of the argument list and have the syntax:</source>
          <target state="translated">Rust itself does not have a Python-like equivalent of named parameters to a function, but the &lt;a href=&quot;../macro.format&quot;&gt; &lt;code&gt;format!&lt;/code&gt; &lt;/a&gt; macro is a syntax extension that allows it to leverage named parameters. Named parameters are listed at the end of the argument list and have the syntax:</target>
        </trans-unit>
        <trans-unit id="009bd344314f5929e591a576862f0addd792ad2d" translate="yes" xml:space="preserve">
          <source>Rust itself does not have a Python-like equivalent of named parameters to a function, but the &lt;a href=&quot;../macro.format&quot;&gt;&lt;code&gt;format!&lt;/code&gt;&lt;/a&gt; macro is a syntax extension which allows it to leverage named parameters. Named parameters are listed at the end of the argument list and have the syntax:</source>
          <target state="translated">Rust自体には、関数の名前付きパラメーターに相当するPythonのようなパラメーターはありませんが、&lt;a href=&quot;../macro.format&quot;&gt; &lt;code&gt;format!&lt;/code&gt; &lt;/a&gt;マクロは、名前付きパラメーターを活用できるようにする構文拡張です。名前付きパラメーターは引数リストの最後にリストされ、構文は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="2f45412f8a16ab817b5f0812176d720466554450" translate="yes" xml:space="preserve">
          <source>Rust itself has no notion of immovable types, and considers moves (e.g., through assignment or &lt;a href=&quot;../mem/fn.replace&quot;&gt;&lt;code&gt;mem::replace&lt;/code&gt;&lt;/a&gt;) to always be safe.</source>
          <target state="translated">Rust itself has no notion of immovable types, and considers moves (e.g., through assignment or &lt;a href=&quot;../mem/fn.replace&quot;&gt; &lt;code&gt;mem::replace&lt;/code&gt; &lt;/a&gt;) to always be safe.</target>
        </trans-unit>
        <trans-unit id="bf73204b9a4eab7a093c6de5aa1aad6f2361e93a" translate="yes" xml:space="preserve">
          <source>Rust knows that we didn&amp;rsquo;t cover every possible case and even knows which pattern we forgot! Matches in Rust are &lt;em&gt;exhaustive&lt;/em&gt;: we must exhaust every last possibility in order for the code to be valid. Especially in the case of &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt;, when Rust prevents us from forgetting to explicitly handle the &lt;code&gt;None&lt;/code&gt; case, it protects us from assuming that we have a value when we might have null, thus making the billion-dollar mistake discussed earlier impossible.</source>
          <target state="translated">Rust knows that we didn&amp;rsquo;t cover every possible case and even knows which pattern we forgot! Matches in Rust are &lt;em&gt;exhaustive&lt;/em&gt;: we must exhaust every last possibility in order for the code to be valid. Especially in the case of &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; , when Rust prevents us from forgetting to explicitly handle the &lt;code&gt;None&lt;/code&gt; case, it protects us from assuming that we have a value when we might have null, thus making the billion-dollar mistake discussed earlier impossible.</target>
        </trans-unit>
        <trans-unit id="5773a78f91f6dd61a894f54aca9217a3e2589f2c" translate="yes" xml:space="preserve">
          <source>Rust knows that we didn&amp;rsquo;t cover every possible case and even knows which pattern we forgot! Matches in Rust are &lt;em&gt;exhaustive&lt;/em&gt;: we must exhaust every last possibility in order for the code to be valid. Especially in the case of &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt;, when Rust prevents us from forgetting to explicitly handle the &lt;code&gt;None&lt;/code&gt; case, it protects us from assuming that we have a value when we might have null, thus making the billion-dollar mistake discussed earlier.</source>
          <target state="translated">ラストは、すべての可能性のあるケースをカバーしたわけではなく、どのパターンを忘れたかさえ知っています！Rustでの一致は&lt;em&gt;完全&lt;/em&gt;なものです。コードを有効にするには、すべての可能性を&lt;em&gt;網羅&lt;/em&gt;する必要があります。特に &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; 場合、Rustが明示的に &lt;code&gt;None&lt;/code&gt; ケースを処理することを忘れないようにすることで、nullがある可能性があるときに値があると想定することから保護され、前述の10億ドルの間違いを犯します。</target>
        </trans-unit>
        <trans-unit id="6037ceeea4fb74411f6b08d6b6645ce5f8d0bdce" translate="yes" xml:space="preserve">
          <source>Rust lets you organize your packages into crates and your crates into modules so you can refer to items defined in one module from another module. You can do this by specifying absolute or relative paths. These paths can be brought into scope with a &lt;code&gt;use&lt;/code&gt; statement so you can use a shorter path for multiple uses of the item in that scope. Module code is private by default, but you can make definitions public by adding the &lt;code&gt;pub&lt;/code&gt; keyword.</source>
          <target state="translated">Rustを使用すると、パッケージをクレートに、クレートをモジュールに編成できるため、あるモジュールで定義されたアイテムを別のモジュールから参照できます。これを行うには、絶対パスまたは相対パスを指定します。これらのパスは、 &lt;code&gt;use&lt;/code&gt; ステートメントを使用してスコープに入れることができるので、そのスコープ内のアイテムを複数回使用するために短いパスを使用できます。モジュールコードはデフォルトで非公開ですが、 &lt;code&gt;pub&lt;/code&gt; キーワードを追加することで定義を公開できます。</target>
        </trans-unit>
        <trans-unit id="a48891d4f88805e4179ad3fd74a5e413f7ca1c9b" translate="yes" xml:space="preserve">
          <source>Rust lets you split a package into multiple crates and a crate into modules so you can refer to items defined in one module from another module. You can do this by specifying absolute or relative paths. These paths can be brought into scope with a &lt;code&gt;use&lt;/code&gt; statement so you can use a shorter path for multiple uses of the item in that scope. Module code is private by default, but you can make definitions public by adding the &lt;code&gt;pub&lt;/code&gt; keyword.</source>
          <target state="translated">Rust lets you split a package into multiple crates and a crate into modules so you can refer to items defined in one module from another module. You can do this by specifying absolute or relative paths. These paths can be brought into scope with a &lt;code&gt;use&lt;/code&gt; statement so you can use a shorter path for multiple uses of the item in that scope. Module code is private by default, but you can make definitions public by adding the &lt;code&gt;pub&lt;/code&gt; keyword.</target>
        </trans-unit>
        <trans-unit id="d3bfbc1a861d0c5db39d3370b938cda066a42dac" translate="yes" xml:space="preserve">
          <source>Rust memory safety is based on this rule: Given an object &lt;code&gt;T&lt;/code&gt;, it is only possible to have one of the following:</source>
          <target state="translated">Rustメモリーの安全性はこのルールに基づいています。オブジェクト &lt;code&gt;T&lt;/code&gt; が指定されている場合、次のいずれかのみを使用できます。</target>
        </trans-unit>
        <trans-unit id="86b4aec68c04f34ea15c657bcbc637e9391e2aab" translate="yes" xml:space="preserve">
          <source>Rust needs to know how much memory to allocate for any value of a particular type, and all values of a type must use the same amount of memory. If Rust allowed us to write this code, these two &lt;code&gt;str&lt;/code&gt; values would need to take up the same amount of space. But they have different lengths: &lt;code&gt;s1&lt;/code&gt; needs 12 bytes of storage and &lt;code&gt;s2&lt;/code&gt; needs 15. This is why it&amp;rsquo;s not possible to create a variable holding a dynamically sized type.</source>
          <target state="translated">Rustは特定の型の値に割り当てるメモリ量を知る必要があり、型のすべての値は同じ量のメモリを使用する必要があります。 Rustがこのコードの記述を許可した場合、これら2つの &lt;code&gt;str&lt;/code&gt; 値は同じ量のスペースを占める必要があります。ただし、長さは異なります &lt;code&gt;s1&lt;/code&gt; は12バイトのストレージが必要で、 &lt;code&gt;s2&lt;/code&gt; には15 バイトが必要です。このため、動的にサイズ設定される型を保持する変数を作成することはできません。</target>
        </trans-unit>
        <trans-unit id="1b76d3101d775a50daedde876a1dc0606265c7b7" translate="yes" xml:space="preserve">
          <source>Rust needs to know what types will be in the vector at compile time so it knows exactly how much memory on the heap will be needed to store each element. A secondary advantage is that we can be explicit about what types are allowed in this vector. If Rust allowed a vector to hold any type, there would be a chance that one or more of the types would cause errors with the operations performed on the elements of the vector. Using an enum plus a &lt;code&gt;match&lt;/code&gt; expression means that Rust will ensure at compile time that every possible case is handled, as discussed in Chapter 6.</source>
          <target state="translated">Rustは、コンパイル時にベクターにどの型が入るかを知る必要があるため、各要素を格納するために必要なヒープ上のメモリ量を正確に把握します。副次的な利点は、このベクトルで許可される型について明示的にできることです。 Rustがベクトルに任意の型を保持することを許可した場合、1つ以上の型がベクトルの要素に対して実行される操作でエラーを引き起こす可能性があります。 enumと &lt;code&gt;match&lt;/code&gt; 式を使用すると、第6章で説明するように、Rustはコンパイル時にすべての可能なケースが処理されることを保証します。</target>
        </trans-unit>
        <trans-unit id="2c1cfd45b3ac0b28a948d8b4a2f4de2f8d870925" translate="yes" xml:space="preserve">
          <source>Rust only looks at the signature of the called function, as such it must already specify all requirements that will be used for every type parameter.</source>
          <target state="translated">Rust は呼び出された関数のシグネチャだけを見るので、すべての型パラメータに使用されるすべての要件をすでに指定している必要があります。</target>
        </trans-unit>
        <trans-unit id="1ed887a173c68a2fae7555ba7b47d26cdae56e96" translate="yes" xml:space="preserve">
          <source>Rust only supports variadic parameters for interoperability with C code in its FFI. As such, variadic parameters can only be used with functions which are using the C ABI. Examples of erroneous code:</source>
          <target state="translated">Rust は、FFI の C コードとの相互運用性のために、バリアディック パラメータのみをサポートしています。そのため、バリアディックパラメータは C ABI を使用している関数でのみ使用できます。誤ったコードの例。</target>
        </trans-unit>
        <trans-unit id="8006f3ad63420cf97d2756a811368615cb17cc79" translate="yes" xml:space="preserve">
          <source>Rust only supports variadic parameters for interoperability with C code in its FFI. As such, variadic parameters can only be used with functions which are using the C ABI. To fix such code, put them in an extern &quot;C&quot; block:</source>
          <target state="translated">Rust は、FFI の C コードとの相互運用性のために、バリアディック パラメータのみをサポートしています。そのため、バリアディックパラメータは C ABI を使用している関数でのみ使用できます。そのようなコードを修正するには、外部の &quot;C&quot; ブロックに入れてください。</target>
        </trans-unit>
        <trans-unit id="e7d6720314fd90db94a4f0505ed35c899b634d9a" translate="yes" xml:space="preserve">
          <source>Rust provides different ways of interpreting the raw string data that computers store so that each program can choose the interpretation it needs, no matter what human language the data is in.</source>
          <target state="translated">Rustは、コンピュータが保存する生の文字列データを解釈するための様々な方法を提供しており、データがどのような人間の言語であっても、各プログラムが必要な解釈を選択できるようになっています。</target>
        </trans-unit>
        <trans-unit id="1a9d1ac483b5a0d5a30d4a6b20b099a21ce7d1ed" translate="yes" xml:space="preserve">
          <source>Rust releases every six weeks, like clockwork. If you know the date of one Rust release, you can know the date of the next one: it&amp;rsquo;s six weeks later. A nice aspect of having releases scheduled every six weeks is that the next train is coming soon. If a feature happens to miss a particular release, there&amp;rsquo;s no need to worry: another one is happening in a short time! This helps reduce pressure to sneak possibly unpolished features in close to the release deadline.</source>
          <target state="translated">時計仕掛けのように、Rustは6週間ごとにリリースします。 1つのRustリリースの日付がわかっている場合、次のリリースの日付を知ることができます。それは6週間後です。 6週間ごとにリリースをスケジュールすることの良い点は、次の列車がすぐに来るということです。機能が特定のリリースを見逃した場合でも、心配する必要はありません。別の機能が短時間で発生します！これにより、リリースの期限近くに、未研磨の機能をこっそりとこなすプレッシャーを軽減できます。</target>
        </trans-unit>
        <trans-unit id="14633826285dcf815682cf46efd1f87adcad6f15" translate="yes" xml:space="preserve">
          <source>Rust represents owned strings with the &lt;a href=&quot;../string/struct.string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; type, and borrowed slices of strings with the &lt;a href=&quot;../primitive.str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt; primitive. Both are always in UTF-8 encoding, and may contain nul bytes in the middle, i.e., if you look at the bytes that make up the string, there may be a &lt;code&gt;\0&lt;/code&gt; among them. Both &lt;code&gt;String&lt;/code&gt; and &lt;code&gt;str&lt;/code&gt; store their length explicitly; there are no nul terminators at the end of strings like in C.</source>
          <target state="translated">Rustは所有する文字列を&lt;a href=&quot;../string/struct.string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;タイプで表し、借りた文字列のスライスを&lt;a href=&quot;../primitive.str&quot;&gt; &lt;code&gt;str&lt;/code&gt; &lt;/a&gt;プリミティブで表します。どちらも常にUTF-8エンコーディングであり、途中にnulバイトが含まれる可能性があります。つまり、文字列を構成するバイトを見ると、それらの間に &lt;code&gt;\0&lt;/code&gt; がある可能性があります。 &lt;code&gt;String&lt;/code&gt; と &lt;code&gt;str&lt;/code&gt; はどちらも長さを明示的に保存します。 Cのように文字列の終わりにNULターミネータはありません。</target>
        </trans-unit>
        <trans-unit id="b115ba9be271d9cb748571eff2d355ec3f4582c1" translate="yes" xml:space="preserve">
          <source>Rust represents owned strings with the &lt;a href=&quot;../string/struct.string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; type, and borrowed slices of strings with the &lt;a href=&quot;https://doc.rust-lang.org/nightly/std/primitive.str.html&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt; primitive. Both are always in UTF-8 encoding, and may contain nul bytes in the middle, i.e., if you look at the bytes that make up the string, there may be a &lt;code&gt;\0&lt;/code&gt; among them. Both &lt;code&gt;String&lt;/code&gt; and &lt;code&gt;str&lt;/code&gt; store their length explicitly; there are no nul terminators at the end of strings like in C.</source>
          <target state="translated">Rust represents owned strings with the &lt;a href=&quot;../string/struct.string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt; type, and borrowed slices of strings with the &lt;a href=&quot;https://doc.rust-lang.org/nightly/std/primitive.str.html&quot;&gt; &lt;code&gt;str&lt;/code&gt; &lt;/a&gt; primitive. Both are always in UTF-8 encoding, and may contain nul bytes in the middle, i.e., if you look at the bytes that make up the string, there may be a &lt;code&gt;\0&lt;/code&gt; among them. Both &lt;code&gt;String&lt;/code&gt; and &lt;code&gt;str&lt;/code&gt; store their length explicitly; there are no nul terminators at the end of strings like in C.</target>
        </trans-unit>
        <trans-unit id="a1035dbea9907a4eef978b13fc5c640f49f6ff75" translate="yes" xml:space="preserve">
          <source>Rust substitutes the &lt;code&gt;*&lt;/code&gt; operator with a call to the &lt;code&gt;deref&lt;/code&gt; method and then a plain dereference so we don&amp;rsquo;t have to think about whether or not we need to call the &lt;code&gt;deref&lt;/code&gt; method. This Rust feature lets us write code that functions identically whether we have a regular reference or a type that implements &lt;code&gt;Deref&lt;/code&gt;.</source>
          <target state="translated">Rustは &lt;code&gt;*&lt;/code&gt; 演算子を &lt;code&gt;deref&lt;/code&gt; メソッドの呼び出しで置き換え、次に単純な逆参照を行うので、 &lt;code&gt;deref&lt;/code&gt; メソッドを呼び出す必要があるかどうかを考える必要はありません。このRust機能を使用すると、通常の参照であっても、 &lt;code&gt;Deref&lt;/code&gt; を実装する型であっても、同じように機能するコードを作成できます。</target>
        </trans-unit>
        <trans-unit id="aef02265ae4e5b20b25f7169f2eb182b32c41901" translate="yes" xml:space="preserve">
          <source>Rust supports four loop expressions:</source>
          <target state="translated">Rustは4つのループ式をサポートしています。</target>
        </trans-unit>
        <trans-unit id="39846c5622487afb1918e636190776d3ba8814ed" translate="yes" xml:space="preserve">
          <source>Rust supports the basic mathematical operations you&amp;rsquo;d expect for all of the number types: addition, subtraction, multiplication, division, and remainder. The following code shows how you&amp;rsquo;d use each one in a &lt;code&gt;let&lt;/code&gt; statement:</source>
          <target state="translated">Rustは、加算、減算、乗算、除算、剰余など、すべての数値タイプに期待される基本的な数学演算をサポートしています。次のコードは、 &lt;code&gt;let&lt;/code&gt; ステートメントでそれぞれをどのように使用するかを示しています。</target>
        </trans-unit>
        <trans-unit id="f198f3079c114496b224a182d1c6f07406996d50" translate="yes" xml:space="preserve">
          <source>Rust takes a different path: the memory is automatically returned once the variable that owns it goes out of scope. Here&amp;rsquo;s a version of our scope example from Listing 4-1 using a &lt;code&gt;String&lt;/code&gt; instead of a string literal:</source>
          <target state="translated">Rustは別のパスを使用します。メモリを所有する変数がスコープ外になると、メモリは自動的に返されます。ここで使用してリスト4-1からの私達の範囲の例のバージョンだ &lt;code&gt;String&lt;/code&gt; 文字列リテラルの代わりには：</target>
        </trans-unit>
        <trans-unit id="995e5bc0763da76eea3b582149feb3d425499836" translate="yes" xml:space="preserve">
          <source>Rust tells us that our code ignored the &lt;code&gt;Result&lt;/code&gt; value and the &lt;code&gt;Result&lt;/code&gt; value might indicate that an error occurred. But we&amp;rsquo;re not checking to see whether or not there was an error, and the compiler reminds us that we probably meant to have some error-handling code here! Let&amp;rsquo;s rectify that problem now.</source>
          <target state="translated">Rustは、コードが &lt;code&gt;Result&lt;/code&gt; 値を無視し、 &lt;code&gt;Result&lt;/code&gt; 値がエラーが発生したことを示す可能性があることを示しています。しかし、エラーが発生したかどうかを確認することはしていません。コンパイラーは、おそらくここにエラー処理コードを含めるつもりだったことを思い出させます！今すぐその問題を修正しましょう。</target>
        </trans-unit>
        <trans-unit id="703d493ad79917201eb0acd3b321d61700389d3a" translate="yes" xml:space="preserve">
          <source>Rust treats all function calls as sugar for a more explicit, &lt;a href=&quot;../paths#qualified-paths&quot;&gt;fully-qualified syntax&lt;/a&gt;. Upon compilation, Rust will desugar all function calls into the explicit form. Rust may sometimes require you to qualify function calls with trait, depending on the ambiguity of a call in light of in-scope items.</source>
          <target state="translated">Rust treats all function calls as sugar for a more explicit, &lt;a href=&quot;../paths#qualified-paths&quot;&gt;fully-qualified syntax&lt;/a&gt;. Upon compilation, Rust will desugar all function calls into the explicit form. Rust may sometimes require you to qualify function calls with trait, depending on the ambiguity of a call in light of in-scope items.</target>
        </trans-unit>
        <trans-unit id="438b72da10259b8d5d86767186b4d727d3dbea23" translate="yes" xml:space="preserve">
          <source>Rust treats all function calls as sugar for a more explicit, fully-qualified syntax. Upon compilation, Rust will desugar all function calls into the explicit form. Rust may sometimes require you to qualify function calls with trait, depending on the ambiguity of a call in light of in-scope items.</source>
          <target state="translated">Rust は、より明示的で完全修飾された構文のために、すべての関数呼び出しを砂糖として扱います。コンパイル時に、Rust はすべての関数呼び出しを明示的な形式に脱糖します。Rust は、スコープ内の項目に照らして呼び出しの曖昧さに応じて、関数呼び出しを trait で修飾する必要がある場合があります。</target>
        </trans-unit>
        <trans-unit id="d2dc323b3d2c25d779075b9140a6d1e2c6e50939" translate="yes" xml:space="preserve">
          <source>Rust types can be classified in various useful ways according to their intrinsic properties. These classifications are represented as traits.</source>
          <target state="translated">錆の種類は、その固有の特性に応じて様々な有用な方法で分類することができます。これらの分類は形質として表されます。</target>
        </trans-unit>
        <trans-unit id="f77a840183554b84c65d125ee38f75c043f2f8d3" translate="yes" xml:space="preserve">
          <source>Rust uses the WhatWG Infra Standard's &lt;a href=&quot;https://infra.spec.whatwg.org/#ascii-whitespace&quot;&gt;definition of ASCII whitespace&lt;/a&gt;. There are several other definitions in wide use. For instance, &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap07.html#tag_07_03_01&quot;&gt;the POSIX locale&lt;/a&gt; includes U+000B VERTICAL TAB as well as all the above characters, but&amp;mdash;from the very same specification&amp;mdash;&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_06_05&quot;&gt;the default rule for &quot;field splitting&quot; in the Bourne shell&lt;/a&gt; considers &lt;em&gt;only&lt;/em&gt; SPACE, HORIZONTAL TAB, and LINE FEED as whitespace.</source>
          <target state="translated">RustはWhatWG Infra Standardの&lt;a href=&quot;https://infra.spec.whatwg.org/#ascii-whitespace&quot;&gt;ASCII空白&lt;/a&gt;の定義を使用しています。広く使用されている他のいくつかの定義があります。たとえば&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap07.html#tag_07_03_01&quot;&gt;、POSIXロケールに&lt;/a&gt;はU + 000B VERTICAL TABと上記のすべての文字が含まれますが、まったく同じ仕様に&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_06_05&quot;&gt;あるため、Bourneシェルの「フィールド分割」のデフォルトルールでは、&lt;/a&gt; SPACE、HORIZONTAL TAB、およびLINE FEED &lt;em&gt;のみが&lt;/em&gt;考慮されます。空白として。</target>
        </trans-unit>
        <trans-unit id="fdff20aa431c99de38501d6abd35bac6090fd863" translate="yes" xml:space="preserve">
          <source>Rust uses the WhatWG Infra Standard's &lt;a href=&quot;https://infra.spec.whatwg.org/#ascii-whitespace&quot;&gt;definition of ASCII whitespace&lt;/a&gt;. There are several other definitions in wide use. For instance, &lt;a href=&quot;https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap07.html#tag_07_03_01&quot;&gt;the POSIX locale&lt;/a&gt; includes U+000B VERTICAL TAB as well as all the above characters, but&amp;mdash;from the very same specification&amp;mdash;&lt;a href=&quot;https://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_06_05&quot;&gt;the default rule for &quot;field splitting&quot; in the Bourne shell&lt;/a&gt; considers &lt;em&gt;only&lt;/em&gt; SPACE, HORIZONTAL TAB, and LINE FEED as whitespace.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80250cb612ec2f012c7bb709a162afa7cc99b219" translate="yes" xml:space="preserve">
          <source>Rust warns that you haven&amp;rsquo;t used the &lt;code&gt;Result&lt;/code&gt; value returned from &lt;code&gt;read_line&lt;/code&gt;, indicating that the program hasn&amp;rsquo;t handled a possible error.</source>
          <target state="translated">Rust は、 &lt;code&gt;read_line&lt;/code&gt; から返された &lt;code&gt;Result&lt;/code&gt; 値を使用していないことを警告し、プログラムがエラーの可能性を処理していないことを示します。</target>
        </trans-unit>
        <trans-unit id="63dc74fc48d1edb7e36f8812dc661ae955f4d16d" translate="yes" xml:space="preserve">
          <source>Rust will first call &lt;code&gt;Drop::drop&lt;/code&gt; for &lt;code&gt;_x&lt;/code&gt; and then for both &lt;code&gt;_x.one&lt;/code&gt; and &lt;code&gt;_x.two&lt;/code&gt;, meaning that running this will print</source>
          <target state="translated">Rust will first call &lt;code&gt;Drop::drop&lt;/code&gt; for &lt;code&gt;_x&lt;/code&gt; and then for both &lt;code&gt;_x.one&lt;/code&gt; and &lt;code&gt;_x.two&lt;/code&gt; , meaning that running this will print</target>
        </trans-unit>
        <trans-unit id="99846f3671ba325d4d0a5778686542964bf3788a" translate="yes" xml:space="preserve">
          <source>Rust&amp;rsquo;s &lt;code&gt;char&lt;/code&gt; type is four bytes in size and represents a Unicode Scalar Value, which means it can represent a lot more than just ASCII. Accented letters; Chinese, Japanese, and Korean characters; emoji; and zero-width spaces are all valid &lt;code&gt;char&lt;/code&gt; values in Rust. Unicode Scalar Values range from &lt;code&gt;U+0000&lt;/code&gt; to &lt;code&gt;U+D7FF&lt;/code&gt; and &lt;code&gt;U+E000&lt;/code&gt; to &lt;code&gt;U+10FFFF&lt;/code&gt; inclusive. However, a &amp;ldquo;character&amp;rdquo; isn&amp;rsquo;t really a concept in Unicode, so your human intuition for what a &amp;ldquo;character&amp;rdquo; is may not match up with what a &lt;code&gt;char&lt;/code&gt; is in Rust. We&amp;rsquo;ll discuss this topic in detail in &lt;a href=&quot;ch08-02-strings#storing-utf-8-encoded-text-with-strings&quot;&gt;&amp;ldquo;Storing UTF-8 Encoded Text with Strings&amp;rdquo;&lt;/a&gt; in Chapter 8.</source>
          <target state="translated">Rustの &lt;code&gt;char&lt;/code&gt; 型のサイズは4バイトで、Unicodeスカラー値を表します。つまり、ASCIIだけでなく、それ以上のものを表すことができます。アクセント付きの手紙;中国語、日本語、韓国語の文字。絵文字;ゼロ幅のスペースはすべてRustで有効な &lt;code&gt;char&lt;/code&gt; 値です。 Unicodeのスカラ値は、範囲 &lt;code&gt;U+0000&lt;/code&gt; に &lt;code&gt;U+D7FF&lt;/code&gt; と &lt;code&gt;U+E000&lt;/code&gt; に &lt;code&gt;U+10FFFF&lt;/code&gt; の包括的。ただし、「文字」は実際にはUnicodeの概念ではないため、「文字」が何であるかに対する人間の直感は、Rustの &lt;code&gt;char&lt;/code&gt; と一致しない場合があります。このトピックについては、第8章の&lt;a href=&quot;ch08-02-strings#storing-utf-8-encoded-text-with-strings&quot;&gt;「文字列を含むUTF-8エンコードテキストの保存」&lt;/a&gt;で詳しく説明します。</target>
        </trans-unit>
        <trans-unit id="a5a4edf491f9a6786fd28bf09333db3dadc399c0" translate="yes" xml:space="preserve">
          <source>Rust&amp;rsquo;s borrow checker can&amp;rsquo;t understand that we&amp;rsquo;re borrowing different parts of the slice; it only knows that we&amp;rsquo;re borrowing from the same slice twice. Borrowing different parts of a slice is fundamentally okay because the two slices aren&amp;rsquo;t overlapping, but Rust isn&amp;rsquo;t smart enough to know this. When we know code is okay, but Rust doesn&amp;rsquo;t, it&amp;rsquo;s time to reach for unsafe code.</source>
          <target state="translated">Rustの借用チェッカーは、スライスのさまざまな部分を借用していることを理解できません。同じスライスから2回借りていることだけがわかります。2つのスライスが重なっていないため、スライスの異なる部分を借りることは基本的に問題ありませんが、Rustはこれを知るのに十分なほどスマートではありません。コードが大丈夫であることがわかっていても、Rustがそうでない場合は、安全でないコードに手を差し伸べる時が来ました。</target>
        </trans-unit>
        <trans-unit id="8c55a2a82b7377101f0771c9bcd044aae6cf6540" translate="yes" xml:space="preserve">
          <source>Rust&amp;rsquo;s central feature is &lt;em&gt;ownership&lt;/em&gt;. Although the feature is straightforward to explain, it has deep implications for the rest of the language.</source>
          <target state="translated">Rustの中心的な機能は&lt;em&gt;所有権&lt;/em&gt;です。この機能は簡単に説明できますが、他の言語にも深い影響があります。</target>
        </trans-unit>
        <trans-unit id="5d2271b00baf8fce0728901fd42c87e83d55abd0" translate="yes" xml:space="preserve">
          <source>Rust&amp;rsquo;s closures are anonymous functions you can save in a variable or pass as arguments to other functions. You can create the closure in one place and then call the closure to evaluate it in a different context. Unlike functions, closures can capture values from the scope in which they&amp;rsquo;re defined. We&amp;rsquo;ll demonstrate how these closure features allow for code reuse and behavior customization.</source>
          <target state="translated">Rustのクロージャーは、変数に保存したり、引数として他の関数に渡したりできる無名関数です。 1つの場所でクロージャを作成してから、そのクロージャを呼び出して別のコンテキストで評価することができます。関数とは異なり、クロージャは、それらが定義されているスコープから値をキャプチャできます。これらのクロージャ機能がコードの再利用と動作のカスタマイズをどのように可能にするかを示します。</target>
        </trans-unit>
        <trans-unit id="fd4c91ef23d0c1a58d5181596522ff41f1f360e9" translate="yes" xml:space="preserve">
          <source>Rust&amp;rsquo;s commitment to reliability extends to error handling. Errors are a fact of life in software, so Rust has a number of features for handling situations in which something goes wrong. In many cases, Rust requires you to acknowledge the possibility of an error and take some action before your code will compile. This requirement makes your program more robust by ensuring that you&amp;rsquo;ll discover errors and handle them appropriately before you&amp;rsquo;ve deployed your code to production!</source>
          <target state="translated">Rustの信頼性への取り組みは、エラー処理にも及びます。エラーはソフトウェアの日常の事実であるため、Rustには、問題が発生した状況を処理するための多数の機能があります。多くの場合、Rustでは、エラーが発生する可能性を認識し、コードをコンパイルする前に何らかのアクションを実行する必要があります。この要件により、コードを本番環境にデプロイする前にエラーを検出して適切に処理できるため、プログラムがより堅牢になります。</target>
        </trans-unit>
        <trans-unit id="50fd346e441893c513c7336bf8c9281fb59b1c1a" translate="yes" xml:space="preserve">
          <source>Rust&amp;rsquo;s design has taken inspiration from many existing languages and techniques, and one significant influence is &lt;em&gt;functional programming&lt;/em&gt;. Programming in a functional style often includes using functions as values by passing them in arguments, returning them from other functions, assigning them to variables for later execution, and so forth.</source>
          <target state="translated">Rustの設計は、多くの既存の言語と技法からインスピレーションを得ており、重要な影響の1つは&lt;em&gt;関数型プログラミング&lt;/em&gt;です。関数スタイルでのプログラミングには、多くの場合、関数を引数として渡すことによる値としての使用、他の関数からの戻り、後で実行するための変数への割り当てなどが含まれます。</target>
        </trans-unit>
        <trans-unit id="4cc35a990ff86bc53c3ee8555d1b3d65805dc72a" translate="yes" xml:space="preserve">
          <source>Rust&amp;rsquo;s error handling features are designed to help you write more robust code. The &lt;code&gt;panic!&lt;/code&gt; macro signals that your program is in a state it can&amp;rsquo;t handle and lets you tell the process to stop instead of trying to proceed with invalid or incorrect values. The &lt;code&gt;Result&lt;/code&gt; enum uses Rust&amp;rsquo;s type system to indicate that operations might fail in a way that your code could recover from. You can use &lt;code&gt;Result&lt;/code&gt; to tell code that calls your code that it needs to handle potential success or failure as well. Using &lt;code&gt;panic!&lt;/code&gt; and &lt;code&gt;Result&lt;/code&gt; in the appropriate situations will make your code more reliable in the face of inevitable problems.</source>
          <target state="translated">Rustのエラー処理機能は、より堅牢なコードを記述できるように設計されています。 &lt;code&gt;panic!&lt;/code&gt; マクロは、プログラムが処理できない状態であることを通知し、無効な値や誤った値で処理を続行するのではなく、プロセスを停止するように指示できます。 &lt;code&gt;Result&lt;/code&gt; 列挙型は、操作があなたのコードから回復できるような方法で失敗する可能性があることを示すために、錆の型システムを使用しています。 &lt;code&gt;Result&lt;/code&gt; を使用して、コードを呼び出すコードに、成功または失敗の可能性も処理する必要があることを伝えることができます。使用して &lt;code&gt;panic!&lt;/code&gt; そして &lt;code&gt;Result&lt;/code&gt; 、適切な状況では避けられない問題に直面してあなたのコードはより信頼性の高いようになります。</target>
        </trans-unit>
        <trans-unit id="0978df93a2cae0fac3519f383fbc09538259dfbb" translate="yes" xml:space="preserve">
          <source>Rust&amp;rsquo;s memory safety guarantees make it difficult, but not impossible, to accidentally create memory that is never cleaned up (known as a &lt;em&gt;memory leak&lt;/em&gt;). Preventing memory leaks entirely is not one of Rust&amp;rsquo;s guarantees in the same way that disallowing data races at compile time is, meaning memory leaks are memory safe in Rust. We can see that Rust allows memory leaks by using &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; and &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt;: it&amp;rsquo;s possible to create references where items refer to each other in a cycle. This creates memory leaks because the reference count of each item in the cycle will never reach 0, and the values will never be dropped.</source>
          <target state="translated">Rustのメモリ安全性保証により、クリーンアップされないメモリを誤って作成することは困難ですが、不可能ではありません（&lt;em&gt;メモリリークと&lt;/em&gt;呼ばれ&lt;em&gt;ます&lt;/em&gt;）。メモリリークを完全に防止することは、コンパイル時にデータの競合を禁止するのと同じように、Rustの保証の1つではありません。つまり、メモリリークはRustでメモリセーフです。 Rustは &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; と &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; を使用してメモリリークを許可していることがわかります。循環内でアイテムが相互に参照する参照を作成することが可能です。これにより、サイクル内の各アイテムの参照カウントが0になることはなく、値が削除されることもないため、メモリリークが発生します。</target>
        </trans-unit>
        <trans-unit id="c83ae6d5141700914f4870b9a16bff718d75b311" translate="yes" xml:space="preserve">
          <source>Rust&amp;rsquo;s ownership rules have saved us again! We got an error from the code in Listing 16-3 because Rust was being conservative and only borrowing &lt;code&gt;v&lt;/code&gt; for the thread, which meant the main thread could theoretically invalidate the spawned thread&amp;rsquo;s reference. By telling Rust to move ownership of &lt;code&gt;v&lt;/code&gt; to the spawned thread, we&amp;rsquo;re guaranteeing Rust that the main thread won&amp;rsquo;t use &lt;code&gt;v&lt;/code&gt; anymore. If we change Listing 16-4 in the same way, we&amp;rsquo;re then violating the ownership rules when we try to use &lt;code&gt;v&lt;/code&gt; in the main thread. The &lt;code&gt;move&lt;/code&gt; keyword overrides Rust&amp;rsquo;s conservative default of borrowing; it doesn&amp;rsquo;t let us violate the ownership rules.</source>
          <target state="translated">Rustの所有権ルールは私たちを再び救ってくれました！リスト16-3のコードからエラーが発生しました。Rustは保守的であり、スレッドの &lt;code&gt;v&lt;/code&gt; しか借りていなかったためです。つまり、メインスレッドは、生成されたスレッドの参照を理論的に無効にできました。 Rustに &lt;code&gt;v&lt;/code&gt; の所有権を生成されたスレッドに移動するように指示することで、メインスレッドが &lt;code&gt;v&lt;/code&gt; を使用しないことをRustに保証します。リスト16-4を同じ方法で変更すると、メインスレッドで &lt;code&gt;v&lt;/code&gt; を使用しようとしたときに所有権規則に違反することになります。 &lt;code&gt;move&lt;/code&gt; 借り入れのキーワードオーバーライド錆の保守的なデフォルト。所有権のルールに違反することはできません。</target>
        </trans-unit>
        <trans-unit id="acb5b5af69714850a9eaace832e90521d0ab51b4" translate="yes" xml:space="preserve">
          <source>Rust&amp;rsquo;s patterns are very useful in that they help distinguish between different kinds of data. When used in &lt;code&gt;match&lt;/code&gt; expressions, Rust ensures your patterns cover every possible value, or your program won&amp;rsquo;t compile. Patterns in &lt;code&gt;let&lt;/code&gt; statements and function parameters make those constructs more useful, enabling the destructuring of values into smaller parts at the same time as assigning to variables. We can create simple or complex patterns to suit our needs.</source>
          <target state="translated">Rustのパターンは、さまざまな種類のデータを区別するのに役立つという点で非常に便利です。 &lt;code&gt;match&lt;/code&gt; 式で使用すると、Rustはパターンがすべての可能な値をカバーするようにします。そうしないと、プログラムはコンパイルされません。 &lt;code&gt;let&lt;/code&gt; ステートメントと関数パラメーターのパターンは、これらの構成要素をより便利にし、変数への割り当てと同時に値をより小さな部分に分解できるようにします。ニーズに合わせて単純なパターンや複雑なパターンを作成できます。</target>
        </trans-unit>
        <trans-unit id="dce982e836868a2e5286452911eb980f53708aba" translate="yes" xml:space="preserve">
          <source>Rust&amp;rsquo;s speed, safety, single binary output, and cross-platform support make it an ideal language for creating command line tools, so for our project, we&amp;rsquo;ll make our own version of the classic command line tool &lt;code&gt;grep&lt;/code&gt; (&lt;strong&gt;g&lt;/strong&gt;lobally search a &lt;strong&gt;r&lt;/strong&gt;egular &lt;strong&gt;e&lt;/strong&gt;xpression and &lt;strong&gt;p&lt;/strong&gt;rint). In the simplest use case, &lt;code&gt;grep&lt;/code&gt; searches a specified file for a specified string. To do so, &lt;code&gt;grep&lt;/code&gt; takes as its arguments a filename and a string. Then it reads the file, finds lines in that file that contain the string argument, and prints those lines.</source>
          <target state="translated">Rustの速度、安全性、単一のバイナリ出力、およびクロスプラットフォームサポートにより、Rustはコマンドラインツールを作成するための理想的な言語となっているため、プロジェクトでは、独自のバージョンの従来のコマンドラインツール &lt;code&gt;grep&lt;/code&gt; （&lt;strong&gt;g&lt;/strong&gt; lobally search &lt;strong&gt;r&lt;/strong&gt; egular &lt;strong&gt;e&lt;/strong&gt; xpression and &lt;strong&gt;p&lt;/strong&gt; rint ）。最も簡単な使用例では、 &lt;code&gt;grep&lt;/code&gt; は指定されたファイルで指定された文字列を検索します。そのために、 &lt;code&gt;grep&lt;/code&gt; は引数としてファイル名と文字列を受け取ります。次に、ファイルを読み取り、文字列引数を含むそのファイル内の行を見つけて、それらの行を出力します。</target>
        </trans-unit>
        <trans-unit id="c6ca1c192ffb4864e88d3222cca77235e6772b0f" translate="yes" xml:space="preserve">
          <source>Rust&amp;rsquo;s standard library also includes a number of other string types, such as &lt;code&gt;OsString&lt;/code&gt;, &lt;code&gt;OsStr&lt;/code&gt;, &lt;code&gt;CString&lt;/code&gt;, and &lt;code&gt;CStr&lt;/code&gt;. Library crates can provide even more options for storing string data. See how those names all end in &lt;code&gt;String&lt;/code&gt; or &lt;code&gt;Str&lt;/code&gt;? They refer to owned and borrowed variants, just like the &lt;code&gt;String&lt;/code&gt; and &lt;code&gt;str&lt;/code&gt; types you&amp;rsquo;ve seen previously. These string types can store text in different encodings or be represented in memory in a different way, for example. We won&amp;rsquo;t discuss these other string types in this chapter; see their API documentation for more about how to use them and when each is appropriate.</source>
          <target state="translated">Rustの標準ライブラリには、 &lt;code&gt;OsString&lt;/code&gt; 、 &lt;code&gt;OsStr&lt;/code&gt; 、 &lt;code&gt;CString&lt;/code&gt; 、 &lt;code&gt;CStr&lt;/code&gt; などの他の文字列タイプも多数含まれています。ライブラリクレートは、文字列データを保存するためのさらに多くのオプションを提供できます。それらの名前がす​​べて &lt;code&gt;String&lt;/code&gt; または &lt;code&gt;Str&lt;/code&gt; で終わる方法を確認してください。これらは、以前に見た &lt;code&gt;String&lt;/code&gt; 型と &lt;code&gt;str&lt;/code&gt; 型と同様に、所有および借用したバリアントを参照します。これらの文字列タイプは、テキストを異なるエンコーディングで格納したり、メモリ内で異なる方法で表現したりできます。この章では、これらの他の文字列型については説明しません。それらの使用方法とそれぞれが適切な場合の詳細については、APIドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="aa9ff7a849c1640cd4cc865fda33cc9c81cac848" translate="yes" xml:space="preserve">
          <source>Rust&amp;rsquo;s standard library includes a number of very useful data structures called &lt;em&gt;collections&lt;/em&gt;. Most other data types represent one specific value, but collections can contain multiple values. Unlike the built-in array and tuple types, the data these collections point to is stored on the heap, which means the amount of data does not need to be known at compile time and can grow or shrink as the program runs. Each kind of collection has different capabilities and costs, and choosing an appropriate one for your current situation is a skill you&amp;rsquo;ll develop over time. In this chapter, we&amp;rsquo;ll discuss three collections that are used very often in Rust programs:</source>
          <target state="translated">Rustの標準ライブラリには、&lt;em&gt;コレクション&lt;/em&gt;と呼ばれる非常に便利なデータ構造が多数含まれてい&lt;em&gt;ます&lt;/em&gt;。他のほとんどのデータ型は1つの特定の値を表しますが、コレクションには複数の値を含めることができます。組み込みの配列およびタプル型とは異なり、これらのコレクションが指すデータはヒープに格納されます。つまり、コンパイル時にデータ量を知る必要がなく、プログラムの実行に伴ってデータ量が増減する可能性があります。コレクションの種類ごとに異なる機能とコストがあり、現在の状況に適切なコレクションを選択することは、時間をかけて開発するスキルです。この章では、Rustプログラムで頻繁に使用される3つのコレクションについて説明します。</target>
        </trans-unit>
        <trans-unit id="98e2048971bf413ef392b0aef43b635b310936b3" translate="yes" xml:space="preserve">
          <source>Rust&amp;rsquo;s testing features provide a way to specify how code should function to ensure it continues to work as you expect, even as you make changes. Unit tests exercise different parts of a library separately and can test private implementation details. Integration tests check that many parts of the library work together correctly, and they use the library&amp;rsquo;s public API to test the code in the same way external code will use it. Even though Rust&amp;rsquo;s type system and ownership rules help prevent some kinds of bugs, tests are still important to reduce logic bugs having to do with how your code is expected to behave.</source>
          <target state="translated">Rustのテスト機能は、変更を加えても、コードが期待どおりに動作し続けることを保証するためにコードがどのように機能するかを指定する方法を提供します。単体テストは、ライブラリのさまざまな部分を個別に実行し、プライベートな実装の詳細をテストできます。統合テストは、ライブラリの多くの部分が正しく連携していることを確認し、ライブラリのパブリックAPIを使用して、外部コードが使用するのと同じ方法でコードをテストします。Rustの型システムと所有権ルールは、ある種のバグを防ぐのに役立ちますが、コードがどのように動作するかを想定してロジックのバグを減らすには、テストが依然として重要です。</target>
        </trans-unit>
        <trans-unit id="acb8e83983bd289d54829daf197d511dbb760356" translate="yes" xml:space="preserve">
          <source>Rust's &quot;try catch&quot; construct which invokes the function pointer &lt;code&gt;f&lt;/code&gt; with the data pointer &lt;code&gt;data&lt;/code&gt;.</source>
          <target state="translated">データポインタ &lt;code&gt;data&lt;/code&gt; で関数ポインタ &lt;code&gt;f&lt;/code&gt; を呼び出すRustの「try catch」構成。</target>
        </trans-unit>
        <trans-unit id="560fa4c9da40b172f0797c154c93d28849453df3" translate="yes" xml:space="preserve">
          <source>Rust's &quot;try catch&quot; construct which invokes the function pointer &lt;code&gt;try_fn&lt;/code&gt; with the data pointer &lt;code&gt;data&lt;/code&gt;.</source>
          <target state="translated">Rust's &quot;try catch&quot; construct which invokes the function pointer &lt;code&gt;try_fn&lt;/code&gt; with the data pointer &lt;code&gt;data&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8dbe1f8233c456628e66e6df4dd93fab7b6e6c9e" translate="yes" xml:space="preserve">
          <source>Rust's &lt;code&gt;for&lt;/code&gt; loop syntax is actually sugar for iterators. Here's a basic example of &lt;code&gt;for&lt;/code&gt;:</source>
          <target state="translated">Rustの &lt;code&gt;for&lt;/code&gt; ループ構文は、実際にはイテレーターにとって砂糖です。 &lt;code&gt;for&lt;/code&gt; の基本的な例を次に示します。</target>
        </trans-unit>
        <trans-unit id="c2b907ea71a52b75f8ec4f141b77e18171f372ef" translate="yes" xml:space="preserve">
          <source>Rust's collections can be grouped into four major categories:</source>
          <target state="translated">ラストのコレクションは大きく4つのカテゴリーに分類できます。</target>
        </trans-unit>
        <trans-unit id="3518a40c6313dc64fda74604f5d48c205fe14878" translate="yes" xml:space="preserve">
          <source>Rust's memory orderings are &lt;a href=&quot;https://en.cppreference.com/w/cpp/atomic/memory_order&quot;&gt;the same as those of C++20&lt;/a&gt;.</source>
          <target state="translated">Rust's memory orderings are &lt;a href=&quot;https://en.cppreference.com/w/cpp/atomic/memory_order&quot;&gt;the same as those of C++20&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="66232bbafcf2029b1b02f4fd6262d62c2d92282a" translate="yes" xml:space="preserve">
          <source>Rust's memory orderings are &lt;a href=&quot;https://llvm.org/docs/LangRef.html#memory-model-for-concurrent-operations&quot;&gt;the same as LLVM's&lt;/a&gt;.</source>
          <target state="translated">Rustのメモリの順序は&lt;a href=&quot;https://llvm.org/docs/LangRef.html#memory-model-for-concurrent-operations&quot;&gt;LLVMと同じ&lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="a7ab800f18895158ef3a0e63fde445a7b639f33a" translate="yes" xml:space="preserve">
          <source>Rust's name resolution operates on a global hierarchy of namespaces. Each level in the hierarchy can be thought of as some item. The items are one of those mentioned above, but also include external crates. Declaring or defining a new module can be thought of as inserting a new tree into the hierarchy at the location of the definition.</source>
          <target state="translated">Rust の名前解決は、名前空間のグローバル階層上で動作します。階層内の各レベルは、何らかのアイテムと考えることができます。アイテムは上で述べたものの一つですが、外部のクレートも含まれます。新しいモジュールを宣言したり定義したりすることは、定義した場所の階層に新しいツリーを挿入することと考えることができます。</target>
        </trans-unit>
        <trans-unit id="319f62fa60443741e4ab911db14f80e727aef59a" translate="yes" xml:space="preserve">
          <source>Rust's pointer types must always point to a valid location; there are no &quot;null&quot; pointers. Instead, Rust has &lt;em&gt;optional&lt;/em&gt; pointers, like the optional owned box, &lt;a href=&quot;enum.option&quot;&gt;&lt;code&gt;Option&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;a href=&quot;../boxed/struct.box&quot;&gt;&lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">Rustのポインタ型は常に有効な場所を指す必要があります。「null」ポインタはありません。代わりに、錆があり&lt;em&gt;、オプション&lt;/em&gt;、オプションの所有ボックス、などのポインタ、&lt;a href=&quot;enum.option&quot;&gt; &lt;code&gt;Option&lt;/code&gt; &lt;/a&gt; &lt;code&gt;&amp;lt;&lt;/code&gt; &lt;a href=&quot;../boxed/struct.box&quot;&gt; &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; &lt;/a&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="f768c498112456486bf63d48fcb7291968abac38" translate="yes" xml:space="preserve">
          <source>Rust's pointer types must always point to a valid location; there are no &quot;null&quot; references. Instead, Rust has &lt;em&gt;optional&lt;/em&gt; pointers, like the optional owned box, &lt;a href=&quot;enum.option&quot;&gt;&lt;code&gt;Option&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;a href=&quot;../boxed/struct.box&quot;&gt;&lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">Rust's pointer types must always point to a valid location; there are no &quot;null&quot; references. Instead, Rust has &lt;em&gt;optional&lt;/em&gt; pointers, like the optional owned box, &lt;a href=&quot;enum.option&quot;&gt; &lt;code&gt;Option&lt;/code&gt; &lt;/a&gt; &lt;code&gt;&amp;lt;&lt;/code&gt; &lt;a href=&quot;../boxed/struct.box&quot;&gt; &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; &lt;/a&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8d6e2726524f65a330ec27f3f5f1fe94fb053aa0" translate="yes" xml:space="preserve">
          <source>Rust's semantics obey a &lt;em&gt;phase distinction&lt;/em&gt; between compile-time and run-time.&lt;sup&gt;&lt;a href=&quot;#phase-distinction&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; Semantic rules that have a &lt;em&gt;static interpretation&lt;/em&gt; govern the success or failure of compilation, while semantic rules that have a &lt;em&gt;dynamic interpretation&lt;/em&gt; govern the behavior of the program at run-time.</source>
          <target state="translated">Rust's semantics obey a &lt;em&gt;phase distinction&lt;/em&gt; between compile-time and run-time.&lt;sup&gt;&lt;a href=&quot;#phase-distinction&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; Semantic rules that have a &lt;em&gt;static interpretation&lt;/em&gt; govern the success or failure of compilation, while semantic rules that have a &lt;em&gt;dynamic interpretation&lt;/em&gt; govern the behavior of the program at run-time.</target>
        </trans-unit>
        <trans-unit id="a2aff2ec84d10e9cd75ff34f3e37a6ab05271846" translate="yes" xml:space="preserve">
          <source>Rust's semantics obey a &lt;em&gt;phase distinction&lt;/em&gt; between compile-time and run-time.&lt;sup&gt;&lt;a href=&quot;crates-and-source-files#phase-distinction&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; Semantic rules that have a &lt;em&gt;static interpretation&lt;/em&gt; govern the success or failure of compilation, while semantic rules that have a &lt;em&gt;dynamic interpretation&lt;/em&gt; govern the behavior of the program at run-time.</source>
          <target state="translated">Rustのセマンティクスは、コンパイル時と実行時の&lt;em&gt;フェーズの区別に&lt;/em&gt;従います。&lt;sup&gt;&lt;a href=&quot;crates-and-source-files#phase-distinction&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;em&gt;静的な解釈&lt;/em&gt;を持つセマンティックルールはコンパイルの成功または失敗を制御し、&lt;em&gt;動的な解釈&lt;/em&gt;を持つセマンティックルールは実行時のプログラムの動作を制御します。</target>
        </trans-unit>
        <trans-unit id="54f00e0c31d6eace7a6ea3416d8819187abd4302" translate="yes" xml:space="preserve">
          <source>Rust's standard collection library provides efficient implementations of the most common general purpose programming data structures. By using the standard implementations, it should be possible for two libraries to communicate without significant data conversion.</source>
          <target state="translated">Rustの標準コレクションライブラリは、最も一般的な汎用プログラミングデータ構造の効率的な実装を提供します。標準の実装を使用することで、2つのライブラリが大幅なデータ変換なしで通信することが可能になるはずです。</target>
        </trans-unit>
        <trans-unit id="ab17aa57ae62fb04a69af0b7a8f3f507e272a3c7" translate="yes" xml:space="preserve">
          <source>Rust's type system is a conservative approximation of the dynamic safety requirements, so in some cases there is a performance cost to using safe code. For example, a doubly-linked list is not a tree structure and can only be represented with reference-counted pointers in safe code. By using &lt;code&gt;unsafe&lt;/code&gt; blocks to represent the reverse links as raw pointers, it can be implemented with only boxes.</source>
          <target state="translated">Rustの型システムは動的安全要件の控えめな近似であるため、場合によっては、安全なコードを使用するとパフォーマンスが低下します。たとえば、二重リンクリストはツリー構造ではなく、安全なコードで参照カウントポインターでのみ表すことができます。 &lt;code&gt;unsafe&lt;/code&gt; ブロックを使用してリバースリンクを生のポインタとして表すことにより、ボックスのみで実装できます。</target>
        </trans-unit>
        <trans-unit id="95599064eb377b63b994bbd7ad3f097bbf8eb92c" translate="yes" xml:space="preserve">
          <source>Rustfmt ensures a consistent coding style across developers.</source>
          <target state="translated">Rustfmtは、開発者間で一貫したコーディングスタイルを実現します。</target>
        </trans-unit>
        <trans-unit id="7b00c77b80323c6107761b3476057383a88402b5" translate="yes" xml:space="preserve">
          <source>Rustup and the Role of Rust Nightly</source>
          <target state="translated">ラストアップと毎晩の役割</target>
        </trans-unit>
        <trans-unit id="baf8407c83848beb2a63399a672432e0718f8d96" translate="yes" xml:space="preserve">
          <source>Rustup makes it easy to change between different release channels of Rust, on a global or per-project basis. By default, you&amp;rsquo;ll have stable Rust installed. To install nightly, for example:</source>
          <target state="translated">Rustupを使用すると、グローバルまたはプロジェクトごとに、Rustの異なるリリースチャネル間を簡単に変更できます。デフォルトでは、安定したRustがインストールされています。たとえば、夜間にインストールするには：</target>
        </trans-unit>
        <trans-unit id="d6a79be61e4215763db3baff3a7d68db38c8b2c3" translate="yes" xml:space="preserve">
          <source>RwLock</source>
          <target state="translated">RwLock</target>
        </trans-unit>
        <trans-unit id="3365fb12186db42cf39d5ce267adfc330507d4c2" translate="yes" xml:space="preserve">
          <source>RwLock::borrow</source>
          <target state="translated">RwLock::borrow</target>
        </trans-unit>
        <trans-unit id="bb95ca5081bbeb594b1afea186814e0d4f3253b7" translate="yes" xml:space="preserve">
          <source>RwLock::borrow_mut</source>
          <target state="translated">RwLock::borrow_mut</target>
        </trans-unit>
        <trans-unit id="032d2409c530ffd60c7c9c9f5aca0a52823fe35c" translate="yes" xml:space="preserve">
          <source>RwLock::default</source>
          <target state="translated">RwLock::default</target>
        </trans-unit>
        <trans-unit id="9f88cff40297be1aa94fa7e0823c98c7da6761a9" translate="yes" xml:space="preserve">
          <source>RwLock::drop</source>
          <target state="translated">RwLock::drop</target>
        </trans-unit>
        <trans-unit id="6eb75710cfca86f6ddcbd36cc0b480fab516efae" translate="yes" xml:space="preserve">
          <source>RwLock::fmt</source>
          <target state="translated">RwLock::fmt</target>
        </trans-unit>
        <trans-unit id="c39d1dd0d486dff9ebac4064c7f836672e22c020" translate="yes" xml:space="preserve">
          <source>RwLock::from</source>
          <target state="translated">RwLock::from</target>
        </trans-unit>
        <trans-unit id="f7459df51d92ce400094c19b830db9351fd1b575" translate="yes" xml:space="preserve">
          <source>RwLock::get_mut</source>
          <target state="translated">RwLock::get_mut</target>
        </trans-unit>
        <trans-unit id="dd170c316defa574a85c99622fe930a63bdba387" translate="yes" xml:space="preserve">
          <source>RwLock::into</source>
          <target state="translated">RwLock::into</target>
        </trans-unit>
        <trans-unit id="eb5fe8aa0193d0a1e704de4241f5c0a52119717b" translate="yes" xml:space="preserve">
          <source>RwLock::into_inner</source>
          <target state="translated">RwLock::into_inner</target>
        </trans-unit>
        <trans-unit id="597790ef6ee26d29fd19484b562c98ca7fe22839" translate="yes" xml:space="preserve">
          <source>RwLock::is_poisoned</source>
          <target state="translated">RwLock::is_poisoned</target>
        </trans-unit>
        <trans-unit id="b30631b8ae7fdfb2874a8151b77ee5739805b2a2" translate="yes" xml:space="preserve">
          <source>RwLock::new</source>
          <target state="translated">RwLock::new</target>
        </trans-unit>
        <trans-unit id="4524aac3589f9c6e93e60d12fae19353e0443eda" translate="yes" xml:space="preserve">
          <source>RwLock::read</source>
          <target state="translated">RwLock::read</target>
        </trans-unit>
        <trans-unit id="10894ce864637dc75066a6e702be6357e58a0ade" translate="yes" xml:space="preserve">
          <source>RwLock::try_from</source>
          <target state="translated">RwLock::try_from</target>
        </trans-unit>
        <trans-unit id="3c79ebfc0ddf697963209773c64e4debde0a15e5" translate="yes" xml:space="preserve">
          <source>RwLock::try_into</source>
          <target state="translated">RwLock::try_into</target>
        </trans-unit>
        <trans-unit id="27f9f9706495b3fa597d7283c5f6d5aa96cad168" translate="yes" xml:space="preserve">
          <source>RwLock::try_read</source>
          <target state="translated">RwLock::try_read</target>
        </trans-unit>
        <trans-unit id="2cc72c47f44da367af1f6c95ad58fcbe7aabe9f8" translate="yes" xml:space="preserve">
          <source>RwLock::try_write</source>
          <target state="translated">RwLock::try_write</target>
        </trans-unit>
        <trans-unit id="51d4ce46fd209b39c881192d2c4a306b0c6af7e1" translate="yes" xml:space="preserve">
          <source>RwLock::type_id</source>
          <target state="translated">RwLock::type_id</target>
        </trans-unit>
        <trans-unit id="75bc0e47bce9b9726f4994afdff85b10cc3177b6" translate="yes" xml:space="preserve">
          <source>RwLock::write</source>
          <target state="translated">RwLock::write</target>
        </trans-unit>
        <trans-unit id="1eaef0c1b72634db80d0da04d80181a719336691" translate="yes" xml:space="preserve">
          <source>RwLockReadGuard</source>
          <target state="translated">RwLockReadGuard</target>
        </trans-unit>
        <trans-unit id="0a54fda840526b11982d5a172884305a72f1ca53" translate="yes" xml:space="preserve">
          <source>RwLockReadGuard::borrow</source>
          <target state="translated">RwLockReadGuard::borrow</target>
        </trans-unit>
        <trans-unit id="c10f603294158a203e3030a16eeb77610e66012d" translate="yes" xml:space="preserve">
          <source>RwLockReadGuard::borrow_mut</source>
          <target state="translated">RwLockReadGuard::borrow_mut</target>
        </trans-unit>
        <trans-unit id="480c8174e6d098df5d439363919b8fc988424a6a" translate="yes" xml:space="preserve">
          <source>RwLockReadGuard::deref</source>
          <target state="translated">RwLockReadGuard::deref</target>
        </trans-unit>
        <trans-unit id="96929e2bf6e62cb9881175383a8c72f54d7b407d" translate="yes" xml:space="preserve">
          <source>RwLockReadGuard::drop</source>
          <target state="translated">RwLockReadGuard::drop</target>
        </trans-unit>
        <trans-unit id="0630cc72c5534d080bc3a4d09dfe50c25c31af45" translate="yes" xml:space="preserve">
          <source>RwLockReadGuard::fmt</source>
          <target state="translated">RwLockReadGuard::fmt</target>
        </trans-unit>
        <trans-unit id="71fd112b2871ddf5eac0a9570c1f499e0f71e75c" translate="yes" xml:space="preserve">
          <source>RwLockReadGuard::from</source>
          <target state="translated">RwLockReadGuard::from</target>
        </trans-unit>
        <trans-unit id="9c60a6eeb95abf755a1eead5ad53991ff0cb74d1" translate="yes" xml:space="preserve">
          <source>RwLockReadGuard::into</source>
          <target state="translated">RwLockReadGuard::into</target>
        </trans-unit>
        <trans-unit id="74ee51ebc9a6d12c966b59ef0ecb6343b0e0c6eb" translate="yes" xml:space="preserve">
          <source>RwLockReadGuard::to_string</source>
          <target state="translated">RwLockReadGuard::to_string</target>
        </trans-unit>
        <trans-unit id="0ee2730589747bc1dcb5c453d764648feefc433d" translate="yes" xml:space="preserve">
          <source>RwLockReadGuard::try_from</source>
          <target state="translated">RwLockReadGuard::try_from</target>
        </trans-unit>
        <trans-unit id="2f498acbf30669bd7f472bd5abfc012da4c81500" translate="yes" xml:space="preserve">
          <source>RwLockReadGuard::try_into</source>
          <target state="translated">RwLockReadGuard::try_into</target>
        </trans-unit>
        <trans-unit id="a25712e2a0bf4758e52e5eff9b33eef96baad24b" translate="yes" xml:space="preserve">
          <source>RwLockReadGuard::type_id</source>
          <target state="translated">RwLockReadGuard::type_id</target>
        </trans-unit>
        <trans-unit id="9646cc55e4cc9faafa8ece87c06c08f6b888f1fd" translate="yes" xml:space="preserve">
          <source>RwLockWriteGuard</source>
          <target state="translated">RwLockWriteGuard</target>
        </trans-unit>
        <trans-unit id="baedc99a4037b217d239bb9bc2bebea8bc2c7b05" translate="yes" xml:space="preserve">
          <source>RwLockWriteGuard::borrow</source>
          <target state="translated">RwLockWriteGuard::borrow</target>
        </trans-unit>
        <trans-unit id="0c8f19451559b2d3e5a6164478662b652678e260" translate="yes" xml:space="preserve">
          <source>RwLockWriteGuard::borrow_mut</source>
          <target state="translated">RwLockWriteGuard::borrow_mut</target>
        </trans-unit>
        <trans-unit id="630e28276d78c2514d28310665f4fbd77b887ea3" translate="yes" xml:space="preserve">
          <source>RwLockWriteGuard::deref</source>
          <target state="translated">RwLockWriteGuard::deref</target>
        </trans-unit>
        <trans-unit id="39d9907938496daf9bc33b22be826e596782bce1" translate="yes" xml:space="preserve">
          <source>RwLockWriteGuard::deref_mut</source>
          <target state="translated">RwLockWriteGuard::deref_mut</target>
        </trans-unit>
        <trans-unit id="79f1ca0d2c6b0fad41ae7415d45c5eb9a7acfbb9" translate="yes" xml:space="preserve">
          <source>RwLockWriteGuard::drop</source>
          <target state="translated">RwLockWriteGuard::drop</target>
        </trans-unit>
        <trans-unit id="fde0bc83a3fb9bf572594f7ed1454a2e150083e6" translate="yes" xml:space="preserve">
          <source>RwLockWriteGuard::fmt</source>
          <target state="translated">RwLockWriteGuard::fmt</target>
        </trans-unit>
        <trans-unit id="2c0a3448edb216dbb966834cc4ad56db6eb11560" translate="yes" xml:space="preserve">
          <source>RwLockWriteGuard::from</source>
          <target state="translated">RwLockWriteGuard::from</target>
        </trans-unit>
        <trans-unit id="3193eae71ac8c5c78d9a237c77ce0e37b3805579" translate="yes" xml:space="preserve">
          <source>RwLockWriteGuard::into</source>
          <target state="translated">RwLockWriteGuard::into</target>
        </trans-unit>
        <trans-unit id="8c6e6d90fe4c368b63537f92416cb8aaff689f72" translate="yes" xml:space="preserve">
          <source>RwLockWriteGuard::to_string</source>
          <target state="translated">RwLockWriteGuard::to_string</target>
        </trans-unit>
        <trans-unit id="5f6159162b69b6697a022b81d0b5f2b64a1c0cb9" translate="yes" xml:space="preserve">
          <source>RwLockWriteGuard::try_from</source>
          <target state="translated">RwLockWriteGuard::try_from</target>
        </trans-unit>
        <trans-unit id="6959809c31f98cada5a72df18f7f305cf5bec8cb" translate="yes" xml:space="preserve">
          <source>RwLockWriteGuard::try_into</source>
          <target state="translated">RwLockWriteGuard::try_into</target>
        </trans-unit>
        <trans-unit id="701e18958d5f1087e9d3ad9d6157e1b774a80327" translate="yes" xml:space="preserve">
          <source>RwLockWriteGuard::type_id</source>
          <target state="translated">RwLockWriteGuard::type_id</target>
        </trans-unit>
        <trans-unit id="e9366a47f607b6f46c1a48c0cd690894f0ebbadb" translate="yes" xml:space="preserve">
          <source>SGX</source>
          <target state="translated">SGX</target>
        </trans-unit>
        <trans-unit id="725c79ab8f9df970d196bb5d5f72df4504fce381" translate="yes" xml:space="preserve">
          <source>SHEBANG : &lt;code&gt;#!&lt;/code&gt; ~&lt;code&gt;\n&lt;/code&gt;&lt;sup&gt;+&lt;/sup&gt;&lt;a href=&quot;#shebang&quot;&gt;&amp;dagger;&lt;/a&gt;</source>
          <target state="translated">SHEBANG : &lt;code&gt;#!&lt;/code&gt; ~ &lt;code&gt;\n&lt;/code&gt; &lt;sup&gt;+&lt;/sup&gt;&lt;a href=&quot;#shebang&quot;&gt;&amp;dagger;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1a6ea37b53bc27138b60916fd0439bdf3ab78ec1" translate="yes" xml:space="preserve">
          <source>SHEBANG : &lt;code&gt;#!&lt;/code&gt; ~[&lt;code&gt;[&lt;/code&gt;&lt;code&gt;\n&lt;/code&gt;] ~&lt;code&gt;\n&lt;/code&gt;&lt;sup&gt;*&lt;/sup&gt;</source>
          <target state="translated">SHEBANG： &lt;code&gt;#!&lt;/code&gt; 〜[ &lt;code&gt;[&lt;/code&gt; &lt;code&gt;\n&lt;/code&gt; ]〜 &lt;code&gt;\n&lt;/code&gt; &lt;sup&gt;*&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="3c4b26856c9be2e3649537787b8c0e28472a0786" translate="yes" xml:space="preserve">
          <source>SHEBANG&lt;sup&gt;?&lt;/sup&gt;</source>
          <target state="translated">SHEBANG&lt;sup&gt;?&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="6de691384f5963f51651150662473268acfe159d" translate="yes" xml:space="preserve">
          <source>SIMD</source>
          <target state="translated">SIMD</target>
        </trans-unit>
        <trans-unit id="22eeb276e780b6ff6b8c438850d1f60bc7878e9e" translate="yes" xml:space="preserve">
          <source>SML, OCaml: algebraic data types, pattern matching, type inference, semicolon statement separation</source>
          <target state="translated">SML,OCaml:代数的データ型,パターンマッチング,型推論,セミコロン文の分離</target>
        </trans-unit>
        <trans-unit id="1de58b523ce999eba59e4751ca7a7e72e85af4e7" translate="yes" xml:space="preserve">
          <source>SOCKET</source>
          <target state="translated">SOCKET</target>
        </trans-unit>
        <trans-unit id="f648fd3aed746e2278113a2f8a9ee9de6ce669d2" translate="yes" xml:space="preserve">
          <source>SQRT_2</source>
          <target state="translated">SQRT_2</target>
        </trans-unit>
        <trans-unit id="e417c0c14e2d13af7eccbb6839d6c2e941c30381" translate="yes" xml:space="preserve">
          <source>STRING_CONTINUE :</source>
          <target state="translated">STRING_CONTINUE .</target>
        </trans-unit>
        <trans-unit id="920882e835fec2971971f3c5aa2aa60559e73a5f" translate="yes" xml:space="preserve">
          <source>STRING_LITERAL :</source>
          <target state="translated">STRING_LITERAL .</target>
        </trans-unit>
        <trans-unit id="b78310097f7848cdd92f6380a2ed0c9ed3dd8c55" translate="yes" xml:space="preserve">
          <source>Safe traits should not have unsafe implementations, therefore marking an implementation for a safe trait unsafe will cause a compiler error. Removing the unsafe marker on the trait noted in the error will resolve this problem.</source>
          <target state="translated">安全な形質は安全でない実装を持つべきではないため、安全な形質の実装に安全でないマークを付けると、コンパイラ・エラーが発生します。エラーが表示された形質の安全でないマーカーを削除すると、この問題は解決します。</target>
        </trans-unit>
        <trans-unit id="6758124b257320aba8b357219dd55b902618ce28" translate="yes" xml:space="preserve">
          <source>Safe traits should not have unsafe implementations, therefore marking an implementation for a safe trait unsafe will cause a compiler error. Removing the unsafe marker on the trait noted in the error will resolve this problem:</source>
          <target state="translated">安全な形質は安全でない実装を持つべきではないため、安全な形質の実装に安全でないマークを付けると、コンパイラ エラーが発生します。エラーが表示された形質の安全でないマーカーを削除すると、この問題は解決します。</target>
        </trans-unit>
        <trans-unit id="3638107f2c733ebae270af45af8092f6fb19ef0a" translate="yes" xml:space="preserve">
          <source>Safe wrappers for this intrinsic are available on the integer primitives via the &lt;code&gt;checked_div&lt;/code&gt; method. For example, &lt;a href=&quot;../primitive.u32#method.checked_div&quot;&gt;&lt;code&gt;u32::checked_div&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">この組み込み関数の安全なラッパーは、 &lt;code&gt;checked_div&lt;/code&gt; メソッドを介して整数プリミティブで使用できます。たとえば、&lt;a href=&quot;../primitive.u32#method.checked_div&quot;&gt; &lt;code&gt;u32::checked_div&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="dcbced17202ea49cef90383c30f1c92012e82c83" translate="yes" xml:space="preserve">
          <source>Safe wrappers for this intrinsic are available on the integer primitives via the &lt;code&gt;checked_rem&lt;/code&gt; method. For example, &lt;a href=&quot;../primitive.u32#method.checked_rem&quot;&gt;&lt;code&gt;u32::checked_rem&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">この組み込み関数の安全なラッパーは、 &lt;code&gt;checked_rem&lt;/code&gt; メソッドを介して整数プリミティブで使用できます。たとえば、&lt;a href=&quot;../primitive.u32#method.checked_rem&quot;&gt; &lt;code&gt;u32::checked_rem&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1add6a43fe6ea1b39bbf1a37130e2c55f3cd481c" translate="yes" xml:space="preserve">
          <source>Safe wrappers for this intrinsic are available on the integer primitives via the &lt;code&gt;checked_shl&lt;/code&gt; method. For example, &lt;a href=&quot;../primitive.u32#method.checked_shl&quot;&gt;&lt;code&gt;u32::checked_shl&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">この組み込み関数の安全なラッパーは、 &lt;code&gt;checked_shl&lt;/code&gt; メソッドを介して整数プリミティブで使用できます。たとえば、&lt;a href=&quot;../primitive.u32#method.checked_shl&quot;&gt; &lt;code&gt;u32::checked_shl&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3d924e081d2fe23775f79251bd6628bfebb9f15f" translate="yes" xml:space="preserve">
          <source>Safe wrappers for this intrinsic are available on the integer primitives via the &lt;code&gt;checked_shr&lt;/code&gt; method. For example, &lt;a href=&quot;../primitive.u32#method.checked_shr&quot;&gt;&lt;code&gt;u32::checked_shr&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">この組み込み関数の安全なラッパーは、 &lt;code&gt;checked_shr&lt;/code&gt; メソッドを介して整数プリミティブで使用できます。たとえば、&lt;a href=&quot;../primitive.u32#method.checked_shr&quot;&gt; &lt;code&gt;u32::checked_shr&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="db6e7e410412f58574f766c3911f49badd42beca" translate="yes" xml:space="preserve">
          <source>Safety</source>
          <target state="translated">Safety</target>
        </trans-unit>
        <trans-unit id="c73f4568bd312963e8efa5d1ebe757bec11ce99e" translate="yes" xml:space="preserve">
          <source>Safety is guaranteed by requiring a mutable reference.</source>
          <target state="translated">変異可能な参照を必要とすることで安全性が保証されています。</target>
        </trans-unit>
        <trans-unit id="d6527d5e90816a6b0e07f8bdbc358e99dffa1bdc" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;format_args&lt;/code&gt;, but adds a newline in the end.</source>
          <target state="translated">&lt;code&gt;format_args&lt;/code&gt; と同じですが、最後に改行を追加します。</target>
        </trans-unit>
        <trans-unit id="c5b8fb7a6bc8b245138411045130aa3d0bdb87c5" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;to_ascii_lowercase(a) == to_ascii_lowercase(b)&lt;/code&gt;, but without allocating and copying temporaries.</source>
          <target state="translated">&lt;code&gt;to_ascii_lowercase(a) == to_ascii_lowercase(b)&lt;/code&gt; と同じですが、一時的な割り当てとコピーは行いません。</target>
        </trans-unit>
        <trans-unit id="56bb3d7f43f257954be309e5e815a47ced6af0fb" translate="yes" xml:space="preserve">
          <source>Saturate at the value's minimum or maximum values with &lt;code&gt;saturating_*&lt;/code&gt; methods</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59d1427a10dfc5dee5a89b2eda66ab1e83377430" translate="yes" xml:space="preserve">
          <source>Saturating &lt;code&gt;Duration&lt;/code&gt; addition. Computes &lt;code&gt;self + other&lt;/code&gt;, returning &lt;a href=&quot;struct.duration#associatedconstant.MAX&quot;&gt;&lt;code&gt;Duration::MAX&lt;/code&gt;&lt;/a&gt; if overflow occurred.</source>
          <target state="translated">飽和 &lt;code&gt;Duration&lt;/code&gt; 追加。 &lt;code&gt;self + other&lt;/code&gt; 計算し、オーバーフローが発生した場合は&lt;a href=&quot;struct.duration#associatedconstant.MAX&quot;&gt; &lt;code&gt;Duration::MAX&lt;/code&gt; &lt;/a&gt;返します。</target>
        </trans-unit>
        <trans-unit id="c2be18c955cc49c826816b30bcfc290c616c5960" translate="yes" xml:space="preserve">
          <source>Saturating &lt;code&gt;Duration&lt;/code&gt; multiplication. Computes &lt;code&gt;self * other&lt;/code&gt;, returning &lt;a href=&quot;struct.duration#associatedconstant.MAX&quot;&gt;&lt;code&gt;Duration::MAX&lt;/code&gt;&lt;/a&gt; if overflow occurred.</source>
          <target state="translated">飽和 &lt;code&gt;Duration&lt;/code&gt; 乗算。 &lt;code&gt;self * other&lt;/code&gt; 計算し、オーバーフローが発生した場合は&lt;a href=&quot;struct.duration#associatedconstant.MAX&quot;&gt; &lt;code&gt;Duration::MAX&lt;/code&gt; &lt;/a&gt;返します。</target>
        </trans-unit>
        <trans-unit id="b6bf815786dcb43a5074e0c164ed807d841df425" translate="yes" xml:space="preserve">
          <source>Saturating &lt;code&gt;Duration&lt;/code&gt; subtraction. Computes &lt;code&gt;self - other&lt;/code&gt;, returning &lt;a href=&quot;struct.duration#associatedconstant.MIN&quot;&gt;&lt;code&gt;Duration::MIN&lt;/code&gt;&lt;/a&gt; if the result would be negative or if overflow occurred.</source>
          <target state="translated">飽和 &lt;code&gt;Duration&lt;/code&gt; 減算。 &lt;code&gt;self - other&lt;/code&gt; 計算します-その他、結果が負になる場合、またはオーバーフローが発生した場合は、&lt;a href=&quot;struct.duration#associatedconstant.MIN&quot;&gt; &lt;code&gt;Duration::MIN&lt;/code&gt; &lt;/a&gt;返します。</target>
        </trans-unit>
        <trans-unit id="8138311aec0a35834542daea416fa9678b0d1cab" translate="yes" xml:space="preserve">
          <source>Saturating &lt;code&gt;Duration&lt;/code&gt; subtraction. Computes &lt;code&gt;self - other&lt;/code&gt;, returning &lt;a href=&quot;struct.duration#associatedconstant.ZERO&quot;&gt;&lt;code&gt;Duration::ZERO&lt;/code&gt;&lt;/a&gt; if the result would be negative or if overflow occurred.</source>
          <target state="translated">飽和 &lt;code&gt;Duration&lt;/code&gt; 減算。 &lt;code&gt;self - other&lt;/code&gt; 計算します-その他、結果が負になる場合、またはオーバーフローが発生した場合は、&lt;a href=&quot;struct.duration#associatedconstant.ZERO&quot;&gt; &lt;code&gt;Duration::ZERO&lt;/code&gt; &lt;/a&gt;返します。</target>
        </trans-unit>
        <trans-unit id="c03bf99c5e921d67f76a77fc0f90dc0a457c4266" translate="yes" xml:space="preserve">
          <source>Saturating absolute value. Computes &lt;code&gt;self.abs()&lt;/code&gt;, returning &lt;code&gt;MAX&lt;/code&gt; if &lt;code&gt;self == MIN&lt;/code&gt; instead of overflowing.</source>
          <target state="translated">飽和絶対値。 &lt;code&gt;self.abs()&lt;/code&gt; を計算し、オーバーフローせずに、 &lt;code&gt;self == MIN&lt;/code&gt; 場合に &lt;code&gt;MAX&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="109dd1091641bc8ecebd701747ce54878af442b0" translate="yes" xml:space="preserve">
          <source>Saturating integer addition. Computes &lt;code&gt;self + rhs&lt;/code&gt;, saturating at the numeric bounds instead of overflowing.</source>
          <target state="translated">飽和整数加算。 &lt;code&gt;self + rhs&lt;/code&gt; 計算し、オーバーフローするのではなく、数値範囲で飽和します。</target>
        </trans-unit>
        <trans-unit id="57c9631709dc7db15f7aaacb3d3f0fcd0d500a59" translate="yes" xml:space="preserve">
          <source>Saturating integer exponentiation. Computes &lt;code&gt;self.pow(exp)&lt;/code&gt;, saturating at the numeric bounds instead of overflowing.</source>
          <target state="translated">飽和整数指数。 &lt;code&gt;self.pow(exp)&lt;/code&gt; を計算し、オーバーフローするのではなく、数値境界で飽和します。</target>
        </trans-unit>
        <trans-unit id="6a26ed5271afaadaf17f7bb99258598a883dbde5" translate="yes" xml:space="preserve">
          <source>Saturating integer multiplication. Computes &lt;code&gt;self * rhs&lt;/code&gt;, saturating at the numeric bounds instead of overflowing.</source>
          <target state="translated">飽和整数乗算。オーバーフローするのではなく、数値の境界で飽和する &lt;code&gt;self * rhs&lt;/code&gt; 計算します。</target>
        </trans-unit>
        <trans-unit id="4e9045498e8f92673c01343fe3158929d9ad0d53" translate="yes" xml:space="preserve">
          <source>Saturating integer negation. Computes &lt;code&gt;-self&lt;/code&gt;, returning &lt;code&gt;MAX&lt;/code&gt; if &lt;code&gt;self == MIN&lt;/code&gt; instead of overflowing.</source>
          <target state="translated">飽和整数否定。 &lt;code&gt;-self&lt;/code&gt; を計算し、オーバーフローせずに、 &lt;code&gt;self == MIN&lt;/code&gt; 場合に &lt;code&gt;MAX&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="bba0f92a2b8115b3e1c85e5395b32ac513ceaf4c" translate="yes" xml:space="preserve">
          <source>Saturating integer subtraction. Computes &lt;code&gt;self - rhs&lt;/code&gt;, saturating at the numeric bounds instead of overflowing.</source>
          <target state="translated">飽和減算。オーバーフローするのではなく、数値の境界で飽和する &lt;code&gt;self - rhs&lt;/code&gt; 計算します。</target>
        </trans-unit>
        <trans-unit id="94d7918aa6bb0576d26a84c1d4e645527e1b43b1" translate="yes" xml:space="preserve">
          <source>Save and run the program using &lt;code&gt;cargo run&lt;/code&gt;. You should receive an error message, as shown in this output:</source>
          <target state="translated">カーゴランを使用してプログラムを保存して実行し &lt;code&gt;cargo run&lt;/code&gt; 。次の出力に示すように、エラーメッセージが表示されます。</target>
        </trans-unit>
        <trans-unit id="f699547c1a083d346822dc0ad796b31a9ab59d87" translate="yes" xml:space="preserve">
          <source>Save the file and go back to your terminal window. On Linux or macOS, enter the following commands to compile and run the file:</source>
          <target state="translated">ファイルを保存して、ターミナルウィンドウに戻ります。LinuxやmacOSでは、以下のコマンドを入力してファイルをコンパイルして実行します。</target>
        </trans-unit>
        <trans-unit id="a78cbddc900d04991e91d2fb8a0c3d608d5fa9d3" translate="yes" xml:space="preserve">
          <source>Saving the Argument Values in Variables</source>
          <target state="translated">引数値を変数に保存する</target>
        </trans-unit>
        <trans-unit id="4aa91b74ad835b979f38d439d43f44e254945a4d" translate="yes" xml:space="preserve">
          <source>Say we have a trait &lt;code&gt;Foo&lt;/code&gt;:</source>
          <target state="translated">特性 &lt;code&gt;Foo&lt;/code&gt; があるとしましょう：</target>
        </trans-unit>
        <trans-unit id="9ce8f737a0ce307980f869c94d0a5ceba9f4cfab" translate="yes" xml:space="preserve">
          <source>Scalar Types</source>
          <target state="translated">スカラーの種類</target>
        </trans-unit>
        <trans-unit id="28cba55d2aadf568463a9e7e645f8c7b1eed5e8b" translate="yes" xml:space="preserve">
          <source>Scan</source>
          <target state="translated">Scan</target>
        </trans-unit>
        <trans-unit id="a83428f0f19b6d4372010255ff2ef9ab272578d1" translate="yes" xml:space="preserve">
          <source>Scan::all</source>
          <target state="translated">Scan::all</target>
        </trans-unit>
        <trans-unit id="fdda2ce8b15a6d2075229afe525b7e8a55d35d11" translate="yes" xml:space="preserve">
          <source>Scan::any</source>
          <target state="translated">Scan::any</target>
        </trans-unit>
        <trans-unit id="8ae964ef6b78e951ac3b26e79dfd44bec458e86b" translate="yes" xml:space="preserve">
          <source>Scan::borrow</source>
          <target state="translated">Scan::borrow</target>
        </trans-unit>
        <trans-unit id="1d1fa2d81c469a644938a10e857fd20595b68115" translate="yes" xml:space="preserve">
          <source>Scan::borrow_mut</source>
          <target state="translated">Scan::borrow_mut</target>
        </trans-unit>
        <trans-unit id="dcdbeb94289a891920ae7362a81de3677cc1e082" translate="yes" xml:space="preserve">
          <source>Scan::by_ref</source>
          <target state="translated">Scan::by_ref</target>
        </trans-unit>
        <trans-unit id="44a5d113010b539112c7aebbe1efadf9df2440bf" translate="yes" xml:space="preserve">
          <source>Scan::chain</source>
          <target state="translated">Scan::chain</target>
        </trans-unit>
        <trans-unit id="7c3cbcfdfe9b063409170df12dc8d39dc6dc99d3" translate="yes" xml:space="preserve">
          <source>Scan::clone</source>
          <target state="translated">Scan::clone</target>
        </trans-unit>
        <trans-unit id="c6db19d8a19119f74425bfa04127af8420e4efc4" translate="yes" xml:space="preserve">
          <source>Scan::clone_from</source>
          <target state="translated">Scan::clone_from</target>
        </trans-unit>
        <trans-unit id="ac3ef15de8d0ee0bec5955a3a3ab25a55df08f3a" translate="yes" xml:space="preserve">
          <source>Scan::clone_into</source>
          <target state="translated">Scan::clone_into</target>
        </trans-unit>
        <trans-unit id="2ee78a8b1e01eb5cb984ff82e377950705941cbe" translate="yes" xml:space="preserve">
          <source>Scan::cloned</source>
          <target state="translated">Scan::cloned</target>
        </trans-unit>
        <trans-unit id="1d217f90eb9953f90f7cee01645024cf8b353e47" translate="yes" xml:space="preserve">
          <source>Scan::cmp</source>
          <target state="translated">Scan::cmp</target>
        </trans-unit>
        <trans-unit id="f624c4e941292af5212a257f7d7e45e1f746c610" translate="yes" xml:space="preserve">
          <source>Scan::collect</source>
          <target state="translated">Scan::collect</target>
        </trans-unit>
        <trans-unit id="140d6d7c8506b513cdbb183e0de556d84140332b" translate="yes" xml:space="preserve">
          <source>Scan::copied</source>
          <target state="translated">Scan::copied</target>
        </trans-unit>
        <trans-unit id="37be80a9aeac96c59cb970c7ab59d3d0750db5f5" translate="yes" xml:space="preserve">
          <source>Scan::count</source>
          <target state="translated">Scan::count</target>
        </trans-unit>
        <trans-unit id="6ba6c8f1417e8d7b7f648fd7ce48940adf9144f3" translate="yes" xml:space="preserve">
          <source>Scan::cycle</source>
          <target state="translated">Scan::cycle</target>
        </trans-unit>
        <trans-unit id="7ec31279e2f8b96943422c4871166206fb63dfed" translate="yes" xml:space="preserve">
          <source>Scan::enumerate</source>
          <target state="translated">Scan::enumerate</target>
        </trans-unit>
        <trans-unit id="25a5e40162d5f49695e798626fd7358037ea86f6" translate="yes" xml:space="preserve">
          <source>Scan::eq</source>
          <target state="translated">Scan::eq</target>
        </trans-unit>
        <trans-unit id="bba6fdabd86b647187c140d88b617db38d432ecc" translate="yes" xml:space="preserve">
          <source>Scan::filter</source>
          <target state="translated">Scan::filter</target>
        </trans-unit>
        <trans-unit id="22b9545f456094f84f04af42526f62045be3f6e5" translate="yes" xml:space="preserve">
          <source>Scan::filter_map</source>
          <target state="translated">Scan::filter_map</target>
        </trans-unit>
        <trans-unit id="ec6b0559d3037a1ec9affdf74744f00da3bcd772" translate="yes" xml:space="preserve">
          <source>Scan::find</source>
          <target state="translated">Scan::find</target>
        </trans-unit>
        <trans-unit id="ce8589a77e6e6f30ec5a666a8478289269d79b74" translate="yes" xml:space="preserve">
          <source>Scan::find_map</source>
          <target state="translated">Scan::find_map</target>
        </trans-unit>
        <trans-unit id="1dba7e901c826e550e1d530ba916001117fa283f" translate="yes" xml:space="preserve">
          <source>Scan::flat_map</source>
          <target state="translated">Scan::flat_map</target>
        </trans-unit>
        <trans-unit id="5ba5682fc67c867be5c841cec5f95757e352b127" translate="yes" xml:space="preserve">
          <source>Scan::flatten</source>
          <target state="translated">Scan::flatten</target>
        </trans-unit>
        <trans-unit id="54d858c081c6321abe7f407a8a917413095b9e98" translate="yes" xml:space="preserve">
          <source>Scan::fmt</source>
          <target state="translated">Scan::fmt</target>
        </trans-unit>
        <trans-unit id="ee544b0cc856e0647a04c15e5aa58914fff7d3dd" translate="yes" xml:space="preserve">
          <source>Scan::fold</source>
          <target state="translated">Scan::fold</target>
        </trans-unit>
        <trans-unit id="877effb4069116cb008b7b02185836741deeb1bd" translate="yes" xml:space="preserve">
          <source>Scan::for_each</source>
          <target state="translated">Scan::for_each</target>
        </trans-unit>
        <trans-unit id="d596133dfad2ba2eb63caf025a1006ba5d46cdbe" translate="yes" xml:space="preserve">
          <source>Scan::from</source>
          <target state="translated">Scan::from</target>
        </trans-unit>
        <trans-unit id="05f2371a703b3bb956c34eefeb2778aa851dc375" translate="yes" xml:space="preserve">
          <source>Scan::fuse</source>
          <target state="translated">Scan::fuse</target>
        </trans-unit>
        <trans-unit id="5c5199789fc91ccfc059a9513dde8cc16dc76c24" translate="yes" xml:space="preserve">
          <source>Scan::ge</source>
          <target state="translated">Scan::ge</target>
        </trans-unit>
        <trans-unit id="b10b247c902a2bfa3e7132b61f9fc779d22e5f18" translate="yes" xml:space="preserve">
          <source>Scan::gt</source>
          <target state="translated">Scan::gt</target>
        </trans-unit>
        <trans-unit id="02d37e0f76b525bbfed8d07b3144e6b3574d8747" translate="yes" xml:space="preserve">
          <source>Scan::inspect</source>
          <target state="translated">Scan::inspect</target>
        </trans-unit>
        <trans-unit id="e77e489028848d463f401f4c49d8009a9ef763fb" translate="yes" xml:space="preserve">
          <source>Scan::into</source>
          <target state="translated">Scan::into</target>
        </trans-unit>
        <trans-unit id="8f74006cbeb828113f5fc9538a8101d864393fe2" translate="yes" xml:space="preserve">
          <source>Scan::into_iter</source>
          <target state="translated">Scan::into_iter</target>
        </trans-unit>
        <trans-unit id="97aceb0807e7408fc95fa9e8207b84bd8085b8c9" translate="yes" xml:space="preserve">
          <source>Scan::is_sorted</source>
          <target state="translated">Scan::is_sorted</target>
        </trans-unit>
        <trans-unit id="7ee340cb30ed71bb397fabe21931f6dab7264f46" translate="yes" xml:space="preserve">
          <source>Scan::is_sorted_by</source>
          <target state="translated">Scan::is_sorted_by</target>
        </trans-unit>
        <trans-unit id="58036d9ce660f7aef80fc0b987f4b2d1d619f2fd" translate="yes" xml:space="preserve">
          <source>Scan::is_sorted_by_key</source>
          <target state="translated">Scan::is_sorted_by_key</target>
        </trans-unit>
        <trans-unit id="8f663c380aa3d6bda22377b6769b2cb7e3745f74" translate="yes" xml:space="preserve">
          <source>Scan::last</source>
          <target state="translated">Scan::last</target>
        </trans-unit>
        <trans-unit id="62a5c990f54f0366a46db77c2e2b1ef1c18f7174" translate="yes" xml:space="preserve">
          <source>Scan::le</source>
          <target state="translated">Scan::le</target>
        </trans-unit>
        <trans-unit id="cfa5cf71030074646966407091c6fa5aa1ba85eb" translate="yes" xml:space="preserve">
          <source>Scan::lt</source>
          <target state="translated">Scan::lt</target>
        </trans-unit>
        <trans-unit id="44e4a34744c1e0cdc7555d5c68d6d19573656894" translate="yes" xml:space="preserve">
          <source>Scan::map</source>
          <target state="translated">Scan::map</target>
        </trans-unit>
        <trans-unit id="f2a07a63439a0ebcde98f43e8b3fbb80d4952811" translate="yes" xml:space="preserve">
          <source>Scan::max</source>
          <target state="translated">Scan::max</target>
        </trans-unit>
        <trans-unit id="3cfafd3b9dad17f4287fad1302263c256bdb9da2" translate="yes" xml:space="preserve">
          <source>Scan::max_by</source>
          <target state="translated">Scan::max_by</target>
        </trans-unit>
        <trans-unit id="c65b07c42c554193abc8eceb99ec17650b947d6e" translate="yes" xml:space="preserve">
          <source>Scan::max_by_key</source>
          <target state="translated">Scan::max_by_key</target>
        </trans-unit>
        <trans-unit id="75992f861a2f69a877ca4c109354b275b180bd95" translate="yes" xml:space="preserve">
          <source>Scan::min</source>
          <target state="translated">Scan::min</target>
        </trans-unit>
        <trans-unit id="b26db00332d6adb34cd1adc934b3dc8b34c8f9dc" translate="yes" xml:space="preserve">
          <source>Scan::min_by</source>
          <target state="translated">Scan::min_by</target>
        </trans-unit>
        <trans-unit id="8bd0f12b39a926d27ef33306910f880301f2454a" translate="yes" xml:space="preserve">
          <source>Scan::min_by_key</source>
          <target state="translated">Scan::min_by_key</target>
        </trans-unit>
        <trans-unit id="29d50c77efde6dbc085b208d7c218943a0ea0714" translate="yes" xml:space="preserve">
          <source>Scan::ne</source>
          <target state="translated">Scan::ne</target>
        </trans-unit>
        <trans-unit id="1ab71f992ffe8596c0341900bef028b3308973f8" translate="yes" xml:space="preserve">
          <source>Scan::next</source>
          <target state="translated">Scan::next</target>
        </trans-unit>
        <trans-unit id="c5850266e5e6c46cb795904dd076371082aa08f3" translate="yes" xml:space="preserve">
          <source>Scan::nth</source>
          <target state="translated">Scan::nth</target>
        </trans-unit>
        <trans-unit id="ff5105bc82f317b54ad32741845c344dd57225c9" translate="yes" xml:space="preserve">
          <source>Scan::partial_cmp</source>
          <target state="translated">Scan::partial_cmp</target>
        </trans-unit>
        <trans-unit id="23ebf388b9af419edd8a10316e92a28cdcc54ea5" translate="yes" xml:space="preserve">
          <source>Scan::partition</source>
          <target state="translated">Scan::partition</target>
        </trans-unit>
        <trans-unit id="78ca9808b2d539ab3576f5e1204530b9bd1adc02" translate="yes" xml:space="preserve">
          <source>Scan::peekable</source>
          <target state="translated">Scan::peekable</target>
        </trans-unit>
        <trans-unit id="2b0d89811cd472d52b60e91c8231f7ff0add786d" translate="yes" xml:space="preserve">
          <source>Scan::position</source>
          <target state="translated">Scan::position</target>
        </trans-unit>
        <trans-unit id="d8e52b56df09d900a46a0d11405db4d163939745" translate="yes" xml:space="preserve">
          <source>Scan::product</source>
          <target state="translated">Scan::product</target>
        </trans-unit>
        <trans-unit id="f564b9f823c397c793d11fee1b39b46f01f0e5a0" translate="yes" xml:space="preserve">
          <source>Scan::rev</source>
          <target state="translated">Scan::rev</target>
        </trans-unit>
        <trans-unit id="2b6ef2d07d09325ad0a4156fe82830daa7c2000c" translate="yes" xml:space="preserve">
          <source>Scan::rposition</source>
          <target state="translated">Scan::rposition</target>
        </trans-unit>
        <trans-unit id="e16bad2125996665ff244f29435a894ef4dd3342" translate="yes" xml:space="preserve">
          <source>Scan::scan</source>
          <target state="translated">Scan::scan</target>
        </trans-unit>
        <trans-unit id="7948a9c7ae9eaead157d3b15d36b95efb521f5d8" translate="yes" xml:space="preserve">
          <source>Scan::size_hint</source>
          <target state="translated">Scan::size_hint</target>
        </trans-unit>
        <trans-unit id="e80e6e3937516c92e418a5fe916bfac2e483b066" translate="yes" xml:space="preserve">
          <source>Scan::skip</source>
          <target state="translated">Scan::skip</target>
        </trans-unit>
        <trans-unit id="242d9090f46800125c301ef29b2906cc536d0877" translate="yes" xml:space="preserve">
          <source>Scan::skip_while</source>
          <target state="translated">Scan::skip_while</target>
        </trans-unit>
        <trans-unit id="9f63e26973be9f3afb89ae3f4e2ed85606b635af" translate="yes" xml:space="preserve">
          <source>Scan::step_by</source>
          <target state="translated">Scan::step_by</target>
        </trans-unit>
        <trans-unit id="6b16e51cd58da3de9d5f7eea0e0f07ca046d979c" translate="yes" xml:space="preserve">
          <source>Scan::sum</source>
          <target state="translated">Scan::sum</target>
        </trans-unit>
        <trans-unit id="a7282175f1d0da9413967d85f69c6e868558487e" translate="yes" xml:space="preserve">
          <source>Scan::take</source>
          <target state="translated">Scan::take</target>
        </trans-unit>
        <trans-unit id="a150dc4d16df56db4605174e979cea6899d1ad9c" translate="yes" xml:space="preserve">
          <source>Scan::take_while</source>
          <target state="translated">Scan::take_while</target>
        </trans-unit>
        <trans-unit id="13a823d246b96299ec57e999197efc7fa9ae0a31" translate="yes" xml:space="preserve">
          <source>Scan::to_owned</source>
          <target state="translated">Scan::to_owned</target>
        </trans-unit>
        <trans-unit id="3ef6fcb77ca31a6f969ff19b4b3aa9051300806f" translate="yes" xml:space="preserve">
          <source>Scan::try_fold</source>
          <target state="translated">Scan::try_fold</target>
        </trans-unit>
        <trans-unit id="db1f0815536f2e7e0fccb46f579eb7c1f5f467fc" translate="yes" xml:space="preserve">
          <source>Scan::try_for_each</source>
          <target state="translated">Scan::try_for_each</target>
        </trans-unit>
        <trans-unit id="e3ca0918eba1feb0dd819a8739d918a22b7a106d" translate="yes" xml:space="preserve">
          <source>Scan::try_from</source>
          <target state="translated">Scan::try_from</target>
        </trans-unit>
        <trans-unit id="bd50714b4294891b30df26cd83bd683f7dc15be8" translate="yes" xml:space="preserve">
          <source>Scan::try_into</source>
          <target state="translated">Scan::try_into</target>
        </trans-unit>
        <trans-unit id="046b6bc008c7041f8edf76e7602802d827d08367" translate="yes" xml:space="preserve">
          <source>Scan::type_id</source>
          <target state="translated">Scan::type_id</target>
        </trans-unit>
        <trans-unit id="569da91365c91b5131222d7de125089d3f265484" translate="yes" xml:space="preserve">
          <source>Scan::unzip</source>
          <target state="translated">Scan::unzip</target>
        </trans-unit>
        <trans-unit id="e947a087f9ad656a226215379de2667c1377de6e" translate="yes" xml:space="preserve">
          <source>Scan::zip</source>
          <target state="translated">Scan::zip</target>
        </trans-unit>
        <trans-unit id="fb63302c6f22a6965dfa609e8e20a66d7199f9dd" translate="yes" xml:space="preserve">
          <source>Schedules a closure to be run just before the &lt;code&gt;exec&lt;/code&gt; function is invoked.</source>
          <target state="translated">&lt;code&gt;exec&lt;/code&gt; 関数が呼び出される直前にクロージャーが実行されるようにスケジュールします。</target>
        </trans-unit>
        <trans-unit id="c21507c1a91d893abdec9840fa9ae19963c02140" translate="yes" xml:space="preserve">
          <source>Schedules a closure to be run just before the &lt;code&gt;exec&lt;/code&gt; function is invoked. &lt;a href=&quot;../os/unix/process/trait.commandext#method.before_exec&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;exec&lt;/code&gt; 関数が呼び出される直前にクロージャーが実行されるようにスケジュールします。&lt;a href=&quot;../os/unix/process/trait.commandext#method.before_exec&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3828bb2307999d77ee3cc9989b1f128ccf8cc518" translate="yes" xml:space="preserve">
          <source>Schedules a closure to be run just before the &lt;code&gt;exec&lt;/code&gt; function is invoked. &lt;a href=&quot;../os/unix/process/trait.commandext#tymethod.pre_exec&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;exec&lt;/code&gt; 関数が呼び出される直前にクロージャーが実行されるようにスケジュールします。&lt;a href=&quot;../os/unix/process/trait.commandext#tymethod.pre_exec&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="99d69565bd3ab366d37906300f1bf9bb70804a55" translate="yes" xml:space="preserve">
          <source>Scheme: hygienic macros</source>
          <target state="translated">スキーム:衛生的なマクロ</target>
        </trans-unit>
        <trans-unit id="6c6abe90bb72b66441d41ac5ea68bcc18fc33627" translate="yes" xml:space="preserve">
          <source>ScmCredentials</source>
          <target state="translated">ScmCredentials</target>
        </trans-unit>
        <trans-unit id="a200cf855faba05cda0d2309cd6e668524d6c5a3" translate="yes" xml:space="preserve">
          <source>ScmRights</source>
          <target state="translated">ScmRights</target>
        </trans-unit>
        <trans-unit id="1649d47e247b7878486f68b1541b0892af4985f8" translate="yes" xml:space="preserve">
          <source>Scopes of function parameters</source>
          <target state="translated">関数パラメータのスコープ</target>
        </trans-unit>
        <trans-unit id="5279c09b56d10415b7fbdf488ada570b3a82608c" translate="yes" xml:space="preserve">
          <source>Scopes of local variables</source>
          <target state="translated">ローカル変数のスコープ</target>
        </trans-unit>
        <trans-unit id="f869c7563d63df9f222d947a975a45138e95b942" translate="yes" xml:space="preserve">
          <source>Scoping, Exporting, and Importing</source>
          <target state="translated">スコーピング、エクスポート、インポート</target>
        </trans-unit>
        <trans-unit id="d908d24ab618c48e6ae073715a0ab05f7bb4153e" translate="yes" xml:space="preserve">
          <source>Scripts without case are not changed:</source>
          <target state="translated">大文字小文字のないスクリプトは変更されません。</target>
        </trans-unit>
        <trans-unit id="92f5c17a4180087f0927972817e9d930fd2be3b1" translate="yes" xml:space="preserve">
          <source>Scrutinee</source>
          <target state="translated">Scrutinee</target>
        </trans-unit>
        <trans-unit id="057c00f982acbbd131543e7b48e94d17da16d57d" translate="yes" xml:space="preserve">
          <source>SearchStep</source>
          <target state="translated">SearchStep</target>
        </trans-unit>
        <trans-unit id="3373ce77abd3e6c254656b5ae418e3b5a03551cc" translate="yes" xml:space="preserve">
          <source>Searcher</source>
          <target state="translated">Searcher</target>
        </trans-unit>
        <trans-unit id="b1094720881ccb3d2dd5eb17b06070402b7b9239" translate="yes" xml:space="preserve">
          <source>Searches for &lt;a href=&quot;../../primitive.char&quot;&gt;&lt;code&gt;char&lt;/code&gt;&lt;/a&gt;s that match the given predicate.</source>
          <target state="translated">指定された述語に一致する&lt;a href=&quot;../../primitive.char&quot;&gt; &lt;code&gt;char&lt;/code&gt; &lt;/a&gt;検索します。</target>
        </trans-unit>
        <trans-unit id="11363ade1d3d6a9830725b9ee63abd37a1ea1520" translate="yes" xml:space="preserve">
          <source>Searches for an element in an iterator from the right, returning its index.</source>
          <target state="translated">右からイテレータ内の要素を検索し、そのインデックスを返します。</target>
        </trans-unit>
        <trans-unit id="ea94f8f1fd65b3e808118ecb3c6a64d1be80abc0" translate="yes" xml:space="preserve">
          <source>Searches for an element in an iterator from the right, returning its index. &lt;a href=&quot;../../../iter/trait.iterator#method.rposition&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">右からイテレータの要素を検索し、そのインデックスを返します。&lt;a href=&quot;../../../iter/trait.iterator#method.rposition&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a32b846472e7629b89337b736deb7cba8899702b" translate="yes" xml:space="preserve">
          <source>Searches for an element in an iterator from the right, returning its index. &lt;a href=&quot;../../iter/trait.iterator#method.rposition&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">右からイテレータの要素を検索し、そのインデックスを返します。&lt;a href=&quot;../../iter/trait.iterator#method.rposition&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2fbabe20f2ae80e8b4000f5a8fda30a8bcd233af" translate="yes" xml:space="preserve">
          <source>Searches for an element in an iterator from the right, returning its index. &lt;a href=&quot;../iter/trait.iterator#method.rposition&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">右からイテレータの要素を検索し、そのインデックスを返します。&lt;a href=&quot;../iter/trait.iterator#method.rposition&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="58a6f63decee1650a72cc8d3d4b0dc8ae926d3ea" translate="yes" xml:space="preserve">
          <source>Searches for an element in an iterator from the right, returning its index. &lt;a href=&quot;iter/trait.iterator#method.rposition&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">右からイテレータの要素を検索し、そのインデックスを返します。&lt;a href=&quot;iter/trait.iterator#method.rposition&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="fe2da068b1383ba78d78179215e20384ebd856f5" translate="yes" xml:space="preserve">
          <source>Searches for an element in an iterator from the right, returning its index. &lt;a href=&quot;trait.iterator#method.rposition&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">右からイテレータの要素を検索し、そのインデックスを返します。&lt;a href=&quot;trait.iterator#method.rposition&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="888aace1ecfca3a664f3926fcdf9d9c8737ed80d" translate="yes" xml:space="preserve">
          <source>Searches for an element in an iterator, returning its index.</source>
          <target state="translated">イテレータ内の要素を検索し、そのインデックスを返します。</target>
        </trans-unit>
        <trans-unit id="b1e4dd5c105e14ff5ce136025420dedeece55e5c" translate="yes" xml:space="preserve">
          <source>Searches for an element in an iterator, returning its index. &lt;a href=&quot;../../../iter/trait.iterator#method.position&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">イテレータの要素を検索し、そのインデックスを返します。&lt;a href=&quot;../../../iter/trait.iterator#method.position&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d5cf7f1d717e2cb1cdd88f6ee856563d8c126e03" translate="yes" xml:space="preserve">
          <source>Searches for an element in an iterator, returning its index. &lt;a href=&quot;../../iter/trait.iterator#method.position&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">イテレータの要素を検索し、そのインデックスを返します。&lt;a href=&quot;../../iter/trait.iterator#method.position&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="898fb33cb492658409d014bf819e485b96a05d7f" translate="yes" xml:space="preserve">
          <source>Searches for an element in an iterator, returning its index. &lt;a href=&quot;../iter/trait.iterator#method.position&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">イテレータの要素を検索し、そのインデックスを返します。&lt;a href=&quot;../iter/trait.iterator#method.position&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1eb70845c5eb53f54ffe500cb5ff9dd1a042ee65" translate="yes" xml:space="preserve">
          <source>Searches for an element in an iterator, returning its index. &lt;a href=&quot;iter/trait.iterator#method.position&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">イテレータの要素を検索し、そのインデックスを返します。&lt;a href=&quot;iter/trait.iterator#method.position&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="736c00e0587ecd076f8c2f0471322e982b180ef4" translate="yes" xml:space="preserve">
          <source>Searches for an element in an iterator, returning its index. &lt;a href=&quot;trait.iterator#method.position&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">イテレータの要素を検索し、そのインデックスを返します。&lt;a href=&quot;trait.iterator#method.position&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9d823a12940ddccec2fac026ab8506ebd4fce1ad" translate="yes" xml:space="preserve">
          <source>Searches for an element of an iterator from the back that satisfies a predicate.</source>
          <target state="translated">述語を満たすイテレータの要素を後ろから探します。</target>
        </trans-unit>
        <trans-unit id="532083e20b7883df5506427bdf3897cf9c69ee57" translate="yes" xml:space="preserve">
          <source>Searches for an element of an iterator from the back that satisfies a predicate. &lt;a href=&quot;../../iter/trait.doubleendediterator#method.rfind&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">述語を満たすイテレータの要素を後ろから検索します。&lt;a href=&quot;../../iter/trait.doubleendediterator#method.rfind&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="746936471fbd43113547a89d6d3b931297227e42" translate="yes" xml:space="preserve">
          <source>Searches for an element of an iterator from the back that satisfies a predicate. &lt;a href=&quot;../iter/trait.doubleendediterator#method.rfind&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">述語を満たすイテレータの要素を後ろから検索します。&lt;a href=&quot;../iter/trait.doubleendediterator#method.rfind&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="85288c4b67b128aa63ce0cba0a0f6c128e49b4a1" translate="yes" xml:space="preserve">
          <source>Searches for an element of an iterator from the back that satisfies a predicate. &lt;a href=&quot;iter/trait.doubleendediterator#method.rfind&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">述語を満たすイテレータの要素を後ろから検索します。&lt;a href=&quot;iter/trait.doubleendediterator#method.rfind&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="65a626fe71f749af973dfce0d72fd7e24c3b262a" translate="yes" xml:space="preserve">
          <source>Searches for an element of an iterator from the back that satisfies a predicate. &lt;a href=&quot;trait.doubleendediterator#method.rfind&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">述語を満たすイテレータの要素を後ろから検索します。&lt;a href=&quot;trait.doubleendediterator#method.rfind&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b5689009b2419d56c677d881fa744acad45be906" translate="yes" xml:space="preserve">
          <source>Searches for an element of an iterator that satisfies a predicate.</source>
          <target state="translated">述語を満たすイテレータの要素を検索します。</target>
        </trans-unit>
        <trans-unit id="b92e1c9d3102e3784e7bf1b1ae13ecbed92601c8" translate="yes" xml:space="preserve">
          <source>Searches for an element of an iterator that satisfies a predicate. &lt;a href=&quot;../../../iter/trait.iterator#method.find&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">述語を満たす反復子の要素を検索します。&lt;a href=&quot;../../../iter/trait.iterator#method.find&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3cdaab1b181a213143c872a425525e5ad8e5466c" translate="yes" xml:space="preserve">
          <source>Searches for an element of an iterator that satisfies a predicate. &lt;a href=&quot;../../iter/trait.iterator#method.find&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">述語を満たす反復子の要素を検索します。&lt;a href=&quot;../../iter/trait.iterator#method.find&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="cf92031246f6c4823820728ce733391b75632750" translate="yes" xml:space="preserve">
          <source>Searches for an element of an iterator that satisfies a predicate. &lt;a href=&quot;../iter/trait.iterator#method.find&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">述語を満たす反復子の要素を検索します。&lt;a href=&quot;../iter/trait.iterator#method.find&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2f547a648c4bbc4e82d48e90d04b24d4601646c0" translate="yes" xml:space="preserve">
          <source>Searches for an element of an iterator that satisfies a predicate. &lt;a href=&quot;iter/trait.iterator#method.find&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">述語を満たす反復子の要素を検索します。&lt;a href=&quot;iter/trait.iterator#method.find&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="87ac7333a913b0c4084d8e023b09ac4cdffe8559" translate="yes" xml:space="preserve">
          <source>Searches for an element of an iterator that satisfies a predicate. &lt;a href=&quot;trait.iterator#method.find&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">述語を満たす反復子の要素を検索します。&lt;a href=&quot;trait.iterator#method.find&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c42de42bc1907a5a1b52e8ec0a64dca1b9461a58" translate="yes" xml:space="preserve">
          <source>Searches for chars that are equal to a given &lt;a href=&quot;../../primitive.char&quot;&gt;&lt;code&gt;char&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">所与の等しい文字を検索&lt;a href=&quot;../../primitive.char&quot;&gt; &lt;code&gt;char&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="39893e15426279064c0dd333dd4107082c8ca7bc" translate="yes" xml:space="preserve">
          <source>Searches for chars that are equal to a given &lt;a href=&quot;primitive.char&quot;&gt;&lt;code&gt;char&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">所与の等しい文字を検索&lt;a href=&quot;primitive.char&quot;&gt; &lt;code&gt;char&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="333fc641daf7d2737df9c4e746769731b83136e8" translate="yes" xml:space="preserve">
          <source>Searches for chars that are equal to a given char</source>
          <target state="translated">与えられた文字と等しい文字を検索します。</target>
        </trans-unit>
        <trans-unit id="b8a402e814cd46ffe3e7a6aaa73558922c84e3c1" translate="yes" xml:space="preserve">
          <source>Searches for chars that are equal to any of the &lt;a href=&quot;../../primitive.char&quot;&gt;&lt;code&gt;char&lt;/code&gt;&lt;/a&gt;s in the slice.</source>
          <target state="translated">いずれかに等しい文字を検索&lt;a href=&quot;../../primitive.char&quot;&gt; &lt;code&gt;char&lt;/code&gt; &lt;/a&gt;スライス中のS。</target>
        </trans-unit>
        <trans-unit id="75af8b18236695d52f22ca858507f8eedc4a8e0c" translate="yes" xml:space="preserve">
          <source>Searches for chars that are equal to any of the &lt;a href=&quot;primitive.char&quot;&gt;&lt;code&gt;char&lt;/code&gt;&lt;/a&gt;s in the slice.</source>
          <target state="translated">いずれかに等しい文字を検索&lt;a href=&quot;primitive.char&quot;&gt; &lt;code&gt;char&lt;/code&gt; &lt;/a&gt;スライス中のS。</target>
        </trans-unit>
        <trans-unit id="702c314d5b30f1accfdbb832ab87fbb0b341a336" translate="yes" xml:space="preserve">
          <source>Searches for chars that are equal to any of the chars in the array</source>
          <target state="translated">配列内のいずれかの文字と等しい文字を検索します。</target>
        </trans-unit>
        <trans-unit id="ba66da2741c0ff78a37e961a37db7788a9edb5a8" translate="yes" xml:space="preserve">
          <source>Searches for chars that match the given predicate</source>
          <target state="translated">与えられた述語にマッチする文字を検索します。</target>
        </trans-unit>
        <trans-unit id="f79707c4ffd13504e8a620181e79d250b74fd521" translate="yes" xml:space="preserve">
          <source>Searching Each Line for the Query</source>
          <target state="translated">クエリの各行を検索する</target>
        </trans-unit>
        <trans-unit id="554e5e25f0d86fc7d48da5b753f3b192e04d6a22" translate="yes" xml:space="preserve">
          <source>Second example:</source>
          <target state="translated">第二の例。</target>
        </trans-unit>
        <trans-unit id="ddb8f6a409190e926fb7592f2d1a6011c5f9d5bd" translate="yes" xml:space="preserve">
          <source>Second, &lt;code&gt;println!&lt;/code&gt; calls a Rust macro. If it called a function instead, it would be entered as &lt;code&gt;println&lt;/code&gt; (without the &lt;code&gt;!&lt;/code&gt;). We&amp;rsquo;ll discuss Rust macros in more detail in Chapter 19. For now, you just need to know that using a &lt;code&gt;!&lt;/code&gt; means that you&amp;rsquo;re calling a macro instead of a normal function.</source>
          <target state="translated">次に、 &lt;code&gt;println!&lt;/code&gt; Rustマクロを呼び出します。代わりに関数を呼び出すと、 &lt;code&gt;println&lt;/code&gt; として入力されます（ &lt;code&gt;!&lt;/code&gt; なし）。 Rustマクロについては第19章で詳しく説明します。今のところは、 &lt;code&gt;!&lt;/code&gt; 通常の関数の代わりにマクロを呼び出すことを意味します。</target>
        </trans-unit>
        <trans-unit id="e0edb499b1c552b3dc16b17f7114852ca1f2a36c" translate="yes" xml:space="preserve">
          <source>Second, each repetition in the transcriber must contain at least one metavariable to decide now many times to expand it. If multiple metavariables appear in the same repetition, they must be bound to the same number of fragments. For instance, &lt;code&gt;( $( $i:ident ),* ; $( $j:ident ),* ) =&amp;gt; ( $( ($i,$j) ),*&lt;/code&gt; must bind the same number of &lt;code&gt;$i&lt;/code&gt; fragments as &lt;code&gt;$j&lt;/code&gt; fragments. This means that invoking the macro with &lt;code&gt;(a, b, c; d, e, f&lt;/code&gt;) is legal and expands to &lt;code&gt;((a,d), (b,e), c,f))&lt;/code&gt;, but &lt;code&gt;(a, b, c; d, e)&lt;/code&gt; is illegal because it does not have the same number. This requirement applies to every layer of nested repetitions.</source>
          <target state="translated">次に、トランスクライバーの各繰り返しには、少なくとも1つのメタ変数が含まれている必要があります。複数のメタ変数が同じ繰り返しで現れる場合、それらは同じ数のフラグメントにバインドされている必要があります。たとえば、 &lt;code&gt;( $( $i:ident ),* ; $( $j:ident ),* ) =&amp;gt; ( $( ($i,$j) ),*&lt;/code&gt; 同じ数のバインドする必要があります &lt;code&gt;$i&lt;/code&gt; として断片を &lt;code&gt;$j&lt;/code&gt; フラグメント。これは、 &lt;code&gt;(a, b, c; d, e, f&lt;/code&gt; ）でマクロを呼び出すことが正当であり、 &lt;code&gt;((a,d), (b,e), c,f))&lt;/code&gt; に展開されるが、 &lt;code&gt;(a, b, c; d, e)&lt;/code&gt; は同じ番号を持たないため、不正です。この要件は、ネストされた繰り返しのすべてのレイヤーに適用されます。</target>
        </trans-unit>
        <trans-unit id="9a073c305891d074dfc05591aefc3b14e4c5555c" translate="yes" xml:space="preserve">
          <source>Second, implicit methods on &lt;a href=&quot;../book/ch03-02-data-types&quot;&gt;primitive types&lt;/a&gt; are documented here. This can be a source of confusion for two reasons:</source>
          <target state="translated">次に、&lt;a href=&quot;../book/ch03-02-data-types&quot;&gt;プリミティブ型の&lt;/a&gt;暗黙的なメソッドがここに文書化されています。これは2つの理由で混乱の原因となる可能性があります。</target>
        </trans-unit>
        <trans-unit id="cc4af03ac46d7dd2d589609d8142afb265cb45e5" translate="yes" xml:space="preserve">
          <source>Second, it can be used to import macros from another crate, by attaching it to an &lt;code&gt;extern crate&lt;/code&gt; declaration appearing in the crate's root module. Macros imported this way are imported into the prelude of the crate, not textually, which means that they can be shadowed by any other name. While macros imported by &lt;code&gt;#[macro_use]&lt;/code&gt; can be used before the import statement, in case of a conflict, the last macro imported wins. Optionally, a list of macros to import can be specified using the &lt;a href=&quot;attributes#meta-item-attribute-syntax&quot;&gt;&lt;em&gt;MetaListIdents&lt;/em&gt;&lt;/a&gt; syntax; this is not supported when &lt;code&gt;#[macro_use]&lt;/code&gt; is applied to a module.</source>
          <target state="translated">第2 に、クレートのルートモジュールに表示される &lt;code&gt;extern crate&lt;/code&gt; 宣言に添付することにより、別のクレートからマクロをインポートするために使用できます。この方法でインポートされたマクロは、テキストではなくクレートのプレリュードにインポートされます。つまり、他の名前でシャドウすることができます。 &lt;code&gt;#[macro_use]&lt;/code&gt; によってインポートされたマクロはimportステートメントの前に使用できますが、競合が発生した場合は、最後にインポートされたマクロが優先されます。必要に応じて、インポートするマクロのリストを&lt;a href=&quot;attributes#meta-item-attribute-syntax&quot;&gt;&lt;em&gt;MetaListIdents&lt;/em&gt;&lt;/a&gt;構文を使用して指定できます。これは、 &lt;code&gt;#[macro_use]&lt;/code&gt; がモジュールに適用されている場合はサポートされません。</target>
        </trans-unit>
        <trans-unit id="97208cc673dd09ce82f68d9602b8fe562c39c03b" translate="yes" xml:space="preserve">
          <source>Second, the &lt;code&gt;five&lt;/code&gt; function has no parameters and defines the type of the return value, but the body of the function is a lonely &lt;code&gt;5&lt;/code&gt; with no semicolon because it&amp;rsquo;s an expression whose value we want to return.</source>
          <target state="translated">2番目に、 &lt;code&gt;five&lt;/code&gt; 関数にはパラメーターがなく、戻り値の型を定義しますが、関数の本体は、値を返す式であるため、セミコロンのない孤独な &lt;code&gt;5&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="4edacf5668ae7bc8aecc8dd49a240019787fb54c" translate="yes" xml:space="preserve">
          <source>Second, we can see in the signature that &lt;code&gt;add&lt;/code&gt; takes ownership of &lt;code&gt;self&lt;/code&gt;, because &lt;code&gt;self&lt;/code&gt; does &lt;em&gt;not&lt;/em&gt; have an &lt;code&gt;&amp;amp;&lt;/code&gt;. This means &lt;code&gt;s1&lt;/code&gt; in Listing 8-18 will be moved into the &lt;code&gt;add&lt;/code&gt; call and no longer be valid after that. So although &lt;code&gt;let s3 = s1 + &amp;amp;s2;&lt;/code&gt; looks like it will copy both strings and create a new one, this statement actually takes ownership of &lt;code&gt;s1&lt;/code&gt;, appends a copy of the contents of &lt;code&gt;s2&lt;/code&gt;, and then returns ownership of the result. In other words, it looks like it&amp;rsquo;s making a lot of copies but isn&amp;rsquo;t; the implementation is more efficient than copying.</source>
          <target state="translated">次に、署名には、 &lt;code&gt;add&lt;/code&gt; が &lt;code&gt;self&lt;/code&gt; の所有権を取ることがわかります。&lt;em&gt;これ&lt;/em&gt;は、 &lt;code&gt;self&lt;/code&gt; に &lt;code&gt;&amp;amp;&lt;/code&gt; が&lt;em&gt;ない&lt;/em&gt;ためです。これは、リスト8-18の &lt;code&gt;s1&lt;/code&gt; が &lt;code&gt;add&lt;/code&gt; 呼び出しに移動され、その後は無効になることを意味します。したがって、 &lt;code&gt;let s3 = s1 + &amp;amp;s2;&lt;/code&gt; 両方の文字列をコピーして新しい文字列を作成するように見えます。このステートメントは実際には &lt;code&gt;s1&lt;/code&gt; の所有権を取得し、 &lt;code&gt;s2&lt;/code&gt; の内容のコピーを追加して、結果の所有権を返します。つまり、多くのコピーを作成しているように見えますが、そうではありません。実装はコピーよりも効率的です。</target>
        </trans-unit>
        <trans-unit id="945d69a3e9b1262e6a65728582125632ae46e284" translate="yes" xml:space="preserve">
          <source>Second, we convert the bytes in the buffer to a string and print that string. The &lt;code&gt;String::from_utf8_lossy&lt;/code&gt; function takes a &lt;code&gt;&amp;amp;[u8]&lt;/code&gt; and produces a &lt;code&gt;String&lt;/code&gt; from it. The &amp;ldquo;lossy&amp;rdquo; part of the name indicates the behavior of this function when it sees an invalid UTF-8 sequence: it will replace the invalid sequence with &lt;code&gt;�&lt;/code&gt;, the &lt;code&gt;U+FFFD REPLACEMENT CHARACTER&lt;/code&gt;. You might see replacement characters for characters in the buffer that aren&amp;rsquo;t filled by request data.</source>
          <target state="translated">次に、バッファ内のバイトを文字列に変換し、その文字列を出力します。 &lt;code&gt;String::from_utf8_lossy&lt;/code&gt; 機能がかかる &lt;code&gt;&amp;amp;[u8]&lt;/code&gt; して生成し &lt;code&gt;String&lt;/code&gt; 、それから。それは不正なUTF-8シーケンスを見ているときに名前の「不可逆」の部分は、この関数の動作を示しています。それはで無効なシーケンスに置き換えられます &lt;code&gt;�&lt;/code&gt; 、 &lt;code&gt;U+FFFD REPLACEMENT CHARACTER&lt;/code&gt; 。リクエストデータで満たされていないバッファ内の文字の置換文字が表示される場合があります。</target>
        </trans-unit>
        <trans-unit id="9e79dfeb52515135908df7ef8a4402c9cf237457" translate="yes" xml:space="preserve">
          <source>Second, we&amp;rsquo;ve removed the call to &lt;code&gt;expect&lt;/code&gt; in favor of the &lt;code&gt;?&lt;/code&gt; operator, as we talked about in &lt;a href=&quot;ch09-02-recoverable-errors-with-result#a-shortcut-for-propagating-errors-the--operator&quot;&gt;Chapter 9&lt;/a&gt;. Rather than &lt;code&gt;panic!&lt;/code&gt; on an error, &lt;code&gt;?&lt;/code&gt; will return the error value from the current function for the caller to handle.</source>
          <target state="translated">第二に、我々は、呼び出しを削除した &lt;code&gt;expect&lt;/code&gt; に賛成 &lt;code&gt;?&lt;/code&gt; &lt;a href=&quot;ch09-02-recoverable-errors-with-result#a-shortcut-for-propagating-errors-the--operator&quot;&gt;第9章&lt;/a&gt;で説明したように、演算子。 &lt;code&gt;panic!&lt;/code&gt; はなく！エラーの場合、 &lt;code&gt;?&lt;/code&gt; 呼び出し元が処理できるように、現在の関数からエラー値を返します。</target>
        </trans-unit>
        <trans-unit id="f25ce1b8a399bd8621a57427a20039b4b13935db" translate="yes" xml:space="preserve">
          <source>Security</source>
          <target state="translated">Security</target>
        </trans-unit>
        <trans-unit id="a08ef173524e85733e2fbdcb76c18c7d0fe1cb13" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#method.as_mut_ptr&quot;&gt;&lt;code&gt;as_mut_ptr&lt;/code&gt;&lt;/a&gt; for warnings on using these pointers. The end pointer requires extra caution, as it does not point to a valid element in the slice.</source>
          <target state="translated">これらのポインタの使用に関する警告については、&lt;a href=&quot;#method.as_mut_ptr&quot;&gt; &lt;code&gt;as_mut_ptr&lt;/code&gt; &lt;/a&gt;を参照してください。エンドポインタはスライス内の有効な要素を指していないため、特に注意が必要です。</target>
        </trans-unit>
        <trans-unit id="dc7b9eb9b1f619eda6273cca2a8eb01bfee4bdc8" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#method.as_ptr&quot;&gt;&lt;code&gt;as_ptr&lt;/code&gt;&lt;/a&gt; for warnings on using these pointers. The end pointer requires extra caution, as it does not point to a valid element in the slice.</source>
          <target state="translated">これらのポインタの使用に関する警告については、&lt;a href=&quot;#method.as_ptr&quot;&gt; &lt;code&gt;as_ptr&lt;/code&gt; &lt;/a&gt;を参照してください。エンドポインタはスライス内の有効な要素を指していないため、特に注意が必要です。</target>
        </trans-unit>
        <trans-unit id="8a13fe09bb6db614bb3789b1ed210e6989bc7612" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#method.chunks&quot;&gt;&lt;code&gt;chunks&lt;/code&gt;&lt;/a&gt; for a variant of this iterator that also returns the remainder as a smaller chunk, and &lt;a href=&quot;#method.rchunks_exact&quot;&gt;&lt;code&gt;rchunks_exact&lt;/code&gt;&lt;/a&gt; for the same iterator but starting at the end of the slice.</source>
          <target state="translated">残りをより小さいチャンクとしても返すこのイテレータのバリアントについては、&lt;a href=&quot;#method.chunks&quot;&gt; &lt;code&gt;chunks&lt;/code&gt; &lt;/a&gt;を参照してください。同じイテレータについては、スライスの最後から始まる&lt;a href=&quot;#method.rchunks_exact&quot;&gt; &lt;code&gt;rchunks_exact&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="ad53b94a6533ff2d11534623a32f3e1cf407ac05" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#method.chunks_exact&quot;&gt;&lt;code&gt;chunks_exact&lt;/code&gt;&lt;/a&gt; for a variant of this iterator that returns chunks of always exactly &lt;code&gt;chunk_size&lt;/code&gt; elements, and &lt;a href=&quot;#method.rchunks&quot;&gt;&lt;code&gt;rchunks&lt;/code&gt;&lt;/a&gt; for the same iterator but starting at the end of the slice of the slice.</source>
          <target state="translated">参照してください&lt;a href=&quot;#method.chunks_exact&quot;&gt; &lt;code&gt;chunks_exact&lt;/code&gt; &lt;/a&gt;のリターンチャンクが常に正確にすることを、このイテレータの変異体について &lt;code&gt;chunk_size&lt;/code&gt; 要素、および&lt;a href=&quot;#method.rchunks&quot;&gt; &lt;code&gt;rchunks&lt;/code&gt; を&lt;/a&gt;同じイテレータのためではなく、スライスのスライスの終わりから始まります。</target>
        </trans-unit>
        <trans-unit id="7331f140b489d73bbe09f65e667098eb66b0b425" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#method.chunks_exact&quot;&gt;&lt;code&gt;chunks_exact&lt;/code&gt;&lt;/a&gt; for a variant of this iterator that returns chunks of always exactly &lt;code&gt;chunk_size&lt;/code&gt; elements, and &lt;a href=&quot;#method.rchunks&quot;&gt;&lt;code&gt;rchunks&lt;/code&gt;&lt;/a&gt; for the same iterator but starting at the end of the slice.</source>
          <target state="translated">参照してください&lt;a href=&quot;#method.chunks_exact&quot;&gt; &lt;code&gt;chunks_exact&lt;/code&gt; &lt;/a&gt;のリターンチャンクが常に正確にすることを、このイテレータの変異体について &lt;code&gt;chunk_size&lt;/code&gt; 要素、および&lt;a href=&quot;#method.rchunks&quot;&gt; &lt;code&gt;rchunks&lt;/code&gt; を&lt;/a&gt;同じイテレータのためではなく、スライスの終わりから始まります。</target>
        </trans-unit>
        <trans-unit id="a301ebf0252ab69de735b799a6daa8fd205fac9a" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#method.chunks_exact_mut&quot;&gt;&lt;code&gt;chunks_exact_mut&lt;/code&gt;&lt;/a&gt; for a variant of this iterator that returns chunks of always exactly &lt;code&gt;chunk_size&lt;/code&gt; elements, and &lt;a href=&quot;#method.rchunks_mut&quot;&gt;&lt;code&gt;rchunks_mut&lt;/code&gt;&lt;/a&gt; for the same iterator but starting at the end of the slice of the slice.</source>
          <target state="translated">参照してください&lt;a href=&quot;#method.chunks_exact_mut&quot;&gt; &lt;code&gt;chunks_exact_mut&lt;/code&gt; &lt;/a&gt;この戻りチャンクが常に正確というイテレータのバリアントの &lt;code&gt;chunk_size&lt;/code&gt; 要素を、そして&lt;a href=&quot;#method.rchunks_mut&quot;&gt; &lt;code&gt;rchunks_mut&lt;/code&gt; &lt;/a&gt;同じイテレータのためではなく、スライスのスライスの終わりから始まります。</target>
        </trans-unit>
        <trans-unit id="4a01c2cfedaa79a1ad54d5b4fd46b6cab923e1b8" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#method.chunks_exact_mut&quot;&gt;&lt;code&gt;chunks_exact_mut&lt;/code&gt;&lt;/a&gt; for a variant of this iterator that returns chunks of always exactly &lt;code&gt;chunk_size&lt;/code&gt; elements, and &lt;a href=&quot;#method.rchunks_mut&quot;&gt;&lt;code&gt;rchunks_mut&lt;/code&gt;&lt;/a&gt; for the same iterator but starting at the end of the slice.</source>
          <target state="translated">参照してください&lt;a href=&quot;#method.chunks_exact_mut&quot;&gt; &lt;code&gt;chunks_exact_mut&lt;/code&gt; &lt;/a&gt;この戻りチャンクが常に正確というイテレータのバリアントの &lt;code&gt;chunk_size&lt;/code&gt; 要素を、そして&lt;a href=&quot;#method.rchunks_mut&quot;&gt; &lt;code&gt;rchunks_mut&lt;/code&gt; &lt;/a&gt;同じイテレータのためではなく、スライスの終わりから始まります。</target>
        </trans-unit>
        <trans-unit id="edaf8a9ebbe2ba6f933b491ded7f7c453a863e8c" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#method.chunks_mut&quot;&gt;&lt;code&gt;chunks_mut&lt;/code&gt;&lt;/a&gt; for a variant of this iterator that also returns the remainder as a smaller chunk, and &lt;a href=&quot;#method.rchunks_exact_mut&quot;&gt;&lt;code&gt;rchunks_exact_mut&lt;/code&gt;&lt;/a&gt; for the same iterator but starting at the end of the slice of the slice.</source>
          <target state="translated">残りをより小さいチャンクとしても返すこのイテレータのバリアントについては&lt;a href=&quot;#method.rchunks_exact_mut&quot;&gt; &lt;code&gt;rchunks_exact_mut&lt;/code&gt; &lt;/a&gt;を、同じイテレータについてはスライスのスライスの最後から始まる&lt;a href=&quot;#method.chunks_mut&quot;&gt; &lt;code&gt;chunks_mut&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="13ac2320700c36fa95f13d8b9f03ffb61022a898" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#method.chunks_mut&quot;&gt;&lt;code&gt;chunks_mut&lt;/code&gt;&lt;/a&gt; for a variant of this iterator that also returns the remainder as a smaller chunk, and &lt;a href=&quot;#method.rchunks_exact_mut&quot;&gt;&lt;code&gt;rchunks_exact_mut&lt;/code&gt;&lt;/a&gt; for the same iterator but starting at the end of the slice.</source>
          <target state="translated">残りをより小さなチャンクとして返すこのイテレータのバリアントについては&lt;a href=&quot;#method.rchunks_exact_mut&quot;&gt; &lt;code&gt;rchunks_exact_mut&lt;/code&gt; &lt;/a&gt;を、同じイテレータでスライスの最後から始まる&lt;a href=&quot;#method.chunks_mut&quot;&gt; &lt;code&gt;chunks_mut&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="7214a0c4565a2b79c37054fc238c92ff1ed1713c" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#method.is_absolute&quot;&gt;&lt;code&gt;is_absolute&lt;/code&gt;&lt;/a&gt;'s documentation for more details.</source>
          <target state="translated">詳細については、&lt;a href=&quot;#method.is_absolute&quot;&gt; &lt;code&gt;is_absolute&lt;/code&gt; &lt;/a&gt;のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="b50f34b335847aa8295f6b01826574d74bbc15e2" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#method.rchunks&quot;&gt;&lt;code&gt;rchunks&lt;/code&gt;&lt;/a&gt; for a variant of this iterator that also returns the remainder as a smaller chunk, and &lt;a href=&quot;#method.chunks_exact&quot;&gt;&lt;code&gt;chunks_exact&lt;/code&gt;&lt;/a&gt; for the same iterator but starting at the beginning of the slice.</source>
          <target state="translated">残りをより小さいチャンクとして返すこのイテレータのバリアントについては&lt;a href=&quot;#method.chunks_exact&quot;&gt; &lt;code&gt;chunks_exact&lt;/code&gt; &lt;/a&gt;を、同じイテレータについてはスライスの先頭から開始する&lt;a href=&quot;#method.rchunks&quot;&gt; &lt;code&gt;rchunks&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="9979021bccd2efc766458b56892f3b499ecbd6ef" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#method.rchunks_exact&quot;&gt;&lt;code&gt;rchunks_exact&lt;/code&gt;&lt;/a&gt; for a variant of this iterator that returns chunks of always exactly &lt;code&gt;chunk_size&lt;/code&gt; elements, and &lt;a href=&quot;#method.chunks&quot;&gt;&lt;code&gt;chunks&lt;/code&gt;&lt;/a&gt; for the same iterator but starting at the beginning of the slice.</source>
          <target state="translated">常に正確に &lt;code&gt;chunk_size&lt;/code&gt; 要素のチャンクを返すこのイテレータのバリアントについては&lt;a href=&quot;#method.rchunks_exact&quot;&gt; &lt;code&gt;rchunks_exact&lt;/code&gt; &lt;/a&gt;を参照してください。また、同じイテレータのスライスの先頭から始まる&lt;a href=&quot;#method.chunks&quot;&gt; &lt;code&gt;chunks&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="aff7ed3f854512f12d681629cf01f859b8f4ed24" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#method.rchunks_exact_mut&quot;&gt;&lt;code&gt;rchunks_exact_mut&lt;/code&gt;&lt;/a&gt; for a variant of this iterator that returns chunks of always exactly &lt;code&gt;chunk_size&lt;/code&gt; elements, and &lt;a href=&quot;#method.chunks_mut&quot;&gt;&lt;code&gt;chunks_mut&lt;/code&gt;&lt;/a&gt; for the same iterator but starting at the beginning of the slice.</source>
          <target state="translated">参照してください&lt;a href=&quot;#method.rchunks_exact_mut&quot;&gt; &lt;code&gt;rchunks_exact_mut&lt;/code&gt; &lt;/a&gt;この戻りチャンクが常に正確というイテレータのバリアントの &lt;code&gt;chunk_size&lt;/code&gt; 要素を、そして&lt;a href=&quot;#method.chunks_mut&quot;&gt; &lt;code&gt;chunks_mut&lt;/code&gt; &lt;/a&gt;同じイテレータのためではなく、スライスの先頭から始まります。</target>
        </trans-unit>
        <trans-unit id="7e05e55b1d4fcd0ae7cfc2ecc3606e1d31985ac7" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#method.rchunks_mut&quot;&gt;&lt;code&gt;rchunks_mut&lt;/code&gt;&lt;/a&gt; for a variant of this iterator that also returns the remainder as a smaller chunk, and &lt;a href=&quot;#method.chunks_exact_mut&quot;&gt;&lt;code&gt;chunks_exact_mut&lt;/code&gt;&lt;/a&gt; for the same iterator but starting at the beginning of the slice.</source>
          <target state="translated">残りをより小さいチャンクとして返すこのイテレーターのバリアントについては&lt;a href=&quot;#method.chunks_exact_mut&quot;&gt; &lt;code&gt;chunks_exact_mut&lt;/code&gt; &lt;/a&gt;を、同じイテレーターであるがスライスの先頭から開始する場合の&lt;a href=&quot;#method.rchunks_mut&quot;&gt; &lt;code&gt;rchunks_mut&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="30b44f2b97828c5798bd74c5cb56ed3adcd6cab6" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#method.read_to_end&quot;&gt;&lt;code&gt;read_to_end&lt;/code&gt;&lt;/a&gt; for other error semantics.</source>
          <target state="translated">その他のエラーセマンティクスについては、&lt;a href=&quot;#method.read_to_end&quot;&gt; &lt;code&gt;read_to_end&lt;/code&gt; &lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="cb8374b4383c115aa6bb93fe476933ce8d82c2c3" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#variant.Read&quot;&gt;&lt;code&gt;Shutdown::Read&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#variant.Write&quot;&gt;&lt;code&gt;Shutdown::Write&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">詳細については、&lt;a href=&quot;#variant.Read&quot;&gt; &lt;code&gt;Shutdown::Read&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#variant.Write&quot;&gt; &lt;code&gt;Shutdown::Write&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="04eb879e476542c9d6688cad0ed5c27155fc0106" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../mem/union.maybeuninit#method.zeroed&quot;&gt;&lt;code&gt;MaybeUninit::zeroed&lt;/code&gt;&lt;/a&gt; for examples of correct and incorrect usage of this method.</source>
          <target state="translated">このメソッドの正しい使用法と誤った使用法の例については、&lt;a href=&quot;../mem/union.maybeuninit#method.zeroed&quot;&gt; &lt;code&gt;MaybeUninit::zeroed&lt;/code&gt; &lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="d6a22e1a0e367e3204d83a4c4ea76f0342d3fb7a" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../reference/expressions/loop-expr#continue-expressions&quot;&gt;continue expressions&lt;/a&gt; from the reference for more details.</source>
          <target state="translated">詳細について&lt;a href=&quot;../reference/expressions/loop-expr#continue-expressions&quot;&gt;は&lt;/a&gt;、リファレンスの継続式を参照してください。</target>
        </trans-unit>
        <trans-unit id="409331ea9c5566f36765b941c91e09355dd2b84b" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../struct.btreemap&quot;&gt;&lt;code&gt;BTreeMap&lt;/code&gt;&lt;/a&gt;'s documentation for a detailed discussion of this collection's performance benefits and drawbacks.</source>
          <target state="translated">このコレクションのパフォーマンス上の利点と欠点の詳細については、&lt;a href=&quot;../struct.btreemap&quot;&gt; &lt;code&gt;BTreeMap&lt;/code&gt; &lt;/a&gt;のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="dd02ad7b79cb810db76f32ac11a1d341441c6c18" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;enum.ipaddr&quot;&gt;&lt;code&gt;IpAddr&lt;/code&gt;&lt;/a&gt; for a type encompassing both IPv4 and IPv6 addresses.</source>
          <target state="translated">IPv4アドレスとIPv6アドレスの両方を含むタイプについては、&lt;a href=&quot;enum.ipaddr&quot;&gt; &lt;code&gt;IpAddr&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="d0d20fe1b5c6691e296fc4ad9d04188bc107d2e9" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;enum.prefix&quot;&gt;&lt;code&gt;Prefix&lt;/code&gt;&lt;/a&gt;'s documentation for more information on the different kinds of prefixes.</source>
          <target state="translated">さまざまな種類の接頭辞の詳細については、&lt;a href=&quot;enum.prefix&quot;&gt; &lt;code&gt;Prefix&lt;/code&gt; &lt;/a&gt;のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="43f84a643e49bae1b13c6849a2d13e25d575392c" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;enum.shutdown#variant.Read&quot;&gt;&lt;code&gt;Shutdown::Read&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;enum.shutdown#variant.Write&quot;&gt;&lt;code&gt;Shutdown::Write&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">詳細については、&lt;a href=&quot;enum.shutdown#variant.Read&quot;&gt; &lt;code&gt;Shutdown::Read&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;enum.shutdown#variant.Write&quot;&gt; &lt;code&gt;Shutdown::Write&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="27f023fba6e8d14455766073d8c5d21b58e5464b" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;enum.socketaddr&quot;&gt;&lt;code&gt;SocketAddr&lt;/code&gt;&lt;/a&gt; for a type encompassing both IPv4 and IPv6 socket addresses.</source>
          <target state="translated">IPv4とIPv6の両方のソケットアドレスを含むタイプについては、&lt;a href=&quot;enum.socketaddr&quot;&gt; &lt;code&gt;SocketAddr&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="70683490ae88162ba5317936bdeb81eac5791fbb" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;fmt/index&quot;&gt;&lt;code&gt;std::fmt&lt;/code&gt;&lt;/a&gt; for more information on the format string syntax.</source>
          <target state="translated">フォーマット文字列の構文の詳細については、&lt;a href=&quot;fmt/index&quot;&gt; &lt;code&gt;std::fmt&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="29f60592601875cc5a5ce38cc10ec59d5cbb6de7" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;fn.remove_file&quot;&gt;&lt;code&gt;fs::remove_file&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;fn.remove_dir&quot;&gt;&lt;code&gt;fs::remove_dir&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;fn.remove_file&quot;&gt; &lt;code&gt;fs::remove_file&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;fn.remove_dir&quot;&gt; &lt;code&gt;fs::remove_dir&lt;/code&gt; &lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="27fa9b008bf74c8f9891483f29a0ddfd4a23c5bc" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://doc.rust-lang.org/core/fmt/index.html&quot;&gt;&lt;code&gt;std::fmt&lt;/code&gt;&lt;/a&gt; for more information on the format string syntax.</source>
          <target state="translated">フォーマット文字列構文の詳細については、&lt;a href=&quot;https://doc.rust-lang.org/core/fmt/index.html&quot;&gt; &lt;code&gt;std::fmt&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="7c18a8a03336ae70998b8592562c66c653cc40cd" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://doc.rust-lang.org/nomicon/send-and-sync.html&quot;&gt;the Nomicon&lt;/a&gt; for more details about &lt;code&gt;Sync&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Sync&lt;/code&gt; の詳細については&lt;a href=&quot;https://doc.rust-lang.org/nomicon/send-and-sync.html&quot;&gt;、Nomicon&lt;/a&gt;を参照してください。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
