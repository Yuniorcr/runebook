<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="rust">
    <body>
      <group id="rust">
        <trans-unit id="f5ba25b4491615c19d3722047fc94b7603c652f7" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://doc.rust-lang.org/nomicon/send-and-sync.html&quot;&gt;the Nomicon&lt;/a&gt; for more details.</source>
          <target state="translated">詳細について&lt;a href=&quot;https://doc.rust-lang.org/nomicon/send-and-sync.html&quot;&gt;は、Nomicon&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="44ad661c6b55136293e0c7164c35451a0e3281e1" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://github.com/rust-lang/rfcs/blob/master/text/0560-integer-overflow.md&quot;&gt;RFC 560&lt;/a&gt; for error conditions, rationale, and more details about integer overflow.</source>
          <target state="translated">エラー条件、根拠、および整数オーバーフローの詳細については、&lt;a href=&quot;https://github.com/rust-lang/rfcs/blob/master/text/0560-integer-overflow.md&quot;&gt;RFC 560&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="1fd8b0e5025ea999368357669eb9e615d24ce186" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://github.com/rust-lang/rfcs/blob/master/text/0911-const-fn.md&quot;&gt;RFC 911&lt;/a&gt; for more details on the design of &lt;code&gt;const fn&lt;/code&gt;s.</source>
          <target state="translated">参照してください&lt;a href=&quot;https://github.com/rust-lang/rfcs/blob/master/text/0911-const-fn.md&quot;&gt;RFC 911&lt;/a&gt;の設計の詳細については、 &lt;code&gt;const fn&lt;/code&gt; 秒。</target>
        </trans-unit>
        <trans-unit id="f0f7f73bb841f9097f2099a2bd26bd89ec57269c" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://github.com/rust-lang/rfcs/blob/master/text/1522-conservative-impl-trait.md&quot;&gt;RFC 1522&lt;/a&gt; for more details.</source>
          <target state="translated">詳細については、&lt;a href=&quot;https://github.com/rust-lang/rfcs/blob/master/text/1522-conservative-impl-trait.md&quot;&gt;RFC 1522&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="341ee4f18b96b94d5f3913f41221f7474b554168" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;notation&quot;&gt;Notation&lt;/a&gt; for more detail.</source>
          <target state="translated">詳細については、&lt;a href=&quot;notation&quot;&gt;表記法&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="972bae082186c64fbfd97c0611f966d97e0f3bbc" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;ptr/fn.copy&quot;&gt;&lt;code&gt;ptr::copy&lt;/code&gt;&lt;/a&gt; for safety concerns and examples.</source>
          <target state="translated">安全上の懸念と例については、&lt;a href=&quot;ptr/fn.copy&quot;&gt; &lt;code&gt;ptr::copy&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="4a2efa607c2f9efd05c8f4fb3dd65f5a178fe36d" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;ptr/fn.copy_nonoverlapping&quot;&gt;&lt;code&gt;ptr::copy_nonoverlapping&lt;/code&gt;&lt;/a&gt; for safety concerns and examples.</source>
          <target state="translated">安全上の懸念と例については、&lt;a href=&quot;ptr/fn.copy_nonoverlapping&quot;&gt; &lt;code&gt;ptr::copy_nonoverlapping&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="851c43367302bcceb8d84cadb6759ffc4492d6b7" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;ptr/fn.drop_in_place&quot;&gt;&lt;code&gt;ptr::drop_in_place&lt;/code&gt;&lt;/a&gt; for safety concerns and examples.</source>
          <target state="translated">安全上の懸念と例については、&lt;a href=&quot;ptr/fn.drop_in_place&quot;&gt; &lt;code&gt;ptr::drop_in_place&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="69b1154db3deb834a573304ef00619edd7738644" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;ptr/fn.read&quot;&gt;&lt;code&gt;ptr::read&lt;/code&gt;&lt;/a&gt; for safety concerns and examples.</source>
          <target state="translated">安全上の懸念と例については、&lt;a href=&quot;ptr/fn.read&quot;&gt; &lt;code&gt;ptr::read&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="2b430283b5482aede759e6433b387eba9aad4d05" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;ptr/fn.read_unaligned&quot;&gt;&lt;code&gt;ptr::read_unaligned&lt;/code&gt;&lt;/a&gt; for safety concerns and examples.</source>
          <target state="translated">安全上の懸念と例については、&lt;a href=&quot;ptr/fn.read_unaligned&quot;&gt; &lt;code&gt;ptr::read_unaligned&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="2f1c66be6a57de6ea3f7a9900acf0b07472d4c4c" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;ptr/fn.read_volatile&quot;&gt;&lt;code&gt;ptr::read_volatile&lt;/code&gt;&lt;/a&gt; for safety concerns and examples.</source>
          <target state="translated">安全上の懸念と例については、&lt;a href=&quot;ptr/fn.read_volatile&quot;&gt; &lt;code&gt;ptr::read_volatile&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="7ecaa8597e3a5f6f0bc305f4dcaf26239ba18209" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;ptr/fn.replace&quot;&gt;&lt;code&gt;ptr::replace&lt;/code&gt;&lt;/a&gt; for safety concerns and examples.</source>
          <target state="translated">安全上の懸念と例については、&lt;a href=&quot;ptr/fn.replace&quot;&gt; &lt;code&gt;ptr::replace&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="41ca19c37c44e13e4783ee2c86e6f12bcec2190c" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;ptr/fn.swap&quot;&gt;&lt;code&gt;ptr::swap&lt;/code&gt;&lt;/a&gt; for safety concerns and examples.</source>
          <target state="translated">安全上の懸念と例については、&lt;a href=&quot;ptr/fn.swap&quot;&gt; &lt;code&gt;ptr::swap&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="dc13b3c74118eea647adf7d6c3a290dd62768d26" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;ptr/fn.write&quot;&gt;&lt;code&gt;ptr::write&lt;/code&gt;&lt;/a&gt; for safety concerns and examples.</source>
          <target state="translated">安全上の懸念と例については、&lt;a href=&quot;ptr/fn.write&quot;&gt; &lt;code&gt;ptr::write&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="76ef5570f01a9fbfe90fdfe1fba5407ca8b93791" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;ptr/fn.write_bytes&quot;&gt;&lt;code&gt;ptr::write_bytes&lt;/code&gt;&lt;/a&gt; for safety concerns and examples.</source>
          <target state="translated">安全上の懸念と例については、&lt;a href=&quot;ptr/fn.write_bytes&quot;&gt; &lt;code&gt;ptr::write_bytes&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="24eec72977711be501e6f3e1bb69cc5e2891626c" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;ptr/fn.write_unaligned&quot;&gt;&lt;code&gt;ptr::write_unaligned&lt;/code&gt;&lt;/a&gt; for safety concerns and examples.</source>
          <target state="translated">安全上の懸念と例については、&lt;a href=&quot;ptr/fn.write_unaligned&quot;&gt; &lt;code&gt;ptr::write_unaligned&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="1bce77a7b346a67606634ba24ac27755ce56c7ed" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;ptr/fn.write_volatile&quot;&gt;&lt;code&gt;ptr::write_volatile&lt;/code&gt;&lt;/a&gt; for safety concerns and examples.</source>
          <target state="translated">安全上の懸念と例については、&lt;a href=&quot;ptr/fn.write_volatile&quot;&gt; &lt;code&gt;ptr::write_volatile&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="78df71e316ba5edeeca33937d63fcf6d54758758" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;struct.btreemap&quot;&gt;&lt;code&gt;BTreeMap&lt;/code&gt;&lt;/a&gt;'s documentation for a detailed discussion of this collection's performance benefits and drawbacks.</source>
          <target state="translated">このコレクションのパフォーマンスの利点と欠点の詳細については、&lt;a href=&quot;struct.btreemap&quot;&gt; &lt;code&gt;BTreeMap&lt;/code&gt; &lt;/a&gt;のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="b7b5e3bf058d23bd60805c25bebece5bf3a99b97" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;struct.path#method.is_absolute&quot;&gt;&lt;code&gt;is_absolute&lt;/code&gt;&lt;/a&gt;'s documentation for more details.</source>
          <target state="translated">詳細については、&lt;a href=&quot;struct.path#method.is_absolute&quot;&gt; &lt;code&gt;is_absolute&lt;/code&gt; &lt;/a&gt;のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="bd6a1a0288002d86b6069fd21311e5cbd0663b77" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;struct.pathbuf#method.push&quot;&gt;&lt;code&gt;PathBuf::push&lt;/code&gt;&lt;/a&gt; for more details on what it means to adjoin a path.</source>
          <target state="translated">参照&lt;a href=&quot;struct.pathbuf#method.push&quot;&gt; &lt;code&gt;PathBuf::push&lt;/code&gt; &lt;/a&gt;それがパスに隣接して何を意味するのかの詳細については。</target>
        </trans-unit>
        <trans-unit id="94c21296e1f6ae9d012718f5863687c9e8dc55c1" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;struct.pathbuf#method.set_extension&quot;&gt;&lt;code&gt;PathBuf::set_extension&lt;/code&gt;&lt;/a&gt; for more details.</source>
          <target state="translated">詳細については、&lt;a href=&quot;struct.pathbuf#method.set_extension&quot;&gt; &lt;code&gt;PathBuf::set_extension&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="dfa7b26a3f4db66a464bece31851b8d86818f7f8" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;struct.pathbuf#method.set_file_name&quot;&gt;&lt;code&gt;PathBuf::set_file_name&lt;/code&gt;&lt;/a&gt; for more details.</source>
          <target state="translated">詳細については、&lt;a href=&quot;struct.pathbuf#method.set_file_name&quot;&gt; &lt;code&gt;PathBuf::set_file_name&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="c5b513b630e2729ba5f63b01baaa7c10086123db" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;struct.socketaddrv6#method.flowinfo&quot;&gt;&lt;code&gt;SocketAddrV6::flowinfo&lt;/code&gt;&lt;/a&gt;'s documentation for more details.</source>
          <target state="translated">詳細については、&lt;a href=&quot;struct.socketaddrv6#method.flowinfo&quot;&gt; &lt;code&gt;SocketAddrV6::flowinfo&lt;/code&gt; &lt;/a&gt;のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="d331ca852b3d7c7663d2f660fe9799e1576d7fb9" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;struct.socketaddrv6#method.scope_id&quot;&gt;&lt;code&gt;SocketAddrV6::scope_id&lt;/code&gt;&lt;/a&gt;'s documentation for more details.</source>
          <target state="translated">詳細については、&lt;a href=&quot;struct.socketaddrv6#method.scope_id&quot;&gt; &lt;code&gt;SocketAddrV6::scope_id&lt;/code&gt; &lt;/a&gt;のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="e5f7275b9d5f14c0872aca5702c25ef924c7a7f5" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;struct.syncsender#method.send&quot;&gt;&lt;code&gt;send&lt;/code&gt;&lt;/a&gt; for notes about guarantees of whether the receiver has received the data or not if this function is successful.</source>
          <target state="translated">この関数が成功した場合に受信者がデータを受信したかどうかの保証については、&lt;a href=&quot;struct.syncsender#method.send&quot;&gt; &lt;code&gt;send&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="5f6fda69f1497d8ba3de92a1bcf68c8ba9af3309" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;thread/struct.localkey&quot;&gt;&lt;code&gt;LocalKey&lt;/code&gt; documentation&lt;/a&gt; for more information.</source>
          <target state="translated">詳細については、&lt;a href=&quot;thread/struct.localkey&quot;&gt; &lt;code&gt;LocalKey&lt;/code&gt; のドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="86a905795e30477334aa445a9647e2b9062f6913" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;thread/struct.localkey&quot;&gt;LocalKey documentation&lt;/a&gt; for more information.</source>
          <target state="translated">詳細については、&lt;a href=&quot;thread/struct.localkey&quot;&gt;LocalKeyのドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="6b900f7c84247513b4423008ec6a08ea2c7fe610" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;trait.globalalloc#method.alloc_zeroed&quot;&gt;&lt;code&gt;GlobalAlloc::alloc_zeroed&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;trait.globalalloc#method.alloc_zeroed&quot;&gt; &lt;code&gt;GlobalAlloc::alloc_zeroed&lt;/code&gt; &lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="e2b18ce9d95985463bc331652e45e3e90f73ff9a" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;trait.globalalloc#method.realloc&quot;&gt;&lt;code&gt;GlobalAlloc::realloc&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;trait.globalalloc#method.realloc&quot;&gt; &lt;code&gt;GlobalAlloc::realloc&lt;/code&gt; &lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="9164fd30a08331605d710758de24a8ef25138219" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;trait.globalalloc#tymethod.alloc&quot;&gt;&lt;code&gt;GlobalAlloc::alloc&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;trait.globalalloc#tymethod.alloc&quot;&gt; &lt;code&gt;GlobalAlloc::alloc&lt;/code&gt; &lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="2bdc617001eb4f1263d54b0f93b73343a8b5f305" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;trait.globalalloc#tymethod.dealloc&quot;&gt;&lt;code&gt;GlobalAlloc::dealloc&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;trait.globalalloc#tymethod.dealloc&quot;&gt; &lt;code&gt;GlobalAlloc::dealloc&lt;/code&gt; &lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="49e809f67cd789183663f48fd4e91265ea068b30" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;trait.read#method.read_to_end&quot;&gt;&lt;code&gt;read_to_end&lt;/code&gt;&lt;/a&gt; for other error semantics.</source>
          <target state="translated">その他のエラーセマンティクスについては、&lt;a href=&quot;trait.read#method.read_to_end&quot;&gt; &lt;code&gt;read_to_end&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="a86ba0292af4fa02f7d1d2fc126212b338bc798d" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;trait.seek&quot;&gt;&lt;code&gt;std::io::Seek&lt;/code&gt;&lt;/a&gt; for more details.</source>
          <target state="translated">詳細については、&lt;a href=&quot;trait.seek&quot;&gt; &lt;code&gt;std::io::Seek&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="e0a3710bdea3af01a290862468d9af89cb76eaa9" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;union.maybeuninit#method.assume_init_mut&quot;&gt;&lt;code&gt;assume_init_mut&lt;/code&gt;&lt;/a&gt; for more details and examples.</source>
          <target state="translated">詳細と例については、&lt;a href=&quot;union.maybeuninit#method.assume_init_mut&quot;&gt; &lt;code&gt;assume_init_mut&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="a8166eab45cb7542c0a1ee511bc39280f71da297" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;union.maybeuninit#method.assume_init_ref&quot;&gt;&lt;code&gt;assume_init_ref&lt;/code&gt;&lt;/a&gt; for more details and examples.</source>
          <target state="translated">詳細と例については、&lt;a href=&quot;union.maybeuninit#method.assume_init_ref&quot;&gt; &lt;code&gt;assume_init_ref&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="118dc710e74fc36d342f3a8191784163ef5e4d91" translate="yes" xml:space="preserve">
          <source>See &lt;code&gt;OsString&lt;/code&gt; introduction for information about encoding.</source>
          <target state="translated">エンコードについては、 &lt;code&gt;OsString&lt;/code&gt; の概要をご覧ください。</target>
        </trans-unit>
        <trans-unit id="a76df453b90814b857b917897c5a54c5c0335cae" translate="yes" xml:space="preserve">
          <source>See &lt;code&gt;from_bits&lt;/code&gt; for some discussion of the portability of this operation (there are almost no issues).</source>
          <target state="translated">この操作の移植性については、 &lt;code&gt;from_bits&lt;/code&gt; を参照してください（ほとんど問題はありません）。</target>
        </trans-unit>
        <trans-unit id="2e5cf5f20a4559eb76238f8844eda1a075fc7736" translate="yes" xml:space="preserve">
          <source>See &lt;em&gt;&lt;a href=&quot;items/functions#extern-function-qualifier&quot;&gt;extern functions&lt;/a&gt;&lt;/em&gt; for information on specifying the ABI for exporting functions. See &lt;em&gt;&lt;a href=&quot;items/external-blocks&quot;&gt;external blocks&lt;/a&gt;&lt;/em&gt; for information on specifying the ABI for linking external libraries.</source>
          <target state="translated">&lt;em&gt;&lt;a href=&quot;items/functions#extern-function-qualifier&quot;&gt;関数&lt;/a&gt;&lt;/em&gt;をエクスポートするためのABIの指定については、&lt;em&gt;extern関数&lt;/em&gt;を参照してください。外部ライブラリをリンクするためのABIの指定については、&lt;em&gt;&lt;a href=&quot;items/external-blocks&quot;&gt;外部ブロック&lt;/a&gt;&lt;/em&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="d06e3277392bda59f92ee25a953e14ab2862ecba" translate="yes" xml:space="preserve">
          <source>See &lt;em&gt;&lt;a href=&quot;items/functions#extern-functions&quot;&gt;extern functions&lt;/a&gt;&lt;/em&gt; for information on specifying the ABI for exporting functions. See &lt;em&gt;&lt;a href=&quot;items/external-blocks&quot;&gt;external blocks&lt;/a&gt;&lt;/em&gt; for information on specifying the ABI for linking external libraries.</source>
          <target state="translated">&lt;em&gt;&lt;a href=&quot;items/functions#extern-functions&quot;&gt;関数&lt;/a&gt;&lt;/em&gt;をエクスポートするためのABIの指定については、&lt;em&gt;extern関数&lt;/em&gt;を参照してください。外部ライブラリをリンクするためのABIの指定については、&lt;em&gt;&lt;a href=&quot;items/external-blocks&quot;&gt;外部ブロック&lt;/a&gt;&lt;/em&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="67373bb92cd7ecbf243edb9d60ad6f00f86a6052" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">も参照してください。</target>
        </trans-unit>
        <trans-unit id="2d8243a2c0e464492c9d563c4f92c56ae3421bcc" translate="yes" xml:space="preserve">
          <source>See also</source>
          <target state="translated">参照:</target>
        </trans-unit>
        <trans-unit id="6db215b954f737d274df792c7ae091f8f0b3e26a" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;../slice/fn.from_raw_parts&quot;&gt;&lt;code&gt;slice::from_raw_parts&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../slice/fn.from_raw_parts&quot;&gt; &lt;code&gt;slice::from_raw_parts&lt;/code&gt; &lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="4083d2dbd51616b52046258ff9bc488166f12988" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;../slice/fn.from_raw_parts_mut&quot;&gt;&lt;code&gt;slice::from_raw_parts_mut&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">また、&lt;a href=&quot;../slice/fn.from_raw_parts_mut&quot;&gt; &lt;code&gt;slice::from_raw_parts_mut&lt;/code&gt; &lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="1c84ac42290f1c39af3a495925f298df5ee8e135" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;https://github.com/rust-lang/rust/issues/14587&quot;&gt;Issue 14587&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/rust-lang/rust/issues/14587&quot;&gt;Issue14587&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="5bb8bf66b2416daae763b4f6167577e698f82342" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;slice/fn.from_raw_parts&quot;&gt;&lt;code&gt;slice::from_raw_parts&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;slice/fn.from_raw_parts&quot;&gt; &lt;code&gt;slice::from_raw_parts&lt;/code&gt; &lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="ebf5d049d15310cdc527996c8d364fc5baf4f2b4" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;slice/fn.from_raw_parts_mut&quot;&gt;&lt;code&gt;slice::from_raw_parts_mut&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">また、&lt;a href=&quot;slice/fn.from_raw_parts_mut&quot;&gt; &lt;code&gt;slice::from_raw_parts_mut&lt;/code&gt; &lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="8edc55a72fd9336940d69577e0d565708a4d95f6" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;struct.arc#method.get_mut&quot;&gt;&lt;code&gt;get_mut&lt;/code&gt;&lt;/a&gt;, which is safe and does appropriate checks.</source>
          <target state="translated">安全で適切なチェックを行う&lt;a href=&quot;struct.arc#method.get_mut&quot;&gt; &lt;code&gt;get_mut&lt;/code&gt; &lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="54b76a65569e44a672110c944b0a48a3fe458998" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;struct.arc#method.get_mut&quot;&gt;&lt;code&gt;get_mut&lt;/code&gt;&lt;/a&gt;, which will fail rather than cloning.</source>
          <target state="translated">&lt;a href=&quot;struct.arc#method.get_mut&quot;&gt; &lt;code&gt;get_mut&lt;/code&gt; &lt;/a&gt;も参照してください。クローンではなく失敗します。</target>
        </trans-unit>
        <trans-unit id="0fe20fa068742b872ec033cf4f0aec8c1d3869be" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;struct.arc#method.make_mut&quot;&gt;&lt;code&gt;make_mut&lt;/code&gt;&lt;/a&gt;, which will &lt;a href=&quot;../clone/trait.clone#tymethod.clone&quot;&gt;&lt;code&gt;clone&lt;/code&gt;&lt;/a&gt; the inner value when it's shared.</source>
          <target state="translated">共有されるときに内部値を&lt;a href=&quot;../clone/trait.clone#tymethod.clone&quot;&gt; &lt;code&gt;clone&lt;/code&gt; &lt;/a&gt;する&lt;a href=&quot;struct.arc#method.make_mut&quot;&gt; &lt;code&gt;make_mut&lt;/code&gt; &lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="0d4171060776685cbcb51ee6ee6bbdcf1879291e" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;struct.arc#method.make_mut&quot;&gt;&lt;code&gt;make_mut&lt;/code&gt;&lt;/a&gt;, which will &lt;a href=&quot;../clone/trait.clone#tymethod.clone&quot;&gt;&lt;code&gt;clone&lt;/code&gt;&lt;/a&gt; the inner value when there are other pointers.</source>
          <target state="translated">&lt;a href=&quot;struct.arc#method.make_mut&quot;&gt; &lt;code&gt;make_mut&lt;/code&gt; &lt;/a&gt;も参照してください。これは、他のポインターがある場合に内部値を&lt;a href=&quot;../clone/trait.clone#tymethod.clone&quot;&gt; &lt;code&gt;clone&lt;/code&gt; &lt;/a&gt;します。</target>
        </trans-unit>
        <trans-unit id="e157ed1ad15cf2fe69af48041bac811535f09cc4" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;struct.rc#method.get_mut&quot;&gt;&lt;code&gt;get_mut&lt;/code&gt;&lt;/a&gt;, which is safe and does appropriate checks.</source>
          <target state="translated">安全で適切なチェックを行う&lt;a href=&quot;struct.rc#method.get_mut&quot;&gt; &lt;code&gt;get_mut&lt;/code&gt; &lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="8386281089e89688f659aff2a942789b811c16c4" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;struct.rc#method.get_mut&quot;&gt;&lt;code&gt;get_mut&lt;/code&gt;&lt;/a&gt;, which will fail rather than cloning.</source>
          <target state="translated">&lt;a href=&quot;struct.rc#method.get_mut&quot;&gt; &lt;code&gt;get_mut&lt;/code&gt; &lt;/a&gt;も参照してください。クローンではなく失敗します。</target>
        </trans-unit>
        <trans-unit id="9e5afe237adccc0b69c648652691604f2a2ed0f8" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;struct.rc#method.make_mut&quot;&gt;&lt;code&gt;make_mut&lt;/code&gt;&lt;/a&gt;, which will &lt;a href=&quot;../clone/trait.clone#tymethod.clone&quot;&gt;&lt;code&gt;clone&lt;/code&gt;&lt;/a&gt; the inner value when it's shared.</source>
          <target state="translated">共有されるときに内部値を&lt;a href=&quot;../clone/trait.clone#tymethod.clone&quot;&gt; &lt;code&gt;clone&lt;/code&gt; &lt;/a&gt;する&lt;a href=&quot;struct.rc#method.make_mut&quot;&gt; &lt;code&gt;make_mut&lt;/code&gt; &lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="6fce7aa52daeacb9a59530fc3f752b9c4992304b" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;struct.rc#method.make_mut&quot;&gt;&lt;code&gt;make_mut&lt;/code&gt;&lt;/a&gt;, which will &lt;a href=&quot;../clone/trait.clone#tymethod.clone&quot;&gt;&lt;code&gt;clone&lt;/code&gt;&lt;/a&gt; the inner value when there are other pointers.</source>
          <target state="translated">&lt;a href=&quot;struct.rc#method.make_mut&quot;&gt; &lt;code&gt;make_mut&lt;/code&gt; &lt;/a&gt;も参照してください。これは、他のポインターがある場合に内部値を&lt;a href=&quot;../clone/trait.clone#tymethod.clone&quot;&gt; &lt;code&gt;clone&lt;/code&gt; &lt;/a&gt;します。</target>
        </trans-unit>
        <trans-unit id="e4790e0c59d5b307e081e9a6ad9818293be7ea77" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;trait.iterator#method.is_partitioned&quot;&gt;&lt;code&gt;is_partitioned()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;trait.iterator#method.partition&quot;&gt;&lt;code&gt;partition()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;trait.iterator#method.is_partitioned&quot;&gt; &lt;code&gt;is_partitioned()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;trait.iterator#method.partition&quot;&gt; &lt;code&gt;partition()&lt;/code&gt; &lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="1220fc1c761c30835988be551110c8601cd12a7b" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;trait.iterator#method.is_partitioned&quot;&gt;&lt;code&gt;is_partitioned()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;trait.iterator#method.partition_in_place&quot;&gt;&lt;code&gt;partition_in_place()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;trait.iterator#method.is_partitioned&quot;&gt; &lt;code&gt;is_partitioned()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;trait.iterator#method.partition_in_place&quot;&gt; &lt;code&gt;partition_in_place()&lt;/code&gt; &lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="58652a24603bb4cf696a8d8073610c55ebc28699" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;trait.iterator#method.partition&quot;&gt;&lt;code&gt;partition()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;trait.iterator#method.partition_in_place&quot;&gt;&lt;code&gt;partition_in_place()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;trait.iterator#method.partition&quot;&gt; &lt;code&gt;partition()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;trait.iterator#method.partition_in_place&quot;&gt; &lt;code&gt;partition_in_place()&lt;/code&gt; &lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="c6bfb5e1e36a59642f91de9994e8882f47dda82d" translate="yes" xml:space="preserve">
          <source>See also https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html</source>
          <target state="translated">https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html も参照してください。</target>
        </trans-unit>
        <trans-unit id="e5c3885bb44ac46bcc02b68414219a472b58219b" translate="yes" xml:space="preserve">
          <source>See also https://github.com/rust-lang/rust/issues/14587</source>
          <target state="translated">https://github.com/rust-lang/rust/issues/14587 も参照してください。</target>
        </trans-unit>
        <trans-unit id="2e31deb3f0c049ecb5ab021719a2037c51025a75" translate="yes" xml:space="preserve">
          <source>See also the &lt;a href=&quot;../reference/patterns#identifier-patterns&quot;&gt;Reference&lt;/a&gt; for more information.</source>
          <target state="translated">詳細については、&lt;a href=&quot;../reference/patterns#identifier-patterns&quot;&gt;リファレンス&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="d7138b78c6c8108f90e5b4d89b6d8f41411790c0" translate="yes" xml:space="preserve">
          <source>See also the &lt;a href=&quot;https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib&quot;&gt;unstable book&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib&quot;&gt;不安定版&lt;/a&gt;もご覧ください。</target>
        </trans-unit>
        <trans-unit id="469b531cefd41910b714616e2a95d3f5a71440d2" translate="yes" xml:space="preserve">
          <source>See also the &lt;a href=&quot;https://github.com/rust-lang/rfcs/blob/master/text/1445-restrict-constants-in-patterns.md&quot;&gt;structural match RFC&lt;/a&gt;, and &lt;a href=&quot;https://github.com/rust-lang/rust/issues/63438&quot;&gt;issue 63438&lt;/a&gt; which motivated migrating from attribute-based design to this trait.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/rust-lang/rfcs/blob/master/text/1445-restrict-constants-in-patterns.md&quot;&gt;構造一致RFC&lt;/a&gt;、および属性ベースの設計からこの特性への移行を動機付けた&lt;a href=&quot;https://github.com/rust-lang/rust/issues/63438&quot;&gt;問題63438&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="9f215ba916abc6b1359b435f2c9df9a30b6cd333" translate="yes" xml:space="preserve">
          <source>See also the error E0303.</source>
          <target state="translated">エラー E0303 も参照してください。</target>
        </trans-unit>
        <trans-unit id="975331600721122c8b6c490b24b5a3194e20ba87" translate="yes" xml:space="preserve">
          <source>See also the macro &lt;a href=&quot;macro.compile_error&quot;&gt;&lt;code&gt;compile_error!&lt;/code&gt;&lt;/a&gt;, for raising errors during compilation.</source>
          <target state="translated">マクロ&lt;a href=&quot;macro.compile_error&quot;&gt; &lt;code&gt;compile_error!&lt;/code&gt; &lt;/a&gt;も参照してください！、コンパイル中にエラーを発生させるため。</target>
        </trans-unit>
        <trans-unit id="7ae54551235ae26fa48e89aca006b213ae9a1d6b" translate="yes" xml:space="preserve">
          <source>See also, &lt;a href=&quot;keyword.for&quot;&gt;&lt;code&gt;for&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;keyword.loop&quot;&gt;&lt;code&gt;loop&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48a40b49e281d2757e555c68ab81f75dd24fe9de" translate="yes" xml:space="preserve">
          <source>See also, &lt;a href=&quot;keyword.for&quot;&gt;&lt;code&gt;for&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;keyword.while&quot;&gt;&lt;code&gt;while&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ec9f73c6e351ffd6f0303117f6321bcf56a9d37" translate="yes" xml:space="preserve">
          <source>See also, &lt;a href=&quot;keyword.loop&quot;&gt;&lt;code&gt;loop&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;keyword.while&quot;&gt;&lt;code&gt;while&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c38fa3060947548f6786fc74f5ae06ea0102e4b" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;http://www.unicode.org/versions/&quot;&gt;http://www.unicode.org/versions/&lt;/a&gt;</source>
          <target state="translated">参照：&lt;a href=&quot;http://www.unicode.org/versions/&quot;&gt;http&lt;/a&gt; : //www.unicode.org/versions/</target>
        </trans-unit>
        <trans-unit id="7d3586da26e662ce0cee6add8b03cdee21890ba7" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;trait.fromiterator&quot;&gt;&lt;code&gt;FromIterator&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;trait.fromiterator&quot;&gt; &lt;code&gt;FromIterator&lt;/code&gt; &lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="a62291d237eff3d21aea8354620568e8d491d695" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;trait.intoiterator&quot;&gt;&lt;code&gt;IntoIterator&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;trait.intoiterator&quot;&gt; &lt;code&gt;IntoIterator&lt;/code&gt; &lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="e5c735003b4afea93576dfa21fae095c5550e2f8" translate="yes" xml:space="preserve">
          <source>See documentation of &lt;code&gt;&amp;lt;*const T&amp;gt;::guaranteed_eq&lt;/code&gt; for details.</source>
          <target state="translated">詳細については、 &lt;code&gt;&amp;lt;*const T&amp;gt;::guaranteed_eq&lt;/code&gt; のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="bb7d0716f7a647423cf33ba23a913e777d35cbdc" translate="yes" xml:space="preserve">
          <source>See documentation of &lt;code&gt;&amp;lt;*const T&amp;gt;::guaranteed_ne&lt;/code&gt; for details.</source>
          <target state="translated">詳細については、 &lt;code&gt;&amp;lt;*const T&amp;gt;::guaranteed_ne&lt;/code&gt; のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="7050f67d05962668629c2f45e77e4c602adb84b9" translate="yes" xml:space="preserve">
          <source>See documentation of &lt;code&gt;&amp;lt;*const T&amp;gt;::offset_from&lt;/code&gt; for details.</source>
          <target state="translated">詳細については、 &lt;code&gt;&amp;lt;*const T&amp;gt;::offset_from&lt;/code&gt; のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="27904624b02c857ef930c02ca7dd19adc5875459" translate="yes" xml:space="preserve">
          <source>See each trait for usage examples.</source>
          <target state="translated">使用例については、それぞれの特性を参照してください。</target>
        </trans-unit>
        <trans-unit id="8d65150a5b476931ea1fddc837309bb4a8972134" translate="yes" xml:space="preserve">
          <source>See issue #34202 for more details.</source>
          <target state="translated">詳細は#34202号をご覧ください。</target>
        </trans-unit>
        <trans-unit id="50733ac9f0546ca231f65aef305264ab0f8e0aa2" translate="yes" xml:space="preserve">
          <source>See main &lt;code&gt;OsString&lt;/code&gt; documentation information about encoding.</source>
          <target state="translated">エンコーディングに関する &lt;code&gt;OsString&lt;/code&gt; の主要なドキュメント情報を参照してください。</target>
        </trans-unit>
        <trans-unit id="b9a0ec6eef1339731cf9450ebf1dd6a57f4a99a0" translate="yes" xml:space="preserve">
          <source>See more: https://doc.rust-lang.org/reference/attributes.html#conditional-compilation</source>
          <target state="translated">もっと見る:https://doc.rust-lang.org/reference/attributes.html#conditional-compilation</target>
        </trans-unit>
        <trans-unit id="4b9681d4bfaf16cd0e0426811f6e48d3e33f0138" translate="yes" xml:space="preserve">
          <source>See the 'Use Declarations' section of the reference for more information on this topic:</source>
          <target state="translated">このトピックの詳細については、リファレンスの「使用宣言」のセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="48c0f59e4834bc04f6a3d35a7d5545c776d4b7da" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;#method.flowinfo&quot;&gt;&lt;code&gt;flowinfo&lt;/code&gt;&lt;/a&gt; method's documentation for more details.</source>
          <target state="translated">詳細については、&lt;a href=&quot;#method.flowinfo&quot;&gt; &lt;code&gt;flowinfo&lt;/code&gt; &lt;/a&gt;メソッドのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="9516800e65f62b51b6a56f0f866db795a30d8df4" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;#method.scope_id&quot;&gt;&lt;code&gt;scope_id&lt;/code&gt;&lt;/a&gt; method's documentation for more details.</source>
          <target state="translated">詳しくは、&lt;a href=&quot;#method.scope_id&quot;&gt; &lt;code&gt;scope_id&lt;/code&gt; &lt;/a&gt;メソッドのドキュメントをご覧ください。</target>
        </trans-unit>
        <trans-unit id="a428edd5265ba0f8ae9ca0508b6e3d5fd3a0007e" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;../../book/ch13-01-closures&quot;&gt;chapter on closures in &lt;em&gt;The Rust Programming Language&lt;/em&gt;&lt;/a&gt; for some more information on this topic.</source>
          <target state="translated">このトピックの詳細については、&lt;a href=&quot;../../book/ch13-01-closures&quot;&gt;&lt;em&gt;Rustプログラミング言語の&lt;/em&gt;&lt;/a&gt;クロージャーに関する章を&lt;em&gt;&lt;/em&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="4ebee77c95f1b3a0acd252551468cb0fbd79423b" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;../../std/macro.is_x86_feature_detected&quot;&gt;&lt;code&gt;is_x86_feature_detected&lt;/code&gt;&lt;/a&gt; macro in the standard library for runtime feature detection on the x86 platforms.</source>
          <target state="translated">x86プラットフォームでのランタイム機能検出については、標準ライブラリの&lt;a href=&quot;../../std/macro.is_x86_feature_detected&quot;&gt; &lt;code&gt;is_x86_feature_detected&lt;/code&gt; &lt;/a&gt;マクロを参照してください。</target>
        </trans-unit>
        <trans-unit id="9e0260d159aa7cecd714bae0af0cf22f55ca5a37" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;../conditional-compilation#target_feature&quot;&gt;&lt;code&gt;target_feature&lt;/code&gt; conditional compilation option&lt;/a&gt; for selectively enabling or disabling compilation of code based on compile-time settings. Note that this option is not affected by the &lt;code&gt;target_feature&lt;/code&gt; attribute, and is only driven by the features enabled for the entire crate.</source>
          <target state="translated">コンパイル時の設定に基づいてコードのコンパイルを選択的に有効または無効にする&lt;a href=&quot;../conditional-compilation#target_feature&quot;&gt;方法&lt;/a&gt;については、 &lt;code&gt;target_feature&lt;/code&gt; 条件付きコンパイルオプションを参照してください。このオプションは &lt;code&gt;target_feature&lt;/code&gt; 属性の影響を受けず、クレート全体で有効になっている機能によってのみ駆動されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="280b9d7e3c39fd798193927226a61441295094de" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;../index&quot;&gt;module-level documentation&lt;/a&gt; for more.</source>
          <target state="translated">詳細については、&lt;a href=&quot;../index&quot;&gt;モジュールレベルのドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="77819e23e11d803138b5021b64e03c091f7525a1" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;../macro.panic&quot;&gt;&lt;code&gt;panic!&lt;/code&gt;&lt;/a&gt; macro for more information about panicking.</source>
          <target state="translated">&lt;a href=&quot;../macro.panic&quot;&gt; &lt;code&gt;panic!&lt;/code&gt; &lt;/a&gt;見てください！パニックの詳細については、マクロを参照してください。</target>
        </trans-unit>
        <trans-unit id="9b763e7812e448276ee1852643c6a5ff61d991c5" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;../rc/index#examples&quot;&gt;&lt;code&gt;rc&lt;/code&gt; documentation&lt;/a&gt; for more examples of reference counting in general.</source>
          <target state="translated">一般的な参照カウントの例については、&lt;a href=&quot;../rc/index#examples&quot;&gt; &lt;code&gt;rc&lt;/code&gt; のドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="c4b52dc6e2535e5cc3a0f0f307a94d940fd5fe91" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;../reference/items/traits&quot;&gt;Reference&lt;/a&gt; for a lot more information on traits.</source>
          <target state="translated">特性の詳細については、&lt;a href=&quot;../reference/items/traits&quot;&gt;リファレンス&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="4b1b75dc50c9e49c37dd39f6ad7b34e114f3f904" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;../reference/items/unions&quot;&gt;Reference&lt;/a&gt; for more informations on &lt;code&gt;union&lt;/code&gt;s.</source>
          <target state="translated">&lt;code&gt;union&lt;/code&gt; の詳細については、&lt;a href=&quot;../reference/items/unions&quot;&gt;リファレンス&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="3e1e1652e618f9735d83c1a69d91c8ab430c7459" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;../reference/paths#super&quot;&gt;Reference&lt;/a&gt; for more information.</source>
          <target state="translated">詳細については、&lt;a href=&quot;../reference/paths#super&quot;&gt;リファレンス&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="a8ad2e6ac922c8cd4ab5021b357a2ac578edcf3b" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;../struct.hashmap#method.raw_entry&quot;&gt;&lt;code&gt;HashMap::raw_entry&lt;/code&gt;&lt;/a&gt; docs for usage examples.</source>
          <target state="translated">使用例については、&lt;a href=&quot;../struct.hashmap#method.raw_entry&quot;&gt; &lt;code&gt;HashMap::raw_entry&lt;/code&gt; &lt;/a&gt;ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="d1c4dca4a797a11d392e2f32cd11cb7582efe048" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;../struct.hashmap#method.raw_entry_mut&quot;&gt;&lt;code&gt;HashMap::raw_entry_mut&lt;/code&gt;&lt;/a&gt; docs for usage examples.</source>
          <target state="translated">使用例については、&lt;a href=&quot;../struct.hashmap#method.raw_entry_mut&quot;&gt; &lt;code&gt;HashMap::raw_entry_mut&lt;/code&gt; &lt;/a&gt;ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="9e882d9ce880f6d4a62fbf0ebd5db5c16e8211f3" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;attributes/codegen#the-target_feature-attribute&quot;&gt;&lt;code&gt;target_feature&lt;/code&gt; attribute&lt;/a&gt; for more details on the available features. An additional feature of &lt;code&gt;crt-static&lt;/code&gt; is available to the &lt;code&gt;target_feature&lt;/code&gt; option to indicate that a &lt;a href=&quot;linkage#static-and-dynamic-c-runtimes&quot;&gt;static C runtime&lt;/a&gt; is available.</source>
          <target state="translated">使用可能な機能の詳細については、&lt;a href=&quot;attributes/codegen#the-target_feature-attribute&quot;&gt; &lt;code&gt;target_feature&lt;/code&gt; 属性&lt;/a&gt;を参照してください。 &lt;code&gt;target_feature&lt;/code&gt; オプションで &lt;code&gt;crt-static&lt;/code&gt; の追加機能を使用して、&lt;a href=&quot;linkage#static-and-dynamic-c-runtimes&quot;&gt;静的Cランタイム&lt;/a&gt;が使用可能であることを示すことができます。</target>
        </trans-unit>
        <trans-unit id="52a72562ebfc962274868d479722902891602de5" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;book/ch19-01-unsafe-rust&quot;&gt;unsafe section&lt;/a&gt; of the Book for more details.</source>
          <target state="translated">詳細については、本の&lt;a href=&quot;book/ch19-01-unsafe-rust&quot;&gt;安全でないセクション&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="9c007695fde0760a7ebeb4cd2fa6b3747cc0c62f" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;fn.discriminant&quot;&gt;&lt;code&gt;discriminant&lt;/code&gt;&lt;/a&gt; function in this module for more information.</source>
          <target state="translated">詳細については、このモジュールの&lt;a href=&quot;fn.discriminant&quot;&gt; &lt;code&gt;discriminant&lt;/code&gt; &lt;/a&gt;関数を参照してください。</target>
        </trans-unit>
        <trans-unit id="d9d16f809cee6c899e4e1a7481ca3b74db7327fc" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;fn.park&quot;&gt;park documentation&lt;/a&gt; for more detail.</source>
          <target state="translated">詳細については、&lt;a href=&quot;fn.park&quot;&gt;公園のドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="c12c05e5acf344ed5eaf6e4291006a35cd23aed8" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;fn.park&quot;&gt;park documentation&lt;/a&gt; for more details.</source>
          <target state="translated">詳細については、&lt;a href=&quot;fn.park&quot;&gt;公園のドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="197ac0dc19929b8b8c3c7fbc7a7e6bf116ce71c7" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;https://doc.rust-lang.org/nomicon/index.html&quot;&gt;Rustnomicon&lt;/a&gt; and the &lt;a href=&quot;../reference/unsafety&quot;&gt;Reference&lt;/a&gt; for more informations.</source>
          <target state="translated">詳細については、&lt;a href=&quot;https://doc.rust-lang.org/nomicon/index.html&quot;&gt;Rustnomicon&lt;/a&gt;と&lt;a href=&quot;../reference/unsafety&quot;&gt;リファレンス&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="11109860147d417370969ceb98561a0db14c0fff" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;https://github.com/rust-lang/rfcs/blob/master/text/0982-dst-coercion.md&quot;&gt;DST coercion RFC&lt;/a&gt; and &lt;a href=&quot;https://doc.rust-lang.org/nomicon/coercions.html&quot;&gt;the nomicon entry on coercion&lt;/a&gt; for more details.</source>
          <target state="translated">詳細については、&lt;a href=&quot;https://github.com/rust-lang/rfcs/blob/master/text/0982-dst-coercion.md&quot;&gt;DST強制RFC&lt;/a&gt;と&lt;a href=&quot;https://doc.rust-lang.org/nomicon/coercions.html&quot;&gt;強制&lt;/a&gt;に関するノミコンエントリを参照してください。</target>
        </trans-unit>
        <trans-unit id="31bd11ecb52f9fd7f2cc0aa62a69119b33f72284" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;index&quot;&gt;&lt;code&gt;std::result&lt;/code&gt;&lt;/a&gt; module documentation for details.</source>
          <target state="translated">詳細については、&lt;a href=&quot;index&quot;&gt; &lt;code&gt;std::result&lt;/code&gt; &lt;/a&gt;モジュールのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="f7ea19560d84b3ef4ffce35f6eba84e5855458c0" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;index&quot;&gt;module documentation&lt;/a&gt; for details.</source>
          <target state="translated">詳細については、&lt;a href=&quot;index&quot;&gt;モジュールのドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="d2289374edb613ed6991996263eed3764bf58b17" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;index&quot;&gt;module-level documentation&lt;/a&gt; for more details.</source>
          <target state="translated">詳細については、&lt;a href=&quot;index&quot;&gt;モジュールレベルのドキュメント&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="ad5d942f0c74c3b958b3c6c1b82586522996d2cc" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;index&quot;&gt;module-level documentation&lt;/a&gt; for more.</source>
          <target state="translated">詳細については、&lt;a href=&quot;index&quot;&gt;モジュールレベルのドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="ea5ada2477a5b61be620058a92832da074e391de" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;index#conversions&quot;&gt;module's toplevel documentation about conversions&lt;/a&gt; for a discussion on the traits which &lt;code&gt;OsStr&lt;/code&gt; implements for &lt;a href=&quot;index#conversions&quot;&gt;conversions&lt;/a&gt; from/to native representations.</source>
          <target state="translated">ネイティブ表現との間の&lt;a href=&quot;index#conversions&quot;&gt;変換の&lt;/a&gt;ために &lt;code&gt;OsStr&lt;/code&gt; が実装する特性については、&lt;a href=&quot;index#conversions&quot;&gt;変換に関するモジュールの&lt;/a&gt;最上位のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="633ea9d8c810b765d7660d1828dae99092c8a390" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;index#conversions&quot;&gt;module's toplevel documentation about conversions&lt;/a&gt; for a discussion on the traits which &lt;code&gt;OsString&lt;/code&gt; implements for &lt;a href=&quot;index#conversions&quot;&gt;conversions&lt;/a&gt; from/to native representations.</source>
          <target state="translated">ネイティブ表現との間の&lt;a href=&quot;index#conversions&quot;&gt;変換の&lt;/a&gt;ために &lt;code&gt;OsString&lt;/code&gt; が実装する特性については、&lt;a href=&quot;index#conversions&quot;&gt;変換に関するモジュールの&lt;/a&gt;最上位のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="d65bd0a3f006116d0578efbc8912be2a78be3142" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;reference/items/enumerations#custom-discriminant-values-for-field-less-enumerations&quot;&gt;Custom Discriminants&lt;/a&gt; section of the Reference for more information about setting custom integer types on fieldless enums using the &lt;a href=&quot;reference/type-layout#reprc-enums&quot;&gt;&lt;code&gt;repr&lt;/code&gt; attribute&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;reference/type-layout#reprc-enums&quot;&gt; &lt;code&gt;repr&lt;/code&gt; &lt;/a&gt;属性を使用してフィールドレス列挙型にカスタム整数型を設定する方法の詳細については、リファレンスの「&lt;a href=&quot;reference/items/enumerations#custom-discriminant-values-for-field-less-enumerations&quot;&gt;カスタム判別式」&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="93458c809411bab874ed196d2fcc8efa88d1281f" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;reference/items/use-declarations&quot;&gt;Use Declarations&lt;/a&gt; section of the reference for more information on this topic.</source>
          <target state="translated">このトピックの詳細については、リファレンスの&lt;a href=&quot;reference/items/use-declarations&quot;&gt;「宣言&lt;/a&gt;の使用」セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="94406c436f7b99be56720cba09f1dbaa95c2d998" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;reference/statements#declaration-statements&quot;&gt;Declaration Statements&lt;/a&gt; section of the reference for more information about what constitutes an item declaration and what does not.</source>
          <target state="translated">アイテム宣言を構成するものと構成しないものの詳細については、リファレンスの「&lt;a href=&quot;reference/statements#declaration-statements&quot;&gt;宣言ステートメント」&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="2f3b336fe1366fd2448cd1418c2e1b02c0061749" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;struct.hashmap#method.raw_entry&quot;&gt;&lt;code&gt;HashMap::raw_entry&lt;/code&gt;&lt;/a&gt; docs for usage examples.</source>
          <target state="translated">使用例については、&lt;a href=&quot;struct.hashmap#method.raw_entry&quot;&gt; &lt;code&gt;HashMap::raw_entry&lt;/code&gt; &lt;/a&gt;ドキュメントをご覧ください。</target>
        </trans-unit>
        <trans-unit id="0c4b480939fa0c71caf6300474692f45d9200737" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;struct.hashmap#method.raw_entry_mut&quot;&gt;&lt;code&gt;HashMap::raw_entry_mut&lt;/code&gt;&lt;/a&gt; docs for usage examples.</source>
          <target state="translated">使用例については、&lt;a href=&quot;struct.hashmap#method.raw_entry_mut&quot;&gt; &lt;code&gt;HashMap::raw_entry_mut&lt;/code&gt; &lt;/a&gt;ドキュメントをご覧ください。</target>
        </trans-unit>
        <trans-unit id="c3d56a3f633834df5922d7bf3dc22a5c79b32390" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;struct.openoptions#method.new&quot;&gt;&lt;code&gt;OpenOptions::new&lt;/code&gt;&lt;/a&gt; function for more details.</source>
          <target state="translated">詳細については、&lt;a href=&quot;struct.openoptions#method.new&quot;&gt; &lt;code&gt;OpenOptions::new&lt;/code&gt; &lt;/a&gt;関数を参照してください。</target>
        </trans-unit>
        <trans-unit id="34c3c7a1ca1e3b7e67385319fd0c1bdf6f7a99a2" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;struct.openoptions#method.open&quot;&gt;&lt;code&gt;OpenOptions::open&lt;/code&gt;&lt;/a&gt; function for more details.</source>
          <target state="translated">詳細については、&lt;a href=&quot;struct.openoptions#method.open&quot;&gt; &lt;code&gt;OpenOptions::open&lt;/code&gt; &lt;/a&gt;関数を参照してください。</target>
        </trans-unit>
        <trans-unit id="73c34259348cfb6ad56df7138ee496a1e7625262" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;struct.openoptions#method.open&quot;&gt;&lt;code&gt;OpenOptions::open&lt;/code&gt;&lt;/a&gt; method for more details.</source>
          <target state="translated">詳細については、&lt;a href=&quot;struct.openoptions#method.open&quot;&gt; &lt;code&gt;OpenOptions::open&lt;/code&gt; &lt;/a&gt;メソッドを参照してください。</target>
        </trans-unit>
        <trans-unit id="8cda6ebbfff7845946643b600b627a3b6b0d17c2" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;union.maybeuninit&quot;&gt;type-level documentation&lt;/a&gt; for some examples.</source>
          <target state="translated">いくつかの例については、&lt;a href=&quot;union.maybeuninit&quot;&gt;型レベルのドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="69de7fd488c1bed770c455c5d651418fbdd9cd29" translate="yes" xml:space="preserve">
          <source>See the Declaration Statements section of the reference for more information about what constitutes an Item declaration and what does not:</source>
          <target state="translated">アイテム宣言を構成するものとそうでないものの詳細については、リファレンスの宣言文の項を参照してください。</target>
        </trans-unit>
        <trans-unit id="a6d66beca44a312c1d7ad072d4f4f25d4fa81573" translate="yes" xml:space="preserve">
          <source>See the docs for &lt;a href=&quot;struct.fromutf8error&quot;&gt;&lt;code&gt;FromUtf8Error&lt;/code&gt;&lt;/a&gt; for more details on what you can do with this error.</source>
          <target state="translated">このエラーで何ができるかについての詳細は、&lt;a href=&quot;struct.fromutf8error&quot;&gt; &lt;code&gt;FromUtf8Error&lt;/code&gt; &lt;/a&gt;のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="582d71b0a7e1ec7d8d2e366b70d8107c5784ab5a" translate="yes" xml:space="preserve">
          <source>See the docs for &lt;a href=&quot;struct.utf8error&quot;&gt;&lt;code&gt;Utf8Error&lt;/code&gt;&lt;/a&gt; for more details on the kinds of errors that can be returned.</source>
          <target state="translated">返される可能性のあるエラーの種類の詳細については、&lt;a href=&quot;struct.utf8error&quot;&gt; &lt;code&gt;Utf8Error&lt;/code&gt; &lt;/a&gt;のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="c67094618ee76d6286e44725dfedcd9d039a8fcb" translate="yes" xml:space="preserve">
          <source>See the documentation for &lt;a href=&quot;#method.len_utf8&quot;&gt;&lt;code&gt;len_utf8()&lt;/code&gt;&lt;/a&gt; for more explanation of this concept. This function is a mirror, but for UTF-16 instead of UTF-8.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78b065d4cc11abcb243097f0f63add7a8b83feaa" translate="yes" xml:space="preserve">
          <source>See the documentation for &lt;a href=&quot;#method.len_utf8&quot;&gt;&lt;code&gt;len_utf8&lt;/code&gt;&lt;/a&gt; for more explanation of this concept. This function is a mirror, but for UTF-16 instead of UTF-8.</source>
          <target state="translated">この概念の詳細については、&lt;a href=&quot;#method.len_utf8&quot;&gt; &lt;code&gt;len_utf8&lt;/code&gt; &lt;/a&gt;のドキュメントを参照してください。この関数はミラーですが、UTF-8ではなくUTF-16に対応しています。</target>
        </trans-unit>
        <trans-unit id="0a60a3e0a7b14f3e8f9fdc56a48c52cdff845cc9" translate="yes" xml:space="preserve">
          <source>See the documentation for &lt;a href=&quot;keyword.true&quot;&gt;&lt;code&gt;true&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">詳細については、&lt;a href=&quot;keyword.true&quot;&gt; &lt;code&gt;true&lt;/code&gt; &lt;/a&gt;のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="56fbf162180261886cdc02f3ec4ac93ec3f37b1b" translate="yes" xml:space="preserve">
          <source>See the documentation for &lt;a href=&quot;struct.ipv4addr#method.is_documentation&quot;&gt;&lt;code&gt;Ipv4Addr::is_documentation()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;struct.ipv6addr#method.is_documentation&quot;&gt;&lt;code&gt;Ipv6Addr::is_documentation()&lt;/code&gt;&lt;/a&gt; for more details.</source>
          <target state="translated">詳細については、&lt;a href=&quot;struct.ipv4addr#method.is_documentation&quot;&gt; &lt;code&gt;Ipv4Addr::is_documentation()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;struct.ipv6addr#method.is_documentation&quot;&gt; &lt;code&gt;Ipv6Addr::is_documentation()&lt;/code&gt; &lt;/a&gt;のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="5fd25191940193341f958db537c36b0b248a6882" translate="yes" xml:space="preserve">
          <source>See the documentation for &lt;a href=&quot;struct.ipv4addr#method.is_documentation&quot;&gt;&lt;code&gt;Ipv4Addr::is_documentation&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;struct.ipv6addr#method.is_documentation&quot;&gt;&lt;code&gt;Ipv6Addr::is_documentation&lt;/code&gt;&lt;/a&gt; for more details.</source>
          <target state="translated">詳細については、&lt;a href=&quot;struct.ipv4addr#method.is_documentation&quot;&gt; &lt;code&gt;Ipv4Addr::is_documentation&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;struct.ipv6addr#method.is_documentation&quot;&gt; &lt;code&gt;Ipv6Addr::is_documentation&lt;/code&gt; &lt;/a&gt;のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="8b22d592686e223f3559f9bd6d20a9d26a5cd499" translate="yes" xml:space="preserve">
          <source>See the documentation for &lt;a href=&quot;struct.ipv4addr#method.is_global&quot;&gt;&lt;code&gt;Ipv4Addr::is_global()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;struct.ipv6addr#method.is_global&quot;&gt;&lt;code&gt;Ipv6Addr::is_global()&lt;/code&gt;&lt;/a&gt; for more details.</source>
          <target state="translated">詳細については、&lt;a href=&quot;struct.ipv4addr#method.is_global&quot;&gt; &lt;code&gt;Ipv4Addr::is_global()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;struct.ipv6addr#method.is_global&quot;&gt; &lt;code&gt;Ipv6Addr::is_global()&lt;/code&gt; &lt;/a&gt;のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="7ed1f45214f9fb1ab65b3d9c5862ba392c986f08" translate="yes" xml:space="preserve">
          <source>See the documentation for &lt;a href=&quot;struct.ipv4addr#method.is_global&quot;&gt;&lt;code&gt;Ipv4Addr::is_global&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;struct.ipv6addr#method.is_global&quot;&gt;&lt;code&gt;Ipv6Addr::is_global&lt;/code&gt;&lt;/a&gt; for more details.</source>
          <target state="translated">詳細については、&lt;a href=&quot;struct.ipv4addr#method.is_global&quot;&gt; &lt;code&gt;Ipv4Addr::is_global&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;struct.ipv6addr#method.is_global&quot;&gt; &lt;code&gt;Ipv6Addr::is_global&lt;/code&gt; &lt;/a&gt;のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="4abcb8ec4030b866ec2f2e05c89a02e408e40ca6" translate="yes" xml:space="preserve">
          <source>See the documentation for &lt;a href=&quot;struct.ipv4addr#method.is_loopback&quot;&gt;&lt;code&gt;Ipv4Addr::is_loopback()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;struct.ipv6addr#method.is_loopback&quot;&gt;&lt;code&gt;Ipv6Addr::is_loopback()&lt;/code&gt;&lt;/a&gt; for more details.</source>
          <target state="translated">詳細については、&lt;a href=&quot;struct.ipv4addr#method.is_loopback&quot;&gt; &lt;code&gt;Ipv4Addr::is_loopback()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;struct.ipv6addr#method.is_loopback&quot;&gt; &lt;code&gt;Ipv6Addr::is_loopback()&lt;/code&gt; &lt;/a&gt;のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="ae56b84e07d1f99c8baf18c931552fe65fce5926" translate="yes" xml:space="preserve">
          <source>See the documentation for &lt;a href=&quot;struct.ipv4addr#method.is_loopback&quot;&gt;&lt;code&gt;Ipv4Addr::is_loopback&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;struct.ipv6addr#method.is_loopback&quot;&gt;&lt;code&gt;Ipv6Addr::is_loopback&lt;/code&gt;&lt;/a&gt; for more details.</source>
          <target state="translated">詳細については、&lt;a href=&quot;struct.ipv4addr#method.is_loopback&quot;&gt; &lt;code&gt;Ipv4Addr::is_loopback&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;struct.ipv6addr#method.is_loopback&quot;&gt; &lt;code&gt;Ipv6Addr::is_loopback&lt;/code&gt; &lt;/a&gt;のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="a91ec69c264104dc11ec59a2b9754810045ae2a3" translate="yes" xml:space="preserve">
          <source>See the documentation for &lt;a href=&quot;struct.ipv4addr#method.is_multicast&quot;&gt;&lt;code&gt;Ipv4Addr::is_multicast()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;struct.ipv6addr#method.is_multicast&quot;&gt;&lt;code&gt;Ipv6Addr::is_multicast()&lt;/code&gt;&lt;/a&gt; for more details.</source>
          <target state="translated">詳細については、&lt;a href=&quot;struct.ipv4addr#method.is_multicast&quot;&gt; &lt;code&gt;Ipv4Addr::is_multicast()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;struct.ipv6addr#method.is_multicast&quot;&gt; &lt;code&gt;Ipv6Addr::is_multicast()&lt;/code&gt; &lt;/a&gt;のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="3615519e1cfb28c060666f204c8ad03a417dc12c" translate="yes" xml:space="preserve">
          <source>See the documentation for &lt;a href=&quot;struct.ipv4addr#method.is_multicast&quot;&gt;&lt;code&gt;Ipv4Addr::is_multicast&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;struct.ipv6addr#method.is_multicast&quot;&gt;&lt;code&gt;Ipv6Addr::is_multicast&lt;/code&gt;&lt;/a&gt; for more details.</source>
          <target state="translated">詳細については、&lt;a href=&quot;struct.ipv4addr#method.is_multicast&quot;&gt; &lt;code&gt;Ipv4Addr::is_multicast&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;struct.ipv6addr#method.is_multicast&quot;&gt; &lt;code&gt;Ipv6Addr::is_multicast&lt;/code&gt; &lt;/a&gt;のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="95c4155faf59b7a87a6196d78213a5a153edcab9" translate="yes" xml:space="preserve">
          <source>See the documentation for &lt;a href=&quot;struct.ipv4addr#method.is_unspecified&quot;&gt;&lt;code&gt;Ipv4Addr::is_unspecified()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;struct.ipv6addr#method.is_unspecified&quot;&gt;&lt;code&gt;Ipv6Addr::is_unspecified()&lt;/code&gt;&lt;/a&gt; for more details.</source>
          <target state="translated">詳細については、&lt;a href=&quot;struct.ipv4addr#method.is_unspecified&quot;&gt; &lt;code&gt;Ipv4Addr::is_unspecified()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;struct.ipv6addr#method.is_unspecified&quot;&gt; &lt;code&gt;Ipv6Addr::is_unspecified()&lt;/code&gt; &lt;/a&gt;のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="1a7665c66fb62a1dc84142abaebd233d604592f0" translate="yes" xml:space="preserve">
          <source>See the documentation for &lt;a href=&quot;struct.ipv4addr#method.is_unspecified&quot;&gt;&lt;code&gt;Ipv4Addr::is_unspecified&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;struct.ipv6addr#method.is_unspecified&quot;&gt;&lt;code&gt;Ipv6Addr::is_unspecified&lt;/code&gt;&lt;/a&gt; for more details.</source>
          <target state="translated">詳細については、&lt;a href=&quot;struct.ipv4addr#method.is_unspecified&quot;&gt; &lt;code&gt;Ipv4Addr::is_unspecified&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;struct.ipv6addr#method.is_unspecified&quot;&gt; &lt;code&gt;Ipv6Addr::is_unspecified&lt;/code&gt; &lt;/a&gt;のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="59d420255aede65deb10ef2b925ffdbbeb151830" translate="yes" xml:space="preserve">
          <source>See the documentation for each trait for an example implementation.</source>
          <target state="translated">実装例については、各形質のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="74b94fdb468ed97656de488b7ee63d2166bba4d1" translate="yes" xml:space="preserve">
          <source>See the documentation of &lt;a href=&quot;../slice/fn.from_raw_parts&quot;&gt;&lt;code&gt;from_raw_parts&lt;/code&gt;&lt;/a&gt; for more details.</source>
          <target state="translated">詳細については、&lt;a href=&quot;../slice/fn.from_raw_parts&quot;&gt; &lt;code&gt;from_raw_parts&lt;/code&gt; &lt;/a&gt;のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="c143ad09c3e3a3086ceea144028fb830f9f60b4d" translate="yes" xml:space="preserve">
          <source>See the documentation of &lt;a href=&quot;fn.from_raw_parts&quot;&gt;&lt;code&gt;from_raw_parts&lt;/code&gt;&lt;/a&gt; for more details.</source>
          <target state="translated">詳細については、&lt;a href=&quot;fn.from_raw_parts&quot;&gt; &lt;code&gt;from_raw_parts&lt;/code&gt; &lt;/a&gt;のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="d242610d9fffbf91392642c0c4e693e44a999089" translate="yes" xml:space="preserve">
          <source>See the documentation of &lt;a href=&quot;fn.slice_from_raw_parts&quot;&gt;&lt;code&gt;slice_from_raw_parts&lt;/code&gt;&lt;/a&gt; for more details.</source>
          <target state="translated">詳細については、&lt;a href=&quot;fn.slice_from_raw_parts&quot;&gt; &lt;code&gt;slice_from_raw_parts&lt;/code&gt; &lt;/a&gt;のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="8a001e86ce4bda930fd7737216e422bb6c5180d5" translate="yes" xml:space="preserve">
          <source>See the immutable version, &lt;a href=&quot;fn.from_utf8_unchecked&quot;&gt;&lt;code&gt;from_utf8_unchecked()&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">詳細については、不変バージョン&lt;a href=&quot;fn.from_utf8_unchecked&quot;&gt; &lt;code&gt;from_utf8_unchecked()&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="f9630d5c32c08ed5f2adfedea80bdb2f04c78522" translate="yes" xml:space="preserve">
          <source>See the immutable version, &lt;a href=&quot;fn.from_utf8_unchecked&quot;&gt;&lt;code&gt;from_utf8_unchecked()&lt;/code&gt;&lt;/a&gt;, for more information.</source>
          <target state="translated">詳細については、不変バージョン&lt;a href=&quot;fn.from_utf8_unchecked&quot;&gt; &lt;code&gt;from_utf8_unchecked()&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="a684821bc55021a042524a8b4fe83274eada7c49" translate="yes" xml:space="preserve">
          <source>See the module docmentation for an example.</source>
          <target state="translated">例については、モジュールの docmentation を参照してください。</target>
        </trans-unit>
        <trans-unit id="1785fd0d089789d4e6dda7b5b9550a9c2659d685" translate="yes" xml:space="preserve">
          <source>See the module documentation for an example.</source>
          <target state="translated">例については、モジュールのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="66067589fef60b45adfcdd0be56cbd47ceb31861" translate="yes" xml:space="preserve">
          <source>See the safe version, &lt;a href=&quot;fn.from_utf8&quot;&gt;&lt;code&gt;from_utf8&lt;/code&gt;&lt;/a&gt;, for more information.</source>
          <target state="translated">詳細については、安全なバージョン&lt;a href=&quot;fn.from_utf8&quot;&gt; &lt;code&gt;from_utf8&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="02797524d0407212d3c13196d668a1ec0b584c95" translate="yes" xml:space="preserve">
          <source>See the safe version, &lt;a href=&quot;struct.string#method.from_utf8&quot;&gt;&lt;code&gt;from_utf8&lt;/code&gt;&lt;/a&gt;, for more details.</source>
          <target state="translated">詳細については、安全なバージョン&lt;a href=&quot;struct.string#method.from_utf8&quot;&gt; &lt;code&gt;from_utf8&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="5a380b25e8aec1bf4c0bb052091f04bb7475ba5d" translate="yes" xml:space="preserve">
          <source>See: &lt;a href=&quot;https://131002.net/siphash/&quot;&gt;https://131002.net/siphash/&lt;/a&gt;</source>
          <target state="translated">参照：&lt;a href=&quot;https://131002.net/siphash/&quot;&gt;https&lt;/a&gt; : //131002.net/siphash/</target>
        </trans-unit>
        <trans-unit id="1ad08a39c58306085b282bedc81d14f73f8f8804" translate="yes" xml:space="preserve">
          <source>Seek</source>
          <target state="translated">Seek</target>
        </trans-unit>
        <trans-unit id="8cad73bf2364e24f55074dbda1f20524c7aa442a" translate="yes" xml:space="preserve">
          <source>Seek and BufRead</source>
          <target state="translated">シークとバフリード</target>
        </trans-unit>
        <trans-unit id="fe3553957a3c1946b9d7133bb39545773c745764" translate="yes" xml:space="preserve">
          <source>Seek to an offset, in bytes, in a stream.</source>
          <target state="translated">ストリーム内のオフセットをバイト単位で指定します。</target>
        </trans-unit>
        <trans-unit id="924445c1672d1d6775d6c8f71c0bfeb6be4cc6c3" translate="yes" xml:space="preserve">
          <source>Seek to an offset, in bytes, in a stream. &lt;a href=&quot;../io/trait.seek#tymethod.seek&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">ストリーム内のオフセットをバイト単位でシークします。&lt;a href=&quot;../io/trait.seek#tymethod.seek&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1852a8e7cc8adbe4f70045cf88aac4234a34f29c" translate="yes" xml:space="preserve">
          <source>Seek to an offset, in bytes, in a stream. &lt;a href=&quot;io/trait.seek#tymethod.seek&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">ストリーム内のオフセットをバイト単位でシークします。&lt;a href=&quot;io/trait.seek#tymethod.seek&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="78bc551723e7ee57fbfdb669abf732a9f2963f45" translate="yes" xml:space="preserve">
          <source>Seek to an offset, in bytes, in a stream. &lt;a href=&quot;trait.seek#tymethod.seek&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">ストリーム内のオフセットをバイト単位でシークします。&lt;a href=&quot;trait.seek#tymethod.seek&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a3a1aaff6368ce2d4bcde1b13b8d780900df19ec" translate="yes" xml:space="preserve">
          <source>Seek to an offset, in bytes, in the underlying reader.</source>
          <target state="translated">基底にあるリーダーのオフセットをバイト単位で求めます。</target>
        </trans-unit>
        <trans-unit id="782f434ab05191ad8dcf37f6402e80f067899a8f" translate="yes" xml:space="preserve">
          <source>Seek to the offset, in bytes, in the underlying writer.</source>
          <target state="translated">ライタのオフセットをバイト単位で指定します。</target>
        </trans-unit>
        <trans-unit id="ec171d003aaa6719b15e05123a04ab9032c9c7b3" translate="yes" xml:space="preserve">
          <source>Seek::seek</source>
          <target state="translated">Seek::seek</target>
        </trans-unit>
        <trans-unit id="1474abe7d1382971659ad860575c56839881b1fc" translate="yes" xml:space="preserve">
          <source>Seek::stream_len</source>
          <target state="translated">Seek::stream_len</target>
        </trans-unit>
        <trans-unit id="44ac8a5eab63412cc08c36851544baee81d6b123" translate="yes" xml:space="preserve">
          <source>Seek::stream_position</source>
          <target state="translated">Seek::stream_position</target>
        </trans-unit>
        <trans-unit id="fd510396cd5c0eab5e11482493ad588e4024cb70" translate="yes" xml:space="preserve">
          <source>SeekFrom</source>
          <target state="translated">SeekFrom</target>
        </trans-unit>
        <trans-unit id="427eb95bd1cd22558d933079e29c00dd37d72d4a" translate="yes" xml:space="preserve">
          <source>SeekFrom::borrow</source>
          <target state="translated">SeekFrom::borrow</target>
        </trans-unit>
        <trans-unit id="7ad79c009f36c63ae456cd688e9bf99703b65ceb" translate="yes" xml:space="preserve">
          <source>SeekFrom::borrow_mut</source>
          <target state="translated">SeekFrom::borrow_mut</target>
        </trans-unit>
        <trans-unit id="397dd4c0b4ce83e85eb5e83ad6cbd7e1291a52e2" translate="yes" xml:space="preserve">
          <source>SeekFrom::clone</source>
          <target state="translated">SeekFrom::clone</target>
        </trans-unit>
        <trans-unit id="c59e5f54f77f9b2a10aeabaa613f148a9c710494" translate="yes" xml:space="preserve">
          <source>SeekFrom::clone_from</source>
          <target state="translated">SeekFrom::clone_from</target>
        </trans-unit>
        <trans-unit id="37b1fe523d77193ab2ea28520f4816544f0379ec" translate="yes" xml:space="preserve">
          <source>SeekFrom::clone_into</source>
          <target state="translated">SeekFrom::clone_into</target>
        </trans-unit>
        <trans-unit id="75500845d36a29fe6122926b364563db80213be2" translate="yes" xml:space="preserve">
          <source>SeekFrom::eq</source>
          <target state="translated">SeekFrom::eq</target>
        </trans-unit>
        <trans-unit id="872a5d7d22f5f8275059aebcda452b8ca718f73b" translate="yes" xml:space="preserve">
          <source>SeekFrom::fmt</source>
          <target state="translated">SeekFrom::fmt</target>
        </trans-unit>
        <trans-unit id="182e03eead0de8ff70d9ea28f7c3f82a0f61861e" translate="yes" xml:space="preserve">
          <source>SeekFrom::from</source>
          <target state="translated">SeekFrom::from</target>
        </trans-unit>
        <trans-unit id="1f8cf9e3cc706bab03d7a56e94734740e227026d" translate="yes" xml:space="preserve">
          <source>SeekFrom::into</source>
          <target state="translated">SeekFrom::into</target>
        </trans-unit>
        <trans-unit id="8875d1fe13daed6b50b4b4189d74089d5d2f3a11" translate="yes" xml:space="preserve">
          <source>SeekFrom::ne</source>
          <target state="translated">SeekFrom::ne</target>
        </trans-unit>
        <trans-unit id="8ffdcc93187a1610d8bd75f706e4173ad5e1734d" translate="yes" xml:space="preserve">
          <source>SeekFrom::to_owned</source>
          <target state="translated">SeekFrom::to_owned</target>
        </trans-unit>
        <trans-unit id="a73a30ab7b54ddb1c73905159f71899b77c42ac6" translate="yes" xml:space="preserve">
          <source>SeekFrom::try_from</source>
          <target state="translated">SeekFrom::try_from</target>
        </trans-unit>
        <trans-unit id="fb695942bfd603a2603f4be02afdfa21f3f72031" translate="yes" xml:space="preserve">
          <source>SeekFrom::try_into</source>
          <target state="translated">SeekFrom::try_into</target>
        </trans-unit>
        <trans-unit id="d971512c7a548ec6b3ef2e746ac5d96e04b6fbd2" translate="yes" xml:space="preserve">
          <source>SeekFrom::type_id</source>
          <target state="translated">SeekFrom::type_id</target>
        </trans-unit>
        <trans-unit id="e1c0853e796113273bb7f9ad59dda032d01942b5" translate="yes" xml:space="preserve">
          <source>Seeking always discards the internal buffer, even if the seek position would otherwise fall within it. This guarantees that calling &lt;a href=&quot;struct.bufreader#method.into_inner&quot;&gt;&lt;code&gt;BufReader::into_inner()&lt;/code&gt;&lt;/a&gt; immediately after a seek yields the underlying reader at the same position.</source>
          <target state="translated">シーク位置が内部バッファ内にある場合でも、シークは常に内部バッファを破棄します。これにより、シークの直後に&lt;a href=&quot;struct.bufreader#method.into_inner&quot;&gt; &lt;code&gt;BufReader::into_inner()&lt;/code&gt; &lt;/a&gt;を呼び出すと、基になるリーダーが同じ位置に配置されることが保証されます。</target>
        </trans-unit>
        <trans-unit id="e94fa27c4c8f72ef70c9f53dee8d71a248bfe38b" translate="yes" xml:space="preserve">
          <source>Seeking always discards the internal buffer, even if the seek position would otherwise fall within it. This guarantees that calling &lt;code&gt;.into_inner()&lt;/code&gt; immediately after a seek yields the underlying reader at the same position.</source>
          <target state="translated">シーク位置は、シーク位置に収まる場合でも、常に内部バッファーを破棄します。これにより、シークの直後に &lt;code&gt;.into_inner()&lt;/code&gt; を呼び出すと、同じ位置にあるリーダーが生成されることが保証されます。</target>
        </trans-unit>
        <trans-unit id="31109716dc13ddb7d5f6f990170f4796d7e99c79" translate="yes" xml:space="preserve">
          <source>Seeking always writes out the internal buffer before seeking.</source>
          <target state="translated">シークは常にシークの前に内部バッファを書き出します。</target>
        </trans-unit>
        <trans-unit id="924f937be2634763f41633daba31264f87f5680d" translate="yes" xml:space="preserve">
          <source>Seeking to a negative offset is considered an error.</source>
          <target state="translated">負のオフセットを求めるとエラーとなります。</target>
        </trans-unit>
        <trans-unit id="2629798180cc3f6ffd83624c6b2bf1abe5169dc8" translate="yes" xml:space="preserve">
          <source>Seeks relative to the current position. If the new position lies within the buffer, the buffer will not be flushed, allowing for more efficient seeks. This method does not return the location of the underlying reader, so the caller must track this information themselves if it is required.</source>
          <target state="translated">現在の位置からの相対的なシークを行います。新しい位置がバッファ内にある場合、バッファはフラッシュされないので、より効率的なシークが可能になります。このメソッドは基本的にリーダの位置を返しませんので、必要な場合は呼び出し元が自分で追跡しなければなりません。</target>
        </trans-unit>
        <trans-unit id="d94b8b9292d869d5680654530dc8da6a48edacc9" translate="yes" xml:space="preserve">
          <source>Seeks to a given position and reads a number of bytes.</source>
          <target state="translated">指定された位置を探し、バイト数を読み込みます。</target>
        </trans-unit>
        <trans-unit id="7e1ba3cab33940d33de9b4f51e9bd8cb4d9b7632" translate="yes" xml:space="preserve">
          <source>Seeks to a given position and reads a number of bytes. &lt;a href=&quot;../os/windows/fs/trait.fileext#tymethod.seek_read&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">指定された位置にシークし、バイト数を読み取ります。&lt;a href=&quot;../os/windows/fs/trait.fileext#tymethod.seek_read&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4bafebf79da45b92d8f1c9f8c383607f5183cb6d" translate="yes" xml:space="preserve">
          <source>Seeks to a given position and writes a number of bytes.</source>
          <target state="translated">指定された位置を探してバイト数を書き込む。</target>
        </trans-unit>
        <trans-unit id="bd6c2ecd4a4fa9835635d0bd224cad8f4129d5d2" translate="yes" xml:space="preserve">
          <source>Seeks to a given position and writes a number of bytes. &lt;a href=&quot;../os/windows/fs/trait.fileext#tymethod.seek_write&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">指定された位置にシークし、バイト数を書き込みます。&lt;a href=&quot;../os/windows/fs/trait.fileext#tymethod.seek_write&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e102517374a81d4e2f92c28774a0b02079ebacf4" translate="yes" xml:space="preserve">
          <source>Self</source>
          <target state="translated">Self</target>
        </trans-unit>
        <trans-unit id="fe03c3515833357d89e7094df960e757cae3bc1d" translate="yes" xml:space="preserve">
          <source>Semantics</source>
          <target state="translated">Semantics</target>
        </trans-unit>
        <trans-unit id="3210d8feaecd3e3c6262e3c74f346be6eadfe55f" translate="yes" xml:space="preserve">
          <source>Semi</source>
          <target state="translated">Semi</target>
        </trans-unit>
        <trans-unit id="9bc2575c3930437e80555f78757b783c842e8e66" translate="yes" xml:space="preserve">
          <source>Send</source>
          <target state="translated">Send</target>
        </trans-unit>
        <trans-unit id="54779295321c6e0a5194c3ef66c341fba0d404fb" translate="yes" xml:space="preserve">
          <source>SendError</source>
          <target state="translated">SendError</target>
        </trans-unit>
        <trans-unit id="17b874d289117b1353bc5080960074585aed4227" translate="yes" xml:space="preserve">
          <source>Sender</source>
          <target state="translated">Sender</target>
        </trans-unit>
        <trans-unit id="4e0a5e08d9f9bcae02371f3ba106ea3edcb24c9b" translate="yes" xml:space="preserve">
          <source>Sending Multiple Values and Seeing the Receiver Waiting</source>
          <target state="translated">複数の値を送信して、受信者が待っているのを見る</target>
        </trans-unit>
        <trans-unit id="046ad62eccd114c9444fd7a6738d8f920b7d7369" translate="yes" xml:space="preserve">
          <source>Sending Requests to Threads via Channels</source>
          <target state="translated">チャンネルを介したスレッドへのリクエスト送信</target>
        </trans-unit>
        <trans-unit id="86838eeb9351f7893a6219c56be5576aec30fb22" translate="yes" xml:space="preserve">
          <source>Sends a value on this synchronous channel.</source>
          <target state="translated">この同期チャネルに値を送信します。</target>
        </trans-unit>
        <trans-unit id="8c66b4d302db560330d2143b07b64fac35796164" translate="yes" xml:space="preserve">
          <source>Sends data and ancillary data on the socket to the specified address.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4289afd44421b30e76d11716bcd7bb8a75f54e6" translate="yes" xml:space="preserve">
          <source>Sends data and ancillary data on the socket.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="875987b19366de0d72af6e8dc1274dcc3d9ce725" translate="yes" xml:space="preserve">
          <source>Sends data on the socket to the given address. On success, returns the number of bytes written.</source>
          <target state="translated">ソケット上のデータを指定されたアドレスに送信する。成功した場合、書き込まれたバイト数を返す。</target>
        </trans-unit>
        <trans-unit id="30b360cb8d4554ed38340e6613a64788ed8447f1" translate="yes" xml:space="preserve">
          <source>Sends data on the socket to the remote address to which it is connected.</source>
          <target state="translated">ソケットのデータを接続先のリモートアドレスに送信します。</target>
        </trans-unit>
        <trans-unit id="d73fae814c13c0f3a1cfe4339fec819242f46820" translate="yes" xml:space="preserve">
          <source>Sends data on the socket to the socket's peer.</source>
          <target state="translated">ソケットのデータをソケットのピアに送信します。</target>
        </trans-unit>
        <trans-unit id="f7ace41157173d82b5b14c021d27f646fa80ec18" translate="yes" xml:space="preserve">
          <source>Sends data on the socket to the specified address.</source>
          <target state="translated">ソケット上のデータを指定したアドレスに送信します。</target>
        </trans-unit>
        <trans-unit id="bb2ebdecf0afbd58ee653fe08097784770f3ad88" translate="yes" xml:space="preserve">
          <source>Separating Modules into Different Files</source>
          <target state="translated">モジュールを別のファイルに分ける</target>
        </trans-unit>
        <trans-unit id="eb68bb453a78e471b661f27a57ad46a70b7a8f79" translate="yes" xml:space="preserve">
          <source>Separation of Concerns for Binary Projects</source>
          <target state="translated">バイナリプロジェクトの懸念の分離</target>
        </trans-unit>
        <trans-unit id="0333ded9cb11951aa9ed251144f6cd1c67d32585" translate="yes" xml:space="preserve">
          <source>Separators at the start or end of a string are neighbored by empty strings.</source>
          <target state="translated">文字列の先頭または末尾のセパレータは、空の文字列に隣接しています。</target>
        </trans-unit>
        <trans-unit id="67e6dd2e124a32bb730c652318ffbfcf67b70265" translate="yes" xml:space="preserve">
          <source>SeqCst</source>
          <target state="translated">SeqCst</target>
        </trans-unit>
        <trans-unit id="74f3eda32fc0025d1630d3e705ef4629c5affc16" translate="yes" xml:space="preserve">
          <source>Sequence types (&lt;a href=&quot;types/tuple&quot;&gt;tuple&lt;/a&gt;, &lt;a href=&quot;types/array&quot;&gt;array&lt;/a&gt;, &lt;a href=&quot;types/slice&quot;&gt;slice&lt;/a&gt;).</source>
          <target state="translated">シーケンス型（&lt;a href=&quot;types/tuple&quot;&gt;タプル&lt;/a&gt;、&lt;a href=&quot;types/array&quot;&gt;配列&lt;/a&gt;、&lt;a href=&quot;types/slice&quot;&gt;スライス&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="9a20643d87a8a338495f31251b121b1741b7ff7c" translate="yes" xml:space="preserve">
          <source>Sequence types:</source>
          <target state="translated">シーケンスの種類。</target>
        </trans-unit>
        <trans-unit id="b5fb636023abb67d347041d398442118f79ea091" translate="yes" xml:space="preserve">
          <source>Sequences</source>
          <target state="translated">Sequences</target>
        </trans-unit>
        <trans-unit id="5b018ff2e321cba1df1dcab575212a7a3b8da5b5" translate="yes" xml:space="preserve">
          <source>Sequences: &lt;a href=&quot;../vec/struct.vec&quot;&gt;&lt;code&gt;Vec&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;struct.vecdeque&quot;&gt;&lt;code&gt;VecDeque&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;struct.linkedlist&quot;&gt;&lt;code&gt;LinkedList&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">シーケンス：&lt;a href=&quot;../vec/struct.vec&quot;&gt; &lt;code&gt;Vec&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;struct.vecdeque&quot;&gt; &lt;code&gt;VecDeque&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;struct.linkedlist&quot;&gt; &lt;code&gt;LinkedList&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="832d2c638f42cd0e241118f709349a347318c42f" translate="yes" xml:space="preserve">
          <source>Sequentially consistent - sequentially consistent operations are guaranteed to happen in order. This is the standard mode for working with atomic types and is equivalent to Java's &lt;code&gt;volatile&lt;/code&gt;.</source>
          <target state="translated">順次一貫性-順次一貫性のある操作が順番に発生することが保証されています。これは、アトミック型を操作するための標準モードであり、Javaの &lt;code&gt;volatile&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="08daf45ab10abcae6be0fff2b6976fdc73bb76f9" translate="yes" xml:space="preserve">
          <source>Set Configuration Options</source>
          <target state="translated">設定オプションの設定</target>
        </trans-unit>
        <trans-unit id="a8a82e1c25a61b0b0fbad9a354be0abbfc1d27e6" translate="yes" xml:space="preserve">
          <source>Set executable argument</source>
          <target state="translated">実行可能な引数を設定します。</target>
        </trans-unit>
        <trans-unit id="fbc5cb6c706f4bd3a32f834ada1c49f669aabdb3" translate="yes" xml:space="preserve">
          <source>Set executable argument &lt;a href=&quot;../os/unix/process/trait.commandext#tymethod.arg0&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">実行可能引数&lt;a href=&quot;../os/unix/process/trait.commandext#tymethod.arg0&quot;&gt;を&lt;/a&gt;設定する続きを読む</target>
        </trans-unit>
        <trans-unit id="dae96399e29b7b956dede96d462f45495b13a4b7" translate="yes" xml:space="preserve">
          <source>Set the &lt;code&gt;RUST_MIN_STACK&lt;/code&gt; environment variable to an integer representing the desired stack size (in bytes). Note that setting &lt;a href=&quot;struct.builder#method.stack_size&quot;&gt;&lt;code&gt;Builder::stack_size&lt;/code&gt;&lt;/a&gt; will override this.</source>
          <target state="translated">&lt;code&gt;RUST_MIN_STACK&lt;/code&gt; 環境変数を、目的のスタックサイズ（バイト単位）を表す整数に設定します。&lt;a href=&quot;struct.builder#method.stack_size&quot;&gt; &lt;code&gt;Builder::stack_size&lt;/code&gt; &lt;/a&gt;を設定すると、これが上書きされることに注意してください。</target>
        </trans-unit>
        <trans-unit id="ab9e89a5f719571ed675523404b9e0996f208b98" translate="yes" xml:space="preserve">
          <source>Set the GID.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f05c286fc384e14cd64c51d22a1bc07adbc506b" translate="yes" xml:space="preserve">
          <source>Set the PID.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="248ff1caa176ea475cf1deb589a381140db87124" translate="yes" xml:space="preserve">
          <source>Set the UID.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51dd44e4b93ed157267953067415bbd676cce642" translate="yes" xml:space="preserve">
          <source>Set the field public:</source>
          <target state="translated">フィールドの公開を設定します。</target>
        </trans-unit>
        <trans-unit id="0cae9f2a068b65d784d7ebde6b0fe925aa8902e7" translate="yes" xml:space="preserve">
          <source>Set the first process argument, &lt;code&gt;argv[0]&lt;/code&gt;, to something other than the default executable path.</source>
          <target state="translated">最初のプロセス引数 &lt;code&gt;argv[0]&lt;/code&gt; デフォルトの実行可能パス以外に設定します。</target>
        </trans-unit>
        <trans-unit id="fe1c9af0bd5442af35df8f715205ee502e1ac9f6" translate="yes" xml:space="preserve">
          <source>Set the socket option &lt;code&gt;SO_PASSCRED&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="404b96569bfb0a8f7adb51901316c79fcc86c80c" translate="yes" xml:space="preserve">
          <source>Set up any needed data or state.</source>
          <target state="translated">必要なデータや状態を設定します。</target>
        </trans-unit>
        <trans-unit id="22d71ea734ba02339845986ef6707923d879c259" translate="yes" xml:space="preserve">
          <source>Set when the crate being compiled is being compiled with the &lt;code&gt;proc_macro&lt;/code&gt;&lt;a href=&quot;linkage&quot;&gt;crate type&lt;/a&gt;.</source>
          <target state="translated">コンパイルされるクレートが &lt;code&gt;proc_macro&lt;/code&gt; &lt;a href=&quot;linkage&quot;&gt;クレートタイプ&lt;/a&gt;でコンパイルされるときに設定されます。</target>
        </trans-unit>
        <trans-unit id="056ba70bd63e725f8843ebaf5c09105c3eab8106" translate="yes" xml:space="preserve">
          <source>Sets &lt;code&gt;count * size_of::&amp;lt;T&amp;gt;()&lt;/code&gt; bytes of memory starting at &lt;code&gt;dst&lt;/code&gt; to &lt;code&gt;val&lt;/code&gt;.</source>
          <target state="translated">セットは &lt;code&gt;count * size_of::&amp;lt;T&amp;gt;()&lt;/code&gt; から始まるバイトのメモリ &lt;code&gt;dst&lt;/code&gt; へ &lt;code&gt;val&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="13cae555ad6ad3784458f93754f637cd378f2ac3" translate="yes" xml:space="preserve">
          <source>Sets extra flags for the &lt;code&gt;dwFileFlags&lt;/code&gt; argument to the call to &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-createfile2&quot;&gt;&lt;code&gt;CreateFile2&lt;/code&gt;&lt;/a&gt; to the specified value (or combines it with &lt;code&gt;attributes&lt;/code&gt; and &lt;code&gt;security_qos_flags&lt;/code&gt; to set the &lt;code&gt;dwFlagsAndAttributes&lt;/code&gt; for &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-createfilea&quot;&gt;&lt;code&gt;CreateFile&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-createfile2&quot;&gt; &lt;code&gt;CreateFile2&lt;/code&gt; &lt;/a&gt;の呼び出しに対する &lt;code&gt;dwFileFlags&lt;/code&gt; 引数の追加のフラグを指定された値に設定し &lt;code&gt;attributes&lt;/code&gt; （または、それを属性および &lt;code&gt;security_qos_flags&lt;/code&gt; と組み合わせて、&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-createfilea&quot;&gt; &lt;code&gt;CreateFile&lt;/code&gt; &lt;/a&gt;の &lt;code&gt;dwFlagsAndAttributes&lt;/code&gt; を設定します）。</target>
        </trans-unit>
        <trans-unit id="66e71d66985a89fcf72da574a7b8a270b0f10eba" translate="yes" xml:space="preserve">
          <source>Sets extra flags for the &lt;code&gt;dwFileFlags&lt;/code&gt; argument to the call to &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-createfile2&quot;&gt;&lt;code&gt;CreateFile2&lt;/code&gt;&lt;/a&gt; to the specified value (or combines it with &lt;code&gt;attributes&lt;/code&gt; and &lt;code&gt;security_qos_flags&lt;/code&gt; to set the &lt;code&gt;dwFlagsAndAttributes&lt;/code&gt; for &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-createfilea&quot;&gt;&lt;code&gt;CreateFile&lt;/code&gt;&lt;/a&gt;). &lt;a href=&quot;../os/windows/fs/trait.openoptionsext#tymethod.custom_flags&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-createfile2&quot;&gt; &lt;code&gt;CreateFile2&lt;/code&gt; &lt;/a&gt;の呼び出しに対する &lt;code&gt;dwFileFlags&lt;/code&gt; 引数の追加のフラグを指定された値に設定し &lt;code&gt;attributes&lt;/code&gt; （または、それを属性および &lt;code&gt;security_qos_flags&lt;/code&gt; と組み合わせて、&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-createfilea&quot;&gt; &lt;code&gt;CreateFile&lt;/code&gt; &lt;/a&gt;の &lt;code&gt;dwFlagsAndAttributes&lt;/code&gt; を設定します）。&lt;a href=&quot;../os/windows/fs/trait.openoptionsext#tymethod.custom_flags&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c1997c6c112c8704556cc0c7cef7f08de7459cd3" translate="yes" xml:space="preserve">
          <source>Sets extra flags for the &lt;code&gt;dwFileFlags&lt;/code&gt; argument to the call to &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/hh449422.aspx&quot;&gt;&lt;code&gt;CreateFile2&lt;/code&gt;&lt;/a&gt; to the specified value (or combines it with &lt;code&gt;attributes&lt;/code&gt; and &lt;code&gt;security_qos_flags&lt;/code&gt; to set the &lt;code&gt;dwFlagsAndAttributes&lt;/code&gt; for &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/aa363858.aspx&quot;&gt;&lt;code&gt;CreateFile&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/hh449422.aspx&quot;&gt; &lt;code&gt;CreateFile2&lt;/code&gt; &lt;/a&gt;の呼び出しに対する &lt;code&gt;dwFileFlags&lt;/code&gt; 引数の追加のフラグを指定された値に設定し &lt;code&gt;attributes&lt;/code&gt; （または、属性と &lt;code&gt;security_qos_flags&lt;/code&gt; と組み合わせて、&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/aa363858.aspx&quot;&gt; &lt;code&gt;CreateFile&lt;/code&gt; &lt;/a&gt;の &lt;code&gt;dwFlagsAndAttributes&lt;/code&gt; を設定します）。</target>
        </trans-unit>
        <trans-unit id="b2b2a84c201b69ee93f1779805a7ef6d5dba2dc7" translate="yes" xml:space="preserve">
          <source>Sets extra flags for the &lt;code&gt;dwFileFlags&lt;/code&gt; argument to the call to [&lt;code&gt;CreateFile2&lt;/code&gt;] to the specified value (or combines it with &lt;code&gt;attributes&lt;/code&gt; and &lt;code&gt;security_qos_flags&lt;/code&gt; to set the &lt;code&gt;dwFlagsAndAttributes&lt;/code&gt; for [&lt;code&gt;CreateFile&lt;/code&gt;]). &lt;a href=&quot;../os/windows/fs/trait.openoptionsext#tymethod.custom_flags&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">[ &lt;code&gt;CreateFile2&lt;/code&gt; ]の呼び出しに対する &lt;code&gt;dwFileFlags&lt;/code&gt; 引数の追加のフラグを指定された値に設定し &lt;code&gt;attributes&lt;/code&gt; （またはそれを属性および &lt;code&gt;security_qos_flags&lt;/code&gt; と組み合わせて[ &lt;code&gt;CreateFile&lt;/code&gt; ]の &lt;code&gt;dwFlagsAndAttributes&lt;/code&gt; を設定します）。&lt;a href=&quot;../os/windows/fs/trait.openoptionsext#tymethod.custom_flags&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="0fba0b201372a856839f3a1d9d47e00f2558c4f0" translate="yes" xml:space="preserve">
          <source>Sets the &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/procthread/process-creation-flags&quot;&gt;process creation flags&lt;/a&gt; to be passed to &lt;code&gt;CreateProcess&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;CreateProcess&lt;/code&gt; に渡される&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/procthread/process-creation-flags&quot;&gt;プロセス作成フラグ&lt;/a&gt;を設定します。</target>
        </trans-unit>
        <trans-unit id="8e7f860912f8484c14180dca285731a3758816f4" translate="yes" xml:space="preserve">
          <source>Sets the &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/procthread/process-creation-flags&quot;&gt;process creation flags&lt;/a&gt; to be passed to &lt;code&gt;CreateProcess&lt;/code&gt;. &lt;a href=&quot;../os/windows/process/trait.commandext#tymethod.creation_flags&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;CreateProcess&lt;/code&gt; に渡される&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/procthread/process-creation-flags&quot;&gt;プロセス作成フラグ&lt;/a&gt;を設定します。&lt;a href=&quot;../os/windows/process/trait.commandext#tymethod.creation_flags&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7f8f12c8cb7cc24b4a8a0f0db06296cfa587f636" translate="yes" xml:space="preserve">
          <source>Sets the &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/ms684863(v=vs.85).aspx&quot;&gt;process creation flags&lt;/a&gt; to be passed to &lt;code&gt;CreateProcess&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;CreateProcess&lt;/code&gt; に渡される&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/ms684863(v=vs.85).aspx&quot;&gt;プロセス作成フラグ&lt;/a&gt;を設定します。</target>
        </trans-unit>
        <trans-unit id="a59f5e51c3b439ae27c5cdcfc80e3aafb158cade" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;dwFileAttributes&lt;/code&gt; argument to the call to &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-createfile2&quot;&gt;&lt;code&gt;CreateFile2&lt;/code&gt;&lt;/a&gt; to the specified value (or combines it with &lt;code&gt;custom_flags&lt;/code&gt; and &lt;code&gt;security_qos_flags&lt;/code&gt; to set the &lt;code&gt;dwFlagsAndAttributes&lt;/code&gt; for &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-createfilea&quot;&gt;&lt;code&gt;CreateFile&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">設定 &lt;code&gt;dwFileAttributes&lt;/code&gt; のへの呼び出しの引数&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-createfile2&quot;&gt; &lt;code&gt;CreateFile2&lt;/code&gt; &lt;/a&gt;指定した値（またはと結合し、それを &lt;code&gt;custom_flags&lt;/code&gt; と &lt;code&gt;security_qos_flags&lt;/code&gt; 設定する &lt;code&gt;dwFlagsAndAttributes&lt;/code&gt; のため&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-createfilea&quot;&gt; &lt;code&gt;CreateFile&lt;/code&gt; &lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="a4f79c0b88c0b04acbdb2749429a0a095268264a" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;dwFileAttributes&lt;/code&gt; argument to the call to &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-createfile2&quot;&gt;&lt;code&gt;CreateFile2&lt;/code&gt;&lt;/a&gt; to the specified value (or combines it with &lt;code&gt;custom_flags&lt;/code&gt; and &lt;code&gt;security_qos_flags&lt;/code&gt; to set the &lt;code&gt;dwFlagsAndAttributes&lt;/code&gt; for &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-createfilea&quot;&gt;&lt;code&gt;CreateFile&lt;/code&gt;&lt;/a&gt;). &lt;a href=&quot;../os/windows/fs/trait.openoptionsext#tymethod.attributes&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">設定 &lt;code&gt;dwFileAttributes&lt;/code&gt; のへの呼び出しの引数&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-createfile2&quot;&gt; &lt;code&gt;CreateFile2&lt;/code&gt; &lt;/a&gt;指定した値（またはと結合し、それを &lt;code&gt;custom_flags&lt;/code&gt; と &lt;code&gt;security_qos_flags&lt;/code&gt; 設定する &lt;code&gt;dwFlagsAndAttributes&lt;/code&gt; のため&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-createfilea&quot;&gt; &lt;code&gt;CreateFile&lt;/code&gt; &lt;/a&gt;）。&lt;a href=&quot;../os/windows/fs/trait.openoptionsext#tymethod.attributes&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7049d876eb8c7c61c52d531c4b19a0066ccd493e" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;dwFileAttributes&lt;/code&gt; argument to the call to &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/hh449422.aspx&quot;&gt;&lt;code&gt;CreateFile2&lt;/code&gt;&lt;/a&gt; to the specified value (or combines it with &lt;code&gt;custom_flags&lt;/code&gt; and &lt;code&gt;security_qos_flags&lt;/code&gt; to set the &lt;code&gt;dwFlagsAndAttributes&lt;/code&gt; for &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/aa363858.aspx&quot;&gt;&lt;code&gt;CreateFile&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">設定 &lt;code&gt;dwFileAttributes&lt;/code&gt; のへの呼び出しの引数&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/hh449422.aspx&quot;&gt; &lt;code&gt;CreateFile2&lt;/code&gt; &lt;/a&gt;指定した値（またはと結合し、それを &lt;code&gt;custom_flags&lt;/code&gt; と &lt;code&gt;security_qos_flags&lt;/code&gt; 設定する &lt;code&gt;dwFlagsAndAttributes&lt;/code&gt; のため&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/aa363858.aspx&quot;&gt; &lt;code&gt;CreateFile&lt;/code&gt; &lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="fbfe58dd4d4871e3f5efaa00ce9114bb2a23276c" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;dwFileAttributes&lt;/code&gt; argument to the call to [&lt;code&gt;CreateFile2&lt;/code&gt;] to the specified value (or combines it with &lt;code&gt;custom_flags&lt;/code&gt; and &lt;code&gt;security_qos_flags&lt;/code&gt; to set the &lt;code&gt;dwFlagsAndAttributes&lt;/code&gt; for [&lt;code&gt;CreateFile&lt;/code&gt;]). &lt;a href=&quot;../os/windows/fs/trait.openoptionsext#tymethod.attributes&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">セット &lt;code&gt;dwFileAttributes&lt;/code&gt; のにコールの引数[ &lt;code&gt;CreateFile2&lt;/code&gt; ]指定された値に（又はそれと結合し &lt;code&gt;custom_flags&lt;/code&gt; と &lt;code&gt;security_qos_flags&lt;/code&gt; 設定する &lt;code&gt;dwFlagsAndAttributes&lt;/code&gt; ために【 &lt;code&gt;CreateFile&lt;/code&gt; ]）。&lt;a href=&quot;../os/windows/fs/trait.openoptionsext#tymethod.attributes&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="cb7995adce7a4e3564d7673e1b427792280a06bb" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;dwSecurityQosFlags&lt;/code&gt; argument to the call to &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-createfile2&quot;&gt;&lt;code&gt;CreateFile2&lt;/code&gt;&lt;/a&gt; to the specified value (or combines it with &lt;code&gt;custom_flags&lt;/code&gt; and &lt;code&gt;attributes&lt;/code&gt; to set the &lt;code&gt;dwFlagsAndAttributes&lt;/code&gt; for &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-createfilea&quot;&gt;&lt;code&gt;CreateFile&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">設定し &lt;code&gt;dwSecurityQosFlags&lt;/code&gt; のへの呼び出しの引数&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-createfile2&quot;&gt; &lt;code&gt;CreateFile2&lt;/code&gt; &lt;/a&gt;指定された値（またはと結合し、それをする &lt;code&gt;custom_flags&lt;/code&gt; し、 &lt;code&gt;attributes&lt;/code&gt; を設定するに &lt;code&gt;dwFlagsAndAttributes&lt;/code&gt; のため&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-createfilea&quot;&gt; &lt;code&gt;CreateFile&lt;/code&gt; &lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="5c912d8f1d0154efe621164bbed181f4fa4f8b1c" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;dwSecurityQosFlags&lt;/code&gt; argument to the call to &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-createfile2&quot;&gt;&lt;code&gt;CreateFile2&lt;/code&gt;&lt;/a&gt; to the specified value (or combines it with &lt;code&gt;custom_flags&lt;/code&gt; and &lt;code&gt;attributes&lt;/code&gt; to set the &lt;code&gt;dwFlagsAndAttributes&lt;/code&gt; for &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-createfilea&quot;&gt;&lt;code&gt;CreateFile&lt;/code&gt;&lt;/a&gt;). &lt;a href=&quot;../os/windows/fs/trait.openoptionsext#tymethod.security_qos_flags&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">設定し &lt;code&gt;dwSecurityQosFlags&lt;/code&gt; のへの呼び出しの引数&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-createfile2&quot;&gt; &lt;code&gt;CreateFile2&lt;/code&gt; &lt;/a&gt;指定された値（またはと結合し、それをする &lt;code&gt;custom_flags&lt;/code&gt; し、 &lt;code&gt;attributes&lt;/code&gt; を設定するに &lt;code&gt;dwFlagsAndAttributes&lt;/code&gt; のため&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-createfilea&quot;&gt; &lt;code&gt;CreateFile&lt;/code&gt; &lt;/a&gt;）。&lt;a href=&quot;../os/windows/fs/trait.openoptionsext#tymethod.security_qos_flags&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="14c359e1959e15fb05ad53df0726c01f8bd34c1f" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;dwSecurityQosFlags&lt;/code&gt; argument to the call to &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/hh449422.aspx&quot;&gt;&lt;code&gt;CreateFile2&lt;/code&gt;&lt;/a&gt; to the specified value (or combines it with &lt;code&gt;custom_flags&lt;/code&gt; and &lt;code&gt;attributes&lt;/code&gt; to set the &lt;code&gt;dwFlagsAndAttributes&lt;/code&gt; for &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/aa363858.aspx&quot;&gt;&lt;code&gt;CreateFile&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">設定し &lt;code&gt;dwSecurityQosFlags&lt;/code&gt; のへの呼び出しの引数&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/hh449422.aspx&quot;&gt; &lt;code&gt;CreateFile2&lt;/code&gt; &lt;/a&gt;指定された値（またはと結合し、それをする &lt;code&gt;custom_flags&lt;/code&gt; し、 &lt;code&gt;attributes&lt;/code&gt; を設定するに &lt;code&gt;dwFlagsAndAttributes&lt;/code&gt; のため&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/aa363858.aspx&quot;&gt; &lt;code&gt;CreateFile&lt;/code&gt; &lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="c9c08d809d7457fa9085725f05f2e7a3c7b3d518" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;dwSecurityQosFlags&lt;/code&gt; argument to the call to [&lt;code&gt;CreateFile2&lt;/code&gt;] to the specified value (or combines it with &lt;code&gt;custom_flags&lt;/code&gt; and &lt;code&gt;attributes&lt;/code&gt; to set the &lt;code&gt;dwFlagsAndAttributes&lt;/code&gt; for [&lt;code&gt;CreateFile&lt;/code&gt;]). &lt;a href=&quot;../os/windows/fs/trait.openoptionsext#tymethod.security_qos_flags&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">セット &lt;code&gt;dwSecurityQosFlags&lt;/code&gt; のにコールの引数[ &lt;code&gt;CreateFile2&lt;/code&gt; ]指定された値に（又はそれと結合し &lt;code&gt;custom_flags&lt;/code&gt; と &lt;code&gt;attributes&lt;/code&gt; 設定すること &lt;code&gt;dwFlagsAndAttributes&lt;/code&gt; ために【 &lt;code&gt;CreateFile&lt;/code&gt; ]）。&lt;a href=&quot;../os/windows/fs/trait.openoptionsext#tymethod.security_qos_flags&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2661cce730a72f4d98c68c762bfe1b056ab79aca" translate="yes" xml:space="preserve">
          <source>Sets the [process creation flags][1] to be passed to &lt;code&gt;CreateProcess&lt;/code&gt;. &lt;a href=&quot;../os/windows/process/trait.commandext#tymethod.creation_flags&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;CreateProcess&lt;/code&gt; に渡される[プロセス作成フラグ] [1]を設定します。&lt;a href=&quot;../os/windows/process/trait.commandext#tymethod.creation_flags&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ce814bac4a4ff2457a43a54737b048c532a0aa20" translate="yes" xml:space="preserve">
          <source>Sets the child process's user ID. This translates to a &lt;code&gt;setuid&lt;/code&gt; call in the child process. Failure in the &lt;code&gt;setuid&lt;/code&gt; call will cause the spawn to fail.</source>
          <target state="translated">子プロセスのユーザーIDを設定します。これは、子プロセスの &lt;code&gt;setuid&lt;/code&gt; 呼び出しに変換されます。障害 &lt;code&gt;setuid&lt;/code&gt; 呼び出しが産卵が失敗します。</target>
        </trans-unit>
        <trans-unit id="92c9734578513f6eb162eafc8f52f7e5c45af308" translate="yes" xml:space="preserve">
          <source>Sets the child process's user ID. This translates to a &lt;code&gt;setuid&lt;/code&gt; call in the child process. Failure in the &lt;code&gt;setuid&lt;/code&gt; call will cause the spawn to fail. &lt;a href=&quot;../os/unix/process/trait.commandext#tymethod.uid&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">子プロセスのユーザーIDを設定します。これは、子プロセスの &lt;code&gt;setuid&lt;/code&gt; 呼び出しに変換されます。障害 &lt;code&gt;setuid&lt;/code&gt; 呼び出しが産卵が失敗します。&lt;a href=&quot;../os/unix/process/trait.commandext#tymethod.uid&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="be925dac0770ceeb65dc7dab3c58942103c0193b" translate="yes" xml:space="preserve">
          <source>Sets the contained value.</source>
          <target state="translated">含まれる値を設定します。</target>
        </trans-unit>
        <trans-unit id="bc3324d6caa3ad2e5f5690cf2637813883efdf23" translate="yes" xml:space="preserve">
          <source>Sets the contents of the cell to &lt;code&gt;value&lt;/code&gt;.</source>
          <target state="translated">セルの内容を &lt;code&gt;value&lt;/code&gt; 設定します。</target>
        </trans-unit>
        <trans-unit id="0d422096139c1e9c772fb437582bdc8b93518038" translate="yes" xml:space="preserve">
          <source>Sets the contents of this cell to &lt;code&gt;value&lt;/code&gt;.</source>
          <target state="translated">このセルの内容を &lt;code&gt;value&lt;/code&gt; 設定します。</target>
        </trans-unit>
        <trans-unit id="84421e00729f731b6dc5d7abdf2db4ceb9ad632e" translate="yes" xml:space="preserve">
          <source>Sets the environment variable &lt;code&gt;k&lt;/code&gt; to the value &lt;code&gt;v&lt;/code&gt; for the currently running process.</source>
          <target state="translated">現在実行中のプロセスの環境変数 &lt;code&gt;k&lt;/code&gt; を値 &lt;code&gt;v&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="a4812769d4da90fe71d6f09aebd56ba76ad7c55c" translate="yes" xml:space="preserve">
          <source>Sets the mode bits that a new file will be created with.</source>
          <target state="translated">新しいファイルが作成されるモードビットを設定します。</target>
        </trans-unit>
        <trans-unit id="955aa039d64d79d9dad058215e85b20785d0e35e" translate="yes" xml:space="preserve">
          <source>Sets the mode bits that a new file will be created with. &lt;a href=&quot;../os/unix/fs/trait.openoptionsext#tymethod.mode&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">新しいファイルの作成に使用するモードビットを設定します。&lt;a href=&quot;../os/unix/fs/trait.openoptionsext#tymethod.mode&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e0cbebddda1d8a36d60c3bfc4c2f172a5dfd1cf1" translate="yes" xml:space="preserve">
          <source>Sets the mode to create new directories with. This option defaults to 0o777.</source>
          <target state="translated">新しいディレクトリを作成するモードを設定します。このオプションのデフォルトは 0o777 です。</target>
        </trans-unit>
        <trans-unit id="160dff498214cf800fe8e6ed575a29543e73aa1e" translate="yes" xml:space="preserve">
          <source>Sets the mode to create new directories with. This option defaults to 0o777. &lt;a href=&quot;../os/unix/fs/trait.dirbuilderext#tymethod.mode&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">新しいディレクトリを作成するためのモードを設定します。このオプションのデフォルトは0o777です。&lt;a href=&quot;../os/unix/fs/trait.dirbuilderext#tymethod.mode&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e87b20d19230f415e2da9ee8d384e2e7f53a1338" translate="yes" xml:space="preserve">
          <source>Sets the number of bytes that can be read before this instance will return EOF. This is the same as constructing a new &lt;code&gt;Take&lt;/code&gt; instance, so the amount of bytes read and the previous limit value don't matter when calling this method.</source>
          <target state="translated">このインスタンスがEOFを返す前に読み取ることができるバイト数を設定します。これは、新しい &lt;code&gt;Take&lt;/code&gt; インスタンスを作成するのと同じなので、このメソッドを呼び出すときに、読み取られるバイト数と以前の制限値は関係ありません。</target>
        </trans-unit>
        <trans-unit id="24067d9725617c3bf841afad38e871ecdb2b8b7c" translate="yes" xml:space="preserve">
          <source>Sets the offset to the current position plus the specified number of bytes.</source>
          <target state="translated">現在位置のオフセットに指定したバイト数を加えたオフセットを設定します。</target>
        </trans-unit>
        <trans-unit id="f692318bc7ba083cabf3eab2161e8b8a3db450a8" translate="yes" xml:space="preserve">
          <source>Sets the offset to the provided number of bytes.</source>
          <target state="translated">オフセットを指定したバイト数に設定します。</target>
        </trans-unit>
        <trans-unit id="8122e908afce6f0667699e3813f1e8d32970f72a" translate="yes" xml:space="preserve">
          <source>Sets the offset to the size of this object plus the specified number of bytes.</source>
          <target state="translated">このオブジェクトのサイズに指定したバイト数を加えたオフセットを設定します。</target>
        </trans-unit>
        <trans-unit id="d53bb0ea056c01fc83f1046964138b58730e3466" translate="yes" xml:space="preserve">
          <source>Sets the option for creating a new file.</source>
          <target state="translated">新規ファイルの作成オプションを設定します。</target>
        </trans-unit>
        <trans-unit id="a4ca2dc204930d580267421bba1b96fad30633e8" translate="yes" xml:space="preserve">
          <source>Sets the option for read access.</source>
          <target state="translated">読み取りアクセスのオプションを設定します。</target>
        </trans-unit>
        <trans-unit id="a2430e3abe880986a68d19900b4421b33ba19eff" translate="yes" xml:space="preserve">
          <source>Sets the option for the append mode.</source>
          <target state="translated">追加モードのオプションを設定します。</target>
        </trans-unit>
        <trans-unit id="17be9cfeb89520af373651100921b4bb71a1889a" translate="yes" xml:space="preserve">
          <source>Sets the option for truncating a previous file.</source>
          <target state="translated">前のファイルを切り詰めるオプションを設定します。</target>
        </trans-unit>
        <trans-unit id="16c8143af49856abc8e90268804d7514a3d7528e" translate="yes" xml:space="preserve">
          <source>Sets the option for write access.</source>
          <target state="translated">書き込みアクセスのオプションを設定します。</target>
        </trans-unit>
        <trans-unit id="1b7621414a1f97229400fc9d3e514b0597043a44" translate="yes" xml:space="preserve">
          <source>Sets the option to always create a new file.</source>
          <target state="translated">常に新しいファイルを作成するオプションを設定します。</target>
        </trans-unit>
        <trans-unit id="dc3ee685cf0f3ab31847e7d4fa3bdaeedef41cb0" translate="yes" xml:space="preserve">
          <source>Sets the option to create a new file, failing if it already exists.</source>
          <target state="translated">新しいファイルを作成するオプションを設定します。</target>
        </trans-unit>
        <trans-unit id="899ba2d9f77432ec08df84a0ac7da3d732ba3229" translate="yes" xml:space="preserve">
          <source>Sets the option to create a new file, or open it if it already exists.</source>
          <target state="translated">新しいファイルを作成するか、既に存在する場合にそれを開くかのオプションを設定します。</target>
        </trans-unit>
        <trans-unit id="c1c327b9fa62cd31fb539540b1b1b4e44201b9c4" translate="yes" xml:space="preserve">
          <source>Sets the pointer value to &lt;code&gt;ptr&lt;/code&gt;.</source>
          <target state="translated">ポインタ値を &lt;code&gt;ptr&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="1d46ba2f67ddfc3dff7f86a2a919aa5a23732a6e" translate="yes" xml:space="preserve">
          <source>Sets the position of this cursor.</source>
          <target state="translated">このカーソルの位置を設定します。</target>
        </trans-unit>
        <trans-unit id="b3da43878310bb987b12a2a789e4843007f193c6" translate="yes" xml:space="preserve">
          <source>Sets the read timeout for the socket.</source>
          <target state="translated">ソケットの読み込みタイムアウトを設定します。</target>
        </trans-unit>
        <trans-unit id="b7376de16de9b1d1e300186fc4fd48c1d1c5cd30" translate="yes" xml:space="preserve">
          <source>Sets the read timeout to the timeout specified.</source>
          <target state="translated">読み出しタイムアウトを指定したタイムアウトに設定します。</target>
        </trans-unit>
        <trans-unit id="aa11b46378475b94c8efe9cda3223fb982804092" translate="yes" xml:space="preserve">
          <source>Sets the size of the stack (in bytes) for the new thread.</source>
          <target state="translated">新しいスレッドのスタックのサイズを(バイト単位で)設定します。</target>
        </trans-unit>
        <trans-unit id="1c37ab19f8d28a8c744a9164fe95294a0c392d67" translate="yes" xml:space="preserve">
          <source>Sets the underlying raw bits for this set of permissions.</source>
          <target state="translated">このパーミッションのセットの基礎となる生のビットを設定します。</target>
        </trans-unit>
        <trans-unit id="13ce1408fbaf53bac968b7533d7d2200354d74b1" translate="yes" xml:space="preserve">
          <source>Sets the underlying raw bits for this set of permissions. &lt;a href=&quot;../os/unix/fs/trait.permissionsext#tymethod.set_mode&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">この一連の権限の基になる生のビットを設定します。&lt;a href=&quot;../os/unix/fs/trait.permissionsext#tymethod.set_mode&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f6247c67fdde05b90f2f61d79183aaa3b8c42a3b" translate="yes" xml:space="preserve">
          <source>Sets the value for the &lt;code&gt;IP_TTL&lt;/code&gt; option on this socket.</source>
          <target state="translated">このソケットの &lt;code&gt;IP_TTL&lt;/code&gt; オプションの値を設定します。</target>
        </trans-unit>
        <trans-unit id="eba828773afb5d489ceb41078d353587693e2adb" translate="yes" xml:space="preserve">
          <source>Sets the value of the &lt;code&gt;IPV6_MULTICAST_LOOP&lt;/code&gt; option for this socket.</source>
          <target state="translated">このソケットの &lt;code&gt;IPV6_MULTICAST_LOOP&lt;/code&gt; オプションの値を設定します。</target>
        </trans-unit>
        <trans-unit id="2ab8f780b368dbeb7517ffd586ad48535186d012" translate="yes" xml:space="preserve">
          <source>Sets the value of the &lt;code&gt;IP_MULTICAST_LOOP&lt;/code&gt; option for this socket.</source>
          <target state="translated">このソケットの &lt;code&gt;IP_MULTICAST_LOOP&lt;/code&gt; オプションの値を設定します。</target>
        </trans-unit>
        <trans-unit id="e21680fb32b3995fb896d39033963adff3ef366d" translate="yes" xml:space="preserve">
          <source>Sets the value of the &lt;code&gt;IP_MULTICAST_TTL&lt;/code&gt; option for this socket.</source>
          <target state="translated">このソケットの &lt;code&gt;IP_MULTICAST_TTL&lt;/code&gt; オプションの値を設定します。</target>
        </trans-unit>
        <trans-unit id="741b26687f9044b8d9908692d6d3a66f63d46ab1" translate="yes" xml:space="preserve">
          <source>Sets the value of the &lt;code&gt;MaybeUninit&amp;lt;T&amp;gt;&lt;/code&gt;. This overwrites any previous value without dropping it, so be careful not to use this twice unless you want to skip running the destructor. For your convenience, this also returns a mutable reference to the (now safely initialized) contents of &lt;code&gt;self&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;MaybeUninit&amp;lt;T&amp;gt;&lt;/code&gt; の値を設定します。これは以前の値を上書きせずに上書きするため、デストラクタの実行をスキップしたくない場合を除いて、これを2回使用しないように注意してください。便宜上、これは &lt;code&gt;self&lt;/code&gt; の（安全に初期化された）内容への変更可能な参照も返します。</target>
        </trans-unit>
        <trans-unit id="172ebb8097446a67c0c722df012162dce14f82c5" translate="yes" xml:space="preserve">
          <source>Sets the value of the &lt;code&gt;SO_BROADCAST&lt;/code&gt; option for this socket.</source>
          <target state="translated">このソケットの &lt;code&gt;SO_BROADCAST&lt;/code&gt; オプションの値を設定します。</target>
        </trans-unit>
        <trans-unit id="c7234a0198b456bcf2f71df391fadfb348fd3dd9" translate="yes" xml:space="preserve">
          <source>Sets the value of the &lt;code&gt;TCP_NODELAY&lt;/code&gt; option on this socket.</source>
          <target state="translated">このソケットの &lt;code&gt;TCP_NODELAY&lt;/code&gt; オプションの値を設定します。</target>
        </trans-unit>
        <trans-unit id="48774c5ebac7053f3e138fc9e16b60e25a96813f" translate="yes" xml:space="preserve">
          <source>Sets the value of the entry with the &lt;code&gt;OccupiedEntry&lt;/code&gt;'s key, and returns the entry's old value.</source>
          <target state="translated">&lt;code&gt;OccupiedEntry&lt;/code&gt; のキーを使用してエントリの値を設定し、エントリの古い値を返します。</target>
        </trans-unit>
        <trans-unit id="9a97e926f2854934263a3694fe0ee01cd600c728" translate="yes" xml:space="preserve">
          <source>Sets the value of the entry with the &lt;code&gt;VacantEntry&lt;/code&gt;'s key, and returns a mutable reference to it.</source>
          <target state="translated">&lt;code&gt;VacantEntry&lt;/code&gt; のキーでエントリの値を設定し、それに可変の参照を返します。</target>
        </trans-unit>
        <trans-unit id="981e589453aa7f155c53bded824501cfd42b0b49" translate="yes" xml:space="preserve">
          <source>Sets the value of the entry with the VacantEntry's key, and returns a mutable reference to it.</source>
          <target state="translated">VacantEntryのキーを持つエントリの値を設定し、そのエントリへの変更可能な参照を返します。</target>
        </trans-unit>
        <trans-unit id="c0e4bb8bb1b11e453ee19b5669262edcd0233f71" translate="yes" xml:space="preserve">
          <source>Sets the value of the entry, and returns an &lt;code&gt;OccupiedEntry&lt;/code&gt;.</source>
          <target state="translated">エントリの値を設定し、 &lt;code&gt;OccupiedEntry&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="4ce614bc741b150546f3faf456c137627f4eb75a" translate="yes" xml:space="preserve">
          <source>Sets the value of the entry, and returns an OccupiedEntry.</source>
          <target state="translated">エントリの値を設定し、OccupiedEntryを返します。</target>
        </trans-unit>
        <trans-unit id="56aece52ed7de18f860194beff0c22badf73b565" translate="yes" xml:space="preserve">
          <source>Sets the value of the entry, and returns the entry's old value.</source>
          <target state="translated">エントリの値を設定し、エントリの古い値を返します。</target>
        </trans-unit>
        <trans-unit id="b28a94630a0acc7871fd1f9dbb549fc4e9500580" translate="yes" xml:space="preserve">
          <source>Sets the working directory for the child process.</source>
          <target state="translated">子プロセスの作業ディレクトリを設定します。</target>
        </trans-unit>
        <trans-unit id="30663c629c124008aabdc3b273cddf6652a105f6" translate="yes" xml:space="preserve">
          <source>Sets the write timeout for the socket.</source>
          <target state="translated">ソケットの書き込みタイムアウトを設定します。</target>
        </trans-unit>
        <trans-unit id="25c45219c7bdebc8bc195905393e683675912de8" translate="yes" xml:space="preserve">
          <source>Sets the write timeout to the timeout specified.</source>
          <target state="translated">書き込みタイムアウトを指定したタイムアウトに設定します。</target>
        </trans-unit>
        <trans-unit id="41fbfd78e425636274e6d5e0c7d5fcaf2c7ae64e" translate="yes" xml:space="preserve">
          <source>Sets: &lt;a href=&quot;hash_set/struct.hashset&quot;&gt;&lt;code&gt;HashSet&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;struct.btreeset&quot;&gt;&lt;code&gt;BTreeSet&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e0fb8d45f30de32cff3bc0c4111bea5168140bc" translate="yes" xml:space="preserve">
          <source>Sets: &lt;a href=&quot;struct.hashset&quot;&gt;&lt;code&gt;HashSet&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;struct.btreeset&quot;&gt;&lt;code&gt;BTreeSet&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">セット：&lt;a href=&quot;struct.hashset&quot;&gt; &lt;code&gt;HashSet&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;struct.btreeset&quot;&gt; &lt;code&gt;BTreeSet&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f70c27ebb58d70f30f9995aec6d95a82b5ae2008" translate="yes" xml:space="preserve">
          <source>Setting Up a Crates.io Account</source>
          <target state="translated">Crates.ioアカウントの設定</target>
        </trans-unit>
        <trans-unit id="710d049d145a06ebbd1617ee838a19ad46dfc041" translate="yes" xml:space="preserve">
          <source>Setting Up a New Project</source>
          <target state="translated">新規プロジェクトの設定</target>
        </trans-unit>
        <trans-unit id="72f70b4118af352fd7668af0419df15bf165f323" translate="yes" xml:space="preserve">
          <source>Setting up any other configuration</source>
          <target state="translated">その他の設定</target>
        </trans-unit>
        <trans-unit id="61104eb5b2de0f76a2dfb77a41d0b8cbdff3338b" translate="yes" xml:space="preserve">
          <source>Several methods on &lt;a href=&quot;struct.command&quot;&gt;&lt;code&gt;Command&lt;/code&gt;&lt;/a&gt;, such as &lt;a href=&quot;struct.command#method.spawn&quot;&gt;&lt;code&gt;spawn&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;struct.command#method.output&quot;&gt;&lt;code&gt;output&lt;/code&gt;&lt;/a&gt;, can be used to spawn a process. In particular, &lt;a href=&quot;struct.command#method.output&quot;&gt;&lt;code&gt;output&lt;/code&gt;&lt;/a&gt; spawns the child process and waits until the process terminates, while &lt;a href=&quot;struct.command#method.spawn&quot;&gt;&lt;code&gt;spawn&lt;/code&gt;&lt;/a&gt; will return a &lt;a href=&quot;struct.child&quot;&gt;&lt;code&gt;Child&lt;/code&gt;&lt;/a&gt; that represents the spawned child process.</source>
          <target state="translated">&lt;a href=&quot;struct.command#method.spawn&quot;&gt; &lt;code&gt;spawn&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;struct.command#method.output&quot;&gt; &lt;code&gt;output&lt;/code&gt; &lt;/a&gt;などの&lt;a href=&quot;struct.command&quot;&gt; &lt;code&gt;Command&lt;/code&gt; の&lt;/a&gt;いくつかのメソッドを使用して、プロセスを生成できます。特に、&lt;a href=&quot;struct.command#method.output&quot;&gt; &lt;code&gt;output&lt;/code&gt; &lt;/a&gt;は子プロセスを生成し、プロセスが終了するまで待機し&lt;a href=&quot;struct.command#method.spawn&quot;&gt; &lt;code&gt;spawn&lt;/code&gt; &lt;/a&gt;が、spawnは生成された子プロセスを表す&lt;a href=&quot;struct.child&quot;&gt; &lt;code&gt;Child&lt;/code&gt; &lt;/a&gt;を返します。</target>
        </trans-unit>
        <trans-unit id="0fe0c97b11d3f48d0ddcca6a1e2b141ec16967bf" translate="yes" xml:space="preserve">
          <source>Several of Rust's control structures will check for a &lt;code&gt;bool&lt;/code&gt; condition evaluating to &lt;strong&gt;true&lt;/strong&gt;.</source>
          <target state="translated">Rustの制御構造のいくつかは、&lt;strong&gt;真と&lt;/strong&gt;評価される &lt;code&gt;bool&lt;/code&gt; 条件をチェックし&lt;strong&gt;ます&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="c6dcd689827a17bf19ae0f14eca633d07f983509" translate="yes" xml:space="preserve">
          <source>Several of the other (forward) methods have default implementations in terms of this one, so try to implement this explicitly if it can do something better than the default &lt;code&gt;for&lt;/code&gt; loop implementation.</source>
          <target state="translated">他の（フォワード）メソッドのいくつかには、これに関してデフォルトの実装があるため、デフォルトの &lt;code&gt;for&lt;/code&gt; ループ実装よりも優れた処理を実行できる場合は、これを明示的に実装してみてください。</target>
        </trans-unit>
        <trans-unit id="e5819bb82d7f59ef413ffed5a5f1abb2caad63ff" translate="yes" xml:space="preserve">
          <source>Several other collection methods also return iterators to yield a sequence of results but avoid allocating an entire collection to store the result in. This provides maximum flexibility as &lt;code&gt;collect&lt;/code&gt; or &lt;code&gt;extend&lt;/code&gt; can be called to &quot;pipe&quot; the sequence into any collection if desired. Otherwise, the sequence can be looped over with a &lt;code&gt;for&lt;/code&gt; loop. The iterator can also be discarded after partial use, preventing the computation of the unused items.</source>
          <target state="translated">他のいくつかのコレクションメソッドもイテレータを返し、結果のシーケンスを生成しますが、コレクション全体を割り当てて結果を保存することは避けます。これにより、必要に応じてコレクションにシーケンスを「パイプ」 &lt;code&gt;collect&lt;/code&gt; または &lt;code&gt;extend&lt;/code&gt; を呼び出すことができるため、最大限の柔軟性が得られます。それ以外の場合、シーケンスは &lt;code&gt;for&lt;/code&gt; ループでループできます。イテレータは、部分的に使用した後で破棄して、未使用のアイテムの計算を防ぐこともできます。</target>
        </trans-unit>
        <trans-unit id="89615f01358699eaa4c024997d32b57e06506f92" translate="yes" xml:space="preserve">
          <source>Several rules determine what a package can contain. A package &lt;em&gt;must&lt;/em&gt; contain zero or one library crates, and no more. It can contain as many binary crates as you&amp;rsquo;d like, but it must contain at least one crate (either library or binary).</source>
          <target state="translated">いくつかのルールは、パッケージに含めることができるものを決定します。パッケージに&lt;em&gt;は&lt;/em&gt;、0個または1個のライブラリクレートが含まれている&lt;em&gt;必要&lt;/em&gt;が&lt;em&gt;あり&lt;/em&gt;ます。必要な数のバイナリクレートを含めることができますが、少なくとも1つのクレート（ライブラリまたはバイナリ）を含める必要があります。</target>
        </trans-unit>
        <trans-unit id="08c2f3e4082ea69d621aae9852fccdc01e59f915" translate="yes" xml:space="preserve">
          <source>Several situations often occur which result in ambiguities about the receiver or referent of method or associated function calls. These situations may include:</source>
          <target state="translated">いくつかの状況が頻繁に発生し、その結果、メソッドや関連する関数呼び出しの受信者や参照元が曖昧になることがあります。これらの状況には以下のようなものがあります。</target>
        </trans-unit>
        <trans-unit id="7331278fb5718617e233df649e90ba9b72bfb49e" translate="yes" xml:space="preserve">
          <source>Shadowing</source>
          <target state="translated">Shadowing</target>
        </trans-unit>
        <trans-unit id="2713f25473e60389b391aef93ff444fbbf771b5f" translate="yes" xml:space="preserve">
          <source>Shadowing is different from marking a variable as &lt;code&gt;mut&lt;/code&gt;, because we&amp;rsquo;ll get a compile-time error if we accidentally try to reassign to this variable without using the &lt;code&gt;let&lt;/code&gt; keyword. By using &lt;code&gt;let&lt;/code&gt;, we can perform a few transformations on a value but have the variable be immutable after those transformations have been completed.</source>
          <target state="translated">シャドーイングは、変数を &lt;code&gt;mut&lt;/code&gt; としてマークすることとは異なります。なぜなら、 &lt;code&gt;let&lt;/code&gt; キーワードを使用せずにこの変数に誤って再割り当てしようとすると、コンパイル時エラーが発生するためです。 &lt;code&gt;let&lt;/code&gt; を使用すると、値に対していくつかの変換を実行できますが、これらの変換が完了した後は変数を不変にすることができます。</target>
        </trans-unit>
        <trans-unit id="bc84f8ef1f7ad8b864597d728a0025759b1dbefd" translate="yes" xml:space="preserve">
          <source>Shareable mutable containers exist to permit mutability in a controlled manner, even in the presence of aliasing. Both &lt;code&gt;Cell&amp;lt;T&amp;gt;&lt;/code&gt; and &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; allow doing this in a single-threaded way. However, neither &lt;code&gt;Cell&amp;lt;T&amp;gt;&lt;/code&gt; nor &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; are thread safe (they do not implement &lt;code&gt;Sync&lt;/code&gt;). If you need to do aliasing and mutation between multiple threads it is possible to use &lt;a href=&quot;../sync/struct.mutex&quot;&gt;&lt;code&gt;Mutex&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../sync/struct.rwlock&quot;&gt;&lt;code&gt;RwLock&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://doc.rust-lang.org/core/sync/atomic/index.html&quot;&gt;&lt;code&gt;atomic&lt;/code&gt;&lt;/a&gt; types.</source>
          <target state="translated">共有可能な可変コンテナは、エイリアシングが存在する場合でも、制御された方法で可変性を可能にするために存在します。 &lt;code&gt;Cell&amp;lt;T&amp;gt;&lt;/code&gt; と &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; 両方で、これをシングルスレッドで実行できます。ただし、 &lt;code&gt;Cell&amp;lt;T&amp;gt;&lt;/code&gt; も &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; もスレッドセーフではありません（ &lt;code&gt;Sync&lt;/code&gt; を実装していません）。複数のスレッド間でエイリアスとミュー&lt;a href=&quot;../sync/struct.rwlock&quot;&gt; &lt;code&gt;RwLock&lt;/code&gt; &lt;/a&gt;を行う必要がある場合は、&lt;a href=&quot;../sync/struct.mutex&quot;&gt; &lt;code&gt;Mutex&lt;/code&gt; &lt;/a&gt;、RwLock、または&lt;a href=&quot;https://doc.rust-lang.org/core/sync/atomic/index.html&quot;&gt; &lt;code&gt;atomic&lt;/code&gt; &lt;/a&gt;タイプを使用できます。</target>
        </trans-unit>
        <trans-unit id="47055abd20bfa696eaa641c29ba59506a0723b3b" translate="yes" xml:space="preserve">
          <source>Shareable mutable containers.</source>
          <target state="translated">共有可能なミューティアブルコンテナ。</target>
        </trans-unit>
        <trans-unit id="6c0ab5121c59b8d5ea846df7afe17c324651264a" translate="yes" xml:space="preserve">
          <source>Shared &lt;a href=&quot;expressions/operator-expr#borrow-operators&quot;&gt;borrow&lt;/a&gt;s, except if applied to a type with &lt;a href=&quot;interior-mutability&quot;&gt;interior mutability&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;interior-mutability&quot;&gt;内部の可変性&lt;/a&gt;を持つ型に適用される場合を除いて、共有&lt;a href=&quot;expressions/operator-expr#borrow-operators&quot;&gt;ボロー&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="efb0f6a277d017eb755bd966e4139004b6a0e92d" translate="yes" xml:space="preserve">
          <source>Shared references</source>
          <target state="translated">共通参照</target>
        </trans-unit>
        <trans-unit id="890634a9a47838094f8553b06761b5af82a745a4" translate="yes" xml:space="preserve">
          <source>Shared references (&lt;code id=&quot;shared-references-&quot;&gt;&amp;amp;&lt;/code&gt;)</source>
          <target state="translated">共有参照（ &lt;code id=&quot;shared-references-&quot;&gt;&amp;amp;&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="9034ede4e461b638eb9c97844c736d00fbd4d26b" translate="yes" xml:space="preserve">
          <source>Shared references (&lt;code&gt;&amp;amp;&lt;/code&gt;)</source>
          <target state="translated">共有参照（ &lt;code&gt;&amp;amp;&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="cd9be75b780eb204356fa424db53959137c5a707" translate="yes" xml:space="preserve">
          <source>Shared references (&lt;code&gt;&amp;amp;T&lt;/code&gt;) are also &lt;code&gt;Copy&lt;/code&gt;, so a type can be &lt;code&gt;Copy&lt;/code&gt;, even when it holds shared references of types &lt;code&gt;T&lt;/code&gt; that are &lt;em&gt;not&lt;/em&gt;&lt;code&gt;Copy&lt;/code&gt;. Consider the following struct, which can implement &lt;code&gt;Copy&lt;/code&gt;, because it only holds a &lt;em&gt;shared reference&lt;/em&gt; to our non-&lt;code&gt;Copy&lt;/code&gt; type &lt;code&gt;PointList&lt;/code&gt; from above:</source>
          <target state="translated">共有の参照（ &lt;code&gt;&amp;amp;T&lt;/code&gt; は）もある &lt;code&gt;Copy&lt;/code&gt; なので、タイプが可能 &lt;code&gt;Copy&lt;/code&gt; 、それは種類の参照の共有保持している場合でも、 &lt;code&gt;T&lt;/code&gt; され&lt;em&gt;ていない&lt;/em&gt; &lt;code&gt;Copy&lt;/code&gt; 。上記の非 &lt;code&gt;Copy&lt;/code&gt; タイプの &lt;code&gt;PointList&lt;/code&gt; への&lt;em&gt;共有参照&lt;/em&gt;のみを保持するため、 &lt;code&gt;Copy&lt;/code&gt; を実装できる次の構造体について考えてみます。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="abefad9ed979c9e0f107f7811801ce3cc57fbad2" translate="yes" xml:space="preserve">
          <source>Shared references can be cloned, but mutable references &lt;em&gt;cannot&lt;/em&gt;!</source>
          <target state="translated">共有参照は複製できますが、可変参照&lt;em&gt;は&lt;/em&gt;複製&lt;em&gt;できません&lt;/em&gt;！</target>
        </trans-unit>
        <trans-unit id="3cb15d87e708ed99874b210c4f1f798399d3fe6d" translate="yes" xml:space="preserve">
          <source>Shared references can be copied, but mutable references &lt;em&gt;cannot&lt;/em&gt;!</source>
          <target state="translated">共有参照はコピーできますが、可変参照&lt;em&gt;は&lt;/em&gt;コピー&lt;em&gt;できません&lt;/em&gt;！</target>
        </trans-unit>
        <trans-unit id="1ec6397e174c6e6916443049b1750f3bea34e58b" translate="yes" xml:space="preserve">
          <source>Shared references in Rust disallow mutation by default, and &lt;a href=&quot;struct.rc&quot;&gt;&lt;code&gt;Rc&lt;/code&gt;&lt;/a&gt; is no exception: you cannot generally obtain a mutable reference to something inside an &lt;a href=&quot;struct.rc&quot;&gt;&lt;code&gt;Rc&lt;/code&gt;&lt;/a&gt;. If you need mutability, put a &lt;a href=&quot;../cell/struct.cell&quot;&gt;&lt;code&gt;Cell&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../cell/struct.refcell&quot;&gt;&lt;code&gt;RefCell&lt;/code&gt;&lt;/a&gt; inside the &lt;a href=&quot;struct.rc&quot;&gt;&lt;code&gt;Rc&lt;/code&gt;&lt;/a&gt;; see &lt;a href=&quot;../cell/index#introducing-mutability-inside-of-something-immutable&quot;&gt;an example of mutability inside an &lt;code&gt;Rc&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Rustの共有参照はデフォルトで変更を許可しません。また、&lt;a href=&quot;struct.rc&quot;&gt; &lt;code&gt;Rc&lt;/code&gt; &lt;/a&gt;も例外ではありません。通常、&lt;a href=&quot;struct.rc&quot;&gt; &lt;code&gt;Rc&lt;/code&gt; &lt;/a&gt;内の何かへの変更可能な参照を取得することはできません。&lt;a href=&quot;../cell/struct.refcell&quot;&gt; &lt;code&gt;RefCell&lt;/code&gt; &lt;/a&gt;性が必要な場合は、&lt;a href=&quot;struct.rc&quot;&gt; &lt;code&gt;Rc&lt;/code&gt; &lt;/a&gt;内に&lt;a href=&quot;../cell/struct.cell&quot;&gt; &lt;code&gt;Cell&lt;/code&gt; &lt;/a&gt;またはRefCellを配置します。&lt;a href=&quot;../cell/index#introducing-mutability-inside-of-something-immutable&quot;&gt; &lt;code&gt;Rc&lt;/code&gt; &lt;/a&gt;内の可変性の例を参照してください。</target>
        </trans-unit>
        <trans-unit id="46585726f307293b1800a9a3aa2d1ca0bd93a70c" translate="yes" xml:space="preserve">
          <source>Shared references in Rust disallow mutation by default, and &lt;a href=&quot;struct.rc&quot;&gt;&lt;code&gt;Rc&lt;/code&gt;&lt;/a&gt; is no exception: you cannot generally obtain a mutable reference to something inside an &lt;a href=&quot;struct.rc&quot;&gt;&lt;code&gt;Rc&lt;/code&gt;&lt;/a&gt;. If you need mutability, put a &lt;a href=&quot;../cell/struct.cell&quot;&gt;&lt;code&gt;Cell&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../cell/struct.refcell&quot;&gt;&lt;code&gt;RefCell&lt;/code&gt;&lt;/a&gt; inside the &lt;a href=&quot;struct.rc&quot;&gt;&lt;code&gt;Rc&lt;/code&gt;&lt;/a&gt;; see &lt;a href=&quot;../cell/index#introducing-mutability-inside-of-something-immutable&quot;&gt;an example of mutability inside an Rc&lt;/a&gt;.</source>
          <target state="translated">Rustの共有参照はデフォルトで変更を許可しません&lt;a href=&quot;struct.rc&quot;&gt; &lt;code&gt;Rc&lt;/code&gt; &lt;/a&gt;も例外ではありません。通常、&lt;a href=&quot;struct.rc&quot;&gt; &lt;code&gt;Rc&lt;/code&gt; &lt;/a&gt;内の何かへの変更可能な参照を取得することはできません。&lt;a href=&quot;../cell/struct.refcell&quot;&gt; &lt;code&gt;RefCell&lt;/code&gt; &lt;/a&gt;性が必要な場合は、&lt;a href=&quot;struct.rc&quot;&gt; &lt;code&gt;Rc&lt;/code&gt; &lt;/a&gt;内に&lt;a href=&quot;../cell/struct.cell&quot;&gt; &lt;code&gt;Cell&lt;/code&gt; &lt;/a&gt;またはRefCellを配置します。&lt;a href=&quot;../cell/index#introducing-mutability-inside-of-something-immutable&quot;&gt;Rc内の可変性の例を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="40a3598e8561b60a959aeb32086eff6075229cde" translate="yes" xml:space="preserve">
          <source>Shared references in Rust disallow mutation by default, and &lt;code&gt;Arc&lt;/code&gt; is no exception: you cannot generally obtain a mutable reference to something inside an &lt;code&gt;Arc&lt;/code&gt;. If you need to mutate through an &lt;code&gt;Arc&lt;/code&gt;, use &lt;a href=&quot;struct.mutex&quot;&gt;&lt;code&gt;Mutex&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;struct.rwlock&quot;&gt;&lt;code&gt;RwLock&lt;/code&gt;&lt;/a&gt;, or one of the &lt;a href=&quot;atomic/index&quot;&gt;&lt;code&gt;Atomic&lt;/code&gt;&lt;/a&gt; types.</source>
          <target state="translated">Rustの共有参照はデフォルトで変更を許可しません &lt;code&gt;Arc&lt;/code&gt; も例外ではありません。通常、 &lt;code&gt;Arc&lt;/code&gt; 内の何かへの変更可能な参照を取得することはできません。 &lt;code&gt;Arc&lt;/code&gt; を使用して変更する必要がある場合は、&lt;a href=&quot;struct.mutex&quot;&gt; &lt;code&gt;Mutex&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;struct.rwlock&quot;&gt; &lt;code&gt;RwLock&lt;/code&gt; &lt;/a&gt;、または&lt;a href=&quot;atomic/index&quot;&gt; &lt;code&gt;Atomic&lt;/code&gt; &lt;/a&gt;タイプのいずれかを使用します。</target>
        </trans-unit>
        <trans-unit id="593db75233f83bf705ba47b80f89e77132b687a9" translate="yes" xml:space="preserve">
          <source>Shared usage:</source>
          <target state="translated">共有使用。</target>
        </trans-unit>
        <trans-unit id="673382c3c69cfed5a7912b68d101e6192c783dc6" translate="yes" xml:space="preserve">
          <source>Shared-State Concurrency</source>
          <target state="translated">共有状態同時実行</target>
        </trans-unit>
        <trans-unit id="6169a2056c60b167b8282bd75cdfe59b58d65bd5" translate="yes" xml:space="preserve">
          <source>Sharing a &lt;code id=&quot;sharing-a-mutext-between-multiple-threads&quot;&gt;Mutex&amp;lt;T&amp;gt;&lt;/code&gt; Between Multiple Threads</source>
          <target state="translated">複数のスレッド間での &lt;code id=&quot;sharing-a-mutext-between-multiple-threads&quot;&gt;Mutex&amp;lt;T&amp;gt;&lt;/code&gt; 共有</target>
        </trans-unit>
        <trans-unit id="324a15157bab42e3c53455c8f61c8f20832b2737" translate="yes" xml:space="preserve">
          <source>Sharing a mutable &lt;a href=&quot;atomic/struct.atomicusize&quot;&gt;&lt;code&gt;AtomicUsize&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">変更可能な&lt;a href=&quot;atomic/struct.atomicusize&quot;&gt; &lt;code&gt;AtomicUsize&lt;/code&gt; の&lt;/a&gt;共有：</target>
        </trans-unit>
        <trans-unit id="82f15567a2685045ef8f40616c2d3738ec734a12" translate="yes" xml:space="preserve">
          <source>Sharing code with Cargo and &lt;a href=&quot;https://crates.io/&quot;&gt;crates.io&lt;/a&gt; is part of what makes the Rust ecosystem useful for many different tasks. Rust&amp;rsquo;s standard library is small and stable, but crates are easy to share, use, and improve on a timeline different from that of the language. Don&amp;rsquo;t be shy about sharing code that&amp;rsquo;s useful to you on &lt;a href=&quot;https://crates.io/&quot;&gt;crates.io&lt;/a&gt;; it&amp;rsquo;s likely that it will be useful to someone else as well!</source>
          <target state="translated">Cargoや&lt;a href=&quot;https://crates.io/&quot;&gt;crates.io&lt;/a&gt;とコードを共有することは、Rustエコシステムをさまざまなタスクに役立てる要素の1つです。Rustの標準ライブラリは小さくて安定していますが、クレートは、言語とは異なるタイムラインで簡単に共有、使用、改善できます。&lt;a href=&quot;https://crates.io/&quot;&gt;crates.ioで&lt;/a&gt;役立つコードを共有することをためらわないでください。他の人にも役立つ可能性があります！</target>
        </trans-unit>
        <trans-unit id="67f17a5330dc55e4e9b3e034e07a772f7a33d885" translate="yes" xml:space="preserve">
          <source>Sharing some immutable data between threads:</source>
          <target state="translated">スレッド間でいくつかの不変データを共有します。</target>
        </trans-unit>
        <trans-unit id="47683d3d6a99cce10a79a4a38dfd5ef160ca23cc" translate="yes" xml:space="preserve">
          <source>Shebang</source>
          <target state="translated">Shebang</target>
        </trans-unit>
        <trans-unit id="a73b9d910499d7e9122df15ec6a61f388b0cf770" translate="yes" xml:space="preserve">
          <source>Shift Left assignment</source>
          <target state="translated">シフト左の割り当て</target>
        </trans-unit>
        <trans-unit id="9644be9a65880acda2805fe590f041d97c6eb267" translate="yes" xml:space="preserve">
          <source>Shifts self left by &lt;code&gt;rhs&lt;/code&gt; bits.</source>
          <target state="translated">自己を &lt;code&gt;rhs&lt;/code&gt; ビットだけ左にシフトします。</target>
        </trans-unit>
        <trans-unit id="ad4f0f48c2b3202d71235b86b5a91bf878ce3107" translate="yes" xml:space="preserve">
          <source>Shifts self right by &lt;code&gt;rhs&lt;/code&gt; bits.</source>
          <target state="translated">自己を &lt;code&gt;rhs&lt;/code&gt; ビットだけ右にシフトします。</target>
        </trans-unit>
        <trans-unit id="11e010168669b1cf7287a7252ba46dd7f3818df3" translate="yes" xml:space="preserve">
          <source>Shifts the bits to the left by a specified amount, &lt;code&gt;n&lt;/code&gt;, wrapping the truncated bits to the end of the resulting integer.</source>
          <target state="translated">指定された量 &lt;code&gt;n&lt;/code&gt; だけビットを左にシフトし、切り捨てられたビットを結果の整数の最後にラップします。</target>
        </trans-unit>
        <trans-unit id="5ac204c3b620b0da07df3a3a93bbbd9881603f4b" translate="yes" xml:space="preserve">
          <source>Shifts the bits to the right by a specified amount, &lt;code&gt;n&lt;/code&gt;, wrapping the truncated bits to the beginning of the resulting integer.</source>
          <target state="translated">指定された量 &lt;code&gt;n&lt;/code&gt; だけビットを右にシフトし、切り捨てられたビットを結果の整数の先頭にラップします。</target>
        </trans-unit>
        <trans-unit id="68dd94e15896ac518c15a989512e222f2ef6a32f" translate="yes" xml:space="preserve">
          <source>Shl</source>
          <target state="translated">Shl</target>
        </trans-unit>
        <trans-unit id="b4f7133227be359658e629e21e4d7212dd4c6630" translate="yes" xml:space="preserve">
          <source>Shl::shl</source>
          <target state="translated">Shl::shl</target>
        </trans-unit>
        <trans-unit id="fab36f0e94913cb82274aa118d6cd8b1cd309b24" translate="yes" xml:space="preserve">
          <source>ShlAssign</source>
          <target state="translated">ShlAssign</target>
        </trans-unit>
        <trans-unit id="187e5103f590efc111bcc28a740cf12d609481a8" translate="yes" xml:space="preserve">
          <source>ShlAssign::shl_assign</source>
          <target state="translated">ShlAssign::shl_assign</target>
        </trans-unit>
        <trans-unit id="08b4fdcfec7317f43094a61220b3895b503d45ba" translate="yes" xml:space="preserve">
          <source>ShlEq</source>
          <target state="translated">ShlEq</target>
        </trans-unit>
        <trans-unit id="db577c3b4343736633c47c71ae0faa9f9efceba9" translate="yes" xml:space="preserve">
          <source>Short-circuiting logical AND</source>
          <target state="translated">論理的なANDを短絡させる</target>
        </trans-unit>
        <trans-unit id="3016cc0964592fef3fe8ad16c63fbc0d418cf2d9" translate="yes" xml:space="preserve">
          <source>Short-circuiting logical OR</source>
          <target state="translated">短絡的論理和</target>
        </trans-unit>
        <trans-unit id="970d3edc8ee6484f10b0dc33454ed8b18f501c9c" translate="yes" xml:space="preserve">
          <source>Short-circuiting:</source>
          <target state="translated">Short-circuiting:</target>
        </trans-unit>
        <trans-unit id="8ef804f3bc9be06d2d21c37f5a5cbf91e14b9120" translate="yes" xml:space="preserve">
          <source>Shortcuts for Panic on Error: &lt;code id=&quot;shortcuts-for-panic-on-error-unwrap-and-expect&quot;&gt;unwrap&lt;/code&gt; and &lt;code&gt;expect&lt;/code&gt;</source>
          <target state="translated">エラー時のパニックのショートカット： &lt;code id=&quot;shortcuts-for-panic-on-error-unwrap-and-expect&quot;&gt;unwrap&lt;/code&gt; して &lt;code&gt;expect&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1519ba7b83f7f3dff24c0cd12128ef5a8f8e5854" translate="yes" xml:space="preserve">
          <source>Shortens the &lt;code&gt;VecDeque&lt;/code&gt;, dropping excess elements from the back.</source>
          <target state="translated">短縮 &lt;code&gt;VecDeque&lt;/code&gt; が戻ってから余分な要素を落とし、。</target>
        </trans-unit>
        <trans-unit id="7c1d0179f4d005740e4556fdf7ed22bae25b7e03" translate="yes" xml:space="preserve">
          <source>Shortens the &lt;code&gt;VecDeque&lt;/code&gt;, keeping the first &lt;code&gt;len&lt;/code&gt; elements and dropping the rest.</source>
          <target state="translated">短縮 &lt;code&gt;VecDeque&lt;/code&gt; は最初に保ち、 &lt;code&gt;len&lt;/code&gt; の要素を、残りを落とします。</target>
        </trans-unit>
        <trans-unit id="fbcf2a3caecdc661be199d600355577ff28f4f06" translate="yes" xml:space="preserve">
          <source>Shortens the vector, keeping the first &lt;code&gt;len&lt;/code&gt; elements and dropping the rest.</source>
          <target state="translated">最初の &lt;code&gt;len&lt;/code&gt; 個の要素を保持し、残りを削除して、ベクトルを短くします。</target>
        </trans-unit>
        <trans-unit id="ddd2f2ef3c60685bbea8a983f9758868186426bf" translate="yes" xml:space="preserve">
          <source>Shortens this &lt;code&gt;String&lt;/code&gt; to the specified length.</source>
          <target state="translated">この &lt;code&gt;String&lt;/code&gt; を指定された長さに短縮します。</target>
        </trans-unit>
        <trans-unit id="5433cd73ac014316d0b32695693eab5029601309" translate="yes" xml:space="preserve">
          <source>Shorthand</source>
          <target state="translated">Shorthand</target>
        </trans-unit>
        <trans-unit id="cc23e4ff4c1d8e274c5ed8343ec98d723d9f8289" translate="yes" xml:space="preserve">
          <source>Shorthand syntax can be used without specifying a type, which have the following equivalents:</source>
          <target state="translated">型を指定しなくても短縮構文を使用することができ、以下のような同等のものがあります。</target>
        </trans-unit>
        <trans-unit id="3b952e9b07b3fe0b117ef7067ea04f65566f57e1" translate="yes" xml:space="preserve">
          <source>Shouldn't you fix the old borrow checker?</source>
          <target state="translated">古い借金チェッカーを直すべきでは?</target>
        </trans-unit>
        <trans-unit id="ae48efbc4001279fcd3b5db13e51b3c64358a064" translate="yes" xml:space="preserve">
          <source>Showing Function Output</source>
          <target state="translated">関数出力の表示</target>
        </trans-unit>
        <trans-unit id="dd82155a8b68da09dce5b73bc5ba683be2a2e6bb" translate="yes" xml:space="preserve">
          <source>Shown above are the three typical forms an &lt;code&gt;if&lt;/code&gt; block comes in. First is the usual kind of thing you'd see in many languages, with an optional &lt;code&gt;else&lt;/code&gt; block. Second uses &lt;code&gt;if&lt;/code&gt; as an expression, which is only possible if all branches return the same type. An &lt;code&gt;if&lt;/code&gt; expression can be used everywhere you'd expect. The third kind of &lt;code&gt;if&lt;/code&gt; block is an &lt;code&gt;if let&lt;/code&gt; block, which behaves similarly to using a &lt;code&gt;match&lt;/code&gt; expression:</source>
          <target state="translated">上記に示すのは、 &lt;code&gt;if&lt;/code&gt; ブロックが入る3つの典型的な形式です。1つ目は、オプションの &lt;code&gt;else&lt;/code&gt; ブロックを使用して、多くの言語で表示される通常の種類のものです。次に、 &lt;code&gt;if&lt;/code&gt; を式として使用します。これは、すべてのブランチが同じタイプを返す場合にのみ可能です。 &lt;code&gt;if&lt;/code&gt; あなたが期待どこでも表現を使用することができます。3番目の種類の &lt;code&gt;if&lt;/code&gt; ブロックは &lt;code&gt;if let&lt;/code&gt; ブロックであり、 &lt;code&gt;match&lt;/code&gt; 式を使用する場合と同様に動作します。</target>
        </trans-unit>
        <trans-unit id="96b7fb4e78da868e0c9827ccb76f419e702be96d" translate="yes" xml:space="preserve">
          <source>Shr</source>
          <target state="translated">Shr</target>
        </trans-unit>
        <trans-unit id="f36c07d10a129025ed6f7de89f17c89f5fa79a78" translate="yes" xml:space="preserve">
          <source>Shr::shr</source>
          <target state="translated">Shr::shr</target>
        </trans-unit>
        <trans-unit id="3f1f217f4b2181edd79493260631c2539d4caaba" translate="yes" xml:space="preserve">
          <source>ShrAssign</source>
          <target state="translated">ShrAssign</target>
        </trans-unit>
        <trans-unit id="2255ac6ebcd241085e280eb2295078d441bdda79" translate="yes" xml:space="preserve">
          <source>ShrAssign::shr_assign</source>
          <target state="translated">ShrAssign::shr_assign</target>
        </trans-unit>
        <trans-unit id="182a6a62df03a168a7f6aa9aee943c5b1852df36" translate="yes" xml:space="preserve">
          <source>ShrEq</source>
          <target state="translated">ShrEq</target>
        </trans-unit>
        <trans-unit id="a2e8287961bf4d750e060a317afad9275baac758" translate="yes" xml:space="preserve">
          <source>Shrink or grow a block of memory to the given &lt;code&gt;new_size&lt;/code&gt;. The block is described by the given &lt;code&gt;ptr&lt;/code&gt; pointer and &lt;code&gt;layout&lt;/code&gt;.</source>
          <target state="translated">メモリブロックを指定された &lt;code&gt;new_size&lt;/code&gt; に縮小または拡張します。ブロックは、指定された &lt;code&gt;ptr&lt;/code&gt; ポインターと &lt;code&gt;layout&lt;/code&gt; によって記述されます。</target>
        </trans-unit>
        <trans-unit id="b4f3cd5485206277c6c062154ec892c9fa28a869" translate="yes" xml:space="preserve">
          <source>Shrink or grow a block of memory to the given &lt;code&gt;new_size&lt;/code&gt;. The block is described by the given &lt;code&gt;ptr&lt;/code&gt; pointer and &lt;code&gt;layout&lt;/code&gt;. &lt;a href=&quot;trait.globalalloc#method.realloc&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">メモリブロックを指定された &lt;code&gt;new_size&lt;/code&gt; に縮小または拡張します。ブロックは、指定された &lt;code&gt;ptr&lt;/code&gt; ポインターと &lt;code&gt;layout&lt;/code&gt; によって記述されます。&lt;a href=&quot;trait.globalalloc#method.realloc&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c20b48c0ee956dcfaa9d46479585794f19c8eebb" translate="yes" xml:space="preserve">
          <source>Shrinks the capacity of the &lt;code&gt;OsString&lt;/code&gt; to match its length.</source>
          <target state="translated">&lt;code&gt;OsString&lt;/code&gt; の容量を縮小して、長さに合わせます。</target>
        </trans-unit>
        <trans-unit id="1efdcc127416c637cab6f872bfd7932d82d4f999" translate="yes" xml:space="preserve">
          <source>Shrinks the capacity of the &lt;code&gt;OsString&lt;/code&gt; with a lower bound.</source>
          <target state="translated">&lt;code&gt;OsString&lt;/code&gt; の容量を下限で縮小します。</target>
        </trans-unit>
        <trans-unit id="5375857e16ae324dfb1997e42702f7399cf86d21" translate="yes" xml:space="preserve">
          <source>Shrinks the capacity of the &lt;code&gt;VecDeque&lt;/code&gt; as much as possible.</source>
          <target state="translated">&lt;code&gt;VecDeque&lt;/code&gt; の容量を可能な限り縮小します。</target>
        </trans-unit>
        <trans-unit id="cf5ab0cc658b57dad7fbe1c6d97a13265747811a" translate="yes" xml:space="preserve">
          <source>Shrinks the capacity of the &lt;code&gt;VecDeque&lt;/code&gt; with a lower bound.</source>
          <target state="translated">&lt;code&gt;VecDeque&lt;/code&gt; の容量を下限で縮小します。</target>
        </trans-unit>
        <trans-unit id="f7e75e702aa678b2c8afd319c5f7d6e708e14fc4" translate="yes" xml:space="preserve">
          <source>Shrinks the capacity of the map as much as possible. It will drop down as much as possible while maintaining the internal rules and possibly leaving some space in accordance with the resize policy.</source>
          <target state="translated">マップの容量を可能な限り縮小します。内部ルールを維持しつつ、リサイズポリシーに合わせてスペースを残すこともありますが、可能な限り縮小されます。</target>
        </trans-unit>
        <trans-unit id="a73d69b53df9ccbc822b8b0d7db2eb53f35372a9" translate="yes" xml:space="preserve">
          <source>Shrinks the capacity of the map with a lower limit. It will drop down no lower than the supplied limit while maintaining the internal rules and possibly leaving some space in accordance with the resize policy.</source>
          <target state="translated">マップの容量を下限値で縮小します。内部ルールを維持しつつ、リサイズポリシーに従ってスペースを残すこともありますが、指定された制限値よりも低くなることはありません。</target>
        </trans-unit>
        <trans-unit id="f6a7222c172a077d372006fe5331fabe3d3a3bb9" translate="yes" xml:space="preserve">
          <source>Shrinks the capacity of the set as much as possible. It will drop down as much as possible while maintaining the internal rules and possibly leaving some space in accordance with the resize policy.</source>
          <target state="translated">セットの容量を可能な限り縮小します。内部ルールを維持しつつ、リサイズポリシーに合わせてある程度のスペースを残しつつ、可能な限り縮小します。</target>
        </trans-unit>
        <trans-unit id="41858f7da9677542d00322810b88fc317754e30d" translate="yes" xml:space="preserve">
          <source>Shrinks the capacity of the set with a lower limit. It will drop down no lower than the supplied limit while maintaining the internal rules and possibly leaving some space in accordance with the resize policy.</source>
          <target state="translated">セットの容量を下限値で縮小します。内部ルールを維持しつつ、リサイズポリシーに沿って若干のスペースを残すこともありますが、与えられた制限値よりも下がらないように縮小されます。</target>
        </trans-unit>
        <trans-unit id="f2755abeb335e151fc605b5e1aa1b06db921994c" translate="yes" xml:space="preserve">
          <source>Shrinks the capacity of the vector as much as possible.</source>
          <target state="translated">ベクトルの容量を可能な限り縮小します。</target>
        </trans-unit>
        <trans-unit id="866f94bf32c3c6585c11a10955ec4880b640599a" translate="yes" xml:space="preserve">
          <source>Shrinks the capacity of the vector with a lower bound.</source>
          <target state="translated">ベクトルの容量を下界で縮小します。</target>
        </trans-unit>
        <trans-unit id="884255f5ec002cc73e9d4491a38d215fe85e8f07" translate="yes" xml:space="preserve">
          <source>Shrinks the capacity of this &lt;code&gt;String&lt;/code&gt; to match its length.</source>
          <target state="translated">この &lt;code&gt;String&lt;/code&gt; の容量をその長さに合わせて縮小します。</target>
        </trans-unit>
        <trans-unit id="7729558eff0a7d6641a344899c70cf2659a69f1c" translate="yes" xml:space="preserve">
          <source>Shrinks the capacity of this &lt;code&gt;String&lt;/code&gt; with a lower bound.</source>
          <target state="translated">この &lt;code&gt;String&lt;/code&gt; の容量を下限で縮小します。</target>
        </trans-unit>
        <trans-unit id="f16273e2258552ff78d0e39e1cd8d789c334fb49" translate="yes" xml:space="preserve">
          <source>Shut down the read, write, or both halves of this connection.</source>
          <target state="translated">この接続の読み取り、書き込み、またはその両方をシャットダウンします。</target>
        </trans-unit>
        <trans-unit id="7fddb7d8d1d60b1eeefa9af01082e0811d4b484d" translate="yes" xml:space="preserve">
          <source>Shutdown</source>
          <target state="translated">Shutdown</target>
        </trans-unit>
        <trans-unit id="fabfdc53cc8b2f529866f21ba7c330d11cb0d9e3" translate="yes" xml:space="preserve">
          <source>Shutdown::borrow</source>
          <target state="translated">Shutdown::borrow</target>
        </trans-unit>
        <trans-unit id="5a9c75f496ce5fe9fb60bc9bcf25af7721cda69e" translate="yes" xml:space="preserve">
          <source>Shutdown::borrow_mut</source>
          <target state="translated">Shutdown::borrow_mut</target>
        </trans-unit>
        <trans-unit id="7f592764c49224c545a0438c226f21d982d4c009" translate="yes" xml:space="preserve">
          <source>Shutdown::clone</source>
          <target state="translated">Shutdown::clone</target>
        </trans-unit>
        <trans-unit id="e36a6bb7a2896af9fd3bebae97a483df5b95a5f7" translate="yes" xml:space="preserve">
          <source>Shutdown::clone_from</source>
          <target state="translated">Shutdown::clone_from</target>
        </trans-unit>
        <trans-unit id="a45f057caba64efa0a9d4675e1c38314b625f074" translate="yes" xml:space="preserve">
          <source>Shutdown::clone_into</source>
          <target state="translated">Shutdown::clone_into</target>
        </trans-unit>
        <trans-unit id="d813e9bf46e7c81fc5799513f15d5397083ba019" translate="yes" xml:space="preserve">
          <source>Shutdown::eq</source>
          <target state="translated">Shutdown::eq</target>
        </trans-unit>
        <trans-unit id="e80f887be13571a33861afe3c0e47bb311b6f4c9" translate="yes" xml:space="preserve">
          <source>Shutdown::fmt</source>
          <target state="translated">Shutdown::fmt</target>
        </trans-unit>
        <trans-unit id="4a8fa437b5bb408022ca927b5a21b3e3ae6559e4" translate="yes" xml:space="preserve">
          <source>Shutdown::from</source>
          <target state="translated">Shutdown::from</target>
        </trans-unit>
        <trans-unit id="f19f6cd7ccdb5181c93271062d07ff63717634e0" translate="yes" xml:space="preserve">
          <source>Shutdown::into</source>
          <target state="translated">Shutdown::into</target>
        </trans-unit>
        <trans-unit id="adbe53901f9e868771630cf338a14fad559e4103" translate="yes" xml:space="preserve">
          <source>Shutdown::ne</source>
          <target state="translated">Shutdown::ne</target>
        </trans-unit>
        <trans-unit id="a19a47443edf4ef55ec746d90cb8acc1aa93a945" translate="yes" xml:space="preserve">
          <source>Shutdown::to_owned</source>
          <target state="translated">Shutdown::to_owned</target>
        </trans-unit>
        <trans-unit id="8323a24a68d991e914c3f3df7846d2d7061b5328" translate="yes" xml:space="preserve">
          <source>Shutdown::try_from</source>
          <target state="translated">Shutdown::try_from</target>
        </trans-unit>
        <trans-unit id="16444bbdd0bcc5aef40242a6445faf40136e6cf5" translate="yes" xml:space="preserve">
          <source>Shutdown::try_into</source>
          <target state="translated">Shutdown::try_into</target>
        </trans-unit>
        <trans-unit id="4349539edfc1eb706cb0a1b24d07db1a042d53a3" translate="yes" xml:space="preserve">
          <source>Shutdown::type_id</source>
          <target state="translated">Shutdown::type_id</target>
        </trans-unit>
        <trans-unit id="77317819ad1195b76b8414b5deebf1e238ce5a9c" translate="yes" xml:space="preserve">
          <source>Shuts down the read, write, or both halves of this connection.</source>
          <target state="translated">この接続の読み取り、書き込み、またはその両方をシャットダウンします。</target>
        </trans-unit>
        <trans-unit id="ac15b088947f5be00e8e8573eba4c4a716935fa1" translate="yes" xml:space="preserve">
          <source>Sign/&lt;code&gt;#&lt;/code&gt;/&lt;code&gt;0&lt;/code&gt;</source>
          <target state="translated">Sign/&lt;code&gt;#&lt;/code&gt;/&lt;code&gt;0&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ed1f48fc84cca9ffbe6a5cc1d6f3512080246462" translate="yes" xml:space="preserve">
          <source>Signaling to the Threads to Stop Listening for Jobs</source>
          <target state="translated">求人情報を聞くのをやめるためのスレッドへの合図</target>
        </trans-unit>
        <trans-unit id="1873c23eef44d368cb455909e4c7bf540ce35eef" translate="yes" xml:space="preserve">
          <source>Signals the processor that it is entering a busy-wait spin-loop.</source>
          <target state="translated">プロセッサがビジーウェイトスピンループに入ったことを通知します。</target>
        </trans-unit>
        <trans-unit id="8b31f38dd6420c845ba1f6d21593f75a93127852" translate="yes" xml:space="preserve">
          <source>Signals the processor that it is inside a busy-wait spin-loop (&quot;spin lock&quot;).</source>
          <target state="translated">プロセッサがビジーウェイトスピンループ(「スピンロック」)内にあることを通知します。</target>
        </trans-unit>
        <trans-unit id="6e3665d85fde70112ccec1bb287428d4fd142fcc" translate="yes" xml:space="preserve">
          <source>Signed</source>
          <target state="translated">Signed</target>
        </trans-unit>
        <trans-unit id="bbc2b0c702b08dd5d5de05934c9988f7f0eff014" translate="yes" xml:space="preserve">
          <source>Significantly, closure expressions &lt;em&gt;capture their environment&lt;/em&gt;, which regular &lt;a href=&quot;../items/functions&quot;&gt;function definitions&lt;/a&gt; do not. Without the &lt;code&gt;move&lt;/code&gt; keyword, the closure expression &lt;a href=&quot;../types/closure#capture-modes&quot;&gt;infers how it captures each variable from its environment&lt;/a&gt;, preferring to capture by shared reference, effectively borrowing all outer variables mentioned inside the closure's body. If needed the compiler will infer that instead mutable references should be taken, or that the values should be moved or copied (depending on their type) from the environment. A closure can be forced to capture its environment by copying or moving values by prefixing it with the &lt;code&gt;move&lt;/code&gt; keyword. This is often used to ensure that the closure's type is &lt;code&gt;'static&lt;/code&gt;.</source>
          <target state="translated">重要なことに、クロージャ式&lt;em&gt;はそれらの環境をキャプチャしますが&lt;/em&gt;、通常の&lt;a href=&quot;../items/functions&quot;&gt;関数定義&lt;/a&gt;は&lt;em&gt;キャプチャし&lt;/em&gt;ません。 &lt;code&gt;move&lt;/code&gt; キーワードがない場合、クロージャ式&lt;a href=&quot;../types/closure#capture-modes&quot;&gt;は、環境から各変数をキャプチャする方法を推測し&lt;/a&gt;、共有参照によるキャプチャを優先して、クロージャの本体内で言及されているすべての外部変数を効果的に借用します。必要に応じて、コンパイラーは代わりに変更可能な参照を取得する必要がある、または値を環境から（タイプに応じて）移動またはコピーする必要があると推測します。 &lt;code&gt;move&lt;/code&gt; キーワードを接頭辞として値をコピーまたは移動することにより、クロージャは環境を強制的に取得できます。これは、クロージャのタイプが &lt;code&gt;'static&lt;/code&gt; あることを保証するためによく使用されます。</target>
        </trans-unit>
        <trans-unit id="a3a265e9f838485e31901511e6f2045135b0cce6" translate="yes" xml:space="preserve">
          <source>Similar in construction to &lt;code&gt;if let&lt;/code&gt;, the &lt;code&gt;while let&lt;/code&gt; conditional loop allows a &lt;code&gt;while&lt;/code&gt; loop to run for as long as a pattern continues to match. The example in Listing 18-2 shows a &lt;code&gt;while let&lt;/code&gt; loop that uses a vector as a stack and prints the values in the vector in the opposite order in which they were pushed.</source>
          <target state="translated">&lt;code&gt;if let&lt;/code&gt; と構造が似ていますが、 &lt;code&gt;while let&lt;/code&gt; 条件付きループでは、パターンが一致し続ける限り、 &lt;code&gt;while&lt;/code&gt; ループを実行できます。リスト18-2の例は、ベクターをスタックとして使用し、プッシュされた順序とは逆の順序でベクターの値を出力する &lt;code&gt;while let&lt;/code&gt; ループを示しています。</target>
        </trans-unit>
        <trans-unit id="64ae3c66d57a2a6b39e286d0598b2a92f6754d01" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;../../../io/trait.read#method.read_exact&quot;&gt;&lt;code&gt;Read::read_exact&lt;/code&gt;&lt;/a&gt; but uses &lt;a href=&quot;#tymethod.read_at&quot;&gt;&lt;code&gt;read_at&lt;/code&gt;&lt;/a&gt; instead of &lt;code&gt;read&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../../io/trait.read#method.read_exact&quot;&gt; &lt;code&gt;Read::read_exact&lt;/code&gt; &lt;/a&gt;似ていますが、&lt;a href=&quot;#tymethod.read_at&quot;&gt; &lt;code&gt;read_at&lt;/code&gt; &lt;/a&gt;ではなくread_atを使用し &lt;code&gt;read&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e99138b160f2a86b9da9922eb45a2b91269d8bbe" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;../../../io/trait.read#method.read_exact&quot;&gt;&lt;code&gt;io::Read::read_exact&lt;/code&gt;&lt;/a&gt; but uses &lt;a href=&quot;trait.fileext#tymethod.read_at&quot;&gt;&lt;code&gt;read_at&lt;/code&gt;&lt;/a&gt; instead of &lt;code&gt;read&lt;/code&gt;.</source>
          <target state="translated">同様に&lt;a href=&quot;../../../io/trait.read#method.read_exact&quot;&gt; &lt;code&gt;io::Read::read_exact&lt;/code&gt; &lt;/a&gt;が、用途は&lt;a href=&quot;trait.fileext#tymethod.read_at&quot;&gt; &lt;code&gt;read_at&lt;/code&gt; &lt;/a&gt;の代わりに &lt;code&gt;read&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="edd67ee22ad5d982cd10f26e69756d73303d48b2" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt;, &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; is only for use in single-threaded scenarios and will give you a compile-time error if you try using it in a multithreaded context. We&amp;rsquo;ll talk about how to get the functionality of &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; in a multithreaded program in Chapter 16.</source>
          <target state="translated">&lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; と同様に、 &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; はシングルスレッドシナリオでのみ使用でき、マルチスレッドコンテキストで使用しようとするとコンパイル時エラーが発生します。第16章では、マルチスレッドプログラムで &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; 機能を取得する方法について説明します。</target>
        </trans-unit>
        <trans-unit id="4994bf8a405f841ed46d5b238330129c5daee3e1" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;request_review&lt;/code&gt;, if we call the &lt;code&gt;approve&lt;/code&gt; method on a &lt;code&gt;Draft&lt;/code&gt;, it will have no effect because it will return &lt;code&gt;self&lt;/code&gt;. When we call &lt;code&gt;approve&lt;/code&gt; on &lt;code&gt;PendingReview&lt;/code&gt;, it returns a new, boxed instance of the &lt;code&gt;Published&lt;/code&gt; struct. The &lt;code&gt;Published&lt;/code&gt; struct implements the &lt;code&gt;State&lt;/code&gt; trait, and for both the &lt;code&gt;request_review&lt;/code&gt; method and the &lt;code&gt;approve&lt;/code&gt; method, it returns itself, because the post should stay in the &lt;code&gt;Published&lt;/code&gt; state in those cases.</source>
          <target state="translated">&lt;code&gt;request_review&lt;/code&gt; と同様に、 &lt;code&gt;Draft&lt;/code&gt; で &lt;code&gt;approve&lt;/code&gt; メソッドを呼び出しても、 &lt;code&gt;self&lt;/code&gt; を返すため、何の効果もありません。私たちが呼び出すと &lt;code&gt;approve&lt;/code&gt; に &lt;code&gt;PendingReview&lt;/code&gt; 、それは新しい、箱入りインスタンスを返し &lt;code&gt;Published&lt;/code&gt; 構造体を。 &lt;code&gt;Published&lt;/code&gt; 構造体の実装 &lt;code&gt;State&lt;/code&gt; 特性、および両方のための &lt;code&gt;request_review&lt;/code&gt; の方法および &lt;code&gt;approve&lt;/code&gt; 後にはに滞在する必要があるので、それは、自分自身を返し、メソッドを &lt;code&gt;Published&lt;/code&gt; これらのケースで状態。</target>
        </trans-unit>
        <trans-unit id="88e10b6c2ce7d024990190fdfd83529adab1128c" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;uid&lt;/code&gt;, but sets the group ID of the child process. This has the same semantics as the &lt;code&gt;uid&lt;/code&gt; field.</source>
          <target state="translated">&lt;code&gt;uid&lt;/code&gt; に似ていますが、子プロセスのグループIDを設定します。これは、 &lt;code&gt;uid&lt;/code&gt; フィールドと同じセマンティクスを持っています。</target>
        </trans-unit>
        <trans-unit id="4e3696cd516232fdd3724614c9f05eedaa21b3e4" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;uid&lt;/code&gt;, but sets the group ID of the child process. This has the same semantics as the &lt;code&gt;uid&lt;/code&gt; field. &lt;a href=&quot;../os/unix/process/trait.commandext#tymethod.gid&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;uid&lt;/code&gt; に似ていますが、子プロセスのグループIDを設定します。これは、 &lt;code&gt;uid&lt;/code&gt; フィールドと同じセマンティクスを持っています。&lt;a href=&quot;../os/unix/process/trait.commandext#tymethod.gid&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f4bd1c5d39c2240e3d2e352bf6eab674bdb7120d" translate="yes" xml:space="preserve">
          <source>Similar to how we used test-driven development in the project in Chapter 12, we&amp;rsquo;ll use compiler-driven development here. We&amp;rsquo;ll write the code that calls the functions we want, and then we&amp;rsquo;ll look at errors from the compiler to determine what we should change next to get the code to work.</source>
          <target state="translated">第12章のプロジェクトでテスト駆動開発を使用した方法と同様に、ここではコンパイラ駆動開発を使用します。必要な関数を呼び出すコードを記述してから、コンパイラーのエラーを調べて、コードを機能させるために次に何を変更する必要があるかを判断します。</target>
        </trans-unit>
        <trans-unit id="a44c70a0afcab0a2cb8b8b5e6459531560f406d9" translate="yes" xml:space="preserve">
          <source>Similar to how you use the &lt;code&gt;Deref&lt;/code&gt; trait to override the &lt;code&gt;*&lt;/code&gt; operator on immutable references, you can use the &lt;code&gt;DerefMut&lt;/code&gt; trait to override the &lt;code&gt;*&lt;/code&gt; operator on mutable references.</source>
          <target state="translated">あなたが使用する方法と同様に &lt;code&gt;Deref&lt;/code&gt; 上書きする形質を &lt;code&gt;*&lt;/code&gt; 不変の参照にオペレータを、あなたが使用することができます &lt;code&gt;DerefMut&lt;/code&gt; 上書きする形質を &lt;code&gt;*&lt;/code&gt; 変更可能な参照にオペレータを。</target>
        </trans-unit>
        <trans-unit id="07b70f124a730d4cd85b8e804701685c3f75301d" translate="yes" xml:space="preserve">
          <source>Similar to the way a function takes parameters with unknown values to run the same code on multiple concrete values, functions can take parameters of some generic type instead of a concrete type, like &lt;code&gt;i32&lt;/code&gt; or &lt;code&gt;String&lt;/code&gt;. In fact, we&amp;rsquo;ve already used generics in Chapter 6 with &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt;, Chapter 8 with &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; and &lt;code&gt;HashMap&amp;lt;K, V&amp;gt;&lt;/code&gt;, and Chapter 9 with &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt;. In this chapter, you&amp;rsquo;ll explore how to define your own types, functions, and methods with generics!</source>
          <target state="translated">関数が未知の値を持つパラメーターを取り、複数の具象値に対して同じコードを実行するのと同様に、関数は &lt;code&gt;i32&lt;/code&gt; や &lt;code&gt;String&lt;/code&gt; などの具象型ではなく、いくつかのジェネリック型のパラメーターを受け取ることができます。実際、第6章では &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; 、第8章では &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; および &lt;code&gt;HashMap&amp;lt;K, V&amp;gt;&lt;/code&gt; 、第9章では &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt; ジェネリックをすでに使用しています。この章では、ジェネリックで独自の型、関数、メソッドを定義する方法を探ります。</target>
        </trans-unit>
        <trans-unit id="6e8f822081e736e94d313c98afa2efd044c3746e" translate="yes" xml:space="preserve">
          <source>Similarily, calling &lt;code&gt;Pin::new_unchecked&lt;/code&gt; on an &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; is unsafe because there could be aliases to the same data that are not subject to the pinning restrictions:</source>
          <target state="translated">&lt;code&gt;Pin::new_unchecked&lt;/code&gt; に、 &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; Pin :: new_uncheckedを呼び出すのは安全ではありません。同じデータへのエイリアスがあり、ピン留めの制約を受けない可能性があるためです。</target>
        </trans-unit>
        <trans-unit id="fc1608213ac13199c43c176b1bb1a0dafa112729" translate="yes" xml:space="preserve">
          <source>Similarities Between &lt;code id=&quot;similarities-between-refcelltrct-and-mutextarct&quot;&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt;/&lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; and &lt;code&gt;Mutex&amp;lt;T&amp;gt;&lt;/code&gt;/&lt;code&gt;Arc&amp;lt;T&amp;gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code id=&quot;similarities-between-refcelltrct-and-mutextarct&quot;&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; / &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; と &lt;code&gt;Mutex&amp;lt;T&amp;gt;&lt;/code&gt; / &lt;code&gt;Arc&amp;lt;T&amp;gt;&lt;/code&gt; 類似点</target>
        </trans-unit>
        <trans-unit id="c9732fced80440502cea1e483af3c96733c510ed" translate="yes" xml:space="preserve">
          <source>Similarly to how adding more unit test functions adds more result lines to the unit tests section, adding more test functions to the integration test file adds more result lines to this integration test file&amp;rsquo;s section. Each integration test file has its own section, so if we add more files in the &lt;em&gt;tests&lt;/em&gt; directory, there will be more integration test sections.</source>
          <target state="translated">単体テスト関数を追加すると、ユニットテストセクションに結果行が追加されるのと同様に、統合テストファイルにテスト関数を追加すると、この統合テストファイルのセクションに結果行が追加されます。各統合テストファイルには独自のセクションがあるため、&lt;em&gt;tests&lt;/em&gt;ディレクトリにさらにファイルを追加すると、統合テストセクションが多くなります。</target>
        </trans-unit>
        <trans-unit id="7660d0adab8b6b631f474c1b7695efb3238541f3" translate="yes" xml:space="preserve">
          <source>Similarly, &lt;a href=&quot;../../../ffi/struct.osstr&quot;&gt;&lt;code&gt;OsStr&lt;/code&gt;&lt;/a&gt; is the Rust wrapper for borrowed strings from preferred representation of the operating system. On Windows, the &lt;a href=&quot;trait.osstrext&quot;&gt;&lt;code&gt;OsStrExt&lt;/code&gt;&lt;/a&gt; trait provides the &lt;a href=&quot;trait.osstrext#tymethod.encode_wide&quot;&gt;&lt;code&gt;OsStrExt::encode_wide&lt;/code&gt;&lt;/a&gt; method, which outputs an &lt;a href=&quot;struct.encodewide&quot;&gt;&lt;code&gt;EncodeWide&lt;/code&gt;&lt;/a&gt; iterator. You can &lt;a href=&quot;../../../iter/trait.iterator#method.collect&quot;&gt;&lt;code&gt;collect&lt;/code&gt;&lt;/a&gt; this iterator, for example, to obtain a &lt;code&gt;Vec&amp;lt;u16&amp;gt;&lt;/code&gt;; you can later get a pointer to this vector's contents and feed it to Windows APIs.</source>
          <target state="translated">同様に、&lt;a href=&quot;../../../ffi/struct.osstr&quot;&gt; &lt;code&gt;OsStr&lt;/code&gt; &lt;/a&gt;は、オペレーティングシステムの優先表現から借用した文字列のRustラッパーです。Windowsでは、&lt;a href=&quot;trait.osstrext&quot;&gt; &lt;code&gt;OsStrExt&lt;/code&gt; &lt;/a&gt;トレイトは、&lt;a href=&quot;struct.encodewide&quot;&gt; &lt;code&gt;EncodeWide&lt;/code&gt; &lt;/a&gt;イテレーターを出力するOsStrExt &lt;a href=&quot;trait.osstrext#tymethod.encode_wide&quot;&gt; &lt;code&gt;OsStrExt::encode_wide&lt;/code&gt; &lt;/a&gt;メソッドを提供します。このイテレータを&lt;a href=&quot;../../../iter/trait.iterator#method.collect&quot;&gt; &lt;code&gt;collect&lt;/code&gt; &lt;/a&gt;て、たとえば、 &lt;code&gt;Vec&amp;lt;u16&amp;gt;&lt;/code&gt; を取得できます。後でこのベクターのコンテンツへのポインターを取得して、WindowsAPIにフィードすることができます。</target>
        </trans-unit>
        <trans-unit id="5b862eb4b9399982687d0163ad488253ccdc9958" translate="yes" xml:space="preserve">
          <source>Similarly, &lt;a href=&quot;../../../ffi/struct.osstr&quot;&gt;&lt;code&gt;OsStr&lt;/code&gt;&lt;/a&gt; is the Rust wrapper for borrowed strings from preferred representation of the operating system. On Windows, the &lt;a href=&quot;trait.osstrext&quot;&gt;&lt;code&gt;OsStrExt&lt;/code&gt;&lt;/a&gt; trait provides the &lt;a href=&quot;trait.osstrext#tymethod.encode_wide&quot;&gt;&lt;code&gt;encode_wide&lt;/code&gt;&lt;/a&gt; method, which outputs an &lt;a href=&quot;struct.encodewide&quot;&gt;&lt;code&gt;EncodeWide&lt;/code&gt;&lt;/a&gt; iterator. You can &lt;a href=&quot;../../../iter/trait.iterator#method.collect&quot;&gt;&lt;code&gt;collect&lt;/code&gt;&lt;/a&gt; this iterator, for example, to obtain a &lt;code&gt;Vec&amp;lt;u16&amp;gt;&lt;/code&gt;; you can later get a pointer to this vector's contents and feed it to Windows APIs.</source>
          <target state="translated">同様に、&lt;a href=&quot;../../../ffi/struct.osstr&quot;&gt; &lt;code&gt;OsStr&lt;/code&gt; &lt;/a&gt;は、オペレーティングシステムの優先表現から借用した文字列のRustラッパーです。Windowsでは、&lt;a href=&quot;trait.osstrext&quot;&gt; &lt;code&gt;OsStrExt&lt;/code&gt; の&lt;/a&gt;特色は、提供&lt;a href=&quot;trait.osstrext#tymethod.encode_wide&quot;&gt; &lt;code&gt;encode_wide&lt;/code&gt; の&lt;/a&gt;出力方法、&lt;a href=&quot;struct.encodewide&quot;&gt; &lt;code&gt;EncodeWide&lt;/code&gt; の&lt;/a&gt;イテレータを。たとえば、このイテレータを&lt;a href=&quot;../../../iter/trait.iterator#method.collect&quot;&gt; &lt;code&gt;collect&lt;/code&gt; &lt;/a&gt;て &lt;code&gt;Vec&amp;lt;u16&amp;gt;&lt;/code&gt; を取得できます。このベクターのコンテンツへのポインターを後で取得して、Windows APIにフィードできます。</target>
        </trans-unit>
        <trans-unit id="21888fa75549881b10ce400876eec72ecd5ad10f" translate="yes" xml:space="preserve">
          <source>Similarly, calling &lt;code&gt;Pin::new_unchecked&lt;/code&gt; on an &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; is unsafe because there could be aliases to the same data that are not subject to the pinning restrictions:</source>
          <target state="translated">同様に、 &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; &lt;code&gt;Pin::new_unchecked&lt;/code&gt; を呼び出すことは、固定制限の対象ではない同じデータへのエイリアスが存在する可能性があるため、安全ではありません。</target>
        </trans-unit>
        <trans-unit id="331d62920cf450c0aa7d5ef9d689f928128d9ddb" translate="yes" xml:space="preserve">
          <source>Similarly, entirely uninitialized memory may have any content, while a &lt;code&gt;bool&lt;/code&gt; must always be &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;. Hence, creating an uninitialized &lt;code&gt;bool&lt;/code&gt; is undefined behavior:</source>
          <target state="translated">同様に、完全に初期化されていないメモリにはコンテンツが含まれる可能性がありますが、 &lt;code&gt;bool&lt;/code&gt; は常に &lt;code&gt;true&lt;/code&gt; または &lt;code&gt;false&lt;/code&gt; でなければなりません。したがって、初期化されていない &lt;code&gt;bool&lt;/code&gt; を作成することは未定義の動作です：</target>
        </trans-unit>
        <trans-unit id="ed164c6b174ba78425b6e3b0cccce0c52c2d4a48" translate="yes" xml:space="preserve">
          <source>Similarly, for structs, match with &lt;code&gt;..&lt;/code&gt; to avoid this error.</source>
          <target state="translated">同様に、構造体の場合は、 &lt;code&gt;..&lt;/code&gt; と照合してこのエラーを回避します。</target>
        </trans-unit>
        <trans-unit id="bb8e5654df6f95ffc903dbcd643004ef73553391" translate="yes" xml:space="preserve">
          <source>Similarly, here is an example of calling supertrait methods on trait objects.</source>
          <target state="translated">同様に、ここでは trait オブジェクトに対して supertrait メソッドを呼び出す例を示します。</target>
        </trans-unit>
        <trans-unit id="7053a5d2b2cc9ee0f9baea0c0b8570f148cfc9b7" translate="yes" xml:space="preserve">
          <source>Similarly, the &lt;code&gt;unwrap&lt;/code&gt; and &lt;code&gt;expect&lt;/code&gt; methods are very handy when prototyping, before you&amp;rsquo;re ready to decide how to handle errors. They leave clear markers in your code for when you&amp;rsquo;re ready to make your program more robust.</source>
          <target state="translated">同様に、 &lt;code&gt;unwrap&lt;/code&gt; メソッドと &lt;code&gt;expect&lt;/code&gt; メソッドは、プロトタイピング時に、エラーの処理方法を決定する前に非常に便利です。プログラムをより堅牢にする準備ができたときのために、コードに明確なマーカーを残します。</target>
        </trans-unit>
        <trans-unit id="909815a68ff4f68cdf616f89894d91c5fbf5f80e" translate="yes" xml:space="preserve">
          <source>Similarly, the second arm matches any point on the &lt;code&gt;y&lt;/code&gt; axis by specifying that the &lt;code&gt;x&lt;/code&gt; field matches if its value is &lt;code&gt;0&lt;/code&gt; and creates a variable &lt;code&gt;y&lt;/code&gt; for the value of the &lt;code&gt;y&lt;/code&gt; field. The third arm doesn&amp;rsquo;t specify any literals, so it matches any other &lt;code&gt;Point&lt;/code&gt; and creates variables for both the &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; fields.</source>
          <target state="translated">同様に、2番目のアームは、値が &lt;code&gt;0&lt;/code&gt; の場合に &lt;code&gt;x&lt;/code&gt; フィールドが一致することを指定することにより、 &lt;code&gt;y&lt;/code&gt; 軸上の任意の点と一致し、 &lt;code&gt;y&lt;/code&gt; フィールドの値に対して変数 &lt;code&gt;y&lt;/code&gt; を作成します。3番目のアームはリテラルを指定しないため、他の &lt;code&gt;Point&lt;/code&gt; と一致し、 &lt;code&gt;x&lt;/code&gt; フィールドと &lt;code&gt;y&lt;/code&gt; フィールドの両方に変数を作成します。</target>
        </trans-unit>
        <trans-unit id="5da9bf3bc246d43649d642f7bf04333c4a2ee655" translate="yes" xml:space="preserve">
          <source>Similarly, this book does not usually document the specifics of &lt;code&gt;rustc&lt;/code&gt; as a tool or of Cargo. &lt;code&gt;rustc&lt;/code&gt; has its own &lt;a href=&quot;https://doc.rust-lang.org/rustc/index.html&quot;&gt;book&lt;/a&gt;. Cargo has a &lt;a href=&quot;https://doc.rust-lang.org/cargo/index.html&quot;&gt;book&lt;/a&gt; that contains a &lt;a href=&quot;https://doc.rust-lang.org/cargo/reference/index.html&quot;&gt;reference&lt;/a&gt;. There are a few pages such as &lt;a href=&quot;linkage&quot;&gt;linkage&lt;/a&gt; that still describe how &lt;code&gt;rustc&lt;/code&gt; works.</source>
          <target state="translated">同様に、この本は通常、ツールとしての &lt;code&gt;rustc&lt;/code&gt; やCargoの詳細を文書化していません。 &lt;code&gt;rustc&lt;/code&gt; には独自の&lt;a href=&quot;https://doc.rust-lang.org/rustc/index.html&quot;&gt;本があり&lt;/a&gt;ます。貨物には、&lt;a href=&quot;https://doc.rust-lang.org/cargo/reference/index.html&quot;&gt;参考文献&lt;/a&gt;を含む&lt;a href=&quot;https://doc.rust-lang.org/cargo/index.html&quot;&gt;本&lt;/a&gt;があります。 &lt;code&gt;rustc&lt;/code&gt; がどのように機能するかを説明している&lt;a href=&quot;linkage&quot;&gt;リンケージ&lt;/a&gt;などのページがいくつかあります。</target>
        </trans-unit>
        <trans-unit id="2bd04063dfceec281f5e4d66a8b58a68fc14c509" translate="yes" xml:space="preserve">
          <source>Similarly, you can call builder methods after spawning a process and then spawn a new process with the modified settings.</source>
          <target state="translated">同様に、プロセスをスポーンした後にビルダーメソッドを呼び出し、変更した設定で新しいプロセスをスポーンすることができます。</target>
        </trans-unit>
        <trans-unit id="5c261bda61f3e96d861e1be54d36d7213b2aa3f1" translate="yes" xml:space="preserve">
          <source>Simple &lt;code&gt;static&lt;/code&gt;s</source>
          <target state="translated">シンプルな &lt;code&gt;static&lt;/code&gt; 秒</target>
        </trans-unit>
        <trans-unit id="6d9ea6b63528572b56d731de1e5520f39fc27921" translate="yes" xml:space="preserve">
          <source>Simple Paths</source>
          <target state="translated">シンプルなパス</target>
        </trans-unit>
        <trans-unit id="5c152b8373cb9fabbb581e0ae99f8530d663375b" translate="yes" xml:space="preserve">
          <source>Simple and safe type conversions that may fail in a controlled way under some circumstances. It is the reciprocal of &lt;a href=&quot;trait.tryinto&quot;&gt;&lt;code&gt;TryInto&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">状況によっては制御された方法で失敗する可能性がある単純で安全な型変換。これは、&lt;a href=&quot;trait.tryinto&quot;&gt; &lt;code&gt;TryInto&lt;/code&gt; &lt;/a&gt;の逆です。</target>
        </trans-unit>
        <trans-unit id="1eab99ad89fb7c87259173deb7be33f807b20b8a" translate="yes" xml:space="preserve">
          <source>Simple paths are used in &lt;a href=&quot;visibility-and-privacy&quot;&gt;visibility&lt;/a&gt; markers, &lt;a href=&quot;attributes&quot;&gt;attributes&lt;/a&gt;, &lt;a href=&quot;macros-by-example&quot;&gt;macros&lt;/a&gt;, and &lt;a href=&quot;items/use-declarations&quot;&gt;&lt;code&gt;use&lt;/code&gt;&lt;/a&gt; items. Examples:</source>
          <target state="translated">単純なパスは、&lt;a href=&quot;visibility-and-privacy&quot;&gt;可視性&lt;/a&gt;マーカー、&lt;a href=&quot;attributes&quot;&gt;属性&lt;/a&gt;、&lt;a href=&quot;macros-by-example&quot;&gt;マクロ&lt;/a&gt;、および&lt;a href=&quot;items/use-declarations&quot;&gt; &lt;code&gt;use&lt;/code&gt; &lt;/a&gt;アイテムで使用されます。例：</target>
        </trans-unit>
        <trans-unit id="d30ca8657f691b790156ae3e1eda88a721749a7f" translate="yes" xml:space="preserve">
          <source>Simple patterns:</source>
          <target state="translated">シンプルなパターン。</target>
        </trans-unit>
        <trans-unit id="f9e72abc4ccbeabab6d891f4fb04960cf410c43e" translate="yes" xml:space="preserve">
          <source>Simple usage</source>
          <target state="translated">簡単な使い方</target>
        </trans-unit>
        <trans-unit id="521b9cdb40aeee087c0baf82b63bf75e645545cd" translate="yes" xml:space="preserve">
          <source>Simple usage:</source>
          <target state="translated">シンプルな使い方。</target>
        </trans-unit>
        <trans-unit id="540febaa026e0c164b7b6c82435c094ba3f10d68" translate="yes" xml:space="preserve">
          <source>Simply put, a type &lt;code&gt;T&lt;/code&gt; implements &lt;code&gt;UnwindSafe&lt;/code&gt; if it cannot easily allow witnessing a broken invariant through the use of &lt;code&gt;catch_unwind&lt;/code&gt; (catching a panic). This trait is an auto trait, so it is automatically implemented for many types, and it is also structurally composed (e.g., a struct is unwind safe if all of its components are unwind safe).</source>
          <target state="translated">簡単に言うと、タイプ &lt;code&gt;T&lt;/code&gt; は、 &lt;code&gt;catch_unwind&lt;/code&gt; （パニックをキャッチ）を使用して壊れた不変条件を簡単に確認できない場合、 &lt;code&gt;UnwindSafe&lt;/code&gt; を実装します。このトレイトは自動トレイトなので、多くのタイプに対して自動的に実装され、構造的にも構成されます（たとえば、すべてのコンポーネントがアンワインドセーフの場合、構造体はアンワインドセーフです）。</target>
        </trans-unit>
        <trans-unit id="7c0fcb3a991c60765331a98cb1ff570fc3f074b7" translate="yes" xml:space="preserve">
          <source>Simulating a Slow Request in the Current Server Implementation</source>
          <target state="translated">現在のサーバー実装での遅いリクエストのシミュレーション</target>
        </trans-unit>
        <trans-unit id="12e2a47a5ff7fe1df209befb5642d47f09168633" translate="yes" xml:space="preserve">
          <source>Simultaneously binding a list of paths with a common prefix and their common parent module, using the &lt;a href=&quot;keyword.self&quot;&gt;&lt;code&gt;self&lt;/code&gt;&lt;/a&gt; keyword, such as &lt;code&gt;use a::b::{self, c, d::e};&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;use a::b::{self, c, d::e};&lt;/code&gt; などの&lt;a href=&quot;keyword.self&quot;&gt; &lt;code&gt;self&lt;/code&gt; &lt;/a&gt;キーワードを使用して、パスのリストを共通のプレフィックスとそれらの共通の親モジュールで同時にバインドします。</target>
        </trans-unit>
        <trans-unit id="1c95e390ae299ab0a4224d3333c97e6af7ae7eb5" translate="yes" xml:space="preserve">
          <source>Simultaneously binding a list of paths with a common prefix and their common parent module, using the &lt;code&gt;self&lt;/code&gt; keyword, such as &lt;code&gt;use a::b::{self, c, d::e};&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;use a::b::{self, c, d::e};&lt;/code&gt; などの &lt;code&gt;self&lt;/code&gt; キーワードを使用して、パスのリストに共通のプレフィックスとそれらの共通の親モジュールを同時にバインドします。</target>
        </trans-unit>
        <trans-unit id="bfb7386ffac3ad84f3f639dd029ef6518cae9303" translate="yes" xml:space="preserve">
          <source>Simultaneously binding a list of paths with a common prefix, using the glob-like brace syntax &lt;code&gt;use a::b::{c, d, e::f, g::h::i};&lt;/code&gt;</source>
          <target state="translated">globのようなブレース構文を &lt;code&gt;use a::b::{c, d, e::f, g::h::i};&lt;/code&gt; パスのリストに共通のプレフィックスを同時にバインドするには、a :: b :: {c、d、e :: f、g :: h :: i}を使用します。</target>
        </trans-unit>
        <trans-unit id="ddbdcfff59de6a5aac21219338aec3ba07afbdc5" translate="yes" xml:space="preserve">
          <source>Simultaneously computes the sine and cosine of the number, &lt;code&gt;x&lt;/code&gt;. Returns &lt;code&gt;(sin(x), cos(x))&lt;/code&gt;.</source>
          <target state="translated">数値 &lt;code&gt;x&lt;/code&gt; の正弦と余弦を同時に計算します。 &lt;code&gt;(sin(x), cos(x))&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="8c4638b0d965c7d35475023eaa850cf6607c84bf" translate="yes" xml:space="preserve">
          <source>Simultaneously waits for the child to exit and collect all remaining output on the stdout/stderr handles, returning an &lt;code&gt;Output&lt;/code&gt; instance.</source>
          <target state="translated">子が終了するのを同時に待機し、stdout / stderrハンドルの残りのすべての出力を収集して、 &lt;code&gt;Output&lt;/code&gt; インスタンスを返します。</target>
        </trans-unit>
        <trans-unit id="b580c75acd8a59ac52d76a587525a6d1f2ad2173" translate="yes" xml:space="preserve">
          <source>Since &lt;a href=&quot;../cell/struct.refcell&quot;&gt;&lt;code&gt;RefCell&lt;/code&gt;&lt;/a&gt; enforces the borrow rules at runtime, &lt;code&gt;drop&lt;/code&gt; can release a &lt;a href=&quot;../cell/struct.refcell&quot;&gt;&lt;code&gt;RefCell&lt;/code&gt;&lt;/a&gt; borrow:</source>
          <target state="translated">&lt;a href=&quot;../cell/struct.refcell&quot;&gt; &lt;code&gt;RefCell&lt;/code&gt; &lt;/a&gt;は実行時に借用規則を適用するため、 &lt;code&gt;drop&lt;/code&gt; は&lt;a href=&quot;../cell/struct.refcell&quot;&gt; &lt;code&gt;RefCell&lt;/code&gt; &lt;/a&gt;借用を解放できます。</target>
        </trans-unit>
        <trans-unit id="1c6dcce02f4add8169e3d2f77fc05356bfe10cc0" translate="yes" xml:space="preserve">
          <source>Since &lt;a href=&quot;trait.fnonce&quot;&gt;&lt;code&gt;FnOnce&lt;/code&gt;&lt;/a&gt; is a supertrait of &lt;code&gt;FnMut&lt;/code&gt;, any instance of &lt;code&gt;FnMut&lt;/code&gt; can be used where a &lt;a href=&quot;trait.fnonce&quot;&gt;&lt;code&gt;FnOnce&lt;/code&gt;&lt;/a&gt; is expected, and since &lt;a href=&quot;trait.fn&quot;&gt;&lt;code&gt;Fn&lt;/code&gt;&lt;/a&gt; is a subtrait of &lt;code&gt;FnMut&lt;/code&gt;, any instance of &lt;a href=&quot;trait.fn&quot;&gt;&lt;code&gt;Fn&lt;/code&gt;&lt;/a&gt; can be used where &lt;code&gt;FnMut&lt;/code&gt; is expected.</source>
          <target state="translated">以来&lt;a href=&quot;trait.fnonce&quot;&gt; &lt;code&gt;FnOnce&lt;/code&gt; で&lt;/a&gt;のsupertraitある &lt;code&gt;FnMut&lt;/code&gt; 、任意のインスタンス &lt;code&gt;FnMut&lt;/code&gt; をどこに使用することができる&lt;a href=&quot;trait.fnonce&quot;&gt; &lt;code&gt;FnOnce&lt;/code&gt; が&lt;/a&gt;期待され、そしてため&lt;a href=&quot;trait.fn&quot;&gt; &lt;code&gt;Fn&lt;/code&gt; は&lt;/a&gt;のsubtraitある &lt;code&gt;FnMut&lt;/code&gt; 、任意のインスタンス&lt;a href=&quot;trait.fn&quot;&gt; &lt;code&gt;Fn&lt;/code&gt; が&lt;/a&gt;ここで使用することができる &lt;code&gt;FnMut&lt;/code&gt; が期待されます。</target>
        </trans-unit>
        <trans-unit id="e1e9b1108b6f1ce7052e62e8e9e1aa72da81c98d" translate="yes" xml:space="preserve">
          <source>Since &lt;a href=&quot;trait.intoiterator#tymethod.into_iter&quot;&gt;&lt;code&gt;into_iter()&lt;/code&gt;&lt;/a&gt; takes &lt;code&gt;self&lt;/code&gt; by value, using a &lt;code&gt;for&lt;/code&gt; loop to iterate over a collection consumes that collection. Often, you may want to iterate over a collection without consuming it. Many collections offer methods that provide iterators over references, conventionally called &lt;code&gt;iter()&lt;/code&gt; and &lt;code&gt;iter_mut()&lt;/code&gt; respectively:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c26b94cb5b32aac4f4b274599dd1a658b6761ca7" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;!&lt;/code&gt; has no values, it has no default value either. It's true that we could write an &lt;code&gt;impl&lt;/code&gt; for this which simply panics, but the same is true for any type (we could &lt;code&gt;impl Default&lt;/code&gt; for (eg.) &lt;a href=&quot;fs/struct.file&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt; by just making &lt;a href=&quot;default/trait.default#tymethod.default&quot;&gt;&lt;code&gt;default()&lt;/code&gt;&lt;/a&gt; panic.)</source>
          <target state="translated">以来 &lt;code&gt;!&lt;/code&gt; 値はなく、デフォルト値もありません。単純にパニックするこのための &lt;code&gt;impl&lt;/code&gt; を書くことができるのは事実ですが、同じことがすべてのタイプに当てはまり&lt;a href=&quot;default/trait.default#tymethod.default&quot;&gt; &lt;code&gt;default()&lt;/code&gt; &lt;/a&gt;パニックするだけで、（たとえば）&lt;a href=&quot;fs/struct.file&quot;&gt; &lt;code&gt;File&lt;/code&gt; &lt;/a&gt; &lt;code&gt;impl Default&lt;/code&gt; を実装できます）。</target>
        </trans-unit>
        <trans-unit id="6538e8c17f8ab9a15a41a6c2b62591b4db139233" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;'static&lt;/code&gt; outlives the lifetime parameter &lt;code&gt;'a&lt;/code&gt;, &lt;code&gt;&amp;amp;'static str&lt;/code&gt; is a subtype of &lt;code&gt;&amp;amp;'a str&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;'static&lt;/code&gt; は存続期間パラメーター &lt;code&gt;'a&lt;/code&gt; 超えるので、 &lt;code&gt;&amp;amp;'static str&lt;/code&gt; は &lt;code&gt;&amp;amp;'a str&lt;/code&gt; サブタイプです。</target>
        </trans-unit>
        <trans-unit id="54da8d1cecd13aae6b43892c91292b5d0b233e7f" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;?&lt;/code&gt; represents at most one occurrence, it cannot be used with a separator.</source>
          <target state="translated">以来 &lt;code&gt;?&lt;/code&gt; 最大で1つのオカレンスを表し、セパレータと一緒に使用することはできません。</target>
        </trans-unit>
        <trans-unit id="c9806b12ce1093b7dae486d7b9b428620b9d39e1" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;Clone&lt;/code&gt; is more general than &lt;a href=&quot;../marker/trait.copy&quot;&gt;&lt;code&gt;Copy&lt;/code&gt;&lt;/a&gt;, you can automatically make anything &lt;a href=&quot;../marker/trait.copy&quot;&gt;&lt;code&gt;Copy&lt;/code&gt;&lt;/a&gt; be &lt;code&gt;Clone&lt;/code&gt; as well.</source>
          <target state="translated">以来 &lt;code&gt;Clone&lt;/code&gt; より一般的である&lt;a href=&quot;../marker/trait.copy&quot;&gt; &lt;code&gt;Copy&lt;/code&gt; &lt;/a&gt;、自動的に何でも作ることができます&lt;a href=&quot;../marker/trait.copy&quot;&gt; &lt;code&gt;Copy&lt;/code&gt; &lt;/a&gt;可能 &lt;code&gt;Clone&lt;/code&gt; にも。</target>
        </trans-unit>
        <trans-unit id="8e572576a02e098cf819824ba101e184709a2232" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;MyStruct&lt;/code&gt; is a type that is not marked &lt;code&gt;Copy&lt;/code&gt;, the data gets moved out of &lt;code&gt;x&lt;/code&gt; when we set &lt;code&gt;y&lt;/code&gt;. This is fundamental to Rust's ownership system: outside of workarounds like &lt;code&gt;Rc&lt;/code&gt;, a value cannot be owned by more than one variable.</source>
          <target state="translated">&lt;code&gt;MyStruct&lt;/code&gt; は &lt;code&gt;Copy&lt;/code&gt; とマークされていないタイプなので、 &lt;code&gt;y&lt;/code&gt; を設定すると、データは &lt;code&gt;x&lt;/code&gt; から移動されます。これは、錆の所有権制度の基本である：のような回避策の外 &lt;code&gt;Rc&lt;/code&gt; は、値が複数の変数が所有することはできません。</target>
        </trans-unit>
        <trans-unit id="f01318a26a4f8d5a0b3d02e51cc97912faf805a6" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;VecDeque&lt;/code&gt; is a ring buffer, its elements are not necessarily contiguous in memory. If you want to access the elements as a single slice, such as for efficient sorting, you can use &lt;a href=&quot;../struct.vecdeque#method.make_contiguous&quot;&gt;&lt;code&gt;make_contiguous&lt;/code&gt;&lt;/a&gt;. It rotates the &lt;code&gt;VecDeque&lt;/code&gt; so that its elements do not wrap, and returns a mutable slice to the now-contiguous element sequence.</source>
          <target state="translated">以来 &lt;code&gt;VecDeque&lt;/code&gt; はリングバッファであり、その要素は、メモリに必ずしも連続していません。効率的な並べ替えなどのために、要素に単一のスライスとしてアクセスする場合は、&lt;a href=&quot;../struct.vecdeque#method.make_contiguous&quot;&gt; &lt;code&gt;make_contiguous&lt;/code&gt; &lt;/a&gt;を使用できます。要素がラップしないように &lt;code&gt;VecDeque&lt;/code&gt; を回転し、可変スライスを現在隣接している要素シーケンスに戻します。</target>
        </trans-unit>
        <trans-unit id="f28e716b3437cb79c3640f168f027915fd73a75c" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;VecDeque&lt;/code&gt; is a ring buffer, its elements are not necessarily contiguous in memory. If you want to access the elements as a single slice, such as for efficient sorting, you can use &lt;a href=&quot;struct.vecdeque#method.make_contiguous&quot;&gt;&lt;code&gt;make_contiguous&lt;/code&gt;&lt;/a&gt;. It rotates the &lt;code&gt;VecDeque&lt;/code&gt; so that its elements do not wrap, and returns a mutable slice to the now-contiguous element sequence.</source>
          <target state="translated">以来 &lt;code&gt;VecDeque&lt;/code&gt; はリングバッファであり、その要素は、メモリに必ずしも連続していません。効率的な並べ替えなどのために、要素に単一のスライスとしてアクセスする場合は、&lt;a href=&quot;struct.vecdeque#method.make_contiguous&quot;&gt; &lt;code&gt;make_contiguous&lt;/code&gt; &lt;/a&gt;を使用できます。要素がラップしないように &lt;code&gt;VecDeque&lt;/code&gt; を回転し、可変スライスを現在隣接している要素シーケンスに戻します。</target>
        </trans-unit>
        <trans-unit id="496588742528c660f3dc424fab673464dbf01876" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;consume()&lt;/code&gt; is meant to be used with &lt;a href=&quot;#tymethod.fill_buf&quot;&gt;&lt;code&gt;fill_buf&lt;/code&gt;&lt;/a&gt;, that method's example includes an example of &lt;code&gt;consume()&lt;/code&gt;.</source>
          <target state="translated">ので &lt;code&gt;consume()&lt;/code&gt; して使用されることを意味する&lt;a href=&quot;#tymethod.fill_buf&quot;&gt; &lt;code&gt;fill_buf&lt;/code&gt; &lt;/a&gt;、その方法の一例は、一例含む &lt;code&gt;consume()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e1d5b75fc592741c0d1be15eaf95352a204e467d" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;consume()&lt;/code&gt; is meant to be used with &lt;a href=&quot;trait.bufread#tymethod.fill_buf&quot;&gt;&lt;code&gt;fill_buf&lt;/code&gt;&lt;/a&gt;, that method's example includes an example of &lt;code&gt;consume()&lt;/code&gt;.</source>
          <target state="translated">ので &lt;code&gt;consume()&lt;/code&gt; して使用されることを意味する&lt;a href=&quot;trait.bufread#tymethod.fill_buf&quot;&gt; &lt;code&gt;fill_buf&lt;/code&gt; &lt;/a&gt;、その方法の一例は、一例含む &lt;code&gt;consume()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1c5531c624a4d1e39bfd0832114ff1d071877ab0" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;return;&lt;/code&gt; is just like &lt;code&gt;return ();&lt;/code&gt;, there is a mismatch between the function's return type and the value being returned.</source>
          <target state="translated">&lt;code&gt;return;&lt;/code&gt; 以来; ちょうど &lt;code&gt;return ();&lt;/code&gt; 、関数の戻り値の型と返される値の間に不一致があります。</target>
        </trans-unit>
        <trans-unit id="7a98cfe045701dbcce3babcaa95e649ec3bd08fc" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;str&lt;/code&gt; is a &lt;a href=&quot;../dynamically-sized-types&quot;&gt;dynamically sized type&lt;/a&gt;, it can only be instantiated through a pointer type, such as &lt;code&gt;&amp;amp;str&lt;/code&gt;.</source>
          <target state="translated">以来 &lt;code&gt;str&lt;/code&gt; がある&lt;a href=&quot;../dynamically-sized-types&quot;&gt;動的にサイズタイプ&lt;/a&gt;、それだけのような、ポインタ型を介してインスタンス化することができる &lt;code&gt;&amp;amp;str&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="eb8389e693f4fb90eb8f831b714ec1477b38653c" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;unsafe fn&lt;/code&gt; and &lt;code&gt;unsafe trait&lt;/code&gt; indicate that there is a safety contract that the compiler cannot enforce, documenting it is important. The standard library has many examples of this, like the following which is an extract from &lt;a href=&quot;vec/struct.vec#method.set_len&quot;&gt;&lt;code&gt;Vec::set_len&lt;/code&gt;&lt;/a&gt;. The &lt;code&gt;# Safety&lt;/code&gt; section explains the contract that must be fulfilled to safely call the function.</source>
          <target state="translated">以来 &lt;code&gt;unsafe fn&lt;/code&gt; と &lt;code&gt;unsafe trait&lt;/code&gt; 、コンパイラが強制することができないという安全性の契約があることを示し、それを文書化することが重要です。標準ライブラリには、&lt;a href=&quot;vec/struct.vec#method.set_len&quot;&gt; &lt;code&gt;Vec::set_len&lt;/code&gt; &lt;/a&gt;からの抜粋である次のような多くの例があります。 &lt;code&gt;# Safety&lt;/code&gt; セクションでは、安全機能を呼び出すために満たされなければならない契約について説明します。</target>
        </trans-unit>
        <trans-unit id="106e002553ec8f223d69f89942bc4486d15f8e50" translate="yes" xml:space="preserve">
          <source>Since Rust itself has no notion of immovable types, and considers moves (e.g. through assignment or &lt;a href=&quot;../mem/fn.replace&quot;&gt;&lt;code&gt;mem::replace&lt;/code&gt;&lt;/a&gt;) to always be safe, this trait cannot prevent types from moving by itself.</source>
          <target state="translated">Rust自体は不動の型の概念を持たず、移動（たとえば、割り当てまたは&lt;a href=&quot;../mem/fn.replace&quot;&gt; &lt;code&gt;mem::replace&lt;/code&gt; &lt;/a&gt;）は常に安全であると見なしているため、この特性は型がそれ自体で移動するのを防ぐことはできません。</target>
        </trans-unit>
        <trans-unit id="1f285e86fcd5f303d057612bb02278ca3219d62a" translate="yes" xml:space="preserve">
          <source>Since a &lt;code&gt;Weak&lt;/code&gt; reference does not count towards ownership, it will not prevent the inner value from being dropped, and &lt;code&gt;Weak&lt;/code&gt; itself makes no guarantees about the value still being present and may return &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; when &lt;a href=&quot;struct.weak#method.upgrade&quot;&gt;&lt;code&gt;upgrade&lt;/code&gt;&lt;/a&gt;d.</source>
          <target state="translated">以来 &lt;code&gt;Weak&lt;/code&gt; 参照は所有権にはカウントされません、それが削除されてから内部値を防ぐことはできません、と &lt;code&gt;Weak&lt;/code&gt; 自体が価値まだいる存在について保証しませんし、返さないことがあり&lt;a href=&quot;../option/enum.option#variant.None&quot;&gt; &lt;code&gt;None&lt;/code&gt; を&lt;/a&gt;するとき&lt;a href=&quot;struct.weak#method.upgrade&quot;&gt; &lt;code&gt;upgrade&lt;/code&gt; &lt;/a&gt; D。</target>
        </trans-unit>
        <trans-unit id="670c8d8450bb33a1f925b38f371b3ea24d1a7174" translate="yes" xml:space="preserve">
          <source>Since a &lt;code&gt;Weak&lt;/code&gt; reference does not count towards ownership, it will not prevent the value stored in the allocation from being dropped, and &lt;code&gt;Weak&lt;/code&gt; itself makes no guarantees about the value still being present. Thus it may return &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; when &lt;a href=&quot;struct.weak#method.upgrade&quot;&gt;&lt;code&gt;upgrade&lt;/code&gt;&lt;/a&gt;d. Note however that a &lt;code&gt;Weak&lt;/code&gt; reference &lt;em&gt;does&lt;/em&gt; prevent the allocation itself (the backing store) from being deallocated.</source>
          <target state="translated">以来 &lt;code&gt;Weak&lt;/code&gt; 参照は所有権にはカウントされません、それは防ぐことはできません削除されているから配分に格納された値、および &lt;code&gt;Weak&lt;/code&gt; 自体はまだ存在している価値について保証しません。したがって、&lt;a href=&quot;struct.weak#method.upgrade&quot;&gt; &lt;code&gt;upgrade&lt;/code&gt; &lt;/a&gt;時に&lt;a href=&quot;../option/enum.option#variant.None&quot;&gt; &lt;code&gt;None&lt;/code&gt; を&lt;/a&gt;返す場合があります。ただし、 &lt;code&gt;Weak&lt;/code&gt; 参照&lt;em&gt;は&lt;/em&gt;、割り当て自体（バッキングストア）の割り当て解除を妨げることに注意してください。</target>
        </trans-unit>
        <trans-unit id="0b5e80c5d1baff33e622575e429a6609253a9875" translate="yes" xml:space="preserve">
          <source>Since a trait object can contain references, the lifetimes of those references need to be expressed as part of the trait object. This lifetime is written as &lt;code&gt;Trait + 'a&lt;/code&gt;. There are &lt;a href=&quot;../lifetime-elision#default-trait-object-lifetimes&quot;&gt;defaults&lt;/a&gt; that allow this lifetime to usually be inferred with a sensible choice.</source>
          <target state="translated">特性オブジェクトには参照を含めることができるため、それらの参照の存続期間は特性オブジェクトの一部として表現する必要があります。この存続期間は、 &lt;code&gt;Trait + 'a&lt;/code&gt; として記述されます。通常、この有効期間を賢明な選択で推論できる&lt;a href=&quot;../lifetime-elision#default-trait-object-lifetimes&quot;&gt;デフォルト&lt;/a&gt;があります。</target>
        </trans-unit>
        <trans-unit id="2b1463c8dcb680af22f8df7f2ab74c2c8b9a5142" translate="yes" xml:space="preserve">
          <source>Since an auto trait is implemented on all existing types, adding a super trait would filter out a lot of those types. In the current example, almost none of all the existing types could implement &lt;code&gt;Bound&lt;/code&gt; because very few of them have the &lt;code&gt;Copy&lt;/code&gt; trait.</source>
          <target state="translated">自動トレイトは既存のすべてのタイプに実装されているため、スーパートレイトを追加すると、それらのタイプの多くが除外されます。現在の例では、 &lt;code&gt;Copy&lt;/code&gt; トレイトを持っているタイプはほとんどないため、既存のタイプのほとんどが &lt;code&gt;Bound&lt;/code&gt; を実装できませんでした。</target>
        </trans-unit>
        <trans-unit id="b65d93863acfe950e5cf2f8ad1f543c418cf7cb6" translate="yes" xml:space="preserve">
          <source>Since an auto trait is implemented on all existing types, the compiler would not be able to infer the types of the trait's generic parameters.</source>
          <target state="translated">自動形質は既存のすべての型に実装されているため、コンパイラは形質の一般的なパラメータの型を推測することができません。</target>
        </trans-unit>
        <trans-unit id="20e98f0e177bac52b1c7e34f6c53603646a0456a" translate="yes" xml:space="preserve">
          <source>Since both &lt;a href=&quot;trait.fn&quot;&gt;&lt;code&gt;Fn&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;trait.fnmut&quot;&gt;&lt;code&gt;FnMut&lt;/code&gt;&lt;/a&gt; are subtraits of &lt;code&gt;FnOnce&lt;/code&gt;, any instance of &lt;a href=&quot;trait.fn&quot;&gt;&lt;code&gt;Fn&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;trait.fnmut&quot;&gt;&lt;code&gt;FnMut&lt;/code&gt;&lt;/a&gt; can be used where a &lt;code&gt;FnOnce&lt;/code&gt; is expected.</source>
          <target state="translated">&lt;a href=&quot;trait.fn&quot;&gt; &lt;code&gt;Fn&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;trait.fnmut&quot;&gt; &lt;code&gt;FnMut&lt;/code&gt; &lt;/a&gt;は両方ともFnOnceの &lt;code&gt;FnOnce&lt;/code&gt; であるため、&lt;a href=&quot;trait.fn&quot;&gt; &lt;code&gt;Fn&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;trait.fnmut&quot;&gt; &lt;code&gt;FnMut&lt;/code&gt; の&lt;/a&gt;インスタンスは、 &lt;code&gt;FnOnce&lt;/code&gt; が期待される場所で使用できます。</target>
        </trans-unit>
        <trans-unit id="3d51e0cb7393cc23f814f7df339e871875cf9298" translate="yes" xml:space="preserve">
          <source>Since both &lt;a href=&quot;trait.fnmut&quot;&gt;&lt;code&gt;FnMut&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;trait.fnonce&quot;&gt;&lt;code&gt;FnOnce&lt;/code&gt;&lt;/a&gt; are supertraits of &lt;code&gt;Fn&lt;/code&gt;, any instance of &lt;code&gt;Fn&lt;/code&gt; can be used as a parameter where a &lt;a href=&quot;trait.fnmut&quot;&gt;&lt;code&gt;FnMut&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;trait.fnonce&quot;&gt;&lt;code&gt;FnOnce&lt;/code&gt;&lt;/a&gt; is expected.</source>
          <target state="translated">両方のため&lt;a href=&quot;trait.fnmut&quot;&gt; &lt;code&gt;FnMut&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;trait.fnonce&quot;&gt; &lt;code&gt;FnOnce&lt;/code&gt; で&lt;/a&gt;のsupertraitsある &lt;code&gt;Fn&lt;/code&gt; は、任意のインスタンス &lt;code&gt;Fn&lt;/code&gt; がパラメータとして使用することができる&lt;a href=&quot;trait.fnmut&quot;&gt; &lt;code&gt;FnMut&lt;/code&gt; &lt;/a&gt;又は&lt;a href=&quot;trait.fnonce&quot;&gt; &lt;code&gt;FnOnce&lt;/code&gt; が&lt;/a&gt;期待されます。</target>
        </trans-unit>
        <trans-unit id="d32e7ee7bdef075cb130707fe0d5e03c56eca7e3" translate="yes" xml:space="preserve">
          <source>Since our new thread runs in parallel, the stack frame containing &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; may well have disappeared by the time we try to use them. Even if we call &lt;code&gt;thr.join()&lt;/code&gt; within foo (which blocks until &lt;code&gt;thr&lt;/code&gt; has completed, ensuring the stack frame won't disappear), we will not succeed: the compiler cannot prove that this behavior is safe, and so won't let us do it.</source>
          <target state="translated">新しいスレッドは並行して実行されるため、 &lt;code&gt;x&lt;/code&gt; と &lt;code&gt;y&lt;/code&gt; を含むスタックフレームは、それらを使用しようとするまでに消えている可能性があります。foo内で &lt;code&gt;thr.join()&lt;/code&gt; を呼び出しても（ &lt;code&gt;thr&lt;/code&gt; が完了するまでブロックし、スタックフレームが消えないようにします）、成功しません。コンパイラはこの動作が安全であることを証明できないため、許可しません。私たちはそれをします。</target>
        </trans-unit>
        <trans-unit id="551e6652d59fd9a852edd6ce421865877e505046" translate="yes" xml:space="preserve">
          <source>Since our new thread runs in parallel, the stack frame containing &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; may well have disappeared by the time we try to use them. Even if we call &lt;code&gt;thr.join()&lt;/code&gt; within foo (which blocks until &lt;code&gt;thr&lt;/code&gt; has completed, ensuring the stack frame won't disappear), we will not succeed: the compiler cannot prove that this behaviour is safe, and so won't let us do it.</source>
          <target state="translated">新しいスレッドは並行して実行されるため、 &lt;code&gt;x&lt;/code&gt; と &lt;code&gt;y&lt;/code&gt; を含むスタックフレームは、それらを使用しようとするときには消えている可能性があります。foo内で &lt;code&gt;thr.join()&lt;/code&gt; を呼び出しても（ &lt;code&gt;thr&lt;/code&gt; が完了するまでブロックされ、スタックフレームが消えないことを保証します）、成功しません。コンパイラはこの動作が安全であることを証明できないため、許可しません。私たちがやります。</target>
        </trans-unit>
        <trans-unit id="095fdf5547d3660f78803933a7399a71c65c3ba1" translate="yes" xml:space="preserve">
          <source>Since some characters can expand into multiple characters when changing the case, this function returns a &lt;a href=&quot;string/struct.string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; instead of modifying the parameter in-place.</source>
          <target state="translated">大文字と小文字を変更すると、一部の文字が複数の文字に展開される可能性があるため、この関数はパラメーターをインプレースで変更する代わりに&lt;a href=&quot;string/struct.string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;を返します。</target>
        </trans-unit>
        <trans-unit id="4bf3f68229cf3a628e7e55b26edce417454ecee0" translate="yes" xml:space="preserve">
          <source>Since some characters can expand into multiple characters when changing the case, this function returns a &lt;a href=&quot;struct.string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; instead of modifying the parameter in-place.</source>
          <target state="translated">一部の文字は大文字と小文字を変更すると複数の文字に展開される可能性があるため、この関数はパラメーターをインプレースで変更する代わりに&lt;a href=&quot;struct.string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;を返します。</target>
        </trans-unit>
        <trans-unit id="996ff67fa6512e8ea590630f1af9075b393fc7b8" translate="yes" xml:space="preserve">
          <source>Since the &lt;a href=&quot;result/enum.result#variant.Err&quot;&gt;&lt;code&gt;Err&lt;/code&gt;&lt;/a&gt; variant contains a &lt;code&gt;!&lt;/code&gt;, it can never occur. If the &lt;code&gt;exhaustive_patterns&lt;/code&gt; feature is present this means we can exhaustively match on &lt;a href=&quot;result/enum.result&quot;&gt;&lt;code&gt;Result&amp;lt;T, !&amp;gt;&lt;/code&gt;&lt;/a&gt; by just taking the &lt;a href=&quot;result/enum.result#variant.Ok&quot;&gt;&lt;code&gt;Ok&lt;/code&gt;&lt;/a&gt; variant. This illustrates another behaviour of &lt;code&gt;!&lt;/code&gt; - it can be used to &quot;delete&quot; certain enum variants from generic types like &lt;code&gt;Result&lt;/code&gt;.</source>
          <target state="translated">以来&lt;a href=&quot;result/enum.result#variant.Err&quot;&gt; &lt;code&gt;Err&lt;/code&gt; &lt;/a&gt;バリアントが含まれています &lt;code&gt;!&lt;/code&gt; 、発生することはありません。 &lt;code&gt;exhaustive_patterns&lt;/code&gt; 機能が存在する場合、これは、&lt;a href=&quot;result/enum.result#variant.Ok&quot;&gt; &lt;code&gt;Ok&lt;/code&gt; &lt;/a&gt;バリアントを取得するだけで&lt;a href=&quot;result/enum.result&quot;&gt; &lt;code&gt;Result&amp;lt;T, !&amp;gt;&lt;/code&gt; &lt;/a&gt;徹底的に照合できることを意味します。これは、 &lt;code&gt;!&lt;/code&gt; の別の動作を示しています。 - 「削除」特定の列挙型のような一般的なタイプから変異体を使用することができます &lt;code&gt;Result&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="02dc928dc96c27acf83c332b2f0b99c175919f2e" translate="yes" xml:space="preserve">
          <source>Since the argument to &lt;code&gt;chain()&lt;/code&gt; uses &lt;a href=&quot;trait.intoiterator&quot;&gt;&lt;code&gt;IntoIterator&lt;/code&gt;&lt;/a&gt;, we can pass anything that can be converted into an &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;, not just an &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt; itself. For example, slices (&lt;code&gt;&amp;amp;[T]&lt;/code&gt;) implement &lt;a href=&quot;trait.intoiterator&quot;&gt;&lt;code&gt;IntoIterator&lt;/code&gt;&lt;/a&gt;, and so can be passed to &lt;code&gt;chain()&lt;/code&gt; directly:</source>
          <target state="translated">引数ので、 &lt;code&gt;chain()&lt;/code&gt; 使用しています&lt;a href=&quot;trait.intoiterator&quot;&gt; &lt;code&gt;IntoIterator&lt;/code&gt; を&lt;/a&gt;、私たちは、に変換することができます何でも渡すことができます&lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt;だけではなく、&lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt;自身を。たとえば、スライス（ &lt;code&gt;&amp;amp;[T]&lt;/code&gt; ）は&lt;a href=&quot;trait.intoiterator&quot;&gt; &lt;code&gt;IntoIterator&lt;/code&gt; を&lt;/a&gt;実装しているため、 &lt;code&gt;chain()&lt;/code&gt; に直接渡すことができます。</target>
        </trans-unit>
        <trans-unit id="a895265506313c461054e22d44ad004a5290527c" translate="yes" xml:space="preserve">
          <source>Since the argument to &lt;code&gt;zip()&lt;/code&gt; uses &lt;a href=&quot;trait.intoiterator&quot;&gt;&lt;code&gt;IntoIterator&lt;/code&gt;&lt;/a&gt;, we can pass anything that can be converted into an &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;, not just an &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt; itself. For example, slices (&lt;code&gt;&amp;amp;[T]&lt;/code&gt;) implement &lt;a href=&quot;trait.intoiterator&quot;&gt;&lt;code&gt;IntoIterator&lt;/code&gt;&lt;/a&gt;, and so can be passed to &lt;code&gt;zip()&lt;/code&gt; directly:</source>
          <target state="translated">&lt;code&gt;zip()&lt;/code&gt; への引数は&lt;a href=&quot;trait.intoiterator&quot;&gt; &lt;code&gt;IntoIterator&lt;/code&gt; &lt;/a&gt;を使用するため、&lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt;自体だけでなく、&lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt;に変換できるすべてのものを渡すことができます。たとえば、スライス（ &lt;code&gt;&amp;amp;[T]&lt;/code&gt; ）は&lt;a href=&quot;trait.intoiterator&quot;&gt; &lt;code&gt;IntoIterator&lt;/code&gt; を&lt;/a&gt;実装しているため、直接 &lt;code&gt;zip()&lt;/code&gt; に渡すことができます。</target>
        </trans-unit>
        <trans-unit id="d74a16dbce9fae58c39cce1fd66b21ace599f36b" translate="yes" xml:space="preserve">
          <source>Since the enum is already public, adding &lt;code&gt;pub&lt;/code&gt; on one its elements is unnecessary. Example:</source>
          <target state="translated">列挙型はすでに公開されているため、その要素の1つに &lt;code&gt;pub&lt;/code&gt; を追加する必要はありません。例：</target>
        </trans-unit>
        <trans-unit id="16af503f8386670f482deb401cd8105b1c60875c" translate="yes" xml:space="preserve">
          <source>Since the last element is zero, it would underflow. Thus, the resulting value is &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">最後の要素はゼロなので、アンダーフローします。したがって、結果の値は &lt;code&gt;None&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="78c2449ef951719357023f624a45507fe4592e5f" translate="yes" xml:space="preserve">
          <source>Since the third element caused an underflow, no further elements were taken, so the final value of &lt;code&gt;shared&lt;/code&gt; is 6 (= &lt;code&gt;3 + 2 + 1&lt;/code&gt;), not 16.</source>
          <target state="translated">3番目の要素がアンダーフローを引き起こしたため、それ以上の要素は取得されなかったため、 &lt;code&gt;shared&lt;/code&gt; の最終的な値は16ではなく6（= &lt;code&gt;3 + 2 + 1&lt;/code&gt; ）です。</target>
        </trans-unit>
        <trans-unit id="9ae4b12cefea6c705a428595fef84ba94949d6b8" translate="yes" xml:space="preserve">
          <source>Since this call borrows the &lt;code&gt;Mutex&lt;/code&gt; mutably, no actual locking needs to take place -- the mutable borrow statically guarantees no locks exist.</source>
          <target state="translated">この呼び出しは &lt;code&gt;Mutex&lt;/code&gt; ミュータブルに借用するため、実際のロックを行う必要はありません。可変の借用は、ロックが存在しないことを静的に保証します。</target>
        </trans-unit>
        <trans-unit id="500751d314a9f5868d6621b41878f53a69f9d880" translate="yes" xml:space="preserve">
          <source>Since this call borrows the &lt;code&gt;RwLock&lt;/code&gt; mutably, no actual locking needs to take place -- the mutable borrow statically guarantees no locks exist.</source>
          <target state="translated">この呼び出しは &lt;code&gt;RwLock&lt;/code&gt; をミュータブルに借用するため、実際のロックを行う必要はありません-可変ボローは、ロックが存在しないことを静的に保証します。</target>
        </trans-unit>
        <trans-unit id="2c78daff2631b4a84550cc0108989855d06f6a22" translate="yes" xml:space="preserve">
          <source>Since this compares pointers it means that &lt;code&gt;Weak::new()&lt;/code&gt; will equal each other, even though they don't point to any allocation.</source>
          <target state="translated">これはポインタを比較するので、 &lt;code&gt;Weak::new()&lt;/code&gt; は、割り当てを指していない場合でも、互いに等しくなることを意味します。</target>
        </trans-unit>
        <trans-unit id="8a08fbb9b9d229eef360d5f515027ef774d609b9" translate="yes" xml:space="preserve">
          <source>Since this compares pointers it means that &lt;code&gt;Weak::new()&lt;/code&gt; will equal each other, even though they don't point to any value.</source>
          <target state="translated">これはポインタを比較するので、たとえ値を指さなくても、 &lt;code&gt;Weak::new()&lt;/code&gt; は互いに等しいことを意味します。</target>
        </trans-unit>
        <trans-unit id="cf2f4735d740fd043cfc0f0f6661429a49ef1b73" translate="yes" xml:space="preserve">
          <source>Since this enum has no variant, a value of this type can never actually exist. This can be useful for generic APIs that use &lt;a href=&quot;../result/enum.result&quot;&gt;&lt;code&gt;Result&lt;/code&gt;&lt;/a&gt; and parameterize the error type, to indicate that the result is always &lt;a href=&quot;../result/enum.result#variant.Ok&quot;&gt;&lt;code&gt;Ok&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この列挙型にはバリアントがないため、この型の値が実際に存在することはありません。これは、&lt;a href=&quot;../result/enum.result&quot;&gt; &lt;code&gt;Result&lt;/code&gt; &lt;/a&gt;を使用してエラータイプをパラメーター化し、結果が常に&lt;a href=&quot;../result/enum.result#variant.Ok&quot;&gt; &lt;code&gt;Ok&lt;/code&gt; &lt;/a&gt;であることを示す汎用APIに役立ちます。</target>
        </trans-unit>
        <trans-unit id="76b5e2d69255c4231c83c94903ea5b7b37a4db43" translate="yes" xml:space="preserve">
          <source>Since type parameters are evaluated in-order, you may be able to fix this issue by doing:</source>
          <target state="translated">型のパラメータは順番に評価されるので、この問題を修正するには、以下のようにするとよいでしょう。</target>
        </trans-unit>
        <trans-unit id="586ab9e36a2a610444fcbcb9e44aed06a4a34545" translate="yes" xml:space="preserve">
          <source>Since union fields share common storage, gaining write access to one field of a union can give write access to all its remaining fields. Borrow checking rules have to be adjusted to account for this fact. As a result, if one field of a union is borrowed, all its remaining fields are borrowed as well for the same lifetime.</source>
          <target state="translated">ユニオンフィールドは共通のストレージを共有しているため、あるユニオンの1つのフィールドに書き込みアクセスすると、残りのすべてのフィールドへの書き込みアクセスが可能になります。借用チェックのルールは、この事実を考慮して調整する必要があります。その結果、ユニオンの1つのフィールドが借用されると、残りのすべてのフィールドも同じライフタイムで借用されることになります。</target>
        </trans-unit>
        <trans-unit id="6c20c8f37c4b7bf77f2a31df2f6719c9fb72df7d" translate="yes" xml:space="preserve">
          <source>Since unsigned types do not have negative equivalents all applications of this function will wrap (except for &lt;code&gt;-0&lt;/code&gt;). For values smaller than the corresponding signed type's maximum the result is the same as casting the corresponding signed value. Any larger values are equivalent to &lt;code&gt;MAX + 1 - (val - MAX - 1)&lt;/code&gt; where &lt;code&gt;MAX&lt;/code&gt; is the corresponding signed type's maximum.</source>
          <target state="translated">符号なし型には同等の負の値がないため、この関数のすべてのアプリケーションがラップします（ &lt;code&gt;-0&lt;/code&gt; を除く）。対応する符号付き型の最大値より小さい値の場合、結果は対応する符号付き値をキャストした場合と同じです。より大きな値は、 &lt;code&gt;MAX + 1 - (val - MAX - 1)&lt;/code&gt; と同等です。ここで、 &lt;code&gt;MAX&lt;/code&gt; は対応する符号付きタイプの最大値です。</target>
        </trans-unit>
        <trans-unit id="cbaa65c28e509bdfabc1a47426821c06f77d26f9" translate="yes" xml:space="preserve">
          <source>Since we cannot access items defined inside a function, the visibility of its items does not impact outer code. So using the &lt;code&gt;pub&lt;/code&gt; keyword in this context is invalid.</source>
          <target state="translated">関数内で定義されたアイテムにはアクセスできないため、そのアイテムの可視性は外部コードに影響を与えません。したがって、このコンテキストで &lt;code&gt;pub&lt;/code&gt; キーワードを使用することは無効です。</target>
        </trans-unit>
        <trans-unit id="4dba81bbe7820e8868eb07b19a8befa396058675" translate="yes" xml:space="preserve">
          <source>Since, for the positive integers, all common definitions of division are equal, this is exactly equal to &lt;code&gt;self % rhs&lt;/code&gt;.</source>
          <target state="translated">正の整数の場合、一般的な除算の定義はすべて等しいため、これは &lt;code&gt;self % rhs&lt;/code&gt; とまったく同じです。</target>
        </trans-unit>
        <trans-unit id="dda0de02b51725f6a06052d7f7ac014a8396a781" translate="yes" xml:space="preserve">
          <source>Since, for the positive integers, all common definitions of division are equal, this is exactly equal to &lt;code&gt;self / rhs&lt;/code&gt;.</source>
          <target state="translated">正の整数の場合、除算のすべての一般的な定義は等しいため、これは &lt;code&gt;self / rhs&lt;/code&gt; とまったく同じです。</target>
        </trans-unit>
        <trans-unit id="b103261a83b179716c89c6c92972b372068f6b15" translate="yes" xml:space="preserve">
          <source>Single quote</source>
          <target state="translated">単一の引用</target>
        </trans-unit>
        <trans-unit id="fa3c3ce2e1143e5f02a7e1c6ba83790a55e509ea" translate="yes" xml:space="preserve">
          <source>Single quote is escaped as &lt;code&gt;'&lt;/code&gt;.</source>
          <target state="translated">単一引用符は &lt;code&gt;'&lt;/code&gt; としてエスケープされます。</target>
        </trans-unit>
        <trans-unit id="7ee0383414a0c9196e3c308e7d9a5c46f51c9908" translate="yes" xml:space="preserve">
          <source>Single quote is escaped as &lt;code&gt;\'&lt;/code&gt;.</source>
          <target state="translated">一重引用符は &lt;code&gt;\'&lt;/code&gt; としてエスケープされます。</target>
        </trans-unit>
        <trans-unit id="c87f2f54a082c54d228ff842301df84465a008c3" translate="yes" xml:space="preserve">
          <source>Single-element tuple expression</source>
          <target state="translated">単一要素タプル式</target>
        </trans-unit>
        <trans-unit id="eeac5881e3707a24870f65943d84687eb7b0c026" translate="yes" xml:space="preserve">
          <source>Single-element tuple type</source>
          <target state="translated">単一要素タプル型</target>
        </trans-unit>
        <trans-unit id="d75a58a33dda256da44b82cf7f4c80227b9e1afe" translate="yes" xml:space="preserve">
          <source>Single-threaded reference-counting pointers. 'Rc' stands for 'Reference Counted'.</source>
          <target state="translated">シングルスレッドの参照カウントポインタ。'Rc' は 'Reference Counted' の略です。</target>
        </trans-unit>
        <trans-unit id="e53e8d5300c878019a997d4cfb7201c7ed2ee003" translate="yes" xml:space="preserve">
          <source>Sink</source>
          <target state="translated">Sink</target>
        </trans-unit>
        <trans-unit id="60c77f672b65aaac8580302bf8cda9c91ba1cad6" translate="yes" xml:space="preserve">
          <source>Sink::borrow</source>
          <target state="translated">Sink::borrow</target>
        </trans-unit>
        <trans-unit id="6d9c51b3db09f18a5f1f96544a01a60b2f227eab" translate="yes" xml:space="preserve">
          <source>Sink::borrow_mut</source>
          <target state="translated">Sink::borrow_mut</target>
        </trans-unit>
        <trans-unit id="1da011f3be06f5727221fdf2c29af5810aa1e90c" translate="yes" xml:space="preserve">
          <source>Sink::by_ref</source>
          <target state="translated">Sink::by_ref</target>
        </trans-unit>
        <trans-unit id="736ddcaae3f79d64fd9ada96bbbcd86659dcb149" translate="yes" xml:space="preserve">
          <source>Sink::flush</source>
          <target state="translated">Sink::flush</target>
        </trans-unit>
        <trans-unit id="1cc460d6dea281e2f0b294cba322984d76827293" translate="yes" xml:space="preserve">
          <source>Sink::fmt</source>
          <target state="translated">Sink::fmt</target>
        </trans-unit>
        <trans-unit id="2395cef4421cc589b077a40b42899b78928eca8a" translate="yes" xml:space="preserve">
          <source>Sink::from</source>
          <target state="translated">Sink::from</target>
        </trans-unit>
        <trans-unit id="08d05b7e780b04c22db75adb4dcbf52a0fd47257" translate="yes" xml:space="preserve">
          <source>Sink::into</source>
          <target state="translated">Sink::into</target>
        </trans-unit>
        <trans-unit id="4be29718f19d2b922b9f5929c80d09871c9ec765" translate="yes" xml:space="preserve">
          <source>Sink::try_from</source>
          <target state="translated">Sink::try_from</target>
        </trans-unit>
        <trans-unit id="8eec324a6cd9312538375d319f03ae5b437fac6f" translate="yes" xml:space="preserve">
          <source>Sink::try_into</source>
          <target state="translated">Sink::try_into</target>
        </trans-unit>
        <trans-unit id="754adefc1f84a53a66700415103c74fc10d2208d" translate="yes" xml:space="preserve">
          <source>Sink::type_id</source>
          <target state="translated">Sink::type_id</target>
        </trans-unit>
        <trans-unit id="5472b671b415c7460696ca133e1af23bc3ba15b8" translate="yes" xml:space="preserve">
          <source>Sink::write</source>
          <target state="translated">Sink::write</target>
        </trans-unit>
        <trans-unit id="8b5df7265c21521886c1d6e0faf91eb2236fc6a1" translate="yes" xml:space="preserve">
          <source>Sink::write_all</source>
          <target state="translated">Sink::write_all</target>
        </trans-unit>
        <trans-unit id="ae44c989306894e93f20c1bd3c46e78e41aa999e" translate="yes" xml:space="preserve">
          <source>Sink::write_fmt</source>
          <target state="translated">Sink::write_fmt</target>
        </trans-unit>
        <trans-unit id="2b518739227f1ce8933d3bddfccc03d9fdb432e6" translate="yes" xml:space="preserve">
          <source>Sink::write_vectored</source>
          <target state="translated">Sink::write_vectored</target>
        </trans-unit>
        <trans-unit id="815c525669d8f021e79d156d95cefcd1fa4048ee" translate="yes" xml:space="preserve">
          <source>SipHash is a general-purpose hashing function: it runs at a good speed (competitive with Spooky and City) and permits strong &lt;em&gt;keyed&lt;/em&gt; hashing. This lets you key your hash tables from a strong RNG, such as &lt;a href=&quot;https://doc.rust-lang.org/rand/rand/os/struct.OsRng.html&quot;&gt;&lt;code&gt;rand::os::OsRng&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">SipHashは、汎用のハッシュ関数です。高速で実行され（SpookyやCityと競合）、強力な&lt;em&gt;キー付き&lt;/em&gt;ハッシュが可能です。これにより、&lt;a href=&quot;https://doc.rust-lang.org/rand/rand/os/struct.OsRng.html&quot;&gt; &lt;code&gt;rand::os::OsRng&lt;/code&gt; &lt;/a&gt;などの強力なRNGからハッシュテーブルにキーを設定できます。</target>
        </trans-unit>
        <trans-unit id="c0d73ca2870698f5904e43434297eaf18f9ba593" translate="yes" xml:space="preserve">
          <source>SipHash is a general-purpose hashing function: it runs at a good speed (competitive with Spooky and City) and permits strong &lt;em&gt;keyed&lt;/em&gt; hashing. This lets you key your hashtables from a strong RNG, such as &lt;a href=&quot;https://doc.rust-lang.org/rand/rand/os/struct.OsRng.html&quot;&gt;&lt;code&gt;rand::os::OsRng&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">SipHashは汎用のハッシュ関数です。高速で実行され（SpookyやCityと競合）、強力な&lt;em&gt;キー付き&lt;/em&gt;ハッシュが可能です。これにより、&lt;a href=&quot;https://doc.rust-lang.org/rand/rand/os/struct.OsRng.html&quot;&gt; &lt;code&gt;rand::os::OsRng&lt;/code&gt; &lt;/a&gt;などの強力なRNGからハッシュテーブルにキーを設定できます。</target>
        </trans-unit>
        <trans-unit id="f9cb0c54ab98623776ca7d12c37c5a965ab239e3" translate="yes" xml:space="preserve">
          <source>SipHasher</source>
          <target state="translated">SipHasher</target>
        </trans-unit>
        <trans-unit id="9cedebf8939af7acb2722fe2fa6e5500dcc0267d" translate="yes" xml:space="preserve">
          <source>SipHasher::borrow</source>
          <target state="translated">SipHasher::borrow</target>
        </trans-unit>
        <trans-unit id="6f78bf5c40eda613634b22b06fd42ab3d0250faa" translate="yes" xml:space="preserve">
          <source>SipHasher::borrow_mut</source>
          <target state="translated">SipHasher::borrow_mut</target>
        </trans-unit>
        <trans-unit id="cc289741e2695624776b986e52b00d8f23a94048" translate="yes" xml:space="preserve">
          <source>SipHasher::clone</source>
          <target state="translated">SipHasher::clone</target>
        </trans-unit>
        <trans-unit id="97fe54ce712ce3a5267fa485ee5a26f2658a360a" translate="yes" xml:space="preserve">
          <source>SipHasher::clone_from</source>
          <target state="translated">SipHasher::clone_from</target>
        </trans-unit>
        <trans-unit id="625ae718fa03c7281d696cebdc8b4d5ef419ba8e" translate="yes" xml:space="preserve">
          <source>SipHasher::clone_into</source>
          <target state="translated">SipHasher::clone_into</target>
        </trans-unit>
        <trans-unit id="5e14ff4d39e15208d2ce324e1c3d9b1cd2601aac" translate="yes" xml:space="preserve">
          <source>SipHasher::default</source>
          <target state="translated">SipHasher::default</target>
        </trans-unit>
        <trans-unit id="7161704faf8df64e88863702b3e55cf0aa7ed08f" translate="yes" xml:space="preserve">
          <source>SipHasher::finish</source>
          <target state="translated">SipHasher::finish</target>
        </trans-unit>
        <trans-unit id="dbf68c90fc16c278c984e9a20353b175f9bf5fae" translate="yes" xml:space="preserve">
          <source>SipHasher::fmt</source>
          <target state="translated">SipHasher::fmt</target>
        </trans-unit>
        <trans-unit id="55aaab86cd50570c6967e5cb1be889d31f00c5c3" translate="yes" xml:space="preserve">
          <source>SipHasher::from</source>
          <target state="translated">SipHasher::from</target>
        </trans-unit>
        <trans-unit id="f5f59a1bd2f303a9262c508b718d3d6df44c4aaa" translate="yes" xml:space="preserve">
          <source>SipHasher::into</source>
          <target state="translated">SipHasher::into</target>
        </trans-unit>
        <trans-unit id="e4a8f7f5784838af85c04408b90d9ea75e69b189" translate="yes" xml:space="preserve">
          <source>SipHasher::new</source>
          <target state="translated">SipHasher::new</target>
        </trans-unit>
        <trans-unit id="e33acab93fc2fc493546063a61939686f7af77ee" translate="yes" xml:space="preserve">
          <source>SipHasher::new_with_keys</source>
          <target state="translated">SipHasher::new_with_keys</target>
        </trans-unit>
        <trans-unit id="3b90ab6bf88c2dbd6667b56cb38a8e459989460c" translate="yes" xml:space="preserve">
          <source>SipHasher::to_owned</source>
          <target state="translated">SipHasher::to_owned</target>
        </trans-unit>
        <trans-unit id="12c806474a3ae608918282ae770dec9b62f0b382" translate="yes" xml:space="preserve">
          <source>SipHasher::try_from</source>
          <target state="translated">SipHasher::try_from</target>
        </trans-unit>
        <trans-unit id="2cd9d0b149edef9bacd57b249b8149d3817315c7" translate="yes" xml:space="preserve">
          <source>SipHasher::try_into</source>
          <target state="translated">SipHasher::try_into</target>
        </trans-unit>
        <trans-unit id="cbb961e7c7039fb46a1b3b6615e8e9ad0c6e6000" translate="yes" xml:space="preserve">
          <source>SipHasher::type_id</source>
          <target state="translated">SipHasher::type_id</target>
        </trans-unit>
        <trans-unit id="8dce40dc64d99daa5c7c82a5dd674ea488a633de" translate="yes" xml:space="preserve">
          <source>SipHasher::write</source>
          <target state="translated">SipHasher::write</target>
        </trans-unit>
        <trans-unit id="c5c657a251d28888ab38871cd5365bc241246900" translate="yes" xml:space="preserve">
          <source>SipHasher::write_i128</source>
          <target state="translated">SipHasher::write_i128</target>
        </trans-unit>
        <trans-unit id="081f835a8f97633ee9c90294cbf01e6872a68e4d" translate="yes" xml:space="preserve">
          <source>SipHasher::write_i16</source>
          <target state="translated">SipHasher::write_i16</target>
        </trans-unit>
        <trans-unit id="534c0d75c7057a1243d040ed54d6d2089e7a7cf2" translate="yes" xml:space="preserve">
          <source>SipHasher::write_i32</source>
          <target state="translated">SipHasher::write_i32</target>
        </trans-unit>
        <trans-unit id="216359e513bd8a5178869764748567d747157db7" translate="yes" xml:space="preserve">
          <source>SipHasher::write_i64</source>
          <target state="translated">SipHasher::write_i64</target>
        </trans-unit>
        <trans-unit id="114f8115dd2a8666c8ced62d0e00a14733a00d63" translate="yes" xml:space="preserve">
          <source>SipHasher::write_i8</source>
          <target state="translated">SipHasher::write_i8</target>
        </trans-unit>
        <trans-unit id="15e7675543a4110211cbe808fcb13bd45e7008de" translate="yes" xml:space="preserve">
          <source>SipHasher::write_isize</source>
          <target state="translated">SipHasher::write_isize</target>
        </trans-unit>
        <trans-unit id="a259163f68fa6032e75f103bf4080aa27ba329d2" translate="yes" xml:space="preserve">
          <source>SipHasher::write_u128</source>
          <target state="translated">SipHasher::write_u128</target>
        </trans-unit>
        <trans-unit id="099c7c79450a47f4f8124fb8b6727a36a03390dc" translate="yes" xml:space="preserve">
          <source>SipHasher::write_u16</source>
          <target state="translated">SipHasher::write_u16</target>
        </trans-unit>
        <trans-unit id="d7ecaa1047bea8c31cd7f22a3bcdc883bc97810d" translate="yes" xml:space="preserve">
          <source>SipHasher::write_u32</source>
          <target state="translated">SipHasher::write_u32</target>
        </trans-unit>
        <trans-unit id="31d6e5ccde9767e49d1674c68c727f65298672fe" translate="yes" xml:space="preserve">
          <source>SipHasher::write_u64</source>
          <target state="translated">SipHasher::write_u64</target>
        </trans-unit>
        <trans-unit id="9169019178e6022743fc9d89de5f8e8745aaaf95" translate="yes" xml:space="preserve">
          <source>SipHasher::write_u8</source>
          <target state="translated">SipHasher::write_u8</target>
        </trans-unit>
        <trans-unit id="4da530848e33a9c560398180914f191393e00574" translate="yes" xml:space="preserve">
          <source>SipHasher::write_usize</source>
          <target state="translated">SipHasher::write_usize</target>
        </trans-unit>
        <trans-unit id="ee91ac0df1cda6cca56ba0ddc07b04ecdae2eb79" translate="yes" xml:space="preserve">
          <source>Six weeks after the first beta was created, it&amp;rsquo;s time for a stable release! The &lt;code&gt;stable&lt;/code&gt; branch is produced from the &lt;code&gt;beta&lt;/code&gt; branch:</source>
          <target state="translated">最初のベータ版が作成されてから6週間後、安定版リリースの時間です。 &lt;code&gt;stable&lt;/code&gt; 枝をから生成された &lt;code&gt;beta&lt;/code&gt; ブランチ：</target>
        </trans-unit>
        <trans-unit id="b7152342a267362add3c0d7f69f720f7a9c76c9e" translate="yes" xml:space="preserve">
          <source>Size</source>
          <target state="translated">Size</target>
        </trans-unit>
        <trans-unit id="8b2137531250f928e063debe4f1ffaa0a169ef4c" translate="yes" xml:space="preserve">
          <source>Size and Alignment</source>
          <target state="translated">サイズとアライメント</target>
        </trans-unit>
        <trans-unit id="2e8e7d128fe5b9a8867e6a426fb44ec115e0e9a2" translate="yes" xml:space="preserve">
          <source>Size of &lt;code&gt;#[repr(C)]&lt;/code&gt; items</source>
          <target state="translated">&lt;code&gt;#[repr(C)]&lt;/code&gt; アイテムのサイズ</target>
        </trans-unit>
        <trans-unit id="aa6a08373f71dd56c89763573898cda876af66a9" translate="yes" xml:space="preserve">
          <source>Size of Enums</source>
          <target state="translated">列挙型のサイズ</target>
        </trans-unit>
        <trans-unit id="6b52ecd2f9fc6e1813053b01f83a05b834e08941" translate="yes" xml:space="preserve">
          <source>Size of Structs</source>
          <target state="translated">構造物のサイズ</target>
        </trans-unit>
        <trans-unit id="1feff492ca8a9a3bc4a26e483e6cb0262d851ca0" translate="yes" xml:space="preserve">
          <source>Size of Unions</source>
          <target state="translated">組合の規模</target>
        </trans-unit>
        <trans-unit id="2ecf7208ad77d957cb2e1a89293524823cf35c3e" translate="yes" xml:space="preserve">
          <source>Sized</source>
          <target state="translated">Sized</target>
        </trans-unit>
        <trans-unit id="3da474537ac378c616d6b301acc1674bc348cecd" translate="yes" xml:space="preserve">
          <source>Skip</source>
          <target state="translated">Skip</target>
        </trans-unit>
        <trans-unit id="bf47c2169ff524c7aead5b6e515a8d42bd4b77a9" translate="yes" xml:space="preserve">
          <source>Skip to the next iteration of a loop.</source>
          <target state="translated">ループの次の反復にスキップします。</target>
        </trans-unit>
        <trans-unit id="8d67699e65efc053e93dca13ef4b1f6202ba1901" translate="yes" xml:space="preserve">
          <source>Skip::all</source>
          <target state="translated">Skip::all</target>
        </trans-unit>
        <trans-unit id="141e853bf04e8103da2b2c07dbf8000f54f570bf" translate="yes" xml:space="preserve">
          <source>Skip::any</source>
          <target state="translated">Skip::any</target>
        </trans-unit>
        <trans-unit id="c572bc5841959dca75e9c92d6139c6c8321aabf8" translate="yes" xml:space="preserve">
          <source>Skip::borrow</source>
          <target state="translated">Skip::borrow</target>
        </trans-unit>
        <trans-unit id="bb425ddbe3925202b0b1566fb4567e3171373ac7" translate="yes" xml:space="preserve">
          <source>Skip::borrow_mut</source>
          <target state="translated">Skip::borrow_mut</target>
        </trans-unit>
        <trans-unit id="abc1b8180d94b0691f88b2c8b5f9022896fcd951" translate="yes" xml:space="preserve">
          <source>Skip::by_ref</source>
          <target state="translated">Skip::by_ref</target>
        </trans-unit>
        <trans-unit id="ac8d08d116f5cee3f4346786234b2f95b0e8712c" translate="yes" xml:space="preserve">
          <source>Skip::chain</source>
          <target state="translated">Skip::chain</target>
        </trans-unit>
        <trans-unit id="05348998f0a735c96821775992fcabcbe0f2637b" translate="yes" xml:space="preserve">
          <source>Skip::clone</source>
          <target state="translated">Skip::clone</target>
        </trans-unit>
        <trans-unit id="ab942803336d4a18c570f4b33a95565c2f912da9" translate="yes" xml:space="preserve">
          <source>Skip::clone_from</source>
          <target state="translated">Skip::clone_from</target>
        </trans-unit>
        <trans-unit id="54eb30686bf309c8534a4169a59b2eb41600beb1" translate="yes" xml:space="preserve">
          <source>Skip::clone_into</source>
          <target state="translated">Skip::clone_into</target>
        </trans-unit>
        <trans-unit id="ed4e38033dd806ff8d752e63571ae83c6733409d" translate="yes" xml:space="preserve">
          <source>Skip::cloned</source>
          <target state="translated">Skip::cloned</target>
        </trans-unit>
        <trans-unit id="b0bf2a0cd01bdd325ee257ee06de3b9c617e0d11" translate="yes" xml:space="preserve">
          <source>Skip::cmp</source>
          <target state="translated">Skip::cmp</target>
        </trans-unit>
        <trans-unit id="02c0a58a456fffb957ceb2519514865d280ec66a" translate="yes" xml:space="preserve">
          <source>Skip::collect</source>
          <target state="translated">Skip::collect</target>
        </trans-unit>
        <trans-unit id="f572ea5aae0784c24ea52b6f645ec73b1b72c674" translate="yes" xml:space="preserve">
          <source>Skip::copied</source>
          <target state="translated">Skip::copied</target>
        </trans-unit>
        <trans-unit id="40d90248faa89c2b6340db905f56295e956458ea" translate="yes" xml:space="preserve">
          <source>Skip::count</source>
          <target state="translated">Skip::count</target>
        </trans-unit>
        <trans-unit id="5c13df6d2d71e1aeab130ef4967e90660241c022" translate="yes" xml:space="preserve">
          <source>Skip::cycle</source>
          <target state="translated">Skip::cycle</target>
        </trans-unit>
        <trans-unit id="81f0912435fda5e9269d1b7959e08d64503d681f" translate="yes" xml:space="preserve">
          <source>Skip::enumerate</source>
          <target state="translated">Skip::enumerate</target>
        </trans-unit>
        <trans-unit id="8d4632bae1e84eda74aeae1018124ebf229eda3e" translate="yes" xml:space="preserve">
          <source>Skip::eq</source>
          <target state="translated">Skip::eq</target>
        </trans-unit>
        <trans-unit id="eb8a3a22b5ea79cfb61fb7507a6d78a8f1292f27" translate="yes" xml:space="preserve">
          <source>Skip::filter</source>
          <target state="translated">Skip::filter</target>
        </trans-unit>
        <trans-unit id="874be171075c0b4b3eee66f8ced42abe0b0e3baa" translate="yes" xml:space="preserve">
          <source>Skip::filter_map</source>
          <target state="translated">Skip::filter_map</target>
        </trans-unit>
        <trans-unit id="a30fb0f619bbc4f631f8c4492f10c577c7f6de5b" translate="yes" xml:space="preserve">
          <source>Skip::find</source>
          <target state="translated">Skip::find</target>
        </trans-unit>
        <trans-unit id="dbc55aa235c22a0214953850ca711401b23ed4a4" translate="yes" xml:space="preserve">
          <source>Skip::find_map</source>
          <target state="translated">Skip::find_map</target>
        </trans-unit>
        <trans-unit id="8a9e86e948e9bd0ef00a26f68bef19063068548f" translate="yes" xml:space="preserve">
          <source>Skip::flat_map</source>
          <target state="translated">Skip::flat_map</target>
        </trans-unit>
        <trans-unit id="e16f1f9ef8d1d4589cd1c4bd5ed7f80c4d5f6ddd" translate="yes" xml:space="preserve">
          <source>Skip::flatten</source>
          <target state="translated">Skip::flatten</target>
        </trans-unit>
        <trans-unit id="9086b93356bb81e44b2d7f1412ac4fe86bd0dcb1" translate="yes" xml:space="preserve">
          <source>Skip::fmt</source>
          <target state="translated">Skip::fmt</target>
        </trans-unit>
        <trans-unit id="e3d9c86bbe78f52a56ad6fff4a0b01475f10581d" translate="yes" xml:space="preserve">
          <source>Skip::fold</source>
          <target state="translated">Skip::fold</target>
        </trans-unit>
        <trans-unit id="c8e88869f2740a973d0537592ce1555579baa1b7" translate="yes" xml:space="preserve">
          <source>Skip::for_each</source>
          <target state="translated">Skip::for_each</target>
        </trans-unit>
        <trans-unit id="c104bc225095dfb31451ec18bca1d818a9b034cc" translate="yes" xml:space="preserve">
          <source>Skip::from</source>
          <target state="translated">Skip::from</target>
        </trans-unit>
        <trans-unit id="e67aaeac0314d54938507d57ca05493c7d19a56d" translate="yes" xml:space="preserve">
          <source>Skip::fuse</source>
          <target state="translated">Skip::fuse</target>
        </trans-unit>
        <trans-unit id="f0e121a4c13868ff9f1bc27cbb52b11b553a299c" translate="yes" xml:space="preserve">
          <source>Skip::ge</source>
          <target state="translated">Skip::ge</target>
        </trans-unit>
        <trans-unit id="5cfa9f35d793092fb95d4bd2c5bfbdee2b01d07e" translate="yes" xml:space="preserve">
          <source>Skip::gt</source>
          <target state="translated">Skip::gt</target>
        </trans-unit>
        <trans-unit id="32d75c54c889166e3bbe5ec4632b338aaa132ad5" translate="yes" xml:space="preserve">
          <source>Skip::inspect</source>
          <target state="translated">Skip::inspect</target>
        </trans-unit>
        <trans-unit id="3d8db1257125ff8e4340421bc43225609fe092b2" translate="yes" xml:space="preserve">
          <source>Skip::into</source>
          <target state="translated">Skip::into</target>
        </trans-unit>
        <trans-unit id="55521a2f13f746b7b112a71469d51f5284ad5f45" translate="yes" xml:space="preserve">
          <source>Skip::into_iter</source>
          <target state="translated">Skip::into_iter</target>
        </trans-unit>
        <trans-unit id="5038f6c0c3001beb5f7a911c129fa9f1cee58ee5" translate="yes" xml:space="preserve">
          <source>Skip::is_empty</source>
          <target state="translated">Skip::is_empty</target>
        </trans-unit>
        <trans-unit id="272bf3795578cd2bc47dda4c90cfee7e48d2a48e" translate="yes" xml:space="preserve">
          <source>Skip::is_sorted</source>
          <target state="translated">Skip::is_sorted</target>
        </trans-unit>
        <trans-unit id="f24a2c232270c929008d3680d05c96536a1217b0" translate="yes" xml:space="preserve">
          <source>Skip::is_sorted_by</source>
          <target state="translated">Skip::is_sorted_by</target>
        </trans-unit>
        <trans-unit id="47d5c21e2c2c68b022473e8f093afd6958451210" translate="yes" xml:space="preserve">
          <source>Skip::is_sorted_by_key</source>
          <target state="translated">Skip::is_sorted_by_key</target>
        </trans-unit>
        <trans-unit id="10bf154533e067f3dd7f0c05e621c3870a0af4da" translate="yes" xml:space="preserve">
          <source>Skip::last</source>
          <target state="translated">Skip::last</target>
        </trans-unit>
        <trans-unit id="315ffa7298e0fefbae874a8a39d9da1e324efed4" translate="yes" xml:space="preserve">
          <source>Skip::le</source>
          <target state="translated">Skip::le</target>
        </trans-unit>
        <trans-unit id="74eddfb30c713b021758da54f8dfa23e300f61e7" translate="yes" xml:space="preserve">
          <source>Skip::len</source>
          <target state="translated">Skip::len</target>
        </trans-unit>
        <trans-unit id="45c696c0e3866151d3a57b3bff59b8fff75e35d0" translate="yes" xml:space="preserve">
          <source>Skip::lt</source>
          <target state="translated">Skip::lt</target>
        </trans-unit>
        <trans-unit id="636efebe4a0de6af6b19ee04711f693b72aa7384" translate="yes" xml:space="preserve">
          <source>Skip::map</source>
          <target state="translated">Skip::map</target>
        </trans-unit>
        <trans-unit id="3110dfcf391e72c609e1fcb719b14d271b6338f1" translate="yes" xml:space="preserve">
          <source>Skip::max</source>
          <target state="translated">Skip::max</target>
        </trans-unit>
        <trans-unit id="cf79602620d165a3c07f034e49eccbc6fae960cf" translate="yes" xml:space="preserve">
          <source>Skip::max_by</source>
          <target state="translated">Skip::max_by</target>
        </trans-unit>
        <trans-unit id="cb499c31e556db2f15927d4f82a032492a61ceca" translate="yes" xml:space="preserve">
          <source>Skip::max_by_key</source>
          <target state="translated">Skip::max_by_key</target>
        </trans-unit>
        <trans-unit id="de3235931a068719ad0f8fc80b83d097f439212e" translate="yes" xml:space="preserve">
          <source>Skip::min</source>
          <target state="translated">Skip::min</target>
        </trans-unit>
        <trans-unit id="8e5aeeb79f94b335034d3d7c10d7cc32b084728e" translate="yes" xml:space="preserve">
          <source>Skip::min_by</source>
          <target state="translated">Skip::min_by</target>
        </trans-unit>
        <trans-unit id="446117a44e4232d0b4427dfab79f31d57b72b374" translate="yes" xml:space="preserve">
          <source>Skip::min_by_key</source>
          <target state="translated">Skip::min_by_key</target>
        </trans-unit>
        <trans-unit id="016ccdf91210df76c448998f1e0e4b330645b257" translate="yes" xml:space="preserve">
          <source>Skip::ne</source>
          <target state="translated">Skip::ne</target>
        </trans-unit>
        <trans-unit id="8712be814c452b15d7f4b42f9c05395226c88dcb" translate="yes" xml:space="preserve">
          <source>Skip::next</source>
          <target state="translated">Skip::next</target>
        </trans-unit>
        <trans-unit id="534d1f6dac0a6c0bdd3cac0df7681b2be1851f06" translate="yes" xml:space="preserve">
          <source>Skip::next_back</source>
          <target state="translated">Skip::next_back</target>
        </trans-unit>
        <trans-unit id="0ebc6ec7583aba4767668232540e401fd9ba6c7b" translate="yes" xml:space="preserve">
          <source>Skip::nth</source>
          <target state="translated">Skip::nth</target>
        </trans-unit>
        <trans-unit id="273d494c50d7f8cb0a2fb38ae8a28f07301aa066" translate="yes" xml:space="preserve">
          <source>Skip::nth_back</source>
          <target state="translated">Skip::nth_back</target>
        </trans-unit>
        <trans-unit id="dea71f0f125872655107e8b4862adffe97b60b5b" translate="yes" xml:space="preserve">
          <source>Skip::partial_cmp</source>
          <target state="translated">Skip::partial_cmp</target>
        </trans-unit>
        <trans-unit id="aa7460464f565bc9cd21936e33b7617d739e1591" translate="yes" xml:space="preserve">
          <source>Skip::partition</source>
          <target state="translated">Skip::partition</target>
        </trans-unit>
        <trans-unit id="075b408bc35851d7da6cfa726867a7bd57d185c9" translate="yes" xml:space="preserve">
          <source>Skip::peekable</source>
          <target state="translated">Skip::peekable</target>
        </trans-unit>
        <trans-unit id="47240470807be493a133c5eaddde44f49995839f" translate="yes" xml:space="preserve">
          <source>Skip::position</source>
          <target state="translated">Skip::position</target>
        </trans-unit>
        <trans-unit id="691499df965f712a43ae65c1614c977032337079" translate="yes" xml:space="preserve">
          <source>Skip::product</source>
          <target state="translated">Skip::product</target>
        </trans-unit>
        <trans-unit id="2cfb56bc1abe3ee9eacbe6e1bf0440aeda494cd5" translate="yes" xml:space="preserve">
          <source>Skip::rev</source>
          <target state="translated">Skip::rev</target>
        </trans-unit>
        <trans-unit id="0480cefdfad343de236e3b69c19f0c4377b5e322" translate="yes" xml:space="preserve">
          <source>Skip::rfind</source>
          <target state="translated">Skip::rfind</target>
        </trans-unit>
        <trans-unit id="769a4497620dd9facd3c69ccfc0dad2e78eafc81" translate="yes" xml:space="preserve">
          <source>Skip::rfold</source>
          <target state="translated">Skip::rfold</target>
        </trans-unit>
        <trans-unit id="932d2a0b7f9aa1aa05317836e0f63443976068eb" translate="yes" xml:space="preserve">
          <source>Skip::rposition</source>
          <target state="translated">Skip::rposition</target>
        </trans-unit>
        <trans-unit id="a721c32fcaf7b2dbd6fab9a691bffaa10e317dcb" translate="yes" xml:space="preserve">
          <source>Skip::scan</source>
          <target state="translated">Skip::scan</target>
        </trans-unit>
        <trans-unit id="019356e9e0e60bb58c85bb7605bb1dff8fbb644b" translate="yes" xml:space="preserve">
          <source>Skip::size_hint</source>
          <target state="translated">Skip::size_hint</target>
        </trans-unit>
        <trans-unit id="605b884d4e68ad0652454fe028c2b2b2d0bf1f55" translate="yes" xml:space="preserve">
          <source>Skip::skip</source>
          <target state="translated">Skip::skip</target>
        </trans-unit>
        <trans-unit id="a84c497b977bf164cf38b614420a401bf122afec" translate="yes" xml:space="preserve">
          <source>Skip::skip_while</source>
          <target state="translated">Skip::skip_while</target>
        </trans-unit>
        <trans-unit id="72c015c31df7b28c6bf48d72fcf7687cd5cc5f08" translate="yes" xml:space="preserve">
          <source>Skip::step_by</source>
          <target state="translated">Skip::step_by</target>
        </trans-unit>
        <trans-unit id="b24eeb276057c34c15267d264cdde7e24b28e94c" translate="yes" xml:space="preserve">
          <source>Skip::sum</source>
          <target state="translated">Skip::sum</target>
        </trans-unit>
        <trans-unit id="786fbffb58c10870fc6472b0f9ebe8e005834e6e" translate="yes" xml:space="preserve">
          <source>Skip::take</source>
          <target state="translated">Skip::take</target>
        </trans-unit>
        <trans-unit id="6a7a19f72cb62542178db1b5acfc97dbf3534f4b" translate="yes" xml:space="preserve">
          <source>Skip::take_while</source>
          <target state="translated">Skip::take_while</target>
        </trans-unit>
        <trans-unit id="61a46f4a7c5265079c849af4f618df1736685196" translate="yes" xml:space="preserve">
          <source>Skip::to_owned</source>
          <target state="translated">Skip::to_owned</target>
        </trans-unit>
        <trans-unit id="c176adab52c0482523c3a0bdfc430057f640bc68" translate="yes" xml:space="preserve">
          <source>Skip::try_fold</source>
          <target state="translated">Skip::try_fold</target>
        </trans-unit>
        <trans-unit id="bc4fbff9cdd49a0c0ec58c470298314a0d351890" translate="yes" xml:space="preserve">
          <source>Skip::try_for_each</source>
          <target state="translated">Skip::try_for_each</target>
        </trans-unit>
        <trans-unit id="3a6ff77afd53390d404c04b4d8b824a12d11fe69" translate="yes" xml:space="preserve">
          <source>Skip::try_from</source>
          <target state="translated">Skip::try_from</target>
        </trans-unit>
        <trans-unit id="0ff3cc9a1085dadeb6133ba9f367559c2327c721" translate="yes" xml:space="preserve">
          <source>Skip::try_into</source>
          <target state="translated">Skip::try_into</target>
        </trans-unit>
        <trans-unit id="3e4ddfb53f35b3ff6209898a989c06b6d31b6a15" translate="yes" xml:space="preserve">
          <source>Skip::try_rfold</source>
          <target state="translated">Skip::try_rfold</target>
        </trans-unit>
        <trans-unit id="4d0b4d7dcbb0aec04511db37ea98be0fcaf79295" translate="yes" xml:space="preserve">
          <source>Skip::type_id</source>
          <target state="translated">Skip::type_id</target>
        </trans-unit>
        <trans-unit id="f66f20cf5e4ce8073947e7bdcea46c6358bf9608" translate="yes" xml:space="preserve">
          <source>Skip::unzip</source>
          <target state="translated">Skip::unzip</target>
        </trans-unit>
        <trans-unit id="8932bfb221e72115e120c13485894171d4582d0e" translate="yes" xml:space="preserve">
          <source>Skip::zip</source>
          <target state="translated">Skip::zip</target>
        </trans-unit>
        <trans-unit id="22e179bea92af551a86509fda88cb097314902ec" translate="yes" xml:space="preserve">
          <source>SkipWhile</source>
          <target state="translated">SkipWhile</target>
        </trans-unit>
        <trans-unit id="a251611a5ac9647617f802344994207a8b4db01a" translate="yes" xml:space="preserve">
          <source>SkipWhile::all</source>
          <target state="translated">SkipWhile::all</target>
        </trans-unit>
        <trans-unit id="2ae549195f30071a0e9d8d90c2e8583a38099511" translate="yes" xml:space="preserve">
          <source>SkipWhile::any</source>
          <target state="translated">SkipWhile::any</target>
        </trans-unit>
        <trans-unit id="98baaebe6857101ea22467675357020bb4fcd7a9" translate="yes" xml:space="preserve">
          <source>SkipWhile::borrow</source>
          <target state="translated">SkipWhile::borrow</target>
        </trans-unit>
        <trans-unit id="ce2e2f99def3c54e6795960ad9510b8130f483f0" translate="yes" xml:space="preserve">
          <source>SkipWhile::borrow_mut</source>
          <target state="translated">SkipWhile::borrow_mut</target>
        </trans-unit>
        <trans-unit id="c64071d1ca91b85edf166d56a370e88fe51d3b6d" translate="yes" xml:space="preserve">
          <source>SkipWhile::by_ref</source>
          <target state="translated">SkipWhile::by_ref</target>
        </trans-unit>
        <trans-unit id="b884d6e3b0cc117790f90239ec9dbd1eac5f13e4" translate="yes" xml:space="preserve">
          <source>SkipWhile::chain</source>
          <target state="translated">SkipWhile::chain</target>
        </trans-unit>
        <trans-unit id="cfc70cf8aed73488e407b6a7889ed7a8418ac602" translate="yes" xml:space="preserve">
          <source>SkipWhile::clone</source>
          <target state="translated">SkipWhile::clone</target>
        </trans-unit>
        <trans-unit id="acb8841d5260a38a1c9a9e05a7fab9292b8b7432" translate="yes" xml:space="preserve">
          <source>SkipWhile::clone_from</source>
          <target state="translated">SkipWhile::clone_from</target>
        </trans-unit>
        <trans-unit id="23f06ee81a3fc0167121fb8614c94b17561b2d77" translate="yes" xml:space="preserve">
          <source>SkipWhile::clone_into</source>
          <target state="translated">SkipWhile::clone_into</target>
        </trans-unit>
        <trans-unit id="8f58781a9269c6913f408bde07a5a2294de2446c" translate="yes" xml:space="preserve">
          <source>SkipWhile::cloned</source>
          <target state="translated">SkipWhile::cloned</target>
        </trans-unit>
        <trans-unit id="d4bbd6d43c74619248fe631024a5933fc3b97d5c" translate="yes" xml:space="preserve">
          <source>SkipWhile::cmp</source>
          <target state="translated">SkipWhile::cmp</target>
        </trans-unit>
        <trans-unit id="07c66ff1c2afbc10eb23e76ea19f3a092d94be54" translate="yes" xml:space="preserve">
          <source>SkipWhile::collect</source>
          <target state="translated">SkipWhile::collect</target>
        </trans-unit>
        <trans-unit id="514f5d9b2ee067a9a9ff4a4372834b6f2a4a029d" translate="yes" xml:space="preserve">
          <source>SkipWhile::copied</source>
          <target state="translated">SkipWhile::copied</target>
        </trans-unit>
        <trans-unit id="b39287b6c7743f091fb51959b8ed9fc02fc1c441" translate="yes" xml:space="preserve">
          <source>SkipWhile::count</source>
          <target state="translated">SkipWhile::count</target>
        </trans-unit>
        <trans-unit id="b372492b95553200f08ed5d8376e3d5b6576ce37" translate="yes" xml:space="preserve">
          <source>SkipWhile::cycle</source>
          <target state="translated">SkipWhile::cycle</target>
        </trans-unit>
        <trans-unit id="8de5e9639de9bf1bdfd7ee1683e67a7fe1b00ae5" translate="yes" xml:space="preserve">
          <source>SkipWhile::enumerate</source>
          <target state="translated">SkipWhile::enumerate</target>
        </trans-unit>
        <trans-unit id="3bc9577a92b59142e8578d161b13a1218a9fd0f8" translate="yes" xml:space="preserve">
          <source>SkipWhile::eq</source>
          <target state="translated">SkipWhile::eq</target>
        </trans-unit>
        <trans-unit id="bdb5592467ce942b2dd3afbb042a05ca026980fe" translate="yes" xml:space="preserve">
          <source>SkipWhile::filter</source>
          <target state="translated">SkipWhile::filter</target>
        </trans-unit>
        <trans-unit id="a4820567d9d6b30953a49ae15c41d964dba436eb" translate="yes" xml:space="preserve">
          <source>SkipWhile::filter_map</source>
          <target state="translated">SkipWhile::filter_map</target>
        </trans-unit>
        <trans-unit id="f4406599d75121d440746ae6a4d7f7780b74a7cd" translate="yes" xml:space="preserve">
          <source>SkipWhile::find</source>
          <target state="translated">SkipWhile::find</target>
        </trans-unit>
        <trans-unit id="719989fc5cfa90ef05d766b5b2d16a9e9f2cdaec" translate="yes" xml:space="preserve">
          <source>SkipWhile::find_map</source>
          <target state="translated">SkipWhile::find_map</target>
        </trans-unit>
        <trans-unit id="11659c0940aa3e200438cdeb7d9d829adaada9c8" translate="yes" xml:space="preserve">
          <source>SkipWhile::flat_map</source>
          <target state="translated">SkipWhile::flat_map</target>
        </trans-unit>
        <trans-unit id="eb45e6310d61b51a6f8e05810a0a9936481b0f76" translate="yes" xml:space="preserve">
          <source>SkipWhile::flatten</source>
          <target state="translated">SkipWhile::flatten</target>
        </trans-unit>
        <trans-unit id="3717dc2daffe5d4b403a4ca71a02890431980d8c" translate="yes" xml:space="preserve">
          <source>SkipWhile::fmt</source>
          <target state="translated">SkipWhile::fmt</target>
        </trans-unit>
        <trans-unit id="6fde0ea9ce42ccbfc6d6d7195a3168b240db9631" translate="yes" xml:space="preserve">
          <source>SkipWhile::fold</source>
          <target state="translated">SkipWhile::fold</target>
        </trans-unit>
        <trans-unit id="50caa2bd8e84ee483a82d00cc9915273efd59ac4" translate="yes" xml:space="preserve">
          <source>SkipWhile::for_each</source>
          <target state="translated">SkipWhile::for_each</target>
        </trans-unit>
        <trans-unit id="84ff07782bb5f48c0970cd148af80cb045a0eac0" translate="yes" xml:space="preserve">
          <source>SkipWhile::from</source>
          <target state="translated">SkipWhile::from</target>
        </trans-unit>
        <trans-unit id="754ae44be63a5b026814434cd281e24557f66cdb" translate="yes" xml:space="preserve">
          <source>SkipWhile::fuse</source>
          <target state="translated">SkipWhile::fuse</target>
        </trans-unit>
        <trans-unit id="e7c0f6e0d8dd018d9e212577757ec3b99507a73c" translate="yes" xml:space="preserve">
          <source>SkipWhile::ge</source>
          <target state="translated">SkipWhile::ge</target>
        </trans-unit>
        <trans-unit id="add5b99883ab21fed5358f11a1e9df18abb3be62" translate="yes" xml:space="preserve">
          <source>SkipWhile::gt</source>
          <target state="translated">SkipWhile::gt</target>
        </trans-unit>
        <trans-unit id="6bf9339ed08e9bb39b3d1ee30f930256d5188169" translate="yes" xml:space="preserve">
          <source>SkipWhile::inspect</source>
          <target state="translated">SkipWhile::inspect</target>
        </trans-unit>
        <trans-unit id="c1ff330f5ce8c23a7ad4ae6e8a2d96352b366c30" translate="yes" xml:space="preserve">
          <source>SkipWhile::into</source>
          <target state="translated">SkipWhile::into</target>
        </trans-unit>
        <trans-unit id="0f10f4984c69a0e0da2f055eec7170dc535a19b5" translate="yes" xml:space="preserve">
          <source>SkipWhile::into_iter</source>
          <target state="translated">SkipWhile::into_iter</target>
        </trans-unit>
        <trans-unit id="137eb73e5cdd03b27635d4bc69c4197194535aac" translate="yes" xml:space="preserve">
          <source>SkipWhile::is_sorted</source>
          <target state="translated">SkipWhile::is_sorted</target>
        </trans-unit>
        <trans-unit id="68f8c6e87e6e587a32da249478bba4ada1e29934" translate="yes" xml:space="preserve">
          <source>SkipWhile::is_sorted_by</source>
          <target state="translated">SkipWhile::is_sorted_by</target>
        </trans-unit>
        <trans-unit id="73a054a3c41f51790c051964baf7b2c43240f041" translate="yes" xml:space="preserve">
          <source>SkipWhile::is_sorted_by_key</source>
          <target state="translated">SkipWhile::is_sorted_by_key</target>
        </trans-unit>
        <trans-unit id="17b146d86e99d5592fe3427358624989bfbde86a" translate="yes" xml:space="preserve">
          <source>SkipWhile::last</source>
          <target state="translated">SkipWhile::last</target>
        </trans-unit>
        <trans-unit id="e9af22e02429653f1e5e05d885c6f9c3a2b8d11c" translate="yes" xml:space="preserve">
          <source>SkipWhile::le</source>
          <target state="translated">SkipWhile::le</target>
        </trans-unit>
        <trans-unit id="0364dacead75cc42dd00a0f9c451a6a421f03a24" translate="yes" xml:space="preserve">
          <source>SkipWhile::lt</source>
          <target state="translated">SkipWhile::lt</target>
        </trans-unit>
        <trans-unit id="c5698741d64b9f591e0fdc7367422c2732e1e5c5" translate="yes" xml:space="preserve">
          <source>SkipWhile::map</source>
          <target state="translated">SkipWhile::map</target>
        </trans-unit>
        <trans-unit id="ec412fa6842f2575adf5d3fb75c664a4852eedf8" translate="yes" xml:space="preserve">
          <source>SkipWhile::max</source>
          <target state="translated">SkipWhile::max</target>
        </trans-unit>
        <trans-unit id="0a0616fff10b52d273e49c0e5ac50ae16e2e2c07" translate="yes" xml:space="preserve">
          <source>SkipWhile::max_by</source>
          <target state="translated">SkipWhile::max_by</target>
        </trans-unit>
        <trans-unit id="d7587f5d81d60f3ea50c6983e15764f4e5dd9150" translate="yes" xml:space="preserve">
          <source>SkipWhile::max_by_key</source>
          <target state="translated">SkipWhile::max_by_key</target>
        </trans-unit>
        <trans-unit id="52358d799e74f228b4f92a70c2807042b6cca1f2" translate="yes" xml:space="preserve">
          <source>SkipWhile::min</source>
          <target state="translated">SkipWhile::min</target>
        </trans-unit>
        <trans-unit id="73f597f3beaf6b11d49b5d22aecf078de23f6bd0" translate="yes" xml:space="preserve">
          <source>SkipWhile::min_by</source>
          <target state="translated">SkipWhile::min_by</target>
        </trans-unit>
        <trans-unit id="5a1a140874972b854960962e46f7276e2af59e01" translate="yes" xml:space="preserve">
          <source>SkipWhile::min_by_key</source>
          <target state="translated">SkipWhile::min_by_key</target>
        </trans-unit>
        <trans-unit id="183883d7b1286b35bcc0572cad98b0334c5d761a" translate="yes" xml:space="preserve">
          <source>SkipWhile::ne</source>
          <target state="translated">SkipWhile::ne</target>
        </trans-unit>
        <trans-unit id="6808d12fec2558ee9e7d9db84926b66fbdfca8a5" translate="yes" xml:space="preserve">
          <source>SkipWhile::next</source>
          <target state="translated">SkipWhile::next</target>
        </trans-unit>
        <trans-unit id="048ee149a8b3bdb60154996c24b928e7eae9e765" translate="yes" xml:space="preserve">
          <source>SkipWhile::nth</source>
          <target state="translated">SkipWhile::nth</target>
        </trans-unit>
        <trans-unit id="edf2c6724fae8ee0a9d4aa2c7dcb71ea3ad5286e" translate="yes" xml:space="preserve">
          <source>SkipWhile::partial_cmp</source>
          <target state="translated">SkipWhile::partial_cmp</target>
        </trans-unit>
        <trans-unit id="235286e617118ef2eedf3de3d0ebf82026f8fd5d" translate="yes" xml:space="preserve">
          <source>SkipWhile::partition</source>
          <target state="translated">SkipWhile::partition</target>
        </trans-unit>
        <trans-unit id="ac388412dbf3931e3b5ea83b1c7d9712285bcb38" translate="yes" xml:space="preserve">
          <source>SkipWhile::peekable</source>
          <target state="translated">SkipWhile::peekable</target>
        </trans-unit>
        <trans-unit id="07e918bf1b8f1a943e4aa4437dea685dd0df01b7" translate="yes" xml:space="preserve">
          <source>SkipWhile::position</source>
          <target state="translated">SkipWhile::position</target>
        </trans-unit>
        <trans-unit id="0e320f453b91cba9a36d985bd6e2429ffa0e8064" translate="yes" xml:space="preserve">
          <source>SkipWhile::product</source>
          <target state="translated">SkipWhile::product</target>
        </trans-unit>
        <trans-unit id="c640a2bb803f9e27faec1b403698fd2e5f2317e0" translate="yes" xml:space="preserve">
          <source>SkipWhile::rev</source>
          <target state="translated">SkipWhile::rev</target>
        </trans-unit>
        <trans-unit id="be0da2c868e6e89f9992a40468321a3b7785fc27" translate="yes" xml:space="preserve">
          <source>SkipWhile::rposition</source>
          <target state="translated">SkipWhile::rposition</target>
        </trans-unit>
        <trans-unit id="6da80a895515ebcde023348aaab45576a62e8242" translate="yes" xml:space="preserve">
          <source>SkipWhile::scan</source>
          <target state="translated">SkipWhile::scan</target>
        </trans-unit>
        <trans-unit id="2a18e5a45186e93c570ed7bc1be516990e9d8596" translate="yes" xml:space="preserve">
          <source>SkipWhile::size_hint</source>
          <target state="translated">SkipWhile::size_hint</target>
        </trans-unit>
        <trans-unit id="b2f6ae931605aef6528f5eea7e1adc04d9d521b5" translate="yes" xml:space="preserve">
          <source>SkipWhile::skip</source>
          <target state="translated">SkipWhile::skip</target>
        </trans-unit>
        <trans-unit id="14349868da94b723f6e3342b39932c98acce80b3" translate="yes" xml:space="preserve">
          <source>SkipWhile::skip_while</source>
          <target state="translated">SkipWhile::skip_while</target>
        </trans-unit>
        <trans-unit id="24b712d0e65ede1461313b83ed15cb426add409e" translate="yes" xml:space="preserve">
          <source>SkipWhile::step_by</source>
          <target state="translated">SkipWhile::step_by</target>
        </trans-unit>
        <trans-unit id="307822395f63d85b6d4ad3f4f5d8695ff56b05c7" translate="yes" xml:space="preserve">
          <source>SkipWhile::sum</source>
          <target state="translated">SkipWhile::sum</target>
        </trans-unit>
        <trans-unit id="b5ebfade771014ee60f290ee3f34856921c4965a" translate="yes" xml:space="preserve">
          <source>SkipWhile::take</source>
          <target state="translated">SkipWhile::take</target>
        </trans-unit>
        <trans-unit id="ccec794ebfdc1546c5df129f1d4ff37a111976d1" translate="yes" xml:space="preserve">
          <source>SkipWhile::take_while</source>
          <target state="translated">SkipWhile::take_while</target>
        </trans-unit>
        <trans-unit id="39b22a520487262ca064f7848b2d0e2cdf9801b7" translate="yes" xml:space="preserve">
          <source>SkipWhile::to_owned</source>
          <target state="translated">SkipWhile::to_owned</target>
        </trans-unit>
        <trans-unit id="d8b0ab2cf16dc0748bb4549ffb37f837e39f5dba" translate="yes" xml:space="preserve">
          <source>SkipWhile::try_fold</source>
          <target state="translated">SkipWhile::try_fold</target>
        </trans-unit>
        <trans-unit id="0a1e9cd3d27da6ea2f47c61b83974e7ad5cee996" translate="yes" xml:space="preserve">
          <source>SkipWhile::try_for_each</source>
          <target state="translated">SkipWhile::try_for_each</target>
        </trans-unit>
        <trans-unit id="3f8a1565c038614fe428a25de2a00d13c06a46d4" translate="yes" xml:space="preserve">
          <source>SkipWhile::try_from</source>
          <target state="translated">SkipWhile::try_from</target>
        </trans-unit>
        <trans-unit id="b5986509cedc2dd0d67c67f3110a76f983758512" translate="yes" xml:space="preserve">
          <source>SkipWhile::try_into</source>
          <target state="translated">SkipWhile::try_into</target>
        </trans-unit>
        <trans-unit id="034417ac3e34efa5dff73aa36d45ff52950bafaf" translate="yes" xml:space="preserve">
          <source>SkipWhile::type_id</source>
          <target state="translated">SkipWhile::type_id</target>
        </trans-unit>
        <trans-unit id="aa8085a3efd31556a82ba60ccda975bf65ad2268" translate="yes" xml:space="preserve">
          <source>SkipWhile::unzip</source>
          <target state="translated">SkipWhile::unzip</target>
        </trans-unit>
        <trans-unit id="a701a8dc1340972d721fb7163deea6fd76dafdf3" translate="yes" xml:space="preserve">
          <source>SkipWhile::zip</source>
          <target state="translated">SkipWhile::zip</target>
        </trans-unit>
        <trans-unit id="a2c169fcee2a0e0599001b3215f71adf47f0699e" translate="yes" xml:space="preserve">
          <source>Slash</source>
          <target state="translated">Slash</target>
        </trans-unit>
        <trans-unit id="01ce38023820b6dfa8f41557520ebca667e1ad59" translate="yes" xml:space="preserve">
          <source>SlashEq</source>
          <target state="translated">SlashEq</target>
        </trans-unit>
        <trans-unit id="0c8525a31f225d6db84222cdc68f43cb8c6c18bf" translate="yes" xml:space="preserve">
          <source>Slice</source>
          <target state="translated">Slice</target>
        </trans-unit>
        <trans-unit id="34e7eb0ad02d68841a482e6343474939a06188ca" translate="yes" xml:space="preserve">
          <source>Slice Layout</source>
          <target state="translated">スライスレイアウト</target>
        </trans-unit>
        <trans-unit id="8b85692c79a013e21b5bc8d7b364bf45e1566533" translate="yes" xml:space="preserve">
          <source>Slice metadata is invalid if the length is not a valid &lt;code&gt;usize&lt;/code&gt; (i.e., it must not be read from uninitialized memory).</source>
          <target state="translated">長さが有効な使用 &lt;code&gt;usize&lt;/code&gt; ない場合（つまり、初期化されていないメモリから読み取ってはならない）、スライスメタデータは無効です。</target>
        </trans-unit>
        <trans-unit id="769f0ac84c24a3608c1a3219a0a737194226fde7" translate="yes" xml:space="preserve">
          <source>Slice patterns</source>
          <target state="translated">スライスパターン</target>
        </trans-unit>
        <trans-unit id="66ec64e6a3f3a0d922746be7dc2d16d8e60b1604" translate="yes" xml:space="preserve">
          <source>Slice patterns are irrefutable when matching an array as long as each element is irrefutable. When matching a slice, it is irrefutable only in the form with a single &lt;code&gt;..&lt;/code&gt;&lt;a href=&quot;#rest-patterns&quot;&gt;rest pattern&lt;/a&gt; or &lt;a href=&quot;#identifier-patterns&quot;&gt;identifier pattern&lt;/a&gt; with the &lt;code&gt;..&lt;/code&gt; rest pattern as a subpattern.</source>
          <target state="translated">各要素が反駁できない限り、配列を照合するときにスライスパターンは反駁できません。スライスを照合する場合、単一の &lt;code&gt;..&lt;/code&gt; &lt;a href=&quot;#rest-patterns&quot;&gt;レストパターン&lt;/a&gt;またはサブパターンとして &lt;code&gt;..&lt;/code&gt; レストパターンを持つ&lt;a href=&quot;#identifier-patterns&quot;&gt;識別子パターンを&lt;/a&gt;持つフォームでのみ反駁できません。</target>
        </trans-unit>
        <trans-unit id="4e49fa811ea06da1bbcb6ce9682db443bbcb90e6" translate="yes" xml:space="preserve">
          <source>Slice patterns can match both arrays of fixed size and slices of dynamic size.</source>
          <target state="translated">スライスパターンは、固定サイズの配列と動的サイズのスライスの両方にマッチします。</target>
        </trans-unit>
        <trans-unit id="e2a9b1a1f4c9d64f18dacb35757c94c4dba09de1" translate="yes" xml:space="preserve">
          <source>Slice types</source>
          <target state="translated">スライスの種類</target>
        </trans-unit>
        <trans-unit id="19695157734085157c78fbe17854f5408e269cc7" translate="yes" xml:space="preserve">
          <source>SliceConcatExt</source>
          <target state="translated">SliceConcatExt</target>
        </trans-unit>
        <trans-unit id="fa0533cad21e882e60e6470f5bbc433b34d70004" translate="yes" xml:space="preserve">
          <source>SliceConcatExt::concat</source>
          <target state="translated">SliceConcatExt::concat</target>
        </trans-unit>
        <trans-unit id="413a1df9b8364943cc23688168d5136007df7cd0" translate="yes" xml:space="preserve">
          <source>SliceConcatExt::connect</source>
          <target state="translated">SliceConcatExt::connect</target>
        </trans-unit>
        <trans-unit id="9785208fcb75d3242fa124a38e51980ffbd6d547" translate="yes" xml:space="preserve">
          <source>SliceConcatExt::join</source>
          <target state="translated">SliceConcatExt::join</target>
        </trans-unit>
        <trans-unit id="3e40446492e38511497e76ecb094b6028ead119a" translate="yes" xml:space="preserve">
          <source>SliceIndex</source>
          <target state="translated">SliceIndex</target>
        </trans-unit>
        <trans-unit id="6ce54ae25502325520f32754715055e196288255" translate="yes" xml:space="preserve">
          <source>SliceIndex::get</source>
          <target state="translated">SliceIndex::get</target>
        </trans-unit>
        <trans-unit id="572d3ba13df857766a6ae76c80fb65fabe4524e9" translate="yes" xml:space="preserve">
          <source>SliceIndex::get_mut</source>
          <target state="translated">SliceIndex::get_mut</target>
        </trans-unit>
        <trans-unit id="d0175e753163e484a6a27fba6d5bc114ef60ba17" translate="yes" xml:space="preserve">
          <source>SliceIndex::get_unchecked</source>
          <target state="translated">SliceIndex::get_unchecked</target>
        </trans-unit>
        <trans-unit id="f443fce2352caf6b4c8b798713f211deff2a2933" translate="yes" xml:space="preserve">
          <source>SliceIndex::get_unchecked_mut</source>
          <target state="translated">SliceIndex::get_unchecked_mut</target>
        </trans-unit>
        <trans-unit id="7916b515f5353dea5a33113689e5b4aeb6fc1a48" translate="yes" xml:space="preserve">
          <source>SliceIndex::index</source>
          <target state="translated">SliceIndex::index</target>
        </trans-unit>
        <trans-unit id="afb808e647e6e4fc8f460862d19066860e2d10b3" translate="yes" xml:space="preserve">
          <source>SliceIndex::index_mut</source>
          <target state="translated">SliceIndex::index_mut</target>
        </trans-unit>
        <trans-unit id="f144ad4093e39f92a8b125982226bc32f5fbad6c" translate="yes" xml:space="preserve">
          <source>Slices are a view into a block of memory represented as a pointer and a length.</source>
          <target state="translated">スライスとは、ポインタと長さで表されるメモリブロックのビューのことです。</target>
        </trans-unit>
        <trans-unit id="92d46edfcdc60ce1b717ef56f1d122c47640c96a" translate="yes" xml:space="preserve">
          <source>Slices are also compared by their length (fat pointers):</source>
          <target state="translated">スライスは長さでも比較されます(ファットポインター)。</target>
        </trans-unit>
        <trans-unit id="eca1373d0eca9016bccd6079114ae36016d11777" translate="yes" xml:space="preserve">
          <source>Slices are either mutable or shared. The shared slice type is &lt;code&gt;&amp;amp;[T]&lt;/code&gt;, while the mutable slice type is &lt;code&gt;&amp;amp;mut [T]&lt;/code&gt;, where &lt;code&gt;T&lt;/code&gt; represents the element type. For example, you can mutate the block of memory that a mutable slice points to:</source>
          <target state="translated">スライスは変更可能または共有されています。共有スライスタイプは &lt;code&gt;&amp;amp;[T]&lt;/code&gt; ですが、可変スライスタイプは &lt;code&gt;&amp;amp;mut [T]&lt;/code&gt; です &lt;code&gt;T&lt;/code&gt; は要素タイプを表します。たとえば、可変スライスが指すメモリブロックを変更できます。</target>
        </trans-unit>
        <trans-unit id="399a28c583a0d46cb74512eb0c802ebe3fdcca4b" translate="yes" xml:space="preserve">
          <source>Slices can only be handled through some kind of &lt;em&gt;pointer&lt;/em&gt;, and as such come in many flavors such as:</source>
          <target state="translated">スライスは、ある種の&lt;em&gt;ポインタ&lt;/em&gt;を介してのみ処理できるため、次のような多くの種類があります。</target>
        </trans-unit>
        <trans-unit id="78267e28e81cb8eb425db97c7c9bfe2fadd9598a" translate="yes" xml:space="preserve">
          <source>Slices have the same layout as the section of the array they slice.</source>
          <target state="translated">スライスは、スライスした配列のセクションと同じレイアウトになります。</target>
        </trans-unit>
        <trans-unit id="0b8d3bff7b282e8424f968f9e948b9dc2006e7fb" translate="yes" xml:space="preserve">
          <source>Slicing</source>
          <target state="translated">Slicing</target>
        </trans-unit>
        <trans-unit id="6b5423b129b4d84874f0627bbd4fe8799ddf84f1" translate="yes" xml:space="preserve">
          <source>Slicing Strings</source>
          <target state="translated">スライシングストリングス</target>
        </trans-unit>
        <trans-unit id="fae28e1d5e9f8d8129325c2a7488d0feff194552" translate="yes" xml:space="preserve">
          <source>Slightly simplified, the relevant parts of &lt;code&gt;HashMap&amp;lt;K, V&amp;gt;&lt;/code&gt; look like this:</source>
          <target state="translated">少し単純化すると、 &lt;code&gt;HashMap&amp;lt;K, V&amp;gt;&lt;/code&gt; の関連部分は次のようになります。</target>
        </trans-unit>
        <trans-unit id="1678b1d39516a61fe21f13e53c26f8494d328ac0" translate="yes" xml:space="preserve">
          <source>Small details, such as where &lt;code&gt;join&lt;/code&gt; is called, can affect whether or not your threads run at the same time.</source>
          <target state="translated">&lt;code&gt;join&lt;/code&gt; が呼び出される場所などの小さな詳細は、スレッドが同時に実行されるかどうかに影響を与える可能性があります。</target>
        </trans-unit>
        <trans-unit id="55ae7c282af0b63d2784182817786afd115171b8" translate="yes" xml:space="preserve">
          <source>Smallest finite &lt;code&gt;f32&lt;/code&gt; value.</source>
          <target state="translated">最小の有限 &lt;code&gt;f32&lt;/code&gt; 値。</target>
        </trans-unit>
        <trans-unit id="31524bec0d990ed7e6e9cc110d97ce473f1f88ce" translate="yes" xml:space="preserve">
          <source>Smallest finite &lt;code&gt;f32&lt;/code&gt; value. Use &lt;a href=&quot;../primitive.f32#associatedconstant.MIN&quot;&gt;&lt;code&gt;f32::MIN&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">最小の有限 &lt;code&gt;f32&lt;/code&gt; 値。代わりに&lt;a href=&quot;../primitive.f32#associatedconstant.MIN&quot;&gt; &lt;code&gt;f32::MIN&lt;/code&gt; &lt;/a&gt;使用してください。</target>
        </trans-unit>
        <trans-unit id="3efc1f33cd5c2f54b38a7ec43b4874db20a71c8c" translate="yes" xml:space="preserve">
          <source>Smallest finite &lt;code&gt;f64&lt;/code&gt; value.</source>
          <target state="translated">最小の有限 &lt;code&gt;f64&lt;/code&gt; 値。</target>
        </trans-unit>
        <trans-unit id="0d8fa99bc9f9ec1346732091a253ada7c82f99ed" translate="yes" xml:space="preserve">
          <source>Smallest finite &lt;code&gt;f64&lt;/code&gt; value. Use &lt;a href=&quot;../primitive.f64#associatedconstant.MIN&quot;&gt;&lt;code&gt;f64::MIN&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">最小の有限 &lt;code&gt;f64&lt;/code&gt; 値。代わりに&lt;a href=&quot;../primitive.f64#associatedconstant.MIN&quot;&gt; &lt;code&gt;f64::MIN&lt;/code&gt; &lt;/a&gt;使用してください。</target>
        </trans-unit>
        <trans-unit id="11079465374ccbdcd10e62557b51a729b8f92e19" translate="yes" xml:space="preserve">
          <source>Smallest positive normal &lt;code&gt;f32&lt;/code&gt; value.</source>
          <target state="translated">最小の正の通常の &lt;code&gt;f32&lt;/code&gt; 値。</target>
        </trans-unit>
        <trans-unit id="4f180b6c9245b0fb77d240d191cd241df88d0420" translate="yes" xml:space="preserve">
          <source>Smallest positive normal &lt;code&gt;f32&lt;/code&gt; value. Use &lt;a href=&quot;../primitive.f32#associatedconstant.MIN_POSITIVE&quot;&gt;&lt;code&gt;f32::MIN_POSITIVE&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">最小の正の通常の &lt;code&gt;f32&lt;/code&gt; 値。代わりに&lt;a href=&quot;../primitive.f32#associatedconstant.MIN_POSITIVE&quot;&gt; &lt;code&gt;f32::MIN_POSITIVE&lt;/code&gt; &lt;/a&gt;使用してください。</target>
        </trans-unit>
        <trans-unit id="3ff046c02ca4aa23e9ac84b74059747fa266f688" translate="yes" xml:space="preserve">
          <source>Smallest positive normal &lt;code&gt;f64&lt;/code&gt; value.</source>
          <target state="translated">最小の正の通常の &lt;code&gt;f64&lt;/code&gt; 値。</target>
        </trans-unit>
        <trans-unit id="0470031c3594b76ca12bbf0eedd86a185cf1662a" translate="yes" xml:space="preserve">
          <source>Smallest positive normal &lt;code&gt;f64&lt;/code&gt; value. Use &lt;a href=&quot;../primitive.f64#associatedconstant.MIN_POSITIVE&quot;&gt;&lt;code&gt;f64::MIN_POSITIVE&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">最小の正の通常の &lt;code&gt;f64&lt;/code&gt; 値。代わりに&lt;a href=&quot;../primitive.f64#associatedconstant.MIN_POSITIVE&quot;&gt; &lt;code&gt;f64::MIN_POSITIVE&lt;/code&gt; &lt;/a&gt;使用してください。</target>
        </trans-unit>
        <trans-unit id="2d0cbc1ceeeee81e325edc2271fdb116c132030c" translate="yes" xml:space="preserve">
          <source>Smart Pointers</source>
          <target state="translated">スマートポインタ</target>
        </trans-unit>
        <trans-unit id="5966fa5e593332b4a5ba3c51105fe7097a2c40d7" translate="yes" xml:space="preserve">
          <source>Smart pointers are usually implemented using structs. The characteristic that distinguishes a smart pointer from an ordinary struct is that smart pointers implement the &lt;code&gt;Deref&lt;/code&gt; and &lt;code&gt;Drop&lt;/code&gt; traits. The &lt;code&gt;Deref&lt;/code&gt; trait allows an instance of the smart pointer struct to behave like a reference so you can write code that works with either references or smart pointers. The &lt;code&gt;Drop&lt;/code&gt; trait allows you to customize the code that is run when an instance of the smart pointer goes out of scope. In this chapter, we&amp;rsquo;ll discuss both traits and demonstrate why they&amp;rsquo;re important to smart pointers.</source>
          <target state="translated">スマートポインターは通常、構造体を使用して実装されます。スマートポインターを通常の構造体と区別する特徴は、スマートポインターが &lt;code&gt;Deref&lt;/code&gt; および &lt;code&gt;Drop&lt;/code&gt; トレイトを実装することです。 &lt;code&gt;Deref&lt;/code&gt; トレイトあなたが参照またはスマートポインタのいずれかで動作するコードを書くことができるように、スマートポインタの構造体のインスタンスを参照するように振る舞うことができます。 &lt;code&gt;Drop&lt;/code&gt; トレイトを使用すると、スマートポインタのインスタンスがスコープの外に出たときに実行されるコードをカスタマイズすることができます。この章では、両方の特性について説明し、それらがスマートポインタにとって重要である理由を示します。</target>
        </trans-unit>
        <trans-unit id="72d1aec640db40ccfdc35704271c9e066ad324a7" translate="yes" xml:space="preserve">
          <source>So &lt;code&gt;ref x&lt;/code&gt;, &lt;code&gt;V(ref x)&lt;/code&gt; and &lt;code&gt;[ref x, y]&lt;/code&gt; are all extending patterns, but &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;&amp;amp;ref x&lt;/code&gt; and &lt;code&gt;&amp;amp;(ref x,)&lt;/code&gt; are not.</source>
          <target state="translated">したがって、 &lt;code&gt;ref x&lt;/code&gt; 、 &lt;code&gt;V(ref x)&lt;/code&gt; および &lt;code&gt;[ref x, y]&lt;/code&gt; はすべて拡張パターンですが、 &lt;code&gt;x&lt;/code&gt; 、 &lt;code&gt;&amp;amp;ref x&lt;/code&gt; および &lt;code&gt;&amp;amp;(ref x,)&lt;/code&gt; はそうではありません。</target>
        </trans-unit>
        <trans-unit id="7fafb080819da713ce19c2d9024c6ed5ebb639bb" translate="yes" xml:space="preserve">
          <source>So although a &lt;code&gt;&amp;amp;T&lt;/code&gt; is a single value that stores the memory address of where the &lt;code&gt;T&lt;/code&gt; is located, a &lt;code&gt;&amp;amp;str&lt;/code&gt; is &lt;em&gt;two&lt;/em&gt; values: the address of the &lt;code&gt;str&lt;/code&gt; and its length. As such, we can know the size of a &lt;code&gt;&amp;amp;str&lt;/code&gt; value at compile time: it&amp;rsquo;s twice the length of a &lt;code&gt;usize&lt;/code&gt;. That is, we always know the size of a &lt;code&gt;&amp;amp;str&lt;/code&gt;, no matter how long the string it refers to is. In general, this is the way in which dynamically sized types are used in Rust: they have an extra bit of metadata that stores the size of the dynamic information. The golden rule of dynamically sized types is that we must always put values of dynamically sized types behind a pointer of some kind.</source>
          <target state="translated">したがって、 &lt;code&gt;&amp;amp;T&lt;/code&gt; は &lt;code&gt;T&lt;/code&gt; が配置されている場所のメモリアドレスを格納する単一の値ですが、 &lt;code&gt;&amp;amp;str&lt;/code&gt; は&lt;em&gt;2つの&lt;/em&gt;値、つまり &lt;code&gt;str&lt;/code&gt; のアドレスとその長さです。そのため、コンパイル時に &lt;code&gt;&amp;amp;str&lt;/code&gt; 値のサイズを知ることができます。これは、 &lt;code&gt;usize&lt;/code&gt; の長さの2倍です。つまり、参照する文字列の長さに関係なく、 &lt;code&gt;&amp;amp;str&lt;/code&gt; のサイズは常にわかっています。一般的に、これはRustで動的にサイズ設定されるタイプが使用される方法です。動的な情報のサイズを格納するメタデータの追加ビットがあります。動的サイズの型の黄金律は、動的サイズ型の値を常にある種のポインタの後ろに置かなければならないということです。</target>
        </trans-unit>
        <trans-unit id="c16bbee2a76d4ec726e1d72f7adeb6ec7f08a4b3" translate="yes" xml:space="preserve">
          <source>So far we&amp;rsquo;ve used only the most basic features of Cargo to build, run, and test our code, but it can do a lot more. In this chapter, we&amp;rsquo;ll discuss some of its other, more advanced features to show you how to do the following:</source>
          <target state="translated">これまでは、Cargoの最も基本的な機能のみを使用してコードをビルド、実行、テストしてきましたが、さらに多くのことができます。この章では、次の方法を示すために、その他のより高度な機能について説明します。</target>
        </trans-unit>
        <trans-unit id="2fe8f00779014a1d9cc882174e66ad8f5580069b" translate="yes" xml:space="preserve">
          <source>So far we&amp;rsquo;ve worked only with numbers, but Rust supports letters too. Rust&amp;rsquo;s &lt;code&gt;char&lt;/code&gt; type is the language&amp;rsquo;s most primitive alphabetic type, and the following code shows one way to use it. (Note that &lt;code&gt;char&lt;/code&gt; literals are specified with single quotes, as opposed to string literals, which use double quotes.)</source>
          <target state="translated">これまでのところ、数字のみを扱いましたが、Rustは文字もサポートしています。Rustの &lt;code&gt;char&lt;/code&gt; 型は、この言語の最も原始的なアルファベットの型であり、次のコードはそれを使用する1つの方法を示しています。（ &lt;code&gt;char&lt;/code&gt; リテラルは二重引用符を使用する文字列リテラルとは対照的に、単一引用符で指定されることに注意してください。）</target>
        </trans-unit>
        <trans-unit id="00aafa05a852a94e93631ef3de3a49f8b21ad2df" translate="yes" xml:space="preserve">
          <source>So far, all the examples in this chapter defined multiple modules in one file. When modules get large, you might want to move their definitions to a separate file to make the code easier to navigate.</source>
          <target state="translated">これまでのところ、この章のすべての例では、1 つのファイルで複数のモジュールを定義しています。モジュールが大きくなってきたら、それらの定義を別のファイルに移動させて、コードを簡単にナビゲートできるようにするとよいでしょう。</target>
        </trans-unit>
        <trans-unit id="4ecfb53b194c3f5b057d9cda7a0b0656c0bbd71b" translate="yes" xml:space="preserve">
          <source>So far, we&amp;rsquo;ve demonstrated that calling &lt;code&gt;Rc::clone&lt;/code&gt; increases the &lt;code&gt;strong_count&lt;/code&gt; of an &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; instance, and an &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; instance is only cleaned up if its &lt;code&gt;strong_count&lt;/code&gt; is 0. You can also create a &lt;em&gt;weak reference&lt;/em&gt; to the value within an &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; instance by calling &lt;code&gt;Rc::downgrade&lt;/code&gt; and passing a reference to the &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt;. When you call &lt;code&gt;Rc::downgrade&lt;/code&gt;, you get a smart pointer of type &lt;code&gt;Weak&amp;lt;T&amp;gt;&lt;/code&gt;. Instead of increasing the &lt;code&gt;strong_count&lt;/code&gt; in the &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; instance by 1, calling &lt;code&gt;Rc::downgrade&lt;/code&gt; increases the &lt;code&gt;weak_count&lt;/code&gt; by 1. The &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; type uses &lt;code&gt;weak_count&lt;/code&gt; to keep track of how many &lt;code&gt;Weak&amp;lt;T&amp;gt;&lt;/code&gt; references exist, similar to &lt;code&gt;strong_count&lt;/code&gt;. The difference is the &lt;code&gt;weak_count&lt;/code&gt; doesn&amp;rsquo;t need to be 0 for the &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; instance to be cleaned up.</source>
          <target state="translated">これまでのところ、我々は呼び出すことが実証されました &lt;code&gt;Rc::clone&lt;/code&gt; 増加 &lt;code&gt;strong_count&lt;/code&gt; の &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; のインスタンスを、そして &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; その場合は、インスタンスにのみクリーンアップされ &lt;code&gt;strong_count&lt;/code&gt; はあなたがまた作成することができます0です&lt;em&gt;弱参照&lt;/em&gt;にします &lt;code&gt;Rc::downgrade&lt;/code&gt; を呼び出して &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; への参照を渡すことにより、 &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; インスタンス内の値。 &lt;code&gt;Rc::downgrade&lt;/code&gt; を呼び出すと、 &lt;code&gt;Weak&amp;lt;T&amp;gt;&lt;/code&gt; 型のスマートポインターが取得されます。代わり増加の &lt;code&gt;strong_count&lt;/code&gt; で &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; を呼び出す、1インスタンスを &lt;code&gt;Rc::downgrade&lt;/code&gt; 増加 &lt;code&gt;weak_count&lt;/code&gt; 1.で &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; 型の用途は &lt;code&gt;weak_count&lt;/code&gt; を追跡するためにどのように多くの &lt;code&gt;Weak&amp;lt;T&amp;gt;&lt;/code&gt; 参照が存在する、と似 &lt;code&gt;strong_count&lt;/code&gt; 。違いは、 &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; インスタンスをクリーンアップするために、 &lt;code&gt;weak_count&lt;/code&gt; を 0にする必要がないことです。</target>
        </trans-unit>
        <trans-unit id="5d415f69b7962c9c2a42c33ce1eada2a42f0bbd5" translate="yes" xml:space="preserve">
          <source>So far, we&amp;rsquo;ve extracted the logic responsible for parsing the command line arguments from &lt;code&gt;main&lt;/code&gt; and placed it in the &lt;code&gt;parse_config&lt;/code&gt; function. Doing so helped us to see that the &lt;code&gt;query&lt;/code&gt; and &lt;code&gt;filename&lt;/code&gt; values were related and that relationship should be conveyed in our code. We then added a &lt;code&gt;Config&lt;/code&gt; struct to name the related purpose of &lt;code&gt;query&lt;/code&gt; and &lt;code&gt;filename&lt;/code&gt; and to be able to return the values&amp;rsquo; names as struct field names from the &lt;code&gt;parse_config&lt;/code&gt; function.</source>
          <target state="translated">ここまでは、コマンドライン引数を解析するロジックを &lt;code&gt;main&lt;/code&gt; から抽出し、それを &lt;code&gt;parse_config&lt;/code&gt; 関数に配置しました。そうすることで、 &lt;code&gt;query&lt;/code&gt; と &lt;code&gt;filename&lt;/code&gt; 値が関連していて、その関係をコードで伝える必要があることがわかりました。次に、 &lt;code&gt;Config&lt;/code&gt; 構造体を追加して、 &lt;code&gt;query&lt;/code&gt; と &lt;code&gt;filename&lt;/code&gt; 名の関連する目的に名前を付け、値の名前を &lt;code&gt;parse_config&lt;/code&gt; 関数から構造体フィールド名として返すことができるようにしました。</target>
        </trans-unit>
        <trans-unit id="31792465eea309944f93175f35f9662ee847ff84" translate="yes" xml:space="preserve">
          <source>So far, we&amp;rsquo;ve only defined structs to hold owned types. It&amp;rsquo;s possible for structs to hold references, but in that case we would need to add a lifetime annotation on every reference in the struct&amp;rsquo;s definition. Listing 10-25 has a struct named &lt;code&gt;ImportantExcerpt&lt;/code&gt; that holds a string slice.</source>
          <target state="translated">これまで、所有する型を保持するための構造体のみを定義してきました。構造体が参照を保持することは可能ですが、その場合、構造体の定義内のすべての参照にライフタイムアノテーションを追加する必要があります。リスト10-25は文字列スライスを保持する &lt;code&gt;ImportantExcerpt&lt;/code&gt; という名前の構造体を持っています。</target>
        </trans-unit>
        <trans-unit id="5e4c617f5787ec277cad1062392545472df08030" translate="yes" xml:space="preserve">
          <source>So far, we&amp;rsquo;ve written tests that panic when they fail. We can also write tests that use &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt;! Here&amp;rsquo;s the test from Listing 11-1, rewritten to use &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt; and return an &lt;code&gt;Err&lt;/code&gt; instead of panicking:</source>
          <target state="translated">これまで、失敗したときにパニックになるテストを作成しました。 &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt; を使用するテストを書くこともできます！リスト11-1のテストを以下に示します。パニックする代わりに &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt; を使用して &lt;code&gt;Err&lt;/code&gt; を返すように書き直しています。</target>
        </trans-unit>
        <trans-unit id="c8622855d6f00ed43ee6c71fb4080061585e00e0" translate="yes" xml:space="preserve">
          <source>So for example there is a &lt;a href=&quot;primitive.i32&quot;&gt;page for the primitive type &lt;code&gt;i32&lt;/code&gt;&lt;/a&gt; that lists all the methods that can be called on 32-bit integers (very useful), and there is a &lt;a href=&quot;i32/index&quot;&gt;page for the module &lt;code&gt;std::i32&lt;/code&gt;&lt;/a&gt; that documents the constant values &lt;a href=&quot;i32/constant.min&quot;&gt;&lt;code&gt;MIN&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;i32/constant.max&quot;&gt;&lt;code&gt;MAX&lt;/code&gt;&lt;/a&gt; (rarely useful).</source>
          <target state="translated">だから、例えばそこにある&lt;a href=&quot;primitive.i32&quot;&gt;プリミティブ型のためのページ &lt;code&gt;i32&lt;/code&gt; &lt;/a&gt;リストのすべての32ビット整数（非常に便利）で呼び出すことができるメソッド、およびそこにあることを&lt;a href=&quot;i32/index&quot;&gt;モジュール用のページは &lt;code&gt;std::i32&lt;/code&gt; &lt;/a&gt;文書定数が値という&lt;a href=&quot;i32/constant.min&quot;&gt; &lt;code&gt;MIN&lt;/code&gt; &lt;/a&gt;とは&lt;a href=&quot;i32/constant.max&quot;&gt; &lt;code&gt;MAX&lt;/code&gt; &lt;/a&gt;（めったに役に立ちません）。</target>
        </trans-unit>
        <trans-unit id="2555bdc669f18a60939e157232ea5e5688ffc8a7" translate="yes" xml:space="preserve">
          <source>So for the first solution, you can do it by replacing &lt;code&gt;'a&lt;/code&gt; with &lt;code&gt;'a: 'b&lt;/code&gt;:</source>
          <target state="translated">したがって、最初の解決策では、 &lt;code&gt;'a&lt;/code&gt; を &lt;code&gt;'a: 'b&lt;/code&gt; ：に置き換えることでそれを行うことができます。</target>
        </trans-unit>
        <trans-unit id="ab510d0df8ff03139c6bde1653955915d7b63d9c" translate="yes" xml:space="preserve">
          <source>So how do we get a published post? We want to enforce the rule that a draft post has to be reviewed and approved before it can be published. A post in the pending review state should still not display any content. Let&amp;rsquo;s implement these constraints by adding another struct, &lt;code&gt;PendingReviewPost&lt;/code&gt;, defining the &lt;code&gt;request_review&lt;/code&gt; method on &lt;code&gt;DraftPost&lt;/code&gt; to return a &lt;code&gt;PendingReviewPost&lt;/code&gt;, and defining an &lt;code&gt;approve&lt;/code&gt; method on &lt;code&gt;PendingReviewPost&lt;/code&gt; to return a &lt;code&gt;Post&lt;/code&gt;, as shown in Listing 17-20:</source>
          <target state="translated">それでは、どのようにして公開された投稿を取得しますか？投稿の下書きは、公開する前にレビューして承認する必要があるというルールを適用したいと考えています。保留中のレビュー状態の投稿には、コンテンツが表示されません。のは、別の構造体を追加することによって、これらの制約を実装してみましょう &lt;code&gt;PendingReviewPost&lt;/code&gt; を、定義 &lt;code&gt;request_review&lt;/code&gt; の上の方法を &lt;code&gt;DraftPost&lt;/code&gt; 返すように &lt;code&gt;PendingReviewPost&lt;/code&gt; を、と定義する &lt;code&gt;approve&lt;/code&gt; のメソッドを &lt;code&gt;PendingReviewPost&lt;/code&gt; 返すために &lt;code&gt;Post&lt;/code&gt; リスト17-20で示されるように、：</target>
        </trans-unit>
        <trans-unit id="41cfc4a146acbbdc3e7cbb1dc74c09ee0aee7f91" translate="yes" xml:space="preserve">
          <source>So how do you decide when you should call &lt;code&gt;panic!&lt;/code&gt; and when you should return &lt;code&gt;Result&lt;/code&gt;? When code panics, there&amp;rsquo;s no way to recover. You could call &lt;code&gt;panic!&lt;/code&gt; for any error situation, whether there&amp;rsquo;s a possible way to recover or not, but then you&amp;rsquo;re making the decision on behalf of the code calling your code that a situation is unrecoverable. When you choose to return a &lt;code&gt;Result&lt;/code&gt; value, you give the calling code options rather than making the decision for it. The calling code could choose to attempt to recover in a way that&amp;rsquo;s appropriate for its situation, or it could decide that an &lt;code&gt;Err&lt;/code&gt; value in this case is unrecoverable, so it can call &lt;code&gt;panic!&lt;/code&gt; and turn your recoverable error into an unrecoverable one. Therefore, returning &lt;code&gt;Result&lt;/code&gt; is a good default choice when you&amp;rsquo;re defining a function that might fail.</source>
          <target state="translated">では、どのように &lt;code&gt;panic!&lt;/code&gt; を呼び出す必要があるかをどのように決定しますか？いつ &lt;code&gt;Result&lt;/code&gt; を返すべきですか？コードパニックが発生した場合、回復する方法はありません。あなたは &lt;code&gt;panic!&lt;/code&gt; と呼ぶことができます！エラーの状況については、回復する方法があるかどうかにかかわらず、コードを呼び出すコードに代わって、状況を回復できないと判断します。 &lt;code&gt;Result&lt;/code&gt; 値を返すことを選択した場合、その決定を行うのではなく、呼び出しコードのオプションを指定します。呼び出し元のコードは、状況に適した方法で回復を試みるか、この場合の &lt;code&gt;Err&lt;/code&gt; 値が回復不能であると判断して &lt;code&gt;panic!&lt;/code&gt; を呼び出す可能性があります。回復可能なエラーを回復不可能なエラーに変えます。したがって、失敗する可能性のある関数を定義する場合は、 &lt;code&gt;Result&lt;/code&gt; を返すのが適切なデフォルトの選択です。</target>
        </trans-unit>
        <trans-unit id="7bee6cab338aeb3ff333063f830e83a375530ced" translate="yes" xml:space="preserve">
          <source>So how do you know which type of integer to use? If you&amp;rsquo;re unsure, Rust&amp;rsquo;s defaults are generally good choices, and integer types default to &lt;code&gt;i32&lt;/code&gt;: this type is generally the fastest, even on 64-bit systems. The primary situation in which you&amp;rsquo;d use &lt;code&gt;isize&lt;/code&gt; or &lt;code&gt;usize&lt;/code&gt; is when indexing some sort of collection.</source>
          <target state="translated">では、使用する整数のタイプをどのようにして知るのでしょうか。よくわからない場合は、Rustのデフォルトが一般的に適切な選択肢であり、整数型のデフォルトは &lt;code&gt;i32&lt;/code&gt; です。この型は、64ビットシステムであっても、一般的に最速です。 &lt;code&gt;isize&lt;/code&gt; または &lt;code&gt;usize&lt;/code&gt; を使用する主な状況は、ある種のコレクションにインデックスを付けるときです。</target>
        </trans-unit>
        <trans-unit id="ff2c62bc2f0b0ef57e58a2f6531efebdcbc69010" translate="yes" xml:space="preserve">
          <source>So how do you learn about these new features? Rust&amp;rsquo;s development model follows a &lt;em&gt;Request For Comments (RFC) process&lt;/em&gt;. If you&amp;rsquo;d like an improvement in Rust, you can write up a proposal, called an RFC.</source>
          <target state="translated">では、これらの新機能についてどのように学びますか？Rustの開発モデルは、&lt;em&gt;Request for Comments（RFC）プロセスに&lt;/em&gt;従い&lt;em&gt;ます&lt;/em&gt;。Rustの改善が必要な場合は、RFCと呼ばれる提案を作成できます。</target>
        </trans-unit>
        <trans-unit id="a431eb6b7f65a188b9084e0b248314b342aef52a" translate="yes" xml:space="preserve">
          <source>So instead of &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt;, we&amp;rsquo;ll make the type of &lt;code&gt;parent&lt;/code&gt; use &lt;code&gt;Weak&amp;lt;T&amp;gt;&lt;/code&gt;, specifically a &lt;code&gt;RefCell&amp;lt;Weak&amp;lt;Node&amp;gt;&amp;gt;&lt;/code&gt;. Now our &lt;code&gt;Node&lt;/code&gt; struct definition looks like this:</source>
          <target state="translated">だから、代わりに &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; 、我々はの種類作ってあげる &lt;code&gt;parent&lt;/code&gt; 使用 &lt;code&gt;Weak&amp;lt;T&amp;gt;&lt;/code&gt; 、特に &lt;code&gt;RefCell&amp;lt;Weak&amp;lt;Node&amp;gt;&amp;gt;&lt;/code&gt; 。今私達の &lt;code&gt;Node&lt;/code&gt; 、このような構造体定義ルックス：</target>
        </trans-unit>
        <trans-unit id="a3d7c32f4a97177e667e63247652c2041a2a6cb0" translate="yes" xml:space="preserve">
          <source>So long as &lt;code&gt;T: Sized&lt;/code&gt;, a &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; is guaranteed to be represented as a single pointer and is also ABI-compatible with C pointers (i.e. the C type &lt;code&gt;T*&lt;/code&gt;). This means that if you have extern &quot;C&quot; Rust functions that will be called from C, you can define those Rust functions using &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; types, and use &lt;code&gt;T*&lt;/code&gt; as corresponding type on the C side. As an example, consider this C header which declares functions that create and destroy some kind of &lt;code&gt;Foo&lt;/code&gt; value:</source>
          <target state="translated">&lt;code&gt;T: Sized&lt;/code&gt; である限り、 &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; は単一のポインターとして表されることが保証され、Cポインター（つまり、Cタイプ &lt;code&gt;T*&lt;/code&gt; ）ともABI互換です。つまり、Cから呼び出されるextern &quot;C&quot; Rust関数がある場合、 &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; タイプを使用してそれらのRust関数を定義し、C側で対応するタイプとして &lt;code&gt;T*&lt;/code&gt; を使用できます。例として、ある種の &lt;code&gt;Foo&lt;/code&gt; 値を作成および破棄する関数を宣言するこのCヘッダーについて考えてみます。</target>
        </trans-unit>
        <trans-unit id="e7d94a46d4c8df2f4221ca14314326a2bd0b53cc" translate="yes" xml:space="preserve">
          <source>So now that the purpose of the &lt;code&gt;parse_config&lt;/code&gt; function is to create a &lt;code&gt;Config&lt;/code&gt; instance, we can change &lt;code&gt;parse_config&lt;/code&gt; from a plain function to a function named &lt;code&gt;new&lt;/code&gt; that is associated with the &lt;code&gt;Config&lt;/code&gt; struct. Making this change will make the code more idiomatic. We can create instances of types in the standard library, such as &lt;code&gt;String&lt;/code&gt;, by calling &lt;code&gt;String::new&lt;/code&gt;. Similarly, by changing &lt;code&gt;parse_config&lt;/code&gt; into a &lt;code&gt;new&lt;/code&gt; function associated with &lt;code&gt;Config&lt;/code&gt;, we&amp;rsquo;ll be able to create instances of &lt;code&gt;Config&lt;/code&gt; by calling &lt;code&gt;Config::new&lt;/code&gt;. Listing 12-7 shows the changes we need to make.</source>
          <target state="translated">&lt;code&gt;parse_config&lt;/code&gt; 関数の目的は &lt;code&gt;Config&lt;/code&gt; インスタンスを作成することなので、 &lt;code&gt;parse_config&lt;/code&gt; をプレーン関数から、 &lt;code&gt;Config&lt;/code&gt; 構造体に関連付けられている &lt;code&gt;new&lt;/code&gt; という名前の関数に変更できます。この変更を行うと、コードがより慣用的になります。 &lt;code&gt;String::new&lt;/code&gt; 呼び出すことにより、標準ライブラリに &lt;code&gt;String&lt;/code&gt; などの型のインスタンスを作成できます。同様に、変更することで &lt;code&gt;parse_config&lt;/code&gt; をに &lt;code&gt;new&lt;/code&gt; と関連する機能 &lt;code&gt;Config&lt;/code&gt; を、我々はのインスタンスを作成することができます &lt;code&gt;Config&lt;/code&gt; 呼び出すことによって、 &lt;code&gt;Config::new&lt;/code&gt; 。リスト12-7は私たちに必要な変更を示しています。</target>
        </trans-unit>
        <trans-unit id="bf87019d2ee31b20bd27453a9815c39765179193" translate="yes" xml:space="preserve">
          <source>So the borrow expressions in &lt;code&gt;&amp;amp;mut 0&lt;/code&gt;, &lt;code&gt;(&amp;amp;1, &amp;amp;mut 2)&lt;/code&gt;, and &lt;code&gt;Some { 0: &amp;amp;mut 3 }&lt;/code&gt; are all extending expressions. The borrows in &lt;code&gt;&amp;amp;0 + &amp;amp;1&lt;/code&gt; and &lt;code&gt;Some(&amp;amp;mut 0)&lt;/code&gt; are not: the latter is syntactically a function call expression.</source>
          <target state="translated">したがって、 &lt;code&gt;&amp;amp;mut 0&lt;/code&gt; 、 &lt;code&gt;(&amp;amp;1, &amp;amp;mut 2)&lt;/code&gt; 、および &lt;code&gt;Some { 0: &amp;amp;mut 3 }&lt;/code&gt; の借用式は、すべて拡張式です。 &lt;code&gt;&amp;amp;0 + &amp;amp;1&lt;/code&gt; と &lt;code&gt;Some(&amp;amp;mut 0)&lt;/code&gt; の借用はそうではありません。後者は、構文的には関数呼び出し式です。</target>
        </trans-unit>
        <trans-unit id="f074b0771df976fb716af57669f38fc08493992b" translate="yes" xml:space="preserve">
          <source>So this, for example, can only be done on types implementing &lt;code&gt;Unpin&lt;/code&gt;:</source>
          <target state="translated">したがって、たとえば、これは &lt;code&gt;Unpin&lt;/code&gt; を実装する型でのみ実行できます。</target>
        </trans-unit>
        <trans-unit id="66c66bb788c3f0aec3e67d69032df19434a61113" translate="yes" xml:space="preserve">
          <source>So to fix the previous code example:</source>
          <target state="translated">そこで、先ほどのコード例を修正するために</target>
        </trans-unit>
        <trans-unit id="7e77e163b0a6f38404491eda0a512dc9b1b67ed8" translate="yes" xml:space="preserve">
          <source>So we know we want to update the definition of &lt;code&gt;Worker&lt;/code&gt; like this:</source>
          <target state="translated">したがって、 &lt;code&gt;Worker&lt;/code&gt; の定義を次のように更新する必要があることがわかります。</target>
        </trans-unit>
        <trans-unit id="f4be5fd758b3b88db54e58e5c1f6997e8740355a" translate="yes" xml:space="preserve">
          <source>So what do we do? In this case, you already know the answer: we make the types of &lt;code&gt;s1&lt;/code&gt; and &lt;code&gt;s2&lt;/code&gt; a &lt;code&gt;&amp;amp;str&lt;/code&gt; rather than a &lt;code&gt;str&lt;/code&gt;. Recall that in the &lt;a href=&quot;ch04-03-slices#string-slices&quot;&gt;&amp;ldquo;String Slices&amp;rdquo;&lt;/a&gt; section of Chapter 4, we said the slice data structure stores the starting position and the length of the slice.</source>
          <target state="translated">どうしようか？この場合、あなたはすでに答えを知っている：私たちはの種類作る &lt;code&gt;s1&lt;/code&gt; および &lt;code&gt;s2&lt;/code&gt; A &lt;code&gt;&amp;amp;str&lt;/code&gt; のではなく、 &lt;code&gt;str&lt;/code&gt; 。第4章の&lt;a href=&quot;ch04-03-slices#string-slices&quot;&gt;「文字列スライス」&lt;/a&gt;セクションでは、スライスのデータ構造にスライスの開始位置と長さが格納されていることを思い出してください。</target>
        </trans-unit>
        <trans-unit id="c32c5415e3271d676a4ba9d1e43c6961dc8eb8d5" translate="yes" xml:space="preserve">
          <source>So what happens if we try to modify something we&amp;rsquo;re borrowing? Try the code in Listing 4-6. Spoiler alert: it doesn&amp;rsquo;t work!</source>
          <target state="translated">では、借りているものを修正しようとするとどうなるでしょうか。リスト4-6のコードを試してください。ネタバレ注意：動作しません！</target>
        </trans-unit>
        <trans-unit id="6ad1c29cb1977f541537e5923d038a2f846397f6" translate="yes" xml:space="preserve">
          <source>So what types are &lt;code&gt;Copy&lt;/code&gt;? You can check the documentation for the given type to be sure, but as a general rule, any group of simple scalar values can be &lt;code&gt;Copy&lt;/code&gt;, and nothing that requires allocation or is some form of resource is &lt;code&gt;Copy&lt;/code&gt;. Here are some of the types that are &lt;code&gt;Copy&lt;/code&gt;:</source>
          <target state="translated">では、 &lt;code&gt;Copy&lt;/code&gt; はどのようなタイプですか？確実に特定のタイプのドキュメントを確認できますが、一般的なルールとして、単純なスカラー値のグループはすべて &lt;code&gt;Copy&lt;/code&gt; にすることができ、割り当てを必要とするものやリソースの何らかの形式のものは &lt;code&gt;Copy&lt;/code&gt; です。次に、 &lt;code&gt;Copy&lt;/code&gt; であるタイプの一部を示します。</target>
        </trans-unit>
        <trans-unit id="5f2697b588c95b0be45c06b59af3829a34d25d70" translate="yes" xml:space="preserve">
          <source>So what types implement the &lt;code&gt;Copy&lt;/code&gt; trait? You can check the documentation for the given type to be sure, but as a general rule, any group of simple scalar values can implement &lt;code&gt;Copy&lt;/code&gt;, and nothing that requires allocation or is some form of resource can implement &lt;code&gt;Copy&lt;/code&gt;. Here are some of the types that implement &lt;code&gt;Copy&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7d596654860b048147570b1da4292f50a003e3c" translate="yes" xml:space="preserve">
          <source>So, for example, the following is not allowed:</source>
          <target state="translated">そのため、例えば以下のようなことは許されません。</target>
        </trans-unit>
        <trans-unit id="8972432c4affa16f8f98b7b09f7f4b89c9affbb9" translate="yes" xml:space="preserve">
          <source>So, how do you get the &lt;code&gt;T&lt;/code&gt; value out of a &lt;code&gt;Some&lt;/code&gt; variant when you have a value of type &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; so you can use that value? The &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; enum has a large number of methods that are useful in a variety of situations; you can check them out in &lt;a href=&quot;../std/option/enum.option&quot;&gt;its documentation&lt;/a&gt;. Becoming familiar with the methods on &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; will be extremely useful in your journey with Rust.</source>
          <target state="translated">では、 &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; 型の値がある場合、 &lt;code&gt;Some&lt;/code&gt; バリアントから &lt;code&gt;T&lt;/code&gt; 値を取得して、その値を使用するにはどうすればよいでしょうか。 &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; 列挙は、種々の状況において有用である多数の方法を有しています。&lt;a href=&quot;../std/option/enum.option&quot;&gt;ドキュメント&lt;/a&gt;で確認できます。 &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; メソッドに慣れることは、Rustを使用する際に非常に役立ちます。</target>
        </trans-unit>
        <trans-unit id="6054892d83d4ff63740ad87325aa1edbc9c2ed83" translate="yes" xml:space="preserve">
          <source>So, in order to solve this error, either use statics which are &lt;code&gt;Sync&lt;/code&gt;:</source>
          <target state="translated">したがって、このエラーを解決するには、 &lt;code&gt;Sync&lt;/code&gt; である staticを使用します。</target>
        </trans-unit>
        <trans-unit id="3efb8fcaca7cf44d29993d4584dcd65be6752ad8" translate="yes" xml:space="preserve">
          <source>So, what&amp;rsquo;s the difference here? Why can &lt;code&gt;String&lt;/code&gt; be mutated but literals cannot? The difference is how these two types deal with memory.</source>
          <target state="translated">それで、ここの違いは何ですか？なぜできる &lt;code&gt;String&lt;/code&gt; 変異させることが、リテラルはできないのですか？違いは、これらの2つのタイプがメモリを処理する方法です。</target>
        </trans-unit>
        <trans-unit id="982f4e650d509676fd2fc1befb07f1f97185e427" translate="yes" xml:space="preserve">
          <source>SocketAddr</source>
          <target state="translated">SocketAddr</target>
        </trans-unit>
        <trans-unit id="7b76e6fef13b8c151a69cc1489b6030db22c8df5" translate="yes" xml:space="preserve">
          <source>SocketAddr::borrow</source>
          <target state="translated">SocketAddr::borrow</target>
        </trans-unit>
        <trans-unit id="05e5c4f99fe9e01eb67955d1e0c15c5de404bc09" translate="yes" xml:space="preserve">
          <source>SocketAddr::borrow_mut</source>
          <target state="translated">SocketAddr::borrow_mut</target>
        </trans-unit>
        <trans-unit id="10b9b6dd1dca90bba53547883240ba388344d678" translate="yes" xml:space="preserve">
          <source>SocketAddr::clone</source>
          <target state="translated">SocketAddr::clone</target>
        </trans-unit>
        <trans-unit id="7e82ae1ad37713c7946ec73ae8e4a4b129b91b5d" translate="yes" xml:space="preserve">
          <source>SocketAddr::clone_from</source>
          <target state="translated">SocketAddr::clone_from</target>
        </trans-unit>
        <trans-unit id="fa9172cd6e3157231bd216e413365c39529dcb5b" translate="yes" xml:space="preserve">
          <source>SocketAddr::clone_into</source>
          <target state="translated">SocketAddr::clone_into</target>
        </trans-unit>
        <trans-unit id="8c755b826cc428e128fb193cc9198929fc151997" translate="yes" xml:space="preserve">
          <source>SocketAddr::eq</source>
          <target state="translated">SocketAddr::eq</target>
        </trans-unit>
        <trans-unit id="7eea75763a3736da07cda2f6f9a742ff5cc2508b" translate="yes" xml:space="preserve">
          <source>SocketAddr::fmt</source>
          <target state="translated">SocketAddr::fmt</target>
        </trans-unit>
        <trans-unit id="9746b01dbeb72b517f1582ab0ba63bf19762561d" translate="yes" xml:space="preserve">
          <source>SocketAddr::from</source>
          <target state="translated">SocketAddr::from</target>
        </trans-unit>
        <trans-unit id="7bab699fce83466661a1331294a6a61fffdb12c0" translate="yes" xml:space="preserve">
          <source>SocketAddr::from_str</source>
          <target state="translated">SocketAddr::from_str</target>
        </trans-unit>
        <trans-unit id="d0abc27d9ac8e920ff65d558ec4fab556aeb72f0" translate="yes" xml:space="preserve">
          <source>SocketAddr::hash</source>
          <target state="translated">SocketAddr::hash</target>
        </trans-unit>
        <trans-unit id="57f9440e0b1557e8a687b6cbbe68aebc372b810d" translate="yes" xml:space="preserve">
          <source>SocketAddr::hash_slice</source>
          <target state="translated">SocketAddr::hash_slice</target>
        </trans-unit>
        <trans-unit id="359dc56742e672e37102044d1a5837358b05c259" translate="yes" xml:space="preserve">
          <source>SocketAddr::into</source>
          <target state="translated">SocketAddr::into</target>
        </trans-unit>
        <trans-unit id="a72bff1fc4a8d70b73e024e3e77a5a7e15b3d8ef" translate="yes" xml:space="preserve">
          <source>SocketAddr::ip</source>
          <target state="translated">SocketAddr::ip</target>
        </trans-unit>
        <trans-unit id="df313c9acddcd250f8a5dd524b4694a23c721582" translate="yes" xml:space="preserve">
          <source>SocketAddr::is_ipv4</source>
          <target state="translated">SocketAddr::is_ipv4</target>
        </trans-unit>
        <trans-unit id="724fde3cc837842047612e83a0b060b424072291" translate="yes" xml:space="preserve">
          <source>SocketAddr::is_ipv6</source>
          <target state="translated">SocketAddr::is_ipv6</target>
        </trans-unit>
        <trans-unit id="b48285083c13b1d25e0fd32d224dd7224d4b5713" translate="yes" xml:space="preserve">
          <source>SocketAddr::ne</source>
          <target state="translated">SocketAddr::ne</target>
        </trans-unit>
        <trans-unit id="97b42db1f2e774c922a5711eb4bd452eb11e4a7a" translate="yes" xml:space="preserve">
          <source>SocketAddr::new</source>
          <target state="translated">SocketAddr::new</target>
        </trans-unit>
        <trans-unit id="f69565f34ef1fada1cb2f0d63fc92ba0efa235b9" translate="yes" xml:space="preserve">
          <source>SocketAddr::port</source>
          <target state="translated">SocketAddr::port</target>
        </trans-unit>
        <trans-unit id="774b4e1f005f22ee8c0b028c287f01dbea22e030" translate="yes" xml:space="preserve">
          <source>SocketAddr::set_ip</source>
          <target state="translated">SocketAddr::set_ip</target>
        </trans-unit>
        <trans-unit id="bec32854bf21e824a4fa9a0d7b44db616df52318" translate="yes" xml:space="preserve">
          <source>SocketAddr::set_port</source>
          <target state="translated">SocketAddr::set_port</target>
        </trans-unit>
        <trans-unit id="fe4346a026d7ffb567366d36af1b79417d962103" translate="yes" xml:space="preserve">
          <source>SocketAddr::to_owned</source>
          <target state="translated">SocketAddr::to_owned</target>
        </trans-unit>
        <trans-unit id="7b71632e29ab8b9a928be8a15d7afca736749a51" translate="yes" xml:space="preserve">
          <source>SocketAddr::to_socket_addrs</source>
          <target state="translated">SocketAddr::to_socket_addrs</target>
        </trans-unit>
        <trans-unit id="4f6b5c00f68c140936e9f3f32ee6059cc024fad4" translate="yes" xml:space="preserve">
          <source>SocketAddr::to_string</source>
          <target state="translated">SocketAddr::to_string</target>
        </trans-unit>
        <trans-unit id="c6ca6f5af2b971219538a2091097aaa41b1dc436" translate="yes" xml:space="preserve">
          <source>SocketAddr::try_from</source>
          <target state="translated">SocketAddr::try_from</target>
        </trans-unit>
        <trans-unit id="716746fffcc0460fa5b5b7b39b39fed16701c2d4" translate="yes" xml:space="preserve">
          <source>SocketAddr::try_into</source>
          <target state="translated">SocketAddr::try_into</target>
        </trans-unit>
        <trans-unit id="d4f1c48b673e9c03d6894ddac4a6f76e75db3196" translate="yes" xml:space="preserve">
          <source>SocketAddr::type_id</source>
          <target state="translated">SocketAddr::type_id</target>
        </trans-unit>
        <trans-unit id="2e411fdc7242c1962d9bdc180a582206cc8b1d30" translate="yes" xml:space="preserve">
          <source>SocketAddrV4</source>
          <target state="translated">SocketAddrV4</target>
        </trans-unit>
        <trans-unit id="75e3b74af97586957cb6bbcbf99b5e8d1adde136" translate="yes" xml:space="preserve">
          <source>SocketAddrV4::borrow</source>
          <target state="translated">SocketAddrV4::borrow</target>
        </trans-unit>
        <trans-unit id="4d361b6e156dc3dfb56ca0e8e0dc4e0a5b168d12" translate="yes" xml:space="preserve">
          <source>SocketAddrV4::borrow_mut</source>
          <target state="translated">SocketAddrV4::borrow_mut</target>
        </trans-unit>
        <trans-unit id="a1fd56f672c607cb9273c197c816a7a4e2905e2a" translate="yes" xml:space="preserve">
          <source>SocketAddrV4::clone</source>
          <target state="translated">SocketAddrV4::clone</target>
        </trans-unit>
        <trans-unit id="3a37da63ee2c37711495f1eebc7170e9d20c2609" translate="yes" xml:space="preserve">
          <source>SocketAddrV4::clone_from</source>
          <target state="translated">SocketAddrV4::clone_from</target>
        </trans-unit>
        <trans-unit id="eb0a32006835b5434f6c3ba39cf20d627c257026" translate="yes" xml:space="preserve">
          <source>SocketAddrV4::clone_into</source>
          <target state="translated">SocketAddrV4::clone_into</target>
        </trans-unit>
        <trans-unit id="c1b4fe28184db8300439d430dc3c94116411c119" translate="yes" xml:space="preserve">
          <source>SocketAddrV4::eq</source>
          <target state="translated">SocketAddrV4::eq</target>
        </trans-unit>
        <trans-unit id="5304bbfe77b1b3ff9948bed9e44e2ba835bc1752" translate="yes" xml:space="preserve">
          <source>SocketAddrV4::fmt</source>
          <target state="translated">SocketAddrV4::fmt</target>
        </trans-unit>
        <trans-unit id="ba7642e89ba5ff37a9528b98decffb956584dd07" translate="yes" xml:space="preserve">
          <source>SocketAddrV4::from</source>
          <target state="translated">SocketAddrV4::from</target>
        </trans-unit>
        <trans-unit id="d54305f480b5f9920ddea513082584583ab11f04" translate="yes" xml:space="preserve">
          <source>SocketAddrV4::from_str</source>
          <target state="translated">SocketAddrV4::from_str</target>
        </trans-unit>
        <trans-unit id="a61d7b0786ad97e5ccdc2d9753e797a4e92ceab5" translate="yes" xml:space="preserve">
          <source>SocketAddrV4::hash</source>
          <target state="translated">SocketAddrV4::hash</target>
        </trans-unit>
        <trans-unit id="36cdd68ef7364910489bb755ad11d3244886227e" translate="yes" xml:space="preserve">
          <source>SocketAddrV4::hash_slice</source>
          <target state="translated">SocketAddrV4::hash_slice</target>
        </trans-unit>
        <trans-unit id="265192c0953c9652e01d051111cd4c4e244a073a" translate="yes" xml:space="preserve">
          <source>SocketAddrV4::into</source>
          <target state="translated">SocketAddrV4::into</target>
        </trans-unit>
        <trans-unit id="bcc9b01a8b6ac6bf9cb18abecd80c612d96f295a" translate="yes" xml:space="preserve">
          <source>SocketAddrV4::ip</source>
          <target state="translated">SocketAddrV4::ip</target>
        </trans-unit>
        <trans-unit id="5c7bb0a2c9ab349475d12c0f3a7876c8313171b3" translate="yes" xml:space="preserve">
          <source>SocketAddrV4::ne</source>
          <target state="translated">SocketAddrV4::ne</target>
        </trans-unit>
        <trans-unit id="7648d57b2179c40c2995d5dcef0f39436334e915" translate="yes" xml:space="preserve">
          <source>SocketAddrV4::new</source>
          <target state="translated">SocketAddrV4::new</target>
        </trans-unit>
        <trans-unit id="34fa3c9cd9b21d78c26a87925462b3a1f0dd159a" translate="yes" xml:space="preserve">
          <source>SocketAddrV4::port</source>
          <target state="translated">SocketAddrV4::port</target>
        </trans-unit>
        <trans-unit id="6b1645a03590fa2c425bcd5e3d55a48fe687747b" translate="yes" xml:space="preserve">
          <source>SocketAddrV4::set_ip</source>
          <target state="translated">SocketAddrV4::set_ip</target>
        </trans-unit>
        <trans-unit id="442bc9fb004c3435d748d287fb4e657d12819afc" translate="yes" xml:space="preserve">
          <source>SocketAddrV4::set_port</source>
          <target state="translated">SocketAddrV4::set_port</target>
        </trans-unit>
        <trans-unit id="f94c8e8bc5e342413fde74ba98069b330530abe5" translate="yes" xml:space="preserve">
          <source>SocketAddrV4::to_owned</source>
          <target state="translated">SocketAddrV4::to_owned</target>
        </trans-unit>
        <trans-unit id="4c076e0e279fcac5fe930bd7f231dc463c4af910" translate="yes" xml:space="preserve">
          <source>SocketAddrV4::to_socket_addrs</source>
          <target state="translated">SocketAddrV4::to_socket_addrs</target>
        </trans-unit>
        <trans-unit id="50b24a72ad9bcf56ea6d4dfc00a1cc1f4ae545d2" translate="yes" xml:space="preserve">
          <source>SocketAddrV4::to_string</source>
          <target state="translated">SocketAddrV4::to_string</target>
        </trans-unit>
        <trans-unit id="891c0dd9ce25ec71be3534cbafc45fd3ae05f1b7" translate="yes" xml:space="preserve">
          <source>SocketAddrV4::try_from</source>
          <target state="translated">SocketAddrV4::try_from</target>
        </trans-unit>
        <trans-unit id="a9ac2fe099f08b7d16bb0a49954f312840871371" translate="yes" xml:space="preserve">
          <source>SocketAddrV4::try_into</source>
          <target state="translated">SocketAddrV4::try_into</target>
        </trans-unit>
        <trans-unit id="46aaa31435425799c133d708c8ea7559ef69b6bd" translate="yes" xml:space="preserve">
          <source>SocketAddrV4::type_id</source>
          <target state="translated">SocketAddrV4::type_id</target>
        </trans-unit>
        <trans-unit id="2a82ed719ff88f86747881e650245de3a45b485d" translate="yes" xml:space="preserve">
          <source>SocketAddrV6</source>
          <target state="translated">SocketAddrV6</target>
        </trans-unit>
        <trans-unit id="6f3d80be251a7c9f7ee0eec1539c2ee8cd14b150" translate="yes" xml:space="preserve">
          <source>SocketAddrV6::borrow</source>
          <target state="translated">SocketAddrV6::borrow</target>
        </trans-unit>
        <trans-unit id="9f5ed8415f745a24c04e8a4298b04a1d147b4e44" translate="yes" xml:space="preserve">
          <source>SocketAddrV6::borrow_mut</source>
          <target state="translated">SocketAddrV6::borrow_mut</target>
        </trans-unit>
        <trans-unit id="fcd19982de7f53a2ffc007e3fb4d960e721ab4b0" translate="yes" xml:space="preserve">
          <source>SocketAddrV6::clone</source>
          <target state="translated">SocketAddrV6::clone</target>
        </trans-unit>
        <trans-unit id="f55e0b0afcd5d8fe69f272a554104970de30ed37" translate="yes" xml:space="preserve">
          <source>SocketAddrV6::clone_from</source>
          <target state="translated">SocketAddrV6::clone_from</target>
        </trans-unit>
        <trans-unit id="7e02937dcdb8092cfdb1e06a3c0629a45ec8c613" translate="yes" xml:space="preserve">
          <source>SocketAddrV6::clone_into</source>
          <target state="translated">SocketAddrV6::clone_into</target>
        </trans-unit>
        <trans-unit id="3a6b8b2f9e3b425d85568b95ab8297e1715430ee" translate="yes" xml:space="preserve">
          <source>SocketAddrV6::eq</source>
          <target state="translated">SocketAddrV6::eq</target>
        </trans-unit>
        <trans-unit id="cb0432227f015e547a695d18bc763c7ad5b1f137" translate="yes" xml:space="preserve">
          <source>SocketAddrV6::flowinfo</source>
          <target state="translated">SocketAddrV6::flowinfo</target>
        </trans-unit>
        <trans-unit id="57023336af76787be2e4c534237c60dd312a8304" translate="yes" xml:space="preserve">
          <source>SocketAddrV6::fmt</source>
          <target state="translated">SocketAddrV6::fmt</target>
        </trans-unit>
        <trans-unit id="0b4276728eb5db2c8481e59e288ff98e624226e7" translate="yes" xml:space="preserve">
          <source>SocketAddrV6::from</source>
          <target state="translated">SocketAddrV6::from</target>
        </trans-unit>
        <trans-unit id="8a421da1861aecbff43ed6db92d3ca4ea955db4c" translate="yes" xml:space="preserve">
          <source>SocketAddrV6::from_str</source>
          <target state="translated">SocketAddrV6::from_str</target>
        </trans-unit>
        <trans-unit id="4af0a4a2dc3890a6999679693ab7ede3ce48f504" translate="yes" xml:space="preserve">
          <source>SocketAddrV6::hash</source>
          <target state="translated">SocketAddrV6::hash</target>
        </trans-unit>
        <trans-unit id="c1cd7639e97b734ebc4359a46f77b5338b196005" translate="yes" xml:space="preserve">
          <source>SocketAddrV6::hash_slice</source>
          <target state="translated">SocketAddrV6::hash_slice</target>
        </trans-unit>
        <trans-unit id="eea88942dd8e116f8bae7c475306c1e25d577fc8" translate="yes" xml:space="preserve">
          <source>SocketAddrV6::into</source>
          <target state="translated">SocketAddrV6::into</target>
        </trans-unit>
        <trans-unit id="ec4829a1fc51f808a3166d1207d8edcc1a96cd57" translate="yes" xml:space="preserve">
          <source>SocketAddrV6::ip</source>
          <target state="translated">SocketAddrV6::ip</target>
        </trans-unit>
        <trans-unit id="77a714a3ad557f314e500819551d941d06155cd8" translate="yes" xml:space="preserve">
          <source>SocketAddrV6::ne</source>
          <target state="translated">SocketAddrV6::ne</target>
        </trans-unit>
        <trans-unit id="44494c573299c5132f1a609984c69c57ef01e76c" translate="yes" xml:space="preserve">
          <source>SocketAddrV6::new</source>
          <target state="translated">SocketAddrV6::new</target>
        </trans-unit>
        <trans-unit id="1ab36b09219f39990eea0f3e64c06c333fb4504f" translate="yes" xml:space="preserve">
          <source>SocketAddrV6::port</source>
          <target state="translated">SocketAddrV6::port</target>
        </trans-unit>
        <trans-unit id="447b45ff4d0e34372ef8fa330fe8bfba6659e704" translate="yes" xml:space="preserve">
          <source>SocketAddrV6::scope_id</source>
          <target state="translated">SocketAddrV6::scope_id</target>
        </trans-unit>
        <trans-unit id="b421d8a1202f7aaab572adbdb5b1325f4621aa33" translate="yes" xml:space="preserve">
          <source>SocketAddrV6::set_flowinfo</source>
          <target state="translated">SocketAddrV6::set_flowinfo</target>
        </trans-unit>
        <trans-unit id="10fca5b860af2d166e62ee77d423bcffe6454b57" translate="yes" xml:space="preserve">
          <source>SocketAddrV6::set_ip</source>
          <target state="translated">SocketAddrV6::set_ip</target>
        </trans-unit>
        <trans-unit id="af698b7eac5ec17fbd3fb4347ccebc949b6a519e" translate="yes" xml:space="preserve">
          <source>SocketAddrV6::set_port</source>
          <target state="translated">SocketAddrV6::set_port</target>
        </trans-unit>
        <trans-unit id="7be377fcf0d2ff4ef23b1db072ec95367859ac22" translate="yes" xml:space="preserve">
          <source>SocketAddrV6::set_scope_id</source>
          <target state="translated">SocketAddrV6::set_scope_id</target>
        </trans-unit>
        <trans-unit id="5a8a41fe1eb5e9516e083308b063d5b9514970b3" translate="yes" xml:space="preserve">
          <source>SocketAddrV6::to_owned</source>
          <target state="translated">SocketAddrV6::to_owned</target>
        </trans-unit>
        <trans-unit id="d048fbae3ef9e243530f04ac9a777559ef665914" translate="yes" xml:space="preserve">
          <source>SocketAddrV6::to_socket_addrs</source>
          <target state="translated">SocketAddrV6::to_socket_addrs</target>
        </trans-unit>
        <trans-unit id="c2627bba75f17c17b79e53ad84b1106fd67cecab" translate="yes" xml:space="preserve">
          <source>SocketAddrV6::to_string</source>
          <target state="translated">SocketAddrV6::to_string</target>
        </trans-unit>
        <trans-unit id="bd4e5413241d810aaf8cbb9ec4b872862307c3d4" translate="yes" xml:space="preserve">
          <source>SocketAddrV6::try_from</source>
          <target state="translated">SocketAddrV6::try_from</target>
        </trans-unit>
        <trans-unit id="d18c4f695f7bea37405e4856fbc0c64bee129e7e" translate="yes" xml:space="preserve">
          <source>SocketAddrV6::try_into</source>
          <target state="translated">SocketAddrV6::try_into</target>
        </trans-unit>
        <trans-unit id="14104db8b94a9a8b11d37bdfd84939c50560053b" translate="yes" xml:space="preserve">
          <source>SocketAddrV6::type_id</source>
          <target state="translated">SocketAddrV6::type_id</target>
        </trans-unit>
        <trans-unit id="415e25e1400941758c3b4991103eb0b80e0f9fb7" translate="yes" xml:space="preserve">
          <source>SocketAncillary</source>
          <target state="translated">SocketAncillary</target>
        </trans-unit>
        <trans-unit id="bed035abcb774346061ef753f698ee7a84fde5f3" translate="yes" xml:space="preserve">
          <source>SocketCred</source>
          <target state="translated">SocketCred</target>
        </trans-unit>
        <trans-unit id="0c2066f053f508b4c0c843ade1ac1437bac212a7" translate="yes" xml:space="preserve">
          <source>Solution #1: Bind the pattern's values the same way.</source>
          <target state="translated">解決策1:パターンの値を同じようにバインドします。</target>
        </trans-unit>
        <trans-unit id="913e14ce2731e1f5c5084ef479e21694820c85a9" translate="yes" xml:space="preserve">
          <source>Solution #1: Rename the item.</source>
          <target state="translated">解決策その1:アイテムの名前を変更する</target>
        </trans-unit>
        <trans-unit id="228f8e354c6932ad110d73d004853969429e19ac" translate="yes" xml:space="preserve">
          <source>Solution #2: Implement the &lt;code&gt;Copy&lt;/code&gt; trait for the &lt;code&gt;X&lt;/code&gt; structure.</source>
          <target state="translated">解決策2： &lt;code&gt;X&lt;/code&gt; 構造に &lt;code&gt;Copy&lt;/code&gt; トレイトを実装します。</target>
        </trans-unit>
        <trans-unit id="e7b19c62d01a7e3e5709bf524ce576fa1d6ddcb8" translate="yes" xml:space="preserve">
          <source>Solution #2: Import the crate with a different name.</source>
          <target state="translated">解決策2:異なる名前のクレートをインポートします。</target>
        </trans-unit>
        <trans-unit id="0563a8d6ac0a042a4a8e127d3a94d1467ee40577" translate="yes" xml:space="preserve">
          <source>Some additional &lt;em&gt;escapes&lt;/em&gt; are available in either byte or non-raw byte string literals. An escape starts with a &lt;code&gt;U+005C&lt;/code&gt; (&lt;code&gt;\&lt;/code&gt;) and continues with one of the following forms:</source>
          <target state="translated">いくつかの追加の&lt;em&gt;エスケープ&lt;/em&gt;は、バイトまたは非rawバイト文字列リテラルで使用できます。エスケープは &lt;code&gt;U+005C&lt;/code&gt; （ &lt;code&gt;\&lt;/code&gt; ）で始まり、次の形式のいずれかで続きます。</target>
        </trans-unit>
        <trans-unit id="1b26e19347b2f0fbbb46e779d09457187a4ad813" translate="yes" xml:space="preserve">
          <source>Some additional &lt;em&gt;escapes&lt;/em&gt; are available in either character or non-raw string literals. An escape starts with a &lt;code&gt;U+005C&lt;/code&gt; (&lt;code&gt;\&lt;/code&gt;) and continues with one of the following forms:</source>
          <target state="translated">いくつかの追加の&lt;em&gt;エスケープ&lt;/em&gt;は、文字または非raw文字列リテラルで使用できます。エスケープは &lt;code&gt;U+005C&lt;/code&gt; （ &lt;code&gt;\&lt;/code&gt; ）で始まり、次の形式のいずれかで続きます。</target>
        </trans-unit>
        <trans-unit id="2b058503db09aa39221c4a7fe1f4a51447d81392" translate="yes" xml:space="preserve">
          <source>Some command line options go to &lt;code&gt;cargo test&lt;/code&gt;, and some go to the resulting test binary. To separate these two types of arguments, you list the arguments that go to &lt;code&gt;cargo test&lt;/code&gt; followed by the separator &lt;code&gt;--&lt;/code&gt; and then the ones that go to the test binary. Running &lt;code&gt;cargo test --help&lt;/code&gt; displays the options you can use with &lt;code&gt;cargo test&lt;/code&gt;, and running &lt;code&gt;cargo test -- --help&lt;/code&gt; displays the options you can use after the separator &lt;code&gt;--&lt;/code&gt;.</source>
          <target state="translated">コマンドラインオプションには、 &lt;code&gt;cargo test&lt;/code&gt; に送られるものと、結果のテストバイナリに送られるものがあります。引数のこれらの2つのタイプを分離するために、あなたはに行く引数リスト &lt;code&gt;cargo test&lt;/code&gt; 区切りが続く &lt;code&gt;--&lt;/code&gt; それから、テストバイナリに行くものを。実行中の &lt;code&gt;cargo test --help&lt;/code&gt; ディスプレイにあなたがで使用できるオプション &lt;code&gt;cargo test&lt;/code&gt; し、実行中の &lt;code&gt;cargo test -- --help&lt;/code&gt; ディスプレイを使用すると、区切りの後に使用できるオプション &lt;code&gt;--&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3bc8a5b5ab004f33f3d313ba2f0c49c5b66a7ca4" translate="yes" xml:space="preserve">
          <source>Some examples of attributes:</source>
          <target state="translated">属性の例をいくつか紹介します。</target>
        </trans-unit>
        <trans-unit id="2243be5a688dbf232c39ca5d950ae959b2ee998b" translate="yes" xml:space="preserve">
          <source>Some examples of meta items are:</source>
          <target state="translated">メタ項目の例としては、以下のようなものがあります。</target>
        </trans-unit>
        <trans-unit id="2f158a3a6ebb6ae4f387bb83ae0c0dc6662470a7" translate="yes" xml:space="preserve">
          <source>Some examples of the &lt;a href=&quot;../macro.format&quot;&gt;&lt;code&gt;format!&lt;/code&gt;&lt;/a&gt; extension are:</source>
          <target state="translated">&lt;a href=&quot;../macro.format&quot;&gt; &lt;code&gt;format!&lt;/code&gt; &lt;/a&gt;いくつかの例！拡張子は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="e9573b985828840e7a24788ac2cb2800024df3d0" translate="yes" xml:space="preserve">
          <source>Some examples of the output from both traits:</source>
          <target state="translated">両方の形質からの出力の例をいくつか紹介します。</target>
        </trans-unit>
        <trans-unit id="bcebc814147d823ce2e8db6662c984429f65698d" translate="yes" xml:space="preserve">
          <source>Some examples of tuple types:</source>
          <target state="translated">タプル型のいくつかの例。</target>
        </trans-unit>
        <trans-unit id="5276140ed8ab5855b7e53291e8d6476d11a9a5b7" translate="yes" xml:space="preserve">
          <source>Some examples of what will and will not work for &lt;code&gt;use&lt;/code&gt; items:</source>
          <target state="translated">&lt;code&gt;use&lt;/code&gt; アイテムで機能するものと機能しないものの例：</target>
        </trans-unit>
        <trans-unit id="aa3c6a4e85d404223aa99965ce20b1fdf220b8c7" translate="yes" xml:space="preserve">
          <source>Some examples on functions:</source>
          <target state="translated">関数に関するいくつかの例。</target>
        </trans-unit>
        <trans-unit id="01706013cfdbcb0fc543d3c97784f3f4c235d630" translate="yes" xml:space="preserve">
          <source>Some examples:</source>
          <target state="translated">いくつかの例を紹介します。</target>
        </trans-unit>
        <trans-unit id="68f160c42cafa15f86d6a95981d29c57e9030b96" translate="yes" xml:space="preserve">
          <source>Some items form an implicit scope for the declaration of sub-items. In other words, within a function or module, declarations of items can (in many cases) be mixed with the statements, control blocks, and similar artifacts that otherwise compose the item body. The meaning of these scoped items is the same as if the item was declared outside the scope &amp;mdash; it is still a static item &amp;mdash; except that the item's &lt;em&gt;path name&lt;/em&gt; within the module namespace is qualified by the name of the enclosing item, or is private to the enclosing item (in the case of functions). The grammar specifies the exact locations in which sub-item declarations may appear.</source>
          <target state="translated">一部のアイテムは、サブアイテムの宣言の暗黙的なスコープを形成します。つまり、関数またはモジュール内では、アイテムの宣言を（多くの場合）ステートメント、制御ブロック、およびアイテム本体を構成する類似のアーティファクトと混在させることができます。これらのスコープ付きアイテムの意味は、アイテムがスコープ外で宣言された場合と同じです。ただし、それでも静的アイテムです。ただし、モジュール名前空間内のアイテムの&lt;em&gt;パス&lt;/em&gt;名は、囲んでいるアイテムの名前で修飾されるか、プライベートです。囲んでいるアイテム（関数の場合）。文法は、サブアイテム宣言が現れる正確な場所を指定します。</target>
        </trans-unit>
        <trans-unit id="ad868bf29644aa3c2d96a099950b1be49e222d52" translate="yes" xml:space="preserve">
          <source>Some languages call this operation flatmap.</source>
          <target state="translated">この操作をフラットマップと呼ぶ言語もある。</target>
        </trans-unit>
        <trans-unit id="5c742d5cb3f7602a56083df57274c35942061f20" translate="yes" xml:space="preserve">
          <source>Some of the methods require that a layout &lt;em&gt;fit&lt;/em&gt; a memory block. What it means for a layout to &quot;fit&quot; a memory block means (or equivalently, for a memory block to &quot;fit&quot; a layout) is that the following conditions must hold:</source>
          <target state="translated">一部の方法では、レイアウトがメモリブロックに&lt;em&gt;適合する&lt;/em&gt;必要があります。レイアウトがメモリブロックに「適合する」とは、（または同等に、メモリブロックがレイアウトに「適合する」と）次の条件が満たされる必要があることを意味します。</target>
        </trans-unit>
        <trans-unit id="ec744582d348ac916573975c541aa67c7110d8fa" translate="yes" xml:space="preserve">
          <source>Some of the methods require that a layout &lt;em&gt;fit&lt;/em&gt; a memory block. What it means for a layout to &quot;fit&quot; a memory block means (or equivalently, for a memory block to &quot;fit&quot; a layout) is that the following two conditions must hold:</source>
          <target state="translated">一部のメソッドでは、レイアウトがメモリブロックに&lt;em&gt;適合する&lt;/em&gt;必要があります。レイアウトがメモリブロックに「適合する」とは（または、メモリブロックがレイアウトに「適合する」とは）、次の2つの条件が満たされている必要があることを意味します。</target>
        </trans-unit>
        <trans-unit id="95bb46f84c997c823dac7e6e0d9bce09adabf3dc" translate="yes" xml:space="preserve">
          <source>Some of the methods require that a memory block be &lt;em&gt;currently allocated&lt;/em&gt; via an allocator. This means that:</source>
          <target state="translated">一部のメソッドでは、&lt;em&gt;現在&lt;/em&gt;メモリブロックがアロケータを介し&lt;em&gt;て割り当てられ&lt;/em&gt;ている必要があります。この意味は：</target>
        </trans-unit>
        <trans-unit id="222076c2af94120505dcdff91bf0dd46c85e1ae9" translate="yes" xml:space="preserve">
          <source>Some of these traits are imported by the prelude, so they are available in every Rust program. Only operators backed by traits can be overloaded. For example, the addition operator (&lt;code&gt;+&lt;/code&gt;) can be overloaded through the &lt;a href=&quot;trait.add&quot;&gt;&lt;code&gt;Add&lt;/code&gt;&lt;/a&gt; trait, but since the assignment operator (&lt;code&gt;=&lt;/code&gt;) has no backing trait, there is no way of overloading its semantics. Additionally, this module does not provide any mechanism to create new operators. If traitless overloading or custom operators are required, you should look toward macros or compiler plugins to extend Rust's syntax.</source>
          <target state="translated">これらの特性の一部はプレリュードによってインポートされるため、すべてのRustプログラムで使用できます。オーバーロードできるのは、トレイトに裏打ちされたオペレーターだけです。たとえば、追加演算子（ &lt;code&gt;+&lt;/code&gt; ）は&lt;a href=&quot;trait.add&quot;&gt; &lt;code&gt;Add&lt;/code&gt; &lt;/a&gt;トレイトを介してオーバーロードできますが、代入演算子（ &lt;code&gt;=&lt;/code&gt; ）にはバッキングトレイトがないため、そのセマンティクスをオーバーロードする方法はありません。さらに、このモジュールは新しいオペレーターを作成するメカニズムを提供しません。トレイトレスのオーバーロードまたはカスタムオペレーターが必要な場合は、マクロまたはコンパイラプラグインに注目して、Rustの構文を拡張する必要があります。</target>
        </trans-unit>
        <trans-unit id="f01c5fd014f6ba000dfac578d5888065f628161a" translate="yes" xml:space="preserve">
          <source>Some platforms do not provide access to the current timeout.</source>
          <target state="translated">一部のプラットフォームでは、現在のタイムアウトへのアクセスを提供していません。</target>
        </trans-unit>
        <trans-unit id="358e5fe641941b3b99590f3b5a62dbfefcd41b19" translate="yes" xml:space="preserve">
          <source>Some possible values:</source>
          <target state="translated">いくつかの可能性のある値。</target>
        </trans-unit>
        <trans-unit id="8c829abe4cbf6dda3204f3a6987ef00d5c7d24bd" translate="yes" xml:space="preserve">
          <source>Some programs allow arguments &lt;em&gt;and&lt;/em&gt; environment variables for the same configuration. In those cases, the programs decide that one or the other takes precedence. For another exercise on your own, try controlling case insensitivity through either a command line argument or an environment variable. Decide whether the command line argument or the environment variable should take precedence if the program is run with one set to case sensitive and one set to case insensitive.</source>
          <target state="translated">一部のプログラムでは、同じ構成に対して引数&lt;em&gt;と&lt;/em&gt;環境変数を使用できます。これらの場合、プログラムはどちらか一方を優先することを決定します。自分で別の演習を行うには、コマンドライン引数または環境変数を使用して大文字と小文字を区別しないように制御してみてください。大文字と小文字を区別する設定と大文字と小文字を区別しない設定を使用してプログラムを実行する場合、コマンドライン引数または環境変数を優先するかどうかを決定します。</target>
        </trans-unit>
        <trans-unit id="abe7b976e1b0d3e4291f7926f32c54bb5f29a679" translate="yes" xml:space="preserve">
          <source>Some rules in the grammar &amp;mdash; notably &lt;a href=&quot;expressions/operator-expr#borrow-operators&quot;&gt;unary operators&lt;/a&gt;, &lt;a href=&quot;expressions/operator-expr#arithmetic-and-logical-binary-operators&quot;&gt;binary operators&lt;/a&gt;, and &lt;a href=&quot;keywords&quot;&gt;keywords&lt;/a&gt; &amp;mdash; are given in a simplified form: as a listing of printable strings. These cases form a subset of the rules regarding the &lt;a href=&quot;tokens&quot;&gt;token&lt;/a&gt; rule, and are assumed to be the result of a lexical-analysis phase feeding the parser, driven by a</source>
          <target state="translated">文法の一部のルール（特に、&lt;a href=&quot;expressions/operator-expr#borrow-operators&quot;&gt;単項演算子&lt;/a&gt;、&lt;a href=&quot;expressions/operator-expr#arithmetic-and-logical-binary-operators&quot;&gt;二項演算子&lt;/a&gt;、&lt;a href=&quot;keywords&quot;&gt;キーワード&lt;/a&gt;）は、印刷可能な文字列のリストとして、簡略化された形式で示されています。これらのケースは、&lt;a href=&quot;tokens&quot;&gt;トークン&lt;/a&gt;ルールに関するルールのサブセットを形成し、パーサーにフィードする字句解析フェーズの結果であると見なされ、</target>
        </trans-unit>
        <trans-unit id="f221c8fd967ff4f3d5c7c0df018f045fb84910f0" translate="yes" xml:space="preserve">
          <source>Some traits may be unsafe to implement. Using the &lt;a href=&quot;keyword.unsafe&quot;&gt;&lt;code&gt;unsafe&lt;/code&gt;&lt;/a&gt; keyword in front of the trait's declaration is used to mark this:</source>
          <target state="translated">一部の特性は、実装するのが安全でない場合があります。トレイトの宣言の前に&lt;a href=&quot;keyword.unsafe&quot;&gt; &lt;code&gt;unsafe&lt;/code&gt; &lt;/a&gt;キーワードを使用して、これをマークします。</target>
        </trans-unit>
        <trans-unit id="b7b4fd9fd085cf7f8062ca0116154d54b2f67425" translate="yes" xml:space="preserve">
          <source>Some type parameters have the same name.</source>
          <target state="translated">型のパラメータには、同じ名前を持つものがあります。</target>
        </trans-unit>
        <trans-unit id="44cd5246860ce8877c0c50833e18009c3c5adbcd" translate="yes" xml:space="preserve">
          <source>Some types can't be copied safely. For example, copying &lt;code&gt;&amp;amp;mut T&lt;/code&gt; would create an aliased mutable reference. Copying &lt;a href=&quot;../string/struct.string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; would duplicate responsibility for managing the &lt;a href=&quot;../string/struct.string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt;'s buffer, leading to a double free.</source>
          <target state="translated">一部のタイプは安全にコピーできません。たとえば、 &lt;code&gt;&amp;amp;mut T&lt;/code&gt; をコピーすると、エイリアスされた可変参照が作成されます。&lt;a href=&quot;../string/struct.string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;をコピーすると、&lt;a href=&quot;../string/struct.string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;のバッファを管理する責任が重複し、二重解放が発生します。</target>
        </trans-unit>
        <trans-unit id="395f2accbb2c55d74192ec105383cfaec91e432d" translate="yes" xml:space="preserve">
          <source>Some types have no ownership semantics at all and are trivial to duplicate. An example is &lt;code&gt;i32&lt;/code&gt; and the other number types. We don't have to call &lt;code&gt;.clone()&lt;/code&gt; to clone them, because they are marked &lt;code&gt;Copy&lt;/code&gt; in addition to &lt;code&gt;Clone&lt;/code&gt;. Implicit cloning is more convenient in this case. We can mark our own types &lt;code&gt;Copy&lt;/code&gt; if all their members also are marked &lt;code&gt;Copy&lt;/code&gt;.</source>
          <target state="translated">一部のタイプには所有権のセマンティクスがまったくなく、複製するのは簡単です。例は、 &lt;code&gt;i32&lt;/code&gt; と他の数値タイプです。それらを複製するために &lt;code&gt;.clone()&lt;/code&gt; を呼び出す必要はありません。それらは &lt;code&gt;Clone&lt;/code&gt; に加えて &lt;code&gt;Copy&lt;/code&gt; とマークされているためです。この場合、暗黙的な複製の方が便利です。我々は独自のタイプをマークすることができます &lt;code&gt;Copy&lt;/code&gt; 、すべての彼らのメンバーもマークされている場合は &lt;code&gt;Copy&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8827ce6f7fbbe39876def8741d8f6c0f34bda4ac" translate="yes" xml:space="preserve">
          <source>Some types make it possible to go from borrowed to owned, usually by implementing the &lt;code&gt;Clone&lt;/code&gt; trait. But &lt;code&gt;Clone&lt;/code&gt; works only for going from &lt;code&gt;&amp;amp;T&lt;/code&gt; to &lt;code&gt;T&lt;/code&gt;. The &lt;code&gt;ToOwned&lt;/code&gt; trait generalizes &lt;code&gt;Clone&lt;/code&gt; to construct owned data from any borrow of a given type.</source>
          <target state="translated">一部のタイプでは、通常は &lt;code&gt;Clone&lt;/code&gt; トレイトを実装することにより、借用から所有に移行できます。ただし、 &lt;code&gt;Clone&lt;/code&gt; は &lt;code&gt;&amp;amp;T&lt;/code&gt; から &lt;code&gt;T&lt;/code&gt; に移動する場合にのみ機能します。 &lt;code&gt;ToOwned&lt;/code&gt; トレイト一般化 &lt;code&gt;Clone&lt;/code&gt; 特定のタイプのいずれかのボローから所有するデータを構築します。</target>
        </trans-unit>
        <trans-unit id="1fa499ad14d540d4ab748c3f63c14c59562feb8d" translate="yes" xml:space="preserve">
          <source>Some value &lt;code&gt;T&lt;/code&gt;</source>
          <target state="translated">ある値 &lt;code&gt;T&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="878090a0fad65a133ac057071000349608e90593" translate="yes" xml:space="preserve">
          <source>Somehow reclaim the ownership.</source>
          <target state="translated">どうにかして所有権を取り戻す。</target>
        </trans-unit>
        <trans-unit id="f781cf82d5c3741244bc8c4aeb0b4f682140871d" translate="yes" xml:space="preserve">
          <source>Something other than a module was found in visibility scope.</source>
          <target state="translated">モジュール以外のものが可視範囲に見つかりました。</target>
        </trans-unit>
        <trans-unit id="b475f4837c8088ae9e2316ee2cc452a611abdd5e" translate="yes" xml:space="preserve">
          <source>Something other than a struct, variant or union has been used when one was expected.</source>
          <target state="translated">構造体、バリアント、またはユニオン以外のものが、期待されていたときに使用されました。</target>
        </trans-unit>
        <trans-unit id="0c0b8d60e3d74c7cecb9ea23d7c89fc75bd5de97" translate="yes" xml:space="preserve">
          <source>Something other than a type has been used when one was expected.</source>
          <target state="translated">予想されていた時にタイプ以外のものが使用されていた。</target>
        </trans-unit>
        <trans-unit id="5fcd1c6adde9ce2b8b8f8c24f05d8cba59dab8fc" translate="yes" xml:space="preserve">
          <source>Something other than a type or an associated type was given.</source>
          <target state="translated">型以外のもの、または関連する型が与えられました。</target>
        </trans-unit>
        <trans-unit id="c9b777e07031a8e6299f68aae25ccc20a24a398e" translate="yes" xml:space="preserve">
          <source>Something other than numbers and characters has been used for a range.</source>
          <target state="translated">数字や文字以外の何かが範囲に使われています。</target>
        </trans-unit>
        <trans-unit id="04c99ebec2739e6e397c7eed6e9e1c2df41e5a11" translate="yes" xml:space="preserve">
          <source>Something that implements &lt;code&gt;DoubleEndedIterator&lt;/code&gt; has one extra capability over something that implements &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;: the ability to also take &lt;code&gt;Item&lt;/code&gt;s from the back, as well as the front.</source>
          <target state="translated">&lt;code&gt;DoubleEndedIterator&lt;/code&gt; を実装するものには、&lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt;を実装するものよりも1つ追加の機能があります。前面だけでなく背面からも &lt;code&gt;Item&lt;/code&gt; を取得する機能です。</target>
        </trans-unit>
        <trans-unit id="32ead51bd610490468db45da53a1bf9c6c66393f" translate="yes" xml:space="preserve">
          <source>Something which is neither a tuple struct nor a tuple variant was used as a pattern.</source>
          <target state="translated">タプル構造体でもタプルバリアントでもないものをパターンとして使用しました。</target>
        </trans-unit>
        <trans-unit id="e879dd2e95b609ab6dd974536decd029eefa2e22" translate="yes" xml:space="preserve">
          <source>Sometimes a certain value is used many times throughout a program, and it can become inconvenient to copy it over and over. What's more, it's not always possible or desirable to make it a variable that gets carried around to each function that needs it. In these cases, the &lt;code&gt;const&lt;/code&gt; keyword provides a convenient alternative to code duplication.</source>
          <target state="translated">特定の値がプログラム全体で何度も使用されることがあり、その値を何度もコピーすると不便になる場合があります。さらに、それを必要とする各関数に持ち越される変数にすることは、常に可能または望ましいとは限りません。このような場合、 &lt;code&gt;const&lt;/code&gt; キーワードはコードの複製に代わる便利な手段を提供します。</target>
        </trans-unit>
        <trans-unit id="d57e753282f59a43c70aec54356a0dabe1596422" translate="yes" xml:space="preserve">
          <source>Sometimes a certain value is used many times throughout a program, and it can become inconvenient to copy it over and over. What's more, it's not always possible or desirable to make it a variable that gets carried around to each function that needs it. In these cases, the &lt;code&gt;const&lt;/code&gt; keyword provides a convenient alternative to code duplication:</source>
          <target state="translated">特定の値がプログラム全体で何度も使用され、それを何度もコピーするのが不便になる場合があります。さらに、それを必要とする各関数に持ち運ばれる変数にすることが常に可能または望ましいとは限りません。このような場合、 &lt;code&gt;const&lt;/code&gt; キーワードは、コードの重複に代わる便利な方法を提供します。</target>
        </trans-unit>
        <trans-unit id="7b4ce2023b0107d37a404740c834f4e456c69887" translate="yes" xml:space="preserve">
          <source>Sometimes a few specific tests can be very time-consuming to execute, so you might want to exclude them during most runs of &lt;code&gt;cargo test&lt;/code&gt;. Rather than listing as arguments all tests you do want to run, you can instead annotate the time-consuming tests using the &lt;code&gt;ignore&lt;/code&gt; attribute to exclude them, as shown here:</source>
          <target state="translated">いくつかの特定のテストは実行に非常に時間がかかる場合があるため、 &lt;code&gt;cargo test&lt;/code&gt; ほとんどの実行中にそれらを除外することができます。次のように、実行するすべてのテストを引数としてリストする代わりに、 &lt;code&gt;ignore&lt;/code&gt; 属性を使用して時間のかかるテストに注釈を付け、それらを除外することができます。</target>
        </trans-unit>
        <trans-unit id="22420dec705f5672d2fbfde1a393dbcf1c213a8d" translate="yes" xml:space="preserve">
          <source>Sometimes a type needs be mutated while having multiple aliases. In Rust this is achieved using a pattern called &lt;em&gt;interior mutability&lt;/em&gt;. A type has interior mutability if its internal state can be changed through a &lt;a href=&quot;types/pointer#shared-references-&quot;&gt;shared reference&lt;/a&gt; to it. This goes against the usual &lt;a href=&quot;behavior-considered-undefined&quot;&gt;requirement&lt;/a&gt; that the value pointed to by a shared reference is not mutated.</source>
          <target state="translated">複数のエイリアスを使用しているときに、タイプを変更する必要がある場合があります。Rustでは、これは&lt;em&gt;interior mutability&lt;/em&gt;と呼ばれるパターンを使用して実現されます。型への&lt;a href=&quot;types/pointer#shared-references-&quot;&gt;共有参照&lt;/a&gt;を介してその内部状態を変更できる場合、型は内部で変更可能です。これは、共有参照によって指される値が変更されないという通常の&lt;a href=&quot;behavior-considered-undefined&quot;&gt;要件&lt;/a&gt;に反します。</target>
        </trans-unit>
        <trans-unit id="924fa07f8faef6f0df6e1f6bc3870b009c5c2243" translate="yes" xml:space="preserve">
          <source>Sometimes a type needs to be mutated while having multiple aliases. In Rust this is achieved using a pattern called &lt;em&gt;interior mutability&lt;/em&gt;. A type has interior mutability if its internal state can be changed through a &lt;a href=&quot;types/pointer#shared-references-&quot;&gt;shared reference&lt;/a&gt; to it. This goes against the usual &lt;a href=&quot;behavior-considered-undefined&quot;&gt;requirement&lt;/a&gt; that the value pointed to by a shared reference is not mutated.</source>
          <target state="translated">複数のエイリアスを使用しているときに、型を変更する必要がある場合があります。Rustでは、これは&lt;em&gt;内部可変性&lt;/em&gt;と呼ばれるパターンを使用して実現されます。タイプへの&lt;a href=&quot;types/pointer#shared-references-&quot;&gt;共有参照&lt;/a&gt;を通じて内部状態を変更できる場合、タイプには内部可変性があります。これは、共有参照が指す値が変更されないという通常の&lt;a href=&quot;behavior-considered-undefined&quot;&gt;要件&lt;/a&gt;に反します。</target>
        </trans-unit>
        <trans-unit id="a9720e6d76f55a2ee93872054183df80d4aae5ef" translate="yes" xml:space="preserve">
          <source>Sometimes it&amp;rsquo;s useful to have default behavior for some or all of the methods in a trait instead of requiring implementations for all methods on every type. Then, as we implement the trait on a particular type, we can keep or override each method&amp;rsquo;s default behavior.</source>
          <target state="translated">すべてのタイプのすべてのメソッドの実装を要求する代わりに、トレイトの一部またはすべてのメソッドにデフォルトの動作を持たせると便利な場合があります。次に、特定のタイプに特性を実装するときに、各メソッドのデフォルトの動作を維持またはオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="c0682d5f8323b14fe072519e99ff0b6b6bc710c2" translate="yes" xml:space="preserve">
          <source>Sometimes we don't need to move the value. Using a reference, we can let another function borrow the value without changing its ownership. In the example below, we don't actually have to move our string to &lt;code&gt;calculate_length&lt;/code&gt;, we can give it a reference to it with &lt;code&gt;&amp;amp;&lt;/code&gt; instead.</source>
          <target state="translated">値を移動する必要がない場合もあります。参照を使用すると、別の関数に所有権を変更せずに値を借用させることができます。以下の例では、実際に文字列を &lt;code&gt;calculate_length&lt;/code&gt; に移動する必要はありません。代わりに &lt;code&gt;&amp;amp;&lt;/code&gt; を使用して、文字列への参照を与えることができます。</target>
        </trans-unit>
        <trans-unit id="354a53eabe5fcae89d7d1b83e827a4a82dec495d" translate="yes" xml:space="preserve">
          <source>Sometimes we don't want a reference, but a duplicate. All types marked &lt;code&gt;Clone&lt;/code&gt; can be duplicated by calling &lt;code&gt;.clone()&lt;/code&gt;. Subsequent changes to a clone do not affect the original variable.</source>
          <target state="translated">参照が不要な場合もありますが、重複しています。 &lt;code&gt;Clone&lt;/code&gt; とマークされているすべてのタイプは、 &lt;code&gt;.clone()&lt;/code&gt; を呼び出すことで複製できます。クローンに対するその後の変更は、元の変数には影響しません。</target>
        </trans-unit>
        <trans-unit id="ff912c381f4928aab54a72b634a6064d57ffd41a" translate="yes" xml:space="preserve">
          <source>Sometimes, bad things happen in your code, and there&amp;rsquo;s nothing you can do about it. In these cases, Rust has the &lt;code&gt;panic!&lt;/code&gt; macro. When the &lt;code&gt;panic!&lt;/code&gt; macro executes, your program will print a failure message, unwind and clean up the stack, and then quit. This most commonly occurs when a bug of some kind has been detected and it&amp;rsquo;s not clear to the programmer how to handle the error.</source>
          <target state="translated">時々、悪いことがあなたのコードで起こり、それに対してあなたができることは何もありません。これらの場合、Rustには &lt;code&gt;panic!&lt;/code&gt; 大きい。 &lt;code&gt;panic!&lt;/code&gt; とき！マクロが実行されると、プログラムは失敗メッセージを出力し、スタックをほどいてクリーンアップしてから終了します。これは通常、何らかのバグが検出され、プログラマがエラーの処理方法を明確にしていない場合に発生します。</target>
        </trans-unit>
        <trans-unit id="c0e1220c83bd29682d8aeeb6c70d9bd1fcc32412" translate="yes" xml:space="preserve">
          <source>Sometimes, running a full test suite can take a long time. If you&amp;rsquo;re working on code in a particular area, you might want to run only the tests pertaining to that code. You can choose which tests to run by passing &lt;code&gt;cargo test&lt;/code&gt; the name or names of the test(s) you want to run as an argument.</source>
          <target state="translated">完全なテストスイートの実行には時間がかかる場合があります。特定の領域のコードで作業している場合は、そのコードに関連するテストのみを実行したい場合があります。 &lt;code&gt;cargo test&lt;/code&gt; 引数として実行するテストの名前を渡すことで、実行するテストを選択できます。</target>
        </trans-unit>
        <trans-unit id="33934c254a892896c6e91fea97bdb219087bd1a5" translate="yes" xml:space="preserve">
          <source>Sometimes, you might need one trait to use another trait&amp;rsquo;s functionality. In this case, you need to rely on the dependent trait also being implemented. The trait you rely on is a &lt;em&gt;supertrait&lt;/em&gt; of the trait you&amp;rsquo;re implementing.</source>
          <target state="translated">場合によっては、別のトレイトの機能を使用するために1つのトレイトが必要になることがあります。この場合、依存する特性も実装されていることに依存する必要があります。依存する特性は、実装している特性の&lt;em&gt;上位&lt;/em&gt;特性です。</target>
        </trans-unit>
        <trans-unit id="7dd2749cfb5be67fe5b24695dba8809079cc076a" translate="yes" xml:space="preserve">
          <source>Sometimes, you want to fall back to some kind of default value, and don't particularly care what it is. This comes up often with &lt;code&gt;struct&lt;/code&gt;s that define a set of options:</source>
          <target state="translated">場合によっては、なんらかのデフォルト値にフォールバックし、それが何であるかを特に気にする必要はありません。多くの場合、これには一連のオプションを定義する &lt;code&gt;struct&lt;/code&gt; が含まれます。</target>
        </trans-unit>
        <trans-unit id="a5542a442b57c4e85de5da2fb88f9df18bb1e825" translate="yes" xml:space="preserve">
          <source>Sometimes, you&amp;rsquo;ll see multiple messages printed for one browser request; the reason might be that the browser is making a request for the page as well as a request for other resources, like the &lt;em&gt;favicon.ico&lt;/em&gt; icon that appears in the browser tab.</source>
          <target state="translated">1つのブラウザー要求に対して複数のメッセージが出力される場合があります。その理由は、ブラウザーがページと、ブラウザーのタブに表示される&lt;em&gt;favicon.ico&lt;/em&gt;アイコンなどの他のリソースの要求を行っているためです。</target>
        </trans-unit>
        <trans-unit id="cd4fa08a56f591f3a44dac915c98df209a1bd2bf" translate="yes" xml:space="preserve">
          <source>Sometimes, your Rust code might need to interact with code written in another language. For this, Rust has a keyword, &lt;code&gt;extern&lt;/code&gt;, that facilitates the creation and use of a &lt;em&gt;Foreign Function Interface (FFI)&lt;/em&gt;. An FFI is a way for a programming language to define functions and enable a different (foreign) programming language to call those functions.</source>
          <target state="translated">Rustコードが別の言語で書かれたコードとやり取りする必要がある場合があります。このため、Rustには、&lt;em&gt;外部関数インターフェース（FFI）&lt;/em&gt;の作成と使用を容易にするキーワード &lt;code&gt;extern&lt;/code&gt; があります。 FFIは、プログラミング言語が関数を定義し、別の（外部の）プログラミング言語がそれらの関数を呼び出すことができるようにする方法です。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a41bcc58d5abfba7380b0c52ec09f547cfe68f0e" translate="yes" xml:space="preserve">
          <source>Soon we&amp;rsquo;ll define the &lt;code&gt;impl_hello_macro&lt;/code&gt; function, which is where we&amp;rsquo;ll build the new Rust code we want to include. But before we do, note that the output for our derive macro is also a &lt;code&gt;TokenStream&lt;/code&gt;. The returned &lt;code&gt;TokenStream&lt;/code&gt; is added to the code that our crate users write, so when they compile their crate, they&amp;rsquo;ll get the extra functionality that we provide in the modified &lt;code&gt;TokenStream&lt;/code&gt;.</source>
          <target state="translated">すぐに、 &lt;code&gt;impl_hello_macro&lt;/code&gt; する新しいRustコードをビルドする場所であるimpl_hello_macro関数を定義します。ただし、その前に、派生マクロの出力も &lt;code&gt;TokenStream&lt;/code&gt; であることに注意してください。返された &lt;code&gt;TokenStream&lt;/code&gt; は、クレートユーザーが作成したコードに追加されるため、クレートをコンパイルすると、変更された &lt;code&gt;TokenStream&lt;/code&gt; で提供される追加機能を取得できます。</target>
        </trans-unit>
        <trans-unit id="ec475886cfea806d371a2f2778f02299b4f357d8" translate="yes" xml:space="preserve">
          <source>Sorting the content of a deque.</source>
          <target state="translated">デケの内容をソートします。</target>
        </trans-unit>
        <trans-unit id="8426200d0f6fa7ad9d762b86260809e08c44014e" translate="yes" xml:space="preserve">
          <source>Sorts the slice with a comparator function, but may not preserve the order of equal elements.</source>
          <target state="translated">スライスをコンパレータ関数でソートしますが、等しい要素の順序を保持しない場合があります。</target>
        </trans-unit>
        <trans-unit id="b82ccd89f52b63e5b4440242a27febda3e964e83" translate="yes" xml:space="preserve">
          <source>Sorts the slice with a comparator function.</source>
          <target state="translated">コンパレータ機能でスライスをソートします。</target>
        </trans-unit>
        <trans-unit id="dbc7bc291a372357db09800ac2e37d3ac779ef97" translate="yes" xml:space="preserve">
          <source>Sorts the slice with a key extraction function, but may not preserve the order of equal elements.</source>
          <target state="translated">キー抽出関数でスライスをソートしますが、等しい要素の順序を保持しない場合があります。</target>
        </trans-unit>
        <trans-unit id="8f84fa97c498bfa88df86d33d1265c8844c055a6" translate="yes" xml:space="preserve">
          <source>Sorts the slice with a key extraction function.</source>
          <target state="translated">キー抽出機能でスライスをソートします。</target>
        </trans-unit>
        <trans-unit id="0017e05bd16c8d58c49a577c9b4b892ce88f07b2" translate="yes" xml:space="preserve">
          <source>Sorts the slice, but may not preserve the order of equal elements.</source>
          <target state="translated">スライスをソートしますが、等しい要素の順序を保持しない場合があります。</target>
        </trans-unit>
        <trans-unit id="7818ee857300496e42253e304ef95d74874e5e7b" translate="yes" xml:space="preserve">
          <source>Sorts the slice.</source>
          <target state="translated">スライスをソートします。</target>
        </trans-unit>
        <trans-unit id="7b37110e5b01350732eac4676af2611966b9ccef" translate="yes" xml:space="preserve">
          <source>Source Code</source>
          <target state="translated">ソースコード</target>
        </trans-unit>
        <trans-unit id="da9fb400dd20d98034fe54139d4b1854fa050f78" translate="yes" xml:space="preserve">
          <source>Source File</source>
          <target state="translated">ソースファイル</target>
        </trans-unit>
        <trans-unit id="4fde6fe6a49f40cd5e5e64f4893cf5deb11807bb" translate="yes" xml:space="preserve">
          <source>SourceIter</source>
          <target state="translated">SourceIter</target>
        </trans-unit>
        <trans-unit id="e5ce2cc6a5699323b6831e47e5174d91fe3c8511" translate="yes" xml:space="preserve">
          <source>Spawning a process</source>
          <target state="translated">プロセスの産卵</target>
        </trans-unit>
        <trans-unit id="7454c02ba355d0433ce7be23ac48b7b250144890" translate="yes" xml:space="preserve">
          <source>Spawning a thread</source>
          <target state="translated">スレッドの生成</target>
        </trans-unit>
        <trans-unit id="483805b840862ed495832b49431de70641c81f46" translate="yes" xml:space="preserve">
          <source>Spawns a new thread by taking ownership of the &lt;code&gt;Builder&lt;/code&gt;, and returns an &lt;a href=&quot;../io/type.result&quot;&gt;&lt;code&gt;io::Result&lt;/code&gt;&lt;/a&gt; to its &lt;a href=&quot;struct.joinhandle&quot;&gt;&lt;code&gt;JoinHandle&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Builder&lt;/code&gt; の所有権を取得して新しいスレッドを生成し、&lt;a href=&quot;../io/type.result&quot;&gt; &lt;code&gt;io::Result&lt;/code&gt; &lt;/a&gt;をその&lt;a href=&quot;struct.joinhandle&quot;&gt; &lt;code&gt;JoinHandle&lt;/code&gt; に返し&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="92e23ac918399fba2469fc0427afc1b87a34fe41" translate="yes" xml:space="preserve">
          <source>Spawns a new thread without any lifetime restrictions by taking ownership of the &lt;code&gt;Builder&lt;/code&gt;, and returns an &lt;a href=&quot;../io/type.result&quot;&gt;&lt;code&gt;io::Result&lt;/code&gt;&lt;/a&gt; to its &lt;a href=&quot;struct.joinhandle&quot;&gt;&lt;code&gt;JoinHandle&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Builder&lt;/code&gt; の所有権を取得することにより、存続期間の制限なしに新しいスレッドを生成し、&lt;a href=&quot;../io/type.result&quot;&gt; &lt;code&gt;io::Result&lt;/code&gt; &lt;/a&gt;をその&lt;a href=&quot;struct.joinhandle&quot;&gt; &lt;code&gt;JoinHandle&lt;/code&gt; に返し&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="05b9b0a3d86e039bcc54742ca681657104d05e1f" translate="yes" xml:space="preserve">
          <source>Spawns a new thread, returning a &lt;a href=&quot;struct.joinhandle&quot;&gt;&lt;code&gt;JoinHandle&lt;/code&gt;&lt;/a&gt; for it.</source>
          <target state="translated">新しいスレッドを&lt;a href=&quot;struct.joinhandle&quot;&gt; &lt;code&gt;JoinHandle&lt;/code&gt; &lt;/a&gt;し、JoinHandleを返します。</target>
        </trans-unit>
        <trans-unit id="325ea90d05b6256fb997f282a35a193bb878a063" translate="yes" xml:space="preserve">
          <source>Speaking of different ways to write this function, Listing 9-9 shows that there&amp;rsquo;s a way to make this even shorter.</source>
          <target state="translated">この関数を記述するさまざまな方法について言えば、リスト9-9は、これをさらに短くする方法があることを示しています。</target>
        </trans-unit>
        <trans-unit id="8528f5513b210fdc5ba63bbf7c9fcc5a49feb440" translate="yes" xml:space="preserve">
          <source>Special types and traits</source>
          <target state="translated">特殊なタイプと特徴</target>
        </trans-unit>
        <trans-unit id="ac4fd7fd5b591159d1aee83a6b7504035d209e56" translate="yes" xml:space="preserve">
          <source>Specialization only allows you to override &lt;code&gt;default&lt;/code&gt; functions in implementations.</source>
          <target state="translated">特殊化では、実装の &lt;code&gt;default&lt;/code&gt; 関数のみをオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="2d00577e9194f109a205fbc91c68f0a3e7799e4d" translate="yes" xml:space="preserve">
          <source>Specifically, &lt;code&gt;size_hint()&lt;/code&gt; returns a tuple where the first element is the lower bound, and the second element is the upper bound.</source>
          <target state="translated">具体的には、 &lt;code&gt;size_hint()&lt;/code&gt; は、最初の要素が下限で、2番目の要素が上限であるタプルを返します。</target>
        </trans-unit>
        <trans-unit id="80bb8eabe8ca6d37cb7c125a325bc00d052360f7" translate="yes" xml:space="preserve">
          <source>Specifically, you&amp;rsquo;ll learn about variables, basic types, functions, comments, and control flow. These foundations will be in every Rust program, and learning them early will give you a strong core to start from.</source>
          <target state="translated">具体的には、変数、基本タイプ、関数、コメント、制御フローについて学びます。これらの基礎はすべてのRustプログラムに含まれ、それらを早期に学習することで、最初から強力なコアが得られます。</target>
        </trans-unit>
        <trans-unit id="4d422ba73af671dffcac7951c667b3d3523e7f2d" translate="yes" xml:space="preserve">
          <source>Specifies parameters to generic type in a type (e.g., &lt;code&gt;Vec&amp;lt;u8&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">型のジェネリック型にパラメーターを指定します（例： &lt;code&gt;Vec&amp;lt;u8&amp;gt;&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="5848c6c54e7cf62a457a1ca7b8601c6891978fe7" translate="yes" xml:space="preserve">
          <source>Specifies parameters to generic type, function, or method in an expression; often referred to as turbofish (e.g., &lt;code&gt;&quot;42&quot;.parse::&amp;lt;i32&amp;gt;()&lt;/code&gt;)</source>
          <target state="translated">式のジェネリック型、関数、またはメソッドのパラメーターを指定します。しばしばターボフィッシュと呼ばれる（例： &lt;code&gt;&quot;42&quot;.parse::&amp;lt;i32&amp;gt;()&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="68e65850f75a9e00d279c77db1c7ca3ab3d82f87" translate="yes" xml:space="preserve">
          <source>Specifies the file extension used for shared libraries on this platform that goes after the dot. Example value is &lt;code&gt;so&lt;/code&gt;.</source>
          <target state="translated">ドットの後に続くこのプラットフォームの共有ライブラリに使用されるファイル拡張子を指定します。値の例は &lt;code&gt;so&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="9cefdece2a06c3c0efa70639ac46798ab027b1c3" translate="yes" xml:space="preserve">
          <source>Specifies the file extension, if any, used for executable binaries on this platform. Example value is &lt;code&gt;exe&lt;/code&gt;.</source>
          <target state="translated">このプラットフォームで実行可能なバイナリに使用するファイル拡張子を指定します（ある場合）。値の例は &lt;code&gt;exe&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="d8d9d5fb786047c6ab8ade0bb17752bf87883d0c" translate="yes" xml:space="preserve">
          <source>Specifies the filename prefix used for shared libraries on this platform. Example value is &lt;code&gt;lib&lt;/code&gt;.</source>
          <target state="translated">このプラットフォームの共有ライブラリに使用されるファイル名プレフィックスを指定します。値の例は &lt;code&gt;lib&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="616edeb7819affd938929d61c6ce30b2bccea100" translate="yes" xml:space="preserve">
          <source>Specifies the filename suffix used for executable binaries on this platform. Example value is &lt;code&gt;.exe&lt;/code&gt;.</source>
          <target state="translated">このプラットフォームで実行可能なバイナリに使用されるファイル名のサフィックスを指定します。値の例は &lt;code&gt;.exe&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="092de69a444716b03c470d8e276de2d325391db4" translate="yes" xml:space="preserve">
          <source>Specifies the filename suffix used for shared libraries on this platform. Example value is &lt;code&gt;.so&lt;/code&gt;.</source>
          <target state="translated">このプラットフォームの共有ライブラリに使用されるファイル名のサフィックスを指定します。値の例は &lt;code&gt;.so&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="9d28aa36d621dad03992a1432875cb351ee9c51a" translate="yes" xml:space="preserve">
          <source>Specify the code to run when a value goes out of scope by implementing the &lt;code&gt;Drop&lt;/code&gt; trait. The &lt;code&gt;Drop&lt;/code&gt; trait requires you to implement one method named &lt;code&gt;drop&lt;/code&gt; that takes a mutable reference to &lt;code&gt;self&lt;/code&gt;. To see when Rust calls &lt;code&gt;drop&lt;/code&gt;, let&amp;rsquo;s implement &lt;code&gt;drop&lt;/code&gt; with &lt;code&gt;println!&lt;/code&gt; statements for now.</source>
          <target state="translated">&lt;code&gt;Drop&lt;/code&gt; トレイトを実装して、値がスコープ外になったときに実行するコードを指定します。 &lt;code&gt;Drop&lt;/code&gt; トレイトは1つのという名前のメソッドを実装する必要があります &lt;code&gt;drop&lt;/code&gt; を変更可能な参照取る &lt;code&gt;self&lt;/code&gt; 。Rustが &lt;code&gt;drop&lt;/code&gt; を呼び出すタイミングを確認するには、 &lt;code&gt;println!&lt;/code&gt; &lt;code&gt;drop&lt;/code&gt; を実装しましょう！今のところステートメント。</target>
        </trans-unit>
        <trans-unit id="53bce43a089241f4c2fafff5a8b175cee67180c5" translate="yes" xml:space="preserve">
          <source>Specifying Multiple Trait Bounds with the &lt;code id=&quot;specifying-multiple-trait-bounds-with-the--syntax&quot;&gt;+&lt;/code&gt; Syntax</source>
          <target state="translated">&lt;code id=&quot;specifying-multiple-trait-bounds-with-the--syntax&quot;&gt;+&lt;/code&gt; 構文を使用して複数の特性境界を指定する</target>
        </trans-unit>
        <trans-unit id="64d10a40d688450eabd55d43552d23834ffba599" translate="yes" xml:space="preserve">
          <source>Specifying Placeholder Types in Trait Definitions with Associated Types</source>
          <target state="translated">このセクションでは、次のように定義されています。</target>
        </trans-unit>
        <trans-unit id="da26747b5b8c997ced717129fbec68e2cdbe7a45" translate="yes" xml:space="preserve">
          <source>Specifying a relative path with &lt;code&gt;use&lt;/code&gt; is slightly different. Instead of starting from a name in the current scope, we must start the path given to &lt;code&gt;use&lt;/code&gt; with the keyword &lt;code&gt;self&lt;/code&gt;. Listing 7-12 shows how to specify a relative path to get the same behavior as in Listing 7-11.</source>
          <target state="translated">相対パスを &lt;code&gt;use&lt;/code&gt; 指定する方法は少し異なります。現在のスコープの名前から開始する代わりに、キーワード &lt;code&gt;self&lt;/code&gt; で &lt;code&gt;use&lt;/code&gt; するために指定されたパスを開始する必要があります。リスト7-12は、リスト7-11と同じ動作を得るために相対パスを指定する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="fc11eff720809c4cd493109eac5dc2d81ef40e9c" translate="yes" xml:space="preserve">
          <source>Specifying the trait name before the method name clarifies to Rust which implementation of &lt;code&gt;fly&lt;/code&gt; we want to call. We could also write &lt;code&gt;Human::fly(&amp;amp;person)&lt;/code&gt;, which is equivalent to the &lt;code&gt;person.fly()&lt;/code&gt; that we used in Listing 19-18, but this is a bit longer to write if we don&amp;rsquo;t need to disambiguate.</source>
          <target state="translated">メソッド名の前に特性名を指定すると、どの &lt;code&gt;fly&lt;/code&gt; 実装を呼び出すかがRustに明確になります。また、書くことができ &lt;code&gt;Human::fly(&amp;amp;person)&lt;/code&gt; に相当し、 &lt;code&gt;person.fly()&lt;/code&gt; 私たちは、リスト19-18で使用していることを、私たちは明確にする必要がない場合は、この書き込みに少し長いです。</target>
        </trans-unit>
        <trans-unit id="fdd3fcfb95f79f565b62aab40aff6c5797f83dce" translate="yes" xml:space="preserve">
          <source>Splice</source>
          <target state="translated">Splice</target>
        </trans-unit>
        <trans-unit id="102a13cdf7dd5683f20ca56504f851ec5d4093f7" translate="yes" xml:space="preserve">
          <source>Splice::all</source>
          <target state="translated">Splice::all</target>
        </trans-unit>
        <trans-unit id="babc83a710145cf29ba5445f9a833761727d85e2" translate="yes" xml:space="preserve">
          <source>Splice::any</source>
          <target state="translated">Splice::any</target>
        </trans-unit>
        <trans-unit id="a39117cda9a6799d2b046f5064ad27e81c8b7d5e" translate="yes" xml:space="preserve">
          <source>Splice::borrow</source>
          <target state="translated">Splice::borrow</target>
        </trans-unit>
        <trans-unit id="022eb3a4b4a3bd40f080da9a0e93e67b820b75b9" translate="yes" xml:space="preserve">
          <source>Splice::borrow_mut</source>
          <target state="translated">Splice::borrow_mut</target>
        </trans-unit>
        <trans-unit id="ff7eb6c2e890ee28b4d42522a568ad4b9b48c363" translate="yes" xml:space="preserve">
          <source>Splice::by_ref</source>
          <target state="translated">Splice::by_ref</target>
        </trans-unit>
        <trans-unit id="62d42f608770ea5ae5c702b0103a25bb0ca13a0f" translate="yes" xml:space="preserve">
          <source>Splice::chain</source>
          <target state="translated">Splice::chain</target>
        </trans-unit>
        <trans-unit id="451464e9658673df48db7da7c1a46940dbb41ff8" translate="yes" xml:space="preserve">
          <source>Splice::cloned</source>
          <target state="translated">Splice::cloned</target>
        </trans-unit>
        <trans-unit id="2bbc8d6617fd04cbf168523ef4090fec6bf1a14d" translate="yes" xml:space="preserve">
          <source>Splice::cmp</source>
          <target state="translated">Splice::cmp</target>
        </trans-unit>
        <trans-unit id="5f8a1da44559a77b748b3f6abf002f9d0db173bf" translate="yes" xml:space="preserve">
          <source>Splice::collect</source>
          <target state="translated">Splice::collect</target>
        </trans-unit>
        <trans-unit id="3b7f7a8c970a343e1eaadb07c2da66c9efd7e77d" translate="yes" xml:space="preserve">
          <source>Splice::copied</source>
          <target state="translated">Splice::copied</target>
        </trans-unit>
        <trans-unit id="ba54e7ed93441b38a9b01983d469ce12f568db6f" translate="yes" xml:space="preserve">
          <source>Splice::count</source>
          <target state="translated">Splice::count</target>
        </trans-unit>
        <trans-unit id="45d4337a700716d7839d3746c85fc7fc40d5988a" translate="yes" xml:space="preserve">
          <source>Splice::cycle</source>
          <target state="translated">Splice::cycle</target>
        </trans-unit>
        <trans-unit id="53242c9915296db70b6a71a2cde8eb9109c0f23d" translate="yes" xml:space="preserve">
          <source>Splice::drop</source>
          <target state="translated">Splice::drop</target>
        </trans-unit>
        <trans-unit id="0071535faec3336e523e6d1a1272b46979258d35" translate="yes" xml:space="preserve">
          <source>Splice::enumerate</source>
          <target state="translated">Splice::enumerate</target>
        </trans-unit>
        <trans-unit id="01e94ace5d2cfe2543e74dfb7fa0055a44ee9fea" translate="yes" xml:space="preserve">
          <source>Splice::eq</source>
          <target state="translated">Splice::eq</target>
        </trans-unit>
        <trans-unit id="dd000471f364dceac679d4352065fa0ae0e8c457" translate="yes" xml:space="preserve">
          <source>Splice::filter</source>
          <target state="translated">Splice::filter</target>
        </trans-unit>
        <trans-unit id="5e358571c8faf5b751e10a1cd686dd036ecc316c" translate="yes" xml:space="preserve">
          <source>Splice::filter_map</source>
          <target state="translated">Splice::filter_map</target>
        </trans-unit>
        <trans-unit id="961a4aa3a919c6a8b919240300dc2fd22d2c1c91" translate="yes" xml:space="preserve">
          <source>Splice::find</source>
          <target state="translated">Splice::find</target>
        </trans-unit>
        <trans-unit id="486f11abd990d21f3257c01a71e7f28db5506a8c" translate="yes" xml:space="preserve">
          <source>Splice::find_map</source>
          <target state="translated">Splice::find_map</target>
        </trans-unit>
        <trans-unit id="8f321bf0b2ca33ebb6a97663107e3617ec2c137e" translate="yes" xml:space="preserve">
          <source>Splice::flat_map</source>
          <target state="translated">Splice::flat_map</target>
        </trans-unit>
        <trans-unit id="499eeb25b3b20a78fb1cd8b34ee0f1a13abf1370" translate="yes" xml:space="preserve">
          <source>Splice::flatten</source>
          <target state="translated">Splice::flatten</target>
        </trans-unit>
        <trans-unit id="ce5fb222ef2ec7c095e8b6e325fe96997504ba61" translate="yes" xml:space="preserve">
          <source>Splice::fmt</source>
          <target state="translated">Splice::fmt</target>
        </trans-unit>
        <trans-unit id="c6a7ba92d0ef033b5d48af7d964a50a86e18162a" translate="yes" xml:space="preserve">
          <source>Splice::fold</source>
          <target state="translated">Splice::fold</target>
        </trans-unit>
        <trans-unit id="e82705600b1f26364c718836b0449d586d4eb1ea" translate="yes" xml:space="preserve">
          <source>Splice::for_each</source>
          <target state="translated">Splice::for_each</target>
        </trans-unit>
        <trans-unit id="21323427a2a29a43c17c997c3dbd79b674bfb4e8" translate="yes" xml:space="preserve">
          <source>Splice::from</source>
          <target state="translated">Splice::from</target>
        </trans-unit>
        <trans-unit id="a7cead373f4b952225e0764832f3c62efdc4a6cf" translate="yes" xml:space="preserve">
          <source>Splice::fuse</source>
          <target state="translated">Splice::fuse</target>
        </trans-unit>
        <trans-unit id="aa50f3408da9d84c54899b17015b29bbede05d5b" translate="yes" xml:space="preserve">
          <source>Splice::ge</source>
          <target state="translated">Splice::ge</target>
        </trans-unit>
        <trans-unit id="e32ac27b7a480cce928d49c2b1bc40e73780fecd" translate="yes" xml:space="preserve">
          <source>Splice::gt</source>
          <target state="translated">Splice::gt</target>
        </trans-unit>
        <trans-unit id="38eceb5e345323b05e52c82393da17d52e70cbe9" translate="yes" xml:space="preserve">
          <source>Splice::inspect</source>
          <target state="translated">Splice::inspect</target>
        </trans-unit>
        <trans-unit id="491d5b0b46d1c2d818131b73e335fe5ca82e5b48" translate="yes" xml:space="preserve">
          <source>Splice::into</source>
          <target state="translated">Splice::into</target>
        </trans-unit>
        <trans-unit id="98f2ae726cd2762c1db54d8758051fc1261e16cf" translate="yes" xml:space="preserve">
          <source>Splice::into_iter</source>
          <target state="translated">Splice::into_iter</target>
        </trans-unit>
        <trans-unit id="383d95f7f63652db96cc3aec4aa2d1b740db1135" translate="yes" xml:space="preserve">
          <source>Splice::is_empty</source>
          <target state="translated">Splice::is_empty</target>
        </trans-unit>
        <trans-unit id="e65d1565e1f581593a8ecd6e860dd977c23b52c9" translate="yes" xml:space="preserve">
          <source>Splice::is_sorted</source>
          <target state="translated">Splice::is_sorted</target>
        </trans-unit>
        <trans-unit id="4fcaeab7099b38cf11d286c70e6781f06cf82691" translate="yes" xml:space="preserve">
          <source>Splice::is_sorted_by</source>
          <target state="translated">Splice::is_sorted_by</target>
        </trans-unit>
        <trans-unit id="18bddef0dba34d9e52d2fa579f0e69e1694f8f0e" translate="yes" xml:space="preserve">
          <source>Splice::is_sorted_by_key</source>
          <target state="translated">Splice::is_sorted_by_key</target>
        </trans-unit>
        <trans-unit id="ba7524a53544c3d3016b167f7fc9deb79720b18f" translate="yes" xml:space="preserve">
          <source>Splice::last</source>
          <target state="translated">Splice::last</target>
        </trans-unit>
        <trans-unit id="f570faebe931a784fb2709e99800059f3f92a268" translate="yes" xml:space="preserve">
          <source>Splice::le</source>
          <target state="translated">Splice::le</target>
        </trans-unit>
        <trans-unit id="ac9374e537a63770b62a448312472a9dc3d4a8ab" translate="yes" xml:space="preserve">
          <source>Splice::len</source>
          <target state="translated">Splice::len</target>
        </trans-unit>
        <trans-unit id="6d78866daf059bac4c1db0a3f185ee417ae09fe8" translate="yes" xml:space="preserve">
          <source>Splice::lt</source>
          <target state="translated">Splice::lt</target>
        </trans-unit>
        <trans-unit id="363a586253b0de42e9bc51b01820d6cd56b4a63e" translate="yes" xml:space="preserve">
          <source>Splice::map</source>
          <target state="translated">Splice::map</target>
        </trans-unit>
        <trans-unit id="c5cfae9189da826784c424506a8955cf97bff5a5" translate="yes" xml:space="preserve">
          <source>Splice::max</source>
          <target state="translated">Splice::max</target>
        </trans-unit>
        <trans-unit id="a8c3e4f24cc13f365be780b3805514395ccbc405" translate="yes" xml:space="preserve">
          <source>Splice::max_by</source>
          <target state="translated">Splice::max_by</target>
        </trans-unit>
        <trans-unit id="8229392864f24a74b716976cb653abe3703dd9f1" translate="yes" xml:space="preserve">
          <source>Splice::max_by_key</source>
          <target state="translated">Splice::max_by_key</target>
        </trans-unit>
        <trans-unit id="d703d1486f11021ef75c055680b2b99db9b75899" translate="yes" xml:space="preserve">
          <source>Splice::min</source>
          <target state="translated">Splice::min</target>
        </trans-unit>
        <trans-unit id="0ab332500f5703d676d91657b86bf9e1965dcf11" translate="yes" xml:space="preserve">
          <source>Splice::min_by</source>
          <target state="translated">Splice::min_by</target>
        </trans-unit>
        <trans-unit id="1f553ce50563a0a28d5de7bfe1638bab7dca6dc2" translate="yes" xml:space="preserve">
          <source>Splice::min_by_key</source>
          <target state="translated">Splice::min_by_key</target>
        </trans-unit>
        <trans-unit id="ba29255cd5c58d38127acf8b53877bd8c7828c4f" translate="yes" xml:space="preserve">
          <source>Splice::ne</source>
          <target state="translated">Splice::ne</target>
        </trans-unit>
        <trans-unit id="30d321559302113af9914b75260c174c9412f906" translate="yes" xml:space="preserve">
          <source>Splice::next</source>
          <target state="translated">Splice::next</target>
        </trans-unit>
        <trans-unit id="b4a407cbe153bcddb6c861793351fb23454f3a5b" translate="yes" xml:space="preserve">
          <source>Splice::next_back</source>
          <target state="translated">Splice::next_back</target>
        </trans-unit>
        <trans-unit id="cf6219bb4e39772af2093b7bc00b413958c3ae44" translate="yes" xml:space="preserve">
          <source>Splice::nth</source>
          <target state="translated">Splice::nth</target>
        </trans-unit>
        <trans-unit id="a5a9ee518d12670f202aa4ce6973ff33a0df7922" translate="yes" xml:space="preserve">
          <source>Splice::nth_back</source>
          <target state="translated">Splice::nth_back</target>
        </trans-unit>
        <trans-unit id="9b21bc4e106668f934eb7f233a9ca2cc44a6a913" translate="yes" xml:space="preserve">
          <source>Splice::partial_cmp</source>
          <target state="translated">Splice::partial_cmp</target>
        </trans-unit>
        <trans-unit id="1dee4e2895d327033ad3c3b66c820542684a464e" translate="yes" xml:space="preserve">
          <source>Splice::partition</source>
          <target state="translated">Splice::partition</target>
        </trans-unit>
        <trans-unit id="aa1db17c392f556e335fcce5561711bb05a03b92" translate="yes" xml:space="preserve">
          <source>Splice::peekable</source>
          <target state="translated">Splice::peekable</target>
        </trans-unit>
        <trans-unit id="1eadd0033d01820bc0d97f1f2e33d53eb5ec1779" translate="yes" xml:space="preserve">
          <source>Splice::position</source>
          <target state="translated">Splice::position</target>
        </trans-unit>
        <trans-unit id="666018549e296c04d8c5c52771470078bbb7862a" translate="yes" xml:space="preserve">
          <source>Splice::product</source>
          <target state="translated">Splice::product</target>
        </trans-unit>
        <trans-unit id="ecd9316bd8bc61c51b016bdd8cd9883015f5c3cd" translate="yes" xml:space="preserve">
          <source>Splice::rev</source>
          <target state="translated">Splice::rev</target>
        </trans-unit>
        <trans-unit id="7386f1859ba07bbd5f17923107c38e480304fbfe" translate="yes" xml:space="preserve">
          <source>Splice::rfind</source>
          <target state="translated">Splice::rfind</target>
        </trans-unit>
        <trans-unit id="24ba7570e44bb8b3aea278a77720639f4e59dfd0" translate="yes" xml:space="preserve">
          <source>Splice::rfold</source>
          <target state="translated">Splice::rfold</target>
        </trans-unit>
        <trans-unit id="ec2cdc5eaa84d8e2631b6832f7d4a8fdd17a6bc4" translate="yes" xml:space="preserve">
          <source>Splice::rposition</source>
          <target state="translated">Splice::rposition</target>
        </trans-unit>
        <trans-unit id="fabc1d12e61dba4a5c5c2c6b1924c2c5f8609f4c" translate="yes" xml:space="preserve">
          <source>Splice::scan</source>
          <target state="translated">Splice::scan</target>
        </trans-unit>
        <trans-unit id="8d5ee36fd72fb3460109d468d4d74555827a0ee9" translate="yes" xml:space="preserve">
          <source>Splice::size_hint</source>
          <target state="translated">Splice::size_hint</target>
        </trans-unit>
        <trans-unit id="09f288b17a862c019979176e29e7ccea42d1dedc" translate="yes" xml:space="preserve">
          <source>Splice::skip</source>
          <target state="translated">Splice::skip</target>
        </trans-unit>
        <trans-unit id="3d180d62d277f379bb8a60b4f1823d06b1bfa2e6" translate="yes" xml:space="preserve">
          <source>Splice::skip_while</source>
          <target state="translated">Splice::skip_while</target>
        </trans-unit>
        <trans-unit id="cd11d5291334a37b5de45419d0b7eedb5e4469cb" translate="yes" xml:space="preserve">
          <source>Splice::step_by</source>
          <target state="translated">Splice::step_by</target>
        </trans-unit>
        <trans-unit id="831a4f097a3c47319b54babc561d38910f170c02" translate="yes" xml:space="preserve">
          <source>Splice::sum</source>
          <target state="translated">Splice::sum</target>
        </trans-unit>
        <trans-unit id="3c5d879dcd505f6b39c7518de9b235dc8c01e4fc" translate="yes" xml:space="preserve">
          <source>Splice::take</source>
          <target state="translated">Splice::take</target>
        </trans-unit>
        <trans-unit id="2d71962fbf8d0ead68d89535d6778944abcdc679" translate="yes" xml:space="preserve">
          <source>Splice::take_while</source>
          <target state="translated">Splice::take_while</target>
        </trans-unit>
        <trans-unit id="38f93c9f33eeb59968290a7e0897c1f55f96c687" translate="yes" xml:space="preserve">
          <source>Splice::try_fold</source>
          <target state="translated">Splice::try_fold</target>
        </trans-unit>
        <trans-unit id="724df3527b404d3a53b3e31356080824d05c7816" translate="yes" xml:space="preserve">
          <source>Splice::try_for_each</source>
          <target state="translated">Splice::try_for_each</target>
        </trans-unit>
        <trans-unit id="fd574e8628936827c6ae9027b872e02aa508a457" translate="yes" xml:space="preserve">
          <source>Splice::try_from</source>
          <target state="translated">Splice::try_from</target>
        </trans-unit>
        <trans-unit id="eb53ae611017056488d398b33cbbc3d7954de6ee" translate="yes" xml:space="preserve">
          <source>Splice::try_into</source>
          <target state="translated">Splice::try_into</target>
        </trans-unit>
        <trans-unit id="44e12332c99bd4ce49d2bb351c49223807207dd9" translate="yes" xml:space="preserve">
          <source>Splice::try_rfold</source>
          <target state="translated">Splice::try_rfold</target>
        </trans-unit>
        <trans-unit id="161d232f5fe792d5ecbec788482e69487e0c0d56" translate="yes" xml:space="preserve">
          <source>Splice::type_id</source>
          <target state="translated">Splice::type_id</target>
        </trans-unit>
        <trans-unit id="1bbfd48d60c0a4558b463911dbf85558f413ffa6" translate="yes" xml:space="preserve">
          <source>Splice::unzip</source>
          <target state="translated">Splice::unzip</target>
        </trans-unit>
        <trans-unit id="08e4a64b53c528f2a546f45e3fc516d0e8819ad4" translate="yes" xml:space="preserve">
          <source>Splice::zip</source>
          <target state="translated">Splice::zip</target>
        </trans-unit>
        <trans-unit id="fc8230b4119ad4b994db2324d71f4e0ae7ad932c" translate="yes" xml:space="preserve">
          <source>Split</source>
          <target state="translated">Split</target>
        </trans-unit>
        <trans-unit id="b97656a3c38e1335485a4b3a9614459a6c47d666" translate="yes" xml:space="preserve">
          <source>Split your program into a &lt;em&gt;main.rs&lt;/em&gt; and a &lt;em&gt;lib.rs&lt;/em&gt; and move your program&amp;rsquo;s logic to &lt;em&gt;lib.rs&lt;/em&gt;.</source>
          <target state="translated">あなたのプログラムを分割&lt;em&gt;main.rs&lt;/em&gt;と&lt;em&gt;lib.rs&lt;/em&gt;とにあなたのプログラムのロジックを移動&lt;em&gt;lib.rs&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="50d9b1e83df2fc97d5402e500dababd9cd5b96e5" translate="yes" xml:space="preserve">
          <source>Split::all</source>
          <target state="translated">Split::all</target>
        </trans-unit>
        <trans-unit id="c3ffc2df77467ddf70ca7e247ca14fe7bf5358c5" translate="yes" xml:space="preserve">
          <source>Split::any</source>
          <target state="translated">Split::any</target>
        </trans-unit>
        <trans-unit id="ddee622860a4181fe41501ad32f30df9891bae71" translate="yes" xml:space="preserve">
          <source>Split::borrow</source>
          <target state="translated">Split::borrow</target>
        </trans-unit>
        <trans-unit id="fd8aa3f4c0c069bec8b3cc99e23a4f97d1e387e5" translate="yes" xml:space="preserve">
          <source>Split::borrow_mut</source>
          <target state="translated">Split::borrow_mut</target>
        </trans-unit>
        <trans-unit id="60a9acc7030fe94d73196e5eb6bc9945c2cb214d" translate="yes" xml:space="preserve">
          <source>Split::by_ref</source>
          <target state="translated">Split::by_ref</target>
        </trans-unit>
        <trans-unit id="07781b46907c350ec31533fd95ff333fb83f4672" translate="yes" xml:space="preserve">
          <source>Split::chain</source>
          <target state="translated">Split::chain</target>
        </trans-unit>
        <trans-unit id="01414495bfb2107bcb842363eaa2aaefde42adcb" translate="yes" xml:space="preserve">
          <source>Split::clone</source>
          <target state="translated">Split::clone</target>
        </trans-unit>
        <trans-unit id="8fa94e8f3a6947468861d014a2242e7e533419de" translate="yes" xml:space="preserve">
          <source>Split::clone_from</source>
          <target state="translated">Split::clone_from</target>
        </trans-unit>
        <trans-unit id="9fabd2265062c7c41c7e60fd2c8e2d73bfd612ce" translate="yes" xml:space="preserve">
          <source>Split::clone_into</source>
          <target state="translated">Split::clone_into</target>
        </trans-unit>
        <trans-unit id="11b7d114dd91e3f592d1c2b7c0ca525a9ce90a2b" translate="yes" xml:space="preserve">
          <source>Split::cloned</source>
          <target state="translated">Split::cloned</target>
        </trans-unit>
        <trans-unit id="f1939db29648a91dd7990b7724eaa4701118728c" translate="yes" xml:space="preserve">
          <source>Split::cmp</source>
          <target state="translated">Split::cmp</target>
        </trans-unit>
        <trans-unit id="feb6a82b0f70e568351ee948035313650d3cdcae" translate="yes" xml:space="preserve">
          <source>Split::collect</source>
          <target state="translated">Split::collect</target>
        </trans-unit>
        <trans-unit id="f42c61d8dcd2768f77ba1f6b43cf6d82bfd95a0c" translate="yes" xml:space="preserve">
          <source>Split::copied</source>
          <target state="translated">Split::copied</target>
        </trans-unit>
        <trans-unit id="11a6cf772057ae6ae09af76efbe481b7757c7027" translate="yes" xml:space="preserve">
          <source>Split::count</source>
          <target state="translated">Split::count</target>
        </trans-unit>
        <trans-unit id="a5c31ec93192ead6403df1675cb15b6ee7b4d58b" translate="yes" xml:space="preserve">
          <source>Split::cycle</source>
          <target state="translated">Split::cycle</target>
        </trans-unit>
        <trans-unit id="290ea8f15ce52868f93720412912e4fac41386bc" translate="yes" xml:space="preserve">
          <source>Split::enumerate</source>
          <target state="translated">Split::enumerate</target>
        </trans-unit>
        <trans-unit id="6470537034febc0a41d05fe1b8c54e6642ed5710" translate="yes" xml:space="preserve">
          <source>Split::eq</source>
          <target state="translated">Split::eq</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
