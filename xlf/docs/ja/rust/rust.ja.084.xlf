<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="rust">
    <body>
      <group id="rust">
        <trans-unit id="0fdd7d7934ab894a3047c2245042589e94e3f26b" translate="yes" xml:space="preserve">
          <source>Filename: src/bin/main.rs</source>
          <target state="translated">ファイル名:src/bin/main.rs</target>
        </trans-unit>
        <trans-unit id="8e86c775b0151ad294556754d9d32d0a378d89a2" translate="yes" xml:space="preserve">
          <source>Filename: src/front_of_house.rs</source>
          <target state="translated">ファイル名:src/front_of_house.rs</target>
        </trans-unit>
        <trans-unit id="e47929b5d2ede0dcd00ecfe8380b419d77496276" translate="yes" xml:space="preserve">
          <source>Filename: src/front_of_house/hosting.rs</source>
          <target state="translated">ファイル名:src/front_of_house/hosting.rs</target>
        </trans-unit>
        <trans-unit id="7d2518c204baa1386e9e328285a548971d9689e1" translate="yes" xml:space="preserve">
          <source>Filename: src/lib.rs</source>
          <target state="translated">ファイル名:src/lib.rs</target>
        </trans-unit>
        <trans-unit id="6bf165519fb28f6463bffd299a348551f7a70ffe" translate="yes" xml:space="preserve">
          <source>Filename: src/main.rs</source>
          <target state="translated">ファイル名:src/main.rs</target>
        </trans-unit>
        <trans-unit id="4c278d633f2b0c6d8e3ac60f43097864b83be1d1" translate="yes" xml:space="preserve">
          <source>Filename: tests/common.rs</source>
          <target state="translated">ファイル名:tests/common.rs</target>
        </trans-unit>
        <trans-unit id="89bb3352206d43a9c7be07621ae99a4c7a63d59b" translate="yes" xml:space="preserve">
          <source>Filename: tests/integration_test.rs</source>
          <target state="translated">ファイル名:tests/integration_test.rs</target>
        </trans-unit>
        <trans-unit id="da7e9e679b1fa7c216538bf5373f282426df5514" translate="yes" xml:space="preserve">
          <source>Files are automatically closed when they go out of scope. Errors detected on closing are ignored by the implementation of &lt;code&gt;Drop&lt;/code&gt;. Use the method &lt;a href=&quot;struct.file#method.sync_all&quot;&gt;&lt;code&gt;sync_all&lt;/code&gt;&lt;/a&gt; if these errors must be manually handled.</source>
          <target state="translated">ファイルは、範囲外になると自動的に閉じられます。クローズ時に検出されたエラーは、 &lt;code&gt;Drop&lt;/code&gt; の実装によって無視されます。これらのエラーを手動で処理する必要がある場合は、&lt;a href=&quot;struct.file#method.sync_all&quot;&gt; &lt;code&gt;sync_all&lt;/code&gt; &lt;/a&gt;メソッドを使用します。</target>
        </trans-unit>
        <trans-unit id="c9f364a0ba59ec6db4093419159a64cbb17d3ea1" translate="yes" xml:space="preserve">
          <source>Filesystem Path</source>
          <target state="translated">ファイルシステムパス</target>
        </trans-unit>
        <trans-unit id="d6f2cf3e28184d29b142a65282628e9e9ed3b391" translate="yes" xml:space="preserve">
          <source>Filesystem manipulation operations.</source>
          <target state="translated">ファイルシステムの操作</target>
        </trans-unit>
        <trans-unit id="1810ebd9bf18910a703b86e95fef3813caed4917" translate="yes" xml:space="preserve">
          <source>Fill/Alignment</source>
          <target state="translated">Fill/Alignment</target>
        </trans-unit>
        <trans-unit id="c8e2efee182c5700f3ea63856c64beff2fb9c8c8" translate="yes" xml:space="preserve">
          <source>Fills &lt;code&gt;self&lt;/code&gt; with elements by cloning &lt;code&gt;value&lt;/code&gt;.</source>
          <target state="translated">塗りつぶし &lt;code&gt;self&lt;/code&gt; クローニングによって要素と &lt;code&gt;value&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d7decf1aa22b02ae8abf9a96849ee423eee838e4" translate="yes" xml:space="preserve">
          <source>Filter</source>
          <target state="translated">Filter</target>
        </trans-unit>
        <trans-unit id="cbdc4f8747f1519b270349e133c571ee1757bb1c" translate="yes" xml:space="preserve">
          <source>Filter::all</source>
          <target state="translated">Filter::all</target>
        </trans-unit>
        <trans-unit id="213652adf17d8d5b23821af3df01aaf36e105b47" translate="yes" xml:space="preserve">
          <source>Filter::any</source>
          <target state="translated">Filter::any</target>
        </trans-unit>
        <trans-unit id="c56449e149c1793febf6f13545654fac67e14e5a" translate="yes" xml:space="preserve">
          <source>Filter::borrow</source>
          <target state="translated">Filter::borrow</target>
        </trans-unit>
        <trans-unit id="a80b74f3a8cb1f73ab5e73e6e8d67e70d6ab3056" translate="yes" xml:space="preserve">
          <source>Filter::borrow_mut</source>
          <target state="translated">Filter::borrow_mut</target>
        </trans-unit>
        <trans-unit id="76237c827e872488f01eff9ed90f791a915570c6" translate="yes" xml:space="preserve">
          <source>Filter::by_ref</source>
          <target state="translated">Filter::by_ref</target>
        </trans-unit>
        <trans-unit id="c08ff6ff4c7d0c0a773ca134ca43a253a245dfd2" translate="yes" xml:space="preserve">
          <source>Filter::chain</source>
          <target state="translated">Filter::chain</target>
        </trans-unit>
        <trans-unit id="6aa9effab13d7de89564c149c0bea2c3feb5e4b3" translate="yes" xml:space="preserve">
          <source>Filter::clone</source>
          <target state="translated">Filter::clone</target>
        </trans-unit>
        <trans-unit id="e8b20e49791eb3c6b7a3e63b638a8f8db9699303" translate="yes" xml:space="preserve">
          <source>Filter::clone_from</source>
          <target state="translated">Filter::clone_from</target>
        </trans-unit>
        <trans-unit id="b1a5e59ab9400c8da99232745d0500b07031cca8" translate="yes" xml:space="preserve">
          <source>Filter::clone_into</source>
          <target state="translated">Filter::clone_into</target>
        </trans-unit>
        <trans-unit id="e3902049f2a6ddd774deb61257ff1952539bf21a" translate="yes" xml:space="preserve">
          <source>Filter::cloned</source>
          <target state="translated">Filter::cloned</target>
        </trans-unit>
        <trans-unit id="76bdb4ad2df9791c692d243dd7adee158b8b1812" translate="yes" xml:space="preserve">
          <source>Filter::cmp</source>
          <target state="translated">Filter::cmp</target>
        </trans-unit>
        <trans-unit id="f720610c04103a2d0aba4df49c3f0fa78ee69c23" translate="yes" xml:space="preserve">
          <source>Filter::collect</source>
          <target state="translated">Filter::collect</target>
        </trans-unit>
        <trans-unit id="775f688375a5095a1cc2ef60b92888bab1a6e97a" translate="yes" xml:space="preserve">
          <source>Filter::copied</source>
          <target state="translated">Filter::copied</target>
        </trans-unit>
        <trans-unit id="f16939860dd5d154c5f25da7f419042acbf0c772" translate="yes" xml:space="preserve">
          <source>Filter::count</source>
          <target state="translated">Filter::count</target>
        </trans-unit>
        <trans-unit id="67fdc43a3084de4052d59b3b63f0c63e6bb5d964" translate="yes" xml:space="preserve">
          <source>Filter::cycle</source>
          <target state="translated">Filter::cycle</target>
        </trans-unit>
        <trans-unit id="cd9139b739680b08d5f86e5eaac4157bc1eca80d" translate="yes" xml:space="preserve">
          <source>Filter::enumerate</source>
          <target state="translated">Filter::enumerate</target>
        </trans-unit>
        <trans-unit id="c26e44c81ed8d12f0079a166a0d6667f105d37ec" translate="yes" xml:space="preserve">
          <source>Filter::eq</source>
          <target state="translated">Filter::eq</target>
        </trans-unit>
        <trans-unit id="a15849cd825bfff00ebb42b59700eb882c5694d9" translate="yes" xml:space="preserve">
          <source>Filter::filter</source>
          <target state="translated">Filter::filter</target>
        </trans-unit>
        <trans-unit id="24efc78d3f6adc5e59647487bd7ca0c304590d15" translate="yes" xml:space="preserve">
          <source>Filter::filter_map</source>
          <target state="translated">Filter::filter_map</target>
        </trans-unit>
        <trans-unit id="a08364af9a780af59da2e7dacb512c40b0b44167" translate="yes" xml:space="preserve">
          <source>Filter::find</source>
          <target state="translated">Filter::find</target>
        </trans-unit>
        <trans-unit id="dfd691ecf4bc1689e21b0e8f66fd7983b9f63f3d" translate="yes" xml:space="preserve">
          <source>Filter::find_map</source>
          <target state="translated">Filter::find_map</target>
        </trans-unit>
        <trans-unit id="5fcc14d3fdac172bc84f9cacf0d607f84e029b57" translate="yes" xml:space="preserve">
          <source>Filter::flat_map</source>
          <target state="translated">Filter::flat_map</target>
        </trans-unit>
        <trans-unit id="26583da011e813ddafc93dccbf1207378fa84499" translate="yes" xml:space="preserve">
          <source>Filter::flatten</source>
          <target state="translated">Filter::flatten</target>
        </trans-unit>
        <trans-unit id="0081de77ca92e9a27e84cd163fdbdc3a133d7ec2" translate="yes" xml:space="preserve">
          <source>Filter::fmt</source>
          <target state="translated">Filter::fmt</target>
        </trans-unit>
        <trans-unit id="cb5810e92581c7ab74b65631c90f7a801485519b" translate="yes" xml:space="preserve">
          <source>Filter::fold</source>
          <target state="translated">Filter::fold</target>
        </trans-unit>
        <trans-unit id="c2f6811f53cf481731dba95f289bc5b451fb8096" translate="yes" xml:space="preserve">
          <source>Filter::for_each</source>
          <target state="translated">Filter::for_each</target>
        </trans-unit>
        <trans-unit id="5d32efb9ef420f99d29d9cfdafd65780f6152d22" translate="yes" xml:space="preserve">
          <source>Filter::from</source>
          <target state="translated">Filter::from</target>
        </trans-unit>
        <trans-unit id="89189c4cbf29e04977c47f5286c6c94193c7d1d7" translate="yes" xml:space="preserve">
          <source>Filter::fuse</source>
          <target state="translated">Filter::fuse</target>
        </trans-unit>
        <trans-unit id="3d442ac00bf682738eb7e8185a5e11718f4244af" translate="yes" xml:space="preserve">
          <source>Filter::ge</source>
          <target state="translated">Filter::ge</target>
        </trans-unit>
        <trans-unit id="988424c48047d84bced56ec599d616c88d157ba1" translate="yes" xml:space="preserve">
          <source>Filter::gt</source>
          <target state="translated">Filter::gt</target>
        </trans-unit>
        <trans-unit id="935ea9ea374208a06eb72657dc289a8b1352b9c8" translate="yes" xml:space="preserve">
          <source>Filter::inspect</source>
          <target state="translated">Filter::inspect</target>
        </trans-unit>
        <trans-unit id="c066ff580282ed2966a365604533d7fc4e4343b4" translate="yes" xml:space="preserve">
          <source>Filter::into</source>
          <target state="translated">Filter::into</target>
        </trans-unit>
        <trans-unit id="5bd2ab99188866f12a730a837d29da3bcaad7a8e" translate="yes" xml:space="preserve">
          <source>Filter::into_iter</source>
          <target state="translated">Filter::into_iter</target>
        </trans-unit>
        <trans-unit id="654d65456d47a9a637a8ace3472ffb07cc121839" translate="yes" xml:space="preserve">
          <source>Filter::is_sorted</source>
          <target state="translated">Filter::is_sorted</target>
        </trans-unit>
        <trans-unit id="120f503d9cd2ba86358dfadbcba49346124c01ea" translate="yes" xml:space="preserve">
          <source>Filter::is_sorted_by</source>
          <target state="translated">Filter::is_sorted_by</target>
        </trans-unit>
        <trans-unit id="94b2a18bec30d810f9dcb765cca9e6a8de1b6cd3" translate="yes" xml:space="preserve">
          <source>Filter::is_sorted_by_key</source>
          <target state="translated">Filter::is_sorted_by_key</target>
        </trans-unit>
        <trans-unit id="159d811fafa2e0efe7c5ba7415af454c491f66cd" translate="yes" xml:space="preserve">
          <source>Filter::last</source>
          <target state="translated">Filter::last</target>
        </trans-unit>
        <trans-unit id="3d7f719326ba1977f049f327dae155cd5d008edc" translate="yes" xml:space="preserve">
          <source>Filter::le</source>
          <target state="translated">Filter::le</target>
        </trans-unit>
        <trans-unit id="f75e00cbb3e7d9494f344d32f9634dc98d3159db" translate="yes" xml:space="preserve">
          <source>Filter::lt</source>
          <target state="translated">Filter::lt</target>
        </trans-unit>
        <trans-unit id="d357c8df2881bd5268acbe3d45730d4a2455a03f" translate="yes" xml:space="preserve">
          <source>Filter::map</source>
          <target state="translated">Filter::map</target>
        </trans-unit>
        <trans-unit id="685fae1c6826405dbf3dd5154e10decba5601aef" translate="yes" xml:space="preserve">
          <source>Filter::max</source>
          <target state="translated">Filter::max</target>
        </trans-unit>
        <trans-unit id="0e44ccbef3a78d02dba3572d78ec33af28c5e10d" translate="yes" xml:space="preserve">
          <source>Filter::max_by</source>
          <target state="translated">Filter::max_by</target>
        </trans-unit>
        <trans-unit id="4e356fad5f964adfe160f41cf46044f86e855415" translate="yes" xml:space="preserve">
          <source>Filter::max_by_key</source>
          <target state="translated">Filter::max_by_key</target>
        </trans-unit>
        <trans-unit id="cd5c61dcdd3a4eb6ffe9980bcfa99812a22a99b8" translate="yes" xml:space="preserve">
          <source>Filter::min</source>
          <target state="translated">Filter::min</target>
        </trans-unit>
        <trans-unit id="6267572b9001345858bd23a3c2a5283613550f1c" translate="yes" xml:space="preserve">
          <source>Filter::min_by</source>
          <target state="translated">Filter::min_by</target>
        </trans-unit>
        <trans-unit id="1434d5ff7c813900572d3d1d17e7e9c616ddca1c" translate="yes" xml:space="preserve">
          <source>Filter::min_by_key</source>
          <target state="translated">Filter::min_by_key</target>
        </trans-unit>
        <trans-unit id="99b66bcba4654ffdef5ad6f5a89651da3c827526" translate="yes" xml:space="preserve">
          <source>Filter::ne</source>
          <target state="translated">Filter::ne</target>
        </trans-unit>
        <trans-unit id="9f2847ef7da7296603b441916e18d32d60eae92d" translate="yes" xml:space="preserve">
          <source>Filter::next</source>
          <target state="translated">Filter::next</target>
        </trans-unit>
        <trans-unit id="f45b4e6d5533e6f3377975f48156cab4e4d39687" translate="yes" xml:space="preserve">
          <source>Filter::next_back</source>
          <target state="translated">Filter::next_back</target>
        </trans-unit>
        <trans-unit id="a26082fae2f4ba20b3e7fae7ad76d84b633340b4" translate="yes" xml:space="preserve">
          <source>Filter::nth</source>
          <target state="translated">Filter::nth</target>
        </trans-unit>
        <trans-unit id="33367b8b38a92926a22e41e47c6609e03d903dae" translate="yes" xml:space="preserve">
          <source>Filter::nth_back</source>
          <target state="translated">Filter::nth_back</target>
        </trans-unit>
        <trans-unit id="9299c303759eec1e6d407635cf1c4c8007db8f32" translate="yes" xml:space="preserve">
          <source>Filter::partial_cmp</source>
          <target state="translated">Filter::partial_cmp</target>
        </trans-unit>
        <trans-unit id="4b800d21e02fa744f44ecf3517b8c0380f8c45dc" translate="yes" xml:space="preserve">
          <source>Filter::partition</source>
          <target state="translated">Filter::partition</target>
        </trans-unit>
        <trans-unit id="50b0dd0933b632753646b3db69322e05915e7e9c" translate="yes" xml:space="preserve">
          <source>Filter::peekable</source>
          <target state="translated">Filter::peekable</target>
        </trans-unit>
        <trans-unit id="56cbb0512792b87b005d0edc38dd7f5b7d66d89c" translate="yes" xml:space="preserve">
          <source>Filter::position</source>
          <target state="translated">Filter::position</target>
        </trans-unit>
        <trans-unit id="8abcfc1e2912b7d94dafa01d3c894ad55bf06811" translate="yes" xml:space="preserve">
          <source>Filter::product</source>
          <target state="translated">Filter::product</target>
        </trans-unit>
        <trans-unit id="744beb8eba444cd8007aca26fddc12f77d06c7ee" translate="yes" xml:space="preserve">
          <source>Filter::rev</source>
          <target state="translated">Filter::rev</target>
        </trans-unit>
        <trans-unit id="2fbee7cabd92c1bbb40aa4e4d8bc11ffb7323bd0" translate="yes" xml:space="preserve">
          <source>Filter::rfind</source>
          <target state="translated">Filter::rfind</target>
        </trans-unit>
        <trans-unit id="c04751947038390718dfb4e703413f7458033f8a" translate="yes" xml:space="preserve">
          <source>Filter::rfold</source>
          <target state="translated">Filter::rfold</target>
        </trans-unit>
        <trans-unit id="fb5edd411694fb58eb50d1adee34a1f1672a86d1" translate="yes" xml:space="preserve">
          <source>Filter::rposition</source>
          <target state="translated">Filter::rposition</target>
        </trans-unit>
        <trans-unit id="0443bec5e567f4f41bf9211e6a14a53d932ca5de" translate="yes" xml:space="preserve">
          <source>Filter::scan</source>
          <target state="translated">Filter::scan</target>
        </trans-unit>
        <trans-unit id="3c87d52dd510721bf36aa5824dfda723f1cc9c41" translate="yes" xml:space="preserve">
          <source>Filter::size_hint</source>
          <target state="translated">Filter::size_hint</target>
        </trans-unit>
        <trans-unit id="73ff3ae6b81ca5209cbedecccee9a9295c89e420" translate="yes" xml:space="preserve">
          <source>Filter::skip</source>
          <target state="translated">Filter::skip</target>
        </trans-unit>
        <trans-unit id="63485bee608bbb032e62ac1926d4423f7e4ff5cf" translate="yes" xml:space="preserve">
          <source>Filter::skip_while</source>
          <target state="translated">Filter::skip_while</target>
        </trans-unit>
        <trans-unit id="b3e2246b0543b7c24d7766b9a4c389adda77e23a" translate="yes" xml:space="preserve">
          <source>Filter::step_by</source>
          <target state="translated">Filter::step_by</target>
        </trans-unit>
        <trans-unit id="cb8f3bb10ced2597f26dbbb4a22a852a6b7fc5a6" translate="yes" xml:space="preserve">
          <source>Filter::sum</source>
          <target state="translated">Filter::sum</target>
        </trans-unit>
        <trans-unit id="fd528d522f0e9356841949d9382636816d91e657" translate="yes" xml:space="preserve">
          <source>Filter::take</source>
          <target state="translated">Filter::take</target>
        </trans-unit>
        <trans-unit id="53e4721dbfdbc67e38abc29a2ba5b0855c42f1d6" translate="yes" xml:space="preserve">
          <source>Filter::take_while</source>
          <target state="translated">Filter::take_while</target>
        </trans-unit>
        <trans-unit id="8d7cc088f213c95ed6d117d9f20756f4b59fd99c" translate="yes" xml:space="preserve">
          <source>Filter::to_owned</source>
          <target state="translated">Filter::to_owned</target>
        </trans-unit>
        <trans-unit id="91edcccfbd424db1e271a58b030ecd53ce7cc376" translate="yes" xml:space="preserve">
          <source>Filter::try_fold</source>
          <target state="translated">Filter::try_fold</target>
        </trans-unit>
        <trans-unit id="4e5dc865ae5492bff8c965279dc8d8d6549367fc" translate="yes" xml:space="preserve">
          <source>Filter::try_for_each</source>
          <target state="translated">Filter::try_for_each</target>
        </trans-unit>
        <trans-unit id="a29a975cd5ff530452972a645aab000d7a0a9564" translate="yes" xml:space="preserve">
          <source>Filter::try_from</source>
          <target state="translated">Filter::try_from</target>
        </trans-unit>
        <trans-unit id="e0430947230f7346595292222e6fd915f5dd81cc" translate="yes" xml:space="preserve">
          <source>Filter::try_into</source>
          <target state="translated">Filter::try_into</target>
        </trans-unit>
        <trans-unit id="8cec84df6490ee5ddbb4ad01e2e99b6ef2f04f4f" translate="yes" xml:space="preserve">
          <source>Filter::try_rfold</source>
          <target state="translated">Filter::try_rfold</target>
        </trans-unit>
        <trans-unit id="0754f58624302676282d4836edee3ed84e8620f7" translate="yes" xml:space="preserve">
          <source>Filter::type_id</source>
          <target state="translated">Filter::type_id</target>
        </trans-unit>
        <trans-unit id="74df6714231936212824bfa512b7d688c36309ea" translate="yes" xml:space="preserve">
          <source>Filter::unzip</source>
          <target state="translated">Filter::unzip</target>
        </trans-unit>
        <trans-unit id="8e017a842575b7cdf7dcc2ab224971d1284d20ec" translate="yes" xml:space="preserve">
          <source>Filter::zip</source>
          <target state="translated">Filter::zip</target>
        </trans-unit>
        <trans-unit id="cbcae3949ded35d509783e6f0637ed71ff60f4a6" translate="yes" xml:space="preserve">
          <source>FilterMap</source>
          <target state="translated">FilterMap</target>
        </trans-unit>
        <trans-unit id="7b92b5eae9e8062c60cffe29ca8736eca2f30e6c" translate="yes" xml:space="preserve">
          <source>FilterMap::all</source>
          <target state="translated">FilterMap::all</target>
        </trans-unit>
        <trans-unit id="056763da49a00dedd56d642628227f49af82fa2c" translate="yes" xml:space="preserve">
          <source>FilterMap::any</source>
          <target state="translated">FilterMap::any</target>
        </trans-unit>
        <trans-unit id="e22da377c9a59dd2414678b2de94caf302f4b11a" translate="yes" xml:space="preserve">
          <source>FilterMap::borrow</source>
          <target state="translated">FilterMap::borrow</target>
        </trans-unit>
        <trans-unit id="f52bf4743271f18a79db1b6d0cf7659f6a5a4470" translate="yes" xml:space="preserve">
          <source>FilterMap::borrow_mut</source>
          <target state="translated">FilterMap::borrow_mut</target>
        </trans-unit>
        <trans-unit id="afd052ecc7eac7c108a37d4e4f95c5b462c283a8" translate="yes" xml:space="preserve">
          <source>FilterMap::by_ref</source>
          <target state="translated">FilterMap::by_ref</target>
        </trans-unit>
        <trans-unit id="6c4d335a70bb28a89e78be903a69ac81820531b4" translate="yes" xml:space="preserve">
          <source>FilterMap::chain</source>
          <target state="translated">FilterMap::chain</target>
        </trans-unit>
        <trans-unit id="e72e0d33d70b5bb441f9c636ac02c73fec770065" translate="yes" xml:space="preserve">
          <source>FilterMap::clone</source>
          <target state="translated">FilterMap::clone</target>
        </trans-unit>
        <trans-unit id="e59e8e02d0632862f5235d89cd22b4d107ce257e" translate="yes" xml:space="preserve">
          <source>FilterMap::clone_from</source>
          <target state="translated">FilterMap::clone_from</target>
        </trans-unit>
        <trans-unit id="90db74595be16c2cb19f9cab1796a2edce3d0af7" translate="yes" xml:space="preserve">
          <source>FilterMap::clone_into</source>
          <target state="translated">FilterMap::clone_into</target>
        </trans-unit>
        <trans-unit id="c9777fbc2076ee56339b6fc1fbdf983d76c7b127" translate="yes" xml:space="preserve">
          <source>FilterMap::cloned</source>
          <target state="translated">FilterMap::cloned</target>
        </trans-unit>
        <trans-unit id="5807d265563c7c60620fc8da08b872c9ab8d3fd9" translate="yes" xml:space="preserve">
          <source>FilterMap::cmp</source>
          <target state="translated">FilterMap::cmp</target>
        </trans-unit>
        <trans-unit id="1bad71d537463c8edec7eeed9bb36bbe800d0240" translate="yes" xml:space="preserve">
          <source>FilterMap::collect</source>
          <target state="translated">FilterMap::collect</target>
        </trans-unit>
        <trans-unit id="f362b610a095c9213723aa6b7c29a70ad6a75d23" translate="yes" xml:space="preserve">
          <source>FilterMap::copied</source>
          <target state="translated">FilterMap::copied</target>
        </trans-unit>
        <trans-unit id="15f849a9134f9ee541710bde8fa395c7f5827ea5" translate="yes" xml:space="preserve">
          <source>FilterMap::count</source>
          <target state="translated">FilterMap::count</target>
        </trans-unit>
        <trans-unit id="b04e79b1c207ad85f19cc770bf3af8a8cdfc7564" translate="yes" xml:space="preserve">
          <source>FilterMap::cycle</source>
          <target state="translated">FilterMap::cycle</target>
        </trans-unit>
        <trans-unit id="d5eaa8ed50a34c4d51cf80b092cd79a044f981dc" translate="yes" xml:space="preserve">
          <source>FilterMap::enumerate</source>
          <target state="translated">FilterMap::enumerate</target>
        </trans-unit>
        <trans-unit id="3049b24cc78d8dee8b282464fe6a54629d9d99a7" translate="yes" xml:space="preserve">
          <source>FilterMap::eq</source>
          <target state="translated">FilterMap::eq</target>
        </trans-unit>
        <trans-unit id="c6574764327f750fbed775fea3b87ff0f564ab4b" translate="yes" xml:space="preserve">
          <source>FilterMap::filter</source>
          <target state="translated">FilterMap::filter</target>
        </trans-unit>
        <trans-unit id="5fd3ed340b926621f6e6a7cec27c42b8aa8de606" translate="yes" xml:space="preserve">
          <source>FilterMap::filter_map</source>
          <target state="translated">FilterMap::filter_map</target>
        </trans-unit>
        <trans-unit id="e64c38e3c57d335f0029952b9f3dfb8de6339646" translate="yes" xml:space="preserve">
          <source>FilterMap::find</source>
          <target state="translated">FilterMap::find</target>
        </trans-unit>
        <trans-unit id="a782576451cde1a09fb3fcb04ed110cb35558244" translate="yes" xml:space="preserve">
          <source>FilterMap::find_map</source>
          <target state="translated">FilterMap::find_map</target>
        </trans-unit>
        <trans-unit id="2f1d9d14678b908bdc8f961d330d535e24696c96" translate="yes" xml:space="preserve">
          <source>FilterMap::flat_map</source>
          <target state="translated">FilterMap::flat_map</target>
        </trans-unit>
        <trans-unit id="373bd651e683619f593d10b616679672c7aaed59" translate="yes" xml:space="preserve">
          <source>FilterMap::flatten</source>
          <target state="translated">FilterMap::flatten</target>
        </trans-unit>
        <trans-unit id="c1bd93959b35c9e527b2799deacab3c73c0eb53a" translate="yes" xml:space="preserve">
          <source>FilterMap::fmt</source>
          <target state="translated">FilterMap::fmt</target>
        </trans-unit>
        <trans-unit id="17c141370292082f0ec7c950597e3f230f9c5eba" translate="yes" xml:space="preserve">
          <source>FilterMap::fold</source>
          <target state="translated">FilterMap::fold</target>
        </trans-unit>
        <trans-unit id="764f2cd89d16cf2d61f033ea733cbd68ac155cf8" translate="yes" xml:space="preserve">
          <source>FilterMap::for_each</source>
          <target state="translated">FilterMap::for_each</target>
        </trans-unit>
        <trans-unit id="b529e2a588242fc40bc3a565040f503232812103" translate="yes" xml:space="preserve">
          <source>FilterMap::from</source>
          <target state="translated">FilterMap::from</target>
        </trans-unit>
        <trans-unit id="782e9758d3b5d111b6dc199ff21b0148712a9942" translate="yes" xml:space="preserve">
          <source>FilterMap::fuse</source>
          <target state="translated">FilterMap::fuse</target>
        </trans-unit>
        <trans-unit id="3382272e7370c0b6147c8c387ffc37b4d4c5e3a6" translate="yes" xml:space="preserve">
          <source>FilterMap::ge</source>
          <target state="translated">FilterMap::ge</target>
        </trans-unit>
        <trans-unit id="4b8238e089d3397b749e1b187d2a724b2617946b" translate="yes" xml:space="preserve">
          <source>FilterMap::gt</source>
          <target state="translated">FilterMap::gt</target>
        </trans-unit>
        <trans-unit id="82617e4f67971bc78b124b6cb5a257d959803b60" translate="yes" xml:space="preserve">
          <source>FilterMap::inspect</source>
          <target state="translated">FilterMap::inspect</target>
        </trans-unit>
        <trans-unit id="aa02bb54120358798026dad5fd5c4d13752028ae" translate="yes" xml:space="preserve">
          <source>FilterMap::into</source>
          <target state="translated">FilterMap::into</target>
        </trans-unit>
        <trans-unit id="d9156abee7291c0e1aff8b8e10dfdf72b8682948" translate="yes" xml:space="preserve">
          <source>FilterMap::into_iter</source>
          <target state="translated">FilterMap::into_iter</target>
        </trans-unit>
        <trans-unit id="b5f609b521b0384ad2700db99a7535f641b735d3" translate="yes" xml:space="preserve">
          <source>FilterMap::is_sorted</source>
          <target state="translated">FilterMap::is_sorted</target>
        </trans-unit>
        <trans-unit id="125f87f00258d3f5268e75a03b685825e6459606" translate="yes" xml:space="preserve">
          <source>FilterMap::is_sorted_by</source>
          <target state="translated">FilterMap::is_sorted_by</target>
        </trans-unit>
        <trans-unit id="db08443b07b0a8ffcf37e18de9535ef98fc6640f" translate="yes" xml:space="preserve">
          <source>FilterMap::is_sorted_by_key</source>
          <target state="translated">FilterMap::is_sorted_by_key</target>
        </trans-unit>
        <trans-unit id="63d4423b8f09aee32267033e6ed51ee3d75dbe39" translate="yes" xml:space="preserve">
          <source>FilterMap::last</source>
          <target state="translated">FilterMap::last</target>
        </trans-unit>
        <trans-unit id="508b943f88718a1ffcbe85638512d90a4a5aeb16" translate="yes" xml:space="preserve">
          <source>FilterMap::le</source>
          <target state="translated">FilterMap::le</target>
        </trans-unit>
        <trans-unit id="f59441da463942dd788b8584520a628dbb0a7821" translate="yes" xml:space="preserve">
          <source>FilterMap::lt</source>
          <target state="translated">FilterMap::lt</target>
        </trans-unit>
        <trans-unit id="b97224e4f5de7796c1b3262a2a8093bdeff53e3d" translate="yes" xml:space="preserve">
          <source>FilterMap::map</source>
          <target state="translated">FilterMap::map</target>
        </trans-unit>
        <trans-unit id="93f0d3347911a786232d9f9e9dd863f797f500e2" translate="yes" xml:space="preserve">
          <source>FilterMap::max</source>
          <target state="translated">FilterMap::max</target>
        </trans-unit>
        <trans-unit id="6ed3c1e75437eb9e78693e8457ba8a6a19a9eeb6" translate="yes" xml:space="preserve">
          <source>FilterMap::max_by</source>
          <target state="translated">FilterMap::max_by</target>
        </trans-unit>
        <trans-unit id="1f115c7e6fcefc2da1a6cb134d4cacec12999553" translate="yes" xml:space="preserve">
          <source>FilterMap::max_by_key</source>
          <target state="translated">FilterMap::max_by_key</target>
        </trans-unit>
        <trans-unit id="5910845dc1ac65e3512f9f11db4bb64d77317203" translate="yes" xml:space="preserve">
          <source>FilterMap::min</source>
          <target state="translated">FilterMap::min</target>
        </trans-unit>
        <trans-unit id="35d98e882270cba4778f1d16fbe51a082da7d77c" translate="yes" xml:space="preserve">
          <source>FilterMap::min_by</source>
          <target state="translated">FilterMap::min_by</target>
        </trans-unit>
        <trans-unit id="bd2fcb562ae558f66536954f665c945857c9ad67" translate="yes" xml:space="preserve">
          <source>FilterMap::min_by_key</source>
          <target state="translated">FilterMap::min_by_key</target>
        </trans-unit>
        <trans-unit id="03f3e5a4e3eee64b9fb373323ea94527e555da6c" translate="yes" xml:space="preserve">
          <source>FilterMap::ne</source>
          <target state="translated">FilterMap::ne</target>
        </trans-unit>
        <trans-unit id="7ba597ec213271e4a028a80dc2193495e8a9579f" translate="yes" xml:space="preserve">
          <source>FilterMap::next</source>
          <target state="translated">FilterMap::next</target>
        </trans-unit>
        <trans-unit id="08c78668993a1e3f69d527bd6cf931f4bbf29e6e" translate="yes" xml:space="preserve">
          <source>FilterMap::next_back</source>
          <target state="translated">FilterMap::next_back</target>
        </trans-unit>
        <trans-unit id="092ec64a808e7c6fae88552498cb84deac692fe6" translate="yes" xml:space="preserve">
          <source>FilterMap::nth</source>
          <target state="translated">FilterMap::nth</target>
        </trans-unit>
        <trans-unit id="8a5b5faea870c471f74dfaeb9ef1c2978daa1b52" translate="yes" xml:space="preserve">
          <source>FilterMap::nth_back</source>
          <target state="translated">FilterMap::nth_back</target>
        </trans-unit>
        <trans-unit id="ad666374da1329cd1c98c13570e3079bb4d9753b" translate="yes" xml:space="preserve">
          <source>FilterMap::partial_cmp</source>
          <target state="translated">FilterMap::partial_cmp</target>
        </trans-unit>
        <trans-unit id="3a1f557504b4f033d74e3a0cd191e1bc44061c10" translate="yes" xml:space="preserve">
          <source>FilterMap::partition</source>
          <target state="translated">FilterMap::partition</target>
        </trans-unit>
        <trans-unit id="464af94ecc2766027bb520d65baac83210a96d68" translate="yes" xml:space="preserve">
          <source>FilterMap::peekable</source>
          <target state="translated">FilterMap::peekable</target>
        </trans-unit>
        <trans-unit id="b6f5926027a29b108c8c4e148fba7961cd883263" translate="yes" xml:space="preserve">
          <source>FilterMap::position</source>
          <target state="translated">FilterMap::position</target>
        </trans-unit>
        <trans-unit id="d4662fb16a6925d0bdf1426861c2a05c92e21e7d" translate="yes" xml:space="preserve">
          <source>FilterMap::product</source>
          <target state="translated">FilterMap::product</target>
        </trans-unit>
        <trans-unit id="2f01e0b767f05f370a85a3bce7f34a15bdc9a56b" translate="yes" xml:space="preserve">
          <source>FilterMap::rev</source>
          <target state="translated">FilterMap::rev</target>
        </trans-unit>
        <trans-unit id="b9fe0d46b42128b7dc2d7f453059d68d1988c06c" translate="yes" xml:space="preserve">
          <source>FilterMap::rfind</source>
          <target state="translated">FilterMap::rfind</target>
        </trans-unit>
        <trans-unit id="bb45767b515f5a13f54d1f8925702c231e459f48" translate="yes" xml:space="preserve">
          <source>FilterMap::rfold</source>
          <target state="translated">FilterMap::rfold</target>
        </trans-unit>
        <trans-unit id="3b53374da06b703dbb129fb0e8ac3835e2b66f53" translate="yes" xml:space="preserve">
          <source>FilterMap::rposition</source>
          <target state="translated">FilterMap::rposition</target>
        </trans-unit>
        <trans-unit id="278a05a25baf85f2add4950e7c66a2320e6b50b2" translate="yes" xml:space="preserve">
          <source>FilterMap::scan</source>
          <target state="translated">FilterMap::scan</target>
        </trans-unit>
        <trans-unit id="167ea8a00b9ef9c7ea919b1e9de5fba54ddc0740" translate="yes" xml:space="preserve">
          <source>FilterMap::size_hint</source>
          <target state="translated">FilterMap::size_hint</target>
        </trans-unit>
        <trans-unit id="9fdc76c5b90747996aecbe0fdb9da980250a87a2" translate="yes" xml:space="preserve">
          <source>FilterMap::skip</source>
          <target state="translated">FilterMap::skip</target>
        </trans-unit>
        <trans-unit id="0f412c7f819fc672e3cd01cabc2fe79a44cf585b" translate="yes" xml:space="preserve">
          <source>FilterMap::skip_while</source>
          <target state="translated">FilterMap::skip_while</target>
        </trans-unit>
        <trans-unit id="87cce8dbbb10863949d947cefa0807292845bbfb" translate="yes" xml:space="preserve">
          <source>FilterMap::step_by</source>
          <target state="translated">FilterMap::step_by</target>
        </trans-unit>
        <trans-unit id="282c5277a534d22485e237e603241e16a5f9e5f9" translate="yes" xml:space="preserve">
          <source>FilterMap::sum</source>
          <target state="translated">FilterMap::sum</target>
        </trans-unit>
        <trans-unit id="99f988100f49cae2541730ccb54030e896cd2571" translate="yes" xml:space="preserve">
          <source>FilterMap::take</source>
          <target state="translated">FilterMap::take</target>
        </trans-unit>
        <trans-unit id="57b392761e70688448cbe9355f4bb904a0511634" translate="yes" xml:space="preserve">
          <source>FilterMap::take_while</source>
          <target state="translated">FilterMap::take_while</target>
        </trans-unit>
        <trans-unit id="876276a289c68259eb1f6162c94a574e37c52d43" translate="yes" xml:space="preserve">
          <source>FilterMap::to_owned</source>
          <target state="translated">FilterMap::to_owned</target>
        </trans-unit>
        <trans-unit id="284869e46c98e507cba7aeae84131afbfc8aa3e8" translate="yes" xml:space="preserve">
          <source>FilterMap::try_fold</source>
          <target state="translated">FilterMap::try_fold</target>
        </trans-unit>
        <trans-unit id="873249a637f8784b6dfb037f99f7a9afa12e2ba3" translate="yes" xml:space="preserve">
          <source>FilterMap::try_for_each</source>
          <target state="translated">FilterMap::try_for_each</target>
        </trans-unit>
        <trans-unit id="b26e84db8c832a00d7f4ec926259648291fad5b1" translate="yes" xml:space="preserve">
          <source>FilterMap::try_from</source>
          <target state="translated">FilterMap::try_from</target>
        </trans-unit>
        <trans-unit id="dc276d5890d13630365d25d01f73a94caac57e69" translate="yes" xml:space="preserve">
          <source>FilterMap::try_into</source>
          <target state="translated">FilterMap::try_into</target>
        </trans-unit>
        <trans-unit id="f9633b81f914f1be9e1f4e12becd6ea257145954" translate="yes" xml:space="preserve">
          <source>FilterMap::try_rfold</source>
          <target state="translated">FilterMap::try_rfold</target>
        </trans-unit>
        <trans-unit id="f9434165936bad747cb6920cd683f2f70ffac33f" translate="yes" xml:space="preserve">
          <source>FilterMap::type_id</source>
          <target state="translated">FilterMap::type_id</target>
        </trans-unit>
        <trans-unit id="f4645fc713c3c09c25deb1f92c2a7b15bf56f9b3" translate="yes" xml:space="preserve">
          <source>FilterMap::unzip</source>
          <target state="translated">FilterMap::unzip</target>
        </trans-unit>
        <trans-unit id="5d51993841e241bdd0f7af97f0689f8877d8cf6a" translate="yes" xml:space="preserve">
          <source>FilterMap::zip</source>
          <target state="translated">FilterMap::zip</target>
        </trans-unit>
        <trans-unit id="37cb4de530573cb240e27ee116ddd7f334d96a4e" translate="yes" xml:space="preserve">
          <source>Filtering to Run Multiple Tests</source>
          <target state="translated">複数のテストを実行するためのフィルタリング</target>
        </trans-unit>
        <trans-unit id="03852e06afb208b880e5478db67fe7284385a208" translate="yes" xml:space="preserve">
          <source>Final Project: Building a Multithreaded Web Server</source>
          <target state="translated">最終プロジェクト。マルチスレッドWebサーバの構築</target>
        </trans-unit>
        <trans-unit id="a0d2c6f63e0ec75dd04cb469fec8f4cddc384550" translate="yes" xml:space="preserve">
          <source>Finally, if ever you're interested in what the actual capacity of the collection is, most collections provide a &lt;code&gt;capacity&lt;/code&gt; method to query this information on demand. This can be useful for debugging purposes, or for use with the &lt;code&gt;reserve&lt;/code&gt; methods.</source>
          <target state="translated">最後に、コレクションの実際の容量に興味がある場合は、ほとんどのコレクションがこの情報をオンデマンドで照会するための &lt;code&gt;capacity&lt;/code&gt; メソッドを提供します。これは、デバッグや、 &lt;code&gt;reserve&lt;/code&gt; メソッドでの使用に役立ちます。</target>
        </trans-unit>
        <trans-unit id="5057e0c4d54ac6561f43dd750beeee0c71ccd643" translate="yes" xml:space="preserve">
          <source>Finally, if you want to &lt;code&gt;dbg!(..)&lt;/code&gt; multiple values, it will treat them as a tuple (and return it, too):</source>
          <target state="translated">最後に、複数の値を &lt;code&gt;dbg!(..)&lt;/code&gt; にしたい場合は、それらをタプルとして扱います（それも返します）。</target>
        </trans-unit>
        <trans-unit id="afdf2f40b9b960b4d92937b2c4eaf5bbc5a5f9a5" translate="yes" xml:space="preserve">
          <source>Finally, if you wish to still be able to access the original type, you can create a new &lt;code&gt;enum&lt;/code&gt; with a variant for each type:</source>
          <target state="translated">最後に、元のタイプに引き続きアクセスできるようにしたい場合は、タイプごとにバリアントを使用して新しい &lt;code&gt;enum&lt;/code&gt; 型を作成できます。</target>
        </trans-unit>
        <trans-unit id="db9f333a75202b2d585bd73ba51b8b4167fbe6ea" translate="yes" xml:space="preserve">
          <source>Finally, it is useful for the reader to keep in mind that according to the definitions of this formalism, no simple NT matches the empty fragment, and likewise no token matches the empty fragment of Rust syntax. (Thus, the &lt;em&gt;only&lt;/em&gt; NT that can match the empty fragment is a complex NT.) This is not actually true, because the &lt;code&gt;vis&lt;/code&gt; matcher can match an empty fragment. Thus, for the purposes of the formalism, we will treat &lt;code&gt;$v:vis&lt;/code&gt; as actually being &lt;code&gt;$($v:vis)?&lt;/code&gt;, with a requirement that the matcher match an empty fragment.</source>
          <target state="translated">最後に、この形式の定義によれば、単純なNTは空のフラグメントと一致せず、同様にトークンはRust構文の空のフラグメントと一致しないことを読者が覚えておくと便利です。 （したがって、空のフラグメントと一致できる&lt;em&gt;唯一の&lt;/em&gt; NTは複雑なNTです。）これは、 &lt;code&gt;vis&lt;/code&gt; matcherが空のフラグメントと一致できるため、実際には当てはまりません。したがって、形式主義の目的で、 &lt;code&gt;$v:vis&lt;/code&gt; を実際には &lt;code&gt;$($v:vis)?&lt;/code&gt; として扱いますか？、マッチャーは空のフラグメントと一致する必要があります。</target>
        </trans-unit>
        <trans-unit id="58c68111d14cda947ed8f36da0ddde0b0eefb4b4" translate="yes" xml:space="preserve">
          <source>Finally, round the size of the struct to the nearest multiple of its &lt;a href=&quot;fn.align_of&quot;&gt;alignment&lt;/a&gt;. The alignment of the struct is usually the largest alignment of all its fields; this can be changed with the use of &lt;code&gt;repr(align(N))&lt;/code&gt;.</source>
          <target state="translated">最後に、構造体のサイズをその&lt;a href=&quot;fn.align_of&quot;&gt;配置の&lt;/a&gt;最も近い倍数に丸めます。構造体の配置は通常、そのすべてのフィールドの最大の配置です。これは &lt;code&gt;repr(align(N))&lt;/code&gt; を使用して変更できます。</target>
        </trans-unit>
        <trans-unit id="5b6451b88d5b36c4db78ede6ff2093f67ddbc787" translate="yes" xml:space="preserve">
          <source>Finally, some appendixes contain useful information about the language in a more reference-like format. Appendix A covers Rust&amp;rsquo;s keywords, Appendix B covers Rust&amp;rsquo;s operators and symbols, Appendix C covers derivable traits provided by the standard library, Appendix D covers some useful development tools, and Appendix E explains Rust editions.</source>
          <target state="translated">最後に、一部の付録には、言語に関する有用な情報がより参照に似た形式で含まれています。付録AはRustのキーワード、付録BはRustの演算子と記号、付録Cは標準ライブラリが提供する派生可能な特性、付録Dはいくつかの便利な開発ツール、付録EはRustのエディションについて説明しています。</target>
        </trans-unit>
        <trans-unit id="685942198bdcba88a6f3ec4528092dcd922fa44c" translate="yes" xml:space="preserve">
          <source>Finally, the &lt;code&gt;break&lt;/code&gt; and &lt;code&gt;continue&lt;/code&gt; keywords cannot be used to branch out from an async block. Therefore the following is illegal:</source>
          <target state="translated">最後に、 &lt;code&gt;break&lt;/code&gt; キーワードと &lt;code&gt;continue&lt;/code&gt; キーワードを使用して、非同期ブロックから分岐することはできません。したがって、以下は違法です。</target>
        </trans-unit>
        <trans-unit id="5d1a919e9ce1e7229991dc6f5ff6a1bc5e62a081" translate="yes" xml:space="preserve">
          <source>Finally, the definition for FOLLOW(M) is built up as follows. pat, expr, etc. represent simple nonterminals with the given fragment specifier.</source>
          <target state="translated">最後に、FOLLOW(M)の定義は以下のように構成されています。</target>
        </trans-unit>
        <trans-unit id="380bab2eff15b19d764ef3dede97b0a3724bf24b" translate="yes" xml:space="preserve">
          <source>Finally, the fields of a struct or a reference to a struct are treated as separate entities when borrowing. If the struct does not implement &lt;a href=&quot;../special-types-and-traits#drop&quot;&gt;&lt;code&gt;Drop&lt;/code&gt;&lt;/a&gt; and is stored in a local variable, this also applies to moving out of each of its fields. This also does not apply if automatic dereferencing is done though user defined types.</source>
          <target state="translated">最後に、構造体のフィールドまたは構造体への参照は、借用時に個別のエンティティとして扱われます。構造体が&lt;a href=&quot;../special-types-and-traits#drop&quot;&gt; &lt;code&gt;Drop&lt;/code&gt; &lt;/a&gt;を実装せず、ローカル変数に格納されている場合、これは各フィールドからの移動にも適用されます。これは、ユーザー定義タイプを介して自動逆参照が行われる場合にも適用されません。</target>
        </trans-unit>
        <trans-unit id="8ea92f7eac703a6790db697e7ddca35702303491" translate="yes" xml:space="preserve">
          <source>Finally, the future is wrapped in a pinned box:</source>
          <target state="translated">最後に、未来はピンで包まれています。</target>
        </trans-unit>
        <trans-unit id="88c1ba38702bf121d72f8d950ee229564f388f8a" translate="yes" xml:space="preserve">
          <source>Finally, the size of the struct is the current offset rounded up to the nearest multiple of the struct's alignment.</source>
          <target state="translated">最後に、構造体のサイズは、構造体のアライメントの最も近い倍数に切り上げられた現在のオフセットです。</target>
        </trans-unit>
        <trans-unit id="548f9672973eaeba55b9a5a51839b947dcf766a5" translate="yes" xml:space="preserve">
          <source>Finally, there are some rustc-specific ABI strings:</source>
          <target state="translated">最後に、rustc特有のABI文字列があります。</target>
        </trans-unit>
        <trans-unit id="89bd21dfa629771ada041a6142c77fa2db99944d" translate="yes" xml:space="preserve">
          <source>Finally, this book is not normative. It may include details that are specific to &lt;code&gt;rustc&lt;/code&gt; itself, and should not be taken as a specification for the Rust language. We intend to produce such a book someday, and until then, the reference is the closest thing we have to one.</source>
          <target state="translated">最後に、この本は規範的ではありません。 &lt;code&gt;rustc&lt;/code&gt; 自体に固有の詳細が含まれている可能性があり、Rust言語の仕様として解釈すべきではありません。私たちはいつかそのような本を作るつもりです、そしてそれまで、リファレンスは私たちが持っている最も近いものです。</target>
        </trans-unit>
        <trans-unit id="663b39c893a31add869d68d1a6799a4bd0c74e8d" translate="yes" xml:space="preserve">
          <source>Finally, we need to check for the environment variable. The functions for working with environment variables are in the &lt;code&gt;env&lt;/code&gt; module in the standard library, so we want to bring that module into scope with a &lt;code&gt;use std::env;&lt;/code&gt; line at the top of &lt;em&gt;src/lib.rs&lt;/em&gt;. Then we&amp;rsquo;ll use the &lt;code&gt;var&lt;/code&gt; function from the &lt;code&gt;env&lt;/code&gt; module to check for an environment variable named &lt;code&gt;CASE_INSENSITIVE&lt;/code&gt;, as shown in Listing 12-23.</source>
          <target state="translated">最後に、環境変数を確認する必要があります。環境変数を操作するための関数は標準ライブラリの &lt;code&gt;env&lt;/code&gt; モジュールにあるので、 &lt;code&gt;use std::env;&lt;/code&gt; してそのモジュールをスコープに入れたいと思います。&lt;em&gt;src / lib.rsの&lt;/em&gt;上部の行。次に、リスト12-23に示すように、 &lt;code&gt;env&lt;/code&gt; モジュールの &lt;code&gt;var&lt;/code&gt; 関数を使用して、 &lt;code&gt;CASE_INSENSITIVE&lt;/code&gt; という名前の環境変数をチェックします。</target>
        </trans-unit>
        <trans-unit id="7b94f451664fd622143f67b7930e9fe770df8ffa" translate="yes" xml:space="preserve">
          <source>Finally, we print the vector using the debug formatter, &lt;code&gt;:?&lt;/code&gt;. Let&amp;rsquo;s try running the code first with no arguments and then with two arguments:</source>
          <target state="translated">最後に、デバッグフォーマッタを使用してベクターを出力し &lt;code&gt;:?&lt;/code&gt; 。最初に引数なしで、次に2つの引数付きでコードを実行してみましょう。</target>
        </trans-unit>
        <trans-unit id="b161bc0b0c419ae3078ec5bae46ff2b23172929b" translate="yes" xml:space="preserve">
          <source>Finally, we&amp;rsquo;ll discuss &lt;em&gt;lifetimes&lt;/em&gt;, a variety of generics that give the compiler information about how references relate to each other. Lifetimes allow us to borrow values in many situations while still enabling the compiler to check that the references are valid.</source>
          <target state="translated">最後に、&lt;em&gt;ライフタイム&lt;/em&gt;について説明します。これは、参照が相互にどのように関連しているかについてコンパイラー情報を提供するさまざまなジェネリックです。ライフタイムにより、コンパイラが参照が有効であることを確認しながら、多くの状況で値を借りることができます。</target>
        </trans-unit>
        <trans-unit id="d7a0dc1697c1346659c0be4f103861518f7b9d81" translate="yes" xml:space="preserve">
          <source>Finally, we&amp;rsquo;ll explore some advanced features related to functions and closures, which include function pointers and returning closures.</source>
          <target state="translated">最後に、関数ポインタと戻りクロージャを含む、関数とクロージャに関連するいくつかの高度な機能を探ります。</target>
        </trans-unit>
        <trans-unit id="171b5cf2cd61ebf1db80d501121ab244d56de9bf" translate="yes" xml:space="preserve">
          <source>Find a thread pool crate on &lt;a href=&quot;https://crates.io/&quot;&gt;crates.io&lt;/a&gt; and implement a similar web server using the crate instead. Then compare its API and robustness to the thread pool we implemented.</source>
          <target state="translated">&lt;a href=&quot;https://crates.io/&quot;&gt;crates.ioで&lt;/a&gt;スレッドプールクレートを見つけ、代わりにクレートを使用して同様のWebサーバーを実装します。次に、そのAPIと堅牢性を、実装したスレッドプールと比較します。</target>
        </trans-unit>
        <trans-unit id="46a827a2f0dc244988c76bf6fe0fe311647c9125" translate="yes" xml:space="preserve">
          <source>Find the maximum value:</source>
          <target state="translated">最大値を求めます。</target>
        </trans-unit>
        <trans-unit id="60191f2292bd928f112e13ade98b13a4839ed4f4" translate="yes" xml:space="preserve">
          <source>Finds the maximum of the current value and the argument &lt;code&gt;val&lt;/code&gt;, and sets the new value to the result.</source>
          <target state="translated">現在の値と引数 &lt;code&gt;val&lt;/code&gt; の最大値を見つけ、新しい値を結果に設定します。</target>
        </trans-unit>
        <trans-unit id="498de5df28b597678df8cbe9a80720213d72aed5" translate="yes" xml:space="preserve">
          <source>Finds the minimum of the current value and the argument &lt;code&gt;val&lt;/code&gt;, and sets the new value to the result.</source>
          <target state="translated">現在の値と引数 &lt;code&gt;val&lt;/code&gt; の最小値を検索し、新しい値を結果に設定します。</target>
        </trans-unit>
        <trans-unit id="e3e69bc01095a6f3fac0836e7beb312d9c2aefe1" translate="yes" xml:space="preserve">
          <source>Finds the next &lt;a href=&quot;enum.searchstep#variant.Match&quot;&gt;&lt;code&gt;Match&lt;/code&gt;&lt;/a&gt; result. See &lt;a href=&quot;trait.reversesearcher#tymethod.next_back&quot;&gt;&lt;code&gt;next_back()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">次の&lt;a href=&quot;enum.searchstep#variant.Match&quot;&gt; &lt;code&gt;Match&lt;/code&gt; &lt;/a&gt;結果を検索します。&lt;a href=&quot;trait.reversesearcher#tymethod.next_back&quot;&gt; &lt;code&gt;next_back()&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="ad0385924037131ded8a259e11b4749e29f93d51" translate="yes" xml:space="preserve">
          <source>Finds the next &lt;a href=&quot;enum.searchstep#variant.Match&quot;&gt;&lt;code&gt;Match&lt;/code&gt;&lt;/a&gt; result. See &lt;a href=&quot;trait.reversesearcher#tymethod.next_back&quot;&gt;&lt;code&gt;next_back()&lt;/code&gt;&lt;/a&gt;. &lt;a href=&quot;trait.reversesearcher#method.next_match_back&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">次の&lt;a href=&quot;enum.searchstep#variant.Match&quot;&gt; &lt;code&gt;Match&lt;/code&gt; &lt;/a&gt;結果を検索します。&lt;a href=&quot;trait.reversesearcher#tymethod.next_back&quot;&gt; &lt;code&gt;next_back()&lt;/code&gt; を&lt;/a&gt;参照してください。&lt;a href=&quot;trait.reversesearcher#method.next_match_back&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3a10a45ca33d7ae22aa5bce3d25e091693c4a83a" translate="yes" xml:space="preserve">
          <source>Finds the next &lt;a href=&quot;enum.searchstep#variant.Match&quot;&gt;&lt;code&gt;Match&lt;/code&gt;&lt;/a&gt; result. See &lt;a href=&quot;trait.searcher#tymethod.next&quot;&gt;&lt;code&gt;next()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">次の&lt;a href=&quot;enum.searchstep#variant.Match&quot;&gt; &lt;code&gt;Match&lt;/code&gt; &lt;/a&gt;結果を検索します。&lt;a href=&quot;trait.searcher#tymethod.next&quot;&gt; &lt;code&gt;next()&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="69156046927a7cd67c7d9e462b0e5fcab34a0d88" translate="yes" xml:space="preserve">
          <source>Finds the next &lt;a href=&quot;enum.searchstep#variant.Match&quot;&gt;&lt;code&gt;Match&lt;/code&gt;&lt;/a&gt; result. See &lt;a href=&quot;trait.searcher#tymethod.next&quot;&gt;&lt;code&gt;next()&lt;/code&gt;&lt;/a&gt;. &lt;a href=&quot;trait.searcher#method.next_match&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">次の&lt;a href=&quot;enum.searchstep#variant.Match&quot;&gt; &lt;code&gt;Match&lt;/code&gt; &lt;/a&gt;結果を検索します。&lt;a href=&quot;trait.searcher#tymethod.next&quot;&gt; &lt;code&gt;next()&lt;/code&gt; を&lt;/a&gt;参照してください。&lt;a href=&quot;trait.searcher#method.next_match&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1adaf75dd08f31b2a6e16fb196782a3e2358d10d" translate="yes" xml:space="preserve">
          <source>Finds the next &lt;a href=&quot;enum.searchstep#variant.Reject&quot;&gt;&lt;code&gt;Reject&lt;/code&gt;&lt;/a&gt; result. See &lt;a href=&quot;trait.reversesearcher#tymethod.next_back&quot;&gt;&lt;code&gt;next_back()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">次の&lt;a href=&quot;enum.searchstep#variant.Reject&quot;&gt; &lt;code&gt;Reject&lt;/code&gt; &lt;/a&gt;結果を検索します。&lt;a href=&quot;trait.reversesearcher#tymethod.next_back&quot;&gt; &lt;code&gt;next_back()&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="a293f6cc0a4dc35516ad7c5ff771448e15ba3002" translate="yes" xml:space="preserve">
          <source>Finds the next &lt;a href=&quot;enum.searchstep#variant.Reject&quot;&gt;&lt;code&gt;Reject&lt;/code&gt;&lt;/a&gt; result. See &lt;a href=&quot;trait.reversesearcher#tymethod.next_back&quot;&gt;&lt;code&gt;next_back()&lt;/code&gt;&lt;/a&gt;. &lt;a href=&quot;trait.reversesearcher#method.next_reject_back&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">次の&lt;a href=&quot;enum.searchstep#variant.Reject&quot;&gt; &lt;code&gt;Reject&lt;/code&gt; &lt;/a&gt;結果を検索します。&lt;a href=&quot;trait.reversesearcher#tymethod.next_back&quot;&gt; &lt;code&gt;next_back()&lt;/code&gt; を&lt;/a&gt;参照してください。&lt;a href=&quot;trait.reversesearcher#method.next_reject_back&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="fcaccecdc2e217c486e841419f3a046ccb423510" translate="yes" xml:space="preserve">
          <source>Finds the next &lt;a href=&quot;enum.searchstep#variant.Reject&quot;&gt;&lt;code&gt;Reject&lt;/code&gt;&lt;/a&gt; result. See &lt;a href=&quot;trait.searcher#tymethod.next&quot;&gt;&lt;code&gt;next()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;trait.searcher#method.next_match&quot;&gt;&lt;code&gt;next_match()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">次の&lt;a href=&quot;enum.searchstep#variant.Reject&quot;&gt; &lt;code&gt;Reject&lt;/code&gt; &lt;/a&gt;結果を検索します。&lt;a href=&quot;trait.searcher#tymethod.next&quot;&gt; &lt;code&gt;next()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;trait.searcher#method.next_match&quot;&gt; &lt;code&gt;next_match()&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="b33f904b27576d8886562d66556bcac59bfa6d4c" translate="yes" xml:space="preserve">
          <source>Finds the next &lt;a href=&quot;enum.searchstep#variant.Reject&quot;&gt;&lt;code&gt;Reject&lt;/code&gt;&lt;/a&gt; result. See &lt;a href=&quot;trait.searcher#tymethod.next&quot;&gt;&lt;code&gt;next()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;trait.searcher#method.next_match&quot;&gt;&lt;code&gt;next_match()&lt;/code&gt;&lt;/a&gt;. &lt;a href=&quot;trait.searcher#method.next_reject&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">次の&lt;a href=&quot;enum.searchstep#variant.Reject&quot;&gt; &lt;code&gt;Reject&lt;/code&gt; &lt;/a&gt;結果を検索します。&lt;a href=&quot;trait.searcher#tymethod.next&quot;&gt; &lt;code&gt;next()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;trait.searcher#method.next_match&quot;&gt; &lt;code&gt;next_match()&lt;/code&gt; を&lt;/a&gt;参照してください。&lt;a href=&quot;trait.searcher#method.next_reject&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="6e15e49aba2d1097c5b0c90f18a8985868ff5345" translate="yes" xml:space="preserve">
          <source>Finds the next &lt;code&gt;Match&lt;/code&gt; result. See &lt;code&gt;next()&lt;/code&gt;</source>
          <target state="translated">次の &lt;code&gt;Match&lt;/code&gt; 結果を検索します。 &lt;code&gt;next()&lt;/code&gt; を参照</target>
        </trans-unit>
        <trans-unit id="f756114721031a50a5d8ac031e3faff85aa6ddf5" translate="yes" xml:space="preserve">
          <source>Finds the next &lt;code&gt;Match&lt;/code&gt; result. See &lt;code&gt;next()&lt;/code&gt;&lt;a href=&quot;trait.searcher#method.next_match&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">次の &lt;code&gt;Match&lt;/code&gt; 結果を検索します。 &lt;code&gt;next()&lt;/code&gt; &lt;a href=&quot;trait.searcher#method.next_match&quot;&gt;を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="f2240ff0cf3b8d663704cb6ee664b2dad69c1451" translate="yes" xml:space="preserve">
          <source>Finds the next &lt;code&gt;Match&lt;/code&gt; result. See &lt;code&gt;next_back()&lt;/code&gt;</source>
          <target state="translated">次の &lt;code&gt;Match&lt;/code&gt; 結果を検索します。 &lt;code&gt;next_back()&lt;/code&gt; を参照してください</target>
        </trans-unit>
        <trans-unit id="b818e5dcb2a1ad45e7017c0a12a4f4decc1c165c" translate="yes" xml:space="preserve">
          <source>Finds the next &lt;code&gt;Reject&lt;/code&gt; result. See &lt;code&gt;next()&lt;/code&gt; and &lt;code&gt;next_match()&lt;/code&gt;</source>
          <target state="translated">次の &lt;code&gt;Reject&lt;/code&gt; 結果を検索します。 &lt;code&gt;next()&lt;/code&gt; および &lt;code&gt;next_match()&lt;/code&gt; を参照してください</target>
        </trans-unit>
        <trans-unit id="b8a778d42413c82824cbf998f891d30368b19e92" translate="yes" xml:space="preserve">
          <source>Finds the next &lt;code&gt;Reject&lt;/code&gt; result. See &lt;code&gt;next()&lt;/code&gt; and &lt;code&gt;next_match()&lt;/code&gt;&lt;a href=&quot;trait.searcher#method.next_reject&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">次の &lt;code&gt;Reject&lt;/code&gt; 結果を検索します。 &lt;code&gt;next()&lt;/code&gt; および &lt;code&gt;next_match()&lt;/code&gt; &lt;a href=&quot;trait.searcher#method.next_reject&quot;&gt;を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="d4ca03f0531ac97b63f1238433b5fa19d39bf3db" translate="yes" xml:space="preserve">
          <source>Finds the next &lt;code&gt;Reject&lt;/code&gt; result. See &lt;code&gt;next_back()&lt;/code&gt;</source>
          <target state="translated">次の &lt;code&gt;Reject&lt;/code&gt; 結果を検索します。 &lt;code&gt;next_back()&lt;/code&gt; を参照してください</target>
        </trans-unit>
        <trans-unit id="71299e80a415886028dd476494a1f27b4e8c0c3d" translate="yes" xml:space="preserve">
          <source>Finishes output and returns any error encountered.</source>
          <target state="translated">出力を終了し、エラーが発生した場合はそれを返します。</target>
        </trans-unit>
        <trans-unit id="2aa5b8ef6d4b44127ec3baa7d85c821bd5d9e7fb" translate="yes" xml:space="preserve">
          <source>First of all, The Rust Standard Library is divided into a number of focused modules, &lt;a href=&quot;#modules&quot;&gt;all listed further down this page&lt;/a&gt;. These modules are the bedrock upon which all of Rust is forged, and they have mighty names like &lt;a href=&quot;slice/index&quot;&gt;&lt;code&gt;std::slice&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;cmp/index&quot;&gt;&lt;code&gt;std::cmp&lt;/code&gt;&lt;/a&gt;. Modules' documentation typically includes an overview of the module along with examples, and are a smart place to start familiarizing yourself with the library.</source>
          <target state="translated">まず、Rust標準ライブラリはいくつかの重点モジュールに分割されており、&lt;a href=&quot;#modules&quot;&gt;すべてこのページの下にリストされています&lt;/a&gt;。これらのモジュールは、Rustがすべて偽造される基盤であり、&lt;a href=&quot;slice/index&quot;&gt; &lt;code&gt;std::slice&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;cmp/index&quot;&gt; &lt;code&gt;std::cmp&lt;/code&gt; &lt;/a&gt;などの強力な名前が付けられています。モジュールのドキュメントには通常、モジュールの概要と例が含まれており、ライブラリに慣れるのに最適な場所です。</target>
        </trans-unit>
        <trans-unit id="fc7b5a52488afcf282a02fd4d0b848ba0846b2b9" translate="yes" xml:space="preserve">
          <source>First, &lt;code&gt;s2&lt;/code&gt; has an &lt;code&gt;&amp;amp;&lt;/code&gt;, meaning that we&amp;rsquo;re adding a &lt;em&gt;reference&lt;/em&gt; of the second string to the first string because of the &lt;code&gt;s&lt;/code&gt; parameter in the &lt;code&gt;add&lt;/code&gt; function: we can only add a &lt;code&gt;&amp;amp;str&lt;/code&gt; to a &lt;code&gt;String&lt;/code&gt;; we can&amp;rsquo;t add two &lt;code&gt;String&lt;/code&gt; values together. But wait&amp;mdash;the type of &lt;code&gt;&amp;amp;s2&lt;/code&gt; is &lt;code&gt;&amp;amp;String&lt;/code&gt;, not &lt;code&gt;&amp;amp;str&lt;/code&gt;, as specified in the second parameter to &lt;code&gt;add&lt;/code&gt;. So why does Listing 8-18 compile?</source>
          <target state="translated">まず、 &lt;code&gt;s2&lt;/code&gt; が持っている &lt;code&gt;&amp;amp;&lt;/code&gt; 私たちが追加していることを意味し、&lt;em&gt;リファレンス&lt;/em&gt;ための最初の文字列に2番目の文字列のを &lt;code&gt;s&lt;/code&gt; 中のパラメータ &lt;code&gt;add&lt;/code&gt; 機能：我々だけ追加することができます &lt;code&gt;&amp;amp;str&lt;/code&gt; する &lt;code&gt;String&lt;/code&gt; 。 2つの &lt;code&gt;String&lt;/code&gt; 値を一緒に追加することはできません。しかし、の待機型 &lt;code&gt;&amp;amp;s2&lt;/code&gt; がある &lt;code&gt;&amp;amp;String&lt;/code&gt; ではない、 &lt;code&gt;&amp;amp;str&lt;/code&gt; のための2番目のパラメータで指定されているように、 &lt;code&gt;add&lt;/code&gt; 。では、なぜリスト8-18はコンパイルされるのでしょうか。</target>
        </trans-unit>
        <trans-unit id="2149e186bda6874699886cb87496264d05159bfb" translate="yes" xml:space="preserve">
          <source>First, Listing 5-6 shows how we create a new &lt;code&gt;User&lt;/code&gt; instance in &lt;code&gt;user2&lt;/code&gt; without the update syntax. We set new values for &lt;code&gt;email&lt;/code&gt; and &lt;code&gt;username&lt;/code&gt; but otherwise use the same values from &lt;code&gt;user1&lt;/code&gt; that we created in Listing 5-2.</source>
          <target state="translated">まず、リスト5-6は、更新構文なしで &lt;code&gt;user2&lt;/code&gt; に新しい &lt;code&gt;User&lt;/code&gt; インスタンスを作成する方法を示しています。 &lt;code&gt;email&lt;/code&gt; と &lt;code&gt;username&lt;/code&gt; に新しい値を設定しますが、それ以外の場合は、リスト5-2で作成した &lt;code&gt;user1&lt;/code&gt; からの同じ値を使用します。</target>
        </trans-unit>
        <trans-unit id="2b41d69eb26a6b40f4aae2f050715fea536b1f0a" translate="yes" xml:space="preserve">
          <source>First, Rust style is to indent with four spaces, not a tab.</source>
          <target state="translated">まず、Rustスタイルは、タブではなくスペース4つでインデントすることです。</target>
        </trans-unit>
        <trans-unit id="3040dcb3a93d5116af8b98dddf1679cc848e8028" translate="yes" xml:space="preserve">
          <source>First, a set of parentheses encompasses the whole pattern. A dollar sign (&lt;code&gt;$&lt;/code&gt;) is next, followed by a set of parentheses that captures values that match the pattern within the parentheses for use in the replacement code. Within &lt;code&gt;$()&lt;/code&gt; is &lt;code&gt;$x:expr&lt;/code&gt;, which matches any Rust expression and gives the expression the name &lt;code&gt;$x&lt;/code&gt;.</source>
          <target state="translated">まず、括弧のセットはパターン全体を囲みます。次にドル記号（ &lt;code&gt;$&lt;/code&gt; ）が続き、かっこ内のパターンに一致する値をキャプチャするかっこのセットが続き、置換コードで使用できます。 &lt;code&gt;$()&lt;/code&gt; 内には &lt;code&gt;$x:expr&lt;/code&gt; 、これは任意のRust式に一致し、式に &lt;code&gt;$x&lt;/code&gt; という名前を付けます。</target>
        </trans-unit>
        <trans-unit id="36f043a38969ebd0c1100d1946c0070f78f5083d" translate="yes" xml:space="preserve">
          <source>First, in Listing 16-6, we&amp;rsquo;ll create a channel but not do anything with it. Note that this won&amp;rsquo;t compile yet because Rust can&amp;rsquo;t tell what type of values we want to send over the channel.</source>
          <target state="translated">まず、リスト16-6では、チャネルを作成しますが、チャネルに対しては何も行いません。Rustがチャネルを介して送信する値のタイプを判別できないため、これはまだコンパイルされないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="a904d8b464a341807b2afce181cf10f340831790" translate="yes" xml:space="preserve">
          <source>First, let&amp;rsquo;s explore how our code might look if it did create a new thread for every connection. As mentioned earlier, this isn&amp;rsquo;t our final plan due to the problems with potentially spawning an unlimited number of threads, but it is a starting point. Listing 20-11 shows the changes to make to &lt;code&gt;main&lt;/code&gt; to spawn a new thread to handle each stream within the &lt;code&gt;for&lt;/code&gt; loop.</source>
          <target state="translated">最初に、すべての接続に対して新しいスレッドが作成された場合のコードの外観を見てみましょう。前述したように、無制限の数のスレッドを生成する可能性があるという問題があるため、これは最終的な計画ではありませんが、これは出発点です。リスト20-11は、 &lt;code&gt;for&lt;/code&gt; ループ内の各ストリームを処理するために新しいスレッドを生成するために &lt;code&gt;main&lt;/code&gt; に加える変更を示しています。</target>
        </trans-unit>
        <trans-unit id="e2d8fc1aab0782183ce43b898abd828e1a971de0" translate="yes" xml:space="preserve">
          <source>First, let&amp;rsquo;s observe how the content printed by &lt;code&gt;minigrep&lt;/code&gt; is currently being written to standard output, including any error messages we want to write to standard error instead. We&amp;rsquo;ll do that by redirecting the standard output stream to a file while also intentionally causing an error. We won&amp;rsquo;t redirect the standard error stream, so any content sent to standard error will continue to display on the screen.</source>
          <target state="translated">最初に、 &lt;code&gt;minigrep&lt;/code&gt; によって印刷されたコンテンツが標準出力に現在どのように書き込まれているかを観察します。代わりに、標準エラーに書き込みたいエラーメッセージがあります。これを行うには、意図的にエラーを発生させながら、標準出力ストリームをファイルにリダイレクトします。標準エラーストリームはリダイレクトされないため、標準エラーに送信されたコンテンツは引き続き画面に表示されます。</target>
        </trans-unit>
        <trans-unit id="299d434ba9482e48711594e406595923ccc6a45d" translate="yes" xml:space="preserve">
          <source>First, let&amp;rsquo;s take a look at the ownership rules. Keep these rules in mind as we work through the examples that illustrate them:</source>
          <target state="translated">まず、所有権のルールを見てみましょう。これらのルールを説明する例を検討するときは、これらのルールに留意してください。</target>
        </trans-unit>
        <trans-unit id="1e6993f10ab80d08ed459d70a6e9b72bea9f1bb6" translate="yes" xml:space="preserve">
          <source>First, notice that all the tuple code in the variable declaration and the function return value is gone. Second, note that we pass &lt;code&gt;&amp;amp;s1&lt;/code&gt; into &lt;code&gt;calculate_length&lt;/code&gt; and, in its definition, we take &lt;code&gt;&amp;amp;String&lt;/code&gt; rather than &lt;code&gt;String&lt;/code&gt;.</source>
          <target state="translated">まず、変数宣言のすべてのタプルコードと関数の戻り値がなくなっていることに注意してください。第二に、我々が通過することをノート &lt;code&gt;&amp;amp;s1&lt;/code&gt; に &lt;code&gt;calculate_length&lt;/code&gt; と、その定義では、我々が取る &lt;code&gt;&amp;amp;String&lt;/code&gt; ではなく &lt;code&gt;String&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="60e88a2c11a7190bdc4e6ea4f275db2a41748c26" translate="yes" xml:space="preserve">
          <source>First, our &lt;code&gt;main&lt;/code&gt; function now performs two tasks: it parses arguments and reads files. For such a small function, this isn&amp;rsquo;t a major problem. However, if we continue to grow our program inside &lt;code&gt;main&lt;/code&gt;, the number of separate tasks the &lt;code&gt;main&lt;/code&gt; function handles will increase. As a function gains responsibilities, it becomes more difficult to reason about, harder to test, and harder to change without breaking one of its parts. It&amp;rsquo;s best to separate functionality so each function is responsible for one task.</source>
          <target state="translated">まず、 &lt;code&gt;main&lt;/code&gt; 関数は2つのタスクを実行します。引数を解析し、ファイルを読み取ります。このような小さな関数の場合、これは大きな問題ではありません。ただし、プログラムを &lt;code&gt;main&lt;/code&gt; 内で成長させ続けると、 &lt;code&gt;main&lt;/code&gt; 関数が処理する個別のタスクの数が増加します。関数が責任を持つようになると、その部分の1つを壊すことなく、推論が難しくなり、テストが難しくなり、変更が難しくなります。各機能が1つのタスクを担当するように、機能を分離することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="2531f22fd6a5bf69e9d2107ddeefb2d48bde3d1b" translate="yes" xml:space="preserve">
          <source>First, we add a &lt;code&gt;use&lt;/code&gt; line: &lt;code&gt;use rand::Rng&lt;/code&gt;. The &lt;code&gt;Rng&lt;/code&gt; trait defines methods that random number generators implement, and this trait must be in scope for us to use those methods. Chapter 10 will cover traits in detail.</source>
          <target state="translated">まず、 &lt;code&gt;use&lt;/code&gt; 行を追加します： &lt;code&gt;use rand::Rng&lt;/code&gt; 。 &lt;code&gt;Rng&lt;/code&gt; トレイトを定義する方法は、乱数発生器は実装していること、そして私たちはこれらのメソッドを使用するため、この特性は、スコープ内になければなりません。第10章では、特性について詳しく説明します。</target>
        </trans-unit>
        <trans-unit id="5620d966096cc525a97c7b483a8ab91d3a93c5d6" translate="yes" xml:space="preserve">
          <source>First, we add another &lt;code&gt;use&lt;/code&gt; statement to bring in a relevant part of the standard library: we need &lt;code&gt;std::fs&lt;/code&gt; to handle files.</source>
          <target state="translated">最初に、標準ライブラリの関連部分を取り込む別の &lt;code&gt;use&lt;/code&gt; ステートメントを追加します。ファイルを処理するには &lt;code&gt;std::fs&lt;/code&gt; が必要です。</target>
        </trans-unit>
        <trans-unit id="bc25543e6bea82949a22fa47ac93b7c3b107613c" translate="yes" xml:space="preserve">
          <source>First, we bring the &lt;code&gt;std::env&lt;/code&gt; module into scope with a &lt;code&gt;use&lt;/code&gt; statement so we can use its &lt;code&gt;args&lt;/code&gt; function. Notice that the &lt;code&gt;std::env::args&lt;/code&gt; function is nested in two levels of modules. As we discussed in &lt;a href=&quot;ch07-04-bringing-paths-into-scope-with-the-use-keyword#creating-idiomatic-use-paths&quot;&gt;Chapter 7&lt;/a&gt;, in cases where the desired function is nested in more than one module, it&amp;rsquo;s conventional to bring the parent module into scope rather than the function. By doing so, we can easily use other functions from &lt;code&gt;std::env&lt;/code&gt;. It&amp;rsquo;s also less ambiguous than adding &lt;code&gt;use std::env::args&lt;/code&gt; and then calling the function with just &lt;code&gt;args&lt;/code&gt;, because &lt;code&gt;args&lt;/code&gt; might easily be mistaken for a function that&amp;rsquo;s defined in the current module.</source>
          <target state="translated">まず、 &lt;code&gt;std::env&lt;/code&gt; モジュールを &lt;code&gt;use&lt;/code&gt; ステートメントでスコープに入れ、 &lt;code&gt;args&lt;/code&gt; 関数を使用できるようにします。 &lt;code&gt;std::env::args&lt;/code&gt; 関数が2つのレベルのモジュールにネストされていることに注意してください。&lt;a href=&quot;ch07-04-bringing-paths-into-scope-with-the-use-keyword#creating-idiomatic-use-paths&quot;&gt;第7章で&lt;/a&gt;説明したように、目的の関数が複数のモジュールにネストされている場合、通常は、関数ではなく親モジュールをスコープに含めます。そうすることで、 &lt;code&gt;std::env&lt;/code&gt; から他の関数​​を簡単に使用できます。それも追加未満曖昧だ &lt;code&gt;use std::env::args&lt;/code&gt; 当時とだけで関数を呼び出す &lt;code&gt;args&lt;/code&gt; ので、 &lt;code&gt;args&lt;/code&gt; 現在のモジュールで定義されている関数と簡単に混同される可能性があります。</target>
        </trans-unit>
        <trans-unit id="77c43259a6ef4fde9dcd2d5039e611a741bb307a" translate="yes" xml:space="preserve">
          <source>First, we call &lt;code&gt;into_iter()&lt;/code&gt; on the value. Then, we match on the iterator that returns, calling &lt;a href=&quot;trait.iterator#tymethod.next&quot;&gt;&lt;code&gt;next&lt;/code&gt;&lt;/a&gt; over and over until we see a &lt;code&gt;None&lt;/code&gt;. At that point, we &lt;code&gt;break&lt;/code&gt; out of the loop, and we're done iterating.</source>
          <target state="translated">まず、値に対して &lt;code&gt;into_iter()&lt;/code&gt; を呼び出します。その後、我々は呼び出し、反復子そのリターンに一致する&lt;a href=&quot;trait.iterator#tymethod.next&quot;&gt; &lt;code&gt;next&lt;/code&gt; &lt;/a&gt;私たちが見なくなるまで何度も &lt;code&gt;None&lt;/code&gt; 。その時点で、我々は &lt;code&gt;break&lt;/code&gt; ループのうち、私たちは反復を行っています。</target>
        </trans-unit>
        <trans-unit id="6ab5c3115b5c520a97acc958c118c302f43db0ef" translate="yes" xml:space="preserve">
          <source>First, we create a new trait named &lt;code&gt;FnBox&lt;/code&gt;. This trait has the one method &lt;code&gt;call_box&lt;/code&gt;, which is similar to the &lt;code&gt;call&lt;/code&gt; methods on the other &lt;code&gt;Fn*&lt;/code&gt; traits except that it takes &lt;code&gt;self: Box&amp;lt;Self&amp;gt;&lt;/code&gt; to take ownership of &lt;code&gt;self&lt;/code&gt; and move the value out of the &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">まず、 &lt;code&gt;FnBox&lt;/code&gt; という名前の新しいトレイトを作成します。この特性は、1つのメソッドがある &lt;code&gt;call_box&lt;/code&gt; に似て、 &lt;code&gt;call&lt;/code&gt; その他の方法 &lt;code&gt;Fn*&lt;/code&gt; がかかっていることを除いて特色 &lt;code&gt;self: Box&amp;lt;Self&amp;gt;&lt;/code&gt; の所有権取るために &lt;code&gt;self&lt;/code&gt; の外に値を移動する &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1ff037ac0d1711710cacef25650f7925ee9931dc" translate="yes" xml:space="preserve">
          <source>First, we define a struct named &lt;code&gt;Guess&lt;/code&gt; that has a field named &lt;code&gt;value&lt;/code&gt; that holds an &lt;code&gt;i32&lt;/code&gt;. This is where the number will be stored.</source>
          <target state="translated">まず、 &lt;code&gt;i32&lt;/code&gt; を保持する &lt;code&gt;value&lt;/code&gt; という名前のフィールドを持つ &lt;code&gt;Guess&lt;/code&gt; という名前の構造体を定義します。これは、番号が格納される場所です。</target>
        </trans-unit>
        <trans-unit id="7d453ea285cf874f5e20bf0a44d8de3966ff594c" translate="yes" xml:space="preserve">
          <source>First, we had to change &lt;code&gt;s&lt;/code&gt; to be &lt;code&gt;mut&lt;/code&gt;. Then we had to create a mutable reference with &lt;code&gt;&amp;amp;mut s&lt;/code&gt; and accept a mutable reference with &lt;code&gt;some_string: &amp;amp;mut String&lt;/code&gt;.</source>
          <target state="translated">まず、 &lt;code&gt;s&lt;/code&gt; を &lt;code&gt;mut&lt;/code&gt; に変更する必要がありました。次に、 &lt;code&gt;&amp;amp;mut s&lt;/code&gt; を使用して可変参照を作成し、 &lt;code&gt;some_string: &amp;amp;mut String&lt;/code&gt; を使用して可変参照を受け入れる必要がありました。</target>
        </trans-unit>
        <trans-unit id="e1a3297145da0b9ddf78f8d191794fb1446a4150" translate="yes" xml:space="preserve">
          <source>First, we hardcode the data corresponding to the &lt;em&gt;/&lt;/em&gt; request into the &lt;code&gt;get&lt;/code&gt; variable. Because we&amp;rsquo;re reading raw bytes into the buffer, we transform &lt;code&gt;get&lt;/code&gt; into a byte string by adding the &lt;code&gt;b&quot;&quot;&lt;/code&gt; byte string syntax at the start of the content data. Then we check whether &lt;code&gt;buffer&lt;/code&gt; starts with the bytes in &lt;code&gt;get&lt;/code&gt;. If it does, it means we&amp;rsquo;ve received a well-formed request to &lt;em&gt;/&lt;/em&gt;, which is the success case we&amp;rsquo;ll handle in the &lt;code&gt;if&lt;/code&gt; block that returns the contents of our HTML file.</source>
          <target state="translated">まず、&lt;em&gt;/&lt;/em&gt;リクエストに対応するデータを &lt;code&gt;get&lt;/code&gt; 変数にハードコードします。生のバイトをバッファに読み込んでいるため、コンテンツデータの先頭に &lt;code&gt;b&quot;&quot;&lt;/code&gt; バイト文字列構文を追加することにより、 &lt;code&gt;get&lt;/code&gt; をバイト文字列に変換します。次に、 &lt;code&gt;buffer&lt;/code&gt; が &lt;code&gt;get&lt;/code&gt; のバイトで始まるかどうかを確認します。そうであれば、&lt;em&gt;/&lt;/em&gt;への整形式のリクエストを受け取ったことを意味します。これは、HTMLファイルのコンテンツを返す &lt;code&gt;if&lt;/code&gt; ブロックで処理する成功例です。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="67c337bec6fe5e9baa6919a72ca1dc381f0c72e6" translate="yes" xml:space="preserve">
          <source>First, we loop through each of the thread pool &lt;code&gt;workers&lt;/code&gt;. We use &lt;code&gt;&amp;amp;mut&lt;/code&gt; for this because &lt;code&gt;self&lt;/code&gt; is a mutable reference, and we also need to be able to mutate &lt;code&gt;worker&lt;/code&gt;. For each worker, we print a message saying that this particular worker is shutting down, and then we call &lt;code&gt;join&lt;/code&gt; on that worker&amp;rsquo;s thread. If the call to &lt;code&gt;join&lt;/code&gt; fails, we use &lt;code&gt;unwrap&lt;/code&gt; to make Rust panic and go into an ungraceful shutdown.</source>
          <target state="translated">まず、各スレッドプール &lt;code&gt;workers&lt;/code&gt; をループ処理します。 &lt;code&gt;&amp;amp;mut&lt;/code&gt; を使用するのは、 &lt;code&gt;self&lt;/code&gt; が変更可能な参照であるためです。また、 &lt;code&gt;worker&lt;/code&gt; を変更できる必要もあります。各ワーカーについて、この特定のワーカーがシャットダウンしているというメッセージを出力し、そのワーカーのスレッドで &lt;code&gt;join&lt;/code&gt; を呼び出します。 &lt;code&gt;join&lt;/code&gt; の呼び出しが失敗した場合は、 &lt;code&gt;unwrap&lt;/code&gt; を使用してRustをパニックにして異常なシャットダウンを開始します。</target>
        </trans-unit>
        <trans-unit id="4c15dd08c54ccaef878863fcce7531d8669281a2" translate="yes" xml:space="preserve">
          <source>First, we lowercase the &lt;code&gt;query&lt;/code&gt; string and store it in a shadowed variable with the same name. Calling &lt;code&gt;to_lowercase&lt;/code&gt; on the query is necessary so no matter whether the user&amp;rsquo;s query is &lt;code&gt;&quot;rust&quot;&lt;/code&gt;, &lt;code&gt;&quot;RUST&quot;&lt;/code&gt;, &lt;code&gt;&quot;Rust&quot;&lt;/code&gt;, or &lt;code&gt;&quot;rUsT&quot;&lt;/code&gt;, we&amp;rsquo;ll treat the query as if it were &lt;code&gt;&quot;rust&quot;&lt;/code&gt; and be insensitive to the case.</source>
          <target state="translated">最初に、 &lt;code&gt;query&lt;/code&gt; 文字列を小文字にして、同じ名前の影付き変数に格納します。呼び出し &lt;code&gt;to_lowercase&lt;/code&gt; ユーザーのクエリがあるかどうかに関係なくので、必要なクエリ上の &lt;code&gt;&quot;rust&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;RUST&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;Rust&quot;&lt;/code&gt; 、または &lt;code&gt;&quot;rUsT&quot;&lt;/code&gt; 、我々はそれがであるかのようにクエリをおごるよ &lt;code&gt;&quot;rust&quot;&lt;/code&gt; との影響を受けないこと場合。</target>
        </trans-unit>
        <trans-unit id="65f94c7193ac8d89c46d0cf4b30dc2e56b5807e0" translate="yes" xml:space="preserve">
          <source>First, we lowercase the &lt;code&gt;query&lt;/code&gt; string and store it in a shadowed variable with the same name. Calling &lt;code&gt;to_lowercase&lt;/code&gt; on the query is necessary so no matter whether the user&amp;rsquo;s query is &lt;code&gt;&quot;rust&quot;&lt;/code&gt;, &lt;code&gt;&quot;RUST&quot;&lt;/code&gt;, &lt;code&gt;&quot;Rust&quot;&lt;/code&gt;, or &lt;code&gt;&quot;rUsT&quot;&lt;/code&gt;, we&amp;rsquo;ll treat the query as if it were &lt;code&gt;&quot;rust&quot;&lt;/code&gt; and be insensitive to the case. While &lt;code&gt;to_lowercase&lt;/code&gt; will handle basic Unicode, it won't be 100% accurate. If we were writing a real application, we'd want to do a bit more work here, but this section is about environment variables, not Unicode, so we'll leave it at that here.</source>
          <target state="translated">まず、 &lt;code&gt;query&lt;/code&gt; 文字列を小文字にして、同じ名前のシャドウ変数に格納します。クエリで &lt;code&gt;to_lowercase&lt;/code&gt; を呼び出す必要があるため、ユーザーのクエリが &lt;code&gt;&quot;rust&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;RUST&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;Rust&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;rUsT&quot;&lt;/code&gt; であっても、クエリは &lt;code&gt;&quot;rust&quot;&lt;/code&gt; であるかのように扱われ、場合。一方で &lt;code&gt;to_lowercase&lt;/code&gt; は、基本的なUnicodeを処理する、それが100％正確ではありません。実際のアプリケーションを作成している場合は、ここでもう少し作業を行いたいと思いますが、このセクションはUnicodeではなく環境変数に関するものなので、ここではそのままにしておきます。</target>
        </trans-unit>
        <trans-unit id="23da79e53710cbb9d9524e2acf5446ad6eea5d1a" translate="yes" xml:space="preserve">
          <source>First, we&amp;rsquo;ll review how to extract a function to reduce code duplication. Next, we&amp;rsquo;ll use the same technique to make a generic function from two functions that differ only in the types of their parameters. We&amp;rsquo;ll also explain how to use generic types in struct and enum definitions.</source>
          <target state="translated">最初に、コードの重複を減らすために関数を抽出する方法を確認します。次に、同じ手法を使用して、パラメーターのタイプのみが異なる2つの関数からジェネリック関数を作成します。また、構造体および列挙型の定義でジェネリック型を使用する方法についても説明します。</target>
        </trans-unit>
        <trans-unit id="ab7b98b1216839b90c2ba36a3e1d94b2940e258c" translate="yes" xml:space="preserve">
          <source>First, we&amp;rsquo;ll use a method named &lt;code&gt;level&lt;/code&gt; whose only parameter is a reference to &lt;code&gt;self&lt;/code&gt; and whose return value is an &lt;code&gt;i32&lt;/code&gt;, which is not a reference to anything:</source>
          <target state="translated">最初に、唯一のパラメーターが &lt;code&gt;self&lt;/code&gt; への参照であり、戻り値が &lt;code&gt;i32&lt;/code&gt; であり、何への参照でもない &lt;code&gt;level&lt;/code&gt; という名前のメソッドを使用します。</target>
        </trans-unit>
        <trans-unit id="ebc1b5224daaa43800af474dfe2a67270d2c64a8" translate="yes" xml:space="preserve">
          <source>First, you aren&amp;rsquo;t allowed to use &lt;code&gt;mut&lt;/code&gt; with constants. Constants aren&amp;rsquo;t just immutable by default&amp;mdash;they&amp;rsquo;re always immutable.</source>
          <target state="translated">まず、定数で &lt;code&gt;mut&lt;/code&gt; を使用することはできません。定数はデフォルトでは不変ではなく、常に不変です。</target>
        </trans-unit>
        <trans-unit id="a37b907fb3b08482758f4b94eb7905467643c0cc" translate="yes" xml:space="preserve">
          <source>First: what are thin and fat pointers?</source>
          <target state="translated">はじめに:細くて太っているポインターとは?</target>
        </trans-unit>
        <trans-unit id="8f4320a9bbe54780e4b1be068359ce0c3e42263e" translate="yes" xml:space="preserve">
          <source>Fix Your Code with &lt;code id=&quot;fix-your-code-with-rustfix&quot;&gt;rustfix&lt;/code&gt;</source>
          <target state="translated">&lt;code id=&quot;fix-your-code-with-rustfix&quot;&gt;rustfix&lt;/code&gt; を使用してコードを修正する</target>
        </trans-unit>
        <trans-unit id="456cf8a255eb59ebf894cb52911a86af4e0bff54" translate="yes" xml:space="preserve">
          <source>Fixed example:</source>
          <target state="translated">固定例。</target>
        </trans-unit>
        <trans-unit id="46b15ff97ce4188ff129110dc0f200273d75d6f6" translate="yes" xml:space="preserve">
          <source>FixedSizeArray</source>
          <target state="translated">FixedSizeArray</target>
        </trans-unit>
        <trans-unit id="10febdb2af33240d31157815d06600628d271c1b" translate="yes" xml:space="preserve">
          <source>FixedSizeArray::as_mut_slice</source>
          <target state="translated">FixedSizeArray::as_mut_slice</target>
        </trans-unit>
        <trans-unit id="f3cdc8722aecf5254db9dc4b899708cf59624ff8" translate="yes" xml:space="preserve">
          <source>FixedSizeArray::as_slice</source>
          <target state="translated">FixedSizeArray::as_slice</target>
        </trans-unit>
        <trans-unit id="74d70129228428cb4a00fa07c90df5cecbd391db" translate="yes" xml:space="preserve">
          <source>Fixing the &lt;code id=&quot;fixing-the-largest-function-with-trait-bounds&quot;&gt;largest&lt;/code&gt; Function with Trait Bounds</source>
          <target state="translated">特性の境界で &lt;code id=&quot;fixing-the-largest-function-with-trait-bounds&quot;&gt;largest&lt;/code&gt; 関数を修正する</target>
        </trans-unit>
        <trans-unit id="bbed51341da047b6a94c2210a2cc73a851e30623" translate="yes" xml:space="preserve">
          <source>Fixing the Error Handling</source>
          <target state="translated">エラー処理の修正</target>
        </trans-unit>
        <trans-unit id="027245ccd994e4fdf64ec804047d0b807eb6ca26" translate="yes" xml:space="preserve">
          <source>Flag indicating what form of alignment was requested.</source>
          <target state="translated">どのような形式のアライメントが要求されたかを示すフラグ。</target>
        </trans-unit>
        <trans-unit id="da6ec40326ab64f852f9b68303a74a8d34fcffbf" translate="yes" xml:space="preserve">
          <source>Flags for formatting</source>
          <target state="translated">書式化のためのフラグ</target>
        </trans-unit>
        <trans-unit id="c5bda5b47fc05cd947485d9dcbc97c118c87af17" translate="yes" xml:space="preserve">
          <source>FlatMap</source>
          <target state="translated">FlatMap</target>
        </trans-unit>
        <trans-unit id="55f7ffcafa8a176774484e54fc484f1dca47b72e" translate="yes" xml:space="preserve">
          <source>FlatMap::all</source>
          <target state="translated">FlatMap::all</target>
        </trans-unit>
        <trans-unit id="831495e089cc3e2bd763a99a1e31c54c37f852a0" translate="yes" xml:space="preserve">
          <source>FlatMap::any</source>
          <target state="translated">FlatMap::any</target>
        </trans-unit>
        <trans-unit id="f416c20467c8d199e5325633d964ae6b0bdccc36" translate="yes" xml:space="preserve">
          <source>FlatMap::borrow</source>
          <target state="translated">FlatMap::borrow</target>
        </trans-unit>
        <trans-unit id="0f50fa0b8ab26f20cea1f5fb6f3730a5604c35d1" translate="yes" xml:space="preserve">
          <source>FlatMap::borrow_mut</source>
          <target state="translated">FlatMap::borrow_mut</target>
        </trans-unit>
        <trans-unit id="89c9cad149062b6897a19684327c3ae5982ebace" translate="yes" xml:space="preserve">
          <source>FlatMap::by_ref</source>
          <target state="translated">FlatMap::by_ref</target>
        </trans-unit>
        <trans-unit id="c6f0a1b16fccff09f7335c088d321c69b06ca959" translate="yes" xml:space="preserve">
          <source>FlatMap::chain</source>
          <target state="translated">FlatMap::chain</target>
        </trans-unit>
        <trans-unit id="2d45e75c6f6700f82e192c77480ec8d8d907e11e" translate="yes" xml:space="preserve">
          <source>FlatMap::clone</source>
          <target state="translated">FlatMap::clone</target>
        </trans-unit>
        <trans-unit id="e5214baf27582eace148fdb9cb8f95195ba3bf8c" translate="yes" xml:space="preserve">
          <source>FlatMap::clone_from</source>
          <target state="translated">FlatMap::clone_from</target>
        </trans-unit>
        <trans-unit id="c32a40933a63eee1e8a0cbd457ef7c05726a69b2" translate="yes" xml:space="preserve">
          <source>FlatMap::clone_into</source>
          <target state="translated">FlatMap::clone_into</target>
        </trans-unit>
        <trans-unit id="c1f27e08be29b514c198bc7981660e3e47bd811a" translate="yes" xml:space="preserve">
          <source>FlatMap::cloned</source>
          <target state="translated">FlatMap::cloned</target>
        </trans-unit>
        <trans-unit id="4dfb53dc9aa97c2971aa6c756cdbd0bdb3436919" translate="yes" xml:space="preserve">
          <source>FlatMap::cmp</source>
          <target state="translated">FlatMap::cmp</target>
        </trans-unit>
        <trans-unit id="2cdaf60c33826b55dd432eda68ef7f30e20db492" translate="yes" xml:space="preserve">
          <source>FlatMap::collect</source>
          <target state="translated">FlatMap::collect</target>
        </trans-unit>
        <trans-unit id="92b5287378b975cdd6eb3d34fc3ed8fbc47bd575" translate="yes" xml:space="preserve">
          <source>FlatMap::copied</source>
          <target state="translated">FlatMap::copied</target>
        </trans-unit>
        <trans-unit id="6e26ebde4a566056367b49d24d357a4de5ea7ec1" translate="yes" xml:space="preserve">
          <source>FlatMap::count</source>
          <target state="translated">FlatMap::count</target>
        </trans-unit>
        <trans-unit id="c627c3238d8bca5bf9bd82f8615c5b311d3dc317" translate="yes" xml:space="preserve">
          <source>FlatMap::cycle</source>
          <target state="translated">FlatMap::cycle</target>
        </trans-unit>
        <trans-unit id="8c9d482a5ba44802cd6b475ac707537e0b74c551" translate="yes" xml:space="preserve">
          <source>FlatMap::enumerate</source>
          <target state="translated">FlatMap::enumerate</target>
        </trans-unit>
        <trans-unit id="e1b10ed4bcc2c007a3876d69ca7f6998dfc386e9" translate="yes" xml:space="preserve">
          <source>FlatMap::eq</source>
          <target state="translated">FlatMap::eq</target>
        </trans-unit>
        <trans-unit id="59aade0b7a453e9f98a9103c697f12521005318a" translate="yes" xml:space="preserve">
          <source>FlatMap::filter</source>
          <target state="translated">FlatMap::filter</target>
        </trans-unit>
        <trans-unit id="2fdbe05e9dadc13643f106b9eda46a88c0b1a996" translate="yes" xml:space="preserve">
          <source>FlatMap::filter_map</source>
          <target state="translated">FlatMap::filter_map</target>
        </trans-unit>
        <trans-unit id="fad2443193400c8a63870e603e5bca91422f362a" translate="yes" xml:space="preserve">
          <source>FlatMap::find</source>
          <target state="translated">FlatMap::find</target>
        </trans-unit>
        <trans-unit id="125dbed80de4b69dffc0dfe11847e62b883770d9" translate="yes" xml:space="preserve">
          <source>FlatMap::find_map</source>
          <target state="translated">FlatMap::find_map</target>
        </trans-unit>
        <trans-unit id="b6489882f5d9daee9820331897d0b4627133e07c" translate="yes" xml:space="preserve">
          <source>FlatMap::flat_map</source>
          <target state="translated">FlatMap::flat_map</target>
        </trans-unit>
        <trans-unit id="5c844d63a8259face3787e8f3299ac3b95755901" translate="yes" xml:space="preserve">
          <source>FlatMap::flatten</source>
          <target state="translated">FlatMap::flatten</target>
        </trans-unit>
        <trans-unit id="7584f7a4ad8eb0b9e113c6aa4f2d46cf83b69b8c" translate="yes" xml:space="preserve">
          <source>FlatMap::fmt</source>
          <target state="translated">FlatMap::fmt</target>
        </trans-unit>
        <trans-unit id="4278b2b98a5bc75ad2b12d42fb2cec52596d7ebe" translate="yes" xml:space="preserve">
          <source>FlatMap::fold</source>
          <target state="translated">FlatMap::fold</target>
        </trans-unit>
        <trans-unit id="1ffb13409823faf10fd3ae3f3074c8038c60c7da" translate="yes" xml:space="preserve">
          <source>FlatMap::for_each</source>
          <target state="translated">FlatMap::for_each</target>
        </trans-unit>
        <trans-unit id="0fcab2131764cdc3768560c3b1df806cf7dfe63b" translate="yes" xml:space="preserve">
          <source>FlatMap::from</source>
          <target state="translated">FlatMap::from</target>
        </trans-unit>
        <trans-unit id="14f6989573f8625324fdc8b8df9585bc9a1af65d" translate="yes" xml:space="preserve">
          <source>FlatMap::fuse</source>
          <target state="translated">FlatMap::fuse</target>
        </trans-unit>
        <trans-unit id="7ea462adb211e84d27be1814f2efbdec85119daf" translate="yes" xml:space="preserve">
          <source>FlatMap::ge</source>
          <target state="translated">FlatMap::ge</target>
        </trans-unit>
        <trans-unit id="136942cf0fe762e017ee40007f923d9271764888" translate="yes" xml:space="preserve">
          <source>FlatMap::gt</source>
          <target state="translated">FlatMap::gt</target>
        </trans-unit>
        <trans-unit id="56d26cf413c4394c3c690fee39f5f690cddcb862" translate="yes" xml:space="preserve">
          <source>FlatMap::inspect</source>
          <target state="translated">FlatMap::inspect</target>
        </trans-unit>
        <trans-unit id="b1a341556fccb8a6be0a5131d4f93c4c107b492f" translate="yes" xml:space="preserve">
          <source>FlatMap::into</source>
          <target state="translated">FlatMap::into</target>
        </trans-unit>
        <trans-unit id="e7dcc1b2ca70b8d936af84416012126e5732e25e" translate="yes" xml:space="preserve">
          <source>FlatMap::into_iter</source>
          <target state="translated">FlatMap::into_iter</target>
        </trans-unit>
        <trans-unit id="007628a6c352d20c0124a62b84d90c6724624f53" translate="yes" xml:space="preserve">
          <source>FlatMap::is_sorted</source>
          <target state="translated">FlatMap::is_sorted</target>
        </trans-unit>
        <trans-unit id="9129a45f76204f8c0351777e3da2b554a0b582f4" translate="yes" xml:space="preserve">
          <source>FlatMap::is_sorted_by</source>
          <target state="translated">FlatMap::is_sorted_by</target>
        </trans-unit>
        <trans-unit id="d22e20cf5c02a9ebd29f54967389a09e0adfcfd2" translate="yes" xml:space="preserve">
          <source>FlatMap::is_sorted_by_key</source>
          <target state="translated">FlatMap::is_sorted_by_key</target>
        </trans-unit>
        <trans-unit id="914399f8b8e96bde2c7fd618fdd4c48d1e9f9c6b" translate="yes" xml:space="preserve">
          <source>FlatMap::last</source>
          <target state="translated">FlatMap::last</target>
        </trans-unit>
        <trans-unit id="c9c703d00fbde0472ecac7cb117332c2f00b6308" translate="yes" xml:space="preserve">
          <source>FlatMap::le</source>
          <target state="translated">FlatMap::le</target>
        </trans-unit>
        <trans-unit id="7360f05321dff1711d111ce541e910a129e8d56c" translate="yes" xml:space="preserve">
          <source>FlatMap::lt</source>
          <target state="translated">FlatMap::lt</target>
        </trans-unit>
        <trans-unit id="b2efff963360869fc2ad9335eb94ff36586cd28d" translate="yes" xml:space="preserve">
          <source>FlatMap::map</source>
          <target state="translated">FlatMap::map</target>
        </trans-unit>
        <trans-unit id="e356ce911add6c369fab96edbb719464384bba68" translate="yes" xml:space="preserve">
          <source>FlatMap::max</source>
          <target state="translated">FlatMap::max</target>
        </trans-unit>
        <trans-unit id="257a5dd5d73e305052601eebdee4a4144216f407" translate="yes" xml:space="preserve">
          <source>FlatMap::max_by</source>
          <target state="translated">FlatMap::max_by</target>
        </trans-unit>
        <trans-unit id="34e9a3ee89c7633227b0c7e3080f159ebe1f6745" translate="yes" xml:space="preserve">
          <source>FlatMap::max_by_key</source>
          <target state="translated">FlatMap::max_by_key</target>
        </trans-unit>
        <trans-unit id="94181b6165e939e7637c998da161b8e6499990f0" translate="yes" xml:space="preserve">
          <source>FlatMap::min</source>
          <target state="translated">FlatMap::min</target>
        </trans-unit>
        <trans-unit id="bb1e852b532bd04e8a57ef7446395d8d5fe5cc58" translate="yes" xml:space="preserve">
          <source>FlatMap::min_by</source>
          <target state="translated">FlatMap::min_by</target>
        </trans-unit>
        <trans-unit id="de471f0806e95f0c8e23e763226ce017d6b1b108" translate="yes" xml:space="preserve">
          <source>FlatMap::min_by_key</source>
          <target state="translated">FlatMap::min_by_key</target>
        </trans-unit>
        <trans-unit id="6c6f160abb7fb76039410b7ac9b852e5021ff6b8" translate="yes" xml:space="preserve">
          <source>FlatMap::ne</source>
          <target state="translated">FlatMap::ne</target>
        </trans-unit>
        <trans-unit id="413f510bb1b95afc92fa6eefe3f8c079cc4a4473" translate="yes" xml:space="preserve">
          <source>FlatMap::next</source>
          <target state="translated">FlatMap::next</target>
        </trans-unit>
        <trans-unit id="112103f858355cb1a8010b4285b08f7678bbaf9f" translate="yes" xml:space="preserve">
          <source>FlatMap::next_back</source>
          <target state="translated">FlatMap::next_back</target>
        </trans-unit>
        <trans-unit id="447ac571074b370963af84bb1ccc70cfd30971dd" translate="yes" xml:space="preserve">
          <source>FlatMap::nth</source>
          <target state="translated">FlatMap::nth</target>
        </trans-unit>
        <trans-unit id="19960eeb0a79269d9090196f451f486631f2b2fa" translate="yes" xml:space="preserve">
          <source>FlatMap::nth_back</source>
          <target state="translated">FlatMap::nth_back</target>
        </trans-unit>
        <trans-unit id="9fc3ac65efe50b7b9e8c052a3c45d03586fa19e6" translate="yes" xml:space="preserve">
          <source>FlatMap::partial_cmp</source>
          <target state="translated">FlatMap::partial_cmp</target>
        </trans-unit>
        <trans-unit id="b8420210bc00b780e997a2f176d15bd70a9cefc2" translate="yes" xml:space="preserve">
          <source>FlatMap::partition</source>
          <target state="translated">FlatMap::partition</target>
        </trans-unit>
        <trans-unit id="d96a8ef922a7dd232909440321f99286aee95938" translate="yes" xml:space="preserve">
          <source>FlatMap::peekable</source>
          <target state="translated">FlatMap::peekable</target>
        </trans-unit>
        <trans-unit id="9288726a37bae0b67d5b14478913d587122a7cff" translate="yes" xml:space="preserve">
          <source>FlatMap::position</source>
          <target state="translated">FlatMap::position</target>
        </trans-unit>
        <trans-unit id="943b213a0bfff37b51e3f3abb7e24395a9eeaff5" translate="yes" xml:space="preserve">
          <source>FlatMap::product</source>
          <target state="translated">FlatMap::product</target>
        </trans-unit>
        <trans-unit id="7b6ba5d98ab711868a29538fd256421af7fccddb" translate="yes" xml:space="preserve">
          <source>FlatMap::rev</source>
          <target state="translated">FlatMap::rev</target>
        </trans-unit>
        <trans-unit id="ffc3ba85262bf1bee58e06cd4bd7ac51112bb7bd" translate="yes" xml:space="preserve">
          <source>FlatMap::rfind</source>
          <target state="translated">FlatMap::rfind</target>
        </trans-unit>
        <trans-unit id="fe6cce940b1123c4767e7142e02b0874d48f1ef8" translate="yes" xml:space="preserve">
          <source>FlatMap::rfold</source>
          <target state="translated">FlatMap::rfold</target>
        </trans-unit>
        <trans-unit id="898c71d717e9f617cc31776c3b0e1fda2441d3bb" translate="yes" xml:space="preserve">
          <source>FlatMap::rposition</source>
          <target state="translated">FlatMap::rposition</target>
        </trans-unit>
        <trans-unit id="70837142b6824cfea9881ff15102481af06523ea" translate="yes" xml:space="preserve">
          <source>FlatMap::scan</source>
          <target state="translated">FlatMap::scan</target>
        </trans-unit>
        <trans-unit id="a72ce51abbc23ca3b19fb0bfc4d326cbd5308d6b" translate="yes" xml:space="preserve">
          <source>FlatMap::size_hint</source>
          <target state="translated">FlatMap::size_hint</target>
        </trans-unit>
        <trans-unit id="576b084fc5b101cd96570df280cf9563178dc0b6" translate="yes" xml:space="preserve">
          <source>FlatMap::skip</source>
          <target state="translated">FlatMap::skip</target>
        </trans-unit>
        <trans-unit id="990653817c5f3095db5801bef648ae48d6779ccd" translate="yes" xml:space="preserve">
          <source>FlatMap::skip_while</source>
          <target state="translated">FlatMap::skip_while</target>
        </trans-unit>
        <trans-unit id="cf9f2b6c21d3b585de5e080a4488ed8b2c27a1a9" translate="yes" xml:space="preserve">
          <source>FlatMap::step_by</source>
          <target state="translated">FlatMap::step_by</target>
        </trans-unit>
        <trans-unit id="0ada750aca7bbff98c03f0857972a15b9d9648a3" translate="yes" xml:space="preserve">
          <source>FlatMap::sum</source>
          <target state="translated">FlatMap::sum</target>
        </trans-unit>
        <trans-unit id="254acb09707335820a8e9275de9208df9fe45564" translate="yes" xml:space="preserve">
          <source>FlatMap::take</source>
          <target state="translated">FlatMap::take</target>
        </trans-unit>
        <trans-unit id="e2cd6313ade76c7297a2894057b99af8f8568ad3" translate="yes" xml:space="preserve">
          <source>FlatMap::take_while</source>
          <target state="translated">FlatMap::take_while</target>
        </trans-unit>
        <trans-unit id="f01f588225546b5db35652e4f0ae1badb647ccfc" translate="yes" xml:space="preserve">
          <source>FlatMap::to_owned</source>
          <target state="translated">FlatMap::to_owned</target>
        </trans-unit>
        <trans-unit id="bc2526e55e922f158b916e5feb1a4f9204a46d81" translate="yes" xml:space="preserve">
          <source>FlatMap::try_fold</source>
          <target state="translated">FlatMap::try_fold</target>
        </trans-unit>
        <trans-unit id="d00acbb4947216d76778b375caaa9531b3c7a01b" translate="yes" xml:space="preserve">
          <source>FlatMap::try_for_each</source>
          <target state="translated">FlatMap::try_for_each</target>
        </trans-unit>
        <trans-unit id="f98ca2e0c1a9c29db9a5cbf530d4e1cd8f6d7537" translate="yes" xml:space="preserve">
          <source>FlatMap::try_from</source>
          <target state="translated">FlatMap::try_from</target>
        </trans-unit>
        <trans-unit id="83b3931fb3265079ae3a473c969b6429f59f284f" translate="yes" xml:space="preserve">
          <source>FlatMap::try_into</source>
          <target state="translated">FlatMap::try_into</target>
        </trans-unit>
        <trans-unit id="324cd76beab30c1f527357aa91c0d96ed5842438" translate="yes" xml:space="preserve">
          <source>FlatMap::try_rfold</source>
          <target state="translated">FlatMap::try_rfold</target>
        </trans-unit>
        <trans-unit id="8a22d8d83287254ab6a23ee75e949e98501f6760" translate="yes" xml:space="preserve">
          <source>FlatMap::type_id</source>
          <target state="translated">FlatMap::type_id</target>
        </trans-unit>
        <trans-unit id="2de222ea97e7cb23e6ac9590d214d64f195cdd1c" translate="yes" xml:space="preserve">
          <source>FlatMap::unzip</source>
          <target state="translated">FlatMap::unzip</target>
        </trans-unit>
        <trans-unit id="db281575c806e87003c9b6682de864fc0df2c6b7" translate="yes" xml:space="preserve">
          <source>FlatMap::zip</source>
          <target state="translated">FlatMap::zip</target>
        </trans-unit>
        <trans-unit id="0af14ddb20aabbe1bd98f28f2c2f744284ccedb3" translate="yes" xml:space="preserve">
          <source>Flatten</source>
          <target state="translated">Flatten</target>
        </trans-unit>
        <trans-unit id="6378b27c94c7794528ec83525ca6682b68867eec" translate="yes" xml:space="preserve">
          <source>Flatten::all</source>
          <target state="translated">Flatten::all</target>
        </trans-unit>
        <trans-unit id="e537d39e2eeb046a286f6dc24210f196c2d61d0c" translate="yes" xml:space="preserve">
          <source>Flatten::any</source>
          <target state="translated">Flatten::any</target>
        </trans-unit>
        <trans-unit id="5df2c8dc161ea0f44000a8a7e6342e9273d021dc" translate="yes" xml:space="preserve">
          <source>Flatten::borrow</source>
          <target state="translated">Flatten::borrow</target>
        </trans-unit>
        <trans-unit id="84d618ced9026bc2da12c2d26053c6b0ea2832f2" translate="yes" xml:space="preserve">
          <source>Flatten::borrow_mut</source>
          <target state="translated">Flatten::borrow_mut</target>
        </trans-unit>
        <trans-unit id="74988a93d8ba79ac6a15f23e599ffe2f23d121f4" translate="yes" xml:space="preserve">
          <source>Flatten::by_ref</source>
          <target state="translated">Flatten::by_ref</target>
        </trans-unit>
        <trans-unit id="6549aaf28075727d38f42f2f9b05397627efdff6" translate="yes" xml:space="preserve">
          <source>Flatten::chain</source>
          <target state="translated">Flatten::chain</target>
        </trans-unit>
        <trans-unit id="1d6a474ca145d35d3343b59b0db187a0d609a48e" translate="yes" xml:space="preserve">
          <source>Flatten::clone</source>
          <target state="translated">Flatten::clone</target>
        </trans-unit>
        <trans-unit id="a61e2674c6ebe5e369a60cd98e4d14c1bdbc7ecd" translate="yes" xml:space="preserve">
          <source>Flatten::clone_from</source>
          <target state="translated">Flatten::clone_from</target>
        </trans-unit>
        <trans-unit id="b77c050e5d12e01700009a11e456e000faadd474" translate="yes" xml:space="preserve">
          <source>Flatten::clone_into</source>
          <target state="translated">Flatten::clone_into</target>
        </trans-unit>
        <trans-unit id="70230129a5a138fb98df5c13a6ad9b1512002b32" translate="yes" xml:space="preserve">
          <source>Flatten::cloned</source>
          <target state="translated">Flatten::cloned</target>
        </trans-unit>
        <trans-unit id="7bbd7d570ad36636c913a9c8cbd18cfb5adea88f" translate="yes" xml:space="preserve">
          <source>Flatten::cmp</source>
          <target state="translated">Flatten::cmp</target>
        </trans-unit>
        <trans-unit id="76980a69644d7dfe349ef13faef81ade2648a2f3" translate="yes" xml:space="preserve">
          <source>Flatten::collect</source>
          <target state="translated">Flatten::collect</target>
        </trans-unit>
        <trans-unit id="ba6f2bf705c0726e60fb3b5c631c9e8ba71a38c7" translate="yes" xml:space="preserve">
          <source>Flatten::copied</source>
          <target state="translated">Flatten::copied</target>
        </trans-unit>
        <trans-unit id="7ed45506f42e57be3ac6257b86e3a2328aee7f22" translate="yes" xml:space="preserve">
          <source>Flatten::count</source>
          <target state="translated">Flatten::count</target>
        </trans-unit>
        <trans-unit id="be9beb234550863ee98e63eadf7a2a2ac4c88820" translate="yes" xml:space="preserve">
          <source>Flatten::cycle</source>
          <target state="translated">Flatten::cycle</target>
        </trans-unit>
        <trans-unit id="ca72956e75e462249891af1c4d9e29a3c340bd27" translate="yes" xml:space="preserve">
          <source>Flatten::enumerate</source>
          <target state="translated">Flatten::enumerate</target>
        </trans-unit>
        <trans-unit id="2a9759914de233d5e6579bdc9b33a2209c3a8358" translate="yes" xml:space="preserve">
          <source>Flatten::eq</source>
          <target state="translated">Flatten::eq</target>
        </trans-unit>
        <trans-unit id="642b7ffbc86337b9b2e53a6a1b94b8dc49b65539" translate="yes" xml:space="preserve">
          <source>Flatten::filter</source>
          <target state="translated">Flatten::filter</target>
        </trans-unit>
        <trans-unit id="65ded6356f6e126088527091aa1cda97844fcba0" translate="yes" xml:space="preserve">
          <source>Flatten::filter_map</source>
          <target state="translated">Flatten::filter_map</target>
        </trans-unit>
        <trans-unit id="044b010b61b947fc0b8970d857cf151425e135b0" translate="yes" xml:space="preserve">
          <source>Flatten::find</source>
          <target state="translated">Flatten::find</target>
        </trans-unit>
        <trans-unit id="64cdc8f49da3fee8a3829164b9381155cca9a8bc" translate="yes" xml:space="preserve">
          <source>Flatten::find_map</source>
          <target state="translated">Flatten::find_map</target>
        </trans-unit>
        <trans-unit id="fbceeb9e0a2e8f7040fa8eae075282f8aade0232" translate="yes" xml:space="preserve">
          <source>Flatten::flat_map</source>
          <target state="translated">Flatten::flat_map</target>
        </trans-unit>
        <trans-unit id="2a2632fc9594da6c4e5ac878933c36a7ce8506c0" translate="yes" xml:space="preserve">
          <source>Flatten::flatten</source>
          <target state="translated">Flatten::flatten</target>
        </trans-unit>
        <trans-unit id="dd6734500dab755029f2d9f77d7cfe9ece45f723" translate="yes" xml:space="preserve">
          <source>Flatten::fmt</source>
          <target state="translated">Flatten::fmt</target>
        </trans-unit>
        <trans-unit id="9a29c24349f70fcf122bf03fd36e163675ac9f7a" translate="yes" xml:space="preserve">
          <source>Flatten::fold</source>
          <target state="translated">Flatten::fold</target>
        </trans-unit>
        <trans-unit id="d2b27a5433d79fd4a93dbf5304184654ea746b76" translate="yes" xml:space="preserve">
          <source>Flatten::for_each</source>
          <target state="translated">Flatten::for_each</target>
        </trans-unit>
        <trans-unit id="f02bc4e5cf877bd2a8f5fb77330649f946dd8c7c" translate="yes" xml:space="preserve">
          <source>Flatten::from</source>
          <target state="translated">Flatten::from</target>
        </trans-unit>
        <trans-unit id="e3507685efab8ac5ecaa03bf287d4c718237a452" translate="yes" xml:space="preserve">
          <source>Flatten::fuse</source>
          <target state="translated">Flatten::fuse</target>
        </trans-unit>
        <trans-unit id="f07045a07e1ac8513837d15d1ec32837341eabcc" translate="yes" xml:space="preserve">
          <source>Flatten::ge</source>
          <target state="translated">Flatten::ge</target>
        </trans-unit>
        <trans-unit id="18da0db46ede4c4e9350844a5fe4f2d2274f31b3" translate="yes" xml:space="preserve">
          <source>Flatten::gt</source>
          <target state="translated">Flatten::gt</target>
        </trans-unit>
        <trans-unit id="722a0d4464ed406627f2f5a56ffa12e0fc1e8196" translate="yes" xml:space="preserve">
          <source>Flatten::inspect</source>
          <target state="translated">Flatten::inspect</target>
        </trans-unit>
        <trans-unit id="9038111fe007cebcd62592d7da4378fd8cd0ddc9" translate="yes" xml:space="preserve">
          <source>Flatten::into</source>
          <target state="translated">Flatten::into</target>
        </trans-unit>
        <trans-unit id="54d478ead00f59905a55dcdb561d01c146b61fd4" translate="yes" xml:space="preserve">
          <source>Flatten::into_iter</source>
          <target state="translated">Flatten::into_iter</target>
        </trans-unit>
        <trans-unit id="1f53c39807466ee056a762c8bb70af58d51102d6" translate="yes" xml:space="preserve">
          <source>Flatten::is_sorted</source>
          <target state="translated">Flatten::is_sorted</target>
        </trans-unit>
        <trans-unit id="99e14c30526feba1349b21ae6448ce04dc088808" translate="yes" xml:space="preserve">
          <source>Flatten::is_sorted_by</source>
          <target state="translated">Flatten::is_sorted_by</target>
        </trans-unit>
        <trans-unit id="05f031fcd127e3c76e69783269222edde058928f" translate="yes" xml:space="preserve">
          <source>Flatten::is_sorted_by_key</source>
          <target state="translated">Flatten::is_sorted_by_key</target>
        </trans-unit>
        <trans-unit id="167347567e9e36963c9b163dc2921f9764574bfb" translate="yes" xml:space="preserve">
          <source>Flatten::last</source>
          <target state="translated">Flatten::last</target>
        </trans-unit>
        <trans-unit id="59a60a72d8b85bae670a6ec6d6b1c7f0b4374dc4" translate="yes" xml:space="preserve">
          <source>Flatten::le</source>
          <target state="translated">Flatten::le</target>
        </trans-unit>
        <trans-unit id="bf97088162f8613f4d0c4bd4d261b0a18f3879b3" translate="yes" xml:space="preserve">
          <source>Flatten::lt</source>
          <target state="translated">Flatten::lt</target>
        </trans-unit>
        <trans-unit id="3a8699a18f82d35e0444dabf1fea5718454a04b7" translate="yes" xml:space="preserve">
          <source>Flatten::map</source>
          <target state="translated">Flatten::map</target>
        </trans-unit>
        <trans-unit id="971af5e71369a17fae6c02994f662f7c1a30c72e" translate="yes" xml:space="preserve">
          <source>Flatten::max</source>
          <target state="translated">Flatten::max</target>
        </trans-unit>
        <trans-unit id="055208d53a428731c79d10e7f2cd7a58a65901f3" translate="yes" xml:space="preserve">
          <source>Flatten::max_by</source>
          <target state="translated">Flatten::max_by</target>
        </trans-unit>
        <trans-unit id="648db41109ce31b9176dbd6022bb142f8fbea63e" translate="yes" xml:space="preserve">
          <source>Flatten::max_by_key</source>
          <target state="translated">Flatten::max_by_key</target>
        </trans-unit>
        <trans-unit id="8292a6b614fa7627ff7156cfa936be0ce5ecea55" translate="yes" xml:space="preserve">
          <source>Flatten::min</source>
          <target state="translated">Flatten::min</target>
        </trans-unit>
        <trans-unit id="1ca455139385f0481bcf43be9b6211e86be6e9cb" translate="yes" xml:space="preserve">
          <source>Flatten::min_by</source>
          <target state="translated">Flatten::min_by</target>
        </trans-unit>
        <trans-unit id="3469af64a679ee79aee5996a0319e6c7d95a1310" translate="yes" xml:space="preserve">
          <source>Flatten::min_by_key</source>
          <target state="translated">Flatten::min_by_key</target>
        </trans-unit>
        <trans-unit id="ef8f8fffefb73fc7348db9447211056250507e70" translate="yes" xml:space="preserve">
          <source>Flatten::ne</source>
          <target state="translated">Flatten::ne</target>
        </trans-unit>
        <trans-unit id="272ed09059d038377f61436223e52ba15c11b454" translate="yes" xml:space="preserve">
          <source>Flatten::next</source>
          <target state="translated">Flatten::next</target>
        </trans-unit>
        <trans-unit id="6ed0e583171d5730167d3925b7f66ab5407e5a6a" translate="yes" xml:space="preserve">
          <source>Flatten::next_back</source>
          <target state="translated">Flatten::next_back</target>
        </trans-unit>
        <trans-unit id="f83cb633f58a8127eb53726450c5004cab59c22d" translate="yes" xml:space="preserve">
          <source>Flatten::nth</source>
          <target state="translated">Flatten::nth</target>
        </trans-unit>
        <trans-unit id="906f8bd6dbad910277215452b72f8ecb4493b03b" translate="yes" xml:space="preserve">
          <source>Flatten::nth_back</source>
          <target state="translated">Flatten::nth_back</target>
        </trans-unit>
        <trans-unit id="b45584894a3184899393e2e35ffa7d84c020e248" translate="yes" xml:space="preserve">
          <source>Flatten::partial_cmp</source>
          <target state="translated">Flatten::partial_cmp</target>
        </trans-unit>
        <trans-unit id="1326415f76b3ee0702ae181196138a1da2b8783e" translate="yes" xml:space="preserve">
          <source>Flatten::partition</source>
          <target state="translated">Flatten::partition</target>
        </trans-unit>
        <trans-unit id="ec97561985365e9099f643e7f6904c13d7b21fd7" translate="yes" xml:space="preserve">
          <source>Flatten::peekable</source>
          <target state="translated">Flatten::peekable</target>
        </trans-unit>
        <trans-unit id="00b0e7b90c4867222af5876dbf3b63065324cfdc" translate="yes" xml:space="preserve">
          <source>Flatten::position</source>
          <target state="translated">Flatten::position</target>
        </trans-unit>
        <trans-unit id="0b876d8774954704d6a4f4d43ff764e2f62e2c9c" translate="yes" xml:space="preserve">
          <source>Flatten::product</source>
          <target state="translated">Flatten::product</target>
        </trans-unit>
        <trans-unit id="ff196a64f89e7d72f68d826286f92097d9b1ece7" translate="yes" xml:space="preserve">
          <source>Flatten::rev</source>
          <target state="translated">Flatten::rev</target>
        </trans-unit>
        <trans-unit id="7267d42f2a661daf38b970f24ef035e184fd9351" translate="yes" xml:space="preserve">
          <source>Flatten::rfind</source>
          <target state="translated">Flatten::rfind</target>
        </trans-unit>
        <trans-unit id="45d2ff094df3d26c61a36270b8f07f83e8e5e07e" translate="yes" xml:space="preserve">
          <source>Flatten::rfold</source>
          <target state="translated">Flatten::rfold</target>
        </trans-unit>
        <trans-unit id="ad2b35a0674e4ff1c33b5453f7b4b6c7b565a180" translate="yes" xml:space="preserve">
          <source>Flatten::rposition</source>
          <target state="translated">Flatten::rposition</target>
        </trans-unit>
        <trans-unit id="c72be32d7b5232d751abac5840b35a5590803c12" translate="yes" xml:space="preserve">
          <source>Flatten::scan</source>
          <target state="translated">Flatten::scan</target>
        </trans-unit>
        <trans-unit id="2751595a2a3743ada0b7f330c315f9ba7e604b21" translate="yes" xml:space="preserve">
          <source>Flatten::size_hint</source>
          <target state="translated">Flatten::size_hint</target>
        </trans-unit>
        <trans-unit id="719ec1c1fd63a2ee5cd01c6d957412482c788246" translate="yes" xml:space="preserve">
          <source>Flatten::skip</source>
          <target state="translated">Flatten::skip</target>
        </trans-unit>
        <trans-unit id="8517a605d396572f805fe6af0230042a552b2350" translate="yes" xml:space="preserve">
          <source>Flatten::skip_while</source>
          <target state="translated">Flatten::skip_while</target>
        </trans-unit>
        <trans-unit id="eca7e88833692e39b6f9af6ac4e764aa9801cc1a" translate="yes" xml:space="preserve">
          <source>Flatten::step_by</source>
          <target state="translated">Flatten::step_by</target>
        </trans-unit>
        <trans-unit id="1080bc491e844001c194e780cb411a27dc80f258" translate="yes" xml:space="preserve">
          <source>Flatten::sum</source>
          <target state="translated">Flatten::sum</target>
        </trans-unit>
        <trans-unit id="b1f45e3b2fc44e5e7692f1843043de19468f3281" translate="yes" xml:space="preserve">
          <source>Flatten::take</source>
          <target state="translated">Flatten::take</target>
        </trans-unit>
        <trans-unit id="2489ed525114cd215de8170aeb7a02d8dac85234" translate="yes" xml:space="preserve">
          <source>Flatten::take_while</source>
          <target state="translated">Flatten::take_while</target>
        </trans-unit>
        <trans-unit id="a68643f524eb3165bd80bad5436c59fcfa11fcf3" translate="yes" xml:space="preserve">
          <source>Flatten::to_owned</source>
          <target state="translated">Flatten::to_owned</target>
        </trans-unit>
        <trans-unit id="55101c5d87b3e8e91f704992caf59c5a02c3a9a9" translate="yes" xml:space="preserve">
          <source>Flatten::try_fold</source>
          <target state="translated">Flatten::try_fold</target>
        </trans-unit>
        <trans-unit id="b9003e86513292141f138e44919ff2e9b4e5ec22" translate="yes" xml:space="preserve">
          <source>Flatten::try_for_each</source>
          <target state="translated">Flatten::try_for_each</target>
        </trans-unit>
        <trans-unit id="8c94ac06304502f80ab771cd077de0e05f32ad4f" translate="yes" xml:space="preserve">
          <source>Flatten::try_from</source>
          <target state="translated">Flatten::try_from</target>
        </trans-unit>
        <trans-unit id="8c47a05dbe76fce1ac45eaad991c1459babafd7d" translate="yes" xml:space="preserve">
          <source>Flatten::try_into</source>
          <target state="translated">Flatten::try_into</target>
        </trans-unit>
        <trans-unit id="1150ea07e36800b3c23c6fef303c0db8cc2cc651" translate="yes" xml:space="preserve">
          <source>Flatten::try_rfold</source>
          <target state="translated">Flatten::try_rfold</target>
        </trans-unit>
        <trans-unit id="60786eceea34873c96933ce0f24809d4169ea724" translate="yes" xml:space="preserve">
          <source>Flatten::type_id</source>
          <target state="translated">Flatten::type_id</target>
        </trans-unit>
        <trans-unit id="636ae3b4e642a02f33332bd930cb8c4897983777" translate="yes" xml:space="preserve">
          <source>Flatten::unzip</source>
          <target state="translated">Flatten::unzip</target>
        </trans-unit>
        <trans-unit id="257fcdc639672ecc8d1c76cd08bb5d85d427e136" translate="yes" xml:space="preserve">
          <source>Flatten::zip</source>
          <target state="translated">Flatten::zip</target>
        </trans-unit>
        <trans-unit id="50e65289e2c773b01f0800828c6c91a71c48f0cb" translate="yes" xml:space="preserve">
          <source>Flattening once only removes one level of nesting:</source>
          <target state="translated">一度だけフラットにすることで、1レベルのネスティングを解除することができます。</target>
        </trans-unit>
        <trans-unit id="0132840ddd72a6d00a7d9eae2c8c7920bb049af1" translate="yes" xml:space="preserve">
          <source>Flattens a slice of &lt;code&gt;T&lt;/code&gt; into a single value &lt;code&gt;Self::Output&lt;/code&gt;, placing a given separator between each.</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; のスライスを単一の値 &lt;code&gt;Self::Output&lt;/code&gt; にフラット化し、それぞれの間に特定のセパレーターを配置します。</target>
        </trans-unit>
        <trans-unit id="9534a89d8aa0d41ae0710eafe7247193c9b256f0" translate="yes" xml:space="preserve">
          <source>Flattens a slice of &lt;code&gt;T&lt;/code&gt; into a single value &lt;code&gt;Self::Output&lt;/code&gt;, placing a given separator between each. &lt;a href=&quot;slice/trait.sliceconcatext#method.connect&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; のスライスを単一の値 &lt;code&gt;Self::Output&lt;/code&gt; にフラット化し、それぞれの間に特定のセパレーターを配置します。&lt;a href=&quot;slice/trait.sliceconcatext#method.connect&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="09b89d3be7140cb65f98edbcd63bf5d5810fcd17" translate="yes" xml:space="preserve">
          <source>Flattens a slice of &lt;code&gt;T&lt;/code&gt; into a single value &lt;code&gt;Self::Output&lt;/code&gt;, placing a given separator between each. &lt;a href=&quot;slice/trait.sliceconcatext#tymethod.join&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; のスライスを単一の値 &lt;code&gt;Self::Output&lt;/code&gt; にフラット化し、それぞれの間に特定のセパレーターを配置します。&lt;a href=&quot;slice/trait.sliceconcatext#tymethod.join&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1a6dcd1f499bd97e21e4181f8911e1274dcc8f58" translate="yes" xml:space="preserve">
          <source>Flattens a slice of &lt;code&gt;T&lt;/code&gt; into a single value &lt;code&gt;Self::Output&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; のスライスを単一の値 &lt;code&gt;Self::Output&lt;/code&gt; フラット化します。</target>
        </trans-unit>
        <trans-unit id="c64a1918c8c75d3a6c599598a89b781e61c86988" translate="yes" xml:space="preserve">
          <source>Flattens a slice of &lt;code&gt;T&lt;/code&gt; into a single value &lt;code&gt;Self::Output&lt;/code&gt;. &lt;a href=&quot;slice/trait.sliceconcatext#tymethod.concat&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; のスライスを単一の値 &lt;code&gt;Self::Output&lt;/code&gt; フラット化します。&lt;a href=&quot;slice/trait.sliceconcatext#tymethod.concat&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b9c5f3fe33f00613b76fc40a67722510e55920eb" translate="yes" xml:space="preserve">
          <source>Float addition that allows optimizations based on algebraic rules. May assume inputs are finite.</source>
          <target state="translated">代数的なルールに基づいた最適化を可能にするフロート加算。入力が有限であると仮定してもよい。</target>
        </trans-unit>
        <trans-unit id="52499cebbcb214cabfe0a704e43a1fb104def099" translate="yes" xml:space="preserve">
          <source>Float division that allows optimizations based on algebraic rules. May assume inputs are finite.</source>
          <target state="translated">代数的なルールに基づいた最適化を可能にするフロート分割。入力が有限であると仮定してもよい。</target>
        </trans-unit>
        <trans-unit id="bc6141321e3d4c4de44fa14f30b656e4984e0713" translate="yes" xml:space="preserve">
          <source>Float multiplication that allows optimizations based on algebraic rules. May assume inputs are finite.</source>
          <target state="translated">代数的なルールに基づいた最適化を可能にするフロート乗算。入力が有限であると仮定してもよい。</target>
        </trans-unit>
        <trans-unit id="4ce00125ee33ccfea7b8391349b004512e0631fc" translate="yes" xml:space="preserve">
          <source>Float remainder that allows optimizations based on algebraic rules. May assume inputs are finite.</source>
          <target state="translated">代数的なルールに基づいた最適化を可能にするフロート残量。入力が有限であると仮定することができます。</target>
        </trans-unit>
        <trans-unit id="6c32fd01dbb17847421092ea2ccb3eef2d237af0" translate="yes" xml:space="preserve">
          <source>Float subtraction that allows optimizations based on algebraic rules. May assume inputs are finite.</source>
          <target state="translated">代数的なルールに基づいた最適化を可能にするフロート減算。入力が有限であると仮定してもよい。</target>
        </trans-unit>
        <trans-unit id="b322920c63a6e6bae036b4e3c0515703738c1bb1" translate="yes" xml:space="preserve">
          <source>FloatToInt</source>
          <target state="translated">FloatToInt</target>
        </trans-unit>
        <trans-unit id="f980f6669a99ae97aa471b598c62ac0c3e1f823b" translate="yes" xml:space="preserve">
          <source>Floating Point</source>
          <target state="translated">浮動小数点</target>
        </trans-unit>
        <trans-unit id="45036235c9c4abd7b11f7d03dccc9d1dff8eb2f8" translate="yes" xml:space="preserve">
          <source>Floating point types (f32 and f64). This is being deprecated and will not be available in a future version of Rust (see &lt;a href=&quot;https://github.com/rust-lang/rust/issues/41620&quot;&gt;issue #41620&lt;/a&gt;).</source>
          <target state="translated">浮動小数点型（f32およびf64）。これは非推奨であり、Rustの将来のバージョンでは使用できなくなります（&lt;a href=&quot;https://github.com/rust-lang/rust/issues/41620&quot;&gt;問題＃41620を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="ef5cfdfa7defdf70726b76da829b0fe14f65909e" translate="yes" xml:space="preserve">
          <source>Floating-Point Types</source>
          <target state="translated">浮動小数点型</target>
        </trans-unit>
        <trans-unit id="d11f66aff25662009484827fd72f259b820f6fce" translate="yes" xml:space="preserve">
          <source>Floating-point</source>
          <target state="translated">Floating-point</target>
        </trans-unit>
        <trans-unit id="4360ebce69c40c7912c546b8749e2ef775efcd1d" translate="yes" xml:space="preserve">
          <source>Floating-point literals</source>
          <target state="translated">浮動小数点リテラル</target>
        </trans-unit>
        <trans-unit id="78376c313af60d60b363b980ef50678fc594133a" translate="yes" xml:space="preserve">
          <source>Floating-point literals are currently accepted, but due to the complexity of comparing them, they are going to be forbidden on literal patterns in a future version of Rust (see &lt;a href=&quot;https://github.com/rust-lang/rust/issues/41620&quot;&gt;issue #41620&lt;/a&gt;).</source>
          <target state="translated">現在、浮動小数点リテラルが受け入れられていますが、比較が複雑であるため、Rustの将来のバージョンではリテラルパターンで使用できなくなります（&lt;a href=&quot;https://github.com/rust-lang/rust/issues/41620&quot;&gt;問題＃41620を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="39a753eeef8506a068f8801ce25d6973d1bebd2d" translate="yes" xml:space="preserve">
          <source>Floating-point numbers are represented according to the IEEE-754 standard. The &lt;code&gt;f32&lt;/code&gt; type is a single-precision float, and &lt;code&gt;f64&lt;/code&gt; has double precision.</source>
          <target state="translated">浮動小数点数は、IEEE-754標準に従って表されます。 &lt;code&gt;f32&lt;/code&gt; タイプは、単精度浮動小数点数であり、 &lt;code&gt;f64&lt;/code&gt; 二重精度を有しています。</target>
        </trans-unit>
        <trans-unit id="c77fa93b82b89d18fe6eec4a6c763b65896680b4" translate="yes" xml:space="preserve">
          <source>Floating-point suffixes</source>
          <target state="translated">浮動小数点の接尾辞</target>
        </trans-unit>
        <trans-unit id="2a9bb411b345b451f4de56294a2e04b8bb44acd7" translate="yes" xml:space="preserve">
          <source>Floating-point types</source>
          <target state="translated">浮動小数点型</target>
        </trans-unit>
        <trans-unit id="b591f9a1c42f27d4c4bd26d282be40b7c6e85c25" translate="yes" xml:space="preserve">
          <source>Floats and Ints have the same endianness on all supported platforms.</source>
          <target state="translated">フロートとイントは、サポートされているすべてのプラットフォームで同じエンディアン性を持っています。</target>
        </trans-unit>
        <trans-unit id="7120a4a1223ce171f0d2cfc3936e1fbe3242f8a9" translate="yes" xml:space="preserve">
          <source>Flush this output stream, ensuring that all intermediately buffered contents reach their destination.</source>
          <target state="translated">この出力ストリームをフラッシュし、中間的にバッファリングされたすべてのコンテンツが目的地に到達するようにします。</target>
        </trans-unit>
        <trans-unit id="11e5d3922d6bab7c0c9ab6b22418d00727480d0e" translate="yes" xml:space="preserve">
          <source>Flush this output stream, ensuring that all intermediately buffered contents reach their destination. &lt;a href=&quot;../../../io/trait.write#tymethod.flush&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">この出力ストリームをフラッシュして、中間でバッファリングされたすべてのコンテンツが宛先に到達するようにします。&lt;a href=&quot;../../../io/trait.write#tymethod.flush&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f6f07902e73f7da8a0b11290876961118d116c44" translate="yes" xml:space="preserve">
          <source>Flush this output stream, ensuring that all intermediately buffered contents reach their destination. &lt;a href=&quot;../io/trait.write#tymethod.flush&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">この出力ストリームをフラッシュして、中間でバッファリングされたすべてのコンテンツが宛先に到達するようにします。&lt;a href=&quot;../io/trait.write#tymethod.flush&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="789421fd045243ff9df826043d84e59d1e2aea7e" translate="yes" xml:space="preserve">
          <source>Flush this output stream, ensuring that all intermediately buffered contents reach their destination. &lt;a href=&quot;io/trait.write#tymethod.flush&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">この出力ストリームをフラッシュして、中間でバッファリングされたすべてのコンテンツが宛先に到達するようにします。&lt;a href=&quot;io/trait.write#tymethod.flush&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d31d71fc0f019cc686c94e54986a1090b2f8d953" translate="yes" xml:space="preserve">
          <source>Flush this output stream, ensuring that all intermediately buffered contents reach their destination. &lt;a href=&quot;trait.write#tymethod.flush&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">この出力ストリームをフラッシュして、中間でバッファリングされたすべてのコンテンツが宛先に到達するようにします。&lt;a href=&quot;trait.write#tymethod.flush&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="97f22050b4373bd22012fd26f53a60dc8f2b7438" translate="yes" xml:space="preserve">
          <source>Fn</source>
          <target state="translated">Fn</target>
        </trans-unit>
        <trans-unit id="056571b6bd538e1535f1a1885d9b32da7f141ee6" translate="yes" xml:space="preserve">
          <source>Fn::call</source>
          <target state="translated">Fn::call</target>
        </trans-unit>
        <trans-unit id="420a3294fc08a40e696614ef505f5ae7675c908a" translate="yes" xml:space="preserve">
          <source>FnMut</source>
          <target state="translated">FnMut</target>
        </trans-unit>
        <trans-unit id="7058c27c0e6429a4b6c5bf52b3c5e54116d44494" translate="yes" xml:space="preserve">
          <source>FnMut::call_mut</source>
          <target state="translated">FnMut::call_mut</target>
        </trans-unit>
        <trans-unit id="6fad81ecb429baed573c945fb613aa8792b2676b" translate="yes" xml:space="preserve">
          <source>FnOnce</source>
          <target state="translated">FnOnce</target>
        </trans-unit>
        <trans-unit id="dbc3b78f4e51810e9d273ad6baf9fc5201a5a6f9" translate="yes" xml:space="preserve">
          <source>FnOnce::call_once</source>
          <target state="translated">FnOnce::call_once</target>
        </trans-unit>
        <trans-unit id="b04326a1880243af0c022215459eab0a42fc4bce" translate="yes" xml:space="preserve">
          <source>Folding is useful whenever you have a collection of something, and want to produce a single value from it.</source>
          <target state="translated">折りたたみは、何かのコレクションを持っていて、そこから一つの価値を生み出したいときに便利です。</target>
        </trans-unit>
        <trans-unit id="049d0e1886b38562b2d1550218c69703314ea03f" translate="yes" xml:space="preserve">
          <source>Follow-set Ambiguity Restrictions</source>
          <target state="translated">フォローセットの曖昧さの制限</target>
        </trans-unit>
        <trans-unit id="03df26aff78415b204036fc3617fc106fe18f8fa" translate="yes" xml:space="preserve">
          <source>Following the Pointer to the Value with the Dereference Operator</source>
          <target state="translated">値へのポインタを参照解除演算子で追従する</target>
        </trans-unit>
        <trans-unit id="5bd2efa47d9f58ed1261195b65a4c89b8c16ef77" translate="yes" xml:space="preserve">
          <source>Foo is a struct</source>
          <target state="translated">Fooは構造体</target>
        </trans-unit>
        <trans-unit id="efa35157485464b05359fcfe9f301757903b6164" translate="yes" xml:space="preserve">
          <source>For (an erroneous) example, here a &lt;code&gt;struct&lt;/code&gt; variant name were used as a function:</source>
          <target state="translated">（誤った）例の場合、ここでは &lt;code&gt;struct&lt;/code&gt; バリアント名が関数として使用されています。</target>
        </trans-unit>
        <trans-unit id="e4c2229e9dabe7c9b8ed00d340552949b1352584" translate="yes" xml:space="preserve">
          <source>For &lt;a href=&quot;items/enumerations#custom-discriminant-values-for-field-less-enumerations&quot;&gt;C-like enumerations&lt;/a&gt;, the &lt;code&gt;C&lt;/code&gt; representation has the size and alignment of the default &lt;code&gt;enum&lt;/code&gt; size and alignment for the target platform's C ABI.</source>
          <target state="translated">以下のために&lt;a href=&quot;items/enumerations#custom-discriminant-values-for-field-less-enumerations&quot;&gt;C状列挙型&lt;/a&gt;、 &lt;code&gt;C&lt;/code&gt; の表現は、デフォルトのサイズ及び位置合わせ有する &lt;code&gt;enum&lt;/code&gt; ターゲットプラットフォームのC ABIのサイズとアライメントを。</target>
        </trans-unit>
        <trans-unit id="12601868b110bccb432aa4fc5e827b149936a899" translate="yes" xml:space="preserve">
          <source>For &lt;a href=&quot;items/enumerations#custom-discriminant-values-for-field-less-enumerations&quot;&gt;C-like enumerations&lt;/a&gt;, they set the size and alignment to be the same as the primitive type of the same name. For example, a C-like enumeration with a &lt;code&gt;u8&lt;/code&gt; representation can only have discriminants between 0 and 255 inclusive.</source>
          <target state="translated">以下のために&lt;a href=&quot;items/enumerations#custom-discriminant-values-for-field-less-enumerations&quot;&gt;C状列挙&lt;/a&gt;、それらは同じ名前のプリミティブ型と同じになるように大きさ及び配置を設定しました。たとえば、 &lt;code&gt;u8&lt;/code&gt; を使用したCのような列挙表現を使用 0から255までの判別式しかことができません。</target>
        </trans-unit>
        <trans-unit id="d97dbac13875101902d78d79d2008fd919d0a3cd" translate="yes" xml:space="preserve">
          <source>For &lt;a href=&quot;items/enumerations#custom-discriminant-values-for-fieldless-enumerations&quot;&gt;field-less enums&lt;/a&gt;, primitive representations set the size and alignment to be the same as the primitive type of the same name. For example, a field-less enum with a &lt;code&gt;u8&lt;/code&gt; representation can only have discriminants between 0 and 255 inclusive.</source>
          <target state="translated">ための&lt;a href=&quot;items/enumerations#custom-discriminant-values-for-fieldless-enumerations&quot;&gt;フィールドレス列挙型&lt;/a&gt;、プリミティブ表現は、同じ名前のプリミティブ型と同じになるように大きさ及び配置を設定しました。たとえば、 &lt;code&gt;u8&lt;/code&gt; 表現のフィールドレス列挙型は、0から255までの判別式のみを持つことができます。</target>
        </trans-unit>
        <trans-unit id="928dfa57bc9d97afc6451c5f626c02eedca2bff4" translate="yes" xml:space="preserve">
          <source>For &lt;a href=&quot;items/enumerations#custom-discriminant-values-for-fieldless-enumerations&quot;&gt;field-less enums&lt;/a&gt;, the &lt;code&gt;C&lt;/code&gt; representation has the size and alignment of the default &lt;code&gt;enum&lt;/code&gt; size and alignment for the target platform's C ABI.</source>
          <target state="translated">以下のために&lt;a href=&quot;items/enumerations#custom-discriminant-values-for-fieldless-enumerations&quot;&gt;フィールドレス列挙型&lt;/a&gt;、 &lt;code&gt;C&lt;/code&gt; の表現は、デフォルトのサイズとアライメント持つ &lt;code&gt;enum&lt;/code&gt; ターゲットプラットフォームのC ABIのサイズとアライメントを。</target>
        </trans-unit>
        <trans-unit id="ee2dc6c0f5371a2e2facba64ec0821770c3bf059" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;Result&lt;/code&gt;, the variants are &lt;code&gt;Ok&lt;/code&gt; or &lt;code&gt;Err&lt;/code&gt;. The &lt;code&gt;Ok&lt;/code&gt; variant indicates the operation was successful, and inside &lt;code&gt;Ok&lt;/code&gt; is the successfully generated value. The &lt;code&gt;Err&lt;/code&gt; variant means the operation failed, and &lt;code&gt;Err&lt;/code&gt; contains information about how or why the operation failed.</source>
          <target state="translated">&lt;code&gt;Result&lt;/code&gt; 、変異体である &lt;code&gt;Ok&lt;/code&gt; か &lt;code&gt;Err&lt;/code&gt; 。 &lt;code&gt;Ok&lt;/code&gt; 変異体は、操作が成功したことを示し、そして内部 &lt;code&gt;Ok&lt;/code&gt; を正常に生成された値です。 &lt;code&gt;Err&lt;/code&gt; バリアントは、操作が失敗したこと、および &lt;code&gt;Err&lt;/code&gt; 、操作が失敗したか、または理由に関する情報が含まれています。</target>
        </trans-unit>
        <trans-unit id="8baf4140d041ccdcdf77b0c6099035c4a7773845" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;align&lt;/code&gt;, if the specified alignment is less than the alignment of the type without the &lt;code&gt;align&lt;/code&gt; modifier, then the alignment is unaffected.</source>
          <target state="translated">以下のために &lt;code&gt;align&lt;/code&gt; 指定アライメントは無しタイプの位置合わせよりも小さい場合、 &lt;code&gt;align&lt;/code&gt; 修飾子は、位置合わせが影響を受けません。</target>
        </trans-unit>
        <trans-unit id="95953d2494ecdb1a594e093e00b3f00569f19670" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;packed&lt;/code&gt;, if the specified alignment is greater than the type's alignment without the &lt;code&gt;packed&lt;/code&gt; modifier, then the alignment and layout is unaffected. The alignments of each field, for the purpose of positioning fields, is the smaller of the specified alignment and the alignment of the field's type.</source>
          <target state="translated">以下のために &lt;code&gt;packed&lt;/code&gt; 、指定された境界がなしタイプのアライメントよりも大きい場合 &lt;code&gt;packed&lt;/code&gt; 修飾は、アライメントとレイアウトは影響を受けません。各フィールドの配置は、フィールドを配置するために、指定された配置とフィールドタイプの配置のどちらか小さい方です。</target>
        </trans-unit>
        <trans-unit id="923e7c9f8f5916bc98ca7d99786bb3a648ab5049" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;path&lt;/code&gt; attributes inside inline module blocks, the relative location of the file path depends on the kind of source file the &lt;code&gt;path&lt;/code&gt; attribute is located in. &quot;mod-rs&quot; source files are root modules (such as &lt;code&gt;lib.rs&lt;/code&gt; or &lt;code&gt;main.rs&lt;/code&gt;) and modules with files named &lt;code&gt;mod.rs&lt;/code&gt;. &quot;non-mod-rs&quot; source files are all other module files. Paths for &lt;code&gt;path&lt;/code&gt; attributes inside inline module blocks in a mod-rs file are relative to the directory of the mod-rs file including the inline module components as directories. For non-mod-rs files, it is the same except the path starts with a directory with the name of the non-mod-rs module. For example, the following code snippet would use the paths shown based on where it is located:</source>
          <target state="translated">インラインモジュールブロック内の &lt;code&gt;path&lt;/code&gt; 属性の場合、ファイルパスの相対位置は、 &lt;code&gt;path&lt;/code&gt; 属性が配置されているソースファイルの種類によって異なります。「mod-rs」ソースファイルはルートモジュール（ &lt;code&gt;lib.rs&lt;/code&gt; や &lt;code&gt;main.rs&lt;/code&gt; など）です。そして &lt;code&gt;mod.rs&lt;/code&gt; という名前のファイルを持つモジュール。 「non-mod-rs」ソースファイルは、他のすべてのモジュールファイルです。 &lt;code&gt;path&lt;/code&gt; mod-rsファイルのインラインモジュールブロック内の属性のパスは、インラインモジュールコンポーネントをディレクトリとして含むmod-rsファイルのディレクトリを基準にしています。 mod-rs以外のファイルの場合、パスがmod-rs以外のモジュールの名前のディレクトリで始まることを除いて、同じです。たとえば、次のコードスニペットは、配置されている場所に基づいて表示されるパスを使用します。</target>
        </trans-unit>
        <trans-unit id="dfab802e53dcd0980d9211ee320dac167a703dcd" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;path&lt;/code&gt; attributes on modules not inside inline module blocks, the file path is relative to the directory the source file is located. For example, the following code snippet would use the paths shown based on where it is located:</source>
          <target state="translated">ための &lt;code&gt;path&lt;/code&gt; モジュールではない内部インラインモジュールブロックの属性、ファイル・パスは、ソースファイルが置かれているディレクトリからの相対。たとえば、次のコードスニペットは、配置されている場所に基づいて表示されるパスを使用します。</target>
        </trans-unit>
        <trans-unit id="3dd7e36edad8d4c66b9d73756a7e9df42b2bf6bf" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;structs&lt;/code&gt;, the size is determined by the following algorithm.</source>
          <target state="translated">以下のために &lt;code&gt;structs&lt;/code&gt; のサイズは、次のアルゴリズムによって決定されます。</target>
        </trans-unit>
        <trans-unit id="6ff44c29aba6a3b1bc418f65dba60f927d755f35" translate="yes" xml:space="preserve">
          <source>For Linux, macOS, and PowerShell on Windows, enter this:</source>
          <target state="translated">Linux、macOS、WindowsのPowerShellの場合は、これを入力します。</target>
        </trans-unit>
        <trans-unit id="0255b4e2a2f93f2b4e2d8aa8385a301c695c0e77" translate="yes" xml:space="preserve">
          <source>For Sets, all operations have the cost of the equivalent Map operation.</source>
          <target state="translated">セットの場合、すべての操作には、同等のマップ操作のコストがかかります。</target>
        </trans-unit>
        <trans-unit id="c7cc1c1542e1186f4de55716920db5bc7661558a" translate="yes" xml:space="preserve">
          <source>For Windows CMD, enter this:</source>
          <target state="translated">WindowsのCMDの場合は、これを入力します。</target>
        </trans-unit>
        <trans-unit id="e8a09318e4aecc4ba3f5576d47f7d0fc0404e3e6" translate="yes" xml:space="preserve">
          <source>For a Rust program to pass the privacy checking pass, all paths must be valid accesses given the two rules above. This includes all use statements, expressions, types, etc.</source>
          <target state="translated">Rust プログラムがプライバシーチェックをパスするためには、すべてのパスが上記の 2 つのルールに基づいた有効なアクセスでなければなりません。これには、すべての使用文、式、型などが含まれます。</target>
        </trans-unit>
        <trans-unit id="721c13185217ca5163b540357358e984418f8298" translate="yes" xml:space="preserve">
          <source>For a discussion of different locking strategies and their trade-offs, see &lt;a href=&quot;../sync/atomic/fn.spin_loop_hint&quot;&gt;&lt;code&gt;core::sync::atomic::spin_loop_hint&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">さまざまなロック戦略とそのトレードオフの説明については、&lt;a href=&quot;../sync/atomic/fn.spin_loop_hint&quot;&gt; &lt;code&gt;core::sync::atomic::spin_loop_hint&lt;/code&gt; &lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="a6f352f3c8751107e9c7e42b98ad0591d3538c17" translate="yes" xml:space="preserve">
          <source>For a file, the value specifies the last time that a file was read from or written to. For a directory, the value specifies when the directory was created. For both files and directories, the specified date is correct, but the time of day is always set to midnight.</source>
          <target state="translated">ファイルの場合は、最後にファイルが読み込まれたか書き込まれたかを指定します。ディレクトリの場合は、ディレクトリが作成された時刻を指定します。ファイルとディレクトリの両方で、指定された日付は正しいですが、時刻は常に真夜中に設定されています。</target>
        </trans-unit>
        <trans-unit id="647fe810a619072712836a1bdb49dbed8a4b1f4b" translate="yes" xml:space="preserve">
          <source>For a file, the value specifies the last time that a file was written to. For a directory, the structure specifies when the directory was created.</source>
          <target state="translated">ファイルの場合は、最後にファイルが書き込まれた時刻を指定します。ディレクトリの場合、構造体はディレクトリがいつ作成されたかを指定します。</target>
        </trans-unit>
        <trans-unit id="184a572ea33b05885cd109fbccf58b322acfb836" translate="yes" xml:space="preserve">
          <source>For a full reference, see &lt;a href=&quot;http://www.unicode.org/versions/Unicode7.0.0/ch03.pdf#G33992&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">完全なリファレンスについては、&lt;a href=&quot;http://www.unicode.org/versions/Unicode7.0.0/ch03.pdf#G33992&quot;&gt;ここを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="8a026a81446d2c299885fea4ef646b54b601a628" translate="yes" xml:space="preserve">
          <source>For a generic item, you can copy over the parameters:</source>
          <target state="translated">一般的な項目の場合は、パラメータをコピーします。</target>
        </trans-unit>
        <trans-unit id="7421ee5b154df5e28d3a023a162558830a4adb57" translate="yes" xml:space="preserve">
          <source>For a generic struct, &lt;code&gt;#[derive]&lt;/code&gt; implements &lt;code&gt;Clone&lt;/code&gt; conditionally by adding bound &lt;code&gt;Clone&lt;/code&gt; on generic parameters.</source>
          <target state="translated">ジェネリック構造体の場合、 &lt;code&gt;#[derive]&lt;/code&gt; はジェネリックパラメーターにバインドされた &lt;code&gt;Clone&lt;/code&gt; を追加することにより、条件付きで &lt;code&gt;Clone&lt;/code&gt; を実装します。</target>
        </trans-unit>
        <trans-unit id="32da4d49301b83f44881cf4568bed0ee41e96684" translate="yes" xml:space="preserve">
          <source>For a let statement with an initializer, an &lt;em&gt;extending expression&lt;/em&gt; is an expression which is one of the following:</source>
          <target state="translated">初期化子を使用したletステートメントの場合、&lt;em&gt;拡張式&lt;/em&gt;は次のいずれかの&lt;em&gt;式&lt;/em&gt;です。</target>
        </trans-unit>
        <trans-unit id="584bf730787a75a1719997d08b667d38c08e2ea5" translate="yes" xml:space="preserve">
          <source>For a more complete documentation see &lt;a href=&quot;fn.spawn&quot;&gt;&lt;code&gt;thread::spawn&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">より完全なドキュメントについては、&lt;a href=&quot;fn.spawn&quot;&gt; &lt;code&gt;thread::spawn&lt;/code&gt; &lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="c8c460d22a41e7606c57994d8c6a28932718cf2b" translate="yes" xml:space="preserve">
          <source>For a more complex example of moving data out of a pinned type, imagine if &lt;a href=&quot;../cell/struct.refcell&quot;&gt;&lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; had a method &lt;code&gt;fn get_pin_mut(self: Pin&amp;lt;&amp;amp;mut Self&amp;gt;) -&amp;gt; Pin&amp;lt;&amp;amp;mut T&amp;gt;&lt;/code&gt;. Then we could do the following:</source>
          <target state="translated">ピン留めされた型からデータを移動するより複雑な例として、&lt;a href=&quot;../cell/struct.refcell&quot;&gt; &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; &lt;/a&gt;メソッド &lt;code&gt;fn get_pin_mut(self: Pin&amp;lt;&amp;amp;mut Self&amp;gt;) -&amp;gt; Pin&amp;lt;&amp;amp;mut T&amp;gt;&lt;/code&gt; があったと想像してください。次に、以下を実行できます。</target>
        </trans-unit>
        <trans-unit id="4ac34c74fd617d583af55fa97b4ee576cf77109d" translate="yes" xml:space="preserve">
          <source>For a more comprehensive benchmark, you should check using various texts of various sizes as the &lt;code&gt;contents&lt;/code&gt;, different words and words of different lengths as the &lt;code&gt;query&lt;/code&gt;, and all kinds of other variations. The point is this: iterators, although a high-level abstraction, get compiled down to roughly the same code as if you&amp;rsquo;d written the lower-level code yourself. Iterators are one of Rust&amp;rsquo;s &lt;em&gt;zero-cost abstractions&lt;/em&gt;, by which we mean using the abstraction imposes no additional runtime overhead. This is analogous to how Bjarne Stroustrup, the original designer and implementor of C++, defines &lt;em&gt;zero-overhead&lt;/em&gt; in &amp;ldquo;Foundations of C++&amp;rdquo; (2012):</source>
          <target state="translated">より包括的なベンチマークについては、 &lt;code&gt;contents&lt;/code&gt; としてさまざまなサイズのさまざまなテキスト、 &lt;code&gt;query&lt;/code&gt; としてさまざまな単語と長さの異なる単語、およびその他のあらゆる種類のバリエーションを使用して確認する必要があります。ポイントはこれです。イテレータは、高レベルの抽象化ですが、自分で低レベルのコードを記述した場合とほぼ同じコードにコンパイルされます。イテレータは、Rustの&lt;em&gt;ゼロコスト抽象化&lt;/em&gt;の1つです。これにより、抽象化を使用しても、実行時のオーバーヘッドが増えることはありません。これは、C ++の最初の設計者であり実装者であるBjarne Stroustrup が「Foundations of C ++」（2012）で&lt;em&gt;オーバーヘッドなし&lt;/em&gt;を定義する方法に類似しています。</target>
        </trans-unit>
        <trans-unit id="e8c3ee9b7f75a6166ad08fd46bdfb3c7c5f3aa2d" translate="yes" xml:space="preserve">
          <source>For a more comprehensive understanding of 'digit', see &lt;a href=&quot;#method.is_numeric&quot;&gt;&lt;code&gt;is_numeric&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">「数字」のより包括的な理解については、&lt;a href=&quot;#method.is_numeric&quot;&gt; &lt;code&gt;is_numeric&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="af029266b2102335e9ca60b4eb325b82424cec62" translate="yes" xml:space="preserve">
          <source>For a more in-depth explanation of how to use &lt;code&gt;PhantomData&amp;lt;T&amp;gt;&lt;/code&gt;, please see &lt;a href=&quot;https://doc.rust-lang.org/nomicon/phantom-data.html&quot;&gt;the Nomicon&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;PhantomData&amp;lt;T&amp;gt;&lt;/code&gt; 使用方法の詳細については&lt;a href=&quot;https://doc.rust-lang.org/nomicon/phantom-data.html&quot;&gt;、Nomicon&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="34072c7c26ac45c9889fc99ef1564d3ceab6d702" translate="yes" xml:space="preserve">
          <source>For a mutex, this means that the &lt;a href=&quot;#method.lock&quot;&gt;&lt;code&gt;lock&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#method.try_lock&quot;&gt;&lt;code&gt;try_lock&lt;/code&gt;&lt;/a&gt; methods return a &lt;a href=&quot;../result/enum.result&quot;&gt;&lt;code&gt;Result&lt;/code&gt;&lt;/a&gt; which indicates whether a mutex has been poisoned or not. Most usage of a mutex will simply &lt;a href=&quot;../result/enum.result#method.unwrap&quot;&gt;&lt;code&gt;unwrap()&lt;/code&gt;&lt;/a&gt; these results, propagating panics among threads to ensure that a possibly invalid invariant is not witnessed.</source>
          <target state="translated">mutexの場合、これは、&lt;a href=&quot;#method.lock&quot;&gt; &lt;code&gt;lock&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#method.try_lock&quot;&gt; &lt;code&gt;try_lock&lt;/code&gt; &lt;/a&gt;メソッドが、mutexが汚染されているかどうかを示す&lt;a href=&quot;../result/enum.result&quot;&gt; &lt;code&gt;Result&lt;/code&gt; &lt;/a&gt;を返すことを意味します。mutexのほとんどの使用法は、これらの結果を単に&lt;a href=&quot;../result/enum.result#method.unwrap&quot;&gt; &lt;code&gt;unwrap()&lt;/code&gt; し&lt;/a&gt;、スレッド間でパニックを伝播して、無効である可能性のある不変条件が発生しないようにします。</target>
        </trans-unit>
        <trans-unit id="1303e2aac1fec56b39d2ac04d0af4683a5f720f6" translate="yes" xml:space="preserve">
          <source>For a mutex, this means that the &lt;a href=&quot;struct.mutex#method.lock&quot;&gt;&lt;code&gt;lock&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;struct.mutex#method.try_lock&quot;&gt;&lt;code&gt;try_lock&lt;/code&gt;&lt;/a&gt; methods return a &lt;a href=&quot;../result/enum.result&quot;&gt;&lt;code&gt;Result&lt;/code&gt;&lt;/a&gt; which indicates whether a mutex has been poisoned or not. Most usage of a mutex will simply &lt;a href=&quot;../result/enum.result#method.unwrap&quot;&gt;&lt;code&gt;unwrap()&lt;/code&gt;&lt;/a&gt; these results, propagating panics among threads to ensure that a possibly invalid invariant is not witnessed.</source>
          <target state="translated">ミューテックスの場合、これは、&lt;a href=&quot;struct.mutex#method.lock&quot;&gt; &lt;code&gt;lock&lt;/code&gt; &lt;/a&gt;メソッドと&lt;a href=&quot;struct.mutex#method.try_lock&quot;&gt; &lt;code&gt;try_lock&lt;/code&gt; &lt;/a&gt;メソッドがミューテックスがポイズニングされているかどうかを示す&lt;a href=&quot;../result/enum.result&quot;&gt; &lt;code&gt;Result&lt;/code&gt; &lt;/a&gt;を返すことを意味します。ミューテックスのほとんどの使用法は、これらの結果を単に&lt;a href=&quot;../result/enum.result#method.unwrap&quot;&gt; &lt;code&gt;unwrap()&lt;/code&gt; し&lt;/a&gt;、スレッド間でパニックを伝播して、無効である可能性のある不変条件が目撃されないようにします。</target>
        </trans-unit>
        <trans-unit id="110bad19ab93479b5e966e4b0cc50f978bba8b9c" translate="yes" xml:space="preserve">
          <source>For a place expression to be &lt;a href=&quot;expressions/operator-expr#assignment-expressions&quot;&gt;assigned&lt;/a&gt; to, mutably &lt;a href=&quot;expressions/operator-expr#borrow-operators&quot;&gt;borrowed&lt;/a&gt;, &lt;a href=&quot;#implicit-borrows&quot;&gt;implicitly mutably borrowed&lt;/a&gt;, or bound to a pattern containing &lt;code&gt;ref mut&lt;/code&gt; it must be &lt;em&gt;mutable&lt;/em&gt;. We call these &lt;em&gt;mutable place expressions&lt;/em&gt;. In contrast, other place expressions are called &lt;em&gt;immutable place expressions&lt;/em&gt;.</source>
          <target state="translated">プレイス式が&lt;a href=&quot;expressions/operator-expr#assignment-expressions&quot;&gt;割り当て&lt;/a&gt;られる、可変的に&lt;a href=&quot;expressions/operator-expr#borrow-operators&quot;&gt;借用される&lt;/a&gt;、&lt;a href=&quot;#implicit-borrows&quot;&gt;暗黙的に可変的に借用される&lt;/a&gt;、または &lt;code&gt;ref mut&lt;/code&gt; を含むパターンにバインドされるには、それが&lt;em&gt;可変&lt;/em&gt;である必要があります。これらを&lt;em&gt;可変の場所式&lt;/em&gt;と呼びます。対照的に、他の場所式は&lt;em&gt;不変の場所式&lt;/em&gt;と呼ば&lt;em&gt;れます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="727cb8735a255c915e275d498c1053a4223d0653" translate="yes" xml:space="preserve">
          <source>For a place expression to be &lt;a href=&quot;expressions/operator-expr#assignment-expressions&quot;&gt;assigned&lt;/a&gt; to, mutably &lt;a href=&quot;expressions/operator-expr#borrow-operators&quot;&gt;borrowed&lt;/a&gt;, &lt;a href=&quot;expressions#implicit-borrows&quot;&gt;implicitly mutably borrowed&lt;/a&gt;, or bound to a pattern containing &lt;code&gt;ref mut&lt;/code&gt; it must be &lt;em&gt;mutable&lt;/em&gt;. We call these &lt;em&gt;mutable place expressions&lt;/em&gt;. In contrast, other place expressions are called &lt;em&gt;immutable place expressions&lt;/em&gt;.</source>
          <target state="translated">する場所の発現のために&lt;a href=&quot;expressions/operator-expr#assignment-expressions&quot;&gt;割り当てられた&lt;/a&gt; mutablyに、&lt;a href=&quot;expressions/operator-expr#borrow-operators&quot;&gt;借りた&lt;/a&gt;、&lt;a href=&quot;expressions#implicit-borrows&quot;&gt;暗黙のうちにmutably借り&lt;/a&gt;、または含むパターンにバインドされた &lt;code&gt;ref mut&lt;/code&gt; それがなければなりません&lt;em&gt;変更可能&lt;/em&gt;。これらの&lt;em&gt;可変の場所式&lt;/em&gt;を呼び出します。対照的に、他の場所式は&lt;em&gt;不変の場所式&lt;/em&gt;と呼ば&lt;em&gt;れます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="0a4fd6dad5fac8c5fd74a9dbca3eb356df92719e" translate="yes" xml:space="preserve">
          <source>For a pointer to be valid, it is necessary, but not always sufficient, that the pointer be &lt;em&gt;dereferenceable&lt;/em&gt;: the memory range of the given size starting at the pointer must all be within the bounds of a single allocated object. Note that in Rust, every (stack-allocated) variable is considered a separate allocated object.</source>
          <target state="translated">ポインタが有効であるためには、ポインタが&lt;em&gt;逆参照&lt;/em&gt;可能である必要がありますが、必ずしも十分ではありません。ポインタから始まる指定されたサイズのメモリ範囲はすべて、割り当てられた単一のオブジェクトの範囲内にある必要があります。Rustでは、すべての（スタックに割り当てられた）変数は個別に割り当てられたオブジェクトと見なされることに注意してください。</target>
        </trans-unit>
        <trans-unit id="de9301d58c943a74d83bb3fa1ba310ec944b1bcb" translate="yes" xml:space="preserve">
          <source>For a real-world metaphor for a mutex, imagine a panel discussion at a conference with only one microphone. Before a panelist can speak, they have to ask or signal that they want to use the microphone. When they get the microphone, they can talk for as long as they want to and then hand the microphone to the next panelist who requests to speak. If a panelist forgets to hand the microphone off when they&amp;rsquo;re finished with it, no one else is able to speak. If management of the shared microphone goes wrong, the panel won&amp;rsquo;t work as planned!</source>
          <target state="translated">mutexの実際のメタファーとして、マイクが1つしかない会議でのパネルディスカッションを想像してみてください。パネリストが発言する前に、マイクを使用することを尋ねるか、信号を送る必要があります。マイクが届いたら、好きなだけ話してから、次のパネリストにマイクを渡して話してもらいます。パネリストがマイクの使用を終えたときにマイクを渡すのを忘れると、他の誰も話すことができなくなります。共有マイクの管理がうまくいかないと、パネルは予定通り機能しません！</target>
        </trans-unit>
        <trans-unit id="50947d30fed8f70a7887dbcd8ce5acf23cbf7259" translate="yes" xml:space="preserve">
          <source>For a safe alternative see &lt;a href=&quot;#method.get&quot;&gt;&lt;code&gt;get&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">安全な代替手段については、&lt;a href=&quot;#method.get&quot;&gt; &lt;code&gt;get&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="90ff72d90a7e5c0bf0e102c5c91fc1584cbdbc95" translate="yes" xml:space="preserve">
          <source>For a safe alternative see &lt;a href=&quot;#method.get_mut&quot;&gt;&lt;code&gt;get_mut&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">安全な代替手段については、&lt;a href=&quot;#method.get_mut&quot;&gt; &lt;code&gt;get_mut&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="574f9240f72aeac0bfeae5e0f00d9253ad522ec4" translate="yes" xml:space="preserve">
          <source>For a safe version of this function, see the &lt;a href=&quot;#method.from_u32&quot;&gt;&lt;code&gt;from_u32&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">この関数の安全なバージョンについては、&lt;a href=&quot;#method.from_u32&quot;&gt; &lt;code&gt;from_u32&lt;/code&gt; &lt;/a&gt;関数を参照してください。</target>
        </trans-unit>
        <trans-unit id="80cb9fa8331624fe1b3590f8bda584f9d5823d76" translate="yes" xml:space="preserve">
          <source>For a safe version of this function, see the &lt;a href=&quot;fn.from_u32&quot;&gt;&lt;code&gt;from_u32&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">この関数の安全なバージョンについては、&lt;a href=&quot;fn.from_u32&quot;&gt; &lt;code&gt;from_u32&lt;/code&gt; &lt;/a&gt;関数を参照してください。</target>
        </trans-unit>
        <trans-unit id="aa5bc88b13ac7c1bbb6ef7b8b5f285e4ac562cee" translate="yes" xml:space="preserve">
          <source>For a somewhat artificial example:</source>
          <target state="translated">やや人工的な例のために。</target>
        </trans-unit>
        <trans-unit id="3018ad27db79c39f8145afd228804aab3254e82a" translate="yes" xml:space="preserve">
          <source>For a type like &lt;a href=&quot;../vec/struct.vec&quot;&gt;&lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;, both possibilites (structural pinning or not) make sense. A &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; with structural pinning could have &lt;code&gt;get_pin&lt;/code&gt;/&lt;code&gt;get_pin_mut&lt;/code&gt; methods to get pinned references to elements. However, it could &lt;em&gt;not&lt;/em&gt; allow calling &lt;code&gt;pop&lt;/code&gt; on a pinned &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; because that would move the (structurally pinned) contents! Nor could it allow &lt;code&gt;push&lt;/code&gt;, which might reallocate and thus also move the contents. A &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; without structural pinning could &lt;code&gt;impl&amp;lt;T&amp;gt; Unpin for Vec&amp;lt;T&amp;gt;&lt;/code&gt;, because the contents are never pinned and the &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; itself is fine with being moved as well. At that point pinning just has no effect on the vector at all.</source>
          <target state="translated">&lt;a href=&quot;../vec/struct.vec&quot;&gt; &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; &lt;/a&gt;ようなタイプの場合、両方の可能性（構造的な固定かどうか）が理にかなっています。構造的な固定を備えた &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; は、要素への固定された参照を取得する &lt;code&gt;get_pin&lt;/code&gt; / &lt;code&gt;get_pin_mut&lt;/code&gt; メソッドを持つことができます。ただし、（構造的に固定された）コンテンツが移動するため、固定された &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; &lt;code&gt;pop&lt;/code&gt; を呼び出すことはでき&lt;em&gt;ませんでした&lt;/em&gt;。また、 &lt;code&gt;push&lt;/code&gt; を許可することもできません。これにより、コンテンツが再割り当てされて移動する可能性があります。 A &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; 構造ピニングなしでし &lt;code&gt;impl&amp;lt;T&amp;gt; Unpin for Vec&amp;lt;T&amp;gt;&lt;/code&gt; 、内容が固定されず、決してされているので、 &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; 移動自体も問題ありません。その時点では、固定はベクトルにまったく影響を与えません。</target>
        </trans-unit>
        <trans-unit id="8f35186e1bcfe1224be1716d0530b7876d335108" translate="yes" xml:space="preserve">
          <source>For a type like &lt;a href=&quot;../vec/struct.vec&quot;&gt;&lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;, both possibilities (structural pinning or not) make sense. A &lt;a href=&quot;../vec/struct.vec&quot;&gt;&lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; with structural pinning could have &lt;code&gt;get_pin&lt;/code&gt;/&lt;code&gt;get_pin_mut&lt;/code&gt; methods to get pinned references to elements. However, it could &lt;em&gt;not&lt;/em&gt; allow calling &lt;a href=&quot;../vec/struct.vec#method.pop&quot;&gt;&lt;code&gt;pop&lt;/code&gt;&lt;/a&gt; on a pinned &lt;a href=&quot;../vec/struct.vec&quot;&gt;&lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; because that would move the (structurally pinned) contents! Nor could it allow &lt;a href=&quot;../vec/struct.vec#method.push&quot;&gt;&lt;code&gt;push&lt;/code&gt;&lt;/a&gt;, which might reallocate and thus also move the contents.</source>
          <target state="translated">&lt;a href=&quot;../vec/struct.vec&quot;&gt; &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; &lt;/a&gt;ようなタイプの場合、両方の可能性（構造的なピン留めかどうか）は理にかなっています。構造的な固定を使用する&lt;a href=&quot;../vec/struct.vec&quot;&gt; &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; &lt;/a&gt;は、要素への固定された参照を取得するための &lt;code&gt;get_pin&lt;/code&gt; / &lt;code&gt;get_pin_mut&lt;/code&gt; メソッドがあります。ただし、固定された&lt;a href=&quot;../vec/struct.vec&quot;&gt; &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; &lt;/a&gt;&lt;a href=&quot;../vec/struct.vec#method.pop&quot;&gt; &lt;code&gt;pop&lt;/code&gt; &lt;/a&gt;を呼び出すことはでき&lt;em&gt;ませんでした&lt;/em&gt;。これは、（構造的に固定された）コンテンツを移動するためです。また、&lt;a href=&quot;../vec/struct.vec#method.push&quot;&gt; &lt;code&gt;push&lt;/code&gt; &lt;/a&gt;許可することもできません。プッシュは、コンテンツを再割り当てして移動する可能性があります。</target>
        </trans-unit>
        <trans-unit id="67d296f2a80f5db17e16b446a5a9cfb39f9637e3" translate="yes" xml:space="preserve">
          <source>For active Rust users, a new edition brings together incremental changes into an easy-to-understand package.</source>
          <target state="translated">アクティブな Rust ユーザーのために、新版では、段階的な変更をわかりやすいパッケージにまとめました。</target>
        </trans-unit>
        <trans-unit id="73ca74581814e147e2e3595a2c92e5345d58125c" translate="yes" xml:space="preserve">
          <source>For additional practice, add an &lt;code&gt;add-two&lt;/code&gt; crate to this workspace in a similar way as the &lt;code&gt;add-one&lt;/code&gt; crate!</source>
          <target state="translated">追加の練習として、 &lt;code&gt;add-one&lt;/code&gt; クレートと同じ方法で &lt;code&gt;add-two&lt;/code&gt; クレートをこのワークスペースに追加します！</target>
        </trans-unit>
        <trans-unit id="d6837630c0df8773ee6d141d026932e22f322a94" translate="yes" xml:space="preserve">
          <source>For all other enumerations, the layout is unspecified.</source>
          <target state="translated">他のすべての列挙については、レイアウトは指定されていません。</target>
        </trans-unit>
        <trans-unit id="f839518ecde1e4d473a1e1391c3cecd147a2688f" translate="yes" xml:space="preserve">
          <source>For all types, the &lt;code&gt;replace&lt;/code&gt; method replaces the current interior value and returns the replaced value and the &lt;code&gt;into_inner&lt;/code&gt; method consumes the &lt;code&gt;Cell&amp;lt;T&amp;gt;&lt;/code&gt; and returns the interior value. Additionally, the &lt;code&gt;set&lt;/code&gt; method replaces the interior value, dropping the replaced value.</source>
          <target state="translated">すべてのタイプで、 &lt;code&gt;replace&lt;/code&gt; メソッドは現在の内部値を置き換えて、置き換えられた値を返し、 &lt;code&gt;into_inner&lt;/code&gt; メソッドは &lt;code&gt;Cell&amp;lt;T&amp;gt;&lt;/code&gt; を消費して内部値を返します。さらに、 &lt;code&gt;set&lt;/code&gt; メソッドは内部値を置き換え、置き換えられた値を削除します。</target>
        </trans-unit>
        <trans-unit id="4a74f1f69aa81d61ed79104423a7e929d2a5e90f" translate="yes" xml:space="preserve">
          <source>For an unsafe version of this function which ignores these checks, see &lt;a href=&quot;#method.from_u32_unchecked&quot;&gt;&lt;code&gt;from_u32_unchecked&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これらのチェックを無視するこの関数の安全でないバージョンについては、&lt;a href=&quot;#method.from_u32_unchecked&quot;&gt; &lt;code&gt;from_u32_unchecked&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="476b6d833d40fa72a41a7850a15d62e625fad288" translate="yes" xml:space="preserve">
          <source>For an unsafe version of this function which ignores these checks, see &lt;a href=&quot;fn.from_u32_unchecked&quot;&gt;&lt;code&gt;from_u32_unchecked&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これらのチェックを無視するこの関数の安全でないバージョンについては、&lt;a href=&quot;fn.from_u32_unchecked&quot;&gt; &lt;code&gt;from_u32_unchecked&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="deac77531516e2593df857782566c5a6bc6ab633" translate="yes" xml:space="preserve">
          <source>For an unseparated complex NT in a matcher, &lt;code&gt;M = ... $(tt ...) OP ...&lt;/code&gt;, if OP = &lt;code&gt;\*&lt;/code&gt; or &lt;code&gt;+&lt;/code&gt;, we must have FOLLOW(&lt;code&gt;tt ...&lt;/code&gt;) &amp;supe; FIRST(&lt;code&gt;tt ...&lt;/code&gt;).</source>
          <target state="translated">マッチャー内の分離されていない複雑なNTの場合、 &lt;code&gt;M = ... $(tt ...) OP ...&lt;/code&gt; 、OP = &lt;code&gt;\*&lt;/code&gt; または &lt;code&gt;+&lt;/code&gt; の場合、FOLLOW（ &lt;code&gt;tt ...&lt;/code&gt; ）&amp;supe;FIRST（ &lt;code&gt;tt ...&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="567c47b2126f9c8ec60a221bb903f23b7c59a470" translate="yes" xml:space="preserve">
          <source>For another enhancement, let&amp;rsquo;s add a test of the &lt;code&gt;add_one::add_one&lt;/code&gt; function within the &lt;code&gt;add_one&lt;/code&gt; crate:</source>
          <target state="translated">別の拡張機能として、 &lt;code&gt;add_one&lt;/code&gt; クレート内に &lt;code&gt;add_one::add_one&lt;/code&gt; 関数のテストを追加しましょう。</target>
        </trans-unit>
        <trans-unit id="a452ba88131c8535dae1f914470890abc9e80f80" translate="yes" xml:space="preserve">
          <source>For another example of an error, suppose there's another trait defined in &lt;code&gt;foo&lt;/code&gt; named &lt;code&gt;ForeignTrait2&lt;/code&gt; that takes two type parameters. Then this &lt;code&gt;impl&lt;/code&gt; results in the same rule violation:</source>
          <target state="translated">エラーの別の例として、 &lt;code&gt;foo&lt;/code&gt; で定義された、 &lt;code&gt;ForeignTrait2&lt;/code&gt; という名前の別のトレイトがあり、2つの型パラメーターを取るとします。次に、この &lt;code&gt;impl&lt;/code&gt; では同じルール違反が発生します。</target>
        </trans-unit>
        <trans-unit id="b298ee6634f789f7504bbe56b35081e11b1776b3" translate="yes" xml:space="preserve">
          <source>For any &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;n&lt;/code&gt;, where no overflow occurs:</source>
          <target state="translated">オーバーフローが発生しない任意の &lt;code&gt;a&lt;/code&gt; および &lt;code&gt;n&lt;/code&gt; の場合：</target>
        </trans-unit>
        <trans-unit id="6e967e04cf21f07d7428cc8f9d5d43b5223ad6b6" translate="yes" xml:space="preserve">
          <source>For any &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;n&lt;/code&gt;:</source>
          <target state="translated">任意の &lt;code&gt;a&lt;/code&gt; および &lt;code&gt;n&lt;/code&gt; の場合：</target>
        </trans-unit>
        <trans-unit id="d7177439b1c102fad0f955acbe04d8571f3bc735" translate="yes" xml:space="preserve">
          <source>For any &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt;, and &lt;code&gt;n&lt;/code&gt;:</source>
          <target state="translated">任意の &lt;code&gt;a&lt;/code&gt; 、 &lt;code&gt;b&lt;/code&gt; 、および &lt;code&gt;n&lt;/code&gt; の場合：</target>
        </trans-unit>
        <trans-unit id="0400fbd14de605a36ca6850ba610aa532b5ec511" translate="yes" xml:space="preserve">
          <source>For any &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;n&lt;/code&gt;, and &lt;code&gt;m&lt;/code&gt; where &lt;code&gt;n + m&lt;/code&gt; does not overflow:</source>
          <target state="translated">&lt;code&gt;n + m&lt;/code&gt; がオーバーフローしない任意の &lt;code&gt;a&lt;/code&gt; 、 &lt;code&gt;n&lt;/code&gt; 、および &lt;code&gt;m&lt;/code&gt; の場合：</target>
        </trans-unit>
        <trans-unit id="d3a4733d0f33a5abdaf576d0946acf68336e9c47" translate="yes" xml:space="preserve">
          <source>For any &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;n&lt;/code&gt;, and &lt;code&gt;m&lt;/code&gt;, where no overflow occurs:</source>
          <target state="translated">オーバーフローが発生しない任意の &lt;code&gt;a&lt;/code&gt; 、 &lt;code&gt;n&lt;/code&gt; 、および &lt;code&gt;m&lt;/code&gt; の場合：</target>
        </trans-unit>
        <trans-unit id="b420862395f4311806121a428bcf8094fcd87366" translate="yes" xml:space="preserve">
          <source>For any &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;n&lt;/code&gt;, and &lt;code&gt;m&lt;/code&gt;:</source>
          <target state="translated">任意の &lt;code&gt;a&lt;/code&gt; 、 &lt;code&gt;n&lt;/code&gt; 、および &lt;code&gt;m&lt;/code&gt; の場合：</target>
        </trans-unit>
        <trans-unit id="283c28e21e5d022c297a84900d000ac8c19d139f" translate="yes" xml:space="preserve">
          <source>For any &lt;code&gt;a&lt;/code&gt;:</source>
          <target state="translated">任意 &lt;code&gt;a&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="3b45cf56ca7c18d52ba90d4d864763045b8b7c39" translate="yes" xml:space="preserve">
          <source>For any lint check &lt;code&gt;C&lt;/code&gt;:</source>
          <target state="translated">糸くずチェック &lt;code&gt;C&lt;/code&gt; の場合：</target>
        </trans-unit>
        <trans-unit id="056c0dacdd55194f54d5847447d6f623af23b2c3" translate="yes" xml:space="preserve">
          <source>For any separated complex NT in a matcher, &lt;code&gt;M = ... $(tt ...) SEP OP ...&lt;/code&gt;, we must have &lt;code&gt;SEP&lt;/code&gt; &amp;isin; FOLLOW(&lt;code&gt;tt ...&lt;/code&gt;).</source>
          <target state="translated">任意のマッチャーに複雑なNTを分離するために、 &lt;code&gt;M = ... $(tt ...) SEP OP ...&lt;/code&gt; 、私たちは持っている必要があります &lt;code&gt;SEP&lt;/code&gt; （&amp;isin;FOLLOWを &lt;code&gt;tt ...&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="1d2f6725c963b627309938adf90568e934652249" translate="yes" xml:space="preserve">
          <source>For any two successive token tree sequences in a matcher &lt;code&gt;M&lt;/code&gt; (i.e. &lt;code&gt;M = ... tt uu ...&lt;/code&gt;) with &lt;code&gt;uu ...&lt;/code&gt; nonempty, we must have FOLLOW(&lt;code&gt;... tt&lt;/code&gt;) &amp;cup; {&amp;epsilon;} &amp;supe; FIRST(&lt;code&gt;uu ...&lt;/code&gt;).</source>
          <target state="translated">マッチャー &lt;code&gt;M&lt;/code&gt; （つまり &lt;code&gt;M = ... tt uu ...&lt;/code&gt; ）で、 &lt;code&gt;uu ...&lt;/code&gt; が空でない2つの連続するトークンツリーシーケンスの場合、FOLLOW（ &lt;code&gt;... tt&lt;/code&gt; ）&amp;cup;{&amp;epsilon;}&amp;supe;FIRST（ &lt;code&gt;uu ...&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="6cdbdbd6c13dc2fb6d28991d433130904066520c" translate="yes" xml:space="preserve">
          <source>For associated functions, there would not be a &lt;code&gt;receiver&lt;/code&gt;: there would only be the list of other arguments. You could use fully qualified syntax everywhere that you call functions or methods. However, you&amp;rsquo;re allowed to omit any part of this syntax that Rust can figure out from other information in the program. You only need to use this more verbose syntax in cases where there are multiple implementations that use the same name and Rust needs help to identify which implementation you want to call.</source>
          <target state="translated">関連する関数の場合、 &lt;code&gt;receiver&lt;/code&gt; はありません。他の引数のリストしかありません。関数またはメソッドを呼び出すすべての場所で完全修飾構文を使用できます。ただし、Rustがプログラムの他の情報から理解できるこの構文の部分は省略できます。同じ名前を使用する複数の実装があり、Rustがどの実装を呼び出すかを特定するのに役立つ場合にのみ、このより冗長な構文を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="a482aec762a0ae7cc8035a9d32a39718410a1d01" translate="yes" xml:space="preserve">
          <source>For builtin pointer types, pointers to &lt;code&gt;T&lt;/code&gt; will coerce to pointers to &lt;code&gt;U&lt;/code&gt; if &lt;code&gt;T: Unsize&amp;lt;U&amp;gt;&lt;/code&gt; by converting from a thin pointer to a fat pointer.</source>
          <target state="translated">組み込みポインタタイプの、へのポインタ &lt;code&gt;T&lt;/code&gt; を指すポインタを強要します &lt;code&gt;U&lt;/code&gt; 場合 &lt;code&gt;T: Unsize&amp;lt;U&amp;gt;&lt;/code&gt; ファットポインタに薄いポインタから変換することによって。</target>
        </trans-unit>
        <trans-unit id="cd4e266e3c4d23a572f017e57b60117e05b20fc7" translate="yes" xml:space="preserve">
          <source>For cases when one does need thread-safe interior mutability, Rust provides &lt;a href=&quot;../sync/atomic/index&quot;&gt;atomic data types&lt;/a&gt;, as well as explicit locking via &lt;a href=&quot;../sync/struct.mutex&quot;&gt;&lt;code&gt;sync::Mutex&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../sync/struct.rwlock&quot;&gt;&lt;code&gt;sync::RwLock&lt;/code&gt;&lt;/a&gt;. These types ensure that any mutation cannot cause data races, hence the types are &lt;code&gt;Sync&lt;/code&gt;. Likewise, &lt;a href=&quot;../sync/struct.arc&quot;&gt;&lt;code&gt;sync::Arc&lt;/code&gt;&lt;/a&gt; provides a thread-safe analogue of &lt;a href=&quot;../rc/struct.rc&quot;&gt;&lt;code&gt;Rc&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">スレッドセーフな内部の可変性が必要な場合のために、Rustは、&lt;a href=&quot;../sync/atomic/index&quot;&gt;アトミックデータ型と&lt;/a&gt;、&lt;a href=&quot;../sync/struct.mutex&quot;&gt; &lt;code&gt;sync::Mutex&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;../sync/struct.rwlock&quot;&gt; &lt;code&gt;sync::RwLock&lt;/code&gt; &lt;/a&gt;明示的なロックを提供します。これらのタイプは、変異がデータの競合を引き起こさないことを保証するため、タイプは &lt;code&gt;Sync&lt;/code&gt; です。同様に、&lt;a href=&quot;../sync/struct.arc&quot;&gt; &lt;code&gt;sync::Arc&lt;/code&gt; &lt;/a&gt;は&lt;a href=&quot;../rc/struct.rc&quot;&gt; &lt;code&gt;Rc&lt;/code&gt; の&lt;/a&gt;スレッドセーフな類似物を提供します。</target>
        </trans-unit>
        <trans-unit id="95ce88c6063c5e04848b361d4df1470f061a981a" translate="yes" xml:space="preserve">
          <source>For convenience, running &lt;code&gt;cargo doc --open&lt;/code&gt; will build the HTML for your current crate&amp;rsquo;s documentation (as well as the documentation for all of your crate&amp;rsquo;s dependencies) and open the result in a web browser. Navigate to the &lt;code&gt;add_one&lt;/code&gt; function and you&amp;rsquo;ll see how the text in the documentation comments is rendered, as shown in Figure 14-1:</source>
          <target state="translated">便宜上、 &lt;code&gt;cargo doc --open&lt;/code&gt; を実行すると、現在のクレートのドキュメント（およびクレートのすべての依存関係のドキュメント）のHTMLが作成され、結果がWebブラウザーで開きます。 &lt;code&gt;add_one&lt;/code&gt; 関数に移動すると、図14-1に示すように、ドキュメンテーションコメントのテキストがどのようにレンダリングされるかがわかります。</target>
        </trans-unit>
        <trans-unit id="066c1d6d346620b3bed514578530bbc0f4c88848" translate="yes" xml:space="preserve">
          <source>For converting to strings use the &lt;a href=&quot;macro.format&quot;&gt;&lt;code&gt;format!&lt;/code&gt;&lt;/a&gt; macro, and for converting from strings use the &lt;a href=&quot;str/trait.fromstr&quot;&gt;&lt;code&gt;FromStr&lt;/code&gt;&lt;/a&gt; trait.</source>
          <target state="translated">文字列に変換するには、&lt;a href=&quot;macro.format&quot;&gt; &lt;code&gt;format!&lt;/code&gt; &lt;/a&gt;使用してください！マクロ、および文字列からの変換には&lt;a href=&quot;str/trait.fromstr&quot;&gt; &lt;code&gt;FromStr&lt;/code&gt; &lt;/a&gt;特性を使用します。</target>
        </trans-unit>
        <trans-unit id="b495fc173ff830e38cba8fae0764e0cd7d19620b" translate="yes" xml:space="preserve">
          <source>For custom types, the coercion here works by coercing &lt;code&gt;Foo&amp;lt;T&amp;gt;&lt;/code&gt; to &lt;code&gt;Foo&amp;lt;U&amp;gt;&lt;/code&gt; provided an impl of &lt;code&gt;CoerceUnsized&amp;lt;Foo&amp;lt;U&amp;gt;&amp;gt; for Foo&amp;lt;T&amp;gt;&lt;/code&gt; exists. Such an impl can only be written if &lt;code&gt;Foo&amp;lt;T&amp;gt;&lt;/code&gt; has only a single non-phantomdata field involving &lt;code&gt;T&lt;/code&gt;. If the type of that field is &lt;code&gt;Bar&amp;lt;T&amp;gt;&lt;/code&gt;, an implementation of &lt;code&gt;CoerceUnsized&amp;lt;Bar&amp;lt;U&amp;gt;&amp;gt; for Bar&amp;lt;T&amp;gt;&lt;/code&gt; must exist. The coercion will work by coercing the &lt;code&gt;Bar&amp;lt;T&amp;gt;&lt;/code&gt; field into &lt;code&gt;Bar&amp;lt;U&amp;gt;&lt;/code&gt; and filling in the rest of the fields from &lt;code&gt;Foo&amp;lt;T&amp;gt;&lt;/code&gt; to create a &lt;code&gt;Foo&amp;lt;U&amp;gt;&lt;/code&gt;. This will effectively drill down to a pointer field and coerce that.</source>
          <target state="translated">カスタムタイプの場合、ここでの強制は、 &lt;code&gt;Foo&amp;lt;T&amp;gt;&lt;/code&gt; の &lt;code&gt;CoerceUnsized&amp;lt;Foo&amp;lt;U&amp;gt;&amp;gt; for Foo&amp;lt;T&amp;gt;&lt;/code&gt; が存在する場合、Foo &amp;lt;T&amp;gt;を &lt;code&gt;Foo&amp;lt;U&amp;gt;&lt;/code&gt; 強制することで機能します。このようなimplは、 &lt;code&gt;Foo&amp;lt;T&amp;gt;&lt;/code&gt; &lt;code&gt;T&lt;/code&gt; が関係する非ファントムデータフィールドが1つしかない場合にのみ記述できます。そのフィールドのタイプが &lt;code&gt;Bar&amp;lt;T&amp;gt;&lt;/code&gt; 場合、Bar &amp;lt;T&amp;gt;の &lt;code&gt;CoerceUnsized&amp;lt;Bar&amp;lt;U&amp;gt;&amp;gt; for Bar&amp;lt;T&amp;gt;&lt;/code&gt; 実装が存在する必要があります。強制型変換は、 &lt;code&gt;Bar&amp;lt;T&amp;gt;&lt;/code&gt; フィールドを &lt;code&gt;Bar&amp;lt;U&amp;gt;&lt;/code&gt; 強制変換し、 &lt;code&gt;Foo&amp;lt;T&amp;gt;&lt;/code&gt; の残りのフィールドに入力して &lt;code&gt;Foo&amp;lt;U&amp;gt;&lt;/code&gt; を作成することによって機能します。これにより、ポインタフィールドに効果的にドリルダウンし、強制的に変換します。</target>
        </trans-unit>
        <trans-unit id="60d481b314010be795197eaef3eeb1b40bbbd1e2" translate="yes" xml:space="preserve">
          <source>For default impls in traits, the private helper solution won't work, however closures or copying the parameters should still work.</source>
          <target state="translated">traits のデフォルトの impls では、プライベートヘルパーは動作しませんが、クロージャやパラメータのコピーは動作するはずです。</target>
        </trans-unit>
        <trans-unit id="18fd7ffece3fe76bf6c6f04f78a662dc5e132236" translate="yes" xml:space="preserve">
          <source>For detailed semantics of this method, see the documentation on &lt;a href=&quot;trait.bufread#method.read_line&quot;&gt;&lt;code&gt;BufRead::read_line&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このメソッドの詳細なセマンティクスについては、&lt;a href=&quot;trait.bufread#method.read_line&quot;&gt; &lt;code&gt;BufRead::read_line&lt;/code&gt; &lt;/a&gt;に関するドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="4cf690f8462a72a3256098f14214a450a9f6aa92" translate="yes" xml:space="preserve">
          <source>For each field in declaration order in the struct, first determine the size and alignment of the field. If the current offset is not a multiple of the field's alignment, then add padding bytes to the current offset until it is a multiple of the field's alignment. The offset for the field is what the current offset is now. Then increase the current offset by the size of the field.</source>
          <target state="translated">構造体内の宣言順の各フィールドについて、最初にフィールドのサイズとアラインメントを決定します。現在のオフセットがフィールドのアラインメントの倍数でない場合は、フィールドのアラインメントの倍数になるまで現在のオフセットにパディング・バイトを追加します。フィールドのオフセットは、現在のオフセットが現在のオフセットになります。次に、現在のオフセットをフィールドのサイズ分だけ増やします。</target>
        </trans-unit>
        <trans-unit id="72130935b2d001683aa85f003dc696305f2bc73d" translate="yes" xml:space="preserve">
          <source>For each field in the struct ordered by declaration order:</source>
          <target state="translated">構造体の各フィールドについて、宣言順に並べ替えます。</target>
        </trans-unit>
        <trans-unit id="0b3508d4624d79af6901523f5a605066ff78ea42" translate="yes" xml:space="preserve">
          <source>For each instance of &lt;code&gt;BuildHasher&lt;/code&gt;, the &lt;a href=&quot;trait.hasher&quot;&gt;&lt;code&gt;Hasher&lt;/code&gt;&lt;/a&gt;s created by &lt;a href=&quot;#tymethod.build_hasher&quot;&gt;&lt;code&gt;build_hasher&lt;/code&gt;&lt;/a&gt; should be identical. That is, if the same stream of bytes is fed into each hasher, the same output will also be generated.</source>
          <target state="translated">各インスタンスに対して &lt;code&gt;BuildHasher&lt;/code&gt; 、&lt;a href=&quot;trait.hasher&quot;&gt; &lt;code&gt;Hasher&lt;/code&gt; &lt;/a&gt; Sによって作成&lt;a href=&quot;#tymethod.build_hasher&quot;&gt; &lt;code&gt;build_hasher&lt;/code&gt; は&lt;/a&gt;同一であるべきです。つまり、同じバイトストリームが各ハッシャーに供給される場合、同じ出力も生成されます。</target>
        </trans-unit>
        <trans-unit id="840895a2afaae6a7f348dca1ec8fcc81fdac329e" translate="yes" xml:space="preserve">
          <source>For each instance of &lt;code&gt;BuildHasher&lt;/code&gt;, the &lt;a href=&quot;trait.hasher&quot;&gt;&lt;code&gt;Hasher&lt;/code&gt;&lt;/a&gt;s created by &lt;a href=&quot;trait.buildhasher#tymethod.build_hasher&quot;&gt;&lt;code&gt;build_hasher&lt;/code&gt;&lt;/a&gt; should be identical. That is, if the same stream of bytes is fed into each hasher, the same output will also be generated.</source>
          <target state="translated">各インスタンスに対して &lt;code&gt;BuildHasher&lt;/code&gt; 、&lt;a href=&quot;trait.hasher&quot;&gt; &lt;code&gt;Hasher&lt;/code&gt; &lt;/a&gt;Sによって作成&lt;a href=&quot;trait.buildhasher#tymethod.build_hasher&quot;&gt; &lt;code&gt;build_hasher&lt;/code&gt; は&lt;/a&gt;同一であるべきです。つまり、同じバイトストリームが各ハッシャーに供給されると、同じ出力も生成されます。</target>
        </trans-unit>
        <trans-unit id="cc391d5855b94ebf31185098078b770ff17af670" translate="yes" xml:space="preserve">
          <source>For enum variants without any data, like &lt;code&gt;Message::Quit&lt;/code&gt;, we can&amp;rsquo;t destructure the value any further. We can only match on the literal &lt;code&gt;Message::Quit&lt;/code&gt; value, and no variables are in that pattern.</source>
          <target state="translated">&lt;code&gt;Message::Quit&lt;/code&gt; 、データのない列挙型バリアントの場合、これ以上値を分解することはできません。一致できるのはリテラル &lt;code&gt;Message::Quit&lt;/code&gt; 値のみであり、そのパターンに変数はありません。</target>
        </trans-unit>
        <trans-unit id="2444658cffe28e2cc2f850d1658b58b1e1a36719" translate="yes" xml:space="preserve">
          <source>For enums with fields, it is also possible to combine &lt;code&gt;repr(C)&lt;/code&gt; and a primitive representation (e.g., &lt;code&gt;repr(C, u8)&lt;/code&gt;). This modifies the &lt;a href=&quot;#reprc-enums-with-fields&quot;&gt;&lt;code&gt;repr(C)&lt;/code&gt;&lt;/a&gt; by changing the representation of the discriminant enum to the chosen primitive instead. So, if you chose the &lt;code&gt;u8&lt;/code&gt; representation, then the discriminant enum would have a size and alignment of 1 byte.</source>
          <target state="translated">フィールドを持つ列挙型の場合、 &lt;code&gt;repr(C)&lt;/code&gt; とプリミティブ表現（たとえば、 &lt;code&gt;repr(C, u8)&lt;/code&gt; ）を組み合わせることもできます。これは、判別列挙型の表現を選択したプリミティブに変更することにより、&lt;a href=&quot;#reprc-enums-with-fields&quot;&gt; &lt;code&gt;repr(C)&lt;/code&gt; &lt;/a&gt;を変更します。したがって、 &lt;code&gt;u8&lt;/code&gt; 表現を選択した場合、判別列挙型のサイズと配置は1バイトになります。</target>
        </trans-unit>
        <trans-unit id="e01828e4ae2c2ba5ffc6317469f77820dbf8111b" translate="yes" xml:space="preserve">
          <source>For example when polling on a resource, it is common to check that it is available, and if not to yield in order to avoid busy waiting.</source>
          <target state="translated">例えば、リソースをポーリングする際には、リソースが利用可能かどうかを確認し、利用できない場合は待ち時間を避けるために降伏させるのが一般的です。</target>
        </trans-unit>
        <trans-unit id="6db6725e9e7d5c088630e348048d1e73fc7657d3" translate="yes" xml:space="preserve">
          <source>For example,</source>
          <target state="translated">例えば</target>
        </trans-unit>
        <trans-unit id="4cd230a3a552ee68ec4ba47f5a2564073dbae972" translate="yes" xml:space="preserve">
          <source>For example, &lt;a href=&quot;../fs/struct.file&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt; implements &lt;a href=&quot;trait.read&quot;&gt;&lt;code&gt;Read&lt;/code&gt;&lt;/a&gt;, but not &lt;code&gt;BufRead&lt;/code&gt;. &lt;a href=&quot;struct.bufreader&quot;&gt;&lt;code&gt;BufReader&lt;/code&gt;&lt;/a&gt; to the rescue!</source>
          <target state="translated">たとえば、&lt;a href=&quot;../fs/struct.file&quot;&gt; &lt;code&gt;File&lt;/code&gt; &lt;/a&gt;は&lt;a href=&quot;trait.read&quot;&gt; &lt;code&gt;Read&lt;/code&gt; を&lt;/a&gt;実装しますが、 &lt;code&gt;BufRead&lt;/code&gt; は実装しません。&lt;a href=&quot;struct.bufreader&quot;&gt; &lt;code&gt;BufReader&lt;/code&gt; &lt;/a&gt;！</target>
        </trans-unit>
        <trans-unit id="361121404b53f092e2a50ba865c6a4b2bee21aac" translate="yes" xml:space="preserve">
          <source>For example, &lt;a href=&quot;struct.bufreader&quot;&gt;&lt;code&gt;BufReader&lt;/code&gt;&lt;/a&gt; works with the &lt;a href=&quot;trait.bufread&quot;&gt;&lt;code&gt;BufRead&lt;/code&gt;&lt;/a&gt; trait to add extra methods to any reader:</source>
          <target state="translated">たとえば、&lt;a href=&quot;struct.bufreader&quot;&gt; &lt;code&gt;BufReader&lt;/code&gt; &lt;/a&gt;は&lt;a href=&quot;trait.bufread&quot;&gt; &lt;code&gt;BufRead&lt;/code&gt; &lt;/a&gt;トレイトと連携して、リーダーに追加のメソッドを追加します。</target>
        </trans-unit>
        <trans-unit id="6b55b0abb99e67319bb61c01d86a93c08d513103" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;&amp;amp;mut 42&lt;/code&gt; is coerced to have type &lt;code&gt;&amp;amp;i8&lt;/code&gt; in the following:</source>
          <target state="translated">たとえば、 &lt;code&gt;&amp;amp;mut 42&lt;/code&gt; は、次のようにタイプ &lt;code&gt;&amp;amp;i8&lt;/code&gt; を持つように強制されます。</target>
        </trans-unit>
        <trans-unit id="67eaa2d704432ad951e8c12a7692afce83f73e05" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/&lt;/code&gt; on Unix and  on Windows.</source>
          <target state="translated">たとえば、UNIXおよびWindowsでは &lt;code&gt;/&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="5bb29cde4c0e0fc335df372cebebbd7ecb1d0966" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/&lt;/code&gt; on Unix and &lt;code&gt;\&lt;/code&gt; on Windows.</source>
          <target state="translated">たとえば、Unixでは &lt;code&gt;/&lt;/code&gt; 、Windowsでは &lt;code&gt;\&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="fbee0db43e5b9a6c95b5e074429ae3b04c296c30" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;2 + (3 * 4)&lt;/code&gt; is an expression that returns the value 14.</source>
          <target state="translated">たとえば、 &lt;code&gt;2 + (3 * 4)&lt;/code&gt; は値14を返す式です。</target>
        </trans-unit>
        <trans-unit id="ca7ec8e9d4ad8d1018c384f60f3aa9bf305dff15" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;42&lt;/code&gt; is coerced to have type &lt;code&gt;i8&lt;/code&gt; in the following:</source>
          <target state="translated">たとえば、次の場合、 &lt;code&gt;42&lt;/code&gt; は &lt;code&gt;i8&lt;/code&gt; 型に強制変換されます。</target>
        </trans-unit>
        <trans-unit id="5371c62b3b65397d993bded38544b14c041e769c" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;match&lt;/code&gt; is a keyword. If you try to compile the following function that uses &lt;code&gt;match&lt;/code&gt; as its name:</source>
          <target state="translated">たとえば、 &lt;code&gt;match&lt;/code&gt; はキーワードです。名前として &lt;code&gt;match&lt;/code&gt; を使用する次の関数をコンパイルしようとすると、</target>
        </trans-unit>
        <trans-unit id="5e5ca1f4b6c9ffec30148620048c12e2abed5a4e" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;x&lt;/code&gt; is coerced to have type &lt;code&gt;&amp;amp;dyn Display&lt;/code&gt; in the following:</source>
          <target state="translated">たとえば、 &lt;code&gt;x&lt;/code&gt; は、次のようにタイプ &lt;code&gt;&amp;amp;dyn Display&lt;/code&gt; を持つように強制されます。</target>
        </trans-unit>
        <trans-unit id="fce0a6199428243d121ad738edca52d7c9b01aad" translate="yes" xml:space="preserve">
          <source>For example, Listing 17-10 shows what happens if we try to create a &lt;code&gt;Screen&lt;/code&gt; with a &lt;code&gt;String&lt;/code&gt; as a component:</source>
          <target state="translated">たとえば、私たちが作成しようとすると何が起こるか17-10番組リスト &lt;code&gt;Screen&lt;/code&gt; で &lt;code&gt;String&lt;/code&gt; 構成要素として：</target>
        </trans-unit>
        <trans-unit id="7ae1a94372a4d885d5d7e8da154bdfbd122ab503" translate="yes" xml:space="preserve">
          <source>For example, Listing 9-6 shows a function that reads a username from a file. If the file doesn&amp;rsquo;t exist or can&amp;rsquo;t be read, this function will return those errors to the code that called this function.</source>
          <target state="translated">たとえば、リスト9-6はファイルからユーザー名を読み取る関数を示しています。ファイルが存在しないか、読み取ることができない場合、この関数はこれらのエラーを、この関数を呼び出したコードに返します。</target>
        </trans-unit>
        <trans-unit id="ef753a93b41984ab0e06400f8bb2fb5a5a2abf4c" translate="yes" xml:space="preserve">
          <source>For example, a function like:</source>
          <target state="translated">例えば</target>
        </trans-unit>
        <trans-unit id="3f4165e8867ad36b5f552b0f32d954c181e56a0b" translate="yes" xml:space="preserve">
          <source>For example, a function that reads a file into a string will error with &lt;code&gt;InvalidData&lt;/code&gt; if the file's contents are not valid UTF-8.</source>
          <target state="translated">たとえば、ファイルの内容が有効なUTF-8でない場合、ファイルを文字列に読み込む関数は &lt;code&gt;InvalidData&lt;/code&gt; でエラーになります。</target>
        </trans-unit>
        <trans-unit id="8e2494ae56a52ee6df403aa3b61355ff286423ad" translate="yes" xml:space="preserve">
          <source>For example, a logging library could use the standard formatting syntax, but it would internally pass around this structure until it has been determined where output should go to.</source>
          <target state="translated">例えば、ロギングライブラリは標準の書式設定構文を使用することができますが、出力先が決まるまでは内部的にこの構造体の周りを通過します。</target>
        </trans-unit>
        <trans-unit id="5e2c5e436747dc3d24355943f34ee57e52844d68" translate="yes" xml:space="preserve">
          <source>For example, a vector with capacity 10 and length 0 would be an empty vector with space for 10 more elements. Pushing 10 or fewer elements onto the vector will not change its capacity or cause reallocation to occur. However, if the vector's length is increased to 11, it will have to reallocate, which can be slow. For this reason, it is recommended to use &lt;a href=&quot;struct.vec#method.with_capacity&quot;&gt;&lt;code&gt;Vec::with_capacity&lt;/code&gt;&lt;/a&gt; whenever possible to specify how big the vector is expected to get.</source>
          <target state="translated">たとえば、容量が10で長さが0のベクトルは、さらに10要素分のスペースを持つ空のベクトルになります。10個以下の要素をベクターにプッシュしても、その容量は変更されず、再割り当ても発生しません。ただし、ベクターの長さが11に増えると、再割り当てが必要になり、遅くなる可能性があります。このため、可能な限りベクトルの取得が予想される大きさを指定するために、可能な限り&lt;a href=&quot;struct.vec#method.with_capacity&quot;&gt; &lt;code&gt;Vec::with_capacity&lt;/code&gt; &lt;/a&gt;を使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="15c054116144a3608c09f73dba885ef5e0021d4e" translate="yes" xml:space="preserve">
          <source>For example, both &lt;code&gt;'a'&lt;/code&gt; and &lt;code&gt;&quot;aa&quot;&lt;/code&gt; are patterns that would match at index &lt;code&gt;1&lt;/code&gt; in the string &lt;code&gt;&quot;baaaab&quot;&lt;/code&gt;.</source>
          <target state="translated">例えば、両方 &lt;code&gt;'a'&lt;/code&gt; 及び &lt;code&gt;&quot;aa&quot;&lt;/code&gt; インデックスにマッチするパターンで &lt;code&gt;1&lt;/code&gt; 列に &lt;code&gt;&quot;baaaab&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="bdda7fdae278a2fce4f5c887aa83a373c5a696fb" translate="yes" xml:space="preserve">
          <source>For example, calling &lt;code&gt;Pin::new_unchecked&lt;/code&gt; on an &lt;code&gt;&amp;amp;'a mut T&lt;/code&gt; is unsafe because while you are able to pin it for the given lifetime &lt;code&gt;'a&lt;/code&gt;, you have no control over whether it is kept pinned once &lt;code&gt;'a&lt;/code&gt; ends:</source>
          <target state="translated">たとえば、 &lt;code&gt;&amp;amp;'a mut T&lt;/code&gt; &lt;code&gt;Pin::new_unchecked&lt;/code&gt; を呼び出すのは安全ではありません。これは、指定されたライフタイム &lt;code&gt;'a&lt;/code&gt; は固定することができますが、 &lt;code&gt;'a&lt;/code&gt; が終了すると固定され続けるかどうかを制御できないためです。</target>
        </trans-unit>
        <trans-unit id="bfbfcca5281911965a5b0e44815f304c140950c7" translate="yes" xml:space="preserve">
          <source>For example, consider the case of a simple web server, which can be simplified to:</source>
          <target state="translated">例えば、単純なWebサーバーの場合を考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="77381e13d866eca11479a03b8f4821b0157f9d3e" translate="yes" xml:space="preserve">
          <source>For example, dataflow uses this to inject static assertions so that &lt;code&gt;rustc_peek(potentially_uninitialized)&lt;/code&gt; would actually double-check that dataflow did indeed compute that it is uninitialized at that point in the control flow.</source>
          <target state="translated">たとえば、データフローはこれを使用して静的アサーションを挿入するため、 &lt;code&gt;rustc_peek(potentially_uninitialized)&lt;/code&gt; は、データフローが実際に制御フローのその時点で初期化されていないことを実際に計算したことを再確認します。</target>
        </trans-unit>
        <trans-unit id="95fe2e68803fedf130f77f394bc5d434187ebbd8" translate="yes" xml:space="preserve">
          <source>For example, given a trait &lt;code&gt;Trait&lt;/code&gt;, the following are all trait objects:</source>
          <target state="translated">たとえば、 &lt;code&gt;Trait&lt;/code&gt; 指定された場合、以下はすべてトレイトオブジェクトです。</target>
        </trans-unit>
        <trans-unit id="072c7bf2984ac36fc73c1e383853c5c169bc7a47" translate="yes" xml:space="preserve">
          <source>For example, if for some reason we wanted to take the values produced by an instance of &lt;code&gt;Counter&lt;/code&gt;, pair them with values produced by another &lt;code&gt;Counter&lt;/code&gt; instance after skipping the first value, multiply each pair together, keep only those results that are divisible by 3, and add all the resulting values together, we could do so, as shown in the test in Listing 13-23:</source>
          <target state="translated">たとえば、なんらかの理由で &lt;code&gt;Counter&lt;/code&gt; のインスタンスによって生成された値を取得したい場合は、最初の値をスキップした後で、それらを別の &lt;code&gt;Counter&lt;/code&gt; インスタンスによって生成された値とペアにし、各ペアを掛け合わせ、3で割り切れる結果のみを保持します。リスト13-23のテストに示すように、結果の値をすべて一緒に追加します。</target>
        </trans-unit>
        <trans-unit id="d1649808c8d99c391bdbb77f15f15e2efe15c030" translate="yes" xml:space="preserve">
          <source>For example, if we want to add documentation that describes the purpose of the &lt;code&gt;my_crate&lt;/code&gt; crate that contains the &lt;code&gt;add_one&lt;/code&gt; function, we can add documentation comments that start with &lt;code&gt;//!&lt;/code&gt; to the beginning of the &lt;em&gt;src/lib.rs&lt;/em&gt; file, as shown in Listing 14-2:</source>
          <target state="translated">たとえば、 &lt;code&gt;add_one&lt;/code&gt; 関数を含む &lt;code&gt;my_crate&lt;/code&gt; クレートの目的を説明するドキュメントを追加する場合、 &lt;code&gt;//!&lt;/code&gt; で始まるドキュメントコメントを追加できます。&lt;em&gt;コード&lt;/em&gt;リスト14-2に示すように、&lt;em&gt;src / lib.rs&lt;/em&gt;ファイルの先頭に&lt;em&gt;追加し&lt;/em&gt;ます。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="018dcc20bfe547cf343634d4cd949c5d217b88cd" translate="yes" xml:space="preserve">
          <source>For example, if you want to make sure that a specific field is dropped after the others, make it the last field of a struct:</source>
          <target state="translated">例えば、特定のフィールドが他のフィールドよりも後に落とされるようにしたい場合は、そのフィールドを構造体の最後のフィールドにします。</target>
        </trans-unit>
        <trans-unit id="ed038364c42a5f7e182a80d72dbd7c44cb810818" translate="yes" xml:space="preserve">
          <source>For example, if you wanted to get a &lt;code&gt;Pin&lt;/code&gt; of a field of something, you could use this to get access to that field in one line of code. However, there are several gotchas with these &quot;pinning projections&quot;; see the &lt;a href=&quot;index#projections-and-structural-pinning&quot;&gt;&lt;code&gt;pin&lt;/code&gt; module&lt;/a&gt; documentation for further details on that topic.</source>
          <target state="translated">たとえば、何かのフィールドの &lt;code&gt;Pin&lt;/code&gt; を取得したい場合、これを使用して、コードの1行でそのフィールドにアクセスできます。ただし、これらの「固定投影」にはいくつかの落とし穴があります。そのトピックの詳細については、&lt;a href=&quot;index#projections-and-structural-pinning&quot;&gt; &lt;code&gt;pin&lt;/code&gt; モジュールの&lt;/a&gt;ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="571bf6c61d49ae11d24afcb576448263d3d5f7ca" translate="yes" xml:space="preserve">
          <source>For example, in Chapter 12 we mentioned that there&amp;rsquo;s a Rust implementation of the &lt;code&gt;grep&lt;/code&gt; tool called &lt;code&gt;ripgrep&lt;/code&gt; for searching files. If we want to install &lt;code&gt;ripgrep&lt;/code&gt;, we can run the following:</source>
          <target state="translated">たとえば、第12章では、ファイルを検索するための &lt;code&gt;ripgrep&lt;/code&gt; と呼ばれる &lt;code&gt;grep&lt;/code&gt; ツールのRust実装があることを説明しました。 &lt;code&gt;ripgrep&lt;/code&gt; をインストールする場合は、次のコマンドを実行できます。</target>
        </trans-unit>
        <trans-unit id="7823fda3f1a738b0793d510efb6630e193e80753" translate="yes" xml:space="preserve">
          <source>For example, in Listing 10-13, we implemented the &lt;code&gt;Summary&lt;/code&gt; trait on the &lt;code&gt;NewsArticle&lt;/code&gt; and &lt;code&gt;Tweet&lt;/code&gt; types. We can define a &lt;code&gt;notify&lt;/code&gt; function that calls the &lt;code&gt;summarize&lt;/code&gt; method on its &lt;code&gt;item&lt;/code&gt; parameter, which is of some type that implements the &lt;code&gt;Summary&lt;/code&gt; trait. To do this, we can use the &lt;code&gt;impl Trait&lt;/code&gt; syntax, like this:</source>
          <target state="translated">たとえば、リスト10-13では、 &lt;code&gt;NewsArticle&lt;/code&gt; および &lt;code&gt;Tweet&lt;/code&gt; タイプに &lt;code&gt;Summary&lt;/code&gt; トレイトを実装しました。 &lt;code&gt;item&lt;/code&gt; パラメータの &lt;code&gt;summarize&lt;/code&gt; メソッドを呼び出す &lt;code&gt;notify&lt;/code&gt; 関数を定義できます。これは、 &lt;code&gt;Summary&lt;/code&gt; トレイトを実装するあるタイプのものです。これを行うには、次のような &lt;code&gt;impl Trait&lt;/code&gt; 構文を使用できます。</target>
        </trans-unit>
        <trans-unit id="486ea7dfb7b30caa97edaa5c45c8d899d49328bd" translate="yes" xml:space="preserve">
          <source>For example, in the below example, since the enum is marked as &lt;code&gt;non_exhaustive&lt;/code&gt;, it is required that downstream crates match non-exhaustively on it.</source>
          <target state="translated">たとえば、次の例では、enumが &lt;code&gt;non_exhaustive&lt;/code&gt; としてマークされているため、下流のクレートが非網羅的に一致する必要があります。</target>
        </trans-unit>
        <trans-unit id="ef1242010b70221ef0947673271efa44f22329d9" translate="yes" xml:space="preserve">
          <source>For example, in the code in Listing 3-4, if you changed the definition of the &lt;code&gt;a&lt;/code&gt; array to have four elements but forgot to update the condition to &lt;code&gt;while index &amp;lt; 4&lt;/code&gt;, the code would panic. Using the &lt;code&gt;for&lt;/code&gt; loop, you wouldn&amp;rsquo;t need to remember to change any other code if you changed the number of values in the array.</source>
          <target state="translated">たとえば、リスト3-4のコードで &lt;code&gt;a&lt;/code&gt; 配列の定義を4つの要素を持つように変更したが、 &lt;code&gt;while index &amp;lt; 4&lt;/code&gt; ときに条件を更新するのを忘れた場合、コードはパニックになります。 &lt;code&gt;for&lt;/code&gt; ループを使用すると、配列内の値の数を変更した場合に、他のコードを変更することを覚えておく必要はありません。</target>
        </trans-unit>
        <trans-unit id="7ef6c4c588de41928f2df858cbeb2e205bc6fd49" translate="yes" xml:space="preserve">
          <source>For example, in the code in Listing 3-4, if you removed an item from the &lt;code&gt;a&lt;/code&gt; array but forgot to update the condition to &lt;code&gt;while index &amp;lt; 4&lt;/code&gt;, the code would panic. Using the &lt;code&gt;for&lt;/code&gt; loop, you wouldn&amp;rsquo;t need to remember to change any other code if you changed the number of values in the array.</source>
          <target state="translated">たとえば、コードリスト3-4のコードで &lt;code&gt;a&lt;/code&gt; 配列から項目を削除したが、条件を &lt;code&gt;while index &amp;lt; 4&lt;/code&gt; に更新するのを忘れた場合、コードはパニックになります。 &lt;code&gt;for&lt;/code&gt; ループを使用すると、配列内の値の数を変更した場合、他のコードを変更することを覚えておく必要はありません。</target>
        </trans-unit>
        <trans-unit id="e1af9e58057bb08d42a00f959d4a9482b5211903" translate="yes" xml:space="preserve">
          <source>For example, in the following code:</source>
          <target state="translated">例えば、以下のコードでは</target>
        </trans-unit>
        <trans-unit id="fa8a840ae5de7e7d26ee293da2703a78a823f744" translate="yes" xml:space="preserve">
          <source>For example, let&amp;rsquo;s change &lt;em&gt;src/main.rs&lt;/em&gt; to the following:</source>
          <target state="translated">たとえば、&lt;em&gt;src / main.rs&lt;/em&gt;を次のように変更してみましょう。</target>
        </trans-unit>
        <trans-unit id="bb34889b7e2a2e1630ad6fd19ca5c05805b4edf0" translate="yes" xml:space="preserve">
          <source>For example, let&amp;rsquo;s say we have a function that greets people by name and we want to test that the name we pass into the function appears in the output:</source>
          <target state="translated">たとえば、名前で挨拶する関数があり、関数に渡した名前が出力に表示されることをテストするとします。</target>
        </trans-unit>
        <trans-unit id="df2b03fc7d0094e8a94e4730123f2cb77700187c" translate="yes" xml:space="preserve">
          <source>For example, let&amp;rsquo;s say we have multiple structs that hold various kinds and amounts of text: a &lt;code&gt;NewsArticle&lt;/code&gt; struct that holds a news story filed in a particular location and a &lt;code&gt;Tweet&lt;/code&gt; that can have at most 280 characters along with metadata that indicates whether it was a new tweet, a retweet, or a reply to another tweet.</source>
          <target state="translated">たとえば、さまざまな種類と量のテキストを保持する複数の構造体があるとします。特定の場所に提出されたニュースストーリーを保持する &lt;code&gt;NewsArticle&lt;/code&gt; 構造体と、最大280文字の &lt;code&gt;Tweet&lt;/code&gt; と、それが新しいツイート、リツイート、または別のツイートへの返信。</target>
        </trans-unit>
        <trans-unit id="5beb741830fde205d90a1dcb79133d20364520e1" translate="yes" xml:space="preserve">
          <source>For example, let&amp;rsquo;s say we want to make an &lt;code&gt;OutlinePrint&lt;/code&gt; trait with an &lt;code&gt;outline_print&lt;/code&gt; method that will print a value framed in asterisks. That is, given a &lt;code&gt;Point&lt;/code&gt; struct that implements &lt;code&gt;Display&lt;/code&gt; to result in &lt;code&gt;(x, y)&lt;/code&gt;, when we call &lt;code&gt;outline_print&lt;/code&gt; on a &lt;code&gt;Point&lt;/code&gt; instance that has &lt;code&gt;1&lt;/code&gt; for &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;3&lt;/code&gt; for &lt;code&gt;y&lt;/code&gt;, it should print the following:</source>
          <target state="translated">たとえば、アスタリスクで囲まれた値を出力する &lt;code&gt;outline_print&lt;/code&gt; メソッドを使用して、 &lt;code&gt;OutlinePrint&lt;/code&gt; トレイトを作成するとします。すなわち、与えられた &lt;code&gt;Point&lt;/code&gt; 実装は、その構造体 &lt;code&gt;Display&lt;/code&gt; をもたらすように &lt;code&gt;(x, y)&lt;/code&gt; 我々が呼ぶとき、 &lt;code&gt;outline_print&lt;/code&gt; に &lt;code&gt;Point&lt;/code&gt; 有するインスタンス &lt;code&gt;1&lt;/code&gt; のため &lt;code&gt;x&lt;/code&gt; および &lt;code&gt;3&lt;/code&gt; のために &lt;code&gt;y&lt;/code&gt; 、それが以下を印刷する必要があります。</target>
        </trans-unit>
        <trans-unit id="67eefc842f1334a9710cea463d2936fc943cb35a" translate="yes" xml:space="preserve">
          <source>For example, let&amp;rsquo;s start from the code in Listing 7-17 and move the &lt;code&gt;front_of_house&lt;/code&gt; module to its own file &lt;em&gt;src/front_of_house.rs&lt;/em&gt; by changing the crate root file so it contains the code shown in Listing 7-21. In this case, the crate root file is &lt;em&gt;src/lib.rs&lt;/em&gt;, but this procedure also works with binary crates whose crate root file is &lt;em&gt;src/main.rs&lt;/em&gt;.</source>
          <target state="translated">たとえば、リスト7-17のコードから始めて、リスト7-21に示すコードが含まれるようにクレートルートファイルを変更して、 &lt;code&gt;front_of_house&lt;/code&gt; モジュールを独自のファイル&lt;em&gt;src / front_of_house.rsに移動&lt;/em&gt;します。この場合、クレート・ルート・ファイルがある&lt;em&gt;のsrc / lib.rs&lt;/em&gt;が、この手順はまた、そのクレートルートファイルであるバイナリ木箱と連携&lt;em&gt;のsrc / main.rs&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="79ba89b628a47ae9fac2bb7b0ff7554c4c375147" translate="yes" xml:space="preserve">
          <source>For example, reading line-by-line is inefficient without using a buffer, so if you want to read by line, you'll need &lt;code&gt;BufRead&lt;/code&gt;, which includes a &lt;a href=&quot;#method.read_line&quot;&gt;&lt;code&gt;read_line&lt;/code&gt;&lt;/a&gt; method as well as a &lt;a href=&quot;#method.lines&quot;&gt;&lt;code&gt;lines&lt;/code&gt;&lt;/a&gt; iterator.</source>
          <target state="translated">たとえば、バッファを使用しない場合、1 &lt;a href=&quot;#method.lines&quot;&gt; &lt;code&gt;lines&lt;/code&gt; &lt;/a&gt;&lt;a href=&quot;#method.read_line&quot;&gt; &lt;code&gt;read_line&lt;/code&gt; &lt;/a&gt;読み取るのは効率が悪いため、1 行ずつ読み取る場合は、read_lineメソッドと行反復子を含む &lt;code&gt;BufRead&lt;/code&gt; が必要になります。</target>
        </trans-unit>
        <trans-unit id="7ee5d959d1301ac8a3ca0cb560c0412e0eaf4ece" translate="yes" xml:space="preserve">
          <source>For example, reading line-by-line is inefficient without using a buffer, so if you want to read by line, you'll need &lt;code&gt;BufRead&lt;/code&gt;, which includes a &lt;a href=&quot;trait.bufread#method.read_line&quot;&gt;&lt;code&gt;read_line&lt;/code&gt;&lt;/a&gt; method as well as a &lt;a href=&quot;trait.bufread#method.lines&quot;&gt;&lt;code&gt;lines&lt;/code&gt;&lt;/a&gt; iterator.</source>
          <target state="translated">たとえば、バッファを使用しないと行&lt;a href=&quot;trait.bufread#method.read_line&quot;&gt; &lt;code&gt;read_line&lt;/code&gt; &lt;/a&gt;読み取りは非効率的であるため、行ごとに読み取る場合は、read_lineメソッドと&lt;a href=&quot;trait.bufread#method.lines&quot;&gt; &lt;code&gt;lines&lt;/code&gt; &lt;/a&gt;イテレータを含む &lt;code&gt;BufRead&lt;/code&gt; が必要になります。</target>
        </trans-unit>
        <trans-unit id="5d283913d102f25021490de7addfaf1023c5a559" translate="yes" xml:space="preserve">
          <source>For example, recall the cons list example in Listing 15-18 where we used &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; to allow multiple lists to share ownership of another list. Because &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; holds only immutable values, we can&amp;rsquo;t change any of the values in the list once we&amp;rsquo;ve created them. Let&amp;rsquo;s add in &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; to gain the ability to change the values in the lists. Listing 15-24 shows that by using a &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; in the &lt;code&gt;Cons&lt;/code&gt; definition, we can modify the value stored in all the lists:</source>
          <target state="translated">たとえば、 &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; を使用して複数のリストが別のリストの所有権を共有できるようにするリスト15-18のconsリストの例を思い出してください。 &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; は不変の値のみを保持するため、一度作成したリストの値を変更することはできません。 &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; を追加して、リストの値を変更できるようにします。リスト15-24は、 &lt;code&gt;Cons&lt;/code&gt; 定義で &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; を使用することにより、すべてのリストに保存されている値を変更できることを示しています：</target>
        </trans-unit>
        <trans-unit id="55a0a06bf1a6582afc9c911dda23940db684b038" translate="yes" xml:space="preserve">
          <source>For example, say each of your tests runs some code that creates a file on disk named &lt;em&gt;test-output.txt&lt;/em&gt; and writes some data to that file. Then each test reads the data in that file and asserts that the file contains a particular value, which is different in each test. Because the tests run at the same time, one test might overwrite the file between when another test writes and reads the file. The second test will then fail, not because the code is incorrect but because the tests have interfered with each other while running in parallel. One solution is to make sure each test writes to a different file; another solution is to run the tests one at a time.</source>
          <target state="translated">たとえば、各テストでディスク上に&lt;em&gt;test-output.txt&lt;/em&gt;という名前のファイルを作成し、そのファイルにデータを書き込むコードを実行するとします。次に、各テストはそのファイルのデータを読み取り、ファイルに各テストで異なる特定の値が含まれていることをアサートします。テストは同時に実行されるため、別のテストがファイルの書き込みと読み取りを行うまでの間に、1つのテストがファイルを上書きする可能性があります。 2番目のテストは失敗します。これは、コードが正しくないためではなく、テストが並行して実行されているときに互いに干渉しているためです。 1つの解決策は、各テストが異なるファイルに書き込むことを確認することです。別の解決策は、一度に1つずつテストを実行することです。</target>
        </trans-unit>
        <trans-unit id="4814345fbf007312eaa1283d22f4721e9e65da7f" translate="yes" xml:space="preserve">
          <source>For example, say we had two functions: one that finds the largest item in a slice of &lt;code&gt;i32&lt;/code&gt; values and one that finds the largest item in a slice of &lt;code&gt;char&lt;/code&gt; values. How would we eliminate that duplication? Let&amp;rsquo;s find out!</source>
          <target state="translated">たとえば、2つの関数があるとします。1つは &lt;code&gt;i32&lt;/code&gt; 値のスライスで最大の項目を検索し、もう1つは &lt;code&gt;char&lt;/code&gt; 値のスライスで最大の項目を検索します。どうすればその重複を排除できますか？確認してみましょう！</target>
        </trans-unit>
        <trans-unit id="4cba319e8cf72cafc05de924ba069b585b2c709d" translate="yes" xml:space="preserve">
          <source>For example, say we made a library named &lt;code&gt;art&lt;/code&gt; for modeling artistic concepts. Within this library are two modules: a &lt;code&gt;kinds&lt;/code&gt; module containing two enums named &lt;code&gt;PrimaryColor&lt;/code&gt; and &lt;code&gt;SecondaryColor&lt;/code&gt; and a &lt;code&gt;utils&lt;/code&gt; module containing a function named &lt;code&gt;mix&lt;/code&gt;, as shown in Listing 14-3:</source>
          <target state="translated">たとえば、芸術の概念をモデル化するために &lt;code&gt;art&lt;/code&gt; という名前のライブラリを作成したとします。このライブラリー内の2つのモジュールがある： &lt;code&gt;kinds&lt;/code&gt; という2つの列挙含むモジュール &lt;code&gt;PrimaryColor&lt;/code&gt; と &lt;code&gt;SecondaryColor&lt;/code&gt; をし、 &lt;code&gt;utils&lt;/code&gt; のは、機能名前含むモジュール &lt;code&gt;mix&lt;/code&gt; 表14-3に示すように、。</target>
        </trans-unit>
        <trans-unit id="6034956f55199745f53b082e0813b66b3ccd59d0" translate="yes" xml:space="preserve">
          <source>For example, say we want to get values from a row in a spreadsheet in which some of the columns in the row contain integers, some floating-point numbers, and some strings. We can define an enum whose variants will hold the different value types, and then all the enum variants will be considered the same type: that of the enum. Then we can create a vector that holds that enum and so, ultimately, holds different types. We&amp;rsquo;ve demonstrated this in Listing 8-10.</source>
          <target state="translated">たとえば、行の一部の列に整数、一部の浮動小数点数、および一部の文字列が含まれているスプレッドシートの行から値を取得するとします。バリアントが異なる値の型を保持する列挙型を定義すると、すべての列挙型バリアントは同じ型、つまり列挙型と見なされます。次に、その列挙型を保持し、最終的には異なる型を保持するベクトルを作成できます。リスト8-10でこれを示しました。</target>
        </trans-unit>
        <trans-unit id="fa13929a3b270eef2878bd884ac068ec70c4ce69" translate="yes" xml:space="preserve">
          <source>For example, say you write a program that uses an approximation of a mathematical constant, such as pi, as this program does:</source>
          <target state="translated">例えば、このプログラムのようにπなどの数学定数の近似を使うプログラムを書いたとします。</target>
        </trans-unit>
        <trans-unit id="6a1d451b5816383f70b638071c7a253213366d2b" translate="yes" xml:space="preserve">
          <source>For example, the &lt;a href=&quot;trait.tryfrom&quot;&gt;&lt;code&gt;TryFrom&lt;/code&gt;&lt;/a&gt; trait (conversion that returns a &lt;a href=&quot;../result/enum.result&quot;&gt;&lt;code&gt;Result&lt;/code&gt;&lt;/a&gt;) has a blanket implementation for all types where a reverse &lt;a href=&quot;trait.into&quot;&gt;&lt;code&gt;Into&lt;/code&gt;&lt;/a&gt; implementation exists.</source>
          <target state="translated">たとえば、&lt;a href=&quot;trait.tryfrom&quot;&gt; &lt;code&gt;TryFrom&lt;/code&gt; &lt;/a&gt;トレイト（&lt;a href=&quot;../result/enum.result&quot;&gt; &lt;code&gt;Result&lt;/code&gt; &lt;/a&gt;を返す変換）には、Reverse &lt;a href=&quot;trait.into&quot;&gt; &lt;code&gt;Into&lt;/code&gt; &lt;/a&gt;実装が存在するすべてのタイプの包括的な実装があります。</target>
        </trans-unit>
        <trans-unit id="151702debd099e963ea8f32f250d147e3f891b7b" translate="yes" xml:space="preserve">
          <source>For example, the &lt;code&gt;Foo&lt;/code&gt; struct below has no type parameters, but is supplied with two in the definition of &lt;code&gt;Bar&lt;/code&gt;:</source>
          <target state="translated">たとえば、以下の &lt;code&gt;Foo&lt;/code&gt; 構造体には型パラメーターがありませんが、 &lt;code&gt;Bar&lt;/code&gt; の定義では2つが提供されます。</target>
        </trans-unit>
        <trans-unit id="55ee334160f14fc8439e8031cfca7e75b754c140" translate="yes" xml:space="preserve">
          <source>For example, the &lt;code&gt;Foo&lt;/code&gt; struct below is defined to be generic in &lt;code&gt;T&lt;/code&gt;, but the type parameter is missing in the definition of &lt;code&gt;Bar&lt;/code&gt;:</source>
          <target state="translated">たとえば、以下の &lt;code&gt;Foo&lt;/code&gt; 構造体は &lt;code&gt;T&lt;/code&gt; でジェネリックになるように定義されていますが、タイプパラメータは &lt;code&gt;Bar&lt;/code&gt; の定義にありません。</target>
        </trans-unit>
        <trans-unit id="c5ce73524ef8f36dbf496c73993c1de5644cb594" translate="yes" xml:space="preserve">
          <source>For example, the &lt;code&gt;Foo&lt;/code&gt; trait has a method &lt;code&gt;foo&lt;/code&gt; with a type parameter &lt;code&gt;T&lt;/code&gt;, but the implementation of &lt;code&gt;foo&lt;/code&gt; for the type &lt;code&gt;Bar&lt;/code&gt; is missing this parameter. To fix this error, they must have the same type parameters:</source>
          <target state="translated">たとえば、 &lt;code&gt;Foo&lt;/code&gt; トレイトにはタイプパラメータ &lt;code&gt;T&lt;/code&gt; のメソッド &lt;code&gt;foo&lt;/code&gt; がありますが、タイプ &lt;code&gt;Bar&lt;/code&gt; の &lt;code&gt;foo&lt;/code&gt; の実装にはこのパラメータがありません。このエラーを修正するには、同じ型パラメーターが必要です。</target>
        </trans-unit>
        <trans-unit id="7f472151ef9c4c8e584f48b10f04fca2193dee33" translate="yes" xml:space="preserve">
          <source>For example, the &lt;code&gt;Foo&lt;/code&gt; trait has a method &lt;code&gt;foo&lt;/code&gt; with two function parameters (&lt;code&gt;&amp;amp;self&lt;/code&gt; and &lt;code&gt;u8&lt;/code&gt;), but the implementation of &lt;code&gt;foo&lt;/code&gt; for the type &lt;code&gt;Bar&lt;/code&gt; omits the &lt;code&gt;u8&lt;/code&gt; parameter. To fix this error, they must have the same parameters:</source>
          <target state="translated">たとえば、 &lt;code&gt;Foo&lt;/code&gt; トレイトには2つの関数パラメーター（ &lt;code&gt;&amp;amp;self&lt;/code&gt; と &lt;code&gt;u8&lt;/code&gt; ）を持つメソッド &lt;code&gt;foo&lt;/code&gt; がありますが、タイプ &lt;code&gt;Bar&lt;/code&gt; の &lt;code&gt;foo&lt;/code&gt; の実装では、 &lt;code&gt;u8&lt;/code&gt; パラメーターが省略されています。このエラーを修正するには、同じパラメーターが必要です。</target>
        </trans-unit>
        <trans-unit id="28582c1af9d66b47d8b372c20e239e80fd1b954e" translate="yes" xml:space="preserve">
          <source>For example, the code above can be fixed to:</source>
          <target state="translated">例えば、上記のコードを固定することができます。</target>
        </trans-unit>
        <trans-unit id="d4ec33ffd8a400e8731c3959c2108ca0e6ee81ff" translate="yes" xml:space="preserve">
          <source>For example, the following &lt;a href=&quot;../macro.format&quot;&gt;&lt;code&gt;format!&lt;/code&gt;&lt;/a&gt; expressions all use named argument:</source>
          <target state="translated">たとえば、次の&lt;a href=&quot;../macro.format&quot;&gt; &lt;code&gt;format!&lt;/code&gt; &lt;/a&gt;式はすべて名前付き引数を使用します。</target>
        </trans-unit>
        <trans-unit id="00c40dd32be2ecfc7a31834a5b9e57d6d91eabce" translate="yes" xml:space="preserve">
          <source>For example, the following &lt;code&gt;match&lt;/code&gt; block has too many arms:</source>
          <target state="translated">たとえば、次の &lt;code&gt;match&lt;/code&gt; ブロックのアームが多すぎます。</target>
        </trans-unit>
        <trans-unit id="ccff2a62302aec83d3032aa28ffe87629cd5d301" translate="yes" xml:space="preserve">
          <source>For example, the following calls all print the same thing &lt;code&gt;Hello x is 0.01000&lt;/code&gt;:</source>
          <target state="translated">たとえば、次の呼び出しはすべて同じものを出力します &lt;code&gt;Hello x is 0.01000&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="f8410f740d252ba94b087c65dca435d74ad4c130" translate="yes" xml:space="preserve">
          <source>For example, the following code defines an inert &lt;code&gt;some_inert_attribute&lt;/code&gt; attribute that is not formally defined anywhere and the &lt;code&gt;some_proc_macro_attribute&lt;/code&gt; procedural macro is responsible for detecting its presence and removing it from the output token stream.</source>
          <target state="translated">たとえば、次のコードは、正式にはどこにも定義されていない不活性な &lt;code&gt;some_inert_attribute&lt;/code&gt; 属性を定義し、 &lt;code&gt;some_proc_macro_attribute&lt;/code&gt; 手続き型マクロはその存在を検出して出力トークンストリームから削除します。</target>
        </trans-unit>
        <trans-unit id="aea53cb95724623abd128d3eeb0328ecf14aacb1" translate="yes" xml:space="preserve">
          <source>For example, the following code will always print &lt;code&gt;1.5&lt;/code&gt; even if the system locale uses a decimal separator other than a dot.</source>
          <target state="translated">たとえば、次のコードは、システムロケールでドット以外の小数点記号が使用されている場合でも、常に &lt;code&gt;1.5&lt;/code&gt; を出力します。</target>
        </trans-unit>
        <trans-unit id="885017323eb28c594e76743a2b0d28eacb31ef45" translate="yes" xml:space="preserve">
          <source>For example, the following defines the type &lt;code&gt;Point&lt;/code&gt; as a synonym for the type &lt;code&gt;(u8, u8)&lt;/code&gt;, the type of pairs of unsigned 8 bit integers:</source>
          <target state="translated">たとえば、次の例では、タイプ &lt;code&gt;Point&lt;/code&gt; をタイプ &lt;code&gt;(u8, u8)&lt;/code&gt; 同義語として定義しています。これは、符号なし8ビット整数のペアのタイプです。</target>
        </trans-unit>
        <trans-unit id="7cf92604c65fd608b9bab83d5d85641029aff675" translate="yes" xml:space="preserve">
          <source>For example, the following derive macro defines a helper attribute &lt;code&gt;helper&lt;/code&gt;, but ultimately doesn't do anything with it.</source>
          <target state="translated">たとえば、次の派生マクロはヘルパー属性 &lt;code&gt;helper&lt;/code&gt; を定義しますが、最終的には何もしません。</target>
        </trans-unit>
        <trans-unit id="b4bc188ed3ec55a280f2bbbfb77e3725b58a7535" translate="yes" xml:space="preserve">
          <source>For example, the following macro definition ignores its input and outputs a function &lt;code&gt;answer&lt;/code&gt; into its scope.</source>
          <target state="translated">たとえば、次のマクロ定義は入力を無視し、関数の &lt;code&gt;answer&lt;/code&gt; をスコープに出力します。</target>
        </trans-unit>
        <trans-unit id="57464fd8804b2cf7021000e159e4c26bf42d7d2e" translate="yes" xml:space="preserve">
          <source>For example, the following will create an &lt;a href=&quot;../items/implementations&quot;&gt;&lt;code&gt;impl&lt;/code&gt; item&lt;/a&gt; for the &lt;a href=&quot;../../std/cmp/trait.partialeq&quot;&gt;&lt;code&gt;PartialEq&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../std/clone/trait.clone&quot;&gt;&lt;code&gt;Clone&lt;/code&gt;&lt;/a&gt; traits for &lt;code&gt;Foo&lt;/code&gt;, and the type parameter &lt;code&gt;T&lt;/code&gt; will be given the &lt;code&gt;PartialEq&lt;/code&gt; or &lt;code&gt;Clone&lt;/code&gt; constraints for the appropriate &lt;code&gt;impl&lt;/code&gt;:</source>
          <target state="translated">例えば、次のように作成され&lt;a href=&quot;../items/implementations&quot;&gt; &lt;code&gt;impl&lt;/code&gt; アイテムを&lt;/a&gt;するため&lt;a href=&quot;../../std/cmp/trait.partialeq&quot;&gt; &lt;code&gt;PartialEq&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;../../std/clone/trait.clone&quot;&gt; &lt;code&gt;Clone&lt;/code&gt; &lt;/a&gt;のための形質 &lt;code&gt;Foo&lt;/code&gt; 、パラメータタイプ &lt;code&gt;T&lt;/code&gt; が与えられる &lt;code&gt;PartialEq&lt;/code&gt; または &lt;code&gt;Clone&lt;/code&gt; 適切なの制約を &lt;code&gt;impl&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="54f0cc8d17f1c6f2f1e67596b770e99d8f237e11" translate="yes" xml:space="preserve">
          <source>For example, the function above behaves as if it was written as:</source>
          <target state="translated">例えば、上の関数は次のように書かれているかのように動作します。</target>
        </trans-unit>
        <trans-unit id="6c27c96db626276f442777ef3f3477feae99f3a5" translate="yes" xml:space="preserve">
          <source>For example, the sized array type &lt;code&gt;[i8; 2]&lt;/code&gt; implements &lt;code&gt;Unsize&amp;lt;[i8]&amp;gt;&lt;/code&gt; and &lt;code&gt;Unsize&amp;lt;dyn fmt::Debug&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">たとえば、サイズ変更された配列タイプ &lt;code&gt;[i8; 2]&lt;/code&gt; &lt;code&gt;Unsize&amp;lt;[i8]&amp;gt;&lt;/code&gt; と &lt;code&gt;Unsize&amp;lt;dyn fmt::Debug&amp;gt;&lt;/code&gt; 実装します。</target>
        </trans-unit>
        <trans-unit id="366340c67c059c204db621f7eae2415b246044b0" translate="yes" xml:space="preserve">
          <source>For example, the sized array type &lt;code&gt;[i8; 2]&lt;/code&gt; implements &lt;code&gt;Unsize&amp;lt;[i8]&amp;gt;&lt;/code&gt; and &lt;code&gt;Unsize&amp;lt;fmt::Debug&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">たとえば、サイズ設定された配列タイプ &lt;code&gt;[i8; 2]&lt;/code&gt; は &lt;code&gt;Unsize&amp;lt;[i8]&amp;gt;&lt;/code&gt; および &lt;code&gt;Unsize&amp;lt;fmt::Debug&amp;gt;&lt;/code&gt; 実装します。</target>
        </trans-unit>
        <trans-unit id="9fd0eff00179b77af92d43c41f240143cf69cdfa" translate="yes" xml:space="preserve">
          <source>For example, the trait below has a method &lt;code&gt;foo&lt;/code&gt; with a type parameter &lt;code&gt;T&lt;/code&gt;, but the implementation of &lt;code&gt;foo&lt;/code&gt; for the type &lt;code&gt;Bar&lt;/code&gt; is missing this parameter:</source>
          <target state="translated">たとえば、以下の特性には、型パラメーター &lt;code&gt;T&lt;/code&gt; を持つメソッド &lt;code&gt;foo&lt;/code&gt; がありますが、型 &lt;code&gt;Bar&lt;/code&gt; の &lt;code&gt;foo&lt;/code&gt; の実装には、このパラメーターがありません。</target>
        </trans-unit>
        <trans-unit id="8b644523186dc68fa33f4525c4f5b85593ff99b3" translate="yes" xml:space="preserve">
          <source>For example, the trait below has a method &lt;code&gt;foo&lt;/code&gt; with two function parameters (&lt;code&gt;&amp;amp;self&lt;/code&gt; and &lt;code&gt;u8&lt;/code&gt;), but the implementation of &lt;code&gt;foo&lt;/code&gt; for the type &lt;code&gt;Bar&lt;/code&gt; omits the &lt;code&gt;u8&lt;/code&gt; parameter:</source>
          <target state="translated">たとえば、以下の特性には2つの関数パラメーター（ &lt;code&gt;&amp;amp;self&lt;/code&gt; および &lt;code&gt;u8&lt;/code&gt; ）を持つメソッド &lt;code&gt;foo&lt;/code&gt; がありますが、タイプ &lt;code&gt;Bar&lt;/code&gt; の &lt;code&gt;foo&lt;/code&gt; の実装では &lt;code&gt;u8&lt;/code&gt; パラメーターが省略されています。</target>
        </trans-unit>
        <trans-unit id="b2054ac7104ff8f94e8f0fe677bda5de864b59e2" translate="yes" xml:space="preserve">
          <source>For example, these two matches on &lt;code&gt;x: &amp;amp;i32&lt;/code&gt; are equivalent:</source>
          <target state="translated">たとえば、 &lt;code&gt;x: &amp;amp;i32&lt;/code&gt; でのこれら2つの一致は同等です。</target>
        </trans-unit>
        <trans-unit id="0f0ebafee793ef772176055bfbe1e63d094aa7f0" translate="yes" xml:space="preserve">
          <source>For example, this attribute macro takes the input stream and returns it as is, effectively being the no-op of attributes.</source>
          <target state="translated">例えば、この属性マクロは入力ストリームを取り、それをそのまま返します。</target>
        </trans-unit>
        <trans-unit id="3b2d902f733498146c7d79ff0d4666385f011551" translate="yes" xml:space="preserve">
          <source>For example, this can happen when a drop has taken place:</source>
          <target state="translated">例えば、ドロップが発生した場合などです。</target>
        </trans-unit>
        <trans-unit id="d7dedeceba4a8900e43a594ae72dc887e0a2e3eb" translate="yes" xml:space="preserve">
          <source>For example, this can happen when storing a &lt;code&gt;&amp;amp;mut&lt;/code&gt; inside an immutable &lt;code&gt;Box&lt;/code&gt;:</source>
          <target state="translated">たとえば、これは不変の &lt;code&gt;Box&lt;/code&gt; 内に &lt;code&gt;&amp;amp;mut&lt;/code&gt; を格納するときに発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="5807b7a347e69661509cba501c2fe0d4b703ef04" translate="yes" xml:space="preserve">
          <source>For example, this function returns &lt;code&gt;true&lt;/code&gt; on unix platforms and &lt;code&gt;false&lt;/code&gt; on other platforms.</source>
          <target state="translated">たとえば、この関数はUNIXプラットフォームでは &lt;code&gt;true&lt;/code&gt; を返し、その他のプラットフォームでは &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="bfe3e762f0308c232acfe535a85b5bf692d7a562" translate="yes" xml:space="preserve">
          <source>For example, this is a simple function:</source>
          <target state="translated">例えば、これは簡単な関数です。</target>
        </trans-unit>
        <trans-unit id="574f015c9f879de83a47af30c961f0cb2ef98124" translate="yes" xml:space="preserve">
          <source>For example, we can refactor the code in Listing 18-15 to support RGB and HSV colors in the &lt;code&gt;ChangeColor&lt;/code&gt; message, as shown in Listing 18-16.</source>
          <target state="translated">たとえば、リスト18-15に示すように、リスト18-15のコードをリファクタリングして、 &lt;code&gt;ChangeColor&lt;/code&gt; メッセージでRGBおよびHSVカラーをサポートできます。</target>
        </trans-unit>
        <trans-unit id="f82030bd7f1111a5c705663c05195d4bd4d79595" translate="yes" xml:space="preserve">
          <source>For example, while &lt;a href=&quot;../f64/index&quot;&gt;&lt;code&gt;f64&lt;/code&gt;&lt;/a&gt; doesn't implement &lt;a href=&quot;../cmp/trait.ord&quot;&gt;&lt;code&gt;Ord&lt;/code&gt;&lt;/a&gt; because &lt;code&gt;NaN != NaN&lt;/code&gt;, we can use &lt;code&gt;partial_cmp&lt;/code&gt; as our sort function when we know the slice doesn't contain a &lt;code&gt;NaN&lt;/code&gt;.</source>
          <target state="translated">たとえば、 &lt;code&gt;NaN != NaN&lt;/code&gt; であるため&lt;a href=&quot;../f64/index&quot;&gt; &lt;code&gt;f64&lt;/code&gt; &lt;/a&gt;は&lt;a href=&quot;../cmp/trait.ord&quot;&gt; &lt;code&gt;Ord&lt;/code&gt; を&lt;/a&gt;実装していませんが、スライスに &lt;code&gt;NaN&lt;/code&gt; が含まれていないことがわかっている場合は、ソート関数として &lt;code&gt;partial_cmp&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="6422942d92b193786388ab0bda397e05164540c1" translate="yes" xml:space="preserve">
          <source>For example, while &lt;a href=&quot;../primitive.f64&quot;&gt;&lt;code&gt;f64&lt;/code&gt;&lt;/a&gt; doesn't implement &lt;a href=&quot;../cmp/trait.ord&quot;&gt;&lt;code&gt;Ord&lt;/code&gt;&lt;/a&gt; because &lt;code&gt;NaN != NaN&lt;/code&gt;, we can use &lt;code&gt;partial_cmp&lt;/code&gt; as our sort function when we know the slice doesn't contain a &lt;code&gt;NaN&lt;/code&gt;.</source>
          <target state="translated">たとえば、 &lt;code&gt;NaN != NaN&lt;/code&gt; であるため&lt;a href=&quot;../primitive.f64&quot;&gt; &lt;code&gt;f64&lt;/code&gt; &lt;/a&gt;は&lt;a href=&quot;../cmp/trait.ord&quot;&gt; &lt;code&gt;Ord&lt;/code&gt; を&lt;/a&gt;実装していませんが、スライスに &lt;code&gt;NaN&lt;/code&gt; が含まれていないことがわかっている場合は、 &lt;code&gt;partial_cmp&lt;/code&gt; を並べ替え関数として使用できます。</target>
        </trans-unit>
        <trans-unit id="8b764d8204b44c3e5e2540dd303c676cd8f62e40" translate="yes" xml:space="preserve">
          <source>For example, while &lt;a href=&quot;f64/index&quot;&gt;&lt;code&gt;f64&lt;/code&gt;&lt;/a&gt; doesn't implement &lt;a href=&quot;cmp/trait.ord&quot;&gt;&lt;code&gt;Ord&lt;/code&gt;&lt;/a&gt; because &lt;code&gt;NaN != NaN&lt;/code&gt;, we can use &lt;code&gt;partial_cmp&lt;/code&gt; as our sort function when we know the slice doesn't contain a &lt;code&gt;NaN&lt;/code&gt;.</source>
          <target state="translated">たとえば、 &lt;code&gt;NaN != NaN&lt;/code&gt; であるため&lt;a href=&quot;f64/index&quot;&gt; &lt;code&gt;f64&lt;/code&gt; &lt;/a&gt;は&lt;a href=&quot;cmp/trait.ord&quot;&gt; &lt;code&gt;Ord&lt;/code&gt; を&lt;/a&gt;実装していませんが、スライスに &lt;code&gt;NaN&lt;/code&gt; が含まれていないことがわかっている場合は、ソート関数として &lt;code&gt;partial_cmp&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="e424d677e36813abb83127c7379735d7c5273964" translate="yes" xml:space="preserve">
          <source>For example, while &lt;a href=&quot;primitive.f64&quot;&gt;&lt;code&gt;f64&lt;/code&gt;&lt;/a&gt; doesn't implement &lt;a href=&quot;cmp/trait.ord&quot;&gt;&lt;code&gt;Ord&lt;/code&gt;&lt;/a&gt; because &lt;code&gt;NaN != NaN&lt;/code&gt;, we can use &lt;code&gt;partial_cmp&lt;/code&gt; as our sort function when we know the slice doesn't contain a &lt;code&gt;NaN&lt;/code&gt;.</source>
          <target state="translated">たとえば、 &lt;code&gt;NaN != NaN&lt;/code&gt; であるため&lt;a href=&quot;primitive.f64&quot;&gt; &lt;code&gt;f64&lt;/code&gt; &lt;/a&gt;は&lt;a href=&quot;cmp/trait.ord&quot;&gt; &lt;code&gt;Ord&lt;/code&gt; を&lt;/a&gt;実装していませんが、スライスに &lt;code&gt;NaN&lt;/code&gt; が含まれていないことがわかっている場合は、 &lt;code&gt;partial_cmp&lt;/code&gt; を並べ替え関数として使用できます。</target>
        </trans-unit>
        <trans-unit id="d8dc8734abe186200131ed8ac632d434e048366c" translate="yes" xml:space="preserve">
          <source>For example, with a &lt;code&gt;repr(C, u8)&lt;/code&gt; enum it is not possible to have 257 unique discriminants (&quot;tags&quot;) whereas the same enum with only a &lt;code&gt;repr(C)&lt;/code&gt; attribute will compile without any problems.</source>
          <target state="translated">たとえば、 &lt;code&gt;repr(C, u8)&lt;/code&gt; 列挙型では、257個の一意の判別式（「タグ」）を持つことはできませんが、 &lt;code&gt;repr(C)&lt;/code&gt; 属性のみを持つ同じ列挙型は問題なくコンパイルされます。</target>
        </trans-unit>
        <trans-unit id="c94d1535c10da4f2821748f9ce38729f26e00dbe" translate="yes" xml:space="preserve">
          <source>For example, with:</source>
          <target state="translated">例えば、ウィズで。</target>
        </trans-unit>
        <trans-unit id="17eeedca2613fada694d9a21076a8833ab19837f" translate="yes" xml:space="preserve">
          <source>For example, you could implement &lt;code&gt;Drop&lt;/code&gt; as follows:</source>
          <target state="translated">たとえば、次のように &lt;code&gt;Drop&lt;/code&gt; を実装できます。</target>
        </trans-unit>
        <trans-unit id="0e89540393294fb9755a8c7be8446018477b85f9" translate="yes" xml:space="preserve">
          <source>For example, you may have done something like:</source>
          <target state="translated">例えば、こんなことをしていたかもしれません。</target>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">例えば</target>
        </trans-unit>
        <trans-unit id="c67a863b99ff7d27d3808154564c3bc4114136bc" translate="yes" xml:space="preserve">
          <source>For example: By creating a generic function that takes an &lt;code&gt;AsRef&amp;lt;str&amp;gt;&lt;/code&gt; we express that we want to accept all references that can be converted to &lt;code&gt;&amp;amp;str&lt;/code&gt; as an argument. Since both &lt;a href=&quot;../string/struct.string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;&amp;amp;str&lt;/code&gt; implement &lt;code&gt;AsRef&amp;lt;str&amp;gt;&lt;/code&gt; we can accept both as input argument.</source>
          <target state="translated">例： &lt;code&gt;AsRef&amp;lt;str&amp;gt;&lt;/code&gt; を取るジェネリック関数を作成することにより、 &lt;code&gt;&amp;amp;str&lt;/code&gt; に変換できるすべての参照を引数として受け入れることを表明しています。&lt;a href=&quot;../string/struct.string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;と &lt;code&gt;&amp;amp;str&lt;/code&gt; の両方が &lt;code&gt;AsRef&amp;lt;str&amp;gt;&lt;/code&gt; を実装しているため、両方を入力引数として受け入れることができます。</target>
        </trans-unit>
        <trans-unit id="7b85128b7000b81f6830c4ca37b9c6350ef69882" translate="yes" xml:space="preserve">
          <source>For example: By creating a generic function that takes an &lt;code&gt;AsRef&amp;lt;str&amp;gt;&lt;/code&gt; we express that we want to accept all references that can be converted to [&lt;code&gt;&amp;amp;str&lt;/code&gt;] as an argument. Since both &lt;a href=&quot;../string/struct.string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; and [&lt;code&gt;&amp;amp;str&lt;/code&gt;] implement &lt;code&gt;AsRef&amp;lt;str&amp;gt;&lt;/code&gt; we can accept both as input argument.</source>
          <target state="translated">例： &lt;code&gt;AsRef&amp;lt;str&amp;gt;&lt;/code&gt; を取るジェネリック関数を作成することにより、[ &lt;code&gt;&amp;amp;str&lt;/code&gt; ]に変換できるすべての参照を引数として受け入れたいことを表現します。両方以来&lt;a href=&quot;../string/struct.string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;と[ &lt;code&gt;&amp;amp;str&lt;/code&gt; ]実装 &lt;code&gt;AsRef&amp;lt;str&amp;gt;&lt;/code&gt; 我々は、入力引数としての両方を受け入れることができます。</target>
        </trans-unit>
        <trans-unit id="c242c0b4118acc9ccca5d9ffb3d5007ec8e99339" translate="yes" xml:space="preserve">
          <source>For expensive key functions (e.g. functions that are not simple property accesses or basic operations), &lt;a href=&quot;#method.sort_by_cached_key&quot;&gt;&lt;code&gt;sort_by_cached_key&lt;/code&gt;&lt;/a&gt; is likely to be significantly faster, as it does not recompute element keys.</source>
          <target state="translated">高価なキー関数（たとえば、単純なプロパティアクセスや基本操作ではない関数）の場合、&lt;a href=&quot;#method.sort_by_cached_key&quot;&gt; &lt;code&gt;sort_by_cached_key&lt;/code&gt; &lt;/a&gt;は要素キーを再計算しないため、かなり高速になる可能性があります。</target>
        </trans-unit>
        <trans-unit id="fac202d9a81aa406cb4f2aa07e7d19ccd78a9e21" translate="yes" xml:space="preserve">
          <source>For floating-point types, this indicates how many digits after the decimal point should be printed.</source>
          <target state="translated">浮動小数点型の場合、これは小数点以下の桁数を表示することを示します。</target>
        </trans-unit>
        <trans-unit id="60a97f7f70b38aec22b5767907484329e4b88190" translate="yes" xml:space="preserve">
          <source>For generic types (counting the built-in types above as generic over &lt;code&gt;T&lt;/code&gt;), if a generic implementation is available, then the compiler does not automatically implement it for types that could use the implementation except that they do not meet the requisite trait bounds. For instance, the standard library implements &lt;code&gt;Send&lt;/code&gt; for all &lt;code&gt;&amp;amp;T&lt;/code&gt; where &lt;code&gt;T&lt;/code&gt; is &lt;code&gt;Sync&lt;/code&gt;; this means that the compiler will not implement &lt;code&gt;Send&lt;/code&gt; for &lt;code&gt;&amp;amp;T&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is &lt;code&gt;Send&lt;/code&gt; but not &lt;code&gt;Sync&lt;/code&gt;.</source>
          <target state="translated">ジェネリック型（上記の組み込み型を &lt;code&gt;T&lt;/code&gt; 上のジェネリックとしてカウント）の場合、ジェネリック実装が利用可能であれば、コンパイラーは、必要な特性の境界を満たさない場合を除いて、実装を使用できる型に対してそれを自動的に実装しません。たとえば、標準ライブラリは、 &lt;code&gt;T&lt;/code&gt; が &lt;code&gt;Sync&lt;/code&gt; であるすべての &lt;code&gt;&amp;amp;T&lt;/code&gt; に対して &lt;code&gt;Send&lt;/code&gt; を実装します。つまり、 &lt;code&gt;T&lt;/code&gt; が &lt;code&gt;Send&lt;/code&gt; ではなく &lt;code&gt;Sync&lt;/code&gt; の場合、コンパイラーは &lt;code&gt;&amp;amp;T&lt;/code&gt; の &lt;code&gt;Send&lt;/code&gt; を実装しません。</target>
        </trans-unit>
        <trans-unit id="a9bb6b1fc5ac516815924015fa9742f7f462b2df" translate="yes" xml:space="preserve">
          <source>For historical reasons and convenience, the tuple type with no elements (&lt;code&gt;()&lt;/code&gt;) is often called &amp;lsquo;unit&amp;rsquo; or &amp;lsquo;the unit type&amp;rsquo;.</source>
          <target state="translated">歴史的な理由と便宜上、要素のないタプルタイプ（ &lt;code&gt;()&lt;/code&gt; ）は、しばしば「ユニット」または「ユニットタイプ」と呼ばれます。</target>
        </trans-unit>
        <trans-unit id="0cae8f11b3fc955cca56e9644b85da41554bc0c8" translate="yes" xml:space="preserve">
          <source>For historical reasons, the Windows API uses a form of potentially ill-formed UTF-16 encoding for strings. Specifically, the 16-bit code units in Windows strings may contain &lt;a href=&quot;https://simonsapin.github.io/wtf-8/#ill-formed-utf-16&quot;&gt;isolated surrogate code points which are not paired together&lt;/a&gt;. The Unicode standard requires that surrogate code points (those in the range U+D800 to U+DFFF) always be &lt;em&gt;paired&lt;/em&gt;, because in the UTF-16 encoding a &lt;em&gt;surrogate code unit pair&lt;/em&gt; is used to encode a single character. For compatibility with code that does not enforce these pairings, Windows does not enforce them, either.</source>
          <target state="translated">歴史的な理由により、Windows APIは文字列に対して形式が正しくない可能性がある形式のUTF-16エンコーディングを使用します。具体的には、Windows文字列の16ビットコードユニットに&lt;a href=&quot;https://simonsapin.github.io/wtf-8/#ill-formed-utf-16&quot;&gt;は、ペアになっていない孤立したサロゲートコードポイント&lt;/a&gt;が含まれている可能性があります。Unicode標準では、サロゲートコードポイント（U + D800からU + DFFFの範囲）を常に&lt;em&gt;ペア&lt;/em&gt;にする必要があります。これは、UTF-16エンコーディングでは、&lt;em&gt;サロゲートコードユニットペア&lt;/em&gt;を使用して単一の文字をエンコードするためです。これらのペアリングを強制しないコードとの互換性のために、Windowsもそれらを強制しません。</target>
        </trans-unit>
        <trans-unit id="8916c85db1ffc957e4227acdfffd5e1133284b2f" translate="yes" xml:space="preserve">
          <source>For historical reasons, the scoping of macros by example does not work entirely like items. Macros have two forms of scope: textual scope, and path-based scope. Textual scope is based on the order that things appear in source files, or even across multiple files, and is the default scoping. It is explained further below. Path-based scope works exactly the same way that item scoping does. The scoping, exporting, and importing of macros is controlled largely by attributes.</source>
          <target state="translated">歴史的な理由から、例によるマクロのスコープはアイテムのように完全には機能しません。マクロのスコープには、テキストベースのスコープとパスベースのスコープの2つの形式があります。テキストベースのスコープは、ソースファイルや複数のファイルに表示される順番に基づいており、デフォルトのスコープとなっています。これについては後述します。パスベースのスコープは、項目のスコープと全く同じように動作します。マクロのスコープ、エクスポート、インポートは主に属性によって制御されます。</target>
        </trans-unit>
        <trans-unit id="710b4db2d0c9327d5cbb0b2974185ecea3b00d3d" translate="yes" xml:space="preserve">
          <source>For information about possible values, see &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/api/winnt/ne-winnt-security_impersonation_level&quot;&gt;Impersonation Levels&lt;/a&gt; on the Windows Dev Center site. The &lt;code&gt;SECURITY_SQOS_PRESENT&lt;/code&gt; flag is set automatically when using this method.</source>
          <target state="translated">可能な値については、Windows DevCenterサイトの「&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/api/winnt/ne-winnt-security_impersonation_level&quot;&gt;偽装レベル」&lt;/a&gt;を参照してください。このメソッドを使用すると、 &lt;code&gt;SECURITY_SQOS_PRESENT&lt;/code&gt; フラグが自動的に設定されます。</target>
        </trans-unit>
        <trans-unit id="2a1e7857364d8e31bcd2215cbf664f2f9ca1f5e2" translate="yes" xml:space="preserve">
          <source>For information about possible values, see &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/aa379572.aspx&quot;&gt;Impersonation Levels&lt;/a&gt; on the Windows Dev Center site. The &lt;code&gt;SECURITY_SQOS_PRESENT&lt;/code&gt; flag is set automatically when using this method.</source>
          <target state="translated">可能な値については、Windows Dev Centerサイトの&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/aa379572.aspx&quot;&gt;偽装レベル&lt;/a&gt;を参照してください。このメソッドを使用すると、 &lt;code&gt;SECURITY_SQOS_PRESENT&lt;/code&gt; フラグが自動的に設定されます。</target>
        </trans-unit>
        <trans-unit id="1b51d9cd63e79117823cb3a5577ae76f76a648aa" translate="yes" xml:space="preserve">
          <source>For information on the design of the orphan rules, see &lt;a href=&quot;https://github.com/rust-lang/rfcs/blob/master/text/1023-rebalancing-coherence.md&quot;&gt;RFC 1023&lt;/a&gt;.</source>
          <target state="translated">孤立ルールの設計については、&lt;a href=&quot;https://github.com/rust-lang/rfcs/blob/master/text/1023-rebalancing-coherence.md&quot;&gt;RFC 1023を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="4f4337d5c37f28afdc9f6e968d52d47c802b104d" translate="yes" xml:space="preserve">
          <source>For information on the design of the orphan rules, see &lt;a href=&quot;https://rust-lang.github.io/rfcs/2451-re-rebalancing-coherence.html&quot;&gt;RFC 2451&lt;/a&gt; and &lt;a href=&quot;https://github.com/rust-lang/rfcs/blob/master/text/1023-rebalancing-coherence.md&quot;&gt;RFC 1023&lt;/a&gt;.</source>
          <target state="translated">孤児ルールの設計については、参照&lt;a href=&quot;https://rust-lang.github.io/rfcs/2451-re-rebalancing-coherence.html&quot;&gt;RFC 2451&lt;/a&gt;および&lt;a href=&quot;https://github.com/rust-lang/rfcs/blob/master/text/1023-rebalancing-coherence.md&quot;&gt;RFC 1023&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="225b6b46a542b54e86029105be58c6f2b15b07b2" translate="yes" xml:space="preserve">
          <source>For instance, if the receiver has type &lt;code&gt;Box&amp;lt;[i32;2]&amp;gt;&lt;/code&gt;, then the candidate types will be &lt;code&gt;Box&amp;lt;[i32;2]&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;amp;Box&amp;lt;[i32;2]&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;amp;mut Box&amp;lt;[i32;2]&amp;gt;&lt;/code&gt;, &lt;code&gt;[i32; 2]&lt;/code&gt; (by dereferencing), &lt;code&gt;&amp;amp;[i32; 2]&lt;/code&gt;, &lt;code&gt;&amp;amp;mut [i32; 2]&lt;/code&gt;, &lt;code&gt;[i32]&lt;/code&gt; (by unsized coercion), &lt;code&gt;&amp;amp;[i32]&lt;/code&gt;, and finally &lt;code&gt;&amp;amp;mut [i32]&lt;/code&gt;.</source>
          <target state="translated">たとえば、レシーバーのタイプが &lt;code&gt;Box&amp;lt;[i32;2]&amp;gt;&lt;/code&gt; 場合、候補タイプは &lt;code&gt;Box&amp;lt;[i32;2]&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&amp;amp;Box&amp;lt;[i32;2]&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&amp;amp;mut Box&amp;lt;[i32;2]&amp;gt;&lt;/code&gt; 、 &lt;code&gt;[i32; 2]&lt;/code&gt; （逆参照により）、 &lt;code&gt;&amp;amp;[i32; 2]&lt;/code&gt; 、 &lt;code&gt;&amp;amp;mut [i32; 2]&lt;/code&gt; 、 &lt;code&gt;[i32]&lt;/code&gt; （サイズ変更しない強制）、 &lt;code&gt;&amp;amp;[i32]&lt;/code&gt; 、最後に &lt;code&gt;&amp;amp;mut [i32]&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2cd16941ca5e3ae0d133c47349cf0b4a2aebe81d" translate="yes" xml:space="preserve">
          <source>For instance, you cannot &lt;a href=&quot;../io/trait.read&quot;&gt;&lt;code&gt;Read&lt;/code&gt;&lt;/a&gt; into an uninitialized buffer:</source>
          <target state="translated">たとえば、初期化されていないバッファに&lt;a href=&quot;../io/trait.read&quot;&gt; &lt;code&gt;Read&lt;/code&gt; &lt;/a&gt;ことはできません。</target>
        </trans-unit>
        <trans-unit id="baaaebe339d6ce17ed6cfc031733bf141b61b1fd" translate="yes" xml:space="preserve">
          <source>For integral types, this is ignored.</source>
          <target state="translated">積分型の場合、これは無視されます。</target>
        </trans-unit>
        <trans-unit id="6b107823eaed82b9e1f15dcd767296d37bccac20" translate="yes" xml:space="preserve">
          <source>For iterating from the front, the &lt;a href=&quot;#method.match_indices&quot;&gt;&lt;code&gt;match_indices&lt;/code&gt;&lt;/a&gt; method can be used.</source>
          <target state="translated">前面から繰り返す場合は、&lt;a href=&quot;#method.match_indices&quot;&gt; &lt;code&gt;match_indices&lt;/code&gt; &lt;/a&gt;メソッドを使用できます。</target>
        </trans-unit>
        <trans-unit id="d88445f2a62566b0d770ee0bdb5ade912a95ab77" translate="yes" xml:space="preserve">
          <source>For iterating from the front, the &lt;a href=&quot;#method.matches&quot;&gt;&lt;code&gt;matches&lt;/code&gt;&lt;/a&gt; method can be used.</source>
          <target state="translated">正面から繰り返す場合は、&lt;a href=&quot;#method.matches&quot;&gt; &lt;code&gt;matches&lt;/code&gt; &lt;/a&gt;メソッドを使用できます。</target>
        </trans-unit>
        <trans-unit id="b7f9b888e8aa5560f84815a010ccb71f10239c27" translate="yes" xml:space="preserve">
          <source>For iterating from the front, the &lt;a href=&quot;#method.split&quot;&gt;&lt;code&gt;split&lt;/code&gt;&lt;/a&gt; method can be used.</source>
          <target state="translated">正面からの反復には、&lt;a href=&quot;#method.split&quot;&gt; &lt;code&gt;split&lt;/code&gt; &lt;/a&gt;メソッドを使用できます。</target>
        </trans-unit>
        <trans-unit id="e0637745021a8ec9092d57748f466adfb249ea99" translate="yes" xml:space="preserve">
          <source>For iterating from the front, the &lt;a href=&quot;#method.split_terminator&quot;&gt;&lt;code&gt;split_terminator&lt;/code&gt;&lt;/a&gt; method can be used.</source>
          <target state="translated">前面から繰り返す場合は、&lt;a href=&quot;#method.split_terminator&quot;&gt; &lt;code&gt;split_terminator&lt;/code&gt; &lt;/a&gt;メソッドを使用できます。</target>
        </trans-unit>
        <trans-unit id="1e9e4dafbc9ce6c65b15e4c57d7f5f65e014a32e" translate="yes" xml:space="preserve">
          <source>For iterating from the front, the &lt;a href=&quot;../primitive.str#method.match_indices&quot;&gt;&lt;code&gt;match_indices&lt;/code&gt;&lt;/a&gt; method can be used.</source>
          <target state="translated">正面から反復する場合は、&lt;a href=&quot;../primitive.str#method.match_indices&quot;&gt; &lt;code&gt;match_indices&lt;/code&gt; &lt;/a&gt;メソッドを使用できます。</target>
        </trans-unit>
        <trans-unit id="cb60863336a5828341624e45c853be30e7540908" translate="yes" xml:space="preserve">
          <source>For iterating from the front, the &lt;a href=&quot;../primitive.str#method.matches&quot;&gt;&lt;code&gt;matches&lt;/code&gt;&lt;/a&gt; method can be used.</source>
          <target state="translated">正面からの反復には、&lt;a href=&quot;../primitive.str#method.matches&quot;&gt; &lt;code&gt;matches&lt;/code&gt; &lt;/a&gt;メソッドを使用できます。</target>
        </trans-unit>
        <trans-unit id="4e1a5e53ef176500cb5cc5c96f0c172831e17377" translate="yes" xml:space="preserve">
          <source>For iterating from the front, the &lt;a href=&quot;../primitive.str#method.split&quot;&gt;&lt;code&gt;split&lt;/code&gt;&lt;/a&gt; method can be used.</source>
          <target state="translated">正面からの反復には、&lt;a href=&quot;../primitive.str#method.split&quot;&gt; &lt;code&gt;split&lt;/code&gt; &lt;/a&gt;法を使用できます。</target>
        </trans-unit>
        <trans-unit id="8f1664e44bf9c6ccc6fd225330d68f0d37f3ab44" translate="yes" xml:space="preserve">
          <source>For iterating from the front, the &lt;a href=&quot;../primitive.str#method.split_terminator&quot;&gt;&lt;code&gt;split_terminator&lt;/code&gt;&lt;/a&gt; method can be used.</source>
          <target state="translated">正面から反復する場合は、&lt;a href=&quot;../primitive.str#method.split_terminator&quot;&gt; &lt;code&gt;split_terminator&lt;/code&gt; &lt;/a&gt;メソッドを使用できます。</target>
        </trans-unit>
        <trans-unit id="11475214701d372b10cbf16754495bc1940945f6" translate="yes" xml:space="preserve">
          <source>For iterating from the front, the &lt;a href=&quot;primitive.str#method.match_indices&quot;&gt;&lt;code&gt;match_indices&lt;/code&gt;&lt;/a&gt; method can be used.</source>
          <target state="translated">正面から反復する場合は、&lt;a href=&quot;primitive.str#method.match_indices&quot;&gt; &lt;code&gt;match_indices&lt;/code&gt; &lt;/a&gt;メソッドを使用できます。</target>
        </trans-unit>
        <trans-unit id="e160ba151777d5c8f04b9b2dbd5d16202c6f385d" translate="yes" xml:space="preserve">
          <source>For iterating from the front, the &lt;a href=&quot;primitive.str#method.matches&quot;&gt;&lt;code&gt;matches&lt;/code&gt;&lt;/a&gt; method can be used.</source>
          <target state="translated">正面からの反復には、&lt;a href=&quot;primitive.str#method.matches&quot;&gt; &lt;code&gt;matches&lt;/code&gt; &lt;/a&gt;メソッドを使用できます。</target>
        </trans-unit>
        <trans-unit id="9e8ad82d7847387c51f38511c2d2151c6a8665e2" translate="yes" xml:space="preserve">
          <source>For iterating from the front, the &lt;a href=&quot;primitive.str#method.split&quot;&gt;&lt;code&gt;split&lt;/code&gt;&lt;/a&gt; method can be used.</source>
          <target state="translated">正面からの反復には、&lt;a href=&quot;primitive.str#method.split&quot;&gt; &lt;code&gt;split&lt;/code&gt; &lt;/a&gt;法を使用できます。</target>
        </trans-unit>
        <trans-unit id="18d8ce67fc7ac86d26b31c3c26679d8b19f654bc" translate="yes" xml:space="preserve">
          <source>For iterating from the front, the &lt;a href=&quot;primitive.str#method.split_terminator&quot;&gt;&lt;code&gt;split_terminator&lt;/code&gt;&lt;/a&gt; method can be used.</source>
          <target state="translated">正面から反復する場合は、&lt;a href=&quot;primitive.str#method.split_terminator&quot;&gt; &lt;code&gt;split_terminator&lt;/code&gt; &lt;/a&gt;メソッドを使用できます。</target>
        </trans-unit>
        <trans-unit id="3e44fb98adc45057811caa8d42750cc0e5fe8aeb" translate="yes" xml:space="preserve">
          <source>For matches of &lt;code&gt;pat&lt;/code&gt; within &lt;code&gt;self&lt;/code&gt; that overlap, only the indices corresponding to the first match are returned.</source>
          <target state="translated">&lt;code&gt;self&lt;/code&gt; 内での &lt;code&gt;pat&lt;/code&gt; の一致が重複している場合、最初の一致に対応するインデックスのみが返されます。</target>
        </trans-unit>
        <trans-unit id="abfb993550ab741f151661d1422d9018d04e9a77" translate="yes" xml:space="preserve">
          <source>For matches of &lt;code&gt;pat&lt;/code&gt; within &lt;code&gt;self&lt;/code&gt; that overlap, only the indices corresponding to the last match are returned.</source>
          <target state="translated">オーバーラップする &lt;code&gt;self&lt;/code&gt; 内の &lt;code&gt;pat&lt;/code&gt; の一致の場合、最後の一致に対応するインデックスのみが返されます。</target>
        </trans-unit>
        <trans-unit id="30e29f2a7f5a8332281828c6f9dfcd0e797d1dad" translate="yes" xml:space="preserve">
          <source>For method calls, the receiver (&lt;code&gt;self&lt;/code&gt; parameter) can only take advantage of &lt;a href=&quot;#unsized-coercions&quot;&gt;unsized coercions&lt;/a&gt;.</source>
          <target state="translated">メソッド呼び出しの場合、レシーバー（ &lt;code&gt;self&lt;/code&gt; パラメーター）は&lt;a href=&quot;#unsized-coercions&quot;&gt;サイズなしの強制&lt;/a&gt;のみを利用できます。</target>
        </trans-unit>
        <trans-unit id="5e2f959308ccc06c3abbb26c45f8c6f0b3f855b0" translate="yes" xml:space="preserve">
          <source>For method calls, the receiver (&lt;code&gt;self&lt;/code&gt; parameter) can only take advantage of &lt;a href=&quot;type-coercions#unsized-coercions&quot;&gt;unsized coercions&lt;/a&gt;.</source>
          <target state="translated">メソッド呼び出しの場合、レシーバー（ &lt;code&gt;self&lt;/code&gt; パラメーター）は、&lt;a href=&quot;type-coercions#unsized-coercions&quot;&gt;サイズなしの型強制&lt;/a&gt;のみを利用できます。</target>
        </trans-unit>
        <trans-unit id="bd5dd94d6e8475bf5fd070eb97a21cb66eb1d253" translate="yes" xml:space="preserve">
          <source>For more about tuples, see &lt;a href=&quot;../book/ch03-02-data-types#the-tuple-type&quot;&gt;the book&lt;/a&gt;.</source>
          <target state="translated">タプルの詳細について&lt;a href=&quot;../book/ch03-02-data-types#the-tuple-type&quot;&gt;は、本を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="8eb606573f263490abda0eae447840de1fd6312f" translate="yes" xml:space="preserve">
          <source>For more detail on &lt;code&gt;const&lt;/code&gt;, see the &lt;a href=&quot;../book/ch03-01-variables-and-mutability#differences-between-variables-and-constants&quot;&gt;Rust Book&lt;/a&gt; or the &lt;a href=&quot;../reference/items/constant-items&quot;&gt;Reference&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;const&lt;/code&gt; の詳細については、&lt;a href=&quot;../book/ch03-01-variables-and-mutability#differences-between-variables-and-constants&quot;&gt;Rust Book&lt;/a&gt;または&lt;a href=&quot;../reference/items/constant-items&quot;&gt;リファレンスを参照してください。&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="34901312029c002d808f1bf7b19bb2453b8fe980" translate="yes" xml:space="preserve">
          <source>For more detail on &lt;code&gt;const&lt;/code&gt;, see the &lt;a href=&quot;../book/ch03-01-variables-and-mutability#differences-between-variables-and-constants&quot;&gt;Rust Book&lt;/a&gt; or the &lt;a href=&quot;../reference/items/constant-items&quot;&gt;Reference&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;const&lt;/code&gt; の詳細については、&lt;a href=&quot;../book/ch03-01-variables-and-mutability#differences-between-variables-and-constants&quot;&gt;RustBook&lt;/a&gt;または&lt;a href=&quot;../reference/items/constant-items&quot;&gt;リファレンスを参照してください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="4e291c473e6cc9b335b99368f64cbc1d71a0d4c0" translate="yes" xml:space="preserve">
          <source>For more detail, see the &lt;a href=&quot;macro-ambiguity&quot;&gt;formal specification&lt;/a&gt;.</source>
          <target state="translated">詳しくは、&lt;a href=&quot;macro-ambiguity&quot;&gt;正式仕様書を&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="22cc9134960646cae2e564ac06646cd0ebd7a8d6" translate="yes" xml:space="preserve">
          <source>For more details consult the &lt;a href=&quot;../reference/expressions/loop-expr#break-expressions&quot;&gt;Reference on &quot;break expression&quot;&lt;/a&gt; and the &lt;a href=&quot;../reference/expressions/loop-expr#break-and-loop-values&quot;&gt;Reference on &quot;break and loop values&quot;&lt;/a&gt;.</source>
          <target state="translated">詳細についてはご相談ください&lt;a href=&quot;../reference/expressions/loop-expr#break-expressions&quot;&gt;「break式」で参照&lt;/a&gt;し、&lt;a href=&quot;../reference/expressions/loop-expr#break-and-loop-values&quot;&gt;「ブレークとループ値」で参照します&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2a550b344fcc2f00c8b16595ecc991ab71ffaa66" translate="yes" xml:space="preserve">
          <source>For more details, see the respective documentation of each item in the list.</source>
          <target state="translated">詳細については、リスト内の各項目のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="8026e54bc7efbcbe76562e4e5409a24d75961350" translate="yes" xml:space="preserve">
          <source>For more details, see the traits &lt;a href=&quot;trait.pattern&quot;&gt;&lt;code&gt;Pattern&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;trait.searcher&quot;&gt;&lt;code&gt;Searcher&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;trait.reversesearcher&quot;&gt;&lt;code&gt;ReverseSearcher&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;trait.doubleendedsearcher&quot;&gt;&lt;code&gt;DoubleEndedSearcher&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">詳細については、特性&lt;a href=&quot;trait.pattern&quot;&gt; &lt;code&gt;Pattern&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;trait.searcher&quot;&gt; &lt;code&gt;Searcher&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;trait.reversesearcher&quot;&gt; &lt;code&gt;ReverseSearcher&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;trait.doubleendedsearcher&quot;&gt; &lt;code&gt;DoubleEndedSearcher&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="0c2fb50eba7ae83c8f13df4bd900c89c668818e9" translate="yes" xml:space="preserve">
          <source>For more details, see the traits [&lt;code&gt;Pattern&lt;/code&gt;], [&lt;code&gt;Searcher&lt;/code&gt;], [&lt;code&gt;ReverseSearcher&lt;/code&gt;], and [&lt;code&gt;DoubleEndedSearcher&lt;/code&gt;].</source>
          <target state="translated">詳細については、特性[ &lt;code&gt;Pattern&lt;/code&gt; ]、[ &lt;code&gt;Searcher&lt;/code&gt; ]、[ &lt;code&gt;ReverseSearcher&lt;/code&gt; ]、および[ &lt;code&gt;DoubleEndedSearcher&lt;/code&gt; ]を参照してください。</target>
        </trans-unit>
        <trans-unit id="89263bf3e6beb75e4571e90b66b3c70d0427828c" translate="yes" xml:space="preserve">
          <source>For more details, the &lt;a href=&quot;https://doc.rust-lang.org/stable/edition-guide/index.html&quot;&gt;&lt;em&gt;Edition Guide&lt;/em&gt;&lt;/a&gt; is a complete book about editions that enumerates the differences between editions and explains how to automatically upgrade your code to a new edition via &lt;code&gt;cargo fix&lt;/code&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;https://doc.rust-lang.org/stable/edition-guide/index.html&quot;&gt;&lt;em&gt;エディションガイド&lt;/em&gt;&lt;/a&gt;はエディション間の完全な本であり、エディション間の違いを列挙し、 &lt;code&gt;cargo fix&lt;/code&gt; 介してコードを新しいエディションに自動的にアップグレードする方法を説明しています。</target>
        </trans-unit>
        <trans-unit id="e6e6c205cbf7db8578d92757926cdfff233ef1ca" translate="yes" xml:space="preserve">
          <source>For more details, visit &lt;a href=&quot;../../book/ch15-02-deref&quot;&gt;the chapter in &lt;em&gt;The Rust Programming Language&lt;/em&gt;&lt;/a&gt; as well as the reference sections on &lt;a href=&quot;../../reference/expressions/operator-expr#the-dereference-operator&quot;&gt;the dereference operator&lt;/a&gt;, &lt;a href=&quot;../../reference/expressions/method-call-expr&quot;&gt;method resolution&lt;/a&gt; and &lt;a href=&quot;../../reference/type-coercions&quot;&gt;type coercions&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;../../book/ch15-02-deref&quot;&gt;&lt;em&gt;Rustプログラミング言語の&lt;/em&gt;&lt;/a&gt;章、&lt;em&gt;&lt;/em&gt;および&lt;a href=&quot;../../reference/expressions/operator-expr#the-dereference-operator&quot;&gt;間接参照演算子&lt;/a&gt;、&lt;a href=&quot;../../reference/expressions/method-call-expr&quot;&gt;メソッド解決&lt;/a&gt;、&lt;a href=&quot;../../reference/type-coercions&quot;&gt;型強制&lt;/a&gt;の参照セクションをご覧ください。</target>
        </trans-unit>
        <trans-unit id="c7b389f333511523f6507959ed7a6c82c5ac6a24" translate="yes" xml:space="preserve">
          <source>For more information about &lt;a href=&quot;book/ch03-02-data-types&quot;&gt;primitives&lt;/a&gt; and &lt;a href=&quot;book/ch05-00-structs&quot;&gt;structs&lt;/a&gt;, take a look at the Book.</source>
          <target state="translated">&lt;a href=&quot;book/ch03-02-data-types&quot;&gt;プリミティブ&lt;/a&gt;と&lt;a href=&quot;book/ch05-00-structs&quot;&gt;構造体の&lt;/a&gt;詳細については、本を参照してください。</target>
        </trans-unit>
        <trans-unit id="cc5cd9e3e865afa46a350086d1b1c96c19d01d7c" translate="yes" xml:space="preserve">
          <source>For more information about Cargo, check out &lt;a href=&quot;https://doc.rust-lang.org/cargo/index.html&quot;&gt;its documentation&lt;/a&gt;.</source>
          <target state="translated">Cargoの詳細については、&lt;a href=&quot;https://doc.rust-lang.org/cargo/index.html&quot;&gt;そのドキュメントを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="fa0a4fd36684df6f8397d7fa9786ae835418c592" translate="yes" xml:space="preserve">
          <source>For more information about associated types, see &lt;a href=&quot;book/ch19-03-advanced-traits#specifying-placeholder-types-in-trait-definitions-with-associated-types&quot;&gt;the book&lt;/a&gt;. For more information on associated type bounds, see &lt;a href=&quot;https://rust-lang.github.io/rfcs/2289-associated-type-bounds.html&quot;&gt;RFC 2289&lt;/a&gt;.</source>
          <target state="translated">関連するタイプの詳細について&lt;a href=&quot;book/ch19-03-advanced-traits#specifying-placeholder-types-in-trait-definitions-with-associated-types&quot;&gt;は、本を&lt;/a&gt;参照してください。関連する型の境界の詳細については、&lt;a href=&quot;https://rust-lang.github.io/rfcs/2289-associated-type-bounds.html&quot;&gt;RFC2289を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="e8da00a231113177386f7e47cc0a2389ab7cc277" translate="yes" xml:space="preserve">
          <source>For more information about casts, take a look at the Type cast section in &lt;a href=&quot;reference/expressions/operator-expr#type-cast-expressions&quot;&gt;The Reference Book&lt;/a&gt;.</source>
          <target state="translated">キャストの詳細については、&lt;a href=&quot;reference/expressions/operator-expr#type-cast-expressions&quot;&gt;リファレンスブックの「&lt;/a&gt;型キャスト」セクションをご覧ください。</target>
        </trans-unit>
        <trans-unit id="6cd0c62441350987a4762127fe18207f874a343a" translate="yes" xml:space="preserve">
          <source>For more information about named threads, see &lt;a href=&quot;index#naming-threads&quot;&gt;this module-level documentation&lt;/a&gt;.</source>
          <target state="translated">名前付きスレッドの詳細については、&lt;a href=&quot;index#naming-threads&quot;&gt;このモジュールレベルのドキュメントを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="102d4511f19624e4e594eba5e2a713f736f94403" translate="yes" xml:space="preserve">
          <source>For more information about primitives and structs, take a look at The Book: https://doc.rust-lang.org/book/ch03-02-data-types.html https://doc.rust-lang.org/book/ch05-00-structs.html</source>
          <target state="translated">プリミティブと構造体の詳細については、The Book を参照してください:https://doc.rust-lang.org/book/ch03-02-data-types.html https://doc.rust-lang.org/book/ch05-00-structs.html</target>
        </trans-unit>
        <trans-unit id="c3bf4058fb0bfe3a7675bbb543b62e5dee4c6887" translate="yes" xml:space="preserve">
          <source>For more information about specifying representations, see the &lt;a href=&quot;https://doc.rust-lang.org/nomicon/other-reprs.html&quot;&gt;&quot;Alternative Representations&quot; section&lt;/a&gt; of the Rustonomicon.</source>
          <target state="translated">表現の指定の詳細については、Rustonomiconの&lt;a href=&quot;https://doc.rust-lang.org/nomicon/other-reprs.html&quot;&gt;「代替表現」セクションを参照&lt;/a&gt;してください。</target>
        </trans-unit>
        <trans-unit id="8bd1cbeb47b7decd82b7fd7ecf8bae1087ce674f" translate="yes" xml:space="preserve">
          <source>For more information about the &lt;code&gt;cfg&lt;/code&gt; attribute, read the section on &lt;a href=&quot;reference/conditional-compilation&quot;&gt;Conditional Compilation&lt;/a&gt; in the Reference.</source>
          <target state="translated">&lt;code&gt;cfg&lt;/code&gt; 属性の詳細については、リファレンスの&lt;a href=&quot;reference/conditional-compilation&quot;&gt;条件付きコンパイル&lt;/a&gt;に関するセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="4442c14c85c92ae0273cf16c727092964e793917" translate="yes" xml:space="preserve">
          <source>For more information about the cfg attribute, read: https://doc.rust-lang.org/reference.html#conditional-compilation</source>
          <target state="translated">cfg 属性の詳細については、https://doc.rust-lang.org/reference.html#conditional-compilation を参照してください。</target>
        </trans-unit>
        <trans-unit id="992fc2eeb08dc25782d2fddc6c0b6015bc376de5" translate="yes" xml:space="preserve">
          <source>For more information about the inline attribute, https: read://doc.rust-lang.org/reference.html#inline-attributes</source>
          <target state="translated">inline属性の詳細については、https:read://doc.rust-lang.org/reference.html#line-attributesを参照してください。</target>
        </trans-unit>
        <trans-unit id="9db48592ab4095960e3e44f8b09079a0c0259f44" translate="yes" xml:space="preserve">
          <source>For more information about the inline attribute, read: https://doc.rust-lang.org/reference.html#inline-attributes</source>
          <target state="translated">inline属性の詳細については、https://doc.rust-lang.org/reference.html#inline-attributes を参照してください。</target>
        </trans-unit>
        <trans-unit id="cfa646f3fb3a336d8ee248174c90b109ddf1ff5a" translate="yes" xml:space="preserve">
          <source>For more information about the particulars of how the path is separated into components, see &lt;a href=&quot;#method.components&quot;&gt;&lt;code&gt;components&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">パスが成分に分離する方法の詳細の詳細については、&lt;a href=&quot;#method.components&quot;&gt; &lt;code&gt;components&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d208a7a00016bd80eb36abc405d4d67532f3f3f6" translate="yes" xml:space="preserve">
          <source>For more information about the particulars of how the path is separated into components, see &lt;a href=&quot;struct.path#method.components&quot;&gt;&lt;code&gt;components&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">パスが成分に分離する方法の詳細の詳細については、&lt;a href=&quot;struct.path#method.components&quot;&gt; &lt;code&gt;components&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="cd76571f2b2b3e596e0b9a91b81882353dbf69b8" translate="yes" xml:space="preserve">
          <source>For more information about the stack size for threads, see &lt;a href=&quot;index#stack-size&quot;&gt;this module-level documentation&lt;/a&gt;.</source>
          <target state="translated">スレッドのスタックサイズの詳細については、&lt;a href=&quot;index#stack-size&quot;&gt;このモジュールレベルのドキュメントを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="7fb8ee866c1b39714e1dcfd554e8800ff32ff81a" translate="yes" xml:space="preserve">
          <source>For more information about this option, see &lt;a href=&quot;#method.join_multicast_v4&quot;&gt;&lt;code&gt;join_multicast_v4&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このオプションの詳細については、&lt;a href=&quot;#method.join_multicast_v4&quot;&gt; &lt;code&gt;join_multicast_v4&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="57833ee07247599f44cb309fde1124280eb648a4" translate="yes" xml:space="preserve">
          <source>For more information about this option, see &lt;a href=&quot;#method.join_multicast_v6&quot;&gt;&lt;code&gt;join_multicast_v6&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このオプションの詳細については、&lt;a href=&quot;#method.join_multicast_v6&quot;&gt; &lt;code&gt;join_multicast_v6&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="3ce681618c57caf981736423d26acc94ae89b21d" translate="yes" xml:space="preserve">
          <source>For more information about this option, see &lt;a href=&quot;#method.set_broadcast&quot;&gt;&lt;code&gt;set_broadcast&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このオプションの詳細については、&lt;a href=&quot;#method.set_broadcast&quot;&gt; &lt;code&gt;set_broadcast&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="395c58ec3f6bc027abde9bbf9fad1f4f5468d568" translate="yes" xml:space="preserve">
          <source>For more information about this option, see &lt;a href=&quot;#method.set_multicast_loop_v4&quot;&gt;&lt;code&gt;set_multicast_loop_v4&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このオプションの詳細については、&lt;a href=&quot;#method.set_multicast_loop_v4&quot;&gt; &lt;code&gt;set_multicast_loop_v4&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="19a25d5021da7a65fa90afdcaa8c94b2d240f4ea" translate="yes" xml:space="preserve">
          <source>For more information about this option, see &lt;a href=&quot;#method.set_multicast_loop_v6&quot;&gt;&lt;code&gt;set_multicast_loop_v6&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このオプションの詳細については、&lt;a href=&quot;#method.set_multicast_loop_v6&quot;&gt; &lt;code&gt;set_multicast_loop_v6&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="df749fde579be395be3ce58123ceffc9653388c3" translate="yes" xml:space="preserve">
          <source>For more information about this option, see &lt;a href=&quot;#method.set_multicast_ttl_v4&quot;&gt;&lt;code&gt;set_multicast_ttl_v4&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このオプションの詳細については、&lt;a href=&quot;#method.set_multicast_ttl_v4&quot;&gt; &lt;code&gt;set_multicast_ttl_v4&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="6c0d794b98dbf3eac083b7075a715bd37c850949" translate="yes" xml:space="preserve">
          <source>For more information about this option, see &lt;a href=&quot;#method.set_nodelay&quot;&gt;&lt;code&gt;set_nodelay&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このオプションの詳細については、&lt;a href=&quot;#method.set_nodelay&quot;&gt; &lt;code&gt;set_nodelay&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="f6e7cb5f78e58ab89345b5ca811fb23b56f9162d" translate="yes" xml:space="preserve">
          <source>For more information about this option, see &lt;a href=&quot;#method.set_ttl&quot;&gt;&lt;code&gt;set_ttl&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このオプションの詳細については、&lt;a href=&quot;#method.set_ttl&quot;&gt; &lt;code&gt;set_ttl&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="2a394bc2e818a902cb20ef60be1aacfb5b6bed5f" translate="yes" xml:space="preserve">
          <source>For more information about this option, see &lt;a href=&quot;struct.tcplistener#method.set_ttl&quot;&gt;&lt;code&gt;TcpListener::set_ttl&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このオプションの詳細については、&lt;a href=&quot;struct.tcplistener#method.set_ttl&quot;&gt; &lt;code&gt;TcpListener::set_ttl&lt;/code&gt; &lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="4aa7c5c36f089ee6dcc230b22a43e81dfd29e6b2" translate="yes" xml:space="preserve">
          <source>For more information about this option, see &lt;a href=&quot;struct.tcpstream#method.set_nodelay&quot;&gt;&lt;code&gt;TcpStream::set_nodelay&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このオプションの詳細については、&lt;a href=&quot;struct.tcpstream#method.set_nodelay&quot;&gt; &lt;code&gt;TcpStream::set_nodelay&lt;/code&gt; &lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="5f687f34df5c1fceb0c2f349452aeb54b4703e77" translate="yes" xml:space="preserve">
          <source>For more information about this option, see &lt;a href=&quot;struct.tcpstream#method.set_ttl&quot;&gt;&lt;code&gt;TcpStream::set_ttl&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このオプションの詳細については、&lt;a href=&quot;struct.tcpstream#method.set_ttl&quot;&gt; &lt;code&gt;TcpStream::set_ttl&lt;/code&gt; &lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="9e3059868c3caa8fd899a2dfbced1ef7fac82dec" translate="yes" xml:space="preserve">
          <source>For more information about this option, see &lt;a href=&quot;struct.udpsocket#method.join_multicast_v4&quot;&gt;&lt;code&gt;UdpSocket::join_multicast_v4&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このオプションの詳細については、&lt;a href=&quot;struct.udpsocket#method.join_multicast_v4&quot;&gt; &lt;code&gt;UdpSocket::join_multicast_v4&lt;/code&gt; &lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="a3a6b546e03443d3c886b47248d82d04304e9248" translate="yes" xml:space="preserve">
          <source>For more information about this option, see &lt;a href=&quot;struct.udpsocket#method.join_multicast_v6&quot;&gt;&lt;code&gt;UdpSocket::join_multicast_v6&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このオプションの詳細については、&lt;a href=&quot;struct.udpsocket#method.join_multicast_v6&quot;&gt; &lt;code&gt;UdpSocket::join_multicast_v6&lt;/code&gt; &lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="8976685aa3713d913257de37c43c4da5f4633071" translate="yes" xml:space="preserve">
          <source>For more information about this option, see &lt;a href=&quot;struct.udpsocket#method.set_broadcast&quot;&gt;&lt;code&gt;UdpSocket::set_broadcast&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このオプションの詳細については、&lt;a href=&quot;struct.udpsocket#method.set_broadcast&quot;&gt; &lt;code&gt;UdpSocket::set_broadcast&lt;/code&gt; &lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="07036701bb4372022b206f78e36755f596630148" translate="yes" xml:space="preserve">
          <source>For more information about this option, see &lt;a href=&quot;struct.udpsocket#method.set_multicast_loop_v4&quot;&gt;&lt;code&gt;UdpSocket::set_multicast_loop_v4&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このオプションの詳細については、&lt;a href=&quot;struct.udpsocket#method.set_multicast_loop_v4&quot;&gt; &lt;code&gt;UdpSocket::set_multicast_loop_v4&lt;/code&gt; &lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="35ff8940232500740f176ac52d9cff14d41ab14b" translate="yes" xml:space="preserve">
          <source>For more information about this option, see &lt;a href=&quot;struct.udpsocket#method.set_multicast_loop_v6&quot;&gt;&lt;code&gt;UdpSocket::set_multicast_loop_v6&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このオプションの詳細については、&lt;a href=&quot;struct.udpsocket#method.set_multicast_loop_v6&quot;&gt; &lt;code&gt;UdpSocket::set_multicast_loop_v6&lt;/code&gt; &lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="4078ff38e27b60f80025612aee1ce51e84fa1526" translate="yes" xml:space="preserve">
          <source>For more information about this option, see &lt;a href=&quot;struct.udpsocket#method.set_multicast_ttl_v4&quot;&gt;&lt;code&gt;UdpSocket::set_multicast_ttl_v4&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このオプションの詳細については、&lt;a href=&quot;struct.udpsocket#method.set_multicast_ttl_v4&quot;&gt; &lt;code&gt;UdpSocket::set_multicast_ttl_v4&lt;/code&gt; &lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="ec0b5493666a5b9737f7e29ab01f3a736aa6fac1" translate="yes" xml:space="preserve">
          <source>For more information about this option, see &lt;a href=&quot;struct.udpsocket#method.set_ttl&quot;&gt;&lt;code&gt;UdpSocket::set_ttl&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このオプションの詳細については、&lt;a href=&quot;struct.udpsocket#method.set_ttl&quot;&gt; &lt;code&gt;UdpSocket::set_ttl&lt;/code&gt; &lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="d5fe57c8b77795ff593ae38ee9a6c491d030bcba" translate="yes" xml:space="preserve">
          <source>For more information about type casts, take a look at the section of the &lt;a href=&quot;reference/expressions/operator-expr#type-cast-expressions&quot;&gt;The Rust Reference&lt;/a&gt; on type cast expressions.</source>
          <target state="translated">型キャストの詳細については、型キャスト式に関する&lt;a href=&quot;reference/expressions/operator-expr#type-cast-expressions&quot;&gt;Rustリファレンスの&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="16217596c793a9bbadfbe3ea0e828a9914e8bd03" translate="yes" xml:space="preserve">
          <source>For more information and a list of supported ABIs, see [the nomicon's section on foreign calling conventions][nomicon-abi].</source>
          <target state="translated">より詳細な情報とサポートされているABIのリストは、[nomiconの外国語呼出規約に関するセクション][nomicon-abi]を参照してください。</target>
        </trans-unit>
        <trans-unit id="d5bf128360e21745d96296482aa04348caf9fa97" translate="yes" xml:space="preserve">
          <source>For more information on &lt;code&gt;if&lt;/code&gt; expressions, see the &lt;a href=&quot;../book/ch03-05-control-flow#if-expressions&quot;&gt;Rust book&lt;/a&gt; or the &lt;a href=&quot;../reference/expressions/if-expr&quot;&gt;Reference&lt;/a&gt;.</source>
          <target state="translated">詳細については &lt;code&gt;if&lt;/code&gt; の表現、見る&lt;a href=&quot;../book/ch03-05-control-flow#if-expressions&quot;&gt;錆ブック&lt;/a&gt;または&lt;a href=&quot;../reference/expressions/if-expr&quot;&gt;参照を&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="26c4f344d22bc81326bce9f0d84393a6ba5329dd" translate="yes" xml:space="preserve">
          <source>For more information on &lt;code&gt;impl Trait&lt;/code&gt; syntax, see the &lt;a href=&quot;../book/ch10-02-traits#returning-types-that-implement-traits&quot;&gt;Rust book&lt;/a&gt;.</source>
          <target state="translated">詳細については &lt;code&gt;impl Trait&lt;/code&gt; 構文、参照&lt;a href=&quot;../book/ch10-02-traits#returning-types-that-implement-traits&quot;&gt;錆の本を&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8baad10e10ead72e523430c806f5046d53166956" translate="yes" xml:space="preserve">
          <source>For more information on &lt;code&gt;loop&lt;/code&gt; and loops in general, see the &lt;a href=&quot;../reference/expressions/loop-expr&quot;&gt;Reference&lt;/a&gt;.</source>
          <target state="translated">詳細については &lt;code&gt;loop&lt;/code&gt; 全般やループ、参照&lt;a href=&quot;../reference/expressions/loop-expr&quot;&gt;リファレンス&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0d9e2e99793fab9dd3626d998768ee865c474bfd" translate="yes" xml:space="preserve">
          <source>For more information on &lt;code&gt;match&lt;/code&gt; and matching in general, see the &lt;a href=&quot;../reference/expressions/match-expr&quot;&gt;Reference&lt;/a&gt;.</source>
          <target state="translated">詳細については &lt;code&gt;match&lt;/code&gt; 全般とのマッチング、参照&lt;a href=&quot;../reference/expressions/match-expr&quot;&gt;リファレンス&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0710e2e1ea383271033954b11a70c7bad7ea2cb4" translate="yes" xml:space="preserve">
          <source>For more information on &lt;code&gt;use&lt;/code&gt; and paths in general, see the &lt;a href=&quot;../reference/items/use-declarations&quot;&gt;Reference&lt;/a&gt;.</source>
          <target state="translated">詳細については &lt;code&gt;use&lt;/code&gt; 全般とパス、参照&lt;a href=&quot;../reference/items/use-declarations&quot;&gt;リファレンス&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e3d8b3ebb20cee3aad696e4716ebdeb83e61bc82" translate="yes" xml:space="preserve">
          <source>For more information on &lt;code&gt;while&lt;/code&gt; and loops in general, see the &lt;a href=&quot;../reference/expressions/loop-expr#predicate-loops&quot;&gt;reference&lt;/a&gt;.</source>
          <target state="translated">詳細については、 &lt;code&gt;while&lt;/code&gt; 一般にとループ、参照&lt;a href=&quot;../reference/expressions/loop-expr#predicate-loops&quot;&gt;参照&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f290aa363db2393559b1506887c6b8507f90da13" translate="yes" xml:space="preserve">
          <source>For more information on Clippy, see &lt;a href=&quot;https://github.com/rust-lang/rust-clippy&quot;&gt;its documentation&lt;/a&gt;.</source>
          <target state="translated">Clippyの詳細については&lt;a href=&quot;https://github.com/rust-lang/rust-clippy&quot;&gt;、そのドキュメントを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="38db950fcbbf4fcba31dce2f10974dd6a5fef98a" translate="yes" xml:space="preserve">
          <source>For more information on FFI, check the &lt;a href=&quot;../book/ch19-01-unsafe-rust#using-extern-functions-to-call-external-code&quot;&gt;Rust book&lt;/a&gt; or the &lt;a href=&quot;../reference/items/external-blocks&quot;&gt;Reference&lt;/a&gt;.</source>
          <target state="translated">FFIの詳細については、&lt;a href=&quot;../book/ch19-01-unsafe-rust#using-extern-functions-to-call-external-code&quot;&gt;Rustブック&lt;/a&gt;または&lt;a href=&quot;../reference/items/external-blocks&quot;&gt;リファレンスを&lt;/a&gt;確認してください。</target>
        </trans-unit>
        <trans-unit id="d641d6c32a05462a1486b1dc6324213dda8812b9" translate="yes" xml:space="preserve">
          <source>For more information on Rust's ownership system, take a look at the &lt;a href=&quot;book/ch04-02-references-and-borrowing&quot;&gt;References &amp;amp; Borrowing&lt;/a&gt; section of the Book.</source>
          <target state="translated">Rustの所有権システムの詳細については、本の「&lt;a href=&quot;book/ch04-02-references-and-borrowing&quot;&gt;参照と借用」&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="285f1b877490199173d757dddff730450bb4b01f" translate="yes" xml:space="preserve">
          <source>For more information on floating point numbers, see &lt;a href=&quot;https://en.wikipedia.org/wiki/Single-precision_floating-point_format&quot;&gt;Wikipedia&lt;/a&gt;.</source>
          <target state="translated">浮動小数点数の詳細については、&lt;a href=&quot;https://en.wikipedia.org/wiki/Single-precision_floating-point_format&quot;&gt;ウィキペディアを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="ee24777d534cc43d3f116683cebd1988effa8023" translate="yes" xml:space="preserve">
          <source>For more information on for-loops, see the &lt;a href=&quot;../book/ch03-05-control-flow#looping-through-a-collection-with-for&quot;&gt;Rust book&lt;/a&gt; or the &lt;a href=&quot;../reference/expressions/loop-expr#iterator-loops&quot;&gt;Reference&lt;/a&gt;.</source>
          <target state="translated">forループの詳細については、&lt;a href=&quot;../book/ch03-05-control-flow#looping-through-a-collection-with-for&quot;&gt;Rustブック&lt;/a&gt;または&lt;a href=&quot;../reference/expressions/loop-expr#iterator-loops&quot;&gt;リファレンスを参照してください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a24996038d4cee454655450978dea7d8a2b46904" translate="yes" xml:space="preserve">
          <source>For more information on formatters, see &lt;a href=&quot;https://doc.rust-lang.org/core/fmt/index.html&quot;&gt;the module-level documentation&lt;/a&gt;.</source>
          <target state="translated">フォーマッタの詳細について&lt;a href=&quot;https://doc.rust-lang.org/core/fmt/index.html&quot;&gt;は、モジュールレベルのドキュメントを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="53ad00a80543ba5ff60480a82f25b9b9fc2fe15a" translate="yes" xml:space="preserve">
          <source>For more information on formatters, see &lt;a href=&quot;index&quot;&gt;the module-level documentation&lt;/a&gt;.</source>
          <target state="translated">フォーマッタの詳細について&lt;a href=&quot;index&quot;&gt;は、モジュールレベルのドキュメントを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="ff3812b259ec258484f134f2413ea468207c8e57" translate="yes" xml:space="preserve">
          <source>For more information on how to use references, see &lt;a href=&quot;../book/ch04-02-references-and-borrowing&quot;&gt;the book's section on &quot;References and Borrowing&quot;&lt;/a&gt;.</source>
          <target state="translated">参照の使用方法の詳細については&lt;a href=&quot;../book/ch04-02-references-and-borrowing&quot;&gt;、「参照と借用」に関する本のセクションを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="ab47fbe22d48e3b8af90238a1671382c62540270" translate="yes" xml:space="preserve">
          <source>For more information on implementations, see the &lt;a href=&quot;../book/ch05-03-method-syntax&quot;&gt;Rust book&lt;/a&gt; or the &lt;a href=&quot;../reference/items/implementations&quot;&gt;Reference&lt;/a&gt;.</source>
          <target state="translated">実装の詳細については、&lt;a href=&quot;../book/ch05-03-method-syntax&quot;&gt;Rustブック&lt;/a&gt;または&lt;a href=&quot;../reference/items/implementations&quot;&gt;リファレンスを参照してください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="cd2bcc840b6d179d8b0cd5dcc59be377dcf31780" translate="yes" xml:space="preserve">
          <source>For more information on structs, take a look at the &lt;a href=&quot;../book/ch05-01-defining-structs&quot;&gt;Rust Book&lt;/a&gt; or the &lt;a href=&quot;../reference/items/structs&quot;&gt;Reference&lt;/a&gt;.</source>
          <target state="translated">構造体の詳細については、&lt;a href=&quot;../book/ch05-01-defining-structs&quot;&gt;Rust Book&lt;/a&gt;または&lt;a href=&quot;../reference/items/structs&quot;&gt;Referenceを参照してください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5ce49c995bb1152375ebd2c5ecd45128ba41cc83" translate="yes" xml:space="preserve">
          <source>For more information on the &lt;code&gt;let&lt;/code&gt; keyword, see the &lt;a href=&quot;../book/ch18-01-all-the-places-for-patterns#let-statements&quot;&gt;Rust book&lt;/a&gt; or the &lt;a href=&quot;../reference/statements#let-statements&quot;&gt;Reference&lt;/a&gt;</source>
          <target state="translated">詳細について &lt;code&gt;let&lt;/code&gt; キーワード、参照&lt;a href=&quot;../book/ch18-01-all-the-places-for-patterns#let-statements&quot;&gt;錆ブック&lt;/a&gt;や&lt;a href=&quot;../reference/statements#let-statements&quot;&gt;リファレンス&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="55f4ff0283f817ff45a08f2d5b8976730a7bb67c" translate="yes" xml:space="preserve">
          <source>For more information on the &lt;code&gt;move&lt;/code&gt; keyword, see the &lt;a href=&quot;../book/ch13-01-closures&quot;&gt;closure&lt;/a&gt;'s section of the Rust book or the &lt;a href=&quot;../book/ch16-01-threads#using-move-closures-with-threads&quot;&gt;threads&lt;/a&gt; section</source>
          <target state="translated">詳細については &lt;code&gt;move&lt;/code&gt; キーワード、参照&lt;a href=&quot;../book/ch13-01-closures&quot;&gt;閉鎖&lt;/a&gt;の錆の本のセクションまたは&lt;a href=&quot;../book/ch16-01-threads#using-move-closures-with-threads&quot;&gt;スレッドの&lt;/a&gt;セクションを</target>
        </trans-unit>
        <trans-unit id="5404b7f8ed3a8699d7f7e7b750cd0c12cdb64a72" translate="yes" xml:space="preserve">
          <source>For more information on the &lt;code&gt;pub&lt;/code&gt; keyword, please see the visibility section of the &lt;a href=&quot;../reference/visibility-and-privacy?highlight=pub#visibility-and-privacy&quot;&gt;reference&lt;/a&gt; and for some examples, see &lt;a href=&quot;https://doc.rust-lang.org/rust-by-example/mod/visibility.html&quot;&gt;Rust by Example&lt;/a&gt;.</source>
          <target state="translated">詳細については &lt;code&gt;pub&lt;/code&gt; キーワードの可視セクションを参照してください&lt;a href=&quot;../reference/visibility-and-privacy?highlight=pub#visibility-and-privacy&quot;&gt;参照を&lt;/a&gt;し、いくつかの例については、参照&lt;a href=&quot;https://doc.rust-lang.org/rust-by-example/mod/visibility.html&quot;&gt;例による錆を&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3cc632ff0cf0c0731c6a179ab2eab0a11d96c7a4" translate="yes" xml:space="preserve">
          <source>For more information on the &lt;code&gt;rls&lt;/code&gt;, see &lt;a href=&quot;https://github.com/rust-lang/rls&quot;&gt;its documentation&lt;/a&gt;.</source>
          <target state="translated">詳細については &lt;code&gt;rls&lt;/code&gt; 、参照&lt;a href=&quot;https://github.com/rust-lang/rls&quot;&gt;マニュアルの&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e3863c21d325c3c3d855add8a948767200d6c9d5" translate="yes" xml:space="preserve">
          <source>For more information on the effect of async, see &lt;a href=&quot;../expressions/block-expr#async-blocks&quot;&gt;&lt;code&gt;async&lt;/code&gt; blocks&lt;/a&gt;.</source>
          <target state="translated">asyncの効果の詳細については、&lt;a href=&quot;../expressions/block-expr#async-blocks&quot;&gt; &lt;code&gt;async&lt;/code&gt; ブロックを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="b5291eb6d53f544698352ae404ca44de78b99df0" translate="yes" xml:space="preserve">
          <source>For more information on the meaning and layout of the &lt;code&gt;flowinfo&lt;/code&gt; and &lt;code&gt;scope_id&lt;/code&gt; parameters, see &lt;a href=&quot;https://tools.ietf.org/html/rfc2553#section-3.3&quot;&gt;IETF RFC 2553, Section 3.3&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;flowinfo&lt;/code&gt; および &lt;code&gt;scope_id&lt;/code&gt; パラメータの意味とレイアウトの詳細については、&lt;a href=&quot;https://tools.ietf.org/html/rfc2553#section-3.3&quot;&gt;IETF RFC 2553、セクション3.3を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="e9e3e7095c9863573782cdbe8dd1a7bbcbf2fb4f" translate="yes" xml:space="preserve">
          <source>For more information on the rust ownership system, take a look at https://doc.rust-lang.org/book/ch04-02-references-and-borrowing.html.</source>
          <target state="translated">サビの所有権制度については、https://doc.rust-lang.org/book/ch04-02-references-and-borrowing.html。</target>
        </trans-unit>
        <trans-unit id="dd65d29db2c0c0e3fa4010b1a534ac28777bc593" translate="yes" xml:space="preserve">
          <source>For more information on the various types of functions and how they're used, consult the &lt;a href=&quot;../book/ch03-03-how-functions-work&quot;&gt;Rust book&lt;/a&gt; or the &lt;a href=&quot;../reference/items/functions&quot;&gt;Reference&lt;/a&gt;.</source>
          <target state="translated">さまざまなタイプの関数とその使用方法の詳細については、&lt;a href=&quot;../book/ch03-03-how-functions-work&quot;&gt;Rustブック&lt;/a&gt;または&lt;a href=&quot;../reference/items/functions&quot;&gt;リファレンスを参照してください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ba53489dfe57a910985fb20af8e3e6d3e80de7b1" translate="yes" xml:space="preserve">
          <source>For more information on what &lt;code&gt;as&lt;/code&gt; is capable of, see the &lt;a href=&quot;../reference/expressions/operator-expr#type-cast-expressions&quot;&gt;Reference&lt;/a&gt;</source>
          <target state="translated">何についての詳細 &lt;code&gt;as&lt;/code&gt; が可能であり、参照&lt;a href=&quot;../reference/expressions/operator-expr#type-cast-expressions&quot;&gt;リファレンス&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1294a54cecd68adbf06bcf29dd93bf0d7224b50a" translate="yes" xml:space="preserve">
          <source>For more information see the &lt;a href=&quot;https://doc.rust-lang.org/nomicon/atomics.html&quot;&gt;nomicon&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;https://doc.rust-lang.org/nomicon/atomics.html&quot;&gt;nomiconを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="2722cfdeb47cf791bc768e784fd872da493e862a" translate="yes" xml:space="preserve">
          <source>For more information see the &lt;a href=&quot;reference/attributes/codegen#the-inline-attribute&quot;&gt;&lt;code&gt;inline&lt;/code&gt; Attribute&lt;/a&gt; section of the Reference.</source>
          <target state="translated">詳細については、リファレンスの&lt;a href=&quot;reference/attributes/codegen#the-inline-attribute&quot;&gt; &lt;code&gt;inline&lt;/code&gt; 属性&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="430f53d43ce499b5fc6e5944890296c5d6682bce" translate="yes" xml:space="preserve">
          <source>For more information see the &lt;a href=&quot;reference/attributes/codegen#the-inline-attribute&quot;&gt;&lt;code&gt;inline&lt;/code&gt; attribute&lt;/a&gt; section of the Reference.</source>
          <target state="translated">詳細については、リファレンスの&lt;a href=&quot;reference/attributes/codegen#the-inline-attribute&quot;&gt; &lt;code&gt;inline&lt;/code&gt; 属性&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="7be2448b1c40c0c0e54b5bb192d0485e421966fb" translate="yes" xml:space="preserve">
          <source>For more information see the Rust Reference on &lt;a href=&quot;reference/visibility-and-privacy&quot;&gt;Visibility&lt;/a&gt;.</source>
          <target state="translated">詳細については、Rust Reference on &lt;a href=&quot;reference/visibility-and-privacy&quot;&gt;Visibilityを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="8d5d738749a358bd9c9bd1e06a8750768118877d" translate="yes" xml:space="preserve">
          <source>For more information, please see &lt;a href=&quot;https://github.com/rust-lang/rfcs/blob/master/text/0447-no-unused-impl-parameters.md&quot;&gt;RFC 447&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;https://github.com/rust-lang/rfcs/blob/master/text/0447-no-unused-impl-parameters.md&quot;&gt;RFC 447&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="81e4e160a9649ee9d3702198e8d0083beee65f16" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;#capacity-and-reallocation&quot;&gt;Capacity and Reallocation&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;#capacity-and-reallocation&quot;&gt;容量と再割り当てを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="ad517b06e20ad9092f17ffc60fe635ca1c292a27" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;https://github.com/rust-lang/rfcs/blob/master/text/0599-default-object-bound.md&quot;&gt;RFC 599&lt;/a&gt; and its amendment &lt;a href=&quot;https://github.com/rust-lang/rfcs/blob/master/text/1156-adjust-default-object-bounds.md&quot;&gt;RFC 1156&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;https://github.com/rust-lang/rfcs/blob/master/text/0599-default-object-bound.md&quot;&gt;RFC 599&lt;/a&gt;およびその改正&lt;a href=&quot;https://github.com/rust-lang/rfcs/blob/master/text/1156-adjust-default-object-bounds.md&quot;&gt;RFC 1156&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9be296727789507d09db0e50484a6ee533f9b657" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;https://github.com/rust-lang/rust/issues/74052&quot;&gt;GitHub issue #74052&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;https://github.com/rust-lang/rust/issues/74052&quot;&gt;GitHubの問題＃74052を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="13280a26e699d624818597363ac11248df07682b" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;macro.write&quot;&gt;&lt;code&gt;write!&lt;/code&gt;&lt;/a&gt;. For information on the format string syntax, see &lt;a href=&quot;fmt/index&quot;&gt;&lt;code&gt;std::fmt&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;macro.write&quot;&gt; &lt;code&gt;write!&lt;/code&gt; &lt;/a&gt;参照してください！。フォーマット文字列の構文については、&lt;a href=&quot;fmt/index&quot;&gt; &lt;code&gt;std::fmt&lt;/code&gt; &lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="8b67eca63270d5078808d08322ebcadad733aa46" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;macro.write&quot;&gt;&lt;code&gt;write!&lt;/code&gt;&lt;/a&gt;. For information on the format string syntax, see &lt;a href=&quot;https://doc.rust-lang.org/core/fmt/index.html&quot;&gt;&lt;code&gt;std::fmt&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;macro.write&quot;&gt; &lt;code&gt;write!&lt;/code&gt; &lt;/a&gt;参照してください。。フォーマット文字列の構文については、&lt;a href=&quot;https://doc.rust-lang.org/core/fmt/index.html&quot;&gt; &lt;code&gt;std::fmt&lt;/code&gt; &lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="105a7b06489677dc75af87ff58131cb813821718" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;type.lockresult&quot;&gt;&lt;code&gt;LockResult&lt;/code&gt;&lt;/a&gt;. A &lt;code&gt;TryLockResult&lt;/code&gt; doesn't necessarily hold the associated guard in the &lt;a href=&quot;../result/enum.result#variant.Err&quot;&gt;&lt;code&gt;Err&lt;/code&gt;&lt;/a&gt; type as the lock may not have been acquired for other reasons.</source>
          <target state="translated">詳細については、&lt;a href=&quot;type.lockresult&quot;&gt; &lt;code&gt;LockResult&lt;/code&gt; を&lt;/a&gt;参照してください。A &lt;code&gt;TryLockResult&lt;/code&gt; は、必ずしもでは、関連するガードを保持していない&lt;a href=&quot;../result/enum.result#variant.Err&quot;&gt; &lt;code&gt;Err&lt;/code&gt; &lt;/a&gt;ロックが他の理由のために取得されていなくてもよいようなタイプ。</target>
        </trans-unit>
        <trans-unit id="061ee0b6c46c6f1de9b553ef8ec0ea2c4506aea3" translate="yes" xml:space="preserve">
          <source>For more information, see the &lt;a href=&quot;fn.stderr&quot;&gt;&lt;code&gt;io::stderr&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">詳細については、&lt;a href=&quot;fn.stderr&quot;&gt; &lt;code&gt;io::stderr&lt;/code&gt; &lt;/a&gt;メソッドを参照してください。</target>
        </trans-unit>
        <trans-unit id="2d8d91c96fdfd1707d627d52a81e7ba2e66f436d" translate="yes" xml:space="preserve">
          <source>For more information, see the documentation in &lt;a href=&quot;fmt/index&quot;&gt;&lt;code&gt;std::fmt&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;fmt/index&quot;&gt; &lt;code&gt;std::fmt&lt;/code&gt; &lt;/a&gt;ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="b075f87a0aa0ececd35398edb04098f5381d1784" translate="yes" xml:space="preserve">
          <source>For more information, see the documentation in &lt;a href=&quot;https://doc.rust-lang.org/core/fmt/index.html&quot;&gt;&lt;code&gt;std::fmt&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;https://doc.rust-lang.org/core/fmt/index.html&quot;&gt; &lt;code&gt;std::fmt&lt;/code&gt; &lt;/a&gt;ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="22b73ddcf768c9c706f3f5ce7c0719488d3f3d0b" translate="yes" xml:space="preserve">
          <source>For more information, take a look at the &lt;a href=&quot;../book/ch06-01-defining-an-enum&quot;&gt;Rust Book&lt;/a&gt; or the &lt;a href=&quot;../reference/items/enumerations&quot;&gt;Reference&lt;/a&gt;</source>
          <target state="translated">詳細については、&lt;a href=&quot;../book/ch06-01-defining-an-enum&quot;&gt;Rust Book&lt;/a&gt;または&lt;a href=&quot;../reference/items/enumerations&quot;&gt;リファレンスを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="1dcd53adc5b18c6de5c84d7a2eea62c7f636c8a4" translate="yes" xml:space="preserve">
          <source>For most filesystems, the operating system guarantees that all writes are atomic: no writes get mangled because another process writes at the same time.</source>
          <target state="translated">ほとんどのファイルシステムでは、オペレーティングシステムはすべての書き込みがアトミックであることを保証しています。</target>
        </trans-unit>
        <trans-unit id="0c93ed371993f23b715f83d6c14f6a2845f0553e" translate="yes" xml:space="preserve">
          <source>For most situations, having all libraries available as a dylib is recommended if dynamically linking. For other situations, the compiler will emit a warning if it is unable to determine which formats to link each library with.</source>
          <target state="translated">ほとんどの状況では、動的にリンクする場合は、すべてのライブラリを dylib として利用できるようにすることをお勧めします。その他の状況では、各ライブラリをどの形式でリンクするか判断できない場合、コンパイラは警告を発します。</target>
        </trans-unit>
        <trans-unit id="f60bc833f920bbe05de763c3c4c66d6c4df0a446" translate="yes" xml:space="preserve">
          <source>For non-numeric types, this can be considered a &quot;maximum width&quot;. If the resulting string is longer than this width, then it is truncated down to this many characters and that truncated value is emitted with proper &lt;code&gt;fill&lt;/code&gt;, &lt;code&gt;alignment&lt;/code&gt; and &lt;code&gt;width&lt;/code&gt; if those parameters are set.</source>
          <target state="translated">非数値型の場合、これは「最大幅」と見なすことができます。結果の文字列がこの幅よりも長い場合、この文字数まで切り捨てられ、その切り捨てられた値は、これらのパラメーターが設定されている場合、適切な &lt;code&gt;fill&lt;/code&gt; 、 &lt;code&gt;alignment&lt;/code&gt; 、および &lt;code&gt;width&lt;/code&gt; されます。</target>
        </trans-unit>
        <trans-unit id="759891ff1588306215a2ec66ea4ffdf3b900cc9a" translate="yes" xml:space="preserve">
          <source>For non-users, a new edition signals that some major advancements have landed, which might make Rust worth another look.</source>
          <target state="translated">非ユーザーにとっては、新版は、いくつかの主要な進歩が上陸したことを示しており、それはRustを再検討する価値があるかもしれません。</target>
        </trans-unit>
        <trans-unit id="032e9d1e38ac32b8d4f9cea98bf791c06db59c12" translate="yes" xml:space="preserve">
          <source>For non-zero-sized values, a &lt;a href=&quot;struct.box&quot;&gt;&lt;code&gt;Box&lt;/code&gt;&lt;/a&gt; will use the &lt;a href=&quot;../alloc/struct.global&quot;&gt;&lt;code&gt;Global&lt;/code&gt;&lt;/a&gt; allocator for its allocation. It is valid to convert both ways between a &lt;a href=&quot;struct.box&quot;&gt;&lt;code&gt;Box&lt;/code&gt;&lt;/a&gt; and a raw pointer allocated with the &lt;a href=&quot;../alloc/struct.global&quot;&gt;&lt;code&gt;Global&lt;/code&gt;&lt;/a&gt; allocator, given that the &lt;a href=&quot;../alloc/struct.layout&quot;&gt;&lt;code&gt;Layout&lt;/code&gt;&lt;/a&gt; used with the allocator is correct for the type. More precisely, a &lt;code&gt;value: *mut T&lt;/code&gt; that has been allocated with the &lt;a href=&quot;../alloc/struct.global&quot;&gt;&lt;code&gt;Global&lt;/code&gt;&lt;/a&gt; allocator with &lt;code&gt;Layout::for_value(&amp;amp;*value)&lt;/code&gt; may be converted into a box using &lt;a href=&quot;struct.box#method.from_raw&quot;&gt;&lt;code&gt;Box::&amp;lt;T&amp;gt;::from_raw(value)&lt;/code&gt;&lt;/a&gt;. Conversely, the memory backing a &lt;code&gt;value: *mut T&lt;/code&gt; obtained from &lt;a href=&quot;struct.box#method.into_raw&quot;&gt;&lt;code&gt;Box::&amp;lt;T&amp;gt;::into_raw&lt;/code&gt;&lt;/a&gt; may be deallocated using the &lt;a href=&quot;../alloc/struct.global&quot;&gt;&lt;code&gt;Global&lt;/code&gt;&lt;/a&gt; allocator with &lt;a href=&quot;../alloc/struct.layout#method.for_value&quot;&gt;&lt;code&gt;Layout::for_value(&amp;amp;*value)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ゼロ以外のサイズの値の場合、&lt;a href=&quot;struct.box&quot;&gt; &lt;code&gt;Box&lt;/code&gt; &lt;/a&gt;はその割り当てに&lt;a href=&quot;../alloc/struct.global&quot;&gt; &lt;code&gt;Global&lt;/code&gt; &lt;/a&gt;アロケーターを使用します。アロケータで使用される&lt;a href=&quot;../alloc/struct.layout&quot;&gt; &lt;code&gt;Layout&lt;/code&gt; &lt;/a&gt;がタイプに対して正しい場合、&lt;a href=&quot;struct.box&quot;&gt; &lt;code&gt;Box&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;../alloc/struct.global&quot;&gt; &lt;code&gt;Global&lt;/code&gt; &lt;/a&gt;アロケータで割り当てられた生のポインタの間で双方向を変換することは有効です。より正確には、 &lt;code&gt;Layout::for_value(&amp;amp;*value)&lt;/code&gt; を使用して&lt;a href=&quot;../alloc/struct.global&quot;&gt; &lt;code&gt;Global&lt;/code&gt; &lt;/a&gt;アロケーターで割り当てられた &lt;code&gt;value: *mut T&lt;/code&gt; 、&lt;a href=&quot;struct.box#method.from_raw&quot;&gt; &lt;code&gt;Box::&amp;lt;T&amp;gt;::from_raw(value)&lt;/code&gt; &lt;/a&gt;を使用してボックスに変換できます。逆に、 &lt;code&gt;value: *mut T&lt;/code&gt; 裏付けるメモリ：* &lt;a href=&quot;struct.box#method.into_raw&quot;&gt; &lt;code&gt;Box::&amp;lt;T&amp;gt;::into_raw&lt;/code&gt; &lt;/a&gt;から取得したmutTは、&lt;a href=&quot;../alloc/struct.global&quot;&gt; &lt;code&gt;Global&lt;/code&gt; &lt;/a&gt;を使用して割り当てを解除できます。&lt;a href=&quot;../alloc/struct.layout#method.for_value&quot;&gt; &lt;code&gt;Layout::for_value(&amp;amp;*value)&lt;/code&gt; &lt;/a&gt;アロケーター。</target>
        </trans-unit>
        <trans-unit id="8be924402e1b9e352b3e21f3848f1b4490ef1405" translate="yes" xml:space="preserve">
          <source>For non-zero-sized values, a &lt;a href=&quot;struct.box&quot;&gt;&lt;code&gt;Box&lt;/code&gt;&lt;/a&gt; will use the &lt;a href=&quot;../alloc/struct.global&quot;&gt;&lt;code&gt;Global&lt;/code&gt;&lt;/a&gt; allocator for its allocation. It is valid to convert both ways between a &lt;a href=&quot;struct.box&quot;&gt;&lt;code&gt;Box&lt;/code&gt;&lt;/a&gt; and a raw pointer allocated with the &lt;a href=&quot;../alloc/struct.global&quot;&gt;&lt;code&gt;Global&lt;/code&gt;&lt;/a&gt; allocator, given that the &lt;a href=&quot;../alloc/struct.layout&quot;&gt;&lt;code&gt;Layout&lt;/code&gt;&lt;/a&gt; used with the allocator is correct for the type. More precisely, a &lt;code&gt;value: *mut T&lt;/code&gt; that has been allocated with the &lt;a href=&quot;../alloc/struct.global&quot;&gt;&lt;code&gt;Global&lt;/code&gt;&lt;/a&gt; allocator with &lt;code&gt;Layout::for_value(&amp;amp;*value)&lt;/code&gt; may be converted into a box using &lt;code&gt;Box::&amp;lt;T&amp;gt;::from_raw(value)&lt;/code&gt;. Conversely, the memory backing a &lt;code&gt;value: *mut T&lt;/code&gt; obtained from &lt;code&gt;Box::&amp;lt;T&amp;gt;::into_raw&lt;/code&gt; may be deallocated using the &lt;a href=&quot;../alloc/struct.global&quot;&gt;&lt;code&gt;Global&lt;/code&gt;&lt;/a&gt; allocator with &lt;code&gt;Layout::for_value(&amp;amp;*value)&lt;/code&gt;.</source>
          <target state="translated">サイズがゼロ以外の値の場合、&lt;a href=&quot;struct.box&quot;&gt; &lt;code&gt;Box&lt;/code&gt; &lt;/a&gt;はその割り当てに&lt;a href=&quot;../alloc/struct.global&quot;&gt; &lt;code&gt;Global&lt;/code&gt; &lt;/a&gt;アロケーターを使用します。間の両方の方法で変換することが有効である&lt;a href=&quot;struct.box&quot;&gt; &lt;code&gt;Box&lt;/code&gt; &lt;/a&gt;とが割り当てられた生のポインタ&lt;a href=&quot;../alloc/struct.global&quot;&gt; &lt;code&gt;Global&lt;/code&gt; &lt;/a&gt;ことを考えると、アロケータを&lt;a href=&quot;../alloc/struct.layout&quot;&gt; &lt;code&gt;Layout&lt;/code&gt; &lt;/a&gt;アロケータで使用されるタイプの正しいあります。より正確には、 &lt;code&gt;Layout::for_value(&amp;amp;*value)&lt;/code&gt; の&lt;a href=&quot;../alloc/struct.global&quot;&gt; &lt;code&gt;Global&lt;/code&gt; &lt;/a&gt;アロケーターで割り当てられた &lt;code&gt;value: *mut T&lt;/code&gt; 、 &lt;code&gt;Box::&amp;lt;T&amp;gt;::from_raw(value)&lt;/code&gt; を使用してボックスに変換できます。逆に、 &lt;code&gt;value: *mut T&lt;/code&gt; バッキングするメモリ： &lt;code&gt;Box::&amp;lt;T&amp;gt;::into_raw&lt;/code&gt; から取得した* mut Tは、&lt;a href=&quot;../alloc/struct.global&quot;&gt; &lt;code&gt;Global&lt;/code&gt; &lt;/a&gt;を使用して割り当てを解除できます &lt;code&gt;Layout::for_value(&amp;amp;*value)&lt;/code&gt; 持つアロケータ。</target>
        </trans-unit>
        <trans-unit id="54643b534ba092bdf13786f2ee7895ae533d1d71" translate="yes" xml:space="preserve">
          <source>For now, let&amp;rsquo;s ignore the top two lines and focus on the function to see how it works. Note the &lt;code&gt;#[test]&lt;/code&gt; annotation before the &lt;code&gt;fn&lt;/code&gt; line: this attribute indicates this is a test function, so the test runner knows to treat this function as a test. We could also have non-test functions in the &lt;code&gt;tests&lt;/code&gt; module to help set up common scenarios or perform common operations, so we need to indicate which functions are tests by using the &lt;code&gt;#[test]&lt;/code&gt; attribute.</source>
          <target state="translated">とりあえず、上の2行を無視して、関数に焦点を当てて、関数がどのように機能するかを見てみましょう。 &lt;code&gt;fn&lt;/code&gt; 行の前の &lt;code&gt;#[test]&lt;/code&gt; 注釈に注意してください。この属性はこれがテスト関数であることを示しているため、テストランナーはこの関数をテストとして扱うことを知っています。 &lt;code&gt;tests&lt;/code&gt; モジュールに非テスト関数を含めて、一般的なシナリオを設定したり、一般的な操作を実行したりすることもできます。そのため、 &lt;code&gt;#[test]&lt;/code&gt; 属性を使用して、テストする関数を指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="2e33cfb6813b2ec50a1428dbe54a0333feee6ab7" translate="yes" xml:space="preserve">
          <source>For now, our handling of the stream consists of calling &lt;code&gt;unwrap&lt;/code&gt; to terminate our program if the stream has any errors; if there aren&amp;rsquo;t any errors, the program prints a message. We&amp;rsquo;ll add more functionality for the success case in the next listing. The reason we might receive errors from the &lt;code&gt;incoming&lt;/code&gt; method when a client connects to the server is that we&amp;rsquo;re not actually iterating over connections. Instead, we&amp;rsquo;re iterating over &lt;em&gt;connection attempts&lt;/em&gt;. The connection might not be successful for a number of reasons, many of them operating system specific. For example, many operating systems have a limit to the number of simultaneous open connections they can support; new connection attempts beyond that number will produce an error until some of the open connections are closed.</source>
          <target state="translated">&lt;code&gt;unwrap&lt;/code&gt; 、ストリームの処理は、ストリームにエラーがある場合にunwrapを呼び出してプログラムを終了することで構成されています。エラーがない場合、プログラムはメッセージを出力します。次のリストでは、成功した場合の機能を追加します。クライアントがサーバーに接続するときに &lt;code&gt;incoming&lt;/code&gt; メソッドからエラーを受け取る可能性があるのは、実際には接続を反復していないためです。代わりに、&lt;em&gt;接続試行を&lt;/em&gt;繰り返します&lt;em&gt;&lt;/em&gt;。接続は、いくつかの理由で成功しない可能性があります。それらの多くはオペレーティングシステム固有のものです。たとえば、多くのオペレーティングシステムでは、サポートできる同時オープン接続の数に制限があります。その数を超える新しい接続試行は、開いている接続の一部が閉じられるまでエラーを生成します。</target>
        </trans-unit>
        <trans-unit id="a1f6c1be5a9e80f33cd381d2dcb445e8ff860c04" translate="yes" xml:space="preserve">
          <source>For optimal performance, collections will generally avoid shrinking themselves. If you believe that a collection will not soon contain any more elements, or just really need the memory, the &lt;code&gt;shrink_to_fit&lt;/code&gt; method prompts the collection to shrink the backing array to the minimum size capable of holding its elements.</source>
          <target state="translated">最適なパフォーマンスを得るために、コレクションは通常、それ自体の縮小を回避します。コレクションにすぐに要素が含まれなくなる、または本当にメモリが必要になると思われる場合は、 &lt;code&gt;shrink_to_fit&lt;/code&gt; メソッドはコレクションに、配列を要素を保持できる最小サイズに縮小するように要求します。</target>
        </trans-unit>
        <trans-unit id="cd7c16642fc855b86a6681106c12d1bc5cae24fe" translate="yes" xml:space="preserve">
          <source>For other types an index expression &lt;code&gt;a[b]&lt;/code&gt; is equivalent to &lt;code&gt;*std::ops::Index::index(&amp;amp;a, b)&lt;/code&gt;, or &lt;code&gt;*std::ops::IndexMut::index_mut(&amp;amp;mut a, b)&lt;/code&gt; in a mutable place expression context. Just as with methods, Rust will also insert dereference operations on &lt;code&gt;a&lt;/code&gt; repeatedly to find an implementation.</source>
          <target state="translated">他のタイプの場合、インデックス式 &lt;code&gt;a[b]&lt;/code&gt; は &lt;code&gt;*std::ops::Index::index(&amp;amp;a, b)&lt;/code&gt; 、またはaの &lt;code&gt;*std::ops::IndexMut::index_mut(&amp;amp;mut a, b)&lt;/code&gt; と同等です。変更可能な場所式のコンテキスト。ちょうど方法と同様に、錆も上の間接参照操作を挿入する実装を見つけるために繰り返し。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="13c849dda2f0ae7e001d50a92c5a1d89fda3d6fe" translate="yes" xml:space="preserve">
          <source>For our final project, we&amp;rsquo;ll make a web server that says &amp;ldquo;hello&amp;rdquo; and looks like Figure 20-1 in a web browser.</source>
          <target state="translated">最終的なプロジェクトでは、「こんにちは」と表示し、Webブラウザーで図20-1のようなWebサーバーを作成します。</target>
        </trans-unit>
        <trans-unit id="d255769548dbb0d1d2dd3966fe6705e70e8ba063" translate="yes" xml:space="preserve">
          <source>For primitive signed integers (&lt;a href=&quot;../primitive.i8&quot;&gt;&lt;code&gt;i8&lt;/code&gt;&lt;/a&gt; to &lt;a href=&quot;../primitive.i128&quot;&gt;&lt;code&gt;i128&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../primitive.isize&quot;&gt;&lt;code&gt;isize&lt;/code&gt;&lt;/a&gt;), negative values are formatted as the two&amp;rsquo;s complement representation.</source>
          <target state="translated">プリミティブ符号付き整数（&lt;a href=&quot;../primitive.i8&quot;&gt; &lt;code&gt;i8&lt;/code&gt; &lt;/a&gt;から&lt;a href=&quot;../primitive.i128&quot;&gt; &lt;code&gt;i128&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;../primitive.isize&quot;&gt; &lt;code&gt;isize&lt;/code&gt; &lt;/a&gt;）の場合、負の値は2の補数表現としてフォーマットされます。</target>
        </trans-unit>
        <trans-unit id="aac9f771ea2b1ce33ddd4c4adcf5da0c753c4439" translate="yes" xml:space="preserve">
          <source>For primitive signed integers (&lt;code&gt;i8&lt;/code&gt; to &lt;code&gt;i128&lt;/code&gt;, and &lt;code&gt;isize&lt;/code&gt;), negative values are formatted as the two&amp;rsquo;s complement representation.</source>
          <target state="translated">プリミティブ符号付き整数（ &lt;code&gt;i8&lt;/code&gt; から &lt;code&gt;i128&lt;/code&gt; 、および &lt;code&gt;isize&lt;/code&gt; ）の場合、負の値は2の補数表現としてフォーマットされます。</target>
        </trans-unit>
        <trans-unit id="ce2928dd11d16b979a65e7e0873fbf1de3498202" translate="yes" xml:space="preserve">
          <source>For regions of memory which might overlap, use &lt;a href=&quot;../ptr/fn.copy&quot;&gt;&lt;code&gt;copy&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">重複する可能性のあるメモリ領域については、代わりに&lt;a href=&quot;../ptr/fn.copy&quot;&gt; &lt;code&gt;copy&lt;/code&gt; &lt;/a&gt;使用してください。</target>
        </trans-unit>
        <trans-unit id="c3f7e3e69f692e2801e97c9dcecae515bd256300" translate="yes" xml:space="preserve">
          <source>For regions of memory which might overlap, use &lt;a href=&quot;fn.copy&quot;&gt;&lt;code&gt;copy&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">重複する可能性のあるメモリ領域の場合は、代わりに&lt;a href=&quot;fn.copy&quot;&gt; &lt;code&gt;copy&lt;/code&gt; &lt;/a&gt;を使用します。</target>
        </trans-unit>
        <trans-unit id="699bb35cf747c434fb017049f75ca63a96555a2f" translate="yes" xml:space="preserve">
          <source>For resources in languages other than English. Most are still in progress; see &lt;a href=&quot;https://github.com/rust-lang/book/issues?q=is%3Aopen+is%3Aissue+label%3ATranslations&quot;&gt;the Translations label&lt;/a&gt; to help or let us know about a new translation!</source>
          <target state="translated">英語以外の言語のリソース用。ほとんどはまだ進行中です。&lt;a href=&quot;https://github.com/rust-lang/book/issues?q=is%3Aopen+is%3Aissue+label%3ATranslations&quot;&gt;翻訳ラベル&lt;/a&gt;を参照して、新しい翻訳を支援またはお知らせください！</target>
        </trans-unit>
        <trans-unit id="b3ace2755d26172c16b8f52be41575cb599f9217" translate="yes" xml:space="preserve">
          <source>For similar reasons, &lt;strong&gt;this trait should never fail&lt;/strong&gt;. Failure during dereferencing can be extremely confusing when &lt;code&gt;Deref&lt;/code&gt; is invoked implicitly.</source>
          <target state="translated">同様の理由で、&lt;strong&gt;この特性が失敗することはありません&lt;/strong&gt;。 &lt;code&gt;Deref&lt;/code&gt; が暗黙的に呼び出される場合、逆参照中の失敗は非常に混乱する可能性があります。</target>
        </trans-unit>
        <trans-unit id="f143a2f7cb6b7d643f9e55d76c2173dbf1fa2576" translate="yes" xml:space="preserve">
          <source>For similar reasons, &lt;strong&gt;this trait should never fail&lt;/strong&gt;. Failure during dereferencing can be extremely confusing when &lt;code&gt;DerefMut&lt;/code&gt; is invoked implicitly.</source>
          <target state="translated">同様の理由で、&lt;strong&gt;この特性が失敗することはありません&lt;/strong&gt;。 &lt;code&gt;DerefMut&lt;/code&gt; が暗黙的に呼び出される場合、逆参照中の失敗は非常に混乱する可能性があります。</target>
        </trans-unit>
        <trans-unit id="651693930e4ce9c887254d6c0684024c66f33563" translate="yes" xml:space="preserve">
          <source>For simple key functions (e.g., functions that are property accesses or basic operations), &lt;a href=&quot;#method.sort_by_key&quot;&gt;&lt;code&gt;sort_by_key&lt;/code&gt;&lt;/a&gt; is likely to be faster.</source>
          <target state="translated">単純なキー関数（たとえば、プロパティアクセスまたは基本操作である関数）の場合、&lt;a href=&quot;#method.sort_by_key&quot;&gt; &lt;code&gt;sort_by_key&lt;/code&gt; の&lt;/a&gt;方が高速である可能性があります。</target>
        </trans-unit>
        <trans-unit id="89523ea381daa16404e1b923b1eb9b76ace1d71b" translate="yes" xml:space="preserve">
          <source>For splitting from the front, the &lt;a href=&quot;#method.splitn&quot;&gt;&lt;code&gt;splitn&lt;/code&gt;&lt;/a&gt; method can be used.</source>
          <target state="translated">正面から分割する場合は、&lt;a href=&quot;#method.splitn&quot;&gt; &lt;code&gt;splitn&lt;/code&gt; &lt;/a&gt;メソッドを使用できます。</target>
        </trans-unit>
        <trans-unit id="11e6e81fe37e9ab31f7eacdfb8dae37e44c66a22" translate="yes" xml:space="preserve">
          <source>For splitting from the front, the &lt;a href=&quot;../primitive.str#method.splitn&quot;&gt;&lt;code&gt;splitn&lt;/code&gt;&lt;/a&gt; method can be used.</source>
          <target state="translated">正面からの分割には、&lt;a href=&quot;../primitive.str#method.splitn&quot;&gt; &lt;code&gt;splitn&lt;/code&gt; &lt;/a&gt;方式を使用できます。</target>
        </trans-unit>
        <trans-unit id="a3c0abfb259f7386ec06ccced34dac985722f5e3" translate="yes" xml:space="preserve">
          <source>For splitting from the front, the &lt;a href=&quot;primitive.str#method.splitn&quot;&gt;&lt;code&gt;splitn&lt;/code&gt;&lt;/a&gt; method can be used.</source>
          <target state="translated">正面からの分割には、&lt;a href=&quot;primitive.str#method.splitn&quot;&gt; &lt;code&gt;splitn&lt;/code&gt; &lt;/a&gt;方式を使用できます。</target>
        </trans-unit>
        <trans-unit id="0ad7e92077f13212fee670b70ee5343cc7564f8c" translate="yes" xml:space="preserve">
          <source>For struct-like enum variants, such as &lt;code&gt;Message::Move&lt;/code&gt;, we can use a pattern similar to the pattern we specify to match structs. After the variant name, we place curly brackets and then list the fields with variables so we break apart the pieces to use in the code for this arm. Here we use the shorthand form as we did in Listing 18-13.</source>
          <target state="translated">&lt;code&gt;Message::Move&lt;/code&gt; などの構造体に似た列挙型のバリアントの場合、構造体を照合するために指定するパターンと同様のパターンを使用できます。バリアント名の後に中かっこを配置し、変数を持つフィールドを一覧表示して、このアームのコードで使用する部分を分解します。ここでは、リスト18-13で行ったように省略形を使用します。</target>
        </trans-unit>
        <trans-unit id="5810f8b96156118100100f4ed7849dc0cd2c9c1a" translate="yes" xml:space="preserve">
          <source>For such a small example, a &lt;code&gt;for&lt;/code&gt; loop may be cleaner, but &lt;code&gt;for_each&lt;/code&gt; might be preferable to keep a functional style with longer iterators:</source>
          <target state="translated">そのような小さな例では、 &lt;code&gt;for&lt;/code&gt; ループの方がきれいかもしれませんが、より長いイテレータで機能的なスタイルを維持するには、 &lt;code&gt;for_each&lt;/code&gt; の方が望ましい場合があります。</target>
        </trans-unit>
        <trans-unit id="e8118375098fa91fd1336cc1a1d200113a068697" translate="yes" xml:space="preserve">
          <source>For the error type, we used the &lt;em&gt;trait object&lt;/em&gt;&lt;code&gt;Box&amp;lt;dyn Error&amp;gt;&lt;/code&gt; (and we&amp;rsquo;ve brought &lt;code&gt;std::error::Error&lt;/code&gt; into scope with a &lt;code&gt;use&lt;/code&gt; statement at the top). We&amp;rsquo;ll cover trait objects in &lt;a href=&quot;ch17-00-oop&quot;&gt;Chapter 17&lt;/a&gt;. For now, just know that &lt;code&gt;Box&amp;lt;dyn Error&amp;gt;&lt;/code&gt; means the function will return a type that implements the &lt;code&gt;Error&lt;/code&gt; trait, but we don&amp;rsquo;t have to specify what particular type the return value will be. This gives us flexibility to return error values that may be of different types in different error cases. The &lt;code&gt;dyn&lt;/code&gt; keyword is short for &amp;ldquo;dynamic.&amp;rdquo;</source>
          <target state="translated">エラータイプについては、&lt;em&gt;トレイトオブジェクト&lt;/em&gt; &lt;code&gt;Box&amp;lt;dyn Error&amp;gt;&lt;/code&gt; を使用しました（ &lt;code&gt;std::error::Error&lt;/code&gt; をスコープ内に配置し、先頭に &lt;code&gt;use&lt;/code&gt; ステートメントを配置しています）。特性オブジェクトについては、&lt;a href=&quot;ch17-00-oop&quot;&gt;第17章で説明し&lt;/a&gt;ます。 &lt;code&gt;Box&amp;lt;dyn Error&amp;gt;&lt;/code&gt; 、Box &amp;lt;dyn Error&amp;gt;は関数が &lt;code&gt;Error&lt;/code&gt; トレイトを実装するタイプを返すことを意味しますが、戻り値がどのタイプであるかを指定する必要はありません。これにより、さまざまなエラーケースでさまざまなタイプのエラー値を返す柔軟性が得られます。 &lt;code&gt;dyn&lt;/code&gt; キーワードが短いためである「ダイナミック」。</target>
        </trans-unit>
        <trans-unit id="ff1e8b621d2f0697fd650c7bd5bdebd31c66d8f4" translate="yes" xml:space="preserve">
          <source>For the first code example, please check the function definition. Example:</source>
          <target state="translated">最初のコード例は、関数の定義を確認してください。コード例です。</target>
        </trans-unit>
        <trans-unit id="f3f504eb5407df9eef6d4025ac7f91c4112cc6cf" translate="yes" xml:space="preserve">
          <source>For the full list of configuration options and defaults for each profile, see &lt;a href=&quot;https://doc.rust-lang.org/cargo/index.html&quot;&gt;Cargo&amp;rsquo;s documentation&lt;/a&gt;.</source>
          <target state="translated">各プロファイルの構成オプションとデフォルトの完全なリストについては、&lt;a href=&quot;https://doc.rust-lang.org/cargo/index.html&quot;&gt;Cargoのドキュメントを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="791c57d5635fae5aa217abb12eda43c0b9996769" translate="yes" xml:space="preserve">
          <source>For the full list of configuration options and defaults for each profile, see &lt;a href=&quot;https://doc.rust-lang.org/cargo/reference/profiles.html&quot;&gt;Cargo&amp;rsquo;s documentation&lt;/a&gt;.</source>
          <target state="translated">各プロファイルの構成オプションとデフォルトの完全なリストについては、&lt;a href=&quot;https://doc.rust-lang.org/cargo/reference/profiles.html&quot;&gt;Cargoのドキュメントを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="6a68c719c83bfb13b132657f78b2e4ff48741b1d" translate="yes" xml:space="preserve">
          <source>For the implementation of the &lt;code&gt;send&lt;/code&gt; method, the first parameter is still an immutable borrow of &lt;code&gt;self&lt;/code&gt;, which matches the trait definition. We call &lt;code&gt;borrow_mut&lt;/code&gt; on the &lt;code&gt;RefCell&amp;lt;Vec&amp;lt;String&amp;gt;&amp;gt;&lt;/code&gt; in &lt;code&gt;self.sent_messages&lt;/code&gt; to get a mutable reference to the value inside the &lt;code&gt;RefCell&amp;lt;Vec&amp;lt;String&amp;gt;&amp;gt;&lt;/code&gt;, which is the vector. Then we can call &lt;code&gt;push&lt;/code&gt; on the mutable reference to the vector to keep track of the messages sent during the test.</source>
          <target state="translated">&lt;code&gt;send&lt;/code&gt; メソッドの実装では、最初のパラメーターはまだ、特性定義と一致する &lt;code&gt;self&lt;/code&gt; の不変の借用です。私たちは呼んで &lt;code&gt;borrow_mut&lt;/code&gt; に &lt;code&gt;RefCell&amp;lt;Vec&amp;lt;String&amp;gt;&amp;gt;&lt;/code&gt; に &lt;code&gt;self.sent_messages&lt;/code&gt; 内の値を変更可能な参照を取得する &lt;code&gt;RefCell&amp;lt;Vec&amp;lt;String&amp;gt;&amp;gt;&lt;/code&gt; ベクトルです。次に、ベクターへの可変参照で &lt;code&gt;push&lt;/code&gt; を呼び出して、テスト中に送信されたメッセージを追跡できます。</target>
        </trans-unit>
        <trans-unit id="a95e91b27e6ad6f9ade905d772c0b6782aa828f3" translate="yes" xml:space="preserve">
          <source>For the mutable counterpart see &lt;a href=&quot;#method.as_mut&quot;&gt;&lt;code&gt;as_mut&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">変更可能な対応物については、&lt;a href=&quot;#method.as_mut&quot;&gt; &lt;code&gt;as_mut&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="6d5a9781a149f8d35fca4d184f08a35d9f2cbdac" translate="yes" xml:space="preserve">
          <source>For the mutable counterpart see &lt;a href=&quot;#method.as_uninit_mut&quot;&gt;&lt;code&gt;as_uninit_mut&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">変更可能な対応物については、&lt;a href=&quot;#method.as_uninit_mut&quot;&gt; &lt;code&gt;as_uninit_mut&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="b1f973a0bac5133bff0149357edc17c4cb290249" translate="yes" xml:space="preserve">
          <source>For the mutable counterpart see &lt;a href=&quot;#method.as_uninit_slice_mut&quot;&gt;&lt;code&gt;as_uninit_slice_mut&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">変更可能な対応物については、&lt;a href=&quot;#method.as_uninit_slice_mut&quot;&gt; &lt;code&gt;as_uninit_slice_mut&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="07082323caa609052dde906dbd2a21a1ab51cf54" translate="yes" xml:space="preserve">
          <source>For the mutable counterpart see &lt;a href=&quot;struct.nonnull#method.as_mut&quot;&gt;&lt;code&gt;as_mut&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">変更可能な対応物については、&lt;a href=&quot;struct.nonnull#method.as_mut&quot;&gt; &lt;code&gt;as_mut&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="69d924fe0e8c1a5d61d0c3d9dd1c49bf7a0308ea" translate="yes" xml:space="preserve">
          <source>For the mutable counterpart see &lt;a href=&quot;struct.nonnull#method.as_uninit_mut&quot;&gt;&lt;code&gt;as_uninit_mut&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">変更可能な対応物については、&lt;a href=&quot;struct.nonnull#method.as_uninit_mut&quot;&gt; &lt;code&gt;as_uninit_mut&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="7fd7465e0cdaff95e9a716e4a710191845a70f5d" translate="yes" xml:space="preserve">
          <source>For the mutable counterpart see &lt;a href=&quot;struct.nonnull#method.as_uninit_slice_mut&quot;&gt;&lt;code&gt;as_uninit_slice_mut&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">変更可能な対応物については、&lt;a href=&quot;struct.nonnull#method.as_uninit_slice_mut&quot;&gt; &lt;code&gt;as_uninit_slice_mut&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="91c42187d149ce3b9fc55c3ad6f30f4360a292d3" translate="yes" xml:space="preserve">
          <source>For the platform's canonical successful and unsuccessful codes, see the &lt;a href=&quot;#associatedconstant.SUCCESS&quot;&gt;&lt;code&gt;SUCCESS&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#associatedconstant.FAILURE&quot;&gt;&lt;code&gt;FAILURE&lt;/code&gt;&lt;/a&gt; associated items.</source>
          <target state="translated">プラットフォームの正規の成功および失敗のコードについては、&lt;a href=&quot;#associatedconstant.SUCCESS&quot;&gt; &lt;code&gt;SUCCESS&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#associatedconstant.FAILURE&quot;&gt; &lt;code&gt;FAILURE&lt;/code&gt; の&lt;/a&gt;関連項目を参照してください。</target>
        </trans-unit>
        <trans-unit id="75db543c6e1cfda586f4db237fb2c670d25637f5" translate="yes" xml:space="preserve">
          <source>For the platform's canonical successful and unsuccessful codes, see the &lt;a href=&quot;struct.exitcode#associatedconstant.SUCCESS&quot;&gt;&lt;code&gt;SUCCESS&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;struct.exitcode#associatedconstant.FAILURE&quot;&gt;&lt;code&gt;FAILURE&lt;/code&gt;&lt;/a&gt; associated items.</source>
          <target state="translated">プラットフォームの正規の成功コードと失敗コードについては、&lt;a href=&quot;struct.exitcode#associatedconstant.SUCCESS&quot;&gt; &lt;code&gt;SUCCESS&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;struct.exitcode#associatedconstant.FAILURE&quot;&gt; &lt;code&gt;FAILURE&lt;/code&gt; に&lt;/a&gt;関連する項目を参照してください。</target>
        </trans-unit>
        <trans-unit id="2e0af3f991c9f15f8f69d15c2eea87200f2b169c" translate="yes" xml:space="preserve">
          <source>For the reason why this trait is marked unsafe, see them parent trait &lt;a href=&quot;trait.searcher&quot;&gt;&lt;code&gt;Searcher&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このトレイトが安全でないとマークされている理由については、親トレイト&lt;a href=&quot;trait.searcher&quot;&gt; &lt;code&gt;Searcher&lt;/code&gt; &lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="9754d4ead8c14d2fd33aefe3de619c365fcc229c" translate="yes" xml:space="preserve">
          <source>For the reason why this trait is marked unsafe, see them parent trait &lt;code&gt;Searcher&lt;/code&gt;.</source>
          <target state="translated">このトレイトが安全でないとマークされる理由については、それらの親トレイト &lt;code&gt;Searcher&lt;/code&gt; をご覧ください。</target>
        </trans-unit>
        <trans-unit id="317df28410901f8510f7434f828ef3205b9a7b8a" translate="yes" xml:space="preserve">
          <source>For the shared counterpart see &lt;a href=&quot;#method.as_ref-1&quot;&gt;&lt;code&gt;as_ref&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">共有の対応物については、&lt;a href=&quot;#method.as_ref-1&quot;&gt; &lt;code&gt;as_ref&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="be46a34ce569130657543d5be99d0ffccac5f531" translate="yes" xml:space="preserve">
          <source>For the shared counterpart see &lt;a href=&quot;#method.as_uninit_ref-1&quot;&gt;&lt;code&gt;as_uninit_ref&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">共有の対応物については、&lt;a href=&quot;#method.as_uninit_ref-1&quot;&gt; &lt;code&gt;as_uninit_ref&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="33c7d626908c572a51181ace97075c3c7c164cf4" translate="yes" xml:space="preserve">
          <source>For the shared counterpart see &lt;a href=&quot;#method.as_uninit_slice-1&quot;&gt;&lt;code&gt;as_uninit_slice&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">共有の対応物については、&lt;a href=&quot;#method.as_uninit_slice-1&quot;&gt; &lt;code&gt;as_uninit_slice&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="1d048329557c415195915c976f34b9b3ebb4d30b" translate="yes" xml:space="preserve">
          <source>For the shared counterpart see &lt;a href=&quot;struct.nonnull#method.as_ref&quot;&gt;&lt;code&gt;as_ref&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">共有の対応物については、&lt;a href=&quot;struct.nonnull#method.as_ref&quot;&gt; &lt;code&gt;as_ref&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="cbea4cb29a600931bdca0544ec0671b19cb48983" translate="yes" xml:space="preserve">
          <source>For the shared counterpart see &lt;a href=&quot;struct.nonnull#method.as_uninit_ref&quot;&gt;&lt;code&gt;as_uninit_ref&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">共有の対応物については、&lt;a href=&quot;struct.nonnull#method.as_uninit_ref&quot;&gt; &lt;code&gt;as_uninit_ref&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="9ddf9342b49f23e6ec0f7fb2b4028f00c98f3be6" translate="yes" xml:space="preserve">
          <source>For the shared counterpart see &lt;a href=&quot;struct.nonnull#method.as_uninit_slice&quot;&gt;&lt;code&gt;as_uninit_slice&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">共有の対応物については、&lt;a href=&quot;struct.nonnull#method.as_uninit_slice&quot;&gt; &lt;code&gt;as_uninit_slice&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="6e95ec06cdfac6e068dc9366f7700758986e2c5a" translate="yes" xml:space="preserve">
          <source>For the third example, when you match, all patterns must have the same type as the type you're matching on. Example:</source>
          <target state="translated">3つ目の例では、マッチするときに、すべてのパターンがマッチしているタイプと同じタイプでなければなりません。例を示します。</target>
        </trans-unit>
        <trans-unit id="d0fe8928fd32097dac9b918311b6eac0fcf339ce" translate="yes" xml:space="preserve">
          <source>For these reasons, Rust takes a different approach, using trait objects instead of inheritance. Let&amp;rsquo;s look at how trait objects enable polymorphism in Rust.</source>
          <target state="translated">これらの理由により、Rustは別のアプローチを採用し、継承ではなく特性オブジェクトを使用します。特性オブジェクトがRustでどのようにポリモーフィズムを実現するかを見てみましょう。</target>
        </trans-unit>
        <trans-unit id="4710b0aeb278b541ab02b2df0abed515f474e4d8" translate="yes" xml:space="preserve">
          <source>For this reason, match arms must use refutable patterns, except for the last arm, which should match any remaining values with an irrefutable pattern. Rust allows us to use an irrefutable pattern in a &lt;code&gt;match&lt;/code&gt; with only one arm, but this syntax isn&amp;rsquo;t particularly useful and could be replaced with a simpler &lt;code&gt;let&lt;/code&gt; statement.</source>
          <target state="translated">このため、最後のアームを除き、マッチアームは反駁可能なパターンを使用する必要があります。最後のアームは、残りの値を反駁できないパターンと一致させる必要があります。Rustを使用すると、1つのアームのみとの &lt;code&gt;match&lt;/code&gt; で反駁できないパターンを使用できますが、この構文は特に有用ではなく、単純な &lt;code&gt;let&lt;/code&gt; ステートメントで置き換えることができます。</target>
        </trans-unit>
        <trans-unit id="adfc989e88bb9c8c7181782f55b50dfadfa83f21" translate="yes" xml:space="preserve">
          <source>For this to work, some note must be specified. An empty attribute will not do anything, please remove the attribute or add some helpful note for users of the trait.</source>
          <target state="translated">これを機能させるためには、何らかの注意事項を指定しなければなりません。空の属性は何もしませんので、その属性を削除するか、その特性の利用者のために役立つメモを追加してください。</target>
        </trans-unit>
        <trans-unit id="04f657de0e5284c90b3775d6f50f0f7a8ada21dc" translate="yes" xml:space="preserve">
          <source>For this, the impl of &lt;a href=&quot;trait.searcher&quot;&gt;&lt;code&gt;Searcher&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;trait.reversesearcher&quot;&gt;&lt;code&gt;ReverseSearcher&lt;/code&gt;&lt;/a&gt; need to follow these conditions:</source>
          <target state="translated">このため、&lt;a href=&quot;trait.searcher&quot;&gt; &lt;code&gt;Searcher&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;trait.reversesearcher&quot;&gt; &lt;code&gt;ReverseSearcher&lt;/code&gt; の&lt;/a&gt;implは次の条件に従う必要があります。</target>
        </trans-unit>
        <trans-unit id="bd561ec2ce563662749407f0433b939f5ebe794d" translate="yes" xml:space="preserve">
          <source>For this, the impl of &lt;code&gt;Searcher&lt;/code&gt; and &lt;code&gt;ReverseSearcher&lt;/code&gt; need to follow these conditions:</source>
          <target state="translated">このため、 &lt;code&gt;Searcher&lt;/code&gt; および &lt;code&gt;ReverseSearcher&lt;/code&gt; サーチャーの実装は、以下の条件に従う必要があります。</target>
        </trans-unit>
        <trans-unit id="97ccae7172bda964374e1bc586c6572634aaa703" translate="yes" xml:space="preserve">
          <source>For those developing Rust, a new edition provides a rallying point for the project as a whole.</source>
          <target state="translated">Rustを開発している人たちにとって、新版はプロジェクト全体のラリーポイントとなります。</target>
        </trans-unit>
        <trans-unit id="2fec446383d5f779e4c9aee400f1c7e1dddccd01" translate="yes" xml:space="preserve">
          <source>For those familiar with pointers, a reference is just a pointer that is assumed to be aligned, not null, and pointing to memory containing a valid value of &lt;code&gt;T&lt;/code&gt; - for example, &lt;code&gt;&amp;amp;bool&lt;/code&gt; can only point to an allocation containing the integer values &lt;code&gt;1&lt;/code&gt; (&lt;code&gt;true&lt;/code&gt;) or &lt;code&gt;0&lt;/code&gt; (&lt;code&gt;false&lt;/code&gt;), but creating a &lt;code&gt;&amp;amp;bool&lt;/code&gt; that points to an allocation containing the value &lt;code&gt;3&lt;/code&gt; causes undefined behaviour. In fact, &lt;code&gt;Option&amp;lt;&amp;amp;T&amp;gt;&lt;/code&gt; has the same memory representation as a nullable but aligned pointer, and can be passed across FFI boundaries as such.</source>
          <target state="translated">ポインタに精通している人にとって、参照は、nullではなく、整列されていると想定されるポインタであり、 &lt;code&gt;T&lt;/code&gt; の有効な値を含むメモリを指します。たとえば、 &lt;code&gt;&amp;amp;bool&lt;/code&gt; は、整数値 &lt;code&gt;1&lt;/code&gt; （ &lt;code&gt;true&lt;/code&gt; )を含む割り当てのみを指すことができます。）または &lt;code&gt;0&lt;/code&gt; （ &lt;code&gt;false&lt;/code&gt; ）ですが、値 &lt;code&gt;3&lt;/code&gt; を含む割り当てを指す &lt;code&gt;&amp;amp;bool&lt;/code&gt; を作成すると、未定義の動作が発生します。実際、 &lt;code&gt;Option&amp;lt;&amp;amp;T&amp;gt;&lt;/code&gt; は、NULL可能であるが整列されたポインターと同じメモリー表現を持ち、FFI境界を越えて渡すことができます。</target>
        </trans-unit>
        <trans-unit id="b6ace4ab9caa4dbb7631dba10e9c44e719dfc96f" translate="yes" xml:space="preserve">
          <source>For those familiar with pointers, a reference is just a pointer that is assumed to not be null. In fact, &lt;code&gt;Option&amp;lt;&amp;amp;T&amp;gt;&lt;/code&gt; has the same memory representation as a nullable pointer, and can be passed across FFI boundaries as such.</source>
          <target state="translated">ポインタに慣れている人にとって、参照はnullではないと想定される単なるポインタです。実際、 &lt;code&gt;Option&amp;lt;&amp;amp;T&amp;gt;&lt;/code&gt; メモリ表現はnull可能なポインタと同じであり、FFIの境界を越えて渡すことができます。</target>
        </trans-unit>
        <trans-unit id="9aa62047cd03d84d541773dd2bfd34515672a0a9" translate="yes" xml:space="preserve">
          <source>For tuple-like enum variants, like &lt;code&gt;Message::Write&lt;/code&gt; that holds a tuple with one element and &lt;code&gt;Message::ChangeColor&lt;/code&gt; that holds a tuple with three elements, the pattern is similar to the pattern we specify to match tuples. The number of variables in the pattern must match the number of elements in the variant we&amp;rsquo;re matching.</source>
          <target state="translated">1つの要素を持つタプルを保持する &lt;code&gt;Message::Write&lt;/code&gt; や3つの要素を持つタプルを保持する &lt;code&gt;Message::ChangeColor&lt;/code&gt; など、タプルのような列挙型バリアントの場合、パターンは、タプルに一致するように指定したパターンに似ています。パターン内の変数の数は、一致するバリアントの要素の数と一致する必要があります。</target>
        </trans-unit>
        <trans-unit id="aafd656a28f0a9eb0c651ab2742e994b8d5c6d74" translate="yes" xml:space="preserve">
          <source>For types that implement &lt;code&gt;Copy&lt;/code&gt;, the &lt;code&gt;get&lt;/code&gt; method retrieves the current interior value.</source>
          <target state="translated">&lt;code&gt;Copy&lt;/code&gt; を実装する型の場合、 &lt;code&gt;get&lt;/code&gt; メソッドは現在の内部値を取得します。</target>
        </trans-unit>
        <trans-unit id="ec453568d8f91af81c4edd923841e5de4ffcf536" translate="yes" xml:space="preserve">
          <source>For types that implement &lt;code&gt;Default&lt;/code&gt;, the &lt;code&gt;take&lt;/code&gt; method replaces the current interior value with &lt;code&gt;Default::default()&lt;/code&gt; and returns the replaced value.</source>
          <target state="translated">&lt;code&gt;Default&lt;/code&gt; を実装する型の場合、 &lt;code&gt;take&lt;/code&gt; メソッドは現在の内部値を &lt;code&gt;Default::default()&lt;/code&gt; で置き換え、置き換えられた値を返します。</target>
        </trans-unit>
        <trans-unit id="4574e9c5392d2a058aa0fe0986ed5ef30945f81c" translate="yes" xml:space="preserve">
          <source>For types that implement the &lt;code&gt;Copy&lt;/code&gt; trait, like &lt;code&gt;i32&lt;/code&gt;, the values are copied into the hash map. For owned values like &lt;code&gt;String&lt;/code&gt;, the values will be moved and the hash map will be the owner of those values, as demonstrated in Listing 8-22.</source>
          <target state="translated">&lt;code&gt;i32&lt;/code&gt; のような &lt;code&gt;Copy&lt;/code&gt; トレイトを実装する型の場合、値はハッシュマップにコピーされます。リスト8-22に示すように、 &lt;code&gt;String&lt;/code&gt; のような所有された値の場合、値は移動され、ハッシュマップはそれらの値の所有者になります。</target>
        </trans-unit>
        <trans-unit id="bbf61af8911febf6c19fe2a100148eac8f5a6b3d" translate="yes" xml:space="preserve">
          <source>For zero-sized &lt;code&gt;T&lt;/code&gt; or &lt;code&gt;n == 0&lt;/code&gt;, may return either of &lt;code&gt;Ok&lt;/code&gt; or &lt;code&gt;Err&lt;/code&gt;, but will &lt;em&gt;not&lt;/em&gt; yield undefined behavior.</source>
          <target state="translated">サイズがゼロの &lt;code&gt;T&lt;/code&gt; または &lt;code&gt;n == 0&lt;/code&gt; 場合、 &lt;code&gt;Ok&lt;/code&gt; または &lt;code&gt;Err&lt;/code&gt; のいずれかを返すことがありますが、未定義の動作は発生し&lt;em&gt;ません&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="af9ebebeac598bb279c7f6871c1d2e5ff692e690" translate="yes" xml:space="preserve">
          <source>For zero-sized &lt;code&gt;T&lt;/code&gt; or &lt;code&gt;n_new == 0&lt;/code&gt;, may return either of &lt;code&gt;Ok&lt;/code&gt; or &lt;code&gt;Err&lt;/code&gt;, but will &lt;em&gt;not&lt;/em&gt; yield undefined behavior.</source>
          <target state="translated">サイズがゼロの &lt;code&gt;T&lt;/code&gt; または &lt;code&gt;n_new == 0&lt;/code&gt; 場合、 &lt;code&gt;Ok&lt;/code&gt; または &lt;code&gt;Err&lt;/code&gt; のいずれかを返すことがありますが、未定義の動作は発生し&lt;em&gt;ません&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="d17558f17d3ddd4a1525907aa24c803b6d14144e" translate="yes" xml:space="preserve">
          <source>For zero-sized &lt;code&gt;T&lt;/code&gt;, may return either of &lt;code&gt;Ok&lt;/code&gt; or &lt;code&gt;Err&lt;/code&gt;, but will &lt;em&gt;not&lt;/em&gt; yield undefined behavior.</source>
          <target state="translated">サイズがゼロの &lt;code&gt;T&lt;/code&gt; の場合、 &lt;code&gt;Ok&lt;/code&gt; または &lt;code&gt;Err&lt;/code&gt; のいずれかを返しますが、未定義の動作は発生し&lt;em&gt;ません&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="ff122858fad706f1ffd37eb8ed4d2f766a5f5467" translate="yes" xml:space="preserve">
          <source>Forces the child process to exit. If the child has already exited, an &lt;a href=&quot;../io/enum.errorkind#variant.InvalidInput&quot;&gt;&lt;code&gt;InvalidInput&lt;/code&gt;&lt;/a&gt; error is returned.</source>
          <target state="translated">子プロセスを強制的に終了します。子がすでに終了している場合は、&lt;a href=&quot;../io/enum.errorkind#variant.InvalidInput&quot;&gt; &lt;code&gt;InvalidInput&lt;/code&gt; &lt;/a&gt;エラーが返されます。</target>
        </trans-unit>
        <trans-unit id="c60cb66cd46faeac62256677171f90f9aab99b37" translate="yes" xml:space="preserve">
          <source>Forces the length of the vector to &lt;code&gt;new_len&lt;/code&gt;.</source>
          <target state="translated">ベクトルの長さを強制的に &lt;code&gt;new_len&lt;/code&gt; にします。</target>
        </trans-unit>
        <trans-unit id="0a683f099c5cd32d972be2f3a92f5a845ceb5fd5" translate="yes" xml:space="preserve">
          <source>Foreword</source>
          <target state="translated">Foreword</target>
        </trans-unit>
        <trans-unit id="863ae1b2291a228e3b8c16c150fe043e32bd712d" translate="yes" xml:space="preserve">
          <source>Formally, the equality must be (for all &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;c&lt;/code&gt;):</source>
          <target state="translated">正式には、等価性は（すべての &lt;code&gt;a&lt;/code&gt; 、 &lt;code&gt;b&lt;/code&gt; 、および &lt;code&gt;c&lt;/code&gt; に対して）でなければなりません。</target>
        </trans-unit>
        <trans-unit id="f923413c464f494d3946508ce5aa107762608185" translate="yes" xml:space="preserve">
          <source>Format the program and arguments of a Command for display. Any non-utf8 data is lossily converted using the utf8 replacement character.</source>
          <target state="translated">コマンドのプログラムと引数を表示用にフォーマットします。utf8 以外のデータは utf8 置換文字を使用してロスなく変換されます。</target>
        </trans-unit>
        <trans-unit id="140d331380e094ef881c81486bb2b41687984370" translate="yes" xml:space="preserve">
          <source>Format trait for an empty format, &lt;code&gt;{}&lt;/code&gt;.</source>
          <target state="translated">空のフォーマットのフォーマット特性 &lt;code&gt;{}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6eb3be022b65dd3036c2394343c5d04639125d42" translate="yes" xml:space="preserve">
          <source>Formats the value using the given formatter.</source>
          <target state="translated">与えられたフォーマッタを使用して値をフォーマットします。</target>
        </trans-unit>
        <trans-unit id="5e15b9e7259e75f0fde9e02ca48db7008320ae92" translate="yes" xml:space="preserve">
          <source>Formats the value using the given formatter. &lt;a href=&quot;../../../fmt/trait.debug#tymethod.fmt&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">指定されたフォーマッタを使用して値をフォーマットします。&lt;a href=&quot;../../../fmt/trait.debug#tymethod.fmt&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3864f640d862bc0209e506aa2fd5d8114b920b88" translate="yes" xml:space="preserve">
          <source>Formats the value using the given formatter. &lt;a href=&quot;../../fmt/trait.debug#tymethod.fmt&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">指定されたフォーマッタを使用して値をフォーマットします。&lt;a href=&quot;../../fmt/trait.debug#tymethod.fmt&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="891ad2cdac8c5121fa8020663e91799426bda036" translate="yes" xml:space="preserve">
          <source>Formats the value using the given formatter. &lt;a href=&quot;../../fmt/trait.display#tymethod.fmt&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">指定されたフォーマッタを使用して値をフォーマットします。&lt;a href=&quot;../../fmt/trait.display#tymethod.fmt&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="22b050e95494640f18b8653fa928145e7860a473" translate="yes" xml:space="preserve">
          <source>Formats the value using the given formatter. &lt;a href=&quot;../fmt/trait.debug#tymethod.fmt&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">指定されたフォーマッタを使用して値をフォーマットします。&lt;a href=&quot;../fmt/trait.debug#tymethod.fmt&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ce70014ec2bb51274cea17fec1b3f94b02c50aa6" translate="yes" xml:space="preserve">
          <source>Formats the value using the given formatter. &lt;a href=&quot;../fmt/trait.display#tymethod.fmt&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">指定されたフォーマッタを使用して値をフォーマットします。&lt;a href=&quot;../fmt/trait.display#tymethod.fmt&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="fdf24f4d118b813631e61dbcdfc4c5c165a520a0" translate="yes" xml:space="preserve">
          <source>Formats the value using the given formatter. &lt;a href=&quot;fmt/trait.debug#tymethod.fmt&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">指定されたフォーマッタを使用して値をフォーマットします。&lt;a href=&quot;fmt/trait.debug#tymethod.fmt&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="87c49f82e8dbca91bb2bb8879fec94750d470c75" translate="yes" xml:space="preserve">
          <source>Formats the value using the given formatter. &lt;a href=&quot;fmt/trait.display#tymethod.fmt&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">指定されたフォーマッタを使用して値をフォーマットします。&lt;a href=&quot;fmt/trait.display#tymethod.fmt&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f5cc6401fc7f1f08cc68b76776fcc845c5120ae5" translate="yes" xml:space="preserve">
          <source>Formats the value using the given formatter. &lt;a href=&quot;trait.debug#tymethod.fmt&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">指定されたフォーマッタを使用して値をフォーマットします。&lt;a href=&quot;trait.debug#tymethod.fmt&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="67729135661825a254f0d83fb3dccb9f72a3be19" translate="yes" xml:space="preserve">
          <source>Formats the value using the given formatter. &lt;a href=&quot;trait.display#tymethod.fmt&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">指定されたフォーマッタを使用して値をフォーマットします。&lt;a href=&quot;trait.display#tymethod.fmt&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1ae42b52d64655839743c546b646a36f423ad845" translate="yes" xml:space="preserve">
          <source>Formatter</source>
          <target state="translated">Formatter</target>
        </trans-unit>
        <trans-unit id="5f8152f579616a1e2e7f90e547a18b826268e31e" translate="yes" xml:space="preserve">
          <source>Formatter::align</source>
          <target state="translated">Formatter::align</target>
        </trans-unit>
        <trans-unit id="9a6def787783ae143ee16edccd5c0a001ed91243" translate="yes" xml:space="preserve">
          <source>Formatter::alternate</source>
          <target state="translated">Formatter::alternate</target>
        </trans-unit>
        <trans-unit id="4ff01afb51f457cc2d85ff4291e6511c069e18e7" translate="yes" xml:space="preserve">
          <source>Formatter::borrow</source>
          <target state="translated">Formatter::borrow</target>
        </trans-unit>
        <trans-unit id="5d337fb59b434ef65405e46b43dd9298cf7d28ce" translate="yes" xml:space="preserve">
          <source>Formatter::borrow_mut</source>
          <target state="translated">Formatter::borrow_mut</target>
        </trans-unit>
        <trans-unit id="423e00ac2e2adbcb9bbef0b2b89bfd31aee767fd" translate="yes" xml:space="preserve">
          <source>Formatter::debug_list</source>
          <target state="translated">Formatter::debug_list</target>
        </trans-unit>
        <trans-unit id="2d2789bd6c0bf82cab25262ef760ac2db9d9dd87" translate="yes" xml:space="preserve">
          <source>Formatter::debug_map</source>
          <target state="translated">Formatter::debug_map</target>
        </trans-unit>
        <trans-unit id="a9ccdf007c23e02e293201f75e9a5c875ae07f89" translate="yes" xml:space="preserve">
          <source>Formatter::debug_set</source>
          <target state="translated">Formatter::debug_set</target>
        </trans-unit>
        <trans-unit id="71c2bd0a8b48dfeec742af4daf6fb65d4f40ffc9" translate="yes" xml:space="preserve">
          <source>Formatter::debug_struct</source>
          <target state="translated">Formatter::debug_struct</target>
        </trans-unit>
        <trans-unit id="00c1bd1d6a90da612560b76c5bf3d45e6291fc98" translate="yes" xml:space="preserve">
          <source>Formatter::debug_tuple</source>
          <target state="translated">Formatter::debug_tuple</target>
        </trans-unit>
        <trans-unit id="6fc7f1045521e6b9d4ff4360c00a2593331911c9" translate="yes" xml:space="preserve">
          <source>Formatter::fill</source>
          <target state="translated">Formatter::fill</target>
        </trans-unit>
        <trans-unit id="993174c205f2615b87f6bd9b99a1f83db77e9d92" translate="yes" xml:space="preserve">
          <source>Formatter::flags</source>
          <target state="translated">Formatter::flags</target>
        </trans-unit>
        <trans-unit id="1de3e4496f08f380dafc2f2099cb602dae373966" translate="yes" xml:space="preserve">
          <source>Formatter::from</source>
          <target state="translated">Formatter::from</target>
        </trans-unit>
        <trans-unit id="f20f7b5d51f57e44b5ca6cd8ab62bf45261e1970" translate="yes" xml:space="preserve">
          <source>Formatter::into</source>
          <target state="translated">Formatter::into</target>
        </trans-unit>
        <trans-unit id="8d6e0f2524599a9851fc44585f5a2d817e72ae6d" translate="yes" xml:space="preserve">
          <source>Formatter::pad</source>
          <target state="translated">Formatter::pad</target>
        </trans-unit>
        <trans-unit id="ac6ba2e959a06c5071bcc16b886f8d5d6cd7965f" translate="yes" xml:space="preserve">
          <source>Formatter::pad_integral</source>
          <target state="translated">Formatter::pad_integral</target>
        </trans-unit>
        <trans-unit id="2403b952317411744ba831a429e9297ab1c0e3b2" translate="yes" xml:space="preserve">
          <source>Formatter::precision</source>
          <target state="translated">Formatter::precision</target>
        </trans-unit>
        <trans-unit id="1f3d9e3d7faa47d0e222f72c63a039a75dc5c805" translate="yes" xml:space="preserve">
          <source>Formatter::sign_aware_zero_pad</source>
          <target state="translated">Formatter::sign_aware_zero_pad</target>
        </trans-unit>
        <trans-unit id="4177fcc3cea65ad6e0c1467fe2213bc4804199f2" translate="yes" xml:space="preserve">
          <source>Formatter::sign_minus</source>
          <target state="translated">Formatter::sign_minus</target>
        </trans-unit>
        <trans-unit id="29a954cef5d969b0ffeda4cda9b1e514ed59e128" translate="yes" xml:space="preserve">
          <source>Formatter::sign_plus</source>
          <target state="translated">Formatter::sign_plus</target>
        </trans-unit>
        <trans-unit id="4109341d852a7ae64ee2861415e3d2d47fd3985d" translate="yes" xml:space="preserve">
          <source>Formatter::try_from</source>
          <target state="translated">Formatter::try_from</target>
        </trans-unit>
        <trans-unit id="c7ea88c068c207062576e99264d8fe9db762e2ba" translate="yes" xml:space="preserve">
          <source>Formatter::try_into</source>
          <target state="translated">Formatter::try_into</target>
        </trans-unit>
        <trans-unit id="0770a06c1590caabbc6a280181ab045268a48d8b" translate="yes" xml:space="preserve">
          <source>Formatter::type_id</source>
          <target state="translated">Formatter::type_id</target>
        </trans-unit>
        <trans-unit id="0513c6c9a8b654eb3c836130d1141c065212130f" translate="yes" xml:space="preserve">
          <source>Formatter::width</source>
          <target state="translated">Formatter::width</target>
        </trans-unit>
        <trans-unit id="784e355bd41c9f5795702e1d4aa5cf5a90fcf70e" translate="yes" xml:space="preserve">
          <source>Formatter::write_char</source>
          <target state="translated">Formatter::write_char</target>
        </trans-unit>
        <trans-unit id="75462a0bc374b0c8071f850b3b54b93abf9106a0" translate="yes" xml:space="preserve">
          <source>Formatter::write_fmt</source>
          <target state="translated">Formatter::write_fmt</target>
        </trans-unit>
        <trans-unit id="b1c405b0e91eb401eaac8c2242a8de1a2f4c813d" translate="yes" xml:space="preserve">
          <source>Formatter::write_str</source>
          <target state="translated">Formatter::write_str</target>
        </trans-unit>
        <trans-unit id="177933136546eb5ae389ea27da971803b35a5e96" translate="yes" xml:space="preserve">
          <source>Formatting Parameters</source>
          <target state="translated">書式化パラメータ</target>
        </trans-unit>
        <trans-unit id="0e705959b12f9001f69d3fd6ef3e8868e1a3fcac" translate="yes" xml:space="preserve">
          <source>Formatting traits</source>
          <target state="translated">書式化の特徴</target>
        </trans-unit>
        <trans-unit id="210abaf17ff3ec5eb2c7af6e5b16de32d6e6ae30" translate="yes" xml:space="preserve">
          <source>Forms a raw slice from a pointer and a length.</source>
          <target state="translated">ポインタと長さから生のスライスを形成します。</target>
        </trans-unit>
        <trans-unit id="ea94791ea16dd8ff76446a6806bef950d2a35dda" translate="yes" xml:space="preserve">
          <source>Forms a slice from a pointer and a length.</source>
          <target state="translated">ポインタと長さからスライスを形成します。</target>
        </trans-unit>
        <trans-unit id="06be2fafa00fc2fe5a6c9c357e8e8125e9d52b63" translate="yes" xml:space="preserve">
          <source>Forms of conditional compilation</source>
          <target state="translated">条件付きコンパイルの形式</target>
        </trans-unit>
        <trans-unit id="95db96d50ddd63cc755c744c881b8149aa6240cb" translate="yes" xml:space="preserve">
          <source>Fortunately, &lt;code&gt;Arc&amp;lt;T&amp;gt;&lt;/code&gt;&lt;em&gt;is&lt;/em&gt; a type like &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; that is safe to use in concurrent situations. The &lt;em&gt;a&lt;/em&gt; stands for &lt;em&gt;atomic&lt;/em&gt;, meaning it&amp;rsquo;s an &lt;em&gt;atomically reference counted&lt;/em&gt; type. Atomics are an additional kind of concurrency primitive that we won&amp;rsquo;t cover in detail here: see the standard library documentation for &lt;a href=&quot;../std/sync/atomic/index&quot;&gt;&lt;code&gt;std::sync::atomic&lt;/code&gt;&lt;/a&gt; for more details. At this point, you just need to know that atomics work like primitive types but are safe to share across threads.</source>
          <target state="translated">幸い、 &lt;code&gt;Arc&amp;lt;T&amp;gt;&lt;/code&gt; &lt;em&gt;は&lt;/em&gt; &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; ようなタイプであり、並行して使用しても安全です。&lt;em&gt;Aは、&lt;/em&gt;の略で&lt;em&gt;、原子&lt;/em&gt;それはです意味、&lt;em&gt;アトミック参照カウント&lt;/em&gt;タイプ。アトミックは、ここでは詳しく説明しない追加の種類の同時実行プリミティブです。詳細については、&lt;a href=&quot;../std/sync/atomic/index&quot;&gt; &lt;code&gt;std::sync::atomic&lt;/code&gt; &lt;/a&gt;の標準ライブラリのドキュメントを参照してください。この時点で、アトミックはプリミティブ型のように機能しますが、スレッド間で安全に共有できることを知っておく必要があります。</target>
        </trans-unit>
        <trans-unit id="5d73377b70640496419f6407086a0d313c7e7ff8" translate="yes" xml:space="preserve">
          <source>Fortunately, &lt;code&gt;Arc&amp;lt;T&amp;gt;&lt;/code&gt;&lt;em&gt;is&lt;/em&gt; a type like &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; that is safe to use in concurrent situations. The &lt;em&gt;a&lt;/em&gt; stands for &lt;em&gt;atomic&lt;/em&gt;, meaning it&amp;rsquo;s an &lt;em&gt;atomically reference counted&lt;/em&gt; type. Atomics are an additional kind of concurrency primitive that we won&amp;rsquo;t cover in detail here: see the standard library documentation for &lt;code&gt;std::sync::atomic&lt;/code&gt; for more details. At this point, you just need to know that atomics work like primitive types but are safe to share across threads.</source>
          <target state="translated">幸い、 &lt;code&gt;Arc&amp;lt;T&amp;gt;&lt;/code&gt; &lt;em&gt;は&lt;/em&gt; &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; ようなタイプであり、同時状況で安全に使用できます。&lt;em&gt;Aは、&lt;/em&gt;の略で&lt;em&gt;、原子&lt;/em&gt;それはです意味、&lt;em&gt;アトミック参照カウント&lt;/em&gt;タイプ。アトミックは、ここでは詳しく説明しない並行処理プリミティブの追加の種類です。詳細については、 &lt;code&gt;std::sync::atomic&lt;/code&gt; の標準ライブラリのドキュメントを参照してください。この時点で、アトミックはプリミティブ型のように機能しますが、スレッド間で安全に共有できることを知る必要があります。</target>
        </trans-unit>
        <trans-unit id="666085c7aedfa1058109fb338307fe9135fa126f" translate="yes" xml:space="preserve">
          <source>Fortunately, Rust provides another, more reliable way to break out of a loop. You can place the &lt;code&gt;break&lt;/code&gt; keyword within the loop to tell the program when to stop executing the loop. Recall that we did this in the guessing game in the &lt;a href=&quot;ch02-00-guessing-game-tutorial#quitting-after-a-correct-guess&quot;&gt;&amp;ldquo;Quitting After a Correct Guess&amp;rdquo;&lt;/a&gt; section of Chapter 2 to exit the program when the user won the game by guessing the correct number.</source>
          <target state="translated">さいわい、Rustは、ループから抜け出すためのもう1つのより信頼できる方法を提供します。ループ内に &lt;code&gt;break&lt;/code&gt; キーワードを配置して、ループの実行を停止するタイミングをプログラムに指示できます。ユーザーが正しい数字を推測することでゲームに勝ったときにプログラムを終了するために、第2章の&lt;a href=&quot;ch02-00-guessing-game-tutorial#quitting-after-a-correct-guess&quot;&gt;「正しい推測の後に終了する」&lt;/a&gt;セクションの推測ゲームでこれを行ったことを思い出してください。</target>
        </trans-unit>
        <trans-unit id="2cb7a99620b68db8c37724516fdd41d698381b5f" translate="yes" xml:space="preserve">
          <source>Fortunately, another solution is available to us. We can create a struct that will hold the closure and the resulting value of calling the closure. The struct will execute the closure only if we need the resulting value, and it will cache the resulting value so the rest of our code doesn&amp;rsquo;t have to be responsible for saving and reusing the result. You may know this pattern as &lt;em&gt;memoization&lt;/em&gt; or &lt;em&gt;lazy evaluation&lt;/em&gt;.</source>
          <target state="translated">幸いなことに、別のソリューションを利用できます。クロージャーと、クロージャーを呼び出した結果の値を保持する構造体を作成できます。構造体は、結果の値が必要な場合にのみクロージャを実行し、結果の値をキャッシュするため、コードの残りの部分で結果を保存して再利用する必要はありません。このパターンを&lt;em&gt;メモ化&lt;/em&gt;または&lt;em&gt;遅延評価&lt;/em&gt;として知っているかもしれません。</target>
        </trans-unit>
        <trans-unit id="f7a735d42f1842468e27de670a61d95c695c7d77" translate="yes" xml:space="preserve">
          <source>Fortunately, you can access elements in a string in other ways.</source>
          <target state="translated">幸いなことに、文字列の要素には他の方法でアクセスすることができます。</target>
        </trans-unit>
        <trans-unit id="26c62d0f8742a3291654c368905359570c6ea25b" translate="yes" xml:space="preserve">
          <source>Forwards to the method defined on the type &lt;code&gt;Any&lt;/code&gt;.</source>
          <target state="translated">タイプ &lt;code&gt;Any&lt;/code&gt; で定義されたメソッドに転送します。</target>
        </trans-unit>
        <trans-unit id="24cfeaa5136f131a42d0f730ceb00f25ca26cc8d" translate="yes" xml:space="preserve">
          <source>Forwards to the method defined on the type &lt;code&gt;dyn Error&lt;/code&gt;.</source>
          <target state="translated">タイプ &lt;code&gt;dyn Error&lt;/code&gt; 定義されたメソッドに転送します。</target>
        </trans-unit>
        <trans-unit id="0679572252c2b655ac576ff11e583e4913c131ee" translate="yes" xml:space="preserve">
          <source>Fourth, we end the line with a semicolon (&lt;code&gt;;&lt;/code&gt;), which indicates that this expression is over and the next one is ready to begin. Most lines of Rust code end with a semicolon.</source>
          <target state="translated">4番目に、セミコロン（ &lt;code&gt;;&lt;/code&gt; ）で行を終了します。これは、この式が終了し、次の式を開始する準備ができていることを示しています。Rustコードのほとんどの行はセミコロンで終わります。</target>
        </trans-unit>
        <trans-unit id="e91e4dcc96ac0d3266337d9de8422f466122555f" translate="yes" xml:space="preserve">
          <source>Fourth, we use &lt;code&gt;expect&lt;/code&gt; repeatedly to handle different errors, and if the user runs our program without specifying enough arguments, they&amp;rsquo;ll get an &lt;code&gt;index out of bounds&lt;/code&gt; error from Rust that doesn&amp;rsquo;t clearly explain the problem. It would be best if all the error-handling code were in one place so future maintainers had only one place to consult in the code if the error-handling logic needed to change. Having all the error-handling code in one place will also ensure that we&amp;rsquo;re printing messages that will be meaningful to our end users.</source>
          <target state="translated">4番目に、 &lt;code&gt;expect&lt;/code&gt; を繰り返し使用してさまざまなエラーを処理します。ユーザーが十分な引数を指定せずにプログラムを実行すると、Rustから &lt;code&gt;index out of bounds&lt;/code&gt; エラーのインデックスが表示され、問題を明確に説明できません。すべてのエラー処理コードが1か所にあり、エラー処理ロジックを変更する必要がある場合に、将来のメンテナがコードを参照する場所が1か所だけであることが最善です。すべてのエラー処理コードを1か所に配置すると、エンドユーザーにとって意味のあるメッセージが確実に出力されます。</target>
        </trans-unit>
        <trans-unit id="ed80c9c6442c4ef597a2552dbc33ed2f6b8de23a" translate="yes" xml:space="preserve">
          <source>FpCategory</source>
          <target state="translated">FpCategory</target>
        </trans-unit>
        <trans-unit id="c5c59edf4deff28b67b52b7a2d8ad2d144fc15b7" translate="yes" xml:space="preserve">
          <source>FpCategory::borrow</source>
          <target state="translated">FpCategory::borrow</target>
        </trans-unit>
        <trans-unit id="d23597cd1aa75ec546253dcec332bbc22c760f94" translate="yes" xml:space="preserve">
          <source>FpCategory::borrow_mut</source>
          <target state="translated">FpCategory::borrow_mut</target>
        </trans-unit>
        <trans-unit id="751583c9571b8ec42bb13ab3d996f5382f516c44" translate="yes" xml:space="preserve">
          <source>FpCategory::clone</source>
          <target state="translated">FpCategory::clone</target>
        </trans-unit>
        <trans-unit id="e4a9c0c7fcd7d91e6ce8dc4a84468c8dff226fb5" translate="yes" xml:space="preserve">
          <source>FpCategory::clone_from</source>
          <target state="translated">FpCategory::clone_from</target>
        </trans-unit>
        <trans-unit id="b09dd4eed7eb664a0468a101965945f86157a4f7" translate="yes" xml:space="preserve">
          <source>FpCategory::clone_into</source>
          <target state="translated">FpCategory::clone_into</target>
        </trans-unit>
        <trans-unit id="e5a224baf80bccef6b2c64c70bf061c66d0be643" translate="yes" xml:space="preserve">
          <source>FpCategory::eq</source>
          <target state="translated">FpCategory::eq</target>
        </trans-unit>
        <trans-unit id="77d96d469c7820ed9e8e2550859bf5e231b036bf" translate="yes" xml:space="preserve">
          <source>FpCategory::fmt</source>
          <target state="translated">FpCategory::fmt</target>
        </trans-unit>
        <trans-unit id="d3c55faf6a766af5731aad29ee9bd29b2c453928" translate="yes" xml:space="preserve">
          <source>FpCategory::from</source>
          <target state="translated">FpCategory::from</target>
        </trans-unit>
        <trans-unit id="69b2c07f9aa6d8ad6d30706f48ef52d237b2ba0a" translate="yes" xml:space="preserve">
          <source>FpCategory::into</source>
          <target state="translated">FpCategory::into</target>
        </trans-unit>
        <trans-unit id="f38a3329d567847d1d7020b8f9012bbd294a84cd" translate="yes" xml:space="preserve">
          <source>FpCategory::ne</source>
          <target state="translated">FpCategory::ne</target>
        </trans-unit>
        <trans-unit id="e71fe5458996e5a849fc677ae5804fc42c3dccda" translate="yes" xml:space="preserve">
          <source>FpCategory::to_owned</source>
          <target state="translated">FpCategory::to_owned</target>
        </trans-unit>
        <trans-unit id="54a1083e9a89cf3ecfe165675d7e0ab953ccd2ff" translate="yes" xml:space="preserve">
          <source>FpCategory::try_from</source>
          <target state="translated">FpCategory::try_from</target>
        </trans-unit>
        <trans-unit id="bbaf3ef7ecd842bc58b2772d5b932f8c39fd8488" translate="yes" xml:space="preserve">
          <source>FpCategory::try_into</source>
          <target state="translated">FpCategory::try_into</target>
        </trans-unit>
        <trans-unit id="ccefd29d45a4e40d6e9d86bb94af58e1a57d4c4b" translate="yes" xml:space="preserve">
          <source>FpCategory::type_id</source>
          <target state="translated">FpCategory::type_id</target>
        </trans-unit>
        <trans-unit id="a9d589b62118d02ae561f6231ff20e78ff11bc84" translate="yes" xml:space="preserve">
          <source>Fran&amp;ccedil;ais</source>
          <target state="translated">Fran&amp;ccedil;ais</target>
        </trans-unit>
        <trans-unit id="b358be1e7ac10187955efc826d6d6dee79296909" translate="yes" xml:space="preserve">
          <source>Free item</source>
          <target state="translated">無料アイテム</target>
        </trans-unit>
        <trans-unit id="3f66052a107eaf9bae7cad0f61fb462f47ec2c47" translate="yes" xml:space="preserve">
          <source>From</source>
          <target state="translated">From</target>
        </trans-unit>
        <trans-unit id="594a1d99ee61c47df541cb8769ebf939c8303d7b" translate="yes" xml:space="preserve">
          <source>From &lt;code&gt;&amp;amp;T&lt;/code&gt; to &lt;code&gt;&amp;amp;U&lt;/code&gt; when &lt;code&gt;T: Deref&amp;lt;Target=U&amp;gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&amp;amp;T&lt;/code&gt; に &lt;code&gt;&amp;amp;U&lt;/code&gt; とき &lt;code&gt;T: Deref&amp;lt;Target=U&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="08bb11df769057fd0b8c167b5ec397162b1aeadb" translate="yes" xml:space="preserve">
          <source>From &lt;code&gt;&amp;amp;mut T&lt;/code&gt; to &lt;code&gt;&amp;amp;U&lt;/code&gt; when &lt;code&gt;T: Deref&amp;lt;Target=U&amp;gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&amp;amp;mut T&lt;/code&gt; へ &lt;code&gt;&amp;amp;U&lt;/code&gt; とき &lt;code&gt;T: Deref&amp;lt;Target=U&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e62732420027526966136d3f7e0dfec52557b634" translate="yes" xml:space="preserve">
          <source>From &lt;code&gt;&amp;amp;mut T&lt;/code&gt; to &lt;code&gt;&amp;amp;mut U&lt;/code&gt; when &lt;code&gt;T: DerefMut&amp;lt;Target=U&amp;gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&amp;amp;mut T&lt;/code&gt; に &lt;code&gt;&amp;amp;mut U&lt;/code&gt; とき &lt;code&gt;T: DerefMut&amp;lt;Target=U&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5cc6d703e34af866105ca191df0b36dc89356e81" translate="yes" xml:space="preserve">
          <source>From there, clearly FIRST(M) can include any token from SEP_SET(M) or ALPHA_SET(M), and if the complex NT match is nonempty, then any token starting FIRST(&lt;code&gt;tt ...&lt;/code&gt;) could work too. The last piece to consider is &amp;epsilon;. SEP_SET(M) and FIRST(&lt;code&gt;tt ...&lt;/code&gt;) \ {&amp;epsilon;} cannot contain &amp;epsilon;, but ALPHA_SET(M) could. Hence, this definition allows M to accept &amp;epsilon; if and only if &amp;epsilon; &amp;isin; ALPHA_SET(M) does. This is correct because for M to accept &amp;epsilon; in the complex NT case, both the complex NT and &amp;alpha; must accept it. If OP = &lt;code&gt;+&lt;/code&gt;, meaning that the complex NT cannot be empty, then by definition &amp;epsilon; &amp;notin; ALPHA_SET(M). Otherwise, the complex NT can accept zero repetitions, and then ALPHA_SET(M) = FOLLOW(&lt;code&gt;&amp;alpha;&lt;/code&gt;). So this definition is correct with respect to \varepsilon as well.</source>
          <target state="translated">そこから、FIRST（M）にはSEP_SET（M）またはALPHA_SET（M）のトークンを含めることができます。また、複雑なNTの一致が空でなければ、FIRST（ &lt;code&gt;tt ...&lt;/code&gt; ）で始まるトークンも機能します。検討する最後のピースは&amp;epsilon;です。 SEP_SET（M）およびFIRST（ &lt;code&gt;tt ...&lt;/code&gt; ）\ {&amp;epsilon;}に&amp;epsilon;を含めることはできませんが、ALPHA_SET（M）は含めることができます。したがって、この定義により、Mは、&amp;epsilon;&amp;isin;ALPHA_SET（M）が受け入れる場合に限り、&amp;epsilon;を受け入れることができます。 Mが複素数NTの場合に&amp;epsilon;を受け入れるには、複素数NTと&amp;alpha;の両方がそれを受け入れなければならないので、これは正しいです。 OP = &lt;code&gt;+&lt;/code&gt; の場合、つまり複雑なNTは空にできないことを意味し、定義により&amp;epsilon;&amp;notin;ALPHA_SET（M）になります。それ以外の場合、複素数NTはゼロの繰り返しを受け入れることができ、ALPHA_SET（M）= FOLLOW（ &lt;code&gt;&amp;alpha;&lt;/code&gt; ）になります。したがって、この定義は\ varepsilonに関しても正しいです。</target>
        </trans-unit>
        <trans-unit id="6307b5e07877494d1ce0b104a2d8b0a5b885f84f" translate="yes" xml:space="preserve">
          <source>From these, you can see that the first argument is a format string. It is required by the compiler for this to be a string literal; it cannot be a variable passed in (in order to perform validity checking). The compiler will then parse the format string and determine if the list of arguments provided is suitable to pass to this format string.</source>
          <target state="translated">これらから、最初の引数がフォーマット文字列であることがわかります。コンパイラはこれが文字列リテラルであることを要求します。コンパイラはフォーマット文字列を解析して、与えられた引数のリストがこのフォーマット文字列に渡すのに適しているかどうかを判断します。</target>
        </trans-unit>
        <trans-unit id="636e988ae72ddba156e347bc59d0f315352542a2" translate="yes" xml:space="preserve">
          <source>From::from</source>
          <target state="translated">From::from</target>
        </trans-unit>
        <trans-unit id="08e29d1fb00c3b7e4f55ea6c2152be52cb9cffd5" translate="yes" xml:space="preserve">
          <source>FromBytesWithNulError</source>
          <target state="translated">FromBytesWithNulError</target>
        </trans-unit>
        <trans-unit id="0fa886d5bcda7ff44295308c06a19bb9f2ca1ef2" translate="yes" xml:space="preserve">
          <source>FromBytesWithNulError::borrow</source>
          <target state="translated">FromBytesWithNulError::borrow</target>
        </trans-unit>
        <trans-unit id="227e72c0ed27fb7c2db4228bdeaa7f1e2f4fbb2b" translate="yes" xml:space="preserve">
          <source>FromBytesWithNulError::borrow_mut</source>
          <target state="translated">FromBytesWithNulError::borrow_mut</target>
        </trans-unit>
        <trans-unit id="917a76dd8d5ce07b2b32608e4fac2c07d85334ec" translate="yes" xml:space="preserve">
          <source>FromBytesWithNulError::cause</source>
          <target state="translated">FromBytesWithNulError::cause</target>
        </trans-unit>
        <trans-unit id="d333ff8aac4bcb0b21149b90dd779023c26f7273" translate="yes" xml:space="preserve">
          <source>FromBytesWithNulError::clone</source>
          <target state="translated">FromBytesWithNulError::clone</target>
        </trans-unit>
        <trans-unit id="da349bb088fcf13b909128e597aea220053fe70a" translate="yes" xml:space="preserve">
          <source>FromBytesWithNulError::clone_from</source>
          <target state="translated">FromBytesWithNulError::clone_from</target>
        </trans-unit>
        <trans-unit id="e43ad4a91a8891363b5526c6aac70021b8e8b9f4" translate="yes" xml:space="preserve">
          <source>FromBytesWithNulError::clone_into</source>
          <target state="translated">FromBytesWithNulError::clone_into</target>
        </trans-unit>
        <trans-unit id="fdc34d9df46754c7b93341a3863f600ff88ad5cd" translate="yes" xml:space="preserve">
          <source>FromBytesWithNulError::description</source>
          <target state="translated">FromBytesWithNulError::description</target>
        </trans-unit>
        <trans-unit id="5258a1a84a0930cb189c0d18cfff3f7a1eb6f915" translate="yes" xml:space="preserve">
          <source>FromBytesWithNulError::eq</source>
          <target state="translated">FromBytesWithNulError::eq</target>
        </trans-unit>
        <trans-unit id="b27518c7b2442b78dc66650a48141386af70ddd9" translate="yes" xml:space="preserve">
          <source>FromBytesWithNulError::fmt</source>
          <target state="translated">FromBytesWithNulError::fmt</target>
        </trans-unit>
        <trans-unit id="69e350f5eddef56ca7534154dcbe130775e89c37" translate="yes" xml:space="preserve">
          <source>FromBytesWithNulError::from</source>
          <target state="translated">FromBytesWithNulError::from</target>
        </trans-unit>
        <trans-unit id="830e5d4f61a30595ce8e6e3f78c6591c5a9b7752" translate="yes" xml:space="preserve">
          <source>FromBytesWithNulError::into</source>
          <target state="translated">FromBytesWithNulError::into</target>
        </trans-unit>
        <trans-unit id="6b9fdbfff68a5cffa6a5604dd67451bcca2d12ad" translate="yes" xml:space="preserve">
          <source>FromBytesWithNulError::ne</source>
          <target state="translated">FromBytesWithNulError::ne</target>
        </trans-unit>
        <trans-unit id="2e862184199a6c230f9f2243d8e321f0f31557e5" translate="yes" xml:space="preserve">
          <source>FromBytesWithNulError::source</source>
          <target state="translated">FromBytesWithNulError::source</target>
        </trans-unit>
        <trans-unit id="54f826f0c977e84bbff8ed219c9607014ac9fd7e" translate="yes" xml:space="preserve">
          <source>FromBytesWithNulError::to_owned</source>
          <target state="translated">FromBytesWithNulError::to_owned</target>
        </trans-unit>
        <trans-unit id="d83ad93be5deca6785c67b79fcb106d01b5a7e60" translate="yes" xml:space="preserve">
          <source>FromBytesWithNulError::to_string</source>
          <target state="translated">FromBytesWithNulError::to_string</target>
        </trans-unit>
        <trans-unit id="36df31fcad872818b05aba9f12c079035a34e814" translate="yes" xml:space="preserve">
          <source>FromBytesWithNulError::try_from</source>
          <target state="translated">FromBytesWithNulError::try_from</target>
        </trans-unit>
        <trans-unit id="d7d718854b40de2a9cbbf7938bd184275c5fbb3b" translate="yes" xml:space="preserve">
          <source>FromBytesWithNulError::try_into</source>
          <target state="translated">FromBytesWithNulError::try_into</target>
        </trans-unit>
        <trans-unit id="1bc03244b37f99bdcf813bff54e53e08450612a6" translate="yes" xml:space="preserve">
          <source>FromBytesWithNulError::type_id</source>
          <target state="translated">FromBytesWithNulError::type_id</target>
        </trans-unit>
        <trans-unit id="aeea3b1e1e881ee75f416d42b6a41418a5524277" translate="yes" xml:space="preserve">
          <source>FromFn</source>
          <target state="translated">FromFn</target>
        </trans-unit>
        <trans-unit id="c8518b8fb7e55cb8991e5e6afc3e72d086748ed8" translate="yes" xml:space="preserve">
          <source>FromFn::all</source>
          <target state="translated">FromFn::all</target>
        </trans-unit>
        <trans-unit id="ee215b3f9bdf8dee097ae6be066d5141a74c4422" translate="yes" xml:space="preserve">
          <source>FromFn::any</source>
          <target state="translated">FromFn::any</target>
        </trans-unit>
        <trans-unit id="ccf5f67c540d5b91e0949ed126f30addc417daf6" translate="yes" xml:space="preserve">
          <source>FromFn::borrow</source>
          <target state="translated">FromFn::borrow</target>
        </trans-unit>
        <trans-unit id="e13f389bbae0dab5ea909e4eb43686476caf7c83" translate="yes" xml:space="preserve">
          <source>FromFn::borrow_mut</source>
          <target state="translated">FromFn::borrow_mut</target>
        </trans-unit>
        <trans-unit id="ac215cf840365da8e5c15c7bdaf15be9e7bb130d" translate="yes" xml:space="preserve">
          <source>FromFn::by_ref</source>
          <target state="translated">FromFn::by_ref</target>
        </trans-unit>
        <trans-unit id="9395f4718e1c738177a77570adb7ed3222bbacab" translate="yes" xml:space="preserve">
          <source>FromFn::chain</source>
          <target state="translated">FromFn::chain</target>
        </trans-unit>
        <trans-unit id="b9afae70b69d87da33ee72ad265f7577a8b521f0" translate="yes" xml:space="preserve">
          <source>FromFn::clone</source>
          <target state="translated">FromFn::clone</target>
        </trans-unit>
        <trans-unit id="f5d858a83a4b11765ad648f861ff5231f437bd27" translate="yes" xml:space="preserve">
          <source>FromFn::clone_from</source>
          <target state="translated">FromFn::clone_from</target>
        </trans-unit>
        <trans-unit id="b1269311c4f13149e8a6a84d90f870800d694c44" translate="yes" xml:space="preserve">
          <source>FromFn::clone_into</source>
          <target state="translated">FromFn::clone_into</target>
        </trans-unit>
        <trans-unit id="bb6aa8a11de5554807803affb28dee3aaf938492" translate="yes" xml:space="preserve">
          <source>FromFn::cloned</source>
          <target state="translated">FromFn::cloned</target>
        </trans-unit>
        <trans-unit id="9e2de70acc9938a364a71db569d88dd7084bb122" translate="yes" xml:space="preserve">
          <source>FromFn::cmp</source>
          <target state="translated">FromFn::cmp</target>
        </trans-unit>
        <trans-unit id="5dc944d29ed685b0903453522c86c34ab231d0d9" translate="yes" xml:space="preserve">
          <source>FromFn::collect</source>
          <target state="translated">FromFn::collect</target>
        </trans-unit>
        <trans-unit id="d23fcdf7cbb91c0e0f62994569131c297c4ddefc" translate="yes" xml:space="preserve">
          <source>FromFn::copied</source>
          <target state="translated">FromFn::copied</target>
        </trans-unit>
        <trans-unit id="3a168b114945b66f27edc167ced99723dbcea667" translate="yes" xml:space="preserve">
          <source>FromFn::count</source>
          <target state="translated">FromFn::count</target>
        </trans-unit>
        <trans-unit id="0f1dba887057a79ecd9d75a789118b1a760f1bf9" translate="yes" xml:space="preserve">
          <source>FromFn::cycle</source>
          <target state="translated">FromFn::cycle</target>
        </trans-unit>
        <trans-unit id="364eebc33448cd890e813a37012795c1cb46e143" translate="yes" xml:space="preserve">
          <source>FromFn::enumerate</source>
          <target state="translated">FromFn::enumerate</target>
        </trans-unit>
        <trans-unit id="25ecbb4825daa1bf477051b32ed08a14a60adb4e" translate="yes" xml:space="preserve">
          <source>FromFn::eq</source>
          <target state="translated">FromFn::eq</target>
        </trans-unit>
        <trans-unit id="893cabc068144c0b9718092e7068a32de2da2fab" translate="yes" xml:space="preserve">
          <source>FromFn::filter</source>
          <target state="translated">FromFn::filter</target>
        </trans-unit>
        <trans-unit id="c428a70eed23c8748e97d7b52c53163675f55635" translate="yes" xml:space="preserve">
          <source>FromFn::filter_map</source>
          <target state="translated">FromFn::filter_map</target>
        </trans-unit>
        <trans-unit id="93846947c2b596c22bfad404c3e09fd4600173a4" translate="yes" xml:space="preserve">
          <source>FromFn::find</source>
          <target state="translated">FromFn::find</target>
        </trans-unit>
        <trans-unit id="c2fa8bbc9e75620bd3f52ec77812c683d5720689" translate="yes" xml:space="preserve">
          <source>FromFn::find_map</source>
          <target state="translated">FromFn::find_map</target>
        </trans-unit>
        <trans-unit id="c247400a7e94cb47ecf9ec277ef05328b6da39a7" translate="yes" xml:space="preserve">
          <source>FromFn::flat_map</source>
          <target state="translated">FromFn::flat_map</target>
        </trans-unit>
        <trans-unit id="b8e395dd0daa535ba3a1b2d30ce2a2297e2749c0" translate="yes" xml:space="preserve">
          <source>FromFn::flatten</source>
          <target state="translated">FromFn::flatten</target>
        </trans-unit>
        <trans-unit id="291d5ac05a71cd905fd11a3c926116e9910a0f32" translate="yes" xml:space="preserve">
          <source>FromFn::fmt</source>
          <target state="translated">FromFn::fmt</target>
        </trans-unit>
        <trans-unit id="1d6bc4438b3ee6de07c8226628c01c605cc2c12f" translate="yes" xml:space="preserve">
          <source>FromFn::fold</source>
          <target state="translated">FromFn::fold</target>
        </trans-unit>
        <trans-unit id="b0cc978eb55c645b04d4748225713d097a016c16" translate="yes" xml:space="preserve">
          <source>FromFn::for_each</source>
          <target state="translated">FromFn::for_each</target>
        </trans-unit>
        <trans-unit id="696126195e64358c186e7c8c9ba70300c1a54795" translate="yes" xml:space="preserve">
          <source>FromFn::from</source>
          <target state="translated">FromFn::from</target>
        </trans-unit>
        <trans-unit id="9422f31b3fdd3444d7d9a657e431cfc6bf368554" translate="yes" xml:space="preserve">
          <source>FromFn::fuse</source>
          <target state="translated">FromFn::fuse</target>
        </trans-unit>
        <trans-unit id="f0898886063e02add23e81048db80e14869522c9" translate="yes" xml:space="preserve">
          <source>FromFn::ge</source>
          <target state="translated">FromFn::ge</target>
        </trans-unit>
        <trans-unit id="938bc9b27931508db8e9ec4ee7e2ecfffcce85a9" translate="yes" xml:space="preserve">
          <source>FromFn::gt</source>
          <target state="translated">FromFn::gt</target>
        </trans-unit>
        <trans-unit id="5f5242ca11d2be4a93763ad44cf5a1901bba1038" translate="yes" xml:space="preserve">
          <source>FromFn::inspect</source>
          <target state="translated">FromFn::inspect</target>
        </trans-unit>
        <trans-unit id="8b24481c5fe21f0d4eefc523e12c42563a9349cf" translate="yes" xml:space="preserve">
          <source>FromFn::into</source>
          <target state="translated">FromFn::into</target>
        </trans-unit>
        <trans-unit id="ae4f0c406ba5ce7367ef7c9f2f0ff1d657965af3" translate="yes" xml:space="preserve">
          <source>FromFn::into_iter</source>
          <target state="translated">FromFn::into_iter</target>
        </trans-unit>
        <trans-unit id="afff9a10d69a5add7ba160fd8944e5721b2448b0" translate="yes" xml:space="preserve">
          <source>FromFn::is_sorted</source>
          <target state="translated">FromFn::is_sorted</target>
        </trans-unit>
        <trans-unit id="65555425c11972ea9a43c73ece4221af77b37aac" translate="yes" xml:space="preserve">
          <source>FromFn::is_sorted_by</source>
          <target state="translated">FromFn::is_sorted_by</target>
        </trans-unit>
        <trans-unit id="e962a84a22ee3e8286deb98ec6a05dc09fb7c1da" translate="yes" xml:space="preserve">
          <source>FromFn::is_sorted_by_key</source>
          <target state="translated">FromFn::is_sorted_by_key</target>
        </trans-unit>
        <trans-unit id="8ce1a710f4a70c6d10a044e276250699320aaf07" translate="yes" xml:space="preserve">
          <source>FromFn::last</source>
          <target state="translated">FromFn::last</target>
        </trans-unit>
        <trans-unit id="84d790ccc1d625773ad60ff7dbafd9719b2c1e60" translate="yes" xml:space="preserve">
          <source>FromFn::le</source>
          <target state="translated">FromFn::le</target>
        </trans-unit>
        <trans-unit id="1d494ff0f71cf64264c61f3a0d0064224ba064b9" translate="yes" xml:space="preserve">
          <source>FromFn::lt</source>
          <target state="translated">FromFn::lt</target>
        </trans-unit>
        <trans-unit id="751b0a3e001bca29a735704d123f59f147dc51fa" translate="yes" xml:space="preserve">
          <source>FromFn::map</source>
          <target state="translated">FromFn::map</target>
        </trans-unit>
        <trans-unit id="9557f4915531898d81c94e1b4775a41a6bfc887c" translate="yes" xml:space="preserve">
          <source>FromFn::max</source>
          <target state="translated">FromFn::max</target>
        </trans-unit>
        <trans-unit id="773497baa5bf74230ff0d338cc91e10ae9beefb2" translate="yes" xml:space="preserve">
          <source>FromFn::max_by</source>
          <target state="translated">FromFn::max_by</target>
        </trans-unit>
        <trans-unit id="a9eb1b7e1e1ef9f1ccc894fc973f5685bd2ee298" translate="yes" xml:space="preserve">
          <source>FromFn::max_by_key</source>
          <target state="translated">FromFn::max_by_key</target>
        </trans-unit>
        <trans-unit id="4a3bb54490abbe7310741d5e0d22f11e79c14bac" translate="yes" xml:space="preserve">
          <source>FromFn::min</source>
          <target state="translated">FromFn::min</target>
        </trans-unit>
        <trans-unit id="21f309276fd1f5ad2886f9f09f747d01a840db3c" translate="yes" xml:space="preserve">
          <source>FromFn::min_by</source>
          <target state="translated">FromFn::min_by</target>
        </trans-unit>
        <trans-unit id="2d400ed7d58d506ce1a2d1a6674024793a847641" translate="yes" xml:space="preserve">
          <source>FromFn::min_by_key</source>
          <target state="translated">FromFn::min_by_key</target>
        </trans-unit>
        <trans-unit id="de781dccfea9f050f774daaef74a4dfd4b3cebfc" translate="yes" xml:space="preserve">
          <source>FromFn::ne</source>
          <target state="translated">FromFn::ne</target>
        </trans-unit>
        <trans-unit id="3e9810f0bdab4291492baf74a6bfa30aa21a77bd" translate="yes" xml:space="preserve">
          <source>FromFn::next</source>
          <target state="translated">FromFn::next</target>
        </trans-unit>
        <trans-unit id="5ec257b2ca69cb089b12e30887e2681f5aac401e" translate="yes" xml:space="preserve">
          <source>FromFn::nth</source>
          <target state="translated">FromFn::nth</target>
        </trans-unit>
        <trans-unit id="f77021ba879adead1d2e4228d87ef2663943b655" translate="yes" xml:space="preserve">
          <source>FromFn::partial_cmp</source>
          <target state="translated">FromFn::partial_cmp</target>
        </trans-unit>
        <trans-unit id="288b8538ae0f2879d43bf94297be3c6133a5f820" translate="yes" xml:space="preserve">
          <source>FromFn::partition</source>
          <target state="translated">FromFn::partition</target>
        </trans-unit>
        <trans-unit id="6ef8b8fdd33b9e08d9b7b53fc44edd140535fa87" translate="yes" xml:space="preserve">
          <source>FromFn::peekable</source>
          <target state="translated">FromFn::peekable</target>
        </trans-unit>
        <trans-unit id="9fd5da570ca929f5692e6716a06272746f0fa1d8" translate="yes" xml:space="preserve">
          <source>FromFn::position</source>
          <target state="translated">FromFn::position</target>
        </trans-unit>
        <trans-unit id="9fd628265dd15f36a0898f2dbb30e35b39ee8fc7" translate="yes" xml:space="preserve">
          <source>FromFn::product</source>
          <target state="translated">FromFn::product</target>
        </trans-unit>
        <trans-unit id="f309b4b73dbc1c831c32217194b232a41056a729" translate="yes" xml:space="preserve">
          <source>FromFn::rev</source>
          <target state="translated">FromFn::rev</target>
        </trans-unit>
        <trans-unit id="a0c49b380c128a9bc5de2c3faa4da44b9fc8bbc6" translate="yes" xml:space="preserve">
          <source>FromFn::rposition</source>
          <target state="translated">FromFn::rposition</target>
        </trans-unit>
        <trans-unit id="19e6db953101ebb606b1b19e2f9d1a4a26b6809c" translate="yes" xml:space="preserve">
          <source>FromFn::scan</source>
          <target state="translated">FromFn::scan</target>
        </trans-unit>
        <trans-unit id="5d0d63065b04c4b09f0aa2957112e2fe0f225430" translate="yes" xml:space="preserve">
          <source>FromFn::size_hint</source>
          <target state="translated">FromFn::size_hint</target>
        </trans-unit>
        <trans-unit id="38e4d5016859cd612a773350539b8a8f8ed4f69e" translate="yes" xml:space="preserve">
          <source>FromFn::skip</source>
          <target state="translated">FromFn::skip</target>
        </trans-unit>
        <trans-unit id="12a7c70e2490eae42133b8d79eb74bbc281ed3c1" translate="yes" xml:space="preserve">
          <source>FromFn::skip_while</source>
          <target state="translated">FromFn::skip_while</target>
        </trans-unit>
        <trans-unit id="b8e40ee23c90dfe55dc2adc6eb4e1fa68a56d3f2" translate="yes" xml:space="preserve">
          <source>FromFn::step_by</source>
          <target state="translated">FromFn::step_by</target>
        </trans-unit>
        <trans-unit id="b3529c28fcc7f21d0e3ae52857e07c43bb6c8013" translate="yes" xml:space="preserve">
          <source>FromFn::sum</source>
          <target state="translated">FromFn::sum</target>
        </trans-unit>
        <trans-unit id="6daa93fa94eca065b7334c99d285abb621f9ead1" translate="yes" xml:space="preserve">
          <source>FromFn::take</source>
          <target state="translated">FromFn::take</target>
        </trans-unit>
        <trans-unit id="156bad7396ba706178e8ea89088365ae093fa7cd" translate="yes" xml:space="preserve">
          <source>FromFn::take_while</source>
          <target state="translated">FromFn::take_while</target>
        </trans-unit>
        <trans-unit id="9839051411a51874292b5e676a817c3565f4cdb7" translate="yes" xml:space="preserve">
          <source>FromFn::to_owned</source>
          <target state="translated">FromFn::to_owned</target>
        </trans-unit>
        <trans-unit id="ea08cb40922d3bbf69b931ce4241edaff08bba49" translate="yes" xml:space="preserve">
          <source>FromFn::try_fold</source>
          <target state="translated">FromFn::try_fold</target>
        </trans-unit>
        <trans-unit id="bd6c17792affbcc25b9cd6f9d78ae20bb6d8b440" translate="yes" xml:space="preserve">
          <source>FromFn::try_for_each</source>
          <target state="translated">FromFn::try_for_each</target>
        </trans-unit>
        <trans-unit id="599426d9bfd33f5d58f1c89e6fe9a710264c9a4f" translate="yes" xml:space="preserve">
          <source>FromFn::try_from</source>
          <target state="translated">FromFn::try_from</target>
        </trans-unit>
        <trans-unit id="171a8267d3eee4bfef7510e89b3fcd5c1ca50a99" translate="yes" xml:space="preserve">
          <source>FromFn::try_into</source>
          <target state="translated">FromFn::try_into</target>
        </trans-unit>
        <trans-unit id="5dbbcba7b3548c91e4ba3998b160d580ba16ca70" translate="yes" xml:space="preserve">
          <source>FromFn::type_id</source>
          <target state="translated">FromFn::type_id</target>
        </trans-unit>
        <trans-unit id="aa009f7a09e21b409ed71bd642c5fa986b90aa2e" translate="yes" xml:space="preserve">
          <source>FromFn::unzip</source>
          <target state="translated">FromFn::unzip</target>
        </trans-unit>
        <trans-unit id="efab3519b36c349c534fa71bff1cf729099859a4" translate="yes" xml:space="preserve">
          <source>FromFn::zip</source>
          <target state="translated">FromFn::zip</target>
        </trans-unit>
        <trans-unit id="32b4bf2ef95e2d2aec7397ff0647d8babccdf02c" translate="yes" xml:space="preserve">
          <source>FromIterator</source>
          <target state="translated">FromIterator</target>
        </trans-unit>
        <trans-unit id="e1870c89bb148edb105f129409fab48efce69f62" translate="yes" xml:space="preserve">
          <source>FromIterator::from_iter</source>
          <target state="translated">FromIterator::from_iter</target>
        </trans-unit>
        <trans-unit id="4bad9f9fcb9b55d2910b83906b94cb3131b43c5d" translate="yes" xml:space="preserve">
          <source>FromRawFd</source>
          <target state="translated">FromRawFd</target>
        </trans-unit>
        <trans-unit id="a56a062331e31ac1c2b5a5dac0da0b0abb9d6001" translate="yes" xml:space="preserve">
          <source>FromRawHandle</source>
          <target state="translated">FromRawHandle</target>
        </trans-unit>
        <trans-unit id="c37ec0040cdbff3d1d305c56421552ddc2489011" translate="yes" xml:space="preserve">
          <source>FromRawSocket</source>
          <target state="translated">FromRawSocket</target>
        </trans-unit>
        <trans-unit id="4dd00b66acc9fd438c18fe918918688eac4eb0c2" translate="yes" xml:space="preserve">
          <source>FromStr</source>
          <target state="translated">FromStr</target>
        </trans-unit>
        <trans-unit id="dab7a59717331bdfe8b7ab641211c67a9dfb50eb" translate="yes" xml:space="preserve">
          <source>FromStr::from_str</source>
          <target state="translated">FromStr::from_str</target>
        </trans-unit>
        <trans-unit id="95bb1cb5923a9cd972fc547c7b002fc5ba2ce7a2" translate="yes" xml:space="preserve">
          <source>FromUtf16Error</source>
          <target state="translated">FromUtf16Error</target>
        </trans-unit>
        <trans-unit id="fcb0d72a120d0c67f17203436ea5960146d62ec2" translate="yes" xml:space="preserve">
          <source>FromUtf16Error::borrow</source>
          <target state="translated">FromUtf16Error::borrow</target>
        </trans-unit>
        <trans-unit id="113c351153f138ad8e550bd5bc87e5b5707c2ec9" translate="yes" xml:space="preserve">
          <source>FromUtf16Error::borrow_mut</source>
          <target state="translated">FromUtf16Error::borrow_mut</target>
        </trans-unit>
        <trans-unit id="97836107e76f8ba4b690e740298dc374f5970b10" translate="yes" xml:space="preserve">
          <source>FromUtf16Error::cause</source>
          <target state="translated">FromUtf16Error::cause</target>
        </trans-unit>
        <trans-unit id="e94e007d11f3b1dda24c2465e9cb38303e308e73" translate="yes" xml:space="preserve">
          <source>FromUtf16Error::description</source>
          <target state="translated">FromUtf16Error::description</target>
        </trans-unit>
        <trans-unit id="2c32d02e6ae646045db166c707624569fdae72d4" translate="yes" xml:space="preserve">
          <source>FromUtf16Error::fmt</source>
          <target state="translated">FromUtf16Error::fmt</target>
        </trans-unit>
        <trans-unit id="ba0c3d406513bc34fdc41eb68be8108d0b00395d" translate="yes" xml:space="preserve">
          <source>FromUtf16Error::from</source>
          <target state="translated">FromUtf16Error::from</target>
        </trans-unit>
        <trans-unit id="d5575256ab625def6f4f6cc664052c3b6a58df9c" translate="yes" xml:space="preserve">
          <source>FromUtf16Error::into</source>
          <target state="translated">FromUtf16Error::into</target>
        </trans-unit>
        <trans-unit id="1037656b64535df6ad944739d9fe0fdcb97622a8" translate="yes" xml:space="preserve">
          <source>FromUtf16Error::source</source>
          <target state="translated">FromUtf16Error::source</target>
        </trans-unit>
        <trans-unit id="b3d3ba376b016c98e88ee83c7eef33115c996117" translate="yes" xml:space="preserve">
          <source>FromUtf16Error::to_string</source>
          <target state="translated">FromUtf16Error::to_string</target>
        </trans-unit>
        <trans-unit id="245023bdaeff4ddeb623b54723ef50f0ab4c73b2" translate="yes" xml:space="preserve">
          <source>FromUtf16Error::try_from</source>
          <target state="translated">FromUtf16Error::try_from</target>
        </trans-unit>
        <trans-unit id="01065c5d7bcef1fc490d7e58b90a6f4dca50e4fb" translate="yes" xml:space="preserve">
          <source>FromUtf16Error::try_into</source>
          <target state="translated">FromUtf16Error::try_into</target>
        </trans-unit>
        <trans-unit id="7abd332163a5c3ec4a4d4c52373ebd061517082b" translate="yes" xml:space="preserve">
          <source>FromUtf16Error::type_id</source>
          <target state="translated">FromUtf16Error::type_id</target>
        </trans-unit>
        <trans-unit id="f9cdf743b2bfb7c8f355315fba316a0105bfe790" translate="yes" xml:space="preserve">
          <source>FromUtf8Error</source>
          <target state="translated">FromUtf8Error</target>
        </trans-unit>
        <trans-unit id="748acfd665ce8fa3a2ec94e5db04d35258af238a" translate="yes" xml:space="preserve">
          <source>FromUtf8Error::as_bytes</source>
          <target state="translated">FromUtf8Error::as_bytes</target>
        </trans-unit>
        <trans-unit id="67756ec60a16d0349c2bef1bfd6a9c4327f5ce92" translate="yes" xml:space="preserve">
          <source>FromUtf8Error::borrow</source>
          <target state="translated">FromUtf8Error::borrow</target>
        </trans-unit>
        <trans-unit id="f2d6dcca426a9ff1031f09b28e7a3c7e7e95cac7" translate="yes" xml:space="preserve">
          <source>FromUtf8Error::borrow_mut</source>
          <target state="translated">FromUtf8Error::borrow_mut</target>
        </trans-unit>
        <trans-unit id="934a60e32f54920b868089cc1b73dc891da641c4" translate="yes" xml:space="preserve">
          <source>FromUtf8Error::cause</source>
          <target state="translated">FromUtf8Error::cause</target>
        </trans-unit>
        <trans-unit id="6102ea0bc31df9b0bd54ca8c6f45681afdc7f3be" translate="yes" xml:space="preserve">
          <source>FromUtf8Error::description</source>
          <target state="translated">FromUtf8Error::description</target>
        </trans-unit>
        <trans-unit id="db9d99b90918d37a2499587faaadf8cc4c5ba1e8" translate="yes" xml:space="preserve">
          <source>FromUtf8Error::fmt</source>
          <target state="translated">FromUtf8Error::fmt</target>
        </trans-unit>
        <trans-unit id="24fe7f678b98dc8e8766a2bc4809afc6de8f2446" translate="yes" xml:space="preserve">
          <source>FromUtf8Error::from</source>
          <target state="translated">FromUtf8Error::from</target>
        </trans-unit>
        <trans-unit id="a6ad7612f0b82b4e8c1334c223cd16ae09fe7950" translate="yes" xml:space="preserve">
          <source>FromUtf8Error::into</source>
          <target state="translated">FromUtf8Error::into</target>
        </trans-unit>
        <trans-unit id="b7463c02515f737098afa25500af32760dfea53f" translate="yes" xml:space="preserve">
          <source>FromUtf8Error::into_bytes</source>
          <target state="translated">FromUtf8Error::into_bytes</target>
        </trans-unit>
        <trans-unit id="436ef25551c663c53e58d3b69c8eb9dcb10d3235" translate="yes" xml:space="preserve">
          <source>FromUtf8Error::source</source>
          <target state="translated">FromUtf8Error::source</target>
        </trans-unit>
        <trans-unit id="e878d23af1cc95debb68e1cd9e006909c66b66ff" translate="yes" xml:space="preserve">
          <source>FromUtf8Error::to_string</source>
          <target state="translated">FromUtf8Error::to_string</target>
        </trans-unit>
        <trans-unit id="4fbc2f11f0a6ae5317111c17fe4fc467bfab1283" translate="yes" xml:space="preserve">
          <source>FromUtf8Error::try_from</source>
          <target state="translated">FromUtf8Error::try_from</target>
        </trans-unit>
        <trans-unit id="6ffa2b38a64b65974d8f8259323056cadca3d2ba" translate="yes" xml:space="preserve">
          <source>FromUtf8Error::try_into</source>
          <target state="translated">FromUtf8Error::try_into</target>
        </trans-unit>
        <trans-unit id="240101bf524733a6227bf7410764c0c88b68ac25" translate="yes" xml:space="preserve">
          <source>FromUtf8Error::type_id</source>
          <target state="translated">FromUtf8Error::type_id</target>
        </trans-unit>
        <trans-unit id="1520b6f9dab555ff5f00e3142608c852624a5bdc" translate="yes" xml:space="preserve">
          <source>FromUtf8Error::utf8_error</source>
          <target state="translated">FromUtf8Error::utf8_error</target>
        </trans-unit>
        <trans-unit id="66c90b064569c220f974a737cea488bb020847ab" translate="yes" xml:space="preserve">
          <source>FromVecWithNulError</source>
          <target state="translated">FromVecWithNulError</target>
        </trans-unit>
        <trans-unit id="c6a1521589825282f50a8f81cbc487bceb136c94" translate="yes" xml:space="preserve">
          <source>Fully Qualified Syntax for Disambiguation: Calling Methods with the Same Name</source>
          <target state="translated">曖昧性の解消のための完全修飾構文。同名のメソッドの呼び出し</target>
        </trans-unit>
        <trans-unit id="5c898364acf0b0ec642107ce708180420a68b11c" translate="yes" xml:space="preserve">
          <source>Fully qualified paths allow for disambiguating the path for &lt;a href=&quot;items/implementations#trait-implementations&quot;&gt;trait implementations&lt;/a&gt; and for specifying &lt;a href=&quot;#canonical-paths&quot;&gt;canonical paths&lt;/a&gt;. When used in a type specification, it supports using the type syntax specified below.</source>
          <target state="translated">完全修飾パスを使用すると、&lt;a href=&quot;items/implementations#trait-implementations&quot;&gt;トレイト実装&lt;/a&gt;のパスを明確にし、&lt;a href=&quot;#canonical-paths&quot;&gt;正規パス&lt;/a&gt;を指定できます。型指定で使用する場合、以下に指定する型構文の使用をサポートします。</target>
        </trans-unit>
        <trans-unit id="627268cbc7ba4357c2bec7566f1dd46e677125cd" translate="yes" xml:space="preserve">
          <source>Fully qualified paths allow for disambiguating the path for &lt;a href=&quot;items/implementations#trait-implementations&quot;&gt;trait implementations&lt;/a&gt; and for specifying &lt;a href=&quot;paths#canonical-paths&quot;&gt;canonical paths&lt;/a&gt;. When used in a type specification, it supports using the type syntax specified below.</source>
          <target state="translated">完全修飾パスを使用すると、&lt;a href=&quot;items/implementations#trait-implementations&quot;&gt;特性実装&lt;/a&gt;のパスを明確化し、&lt;a href=&quot;paths#canonical-paths&quot;&gt;正規のパス&lt;/a&gt;を指定できます。型仕様で使用する場合、以下に指定する型構文の使用をサポートします。</target>
        </trans-unit>
        <trans-unit id="b6327f489e8e1ede1c999c25b8f597a08dc5e5e7" translate="yes" xml:space="preserve">
          <source>Function Bodies Contain Statements and Expressions</source>
          <target state="translated">関数ボディには、ステートメントと式が含まれています。</target>
        </trans-unit>
        <trans-unit id="cec90ffa8d067cfb33c2b7e5ea59f57a4ab51f07" translate="yes" xml:space="preserve">
          <source>Function Parameters</source>
          <target state="translated">機能パラメータ</target>
        </trans-unit>
        <trans-unit id="fa21ce3153a0bf08e0da8f6a18de7da525121cc9" translate="yes" xml:space="preserve">
          <source>Function Pointers</source>
          <target state="translated">関数ポインタ</target>
        </trans-unit>
        <trans-unit id="691f82dd99cc6e11c5ba71e42753b5f300e68086" translate="yes" xml:space="preserve">
          <source>Function and closure return type</source>
          <target state="translated">機能とクロージャのリターンタイプ</target>
        </trans-unit>
        <trans-unit id="d289dd66334349d57b2378d89d1ba44a53f0a66f" translate="yes" xml:space="preserve">
          <source>Function bodies are made up of a series of statements optionally ending in an expression. So far, we&amp;rsquo;ve only covered functions without an ending expression, but you have seen an expression as part of a statement. Because Rust is an expression-based language, this is an important distinction to understand. Other languages don&amp;rsquo;t have the same distinctions, so let&amp;rsquo;s look at what statements and expressions are and how their differences affect the bodies of functions.</source>
          <target state="translated">関数本体は、オプションで式で終了する一連のステートメントで構成されます。ここまでは、終了式のない関数のみを取り上げてきましたが、ステートメントの一部として式を見てきました。Rustは式ベースの言語であるため、これは理解しておくべき重要な違いです。他の言語には同じ違いがないので、ステートメントと式とは何か、そしてそれらの違いが関数の本体にどのように影響するかを見てみましょう。</target>
        </trans-unit>
        <trans-unit id="36ed99d43dd98e906de43534c86aaa6329bc9711" translate="yes" xml:space="preserve">
          <source>Function call expression; also used to initialize tuple &lt;code&gt;struct&lt;/code&gt;s and tuple &lt;code&gt;enum&lt;/code&gt; variants</source>
          <target state="translated">関数呼び出し式。タプル &lt;code&gt;struct&lt;/code&gt; sとタプル &lt;code&gt;enum&lt;/code&gt; 型バリアントの初期化にも使用されます</target>
        </trans-unit>
        <trans-unit id="dd4883aafb3cdb86f14e39e1c7d1f7edcb15ec04" translate="yes" xml:space="preserve">
          <source>Function calls, array indexing</source>
          <target state="translated">関数呼び出し、配列のインデキシング</target>
        </trans-unit>
        <trans-unit id="03a2a2fdcb8604503eda22208a226681c6707089" translate="yes" xml:space="preserve">
          <source>Function definitions are also statements; the entire preceding example is a statement in itself.</source>
          <target state="translated">関数の定義もまた文であり、前出の例全体がそれ自体が文です。</target>
        </trans-unit>
        <trans-unit id="19f4a1aef809a484c5ab3c0d1a7708464ac28c08" translate="yes" xml:space="preserve">
          <source>Function definitions in Rust start with &lt;code&gt;fn&lt;/code&gt; and have a set of parentheses after the function name. The curly brackets tell the compiler where the function body begins and ends.</source>
          <target state="translated">Rustの関数定義は &lt;code&gt;fn&lt;/code&gt; で始まり、関数名の後に括弧のセットがあります。中括弧は、コンパイラーに関数本体の始まりと終わりを示します。</target>
        </trans-unit>
        <trans-unit id="f527034de868b518981c857b1101b4a224d018cd" translate="yes" xml:space="preserve">
          <source>Function item</source>
          <target state="translated">機能項目</target>
        </trans-unit>
        <trans-unit id="da36bbe9a85b3247538cc3fec803f4a226bb9238" translate="yes" xml:space="preserve">
          <source>Function item to address cast</source>
          <target state="translated">キャストをアドレスする関数項目</target>
        </trans-unit>
        <trans-unit id="52aa3d6cb40fdb90563de7ef5199bdc225e74e20" translate="yes" xml:space="preserve">
          <source>Function item to function pointer cast</source>
          <target state="translated">関数項目から関数ポインタへのキャスト</target>
        </trans-unit>
        <trans-unit id="ac11f9c060fdae4134739658017e8fe749dedfd5" translate="yes" xml:space="preserve">
          <source>Function item to pointer cast</source>
          <target state="translated">ポインタキャスト先の関数項目</target>
        </trans-unit>
        <trans-unit id="fb2c99db471758809fdfaf0b8a6e27088636a20c" translate="yes" xml:space="preserve">
          <source>Function item types</source>
          <target state="translated">機能項目の種類</target>
        </trans-unit>
        <trans-unit id="63984dbadb9d453a95bc957d9bd90bb4979166b9" translate="yes" xml:space="preserve">
          <source>Function item types (i.e., the distinct types defined for each function)</source>
          <target state="translated">関数項目型(すなわち、各関数に対して定義された個別の型)。</target>
        </trans-unit>
        <trans-unit id="2a993beecec2e700f82f799b3535fa3479b4141d" translate="yes" xml:space="preserve">
          <source>Function item types and function pointers automatically implement the trait.</source>
          <target state="translated">関数項目型と関数ポインタは自動的に形質を実装します。</target>
        </trans-unit>
        <trans-unit id="112c129d1e3d14e754ce4eeea68853b281f78ee9" translate="yes" xml:space="preserve">
          <source>Function or method declarations without a body only allow &lt;a href=&quot;../identifiers&quot;&gt;IDENTIFIER&lt;/a&gt; or &lt;code&gt;_&lt;/code&gt;&lt;a href=&quot;../patterns#wildcard-pattern&quot;&gt;wild card&lt;/a&gt; patterns. &lt;code&gt;mut&lt;/code&gt;&lt;a href=&quot;../identifiers&quot;&gt;IDENTIFIER&lt;/a&gt; is currently allowed, but it is deprecated and will become a hard error in the future.</source>
          <target state="translated">本文なしの関数またはメソッドの宣言では、&lt;a href=&quot;../identifiers&quot;&gt;IDENTIFIER&lt;/a&gt;または &lt;code&gt;_&lt;/code&gt; &lt;a href=&quot;../patterns#wildcard-pattern&quot;&gt;ワイルドカード&lt;/a&gt;パターンのみを使用できます。 &lt;code&gt;mut&lt;/code&gt; &lt;a href=&quot;../identifiers&quot;&gt;IDENTIFIER&lt;/a&gt;は現在許可されていますが、非推奨であり、将来ハードエラーになる予定です。</target>
        </trans-unit>
        <trans-unit id="e3cf1b82dd9028df4aba63ebe0d8e6f3637f2b6a" translate="yes" xml:space="preserve">
          <source>Function parameters are immutable unless declared with &lt;code&gt;mut&lt;/code&gt;. The &lt;code&gt;mut&lt;/code&gt; keyword applies only to the following parameter. For example: &lt;code&gt;|mut x, y|&lt;/code&gt; and &lt;code&gt;fn f(mut x: Box&amp;lt;i32&amp;gt;, y: Box&amp;lt;i32&amp;gt;)&lt;/code&gt; declare one mutable variable &lt;code&gt;x&lt;/code&gt; and one immutable variable &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="translated">関数パラメーターは、 &lt;code&gt;mut&lt;/code&gt; で宣言されない限り不変です。 &lt;code&gt;mut&lt;/code&gt; キーワードは次のパラメータのみに適用されます。例： &lt;code&gt;|mut x, y|&lt;/code&gt; そして &lt;code&gt;fn f(mut x: Box&amp;lt;i32&amp;gt;, y: Box&amp;lt;i32&amp;gt;)&lt;/code&gt; DECLARE 1つの不定変数 &lt;code&gt;x&lt;/code&gt; と一つ不変変数 &lt;code&gt;y&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4604d097c2775f4db1df4742036b1ee376e32c38" translate="yes" xml:space="preserve">
          <source>Function parameters can also be patterns. The code in Listing 18-6, which declares a function named &lt;code&gt;foo&lt;/code&gt; that takes one parameter named &lt;code&gt;x&lt;/code&gt; of type &lt;code&gt;i32&lt;/code&gt;, should by now look familiar.</source>
          <target state="translated">関数パラメーターはパターンにすることもできます。リスト18-6のコードは、タイプ &lt;code&gt;i32&lt;/code&gt; の &lt;code&gt;x&lt;/code&gt; という名前のパラメーターを1つ取る &lt;code&gt;foo&lt;/code&gt; という名前の関数を宣言していますが、これでおなじみのはずです。</target>
        </trans-unit>
        <trans-unit id="ec08d670fef2800f4026355b26b0c2e7326f8889" translate="yes" xml:space="preserve">
          <source>Function parameters, &lt;code&gt;let&lt;/code&gt; statements, and &lt;code&gt;for&lt;/code&gt; loops can only accept irrefutable patterns, because the program cannot do anything meaningful when values don&amp;rsquo;t match. The &lt;code&gt;if let&lt;/code&gt; and &lt;code&gt;while let&lt;/code&gt; expressions accept refutable and irrefutable patterns, but the compiler warns against irrefutable patterns because by definition they&amp;rsquo;re intended to handle possible failure: the functionality of a conditional is in its ability to perform differently depending on success or failure.</source>
          <target state="translated">関数パラメーター、 &lt;code&gt;let&lt;/code&gt; ステートメント、および &lt;code&gt;for&lt;/code&gt; ループは、値が一致しない場合にプログラムが意味のあることを何も実行できないため、反駁できないパターンのみを受け入れることができます。 &lt;code&gt;if let&lt;/code&gt; と &lt;code&gt;while let&lt;/code&gt; 表現は反駁と反論できないパターンを受け入れますが、定義によって、彼らは失敗する可能性を処理することを目的としているので、コンパイラは反論できないパターンに対して警告している：条件付きの機能が成功したか失敗したかに応じて異なる実行する能力です。</target>
        </trans-unit>
        <trans-unit id="803b8d98596aa720a921c36dc97486686404539d" translate="yes" xml:space="preserve">
          <source>Function parameters, &lt;code&gt;let&lt;/code&gt; statements, and &lt;code&gt;for&lt;/code&gt; loops can only accept irrefutable patterns, because the program cannot do anything meaningful when values don&amp;rsquo;t match. The &lt;code&gt;if let&lt;/code&gt; and &lt;code&gt;while let&lt;/code&gt; expressions only accept refutable patterns, because by definition they&amp;rsquo;re intended to handle possible failure: the functionality of a conditional is in its ability to perform differently depending on success or failure.</source>
          <target state="translated">関数のパラメーター、 &lt;code&gt;let&lt;/code&gt; ステートメント、および &lt;code&gt;for&lt;/code&gt; ループは、反駁できないパターンのみを受け入れることができます。これは、値が一致しない場合、プログラムは意味のあることを何も実行できないためです。 &lt;code&gt;if let&lt;/code&gt; と &lt;code&gt;while let&lt;/code&gt; 定義によって彼らは失敗する可能性を処理することを目的としているので、式は唯一、反駁パターンを受け入れる：条件付きの機能が成功したか失敗したかに応じて異なる実行する能力です。</target>
        </trans-unit>
        <trans-unit id="0262efe3a9e70538318d9f40b5d5c3aee785392d" translate="yes" xml:space="preserve">
          <source>Function pointer</source>
          <target state="translated">関数ポインタ</target>
        </trans-unit>
        <trans-unit id="3a6ad7fb74590fbb0ac18b89a46012671173169c" translate="yes" xml:space="preserve">
          <source>Function pointer to address cast</source>
          <target state="translated">アドレスキャスト先の関数ポインタ</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
