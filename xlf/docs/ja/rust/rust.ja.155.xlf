<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="rust">
    <body>
      <group id="rust">
        <trans-unit id="ae7d5fede6f36ca665efd08ae94669cbd14b7cc6" translate="yes" xml:space="preserve">
          <source>VarsOs::find</source>
          <target state="translated">VarsOs::find</target>
        </trans-unit>
        <trans-unit id="a97602f19f448bb335f850af073a9ce84cd5d88f" translate="yes" xml:space="preserve">
          <source>VarsOs::find_map</source>
          <target state="translated">VarsOs::find_map</target>
        </trans-unit>
        <trans-unit id="3678c5ef82f2cb08bc3b287c092316a2ada00a18" translate="yes" xml:space="preserve">
          <source>VarsOs::flat_map</source>
          <target state="translated">VarsOs::flat_map</target>
        </trans-unit>
        <trans-unit id="e8a42aa17639bc96d10468e86951b455866c4904" translate="yes" xml:space="preserve">
          <source>VarsOs::flatten</source>
          <target state="translated">VarsOs::flatten</target>
        </trans-unit>
        <trans-unit id="46320ba9ecbf055cb2e56af08cec6e628a336f92" translate="yes" xml:space="preserve">
          <source>VarsOs::fmt</source>
          <target state="translated">VarsOs::fmt</target>
        </trans-unit>
        <trans-unit id="7bcbf2e75da1a46894beb596faa2a485d58f6a2d" translate="yes" xml:space="preserve">
          <source>VarsOs::fold</source>
          <target state="translated">VarsOs::fold</target>
        </trans-unit>
        <trans-unit id="51b69162489f5329a52d08395d177be1d60cb6a5" translate="yes" xml:space="preserve">
          <source>VarsOs::for_each</source>
          <target state="translated">VarsOs::for_each</target>
        </trans-unit>
        <trans-unit id="e06ff647273899d3fd4ea62e139dbf757cf3d8cc" translate="yes" xml:space="preserve">
          <source>VarsOs::from</source>
          <target state="translated">VarsOs::from</target>
        </trans-unit>
        <trans-unit id="0245bbf420434587e8ec6bdf35d9cf62a6cde011" translate="yes" xml:space="preserve">
          <source>VarsOs::fuse</source>
          <target state="translated">VarsOs::fuse</target>
        </trans-unit>
        <trans-unit id="479913c8896a1c5102d2a5ea1234f740bfde2328" translate="yes" xml:space="preserve">
          <source>VarsOs::ge</source>
          <target state="translated">VarsOs::ge</target>
        </trans-unit>
        <trans-unit id="17feba1de0fe9c2331df5c53c185c7617b4b8cc1" translate="yes" xml:space="preserve">
          <source>VarsOs::gt</source>
          <target state="translated">VarsOs::gt</target>
        </trans-unit>
        <trans-unit id="3033c2aeecf938c398013c5ab0852cd122a7d6b0" translate="yes" xml:space="preserve">
          <source>VarsOs::inspect</source>
          <target state="translated">VarsOs::inspect</target>
        </trans-unit>
        <trans-unit id="3f0b3d392367dab2dc143ca178da7b4d778bbd17" translate="yes" xml:space="preserve">
          <source>VarsOs::into</source>
          <target state="translated">VarsOs::into</target>
        </trans-unit>
        <trans-unit id="16fa54e40b1321bab910ef3ac287342748aea056" translate="yes" xml:space="preserve">
          <source>VarsOs::into_iter</source>
          <target state="translated">VarsOs::into_iter</target>
        </trans-unit>
        <trans-unit id="5c63504ce660906345551dba943ce8d045612e95" translate="yes" xml:space="preserve">
          <source>VarsOs::is_sorted</source>
          <target state="translated">VarsOs::is_sorted</target>
        </trans-unit>
        <trans-unit id="0fdd66d1bfafd9226a154278db222c3aee97c735" translate="yes" xml:space="preserve">
          <source>VarsOs::is_sorted_by</source>
          <target state="translated">VarsOs::is_sorted_by</target>
        </trans-unit>
        <trans-unit id="204163a740d898b80542e502e7da9a7661337b36" translate="yes" xml:space="preserve">
          <source>VarsOs::is_sorted_by_key</source>
          <target state="translated">VarsOs::is_sorted_by_key</target>
        </trans-unit>
        <trans-unit id="ae35eac698343e1ee4eeec512aed1c16a136d0c7" translate="yes" xml:space="preserve">
          <source>VarsOs::last</source>
          <target state="translated">VarsOs::last</target>
        </trans-unit>
        <trans-unit id="c01f90cf460a2003e266fcb0b34415121c12b736" translate="yes" xml:space="preserve">
          <source>VarsOs::le</source>
          <target state="translated">VarsOs::le</target>
        </trans-unit>
        <trans-unit id="c0cd86a67a36a78ad1451aca611b8fd991760e20" translate="yes" xml:space="preserve">
          <source>VarsOs::lt</source>
          <target state="translated">VarsOs::lt</target>
        </trans-unit>
        <trans-unit id="1cefab93b3f7c14142541eedb899ab5e71be9fc4" translate="yes" xml:space="preserve">
          <source>VarsOs::map</source>
          <target state="translated">VarsOs::map</target>
        </trans-unit>
        <trans-unit id="e6a8c9754fd49b2d51cbf24ecf6d94304e8e64c3" translate="yes" xml:space="preserve">
          <source>VarsOs::max</source>
          <target state="translated">VarsOs::max</target>
        </trans-unit>
        <trans-unit id="1f1f50d119da0ed96c40d44ea09ef96812375781" translate="yes" xml:space="preserve">
          <source>VarsOs::max_by</source>
          <target state="translated">VarsOs::max_by</target>
        </trans-unit>
        <trans-unit id="0f2e6793ee02c5031cf6cc652fab9884db10bbdb" translate="yes" xml:space="preserve">
          <source>VarsOs::max_by_key</source>
          <target state="translated">VarsOs::max_by_key</target>
        </trans-unit>
        <trans-unit id="af3d6a04943a8cf3ad8a6978c4e20520bbd7810c" translate="yes" xml:space="preserve">
          <source>VarsOs::min</source>
          <target state="translated">VarsOs::min</target>
        </trans-unit>
        <trans-unit id="65325562c65c7a37d9553910d80a4c50713493e5" translate="yes" xml:space="preserve">
          <source>VarsOs::min_by</source>
          <target state="translated">VarsOs::min_by</target>
        </trans-unit>
        <trans-unit id="ce454f9015d8cd8601694fb53b1aac058cf4ec7c" translate="yes" xml:space="preserve">
          <source>VarsOs::min_by_key</source>
          <target state="translated">VarsOs::min_by_key</target>
        </trans-unit>
        <trans-unit id="1c7e1099c4b87dd8e83e87ef896a8fe06530c255" translate="yes" xml:space="preserve">
          <source>VarsOs::ne</source>
          <target state="translated">VarsOs::ne</target>
        </trans-unit>
        <trans-unit id="abe200e7a70bbf42fbb261f3d6ecb1a850953161" translate="yes" xml:space="preserve">
          <source>VarsOs::next</source>
          <target state="translated">VarsOs::next</target>
        </trans-unit>
        <trans-unit id="753f8e880e8ece081c8080be088d05ec0d200f80" translate="yes" xml:space="preserve">
          <source>VarsOs::nth</source>
          <target state="translated">VarsOs::nth</target>
        </trans-unit>
        <trans-unit id="b6af18bf99508b4a2d5aac1fbdfad4b5780a6f74" translate="yes" xml:space="preserve">
          <source>VarsOs::partial_cmp</source>
          <target state="translated">VarsOs::partial_cmp</target>
        </trans-unit>
        <trans-unit id="ba0322e8a281d2965f09dafdfe9b78ec1f84e172" translate="yes" xml:space="preserve">
          <source>VarsOs::partition</source>
          <target state="translated">VarsOs::partition</target>
        </trans-unit>
        <trans-unit id="91938a0453fc3e7b7813e5df0009b7580ef490d3" translate="yes" xml:space="preserve">
          <source>VarsOs::peekable</source>
          <target state="translated">VarsOs::peekable</target>
        </trans-unit>
        <trans-unit id="7a37b0e06b2930dc5a294f234caa4a16804177d0" translate="yes" xml:space="preserve">
          <source>VarsOs::position</source>
          <target state="translated">VarsOs::position</target>
        </trans-unit>
        <trans-unit id="4f098ada18205fbc46f5cd22be9968ee3d7b0363" translate="yes" xml:space="preserve">
          <source>VarsOs::product</source>
          <target state="translated">VarsOs::product</target>
        </trans-unit>
        <trans-unit id="6bf84c68f9daffbf302bd074f0e8be5a6ea7823d" translate="yes" xml:space="preserve">
          <source>VarsOs::rev</source>
          <target state="translated">VarsOs::rev</target>
        </trans-unit>
        <trans-unit id="1c60d42a9413b8a7c101dc83c2565f5d37b81a2a" translate="yes" xml:space="preserve">
          <source>VarsOs::rposition</source>
          <target state="translated">VarsOs::rposition</target>
        </trans-unit>
        <trans-unit id="f65790ae1d5619919415f11aef0fe2aee47448a6" translate="yes" xml:space="preserve">
          <source>VarsOs::scan</source>
          <target state="translated">VarsOs::scan</target>
        </trans-unit>
        <trans-unit id="cb8748c599d4e59ff120199769de64e5786ad929" translate="yes" xml:space="preserve">
          <source>VarsOs::size_hint</source>
          <target state="translated">VarsOs::size_hint</target>
        </trans-unit>
        <trans-unit id="3ea59b4b1aae9dc7c132d58be49e094fc8eaa95f" translate="yes" xml:space="preserve">
          <source>VarsOs::skip</source>
          <target state="translated">VarsOs::skip</target>
        </trans-unit>
        <trans-unit id="02c1e6608b48c61896af2016b5b52d75d023957f" translate="yes" xml:space="preserve">
          <source>VarsOs::skip_while</source>
          <target state="translated">VarsOs::skip_while</target>
        </trans-unit>
        <trans-unit id="a0d6c6ad525cb20f675d004819c2121e056f42c8" translate="yes" xml:space="preserve">
          <source>VarsOs::step_by</source>
          <target state="translated">VarsOs::step_by</target>
        </trans-unit>
        <trans-unit id="6846222d088cefb1075c2f24c4eadbd7aed705eb" translate="yes" xml:space="preserve">
          <source>VarsOs::sum</source>
          <target state="translated">VarsOs::sum</target>
        </trans-unit>
        <trans-unit id="91c3203375fe48ab0d3fa32901ee5de67c77a411" translate="yes" xml:space="preserve">
          <source>VarsOs::take</source>
          <target state="translated">VarsOs::take</target>
        </trans-unit>
        <trans-unit id="144ba83f71bf339d2fc7ce6106d27d858be059f1" translate="yes" xml:space="preserve">
          <source>VarsOs::take_while</source>
          <target state="translated">VarsOs::take_while</target>
        </trans-unit>
        <trans-unit id="330e5de6bdd0923300ee2e19673f82661fe3b5aa" translate="yes" xml:space="preserve">
          <source>VarsOs::try_fold</source>
          <target state="translated">VarsOs::try_fold</target>
        </trans-unit>
        <trans-unit id="7f9b1fb25f2d8dc898d57dd0ad57aa6074d0db25" translate="yes" xml:space="preserve">
          <source>VarsOs::try_for_each</source>
          <target state="translated">VarsOs::try_for_each</target>
        </trans-unit>
        <trans-unit id="0371b8d74af891c05681249ef7f32d83f6e8d3d4" translate="yes" xml:space="preserve">
          <source>VarsOs::try_from</source>
          <target state="translated">VarsOs::try_from</target>
        </trans-unit>
        <trans-unit id="45aa3acec5ebcabeaf089da80e453c0f5f80cd2d" translate="yes" xml:space="preserve">
          <source>VarsOs::try_into</source>
          <target state="translated">VarsOs::try_into</target>
        </trans-unit>
        <trans-unit id="24d5d9ef2bba5983d72962681554163d3cc0d7ea" translate="yes" xml:space="preserve">
          <source>VarsOs::type_id</source>
          <target state="translated">VarsOs::type_id</target>
        </trans-unit>
        <trans-unit id="3e592311e132f7aa730baaf56aa5dd0ae220e3d4" translate="yes" xml:space="preserve">
          <source>VarsOs::unzip</source>
          <target state="translated">VarsOs::unzip</target>
        </trans-unit>
        <trans-unit id="e4769bb4e270bd8e779d33f3cae641957c2527b8" translate="yes" xml:space="preserve">
          <source>VarsOs::zip</source>
          <target state="translated">VarsOs::zip</target>
        </trans-unit>
        <trans-unit id="3e8f48ebd55451a20501b45af4a4265976d600b6" translate="yes" xml:space="preserve">
          <source>Vec</source>
          <target state="translated">Vec</target>
        </trans-unit>
        <trans-unit id="9e8ec9d213a0da31ccaaba571b14789e42b08935" translate="yes" xml:space="preserve">
          <source>Vec::align_to</source>
          <target state="translated">Vec::align_to</target>
        </trans-unit>
        <trans-unit id="a6107ed66afb53f802511a5a643ee8656e497b0a" translate="yes" xml:space="preserve">
          <source>Vec::align_to_mut</source>
          <target state="translated">Vec::align_to_mut</target>
        </trans-unit>
        <trans-unit id="f61abeec7dd01f8c47bf83db4b4d0456a9af5e0b" translate="yes" xml:space="preserve">
          <source>Vec::append</source>
          <target state="translated">Vec::append</target>
        </trans-unit>
        <trans-unit id="966721890fa8492f6b4046bd9708da68c72adc73" translate="yes" xml:space="preserve">
          <source>Vec::as_mut</source>
          <target state="translated">Vec::as_mut</target>
        </trans-unit>
        <trans-unit id="831194353af948439212b65f5180ee63686be5ff" translate="yes" xml:space="preserve">
          <source>Vec::as_mut_ptr</source>
          <target state="translated">Vec::as_mut_ptr</target>
        </trans-unit>
        <trans-unit id="2cd229f1c1c1c67e55b523142a4b5506c79ab5e4" translate="yes" xml:space="preserve">
          <source>Vec::as_mut_slice</source>
          <target state="translated">Vec::as_mut_slice</target>
        </trans-unit>
        <trans-unit id="c1e6da016e5f4ce35006127886b4b180eede68b8" translate="yes" xml:space="preserve">
          <source>Vec::as_ptr</source>
          <target state="translated">Vec::as_ptr</target>
        </trans-unit>
        <trans-unit id="8b5099d8e9c3e715862b2b38f181235c7cc24477" translate="yes" xml:space="preserve">
          <source>Vec::as_ref</source>
          <target state="translated">Vec::as_ref</target>
        </trans-unit>
        <trans-unit id="e50619a5c819f0a35e08edd227565f793562e4c8" translate="yes" xml:space="preserve">
          <source>Vec::as_slice</source>
          <target state="translated">Vec::as_slice</target>
        </trans-unit>
        <trans-unit id="0fd5dd3c29cf93dd4e97ef65f08a9644b11adf66" translate="yes" xml:space="preserve">
          <source>Vec::binary_search</source>
          <target state="translated">Vec::binary_search</target>
        </trans-unit>
        <trans-unit id="b52fc5259d9a5986689a231729ba2250dccdf822" translate="yes" xml:space="preserve">
          <source>Vec::binary_search_by</source>
          <target state="translated">Vec::binary_search_by</target>
        </trans-unit>
        <trans-unit id="c25875b591cdd49de2d27d47ee6d7ac1e21d9162" translate="yes" xml:space="preserve">
          <source>Vec::binary_search_by_key</source>
          <target state="translated">Vec::binary_search_by_key</target>
        </trans-unit>
        <trans-unit id="85bd126983a102e0968ff3a77e6cc098a02d6d2b" translate="yes" xml:space="preserve">
          <source>Vec::borrow</source>
          <target state="translated">Vec::borrow</target>
        </trans-unit>
        <trans-unit id="ce949f50884f71dd9c3bd065b3e9f2fac3e1b9b1" translate="yes" xml:space="preserve">
          <source>Vec::borrow_mut</source>
          <target state="translated">Vec::borrow_mut</target>
        </trans-unit>
        <trans-unit id="adf16c9ee55ed12543d9f09958b2da182d391549" translate="yes" xml:space="preserve">
          <source>Vec::by_ref</source>
          <target state="translated">Vec::by_ref</target>
        </trans-unit>
        <trans-unit id="879e3baf25a9301dece592c8e2fe831ab282b68c" translate="yes" xml:space="preserve">
          <source>Vec::capacity</source>
          <target state="translated">Vec::capacity</target>
        </trans-unit>
        <trans-unit id="0008361e288cf11981ce829d1646ffd8fcfd353d" translate="yes" xml:space="preserve">
          <source>Vec::chunks</source>
          <target state="translated">Vec::chunks</target>
        </trans-unit>
        <trans-unit id="753b8583ee481b3421bba7d981070ec72378a929" translate="yes" xml:space="preserve">
          <source>Vec::chunks_exact</source>
          <target state="translated">Vec::chunks_exact</target>
        </trans-unit>
        <trans-unit id="c16f1e8e4bdb33b2b62eb139dbdd695cce8cd9cb" translate="yes" xml:space="preserve">
          <source>Vec::chunks_exact_mut</source>
          <target state="translated">Vec::chunks_exact_mut</target>
        </trans-unit>
        <trans-unit id="5129df9df37eeb41ed7c2d7d9a8c46bfb809e00b" translate="yes" xml:space="preserve">
          <source>Vec::chunks_mut</source>
          <target state="translated">Vec::chunks_mut</target>
        </trans-unit>
        <trans-unit id="b0c0c66afeddeab3613458326ddff56179dee6c6" translate="yes" xml:space="preserve">
          <source>Vec::clamp</source>
          <target state="translated">Vec::clamp</target>
        </trans-unit>
        <trans-unit id="2c2fbd7321fb15ce32f39380f1451dd1d8285167" translate="yes" xml:space="preserve">
          <source>Vec::clear</source>
          <target state="translated">Vec::clear</target>
        </trans-unit>
        <trans-unit id="f74617c56b1b4cb0ac739e41c8d386b187a932a0" translate="yes" xml:space="preserve">
          <source>Vec::clone</source>
          <target state="translated">Vec::clone</target>
        </trans-unit>
        <trans-unit id="7d2eba94d2d4e553221edef828d32477a74ec086" translate="yes" xml:space="preserve">
          <source>Vec::clone_from</source>
          <target state="translated">Vec::clone_from</target>
        </trans-unit>
        <trans-unit id="d765a16b06a09ff23e51adef46f6c11da8454339" translate="yes" xml:space="preserve">
          <source>Vec::clone_from_slice</source>
          <target state="translated">Vec::clone_from_slice</target>
        </trans-unit>
        <trans-unit id="33b8cb435611a78c3d465aaa7784c2b37cbb74e7" translate="yes" xml:space="preserve">
          <source>Vec::clone_into</source>
          <target state="translated">Vec::clone_into</target>
        </trans-unit>
        <trans-unit id="54c91e49e772a616e17900001275475155f0db86" translate="yes" xml:space="preserve">
          <source>Vec::cmp</source>
          <target state="translated">Vec::cmp</target>
        </trans-unit>
        <trans-unit id="0a3297559d1b2d0f5e9d86fb8e4f2702a52aed73" translate="yes" xml:space="preserve">
          <source>Vec::contains</source>
          <target state="translated">Vec::contains</target>
        </trans-unit>
        <trans-unit id="15b499228e83cdfe5d9bacf8f2717eb38b48f38b" translate="yes" xml:space="preserve">
          <source>Vec::copy_from_slice</source>
          <target state="translated">Vec::copy_from_slice</target>
        </trans-unit>
        <trans-unit id="b8ba6b02b6ab7d9e4a58c6ff8c4f8ed29c394009" translate="yes" xml:space="preserve">
          <source>Vec::copy_within</source>
          <target state="translated">Vec::copy_within</target>
        </trans-unit>
        <trans-unit id="789846c5e092b1b0a4c096dc5aa2920af554cadf" translate="yes" xml:space="preserve">
          <source>Vec::dedup</source>
          <target state="translated">Vec::dedup</target>
        </trans-unit>
        <trans-unit id="ef8409a58825c28ce8665f515341da99406dc45e" translate="yes" xml:space="preserve">
          <source>Vec::dedup_by</source>
          <target state="translated">Vec::dedup_by</target>
        </trans-unit>
        <trans-unit id="363d4ee344588ea07c6bc5cfb25580f99e4e6fc4" translate="yes" xml:space="preserve">
          <source>Vec::dedup_by_key</source>
          <target state="translated">Vec::dedup_by_key</target>
        </trans-unit>
        <trans-unit id="1a3c24e46d01efcb53b2e47b9f9fe05604eec885" translate="yes" xml:space="preserve">
          <source>Vec::default</source>
          <target state="translated">Vec::default</target>
        </trans-unit>
        <trans-unit id="b1a2319f3d6321033c9832ada871bb0364c41d6d" translate="yes" xml:space="preserve">
          <source>Vec::deref</source>
          <target state="translated">Vec::deref</target>
        </trans-unit>
        <trans-unit id="700ab6732dec0f913d9f30592a8a083e6275f0e9" translate="yes" xml:space="preserve">
          <source>Vec::deref_mut</source>
          <target state="translated">Vec::deref_mut</target>
        </trans-unit>
        <trans-unit id="5b692065705c3002050f3bc84600cd18eab70011" translate="yes" xml:space="preserve">
          <source>Vec::drain</source>
          <target state="translated">Vec::drain</target>
        </trans-unit>
        <trans-unit id="b56f02a07b5d1e06767ba9089e5a26237d2b6e96" translate="yes" xml:space="preserve">
          <source>Vec::drain_filter</source>
          <target state="translated">Vec::drain_filter</target>
        </trans-unit>
        <trans-unit id="1590e7c585be22084bde77caac361ebaa4d26167" translate="yes" xml:space="preserve">
          <source>Vec::drop</source>
          <target state="translated">Vec::drop</target>
        </trans-unit>
        <trans-unit id="c4e9c1a11aab0c3fbaa646a64a22f3069178f1e1" translate="yes" xml:space="preserve">
          <source>Vec::ends_with</source>
          <target state="translated">Vec::ends_with</target>
        </trans-unit>
        <trans-unit id="6460efc15d9228e5937dc4d9b4bb45990d32a27e" translate="yes" xml:space="preserve">
          <source>Vec::eq</source>
          <target state="translated">Vec::eq</target>
        </trans-unit>
        <trans-unit id="8e07e8d35672a19e43e8097f16c00d816c5cbe97" translate="yes" xml:space="preserve">
          <source>Vec::eq_ignore_ascii_case</source>
          <target state="translated">Vec::eq_ignore_ascii_case</target>
        </trans-unit>
        <trans-unit id="e46b7aa4e045855309d716fccf00cabd75a21e77" translate="yes" xml:space="preserve">
          <source>Vec::extend</source>
          <target state="translated">Vec::extend</target>
        </trans-unit>
        <trans-unit id="bb82f4df3cb27f5fbf87e6541ca1f465f414d3a5" translate="yes" xml:space="preserve">
          <source>Vec::extend_from_slice</source>
          <target state="translated">Vec::extend_from_slice</target>
        </trans-unit>
        <trans-unit id="87732cce3e95948f8d258db19ab24839895b0f76" translate="yes" xml:space="preserve">
          <source>Vec::first</source>
          <target state="translated">Vec::first</target>
        </trans-unit>
        <trans-unit id="fd582f0cbcb6e9f15ed28c1811608a7720bbbf52" translate="yes" xml:space="preserve">
          <source>Vec::first_mut</source>
          <target state="translated">Vec::first_mut</target>
        </trans-unit>
        <trans-unit id="cea112245a192a2715a4ac0d0d4ca6f9f0c88d11" translate="yes" xml:space="preserve">
          <source>Vec::flush</source>
          <target state="translated">Vec::flush</target>
        </trans-unit>
        <trans-unit id="74c0bff699639364b714e18c5e924ebe36d7bbb8" translate="yes" xml:space="preserve">
          <source>Vec::fmt</source>
          <target state="translated">Vec::fmt</target>
        </trans-unit>
        <trans-unit id="3b03e0120686cad397d6fe329718262a73208e9a" translate="yes" xml:space="preserve">
          <source>Vec::from</source>
          <target state="translated">Vec::from</target>
        </trans-unit>
        <trans-unit id="d2409bb7c2f488110f44be1023fc83c93200bfb1" translate="yes" xml:space="preserve">
          <source>Vec::from_iter</source>
          <target state="translated">Vec::from_iter</target>
        </trans-unit>
        <trans-unit id="e5b23b921224c968a51d83bca668d1740812f940" translate="yes" xml:space="preserve">
          <source>Vec::from_raw_parts</source>
          <target state="translated">Vec::from_raw_parts</target>
        </trans-unit>
        <trans-unit id="1b86c87d45b678c05eaedfa482e8e125c09283aa" translate="yes" xml:space="preserve">
          <source>Vec::ge</source>
          <target state="translated">Vec::ge</target>
        </trans-unit>
        <trans-unit id="a36985c63a8174e8d6e9d553daa519abe7ef73a3" translate="yes" xml:space="preserve">
          <source>Vec::get</source>
          <target state="translated">Vec::get</target>
        </trans-unit>
        <trans-unit id="55451d4c9012f0e9dc2705a9a20313c583cbad02" translate="yes" xml:space="preserve">
          <source>Vec::get_mut</source>
          <target state="translated">Vec::get_mut</target>
        </trans-unit>
        <trans-unit id="fbd1dbfc28f1dbf35081eb8a3b624e1ddb17a7d4" translate="yes" xml:space="preserve">
          <source>Vec::get_unchecked</source>
          <target state="translated">Vec::get_unchecked</target>
        </trans-unit>
        <trans-unit id="17aa782943cb8ba6f59f4076d63241b08687fe04" translate="yes" xml:space="preserve">
          <source>Vec::get_unchecked_mut</source>
          <target state="translated">Vec::get_unchecked_mut</target>
        </trans-unit>
        <trans-unit id="12e2684fc2a72b4cdaf5511139faebcd74106115" translate="yes" xml:space="preserve">
          <source>Vec::gt</source>
          <target state="translated">Vec::gt</target>
        </trans-unit>
        <trans-unit id="3214576db0b2f915d4813a780951e762d0453108" translate="yes" xml:space="preserve">
          <source>Vec::hash</source>
          <target state="translated">Vec::hash</target>
        </trans-unit>
        <trans-unit id="cbad63e4de555a52c1156aacfa7acaa37d288f2d" translate="yes" xml:space="preserve">
          <source>Vec::hash_slice</source>
          <target state="translated">Vec::hash_slice</target>
        </trans-unit>
        <trans-unit id="817acc1f56c6b7266c14b400f36bd6915fc69aa9" translate="yes" xml:space="preserve">
          <source>Vec::index</source>
          <target state="translated">Vec::index</target>
        </trans-unit>
        <trans-unit id="255317cd139deae7b3798accef614b86d687af60" translate="yes" xml:space="preserve">
          <source>Vec::index_mut</source>
          <target state="translated">Vec::index_mut</target>
        </trans-unit>
        <trans-unit id="dae9879e89996749967d788919fd3919726095e5" translate="yes" xml:space="preserve">
          <source>Vec::insert</source>
          <target state="translated">Vec::insert</target>
        </trans-unit>
        <trans-unit id="4607993cbee4135669d2825495742a160937c51e" translate="yes" xml:space="preserve">
          <source>Vec::into</source>
          <target state="translated">Vec::into</target>
        </trans-unit>
        <trans-unit id="349c4bbf0cf7617a82524fff4ab6dd6dc12191ae" translate="yes" xml:space="preserve">
          <source>Vec::into_boxed_slice</source>
          <target state="translated">Vec::into_boxed_slice</target>
        </trans-unit>
        <trans-unit id="a2683d7c8a491dd1d14d82cbf394796000e6a7fa" translate="yes" xml:space="preserve">
          <source>Vec::into_iter</source>
          <target state="translated">Vec::into_iter</target>
        </trans-unit>
        <trans-unit id="0617d70073dd3ee36b70acc3469082e13a466d03" translate="yes" xml:space="preserve">
          <source>Vec::is_ascii</source>
          <target state="translated">Vec::is_ascii</target>
        </trans-unit>
        <trans-unit id="03169a81c036f8a9e76093b58242f30ae578d6e1" translate="yes" xml:space="preserve">
          <source>Vec::is_empty</source>
          <target state="translated">Vec::is_empty</target>
        </trans-unit>
        <trans-unit id="61e088912bf7c1fb5b0f0a806c372825ce419a0f" translate="yes" xml:space="preserve">
          <source>Vec::is_sorted</source>
          <target state="translated">Vec::is_sorted</target>
        </trans-unit>
        <trans-unit id="2f71d97de0d886a25068ec904913d5f995b9ec67" translate="yes" xml:space="preserve">
          <source>Vec::is_sorted_by</source>
          <target state="translated">Vec::is_sorted_by</target>
        </trans-unit>
        <trans-unit id="13b69e903c4a68fcfe01f0c6f71a43d7cffcb8d2" translate="yes" xml:space="preserve">
          <source>Vec::is_sorted_by_key</source>
          <target state="translated">Vec::is_sorted_by_key</target>
        </trans-unit>
        <trans-unit id="67f810a4a6906d879a0e5bcdbd0629cdca0805fc" translate="yes" xml:space="preserve">
          <source>Vec::iter</source>
          <target state="translated">Vec::iter</target>
        </trans-unit>
        <trans-unit id="de14eea28b8af3ebd1fa7277134614ec35bede5f" translate="yes" xml:space="preserve">
          <source>Vec::iter_mut</source>
          <target state="translated">Vec::iter_mut</target>
        </trans-unit>
        <trans-unit id="89cb435951d0739bd80a43fd6eff389c96ea9137" translate="yes" xml:space="preserve">
          <source>Vec::last</source>
          <target state="translated">Vec::last</target>
        </trans-unit>
        <trans-unit id="8ec2cd17a9007516bf67a64facc2086a511ddabc" translate="yes" xml:space="preserve">
          <source>Vec::last_mut</source>
          <target state="translated">Vec::last_mut</target>
        </trans-unit>
        <trans-unit id="fbceeb72cec6860fa83702dbf07c61c0fba92768" translate="yes" xml:space="preserve">
          <source>Vec::le</source>
          <target state="translated">Vec::le</target>
        </trans-unit>
        <trans-unit id="525552cdf64c17bf1df49d77d5e10db05c4a1e65" translate="yes" xml:space="preserve">
          <source>Vec::len</source>
          <target state="translated">Vec::len</target>
        </trans-unit>
        <trans-unit id="1987ee0ae7df89f62926afad448cc8dcba8deb75" translate="yes" xml:space="preserve">
          <source>Vec::lt</source>
          <target state="translated">Vec::lt</target>
        </trans-unit>
        <trans-unit id="d73c1ce0cf0d3ba3f02694929282ef1ce4003f43" translate="yes" xml:space="preserve">
          <source>Vec::make_ascii_lowercase</source>
          <target state="translated">Vec::make_ascii_lowercase</target>
        </trans-unit>
        <trans-unit id="c984649eda1457369a83cadb8cb7cced71d85e8a" translate="yes" xml:space="preserve">
          <source>Vec::make_ascii_uppercase</source>
          <target state="translated">Vec::make_ascii_uppercase</target>
        </trans-unit>
        <trans-unit id="a14d3f9cce464f0a15bfb1ccdba70544cd9996dc" translate="yes" xml:space="preserve">
          <source>Vec::max</source>
          <target state="translated">Vec::max</target>
        </trans-unit>
        <trans-unit id="b7e2ddaad5a1e72a47531993b322493826992f01" translate="yes" xml:space="preserve">
          <source>Vec::min</source>
          <target state="translated">Vec::min</target>
        </trans-unit>
        <trans-unit id="27ac869c9c4d65022ccbe3db59b454048dac5d01" translate="yes" xml:space="preserve">
          <source>Vec::ne</source>
          <target state="translated">Vec::ne</target>
        </trans-unit>
        <trans-unit id="6fd848867337ba44b23b17c9fe00c94d829ea233" translate="yes" xml:space="preserve">
          <source>Vec::new</source>
          <target state="translated">Vec::new</target>
        </trans-unit>
        <trans-unit id="dcf8d5a328aa406810dabf32cd5ae01b3697decb" translate="yes" xml:space="preserve">
          <source>Vec::partial_cmp</source>
          <target state="translated">Vec::partial_cmp</target>
        </trans-unit>
        <trans-unit id="9694e7862ef0e60d886fd728679d90a8ee9470af" translate="yes" xml:space="preserve">
          <source>Vec::partition_at_index</source>
          <target state="translated">Vec::partition_at_index</target>
        </trans-unit>
        <trans-unit id="0bf6ca8cb659d720aa701bffc2851bc20dd39575" translate="yes" xml:space="preserve">
          <source>Vec::partition_at_index_by</source>
          <target state="translated">Vec::partition_at_index_by</target>
        </trans-unit>
        <trans-unit id="e14cd1ff21e7d949dfbecf45a57afb30d74ae935" translate="yes" xml:space="preserve">
          <source>Vec::partition_at_index_by_key</source>
          <target state="translated">Vec::partition_at_index_by_key</target>
        </trans-unit>
        <trans-unit id="a3bcf68a32491f6ce459bed1b83a0728f8d3facb" translate="yes" xml:space="preserve">
          <source>Vec::partition_dedup</source>
          <target state="translated">Vec::partition_dedup</target>
        </trans-unit>
        <trans-unit id="b33b907d031cab1a9f82dfabed52b3ec36a0bec7" translate="yes" xml:space="preserve">
          <source>Vec::partition_dedup_by</source>
          <target state="translated">Vec::partition_dedup_by</target>
        </trans-unit>
        <trans-unit id="e9042527cd9f8f7b837ac9979689f102fa5b9413" translate="yes" xml:space="preserve">
          <source>Vec::partition_dedup_by_key</source>
          <target state="translated">Vec::partition_dedup_by_key</target>
        </trans-unit>
        <trans-unit id="bb66cba5fa2c2be8852cc1be9f1f0442c400f3c1" translate="yes" xml:space="preserve">
          <source>Vec::pop</source>
          <target state="translated">Vec::pop</target>
        </trans-unit>
        <trans-unit id="015702c3beb31216ec8635f66c58b2dd6c7ce7d3" translate="yes" xml:space="preserve">
          <source>Vec::push</source>
          <target state="translated">Vec::push</target>
        </trans-unit>
        <trans-unit id="2a4ecb67c06267aff12807a92f7519558492cac3" translate="yes" xml:space="preserve">
          <source>Vec::rchunks</source>
          <target state="translated">Vec::rchunks</target>
        </trans-unit>
        <trans-unit id="2190a180c9e13d2c97a99729fb1cab9822f2b367" translate="yes" xml:space="preserve">
          <source>Vec::rchunks_exact</source>
          <target state="translated">Vec::rchunks_exact</target>
        </trans-unit>
        <trans-unit id="8817d4c686ebb9e3df7649dc1ef10bbfc99e5a0f" translate="yes" xml:space="preserve">
          <source>Vec::rchunks_exact_mut</source>
          <target state="translated">Vec::rchunks_exact_mut</target>
        </trans-unit>
        <trans-unit id="d8b31989d0600b79568eabfbd02443e705c374f4" translate="yes" xml:space="preserve">
          <source>Vec::rchunks_mut</source>
          <target state="translated">Vec::rchunks_mut</target>
        </trans-unit>
        <trans-unit id="845831747d56f3eeb00bb35e02809974b407e592" translate="yes" xml:space="preserve">
          <source>Vec::remove</source>
          <target state="translated">Vec::remove</target>
        </trans-unit>
        <trans-unit id="f2019e8c59ea1c039539318392c79102cc50f496" translate="yes" xml:space="preserve">
          <source>Vec::remove_item</source>
          <target state="translated">Vec::remove_item</target>
        </trans-unit>
        <trans-unit id="2a5af4f0d9906283d3505112b8edea1ff6aa8327" translate="yes" xml:space="preserve">
          <source>Vec::repeat</source>
          <target state="translated">Vec::repeat</target>
        </trans-unit>
        <trans-unit id="4030131e8b0f427754fca9b6fc2438b48ee132aa" translate="yes" xml:space="preserve">
          <source>Vec::reserve</source>
          <target state="translated">Vec::reserve</target>
        </trans-unit>
        <trans-unit id="c585b5b6b44dd8ead3846dfe6ff450a1d78b7ca4" translate="yes" xml:space="preserve">
          <source>Vec::reserve_exact</source>
          <target state="translated">Vec::reserve_exact</target>
        </trans-unit>
        <trans-unit id="abcfd065a68ab661075eb65973b1c2983f76906b" translate="yes" xml:space="preserve">
          <source>Vec::resize</source>
          <target state="translated">Vec::resize</target>
        </trans-unit>
        <trans-unit id="f9f7275b35ba8425eb32e3d8e98e0b77a08d75b9" translate="yes" xml:space="preserve">
          <source>Vec::resize_default</source>
          <target state="translated">Vec::resize_default</target>
        </trans-unit>
        <trans-unit id="9f1a1a7d355751c7299454f0938fedf8e60dd549" translate="yes" xml:space="preserve">
          <source>Vec::resize_with</source>
          <target state="translated">Vec::resize_with</target>
        </trans-unit>
        <trans-unit id="fd564ef5b54702a40658f77d501d340f02796c3b" translate="yes" xml:space="preserve">
          <source>Vec::retain</source>
          <target state="translated">Vec::retain</target>
        </trans-unit>
        <trans-unit id="020a2b7b3ef0fc23c178b5a1d57cf3220ce5e5ff" translate="yes" xml:space="preserve">
          <source>Vec::reverse</source>
          <target state="translated">Vec::reverse</target>
        </trans-unit>
        <trans-unit id="b4c1d9424701ec16b3d33474bf2a08c4a985a07b" translate="yes" xml:space="preserve">
          <source>Vec::rotate_left</source>
          <target state="translated">Vec::rotate_left</target>
        </trans-unit>
        <trans-unit id="a21a400e9268e082bb2ce482e8a8dfc6ab09fcf1" translate="yes" xml:space="preserve">
          <source>Vec::rotate_right</source>
          <target state="translated">Vec::rotate_right</target>
        </trans-unit>
        <trans-unit id="230272571f5aeb260545461fbf996bc487081e16" translate="yes" xml:space="preserve">
          <source>Vec::rsplit</source>
          <target state="translated">Vec::rsplit</target>
        </trans-unit>
        <trans-unit id="7588b43de214dc9942b6ec718d4f47a2bcedcba0" translate="yes" xml:space="preserve">
          <source>Vec::rsplit_mut</source>
          <target state="translated">Vec::rsplit_mut</target>
        </trans-unit>
        <trans-unit id="7d1297a0cd4e2ea121ae3252d869a3ab0996a1d6" translate="yes" xml:space="preserve">
          <source>Vec::rsplitn</source>
          <target state="translated">Vec::rsplitn</target>
        </trans-unit>
        <trans-unit id="62a275a0772dd8dc1d1984c12daaf575f3aeeba5" translate="yes" xml:space="preserve">
          <source>Vec::rsplitn_mut</source>
          <target state="translated">Vec::rsplitn_mut</target>
        </trans-unit>
        <trans-unit id="b0b31a5d59982433104183b210cdc7f9a7187cc9" translate="yes" xml:space="preserve">
          <source>Vec::set_len</source>
          <target state="translated">Vec::set_len</target>
        </trans-unit>
        <trans-unit id="dcf4c0bec18deb050ca3760e0ffcb5fbdd9b508d" translate="yes" xml:space="preserve">
          <source>Vec::shrink_to</source>
          <target state="translated">Vec::shrink_to</target>
        </trans-unit>
        <trans-unit id="85ba0030d7417692c1610e814b9b07a58d76e77c" translate="yes" xml:space="preserve">
          <source>Vec::shrink_to_fit</source>
          <target state="translated">Vec::shrink_to_fit</target>
        </trans-unit>
        <trans-unit id="16d167d14ba9fe06f16ed99bae2a2c03419b826b" translate="yes" xml:space="preserve">
          <source>Vec::sort</source>
          <target state="translated">Vec::sort</target>
        </trans-unit>
        <trans-unit id="81d8d3adb266cd3ddbf5075796bf792188963e60" translate="yes" xml:space="preserve">
          <source>Vec::sort_by</source>
          <target state="translated">Vec::sort_by</target>
        </trans-unit>
        <trans-unit id="fdaa89a60d5801892ad1d2af91cf732bf0fa3243" translate="yes" xml:space="preserve">
          <source>Vec::sort_by_cached_key</source>
          <target state="translated">Vec::sort_by_cached_key</target>
        </trans-unit>
        <trans-unit id="d7a763e74650730d9254a393db15ca96341ce8b4" translate="yes" xml:space="preserve">
          <source>Vec::sort_by_key</source>
          <target state="translated">Vec::sort_by_key</target>
        </trans-unit>
        <trans-unit id="abf375eb46a47b0a7dc0651c427daa5777cdc87d" translate="yes" xml:space="preserve">
          <source>Vec::sort_unstable</source>
          <target state="translated">Vec::sort_unstable</target>
        </trans-unit>
        <trans-unit id="6b1b6c683e214a704567cbb4866e258d5339b1a6" translate="yes" xml:space="preserve">
          <source>Vec::sort_unstable_by</source>
          <target state="translated">Vec::sort_unstable_by</target>
        </trans-unit>
        <trans-unit id="98bc35f1fee62d3c06dfa775a7a509e42577ec92" translate="yes" xml:space="preserve">
          <source>Vec::sort_unstable_by_key</source>
          <target state="translated">Vec::sort_unstable_by_key</target>
        </trans-unit>
        <trans-unit id="32db21414779495d647f8b90a008c9ef3267c648" translate="yes" xml:space="preserve">
          <source>Vec::splice</source>
          <target state="translated">Vec::splice</target>
        </trans-unit>
        <trans-unit id="a29a88b90b2283fcc62467ac92b894872c49e16c" translate="yes" xml:space="preserve">
          <source>Vec::split</source>
          <target state="translated">Vec::split</target>
        </trans-unit>
        <trans-unit id="6850cc7f3a18a5ae8795a517214f52bd03e37d1b" translate="yes" xml:space="preserve">
          <source>Vec::split_at</source>
          <target state="translated">Vec::split_at</target>
        </trans-unit>
        <trans-unit id="fffa7968cc458ceca06542d5bd41cbc6ab30cf0c" translate="yes" xml:space="preserve">
          <source>Vec::split_at_mut</source>
          <target state="translated">Vec::split_at_mut</target>
        </trans-unit>
        <trans-unit id="a158f5776929dc5fa591347c97af279ee6f308b5" translate="yes" xml:space="preserve">
          <source>Vec::split_first</source>
          <target state="translated">Vec::split_first</target>
        </trans-unit>
        <trans-unit id="6bc5d749a8be60dd619275925ca3abe61e1f1d9c" translate="yes" xml:space="preserve">
          <source>Vec::split_first_mut</source>
          <target state="translated">Vec::split_first_mut</target>
        </trans-unit>
        <trans-unit id="37a2c9e4c660e48769312c66dd3af4005f29a265" translate="yes" xml:space="preserve">
          <source>Vec::split_last</source>
          <target state="translated">Vec::split_last</target>
        </trans-unit>
        <trans-unit id="18a1b33cf122a212120639e6c43b624cc50e7d15" translate="yes" xml:space="preserve">
          <source>Vec::split_last_mut</source>
          <target state="translated">Vec::split_last_mut</target>
        </trans-unit>
        <trans-unit id="cf6ca76593d5b57fc21960139169843fb9cd7b00" translate="yes" xml:space="preserve">
          <source>Vec::split_mut</source>
          <target state="translated">Vec::split_mut</target>
        </trans-unit>
        <trans-unit id="03a916c0fcda14cb715141144403e9cf172139de" translate="yes" xml:space="preserve">
          <source>Vec::split_off</source>
          <target state="translated">Vec::split_off</target>
        </trans-unit>
        <trans-unit id="07108e7065deeacdbce3703bf0867dca70e0aa63" translate="yes" xml:space="preserve">
          <source>Vec::splitn</source>
          <target state="translated">Vec::splitn</target>
        </trans-unit>
        <trans-unit id="670a558b46826ad5134c813b4ea72c5f594e6c9a" translate="yes" xml:space="preserve">
          <source>Vec::splitn_mut</source>
          <target state="translated">Vec::splitn_mut</target>
        </trans-unit>
        <trans-unit id="0c0afbd8febc9c5f973424fd46f0e38ed59ccbe9" translate="yes" xml:space="preserve">
          <source>Vec::starts_with</source>
          <target state="translated">Vec::starts_with</target>
        </trans-unit>
        <trans-unit id="ad111eb0f36abc808f9f63d831dd393671b7d60f" translate="yes" xml:space="preserve">
          <source>Vec::swap</source>
          <target state="translated">Vec::swap</target>
        </trans-unit>
        <trans-unit id="c2d87a017cf8d077c99bd71bef846182121ea2f2" translate="yes" xml:space="preserve">
          <source>Vec::swap_remove</source>
          <target state="translated">Vec::swap_remove</target>
        </trans-unit>
        <trans-unit id="65ba4dcc752fbaf145dfc393c0ebd072c03850f4" translate="yes" xml:space="preserve">
          <source>Vec::swap_with_slice</source>
          <target state="translated">Vec::swap_with_slice</target>
        </trans-unit>
        <trans-unit id="187dcbc4c913473ea9ecc0da0ece64f155078f4d" translate="yes" xml:space="preserve">
          <source>Vec::to_ascii_lowercase</source>
          <target state="translated">Vec::to_ascii_lowercase</target>
        </trans-unit>
        <trans-unit id="9e994a24d814eaa773517353561f7db1763ba8c8" translate="yes" xml:space="preserve">
          <source>Vec::to_ascii_uppercase</source>
          <target state="translated">Vec::to_ascii_uppercase</target>
        </trans-unit>
        <trans-unit id="2d58122faa3b804afda87ac1afe94b0c2cf49a62" translate="yes" xml:space="preserve">
          <source>Vec::to_owned</source>
          <target state="translated">Vec::to_owned</target>
        </trans-unit>
        <trans-unit id="8295dc906018a2b87ebb59e81316a74736c8fba2" translate="yes" xml:space="preserve">
          <source>Vec::to_vec</source>
          <target state="translated">Vec::to_vec</target>
        </trans-unit>
        <trans-unit id="bbcf834cd40bf8d351710e8898b52c0706e47891" translate="yes" xml:space="preserve">
          <source>Vec::truncate</source>
          <target state="translated">Vec::truncate</target>
        </trans-unit>
        <trans-unit id="b539d40fa6817c484aec79eab2f72f8b069cd61a" translate="yes" xml:space="preserve">
          <source>Vec::try_from</source>
          <target state="translated">Vec::try_from</target>
        </trans-unit>
        <trans-unit id="edfbddcc1f5344a46cf8226a51d4480baae3f991" translate="yes" xml:space="preserve">
          <source>Vec::try_into</source>
          <target state="translated">Vec::try_into</target>
        </trans-unit>
        <trans-unit id="5c86c8fb54973c689718f247d2725be10c514476" translate="yes" xml:space="preserve">
          <source>Vec::try_reserve</source>
          <target state="translated">Vec::try_reserve</target>
        </trans-unit>
        <trans-unit id="31147313c7e8fcea891f9a87a61ed1563dcc2831" translate="yes" xml:space="preserve">
          <source>Vec::try_reserve_exact</source>
          <target state="translated">Vec::try_reserve_exact</target>
        </trans-unit>
        <trans-unit id="eed582f83a9d0aa9e1d0f2c268a23f8e413a6328" translate="yes" xml:space="preserve">
          <source>Vec::type_id</source>
          <target state="translated">Vec::type_id</target>
        </trans-unit>
        <trans-unit id="464742f01bb0869c25eb2800b7d8db8a1c7aac11" translate="yes" xml:space="preserve">
          <source>Vec::windows</source>
          <target state="translated">Vec::windows</target>
        </trans-unit>
        <trans-unit id="5728e3095df170ba310bd22e53f060f7088cdde8" translate="yes" xml:space="preserve">
          <source>Vec::with_capacity</source>
          <target state="translated">Vec::with_capacity</target>
        </trans-unit>
        <trans-unit id="265d2eb25b96552c36adc69855110dc3fd58c9aa" translate="yes" xml:space="preserve">
          <source>Vec::write</source>
          <target state="translated">Vec::write</target>
        </trans-unit>
        <trans-unit id="aeb1c503a25270fdde3115b7ad8a988a9c161a9d" translate="yes" xml:space="preserve">
          <source>Vec::write_all</source>
          <target state="translated">Vec::write_all</target>
        </trans-unit>
        <trans-unit id="bdef50740c7daaafaaf5156f90836f0887c73803" translate="yes" xml:space="preserve">
          <source>Vec::write_fmt</source>
          <target state="translated">Vec::write_fmt</target>
        </trans-unit>
        <trans-unit id="fb5d72587567483189e25ea2273df15eb40edb69" translate="yes" xml:space="preserve">
          <source>Vec::write_vectored</source>
          <target state="translated">Vec::write_vectored</target>
        </trans-unit>
        <trans-unit id="d8b188dca79494d553b4a25f8e7ba135fd059e06" translate="yes" xml:space="preserve">
          <source>VecDeque</source>
          <target state="translated">VecDeque</target>
        </trans-unit>
        <trans-unit id="daac388a0835b2f7f116ce4b930ba45f24e2d4f5" translate="yes" xml:space="preserve">
          <source>VecDeque::append</source>
          <target state="translated">VecDeque::append</target>
        </trans-unit>
        <trans-unit id="131f1606d9fb60120a570fc56345c3b4206cde68" translate="yes" xml:space="preserve">
          <source>VecDeque::as_mut_slices</source>
          <target state="translated">VecDeque::as_mut_slices</target>
        </trans-unit>
        <trans-unit id="e9e3cfebdd186278d399abad0a429053157088f8" translate="yes" xml:space="preserve">
          <source>VecDeque::as_slices</source>
          <target state="translated">VecDeque::as_slices</target>
        </trans-unit>
        <trans-unit id="0edc19e4ca1884e4aacf2a2a4380274826fb2740" translate="yes" xml:space="preserve">
          <source>VecDeque::back</source>
          <target state="translated">VecDeque::back</target>
        </trans-unit>
        <trans-unit id="ccf30a4382ae9328f9552afa5c5dfcfb35aef1b4" translate="yes" xml:space="preserve">
          <source>VecDeque::back_mut</source>
          <target state="translated">VecDeque::back_mut</target>
        </trans-unit>
        <trans-unit id="1d2610cb9f7282ea37e182a5f5c322a259c73e56" translate="yes" xml:space="preserve">
          <source>VecDeque::borrow</source>
          <target state="translated">VecDeque::borrow</target>
        </trans-unit>
        <trans-unit id="c85001c25549712efa3bc4037af617403882f850" translate="yes" xml:space="preserve">
          <source>VecDeque::borrow_mut</source>
          <target state="translated">VecDeque::borrow_mut</target>
        </trans-unit>
        <trans-unit id="50c2744064aa2c0045027447f96537e071e16754" translate="yes" xml:space="preserve">
          <source>VecDeque::capacity</source>
          <target state="translated">VecDeque::capacity</target>
        </trans-unit>
        <trans-unit id="d9ea40fef888b1aa5e6f0be9bc6eb9c5f0603d26" translate="yes" xml:space="preserve">
          <source>VecDeque::clamp</source>
          <target state="translated">VecDeque::clamp</target>
        </trans-unit>
        <trans-unit id="cef7bd89bf4a4eb9ba33004328fb058621269fe0" translate="yes" xml:space="preserve">
          <source>VecDeque::clear</source>
          <target state="translated">VecDeque::clear</target>
        </trans-unit>
        <trans-unit id="7e47848a7466bf6f810550e555917863d0558598" translate="yes" xml:space="preserve">
          <source>VecDeque::clone</source>
          <target state="translated">VecDeque::clone</target>
        </trans-unit>
        <trans-unit id="b0049440019ab3255550d699f8fa2c7e984241f3" translate="yes" xml:space="preserve">
          <source>VecDeque::clone_from</source>
          <target state="translated">VecDeque::clone_from</target>
        </trans-unit>
        <trans-unit id="5a931f3dab8ce84e0c1498215e0a5ee5c312dbc4" translate="yes" xml:space="preserve">
          <source>VecDeque::clone_into</source>
          <target state="translated">VecDeque::clone_into</target>
        </trans-unit>
        <trans-unit id="fd9dee766072ccb51f39babcce6cdd2ca35cde93" translate="yes" xml:space="preserve">
          <source>VecDeque::cmp</source>
          <target state="translated">VecDeque::cmp</target>
        </trans-unit>
        <trans-unit id="95d4c1d4f7170dca761e595f58227ed371676262" translate="yes" xml:space="preserve">
          <source>VecDeque::contains</source>
          <target state="translated">VecDeque::contains</target>
        </trans-unit>
        <trans-unit id="551608dce97aa0630c90774ad10f52c70cb6f3f6" translate="yes" xml:space="preserve">
          <source>VecDeque::default</source>
          <target state="translated">VecDeque::default</target>
        </trans-unit>
        <trans-unit id="6f86475df434e68c6dc113b2e5b2233f287a6033" translate="yes" xml:space="preserve">
          <source>VecDeque::drain</source>
          <target state="translated">VecDeque::drain</target>
        </trans-unit>
        <trans-unit id="4fddce3df4c9fe156f475165f3f4d5240f0afce4" translate="yes" xml:space="preserve">
          <source>VecDeque::drop</source>
          <target state="translated">VecDeque::drop</target>
        </trans-unit>
        <trans-unit id="0fcb62d0015e3066aec7a6e38e31f65772d5501d" translate="yes" xml:space="preserve">
          <source>VecDeque::eq</source>
          <target state="translated">VecDeque::eq</target>
        </trans-unit>
        <trans-unit id="075a7bfccff36cfa5ad77b2a00e19382093a8565" translate="yes" xml:space="preserve">
          <source>VecDeque::extend</source>
          <target state="translated">VecDeque::extend</target>
        </trans-unit>
        <trans-unit id="e054fa9bced4f47898e926baffbc0c60a08459c0" translate="yes" xml:space="preserve">
          <source>VecDeque::fmt</source>
          <target state="translated">VecDeque::fmt</target>
        </trans-unit>
        <trans-unit id="19d255ee2f123a37e942fb29c84911a9f64f017f" translate="yes" xml:space="preserve">
          <source>VecDeque::from</source>
          <target state="translated">VecDeque::from</target>
        </trans-unit>
        <trans-unit id="242a52440e095905c36864a3c86c19da0f44a3fd" translate="yes" xml:space="preserve">
          <source>VecDeque::from_iter</source>
          <target state="translated">VecDeque::from_iter</target>
        </trans-unit>
        <trans-unit id="29993bead69617ad206973adb616d88cb8d89425" translate="yes" xml:space="preserve">
          <source>VecDeque::front</source>
          <target state="translated">VecDeque::front</target>
        </trans-unit>
        <trans-unit id="e4634241db2e3ef12564b756a7fc707c4a7a5f18" translate="yes" xml:space="preserve">
          <source>VecDeque::front_mut</source>
          <target state="translated">VecDeque::front_mut</target>
        </trans-unit>
        <trans-unit id="bc3f2b749e59a78256a0d2040a1d3bb5af4f5693" translate="yes" xml:space="preserve">
          <source>VecDeque::ge</source>
          <target state="translated">VecDeque::ge</target>
        </trans-unit>
        <trans-unit id="915b9e825c31e8d816c506ced80cc1f68ac3f054" translate="yes" xml:space="preserve">
          <source>VecDeque::get</source>
          <target state="translated">VecDeque::get</target>
        </trans-unit>
        <trans-unit id="136e7c47681eaa1d904864e8ff5c5bc220e4a7dc" translate="yes" xml:space="preserve">
          <source>VecDeque::get_mut</source>
          <target state="translated">VecDeque::get_mut</target>
        </trans-unit>
        <trans-unit id="ba60604fac009b3ce77b20443c60c9bac64877e8" translate="yes" xml:space="preserve">
          <source>VecDeque::gt</source>
          <target state="translated">VecDeque::gt</target>
        </trans-unit>
        <trans-unit id="bb2d82113864a1efc245faa3fb2f0734777df20f" translate="yes" xml:space="preserve">
          <source>VecDeque::hash</source>
          <target state="translated">VecDeque::hash</target>
        </trans-unit>
        <trans-unit id="f6b79958f591855d1dfc59a3acb71adf01cbc54f" translate="yes" xml:space="preserve">
          <source>VecDeque::hash_slice</source>
          <target state="translated">VecDeque::hash_slice</target>
        </trans-unit>
        <trans-unit id="2874956ebb7bcf9026d0ebcfd7bebe25fd32ed31" translate="yes" xml:space="preserve">
          <source>VecDeque::index</source>
          <target state="translated">VecDeque::index</target>
        </trans-unit>
        <trans-unit id="0deef4e869afff07622817110cb765c3c5082356" translate="yes" xml:space="preserve">
          <source>VecDeque::index_mut</source>
          <target state="translated">VecDeque::index_mut</target>
        </trans-unit>
        <trans-unit id="723879b69186c6e2f0632b97f6198a38736cdfca" translate="yes" xml:space="preserve">
          <source>VecDeque::insert</source>
          <target state="translated">VecDeque::insert</target>
        </trans-unit>
        <trans-unit id="5940a7ce6c6c2aa56e27efb2aeab5436d0047626" translate="yes" xml:space="preserve">
          <source>VecDeque::into</source>
          <target state="translated">VecDeque::into</target>
        </trans-unit>
        <trans-unit id="4f160a12e1c1a6ef0fe052b739a694daddb4a0ba" translate="yes" xml:space="preserve">
          <source>VecDeque::into_iter</source>
          <target state="translated">VecDeque::into_iter</target>
        </trans-unit>
        <trans-unit id="381e6c2228a85e3684cbe01131ece6f6d4ed363e" translate="yes" xml:space="preserve">
          <source>VecDeque::is_empty</source>
          <target state="translated">VecDeque::is_empty</target>
        </trans-unit>
        <trans-unit id="2ca65467993d11e2001a70631255186873bfafbb" translate="yes" xml:space="preserve">
          <source>VecDeque::iter</source>
          <target state="translated">VecDeque::iter</target>
        </trans-unit>
        <trans-unit id="8a7f75f31f2781e622162ab2f9f48e26e163488d" translate="yes" xml:space="preserve">
          <source>VecDeque::iter_mut</source>
          <target state="translated">VecDeque::iter_mut</target>
        </trans-unit>
        <trans-unit id="f0a5bfefb2b6fe51d59e368db422f4c5b160ce8f" translate="yes" xml:space="preserve">
          <source>VecDeque::le</source>
          <target state="translated">VecDeque::le</target>
        </trans-unit>
        <trans-unit id="4bb921fa6df10d02b3f7cab0954102290f635a15" translate="yes" xml:space="preserve">
          <source>VecDeque::len</source>
          <target state="translated">VecDeque::len</target>
        </trans-unit>
        <trans-unit id="71e95769828a9b92c66e7c31ffd10fc3033cd8d6" translate="yes" xml:space="preserve">
          <source>VecDeque::lt</source>
          <target state="translated">VecDeque::lt</target>
        </trans-unit>
        <trans-unit id="34ae597b0c94f97d4d1d62357cf5e38331a6df8f" translate="yes" xml:space="preserve">
          <source>VecDeque::max</source>
          <target state="translated">VecDeque::max</target>
        </trans-unit>
        <trans-unit id="1bd90cfd9d14576806aeb5601e565be6d9a2c392" translate="yes" xml:space="preserve">
          <source>VecDeque::min</source>
          <target state="translated">VecDeque::min</target>
        </trans-unit>
        <trans-unit id="916cd3bda61d1c51bd600b30eeee5cb3cd744e77" translate="yes" xml:space="preserve">
          <source>VecDeque::ne</source>
          <target state="translated">VecDeque::ne</target>
        </trans-unit>
        <trans-unit id="e81647b640d809ed6db522b8fec3ed80b259e69f" translate="yes" xml:space="preserve">
          <source>VecDeque::new</source>
          <target state="translated">VecDeque::new</target>
        </trans-unit>
        <trans-unit id="2417422e13a2ce0e6f09ab0a2c5ca7d335599a19" translate="yes" xml:space="preserve">
          <source>VecDeque::partial_cmp</source>
          <target state="translated">VecDeque::partial_cmp</target>
        </trans-unit>
        <trans-unit id="2f7ea749d2fc3447b1276750b71f28b1df80824c" translate="yes" xml:space="preserve">
          <source>VecDeque::pop_back</source>
          <target state="translated">VecDeque::pop_back</target>
        </trans-unit>
        <trans-unit id="b5099f7ca42bc97193acf6d46c82dfad34dce9ea" translate="yes" xml:space="preserve">
          <source>VecDeque::pop_front</source>
          <target state="translated">VecDeque::pop_front</target>
        </trans-unit>
        <trans-unit id="b68186ce0ffaa5c573e191524102ee4df9e5a76f" translate="yes" xml:space="preserve">
          <source>VecDeque::push_back</source>
          <target state="translated">VecDeque::push_back</target>
        </trans-unit>
        <trans-unit id="c974534a42ac8b948ff96329fe775b8663ed7e1c" translate="yes" xml:space="preserve">
          <source>VecDeque::push_front</source>
          <target state="translated">VecDeque::push_front</target>
        </trans-unit>
        <trans-unit id="f66c8df74e7950f8a5c27628b399552275e7990b" translate="yes" xml:space="preserve">
          <source>VecDeque::remove</source>
          <target state="translated">VecDeque::remove</target>
        </trans-unit>
        <trans-unit id="63da2dc6f5d7c077d66b800dc3e9cfb610812d1e" translate="yes" xml:space="preserve">
          <source>VecDeque::reserve</source>
          <target state="translated">VecDeque::reserve</target>
        </trans-unit>
        <trans-unit id="f0c9f269e1c0f3fe87bb1e1d4dbafbb60fe03a88" translate="yes" xml:space="preserve">
          <source>VecDeque::reserve_exact</source>
          <target state="translated">VecDeque::reserve_exact</target>
        </trans-unit>
        <trans-unit id="15c7000e6223107d6e8f85520188c2ad5dbc3269" translate="yes" xml:space="preserve">
          <source>VecDeque::resize</source>
          <target state="translated">VecDeque::resize</target>
        </trans-unit>
        <trans-unit id="2509349114431a93f293a45b673cb587453cf5c1" translate="yes" xml:space="preserve">
          <source>VecDeque::resize_with</source>
          <target state="translated">VecDeque::resize_with</target>
        </trans-unit>
        <trans-unit id="ccc031575f67542dd46824a3e983601461110cc4" translate="yes" xml:space="preserve">
          <source>VecDeque::retain</source>
          <target state="translated">VecDeque::retain</target>
        </trans-unit>
        <trans-unit id="b5a555e8903b3b7977f45918d1ce6774e918a183" translate="yes" xml:space="preserve">
          <source>VecDeque::rotate_left</source>
          <target state="translated">VecDeque::rotate_left</target>
        </trans-unit>
        <trans-unit id="e6e34526379d06662776e4b338c08f5600228980" translate="yes" xml:space="preserve">
          <source>VecDeque::rotate_right</source>
          <target state="translated">VecDeque::rotate_right</target>
        </trans-unit>
        <trans-unit id="49e9a45e383cf99b6b9e65b1da390fd01a8bda3d" translate="yes" xml:space="preserve">
          <source>VecDeque::shrink_to</source>
          <target state="translated">VecDeque::shrink_to</target>
        </trans-unit>
        <trans-unit id="f6fcc5b10ec16f8a12c0c4dc559d3a8de78ca52b" translate="yes" xml:space="preserve">
          <source>VecDeque::shrink_to_fit</source>
          <target state="translated">VecDeque::shrink_to_fit</target>
        </trans-unit>
        <trans-unit id="230a74fc242f8f9ef7eacdecb321bb25f227f97b" translate="yes" xml:space="preserve">
          <source>VecDeque::split_off</source>
          <target state="translated">VecDeque::split_off</target>
        </trans-unit>
        <trans-unit id="2a4ea39d8e7a00cf428e2650b17e58a789217e16" translate="yes" xml:space="preserve">
          <source>VecDeque::swap</source>
          <target state="translated">VecDeque::swap</target>
        </trans-unit>
        <trans-unit id="558d98e0536ea1f17ff9046952a317ebda0ef01d" translate="yes" xml:space="preserve">
          <source>VecDeque::swap_remove_back</source>
          <target state="translated">VecDeque::swap_remove_back</target>
        </trans-unit>
        <trans-unit id="43928a9b864a3fd9bdb5ec554ba365e4bdf9ef8f" translate="yes" xml:space="preserve">
          <source>VecDeque::swap_remove_front</source>
          <target state="translated">VecDeque::swap_remove_front</target>
        </trans-unit>
        <trans-unit id="49014001bde4ab42b533abbe113ed3c97ffe8b66" translate="yes" xml:space="preserve">
          <source>VecDeque::to_owned</source>
          <target state="translated">VecDeque::to_owned</target>
        </trans-unit>
        <trans-unit id="4a856cf5c6f4f0083955ca9fd38f17e56d42db38" translate="yes" xml:space="preserve">
          <source>VecDeque::truncate</source>
          <target state="translated">VecDeque::truncate</target>
        </trans-unit>
        <trans-unit id="1c108e04a773fcc428e30cb84e0bbed6cbe42d01" translate="yes" xml:space="preserve">
          <source>VecDeque::try_from</source>
          <target state="translated">VecDeque::try_from</target>
        </trans-unit>
        <trans-unit id="63a287d3d33ab67ecaccc4cde3b6cb4bbc9bf2f9" translate="yes" xml:space="preserve">
          <source>VecDeque::try_into</source>
          <target state="translated">VecDeque::try_into</target>
        </trans-unit>
        <trans-unit id="4492e019180be9cbd1149bea9dacc85b974da183" translate="yes" xml:space="preserve">
          <source>VecDeque::try_reserve</source>
          <target state="translated">VecDeque::try_reserve</target>
        </trans-unit>
        <trans-unit id="f18ae4264c3943cfe280f4bac2b78e0d6daaad9f" translate="yes" xml:space="preserve">
          <source>VecDeque::try_reserve_exact</source>
          <target state="translated">VecDeque::try_reserve_exact</target>
        </trans-unit>
        <trans-unit id="01e7052c0ca6f4f03791b81a8f2de96b096c403e" translate="yes" xml:space="preserve">
          <source>VecDeque::type_id</source>
          <target state="translated">VecDeque::type_id</target>
        </trans-unit>
        <trans-unit id="21024b6a92b5ebe7899517ec253ead58d6d5c99f" translate="yes" xml:space="preserve">
          <source>VecDeque::with_capacity</source>
          <target state="translated">VecDeque::with_capacity</target>
        </trans-unit>
        <trans-unit id="14ddd4e611818edf9f3b1bf4e1ac181e0ff9a35c" translate="yes" xml:space="preserve">
          <source>Vectors also support indexing (through the &lt;a href=&quot;../ops/trait.index&quot;&gt;&lt;code&gt;Index&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../ops/trait.indexmut&quot;&gt;&lt;code&gt;IndexMut&lt;/code&gt;&lt;/a&gt; traits):</source>
          <target state="translated">ベクトルは、（&lt;a href=&quot;../ops/trait.index&quot;&gt; &lt;code&gt;Index&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;../ops/trait.indexmut&quot;&gt; &lt;code&gt;IndexMut&lt;/code&gt; &lt;/a&gt;トレイトを介して）インデックス作成もサポートします。</target>
        </trans-unit>
        <trans-unit id="10bd4ec04f26e95aeb5bf4a6ea31710e8b61d3aa" translate="yes" xml:space="preserve">
          <source>Vectors ensure they never allocate more than &lt;code&gt;isize::MAX&lt;/code&gt; bytes.</source>
          <target state="translated">Vectors ensure they never allocate more than &lt;code&gt;isize::MAX&lt;/code&gt; bytes.</target>
        </trans-unit>
        <trans-unit id="1fcacbf65fe28c66eeb9a0946fc51047bb848688" translate="yes" xml:space="preserve">
          <source>Vectors have &lt;code&gt;O(1)&lt;/code&gt; indexing, amortized &lt;code&gt;O(1)&lt;/code&gt; push (to the end) and &lt;code&gt;O(1)&lt;/code&gt; pop (from the end).</source>
          <target state="translated">ベクトルには、 &lt;code&gt;O(1)&lt;/code&gt; インデックス、償却済み &lt;code&gt;O(1)&lt;/code&gt; プッシュ（最後まで）、および &lt;code&gt;O(1)&lt;/code&gt; ポップ（最後から）があります。</target>
        </trans-unit>
        <trans-unit id="e52ec64b79bd415e19f90abf054a377374903982" translate="yes" xml:space="preserve">
          <source>Vectors, strings, and hash maps will provide a large amount of functionality necessary in programs when you need to store, access, and modify data. Here are some exercises you should now be equipped to solve:</source>
          <target state="translated">ベクトル、文字列、ハッシュマップは、データを保存、アクセス、修正する必要がある場合に、プログラムで必要な機能を大量に提供します。ここでは、あなたが今から解けるようにしておくべき練習問題をいくつか紹介します。</target>
        </trans-unit>
        <trans-unit id="93994f6561df197197d9ab4e109435108851564b" translate="yes" xml:space="preserve">
          <source>Verbatim UNC prefixes consist of &lt;code&gt;\?\UNC\&lt;/code&gt; immediately followed by the server's hostname and a share name.</source>
          <target state="translated">逐語的UNCプレフィックスは、 &lt;code&gt;\?\UNC\&lt;/code&gt; 直後にサーバーのホスト名と共有名が続きます。</target>
        </trans-unit>
        <trans-unit id="deeec6948b9b0c7f539defff599e2c9119f209e1" translate="yes" xml:space="preserve">
          <source>Verbatim UNC prefixes consist of &lt;code&gt;\\?\UNC\&lt;/code&gt; immediately followed by the server's hostname and a share name.</source>
          <target state="translated">Verbatim UNC prefixes consist of &lt;code&gt;\\?\UNC\&lt;/code&gt; immediately followed by the server's hostname and a share name.</target>
        </trans-unit>
        <trans-unit id="a6bddd5ce42d02852a5de958933bae21b4a5cfba" translate="yes" xml:space="preserve">
          <source>Verbatim disk prefix, e.g., &lt;code&gt;\?\C:\&lt;/code&gt;.</source>
          <target state="translated">逐語的ディスクプレフィックス。たとえば、 &lt;code&gt;\?\C:\&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cc9892a19a8c55087305e1dc4f1a3f3fc14b7bbe" translate="yes" xml:space="preserve">
          <source>Verbatim disk prefix, e.g., &lt;code&gt;\\?\C:&lt;/code&gt;.</source>
          <target state="translated">Verbatim disk prefix, e.g., &lt;code&gt;\\?\C:&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="fd1495f59f098b63bc590bd84cd0a43862e1bc2d" translate="yes" xml:space="preserve">
          <source>Verbatim disk prefixes consist of &lt;code&gt;\?\&lt;/code&gt; immediately followed by the drive letter and &lt;code&gt;:\&lt;/code&gt;.</source>
          <target state="translated">逐語的ディスクプレフィックスは、 &lt;code&gt;\?\&lt;/code&gt; の直後にドライブ文字と &lt;code&gt;:\&lt;/code&gt; が続きます。</target>
        </trans-unit>
        <trans-unit id="bbcf31c83c72d79322932f64e5c3a662a2b82084" translate="yes" xml:space="preserve">
          <source>Verbatim disk prefixes consist of &lt;code&gt;\\?\&lt;/code&gt; immediately followed by the drive letter and &lt;code&gt;:&lt;/code&gt;.</source>
          <target state="translated">Verbatim disk prefixes consist of &lt;code&gt;\\?\&lt;/code&gt; immediately followed by the drive letter and &lt;code&gt;:&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="cf73e30b59ed0c54d6be7774228261a2779fe5cc" translate="yes" xml:space="preserve">
          <source>Verbatim prefix using Windows' &lt;em&gt;&lt;strong&gt;U&lt;/strong&gt;niform &lt;strong&gt;N&lt;/strong&gt;aming &lt;strong&gt;C&lt;/strong&gt;onvention&lt;/em&gt;, e.g., &lt;code&gt;\?\UNC\server\share&lt;/code&gt;.</source>
          <target state="translated">Windowsの&lt;em&gt;&lt;strong&gt;U&lt;/strong&gt; niform &lt;strong&gt;N&lt;/strong&gt; aming &lt;strong&gt;C&lt;/strong&gt; onvention&lt;/em&gt;を使用した逐語的な接頭辞（例： &lt;code&gt;\?\UNC\server\share&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3d803e02d9c2966256665f4a37fc515a7b6b0270" translate="yes" xml:space="preserve">
          <source>Verbatim prefix using Windows' &lt;em&gt;&lt;strong&gt;U&lt;/strong&gt;niform &lt;strong&gt;N&lt;/strong&gt;aming &lt;strong&gt;C&lt;/strong&gt;onvention&lt;/em&gt;, e.g., &lt;code&gt;\\?\UNC\server\share&lt;/code&gt;.</source>
          <target state="translated">Verbatim prefix using Windows' &lt;em&gt;&lt;strong&gt;U&lt;/strong&gt;niform &lt;strong&gt;N&lt;/strong&gt;aming &lt;strong&gt;C&lt;/strong&gt;onvention&lt;/em&gt;, e.g., &lt;code&gt;\\?\UNC\server\share&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b0f55e7ce5ed8a93cf2556500fb3c6edc3497a78" translate="yes" xml:space="preserve">
          <source>Verbatim prefix, e.g., &lt;code&gt;\?\cat_pics&lt;/code&gt;.</source>
          <target state="translated">逐語的な接頭辞。たとえば、 &lt;code&gt;\?\cat_pics&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ec64b930987590c33c18d3b5f5e6cd65655febca" translate="yes" xml:space="preserve">
          <source>Verbatim prefix, e.g., &lt;code&gt;\\?\cat_pics&lt;/code&gt;.</source>
          <target state="translated">Verbatim prefix, e.g., &lt;code&gt;\\?\cat_pics&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="45aebd4cf45d4a9cae739dfb022275481be2f580" translate="yes" xml:space="preserve">
          <source>Verbatim prefixes consist of &lt;code&gt;\?\&lt;/code&gt; immediately followed by the given component.</source>
          <target state="translated">逐語的接頭辞は &lt;code&gt;\?\&lt;/code&gt; で構成され、その直後に特定のコンポーネントが続きます。</target>
        </trans-unit>
        <trans-unit id="6c060304c7d1622fca546ec1708bfccb55b07579" translate="yes" xml:space="preserve">
          <source>Verbatim prefixes consist of &lt;code&gt;\\?\&lt;/code&gt; immediately followed by the given component.</source>
          <target state="translated">Verbatim prefixes consist of &lt;code&gt;\\?\&lt;/code&gt; immediately followed by the given component.</target>
        </trans-unit>
        <trans-unit id="9fe26a152f2000c79f02c76f235c753790949e1b" translate="yes" xml:space="preserve">
          <source>Verify you didn't misspell the field's name or that the field exists. Example:</source>
          <target state="translated">フィールド名のスペルミスやフィールドが存在していないことを確認してください。例:フィールド名のスペルを間違えていないか、フィールドが存在するかを確認します。</target>
        </trans-unit>
        <trans-unit id="13a25bba13e90167e49cf7cd3a2f78bb62a9115f" translate="yes" xml:space="preserve">
          <source>Via immutable references, &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; allows you to share data between multiple parts of your program for reading only. If &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; allowed you to have multiple mutable references too, you might violate one of the borrowing rules discussed in Chapter 4: multiple mutable borrows to the same place can cause data races and inconsistencies. But being able to mutate data is very useful! In the next section, we&amp;rsquo;ll discuss the interior mutability pattern and the &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; type that you can use in conjunction with an &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; to work with this immutability restriction.</source>
          <target state="translated">不変の参照を介して、 &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; 使用すると、プログラムの複数の部分でデータを読み取り専用で共有できます。場合 &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; あなたも複数の可変の参照を持つことができ、あなたは借入ルールのいずれかに違反する可能性がある、第4章で説明：同じ場所に複数の可変借りは、データ競合や矛盾を引き起こす可能性があります。しかし、データを変更できることは非常に便利です。次のセクションでは、内部の &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; パターンと、 &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; と組み合わせて使用​​してこの不変性の制限を操作できるRefCell &amp;lt;T&amp;gt;型について説明します。</target>
        </trans-unit>
        <trans-unit id="0d87f61e558881a5ade183d0bde7c788bfd6f83f" translate="yes" xml:space="preserve">
          <source>Views the underlying data as a subslice of the original data.</source>
          <target state="translated">基になるデータを元のデータのサブスライスとして表示します。</target>
        </trans-unit>
        <trans-unit id="1365826e0c779fd37f6eca7e517fca02b3a8cb6e" translate="yes" xml:space="preserve">
          <source>Violating these may cause problems like corrupting the allocator's internal data structures.</source>
          <target state="translated">これらに違反すると、アロケータの内部データ構造が破損するなどの問題が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="eb48d3b71d8e2b4ff5d04e4cf39bdefa7b5572e2" translate="yes" xml:space="preserve">
          <source>Violating these may cause problems like corrupting the allocator's internal data structures. For example it is &lt;strong&gt;not&lt;/strong&gt; safe to build a &lt;code&gt;Vec&amp;lt;u8&amp;gt;&lt;/code&gt; from a pointer to a C &lt;code&gt;char&lt;/code&gt; array and a &lt;code&gt;size_t&lt;/code&gt;.</source>
          <target state="translated">これらに違反すると、アロケータの内部データ構造が破損するなどの問題が発生する可能性があります。たとえば、Cの &lt;code&gt;char&lt;/code&gt; 配列へのポインタと &lt;code&gt;size_t&lt;/code&gt; から &lt;code&gt;Vec&amp;lt;u8&amp;gt;&lt;/code&gt; を構築するの&lt;strong&gt;は&lt;/strong&gt;安全ではあり&lt;strong&gt;ません&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="8f4c0ad7ae3e37221747e827bd3d99a0ac9c1516" translate="yes" xml:space="preserve">
          <source>Violating these may cause problems like corrupting the allocator's internal data structures. For example it is &lt;strong&gt;not&lt;/strong&gt; safe to build a &lt;code&gt;Vec&amp;lt;u8&amp;gt;&lt;/code&gt; from a pointer to a C &lt;code&gt;char&lt;/code&gt; array with length &lt;code&gt;size_t&lt;/code&gt;. It's also not safe to build one from a &lt;code&gt;Vec&amp;lt;u16&amp;gt;&lt;/code&gt; and its length, because the allocator cares about the alignment, and these two types have different alignments. The buffer was allocated with alignment 2 (for &lt;code&gt;u16&lt;/code&gt;), but after turning it into a &lt;code&gt;Vec&amp;lt;u8&amp;gt;&lt;/code&gt; it'll be deallocated with alignment 1.</source>
          <target state="translated">Violating these may cause problems like corrupting the allocator's internal data structures. For example it is &lt;strong&gt;not&lt;/strong&gt; safe to build a &lt;code&gt;Vec&amp;lt;u8&amp;gt;&lt;/code&gt; from a pointer to a C &lt;code&gt;char&lt;/code&gt; array with length &lt;code&gt;size_t&lt;/code&gt; . It's also not safe to build one from a &lt;code&gt;Vec&amp;lt;u16&amp;gt;&lt;/code&gt; and its length, because the allocator cares about the alignment, and these two types have different alignments. The buffer was allocated with alignment 2 (for &lt;code&gt;u16&lt;/code&gt; ), but after turning it into a &lt;code&gt;Vec&amp;lt;u8&amp;gt;&lt;/code&gt; it'll be deallocated with alignment 1.</target>
        </trans-unit>
        <trans-unit id="68a9e976ee9a673b03411318a7594553e252043a" translate="yes" xml:space="preserve">
          <source>Visibility and Privacy</source>
          <target state="translated">可視性とプライバシー</target>
        </trans-unit>
        <trans-unit id="acf880408a272d86a4dffcc14370fa0e4c75f47e" translate="yes" xml:space="preserve">
          <source>Visibility is restricted to a module which isn't an ancestor of the current item.</source>
          <target state="translated">表示は、現在のアイテムの祖先ではないモジュールに制限されます。</target>
        </trans-unit>
        <trans-unit id="2253ed7f72dc34e443e7ac4b4d54a938632b8a51" translate="yes" xml:space="preserve">
          <source>Visits the values representing the difference, i.e., the values that are in &lt;code&gt;self&lt;/code&gt; but not in &lt;code&gt;other&lt;/code&gt;, in ascending order.</source>
          <target state="translated">違いを表す値、つまり、 &lt;code&gt;self&lt;/code&gt; ではあるが &lt;code&gt;other&lt;/code&gt; ではない値に昇順でアクセスします。</target>
        </trans-unit>
        <trans-unit id="f8a6bc69139e604b07a0f7b4fbe59cbc45d6edd3" translate="yes" xml:space="preserve">
          <source>Visits the values representing the difference, i.e., the values that are in &lt;code&gt;self&lt;/code&gt; but not in &lt;code&gt;other&lt;/code&gt;.</source>
          <target state="translated">違いを表す値、つまり、 &lt;code&gt;self&lt;/code&gt; が &lt;code&gt;other&lt;/code&gt; はない値にアクセスします。</target>
        </trans-unit>
        <trans-unit id="dc96275105d5fba203854ba6f2ee584290bb3b73" translate="yes" xml:space="preserve">
          <source>Visits the values representing the intersection, i.e., the values that are both in &lt;code&gt;self&lt;/code&gt; and &lt;code&gt;other&lt;/code&gt;, in ascending order.</source>
          <target state="translated">交差を表す値、つまり &lt;code&gt;self&lt;/code&gt; と &lt;code&gt;other&lt;/code&gt; 両方の値を昇順で訪問します。</target>
        </trans-unit>
        <trans-unit id="93583e19debdd8af49f8221dd00dfcadd36273e2" translate="yes" xml:space="preserve">
          <source>Visits the values representing the intersection, i.e., the values that are both in &lt;code&gt;self&lt;/code&gt; and &lt;code&gt;other&lt;/code&gt;.</source>
          <target state="translated">交差を表す値、つまり、 &lt;code&gt;self&lt;/code&gt; と &lt;code&gt;other&lt;/code&gt; 両方にある値にアクセスします。</target>
        </trans-unit>
        <trans-unit id="28e2e9de1a1c698adb94ec422ee9bf00f1688bfd" translate="yes" xml:space="preserve">
          <source>Visits the values representing the symmetric difference, i.e., the values that are in &lt;code&gt;self&lt;/code&gt; or in &lt;code&gt;other&lt;/code&gt; but not in both, in ascending order.</source>
          <target state="translated">対称的な差を表す値、つまり、 &lt;code&gt;self&lt;/code&gt; または &lt;code&gt;other&lt;/code&gt; 両方ではなく、昇順である値にアクセスします。</target>
        </trans-unit>
        <trans-unit id="fa09c4a89b2981de0304dd859519ef2763925fbe" translate="yes" xml:space="preserve">
          <source>Visits the values representing the symmetric difference, i.e., the values that are in &lt;code&gt;self&lt;/code&gt; or in &lt;code&gt;other&lt;/code&gt; but not in both.</source>
          <target state="translated">対称的な差を表す値、つまり、 &lt;code&gt;self&lt;/code&gt; または &lt;code&gt;other&lt;/code&gt; が両方にはない値にアクセスします。</target>
        </trans-unit>
        <trans-unit id="0df67d950d55cf2c0598f1e1251b10522c48b544" translate="yes" xml:space="preserve">
          <source>Visits the values representing the union, i.e., all the values in &lt;code&gt;self&lt;/code&gt; or &lt;code&gt;other&lt;/code&gt;, without duplicates, in ascending order.</source>
          <target state="translated">ユニオンを表す値、つまり &lt;code&gt;self&lt;/code&gt; または &lt;code&gt;other&lt;/code&gt; のすべての値を、重複なしに昇順で訪問します。</target>
        </trans-unit>
        <trans-unit id="372c3b3a71e44e50a3dea412035758dc5043954e" translate="yes" xml:space="preserve">
          <source>Visits the values representing the union, i.e., all the values in &lt;code&gt;self&lt;/code&gt; or &lt;code&gt;other&lt;/code&gt;, without duplicates.</source>
          <target state="translated">ユニオンを表す値、つまり &lt;code&gt;self&lt;/code&gt; または &lt;code&gt;other&lt;/code&gt; のすべての値を複製せずに訪問します。</target>
        </trans-unit>
        <trans-unit id="b51bd391919340a1d743507985c13733c7d6ef03" translate="yes" xml:space="preserve">
          <source>Visualizing Changes to &lt;code id=&quot;visualizing-changes-to-strong_count-and-weak_count&quot;&gt;strong_count&lt;/code&gt; and &lt;code&gt;weak_count&lt;/code&gt;</source>
          <target state="translated">&lt;code id=&quot;visualizing-changes-to-strong_count-and-weak_count&quot;&gt;strong_count&lt;/code&gt; および &lt;code&gt;weak_count&lt;/code&gt; への変更の視覚化</target>
        </trans-unit>
        <trans-unit id="5676220497eef42728656e0979bea9c2b6a82a8d" translate="yes" xml:space="preserve">
          <source>Volatile operations are intended to act on I/O memory, and are guaranteed to not be elided or reordered by the compiler across other volatile operations.</source>
          <target state="translated">揮発性操作はI/Oメモリ上で動作することを目的としており、他の揮発性操作にまたがってコンパイラによって排除されたり、順序が変更されたりしないことが保証されています。</target>
        </trans-unit>
        <trans-unit id="d931abb9ea1e9005fc4f3995afaab08188bb3825" translate="yes" xml:space="preserve">
          <source>Volatiles</source>
          <target state="translated">Volatiles</target>
        </trans-unit>
        <trans-unit id="84367e806ed16f93cd67aba890fbaef52d16a0b0" translate="yes" xml:space="preserve">
          <source>WASI</source>
          <target state="translated">WASI</target>
        </trans-unit>
        <trans-unit id="ba8f9147789a84cc1ed9d8889e7d1c5f2daf86f4" translate="yes" xml:space="preserve">
          <source>WaitTimeoutResult</source>
          <target state="translated">WaitTimeoutResult</target>
        </trans-unit>
        <trans-unit id="d23921257696dfde2d9be54900202ded6b40531a" translate="yes" xml:space="preserve">
          <source>WaitTimeoutResult::borrow</source>
          <target state="translated">WaitTimeoutResult::borrow</target>
        </trans-unit>
        <trans-unit id="e4bfa58c6b772c5c978a9f15aff3ea8c9c337b13" translate="yes" xml:space="preserve">
          <source>WaitTimeoutResult::borrow_mut</source>
          <target state="translated">WaitTimeoutResult::borrow_mut</target>
        </trans-unit>
        <trans-unit id="c3089a31c84a7e69d4ddcec9c0086d559ad1b613" translate="yes" xml:space="preserve">
          <source>WaitTimeoutResult::clone</source>
          <target state="translated">WaitTimeoutResult::clone</target>
        </trans-unit>
        <trans-unit id="70898505602cfbffc60f6b92220a2bc67a50e4fc" translate="yes" xml:space="preserve">
          <source>WaitTimeoutResult::clone_from</source>
          <target state="translated">WaitTimeoutResult::clone_from</target>
        </trans-unit>
        <trans-unit id="506d6ad86d4aff5c7e768f2126b38a03b1d6c423" translate="yes" xml:space="preserve">
          <source>WaitTimeoutResult::clone_into</source>
          <target state="translated">WaitTimeoutResult::clone_into</target>
        </trans-unit>
        <trans-unit id="6f6dbd7e4a97fd19ec8ae296c6d1dac4f8b0cd21" translate="yes" xml:space="preserve">
          <source>WaitTimeoutResult::eq</source>
          <target state="translated">WaitTimeoutResult::eq</target>
        </trans-unit>
        <trans-unit id="35a169d82c2d4126bbef2d91986f74234c08e3f4" translate="yes" xml:space="preserve">
          <source>WaitTimeoutResult::fmt</source>
          <target state="translated">WaitTimeoutResult::fmt</target>
        </trans-unit>
        <trans-unit id="d91631f6c310b01cb29b0c0162a387839cb15ffe" translate="yes" xml:space="preserve">
          <source>WaitTimeoutResult::from</source>
          <target state="translated">WaitTimeoutResult::from</target>
        </trans-unit>
        <trans-unit id="ef7960e6e721280bc278dd1c18cf9bca11f3e3ed" translate="yes" xml:space="preserve">
          <source>WaitTimeoutResult::into</source>
          <target state="translated">WaitTimeoutResult::into</target>
        </trans-unit>
        <trans-unit id="976e11e82a160257a424dca59d93a6c8b4ea9c2e" translate="yes" xml:space="preserve">
          <source>WaitTimeoutResult::ne</source>
          <target state="translated">WaitTimeoutResult::ne</target>
        </trans-unit>
        <trans-unit id="d44ae46166a2e05fe6ce0cd81947f8954e918fc2" translate="yes" xml:space="preserve">
          <source>WaitTimeoutResult::timed_out</source>
          <target state="translated">WaitTimeoutResult::timed_out</target>
        </trans-unit>
        <trans-unit id="7529a448deceda69965b242f331d3d2d47de0385" translate="yes" xml:space="preserve">
          <source>WaitTimeoutResult::to_owned</source>
          <target state="translated">WaitTimeoutResult::to_owned</target>
        </trans-unit>
        <trans-unit id="65e57a3d134eede7b603278b2efd076550f5d118" translate="yes" xml:space="preserve">
          <source>WaitTimeoutResult::try_from</source>
          <target state="translated">WaitTimeoutResult::try_from</target>
        </trans-unit>
        <trans-unit id="d9057517a24e151919a1e702856497fc9f2e1e84" translate="yes" xml:space="preserve">
          <source>WaitTimeoutResult::try_into</source>
          <target state="translated">WaitTimeoutResult::try_into</target>
        </trans-unit>
        <trans-unit id="3644db7e54ec2be3e6df93522ec9c4b7fd95833f" translate="yes" xml:space="preserve">
          <source>WaitTimeoutResult::type_id</source>
          <target state="translated">WaitTimeoutResult::type_id</target>
        </trans-unit>
        <trans-unit id="707f6cef491effde076842e8db8ae647cd201bf6" translate="yes" xml:space="preserve">
          <source>Waiting for All Threads to Finish Using &lt;code id=&quot;waiting-for-all-threads-to-finish-using-join-handles&quot;&gt;join&lt;/code&gt; Handles</source>
          <target state="translated">&lt;code id=&quot;waiting-for-all-threads-to-finish-using-join-handles&quot;&gt;join&lt;/code&gt; ハンドルを使用してすべてのスレッドが完了するのを待機しています</target>
        </trans-unit>
        <trans-unit id="16762eaefa56555c2eaf6e62a6941b2c5ed7357c" translate="yes" xml:space="preserve">
          <source>Waiting for the complete expiration of the timeout:</source>
          <target state="translated">完全なタイムアウトの期限切れを待っています。</target>
        </trans-unit>
        <trans-unit id="d04122eb5d85e603a5a6012d2d57fbefd85efc03" translate="yes" xml:space="preserve">
          <source>Waits for the associated thread to finish.</source>
          <target state="translated">関連するスレッドが終了するのを待ちます。</target>
        </trans-unit>
        <trans-unit id="34b4e1bb7b04512bdbb73573cc9f9995a4cee485" translate="yes" xml:space="preserve">
          <source>Waits for the child to exit completely, returning the status that it exited with. This function will continue to have the same return value after it has been called at least once.</source>
          <target state="translated">子プロセスが完全に終了するのを待ち、終了した状態を返します。この関数は、少なくとも一度は呼び出された後も同じ戻り値を持ち続けます。</target>
        </trans-unit>
        <trans-unit id="bada0f7482ebbe8649cfde044b8142e9d439c89f" translate="yes" xml:space="preserve">
          <source>Waits on this condition variable for a notification, timing out after a specified duration.</source>
          <target state="translated">通知のためにこの条件変数で待機し、指定された時間後にタイミングアウトします。</target>
        </trans-unit>
        <trans-unit id="5f3ce7afc1b4ccb3adac9511f2e1a29e873da201" translate="yes" xml:space="preserve">
          <source>Waits on this condition variable for a notification, timing out after a specified duration. Spurious wakes will not cause this function to return.</source>
          <target state="translated">通知のためにこの条件変数で待機し、指定された時間後にタイミングアウトします。いたずらにウェイクしても、この関数は戻りません。</target>
        </trans-unit>
        <trans-unit id="d6a3650e37b6043ab9616dfc37b87c0ed505a997" translate="yes" xml:space="preserve">
          <source>Wake</source>
          <target state="translated">Wake</target>
        </trans-unit>
        <trans-unit id="2b6971b8cb619ebe6c9f69185b57e5e06726f961" translate="yes" xml:space="preserve">
          <source>Wake this task without consuming the waker.</source>
          <target state="translated">ウェイカーを消費せずにこのタスクを覚醒させる。</target>
        </trans-unit>
        <trans-unit id="05b7b65fb8cc05d38d07b2b178ad74919bff2a82" translate="yes" xml:space="preserve">
          <source>Wake this task.</source>
          <target state="translated">このタスクを起動します。</target>
        </trans-unit>
        <trans-unit id="4c08e4975d568759cf6703d7bf42952ea304f69e" translate="yes" xml:space="preserve">
          <source>Wake up the task associated with this &lt;code&gt;Waker&lt;/code&gt; without consuming the &lt;code&gt;Waker&lt;/code&gt;.</source>
          <target state="translated">これに関連したタスクを覚ます &lt;code&gt;Waker&lt;/code&gt; 消費せずに &lt;code&gt;Waker&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d14583aa06ad08eac440eaabe26c3c50f057b2bc" translate="yes" xml:space="preserve">
          <source>Wake up the task associated with this &lt;code&gt;Waker&lt;/code&gt;.</source>
          <target state="translated">この &lt;code&gt;Waker&lt;/code&gt; 関連付けられているタスクをウェイクアップします。</target>
        </trans-unit>
        <trans-unit id="3351e0284024332d1623f9bb9a71979fc567226e" translate="yes" xml:space="preserve">
          <source>Waker</source>
          <target state="translated">Waker</target>
        </trans-unit>
        <trans-unit id="cde3f67c66f5f28656fc3e5918215e0e89065f1b" translate="yes" xml:space="preserve">
          <source>Waker::borrow</source>
          <target state="translated">Waker::borrow</target>
        </trans-unit>
        <trans-unit id="4730ffe6cdd3c37ff166509e6842ce9c54808ecd" translate="yes" xml:space="preserve">
          <source>Waker::borrow_mut</source>
          <target state="translated">Waker::borrow_mut</target>
        </trans-unit>
        <trans-unit id="c55434e246359c8fc39f697b6dc48a600c843fc6" translate="yes" xml:space="preserve">
          <source>Waker::clone</source>
          <target state="translated">Waker::clone</target>
        </trans-unit>
        <trans-unit id="67b661bd0a919b7f0b91980320280ec91e150f76" translate="yes" xml:space="preserve">
          <source>Waker::clone_from</source>
          <target state="translated">Waker::clone_from</target>
        </trans-unit>
        <trans-unit id="1c2f577207eaa3ec3e4ed985f5d3e602b6562f5b" translate="yes" xml:space="preserve">
          <source>Waker::clone_into</source>
          <target state="translated">Waker::clone_into</target>
        </trans-unit>
        <trans-unit id="5763e4fbb711b943b7adb49f3b570b11dfc56482" translate="yes" xml:space="preserve">
          <source>Waker::drop</source>
          <target state="translated">Waker::drop</target>
        </trans-unit>
        <trans-unit id="59f5fb30df1099c8be4ea0f63525b5f20bc3b0cc" translate="yes" xml:space="preserve">
          <source>Waker::fmt</source>
          <target state="translated">Waker::fmt</target>
        </trans-unit>
        <trans-unit id="481f8567d4cc56bcde4c4c7a68610c7e2afe3467" translate="yes" xml:space="preserve">
          <source>Waker::from</source>
          <target state="translated">Waker::from</target>
        </trans-unit>
        <trans-unit id="a71eeb1ffb09bb62e0abc145961000b8eb952efc" translate="yes" xml:space="preserve">
          <source>Waker::from_raw</source>
          <target state="translated">Waker::from_raw</target>
        </trans-unit>
        <trans-unit id="e4a2920ea1322a025438e540af5908bbe5355feb" translate="yes" xml:space="preserve">
          <source>Waker::into</source>
          <target state="translated">Waker::into</target>
        </trans-unit>
        <trans-unit id="b5c94deea812ac7971e5e547d37f8de0e4069039" translate="yes" xml:space="preserve">
          <source>Waker::to_owned</source>
          <target state="translated">Waker::to_owned</target>
        </trans-unit>
        <trans-unit id="4d7590d298d6e86cfce8436d7126d6579b5efe02" translate="yes" xml:space="preserve">
          <source>Waker::try_from</source>
          <target state="translated">Waker::try_from</target>
        </trans-unit>
        <trans-unit id="93850bbbeb49130f5814f2b2766dad35d67a02cd" translate="yes" xml:space="preserve">
          <source>Waker::try_into</source>
          <target state="translated">Waker::try_into</target>
        </trans-unit>
        <trans-unit id="defc51d6b61ef5711b242ae9d4802c4e7e0c0ef8" translate="yes" xml:space="preserve">
          <source>Waker::type_id</source>
          <target state="translated">Waker::type_id</target>
        </trans-unit>
        <trans-unit id="3b802cf623fed6228c8df899224af25458dc9ead" translate="yes" xml:space="preserve">
          <source>Waker::wake</source>
          <target state="translated">Waker::wake</target>
        </trans-unit>
        <trans-unit id="21f366613aaf5bfb62a448abcbff836bae6e879b" translate="yes" xml:space="preserve">
          <source>Waker::wake_by_ref</source>
          <target state="translated">Waker::wake_by_ref</target>
        </trans-unit>
        <trans-unit id="8aecacb6eb7528e5a7db24ccc5440f41aaa29b5e" translate="yes" xml:space="preserve">
          <source>Waker::will_wake</source>
          <target state="translated">Waker::will_wake</target>
        </trans-unit>
        <trans-unit id="cb2a27aece1c0e17c9a4f0452314d6cd5e8fb236" translate="yes" xml:space="preserve">
          <source>Wakes up all blocked threads on this condvar.</source>
          <target state="translated">このコンドバーのすべてのブロックされたスレッドをウェイクアップします。</target>
        </trans-unit>
        <trans-unit id="2ed59db39229b55b2b647aa6c360911539dad3f2" translate="yes" xml:space="preserve">
          <source>Wakes up one blocked thread on this condvar.</source>
          <target state="translated">このコンドバーの1つのブロックされたスレッドを覚醒させる。</target>
        </trans-unit>
        <trans-unit id="e9c45563358e813f157ba81b33143542165ba84e" translate="yes" xml:space="preserve">
          <source>Warning</source>
          <target state="translated">Warning</target>
        </trans-unit>
        <trans-unit id="0c441a7834cca3176be65fd184ebccd3cdfff007" translate="yes" xml:space="preserve">
          <source>Warning: &lt;code&gt;hash_builder&lt;/code&gt; is normally randomly generated, and is designed to allow HashMaps to be resistant to attacks that cause many collisions and very poor performance. Setting it manually using this function can expose a DoS attack vector.</source>
          <target state="translated">警告：通常、 &lt;code&gt;hash_builder&lt;/code&gt; はランダムに生成され、HashMapが多くの衝突と非常に低いパフォーマンスを引き起こす攻撃に耐えられるように設計されています。この関数を使用して手動で設定すると、DoS攻撃ベクトルが公開される可能性があります。</target>
        </trans-unit>
        <trans-unit id="7950a45e4b64d6e5edea8b18ef2a3e5365114042" translate="yes" xml:space="preserve">
          <source>Warning: &lt;code&gt;hasher&lt;/code&gt; is normally randomly generated, and is designed to allow &lt;code&gt;HashSet&lt;/code&gt;s to be resistant to attacks that cause many collisions and very poor performance. Setting it manually using this function can expose a DoS attack vector.</source>
          <target state="translated">警告： &lt;code&gt;hasher&lt;/code&gt; は通常ランダムに生成され、 &lt;code&gt;HashSet&lt;/code&gt; が多くの衝突と非常に低いパフォーマンスを引き起こす攻撃に耐えられるように設計されています。この関数を使用して手動で設定すると、DoS攻撃ベクトルが公開される可能性があります。</target>
        </trans-unit>
        <trans-unit id="e2edf09dde564575fa5343a5e7951070dc2295c5" translate="yes" xml:space="preserve">
          <source>Warning: It is possible for arbitrarily-set configuration options to have the same value as compiler-set configuration options. For example, it is possible to do &lt;code&gt;rustc --cfg &quot;unix&quot; program.rs&lt;/code&gt; while compiling to a Windows target, and have both &lt;code&gt;unix&lt;/code&gt; and &lt;code&gt;windows&lt;/code&gt; configuration options set at the same time. It is unwise to actually do this.</source>
          <target state="translated">警告：任意に設定された構成オプションが、コンパイラー設定の構成オプションと同じ値を持つ可能性があります。たとえば、Windowsターゲットへのコンパイル中に &lt;code&gt;rustc --cfg &quot;unix&quot; program.rs&lt;/code&gt; を実行し、 &lt;code&gt;unix&lt;/code&gt; と &lt;code&gt;windows&lt;/code&gt; の両方の構成オプションを同時に設定することが可能です。これを実際に行うのは賢明ではありません。</target>
        </trans-unit>
        <trans-unit id="953fdee2421f57eef922d79cc862ee6e22ccfc48" translate="yes" xml:space="preserve">
          <source>Warning: There are crucial differences between an &lt;code&gt;enum&lt;/code&gt; in the C language and Rust's &lt;a href=&quot;items/enumerations#custom-discriminant-values-for-fieldless-enumerations&quot;&gt;field-less enums&lt;/a&gt; with this representation. An &lt;code&gt;enum&lt;/code&gt; in C is mostly a &lt;code&gt;typedef&lt;/code&gt; plus some named constants; in other words, an object of an &lt;code&gt;enum&lt;/code&gt; type can hold any integer value. For example, this is often used for bitflags in &lt;code&gt;C&lt;/code&gt;. In contrast, Rust&amp;rsquo;s &lt;a href=&quot;items/enumerations#custom-discriminant-values-for-fieldless-enumerations&quot;&gt;field-less enums&lt;/a&gt; can only legally hold the discrimnant values, everything else is &lt;a href=&quot;behavior-considered-undefined&quot;&gt;undefined behavior&lt;/a&gt;. Therefore, using a field-less enum in FFI to model a C &lt;code&gt;enum&lt;/code&gt; is often wrong.</source>
          <target state="translated">Warning: There are crucial differences between an &lt;code&gt;enum&lt;/code&gt; in the C language and Rust's &lt;a href=&quot;items/enumerations#custom-discriminant-values-for-fieldless-enumerations&quot;&gt;field-less enums&lt;/a&gt; with this representation. An &lt;code&gt;enum&lt;/code&gt; in C is mostly a &lt;code&gt;typedef&lt;/code&gt; plus some named constants; in other words, an object of an &lt;code&gt;enum&lt;/code&gt; type can hold any integer value. For example, this is often used for bitflags in &lt;code&gt;C&lt;/code&gt; . In contrast, Rust&amp;rsquo;s &lt;a href=&quot;items/enumerations#custom-discriminant-values-for-fieldless-enumerations&quot;&gt;field-less enums&lt;/a&gt; can only legally hold the discrimnant values, everything else is &lt;a href=&quot;behavior-considered-undefined&quot;&gt;undefined behavior&lt;/a&gt;. Therefore, using a field-less enum in FFI to model a C &lt;code&gt;enum&lt;/code&gt; is often wrong.</target>
        </trans-unit>
        <trans-unit id="3380a2f82f6fe7cbeb705d60d75cf6bd01597812" translate="yes" xml:space="preserve">
          <source>Warning: There are crucial differences between an &lt;code&gt;enum&lt;/code&gt; in the C language and Rust's C-like enumerations with this representation. An &lt;code&gt;enum&lt;/code&gt; in C is mostly a &lt;code&gt;typedef&lt;/code&gt; plus some named constants; in other words, an object of an &lt;code&gt;enum&lt;/code&gt; type can hold any integer value. For example, this is often used for bitflags in &lt;code&gt;C&lt;/code&gt;. In contrast, Rust&amp;rsquo;s C-like enumerations can only legally hold the discriminant values, everything else is undefined behaviour. Therefore, using a C-like enumeration in FFI to model a C &lt;code&gt;enum&lt;/code&gt; is often wrong.</source>
          <target state="translated">警告：の間に決定的な違いがあります &lt;code&gt;enum&lt;/code&gt; 、C言語や錆のCのようなこの表現を持つ列挙型では。C の &lt;code&gt;enum&lt;/code&gt; は、ほとんどが &lt;code&gt;typedef&lt;/code&gt; といくつかの名前付き定数です。つまり、 &lt;code&gt;enum&lt;/code&gt; 型のオブジェクトは任意の整数値を保持できます。たとえば、これは &lt;code&gt;C&lt;/code&gt; のビットフラグによく使用されます。対照的に、RustのCのような列挙は、合法的な判別値しか保持できず、その他すべては未定義の動作です。したがって、CモデルにFFIにC-ような列挙を使用して &lt;code&gt;enum&lt;/code&gt; 、多くの場合、間違っています。</target>
        </trans-unit>
        <trans-unit id="9ff73fc74b538fd61456634251f2c1d94f2f06da" translate="yes" xml:space="preserve">
          <source>Warning: This book is incomplete. Documenting everything takes a while. See the &lt;a href=&quot;https://github.com/rust-lang-nursery/reference/issues&quot;&gt;GitHub issues&lt;/a&gt; for what is not documented in this book.</source>
          <target state="translated">警告：この本は不完全です。すべてを文書化するにはしばらく時間がかかります。この本に記載されていない内容については、&lt;a href=&quot;https://github.com/rust-lang-nursery/reference/issues&quot;&gt;GitHubの問題&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="f1f7ce6b6e1db1f6b36ab4dbe1ad4b6e4aa8f982" translate="yes" xml:space="preserve">
          <source>Warning: This book is incomplete. Documenting everything takes a while. See the &lt;a href=&quot;https://github.com/rust-lang/reference/issues&quot;&gt;GitHub issues&lt;/a&gt; for what is not documented in this book.</source>
          <target state="translated">Warning: This book is incomplete. Documenting everything takes a while. See the &lt;a href=&quot;https://github.com/rust-lang/reference/issues&quot;&gt;GitHub issues&lt;/a&gt; for what is not documented in this book.</target>
        </trans-unit>
        <trans-unit id="a6bfa37af5724b2422c63f7ff73c9837f336fb04" translate="yes" xml:space="preserve">
          <source>Warning: This is an example warning.</source>
          <target state="translated">警告です。これは警告の例です。</target>
        </trans-unit>
        <trans-unit id="0411a6eec332f44831efbc3f9708608318be0eda" translate="yes" xml:space="preserve">
          <source>Warning: This pseudocode uses a naive algorithm that ignores overflow issues for the sake of clarity. To perform memory layout computations in actual code, use &lt;a href=&quot;../std/alloc/struct.layout&quot;&gt;&lt;code&gt;Layout&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Warning: This pseudocode uses a naive algorithm that ignores overflow issues for the sake of clarity. To perform memory layout computations in actual code, use &lt;a href=&quot;../std/alloc/struct.layout&quot;&gt; &lt;code&gt;Layout&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="aeae9f716fbecdbdacc2c0d2ad381e158829c6f8" translate="yes" xml:space="preserve">
          <source>Warning: Using &lt;code&gt;no_std&lt;/code&gt; does not prevent the standard library from being linked in. It is still valid to put &lt;code&gt;extern crate std;&lt;/code&gt; into the crate and dependencies can also link it in.</source>
          <target state="translated">警告： &lt;code&gt;no_std&lt;/code&gt; を使用しても、標準ライブラリがリンクされるのを防ぐことはできません。externcrate &lt;code&gt;extern crate std;&lt;/code&gt; を置くことは依然として有効です。クレートと依存関係にリンクすることもできます。</target>
        </trans-unit>
        <trans-unit id="7dfdf1e49306b2e83d806807f7999f1effda97a2" translate="yes" xml:space="preserve">
          <source>Warnings that show unsound behavior in the language or possibly confusing interactions of language features are in a special warning box.</source>
          <target state="translated">言語の不健全な挙動を示す警告や、言語機能の相互作用を混乱させる可能性のある警告は、特別な警告ボックスに表示されます。</target>
        </trans-unit>
        <trans-unit id="e1dc0af7f844bca35986a1e9209411ae68e0fca0" translate="yes" xml:space="preserve">
          <source>Was termination successful? Signal termination is not considered a success, and success is defined as a zero exit status.</source>
          <target state="translated">終端は成功したのか?信号の終端は成功とはみなされず、成功はゼロの終了ステータスとして定義されます。</target>
        </trans-unit>
        <trans-unit id="ac046f0c3f07db034ba94ce5da784eb3ed007796" translate="yes" xml:space="preserve">
          <source>Ways Variables and Data Interact: Clone</source>
          <target state="translated">変数とデータの相互作用の方法:クローン</target>
        </trans-unit>
        <trans-unit id="06457bc6418af723aa9f628283f0ba6362fe6a36" translate="yes" xml:space="preserve">
          <source>Ways Variables and Data Interact: Move</source>
          <target state="translated">変数とデータの相互作用の方法:移動</target>
        </trans-unit>
        <trans-unit id="aa61cf33de95859952369ab26063824f574acc8d" translate="yes" xml:space="preserve">
          <source>We add a &lt;code&gt;use minigrep::Config&lt;/code&gt; line to bring the &lt;code&gt;Config&lt;/code&gt; type from the library crate into the binary crate&amp;rsquo;s scope, and we prefix the &lt;code&gt;run&lt;/code&gt; function with our crate name. Now all the functionality should be connected and should work. Run the program with &lt;code&gt;cargo run&lt;/code&gt; and make sure everything works correctly.</source>
          <target state="translated">&lt;code&gt;use minigrep::Config&lt;/code&gt; 行を追加して、ライブラリクレートの &lt;code&gt;Config&lt;/code&gt; タイプをバイナリクレートのスコープに追加し、 &lt;code&gt;run&lt;/code&gt; 関数の前にクレート名を付けます。これで、すべての機能が接続され、機能するはずです。でプログラムを実行し &lt;code&gt;cargo run&lt;/code&gt; し、すべてが正常に動作することを確認してください。</target>
        </trans-unit>
        <trans-unit id="703d634836fbf0167e7202dfb742abab520056ce" translate="yes" xml:space="preserve">
          <source>We add a default implementation for the &lt;code&gt;content&lt;/code&gt; method that returns an empty string slice. That means we don&amp;rsquo;t need to implement &lt;code&gt;content&lt;/code&gt; on the &lt;code&gt;Draft&lt;/code&gt; and &lt;code&gt;PendingReview&lt;/code&gt; structs. The &lt;code&gt;Published&lt;/code&gt; struct will override the &lt;code&gt;content&lt;/code&gt; method and return the value in &lt;code&gt;post.content&lt;/code&gt;.</source>
          <target state="translated">空の文字列スライスを返す &lt;code&gt;content&lt;/code&gt; メソッドのデフォルト実装を追加します。つまり、 &lt;code&gt;Draft&lt;/code&gt; および &lt;code&gt;PendingReview&lt;/code&gt; 構造体に &lt;code&gt;content&lt;/code&gt; を実装する必要はありません。 &lt;code&gt;Published&lt;/code&gt; 構造体は上書きされます &lt;code&gt;content&lt;/code&gt; の方法をとで値を返す &lt;code&gt;post.content&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cb16e5fa6efe59fc0c2272d7f438d5fdaa67503c" translate="yes" xml:space="preserve">
          <source>We add the &lt;code&gt;approve&lt;/code&gt; method to the &lt;code&gt;State&lt;/code&gt; trait and add a new struct that implements &lt;code&gt;State&lt;/code&gt;, the &lt;code&gt;Published&lt;/code&gt; state.</source>
          <target state="translated">私たちは、追加 &lt;code&gt;approve&lt;/code&gt; にメソッドを &lt;code&gt;State&lt;/code&gt; 特性と新しい構造体を追加することが実装 &lt;code&gt;State&lt;/code&gt; 、 &lt;code&gt;Published&lt;/code&gt; 状態。</target>
        </trans-unit>
        <trans-unit id="a8d45ae4bf5b9c5a466c7bb052250652de464f72" translate="yes" xml:space="preserve">
          <source>We add types to the &lt;code&gt;Fn&lt;/code&gt; trait bound to represent the types of the parameters and return values the closures must have to match this trait bound. In this case, our closure has a parameter of type &lt;code&gt;u32&lt;/code&gt; and returns a &lt;code&gt;u32&lt;/code&gt;, so the trait bound we specify is &lt;code&gt;Fn(u32) -&amp;gt; u32&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Fn&lt;/code&gt; トレイトバインドにタイプを追加して、パラメーターのタイプとクロージャーがこのトレイトバインドに一致する必要がある戻り値を表します。この場合、私たちの閉鎖は、型のパラメータがある &lt;code&gt;u32&lt;/code&gt; して返す &lt;code&gt;u32&lt;/code&gt; 我々が指定バインド形質があるので、 &lt;code&gt;Fn(u32) -&amp;gt; u32&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="874a35fb6fc23853895ba769fd48f7062f2b74c7" translate="yes" xml:space="preserve">
          <source>We also need a way to store the lines that contain our query string. For that, we can make a mutable vector before the &lt;code&gt;for&lt;/code&gt; loop and call the &lt;code&gt;push&lt;/code&gt; method to store a &lt;code&gt;line&lt;/code&gt; in the vector. After the &lt;code&gt;for&lt;/code&gt; loop, we return the vector, as shown in Listing 12-19.</source>
          <target state="translated">クエリ文字列を含む行を保存する方法も必要です。そのために、 &lt;code&gt;for&lt;/code&gt; ループの前に変更可能なベクターを作成し、 &lt;code&gt;push&lt;/code&gt; メソッドを呼び出してベクターに &lt;code&gt;line&lt;/code&gt; を格納できます。 &lt;code&gt;for&lt;/code&gt; ループの後、リスト12-19で示されるように、ベクターを返します。</target>
        </trans-unit>
        <trans-unit id="57c6613eb86c997fd0269e2246aca212d29bb5d3" translate="yes" xml:space="preserve">
          <source>We also needed to specify that the string slice error type can now only have the &lt;code&gt;'static&lt;/code&gt; lifetime. Because we&amp;rsquo;re only ever returning string literals, this was true before. However, when we had a reference in the parameters, there was the possibility that the reference in the return type could have had the same lifetime as the reference in the parameters. The rules that we discussed in the &lt;a href=&quot;ch10-03-lifetime-syntax#lifetime-elision&quot;&gt;&amp;ldquo;Lifetime Elision&amp;rdquo;&lt;/a&gt; section of Chapter 10 applied, and we weren&amp;rsquo;t required to annotate the lifetime of &lt;code&gt;&amp;amp;str&lt;/code&gt;. With the change to &lt;code&gt;args&lt;/code&gt;, the lifetime elision rules no longer apply, and we must specify the &lt;code&gt;'static&lt;/code&gt; lifetime.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd076b92dfab849e70346ed509304415baca5781" translate="yes" xml:space="preserve">
          <source>We aren&amp;rsquo;t able to run this test and watch it fail because the test doesn&amp;rsquo;t even compile: the &lt;code&gt;search&lt;/code&gt; function doesn&amp;rsquo;t exist yet! So now we&amp;rsquo;ll add just enough code to get the test to compile and run by adding a definition of the &lt;code&gt;search&lt;/code&gt; function that always returns an empty vector, as shown in Listing 12-16. Then the test should compile and fail because an empty vector doesn&amp;rsquo;t match a vector containing the line &lt;code&gt;&quot;safe, fast, productive.&quot;&lt;/code&gt;</source>
          <target state="translated">テストがコンパイルされないため、このテストを実行して失敗するのを見ることができません。 &lt;code&gt;search&lt;/code&gt; 機能はまだ存在しません！したがって、リスト12-16に示すように、常に空のベクトルを返す &lt;code&gt;search&lt;/code&gt; 関数の定義を追加して、テストをコンパイルして実行するのに十分なコードを追加します。空のベクターは、 &lt;code&gt;&quot;safe, fast, productive.&quot;&lt;/code&gt; という行を含むベクターと一致しないため、テストはコンパイルされて失敗します。</target>
        </trans-unit>
        <trans-unit id="3c085966e58da674ee452521f620be197a7ca241" translate="yes" xml:space="preserve">
          <source>We aren&amp;rsquo;t able to use the variables &lt;code&gt;field_name&lt;/code&gt; and &lt;code&gt;field_value&lt;/code&gt; after they&amp;rsquo;ve been moved into the hash map with the call to &lt;code&gt;insert&lt;/code&gt;.</source>
          <target state="translated">私たちは、変数を使用することができません &lt;code&gt;field_name&lt;/code&gt; と &lt;code&gt;field_value&lt;/code&gt; 、彼らはへの呼び出しでハッシュマップに移動してきた後に &lt;code&gt;insert&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1a29a26e7eebeedc17f2b05615992dc5203d17a2" translate="yes" xml:space="preserve">
          <source>We aren&amp;rsquo;t allowed to use &lt;code&gt;v1_iter&lt;/code&gt; after the call to &lt;code&gt;sum&lt;/code&gt; because &lt;code&gt;sum&lt;/code&gt; takes ownership of the iterator we call it on.</source>
          <target state="translated">我々は、使用を許可されていません &lt;code&gt;v1_iter&lt;/code&gt; を呼び出した後 &lt;code&gt;sum&lt;/code&gt; ので、 &lt;code&gt;sum&lt;/code&gt; 、我々はそれに呼び出すイテレータの所有権を取得します。</target>
        </trans-unit>
        <trans-unit id="03b218b584e4a8c7465d02aa1590edcd7370cd71" translate="yes" xml:space="preserve">
          <source>We aren&amp;rsquo;t doing anything with the parameters to &lt;code&gt;new&lt;/code&gt; and &lt;code&gt;execute&lt;/code&gt;. Let&amp;rsquo;s implement the bodies of these functions with the behavior we want. To start, let&amp;rsquo;s think about &lt;code&gt;new&lt;/code&gt;. Earlier we chose an unsigned type for the &lt;code&gt;size&lt;/code&gt; parameter, because a pool with a negative number of threads makes no sense. However, a pool with zero threads also makes no sense, yet zero is a perfectly valid &lt;code&gt;usize&lt;/code&gt;. We&amp;rsquo;ll add code to check that &lt;code&gt;size&lt;/code&gt; is greater than zero before we return a &lt;code&gt;ThreadPool&lt;/code&gt; instance and have the program panic if it receives a zero by using the &lt;code&gt;assert!&lt;/code&gt; macro, as shown in Listing 20-13.</source>
          <target state="translated">We aren&amp;rsquo;t doing anything with the parameters to &lt;code&gt;new&lt;/code&gt; and &lt;code&gt;execute&lt;/code&gt; . Let&amp;rsquo;s implement the bodies of these functions with the behavior we want. To start, let&amp;rsquo;s think about &lt;code&gt;new&lt;/code&gt; . Earlier we chose an unsigned type for the &lt;code&gt;size&lt;/code&gt; parameter, because a pool with a negative number of threads makes no sense. However, a pool with zero threads also makes no sense, yet zero is a perfectly valid &lt;code&gt;usize&lt;/code&gt; . We&amp;rsquo;ll add code to check that &lt;code&gt;size&lt;/code&gt; is greater than zero before we return a &lt;code&gt;ThreadPool&lt;/code&gt; instance and have the program panic if it receives a zero by using the &lt;code&gt;assert!&lt;/code&gt; macro, as shown in Listing 20-13.</target>
        </trans-unit>
        <trans-unit id="69762a669aa35e1fe1f80ac259fc74112cee84ee" translate="yes" xml:space="preserve">
          <source>We attach data to each variant of the enum directly, so there is no need for an extra struct.</source>
          <target state="translated">enum の各バリアントに直接データをアタッチするので、余分な構造体は必要ありません。</target>
        </trans-unit>
        <trans-unit id="9efe92607cf53ea012fe63bd8f0d6e89b6731360" translate="yes" xml:space="preserve">
          <source>We bind &lt;code&gt;guess&lt;/code&gt; to the expression &lt;code&gt;guess.trim().parse()&lt;/code&gt;. The &lt;code&gt;guess&lt;/code&gt; in the expression refers to the original &lt;code&gt;guess&lt;/code&gt; that was a &lt;code&gt;String&lt;/code&gt; with the input in it. The &lt;code&gt;trim&lt;/code&gt; method on a &lt;code&gt;String&lt;/code&gt; instance will eliminate any whitespace at the beginning and end. Although &lt;code&gt;u32&lt;/code&gt; can contain only numerical characters, the user must press enter to satisfy &lt;code&gt;read_line&lt;/code&gt;. When the user presses enter, a newline character is added to the string. For example, if the user types 5 and presses enter, &lt;code&gt;guess&lt;/code&gt; looks like this: &lt;code&gt;5\n&lt;/code&gt;. The &lt;code&gt;\n&lt;/code&gt; represents &amp;ldquo;newline,&amp;rdquo; the result of pressing enter. The &lt;code&gt;trim&lt;/code&gt; method eliminates &lt;code&gt;\n&lt;/code&gt;, resulting in just &lt;code&gt;5&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;guess&lt;/code&gt; を式 &lt;code&gt;guess.trim().parse()&lt;/code&gt; バインドします。式の &lt;code&gt;guess&lt;/code&gt; は、入力が含まれる &lt;code&gt;String&lt;/code&gt; であった元の &lt;code&gt;guess&lt;/code&gt; を指します。 &lt;code&gt;String&lt;/code&gt; インスタンスの &lt;code&gt;trim&lt;/code&gt; メソッドは、最初と最後の空白を削除します。が、 &lt;code&gt;u32&lt;/code&gt; 唯一の数字を含めることができ、ユーザー必見プレスは満足させるために入力し &lt;code&gt;read_line&lt;/code&gt; 。ユーザーがEnterキーを押すと、改行文字が文字列に追加されます。たとえば、ユーザーが5と入力してEnterキーを押すと、 &lt;code&gt;guess&lt;/code&gt; は次のようになります： &lt;code&gt;5\n&lt;/code&gt; 。 &lt;code&gt;\n&lt;/code&gt; Enterキーを押した結果である「改行」を表します。 &lt;code&gt;trim&lt;/code&gt; 法の排除 &lt;code&gt;\n&lt;/code&gt; だけで、その結果、 &lt;code&gt;5&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0ddf963103dba15efd7153809c5942b206394546" translate="yes" xml:space="preserve">
          <source>We bring &lt;code&gt;std::io::prelude&lt;/code&gt; into scope to get access to certain traits that let us read from and write to the stream. In the &lt;code&gt;for&lt;/code&gt; loop in the &lt;code&gt;main&lt;/code&gt; function, instead of printing a message that says we made a connection, we now call the new &lt;code&gt;handle_connection&lt;/code&gt; function and pass the &lt;code&gt;stream&lt;/code&gt; to it.</source>
          <target state="translated">私たちは、持参 &lt;code&gt;std::io::prelude&lt;/code&gt; 、私たちは、ストリームから書き込み読み聞かせて特定の特徴へのアクセスを得るために、スコープに。 &lt;code&gt;main&lt;/code&gt; 関数の &lt;code&gt;for&lt;/code&gt; ループで、接続を作成したことを示すメッセージを出力する代わりに、新しい &lt;code&gt;handle_connection&lt;/code&gt; 関数を呼び出して &lt;code&gt;stream&lt;/code&gt; を渡します。</target>
        </trans-unit>
        <trans-unit id="240ed8bfedc49b8fc597eafa1de3c89f98bf93c0" translate="yes" xml:space="preserve">
          <source>We call having references as function parameters &lt;em&gt;borrowing&lt;/em&gt;. As in real life, if a person owns something, you can borrow it from them. When you&amp;rsquo;re done, you have to give it back.</source>
          <target state="translated">関数パラメータの&lt;em&gt;借用&lt;/em&gt;として参照を持つと呼びます。実生活のように、人が何かを所有している場合、それらを借りることができます。終わったら、返さなければなりません。</target>
        </trans-unit>
        <trans-unit id="d947f39cbc67a29eb7ea69291febb53660aa4608" translate="yes" xml:space="preserve">
          <source>We call the &lt;code&gt;as_ref&lt;/code&gt; method on the &lt;code&gt;Option&lt;/code&gt; because we want a reference to the value inside the &lt;code&gt;Option&lt;/code&gt; rather than ownership of the value. Because &lt;code&gt;state&lt;/code&gt; is an &lt;code&gt;Option&amp;lt;Box&amp;lt;dyn State&amp;gt;&amp;gt;&lt;/code&gt;, when we call &lt;code&gt;as_ref&lt;/code&gt;, an &lt;code&gt;Option&amp;lt;&amp;amp;Box&amp;lt;dyn State&amp;gt;&amp;gt;&lt;/code&gt; is returned. If we didn&amp;rsquo;t call &lt;code&gt;as_ref&lt;/code&gt;, we would get an error because we can&amp;rsquo;t move &lt;code&gt;state&lt;/code&gt; out of the borrowed &lt;code&gt;&amp;amp;self&lt;/code&gt; of the function parameter.</source>
          <target state="translated">値の所有権ではなく、 &lt;code&gt;Option&lt;/code&gt; 内の値への参照が必要なため、 &lt;code&gt;Option&lt;/code&gt; &lt;code&gt;as_ref&lt;/code&gt; メソッドを呼び出します。ので &lt;code&gt;state&lt;/code&gt; ある &lt;code&gt;Option&amp;lt;Box&amp;lt;dyn State&amp;gt;&amp;gt;&lt;/code&gt; 私たちが呼ぶとき、 &lt;code&gt;as_ref&lt;/code&gt; 、 &lt;code&gt;Option&amp;lt;&amp;amp;Box&amp;lt;dyn State&amp;gt;&amp;gt;&lt;/code&gt; 返されます。 &lt;code&gt;as_ref&lt;/code&gt; を呼び出さなかった場合、関数パラメーターの借用された &lt;code&gt;&amp;amp;self&lt;/code&gt; から &lt;code&gt;state&lt;/code&gt; 移動できないため、エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="5d77e6f9c521f22991317e685c1445407461715a" translate="yes" xml:space="preserve">
          <source>We can also conditionally implement a trait for any type that implements another trait. Implementations of a trait on any type that satisfies the trait bounds are called &lt;em&gt;blanket implementations&lt;/em&gt; and are extensively used in the Rust standard library. For example, the standard library implements the &lt;code&gt;ToString&lt;/code&gt; trait on any type that implements the &lt;code&gt;Display&lt;/code&gt; trait. The &lt;code&gt;impl&lt;/code&gt; block in the standard library looks similar to this code:</source>
          <target state="translated">別のトレイトを実装する任意のタイプのトレイトを条件付きで実装することもできます。特性の境界を満たす任意の型での特性の実装は、&lt;em&gt;ブランケット実装&lt;/em&gt;と呼ばれ、Rust標準ライブラリで広く使用されています。たとえば、標準ライブラリは、 &lt;code&gt;Display&lt;/code&gt; トレイトを実装するすべての型に &lt;code&gt;ToString&lt;/code&gt; トレイトを実装します。標準ライブラリの &lt;code&gt;impl&lt;/code&gt; ブロックは、次のコードに似ています。</target>
        </trans-unit>
        <trans-unit id="bb52f4cd6ad33cd891f08333028285ede3e7db5b" translate="yes" xml:space="preserve">
          <source>We can also construct relative paths that begin in the parent module by using &lt;code&gt;super&lt;/code&gt; at the start of the path. This is like starting a filesystem path with the &lt;code&gt;..&lt;/code&gt; syntax. Why would we want to do this?</source>
          <target state="translated">また、パスの先頭に &lt;code&gt;super&lt;/code&gt; を使用して、親モジュールで始まる相対パスを構築することもできます。これは、 &lt;code&gt;..&lt;/code&gt; 構文でファイルシステムパスを開始するようなものです。なぜこれを行いたいのですか？</target>
        </trans-unit>
        <trans-unit id="778ae68ad9feeabdfe80f409dafc0d4bb361e3fe" translate="yes" xml:space="preserve">
          <source>We can also define structs to use a generic type parameter in one or more fields using the &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; syntax. Listing 10-6 shows how to define a &lt;code&gt;Point&amp;lt;T&amp;gt;&lt;/code&gt; struct to hold &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; coordinate values of any type.</source>
          <target state="translated">&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; 構文を使用して、1つ以上のフィールドでジェネリック型パラメーターを使用する構造体を定義することもできます。リスト10-6は、あらゆるタイプの &lt;code&gt;x&lt;/code&gt; と &lt;code&gt;y&lt;/code&gt; 座標値を保持するために &lt;code&gt;Point&amp;lt;T&amp;gt;&lt;/code&gt; 構造体を定義する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="4e08f30b1a9d52c6dfe2c35efab8e3fc06f66951" translate="yes" xml:space="preserve">
          <source>We can also destructure with literal values as part of the struct pattern rather than creating variables for all the fields. Doing so allows us to test some of the fields for particular values while creating variables to destructure the other fields.</source>
          <target state="translated">また、すべてのフィールドに対して変数を作成するのではなく、構造体パターンの一部としてリテラル値を使用してデストラクトすることもできます。そうすることで、いくつかのフィールドを特定の値でテストしながら、他のフィールドを破壊するために変数を作成することができます。</target>
        </trans-unit>
        <trans-unit id="ea3e2d4c2367c79cd84990de2bc0f7a727763cdc" translate="yes" xml:space="preserve">
          <source>We can also iterate over mutable references to each element in a mutable vector in order to make changes to all the elements. The &lt;code&gt;for&lt;/code&gt; loop in Listing 8-9 will add &lt;code&gt;50&lt;/code&gt; to each element.</source>
          <target state="translated">すべての要素に変更を加えるために、可変ベクトルの各要素への可変参照を反復することもできます。リスト8-9 の &lt;code&gt;for&lt;/code&gt; ループは、各要素に &lt;code&gt;50&lt;/code&gt; を追加します。</target>
        </trans-unit>
        <trans-unit id="ee5cf07fc2a2f75074aafe8e551ff5bba6cab992" translate="yes" xml:space="preserve">
          <source>We can also run tests for one particular crate in a workspace from the top-level directory by using the &lt;code&gt;-p&lt;/code&gt; flag and specifying the name of the crate we want to test:</source>
          <target state="translated">&lt;code&gt;-p&lt;/code&gt; フラグを使用して、テストするクレートの名前を指定することにより、トップレベルディレクトリからワークスペース内の特定のクレートのテストを実行することもできます。</target>
        </trans-unit>
        <trans-unit id="3efbe53d0f34cdeceddc81b7e977c9d7e0e4e394" translate="yes" xml:space="preserve">
          <source>We can also specify more than one trait bound. Say we wanted &lt;code&gt;notify&lt;/code&gt; to use display formatting on &lt;code&gt;item&lt;/code&gt; as well as the &lt;code&gt;summarize&lt;/code&gt; method: we specify in the &lt;code&gt;notify&lt;/code&gt; definition that &lt;code&gt;item&lt;/code&gt; must implement both &lt;code&gt;Display&lt;/code&gt; and &lt;code&gt;Summary&lt;/code&gt;. We can do so using the &lt;code&gt;+&lt;/code&gt; syntax:</source>
          <target state="translated">複数の特性境界を指定することもできます。我々が望んでいたと言う &lt;code&gt;notify&lt;/code&gt; に書式設定、表示に使用する &lt;code&gt;item&lt;/code&gt; だけでなく、 &lt;code&gt;summarize&lt;/code&gt; 方法：我々は、で指定 &lt;code&gt;notify&lt;/code&gt; することを定義 &lt;code&gt;item&lt;/code&gt; 両方実装しなければならない &lt;code&gt;Display&lt;/code&gt; と &lt;code&gt;Summary&lt;/code&gt; 。 &lt;code&gt;+&lt;/code&gt; 構文を使用してこれを行うことができます：</target>
        </trans-unit>
        <trans-unit id="3cc038561d9ea414d06a0435ac0f33d9a3ec4206" translate="yes" xml:space="preserve">
          <source>We can also take advantage of iterators in the &lt;code&gt;search&lt;/code&gt; function in our I/O project, which is reproduced here in Listing 13-28 as it was in Listing 12-19:</source>
          <target state="translated">また、I / Oプロジェクトの &lt;code&gt;search&lt;/code&gt; 機能でイテレータを利用することもできます。これは、リスト12-19と同じように、リスト13-28で再現されています。</target>
        </trans-unit>
        <trans-unit id="27743a857d8c37964df0ba1bbc48632a920fe5c1" translate="yes" xml:space="preserve">
          <source>We can also use &lt;code&gt;_&lt;/code&gt; inside another pattern to ignore just part of a value, for example, when we want to test for only part of a value but have no use for the other parts in the corresponding code we want to run. Listing 18-18 shows code responsible for managing a setting&amp;rsquo;s value. The business requirements are that the user should not be allowed to overwrite an existing customization of a setting but can unset the setting and give it a value if it is currently unset.</source>
          <target state="translated">別のパターン内で &lt;code&gt;_&lt;/code&gt; を使用して、値の一部のみを無視することもできます。たとえば、値の一部のみをテストしたいが、実行する対応するコードの他の部分は使用しない場合などです。リスト18-18は設定の値を管理する責任があるコードを示しています。ビジネス要件は、ユーザーが設定の既存のカスタマイズを上書きすることを許可してはならないことですが、設定を解除して、現在設定されていない場合は値を与えることができます。</target>
        </trans-unit>
        <trans-unit id="a9a0da5e69869676d450fe480d1807e1cd097a3d" translate="yes" xml:space="preserve">
          <source>We can also use &lt;code&gt;extern&lt;/code&gt; to create an interface that allows other languages to call Rust functions. Instead of an &lt;code&gt;extern&lt;/code&gt; block, we add the &lt;code&gt;extern&lt;/code&gt; keyword and specify the ABI to use just before the &lt;code&gt;fn&lt;/code&gt; keyword. We also need to add a &lt;code&gt;#[no_mangle]&lt;/code&gt; annotation to tell the Rust compiler not to mangle the name of this function. &lt;em&gt;Mangling&lt;/em&gt; is when a compiler changes the name we&amp;rsquo;ve given a function to a different name that contains more information for other parts of the compilation process to consume but is less human readable. Every programming language compiler mangles names slightly differently, so for a Rust function to be nameable by other languages, we must disable the Rust compiler&amp;rsquo;s name mangling.</source>
          <target state="translated">&lt;code&gt;extern&lt;/code&gt; を使用して、他の言語がRust関数を呼び出すことができるインターフェイスを作成することもできます。代わりに &lt;code&gt;extern&lt;/code&gt; ブロック、我々は追加 &lt;code&gt;extern&lt;/code&gt; キーワードをし、直前に使用するABIを指定 &lt;code&gt;fn&lt;/code&gt; キーワード。 &lt;code&gt;#[no_mangle]&lt;/code&gt; アノテーションを追加して、Rustコンパイラにこの関数の名前をマングルしないように指示する必要もあります。&lt;em&gt;マングリング&lt;/em&gt;コンパイラが関数に付けた名前を、コンパイルプロセスの他の部分が使用するためのより多くの情報を含む別の名前に変更するときですが、人間には判読できません。すべてのプログラミング言語コンパイラーは名前を少しずつマングルします。そのため、Rust関数を他の言語で名前付けできるようにするには、Rustコンパイラーの名前のマングリングを無効にする必要があります。</target>
        </trans-unit>
        <trans-unit id="6c62477778083229abf76f408542398691e71468" translate="yes" xml:space="preserve">
          <source>We can also use &lt;code&gt;pub&lt;/code&gt; to designate structs and enums as public, but there are a few extra details. If we use &lt;code&gt;pub&lt;/code&gt; before a struct definition, we make the struct public, but the struct&amp;rsquo;s fields will still be private. We can make each field public or not on a case-by-case basis. In Listing 7-9, we&amp;rsquo;ve defined a public &lt;code&gt;back_of_house::Breakfast&lt;/code&gt; struct with a public &lt;code&gt;toast&lt;/code&gt; field but a private &lt;code&gt;seasonal_fruit&lt;/code&gt; field. This models the case in a restaurant where the customer can pick the type of bread that comes with a meal, but the chef decides which fruit accompanies the meal based on what&amp;rsquo;s in season and in stock. The available fruit changes quickly, so customers can&amp;rsquo;t choose the fruit or even see which fruit they&amp;rsquo;ll get.</source>
          <target state="translated">&lt;code&gt;pub&lt;/code&gt; を使用して構造体と列挙型をパブリックとして指定することもできますが、追加の詳細がいくつかあります。構造体定義の前に &lt;code&gt;pub&lt;/code&gt; を使用する場合、構造体をパブリックにしますが、構造体のフィールドは引き続きプライベートです。ケースバイケースで、各フィールドを公開するかどうかを指定できます。リスト7-9では、我々は公共定義した &lt;code&gt;back_of_house::Breakfast&lt;/code&gt; 公共持つ構造体 &lt;code&gt;toast&lt;/code&gt; フィールドが、プライベート &lt;code&gt;seasonal_fruit&lt;/code&gt; をフィールド。これは、顧客が食事に付属するパンの種類を選択できるレストランのケースをモデル化していますが、シェフは、季節や在庫状況に基づいて、食事に添えるフルーツを決定します。利用できる果物はすぐに変わるので、顧客は果物を選択したり、どの果物を手に入れるかを見たりすることさえできません。</target>
        </trans-unit>
        <trans-unit id="58de59dd22e3e6fc1f10ec4a02d3f8e6ab27da48" translate="yes" xml:space="preserve">
          <source>We can also use patterns in closure parameter lists in the same way as in function parameter lists, because closures are similar to functions, as discussed in Chapter 13.</source>
          <target state="translated">13章で説明したように、クロージャは関数に似ているので、関数のパラメータリストと同じようにクロージャのパラメータリストでパターンを使用することもできます。</target>
        </trans-unit>
        <trans-unit id="7925e7cd27a3e1f56c26966752834adef5ab34e2" translate="yes" xml:space="preserve">
          <source>We can also use patterns to destructure structs, enums, tuples, and references to use different parts of these values. Let&amp;rsquo;s walk through each value.</source>
          <target state="translated">パターンを使用して、構造体、列挙型、タプル、および参照を分解し、これらの値のさまざまな部分を使用することもできます。それぞれの値について見ていきましょう。</target>
        </trans-unit>
        <trans-unit id="76f3cf0eca098985427ff4b99e4f8800ead6e68e" translate="yes" xml:space="preserve">
          <source>We can also use the &lt;code&gt;impl Trait&lt;/code&gt; syntax in the return position to return a value of some type that implements a trait, as shown here:</source>
          <target state="translated">次に示すように、戻り位置で &lt;code&gt;impl Trait&lt;/code&gt; 構文を使用して、特性を実装するあるタイプの値を返すこともできます。</target>
        </trans-unit>
        <trans-unit id="05cebebac68137cbc376dfa219f26ac621d46c69" translate="yes" xml:space="preserve">
          <source>We can also use the function &lt;code&gt;String::from&lt;/code&gt; to create a &lt;code&gt;String&lt;/code&gt; from a string literal. The code in Listing 8-13 is equivalent to the code from Listing 8-12 that uses &lt;code&gt;to_string&lt;/code&gt;.</source>
          <target state="translated">我々はまた、機能を使用することができます &lt;code&gt;String::from&lt;/code&gt; 作成するために、 &lt;code&gt;String&lt;/code&gt; 列リテラルからを。コードリスト8-13のコードは、 &lt;code&gt;to_string&lt;/code&gt; を使用するコードリスト8-12のコードと同等です。</target>
        </trans-unit>
        <trans-unit id="75923eaf7777a97564f4dc777548d05d59942c29" translate="yes" xml:space="preserve">
          <source>We can also use underscores in multiple places within one pattern to ignore particular values. Listing 18-19 shows an example of ignoring the second and fourth values in a tuple of five items.</source>
          <target state="translated">特定の値を無視するために1つのパターン内の複数の場所でアンダースコアを使うこともできます。リスト18-19は5つの項目のタプルの2番目と4番目の値を無視する例を示しています。</target>
        </trans-unit>
        <trans-unit id="122a72509f3b2907e160e4a188856f5df6c2c85d" translate="yes" xml:space="preserve">
          <source>We can build a project using &lt;code&gt;cargo build&lt;/code&gt; or &lt;code&gt;cargo check&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;cargo build&lt;/code&gt; または &lt;code&gt;cargo check&lt;/code&gt; を使用してプロジェクトを構築できます。</target>
        </trans-unit>
        <trans-unit id="838e973f1067e2cb1c1db7ba741330fcbc0ac60a" translate="yes" xml:space="preserve">
          <source>We can build a project using &lt;code&gt;cargo build&lt;/code&gt;.</source>
          <target state="translated">We can build a project using &lt;code&gt;cargo build&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ce64501de0b20285b589ca7f67901cf5515ef19d" translate="yes" xml:space="preserve">
          <source>We can build a project without producing a binary to check for errors using &lt;code&gt;cargo check&lt;/code&gt;.</source>
          <target state="translated">We can build a project without producing a binary to check for errors using &lt;code&gt;cargo check&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="809d50064260569cdd4712de50a56577f9d92391" translate="yes" xml:space="preserve">
          <source>We can build and run a project in one step using &lt;code&gt;cargo run&lt;/code&gt;.</source>
          <target state="translated">カーゴランを使用して、1つのステップでプロジェクトを構築および実行でき &lt;code&gt;cargo run&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b242aca9d7e4caf52b300cdcd3d90184f5c24f79" translate="yes" xml:space="preserve">
          <source>We can call any function we&amp;rsquo;ve defined by entering its name followed by a set of parentheses. Because &lt;code&gt;another_function&lt;/code&gt; is defined in the program, it can be called from inside the &lt;code&gt;main&lt;/code&gt; function. Note that we defined &lt;code&gt;another_function&lt;/code&gt;&lt;em&gt;after&lt;/em&gt; the &lt;code&gt;main&lt;/code&gt; function in the source code; we could have defined it before as well. Rust doesn&amp;rsquo;t care where you define your functions, only that they&amp;rsquo;re defined somewhere.</source>
          <target state="translated">定義した関数は、その名前に続けて括弧を入力することで呼び出すことができます。 &lt;code&gt;another_function&lt;/code&gt; はプログラムで定義されているため、 &lt;code&gt;main&lt;/code&gt; 関数内から呼び出すことができます。ソースコードの &lt;code&gt;main&lt;/code&gt; 関数の&lt;em&gt;後&lt;/em&gt;に &lt;code&gt;another_function&lt;/code&gt; を定義したことに注意してください。以前に定義することもできました。Rustは、関数がどこで定義されているかを気にしません。関数がどこで定義されているかだけです。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a8abea5de761553bb0b42e8a7f618aa89a49c8ee" translate="yes" xml:space="preserve">
          <source>We can call the &lt;code&gt;hello&lt;/code&gt; function with a string slice as an argument, such as &lt;code&gt;hello(&quot;Rust&quot;);&lt;/code&gt; for example. Deref coercion makes it possible to call &lt;code&gt;hello&lt;/code&gt; with a reference to a value of type &lt;code&gt;MyBox&amp;lt;String&amp;gt;&lt;/code&gt;, as shown in Listing 15-12:</source>
          <target state="translated">&lt;code&gt;hello(&quot;Rust&quot;);&lt;/code&gt; のように、文字列スライスを引数として &lt;code&gt;hello&lt;/code&gt; 関数を呼び出すことができます。例えば。リスト15-12に示すように、 &lt;code&gt;MyBox&amp;lt;String&amp;gt;&lt;/code&gt; 強制により、タイプMyBox &amp;lt;String&amp;gt;の値への参照を使用して &lt;code&gt;hello&lt;/code&gt; を呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="0f891b91f54057660d908040351a0ff29848041a" translate="yes" xml:space="preserve">
          <source>We can call the &lt;code&gt;next&lt;/code&gt; method on iterators directly; Listing 13-15 demonstrates what values are returned from repeated calls to &lt;code&gt;next&lt;/code&gt; on the iterator created from the vector.</source>
          <target state="translated">イテレータで &lt;code&gt;next&lt;/code&gt; メソッドを直接呼び出すことができます。リスト13-15 は、ベクターから作成されたイテレーターで繰り返される呼び出しから &lt;code&gt;next&lt;/code&gt; 呼び出しに返される値を示しています。</target>
        </trans-unit>
        <trans-unit id="8ef978ad4b55aca46bfe72e7cdc27105e5aa535e" translate="yes" xml:space="preserve">
          <source>We can change the definition of the &lt;code&gt;List&lt;/code&gt; enum in Listing 15-2 and the usage of the &lt;code&gt;List&lt;/code&gt; in Listing 15-3 to the code in Listing 15-5, which will compile:</source>
          <target state="translated">私たちは、の定義変更できる &lt;code&gt;List&lt;/code&gt; 15-2との使用リストに列挙型を &lt;code&gt;List&lt;/code&gt; コンパイルしますリスト15-5のコードにリスト15-3では：</target>
        </trans-unit>
        <trans-unit id="5aa55fe5a8ea6e7664f5b8f2b891ac8638dc6a08" translate="yes" xml:space="preserve">
          <source>We can combine &lt;code&gt;str&lt;/code&gt; with all kinds of pointers: for example, &lt;code&gt;Box&amp;lt;str&amp;gt;&lt;/code&gt; or &lt;code&gt;Rc&amp;lt;str&amp;gt;&lt;/code&gt;. In fact, you&amp;rsquo;ve seen this before but with a different dynamically sized type: traits. Every trait is a dynamically sized type we can refer to by using the name of the trait. In Chapter 17 in the &lt;a href=&quot;ch17-02-trait-objects#using-trait-objects-that-allow-for-values-of-different-types&quot;&gt;&amp;ldquo;Using Trait Objects That Allow for Values of Different Types&amp;rdquo;&lt;/a&gt; section, we mentioned that to use traits as trait objects, we must put them behind a pointer, such as &lt;code&gt;&amp;amp;dyn Trait&lt;/code&gt; or &lt;code&gt;Box&amp;lt;dyn Trait&amp;gt;&lt;/code&gt; (&lt;code&gt;Rc&amp;lt;dyn Trait&amp;gt;&lt;/code&gt; would work too).</source>
          <target state="translated">&lt;code&gt;str&lt;/code&gt; をあらゆる種類のポインタと組み合わせることができます。たとえば、 &lt;code&gt;Box&amp;lt;str&amp;gt;&lt;/code&gt; または &lt;code&gt;Rc&amp;lt;str&amp;gt;&lt;/code&gt; です。実際、これは以前に見たことがありますが、動的にサイズが異なるタイプ：特性です。すべての特性は、特性の名前を使用して参照できる動的なサイズの型です。第17章の&lt;a href=&quot;ch17-02-trait-objects#using-trait-objects-that-allow-for-values-of-different-types&quot;&gt;「異なるタイプの値を許可する特性オブジェクトの使用」&lt;/a&gt;セクションで、特性を特性オブジェクトとして使用するには、 &lt;code&gt;&amp;amp;dyn Trait&lt;/code&gt; や &lt;code&gt;Box&amp;lt;dyn Trait&amp;gt;&lt;/code&gt; （ &lt;code&gt;Rc&amp;lt;dyn Trait&amp;gt;&lt;/code&gt; も機能します）。</target>
        </trans-unit>
        <trans-unit id="ede179db3525aa1a779f8adeec565b9391c18d6a" translate="yes" xml:space="preserve">
          <source>We can create instances of each of the two variants of &lt;code&gt;IpAddrKind&lt;/code&gt; like this:</source>
          <target state="translated">&lt;code&gt;IpAddrKind&lt;/code&gt; ように、IpAddrKindの2つのバリアントのそれぞれのインスタンスを作成できます。</target>
        </trans-unit>
        <trans-unit id="6778f0bff382e98f9e7494c1dbfeeb8d0d54aa88" translate="yes" xml:space="preserve">
          <source>We can create slices using a range within brackets by specifying &lt;code&gt;[starting_index..ending_index]&lt;/code&gt;, where &lt;code&gt;starting_index&lt;/code&gt; is the first position in the slice and &lt;code&gt;ending_index&lt;/code&gt; is one more than the last position in the slice. Internally, the slice data structure stores the starting position and the length of the slice, which corresponds to &lt;code&gt;ending_index&lt;/code&gt; minus &lt;code&gt;starting_index&lt;/code&gt;. So in the case of &lt;code&gt;let world = &amp;amp;s[6..11];&lt;/code&gt;, &lt;code&gt;world&lt;/code&gt; would be a slice that contains a pointer to the 7th byte (counting from 1) of &lt;code&gt;s&lt;/code&gt; with a length value of 5.</source>
          <target state="translated">We can create slices using a range within brackets by specifying &lt;code&gt;[starting_index..ending_index]&lt;/code&gt; , where &lt;code&gt;starting_index&lt;/code&gt; is the first position in the slice and &lt;code&gt;ending_index&lt;/code&gt; is one more than the last position in the slice. Internally, the slice data structure stores the starting position and the length of the slice, which corresponds to &lt;code&gt;ending_index&lt;/code&gt; minus &lt;code&gt;starting_index&lt;/code&gt; . So in the case of &lt;code&gt;let world = &amp;amp;s[6..11];&lt;/code&gt; , &lt;code&gt;world&lt;/code&gt; would be a slice that contains a pointer to the 7th byte (counting from 1) of &lt;code&gt;s&lt;/code&gt; with a length value of 5.</target>
        </trans-unit>
        <trans-unit id="9f3fa459dfc1535461c3584787a472521830592f" translate="yes" xml:space="preserve">
          <source>We can create slices using a range within brackets by specifying &lt;code&gt;[starting_index..ending_index]&lt;/code&gt;, where &lt;code&gt;starting_index&lt;/code&gt; is the first position in the slice and &lt;code&gt;ending_index&lt;/code&gt; is one more than the last position in the slice. Internally, the slice data structure stores the starting position and the length of the slice, which corresponds to &lt;code&gt;ending_index&lt;/code&gt; minus &lt;code&gt;starting_index&lt;/code&gt;. So in the case of &lt;code&gt;let world = &amp;amp;s[6..11];&lt;/code&gt;, &lt;code&gt;world&lt;/code&gt; would be a slice that contains a pointer to the 7th byte of &lt;code&gt;s&lt;/code&gt; with a length value of 5.</source>
          <target state="translated">我々は、指定して括弧内の範囲を使用してスライスを作成することができる &lt;code&gt;[starting_index..ending_index]&lt;/code&gt; ここで、 &lt;code&gt;starting_index&lt;/code&gt; はスライスの最初の位置であり、 &lt;code&gt;ending_index&lt;/code&gt; がスライスの最後の位置よりも一つです。対応する内部、スライスデータ構造を格納開始位置とスライスの長さ、 &lt;code&gt;ending_index&lt;/code&gt; マイナス &lt;code&gt;starting_index&lt;/code&gt; を。だから &lt;code&gt;let world = &amp;amp;s[6..11];&lt;/code&gt; の場合=＆s [6..11];、 &lt;code&gt;world&lt;/code&gt; は、長さの値が5 &lt;code&gt;s&lt;/code&gt; 7番目のバイトへのポインターを含むスライスです。</target>
        </trans-unit>
        <trans-unit id="480beb4f2fbdbd05ea0df3529278b68c75d63e3d" translate="yes" xml:space="preserve">
          <source>We can express this concept in code by defining an &lt;code&gt;IpAddrKind&lt;/code&gt; enumeration and listing the possible kinds an IP address can be, &lt;code&gt;V4&lt;/code&gt; and &lt;code&gt;V6&lt;/code&gt;. These are known as the &lt;em&gt;variants&lt;/em&gt; of the enum:</source>
          <target state="translated">&lt;code&gt;IpAddrKind&lt;/code&gt; 列挙を定義し、IPアドレスに可能な種類（ &lt;code&gt;V4&lt;/code&gt; および &lt;code&gt;V6&lt;/code&gt; )をリストすることで、この概念をコードで表現できます。これらは列挙&lt;em&gt;型のバリアント&lt;/em&gt;として知られてい&lt;em&gt;ます&lt;/em&gt;：</target>
        </trans-unit>
        <trans-unit id="76dc799b358f8c432443282c326218cb637140a7" translate="yes" xml:space="preserve">
          <source>We can express this concept in code by defining an &lt;code&gt;IpAddrKind&lt;/code&gt; enumeration and listing the possible kinds an IP address can be, &lt;code&gt;V4&lt;/code&gt; and &lt;code&gt;V6&lt;/code&gt;. These are the variants of the enum:</source>
          <target state="translated">We can express this concept in code by defining an &lt;code&gt;IpAddrKind&lt;/code&gt; enumeration and listing the possible kinds an IP address can be, &lt;code&gt;V4&lt;/code&gt; and &lt;code&gt;V6&lt;/code&gt; . These are the variants of the enum:</target>
        </trans-unit>
        <trans-unit id="71fae2fe3370b32c9db5f4eaf59056e914aed565" translate="yes" xml:space="preserve">
          <source>We can fix the error in the code from Listing 4-6 with just a small tweak:</source>
          <target state="translated">リスト4-6のコードのエラーを修正するには、ほんの少し手を加えるだけです。</target>
        </trans-unit>
        <trans-unit id="e5578ac88136133dd874daa05323286bc4dd633b" translate="yes" xml:space="preserve">
          <source>We can fix the problem of the spawned thread not getting to run, or not getting to run completely, by saving the return value of &lt;code&gt;thread::spawn&lt;/code&gt; in a variable. The return type of &lt;code&gt;thread::spawn&lt;/code&gt; is &lt;code&gt;JoinHandle&lt;/code&gt;. A &lt;code&gt;JoinHandle&lt;/code&gt; is an owned value that, when we call the &lt;code&gt;join&lt;/code&gt; method on it, will wait for its thread to finish. Listing 16-2 shows how to use the &lt;code&gt;JoinHandle&lt;/code&gt; of the thread we created in Listing 16-1 and call &lt;code&gt;join&lt;/code&gt; to make sure the spawned thread finishes before &lt;code&gt;main&lt;/code&gt; exits:</source>
          <target state="translated">生成されたスレッドが実行されない、または完全に実行されないという問題は、 &lt;code&gt;thread::spawn&lt;/code&gt; 戻り値を変数に保存することで修正できます。 &lt;code&gt;thread::spawn&lt;/code&gt; の戻りの型は &lt;code&gt;JoinHandle&lt;/code&gt; です。A &lt;code&gt;JoinHandle&lt;/code&gt; は、私たちが呼ぶとき、所有している値である &lt;code&gt;join&lt;/code&gt; それに方法を、最後までそのスレッドを待ちます。リスト16-2は、リスト16-1で作成したスレッドの &lt;code&gt;JoinHandle&lt;/code&gt; を使用し、 &lt;code&gt;join&lt;/code&gt; を呼び出して、生成されたスレッドが &lt;code&gt;main&lt;/code&gt; 終了前に終了することを確認する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="22158c42f561db77e36e5c0f1f6b412465276779" translate="yes" xml:space="preserve">
          <source>We can get a value out of the hash map by providing its key to the &lt;code&gt;get&lt;/code&gt; method, as shown in Listing 8-23.</source>
          <target state="translated">リスト8-23で示されるように、 &lt;code&gt;get&lt;/code&gt; メソッドにキーを提供することでハッシュマップから値を取得できます。</target>
        </trans-unit>
        <trans-unit id="7da9dd9f69b66e99d2bf7be9bcdfd0fb6edf1903" translate="yes" xml:space="preserve">
          <source>We can grow a &lt;code&gt;String&lt;/code&gt; by using the &lt;code&gt;push_str&lt;/code&gt; method to append a string slice, as shown in Listing 8-15.</source>
          <target state="translated">私たちは成長することができます &lt;code&gt;String&lt;/code&gt; 使用して &lt;code&gt;push_str&lt;/code&gt; のリスト8-15に示すように、文字列のスライスを追加する方法を。</target>
        </trans-unit>
        <trans-unit id="30087969975a89cb5c986ff322b7e98d082b7a13" translate="yes" xml:space="preserve">
          <source>We can implement methods on structs and enums (as we did in Chapter 5) and use generic types in their definitions, too. Listing 10-9 shows the &lt;code&gt;Point&amp;lt;T&amp;gt;&lt;/code&gt; struct we defined in Listing 10-6 with a method named &lt;code&gt;x&lt;/code&gt; implemented on it.</source>
          <target state="translated">（第5章で行ったように）構造体と列挙型にメソッドを実装し、その定義でジェネリック型を使用することもできます。リスト10-9は、リスト10-6で定義した &lt;code&gt;Point&amp;lt;T&amp;gt;&lt;/code&gt; 構造体に &lt;code&gt;x&lt;/code&gt; という名前のメソッドが実装されていることを示しています。</target>
        </trans-unit>
        <trans-unit id="1416b44fa4e60a1b91e773a8e3e18fa14181606e" translate="yes" xml:space="preserve">
          <source>We can include an &lt;code&gt;else&lt;/code&gt; with an &lt;code&gt;if let&lt;/code&gt;. The block of code that goes with the &lt;code&gt;else&lt;/code&gt; is the same as the block of code that would go with the &lt;code&gt;_&lt;/code&gt; case in the &lt;code&gt;match&lt;/code&gt; expression that is equivalent to the &lt;code&gt;if let&lt;/code&gt; and &lt;code&gt;else&lt;/code&gt;. Recall the &lt;code&gt;Coin&lt;/code&gt; enum definition in Listing 6-4, where the &lt;code&gt;Quarter&lt;/code&gt; variant also held a &lt;code&gt;UsState&lt;/code&gt; value. If we wanted to count all non-quarter coins we see while also announcing the state of the quarters, we could do that with a &lt;code&gt;match&lt;/code&gt; expression like this:</source>
          <target state="translated">&lt;code&gt;if let&lt;/code&gt; で &lt;code&gt;else&lt;/code&gt; を含めることができます。となったコードのブロック &lt;code&gt;else&lt;/code&gt; となるだろうコードのブロックと同じである &lt;code&gt;_&lt;/code&gt; 中の場合 &lt;code&gt;match&lt;/code&gt; と等価である表現 &lt;code&gt;if let&lt;/code&gt; と &lt;code&gt;else&lt;/code&gt; 。リスト6-4 の &lt;code&gt;Coin&lt;/code&gt; enum定義を思い出してください。ここでは、 &lt;code&gt;Quarter&lt;/code&gt; バリアントも &lt;code&gt;UsState&lt;/code&gt; 値を保持しています。表示されるすべての非クォーターコインをカウントすると同時に、クォーターの状態もアナウンスしたい場合は、次のような &lt;code&gt;match&lt;/code&gt; 式を使用してそれを行うことができます。</target>
        </trans-unit>
        <trans-unit id="66061395d6ec2f861be65b1f6e172defc0d75534" translate="yes" xml:space="preserve">
          <source>We can instead return a &lt;code&gt;Result&lt;/code&gt; value that will contain a &lt;code&gt;Config&lt;/code&gt; instance in the successful case and will describe the problem in the error case. When &lt;code&gt;Config::new&lt;/code&gt; is communicating to &lt;code&gt;main&lt;/code&gt;, we can use the &lt;code&gt;Result&lt;/code&gt; type to signal there was a problem. Then we can change &lt;code&gt;main&lt;/code&gt; to convert an &lt;code&gt;Err&lt;/code&gt; variant into a more practical error for our users without the surrounding text about &lt;code&gt;thread 'main'&lt;/code&gt; and &lt;code&gt;RUST_BACKTRACE&lt;/code&gt; that a call to &lt;code&gt;panic!&lt;/code&gt; causes.</source>
          <target state="translated">代わりに、成功した場合の &lt;code&gt;Config&lt;/code&gt; インスタンスを含み、エラーの場合の問題を説明する &lt;code&gt;Result&lt;/code&gt; 値を返すことができます。 &lt;code&gt;Config::new&lt;/code&gt; が &lt;code&gt;main&lt;/code&gt; と通信しているときに、 &lt;code&gt;Result&lt;/code&gt; タイプを使用して問題があったことを通知できます。次に、 &lt;code&gt;main&lt;/code&gt; を変更して、 &lt;code&gt;thread 'main'&lt;/code&gt; および &lt;code&gt;panic!&lt;/code&gt; への呼び出しである &lt;code&gt;RUST_BACKTRACE&lt;/code&gt; に関する周囲のテキストなしで、 &lt;code&gt;Err&lt;/code&gt; バリアントをユーザーにとってより実用的なエラーに変換できます。原因。</target>
        </trans-unit>
        <trans-unit id="bb29fed4b14f1816c3bd75cc8c7b8985f01f0348" translate="yes" xml:space="preserve">
          <source>We can iterate over each key/value pair in a hash map in a similar manner as we do with vectors, using a &lt;code&gt;for&lt;/code&gt; loop:</source>
          <target state="translated">ベクトルの場合と同様に、 &lt;code&gt;for&lt;/code&gt; ループを使用して、ハッシュマップの各キー/値のペアを反復処理できます。</target>
        </trans-unit>
        <trans-unit id="44d33f5a0b00602e0254a6df2e134266a90e2aa9" translate="yes" xml:space="preserve">
          <source>We can mix, match, and nest destructuring patterns in even more complex ways. The following example shows a complicated destructure where we nest structs and tuples inside a tuple and destructure all the primitive values out:</source>
          <target state="translated">さらに複雑な方法で、デストラクチャリング・パターンを混合、マッチング、およびネストすることができます。次の例は、構造体とタプルをタプルの中に入れ子にして、すべてのプリミティブ値を破壊する複雑な破壊構造を示しています。</target>
        </trans-unit>
        <trans-unit id="e58c028003f62365f91c55798dbc7dd101453a7b" translate="yes" xml:space="preserve">
          <source>We can now add &lt;code&gt;use rand;&lt;/code&gt; to the &lt;em&gt;add-one/src/lib.rs&lt;/em&gt; file, and building the whole workspace by running &lt;code&gt;cargo build&lt;/code&gt; in the &lt;em&gt;add&lt;/em&gt; directory will bring in and compile the &lt;code&gt;rand&lt;/code&gt; crate. We will get one warning because we aren&amp;rsquo;t referring to the &lt;code&gt;rand&lt;/code&gt; we brought into scope:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2535d8585e0b8b29c1374b49286a87170bfb973" translate="yes" xml:space="preserve">
          <source>We can now add &lt;code&gt;use rand;&lt;/code&gt; to the &lt;em&gt;add-one/src/lib.rs&lt;/em&gt; file, and building the whole workspace by running &lt;code&gt;cargo build&lt;/code&gt; in the &lt;em&gt;add&lt;/em&gt; directory will bring in and compile the &lt;code&gt;rand&lt;/code&gt; crate:</source>
          <target state="translated">これで &lt;code&gt;use rand;&lt;/code&gt; 追加できます。&lt;em&gt;アドオン1 / SRC / lib.rsの&lt;/em&gt;ファイル、および実行することにより、全体のワークスペースを構築する &lt;code&gt;cargo build&lt;/code&gt; に&lt;em&gt;追加&lt;/em&gt;で持ってきてコンパイルするディレクトリ &lt;code&gt;rand&lt;/code&gt; クレートを：</target>
        </trans-unit>
        <trans-unit id="af6ef7240c4fe2205d00598530304a1736702c02" translate="yes" xml:space="preserve">
          <source>We can pass the name of any test function to &lt;code&gt;cargo test&lt;/code&gt; to run only that test:</source>
          <target state="translated">テスト関数の名前を &lt;code&gt;cargo test&lt;/code&gt; に渡して、そのテストのみを実行できます。</target>
        </trans-unit>
        <trans-unit id="681f8bb7bce5dc24c780df89cf3cfd8148dcbad5" translate="yes" xml:space="preserve">
          <source>We can probably guess what this is doing: &amp;ldquo;bind the value &lt;code&gt;5&lt;/code&gt; to &lt;code&gt;x&lt;/code&gt;; then make a copy of the value in &lt;code&gt;x&lt;/code&gt; and bind it to &lt;code&gt;y&lt;/code&gt;.&amp;rdquo; We now have two variables, &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;, and both equal &lt;code&gt;5&lt;/code&gt;. This is indeed what is happening, because integers are simple values with a known, fixed size, and these two &lt;code&gt;5&lt;/code&gt; values are pushed onto the stack.</source>
          <target state="translated">これが何をしているのか、おそらく推測できます。「値 &lt;code&gt;5&lt;/code&gt; を &lt;code&gt;x&lt;/code&gt; にバインドします。次に、 &lt;code&gt;x&lt;/code&gt; の値のコピーを作成し、それを &lt;code&gt;y&lt;/code&gt; にバインドします。」これで2つの変数 &lt;code&gt;x&lt;/code&gt; と &lt;code&gt;y&lt;/code&gt; があり、どちらも &lt;code&gt;5&lt;/code&gt; です。整数は既知の固定サイズの単純な値であり、これら2つの &lt;code&gt;5&lt;/code&gt; つの値はスタックにプッシュされるため、これは実際に起こっていることです。</target>
        </trans-unit>
        <trans-unit id="adf5d763de0af108f5d4c46398e531c69df86785" translate="yes" xml:space="preserve">
          <source>We can represent the same concept in a more concise way using just an enum, rather than an enum inside a struct, by putting data directly into each enum variant. This new definition of the &lt;code&gt;IpAddr&lt;/code&gt; enum says that both &lt;code&gt;V4&lt;/code&gt; and &lt;code&gt;V6&lt;/code&gt; variants will have associated &lt;code&gt;String&lt;/code&gt; values:</source>
          <target state="translated">各列挙型バリアントにデータを直接入力することにより、構造体内の列挙型ではなく列挙型だけを使用して、同じ概念をより簡潔に表すことができます。 &lt;code&gt;IpAddr&lt;/code&gt; 列挙型のこの新しい定義は、 &lt;code&gt;V4&lt;/code&gt; と &lt;code&gt;V6&lt;/code&gt; の両方のバリアントに関連付けられた &lt;code&gt;String&lt;/code&gt; 値があることを示しています。</target>
        </trans-unit>
        <trans-unit id="76b94955b3f9249c5ee98ad0f6852e07d511a594" translate="yes" xml:space="preserve">
          <source>We can rewrite the code in Listing 15-6 to use a &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; instead of a reference; the dereference operator will work as shown in Listing 15-7:</source>
          <target state="translated">リスト15-6のコードを書き換えて、参照の代わりに &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; を使用できます。逆参照演算子は、コードリスト15-7に示すように機能します。</target>
        </trans-unit>
        <trans-unit id="7ea000b0b28ece0260d2f2bea2366776a6be260f" translate="yes" xml:space="preserve">
          <source>We can see that the &lt;code&gt;Rc&amp;lt;List&amp;gt;&lt;/code&gt; in &lt;code&gt;a&lt;/code&gt; has an initial reference count of 1; then each time we call &lt;code&gt;clone&lt;/code&gt;, the count goes up by 1. When &lt;code&gt;c&lt;/code&gt; goes out of scope, the count goes down by 1. We don&amp;rsquo;t have to call a function to decrease the reference count like we have to call &lt;code&gt;Rc::clone&lt;/code&gt; to increase the reference count: the implementation of the &lt;code&gt;Drop&lt;/code&gt; trait decreases the reference count automatically when an &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; value goes out of scope.</source>
          <target state="translated">私たちが見ることができるという &lt;code&gt;Rc&amp;lt;List&amp;gt;&lt;/code&gt; に1の初期の参照カウントを持っています。その後、 &lt;code&gt;clone&lt;/code&gt; を呼び出すたびに、カウントが1 ずつ増加します &lt;code&gt;c&lt;/code&gt; がスコープから外れると、カウントが1 ずつ減少します &lt;code&gt;Rc::clone&lt;/code&gt; を呼び出す必要があるように、参照カウントを減らす関数を呼び出す必要はありません。参照カウントを増やすための複製： &lt;code&gt;Drop&lt;/code&gt; トレイトの実装は、 &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; 値が範囲外になると、参照カウントを自動的に減らします。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a214ec338df6341cdb5d296dddcacc3063fdedc3" translate="yes" xml:space="preserve">
          <source>We can see the value we actually got in the test output, which would help us debug what happened instead of what we were expecting to happen.</source>
          <target state="translated">テスト出力で実際に得られた値を見ることができるので、何が起こると思っていたかではなく、何が起こったのかをデバッグするのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="5e778fc8d2caec156d83fcf7afdb2aae2c506e66" translate="yes" xml:space="preserve">
          <source>We can specify part of a test name, and any test whose name matches that value will be run. For example, because two of our tests&amp;rsquo; names contain &lt;code&gt;add&lt;/code&gt;, we can run those two by running &lt;code&gt;cargo test add&lt;/code&gt;:</source>
          <target state="translated">テスト名の一部を指定することができ、その値と名前が一致するテストが実行されます。たとえば、2つのテストの名前に &lt;code&gt;add&lt;/code&gt; が含まれているため、 &lt;code&gt;cargo test add&lt;/code&gt; を実行することでこれら2つを実行できます。</target>
        </trans-unit>
        <trans-unit id="2c477c81d4998e0c2db0cd1cb4d1eb52e5c21091" translate="yes" xml:space="preserve">
          <source>We can still do better than this! Since these are all strings, we can use &lt;code&gt;From::from&lt;/code&gt;:</source>
          <target state="translated">私たちはまだこれよりも良いことができます！これらはすべて文字列なので、 &lt;code&gt;From::from&lt;/code&gt; 使用できます。</target>
        </trans-unit>
        <trans-unit id="7f5820640c7aec271923f9535645ba49661f2f13" translate="yes" xml:space="preserve">
          <source>We can still run a particular integration test function by specifying the test function&amp;rsquo;s name as an argument to &lt;code&gt;cargo test&lt;/code&gt;. To run all the tests in a particular integration test file, use the &lt;code&gt;--test&lt;/code&gt; argument of &lt;code&gt;cargo test&lt;/code&gt; followed by the name of the file:</source>
          <target state="translated">&lt;code&gt;cargo test&lt;/code&gt; 引数としてテスト関数の名前を指定することで、特定の統合テスト関数を実行できます。特定の統合テストファイルですべてのテストを実行するには、 &lt;code&gt;cargo test&lt;/code&gt; の &lt;code&gt;--test&lt;/code&gt; 引数の後にファイル名を続けます。</target>
        </trans-unit>
        <trans-unit id="9a8c8ef2737df71d8388e134a7c0ccb41beb3655" translate="yes" xml:space="preserve">
          <source>We can take another small step to improve the &lt;code&gt;parse_config&lt;/code&gt; function further. At the moment, we&amp;rsquo;re returning a tuple, but then we immediately break that tuple into individual parts again. This is a sign that perhaps we don&amp;rsquo;t have the right abstraction yet.</source>
          <target state="translated">さらに小さなステップを &lt;code&gt;parse_config&lt;/code&gt; 、parse_config関数をさらに改善することができます。現時点ではタプルを返していますが、すぐにそのタプルを再び個々の部分に分割します。これは、おそらく正しい抽象化がまだできていないことを示しています。</target>
        </trans-unit>
        <trans-unit id="5b506bd5bc9447453d0ff0e70736267fe699653e" translate="yes" xml:space="preserve">
          <source>We can use &lt;code&gt;LineWriter&lt;/code&gt; to write one line at a time, significantly reducing the number of actual writes to the file.</source>
          <target state="translated">&lt;code&gt;LineWriter&lt;/code&gt; を使用して一度に1行ずつ書き込むことができるため、ファイルへの実際の書き込み回数を大幅に削減できます。</target>
        </trans-unit>
        <trans-unit id="589393eead9827eb0357a452c622a307b85e9161" translate="yes" xml:space="preserve">
          <source>We can use a nested path at any level in a path, which is useful when combining two &lt;code&gt;use&lt;/code&gt; statements that share a subpath. For example, Listing 7-19 shows two &lt;code&gt;use&lt;/code&gt; statements: one that brings &lt;code&gt;std::io&lt;/code&gt; into scope and one that brings &lt;code&gt;std::io::Write&lt;/code&gt; into scope.</source>
          <target state="translated">パスの任意のレベルでネストされたパスを使用できます。これは、サブパスを共有する2つの &lt;code&gt;use&lt;/code&gt; ステートメントを組み合わせるときに役立ちます。たとえば、リスト7-19は2つの &lt;code&gt;use&lt;/code&gt; ステートメントを示しています。1つは &lt;code&gt;std::io&lt;/code&gt; をスコープ内に持ち、もう1つは &lt;code&gt;std::io::Write&lt;/code&gt; をスコープ内に持ちます。</target>
        </trans-unit>
        <trans-unit id="ef8af218d727ce9d8232f2296725304b83f601ff" translate="yes" xml:space="preserve">
          <source>We can use generics to create definitions for items like function signatures or structs, which we can then use with many different concrete data types. Let&amp;rsquo;s first look at how to define functions, structs, enums, and methods using generics. Then we&amp;rsquo;ll discuss how generics affect code performance.</source>
          <target state="translated">ジェネリックスを使用して、関数のシグネチャや構造体などのアイテムの定義を作成できます。これらの定義は、さまざまな具体的なデータ型で使用できます。最初に、ジェネリックスを使用して関数、構造体、列挙型、メソッドを定義する方法を見てみましょう。次に、ジェネリックスがコードのパフォーマンスにどのように影響するかについて説明します。</target>
        </trans-unit>
        <trans-unit id="e8dc1033c290aa4d0f8f436900ce0a06f8d56ae8" translate="yes" xml:space="preserve">
          <source>We can write tests that assert, for example, that when we pass &lt;code&gt;3&lt;/code&gt; to the &lt;code&gt;add_two&lt;/code&gt; function, the returned value is &lt;code&gt;5&lt;/code&gt;. We can run these tests whenever we make changes to our code to make sure any existing correct behavior has not changed.</source>
          <target state="translated">私たちは、私たちが通過したときに、例えば、そのアサートテストを書くことができる &lt;code&gt;3&lt;/code&gt; に &lt;code&gt;add_two&lt;/code&gt; の機能、返される値は &lt;code&gt;5&lt;/code&gt; 。コードに変更を加えるたびにこれらのテストを実行して、既存の正しい動作が変更されていないことを確認できます。</target>
        </trans-unit>
        <trans-unit id="9385857c424a38be102f8d4b72e9e3b61729bf2a" translate="yes" xml:space="preserve">
          <source>We can write this code in a more concise way using iterator adaptor methods. Doing so also lets us avoid having a mutable intermediate &lt;code&gt;results&lt;/code&gt; vector. The functional programming style prefers to minimize the amount of mutable state to make code clearer. Removing the mutable state might enable a future enhancement to make searching happen in parallel, because we wouldn&amp;rsquo;t have to manage concurrent access to the &lt;code&gt;results&lt;/code&gt; vector. Listing 13-29 shows this change:</source>
          <target state="translated">イテレーターアダプターメソッドを使用して、このコードをより簡潔に記述できます。そうすることで、変更可能な中間 &lt;code&gt;results&lt;/code&gt; ベクトルを避けることができます。関数型プログラミングスタイルでは、コードをより明確にするために、可変状態の量を最小限に抑えることを好みます。変更可能な状態を削除すると、 &lt;code&gt;results&lt;/code&gt; ベクトルへの同時アクセスを管理する必要がなくなるため、将来の拡張で検索を並行して実行できるようになる可能性があります。リスト13-29はこの変更を示しています：</target>
        </trans-unit>
        <trans-unit id="e88d0bfc51700a22588d6147632aec4291d1a85c" translate="yes" xml:space="preserve">
          <source>We can&amp;rsquo;t disable the automatic insertion of &lt;code&gt;drop&lt;/code&gt; when a value goes out of scope, and we can&amp;rsquo;t call the &lt;code&gt;drop&lt;/code&gt; method explicitly. So, if we need to force a value to be cleaned up early, we can use the &lt;code&gt;std::mem::drop&lt;/code&gt; function.</source>
          <target state="translated">値がスコープ外になった場合の &lt;code&gt;drop&lt;/code&gt; の自動挿入を無効にすることはできず、 &lt;code&gt;drop&lt;/code&gt; メソッドを明示的に呼び出すこともできません。したがって、値を強制的に早期にクリーンアップする必要がある場合は、 &lt;code&gt;std::mem::drop&lt;/code&gt; 関数を使用できます。</target>
        </trans-unit>
        <trans-unit id="5eb55f0f3c1815005ce6026f04d2d3d7695261ea" translate="yes" xml:space="preserve">
          <source>We can&amp;rsquo;t do the same with functions; if we try with the following example, our code won&amp;rsquo;t compile:</source>
          <target state="translated">関数についても同じことはできません。次の例を試すと、コードはコンパイルされません。</target>
        </trans-unit>
        <trans-unit id="004573547af483d7764ab7d46060e1c54dc0773a" translate="yes" xml:space="preserve">
          <source>We can&amp;rsquo;t implement this function using only safe Rust. An attempt might look something like Listing 19-5, which won&amp;rsquo;t compile. For simplicity, we&amp;rsquo;ll implement &lt;code&gt;split_at_mut&lt;/code&gt; as a function rather than a method and only for slices of &lt;code&gt;i32&lt;/code&gt; values rather than for a generic type &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">安全なRustだけを使用してこの関数を実装することはできません。試行はリスト19-5のようになり、コンパイルされません。簡単にするために、 &lt;code&gt;split_at_mut&lt;/code&gt; をメソッドではなく関数として実装し、ジェネリック型 &lt;code&gt;T&lt;/code&gt; ではなく &lt;code&gt;i32&lt;/code&gt; 値のスライスにのみ実装します。</target>
        </trans-unit>
        <trans-unit id="582ce9f7ce322bfba577c502da3fd8ad049c4d4a" translate="yes" xml:space="preserve">
          <source>We can&amp;rsquo;t modify the &lt;code&gt;MockMessenger&lt;/code&gt; to keep track of the messages, because the &lt;code&gt;send&lt;/code&gt; method takes an immutable reference to &lt;code&gt;self&lt;/code&gt;. We also can&amp;rsquo;t take the suggestion from the error text to use &lt;code&gt;&amp;amp;mut self&lt;/code&gt; instead, because then the signature of &lt;code&gt;send&lt;/code&gt; wouldn&amp;rsquo;t match the signature in the &lt;code&gt;Messenger&lt;/code&gt; trait definition (feel free to try and see what error message you get).</source>
          <target state="translated">&lt;code&gt;send&lt;/code&gt; メソッドは &lt;code&gt;self&lt;/code&gt; への不変の参照を取るため、 &lt;code&gt;MockMessenger&lt;/code&gt; を変更してメッセージを追跡することはできません。また、使用するエラーテキストからの提案を取ることができない &lt;code&gt;&amp;amp;mut self&lt;/code&gt; その後の署名ので、代わりの &lt;code&gt;send&lt;/code&gt; で署名一致しません &lt;code&gt;Messenger&lt;/code&gt; の特性の定義を（試してみて、何を得るのエラーメッセージが表示して自由に感じます）。</target>
        </trans-unit>
        <trans-unit id="475ed34c630883783c7ce91b1cbb038a7124429f" translate="yes" xml:space="preserve">
          <source>We can&amp;rsquo;t specify the names of multiple tests in this way; only the first value given to &lt;code&gt;cargo test&lt;/code&gt; will be used. But there is a way to run multiple tests.</source>
          <target state="translated">この方法で複数のテストの名前を指定することはできません。 &lt;code&gt;cargo test&lt;/code&gt; 指定された最初の値のみが使用されます。しかし、複数のテストを実行する方法があります。</target>
        </trans-unit>
        <trans-unit id="e237fd577614eaca9ca57bd30e8d152c826a8f6a" translate="yes" xml:space="preserve">
          <source>We cannot create an object of type &lt;code&gt;Box&amp;lt;Foo&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;amp;Foo&lt;/code&gt; since in this case &lt;code&gt;Self&lt;/code&gt; would not be &lt;code&gt;Sized&lt;/code&gt;.</source>
          <target state="translated">タイプ &lt;code&gt;Box&amp;lt;Foo&amp;gt;&lt;/code&gt; または &lt;code&gt;&amp;amp;Foo&lt;/code&gt; のオブジェクトは作成できません。この場合、 &lt;code&gt;Self&lt;/code&gt; は &lt;code&gt;Sized&lt;/code&gt; ないためです。</target>
        </trans-unit>
        <trans-unit id="44f6533d2b54ba2e8cfd6b4cbb63ec903b4d8b3d" translate="yes" xml:space="preserve">
          <source>We chose &lt;code&gt;usize&lt;/code&gt; as the type of the &lt;code&gt;size&lt;/code&gt; parameter, because we know that a negative number of threads doesn&amp;rsquo;t make any sense. We also know we&amp;rsquo;ll use this 4 as the number of elements in a collection of threads, which is what the &lt;code&gt;usize&lt;/code&gt; type is for, as discussed in the &lt;a href=&quot;ch03-02-data-types#integer-types&quot;&gt;&amp;ldquo;Integer Types&amp;rdquo;&lt;/a&gt; section of Chapter 3.</source>
          <target state="translated">負の数のスレッドは意味をなさないことがわかっているため、 &lt;code&gt;size&lt;/code&gt; パラメータのタイプとして &lt;code&gt;usize&lt;/code&gt; を選択しました。また、この4をスレッドのコレクションの要素数として使用することもわかっています。これは、第3章の&lt;a href=&quot;ch03-02-data-types#integer-types&quot;&gt;「整数型」&lt;/a&gt;セクションで説明したように、 &lt;code&gt;usize&lt;/code&gt; 型の目的です。</target>
        </trans-unit>
        <trans-unit id="7895e1f893882c82193d8df3d4f2286271194e94" translate="yes" xml:space="preserve">
          <source>We clone the &lt;code&gt;Rc&amp;lt;Node&amp;gt;&lt;/code&gt; in &lt;code&gt;leaf&lt;/code&gt; and store that in &lt;code&gt;branch&lt;/code&gt;, meaning the &lt;code&gt;Node&lt;/code&gt; in &lt;code&gt;leaf&lt;/code&gt; now has two owners: &lt;code&gt;leaf&lt;/code&gt; and &lt;code&gt;branch&lt;/code&gt;. We can get from &lt;code&gt;branch&lt;/code&gt; to &lt;code&gt;leaf&lt;/code&gt; through &lt;code&gt;branch.children&lt;/code&gt;, but there&amp;rsquo;s no way to get from &lt;code&gt;leaf&lt;/code&gt; to &lt;code&gt;branch&lt;/code&gt;. The reason is that &lt;code&gt;leaf&lt;/code&gt; has no reference to &lt;code&gt;branch&lt;/code&gt; and doesn&amp;rsquo;t know they&amp;rsquo;re related. We want &lt;code&gt;leaf&lt;/code&gt; to know that &lt;code&gt;branch&lt;/code&gt; is its parent. We&amp;rsquo;ll do that next.</source>
          <target state="translated">&lt;code&gt;Rc&amp;lt;Node&amp;gt;&lt;/code&gt; を &lt;code&gt;leaf&lt;/code&gt; 複製し、それを &lt;code&gt;branch&lt;/code&gt; に保存します。つまり、 &lt;code&gt;leaf&lt;/code&gt; の &lt;code&gt;Node&lt;/code&gt; に2つの所有者、つまり &lt;code&gt;leaf&lt;/code&gt; と &lt;code&gt;branch&lt;/code&gt; ます。私たちは、から入手することができ &lt;code&gt;branch&lt;/code&gt; に &lt;code&gt;leaf&lt;/code&gt; を通じて &lt;code&gt;branch.children&lt;/code&gt; 、しかしから取得する方法はありません &lt;code&gt;leaf&lt;/code&gt; に &lt;code&gt;branch&lt;/code&gt; 。その理由は、 &lt;code&gt;leaf&lt;/code&gt; は &lt;code&gt;branch&lt;/code&gt; への参照がなく、それらが関連していることを知らないためです。 &lt;code&gt;branch&lt;/code&gt; が親であることを &lt;code&gt;leaf&lt;/code&gt; に知らせたい。次にそれを行います。</target>
        </trans-unit>
        <trans-unit id="05f1667dd3106c8abc956cd0b899e6b8c6b816c1" translate="yes" xml:space="preserve">
          <source>We could also use the &lt;code&gt;vec!&lt;/code&gt; macro to make a vector of two integers or a vector of five string slices. We wouldn&amp;rsquo;t be able to use a function to do the same because we wouldn&amp;rsquo;t know the number or type of values up front.</source>
          <target state="translated">&lt;code&gt;vec!&lt;/code&gt; も使用できます。2つの整数のベクトルまたは5つの文字列スライスのベクトルを作成するマクロ。前もって値の数やタイプがわからないため、関数を使用して同じことを行うことはできません。</target>
        </trans-unit>
        <trans-unit id="f6d258f9750395523193a3f14c9610f257a272c0" translate="yes" xml:space="preserve">
          <source>We could change the definition of &lt;code&gt;Cons&lt;/code&gt; to hold references instead, but then we would have to specify lifetime parameters. By specifying lifetime parameters, we would be specifying that every element in the list will live at least as long as the entire list. The borrow checker wouldn&amp;rsquo;t let us compile &lt;code&gt;let a = Cons(10, &amp;amp;Nil);&lt;/code&gt; for example, because the temporary &lt;code&gt;Nil&lt;/code&gt; value would be dropped before &lt;code&gt;a&lt;/code&gt; could take a reference to it.</source>
          <target state="translated">代わりに参照を保持するように &lt;code&gt;Cons&lt;/code&gt; の定義を変更することもできますが、その場合は存続期間パラメーターを指定する必要があります。ライフタイムパラメータを指定することで、リスト内のすべての要素が少なくともリスト全体と同じ長さで存続するように指定します。借用チェッカーは &lt;code&gt;let a = Cons(10, &amp;amp;Nil);&lt;/code&gt; コンパイルさせません。一時的なので、例えば、 &lt;code&gt;Nil&lt;/code&gt; 値が前に削除されるだろう、それへの参照を取ることができます。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d05429b5e9fe586f9bb77f649f37d1e197f6a7f0" translate="yes" xml:space="preserve">
          <source>We could do more here! If you want to continue enhancing this project, here are some ideas:</source>
          <target state="translated">私たちはここでより多くのことをすることができます! このプロジェクトを継続的に強化していきたいとお考えの方には、以下のようなアイデアをご紹介します。</target>
        </trans-unit>
        <trans-unit id="6fefbbccf770b8f30f2dc978bcfe9a114e9fbb7e" translate="yes" xml:space="preserve">
          <source>We could have called &lt;code&gt;a.clone()&lt;/code&gt; rather than &lt;code&gt;Rc::clone(&amp;amp;a)&lt;/code&gt;, but Rust&amp;rsquo;s convention is to use &lt;code&gt;Rc::clone&lt;/code&gt; in this case. The implementation of &lt;code&gt;Rc::clone&lt;/code&gt; doesn&amp;rsquo;t make a deep copy of all the data like most types&amp;rsquo; implementations of &lt;code&gt;clone&lt;/code&gt; do. The call to &lt;code&gt;Rc::clone&lt;/code&gt; only increments the reference count, which doesn&amp;rsquo;t take much time. Deep copies of data can take a lot of time. By using &lt;code&gt;Rc::clone&lt;/code&gt; for reference counting, we can visually distinguish between the deep-copy kinds of clones and the kinds of clones that increase the reference count. When looking for performance problems in the code, we only need to consider the deep-copy clones and can disregard calls to &lt;code&gt;Rc::clone&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Rc::clone(&amp;amp;a)&lt;/code&gt; &lt;code&gt;a.clone()&lt;/code&gt; ではなくa.clone（）を呼び出すこともできましたが、Rustの規則はこの場合 &lt;code&gt;Rc::clone&lt;/code&gt; を使用することです。実装 &lt;code&gt;Rc::clone&lt;/code&gt; 、ほとんどの種類の実装などのデータすべてのディープコピーを作成していない &lt;code&gt;clone&lt;/code&gt; ありません。 &lt;code&gt;Rc::clone&lt;/code&gt; の呼び出しは参照カウントをインクリメントするだけで、それほど時間はかかりません。データのディープコピーには時間がかかる場合があります。参照カウントに &lt;code&gt;Rc::clone&lt;/code&gt; を使用すると、ディープコピーの種類のクローンと、参照カウントを増やすクローンの種類を視覚的に区別できます。コードでパフォーマンスの問題を探すときは、ディープコピーのクローンのみを考慮する必要があり、次の呼び出しを無視できます。 &lt;code&gt;Rc::clone&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="eca83f4ee5c90ab6cc276aa537db842341cf4adb" translate="yes" xml:space="preserve">
          <source>We could manage the &lt;code&gt;String&lt;/code&gt; data in a number of different ways, but the easiest, though somewhat inefficient, route is to call the &lt;code&gt;clone&lt;/code&gt; method on the values. This will make a full copy of the data for the &lt;code&gt;Config&lt;/code&gt; instance to own, which takes more time and memory than storing a reference to the string data. However, cloning the data also makes our code very straightforward because we don&amp;rsquo;t have to manage the lifetimes of the references; in this circumstance, giving up a little performance to gain simplicity is a worthwhile trade-off.</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; データはさまざまな方法で管理できますが、最も効率的ではありますが、多少非効率的ですが、値に対して &lt;code&gt;clone&lt;/code&gt; メソッドを呼び出す方法があります。これにより、 &lt;code&gt;Config&lt;/code&gt; インスタンスが所有するデータの完全なコピーが作成されます。これには、文字列データへの参照を保存するよりも多くの時間とメモリが必要です。ただし、データのクローンを作成すると、参照の有効期間を管理する必要がないため、コードが非常に簡単になります。この状況では、簡単にするために少しパフォーマンスをあきらめることは、価値のあるトレードオフです。</target>
        </trans-unit>
        <trans-unit id="c509f8d6e89246f38539832c75fb48cf6c5ba2b0" translate="yes" xml:space="preserve">
          <source>We could restructure the workout program in many ways. First, we&amp;rsquo;ll try extracting the duplicated call to the &lt;code&gt;simulated_expensive_calculation&lt;/code&gt; function into a variable, as shown in Listing 13-4.</source>
          <target state="translated">さまざまな方法でトレーニングプログラムを再構築できます。まず、リスト13-4に示すように、 &lt;code&gt;simulated_expensive_calculation&lt;/code&gt; 関数への重複した呼び出しを変数に抽出してみます。</target>
        </trans-unit>
        <trans-unit id="b747f40b6d976ebdbf66a032afb6e45dd5554fe8" translate="yes" xml:space="preserve">
          <source>We could, for example, implement methods only on &lt;code&gt;Point&amp;lt;f32&amp;gt;&lt;/code&gt; instances rather than on &lt;code&gt;Point&amp;lt;T&amp;gt;&lt;/code&gt; instances with any generic type. In Listing 10-10 we use the concrete type &lt;code&gt;f32&lt;/code&gt;, meaning we don&amp;rsquo;t declare any types after &lt;code&gt;impl&lt;/code&gt;.</source>
          <target state="translated">たとえば、ジェネリック型の &lt;code&gt;Point&amp;lt;T&amp;gt;&lt;/code&gt; インスタンスではなく、 &lt;code&gt;Point&amp;lt;f32&amp;gt;&lt;/code&gt; インスタンスにのみメソッドを実装できます。リスト10-10では、具象型 &lt;code&gt;f32&lt;/code&gt; を使用しています。つまり、 &lt;code&gt;impl&lt;/code&gt; の後に型を宣言していません。</target>
        </trans-unit>
        <trans-unit id="dc540cd4ac8553c761d432c98ece0eb2c93f00d9" translate="yes" xml:space="preserve">
          <source>We covered a lot in this chapter! Now that you know about generic type parameters, traits and trait bounds, and generic lifetime parameters, you&amp;rsquo;re ready to write code without repetition that works in many different situations. Generic type parameters let you apply the code to different types. Traits and trait bounds ensure that even though the types are generic, they&amp;rsquo;ll have the behavior the code needs. You learned how to use lifetime annotations to ensure that this flexible code won&amp;rsquo;t have any dangling references. And all of this analysis happens at compile time, which doesn&amp;rsquo;t affect runtime performance!</source>
          <target state="translated">この章では多くのことを取り上げました！ジェネリック型パラメーター、トレイトとトレイト境界、およびジェネリックライフタイムパラメーターについて理解したので、さまざまな状況で機能する繰り返しなしでコードを書く準備ができました。ジェネリック型パラメーターを使用すると、コードをさまざまな型に適用できます。特性と特性の境界により、型がジェネリックであっても、コードに必要な動作が確実に得られます。この柔軟なコードにぶら下がっている参照がないようにするために、ライフタイムアノテーションを使用する方法を学びました。また、この分析はすべてコンパイル時に行われるため、実行時のパフォーマンスには影響しません。</target>
        </trans-unit>
        <trans-unit id="eb3fa7151412c41431bd677558948e5410e9f15a" translate="yes" xml:space="preserve">
          <source>We create a &lt;code&gt;counter&lt;/code&gt; variable to hold an &lt;code&gt;i32&lt;/code&gt; inside a &lt;code&gt;Mutex&amp;lt;T&amp;gt;&lt;/code&gt;, as we did in Listing 16-12. Next, we create 10 threads by iterating over a range of numbers. We use &lt;code&gt;thread::spawn&lt;/code&gt; and give all the threads the same closure, one that moves the counter into the thread, acquires a lock on the &lt;code&gt;Mutex&amp;lt;T&amp;gt;&lt;/code&gt; by calling the &lt;code&gt;lock&lt;/code&gt; method, and then adds 1 to the value in the mutex. When a thread finishes running its closure, &lt;code&gt;num&lt;/code&gt; will go out of scope and release the lock so another thread can acquire it.</source>
          <target state="translated">リスト16-12で行ったように、 &lt;code&gt;Mutex&amp;lt;T&amp;gt;&lt;/code&gt; 内に &lt;code&gt;i32&lt;/code&gt; を保持する &lt;code&gt;counter&lt;/code&gt; 変数を作成します。次に、一連の数値を反復して10個のスレッドを作成します。 &lt;code&gt;thread::spawn&lt;/code&gt; を使用して、すべてのスレッドに同じクロージャーを与えます。これは、カウンターをスレッドに移動し、 &lt;code&gt;lock&lt;/code&gt; メソッドを呼び出して &lt;code&gt;Mutex&amp;lt;T&amp;gt;&lt;/code&gt; ロックを取得し、ミューテックスの値に1を追加します。スレッドがそのクロージャーの実行を終了すると、 &lt;code&gt;num&lt;/code&gt; はスコープ外になり、ロックを解放して、別のスレッドがロックを獲得できるようにします。</target>
        </trans-unit>
        <trans-unit id="213f26aca0645a1c53b1bbcf5c4371b8d84d7d68" translate="yes" xml:space="preserve">
          <source>We create a &lt;em&gt;tests&lt;/em&gt; directory at the top level of our project directory, next to &lt;em&gt;src&lt;/em&gt;. Cargo knows to look for integration test files in this directory. We can then make as many test files as we want to in this directory, and Cargo will compile each of the files as an individual crate.</source>
          <target state="translated">プロジェクトディレクトリの最上位、&lt;em&gt;srcの&lt;/em&gt;隣に&lt;em&gt;テスト&lt;/em&gt;ディレクトリを作成し&lt;em&gt;ます&lt;/em&gt;。 Cargoは、このディレクトリで統合テストファイルを探すことを知っています。その後、このディレクトリに必要なだけテストファイルを作成できます。Cargoは各ファイルを個別のクレートとしてコンパイルします。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="9d1f90968f355a976c1446423d6bfb4b640e2c12" translate="yes" xml:space="preserve">
          <source>We create a new channel using the &lt;code&gt;mpsc::channel&lt;/code&gt; function; &lt;code&gt;mpsc&lt;/code&gt; stands for &lt;em&gt;multiple producer, single consumer&lt;/em&gt;. In short, the way Rust&amp;rsquo;s standard library implements channels means a channel can have multiple &lt;em&gt;sending&lt;/em&gt; ends that produce values but only one &lt;em&gt;receiving&lt;/em&gt; end that consumes those values. Imagine multiple streams flowing together into one big river: everything sent down any of the streams will end up in one river at the end. We&amp;rsquo;ll start with a single producer for now, but we&amp;rsquo;ll add multiple producers when we get this example working.</source>
          <target state="translated">&lt;code&gt;mpsc::channel&lt;/code&gt; 関数を使用して新しいチャネルを作成します。 &lt;code&gt;mpsc&lt;/code&gt; は、&lt;em&gt;複数のプロデューサー、単一のコンシューマーを&lt;/em&gt;表します。つまり、Rustの標準ライブラリがチャネルを実装する方法は、チャネルが値を生成する複数の&lt;em&gt;送信&lt;/em&gt;端を持つことができるが、それらの値を消費する1つの&lt;em&gt;受信&lt;/em&gt;端のみを持つことができることを意味します。複数の小川が1つの大きな川に流れ込むことを想像してみてください。いずれかの小川に流れ落ちたものはすべて、最後に1つの川になります。ここでは単一のプロデューサーから始めますが、この例が機能するようになったら複数のプロデューサーを追加します。</target>
        </trans-unit>
        <trans-unit id="f5c29204bb0d962e79055d0d1b3b5bbda1a961e7" translate="yes" xml:space="preserve">
          <source>We create a tuple by writing a comma-separated list of values inside parentheses. Each position in the tuple has a type, and the types of the different values in the tuple don&amp;rsquo;t have to be the same. We&amp;rsquo;ve added optional type annotations in this example:</source>
          <target state="translated">かっこ内に値のコンマ区切りリストを記述してタプルを作成します。タプルの各位置にはタイプがあり、タプルの異なる値のタイプは同じである必要はありません。この例では、オプションの型注釈を追加しています。</target>
        </trans-unit>
        <trans-unit id="217c985ce00adb4e75f034015851790eafde7ce0" translate="yes" xml:space="preserve">
          <source>We create a value that is an instance of &lt;code&gt;Rc&amp;lt;RefCell&amp;lt;i32&amp;gt;&amp;gt;&lt;/code&gt; and store it in a variable named &lt;code&gt;value&lt;/code&gt; so we can access it directly later. Then we create a &lt;code&gt;List&lt;/code&gt; in &lt;code&gt;a&lt;/code&gt; with a &lt;code&gt;Cons&lt;/code&gt; variant that holds &lt;code&gt;value&lt;/code&gt;. We need to clone &lt;code&gt;value&lt;/code&gt; so both &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt; have ownership of the inner &lt;code&gt;5&lt;/code&gt; value rather than transferring ownership from &lt;code&gt;value&lt;/code&gt; to &lt;code&gt;a&lt;/code&gt; or having &lt;code&gt;a&lt;/code&gt; borrow from &lt;code&gt;value&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Rc&amp;lt;RefCell&amp;lt;i32&amp;gt;&amp;gt;&lt;/code&gt; インスタンスである値を作成し、後で直接アクセスできるように、 &lt;code&gt;value&lt;/code&gt; という名前の変数に格納します。その後、我々は、作成する &lt;code&gt;List&lt;/code&gt; 中での &lt;code&gt;Cons&lt;/code&gt; を保持バリアント &lt;code&gt;value&lt;/code&gt; 。私たちは、クローンに必要な &lt;code&gt;value&lt;/code&gt; の両方ので、 &lt;code&gt;a&lt;/code&gt; と &lt;code&gt;value&lt;/code&gt; 、内側の所有権が持っている &lt;code&gt;5&lt;/code&gt; むしろから所有権を転送するよりも、値を &lt;code&gt;value&lt;/code&gt; にか持つからボロー &lt;code&gt;value&lt;/code&gt; 。 &lt;code&gt;a&lt;/code&gt; &lt;code&gt;a&lt;/code&gt; &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a78ec46695882234043b0ee9037ddd70e71fc2b2" translate="yes" xml:space="preserve">
          <source>We create a variable &lt;code&gt;one_borrow&lt;/code&gt; for the &lt;code&gt;RefMut&amp;lt;T&amp;gt;&lt;/code&gt; smart pointer returned from &lt;code&gt;borrow_mut&lt;/code&gt;. Then we create another mutable borrow in the same way in the variable &lt;code&gt;two_borrow&lt;/code&gt;. This makes two mutable references in the same scope, which isn&amp;rsquo;t allowed. When we run the tests for our library, the code in Listing 15-23 will compile without any errors, but the test will fail:</source>
          <target state="translated">私たちは、変数を作成 &lt;code&gt;one_borrow&lt;/code&gt; ため &lt;code&gt;RefMut&amp;lt;T&amp;gt;&lt;/code&gt; から返されたスマートポインタ &lt;code&gt;borrow_mut&lt;/code&gt; 。次に、変数 &lt;code&gt;two_borrow&lt;/code&gt; に同じ方法で別の可変借入を作成します。これにより、同じスコープ内で2つの変更可能な参照が作成されますが、これは許可されていません。ライブラリのテストを実行すると、リスト15-23のコードはエラーなしでコンパイルされますが、テストは失敗します。</target>
        </trans-unit>
        <trans-unit id="a13f3cc429bf174699131984fc2de3412f7e9ed1" translate="yes" xml:space="preserve">
          <source>We create a variable named &lt;code&gt;guess&lt;/code&gt;. But wait, doesn&amp;rsquo;t the program already have a variable named &lt;code&gt;guess&lt;/code&gt;? It does, but Rust allows us to &lt;em&gt;shadow&lt;/em&gt; the previous value of &lt;code&gt;guess&lt;/code&gt; with a new one. This feature is often used in situations in which you want to convert a value from one type to another type. Shadowing lets us reuse the &lt;code&gt;guess&lt;/code&gt; variable name rather than forcing us to create two unique variables, such as &lt;code&gt;guess_str&lt;/code&gt; and &lt;code&gt;guess&lt;/code&gt; for example. (Chapter 3 covers shadowing in more detail.)</source>
          <target state="translated">&lt;code&gt;guess&lt;/code&gt; という名前の変数を作成します。しかし、待ってください。プログラムには、 &lt;code&gt;guess&lt;/code&gt; という名前の変数がすでにありませんか？それはありませんが、錆は、私たちがすることができます&lt;em&gt;影&lt;/em&gt;の前の値 &lt;code&gt;guess&lt;/code&gt; 新しいものに。この機能は、値をあるタイプから別のタイプに変換する場合によく使用されます。 &lt;code&gt;guess_str&lt;/code&gt; を使用 &lt;code&gt;guess&lt;/code&gt; 、たとえばguess_strやguessなどの2つの一意の変数を作成せずに、 &lt;code&gt;guess&lt;/code&gt; 変数名を再利用できます。 （第3章では、シャドウイングについて詳しく説明しています。）</target>
        </trans-unit>
        <trans-unit id="de4fc4d2d99789fde2fe26a07b69cc901ac7718d" translate="yes" xml:space="preserve">
          <source>We create an &lt;code&gt;Rc&amp;lt;List&amp;gt;&lt;/code&gt; instance holding a &lt;code&gt;List&lt;/code&gt; value in the variable &lt;code&gt;a&lt;/code&gt; with an initial list of &lt;code&gt;5, Nil&lt;/code&gt;. We then create an &lt;code&gt;Rc&amp;lt;List&amp;gt;&lt;/code&gt; instance holding another &lt;code&gt;List&lt;/code&gt; value in the variable &lt;code&gt;b&lt;/code&gt; that contains the value 10 and points to the list in &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="translated">変数 &lt;code&gt;a&lt;/code&gt; の &lt;code&gt;List&lt;/code&gt; 値を保持する &lt;code&gt;Rc&amp;lt;List&amp;gt;&lt;/code&gt; インスタンスを作成します。初期リストは &lt;code&gt;5, Nil&lt;/code&gt; です。私たちは、その後、作成 &lt;code&gt;Rc&amp;lt;List&amp;gt;&lt;/code&gt; 別の保持のインスタンスを &lt;code&gt;List&lt;/code&gt; 変数に値を &lt;code&gt;b&lt;/code&gt; でリストに値10と点を含んでいます。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e2247cf495f9d29b643c1d913b5721c0a5bd3745" translate="yes" xml:space="preserve">
          <source>We define a module by starting with the &lt;code&gt;mod&lt;/code&gt; keyword and then specify the name of the module (in this case, &lt;code&gt;front_of_house&lt;/code&gt;) and place curly brackets around the body of the module. Inside modules, we can have other modules, as in this case with the modules &lt;code&gt;hosting&lt;/code&gt; and &lt;code&gt;serving&lt;/code&gt;. Modules can also hold definitions for other items, such as structs, enums, constants, traits, or&amp;mdash;as in Listing 7-1&amp;mdash;functions.</source>
          <target state="translated">&lt;code&gt;mod&lt;/code&gt; キーワードで開始してモジュールを定義し、モジュールの名前（この場合は、 &lt;code&gt;front_of_house&lt;/code&gt; ）を指定して、モジュールの本体を中括弧で囲みます。モジュールの内部には、他のモジュールを含めることができます。この場合、 &lt;code&gt;hosting&lt;/code&gt; と &lt;code&gt;serving&lt;/code&gt; モジュールです。モジュールは、構造体、列挙型、定数、特性、またはリスト7-1のように関数など、他の項目の定義も保持できます。</target>
        </trans-unit>
        <trans-unit id="e47ede752c48b9631f3f17b5d74a77ce4b734cb8" translate="yes" xml:space="preserve">
          <source>We define a struct named &lt;code&gt;MyBox&lt;/code&gt; and declare a generic parameter &lt;code&gt;T&lt;/code&gt;, because we want our type to hold values of any type. The &lt;code&gt;MyBox&lt;/code&gt; type is a tuple struct with one element of type &lt;code&gt;T&lt;/code&gt;. The &lt;code&gt;MyBox::new&lt;/code&gt; function takes one parameter of type &lt;code&gt;T&lt;/code&gt; and returns a &lt;code&gt;MyBox&lt;/code&gt; instance that holds the value passed in.</source>
          <target state="translated">&lt;code&gt;MyBox&lt;/code&gt; という名前の構造体を定義し、ジェネリックパラメーター &lt;code&gt;T&lt;/code&gt; を宣言します。これは、型に任意の型の値を保持させるためです。 &lt;code&gt;MyBox&lt;/code&gt; のタイプは、タイプの一つの要素を持つタプル構造体である &lt;code&gt;T&lt;/code&gt; 。 &lt;code&gt;MyBox::new&lt;/code&gt; 機能は、タイプの一つのパラメータ取り &lt;code&gt;T&lt;/code&gt; をして返す &lt;code&gt;MyBox&lt;/code&gt; の中で渡された値を保持しているインスタンスを。</target>
        </trans-unit>
        <trans-unit id="3dba1e3de49b65359a5e4f8f90084e7de4bbd56a" translate="yes" xml:space="preserve">
          <source>We define the variable &lt;code&gt;b&lt;/code&gt; to have the value of a &lt;code&gt;Box&lt;/code&gt; that points to the value &lt;code&gt;5&lt;/code&gt;, which is allocated on the heap. This program will print &lt;code&gt;b = 5&lt;/code&gt;; in this case, we can access the data in the box similar to how we would if this data were on the stack. Just like any owned value, when a box goes out of scope, as &lt;code&gt;b&lt;/code&gt; does at the end of &lt;code&gt;main&lt;/code&gt;, it will be deallocated. The deallocation happens for the box (stored on the stack) and the data it points to (stored on the heap).</source>
          <target state="translated">変数 &lt;code&gt;b&lt;/code&gt; を、ヒープに割り当てられている値 &lt;code&gt;5&lt;/code&gt; を指す &lt;code&gt;Box&lt;/code&gt; の値を持つように定義します。このプログラムは &lt;code&gt;b = 5&lt;/code&gt; ます。この場合、このデータがスタック上にある場合と同様に、ボックス内のデータにアクセスできます。所有値と同様に、ボックスがスコープから外れると、 &lt;code&gt;b&lt;/code&gt; が &lt;code&gt;main&lt;/code&gt; の最後に行うように、割り当てが解除されます。割り当て解除は、ボックス（スタックに格納されている）とボックスが指すデータ（ヒープに格納されている）に対して行われます。</target>
        </trans-unit>
        <trans-unit id="6c4670dac61b6eae4d1d24a214b4ec0473603413" translate="yes" xml:space="preserve">
          <source>We did it! We counted from 0 to 10, which may not seem very impressive, but it did teach us a lot about &lt;code&gt;Mutex&amp;lt;T&amp;gt;&lt;/code&gt; and thread safety. You could also use this program&amp;rsquo;s structure to do more complicated operations than just incrementing a counter. Using this strategy, you can divide a calculation into independent parts, split those parts across threads, and then use a &lt;code&gt;Mutex&amp;lt;T&amp;gt;&lt;/code&gt; to have each thread update the final result with its part.</source>
          <target state="translated">やりました！私たちは0から10まで数えましたが、それほど印象的ではないかもしれませんが、 &lt;code&gt;Mutex&amp;lt;T&amp;gt;&lt;/code&gt; とスレッドセーフティについて多くのことを教えてくれました。このプログラムの構造を使用して、カウンタをインクリメントするだけではなく、より複雑な操作を実行することもできます。この戦略を使用すると、計算を独立した部分に分割し、それらの部分をスレッド間で分割し、 &lt;code&gt;Mutex&amp;lt;T&amp;gt;&lt;/code&gt; を使用して、各スレッドにその部分で最終結果を更新させることができます。</target>
        </trans-unit>
        <trans-unit id="fe1aa557fede41366c6004f8700f2e15672b0f90" translate="yes" xml:space="preserve">
          <source>We didn&amp;rsquo;t handle the &lt;code&gt;None&lt;/code&gt; case, so this code will cause a bug. Luckily, it&amp;rsquo;s a bug Rust knows how to catch. If we try to compile this code, we&amp;rsquo;ll get this error:</source>
          <target state="translated">&lt;code&gt;None&lt;/code&gt; ケースは処理しなかったため、このコードはバグの原因になります。幸い、それはRustがキャッチする方法を知っているバグです。このコードをコンパイルしようとすると、次のエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="989f3e5cd017623906ee76c93f904f2554f643be" translate="yes" xml:space="preserve">
          <source>We discussed how to control encapsulation in Chapter 7: we can use the &lt;code&gt;pub&lt;/code&gt; keyword to decide which modules, types, functions, and methods in our code should be public, and by default everything else is private. For example, we can define a struct &lt;code&gt;AveragedCollection&lt;/code&gt; that has a field containing a vector of &lt;code&gt;i32&lt;/code&gt; values. The struct can also have a field that contains the average of the values in the vector, meaning the average doesn&amp;rsquo;t have to be computed on demand whenever anyone needs it. In other words, &lt;code&gt;AveragedCollection&lt;/code&gt; will cache the calculated average for us. Listing 17-1 has the definition of the &lt;code&gt;AveragedCollection&lt;/code&gt; struct:</source>
          <target state="translated">カプセル化を制御する方法については、第7章で説明しました &lt;code&gt;pub&lt;/code&gt; キーワードを使用して、コード内のどのモジュール、型、関数、およびメソッドをパブリックにするかを決定できます。デフォルトでは、その他はすべてプライベートです。たとえば、 &lt;code&gt;i32&lt;/code&gt; 値のベクトルを含むフィールドを持つ構造化 &lt;code&gt;AveragedCollection&lt;/code&gt; を定義できます。構造体は、ベクトルの値の平均を含むフィールドを持つこともできます。つまり、誰かが必要とするときはいつでも、平均をオンデマンドで計算する必要はありません。つまり、 &lt;code&gt;AveragedCollection&lt;/code&gt; は計算された平均をキャッシュします。リスト17-1は &lt;code&gt;AveragedCollection&lt;/code&gt; 構造体の定義を持っています：</target>
        </trans-unit>
        <trans-unit id="b3015808d9d1facbbe8da90fee53a4b9abf4f2fa" translate="yes" xml:space="preserve">
          <source>We do this by adding another attribute, &lt;code&gt;should_panic&lt;/code&gt;, to our test function. This attribute makes a test pass if the code inside the function panics; the test will fail if the code inside the function doesn&amp;rsquo;t panic.</source>
          <target state="translated">これを行うには、別の属性 &lt;code&gt;should_panic&lt;/code&gt; をテスト関数に追加します。この属性は、関数内のコードがパニックした場合にテストに合格します。関数内のコードがパニックにならない場合、テストは失敗します。</target>
        </trans-unit>
        <trans-unit id="8639f3d179b96373aaacdd4299811b8d0f9290d7" translate="yes" xml:space="preserve">
          <source>We don&amp;rsquo;t get a very helpful message in this case, but when we look at the test function, we see that it&amp;rsquo;s annotated with &lt;code&gt;#[should_panic]&lt;/code&gt;. The failure we got means that the code in the test function did not cause a panic.</source>
          <target state="translated">この場合、あまり役立つメッセージは表示されませんが、テスト関数を見ると、 &lt;code&gt;#[should_panic]&lt;/code&gt; で注釈が付けられていることがわかります。私たちが得た失敗は、テスト関数のコードがパニックを引き起こさなかったことを意味します。</target>
        </trans-unit>
        <trans-unit id="4068c6471062184c3b20d8cf98be5e41f0b8825e" translate="yes" xml:space="preserve">
          <source>We don&amp;rsquo;t need to annotate any code in &lt;em&gt;tests/integration_test.rs&lt;/em&gt; with &lt;code&gt;#[cfg(test)]&lt;/code&gt;. Cargo treats the &lt;code&gt;tests&lt;/code&gt; directory specially and compiles files in this directory only when we run &lt;code&gt;cargo test&lt;/code&gt;. Run &lt;code&gt;cargo test&lt;/code&gt; now:</source>
          <target state="translated">私たちは、内のコード注釈を付ける必要はありません&lt;em&gt;テスト/ integration_test.rs&lt;/em&gt;と &lt;code&gt;#[cfg(test)]&lt;/code&gt; 。Cargoは、 &lt;code&gt;tests&lt;/code&gt; ディレクトリを特別に扱い、 &lt;code&gt;cargo test&lt;/code&gt; を実行するときにのみ、このディレクトリ内のファイルをコンパイルします。今すぐ &lt;code&gt;cargo test&lt;/code&gt; 実行してください：</target>
        </trans-unit>
        <trans-unit id="75fb1977c5f782491b5c56b13b35e7dc4f98b7f9" translate="yes" xml:space="preserve">
          <source>We don&amp;rsquo;t own the memory at this arbitrary location, and there is no guarantee that the slice this code creates contains valid &lt;code&gt;i32&lt;/code&gt; values. Attempting to use &lt;code&gt;slice&lt;/code&gt; as though it&amp;rsquo;s a valid slice results in undefined behavior.</source>
          <target state="translated">この任意の場所にメモリを所有しているわけではありません。また、このコードが作成するスライスに有効な &lt;code&gt;i32&lt;/code&gt; 値が含まれている保証はありません。 &lt;code&gt;slice&lt;/code&gt; を有効なスライスであるかのように使用しようとすると、未定義の動作が発生します。</target>
        </trans-unit>
        <trans-unit id="33c7757c8f6132df6178843a84503652a22ac2d5" translate="yes" xml:space="preserve">
          <source>We don't just need to create a table of all implementations of all methods of &lt;code&gt;Trait&lt;/code&gt;, we need to create such a table, for each different type fed to &lt;code&gt;foo()&lt;/code&gt;. In this case this turns out to be (10 types implementing &lt;code&gt;Trait&lt;/code&gt;)*(3 types being fed to &lt;code&gt;foo()&lt;/code&gt;) = 30 implementations!</source>
          <target state="translated">&lt;code&gt;Trait&lt;/code&gt; のすべてのメソッドのすべての実装のテーブルを作成するだけでなく、 &lt;code&gt;foo()&lt;/code&gt; に供給される異なる型ごとにそのようなテーブルを作成する必要があります。この場合、これは（ &lt;code&gt;Trait&lt;/code&gt; を実装する10の型）*（ &lt;code&gt;foo()&lt;/code&gt; に供給される3の型）= 30の実装になります！</target>
        </trans-unit>
        <trans-unit id="7a128a92848713923bf5723a8f3ff04cf358a747" translate="yes" xml:space="preserve">
          <source>We end up with a different output:</source>
          <target state="translated">結局は違う出力になってしまいます。</target>
        </trans-unit>
        <trans-unit id="3d3bdc9538d2becbfd76f7b51c9431cf8009e000" translate="yes" xml:space="preserve">
          <source>We fill in the body of the &lt;code&gt;deref&lt;/code&gt; method with &lt;code&gt;&amp;amp;self.0&lt;/code&gt; so &lt;code&gt;deref&lt;/code&gt; returns a reference to the value we want to access with the &lt;code&gt;*&lt;/code&gt; operator. The &lt;code&gt;main&lt;/code&gt; function in Listing 15-9 that calls &lt;code&gt;*&lt;/code&gt; on the &lt;code&gt;MyBox&amp;lt;T&amp;gt;&lt;/code&gt; value now compiles, and the assertions pass!</source>
          <target state="translated">&lt;code&gt;deref&lt;/code&gt; メソッドの本体に &lt;code&gt;&amp;amp;self.0&lt;/code&gt; を入力するので、 &lt;code&gt;deref&lt;/code&gt; は &lt;code&gt;*&lt;/code&gt; 演算子でアクセスする値への参照を返します。 &lt;code&gt;main&lt;/code&gt; 通話ことリスト15-9で機能 &lt;code&gt;*&lt;/code&gt; 上の &lt;code&gt;MyBox&amp;lt;T&amp;gt;&lt;/code&gt; 値は、今コンパイルし、アサーションが合格！</target>
        </trans-unit>
        <trans-unit id="1a6e44b1c1cf0243b066c756c716999badd37ed6" translate="yes" xml:space="preserve">
          <source>We first covered traits in the &lt;a href=&quot;ch10-02-traits#traits-defining-shared-behavior&quot;&gt;&amp;ldquo;Traits: Defining Shared Behavior&amp;rdquo;&lt;/a&gt; section of Chapter 10, but as with lifetimes, we didn&amp;rsquo;t discuss the more advanced details. Now that you know more about Rust, we can get into the nitty-gritty.</source>
          <target state="translated">最初に、第10章の&lt;a href=&quot;ch10-02-traits#traits-defining-shared-behavior&quot;&gt;「特性：共有動作の定義」&lt;/a&gt;セクションで特性を取り上げましたが、ライフタイムと同様に、より高度な詳細については説明しませんでした。Rustの詳細を理解したところで、要点を説明します。</target>
        </trans-unit>
        <trans-unit id="f1ee78ca605c05c7a5c18ad3c92e24962b3e1d93" translate="yes" xml:space="preserve">
          <source>We fixed a number of small errors and imprecise wording throughout the book. Thank you to the readers who reported them!</source>
          <target state="translated">細かいミスや不正確な言い回しなどを随所に修正しました。それらを報告してくださった読者の皆様、ありがとうございました</target>
        </trans-unit>
        <trans-unit id="6dfcd8805f1de550cc498ea6159c7bf6b6fb1747" translate="yes" xml:space="preserve">
          <source>We get an &lt;code&gt;Ident&lt;/code&gt; struct instance containing the name (identifier) of the annotated type using &lt;code&gt;ast.ident&lt;/code&gt;. The struct in Listing 19-32 shows that when we run the &lt;code&gt;impl_hello_macro&lt;/code&gt; function on the code in Listing 19-30, the &lt;code&gt;ident&lt;/code&gt; we get will have the &lt;code&gt;ident&lt;/code&gt; field with a value of &lt;code&gt;&quot;Pancakes&quot;&lt;/code&gt;. Thus, the &lt;code&gt;name&lt;/code&gt; variable in Listing 19-33 will contain an &lt;code&gt;Ident&lt;/code&gt; struct instance that, when printed, will be the string &lt;code&gt;&quot;Pancakes&quot;&lt;/code&gt;, the name of the struct in Listing 19-30.</source>
          <target state="translated">&lt;code&gt;ast.ident&lt;/code&gt; を使用して、注釈付きタイプの名前（識別子）を含む &lt;code&gt;Ident&lt;/code&gt; 構造体インスタンスを取得します。私たちが実行したときという表の構造体19-32ショー &lt;code&gt;impl_hello_macro&lt;/code&gt; リスト19-30のコードの機能を、 &lt;code&gt;ident&lt;/code&gt; を我々が得るが持つ &lt;code&gt;ident&lt;/code&gt; の値を持つフィールド &lt;code&gt;&quot;Pancakes&quot;&lt;/code&gt; 。したがって、リスト19-33の &lt;code&gt;name&lt;/code&gt; 変数には、 &lt;code&gt;Ident&lt;/code&gt; 構造体インスタンスが含まれます。このインスタンスは、印刷されると、文字列 &lt;code&gt;&quot;Pancakes&quot;&lt;/code&gt; （リスト19-30の構造体の名前）になります。</target>
        </trans-unit>
        <trans-unit id="fa5a76e7eb4f80b2d90e24f7c2b1ad7e6ecb3a57" translate="yes" xml:space="preserve">
          <source>We get an error saying that &lt;code&gt;Display&lt;/code&gt; is required but not implemented:</source>
          <target state="translated">&lt;code&gt;Display&lt;/code&gt; は必須だが実装されていないというエラーが表示されます。</target>
        </trans-unit>
        <trans-unit id="7d2c8ffa5144563c1615375b324817ac18c0824c" translate="yes" xml:space="preserve">
          <source>We get an error:</source>
          <target state="translated">エラーが出ます。</target>
        </trans-unit>
        <trans-unit id="3ba89346d67718e5bc6cde49796722897eef8118" translate="yes" xml:space="preserve">
          <source>We get the index for the end of the word in the same way as we did in Listing 4-7, by looking for the first occurrence of a space. When we find a space, we return a string slice using the start of the string and the index of the space as the starting and ending indices.</source>
          <target state="translated">リスト4-7で行ったのと同じ方法で、スペースの最初の出現を探すことで単語の終わりのインデックスを取得します。スペースを見つけるとき、文字列の開始インデックスとスペースのインデックスを開始インデックスと終了インデックスとして使い、文字列のスライスを返します。</target>
        </trans-unit>
        <trans-unit id="ef6ac0d2fb1390b1ec4785e58118caa03d2717e4" translate="yes" xml:space="preserve">
          <source>We give &lt;code&gt;Post&lt;/code&gt; a public method named &lt;code&gt;request_review&lt;/code&gt; that will take a mutable reference to &lt;code&gt;self&lt;/code&gt;. Then we call an internal &lt;code&gt;request_review&lt;/code&gt; method on the current state of &lt;code&gt;Post&lt;/code&gt;, and this second &lt;code&gt;request_review&lt;/code&gt; method consumes the current state and returns a new state.</source>
          <target state="translated">私たちは与える &lt;code&gt;Post&lt;/code&gt; という名前のパブリックメソッド &lt;code&gt;request_review&lt;/code&gt; への変更可能な参照取る &lt;code&gt;self&lt;/code&gt; 。次に、 &lt;code&gt;Post&lt;/code&gt; の現在の状態で内部の &lt;code&gt;request_review&lt;/code&gt; メソッドを呼び出します。この2番目の &lt;code&gt;request_review&lt;/code&gt; メソッドは現在の状態を消費し、新しい状態を返します。</target>
        </trans-unit>
        <trans-unit id="e6c80fee7f3dde04888c77a6cd846415ab744177" translate="yes" xml:space="preserve">
          <source>We have a trait and its function. At this point, our crate user could implement the trait to achieve the desired functionality, like so:</source>
          <target state="translated">私たちには、特徴とその機能があります。この時点で、私たちのクレートユーザーは、以下のように、目的の機能を実現するために特徴を実装することができます。</target>
        </trans-unit>
        <trans-unit id="c17bca679d4e20c394f90f8fcfedbf4fbf9ebe88" translate="yes" xml:space="preserve">
          <source>We have another useful pattern that exploits an implementation detail of tuple structs and tuple-struct enum variants. These types use &lt;code&gt;()&lt;/code&gt; as initializer syntax, which looks like a function call. The initializers are actually implemented as functions returning an instance that&amp;rsquo;s constructed from their arguments. We can use these initializer functions as function pointers that implement the closure traits, which means we can specify the initializer functions as arguments for methods that take closures, like so:</source>
          <target state="translated">タプル構造体とタプル構造体列挙型バリアントの実装の詳細を利用する別の有用なパターンがあります。これらの型は、 &lt;code&gt;()&lt;/code&gt; を関数呼び出しのように見える初期化構文として使用します。初期化子は実際には、引数から構築されたインスタンスを返す関数として実装されています。これらの初期化関数を、クロージャーの特性を実装する関数ポインターとして使用できます。つまり、次のように、初期化関数を、クロージャーを受け取るメソッドの引数として指定できます。</target>
        </trans-unit>
        <trans-unit id="7bd65f3ffc2c662fc4446b91a67d9e1b143c07d7" translate="yes" xml:space="preserve">
          <source>We have most of the game working now, but the user can make only one guess. Let&amp;rsquo;s change that by adding a loop!</source>
          <target state="translated">ゲームのほとんどは現在動作していますが、ユーザーが推測できるのは1つだけです。ループを追加して変更しましょう！</target>
        </trans-unit>
        <trans-unit id="3aa84427fb5c8531cf1e35659e181c7888c45db6" translate="yes" xml:space="preserve">
          <source>We have two structs, &lt;code&gt;Millimeters&lt;/code&gt; and &lt;code&gt;Meters&lt;/code&gt;, holding values in different units. We want to add values in millimeters to values in meters and have the implementation of &lt;code&gt;Add&lt;/code&gt; do the conversion correctly. We can implement &lt;code&gt;Add&lt;/code&gt; for &lt;code&gt;Millimeters&lt;/code&gt; with &lt;code&gt;Meters&lt;/code&gt; as the &lt;code&gt;RHS&lt;/code&gt;, as shown in Listing 19-15.</source>
          <target state="translated">2つの構造体 &lt;code&gt;Millimeters&lt;/code&gt; と &lt;code&gt;Meters&lt;/code&gt; があり、異なる単位で値を保持しています。ミリメートル単位の値とメートル単位の値を &lt;code&gt;Add&lt;/code&gt; し、Addの実装に変換を正しく実行させます。リスト19-15で示されているように、 &lt;code&gt;Add&lt;/code&gt; for &lt;code&gt;Millimeters&lt;/code&gt; with &lt;code&gt;Meters&lt;/code&gt; を &lt;code&gt;RHS&lt;/code&gt; として実装できます。</target>
        </trans-unit>
        <trans-unit id="d8a3dea7c52bc3f0b1a5887645fbfc3ac18bf504" translate="yes" xml:space="preserve">
          <source>We have two structs, &lt;code&gt;Millimeters&lt;/code&gt; and &lt;code&gt;Meters&lt;/code&gt;, holding values in different units. We want to add values in millimeters to values in meters and have the implementation of &lt;code&gt;Add&lt;/code&gt; do the conversion correctly. We can implement &lt;code&gt;Add&lt;/code&gt; for &lt;code&gt;Millimeters&lt;/code&gt; with &lt;code&gt;Meters&lt;/code&gt; as the &lt;code&gt;Rhs&lt;/code&gt;, as shown in Listing 19-15.</source>
          <target state="translated">We have two structs, &lt;code&gt;Millimeters&lt;/code&gt; and &lt;code&gt;Meters&lt;/code&gt; , holding values in different units. We want to add values in millimeters to values in meters and have the implementation of &lt;code&gt;Add&lt;/code&gt; do the conversion correctly. We can implement &lt;code&gt;Add&lt;/code&gt; for &lt;code&gt;Millimeters&lt;/code&gt; with &lt;code&gt;Meters&lt;/code&gt; as the &lt;code&gt;Rhs&lt;/code&gt; , as shown in Listing 19-15.</target>
        </trans-unit>
        <trans-unit id="160ceff2ab6cdd2b56a8bbd9402294ab3fbd2021" translate="yes" xml:space="preserve">
          <source>We have written an &lt;a href=&quot;https://rust-lang.github.io/async-book/&quot;&gt;async book&lt;/a&gt; detailing async/await and trade-offs compared to using threads.</source>
          <target state="translated">We have written an &lt;a href=&quot;https://rust-lang.github.io/async-book/&quot;&gt;async book&lt;/a&gt; detailing async/await and trade-offs compared to using threads.</target>
        </trans-unit>
        <trans-unit id="0334dcbe551a168678883cc6ef5072f1b77f711d" translate="yes" xml:space="preserve">
          <source>We hinted that this example wouldn&amp;rsquo;t compile. Now let&amp;rsquo;s find out why!</source>
          <target state="translated">この例ではコンパイルできないことをほのめかしました。それでは、理由を調べてみましょう！</target>
        </trans-unit>
        <trans-unit id="1c19907344e59dccc89eee30d7cddf54b21dbd0f" translate="yes" xml:space="preserve">
          <source>We implemented the &lt;code&gt;Iterator&lt;/code&gt; trait by defining the &lt;code&gt;next&lt;/code&gt; method, so we can now use any &lt;code&gt;Iterator&lt;/code&gt; trait method&amp;rsquo;s default implementations as defined in the standard library, because they all use the &lt;code&gt;next&lt;/code&gt; method&amp;rsquo;s functionality.</source>
          <target state="translated">&lt;code&gt;next&lt;/code&gt; メソッドを定義して &lt;code&gt;Iterator&lt;/code&gt; トレイトを実装しました。すべてが &lt;code&gt;next&lt;/code&gt; メソッドの機能を使用するため、標準ライブラリで定義されている任意の &lt;code&gt;Iterator&lt;/code&gt; トレイトメソッドのデフォルト実装を使用できます。</target>
        </trans-unit>
        <trans-unit id="0d4561449955c45ad5ebb7f1cf5ff9bb22096f4e" translate="yes" xml:space="preserve">
          <source>We just built a project with &lt;code&gt;cargo build&lt;/code&gt; and ran it with &lt;code&gt;./target/debug/hello_cargo&lt;/code&gt;, but we can also use &lt;code&gt;cargo run&lt;/code&gt; to compile the code and then run the resulting executable all in one command:</source>
          <target state="translated">&lt;code&gt;cargo build&lt;/code&gt; プロジェクトをビルドして &lt;code&gt;./target/debug/hello_cargo&lt;/code&gt; で &lt;code&gt;cargo run&lt;/code&gt; しただけですが、貨物実行を使用してコードをコンパイルし、結果の実行可能ファイルをすべて1つのコマンドで実行することもできます。</target>
        </trans-unit>
        <trans-unit id="a56bd0b36b29e10cce98f9d35be1f611e5d93adf" translate="yes" xml:space="preserve">
          <source>We keep the assertion that the &lt;code&gt;mid&lt;/code&gt; index is within the slice. Then we get to the unsafe code: the &lt;code&gt;slice::from_raw_parts_mut&lt;/code&gt; function takes a raw pointer and a length, and it creates a slice. We use this function to create a slice that starts from &lt;code&gt;ptr&lt;/code&gt; and is &lt;code&gt;mid&lt;/code&gt; items long. Then we call the &lt;code&gt;add&lt;/code&gt; method on &lt;code&gt;ptr&lt;/code&gt; with &lt;code&gt;mid&lt;/code&gt; as an argument to get a raw pointer that starts at &lt;code&gt;mid&lt;/code&gt;, and we create a slice using that pointer and the remaining number of items after &lt;code&gt;mid&lt;/code&gt; as the length.</source>
          <target state="translated">We keep the assertion that the &lt;code&gt;mid&lt;/code&gt; index is within the slice. Then we get to the unsafe code: the &lt;code&gt;slice::from_raw_parts_mut&lt;/code&gt; function takes a raw pointer and a length, and it creates a slice. We use this function to create a slice that starts from &lt;code&gt;ptr&lt;/code&gt; and is &lt;code&gt;mid&lt;/code&gt; items long. Then we call the &lt;code&gt;add&lt;/code&gt; method on &lt;code&gt;ptr&lt;/code&gt; with &lt;code&gt;mid&lt;/code&gt; as an argument to get a raw pointer that starts at &lt;code&gt;mid&lt;/code&gt; , and we create a slice using that pointer and the remaining number of items after &lt;code&gt;mid&lt;/code&gt; as the length.</target>
        </trans-unit>
        <trans-unit id="87ae298deaf2e1fd72117ae5b5eb4b47977e9b52" translate="yes" xml:space="preserve">
          <source>We keep the assertion that the &lt;code&gt;mid&lt;/code&gt; index is within the slice. Then we get to the unsafe code: the &lt;code&gt;slice::from_raw_parts_mut&lt;/code&gt; function takes a raw pointer and a length, and it creates a slice. We use this function to create a slice that starts from &lt;code&gt;ptr&lt;/code&gt; and is &lt;code&gt;mid&lt;/code&gt; items long. Then we call the &lt;code&gt;offset&lt;/code&gt; method on &lt;code&gt;ptr&lt;/code&gt; with &lt;code&gt;mid&lt;/code&gt; as an argument to get a raw pointer that starts at &lt;code&gt;mid&lt;/code&gt;, and we create a slice using that pointer and the remaining number of items after &lt;code&gt;mid&lt;/code&gt; as the length.</source>
          <target state="translated">&lt;code&gt;mid&lt;/code&gt; インデックスがスライス内にあるという主張を維持します。次に、安全でないコードを取得し &lt;code&gt;slice::from_raw_parts_mut&lt;/code&gt; 関数は、生のポインターと長さを受け取り、スライスを作成します。私たちは、から始まり、スライス作成するには、この機能を使用する &lt;code&gt;ptr&lt;/code&gt; とある &lt;code&gt;mid&lt;/code&gt; 長い項目を。その後、我々は呼んで &lt;code&gt;offset&lt;/code&gt; の方法 &lt;code&gt;ptr&lt;/code&gt; して &lt;code&gt;mid&lt;/code&gt; から開始することを生のポインタを取得するために、引数として &lt;code&gt;mid&lt;/code&gt; 、私たちはそのポインタを使用してスライスし、後のアイテムの残り数作成 &lt;code&gt;mid&lt;/code&gt; の長さなどを。</target>
        </trans-unit>
        <trans-unit id="240382aa15b940fb356b9ed46bfb7832514ebd3d" translate="yes" xml:space="preserve">
          <source>We know we want to define a method, so it will be within the &lt;code&gt;impl Rectangle&lt;/code&gt; block. The method name will be &lt;code&gt;can_hold&lt;/code&gt;, and it will take an immutable borrow of another &lt;code&gt;Rectangle&lt;/code&gt; as a parameter. We can tell what the type of the parameter will be by looking at the code that calls the method: &lt;code&gt;rect1.can_hold(&amp;amp;rect2)&lt;/code&gt; passes in &lt;code&gt;&amp;amp;rect2&lt;/code&gt;, which is an immutable borrow to &lt;code&gt;rect2&lt;/code&gt;, an instance of &lt;code&gt;Rectangle&lt;/code&gt;. This makes sense because we only need to read &lt;code&gt;rect2&lt;/code&gt; (rather than write, which would mean we&amp;rsquo;d need a mutable borrow), and we want &lt;code&gt;main&lt;/code&gt; to retain ownership of &lt;code&gt;rect2&lt;/code&gt; so we can use it again after calling the &lt;code&gt;can_hold&lt;/code&gt; method. The return value of &lt;code&gt;can_hold&lt;/code&gt; will be a Boolean, and the implementation will check whether the width and height of &lt;code&gt;self&lt;/code&gt; are both greater than the width and height of the other &lt;code&gt;Rectangle&lt;/code&gt;, respectively. Let&amp;rsquo;s add the new &lt;code&gt;can_hold&lt;/code&gt; method to the &lt;code&gt;impl&lt;/code&gt; block from Listing 5-13, shown in Listing 5-15.</source>
          <target state="translated">メソッドを定義したいので、それは &lt;code&gt;impl Rectangle&lt;/code&gt; ブロック内にあります。メソッド名は &lt;code&gt;can_hold&lt;/code&gt; になり、パラメーターとして別の &lt;code&gt;Rectangle&lt;/code&gt; の不変の借用が行われます。メソッドを呼び出すコードを確認することで、パラメーターのタイプを確認できます &lt;code&gt;rect1.can_hold(&amp;amp;rect2)&lt;/code&gt; は &lt;code&gt;&amp;amp;rect2&lt;/code&gt; に渡されます。これは、 &lt;code&gt;Rectangle&lt;/code&gt; のインスタンスである &lt;code&gt;rect2&lt;/code&gt; への不変の借用です。これは、 &lt;code&gt;rect2&lt;/code&gt; のみを読み取る必要があるため（書き込みではなく、変更可能な借用が必要になることを意味します）、 &lt;code&gt;main&lt;/code&gt; に &lt;code&gt;rect2&lt;/code&gt; の所有権を保持させたいため、理にかなっています。そのため、 &lt;code&gt;can_hold&lt;/code&gt; メソッドを呼び出した後で再び使用できます。 &lt;code&gt;can_hold&lt;/code&gt; の戻り値はブール値になり、実装は &lt;code&gt;self&lt;/code&gt; 幅と高さの両方が、それぞれ他の &lt;code&gt;Rectangle&lt;/code&gt; の幅と高さより大きいかどうかを確認します。リスト5-15に示すように、リスト5-13の &lt;code&gt;impl&lt;/code&gt; ブロックに新しい &lt;code&gt;can_hold&lt;/code&gt; メソッドを追加しましょう。</target>
        </trans-unit>
        <trans-unit id="09720690261d856f42ba9e119c7bca4126dc617c" translate="yes" xml:space="preserve">
          <source>We leave the &lt;code&gt;list&lt;/code&gt; and &lt;code&gt;average&lt;/code&gt; fields private so there is no way for external code to add or remove items to the &lt;code&gt;list&lt;/code&gt; field directly; otherwise, the &lt;code&gt;average&lt;/code&gt; field might become out of sync when the &lt;code&gt;list&lt;/code&gt; changes. The &lt;code&gt;average&lt;/code&gt; method returns the value in the &lt;code&gt;average&lt;/code&gt; field, allowing external code to read the &lt;code&gt;average&lt;/code&gt; but not modify it.</source>
          <target state="translated">私たちは、去る &lt;code&gt;list&lt;/code&gt; と &lt;code&gt;average&lt;/code&gt; 外部コードがに項目を追加または削除する方法がないので、プライベートなフィールドを &lt;code&gt;list&lt;/code&gt; に直接フィールドは、そうしないと、 &lt;code&gt;list&lt;/code&gt; が変更されたときに &lt;code&gt;average&lt;/code&gt; フィールドが同期しなくなる可能性があります。 &lt;code&gt;average&lt;/code&gt; 方法は、の値を返す &lt;code&gt;average&lt;/code&gt; 外部コードを読み取ることができるように、フィールド &lt;code&gt;average&lt;/code&gt; ではなく、それを修正します。</target>
        </trans-unit>
        <trans-unit id="28901e7633295a79506b9862e703f0c9ec5149e8" translate="yes" xml:space="preserve">
          <source>We left a comment in the &lt;code&gt;for&lt;/code&gt; loop in Listing 20-14 regarding the creation of threads. Here, we&amp;rsquo;ll look at how we actually create threads. The standard library provides &lt;code&gt;thread::spawn&lt;/code&gt; as a way to create threads, and &lt;code&gt;thread::spawn&lt;/code&gt; expects to get some code the thread should run as soon as the thread is created. However, in our case, we want to create the threads and have them &lt;em&gt;wait&lt;/em&gt; for code that we&amp;rsquo;ll send later. The standard library&amp;rsquo;s implementation of threads doesn&amp;rsquo;t include any way to do that; we have to implement it manually.</source>
          <target state="translated">スレッドの作成に関して、リスト20-14の &lt;code&gt;for&lt;/code&gt; ループにコメントを残しました。ここでは、実際にスレッドを作成する方法を見ていきます。標準ライブラリは、 &lt;code&gt;thread::spawn&lt;/code&gt; を作成する方法としてthread :: spawnを提供しており、 &lt;code&gt;thread::spawn&lt;/code&gt; は、スレッドが作成されるとすぐにスレッドが実行する必要があるコードを取得することを期待しています。ただし、この例では、スレッドを作成し、後で送信するコードを&lt;em&gt;待つ&lt;/em&gt;ようにします。標準ライブラリのスレッドの実装には、それを行う方法は含まれていません。手動で実装する必要があります。</target>
        </trans-unit>
        <trans-unit id="e917b5faacb8108bac1660ec1b4c362d8a292e12" translate="yes" xml:space="preserve">
          <source>We list the &lt;code&gt;x&lt;/code&gt; value and then just include the &lt;code&gt;..&lt;/code&gt; pattern. This is quicker than having to list &lt;code&gt;y: _&lt;/code&gt; and &lt;code&gt;z: _&lt;/code&gt;, particularly when we&amp;rsquo;re working with structs that have lots of fields in situations where only one or two fields are relevant.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; 値をリストしてから、 &lt;code&gt;..&lt;/code&gt; パターンだけを含めます。これは、特に関連するフィールドが1つまたは2つしかない状況で、フィールドが多数ある構造体で作業している場合に、 &lt;code&gt;y: _&lt;/code&gt; および &lt;code&gt;z: _&lt;/code&gt; をリストする必要があるよりも高速です。</target>
        </trans-unit>
        <trans-unit id="1649278ad2d9cbd95d5bb9721993ae2f4d897594" translate="yes" xml:space="preserve">
          <source>We make two threads and change the variable names used with the second thread to &lt;code&gt;handle2&lt;/code&gt; and &lt;code&gt;num2&lt;/code&gt;. When we run the code this time, compiling gives us the following:</source>
          <target state="translated">2つのスレッドを作成し、2番目のスレッドで使用される変数名を &lt;code&gt;handle2&lt;/code&gt; および &lt;code&gt;num2&lt;/code&gt; に変更します。今回コードを実行すると、コンパイルによって次のようになります。</target>
        </trans-unit>
        <trans-unit id="488b1d1d555af27ea61cdda89514b2dfd138dd29" translate="yes" xml:space="preserve">
          <source>We may want to write bytes to a &lt;a href=&quot;../fs/struct.file&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt; in our production code, but use an in-memory buffer in our tests. We can do this with &lt;code&gt;Cursor&lt;/code&gt;:</source>
          <target state="translated">プロダクションコードでは&lt;a href=&quot;../fs/struct.file&quot;&gt; &lt;code&gt;File&lt;/code&gt; &lt;/a&gt;にバイトを書き込むことができますが、テストではメモリ内バッファを使用します。 &lt;code&gt;Cursor&lt;/code&gt; でこれを行うことができます：</target>
        </trans-unit>
        <trans-unit id="42f5297aad6a8bcbbe769864f90a8b8abdf120a8" translate="yes" xml:space="preserve">
          <source>We modify &lt;code&gt;a&lt;/code&gt; so it points to &lt;code&gt;b&lt;/code&gt; instead of &lt;code&gt;Nil&lt;/code&gt;, creating a cycle. We do that by using the &lt;code&gt;tail&lt;/code&gt; method to get a reference to the &lt;code&gt;RefCell&amp;lt;Rc&amp;lt;List&amp;gt;&amp;gt;&lt;/code&gt; in &lt;code&gt;a&lt;/code&gt;, which we put in the variable &lt;code&gt;link&lt;/code&gt;. Then we use the &lt;code&gt;borrow_mut&lt;/code&gt; method on the &lt;code&gt;RefCell&amp;lt;Rc&amp;lt;List&amp;gt;&amp;gt;&lt;/code&gt; to change the value inside from an &lt;code&gt;Rc&amp;lt;List&amp;gt;&lt;/code&gt; that holds a &lt;code&gt;Nil&lt;/code&gt; value to the &lt;code&gt;Rc&amp;lt;List&amp;gt;&lt;/code&gt; in &lt;code&gt;b&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Nil&lt;/code&gt; 代わりに &lt;code&gt;b&lt;/code&gt; を指すようにaを変更 &lt;code&gt;a&lt;/code&gt; 、サイクルを作成します。私たちは、使用していることを行う &lt;code&gt;tail&lt;/code&gt; への参照を取得する方法を &lt;code&gt;RefCell&amp;lt;Rc&amp;lt;List&amp;gt;&amp;gt;&lt;/code&gt; で、我々は変数に入れて、 &lt;code&gt;link&lt;/code&gt; 。その後、我々は使用 &lt;code&gt;borrow_mut&lt;/code&gt; の上の方法 &lt;code&gt;RefCell&amp;lt;Rc&amp;lt;List&amp;gt;&amp;gt;&lt;/code&gt; から値の内部を変更する &lt;code&gt;Rc&amp;lt;List&amp;gt;&lt;/code&gt; 保持 &lt;code&gt;Nil&lt;/code&gt; に値を &lt;code&gt;Rc&amp;lt;List&amp;gt;&lt;/code&gt; に &lt;code&gt;b&lt;/code&gt; 。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a5a434a5fbccadae9667d94aa729d1d78f20bd90" translate="yes" xml:space="preserve">
          <source>We must call the &lt;code&gt;dangerous&lt;/code&gt; function within a separate &lt;code&gt;unsafe&lt;/code&gt; block. If we try to call &lt;code&gt;dangerous&lt;/code&gt; without the &lt;code&gt;unsafe&lt;/code&gt; block, we&amp;rsquo;ll get an error:</source>
          <target state="translated">別の &lt;code&gt;unsafe&lt;/code&gt; ブロック内で &lt;code&gt;dangerous&lt;/code&gt; 関数を呼び出す必要があります。 &lt;code&gt;unsafe&lt;/code&gt; ブロックなしで &lt;code&gt;dangerous&lt;/code&gt; を呼び出そうとすると、エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="4fb4c5141c4cfa6ea474c70142cc893715e15a85" translate="yes" xml:space="preserve">
          <source>We need a mock object that, instead of sending an email or text message when we call &lt;code&gt;send&lt;/code&gt;, will only keep track of the messages it&amp;rsquo;s told to send. We can create a new instance of the mock object, create a &lt;code&gt;LimitTracker&lt;/code&gt; that uses the mock object, call the &lt;code&gt;set_value&lt;/code&gt; method on &lt;code&gt;LimitTracker&lt;/code&gt;, and then check that the mock object has the messages we expect. Listing 15-21 shows an attempt to implement a mock object to do just that, but the borrow checker won&amp;rsquo;t allow it:</source>
          <target state="translated">&lt;code&gt;send&lt;/code&gt; を呼び出すときに電子メールまたはテキストメッセージを送信する代わりに、送信するように指示されたメッセージのみを追跡するモックオブジェクトが必要です。モックオブジェクトの新しいインスタンスを作成し、モックオブジェクトを使用する &lt;code&gt;LimitTracker&lt;/code&gt; を作成し、LimitTrackerで &lt;code&gt;set_value&lt;/code&gt; メソッドを呼び出して、モックオブジェクトに &lt;code&gt;LimitTracker&lt;/code&gt; たメッセージがあることを確認できます。リスト15-21はそれを行うためにモックオブジェクトを実装する試みを示していますが、ボローチェッカーはそれを許可していません：</target>
        </trans-unit>
        <trans-unit id="a110963ca04d0182f8c4f733a600767ec4a8c414" translate="yes" xml:space="preserve">
          <source>We need a way of returning this memory to the allocator when we&amp;rsquo;re done with our &lt;code&gt;String&lt;/code&gt;.</source>
          <target state="translated">We need a way of returning this memory to the allocator when we&amp;rsquo;re done with our &lt;code&gt;String&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7bb260a7277d45c34609007ac1f57ba6424e3b7d" translate="yes" xml:space="preserve">
          <source>We need a way of returning this memory to the operating system when we&amp;rsquo;re done with our &lt;code&gt;String&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; を使い終わったら、このメモリをオペレーティングシステムに返す方法が必要です。</target>
        </trans-unit>
        <trans-unit id="20e2cb940baac98dfff4c0ce471d1304226840b2" translate="yes" xml:space="preserve">
          <source>We need to add a &lt;code&gt;use&lt;/code&gt; statement to bring &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; into scope because it&amp;rsquo;s not in the prelude. In &lt;code&gt;main&lt;/code&gt;, we create the list holding 5 and 10 and store it in a new &lt;code&gt;Rc&amp;lt;List&amp;gt;&lt;/code&gt; in &lt;code&gt;a&lt;/code&gt;. Then when we create &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;c&lt;/code&gt;, we call the &lt;code&gt;Rc::clone&lt;/code&gt; function and pass a reference to the &lt;code&gt;Rc&amp;lt;List&amp;gt;&lt;/code&gt; in &lt;code&gt;a&lt;/code&gt; as an argument.</source>
          <target state="translated">&lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; はプレリュードに含まれていないため、スコープに含めるには、 &lt;code&gt;use&lt;/code&gt; ステートメントを追加する必要があります。では &lt;code&gt;main&lt;/code&gt; 、我々は5と10を保持するリストを作成し、新しいに保管 &lt;code&gt;Rc&amp;lt;List&amp;gt;&lt;/code&gt; に。私たちが作成するときに &lt;code&gt;b&lt;/code&gt; と &lt;code&gt;c&lt;/code&gt; 、我々は呼んで &lt;code&gt;Rc::clone&lt;/code&gt; 機能をとへの参照渡し &lt;code&gt;Rc&amp;lt;List&amp;gt;&lt;/code&gt; に引数として。 &lt;code&gt;a&lt;/code&gt; &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="20a230dc482759cbcb024d662f9a4b5ff8cb7a21" translate="yes" xml:space="preserve">
          <source>We need to add to the code in Listing 9-3 to take different actions depending on the value &lt;code&gt;File::open&lt;/code&gt; returns. Listing 9-4 shows one way to handle the &lt;code&gt;Result&lt;/code&gt; using a basic tool, the &lt;code&gt;match&lt;/code&gt; expression that we discussed in Chapter 6.</source>
          <target state="translated">リスト9-3のコードに追加して、 &lt;code&gt;File::open&lt;/code&gt; が返す値に応じて異なるアクションを実行する必要があります。リスト9-4は、基本的なツール、第6章で説明した &lt;code&gt;match&lt;/code&gt; 式を使用して &lt;code&gt;Result&lt;/code&gt; を処理する1つの方法を示しています。</target>
        </trans-unit>
        <trans-unit id="1a52300a363f54affc64d905b97b32aef73e0083" translate="yes" xml:space="preserve">
          <source>We need to adjust the channel to use values of type &lt;code&gt;Message&lt;/code&gt; rather than type &lt;code&gt;Job&lt;/code&gt;, as shown in Listing 20-23.</source>
          <target state="translated">We need to adjust the channel to use values of type &lt;code&gt;Message&lt;/code&gt; rather than type &lt;code&gt;Job&lt;/code&gt; , as shown in Listing 20-23.</target>
        </trans-unit>
        <trans-unit id="9771dc4bdc41f5521988ffa4bcbf0d3c0f959de9" translate="yes" xml:space="preserve">
          <source>We need to adjust the channel to use values of type &lt;code&gt;Message&lt;/code&gt; rather than type &lt;code&gt;Job&lt;/code&gt;, as shown in Listing 20-24.</source>
          <target state="translated">リスト20-24で示されるように、タイプ &lt;code&gt;Job&lt;/code&gt; ではなく &lt;code&gt;Message&lt;/code&gt; タイプの値を使用するようにチャンネルを調整する必要があります。</target>
        </trans-unit>
        <trans-unit id="9fe42f06f6df7ac68de2d948fcbea1a3d7286a3b" translate="yes" xml:space="preserve">
          <source>We need to declare the &lt;code&gt;hello_macro_derive&lt;/code&gt; crate as a procedural macro crate. We&amp;rsquo;ll also need functionality from the &lt;code&gt;syn&lt;/code&gt; and &lt;code&gt;quote&lt;/code&gt; crates, as you&amp;rsquo;ll see in a moment, so we need to add them as dependencies. Add the following to the &lt;em&gt;Cargo.toml&lt;/em&gt; file for &lt;code&gt;hello_macro_derive&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;hello_macro_derive&lt;/code&gt; クレートを手続き型マクロクレートとして宣言する必要があります。すぐにわかるように、 &lt;code&gt;syn&lt;/code&gt; および &lt;code&gt;quote&lt;/code&gt; クレートの機能も必要になるため、依存関係として追加する必要があります。以下を追加&lt;em&gt;Cargo.tomlの&lt;/em&gt;ためのファイル &lt;code&gt;hello_macro_derive&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="d463764f5c2df75db583b72e63eacc4531621bf0" translate="yes" xml:space="preserve">
          <source>We need to set &lt;code&gt;state&lt;/code&gt; to &lt;code&gt;None&lt;/code&gt; temporarily rather than setting it directly with code like &lt;code&gt;self.state = self.state.request_review();&lt;/code&gt; to get ownership of the &lt;code&gt;state&lt;/code&gt; value. This ensures &lt;code&gt;Post&lt;/code&gt; can&amp;rsquo;t use the old &lt;code&gt;state&lt;/code&gt; value after we&amp;rsquo;ve transformed it into a new state.</source>
          <target state="translated">&lt;code&gt;self.state = self.state.request_review();&lt;/code&gt; ようなコードで直接設定するのではなく、一時的に &lt;code&gt;state&lt;/code&gt; を &lt;code&gt;None&lt;/code&gt; に設定する必要があります。 &lt;code&gt;state&lt;/code&gt; 値の所有権を取得します。これにより、新しい状態に変換した後、 &lt;code&gt;Post&lt;/code&gt; が古い &lt;code&gt;state&lt;/code&gt; 値を使用できなくなります。</target>
        </trans-unit>
        <trans-unit id="7bc24d658a32bb0bbfec91b13ffff10ee769ddc2" translate="yes" xml:space="preserve">
          <source>We needed &lt;code&gt;clone&lt;/code&gt; here because we have a slice with &lt;code&gt;String&lt;/code&gt; elements in the parameter &lt;code&gt;args&lt;/code&gt;, but the &lt;code&gt;new&lt;/code&gt; function doesn&amp;rsquo;t own &lt;code&gt;args&lt;/code&gt;. To return ownership of a &lt;code&gt;Config&lt;/code&gt; instance, we had to clone the values from the &lt;code&gt;query&lt;/code&gt; and &lt;code&gt;filename&lt;/code&gt; fields of &lt;code&gt;Config&lt;/code&gt; so the &lt;code&gt;Config&lt;/code&gt; instance can own its values.</source>
          <target state="translated">パラメータ &lt;code&gt;args&lt;/code&gt; に &lt;code&gt;String&lt;/code&gt; 要素を含むスライスがあるため、ここで &lt;code&gt;clone&lt;/code&gt; 必要でしたが、 &lt;code&gt;new&lt;/code&gt; 関数は &lt;code&gt;args&lt;/code&gt; を所有していません。リターン所有権に &lt;code&gt;Config&lt;/code&gt; インスタンス、我々はから値のクローンを作成しなければならなかった &lt;code&gt;query&lt;/code&gt; と &lt;code&gt;filename&lt;/code&gt; のフィールド &lt;code&gt;Config&lt;/code&gt; よう &lt;code&gt;Config&lt;/code&gt; インスタンスは、その値を所有することができます。</target>
        </trans-unit>
        <trans-unit id="a43e27dbd35abeb15b38b9262e2f49308a9d38c7" translate="yes" xml:space="preserve">
          <source>We now have a straightforward API that&amp;rsquo;s much harder to mess up, because the compiler will ensure the references into the &lt;code&gt;String&lt;/code&gt; remain valid. Remember the bug in the program in Listing 4-8, when we got the index to the end of the first word but then cleared the string so our index was invalid? That code was logically incorrect but didn&amp;rsquo;t show any immediate errors. The problems would show up later if we kept trying to use the first word index with an emptied string. Slices make this bug impossible and let us know we have a problem with our code much sooner. Using the slice version of &lt;code&gt;first_word&lt;/code&gt; will throw a compile-time error:</source>
          <target state="translated">コンパイラーは &lt;code&gt;String&lt;/code&gt; への参照が有効なままであることを保証するため、ごちゃごちゃするのがはるかに難しい単純なAPIができました。リスト4-8のプログラムのバグを思い出してください。最初の単語の終わりまでインデックスを取得しましたが、文字列をクリアしたため、インデックスが無効になりましたか？そのコードは論理的に正しくありませんでしたが、即時のエラーは表示されませんでした。空の文字列で最初の単語のインデックスを使用しようとすると、後で問題が発生します。スライスはこのバグを不可能にし、コードに問題が発生したことを早く通知します。 &lt;code&gt;first_word&lt;/code&gt; のスライスバージョンを使用すると、コンパイル時エラーがスローされます。</target>
        </trans-unit>
        <trans-unit id="c7a58a3bc34ccbe75e8ddbc8d069a47ead8d2749" translate="yes" xml:space="preserve">
          <source>We now have a way to find out the index of the end of the first word in the string, but there&amp;rsquo;s a problem. We&amp;rsquo;re returning a &lt;code&gt;usize&lt;/code&gt; on its own, but it&amp;rsquo;s only a meaningful number in the context of the &lt;code&gt;&amp;amp;String&lt;/code&gt;. In other words, because it&amp;rsquo;s a separate value from the &lt;code&gt;String&lt;/code&gt;, there&amp;rsquo;s no guarantee that it will still be valid in the future. Consider the program in Listing 4-8 that uses the &lt;code&gt;first_word&lt;/code&gt; function from Listing 4-7.</source>
          <target state="translated">これで、文字列の最初の単語の終わりのインデックスを見つける方法ができましたが、問題があります。私たちはそれ自体で &lt;code&gt;usize&lt;/code&gt; を返しますが、これは &lt;code&gt;&amp;amp;String&lt;/code&gt; のコンテキストでは意味のある数字にすぎません。つまり、これは &lt;code&gt;String&lt;/code&gt; とは別の値であるため、将来も引き続き有効である保証はありません。リスト4-7の &lt;code&gt;first_word&lt;/code&gt; 関数を使用するリスト4-8のプログラムを考えてみます。</target>
        </trans-unit>
        <trans-unit id="7c5216021536b3c08541f1af93af0172517e8ef7" translate="yes" xml:space="preserve">
          <source>We now need our &lt;code&gt;Job&lt;/code&gt; type alias to be a &lt;code&gt;Box&lt;/code&gt; of anything that implements our new trait &lt;code&gt;FnBox&lt;/code&gt;. This will allow us to use &lt;code&gt;call_box&lt;/code&gt; in &lt;code&gt;Worker&lt;/code&gt; when we get a &lt;code&gt;Job&lt;/code&gt; value instead of invoking the closure directly. Implementing the &lt;code&gt;FnBox&lt;/code&gt; trait for any &lt;code&gt;FnOnce()&lt;/code&gt; closure means we don&amp;rsquo;t have to change anything about the actual values we&amp;rsquo;re sending down the channel. Now Rust is able to recognize that what we want to do is fine.</source>
          <target state="translated">ここで、新しいトレイト &lt;code&gt;FnBox&lt;/code&gt; を実装するあらゆるものの &lt;code&gt;Box&lt;/code&gt; である &lt;code&gt;Job&lt;/code&gt; タイプエイリアスが必要です。これにより、クロージャーを直接呼び出すのではなく、 &lt;code&gt;Job&lt;/code&gt; 値を取得するときに &lt;code&gt;Worker&lt;/code&gt; で &lt;code&gt;call_box&lt;/code&gt; を使用できるようになります。 &lt;code&gt;FnOnce()&lt;/code&gt; クロージャーに &lt;code&gt;FnBox&lt;/code&gt; トレイトを実装することは、チャネルに送信する実際の値について何も変更する必要がないことを意味します。これで、Rustは、実行したいことは問題ないことを認識できます。</target>
        </trans-unit>
        <trans-unit id="8583c35b022bb0426f8e6796265e5ae06507a412" translate="yes" xml:space="preserve">
          <source>We pass the value in the &lt;code&gt;case_sensitive&lt;/code&gt; variable to the &lt;code&gt;Config&lt;/code&gt; instance so the &lt;code&gt;run&lt;/code&gt; function can read that value and decide whether to call &lt;code&gt;search&lt;/code&gt; or &lt;code&gt;search_case_insensitive&lt;/code&gt;, as we implemented in Listing 12-22.</source>
          <target state="translated">リスト12-22で実装したように、 &lt;code&gt;case_sensitive&lt;/code&gt; 変数の値を &lt;code&gt;Config&lt;/code&gt; インスタンスに渡して、 &lt;code&gt;run&lt;/code&gt; 関数がその値を読み取り、 &lt;code&gt;search&lt;/code&gt; と &lt;code&gt;search_case_insensitive&lt;/code&gt; のどちらを呼び出すかを決定できるようにします。</target>
        </trans-unit>
        <trans-unit id="278796f5b8837b7d0f28d68d910bc02fc27c0a6a" translate="yes" xml:space="preserve">
          <source>We place the &lt;code&gt;#[should_panic]&lt;/code&gt; attribute after the &lt;code&gt;#[test]&lt;/code&gt; attribute and before the test function it applies to. Let&amp;rsquo;s look at the result when this test passes:</source>
          <target state="translated">我々は置く &lt;code&gt;#[should_panic]&lt;/code&gt; 後に属性を &lt;code&gt;#[test]&lt;/code&gt; 属性と、それが適用されるテスト関数の前に。このテストに合格したときの結果を見てみましょう。</target>
        </trans-unit>
        <trans-unit id="2bba2aa85955f56b33ac81b32d1e3abad3ce51a8" translate="yes" xml:space="preserve">
          <source>We ran a benchmark by loading the entire contents of &lt;em&gt;The Adventures of Sherlock Holmes&lt;/em&gt; by Sir Arthur Conan Doyle into a &lt;code&gt;String&lt;/code&gt; and looking for the word &lt;em&gt;the&lt;/em&gt; in the contents. Here are the results of the benchmark on the version of &lt;code&gt;search&lt;/code&gt; using the &lt;code&gt;for&lt;/code&gt; loop and the version using iterators:</source>
          <target state="translated">私たちは、アーサー・コナン・ドイル卿の&lt;em&gt;「シャーロック・ホームズの冒険」の&lt;/em&gt;コンテンツ全体を &lt;code&gt;String&lt;/code&gt; ロードし、コンテンツ内の単語&lt;em&gt;「&lt;/em&gt; the」を探して、ベンチマークを実行しました。 &lt;code&gt;for&lt;/code&gt; ループを使用した &lt;code&gt;search&lt;/code&gt; のバージョンとイテレータを使用したバージョンのベンチマークの結果は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="3cb4438c8408ae587f40f74c3ab4a85a10a319c0" translate="yes" xml:space="preserve">
          <source>We read this definition as: the function &lt;code&gt;largest&lt;/code&gt; is generic over some type &lt;code&gt;T&lt;/code&gt;. This function has one parameter named &lt;code&gt;list&lt;/code&gt;, which is a slice of values of type &lt;code&gt;T&lt;/code&gt;. The &lt;code&gt;largest&lt;/code&gt; function will return a reference to a value of the same type &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">We read this definition as: the function &lt;code&gt;largest&lt;/code&gt; is generic over some type &lt;code&gt;T&lt;/code&gt; . This function has one parameter named &lt;code&gt;list&lt;/code&gt; , which is a slice of values of type &lt;code&gt;T&lt;/code&gt; . The &lt;code&gt;largest&lt;/code&gt; function will return a reference to a value of the same type &lt;code&gt;T&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d90131aacb69308c853c9e012b87bab3eb99486f" translate="yes" xml:space="preserve">
          <source>We read this definition as: the function &lt;code&gt;largest&lt;/code&gt; is generic over some type &lt;code&gt;T&lt;/code&gt;. This function has one parameter named &lt;code&gt;list&lt;/code&gt;, which is a slice of values of type &lt;code&gt;T&lt;/code&gt;. The &lt;code&gt;largest&lt;/code&gt; function will return a value of the same type &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">この定義を次のように読みます。関数 &lt;code&gt;largest&lt;/code&gt; は、いくつかの型 &lt;code&gt;T&lt;/code&gt; に対してジェネリックです。この関数には &lt;code&gt;list&lt;/code&gt; という名前のパラメーターが1つあります。これは、タイプ &lt;code&gt;T&lt;/code&gt; の値のスライスです。 &lt;code&gt;largest&lt;/code&gt; 機能は、同じ型の値を返します &lt;code&gt;T&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="147f34652912dc5e1cde73ec0858d227ac63c740" translate="yes" xml:space="preserve">
          <source>We receive the following error:</source>
          <target state="translated">以下のようなエラーが出ます。</target>
        </trans-unit>
        <trans-unit id="7e8e5c0341d305aaf380fa95376adf0a328c5bce" translate="yes" xml:space="preserve">
          <source>We set the associated &lt;code&gt;Item&lt;/code&gt; type for our iterator to &lt;code&gt;u32&lt;/code&gt;, meaning the iterator will return &lt;code&gt;u32&lt;/code&gt; values. Again, don&amp;rsquo;t worry about associated types yet, we&amp;rsquo;ll cover them in Chapter 19.</source>
          <target state="translated">私たちは、関連する設定 &lt;code&gt;Item&lt;/code&gt; に対する当社のイテレータの型 &lt;code&gt;u32&lt;/code&gt; イテレータが返されますつまり、 &lt;code&gt;u32&lt;/code&gt; 値を。繰り返しますが、関連する型についてはまだ心配しないでください。第19章で説明します。</target>
        </trans-unit>
        <trans-unit id="758bab9e4ef6994d52233f0c2648d86ae9d96c9c" translate="yes" xml:space="preserve">
          <source>We set the number of test threads to &lt;code&gt;1&lt;/code&gt;, telling the program not to use any parallelism. Running the tests using one thread will take longer than running them in parallel, but the tests won&amp;rsquo;t interfere with each other if they share state.</source>
          <target state="translated">テストスレッドの数を &lt;code&gt;1&lt;/code&gt; に設定し、並列処理を使用しないようにプログラムに指示します。1つのスレッドを使用してテストを実行すると、並行して実行するよりも時間がかかりますが、テストが状態を共有している場合、テストが互いに干渉することはありません。</target>
        </trans-unit>
        <trans-unit id="2570e3bb2400d24bff6a3167e41e4cf75ad5c3a8" translate="yes" xml:space="preserve">
          <source>We should get lines that contain &amp;ldquo;to&amp;rdquo; that might have uppercase letters:</source>
          <target state="translated">大文字の &quot;to&quot;を含む行を取得する必要があります。</target>
        </trans-unit>
        <trans-unit id="8d210a202bdd118dd9e0c3872fbd6277ea746c27" translate="yes" xml:space="preserve">
          <source>We still enable the creation of new posts in the draft state using &lt;code&gt;Post::new&lt;/code&gt; and the ability to add text to the post&amp;rsquo;s content. But instead of having a &lt;code&gt;content&lt;/code&gt; method on a draft post that returns an empty string, we&amp;rsquo;ll make it so draft posts don&amp;rsquo;t have the &lt;code&gt;content&lt;/code&gt; method at all. That way, if we try to get a draft post&amp;rsquo;s content, we&amp;rsquo;ll get a compiler error telling us the method doesn&amp;rsquo;t exist. As a result, it will be impossible for us to accidentally display draft post content in production, because that code won&amp;rsquo;t even compile. Listing 17-19 shows the definition of a &lt;code&gt;Post&lt;/code&gt; struct and a &lt;code&gt;DraftPost&lt;/code&gt; struct, as well as methods on each:</source>
          <target state="translated">&lt;code&gt;Post::new&lt;/code&gt; を使用してドラフト状態で新しい投稿を作成したり、投稿のコンテンツにテキストを追加したりできます。ただし、空の文字列を返すドラフト投稿に &lt;code&gt;content&lt;/code&gt; メソッドを用意する代わりに、ドラフト投稿に &lt;code&gt;content&lt;/code&gt; メソッドがないようにします。こうすることで、ドラフト投稿のコンテンツを取得しようとすると、メソッドが存在しないことを示すコンパイラエラーが発生します。その結果、コードがコンパイルされないため、本番環境でドラフト投稿コンテンツを誤って表示することは不可能です。リスト17-19は &lt;code&gt;Post&lt;/code&gt; 構造体と &lt;code&gt;DraftPost&lt;/code&gt; 構造体の定義、およびそれぞれのメソッドを示しています：</target>
        </trans-unit>
        <trans-unit id="95a2d58046436515ce7947004a7ac4ae33fbaf9a" translate="yes" xml:space="preserve">
          <source>We still have a &lt;code&gt;Post::new&lt;/code&gt; function, but instead of returning an instance of &lt;code&gt;Post&lt;/code&gt;, it returns an instance of &lt;code&gt;DraftPost&lt;/code&gt;. Because &lt;code&gt;content&lt;/code&gt; is private and there aren&amp;rsquo;t any functions that return &lt;code&gt;Post&lt;/code&gt;, it&amp;rsquo;s not possible to create an instance of &lt;code&gt;Post&lt;/code&gt; right now.</source>
          <target state="translated">まだ &lt;code&gt;Post::new&lt;/code&gt; 関数がありますが、 &lt;code&gt;Post&lt;/code&gt; のインスタンスを返す代わりに、 &lt;code&gt;DraftPost&lt;/code&gt; のインスタンスを返します。ので &lt;code&gt;content&lt;/code&gt; プライベートで返す任意の関数がない &lt;code&gt;Post&lt;/code&gt; 、それはのインスタンスを作成することはできません &lt;code&gt;Post&lt;/code&gt; 今。</target>
        </trans-unit>
        <trans-unit id="6a14d4ebb9ad3b731ec935502e9ce7735b1d1739" translate="yes" xml:space="preserve">
          <source>We still use the &lt;code&gt;()&lt;/code&gt; after &lt;code&gt;FnOnce&lt;/code&gt; because this &lt;code&gt;FnOnce&lt;/code&gt; represents a closure that takes no parameters and doesn&amp;rsquo;t return a value. Just like function definitions, the return type can be omitted from the signature, but even if we have no parameters, we still need the parentheses.</source>
          <target state="translated">我々はまだ使用して &lt;code&gt;()&lt;/code&gt; をした後 &lt;code&gt;FnOnce&lt;/code&gt; このため &lt;code&gt;FnOnce&lt;/code&gt; はパラメータを取らず、値を返さない閉鎖を表します。関数定義と同様に、戻り値の型はシグネチャから省略できますが、パラメーターがない場合でも、括弧が必要です。</target>
        </trans-unit>
        <trans-unit id="fb6760fff74f1d2184578db32de57a1297acba15" translate="yes" xml:space="preserve">
          <source>We still use the &lt;code&gt;()&lt;/code&gt; after &lt;code&gt;FnOnce&lt;/code&gt; because this &lt;code&gt;FnOnce&lt;/code&gt; represents a closure that takes no parameters and returns the unit type &lt;code&gt;()&lt;/code&gt;. Just like function definitions, the return type can be omitted from the signature, but even if we have no parameters, we still need the parentheses.</source>
          <target state="translated">We still use the &lt;code&gt;()&lt;/code&gt; after &lt;code&gt;FnOnce&lt;/code&gt; because this &lt;code&gt;FnOnce&lt;/code&gt; represents a closure that takes no parameters and returns the unit type &lt;code&gt;()&lt;/code&gt; . Just like function definitions, the return type can be omitted from the signature, but even if we have no parameters, we still need the parentheses.</target>
        </trans-unit>
        <trans-unit id="2e44b48751025b1860e023a6de0b5d66e3d099ea" translate="yes" xml:space="preserve">
          <source>We still want to have our program stop running if the unimplemented methods are reached.</source>
          <target state="translated">未実装のメソッドに到達した場合には、プログラムの実行を停止させたいと考えています。</target>
        </trans-unit>
        <trans-unit id="5137b030849ac96f77436fd6551753ef7e79d43f" translate="yes" xml:space="preserve">
          <source>We talked about strings in Chapter 4, but we&amp;rsquo;ll look at them in more depth now. New Rustaceans commonly get stuck on strings for a combination of three reasons: Rust&amp;rsquo;s propensity for exposing possible errors, strings being a more complicated data structure than many programmers give them credit for, and UTF-8. These factors combine in a way that can seem difficult when you&amp;rsquo;re coming from other programming languages.</source>
          <target state="translated">文字列については第4章で説明しましたが、ここではそれらについてさらに詳しく見ていきます。新しいRustaceansは一般に、3つの理由の組み合わせで文字列に行き詰まります。Rustは起こり得るエラーを公開する傾向があり、文字列は多くのプログラマーが信用するよりも複雑なデータ構造であり、UTF-8です。これらの要因は、他のプログラミング言語を使用している場合には難しいと思われる方法で組み合わされます。</target>
        </trans-unit>
        <trans-unit id="aaadc6667df848db61b7c0773e7ae3fb21446c1d" translate="yes" xml:space="preserve">
          <source>We temporarily print the values of these variables to prove that the code is working as we intend. Let&amp;rsquo;s run this program again with the arguments &lt;code&gt;test&lt;/code&gt; and &lt;code&gt;sample.txt&lt;/code&gt;:</source>
          <target state="translated">これらの変数の値を一時的に出力して、コードが意図したとおりに機能していることを証明します。引数 &lt;code&gt;test&lt;/code&gt; および &lt;code&gt;sample.txt&lt;/code&gt; を使用して、このプログラムを再度実行してみましょう。</target>
        </trans-unit>
        <trans-unit id="e19d7657ac4c2d18fdac154ffac8e272b1fa158c" translate="yes" xml:space="preserve">
          <source>We then call the &lt;code&gt;unwrap&lt;/code&gt; method, which we know will never panic, because we know the methods on &lt;code&gt;Post&lt;/code&gt; ensure that &lt;code&gt;state&lt;/code&gt; will always contain a &lt;code&gt;Some&lt;/code&gt; value when those methods are done. This is one of the cases we talked about in the &lt;a href=&quot;ch09-03-to-panic-or-not-to-panic#cases-in-which-you-have-more-information-than-the-compiler&quot;&gt;&amp;ldquo;Cases In Which You Have More Information Than the Compiler&amp;rdquo;&lt;/a&gt; section of Chapter 9 when we know that a &lt;code&gt;None&lt;/code&gt; value is never possible, even though the compiler isn&amp;rsquo;t able to understand that.</source>
          <target state="translated">次に、 &lt;code&gt;unwrap&lt;/code&gt; メソッドを呼び出します。これは決してパニックになることはないためです。なぜなら、 &lt;code&gt;Post&lt;/code&gt; のメソッドは、これらのメソッドが実行されたときに &lt;code&gt;state&lt;/code&gt; に常に &lt;code&gt;Some&lt;/code&gt; 値が含まれることを保証しているためです。これは、第9章の&lt;a href=&quot;ch09-03-to-panic-or-not-to-panic#cases-in-which-you-have-more-information-than-the-compiler&quot;&gt;「コンパイラーよりも多くの情報があるケース」&lt;/a&gt;セクションで説明したケースの1つで、コンパイラーはそれを理解できなくても、 &lt;code&gt;None&lt;/code&gt; 値は不可能であることがわかっています。</target>
        </trans-unit>
        <trans-unit id="90e0dc4d89651b511b21e761c7cecacf78deadb6" translate="yes" xml:space="preserve">
          <source>We then start the macro definition with &lt;code&gt;macro_rules!&lt;/code&gt; and the name of the macro we&amp;rsquo;re defining &lt;em&gt;without&lt;/em&gt; the exclamation mark. The name, in this case &lt;code&gt;vec&lt;/code&gt;, is followed by curly brackets denoting the body of the macro definition.</source>
          <target state="translated">次に、 &lt;code&gt;macro_rules!&lt;/code&gt; マクロ定義を開始します。感嘆符&lt;em&gt;なしで&lt;/em&gt;定義しているマクロの名前。名前（この場合は &lt;code&gt;vec&lt;/code&gt; ）の後には、マクロ定義の本体を示す中括弧が続きます。</target>
        </trans-unit>
        <trans-unit id="3e635cdf83139712ccc1cd2aa803bc947c37a339" translate="yes" xml:space="preserve">
          <source>We use &lt;code&gt;ThreadPool::new&lt;/code&gt; to create a new thread pool with a configurable number of threads, in this case four. Then, in the &lt;code&gt;for&lt;/code&gt; loop, &lt;code&gt;pool.execute&lt;/code&gt; has a similar interface as &lt;code&gt;thread::spawn&lt;/code&gt; in that it takes a closure the pool should run for each stream. We need to implement &lt;code&gt;pool.execute&lt;/code&gt; so it takes the closure and gives it to a thread in the pool to run. This code won&amp;rsquo;t yet compile, but we&amp;rsquo;ll try so the compiler can guide us in how to fix it.</source>
          <target state="translated">&lt;code&gt;ThreadPool::new&lt;/code&gt; を使用して、構成可能な数のスレッド（この場合は4）で新しいスレッドプールを作成します。次に、 &lt;code&gt;for&lt;/code&gt; ループでは、 &lt;code&gt;pool.execute&lt;/code&gt; は &lt;code&gt;thread::spawn&lt;/code&gt; と同様のインターフェイスを持ち、プールが各ストリームに対して実行する必要があるクロージャーを取得します。 &lt;code&gt;pool.execute&lt;/code&gt; を実装してクロージャーを取得し、プール内のスレッドに渡して実行する必要があります。このコードはまだコンパイルできませんが、コンパイラーが修正する方法を案内できるように試みます。</target>
        </trans-unit>
        <trans-unit id="00a8575d12353b261846fe413a9059471bbbb3a1" translate="yes" xml:space="preserve">
          <source>We use &lt;code&gt;expect&lt;/code&gt; in the same way as &lt;code&gt;unwrap&lt;/code&gt;: to return the file handle or call the &lt;code&gt;panic!&lt;/code&gt; macro. The error message used by &lt;code&gt;expect&lt;/code&gt; in its call to &lt;code&gt;panic!&lt;/code&gt; will be the parameter that we pass to &lt;code&gt;expect&lt;/code&gt;, rather than the default &lt;code&gt;panic!&lt;/code&gt; message that &lt;code&gt;unwrap&lt;/code&gt; uses. Here&amp;rsquo;s what it looks like:</source>
          <target state="translated">&lt;code&gt;unwrap&lt;/code&gt; と同じように &lt;code&gt;expect&lt;/code&gt; を使用します。ファイルハンドルを返すか、 &lt;code&gt;panic!&lt;/code&gt; 呼び出します。大きい。 &lt;code&gt;expect&lt;/code&gt; が &lt;code&gt;panic!&lt;/code&gt; 呼び出しで使用するエラーメッセージ！デフォルトの &lt;code&gt;panic!&lt;/code&gt; ではなく、 &lt;code&gt;expect&lt;/code&gt; に渡すパラメーターになります！ &lt;code&gt;unwrap&lt;/code&gt; が使用するメッセージ。これは次のようになります。</target>
        </trans-unit>
        <trans-unit id="c78d1a392741412017cb0bee15d7b3bfa39b4f96" translate="yes" xml:space="preserve">
          <source>We use &lt;code&gt;if let&lt;/code&gt; rather than &lt;code&gt;unwrap_or_else&lt;/code&gt; to check whether &lt;code&gt;run&lt;/code&gt; returns an &lt;code&gt;Err&lt;/code&gt; value and call &lt;code&gt;process::exit(1)&lt;/code&gt; if it does. The &lt;code&gt;run&lt;/code&gt; function doesn&amp;rsquo;t return a value that we want to &lt;code&gt;unwrap&lt;/code&gt; in the same way that &lt;code&gt;Config::new&lt;/code&gt; returns the &lt;code&gt;Config&lt;/code&gt; instance. Because &lt;code&gt;run&lt;/code&gt; returns &lt;code&gt;()&lt;/code&gt; in the success case, we only care about detecting an error, so we don&amp;rsquo;t need &lt;code&gt;unwrap_or_else&lt;/code&gt; to return the unwrapped value because it would only be &lt;code&gt;()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;unwrap_or_else&lt;/code&gt; ではなく &lt;code&gt;if let&lt;/code&gt; を使用して、 &lt;code&gt;run&lt;/code&gt; が &lt;code&gt;Err&lt;/code&gt; 値を返すかどうかを確認し、返された場合は &lt;code&gt;process::exit(1)&lt;/code&gt; を呼び出します。 &lt;code&gt;run&lt;/code&gt; 機能は、私たちがしたいことを値を返さない &lt;code&gt;unwrap&lt;/code&gt; と同じように、 &lt;code&gt;Config::new&lt;/code&gt; 戻り &lt;code&gt;Config&lt;/code&gt; インスタンス。そのため &lt;code&gt;run&lt;/code&gt; リターン &lt;code&gt;()&lt;/code&gt; 、我々は必要ありませんので、成功の場合には、我々は唯一、エラーを検出気に &lt;code&gt;unwrap_or_else&lt;/code&gt; それだけになるので開封された値を返すように &lt;code&gt;()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="09ae4452a21a2f1db6f66b2ae014602087da7436" translate="yes" xml:space="preserve">
          <source>We use structs to add meaning by labeling the data. We can transform the tuple we&amp;rsquo;re using into a data type with a name for the whole as well as names for the parts, as shown in Listing 5-10.</source>
          <target state="translated">構造体を使用して、データにラベルを付けることで意味を追加します。リスト5-10に示すように、使用しているタプルを、全体の名前とパーツの名前を持つデータ型に変換できます。</target>
        </trans-unit>
        <trans-unit id="588a26e819f938a8daa06969800194e2035e44dd" translate="yes" xml:space="preserve">
          <source>We use the &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; type when we want to allocate some data on the heap for multiple parts of our program to read and we can&amp;rsquo;t determine at compile time which part will finish using the data last. If we knew which part would finish last, we could just make that part the data&amp;rsquo;s owner, and the normal ownership rules enforced at compile time would take effect.</source>
          <target state="translated">プログラムの複数の部分を読み取るためにヒープにデータを割り当てたい場合、 &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; 型を使用します。コンパイル時にどの部分が最後にデータを使用し終えるかを判断できません。最後に終了する部分がわかっている場合は、その部分をデータの所有者にするだけで、コンパイル時に適用される通常の所有権ルールが有効になります。</target>
        </trans-unit>
        <trans-unit id="52b921b4cc68cbe5aa2d7fc1be85a8c378a377ea" translate="yes" xml:space="preserve">
          <source>We use the &lt;code&gt;enumerate&lt;/code&gt; method to adapt an iterator to produce a value and that value&amp;rsquo;s index in the iterator, placed into a tuple. The first call to &lt;code&gt;enumerate&lt;/code&gt; produces the tuple &lt;code&gt;(0, 'a')&lt;/code&gt;. When this value is matched to the pattern &lt;code&gt;(index, value)&lt;/code&gt;, &lt;code&gt;index&lt;/code&gt; will be &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt; will be &lt;code&gt;'a'&lt;/code&gt;, printing the first line of the output.</source>
          <target state="translated">&lt;code&gt;enumerate&lt;/code&gt; メソッドを使用して、値を生成するようにイテレータを調整し、イテレータ内のその値のインデックスをタプルに配置します。 &lt;code&gt;enumerate&lt;/code&gt; の最初の呼び出しは、タプル &lt;code&gt;(0, 'a')&lt;/code&gt; ます。この値がパターン &lt;code&gt;(index, value)&lt;/code&gt; に一致すると、 &lt;code&gt;index&lt;/code&gt; は &lt;code&gt;0&lt;/code&gt; になり、 &lt;code&gt;value&lt;/code&gt; は &lt;code&gt;'a'&lt;/code&gt; になり、出力の最初の行を出力します。</target>
        </trans-unit>
        <trans-unit id="89efb5c2080aec4449c36e4ba732d1a629943ccc" translate="yes" xml:space="preserve">
          <source>We use the &lt;code&gt;enumerate&lt;/code&gt; method to adapt an iterator to produce a value and that value&amp;rsquo;s index in the iterator, placed into a tuple. The first value produced is the tuple &lt;code&gt;(0, 'a')&lt;/code&gt;. When this value is matched to the pattern &lt;code&gt;(index, value)&lt;/code&gt;, &lt;code&gt;index&lt;/code&gt; will be &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt; will be &lt;code&gt;'a'&lt;/code&gt;, printing the first line of the output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b7fed23abc00c81e6f42de18b1f4486c96308f2" translate="yes" xml:space="preserve">
          <source>We use the shorthand ANYTOKEN to denote the set of all tokens (including simple NTs). For example, if any token is legal after a matcher M, then FOLLOW(M) = ANYTOKEN.</source>
          <target state="translated">ここでは、すべてのトークン(単純なNTを含む)の集合を表すためにANYTOKENという略語を使用します。例えば、任意のトークンがマッチャMの後に合法である場合、FOLLOW(M)=ANYTOKENとなります。</target>
        </trans-unit>
        <trans-unit id="e8b8d2725e3d51d9cd1d2d122943d1410209c3b4" translate="yes" xml:space="preserve">
          <source>We used the &lt;code&gt;# Examples&lt;/code&gt; Markdown heading in Listing 14-1 to create a section in the HTML with the title &amp;ldquo;Examples.&amp;rdquo; Here are some other sections that crate authors commonly use in their documentation:</source>
          <target state="translated">私たちは、使用 &lt;code&gt;# Examples&lt;/code&gt; タイトルにHTML内のセクションを作成するには、リスト14-1で値下げ見出しを「例。」以下は、クレートの作成者がドキュメントで一般的に使用する他のセクションです。</target>
        </trans-unit>
        <trans-unit id="0ef9cc2887d688cae816e0aff37ad262f04c5243" translate="yes" xml:space="preserve">
          <source>We want &lt;code&gt;Cacher&lt;/code&gt; to manage the struct fields&amp;rsquo; values rather than letting the calling code potentially change the values in these fields directly, so these fields are private.</source>
          <target state="translated">私たちは望ん &lt;code&gt;Cacher&lt;/code&gt; 、むしろこれらのフィールドはプライベートなので、呼び出し元のコードが潜在的に、直接これらのフィールドの値を変更させるよりも、構造体のフィールドの値を管理します。</target>
        </trans-unit>
        <trans-unit id="343cff43eccaf2ff33fadb37476034c08a669197" translate="yes" xml:space="preserve">
          <source>We want a &lt;code&gt;Node&lt;/code&gt; to own its children, and we want to share that ownership with variables so we can access each &lt;code&gt;Node&lt;/code&gt; in the tree directly. To do this, we define the &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; items to be values of type &lt;code&gt;Rc&amp;lt;Node&amp;gt;&lt;/code&gt;. We also want to modify which nodes are children of another node, so we have a &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; in &lt;code&gt;children&lt;/code&gt; around the &lt;code&gt;Vec&amp;lt;Rc&amp;lt;Node&amp;gt;&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">我々はしたい &lt;code&gt;Node&lt;/code&gt; その子を所有するために、そして私たちは、各アクセスできるように、変数を使用してその所有権を共有したい &lt;code&gt;Node&lt;/code&gt; 直接ツリーに。これを行うには、 &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; アイテムをタイプ &lt;code&gt;Rc&amp;lt;Node&amp;gt;&lt;/code&gt; 値として定義します。また、どのノードが別のノードの子であるかを変更したいので、 &lt;code&gt;Vec&amp;lt;Rc&amp;lt;Node&amp;gt;&amp;gt;&lt;/code&gt; 周りの &lt;code&gt;children&lt;/code&gt; &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; します。</target>
        </trans-unit>
        <trans-unit id="efe26c37f1d8e8931b2a537169f33a14c01a5d00" translate="yes" xml:space="preserve">
          <source>We want our iterator to add 1 to the current state, so we initialized &lt;code&gt;count&lt;/code&gt; to 0 so it would return 1 first. If the value of &lt;code&gt;count&lt;/code&gt; is less than 5, &lt;code&gt;next&lt;/code&gt; will increment &lt;code&gt;count&lt;/code&gt; and return the current value wrapped in &lt;code&gt;Some&lt;/code&gt;. Once &lt;code&gt;count&lt;/code&gt; is 5, our iterator will stop incrementing &lt;code&gt;count&lt;/code&gt; and always return &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">We want our iterator to add 1 to the current state, so we initialized &lt;code&gt;count&lt;/code&gt; to 0 so it would return 1 first. If the value of &lt;code&gt;count&lt;/code&gt; is less than 5, &lt;code&gt;next&lt;/code&gt; will increment &lt;code&gt;count&lt;/code&gt; and return the current value wrapped in &lt;code&gt;Some&lt;/code&gt; . Once &lt;code&gt;count&lt;/code&gt; is 5, our iterator will stop incrementing &lt;code&gt;count&lt;/code&gt; and always return &lt;code&gt;None&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d0d37e81b31729b213fcdf893a4673b004b8c84e" translate="yes" xml:space="preserve">
          <source>We want our iterator to add 1 to the current state, so we initialized &lt;code&gt;count&lt;/code&gt; to 0 so it would return 1 first. If the value of &lt;code&gt;count&lt;/code&gt; is less than 6, &lt;code&gt;next&lt;/code&gt; will return the current value wrapped in &lt;code&gt;Some&lt;/code&gt;, but if &lt;code&gt;count&lt;/code&gt; is 6 or higher, our iterator will return &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">イテレータで現在の状態に1を追加する必要があるため、最初に1を返すように &lt;code&gt;count&lt;/code&gt; を0に初期化しました。 &lt;code&gt;count&lt;/code&gt; の値が6より小さい場合、 &lt;code&gt;next&lt;/code&gt; は &lt;code&gt;Some&lt;/code&gt; でラップされた現在の値を返しますが、 &lt;code&gt;count&lt;/code&gt; が6以上の場合、イテレータは &lt;code&gt;None&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="159b06d9b1bc3efbb438075384303e9f9ce5bdb3" translate="yes" xml:space="preserve">
          <source>We want our procedural macro to generate an implementation of our &lt;code&gt;HelloMacro&lt;/code&gt; trait for the type the user annotated, which we can get by using &lt;code&gt;#name&lt;/code&gt;. The trait implementation has one function, &lt;code&gt;hello_macro&lt;/code&gt;, whose body contains the functionality we want to provide: printing &lt;code&gt;Hello, Macro! My name is&lt;/code&gt; and then the name of the annotated type.</source>
          <target state="translated">私たちは、手続きマクロが私たちの実装を生成したい &lt;code&gt;HelloMacro&lt;/code&gt; の我々が使用して取得することができ、ユーザは注釈付きタイプ、のための特性 &lt;code&gt;#name&lt;/code&gt; 。トレイトの実装には1つの関数 &lt;code&gt;hello_macro&lt;/code&gt; があり、その本体には提供する機能が含まれています &lt;code&gt;Hello, Macro! My name is&lt;/code&gt; 、注釈付きタイプの名前です。</target>
        </trans-unit>
        <trans-unit id="dcf36cf58e85676915b970d805c54013d2ad222e" translate="yes" xml:space="preserve">
          <source>We want our thread pool to work in a similar, familiar way so switching from threads to a thread pool doesn&amp;rsquo;t require large changes to the code that uses our API. Listing 20-12 shows the hypothetical interface for a &lt;code&gt;ThreadPool&lt;/code&gt; struct we want to use instead of &lt;code&gt;thread::spawn&lt;/code&gt;.</source>
          <target state="translated">スレッドプールを同様の使い慣れた方法で機能させるため、スレッドからスレッドプールに切り替えるときに、APIを使用するコードに大きな変更を加える必要はありません。コードリスト20-12は、 &lt;code&gt;thread::spawn&lt;/code&gt; 代わりに使用する &lt;code&gt;ThreadPool&lt;/code&gt; 構造体の架空のインターフェースを示しています。</target>
        </trans-unit>
        <trans-unit id="fff17d8c2985947122e61a61d15c1a4da390070a" translate="yes" xml:space="preserve">
          <source>We want the &lt;code&gt;Worker&lt;/code&gt; structs that we just created to fetch code to run from a queue held in the &lt;code&gt;ThreadPool&lt;/code&gt; and send that code to its thread to run.</source>
          <target state="translated">先ほど作成した &lt;code&gt;Worker&lt;/code&gt; 構造体で、 &lt;code&gt;ThreadPool&lt;/code&gt; に保持されているキューから実行するコードをフェッチし、そのコードをそのスレッドに送信して実行する必要があります。</target>
        </trans-unit>
        <trans-unit id="131c3dfcc453a4966e031008be09ae09bde292da" translate="yes" xml:space="preserve">
          <source>We want to add a new &lt;code&gt;search_case_insensitive&lt;/code&gt; function that we&amp;rsquo;ll call when the environment variable is on. We&amp;rsquo;ll continue to follow the TDD process, so the first step is again to write a failing test. We&amp;rsquo;ll add a new test for the new &lt;code&gt;search_case_insensitive&lt;/code&gt; function and rename our old test from &lt;code&gt;one_result&lt;/code&gt; to &lt;code&gt;case_sensitive&lt;/code&gt; to clarify the differences between the two tests, as shown in Listing 12-20.</source>
          <target state="translated">環境変数がオンのときに呼び出す新しい &lt;code&gt;search_case_insensitive&lt;/code&gt; 関数を追加します。引き続きTDDプロセスに従いますので、最初のステップは、失敗したテストを作成することです。リスト12-20に示すように、新しい &lt;code&gt;search_case_insensitive&lt;/code&gt; 関数の新しいテストを追加し、古いテストの名前を &lt;code&gt;one_result&lt;/code&gt; から &lt;code&gt;case_sensitive&lt;/code&gt; に変更して、2つのテストの違いを明確にします。</target>
        </trans-unit>
        <trans-unit id="b16d6b885dbd18ae9ca5b7b63f85be38981add63" translate="yes" xml:space="preserve">
          <source>We want to allow the user to create a new draft blog post with &lt;code&gt;Post::new&lt;/code&gt;. Then we want to allow text to be added to the blog post while it&amp;rsquo;s in the draft state. If we try to get the post&amp;rsquo;s content immediately, before approval, nothing should happen because the post is still a draft. We&amp;rsquo;ve added &lt;code&gt;assert_eq!&lt;/code&gt; in the code for demonstration purposes. An excellent unit test for this would be to assert that a draft blog post returns an empty string from the &lt;code&gt;content&lt;/code&gt; method, but we&amp;rsquo;re not going to write tests for this example.</source>
          <target state="translated">ユーザーが &lt;code&gt;Post::new&lt;/code&gt; で新しいドラフトのブログ投稿を作成できるようにしたいと考えています。次に、下書き状態のブログ投稿にテキストを追加できるようにします。承認の前に投稿のコンテンツをすぐに取得しようとした場合、投稿はまだ下書きであるため、何も起こりません。 &lt;code&gt;assert_eq!&lt;/code&gt; を追加しました！デモ用のコードで。このための優れた単体テストは、下書きのブログ投稿が &lt;code&gt;content&lt;/code&gt; メソッドから空の文字列を返すことをアサートすることですが、この例ではテストを記述しません。</target>
        </trans-unit>
        <trans-unit id="7fed3691de8586ef2849a59c359e563892a4dc4c" translate="yes" xml:space="preserve">
          <source>We want to define code in one place in our program, but only &lt;em&gt;execute&lt;/em&gt; that code where we actually need the result. This is a use case for closures!</source>
          <target state="translated">プログラムの1つの場所でコードを定義したいのですが、実際に結果が必要な場所でのみそのコードを&lt;em&gt;実行&lt;/em&gt;します。これはクロージャの使用例です！</target>
        </trans-unit>
        <trans-unit id="d18a25187ad631c5a4e827947adecf2aa147cc32" translate="yes" xml:space="preserve">
          <source>We want to do something with the &lt;code&gt;Some(3)&lt;/code&gt; match but do nothing with any other &lt;code&gt;Some&amp;lt;u8&amp;gt;&lt;/code&gt; value or the &lt;code&gt;None&lt;/code&gt; value. To satisfy the &lt;code&gt;match&lt;/code&gt; expression, we have to add &lt;code&gt;_ =&amp;gt; ()&lt;/code&gt; after processing just one variant, which is a lot of boilerplate code to add.</source>
          <target state="translated">&lt;code&gt;Some(3)&lt;/code&gt; 一致で何かをしたいが、他の &lt;code&gt;Some&amp;lt;u8&amp;gt;&lt;/code&gt; 値または &lt;code&gt;None&lt;/code&gt; 値では何もしません。 &lt;code&gt;match&lt;/code&gt; 式を満たすには、1つのバリアントのみを処理した後、 &lt;code&gt;_ =&amp;gt; ()&lt;/code&gt; を追加する必要があります。これは、追加する定型コードの多くです。</target>
        </trans-unit>
        <trans-unit id="dc02dbe447e584d5bc7325caffcd6113884e46a0" translate="yes" xml:space="preserve">
          <source>We want to express the constraint that Foo should not outlive &lt;code&gt;'a&lt;/code&gt;, because the data pointed to by &lt;code&gt;T&lt;/code&gt; is only valid for that lifetime. The problem is that there are no actual uses of &lt;code&gt;'a&lt;/code&gt;. It's possible to work around this by adding a PhantomData type to the struct, using it to tell the compiler to act as if the struct contained a borrowed reference &lt;code&gt;&amp;amp;'a T&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; が指すデータはその存続期間中のみ有効であるため、Fooが &lt;code&gt;'a&lt;/code&gt; 超えてはならないという制約を表現したいと思います。問題は、 &lt;code&gt;'a&lt;/code&gt; の実際の使用法がないことです。PhantomDataタイプを構造体に追加し、これを使用して、構造体が借りた参照 &lt;code&gt;&amp;amp;'a T&lt;/code&gt; 含んでいるかのように動作するようコンパイラーに指示することで、これを回避することができます。</target>
        </trans-unit>
        <trans-unit id="8096aefade4c17845a6c208281a849237f1210fa" translate="yes" xml:space="preserve">
          <source>We want to implement &lt;code&gt;Foo&lt;/code&gt; for 'MyStruct', but for some reason it only makes sense to implement the &lt;code&gt;bar()&lt;/code&gt; function. &lt;code&gt;baz()&lt;/code&gt; and &lt;code&gt;qux()&lt;/code&gt; will still need to be defined in our implementation of &lt;code&gt;Foo&lt;/code&gt;, but we can use &lt;code&gt;unimplemented!&lt;/code&gt; in their definitions to allow our code to compile.</source>
          <target state="translated">We want to implement &lt;code&gt;Foo&lt;/code&gt; for 'MyStruct', but for some reason it only makes sense to implement the &lt;code&gt;bar()&lt;/code&gt; function. &lt;code&gt;baz()&lt;/code&gt; and &lt;code&gt;qux()&lt;/code&gt; will still need to be defined in our implementation of &lt;code&gt;Foo&lt;/code&gt; , but we can use &lt;code&gt;unimplemented!&lt;/code&gt; in their definitions to allow our code to compile.</target>
        </trans-unit>
        <trans-unit id="20c0f35ebffd6903da931ba226fd712a56dd80d9" translate="yes" xml:space="preserve">
          <source>We want to implement &lt;code&gt;Foo&lt;/code&gt; on one of our types, but we also want to work on just &lt;code&gt;bar()&lt;/code&gt; first. In order for our code to compile, we need to implement &lt;code&gt;baz()&lt;/code&gt;, so we can use &lt;code&gt;todo!&lt;/code&gt;:</source>
          <target state="translated">いずれかのタイプに &lt;code&gt;Foo&lt;/code&gt; を実装する必要がありますが、最初に &lt;code&gt;bar()&lt;/code&gt; のみを処理する必要もあります。コードをコンパイルするには、 &lt;code&gt;baz()&lt;/code&gt; を実装する必要があるため、 &lt;code&gt;todo!&lt;/code&gt; を使用できます！：</target>
        </trans-unit>
        <trans-unit id="56425053366a107f9b4c0d5cead1a47581ce32c6" translate="yes" xml:space="preserve">
          <source>We want to implement &lt;code&gt;Foo&lt;/code&gt; on one of our types, but we also want to work on just &lt;code&gt;bar()&lt;/code&gt; first. In order for our code to compile, we need to implement &lt;code&gt;baz()&lt;/code&gt;, so we can use &lt;code&gt;unimplemented!&lt;/code&gt;:</source>
          <target state="translated">いずれかのタイプに &lt;code&gt;Foo&lt;/code&gt; を実装する必要がありますが、最初に &lt;code&gt;bar()&lt;/code&gt; のみを処理する必要もあります。コードをコンパイルするには、 &lt;code&gt;baz()&lt;/code&gt; を実装する必要があるため、 &lt;code&gt;unimplemented!&lt;/code&gt; を使用できます！：</target>
        </trans-unit>
        <trans-unit id="2603349a6514abb34f4d8e302a6f486604d53289" translate="yes" xml:space="preserve">
          <source>We want to make a media aggregator library that can display summaries of data that might be stored in a &lt;code&gt;NewsArticle&lt;/code&gt; or &lt;code&gt;Tweet&lt;/code&gt; instance. To do this, we need a summary from each type, and we need to request that summary by calling a &lt;code&gt;summarize&lt;/code&gt; method on an instance. Listing 10-12 shows the definition of a &lt;code&gt;Summary&lt;/code&gt; trait that expresses this behavior.</source>
          <target state="translated">&lt;code&gt;NewsArticle&lt;/code&gt; または &lt;code&gt;Tweet&lt;/code&gt; インスタンスに格納される可能性のあるデータの要約を表示できるメディアアグリゲーターライブラリを作成したいと考えています。これを行うために、我々は、各タイプの概要を必要とし、我々は呼び出すことにより、その要約を要求する必要が &lt;code&gt;summarize&lt;/code&gt; インスタンスのメソッドを。リスト10-12はこの振る舞いを表現する &lt;code&gt;Summary&lt;/code&gt; トレイトの定義を示しています。</target>
        </trans-unit>
        <trans-unit id="c43cd68edbbfd1b8e1512d94b1171eea5afef79e" translate="yes" xml:space="preserve">
          <source>We want to require that types of consts used in pattern matches have the attribute &lt;code&gt;#[derive(PartialEq, Eq)]&lt;/code&gt;.</source>
          <target state="translated">パターン一致で使用される定数のタイプが属性 &lt;code&gt;#[derive(PartialEq, Eq)]&lt;/code&gt; 持つことを要求したいと思います。</target>
        </trans-unit>
        <trans-unit id="ad91bce07f001635901cf680ab9baa3e439ca352" translate="yes" xml:space="preserve">
          <source>We welcome contributions of all kinds.</source>
          <target state="translated">あらゆる種類の投稿を歓迎します。</target>
        </trans-unit>
        <trans-unit id="23a6529743bec69716fd57e6fc32983956eb0107" translate="yes" xml:space="preserve">
          <source>We will tend to use the variable &quot;M&quot; to stand for a matcher, variables &quot;t&quot; and &quot;u&quot; for arbitrary individual tokens, and the variables &quot;tt&quot; and &quot;uu&quot; for arbitrary token trees. (The use of &quot;tt&quot; does present potential ambiguity with its additional role as a fragment specifier; but it will be clear from context which interpretation is meant.)</source>
          <target state="translated">我々は、変数 &quot;M &quot;をマッチャー、変数 &quot;t &quot;と &quot;u &quot;を任意の個々のトークン、変数 &quot;tt &quot;と &quot;uu &quot;を任意のトークンツリーに用いる傾向がある(&quot;tt &quot;の使用は、フラグメント指定子としての役割を追加することで、潜在的な曖昧さを提示しているが、どちらの解釈が意味されるかは文脈から明らかであろう)。</target>
        </trans-unit>
        <trans-unit id="83ee5c69c56907ebdffff8aeb268f380fd8205ee" translate="yes" xml:space="preserve">
          <source>We won&amp;rsquo;t implement a fully fledged GUI library for this example but will show how the pieces would fit together. At the time of writing the library, we can&amp;rsquo;t know and define all the types other programmers might want to create. But we do know that &lt;code&gt;gui&lt;/code&gt; needs to keep track of many values of different types, and it needs to call a &lt;code&gt;draw&lt;/code&gt; method on each of these differently typed values. It doesn&amp;rsquo;t need to know exactly what will happen when we call the &lt;code&gt;draw&lt;/code&gt; method, just that the value will have that method available for us to call.</source>
          <target state="translated">この例では、本格的なGUIライブラリは実装しませんが、これらがどのように組み合わされるかを示します。ライブラリを作成する時点では、他のプログラマーが作成する可能性のあるすべてのタイプを知ることはできません。しかし、 &lt;code&gt;gui&lt;/code&gt; はさまざまな型の多くの値を追跡する必要があること、そしてこれらのさまざまに型指定された値のそれぞれに対して &lt;code&gt;draw&lt;/code&gt; メソッドを呼び出す必要があることは知っています。 &lt;code&gt;draw&lt;/code&gt; メソッドを呼び出したときに何が起こるかを正確に知る必要はありません。値に、そのメソッドを呼び出せるようにするだけです。</target>
        </trans-unit>
        <trans-unit id="d21a898dd719bc6dce095fa6d8b7f4dd1c97ae10" translate="yes" xml:space="preserve">
          <source>We won&amp;rsquo;t see any output to the terminal, and &lt;em&gt;output.txt&lt;/em&gt; will contain our results:</source>
          <target state="translated">端末への出力は表示されず、&lt;em&gt;output.txt&lt;/em&gt;に結果が含まれます。</target>
        </trans-unit>
        <trans-unit id="1bcf0abfb9f5d1eb6eceeb8401331a69bbdacdc8" translate="yes" xml:space="preserve">
          <source>We would get this error:</source>
          <target state="translated">このようなエラーが出てしまいます。</target>
        </trans-unit>
        <trans-unit id="5622bdba3c15431adc562635e894da31c4a2b58c" translate="yes" xml:space="preserve">
          <source>We wrap the list &lt;code&gt;a&lt;/code&gt; in an &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; so when we create lists &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;c&lt;/code&gt;, they can both refer to &lt;code&gt;a&lt;/code&gt;, which is what we did in Listing 15-18.</source>
          <target state="translated">私たちは、リストラップ &lt;code&gt;a&lt;/code&gt; における &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; 、我々はリストの作成時にその &lt;code&gt;b&lt;/code&gt; および &lt;code&gt;c&lt;/code&gt; 、彼らはを参照することができ、両方の私たちは、リスト15-18で何をしたかです。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e8c8515d512bf806d32faac4f020e79d1b4ea0b5" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ll also briefly introduce closures, iterators, and trait objects, which Chapters &lt;a href=&quot;ch13-00-functional-features&quot;&gt;13&lt;/a&gt; and &lt;a href=&quot;ch17-00-oop&quot;&gt;17&lt;/a&gt; will cover in detail.</source>
          <target state="translated">また、簡単に章閉鎖、イテレータ、および形質オブジェクト、紹介&lt;a href=&quot;ch13-00-functional-features&quot;&gt;13&lt;/a&gt;と&lt;a href=&quot;ch17-00-oop&quot;&gt;17が&lt;/a&gt;詳細にカバーしますが。</target>
        </trans-unit>
        <trans-unit id="bd0d703fb6da707b1fe1894466f6416db96a6796" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ll change the start of the &lt;code&gt;main&lt;/code&gt; function that we had in Listing 12-24 to the code in Listing 13-25. This won&amp;rsquo;t compile until we update &lt;code&gt;Config::new&lt;/code&gt; as well.</source>
          <target state="translated">リスト12-24にあった &lt;code&gt;main&lt;/code&gt; 関数の開始をリスト13-25のコードに変更します。これは、 &lt;code&gt;Config::new&lt;/code&gt; も更新するまでコンパイルされません。</target>
        </trans-unit>
        <trans-unit id="d3116613c32b066db53048929e2f72dcbc32c305" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ll check for errors and handle them using a technique similar to one we used with &lt;code&gt;Config::new&lt;/code&gt; in Listing 12-10, but with a slight difference:</source>
          <target state="translated">エラーをチェックし、リスト12-10の &lt;code&gt;Config::new&lt;/code&gt; で使用したものと同様の手法を使用してエラーを処理しますが、若干の違いがあります。</target>
        </trans-unit>
        <trans-unit id="d62b197067e3536d1071880b59f256af5edc6238" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ll come back to &lt;code&gt;panic!&lt;/code&gt; and when we should and should not use &lt;code&gt;panic!&lt;/code&gt; to handle error conditions in the &lt;a href=&quot;ch09-03-to-panic-or-not-to-panic#to-panic-or-not-to-panic&quot;&gt;&amp;ldquo;To &lt;code&gt;panic!&lt;/code&gt; or Not to &lt;code&gt;panic!&lt;/code&gt;&amp;rdquo;&lt;/a&gt; section later in this chapter. Next, we&amp;rsquo;ll look at how to recover from an error using &lt;code&gt;Result&lt;/code&gt;.</source>
          <target state="translated">私たちは &lt;code&gt;panic!&lt;/code&gt; 戻ります！そして、 &lt;code&gt;panic!&lt;/code&gt; 使用するべきか、しないべきか！でエラー条件を処理する&lt;a href=&quot;ch09-03-to-panic-or-not-to-panic#to-panic-or-not-to-panic&quot;&gt;「を &lt;code&gt;panic!&lt;/code&gt; または &lt;code&gt;panic!&lt;/code&gt; ないでください！」&lt;/a&gt;この章のセクション以降。次に、 &lt;code&gt;Result&lt;/code&gt; を使用してエラーから回復する方法を見ていきます。</target>
        </trans-unit>
        <trans-unit id="7c361948b72916d443c2a8639e53ba761429344f" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ll continue to get warnings because we aren&amp;rsquo;t doing anything with the parameters to &lt;code&gt;new&lt;/code&gt; and &lt;code&gt;execute&lt;/code&gt;. Let&amp;rsquo;s implement the bodies of these functions with the behavior we want. To start, let&amp;rsquo;s think about &lt;code&gt;new&lt;/code&gt;. Earlier we chose an unsigned type for the &lt;code&gt;size&lt;/code&gt; parameter, because a pool with a negative number of threads makes no sense. However, a pool with zero threads also makes no sense, yet zero is a perfectly valid &lt;code&gt;usize&lt;/code&gt;. We&amp;rsquo;ll add code to check that &lt;code&gt;size&lt;/code&gt; is greater than zero before we return a &lt;code&gt;ThreadPool&lt;/code&gt; instance and have the program panic if it receives a zero by using the &lt;code&gt;assert!&lt;/code&gt; macro, as shown in Listing 20-13.</source>
          <target state="translated">&lt;code&gt;new&lt;/code&gt; および &lt;code&gt;execute&lt;/code&gt; のパラメーターを使用して何も実行していないため、引き続き警告が表示されます。これらの関数の本体を、希望する動作で実装してみましょう。まず、 &lt;code&gt;new&lt;/code&gt; について考えてみましょう。以前は、負の数のスレッドを含むプールは意味がないため、 &lt;code&gt;size&lt;/code&gt; パラメーターに符号なしの型を選択しました。ただし、スレッドがゼロのプールも意味がありませんが、ゼロは完全に有効な &lt;code&gt;usize&lt;/code&gt; です。 &lt;code&gt;ThreadPool&lt;/code&gt; インスタンスを返す前に &lt;code&gt;size&lt;/code&gt; がゼロより大きいことを確認するコードを追加し、 &lt;code&gt;assert!&lt;/code&gt; を使用してプログラムがゼロを受信するとパニックが発生します。リスト20-13で示されるように、マクロ。</target>
        </trans-unit>
        <trans-unit id="51ae0f2c48f47ac8366f3fdf37d10c87f351ab8e" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ll create a new &lt;code&gt;Job&lt;/code&gt; struct that will hold the closures we want to send down the channel.</source>
          <target state="translated">チャネルに送信したいクロージャを保持する新しい &lt;code&gt;Job&lt;/code&gt; 構造体を作成します。</target>
        </trans-unit>
        <trans-unit id="4bb83dcab86b4aa0381b060ab157833722eb2537" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ll create list &lt;code&gt;a&lt;/code&gt; that contains 5 and then 10. Then we&amp;rsquo;ll make two more lists: &lt;code&gt;b&lt;/code&gt; that starts with 3 and &lt;code&gt;c&lt;/code&gt; that starts with 4. Both &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;c&lt;/code&gt; lists will then continue on to the first &lt;code&gt;a&lt;/code&gt; list containing 5 and 10. In other words, both lists will share the first list containing 5 and 10.</source>
          <target state="translated">私たちは、リスト作成します &lt;code&gt;a&lt;/code&gt; 5が含まれ、その後、10その後、我々は2つのリストを作ります： &lt;code&gt;b&lt;/code&gt; 3として開始すること &lt;code&gt;c&lt;/code&gt; 4両で始まること &lt;code&gt;b&lt;/code&gt; と &lt;code&gt;c&lt;/code&gt; リストは、最初に進みます5を含むリスト言い換えると、両方のリストは、5と10を含む最初のリストを共有します。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fa20d8056fa921c697f37302e71e0fe1ecb7bea2" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ll define the &lt;code&gt;execute&lt;/code&gt; method on &lt;code&gt;ThreadPool&lt;/code&gt; to take a closure as a parameter. Recall from the &lt;a href=&quot;ch13-01-closures#storing-closures-using-generic-parameters-and-the-fn-traits&quot;&gt;&amp;ldquo;Storing Closures Using Generic Parameters and the &lt;code&gt;Fn&lt;/code&gt; Traits&amp;rdquo;&lt;/a&gt; section in Chapter 13 that we can take closures as parameters with three different traits: &lt;code&gt;Fn&lt;/code&gt;, &lt;code&gt;FnMut&lt;/code&gt;, and &lt;code&gt;FnOnce&lt;/code&gt;. We need to decide which kind of closure to use here. We know we&amp;rsquo;ll end up doing something similar to the standard library &lt;code&gt;thread::spawn&lt;/code&gt; implementation, so we can look at what bounds the signature of &lt;code&gt;thread::spawn&lt;/code&gt; has on its parameter. The documentation shows us the following:</source>
          <target state="translated">&lt;code&gt;ThreadPool&lt;/code&gt; の &lt;code&gt;execute&lt;/code&gt; メソッドを定義して、クロージャーをパラメーターとして受け取ります。リコール&lt;a href=&quot;ch13-01-closures#storing-closures-using-generic-parameters-and-the-fn-traits&quot;&gt;「一般的なパラメータと使用の保存クロージャ&lt;/a&gt; &lt;code&gt;Fn&lt;/code&gt; 形質」：私たちは、3つの異なる特性を持つパラメータとしてクロージャを取ることができることを第13章でセクション &lt;code&gt;Fn&lt;/code&gt; 、 &lt;code&gt;FnMut&lt;/code&gt; 、および &lt;code&gt;FnOnce&lt;/code&gt; を。ここで使用するクロージャの種類を決定する必要があります。最終的に標準ライブラリの &lt;code&gt;thread::spawn&lt;/code&gt; 実装と同様の処理を行うことになるので、 &lt;code&gt;thread::spawn&lt;/code&gt; シグネチャがパラメーターにどのような境界を持っているかを確認できます。ドキュメントには次のことが示されています。</target>
        </trans-unit>
        <trans-unit id="a2fdbbe18f87451459f008e457c7a300c4999cac" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ll demonstrate the first situation in the &lt;a href=&quot;#enabling-recursive-types-with-boxes&quot;&gt;&amp;ldquo;Enabling Recursive Types with Boxes&amp;rdquo;&lt;/a&gt; section. In the second case, transferring ownership of a large amount of data can take a long time because the data is copied around on the stack. To improve performance in this situation, we can store the large amount of data on the heap in a box. Then, only the small amount of pointer data is copied around on the stack, while the data it references stays in one place on the heap. The third case is known as a &lt;em&gt;trait object&lt;/em&gt;, and Chapter 17 devotes an entire section, &lt;a href=&quot;ch17-02-trait-objects#using-trait-objects-that-allow-for-values-of-different-types&quot;&gt;&amp;ldquo;Using Trait Objects That Allow for Values of Different Types,&amp;rdquo;&lt;/a&gt; just to that topic. So what you learn here you&amp;rsquo;ll apply again in Chapter 17!</source>
          <target state="translated">最初の状況については、&lt;a href=&quot;#enabling-recursive-types-with-boxes&quot;&gt;「ボックスを使用した再帰型の有効化」&lt;/a&gt;セクションで説明します。 2番目のケースでは、データがスタック上でコピーされるため、大量のデータの所有権を転送するには長い時間がかかる可能性があります。この状況でのパフォーマンスを向上させるために、ヒープ上の大量のデータをボックスに格納できます。次に、少量のポインターデータのみがスタック上でコピーされますが、参照するデータはヒープ上の1か所にとどまります。 3番目のケースは&lt;em&gt;traitオブジェクト&lt;/em&gt;と呼ばれ、第17章では&lt;a href=&quot;ch17-02-trait-objects#using-trait-objects-that-allow-for-values-of-different-types&quot;&gt;、「&lt;/a&gt;そのトピックについてのみ、「異なる型の値を許可する特性オブジェクトの使用」」のセクション全体を取り上げています。ここで学んだことは、第17章で再度適用します。</target>
        </trans-unit>
        <trans-unit id="deceb660af9d289cbab49d701f06e3ffa29f7fd4" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ll discuss how to create and update vectors, strings, and hash maps, as well as what makes each special.</source>
          <target state="translated">ベクター、文字列、ハッシュマップを作成および更新する方法と、それぞれの特徴を説明します。</target>
        </trans-unit>
        <trans-unit id="8ac89a220719114fba008017ccc516ce2a635466" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ll discuss iterators in more detail in Chapter 13. For now, know that &lt;code&gt;iter&lt;/code&gt; is a method that returns each element in a collection and that &lt;code&gt;enumerate&lt;/code&gt; wraps the result of &lt;code&gt;iter&lt;/code&gt; and returns each element as part of a tuple instead. The first element of the tuple returned from &lt;code&gt;enumerate&lt;/code&gt; is the index, and the second element is a reference to the element. This is a bit more convenient than calculating the index ourselves.</source>
          <target state="translated">イテレータについては第13章で詳しく説明します。 &lt;code&gt;iter&lt;/code&gt; 、iterはコレクションの各要素を返すメソッドであり、 &lt;code&gt;enumerate&lt;/code&gt; は &lt;code&gt;iter&lt;/code&gt; の結果をラップして、代わりに各要素をタプルの一部として返すことを理解してください。 &lt;code&gt;enumerate&lt;/code&gt; から返されるタプルの最初の要素はインデックスで、2番目の要素は要素への参照です。これは、自分でインデックスを計算するよりも少し便利です。</target>
        </trans-unit>
        <trans-unit id="624f79a35ccc7ff9109a384a1f2001d1a19900e9" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ll explore some aspects of how tests work by experimenting with the template test generated for us without actually testing any code. Then we&amp;rsquo;ll write some real-world tests that call some code that we&amp;rsquo;ve written and assert that its behavior is correct.</source>
          <target state="translated">実際にコードをテストせずに生成されたテンプレートテストを試すことにより、テストがどのように機能するかについていくつかの側面を探ります。次に、作成したコードを呼び出す実際のテストをいくつか記述し、その動作が正しいことをアサートします。</target>
        </trans-unit>
        <trans-unit id="2bdd67fc360b4185f7483b213b4f01b862aebe2c" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ll extract the functionality for parsing arguments into a function that &lt;code&gt;main&lt;/code&gt; will call to prepare for moving the command line parsing logic to &lt;em&gt;src/lib.rs&lt;/em&gt;. Listing 12-5 shows the new start of &lt;code&gt;main&lt;/code&gt; that calls a new function &lt;code&gt;parse_config&lt;/code&gt;, which we&amp;rsquo;ll define in &lt;em&gt;src/main.rs&lt;/em&gt; for the moment.</source>
          <target state="translated">コマンドライン解析ロジックを&lt;em&gt;src / lib.rsに&lt;/em&gt;移動する準備をするために &lt;code&gt;main&lt;/code&gt; が呼び出す関数に引数を解析する機能を抽出します。リスト12-5は、今のところ&lt;em&gt;src / main.rs&lt;/em&gt;で定義する新しい関数 &lt;code&gt;parse_config&lt;/code&gt; を呼び出す &lt;code&gt;main&lt;/code&gt; の新しい開始を示しています。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e88c3b3a979bcfce4b1760b46e6bdec4b2d5837b" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ll first define what we mean by the term &lt;em&gt;string&lt;/em&gt;. Rust has only one string type in the core language, which is the string slice &lt;code&gt;str&lt;/code&gt; that is usually seen in its borrowed form &lt;code&gt;&amp;amp;str&lt;/code&gt;. In Chapter 4, we talked about &lt;em&gt;string slices&lt;/em&gt;, which are references to some UTF-8 encoded string data stored elsewhere. String literals, for example, are stored in the program&amp;rsquo;s binary and are therefore string slices.</source>
          <target state="translated">まず、&lt;em&gt;文字列&lt;/em&gt;という用語の意味を定義し&lt;em&gt;ます&lt;/em&gt;。Rustは、コア言語で文字列型を1つだけ持ちます。これは、通常、借用形式 &lt;code&gt;&amp;amp;str&lt;/code&gt; で表示される文字列スライス &lt;code&gt;str&lt;/code&gt; です。第4章では、&lt;em&gt;文字列スライス&lt;/em&gt;について説明しました。これは、他の場所に格納されている一部のUTF-8エンコードされた文字列データへの参照です。たとえば、文字列リテラルはプログラムのバイナリに格納されるため、文字列スライスです。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e0a42ef337f81f469e74c07a4e57681998929bd2" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ll get this error because &lt;code&gt;String&lt;/code&gt; doesn&amp;rsquo;t implement the &lt;code&gt;Draw&lt;/code&gt; trait:</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; は &lt;code&gt;Draw&lt;/code&gt; トレイトを実装していないため、このエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="d5a20f154a16497d1d3eb9e39d468647563e6985" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ll go over the basic API of hash maps in this section, but many more goodies are hiding in the functions defined on &lt;code&gt;HashMap&amp;lt;K, V&amp;gt;&lt;/code&gt; by the standard library. As always, check the standard library documentation for more information.</source>
          <target state="translated">このセクションでは、ハッシュマップの基本的なAPIについて説明しますが、標準ライブラリによって &lt;code&gt;HashMap&amp;lt;K, V&amp;gt;&lt;/code&gt; 定義された関数には、さらに多くの便利な機能が隠されています。いつものように、詳細については標準ライブラリのドキュメントを確認してください。</target>
        </trans-unit>
        <trans-unit id="eac18c8869068094c6cd67d1df8b09a6dcd85f58" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ll have more examples of &lt;code&gt;move&lt;/code&gt; closures in Chapter 16 when we talk about concurrency. For now, here&amp;rsquo;s the code from Listing 13-12 with the &lt;code&gt;move&lt;/code&gt; keyword added to the closure definition and using vectors instead of integers, because integers can be copied rather than moved; note that this code will not yet compile.</source>
          <target state="translated">同時実行性について説明するときは、第16章で &lt;code&gt;move&lt;/code&gt; クロージャーの例をさらに紹介します。とりあえず、ここではリスト13-12のコードに &lt;code&gt;move&lt;/code&gt; キーワードをクロージャ定義に追加し、整数の代わりにベクトルを使用しています。整数は移動ではなくコピーできるためです。このコードはまだコンパイルされないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="45660693e231ee73bb1364738b13ef0ef0f19408" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ll implement a blog post workflow in an incremental way. The blog&amp;rsquo;s final functionality will look like this:</source>
          <target state="translated">ブログ投稿ワークフローを段階的に実装します。ブログの最終的な機能は次のようになります。</target>
        </trans-unit>
        <trans-unit id="13ede53dc0201795dcdc26b0b93f397bb66c964d" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ll implement a classic beginner programming problem: a guessing game. Here&amp;rsquo;s how it works: the program will generate a random integer between 1 and 100. It will then prompt the player to enter a guess. After a guess is entered, the program will indicate whether the guess is too low or too high. If the guess is correct, the game will print a congratulatory message and exit.</source>
          <target state="translated">私たちは古典的な初心者プログラミングの問題、推測ゲームを実装します。これがどのように機能するかです：プログラムは1から100の間のランダムな整数を生成します。それからプレーヤーに推測を入力するように促します。推測が入力されると、プログラムは推測が低すぎるか高すぎるかを示します。推測が正しい場合、ゲームはお祝いメッセージを出力して終了します。</target>
        </trans-unit>
        <trans-unit id="048db9a1a62206761ce5925145fa53461a07bbf2" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ll implement this behavior by introducing a new data structure between the &lt;code&gt;ThreadPool&lt;/code&gt; and the threads that will manage this new behavior. We&amp;rsquo;ll call this data structure &lt;code&gt;Worker&lt;/code&gt;, which is a common term in pooling implementations. Think of people working in the kitchen at a restaurant: the workers wait until orders come in from customers, and then they&amp;rsquo;re responsible for taking those orders and filling them.</source>
          <target state="translated">&lt;code&gt;ThreadPool&lt;/code&gt; とこの新しい動作を管理するスレッドの間に新しいデータ構造を導入することにより、この動作を実装します。このデータ構造を &lt;code&gt;Worker&lt;/code&gt; と呼びます。これは、実装のプーリングにおける一般的な用語です。レストランのキッチンで働いている人々について考えてみてください。労働者は注文が顧客から届くまで待ってから、注文を受け取ってそれを処理する責任があります。</target>
        </trans-unit>
        <trans-unit id="3d83967911dd3c9768c9078b0f1f0230b11c5179" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ll improve &lt;code&gt;minigrep&lt;/code&gt; by adding an extra feature: an option for case-insensitive searching that the user can turn on via an environment variable. We could make this feature a command line option and require that users enter it each time they want it to apply, but instead we&amp;rsquo;ll use an environment variable. Doing so allows our users to set the environment variable once and have all their searches be case insensitive in that terminal session.</source>
          <target state="translated">&lt;code&gt;minigrep&lt;/code&gt; を改善するために、機能を追加します。ユーザーが環境変数を使用してオンにできる、大文字と小文字を区別しない検索のオプションです。この機能をコマンドラインオプションにして、適用するたびにユーザーに入力を要求することもできますが、代わりに環境変数を使用します。そうすることで、ユーザーは環境変数を一度設定して、そのターミナルセッションですべての検索で大文字と小文字を区別しないようにすることができます。</target>
        </trans-unit>
        <trans-unit id="d68f5d386409006cd90ddd8d3bb0c58cf3c62419" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ll leave the &lt;code&gt;content&lt;/code&gt; method on &lt;code&gt;Post&lt;/code&gt; as is, returning an empty string slice. We can now have a &lt;code&gt;Post&lt;/code&gt; in the &lt;code&gt;PendingReview&lt;/code&gt; state as well as in the &lt;code&gt;Draft&lt;/code&gt; state, but we want the same behavior in the &lt;code&gt;PendingReview&lt;/code&gt; state. Listing 17-11 now works up to line 10!</source>
          <target state="translated">&lt;code&gt;content&lt;/code&gt; メソッドは &lt;code&gt;Post&lt;/code&gt; のままにしておき、空の文字列スライスを返します。私たちは、今持っていることができます &lt;code&gt;Post&lt;/code&gt; に &lt;code&gt;PendingReview&lt;/code&gt; の状態などで &lt;code&gt;Draft&lt;/code&gt; 状態が、我々は中に同じ動作たい &lt;code&gt;PendingReview&lt;/code&gt; の状態を。リスト17-11は10行目まで機能します。</target>
        </trans-unit>
        <trans-unit id="d54b9a4076624177fb35b9a3dd76036387ec23ed" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ll limit the number of threads in the pool to a small number to protect us from Denial of Service (DoS) attacks; if we had our program create a new thread for each request as it came in, someone making 10 million requests to our server could create havoc by using up all our server&amp;rsquo;s resources and grinding the processing of requests to a halt.</source>
          <target state="translated">サービス拒否（DoS）攻撃から保護するために、プール内のスレッドの数を少数に制限します。プログラムが要求ごとに新しいスレッドを作成するようにすると、サーバーに1000万の要求を送信する誰かがサーバーのすべてのリソースを使い果たし、要求の処理を停止して停止する可能性があります。</target>
        </trans-unit>
        <trans-unit id="c71f00103a62f0c5845aebe33e418eb38eb04404" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ll look at how a slow-processing request can affect other requests made to our current server implementation. Listing 20-10 implements handling a request to &lt;em&gt;/sleep&lt;/em&gt; with a simulated slow response that will cause the server to sleep for 5 seconds before responding.</source>
          <target state="translated">処理が遅いリクエストが、現在のサーバー実装に対して行われた他のリクエストにどのように影響するかを見ていきます。リスト20-10 は、サーバーが応答する前に5秒間スリープするシミュレートされた遅い応答で&lt;em&gt;/ sleep&lt;/em&gt;へのリクエストを処理する実装です。</target>
        </trans-unit>
        <trans-unit id="63d0e1907454ce3a168d379fb233f059e45940b7" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ll receive an error because the &lt;code&gt;s&lt;/code&gt; value will still be moved into &lt;code&gt;_s&lt;/code&gt;, which prevents us from using &lt;code&gt;s&lt;/code&gt; again. However, using the underscore by itself doesn&amp;rsquo;t ever bind to the value. Listing 18-22 will compile without any errors because &lt;code&gt;s&lt;/code&gt; doesn&amp;rsquo;t get moved into &lt;code&gt;_&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;s&lt;/code&gt; 値が &lt;code&gt;_s&lt;/code&gt; に移動されるため、エラーを受け取ります。これにより、 &lt;code&gt;s&lt;/code&gt; を再び使用できなくなります。ただし、アンダースコアを単独で使用しても、値にバインドされることはありません。リスト18-22は &lt;code&gt;s&lt;/code&gt; が &lt;code&gt;_&lt;/code&gt; に移動しないため、エラーなしでコンパイルされます。</target>
        </trans-unit>
        <trans-unit id="61f9110a68d84478cf97fc80e4e62fe2b389965b" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ll round out this chapter by talking about the &lt;code&gt;Send&lt;/code&gt; and &lt;code&gt;Sync&lt;/code&gt; traits and how we can use them with custom types.</source>
          <target state="translated">この章では、 &lt;code&gt;Send&lt;/code&gt; および &lt;code&gt;Sync&lt;/code&gt; トレイトと、それらをカスタムタイプで使用する方法について説明します。</target>
        </trans-unit>
        <trans-unit id="b07b0f8b9fff1c6b7489d1f03bbaf11c53f92f25" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ll show you how to rethink the state pattern to get a different set of trade-offs. Rather than encapsulating the states and transitions completely so outside code has no knowledge of them, we&amp;rsquo;ll encode the states into different types. Consequently, Rust&amp;rsquo;s type checking system will prevent attempts to use draft posts where only published posts are allowed by issuing a compiler error.</source>
          <target state="translated">状態パターンを再考して、異なるトレードオフのセットを取得する方法を示します。状態と遷移を完全にカプセル化して外部コードがそれらを認識しないようにするのではなく、状態をさまざまなタイプにエンコードします。その結果、Rustのタイプチェックシステムは、コンパイラエラーを発行して、公開された投稿のみが許可されているドラフト投稿を使用する試みを防ぎます。</target>
        </trans-unit>
        <trans-unit id="627b700f2567a428c4b498681919e2e69479fc97" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ll simulate calling this hypothetical algorithm with the function &lt;code&gt;simulated_expensive_calculation&lt;/code&gt; shown in Listing 13-1, which will print &lt;code&gt;calculating slowly...&lt;/code&gt;, wait for two seconds, and then return whatever number we passed in.</source>
          <target state="translated">リスト13-1に示す関数 &lt;code&gt;simulated_expensive_calculation&lt;/code&gt; 使用してこの仮想アルゴリズムの呼び出しをシミュレートします。これにより、 &lt;code&gt;calculating slowly...&lt;/code&gt; 、2秒待ってから、渡された数値を返します。</target>
        </trans-unit>
        <trans-unit id="5973b041f6a9740c7e6d85ca07367dbed50852e0" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ll start by getting a single-threaded web server working. Before we begin, let&amp;rsquo;s look at a quick overview of the protocols involved in building web servers. The details of these protocols are beyond the scope of this book, but a brief overview will give you the information you need.</source>
          <target state="translated">まず、シングルスレッドのWebサーバーを動作させることから始めます。始める前に、Webサーバーの構築に関連するプロトコルの概要を見てみましょう。これらのプロトコルの詳細はこの本の範囲を超えていますが、簡単な概要で必要な情報を提供します。</target>
        </trans-unit>
        <trans-unit id="060170101757c33938356030dc05849b3282e228" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ll talk about each of these in turn, but first, let&amp;rsquo;s look at why we even need macros when we already have functions.</source>
          <target state="translated">これらのそれぞれについて順番に説明しますが、最初に、すでに関数があるのになぜマクロが必要なのかを見てみましょう。</target>
        </trans-unit>
        <trans-unit id="00042b704a4af242dc3eb83d8f9f0adbd9c9c6f2" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ll test drive the implementation of the functionality that will actually do the searching for the query string in the file contents and produce a list of lines that match the query. We&amp;rsquo;ll add this functionality in a function called &lt;code&gt;search&lt;/code&gt;.</source>
          <target state="translated">実際にファイルの内容でクエリ文字列を検索する機能の実装をテストし、クエリに一致する行のリストを生成します。この機能を &lt;code&gt;search&lt;/code&gt; という関数に追加します。</target>
        </trans-unit>
        <trans-unit id="a6a5b07486e18e4aafc4b7efa3b6df52895ecfa1" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ll use &lt;code&gt;String&lt;/code&gt; as the example here and concentrate on the parts of &lt;code&gt;String&lt;/code&gt; that relate to ownership. These aspects also apply to other complex data types provided by the standard library and that you create. We&amp;rsquo;ll discuss &lt;code&gt;String&lt;/code&gt; in more depth in Chapter 8.</source>
          <target state="translated">ここでは例として &lt;code&gt;String&lt;/code&gt; を使用し、所有権に関連する &lt;code&gt;String&lt;/code&gt; の部分に集中します。これらの側面は、標準ライブラリによって提供され、作成する他の複雑なデータ型にも適用されます。 &lt;code&gt;String&lt;/code&gt; については、第8章で詳しく説明します。</target>
        </trans-unit>
        <trans-unit id="5f26df7e74655da28655e14a9fc6315701535f09" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ll use &lt;code&gt;String&lt;/code&gt; as the example here and concentrate on the parts of &lt;code&gt;String&lt;/code&gt; that relate to ownership. These aspects also apply to other complex data types, whether they are provided by the standard library or created by you. We&amp;rsquo;ll discuss &lt;code&gt;String&lt;/code&gt; in more depth in Chapter 8.</source>
          <target state="translated">We&amp;rsquo;ll use &lt;code&gt;String&lt;/code&gt; as the example here and concentrate on the parts of &lt;code&gt;String&lt;/code&gt; that relate to ownership. These aspects also apply to other complex data types, whether they are provided by the standard library or created by you. We&amp;rsquo;ll discuss &lt;code&gt;String&lt;/code&gt; in more depth in Chapter 8.</target>
        </trans-unit>
        <trans-unit id="6fdb67ce55cd6e4b067c62180346b3dbc3180259" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ll use the code in Listing 12-24 to change how error messages are printed. Because of the refactoring we did earlier in this chapter, all the code that prints error messages is in one function, &lt;code&gt;main&lt;/code&gt;. The standard library provides the &lt;code&gt;eprintln!&lt;/code&gt; macro that prints to the standard error stream, so let&amp;rsquo;s change the two places we were calling &lt;code&gt;println!&lt;/code&gt; to print errors to use &lt;code&gt;eprintln!&lt;/code&gt; instead.</source>
          <target state="translated">リスト12-24のコードを使用して、エラーメッセージの出力方法を変更します。この章の前半で行ったリファクタリングのため、エラーメッセージを出力するすべてのコードは1つの関数 &lt;code&gt;main&lt;/code&gt; に含まれています。標準ライブラリは &lt;code&gt;eprintln!&lt;/code&gt; 提供します！標準エラーストリームに出力するマクロなので、 &lt;code&gt;println!&lt;/code&gt; と呼んでいた2つの場所を変更しましょう。エラーを印刷して &lt;code&gt;eprintln!&lt;/code&gt; を使用します！代わりに。</target>
        </trans-unit>
        <trans-unit id="7be7c248999b3ea861a86839bb6847251beded8a" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;re allowed to change the value that &lt;code&gt;x&lt;/code&gt; binds to from &lt;code&gt;5&lt;/code&gt; to &lt;code&gt;6&lt;/code&gt; when &lt;code&gt;mut&lt;/code&gt; is used. In some cases, you&amp;rsquo;ll want to make a variable mutable because it makes the code more convenient to write than if it had only immutable variables.</source>
          <target state="translated">&lt;code&gt;mut&lt;/code&gt; が使用されている場合、 &lt;code&gt;x&lt;/code&gt; がバインドする値を &lt;code&gt;5&lt;/code&gt; から &lt;code&gt;6&lt;/code&gt; に変更できます。場合によっては、変数を変更可能にする必要があります。これにより、コードが不変変数のみの場合よりもコードの記述が便利になります。</target>
        </trans-unit>
        <trans-unit id="85a800cd9f89b371e568b4c783baa80e895e6025" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;re creating an &lt;code&gt;IpAddr&lt;/code&gt; instance by parsing a hardcoded string. We can see that &lt;code&gt;127.0.0.1&lt;/code&gt; is a valid IP address, so it&amp;rsquo;s acceptable to use &lt;code&gt;unwrap&lt;/code&gt; here. However, having a hardcoded, valid string doesn&amp;rsquo;t change the return type of the &lt;code&gt;parse&lt;/code&gt; method: we still get a &lt;code&gt;Result&lt;/code&gt; value, and the compiler will still make us handle the &lt;code&gt;Result&lt;/code&gt; as if the &lt;code&gt;Err&lt;/code&gt; variant is a possibility because the compiler isn&amp;rsquo;t smart enough to see that this string is always a valid IP address. If the IP address string came from a user rather than being hardcoded into the program and therefore &lt;em&gt;did&lt;/em&gt; have a possibility of failure, we&amp;rsquo;d definitely want to handle the &lt;code&gt;Result&lt;/code&gt; in a more robust way instead.</source>
          <target state="translated">ハードコードされた文字列を解析して、 &lt;code&gt;IpAddr&lt;/code&gt; インスタンスを作成しています。 &lt;code&gt;127.0.0.1&lt;/code&gt; が有効なIPアドレスであることを確認できるため、ここで &lt;code&gt;unwrap&lt;/code&gt; を使用しても問題ありません。ただし、ハードコードされた有効な文字列があっても、 &lt;code&gt;parse&lt;/code&gt; メソッドの戻り値の型は変更されません。 &lt;code&gt;Result&lt;/code&gt; 値が引き続き取得され、コンパイラーは &lt;code&gt;Result&lt;/code&gt; が &lt;code&gt;Err&lt;/code&gt; バリアントの可能性があるかのように処理します。この文字列が常に有効なIPアドレスであることを確認するのに十分賢い。 IPアドレスの文字列ではなくプログラムにハードコードされているよりも、ユーザーから来たので、場合&lt;em&gt;でし&lt;/em&gt;故障の可能性を持って、我々は間違いなく処理したいと思います &lt;code&gt;Result&lt;/code&gt; の代わりに、より堅牢な方法で。</target>
        </trans-unit>
        <trans-unit id="7a98461520cf94e325231f61b61fe6b7361a4963" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;re getting into more complex programs in which operations can fail, so, it&amp;rsquo;s a perfect time to discuss error handling. We&amp;rsquo;ll do that next!</source>
          <target state="translated">操作が失敗する可能性のある、より複雑なプログラムに入っているので、エラー処理について説明する絶好の機会です。次にやります！</target>
        </trans-unit>
        <trans-unit id="1bec095d3bfed69e34b314dbfade082c4c12b16b" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;re not quite done with this line of code. Although what we&amp;rsquo;ve discussed so far is a single line of text, it&amp;rsquo;s only the first part of the single logical line of code. The second part is this method:</source>
          <target state="translated">このコード行はまだ完全ではありません。これまで説明してきたのは1行のテキストですが、これは1行の論理的なコードの最初の部分にすぎません。2番目の部分はこのメソッドです。</target>
        </trans-unit>
        <trans-unit id="e8fdc745ba3517693a4cefb98c523891480464ad" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;re now iterating over the workers twice: once to send one &lt;code&gt;Terminate&lt;/code&gt; message for each worker and once to call &lt;code&gt;join&lt;/code&gt; on each worker&amp;rsquo;s thread. If we tried to send a message and &lt;code&gt;join&lt;/code&gt; immediately in the same loop, we couldn&amp;rsquo;t guarantee that the worker in the current iteration would be the one to get the message from the channel.</source>
          <target state="translated">現在、ワーカーを2回繰り返しています。1回は各ワーカーに1つの &lt;code&gt;Terminate&lt;/code&gt; メッセージを送信するためのもので、1回は各ワーカーのスレッドで &lt;code&gt;join&lt;/code&gt; を呼び出すためのものです。メッセージを送信してすぐに同じループに &lt;code&gt;join&lt;/code&gt; しようとした場合、現在のイテレーションのワーカーがチャネルからメッセージを取得するワーカーであることを保証できません。</target>
        </trans-unit>
        <trans-unit id="3043bedf342450c930adba158d22a65820a93654" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;re providing Rust with a type annotation within the angle brackets, which indicates we want to call the &lt;code&gt;baby_name&lt;/code&gt; method from the &lt;code&gt;Animal&lt;/code&gt; trait as implemented on &lt;code&gt;Dog&lt;/code&gt; by saying that we want to treat the &lt;code&gt;Dog&lt;/code&gt; type as an &lt;code&gt;Animal&lt;/code&gt; for this function call. This code will now print what we want:</source>
          <target state="translated">山かっこ内の型注釈をRustに提供しています。これは、この関数呼び出しでは &lt;code&gt;Dog&lt;/code&gt; 型を &lt;code&gt;Animal&lt;/code&gt; として扱いたいということで、 &lt;code&gt;Dog&lt;/code&gt; に実装されている &lt;code&gt;Animal&lt;/code&gt; トレイトから &lt;code&gt;baby_name&lt;/code&gt; メソッドを呼び出すことを示しています。このコードは今私たちが望むものを出力します：</target>
        </trans-unit>
        <trans-unit id="4ddf3a6c4a7ff9bc3976c2dddb0193cf3c8094f5" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;re receiving only warnings now, which means it compiles! But note that if you try &lt;code&gt;cargo run&lt;/code&gt; and make a request in the browser, you&amp;rsquo;ll see the errors in the browser that we saw at the beginning of the chapter. Our library isn&amp;rsquo;t actually calling the closure passed to &lt;code&gt;execute&lt;/code&gt; yet!</source>
          <target state="translated">現在、警告のみが表示されています。つまり、コンパイルされます。ただし、 &lt;code&gt;cargo run&lt;/code&gt; を実行してブラウザでリクエストを行うと、この章の冒頭で見たエラーがブラウザに表示されることに注意してください。私たちのライブラリは、 &lt;code&gt;execute&lt;/code&gt; 渡されたクロージャを実際に呼び出していません！</target>
        </trans-unit>
        <trans-unit id="39e24358659ae04dcbe82e2100b6975e897d6a38" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;re still collecting the command line arguments into a vector, but instead of assigning the argument value at index 1 to the variable &lt;code&gt;query&lt;/code&gt; and the argument value at index 2 to the variable &lt;code&gt;filename&lt;/code&gt; within the &lt;code&gt;main&lt;/code&gt; function, we pass the whole vector to the &lt;code&gt;parse_config&lt;/code&gt; function. The &lt;code&gt;parse_config&lt;/code&gt; function then holds the logic that determines which argument goes in which variable and passes the values back to &lt;code&gt;main&lt;/code&gt;. We still create the &lt;code&gt;query&lt;/code&gt; and &lt;code&gt;filename&lt;/code&gt; variables in &lt;code&gt;main&lt;/code&gt;, but &lt;code&gt;main&lt;/code&gt; no longer has the responsibility of determining how the command line arguments and variables correspond.</source>
          <target state="translated">コマンドライン引数をベクトルに収集していますが、インデックス1の引数値を変数 &lt;code&gt;query&lt;/code&gt; に割り当て、インデックス2の引数値を &lt;code&gt;main&lt;/code&gt; 関数内の変数 &lt;code&gt;filename&lt;/code&gt; に割り当てる代わりに、ベクトル全体を &lt;code&gt;parse_config&lt;/code&gt; 関数。次に、 &lt;code&gt;parse_config&lt;/code&gt; 関数は、どの引数がどの変数に入り、値を &lt;code&gt;main&lt;/code&gt; に戻すかを決定するロジックを保持します。 &lt;code&gt;query&lt;/code&gt; 変数と &lt;code&gt;filename&lt;/code&gt; 変数はまだ &lt;code&gt;main&lt;/code&gt; で作成していますが、 &lt;code&gt;main&lt;/code&gt; コマンドライン引数と変数がどのように対応するかを決定する責任がなくなりました。</target>
        </trans-unit>
        <trans-unit id="6a2a09503d50f0f83deb42b9b3c8d235d3d20cd7" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;re still using a &lt;code&gt;for&lt;/code&gt; loop to return each line from &lt;code&gt;search&lt;/code&gt; and print it.</source>
          <target state="translated">まだ &lt;code&gt;for&lt;/code&gt; ループを使用して、 &lt;code&gt;search&lt;/code&gt; から各行を返し、出力しています。</target>
        </trans-unit>
        <trans-unit id="704d6708be51c898fd0ee7c005925dabd11417ed" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;re still working on this line of code. Although we&amp;rsquo;re now discussing a third line of text, it&amp;rsquo;s still part of a single logical line of code. The next part is this method:</source>
          <target state="translated">We&amp;rsquo;re still working on this line of code. Although we&amp;rsquo;re now discussing a third line of text, it&amp;rsquo;s still part of a single logical line of code. The next part is this method:</target>
        </trans-unit>
        <trans-unit id="c5dc7c10dc508f133971e52b437dcfabc8c9d8d9" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;re using another variation of the &lt;code&gt;List&lt;/code&gt; definition from Listing 15-5. The second element in the &lt;code&gt;Cons&lt;/code&gt; variant is now &lt;code&gt;RefCell&amp;lt;Rc&amp;lt;List&amp;gt;&amp;gt;&lt;/code&gt;, meaning that instead of having the ability to modify the &lt;code&gt;i32&lt;/code&gt; value as we did in Listing 15-24, we want to modify which &lt;code&gt;List&lt;/code&gt; value a &lt;code&gt;Cons&lt;/code&gt; variant is pointing to. We&amp;rsquo;re also adding a &lt;code&gt;tail&lt;/code&gt; method to make it convenient for us to access the second item if we have a &lt;code&gt;Cons&lt;/code&gt; variant.</source>
          <target state="translated">リスト15-5の &lt;code&gt;List&lt;/code&gt; 定義の別のバリエーションを使用しています。 &lt;code&gt;Cons&lt;/code&gt; バリアントの2番目の要素は &lt;code&gt;RefCell&amp;lt;Rc&amp;lt;List&amp;gt;&amp;gt;&lt;/code&gt; になりました。つまり、リスト15-24で行ったように &lt;code&gt;i32&lt;/code&gt; 値を変更する代わりに、 &lt;code&gt;Cons&lt;/code&gt; バリアントが指している &lt;code&gt;List&lt;/code&gt; 値を変更します。に。また、 &lt;code&gt;Cons&lt;/code&gt; バリアントがある場合に2番目の項目にアクセスしやすくするために、 &lt;code&gt;tail&lt;/code&gt; メソッドを追加しています。</target>
        </trans-unit>
        <trans-unit id="e0c173af0bd25448bf48e4ff0f52351084a37793" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;re using the &lt;code&gt;is_err&lt;/code&gt; method on the &lt;code&gt;Result&lt;/code&gt; to check whether it&amp;rsquo;s an error and therefore unset, which means it &lt;em&gt;should&lt;/em&gt; do a case-sensitive search. If the &lt;code&gt;CASE_INSENSITIVE&lt;/code&gt; environment variable is set to anything, &lt;code&gt;is_err&lt;/code&gt; will return false and the program will perform a case-insensitive search. We don&amp;rsquo;t care about the &lt;em&gt;value&lt;/em&gt; of the environment variable, just whether it&amp;rsquo;s set or unset, so we&amp;rsquo;re checking &lt;code&gt;is_err&lt;/code&gt; rather than using &lt;code&gt;unwrap&lt;/code&gt;, &lt;code&gt;expect&lt;/code&gt;, or any of the other methods we&amp;rsquo;ve seen on &lt;code&gt;Result&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Result&lt;/code&gt; で &lt;code&gt;is_err&lt;/code&gt; メソッドを使用して、それがエラーであり、したがって設定されていないかどうかを確認しています。つまり、大文字と小文字を区別した検索を実行する&lt;em&gt;必要&lt;/em&gt;があります。場合 &lt;code&gt;CASE_INSENSITIVE&lt;/code&gt; の環境変数が何に設定されている、 &lt;code&gt;is_err&lt;/code&gt; は falseを返し、プログラムは大文字と小文字を区別しない検索を実行します。私たちは気にしない&lt;em&gt;値&lt;/em&gt;、我々がチェックしているので、ちょうどそれのセットまたは設定解除するかどうか、環境変数の &lt;code&gt;is_err&lt;/code&gt; ではなく、使用して &lt;code&gt;unwrap&lt;/code&gt; 、 &lt;code&gt;expect&lt;/code&gt; 、あるいは我々が上で見てきた他の方法のいずれかの &lt;code&gt;Result&lt;/code&gt; 。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="d56b97467af5db84c05cb413a5fabde32de08385" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ve actually already used statements and expressions. &lt;em&gt;Statements&lt;/em&gt; are instructions that perform some action and do not return a value. &lt;em&gt;Expressions&lt;/em&gt; evaluate to a resulting value. Let&amp;rsquo;s look at some examples.</source>
          <target state="translated">ステートメントと式は既に使用しています。&lt;em&gt;ステートメント&lt;/em&gt;は、何らかのアクションを実行し、値を返さない命令です。&lt;em&gt;式&lt;/em&gt;は、結果の値に評価されます。いくつかの例を見てみましょう。</target>
        </trans-unit>
        <trans-unit id="d8fc6748175101658632d95f9debdd96c25d44d2" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ve added &lt;code&gt;use adder&lt;/code&gt; at the top of the code, which we didn&amp;rsquo;t need in the unit tests. The reason is that each file in the &lt;code&gt;tests&lt;/code&gt; directory is a separate crate, so we need to bring our library into each test crate&amp;rsquo;s scope.</source>
          <target state="translated">We&amp;rsquo;ve added &lt;code&gt;use adder&lt;/code&gt; at the top of the code, which we didn&amp;rsquo;t need in the unit tests. The reason is that each file in the &lt;code&gt;tests&lt;/code&gt; directory is a separate crate, so we need to bring our library into each test crate&amp;rsquo;s scope.</target>
        </trans-unit>
        <trans-unit id="c22b2164f8306680aed3e27380f526ec1c6ded84" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ve added &lt;code&gt;use adder&lt;/code&gt; at the top of the code, which we didn&amp;rsquo;t need in the unit tests. The reason is that each test in the &lt;code&gt;tests&lt;/code&gt; directory is a separate crate, so we need to bring our library into each test crate&amp;rsquo;s scope.</source>
          <target state="translated">ユニットテストでは不要だった &lt;code&gt;use adder&lt;/code&gt; をコードの先頭に追加しました。その理由は、 &lt;code&gt;tests&lt;/code&gt; ディレクトリの各テストが個別のクレートであるため、ライブラリを各テストクレートのスコープに含める必要があるためです。</target>
        </trans-unit>
        <trans-unit id="584b8b954ee114612008442a8b00d97910ff6eab" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ve added a line at the top to bring the standard library&amp;rsquo;s filesystem module into scope. The code for reading the contents of a file to a string should look familiar; we used it in Chapter 12 when we read the contents of a file for our I/O project in Listing 12-4.</source>
          <target state="translated">標準ライブラリのファイルシステムモジュールをスコープに含めるための行を上部に追加しました。ファイルの内容を文字列に読み込むためのコードは見慣れたものに見えるはずです。リスト12-4のI / Oプロジェクトのファイルの内容を読み取るときに、第12章で使用しました。</target>
        </trans-unit>
        <trans-unit id="4c87cb387453e91590c14806fac036a23f89422e" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ve added a new &lt;code&gt;use&lt;/code&gt; line to bring &lt;code&gt;process&lt;/code&gt; from the standard library into scope. The code in the closure that will be run in the error case is only two lines: we print the &lt;code&gt;err&lt;/code&gt; value and then call &lt;code&gt;process::exit&lt;/code&gt;. The &lt;code&gt;process::exit&lt;/code&gt; function will stop the program immediately and return the number that was passed as the exit status code. This is similar to the &lt;code&gt;panic!&lt;/code&gt;-based handling we used in Listing 12-8, but we no longer get all the extra output. Let&amp;rsquo;s try it:</source>
          <target state="translated">標準のライブラリからスコープに &lt;code&gt;process&lt;/code&gt; を取り込むための新しい &lt;code&gt;use&lt;/code&gt; 行を追加しました。エラーの場合に実行されるクロージャーのコードは2行だけです &lt;code&gt;err&lt;/code&gt; 値を出力してから、 &lt;code&gt;process::exit&lt;/code&gt; 呼び出します。 &lt;code&gt;process::exit&lt;/code&gt; 機能は、プログラムを直ちに停止し、終了ステータスコードとして渡された番号を返します。これは &lt;code&gt;panic!&lt;/code&gt; 似ています！リスト12-8で使用したベースの処理ですが、余分な出力をすべて取得することはありません。試してみよう：</target>
        </trans-unit>
        <trans-unit id="7cffa1b480aa410c1dc47385712cedb9b3949a57" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ve added a struct named &lt;code&gt;Config&lt;/code&gt; defined to have fields named &lt;code&gt;query&lt;/code&gt; and &lt;code&gt;filename&lt;/code&gt;. The signature of &lt;code&gt;parse_config&lt;/code&gt; now indicates that it returns a &lt;code&gt;Config&lt;/code&gt; value. In the body of &lt;code&gt;parse_config&lt;/code&gt;, where we used to return string slices that reference &lt;code&gt;String&lt;/code&gt; values in &lt;code&gt;args&lt;/code&gt;, we now define &lt;code&gt;Config&lt;/code&gt; to contain owned &lt;code&gt;String&lt;/code&gt; values. The &lt;code&gt;args&lt;/code&gt; variable in &lt;code&gt;main&lt;/code&gt; is the owner of the argument values and is only letting the &lt;code&gt;parse_config&lt;/code&gt; function borrow them, which means we&amp;rsquo;d violate Rust&amp;rsquo;s borrowing rules if &lt;code&gt;Config&lt;/code&gt; tried to take ownership of the values in &lt;code&gt;args&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;query&lt;/code&gt; と &lt;code&gt;filename&lt;/code&gt; という名前のフィールドを持つように定義された &lt;code&gt;Config&lt;/code&gt; という名前の構造体を追加しました。 &lt;code&gt;parse_config&lt;/code&gt; のシグネチャは、 &lt;code&gt;Config&lt;/code&gt; 値を返すことを示しています。 &lt;code&gt;args&lt;/code&gt; の &lt;code&gt;String&lt;/code&gt; 値を参照する文字列スライスを返すために使用していた &lt;code&gt;parse_config&lt;/code&gt; の本体で、所有する &lt;code&gt;String&lt;/code&gt; 値を含むように &lt;code&gt;Config&lt;/code&gt; を定義します。 &lt;code&gt;args&lt;/code&gt; 中の変数 &lt;code&gt;main&lt;/code&gt; 引数値の所有者であるとだけさせて頂いており &lt;code&gt;parse_config&lt;/code&gt; の場合、我々は錆の借入ルールに違反すると思いますどの手段、機能ボローにそれらを &lt;code&gt;Config&lt;/code&gt; &lt;code&gt;args&lt;/code&gt; の値の所有権を取得しようとしました。</target>
        </trans-unit>
        <trans-unit id="1885fbfa7b60233a91c017c818f49ba0e7b6f717" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ve added some documentation for our &lt;code&gt;ThreadPool&lt;/code&gt; with doc comments. Note that we followed good documentation practices by adding a section that calls out the situations in which our function can panic, as discussed in Chapter 14. Try running &lt;code&gt;cargo doc --open&lt;/code&gt; and clicking the &lt;code&gt;ThreadPool&lt;/code&gt; struct to see what the generated docs for &lt;code&gt;new&lt;/code&gt; look like!</source>
          <target state="translated">&lt;code&gt;ThreadPool&lt;/code&gt; コメント付きのThreadPoolのドキュメントをいくつか追加しました。第14章で説明されているように、関数がパニックになる可能性がある状況を呼び出すセクションを追加することにより、適切なドキュメントプラクティスに従っていることに注意してください &lt;code&gt;cargo doc --open&lt;/code&gt; を実行し、 &lt;code&gt;ThreadPool&lt;/code&gt; 構造体をクリックして、 &lt;code&gt;new&lt;/code&gt; 外観の生成されたドキュメントを確認してくださいお気に入り！</target>
        </trans-unit>
        <trans-unit id="033bfc676c905568043c961c9b266296859d8c02" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ve added the &lt;code&gt;request_review&lt;/code&gt; method to the &lt;code&gt;State&lt;/code&gt; trait; all types that implement the trait will now need to implement the &lt;code&gt;request_review&lt;/code&gt; method. Note that rather than having &lt;code&gt;self&lt;/code&gt;, &lt;code&gt;&amp;amp;self&lt;/code&gt;, or &lt;code&gt;&amp;amp;mut self&lt;/code&gt; as the first parameter of the method, we have &lt;code&gt;self: Box&amp;lt;Self&amp;gt;&lt;/code&gt;. This syntax means the method is only valid when called on a &lt;code&gt;Box&lt;/code&gt; holding the type. This syntax takes ownership of &lt;code&gt;Box&amp;lt;Self&amp;gt;&lt;/code&gt;, invalidating the old state so the state value of the &lt;code&gt;Post&lt;/code&gt; can transform into a new state.</source>
          <target state="translated">&lt;code&gt;request_review&lt;/code&gt; メソッドを &lt;code&gt;State&lt;/code&gt; トレイトに追加しました。トレイトを実装するすべての型は、 &lt;code&gt;request_review&lt;/code&gt; メソッドを実装する必要があります。メソッドの最初のパラメーターとして &lt;code&gt;self&lt;/code&gt; 、 &lt;code&gt;&amp;amp;self&lt;/code&gt; 、または &lt;code&gt;&amp;amp;mut self&lt;/code&gt; ではなく、 &lt;code&gt;self: Box&amp;lt;Self&amp;gt;&lt;/code&gt; があることに注意してください。この構文は、メソッドが型を保持する &lt;code&gt;Box&lt;/code&gt; 呼び出された場合にのみ有効であることを意味します。この構文は &lt;code&gt;Box&amp;lt;Self&amp;gt;&lt;/code&gt; 所有権を取得し、古い状態を無効にして、 &lt;code&gt;Post&lt;/code&gt; の状態値を新しい状態に変換できるようにします。</target>
        </trans-unit>
        <trans-unit id="c2d6bca1ece5398cc0aaa45cdd8c28d538813cdf" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ve already encountered a few smart pointers in this book, such as &lt;code&gt;String&lt;/code&gt; and &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; in Chapter 8, although we didn&amp;rsquo;t call them smart pointers at the time. Both these types count as smart pointers because they own some memory and allow you to manipulate it. They also have metadata (such as their capacity) and extra capabilities or guarantees (such as with &lt;code&gt;String&lt;/code&gt; ensuring its data will always be valid UTF-8).</source>
          <target state="translated">この本では、第8章の &lt;code&gt;String&lt;/code&gt; や &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; など、すでにいくつかのスマートポインターに出会いましたが、現時点ではそれらをスマートポインターと呼んでいません。これらの型はどちらもメモリを所有していて、それを操作できるため、スマートポインタとしてカウントされます。また、メタデータ（容量など）と追加の機能または保証（ &lt;code&gt;String&lt;/code&gt; を使用するなど、データが常に有効なUTF-8であることを保証するなど）もあります。</target>
        </trans-unit>
        <trans-unit id="5f665940216ffe5d50883d2554e20cbd268101e9" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ve already seen string literals, where a string value is hardcoded into our program. String literals are convenient, but they aren&amp;rsquo;t suitable for every situation in which we may want to use text. One reason is that they&amp;rsquo;re immutable. Another is that not every string value can be known when we write our code: for example, what if we want to take user input and store it? For these situations, Rust has a second string type, &lt;code&gt;String&lt;/code&gt;. This type is allocated on the heap and as such is able to store an amount of text that is unknown to us at compile time. You can create a &lt;code&gt;String&lt;/code&gt; from a string literal using the &lt;code&gt;from&lt;/code&gt; function, like so:</source>
          <target state="translated">文字列値がプログラムにハードコードされている文字列リテラルはすでに見ました。文字列リテラルは便利ですが、テキストを使用したいすべての状況には適していません。 1つの理由は、それらが不変であることです。もう1つは、コードを作成するときにすべての文字列値がわかるわけではないことです。たとえば、ユーザー入力を取得して保存したい場合はどうでしょうか。これらの状況では、Rustには2番目の文字列型 &lt;code&gt;String&lt;/code&gt; があります。このタイプはヒープに割り当てられるため、コンパイル時に不明なテキストを格納できます。あなたは、作成することができます &lt;code&gt;String&lt;/code&gt; 使用して、文字列リテラルから &lt;code&gt;from&lt;/code&gt; そうのように、機能：</target>
        </trans-unit>
        <trans-unit id="afec387c328832d115c9aaceeb2e235c2cecfd8f" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ve brought &lt;code&gt;std::thread&lt;/code&gt; into scope in the library crate, because we&amp;rsquo;re using &lt;code&gt;thread::JoinHandle&lt;/code&gt; as the type of the items in the vector in &lt;code&gt;ThreadPool&lt;/code&gt;.</source>
          <target state="translated">我々は持ってきた &lt;code&gt;std::thread&lt;/code&gt; 私たちが使用しているので、ライブラリクレートにスコープに &lt;code&gt;thread::JoinHandle&lt;/code&gt; 中のベクター内のアイテムの種類として &lt;code&gt;ThreadPool&lt;/code&gt; の。</target>
        </trans-unit>
        <trans-unit id="d06c508a695440c6e3d61967e906e12cd55df3a8" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ve changed the name of the field on &lt;code&gt;ThreadPool&lt;/code&gt; from &lt;code&gt;threads&lt;/code&gt; to &lt;code&gt;workers&lt;/code&gt; because it&amp;rsquo;s now holding &lt;code&gt;Worker&lt;/code&gt; instances instead of &lt;code&gt;JoinHandle&amp;lt;()&amp;gt;&lt;/code&gt; instances. We use the counter in the &lt;code&gt;for&lt;/code&gt; loop as an argument to &lt;code&gt;Worker::new&lt;/code&gt;, and we store each new &lt;code&gt;Worker&lt;/code&gt; in the vector named &lt;code&gt;workers&lt;/code&gt;.</source>
          <target state="translated">私たちは、上のフィールドの名前を変更した &lt;code&gt;ThreadPool&lt;/code&gt; から &lt;code&gt;threads&lt;/code&gt; への &lt;code&gt;workers&lt;/code&gt; 、それが今持っているため &lt;code&gt;Worker&lt;/code&gt; の代わりに、インスタンス &lt;code&gt;JoinHandle&amp;lt;()&amp;gt;&lt;/code&gt; のインスタンスを。 &lt;code&gt;for&lt;/code&gt; ループのカウンターを &lt;code&gt;Worker::new&lt;/code&gt; 引数として使用し、新しい &lt;code&gt;Worker&lt;/code&gt; をそれぞれ、 &lt;code&gt;workers&lt;/code&gt; という名前のベクターに格納します。</target>
        </trans-unit>
        <trans-unit id="b6773f3d57e1c56123d2fb2caa6f401e95f3ea12" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ve chosen &lt;code&gt;&amp;amp;self&lt;/code&gt; here for the same reason we used &lt;code&gt;&amp;amp;Rectangle&lt;/code&gt; in the function version: we don&amp;rsquo;t want to take ownership, and we just want to read the data in the struct, not write to it. If we wanted to change the instance that we&amp;rsquo;ve called the method on as part of what the method does, we&amp;rsquo;d use &lt;code&gt;&amp;amp;mut self&lt;/code&gt; as the first parameter. Having a method that takes ownership of the instance by using just &lt;code&gt;self&lt;/code&gt; as the first parameter is rare; this technique is usually used when the method transforms &lt;code&gt;self&lt;/code&gt; into something else and you want to prevent the caller from using the original instance after the transformation.</source>
          <target state="translated">ここでは、関数バージョンで &lt;code&gt;&amp;amp;Rectangle&lt;/code&gt; を使用したのと同じ理由で &lt;code&gt;&amp;amp;self&lt;/code&gt; を選択しました。所有権を取得するのではなく、構造体のデータを読み取るのではなく、読み取るだけです。メソッドの機能の一部としてメソッドを呼び出したインスタンスを変更する場合は、最初のパラメーターとして &lt;code&gt;&amp;amp;mut self&lt;/code&gt; を使用します。最初のパラメーターとして &lt;code&gt;self&lt;/code&gt; だけを使用してインスタンスの所有権を取得するメソッドを持つことはまれです。この手法は通常、メソッドが &lt;code&gt;self&lt;/code&gt; を何かに変換し、変換後に呼び出し元が元のインスタンスを使用しないようにする場合に使用されます。</target>
        </trans-unit>
        <trans-unit id="c1db49e2d4e1cde132781769873263a6ad0787ce" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ve created raw pointers by using &lt;code&gt;as&lt;/code&gt; to cast an immutable and a mutable reference into their corresponding raw pointer types. Because we created them directly from references guaranteed to be valid, we know these particular raw pointers are valid, but we can&amp;rsquo;t make that assumption about just any raw pointer.</source>
          <target state="translated">&lt;code&gt;as&lt;/code&gt; を使用して未変更ポインタと変更可能な参照を対応する未処理ポインタ型にキャストすることにより、未処理ポインタを作成しました。有効であることが保証されている参照から直接作成したため、これらの特定の未加工ポインターが有効であることはわかっていますが、未加工ポインターだけについてその仮定を行うことはできません。</target>
        </trans-unit>
        <trans-unit id="bffcb1376e08b8bdf566e588ca56d6643d86c91b" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ve defined a macro that can take any number of arguments of any type and can generate code to create a vector containing the specified elements.</source>
          <target state="translated">任意のタイプの任意の数の引数を取り、指定された要素を含むベクトルを作成するコードを生成できるマクロを定義しました。</target>
        </trans-unit>
        <trans-unit id="51c190acab3ae3b5901bd943815d252d578b8d41" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ve described most of the advanced features in this chapter as being rarely needed. Associated types are somewhere in the middle: they&amp;rsquo;re used more rarely than features explained in the rest of the book but more commonly than many of the other features discussed in this chapter.</source>
          <target state="translated">この章では、ほとんどの高度な機能が必要になることはほとんどありませんでした。関連する型は途中のどこかにあります。それらは、本の残りの部分で説明されている機能よりもまれに使用されますが、この章で説明されている他の多くの機能よりも一般的に使用されます。</target>
        </trans-unit>
        <trans-unit id="06deefd5074e90766703296697ebf8ccb43b0e5d" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ve destructured enums earlier in this book, for example, when we destructured &lt;code&gt;Option&amp;lt;i32&amp;gt;&lt;/code&gt; in Listing 6-5 in Chapter 6. One detail we haven&amp;rsquo;t mentioned explicitly is that the pattern to destructure an enum should correspond to the way the data stored within the enum is defined. As an example, in Listing 18-15 we use the &lt;code&gt;Message&lt;/code&gt; enum from Listing 6-2 and write a &lt;code&gt;match&lt;/code&gt; with patterns that will destructure each inner value.</source>
          <target state="translated">たとえば、第6章のリスト6-5で &lt;code&gt;Option&amp;lt;i32&amp;gt;&lt;/code&gt; を分解したときに、この本の前半で列挙型を分解しました。明示的に言及していない詳細の1つは、列挙型を分解するパターンは、 enum内に格納されるデータが定義されます。例として、リスト18-15では、リスト6-2の &lt;code&gt;Message&lt;/code&gt; 列挙を使用して、各内部値を分解するパターンとの &lt;code&gt;match&lt;/code&gt; を記述しています。</target>
        </trans-unit>
        <trans-unit id="eb6277ca606742a1b968d8228027cda7b90d3f30" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ve given the code an out! This code is perfectly valid, although it means we cannot use an irrefutable pattern without receiving an error. If we give &lt;code&gt;if let&lt;/code&gt; a pattern that will always match, such as &lt;code&gt;x&lt;/code&gt;, as shown in Listing 18-10, it will not compile.</source>
          <target state="translated">コードを公開しました！このコードは完全に有効ですが、エラーを受信せずに反駁できないパターンを使用することはできません。我々が与えた場合 &lt;code&gt;if let&lt;/code&gt; 、常にのような、マッチするパターン &lt;code&gt;x&lt;/code&gt; 、リスト18-10で示されるように、それがコンパイルされません。</target>
        </trans-unit>
        <trans-unit id="78dee02791985c19ffc271569fd60c5a8fc8dade" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ve given the code an out! This code is perfectly valid, although it means we cannot use an irrefutable pattern without receiving an error. If we give &lt;code&gt;if let&lt;/code&gt; a pattern that will always match, such as &lt;code&gt;x&lt;/code&gt;, as shown in Listing 18-10, the compiler will give a warning.</source>
          <target state="translated">We&amp;rsquo;ve given the code an out! This code is perfectly valid, although it means we cannot use an irrefutable pattern without receiving an error. If we give &lt;code&gt;if let&lt;/code&gt; a pattern that will always match, such as &lt;code&gt;x&lt;/code&gt; , as shown in Listing 18-10, the compiler will give a warning.</target>
        </trans-unit>
        <trans-unit id="9288497ed026aec5cddf626c274f65076b889591" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ve hardcoded the variable &lt;code&gt;simulated_user_specified_value&lt;/code&gt; as 10 and the variable &lt;code&gt;simulated_random_number&lt;/code&gt; as 7 for simplicity&amp;rsquo;s sake; in an actual program, we&amp;rsquo;d get the intensity number from the app frontend, and we&amp;rsquo;d use the &lt;code&gt;rand&lt;/code&gt; crate to generate a random number, as we did in the Guessing Game example in Chapter 2. The &lt;code&gt;main&lt;/code&gt; function calls a &lt;code&gt;generate_workout&lt;/code&gt; function with the simulated input values.</source>
          <target state="translated">わかりやすくするために、変数 &lt;code&gt;simulated_user_specified_value&lt;/code&gt; を10、変数 &lt;code&gt;simulated_random_number&lt;/code&gt; を7にハードコードしました。実際のプログラムでは、アプリのフロントエンドから強度値を取得し、第2章の推測ゲームの例で行ったように、ランダムクレートを使用して &lt;code&gt;rand&lt;/code&gt; を生成します。 &lt;code&gt;main&lt;/code&gt; 関数は、 &lt;code&gt;generate_workout&lt;/code&gt; 関数を呼び出しますシミュレートされた入力値。</target>
        </trans-unit>
        <trans-unit id="5e36cd45124891f0ced7a53981629ff72590f283" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ve introduced three new crates: &lt;code&gt;proc_macro&lt;/code&gt;, &lt;a href=&quot;https://crates.io/crates/syn&quot;&gt;&lt;code&gt;syn&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;https://crates.io/crates/quote&quot;&gt;&lt;code&gt;quote&lt;/code&gt;&lt;/a&gt;. The &lt;code&gt;proc_macro&lt;/code&gt; crate comes with Rust, so we didn&amp;rsquo;t need to add that to the dependencies in &lt;em&gt;Cargo.toml&lt;/em&gt;. The &lt;code&gt;proc_macro&lt;/code&gt; crate is the compiler&amp;rsquo;s API that allows us to read and manipulate Rust code from our code.</source>
          <target state="translated">3つの新しいクレート、 &lt;code&gt;proc_macro&lt;/code&gt; 、&lt;a href=&quot;https://crates.io/crates/syn&quot;&gt; &lt;code&gt;syn&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;https://crates.io/crates/quote&quot;&gt; &lt;code&gt;quote&lt;/code&gt; &lt;/a&gt;が導入されました。 &lt;code&gt;proc_macro&lt;/code&gt; 我々が依存関係にそれを追加する必要はありませんでしたので、クレートは、錆が付属しています&lt;em&gt;Cargo.toml&lt;/em&gt;。 &lt;code&gt;proc_macro&lt;/code&gt; クレートは、私たちは私たちのコードから錆コードを読み、操作することができますコンパイラのAPIです。</target>
        </trans-unit>
        <trans-unit id="0ad45439c6472977b496b46c9e8ec344b7d03941" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ve made liberal use of the &lt;code&gt;pub&lt;/code&gt; keyword: on &lt;code&gt;Config&lt;/code&gt;, on its fields and its &lt;code&gt;new&lt;/code&gt; method, and on the &lt;code&gt;run&lt;/code&gt; function. We now have a library crate that has a public API that we can test!</source>
          <target state="translated">私たちは &lt;code&gt;pub&lt;/code&gt; キーワードを自由に使用しました： &lt;code&gt;Config&lt;/code&gt; 、そのフィールドとその &lt;code&gt;new&lt;/code&gt; メソッド、そして &lt;code&gt;run&lt;/code&gt; 関数です。これで、テストできるパブリックAPIを持つライブラリクレートができました。</target>
        </trans-unit>
        <trans-unit id="93d9e35440edfc2a27a289759d47f3243926cd99" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ve made some small and straightforward changes: we pass the receiving end of the channel into &lt;code&gt;Worker::new&lt;/code&gt;, and then we use it inside the closure.</source>
          <target state="translated">小さな簡単な変更をいくつか加えました。チャネルの受信側を &lt;code&gt;Worker::new&lt;/code&gt; に渡し、クロージャー内で使用します。</target>
        </trans-unit>
        <trans-unit id="56995a6860da00dba94b79267ee87621a35cfd58" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ve made three significant changes here. First, we changed the return type of the &lt;code&gt;run&lt;/code&gt; function to &lt;code&gt;Result&amp;lt;(), Box&amp;lt;dyn Error&amp;gt;&amp;gt;&lt;/code&gt;. This function previously returned the unit type, &lt;code&gt;()&lt;/code&gt;, and we keep that as the value returned in the &lt;code&gt;Ok&lt;/code&gt; case.</source>
          <target state="translated">ここで3つの重要な変更を行いました。まず、 &lt;code&gt;run&lt;/code&gt; 関数の戻り値の型を &lt;code&gt;Result&amp;lt;(), Box&amp;lt;dyn Error&amp;gt;&amp;gt;&lt;/code&gt; 。この関数は以前にユニットタイプ &lt;code&gt;()&lt;/code&gt; を返しましたが、それを &lt;code&gt;Ok&lt;/code&gt; 場合に返される値として保持します。</target>
        </trans-unit>
        <trans-unit id="7aef292d2641df4649db03b9163b74c003c21be2" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ve made two changes in the body of the &lt;code&gt;new&lt;/code&gt; function: instead of calling &lt;code&gt;panic!&lt;/code&gt; when the user doesn&amp;rsquo;t pass enough arguments, we now return an &lt;code&gt;Err&lt;/code&gt; value, and we&amp;rsquo;ve wrapped the &lt;code&gt;Config&lt;/code&gt; return value in an &lt;code&gt;Ok&lt;/code&gt;. These changes make the function conform to its new type signature.</source>
          <target state="translated">&lt;code&gt;new&lt;/code&gt; 関数の本体に2つの変更を加えました &lt;code&gt;panic!&lt;/code&gt; を呼び出す代わりに！ユーザーが十分な引数を渡さなかった場合は、 &lt;code&gt;Err&lt;/code&gt; 値を返し、 &lt;code&gt;Config&lt;/code&gt; の戻り値を &lt;code&gt;Ok&lt;/code&gt; でラップしました。これらの変更により、関数は新しい型シグネチャに準拠します。</target>
        </trans-unit>
        <trans-unit id="be1fafd103cb85a28b4ca20cff35d635b76880a6" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ve mentioned that in Rust, we refrain from calling structs and enums &amp;ldquo;objects&amp;rdquo; to distinguish them from other languages&amp;rsquo; objects. In a struct or enum, the data in the struct fields and the behavior in &lt;code&gt;impl&lt;/code&gt; blocks are separated, whereas in other languages, the data and behavior combined into one concept is often labeled an object. However, trait objects &lt;em&gt;are&lt;/em&gt; more like objects in other languages in the sense that they combine data and behavior. But trait objects differ from traditional objects in that we can&amp;rsquo;t add data to a trait object. Trait objects aren&amp;rsquo;t as generally useful as objects in other languages: their specific purpose is to allow abstraction across common behavior.</source>
          <target state="translated">Rustでは、構造体や列挙型の「オブジェクト」を呼び出して他の言語のオブジェクトと区別することを控えています。構造体または列挙型では、構造体フィールドのデータと &lt;code&gt;impl&lt;/code&gt; ブロックの動作は分離されますが、他の言語では、1つの概念に結合されたデータと動作は、多くの場合オブジェクトとラベル付けされます。ただし、特性オブジェクト&lt;em&gt;は&lt;/em&gt;、データと動作を組み合わせるという意味で、他の言語のオブジェクトに似ています。ただし、特性オブジェクトは、特性オブジェクトにデータを追加できないという点で従来のオブジェクトとは異なります。トレイトオブジェクトは他の言語のオブジェクトほど一般的には役に立ちません。それらの特定の目的は、一般的な動作全体で抽象化できるようにすることです。</target>
        </trans-unit>
        <trans-unit id="d6a7a8ffdb70b17f8f4c294d0eea3a1bf35ddd50" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ve moved the creation of the new &lt;code&gt;String&lt;/code&gt; in &lt;code&gt;s&lt;/code&gt; to the beginning of the function; that part hasn&amp;rsquo;t changed. Instead of creating a variable &lt;code&gt;f&lt;/code&gt;, we&amp;rsquo;ve chained the call to &lt;code&gt;read_to_string&lt;/code&gt; directly onto the result of &lt;code&gt;File::open(&quot;hello.txt&quot;)?&lt;/code&gt;. We still have a &lt;code&gt;?&lt;/code&gt; at the end of the &lt;code&gt;read_to_string&lt;/code&gt; call, and we still return an &lt;code&gt;Ok&lt;/code&gt; value containing the username in &lt;code&gt;s&lt;/code&gt; when both &lt;code&gt;File::open&lt;/code&gt; and &lt;code&gt;read_to_string&lt;/code&gt; succeed rather than returning errors. The functionality is again the same as in Listing 9-6 and Listing 9-7; this is just a different, more ergonomic way to write it.</source>
          <target state="translated">私たちは、新しいの創造移動した &lt;code&gt;String&lt;/code&gt; 中 &lt;code&gt;s&lt;/code&gt; 関数の先頭にします。その部分は変わっていません。変数 &lt;code&gt;f&lt;/code&gt; を作成する代わりに、 &lt;code&gt;read_to_string&lt;/code&gt; の呼び出しを &lt;code&gt;File::open(&quot;hello.txt&quot;)?&lt;/code&gt; の結果に直接チェーンしましたか？。まだあり &lt;code&gt;?&lt;/code&gt; &lt;code&gt;read_to_string&lt;/code&gt; 呼び出しの最後で、 &lt;code&gt;File::open&lt;/code&gt; と &lt;code&gt;read_to_string&lt;/code&gt; の両方が成功した場合でも、エラーを返すのではなく、 &lt;code&gt;s&lt;/code&gt; にユーザー名を含む &lt;code&gt;Ok&lt;/code&gt; 値を返します。機能もリスト9-6およびリスト9-7と同じです。これは、人間工学に基づいた別の方法で記述したものです。</target>
        </trans-unit>
        <trans-unit id="c8159737415ba1d5840c5d1dcfa32d246b649654" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ve named our test &lt;code&gt;larger_can_hold_smaller&lt;/code&gt;, and we&amp;rsquo;ve created the two &lt;code&gt;Rectangle&lt;/code&gt; instances that we need. Then we called the &lt;code&gt;assert!&lt;/code&gt; macro and passed it the result of calling &lt;code&gt;larger.can_hold(&amp;amp;smaller)&lt;/code&gt;. This expression is supposed to return &lt;code&gt;true&lt;/code&gt;, so our test should pass. Let&amp;rsquo;s find out!</source>
          <target state="translated">テストに &lt;code&gt;larger_can_hold_smaller&lt;/code&gt; という名前を付け、必要な2つの &lt;code&gt;Rectangle&lt;/code&gt; インスタンスを作成しました。次に、 &lt;code&gt;assert!&lt;/code&gt; を呼び出しました！マクロを使用して、 &lt;code&gt;larger.can_hold(&amp;amp;smaller)&lt;/code&gt; を呼び出した結果を渡しました。この式は &lt;code&gt;true&lt;/code&gt; を返すことになっているため、テストに合格するはずです。確認してみましょう！</target>
        </trans-unit>
        <trans-unit id="eb03fca51e0258eda1b9da34ca6053fc2fa793f1" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ve now covered how to use enums to create custom types that can be one of a set of enumerated values. We&amp;rsquo;ve shown how the standard library&amp;rsquo;s &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; type helps you use the type system to prevent errors. When enum values have data inside them, you can use &lt;code&gt;match&lt;/code&gt; or &lt;code&gt;if let&lt;/code&gt; to extract and use those values, depending on how many cases you need to handle.</source>
          <target state="translated">これで、列挙型を使用して、列挙値のセットの1つになるカスタムタイプを作成する方法について説明しました。標準ライブラリの &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; タイプがタイプシステムを使用してエラーを防止する方法を示しました。列挙型の値は、それらの内部でデータを持っている場合は、使用することができます &lt;code&gt;match&lt;/code&gt; か、 &lt;code&gt;if let&lt;/code&gt; 抽出し、それらの値を使用し、あなたが処理する必要がどのように多くのケースに応じました。</target>
        </trans-unit>
        <trans-unit id="2ddb2aa6e11b76709deea3ac27493aedd396c368" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ve seen that even though Rust is capable of implementing object-oriented design patterns, other patterns, such as encoding state into the type system, are also available in Rust. These patterns have different trade-offs. Although you might be very familiar with object-oriented patterns, rethinking the problem to take advantage of Rust&amp;rsquo;s features can provide benefits, such as preventing some bugs at compile time. Object-oriented patterns won&amp;rsquo;t always be the best solution in Rust due to certain features, like ownership, that object-oriented languages don&amp;rsquo;t have.</source>
          <target state="translated">Rustはオブジェクト指向の設計パターンを実装することができますが、状態システムを型システムにエンコードするなど、他のパターンもRustで使用できることを確認しました。これらのパターンにはさまざまなトレードオフがあります。オブジェクト指向のパターンに精通しているかもしれませんが、Rustの機能を利用するために問題を再考すると、コンパイル時にいくつかのバグを防ぐなどの利点が得られます。オブジェクト指向パターンは所有権など、オブジェクト指向言語にはない特定の機能のため、Rustで常に最良のソリューションであるとは限りません。</target>
        </trans-unit>
        <trans-unit id="4a3393f5cdb05fd0ee1656e458d53bb37965c9bd" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ve shown several different ways to define data structures to store version four and version six IP addresses. However, as it turns out, wanting to store IP addresses and encode which kind they are is so common that &lt;a href=&quot;../std/net/enum.ipaddr&quot;&gt;the standard library has a definition we can use!&lt;/a&gt; Let&amp;rsquo;s look at how the standard library defines &lt;code&gt;IpAddr&lt;/code&gt;: it has the exact enum and variants that we&amp;rsquo;ve defined and used, but it embeds the address data inside the variants in the form of two different structs, which are defined differently for each variant:</source>
          <target state="translated">バージョン4とバージョン6のIPアドレスを格納するデータ構造を定義するいくつかの異なる方法を示しました。しかし、結局のところ、IPアドレスを格納し、その種類をエンコードすることは非常に一般的で&lt;a href=&quot;../std/net/enum.ipaddr&quot;&gt;ある&lt;/a&gt;ため、標準ライブラリには使用可能な定義があります。標準ライブラリが &lt;code&gt;IpAddr&lt;/code&gt; を定義する方法を見てみましょう。これには、定義して使用した正確な列挙型とバリアントがありますが、アドレスデータは、バリアントごとに異なる方法で定義された2つの異なる構造体の形でバリアント内に埋め込まれます。</target>
        </trans-unit>
        <trans-unit id="29dedc9579ea7a2e3397effb70664bac84882984" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ve shown that Rust is capable of implementing the object-oriented state pattern to encapsulate the different kinds of behavior a post should have in each state. The methods on &lt;code&gt;Post&lt;/code&gt; know nothing about the various behaviors. The way we organized the code, we have to look in only one place to know the different ways a published post can behave: the implementation of the &lt;code&gt;State&lt;/code&gt; trait on the &lt;code&gt;Published&lt;/code&gt; struct.</source>
          <target state="translated">Rustがオブジェクト指向の状態パターンを実装して、各状態でポストが持つべきさまざまな種類の動作をカプセル化できることを示しました。 &lt;code&gt;Post&lt;/code&gt; のメソッドは、さまざまな動作について何も知りません。コードの編成方法では、公開された投稿のさまざまな動作を知るために1か所だけを調べる必要があります。それは、 &lt;code&gt;Published&lt;/code&gt; 構造体への &lt;code&gt;State&lt;/code&gt; トレイトの実装です。</target>
        </trans-unit>
        <trans-unit id="ebc522f12982267dfc02e6dcc67a8d4e642dabf5" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ve shown that you can create an iterator by calling &lt;code&gt;iter&lt;/code&gt;, &lt;code&gt;into_iter&lt;/code&gt;, or &lt;code&gt;iter_mut&lt;/code&gt; on a vector. You can create iterators from the other collection types in the standard library, such as hash map. You can also create iterators that do anything you want by implementing the &lt;code&gt;Iterator&lt;/code&gt; trait on your own types. As previously mentioned, the only method you&amp;rsquo;re required to provide a definition for is the &lt;code&gt;next&lt;/code&gt; method. Once you&amp;rsquo;ve done that, you can use all other methods that have default implementations provided by the &lt;code&gt;Iterator&lt;/code&gt; trait!</source>
          <target state="translated">ベクトルに対して &lt;code&gt;iter&lt;/code&gt; 、 &lt;code&gt;into_iter&lt;/code&gt; 、または &lt;code&gt;iter_mut&lt;/code&gt; を呼び出すことでイテレータを作成できることを示しました。ハッシュマップなど、標準ライブラリの他のコレクション型からイテレータを作成できます。独自の型に &lt;code&gt;Iterator&lt;/code&gt; トレイトを実装することで、必要なことをすべて行うイテレータを作成することもできます。前述のように、定義を提供するために必要な唯一の方法は &lt;code&gt;next&lt;/code&gt; 方法です。それが完了したら、 &lt;code&gt;Iterator&lt;/code&gt; トレイトによって提供されるデフォルトの実装を持つ他のすべてのメソッドを使用できます。</target>
        </trans-unit>
        <trans-unit id="b66581e28df90aa77932dec55a52d6260ebfbe34" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ve talked about how to pass closures to functions; you can also pass regular functions to functions! This technique is useful when you want to pass a function you&amp;rsquo;ve already defined rather than defining a new closure. Doing this with function pointers will allow you to use functions as arguments to other functions. Functions coerce to the type &lt;code&gt;fn&lt;/code&gt; (with a lowercase f), not to be confused with the &lt;code&gt;Fn&lt;/code&gt; closure trait. The &lt;code&gt;fn&lt;/code&gt; type is called a &lt;em&gt;function pointer&lt;/em&gt;. The syntax for specifying that a parameter is a function pointer is similar to that of closures, as shown in Listing 19-27.</source>
          <target state="translated">クロージャを関数に渡す方法について説明しました。通常の関数を関数に渡すこともできます！この手法は、新しいクロージャを定義するのではなく、すでに定義した関数を渡したい場合に役立ちます。これを関数ポインタで行うと、関数を他の関数の引数として使用できます。関数は、 &lt;code&gt;fn&lt;/code&gt; 型（小文字のf）に強制変換され &lt;code&gt;Fn&lt;/code&gt; クロージャトレイトと混同しないでください。 &lt;code&gt;fn&lt;/code&gt; タイプが呼び出される&lt;em&gt;関数ポインタ&lt;/em&gt;。リスト19-27で示されるように、パラメーターが関数ポインターであることを指定するための構文はクロージャーの構文に似ています。</target>
        </trans-unit>
        <trans-unit id="44c2c6bad4c34dbea054ba65f353232e3b4bb941" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ve updated &lt;code&gt;main&lt;/code&gt; so it places the instance of &lt;code&gt;Config&lt;/code&gt; returned by &lt;code&gt;parse_config&lt;/code&gt; into a variable named &lt;code&gt;config&lt;/code&gt;, and we updated the code that previously used the separate &lt;code&gt;query&lt;/code&gt; and &lt;code&gt;filename&lt;/code&gt; variables so it now uses the fields on the &lt;code&gt;Config&lt;/code&gt; struct instead.</source>
          <target state="translated">&lt;code&gt;main&lt;/code&gt; を更新して、 &lt;code&gt;parse_config&lt;/code&gt; によって返された &lt;code&gt;Config&lt;/code&gt; のインスタンスを &lt;code&gt;config&lt;/code&gt; という名前の変数に配置し、以前は個別の &lt;code&gt;query&lt;/code&gt; 変数と &lt;code&gt;filename&lt;/code&gt; 変数を使用していたコードを更新して、代わりに &lt;code&gt;Config&lt;/code&gt; 構造体のフィールドを使用するようにしました。</target>
        </trans-unit>
        <trans-unit id="d23dd8237d80151639faf67cba12c8d62a94d599" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ve updated &lt;code&gt;main&lt;/code&gt; where we were calling &lt;code&gt;parse_config&lt;/code&gt; to instead call &lt;code&gt;Config::new&lt;/code&gt;. We&amp;rsquo;ve changed the name of &lt;code&gt;parse_config&lt;/code&gt; to &lt;code&gt;new&lt;/code&gt; and moved it within an &lt;code&gt;impl&lt;/code&gt; block, which associates the &lt;code&gt;new&lt;/code&gt; function with &lt;code&gt;Config&lt;/code&gt;. Try compiling this code again to make sure it works.</source>
          <target state="translated">私たちは、更新した &lt;code&gt;main&lt;/code&gt; 私たちが呼んでいたところ &lt;code&gt;parse_config&lt;/code&gt; を代わりに呼び出すように &lt;code&gt;Config::new&lt;/code&gt; 。私たちは、の名前変更した &lt;code&gt;parse_config&lt;/code&gt; をに &lt;code&gt;new&lt;/code&gt; して以内にそれを移動 &lt;code&gt;impl&lt;/code&gt; 関連付けブロック、 &lt;code&gt;new&lt;/code&gt; と機能 &lt;code&gt;Config&lt;/code&gt; ]を。このコードを再度コンパイルして、機能することを確認してください。</target>
        </trans-unit>
        <trans-unit id="682f1e494883240e497eaf886adabbd3de94d2f1" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ve used &lt;code&gt;recv&lt;/code&gt; in this example for simplicity; we don&amp;rsquo;t have any other work for the main thread to do other than wait for messages, so blocking the main thread is appropriate.</source>
          <target state="translated">この例では、簡単にするために &lt;code&gt;recv&lt;/code&gt; を使用しています。メインスレッドがメッセージを待機する以外に行う作業はないので、メインスレッドをブロックするのが適切です。</target>
        </trans-unit>
        <trans-unit id="09261808e853fe8c1b1cf1c98bcaef67bcdbf69f" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ve used macros like &lt;code&gt;println!&lt;/code&gt; throughout this book, but we haven&amp;rsquo;t fully explored what a macro is and how it works. The term &lt;em&gt;macro&lt;/em&gt; refers to a family of features in Rust: &lt;em&gt;declarative&lt;/em&gt; macros with &lt;code&gt;macro_rules!&lt;/code&gt; and three kinds of &lt;em&gt;procedural&lt;/em&gt; macros:</source>
          <target state="translated">&lt;code&gt;println!&lt;/code&gt; ようなマクロを使用しました！この本全体を通して、しかし、私たちはマクロが何であるか、そしてそれがどのように機能するかを完全に探求していません。&lt;em&gt;マクロ&lt;/em&gt;という用語は、Rustの &lt;code&gt;macro_rules!&lt;/code&gt; の機能を指します：macro_rulesを使用した&lt;em&gt;宣言型&lt;/em&gt;マクロ！および3種類の&lt;em&gt;手続き&lt;/em&gt;マクロ：</target>
        </trans-unit>
        <trans-unit id="e2712446812526a53471c1e0383e7a3108a1b4ae" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ve used packages from &lt;a href=&quot;https://crates.io/&quot;&gt;crates.io&lt;/a&gt; as dependencies of our project, but you can also share your code with other people by publishing your own packages. The crate registry at &lt;a href=&quot;https://crates.io/&quot;&gt;crates.io&lt;/a&gt; distributes the source code of your packages, so it primarily hosts code that is open source.</source>
          <target state="translated">私たちはプロジェクトの依存関係として&lt;a href=&quot;https://crates.io/&quot;&gt;crates.io&lt;/a&gt;からのパッケージを使用しましたが、独自のパッケージを公開することにより、コードを他の人と共有することもできます。&lt;a href=&quot;https://crates.io/&quot;&gt;crates.io&lt;/a&gt;のクレートレジストリはパッケージのソースコードを配布するため、主にオープンソースのコードをホストします。</target>
        </trans-unit>
        <trans-unit id="ec147c9a441b7f735a89cab0dad06f6138cccde7" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ve used the underscore (&lt;code&gt;_&lt;/code&gt;) as a wildcard pattern that will match any value but not bind to the value. Although the underscore &lt;code&gt;_&lt;/code&gt; pattern is especially useful as the last arm in a &lt;code&gt;match&lt;/code&gt; expression, we can use it in any pattern, including function parameters, as shown in Listing 18-17.</source>
          <target state="translated">アンダースコア（ &lt;code&gt;_&lt;/code&gt; ）を、任意の値に一致するが値にはバインドしないワイルドカードパターンとして使用しました。アンダースコア &lt;code&gt;_&lt;/code&gt; パターンは、 &lt;code&gt;match&lt;/code&gt; 式の最後のアームとして特に役立ちますが、リスト18-17に示すように、関数パラメーターを含む任意のパターンで使用できます。</target>
        </trans-unit>
        <trans-unit id="44adc69b5d64c0f01b24575df11e052ec21c4722" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ve walked through an example of a Rust program already in Chapter 2. Now that we&amp;rsquo;re past basic syntax, we won&amp;rsquo;t include all the &lt;code&gt;fn main() {&lt;/code&gt; code in examples, so if you&amp;rsquo;re following along, you&amp;rsquo;ll have to put the following examples inside a &lt;code&gt;main&lt;/code&gt; function manually. As a result, our examples will be a bit more concise, letting us focus on the actual details rather than boilerplate code.</source>
          <target state="translated">Rustプログラムの例については、すでに第2章で説明しました。これで、基本的な構文を &lt;code&gt;fn main() {&lt;/code&gt; ので、例にすべてのfn main（）{コードを含めません。次の例を &lt;code&gt;main&lt;/code&gt; 関数内に手動で配置する必要があります。その結果、例はもう少し簡潔になり、定型コードではなく実際の詳細に焦点を当てることができます。</target>
        </trans-unit>
        <trans-unit id="8bfada821419f7b1c35da6470b04b8c1b0c72d91" translate="yes" xml:space="preserve">
          <source>Weak</source>
          <target state="translated">Weak</target>
        </trans-unit>
        <trans-unit id="2592fb559c34ba109b261e1e971e0271f723f218" translate="yes" xml:space="preserve">
          <source>Weak keywords</source>
          <target state="translated">弱いキーワード</target>
        </trans-unit>
        <trans-unit id="b141897801ad64a5c292f85e9b0acea35468d86f" translate="yes" xml:space="preserve">
          <source>Weak::as_raw</source>
          <target state="translated">Weak::as_raw</target>
        </trans-unit>
        <trans-unit id="d422a6274254bfe89623f64408426ee6a4b95d2f" translate="yes" xml:space="preserve">
          <source>Weak::borrow</source>
          <target state="translated">Weak::borrow</target>
        </trans-unit>
        <trans-unit id="e090aeaf0035d47a06522ac573102af7ef03019b" translate="yes" xml:space="preserve">
          <source>Weak::borrow_mut</source>
          <target state="translated">Weak::borrow_mut</target>
        </trans-unit>
        <trans-unit id="31f2cf80409016cb1a54e11bd8e10df114bcff9c" translate="yes" xml:space="preserve">
          <source>Weak::clone</source>
          <target state="translated">Weak::clone</target>
        </trans-unit>
        <trans-unit id="1022360ae57147f43f753c89ffa5b787aa1673ef" translate="yes" xml:space="preserve">
          <source>Weak::clone_from</source>
          <target state="translated">Weak::clone_from</target>
        </trans-unit>
        <trans-unit id="7ffb62a38307a645dc9e4fc1d7f948ab860db2a7" translate="yes" xml:space="preserve">
          <source>Weak::clone_into</source>
          <target state="translated">Weak::clone_into</target>
        </trans-unit>
        <trans-unit id="c865a401afc186e43b4eab7ca361d7638e0b536e" translate="yes" xml:space="preserve">
          <source>Weak::default</source>
          <target state="translated">Weak::default</target>
        </trans-unit>
        <trans-unit id="e57f10f57657469def31fa2d885237f40eb69154" translate="yes" xml:space="preserve">
          <source>Weak::drop</source>
          <target state="translated">Weak::drop</target>
        </trans-unit>
        <trans-unit id="ef51946ab6d84ee6b5287e68325989e298d500bc" translate="yes" xml:space="preserve">
          <source>Weak::fmt</source>
          <target state="translated">Weak::fmt</target>
        </trans-unit>
        <trans-unit id="04990cfad4762bebd1df30cc473af5882f2479cb" translate="yes" xml:space="preserve">
          <source>Weak::from</source>
          <target state="translated">Weak::from</target>
        </trans-unit>
        <trans-unit id="df4c7443eba251c8b78b6539d8ece4de970f301b" translate="yes" xml:space="preserve">
          <source>Weak::from_raw</source>
          <target state="translated">Weak::from_raw</target>
        </trans-unit>
        <trans-unit id="a6076aa76799b24c93bec01d241d277a0659dedb" translate="yes" xml:space="preserve">
          <source>Weak::into</source>
          <target state="translated">Weak::into</target>
        </trans-unit>
        <trans-unit id="0d8046306424b99b930a8b4a94195613e63c8154" translate="yes" xml:space="preserve">
          <source>Weak::into_raw</source>
          <target state="translated">Weak::into_raw</target>
        </trans-unit>
        <trans-unit id="a47f17db375bc704f4e384a38de508a900dfe192" translate="yes" xml:space="preserve">
          <source>Weak::new</source>
          <target state="translated">Weak::new</target>
        </trans-unit>
        <trans-unit id="9bc78ec91050d31c7752a036bdbd22e4063b718e" translate="yes" xml:space="preserve">
          <source>Weak::ptr_eq</source>
          <target state="translated">Weak::ptr_eq</target>
        </trans-unit>
        <trans-unit id="772fd61fe1d60fd5b1beff3bc669c9f17593cd0f" translate="yes" xml:space="preserve">
          <source>Weak::strong_count</source>
          <target state="translated">Weak::strong_count</target>
        </trans-unit>
        <trans-unit id="78b91a1fa2b3787768d39e8c6e94b83a6d3b3355" translate="yes" xml:space="preserve">
          <source>Weak::to_owned</source>
          <target state="translated">Weak::to_owned</target>
        </trans-unit>
        <trans-unit id="a0b4587c121fa0987a33f7acf83c36d1aa760be3" translate="yes" xml:space="preserve">
          <source>Weak::try_from</source>
          <target state="translated">Weak::try_from</target>
        </trans-unit>
        <trans-unit id="dffb26aa2fde976b45f16c5f1b3ec4c3c2236a57" translate="yes" xml:space="preserve">
          <source>Weak::try_into</source>
          <target state="translated">Weak::try_into</target>
        </trans-unit>
        <trans-unit id="66cbdb0ce3c9d445fe02eebbca20dc6699c1e0b8" translate="yes" xml:space="preserve">
          <source>Weak::type_id</source>
          <target state="translated">Weak::type_id</target>
        </trans-unit>
        <trans-unit id="ffffecfd343836cf2781f4e9ad8fe4ab904bdda7" translate="yes" xml:space="preserve">
          <source>Weak::upgrade</source>
          <target state="translated">Weak::upgrade</target>
        </trans-unit>
        <trans-unit id="5eadf7e5be67bb31aac15c710ff80ec7238e0320" translate="yes" xml:space="preserve">
          <source>Weak::weak_count</source>
          <target state="translated">Weak::weak_count</target>
        </trans-unit>
        <trans-unit id="cbd86db606d844ea581cc87e07ebe1432bbeb3e7" translate="yes" xml:space="preserve">
          <source>Welcome to &lt;em&gt;The Rust Programming Language&lt;/em&gt; book! This version of the text assumes you&amp;rsquo;re using Rust 1.31.0 or later with &lt;code&gt;edition=&quot;2018&quot;&lt;/code&gt; in &lt;em&gt;Cargo.toml&lt;/em&gt; of all projects to use Rust 2018 Edition idioms. See the &lt;a href=&quot;book/ch01-01-installation&quot;&gt;&amp;ldquo;Installation&amp;rdquo; section of Chapter 1&lt;/a&gt; to install or update Rust, and see the new &lt;a href=&quot;book/appendix-05-editions&quot;&gt;Appendix E&lt;/a&gt; for information on what editions of Rust are.</source>
          <target state="translated">&lt;em&gt;Rustプログラミング言語の&lt;/em&gt;本へようこそ！このバージョンのテキストは、Rust 2018 Editionイディオムを使用するすべてのプロジェクトの&lt;em&gt;Cargo.toml&lt;/em&gt;で &lt;code&gt;edition=&quot;2018&quot;&lt;/code&gt; を&lt;em&gt;指定&lt;/em&gt;したRust 1.31.0以降を使用していることを前提としています。Rustをインストールまたは更新するに&lt;a href=&quot;book/ch01-01-installation&quot;&gt;は、第1章&lt;/a&gt;の「インストール」セクションを参照して&lt;a href=&quot;book/appendix-05-editions&quot;&gt;ください&lt;/a&gt;。Rustのエディションについては、新しい付録Eを参照してください。</target>
        </trans-unit>
        <trans-unit id="b8d0b89eafe83e20d5f86108981d205157dbff45" translate="yes" xml:space="preserve">
          <source>Welcome to &lt;em&gt;The Rust Programming Language&lt;/em&gt; book! This version of the text assumes you&amp;rsquo;re using Rust 1.31.0 or later with &lt;code&gt;edition=&quot;2018&quot;&lt;/code&gt; in &lt;em&gt;Cargo.toml&lt;/em&gt; of all projects to use Rust 2018 Edition idioms. See the &lt;a href=&quot;ch01-01-installation&quot;&gt;&amp;ldquo;Installation&amp;rdquo; section of Chapter 1&lt;/a&gt; to install or update Rust, and see the new &lt;a href=&quot;appendix-05-editions&quot;&gt;Appendix E&lt;/a&gt; for information on what editions of Rust are.</source>
          <target state="translated">&lt;em&gt;Rustプログラミング言語の&lt;/em&gt;本へようこそ！このバージョンのテキストは、Rust 2018 Editionイディオムを使用するすべてのプロジェクトの&lt;em&gt;Cargo.toml&lt;/em&gt;で &lt;code&gt;edition=&quot;2018&quot;&lt;/code&gt; を&lt;em&gt;指定&lt;/em&gt;したRust 1.31.0以降を使用していることを前提としています。Rustをインストールまたは更新するに&lt;a href=&quot;ch01-01-installation&quot;&gt;は、第1章&lt;/a&gt;の「インストール」セクションを参照して&lt;a href=&quot;appendix-05-editions&quot;&gt;ください&lt;/a&gt;。Rustのエディションについては、新しい付録Eを参照してください。</target>
        </trans-unit>
        <trans-unit id="71aabd16eb59292324e9dfd1470f8e3b8318b16b" translate="yes" xml:space="preserve">
          <source>Welcome to &lt;em&gt;The Rust Programming Language&lt;/em&gt;, an introductory book about Rust. The Rust programming language helps you write faster, more reliable software. High-level ergonomics and low-level control are often at odds in programming language design; Rust challenges that conflict. Through balancing powerful technical capacity and a great developer experience, Rust gives you the option to control low-level details (such as memory usage) without all the hassle traditionally associated with such control.</source>
          <target state="translated">&lt;em&gt;Rust&lt;/em&gt;の入門書である&lt;em&gt;Rustプログラミング言語&lt;/em&gt;へようこそ。 Rustプログラミング言語を使用すると、より高速で信頼性の高いソフトウェアを作成できます。高レベルの人間工学と低レベルの制御は、プログラミング言語の設計においてしばしば対立します。錆はその対立に挑戦します。 Rustは、強力な技術的能力と優れた開発者エクスペリエンスのバランスをとることで、低レベルの詳細（メモリ使用量など）を制御するオプションを提供します。</target>
        </trans-unit>
        <trans-unit id="def3e0cabaddabefe272409c1a7371052fe52e2f" translate="yes" xml:space="preserve">
          <source>Well done! You&amp;rsquo;ve made it to the end of the book! We want to thank you for joining us on this tour of Rust. You&amp;rsquo;re now ready to implement your own Rust projects and help with other peoples&amp;rsquo; projects. Keep in mind that there is a welcoming community of other Rustaceans who would love to help you with any challenges you encounter on your Rust journey.</source>
          <target state="translated">よくやった！これで本の最後に到達しました。Rustのツアーにご参加いただきありがとうございます。これで、独自のRustプロジェクトを実装し、他の人々のプロジェクトを支援する準備が整いました。Rustの旅で遭遇するあらゆる課題に対応したいと考えている他のRustaceansの歓迎コミュニティがあることに留意してください。</target>
        </trans-unit>
        <trans-unit id="e51a9120a6d90f0f111fa29f2fe00c6bb7da9412" translate="yes" xml:space="preserve">
          <source>What &lt;em id=&quot;what-the-reference-is-not&quot;&gt;The Reference&lt;/em&gt; is Not</source>
          <target state="translated">What &lt;em id=&quot;what-the-reference-is-not&quot;&gt;The Reference&lt;/em&gt; is Not</target>
        </trans-unit>
        <trans-unit id="9cecc65aff2a51e558a3cf424c55a11b8c31dce1" translate="yes" xml:space="preserve">
          <source>What &lt;em&gt;The Reference&lt;/em&gt; is Not</source>
          <target state="translated">どのような&lt;em&gt;リファレンス&lt;/em&gt;ではありません</target>
        </trans-unit>
        <trans-unit id="f518d8ec17050e8115e7f2ec450de2471cd3f305" translate="yes" xml:space="preserve">
          <source>What Is Ownership?</source>
          <target state="translated">所有権とは?</target>
        </trans-unit>
        <trans-unit id="70d9b24e457447486228a37f69315f0aa6c48b62" translate="yes" xml:space="preserve">
          <source>What Is a String?</source>
          <target state="translated">文字列とは何ですか?</target>
        </trans-unit>
        <trans-unit id="2368fe52347b12513e40ec057f72fd1310d84880" translate="yes" xml:space="preserve">
          <source>What do I do?</source>
          <target state="translated">私は何をすればいいの?</target>
        </trans-unit>
        <trans-unit id="b31d036160b82937b3f747c02baff101759a7996" translate="yes" xml:space="preserve">
          <source>What expression to evaluate when an &lt;a href=&quot;keyword.if&quot;&gt;&lt;code&gt;if&lt;/code&gt;&lt;/a&gt; condition evaluates to &lt;a href=&quot;keyword.false&quot;&gt;&lt;code&gt;false&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">What expression to evaluate when an &lt;a href=&quot;keyword.if&quot;&gt; &lt;code&gt;if&lt;/code&gt; &lt;/a&gt; condition evaluates to &lt;a href=&quot;keyword.false&quot;&gt; &lt;code&gt;false&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="aa2332f8c7d8caf559cd55bda6779e69b9228def" translate="yes" xml:space="preserve">
          <source>What happened? Adding the &lt;code&gt;pub&lt;/code&gt; keyword in front of &lt;code&gt;mod hosting&lt;/code&gt; makes the module public. With this change, if we can access &lt;code&gt;front_of_house&lt;/code&gt;, we can access &lt;code&gt;hosting&lt;/code&gt;. But the &lt;em&gt;contents&lt;/em&gt; of &lt;code&gt;hosting&lt;/code&gt; are still private; making the module public doesn&amp;rsquo;t make its contents public. The &lt;code&gt;pub&lt;/code&gt; keyword on a module only lets code in its ancestor modules refer to it.</source>
          <target state="translated">どうした？ &lt;code&gt;mod hosting&lt;/code&gt; 前に &lt;code&gt;pub&lt;/code&gt; キーワードを追加すると、モジュールがパブリックになります。この変更により、 &lt;code&gt;front_of_house&lt;/code&gt; にアクセスできる場合、 &lt;code&gt;hosting&lt;/code&gt; にアクセスできます。しかし、&lt;em&gt;コンテンツ&lt;/em&gt;の &lt;code&gt;hosting&lt;/code&gt; まだ非公開です。モジュールを公開しても、そのコンテンツは公開されません。モジュールの &lt;code&gt;pub&lt;/code&gt; キーワードは、その祖先モジュールのコードにのみ参照させます。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="d8765b8c06cc83702c9dbf2bca66a40041316a4f" translate="yes" xml:space="preserve">
          <source>What happens if you try to access an element of an array that is past the end of the array? Say you change the example to the following code, which will compile but exit with an error when it runs:</source>
          <target state="translated">配列の終端を過ぎた配列の要素にアクセスしようとするとどうなるでしょうか?この例を以下のコードに変更したとします。</target>
        </trans-unit>
        <trans-unit id="0903cd7655009ddeab2540796c6a002b16cf56ff" translate="yes" xml:space="preserve">
          <source>What implementing the trait signifies about the type</source>
          <target state="translated">形質を実装することが型について何を意味するか</target>
        </trans-unit>
        <trans-unit id="a77059cf1db619a698ed5c928ae175c07abb8490" translate="yes" xml:space="preserve">
          <source>What is &lt;code&gt;UnwindSafe&lt;/code&gt;?</source>
          <target state="translated">&lt;code&gt;UnwindSafe&lt;/code&gt; とは何ですか？</target>
        </trans-unit>
        <trans-unit id="39c550be471783e69447a16171fe28c441cfa1b6" translate="yes" xml:space="preserve">
          <source>What is in the standard library documentation?</source>
          <target state="translated">標準ライブラリのドキュメントには何がありますか?</target>
        </trans-unit>
        <trans-unit id="6be8c40317b2fde07b27b69f6275feba9067a940" translate="yes" xml:space="preserve">
          <source>What is unwind safety?</source>
          <target state="translated">巻き戻し安全とは?</target>
        </trans-unit>
        <trans-unit id="546be1954cedfdfe8c9b6d5ed68a1aba4520048c" translate="yes" xml:space="preserve">
          <source>What operators and methods deriving this trait will enable</source>
          <target state="translated">どのような演算子や方法でこの特徴を導出することができるのか</target>
        </trans-unit>
        <trans-unit id="8cbcae63b4448efc20dd52bc49133e3cdc73cd42" translate="yes" xml:space="preserve">
          <source>What should the value of &lt;code&gt;answer&lt;/code&gt; be? Should it be &lt;code&gt;З&lt;/code&gt;, the first letter? When encoded in UTF-8, the first byte of &lt;code&gt;З&lt;/code&gt; is &lt;code&gt;208&lt;/code&gt; and the second is &lt;code&gt;151&lt;/code&gt;, so &lt;code&gt;answer&lt;/code&gt; should in fact be &lt;code&gt;208&lt;/code&gt;, but &lt;code&gt;208&lt;/code&gt; is not a valid character on its own. Returning &lt;code&gt;208&lt;/code&gt; is likely not what a user would want if they asked for the first letter of this string; however, that&amp;rsquo;s the only data that Rust has at byte index 0. Users generally don&amp;rsquo;t want the byte value returned, even if the string contains only Latin letters: if &lt;code&gt;&amp;amp;&quot;hello&quot;[0]&lt;/code&gt; were valid code that returned the byte value, it would return &lt;code&gt;104&lt;/code&gt;, not &lt;code&gt;h&lt;/code&gt;. To avoid returning an unexpected value and causing bugs that might not be discovered immediately, Rust doesn&amp;rsquo;t compile this code at all and prevents misunderstandings early in the development process.</source>
          <target state="translated">&lt;code&gt;answer&lt;/code&gt; の価値は何であるべきですか？それがあるべき &lt;code&gt;З&lt;/code&gt; 、最初の文字？ UTF-8でエンコードした場合、 &lt;code&gt;З&lt;/code&gt; の最初のバイトは &lt;code&gt;208&lt;/code&gt; で、2番目のバイトは &lt;code&gt;151&lt;/code&gt; なので、 &lt;code&gt;answer&lt;/code&gt; は実際には &lt;code&gt;208&lt;/code&gt; になるはずですが、 &lt;code&gt;208&lt;/code&gt; 自体は有効な文字ではありません。ユーザーがこの文字列の最初の文字を要求した場合、 &lt;code&gt;208&lt;/code&gt; を返すことはおそらくユーザーが望むことではありません。場合：しかし、それは錆が0ユーザーは、一般的に、文字列のみラテン文字が含まれている場合でも、バイトの値が返されたくないバイトインデックスであることをデータだけだ &lt;code&gt;&amp;amp;&quot;hello&quot;[0]&lt;/code&gt; バイト値を返された有効なコードでした、 &lt;code&gt;104&lt;/code&gt; を返します、ない &lt;code&gt;h&lt;/code&gt; 。予期しない値が返されてすぐに発見されない可能性があるバグが発生するのを防ぐため、Rustはこのコードをまったくコンパイルせず、開発プロセスの早い段階で誤解を防ぎます。</target>
        </trans-unit>
        <trans-unit id="104867f147475715b8460879a1886ec236299ab6" translate="yes" xml:space="preserve">
          <source>What the implementation of the trait provided by &lt;code&gt;derive&lt;/code&gt; does</source>
          <target state="translated">deriveによって提供さ &lt;code&gt;derive&lt;/code&gt; 特性の実装が行うこと</target>
        </trans-unit>
        <trans-unit id="813bb1fc77d8fbc02f8d5943beea4d865f45c1f2" translate="yes" xml:space="preserve">
          <source>What this means is that any type of argument which implements the &lt;a href=&quot;trait.binary&quot;&gt;&lt;code&gt;fmt::Binary&lt;/code&gt;&lt;/a&gt; trait can then be formatted with &lt;code&gt;{:b}&lt;/code&gt;. Implementations are provided for these traits for a number of primitive types by the standard library as well. If no format is specified (as in &lt;code&gt;{}&lt;/code&gt; or &lt;code&gt;{:6}&lt;/code&gt;), then the format trait used is the &lt;a href=&quot;trait.display&quot;&gt;&lt;code&gt;Display&lt;/code&gt;&lt;/a&gt; trait.</source>
          <target state="translated">これは、&lt;a href=&quot;trait.binary&quot;&gt; &lt;code&gt;fmt::Binary&lt;/code&gt; &lt;/a&gt;トレイトを実装する任意のタイプの引数を &lt;code&gt;{:b}&lt;/code&gt; でフォーマットできることを意味します。標準ライブラリによって、いくつかのプリミティブ型のこれらの特性の実装も提供されています。フォーマットが指定されていない場合（ &lt;code&gt;{}&lt;/code&gt; または &lt;code&gt;{:6}&lt;/code&gt; など）、使用されるフォーマット特性は&lt;a href=&quot;trait.display&quot;&gt; &lt;code&gt;Display&lt;/code&gt; &lt;/a&gt;特性です。</target>
        </trans-unit>
        <trans-unit id="0093e0ba1575f01e625f11752607bd61339f460b" translate="yes" xml:space="preserve">
          <source>What to do when an &lt;a href=&quot;keyword.if&quot;&gt;&lt;code&gt;if&lt;/code&gt;&lt;/a&gt; condition does not hold.</source>
          <target state="translated">とき何をすべき&lt;a href=&quot;keyword.if&quot;&gt; &lt;code&gt;if&lt;/code&gt; &lt;/a&gt;条件が成立しません。</target>
        </trans-unit>
        <trans-unit id="534b9c0fb827379bcd2c8827a70c556de12f2bc1" translate="yes" xml:space="preserve">
          <source>What we can&amp;rsquo;t see in this example is that when &lt;code&gt;b&lt;/code&gt; and then &lt;code&gt;a&lt;/code&gt; go out of scope at the end of &lt;code&gt;main&lt;/code&gt;, the count is then 0, and the &lt;code&gt;Rc&amp;lt;List&amp;gt;&lt;/code&gt; is cleaned up completely at that point. Using &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; allows a single value to have multiple owners, and the count ensures that the value remains valid as long as any of the owners still exist.</source>
          <target state="translated">私たちは、この例では見ることができないことが行われているときに &lt;code&gt;b&lt;/code&gt; 、その後の終わりに範囲を出て行く &lt;code&gt;main&lt;/code&gt; は、カウントを0であり、 &lt;code&gt;Rc&amp;lt;List&amp;gt;&lt;/code&gt; その時点で完全にクリーンアップされます。使用 &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; 単一の値は、複数の所有者を持つことができ、その値は、長い所有者のいずれかがまだ存在している有効なままであることカウントを保証します。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b08c6969a173d0d359ebf16040e97b732df68a33" translate="yes" xml:space="preserve">
          <source>What would communicating by sharing memory look like? In addition, why would message-passing enthusiasts not use it and do the opposite instead?</source>
          <target state="translated">メモリを共有することでコミュニケーションをとることは、どのような形になるのだろうか。また、メッセージパス愛好家はなぜそれを使わず、逆のことをするのでしょうか?</target>
        </trans-unit>
        <trans-unit id="e11dfea032c9cc516196eaa3fe3bafda5d5ff2fa" translate="yes" xml:space="preserve">
          <source>What would happen if we used &lt;code&gt;&amp;amp;hello[0..1]&lt;/code&gt;? The answer: Rust would panic at runtime in the same way as if an invalid index were accessed in a vector:</source>
          <target state="translated">&lt;code&gt;&amp;amp;hello[0..1]&lt;/code&gt; を使用するとどうなりますか？答え：Rustは、無効なインデックスがベクターでアクセスされた場合と同じように、実行時にパニックになります。</target>
        </trans-unit>
        <trans-unit id="3a08543da46101db0a5f909c75d05185352f5e54" translate="yes" xml:space="preserve">
          <source>What would happen to the code in Listing 16-4 where the main thread called &lt;code&gt;drop&lt;/code&gt; if we use a &lt;code&gt;move&lt;/code&gt; closure? Would &lt;code&gt;move&lt;/code&gt; fix that case? Unfortunately, no; we would get a different error because what Listing 16-4 is trying to do isn&amp;rsquo;t allowed for a different reason. If we added &lt;code&gt;move&lt;/code&gt; to the closure, we would move &lt;code&gt;v&lt;/code&gt; into the closure&amp;rsquo;s environment, and we could no longer call &lt;code&gt;drop&lt;/code&gt; on it in the main thread. We would get this compiler error instead:</source>
          <target state="translated">リスト16-4のコードで &lt;code&gt;move&lt;/code&gt; クロージャーを使用すると、メインスレッドで &lt;code&gt;drop&lt;/code&gt; が呼び出されます。思い &lt;code&gt;move&lt;/code&gt; する場合、その修正を？残念だけど違う; リスト16-4が何をしようとしているのかは別の理由で許可されていないため、別のエラーが発生します。 &lt;code&gt;move&lt;/code&gt; をクロージャーに追加すると、 &lt;code&gt;v&lt;/code&gt; をクロージャーの環境に移動し、メインスレッドで &lt;code&gt;drop&lt;/code&gt; を呼び出すことができなくなります。代わりにこのコンパイラエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="7e42bfeecb6b1e951f9890e0818a295e8fe9a892" translate="yes" xml:space="preserve">
          <source>What's the difference between &lt;code&gt;Copy&lt;/code&gt; and &lt;code&gt;Clone&lt;/code&gt;?</source>
          <target state="translated">&lt;code&gt;Copy&lt;/code&gt; と &lt;code&gt;Clone&lt;/code&gt; 違いは何ですか？</target>
        </trans-unit>
        <trans-unit id="c8dcd460b2b3eb060b9c3f227627cad77273bd6e" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;&quot;extern&quot; Abi?*&lt;/code&gt; is omitted from &lt;code&gt;FunctionQualifiers&lt;/code&gt; in function items, the ABI &lt;code&gt;&quot;Rust&quot;&lt;/code&gt; is assigned. For example:</source>
          <target state="translated">When &lt;code&gt;&quot;extern&quot; Abi?*&lt;/code&gt; is omitted from &lt;code&gt;FunctionQualifiers&lt;/code&gt; in function items, the ABI &lt;code&gt;&quot;Rust&quot;&lt;/code&gt; is assigned. For example:</target>
        </trans-unit>
        <trans-unit id="44cd724105e5ed735f83c23d67c2ff48add6811d" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt; or &lt;code&gt;-&lt;/code&gt; create a value greater than the maximum value, or less than the minimum value that can be stored. This includes unary &lt;code&gt;-&lt;/code&gt; on the smallest value of any signed integer type.</source>
          <target state="translated">場合 &lt;code&gt;+&lt;/code&gt; 、 &lt;code&gt;*&lt;/code&gt; 、または &lt;code&gt;-&lt;/code&gt; 以下で保存することができる最小値より最大値よりも値の大きいを作成する、または。これには、単項 &lt;code&gt;-&lt;/code&gt; 符号付き整数型の最小値が含まれます。</target>
        </trans-unit>
        <trans-unit id="aec1ff4fb0f51938e677ce85402d7e6e56fa4124" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;Trait2&lt;/code&gt; is a subtrait of &lt;code&gt;Trait1&lt;/code&gt; (for example, when &lt;code&gt;Trait2&lt;/code&gt; has a definition like &lt;code&gt;trait Trait2: Trait1 { ... }&lt;/code&gt;), it is not allowed to implement &lt;code&gt;Trait1&lt;/code&gt; for &lt;code&gt;Trait2&lt;/code&gt;. This is because &lt;code&gt;Trait2&lt;/code&gt; already implements &lt;code&gt;Trait1&lt;/code&gt; by definition, so it is not useful to do this.</source>
          <target state="translated">場合 &lt;code&gt;Trait2&lt;/code&gt; でのsubtraitある &lt;code&gt;Trait1&lt;/code&gt; は、（例えば、場合 &lt;code&gt;Trait2&lt;/code&gt; のような定義を有する &lt;code&gt;trait Trait2: Trait1 { ... }&lt;/code&gt; ）、それを実現するために許可されていない &lt;code&gt;Trait1&lt;/code&gt; のため &lt;code&gt;Trait2&lt;/code&gt; 。これは、ある &lt;code&gt;Trait2&lt;/code&gt; がすでに実装 &lt;code&gt;Trait1&lt;/code&gt; を定義することによって、これを行うには有用ではありません。</target>
        </trans-unit>
        <trans-unit id="394708bf787cdb05a4155072af4201796f69da61" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;Trait&lt;/code&gt; is treated as a type, the type does not implement the special &lt;code&gt;Sized&lt;/code&gt; trait, because the type does not have a known size at compile time and can only be accessed behind a pointer. Thus, if we have a trait like the following:</source>
          <target state="translated">&lt;code&gt;Trait&lt;/code&gt; が型として扱われる場合、型はコンパイル時に既知のサイズを持たず、ポインタの背後でのみアクセスできるため、その型は特別な &lt;code&gt;Sized&lt;/code&gt; 特性を実装しません。したがって、次のような特性がある場合：</target>
        </trans-unit>
        <trans-unit id="f4fcd22fdc939d17d3b6f99c714199ea75ee05bf" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;bar&lt;/code&gt; is the name of a function, then the expression &lt;code&gt;bar&lt;/code&gt; is &lt;em&gt;not&lt;/em&gt; a function pointer. Rather, it denotes a value of an unnameable type that uniquely identifies the function &lt;code&gt;bar&lt;/code&gt;. The value is zero-sized because the type already identifies the function. This has the advantage that &quot;calling&quot; the value (it implements the &lt;code&gt;Fn*&lt;/code&gt; traits) does not require dynamic dispatch.</source>
          <target state="translated">When &lt;code&gt;bar&lt;/code&gt; is the name of a function, then the expression &lt;code&gt;bar&lt;/code&gt; is &lt;em&gt;not&lt;/em&gt; a function pointer. Rather, it denotes a value of an unnameable type that uniquely identifies the function &lt;code&gt;bar&lt;/code&gt; . The value is zero-sized because the type already identifies the function. This has the advantage that &quot;calling&quot; the value (it implements the &lt;code&gt;Fn*&lt;/code&gt; traits) does not require dynamic dispatch.</target>
        </trans-unit>
        <trans-unit id="88bc0dd59ab0b7fc42f69193dff99dc50f4478aa" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;break&lt;/code&gt; is encountered, execution of the associated loop body is immediately terminated, for example:</source>
          <target state="translated">ときに &lt;code&gt;break&lt;/code&gt; 検出され、関連するループ本体の実行はすぐに、たとえば、終了しました。</target>
        </trans-unit>
        <trans-unit id="b790b4f62a35aeedd4f3d63c2da173a7ec837ca2" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;break&lt;/code&gt; is encountered, execution of the associated loop body is immediately terminated.</source>
          <target state="translated">When &lt;code&gt;break&lt;/code&gt; is encountered, execution of the associated loop body is immediately terminated.</target>
        </trans-unit>
        <trans-unit id="c791d46f518801c28641842a73515ec8d559a2ac" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;continue&lt;/code&gt; is encountered, the current iteration is terminated, returning control to the loop head, typically continuing with the next iteration.</source>
          <target state="translated">When &lt;code&gt;continue&lt;/code&gt; is encountered, the current iteration is terminated, returning control to the loop head, typically continuing with the next iteration.</target>
        </trans-unit>
        <trans-unit id="595c9458cad4cb9057d8e7fc040fb8866cc8cc3e" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;continue&lt;/code&gt; is encountered, the current iteration of the associated loop body is immediately terminated, returning control to the loop &lt;em&gt;head&lt;/em&gt;. In the case of a &lt;code&gt;while&lt;/code&gt; loop, the head is the conditional expression controlling the loop. In the case of a &lt;code&gt;for&lt;/code&gt; loop, the head is the call-expression controlling the loop.</source>
          <target state="translated">場合は &lt;code&gt;continue&lt;/code&gt; 検出され、関連するループ本体の現在の反復が直ちにループに制御を戻す、終了される&lt;em&gt;ヘッド&lt;/em&gt;。以下の場合には &lt;code&gt;while&lt;/code&gt; ループ、ヘッドは、ループを制御する条件式です。以下の場合 &lt;code&gt;for&lt;/code&gt; ループ、ヘッドは、ループを制御するコール式です。</target>
        </trans-unit>
        <trans-unit id="95185630ceafb190a6bbaa449dad38f0bceaa3df" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;f&lt;/code&gt; is called by another attributed function &lt;code&gt;g&lt;/code&gt; which is in turn called by &lt;code&gt;calls_g&lt;/code&gt;, code in both &lt;code&gt;f&lt;/code&gt; and &lt;code&gt;g&lt;/code&gt; observes &lt;code&gt;g&lt;/code&gt;'s callsite within &lt;code&gt;calls_g&lt;/code&gt;:</source>
          <target state="translated">When &lt;code&gt;f&lt;/code&gt; is called by another attributed function &lt;code&gt;g&lt;/code&gt; which is in turn called by &lt;code&gt;calls_g&lt;/code&gt; , code in both &lt;code&gt;f&lt;/code&gt; and &lt;code&gt;g&lt;/code&gt; observes &lt;code&gt;g&lt;/code&gt; 's callsite within &lt;code&gt;calls_g&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="4e3d8142d10bdab6df8f2b960ed3b5f595f6be33" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;f&lt;/code&gt; is called directly by &lt;code&gt;calls_f&lt;/code&gt;, code in &lt;code&gt;f&lt;/code&gt; observes its callsite within &lt;code&gt;calls_f&lt;/code&gt;:</source>
          <target state="translated">When &lt;code&gt;f&lt;/code&gt; is called directly by &lt;code&gt;calls_f&lt;/code&gt; , code in &lt;code&gt;f&lt;/code&gt; observes its callsite within &lt;code&gt;calls_f&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="0b714a909447f7628d7a5c65a1ec2d8d650053b1" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;g&lt;/code&gt; is called by another attributed function &lt;code&gt;h&lt;/code&gt; which is in turn called by &lt;code&gt;calls_h&lt;/code&gt;, all code in &lt;code&gt;f&lt;/code&gt;, &lt;code&gt;g&lt;/code&gt;, and &lt;code&gt;h&lt;/code&gt; observes &lt;code&gt;h&lt;/code&gt;'s callsite within &lt;code&gt;calls_h&lt;/code&gt;:</source>
          <target state="translated">When &lt;code&gt;g&lt;/code&gt; is called by another attributed function &lt;code&gt;h&lt;/code&gt; which is in turn called by &lt;code&gt;calls_h&lt;/code&gt; , all code in &lt;code&gt;f&lt;/code&gt; , &lt;code&gt;g&lt;/code&gt; , and &lt;code&gt;h&lt;/code&gt; observes &lt;code&gt;h&lt;/code&gt; 's callsite within &lt;code&gt;calls_h&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="e1a4cd7cb82bb7dfe91312bff7fa4ef245f8f684" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;outer&lt;/code&gt; goes out of scope, the &lt;code&gt;drop&lt;/code&gt; method will be called first for &lt;code&gt;Outer&lt;/code&gt;, then for &lt;code&gt;Inner&lt;/code&gt;. Therefore, &lt;code&gt;main&lt;/code&gt; prints &lt;code&gt;Dropping Outer!&lt;/code&gt; and then &lt;code&gt;Dropping Inner!&lt;/code&gt;.</source>
          <target state="translated">とき &lt;code&gt;outer&lt;/code&gt; スコープ外になる、 &lt;code&gt;drop&lt;/code&gt; 方法は、のために最初に呼び出される &lt;code&gt;Outer&lt;/code&gt; 、その後のために、 &lt;code&gt;Inner&lt;/code&gt; 。したがって、 &lt;code&gt;main&lt;/code&gt; プリントは &lt;code&gt;Dropping Outer!&lt;/code&gt; そして、 &lt;code&gt;Dropping Inner!&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3a6386c03d530a251bd741f83dfe28d17156802f" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;s&lt;/code&gt; comes &lt;em&gt;into scope&lt;/em&gt;, it is valid.</source>
          <target state="translated">&lt;code&gt;s&lt;/code&gt; が&lt;em&gt;スコープ&lt;/em&gt;に入るとき、それは有効です。</target>
        </trans-unit>
        <trans-unit id="187902d840e750b40be0f468eec4f29e171a13da" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;security_qos_flags&lt;/code&gt; is not set a malicious program can gain the elevated privileges of a privileged Rust process when it allows opening user-specified paths, by tricking it into opening a named pipe. So arguably &lt;code&gt;security_qos_flags&lt;/code&gt; should also be set when opening arbitrary paths. However the bits can then conflict with other flags, specifically &lt;code&gt;FILE_FLAG_OPEN_NO_RECALL&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;security_qos_flags&lt;/code&gt; が設定されていない場合、悪意のあるプログラムは、ユーザーが指定したパスを開くことを許可するときに、それをだまして名前付きパイプを開くことにより、特権Rustプロセスの昇格された特権を取得できます。したがって、任意のパスを開くときに、間違いなく &lt;code&gt;security_qos_flags&lt;/code&gt; も設定する必要があります。ただし、ビットは他のフラグ、特に &lt;code&gt;FILE_FLAG_OPEN_NO_RECALL&lt;/code&gt; と競合する可能性があります。</target>
        </trans-unit>
        <trans-unit id="f6050c0d5bfa7ba1d59f28a5f8ace3a1e46fb76d" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;security_qos_flags&lt;/code&gt; is not set, a malicious program can gain the elevated privileges of a privileged Rust process when it allows opening user-specified paths, by tricking it into opening a named pipe. So arguably &lt;code&gt;security_qos_flags&lt;/code&gt; should also be set when opening arbitrary paths. However the bits can then conflict with other flags, specifically &lt;code&gt;FILE_FLAG_OPEN_NO_RECALL&lt;/code&gt;.</source>
          <target state="translated">When &lt;code&gt;security_qos_flags&lt;/code&gt; is not set, a malicious program can gain the elevated privileges of a privileged Rust process when it allows opening user-specified paths, by tricking it into opening a named pipe. So arguably &lt;code&gt;security_qos_flags&lt;/code&gt; should also be set when opening arbitrary paths. However the bits can then conflict with other flags, specifically &lt;code&gt;FILE_FLAG_OPEN_NO_RECALL&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ae5e8e8826bd49e5ed65af5663b42f4dcb6bef45" translate="yes" xml:space="preserve">
          <source>When &lt;em&gt;can't&lt;/em&gt; my type be &lt;code&gt;Copy&lt;/code&gt;?</source>
          <target state="translated">私のタイプはいつ &lt;code&gt;Copy&lt;/code&gt; &lt;em&gt;できないの&lt;/em&gt;ですか？</target>
        </trans-unit>
        <trans-unit id="1afd27d775db688aa55a7acd7657368f0252621c" translate="yes" xml:space="preserve">
          <source>When &lt;em&gt;should&lt;/em&gt; my type be &lt;code&gt;Copy&lt;/code&gt;?</source>
          <target state="translated">私のタイプはいつ &lt;code&gt;Copy&lt;/code&gt; する&lt;em&gt;必要&lt;/em&gt;がありますか？</target>
        </trans-unit>
        <trans-unit id="eeffd83a46d46ad1d4f4a9906f6344d685f07825" translate="yes" xml:space="preserve">
          <source>When Rust compiles this code, it performs monomorphization. During that process, the compiler reads the values that have been used in &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; instances and identifies two kinds of &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt;: one is &lt;code&gt;i32&lt;/code&gt; and the other is &lt;code&gt;f64&lt;/code&gt;. As such, it expands the generic definition of &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; into &lt;code&gt;Option_i32&lt;/code&gt; and &lt;code&gt;Option_f64&lt;/code&gt;, thereby replacing the generic definition with the specific ones.</source>
          <target state="translated">Rustがこのコードをコンパイルすると、単形化が実行されます。そのプロセス中に、コンパイラーは &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; インスタンスで使用されている値を読み取り、2種類の &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; を識別します。1つは &lt;code&gt;i32&lt;/code&gt; で、もう1つは &lt;code&gt;f64&lt;/code&gt; です。そのため、それは &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; の一般的な定義を &lt;code&gt;Option_i32&lt;/code&gt; と &lt;code&gt;Option_f64&lt;/code&gt; に拡張し、それによって一般的な定義を特定のものに置き換えます。</target>
        </trans-unit>
        <trans-unit id="2db72e30aa272b55473c5bb5758326ffc2e81ae7" translate="yes" xml:space="preserve">
          <source>When Should You Use Which Collection?</source>
          <target state="translated">どのコレクションを使うべきか?</target>
        </trans-unit>
        <trans-unit id="25db746b33ac06b90cb2c2043d4cbfe8648aece7" translate="yes" xml:space="preserve">
          <source>When a closure captures a value from its environment, it uses memory to store the values for use in the closure body. This use of memory is overhead that we don&amp;rsquo;t want to pay in more common cases where we want to execute code that doesn&amp;rsquo;t capture its environment. Because functions are never allowed to capture their environment, defining and using functions will never incur this overhead.</source>
          <target state="translated">クロージャーは、その環境から値を取得するときに、メモリーを使用して、クロージャー本体で使用する値を格納します。このメモリの使用は、その環境をキャプチャしないコードを実行するより一般的なケースでは支払いたくないオーバーヘッドです。関数が環境をキャプチャすることは決して許可されないため、関数を定義して使用しても、このオーバーヘッドが発生することはありません。</target>
        </trans-unit>
        <trans-unit id="497ca50f155974a1532fc87c50b119765598e81c" translate="yes" xml:space="preserve">
          <source>When a function requires proper alignment, it does so even if the access has size 0, i.e., even if memory is not actually touched. Consider using &lt;a href=&quot;struct.nonnull#method.dangling&quot;&gt;&lt;code&gt;NonNull::dangling&lt;/code&gt;&lt;/a&gt; in such cases.</source>
          <target state="translated">関数が適切なアラインメントを必要とする場合、アクセスがサイズ0であっても、つまり、メモリが実際に操作されていなくても、そうします。このような場合は、&lt;a href=&quot;struct.nonnull#method.dangling&quot;&gt; &lt;code&gt;NonNull::dangling&lt;/code&gt; &lt;/a&gt;使用を検討してください。</target>
        </trans-unit>
        <trans-unit id="8dfc9c0b52337fbeec4162f45c275f5e1ab922f4" translate="yes" xml:space="preserve">
          <source>When a function returns &lt;code&gt;Pending&lt;/code&gt;, the function &lt;em&gt;must&lt;/em&gt; also ensure that the current task is scheduled to be awoken when progress can be made.</source>
          <target state="translated">関数が戻るときに &lt;code&gt;Pending&lt;/code&gt; 、機能は&lt;em&gt;しなければならない&lt;/em&gt;にも進展ができたときに、現在のタスクが起こされる予定であることを確認してください。</target>
        </trans-unit>
        <trans-unit id="df3a37e739621c9131e28f62bb1b9067e261aa43" translate="yes" xml:space="preserve">
          <source>When a future is not ready yet, &lt;code&gt;poll&lt;/code&gt; returns &lt;code&gt;Poll::Pending&lt;/code&gt; and stores a clone of the &lt;a href=&quot;../task/struct.waker&quot;&gt;&lt;code&gt;Waker&lt;/code&gt;&lt;/a&gt; copied from the current &lt;a href=&quot;../task/struct.context&quot;&gt;&lt;code&gt;Context&lt;/code&gt;&lt;/a&gt;. This &lt;a href=&quot;../task/struct.waker&quot;&gt;&lt;code&gt;Waker&lt;/code&gt;&lt;/a&gt; is then woken once the future can make progress. For example, a future waiting for a socket to become readable would call &lt;code&gt;.clone()&lt;/code&gt; on the &lt;a href=&quot;../task/struct.waker&quot;&gt;&lt;code&gt;Waker&lt;/code&gt;&lt;/a&gt; and store it. When a signal arrives elsewhere indicating that the socket is readable, &lt;a href=&quot;../task/struct.waker#method.wake&quot;&gt;&lt;code&gt;Waker::wake&lt;/code&gt;&lt;/a&gt; is called and the socket future's task is awoken. Once a task has been woken up, it should attempt to &lt;code&gt;poll&lt;/code&gt; the future again, which may or may not produce a final value.</source>
          <target state="translated">futureがまだ準備ができていない場合、 &lt;code&gt;poll&lt;/code&gt; は &lt;code&gt;Poll::Pending&lt;/code&gt; を返し、現在の&lt;a href=&quot;../task/struct.context&quot;&gt; &lt;code&gt;Context&lt;/code&gt; &lt;/a&gt;からコピーされた&lt;a href=&quot;../task/struct.waker&quot;&gt; &lt;code&gt;Waker&lt;/code&gt; の&lt;/a&gt;クローンを保存します。この&lt;a href=&quot;../task/struct.waker&quot;&gt; &lt;code&gt;Waker&lt;/code&gt; &lt;/a&gt;は、未来が進歩することができれば目覚めます。たとえば、ソケットが読み取り可能になるのを待つフューチャーは、&lt;a href=&quot;../task/struct.waker&quot;&gt; &lt;code&gt;Waker&lt;/code&gt; で&lt;/a&gt; &lt;code&gt;.clone()&lt;/code&gt; を呼び出して保存します。ソケットが読み取り可能であることを示す信号が他の場所に到着すると、&lt;a href=&quot;../task/struct.waker#method.wake&quot;&gt; &lt;code&gt;Waker::wake&lt;/code&gt; &lt;/a&gt;が呼び出され、ソケットフューチャーのタスクが起こされます。タスクが起こされると、それは再び未来を &lt;code&gt;poll&lt;/code&gt; するように試みるべきであり、それは最終的な値を生成するかもしれないし、しないかもしれない。</target>
        </trans-unit>
        <trans-unit id="0a389975a3b1e10203b84d73debfb669c64513a0" translate="yes" xml:space="preserve">
          <source>When a generic function is referenced, its type is instantiated based on the context of the reference. For example, calling the &lt;code&gt;foo&lt;/code&gt; function here:</source>
          <target state="translated">ジェネリック関数が参照されると、その型は参照のコンテキストに基づいてインスタンス化されます。たとえば、ここで &lt;code&gt;foo&lt;/code&gt; 関数を呼び出します。</target>
        </trans-unit>
        <trans-unit id="6dd55c7ab400acdd91bba18da1fe8d01823a4e07" translate="yes" xml:space="preserve">
          <source>When a macro is exported, the &lt;code&gt;#[macro_export]&lt;/code&gt; attribute can have the &lt;code&gt;local_inner_macros&lt;/code&gt; keyword added to automatically prefix all contained macro invocations with &lt;code&gt;$crate::&lt;/code&gt;. This is intended primarily as a tool to migrate code written before &lt;code&gt;$crate&lt;/code&gt; was added to the language to work with Rust 2018's path-based imports of macros. Its use is discouraged in new code.</source>
          <target state="translated">マクロがエクスポートされると、 &lt;code&gt;#[macro_export]&lt;/code&gt; 属性に &lt;code&gt;local_inner_macros&lt;/code&gt; キーワードを追加して、含まれるすべてのマクロ呼び出しに &lt;code&gt;$crate::&lt;/code&gt; crate ::を自動的にプレフィックスすることができます。これは主に、 &lt;code&gt;$crate&lt;/code&gt; が言語に追加される前に記述されたコードを移行して、Rust 2018のパスベースのマクロのインポートで機能するツールとして使用することを目的としています。新しいコードではその使用は推奨されていません。</target>
        </trans-unit>
        <trans-unit id="5cf6c55b5740990d2d97e584acaf0732444aabf9" translate="yes" xml:space="preserve">
          <source>When a macro is invoked by an unqualified identifier (not part of a multi-part path), it is first looked up in textual scoping. If this does not yield any results, then it is looked up in path-based scoping. If the macro's name is qualified with a path, then it is only looked up in path-based scoping.</source>
          <target state="translated">マクロが修飾されていない識別子(マルチパートパスの一部ではない)によって呼び出された場合、最初にテキスト スコーピングで検索されます。これで結果が得られない場合は、パスベースのスコーピングで検索されます。マクロの名前がパスで修飾されている場合は、パスベースのスコーピングでのみ検索されます。</target>
        </trans-unit>
        <trans-unit id="da106a1de68be7bf6a4528e441dfbcc8cf456544" translate="yes" xml:space="preserve">
          <source>When a macro is invoked, the macro expander looks up macro invocations by name, and tries each macro rule in turn. It transcribes the first successful match; if this results in an error, then future matches are not tried. When matching, no lookahead is performed; if the compiler cannot unambiguously determine how to parse the macro invocation one token at a time, then it is an error. In the following example, the compiler does not look ahead past the identifier to see if the following token is a &lt;code&gt;)&lt;/code&gt;, even though that would allow it to parse the invocation unambiguously:</source>
          <target state="translated">マクロが呼び出されると、マクロエクスパンダはマクロ呼び出しを名前で検索し、各マクロルールを順番に試行します。最初に一致したものを書き起こします。これによりエラーが発生した場合、その後の一致は試行されません。一致する場合、先読みは実行されません。コンパイラがマクロ呼び出しを一度に1つのトークンを解析する方法を明確に決定できない場合、エラーになります。次の例では、コンパイラは呼び出しを明確に解析できるようにする場合でも、識別子を越えて次のトークンが &lt;code&gt;)&lt;/code&gt; であるかどうかを確認しません。</target>
        </trans-unit>
        <trans-unit id="db73e8cf8b50208d0fa9d6efe2409269d6d07431" translate="yes" xml:space="preserve">
          <source>When a place expression is evaluated in a value expression context, or is bound by value in a pattern, it denotes the value held &lt;em&gt;in&lt;/em&gt; that memory location. If the type of that value implements &lt;a href=&quot;special-types-and-traits#copy&quot;&gt;&lt;code&gt;Copy&lt;/code&gt;&lt;/a&gt;, then the value will be copied. In the remaining situations if that type is &lt;a href=&quot;special-types-and-traits#sized&quot;&gt;&lt;code&gt;Sized&lt;/code&gt;&lt;/a&gt;, then it may be possible to move the value. Only the following place expressions may be moved out of:</source>
          <target state="translated">プレース式が値式のコンテキストで評価されるか、パターンの値にバインドされている場合&lt;em&gt;、&lt;/em&gt;そのメモリ位置に保持さ&lt;em&gt;れ&lt;/em&gt;ている値を示します。その値のタイプが&lt;a href=&quot;special-types-and-traits#copy&quot;&gt; &lt;code&gt;Copy&lt;/code&gt; を&lt;/a&gt;実装している場合、値はコピーされます。残りの状況では、そのタイプが&lt;a href=&quot;special-types-and-traits#sized&quot;&gt; &lt;code&gt;Sized&lt;/code&gt; の&lt;/a&gt;場合、値を移動できる可能性があります。次の場所の式のみを移動できます：</target>
        </trans-unit>
        <trans-unit id="f1166409c8dae55a33ce311312672ddb4f4b9f7d" translate="yes" xml:space="preserve">
          <source>When a programmer has sufficient conviction that a sequence of potentially unsafe operations is actually safe, they can encapsulate that sequence (taken as a whole) within an &lt;code&gt;unsafe&lt;/code&gt; block. The compiler will consider uses of such code safe, in the surrounding context.</source>
          <target state="translated">プログラマーは、潜在的に安全でない操作のシーケンスが実際に安全であるという十分な確信を持っている場合、そのシーケンス（全体として取られた）を &lt;code&gt;unsafe&lt;/code&gt; ブロック内にカプセル化できます。コンパイラーは、そのようなコードの使用を周囲の状況で安全であると見なします。</target>
        </trans-unit>
        <trans-unit id="37dbbb1590700cff7b3552010c53f0420bf77ff3" translate="yes" xml:space="preserve">
          <source>When a stack frame is exited, its local allocations are all released, and its references to boxes are dropped.</source>
          <target state="translated">スタックフレームが終了すると、そのローカル割り当てはすべて解放され、ボックスへの参照は削除されます。</target>
        </trans-unit>
        <trans-unit id="9c30511e183a1aabc7ef13d867dc58fb961ffdbb" translate="yes" xml:space="preserve">
          <source>When a temporary value expression is being created that is assigned into a &lt;a href=&quot;statements#let-statements&quot;&gt;&lt;code&gt;let&lt;/code&gt; declaration&lt;/a&gt;, however, the temporary is created with the lifetime of the enclosing block instead, as using the enclosing &lt;a href=&quot;statements#let-statements&quot;&gt;&lt;code&gt;let&lt;/code&gt; declaration&lt;/a&gt; would be a guaranteed error (since a pointer to the temporary would be stored into a variable, but the temporary would be freed before the variable could be used). The compiler uses simple syntactic rules to decide which values are being assigned into a &lt;code&gt;let&lt;/code&gt; binding, and therefore deserve a longer temporary lifetime.</source>
          <target state="translated">ただし、&lt;a href=&quot;statements#let-statements&quot;&gt; &lt;code&gt;let&lt;/code&gt; 宣言に&lt;/a&gt;割り当てられた一時的な値式が作成されている場合は、代わりに囲まれた&lt;a href=&quot;statements#let-statements&quot;&gt; &lt;code&gt;let&lt;/code&gt; 宣言&lt;/a&gt;を使用するとエラーが保証されるため（一時ファイルへのポインタが変数に格納されますが、一時変数は変数が使用される前に解放されます）。コンパイラーは、単純な構文規則を使用して、 &lt;code&gt;let&lt;/code&gt; バインディングに割り当てられる値を決定するため、一時的な寿命が長くなります。</target>
        </trans-unit>
        <trans-unit id="3039f11f165afd56d3c433b69cd1393d96919902" translate="yes" xml:space="preserve">
          <source>When a tool is not in use, the tool's attributes are accepted without a warning. When the tool is in use, the tool is responsible for processing and interpretation of its attributes.</source>
          <target state="translated">ツールが使用されていないときは、ツールの属性は警告なしで受け入れられます。ツールが使用されている場合、そのツールはその属性の処理と解釈に責任を持つ。</target>
        </trans-unit>
        <trans-unit id="57dd9a0351b44496fecb16d4596f4a8247328e39" translate="yes" xml:space="preserve">
          <source>When a trait object is used as a type argument of a generic type, Rust will try to infer its lifetime if unspecified. However, this isn't possible when the containing type has more than one lifetime bound.</source>
          <target state="translated">一般的な型の型引数として trait オブジェクトが使用されている場合、Rust は指定されていない場合、その寿命を推論しようとします。しかし、含まれている型が複数のライフタイムに縛られている場合には、これはできません。</target>
        </trans-unit>
        <trans-unit id="0ed6434b244126fa9e52f60dea8a8d6ab8918d34" translate="yes" xml:space="preserve">
          <source>When a type implements a trait's associated function, it has to use the same signature. So in this case, since &lt;code&gt;Foo::foo&lt;/code&gt; does not take any argument and does not return anything, its implementation on &lt;code&gt;Bar&lt;/code&gt; should be the same:</source>
          <target state="translated">When a type implements a trait's associated function, it has to use the same signature. So in this case, since &lt;code&gt;Foo::foo&lt;/code&gt; does not take any argument and does not return anything, its implementation on &lt;code&gt;Bar&lt;/code&gt; should be the same:</target>
        </trans-unit>
        <trans-unit id="746134148fbdc4bec37479d1ea67a6352b384088" translate="yes" xml:space="preserve">
          <source>When a type implements a trait's associated function, it has to use the same signature. So in this case, since &lt;code&gt;Foo::foo&lt;/code&gt; takes &lt;code&gt;self&lt;/code&gt; as argument and does not return anything, its implementation on &lt;code&gt;Bar&lt;/code&gt; should be the same:</source>
          <target state="translated">When a type implements a trait's associated function, it has to use the same signature. So in this case, since &lt;code&gt;Foo::foo&lt;/code&gt; takes &lt;code&gt;self&lt;/code&gt; as argument and does not return anything, its implementation on &lt;code&gt;Bar&lt;/code&gt; should be the same:</target>
        </trans-unit>
        <trans-unit id="5832f57eccb2fb5a09efa61cb2de8da5f920035f" translate="yes" xml:space="preserve">
          <source>When a union is dropped, it cannot know which of its fields needs to be dropped. For this reason, all union fields must either be of a &lt;a href=&quot;../../std/marker/trait.copy&quot;&gt;&lt;code&gt;Copy&lt;/code&gt;&lt;/a&gt; type or of the shape &lt;a href=&quot;../../std/mem/struct.manuallydrop&quot;&gt;&lt;code&gt;ManuallyDrop&amp;lt;_&amp;gt;&lt;/code&gt;&lt;/a&gt;. This ensures that a union does not need to drop anything when it goes out of scope.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa395a4e08ef9a2a05a0ac466a281cf522ff2172" translate="yes" xml:space="preserve">
          <source>When a union is dropped, it cannot know which of its fields needs to be dropped. For this reason, all union fields must either be of a &lt;code&gt;Copy&lt;/code&gt; type or of the shape &lt;a href=&quot;../../std/mem/struct.manuallydrop&quot;&gt;&lt;code&gt;ManuallyDrop&amp;lt;_&amp;gt;&lt;/code&gt;&lt;/a&gt;. This ensures that a union does not need to drop anything when it goes out of scope.</source>
          <target state="translated">ユニオンが削除されると、どのフィールドを削除する必要があるかを知ることができません。このため、すべてのユニオンフィールドは、 &lt;code&gt;Copy&lt;/code&gt; タイプまたは&lt;a href=&quot;../../std/mem/struct.manuallydrop&quot;&gt; &lt;code&gt;ManuallyDrop&amp;lt;_&amp;gt;&lt;/code&gt; &lt;/a&gt;形状である必要があります。これにより、ユニオンがスコープ外になったときに何もドロップする必要がなくなります。</target>
        </trans-unit>
        <trans-unit id="4c9879ea05cdb93dca8c0304f717ae122b1e8ba0" translate="yes" xml:space="preserve">
          <source>When a user calls &lt;code&gt;map.entry(&amp;amp;key)&lt;/code&gt;, the map will search for the key and then yield a variant of the &lt;code&gt;Entry&lt;/code&gt; enum.</source>
          <target state="translated">ユーザーが &lt;code&gt;map.entry(&amp;amp;key)&lt;/code&gt; を呼び出すと、マップはキーを検索してから、 &lt;code&gt;Entry&lt;/code&gt; enumのバリアントを生成します。</target>
        </trans-unit>
        <trans-unit id="fdd0bd3294966057d48234d31e6f7d296a99309a" translate="yes" xml:space="preserve">
          <source>When a value goes out of scope, it will have its &lt;code&gt;drop&lt;/code&gt; method called if its type implements &lt;code&gt;Drop&lt;/code&gt;. Then, any fields the value contains will also be dropped recursively.</source>
          <target state="translated">値がスコープから外れると、その型が &lt;code&gt;Drop&lt;/code&gt; を実装している場合、その &lt;code&gt;drop&lt;/code&gt; メソッドが呼び出されます。次に、値に含まれるフィールドも再帰的に削除されます。</target>
        </trans-unit>
        <trans-unit id="d7ba61b38031de6106df804542ee455b8b72fed7" translate="yes" xml:space="preserve">
          <source>When a value is no longer needed, Rust will run a &quot;destructor&quot; on that value. The most common way that a value is no longer needed is when it goes out of scope. Destructors may still run in other circumstances, but we're going to focus on scope for the examples here. To learn about some of those other cases, please see &lt;a href=&quot;../../reference/destructors&quot;&gt;the reference&lt;/a&gt; section on destructors.</source>
          <target state="translated">When a value is no longer needed, Rust will run a &quot;destructor&quot; on that value. The most common way that a value is no longer needed is when it goes out of scope. Destructors may still run in other circumstances, but we're going to focus on scope for the examples here. To learn about some of those other cases, please see &lt;a href=&quot;../../reference/destructors&quot;&gt;the reference&lt;/a&gt; section on destructors.</target>
        </trans-unit>
        <trans-unit id="0821834765580ea9c5440213203fcb1c1cbcdd57" translate="yes" xml:space="preserve">
          <source>When a variable is immutable, once a value is bound to a name, you can&amp;rsquo;t change that value. To illustrate this, let&amp;rsquo;s generate a new project called &lt;em&gt;variables&lt;/em&gt; in your &lt;em&gt;projects&lt;/em&gt; directory by using &lt;code&gt;cargo new variables&lt;/code&gt;.</source>
          <target state="translated">変数が不変である場合、値が名前にバインドされると、その値を変更することはできません。これを説明するために、 &lt;code&gt;cargo new variables&lt;/code&gt; を使用して、&lt;em&gt;プロジェクト&lt;/em&gt;ディレクトリに&lt;em&gt;variables&lt;/em&gt;という新しいプロジェクトを生成してみましょう。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="bd9a182b7a78038005ce22938a8bdbd281d7f445" translate="yes" xml:space="preserve">
          <source>When an &lt;a href=&quot;glossary#initialized&quot;&gt;initialized&lt;/a&gt;&lt;a href=&quot;variables&quot;&gt;variable&lt;/a&gt; in Rust goes out of scope or a &lt;a href=&quot;expressions#temporary-lifetimes&quot;&gt;temporary&lt;/a&gt; is no longer needed its &lt;em&gt;destructor&lt;/em&gt; is run. &lt;a href=&quot;expressions/operator-expr#assignment-expressions&quot;&gt;Assignment&lt;/a&gt; also runs the destructor of its left-hand operand, unless it's an uninitialized variable. If a &lt;a href=&quot;types/struct&quot;&gt;struct&lt;/a&gt; variable has been partially initialized, only its initialized fields are dropped.</source>
          <target state="translated">ときに&lt;a href=&quot;glossary#initialized&quot;&gt;初期化された&lt;/a&gt;&lt;a href=&quot;variables&quot;&gt;変数&lt;/a&gt;ルストがスコープ外になるか、&lt;a href=&quot;expressions#temporary-lifetimes&quot;&gt;一時的に&lt;/a&gt;不要になったその&lt;em&gt;デストラクタが&lt;/em&gt;実行されます。&lt;a href=&quot;expressions/operator-expr#assignment-expressions&quot;&gt;割り当て&lt;/a&gt;は、初期化されていない変数でない限り、左側のオペランドのデストラクタも実行します。&lt;a href=&quot;types/struct&quot;&gt;構造体&lt;/a&gt;変数が部分的に初期化されている場合、初期化されたフィールドのみが削除されます。</target>
        </trans-unit>
        <trans-unit id="a5a59a643bd12cd60c0f839e9c5140aa3d6d2e23" translate="yes" xml:space="preserve">
          <source>When an &lt;a href=&quot;glossary#initialized&quot;&gt;initialized&lt;/a&gt;&lt;a href=&quot;variables&quot;&gt;variable&lt;/a&gt; or &lt;a href=&quot;expressions#temporaries&quot;&gt;temporary&lt;/a&gt; goes out of &lt;a href=&quot;#drop-scopes&quot;&gt;scope&lt;/a&gt; its &lt;em&gt;destructor&lt;/em&gt; is run, or it is &lt;em&gt;dropped&lt;/em&gt;. &lt;a href=&quot;expressions/operator-expr#assignment-expressions&quot;&gt;Assignment&lt;/a&gt; also runs the destructor of its left-hand operand, if it's initialized. If a variable has been partially initialized, only its initialized fields are dropped.</source>
          <target state="translated">When an &lt;a href=&quot;glossary#initialized&quot;&gt;initialized&lt;/a&gt;&lt;a href=&quot;variables&quot;&gt;variable&lt;/a&gt; or &lt;a href=&quot;expressions#temporaries&quot;&gt;temporary&lt;/a&gt; goes out of &lt;a href=&quot;#drop-scopes&quot;&gt;scope&lt;/a&gt; its &lt;em&gt;destructor&lt;/em&gt; is run, or it is &lt;em&gt;dropped&lt;/em&gt;. &lt;a href=&quot;expressions/operator-expr#assignment-expressions&quot;&gt;Assignment&lt;/a&gt; also runs the destructor of its left-hand operand, if it's initialized. If a variable has been partially initialized, only its initialized fields are dropped.</target>
        </trans-unit>
        <trans-unit id="e8c277e0058026b8160091c9cd27bc3ead387a36" translate="yes" xml:space="preserve">
          <source>When an instance of &lt;code&gt;ChildStderr&lt;/code&gt; is &lt;a href=&quot;../ops/trait.drop&quot;&gt;dropped&lt;/a&gt;, the &lt;code&gt;ChildStderr&lt;/code&gt;'s underlying file handle will be closed.</source>
          <target state="translated">&lt;code&gt;ChildStderr&lt;/code&gt; のインスタンスが&lt;a href=&quot;../ops/trait.drop&quot;&gt;削除される&lt;/a&gt;と、 &lt;code&gt;ChildStderr&lt;/code&gt; の基になるファイルハンドルが閉じられます。</target>
        </trans-unit>
        <trans-unit id="958df1c2da20bb17df895f86bdedaa3ff7514d03" translate="yes" xml:space="preserve">
          <source>When an instance of &lt;code&gt;ChildStdin&lt;/code&gt; is &lt;a href=&quot;../ops/trait.drop&quot;&gt;dropped&lt;/a&gt;, the &lt;code&gt;ChildStdin&lt;/code&gt;'s underlying file handle will be closed. If the child process was blocked on input prior to being dropped, it will become unblocked after dropping.</source>
          <target state="translated">&lt;code&gt;ChildStdin&lt;/code&gt; のインスタンスが&lt;a href=&quot;../ops/trait.drop&quot;&gt;削除される&lt;/a&gt;と、 &lt;code&gt;ChildStdin&lt;/code&gt; の基になるファイルハンドルが閉じられます。子プロセスが削除される前に入力でブロックされていた場合、削除後にブロックが解除されます。</target>
        </trans-unit>
        <trans-unit id="7f3df133c5feae9ef4d3689b7485515d7c0d45c0" translate="yes" xml:space="preserve">
          <source>When an instance of &lt;code&gt;ChildStdout&lt;/code&gt; is &lt;a href=&quot;../ops/trait.drop&quot;&gt;dropped&lt;/a&gt;, the &lt;code&gt;ChildStdout&lt;/code&gt;'s underlying file handle will be closed.</source>
          <target state="translated">&lt;code&gt;ChildStdout&lt;/code&gt; のインスタンスが&lt;a href=&quot;../ops/trait.drop&quot;&gt;削除される&lt;/a&gt;と、 &lt;code&gt;ChildStdout&lt;/code&gt; の基になるファイルハンドルが閉じられます。</target>
        </trans-unit>
        <trans-unit id="19c24a2b0ecc148719938d64be9c4f9999639c3f" translate="yes" xml:space="preserve">
          <source>When annotating lifetimes in functions, the annotations go in the function signature, not in the function body. Rust can analyze the code within the function without any help. However, when a function has references to or from code outside that function, it becomes almost impossible for Rust to figure out the lifetimes of the parameters or return values on its own. The lifetimes might be different each time the function is called. This is why we need to annotate the lifetimes manually.</source>
          <target state="translated">関数内でライフタイムをアノテーションする場合、アノテーションは関数本体ではなく、関数のシグネチャに行われます。Rust は、関数内のコードを何の助けも借りずに解析することができます。しかし、関数がその関数外のコードを参照している場合、Rustがパラメータや戻り値の寿命を独自に把握することはほとんど不可能になります。関数が呼び出されるたびに寿命が異なる場合があります。そのため、手動で寿命をアノテーションする必要があります。</target>
        </trans-unit>
        <trans-unit id="5eb36c8197085fe87eab8cbaf9a553875da1cc3a" translate="yes" xml:space="preserve">
          <source>When anticipating a large influx of elements, the &lt;code&gt;reserve&lt;/code&gt; family of methods can be used to hint to the collection how much room it should make for the coming items. As with &lt;code&gt;with_capacity&lt;/code&gt;, the precise behavior of these methods will be specific to the collection of interest.</source>
          <target state="translated">要素の大規模な流入を予測する場合、メソッドの &lt;code&gt;reserve&lt;/code&gt; ファミリーを使用して、次のアイテムのためにどのくらいのスペースが必要かをコレクションに示唆できます。 &lt;code&gt;with_capacity&lt;/code&gt; と同様に、これらのメソッドの正確な動作は、対象のコレクションに固有です。</target>
        </trans-unit>
        <trans-unit id="5869f8bc191d572958f5cd39be698922927ab6f9" translate="yes" xml:space="preserve">
          <source>When applicable, unstable sorting is preferred because it is generally faster than stable sorting and it doesn't allocate auxiliary memory. See &lt;a href=&quot;#method.sort_unstable&quot;&gt;&lt;code&gt;sort_unstable&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">適用可能な場合、不安定なソートは、安定したソートよりも一般的に高速であり、補助メモリを割り当てないため、推奨されます。&lt;a href=&quot;#method.sort_unstable&quot;&gt; &lt;code&gt;sort_unstable&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="d79690f38c03573c4c869dcdef6200c1505551cc" translate="yes" xml:space="preserve">
          <source>When applicable, unstable sorting is preferred because it is generally faster than stable sorting and it doesn't allocate auxiliary memory. See &lt;a href=&quot;#method.sort_unstable_by&quot;&gt;&lt;code&gt;sort_unstable_by&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">適用可能な場合、不安定なソートは、安定したソートよりも一般的に高速であり、補助メモリを割り当てないため、推奨されます。&lt;a href=&quot;#method.sort_unstable_by&quot;&gt; &lt;code&gt;sort_unstable_by&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="e1e5b5f3c7b4b4a47f33b2043eea612fc9e4a52c" translate="yes" xml:space="preserve">
          <source>When applicable, unstable sorting is preferred because it is generally faster than stable sorting and it doesn't allocate auxiliary memory. See &lt;a href=&quot;#method.sort_unstable_by_key&quot;&gt;&lt;code&gt;sort_unstable_by_key&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">適用可能な場合、不安定なソートは、安定したソートよりも一般的に高速であり、補助メモリを割り当てないため、推奨されます。&lt;a href=&quot;#method.sort_unstable_by_key&quot;&gt; &lt;code&gt;sort_unstable_by_key&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="9457ac5b05fa1acc97622737a2e6a54db8e47e30" translate="yes" xml:space="preserve">
          <source>When applied to a function in an &lt;code&gt;extern&lt;/code&gt; block the attribute must also be applied to any linked implementations, otherwise undefined behavior results. When applied to a function which is made available to an &lt;code&gt;extern&lt;/code&gt; block, the declaration in the &lt;code&gt;extern&lt;/code&gt; block must also have the attribute, otherwise undefined behavior results.</source>
          <target state="translated">When applied to a function in an &lt;code&gt;extern&lt;/code&gt; block the attribute must also be applied to any linked implementations, otherwise undefined behavior results. When applied to a function which is made available to an &lt;code&gt;extern&lt;/code&gt; block, the declaration in the &lt;code&gt;extern&lt;/code&gt; block must also have the attribute, otherwise undefined behavior results.</target>
        </trans-unit>
        <trans-unit id="19a16b324a673b29db2da7d4da32ddcedab4170b" translate="yes" xml:space="preserve">
          <source>When applied to values of the &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; type, it propagates &lt;code&gt;None&lt;/code&gt;s. If the value is &lt;code&gt;None&lt;/code&gt;, then it will return &lt;code&gt;None&lt;/code&gt;. If applied to &lt;code&gt;Some(x)&lt;/code&gt;, then it will unwrap the value to evaluate to &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; タイプの値に適用されると、 &lt;code&gt;None&lt;/code&gt; を伝播します。値がされていない場合は &lt;code&gt;None&lt;/code&gt; 、それは返されません &lt;code&gt;None&lt;/code&gt; 。 &lt;code&gt;Some(x)&lt;/code&gt; に適用すると、値をアンラップして &lt;code&gt;x&lt;/code&gt; に評価します。</target>
        </trans-unit>
        <trans-unit id="6010016322f07bd48e6ab713e2801cda33b2dfbc" translate="yes" xml:space="preserve">
          <source>When applied to values of the &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt; type, it propagates errors. If the value is &lt;code&gt;Err(e)&lt;/code&gt;, then it will return &lt;code&gt;Err(From::from(e))&lt;/code&gt; from the enclosing function or closure. If applied to &lt;code&gt;Ok(x)&lt;/code&gt;, then it will unwrap the value to evaluate to &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt; タイプの値に適用すると、エラーが発生します。値が &lt;code&gt;Err(e)&lt;/code&gt; の場合、囲んでいる関数またはクロージャー &lt;code&gt;Err(From::from(e))&lt;/code&gt; を返します。 &lt;code&gt;Ok(x)&lt;/code&gt; に適用すると、値をアンラップして &lt;code&gt;x&lt;/code&gt; に評価します。</target>
        </trans-unit>
        <trans-unit id="6bc7928c8c171d59b0f5be17006fd056745b554a" translate="yes" xml:space="preserve">
          <source>When applied within a crate, downstream users of the crate will need to use the &lt;code&gt;_&lt;/code&gt; pattern when matching enums and use the &lt;code&gt;..&lt;/code&gt; pattern when matching structs. Downstream crates cannot match against non-exhaustive enum variants.</source>
          <target state="translated">クレート内で適用される場合、クレートのダウンストリームユーザーは、列挙型を照合するときに &lt;code&gt;_&lt;/code&gt; パターンを使用し、構造体を照合するときに &lt;code&gt;..&lt;/code&gt; パターンを使用する必要があります。下流のクレートは、網羅的でない列挙型のバリアントと一致することはできません。</target>
        </trans-unit>
        <trans-unit id="7b7ce408de1692c1cce1be5c86062fc2d1aa15ec" translate="yes" xml:space="preserve">
          <source>When are these warnings going to turn into errors?</source>
          <target state="translated">この警告はいつになったらエラーになるんだ?</target>
        </trans-unit>
        <trans-unit id="93dc9e73dc6c00708f0214c1f73e691c8c3e8698" translate="yes" xml:space="preserve">
          <source>When associated with &lt;code&gt;loop&lt;/code&gt;, a break expression may be used to return a value from that loop. This is only valid with &lt;code&gt;loop&lt;/code&gt; and not with any other type of loop. If no value is specified, &lt;code&gt;break;&lt;/code&gt; returns &lt;code&gt;()&lt;/code&gt;. Every &lt;code&gt;break&lt;/code&gt; within a loop must return the same type.</source>
          <target state="translated">When associated with &lt;code&gt;loop&lt;/code&gt; , a break expression may be used to return a value from that loop. This is only valid with &lt;code&gt;loop&lt;/code&gt; and not with any other type of loop. If no value is specified, &lt;code&gt;break;&lt;/code&gt; returns &lt;code&gt;()&lt;/code&gt; . Every &lt;code&gt;break&lt;/code&gt; within a loop must return the same type.</target>
        </trans-unit>
        <trans-unit id="b0d2ee129e76133ba53a5ea99826864278fbc53d" translate="yes" xml:space="preserve">
          <source>When associated with a &lt;code&gt;loop&lt;/code&gt;, a break expression may be used to return a value from that loop, via one of the forms &lt;code&gt;break EXPR&lt;/code&gt; or &lt;code&gt;break 'label EXPR&lt;/code&gt;, where &lt;code&gt;EXPR&lt;/code&gt; is an expression whose result is returned from the &lt;code&gt;loop&lt;/code&gt;. For example:</source>
          <target state="translated">関連付けられたときに &lt;code&gt;loop&lt;/code&gt; 形のいずれかを介して、ブレークの発現は、そのループから値を返すために使用されてもよい &lt;code&gt;break EXPR&lt;/code&gt; 又は &lt;code&gt;break 'label EXPR&lt;/code&gt; 、 &lt;code&gt;EXPR&lt;/code&gt; が結果から返された式である &lt;code&gt;loop&lt;/code&gt; 。例えば：</target>
        </trans-unit>
        <trans-unit id="4a763dfd452f118669800efdde464c1dbe786ee4" translate="yes" xml:space="preserve">
          <source>When called from a const context, the function is interpreted by the compiler at compile time. The interpretation happens in the environment of the compilation target and not the host. So &lt;code&gt;usize&lt;/code&gt; is &lt;code&gt;32&lt;/code&gt; bits if you are compiling against a &lt;code&gt;32&lt;/code&gt; bit system, irrelevant of whether you are building on a &lt;code&gt;64&lt;/code&gt; bit or a &lt;code&gt;32&lt;/code&gt; bit system.</source>
          <target state="translated">When called from a const context, the function is interpreted by the compiler at compile time. The interpretation happens in the environment of the compilation target and not the host. So &lt;code&gt;usize&lt;/code&gt; is &lt;code&gt;32&lt;/code&gt; bits if you are compiling against a &lt;code&gt;32&lt;/code&gt; bit system, irrelevant of whether you are building on a &lt;code&gt;64&lt;/code&gt; bit or a &lt;code&gt;32&lt;/code&gt; bit system.</target>
        </trans-unit>
        <trans-unit id="c47843d04159de5ef9116ac80f96bd39967f9187" translate="yes" xml:space="preserve">
          <source>When calling &lt;code&gt;product()&lt;/code&gt; and a primitive integer type is being returned, method will panic if the computation overflows and debug assertions are enabled.</source>
          <target state="translated">&lt;code&gt;product()&lt;/code&gt; を呼び出し、プリミティブ整数型が返されているときに、計算がオーバーフローし、デバッグアサーションが有効になっている場合、メソッドはパニックになります。</target>
        </trans-unit>
        <trans-unit id="e4216881c81bce1d1b8084df44f2b67955efbb5a" translate="yes" xml:space="preserve">
          <source>When calling &lt;code&gt;sum()&lt;/code&gt; and a primitive integer type is being returned, this method will panic if the computation overflows and debug assertions are enabled.</source>
          <target state="translated">&lt;code&gt;sum()&lt;/code&gt; を呼び出し、プリミティブ整数型が返されている場合、計算がオーバーフローしてデバッグアサーションが有効になっていると、このメソッドはパニックになります。</target>
        </trans-unit>
        <trans-unit id="ad8c85712072b3d065a1d9c78cdc29d373ce9764" translate="yes" xml:space="preserve">
          <source>When calling methods with the same name, you&amp;rsquo;ll need to tell Rust which one you want to use. Consider the code in Listing 19-16 where we&amp;rsquo;ve defined two traits, &lt;code&gt;Pilot&lt;/code&gt; and &lt;code&gt;Wizard&lt;/code&gt;, that both have a method called &lt;code&gt;fly&lt;/code&gt;. We then implement both traits on a type &lt;code&gt;Human&lt;/code&gt; that already has a method named &lt;code&gt;fly&lt;/code&gt; implemented on it. Each &lt;code&gt;fly&lt;/code&gt; method does something different.</source>
          <target state="translated">同じ名前のメソッドを呼び出す場合、どのメソッドを使用するかをRustに通知する必要があります。リスト19-16のコードで、 &lt;code&gt;Pilot&lt;/code&gt; と &lt;code&gt;Wizard&lt;/code&gt; の 2つの特性を定義しました。どちらにも &lt;code&gt;fly&lt;/code&gt; というメソッドがあります。次に、 &lt;code&gt;fly&lt;/code&gt; というメソッドがすでに実装されているタイプ &lt;code&gt;Human&lt;/code&gt; に両方の特性を実装します。それぞれの &lt;code&gt;fly&lt;/code&gt; メソッドは別のことを行います。</target>
        </trans-unit>
        <trans-unit id="09c7e5de85184f1e292948f95737d163821f3f97" translate="yes" xml:space="preserve">
          <source>When calling this method, you have to ensure that &lt;em&gt;either&lt;/em&gt; the pointer is NULL &lt;em&gt;or&lt;/em&gt; all of the following is true:</source>
          <target state="translated">When calling this method, you have to ensure that &lt;em&gt;either&lt;/em&gt; the pointer is NULL &lt;em&gt;or&lt;/em&gt; all of the following is true:</target>
        </trans-unit>
        <trans-unit id="5922155f29f105357a025f039108b9a7d5336187" translate="yes" xml:space="preserve">
          <source>When calling this method, you have to ensure that all of the following is true:</source>
          <target state="translated">このメソッドを呼び出す際には、以下のすべてが真であることを確認する必要があります。</target>
        </trans-unit>
        <trans-unit id="58559539ea94cb174e20c16d3a491d3f60daa52c" translate="yes" xml:space="preserve">
          <source>When calling this method, you have to ensure that if the pointer is non-NULL, then it is properly aligned, dereferencable (for the whole size of &lt;code&gt;T&lt;/code&gt;) and points to an initialized instance of &lt;code&gt;T&lt;/code&gt;. This applies even if the result of this method is unused! (The part about being initialized is not yet fully decided, but until it is the only safe approach is to ensure that they are indeed initialized.)</source>
          <target state="translated">このメソッドを呼び出すときは、ポインターがNULLでない場合、ポインターが正しく整列され、逆参照可能（ &lt;code&gt;T&lt;/code&gt; のサイズ全体に対して）であり、初期化された &lt;code&gt;T&lt;/code&gt; のインスタンスを指すようにする必要があります。これは、このメソッドの結果が未使用の場合でも適用されます。 （初期化に関する部分はまだ完全に決定されていませんが、それが唯一の安全なアプローチになるまでは、それらが実際に初期化されていることを確認することです。）</target>
        </trans-unit>
        <trans-unit id="154fd499f0df8e4395e27a0bd336a9bcab4964e5" translate="yes" xml:space="preserve">
          <source>When calling this method, you have to ensure that if the pointer is non-NULL, then it is properly aligned, dereferencable (for the whole size of &lt;code&gt;T&lt;/code&gt;) and points to an initialized instance of &lt;code&gt;T&lt;/code&gt;. This applies even if the result of this method is unused! (The part about being initialized is not yet fully decided, but until it is, the only safe approach is to ensure that they are indeed initialized.)</source>
          <target state="translated">このメソッドを呼び出すときは、ポインターがNULLでない場合、ポインターが正しく整列され、逆参照可能（ &lt;code&gt;T&lt;/code&gt; のサイズ全体に対して）であり、初期化された &lt;code&gt;T&lt;/code&gt; のインスタンスを指すようにする必要があります。これは、このメソッドの結果が未使用の場合でも適用されます。（初期化される部分はまだ完全には決定されていませんが、それが決定されるまで、唯一の安全なアプローチは、それらが実際に初期化されていることを確認することです。）</target>
        </trans-unit>
        <trans-unit id="b55e6ba28b9895615b66213ef2f73826e6f58739" translate="yes" xml:space="preserve">
          <source>When can my type be &lt;code&gt;Copy&lt;/code&gt;?</source>
          <target state="translated">タイプはいつ &lt;code&gt;Copy&lt;/code&gt; できますか？</target>
        </trans-unit>
        <trans-unit id="cee1d8053db523d0e331e35fb72c4806ed64bb77" translate="yes" xml:space="preserve">
          <source>When casting, keep in mind that only primitive types can be cast into each other. Example:</source>
          <target state="translated">キャストする際には、プリミティブ型だけがお互いにキャストできることを覚えておいてください。例</target>
        </trans-unit>
        <trans-unit id="d4a2dc7caf12d861d68e9e941b267ef0330f899f" translate="yes" xml:space="preserve">
          <source>When comparing pointers they are compared by their address, rather than by what they point to. When comparing pointers to &lt;a href=&quot;../dynamically-sized-types&quot;&gt;dynamically sized types&lt;/a&gt; they also have their addition data compared.</source>
          <target state="translated">ポインターを比較する場合、それらはポインターが指すものではなく、アドレスによって比較されます。&lt;a href=&quot;../dynamically-sized-types&quot;&gt;動的にサイズ設定された型&lt;/a&gt;へのポインターを比較するとき、それらは加算データも比較されます。</target>
        </trans-unit>
        <trans-unit id="f2f745dfedc8e3dcf7cd93386db2954df66d81dc" translate="yes" xml:space="preserve">
          <source>When comparing raw pointers they are compared by their address, rather than by what they point to. When comparing raw pointers to &lt;a href=&quot;../dynamically-sized-types&quot;&gt;dynamically sized types&lt;/a&gt; they also have their additional data compared.</source>
          <target state="translated">When comparing raw pointers they are compared by their address, rather than by what they point to. When comparing raw pointers to &lt;a href=&quot;../dynamically-sized-types&quot;&gt;dynamically sized types&lt;/a&gt; they also have their additional data compared.</target>
        </trans-unit>
        <trans-unit id="c1a443c0cb167970fd613da945b3f247baaf5ed2" translate="yes" xml:space="preserve">
          <source>When comparison is impossible:</source>
          <target state="translated">比較が不可能な場合。</target>
        </trans-unit>
        <trans-unit id="09f829ddc19ecb8dff523da8b6aa0bd5c5c69a9a" translate="yes" xml:space="preserve">
          <source>When coupled with a load, if the loaded value was written by a store operation with &lt;a href=&quot;enum.ordering#variant.Release&quot;&gt;&lt;code&gt;Release&lt;/code&gt;&lt;/a&gt; (or stronger) ordering, then all subsequent operations become ordered after that store. In particular, all subsequent loads will see data written before the store.</source>
          <target state="translated">When coupled with a load, if the loaded value was written by a store operation with &lt;a href=&quot;enum.ordering#variant.Release&quot;&gt; &lt;code&gt;Release&lt;/code&gt; &lt;/a&gt; (or stronger) ordering, then all subsequent operations become ordered after that store. In particular, all subsequent loads will see data written before the store.</target>
        </trans-unit>
        <trans-unit id="042e1556a905fd63df9a9011e6b9eaa088ecbd8b" translate="yes" xml:space="preserve">
          <source>When coupled with a load, if the loaded value was written by a store operation with &lt;a href=&quot;https://llvm.org/docs/Atomics.html#release&quot;&gt;&lt;code&gt;Release&lt;/code&gt;&lt;/a&gt; (or stronger) ordering, then all subsequent operations become ordered after that store. In particular, all subsequent loads will see data written before the store.</source>
          <target state="translated">ロードと組み合わせた場合、ロードされた値が&lt;a href=&quot;https://llvm.org/docs/Atomics.html#release&quot;&gt; &lt;code&gt;Release&lt;/code&gt; &lt;/a&gt;（またはより強い）順序のストアオペレーションによって書き込まれた場合、後続のすべてのオペレーションはそのストアの後にオーダーされます。特に、後続のすべてのロードでは、ストアの前に書き込まれたデータが表示されます。</target>
        </trans-unit>
        <trans-unit id="c91753b6ff7ee275cf69a5dce0e73e0bd2e33946" translate="yes" xml:space="preserve">
          <source>When coupled with a store, all previous operations become ordered before any load of this value with &lt;a href=&quot;enum.ordering#variant.Acquire&quot;&gt;&lt;code&gt;Acquire&lt;/code&gt;&lt;/a&gt; (or stronger) ordering. In particular, all previous writes become visible to all threads that perform an &lt;a href=&quot;enum.ordering#variant.Acquire&quot;&gt;&lt;code&gt;Acquire&lt;/code&gt;&lt;/a&gt; (or stronger) load of this value.</source>
          <target state="translated">When coupled with a store, all previous operations become ordered before any load of this value with &lt;a href=&quot;enum.ordering#variant.Acquire&quot;&gt; &lt;code&gt;Acquire&lt;/code&gt; &lt;/a&gt; (or stronger) ordering. In particular, all previous writes become visible to all threads that perform an &lt;a href=&quot;enum.ordering#variant.Acquire&quot;&gt; &lt;code&gt;Acquire&lt;/code&gt; &lt;/a&gt; (or stronger) load of this value.</target>
        </trans-unit>
        <trans-unit id="a96f1d52823f389b197a0d9cfba10684464e92e3" translate="yes" xml:space="preserve">
          <source>When coupled with a store, all previous operations become ordered before any load of this value with &lt;a href=&quot;https://llvm.org/docs/Atomics.html#acquire&quot;&gt;&lt;code&gt;Acquire&lt;/code&gt;&lt;/a&gt; (or stronger) ordering. In particular, all previous writes become visible to all threads that perform an &lt;a href=&quot;https://llvm.org/docs/Atomics.html#acquire&quot;&gt;&lt;code&gt;Acquire&lt;/code&gt;&lt;/a&gt; (or stronger) load of this value.</source>
          <target state="translated">ストアと組み合わせると、以前のすべての操作が、&lt;a href=&quot;https://llvm.org/docs/Atomics.html#acquire&quot;&gt; &lt;code&gt;Acquire&lt;/code&gt; &lt;/a&gt;（またはより強い）順序付けでこの値がロードされる前に順序付けされます。特に、以前のすべての書き込みは、この値の&lt;a href=&quot;https://llvm.org/docs/Atomics.html#acquire&quot;&gt; &lt;code&gt;Acquire&lt;/code&gt; &lt;/a&gt;（またはより強力な）ロードを実行するすべてのスレッドに表示されます。</target>
        </trans-unit>
        <trans-unit id="c5257416252adc45097a1b4beca1249797335afe" translate="yes" xml:space="preserve">
          <source>When created, cursors start at the front of the list, or the &quot;ghost&quot; non-element if the list is empty.</source>
          <target state="translated">作成された場合、カーソルはリストの先頭から始まり、リストが空の場合は &quot;ゴースト &quot;以外の要素から始まります。</target>
        </trans-unit>
        <trans-unit id="91d1a77fcc1e6a3499230bbe1efaa4ab2267c420" translate="yes" xml:space="preserve">
          <source>When creating immutable and mutable references, we use the &lt;code&gt;&amp;amp;&lt;/code&gt; and &lt;code&gt;&amp;amp;mut&lt;/code&gt; syntax, respectively. With &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt;, we use the &lt;code&gt;borrow&lt;/code&gt; and &lt;code&gt;borrow_mut&lt;/code&gt; methods, which are part of the safe API that belongs to &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt;. The &lt;code&gt;borrow&lt;/code&gt; method returns the smart pointer type &lt;code&gt;Ref&amp;lt;T&amp;gt;&lt;/code&gt;, and &lt;code&gt;borrow_mut&lt;/code&gt; returns the smart pointer type &lt;code&gt;RefMut&amp;lt;T&amp;gt;&lt;/code&gt;. Both types implement &lt;code&gt;Deref&lt;/code&gt;, so we can treat them like regular references.</source>
          <target state="translated">不変および可変の参照を作成するときは、それぞれ &lt;code&gt;&amp;amp;&lt;/code&gt; および &lt;code&gt;&amp;amp;mut&lt;/code&gt; 構文を使用します。 &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; 、我々は使用 &lt;code&gt;borrow&lt;/code&gt; と &lt;code&gt;borrow_mut&lt;/code&gt; に属している安全なAPIの一部である方法、 &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; 。 &lt;code&gt;borrow&lt;/code&gt; 方法は、スマートポインタ型返し &lt;code&gt;Ref&amp;lt;T&amp;gt;&lt;/code&gt; 、そして &lt;code&gt;borrow_mut&lt;/code&gt; 戻るスマートポインタ型 &lt;code&gt;RefMut&amp;lt;T&amp;gt;&lt;/code&gt; 。どちらのタイプも &lt;code&gt;Deref&lt;/code&gt; を実装しているため、通常の参照のように扱うことができます。</target>
        </trans-unit>
        <trans-unit id="d153302e6c43d39140a619c03bdcafd574d25849" translate="yes" xml:space="preserve">
          <source>When creating procedural macros, the definitions must reside in their own crate with a special crate type. This is for complex technical reasons that we hope to eliminate in the future. Using procedural macros looks like the code in Listing 19-29, where &lt;code&gt;some_attribute&lt;/code&gt; is a placeholder for using a specific macro.</source>
          <target state="translated">手続き型マクロを作成する場合、定義は特別なクレートタイプの独自のクレートに存在する必要があります。これは、複雑な技術上の理由から、将来的には排除したいと考えています。手続き型マクロの使用は、リスト19-29のコードのようになります &lt;code&gt;some_attribute&lt;/code&gt; は、特定のマクロを使用するためのプレースホルダーです。</target>
        </trans-unit>
        <trans-unit id="ba2b321ad5c05c7fd09164d2ee9abbba93ac268f" translate="yes" xml:space="preserve">
          <source>When defining a function that uses generics, we place the generics in the signature of the function where we would usually specify the data types of the parameters and return value. Doing so makes our code more flexible and provides more functionality to callers of our function while preventing code duplication.</source>
          <target state="translated">ジェネリックを使用する関数を定義する際には、通常はパラメータと戻り値のデータ型を指定するような関数のシグネチャにジェネリックを配置します。このようにすることで、コードがより柔軟になり、コードの重複を防ぎながら、関数の呼び出し元により多くの機能を提供することができます。</target>
        </trans-unit>
        <trans-unit id="649a6e7ed2c9379226547d6e7e75e552d9d288ba" translate="yes" xml:space="preserve">
          <source>When defining a recursive struct or enum, any use of the type being defined from inside the definition must occur behind a pointer (like &lt;code&gt;Box&lt;/code&gt; or &lt;code&gt;&amp;amp;&lt;/code&gt;). This is because structs and enums must have a well-defined size, and without the pointer, the size of the type would need to be unbounded.</source>
          <target state="translated">再帰的な構造体または列挙型を定義する場合、定義内から定義される型の使用は、ポインタ（ &lt;code&gt;Box&lt;/code&gt; や &lt;code&gt;&amp;amp;&lt;/code&gt; など）の背後で発生する必要があります。これは、構造体と列挙型には明確に定義されたサイズが必要であり、ポインタがない場合、型のサイズは無制限である必要があるためです。</target>
        </trans-unit>
        <trans-unit id="54e2930486f06054c79b2d368c2769ebefeaab63" translate="yes" xml:space="preserve">
          <source>When defining a recursive struct or enum, any use of the type being defined from inside the definition must occur behind a pointer (like &lt;code&gt;Box&lt;/code&gt;, &lt;code&gt;&amp;amp;&lt;/code&gt; or &lt;code&gt;Rc&lt;/code&gt;). This is because structs and enums must have a well-defined size, and without the pointer, the size of the type would need to be unbounded.</source>
          <target state="translated">When defining a recursive struct or enum, any use of the type being defined from inside the definition must occur behind a pointer (like &lt;code&gt;Box&lt;/code&gt; , &lt;code&gt;&amp;amp;&lt;/code&gt; or &lt;code&gt;Rc&lt;/code&gt; ). This is because structs and enums must have a well-defined size, and without the pointer, the size of the type would need to be unbounded.</target>
        </trans-unit>
        <trans-unit id="2c7f1bc79b8fb9a6a685b72bb3e271975e8e2732" translate="yes" xml:space="preserve">
          <source>When derived on structs, &lt;code&gt;PartialOrd&lt;/code&gt; compares two instances by comparing the value in each field in the order in which the fields appear in the struct definition. When derived on enums, variants of the enum declared earlier in the enum definition are considered less than the variants listed later.</source>
          <target state="translated">&lt;code&gt;PartialOrd&lt;/code&gt; は、構造体で派生した場合、構造体定義にフィールドが出現する順序で各フィールドの値を比較することにより、2つのインスタンスを比較します。enumから派生した場合、enum定義の早い段階で宣言されたenumのバリアントは、後でリストされているバリアントよりも少ないと見なされます。</target>
        </trans-unit>
        <trans-unit id="f282c8c6369ef0fd139eb8e2fef3f5aed8dab06e" translate="yes" xml:space="preserve">
          <source>When enabled, this socket is allowed to send packets to a broadcast address.</source>
          <target state="translated">有効にすると、このソケットはブロードキャストアドレスにパケットを送信することができます。</target>
        </trans-unit>
        <trans-unit id="761e5afed23cf69a708babbaebf38541084e7e71" translate="yes" xml:space="preserve">
          <source>When evaluating a block expression, each statement, except for item declaration statements, is executed sequentially. Then the final expression is executed, if given.</source>
          <target state="translated">ブロック式を評価する場合、項目宣言文を除いた各文は順次実行されます。そして、与えられた場合には最終的な式が実行されます。</target>
        </trans-unit>
        <trans-unit id="ee1fcd0e31ceced99f1f3ec881706ad2610edecf" translate="yes" xml:space="preserve">
          <source>When forwarding a matched fragment to another macro-by-example, matchers in the second macro will see an opaque AST of the fragment type. The second macro can't use literal tokens to match the fragments in the matcher, only a fragment specifier of the same type. The &lt;code&gt;ident&lt;/code&gt;, &lt;code&gt;lifetime&lt;/code&gt;, and &lt;code&gt;tt&lt;/code&gt; fragment types are an exception, and &lt;em&gt;can&lt;/em&gt; be matched by literal tokens. The following illustrates this restriction:</source>
          <target state="translated">たとえば、一致したフラグメントを別のマクロに転送する場合、2番目のマクロのマッチャーには、フラグメントタイプの不透明なASTが表示されます。2番目のマクロは、リテラルトークンを使用してマッチャー内のフラグメントを照合することはできず、同じタイプのフラグメント指定子のみを使用できます。 &lt;code&gt;ident&lt;/code&gt; 、 &lt;code&gt;lifetime&lt;/code&gt; 、および &lt;code&gt;tt&lt;/code&gt; 断片の種類は例外であり、そして&lt;em&gt;でき&lt;/em&gt;リテラルトークンにマッチします。この制限を次に示します。</target>
        </trans-unit>
        <trans-unit id="9aca28029ce8b3b95a609b5e4ca6542143135bed" translate="yes" xml:space="preserve">
          <source>When implementing a &lt;a href=&quot;../future/trait.future&quot;&gt;&lt;code&gt;Future&lt;/code&gt;&lt;/a&gt; combinator, you will usually need structural pinning for the nested futures, as you need to get pinned references to them to call &lt;a href=&quot;../future/trait.future#tymethod.poll&quot;&gt;&lt;code&gt;poll&lt;/code&gt;&lt;/a&gt;. But if your combinator contains any other data that does not need to be pinned, you can make those fields not structural and hence freely access them with a mutable reference even when you just have &lt;a href=&quot;struct.pin&quot;&gt;&lt;code&gt;Pin&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;&amp;amp;mut Self&amp;gt;&lt;/code&gt; (such as in your own &lt;a href=&quot;../future/trait.future#tymethod.poll&quot;&gt;&lt;code&gt;poll&lt;/code&gt;&lt;/a&gt; implementation).</source>
          <target state="translated">When implementing a &lt;a href=&quot;../future/trait.future&quot;&gt; &lt;code&gt;Future&lt;/code&gt; &lt;/a&gt; combinator, you will usually need structural pinning for the nested futures, as you need to get pinned references to them to call &lt;a href=&quot;../future/trait.future#tymethod.poll&quot;&gt; &lt;code&gt;poll&lt;/code&gt; &lt;/a&gt;. But if your combinator contains any other data that does not need to be pinned, you can make those fields not structural and hence freely access them with a mutable reference even when you just have &lt;a href=&quot;struct.pin&quot;&gt; &lt;code&gt;Pin&lt;/code&gt; &lt;/a&gt; &lt;code&gt;&amp;lt;&amp;amp;mut Self&amp;gt;&lt;/code&gt; (such as in your own &lt;a href=&quot;../future/trait.future#tymethod.poll&quot;&gt; &lt;code&gt;poll&lt;/code&gt; &lt;/a&gt; implementation).</target>
        </trans-unit>
        <trans-unit id="7c0607e7e68ca3e721e6db0ea6bb7b2aa2a0922c" translate="yes" xml:space="preserve">
          <source>When implementing a &lt;a href=&quot;../future/trait.future&quot;&gt;&lt;code&gt;Future&lt;/code&gt;&lt;/a&gt; combinator, you will usually need structural pinning for the nested futures, as you need to get pinned references to them to call &lt;code&gt;poll&lt;/code&gt;. But if your combinator contains any other data that does not need to be pinned, you can make those fields not structural and hence freely access them with a mutable reference even when you just have &lt;code&gt;Pin&amp;lt;&amp;amp;mut Self&amp;gt;&lt;/code&gt; (such as in your own &lt;code&gt;poll&lt;/code&gt; implementation).</source>
          <target state="translated">&lt;a href=&quot;../future/trait.future&quot;&gt; &lt;code&gt;Future&lt;/code&gt; &lt;/a&gt;コンビネータを実装するときは、 &lt;code&gt;poll&lt;/code&gt; を呼び出すためにそれらへの固定された参照を取得する必要があるため、通常、入れ子になったfutureの構造的な固定が必要になります。ただし、ピン留めする必要のない他のデータがコンビネータに含まれている場合は、それらのフィールドを構造化せずに、 &lt;code&gt;Pin&amp;lt;&amp;amp;mut Self&amp;gt;&lt;/code&gt; （独自の &lt;code&gt;poll&lt;/code&gt; 実装など）がある場合でも、可変参照で自由にアクセスできます）。</target>
        </trans-unit>
        <trans-unit id="3023d431ee0ca325e5e6237d2618e2a98462263f" translate="yes" xml:space="preserve">
          <source>When implementing a foreign trait for a foreign type, the trait must have one or more type parameters. A type local to your crate must appear before any use of any type parameters.</source>
          <target state="translated">外部の型に外部の形質を実装する場合、形質は 1 つ以上の型パラメータを持たなければなりません。型パラメータを使用する前に、クレートにローカルな型が表示されなければなりません。</target>
        </trans-unit>
        <trans-unit id="83728ab8db088c5c5e2bb91d0aa5ec68f4bff8ed" translate="yes" xml:space="preserve">
          <source>When implementing a format trait for your own type, you will have to implement a method of the signature:</source>
          <target state="translated">自身の型にフォーマットの形質を実装する場合は、署名のメソッドを実装する必要があります。</target>
        </trans-unit>
        <trans-unit id="f71a495d94aa8ee98863b069031787f4cf122fc5" translate="yes" xml:space="preserve">
          <source>When implementing an &lt;code&gt;ExactSizeIterator&lt;/code&gt;, you must also implement &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;. When doing so, the implementation of &lt;a href=&quot;trait.iterator#method.size_hint&quot;&gt;&lt;code&gt;Iterator::size_hint&lt;/code&gt;&lt;/a&gt;&lt;em&gt;must&lt;/em&gt; return the exact size of the iterator.</source>
          <target state="translated">When implementing an &lt;code&gt;ExactSizeIterator&lt;/code&gt; , you must also implement &lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt;. When doing so, the implementation of &lt;a href=&quot;trait.iterator#method.size_hint&quot;&gt; &lt;code&gt;Iterator::size_hint&lt;/code&gt; &lt;/a&gt;&lt;em&gt;must&lt;/em&gt; return the exact size of the iterator.</target>
        </trans-unit>
        <trans-unit id="3b12d14018112fa67f152d3bcca4ff8a3cd2e160" translate="yes" xml:space="preserve">
          <source>When implementing an &lt;code&gt;ExactSizeIterator&lt;/code&gt;, you must also implement &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;. When doing so, the implementation of &lt;a href=&quot;trait.iterator#method.size_hint&quot;&gt;&lt;code&gt;size_hint&lt;/code&gt;&lt;/a&gt;&lt;em&gt;must&lt;/em&gt; return the exact size of the iterator.</source>
          <target state="translated">&lt;code&gt;ExactSizeIterator&lt;/code&gt; を実装する場合は、&lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt;も実装する必要があります。その場合、&lt;a href=&quot;trait.iterator#method.size_hint&quot;&gt; &lt;code&gt;size_hint&lt;/code&gt; &lt;/a&gt;の実装はイテレータの正確なサイズを返す&lt;em&gt;必要&lt;/em&gt;があります。</target>
        </trans-unit>
        <trans-unit id="fc5662685206bca89b1530dcc1f9af41c4eb9eca" translate="yes" xml:space="preserve">
          <source>When implementing both &lt;code&gt;Hash&lt;/code&gt; and &lt;a href=&quot;../cmp/trait.eq&quot;&gt;&lt;code&gt;Eq&lt;/code&gt;&lt;/a&gt;, it is important that the following property holds:</source>
          <target state="translated">&lt;code&gt;Hash&lt;/code&gt; と&lt;a href=&quot;../cmp/trait.eq&quot;&gt; &lt;code&gt;Eq&lt;/code&gt; の&lt;/a&gt;両方を実装する場合、次のプロパティが保持されていることが重要です。</target>
        </trans-unit>
        <trans-unit id="d4e13d31485717c35b3ad17ef91b724897ba5adb" translate="yes" xml:space="preserve">
          <source>When implementing this trait for &lt;a href=&quot;string/struct.string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; we need to pick a type for &lt;a href=&quot;result/enum.result#variant.Err&quot;&gt;&lt;code&gt;Err&lt;/code&gt;&lt;/a&gt;. And since converting a string into a string will never result in an error, the appropriate type is &lt;code&gt;!&lt;/code&gt;. (Currently the type actually used is an enum with no variants, though this is only because &lt;code&gt;!&lt;/code&gt; was added to Rust at a later date and it may change in the future.) With an &lt;a href=&quot;result/enum.result#variant.Err&quot;&gt;&lt;code&gt;Err&lt;/code&gt;&lt;/a&gt; type of &lt;code&gt;!&lt;/code&gt;, if we have to call &lt;a href=&quot;str/trait.fromstr#tymethod.from_str&quot;&gt;&lt;code&gt;String::from_str&lt;/code&gt;&lt;/a&gt; for some reason the result will be a &lt;a href=&quot;result/enum.result&quot;&gt;&lt;code&gt;Result&amp;lt;String, !&amp;gt;&lt;/code&gt;&lt;/a&gt; which we can unpack like this:</source>
          <target state="translated">&lt;a href=&quot;string/struct.string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;にこの特性を実装する場合、&lt;a href=&quot;result/enum.result#variant.Err&quot;&gt; &lt;code&gt;Err&lt;/code&gt; の&lt;/a&gt;タイプを選択する必要があります。また、文字列を文字列に変換してもエラーにはならないため、適切なタイプは &lt;code&gt;!&lt;/code&gt; 。（現在実際に使用されているタイプはバリアントのない列挙型ですが、これは &lt;code&gt;!&lt;/code&gt; が後でRustに追加されたためであり、将来的に変更される可能性があります。）&lt;a href=&quot;result/enum.result#variant.Err&quot;&gt; &lt;code&gt;Err&lt;/code&gt; &lt;/a&gt;タイプ &lt;code&gt;!&lt;/code&gt; 、何らかの理由で&lt;a href=&quot;str/trait.fromstr#tymethod.from_str&quot;&gt; &lt;code&gt;String::from_str&lt;/code&gt; &lt;/a&gt;を呼び出す必要がある場合、結果は&lt;a href=&quot;result/enum.result&quot;&gt; &lt;code&gt;Result&amp;lt;String, !&amp;gt;&lt;/code&gt; &lt;/a&gt;ように展開できます。</target>
        </trans-unit>
        <trans-unit id="7aa4b7fd6580c50f7056a94460fc482fde8db6bd" translate="yes" xml:space="preserve">
          <source>When initializing a &lt;code&gt;Slice&lt;/code&gt; you simply provide the value &lt;code&gt;PhantomData&lt;/code&gt; for the field &lt;code&gt;phantom&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;Slice&lt;/code&gt; を初期化するときは、 &lt;code&gt;phantom&lt;/code&gt; フィールドに値 &lt;code&gt;PhantomData&lt;/code&gt; を指定するだけです。</target>
        </trans-unit>
        <trans-unit id="891072d4b25628183370abc4a215b4cbe1b78b5f" translate="yes" xml:space="preserve">
          <source>When initializing a data structure (struct, enum, union) with named (but not numbered) fields, it is allowed to write &lt;code&gt;fieldname&lt;/code&gt; as a shorthand for &lt;code&gt;fieldname: fieldname&lt;/code&gt;. This allows a compact syntax with less duplication. For example:</source>
          <target state="translated">名前の（しかし、番号なし）フィールドを持つデータ構造体（構造体、列挙型、労働組合）を初期化する場合は、書き込みを許可されている &lt;code&gt;fieldname&lt;/code&gt; の省略形として &lt;code&gt;fieldname: fieldname&lt;/code&gt; 。これにより、重複の少ないコンパクトな構文が可能になります。例えば：</target>
        </trans-unit>
        <trans-unit id="8ecea1e59f3ed90e0cce7be9457c55eec0b2f8dd" translate="yes" xml:space="preserve">
          <source>When invoking closures or other implementations of the function traits &lt;code&gt;Fn&lt;/code&gt;, &lt;code&gt;FnMut&lt;/code&gt; or &lt;code&gt;FnOnce&lt;/code&gt; using call notation, the number of parameters passed to the function must match its definition.</source>
          <target state="translated">関数のクロージャーまたは他の実装を呼び出すとき、呼び出し表記を使用して &lt;code&gt;Fn&lt;/code&gt; 、 &lt;code&gt;FnMut&lt;/code&gt; または &lt;code&gt;FnOnce&lt;/code&gt; をトレイトする場合、関数に渡されるパラメーターの数はその定義と一致する必要があります。</target>
        </trans-unit>
        <trans-unit id="ccc9f327284b4385f76159eac1f35c501745b8a3" translate="yes" xml:space="preserve">
          <source>When looking for the implementation for the trait, the compiler finds both the &lt;code&gt;impl&amp;lt;T&amp;gt; MyTrait for T&lt;/code&gt; where T is all types and the &lt;code&gt;impl MyTrait for Foo&lt;/code&gt;. Since a trait cannot be implemented multiple times, this is an error. So, when you write:</source>
          <target state="translated">トレイトの実装を探すとき、コンパイラーは &lt;code&gt;impl&amp;lt;T&amp;gt; MyTrait for T&lt;/code&gt; のimpl &amp;lt;T&amp;gt; MyTrait（ Tはすべての型）と &lt;code&gt;impl MyTrait for Foo&lt;/code&gt; ます。特性は複数回実装できないため、これはエラーです。だから、あなたが書くとき：</target>
        </trans-unit>
        <trans-unit id="696c7265bd3688072f55c2cbcd990beecd847885" translate="yes" xml:space="preserve">
          <source>When looking up a method call, the receiver may be automatically dereferenced or borrowed in order to call a method. This requires a more complex lookup process than for other functions, since there may be a number of possible methods to call. The following procedure is used:</source>
          <target state="translated">メソッドの呼び出しを検索する際に、メソッドを呼び出すために受信機が自動的に派生したり、借用されたりすることがあります。これは、呼び出す可能性のあるメソッドが多数存在する可能性があるため、他の関数の場合よりも複雑なルックアップ処理が必要となります。以下のような手順で行います。</target>
        </trans-unit>
        <trans-unit id="9b2a422583a7efee3ed72f17d4f2851e1858e60e" translate="yes" xml:space="preserve">
          <source>When matching against a range, the compiler verifies that the range is non-empty. Range patterns include both end-points, so this is equivalent to requiring the start of the range to be less than or equal to the end of the range.</source>
          <target state="translated">範囲に対してマッチングするとき、コンパイラは範囲が空でないことを確認します。範囲パターンには両方のエンドポイントが含まれるため、これは範囲の開始点が範囲の終了点以下であることを要求するのと同じです。</target>
        </trans-unit>
        <trans-unit id="b9653a3e395619856456d73e03e247c655234f5c" translate="yes" xml:space="preserve">
          <source>When matching against an exclusive range, the compiler verifies that the range is non-empty. Exclusive range patterns include the start point but not the end point, so this is equivalent to requiring the start of the range to be less than the end of the range.</source>
          <target state="translated">排他的な範囲とマッチングするとき、コンパイラはその範囲が空でないことを確認します。排他的な範囲パターンには開始点は含まれますが、終了点は含まれないため、これは範囲の開始点が範囲の終了点よりも小さいことを要求するのと同じです。</target>
        </trans-unit>
        <trans-unit id="b0e0c88f0138777df9f95477c6fa805a498782e3" translate="yes" xml:space="preserve">
          <source>When matching on a variable it cannot be mutated in the match guards, as this could cause the match to be non-exhaustive.</source>
          <target state="translated">変数にマッチする際には、マッチガードの中で変異させることはできません。</target>
        </trans-unit>
        <trans-unit id="8087590aa98711c0675fa786398706bd350ddbdc" translate="yes" xml:space="preserve">
          <source>When matching on a variable it cannot be mutated in the match guards, as this could cause the match to be non-exhaustive:</source>
          <target state="translated">変数にマッチする際には、マッチガードの中で変異させることはできません。</target>
        </trans-unit>
        <trans-unit id="c917207922c15bc47219fc846ecafbebb3833877" translate="yes" xml:space="preserve">
          <source>When naming Rust crates, hyphens are disallowed. However, Cargo packages may make use of them. In such case, when &lt;code&gt;Cargo.toml&lt;/code&gt; doesn't specify a crate name, Cargo will transparently replace &lt;code&gt;-&lt;/code&gt; with &lt;code&gt;_&lt;/code&gt; (Refer to &lt;a href=&quot;https://github.com/rust-lang/rfcs/blob/master/text/0940-hyphens-considered-harmful.md&quot;&gt;RFC 940&lt;/a&gt; for more details).</source>
          <target state="translated">Rustクレートに名前を付ける場合、ハイフンは使用できません。ただし、Cargoパッケージはそれらを使用する場合があります。そのような場合、 &lt;code&gt;Cargo.toml&lt;/code&gt; がクレート名を指定しないと、Cargoは &lt;code&gt;-&lt;/code&gt; を &lt;code&gt;_&lt;/code&gt; に透過的に置き換え&lt;a href=&quot;https://github.com/rust-lang/rfcs/blob/master/text/0940-hyphens-considered-harmful.md&quot;&gt;ます&lt;/a&gt;（詳細については、RFC 940を参照してください）。</target>
        </trans-unit>
        <trans-unit id="4b84b0246e3a22cc957323594b187a4ee8d486c1" translate="yes" xml:space="preserve">
          <source>When only a single thread is involved, the results are as expected: the line &lt;code&gt;7 4 4&lt;/code&gt; gets printed.</source>
          <target state="translated">単一のスレッドのみが関係する場合、結果は期待どおりです。74 &lt;code&gt;7 4 4&lt;/code&gt; 行が出力されます。</target>
        </trans-unit>
        <trans-unit id="631b2d61cf855b93c1989c5cb6e1c8291602cdf2" translate="yes" xml:space="preserve">
          <source>When operating in a console, the Windows implementation of this stream does not support non-UTF-8 byte sequences. Attempting to read bytes that are not valid UTF-8 will return an error.</source>
          <target state="translated">コンソールで操作する場合、このストリームのWindows実装はUTF-8以外のバイト列をサポートしていません。有効な UTF-8 でないバイトを読み取ろうとすると、エラーが返されます。</target>
        </trans-unit>
        <trans-unit id="dbaed3bc410762aacbeb0a4e72c167df5ec7b452" translate="yes" xml:space="preserve">
          <source>When operating in a console, the Windows implementation of this stream does not support non-UTF-8 byte sequences. Attempting to write bytes that are not valid UTF-8 will return an error.</source>
          <target state="translated">コンソールで操作する場合、このストリームのWindows実装はUTF-8以外のバイト列をサポートしていません。有効な UTF-8 でないバイトを書こうとすると、エラーが返されます。</target>
        </trans-unit>
        <trans-unit id="6a8905858177aefd0e233b7b17c0d7132a07f2ef" translate="yes" xml:space="preserve">
          <source>When parsing the path, there is a small amount of normalization:</source>
          <target state="translated">パスを解析する際に、正規化が少しあります。</target>
        </trans-unit>
        <trans-unit id="de65f313906013336610f9ce397839cdfeef65dc" translate="yes" xml:space="preserve">
          <source>When pattern matching on a non-exhaustive &lt;a href=&quot;../items/enumerations&quot;&gt;&lt;code&gt;enum&lt;/code&gt;&lt;/a&gt;, matching on a variant does not contribute towards the exhaustiveness of the arms.</source>
          <target state="translated">非網羅的な&lt;a href=&quot;../items/enumerations&quot;&gt; &lt;code&gt;enum&lt;/code&gt; &lt;/a&gt;型でのパターンマッチングの場合、バリアントでのマッチングはアームの網羅性に寄与しません。</target>
        </trans-unit>
        <trans-unit id="dc9f5f5346d0d53afbe7e6c96b99054e854e83d4" translate="yes" xml:space="preserve">
          <source>When pattern matching on a non-exhaustive variant (&lt;a href=&quot;../items/structs&quot;&gt;&lt;code&gt;struct&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../items/enumerations&quot;&gt;&lt;code&gt;enum&lt;/code&gt; variant&lt;/a&gt;), a &lt;a href=&quot;../patterns#struct-patterns&quot;&gt;&lt;em&gt;StructPattern&lt;/em&gt;&lt;/a&gt; must be used which must include a &lt;code&gt;..&lt;/code&gt;. Tuple variant constructor visibility is lowered to &lt;code&gt;min($vis, pub(crate))&lt;/code&gt;.</source>
          <target state="translated">非網羅的なバリアント（&lt;a href=&quot;../items/structs&quot;&gt; &lt;code&gt;struct&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;../items/enumerations&quot;&gt; &lt;code&gt;enum&lt;/code&gt; 型バリアント&lt;/a&gt;）でパターンマッチングを行う場合は、&lt;a href=&quot;../patterns#struct-patterns&quot;&gt;&lt;em&gt;StructPatternを&lt;/em&gt;&lt;/a&gt;使用する必要があり &lt;code&gt;..&lt;/code&gt; 。これには...が含まれている必要があります。タプルバリアントコンストラクターの可視性は &lt;code&gt;min($vis, pub(crate))&lt;/code&gt; 下げられます。</target>
        </trans-unit>
        <trans-unit id="3822f9e7b18bc62d671d8d3984cc7775a10aa571" translate="yes" xml:space="preserve">
          <source>When re-exporting a private item, it can be thought of as allowing the &quot;privacy chain&quot; being short-circuited through the reexport instead of passing through the namespace hierarchy as it normally would.</source>
          <target state="translated">プライベートなアイテムを再輸出する場合、通常のように名前空間階層を通過するのではなく、再輸出によって「プライバシーの連鎖」が短絡されることを許容していると考えることができます。</target>
        </trans-unit>
        <trans-unit id="9af3e2801218bbefe9fcf6ba2cdb6292e76c830f" translate="yes" xml:space="preserve">
          <source>When referred to, a &lt;em&gt;function&lt;/em&gt; yields a first-class &lt;em&gt;value&lt;/em&gt; of the corresponding zero-sized &lt;a href=&quot;../types/function-item&quot;&gt;&lt;em&gt;function item type&lt;/em&gt;&lt;/a&gt;, which when called evaluates to a direct call to the function.</source>
          <target state="translated">&lt;em&gt;関数&lt;/em&gt;が参照されると、対応するゼロサイズの&lt;a href=&quot;../types/function-item&quot;&gt;&lt;em&gt;関数アイテムタイプの&lt;/em&gt;&lt;/a&gt;ファーストクラスの&lt;em&gt;値&lt;/em&gt;が生成されます。これは、呼び出されると、関数への直接呼び出しとして評価されます。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="1683091416dacec74442beb6b8e2ae04cddfafa2" translate="yes" xml:space="preserve">
          <source>When referred to, a function item, or the constructor of a tuple-like struct or enum variant, yields a zero-sized value of its &lt;em&gt;function item type&lt;/em&gt;. That type explicitly identifies the function - its name, its type arguments, and its early-bound lifetime arguments (but not its late-bound lifetime arguments, which are only assigned when the function is called) - so the value does not need to contain an actual function pointer, and no indirection is needed when the function is called.</source>
          <target state="translated">関数アイテム、またはタプルのような構造体または列挙型バリアントのコンストラクターが参照されると、その&lt;em&gt;関数アイテムタイプの&lt;/em&gt;サイズがゼロの値が生成されます。その型は関数を明示的に識別します-その名前、その型引数、およびそのアーリーバインドライフタイム引数（ただし、そのレイトバインドライフタイム引数は、関数が呼び出されたときにのみ割り当てられます）-したがって、値に実際の関数ポインタ。関数が呼び出されたときに間接参照は必要ありません。</target>
        </trans-unit>
        <trans-unit id="242796f19057c3b62462e9cba8dd8c2590aadff7" translate="yes" xml:space="preserve">
          <source>When repetitions are involved, then the rules apply to every possible number of expansions, taking separators into account. This means:</source>
          <target state="translated">繰り返しが含まれている場合は、分離器を考慮に入れて、可能な限りの数の拡張にルールが適用されます。これは意味します。</target>
        </trans-unit>
        <trans-unit id="c3d84541bce134cd9e4b390eb66c9f391f2b9c11" translate="yes" xml:space="preserve">
          <source>When requesting that an argument be formatted with a particular type, you are actually requesting that an argument ascribes to a particular trait. This allows multiple actual types to be formatted via &lt;code&gt;{:x}&lt;/code&gt; (like &lt;a href=&quot;../primitive.i8&quot;&gt;&lt;code&gt;i8&lt;/code&gt;&lt;/a&gt; as well as &lt;a href=&quot;../primitive.isize&quot;&gt;&lt;code&gt;isize&lt;/code&gt;&lt;/a&gt;). The current mapping of types to traits is:</source>
          <target state="translated">引数を特定のタイプでフォーマットするように要求する場合、実際には、引数が特定の特性に起因することを要求しています。これにより、複数の実際の型を &lt;code&gt;{:x}&lt;/code&gt; を介してフォーマットできます（&lt;a href=&quot;../primitive.i8&quot;&gt; &lt;code&gt;i8&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;../primitive.isize&quot;&gt; &lt;code&gt;isize&lt;/code&gt; など&lt;/a&gt;）。タイプとトレイトの現在のマッピングは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="172f2234ac85fe1a3605f2a91c946d179cec1a7e" translate="yes" xml:space="preserve">
          <source>When return value overflows (i.e., &lt;code&gt;self &amp;gt; (1 &amp;lt;&amp;lt; (N-1))&lt;/code&gt; for type &lt;code&gt;uN&lt;/code&gt;), it panics in debug mode and return value is wrapped to 0 in release mode (the only situation in which method can return 0).</source>
          <target state="translated">戻り値がオーバーフローすると（つまり、 &lt;code&gt;uN&lt;/code&gt; 型の &lt;code&gt;self &amp;gt; (1 &amp;lt;&amp;lt; (N-1))&lt;/code&gt; ）、デバッグモードでパニックになり、リリースモードで戻り値が0にラップされます（メソッドが0を返すことができる唯一の状況）。 。</target>
        </trans-unit>
        <trans-unit id="edd8cc343e5de387a9b54e7b83ae697de445cc0a" translate="yes" xml:space="preserve">
          <source>When return value overflows (i.e., &lt;code&gt;self &amp;gt; (1 &amp;lt;&amp;lt; (N-1))&lt;/code&gt; for type &lt;code&gt;uN&lt;/code&gt;), overflows to &lt;code&gt;2^N = 0&lt;/code&gt;.</source>
          <target state="translated">戻り値がオーバーフローする場合（つまり、 &lt;code&gt;uN&lt;/code&gt; 型の &lt;code&gt;self &amp;gt; (1 &amp;lt;&amp;lt; (N-1))&lt;/code&gt; ）、オーバーフローして &lt;code&gt;2^N = 0&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="ba5cb533c56f4e80ee649a64f4f48b9916ee9878" translate="yes" xml:space="preserve">
          <source>When returning a reference from a function, the lifetime parameter for the return type needs to match the lifetime parameter for one of the parameters. If the reference returned does &lt;em&gt;not&lt;/em&gt; refer to one of the parameters, it must refer to a value created within this function, which would be a dangling reference because the value will go out of scope at the end of the function. Consider this attempted implementation of the &lt;code&gt;longest&lt;/code&gt; function that won&amp;rsquo;t compile:</source>
          <target state="translated">関数から参照を返す場合、戻り値の型の有効期間パラメーターは、いずれかのパラメーターの有効期間パラメーターと一致する必要があります。返された参照がパラメーターの1つを参照してい&lt;em&gt;ない&lt;/em&gt;場合、この関数内で作成された値を参照する必要があります。これは、値が関数の最後でスコープ外になるため、ぶら下がり参照になります。コンパイルされない &lt;code&gt;longest&lt;/code&gt; 関数のこの試みられた実装を考えてみましょう：</target>
        </trans-unit>
        <trans-unit id="9ba5a0cad76ddab0bb154107936aabf9c3bbc80c" translate="yes" xml:space="preserve">
          <source>When running the code in Listing 16-10, you should see the following output with a 1-second pause in between each line:</source>
          <target state="translated">リスト16-10のコードを実行するとき、それぞれの行の間に1秒の一時停止がある次のような出力が表示されます。</target>
        </trans-unit>
        <trans-unit id="6b236fc247e64f3c8aa065d156b22dcb57f154a9" translate="yes" xml:space="preserve">
          <source>When searching for a value in the map, however, having to provide a reference to a &lt;code&gt;K&lt;/code&gt; as the key to search for would require to always create such an owned value. For string keys, this would mean a &lt;code&gt;String&lt;/code&gt; value needs to be created just for the search for cases where only a &lt;code&gt;str&lt;/code&gt; is available.</source>
          <target state="translated">ただし、マップで値を検索する場合、検索するキーとして &lt;code&gt;K&lt;/code&gt; への参照を提供する必要があるため、常にこのような所有値を作成する必要があります。文字列キーの場合、これは &lt;code&gt;str&lt;/code&gt; しか使用できない場合の検索のためだけに &lt;code&gt;String&lt;/code&gt; 値を作成する必要があることを意味します。</target>
        </trans-unit>
        <trans-unit id="b091e7c5109a4bd476e6a41500e0c7dae79d2e20" translate="yes" xml:space="preserve">
          <source>When should &lt;code&gt;UnwindSafe&lt;/code&gt; be used?</source>
          <target state="translated">&lt;code&gt;UnwindSafe&lt;/code&gt; はいつ使用する必要がありますか？</target>
        </trans-unit>
        <trans-unit id="e948e1fccd691ef6c810406fc6cc8816126b310a" translate="yes" xml:space="preserve">
          <source>When starting from a slice rather than an array, fallible conversion APIs can be used:</source>
          <target state="translated">配列ではなくスライスから開始する場合、フォールシブル変換APIを使用することができます。</target>
        </trans-unit>
        <trans-unit id="9972ed917e94de2af5e7cf0dfc874ef3575cd482" translate="yes" xml:space="preserve">
          <source>When such a string in &lt;code&gt;monospace&lt;/code&gt; font occurs inside the grammar, it is an implicit reference to a single member of such a string table production. See &lt;a href=&quot;tokens&quot;&gt;tokens&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;code&gt;monospace&lt;/code&gt; フォントのこのような文字列が文法の内部にある場合、それはそのような文字列テーブル生成の単一のメンバーへの暗黙的な参照です。詳細については、&lt;a href=&quot;tokens&quot;&gt;トークン&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="a52c1f9d28a81019545579685f71cebe8cd39993" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;BufReader&amp;lt;R&amp;gt;&lt;/code&gt; is dropped, the contents of its buffer will be discarded. Creating multiple instances of a &lt;code&gt;BufReader&amp;lt;R&amp;gt;&lt;/code&gt; on the same stream can cause data loss. Reading from the underlying reader after unwrapping the &lt;code&gt;BufReader&amp;lt;R&amp;gt;&lt;/code&gt; with &lt;a href=&quot;struct.bufreader#method.into_inner&quot;&gt;&lt;code&gt;BufReader::into_inner&lt;/code&gt;&lt;/a&gt; can also cause data loss.</source>
          <target state="translated">When the &lt;code&gt;BufReader&amp;lt;R&amp;gt;&lt;/code&gt; is dropped, the contents of its buffer will be discarded. Creating multiple instances of a &lt;code&gt;BufReader&amp;lt;R&amp;gt;&lt;/code&gt; on the same stream can cause data loss. Reading from the underlying reader after unwrapping the &lt;code&gt;BufReader&amp;lt;R&amp;gt;&lt;/code&gt; with &lt;a href=&quot;struct.bufreader#method.into_inner&quot;&gt; &lt;code&gt;BufReader::into_inner&lt;/code&gt; &lt;/a&gt; can also cause data loss.</target>
        </trans-unit>
        <trans-unit id="954b4d58192a34fc7c83e90ef17c03453e2596e2" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;BufReader&lt;/code&gt; is dropped, the contents of its buffer will be discarded. Creating multiple instances of a &lt;code&gt;BufReader&lt;/code&gt; on the same stream can cause data loss.</source>
          <target state="translated">とき &lt;code&gt;BufReader&lt;/code&gt; がドロップされ、そのバッファの内容は破棄されます。同じストリーム上に &lt;code&gt;BufReader&lt;/code&gt; の複数のインスタンスを作成すると、データが失われる可能性があります。</target>
        </trans-unit>
        <trans-unit id="f6535869e34b4050ebcca71930a99c22bd0cf5ef" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;BufWriter&lt;/code&gt; is dropped, the contents of its buffer will be written out. However, any errors that happen in the process of flushing the buffer when the writer is dropped will be ignored. Code that wishes to handle such errors must manually call &lt;a href=&quot;#method.flush&quot;&gt;&lt;code&gt;flush&lt;/code&gt;&lt;/a&gt; before the writer is dropped.</source>
          <target state="translated">とき &lt;code&gt;BufWriter&lt;/code&gt; がドロップされ、そのバッファの内容が書き出されます。ただし、ライターがドロップされたときにバッファーをフラッシュするプロセスで発生したエラーは無視されます。このようなエラーを処理したいコードは、ライターがドロップされる前に手動で&lt;a href=&quot;#method.flush&quot;&gt; &lt;code&gt;flush&lt;/code&gt; &lt;/a&gt;を呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="04aee49349dde3129af240e6a8534c1c64ddefad" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;Deref&lt;/code&gt; trait is defined for the types involved, Rust will analyze the types and use &lt;code&gt;Deref::deref&lt;/code&gt; as many times as necessary to get a reference to match the parameter&amp;rsquo;s type. The number of times that &lt;code&gt;Deref::deref&lt;/code&gt; needs to be inserted is resolved at compile time, so there is no runtime penalty for taking advantage of deref coercion!</source>
          <target state="translated">関連する型に対して &lt;code&gt;Deref&lt;/code&gt; トレイトが定義されている場合、Rustは型を分析し、必要な回数だけ &lt;code&gt;Deref::deref&lt;/code&gt; を使用して、パラメーターの型と一致する参照を取得します。 &lt;code&gt;Deref::deref&lt;/code&gt; を挿入する必要がある回数はコンパイル時に解決されるため、deref強制を利用しても実行時のペナルティはありません。</target>
        </trans-unit>
        <trans-unit id="31fb02d0ce651e092ef0bf35613e23e7b377e4aa" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;get&lt;/code&gt; method is passed an index that is outside the vector, it returns &lt;code&gt;None&lt;/code&gt; without panicking. You would use this method if accessing an element beyond the range of the vector happens occasionally under normal circumstances. Your code will then have logic to handle having either &lt;code&gt;Some(&amp;amp;element)&lt;/code&gt; or &lt;code&gt;None&lt;/code&gt;, as discussed in Chapter 6. For example, the index could be coming from a person entering a number. If they accidentally enter a number that&amp;rsquo;s too large and the program gets a &lt;code&gt;None&lt;/code&gt; value, you could tell the user how many items are in the current vector and give them another chance to enter a valid value. That would be more user-friendly than crashing the program due to a typo!</source>
          <target state="translated">とき &lt;code&gt;get&lt;/code&gt; メソッドは、ベクトルの外にあるインデックスが渡され、それは返さない &lt;code&gt;None&lt;/code&gt; を慌てずに。ベクトルの範囲を超えた要素へのアクセスが通常の状況で時々発生する場合は、このメソッドを使用します。コードには、第6章で説明したように、 &lt;code&gt;Some(&amp;amp;element)&lt;/code&gt; または &lt;code&gt;None&lt;/code&gt; のいずれかを処理するロジックが含まれます。たとえば、インデックスは、数値を入力する人からのものである可能性があります。大きすぎる数値を誤って入力してプログラムが &lt;code&gt;None&lt;/code&gt; 値を取得した場合、現在のベクトルにあるアイテムの数をユーザーに通知し、有効な値を入力する機会をもう一度与えることができます。これは、タイプミスが原因でプログラムをクラッシュさせるよりもユーザーフレンドリーです。</target>
        </trans-unit>
        <trans-unit id="f59c09946d769635e38aad7d10ee44a827a7f14d" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;match&lt;/code&gt; expression executes, it compares the resulting value against the pattern of each arm, in order. If a pattern matches the value, the code associated with that pattern is executed. If that pattern doesn&amp;rsquo;t match the value, execution continues to the next arm, much as in a coin-sorting machine. We can have as many arms as we need: in Listing 6-3, our &lt;code&gt;match&lt;/code&gt; has four arms.</source>
          <target state="translated">場合 &lt;code&gt;match&lt;/code&gt; 発現実行ためには、各アームのパターンに対して得られた値とを比較します。パターンが値と一致する場合、そのパターンに関連付けられたコードが実行されます。そのパターンが値と一致しない場合、コイン選別機と同様に、実行は次のアームに続きます。必要な数の武器を用意できます。リスト6-3では、 &lt;code&gt;match&lt;/code&gt; に4つの武器があります。</target>
        </trans-unit>
        <trans-unit id="35dd3cadb8620e015a10c1b7eff5115846f46fce" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;match&lt;/code&gt; expression is done, its scope ends, and so does the scope of the inner &lt;code&gt;y&lt;/code&gt;. The last &lt;code&gt;println!&lt;/code&gt; produces &lt;code&gt;at the end: x = Some(5), y = 10&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;match&lt;/code&gt; 表現は、その範囲の両端を行われ、そのため内側の範囲行い &lt;code&gt;y&lt;/code&gt; は。最後の &lt;code&gt;println!&lt;/code&gt; &lt;code&gt;at the end: x = Some(5), y = 10&lt;/code&gt; 生成されます：x = Some（5）、y = 10。</target>
        </trans-unit>
        <trans-unit id="68d6c3c2b2d97df1f5ec2a0c2cfb150473278b62" translate="yes" xml:space="preserve">
          <source>When the associated function is declared on a trait, the function can also be called with a &lt;a href=&quot;../paths&quot;&gt;path&lt;/a&gt; that is a path to the trait appended by the name of the trait. When this happens, it is substituted for &lt;code&gt;&amp;lt;_ as Trait&amp;gt;::function_name&lt;/code&gt;.</source>
          <target state="translated">関連する関数がトレイトで宣言されている場合、トレイト&lt;a href=&quot;../paths&quot;&gt;へのパス&lt;/a&gt;であるパスをトレイトの名前に追加して、関数を呼び出すこともできます。これが発生すると、 &lt;code&gt;&amp;lt;_ as Trait&amp;gt;::function_name&lt;/code&gt; 置き換えられます。</target>
        </trans-unit>
        <trans-unit id="bd35bbcd5c352ce9d75d44366396e7a4adb6ff6a" translate="yes" xml:space="preserve">
          <source>When the calling code needs the result of evaluating the closure, instead of calling the closure directly, it will call the &lt;code&gt;value&lt;/code&gt; method. This method checks whether we already have a resulting value in &lt;code&gt;self.value&lt;/code&gt; in a &lt;code&gt;Some&lt;/code&gt;; if we do, it returns the value within the &lt;code&gt;Some&lt;/code&gt; without executing the closure again.</source>
          <target state="translated">呼び出し元のコードでクロージャを評価した結果が必要な場合は、クロージャを直接呼び出すのではなく、 &lt;code&gt;value&lt;/code&gt; メソッドを呼び出します。このメソッドは、 &lt;code&gt;Some&lt;/code&gt; の &lt;code&gt;self.value&lt;/code&gt; に結果の値がすでにあるかどうかを確認します。その場合、クロージャーを再度実行することなく、 &lt;code&gt;Some&lt;/code&gt; 内の値を返します。</target>
        </trans-unit>
        <trans-unit id="b1a7e675e1dcb1e2ab13e918ca4b37b70a8d5bf1" translate="yes" xml:space="preserve">
          <source>When the command line parsing logic starts getting complicated, extract it from &lt;em&gt;main.rs&lt;/em&gt; and move it to &lt;em&gt;lib.rs&lt;/em&gt;.</source>
          <target state="translated">コマンドライン解析ロジックが複雑になり始めたら、それを&lt;em&gt;main.rs&lt;/em&gt;から抽出して&lt;em&gt;lib.rs&lt;/em&gt;に移動し&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="3f005b1e8a05e081cd9cbf74c1d92789005c2778" translate="yes" xml:space="preserve">
          <source>When the configuration predicate is true, this attribute expands out to the attributes listed after the predicate. For example, the following module will either be found at &lt;code&gt;linux.rs&lt;/code&gt; or &lt;code&gt;windows.rs&lt;/code&gt; based on the target.</source>
          <target state="translated">構成述部がtrueの場合、この属性は、述部の後にリストされている属性に展開されます。たとえば、次のモジュールは、ターゲットに基づいて &lt;code&gt;linux.rs&lt;/code&gt; または &lt;code&gt;windows.rs&lt;/code&gt; にあります。</target>
        </trans-unit>
        <trans-unit id="b2cac43891907079676afac07f98ef2691d9a0f5" translate="yes" xml:space="preserve">
          <source>When the draft is done, a review of the post is requested.</source>
          <target state="translated">下書きが終わったら、ポストの見直しを依頼します。</target>
        </trans-unit>
        <trans-unit id="81c2e18caa886f869f8ca82f7d008cc861e8f29d" translate="yes" xml:space="preserve">
          <source>When the empty string is used as a separator, it separates every character in the string, along with the beginning and end of the string.</source>
          <target state="translated">空の文字列を区切り文字として使用すると、文字列の先頭と末尾とともに、文字列内のすべての文字を区切ります。</target>
        </trans-unit>
        <trans-unit id="8391463b3513744ada63d41c0e15df2b575fc578" translate="yes" xml:space="preserve">
          <source>When the goal is simply to read from (or write to) the source, the most reliable way to test the source can be read (or written to) is to open it. Only using &lt;code&gt;is_file&lt;/code&gt; can break workflows like &lt;code&gt;diff &amp;lt;( prog_a )&lt;/code&gt; on a Unix-like system for example. See &lt;a href=&quot;../fs/struct.file#method.open&quot;&gt;&lt;code&gt;fs::File::open&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../fs/struct.openoptions#method.open&quot;&gt;&lt;code&gt;fs::OpenOptions::open&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">When the goal is simply to read from (or write to) the source, the most reliable way to test the source can be read (or written to) is to open it. Only using &lt;code&gt;is_file&lt;/code&gt; can break workflows like &lt;code&gt;diff &amp;lt;( prog_a )&lt;/code&gt; on a Unix-like system for example. See &lt;a href=&quot;../fs/struct.file#method.open&quot;&gt; &lt;code&gt;fs::File::open&lt;/code&gt; &lt;/a&gt; or &lt;a href=&quot;../fs/struct.openoptions#method.open&quot;&gt; &lt;code&gt;fs::OpenOptions::open&lt;/code&gt; &lt;/a&gt; for more information.</target>
        </trans-unit>
        <trans-unit id="a8b88e35933dd499afe9dc518b98a0ae7b4608c2" translate="yes" xml:space="preserve">
          <source>When the goal is simply to read from (or write to) the source, the most reliable way to test the source can be read (or written to) is to open it. Only using &lt;code&gt;is_file&lt;/code&gt; can break workflows like &lt;code&gt;diff &amp;lt;( prog_a )&lt;/code&gt; on a Unix-like system for example. See &lt;a href=&quot;struct.file#method.open&quot;&gt;&lt;code&gt;File::open&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;struct.openoptions#method.open&quot;&gt;&lt;code&gt;OpenOptions::open&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">When the goal is simply to read from (or write to) the source, the most reliable way to test the source can be read (or written to) is to open it. Only using &lt;code&gt;is_file&lt;/code&gt; can break workflows like &lt;code&gt;diff &amp;lt;( prog_a )&lt;/code&gt; on a Unix-like system for example. See &lt;a href=&quot;struct.file#method.open&quot;&gt; &lt;code&gt;File::open&lt;/code&gt; &lt;/a&gt; or &lt;a href=&quot;struct.openoptions#method.open&quot;&gt; &lt;code&gt;OpenOptions::open&lt;/code&gt; &lt;/a&gt; for more information.</target>
        </trans-unit>
        <trans-unit id="993a1dfbbbb04483419f87e35c0750d6b041320f" translate="yes" xml:space="preserve">
          <source>When the inner scope ends, &lt;code&gt;branch&lt;/code&gt; goes out of scope and the strong count of the &lt;code&gt;Rc&amp;lt;Node&amp;gt;&lt;/code&gt; decreases to 0, so its &lt;code&gt;Node&lt;/code&gt; is dropped. The weak count of 1 from &lt;code&gt;leaf.parent&lt;/code&gt; has no bearing on whether or not &lt;code&gt;Node&lt;/code&gt; is dropped, so we don&amp;rsquo;t get any memory leaks!</source>
          <target state="translated">内部スコープが終了すると、 &lt;code&gt;branch&lt;/code&gt; はスコープから外れ、 &lt;code&gt;Rc&amp;lt;Node&amp;gt;&lt;/code&gt; 強いカウントが0に減少するため、その &lt;code&gt;Node&lt;/code&gt; は削除されます。 &lt;code&gt;leaf.parent&lt;/code&gt; からの弱いカウント1 は、 &lt;code&gt;Node&lt;/code&gt; がドロップされるかどうかには関係がないため、メモリリークは発生しません。</target>
        </trans-unit>
        <trans-unit id="92e09a21380ea98a48f9618974476f27f710a28e" translate="yes" xml:space="preserve">
          <source>When the iterator &lt;strong&gt;is&lt;/strong&gt; dropped, all elements in the range are removed from the vector, even if the iterator was not fully consumed. If the iterator &lt;strong&gt;is not&lt;/strong&gt; dropped (with &lt;a href=&quot;../mem/fn.forget&quot;&gt;&lt;code&gt;mem::forget&lt;/code&gt;&lt;/a&gt; for example), it is unspecified how many elements are removed.</source>
          <target state="translated">When the iterator &lt;strong&gt;is&lt;/strong&gt; dropped, all elements in the range are removed from the vector, even if the iterator was not fully consumed. If the iterator &lt;strong&gt;is not&lt;/strong&gt; dropped (with &lt;a href=&quot;../mem/fn.forget&quot;&gt; &lt;code&gt;mem::forget&lt;/code&gt; &lt;/a&gt; for example), it is unspecified how many elements are removed.</target>
        </trans-unit>
        <trans-unit id="b42ec8800c3cc9133daaff5ef361d3ea73ec622b" translate="yes" xml:space="preserve">
          <source>When the logic to be performed on the value is more complex, we may simply use the &lt;code&gt;entry&lt;/code&gt; API to ensure that the value is initialized and perform the logic afterwards.</source>
          <target state="translated">値に対して実行されるロジックがより複雑な場合は、 &lt;code&gt;entry&lt;/code&gt; APIを使用して、値が確実に初期化され、後でロジックが実行されるようにします。</target>
        </trans-unit>
        <trans-unit id="43d2b59799e2c6b4bb4b98d12d6f70c1cf49277f" translate="yes" xml:space="preserve">
          <source>When the main thread of a Rust program terminates, the entire program shuts down, even if other threads are still running. However, this module provides convenient facilities for automatically waiting for the termination of a child thread (i.e., join).</source>
          <target state="translated">Rust プログラムのメインスレッドが終了すると、他のスレッドが実行中であってもプログラム全体がシャットダウンします。しかし、このモジュールは、子スレッドの終了を自動的に待つための便利な機能を提供します (つまり、join)。</target>
        </trans-unit>
        <trans-unit id="c0dc6f3a5195559f8d12308da2db6f2414d40676" translate="yes" xml:space="preserve">
          <source>When the owner goes out of scope, the value will be dropped.</source>
          <target state="translated">オーナーが範囲外になると、価値が下がってしまいます。</target>
        </trans-unit>
        <trans-unit id="59190310a1258679f5eb021233a840994f9a99c1" translate="yes" xml:space="preserve">
          <source>When the pattern doesn't match:</source>
          <target state="translated">パターンが合わない場合</target>
        </trans-unit>
        <trans-unit id="ecb20a6a7a7f25d225823e98ccb5c961dba326d7" translate="yes" xml:space="preserve">
          <source>When the pattern matches successfully, the pattern guard expression is executed. If the expression evaluates to true, the pattern is successfully matched against. Otherwise, the next pattern, including other matches with the &lt;code&gt;|&lt;/code&gt; operator in the same arm, is tested.</source>
          <target state="translated">パターンが正常に一致すると、パターンガード式が実行されます。式の評価がtrueの場合、パターンは正常に照合されます。それ以外の場合、 &lt;code&gt;|&lt;/code&gt; との他の一致を含む次のパターン 同じアームのオペレーターがテストされます。</target>
        </trans-unit>
        <trans-unit id="b7f41ee353730e0c1a0a6d3264ef3197cc06c52f" translate="yes" xml:space="preserve">
          <source>When the post is approved, it gets published.</source>
          <target state="translated">投稿が承認されると掲載されます。</target>
        </trans-unit>
        <trans-unit id="41bc650167a3c0cb28cbdf2fe35163fe7bda095c" translate="yes" xml:space="preserve">
          <source>When the program has a valid reference, the borrow checker enforces the ownership and borrowing rules (covered in Chapter 4) to ensure this reference and any other references to the contents of the vector remain valid. Recall the rule that states you can&amp;rsquo;t have mutable and immutable references in the same scope. That rule applies in Listing 8-7, where we hold an immutable reference to the first element in a vector and try to add an element to the end, which won&amp;rsquo;t work if we also try to refer to that element later in the function:</source>
          <target state="translated">When the program has a valid reference, the borrow checker enforces the ownership and borrowing rules (covered in Chapter 4) to ensure this reference and any other references to the contents of the vector remain valid. Recall the rule that states you can&amp;rsquo;t have mutable and immutable references in the same scope. That rule applies in Listing 8-7, where we hold an immutable reference to the first element in a vector and try to add an element to the end, which won&amp;rsquo;t work if we also try to refer to that element later in the function:</target>
        </trans-unit>
        <trans-unit id="f7ce9475a843aa2869fe7fade2558fcd95ae51c8" translate="yes" xml:space="preserve">
          <source>When the program has a valid reference, the borrow checker enforces the ownership and borrowing rules (covered in Chapter 4) to ensure this reference and any other references to the contents of the vector remain valid. Recall the rule that states you can&amp;rsquo;t have mutable and immutable references in the same scope. That rule applies in Listing 8-7, where we hold an immutable reference to the first element in a vector and try to add an element to the end, which won&amp;rsquo;t work.</source>
          <target state="translated">プログラムに有効な参照がある場合、借用チェッカーは所有権と借用規則（第4章で説明）を適用して、この参照とベクターの内容への他の参照が有効なままであることを確認します。同じスコープ内で変更可能な参照と不変の参照を含めることはできないというルールを思い出してください。このルールはリスト8-7に適用され、ベクターの最初の要素への不変の参照を保持し、最後に要素を追加しようとしますが、機能しません。</target>
        </trans-unit>
        <trans-unit id="f773a5aea5eb96eca971d71eeb66cfae58b30a5a" translate="yes" xml:space="preserve">
          <source>When the programmer has enabled &lt;code&gt;debug_assert!&lt;/code&gt; assertions (for example, by enabling a non-optimized build), implementations must insert dynamic checks that &lt;code&gt;panic&lt;/code&gt; on overflow. Other kinds of builds may result in &lt;code&gt;panics&lt;/code&gt; or silently wrapped values on overflow, at the implementation's discretion.</source>
          <target state="translated">プログラマーが &lt;code&gt;debug_assert!&lt;/code&gt; を有効にしたとき！アサーション（たとえば、最適化されていないビルドを有効にすることにより）の実装では、オーバーフローで &lt;code&gt;panic&lt;/code&gt; する動的チェックを挿入する必要があります。他の種類のビルドでは、実装の裁量により、 &lt;code&gt;panics&lt;/code&gt; が発生したり、オーバーフロー時に値が暗黙的にラップされたりする場合があります。</target>
        </trans-unit>
        <trans-unit id="ce3f6166f132f399bf38664a6cccbedbde5ef26e" translate="yes" xml:space="preserve">
          <source>When the scrutinee expression is a &lt;a href=&quot;../expressions#place-expressions-and-value-expressions&quot;&gt;place expression&lt;/a&gt;, the match does not allocate a temporary location; however, a by-value binding may copy or move from the memory location. When possible, it is preferable to match on place expressions, as the lifetime of these matches inherits the lifetime of the place expression rather than being restricted to the inside of the match.</source>
          <target state="translated">精査式が&lt;a href=&quot;../expressions#place-expressions-and-value-expressions&quot;&gt;場所式である&lt;/a&gt;場合、一致は一時的な場所を割り当てません。ただし、値によるバインディングは、メモリの場所からコピーまたは移動する場合があります。これらの一致の存続期間は、一致の内部に制限されるのではなく、場所式の存続期間を継承するため、可能な場合は、場所式で一致することが推奨されます。</target>
        </trans-unit>
        <trans-unit id="2c72e3065d1cd65994fce834d0430d9416ecec2e" translate="yes" xml:space="preserve">
          <source>When the slice len is not evenly divided by the chunk size, the last slice of the iteration will be the remainder.</source>
          <target state="translated">スライス len がチャンクサイズで均等に分割されていない場合は、反復の最後のスライスが残りとなります。</target>
        </trans-unit>
        <trans-unit id="28062354592a563db8e797c18e0e70b8ef604bb5" translate="yes" xml:space="preserve">
          <source>When the slice len is not evenly divided by the chunk size, the last up to &lt;code&gt;N-1&lt;/code&gt; elements will be omitted but can be retrieved from the &lt;a href=&quot;struct.arraychunks#method.remainder&quot;&gt;&lt;code&gt;remainder&lt;/code&gt;&lt;/a&gt; function from the iterator.</source>
          <target state="translated">スライスlenがチャンクサイズで均等に分割されていない場合、最後の &lt;code&gt;N-1&lt;/code&gt; 要素までは省略されますが、イテレーターの&lt;a href=&quot;struct.arraychunks#method.remainder&quot;&gt; &lt;code&gt;remainder&lt;/code&gt; &lt;/a&gt;関数から取得できます。</target>
        </trans-unit>
        <trans-unit id="da0fda08da1d4cf85762ce95953612e1248e0072" translate="yes" xml:space="preserve">
          <source>When the slice len is not evenly divided by the chunk size, the last up to &lt;code&gt;N-1&lt;/code&gt; elements will be omitted but can be retrieved from the &lt;a href=&quot;struct.arraychunksmut#method.into_remainder&quot;&gt;&lt;code&gt;into_remainder&lt;/code&gt;&lt;/a&gt; function from the iterator.</source>
          <target state="translated">スライスlenがチャンクサイズで均等に分割されていない場合、最後の最大 &lt;code&gt;N-1&lt;/code&gt; 要素は省略されますが、イテレータの&lt;a href=&quot;struct.arraychunksmut#method.into_remainder&quot;&gt; &lt;code&gt;into_remainder&lt;/code&gt; &lt;/a&gt;関数から取得できます。</target>
        </trans-unit>
        <trans-unit id="fff85a9a955873b521d1857eca1f1e9a549be54e" translate="yes" xml:space="preserve">
          <source>When the slice len is not evenly divided by the chunk size, the last up to &lt;code&gt;chunk_size-1&lt;/code&gt; elements will be omitted but can be retrieved from the &lt;a href=&quot;struct.chunksexact#method.remainder&quot;&gt;&lt;code&gt;remainder&lt;/code&gt;&lt;/a&gt; function from the iterator.</source>
          <target state="translated">スライスlenがチャンクサイズで均等に分割されていない場合、最後の &lt;code&gt;chunk_size-1&lt;/code&gt; 要素までは省略されますが、イテレータから&lt;a href=&quot;struct.chunksexact#method.remainder&quot;&gt; &lt;code&gt;remainder&lt;/code&gt; &lt;/a&gt;関数から取得できます。</target>
        </trans-unit>
        <trans-unit id="380f0182bf0446b4645382de4340b8f27ea208b9" translate="yes" xml:space="preserve">
          <source>When the slice len is not evenly divided by the chunk size, the last up to &lt;code&gt;chunk_size-1&lt;/code&gt; elements will be omitted but can be retrieved from the &lt;a href=&quot;struct.chunksexactmut#method.into_remainder&quot;&gt;&lt;code&gt;into_remainder&lt;/code&gt;&lt;/a&gt; function from the iterator.</source>
          <target state="translated">スライスlenがチャンクサイズで均等に分割されていない場合、最後の&lt;a href=&quot;struct.chunksexactmut#method.into_remainder&quot;&gt; &lt;code&gt;into_remainder&lt;/code&gt; &lt;/a&gt; &lt;code&gt;chunk_size-1&lt;/code&gt; 要素は省略されますが、イテレータのinto_remainder関数から取得できます。</target>
        </trans-unit>
        <trans-unit id="c18714384f2b643a8c87f83e941ef77f216c1e30" translate="yes" xml:space="preserve">
          <source>When the source is an owning iterator struct (commonly called &lt;code&gt;IntoIter&lt;/code&gt;) then this can be useful for specializing &lt;a href=&quot;trait.fromiterator&quot;&gt;&lt;code&gt;FromIterator&lt;/code&gt;&lt;/a&gt; implementations or recovering the remaining elements after an iterator has been partially exhausted.</source>
          <target state="translated">ソースが所有するイテレータ構造体（一般に &lt;code&gt;IntoIter&lt;/code&gt; と呼ばれる）である場合、これは&lt;a href=&quot;trait.fromiterator&quot;&gt; &lt;code&gt;FromIterator&lt;/code&gt; &lt;/a&gt;実装を特殊化する場合や、イテレータが部分的に使い果たされた後に残りの要素を回復する場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="0cb68be86a1a45d1f6b54a16fdad69c0443b3e68" translate="yes" xml:space="preserve">
          <source>When the trailing semicolon is omitted, the result must be type &lt;code&gt;()&lt;/code&gt;.</source>
          <target state="translated">末尾のセミコロンが省略されている場合、結果はタイプ &lt;code&gt;()&lt;/code&gt; でなければなりません。</target>
        </trans-unit>
        <trans-unit id="9c349a820ac0a64039fea25d4cbecfdfad33b558" translate="yes" xml:space="preserve">
          <source>When the vector gets dropped, all of its contents are also dropped, meaning those integers it holds will be cleaned up. This may seem like a straightforward point but can get a bit more complicated when you start to introduce references to the elements of the vector. Let&amp;rsquo;s tackle that next!</source>
          <target state="translated">ベクターが削除されると、その内容もすべて削除されます。つまり、ベクターが保持する整数はクリーンアップされます。これは単純なポイントのように思えるかもしれませんが、ベクターの要素への参照を導入し始めると、もう少し複雑になる可能性があります。次に取り組みましょう！</target>
        </trans-unit>
        <trans-unit id="d759cfed67550956f3c467a9677f59d40c90a085" translate="yes" xml:space="preserve">
          <source>When there isn't a &lt;code&gt;Self: Sized&lt;/code&gt; bound on a method, the type of a method receiver must be one of the following types:</source>
          <target state="translated">When there isn't a &lt;code&gt;Self: Sized&lt;/code&gt; bound on a method, the type of a method receiver must be one of the following types:</target>
        </trans-unit>
        <trans-unit id="045b65f5d67968ff8801369e1d99fcba44a4e94a" translate="yes" xml:space="preserve">
          <source>When this closure is run, aspects such as the stdio file descriptors and working directory have successfully been changed, so output to these locations may not appear where intended.</source>
          <target state="translated">このクロージャが実行されると、stdio ファイル記述子や作業ディレクトリのような側面が正常に変更されるため、これらの場所への出力が意図した場所に表示されないことがあります。</target>
        </trans-unit>
        <trans-unit id="ad7769a3800701a3a043ec20084e499702706111" translate="yes" xml:space="preserve">
          <source>When this function is used during const evaluation, it may return &lt;code&gt;false&lt;/code&gt; for pointers that turn out to be null at runtime. Specifically, when a pointer to some memory is offset beyond its bounds in such a way that the resulting pointer is null, the function will still return &lt;code&gt;false&lt;/code&gt;. There is no way for CTFE to know the absolute position of that memory, so we cannot tell if the pointer is null or not.</source>
          <target state="translated">When this function is used during const evaluation, it may return &lt;code&gt;false&lt;/code&gt; for pointers that turn out to be null at runtime. Specifically, when a pointer to some memory is offset beyond its bounds in such a way that the resulting pointer is null, the function will still return &lt;code&gt;false&lt;/code&gt; . There is no way for CTFE to know the absolute position of that memory, so we cannot tell if the pointer is null or not.</target>
        </trans-unit>
        <trans-unit id="9f6792fc653fbacaf2b989ced239eb6fa2deec46" translate="yes" xml:space="preserve">
          <source>When this function returns, it is guaranteed that some initialization has run and completed (it may not be the closure specified). It is also guaranteed that any memory writes performed by the executed closure can be reliably observed by other threads at this point (there is a happens-before relation between the closure and code executing after the return).</source>
          <target state="translated">この関数が戻ってきたとき、何らかの初期化が実行されて完了したことが保証されます(指定されたクロージャではないかもしれません)。また、実行されたクロージャによって実行されたメモリ書き込みが、この時点で他のスレッドによって確実に観測されることも保証されています(クロージャとリターン後に実行されるコードの間には happens-before の関係があります)。</target>
        </trans-unit>
        <trans-unit id="6272391ae8d142b8a69f4da76b9108341afacf1f" translate="yes" xml:space="preserve">
          <source>When this method has been called, &lt;code&gt;self&lt;/code&gt; has not yet been deallocated. That only happens after the method is over. If this wasn't the case, &lt;code&gt;self&lt;/code&gt; would be a dangling reference.</source>
          <target state="translated">このメソッドが呼び出されたとき、 &lt;code&gt;self&lt;/code&gt; はまだ割り当て解除されていません。これは、メソッドが終了した後にのみ発生します。そうでない場合、 &lt;code&gt;self&lt;/code&gt; はぶら下がり参照になります。</target>
        </trans-unit>
        <trans-unit id="9b04566ec85e491e3fa2ae5cb87abb0c8372d784" translate="yes" xml:space="preserve">
          <source>When this program executes, it checks each &lt;code&gt;if&lt;/code&gt; expression in turn and executes the first body for which the condition holds true. Note that even though 6 is divisible by 2, we don&amp;rsquo;t see the output &lt;code&gt;number is divisible by 2&lt;/code&gt;, nor do we see the &lt;code&gt;number is not divisible by 4, 3, or 2&lt;/code&gt; text from the &lt;code&gt;else&lt;/code&gt; block. That&amp;rsquo;s because Rust only executes the block for the first true condition, and once it finds one, it doesn&amp;rsquo;t even check the rest.</source>
          <target state="translated">このプログラムが実行されると、各 &lt;code&gt;if&lt;/code&gt; 式が順番にチェックされ、条件がtrueである最初の本体が実行されます。6が2で割り切れても、出力 &lt;code&gt;number is divisible by 2&lt;/code&gt; で割り切れないこと &lt;code&gt;number is not divisible by 4, 3, or 2&lt;/code&gt; 、 &lt;code&gt;else&lt;/code&gt; ブロックの4、3 、または2のテキストで割り切れないことはありません。これは、Rustが最初の真の条件に対してのみブロックを実行し、1つが見つかると、残りのチェックも行わないためです。</target>
        </trans-unit>
        <trans-unit id="f943a1cfdbb4b42ef0aab62b7f7aa8f670763652" translate="yes" xml:space="preserve">
          <source>When to Use Unsafe Code</source>
          <target state="translated">安全でないコードを使用する場合</target>
        </trans-unit>
        <trans-unit id="e49f07ac591b9df3217836c08c55df9a224df807" translate="yes" xml:space="preserve">
          <source>When to choose interior mutability</source>
          <target state="translated">内部変異性を選択するタイミング</target>
        </trans-unit>
        <trans-unit id="34bd2ffda436616fa2dd5a24ddce1b15ffc8ed97" translate="yes" xml:space="preserve">
          <source>When trying to make some type implement a trait &lt;code&gt;Foo&lt;/code&gt;, you must, at minimum, provide implementations for all of &lt;code&gt;Foo&lt;/code&gt;'s required methods (meaning the methods that do not have default implementations), as well as any required trait items like associated types or constants. Example:</source>
          <target state="translated">一部のタイプに特性 &lt;code&gt;Foo&lt;/code&gt; を実装させる場合、少なくとも、 &lt;code&gt;Foo&lt;/code&gt; の必要なすべてのメソッド（デフォルトの実装がないメソッドを意味する）の実装と、関連するタイプや定数。例：</target>
        </trans-unit>
        <trans-unit id="727739e9ec606ff0128888672a6babe668ea6ab8" translate="yes" xml:space="preserve">
          <source>When used as a &lt;a href=&quot;../slice/trait.sliceindex&quot;&gt;slicing index&lt;/a&gt;, &lt;code&gt;RangeTo&lt;/code&gt; produces a slice of all array elements before the index indicated by &lt;code&gt;end&lt;/code&gt;.</source>
          <target state="translated">使用する場合&lt;a href=&quot;../slice/trait.sliceindex&quot;&gt;、スライスインデックス&lt;/a&gt;、 &lt;code&gt;RangeTo&lt;/code&gt; はインデックスにより示される前に、すべての配列要素のスライスを生成する &lt;code&gt;end&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e81866ba280f233e50444316cfe195129a341859" translate="yes" xml:space="preserve">
          <source>When used as a &lt;a href=&quot;../slice/trait.sliceindex&quot;&gt;slicing index&lt;/a&gt;, &lt;code&gt;RangeToInclusive&lt;/code&gt; produces a slice of all array elements up to and including the index indicated by &lt;code&gt;end&lt;/code&gt;.</source>
          <target state="translated">使用する場合&lt;a href=&quot;../slice/trait.sliceindex&quot;&gt;、スライスインデックス&lt;/a&gt;、 &lt;code&gt;RangeToInclusive&lt;/code&gt; はで示されるインデックスを含むの最大すべての配列要素のスライスを生成する &lt;code&gt;end&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2b45521f0b2908c3126bcf39f34e601db7fa5296" translate="yes" xml:space="preserve">
          <source>When used as an item or a statement, the &lt;em&gt;MacroInvocationSemi&lt;/em&gt; form is used where a semicolon is required at the end when not using curly braces. &lt;a href=&quot;visibility-and-privacy&quot;&gt;Visibility qualifiers&lt;/a&gt; are never allowed before a macro invocation or &lt;a href=&quot;macros-by-example&quot;&gt;&lt;code&gt;macro_rules&lt;/code&gt;&lt;/a&gt; definition.</source>
          <target state="translated">アイテムまたはステートメントとして使用する場合、中括弧を使用しない場合、末尾にセミコロンが必要な場所に&lt;em&gt;MacroInvocationSemi&lt;/em&gt;フォームが使用されます。&lt;a href=&quot;visibility-and-privacy&quot;&gt;可視性修飾子&lt;/a&gt;は、マクロ呼び出しまたは&lt;a href=&quot;macros-by-example&quot;&gt; &lt;code&gt;macro_rules&lt;/code&gt; &lt;/a&gt;定義の前には許可されません。</target>
        </trans-unit>
        <trans-unit id="142d83eb0488a8e5aa5cd0f7af5b426b99a98c2b" translate="yes" xml:space="preserve">
          <source>When used on a &lt;a href=&quot;../items/traits&quot;&gt;trait declaration&lt;/a&gt;, a &lt;a href=&quot;../expressions/call-expr&quot;&gt;call expression&lt;/a&gt; of an &lt;a href=&quot;../statements#expression-statements&quot;&gt;expression statement&lt;/a&gt; to a function that returns an &lt;a href=&quot;../types/impl-trait&quot;&gt;impl trait&lt;/a&gt; of that trait violates the &lt;code&gt;unused_must_use&lt;/code&gt; lint.</source>
          <target state="translated">&lt;a href=&quot;../items/traits&quot;&gt;特性宣言&lt;/a&gt;で使用すると、その特性の &lt;code&gt;unused_must_use&lt;/code&gt; &lt;a href=&quot;../types/impl-trait&quot;&gt;特性&lt;/a&gt;を返す関数への&lt;a href=&quot;../statements#expression-statements&quot;&gt;式ステートメントの&lt;/a&gt;&lt;a href=&quot;../expressions/call-expr&quot;&gt;呼び出し式&lt;/a&gt;は、unused_must_use lintに違反します。</target>
        </trans-unit>
        <trans-unit id="a852fccfd2a27297b4365a331af8dc1c15ac5f5a" translate="yes" xml:space="preserve">
          <source>When used on a function in a trait declaration, then the behavior also applies when the call expression is a function from an implementation of the trait.</source>
          <target state="translated">形質宣言の関数で使用された場合、呼び出し式が形質の実装からの関数である場合にも、この動作が適用されます。</target>
        </trans-unit>
        <trans-unit id="88cab39f222cd92692e6d511980bef189805ee7b" translate="yes" xml:space="preserve">
          <source>When used on a function in a trait implementation, the attribute does nothing.</source>
          <target state="translated">形質実装の関数で使用された場合、この属性は何もしません。</target>
        </trans-unit>
        <trans-unit id="a38aec53cd57e4a640fb72d4c596595beee7f334" translate="yes" xml:space="preserve">
          <source>When used on a function, if the &lt;a href=&quot;../expressions&quot;&gt;expression&lt;/a&gt; of an &lt;a href=&quot;../statements#expression-statements&quot;&gt;expression statement&lt;/a&gt; is a &lt;a href=&quot;../expressions/call-expr&quot;&gt;call expression&lt;/a&gt; to that function, then the &lt;code&gt;unused_must_use&lt;/code&gt; lint is violated.</source>
          <target state="translated">機能に使用された場合ならば、&lt;a href=&quot;../expressions&quot;&gt;表現&lt;/a&gt;の&lt;a href=&quot;../statements#expression-statements&quot;&gt;式文が&lt;/a&gt;ある&lt;a href=&quot;../expressions/call-expr&quot;&gt;呼び出し式&lt;/a&gt;その関数への、そして &lt;code&gt;unused_must_use&lt;/code&gt; lintは破られます。</target>
        </trans-unit>
        <trans-unit id="e4d571aee68c6431041b80e34711ac5e77b8cfc0" translate="yes" xml:space="preserve">
          <source>When used on user-defined composite types, if the &lt;a href=&quot;../expressions&quot;&gt;expression&lt;/a&gt; of an &lt;a href=&quot;../statements#expression-statements&quot;&gt;expression statement&lt;/a&gt; has that type, then the &lt;code&gt;unused_must_use&lt;/code&gt; lint is violated.</source>
          <target state="translated">ユーザー定義の複合型で使用&lt;a href=&quot;../expressions&quot;&gt;する&lt;/a&gt;と、&lt;a href=&quot;../statements#expression-statements&quot;&gt;式ステートメント&lt;/a&gt;の式にその型がある場合、 &lt;code&gt;unused_must_use&lt;/code&gt; lintに違反します。</target>
        </trans-unit>
        <trans-unit id="370602de292c5acf9300ec1049f6d7b0d030d468" translate="yes" xml:space="preserve">
          <source>When used with the alternate format specifier &lt;code&gt;#?&lt;/code&gt;, the output is pretty-printed.</source>
          <target state="translated">代替フォーマット指定子 &lt;code&gt;#?&lt;/code&gt; と一緒に使用した場合 、出力はきれいに出力されます。</target>
        </trans-unit>
        <trans-unit id="e3c7fb67d8df75a586e35884637385ed0d8f23ce" translate="yes" xml:space="preserve">
          <source>When using &lt;a href=&quot;fn.catch_unwind&quot;&gt;&lt;code&gt;catch_unwind&lt;/code&gt;&lt;/a&gt; it may be the case that some of the closed over variables are not unwind safe. For example if &lt;code&gt;&amp;amp;mut T&lt;/code&gt; is captured the compiler will generate a warning indicating that it is not unwind safe. It may not be the case, however, that this is actually a problem due to the specific usage of &lt;a href=&quot;fn.catch_unwind&quot;&gt;&lt;code&gt;catch_unwind&lt;/code&gt;&lt;/a&gt; if unwind safety is specifically taken into account. This wrapper struct is useful for a quick and lightweight annotation that a variable is indeed unwind safe.</source>
          <target state="translated">&lt;a href=&quot;fn.catch_unwind&quot;&gt; &lt;code&gt;catch_unwind&lt;/code&gt; &lt;/a&gt;を使用する場合、クローズされた変数の一部がアンワインドセーフではない場合があります。たとえば、 &lt;code&gt;&amp;amp;mut T&lt;/code&gt; がキャプチャされた場合、コンパイラはアンワインドセーフではないことを示す警告を生成します。ただし、巻き&lt;a href=&quot;fn.catch_unwind&quot;&gt; &lt;code&gt;catch_unwind&lt;/code&gt; &lt;/a&gt;安全性が特に考慮されている場合、catch_unwindの特定の使用法が原因で実際​​に問題になることはありません。このラッパー構造体は、変数が本当にアンワインドセーフであるという迅速で軽量な注釈に役立ちます。</target>
        </trans-unit>
        <trans-unit id="b4aaf8ff7f846237ace4f0a059c82e12475ebd13" translate="yes" xml:space="preserve">
          <source>When using a future, you generally won't call &lt;code&gt;poll&lt;/code&gt; directly, but instead &lt;code&gt;.await&lt;/code&gt; the value.</source>
          <target state="translated">futureを使用する場合、通常は &lt;code&gt;poll&lt;/code&gt; を直接呼び出すのではなく、値を &lt;code&gt;.await&lt;/code&gt; します。</target>
        </trans-unit>
        <trans-unit id="206af53865bdd4c9d82650ccc0b648e77c1d1339" translate="yes" xml:space="preserve">
          <source>When using a lifetime like &lt;code&gt;'a&lt;/code&gt; in a type, it must be declared before being used.</source>
          <target state="translated">型で &lt;code&gt;'a&lt;/code&gt; のようなライフタイムを使用する場合は、使用する前に宣言する必要があります。</target>
        </trans-unit>
        <trans-unit id="68d4836a866e67a5b4af384a8eb471ccacc77a13" translate="yes" xml:space="preserve">
          <source>When using a value expression in most place expression contexts, a temporary unnamed memory location is created initialized to that value and the expression evaluates to that location instead, except if &lt;a href=&quot;destructors#constant-promotion&quot;&gt;promoted&lt;/a&gt; to a &lt;code&gt;static&lt;/code&gt;. The &lt;a href=&quot;destructors#drop-scopes&quot;&gt;drop scope&lt;/a&gt; of the temporary is usually the end of the enclosing statement.</source>
          <target state="translated">When using a value expression in most place expression contexts, a temporary unnamed memory location is created initialized to that value and the expression evaluates to that location instead, except if &lt;a href=&quot;destructors#constant-promotion&quot;&gt;promoted&lt;/a&gt; to a &lt;code&gt;static&lt;/code&gt; . The &lt;a href=&quot;destructors#drop-scopes&quot;&gt;drop scope&lt;/a&gt; of the temporary is usually the end of the enclosing statement.</target>
        </trans-unit>
        <trans-unit id="783900079b0706a4642035130b0d4e5b4c18d3f8" translate="yes" xml:space="preserve">
          <source>When using a value expression in most place expression contexts, a temporary unnamed memory location is created initialized to that value and the expression evaluates to that location instead, except if promoted to &lt;code&gt;'static&lt;/code&gt;. Promotion of a value expression to a &lt;code&gt;'static&lt;/code&gt; slot occurs when the expression could be written in a constant, borrowed, and dereferencing that borrow where the expression was originally written, without changing the runtime behavior. That is, the promoted expression can be evaluated at compile-time and the resulting value does not contain &lt;a href=&quot;interior-mutability&quot;&gt;interior mutability&lt;/a&gt; or &lt;a href=&quot;destructors&quot;&gt;destructors&lt;/a&gt; (these properties are determined based on the value where possible, e.g. &lt;code&gt;&amp;amp;None&lt;/code&gt; always has the type &lt;code&gt;&amp;amp;'static Option&amp;lt;_&amp;gt;&lt;/code&gt;, as it contains nothing disallowed). Otherwise, the lifetime of temporary values is typically</source>
          <target state="translated">ほとんどの場所式コンテキストで値式を使用する場合、名前のない一時的なメモリの場所がその値に初期化されて作成され、式はその場所に評価されます（ただし、 &lt;code&gt;'static&lt;/code&gt; に昇格された場合を除く）。値式の &lt;code&gt;'static&lt;/code&gt; スロット」への昇格は、式が定数で書き込まれ、借用され、実行時の動作を変更せずに、式が最初に書き込まれた場所で借用を逆参照できる場合に発生します。つまり、昇格された式はコンパイル時に評価でき、結果の値には&lt;a href=&quot;interior-mutability&quot;&gt;内部の可変性&lt;/a&gt;または&lt;a href=&quot;destructors&quot;&gt;デストラクタ&lt;/a&gt;が含まれません（これらのプロパティは可能な限り値に基づいて決定されます。たとえば、 &lt;code&gt;&amp;amp;None&lt;/code&gt; は常に型を持っています） &lt;code&gt;&amp;amp;'static Option&amp;lt;_&amp;gt;&lt;/code&gt; （許可されていないものが含まれているため）。それ以外の場合、一時的な値のライフタイムは通常</target>
        </trans-unit>
        <trans-unit id="7387e6f07d50e4b94b03c5027eaa0a1074379c4f" translate="yes" xml:space="preserve">
          <source>When using an alias over a function type, you cannot e.g. denote a parameter as being mutable.</source>
          <target state="translated">関数型の上でエイリアスを使用する場合、例えばパラメータをミューティング可能であることを示すことはできません。</target>
        </trans-unit>
        <trans-unit id="8e391fe57ab900573f61faa4d08b9fd057fe4752" translate="yes" xml:space="preserve">
          <source>When using an inclusive range for iteration, the values of &lt;a href=&quot;#method.start&quot;&gt;&lt;code&gt;start()&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;end()&lt;/code&gt; are unspecified after the iteration ended. To determine whether the inclusive range is empty, use the &lt;a href=&quot;#method.is_empty&quot;&gt;&lt;code&gt;is_empty()&lt;/code&gt;&lt;/a&gt; method instead of comparing &lt;code&gt;start() &amp;gt; end()&lt;/code&gt;.</source>
          <target state="translated">反復に包含範囲を使用する場合、反復の終了後、&lt;a href=&quot;#method.start&quot;&gt; &lt;code&gt;start()&lt;/code&gt; &lt;/a&gt;および &lt;code&gt;end()&lt;/code&gt; の値は指定されません。含まれる範囲が空かどうかを判断するには、 &lt;code&gt;start() &amp;gt; end()&lt;/code&gt; を比較する代わりに&lt;a href=&quot;#method.is_empty&quot;&gt; &lt;code&gt;is_empty()&lt;/code&gt; &lt;/a&gt;メソッドを使用します。</target>
        </trans-unit>
        <trans-unit id="a518969d6cf8add6a83ea03a0b5649d4f43920f2" translate="yes" xml:space="preserve">
          <source>When using an inclusive range for iteration, the values of &lt;a href=&quot;struct.rangeinclusive#method.start&quot;&gt;&lt;code&gt;start()&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;end()&lt;/code&gt; are unspecified after the iteration ended. To determine whether the inclusive range is empty, use the &lt;a href=&quot;struct.rangeinclusive#method.is_empty&quot;&gt;&lt;code&gt;is_empty()&lt;/code&gt;&lt;/a&gt; method instead of comparing &lt;code&gt;start() &amp;gt; end()&lt;/code&gt;.</source>
          <target state="translated">When using an inclusive range for iteration, the values of &lt;a href=&quot;struct.rangeinclusive#method.start&quot;&gt; &lt;code&gt;start()&lt;/code&gt; &lt;/a&gt; and &lt;code&gt;end()&lt;/code&gt; are unspecified after the iteration ended. To determine whether the inclusive range is empty, use the &lt;a href=&quot;struct.rangeinclusive#method.is_empty&quot;&gt; &lt;code&gt;is_empty()&lt;/code&gt; &lt;/a&gt; method instead of comparing &lt;code&gt;start() &amp;gt; end()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b41ad7fcc2b6f72dd75060937158a4566bb3d48c" translate="yes" xml:space="preserve">
          <source>When using an inclusive range for iteration, the values of &lt;code&gt;start()&lt;/code&gt; and &lt;a href=&quot;#method.end&quot;&gt;&lt;code&gt;end()&lt;/code&gt;&lt;/a&gt; are unspecified after the iteration ended. To determine whether the inclusive range is empty, use the &lt;a href=&quot;#method.is_empty&quot;&gt;&lt;code&gt;is_empty()&lt;/code&gt;&lt;/a&gt; method instead of comparing &lt;code&gt;start() &amp;gt; end()&lt;/code&gt;.</source>
          <target state="translated">反復に包含範囲を使用する場合、反復の終了後、 &lt;code&gt;start()&lt;/code&gt; および&lt;a href=&quot;#method.end&quot;&gt; &lt;code&gt;end()&lt;/code&gt; の値&lt;/a&gt;は指定されません。含まれる範囲が空かどうかを判断するには、 &lt;code&gt;start() &amp;gt; end()&lt;/code&gt; を比較する代わりに&lt;a href=&quot;#method.is_empty&quot;&gt; &lt;code&gt;is_empty()&lt;/code&gt; &lt;/a&gt;メソッドを使用します。</target>
        </trans-unit>
        <trans-unit id="fbb0c63c5182e2af20d41eccf36aeeeb95780341" translate="yes" xml:space="preserve">
          <source>When using an inclusive range for iteration, the values of &lt;code&gt;start()&lt;/code&gt; and &lt;a href=&quot;struct.rangeinclusive#method.end&quot;&gt;&lt;code&gt;end()&lt;/code&gt;&lt;/a&gt; are unspecified after the iteration ended. To determine whether the inclusive range is empty, use the &lt;a href=&quot;struct.rangeinclusive#method.is_empty&quot;&gt;&lt;code&gt;is_empty()&lt;/code&gt;&lt;/a&gt; method instead of comparing &lt;code&gt;start() &amp;gt; end()&lt;/code&gt;.</source>
          <target state="translated">When using an inclusive range for iteration, the values of &lt;code&gt;start()&lt;/code&gt; and &lt;a href=&quot;struct.rangeinclusive#method.end&quot;&gt; &lt;code&gt;end()&lt;/code&gt; &lt;/a&gt; are unspecified after the iteration ended. To determine whether the inclusive range is empty, use the &lt;a href=&quot;struct.rangeinclusive#method.is_empty&quot;&gt; &lt;code&gt;is_empty()&lt;/code&gt; &lt;/a&gt; method instead of comparing &lt;code&gt;start() &amp;gt; end()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d88230c170cac7c9979daeb85327371e8fc8933d" translate="yes" xml:space="preserve">
          <source>When using generators (or async) all type variables must be bound so a generator can be constructed.</source>
          <target state="translated">ジェネレータ(または非同期)を使用する場合は、ジェネレータを構築できるように、すべての型変数をバインドしなければなりません。</target>
        </trans-unit>
        <trans-unit id="eb4afcd059cb498d340016957478dc07a5b0b9cd" translate="yes" xml:space="preserve">
          <source>When using iterators, you'll often chain several of them together. While working on such code, you might want to check out what's happening at various parts in the pipeline. To do that, insert a call to &lt;code&gt;inspect()&lt;/code&gt;.</source>
          <target state="translated">イテレータを使用する場合、複数のイテレータをチェーンすることがよくあります。このようなコードの作業中に、パイプラインのさまざまな部分で何が起こっているかを確認したい場合があります。そのためには、 &lt;code&gt;inspect()&lt;/code&gt; への呼び出しを挿入します。</target>
        </trans-unit>
        <trans-unit id="c5b59408fe1f6f4de1643cf5f48d4f5771ac3565" translate="yes" xml:space="preserve">
          <source>When using the &lt;code&gt;#[simd]&lt;/code&gt; attribute on a tuple struct, the components of the tuple struct must all be of a concrete, nongeneric type so the compiler can reason about how to use SIMD with them. This error will occur if the types are generic.</source>
          <target state="translated">タプル構造体で &lt;code&gt;#[simd]&lt;/code&gt; 属性を使用する場合、タプル構造体のコンポーネントはすべて具体的な非ジェネリック型である必要があります。そうすることで、コンパイラーはSIMDを使用する方法を推論できます。このエラーは、タイプがジェネリックの場合に発生します。</target>
        </trans-unit>
        <trans-unit id="39b563bb5da92b14b1bd3b2de6d3ed8ec3f0fd65" translate="yes" xml:space="preserve">
          <source>When using the &lt;code&gt;#[simd]&lt;/code&gt; attribute on a tuple struct, the elements in the tuple must be machine types so SIMD operations can be applied to them.</source>
          <target state="translated">タプル構造体で &lt;code&gt;#[simd]&lt;/code&gt; 属性を使用する場合、SIMD操作を適用できるように、タプル内の要素はマシンタイプである必要があります。</target>
        </trans-unit>
        <trans-unit id="f68c56eaa365c1195d011c5971774cffabbee19c" translate="yes" xml:space="preserve">
          <source>When using the &lt;code&gt;#[simd]&lt;/code&gt; attribute to automatically use SIMD operations in tuple struct, the types in the struct must all be of the same type, or the compiler will trigger this error.</source>
          <target state="translated">使用する場合は &lt;code&gt;#[simd]&lt;/code&gt; 自動的にタプル構造体にSIMD演算を使用する属性を、構造体の型は、すべて同じ型でなければなりません、またはコンパイラは、このエラーがトリガされます。</target>
        </trans-unit>
        <trans-unit id="8dd63b3b5f84a11f65877d582b3cb17771f94809" translate="yes" xml:space="preserve">
          <source>When using/declaring an item with generic arguments, you must provide the exact same number:</source>
          <target state="translated">一般的な引数を持つ項目を使用/宣言する場合は、全く同じ番号を指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="875f23e80d105f6373be722e024a688059c93026" translate="yes" xml:space="preserve">
          <source>When we assign &lt;code&gt;s1&lt;/code&gt; to &lt;code&gt;s2&lt;/code&gt;, the &lt;code&gt;String&lt;/code&gt; data is copied, meaning we copy the pointer, the length, and the capacity that are on the stack. We do not copy the data on the heap that the pointer refers to. In other words, the data representation in memory looks like Figure 4-2.</source>
          <target state="translated">&lt;code&gt;s1&lt;/code&gt; を &lt;code&gt;s2&lt;/code&gt; に割り当てると、 &lt;code&gt;String&lt;/code&gt; データがコピーされます。つまり、スタック上にあるポインター、長さ、および容量がコピーされます。ポインターが参照するヒープ上のデータはコピーしません。つまり、メモリ内のデータ表現は図4-2のようになります。</target>
        </trans-unit>
        <trans-unit id="20dccc7faf7358ddd1e5e9048cb569181ba72e52" translate="yes" xml:space="preserve">
          <source>When we bring a name into scope with the &lt;code&gt;use&lt;/code&gt; keyword, the name available in the new scope is private. To enable the code that calls our code to refer to that name as if it had been defined in that code&amp;rsquo;s scope, we can combine &lt;code&gt;pub&lt;/code&gt; and &lt;code&gt;use&lt;/code&gt;. This technique is called &lt;em&gt;re-exporting&lt;/em&gt; because we&amp;rsquo;re bringing an item into scope but also making that item available for others to bring into their scope.</source>
          <target state="translated">&lt;code&gt;use&lt;/code&gt; キーワードを使用して名前をスコープに入れると、新しいスコープで使用できる名前は非公開になります。コードを呼び出すコードが、そのコードのスコープで定義されているかのようにその名前を参照できるようにするには、 &lt;code&gt;pub&lt;/code&gt; とを組み合わせ &lt;code&gt;use&lt;/code&gt; 。この手法は、アイテムをスコープに入れるだけでなく、他のユーザーがそのアイテムをスコープに入れられるように&lt;em&gt;する&lt;/em&gt;ため、&lt;em&gt;再エクスポート&lt;/em&gt;と呼ばれます。</target>
        </trans-unit>
        <trans-unit id="42f15b600972fbcabaccb1f899d3d65cff52600b" translate="yes" xml:space="preserve">
          <source>When we call &lt;code&gt;fly&lt;/code&gt; on an instance of &lt;code&gt;Human&lt;/code&gt;, the compiler defaults to calling the method that is directly implemented on the type, as shown in Listing 19-17.</source>
          <target state="translated">リスト19-17に示すように、 &lt;code&gt;Human&lt;/code&gt; のインスタンスで &lt;code&gt;fly&lt;/code&gt; を呼び出すと、コンパイラーはデフォルトで、型に直接実装されているメソッドを呼び出すようになります。</target>
        </trans-unit>
        <trans-unit id="350ebfd5b3bd82b33fcb60d5557f6b4f388aac65" translate="yes" xml:space="preserve">
          <source>When we call this macro with &lt;code&gt;vec![1, 2, 3];&lt;/code&gt;, the &lt;code&gt;$x&lt;/code&gt; pattern matches three times with the three expressions &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;2&lt;/code&gt;, and &lt;code&gt;3&lt;/code&gt;.</source>
          <target state="translated">このマクロを &lt;code&gt;vec![1, 2, 3];&lt;/code&gt; 呼び出すと、、 &lt;code&gt;$x&lt;/code&gt; パターンは3つの式で三回に一致する &lt;code&gt;1&lt;/code&gt; 、 &lt;code&gt;2&lt;/code&gt; 、および &lt;code&gt;3&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9e7bba3d9da7852f6359cc6e672864f837a98a14" translate="yes" xml:space="preserve">
          <source>When we compile this code, we get an error with this core message:</source>
          <target state="translated">このコードをコンパイルすると、このコアメッセージでエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="9b6bd2715022e06e450780014c7b5af3817cebde" translate="yes" xml:space="preserve">
          <source>When we compile this code, we get the following error message:</source>
          <target state="translated">このコードをコンパイルすると、以下のようなエラーメッセージが表示されます。</target>
        </trans-unit>
        <trans-unit id="d7383a66b159cf7464f68ba405d35045b37c0b59" translate="yes" xml:space="preserve">
          <source>When we compile this code, we get this error:</source>
          <target state="translated">このコードをコンパイルすると、このようなエラーが出ます。</target>
        </trans-unit>
        <trans-unit id="5e8ce4b2651c1cb04164eadfa1df10bcf9bfb1ce" translate="yes" xml:space="preserve">
          <source>When we compile this example, we get this error:</source>
          <target state="translated">この例をコンパイルすると、このようなエラーが出ます。</target>
        </trans-unit>
        <trans-unit id="54132a8652e951367540a246425bd7e243e44e7e" translate="yes" xml:space="preserve">
          <source>When we create a new &lt;code&gt;Post&lt;/code&gt;, we set its &lt;code&gt;state&lt;/code&gt; field to a &lt;code&gt;Some&lt;/code&gt; value that holds a &lt;code&gt;Box&lt;/code&gt;. This &lt;code&gt;Box&lt;/code&gt; points to a new instance of the &lt;code&gt;Draft&lt;/code&gt; struct. This ensures whenever we create a new instance of &lt;code&gt;Post&lt;/code&gt;, it will start out as a draft. Because the &lt;code&gt;state&lt;/code&gt; field of &lt;code&gt;Post&lt;/code&gt; is private, there is no way to create a &lt;code&gt;Post&lt;/code&gt; in any other state! In the &lt;code&gt;Post::new&lt;/code&gt; function, we set the &lt;code&gt;content&lt;/code&gt; field to a new, empty &lt;code&gt;String&lt;/code&gt;.</source>
          <target state="translated">新しい &lt;code&gt;Post&lt;/code&gt; を作成するとき、その &lt;code&gt;state&lt;/code&gt; フィールドを &lt;code&gt;Box&lt;/code&gt; を保持する &lt;code&gt;Some&lt;/code&gt; 値に設定します。この &lt;code&gt;Box&lt;/code&gt; は、 &lt;code&gt;Draft&lt;/code&gt; 構造体の新しいインスタンスを指します。これにより、 &lt;code&gt;Post&lt;/code&gt; の新しいインスタンスを作成するときは常にドラフトとして開始されます。 &lt;code&gt;Post&lt;/code&gt; の &lt;code&gt;state&lt;/code&gt; フィールドはプライベートなので、他の状態で &lt;code&gt;Post&lt;/code&gt; を作成する方法はありません。では &lt;code&gt;Post::new&lt;/code&gt; 機能、我々はセット &lt;code&gt;content&lt;/code&gt; 新しい空にフィールドを &lt;code&gt;String&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9bdaf316b9ae5f73e74db4dd3cf073c814edc28e" translate="yes" xml:space="preserve">
          <source>When we create the &lt;code&gt;branch&lt;/code&gt; node, it will also have a new &lt;code&gt;Weak&amp;lt;Node&amp;gt;&lt;/code&gt; reference in the &lt;code&gt;parent&lt;/code&gt; field, because &lt;code&gt;branch&lt;/code&gt; doesn&amp;rsquo;t have a parent node. We still have &lt;code&gt;leaf&lt;/code&gt; as one of the children of &lt;code&gt;branch&lt;/code&gt;. Once we have the &lt;code&gt;Node&lt;/code&gt; instance in &lt;code&gt;branch&lt;/code&gt;, we can modify &lt;code&gt;leaf&lt;/code&gt; to give it a &lt;code&gt;Weak&amp;lt;Node&amp;gt;&lt;/code&gt; reference to its parent. We use the &lt;code&gt;borrow_mut&lt;/code&gt; method on the &lt;code&gt;RefCell&amp;lt;Weak&amp;lt;Node&amp;gt;&amp;gt;&lt;/code&gt; in the &lt;code&gt;parent&lt;/code&gt; field of &lt;code&gt;leaf&lt;/code&gt;, and then we use the &lt;code&gt;Rc::downgrade&lt;/code&gt; function to create a &lt;code&gt;Weak&amp;lt;Node&amp;gt;&lt;/code&gt; reference to &lt;code&gt;branch&lt;/code&gt; from the &lt;code&gt;Rc&amp;lt;Node&amp;gt;&lt;/code&gt; in &lt;code&gt;branch.&lt;/code&gt;</source>
          <target state="translated">私たちが作成した場合 &lt;code&gt;branch&lt;/code&gt; ノードを、それはまた、新しい必要があります &lt;code&gt;Weak&amp;lt;Node&amp;gt;&lt;/code&gt; で参照 &lt;code&gt;parent&lt;/code&gt; ので、フィールドを &lt;code&gt;branch&lt;/code&gt; 親ノードを持ちません。私たちはまだ &lt;code&gt;branch&lt;/code&gt; の子の一人として &lt;code&gt;leaf&lt;/code&gt; を持っています。 &lt;code&gt;branch&lt;/code&gt; に &lt;code&gt;Node&lt;/code&gt; インスタンスを作成したら、 &lt;code&gt;leaf&lt;/code&gt; を変更して、親への &lt;code&gt;Weak&amp;lt;Node&amp;gt;&lt;/code&gt; 参照を与えることができます。私たちは、使用 &lt;code&gt;borrow_mut&lt;/code&gt; の上の方法を &lt;code&gt;RefCell&amp;lt;Weak&amp;lt;Node&amp;gt;&amp;gt;&lt;/code&gt; に &lt;code&gt;parent&lt;/code&gt; の分野 &lt;code&gt;leaf&lt;/code&gt; 、その後、我々は使用 &lt;code&gt;Rc::downgrade&lt;/code&gt; 作成する機能を &lt;code&gt;Weak&amp;lt;Node&amp;gt;&lt;/code&gt; を参照する &lt;code&gt;branch&lt;/code&gt; から &lt;code&gt;Rc&amp;lt;Node&amp;gt;&lt;/code&gt; で &lt;code&gt;branch.&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b6d475e631798bcfdbe8b5d49b3651bb13f536b5" translate="yes" xml:space="preserve">
          <source>When we entered &lt;code&gt;*y&lt;/code&gt; in Listing 15-9, behind the scenes Rust actually ran this code:</source>
          <target state="translated">リスト15-9で &lt;code&gt;*y&lt;/code&gt; と入力すると、Rustは実際にこのコードを実行しました。</target>
        </trans-unit>
        <trans-unit id="022643a7b2e9e273dbb19c62148637669a0b154f" translate="yes" xml:space="preserve">
          <source>When we entered the command, Cargo created a &lt;em&gt;Cargo.toml&lt;/em&gt; file, giving us a package. Looking at the contents of &lt;em&gt;Cargo.toml&lt;/em&gt;, there&amp;rsquo;s no mention of &lt;em&gt;src/main.rs&lt;/em&gt; because Cargo follows a convention that &lt;em&gt;src/main.rs&lt;/em&gt; is the crate root of a binary crate with the same name as the package. Likewise, Cargo knows that if the package directory contains &lt;em&gt;src/lib.rs&lt;/em&gt;, the package contains a library crate with the same name as the package, and &lt;em&gt;src/lib.rs&lt;/em&gt; is its crate root. Cargo passes the crate root files to &lt;code&gt;rustc&lt;/code&gt; to build the library or binary.</source>
          <target state="translated">コマンドを入力すると、Cargoは&lt;em&gt;Cargo.toml&lt;/em&gt;ファイルを作成し、パッケージを提供します。&lt;em&gt;Cargo.toml&lt;/em&gt;の内容を見ると、&lt;em&gt;src / main.rs&lt;/em&gt;はパッケージと同じ名前のバイナリクレートのクレートルートであるという規則に従っているため、&lt;em&gt;src / main.rs&lt;/em&gt;についての言及はありません。同様に、Cargoは、パッケージディレクトリに&lt;em&gt;src / lib.rs&lt;/em&gt;が含まれている場合、パッケージにパッケージと同じ名前のライブラリクレートが含まれており、&lt;em&gt;src / lib.rs&lt;/em&gt;がそのクレートルートであることを&lt;em&gt;認識してい&lt;/em&gt;ます。 Cargoはクレートルートファイルを &lt;code&gt;rustc&lt;/code&gt; に渡して、ライブラリまたはバイナリをビルドします。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="457abff93dbe5ac6fded48fa1428f69ee83409b3" translate="yes" xml:space="preserve">
          <source>When we have a &lt;code&gt;Some&lt;/code&gt; value, we know that a value is present and the value is held within the &lt;code&gt;Some&lt;/code&gt;. When we have a &lt;code&gt;None&lt;/code&gt; value, in some sense, it means the same thing as null: we don&amp;rsquo;t have a valid value. So why is having &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; any better than having null?</source>
          <target state="translated">&lt;code&gt;Some&lt;/code&gt; 値がある場合、値が存在し、その値が &lt;code&gt;Some&lt;/code&gt; 内に保持されていることがわかります。 &lt;code&gt;None&lt;/code&gt; 値がある場合、ある意味で、nullと同じことを意味します。有効な値がないためです。では、なぜ &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; するのがnullを使用するよりも優れているのでしょうか。</target>
        </trans-unit>
        <trans-unit id="f020ca74b67fee23ca0497cca95821474c7cc12b" translate="yes" xml:space="preserve">
          <source>When we implement methods on a struct with lifetimes, we use the same syntax as that of generic type parameters shown in Listing 10-11. Where we declare and use the lifetime parameters depends on whether they&amp;rsquo;re related to the struct fields or the method parameters and return values.</source>
          <target state="translated">ライフタイムのある構造体にメソッドを実装する場合、リスト10-11に示されているジェネリック型パラメーターと同じ構文を使用します。ライフタイムパラメータを宣言して使用する場所は、それらが構造体フィールドに関連しているか、メソッドパラメータと戻り値に関連しているかによって異なります。</target>
        </trans-unit>
        <trans-unit id="a57e5870f2a33156805f7bdbcc9a94b3975d0971" translate="yes" xml:space="preserve">
          <source>When we implemented &lt;code&gt;Add&lt;/code&gt; for &lt;code&gt;Point&lt;/code&gt;, we used the default for &lt;code&gt;RHS&lt;/code&gt; because we wanted to add two &lt;code&gt;Point&lt;/code&gt; instances. Let&amp;rsquo;s look at an example of implementing the &lt;code&gt;Add&lt;/code&gt; trait where we want to customize the &lt;code&gt;RHS&lt;/code&gt; type rather than using the default.</source>
          <target state="translated">&lt;code&gt;Add&lt;/code&gt; for &lt;code&gt;Point&lt;/code&gt; を実装したとき、2つの &lt;code&gt;Point&lt;/code&gt; インスタンスを追加したかったので、 &lt;code&gt;RHS&lt;/code&gt; のデフォルトを使用しました。デフォルトを使用するのではなく、 &lt;code&gt;RHS&lt;/code&gt; タイプをカスタマイズする &lt;code&gt;Add&lt;/code&gt; トレイトの実装例を見てみましょう。</target>
        </trans-unit>
        <trans-unit id="bbeae0b47ec877c608d0d21b1b80a717b1578283" translate="yes" xml:space="preserve">
          <source>When we implemented &lt;code&gt;Add&lt;/code&gt; for &lt;code&gt;Point&lt;/code&gt;, we used the default for &lt;code&gt;Rhs&lt;/code&gt; because we wanted to add two &lt;code&gt;Point&lt;/code&gt; instances. Let&amp;rsquo;s look at an example of implementing the &lt;code&gt;Add&lt;/code&gt; trait where we want to customize the &lt;code&gt;Rhs&lt;/code&gt; type rather than using the default.</source>
          <target state="translated">When we implemented &lt;code&gt;Add&lt;/code&gt; for &lt;code&gt;Point&lt;/code&gt; , we used the default for &lt;code&gt;Rhs&lt;/code&gt; because we wanted to add two &lt;code&gt;Point&lt;/code&gt; instances. Let&amp;rsquo;s look at an example of implementing the &lt;code&gt;Add&lt;/code&gt; trait where we want to customize the &lt;code&gt;Rhs&lt;/code&gt; type rather than using the default.</target>
        </trans-unit>
        <trans-unit id="59b1449687c25748d2619d5b3c608f432cee9ffd" translate="yes" xml:space="preserve">
          <source>When we look at &lt;em&gt;src/main.rs&lt;/em&gt; again, we&amp;rsquo;ll see that &lt;code&gt;cargo fix&lt;/code&gt; has changed the code:</source>
          <target state="translated">私たちが見たとき&lt;em&gt;のsrc / main.rs&lt;/em&gt;再び、我々はそれを参照してくださいよ &lt;code&gt;cargo fix&lt;/code&gt; 、コードを変更しました：</target>
        </trans-unit>
        <trans-unit id="7a54ab2951cd6fff0884c0511bb61b6ab512dff0" translate="yes" xml:space="preserve">
          <source>When we make a new library project with Cargo, a test module with a test function in it is automatically generated for us. This module helps you start writing your tests so you don&amp;rsquo;t have to look up the exact structure and syntax of test functions every time you start a new project. You can add as many additional test functions and as many test modules as you want!</source>
          <target state="translated">Cargoを使用して新しいライブラリプロジェクトを作成すると、テスト関数を含むテストモジュールが自動的に生成されます。このモジュールは、新しいプロジェクトを開始するたびにテスト関数の正確な構造と構文を調べる必要がないように、テストの作成を開始するのに役立ちます。追加のテスト機能とテストモジュールを必要なだけ追加できます。</target>
        </trans-unit>
        <trans-unit id="c17714721f7f441933c167091091578db54d0995" translate="yes" xml:space="preserve">
          <source>When we pass concrete references to &lt;code&gt;longest&lt;/code&gt;, the concrete lifetime that is substituted for &lt;code&gt;'a&lt;/code&gt; is the part of the scope of &lt;code&gt;x&lt;/code&gt; that overlaps with the scope of &lt;code&gt;y&lt;/code&gt;. In other words, the generic lifetime &lt;code&gt;'a&lt;/code&gt; will get the concrete lifetime that is equal to the smaller of the lifetimes of &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;. Because we&amp;rsquo;ve annotated the returned reference with the same lifetime parameter &lt;code&gt;'a&lt;/code&gt;, the returned reference will also be valid for the length of the smaller of the lifetimes of &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;longest&lt;/code&gt; への具体的な参照を渡すとき、 &lt;code&gt;'a&lt;/code&gt; に置き換えられる具体的な有効期間は、 &lt;code&gt;y&lt;/code&gt; のスコープと重複する &lt;code&gt;x&lt;/code&gt; のスコープの一部です。言い換えると、一般的なライフタイム &lt;code&gt;'a&lt;/code&gt; は、 &lt;code&gt;x&lt;/code&gt; と &lt;code&gt;y&lt;/code&gt; のライフタイムのうち小さい方に等しい具体的なライフタイムを取得します。返された参照に同じ有効期間パラメーター &lt;code&gt;'a&lt;/code&gt; で注釈を付けたため、返された参照は &lt;code&gt;x&lt;/code&gt; と &lt;code&gt;y&lt;/code&gt; の有効期間の短い方の長さについても有効です。</target>
        </trans-unit>
        <trans-unit id="a267d1c9dce3d09c3ccaaec536f47b38cd5559e0" translate="yes" xml:space="preserve">
          <source>When we print &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt;, and &lt;code&gt;c&lt;/code&gt;, we can see that they all have the modified value of 15 rather than 5:</source>
          <target state="translated">我々は印刷すると、 &lt;code&gt;b&lt;/code&gt; 、および &lt;code&gt;c&lt;/code&gt; 、我々は、彼らがすべての15ではなく5の修正値を持っていることを確認できます。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e6d697346a86084beb1a95157687a62dfdd661aa" translate="yes" xml:space="preserve">
          <source>When we print the parent of &lt;code&gt;leaf&lt;/code&gt; again, this time we&amp;rsquo;ll get a &lt;code&gt;Some&lt;/code&gt; variant holding &lt;code&gt;branch&lt;/code&gt;: now &lt;code&gt;leaf&lt;/code&gt; can access its parent! When we print &lt;code&gt;leaf&lt;/code&gt;, we also avoid the cycle that eventually ended in a stack overflow like we had in Listing 15-26; the &lt;code&gt;Weak&amp;lt;Node&amp;gt;&lt;/code&gt; references are printed as &lt;code&gt;(Weak)&lt;/code&gt;:</source>
          <target state="translated">私たちは親の印刷時に &lt;code&gt;leaf&lt;/code&gt; 再び、今回は買ってあげる &lt;code&gt;Some&lt;/code&gt; 変種保持 &lt;code&gt;branch&lt;/code&gt; ：今、 &lt;code&gt;leaf&lt;/code&gt; その親にアクセスすることができます！ &lt;code&gt;leaf&lt;/code&gt; を出力するとき、リスト15-26のようにスタックオーバーフローで最終的に終了するサイクルも回避します。 &lt;code&gt;Weak&amp;lt;Node&amp;gt;&lt;/code&gt; 参考文献は、以下のように印刷されている &lt;code&gt;(Weak)&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="d6ae0ddb23c20f16f914c98f6cadf070ae827274" translate="yes" xml:space="preserve">
          <source>When we run &lt;code&gt;cargo doc --open&lt;/code&gt;, these comments will display on the front page of the documentation for &lt;code&gt;my_crate&lt;/code&gt; above the list of public items in the crate, as shown in Figure 14-2:</source>
          <target state="translated">図14-2に示すように、 &lt;code&gt;cargo doc --open&lt;/code&gt; を実行すると、クレート内のパブリックアイテムのリストの上にある &lt;code&gt;my_crate&lt;/code&gt; のドキュメントのフロントページにこれらのコメントが表示されます。</target>
        </trans-unit>
        <trans-unit id="e0a9b14cc5672cde13757ff7b922b97b778df10c" translate="yes" xml:space="preserve">
          <source>When we run the code in Listing 16-8, we&amp;rsquo;ll see the value printed from the main thread:</source>
          <target state="translated">リスト16-8のコードを実行すると、メインスレッドから出力された値が表示されます：</target>
        </trans-unit>
        <trans-unit id="b9d752c4fc202642188fd8ee33a406138a554856" translate="yes" xml:space="preserve">
          <source>When we run the program now, we get this:</source>
          <target state="translated">今プログラムを実行するとこんな感じです。</target>
        </trans-unit>
        <trans-unit id="8c0106d7279651b49f13e37d40b4d1b5d7049633" translate="yes" xml:space="preserve">
          <source>When we run the test in Listing 11-8, it will fail:</source>
          <target state="translated">リスト11-8のテストを実行すると失敗します。</target>
        </trans-unit>
        <trans-unit id="44d32483b028a29165bad05ab4f3b2f5da955011" translate="yes" xml:space="preserve">
          <source>When we run the tests again, we&amp;rsquo;ll see a new section in the test output for the &lt;em&gt;common.rs&lt;/em&gt; file, even though this file doesn&amp;rsquo;t contain any test functions nor did we call the &lt;code&gt;setup&lt;/code&gt; function from anywhere:</source>
          <target state="translated">テストを再度実行すると、&lt;em&gt;common.rs&lt;/em&gt;ファイルのテスト出力に新しいセクションが表示されます。ただし、このファイルにはテスト関数が含まれておらず、どこからでも &lt;code&gt;setup&lt;/code&gt; 関数を呼び出していません。</target>
        </trans-unit>
        <trans-unit id="cb3ddc159979bee1d75a46f9ea2d0183358cc97b" translate="yes" xml:space="preserve">
          <source>When we run the tests in Listing 11-10 again with the &lt;code&gt;--nocapture&lt;/code&gt; flag, we see the following output:</source>
          <target state="translated">リスト11-10のテストを &lt;code&gt;--nocapture&lt;/code&gt; フラグを指定して再度実行すると、次の出力が表示されます。</target>
        </trans-unit>
        <trans-unit id="35bd5db3d4e7561ab5f23e824a5b461601f0023a" translate="yes" xml:space="preserve">
          <source>When we run the tests in Listing 11-10 again with the &lt;code&gt;--show-output&lt;/code&gt; flag, we see the following output:</source>
          <target state="translated">When we run the tests in Listing 11-10 again with the &lt;code&gt;--show-output&lt;/code&gt; flag, we see the following output:</target>
        </trans-unit>
        <trans-unit id="538d8419c932e242d1adf6db2334731a0ed2c1d0" translate="yes" xml:space="preserve">
          <source>When we run these tests with &lt;code&gt;cargo test&lt;/code&gt;, we&amp;rsquo;ll see the following output:</source>
          <target state="translated">これらのテストを &lt;code&gt;cargo test&lt;/code&gt; で実行すると、次の出力が表示されます。</target>
        </trans-unit>
        <trans-unit id="44da441e6c2b41d33ecf09cf035dd429fd808ba5" translate="yes" xml:space="preserve">
          <source>When we run this code with the &lt;code&gt;main&lt;/code&gt; function in Listing 5-14, we&amp;rsquo;ll get our desired output. Methods can take multiple parameters that we add to the signature after the &lt;code&gt;self&lt;/code&gt; parameter, and those parameters work just like parameters in functions.</source>
          <target state="translated">リスト5-14の &lt;code&gt;main&lt;/code&gt; 関数でこのコードを実行すると、目的の出力が得られます。メソッドは、 &lt;code&gt;self&lt;/code&gt; パラメータの後にシグネチャに追加する複数のパラメータを取ることができ、それらのパラメータは関数のパラメータと同じように機能します。</target>
        </trans-unit>
        <trans-unit id="53901aa87c2188aaba7aa42fd2554bc7576ce3ee" translate="yes" xml:space="preserve">
          <source>When we run this code, keeping the last &lt;code&gt;println!&lt;/code&gt; commented out for the moment, we&amp;rsquo;ll get this output:</source>
          <target state="translated">このコードを実行すると、最後の &lt;code&gt;println!&lt;/code&gt; 保持されます。現時点ではコメント化されており、次の出力が得られます。</target>
        </trans-unit>
        <trans-unit id="5a3726ae54b6ccfb63fe87a5f6a303a012e956de" translate="yes" xml:space="preserve">
          <source>When we run this code, the first &lt;code&gt;[]&lt;/code&gt; method will cause the program to panic because it references a nonexistent element. This method is best used when you want your program to crash if there&amp;rsquo;s an attempt to access an element past the end of the vector.</source>
          <target state="translated">このコードを実行すると、最初の &lt;code&gt;[]&lt;/code&gt; メソッドは存在しない要素を参照するため、プログラムがパニックになります。このメソッドは、ベクターの終わりを過ぎて要素にアクセスしようとした場合にプログラムをクラッシュさせたい場合に最適です。</target>
        </trans-unit>
        <trans-unit id="d8d2da45983d7df0624bea6b1c973bb74ce76aac" translate="yes" xml:space="preserve">
          <source>When we run this code, we get an error with this core message:</source>
          <target state="translated">このコードを実行すると、このコアメッセージでエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="da6003750d05384524bf31be1adada0eff839f64" translate="yes" xml:space="preserve">
          <source>When we run this code, we&amp;rsquo;ll see the same output as in Listing 3-4. More importantly, we&amp;rsquo;ve now increased the safety of the code and eliminated the chance of bugs that might result from going beyond the end of the array or not going far enough and missing some items.</source>
          <target state="translated">このコードを実行すると、コードリスト3-4と同じ出力が表示されます。さらに重要なことに、コードの安全性が向上し、配列の最後を超えたり、十分に行かなかったり、一部のアイテムが欠落したりすることによって発生するバグの可能性がなくなりました。</target>
        </trans-unit>
        <trans-unit id="0377ef8d6715ac2dafa89aafe2017357ba5bea77" translate="yes" xml:space="preserve">
          <source>When we run this program, we&amp;rsquo;ll see &lt;code&gt;again!&lt;/code&gt; printed over and over continuously until we stop the program manually. Most terminals support a keyboard shortcut, ctrl-c, to interrupt a program that is stuck in a continual loop. Give it a try:</source>
          <target state="translated">このプログラムを実行すると、 &lt;code&gt;again!&lt;/code&gt; 表示されます。プログラムを手動で停止するまで、何度も繰り返し印刷しました。ほとんどの端末は、継続的なループでスタックしているプログラムを中断するためのキーボードショートカットctrl-cをサポートしています。試してみる：</target>
        </trans-unit>
        <trans-unit id="17d349051e8f46b1c202c3a4fbf98139c89d6d7a" translate="yes" xml:space="preserve">
          <source>When we run this program, we&amp;rsquo;ll see the following output:</source>
          <target state="translated">このプログラムを実行すると、次の出力が表示されます。</target>
        </trans-unit>
        <trans-unit id="2f39695d914a0c9b88c38a4702c072cc550001b0" translate="yes" xml:space="preserve">
          <source>When we try to check this code, we get this error:</source>
          <target state="translated">このコードを確認しようとすると、このようなエラーが出ます。</target>
        </trans-unit>
        <trans-unit id="b3d78770e0df06fb7d4eaea2e697443df3c1aa40" translate="yes" xml:space="preserve">
          <source>When we try to compile the code in Listing 19-5, we&amp;rsquo;ll get an error.</source>
          <target state="translated">リスト19-5のコードをコンパイルしようとすると、エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="48d690d7f7c7a29675b105185a25b0eb605ff7f0" translate="yes" xml:space="preserve">
          <source>When we try to compile this code, we&amp;rsquo;ll get an error. The &lt;code&gt;if&lt;/code&gt; and &lt;code&gt;else&lt;/code&gt; arms have value types that are incompatible, and Rust indicates exactly where to find the problem in the program:</source>
          <target state="translated">このコードをコンパイルしようとすると、エラーが発生します。 &lt;code&gt;if&lt;/code&gt; や &lt;code&gt;else&lt;/code&gt; の腕は互換性のない値の型を持っている、そしてラストは、プログラムに問題を発見する場所を正確に示しています。</target>
        </trans-unit>
        <trans-unit id="20d9e738eb0bfb3c94a0df139314a2d502044dfc" translate="yes" xml:space="preserve">
          <source>When we try to compile this code, we&amp;rsquo;ll get this error:</source>
          <target state="translated">このコードをコンパイルしようとすると、次のエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="382fab0dfc540b6d59e6b19a27e6a865624379ec" translate="yes" xml:space="preserve">
          <source>When we use a parameter in the body of the function, we have to declare the parameter name in the signature so the compiler knows what that name means. Similarly, when we use a type parameter name in a function signature, we have to declare the type parameter name before we use it. To define the generic &lt;code&gt;largest&lt;/code&gt; function, place type name declarations inside angle brackets, &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;, between the name of the function and the parameter list, like this:</source>
          <target state="translated">関数の本体でパラメーターを使用する場合、シグニチャーでパラメーター名を宣言して、コンパイラーがその名前の意味を認識できるようにする必要があります。同様に、関数のシグネチャで型パラメーター名を使用する場合は、使用する前に型パラメーター名を宣言する必要があります。ジェネリック &lt;code&gt;largest&lt;/code&gt; 関数を定義するには、次のように、関数名とパラメーターリストの間に山かっこ（ &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; )で型名宣言を配置します。</target>
        </trans-unit>
        <trans-unit id="8036c669dac454067b908559831bbcc6af369344" translate="yes" xml:space="preserve">
          <source>When we use generic type parameters, we can specify a default concrete type for the generic type. This eliminates the need for implementors of the trait to specify a concrete type if the default type works. The syntax for specifying a default type for a generic type is &lt;code&gt;&amp;lt;PlaceholderType=ConcreteType&amp;gt;&lt;/code&gt; when declaring the generic type.</source>
          <target state="translated">ジェネリック型パラメーターを使用する場合、ジェネリック型のデフォルトの具象型を指定できます。これにより、デフォルトのタイプが機能する場合に、トレイトの実装者が具象タイプを指定する必要がなくなります。ジェネリック型を宣言する場合、ジェネリック型のデフォルトの型を指定するための構文は &lt;code&gt;&amp;lt;PlaceholderType=ConcreteType&amp;gt;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="d2fd3063d82737c85a4bd4560675bf8f567d4cb1" translate="yes" xml:space="preserve">
          <source>When we use trait objects, Rust must use dynamic dispatch. The compiler doesn&amp;rsquo;t know all the types that might be used with the code that is using trait objects, so it doesn&amp;rsquo;t know which method implemented on which type to call. Instead, at runtime, Rust uses the pointers inside the trait object to know which method to call. There is a runtime cost when this lookup happens that doesn&amp;rsquo;t occur with static dispatch. Dynamic dispatch also prevents the compiler from choosing to inline a method&amp;rsquo;s code, which in turn prevents some optimizations. However, we did get extra flexibility in the code that we wrote in Listing 17-5 and were able to support in Listing 17-9, so it&amp;rsquo;s a trade-off to consider.</source>
          <target state="translated">特性オブジェクトを使用する場合、Rustは動的ディスパッチを使用する必要があります。コンパイラーは、特性オブジェクトを使用しているコードで使用される可能性のあるすべてのタイプを知っているわけではないため、どのタイプにどのメソッドを呼び出すかがわかりません。代わりに、実行時にRustは特性オブジェクト内のポインターを使用して、呼び出すメソッドを認識します。このルックアップが発生すると、静的ディスパッチでは発生しないランタイムコストが発生します。また、動的ディスパッチにより、コンパイラーがメソッドのコードをインライン化することを選択できなくなり、最適化が妨げられます。ただし、リスト17-5で記述し、リスト17-9でサポートすることができたコードには追加の柔軟性があり、考慮すべきトレードオフです。</target>
        </trans-unit>
        <trans-unit id="5fae46f3aefc24b09d40cb2c031a63a93c19cc1f" translate="yes" xml:space="preserve">
          <source>When we wrote the library, we didn&amp;rsquo;t know that someone might add the &lt;code&gt;SelectBox&lt;/code&gt; type, but our &lt;code&gt;Screen&lt;/code&gt; implementation was able to operate on the new type and draw it because &lt;code&gt;SelectBox&lt;/code&gt; implements the &lt;code&gt;Draw&lt;/code&gt; trait, which means it implements the &lt;code&gt;draw&lt;/code&gt; method.</source>
          <target state="translated">私たちは、ライブラリを書いたとき、私たちはその誰かが追加される場合があります知りませんでした &lt;code&gt;SelectBox&lt;/code&gt; 種類を、私たちの &lt;code&gt;Screen&lt;/code&gt; 実装は、新しいタイプで動作しているため、それを描くことができた &lt;code&gt;SelectBox&lt;/code&gt; 実装 &lt;code&gt;Draw&lt;/code&gt; 、それが実装された手段、形質を &lt;code&gt;draw&lt;/code&gt; する方法を。</target>
        </trans-unit>
        <trans-unit id="1835312d71cbb49146dabf1e8972dadabbddcca1" translate="yes" xml:space="preserve">
          <source>When we&amp;rsquo;re defining this function, we don&amp;rsquo;t know the concrete values that will be passed into this function, so we don&amp;rsquo;t know whether the &lt;code&gt;if&lt;/code&gt; case or the &lt;code&gt;else&lt;/code&gt; case will execute. We also don&amp;rsquo;t know the concrete lifetimes of the references that will be passed in, so we can&amp;rsquo;t look at the scopes as we did in Listings 10-18 and 10-19 to determine whether the reference we return will always be valid. The borrow checker can&amp;rsquo;t determine this either, because it doesn&amp;rsquo;t know how the lifetimes of &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; relate to the lifetime of the return value. To fix this error, we&amp;rsquo;ll add generic lifetime parameters that define the relationship between the references so the borrow checker can perform its analysis.</source>
          <target state="translated">私たちは、この関数を定義しているとき、我々はかどうかわからないので、私たちは、この関数に渡される具体的な値が分からない &lt;code&gt;if&lt;/code&gt; ケースや &lt;code&gt;else&lt;/code&gt; ケースが実行されます。渡される参照の具体的な存続期間もわからないため、リスト10-18および10-19で行ったようにスコープを見て、返される参照が常に有効かどうかを判断することはできません。 。 &lt;code&gt;x&lt;/code&gt; と &lt;code&gt;y&lt;/code&gt; の存続期間が戻り値の存続期間とどのように関連しているかがわからないため、借用チェッカーもこれを判断できません。このエラーを修正するために、参照間の関係を定義する一般的なライフタイムパラメーターを追加して、借用チェッカーが分析を実行できるようにします。</target>
        </trans-unit>
        <trans-unit id="2b0ee241a22dde4f8299858560fbc384d292c571" translate="yes" xml:space="preserve">
          <source>When working with pinned structs, the question arises how one can access the fields of that struct in a method that takes just &lt;a href=&quot;struct.pin&quot;&gt;&lt;code&gt;Pin&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;&amp;amp;mut Struct&amp;gt;&lt;/code&gt;. The usual approach is to write helper methods (so called &lt;em&gt;projections&lt;/em&gt;) that turn &lt;a href=&quot;struct.pin&quot;&gt;&lt;code&gt;Pin&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;&amp;amp;mut Struct&amp;gt;&lt;/code&gt; into a reference to the field, but what type should that reference have? Is it &lt;a href=&quot;struct.pin&quot;&gt;&lt;code&gt;Pin&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;&amp;amp;mut Field&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;amp;mut Field&lt;/code&gt;? The same question arises with the fields of an &lt;code&gt;enum&lt;/code&gt;, and also when considering container/wrapper types such as &lt;a href=&quot;../vec/struct.vec&quot;&gt;&lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../boxed/struct.box&quot;&gt;&lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;../cell/struct.refcell&quot;&gt;&lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;. (This question applies to both mutable and shared references, we just use the more common case of mutable references here for illustration.)</source>
          <target state="translated">When working with pinned structs, the question arises how one can access the fields of that struct in a method that takes just &lt;a href=&quot;struct.pin&quot;&gt; &lt;code&gt;Pin&lt;/code&gt; &lt;/a&gt; &lt;code&gt;&amp;lt;&amp;amp;mut Struct&amp;gt;&lt;/code&gt; . The usual approach is to write helper methods (so called &lt;em&gt;projections&lt;/em&gt;) that turn &lt;a href=&quot;struct.pin&quot;&gt; &lt;code&gt;Pin&lt;/code&gt; &lt;/a&gt; &lt;code&gt;&amp;lt;&amp;amp;mut Struct&amp;gt;&lt;/code&gt; into a reference to the field, but what type should that reference have? Is it &lt;a href=&quot;struct.pin&quot;&gt; &lt;code&gt;Pin&lt;/code&gt; &lt;/a&gt; &lt;code&gt;&amp;lt;&amp;amp;mut Field&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;amp;mut Field&lt;/code&gt; ? The same question arises with the fields of an &lt;code&gt;enum&lt;/code&gt; , and also when considering container/wrapper types such as &lt;a href=&quot;../vec/struct.vec&quot;&gt; &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; &lt;/a&gt;, &lt;a href=&quot;../boxed/struct.box&quot;&gt; &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; &lt;/a&gt;, or &lt;a href=&quot;../cell/struct.refcell&quot;&gt; &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; &lt;/a&gt;. (This question applies to both mutable and shared references, we just use the more common case of mutable references here for illustration.)</target>
        </trans-unit>
        <trans-unit id="54afd1d4de630fedf720b910edfe13f2d8fe3dc8" translate="yes" xml:space="preserve">
          <source>When working with pinned structs, the question arises how one can access the fields of that struct in a method that takes just &lt;code&gt;Pin&amp;lt;&amp;amp;mut Struct&amp;gt;&lt;/code&gt;. The usual approach is to write helper methods (so called &lt;em&gt;projections&lt;/em&gt;) that turn &lt;code&gt;Pin&amp;lt;&amp;amp;mut Struct&amp;gt;&lt;/code&gt; into a reference to the field, but what type should that reference have? Is it &lt;code&gt;Pin&amp;lt;&amp;amp;mut Field&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;amp;mut Field&lt;/code&gt;? The same question arises with the fields of an &lt;code&gt;enum&lt;/code&gt;, and also when considering container/wrapper types such as &lt;a href=&quot;../vec/struct.vec&quot;&gt;&lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../boxed/struct.box&quot;&gt;&lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;../cell/struct.refcell&quot;&gt;&lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;. (This question applies to both mutable and shared references, we just use the more common case of mutable references here for illustration.)</source>
          <target state="translated">ピン留めされた構造体を使用する場合、 &lt;code&gt;Pin&amp;lt;&amp;amp;mut Struct&amp;gt;&lt;/code&gt; だけを受け取るメソッドでその構造体のフィールドにどのようにアクセスできるかという問題が発生します。通常のアプローチは、 &lt;code&gt;Pin&amp;lt;&amp;amp;mut Struct&amp;gt;&lt;/code&gt; をフィールドへの参照に変換するヘルパーメソッド（いわゆる&lt;em&gt;プロジェクション&lt;/em&gt;）を記述することですが、その参照にはどの型が必要ですか？それは &lt;code&gt;Pin&amp;lt;&amp;amp;mut Field&amp;gt;&lt;/code&gt; または &lt;code&gt;&amp;amp;mut Field&lt;/code&gt; ？ &lt;code&gt;enum&lt;/code&gt; のフィールドについても、&lt;a href=&quot;../vec/struct.vec&quot;&gt; &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../boxed/struct.box&quot;&gt; &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../cell/struct.refcell&quot;&gt; &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; &lt;/a&gt;などのコンテナー/ラッパータイプを検討するときにも同じ問題が発生します。。（この質問は、可変参照と共有参照の両方に適用されます。ここでは、説明のために、可変参照のより一般的なケースを使用します。）</target>
        </trans-unit>
        <trans-unit id="0c51f9b3e20caf1c1713245e1eb2bd51a6ddf835" translate="yes" xml:space="preserve">
          <source>When writing beyond the end of the file, the file is appropriately extended and the intermediate bytes are initialized with the value 0.</source>
          <target state="translated">ファイルの終端を越えて書き込む場合は、ファイルを適切に拡張し、中間バイトを値0で初期化する。</target>
        </trans-unit>
        <trans-unit id="debf85ed8f2982fd1ef982135cd5a37e3b932f44" translate="yes" xml:space="preserve">
          <source>When writing beyond the end of the file, the file is appropriately extended and the intermediate bytes are left uninitialized.</source>
          <target state="translated">ファイルの終端を越えて書き込む場合は、ファイルを適切に拡張し、中間バイトは初期化されないままにしておきます。</target>
        </trans-unit>
        <trans-unit id="4354c2cf3db4bc019d136bbb52f5ec5d3d5bdd0b" translate="yes" xml:space="preserve">
          <source>When writing code that calls many functions that return the &lt;a href=&quot;enum.result&quot;&gt;&lt;code&gt;Result&lt;/code&gt;&lt;/a&gt; type, the error handling can be tedious. The question mark operator, &lt;a href=&quot;../macro.try&quot;&gt;&lt;code&gt;?&lt;/code&gt;&lt;/a&gt;, hides some of the boilerplate of propagating errors up the call stack.</source>
          <target state="translated">&lt;a href=&quot;enum.result&quot;&gt; &lt;code&gt;Result&lt;/code&gt; &lt;/a&gt;型を返す多くの関数を呼び出すコードを記述する場合、エラー処理は面倒な場合があります。疑問符演算子、&lt;a href=&quot;../macro.try&quot;&gt; &lt;code&gt;?&lt;/code&gt; &lt;/a&gt;、伝播スタックのボイラープレートの一部を呼び出しスタックまで隠します。</target>
        </trans-unit>
        <trans-unit id="fd3f2291c33fd3018ecb6b461f1a771659ef7d7e" translate="yes" xml:space="preserve">
          <source>When writing code that calls many functions that return the &lt;a href=&quot;enum.result&quot;&gt;&lt;code&gt;Result&lt;/code&gt;&lt;/a&gt; type, the error handling can be tedious. The question mark operator, &lt;a href=&quot;../ops/trait.try&quot;&gt;&lt;code&gt;?&lt;/code&gt;&lt;/a&gt;, hides some of the boilerplate of propagating errors up the call stack.</source>
          <target state="translated">When writing code that calls many functions that return the &lt;a href=&quot;enum.result&quot;&gt; &lt;code&gt;Result&lt;/code&gt; &lt;/a&gt; type, the error handling can be tedious. The question mark operator, &lt;a href=&quot;../ops/trait.try&quot;&gt; &lt;code&gt;?&lt;/code&gt; &lt;/a&gt;, hides some of the boilerplate of propagating errors up the call stack.</target>
        </trans-unit>
        <trans-unit id="66253992d5df0f86fdc814938e97de3a70b258a2" translate="yes" xml:space="preserve">
          <source>When writing unit tests for a module, it's often a common idiom to have an immediate child of the module to-be-tested named &lt;code&gt;mod test&lt;/code&gt;. This module could access any items of the parent module through the second case, meaning that internal implementation details could also be seamlessly tested from the child module.</source>
          <target state="translated">モジュールの単体テストを作成する場合、テスト対象のモジュールの名前付き &lt;code&gt;mod test&lt;/code&gt; という直接の子を持つことはよくある慣習です。このモジュールは、2番目のケースを通じて親モジュールの任意の項目にアクセスできます。つまり、内部実装の詳細も子モジュールからシームレスにテストできます。</target>
        </trans-unit>
        <trans-unit id="6849dad47894c159da1bb308e92d26a3e924214c" translate="yes" xml:space="preserve">
          <source>When writing your own traits, &lt;code&gt;!&lt;/code&gt; should have an &lt;code&gt;impl&lt;/code&gt; whenever there is an obvious &lt;code&gt;impl&lt;/code&gt; which doesn't &lt;code&gt;panic!&lt;/code&gt;. As it turns out, most traits can have an &lt;code&gt;impl&lt;/code&gt; for &lt;code&gt;!&lt;/code&gt;. Take &lt;a href=&quot;fmt/trait.debug&quot;&gt;&lt;code&gt;Debug&lt;/code&gt;&lt;/a&gt; for example:</source>
          <target state="translated">あなた自身の特性を書くとき、 &lt;code&gt;!&lt;/code&gt; 持っていなければならない &lt;code&gt;impl&lt;/code&gt; 明らかがあるたびに &lt;code&gt;impl&lt;/code&gt; しない &lt;code&gt;panic!&lt;/code&gt; 。結局のところ、ほとんどの特徴は持つことができる &lt;code&gt;impl&lt;/code&gt; のために &lt;code&gt;!&lt;/code&gt; 。&lt;a href=&quot;fmt/trait.debug&quot;&gt; &lt;code&gt;Debug&lt;/code&gt; &lt;/a&gt;を例にとります：</target>
        </trans-unit>
        <trans-unit id="b06c46c776108f6df59bce40c78afdd8aa807784" translate="yes" xml:space="preserve">
          <source>When writing your own traits, &lt;code&gt;!&lt;/code&gt; should have an &lt;code&gt;impl&lt;/code&gt; whenever there is an obvious &lt;code&gt;impl&lt;/code&gt; which doesn't &lt;code&gt;panic!&lt;/code&gt;. The reason is that functions returning an &lt;code&gt;impl Trait&lt;/code&gt; where &lt;code&gt;!&lt;/code&gt; does not have an &lt;code&gt;impl&lt;/code&gt; of &lt;code&gt;Trait&lt;/code&gt; cannot diverge as their only possible code path. In other words, they can't return &lt;code&gt;!&lt;/code&gt; from every code path. As an example, this code doesn't compile:</source>
          <target state="translated">When writing your own traits, &lt;code&gt;!&lt;/code&gt; should have an &lt;code&gt;impl&lt;/code&gt; whenever there is an obvious &lt;code&gt;impl&lt;/code&gt; which doesn't &lt;code&gt;panic!&lt;/code&gt; . The reason is that functions returning an &lt;code&gt;impl Trait&lt;/code&gt; where &lt;code&gt;!&lt;/code&gt; does not have an &lt;code&gt;impl&lt;/code&gt; of &lt;code&gt;Trait&lt;/code&gt; cannot diverge as their only possible code path. In other words, they can't return &lt;code&gt;!&lt;/code&gt; from every code path. As an example, this code doesn't compile:</target>
        </trans-unit>
        <trans-unit id="376eed46fc5732c188b64191ceb100503469e764" translate="yes" xml:space="preserve">
          <source>When you &lt;em&gt;do&lt;/em&gt; want to update a crate, Cargo provides another command, &lt;code&gt;update&lt;/code&gt;, which will ignore the &lt;em&gt;Cargo.lock&lt;/em&gt; file and figure out all the latest versions that fit your specifications in &lt;em&gt;Cargo.toml&lt;/em&gt;. If that works, Cargo will write those versions to the &lt;em&gt;Cargo.lock&lt;/em&gt; file.</source>
          <target state="translated">あなたはとき&lt;em&gt;か&lt;/em&gt;クレートを更新したい、貨物は別のコマンド、提供 &lt;code&gt;update&lt;/code&gt; は無視されます、&lt;em&gt;Cargo.lockの&lt;/em&gt;中で、あなたの仕様に合わせて、すべての最新バージョンからファイルやフィギュアを&lt;em&gt;Cargo.tomlを&lt;/em&gt;。それが機能する場合、Cargoはそれらのバージョンを&lt;em&gt;Cargo.lock&lt;/em&gt;ファイルに書き込みます。</target>
        </trans-unit>
        <trans-unit id="1ba68f5d231df3408014c574fc5fb4dc7c5f7587" translate="yes" xml:space="preserve">
          <source>When you call a method with the &lt;code&gt;.foo()&lt;/code&gt; syntax, it&amp;rsquo;s often wise to introduce a newline and other whitespace to help break up long lines. We could have written this code as:</source>
          <target state="translated">&lt;code&gt;.foo()&lt;/code&gt; 構文を使用してメソッドを呼び出す場合、長い行を分割するのに役立つように、改行やその他の空白を導入することはしばしば賢明です。このコードは次のように書くこともできます。</target>
        </trans-unit>
        <trans-unit id="05246324bae5d78696c081ca3bb969c9b5f76aa9" translate="yes" xml:space="preserve">
          <source>When you create a closure, Rust infers which trait to use based on how the closure uses the values from the environment. All closures implement &lt;code&gt;FnOnce&lt;/code&gt; because they can all be called at least once. Closures that don&amp;rsquo;t move the captured variables also implement &lt;code&gt;FnMut&lt;/code&gt;, and closures that don&amp;rsquo;t need mutable access to the captured variables also implement &lt;code&gt;Fn&lt;/code&gt;. In Listing 13-12, the &lt;code&gt;equal_to_x&lt;/code&gt; closure borrows &lt;code&gt;x&lt;/code&gt; immutably (so &lt;code&gt;equal_to_x&lt;/code&gt; has the &lt;code&gt;Fn&lt;/code&gt; trait) because the body of the closure only needs to read the value in &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">クロージャーを作成すると、Rustはクロージャーが環境からの値をどのように使用するかに基づいて、使用する特性を推測します。すべてのクロージャーは、少なくとも1回は &lt;code&gt;FnOnce&lt;/code&gt; ことができるため、FnOnceを実装します。キャプチャーされた変数を移動しないクロージャーも &lt;code&gt;FnMut&lt;/code&gt; を実装し、キャプチャーされた変数への可変アクセスを必要としないクロージャーも &lt;code&gt;Fn&lt;/code&gt; を実装します。 &lt;code&gt;equal_to_x&lt;/code&gt; リスト13-12では、equal_to_xクロージャは不変に &lt;code&gt;x&lt;/code&gt; を借用し &lt;code&gt;Fn&lt;/code&gt; （したがって、 &lt;code&gt;equal_to_x&lt;/code&gt; にはFnトレイトがあります）。クロージャの本体は &lt;code&gt;x&lt;/code&gt; の値を読み取るだけでよいためです。</target>
        </trans-unit>
        <trans-unit id="4b225d4c2d0c02a52b23cd1b31dafb9bb8378985" translate="yes" xml:space="preserve">
          <source>When you have a large amount of data and you want to transfer ownership but ensure the data won&amp;rsquo;t be copied when you do so</source>
          <target state="translated">大量のデータがあり、所有権を譲渡したいが、その際にデータがコピーされないようにする場合</target>
        </trans-unit>
        <trans-unit id="1616d0bcec37e1d1974f0cec040ed2afa3965cea" translate="yes" xml:space="preserve">
          <source>When you have a type whose size can&amp;rsquo;t be known at compile time and you want to use a value of that type in a context that requires an exact size</source>
          <target state="translated">コンパイル時にサイズがわからないタイプがあり、正確なサイズが必要なコンテキストでそのタイプの値を使用したい場合</target>
        </trans-unit>
        <trans-unit id="faaa349bf2d53d10371fecd29ecbff47ff56b1b0" translate="yes" xml:space="preserve">
          <source>When you recognize situations in your code with multiple struct or enum definitions that differ only in the types of the values they hold, you can avoid duplication by using generic types instead.</source>
          <target state="translated">複数の構造体や列挙型の定義があり、それらが保持する値の型が異なるだけの状況をコードで認識した場合、代わりに汎用型を使用することで重複を避けることができます。</target>
        </trans-unit>
        <trans-unit id="679e3b066cfac92df42c0662cfeca1f3e83d745f" translate="yes" xml:space="preserve">
          <source>When you run &lt;code&gt;cargo check&lt;/code&gt; again, you&amp;rsquo;ll get a few more warnings, but it should succeed.</source>
          <target state="translated">もう一度 &lt;code&gt;cargo check&lt;/code&gt; を実行すると、さらにいくつかの警告が表示されますが、成功するはずです。</target>
        </trans-unit>
        <trans-unit id="6448bbefd235d50e1c725bdf06e891f730d7d66b" translate="yes" xml:space="preserve">
          <source>When you run it, you won&amp;rsquo;t get the path of the original executable, you&amp;rsquo;ll get the path of the hard link:</source>
          <target state="translated">これを実行すると、元の実行可能ファイルのパスは取得されず、ハードリンクのパスが取得されます。</target>
        </trans-unit>
        <trans-unit id="30a9b27f023546ce78e3fa8bcc73ea93a891ddb0" translate="yes" xml:space="preserve">
          <source>When you run multiple tests, by default they run in parallel using threads. This means the tests will finish running faster so you can get feedback quicker on whether or not your code is working. Because the tests are running at the same time, make sure your tests don&amp;rsquo;t depend on each other or on any shared state, including a shared environment, such as the current working directory or environment variables.</source>
          <target state="translated">複数のテストを実行すると、デフォルトではスレッドを使用して並行して実行されます。これは、テストの実行がより速く終了するため、コードが機能しているかどうかに関するフィードバックを迅速に取得できることを意味します。テストは同時に実行されるため、テストが相互に依存していないこと、または現在の作業ディレクトリや環境変数などの共有環境を含む共有状態に依存していないことを確認してください。</target>
        </trans-unit>
        <trans-unit id="bdd64a76c4764e34bb256afe510d04a4140ab743" translate="yes" xml:space="preserve">
          <source>When you run the code, your output should look something like this:</source>
          <target state="translated">コードを実行すると、出力は以下のようになります。</target>
        </trans-unit>
        <trans-unit id="56a080f28d7b938e415697722d1eaa5194296964" translate="yes" xml:space="preserve">
          <source>When you run the program, you&amp;rsquo;ll see something like this:</source>
          <target state="translated">プログラムを実行すると、次のようなものが表示されます。</target>
        </trans-unit>
        <trans-unit id="9d0f951f7def4bb9ddc934064d83b22842550653" translate="yes" xml:space="preserve">
          <source>When you run this code, it will compile but will display a warning:</source>
          <target state="translated">このコードを実行するとコンパイルされますが、警告が表示されます。</target>
        </trans-unit>
        <trans-unit id="cd11ee578beeab8bff18cf7df74988e81ef63b8d" translate="yes" xml:space="preserve">
          <source>When you run this program, the error you&amp;rsquo;ll get looks like this:</source>
          <target state="translated">このプログラムを実行すると、次のようなエラーが表示されます。</target>
        </trans-unit>
        <trans-unit id="88bf968fcfba3ccae7b190e45758bbe17d47d594" translate="yes" xml:space="preserve">
          <source>When you see a call to &lt;code&gt;clone&lt;/code&gt;, you know that some arbitrary code is being executed and that code may be expensive. It&amp;rsquo;s a visual indicator that something different is going on.</source>
          <target state="translated">&lt;code&gt;clone&lt;/code&gt; の呼び出しを見ると、いくつかの任意のコードが実行されており、そのコードが高価になる可能性があることがわかります。これは、何か別のことが起こっていることを視覚的に示すものです。</target>
        </trans-unit>
        <trans-unit id="dba00a225c49d7aad6a4c3e2fefc5b6ad717617e" translate="yes" xml:space="preserve">
          <source>When you understand ownership, you&amp;rsquo;ll have a solid foundation for understanding the features that make Rust unique. In this chapter, you&amp;rsquo;ll learn ownership by working through some examples that focus on a very common data structure: strings.</source>
          <target state="translated">所有権を理解すると、Rustをユニークにする機能を理解するための強固な基盤が得られます。この章では、非常に一般的なデータ構造である文字列に焦点を当てたいくつかの例を通して、所有権を学びます。</target>
        </trans-unit>
        <trans-unit id="fb9b6ed06b18947df730bd329065f971ebc43888" translate="yes" xml:space="preserve">
          <source>When you want a function to have multiple parameters, separate the parameter declarations with commas, like this:</source>
          <target state="translated">関数に複数のパラメータを持たせたい場合は、次のようにパラメータ宣言をカンマで区切ってください。</target>
        </trans-unit>
        <trans-unit id="7140942a9e83dd3630a3c0916a44b851e25bd0ab" translate="yes" xml:space="preserve">
          <source>When you want to own a value and you care only that it&amp;rsquo;s a type that implements a particular trait rather than being of a specific type</source>
          <target state="translated">値を所有したいが、それが特定の型ではなく特定の特性を実装する型であることだけを気にする場合</target>
        </trans-unit>
        <trans-unit id="51634274a504f9b0a7a634216e472b5bef4325d7" translate="yes" xml:space="preserve">
          <source>When you&amp;rsquo;re compiling in release mode with the &lt;code&gt;--release&lt;/code&gt; flag, Rust does &lt;em&gt;not&lt;/em&gt; include checks for integer overflow that cause panics. Instead, if overflow occurs, Rust performs &lt;em&gt;two&amp;rsquo;s complement wrapping&lt;/em&gt;. In short, values greater than the maximum value the type can hold &amp;ldquo;wrap around&amp;rdquo; to the minimum of the values the type can hold. In the case of a &lt;code&gt;u8&lt;/code&gt;, 256 becomes 0, 257 becomes 1, and so on. The program won&amp;rsquo;t panic, but the variable will have a value that probably isn&amp;rsquo;t what you were expecting it to have. Relying on integer overflow&amp;rsquo;s wrapping behavior is considered an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a38101ccd42a1c4f79b06b155e4e46b8f79f9a7b" translate="yes" xml:space="preserve">
          <source>When you&amp;rsquo;re compiling in release mode with the &lt;code&gt;--release&lt;/code&gt; flag, Rust does &lt;em&gt;not&lt;/em&gt; include checks for integer overflow that cause panics. Instead, if overflow occurs, Rust performs &lt;em&gt;two&amp;rsquo;s complement wrapping&lt;/em&gt;. In short, values greater than the maximum value the type can hold &amp;ldquo;wrap around&amp;rdquo; to the minimum of the values the type can hold. In the case of a &lt;code&gt;u8&lt;/code&gt;, 256 becomes 0, 257 becomes 1, and so on. The program won&amp;rsquo;t panic, but the variable will have a value that probably isn&amp;rsquo;t what you were expecting it to have. Relying on integer overflow&amp;rsquo;s wrapping behavior is considered an error. If you want to wrap explicitly, you can use the standard library type &lt;a href=&quot;../std/num/struct.wrapping&quot;&gt;&lt;code&gt;Wrapping&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;--release&lt;/code&gt; フラグを使用してリリースモードでコンパイルしている場合、Rustにはパニックを引き起こす整数オーバーフローのチェック&lt;em&gt;は&lt;/em&gt;含まれませ&lt;em&gt;ん&lt;/em&gt;。代わりに、オーバーフローが発生した場合、Rustは&lt;em&gt;2の補数のラッピングを&lt;/em&gt;実行します。つまり、タイプが保持できる最大値よりも大きい値は、タイプが保持できる最小値まで「折り返し」ます。 &lt;code&gt;u8&lt;/code&gt; の場合、256は0になり、257は1になります。プログラムはパニックに陥ることはありませんが、変数の値はおそらく期待していたものとは異なります。整数オーバーフローのラップ動作に依存すると、エラーと見なされます。明示的にラップする場合は、標準ライブラリタイプの&lt;a href=&quot;../std/num/struct.wrapping&quot;&gt; &lt;code&gt;Wrapping&lt;/code&gt; を&lt;/a&gt;使用できます。</target>
        </trans-unit>
        <trans-unit id="cf6294d1d4938dc2164807d070a9e5a24c528b0b" translate="yes" xml:space="preserve">
          <source>When you&amp;rsquo;re done with the data that the mutex guards, you must unlock the data so other threads can acquire the lock.</source>
          <target state="translated">mutexが保護するデータを使い終わったら、他のスレッドがロックを取得できるようにデータをロック解除する必要があります。</target>
        </trans-unit>
        <trans-unit id="87ed8d0c79155dbc381301582c028a0bc87a94b1" translate="yes" xml:space="preserve">
          <source>When you&amp;rsquo;re ready to move on, we&amp;rsquo;ll talk about a concept in Rust that &lt;em&gt;doesn&amp;rsquo;t&lt;/em&gt; commonly exist in other programming languages: ownership.</source>
          <target state="translated">次に進む準備ができたら、他のプログラミング言語に&lt;em&gt;は&lt;/em&gt;一般的に存在&lt;em&gt;しない&lt;/em&gt; Rustの概念である所有権について説明します。</target>
        </trans-unit>
        <trans-unit id="338c49418a81c4fe8cdbaa3398a7f70c772eed82" translate="yes" xml:space="preserve">
          <source>When you&amp;rsquo;re writing a function whose implementation calls something that might fail, instead of handling the error within this function, you can return the error to the calling code so that it can decide what to do. This is known as &lt;em&gt;propagating&lt;/em&gt; the error and gives more control to the calling code, where there might be more information or logic that dictates how the error should be handled than what you have available in the context of your code.</source>
          <target state="translated">実装が失敗する可能性のあるものを呼び出す関数を作成している場合、この関数内のエラーを処理する代わりに、呼び出し元のコードにエラーを返し、何をすべきかを決定できます。これはエラーの&lt;em&gt;伝播&lt;/em&gt;と呼ばれ、呼び出しコードにより多くの制御を提供します。コードのコンテキストで利用できるものよりも、エラーの処理方法を指示するより多くの情報またはロジックが存在する場合があります。</target>
        </trans-unit>
        <trans-unit id="52116b6d188a2650ef7d8367c1d460637ef198b9" translate="yes" xml:space="preserve">
          <source>When you&amp;rsquo;re writing a program, if you don&amp;rsquo;t know the exhaustive set of types the program will get at runtime to store in a vector, the enum technique won&amp;rsquo;t work. Instead, you can use a trait object, which we&amp;rsquo;ll cover in Chapter 17.</source>
          <target state="translated">プログラムを作成しているときに、実行時にプログラムがベクトルに格納する型の完全なセットがわからない場合、列挙型テクニックは機能しません。代わりに、第17章で説明する特性オブジェクトを使用できます。</target>
        </trans-unit>
        <trans-unit id="a6c702a723f263e7d6b8ef006b195ad04de8148a" translate="yes" xml:space="preserve">
          <source>When you&amp;rsquo;re writing an example to illustrate some concept, having robust error-handling code in the example as well can make the example less clear. In examples, it&amp;rsquo;s understood that a call to a method like &lt;code&gt;unwrap&lt;/code&gt; that could panic is meant as a placeholder for the way you&amp;rsquo;d want your application to handle errors, which can differ based on what the rest of your code is doing.</source>
          <target state="translated">いくつかの概念を説明するために例を書いているとき、例にも堅牢なエラー処理コードがあると、例が不明確になる可能性があります。例では、パニックに陥る可能性のある &lt;code&gt;unwrap&lt;/code&gt; などのメソッドの呼び出しは、アプリケーションでエラーを処理する方法のプレースホルダーとして意図されていることが理解されています。</target>
        </trans-unit>
        <trans-unit id="c42c6bb649d897cae512ccb086d5d0b9efa0b2d4" translate="yes" xml:space="preserve">
          <source>When you&amp;rsquo;ve made changes to your crate and are ready to release a new version, you change the &lt;code&gt;version&lt;/code&gt; value specified in your &lt;em&gt;Cargo.toml&lt;/em&gt; file and republish. Use the &lt;a href=&quot;http://semver.org/&quot;&gt;Semantic Versioning rules&lt;/a&gt; to decide what an appropriate next version number is based on the kinds of changes you&amp;rsquo;ve made. Then run &lt;code&gt;cargo publish&lt;/code&gt; to upload the new version.</source>
          <target state="translated">クレートに変更を加え、新しいバージョンをリリースする準備ができたら、&lt;em&gt;Cargo.toml&lt;/em&gt;ファイルで指定された &lt;code&gt;version&lt;/code&gt; 値を変更して再公開します。&lt;a href=&quot;http://semver.org/&quot;&gt;セマンティックバージョニングルール&lt;/a&gt;を使用して、行った変更の種類に基づいて適切な次のバージョン番号を決定します。次に、 &lt;code&gt;cargo publish&lt;/code&gt; を実行して新しいバージョンをアップロードします。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a63fa0940baafe694284e32babae3f74d6ff198c" translate="yes" xml:space="preserve">
          <source>When your &lt;code&gt;Iterator&lt;/code&gt; implements &lt;code&gt;TrustedLen&lt;/code&gt; and is of an exact size, a single allocation will be made for the &lt;code&gt;Arc&amp;lt;[T]&amp;gt;&lt;/code&gt;. For example:</source>
          <target state="translated">When your &lt;code&gt;Iterator&lt;/code&gt; implements &lt;code&gt;TrustedLen&lt;/code&gt; and is of an exact size, a single allocation will be made for the &lt;code&gt;Arc&amp;lt;[T]&amp;gt;&lt;/code&gt; . For example:</target>
        </trans-unit>
        <trans-unit id="10a2affd429f9e55f7202252260760e859abffb5" translate="yes" xml:space="preserve">
          <source>When your &lt;code&gt;Iterator&lt;/code&gt; implements &lt;code&gt;TrustedLen&lt;/code&gt; and is of an exact size, a single allocation will be made for the &lt;code&gt;Rc&amp;lt;[T]&amp;gt;&lt;/code&gt;. For example:</source>
          <target state="translated">When your &lt;code&gt;Iterator&lt;/code&gt; implements &lt;code&gt;TrustedLen&lt;/code&gt; and is of an exact size, a single allocation will be made for the &lt;code&gt;Rc&amp;lt;[T]&amp;gt;&lt;/code&gt; . For example:</target>
        </trans-unit>
        <trans-unit id="839440b70c5a7ad1d7e470fedb75657493aedb6e" translate="yes" xml:space="preserve">
          <source>When your code calls a function, the values passed into the function (including, potentially, pointers to data on the heap) and the function&amp;rsquo;s local variables get pushed onto the stack. When the function is over, those values get popped off the stack.</source>
          <target state="translated">コードが関数を呼び出すと、関数に渡された値（ヒープ上のデータへのポインターを含む可能性があります）と関数のローカル変数がスタックにプッシュされます。関数が終了すると、それらの値はスタックからポップされます。</target>
        </trans-unit>
        <trans-unit id="7fc4ed82b7b946f127718773ea3ac4f397f59537" translate="yes" xml:space="preserve">
          <source>When your code performs operations on values, your code should verify the values are valid first and panic if the values aren&amp;rsquo;t valid. This is mostly for safety reasons: attempting to operate on invalid data can expose your code to vulnerabilities. This is the main reason the standard library will call &lt;code&gt;panic!&lt;/code&gt; if you attempt an out-of-bounds memory access: trying to access memory that doesn&amp;rsquo;t belong to the current data structure is a common security problem. Functions often have &lt;em&gt;contracts&lt;/em&gt;: their behavior is only guaranteed if the inputs meet particular requirements. Panicking when the contract is violated makes sense because a contract violation always indicates a caller-side bug and it&amp;rsquo;s not a kind of error you want the calling code to have to explicitly handle. In fact, there&amp;rsquo;s no reasonable way for calling code to recover; the calling &lt;em&gt;programmers&lt;/em&gt; need to fix the code. Contracts for a function, especially when a violation will cause a panic, should be explained in the API documentation for the function.</source>
          <target state="translated">コードが値に対して操作を実行するとき、コードは最初に値が有効であることを確認し、値が有効でない場合はパニックを起こす必要があります。これは主に安全上の理由によるものです。無効なデータを操作しようとすると、コードが脆弱性にさらされる可能性があります。これが標準ライブラリが &lt;code&gt;panic!&lt;/code&gt; を呼ぶ主な理由です！範囲外のメモリアクセスを試みる場合：現在のデータ構造に属していないメモリにアクセスしようとすることは、一般的なセキュリティ問題です。機能には&lt;em&gt;契約&lt;/em&gt;があることが多い&lt;em&gt;&lt;/em&gt;：それらの動作は、入力が特定の要件を満たしている場合にのみ保証されます。コントラクトに違反したときにパニックすることは理にかなっています。コントラクト違反は常に呼び出し側のバグを示し、呼び出し側のコードで明示的に処理する必要がある種類のエラーではないためです。実際、コードを呼び出して回復するための合理的な方法はありません。呼び出し元の&lt;em&gt;プログラマ&lt;/em&gt;はコードを修正する必要があります。関数のコントラクト、特に違反によってパニックが発生する場合は、関数のAPIドキュメントで説明する必要があります。</target>
        </trans-unit>
        <trans-unit id="89c680949e7cd958d9cc4977874667c68a138ea6" translate="yes" xml:space="preserve">
          <source>When your project is finally ready for release, you can use &lt;code&gt;cargo build --release&lt;/code&gt; to compile it with optimizations. This command will create an executable in &lt;em&gt;target/release&lt;/em&gt; instead of &lt;em&gt;target/debug&lt;/em&gt;. The optimizations make your Rust code run faster, but turning them on lengthens the time it takes for your program to compile. This is why there are two different profiles: one for development, when you want to rebuild quickly and often, and another for building the final program you&amp;rsquo;ll give to a user that won&amp;rsquo;t be rebuilt repeatedly and that will run as fast as possible. If you&amp;rsquo;re benchmarking your code&amp;rsquo;s running time, be sure to run &lt;code&gt;cargo build --release&lt;/code&gt; and benchmark with the executable in &lt;em&gt;target/release&lt;/em&gt;.</source>
          <target state="translated">プロジェクトが最終的にリリースの準備ができたら、 &lt;code&gt;cargo build --release&lt;/code&gt; を使用して最適化してコンパイルできます。このコマンドは、&lt;em&gt;target / debug&lt;/em&gt;ではなく&lt;em&gt;target / release&lt;/em&gt;に実行可能ファイルを作成します。最適化によりRustコードの実行が速くなりますが、最適化を有効にすると、プログラムのコンパイルにかかる時間が長くなります。これが、2つの異なるプロファイルがある理由です。1つは開発用で、迅速かつ頻繁に再ビルドする場合と、もう1つは、繰り返し再ビルドされることなくユーザーと同じ速度で実行される最終プログラムをビルドするためです。可能。コードの実行時間をベンチマークする場合は、&lt;em&gt;target / releaseの&lt;/em&gt;実行可能ファイルを使用して、 &lt;code&gt;cargo build --release&lt;/code&gt; とベンチマークを実行してください。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a3d1e3a329799ed0876a4d1ad716f19e4a9cec94" translate="yes" xml:space="preserve">
          <source>Whenever a temporary is created, it is automatically dropped (freed) according to fixed rules. Ordinarily, the temporary is dropped at the end of the enclosing statement -- in this case, after the &lt;code&gt;let&lt;/code&gt;. This is illustrated in the example above by showing that &lt;code&gt;tmp&lt;/code&gt; would be freed as we exit the block.</source>
          <target state="translated">一時ファイルが作成されると、固定されたルールに従って一時ファイルが自動的に削除（解放）されます。通常、一時ファイルは囲んでいるステートメントの最後にドロップ &lt;code&gt;let&lt;/code&gt; ます。この場合、letの後です。上記の例では、ブロックを終了すると &lt;code&gt;tmp&lt;/code&gt; が解放されることを示しています。</target>
        </trans-unit>
        <trans-unit id="0d66101f5b82c22f64225217f832b8e7af03aba9" translate="yes" xml:space="preserve">
          <source>Whenever possible, it is preferable to use &lt;a href=&quot;struct.manuallydrop#method.into_inner&quot;&gt;&lt;code&gt;into_inner&lt;/code&gt;&lt;/a&gt; instead, which prevents duplicating the content of the &lt;code&gt;ManuallyDrop&amp;lt;T&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">Whenever possible, it is preferable to use &lt;a href=&quot;struct.manuallydrop#method.into_inner&quot;&gt; &lt;code&gt;into_inner&lt;/code&gt; &lt;/a&gt; instead, which prevents duplicating the content of the &lt;code&gt;ManuallyDrop&amp;lt;T&amp;gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9e3c7f91ce843a180fc6f430d195fed72f860109" translate="yes" xml:space="preserve">
          <source>Whenever possible, it is preferable to use &lt;a href=&quot;union.maybeuninit#method.assume_init&quot;&gt;&lt;code&gt;assume_init&lt;/code&gt;&lt;/a&gt; instead, which prevents duplicating the content of the &lt;code&gt;MaybeUninit&amp;lt;T&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">Whenever possible, it is preferable to use &lt;a href=&quot;union.maybeuninit#method.assume_init&quot;&gt; &lt;code&gt;assume_init&lt;/code&gt; &lt;/a&gt; instead, which prevents duplicating the content of the &lt;code&gt;MaybeUninit&amp;lt;T&amp;gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="eed4432a187ec3056ddd9bd907b999948f00874c" translate="yes" xml:space="preserve">
          <source>Whenever possible, it is preferrable to use &lt;a href=&quot;#method.assume_init&quot;&gt;&lt;code&gt;assume_init&lt;/code&gt;&lt;/a&gt; instead, which prevents duplicating the content of the &lt;code&gt;MaybeUninit&amp;lt;T&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">可能な限り、代わりに&lt;a href=&quot;#method.assume_init&quot;&gt; &lt;code&gt;assume_init&lt;/code&gt; &lt;/a&gt;を使用することをお勧めします。これにより、 &lt;code&gt;MaybeUninit&amp;lt;T&amp;gt;&lt;/code&gt; 内容が重複するのを防ぐことができます。</target>
        </trans-unit>
        <trans-unit id="a4de23a7f6719a7ba57b078ca4ff7e8250001b36" translate="yes" xml:space="preserve">
          <source>Where clauses</source>
          <target state="translated">句</target>
        </trans-unit>
        <trans-unit id="9b0b082cc3c369bcfe0d32cc803440f9644c559a" translate="yes" xml:space="preserve">
          <source>Where&amp;rsquo;s the &lt;code id=&quot;wheres-the---operator&quot;&gt;-&amp;gt;&lt;/code&gt; Operator?</source>
          <target state="translated">&lt;code id=&quot;wheres-the---operator&quot;&gt;-&amp;gt;&lt;/code&gt; 演算子はどこにありますか？</target>
        </trans-unit>
        <trans-unit id="d4ea105a6df2620f7975d097e826dec6963287a4" translate="yes" xml:space="preserve">
          <source>Whether or not to evaluate the sub-expressions when evaluating the expression</source>
          <target state="translated">式を評価する際に副式を評価するかどうか</target>
        </trans-unit>
        <trans-unit id="7441400ac9aa4ede2210143836e6a213067deff4" translate="yes" xml:space="preserve">
          <source>Whew! Now you have some Rust features in your toolbox that you won&amp;rsquo;t use often, but you&amp;rsquo;ll know they&amp;rsquo;re available in very particular circumstances. We&amp;rsquo;ve introduced several complex topics so that when you encounter them in error message suggestions or in other peoples&amp;rsquo; code, you&amp;rsquo;ll be able to recognize these concepts and syntax. Use this chapter as a reference to guide you to solutions.</source>
          <target state="translated">ふew！これで、あまり使用しないRust機能がツールボックスにいくつかありますが、非常に特殊な状況で使用できることがわかります。エラーメッセージの提案や他の人のコードで遭遇したときに、これらの概念と構文を認識できるように、いくつかの複雑なトピックを紹介しました。この章を参考にして、ソリューションを紹介してください。</target>
        </trans-unit>
        <trans-unit id="ecbdd73494930b04d58d59a497ec54128fcf95a8" translate="yes" xml:space="preserve">
          <source>Whew! That was a lot of work, but we&amp;rsquo;ve set ourselves up for success in the future. Now it&amp;rsquo;s much easier to handle errors, and we&amp;rsquo;ve made the code more modular. Almost all of our work will be done in &lt;em&gt;src/lib.rs&lt;/em&gt; from here on out.</source>
          <target state="translated">ふew！それは大変な作業でしたが、私たちは将来の成功に向けて準備を整えました。エラーの処理がはるかに簡単になり、コードがよりモジュール化されました。ほとんどすべての作業は、&lt;em&gt;これからsrc / lib.rs&lt;/em&gt;で行われます。</target>
        </trans-unit>
        <trans-unit id="357b219e220334335cb6c179ad0fbd5be62e5879" translate="yes" xml:space="preserve">
          <source>Whew! We &lt;em&gt;also&lt;/em&gt; cannot have a mutable reference while we have an immutable one. Users of an immutable reference don&amp;rsquo;t expect the values to suddenly change out from under them! However, multiple immutable references are okay because no one who is just reading the data has the ability to affect anyone else&amp;rsquo;s reading of the data.</source>
          <target state="translated">ふew！我々は&lt;em&gt;また&lt;/em&gt;、我々は不変のものを持っていながら、可変の参照を持つことはできません。不変参照のユーザーは、値がその下から突然変化することを期待していません。ただし、データを読み取っているだけの人は、他の人のデータの読み取りに影響を与えることができないため、複数の不変参照は問題ありません。</target>
        </trans-unit>
        <trans-unit id="c4abab176ad04758c7995b5bf1a8ebbc48d27dab" translate="yes" xml:space="preserve">
          <source>Which configuration options are set is determined statically during the compilation of the crate. Certain options are &lt;em&gt;compiler-set&lt;/em&gt; based on data about the compilation. Other options are &lt;em&gt;arbitrarily-set&lt;/em&gt;, set based on input passed to the compiler outside of the code. It is not possible to set a configuration option from within the source code of the crate being compiled.</source>
          <target state="translated">設定される構成オプションは、クレートのコンパイル中に静的に決定されます。特定のオプションは、コンパイルに関するデータに基づいて&lt;em&gt;コンパイラーセット&lt;/em&gt;です。その他のオプションは&lt;em&gt;任意に設定され&lt;/em&gt;、コードの外部でコンパイラに渡される入力に基づいて設定されます。コンパイルされているクレートのソースコード内から構成オプションを設定することはできません。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
