<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="rust">
    <body>
      <group id="rust">
        <trans-unit id="6f91f22939adae86de60c33d3fdb16972e0fb724" translate="yes" xml:space="preserve">
          <source>Accessing data in the heap is slower than accessing data on the stack because you have to follow a pointer to get there. Contemporary processors are faster if they jump around less in memory. Continuing the analogy, consider a server at a restaurant taking orders from many tables. It&amp;rsquo;s most efficient to get all the orders at one table before moving on to the next table. Taking an order from table A, then an order from table B, then one from A again, and then one from B again would be a much slower process. By the same token, a processor can do its job better if it works on data that&amp;rsquo;s close to other data (as it is on the stack) rather than farther away (as it can be on the heap). Allocating a large amount of space on the heap can also take time.</source>
          <target state="translated">ヒープ内のデータへのアクセスは、スタック上のデータへのアクセスよりも遅くなります。これは、ポインタをたどってそこに到達する必要があるためです。最近のプロセッサは、メモリ内のジャンプが少ないほど高速です。類推を続けて、多くのテーブルから注文を受けるレストランのサーバーを考えてみましょう。次のテーブルに進む前に、1つのテーブルですべての注文を取得するのが最も効率的です。テーブルAからの注文、テーブルBからの注文、次にAからの注文、そしてBからの注文は、処理が非常に遅くなります。同様に、プロセッサは、（ヒープ上にある可能性があるため）遠くにあるのではなく、（スタック上にあるように）他のデータに近いデータを処理する場合に、より適切に機能します。ヒープに大量のスペースを割り当てると、時間がかかる場合があります。</target>
        </trans-unit>
        <trans-unit id="f239f31c4b24ce084fa39af1811c8d4fc4e10b36" translate="yes" xml:space="preserve">
          <source>Accessing non-&lt;a href=&quot;keyword.mut&quot;&gt;&lt;code&gt;mut&lt;/code&gt;&lt;/a&gt;&lt;code&gt;static&lt;/code&gt; items is considered safe, but some restrictions apply. Most notably, the type of a &lt;code&gt;static&lt;/code&gt; value needs to implement the &lt;a href=&quot;marker/trait.sync&quot;&gt;&lt;code&gt;Sync&lt;/code&gt;&lt;/a&gt; trait, ruling out interior mutability containers like &lt;a href=&quot;cell/struct.refcell&quot;&gt;&lt;code&gt;RefCell&lt;/code&gt;&lt;/a&gt;. See the &lt;a href=&quot;../reference/items/static-items&quot;&gt;Reference&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;a href=&quot;keyword.mut&quot;&gt; &lt;code&gt;mut&lt;/code&gt; &lt;/a&gt; &lt;code&gt;static&lt;/code&gt; アイテムへのアクセスは安全と見なされますが、いくつかの制限が適用されます。最も注目すべきは、 &lt;code&gt;static&lt;/code&gt; 値のタイプは&lt;a href=&quot;marker/trait.sync&quot;&gt; &lt;code&gt;Sync&lt;/code&gt; &lt;/a&gt;トレイトを実装する必要があり、&lt;a href=&quot;cell/struct.refcell&quot;&gt; &lt;code&gt;RefCell&lt;/code&gt; の&lt;/a&gt;ような内部の可変性コンテナーを除外することです。詳細については、&lt;a href=&quot;../reference/items/static-items&quot;&gt;リファレンス&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="c20e5fc2ccd1b37aea7b882c463d596e55833b83" translate="yes" xml:space="preserve">
          <source>Accessing or Modifying a Mutable Static Variable</source>
          <target state="translated">Mutable 静的変数へのアクセスと変更</target>
        </trans-unit>
        <trans-unit id="f13080b643bf72eee286858a8d7c3ab06b544915" translate="yes" xml:space="preserve">
          <source>Accessing unaligned fields directly with e.g. &lt;code&gt;packed.unaligned&lt;/code&gt; is safe however.</source>
          <target state="translated">ただし、 &lt;code&gt;packed.unaligned&lt;/code&gt; などを使用して整列されていないフィールドに直接アクセスすることは安全です。</target>
        </trans-unit>
        <trans-unit id="12a3a4f498b28cbec01c44aacf0dc5e3a1b828ef" translate="yes" xml:space="preserve">
          <source>Accuracy</source>
          <target state="translated">Accuracy</target>
        </trans-unit>
        <trans-unit id="edc1ea5ed2dafd896f3493beb6ccad4cc0bfdeb7" translate="yes" xml:space="preserve">
          <source>Accurately documenting your packages will help other users know how and when to use them, so it&amp;rsquo;s worth investing the time to write documentation. In Chapter 3, we discussed how to comment Rust code using two slashes, &lt;code&gt;//&lt;/code&gt;. Rust also has a particular kind of comment for documentation, known conveniently as a &lt;em&gt;documentation comment&lt;/em&gt;, that will generate HTML documentation. The HTML displays the contents of documentation comments for public API items intended for programmers interested in knowing how to &lt;em&gt;use&lt;/em&gt; your crate as opposed to how your crate is &lt;em&gt;implemented&lt;/em&gt;.</source>
          <target state="translated">パッケージを正確に文書化すると、他のユーザーがパッケージをいつどのように使用するかを知るのに役立ちます。そのため、文書を書く時間を費やす価値があります。第3章では、2つのスラッシュ &lt;code&gt;//&lt;/code&gt; を使用してRustコードにコメントを付ける方法について説明しました。錆としても便利知らドキュメンテーションコメントの特定の種類、持っている&lt;em&gt;ドキュメンテーションコメント&lt;/em&gt; HTMLドキュメントを生成します。HTMLには、クレートの&lt;em&gt;実装&lt;/em&gt;方法ではなく、クレートの&lt;em&gt;使用&lt;/em&gt;方法を知りたいプログラマー向けのパブリックAPIアイテムのドキュメントコメントの内容が表示されます。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e550137a8ad5bf001d7b174a7d5416351ea9a342" translate="yes" xml:space="preserve">
          <source>AcqRel</source>
          <target state="translated">AcqRel</target>
        </trans-unit>
        <trans-unit id="9d0903a32f177d84829c27dd98a7a4772b87dcc5" translate="yes" xml:space="preserve">
          <source>Acquire</source>
          <target state="translated">Acquire</target>
        </trans-unit>
        <trans-unit id="6568c1be017add88e3d012e02f41ac58f3e66045" translate="yes" xml:space="preserve">
          <source>Acquire - a barrier for acquiring a lock. Subsequent reads and writes take place after the barrier.</source>
          <target state="translated">Acquire-ロックを取得するためのバリア。それ以降の読み書きは、バリアの後で行われます。</target>
        </trans-unit>
        <trans-unit id="af0f8ed1129c9ddf2134ed1c81b67a9bcb444f5a" translate="yes" xml:space="preserve">
          <source>Acquires a mutable reference to the owned form of the data.</source>
          <target state="translated">データの所有形態への変異可能な参照を取得します。</target>
        </trans-unit>
        <trans-unit id="ff3bc67bc303cd10ada41c07bb7edfd939dc9318" translate="yes" xml:space="preserve">
          <source>Acquires a mutex, blocking the current thread until it is able to do so.</source>
          <target state="translated">ミューテックスを取得し、現在のスレッドをブロックします。</target>
        </trans-unit>
        <trans-unit id="220a887115abad65ad7317817bfb97307bde3f84" translate="yes" xml:space="preserve">
          <source>Acquires a reference to the value in this TLS key.</source>
          <target state="translated">このTLSキーの値への参照を取得します。</target>
        </trans-unit>
        <trans-unit id="b36ce9a1808b77b91f2783ae64622ebad2a9cac9" translate="yes" xml:space="preserve">
          <source>Acquires the underlying &lt;code&gt;*mut&lt;/code&gt; pointer.</source>
          <target state="translated">基礎となる &lt;code&gt;*mut&lt;/code&gt; ポインタを取得します。</target>
        </trans-unit>
        <trans-unit id="d4158950a66bbaeb08dff05a2933261e57fba1be" translate="yes" xml:space="preserve">
          <source>Acquiring the path of the current executable is a platform-specific operation that can fail for a good number of reasons. Some errors can include, but not be limited to, filesystem operations failing or general syscall failures.</source>
          <target state="translated">現在の実行ファイルのパスを取得することは、プラットフォーム固有の操作であり、多くの理由で失敗する可能性があります。いくつかのエラーには、ファイルシステム操作の失敗や一般的なシステムコールの失敗が含まれますが、これらに限定されるものではありません。</target>
        </trans-unit>
        <trans-unit id="6d8f12c840c97a885d954c4ab3f89cfe39b2655d" translate="yes" xml:space="preserve">
          <source>Active and inert attributes</source>
          <target state="translated">アクティブ属性と不活性属性</target>
        </trans-unit>
        <trans-unit id="e07a4acdd5cdd3ab645fd0d90270662d13ac1718" translate="yes" xml:space="preserve">
          <source>Adapters</source>
          <target state="translated">Adapters</target>
        </trans-unit>
        <trans-unit id="876182ad9012a6c08f789f1f68ad82ee5e8c99b7" translate="yes" xml:space="preserve">
          <source>Adaptor to chain together two readers.</source>
          <target state="translated">2台のリーダーを連結するためのアダプター。</target>
        </trans-unit>
        <trans-unit id="61cc55aa0453184734c3fa0b621eda6fa874bd83" translate="yes" xml:space="preserve">
          <source>Add</source>
          <target state="translated">Add</target>
        </trans-unit>
        <trans-unit id="5377ba24487df148115875083e9ad3100b466293" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;'static&lt;/code&gt; requirement to fix them:</source>
          <target state="translated">それらを修正するため &lt;code&gt;'static&lt;/code&gt; 要件を追加します。</target>
        </trans-unit>
        <trans-unit id="ca240252f7070cde72a7b776f50be32f04f2fc0d" translate="yes" xml:space="preserve">
          <source>Add a &lt;code&gt;reject&lt;/code&gt; method that changes the post&amp;rsquo;s state from &lt;code&gt;PendingReview&lt;/code&gt; back to &lt;code&gt;Draft&lt;/code&gt;.</source>
          <target state="translated">投稿の状態を &lt;code&gt;PendingReview&lt;/code&gt; から &lt;code&gt;Draft&lt;/code&gt; に戻す &lt;code&gt;reject&lt;/code&gt; メソッドを追加します。</target>
        </trans-unit>
        <trans-unit id="a0a1e3ef1e8493d789dbbf3d73ecb2a795cba8db" translate="yes" xml:space="preserve">
          <source>Add a description that is just a sentence or two, because it will appear with your crate in search results. For the &lt;code&gt;license&lt;/code&gt; field, you need to give a &lt;em&gt;license identifier value&lt;/em&gt;. The &lt;a href=&quot;http://spdx.org/licenses/&quot;&gt;Linux Foundation&amp;rsquo;s Software Package Data Exchange (SPDX)&lt;/a&gt; lists the identifiers you can use for this value. For example, to specify that you&amp;rsquo;ve licensed your crate using the MIT License, add the &lt;code&gt;MIT&lt;/code&gt; identifier:</source>
          <target state="translated">検索結果にクレートとともに表示されるため、1〜2文の説明を追加してください。以下のために &lt;code&gt;license&lt;/code&gt; フィールド、あなたが与える必要がある&lt;em&gt;ライセンス識別子値を&lt;/em&gt;。&lt;a href=&quot;http://spdx.org/licenses/&quot;&gt;Linux Foundationのソフトウェアパッケージのデータ交換（SPDX）は、&lt;/a&gt;この値に使用できる識別子を示しています。たとえば、MITライセンスを使用してクレートにライセンスを付与したことを指定するには、 &lt;code&gt;MIT&lt;/code&gt; 識別子を追加します。</target>
        </trans-unit>
        <trans-unit id="da701486edb0442db89b592a10ae443b6f2f41f8" translate="yes" xml:space="preserve">
          <source>Add a description that is just a sentence or two, because it will appear with your crate in search results. For the &lt;code&gt;license&lt;/code&gt; field, you need to give a &lt;em&gt;license identifier value&lt;/em&gt;. The &lt;a href=&quot;https://spdx.org/licenses/&quot;&gt;Linux Foundation&amp;rsquo;s Software Package Data Exchange (SPDX)&lt;/a&gt; lists the identifiers you can use for this value. For example, to specify that you&amp;rsquo;ve licensed your crate using the MIT License, add the &lt;code&gt;MIT&lt;/code&gt; identifier:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8594387539a0f2f7158c8875d4643cbc796d8e9" translate="yes" xml:space="preserve">
          <source>Add a getter function:</source>
          <target state="translated">ゲッター関数を追加します。</target>
        </trans-unit>
        <trans-unit id="c563aa838f46cc2ef90bbf765435b526485acbf0" translate="yes" xml:space="preserve">
          <source>Add constraints that must be upheld to use an item.</source>
          <target state="translated">項目を使用するために支持されなければならない制約を追加します。</target>
        </trans-unit>
        <trans-unit id="0246ebd27a992d5a543dfa759b31edd44f7a3c51" translate="yes" xml:space="preserve">
          <source>Add credentials to the ancillary data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="290a7219146772de857baff40ff966c8c90e0f42" translate="yes" xml:space="preserve">
          <source>Add file descriptors to the ancillary data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32aaebe9976898d3881c1a85d7d471c975e08486" translate="yes" xml:space="preserve">
          <source>Add more documentation to &lt;code&gt;ThreadPool&lt;/code&gt; and its public methods.</source>
          <target state="translated">&lt;code&gt;ThreadPool&lt;/code&gt; とそのパブリックメソッドにドキュメントを追加します。</target>
        </trans-unit>
        <trans-unit id="eac54db7026ed63754bb1e0481266ad4560b6f6c" translate="yes" xml:space="preserve">
          <source>Add tests of the library&amp;rsquo;s functionality.</source>
          <target state="translated">ライブラリの機能のテストを追加します。</target>
        </trans-unit>
        <trans-unit id="584510db3cf556aee671c49783907c6c03f2abe4" translate="yes" xml:space="preserve">
          <source>Add the size of the field.</source>
          <target state="translated">フィールドのサイズを追加します。</target>
        </trans-unit>
        <trans-unit id="e0ef2ba9581371a273c725b4584816d08df6e970" translate="yes" xml:space="preserve">
          <source>Add::add</source>
          <target state="translated">Add::add</target>
        </trans-unit>
        <trans-unit id="bd166591010a18220168b51497b0b5e84b157433" translate="yes" xml:space="preserve">
          <source>AddAssign</source>
          <target state="translated">AddAssign</target>
        </trans-unit>
        <trans-unit id="6eecef84103332763bac0f11d9776217926be6a9" translate="yes" xml:space="preserve">
          <source>AddAssign::add_assign</source>
          <target state="translated">AddAssign::add_assign</target>
        </trans-unit>
        <trans-unit id="47bc308a358cb72c871f66d0703a1751fa8c3e13" translate="yes" xml:space="preserve">
          <source>Adding &lt;code&gt;rand&lt;/code&gt; as a dependency in &lt;em&gt;Cargo.toml&lt;/em&gt; tells Cargo to download the &lt;code&gt;rand&lt;/code&gt; package and any dependencies from &lt;a href=&quot;https://crates.io/&quot;&gt;crates.io&lt;/a&gt; and make &lt;code&gt;rand&lt;/code&gt; available to our project.</source>
          <target state="translated">追加 &lt;code&gt;rand&lt;/code&gt; 中に依存関係として&lt;em&gt;Cargo.tomlを&lt;/em&gt;ダウンロードして貨物を伝え &lt;code&gt;rand&lt;/code&gt; パッケージとの依存関係&lt;a href=&quot;https://crates.io/&quot;&gt;crates.ioを&lt;/a&gt;して作る &lt;code&gt;rand&lt;/code&gt; 私たちのプロジェクトに利用できます。</target>
        </trans-unit>
        <trans-unit id="6951b086bf1e29a4acfdba85666aa713fe81534c" translate="yes" xml:space="preserve">
          <source>Adding &lt;code&gt;use&lt;/code&gt; and a path in a scope is similar to creating a symbolic link in the filesystem. By adding &lt;code&gt;use crate::front_of_house::hosting&lt;/code&gt; in the crate root, &lt;code&gt;hosting&lt;/code&gt; is now a valid name in that scope, just as though the &lt;code&gt;hosting&lt;/code&gt; module had been defined in the crate root. Paths brought into scope with &lt;code&gt;use&lt;/code&gt; also check privacy, like any other paths.</source>
          <target state="translated">スコープに &lt;code&gt;use&lt;/code&gt; とパスを追加することは、ファイルシステムにシンボリックリンクを作成することに似ています。追加することにより &lt;code&gt;use crate::front_of_house::hosting&lt;/code&gt; クレートのルートには、 &lt;code&gt;hosting&lt;/code&gt; ちょうどかのように、今、その範囲内で有効な名前である &lt;code&gt;hosting&lt;/code&gt; モジュールはクレートのルートで定義されていました。他のパスと同様に、 &lt;code&gt;use&lt;/code&gt; 伴ってスコープに入れられたパスはプライバシーもチェックします。</target>
        </trans-unit>
        <trans-unit id="311633e0da4d8767a76b5d94813ce0272b9cb8a9" translate="yes" xml:space="preserve">
          <source>Adding Custom Failure Messages</source>
          <target state="translated">カスタムの失敗メッセージを追加する</target>
        </trans-unit>
        <trans-unit id="eb99698d7e26927ef9425258511b7fbda34cd647" translate="yes" xml:space="preserve">
          <source>Adding Metadata to a New Crate</source>
          <target state="translated">新しいクレートにメタデータを追加する</target>
        </trans-unit>
        <trans-unit id="6ff96d15a4dfd75cd1b39329a2970688120a37e4" translate="yes" xml:space="preserve">
          <source>Adding Useful Functionality with Derived Traits</source>
          <target state="translated">派生形質による有用な機能の追加</target>
        </trans-unit>
        <trans-unit id="b2524eeb321c4f1026793239c00d8c1b31c32e31" translate="yes" xml:space="preserve">
          <source>Adding a &lt;code&gt;PhantomData&amp;lt;T&amp;gt;&lt;/code&gt; field to your type tells the compiler that your type acts as though it stores a value of type &lt;code&gt;T&lt;/code&gt;, even though it doesn't really. This information is used when computing certain safety properties.</source>
          <target state="translated">型に &lt;code&gt;PhantomData&amp;lt;T&amp;gt;&lt;/code&gt; フィールドを追加すると、コンパイラは、型 &lt;code&gt;T&lt;/code&gt; の値を格納しているかのように動作することをコンパイラに通知します。この情報は、特定の安全特性を計算するときに使用されます。</target>
        </trans-unit>
        <trans-unit id="b87a48eb56569132271d6219a87c7a5229e982a0" translate="yes" xml:space="preserve">
          <source>Adding a &lt;code&gt;Self: Sized&lt;/code&gt; bound to these methods will generally make this compile.</source>
          <target state="translated">&lt;code&gt;Self: Sized&lt;/code&gt; 追加：これらのメソッドにバインドされたサイズは、通常、これをコンパイルします。</target>
        </trans-unit>
        <trans-unit id="88b9f27e251e16ee893bec092535b944c26b4aa9" translate="yes" xml:space="preserve">
          <source>Adding a Reference from a Child to Its Parent</source>
          <target state="translated">子から親への参照の追加</target>
        </trans-unit>
        <trans-unit id="23ab42376e070f08194bffa94071c8449a58479a" translate="yes" xml:space="preserve">
          <source>Adding a Test to a Workspace</source>
          <target state="translated">ワークスペースへのテストの追加</target>
        </trans-unit>
        <trans-unit id="fd0c9f4d15902bc297e9dbf8af8d2743194e970b" translate="yes" xml:space="preserve">
          <source>Adding a field of type &lt;code&gt;PhantomData&amp;lt;T&amp;gt;&lt;/code&gt; indicates that your type owns data of type &lt;code&gt;T&lt;/code&gt;. This in turn implies that when your type is dropped, it may drop one or more instances of the type &lt;code&gt;T&lt;/code&gt;. This has bearing on the Rust compiler's &lt;a href=&quot;https://doc.rust-lang.org/nomicon/dropck.html&quot;&gt;drop check&lt;/a&gt; analysis.</source>
          <target state="translated">タイプ &lt;code&gt;PhantomData&amp;lt;T&amp;gt;&lt;/code&gt; フィールドを追加すると、そのタイプがタイプ &lt;code&gt;T&lt;/code&gt; のデータを所有することを示します。これは、タイプがドロップされると、タイプ &lt;code&gt;T&lt;/code&gt; のインスタンスを1つ以上ドロップする可能性があることを意味します。これは、Rustコンパイラの&lt;a href=&quot;https://doc.rust-lang.org/nomicon/dropck.html&quot;&gt;ドロップチェック&lt;/a&gt;分析に関係しています。</target>
        </trans-unit>
        <trans-unit id="2e98bb73927df33c08944823ebcc88b767156500" translate="yes" xml:space="preserve">
          <source>Adding example code blocks in your documentation comments can help demonstrate how to use your library, and doing so has an additional bonus: running &lt;code&gt;cargo test&lt;/code&gt; will run the code examples in your documentation as tests! Nothing is better than documentation with examples. But nothing is worse than examples that don&amp;rsquo;t work because the code has changed since the documentation was written. If we run &lt;code&gt;cargo test&lt;/code&gt; with the documentation for the &lt;code&gt;add_one&lt;/code&gt; function from Listing 14-1, we will see a section in the test results like this:</source>
          <target state="translated">ドキュメントのコメントにサンプルコードブ​​ロックを追加すると、ライブラリの使用方法を示すのに役立ちます。これを行うと、さらにボーナスがあります。 &lt;code&gt;cargo test&lt;/code&gt; を実行すると、ドキュメント内のコード例がテストとして実行されます。例付きのドキュメントに勝るものはありません。しかし、ドキュメントが作成されてからコードが変更されたために機能しない例よりも悪いことはありません。リスト14-1の &lt;code&gt;add_one&lt;/code&gt; 関数のドキュメントを使用して &lt;code&gt;cargo test&lt;/code&gt; を実行すると、テスト結果に次のようなセクションが表示されます。</target>
        </trans-unit>
        <trans-unit id="ceb9b506f927db7479477e625a150623510cf2aa" translate="yes" xml:space="preserve">
          <source>Adding the &lt;code id=&quot;adding-the-approve-method-that-changes-the-behavior-of-content&quot;&gt;approve&lt;/code&gt; Method that Changes the Behavior of &lt;code&gt;content&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;content&lt;/code&gt; の動作を変更 &lt;code id=&quot;adding-the-approve-method-that-changes-the-behavior-of-content&quot;&gt;approve&lt;/code&gt; メソッドを追加する</target>
        </trans-unit>
        <trans-unit id="718d273106ffd821ac0c7d93c2d34d8556d7365d" translate="yes" xml:space="preserve">
          <source>Adding the &lt;code&gt;break&lt;/code&gt; line after &lt;code&gt;You win!&lt;/code&gt; makes the program exit the loop when the user guesses the secret number correctly. Exiting the loop also means exiting the program, because the loop is the last part of &lt;code&gt;main&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;You win!&lt;/code&gt; 後に &lt;code&gt;break&lt;/code&gt; ラインを追加します！ユーザーがシークレット番号を正しく推測すると、プログラムがループを終了します。ループは &lt;code&gt;main&lt;/code&gt; の最後の部分であるため、ループを終了することはプログラムを終了することも意味します。</target>
        </trans-unit>
        <trans-unit id="097cf74b7fb2e319a4766446302ea478dcd635f5" translate="yes" xml:space="preserve">
          <source>Adding the &lt;code&gt;mut&lt;/code&gt; keyword dereferences a mutable reference. The mutability must match the mutability of the reference.</source>
          <target state="translated">&lt;code&gt;mut&lt;/code&gt; キーワードを追加すると、可変参照が逆参照されます。可変性は参照の可変性と一致する必要があります。</target>
        </trans-unit>
        <trans-unit id="8e8428e85c661f03dd33db8f12b20a010ab5be5e" translate="yes" xml:space="preserve">
          <source>Addition</source>
          <target state="translated">Addition</target>
        </trans-unit>
        <trans-unit id="c8217392646c4b940c031f95cbb65a4bfa731556" translate="yes" xml:space="preserve">
          <source>Addition assignment</source>
          <target state="translated">追加課題</target>
        </trans-unit>
        <trans-unit id="b078f9f7ba47f896a06212df108079bcbb1553ff" translate="yes" xml:space="preserve">
          <source>Additional functionality for numerics.</source>
          <target state="translated">数値の追加機能。</target>
        </trans-unit>
        <trans-unit id="2ffc443f11be980490aef62083275ee8c11f674b" translate="yes" xml:space="preserve">
          <source>Additional implementors</source>
          <target state="translated">追加の実装者</target>
        </trans-unit>
        <trans-unit id="911a0b354b810ade1b41221cd419095a4767144e" translate="yes" xml:space="preserve">
          <source>Additional information</source>
          <target state="translated">追加情報</target>
        </trans-unit>
        <trans-unit id="0c05d0c23b9a6f9971368dd97467c0d0e294ca18" translate="yes" xml:space="preserve">
          <source>Additional parameters passed to &lt;code&gt;format!&lt;/code&gt; replace the &lt;code&gt;{}&lt;/code&gt;s within the formatting string in the order given unless named or positional parameters are used; see &lt;a href=&quot;fmt/index&quot;&gt;&lt;code&gt;std::fmt&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;code&gt;format!&lt;/code&gt; 渡される追加パラメーター！名前付きパラメータまたは位置パラメータが使用されていない限り、指定された順序でフォーマット文字列内の &lt;code&gt;{}&lt;/code&gt; を置き換えます。詳細については、&lt;a href=&quot;fmt/index&quot;&gt; &lt;code&gt;std::fmt&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="b89443b71b82e921f27bf8622eec75e5bb710e5e" translate="yes" xml:space="preserve">
          <source>Additional parameters passed to &lt;code&gt;format!&lt;/code&gt; replace the &lt;code&gt;{}&lt;/code&gt;s within the formatting string in the order given unless named or positional parameters are used; see &lt;a href=&quot;https://doc.rust-lang.org/core/fmt/index.html&quot;&gt;&lt;code&gt;std::fmt&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;code&gt;format!&lt;/code&gt; 渡される追加のパラメーター！名前付きまたは位置パラメータが使用されていない限り、フォーマット文字列内の &lt;code&gt;{}&lt;/code&gt; を指定された順序で置き換えます。詳細については、&lt;a href=&quot;https://doc.rust-lang.org/core/fmt/index.html&quot;&gt; &lt;code&gt;std::fmt&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="f5cf45e8eb3455f9aeaa5f7fa4c013c3116744f0" translate="yes" xml:space="preserve">
          <source>Additionally, &lt;code&gt;f32&lt;/code&gt; can represent a couple of special values:</source>
          <target state="translated">さらに、 &lt;code&gt;f32&lt;/code&gt; はいくつかの特別な値を表すことができます。</target>
        </trans-unit>
        <trans-unit id="dc3992de92a20dddf33d6770f13a67c41e82f34f" translate="yes" xml:space="preserve">
          <source>Additionally, a type &lt;code&gt;Foo&amp;lt;T&amp;gt;&lt;/code&gt; can implement &lt;code&gt;CoerceUnsized&amp;lt;Foo&amp;lt;U&amp;gt;&amp;gt;&lt;/code&gt; when &lt;code&gt;T&lt;/code&gt; implements &lt;code&gt;Unsize&amp;lt;U&amp;gt;&lt;/code&gt; or &lt;code&gt;CoerceUnsized&amp;lt;Foo&amp;lt;U&amp;gt;&amp;gt;&lt;/code&gt;. This allows it to provide a unsized coercion to &lt;code&gt;Foo&amp;lt;U&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">また、タイプ &lt;code&gt;Foo&amp;lt;T&amp;gt;&lt;/code&gt; を実装することができる &lt;code&gt;CoerceUnsized&amp;lt;Foo&amp;lt;U&amp;gt;&amp;gt;&lt;/code&gt; とき &lt;code&gt;T&lt;/code&gt; 器具 &lt;code&gt;Unsize&amp;lt;U&amp;gt;&lt;/code&gt; または &lt;code&gt;CoerceUnsized&amp;lt;Foo&amp;lt;U&amp;gt;&amp;gt;&lt;/code&gt; 。これにより、 &lt;code&gt;Foo&amp;lt;U&amp;gt;&lt;/code&gt; サイズ変更しない強制を提供できます。</target>
        </trans-unit>
        <trans-unit id="30e7a03e650ce2c7f3e6f58657d0e770d7ebbede" translate="yes" xml:space="preserve">
          <source>Additionally, even though &lt;code&gt;$crate&lt;/code&gt; allows a macro to refer to items within its own crate when expanding, its use has no effect on visibility. An item or macro referred to must still be visible from the invocation site. In the following example, any attempt to invoke &lt;code&gt;call_foo!()&lt;/code&gt; from outside its crate will fail because &lt;code&gt;foo()&lt;/code&gt; is not public.</source>
          <target state="translated">さらに、 &lt;code&gt;$crate&lt;/code&gt; 使用すると、展開時にマクロが自身のクレート内のアイテムを参照できるようになりますが、その使用は可視性に影響を与えません。参照されるアイテムまたはマクロは、呼び出しサイトから表示されている必要があります。次の例では、 &lt;code&gt;foo()&lt;/code&gt; がパブリックでないため、クレートの外側から &lt;code&gt;call_foo!()&lt;/code&gt; を呼び出そうとしても失敗します。</target>
        </trans-unit>
        <trans-unit id="8bd65ffd560b03ecf2792061831bdc28c657f4f7" translate="yes" xml:space="preserve">
          <source>Additionally, if &lt;code&gt;T&lt;/code&gt; is not &lt;a href=&quot;../marker/trait.copy&quot;&gt;&lt;code&gt;Copy&lt;/code&gt;&lt;/a&gt;, using the pointed-to value after calling &lt;code&gt;drop_in_place&lt;/code&gt; can cause undefined behavior. Note that &lt;code&gt;*to_drop = foo&lt;/code&gt; counts as a use because it will cause the value to be dropped again. &lt;a href=&quot;../ptr/fn.write&quot;&gt;&lt;code&gt;write()&lt;/code&gt;&lt;/a&gt; can be used to overwrite data without causing it to be dropped.</source>
          <target state="translated">さらに、 &lt;code&gt;T&lt;/code&gt; が&lt;a href=&quot;../marker/trait.copy&quot;&gt; &lt;code&gt;Copy&lt;/code&gt; &lt;/a&gt;でない場合、 &lt;code&gt;drop_in_place&lt;/code&gt; を呼び出した後にポイントされた値を使用すると、未定義の動作が発生する可能性があります。 &lt;code&gt;*to_drop = foo&lt;/code&gt; は、値が再びドロップされるため、使用としてカウントされることに注意してください。&lt;a href=&quot;../ptr/fn.write&quot;&gt; &lt;code&gt;write()&lt;/code&gt; &lt;/a&gt;を使用すると、データをドロップせずに上書きできます。</target>
        </trans-unit>
        <trans-unit id="45cbb93035ac4b5290adcbd441c337adab3295a5" translate="yes" xml:space="preserve">
          <source>Additionally, if &lt;code&gt;T&lt;/code&gt; is not &lt;a href=&quot;../marker/trait.copy&quot;&gt;&lt;code&gt;Copy&lt;/code&gt;&lt;/a&gt;, using the pointed-to value after calling &lt;code&gt;drop_in_place&lt;/code&gt; can cause undefined behavior. Note that &lt;code&gt;*to_drop = foo&lt;/code&gt; counts as a use because it will cause the value to be dropped again. &lt;a href=&quot;../ptr/fn.write&quot;&gt;&lt;code&gt;write&lt;/code&gt;&lt;/a&gt; can be used to overwrite data without causing it to be dropped.</source>
          <target state="translated">さらに、 &lt;code&gt;T&lt;/code&gt; が&lt;a href=&quot;../marker/trait.copy&quot;&gt; &lt;code&gt;Copy&lt;/code&gt; &lt;/a&gt;でない場合、 &lt;code&gt;drop_in_place&lt;/code&gt; を呼び出した後にポイント先の値を使用すると、未定義の動作が発生する可能性があります。 &lt;code&gt;*to_drop = foo&lt;/code&gt; は、値が再度ドロップされるため、使用としてカウントされることに注意してください。&lt;a href=&quot;../ptr/fn.write&quot;&gt; &lt;code&gt;write&lt;/code&gt; &lt;/a&gt;を使用すると、データを削除せずにデータを上書きできます。</target>
        </trans-unit>
        <trans-unit id="4db0827a894435e479c60b5c414ff857b4d8ad46" translate="yes" xml:space="preserve">
          <source>Additionally, if &lt;code&gt;T&lt;/code&gt; is not &lt;a href=&quot;../marker/trait.copy&quot;&gt;&lt;code&gt;Copy&lt;/code&gt;&lt;/a&gt;, using the pointed-to value after calling &lt;code&gt;drop_in_place&lt;/code&gt; can cause undefined behavior. Note that &lt;code&gt;*to_drop = foo&lt;/code&gt; counts as a use because it will cause the value to be dropped again. &lt;a href=&quot;fn.write&quot;&gt;&lt;code&gt;write()&lt;/code&gt;&lt;/a&gt; can be used to overwrite data without causing it to be dropped.</source>
          <target state="translated">さらに、 &lt;code&gt;T&lt;/code&gt; が&lt;a href=&quot;../marker/trait.copy&quot;&gt; &lt;code&gt;Copy&lt;/code&gt; &lt;/a&gt;でない場合、 &lt;code&gt;drop_in_place&lt;/code&gt; を呼び出した後にポイントされた値を使用すると、未定義の動作が発生する可能性があります。 &lt;code&gt;*to_drop = foo&lt;/code&gt; は、値が再びドロップされるため、使用としてカウントされることに注意してください。&lt;a href=&quot;fn.write&quot;&gt; &lt;code&gt;write()&lt;/code&gt; &lt;/a&gt;を使用すると、データをドロップせずに上書きできます。</target>
        </trans-unit>
        <trans-unit id="74bd1999d14b1334b93c7bef28b699b66b0d25fc" translate="yes" xml:space="preserve">
          <source>Additionally, if &lt;code&gt;T&lt;/code&gt; is not &lt;a href=&quot;../marker/trait.copy&quot;&gt;&lt;code&gt;Copy&lt;/code&gt;&lt;/a&gt;, using the pointed-to value after calling &lt;code&gt;drop_in_place&lt;/code&gt; can cause undefined behavior. Note that &lt;code&gt;*to_drop = foo&lt;/code&gt; counts as a use because it will cause the value to be dropped again. &lt;a href=&quot;fn.write&quot;&gt;&lt;code&gt;write&lt;/code&gt;&lt;/a&gt; can be used to overwrite data without causing it to be dropped.</source>
          <target state="translated">さらに、 &lt;code&gt;T&lt;/code&gt; が&lt;a href=&quot;../marker/trait.copy&quot;&gt; &lt;code&gt;Copy&lt;/code&gt; &lt;/a&gt;でない場合、 &lt;code&gt;drop_in_place&lt;/code&gt; を呼び出した後にポイント先の値を使用すると、未定義の動作が発生する可能性があります。 &lt;code&gt;*to_drop = foo&lt;/code&gt; は、値が再度ドロップされるため、使用としてカウントされることに注意してください。&lt;a href=&quot;fn.write&quot;&gt; &lt;code&gt;write&lt;/code&gt; &lt;/a&gt;を使用すると、データを削除せずにデータを上書きできます。</target>
        </trans-unit>
        <trans-unit id="90a70db7c7bfc77bbf274f46c324d605b6ac9ac3" translate="yes" xml:space="preserve">
          <source>Additionally, it does not drop &lt;code&gt;src&lt;/code&gt;. Semantically, &lt;code&gt;src&lt;/code&gt; is moved into the location pointed to by &lt;code&gt;dst&lt;/code&gt;.</source>
          <target state="translated">さらに、それは &lt;code&gt;src&lt;/code&gt; を落としません。意味的には、 &lt;code&gt;src&lt;/code&gt; は &lt;code&gt;dst&lt;/code&gt; が指す場所に移動されます。</target>
        </trans-unit>
        <trans-unit id="a5ab7ed4a3b0357f6baec92b0d45381b0f7726c3" translate="yes" xml:space="preserve">
          <source>Additionally, on Unix &lt;a href=&quot;struct.osstring&quot;&gt;&lt;code&gt;OsString&lt;/code&gt;&lt;/a&gt; implements the &lt;code&gt;std::os::unix::ffi::&lt;/code&gt;&lt;a href=&quot;../os/unix/ffi/trait.osstringext&quot;&gt;&lt;code&gt;OsStringExt&lt;/code&gt;&lt;/a&gt; trait, which provides &lt;a href=&quot;../os/unix/ffi/trait.osstringext#tymethod.from_vec&quot;&gt;&lt;code&gt;from_vec&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../os/unix/ffi/trait.osstringext#tymethod.into_vec&quot;&gt;&lt;code&gt;into_vec&lt;/code&gt;&lt;/a&gt; methods that consume their arguments, and take or produce vectors of &lt;a href=&quot;../primitive.u8&quot;&gt;&lt;code&gt;u8&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">さらに、Unixでは、&lt;a href=&quot;struct.osstring&quot;&gt; &lt;code&gt;OsString&lt;/code&gt; &lt;/a&gt;は &lt;code&gt;std::os::unix::ffi::&lt;/code&gt; &lt;a href=&quot;../os/unix/ffi/trait.osstringext&quot;&gt; &lt;code&gt;OsStringExt&lt;/code&gt; &lt;/a&gt;トレイトを実装します。これは、引数を消費し、&lt;a href=&quot;../primitive.u8&quot;&gt; &lt;code&gt;u8&lt;/code&gt; の&lt;/a&gt;ベクトルを取得または生成する&lt;a href=&quot;../os/unix/ffi/trait.osstringext#tymethod.from_vec&quot;&gt; &lt;code&gt;from_vec&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;../os/unix/ffi/trait.osstringext#tymethod.into_vec&quot;&gt; &lt;code&gt;into_vec&lt;/code&gt; &lt;/a&gt;メソッドを提供します。</target>
        </trans-unit>
        <trans-unit id="1db4d415a7232a66cc30ffdbd6dbfd6bc3c496f2" translate="yes" xml:space="preserve">
          <source>Additionally, on Unix &lt;a href=&quot;struct.osstring&quot;&gt;&lt;code&gt;OsString&lt;/code&gt;&lt;/a&gt; implements the &lt;code&gt;std::os::unix::ffi::&lt;/code&gt;&lt;a href=&quot;../os/unix/ffi/trait.osstringext&quot;&gt;&lt;code&gt;OsStringExt&lt;/code&gt;&lt;/a&gt; trait, which provides &lt;a href=&quot;../os/unix/ffi/trait.osstringext#tymethod.from_vec&quot;&gt;&lt;code&gt;from_vec&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../os/unix/ffi/trait.osstringext#tymethod.into_vec&quot;&gt;&lt;code&gt;into_vec&lt;/code&gt;&lt;/a&gt; methods that consume their arguments, and take or produce vectors of &lt;a href=&quot;https://doc.rust-lang.org/nightly/std/primitive.u8.html&quot;&gt;&lt;code&gt;u8&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">また、Unix上で&lt;a href=&quot;struct.osstring&quot;&gt; &lt;code&gt;OsString&lt;/code&gt; &lt;/a&gt;実装 &lt;code&gt;std::os::unix::ffi::&lt;/code&gt; &lt;a href=&quot;../os/unix/ffi/trait.osstringext&quot;&gt; &lt;code&gt;OsStringExt&lt;/code&gt; の&lt;/a&gt;提供特性、&lt;a href=&quot;../os/unix/ffi/trait.osstringext#tymethod.from_vec&quot;&gt; &lt;code&gt;from_vec&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;../os/unix/ffi/trait.osstringext#tymethod.into_vec&quot;&gt; &lt;code&gt;into_vec&lt;/code&gt; &lt;/a&gt;その引数を消費する方法を、と取るかの農産物ベクトル&lt;a href=&quot;https://doc.rust-lang.org/nightly/std/primitive.u8.html&quot;&gt; &lt;code&gt;u8&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8bb517701cd0832c45c67c28da4b399a605014b6" translate="yes" xml:space="preserve">
          <source>Additionally, on Windows &lt;a href=&quot;struct.osstring&quot;&gt;&lt;code&gt;OsString&lt;/code&gt;&lt;/a&gt; implements the &lt;code&gt;std::os::windows:ffi::&lt;/code&gt;&lt;a href=&quot;../os/windows/ffi/trait.osstringext&quot;&gt;&lt;code&gt;OsStringExt&lt;/code&gt;&lt;/a&gt; trait, which provides a &lt;a href=&quot;../os/windows/ffi/trait.osstringext#tymethod.from_wide&quot;&gt;&lt;code&gt;from_wide&lt;/code&gt;&lt;/a&gt; method. The result of this method is an &lt;a href=&quot;struct.osstring&quot;&gt;&lt;code&gt;OsString&lt;/code&gt;&lt;/a&gt; which can be round-tripped to a Windows string losslessly.</source>
          <target state="translated">さらに、Windowsでは&lt;a href=&quot;struct.osstring&quot;&gt; &lt;code&gt;OsString&lt;/code&gt; &lt;/a&gt;は &lt;code&gt;std::os::windows:ffi::&lt;/code&gt; &lt;a href=&quot;../os/windows/ffi/trait.osstringext&quot;&gt; &lt;code&gt;OsStringExt&lt;/code&gt; &lt;/a&gt;トレイトを実装し、&lt;a href=&quot;../os/windows/ffi/trait.osstringext#tymethod.from_wide&quot;&gt; &lt;code&gt;from_wide&lt;/code&gt; &lt;/a&gt;メソッドを提供します。このメソッドの結果は、ロスレスでWindows文字列にラウンドトリップできる&lt;a href=&quot;struct.osstring&quot;&gt; &lt;code&gt;OsString&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="0f7d5354cdb11e461595056b1602a23178a20138" translate="yes" xml:space="preserve">
          <source>Additionally, taking a job off the channel queue involves mutating the &lt;code&gt;receiver&lt;/code&gt;, so the threads need a safe way to share and modify &lt;code&gt;receiver&lt;/code&gt;; otherwise, we might get race conditions (as covered in Chapter 16).</source>
          <target state="translated">また、チャネルキューから仕事を取ることは変異が含ま &lt;code&gt;receiver&lt;/code&gt; スレッドが共有および変更する安全な方法必要があるので、 &lt;code&gt;receiver&lt;/code&gt; 。そうしないと、競合状態になる可能性があります（第16章で説明）。</target>
        </trans-unit>
        <trans-unit id="0eb5702e98a03d052d40c8aabb340aee4d2332a4" translate="yes" xml:space="preserve">
          <source>Additionally, the &lt;code&gt;isize&lt;/code&gt; and &lt;code&gt;usize&lt;/code&gt; types depend on the kind of computer your program is running on: 64 bits if you&amp;rsquo;re on a 64-bit architecture and 32 bits if you&amp;rsquo;re on a 32-bit architecture.</source>
          <target state="translated">さらに、 &lt;code&gt;isize&lt;/code&gt; と &lt;code&gt;usize&lt;/code&gt; あなたは32ビットアーキテクチャにしている場合は、64ビットアーキテクチャおよび32ビットにしている場合は64ビット：種類は、あなたのプログラムを実行しているコンピュータの種類によって異なります。</target>
        </trans-unit>
        <trans-unit id="e3aa1d01d453f95734172c24dd2caadad96e569f" translate="yes" xml:space="preserve">
          <source>Additionally, the caller must ensure that writing &lt;code&gt;count * size_of::&amp;lt;T&amp;gt;()&lt;/code&gt; bytes to the given region of memory results in a valid value of &lt;code&gt;T&lt;/code&gt;. Using a region of memory typed as a &lt;code&gt;T&lt;/code&gt; that contains an invalid value of &lt;code&gt;T&lt;/code&gt; is undefined behavior.</source>
          <target state="translated">さらに、呼び出し元は、 &lt;code&gt;count * size_of::&amp;lt;T&amp;gt;()&lt;/code&gt; バイトをメモリの特定の領域に書き込むと、 &lt;code&gt;T&lt;/code&gt; の有効な値になることを確認する必要があります。無効な &lt;code&gt;T&lt;/code&gt; の値を含む &lt;code&gt;T&lt;/code&gt; として型指定されたメモリ領域を使用すると、動作が未定義になります。</target>
        </trans-unit>
        <trans-unit id="f3d0f5351803248ec3d677cec08967bab902a3b1" translate="yes" xml:space="preserve">
          <source>Additionally, the length of the string will be recalculated from the pointer.</source>
          <target state="translated">さらに、文字列の長さはポインタから再計算されます。</target>
        </trans-unit>
        <trans-unit id="5c93e6fb82861fecd56783e8c74a9dcd85037abd" translate="yes" xml:space="preserve">
          <source>Additionally, the lifetime &lt;code&gt;'a&lt;/code&gt; returned is arbitrarily chosen and does not necessarily reflect the actual lifetime of the data. It is up to the caller to ensure that for the duration of this lifetime, the memory this pointer points to does not get accessed through any other pointer.</source>
          <target state="translated">また、寿命 &lt;code&gt;'a&lt;/code&gt; が返さが任意に選択され、必ずしもデータの実際の寿命を反映するものではありません。この存続期間中、このポインターが指すメモリーが他のポインターを介してアクセスされないようにするのは、呼び出し元の責任です。</target>
        </trans-unit>
        <trans-unit id="6e203e0080d407af9cc4130e8b5859f062bfa85b" translate="yes" xml:space="preserve">
          <source>Additionally, the lifetime &lt;code&gt;'a&lt;/code&gt; returned is arbitrarily chosen and does not necessarily reflect the actual lifetime of the data. It is up to the caller to ensure that for the duration of this lifetime, the memory this pointer points to does not get written to outside of &lt;code&gt;UnsafeCell&amp;lt;U&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">また、寿命 &lt;code&gt;'a&lt;/code&gt; が返さが任意に選択され、必ずしもデータの実際の寿命を反映するものではありません。この存続期間中、このポインターが指すメモリーが &lt;code&gt;UnsafeCell&amp;lt;U&amp;gt;&lt;/code&gt; 外部に書き込まれないようにするのは、呼び出し元の責任です。</target>
        </trans-unit>
        <trans-unit id="cb09e099663e4fdfec9970e8541bfc0bbcb8c136" translate="yes" xml:space="preserve">
          <source>Additionally, the return value of this function is &lt;a href=&quot;type.result&quot;&gt;&lt;code&gt;fmt::Result&lt;/code&gt;&lt;/a&gt; which is a type alias of &lt;a href=&quot;../result/enum.result&quot;&gt;&lt;code&gt;Result&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;(), &lt;/code&gt;&lt;a href=&quot;struct.error&quot;&gt;&lt;code&gt;std::fmt::Error&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;. Formatting implementations should ensure that they propagate errors from the &lt;a href=&quot;struct.formatter&quot;&gt;&lt;code&gt;Formatter&lt;/code&gt;&lt;/a&gt; (e.g., when calling &lt;a href=&quot;../macro.write&quot;&gt;&lt;code&gt;write!&lt;/code&gt;&lt;/a&gt;). However, they should never return errors spuriously. That is, a formatting implementation must and may only return an error if the passed-in &lt;a href=&quot;struct.formatter&quot;&gt;&lt;code&gt;Formatter&lt;/code&gt;&lt;/a&gt; returns an error. This is because, contrary to what the function signature might suggest, string formatting is an infallible operation. This function only returns a result because writing to the underlying stream might fail and it must provide a way to propagate the fact that an error has occurred back up the stack.</source>
          <target state="translated">さらに、この関数の戻り値は&lt;a href=&quot;../result/enum.result&quot;&gt; &lt;code&gt;Result&lt;/code&gt; &lt;/a&gt; &lt;code&gt;&amp;lt;(), &lt;/code&gt; &lt;a href=&quot;struct.error&quot;&gt; &lt;code&gt;std::fmt::Error&lt;/code&gt; &lt;/a&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; の型エイリアスである&lt;a href=&quot;type.result&quot;&gt; &lt;code&gt;fmt::Result&lt;/code&gt; &lt;/a&gt;です。フォーマッティング実装は、&lt;a href=&quot;struct.formatter&quot;&gt; &lt;code&gt;Formatter&lt;/code&gt; &lt;/a&gt;からのエラーを確実に伝播する必要があります（たとえば、&lt;a href=&quot;../macro.write&quot;&gt; &lt;code&gt;write!&lt;/code&gt; を&lt;/a&gt;呼び出すとき）。ただし、誤ってエラーを返すことはありません。つまり、フォーマットの実装は、渡された&lt;a href=&quot;struct.formatter&quot;&gt; &lt;code&gt;Formatter&lt;/code&gt; が&lt;/a&gt;エラーを返します。これは、関数のシグネチャが示唆するかもしれないこととは対照的に、文字列の書式設定は間違いのない操作であるためです。基になるストリームへの書き込みが失敗する可能性があるため、この関数は結果を返すだけであり、エラーがスタックで発生したという事実を伝搬する方法を提供する必要があります。</target>
        </trans-unit>
        <trans-unit id="c51e0d7d6467942093ff85910240899ecb3312bc" translate="yes" xml:space="preserve">
          <source>Additionally, we can&amp;rsquo;t yet provide the &lt;code&gt;hello_macro&lt;/code&gt; function with default implementation that will print the name of the type the trait is implemented on: Rust doesn&amp;rsquo;t have reflection capabilities, so it can&amp;rsquo;t look up the type&amp;rsquo;s name at runtime. We need a macro to generate code at compile time.</source>
          <target state="translated">さらに、特性が実装されている型の名前を出力するデフォルトの実装を &lt;code&gt;hello_macro&lt;/code&gt; 関数に提供することはまだできません。Rustにはリフレクション機能がないため、実行時に型の名前を検索できません。コンパイル時にコードを生成するマクロが必要です。</target>
        </trans-unit>
        <trans-unit id="009b5112bedb7bc7f35022f14f637dbf23e46083" translate="yes" xml:space="preserve">
          <source>Additionally, you&amp;rsquo;ll need a linker of some kind. It&amp;rsquo;s likely one is already installed, but when you try to compile a Rust program and get errors indicating that a linker could not execute, that means a linker isn&amp;rsquo;t installed on your system and you&amp;rsquo;ll need to install one manually. C compilers usually come with the correct linker. Check your platform&amp;rsquo;s documentation for how to install a C compiler. Also, some common Rust packages depend on C code and will need a C compiler. Therefore, it might be worth installing one now.</source>
          <target state="translated">さらに、何らかのリンカーが必要になります。おそらく既にインストールされている可能性がありますが、Rustプログラムをコンパイルしようとして、リンカーが実行できなかったことを示すエラーが発生した場合は、システムにリンカーがインストールされていないため、手動でインストールする必要があります。Cコンパイラには通常、正しいリンカが付属しています。Cコンパイラのインストール方法については、プラットフォームのドキュメントを確認してください。また、一部の一般的なRustパッケージはCコードに依存しており、Cコンパイラが必要になります。したがって、今すぐインストールする価値があるかもしれません。</target>
        </trans-unit>
        <trans-unit id="e8f6c433136e97e0a25822d00a70a971083e0df2" translate="yes" xml:space="preserve">
          <source>AddrParseError</source>
          <target state="translated">AddrParseError</target>
        </trans-unit>
        <trans-unit id="4db89e8ded7777748645ac21edd601141065b25a" translate="yes" xml:space="preserve">
          <source>AddrParseError::borrow</source>
          <target state="translated">AddrParseError::borrow</target>
        </trans-unit>
        <trans-unit id="ba5e2e5b2d73d903fb597da8809d6182f967fe26" translate="yes" xml:space="preserve">
          <source>AddrParseError::borrow_mut</source>
          <target state="translated">AddrParseError::borrow_mut</target>
        </trans-unit>
        <trans-unit id="eec3364cb0e6e631bd766aeee8473eb3c5d8b783" translate="yes" xml:space="preserve">
          <source>AddrParseError::cause</source>
          <target state="translated">AddrParseError::cause</target>
        </trans-unit>
        <trans-unit id="c8650de9923d2b7b74fd1fb851b3c0ddd4117148" translate="yes" xml:space="preserve">
          <source>AddrParseError::clone</source>
          <target state="translated">AddrParseError::clone</target>
        </trans-unit>
        <trans-unit id="53ddfe6ad8c3351ba945f5b6cd6f647e3fa91325" translate="yes" xml:space="preserve">
          <source>AddrParseError::clone_from</source>
          <target state="translated">AddrParseError::clone_from</target>
        </trans-unit>
        <trans-unit id="08355c15003499e28a7411918357d4a2f001b709" translate="yes" xml:space="preserve">
          <source>AddrParseError::clone_into</source>
          <target state="translated">AddrParseError::clone_into</target>
        </trans-unit>
        <trans-unit id="25cb3b50c76347b7f6a85db7c339595baf0f003c" translate="yes" xml:space="preserve">
          <source>AddrParseError::description</source>
          <target state="translated">AddrParseError::description</target>
        </trans-unit>
        <trans-unit id="10b9b968cc3bf94f7c5c39dea8bf21d7dd54888c" translate="yes" xml:space="preserve">
          <source>AddrParseError::eq</source>
          <target state="translated">AddrParseError::eq</target>
        </trans-unit>
        <trans-unit id="49cf29f6a6f46e91fe5234ee3c02c53e59ab7578" translate="yes" xml:space="preserve">
          <source>AddrParseError::fmt</source>
          <target state="translated">AddrParseError::fmt</target>
        </trans-unit>
        <trans-unit id="60405d6d13708e4d85c176a98cb4377bfb7ee9d7" translate="yes" xml:space="preserve">
          <source>AddrParseError::from</source>
          <target state="translated">AddrParseError::from</target>
        </trans-unit>
        <trans-unit id="dbfcfd8a7eba25880c9888cb8208fce8e37c895d" translate="yes" xml:space="preserve">
          <source>AddrParseError::into</source>
          <target state="translated">AddrParseError::into</target>
        </trans-unit>
        <trans-unit id="81cea92a5c59d76a750c2dc91be0b6bebf9c1c4f" translate="yes" xml:space="preserve">
          <source>AddrParseError::ne</source>
          <target state="translated">AddrParseError::ne</target>
        </trans-unit>
        <trans-unit id="85b81474bbc6034c17600e25b324b8f7ff89e65b" translate="yes" xml:space="preserve">
          <source>AddrParseError::source</source>
          <target state="translated">AddrParseError::source</target>
        </trans-unit>
        <trans-unit id="ba1fd539045fde8129efbfd52fe6aba361392170" translate="yes" xml:space="preserve">
          <source>AddrParseError::to_owned</source>
          <target state="translated">AddrParseError::to_owned</target>
        </trans-unit>
        <trans-unit id="e2552e76eca8011ad4e06db73e14e51d90cd4e86" translate="yes" xml:space="preserve">
          <source>AddrParseError::to_string</source>
          <target state="translated">AddrParseError::to_string</target>
        </trans-unit>
        <trans-unit id="ff5f57540e8ea426311cdc19ccc6971134dcdb7f" translate="yes" xml:space="preserve">
          <source>AddrParseError::try_from</source>
          <target state="translated">AddrParseError::try_from</target>
        </trans-unit>
        <trans-unit id="bec376def9a1123d4f124dfc1a6840567151a145" translate="yes" xml:space="preserve">
          <source>AddrParseError::try_into</source>
          <target state="translated">AddrParseError::try_into</target>
        </trans-unit>
        <trans-unit id="26c560bba3044ee670c8f3ee436e252e0e2dad89" translate="yes" xml:space="preserve">
          <source>AddrParseError::type_id</source>
          <target state="translated">AddrParseError::type_id</target>
        </trans-unit>
        <trans-unit id="5cf7a9b41ce47d27a30e791bbfb6bec2ca816fcf" translate="yes" xml:space="preserve">
          <source>Address to pointer cast</source>
          <target state="translated">ポインタキャスト先のアドレス</target>
        </trans-unit>
        <trans-unit id="d7aa7412717eb74583761a8560faa539aaf27874" translate="yes" xml:space="preserve">
          <source>Address type can be any implementor of &lt;a href=&quot;trait.tosocketaddrs&quot;&gt;&lt;code&gt;ToSocketAddrs&lt;/code&gt;&lt;/a&gt; trait. See its documentation for concrete examples.</source>
          <target state="translated">アドレスタイプは、&lt;a href=&quot;trait.tosocketaddrs&quot;&gt; &lt;code&gt;ToSocketAddrs&lt;/code&gt; &lt;/a&gt;トレイトの任意の実装者にすることができます。具体的な例については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="5a1149884af3cef69504ddd9428373fea25aa2ca" translate="yes" xml:space="preserve">
          <source>Addresses returned by the operating system that are not IP addresses are silently ignored.</source>
          <target state="translated">オペレーティングシステムが返すIPアドレスではないアドレスは静かに無視されます。</target>
        </trans-unit>
        <trans-unit id="5915abc490110180d1540b6234219f020e04a70a" translate="yes" xml:space="preserve">
          <source>Adds a &lt;a href=&quot;struct.peekable#method.peek&quot;&gt;&lt;code&gt;peek&lt;/code&gt;&lt;/a&gt; method to an iterator. See its documentation for more information.</source>
          <target state="translated">&lt;a href=&quot;struct.peekable#method.peek&quot;&gt; &lt;code&gt;peek&lt;/code&gt; &lt;/a&gt;メソッドをイテレータに追加します。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="c870f816a116db65c4b82439ff891f426f80ff41" translate="yes" xml:space="preserve">
          <source>Adds a &lt;code&gt;usize&lt;/code&gt;, returning &lt;code&gt;None&lt;/code&gt; on overflow.</source>
          <target state="translated">&lt;code&gt;usize&lt;/code&gt; を追加し、オーバーフロー時に &lt;code&gt;None&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="31cf127eab5bb935c2abe6cc6bba90f4ae0b71a3" translate="yes" xml:space="preserve">
          <source>Adds a new entry to the list output.</source>
          <target state="translated">リスト出力に新しいエントリを追加します。</target>
        </trans-unit>
        <trans-unit id="15cb5f7efe200723c3b721e295fbebc13dfc9e31" translate="yes" xml:space="preserve">
          <source>Adds a new entry to the map output.</source>
          <target state="translated">マップ出力に新しいエントリを追加します。</target>
        </trans-unit>
        <trans-unit id="0ef3b59a4597ecf10372b8f11eb26c1a52f2f272" translate="yes" xml:space="preserve">
          <source>Adds a new entry to the set output.</source>
          <target state="translated">セット出力に新しいエントリを追加します。</target>
        </trans-unit>
        <trans-unit id="60f1cf0bd8c4a027b017ecaa893cb9c74c91f78b" translate="yes" xml:space="preserve">
          <source>Adds a new field to the generated struct output.</source>
          <target state="translated">生成された struct 出力に新しいフィールドを追加します。</target>
        </trans-unit>
        <trans-unit id="b8fafafece871a01042ed5a0ab5c6c9b2e80442c" translate="yes" xml:space="preserve">
          <source>Adds a new field to the generated tuple struct output.</source>
          <target state="translated">生成されたタプル構造体の出力に新しいフィールドを追加します。</target>
        </trans-unit>
        <trans-unit id="0b002c9af6c57cafdfe28d411ed57cf85e2ebe81" translate="yes" xml:space="preserve">
          <source>Adds a value to the set, replacing the existing value, if any, that is equal to the given one. Returns the replaced value.</source>
          <target state="translated">値をセットに追加し、指定した値と等しい値があればそれを置き換えます。置き換えた値を返します。</target>
        </trans-unit>
        <trans-unit id="82f4c899437f1a62750b1776b4b1b6599530f1e6" translate="yes" xml:space="preserve">
          <source>Adds a value to the set.</source>
          <target state="translated">セットに値を追加します。</target>
        </trans-unit>
        <trans-unit id="f1a3f6979754c5ca7c9e4122b44f7541e9636107" translate="yes" xml:space="preserve">
          <source>Adds an argument to pass to the program.</source>
          <target state="translated">プログラムに渡す引数を追加します。</target>
        </trans-unit>
        <trans-unit id="658707171b5a956fa506d45ca2578865d314c2a0" translate="yes" xml:space="preserve">
          <source>Adds an element first in the list.</source>
          <target state="translated">リストの最初に要素を追加します。</target>
        </trans-unit>
        <trans-unit id="969d7672cd1e94e2e3f766816cef88b15855a861" translate="yes" xml:space="preserve">
          <source>Adds multiple arguments to pass to the program.</source>
          <target state="translated">プログラムに渡す複数の引数を追加します。</target>
        </trans-unit>
        <trans-unit id="68adca23d26862cb362a13d5d500e729dc911a8b" translate="yes" xml:space="preserve">
          <source>Adds one to this step, returning the result.</source>
          <target state="translated">このステップに1つ追加し、結果を返します。</target>
        </trans-unit>
        <trans-unit id="0151250bd8bdb46ad8abec9aa6c7d2adc6f4d3c2" translate="yes" xml:space="preserve">
          <source>Adds or updates multiple environment variable mappings.</source>
          <target state="translated">複数の環境変数のマッピングを追加または更新します。</target>
        </trans-unit>
        <trans-unit id="c1ea158bb2722c6d5db848a523c49d2d1b4ef996" translate="yes" xml:space="preserve">
          <source>Adds support for special Unix file types such as block/character devices, pipes, and sockets.</source>
          <target state="translated">ブロック/文字デバイス、パイプ、ソケットなどの特殊な Unix ファイルタイプのサポートを追加しました。</target>
        </trans-unit>
        <trans-unit id="671bf2741316962d688bf4f15b0556af370525fd" translate="yes" xml:space="preserve">
          <source>Adds the contents of an iterator of entries to the list output.</source>
          <target state="translated">エントリのイテレータの内容をリスト出力に追加します。</target>
        </trans-unit>
        <trans-unit id="6172d9346f85a8afb18c30e9f6e11792ac6685f3" translate="yes" xml:space="preserve">
          <source>Adds the contents of an iterator of entries to the map output.</source>
          <target state="translated">エントリのイテレータの内容をマップ出力に追加します。</target>
        </trans-unit>
        <trans-unit id="45f4916d90bbb31a57ac59c642d372fc8465632a" translate="yes" xml:space="preserve">
          <source>Adds the contents of an iterator of entries to the set output.</source>
          <target state="translated">エントリのイテレータの内容をセット出力に追加します。</target>
        </trans-unit>
        <trans-unit id="525909640b425a3865879f7bf9b4776de0cbde79" translate="yes" xml:space="preserve">
          <source>Adds the key part of a new entry to the map output.</source>
          <target state="translated">新しいエントリのキー部分をマップ出力に追加します。</target>
        </trans-unit>
        <trans-unit id="82b33d8253f240296388fcf0db6ce4c17b122fb9" translate="yes" xml:space="preserve">
          <source>Adds the value part of a new entry to the map output.</source>
          <target state="translated">新しいエントリの値の部分をマップ出力に追加します。</target>
        </trans-unit>
        <trans-unit id="64dedb52a39f499be5ddacaf33bea0b6af530c2b" translate="yes" xml:space="preserve">
          <source>Adds to the current value, returning the previous value.</source>
          <target state="translated">現在の値に追加し、前の値を返します。</target>
        </trans-unit>
        <trans-unit id="fec400f1cdf6c0803479c71a8ae238f9468f9b58" translate="yes" xml:space="preserve">
          <source>Adds to the current value, returning the previous value. The stabilized version of this intrinsic is available on the &lt;code&gt;std::sync::atomic&lt;/code&gt; types via the &lt;code&gt;fetch_add&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt;&lt;code&gt;Ordering::AcqRel&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicisize#method.fetch_add&quot;&gt;&lt;code&gt;AtomicIsize::fetch_add&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">現在の値に加算して、前の値を返します。この固有の安定したバージョンで利用可能である &lt;code&gt;std::sync::atomic&lt;/code&gt; を介した種類 &lt;code&gt;fetch_add&lt;/code&gt; 渡すことによって、法&lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt; &lt;code&gt;Ordering::AcqRel&lt;/code&gt; &lt;/a&gt;として &lt;code&gt;order&lt;/code&gt; 。たとえば、&lt;a href=&quot;../sync/atomic/struct.atomicisize#method.fetch_add&quot;&gt; &lt;code&gt;AtomicIsize::fetch_add&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="be9a5a4d4b7398c45da8fcba5bded3bbc8f71847" translate="yes" xml:space="preserve">
          <source>Adds to the current value, returning the previous value. The stabilized version of this intrinsic is available on the &lt;code&gt;std::sync::atomic&lt;/code&gt; types via the &lt;code&gt;fetch_add&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt;&lt;code&gt;Ordering::Acquire&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicisize#method.fetch_add&quot;&gt;&lt;code&gt;AtomicIsize::fetch_add&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">現在の値に加算して、前の値を返します。この組み込み関数の安定化されたバージョンは、 &lt;code&gt;fetch_add&lt;/code&gt; &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt; &lt;code&gt;Ordering::Acquire&lt;/code&gt; &lt;/a&gt;を &lt;code&gt;order&lt;/code&gt; として渡すことにより、fetch_addメソッドを介して &lt;code&gt;std::sync::atomic&lt;/code&gt; タイプで使用できます。たとえば、&lt;a href=&quot;../sync/atomic/struct.atomicisize#method.fetch_add&quot;&gt; &lt;code&gt;AtomicIsize::fetch_add&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e8510188bc5ebdc1c7bffee425e4b31fab3c7278" translate="yes" xml:space="preserve">
          <source>Adds to the current value, returning the previous value. The stabilized version of this intrinsic is available on the &lt;code&gt;std::sync::atomic&lt;/code&gt; types via the &lt;code&gt;fetch_add&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt;&lt;code&gt;Ordering::Relaxed&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicisize#method.fetch_add&quot;&gt;&lt;code&gt;AtomicIsize::fetch_add&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">現在の値に加算して、前の値を返します。この組み込み関数の安定化バージョンは、 &lt;code&gt;fetch_add&lt;/code&gt; &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt; &lt;code&gt;Ordering::Relaxed&lt;/code&gt; &lt;/a&gt;を &lt;code&gt;order&lt;/code&gt; として渡すことにより、fetch_addメソッドを介して &lt;code&gt;std::sync::atomic&lt;/code&gt; タイプで使用できます。たとえば、&lt;a href=&quot;../sync/atomic/struct.atomicisize#method.fetch_add&quot;&gt; &lt;code&gt;AtomicIsize::fetch_add&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5d050db3800c7dd71e5057e0d9def9358e61a419" translate="yes" xml:space="preserve">
          <source>Adds to the current value, returning the previous value. The stabilized version of this intrinsic is available on the &lt;code&gt;std::sync::atomic&lt;/code&gt; types via the &lt;code&gt;fetch_add&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt;&lt;code&gt;Ordering::Release&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicisize#method.fetch_add&quot;&gt;&lt;code&gt;AtomicIsize::fetch_add&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">現在の値に加算して、前の値を返します。この組み込み関数の安定化されたバージョンは、 &lt;code&gt;fetch_add&lt;/code&gt; &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt; &lt;code&gt;Ordering::Release&lt;/code&gt; &lt;/a&gt;を &lt;code&gt;order&lt;/code&gt; として渡すことにより、fetch_addメソッドを介して &lt;code&gt;std::sync::atomic&lt;/code&gt; タイプで使用できます。たとえば、&lt;a href=&quot;../sync/atomic/struct.atomicisize#method.fetch_add&quot;&gt; &lt;code&gt;AtomicIsize::fetch_add&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="1973476bdfd162d29c3bf0eb0f1911803377eae3" translate="yes" xml:space="preserve">
          <source>Adds to the current value, returning the previous value. The stabilized version of this intrinsic is available on the &lt;code&gt;std::sync::atomic&lt;/code&gt; types via the &lt;code&gt;fetch_add&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt;&lt;code&gt;Ordering::SeqCst&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicisize#method.fetch_add&quot;&gt;&lt;code&gt;AtomicIsize::fetch_add&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">現在の値に加算して、前の値を返します。この固有の安定したバージョンで利用可能である &lt;code&gt;std::sync::atomic&lt;/code&gt; を介した種類 &lt;code&gt;fetch_add&lt;/code&gt; 渡すことによって、法&lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt; &lt;code&gt;Ordering::SeqCst&lt;/code&gt; &lt;/a&gt;として &lt;code&gt;order&lt;/code&gt; 。たとえば、&lt;a href=&quot;../sync/atomic/struct.atomicisize#method.fetch_add&quot;&gt; &lt;code&gt;AtomicIsize::fetch_add&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="eb6c863d4412a4b55b1d93cf3d5f7516528289e4" translate="yes" xml:space="preserve">
          <source>Advance the internal cursor of the slice.</source>
          <target state="translated">スライスの内部カーソルを前進させます。</target>
        </trans-unit>
        <trans-unit id="b2ed5841682a101d798c6152b62dca74cfea4b15" translate="yes" xml:space="preserve">
          <source>Advance to the next arg.</source>
          <target state="translated">次のargに進む。</target>
        </trans-unit>
        <trans-unit id="96731dbaea6a5720dd33b64dc334ff765eec736a" translate="yes" xml:space="preserve">
          <source>Advanced Features</source>
          <target state="translated">高度な機能</target>
        </trans-unit>
        <trans-unit id="7f4668d91bf23526ef1f05a0e7de95630615e93b" translate="yes" xml:space="preserve">
          <source>Advanced Functions and Closures</source>
          <target state="translated">高度な機能とクロージャ</target>
        </trans-unit>
        <trans-unit id="d5d49bfe71b011aa5e9e308b0bd9089c84c3c245" translate="yes" xml:space="preserve">
          <source>Advanced Traits</source>
          <target state="translated">高度な特性</target>
        </trans-unit>
        <trans-unit id="ae95896c3a125d9a5e8ed95928ac9721dd8d3752" translate="yes" xml:space="preserve">
          <source>Advanced Types</source>
          <target state="translated">高度なタイプ</target>
        </trans-unit>
        <trans-unit id="9b4509b6a0eecdabec69457f9e139e56f305f9a7" translate="yes" xml:space="preserve">
          <source>Advanced functions and closures: function pointers and returning closures</source>
          <target state="translated">高度な関数とクロージャ:関数ポインタと戻り値のクロージャ</target>
        </trans-unit>
        <trans-unit id="9c622feb39e22136f98cc1cfffb6cc56c0cb6ac7" translate="yes" xml:space="preserve">
          <source>Advanced traits: associated types, default type parameters, fully qualified syntax, supertraits, and the newtype pattern in relation to traits</source>
          <target state="translated">高度な形質:関連付けられた型、デフォルトの型パラメータ、完全修飾構文、スーパー形質、形質に関連したニュータイプパターン</target>
        </trans-unit>
        <trans-unit id="d050af08a92ff2ff0056bb035493a0f2f1620de8" translate="yes" xml:space="preserve">
          <source>Advanced types: more about the newtype pattern, type aliases, the never type, and dynamically sized types</source>
          <target state="translated">高度な型:newtype パターン、型のエイリアス、never 型、動的なサイズの型についての詳細</target>
        </trans-unit>
        <trans-unit id="bc73315bb680ddc61259cb6b2cc7f603f7017af5" translate="yes" xml:space="preserve">
          <source>Advances the iterator and returns the next value.</source>
          <target state="translated">イテレータを進め、次の値を返します。</target>
        </trans-unit>
        <trans-unit id="47778efc70c16f19b03a33e09324cdfef37b8397" translate="yes" xml:space="preserve">
          <source>Advances the iterator and returns the next value. &lt;a href=&quot;../../../iter/trait.iterator#tymethod.next&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">イテレータを進め、次の値を返します。&lt;a href=&quot;../../../iter/trait.iterator#tymethod.next&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e5c10d1dad50204036d6641dc96f179feac3c880" translate="yes" xml:space="preserve">
          <source>Advances the iterator and returns the next value. &lt;a href=&quot;../../iter/trait.iterator#tymethod.next&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">イテレータを進め、次の値を返します。&lt;a href=&quot;../../iter/trait.iterator#tymethod.next&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e0d17cb524aa65c6531ab7f58b22a2915be47179" translate="yes" xml:space="preserve">
          <source>Advances the iterator and returns the next value. &lt;a href=&quot;../iter/trait.iterator#tymethod.next&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">イテレータを進め、次の値を返します。&lt;a href=&quot;../iter/trait.iterator#tymethod.next&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2af190b4bf87220daaa7fcdfebb435d1dda577b1" translate="yes" xml:space="preserve">
          <source>Advances the iterator and returns the next value. &lt;a href=&quot;iter/trait.iterator#tymethod.next&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">イテレータを進め、次の値を返します。&lt;a href=&quot;iter/trait.iterator#tymethod.next&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="75ff050bc0f28af247ba9f7e987965071e370a8f" translate="yes" xml:space="preserve">
          <source>Advances the iterator and returns the next value. &lt;a href=&quot;trait.iterator#tymethod.next&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">イテレータを進め、次の値を返します。&lt;a href=&quot;trait.iterator#tymethod.next&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="6c629d1551783824351df46023949d62af853825" translate="yes" xml:space="preserve">
          <source>Advances the iterator by &lt;code&gt;n&lt;/code&gt; elements.</source>
          <target state="translated">イテレータを &lt;code&gt;n&lt;/code&gt; 個の要素だけ進めます。</target>
        </trans-unit>
        <trans-unit id="c9fef351384b0144be153be53f79c7fc476bedfc" translate="yes" xml:space="preserve">
          <source>Advances the iterator by &lt;code&gt;n&lt;/code&gt; elements. &lt;a href=&quot;../../../iter/trait.iterator#method.advance_by&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">イテレータを &lt;code&gt;n&lt;/code&gt; 個の要素だけ進めます。&lt;a href=&quot;../../../iter/trait.iterator#method.advance_by&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="41de8018927ed7b54950980aec11f8f12d46606f" translate="yes" xml:space="preserve">
          <source>Advances the iterator by &lt;code&gt;n&lt;/code&gt; elements. &lt;a href=&quot;../../iter/trait.iterator#method.advance_by&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">イテレータを &lt;code&gt;n&lt;/code&gt; 個の要素だけ進めます。&lt;a href=&quot;../../iter/trait.iterator#method.advance_by&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="09741f9824923fbfa016237025da37c62ee69dcc" translate="yes" xml:space="preserve">
          <source>Advances the iterator by &lt;code&gt;n&lt;/code&gt; elements. &lt;a href=&quot;../iter/trait.iterator#method.advance_by&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">イテレータを &lt;code&gt;n&lt;/code&gt; 個の要素だけ進めます。&lt;a href=&quot;../iter/trait.iterator#method.advance_by&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5c3b9d2faa7136ddd042e31d3939c786f1c8da2c" translate="yes" xml:space="preserve">
          <source>Advances the iterator by &lt;code&gt;n&lt;/code&gt; elements. &lt;a href=&quot;iter/trait.iterator#method.advance_by&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">イテレータを &lt;code&gt;n&lt;/code&gt; 個の要素だけ進めます。&lt;a href=&quot;iter/trait.iterator#method.advance_by&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="74fde24899e07da847358f17c288cfcfe8ae74ea" translate="yes" xml:space="preserve">
          <source>Advances the iterator by &lt;code&gt;n&lt;/code&gt; elements. &lt;a href=&quot;trait.iterator#method.advance_by&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">イテレータを &lt;code&gt;n&lt;/code&gt; 個の要素だけ進めます。&lt;a href=&quot;trait.iterator#method.advance_by&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4d66799c08b5e49880157cde9e0d13d223a5c3a3" translate="yes" xml:space="preserve">
          <source>Advances the iterator from the back by &lt;code&gt;n&lt;/code&gt; elements.</source>
          <target state="translated">イテレータを後ろから &lt;code&gt;n&lt;/code&gt; 要素進めます。</target>
        </trans-unit>
        <trans-unit id="4f1f4e504d47f61c437fd02db056daa6ec47dc6c" translate="yes" xml:space="preserve">
          <source>Advances the iterator from the back by &lt;code&gt;n&lt;/code&gt; elements. &lt;a href=&quot;../../iter/trait.doubleendediterator#method.advance_back_by&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">イテレータを後ろから &lt;code&gt;n&lt;/code&gt; 要素進めます。&lt;a href=&quot;../../iter/trait.doubleendediterator#method.advance_back_by&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4d59517951217a4fde7238ff6227ce7834fa1b5e" translate="yes" xml:space="preserve">
          <source>Advances the iterator from the back by &lt;code&gt;n&lt;/code&gt; elements. &lt;a href=&quot;../iter/trait.doubleendediterator#method.advance_back_by&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">イテレータを後ろから &lt;code&gt;n&lt;/code&gt; 要素進めます。&lt;a href=&quot;../iter/trait.doubleendediterator#method.advance_back_by&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="34bb721017aea2eeaededef2c5c856023eca871d" translate="yes" xml:space="preserve">
          <source>Advances the iterator from the back by &lt;code&gt;n&lt;/code&gt; elements. &lt;a href=&quot;iter/trait.doubleendediterator#method.advance_back_by&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">イテレータを後ろから &lt;code&gt;n&lt;/code&gt; 要素進めます。&lt;a href=&quot;iter/trait.doubleendediterator#method.advance_back_by&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="148c4a64097476a8bb5779b8f3210d3b2962ff05" translate="yes" xml:space="preserve">
          <source>Advances the iterator from the back by &lt;code&gt;n&lt;/code&gt; elements. &lt;a href=&quot;trait.doubleendediterator#method.advance_back_by&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">イテレータを後ろから &lt;code&gt;n&lt;/code&gt; 要素進めます。&lt;a href=&quot;trait.doubleendediterator#method.advance_back_by&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="fc5df98fcac936e0dd69b6d3ac4bff062078ea9f" translate="yes" xml:space="preserve">
          <source>After &lt;code&gt;#[test]&lt;/code&gt; we add the &lt;code&gt;#[ignore]&lt;/code&gt; line to the test we want to exclude. Now when we run our tests, &lt;code&gt;it_works&lt;/code&gt; runs, but &lt;code&gt;expensive_test&lt;/code&gt; doesn&amp;rsquo;t:</source>
          <target state="translated">&lt;code&gt;#[test]&lt;/code&gt; の後に、除外するテストに &lt;code&gt;#[ignore]&lt;/code&gt; 行を追加します。我々はテストを実行すると、 &lt;code&gt;it_works&lt;/code&gt; が実行されますが、 &lt;code&gt;expensive_test&lt;/code&gt; はしません。</target>
        </trans-unit>
        <trans-unit id="471c4d510c078cce605f07ee5e3b57ac50f1448c" translate="yes" xml:space="preserve">
          <source>After &lt;code&gt;crate&lt;/code&gt;, we include each of the successive modules until we make our way to &lt;code&gt;add_to_waitlist&lt;/code&gt;. You can imagine a filesystem with the same structure, and we&amp;rsquo;d specify the path &lt;code&gt;/front_of_house/hosting/add_to_waitlist&lt;/code&gt; to run the &lt;code&gt;add_to_waitlist&lt;/code&gt; program; using the &lt;code&gt;crate&lt;/code&gt; name to start from the crate root is like using &lt;code&gt;/&lt;/code&gt; to start from the filesystem root in your shell.</source>
          <target state="translated">&lt;code&gt;crate&lt;/code&gt; 後、 &lt;code&gt;add_to_waitlist&lt;/code&gt; に進むまで、連続する各モジュールを含めます。同じ構造のファイルシステムを想像できます &lt;code&gt;/front_of_house/hosting/add_to_waitlist&lt;/code&gt; &lt;code&gt;add_to_waitlist&lt;/code&gt; プログラムを実行するには、パス/ front_of_house / hosting / add_to_waitlistを指定します。 &lt;code&gt;crate&lt;/code&gt; 名を使用してクレートルートから開始するのは、 &lt;code&gt;/&lt;/code&gt; を使用してシェルのファイルシステムルートから開始するのと同じです。</target>
        </trans-unit>
        <trans-unit id="72900f50989a74635a45f599f7af957665be760a" translate="yes" xml:space="preserve">
          <source>After &lt;code&gt;false&lt;/code&gt; is returned, &lt;code&gt;skip_while()&lt;/code&gt;'s job is over, and the rest of the elements are yielded.</source>
          <target state="translated">&lt;code&gt;false&lt;/code&gt; が返された後、 &lt;code&gt;skip_while()&lt;/code&gt; のジョブは終了し、残りの要素が生成されます。</target>
        </trans-unit>
        <trans-unit id="a8fe2c79e763fccf582bfde64f2cf9442ce9db7c" translate="yes" xml:space="preserve">
          <source>After &lt;code&gt;false&lt;/code&gt; is returned, &lt;code&gt;take_while()&lt;/code&gt;'s job is over, and the rest of the elements are ignored.</source>
          <target state="translated">&lt;code&gt;false&lt;/code&gt; が返された後、 &lt;code&gt;take_while()&lt;/code&gt; のジョブは終了し、残りの要素は無視されます。</target>
        </trans-unit>
        <trans-unit id="d9d86d37284d13e516ed39f67cc2c963b4451b66" translate="yes" xml:space="preserve">
          <source>After &lt;code&gt;leaf&lt;/code&gt; is created, its &lt;code&gt;Rc&amp;lt;Node&amp;gt;&lt;/code&gt; has a strong count of 1 and a weak count of 0. In the inner scope, we create &lt;code&gt;branch&lt;/code&gt; and associate it with &lt;code&gt;leaf&lt;/code&gt;, at which point when we print the counts, the &lt;code&gt;Rc&amp;lt;Node&amp;gt;&lt;/code&gt; in &lt;code&gt;branch&lt;/code&gt; will have a strong count of 1 and a weak count of 1 (for &lt;code&gt;leaf.parent&lt;/code&gt; pointing to &lt;code&gt;branch&lt;/code&gt; with a &lt;code&gt;Weak&amp;lt;Node&amp;gt;&lt;/code&gt;). When we print the counts in &lt;code&gt;leaf&lt;/code&gt;, we&amp;rsquo;ll see it will have a strong count of 2, because &lt;code&gt;branch&lt;/code&gt; now has a clone of the &lt;code&gt;Rc&amp;lt;Node&amp;gt;&lt;/code&gt; of &lt;code&gt;leaf&lt;/code&gt; stored in &lt;code&gt;branch.children&lt;/code&gt;, but will still have a weak count of 0.</source>
          <target state="translated">&lt;code&gt;leaf&lt;/code&gt; が作成された後、その &lt;code&gt;Rc&amp;lt;Node&amp;gt;&lt;/code&gt; は1の強いカウントと0の弱いカウントを持ちます。内部スコープで &lt;code&gt;branch&lt;/code&gt; を作成し、それを &lt;code&gt;leaf&lt;/code&gt; に関連付けます。この時点で、カウントを出力するとき、 &lt;code&gt;Rc&amp;lt;Node&amp;gt;&lt;/code&gt; &lt;code&gt;branch&lt;/code&gt; 内のカウントは強いカウント1と弱いカウント1になります（ &lt;code&gt;leaf.parent&lt;/code&gt; が &lt;code&gt;Weak&amp;lt;Node&amp;gt;&lt;/code&gt; &lt;code&gt;branch&lt;/code&gt; を指している場合）。我々はカウントを印刷するとき &lt;code&gt;leaf&lt;/code&gt; 、我々はので、それは、2の強力な数を持っています表示されます &lt;code&gt;branch&lt;/code&gt; 今のクローンがある &lt;code&gt;Rc&amp;lt;Node&amp;gt;&lt;/code&gt; の &lt;code&gt;leaf&lt;/code&gt; に保存されている &lt;code&gt;branch.children&lt;/code&gt; を、ただしカウントは0のままです。</target>
        </trans-unit>
        <trans-unit id="4cde8475e322a79219c56c165831cd534e7a6b56" translate="yes" xml:space="preserve">
          <source>After an iterator returns &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt;, future calls may or may not yield &lt;a href=&quot;../option/enum.option#variant.Some&quot;&gt;&lt;code&gt;Some(T)&lt;/code&gt;&lt;/a&gt; again. &lt;code&gt;fuse()&lt;/code&gt; adapts an iterator, ensuring that after a &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; is given, it will always return &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; forever.</source>
          <target state="translated">イテレータが&lt;a href=&quot;../option/enum.option#variant.None&quot;&gt; &lt;code&gt;None&lt;/code&gt; を&lt;/a&gt;返した後は、今後の呼び出しで&lt;a href=&quot;../option/enum.option#variant.Some&quot;&gt; &lt;code&gt;Some(T)&lt;/code&gt; が&lt;/a&gt;再び生成される場合と生成されない場合があります。 &lt;code&gt;fuse()&lt;/code&gt; はイテレータを適応させ、&lt;a href=&quot;../option/enum.option#variant.None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt;が指定された後は常に永久に&lt;a href=&quot;../option/enum.option#variant.None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt;を返すようにします。</target>
        </trans-unit>
        <trans-unit id="568e22b9792d58baafe078fb9cf96ab4d0418d3f" translate="yes" xml:space="preserve">
          <source>After applying this closure to every element of the iterator, &lt;code&gt;fold()&lt;/code&gt; returns the accumulator.</source>
          <target state="translated">イテレータのすべての要素にこのクロージャを適用した後、 &lt;code&gt;fold()&lt;/code&gt; はアキュムレータを返します。</target>
        </trans-unit>
        <trans-unit id="c5c6fbc1d802b5c2313fc5d60dee8a9485ff2828" translate="yes" xml:space="preserve">
          <source>After applying this closure to every element of the iterator, &lt;code&gt;rfold()&lt;/code&gt; returns the accumulator.</source>
          <target state="translated">このクロージャーをイテレーターのすべてのエレメントに適用した後、 &lt;code&gt;rfold()&lt;/code&gt; はアキュムレーターを戻します。</target>
        </trans-unit>
        <trans-unit id="dbffd4bfa583f6bbb8aa4395e63df871ca521db4" translate="yes" xml:space="preserve">
          <source>After calling &lt;code&gt;v.as_mut_ptr()&lt;/code&gt; and transmitting the ownership of the data to &lt;code&gt;s&lt;/code&gt;, the &lt;code&gt;v&lt;/code&gt; value is invalid. Even when a value is just moved to &lt;code&gt;mem::forget&lt;/code&gt; (which won't inspect it), some types have strict requirements on their values that make them invalid when dangling or no longer owned. Using invalid values in any way, including passing them to or returning them from functions, constitutes undefined behavior and may break the assumptions made by the compiler.</source>
          <target state="translated">&lt;code&gt;v.as_mut_ptr()&lt;/code&gt; を呼び出し、データの所有権を &lt;code&gt;s&lt;/code&gt; に送信した後、 &lt;code&gt;v&lt;/code&gt; 値は無効です。値が &lt;code&gt;mem::forget&lt;/code&gt; （検査されない）に移動された場合でも、一部のタイプには値に厳しい要件があり、ぶら下がっているときや所有されていないときに無効になります。関数への受け渡しや関数からの返送など、何らかの方法で無効な値を使用すると、未定義の動作が構成され、コンパイラによる想定が破られる可能性があります。</target>
        </trans-unit>
        <trans-unit id="bc617f1ae4108d460b1173f3a7067fe06a8d7ed6" translate="yes" xml:space="preserve">
          <source>After calling this function, the caller is responsible for the memory previously managed by the &lt;code&gt;Box&lt;/code&gt;. In particular, the caller should properly destroy &lt;code&gt;T&lt;/code&gt; and release the memory, taking into account the &lt;a href=&quot;index#memory-layout&quot;&gt;memory layout&lt;/a&gt; used by &lt;code&gt;Box&lt;/code&gt;. The easiest way to do this is to convert the raw pointer back into a &lt;code&gt;Box&lt;/code&gt; with the &lt;a href=&quot;struct.box#method.from_raw&quot;&gt;&lt;code&gt;Box::from_raw&lt;/code&gt;&lt;/a&gt; function, allowing the &lt;code&gt;Box&lt;/code&gt; destructor to perform the cleanup.</source>
          <target state="translated">この関数を呼び出した後、呼び出し元は以前に &lt;code&gt;Box&lt;/code&gt; によって管理されていたメモリを担当します。特に、呼び出し元は、 &lt;code&gt;Box&lt;/code&gt; で使用される&lt;a href=&quot;index#memory-layout&quot;&gt;メモリレイアウト&lt;/a&gt;を考慮して、 &lt;code&gt;T&lt;/code&gt; を適切に破棄し、メモリを解放する必要があります。これを行う最も簡単な方法は、&lt;a href=&quot;struct.box#method.from_raw&quot;&gt; &lt;code&gt;Box::from_raw&lt;/code&gt; &lt;/a&gt;関数を使用して生のポインターを &lt;code&gt;Box&lt;/code&gt; に戻し、 &lt;code&gt;Box&lt;/code&gt; デストラクタがクリーンアップを実行できるようにすることです。</target>
        </trans-unit>
        <trans-unit id="7cad9f1c8273ecabd3f00d51212a63d92e2f707f" translate="yes" xml:space="preserve">
          <source>After calling this function, the caller is responsible for the memory previously managed by the &lt;code&gt;Box&lt;/code&gt;. In particular, the caller should properly destroy &lt;code&gt;T&lt;/code&gt; and release the memory, taking into account the &lt;a href=&quot;index#memory-layout&quot;&gt;memory layout&lt;/a&gt; used by &lt;code&gt;Box&lt;/code&gt;. The easiest way to do this is to convert the raw pointer back into a &lt;code&gt;Box&lt;/code&gt; with the &lt;a href=&quot;struct.box#method.from_raw_in&quot;&gt;&lt;code&gt;Box::from_raw_in&lt;/code&gt;&lt;/a&gt; function, allowing the &lt;code&gt;Box&lt;/code&gt; destructor to perform the cleanup.</source>
          <target state="translated">この関数を呼び出した後、呼び出し元は、以前に &lt;code&gt;Box&lt;/code&gt; によって管理されていたメモリを担当します。特に、呼び出し元は、 &lt;code&gt;Box&lt;/code&gt; で使用される&lt;a href=&quot;index#memory-layout&quot;&gt;メモリレイアウト&lt;/a&gt;を考慮して、 &lt;code&gt;T&lt;/code&gt; を適切に破棄し、メモリを解放する必要があります。これを行う最も簡単な方法は、&lt;a href=&quot;struct.box#method.from_raw_in&quot;&gt; &lt;code&gt;Box::from_raw_in&lt;/code&gt; &lt;/a&gt;関数を使用して生のポインターを &lt;code&gt;Box&lt;/code&gt; に変換し直し、 &lt;code&gt;Box&lt;/code&gt; デストラクタがクリーンアップを実行できるようにすることです。</target>
        </trans-unit>
        <trans-unit id="47bfd04ad6639821cf514c2ef1fb0d7b6f63839d" translate="yes" xml:space="preserve">
          <source>After calling this function, the caller is responsible for the memory previously managed by the &lt;code&gt;Box&lt;/code&gt;. In particular, the caller should properly destroy &lt;code&gt;T&lt;/code&gt; and release the memory. The easiest way to do so is to convert the &lt;code&gt;NonNull&amp;lt;T&amp;gt;&lt;/code&gt; pointer into a raw pointer and back into a &lt;code&gt;Box&lt;/code&gt; with the &lt;a href=&quot;struct.box#method.from_raw&quot;&gt;&lt;code&gt;Box::from_raw&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">この関数を呼び出した後、呼び出し元は以前に &lt;code&gt;Box&lt;/code&gt; によって管理されていたメモリを担当します。特に、呼び出し元は &lt;code&gt;T&lt;/code&gt; を適切に破棄し、メモリを解放する必要があります。そうするための最も簡単な方法は、変換することである &lt;code&gt;NonNull&amp;lt;T&amp;gt;&lt;/code&gt; に生のポインタと背中にポインタ &lt;code&gt;Box&lt;/code&gt; と&lt;a href=&quot;struct.box#method.from_raw&quot;&gt; &lt;code&gt;Box::from_raw&lt;/code&gt; &lt;/a&gt;機能。</target>
        </trans-unit>
        <trans-unit id="4e43a947242c53bd7c33db133c10548b5bd4c117" translate="yes" xml:space="preserve">
          <source>After calling this function, the caller is responsible for the memory previously managed by the &lt;code&gt;String&lt;/code&gt;. The only way to do this is to convert the raw pointer, length, and capacity back into a &lt;code&gt;String&lt;/code&gt; with the &lt;a href=&quot;struct.string#method.from_raw_parts&quot;&gt;&lt;code&gt;from_raw_parts&lt;/code&gt;&lt;/a&gt; function, allowing the destructor to perform the cleanup.</source>
          <target state="translated">この関数を呼び出した後、呼び出し元は、以前に &lt;code&gt;String&lt;/code&gt; によって管理されていたメモリを担当します。これを行う唯一の方法は、&lt;a href=&quot;struct.string#method.from_raw_parts&quot;&gt; &lt;code&gt;from_raw_parts&lt;/code&gt; &lt;/a&gt;関数を使用して、生のポインター、長さ、および容量を &lt;code&gt;String&lt;/code&gt; に変換し直し、デストラクタがクリーンアップを実行できるようにすることです。</target>
        </trans-unit>
        <trans-unit id="102d1de8629b57b21dac90f6d521b49048558b05" translate="yes" xml:space="preserve">
          <source>After calling this function, the caller is responsible for the memory previously managed by the &lt;code&gt;Vec&lt;/code&gt;. The only way to do this is to convert the raw pointer, length, and capacity back into a &lt;code&gt;Vec&lt;/code&gt; with the &lt;a href=&quot;struct.vec#method.from_raw_parts&quot;&gt;&lt;code&gt;from_raw_parts&lt;/code&gt;&lt;/a&gt; function, allowing the destructor to perform the cleanup.</source>
          <target state="translated">この関数を呼び出した後、呼び出し元は以前に &lt;code&gt;Vec&lt;/code&gt; によって管理されていたメモリを担当します。これを行う唯一の方法は、&lt;a href=&quot;struct.vec#method.from_raw_parts&quot;&gt; &lt;code&gt;from_raw_parts&lt;/code&gt; &lt;/a&gt;関数を使用して生のポインター、長さ、および容量を &lt;code&gt;Vec&lt;/code&gt; に変換し直し、デストラクタがクリーンアップを実行できるようにすることです。</target>
        </trans-unit>
        <trans-unit id="abe8789d4d89fe16b0db6cdf88a765be8535c340" translate="yes" xml:space="preserve">
          <source>After calling this function, the caller is responsible for the memory previously managed by the &lt;code&gt;Vec&lt;/code&gt;. The only way to do this is to convert the raw pointer, length, and capacity back into a &lt;code&gt;Vec&lt;/code&gt; with the &lt;a href=&quot;struct.vec#method.from_raw_parts_in&quot;&gt;&lt;code&gt;from_raw_parts_in&lt;/code&gt;&lt;/a&gt; function, allowing the destructor to perform the cleanup.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d10c7bbc7ba580c584a70857a59b76ef027af83" translate="yes" xml:space="preserve">
          <source>After calling this function, the raw pointer is owned by the resulting &lt;code&gt;Box&lt;/code&gt;. Specifically, the &lt;code&gt;Box&lt;/code&gt; destructor will call the destructor of &lt;code&gt;T&lt;/code&gt; and free the allocated memory. For this to be safe, the memory must have been allocated in accordance with the &lt;a href=&quot;index#memory-layout&quot;&gt;memory layout&lt;/a&gt; used by &lt;code&gt;Box&lt;/code&gt; .</source>
          <target state="translated">この関数を呼び出した後、生のポインタは結果の &lt;code&gt;Box&lt;/code&gt; によって所有されます。具体的には、 &lt;code&gt;Box&lt;/code&gt; デストラクタは &lt;code&gt;T&lt;/code&gt; のデストラクタを呼び出し、割り当てられたメモリを解放します。これを安全にするには、 &lt;code&gt;Box&lt;/code&gt; が使用する&lt;a href=&quot;index#memory-layout&quot;&gt;メモリレイアウト&lt;/a&gt;に従ってメモリを割り当てる必要があります。</target>
        </trans-unit>
        <trans-unit id="ef76ea7ae2deed3f017eb7251cbd0d7c334a7aaf" translate="yes" xml:space="preserve">
          <source>After changing &lt;code&gt;println!&lt;/code&gt; to &lt;code&gt;eprintln!&lt;/code&gt;, let&amp;rsquo;s run the program again in the same way, without any arguments and redirecting standard output with &lt;code&gt;&amp;gt;&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;println!&lt;/code&gt; 変更した後！ &lt;code&gt;eprintln!&lt;/code&gt; 、引数なしで標準出力を &lt;code&gt;&amp;gt;&lt;/code&gt; でリダイレクトして、同じ方法でもう一度プログラムを実行してみましょう。</target>
        </trans-unit>
        <trans-unit id="93133f68d39862996d0135a231d1905a95e950c2" translate="yes" xml:space="preserve">
          <source>After creating a &lt;code&gt;TcpListener&lt;/code&gt; by &lt;a href=&quot;#method.bind&quot;&gt;&lt;code&gt;bind&lt;/code&gt;&lt;/a&gt;ing it to a socket address, it listens for incoming TCP connections. These can be accepted by calling &lt;a href=&quot;#method.accept&quot;&gt;&lt;code&gt;accept&lt;/code&gt;&lt;/a&gt; or by iterating over the &lt;a href=&quot;struct.incoming&quot;&gt;&lt;code&gt;Incoming&lt;/code&gt;&lt;/a&gt; iterator returned by &lt;a href=&quot;#method.incoming&quot;&gt;&lt;code&gt;incoming&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;TcpListener&lt;/code&gt; をソケットアドレスに&lt;a href=&quot;#method.bind&quot;&gt; &lt;code&gt;bind&lt;/code&gt; &lt;/a&gt;作成した後、着信TCP接続をリッスンします。これらは、&lt;a href=&quot;#method.accept&quot;&gt; &lt;code&gt;accept&lt;/code&gt; &lt;/a&gt;を呼び出すか、&lt;a href=&quot;#method.incoming&quot;&gt; &lt;code&gt;incoming&lt;/code&gt; &lt;/a&gt;によって返された&lt;a href=&quot;struct.incoming&quot;&gt; &lt;code&gt;Incoming&lt;/code&gt; &lt;/a&gt;イテレータを反復することによって受け入れることができます。</target>
        </trans-unit>
        <trans-unit id="06868983dd9010816d16a947a2feebe64fc6c151" translate="yes" xml:space="preserve">
          <source>After creating a &lt;code&gt;TcpListener&lt;/code&gt; by &lt;a href=&quot;struct.tcplistener#method.bind&quot;&gt;&lt;code&gt;bind&lt;/code&gt;&lt;/a&gt;ing it to a socket address, it listens for incoming TCP connections. These can be accepted by calling &lt;a href=&quot;struct.tcplistener#method.accept&quot;&gt;&lt;code&gt;accept&lt;/code&gt;&lt;/a&gt; or by iterating over the &lt;a href=&quot;struct.incoming&quot;&gt;&lt;code&gt;Incoming&lt;/code&gt;&lt;/a&gt; iterator returned by &lt;a href=&quot;struct.tcplistener#method.incoming&quot;&gt;&lt;code&gt;incoming&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;TcpListener&lt;/code&gt; をソケットアドレスに&lt;a href=&quot;struct.tcplistener#method.bind&quot;&gt; &lt;code&gt;bind&lt;/code&gt; &lt;/a&gt;作成した後、着信TCP接続をリッスンします。これらは、&lt;a href=&quot;struct.tcplistener#method.accept&quot;&gt; &lt;code&gt;accept&lt;/code&gt; &lt;/a&gt;を呼び出すか、&lt;a href=&quot;struct.tcplistener#method.incoming&quot;&gt; &lt;code&gt;incoming&lt;/code&gt; &lt;/a&gt;によって返された&lt;a href=&quot;struct.incoming&quot;&gt; &lt;code&gt;Incoming&lt;/code&gt; &lt;/a&gt;イテレータを反復処理することによって受け入れることができます。</target>
        </trans-unit>
        <trans-unit id="422e2b7f3798df18a9e41b4f6d8230c5f7fbaae2" translate="yes" xml:space="preserve">
          <source>After creating a &lt;code&gt;TcpStream&lt;/code&gt; by either &lt;a href=&quot;#method.connect&quot;&gt;&lt;code&gt;connect&lt;/code&gt;&lt;/a&gt;ing to a remote host or &lt;a href=&quot;struct.tcplistener#method.accept&quot;&gt;&lt;code&gt;accept&lt;/code&gt;&lt;/a&gt;ing a connection on a &lt;a href=&quot;struct.tcplistener&quot;&gt;&lt;code&gt;TcpListener&lt;/code&gt;&lt;/a&gt;, data can be transmitted by &lt;a href=&quot;../io/trait.read&quot;&gt;reading&lt;/a&gt; and &lt;a href=&quot;../io/trait.write&quot;&gt;writing&lt;/a&gt; to it.</source>
          <target state="translated">作成した後 &lt;code&gt;TcpStream&lt;/code&gt; いずれかの方法で&lt;a href=&quot;#method.connect&quot;&gt; &lt;code&gt;connect&lt;/code&gt; &lt;/a&gt;、リモートホストへのINGのか&lt;a href=&quot;struct.tcplistener#method.accept&quot;&gt; &lt;code&gt;accept&lt;/code&gt; &lt;/a&gt;の接続INGの&lt;a href=&quot;struct.tcplistener&quot;&gt; &lt;code&gt;TcpListener&lt;/code&gt; を&lt;/a&gt;、データを送信できる&lt;a href=&quot;../io/trait.read&quot;&gt;読書&lt;/a&gt;と&lt;a href=&quot;../io/trait.write&quot;&gt;書く&lt;/a&gt;ことに。</target>
        </trans-unit>
        <trans-unit id="dafc89a72358e6711ac4be0166b7dcfdffe57a68" translate="yes" xml:space="preserve">
          <source>After creating a &lt;code&gt;TcpStream&lt;/code&gt; by either &lt;a href=&quot;struct.tcpstream#method.connect&quot;&gt;&lt;code&gt;connect&lt;/code&gt;&lt;/a&gt;ing to a remote host or &lt;a href=&quot;struct.tcplistener#method.accept&quot;&gt;&lt;code&gt;accept&lt;/code&gt;&lt;/a&gt;ing a connection on a &lt;a href=&quot;struct.tcplistener&quot;&gt;&lt;code&gt;TcpListener&lt;/code&gt;&lt;/a&gt;, data can be transmitted by &lt;a href=&quot;../io/trait.read&quot;&gt;reading&lt;/a&gt; and &lt;a href=&quot;../io/trait.write&quot;&gt;writing&lt;/a&gt; to it.</source>
          <target state="translated">作成した後 &lt;code&gt;TcpStream&lt;/code&gt; いずれかの方法で&lt;a href=&quot;struct.tcpstream#method.connect&quot;&gt; &lt;code&gt;connect&lt;/code&gt; &lt;/a&gt;、リモートホストへのINGのか&lt;a href=&quot;struct.tcplistener#method.accept&quot;&gt; &lt;code&gt;accept&lt;/code&gt; &lt;/a&gt;の接続INGの&lt;a href=&quot;struct.tcplistener&quot;&gt; &lt;code&gt;TcpListener&lt;/code&gt; を&lt;/a&gt;、データを送信できる&lt;a href=&quot;../io/trait.read&quot;&gt;読書&lt;/a&gt;と&lt;a href=&quot;../io/trait.write&quot;&gt;書く&lt;/a&gt;ことに。</target>
        </trans-unit>
        <trans-unit id="b9be232588db8403f71ee1411aa554678f33dfa7" translate="yes" xml:space="preserve">
          <source>After creating a &lt;code&gt;UdpSocket&lt;/code&gt; by &lt;a href=&quot;#method.bind&quot;&gt;&lt;code&gt;bind&lt;/code&gt;&lt;/a&gt;ing it to a socket address, data can be &lt;a href=&quot;#method.send_to&quot;&gt;sent to&lt;/a&gt; and &lt;a href=&quot;#method.recv_from&quot;&gt;received from&lt;/a&gt; any other socket address.</source>
          <target state="translated">作成後 &lt;code&gt;UdpSocket&lt;/code&gt; によって&lt;a href=&quot;#method.bind&quot;&gt; &lt;code&gt;bind&lt;/code&gt; &lt;/a&gt;ソケットアドレスにINGのは、データをすることができる&lt;a href=&quot;#method.send_to&quot;&gt;に送信&lt;/a&gt;及び&lt;a href=&quot;#method.recv_from&quot;&gt;から受信した&lt;/a&gt;他のソケットアドレス。</target>
        </trans-unit>
        <trans-unit id="394b482d2eb5a6a4fcc8d7fdff6cfe2cd24f75e2" translate="yes" xml:space="preserve">
          <source>After creating a &lt;code&gt;UdpSocket&lt;/code&gt; by &lt;a href=&quot;struct.udpsocket#method.bind&quot;&gt;&lt;code&gt;bind&lt;/code&gt;&lt;/a&gt;ing it to a socket address, data can be &lt;a href=&quot;struct.udpsocket#method.send_to&quot;&gt;sent to&lt;/a&gt; and &lt;a href=&quot;struct.udpsocket#method.recv_from&quot;&gt;received from&lt;/a&gt; any other socket address.</source>
          <target state="translated">作成後 &lt;code&gt;UdpSocket&lt;/code&gt; によって&lt;a href=&quot;struct.udpsocket#method.bind&quot;&gt; &lt;code&gt;bind&lt;/code&gt; &lt;/a&gt;ソケットアドレスにINGのは、データをすることができる&lt;a href=&quot;struct.udpsocket#method.send_to&quot;&gt;に送信&lt;/a&gt;及び&lt;a href=&quot;struct.udpsocket#method.recv_from&quot;&gt;から受信した&lt;/a&gt;他のソケットアドレス。</target>
        </trans-unit>
        <trans-unit id="3fc506cb877752d66797eaa2996ad1bfc89765b7" translate="yes" xml:space="preserve">
          <source>After creating a new &lt;code&gt;Job&lt;/code&gt; instance using the closure we get in &lt;code&gt;execute&lt;/code&gt;, we send that job down the sending end of the channel. We&amp;rsquo;re calling &lt;code&gt;unwrap&lt;/code&gt; on &lt;code&gt;send&lt;/code&gt; for the case that sending fails. This might happen if, for example, we stop all our threads from executing, meaning the receiving end has stopped receiving new messages. At the moment, we can&amp;rsquo;t stop our threads from executing: our threads continue executing as long as the pool exists. The reason we use &lt;code&gt;unwrap&lt;/code&gt; is that we know the failure case won&amp;rsquo;t happen, but the compiler doesn&amp;rsquo;t know that.</source>
          <target state="translated">&lt;code&gt;execute&lt;/code&gt; で取得したクロージャーを使用して新しい &lt;code&gt;Job&lt;/code&gt; インスタンスを作成した後、そのジョブをチャネルの送信側に送信します。送信が失敗した場合のために、 &lt;code&gt;send&lt;/code&gt; に &lt;code&gt;unwrap&lt;/code&gt; を呼び出します。これは、たとえば、すべてのスレッドの実行を停止した場合、つまり受信側が新しいメッセージの受信を停止した場合に発生する可能性があります。現時点では、スレッドの実行を停止することはできません。プールが存在する限り、スレッドは実行を継続します。 &lt;code&gt;unwrap&lt;/code&gt; を使用する理由は、失敗のケースが発生しないことはわかっていますが、コンパイラはそれを知らないためです。</target>
        </trans-unit>
        <trans-unit id="458779f7008edf7b181827b22b99edf77f39bc41" translate="yes" xml:space="preserve">
          <source>After dropping the lock, we can print the mutex value and see that we were able to change the inner &lt;code&gt;i32&lt;/code&gt; to 6.</source>
          <target state="translated">ロックを削除した後、mutex値を出力して、内部の &lt;code&gt;i32&lt;/code&gt; を6 に変更できたことを確認できます。</target>
        </trans-unit>
        <trans-unit id="04760e628105c26e60bea171285ea7fc05de2cc2" translate="yes" xml:space="preserve">
          <source>After implementing the trait, we can call the methods on instances of &lt;code&gt;NewsArticle&lt;/code&gt; and &lt;code&gt;Tweet&lt;/code&gt; in the same way we call regular methods, like this:</source>
          <target state="translated">トレイトを実装した後、次のように通常のメソッドを呼び出すのと同じ方法で、 &lt;code&gt;NewsArticle&lt;/code&gt; と &lt;code&gt;Tweet&lt;/code&gt; のインスタンスのメソッドを呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="6aee078dffc9ca07e378d1b98649828937e42093" translate="yes" xml:space="preserve">
          <source>After learning about the &lt;code&gt;while let&lt;/code&gt; loop in Chapter 18, you might be wondering why we didn&amp;rsquo;t write the worker thread code as shown in Listing 20-21.</source>
          <target state="translated">第18章で &lt;code&gt;while let&lt;/code&gt; ループについて学習した後、リスト20-21に示すようにワーカースレッドコードを記述しなかった理由を疑問に思うかもしれません。</target>
        </trans-unit>
        <trans-unit id="5a81464f303d05310b655ad576139ba2eadc374a" translate="yes" xml:space="preserve">
          <source>After learning about the &lt;code&gt;while let&lt;/code&gt; loop in Chapter 18, you might be wondering why we didn&amp;rsquo;t write the worker thread code as shown in Listing 20-22.</source>
          <target state="translated">18章で &lt;code&gt;while let&lt;/code&gt; ループについて学んだ後、リスト20-22で示されるようになぜワーカースレッドコードを書かなかったのか疑問に思われるかもしれません。</target>
        </trans-unit>
        <trans-unit id="56e7d653965ec5efdfa2c953ebd2075ad09eb04a" translate="yes" xml:space="preserve">
          <source>After running the code, the precedence behavior is evident: if the match guard were applied only to the final value in the list of values specified using the &lt;code&gt;|&lt;/code&gt; operator, the arm would have matched and the program would have printed &lt;code&gt;yes&lt;/code&gt;.</source>
          <target state="translated">コードの実行後、優先順位の動作は明らかです。一致ガードが、 &lt;code&gt;|&lt;/code&gt; を使用して指定された値のリストの最後の値にのみ適用された場合 オペレータ、腕は一致し、プログラムは &lt;code&gt;yes&lt;/code&gt; を出力します。</target>
        </trans-unit>
        <trans-unit id="6918a63768fd69dd2401af6cba199a57c7c6b4f3" translate="yes" xml:space="preserve">
          <source>After some time, once Rust developers who use nightly releases have been able to try out the new feature, team members will discuss the feature, how it&amp;rsquo;s worked out on nightly, and decide if it should make it into stable Rust or not. If the decision is to move forward, the feature gate is removed, and the feature is now considered stable! It rides the trains into a new stable release of Rust.</source>
          <target state="translated">しばらくして、ナイトリーリリースを使用するRust開発者が新機能を試すことができるようになったら、チームメンバーはその機能と、その機能が毎晩どのように機能するかについて話し合い、安定したRustにするかどうかを決定します。決定が前進する場合は、機能ゲートが削除され、機能は安定していると見なされます。Rustの新しい安定版リリースに列車を乗せます。</target>
        </trans-unit>
        <trans-unit id="780f735c7776bf172259bb14b7f1d801e95b8329" translate="yes" xml:space="preserve">
          <source>After that statement, we&amp;rsquo;ve again added a temporary &lt;code&gt;println!&lt;/code&gt; statement that prints the value of &lt;code&gt;contents&lt;/code&gt; after the file is read, so we can check that the program is working so far.</source>
          <target state="translated">そのステートメントの後で、一時的な &lt;code&gt;println!&lt;/code&gt; 再び追加しました！ファイルが読み込まれた後に &lt;code&gt;contents&lt;/code&gt; の値を出力するステートメント。これにより、プログラムがこれまでに動作していることを確認できます。</target>
        </trans-unit>
        <trans-unit id="96e831200e66693625317e3844fc1e89f068a7a9" translate="yes" xml:space="preserve">
          <source>After the method signature, instead of providing an implementation within curly brackets, we use a semicolon. Each type implementing this trait must provide its own custom behavior for the body of the method. The compiler will enforce that any type that has the &lt;code&gt;Summary&lt;/code&gt; trait will have the method &lt;code&gt;summarize&lt;/code&gt; defined with this signature exactly.</source>
          <target state="translated">メソッドシグネチャの後、中かっこ内に実装を提供する代わりに、セミコロンを使用します。この特性を実装する各タイプは、メソッドの本体に独自のカスタム動作を提供する必要があります。コンパイラが有する任意のタイプのことを強制します &lt;code&gt;Summary&lt;/code&gt; 形質は、メソッドがあります &lt;code&gt;summarize&lt;/code&gt; まさにこの署名で定義します。</target>
        </trans-unit>
        <trans-unit id="fd61e6cd4b0dca5587c3bdc8b19a36c54df5d01a" translate="yes" xml:space="preserve">
          <source>After the parameters, we place curly brackets that hold the body of the closure&amp;mdash;these are optional if the closure body is a single expression. The end of the closure, after the curly brackets, needs a semicolon to complete the &lt;code&gt;let&lt;/code&gt; statement. The value returned from the last line in the closure body (&lt;code&gt;num&lt;/code&gt;) will be the value returned from the closure when it&amp;rsquo;s called, because that line doesn&amp;rsquo;t end in a semicolon; just as in function bodies.</source>
          <target state="translated">パラメーターの後に、クロージャーの本体を保持する中括弧を配置します。クロージャーの本体が単一の式である場合、これらはオプションです。中括弧の後のクロージャの終わりでは、 &lt;code&gt;let&lt;/code&gt; ステートメントを完了するためにセミコロンが必要です。クロージャー本体の最後の行（ &lt;code&gt;num&lt;/code&gt; ）から返される値は、呼び出されたときにクロージャーから返される値になります。これは、その行がセミコロンで終わっていないためです。関数本体と同じように。</target>
        </trans-unit>
        <trans-unit id="3409f581311196341ada32cc2fb23895a79e2d64" translate="yes" xml:space="preserve">
          <source>After the request line, the remaining lines starting from &lt;code&gt;Host:&lt;/code&gt; onward are headers. &lt;code&gt;GET&lt;/code&gt; requests have no body.</source>
          <target state="translated">リクエスト行の後の、 &lt;code&gt;Host:&lt;/code&gt; 以降の残りの行はヘッダーです。 &lt;code&gt;GET&lt;/code&gt; リクエストには本文がありません。</target>
        </trans-unit>
        <trans-unit id="94ada77990e54a7199b314d48e7c28b8866c26f5" translate="yes" xml:space="preserve">
          <source>After these two lines, &lt;code&gt;s&lt;/code&gt; will contain &lt;code&gt;foobar&lt;/code&gt;. The &lt;code&gt;push_str&lt;/code&gt; method takes a string slice because we don&amp;rsquo;t necessarily want to take ownership of the parameter. For example, the code in Listing 8-16 shows that it would be unfortunate if we weren&amp;rsquo;t able to use &lt;code&gt;s2&lt;/code&gt; after appending its contents to &lt;code&gt;s1&lt;/code&gt;.</source>
          <target state="translated">これらの2行の後、 &lt;code&gt;s&lt;/code&gt; には &lt;code&gt;foobar&lt;/code&gt; が含まれます。 &lt;code&gt;push_str&lt;/code&gt; の我々は、必ずしもパラメータの所有権を取得したくないので、この方法では、文字列のスライスを取ります。たとえば、リスト8-16のコードは、コンテンツを &lt;code&gt;s1&lt;/code&gt; に追加した後で &lt;code&gt;s2&lt;/code&gt; を使用できなかった場合は残念であることを示しています。</target>
        </trans-unit>
        <trans-unit id="d28bc7bf7124bb617821696b52f238bf37faf9be" translate="yes" xml:space="preserve">
          <source>After they have been consumed, the rest of the elements are yielded. Rather than overriding this method directly, instead override the &lt;code&gt;nth&lt;/code&gt; method.</source>
          <target state="translated">それらが消費された後、残りの要素が生成されます。このメソッドを直接オーバーライドするのではなく、代わりに &lt;code&gt;nth&lt;/code&gt; メソッドをオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="d1a8c993e11b907a98ea3122f628acdebbd6b42e" translate="yes" xml:space="preserve">
          <source>After updating the registry, Cargo checks the &lt;code&gt;[dependencies]&lt;/code&gt; section and downloads any crates you don&amp;rsquo;t have yet. In this case, although we only listed &lt;code&gt;rand&lt;/code&gt; as a dependency, Cargo also grabbed &lt;code&gt;libc&lt;/code&gt; and &lt;code&gt;rand_core&lt;/code&gt;, because &lt;code&gt;rand&lt;/code&gt; depends on those to work. After downloading the crates, Rust compiles them and then compiles the project with the dependencies available.</source>
          <target state="translated">レジストリを更新した後、Cargoは &lt;code&gt;[dependencies]&lt;/code&gt; セクションをチェックし、まだ持っていない木枠をダウンロードします。この場合、依存関係として &lt;code&gt;rand&lt;/code&gt; のみをリストし &lt;code&gt;rand_core&lt;/code&gt; 、 &lt;code&gt;rand&lt;/code&gt; は動作するものに依存しているため、Cargoは &lt;code&gt;libc&lt;/code&gt; とrand_coreも取得しました。クレートをダウンロードした後、Rustはそれらをコンパイルし、利用可能な依存関係を使用してプロジェクトをコンパイルします。</target>
        </trans-unit>
        <trans-unit id="17378b2abc480d099ee902b5db16470e7091ec08" translate="yes" xml:space="preserve">
          <source>After updating the registry, Cargo checks the &lt;code&gt;[dependencies]&lt;/code&gt; section and downloads any crates you don&amp;rsquo;t have yet. In this case, although we only listed &lt;code&gt;rand&lt;/code&gt; as a dependency, Cargo also grabbed a copy of &lt;code&gt;libc&lt;/code&gt;, because &lt;code&gt;rand&lt;/code&gt; depends on &lt;code&gt;libc&lt;/code&gt; to work. After downloading the crates, Rust compiles them and then compiles the project with the dependencies available.</source>
          <target state="translated">レジストリを更新した後、Cargoは &lt;code&gt;[dependencies]&lt;/code&gt; セクションをチェックして、まだ持っていないクレートをダウンロードします。この場合、依存関係として &lt;code&gt;rand&lt;/code&gt; のみをリストしましたが、機能するために &lt;code&gt;rand&lt;/code&gt; は &lt;code&gt;libc&lt;/code&gt; に依存しているため、Cargoは &lt;code&gt;libc&lt;/code&gt; のコピーも取得しました。クレートをダウンロードした後、Rustはそれらをコンパイルしてから、利用可能な依存関係を使用してプロジェクトをコンパイルします。</target>
        </trans-unit>
        <trans-unit id="9d98c1489e41fbd88598871e5f8d212bbc3f78c5" translate="yes" xml:space="preserve">
          <source>After we define &lt;code&gt;summarize_author&lt;/code&gt;, we can call &lt;code&gt;summarize&lt;/code&gt; on instances of the &lt;code&gt;Tweet&lt;/code&gt; struct, and the default implementation of &lt;code&gt;summarize&lt;/code&gt; will call the definition of &lt;code&gt;summarize_author&lt;/code&gt; that we&amp;rsquo;ve provided. Because we&amp;rsquo;ve implemented &lt;code&gt;summarize_author&lt;/code&gt;, the &lt;code&gt;Summary&lt;/code&gt; trait has given us the behavior of the &lt;code&gt;summarize&lt;/code&gt; method without requiring us to write any more code.</source>
          <target state="translated">我々が定義した後 &lt;code&gt;summarize_author&lt;/code&gt; を、我々は呼び出すことができます &lt;code&gt;summarize&lt;/code&gt; のインスタンスに &lt;code&gt;Tweet&lt;/code&gt; 構造体、およびデフォルトの実装で &lt;code&gt;summarize&lt;/code&gt; の定義を呼び出します &lt;code&gt;summarize_author&lt;/code&gt; 私たちが提供したことを。私たちが実施してきたので &lt;code&gt;summarize_author&lt;/code&gt; を、 &lt;code&gt;Summary&lt;/code&gt; トレイトは、私たちの行動与えている &lt;code&gt;summarize&lt;/code&gt; いずれかのより多くのコードを書くために私たちを必要とせずに方法を。</target>
        </trans-unit>
        <trans-unit id="2556b8fd31ff1260ec94fc2ed10873de0af61a38" translate="yes" xml:space="preserve">
          <source>After we&amp;rsquo;ve acquired the lock, we can treat the return value, named &lt;code&gt;num&lt;/code&gt; in this case, as a mutable reference to the data inside. The type system ensures that we acquire a lock before using the value in &lt;code&gt;m&lt;/code&gt;: &lt;code&gt;Mutex&amp;lt;i32&amp;gt;&lt;/code&gt; is not an &lt;code&gt;i32&lt;/code&gt;, so we &lt;em&gt;must&lt;/em&gt; acquire the lock to be able to use the &lt;code&gt;i32&lt;/code&gt; value. We can&amp;rsquo;t forget; the type system won&amp;rsquo;t let us access the inner &lt;code&gt;i32&lt;/code&gt; otherwise.</source>
          <target state="translated">ロックを取得したら、戻り値（この場合は &lt;code&gt;num&lt;/code&gt; )を内部のデータへの変更可能な参照として扱うことができます。我々は、の値を使用する前にロックを取得することを型システム性を保証 &lt;code&gt;m&lt;/code&gt; ： &lt;code&gt;Mutex&amp;lt;i32&amp;gt;&lt;/code&gt; ない &lt;code&gt;i32&lt;/code&gt; 我々は、&lt;em&gt;しなければならない&lt;/em&gt;使用できるようにロックを取得 &lt;code&gt;i32&lt;/code&gt; 値。忘れられない。それ以外の場合、型システムは内部の &lt;code&gt;i32&lt;/code&gt; にアクセスできません。</target>
        </trans-unit>
        <trans-unit id="eea76bdbc5658f7fad1ad625716859e45f8c384f" translate="yes" xml:space="preserve">
          <source>After we&amp;rsquo;ve created &lt;em&gt;tests/common/mod.rs&lt;/em&gt;, we can use it from any of the integration test files as a module. Here&amp;rsquo;s an example of calling the &lt;code&gt;setup&lt;/code&gt; function from the &lt;code&gt;it_adds_two&lt;/code&gt; test in &lt;em&gt;tests/integration_test.rs&lt;/em&gt;:</source>
          <target state="translated">&lt;em&gt;tests / common / mod.rs&lt;/em&gt;を作成した後、任意の統合テストファイルからそれをモジュールとして使用できます。次に示すのは、&lt;em&gt;tests / integration_test.rsの&lt;/em&gt; &lt;code&gt;it_adds_two&lt;/code&gt; テストから &lt;code&gt;setup&lt;/code&gt; 関数を呼び出す例です。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="43dc84fb12e1a579a9d73c911c37d0ab1b82a9f5" translate="yes" xml:space="preserve">
          <source>After we&amp;rsquo;ve created the lists in &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt;, and &lt;code&gt;c&lt;/code&gt;, we add 10 to the value in &lt;code&gt;value&lt;/code&gt;. We do this by calling &lt;code&gt;borrow_mut&lt;/code&gt; on &lt;code&gt;value&lt;/code&gt;, which uses the automatic dereferencing feature we discussed in Chapter 5 (see the section &lt;a href=&quot;ch05-03-method-syntax#wheres-the---operator&quot;&gt;&amp;ldquo;Where&amp;rsquo;s the &lt;code&gt;-&amp;gt;&lt;/code&gt; Operator?&amp;rdquo;&lt;/a&gt;) to dereference the &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; to the inner &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; value. The &lt;code&gt;borrow_mut&lt;/code&gt; method returns a &lt;code&gt;RefMut&amp;lt;T&amp;gt;&lt;/code&gt; smart pointer, and we use the dereference operator on it and change the inner value.</source>
          <target state="translated">&lt;code&gt;a&lt;/code&gt; 、 &lt;code&gt;b&lt;/code&gt; 、および &lt;code&gt;c&lt;/code&gt; のリストを作成したら、valueの値に10を追加し &lt;code&gt;value&lt;/code&gt; 。私たちは、呼び出すことによってこれを行う &lt;code&gt;borrow_mut&lt;/code&gt; 上の &lt;code&gt;value&lt;/code&gt; （セクションを参照してください我々は、第5章で説明した自動逆参照機能を使用して、&lt;a href=&quot;ch05-03-method-syntax#wheres-the---operator&quot;&gt;「どこだ &lt;code&gt;-&amp;gt;&lt;/code&gt; 演算子？」&lt;/a&gt;逆参照する） &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; 内部に &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; 値を。 &lt;code&gt;borrow_mut&lt;/code&gt; の方法は返し &lt;code&gt;RefMut&amp;lt;T&amp;gt;&lt;/code&gt; スマートポインタを、私たちはそれに間接参照演算子を使用し、内側の値を変更します。</target>
        </trans-unit>
        <trans-unit id="b18bd157b258782bdf4328d729095843e56901f9" translate="yes" xml:space="preserve">
          <source>After writing a lot of Rust code, the Rust team found that Rust programmers were entering the same lifetime annotations over and over in particular situations. These situations were predictable and followed a few deterministic patterns. The developers programmed these patterns into the compiler&amp;rsquo;s code so the borrow checker could infer the lifetimes in these situations and wouldn&amp;rsquo;t need explicit annotations.</source>
          <target state="translated">多くのRustコードを記述した後、Rustチームは、Rustプログラマーが特定の状況で同じライフタイムアノテーションを何度も入力していることを発見しました。これらの状況は予測可能であり、いくつかの確定的なパターンに従っていました。開発者はこれらのパターンをコンパイラーのコードにプログラムしたので、借用チェッカーはこれらの状況で寿命を推測でき、明示的な注釈は必要ありません。</target>
        </trans-unit>
        <trans-unit id="8911f4e8942ad7726d100e32781ae750b7e4baf7" translate="yes" xml:space="preserve">
          <source>After you&amp;rsquo;ve installed Rust via &lt;code&gt;rustup&lt;/code&gt;, updating to the latest version is easy. From your shell, run the following update script:</source>
          <target state="translated">&lt;code&gt;rustup&lt;/code&gt; を使用してRustをインストールした後は、最新バージョンに簡単に更新できます。シェルから、次の更新スクリプトを実行します。</target>
        </trans-unit>
        <trans-unit id="13f2d652f70945cb85fc5562fc3600a535ffb359" translate="yes" xml:space="preserve">
          <source>After:</source>
          <target state="translated">After:</target>
        </trans-unit>
        <trans-unit id="1d0c9f96248d537407790c171b6d4f7cd1fd7157" translate="yes" xml:space="preserve">
          <source>Again, this is the simplest implementation of the &lt;code&gt;execute&lt;/code&gt; method: it does nothing, but we&amp;rsquo;re trying only to make our code compile. Let&amp;rsquo;s check it again:</source>
          <target state="translated">繰り返しますが、これは &lt;code&gt;execute&lt;/code&gt; メソッドの最も単純な実装です。何もしませんが、コードをコンパイルすることだけを試みています。もう一度確認してみましょう。</target>
        </trans-unit>
        <trans-unit id="7b6d0c4005bedf77e43140c67158dc3c2786f272" translate="yes" xml:space="preserve">
          <source>Again, we&amp;rsquo;re using &lt;code&gt;thread::spawn&lt;/code&gt; to create a new thread and then using &lt;code&gt;move&lt;/code&gt; to move &lt;code&gt;tx&lt;/code&gt; into the closure so the spawned thread owns &lt;code&gt;tx&lt;/code&gt;. The spawned thread needs to own the transmitting end of the channel to be able to send messages through the channel.</source>
          <target state="translated">ここでも、 &lt;code&gt;thread::spawn&lt;/code&gt; を使用して新しいスレッドを作成し、 &lt;code&gt;move&lt;/code&gt; を使用して &lt;code&gt;tx&lt;/code&gt; をクロージャーに移動しているため、生成されたスレッドは &lt;code&gt;tx&lt;/code&gt; を所有しています。生成されたスレッドは、チャネルを介してメッセージを送信できるように、チャネルの送信側を所有する必要があります。</target>
        </trans-unit>
        <trans-unit id="42935bf9ba7e07a25a52edfb6e2d38809a0c1bab" translate="yes" xml:space="preserve">
          <source>Again, you need not specify the full type if the compiler can infer it:</source>
          <target state="translated">繰り返しになりますが、コンパイラが推測できる場合は完全な型を指定する必要はありません。</target>
        </trans-unit>
        <trans-unit id="3cc0e9834230ccbe94275d501fa3b8e31c8d1c62" translate="yes" xml:space="preserve">
          <source>Aha! The first error message indicates that &lt;code&gt;counter&lt;/code&gt; is moved into the closure for the thread associated with &lt;code&gt;handle&lt;/code&gt;. That move is preventing us from capturing &lt;code&gt;counter&lt;/code&gt; when we try to call &lt;code&gt;lock&lt;/code&gt; on it and store the result in &lt;code&gt;num2&lt;/code&gt; in the second thread! So Rust is telling us that we can&amp;rsquo;t move ownership of &lt;code&gt;counter&lt;/code&gt; into multiple threads. This was hard to see earlier because our threads were in a loop, and Rust can&amp;rsquo;t point to different threads in different iterations of the loop. Let&amp;rsquo;s fix the compiler error with a multiple-ownership method we discussed in Chapter 15.</source>
          <target state="translated">ああ！最初のエラーメッセージは、 &lt;code&gt;counter&lt;/code&gt; が、 &lt;code&gt;handle&lt;/code&gt; に関連付けられたスレッドのクロージャーに移動したことを示しています。その移動により、 &lt;code&gt;lock&lt;/code&gt; を呼び出してその結果を2番目のスレッドの &lt;code&gt;num2&lt;/code&gt; に保存しようと &lt;code&gt;counter&lt;/code&gt; ときに、カウンターをキャプチャできなくなります。したがって、Rustは、 &lt;code&gt;counter&lt;/code&gt; の所有権を複数のスレッドに移動することはできないと言っています。私たちのスレッドはループ内にあったため、これを以前に確認することは困難でした。また、Rustはループの異なる反復で異なるスレッドを指すことができません。第15章で説明した複数所有者メソッドを使用して、コンパイラエラーを修正しましょう。</target>
        </trans-unit>
        <trans-unit id="7f8c5176c3f03b97659161923f2b6492f7de7e73" translate="yes" xml:space="preserve">
          <source>Alignment</source>
          <target state="translated">Alignment</target>
        </trans-unit>
        <trans-unit id="6c230b19ce360dc47ab1f803ec5d75221398ff9e" translate="yes" xml:space="preserve">
          <source>Alignment::borrow</source>
          <target state="translated">Alignment::borrow</target>
        </trans-unit>
        <trans-unit id="77b6c3d761057550ac535096603085a4ab21f25d" translate="yes" xml:space="preserve">
          <source>Alignment::borrow_mut</source>
          <target state="translated">Alignment::borrow_mut</target>
        </trans-unit>
        <trans-unit id="d45a68b20b4cc6114f5421add49178bf870ce27b" translate="yes" xml:space="preserve">
          <source>Alignment::fmt</source>
          <target state="translated">Alignment::fmt</target>
        </trans-unit>
        <trans-unit id="0912a9a905355e3a6df915cce4fce3e26fba4e82" translate="yes" xml:space="preserve">
          <source>Alignment::from</source>
          <target state="translated">Alignment::from</target>
        </trans-unit>
        <trans-unit id="14750a6b1eb92c0620b2d52bd702a109608e9cb3" translate="yes" xml:space="preserve">
          <source>Alignment::into</source>
          <target state="translated">Alignment::into</target>
        </trans-unit>
        <trans-unit id="b06fe916f5f193304938aca87ce9baf4fe4a81c0" translate="yes" xml:space="preserve">
          <source>Alignment::try_from</source>
          <target state="translated">Alignment::try_from</target>
        </trans-unit>
        <trans-unit id="7e4c9d31924344ef62791e3f5778cc0b64650841" translate="yes" xml:space="preserve">
          <source>Alignment::try_into</source>
          <target state="translated">Alignment::try_into</target>
        </trans-unit>
        <trans-unit id="f8d85378f8bd14502ad4a535bf35eace323f7be0" translate="yes" xml:space="preserve">
          <source>Alignment::type_id</source>
          <target state="translated">Alignment::type_id</target>
        </trans-unit>
        <trans-unit id="1f13dd31cf3795018ba8cb51097f5cee92e51d26" translate="yes" xml:space="preserve">
          <source>All &lt;a href=&quot;items&quot;&gt;item declarations&lt;/a&gt; accept outer attributes while &lt;a href=&quot;items/external-blocks&quot;&gt;external blocks&lt;/a&gt;, &lt;a href=&quot;items/functions&quot;&gt;functions&lt;/a&gt;, &lt;a href=&quot;items/implementations&quot;&gt;implementations&lt;/a&gt;, and &lt;a href=&quot;items/modules&quot;&gt;modules&lt;/a&gt; accept inner attributes.</source>
          <target state="translated">すべての&lt;a href=&quot;items&quot;&gt;項目宣言&lt;/a&gt;は外部属性を受け入れますが、&lt;a href=&quot;items/external-blocks&quot;&gt;外部ブロック&lt;/a&gt;、&lt;a href=&quot;items/functions&quot;&gt;関数&lt;/a&gt;、&lt;a href=&quot;items/implementations&quot;&gt;実装&lt;/a&gt;、および&lt;a href=&quot;items/modules&quot;&gt;モジュール&lt;/a&gt;は内部属性を受け入れます。</target>
        </trans-unit>
        <trans-unit id="e7edfb23f380c12b821737c77295267e0d55adfa" translate="yes" xml:space="preserve">
          <source>All &lt;code&gt;if&lt;/code&gt; expressions start with the keyword &lt;code&gt;if&lt;/code&gt;, which is followed by a condition. In this case, the condition checks whether or not the variable &lt;code&gt;number&lt;/code&gt; has a value less than 5. The block of code we want to execute if the condition is true is placed immediately after the condition inside curly brackets. Blocks of code associated with the conditions in &lt;code&gt;if&lt;/code&gt; expressions are sometimes called &lt;em&gt;arms&lt;/em&gt;, just like the arms in &lt;code&gt;match&lt;/code&gt; expressions that we discussed in the &lt;a href=&quot;ch02-00-guessing-game-tutorial#comparing-the-guess-to-the-secret-number&quot;&gt;&amp;ldquo;Comparing the Guess to the Secret Number&amp;rdquo;&lt;/a&gt; section of Chapter 2.</source>
          <target state="translated">すべての &lt;code&gt;if&lt;/code&gt; 式はキーワード &lt;code&gt;if&lt;/code&gt; で始まり、その後に条件が続きます。この場合、条件は変数 &lt;code&gt;number&lt;/code&gt; が5未満の値であるかどうかをチェックします。条件がtrueの場合に実行するコードのブロックは、中括弧内の条件の直後に配置されます。第2章の&lt;a href=&quot;ch02-00-guessing-game-tutorial#comparing-the-guess-to-the-secret-number&quot;&gt;「推測とシークレット番号の比較」&lt;/a&gt;セクションで説明した &lt;code&gt;match&lt;/code&gt; 表現の&lt;em&gt;腕&lt;/em&gt;と同じように、 &lt;code&gt;if&lt;/code&gt; 式がarmと呼ばれることもある条件に関連付けられたコードのブロック。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6d770608aae868ce44cc837cd9b78c8161bf1b4b" translate="yes" xml:space="preserve">
          <source>All ASCII</source>
          <target state="translated">すべてのアスキー</target>
        </trans-unit>
        <trans-unit id="941b268ba2f8b2e2bf50827de379fcc106a7ae00" translate="yes" xml:space="preserve">
          <source>All Rust compiler versions support any edition that existed prior to that compiler&amp;rsquo;s release, and they can link crates of any supported editions together. Edition changes only affect the way the compiler initially parses code. Therefore, if you&amp;rsquo;re using Rust 2015 and one of your dependencies uses Rust 2018, your project will compile and be able to use that dependency. The opposite situation, where your project uses Rust 2018 and a dependency uses Rust 2015, works as well.</source>
          <target state="translated">すべてのRustコンパイラバージョンは、そのコンパイラのリリース前に存在していたエディションをサポートし、サポートされているエディションのクレートをリンクできます。エディションの変更は、コンパイラーが最初にコードを解析する方法にのみ影響します。したがって、Rust 2015を使用していて、依存関係の1つがRust 2018を使用している場合、プロジェクトはコンパイルされ、その依存関係を使用できます。プロジェクトがRust 2018を使用し、依存関係がRust 2015を使用するという反対の状況も同様に機能します。</target>
        </trans-unit>
        <trans-unit id="7652c7eeda6497653864c68957d9fcd32bd3f053" translate="yes" xml:space="preserve">
          <source>All Unicode</source>
          <target state="translated">すべてのユニコード</target>
        </trans-unit>
        <trans-unit id="47de5609df925352bb65b1c68fe6d11ef3c5f11f" translate="yes" xml:space="preserve">
          <source>All Unicode characters contained in the raw string body represent themselves, the characters &lt;code&gt;U+0022&lt;/code&gt; (double-quote) (except when followed by at least as many &lt;code&gt;U+0023&lt;/code&gt; (&lt;code&gt;#&lt;/code&gt;) characters as were used to start the raw string literal) or &lt;code&gt;U+005C&lt;/code&gt; (&lt;code&gt;\&lt;/code&gt;) do not have any special meaning.</source>
          <target state="translated">生の文字列本体に含まれるすべてのUnicode文字は、それ自体、文字 &lt;code&gt;U+0022&lt;/code&gt; （二重引用符）（生の文字列リテラルの開始に使用されたのと同じ数以上の &lt;code&gt;U+0023&lt;/code&gt; （ &lt;code&gt;#&lt;/code&gt; ）文字が続く場合を除く）または &lt;code&gt;U+005C&lt;/code&gt; （ &lt;code&gt;\&lt;/code&gt; ）には特別な意味はありません。</target>
        </trans-unit>
        <trans-unit id="8a1ba3bb13e8cd072a280ba55ff12cd4ec0faacf" translate="yes" xml:space="preserve">
          <source>All access to a static is safe, but there are a number of restrictions on statics:</source>
          <target state="translated">スタティックへのアクセスはすべて安全ですが、スタティックにはいくつかの制限があります。</target>
        </trans-unit>
        <trans-unit id="cc4193fdbde0490cb6df1ff9fd4927655f61fac3" translate="yes" xml:space="preserve">
          <source>All access to the inner value through methods is &lt;code&gt;unsafe&lt;/code&gt;.</source>
          <target state="translated">メソッドによる内部値へのアクセスはすべて &lt;code&gt;unsafe&lt;/code&gt; はありません。</target>
        </trans-unit>
        <trans-unit id="ceb9b59e717209dd478129622af76401fc92a7ef" translate="yes" xml:space="preserve">
          <source>All accesses performed by functions in this module are &lt;em&gt;non-atomic&lt;/em&gt; in the sense of &lt;a href=&quot;../sync/atomic/index&quot;&gt;atomic operations&lt;/a&gt; used to synchronize between threads. This means it is undefined behavior to perform two concurrent accesses to the same location from different threads unless both accesses only read from memory. Notice that this explicitly includes &lt;a href=&quot;fn.read_volatile&quot;&gt;&lt;code&gt;read_volatile&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;fn.write_volatile&quot;&gt;&lt;code&gt;write_volatile&lt;/code&gt;&lt;/a&gt;: Volatile accesses cannot be used for inter-thread synchronization.</source>
          <target state="translated">このモジュールの関数によって実行されるすべてのアクセスは、スレッド間の同期に使用される&lt;a href=&quot;../sync/atomic/index&quot;&gt;アトミック操作&lt;/a&gt;の意味で&lt;em&gt;非アトミック&lt;/em&gt;です。つまり、両方のアクセスがメモリからの読み取りのみでない限り、異なるスレッドから同じ場所への2つの同時アクセスを実行することは未定義の動作です。これには、&lt;a href=&quot;fn.read_volatile&quot;&gt; &lt;code&gt;read_volatile&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;fn.write_volatile&quot;&gt; &lt;code&gt;write_volatile&lt;/code&gt; が&lt;/a&gt;明示的に含まれていることに注意してください。揮発性アクセスは、スレッド間同期には使用できません。</target>
        </trans-unit>
        <trans-unit id="286be0b8b15ccf1efa39407656b792f78e80afd9" translate="yes" xml:space="preserve">
          <source>All amortized costs are for the potential need to resize when capacity is exhausted. If a resize occurs it will take &lt;em&gt;O&lt;/em&gt;(&lt;em&gt;n&lt;/em&gt;) time. Our collections never automatically shrink, so removal operations aren't amortized. Over a sufficiently large series of operations, the average cost per operation will deterministically equal the given cost.</source>
          <target state="translated">償却された費用はすべて、容量がなくなったときにサイズを変更する必要がある可能性があるためです。サイズ変更が発生した場合、&lt;em&gt;O&lt;/em&gt;（&lt;em&gt;n&lt;/em&gt;）時間がかかります。コレクションが自動的に縮小することはないため、削除操作は償却されません。十分に大きな一連の操作では、操作あたりの平均コストは決定論的に指定されたコストに等しくなります。</target>
        </trans-unit>
        <trans-unit id="5d3e246179e6158acb2b336b6eaaa6c3cd96b12d" translate="yes" xml:space="preserve">
          <source>All amortized costs are for the potential need to resize when capacity is exhausted. If a resize occurs it will take O(n) time. Our collections never automatically shrink, so removal operations aren't amortized. Over a sufficiently large series of operations, the average cost per operation will deterministically equal the given cost.</source>
          <target state="translated">すべての償却コストは、容量が枯渇したときにサイズ変更が必要になる可能性があるためのものです。サイズ変更が発生した場合、O(n)の時間がかかります。私たちのコレクションは自動的に縮小することはないので、除去作業は償却されません。十分に大規模な一連の作業については、作業ごとの平均コストは決定論的に与えられたコストと等しくなります。</target>
        </trans-unit>
        <trans-unit id="ad40505a1a509d19ac8713b0e6d72bf2f8406439" translate="yes" xml:space="preserve">
          <source>All associated functions must either have a &lt;code&gt;where Self: Sized&lt;/code&gt; bound, or</source>
          <target state="translated">関連するすべての関数には、 &lt;code&gt;where Self: Sized&lt;/code&gt; 境界、または</target>
        </trans-unit>
        <trans-unit id="15061bca973f1e3bdfd6bc4220f487a4d9f0fa2e" translate="yes" xml:space="preserve">
          <source>All atomic types in this module are guaranteed to be &lt;a href=&quot;https://en.wikipedia.org/wiki/Non-blocking_algorithm&quot;&gt;lock-free&lt;/a&gt; if they're available. This means they don't internally acquire a global mutex. Atomic types and operations are not guaranteed to be wait-free. This means that operations like &lt;code&gt;fetch_or&lt;/code&gt; may be implemented with a compare-and-swap loop.</source>
          <target state="translated">このモジュールのすべてのアトミック型は、利用可能であれば&lt;a href=&quot;https://en.wikipedia.org/wiki/Non-blocking_algorithm&quot;&gt;ロックフリーである&lt;/a&gt;ことが保証されています。つまり、内部的にグローバルミューテックスを取得しません。原子のタイプと操作は、待機なしであることが保証されていません。つまり、 &lt;code&gt;fetch_or&lt;/code&gt; などの操作は、比較とスワップのループを使用して実装できます。</target>
        </trans-unit>
        <trans-unit id="290ed2d52fa06b05e83bf6a12f1d4aa3dca7ba7c" translate="yes" xml:space="preserve">
          <source>All binaries installed with &lt;code&gt;cargo install&lt;/code&gt; are stored in the installation root&amp;rsquo;s &lt;em&gt;bin&lt;/em&gt; folder. If you installed Rust using &lt;em&gt;rustup.rs&lt;/em&gt; and don&amp;rsquo;t have any custom configurations, this directory will be &lt;em&gt;$HOME/.cargo/bin&lt;/em&gt;. Ensure that directory is in your &lt;code&gt;$PATH&lt;/code&gt; to be able to run programs you&amp;rsquo;ve installed with &lt;code&gt;cargo install&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;cargo install&lt;/code&gt; されるすべてのバイナリは、インストールルートの&lt;em&gt;bin&lt;/em&gt;フォルダに格納されます。&lt;em&gt;rustup.rs&lt;/em&gt;を使用してRustをインストールし、カスタム構成がない場合、このディレクトリは&lt;em&gt;$ HOME / .cargo / binになり&lt;/em&gt;ます。 &lt;code&gt;cargo install&lt;/code&gt; したプログラムを実行できるように、ディレクトリが &lt;code&gt;$PATH&lt;/code&gt; にあることを確認してください。</target>
        </trans-unit>
        <trans-unit id="33d170f2503ad727df2773d3d501af5a7c6f33f7" translate="yes" xml:space="preserve">
          <source>All boolean operators except for &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; and &lt;code&gt;||&lt;/code&gt; which are banned since they are short-circuiting.</source>
          <target state="translated">&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; および &lt;code&gt;||&lt;/code&gt; を除くすべてのブール演算子 それらは短絡しているため禁止されています。</target>
        </trans-unit>
        <trans-unit id="1797e85af758baa0954345dbaa6c305b8c789f74" translate="yes" xml:space="preserve">
          <source>All bytes read from this source will be appended to the specified buffer &lt;code&gt;buf&lt;/code&gt;. This function will continuously call &lt;a href=&quot;trait.read#tymethod.read&quot;&gt;&lt;code&gt;read()&lt;/code&gt;&lt;/a&gt; to append more data to &lt;code&gt;buf&lt;/code&gt; until &lt;a href=&quot;trait.read#tymethod.read&quot;&gt;&lt;code&gt;read()&lt;/code&gt;&lt;/a&gt; returns either &lt;a href=&quot;../result/enum.result#variant.Ok&quot;&gt;&lt;code&gt;Ok(0)&lt;/code&gt;&lt;/a&gt; or an error of non-&lt;a href=&quot;enum.errorkind#variant.Interrupted&quot;&gt;&lt;code&gt;ErrorKind::Interrupted&lt;/code&gt;&lt;/a&gt; kind.</source>
          <target state="translated">このソースから読み取られたすべてのバイトは、指定されたバッファー &lt;code&gt;buf&lt;/code&gt; に追加されます。この関数は、連続的に呼ぶ&lt;a href=&quot;trait.read#tymethod.read&quot;&gt; &lt;code&gt;read()&lt;/code&gt; &lt;/a&gt;ために多くのデータ追加する &lt;code&gt;buf&lt;/code&gt; をするまで&lt;a href=&quot;trait.read#tymethod.read&quot;&gt; &lt;code&gt;read()&lt;/code&gt; &lt;/a&gt;戻りいずれか&lt;a href=&quot;../result/enum.result#variant.Ok&quot;&gt; &lt;code&gt;Ok(0)&lt;/code&gt; &lt;/a&gt;または非誤差&lt;a href=&quot;enum.errorkind#variant.Interrupted&quot;&gt; &lt;code&gt;ErrorKind::Interrupted&lt;/code&gt; &lt;/a&gt;種類。</target>
        </trans-unit>
        <trans-unit id="7b662763d511d397b2cbc49f35a59edd0871bf65" translate="yes" xml:space="preserve">
          <source>All calls to &lt;a href=&quot;trait.write#tymethod.write&quot;&gt;&lt;code&gt;write&lt;/code&gt;&lt;/a&gt; on the returned instance will return &lt;code&gt;Ok(buf.len())&lt;/code&gt; and the contents of the buffer will not be inspected.</source>
          <target state="translated">返されたインスタンスに&lt;a href=&quot;trait.write#tymethod.write&quot;&gt; &lt;code&gt;write&lt;/code&gt; &lt;/a&gt;すべての呼び出しは &lt;code&gt;Ok(buf.len())&lt;/code&gt; を返し、バッファーの内容は検査されません。</target>
        </trans-unit>
        <trans-unit id="792e4e8c3b4454b76d09b3a55c5244a2a04987c6" translate="yes" xml:space="preserve">
          <source>All calls to &lt;code&gt;write&lt;/code&gt; on the returned instance will return &lt;code&gt;Ok(buf.len())&lt;/code&gt; and the contents of the buffer will not be inspected.</source>
          <target state="translated">返されたインスタンスに &lt;code&gt;write&lt;/code&gt; すべての呼び出しは &lt;code&gt;Ok(buf.len())&lt;/code&gt; を返し、バッファーの内容は検査されません。</target>
        </trans-unit>
        <trans-unit id="163ac7eae61cfe370b91ace9f314d434af91aec2" translate="yes" xml:space="preserve">
          <source>All characters contained in the raw string body represent their ASCII encoding, the characters &lt;code&gt;U+0022&lt;/code&gt; (double-quote) (except when followed by at least as many &lt;code&gt;U+0023&lt;/code&gt; (&lt;code&gt;#&lt;/code&gt;) characters as were used to start the raw string literal) or &lt;code&gt;U+005C&lt;/code&gt; (&lt;code&gt;\&lt;/code&gt;) do not have any special meaning.</source>
          <target state="translated">未加工文字列の本文に含まれるすべての文字は、ASCIIエンコーディングを表します。文字 &lt;code&gt;U+0022&lt;/code&gt; （二重引用符）（その後に、未加工文字列リテラルの開始に使用されたのと同じ数の &lt;code&gt;U+0023&lt;/code&gt; （ &lt;code&gt;#&lt;/code&gt; ）文字が続く場合を除く）または &lt;code&gt;U+005C&lt;/code&gt; （ &lt;code&gt;\&lt;/code&gt; ）には特別な意味はありません。</target>
        </trans-unit>
        <trans-unit id="43d6b6384605c36d010e25334a7b59d1666b30b5" translate="yes" xml:space="preserve">
          <source>All closure types implement &lt;a href=&quot;../special-types-and-traits#sized&quot;&gt;&lt;code&gt;Sized&lt;/code&gt;&lt;/a&gt;. Additionally, closure types implement the following traits if allowed to do so by the types of the captures it stores:</source>
          <target state="translated">すべてのクロージャタイプは&lt;a href=&quot;../special-types-and-traits#sized&quot;&gt; &lt;code&gt;Sized&lt;/code&gt; を&lt;/a&gt;実装します。さらに、クロージャタイプは、格納するキャプチャのタイプによって許可されている場合、次の特性を実装します。</target>
        </trans-unit>
        <trans-unit id="a34254512b20b7c3c4f4d4cb8623d62bc5f25917" translate="yes" xml:space="preserve">
          <source>All crates have a &lt;em&gt;prelude&lt;/em&gt; that automatically inserts names from a specific module, the &lt;em&gt;prelude module&lt;/em&gt;, into scope of each &lt;a href=&quot;items/modules&quot;&gt;module&lt;/a&gt; and an &lt;a href=&quot;items/extern-crates&quot;&gt;&lt;code&gt;extern crate&lt;/code&gt;&lt;/a&gt; into the crate root module. By default, the &lt;em&gt;standard prelude&lt;/em&gt; is used. The linked crate is &lt;a href=&quot;../std/index&quot;&gt;&lt;code&gt;std&lt;/code&gt;&lt;/a&gt; and the prelude module is &lt;a href=&quot;../std/prelude/index&quot;&gt;&lt;code&gt;std::prelude::v1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">すべてのクレートには、特定のモジュールからの名前である&lt;em&gt;プレリュードモジュール&lt;/em&gt;を各&lt;a href=&quot;items/modules&quot;&gt;モジュールの&lt;/a&gt;スコープに自動的に挿入する&lt;em&gt;プレリュード&lt;/em&gt;があり、&lt;a href=&quot;items/extern-crates&quot;&gt; &lt;code&gt;extern crate&lt;/code&gt; &lt;/a&gt;がクレートルートモジュールに挿入されます。デフォルトでは、&lt;em&gt;標準のプレリュード&lt;/em&gt;が使用されます。リンクされたクレートは&lt;a href=&quot;../std/index&quot;&gt; &lt;code&gt;std&lt;/code&gt; &lt;/a&gt;で、preludeモジュールは&lt;a href=&quot;../std/prelude/index&quot;&gt; &lt;code&gt;std::prelude::v1&lt;/code&gt; &lt;/a&gt;です。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="80e6d9f67f0a7d01f6edd0112ce6e32390cc7b99" translate="yes" xml:space="preserve">
          <source>All currently blocked and future &lt;a href=&quot;../io/trait.read&quot;&gt;reads&lt;/a&gt; will return &lt;a href=&quot;../result/enum.result#variant.Ok&quot;&gt;&lt;code&gt;Ok(0)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">現在ブロックされているすべての&lt;a href=&quot;../io/trait.read&quot;&gt;読み取り&lt;/a&gt;と将来の読み取りは&lt;a href=&quot;../result/enum.result#variant.Ok&quot;&gt; &lt;code&gt;Ok(0)&lt;/code&gt; &lt;/a&gt;を返します。</target>
        </trans-unit>
        <trans-unit id="ab960fd018156ee2b72c293b0f7c46b28b261211" translate="yes" xml:space="preserve">
          <source>All currently blocked and future &lt;a href=&quot;../io/trait.read&quot;&gt;reads&lt;/a&gt; will return &lt;a href=&quot;../result/enum.result#variant.Ok&quot;&gt;&lt;code&gt;Ok&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(0)&lt;/code&gt;.</source>
          <target state="translated">現在ブロックされているすべての&lt;a href=&quot;../io/trait.read&quot;&gt;読み取り&lt;/a&gt;と将来の読み取りは&lt;a href=&quot;../result/enum.result#variant.Ok&quot;&gt; &lt;code&gt;Ok&lt;/code&gt; &lt;/a&gt; &lt;code&gt;(0)&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="a6d40cb983863467fc229fa6f4b9f265ef62418a" translate="yes" xml:space="preserve">
          <source>All currently blocked and future &lt;a href=&quot;../io/trait.write&quot;&gt;writes&lt;/a&gt; will return an error.</source>
          <target state="translated">現在ブロックされているすべての&lt;a href=&quot;../io/trait.write&quot;&gt;書き込み&lt;/a&gt;と今後の書き込みはエラーを返します。</target>
        </trans-unit>
        <trans-unit id="c24e8493495f5eda7feccf15dd8b5779f86db545" translate="yes" xml:space="preserve">
          <source>All data stored on the stack must have a known, fixed size. Data with an unknown size at compile time or a size that might change must be stored on the heap instead. The heap is less organized: when you put data on the heap, you request a certain amount of space. The memory allocator finds an empty spot in the heap that is big enough, marks it as being in use, and returns a &lt;em&gt;pointer&lt;/em&gt;, which is the address of that location. This process is called &lt;em&gt;allocating on the heap&lt;/em&gt; and is sometimes abbreviated as just &lt;em&gt;allocating&lt;/em&gt;. Pushing values onto the stack is not considered allocating. Because the pointer is a known, fixed size, you can store the pointer on the stack, but when you want the actual data, you must follow the pointer.</source>
          <target state="translated">スタックに格納されるすべてのデータは、既知の固定サイズである必要があります。コンパイル時のサイズが不明なデータ、またはサイズが変更される可能性のあるデータは、代わりにヒープに格納する必要があります。ヒープはあまり整理されていません。ヒープにデータを配置するときは、一定量のスペースを要求します。メモリアロケータは、ヒープ内で十分な大きさの空の場所を見つけ、それを使用中であるとマークし、その場所のアドレスである&lt;em&gt;ポインタ&lt;/em&gt;を返します。このプロセスは&lt;em&gt;ヒープ&lt;/em&gt;への&lt;em&gt;割り当て&lt;/em&gt;と呼ば&lt;em&gt;れ、&lt;/em&gt;単に&lt;em&gt;割り当て&lt;/em&gt;と省略されることもあります。値をスタックにプッシュすることは、割り当てとは見なされません。ポインターは既知の固定サイズであるため、スタックにポインターを格納できますが、実際のデータが必要な場合は、ポインターに従う必要があります。</target>
        </trans-unit>
        <trans-unit id="b5ad10491502eb3084d1fb833cddef2d6e97c099" translate="yes" xml:space="preserve">
          <source>All data stored on the stack must have a known, fixed size. Data with an unknown size at compile time or a size that might change must be stored on the heap instead. The heap is less organized: when you put data on the heap, you request a certain amount of space. The operating system finds an empty spot in the heap that is big enough, marks it as being in use, and returns a &lt;em&gt;pointer&lt;/em&gt;, which is the address of that location. This process is called &lt;em&gt;allocating on the heap&lt;/em&gt; and is sometimes abbreviated as just &lt;em&gt;allocating&lt;/em&gt;. Pushing values onto the stack is not considered allocating. Because the pointer is a known, fixed size, you can store the pointer on the stack, but when you want the actual data, you must follow the pointer.</source>
          <target state="translated">スタックに格納されるすべてのデータは、既知の固定サイズでなければなりません。コンパイル時に不明なサイズまたは変更される可能性のあるサイズのデータ​​は、代わりにヒープに格納する必要があります。ヒープはあまり整理されていません。ヒープにデータを配置すると、一定量のスペースが要求されます。オペレーティングシステムは、十分な大きさのヒープ内の空の場所を見つけ、使用中としてマークし、その場所のアドレスである&lt;em&gt;ポインタ&lt;/em&gt;を返します。このプロセスは&lt;em&gt;、ヒープ&lt;/em&gt;への&lt;em&gt;割り当て&lt;/em&gt;と呼ば&lt;em&gt;れ、&lt;/em&gt;単に&lt;em&gt;割り当てる&lt;/em&gt;ことと略されることもあります。スタックに値をプッシュすることは、割り当てとは見なされません。ポインタは既知の固定サイズであるため、スタックにポインタを格納できますが、実際のデータが必要な場合は、ポインタに従う必要があります。</target>
        </trans-unit>
        <trans-unit id="c3ab61183db153bdcb93b3db49372bcfa15c64d0" translate="yes" xml:space="preserve">
          <source>All elements of arrays are always initialized, and access to an array is always bounds-checked in safe methods and operators.</source>
          <target state="translated">配列のすべての要素は常に初期化され、配列へのアクセスは常に安全なメソッドと演算子で境界チェックされます。</target>
        </trans-unit>
        <trans-unit id="7fbb5676d98408c23a91ee3e50ae6931e19803d3" translate="yes" xml:space="preserve">
          <source>All elements of slices are always initialized, and access to a slice is always bounds-checked in safe methods and operators.</source>
          <target state="translated">スライスのすべての要素は常に初期化され、スライスへのアクセスは常に安全なメソッドと演算子で境界チェックされます。</target>
        </trans-unit>
        <trans-unit id="5797b6e64335a290bd1264b10ba82cdf81409cc5" translate="yes" xml:space="preserve">
          <source>All fields in a &lt;code&gt;union&lt;/code&gt; are all at the same place in memory which means borrowing one borrows the entire &lt;code&gt;union&lt;/code&gt;, for the same lifetime:</source>
          <target state="translated">&lt;code&gt;union&lt;/code&gt; 内のすべてのフィールドは、メモリ内のすべて同じ場所にあります。つまり、1つを借りると、同じライフタイムで &lt;code&gt;union&lt;/code&gt; 全体が借りられます。</target>
        </trans-unit>
        <trans-unit id="833e88d98de8f4240c961bc71bc4ebdf6caf04e8" translate="yes" xml:space="preserve">
          <source>All five array values appear in the terminal, as expected. Even though &lt;code&gt;index&lt;/code&gt; will reach a value of &lt;code&gt;5&lt;/code&gt; at some point, the loop stops executing before trying to fetch a sixth value from the array.</source>
          <target state="translated">予想どおり、5つの配列値すべてがターミナルに表示されます。 &lt;code&gt;index&lt;/code&gt; がある時点で値 &lt;code&gt;5&lt;/code&gt; に到達しても、ループは配列から6番目の値をフェッチしようとする前に実行を停止します。</target>
        </trans-unit>
        <trans-unit id="9baa2527c7d6929ffc1c3e903b5bd7bcaaf4a17a" translate="yes" xml:space="preserve">
          <source>All four types of loop support &lt;a href=&quot;#break-expressions&quot;&gt;&lt;code&gt;break&lt;/code&gt; expressions&lt;/a&gt;, &lt;a href=&quot;#continue-expressions&quot;&gt;&lt;code&gt;continue&lt;/code&gt; expressions&lt;/a&gt;, and &lt;a href=&quot;#loop-labels&quot;&gt;labels&lt;/a&gt;. Only &lt;code&gt;loop&lt;/code&gt; supports &lt;a href=&quot;#break-and-loop-values&quot;&gt;evaluation to non-trivial values&lt;/a&gt;.</source>
          <target state="translated">4種類のループはすべて、&lt;a href=&quot;#break-expressions&quot;&gt; &lt;code&gt;break&lt;/code&gt; 式&lt;/a&gt;、&lt;a href=&quot;#continue-expressions&quot;&gt; &lt;code&gt;continue&lt;/code&gt; 式&lt;/a&gt;、および&lt;a href=&quot;#loop-labels&quot;&gt;ラベルを&lt;/a&gt;サポートしています。 &lt;code&gt;loop&lt;/code&gt; のみが&lt;a href=&quot;#break-and-loop-values&quot;&gt;重要な値への評価を&lt;/a&gt;サポートします。</target>
        </trans-unit>
        <trans-unit id="e11d83f6e553be6952611c97ac05bbc3817eeae9" translate="yes" xml:space="preserve">
          <source>All four types of loop support &lt;a href=&quot;loop-expr#break-expressions&quot;&gt;&lt;code&gt;break&lt;/code&gt; expressions&lt;/a&gt;, &lt;a href=&quot;loop-expr#continue-expressions&quot;&gt;&lt;code&gt;continue&lt;/code&gt; expressions&lt;/a&gt;, and &lt;a href=&quot;loop-expr#loop-labels&quot;&gt;labels&lt;/a&gt;. Only &lt;code&gt;loop&lt;/code&gt; supports &lt;a href=&quot;loop-expr#break-and-loop-values&quot;&gt;evaluation to non-trivial values&lt;/a&gt;.</source>
          <target state="translated">4つのタイプのループはすべて、&lt;a href=&quot;loop-expr#break-expressions&quot;&gt; &lt;code&gt;break&lt;/code&gt; 式&lt;/a&gt;、&lt;a href=&quot;loop-expr#continue-expressions&quot;&gt; &lt;code&gt;continue&lt;/code&gt; 式&lt;/a&gt;、および&lt;a href=&quot;loop-expr#loop-labels&quot;&gt;ラベルを&lt;/a&gt;サポートしています。 &lt;code&gt;loop&lt;/code&gt; のみが&lt;a href=&quot;loop-expr#break-and-loop-values&quot;&gt;重要な値への評価を&lt;/a&gt;サポートしています。</target>
        </trans-unit>
        <trans-unit id="0615d0c10f128d4e7e9a656552c9285eca738194" translate="yes" xml:space="preserve">
          <source>All function items implement &lt;a href=&quot;../../std/ops/trait.fn&quot;&gt;&lt;code&gt;Fn&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../std/ops/trait.fnmut&quot;&gt;&lt;code&gt;FnMut&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../std/ops/trait.fnonce&quot;&gt;&lt;code&gt;FnOnce&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../special-types-and-traits#copy&quot;&gt;&lt;code&gt;Copy&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../special-types-and-traits#clone&quot;&gt;&lt;code&gt;Clone&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../special-types-and-traits#send&quot;&gt;&lt;code&gt;Send&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../special-types-and-traits#sync&quot;&gt;&lt;code&gt;Sync&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">すべての関数項目は、&lt;a href=&quot;../../std/ops/trait.fn&quot;&gt; &lt;code&gt;Fn&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../../std/ops/trait.fnmut&quot;&gt; &lt;code&gt;FnMut&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../../std/ops/trait.fnonce&quot;&gt; &lt;code&gt;FnOnce&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../special-types-and-traits#copy&quot;&gt; &lt;code&gt;Copy&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../special-types-and-traits#clone&quot;&gt; &lt;code&gt;Clone&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../special-types-and-traits#send&quot;&gt; &lt;code&gt;Send&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;../special-types-and-traits#sync&quot;&gt; &lt;code&gt;Sync&lt;/code&gt; &lt;/a&gt;実装します。</target>
        </trans-unit>
        <trans-unit id="36815ff2f54c1ef032403bd6365a096bb5c32000" translate="yes" xml:space="preserve">
          <source>All function parameters are in the scope of the entire function body, so are dropped last when evaluating the function. Each actual function parameter is dropped after any bindings introduced in that parameter's pattern.</source>
          <target state="translated">すべての関数パラメータは関数本体全体のスコープ内にあるため、関数を評価する際には最後に削除されます。各実際の関数パラメータは、そのパラメータのパターンに導入されたバインディングの後に削除されます。</target>
        </trans-unit>
        <trans-unit id="c77d0720d55ff4ece3326614a73ddde6503e3179" translate="yes" xml:space="preserve">
          <source>All implementations of &lt;code&gt;Unsize&lt;/code&gt; are provided automatically by the compiler.</source>
          <target state="translated">&lt;code&gt;Unsize&lt;/code&gt; のすべての実装は、コンパイラによって自動的に提供されます。</target>
        </trans-unit>
        <trans-unit id="94282a18d174676690037624bae4b4b406cb02ee" translate="yes" xml:space="preserve">
          <source>All iterators implement a trait named &lt;code&gt;Iterator&lt;/code&gt; that is defined in the standard library. The definition of the trait looks like this:</source>
          <target state="translated">すべての反復子は、標準ライブラリで定義されている &lt;code&gt;Iterator&lt;/code&gt; という名前の特性を実装します。トレイトの定義は次のようになります。</target>
        </trans-unit>
        <trans-unit id="7da42c45b54f4237c99325204711121b9f08beec" translate="yes" xml:space="preserve">
          <source>All kinds of ASCII whitespace are considered:</source>
          <target state="translated">すべての種類のASCIIホワイトスペースを考慮しています。</target>
        </trans-unit>
        <trans-unit id="3e530c202d9d3c48672f8f7b98a14e41befed3be" translate="yes" xml:space="preserve">
          <source>All kinds of whitespace are considered:</source>
          <target state="translated">あらゆる種類のホワイトスペースが考慮されています。</target>
        </trans-unit>
        <trans-unit id="9c42bdece20642dd1d10ab718ff507235d349b8d" translate="yes" xml:space="preserve">
          <source>All layouts have an associated non-negative size and a power-of-two alignment.</source>
          <target state="translated">すべてのレイアウトは、関連する非負のサイズと2乗のアライメントを持っています。</target>
        </trans-unit>
        <trans-unit id="ad65ecd6f4c6a3cd749629f3ba92add5fa618dd9" translate="yes" xml:space="preserve">
          <source>All layouts have an associated size and a power-of-two alignment.</source>
          <target state="translated">すべてのレイアウトには、関連するサイズとパワー・オブ・ツーのアライメントがあります。</target>
        </trans-unit>
        <trans-unit id="7178a9053518ff1c5e401dc1d4bee4c24f25359b" translate="yes" xml:space="preserve">
          <source>All of</source>
          <target state="translated">すべての</target>
        </trans-unit>
        <trans-unit id="32f70044558e382c5ebf59ec68e9d711cc2cb7b2" translate="yes" xml:space="preserve">
          <source>All of the coefficients get stored in registers, which means accessing the values is very fast. There are no bounds checks on the array access at runtime. All these optimizations that Rust is able to apply make the resulting code extremely efficient. Now that you know this, you can use iterators and closures without fear! They make code seem like it&amp;rsquo;s higher level but don&amp;rsquo;t impose a runtime performance penalty for doing so.</source>
          <target state="translated">すべての係数はレジスタに格納されます。つまり、値へのアクセスは非常に高速です。実行時の配列アクセスには境界チェックはありません。Rustが適用できるこれらすべての最適化により、結果のコードは非常に効率的になります。これがわかったので、イテレーターとクロージャーを恐れずに使用できます！それらはコードをより高いレベルのように見せますが、そうするために実行時のパフォーマンスのペナルティを課しません。</target>
        </trans-unit>
        <trans-unit id="17dabbf042cc2454dd1f0ba98c8b7c6f3be65ec5" translate="yes" xml:space="preserve">
          <source>All of the logic that manages the counts and value dropping is built into &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; and &lt;code&gt;Weak&amp;lt;T&amp;gt;&lt;/code&gt; and their implementations of the &lt;code&gt;Drop&lt;/code&gt; trait. By specifying that the relationship from a child to its parent should be a &lt;code&gt;Weak&amp;lt;T&amp;gt;&lt;/code&gt; reference in the definition of &lt;code&gt;Node&lt;/code&gt;, you&amp;rsquo;re able to have parent nodes point to child nodes and vice versa without creating a reference cycle and memory leaks.</source>
          <target state="translated">カウントと値のドロップを管理するすべてのロジックは、 &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; と &lt;code&gt;Weak&amp;lt;T&amp;gt;&lt;/code&gt; とそれらの &lt;code&gt;Drop&lt;/code&gt; トレイトの実装に組み込まれています。子からその親への関係が &lt;code&gt;Node&lt;/code&gt; の定義で &lt;code&gt;Weak&amp;lt;T&amp;gt;&lt;/code&gt; 参照になるように指定することにより、参照サイクルとメモリリークを作成せずに、親ノードを子ノードにポイントでき、その逆も可能です。</target>
        </trans-unit>
        <trans-unit id="469c3254d30ae896569972fb8c0f6e762f31a91d" translate="yes" xml:space="preserve">
          <source>All of the standard collections provide several iterators for performing bulk manipulation of their contents. The three primary iterators almost every collection should provide are &lt;code&gt;iter&lt;/code&gt;, &lt;code&gt;iter_mut&lt;/code&gt;, and &lt;code&gt;into_iter&lt;/code&gt;. Some of these are not provided on collections where it would be unsound or unreasonable to provide them.</source>
          <target state="translated">すべての標準コレクションには、コンテンツの一括操作を実行するためのいくつかの反復子が用意されています。ほとんどすべてのコレクションが提供する必要がある3つの主要なイテレータは、 &lt;code&gt;iter&lt;/code&gt; 、 &lt;code&gt;iter_mut&lt;/code&gt; 、および &lt;code&gt;into_iter&lt;/code&gt; です。これらのいくつかは、それらを提供することが不健全または不合理であるコレクションでは提供されません。</target>
        </trans-unit>
        <trans-unit id="7c09f50beeaa399a934ba76d5cc5d913f4961d31" translate="yes" xml:space="preserve">
          <source>All of these are valid &lt;code&gt;String&lt;/code&gt; values.</source>
          <target state="translated">これらはすべて有効な &lt;code&gt;String&lt;/code&gt; 値です。</target>
        </trans-unit>
        <trans-unit id="3488f647e2016335e532591f4617d056149f656a" translate="yes" xml:space="preserve">
          <source>All of these method calls are possible because we specified how the &lt;code&gt;next&lt;/code&gt; method works, and the standard library provides default implementations for other methods that call &lt;code&gt;next&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;next&lt;/code&gt; メソッドの動作方法を指定したため、これらのメソッド呼び出しはすべて可能であり、標準ライブラリは、 &lt;code&gt;next&lt;/code&gt; を呼び出す他のメソッドのデフォルト実装を提供します。</target>
        </trans-unit>
        <trans-unit id="2a8409870b71900361c6e9ce41cc4d8b31f5a720" translate="yes" xml:space="preserve">
          <source>All options are initially set to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">すべてのオプションは、最初は &lt;code&gt;false&lt;/code&gt; に設定されています。</target>
        </trans-unit>
        <trans-unit id="cec813890e4d07a2defc7bce522b39b7b6522a4d" translate="yes" xml:space="preserve">
          <source>All other arguments given to the &lt;code&gt;inline&lt;/code&gt; attribute will return this error. Example:</source>
          <target state="translated">&lt;code&gt;inline&lt;/code&gt; 属性に他のすべての引数を指定すると、このエラーが返されます。例：</target>
        </trans-unit>
        <trans-unit id="01957b2f8a375b806a015963a415dc2f430add14" translate="yes" xml:space="preserve">
          <source>All other arguments given to the &lt;code&gt;instruction_set&lt;/code&gt; attribute will return this error. Example:</source>
          <target state="translated">&lt;code&gt;instruction_set&lt;/code&gt; 属性に指定された他のすべての引数は、このエラーを返します。例：</target>
        </trans-unit>
        <trans-unit id="110d2b10be35d17317e6c561cf91a4fabbf8e826" translate="yes" xml:space="preserve">
          <source>All other characters are given hexadecimal Unicode escapes; see &lt;a href=&quot;#method.escape_unicode&quot;&gt;&lt;code&gt;escape_unicode&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">他のすべての文字には、16進数のUnicodeエスケープが与えられます。&lt;a href=&quot;#method.escape_unicode&quot;&gt; &lt;code&gt;escape_unicode&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="f76ce538d07b9974a525f600e48b7f5dff4ae16c" translate="yes" xml:space="preserve">
          <source>All other fragment specifiers have no restrictions.</source>
          <target state="translated">他のすべてのフラグメント指定子には制限はありません。</target>
        </trans-unit>
        <trans-unit id="fef84ba857bf1c83a92f8d5a5b2d52afc2b3c691" translate="yes" xml:space="preserve">
          <source>All pointers (except for the null pointer) are valid for all operations of &lt;a href=&quot;https://doc.rust-lang.org/nomicon/exotic-sizes.html#zero-sized-types-zsts&quot;&gt;size zero&lt;/a&gt;.</source>
          <target state="translated">すべてのポインター（ヌルポインターを除く）は、&lt;a href=&quot;https://doc.rust-lang.org/nomicon/exotic-sizes.html#zero-sized-types-zsts&quot;&gt;サイズがゼロの&lt;/a&gt;すべての操作に有効です。</target>
        </trans-unit>
        <trans-unit id="bcec8da89ce19312f810d6e8b0a4c1c994af8c3f" translate="yes" xml:space="preserve">
          <source>All pointers in Rust are explicit first-class values. They can be moved or copied, stored into data structs, and returned from functions.</source>
          <target state="translated">Rust のすべてのポインタは明示的なファーストクラス値です。これらは移動やコピー、データ構造体への格納、関数からの戻り値として使用できます。</target>
        </trans-unit>
        <trans-unit id="6a33c45e166bf3f976aac4c7eec793b7d8946ca1" translate="yes" xml:space="preserve">
          <source>All programmers strive to make their code easy to understand, but sometimes extra explanation is warranted. In these cases, programmers leave notes, or &lt;em&gt;comments&lt;/em&gt;, in their source code that the compiler will ignore but people reading the source code may find useful.</source>
          <target state="translated">すべてのプログラマーはコードを理解しやすくするよう努めていますが、追加の説明が必要な場合もあります。このような場合、プログラマーはソースコードにメモまたは&lt;em&gt;コメントを&lt;/em&gt;残しますが、コンパイラーは無視しますが、ソースコードを読んでいる人には便利です。</target>
        </trans-unit>
        <trans-unit id="aa0c879bcf5cab9e7f4749d5ede013d5bf918c1f" translate="yes" xml:space="preserve">
          <source>All programs have to manage the way they use a computer&amp;rsquo;s memory while running. Some languages have garbage collection that constantly looks for no longer used memory as the program runs; in other languages, the programmer must explicitly allocate and free the memory. Rust uses a third approach: memory is managed through a system of ownership with a set of rules that the compiler checks at compile time. None of the ownership features slow down your program while it&amp;rsquo;s running.</source>
          <target state="translated">すべてのプログラムは、実行中にコンピュータのメモリを使用する方法を管理する必要があります。一部の言語には、プログラムの実行時に使用されなくなったメモリを常に探すガベージコレクションがあります。他の言語では、プログラマは明示的にメモリを割り当てて解放する必要があります。Rustは3番目のアプローチを使用します。メモリーは、コンパイラーがコンパイル時にチェックする一連のルールを持つ所有権のシステムを通じて管理されます。所有権機能は、プログラムの実行中にプログラムの速度を低下させることはありません。</target>
        </trans-unit>
        <trans-unit id="cf610b10a23cb06f62489f071586a11ed04b1ece" translate="yes" xml:space="preserve">
          <source>All reads from the returned reader will return &lt;a href=&quot;../result/enum.result#variant.Ok&quot;&gt;&lt;code&gt;Ok&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(0)&lt;/code&gt;.</source>
          <target state="translated">返されたリーダーからのすべての読み取りは&lt;a href=&quot;../result/enum.result#variant.Ok&quot;&gt; &lt;code&gt;Ok&lt;/code&gt; &lt;/a&gt; &lt;code&gt;(0)&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="5edadac5bb39f603d58e3300e69ef3e103ed0e48" translate="yes" xml:space="preserve">
          <source>All reads from this reader will succeed by filling the specified buffer with the given byte.</source>
          <target state="translated">このリーダーからのすべての読み取りは、指定されたバイトで指定されたバッファを埋めることで成功します。</target>
        </trans-unit>
        <trans-unit id="8042ca5a8b0159faa7d15d89ddf16924d0bee8ca" translate="yes" xml:space="preserve">
          <source>All results of &lt;code&gt;next()&lt;/code&gt; need to be identical to the results of &lt;code&gt;next_back()&lt;/code&gt; in reverse order.</source>
          <target state="translated">&lt;code&gt;next()&lt;/code&gt; の結果はすべて、逆の順序で &lt;code&gt;next_back()&lt;/code&gt; の結果と同一である必要があります。</target>
        </trans-unit>
        <trans-unit id="051b0a6da7e5a99366866472afe4cedd9c4ae587" translate="yes" xml:space="preserve">
          <source>All strings that adhere to the following &lt;a href=&quot;https://www.w3.org/TR/REC-xml/#sec-notation&quot;&gt;EBNF&lt;/a&gt; grammar will result in an &lt;a href=&quot;../result/enum.result#Ok.v&quot;&gt;&lt;code&gt;Ok&lt;/code&gt;&lt;/a&gt; being returned:</source>
          <target state="translated">次の&lt;a href=&quot;https://www.w3.org/TR/REC-xml/#sec-notation&quot;&gt;EBNF&lt;/a&gt;文法に準拠するすべての文字列は、&lt;a href=&quot;../result/enum.result#Ok.v&quot;&gt; &lt;code&gt;Ok&lt;/code&gt; &lt;/a&gt;が返されます。</target>
        </trans-unit>
        <trans-unit id="ba6c1035e6000e531913744213ce54c88bb453f8" translate="yes" xml:space="preserve">
          <source>All strings that adhere to the following &lt;a href=&quot;https://www.w3.org/TR/REC-xml/#sec-notation&quot;&gt;EBNF&lt;/a&gt; grammar will result in an &lt;a href=&quot;../result/enum.result#variant.Ok&quot;&gt;&lt;code&gt;Ok&lt;/code&gt;&lt;/a&gt; being returned:</source>
          <target state="translated">All strings that adhere to the following &lt;a href=&quot;https://www.w3.org/TR/REC-xml/#sec-notation&quot;&gt;EBNF&lt;/a&gt; grammar will result in an &lt;a href=&quot;../result/enum.result#variant.Ok&quot;&gt; &lt;code&gt;Ok&lt;/code&gt; &lt;/a&gt; being returned:</target>
        </trans-unit>
        <trans-unit id="8c2330d9e11176797f3b69c4b492614aa87568d1" translate="yes" xml:space="preserve">
          <source>All strings that adhere to the following &lt;a href=&quot;https://www.w3.org/TR/REC-xml/#sec-notation&quot;&gt;EBNF&lt;/a&gt; grammar will result in an &lt;a href=&quot;result/enum.result#Ok.v&quot;&gt;&lt;code&gt;Ok&lt;/code&gt;&lt;/a&gt; being returned:</source>
          <target state="translated">次の&lt;a href=&quot;https://www.w3.org/TR/REC-xml/#sec-notation&quot;&gt;EBNF&lt;/a&gt;文法に準拠するすべての文字列は、&lt;a href=&quot;result/enum.result#Ok.v&quot;&gt; &lt;code&gt;Ok&lt;/code&gt; &lt;/a&gt;が返されます。</target>
        </trans-unit>
        <trans-unit id="5099415fb85a9568ce08c4de6d590b1962a9de28" translate="yes" xml:space="preserve">
          <source>All strings that adhere to the following &lt;a href=&quot;https://www.w3.org/TR/REC-xml/#sec-notation&quot;&gt;EBNF&lt;/a&gt; grammar will result in an &lt;a href=&quot;result/enum.result#variant.Ok&quot;&gt;&lt;code&gt;Ok&lt;/code&gt;&lt;/a&gt; being returned:</source>
          <target state="translated">All strings that adhere to the following &lt;a href=&quot;https://www.w3.org/TR/REC-xml/#sec-notation&quot;&gt;EBNF&lt;/a&gt; grammar will result in an &lt;a href=&quot;result/enum.result#variant.Ok&quot;&gt; &lt;code&gt;Ok&lt;/code&gt; &lt;/a&gt; being returned:</target>
        </trans-unit>
        <trans-unit id="d19c4500c8b81bcefce226435a932d9bd67dd1d4" translate="yes" xml:space="preserve">
          <source>All supertraits must also be object safe.</source>
          <target state="translated">すべてのスーパーシステムは、オブジェクトの安全性も確保しなければなりません。</target>
        </trans-unit>
        <trans-unit id="3834b26accc0c7926a85719d5492f93bbdde2cd6" translate="yes" xml:space="preserve">
          <source>All the Places Patterns Can Be Used</source>
          <target state="translated">パターンが使える場所はすべて</target>
        </trans-unit>
        <trans-unit id="70ddc33f2c0eb4587fa8e2cac6e8f77be9184d95" translate="yes" xml:space="preserve">
          <source>All the code we&amp;rsquo;ve discussed so far has had Rust&amp;rsquo;s memory safety guarantees enforced at compile time. However, Rust has a second language hidden inside it that doesn&amp;rsquo;t enforce these memory safety guarantees: it&amp;rsquo;s called &lt;em&gt;unsafe Rust&lt;/em&gt; and works just like regular Rust, but gives us extra superpowers.</source>
          <target state="translated">これまでに説明したすべてのコードには、コンパイル時にRustのメモリの安全性が保証されています。ただし、Rustの内部には、これらのメモリの安全性を保証しない第2の言語が隠されています。これは&lt;em&gt;安全でないRust&lt;/em&gt;と呼ばれ、通常のRustと同じように機能しますが、追加の超能力を提供します。</target>
        </trans-unit>
        <trans-unit id="5d094a6ebf518b356f6cc88f0daffccbeaa88d1a" translate="yes" xml:space="preserve">
          <source>All the floating point types, such as &lt;code&gt;f64&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;f64&lt;/code&gt; などのすべての浮動小数点型。</target>
        </trans-unit>
        <trans-unit id="49768c9761f944e57fd8b28ffb7ccca3ce0255bf" translate="yes" xml:space="preserve">
          <source>All the integer types, such as &lt;code&gt;u32&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;u32&lt;/code&gt; などのすべての整数型。</target>
        </trans-unit>
        <trans-unit id="7aad067d2eb4fd66349ef7460833027940768e31" translate="yes" xml:space="preserve">
          <source>All the traits in &lt;a href=&quot;fmt/index&quot;&gt;&lt;code&gt;std::fmt&lt;/code&gt;&lt;/a&gt; except &lt;a href=&quot;fmt/trait.pointer&quot;&gt;&lt;code&gt;Pointer&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;fmt/trait.write&quot;&gt;&lt;code&gt;fmt::Write&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;fmt/trait.pointer&quot;&gt; &lt;code&gt;Pointer&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;fmt/trait.write&quot;&gt; &lt;code&gt;fmt::Write&lt;/code&gt; &lt;/a&gt;を除く&lt;a href=&quot;fmt/index&quot;&gt; &lt;code&gt;std::fmt&lt;/code&gt; &lt;/a&gt;すべての特性</target>
        </trans-unit>
        <trans-unit id="5fbc378a4bea0c74a504553c4655c69b13216d43" translate="yes" xml:space="preserve">
          <source>All tokens have an associated &lt;code&gt;Span&lt;/code&gt;. A &lt;code&gt;Span&lt;/code&gt; is an opaque value that cannot be modified but can be manufactured. &lt;code&gt;Span&lt;/code&gt;s represent an extent of source code within a program and are primarily used for error reporting. You can modify the &lt;code&gt;Span&lt;/code&gt; of any token.</source>
          <target state="translated">すべてのトークンには &lt;code&gt;Span&lt;/code&gt; が関連付けられています。A &lt;code&gt;Span&lt;/code&gt; 変更することができないが、製造することができる不透明な値です。 &lt;code&gt;Span&lt;/code&gt; は、プログラム内のソースコードの範囲を表し、主にエラー報告に使用されます。あなたは修正することができます &lt;code&gt;Span&lt;/code&gt; 任意のトークンスパンをできます。</target>
        </trans-unit>
        <trans-unit id="c4b7c6a0fbafa4ae17e0c283d126acf9c731f848" translate="yes" xml:space="preserve">
          <source>All traits define an implicit type parameter &lt;code&gt;Self&lt;/code&gt; that refers to &quot;the type that is implementing this interface&quot;. Traits may also contain additional type parameters. These type parameters, including &lt;code&gt;Self&lt;/code&gt;, may be constrained by other traits and so forth &lt;a href=&quot;generics&quot;&gt;as usual&lt;/a&gt;.</source>
          <target state="translated">すべての特性は、「このインターフェースを実装している型」を参照する暗黙の型パラメーター &lt;code&gt;Self&lt;/code&gt; を定義します。トレイトには、追加の型パラメーターも含まれる場合があります。 &lt;code&gt;Self&lt;/code&gt; を含むこれらの型パラメーターは、他の特性などによって制約される場合があります。&lt;a href=&quot;generics&quot;&gt;通常どおり&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e6af2c7840468532a887d826478745d410145630" translate="yes" xml:space="preserve">
          <source>All type parameters have an implicit bound of &lt;code&gt;Sized&lt;/code&gt;. The special syntax &lt;code&gt;?Sized&lt;/code&gt; can be used to remove this bound if it's not appropriate.</source>
          <target state="translated">すべての型パラメーターには、 &lt;code&gt;Sized&lt;/code&gt; の暗黙の境界があります。特別な構文 &lt;code&gt;?Sized&lt;/code&gt; を使用して、適切でない場合にこの境界を削除できます。</target>
        </trans-unit>
        <trans-unit id="9fcb4ee73e3ea3e00af83f66cf487fb2ad10ff05" translate="yes" xml:space="preserve">
          <source>All types in a tuple struct aren't the same when using the &lt;code&gt;#[simd]&lt;/code&gt; attribute.</source>
          <target state="translated">All types in a tuple struct aren't the same when using the &lt;code&gt;#[simd]&lt;/code&gt; attribute.</target>
        </trans-unit>
        <trans-unit id="687bde44d55450fc7926f1ddbef8c12777b88228" translate="yes" xml:space="preserve">
          <source>All user-defined composite types (&lt;code&gt;struct&lt;/code&gt;s, &lt;code&gt;enum&lt;/code&gt;s, and &lt;code&gt;union&lt;/code&gt;s) have a &lt;em&gt;representation&lt;/em&gt; that specifies what the layout is for the type. The possible representations for a type are:</source>
          <target state="translated">すべてのユーザー定義の複合型（ &lt;code&gt;struct&lt;/code&gt; 、 &lt;code&gt;enum&lt;/code&gt; 、および &lt;code&gt;union&lt;/code&gt; ）には、その型のレイアウトを指定する&lt;em&gt;表現&lt;/em&gt;があります。タイプの可能な表現は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="b66aa8bf38f6384faa05e5ba7a817e6473b9a5b6" translate="yes" xml:space="preserve">
          <source>All values have an alignment and size.</source>
          <target state="translated">すべての値には整列とサイズがあります。</target>
        </trans-unit>
        <trans-unit id="6b3bc16295776314b52aa5587d61ce1888ff84c1" translate="yes" xml:space="preserve">
          <source>Alloc</source>
          <target state="translated">Alloc</target>
        </trans-unit>
        <trans-unit id="73c626eee3cffa40774dfe1fcb9f6b9bd69dc64f" translate="yes" xml:space="preserve">
          <source>Alloc::alloc</source>
          <target state="translated">Alloc::alloc</target>
        </trans-unit>
        <trans-unit id="58fa8f803498e5ec9addefde8bfd45a79dbec5ed" translate="yes" xml:space="preserve">
          <source>Alloc::alloc_array</source>
          <target state="translated">Alloc::alloc_array</target>
        </trans-unit>
        <trans-unit id="b50e7d6a8a9d06e47daea96c8b2aea5c45efb165" translate="yes" xml:space="preserve">
          <source>Alloc::alloc_excess</source>
          <target state="translated">Alloc::alloc_excess</target>
        </trans-unit>
        <trans-unit id="889b443e61594610d30213145f921f146db36832" translate="yes" xml:space="preserve">
          <source>Alloc::alloc_one</source>
          <target state="translated">Alloc::alloc_one</target>
        </trans-unit>
        <trans-unit id="a34261c2be453348710c37c58e7b9c83398884d8" translate="yes" xml:space="preserve">
          <source>Alloc::alloc_zeroed</source>
          <target state="translated">Alloc::alloc_zeroed</target>
        </trans-unit>
        <trans-unit id="7d3d2688c4fd76b53fe3390539a364662ab17d4b" translate="yes" xml:space="preserve">
          <source>Alloc::dealloc</source>
          <target state="translated">Alloc::dealloc</target>
        </trans-unit>
        <trans-unit id="640d5625de8ef766306d60749a2169115e55e156" translate="yes" xml:space="preserve">
          <source>Alloc::dealloc_array</source>
          <target state="translated">Alloc::dealloc_array</target>
        </trans-unit>
        <trans-unit id="7053fc65b9dd32b26e961ddd07f10fe845724b56" translate="yes" xml:space="preserve">
          <source>Alloc::dealloc_one</source>
          <target state="translated">Alloc::dealloc_one</target>
        </trans-unit>
        <trans-unit id="c1a3b352f967fd646042d5ec8feb84a7842b4835" translate="yes" xml:space="preserve">
          <source>Alloc::grow_in_place</source>
          <target state="translated">Alloc::grow_in_place</target>
        </trans-unit>
        <trans-unit id="b0c3031aac44345a0cd3601e017910c7886cd822" translate="yes" xml:space="preserve">
          <source>Alloc::realloc</source>
          <target state="translated">Alloc::realloc</target>
        </trans-unit>
        <trans-unit id="50682f5a6557029f4ae580a726dd0a2a8ee83c83" translate="yes" xml:space="preserve">
          <source>Alloc::realloc_array</source>
          <target state="translated">Alloc::realloc_array</target>
        </trans-unit>
        <trans-unit id="71b9b4276801f0c0a766cb281400a5a34452c7e1" translate="yes" xml:space="preserve">
          <source>Alloc::realloc_excess</source>
          <target state="translated">Alloc::realloc_excess</target>
        </trans-unit>
        <trans-unit id="caed8ad7c332dd652a64a2f5a64ee5adce448144" translate="yes" xml:space="preserve">
          <source>Alloc::shrink_in_place</source>
          <target state="translated">Alloc::shrink_in_place</target>
        </trans-unit>
        <trans-unit id="4bdde8e404d1e339cdf8e89ef42138d76fb64cb5" translate="yes" xml:space="preserve">
          <source>Alloc::usable_size</source>
          <target state="translated">Alloc::usable_size</target>
        </trans-unit>
        <trans-unit id="74f9a2a318fbafb57c2a318b7f97cd7f558235f5" translate="yes" xml:space="preserve">
          <source>AllocErr</source>
          <target state="translated">AllocErr</target>
        </trans-unit>
        <trans-unit id="81a1e8e44229166f6c5d59b8b5cdfbd7de11a910" translate="yes" xml:space="preserve">
          <source>AllocErr::borrow</source>
          <target state="translated">AllocErr::borrow</target>
        </trans-unit>
        <trans-unit id="cab0d29cfc07f03d441e5891d8fdae354b136ec1" translate="yes" xml:space="preserve">
          <source>AllocErr::borrow_mut</source>
          <target state="translated">AllocErr::borrow_mut</target>
        </trans-unit>
        <trans-unit id="c63e5f5e71fd2207c8a6514237ae70d9dca95cf3" translate="yes" xml:space="preserve">
          <source>AllocErr::cause</source>
          <target state="translated">AllocErr::cause</target>
        </trans-unit>
        <trans-unit id="09ff0aa0e6ca318ce203b20e17f08354650229f1" translate="yes" xml:space="preserve">
          <source>AllocErr::clone</source>
          <target state="translated">AllocErr::clone</target>
        </trans-unit>
        <trans-unit id="777d6911608c872b31c4bdb18d3b776c08a9b8f5" translate="yes" xml:space="preserve">
          <source>AllocErr::clone_from</source>
          <target state="translated">AllocErr::clone_from</target>
        </trans-unit>
        <trans-unit id="b678a089fb922c246660ee4daaf38a5251355da7" translate="yes" xml:space="preserve">
          <source>AllocErr::clone_into</source>
          <target state="translated">AllocErr::clone_into</target>
        </trans-unit>
        <trans-unit id="5df229543f81998e9da115264fa06013a927adb1" translate="yes" xml:space="preserve">
          <source>AllocErr::description</source>
          <target state="translated">AllocErr::description</target>
        </trans-unit>
        <trans-unit id="d2cf0a94fd5cf29c79c5284616875b84972fb312" translate="yes" xml:space="preserve">
          <source>AllocErr::eq</source>
          <target state="translated">AllocErr::eq</target>
        </trans-unit>
        <trans-unit id="5881f4abcdbf06d5924b4a78a521cc0027e69523" translate="yes" xml:space="preserve">
          <source>AllocErr::fmt</source>
          <target state="translated">AllocErr::fmt</target>
        </trans-unit>
        <trans-unit id="270a3da0beb21d444fb57d0c363b8a08cfe0f022" translate="yes" xml:space="preserve">
          <source>AllocErr::from</source>
          <target state="translated">AllocErr::from</target>
        </trans-unit>
        <trans-unit id="98b28dbbeacbc8b3f7530e8cbb0f5369608cd809" translate="yes" xml:space="preserve">
          <source>AllocErr::into</source>
          <target state="translated">AllocErr::into</target>
        </trans-unit>
        <trans-unit id="039711c278e014b513a0be997690fca2416f8474" translate="yes" xml:space="preserve">
          <source>AllocErr::ne</source>
          <target state="translated">AllocErr::ne</target>
        </trans-unit>
        <trans-unit id="ffa94c7186e9f5d1d7bf9c63828fb87e4a775ad5" translate="yes" xml:space="preserve">
          <source>AllocErr::source</source>
          <target state="translated">AllocErr::source</target>
        </trans-unit>
        <trans-unit id="0aeb755570b957275d6d9d5317212dc6a6535090" translate="yes" xml:space="preserve">
          <source>AllocErr::to_owned</source>
          <target state="translated">AllocErr::to_owned</target>
        </trans-unit>
        <trans-unit id="0e17e4e80e3c6af6ed45e6c032cf33d55d346e46" translate="yes" xml:space="preserve">
          <source>AllocErr::to_string</source>
          <target state="translated">AllocErr::to_string</target>
        </trans-unit>
        <trans-unit id="3e40fc0676c76a71ca131dafb97f38662652bfbf" translate="yes" xml:space="preserve">
          <source>AllocErr::try_from</source>
          <target state="translated">AllocErr::try_from</target>
        </trans-unit>
        <trans-unit id="34d1124cc06e84256717b819e1f63b955e0350bf" translate="yes" xml:space="preserve">
          <source>AllocErr::try_into</source>
          <target state="translated">AllocErr::try_into</target>
        </trans-unit>
        <trans-unit id="663b204a54c41c16c072ee135d91fa4be49de349" translate="yes" xml:space="preserve">
          <source>AllocErr::type_id</source>
          <target state="translated">AllocErr::type_id</target>
        </trans-unit>
        <trans-unit id="fc99a18ee7862835928c295e62957162ad4eb462" translate="yes" xml:space="preserve">
          <source>AllocError</source>
          <target state="translated">AllocError</target>
        </trans-unit>
        <trans-unit id="4893f8fbd4cad55fcdd644464bc1fe91c279e953" translate="yes" xml:space="preserve">
          <source>AllocRef</source>
          <target state="translated">AllocRef</target>
        </trans-unit>
        <trans-unit id="7cf8dec3c93750b3604d319f88c1f6b4a582f73b" translate="yes" xml:space="preserve">
          <source>Allocate at compile time. Should not be called at runtime.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4893c8174f6c1eabc41e7843e70d7ebcff1b1f84" translate="yes" xml:space="preserve">
          <source>Allocate memory as described by the given &lt;code&gt;layout&lt;/code&gt;.</source>
          <target state="translated">指定された &lt;code&gt;layout&lt;/code&gt; 説明に従ってメモリを割り当てます。</target>
        </trans-unit>
        <trans-unit id="cd02c9bc4eedba216d90a16d722506e0ce680a8a" translate="yes" xml:space="preserve">
          <source>Allocate memory as described by the given &lt;code&gt;layout&lt;/code&gt;. &lt;a href=&quot;trait.globalalloc#tymethod.alloc&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">指定された &lt;code&gt;layout&lt;/code&gt; 説明に従ってメモリを割り当てます。&lt;a href=&quot;trait.globalalloc#tymethod.alloc&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="74c59d8374e4ee1d975ce714a71b5fcdbb7aacac" translate="yes" xml:space="preserve">
          <source>Allocate memory with the global allocator.</source>
          <target state="translated">グローバルアロケータでメモリを割り当てます。</target>
        </trans-unit>
        <trans-unit id="cfb8411e19f0f79e91b6b66f6609da2b9991a1e5" translate="yes" xml:space="preserve">
          <source>Allocate zero-initialized memory with the global allocator.</source>
          <target state="translated">グローバルアロケータを使用して、ゼロ初期化されたメモリを割り当てます。</target>
        </trans-unit>
        <trans-unit id="1bfdf7915bd5c3db982b39e0a3309425f8ee260d" translate="yes" xml:space="preserve">
          <source>Allocates a block suitable for holding &lt;code&gt;n&lt;/code&gt; instances of &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; の &lt;code&gt;n&lt;/code&gt; 個のインスタンスを保持するのに適したブロックを割り当てます。</target>
        </trans-unit>
        <trans-unit id="c63c156459af2e92bb9b73d7f0f9844433b5dc2f" translate="yes" xml:space="preserve">
          <source>Allocates a block suitable for holding &lt;code&gt;n&lt;/code&gt; instances of &lt;code&gt;T&lt;/code&gt;. &lt;a href=&quot;trait.alloc#method.alloc_array&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; の &lt;code&gt;n&lt;/code&gt; 個のインスタンスを保持するのに適したブロックを割り当てます。&lt;a href=&quot;trait.alloc#method.alloc_array&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ed375cd7b209e0c5769df096531bae03a872bbbb" translate="yes" xml:space="preserve">
          <source>Allocates a block suitable for holding an instance of &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; のインスタンスを保持するのに適したブロックを割り当てます。</target>
        </trans-unit>
        <trans-unit id="02c72ac7d36294390fedc764c2754fe1636d64b1" translate="yes" xml:space="preserve">
          <source>Allocates a block suitable for holding an instance of &lt;code&gt;T&lt;/code&gt;. &lt;a href=&quot;trait.alloc#method.alloc_one&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; のインスタンスを保持するのに適したブロックを割り当てます。&lt;a href=&quot;trait.alloc#method.alloc_one&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="76e23de7e691468d4d99aac266130e3bc34f2ea4" translate="yes" xml:space="preserve">
          <source>Allocates an empty &lt;code&gt;PathBuf&lt;/code&gt;.</source>
          <target state="translated">空の &lt;code&gt;PathBuf&lt;/code&gt; を割り当てますます。</target>
        </trans-unit>
        <trans-unit id="3c08c70aff2d6ac267aff88abe6336b4c67e3719" translate="yes" xml:space="preserve">
          <source>Allocates memory in the given allocator then places &lt;code&gt;x&lt;/code&gt; into it.</source>
          <target state="translated">指定されたアロケータにメモリを割り当て、 &lt;code&gt;x&lt;/code&gt; をそのアロケータに配置します。</target>
        </trans-unit>
        <trans-unit id="f9ce219d6c4b42c1f87ab6030532c065b1fec11f" translate="yes" xml:space="preserve">
          <source>Allocates memory on the heap and then places &lt;code&gt;x&lt;/code&gt; into it.</source>
          <target state="translated">ヒープにメモリを割り当ててから、 &lt;code&gt;x&lt;/code&gt; を配置しますをします。</target>
        </trans-unit>
        <trans-unit id="cbf9e75065cafb419b19fb5a13dddefb2735eaa6" translate="yes" xml:space="preserve">
          <source>Allocator</source>
          <target state="translated">Allocator</target>
        </trans-unit>
        <trans-unit id="e910169c58168ed4f75b19228b519cfb61699e61" translate="yes" xml:space="preserve">
          <source>Allow generic type parameter to be a dynamically sized type</source>
          <target state="translated">汎用型パラメータが動的なサイズの型であることを許可する</target>
        </trans-unit>
        <trans-unit id="40680c6330eab7e25541ffbe63efc1d14385635b" translate="yes" xml:space="preserve">
          <source>Allow users to add text content only when a post is in the &lt;code&gt;Draft&lt;/code&gt; state. Hint: have the state object responsible for what might change about the content but not responsible for modifying the &lt;code&gt;Post&lt;/code&gt;.</source>
          <target state="translated">投稿が &lt;code&gt;Draft&lt;/code&gt; 状態の場合にのみ、ユーザーがテキストコンテンツを追加できるようにします。ヒント：変更を担当したコンテンツではなくについて変更される可能性があります何のために責任を負う状態オブジェクト持っている &lt;code&gt;Post&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6cb50b4ef5745cf62353aeff34203276011ef50f" translate="yes" xml:space="preserve">
          <source>Allowing Access from Multiple Threads with &lt;code id=&quot;allowing-access-from-multiple-threads-with-sync&quot;&gt;Sync&lt;/code&gt;</source>
          <target state="translated">&lt;code id=&quot;allowing-access-from-multiple-threads-with-sync&quot;&gt;Sync&lt;/code&gt; 複数のスレッドからのアクセスを許可する</target>
        </trans-unit>
        <trans-unit id="fae2d8f4c50be8a20cdea347ace493568595fcd3" translate="yes" xml:space="preserve">
          <source>Allowing Multiple Guesses with Looping</source>
          <target state="translated">ループを使った複数の推測を可能にする</target>
        </trans-unit>
        <trans-unit id="7db289670d5f2b576ba5fbc25cdc4ef16295c536" translate="yes" xml:space="preserve">
          <source>Allowing Transference of Ownership Between Threads with &lt;code id=&quot;allowing-transference-of-ownership-between-threads-with-send&quot;&gt;Send&lt;/code&gt;</source>
          <target state="translated">スレッド間の所有権の譲渡を許可する &lt;code id=&quot;allowing-transference-of-ownership-between-threads-with-send&quot;&gt;Send&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fb09e5f22f3b7d16947a2ecaccff480c6609f901" translate="yes" xml:space="preserve">
          <source>Almost always it is better to use &lt;code&gt;Vec&lt;/code&gt; or &lt;a href=&quot;../vec_deque/struct.vecdeque&quot;&gt;&lt;code&gt;VecDeque&lt;/code&gt;&lt;/a&gt; instead of &lt;a href=&quot;struct.linkedlist&quot;&gt;&lt;code&gt;LinkedList&lt;/code&gt;&lt;/a&gt;. In general, array-based containers are faster, more memory efficient and make better use of CPU cache.</source>
          <target state="translated">ほとんどの場合、&lt;a href=&quot;../vec_deque/struct.vecdeque&quot;&gt; &lt;code&gt;VecDeque&lt;/code&gt; &lt;/a&gt;代わりに &lt;code&gt;Vec&lt;/code&gt; またはVecDequeを使用することをお&lt;a href=&quot;struct.linkedlist&quot;&gt; &lt;code&gt;LinkedList&lt;/code&gt; &lt;/a&gt;ます。一般に、アレイベースのコンテナはより高速で、メモリ効率が高く、CPUキャッシュをより有効に利用します。</target>
        </trans-unit>
        <trans-unit id="96a3f97ad5d3ab3ce2ee9333276a6a44f6055cf9" translate="yes" xml:space="preserve">
          <source>Almost always it is better to use &lt;code&gt;Vec&lt;/code&gt; or &lt;code&gt;VecDeque&lt;/code&gt; instead of &lt;code&gt;LinkedList&lt;/code&gt;. In general, array-based containers are faster, more memory efficient and make better use of CPU cache.</source>
          <target state="translated">ほとんどの場合、 &lt;code&gt;VecDeque&lt;/code&gt; 代わりに &lt;code&gt;Vec&lt;/code&gt; またはVecDequeを使用することをお &lt;code&gt;LinkedList&lt;/code&gt; ます。一般に、アレイベースのコンテナはより高速で、メモリ効率が高く、CPUキャッシュをより有効に利用します。</target>
        </trans-unit>
        <trans-unit id="30066ada2ed0aa1faf9262f27c4ed17333b52206" translate="yes" xml:space="preserve">
          <source>Along the way, we&amp;rsquo;ll show how to make our command line tool use features of the terminal that many command line tools use. We&amp;rsquo;ll read the value of an environment variable to allow the user to configure the behavior of our tool. We&amp;rsquo;ll also print error messages to the standard error console stream (&lt;code&gt;stderr&lt;/code&gt;) instead of standard output (&lt;code&gt;stdout&lt;/code&gt;), so, for example, the user can redirect successful output to a file while still seeing error messages onscreen.</source>
          <target state="translated">途中で、多くのコマンドラインツールが使用するターミナルの機能をコマンドラインツールで使用する方法を示します。環境変数の値を読み取り、ユーザーがツールの動作を構成できるようにします。エラーメッセージは、標準出力（ &lt;code&gt;stdout&lt;/code&gt; ）ではなく、標準エラーコンソールストリーム（ &lt;code&gt;stderr&lt;/code&gt; ）にも出力します。）ため、たとえば、ユーザーは画面にエラーメッセージを表示したまま、正常な出力をファイルにリダイレクトできます。</target>
        </trans-unit>
        <trans-unit id="2cbf8cd5d5a46820a0f6ab73279f92ce571b3bc8" translate="yes" xml:space="preserve">
          <source>Along with being made public via &lt;code&gt;pub&lt;/code&gt;, &lt;code&gt;fn&lt;/code&gt; can also have an &lt;a href=&quot;keyword.extern&quot;&gt;&lt;code&gt;extern&lt;/code&gt;&lt;/a&gt; added for use in FFI.</source>
          <target state="translated">&lt;code&gt;fn&lt;/code&gt; は、 &lt;code&gt;pub&lt;/code&gt; を介して公開されるだけでなく、FFIで使用するために&lt;a href=&quot;keyword.extern&quot;&gt; &lt;code&gt;extern&lt;/code&gt; &lt;/a&gt;追加することもできます。</target>
        </trans-unit>
        <trans-unit id="569f87a8387e1554badafba00588c85d0f8bf792" translate="yes" xml:space="preserve">
          <source>Along with the newtype pattern, Rust provides the ability to declare a &lt;em&gt;type alias&lt;/em&gt; to give an existing type another name. For this we use the &lt;code&gt;type&lt;/code&gt; keyword. For example, we can create the alias &lt;code&gt;Kilometers&lt;/code&gt; to &lt;code&gt;i32&lt;/code&gt; like so:</source>
          <target state="translated">Rustには、newtypeパターンに加えて、&lt;em&gt;型エイリアス&lt;/em&gt;を宣言して既存の型に別の名前を付ける機能があります。これには、 &lt;code&gt;type&lt;/code&gt; キーワードを使用します。たとえば、次のように &lt;code&gt;i32&lt;/code&gt; に &lt;code&gt;Kilometers&lt;/code&gt; というエイリアスを作成できます。</target>
        </trans-unit>
        <trans-unit id="6444cb062f09d53622baea0cd17deb96b9dc9f75" translate="yes" xml:space="preserve">
          <source>Also discussed were the &lt;code&gt;Deref&lt;/code&gt; and &lt;code&gt;Drop&lt;/code&gt; traits, which enable a lot of the functionality of smart pointers. We explored reference cycles that can cause memory leaks and how to prevent them using &lt;code&gt;Weak&amp;lt;T&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">また、スマートポインターの多くの機能を可能にする &lt;code&gt;Deref&lt;/code&gt; と &lt;code&gt;Drop&lt;/code&gt; トレイトについても説明しました。メモリリークを引き起こす可能性がある参照サイクルと、 &lt;code&gt;Weak&amp;lt;T&amp;gt;&lt;/code&gt; を使用してそれらを防ぐ方法を探りました。</target>
        </trans-unit>
        <trans-unit id="d6fc1b2f8caf81c693f670285ed3e30e58c8f202" translate="yes" xml:space="preserve">
          <source>Also note that &lt;code&gt;Iterator&lt;/code&gt; provides a default implementation of methods such as &lt;code&gt;nth&lt;/code&gt; and &lt;code&gt;fold&lt;/code&gt; which call &lt;code&gt;next&lt;/code&gt; internally. However, it is also possible to write a custom implementation of methods like &lt;code&gt;nth&lt;/code&gt; and &lt;code&gt;fold&lt;/code&gt; if an iterator can compute them more efficiently without calling &lt;code&gt;next&lt;/code&gt;.</source>
          <target state="translated">また、 &lt;code&gt;Iterator&lt;/code&gt; は &lt;code&gt;nth&lt;/code&gt; や &lt;code&gt;fold&lt;/code&gt; など、 &lt;code&gt;next&lt;/code&gt; 内部的に呼び出すメソッドのデフォルト実装を提供することにも注意してください。ただし、イテレータが &lt;code&gt;next&lt;/code&gt; を呼び出さなくてもより効率的に計算できる場合は、 &lt;code&gt;nth&lt;/code&gt; や &lt;code&gt;fold&lt;/code&gt; などのメソッドのカスタム実装を作成することもできます。</target>
        </trans-unit>
        <trans-unit id="2a7fb665b167f214e0e11085759c66fc45c5b538" translate="yes" xml:space="preserve">
          <source>Also note that Cargo build scripts can learn about this feature through &lt;a href=&quot;http://doc.crates.io/environment-variables.html#environment-variables-cargo-sets-for-build-scripts&quot;&gt;environment variables&lt;/a&gt;. In a build script you can detect the linkage via:</source>
          <target state="translated">Cargoビルドスクリプトは、&lt;a href=&quot;http://doc.crates.io/environment-variables.html#environment-variables-cargo-sets-for-build-scripts&quot;&gt;環境変数&lt;/a&gt;を通じてこの機能について学習できることにも注意してください。ビルドスクリプトでは、次の方法でリンケージを検出できます。</target>
        </trans-unit>
        <trans-unit id="0d1efc462e5f1fbd3ec91e9a65ca5ad80e9b3a5b" translate="yes" xml:space="preserve">
          <source>Also note that Cargo build scripts can learn about this feature through &lt;a href=&quot;https://doc.rust-lang.org/cargo/reference/environment-variables.html#environment-variables-cargo-sets-for-build-scripts&quot;&gt;environment variables&lt;/a&gt;. In a build script you can detect the linkage via:</source>
          <target state="translated">Also note that Cargo build scripts can learn about this feature through &lt;a href=&quot;https://doc.rust-lang.org/cargo/reference/environment-variables.html#environment-variables-cargo-sets-for-build-scripts&quot;&gt;environment variables&lt;/a&gt;. In a build script you can detect the linkage via:</target>
        </trans-unit>
        <trans-unit id="729f1c9440272260f81d5cd373556bbc830572f8" translate="yes" xml:space="preserve">
          <source>Also note that the values we get from the calls to &lt;code&gt;next&lt;/code&gt; are immutable references to the values in the vector. The &lt;code&gt;iter&lt;/code&gt; method produces an iterator over immutable references. If we want to create an iterator that takes ownership of &lt;code&gt;v1&lt;/code&gt; and returns owned values, we can call &lt;code&gt;into_iter&lt;/code&gt; instead of &lt;code&gt;iter&lt;/code&gt;. Similarly, if we want to iterate over mutable references, we can call &lt;code&gt;iter_mut&lt;/code&gt; instead of &lt;code&gt;iter&lt;/code&gt;.</source>
          <target state="translated">また、 &lt;code&gt;next&lt;/code&gt; の呼び出しから取得する値は、ベクター内の値への不変の参照であることにも注意してください。 &lt;code&gt;iter&lt;/code&gt; 方法は不変の参照反復子を生成します。 &lt;code&gt;v1&lt;/code&gt; の所有権を取得して所有値を返すイテレーターを作成する場合は、 &lt;code&gt;iter&lt;/code&gt; の代わりに &lt;code&gt;into_iter&lt;/code&gt; を呼び出すことができます。同様に、可変参照を反復処理したい場合は、 &lt;code&gt;iter&lt;/code&gt; の代わりに &lt;code&gt;iter_mut&lt;/code&gt; を呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="b9ce0f5a9623fa773f46d4f2d15f1add40c61350" translate="yes" xml:space="preserve">
          <source>Also note that unwinding into Rust code with a foreign exception (e.g. a an exception thrown from C++ code) is undefined behavior.</source>
          <target state="translated">また、外部例外(C++コードからスローされる例外など)を含む Rust コードへの巻き戻しは未定義の動作であることに注意してください。</target>
        </trans-unit>
        <trans-unit id="ce251a63845ba69b5ad2fd9f201455284f4f01ee" translate="yes" xml:space="preserve">
          <source>Also note that we switched the type of the &lt;code&gt;t&lt;/code&gt; parameter from &lt;code&gt;T&lt;/code&gt; to &lt;code&gt;&amp;amp;T&lt;/code&gt;. Because the type might not be &lt;code&gt;Sized&lt;/code&gt;, we need to use it behind some kind of pointer. In this case, we&amp;rsquo;ve chosen a reference.</source>
          <target state="translated">また、 &lt;code&gt;t&lt;/code&gt; パラメータのタイプを &lt;code&gt;T&lt;/code&gt; から &lt;code&gt;&amp;amp;T&lt;/code&gt; に切り替えたことにも注意してください。タイプが &lt;code&gt;Sized&lt;/code&gt; ない可能性があるためである種のポインターの背後で使用する必要があります。この例では、参照を選択しました。</target>
        </trans-unit>
        <trans-unit id="19148a1d1c1b97af52ac182d255aa33cc3c9304e" translate="yes" xml:space="preserve">
          <source>Also of note is the special syntax for &lt;code&gt;Fn&lt;/code&gt; traits (e.g. &lt;code&gt;Fn(usize, bool) -&amp;gt; usize&lt;/code&gt;). Those interested in the technical details of this can refer to &lt;a href=&quot;https://doc.rust-lang.org/nomicon/hrtb.html&quot;&gt;the relevant section in the &lt;em&gt;Rustonomicon&lt;/em&gt;&lt;/a&gt;.</source>
          <target state="translated">また、 &lt;code&gt;Fn&lt;/code&gt; トレイトの特別な構文（ &lt;code&gt;Fn(usize, bool) -&amp;gt; usize&lt;/code&gt; ）にも注意してください。これの技術的な詳細に興味がある人&lt;a href=&quot;https://doc.rust-lang.org/nomicon/hrtb.html&quot;&gt;は、&lt;em&gt;ラストノミコンの&lt;/em&gt;&lt;/a&gt;関連セクションを参照できます。</target>
        </trans-unit>
        <trans-unit id="57bf42e074718d5ea685f5e68450e52bab2d09dc" translate="yes" xml:space="preserve">
          <source>Also verify that you didn't misspell the import name and that the import exists in the module from where you tried to import it. Example:</source>
          <target state="translated">また、インポート名のスペルを間違えていないか、インポートしようとしたモジュールにインポートが存在するかどうかを確認してください。例</target>
        </trans-unit>
        <trans-unit id="ba09134ec4e68053a65f33dbded8cc605eed58ef" translate="yes" xml:space="preserve">
          <source>Also, &lt;code&gt;ManuallyDrop&lt;/code&gt; prevents us from having to &quot;touch&quot; &lt;code&gt;v&lt;/code&gt; after transferring the ownership to &lt;code&gt;s&lt;/code&gt; &amp;mdash; the final step of interacting with &lt;code&gt;v&lt;/code&gt; to dispose of it without running its destructor is entirely avoided.</source>
          <target state="translated">Also, &lt;code&gt;ManuallyDrop&lt;/code&gt; prevents us from having to &quot;touch&quot; &lt;code&gt;v&lt;/code&gt; after transferring the ownership to &lt;code&gt;s&lt;/code&gt; &amp;mdash; the final step of interacting with &lt;code&gt;v&lt;/code&gt; to dispose of it without running its destructor is entirely avoided.</target>
        </trans-unit>
        <trans-unit id="9d4cb652a8b78bec628c1d26d0df6d4c9f7c28ed" translate="yes" xml:space="preserve">
          <source>Also, if the type of the expression to the left of the dot is a pointer, it is automatically dereferenced as many times as necessary to make the field access possible. In cases of ambiguity, we prefer fewer autoderefs to more.</source>
          <target state="translated">また、ドットの左にある式の型がポインタの場合は、フィールドアクセスを可能にするために必要な回数だけ自動的に派生されます。曖昧な場合には、自動参照は多めよりも少なめの方が良いでしょう。</target>
        </trans-unit>
        <trans-unit id="56542ee08fdcb89c559a45ec666da5ba100aa6fa" translate="yes" xml:space="preserve">
          <source>Also, it allocates temporary storage half the size of &lt;code&gt;self&lt;/code&gt;, but for short slices a non-allocating insertion sort is used instead.</source>
          <target state="translated">また、それは &lt;code&gt;self&lt;/code&gt; の半分のサイズの一時ストレージを割り当てますが、短いスライスの場合は、代わりに非割り当て挿入ソートが使用されます。</target>
        </trans-unit>
        <trans-unit id="f704331d388fc32203be48400c9dc63ab996ddd9" translate="yes" xml:space="preserve">
          <source>Also, note that &lt;code&gt;vec![expr; 0]&lt;/code&gt; is allowed, and produces an empty vector. This will still evaluate &lt;code&gt;expr&lt;/code&gt;, however, and immediately drop the resulting value, so be mindful of side effects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71671f4bb484f8a1e973c0578cc13715a3aa2105" translate="yes" xml:space="preserve">
          <source>Also, note that because &lt;code&gt;back_of_house::Breakfast&lt;/code&gt; has a private field, the struct needs to provide a public associated function that constructs an instance of &lt;code&gt;Breakfast&lt;/code&gt; (we&amp;rsquo;ve named it &lt;code&gt;summer&lt;/code&gt; here). If &lt;code&gt;Breakfast&lt;/code&gt; didn&amp;rsquo;t have such a function, we couldn&amp;rsquo;t create an instance of &lt;code&gt;Breakfast&lt;/code&gt; in &lt;code&gt;eat_at_restaurant&lt;/code&gt; because we couldn&amp;rsquo;t set the value of the private &lt;code&gt;seasonal_fruit&lt;/code&gt; field in &lt;code&gt;eat_at_restaurant&lt;/code&gt;.</source>
          <target state="translated">また、 &lt;code&gt;back_of_house::Breakfast&lt;/code&gt; にはプライベートフィールドがあるため、構造体は &lt;code&gt;Breakfast&lt;/code&gt; インスタンスを構築するパブリック関連関数を提供する必要があることに注意してください（ここでは &lt;code&gt;summer&lt;/code&gt; と名付けています）。場合 &lt;code&gt;Breakfast&lt;/code&gt; 、このような機能を持っていなかった、我々はのインスタンス作成できませんでした &lt;code&gt;Breakfast&lt;/code&gt; で &lt;code&gt;eat_at_restaurant&lt;/code&gt; 我々は民間の値が設定されていない可能性があるため、 &lt;code&gt;seasonal_fruit&lt;/code&gt; のフィールドを &lt;code&gt;eat_at_restaurant&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="477dbb63bb02aa6d30fe03da09f8465ff169a963" translate="yes" xml:space="preserve">
          <source>Also, note that the function body is wrapped in curly brackets, &lt;code&gt;{}&lt;/code&gt;. Rust requires these around all function bodies. It&amp;rsquo;s good style to place the opening curly bracket on the same line as the function declaration, adding one space in between.</source>
          <target state="translated">また、関数本体は中括弧 &lt;code&gt;{}&lt;/code&gt; で囲まれていることに注意してください。。Rustはすべての関数本体の周りにこれらを必要とします。開始中かっこを関数宣言と同じ行に配置し、その間にスペースを1つ追加するのが適切なスタイルです。</target>
        </trans-unit>
        <trans-unit id="8c50010a52d6913ce8428bd39d3014c723f0db3d" translate="yes" xml:space="preserve">
          <source>Also, please be aware that this method is only for special circumstances and is usually not what you want. In case of doubt, use &lt;a href=&quot;#method.borrow_mut&quot;&gt;&lt;code&gt;borrow_mut&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">また、この方法は特別な状況でのみ使用するものであり、通常は望ましい方法ではないことに注意してください。疑問がある場合は、代わりに&lt;a href=&quot;#method.borrow_mut&quot;&gt; &lt;code&gt;borrow_mut&lt;/code&gt; &lt;/a&gt;を使用してください。</target>
        </trans-unit>
        <trans-unit id="f205a44cb9a6329dc5c185e41300997837dbbfe5" translate="yes" xml:space="preserve">
          <source>Also, please be aware that this method is only for special circumstances and is usually not what you want. In case of doubt, use &lt;a href=&quot;struct.refcell#method.borrow_mut&quot;&gt;&lt;code&gt;borrow_mut&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2edbd5a08a0137666e61eca4932691fdf6681fd9" translate="yes" xml:space="preserve">
          <source>Also, since &lt;code&gt;bool&lt;/code&gt; implements the &lt;a href=&quot;marker/trait.copy&quot;&gt;&lt;code&gt;Copy&lt;/code&gt;&lt;/a&gt; trait, we don't have to worry about the move semantics (just like the integer and float primitives).</source>
          <target state="translated">また、 &lt;code&gt;bool&lt;/code&gt; は&lt;a href=&quot;marker/trait.copy&quot;&gt; &lt;code&gt;Copy&lt;/code&gt; &lt;/a&gt;トレイトを実装しているので、（整数プリミティブやフロートプリミティブのように）移動セマンティクスについて心配する必要はありません。</target>
        </trans-unit>
        <trans-unit id="a9b0dcda2ee36870b49794f990ce3f2eb9803892" translate="yes" xml:space="preserve">
          <source>Alternatively there can be exactly two expressions inside the brackets, separated by a semi-colon. The expression after the &lt;code&gt;;&lt;/code&gt; must be a have type &lt;code&gt;usize&lt;/code&gt; and be a &lt;a href=&quot;../const_eval#constant-expressions&quot;&gt;constant expression&lt;/a&gt;, such as a &lt;a href=&quot;../tokens#literals&quot;&gt;literal&lt;/a&gt; or a &lt;a href=&quot;../items/constant-items&quot;&gt;constant item&lt;/a&gt;. &lt;code&gt;[a; b]&lt;/code&gt; creates an array containing &lt;code&gt;b&lt;/code&gt; copies of the value of &lt;code&gt;a&lt;/code&gt;. If the expression after the semi-colon has a value greater than 1 then this requires that the type of &lt;code&gt;a&lt;/code&gt; is &lt;a href=&quot;../special-types-and-traits#copy&quot;&gt;&lt;code&gt;Copy&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">または、セミコロンで区切られた括弧内に正確に2つの式がある場合もあります。の後の式 &lt;code&gt;;&lt;/code&gt; 型が &lt;code&gt;usize&lt;/code&gt; で、&lt;a href=&quot;../tokens#literals&quot;&gt;リテラル&lt;/a&gt;や&lt;a href=&quot;../items/constant-items&quot;&gt;定数項目&lt;/a&gt;などの&lt;a href=&quot;../const_eval#constant-expressions&quot;&gt;定数式&lt;/a&gt;である必要があります。 &lt;code&gt;[a; b]&lt;/code&gt; B]を含有する配列を作成し &lt;code&gt;b&lt;/code&gt; の値のコピー。セミコロンの後の式の値が1より大きい場合、 &lt;code&gt;a&lt;/code&gt; のタイプは&lt;a href=&quot;../special-types-and-traits#copy&quot;&gt; &lt;code&gt;Copy&lt;/code&gt; &lt;/a&gt;である必要があります。 &lt;code&gt;a&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="fc6c67aa2ed479ece24dfe7dd6029027bbfca2b3" translate="yes" xml:space="preserve">
          <source>Alternatively there can be exactly two expressions inside the brackets, separated by a semi-colon. The expression after the &lt;code&gt;;&lt;/code&gt; must have type &lt;code&gt;usize&lt;/code&gt; and be a &lt;a href=&quot;../const_eval#constant-expressions&quot;&gt;constant expression&lt;/a&gt;, such as a &lt;a href=&quot;../tokens#literals&quot;&gt;literal&lt;/a&gt; or a &lt;a href=&quot;../items/constant-items&quot;&gt;constant item&lt;/a&gt;. &lt;code&gt;[a; b]&lt;/code&gt; creates an array containing &lt;code&gt;b&lt;/code&gt; copies of the value of &lt;code&gt;a&lt;/code&gt;. If the expression after the semi-colon has a value greater than 1 then this requires that the type of &lt;code&gt;a&lt;/code&gt; is &lt;a href=&quot;../special-types-and-traits#copy&quot;&gt;&lt;code&gt;Copy&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Alternatively there can be exactly two expressions inside the brackets, separated by a semi-colon. The expression after the &lt;code&gt;;&lt;/code&gt; must have type &lt;code&gt;usize&lt;/code&gt; and be a &lt;a href=&quot;../const_eval#constant-expressions&quot;&gt;constant expression&lt;/a&gt;, such as a &lt;a href=&quot;../tokens#literals&quot;&gt;literal&lt;/a&gt; or a &lt;a href=&quot;../items/constant-items&quot;&gt;constant item&lt;/a&gt;. &lt;code&gt;[a; b]&lt;/code&gt; creates an array containing &lt;code&gt;b&lt;/code&gt; copies of the value of &lt;code&gt;a&lt;/code&gt; . If the expression after the semi-colon has a value greater than 1 then this requires that the type of &lt;code&gt;a&lt;/code&gt; is &lt;a href=&quot;../special-types-and-traits#copy&quot;&gt; &lt;code&gt;Copy&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="3c2b342df42a5ce80106fad6cca3ec251f8df3e4" translate="yes" xml:space="preserve">
          <source>Alternatively, &lt;code&gt;PhantomData&amp;lt;T&amp;gt;&lt;/code&gt; has alignment 1 for all &lt;code&gt;T&lt;/code&gt;, so you can use it if you need to keep the field for some reason:</source>
          <target state="translated">または、 &lt;code&gt;PhantomData&amp;lt;T&amp;gt;&lt;/code&gt; はすべての &lt;code&gt;T&lt;/code&gt; に対して配置1を持っているため、何らかの理由でフィールドを保持する必要がある場合は、それを使用できます。</target>
        </trans-unit>
        <trans-unit id="38449305205a0baadf0d931713ad745060ac7795" translate="yes" xml:space="preserve">
          <source>Alternatively, a paren-less version of the attribute may be used to hint the compiler about inlining opportunity:</source>
          <target state="translated">あるいは、インライン化の機会についてコンパイラにヒントを与えるために、属性の親を持たないバージョンを使用することもできます。</target>
        </trans-unit>
        <trans-unit id="d329c92752ab59bc5a187b9f641894d29c9fd208" translate="yes" xml:space="preserve">
          <source>Alternatively, define a trait locally and implement that instead:</source>
          <target state="translated">あるいは、ローカルに形質を定義し、それを代わりに実装することもできます。</target>
        </trans-unit>
        <trans-unit id="30596c4d15742cc562b249b398f8c80c1a13a17f" translate="yes" xml:space="preserve">
          <source>Alternatively, if the type parameter was intentionally inserted, it must be used. A simple fix is shown below:</source>
          <target state="translated">あるいは、typeパラメータが意図的に挿入されている場合は、それを使用しなければなりません。簡単な修正方法を以下に示します。</target>
        </trans-unit>
        <trans-unit id="7c8d494311629dbdec7e4dda72d552e11aace0ec" translate="yes" xml:space="preserve">
          <source>Alternatively, if we don't control the struct's definition, or mutable shared ownership is truly required, we can use &lt;code&gt;Rc&lt;/code&gt; and &lt;code&gt;RefCell&lt;/code&gt;:</source>
          <target state="translated">あるいは、構造体の定義を制御しない場合、または変更可能な共有所有権が本当に必要な場合は、 &lt;code&gt;Rc&lt;/code&gt; および &lt;code&gt;RefCell&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="0a59d2fc84eff79b213967bc64daab09652e8ccb" translate="yes" xml:space="preserve">
          <source>Alternatively, if your type implements &lt;code&gt;Clone&lt;/code&gt; and you need to own the value, consider borrowing and then cloning:</source>
          <target state="translated">あるいは、タイプが &lt;code&gt;Clone&lt;/code&gt; を実装していて、その値を所有する必要がある場合は、借用してから複製することを検討してください。</target>
        </trans-unit>
        <trans-unit id="ed9c6950d0598f33adea6619e4f5e3230fd020da" translate="yes" xml:space="preserve">
          <source>Alternatively, move the other attributes to the contained type:</source>
          <target state="translated">あるいは、他の属性を含まれる型に移動させます。</target>
        </trans-unit>
        <trans-unit id="b5cf6202d850db2d8b7a0068cf052fbe7d132528" translate="yes" xml:space="preserve">
          <source>Alternatively, split the pattern:</source>
          <target state="translated">または、パターンを分割します。</target>
        </trans-unit>
        <trans-unit id="9b111c2948f7df0faec47eb57a97f3c7f99e8980" translate="yes" xml:space="preserve">
          <source>Alternatively, we can consider using the &lt;code&gt;Cell&lt;/code&gt; and &lt;code&gt;RefCell&lt;/code&gt; types to achieve interior mutability through a shared reference. Our example's &lt;code&gt;mutable&lt;/code&gt; function could be redefined as below:</source>
          <target state="translated">あるいは、 &lt;code&gt;Cell&lt;/code&gt; および &lt;code&gt;RefCell&lt;/code&gt; タイプを使用して、共有参照を通じて内部の可変性を実現することを検討できます。この例の &lt;code&gt;mutable&lt;/code&gt; 関数は、次のように再定義できます。</target>
        </trans-unit>
        <trans-unit id="754e721e3e9779de9d32c607142b98694b9bb365" translate="yes" xml:space="preserve">
          <source>Alternatively, we can move out of &lt;code&gt;fancy_num&lt;/code&gt; into a second &lt;code&gt;fancy_num&lt;/code&gt;:</source>
          <target state="translated">あるいは、 &lt;code&gt;fancy_num&lt;/code&gt; から2番目の &lt;code&gt;fancy_num&lt;/code&gt; に移動することもできます。</target>
        </trans-unit>
        <trans-unit id="da767a10b83371c7ea419ae14469880fbc9efc2b" translate="yes" xml:space="preserve">
          <source>Alternatively, wrapping trait objects requires something like the following:</source>
          <target state="translated">あるいは、 trait オブジェクトをラップするには、以下のようなものが必要です。</target>
        </trans-unit>
        <trans-unit id="3374923e7cf24250807b521def52524879dd69d5" translate="yes" xml:space="preserve">
          <source>Alternatively, wrapping trait objects requires something:</source>
          <target state="translated">あるいは、形質オブジェクトをラップするには何かが必要です。</target>
        </trans-unit>
        <trans-unit id="980127d7c92391c13b6615bd3076240a03531f1c" translate="yes" xml:space="preserve">
          <source>Alternatively, you can add the following line to your &lt;em&gt;~/.bash_profile&lt;/em&gt;:</source>
          <target state="translated">または、次の行を&lt;em&gt;〜/ .bash_profileに&lt;/em&gt;追加できます。</target>
        </trans-unit>
        <trans-unit id="9de397b8421cd9e5ee08981bcb6e02a87c244a79" translate="yes" xml:space="preserve">
          <source>Alternatively, you can also use the struct pattern by using the correct field names and binding them to new identifiers:</source>
          <target state="translated">また、正しいフィールド名を使用して新しい識別子にバインドすることで、構造体パターンを使用することもできます。</target>
        </trans-unit>
        <trans-unit id="53009511a1501672faf73d204dc3eb7eb0e15f4c" translate="yes" xml:space="preserve">
          <source>Alternatively, you can create a newtype. A newtype is a wrapping tuple-struct. For example, &lt;code&gt;NewType&lt;/code&gt; is a newtype over &lt;code&gt;Foo&lt;/code&gt; in &lt;code&gt;struct NewType(Foo)&lt;/code&gt;. Example:</source>
          <target state="translated">または、新しいタイプを作成することもできます。 newtypeはラッピングタプル構造体です。例えば、 &lt;code&gt;NewType&lt;/code&gt; 上のnewtypeある &lt;code&gt;Foo&lt;/code&gt; における &lt;code&gt;struct NewType(Foo)&lt;/code&gt; 。例：</target>
        </trans-unit>
        <trans-unit id="f44934b9e6665fc0ff65386cfc3a7e7022fcb44e" translate="yes" xml:space="preserve">
          <source>Alternatively, you can obtain a &lt;code&gt;&amp;amp;[&lt;/code&gt;&lt;a href=&quot;../primitive.u8&quot;&gt;&lt;code&gt;u8&lt;/code&gt;&lt;/a&gt;&lt;code&gt;]&lt;/code&gt; slice from a &lt;code&gt;CString&lt;/code&gt; with the &lt;a href=&quot;#method.as_bytes&quot;&gt;&lt;code&gt;as_bytes&lt;/code&gt;&lt;/a&gt; method. Slices produced in this way do &lt;em&gt;not&lt;/em&gt; contain the trailing nul terminator. This is useful when you will be calling an extern function that takes a &lt;code&gt;*const u8&lt;/code&gt; argument which is not necessarily nul-terminated, plus another argument with the length of the string &amp;mdash; like C's &lt;code&gt;strndup()&lt;/code&gt;. You can of course get the slice's length with its &lt;a href=&quot;../primitive.slice#method.len&quot;&gt;&lt;code&gt;len&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">または、&lt;a href=&quot;#method.as_bytes&quot;&gt; &lt;code&gt;as_bytes&lt;/code&gt; &lt;/a&gt;メソッドを使用して、 &lt;code&gt;CString&lt;/code&gt; から &lt;code&gt;&amp;amp;[&lt;/code&gt; &lt;a href=&quot;../primitive.u8&quot;&gt; &lt;code&gt;u8&lt;/code&gt; &lt;/a&gt; &lt;code&gt;]&lt;/code&gt; スライスを取得することもできます。この方法で作成されたスライスには、末尾のヌルターミネーター&lt;em&gt;は&lt;/em&gt;含まれませ&lt;em&gt;ん&lt;/em&gt;。これは、必ずしもヌル文字で終了しているわけではない &lt;code&gt;*const u8&lt;/code&gt; 引数と、Cの &lt;code&gt;strndup()&lt;/code&gt; などの文字列の長さを持つ別の引数を取るextern関数を呼び出す場合に便利です。もちろん、&lt;a href=&quot;../primitive.slice#method.len&quot;&gt; &lt;code&gt;len&lt;/code&gt; &lt;/a&gt;メソッドを使用してスライスの長さを取得できます。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="14ed2547343b0251c75ea8d794d5d3f83b965f7e" translate="yes" xml:space="preserve">
          <source>Alternatively, you can obtain a &lt;code&gt;&amp;amp;[&lt;/code&gt;&lt;a href=&quot;https://doc.rust-lang.org/nightly/std/primitive.u8.html&quot;&gt;&lt;code&gt;u8&lt;/code&gt;&lt;/a&gt;&lt;code&gt;]&lt;/code&gt; slice from a &lt;code&gt;CString&lt;/code&gt; with the &lt;a href=&quot;struct.cstring#method.as_bytes&quot;&gt;&lt;code&gt;CString::as_bytes&lt;/code&gt;&lt;/a&gt; method. Slices produced in this way do &lt;em&gt;not&lt;/em&gt; contain the trailing nul terminator. This is useful when you will be calling an extern function that takes a &lt;code&gt;*const u8&lt;/code&gt; argument which is not necessarily nul-terminated, plus another argument with the length of the string &amp;mdash; like C's &lt;code&gt;strndup()&lt;/code&gt;. You can of course get the slice's length with its &lt;a href=&quot;../primitive.slice#method.len&quot;&gt;&lt;code&gt;len&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">Alternatively, you can obtain a &lt;code&gt;&amp;amp;[&lt;/code&gt; &lt;a href=&quot;https://doc.rust-lang.org/nightly/std/primitive.u8.html&quot;&gt; &lt;code&gt;u8&lt;/code&gt; &lt;/a&gt; &lt;code&gt;]&lt;/code&gt; slice from a &lt;code&gt;CString&lt;/code&gt; with the &lt;a href=&quot;struct.cstring#method.as_bytes&quot;&gt; &lt;code&gt;CString::as_bytes&lt;/code&gt; &lt;/a&gt; method. Slices produced in this way do &lt;em&gt;not&lt;/em&gt; contain the trailing nul terminator. This is useful when you will be calling an extern function that takes a &lt;code&gt;*const u8&lt;/code&gt; argument which is not necessarily nul-terminated, plus another argument with the length of the string &amp;mdash; like C's &lt;code&gt;strndup()&lt;/code&gt; . You can of course get the slice's length with its &lt;a href=&quot;../primitive.slice#method.len&quot;&gt; &lt;code&gt;len&lt;/code&gt; &lt;/a&gt; method.</target>
        </trans-unit>
        <trans-unit id="3a4be7155bcffba0850c80a370bc5c6b34c37e74" translate="yes" xml:space="preserve">
          <source>Alternatives</source>
          <target state="translated">Alternatives</target>
        </trans-unit>
        <trans-unit id="fb4db1dca17b4c832ac69c83b18f73ad9aa68bf9" translate="yes" xml:space="preserve">
          <source>Although Rust will let you bind &lt;code&gt;Sized&lt;/code&gt; to a trait, you won't be able to use it to form a trait object later:</source>
          <target state="translated">Rust では &lt;code&gt;Sized&lt;/code&gt; をトレイトにバインドできますが、後でそれを使用してトレイトオブジェクトを形成することはできません。</target>
        </trans-unit>
        <trans-unit id="18938413590ec4f421c089a648f9b8a820edd657" translate="yes" xml:space="preserve">
          <source>Although UDP is a connectionless protocol, this implementation provides an interface to set an address where data should be sent and received from. After setting a remote address with &lt;a href=&quot;#method.connect&quot;&gt;&lt;code&gt;connect&lt;/code&gt;&lt;/a&gt;, data can be sent to and received from that address with &lt;a href=&quot;#method.send&quot;&gt;&lt;code&gt;send&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#method.recv&quot;&gt;&lt;code&gt;recv&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">UDPはコネクションレス型プロトコルですが、この実装は、データを送受信するアドレスを設定するためのインターフェースを提供します。&lt;a href=&quot;#method.connect&quot;&gt; &lt;code&gt;connect&lt;/code&gt; &lt;/a&gt;を使用してリモートアドレスを設定した後、&lt;a href=&quot;#method.send&quot;&gt; &lt;code&gt;send&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#method.recv&quot;&gt; &lt;code&gt;recv&lt;/code&gt; &lt;/a&gt;を使用してそのアドレスとの間でデータを送受信できます。</target>
        </trans-unit>
        <trans-unit id="543c09d5bf5928a676597cb867e1ef6c78157058" translate="yes" xml:space="preserve">
          <source>Although UDP is a connectionless protocol, this implementation provides an interface to set an address where data should be sent and received from. After setting a remote address with &lt;a href=&quot;struct.udpsocket#method.connect&quot;&gt;&lt;code&gt;connect&lt;/code&gt;&lt;/a&gt;, data can be sent to and received from that address with &lt;a href=&quot;struct.udpsocket#method.send&quot;&gt;&lt;code&gt;send&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;struct.udpsocket#method.recv&quot;&gt;&lt;code&gt;recv&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Although UDP is a connectionless protocol, this implementation provides an interface to set an address where data should be sent and received from. After setting a remote address with &lt;a href=&quot;struct.udpsocket#method.connect&quot;&gt; &lt;code&gt;connect&lt;/code&gt; &lt;/a&gt;, data can be sent to and received from that address with &lt;a href=&quot;struct.udpsocket#method.send&quot;&gt; &lt;code&gt;send&lt;/code&gt; &lt;/a&gt; and &lt;a href=&quot;struct.udpsocket#method.recv&quot;&gt; &lt;code&gt;recv&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="6138cf1c64fdfba340547fa72a908d945fa65b3f" translate="yes" xml:space="preserve">
          <source>Although a &lt;code&gt;SystemTime&lt;/code&gt; cannot be directly inspected, the &lt;a href=&quot;constant.unix_epoch&quot;&gt;&lt;code&gt;UNIX_EPOCH&lt;/code&gt;&lt;/a&gt; constant is provided in this module as an anchor in time to learn information about a &lt;code&gt;SystemTime&lt;/code&gt;. By calculating the duration from this fixed point in time, a &lt;code&gt;SystemTime&lt;/code&gt; can be converted to a human-readable time, or perhaps some other string representation.</source>
          <target state="translated">が &lt;code&gt;SystemTime&lt;/code&gt; 直接検査することができない、&lt;a href=&quot;constant.unix_epoch&quot;&gt; &lt;code&gt;UNIX_EPOCH&lt;/code&gt; の&lt;/a&gt;定数はに関する情報を学ぶために時間内にアンカーとして、このモジュールで提供されて &lt;code&gt;SystemTime&lt;/code&gt; 。この固定された時点から期間を計算することにより、 &lt;code&gt;SystemTime&lt;/code&gt; は人間が読み取れる時間、またはおそらく他の文字列表現に変換できます。</target>
        </trans-unit>
        <trans-unit id="9bf2565395a043df30a2266cce3b26bdd4f8ff03" translate="yes" xml:space="preserve">
          <source>Although both Listing 7-11 and 7-13 accomplish the same task, Listing 7-11 is the idiomatic way to bring a function into scope with &lt;code&gt;use&lt;/code&gt;. Bringing the function&amp;rsquo;s parent module into scope with &lt;code&gt;use&lt;/code&gt; so we have to specify the parent module when calling the function makes it clear that the function isn&amp;rsquo;t locally defined while still minimizing repetition of the full path. The code in Listing 7-13 is unclear as to where &lt;code&gt;add_to_waitlist&lt;/code&gt; is defined.</source>
          <target state="translated">リスト7-11と7-13はどちらも同じタスクを実行しますが、リスト7-11は、 &lt;code&gt;use&lt;/code&gt; を使用して関数をスコープに入れる慣用的な方法です。範囲の中に、関数の親モジュールを持ち込み &lt;code&gt;use&lt;/code&gt; 機能を呼び出すと、それはまだ完全なパスの繰り返しを最小限に抑えながら機能はローカルに定義されていないことを明確にするとき、我々は親モジュールを指定する必要がありますので。コードリスト7-13のコードは、 &lt;code&gt;add_to_waitlist&lt;/code&gt; が定義されている場所が不明確です。</target>
        </trans-unit>
        <trans-unit id="af1566b2870173a676122bd4c9750a25b9287966" translate="yes" xml:space="preserve">
          <source>Although functional programming languages use cons lists frequently, the cons list isn&amp;rsquo;t a commonly used data structure in Rust. Most of the time when you have a list of items in Rust, &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; is a better choice to use. Other, more complex recursive data types &lt;em&gt;are&lt;/em&gt; useful in various situations, but by starting with the cons list, we can explore how boxes let us define a recursive data type without much distraction.</source>
          <target state="translated">関数型プログラミング言語はconsリストを頻繁に使用しますが、consリストはRustで一般的に使用されるデータ構造ではありません。ほとんどの場合、Rustにアイテムのリストがある場合、 &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; を使用することをお勧めします。その他、より複雑な再帰データ型&lt;em&gt;は&lt;/em&gt;さまざまな状況で役立ちます&lt;em&gt;が&lt;/em&gt;、コンスリストから始めると、ボックスを使用して、それほど気を散らすことなく再帰データ型を定義できます。</target>
        </trans-unit>
        <trans-unit id="d04af4e6b5ccd4c4682747098fc1db0b02dbd661" translate="yes" xml:space="preserve">
          <source>Although the &lt;code&gt;::&lt;/code&gt; token is allowed before the generics arguments, it is not required because there is no ambiguity like there is in &lt;em&gt;PathInExpression&lt;/em&gt;.</source>
          <target state="translated">が &lt;code&gt;::&lt;/code&gt; トークンがジェネリック医薬品の引数の前に許可されているではありのようなあいまいがないため、これは必須ではありません&lt;em&gt;PathInExpression&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="7bf75499d3d552ee0a87d1fa70ed0a0e35bd067e" translate="yes" xml:space="preserve">
          <source>Although the &lt;code&gt;let&lt;/code&gt; is pointless here, it illustrates the meaning of &lt;code&gt;!&lt;/code&gt;. Since &lt;code&gt;x&lt;/code&gt; is never assigned a value (because &lt;code&gt;return&lt;/code&gt; returns from the entire function), &lt;code&gt;x&lt;/code&gt; can be given type &lt;code&gt;!&lt;/code&gt;. We could also replace &lt;code&gt;return 123&lt;/code&gt; with a &lt;code&gt;panic!&lt;/code&gt; or a never-ending &lt;code&gt;loop&lt;/code&gt; and this code would still be valid.</source>
          <target state="translated">ここでは &lt;code&gt;let&lt;/code&gt; は無意味ですが、 &lt;code&gt;!&lt;/code&gt; の意味を示しています。。以来 &lt;code&gt;x&lt;/code&gt; が値を割り当てられることはありません（ので、 &lt;code&gt;return&lt;/code&gt; 関数全体からのリターン）は、 &lt;code&gt;x&lt;/code&gt; がタイプを与えることができます &lt;code&gt;!&lt;/code&gt; 。 &lt;code&gt;return 123&lt;/code&gt; を &lt;code&gt;panic!&lt;/code&gt; 置き換えることもできます！または終了しない &lt;code&gt;loop&lt;/code&gt; とこのコードはまだ有効です。</target>
        </trans-unit>
        <trans-unit id="6e8ecdea30a2a1885eeb369d7e2426712a189f17" translate="yes" xml:space="preserve">
          <source>Although the SipHash algorithm is considered to be generally strong, it is not intended for cryptographic purposes. As such, all cryptographic uses of this implementation are &lt;em&gt;strongly discouraged&lt;/em&gt;.</source>
          <target state="translated">SipHashアルゴリズムは一般的に強力であると考えられていますが、暗号化を目的としたものではありません。そのため、この実装の暗号化の使用はすべて&lt;em&gt;お勧めできません&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="f07ca613351cf8dcbbc0ccd12d8ef0d4721b46b7" translate="yes" xml:space="preserve">
          <source>Although the number of keys and values is growable, each key can only have one value associated with it at a time. When you want to change the data in a hash map, you have to decide how to handle the case when a key already has a value assigned. You could replace the old value with the new value, completely disregarding the old value. You could keep the old value and ignore the new value, only adding the new value if the key &lt;em&gt;doesn&amp;rsquo;t&lt;/em&gt; already have a value. Or you could combine the old value and the new value. Let&amp;rsquo;s look at how to do each of these!</source>
          <target state="translated">キーと値の数は増やすことができますが、各キーには一度に1つの値しか関連付けることができません。ハッシュマップのデータを変更する場合は、キーに既に値が割り当てられている場合の処理​​方法を決定する必要があります。古い値を完全に無視して、古い値を新しい値に置き換えることができます。古い値を保持して新しい値を無視し、キーにまだ値&lt;em&gt;がない&lt;/em&gt;場合にのみ新しい値を追加することができます。または、古い値と新しい値を組み合わせることができます。これらのそれぞれを行う方法を見てみましょう！</target>
        </trans-unit>
        <trans-unit id="9186f195f5116d4c11a411254011d9afb8932670" translate="yes" xml:space="preserve">
          <source>Although this API is unstable, it is exposed via stable APIs on the &lt;a href=&quot;../../primitive.str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt; type.</source>
          <target state="translated">Although this API is unstable, it is exposed via stable APIs on the &lt;a href=&quot;../../primitive.str&quot;&gt; &lt;code&gt;str&lt;/code&gt; &lt;/a&gt; type.</target>
        </trans-unit>
        <trans-unit id="d281e954555c8484110a6fecba9e6260dd297fe7" translate="yes" xml:space="preserve">
          <source>Although this code has the same behavior as Listing 9-5, it doesn&amp;rsquo;t contain any &lt;code&gt;match&lt;/code&gt; expressions and is cleaner to read. Come back to this example after you&amp;rsquo;ve read Chapter 13, and look up the &lt;code&gt;unwrap_or_else&lt;/code&gt; method in the standard library documentation. Many more of these methods can clean up huge nested &lt;code&gt;match&lt;/code&gt; expressions when you&amp;rsquo;re dealing with errors.</source>
          <target state="translated">このコードの動作はリスト9-5と同じですが、 &lt;code&gt;match&lt;/code&gt; 式が含まれておらず、読みやすくなっています。第13章を読んだ後、この例に戻って、標準ライブラリのドキュメントで &lt;code&gt;unwrap_or_else&lt;/code&gt; メソッドを調べてください。これらのメソッドの多くは、エラーを処理するときに、ネストされた巨大な &lt;code&gt;match&lt;/code&gt; 式をクリーンアップできます。</target>
        </trans-unit>
        <trans-unit id="db0fe462f2aa334b05d61f387c6225bd0bc5a2b6" translate="yes" xml:space="preserve">
          <source>Although this code works, duplicating code is tedious and error prone. We also have to update the code in multiple places when we want to change it.</source>
          <target state="translated">このコードはうまくいくのですが、コードを複製するのは面倒ですし、エラーになりやすいです。また、コードを変更したいときには複数の場所で更新しなければなりません。</target>
        </trans-unit>
        <trans-unit id="bf29b02a8b6e1719f55f981f1d8572dd8539b24f" translate="yes" xml:space="preserve">
          <source>Although using it won&amp;rsquo;t cause a compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MAX&quot;&gt;&lt;code&gt;i128::MAX&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">Although using it won&amp;rsquo;t cause a compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MAX&quot;&gt; &lt;code&gt;i128::MAX&lt;/code&gt; &lt;/a&gt; instead.</target>
        </trans-unit>
        <trans-unit id="05e69f2a6bb8b46764f8352e784a84dd0afadb9d" translate="yes" xml:space="preserve">
          <source>Although using it won&amp;rsquo;t cause a compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MAX&quot;&gt;&lt;code&gt;i16::MAX&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">Although using it won&amp;rsquo;t cause a compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MAX&quot;&gt; &lt;code&gt;i16::MAX&lt;/code&gt; &lt;/a&gt; instead.</target>
        </trans-unit>
        <trans-unit id="ae2e6d7ac448ad026e808cfe3cdcdd25c692cbe9" translate="yes" xml:space="preserve">
          <source>Although using it won&amp;rsquo;t cause a compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MAX&quot;&gt;&lt;code&gt;i32::MAX&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">Although using it won&amp;rsquo;t cause a compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MAX&quot;&gt; &lt;code&gt;i32::MAX&lt;/code&gt; &lt;/a&gt; instead.</target>
        </trans-unit>
        <trans-unit id="cad1997569aea8b22596a5906b14eaf599d36023" translate="yes" xml:space="preserve">
          <source>Although using it won&amp;rsquo;t cause a compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MAX&quot;&gt;&lt;code&gt;i64::MAX&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">Although using it won&amp;rsquo;t cause a compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MAX&quot;&gt; &lt;code&gt;i64::MAX&lt;/code&gt; &lt;/a&gt; instead.</target>
        </trans-unit>
        <trans-unit id="628ef478f32d02057364243517eb61194b2fa937" translate="yes" xml:space="preserve">
          <source>Although using it won&amp;rsquo;t cause a compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MAX&quot;&gt;&lt;code&gt;i8::MAX&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">Although using it won&amp;rsquo;t cause a compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MAX&quot;&gt; &lt;code&gt;i8::MAX&lt;/code&gt; &lt;/a&gt; instead.</target>
        </trans-unit>
        <trans-unit id="4e48625fb423a49263c7f7ef3730f1cadc66a1e6" translate="yes" xml:space="preserve">
          <source>Although using it won&amp;rsquo;t cause a compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MAX&quot;&gt;&lt;code&gt;isize::MAX&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">Although using it won&amp;rsquo;t cause a compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MAX&quot;&gt; &lt;code&gt;isize::MAX&lt;/code&gt; &lt;/a&gt; instead.</target>
        </trans-unit>
        <trans-unit id="7d04345ef80c5ecd03e51a7345f75034be31a60e" translate="yes" xml:space="preserve">
          <source>Although using it won&amp;rsquo;t cause a compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MIN&quot;&gt;&lt;code&gt;i128::MIN&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">Although using it won&amp;rsquo;t cause a compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MIN&quot;&gt; &lt;code&gt;i128::MIN&lt;/code&gt; &lt;/a&gt; instead.</target>
        </trans-unit>
        <trans-unit id="579ffa98c5f86f05f3788dc02042f9c6df508f9f" translate="yes" xml:space="preserve">
          <source>Although using it won&amp;rsquo;t cause a compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MIN&quot;&gt;&lt;code&gt;i16::MIN&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">Although using it won&amp;rsquo;t cause a compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MIN&quot;&gt; &lt;code&gt;i16::MIN&lt;/code&gt; &lt;/a&gt; instead.</target>
        </trans-unit>
        <trans-unit id="da2d071c44ca8237c16fc626e1f05fe6f73717ea" translate="yes" xml:space="preserve">
          <source>Although using it won&amp;rsquo;t cause a compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MIN&quot;&gt;&lt;code&gt;i32::MIN&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">Although using it won&amp;rsquo;t cause a compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MIN&quot;&gt; &lt;code&gt;i32::MIN&lt;/code&gt; &lt;/a&gt; instead.</target>
        </trans-unit>
        <trans-unit id="4c915462451daa99c7af198c86febdd1a22d7597" translate="yes" xml:space="preserve">
          <source>Although using it won&amp;rsquo;t cause a compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MIN&quot;&gt;&lt;code&gt;i64::MIN&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">Although using it won&amp;rsquo;t cause a compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MIN&quot;&gt; &lt;code&gt;i64::MIN&lt;/code&gt; &lt;/a&gt; instead.</target>
        </trans-unit>
        <trans-unit id="c7a387b30a94786833a9b0a30456b3027e1e9fbd" translate="yes" xml:space="preserve">
          <source>Although using it won&amp;rsquo;t cause a compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MIN&quot;&gt;&lt;code&gt;i8::MIN&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">Although using it won&amp;rsquo;t cause a compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MIN&quot;&gt; &lt;code&gt;i8::MIN&lt;/code&gt; &lt;/a&gt; instead.</target>
        </trans-unit>
        <trans-unit id="e5bf4822c610526f0cdddf4534d5b49b86f74f58" translate="yes" xml:space="preserve">
          <source>Although using it won&amp;rsquo;t cause a compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MIN&quot;&gt;&lt;code&gt;isize::MIN&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">Although using it won&amp;rsquo;t cause a compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MIN&quot;&gt; &lt;code&gt;isize::MIN&lt;/code&gt; &lt;/a&gt; instead.</target>
        </trans-unit>
        <trans-unit id="ebb42d33b9e27bf9b56623cf75d8b9afa2233265" translate="yes" xml:space="preserve">
          <source>Although using it won&amp;rsquo;t cause compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MAX&quot;&gt;&lt;code&gt;u128::MAX&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">Although using it won&amp;rsquo;t cause compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MAX&quot;&gt; &lt;code&gt;u128::MAX&lt;/code&gt; &lt;/a&gt; instead.</target>
        </trans-unit>
        <trans-unit id="5a7ac738426df2354794cb8df0537a30a74f6523" translate="yes" xml:space="preserve">
          <source>Although using it won&amp;rsquo;t cause compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MAX&quot;&gt;&lt;code&gt;u16::MAX&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">Although using it won&amp;rsquo;t cause compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MAX&quot;&gt; &lt;code&gt;u16::MAX&lt;/code&gt; &lt;/a&gt; instead.</target>
        </trans-unit>
        <trans-unit id="3e75c91d3cf3b6547d6e61a6969491f50f5e1d3e" translate="yes" xml:space="preserve">
          <source>Although using it won&amp;rsquo;t cause compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MAX&quot;&gt;&lt;code&gt;u32::MAX&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">Although using it won&amp;rsquo;t cause compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MAX&quot;&gt; &lt;code&gt;u32::MAX&lt;/code&gt; &lt;/a&gt; instead.</target>
        </trans-unit>
        <trans-unit id="924beee0df8993e339f5ec14d80c789072c86cef" translate="yes" xml:space="preserve">
          <source>Although using it won&amp;rsquo;t cause compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MAX&quot;&gt;&lt;code&gt;u64::MAX&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">Although using it won&amp;rsquo;t cause compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MAX&quot;&gt; &lt;code&gt;u64::MAX&lt;/code&gt; &lt;/a&gt; instead.</target>
        </trans-unit>
        <trans-unit id="9ae4b957aed4f3be97f5bc6a6d75118ff06b3cad" translate="yes" xml:space="preserve">
          <source>Although using it won&amp;rsquo;t cause compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MAX&quot;&gt;&lt;code&gt;u8::MAX&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">Although using it won&amp;rsquo;t cause compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MAX&quot;&gt; &lt;code&gt;u8::MAX&lt;/code&gt; &lt;/a&gt; instead.</target>
        </trans-unit>
        <trans-unit id="c5ebde2d554567a7b7e90cd41cbc8b0acac4a1c2" translate="yes" xml:space="preserve">
          <source>Although using it won&amp;rsquo;t cause compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MAX&quot;&gt;&lt;code&gt;usize::MAX&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">Although using it won&amp;rsquo;t cause compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MAX&quot;&gt; &lt;code&gt;usize::MAX&lt;/code&gt; &lt;/a&gt; instead.</target>
        </trans-unit>
        <trans-unit id="ad32dc2d3be50a4f8c5fdf28af0d0fed17aa13dc" translate="yes" xml:space="preserve">
          <source>Although using it won&amp;rsquo;t cause compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MIN&quot;&gt;&lt;code&gt;u128::MIN&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">Although using it won&amp;rsquo;t cause compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MIN&quot;&gt; &lt;code&gt;u128::MIN&lt;/code&gt; &lt;/a&gt; instead.</target>
        </trans-unit>
        <trans-unit id="66ce4a459f9d71da21dd5ea02e3b77c11475a92b" translate="yes" xml:space="preserve">
          <source>Although using it won&amp;rsquo;t cause compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MIN&quot;&gt;&lt;code&gt;u16::MIN&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">Although using it won&amp;rsquo;t cause compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MIN&quot;&gt; &lt;code&gt;u16::MIN&lt;/code&gt; &lt;/a&gt; instead.</target>
        </trans-unit>
        <trans-unit id="863866e2fa75d6344d5a22903dbb6eb4e36d7217" translate="yes" xml:space="preserve">
          <source>Although using it won&amp;rsquo;t cause compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MIN&quot;&gt;&lt;code&gt;u32::MIN&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">Although using it won&amp;rsquo;t cause compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MIN&quot;&gt; &lt;code&gt;u32::MIN&lt;/code&gt; &lt;/a&gt; instead.</target>
        </trans-unit>
        <trans-unit id="f0557ca69022890678ed9741ea9a18e4b1b5c3ca" translate="yes" xml:space="preserve">
          <source>Although using it won&amp;rsquo;t cause compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MIN&quot;&gt;&lt;code&gt;u64::MIN&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">Although using it won&amp;rsquo;t cause compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MIN&quot;&gt; &lt;code&gt;u64::MIN&lt;/code&gt; &lt;/a&gt; instead.</target>
        </trans-unit>
        <trans-unit id="1bc8261189beb72f8e3ea2bfcc325eac36215e34" translate="yes" xml:space="preserve">
          <source>Although using it won&amp;rsquo;t cause compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MIN&quot;&gt;&lt;code&gt;u8::MIN&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">Although using it won&amp;rsquo;t cause compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MIN&quot;&gt; &lt;code&gt;u8::MIN&lt;/code&gt; &lt;/a&gt; instead.</target>
        </trans-unit>
        <trans-unit id="018037ac23dbb67a32f73854e405231a6ffce4dc" translate="yes" xml:space="preserve">
          <source>Although using it won&amp;rsquo;t cause compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MIN&quot;&gt;&lt;code&gt;usize::MIN&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">Although using it won&amp;rsquo;t cause compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MIN&quot;&gt; &lt;code&gt;usize::MIN&lt;/code&gt; &lt;/a&gt; instead.</target>
        </trans-unit>
        <trans-unit id="094096c8e8871948579e001659d96f6f0cd91ded" translate="yes" xml:space="preserve">
          <source>Although using it won&amp;rsquo;t cause compilation warning, new code should use &lt;a href=&quot;../fmt/trait.display&quot;&gt;&lt;code&gt;Display&lt;/code&gt;&lt;/a&gt; instead and new &lt;code&gt;impl&lt;/code&gt;s can omit it.</source>
          <target state="translated">これを使用してもコンパイル警告は発生しませんが、新しいコードでは代わりに&lt;a href=&quot;../fmt/trait.display&quot;&gt; &lt;code&gt;Display&lt;/code&gt; &lt;/a&gt;を使用する必要があり、新しい &lt;code&gt;impl&lt;/code&gt; は省略できます。</target>
        </trans-unit>
        <trans-unit id="929ca8c36977dca3461b8596285cdc531c6b81df" translate="yes" xml:space="preserve">
          <source>Although using these constants won&amp;rsquo;t cause compilation warnings, new code should use the associated constants directly on the primitive type.</source>
          <target state="translated">Although using these constants won&amp;rsquo;t cause compilation warnings, new code should use the associated constants directly on the primitive type.</target>
        </trans-unit>
        <trans-unit id="ce3c8369369ce1fe72325205b70eb3e2961e011c" translate="yes" xml:space="preserve">
          <source>Although you can&amp;rsquo;t remove previous versions of a crate, you can prevent any future projects from adding them as a new dependency. This is useful when a crate version is broken for one reason or another. In such situations, Cargo supports &lt;em&gt;yanking&lt;/em&gt; a crate version.</source>
          <target state="translated">以前のバージョンのクレートを削除することはできませんが、将来のプロジェクトで新しい依存関係として追加されないようにすることができます。これは、何らかの理由でクレートバージョンが壊れている場合に役立ちます。このような状況では、Cargoはクレートバージョンの&lt;em&gt;ヤンクを&lt;/em&gt;サポートします。</target>
        </trans-unit>
        <trans-unit id="a876dd4a0d144d06dda24f474bedf4412b3d4b86" translate="yes" xml:space="preserve">
          <source>Always empty bottom type for diverging functions</source>
          <target state="translated">発散機能は常に空のボトムタイプ</target>
        </trans-unit>
        <trans-unit id="30044213367fd946b86a46fbbf0f3c415f92d7bc" translate="yes" xml:space="preserve">
          <source>Always returns &lt;code&gt;Err&lt;/code&gt; on arithmetic overflow.</source>
          <target state="translated">算術オーバーフローで常に &lt;code&gt;Err&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="81c2dadc15a7e41133f5895d6079a63549a2abb5" translate="yes" xml:space="preserve">
          <source>Always returns &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;needle&lt;/code&gt; is an empty slice:</source>
          <target state="translated">&lt;code&gt;needle&lt;/code&gt; が空のスライスの場合、常に &lt;code&gt;true&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="0d0ce480d587247832892434b17dbf1b556a5191" translate="yes" xml:space="preserve">
          <source>Always use &lt;code&gt;.add(count)&lt;/code&gt; instead when possible, because &lt;code&gt;add&lt;/code&gt; allows the compiler to optimize better.</source>
          <target state="translated">常に使用 &lt;code&gt;.add(count)&lt;/code&gt; ので、代わりに、可能な場合、 &lt;code&gt;add&lt;/code&gt; 良く最適化するために、コンパイラができます。</target>
        </trans-unit>
        <trans-unit id="2dbc1421ee3e3a275bd2bb6e8f64943056afdc31" translate="yes" xml:space="preserve">
          <source>Always use &lt;code&gt;.offset(count)&lt;/code&gt; instead when possible, because &lt;code&gt;offset&lt;/code&gt; allows the compiler to optimize better. If you need to cross object boundaries, cast the pointer to an integer and do the arithmetic there.</source>
          <target state="translated">可能な場合は、代わりに常に &lt;code&gt;.offset(count)&lt;/code&gt; を使用してください。 &lt;code&gt;offset&lt;/code&gt; 使用すると、コンパイラーの最適化が向上します。オブジェクトの境界を越える必要がある場合は、ポインタを整数にキャストして、そこで計算を行います。</target>
        </trans-unit>
        <trans-unit id="701562825affe99f99fee809f333cf1e955284e4" translate="yes" xml:space="preserve">
          <source>Always use &lt;code&gt;.sub(count)&lt;/code&gt; instead when possible, because &lt;code&gt;sub&lt;/code&gt; allows the compiler to optimize better.</source>
          <target state="translated">可能な場合は、代わりに常に &lt;code&gt;.sub(count)&lt;/code&gt; を使用してください。これは、 &lt;code&gt;sub&lt;/code&gt; がコンパイラーの最適化を向上させるためです。</target>
        </trans-unit>
        <trans-unit id="9fda5d5730cef377a6f455b42dbcfb53fb2ca5ca" translate="yes" xml:space="preserve">
          <source>Among other causes, &lt;code&gt;ParseIntError&lt;/code&gt; can be thrown because of leading or trailing whitespace in the string e.g., when it is obtained from the standard input. Using the &lt;a href=&quot;../primitive.str#method.trim&quot;&gt;&lt;code&gt;str.trim()&lt;/code&gt;&lt;/a&gt; method ensures that no whitespace remains before parsing.</source>
          <target state="translated">他の原因の中でも、 &lt;code&gt;ParseIntError&lt;/code&gt; は、文字列の先頭または末尾の空白が原因でスローされる可能性があります（標準入力から取得された場合など）。&lt;a href=&quot;../primitive.str#method.trim&quot;&gt; &lt;code&gt;str.trim()&lt;/code&gt; &lt;/a&gt;メソッドを使用すると、解析前に空白が残っていないことが保証されます。</target>
        </trans-unit>
        <trans-unit id="f82aa4d4f03b38410c80f80025c8644ba744b247" translate="yes" xml:space="preserve">
          <source>Among other causes, this variant will be constructed when parsing a string that contains a letter.</source>
          <target state="translated">他の原因の中で、このバリアントは文字を含む文字列を解析する際に構築されます。</target>
        </trans-unit>
        <trans-unit id="5a8bbd84610d1c777c353f8f16b14399af3b24f4" translate="yes" xml:space="preserve">
          <source>Among other causes, this variant will be constructed when parsing a string that contains a non-ASCII char.</source>
          <target state="translated">他の原因の中で、このバリアントは非 ASCII 文字を含む文字列を解析する際に作成されます。</target>
        </trans-unit>
        <trans-unit id="e8d19d51f5faed38ee6324a9eb71c292315da9f7" translate="yes" xml:space="preserve">
          <source>Among other causes, this variant will be constructed when parsing an empty string.</source>
          <target state="translated">他の原因の中で、このバリアントは空の文字列を解析するときに構築されます。</target>
        </trans-unit>
        <trans-unit id="1692574d1eb8d1443991c925dc8e2acd8ed2cbd7" translate="yes" xml:space="preserve">
          <source>An &quot;or&quot; pattern was used where the variable bindings are not consistently bound across patterns.</source>
          <target state="translated">変数バインディングがパターン間で一貫してバインドされていない場合には、「または」パターンが使用されました。</target>
        </trans-unit>
        <trans-unit id="43d68d3a293f07f835d90c6279bf8faa22ceb0c8" translate="yes" xml:space="preserve">
          <source>An &amp;lsquo;abstract syntax tree&amp;rsquo;, or &amp;lsquo;AST&amp;rsquo;, is an intermediate representation of the structure of the program when the compiler is compiling it.</source>
          <target state="translated">「抽象構文ツリー」または「AST」は、コンパイラーがプログラムをコンパイルするときのプログラムの構造の中間表現です。</target>
        </trans-unit>
        <trans-unit id="db2d4110f56313292c834e1861a95c89c601039f" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;../../../result/enum.result#Err.v&quot;&gt;&lt;code&gt;Err&lt;/code&gt;&lt;/a&gt; is returned if the zero &lt;a href=&quot;../../../time/struct.duration&quot;&gt;&lt;code&gt;Duration&lt;/code&gt;&lt;/a&gt; is passed to this method:</source>
          <target state="translated">アン&lt;a href=&quot;../../../result/enum.result#Err.v&quot;&gt; &lt;code&gt;Err&lt;/code&gt; &lt;/a&gt;ゼロの場合に返される&lt;a href=&quot;../../../time/struct.duration&quot;&gt; &lt;code&gt;Duration&lt;/code&gt; &lt;/a&gt;、このメソッドに渡されます。</target>
        </trans-unit>
        <trans-unit id="c2d78c88964f9736a45223d8f771f07ad6bd857e" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;../../../result/enum.result#variant.Err&quot;&gt;&lt;code&gt;Err&lt;/code&gt;&lt;/a&gt; is returned if the zero &lt;a href=&quot;../../../time/struct.duration&quot;&gt;&lt;code&gt;Duration&lt;/code&gt;&lt;/a&gt; is passed to this method:</source>
          <target state="translated">アン&lt;a href=&quot;../../../result/enum.result#variant.Err&quot;&gt; &lt;code&gt;Err&lt;/code&gt; &lt;/a&gt;ゼロの場合に返される&lt;a href=&quot;../../../time/struct.duration&quot;&gt; &lt;code&gt;Duration&lt;/code&gt; &lt;/a&gt;、このメソッドに渡されます。</target>
        </trans-unit>
        <trans-unit id="0a7f0956daf2ce936a64a4b1e04b5752d5af8c85" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;../items/enumerations&quot;&gt;&lt;code&gt;enum&lt;/code&gt; item&lt;/a&gt; declares both the type and a number of &lt;em&gt;variants&lt;/em&gt;, each of which is independently named and has the syntax of a struct, tuple struct or unit-like struct.</source>
          <target state="translated">&lt;a href=&quot;../items/enumerations&quot;&gt; &lt;code&gt;enum&lt;/code&gt; 項目は、&lt;/a&gt;タイプと数の両方を宣言&lt;em&gt;バリアント&lt;/em&gt;独立名前と構造体、タプル構造体または構造体ユニット状の構文を有するその各々を、。</target>
        </trans-unit>
        <trans-unit id="eccb90f6f9e2e1cba49165645ca18ce97f7c3bdc" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;../result/enum.result#variant.Err&quot;&gt;&lt;code&gt;Err&lt;/code&gt;&lt;/a&gt; is returned if the zero &lt;a href=&quot;../time/struct.duration&quot;&gt;&lt;code&gt;Duration&lt;/code&gt;&lt;/a&gt; is passed to this method:</source>
          <target state="translated">アン&lt;a href=&quot;../result/enum.result#variant.Err&quot;&gt; &lt;code&gt;Err&lt;/code&gt; &lt;/a&gt;ゼロの場合に返される&lt;a href=&quot;../time/struct.duration&quot;&gt; &lt;code&gt;Duration&lt;/code&gt; &lt;/a&gt;、このメソッドに渡されます。</target>
        </trans-unit>
        <trans-unit id="6c3aa2cd86bdd94aa99cad4f7b2a3826d70a323a" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;../result/enum.result#variant.Err&quot;&gt;&lt;code&gt;Err&lt;/code&gt;&lt;/a&gt; will be returned if an error occurs while flushing the buffer.</source>
          <target state="translated">An &lt;a href=&quot;../result/enum.result#variant.Err&quot;&gt; &lt;code&gt;Err&lt;/code&gt; &lt;/a&gt; will be returned if an error occurs while flushing the buffer.</target>
        </trans-unit>
        <trans-unit id="4a13d2042a47768129ce22a87e727826521c162e" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;book/ch19-04-advanced-types#dynamically-sized-types-and-the-sized-trait&quot;&gt;unsized type&lt;/a&gt; is any type where the compiler does not know the length or alignment of at compile time. Any struct containing an unsized type is also unsized.</source>
          <target state="translated">An &lt;a href=&quot;book/ch19-04-advanced-types#dynamically-sized-types-and-the-sized-trait&quot;&gt;unsized type&lt;/a&gt; is any type where the compiler does not know the length or alignment of at compile time. Any struct containing an unsized type is also unsized.</target>
        </trans-unit>
        <trans-unit id="a6662b5b221b841136c3780ac238b4001369d2fd" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;items&quot;&gt;item&lt;/a&gt; that is not a member of an &lt;a href=&quot;items/implementations&quot;&gt;implementation&lt;/a&gt;, such as a &lt;em&gt;free function&lt;/em&gt; or a &lt;em&gt;free const&lt;/em&gt;. Contrast to an &lt;a href=&quot;#associated-item&quot;&gt;associated item&lt;/a&gt;.</source>
          <target state="translated">An &lt;a href=&quot;items&quot;&gt;item&lt;/a&gt; that is not a member of an &lt;a href=&quot;items/implementations&quot;&gt;implementation&lt;/a&gt;, such as a &lt;em&gt;free function&lt;/em&gt; or a &lt;em&gt;free const&lt;/em&gt;. Contrast to an &lt;a href=&quot;#associated-item&quot;&gt;associated item&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="ee613500276e22e6ef67273653d1676ba809144c" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;items&quot;&gt;item&lt;/a&gt; that is not a member of an &lt;a href=&quot;items/implementations&quot;&gt;implementation&lt;/a&gt;, such as a &lt;em&gt;free function&lt;/em&gt; or a &lt;em&gt;free const&lt;/em&gt;. Contrast to an &lt;a href=&quot;glossary#associated-item&quot;&gt;associated item&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;items&quot;&gt;アイテム&lt;/a&gt;のメンバーではない&lt;a href=&quot;items/implementations&quot;&gt;実装&lt;/a&gt;のような、&lt;em&gt;フリー機能&lt;/em&gt;又は&lt;em&gt;フリーCONST&lt;/em&gt;。&lt;a href=&quot;glossary#associated-item&quot;&gt;関連するアイテムと&lt;/a&gt;対比。</target>
        </trans-unit>
        <trans-unit id="dcdff555d3629a9d75bb0e2e48e4c4243e57c8c2" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;items/implementations&quot;&gt;implementation&lt;/a&gt; that applies to a nominal type, not to a trait-type pair. &lt;a href=&quot;items/implementations#inherent-implementations&quot;&gt;More&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;items/implementations&quot;&gt;実装&lt;/a&gt;ではないトレイト型のペアに、名目上のタイプに適用されます。&lt;a href=&quot;items/implementations#inherent-implementations&quot;&gt;もっと&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="21e222f83548917bbd7accfb7becfb374f31ef4a" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;patterns#identifier-patterns&quot;&gt;identifier pattern&lt;/a&gt; that binds by reference or mutable reference.</source>
          <target state="translated">An &lt;a href=&quot;patterns#identifier-patterns&quot;&gt;identifier pattern&lt;/a&gt; that binds by reference or mutable reference.</target>
        </trans-unit>
        <trans-unit id="b301517253f81d6c23866ea49ad7c91ecb7227ac" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;std/keyword.async&quot;&gt;&lt;code&gt;async&lt;/code&gt;&lt;/a&gt; function used recursion without boxing.</source>
          <target state="translated">An &lt;a href=&quot;std/keyword.async&quot;&gt; &lt;code&gt;async&lt;/code&gt; &lt;/a&gt; function used recursion without boxing.</target>
        </trans-unit>
        <trans-unit id="f864e2f214828c68972804234bf4534f4526fce2" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;struct.atomicbool&quot;&gt;&lt;code&gt;AtomicBool&lt;/code&gt;&lt;/a&gt; initialized to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">アン&lt;a href=&quot;struct.atomicbool&quot;&gt; &lt;code&gt;AtomicBool&lt;/code&gt; は&lt;/a&gt;に初期化 &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0d020d51655a42acae9fc5de2d1ee76334d13d2a" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;#[inline(..)]&lt;/code&gt; attribute was incorrectly placed on something other than a function or method.</source>
          <target state="translated">An &lt;code&gt;#[inline(..)]&lt;/code&gt; attribute was incorrectly placed on something other than a function or method.</target>
        </trans-unit>
        <trans-unit id="36aa4d3dbc6bef64eda94b67a998204c02c9bc40" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;Err&lt;/code&gt; will be returned if an error occurs while flushing the buffer.</source>
          <target state="translated">アン &lt;code&gt;Err&lt;/code&gt; バッファをフラッシュ中にエラーが発生した場合に返されます。</target>
        </trans-unit>
        <trans-unit id="93af004a9cc5d8031f1774a01ca4ad5a16a22376" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;Instant&lt;/code&gt; is a wrapper around system-specific types and it may behave differently depending on the underlying operating system. For example, the following snippet is fine on Linux but panics on macOS:</source>
          <target state="translated">An &lt;code&gt;Instant&lt;/code&gt; is a wrapper around system-specific types and it may behave differently depending on the underlying operating system. For example, the following snippet is fine on Linux but panics on macOS:</target>
        </trans-unit>
        <trans-unit id="08eb1e2f2f021298ee3677019a6bda280ed6f694" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;Ordering&lt;/code&gt; is the result of a comparison between two values.</source>
          <target state="translated">&lt;code&gt;Ordering&lt;/code&gt; 2つの値の間の比較の結果です。</target>
        </trans-unit>
        <trans-unit id="001eb435d69650fbb2db42365be5918489730c71" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;RwLock&lt;/code&gt;, like &lt;a href=&quot;struct.mutex&quot;&gt;&lt;code&gt;Mutex&lt;/code&gt;&lt;/a&gt;, will become poisoned on a panic. Note, however, that an &lt;code&gt;RwLock&lt;/code&gt; may only be poisoned if a panic occurs while it is locked exclusively (write mode). If a panic occurs in any reader, then the lock will not be poisoned.</source>
          <target state="translated">アン &lt;code&gt;RwLock&lt;/code&gt; 、のような&lt;a href=&quot;struct.mutex&quot;&gt; &lt;code&gt;Mutex&lt;/code&gt; &lt;/a&gt;、パニックに毒になるだろう。ただし、 &lt;code&gt;RwLock&lt;/code&gt; は、排他的にロックされている（書き込みモード）ときにパニックが発生した場合にのみポイズニングされる可能性があることに注意してください。リーダーでパニックが発生した場合、ロックは無効化されません。</target>
        </trans-unit>
        <trans-unit id="5247e633cc3100e9500337757cb3044553bdf55d" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;enum&lt;/code&gt; with a discriminant must specify a &lt;code&gt;#[repr(inttype)]&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;enum&lt;/code&gt; 判別式では、指定しなければなりません &lt;code&gt;#[repr(inttype)]&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c8b1cbde5060ed31e602542132d6a281bf766f42" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;export_name&lt;/code&gt; attribute contains null characters (&lt;code&gt;\0&lt;/code&gt;).</source>
          <target state="translated">An &lt;code&gt;export_name&lt;/code&gt; attribute contains null characters ( &lt;code&gt;\0&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="21ec5e4c1f77a0601ab37f0e8a98cf223a18e608" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;if let&lt;/code&gt; expression is equivalent to a &lt;a href=&quot;match-expr&quot;&gt;&lt;code&gt;match&lt;/code&gt; expression&lt;/a&gt; as follows:</source>
          <target state="translated">&lt;code&gt;if let&lt;/code&gt; 式は同等です&lt;a href=&quot;match-expr&quot;&gt; &lt;code&gt;match&lt;/code&gt; の式&lt;/a&gt;は次のよう：</target>
        </trans-unit>
        <trans-unit id="2ca624a02ac8519763d7ccacb2b0ad8dad16c279" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;if let&lt;/code&gt; expression is semantically similar to an &lt;code&gt;if&lt;/code&gt; expression but in place of a condition expression it expects the keyword &lt;code&gt;let&lt;/code&gt; followed by a pattern, an &lt;code&gt;=&lt;/code&gt; and a &lt;a href=&quot;../glossary#scrutinee&quot;&gt;scrutinee&lt;/a&gt; expression. If the value of the scrutinee matches the pattern, the corresponding block will execute. Otherwise, flow proceeds to the following &lt;code&gt;else&lt;/code&gt; block if it exists. Like &lt;code&gt;if&lt;/code&gt; expressions, &lt;code&gt;if let&lt;/code&gt; expressions have a value determined by the block that is evaluated.</source>
          <target state="translated">&lt;code&gt;if let&lt;/code&gt; 式は、意味的に似ている &lt;code&gt;if&lt;/code&gt; 表現が、条件式の代わりに、それはキーワードが期待し &lt;code&gt;let&lt;/code&gt; パターン、続い &lt;code&gt;=&lt;/code&gt; と&lt;a href=&quot;../glossary#scrutinee&quot;&gt;scrutineeの&lt;/a&gt;表現。 scrutineeの値がパターンと一致する場合、対応するブロックが実行されます。それ以外の場合、フローは次の &lt;code&gt;else&lt;/code&gt; ブロックに進みます（存在する場合）。同様に &lt;code&gt;if&lt;/code&gt; 式、 &lt;code&gt;if let&lt;/code&gt; 式が評価されたブロックによって決定された値を持っています。</target>
        </trans-unit>
        <trans-unit id="eee510cf708477f86b4dc6237cd892de065d1aca" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;if&lt;/code&gt; expression allows you to branch your code depending on conditions. You provide a condition and then state, &amp;ldquo;If this condition is met, run this block of code. If the condition is not met, do not run this block of code.&amp;rdquo;</source>
          <target state="translated">&lt;code&gt;if&lt;/code&gt; 式は条件に応じてコードを分岐することができます。条件を指定してから、「この条件が満たされている場合は、このコードブロックを実行します。条件が満たされていない場合は、このコードブロックを実行しないでください。」</target>
        </trans-unit>
        <trans-unit id="23bc01de0e1b8681253f7b567d2d01b7869caf61" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;if&lt;/code&gt; expression is a conditional branch in program control. The form of an &lt;code&gt;if&lt;/code&gt; expression is a condition expression, followed by a consequent block, any number of &lt;code&gt;else if&lt;/code&gt; conditions and blocks, and an optional trailing &lt;code&gt;else&lt;/code&gt; block. The condition expressions must have type &lt;code&gt;bool&lt;/code&gt;. If a condition expression evaluates to &lt;code&gt;true&lt;/code&gt;, the consequent block is executed and any subsequent &lt;code&gt;else if&lt;/code&gt; or &lt;code&gt;else&lt;/code&gt; block is skipped. If a condition expression evaluates to &lt;code&gt;false&lt;/code&gt;, the consequent block is skipped and any subsequent &lt;code&gt;else if&lt;/code&gt; condition is evaluated. If all &lt;code&gt;if&lt;/code&gt; and &lt;code&gt;else if&lt;/code&gt; conditions evaluate to &lt;code&gt;false&lt;/code&gt; then any &lt;code&gt;else&lt;/code&gt; block is executed. An if expression evaluates to the same value as the executed block, or &lt;code&gt;()&lt;/code&gt; if no block is evaluated. An &lt;code&gt;if&lt;/code&gt; expression must have the same type in all situations.</source>
          <target state="translated">&lt;code&gt;if&lt;/code&gt; 式がプログラム制御で条件分岐です。 &lt;code&gt;if&lt;/code&gt; 式の形式は条件式であり、その後に続くブロック、任意の数の &lt;code&gt;else if&lt;/code&gt; 条件とブロック、およびオプションの後続する &lt;code&gt;else&lt;/code&gt; ブロックが続きます。条件式のタイプは &lt;code&gt;bool&lt;/code&gt; でなければなりません。条件式が &lt;code&gt;true&lt;/code&gt; と評価された場合、結果のブロックが実行され、後続の &lt;code&gt;else if&lt;/code&gt; または &lt;code&gt;else&lt;/code&gt; ブロックはスキップされます。条件式が &lt;code&gt;false&lt;/code&gt; と評価された場合、後続のブロックはスキップされ、後続の &lt;code&gt;else if&lt;/code&gt; 条件が評価されます。すべての &lt;code&gt;if&lt;/code&gt; と &lt;code&gt;else if&lt;/code&gt; 条件は &lt;code&gt;false&lt;/code&gt; と評価され、 &lt;code&gt;else&lt;/code&gt; ブロックが実行されます。if式は、実行されたブロックと同じ値に評価されます。ブロックが評価されない場合は &lt;code&gt;()&lt;/code&gt; になります。 &lt;code&gt;if&lt;/code&gt; 式がすべての状況で同じ型を持つ必要があります。</target>
        </trans-unit>
        <trans-unit id="f4cc3ee1616a9030743a2ead317eecbbfda11446" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;if&lt;/code&gt; expression is missing an &lt;code&gt;else&lt;/code&gt; block.</source>
          <target state="translated">An &lt;code&gt;if&lt;/code&gt; expression is missing an &lt;code&gt;else&lt;/code&gt; block.</target>
        </trans-unit>
        <trans-unit id="8f0d0db502cd02811b94f8110c6b6a57d9c4d08b" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;if&lt;/code&gt; expression without an &lt;code&gt;else&lt;/code&gt; block has the type &lt;code&gt;()&lt;/code&gt;, so this is a type error. To resolve it, add an &lt;code&gt;else&lt;/code&gt; block having the same type as the &lt;code&gt;if&lt;/code&gt; block.</source>
          <target state="translated">&lt;code&gt;if&lt;/code&gt; 無し式 &lt;code&gt;else&lt;/code&gt; ブロックタイプを有する &lt;code&gt;()&lt;/code&gt; 、これは型エラーです。これを解決するには、追加 &lt;code&gt;else&lt;/code&gt; と同じ種類のブロック &lt;code&gt;if&lt;/code&gt; ブロックを。</target>
        </trans-unit>
        <trans-unit id="86c2bbd51b64dbea789df858c004c474818f64aa" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;impl Trait&lt;/code&gt; type expands to a recursive type.</source>
          <target state="translated">&lt;code&gt;impl Trait&lt;/code&gt; の種類は、再帰型に拡張されます。</target>
        </trans-unit>
        <trans-unit id="714f0cd77b96bfb041f113fa02745f0b3de0da54" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;impl Trait&lt;/code&gt; type must be expandable to a concrete type that contains no &lt;code&gt;impl Trait&lt;/code&gt; types. For example the following example tries to create an &lt;code&gt;impl Trait&lt;/code&gt; type &lt;code&gt;T&lt;/code&gt; that is equal to &lt;code&gt;[T, T]&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;impl Trait&lt;/code&gt; タイプには含まれていない具体的なタイプに拡張可能でなければならない &lt;code&gt;impl Trait&lt;/code&gt; 種類を。たとえば、次の例では、 &lt;code&gt;[T, T]&lt;/code&gt; 等しい &lt;code&gt;impl Trait&lt;/code&gt; タイプ &lt;code&gt;T&lt;/code&gt; を作成しようとしています。</target>
        </trans-unit>
        <trans-unit id="5f9bf65171254b99489d8d01742247cb5f9f2b96" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;impl Trait&lt;/code&gt; type must be expandable to a concrete type that contains no &lt;code&gt;impl Trait&lt;/code&gt; types. For example the previous example tries to create an &lt;code&gt;impl Trait&lt;/code&gt; type &lt;code&gt;T&lt;/code&gt; that is equal to &lt;code&gt;[T, T]&lt;/code&gt;.</source>
          <target state="translated">An &lt;code&gt;impl Trait&lt;/code&gt; type must be expandable to a concrete type that contains no &lt;code&gt;impl Trait&lt;/code&gt; types. For example the previous example tries to create an &lt;code&gt;impl Trait&lt;/code&gt; type &lt;code&gt;T&lt;/code&gt; that is equal to &lt;code&gt;[T, T]&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ee4fc89f6e27033dd75c8304209d0e35cd3688c5" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;impl&lt;/code&gt; for a &lt;code&gt;#[marker]&lt;/code&gt; trait tried to override an associated item.</source>
          <target state="translated">&lt;code&gt;#[marker]&lt;/code&gt; トレイトの &lt;code&gt;impl&lt;/code&gt; は、関連付けられたアイテムをオーバーライドしようとしました。</target>
        </trans-unit>
        <trans-unit id="6d1073354ecc9c5e7785479d7d2a13da928ab63a" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;x&lt;/code&gt; with value &lt;code&gt;0&lt;/code&gt; will return the bit width of &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">値 &lt;code&gt;0&lt;/code&gt; の &lt;code&gt;x&lt;/code&gt; は &lt;code&gt;T&lt;/code&gt; のビット幅を返します。</target>
        </trans-unit>
        <trans-unit id="80f05b7296f4e1950e87afc07c23f9e722a69148" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;x&lt;/code&gt; with value &lt;code&gt;0&lt;/code&gt; will return the bit width of &lt;code&gt;T&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; 値が &lt;code&gt;0&lt;/code&gt; のビット幅戻ります &lt;code&gt;T&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="4ce321b8a11937b61aec381eab2e9acd0f2ae8bc" translate="yes" xml:space="preserve">
          <source>An &lt;em&gt;&lt;a href=&quot;../types/array&quot;&gt;array&lt;/a&gt; expression&lt;/em&gt; can be written by enclosing zero or more comma-separated expressions of uniform type in square brackets. This produces an array containing each of these values in the order they are written.</source>
          <target state="translated">An &lt;em&gt;&lt;a href=&quot;../types/array&quot;&gt;array&lt;/a&gt; expression&lt;/em&gt; can be written by enclosing zero or more comma-separated expressions of uniform type in square brackets. This produces an array containing each of these values in the order they are written.</target>
        </trans-unit>
        <trans-unit id="534dc31a67cf35753f9f6ff5f73b65cd1ba58ab5" translate="yes" xml:space="preserve">
          <source>An &lt;em&gt;&lt;a href=&quot;../types/array&quot;&gt;array&lt;/a&gt; expression&lt;/em&gt; can be written by enclosing zero or more comma-separated expressions of uniform type in square brackets. This produces and array containing each of these values in the order they are written.</source>
          <target state="translated">&lt;em&gt;&lt;a href=&quot;../types/array&quot;&gt;配列の&lt;/a&gt;発現は、&lt;/em&gt;角括弧内に均一型のゼロまたはそれ以上のカンマで区切られた式を囲んで書くことができます。これにより、これらの各値が書き込まれた順序で格納された配列が生成されます。</target>
        </trans-unit>
        <trans-unit id="32616f8cb6d3bd819da208e9fcccc36635a05f1e" translate="yes" xml:space="preserve">
          <source>An &lt;em&gt;&lt;code&gt;extern crate&lt;/code&gt; declaration&lt;/em&gt; specifies a dependency on an external crate. The external crate is then bound into the declaring scope as the &lt;a href=&quot;../identifiers&quot;&gt;identifier&lt;/a&gt; provided in the &lt;code&gt;extern crate&lt;/code&gt; declaration. The &lt;code&gt;as&lt;/code&gt; clause can be used to bind the imported crate to a different name.</source>
          <target state="translated">&lt;em&gt; &lt;code&gt;extern crate&lt;/code&gt; 宣言は、&lt;/em&gt;外部クレートへの依存性を指定します。次に、外部クレートは、 &lt;code&gt;extern crate&lt;/code&gt; 宣言で提供された&lt;a href=&quot;../identifiers&quot;&gt;識別子&lt;/a&gt;として宣言スコープにバインドされます。句は、別の名前にインポートクレートを結合するために使用することができます。 &lt;code&gt;as&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="13494e1cedf4f5c5ecdcb7c07e83d0cd9827df20" translate="yes" xml:space="preserve">
          <source>An &lt;em&gt;absolute path&lt;/em&gt; starts from a crate root by using a crate name or a literal &lt;code&gt;crate&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;絶対パスは、&lt;/em&gt;クレート名またはリテラル使用して、クレートルートから開始 &lt;code&gt;crate&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="86fdc788150826ae707ba926f5a66e96063c57f9" translate="yes" xml:space="preserve">
          <source>An &lt;em&gt;assignment expression&lt;/em&gt; consists of a &lt;a href=&quot;../expressions#place-expressions-and-value-expressions&quot;&gt;place expression&lt;/a&gt; followed by an equals sign (&lt;code&gt;=&lt;/code&gt;) and a &lt;a href=&quot;../expressions#place-expressions-and-value-expressions&quot;&gt;value expression&lt;/a&gt;. Such an expression always has the &lt;a href=&quot;../types/tuple&quot;&gt;&lt;code&gt;unit&lt;/code&gt; type&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;代入式は、&lt;/em&gt;から成る&lt;a href=&quot;../expressions#place-expressions-and-value-expressions&quot;&gt;場所発現&lt;/a&gt;等号が続く（ &lt;code&gt;=&lt;/code&gt; ）と&lt;a href=&quot;../expressions#place-expressions-and-value-expressions&quot;&gt;値式&lt;/a&gt;。このような式には常に&lt;a href=&quot;../types/tuple&quot;&gt; &lt;code&gt;unit&lt;/code&gt; タイプがあり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="ca56087cc708820efe9481bf7313fdab4a040e22" translate="yes" xml:space="preserve">
          <source>An &lt;em&gt;associated constant declaration&lt;/em&gt; declares a signature for associated constant definitions. It is written as &lt;code&gt;const&lt;/code&gt;, then an identifier, then &lt;code&gt;:&lt;/code&gt;, then a type, finished by a &lt;code&gt;;&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;関連定数宣言が&lt;/em&gt;関連付けられた定数定義の署名を宣言する。それは &lt;code&gt;const&lt;/code&gt; 、次に識別子、次に &lt;code&gt;:&lt;/code&gt; 、次にタイプとして書かれ、 &lt;code&gt;;&lt;/code&gt; で終了します。。</target>
        </trans-unit>
        <trans-unit id="ec29836d6b0ec5f807474f5934209d4fe8c7bb83" translate="yes" xml:space="preserve">
          <source>An &lt;em&gt;associated constant definition&lt;/em&gt; defines a constant associated with a type. It is written the same as a &lt;a href=&quot;constant-items&quot;&gt;constant item&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;関連する定数の定義は、&lt;/em&gt;タイプに関連付けられた定数を定義します。&lt;a href=&quot;constant-items&quot;&gt;定数項目&lt;/a&gt;と同じように書かれています。</target>
        </trans-unit>
        <trans-unit id="c9d2944c74176d8d6fa13f7d573ee85d9e742d32" translate="yes" xml:space="preserve">
          <source>An &lt;em&gt;associated function declaration&lt;/em&gt; declares a signature for an associated function definition. It is written as a function item, except the function body is replaced with a &lt;code&gt;;&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;関連関数宣言は&lt;/em&gt;、関連する関数定義のシグネチャを宣言する。関数本体が &lt;code&gt;;&lt;/code&gt; に置き換えられることを除いて、関数項目として記述されます。。</target>
        </trans-unit>
        <trans-unit id="dce2c17d462060e477f166e6bcfabaf54ef17987" translate="yes" xml:space="preserve">
          <source>An &lt;em&gt;associated function definition&lt;/em&gt; defines a function associated with another type. It is written the same as a &lt;a href=&quot;../types/function-item&quot;&gt;function item&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;関連した関数の定義は&lt;/em&gt;、他のタイプに関連付けられた機能を定義します。&lt;a href=&quot;../types/function-item&quot;&gt;関数アイテム&lt;/a&gt;と同じように書かれています。</target>
        </trans-unit>
        <trans-unit id="ddd6d9f2bd71f652e6f6a519a466ea3ae43a3bff" translate="yes" xml:space="preserve">
          <source>An &lt;em&gt;associated type declaration&lt;/em&gt; declares a signature for associated type definitions. It is written as &lt;code&gt;type&lt;/code&gt;, then an &lt;a href=&quot;../identifiers&quot;&gt;identifier&lt;/a&gt;, and finally an optional list of trait bounds.</source>
          <target state="translated">&lt;em&gt;関連するタイプ宣言が&lt;/em&gt;関連付けられているタイプ定義のための署名を宣言する。これは &lt;code&gt;type&lt;/code&gt; 、次に&lt;a href=&quot;../identifiers&quot;&gt;identifier&lt;/a&gt;、最後にオプションの特性境界のリストとして記述されます。</target>
        </trans-unit>
        <trans-unit id="9bd2e844486eba2a5ee0638c6e470984a319e1bf" translate="yes" xml:space="preserve">
          <source>An &lt;em&gt;associated type definition&lt;/em&gt; defines a type alias on another type. It is written as &lt;code&gt;type&lt;/code&gt;, then an &lt;a href=&quot;../identifiers&quot;&gt;identifier&lt;/a&gt;, then an &lt;code&gt;=&lt;/code&gt;, and finally a &lt;a href=&quot;../types#type-expressions&quot;&gt;type&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;関連する型定義は&lt;/em&gt;、他の種類のタイプの別名を定義します。 &lt;code&gt;type&lt;/code&gt; 、&lt;a href=&quot;../identifiers&quot;&gt;識別子&lt;/a&gt;、 &lt;code&gt;=&lt;/code&gt; の順に記述され、最後に&lt;a href=&quot;../types#type-expressions&quot;&gt;タイプ&lt;/a&gt;が記述されます。</target>
        </trans-unit>
        <trans-unit id="d29048068c2d4e137f184a7dcfb9e91e3a77ac3e" translate="yes" xml:space="preserve">
          <source>An &lt;em&gt;async block&lt;/em&gt; is a variant of a block expression which evaluates to a &lt;em&gt;future&lt;/em&gt;. The final expression of the block, if present, determines the result value of the future.</source>
          <target state="translated">An &lt;em&gt;async block&lt;/em&gt; is a variant of a block expression which evaluates to a &lt;em&gt;future&lt;/em&gt;. The final expression of the block, if present, determines the result value of the future.</target>
        </trans-unit>
        <trans-unit id="335c18325b2749c2db5132eb57bce1ffbfa512dc" translate="yes" xml:space="preserve">
          <source>An &lt;em&gt;attribute&lt;/em&gt; is a general, free-form metadatum that is interpreted according to name, convention, and language and compiler version. Attributes are modeled on Attributes in &lt;a href=&quot;https://www.ecma-international.org/publications/standards/Ecma-335.htm&quot;&gt;ECMA-335&lt;/a&gt;, with the syntax coming from &lt;a href=&quot;https://www.ecma-international.org/publications/standards/Ecma-334.htm&quot;&gt;ECMA-334&lt;/a&gt; (C#).</source>
          <target state="translated">&lt;em&gt;属性には、&lt;/em&gt;名前、慣習、言語とコンパイラのバージョンに応じて解釈される一般的な、自由形式のmetadatumです。属性は&lt;a href=&quot;https://www.ecma-international.org/publications/standards/Ecma-335.htm&quot;&gt;ECMA-335の&lt;/a&gt;属性に基づいてモデル化され、構文は&lt;a href=&quot;https://www.ecma-international.org/publications/standards/Ecma-334.htm&quot;&gt;ECMA-334&lt;/a&gt;（C＃）から取得されます。</target>
        </trans-unit>
        <trans-unit id="7486c611897561f3f092f583b562152c09bc11bb" translate="yes" xml:space="preserve">
          <source>An &lt;em&gt;attribute&lt;/em&gt; is a general, free-form metadatum that is interpreted according to name, convention, language, and compiler version. Attributes are modeled on Attributes in &lt;a href=&quot;https://www.ecma-international.org/publications/standards/Ecma-335.htm&quot;&gt;ECMA-335&lt;/a&gt;, with the syntax coming from &lt;a href=&quot;https://www.ecma-international.org/publications/standards/Ecma-334.htm&quot;&gt;ECMA-334&lt;/a&gt; (C#).</source>
          <target state="translated">An &lt;em&gt;attribute&lt;/em&gt; is a general, free-form metadatum that is interpreted according to name, convention, language, and compiler version. Attributes are modeled on Attributes in &lt;a href=&quot;https://www.ecma-international.org/publications/standards/Ecma-335.htm&quot;&gt;ECMA-335&lt;/a&gt;, with the syntax coming from &lt;a href=&quot;https://www.ecma-international.org/publications/standards/Ecma-334.htm&quot;&gt;ECMA-334&lt;/a&gt; (C#).</target>
        </trans-unit>
        <trans-unit id="8f90d06fddc7c21886a0949a73d97b908062294c" translate="yes" xml:space="preserve">
          <source>An &lt;em&gt;enumerated type&lt;/em&gt; is a nominal, heterogeneous disjoint union type, denoted by the name of an &lt;a href=&quot;../items/enumerations&quot;&gt;&lt;code&gt;enum&lt;/code&gt; item&lt;/a&gt;. &lt;sup&gt;&lt;a href=&quot;#enumtype&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;</source>
          <target state="translated">An &lt;em&gt;enumerated type&lt;/em&gt; is a nominal, heterogeneous disjoint union type, denoted by the name of an &lt;a href=&quot;../items/enumerations&quot;&gt; &lt;code&gt;enum&lt;/code&gt; item&lt;/a&gt;. &lt;sup&gt;&lt;a href=&quot;#enumtype&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="fe8d0e2999c5dfed50da51262f087365afa14a25" translate="yes" xml:space="preserve">
          <source>An &lt;em&gt;enumerated type&lt;/em&gt; is a nominal, heterogeneous disjoint union type, denoted by the name of an &lt;a href=&quot;../items/enumerations&quot;&gt;&lt;code&gt;enum&lt;/code&gt; item&lt;/a&gt;. &lt;sup&gt;&lt;a href=&quot;enum#enumtype&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;</source>
          <target state="translated">&lt;em&gt;列挙型は、&lt;/em&gt;の名前で示され、名目、異種のばらばらの共用体型である&lt;a href=&quot;../items/enumerations&quot;&gt; &lt;code&gt;enum&lt;/code&gt; アイテム&lt;/a&gt;。&lt;sup&gt;&lt;a href=&quot;enum#enumtype&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="519b32460e4cf24cbf7584ec56a2b57870f1cdef" translate="yes" xml:space="preserve">
          <source>An &lt;em&gt;enumeration&lt;/em&gt;, also referred to as &lt;em&gt;enum&lt;/em&gt; is a simultaneous definition of a nominal &lt;a href=&quot;../types/enum&quot;&gt;enumerated type&lt;/a&gt; as well as a set of &lt;em&gt;constructors&lt;/em&gt;, that can be used to create or pattern-match values of the corresponding enumerated type.</source>
          <target state="translated">&lt;em&gt;列挙&lt;/em&gt;とも呼ばれる、&lt;em&gt;列挙は、&lt;/em&gt;公称の同時定義で&lt;a href=&quot;../types/enum&quot;&gt;列挙型&lt;/a&gt;と同様のセット&lt;em&gt;コンストラクタ&lt;/em&gt;対応する列挙型の又はパターンマッチ値を作成するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="670995bec677d5fc81f3189dbec41d6de7da346c" translate="yes" xml:space="preserve">
          <source>An &lt;em&gt;example term&lt;/em&gt; is an example of a term being defined.</source>
          <target state="translated">&lt;em&gt;例えば、この用語は、&lt;/em&gt;定義される用語の例です。</target>
        </trans-unit>
        <trans-unit id="03f2bd4498afb61074c0d1568fbae87b71b0a6a3" translate="yes" xml:space="preserve">
          <source>An &lt;em&gt;expression statement&lt;/em&gt; is one that evaluates an &lt;a href=&quot;expressions&quot;&gt;expression&lt;/a&gt; and ignores its result. As a rule, an expression statement's purpose is to trigger the effects of evaluating its expression.</source>
          <target state="translated">&lt;em&gt;式文は、&lt;/em&gt;評価1で&lt;a href=&quot;expressions&quot;&gt;表現し&lt;/a&gt;、その結果を無視します。原則として、式ステートメントの目的は、式の評価の効果をトリガーすることです。</target>
        </trans-unit>
        <trans-unit id="4c66d5e565f712d67ccd031da7fc185642328c03" translate="yes" xml:space="preserve">
          <source>An &lt;em&gt;extending pattern&lt;/em&gt; is either</source>
          <target state="translated">An &lt;em&gt;extending pattern&lt;/em&gt; is either</target>
        </trans-unit>
        <trans-unit id="111aa957a35f04452bf335357f4b5845abfce6b9" translate="yes" xml:space="preserve">
          <source>An &lt;em&gt;implementation&lt;/em&gt; is an item that associates items with an &lt;em&gt;implementing type&lt;/em&gt;. Implementations are defined with the keyword &lt;code&gt;impl&lt;/code&gt; and contain functions that belong to an instance of the type that is being implemented or to the type statically.</source>
          <target state="translated">&lt;em&gt;実装が&lt;/em&gt;持つアイテムに関連付けアイテムです&lt;em&gt;実装タイプを&lt;/em&gt;。実装はキーワード &lt;code&gt;impl&lt;/code&gt; で定義され、実装される型のインスタンスまたは静的に型に属する関数を含みます。</target>
        </trans-unit>
        <trans-unit id="26714676268e63e4c19e025e4e919231c94ab7b4" translate="yes" xml:space="preserve">
          <source>An &lt;em&gt;integer literal&lt;/em&gt; has one of four forms:</source>
          <target state="translated">&lt;em&gt;整数リテラルは、&lt;/em&gt; 4つの形式のいずれかになります。</target>
        </trans-unit>
        <trans-unit id="3b04f25de241c42aa4cc17d61d52253aec0db163" translate="yes" xml:space="preserve">
          <source>An &lt;em&gt;integer&lt;/em&gt; is a number without a fractional component. We used one integer type in Chapter 2, the &lt;code&gt;u32&lt;/code&gt; type. This type declaration indicates that the value it&amp;rsquo;s associated with should be an unsigned integer (signed integer types start with &lt;code&gt;i&lt;/code&gt;, instead of &lt;code&gt;u&lt;/code&gt;) that takes up 32 bits of space. Table 3-1 shows the built-in integer types in Rust. Each variant in the Signed and Unsigned columns (for example, &lt;code&gt;i16&lt;/code&gt;) can be used to declare the type of an integer value.</source>
          <target state="translated">&lt;em&gt;整数&lt;/em&gt;分数成分を含まない数です。第2章では、1つの整数型、 &lt;code&gt;u32&lt;/code&gt; 型を使用しました。この型宣言は、関連付けられている値が32ビットのスペースを占める符号なし整数（ &lt;code&gt;u&lt;/code&gt; の代わりに &lt;code&gt;i&lt;/code&gt; で始まる符号付き整数型）であることを示しています。表3-1は、Rustの組み込み整数型を示しています。 Signed列とUnsigned列の各バリアント（たとえば、 &lt;code&gt;i16&lt;/code&gt; ）を使用して、整数値の型を宣言できます。</target>
        </trans-unit>
        <trans-unit id="c86645edb5b5b0c86e3d214a4daf335142eb0487" translate="yes" xml:space="preserve">
          <source>An &lt;em&gt;item declaration statement&lt;/em&gt; has a syntactic form identical to an &lt;a href=&quot;items&quot;&gt;item declaration&lt;/a&gt; within a &lt;a href=&quot;items/modules&quot;&gt;module&lt;/a&gt;. Declaring an item within a statement block restricts its scope to the block containing the statement. The item is not given a &lt;a href=&quot;paths#canonical-paths&quot;&gt;canonical path&lt;/a&gt; nor are any sub-items it may declare. The exception to this is that associated items defined by &lt;a href=&quot;items/implementations&quot;&gt;implementations&lt;/a&gt; are still accessible in outer scopes as long as the item and, if applicable, trait are accessible. It is otherwise identical in meaning to declaring the item inside a module.</source>
          <target state="translated">&lt;em&gt;アイテムの宣言文は、&lt;/em&gt;同一の構文形式有する&lt;a href=&quot;items&quot;&gt;アイテム宣言&lt;/a&gt;内の&lt;a href=&quot;items/modules&quot;&gt;モジュール&lt;/a&gt;。ステートメントブロック内でアイテムを宣言すると、そのスコープはステートメントを含むブロックに制限されます。アイテムには&lt;a href=&quot;paths#canonical-paths&quot;&gt;正規のパスが&lt;/a&gt;与えられておらず、宣言できるサブアイテムもありません。これの例外は、&lt;a href=&quot;items/implementations&quot;&gt;実装&lt;/a&gt;によって定義された関連項目は、項目と、該当する場合は特性にアクセスできる限り、外部スコープで引き続きアクセスできることです。それ以外の点は、モジュール内でアイテムを宣言することと同じ意味です。</target>
        </trans-unit>
        <trans-unit id="7cb6bea3f24f939f1296c8f5c8b195169146ee81" translate="yes" xml:space="preserve">
          <source>An &lt;em&gt;item&lt;/em&gt; is a component of a crate. Items are organized within a crate by a nested set of &lt;a href=&quot;items/modules&quot;&gt;modules&lt;/a&gt;. Every crate has a single &quot;outermost&quot; anonymous module; all further items within the crate have &lt;a href=&quot;paths&quot;&gt;paths&lt;/a&gt; within the module tree of the crate.</source>
          <target state="translated">&lt;em&gt;アイテムは、&lt;/em&gt;クレートの構成要素です。アイテムは、ネストされた&lt;a href=&quot;items/modules&quot;&gt;モジュールの&lt;/a&gt;セットによってクレート内で編成されます。すべてのクレートには、単一の「最も外側の」匿名モジュールがあります。クレート内のすべてのアイテムには、クレートのモジュールツリー内の&lt;a href=&quot;paths&quot;&gt;パス&lt;/a&gt;があります。</target>
        </trans-unit>
        <trans-unit id="8df47e4537a8816a2744d87425d00def520f575a" translate="yes" xml:space="preserve">
          <source>An &lt;em&gt;octal literal&lt;/em&gt; starts with the character sequence &lt;code&gt;U+0030&lt;/code&gt;&lt;code&gt;U+006F&lt;/code&gt; (&lt;code&gt;0o&lt;/code&gt;) and continues as any mixture (with at least one digit) of octal digits and underscores.</source>
          <target state="translated">&lt;em&gt;進リテラル&lt;/em&gt;文字列で始まる &lt;code&gt;U+0030&lt;/code&gt; &lt;code&gt;U+006F&lt;/code&gt; （ &lt;code&gt;0o&lt;/code&gt; ）と進数字と下線の（少なくとも一桁で）任意の混合物として継続します。</target>
        </trans-unit>
        <trans-unit id="a141d1e8af86d54f8339e504d3e1c56051728a15" translate="yes" xml:space="preserve">
          <source>An Example Program Using Structs</source>
          <target state="translated">構造体を用いたプログラム例</target>
        </trans-unit>
        <trans-unit id="5aefcb56dc6b861369f867948d8b3b7d49377bfe" translate="yes" xml:space="preserve">
          <source>An I/O Project: Building a Command Line Program</source>
          <target state="translated">I/Oプロジェクト。コマンドラインプログラムの構築</target>
        </trans-unit>
        <trans-unit id="0827868381963388a6304543297f7f95e42e9164" translate="yes" xml:space="preserve">
          <source>An IP address, either IPv4 or IPv6.</source>
          <target state="translated">IPv4またはIPv6のいずれかのIPアドレス。</target>
        </trans-unit>
        <trans-unit id="ac4cbc9b22ca704cfdd900cac5407adcf23c5edb" translate="yes" xml:space="preserve">
          <source>An IPv4 address representing an unspecified address: 0.0.0.0</source>
          <target state="translated">不特定のアドレスを表すIPv4アドレス。0.0.0.0</target>
        </trans-unit>
        <trans-unit id="d2e22ab3badaaaa01e7375dd220a2065ca03f949" translate="yes" xml:space="preserve">
          <source>An IPv4 address representing the broadcast address: 255.255.255.255</source>
          <target state="translated">ブロードキャストアドレスを表すIPv4アドレス。255.255.255.255</target>
        </trans-unit>
        <trans-unit id="5f0e70a5e365495e2ae4d74f302988b1f303a907" translate="yes" xml:space="preserve">
          <source>An IPv4 address with the address pointing to localhost: 127.0.0.1.</source>
          <target state="translated">localhostを指すIPv4アドレス:127.0.0.0.1。</target>
        </trans-unit>
        <trans-unit id="c9d68f8900e66f00bfbfd5b6cf93e7f299173890" translate="yes" xml:space="preserve">
          <source>An IPv4 address.</source>
          <target state="translated">IPv4アドレス。</target>
        </trans-unit>
        <trans-unit id="5bb8e3b87105ecbe9c8ed2a2e3a9821088df2706" translate="yes" xml:space="preserve">
          <source>An IPv4 socket address.</source>
          <target state="translated">IPv4 ソケットアドレス。</target>
        </trans-unit>
        <trans-unit id="a30848e04ae8ee9ab468ffa0929f622538606ceb" translate="yes" xml:space="preserve">
          <source>An IPv6 address representing localhost: &lt;code&gt;::1&lt;/code&gt;.</source>
          <target state="translated">localhost：:: &lt;code&gt;::1&lt;/code&gt; 表すIPv6アドレス。</target>
        </trans-unit>
        <trans-unit id="2e145c57ced7f65d6f3f83ddc10fbd40d1da4596" translate="yes" xml:space="preserve">
          <source>An IPv6 address representing the unspecified address: &lt;code&gt;::&lt;/code&gt;</source>
          <target state="translated">未指定のアドレスを表すIPv6アドレス &lt;code&gt;::&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="ee7dda9f630704f82008f3562e22d445246045b1" translate="yes" xml:space="preserve">
          <source>An IPv6 address.</source>
          <target state="translated">IPv6アドレス。</target>
        </trans-unit>
        <trans-unit id="51d9d6e575aa92d12e0b2c0fb0d5fdcf4923ff85" translate="yes" xml:space="preserve">
          <source>An IPv6 socket address.</source>
          <target state="translated">IPv6 ソケットアドレス。</target>
        </trans-unit>
        <trans-unit id="bb7fb098f948c20be5364a0797d6630c8f71fe36" translate="yes" xml:space="preserve">
          <source>An RAII implementation of a &quot;scoped lock&quot; of a mutex. When this structure is dropped (falls out of scope), the lock will be unlocked.</source>
          <target state="translated">ミューテックスの「スコープ付きロック」のRAII実装。この構造体がドロップされると(スコープから外れると)ロックは解除されます。</target>
        </trans-unit>
        <trans-unit id="445fdaee68caea7b120e9af421a1f499e812ae92" translate="yes" xml:space="preserve">
          <source>An additional advantage of using Cargo is that the commands are the same no matter which operating system you&amp;rsquo;re working on. So, at this point, we&amp;rsquo;ll no longer provide specific instructions for Linux and macOS versus Windows.</source>
          <target state="translated">Cargoを使用するもう1つの利点は、作業しているオペレーティングシステムに関係なく、コマンドが同じであることです。そのため、現時点では、LinuxおよびmacOSとWindowsの具体的な手順は提供しません。</target>
        </trans-unit>
        <trans-unit id="71d51fdd16cd827000271f90af417efeb9cea05f" translate="yes" xml:space="preserve">
          <source>An address associated with a Unix socket.</source>
          <target state="translated">Unix ソケットに関連付けられたアドレス。</target>
        </trans-unit>
        <trans-unit id="13ebc470b9c08ca083e04f253e5b3a814fa55f28" translate="yes" xml:space="preserve">
          <source>An anchor in time which can be used to create new &lt;code&gt;SystemTime&lt;/code&gt; instances or learn about where in time a &lt;code&gt;SystemTime&lt;/code&gt; lies.</source>
          <target state="translated">新しい &lt;code&gt;SystemTime&lt;/code&gt; インスタンスを作成したり、 &lt;code&gt;SystemTime&lt;/code&gt; がどこにあるかを知るために使用できる時間のアンカー。</target>
        </trans-unit>
        <trans-unit id="0b2bb6c8ec3576952f4aecc99eb5bbbbf4cbd659" translate="yes" xml:space="preserve">
          <source>An array is a fixed-size sequence of &lt;code&gt;N&lt;/code&gt; elements of type &lt;code&gt;T&lt;/code&gt;. The array type is written as &lt;code&gt;[T; N]&lt;/code&gt;. The size is a &lt;a href=&quot;../const_eval#constant-expressions&quot;&gt;constant expression&lt;/a&gt; that evaluates to a &lt;a href=&quot;numeric#machine-dependent-integer-types&quot;&gt;&lt;code&gt;usize&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">An array is a fixed-size sequence of &lt;code&gt;N&lt;/code&gt; elements of type &lt;code&gt;T&lt;/code&gt; . The array type is written as &lt;code&gt;[T; N]&lt;/code&gt; . The size is a &lt;a href=&quot;../const_eval#constant-expressions&quot;&gt;constant expression&lt;/a&gt; that evaluates to a &lt;a href=&quot;numeric#machine-dependent-integer-types&quot;&gt; &lt;code&gt;usize&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="65f427918d6366c3545d7bcd1528880b6655f86b" translate="yes" xml:space="preserve">
          <source>An array is a fixed-size sequence of &lt;code&gt;N&lt;/code&gt; elements of type &lt;code&gt;T&lt;/code&gt;. The array type is written as &lt;code&gt;[T; N]&lt;/code&gt;. The size is an expression that evaluates to a &lt;a href=&quot;numeric#machine-dependent-integer-types&quot;&gt;&lt;code&gt;usize&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">配列は、タイプ &lt;code&gt;T&lt;/code&gt; の &lt;code&gt;N&lt;/code&gt; 個の要素の固定サイズのシーケンスです。配列タイプは &lt;code&gt;[T; N]&lt;/code&gt; N]。サイズは、&lt;a href=&quot;numeric#machine-dependent-integer-types&quot;&gt; &lt;code&gt;usize&lt;/code&gt; に&lt;/a&gt;評価される式です。</target>
        </trans-unit>
        <trans-unit id="d98f60a77f0bbfa809e448ded22428fbfae4e33e" translate="yes" xml:space="preserve">
          <source>An array is a single chunk of memory allocated on the stack. You can access elements of an array using indexing, like this:</source>
          <target state="translated">配列は、スタック上に割り当てられたメモリの1つの塊です。このようにインデックスを使って配列の要素にアクセスすることができます。</target>
        </trans-unit>
        <trans-unit id="a7bac5ec811f30188ce6fd849b796ac2d30ffddc" translate="yes" xml:space="preserve">
          <source>An array itself is not iterable:</source>
          <target state="translated">配列自体は反復可能ではありません。</target>
        </trans-unit>
        <trans-unit id="f510f3fd4950ebae5518ce0880fd83877599bc5e" translate="yes" xml:space="preserve">
          <source>An array or slice pattern required more elements than were present in the matched array.</source>
          <target state="translated">配列またはスライスパターンは、一致した配列に存在する要素よりも多くの要素を必要とします。</target>
        </trans-unit>
        <trans-unit id="005f7187c479dcce2321a163ab284d4855025280" translate="yes" xml:space="preserve">
          <source>An array or slice pattern was matched against some other type.</source>
          <target state="translated">配列またはスライスパターンが他のタイプとマッチしました。</target>
        </trans-unit>
        <trans-unit id="910b39cfa9beb5c32b52af8b271e7bb38ba1d4da" translate="yes" xml:space="preserve">
          <source>An array without a fixed length was pattern-matched.</source>
          <target state="translated">長さが固定されていない配列がパターンマッチされていました。</target>
        </trans-unit>
        <trans-unit id="9f6ee782e8b3dacab5901a68a88743cdf8f6df8d" translate="yes" xml:space="preserve">
          <source>An array, sometimes also called a fixed-size array or an inline array, is a value describing a collection of elements, each selected by an index that can be computed at run time by the program. It occupies a contiguous region of memory.</source>
          <target state="translated">配列は、固定サイズ配列やインライン配列と呼ばれることもありますが、要素の集合を表す値であり、それぞれが実行時にプログラムによって計算できるインデックスによって選択されます。これはメモリの連続した領域を占有します。</target>
        </trans-unit>
        <trans-unit id="f5926a4f64969381cfadf3083ad59aa47fe8cee7" translate="yes" xml:space="preserve">
          <source>An assignment operator was used on a non-place expression.</source>
          <target state="translated">代入演算子が非置換式で使用されていました。</target>
        </trans-unit>
        <trans-unit id="0369538fab9323882e54c1420899b941701d5cc4" translate="yes" xml:space="preserve">
          <source>An associated const has been referenced in a pattern.</source>
          <target state="translated">関連する const がパターンで参照されています。</target>
        </trans-unit>
        <trans-unit id="653f3f2885d5dd5f232a75cd2c5ed4a07f552285" translate="yes" xml:space="preserve">
          <source>An associated const was implemented when another trait item was expected.</source>
          <target state="translated">別の形質項目が予想される場合、関連する const が実装されました。</target>
        </trans-unit>
        <trans-unit id="704af6b84f8ec0b7b57fdf7ea0ff93aa51a032a6" translate="yes" xml:space="preserve">
          <source>An associated const was implemented when another trait item was expected. Erroneous code example:</source>
          <target state="translated">別の形質項目が期待されていたときに、関連付けられた const が実装されました。誤ったコード例です。</target>
        </trans-unit>
        <trans-unit id="597e595feda6e78ec52004cc35588610f09289b1" translate="yes" xml:space="preserve">
          <source>An associated constant whose name does not match any of the associated constants in the trait was used when implementing the trait.</source>
          <target state="translated">形質を実装する際に、その名前が形質内の関連定数のどれとも一致しない関連定数が使用されました。</target>
        </trans-unit>
        <trans-unit id="ac10e51ff90ef78acbd226706348e7754e0cff2c" translate="yes" xml:space="preserve">
          <source>An associated function for a trait was defined to be a method (i.e., to take a &lt;code&gt;self&lt;/code&gt; parameter), but an implementation of the trait declared the same function to be static.</source>
          <target state="translated">トレイトに関連付けられた関数はメソッド（つまり、 &lt;code&gt;self&lt;/code&gt; パラメータを取る）として定義されましたが、トレイトの実装は同じ関数を静的であると宣言しました。</target>
        </trans-unit>
        <trans-unit id="825b9fd38095eee93e418cc09ae8f9ace5e1f868" translate="yes" xml:space="preserve">
          <source>An associated function for a trait was defined to be static, but an implementation of the trait declared the same function to be a method (i.e., to take a &lt;code&gt;self&lt;/code&gt; parameter).</source>
          <target state="translated">トレイトに関連付けられた関数は静的であると定義されましたが、トレイトの実装は同じ関数をメソッドとして宣言しました（つまり、 &lt;code&gt;self&lt;/code&gt; パラメータを取るため）。</target>
        </trans-unit>
        <trans-unit id="a1184c06942df2b68acc5d480218b30a08f0c9d0" translate="yes" xml:space="preserve">
          <source>An associated item is an item that is associated with another item. Associated items are defined in &lt;a href=&quot;items/implementations&quot;&gt;implementations&lt;/a&gt; and declared in &lt;a href=&quot;items/traits&quot;&gt;traits&lt;/a&gt;. Only functions, constants, and type aliases can be associated. Contrast to a &lt;a href=&quot;#free-item&quot;&gt;free item&lt;/a&gt;.</source>
          <target state="translated">An associated item is an item that is associated with another item. Associated items are defined in &lt;a href=&quot;items/implementations&quot;&gt;implementations&lt;/a&gt; and declared in &lt;a href=&quot;items/traits&quot;&gt;traits&lt;/a&gt;. Only functions, constants, and type aliases can be associated. Contrast to a &lt;a href=&quot;#free-item&quot;&gt;free item&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="1035c9277b00c3deebef8eabfe1b836a5766b141" translate="yes" xml:space="preserve">
          <source>An associated item is an item that is associated with another item. Associated items are defined in &lt;a href=&quot;items/implementations&quot;&gt;implementations&lt;/a&gt; and declared in &lt;a href=&quot;items/traits&quot;&gt;traits&lt;/a&gt;. Only functions, constants, and type aliases can be associated. Contrast to a &lt;a href=&quot;glossary#free-item&quot;&gt;free item&lt;/a&gt;.</source>
          <target state="translated">関連アイテムは、別のアイテムに関連付けられているアイテムです。関連する項目は&lt;a href=&quot;items/implementations&quot;&gt;実装&lt;/a&gt;で定義され、&lt;a href=&quot;items/traits&quot;&gt;特性&lt;/a&gt;で宣言されます。関数、定数、および型エイリアスのみを関連付けることができます。&lt;a href=&quot;glossary#free-item&quot;&gt;無料のアイテム&lt;/a&gt;とは対照的です。</target>
        </trans-unit>
        <trans-unit id="ced942872757a981c250f3840769940a97d69e7c" translate="yes" xml:space="preserve">
          <source>An associated item wasn't found in the given type.</source>
          <target state="translated">指定されたタイプに関連する項目が見つかりませんでした。</target>
        </trans-unit>
        <trans-unit id="7d46370a3ccac2f9ec0235a03f2055e6765250fa" translate="yes" xml:space="preserve">
          <source>An associated type binding was done outside of the type parameter declaration and &lt;code&gt;where&lt;/code&gt; clause.</source>
          <target state="translated">An associated type binding was done outside of the type parameter declaration and &lt;code&gt;where&lt;/code&gt; clause.</target>
        </trans-unit>
        <trans-unit id="9116723797d95c7e68863b40ba3626f52a6ce11f" translate="yes" xml:space="preserve">
          <source>An associated type binding was done outside of the type parameter declaration and &lt;code&gt;where&lt;/code&gt; clause. Erroneous code example:</source>
          <target state="translated">関連する型バインディングが、型パラメーター宣言と &lt;code&gt;where&lt;/code&gt; 句の外で行われました。誤ったコード例：</target>
        </trans-unit>
        <trans-unit id="37ff7ecac0e044a097c6ebca208c9701778e86ec" translate="yes" xml:space="preserve">
          <source>An associated type value was specified more than once.</source>
          <target state="translated">関連付けられた型の値が複数回指定されました。</target>
        </trans-unit>
        <trans-unit id="247841afd59307a4cdd6a2a4e665f214e72f4dc2" translate="yes" xml:space="preserve">
          <source>An associated type was implemented when another trait item was expected.</source>
          <target state="translated">別の形質項目が予想される場合に、関連付けられた型が実装されました。</target>
        </trans-unit>
        <trans-unit id="01d78cadc098f0f8d19a172d639f50a5e45d007b" translate="yes" xml:space="preserve">
          <source>An associated type was implemented when another trait item was expected. Erroneous code example:</source>
          <target state="translated">別の形質項目が予想される場合に、関連付けられた型が実装されました。誤ったコード例です。</target>
        </trans-unit>
        <trans-unit id="907ca33cb695a944297042466b1a4f3511ae0a97" translate="yes" xml:space="preserve">
          <source>An associated type wasn't specified for a trait object.</source>
          <target state="translated">関連付けられた型が trait オブジェクトに指定されていませんでした。</target>
        </trans-unit>
        <trans-unit id="57e68f500f344ba1542de979c138dbc82f1b75b2" translate="yes" xml:space="preserve">
          <source>An associated type whose name does not match any of the associated types in the trait was used when implementing the trait.</source>
          <target state="translated">この形質を実装する際には、形質内の関連する型と名前が一致しない関連する型が使用されました。</target>
        </trans-unit>
        <trans-unit id="ca2d4322730aa4a674f88f33ea28a7a44379f38a" translate="yes" xml:space="preserve">
          <source>An asterisk &lt;code&gt;.*&lt;/code&gt;:</source>
          <target state="translated">アスタリスク &lt;code&gt;.*&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="b4e5a645b1ce82ee08ed7b0b7215a18a0a85f802" translate="yes" xml:space="preserve">
          <source>An async function is roughly equivalent to a function that returns &lt;a href=&quot;../types/impl-trait&quot;&gt;&lt;code&gt;impl Future&lt;/code&gt;&lt;/a&gt; and with an &lt;a href=&quot;../expressions/block-expr#async-blocks&quot;&gt;&lt;code&gt;async move&lt;/code&gt; block&lt;/a&gt; as its body:</source>
          <target state="translated">An async function is roughly equivalent to a function that returns &lt;a href=&quot;../types/impl-trait&quot;&gt; &lt;code&gt;impl Future&lt;/code&gt; &lt;/a&gt; and with an &lt;a href=&quot;../expressions/block-expr#async-blocks&quot;&gt; &lt;code&gt;async move&lt;/code&gt; block&lt;/a&gt; as its body:</target>
        </trans-unit>
        <trans-unit id="fcbf33b833d8349f917a7e3318533a910b1e01c0" translate="yes" xml:space="preserve">
          <source>An asynchronous, infinitely buffered channel. The &lt;a href=&quot;fn.channel&quot;&gt;&lt;code&gt;channel&lt;/code&gt;&lt;/a&gt; function will return a &lt;code&gt;(Sender, Receiver)&lt;/code&gt; tuple where all sends will be &lt;strong&gt;asynchronous&lt;/strong&gt; (they never block). The channel conceptually has an infinite buffer.</source>
          <target state="translated">非同期で無限にバッファリングされるチャネル。&lt;a href=&quot;fn.channel&quot;&gt; &lt;code&gt;channel&lt;/code&gt; &lt;/a&gt;機能が返されます &lt;code&gt;(Sender, Receiver)&lt;/code&gt; のすべてがされる送信タプル&lt;strong&gt;非同期に&lt;/strong&gt;（彼らはブロックしません）。チャネルには、概念的には無限のバッファーがあります。</target>
        </trans-unit>
        <trans-unit id="f387b126eb53d62fa04e8482ab5a1aac01b56bf6" translate="yes" xml:space="preserve">
          <source>An atomic fence.</source>
          <target state="translated">原子フェンス。</target>
        </trans-unit>
        <trans-unit id="a37a15efc349a5896258ef2d831759eaab050729" translate="yes" xml:space="preserve">
          <source>An atomic integer initialized to &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;0&lt;/code&gt; に初期化されるアトミック整数。</target>
        </trans-unit>
        <trans-unit id="ae4be8bb4563b5c446bf4ec14a3a559fbf234d0d" translate="yes" xml:space="preserve">
          <source>An attempt to implement the &lt;code&gt;Copy&lt;/code&gt; trait for a struct failed because one of the fields does not implement &lt;code&gt;Copy&lt;/code&gt;. To fix this, you must implement &lt;code&gt;Copy&lt;/code&gt; for the mentioned field. Note that this may not be possible, as in the example of</source>
          <target state="translated">フィールドの1つが &lt;code&gt;Copy&lt;/code&gt; を実装していないため、構造体に &lt;code&gt;Copy&lt;/code&gt; トレイトを実装しようとして失敗しました。これを修正するには、上記のフィールドに &lt;code&gt;Copy&lt;/code&gt; を実装する必要があります。の例のように、これは可能でない場合があることに注意してください</target>
        </trans-unit>
        <trans-unit id="2c5fbb1197d035a7f4fa92b6ea1f62d369096169" translate="yes" xml:space="preserve">
          <source>An attempt to implement the &lt;code&gt;Copy&lt;/code&gt; trait for an enum failed because one of the variants does not implement &lt;code&gt;Copy&lt;/code&gt;. To fix this, you must implement &lt;code&gt;Copy&lt;/code&gt; for the mentioned variant. Note that this may not be possible, as in the example of</source>
          <target state="translated">An attempt to implement the &lt;code&gt;Copy&lt;/code&gt; trait for an enum failed because one of the variants does not implement &lt;code&gt;Copy&lt;/code&gt; . To fix this, you must implement &lt;code&gt;Copy&lt;/code&gt; for the mentioned variant. Note that this may not be possible, as in the example of</target>
        </trans-unit>
        <trans-unit id="b71c2935e96e5f7fe3e3f35ad00fd7b30920019f" translate="yes" xml:space="preserve">
          <source>An attempt to index into a type which doesn't implement the &lt;code&gt;std::ops::Index&lt;/code&gt; trait was performed.</source>
          <target state="translated">&lt;code&gt;std::ops::Index&lt;/code&gt; トレイトを実装していない型にインデックスを付ける試みが行われました。</target>
        </trans-unit>
        <trans-unit id="51757a13968190cd3655b5b9aeefd9a5c033b3d1" translate="yes" xml:space="preserve">
          <source>An attempt to use index on a type which doesn't implement the &lt;code&gt;std::ops::Index&lt;/code&gt; trait was performed.</source>
          <target state="translated">An attempt to use index on a type which doesn't implement the &lt;code&gt;std::ops::Index&lt;/code&gt; trait was performed.</target>
        </trans-unit>
        <trans-unit id="8b97d7ea40069db8f20f10d06addb087be36d0ac" translate="yes" xml:space="preserve">
          <source>An attempt was made to access an associated constant through either a generic type parameter or &lt;code&gt;Self&lt;/code&gt;. This is not supported yet. An example causing this error is shown below:</source>
          <target state="translated">An attempt was made to access an associated constant through either a generic type parameter or &lt;code&gt;Self&lt;/code&gt; . This is not supported yet. An example causing this error is shown below:</target>
        </trans-unit>
        <trans-unit id="b710e02452ddf90fa51364201e945e5cc61639f6" translate="yes" xml:space="preserve">
          <source>An attempt was made to assign to a borrowed value.</source>
          <target state="translated">借りた値に代入しようとした。</target>
        </trans-unit>
        <trans-unit id="1bdf1eb8c23bfc6042e5dd9af78ec4f5f794fefe" translate="yes" xml:space="preserve">
          <source>An attempt was made to constrain an associated type.</source>
          <target state="translated">関連する型を制約する試みが行われました。</target>
        </trans-unit>
        <trans-unit id="8febb37ae18b2d657b2615e5b330d2a55118441d" translate="yes" xml:space="preserve">
          <source>An attempt was made to implement &lt;code&gt;Drop&lt;/code&gt; on a concrete specialization of a generic type. An example is shown below:</source>
          <target state="translated">ジェネリック型の具体的な特殊化に &lt;code&gt;Drop&lt;/code&gt; を実装する試みが行われました。以下に例を示します。</target>
        </trans-unit>
        <trans-unit id="26819bff2d7a8100bea5239c764f0f0d26036cba" translate="yes" xml:space="preserve">
          <source>An attempt was made to implement &lt;code&gt;Drop&lt;/code&gt; on a specialization of a generic type.</source>
          <target state="translated">An attempt was made to implement &lt;code&gt;Drop&lt;/code&gt; on a specialization of a generic type.</target>
        </trans-unit>
        <trans-unit id="09ba79d4404f5653d6f77e24331c8ba336aac40d" translate="yes" xml:space="preserve">
          <source>An attempt was made to implement &lt;code&gt;Drop&lt;/code&gt; on a specialization of a generic type. An example is shown below:</source>
          <target state="translated">ジェネリック型の特殊化に &lt;code&gt;Drop&lt;/code&gt; を実装する試みが行われました。以下に例を示します。</target>
        </trans-unit>
        <trans-unit id="c55e6f81b7dc27d46319cedb33bad7716f5297f4" translate="yes" xml:space="preserve">
          <source>An attempt was made to implement Drop on a trait, which is not allowed: only structs and enums can implement Drop. An example causing this error:</source>
          <target state="translated">Trait に Drop を実装しようとしましたが、これは許可されていません。このエラーの原因となった例。</target>
        </trans-unit>
        <trans-unit id="e153b913d67d75c58662cead8cf242032c80e00b" translate="yes" xml:space="preserve">
          <source>An attempt was made to mutate data using a non-mutable reference. This commonly occurs when attempting to assign to a non-mutable reference of a mutable reference (&lt;code&gt;&amp;amp;(&amp;amp;mut T)&lt;/code&gt;).</source>
          <target state="translated">変更不可能な参照を使用してデータを変更しようとしました。これは一般に、変更可能な参照（ &lt;code&gt;&amp;amp;(&amp;amp;mut T)&lt;/code&gt; ）の変更不可能な参照に割り当てようとすると発生します。</target>
        </trans-unit>
        <trans-unit id="ca0f2abce0a16f2ca7a56625ca020df6fd2125b3" translate="yes" xml:space="preserve">
          <source>An attempt was made to retrieve an associated type, but the type was ambiguous.</source>
          <target state="translated">関連する型を取得しようと試みましたが、型が曖昧でした。</target>
        </trans-unit>
        <trans-unit id="adb3222e10ca68a4902e2fef67ce06d659218b60" translate="yes" xml:space="preserve">
          <source>An attempt was made to retrieve an associated type, but the type was ambiguous. For example:</source>
          <target state="translated">関連する型を取得しようと試みましたが、型があいまいでした。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="89de6efbf294db50ea9580038de7bf4a99c6cc2d" translate="yes" xml:space="preserve">
          <source>An attempted conversion that consumes &lt;code&gt;self&lt;/code&gt;, which may or may not be expensive.</source>
          <target state="translated">&lt;code&gt;self&lt;/code&gt; を消費する変換の試み。費用がかかる場合とそうでない場合があります。</target>
        </trans-unit>
        <trans-unit id="2be91cd4a4fec9bf78dc3a63f6f2d68f35c2bdbd" translate="yes" xml:space="preserve">
          <source>An attempted implementation of a trait method has the wrong number of function parameters.</source>
          <target state="translated">形質メソッドの実装が試みられていますが、関数パラメータの数が間違っています。</target>
        </trans-unit>
        <trans-unit id="9d8894f1f89d7bc71fd853d9276ef9750108ee20" translate="yes" xml:space="preserve">
          <source>An attempted implementation of a trait method has the wrong number of type or const parameters.</source>
          <target state="translated">trait メソッドの実装を試みた場合、型または const パラメータの数が間違っています。</target>
        </trans-unit>
        <trans-unit id="863f680a55f734bd0dbbca55a32cd8aa13a2d823" translate="yes" xml:space="preserve">
          <source>An attribute is either active or inert. During attribute processing, &lt;em&gt;active attributes&lt;/em&gt; remove themselves from the thing they are on while &lt;em&gt;inert attributes&lt;/em&gt; stay on.</source>
          <target state="translated">属性はアクティブまたは非アクティブです。属性の処理中に、&lt;em&gt;アクティブな属性は&lt;/em&gt;、彼らがいる間にあるものから身を削除する&lt;em&gt;不活性属性&lt;/em&gt;にご滞在を。</target>
        </trans-unit>
        <trans-unit id="de85bca69e396a8c71433fa18f072a410a4fc345" translate="yes" xml:space="preserve">
          <source>An auto trait was declared with a method or an associated item.</source>
          <target state="translated">自動形質がメソッドまたは関連する項目で宣言されました。</target>
        </trans-unit>
        <trans-unit id="8f22761bfa3bdfb0003204a934bf1010c9716a93" translate="yes" xml:space="preserve">
          <source>An empty buffer returned indicates that the stream has reached EOF.</source>
          <target state="translated">返された空のバッファは、ストリームがEOFに達したことを示します。</target>
        </trans-unit>
        <trans-unit id="dc01027756efda949405e0e59c0d834ec342e061" translate="yes" xml:space="preserve">
          <source>An empty iterator returns &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">空のイテレータは &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="442cf9396651f26f54eeff92f4dde433d7f72454" translate="yes" xml:space="preserve">
          <source>An empty iterator returns &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">空のイテレータは &lt;code&gt;true&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="e3ba001b1a53998b8d224cd77e4663359ef99e71" translate="yes" xml:space="preserve">
          <source>An empty iterator returns the one value of the type.</source>
          <target state="translated">空のイテレータは、型の1つの値を返します。</target>
        </trans-unit>
        <trans-unit id="54261d577d85895bf8c09d3febd150e6fae82418" translate="yes" xml:space="preserve">
          <source>An empty iterator returns the zero value of the type.</source>
          <target state="translated">空のイテレータは、型のゼロ値を返します。</target>
        </trans-unit>
        <trans-unit id="b0823d0a93b876d1ef3cd6f73de147b3c9881c3f" translate="yes" xml:space="preserve">
          <source>An empty sequence is lexicographically less than any non-empty sequence.</source>
          <target state="translated">空のシーケンスは、辞書的には空でないシーケンスよりも小さい。</target>
        </trans-unit>
        <trans-unit id="95f62854280c7cd5daf0c2b6b4a29d4a8c72ac30" translate="yes" xml:space="preserve">
          <source>An endpoint of a range of keys.</source>
          <target state="translated">キーの範囲の終点。</target>
        </trans-unit>
        <trans-unit id="ee713135dbae7e11e49962ea65b30c33678861ed" translate="yes" xml:space="preserve">
          <source>An entity already exists, often a file.</source>
          <target state="translated">実体は既に存在しており、多くの場合はファイルです。</target>
        </trans-unit>
        <trans-unit id="2db4e2025a972767c9444bca8e88e9a77524203e" translate="yes" xml:space="preserve">
          <source>An entity was not found, often a file.</source>
          <target state="translated">実体が見つかりませんでした。</target>
        </trans-unit>
        <trans-unit id="c5a4a196ff419cb4ace58ac8718f985652b454f9" translate="yes" xml:space="preserve">
          <source>An enum with the representation hint &lt;code&gt;repr(transparent)&lt;/code&gt; had zero or more than one variants.</source>
          <target state="translated">表現ヒント &lt;code&gt;repr(transparent)&lt;/code&gt; を持つ列挙型には、ゼロまたは1つ以上のバリアントがありました。</target>
        </trans-unit>
        <trans-unit id="3dc999ff5594fd4673ff8dbd7678f9024bdecf27" translate="yes" xml:space="preserve">
          <source>An enumeration of possible errors associated with a &lt;a href=&quot;type.trylockresult&quot;&gt;&lt;code&gt;TryLockResult&lt;/code&gt;&lt;/a&gt; which can occur while trying to acquire a lock, from the &lt;a href=&quot;struct.mutex#method.try_lock&quot;&gt;&lt;code&gt;try_lock&lt;/code&gt;&lt;/a&gt; method on a &lt;a href=&quot;struct.mutex&quot;&gt;&lt;code&gt;Mutex&lt;/code&gt;&lt;/a&gt; or the &lt;a href=&quot;struct.rwlock#method.try_read&quot;&gt;&lt;code&gt;try_read&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;struct.rwlock#method.try_write&quot;&gt;&lt;code&gt;try_write&lt;/code&gt;&lt;/a&gt; methods on an &lt;a href=&quot;struct.rwlock&quot;&gt;&lt;code&gt;RwLock&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">関連付けられた可能性のあるエラーの列挙&lt;a href=&quot;type.trylockresult&quot;&gt; &lt;code&gt;TryLockResult&lt;/code&gt; &lt;/a&gt;から、ロックを取得しようとしたときに発生する可能性が&lt;a href=&quot;struct.mutex#method.try_lock&quot;&gt; &lt;code&gt;try_lock&lt;/code&gt; の&lt;/a&gt;上の方法&lt;a href=&quot;struct.mutex&quot;&gt; &lt;code&gt;Mutex&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;struct.rwlock#method.try_read&quot;&gt; &lt;code&gt;try_read&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;struct.rwlock#method.try_write&quot;&gt; &lt;code&gt;try_write&lt;/code&gt; &lt;/a&gt;のメソッド&lt;a href=&quot;struct.rwlock&quot;&gt; &lt;code&gt;RwLock&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="09fd334e73fd76483600e0a3e0818465278a8c4f" translate="yes" xml:space="preserve">
          <source>An error indicating invalid UTF-8 when converting a &lt;a href=&quot;struct.cstring&quot;&gt;&lt;code&gt;CString&lt;/code&gt;&lt;/a&gt; into a &lt;a href=&quot;../string/struct.string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;struct.cstring&quot;&gt; &lt;code&gt;CString&lt;/code&gt; &lt;/a&gt;を&lt;a href=&quot;../string/struct.string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;に変換するときに無効なUTF-8を示すエラー。</target>
        </trans-unit>
        <trans-unit id="7e00442ed63dafefaa24c2855dc12cc641d5d806" translate="yes" xml:space="preserve">
          <source>An error indicating that a nul byte was not in the expected position.</source>
          <target state="translated">nul バイトが期待された位置になかったことを示すエラー。</target>
        </trans-unit>
        <trans-unit id="607c0a59f40344c6d402da3d92f1e4d75c5c8d03" translate="yes" xml:space="preserve">
          <source>An error indicating that an interior nul byte was found.</source>
          <target state="translated">内部のヌルバイトが見つかったことを示すエラーです。</target>
        </trans-unit>
        <trans-unit id="2239ba3f9f1a9c04aabf258d44bc7c635e911959" translate="yes" xml:space="preserve">
          <source>An error of the &lt;a href=&quot;enum.errorkind#variant.Interrupted&quot;&gt;&lt;code&gt;ErrorKind::Interrupted&lt;/code&gt;&lt;/a&gt; kind is non-fatal and the read operation should be retried if there is nothing else to do.</source>
          <target state="translated">&lt;a href=&quot;enum.errorkind#variant.Interrupted&quot;&gt; &lt;code&gt;ErrorKind::Interrupted&lt;/code&gt; &lt;/a&gt;種類のエラーは致命的ではないため、他に何もすることがない場合は、読み取り操作を再試行する必要があります。</target>
        </trans-unit>
        <trans-unit id="ff800591cb202807f317ec28fbc572d02357615d" translate="yes" xml:space="preserve">
          <source>An error of the &lt;a href=&quot;enum.errorkind#variant.Interrupted&quot;&gt;&lt;code&gt;ErrorKind::Interrupted&lt;/code&gt;&lt;/a&gt; kind is non-fatal and the write operation should be retried if there is nothing else to do.</source>
          <target state="translated">&lt;a href=&quot;enum.errorkind#variant.Interrupted&quot;&gt; &lt;code&gt;ErrorKind::Interrupted&lt;/code&gt; &lt;/a&gt;種類のエラーは致命的ではないため、他に何もすることがない場合は、書き込み操作を再試行する必要があります。</target>
        </trans-unit>
        <trans-unit id="597ff1fa4b12094e64ed86609fbee72af9e8d564" translate="yes" xml:space="preserve">
          <source>An error returned by &lt;a href=&quot;struct.bufwriter#method.into_inner&quot;&gt;&lt;code&gt;BufWriter::into_inner&lt;/code&gt;&lt;/a&gt; which combines an error that happened while writing out the buffer, and the buffered writer object which may be used to recover from the condition.</source>
          <target state="translated">An error returned by &lt;a href=&quot;struct.bufwriter#method.into_inner&quot;&gt; &lt;code&gt;BufWriter::into_inner&lt;/code&gt; &lt;/a&gt; which combines an error that happened while writing out the buffer, and the buffered writer object which may be used to recover from the condition.</target>
        </trans-unit>
        <trans-unit id="b6ad7c556d901c0beffc94b348b6d4d9e1e99f53" translate="yes" xml:space="preserve">
          <source>An error returned by &lt;a href=&quot;struct.localkey#method.try_with&quot;&gt;&lt;code&gt;LocalKey::try_with&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;struct.localkey#method.try_with&quot;&gt; &lt;code&gt;LocalKey::try_with&lt;/code&gt; &lt;/a&gt;によって返されたエラー。</target>
        </trans-unit>
        <trans-unit id="4a2bb23cc4bff912e225e8d82c808ebe1116d273" translate="yes" xml:space="preserve">
          <source>An error returned by &lt;a href=&quot;struct.refcell#method.try_borrow&quot;&gt;&lt;code&gt;RefCell::try_borrow&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;struct.refcell#method.try_borrow&quot;&gt; &lt;code&gt;RefCell::try_borrow&lt;/code&gt; &lt;/a&gt;によって返されたエラー。</target>
        </trans-unit>
        <trans-unit id="49b49c608a0a48a5c64a8db743785c3d4f2cbc87" translate="yes" xml:space="preserve">
          <source>An error returned by &lt;a href=&quot;struct.refcell#method.try_borrow_mut&quot;&gt;&lt;code&gt;RefCell::try_borrow_mut&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;struct.refcell#method.try_borrow_mut&quot;&gt; &lt;code&gt;RefCell::try_borrow_mut&lt;/code&gt; &lt;/a&gt;によって返されたエラー。</target>
        </trans-unit>
        <trans-unit id="6a9d323634dc21ac2ba61947c9f4ada5b0523975" translate="yes" xml:space="preserve">
          <source>An error returned by &lt;code&gt;into_inner&lt;/code&gt; which combines an error that happened while writing out the buffer, and the buffered writer object which may be used to recover from the condition.</source>
          <target state="translated">バッファーの書き込み中に発生したエラーと、状態からの回復に使用できるバッファー付きライターオブジェクトを組み合わせた &lt;code&gt;into_inner&lt;/code&gt; によって返されるエラー。</target>
        </trans-unit>
        <trans-unit id="408e9c71ed3bc2aa80ae9ddbf31a37ecbe128d0c" translate="yes" xml:space="preserve">
          <source>An error returned from &lt;a href=&quot;struct.path#method.strip_prefix&quot;&gt;&lt;code&gt;Path::strip_prefix&lt;/code&gt;&lt;/a&gt; if the prefix was not found.</source>
          <target state="translated">プレフィックスが見つからなかった場合、&lt;a href=&quot;struct.path#method.strip_prefix&quot;&gt; &lt;code&gt;Path::strip_prefix&lt;/code&gt; &lt;/a&gt;からエラーが返されました。</target>
        </trans-unit>
        <trans-unit id="788504f3aa85eadb6d0636b88bca37c397dba8e3" translate="yes" xml:space="preserve">
          <source>An error returned from the &lt;a href=&quot;struct.receiver#method.recv&quot;&gt;&lt;code&gt;recv&lt;/code&gt;&lt;/a&gt; function on a &lt;a href=&quot;struct.receiver&quot;&gt;&lt;code&gt;Receiver&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;struct.receiver&quot;&gt; &lt;code&gt;Receiver&lt;/code&gt; の&lt;/a&gt;&lt;a href=&quot;struct.receiver#method.recv&quot;&gt; &lt;code&gt;recv&lt;/code&gt; &lt;/a&gt;関数から返されたエラー。</target>
        </trans-unit>
        <trans-unit id="9fec5ed88196e94f3e7939be6668b9ce8dfe54d0" translate="yes" xml:space="preserve">
          <source>An error returned from the &lt;a href=&quot;struct.sender#method.send&quot;&gt;&lt;code&gt;Sender::send&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;struct.syncsender#method.send&quot;&gt;&lt;code&gt;SyncSender::send&lt;/code&gt;&lt;/a&gt; function on &lt;strong&gt;channel&lt;/strong&gt;s.</source>
          <target state="translated">&lt;strong&gt;チャネル&lt;/strong&gt; sの&lt;a href=&quot;struct.sender#method.send&quot;&gt; &lt;code&gt;Sender::send&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;struct.syncsender#method.send&quot;&gt; &lt;code&gt;SyncSender::send&lt;/code&gt; &lt;/a&gt;関数から返されたエラー。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b947bf8292263975edc2c833eac5521f6b3d5e94" translate="yes" xml:space="preserve">
          <source>An error returned from the &lt;code&gt;duration_since&lt;/code&gt; and &lt;code&gt;elapsed&lt;/code&gt; methods on &lt;code&gt;SystemTime&lt;/code&gt;, used to learn how far in the opposite direction a system time lies.</source>
          <target state="translated">返されたエラー &lt;code&gt;duration_since&lt;/code&gt; と &lt;code&gt;elapsed&lt;/code&gt; の方法 &lt;code&gt;SystemTime&lt;/code&gt; どこまで反対方向のシステム時刻の嘘を学ぶために使用されます、。</target>
        </trans-unit>
        <trans-unit id="3cc3caad00d427c67aa297b2ffd580ffa8825463" translate="yes" xml:space="preserve">
          <source>An error returned when an operation could not be completed because a call to &lt;a href=&quot;trait.write#tymethod.write&quot;&gt;&lt;code&gt;write&lt;/code&gt;&lt;/a&gt; returned &lt;a href=&quot;../result/enum.result#variant.Ok&quot;&gt;&lt;code&gt;Ok(0)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">An error returned when an operation could not be completed because a call to &lt;a href=&quot;trait.write#tymethod.write&quot;&gt; &lt;code&gt;write&lt;/code&gt; &lt;/a&gt; returned &lt;a href=&quot;../result/enum.result#variant.Ok&quot;&gt; &lt;code&gt;Ok(0)&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="f51f86543e577fd1d558ef170de94a1b52743f0b" translate="yes" xml:space="preserve">
          <source>An error returned when an operation could not be completed because a call to &lt;a href=&quot;trait.write#tymethod.write&quot;&gt;&lt;code&gt;write&lt;/code&gt;&lt;/a&gt; returned &lt;a href=&quot;type.result&quot;&gt;&lt;code&gt;Ok(0)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;trait.write#tymethod.write&quot;&gt; &lt;code&gt;write&lt;/code&gt; の&lt;/a&gt;呼び出しが&lt;a href=&quot;type.result&quot;&gt; &lt;code&gt;Ok(0)&lt;/code&gt; を&lt;/a&gt;返したため、操作を完了できなかったときにエラーが返されました。</target>
        </trans-unit>
        <trans-unit id="b05482ca3068a6de89ef72655084867c49191841" translate="yes" xml:space="preserve">
          <source>An error returned when an operation could not be completed because an &quot;end of file&quot; was reached prematurely.</source>
          <target state="translated">ファイルの終了」が早まったため、操作を完了できなかった場合にエラーが返されました。</target>
        </trans-unit>
        <trans-unit id="9c4fdb1f9f1ace5ab60797b01c282f3c5da7046e" translate="yes" xml:space="preserve">
          <source>An error returned when parsing a &lt;code&gt;bool&lt;/code&gt; using &lt;a href=&quot;../primitive.bool#method.from_str&quot;&gt;&lt;code&gt;from_str&lt;/code&gt;&lt;/a&gt; fails</source>
          <target state="translated">解析時にエラーが返された &lt;code&gt;bool&lt;/code&gt; 使用して&lt;a href=&quot;../primitive.bool#method.from_str&quot;&gt; &lt;code&gt;from_str&lt;/code&gt; が&lt;/a&gt;失敗しました</target>
        </trans-unit>
        <trans-unit id="b2cc322b72612b3329e40408b842ec85e5b854bf" translate="yes" xml:space="preserve">
          <source>An error returned when parsing a &lt;code&gt;bool&lt;/code&gt; using &lt;a href=&quot;trait.fromstr#tymethod.from_str&quot;&gt;&lt;code&gt;from_str&lt;/code&gt;&lt;/a&gt; fails</source>
          <target state="translated">An error returned when parsing a &lt;code&gt;bool&lt;/code&gt; using &lt;a href=&quot;trait.fromstr#tymethod.from_str&quot;&gt; &lt;code&gt;from_str&lt;/code&gt; &lt;/a&gt; fails</target>
        </trans-unit>
        <trans-unit id="01956aad1d91d0a3eaa910ec372ba76608859bfc" translate="yes" xml:space="preserve">
          <source>An error that can be returned when decoding UTF-16 code points.</source>
          <target state="translated">UTF-16のコードポイントをデコードする際に返ってくるエラーです。</target>
        </trans-unit>
        <trans-unit id="3533bcb297f1b2a750fb10891e22e5dd49940449" translate="yes" xml:space="preserve">
          <source>An error when parsing a &lt;code&gt;String&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; の解析時のエラー。</target>
        </trans-unit>
        <trans-unit id="a8c4d17e195207f5a989ac26b5a78606dcbba09d" translate="yes" xml:space="preserve">
          <source>An error which can be returned when parsing a char.</source>
          <target state="translated">char を解析する際に返されるエラー。</target>
        </trans-unit>
        <trans-unit id="6080f2ccd647721dacbdd21e9d94b2a3bec77e1f" translate="yes" xml:space="preserve">
          <source>An error which can be returned when parsing a float.</source>
          <target state="translated">float を解析する際に返されるエラー。</target>
        </trans-unit>
        <trans-unit id="8d76e3522dda33b8ed78bf99a4c5562182d54f08" translate="yes" xml:space="preserve">
          <source>An error which can be returned when parsing an IP address or a socket address.</source>
          <target state="translated">IP アドレスまたはソケットアドレスを解析する際に返されるエラー。</target>
        </trans-unit>
        <trans-unit id="c7b106b5fd117686f0aceb67097fd3cef2a189bf" translate="yes" xml:space="preserve">
          <source>An error which can be returned when parsing an integer.</source>
          <target state="translated">整数を解析する際に返されるエラー。</target>
        </trans-unit>
        <trans-unit id="0c10923efe360df9a8a2484a223be28df23ba6ae" translate="yes" xml:space="preserve">
          <source>An evaluation of a trait requirement overflowed.</source>
          <target state="translated">形質要件の評価が溢れた。</target>
        </trans-unit>
        <trans-unit id="1d7c5a9fd1d469b89a9d56899ca1f50026a1dd32" translate="yes" xml:space="preserve">
          <source>An example implementation for a domain in which two books are considered the same book if their ISBN matches, even if the formats differ:</source>
          <target state="translated">フォーマットが異なっていても、ISBNが一致していれば、2冊の本が同じ本とみなされるドメインの実装例。</target>
        </trans-unit>
        <trans-unit id="68ff7c567c0520a3da56cf3b0e9741fe24004f8f" translate="yes" xml:space="preserve">
          <source>An example implementation of the trait:</source>
          <target state="translated">形質の例示的な実装。</target>
        </trans-unit>
        <trans-unit id="28b14342433cafd1cb0863789fedb01f7530bff9" translate="yes" xml:space="preserve">
          <source>An example is a generic struct holding a function pointer. In this case, the implementation of &lt;code&gt;Clone&lt;/code&gt; cannot be &lt;code&gt;derive&lt;/code&gt;d, but can be implemented as:</source>
          <target state="translated">例は、関数ポインタを保持する一般的な構造体です。この場合、 &lt;code&gt;Clone&lt;/code&gt; の実装を &lt;code&gt;derive&lt;/code&gt; ことはできませんが、次のように実装できます。</target>
        </trans-unit>
        <trans-unit id="da1a4e43cf80966a8d5beb99e7207867287f3da9" translate="yes" xml:space="preserve">
          <source>An example of &lt;code&gt;use&lt;/code&gt; declarations:</source>
          <target state="translated">&lt;code&gt;use&lt;/code&gt; 宣言の例：</target>
        </trans-unit>
        <trans-unit id="f512d81d83647ae47cd90bcb76d95f7b8768001b" translate="yes" xml:space="preserve">
          <source>An example of a &lt;code&gt;for&lt;/code&gt; loop over the contents of an array:</source>
          <target state="translated">配列の内容 &lt;code&gt;for&lt;/code&gt; ループの例：</target>
        </trans-unit>
        <trans-unit id="fee9699f2c385a5203b6e01e13cf6011f2fcd8a4" translate="yes" xml:space="preserve">
          <source>An example of a &lt;code&gt;match&lt;/code&gt; expression:</source>
          <target state="translated">&lt;code&gt;match&lt;/code&gt; 式の例：</target>
        </trans-unit>
        <trans-unit id="cfd1afa80d53786d32ba47458c2ed4379f4003bf" translate="yes" xml:space="preserve">
          <source>An example of a &lt;code&gt;return&lt;/code&gt; expression:</source>
          <target state="translated">&lt;code&gt;return&lt;/code&gt; 式の例：</target>
        </trans-unit>
        <trans-unit id="9c5bf1e5202001a02f36098e504bd7cb0fe28030" translate="yes" xml:space="preserve">
          <source>An example of a &lt;code&gt;struct&lt;/code&gt; item and its use:</source>
          <target state="translated">例 &lt;code&gt;struct&lt;/code&gt; 項目とその使用：</target>
        </trans-unit>
        <trans-unit id="3c2199ab0dce170bc0714704fc232fd68c69b281" translate="yes" xml:space="preserve">
          <source>An example of a &lt;em&gt;recursive&lt;/em&gt; type and its use:</source>
          <target state="translated">例&lt;em&gt;再帰&lt;/em&gt;種類とその使用：</target>
        </trans-unit>
        <trans-unit id="0f62525fdcd99f7d466515d9585c0c13357e1b2b" translate="yes" xml:space="preserve">
          <source>An example of a common associated function is a &lt;code&gt;new&lt;/code&gt; function that returns a value of the type the associated function is associated with.</source>
          <target state="translated">一般的な関連関数の例は、関連関数が関連付けられている型の値を返す &lt;code&gt;new&lt;/code&gt; 関数です。</target>
        </trans-unit>
        <trans-unit id="6a351aa1ff4672ddb51a26e9d5f1e845614b350b" translate="yes" xml:space="preserve">
          <source>An example of a for loop over a series of integers:</source>
          <target state="translated">整数列に対するforループの例。</target>
        </trans-unit>
        <trans-unit id="9bcd2ce89adc17fbe7648c05a09884aa0d701978" translate="yes" xml:space="preserve">
          <source>An example of a module:</source>
          <target state="translated">モジュールの例。</target>
        </trans-unit>
        <trans-unit id="8e8435c013addb39ce3eb498c3c558d414e6f6ad" translate="yes" xml:space="preserve">
          <source>An example of a necessary use of parentheses is when calling a function pointer that is a member of a struct:</source>
          <target state="translated">括弧の使用が必要な例としては、構造体のメンバである関数ポインタを呼び出す場合があります。</target>
        </trans-unit>
        <trans-unit id="056ff1cdb43a917deab8c9dc0f118b2d9dd496e8" translate="yes" xml:space="preserve">
          <source>An example of a non-&lt;code&gt;Send&lt;/code&gt; type is the reference-counting pointer &lt;a href=&quot;../rc/struct.rc&quot;&gt;&lt;code&gt;rc::Rc&lt;/code&gt;&lt;/a&gt;. If two threads attempt to clone &lt;a href=&quot;../rc/struct.rc&quot;&gt;&lt;code&gt;Rc&lt;/code&gt;&lt;/a&gt;s that point to the same reference-counted value, they might try to update the reference count at the same time, which is &lt;a href=&quot;../../reference/behavior-considered-undefined&quot;&gt;undefined behavior&lt;/a&gt; because &lt;a href=&quot;../rc/struct.rc&quot;&gt;&lt;code&gt;Rc&lt;/code&gt;&lt;/a&gt; doesn't use atomic operations. Its cousin &lt;a href=&quot;../sync/struct.arc&quot;&gt;&lt;code&gt;sync::Arc&lt;/code&gt;&lt;/a&gt; does use atomic operations (incurring some overhead) and thus is &lt;code&gt;Send&lt;/code&gt;.</source>
          <target state="translated">非 &lt;code&gt;Send&lt;/code&gt; タイプの例は、参照カウントポインター&lt;a href=&quot;../rc/struct.rc&quot;&gt; &lt;code&gt;rc::Rc&lt;/code&gt; &lt;/a&gt;です。2つのスレッドが同じ参照カウント値を指す&lt;a href=&quot;../rc/struct.rc&quot;&gt; &lt;code&gt;Rc&lt;/code&gt; &lt;/a&gt;のクローンを作成しようとすると、参照カウントを同時に更新しようとする可能性があります。これは、&lt;a href=&quot;../rc/struct.rc&quot;&gt; &lt;code&gt;Rc&lt;/code&gt; &lt;/a&gt;がアトミック操作を使用しないため、&lt;a href=&quot;../../reference/behavior-considered-undefined&quot;&gt;未定義の&lt;/a&gt;動作です。その従兄弟の&lt;a href=&quot;../sync/struct.arc&quot;&gt; &lt;code&gt;sync::Arc&lt;/code&gt; &lt;/a&gt;はアトミック操作を使用し（オーバーヘッドが発生します）、したがって &lt;code&gt;Send&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="e38ec369f62f9a0e9cf71faa19b5cb843376b06e" translate="yes" xml:space="preserve">
          <source>An example of a parenthesized expression:</source>
          <target state="translated">括弧で囲まれた式の例。</target>
        </trans-unit>
        <trans-unit id="f06523b9f614521a822acb49c6502314b5223a29" translate="yes" xml:space="preserve">
          <source>An example of a trait object:</source>
          <target state="translated">形質オブジェクトの例。</target>
        </trans-unit>
        <trans-unit id="f97a42d4af253ea16c2f098f9cd1358538ff9ccc" translate="yes" xml:space="preserve">
          <source>An example of a trait that can&amp;rsquo;t be derived is &lt;code&gt;Display&lt;/code&gt;, which handles formatting for end users. You should always consider the appropriate way to display a type to an end user. What parts of the type should an end user be allowed to see? What parts would they find relevant? What format of the data would be most relevant to them? The Rust compiler doesn&amp;rsquo;t have this insight, so it can&amp;rsquo;t provide appropriate default behavior for you.</source>
          <target state="translated">派生できない特性の例は &lt;code&gt;Display&lt;/code&gt; で、これはエンドユーザーのフォーマットを処理します。エンドユーザーにタイプを表示する適切な方法を常に検討する必要があります。エンドユーザーに表示を許可する必要があるのは、タイプのどの部分ですか？彼らはどの部分に関連があると思いますか？それらに最も関連するデータの形式は何ですか？Rustコンパイラーにはこの洞察がないため、適切なデフォルトの動作を提供できません。</target>
        </trans-unit>
        <trans-unit id="b2a6dc626aff375aa4d434c66ea264d4dc08b800" translate="yes" xml:space="preserve">
          <source>An example of a trait whose methods are not object safe is the standard library&amp;rsquo;s &lt;code&gt;Clone&lt;/code&gt; trait. The signature for the &lt;code&gt;clone&lt;/code&gt; method in the &lt;code&gt;Clone&lt;/code&gt; trait looks like this:</source>
          <target state="translated">メソッドがオブジェクトセーフではないトレイトの例は、標準ライブラリの &lt;code&gt;Clone&lt;/code&gt; トレイトです。 &lt;code&gt;Clone&lt;/code&gt; トレイトの &lt;code&gt;clone&lt;/code&gt; メソッドのシグネチャは次のようになります。</target>
        </trans-unit>
        <trans-unit id="5e81f6611106899f0be7f5a0792978a45ad55dd8" translate="yes" xml:space="preserve">
          <source>An example of a tuple type and its use:</source>
          <target state="translated">タプル型の例とその使用例。</target>
        </trans-unit>
        <trans-unit id="363c341cbe13044b212571253c8a33caae78cd45" translate="yes" xml:space="preserve">
          <source>An example of an &lt;code&gt;as&lt;/code&gt; expression:</source>
          <target state="translated">&lt;code&gt;as&lt;/code&gt; 式の例：</target>
        </trans-unit>
        <trans-unit id="a2db905e306fb4833044bdd9885bb27ab8f76d7f" translate="yes" xml:space="preserve">
          <source>An example of an &lt;code&gt;enum&lt;/code&gt; item and its use:</source>
          <target state="translated">例 &lt;code&gt;enum&lt;/code&gt; 項目とその使用：</target>
        </trans-unit>
        <trans-unit id="9260a714aba6105dd14cba9d58f3d41f31de6503" translate="yes" xml:space="preserve">
          <source>An example of an empty type is &lt;code&gt;enum Empty { }&lt;/code&gt;. So, the following will work:</source>
          <target state="translated">空の型の例は、 &lt;code&gt;enum Empty { }&lt;/code&gt; です。したがって、以下が機能します：</target>
        </trans-unit>
        <trans-unit id="ff969b10a01ab50464488192aa66638be2ebf171" translate="yes" xml:space="preserve">
          <source>An example of combining the above rules of &lt;code&gt;path&lt;/code&gt; attributes on inline modules and nested modules within (applies to both mod-rs and non-mod-rs files):</source>
          <target state="translated">インラインモジュールとネストされたモジュールの &lt;code&gt;path&lt;/code&gt; 属性の上記のルールを組み合わせた例（mod-rsファイルとnon-mod-rsファイルの両方に適用）：</target>
        </trans-unit>
        <trans-unit id="6e09c1385fee93fd5fa2b4010458a4fc489b7a97" translate="yes" xml:space="preserve">
          <source>An example of implementing the formatting traits would look like:</source>
          <target state="translated">フォーマットの特徴を実装する例は次のようになります。</target>
        </trans-unit>
        <trans-unit id="fa098562087edb062353d3aa89708207a19b395b" translate="yes" xml:space="preserve">
          <source>An example of matching non-exhaustively on the above enum is provided below:</source>
          <target state="translated">上記の列挙に対して非網羅的にマッチングする例を以下に示す。</target>
        </trans-unit>
        <trans-unit id="7ef19768d994b2224d1f41bd49faef1709c5e7ef" translate="yes" xml:space="preserve">
          <source>An example of panic:</source>
          <target state="translated">パニックの例。</target>
        </trans-unit>
        <trans-unit id="884b0dfdd5d082bb94960ecce28dc9f3e6d384f8" translate="yes" xml:space="preserve">
          <source>An example of re-exporting:</source>
          <target state="translated">再輸出の例。</target>
        </trans-unit>
        <trans-unit id="708c005211a8b1e93ec9aac2ad4a16e9c3bc2bc3" translate="yes" xml:space="preserve">
          <source>An example of this error:</source>
          <target state="translated">このエラーの例。</target>
        </trans-unit>
        <trans-unit id="1d989db348ecf6096ab3ac95d001072dec12efa1" translate="yes" xml:space="preserve">
          <source>An example of this is when generating a new struct and an impl for it:</source>
          <target state="translated">例えば、新しい構造体とその構造体用のインプルを生成する場合です。</target>
        </trans-unit>
        <trans-unit id="9b7f946fdd8d8a22da86833c61b5461d61a9c5be" translate="yes" xml:space="preserve">
          <source>An example of using tuple patterns:</source>
          <target state="translated">タプルパターンの使用例。</target>
        </trans-unit>
        <trans-unit id="62347f606509b323a7de02a2bce976170f493c84" translate="yes" xml:space="preserve">
          <source>An example of what not to do and how this relates to &lt;code&gt;read_unaligned&lt;/code&gt; is:</source>
          <target state="translated">An example of what not to do and how this relates to &lt;code&gt;read_unaligned&lt;/code&gt; is:</target>
        </trans-unit>
        <trans-unit id="6f16face177ebc3cd353bb963c0ea872b0ace950" translate="yes" xml:space="preserve">
          <source>An example of what not to do and how this relates to &lt;code&gt;write_unaligned&lt;/code&gt; is:</source>
          <target state="translated">An example of what not to do and how this relates to &lt;code&gt;write_unaligned&lt;/code&gt; is:</target>
        </trans-unit>
        <trans-unit id="64eb812bfe0819a20f7b7755d2742025cd360a65" translate="yes" xml:space="preserve">
          <source>An example of what will and will not work for &lt;code&gt;use&lt;/code&gt; items:</source>
          <target state="translated">&lt;code&gt;use&lt;/code&gt; アイテムで機能することと機能しないことの例：</target>
        </trans-unit>
        <trans-unit id="8365f135946b3f7b044d8cfd3fa7997f776027f4" translate="yes" xml:space="preserve">
          <source>An example of when &lt;code&gt;Clone&lt;/code&gt; is required is when calling the &lt;code&gt;to_vec&lt;/code&gt; method on a slice. The slice doesn&amp;rsquo;t own the type instances it contains, but the vector returned from &lt;code&gt;to_vec&lt;/code&gt; will need to own its instances, so &lt;code&gt;to_vec&lt;/code&gt; calls &lt;code&gt;clone&lt;/code&gt; on each item. Thus, the type stored in the slice must implement &lt;code&gt;Clone&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Clone&lt;/code&gt; が必要な場合の例は、スライスで &lt;code&gt;to_vec&lt;/code&gt; メソッドを呼び出す場合です。スライスはそれが含む型インスタンスを所有していませんが、 &lt;code&gt;to_vec&lt;/code&gt; から返されたベクターはそのインスタンスを所有する必要があるため、 &lt;code&gt;to_vec&lt;/code&gt; は各アイテムで &lt;code&gt;clone&lt;/code&gt; を呼び出します。したがって、スライスに格納される型は &lt;code&gt;Clone&lt;/code&gt; を実装する必要があります。</target>
        </trans-unit>
        <trans-unit id="aaf3c4aa1a7d59f2304836782308596d0ae75f64" translate="yes" xml:space="preserve">
          <source>An example of when &lt;code&gt;Eq&lt;/code&gt; is required is for keys in a &lt;code&gt;HashMap&amp;lt;K, V&amp;gt;&lt;/code&gt; so the &lt;code&gt;HashMap&amp;lt;K, V&amp;gt;&lt;/code&gt; can tell whether two keys are the same.</source>
          <target state="translated">場合の例 &lt;code&gt;Eq&lt;/code&gt; 必要であるがのキーのためのものである &lt;code&gt;HashMap&amp;lt;K, V&amp;gt;&lt;/code&gt; ので &lt;code&gt;HashMap&amp;lt;K, V&amp;gt;&lt;/code&gt; 2つのキーが同じであるかどうかを伝えることができます。</target>
        </trans-unit>
        <trans-unit id="e410ff694a089e824c24843049bae108ce880220" translate="yes" xml:space="preserve">
          <source>An example of when &lt;code&gt;Hash&lt;/code&gt; is required is in storing keys in a &lt;code&gt;HashMap&amp;lt;K, V&amp;gt;&lt;/code&gt; to store data efficiently.</source>
          <target state="translated">&lt;code&gt;Hash&lt;/code&gt; が必要な場合の例は、データを効率的に格納するために &lt;code&gt;HashMap&amp;lt;K, V&amp;gt;&lt;/code&gt; にキーを格納する場合です。</target>
        </trans-unit>
        <trans-unit id="13874d9be8af151d397c4923d18c3e3bb505d451" translate="yes" xml:space="preserve">
          <source>An example of when &lt;code&gt;Ord&lt;/code&gt; is required is when storing values in a &lt;code&gt;BTreeSet&amp;lt;T&amp;gt;&lt;/code&gt;, a data structure that stores data based on the sort order of the values.</source>
          <target state="translated">&lt;code&gt;Ord&lt;/code&gt; が必要な場合の例は、値のソート順に基づいてデータを格納するデータ構造である &lt;code&gt;BTreeSet&amp;lt;T&amp;gt;&lt;/code&gt; に値を格納する場合です。</target>
        </trans-unit>
        <trans-unit id="309f6d59bf7b6968dcfb2187e53fc8e9c9c42a01" translate="yes" xml:space="preserve">
          <source>An example of when you might want to use an array rather than a vector is in a program that needs to know the names of the months of the year. It&amp;rsquo;s very unlikely that such a program will need to add or remove months, so you can use an array because you know it will always contain 12 elements:</source>
          <target state="translated">An example of when you might want to use an array rather than a vector is in a program that needs to know the names of the months of the year. It&amp;rsquo;s very unlikely that such a program will need to add or remove months, so you can use an array because you know it will always contain 12 elements:</target>
        </trans-unit>
        <trans-unit id="f42b2c8e58eff03a7089947fa8ffae92137b9b5f" translate="yes" xml:space="preserve">
          <source>An example of when you might want to use an array rather than a vector is in a program that needs to know the names of the months of the year. It&amp;rsquo;s very unlikely that such a program will need to add or remove months, so you can use an array because you know it will always contain 12 items:</source>
          <target state="translated">ベクトルではなく配列を使用したい場合の例は、年の月の名前を知る必要があるプログラムです。このようなプログラムで月数を追加または削除する必要が生じる可能性は非常に低いため、配列には常に12項目が含まれることがわかっているため、配列を使用できます。</target>
        </trans-unit>
        <trans-unit id="bd0712d619a2d60e4c146e231ccdfbad8aba4743" translate="yes" xml:space="preserve">
          <source>An example of where you would want to only accept &lt;code&gt;fn&lt;/code&gt; and not closures is when interfacing with external code that doesn&amp;rsquo;t have closures: C functions can accept functions as arguments, but C doesn&amp;rsquo;t have closures.</source>
          <target state="translated">クロージャーではなく &lt;code&gt;fn&lt;/code&gt; のみを受け入れたい場合の例は、クロージャーを持たない外部コードとインターフェースする場合です。C関数は関数を引数として受け入れることができますが、Cにはクロージャーがありません。</target>
        </trans-unit>
        <trans-unit id="e73f9f6c8b4fbcf9f4fd470408b5fff3f081d3b9" translate="yes" xml:space="preserve">
          <source>An example using a closure:</source>
          <target state="translated">クロージャを使用した例。</target>
        </trans-unit>
        <trans-unit id="6d3969065ec2f88aef65174e1f6ffa620b0c83f2" translate="yes" xml:space="preserve">
          <source>An example where &lt;code&gt;Binop&lt;/code&gt; is defined as a function pointer type:</source>
          <target state="translated">&lt;code&gt;Binop&lt;/code&gt; が関数ポインター型として定義されている例：</target>
        </trans-unit>
        <trans-unit id="f481ad49809e7c27b79d2e6d830283b22c04c1f7" translate="yes" xml:space="preserve">
          <source>An example:</source>
          <target state="translated">一例です。</target>
        </trans-unit>
        <trans-unit id="9b338a4ae7f343a1618fa43d10bfc2df436ea62d" translate="yes" xml:space="preserve">
          <source>An exclusive bound.</source>
          <target state="translated">排他的な束縛。</target>
        </trans-unit>
        <trans-unit id="0a0f5c759335e3ef134a90149eb082ea59cf661b" translate="yes" xml:space="preserve">
          <source>An executing Rust program consists of a collection of native OS threads, each with their own stack and local state. Threads can be named, and provide some built-in support for low-level synchronization.</source>
          <target state="translated">実行中のRustプログラムは、ネイティブOSのスレッドのコレクションで構成されており、それぞれが独自のスタックとローカルステートを持っています。スレッドは名前を付けることができ、低レベルの同期のためのいくつかの組み込みサポートを提供します。</target>
        </trans-unit>
        <trans-unit id="12c993ee363617797c480ae0e7fa61fa88f7540e" translate="yes" xml:space="preserve">
          <source>An explicit conversion from a &lt;code&gt;&amp;amp;str&lt;/code&gt; to a String is done as follows:</source>
          <target state="translated">&lt;code&gt;&amp;amp;str&lt;/code&gt; からStringへの明示的な変換は、次のように行われます。</target>
        </trans-unit>
        <trans-unit id="9863ad7a484538312614b219ee23d089bab88f2a" translate="yes" xml:space="preserve">
          <source>An expression enclosed in parentheses evaluates to the result of the enclosed expression. Parentheses can be used to explicitly specify evaluation order within an expression.</source>
          <target state="translated">括弧で囲まれた式は、括弧で囲まれた式の結果として評価されます。括弧を使用して、式内の評価順序を明示的に指定することができます。</target>
        </trans-unit>
        <trans-unit id="b0b2d07f6ff343f37bbb2da0dbd07ed7ea53cb5d" translate="yes" xml:space="preserve">
          <source>An expression is a combination of values, constants, variables, operators and functions that evaluate to a single value, with or without side-effects.</source>
          <target state="translated">式とは、値、定数、変数、演算子、関数の組み合わせで、副作用の有無にかかわらず、単一の値に評価されるものです。</target>
        </trans-unit>
        <trans-unit id="8a470e20ec20f9f17fbbac4266c615aa43cc21c3" translate="yes" xml:space="preserve">
          <source>An expression may have two roles: it always produces a &lt;em&gt;value&lt;/em&gt;, and it may have &lt;em&gt;effects&lt;/em&gt; (otherwise known as &quot;side effects&quot;). An expression &lt;em&gt;evaluates to&lt;/em&gt; a value, and has effects during &lt;em&gt;evaluation&lt;/em&gt;. Many expressions contain sub-expressions (operands). The meaning of each kind of expression dictates several things:</source>
          <target state="translated">式には2つの役割があります。それは常に&lt;em&gt;値を&lt;/em&gt;生成する&lt;em&gt;ことと&lt;/em&gt;、&lt;em&gt;効果&lt;/em&gt;（または「副作用」として知られていること）を持つことです。式は値に&lt;em&gt;評価され&lt;/em&gt;、&lt;em&gt;評価&lt;/em&gt;中に影響を与えます。多くの式にはサブ式（オペランド）が含まれています。各種類の表現の意味は、いくつかのことを決定します。</target>
        </trans-unit>
        <trans-unit id="894873bc5f587b4733b17f7dfb18b0f3059d2176" translate="yes" xml:space="preserve">
          <source>An expression that consists of only a &lt;a href=&quot;expressions/block-expr&quot;&gt;block expression&lt;/a&gt; or control flow expression, if used in a context where a statement is permitted, can omit the trailing semicolon. This can cause an ambiguity between it being parsed as a standalone statement and as a part of another expression; in this case, it is parsed as a statement. The type of &lt;a href=&quot;expressions&quot;&gt;&lt;em&gt;ExpressionWithBlock&lt;/em&gt;&lt;/a&gt; expressions when used as statements must be the unit type.</source>
          <target state="translated">&lt;a href=&quot;expressions/block-expr&quot;&gt;ブロック式&lt;/a&gt;または制御フロー式のみで構成される式は、ステートメントが許可されているコンテキストで使用される場合、末尾のセミコロンを省略できます。これにより、スタンドアロンのステートメントとして解析されることと、別の式の一部として解析されることのあいまいさが生じる可能性があります。この場合、ステートメントとして解析されます。ステートメントとして使用する場合の&lt;a href=&quot;expressions&quot;&gt;&lt;em&gt;ExpressionWithBlock&lt;/em&gt;&lt;/a&gt;式のタイプは、ユニットタイプである必要があります。</target>
        </trans-unit>
        <trans-unit id="3db9b6e5300ec2a35e045cae789d7d65bc1644c2" translate="yes" xml:space="preserve">
          <source>An extension trait for concatenating slices</source>
          <target state="translated">スライスを連結するための拡張形質</target>
        </trans-unit>
        <trans-unit id="12147a5a52fb5c2a1b9d7472abd1e716e6699134" translate="yes" xml:space="preserve">
          <source>An external crate dependency can be declared without binding its name in scope by using an underscore with the form &lt;code&gt;extern crate foo as _&lt;/code&gt;. This may be useful for crates that only need to be linked, but are never referenced, and will avoid being reported as unused.</source>
          <target state="translated">外部クレート依存関係は、 &lt;code&gt;extern crate foo as _&lt;/code&gt; の形式でアンダースコアを使用することにより、スコープ内でその名前をバインドせずに宣言できます。これは、リンクする必要があるだけで参照されないクレートの場合に役立ち、未使用として報告されないようにします。</target>
        </trans-unit>
        <trans-unit id="af0969299b70206aefe5265b359a29ba784a7b81" translate="yes" xml:space="preserve">
          <source>An feature unstable in &lt;code&gt;const&lt;/code&gt; contexts was used.</source>
          <target state="translated">&lt;code&gt;const&lt;/code&gt; コンテキストで不安定な機能が使用されました。</target>
        </trans-unit>
        <trans-unit id="67fba469014e18ca2e89e6de19c923fe7de4bee7" translate="yes" xml:space="preserve">
          <source>An identifier is any nonempty ASCII string of the following form:</source>
          <target state="translated">識別子は、以下の形式の空でないASCII文字列です。</target>
        </trans-unit>
        <trans-unit id="c175628788a43110a89b193ae816462d4cf2d2a4" translate="yes" xml:space="preserve">
          <source>An identifier is bound more than once in a pattern.</source>
          <target state="translated">識別子はパターン内で複数回バインドされます。</target>
        </trans-unit>
        <trans-unit id="b2a87fc4bed852d77bc4439f4f9b01dff5c6624b" translate="yes" xml:space="preserve">
          <source>An identifier that is neither defined nor a struct was used.</source>
          <target state="translated">定義されていない識別子、構造体が使用されていない識別子。</target>
        </trans-unit>
        <trans-unit id="804d52ee70392ba486d9daf55c4a0571322cd6a0" translate="yes" xml:space="preserve">
          <source>An identifier was used like a function name or a value was expected and the identifier exists but it belongs to a different namespace.</source>
          <target state="translated">識別子が関数名のように使われていたか、値が期待されていて、識別子は存在するが別の名前空間に属していた。</target>
        </trans-unit>
        <trans-unit id="21a7adea588a50a532e49278e2f1d4c02481c073" translate="yes" xml:space="preserve">
          <source>An identity function that &lt;em&gt;&lt;strong&gt;hints&lt;/strong&gt;&lt;/em&gt; to the compiler to be maximally pessimistic about what &lt;code&gt;black_box&lt;/code&gt; could do.</source>
          <target state="translated">An identity function that &lt;em&gt;&lt;strong&gt;hints&lt;/strong&gt;&lt;/em&gt; to the compiler to be maximally pessimistic about what &lt;code&gt;black_box&lt;/code&gt; could do.</target>
        </trans-unit>
        <trans-unit id="a9dd54d260c1e67a0aa0b597f6cdb8722318da30" translate="yes" xml:space="preserve">
          <source>An identity function.</source>
          <target state="translated">アイデンティティ関数。</target>
        </trans-unit>
        <trans-unit id="f4072cccbc13fd032256ab05516201c0d8df3e68" translate="yes" xml:space="preserve">
          <source>An if-let pattern attempts to match the pattern, and enters the body if the match was successful. If the match is irrefutable (when it cannot fail to match), use a regular &lt;code&gt;let&lt;/code&gt;-binding instead. For instance:</source>
          <target state="translated">if-letパターンはパターンの照合を試み、照合が成功した場合は本文に入ります。一致に反論できない場合（一致に失敗しない場合）、代わりに通常の &lt;code&gt;let&lt;/code&gt; バインディングを使用します。例えば：</target>
        </trans-unit>
        <trans-unit id="a0284d91e655684ff663495c42199a2c25a3b7b6" translate="yes" xml:space="preserve">
          <source>An immutable variable was reassigned.</source>
          <target state="translated">不変変数が再割り当てされました。</target>
        </trans-unit>
        <trans-unit id="4ba45e243c916e58a2890a2d541b968fddd22dd8" translate="yes" xml:space="preserve">
          <source>An implementation can take type and lifetime parameters, which can be used in the rest of the implementation. Type parameters declared for an implementation must be used at least once in either the trait or the implementing type of an implementation. Implementation parameters are written directly after the &lt;code&gt;impl&lt;/code&gt; keyword.</source>
          <target state="translated">実装は、残りの実装で使用できるタイプと存続期間のパラメーターを取ることができます。実装用に宣言された型パラメーターは、実装の特性または実装タイプのいずれかで少なくとも1回使用する必要があります。実装パラメーターは、 &lt;code&gt;impl&lt;/code&gt; キーワードの直後に書き込まれます。</target>
        </trans-unit>
        <trans-unit id="7debed941ec31b919fee56e16fed7f3d43603fb5" translate="yes" xml:space="preserve">
          <source>An implementation cannot be chosen unambiguously because of lack of information.</source>
          <target state="translated">情報が不足しているからといって、曖昧に実装を選択することはできません。</target>
        </trans-unit>
        <trans-unit id="5c1c04198ba70d5ee214d020749cca1de7fc7d00" translate="yes" xml:space="preserve">
          <source>An implementation of &lt;code&gt;Alloc&lt;/code&gt; can allocate, reallocate, and deallocate arbitrary blocks of data described via &lt;code&gt;Layout&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Alloc&lt;/code&gt; の実装は、 &lt;code&gt;Layout&lt;/code&gt; を介して記述されたデータの任意のブロックを割り当て、再割り当て、および割り当て解除できます。</target>
        </trans-unit>
        <trans-unit id="da7ec04c76427d5dd969fd2e136866257e58eb1e" translate="yes" xml:space="preserve">
          <source>An implementation of &lt;code&gt;AllocRef&lt;/code&gt; can allocate, grow, shrink, and deallocate arbitrary blocks of data described via &lt;a href=&quot;struct.layout&quot;&gt;&lt;code&gt;Layout&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">An implementation of &lt;code&gt;AllocRef&lt;/code&gt; can allocate, grow, shrink, and deallocate arbitrary blocks of data described via &lt;a href=&quot;struct.layout&quot;&gt; &lt;code&gt;Layout&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="baf455213042b2250778e00516f43e9464f4756f" translate="yes" xml:space="preserve">
          <source>An implementation of &lt;code&gt;Allocator&lt;/code&gt; can allocate, grow, shrink, and deallocate arbitrary blocks of data described via &lt;a href=&quot;struct.layout&quot;&gt;&lt;code&gt;Layout&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99623634884bf4add6cdc497873712ce416c8fd4" translate="yes" xml:space="preserve">
          <source>An implementation of &lt;code&gt;BitAnd&lt;/code&gt; for a wrapper around &lt;code&gt;Vec&amp;lt;bool&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Vec&amp;lt;bool&amp;gt;&lt;/code&gt; ラッパー用の &lt;code&gt;BitAnd&lt;/code&gt; の実装。</target>
        </trans-unit>
        <trans-unit id="0e2ff6912f2ce30546aa9104a9c9d196708332bf" translate="yes" xml:space="preserve">
          <source>An implementation of &lt;code&gt;BitAnd&lt;/code&gt; for a wrapper around &lt;code&gt;bool&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;bool&lt;/code&gt; のラッパー用の &lt;code&gt;BitAnd&lt;/code&gt; の実装。</target>
        </trans-unit>
        <trans-unit id="5f6dfa411cba86305e5e9cd742f9f63d63776e67" translate="yes" xml:space="preserve">
          <source>An implementation of &lt;code&gt;BitAndAssign&lt;/code&gt; that lifts the &lt;code&gt;&amp;amp;=&lt;/code&gt; operator to a wrapper around &lt;code&gt;bool&lt;/code&gt;.</source>
          <target state="translated">実装 &lt;code&gt;BitAndAssign&lt;/code&gt; リフト &lt;code&gt;&amp;amp;=&lt;/code&gt; ラッパーにオペレータを &lt;code&gt;bool&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b3e86b6af5dd68737dcc690c4ff3a487a1934868" translate="yes" xml:space="preserve">
          <source>An implementation of &lt;code&gt;BitOr&lt;/code&gt; for a wrapper around &lt;code&gt;Vec&amp;lt;bool&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Vec&amp;lt;bool&amp;gt;&lt;/code&gt; ラッパー用の &lt;code&gt;BitOr&lt;/code&gt; の実装。</target>
        </trans-unit>
        <trans-unit id="e8149ba6d1631c707939091192745b37494deb7b" translate="yes" xml:space="preserve">
          <source>An implementation of &lt;code&gt;BitOr&lt;/code&gt; for a wrapper around &lt;code&gt;bool&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;bool&lt;/code&gt; のラッパー用の &lt;code&gt;BitOr&lt;/code&gt; の実装。</target>
        </trans-unit>
        <trans-unit id="ce43f6aba41bb7af32e0d6e55432c6b3ca8d7e1a" translate="yes" xml:space="preserve">
          <source>An implementation of &lt;code&gt;BitXor&lt;/code&gt; that lifts &lt;code&gt;^&lt;/code&gt; to a wrapper around &lt;code&gt;bool&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;^&lt;/code&gt; を &lt;code&gt;bool&lt;/code&gt; のラッパーに引き上げる &lt;code&gt;BitXor&lt;/code&gt; の実装。</target>
        </trans-unit>
        <trans-unit id="65cb4db18d08218407844613de42d9029080f521" translate="yes" xml:space="preserve">
          <source>An implementation of &lt;code&gt;BitXor&lt;/code&gt; trait for a wrapper around &lt;code&gt;Vec&amp;lt;bool&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Vec&amp;lt;bool&amp;gt;&lt;/code&gt; ラッパー用の &lt;code&gt;BitXor&lt;/code&gt; トレイトの実装。</target>
        </trans-unit>
        <trans-unit id="b5b904d460aff616075d9ff33295d995d4012b99" translate="yes" xml:space="preserve">
          <source>An implementation of &lt;code&gt;Neg&lt;/code&gt; for &lt;code&gt;Sign&lt;/code&gt;, which allows the use of &lt;code&gt;-&lt;/code&gt; to negate its value.</source>
          <target state="translated">実装 &lt;code&gt;Neg&lt;/code&gt; のための &lt;code&gt;Sign&lt;/code&gt; の使用を可能にし、 &lt;code&gt;-&lt;/code&gt; その価値を否定します。</target>
        </trans-unit>
        <trans-unit id="873b42d4cd981f821fbfc718a707b146669b45da" translate="yes" xml:space="preserve">
          <source>An implementation of &lt;code&gt;Not&lt;/code&gt; for &lt;code&gt;Answer&lt;/code&gt;, which enables the use of &lt;code&gt;!&lt;/code&gt; to invert its value.</source>
          <target state="translated">&lt;code&gt;Not&lt;/code&gt; for &lt;code&gt;Answer&lt;/code&gt; の実装。これにより、 &lt;code&gt;!&lt;/code&gt; その値を反転します。</target>
        </trans-unit>
        <trans-unit id="b6ef2365698efd5099fd68eb5d996513953b40b7" translate="yes" xml:space="preserve">
          <source>An implementation of &lt;code&gt;Shl&lt;/code&gt; that lifts the &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; operation on integers to a wrapper around &lt;code&gt;usize&lt;/code&gt;.</source>
          <target state="translated">実装 &lt;code&gt;Shl&lt;/code&gt; リフト &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; ラッパーに整数に対する操作を &lt;code&gt;usize&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8e679f132f9bdc673ab7525c566b308cef626454" translate="yes" xml:space="preserve">
          <source>An implementation of &lt;code&gt;Shl&lt;/code&gt; that spins a vector leftward by a given amount.</source>
          <target state="translated">&lt;code&gt;Shl&lt;/code&gt; の実装で、指定された量だけベクトルを左にスピンします。</target>
        </trans-unit>
        <trans-unit id="4b9ea2f9d110fb7b7d2e508e8eb895f2a6c76af4" translate="yes" xml:space="preserve">
          <source>An implementation of &lt;code&gt;ShlAssign&lt;/code&gt; for a wrapper around &lt;code&gt;usize&lt;/code&gt;.</source>
          <target state="translated">実装 &lt;code&gt;ShlAssign&lt;/code&gt; ラッパーのため &lt;code&gt;usize&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fdc99f650e402a714069613aef9bb0ab1a03fe00" translate="yes" xml:space="preserve">
          <source>An implementation of &lt;code&gt;Shr&lt;/code&gt; that lifts the &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; operation on integers to a wrapper around &lt;code&gt;usize&lt;/code&gt;.</source>
          <target state="translated">実装 &lt;code&gt;Shr&lt;/code&gt; リフト &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; ラッパーに整数に対する操作を &lt;code&gt;usize&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="00b6c1f0f935bcc3f078a1d4c1fb779815701d8c" translate="yes" xml:space="preserve">
          <source>An implementation of &lt;code&gt;Shr&lt;/code&gt; that spins a vector rightward by a given amount.</source>
          <target state="translated">&lt;code&gt;Shr&lt;/code&gt; の実装で、指定された量だけベクトルを右にスピンします。</target>
        </trans-unit>
        <trans-unit id="fef3f9c26a074ccf18bb7e56e8695a2a73f26459" translate="yes" xml:space="preserve">
          <source>An implementation of &lt;code&gt;ShrAssign&lt;/code&gt; for a wrapper around &lt;code&gt;usize&lt;/code&gt;.</source>
          <target state="translated">実装 &lt;code&gt;ShrAssign&lt;/code&gt; ラッパーのため &lt;code&gt;usize&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f0109084bf6e2896150bb542f8a8637f2cff32f1" translate="yes" xml:space="preserve">
          <source>An implementation of &lt;code&gt;poll&lt;/code&gt; should strive to return quickly, and should not block. Returning quickly prevents unnecessarily clogging up threads or event loops. If it is known ahead of time that a call to &lt;code&gt;poll&lt;/code&gt; may end up taking awhile, the work should be offloaded to a thread pool (or something similar) to ensure that &lt;code&gt;poll&lt;/code&gt; can return quickly.</source>
          <target state="translated">&lt;code&gt;poll&lt;/code&gt; の実装は、迅速に戻るよう努めるべきであり、妨害してはなりません。すばやく戻ることで、スレッドやイベントループが不必要に詰まるのを防ぎます。 &lt;code&gt;poll&lt;/code&gt; 呼び出しに時間がかかることが事前にわかっている場合は、 &lt;code&gt;poll&lt;/code&gt; を迅速に返すことができるように、作業をスレッドプール（または類似のもの）にオフロードする必要があります。</target>
        </trans-unit>
        <trans-unit id="350059cec8495b6fd084c91dd06a8c1a8c6277a2" translate="yes" xml:space="preserve">
          <source>An implementation of SipHash 2-4.</source>
          <target state="translated">SipHash 2-4の実装。</target>
        </trans-unit>
        <trans-unit id="8a3dd636510b68fa6befc892111d7637911e62f8" translate="yes" xml:space="preserve">
          <source>An implementation of a trait doesn't match the type constraint.</source>
          <target state="translated">形質の実装が型制約にマッチしません。</target>
        </trans-unit>
        <trans-unit id="a7c410f2271131f6e26f4c1a6c01fb2def54994c" translate="yes" xml:space="preserve">
          <source>An import was unresolved.</source>
          <target state="translated">インポートが解決されませんでした。</target>
        </trans-unit>
        <trans-unit id="29610251a6990ca267c18a3b17be65ef65d80c1f" translate="yes" xml:space="preserve">
          <source>An important part of the process of learning Rust is learning how to read the error messages the compiler displays: these will guide you toward working code. As such, we&amp;rsquo;ll provide many examples that don&amp;rsquo;t compile along with the error message the compiler will show you in each situation. Know that if you enter and run a random example, it may not compile! Make sure you read the surrounding text to see whether the example you&amp;rsquo;re trying to run is meant to error. Ferris will also help you distinguish code that isn&amp;rsquo;t meant to work:</source>
          <target state="translated">Rustを学習するプロセスの重要な部分は、コンパイラーが表示するエラーメッセージの読み方を学ぶことです。これらは、コードを機能させるためのガイドになります。そのため、コンパイルできない多くの例と、コンパイラがそれぞれの状況で表示するエラーメッセージを提供します。ランダムな例を入力して実行すると、コンパイルされない可能性があることに注意してください。周囲のテキストを読んで、実行しようとしている例がエラーを意味するものかどうかを確認してください。Ferrisは、機能しないコードを区別するのにも役立ちます。</target>
        </trans-unit>
        <trans-unit id="9068331ccd5e98287382db124205efdfb79f7cfb" translate="yes" xml:space="preserve">
          <source>An important thing to remember is that the type &lt;code&gt;fmt::Error&lt;/code&gt; should not be confused with &lt;a href=&quot;../io/struct.error&quot;&gt;&lt;code&gt;std::io::Error&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../error/trait.error&quot;&gt;&lt;code&gt;std::error::Error&lt;/code&gt;&lt;/a&gt;, which you may also have in scope.</source>
          <target state="translated">覚えておくべき重要なことは、タイプ &lt;code&gt;fmt::Error&lt;/code&gt; を&lt;a href=&quot;../io/struct.error&quot;&gt; &lt;code&gt;std::io::Error&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;../error/trait.error&quot;&gt; &lt;code&gt;std::error::Error&lt;/code&gt; &lt;/a&gt;と混同しないでください。これらもスコープ内にある可能性があります。</target>
        </trans-unit>
        <trans-unit id="8f9e81cf6c354fdfd3e66804e1f412009da97856" translate="yes" xml:space="preserve">
          <source>An inclusive bound.</source>
          <target state="translated">インクルーシブバインド。</target>
        </trans-unit>
        <trans-unit id="192433a73b5ee226652b56c2bf60e3939daf0558" translate="yes" xml:space="preserve">
          <source>An inclusive range needs an end in order to &lt;em&gt;include&lt;/em&gt; it. If you just need a start and no end, use a non-inclusive range (with &lt;code&gt;..&lt;/code&gt;):</source>
          <target state="translated">包括的範囲に&lt;em&gt;は、&lt;/em&gt;それを&lt;em&gt;含める&lt;/em&gt;ために終了が必要です。あなただけの開始と終わりが必要な場合は、（と非包括範囲を使用 &lt;code&gt;..&lt;/code&gt; ）：</target>
        </trans-unit>
        <trans-unit id="50920c083a024a331ce9d74584285d9788301b90" translate="yes" xml:space="preserve">
          <source>An inclusive range was used with no end.</source>
          <target state="translated">インクルーシブな範囲をエンドレスで使用していました。</target>
        </trans-unit>
        <trans-unit id="387b0473c559329b38860546da1e2cce85651e8f" translate="yes" xml:space="preserve">
          <source>An incompatible cast was attempted.</source>
          <target state="translated">相性の悪いキャストが試みられた。</target>
        </trans-unit>
        <trans-unit id="890a9e60cf506bc22c185b6e6eaa04f58d616d41" translate="yes" xml:space="preserve">
          <source>An incorrect number of generic arguments were provided.</source>
          <target state="translated">一般的な引数の数が正しくありませんでした。</target>
        </trans-unit>
        <trans-unit id="3ffd66f253621f41011842348ba63bd0896ca4ec" translate="yes" xml:space="preserve">
          <source>An incorrect visibility restriction was specified.</source>
          <target state="translated">不正な可視性制限が指定されました。</target>
        </trans-unit>
        <trans-unit id="c9900f693c2e1b5744366ed3318b36a718fcf770" translate="yes" xml:space="preserve">
          <source>An infinite endpoint. Indicates that there is no bound in this direction.</source>
          <target state="translated">無限の終点。この方向に境界がないことを示す。</target>
        </trans-unit>
        <trans-unit id="f2f7f4bb84396a832ec236ff6b02e7c811f6141c" translate="yes" xml:space="preserve">
          <source>An inherent implementation is defined as the sequence of the &lt;code&gt;impl&lt;/code&gt; keyword, generic type declarations, a path to a nominal type, a where clause, and a bracketed set of associable items.</source>
          <target state="translated">固有の実装は、 &lt;code&gt;impl&lt;/code&gt; キーワードのシーケンス、ジェネリック型宣言、名義型へのパス、where句、および関連付けられた一連の関連項目として定義されます。</target>
        </trans-unit>
        <trans-unit id="5e6c6207529ca7e8b2b41ce66b1a1399c7520ae8" translate="yes" xml:space="preserve">
          <source>An inherent implementation was defined for a type outside the current crate.</source>
          <target state="translated">固有の実装は、現在の木枠外の型に対して定義されました。</target>
        </trans-unit>
        <trans-unit id="506894b4a872753e6bf88eaab162c1ca6bc0d7d6" translate="yes" xml:space="preserve">
          <source>An inherent implementation was defined for something which isn't a struct, enum, union, or trait object.</source>
          <target state="translated">構造体、列挙、ユニオン、形質オブジェクトではないものに対して、固有の実装が定義されました。</target>
        </trans-unit>
        <trans-unit id="110853947b6a8113db0327e6e5f3081c7c63d981" translate="yes" xml:space="preserve">
          <source>An inherent implementation was marked unsafe.</source>
          <target state="translated">固有の実装は安全ではないとマークされていました。</target>
        </trans-unit>
        <trans-unit id="cb3f4eca6453d0b265cd70c611dfbbd1e320cc15" translate="yes" xml:space="preserve">
          <source>An inner doc comment was used in an invalid context.</source>
          <target state="translated">内部の doc コメントが無効なコンテキストで使用されました。</target>
        </trans-unit>
        <trans-unit id="eaca7587ab66134ebcc5c9d98dddc7a6d1b623fb" translate="yes" xml:space="preserve">
          <source>An instance of &lt;code&gt;DirEntry&lt;/code&gt; represents an entry inside of a directory on the filesystem. Each entry can be inspected via methods to learn about the full path or possibly other metadata through per-platform extension traits.</source>
          <target state="translated">&lt;code&gt;DirEntry&lt;/code&gt; のインスタンスは、ファイルシステム上のディレクトリ内のエントリを表します。各エントリをメソッドで検査して、プラットフォームごとの拡張機能の特性を介して、フルパスまたは場合によっては他のメタデータについて知ることができます。</target>
        </trans-unit>
        <trans-unit id="1fbc585e6de8e6bcaf356cf9f8023d57041f924e" translate="yes" xml:space="preserve">
          <source>An instance of &lt;code&gt;Layout&lt;/code&gt; describes a particular layout of memory. You build a &lt;code&gt;Layout&lt;/code&gt; up as an input to give to an allocator.</source>
          <target state="translated">&lt;code&gt;Layout&lt;/code&gt; のインスタンスは、メモリの特定のレイアウトを記述します。アロケータに与える入力として &lt;code&gt;Layout&lt;/code&gt; 作成します。</target>
        </trans-unit>
        <trans-unit id="b190fdcf2cbfcbc1313cacaba62570eb78c828a4" translate="yes" xml:space="preserve">
          <source>An instance of a &lt;code&gt;File&lt;/code&gt; can be read and/or written depending on what options it was opened with. Files also implement &lt;a href=&quot;../io/trait.seek&quot;&gt;&lt;code&gt;Seek&lt;/code&gt;&lt;/a&gt; to alter the logical cursor that the file contains internally.</source>
          <target state="translated">&lt;code&gt;File&lt;/code&gt; のインスタンスは、それを開いたときのオプションに応じて、読み取りまたは書き込み、あるいはその両方を行うことができます。ファイルは、ファイルに内部に含まれている論理カーソルを変更するための&lt;a href=&quot;../io/trait.seek&quot;&gt; &lt;code&gt;Seek&lt;/code&gt; &lt;/a&gt;も実装します。</target>
        </trans-unit>
        <trans-unit id="4022f91af4f41ee796badb832f4f942b0dd3666a" translate="yes" xml:space="preserve">
          <source>An integer (&lt;code&gt;i*&lt;/code&gt;/&lt;code&gt;u*&lt;/code&gt;), floating point value (&lt;code&gt;f*&lt;/code&gt;), or raw pointer obtained from &lt;a href=&quot;http://llvm.org/docs/LangRef.html#undefined-values&quot;&gt;uninitialized memory&lt;/a&gt;, or uninitialized memory in a &lt;code&gt;str&lt;/code&gt;.</source>
          <target state="translated">An integer ( &lt;code&gt;i*&lt;/code&gt; / &lt;code&gt;u*&lt;/code&gt; ), floating point value ( &lt;code&gt;f*&lt;/code&gt; ), or raw pointer obtained from &lt;a href=&quot;http://llvm.org/docs/LangRef.html#undefined-values&quot;&gt;uninitialized memory&lt;/a&gt;, or uninitialized memory in a &lt;code&gt;str&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="633635f22724539e9ddd7e7cb1e102a34d52eb44" translate="yes" xml:space="preserve">
          <source>An integer (&lt;code&gt;i*&lt;/code&gt;/&lt;code&gt;u*&lt;/code&gt;), floating point value (&lt;code&gt;f*&lt;/code&gt;), or raw pointer obtained from &lt;a href=&quot;https://llvm.org/docs/LangRef.html#undefined-values&quot;&gt;uninitialized memory&lt;/a&gt;, or uninitialized memory in a &lt;code&gt;str&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4459da0411b29eac8078029351bbb76f00d3282" translate="yes" xml:space="preserve">
          <source>An integer &lt;code&gt;.N&lt;/code&gt;:</source>
          <target state="translated">整数 &lt;code&gt;.N&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="908da2eafc06fe6ced0bd1b3ca560bd9a2e72aa4" translate="yes" xml:space="preserve">
          <source>An integer or name followed by dollar sign &lt;code&gt;.N$&lt;/code&gt;:</source>
          <target state="translated">整数または名前とそれに続くドル記号 &lt;code&gt;.N$&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="d652b1aec455b9a1399356989d1b6e7890b6c2cf" translate="yes" xml:space="preserve">
          <source>An integer that is known not to equal zero.</source>
          <target state="translated">ゼロと等しくないことがわかっている整数。</target>
        </trans-unit>
        <trans-unit id="23e972eabcd349c601672f385dadf7a600ee560a" translate="yes" xml:space="preserve">
          <source>An integer type which can be safely shared between threads.</source>
          <target state="translated">スレッド間で安全に共有できる整数型。</target>
        </trans-unit>
        <trans-unit id="7738cea88357f8684a294b13f985119f27bc796a" translate="yes" xml:space="preserve">
          <source>An intensity number from the user, which is specified when they request a workout to indicate whether they want a low-intensity workout or a high-intensity workout</source>
          <target state="translated">ユーザーがワークアウトを要求する際に指定する強度番号で、低強度のワークアウトか高強度のワークアウトのどちらを希望するかを示すために使用します。</target>
        </trans-unit>
        <trans-unit id="ff8d693a0bfcced7e1e8e51c1bf01052178e048b" translate="yes" xml:space="preserve">
          <source>An interface for dealing with iterators.</source>
          <target state="translated">イテレータを扱うためのインターフェイス。</target>
        </trans-unit>
        <trans-unit id="22e5648e52f9b0472e117269511bde8fb3cbbf6f" translate="yes" xml:space="preserve">
          <source>An internet socket address, either IPv4 or IPv6.</source>
          <target state="translated">IPv4 または IPv6 のいずれかのインターネットソケットアドレス。</target>
        </trans-unit>
        <trans-unit id="854d43a414a4b60a4e76077619d9f002787508df" translate="yes" xml:space="preserve">
          <source>An intrinsic is a function available for use in a given programming language whose implementation is handled specially by the compiler. In order to fix this error, just declare a function.</source>
          <target state="translated">内部関数とは、指定されたプログラミング言語で使用可能な関数のことで、その実装はコンパイラによって特別に処理されます。このエラーを修正するには、関数を宣言するだけです。</target>
        </trans-unit>
        <trans-unit id="0e442cff22b27f71ce2c2ce15532cf3a41eb6841" translate="yes" xml:space="preserve">
          <source>An intrinsic is a function available for use in a given programming language whose implementation is handled specially by the compiler. In order to fix this error, just declare a function. Example:</source>
          <target state="translated">内部関数とは、指定されたプログラミング言語で使用可能な関数のことで、その実装はコンパイラによって特別に処理されます。このエラーを修正するには、関数を宣言するだけです。例を挙げてみます。</target>
        </trans-unit>
        <trans-unit id="d4ed3f185066b7aaf4eec2eeca59086039ee692c" translate="yes" xml:space="preserve">
          <source>An intrinsic was declared without being a function.</source>
          <target state="translated">関数ではなく、本質的なものが宣言されていました。</target>
        </trans-unit>
        <trans-unit id="4c83eebd7c224b0a142aede3c5ec04a66d472405" translate="yes" xml:space="preserve">
          <source>An invalid &lt;code&gt;self&lt;/code&gt; import was made.</source>
          <target state="translated">無効な &lt;code&gt;self&lt;/code&gt; インポートが行われました。</target>
        </trans-unit>
        <trans-unit id="82555301e5ea450f3a2a3340087105706f32de3a" translate="yes" xml:space="preserve">
          <source>An invalid cast was attempted.</source>
          <target state="translated">無効なキャストが試みられました。</target>
        </trans-unit>
        <trans-unit id="03180be565388e3e9bc81cc13b92d02f2dbb9f6d" translate="yes" xml:space="preserve">
          <source>An invalid input operand constraint was passed to the &lt;code&gt;llvm_asm&lt;/code&gt; macro (third line).</source>
          <target state="translated">An invalid input operand constraint was passed to the &lt;code&gt;llvm_asm&lt;/code&gt; macro (third line).</target>
        </trans-unit>
        <trans-unit id="8c5bb35712d552d14538dee6299b1809a75931fc" translate="yes" xml:space="preserve">
          <source>An invalid left-hand side expression was used on an assignment operation.</source>
          <target state="translated">代入操作で無効な左側の式が使用されました。</target>
        </trans-unit>
        <trans-unit id="9a8cc59d01bca4002162d9e4ee195fba0f67e5eb" translate="yes" xml:space="preserve">
          <source>An invalid lint attribute has been given.</source>
          <target state="translated">無効な lint 属性が与えられました。</target>
        </trans-unit>
        <trans-unit id="b45ca9e360736d39967051ef73e9a974697dc538" translate="yes" xml:space="preserve">
          <source>An invalid lint attribute has been given. Erroneous code example:</source>
          <target state="translated">無効な lint 属性が指定されました。誤ったコード例です。</target>
        </trans-unit>
        <trans-unit id="7afc8f120588eda0a5e01c8b52b3b7d783b74baf" translate="yes" xml:space="preserve">
          <source>An invalid meta-item was used inside an attribute.</source>
          <target state="translated">無効なメタ項目が属性内で使用されました。</target>
        </trans-unit>
        <trans-unit id="381c4fb826f13d2ae3a70efbf639e550ce3d899e" translate="yes" xml:space="preserve">
          <source>An invalid name was used for a lifetime parameter.</source>
          <target state="translated">ライフタイム・パラメータに無効な名前が使用されました。</target>
        </trans-unit>
        <trans-unit id="ca168fbcb5da1644a515cf8441248863a3fd9251" translate="yes" xml:space="preserve">
          <source>An invalid number of arguments was given when calling a closure.</source>
          <target state="translated">クロージャを呼び出すときに無効な数の引数が与えられました。</target>
        </trans-unit>
        <trans-unit id="7d49fec3c8ae574bb2ce4cd00863f78f3ce2c2fa" translate="yes" xml:space="preserve">
          <source>An invalid number of arguments was passed when calling a function.</source>
          <target state="translated">関数を呼び出すときに無効な数の引数が渡されました。</target>
        </trans-unit>
        <trans-unit id="fd1272a4d79b74d35bfe264d5c84667b1b0428f6" translate="yes" xml:space="preserve">
          <source>An invalid number of type parameters was given to an intrinsic function.</source>
          <target state="translated">無効な数の型パラメータが本質的な関数に与えられました。</target>
        </trans-unit>
        <trans-unit id="cc8a5020b458d81f8e941d19c95ab2d679341b81" translate="yes" xml:space="preserve">
          <source>An invalid syntax was passed to the second argument of an &lt;code&gt;llvm_asm&lt;/code&gt; macro line.</source>
          <target state="translated">&lt;code&gt;llvm_asm&lt;/code&gt; マクロ行の2番目の引数に無効な構文が渡されました。</target>
        </trans-unit>
        <trans-unit id="a410192aae8c1c9efe2c778af8302870ee71f57b" translate="yes" xml:space="preserve">
          <source>An item usage is ambiguous.</source>
          <target state="translated">項目の使い方が曖昧です。</target>
        </trans-unit>
        <trans-unit id="b5e68274b8d847f0c6926331f1e39e6fca71b9fd" translate="yes" xml:space="preserve">
          <source>An item was added on a negative impl.</source>
          <target state="translated">マイナスインプに項目が追加されました。</target>
        </trans-unit>
        <trans-unit id="a6cc9e350b081b1e617d64ca09e5f7073fb94361" translate="yes" xml:space="preserve">
          <source>An item which isn't a unit struct, a variant, nor a constant has been used as a match pattern.</source>
          <target state="translated">ユニット構造体でもバリアントでも定数でもない項目が一致パターンとして使用されています。</target>
        </trans-unit>
        <trans-unit id="b44509fac7828279e76e0b5a94ab5171cb157956" translate="yes" xml:space="preserve">
          <source>An iterator able to yield elements from both ends.</source>
          <target state="translated">両端から要素を生成できるイテレータ。</target>
        </trans-unit>
        <trans-unit id="a79f20c0e35d15b48bb2797970d35b63c3629a31" translate="yes" xml:space="preserve">
          <source>An iterator adaptor similar to &lt;a href=&quot;#method.fold&quot;&gt;&lt;code&gt;fold&lt;/code&gt;&lt;/a&gt; that holds internal state and produces a new iterator.</source>
          <target state="translated">内部状態を保持し、新しいイテレーターを生成する、&lt;a href=&quot;#method.fold&quot;&gt; &lt;code&gt;fold&lt;/code&gt; に&lt;/a&gt;似たイテレーターアダプター。</target>
        </trans-unit>
        <trans-unit id="2e43d9b7345ad03f5ced2dcd31e711c42d237584" translate="yes" xml:space="preserve">
          <source>An iterator adaptor similar to &lt;a href=&quot;../../../iter/trait.iterator#method.fold&quot;&gt;&lt;code&gt;fold&lt;/code&gt;&lt;/a&gt; that holds internal state and produces a new iterator. &lt;a href=&quot;../../../iter/trait.iterator#method.scan&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">内部状態を保持し、新しいイテレータを生成する、&lt;a href=&quot;../../../iter/trait.iterator#method.fold&quot;&gt; &lt;code&gt;fold&lt;/code&gt; に&lt;/a&gt;似たイテレータアダプタ。&lt;a href=&quot;../../../iter/trait.iterator#method.scan&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="773601e7cb6c7b2cb91410d40c83395d2f5a2aba" translate="yes" xml:space="preserve">
          <source>An iterator adaptor similar to &lt;a href=&quot;../../iter/trait.iterator#method.fold&quot;&gt;&lt;code&gt;fold&lt;/code&gt;&lt;/a&gt; that holds internal state and produces a new iterator. &lt;a href=&quot;../../iter/trait.iterator#method.scan&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">内部状態を保持し、新しいイテレータを生成する、&lt;a href=&quot;../../iter/trait.iterator#method.fold&quot;&gt; &lt;code&gt;fold&lt;/code&gt; に&lt;/a&gt;似たイテレータアダプタ。&lt;a href=&quot;../../iter/trait.iterator#method.scan&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e8c9fb31213d58aac0ffdd0c9178139dd13dff6e" translate="yes" xml:space="preserve">
          <source>An iterator adaptor similar to &lt;a href=&quot;../iter/trait.iterator#method.fold&quot;&gt;&lt;code&gt;fold&lt;/code&gt;&lt;/a&gt; that holds internal state and produces a new iterator. &lt;a href=&quot;../iter/trait.iterator#method.scan&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">内部状態を保持し、新しいイテレータを生成する、&lt;a href=&quot;../iter/trait.iterator#method.fold&quot;&gt; &lt;code&gt;fold&lt;/code&gt; に&lt;/a&gt;似たイテレータアダプタ。&lt;a href=&quot;../iter/trait.iterator#method.scan&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="fabf413b8f61a0afd7c5f9433f5804c39c0d2697" translate="yes" xml:space="preserve">
          <source>An iterator adaptor similar to &lt;a href=&quot;iter/trait.iterator#method.fold&quot;&gt;&lt;code&gt;fold&lt;/code&gt;&lt;/a&gt; that holds internal state and produces a new iterator. &lt;a href=&quot;iter/trait.iterator#method.scan&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">内部状態を保持し、新しいイテレータを生成する、&lt;a href=&quot;iter/trait.iterator#method.fold&quot;&gt; &lt;code&gt;fold&lt;/code&gt; に&lt;/a&gt;似たイテレータアダプタ。&lt;a href=&quot;iter/trait.iterator#method.scan&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2d2199c2efde5116c38701a8b589ced48670c6b8" translate="yes" xml:space="preserve">
          <source>An iterator adaptor similar to &lt;a href=&quot;trait.iterator#method.fold&quot;&gt;&lt;code&gt;fold&lt;/code&gt;&lt;/a&gt; that holds internal state and produces a new iterator.</source>
          <target state="translated">内部状態を保持し、新しいイテレータを生成する、&lt;a href=&quot;trait.iterator#method.fold&quot;&gt; &lt;code&gt;fold&lt;/code&gt; に&lt;/a&gt;似たイテレータアダプタ。</target>
        </trans-unit>
        <trans-unit id="1597ff1cbb678de32b1737072c75c63f3cb34a01" translate="yes" xml:space="preserve">
          <source>An iterator adaptor similar to &lt;a href=&quot;trait.iterator#method.fold&quot;&gt;&lt;code&gt;fold&lt;/code&gt;&lt;/a&gt; that holds internal state and produces a new iterator. &lt;a href=&quot;trait.iterator#method.scan&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">内部状態を保持し、新しいイテレータを生成する、&lt;a href=&quot;trait.iterator#method.fold&quot;&gt; &lt;code&gt;fold&lt;/code&gt; に&lt;/a&gt;似たイテレータアダプタ。&lt;a href=&quot;trait.iterator#method.scan&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4f7d60e521538ea62f876d5c70c545dc3addec69" translate="yes" xml:space="preserve">
          <source>An iterator adaptor similar to [&lt;code&gt;fold&lt;/code&gt;] that holds internal state and produces a new iterator. &lt;a href=&quot;../../../iter/trait.iterator#method.scan&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">[ &lt;code&gt;fold&lt;/code&gt; ]に似た、内部状態を保持して新しい反復子を生成する反復子アダプター。&lt;a href=&quot;../../../iter/trait.iterator#method.scan&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7a650dc159a2fda49c7766be96685d0f790f13a0" translate="yes" xml:space="preserve">
          <source>An iterator adaptor similar to [&lt;code&gt;fold&lt;/code&gt;] that holds internal state and produces a new iterator. &lt;a href=&quot;../../iter/trait.iterator#method.scan&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">[ &lt;code&gt;fold&lt;/code&gt; ]に似た、内部状態を保持して新しい反復子を生成する反復子アダプター。&lt;a href=&quot;../../iter/trait.iterator#method.scan&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3e898bdaf274bb7754df65ccfb97b6bd04568d2d" translate="yes" xml:space="preserve">
          <source>An iterator adaptor similar to [&lt;code&gt;fold&lt;/code&gt;] that holds internal state and produces a new iterator. &lt;a href=&quot;../iter/trait.iterator#method.scan&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">[ &lt;code&gt;fold&lt;/code&gt; ]に似た、内部状態を保持して新しい反復子を生成する反復子アダプター。&lt;a href=&quot;../iter/trait.iterator#method.scan&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e2996431c0507a4a842fe331c88d08e4bb45dcce" translate="yes" xml:space="preserve">
          <source>An iterator adaptor similar to [&lt;code&gt;fold&lt;/code&gt;] that holds internal state and produces a new iterator. &lt;a href=&quot;iter/trait.iterator#method.scan&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">[ &lt;code&gt;fold&lt;/code&gt; ]に似た、内部状態を保持して新しい反復子を生成する反復子アダプター。&lt;a href=&quot;iter/trait.iterator#method.scan&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ae7a2ef58596a8f574790d9946d5c7b0d3e0427f" translate="yes" xml:space="preserve">
          <source>An iterator adaptor similar to [&lt;code&gt;fold&lt;/code&gt;] that holds internal state and produces a new iterator. &lt;a href=&quot;trait.iterator#method.scan&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">[ &lt;code&gt;fold&lt;/code&gt; ]に似た、内部状態を保持して新しい反復子を生成する反復子アダプター。&lt;a href=&quot;trait.iterator#method.scan&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9ad9db34c1f6ac7b97514886d275ac1277b33c65" translate="yes" xml:space="preserve">
          <source>An iterator for stepping iterators by a custom amount.</source>
          <target state="translated">カスタム量でステッピングするためのイテレータ。</target>
        </trans-unit>
        <trans-unit id="25debeb61a2ecc2a431e58a161838a09b915993a" translate="yes" xml:space="preserve">
          <source>An iterator has a method, &lt;a href=&quot;trait.iterator#tymethod.next&quot;&gt;&lt;code&gt;next&lt;/code&gt;&lt;/a&gt;, which when called, returns an &lt;a href=&quot;../option/enum.option&quot;&gt;&lt;code&gt;Option&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;Item&amp;gt;&lt;/code&gt;. &lt;a href=&quot;trait.iterator#tymethod.next&quot;&gt;&lt;code&gt;next&lt;/code&gt;&lt;/a&gt; will return &lt;a href=&quot;../option/enum.option#variant.Some&quot;&gt;&lt;code&gt;Some(Item)&lt;/code&gt;&lt;/a&gt; as long as there are elements, and once they've all been exhausted, will return &lt;code&gt;None&lt;/code&gt; to indicate that iteration is finished. Individual iterators may choose to resume iteration, and so calling &lt;a href=&quot;trait.iterator#tymethod.next&quot;&gt;&lt;code&gt;next&lt;/code&gt;&lt;/a&gt; again may or may not eventually start returning &lt;a href=&quot;../option/enum.option#variant.Some&quot;&gt;&lt;code&gt;Some(Item)&lt;/code&gt;&lt;/a&gt; again at some point (for example, see &lt;a href=&quot;../sync/mpsc/struct.tryiter&quot;&gt;&lt;code&gt;TryIter&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">イテレータにはメソッド&lt;a href=&quot;trait.iterator#tymethod.next&quot;&gt; &lt;code&gt;next&lt;/code&gt; &lt;/a&gt;があり、呼び出されると&lt;a href=&quot;../option/enum.option&quot;&gt; &lt;code&gt;Option&lt;/code&gt; &lt;/a&gt; &lt;code&gt;&amp;lt;Item&amp;gt;&lt;/code&gt; を返します。&lt;a href=&quot;trait.iterator#tymethod.next&quot;&gt; &lt;code&gt;next&lt;/code&gt; &lt;/a&gt;は、要素がある限り&lt;a href=&quot;../option/enum.option#variant.Some&quot;&gt; &lt;code&gt;Some(Item)&lt;/code&gt; &lt;/a&gt;を返し、要素がすべて使い果たされると、 &lt;code&gt;None&lt;/code&gt; を返し、反復が終了したことを示します。個々のイテレータは反復を再開することを選択できるため、&lt;a href=&quot;trait.iterator#tymethod.next&quot;&gt; &lt;code&gt;next&lt;/code&gt; を&lt;/a&gt;再度呼び出すと、ある時点で&lt;a href=&quot;../option/enum.option#variant.Some&quot;&gt; &lt;code&gt;Some(Item)&lt;/code&gt; が&lt;/a&gt;再び返される場合とされない場合があります（たとえば、&lt;a href=&quot;../sync/mpsc/struct.tryiter&quot;&gt; &lt;code&gt;TryIter&lt;/code&gt; を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="fb45f260d1289d4ddcd0c03f93e3cf026ce37b59" translate="yes" xml:space="preserve">
          <source>An iterator has a method, &lt;a href=&quot;trait.iterator#tymethod.next&quot;&gt;&lt;code&gt;next&lt;/code&gt;&lt;/a&gt;, which when called, returns an &lt;a href=&quot;../option/enum.option&quot;&gt;&lt;code&gt;Option&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;Item&amp;gt;&lt;/code&gt;. &lt;a href=&quot;trait.iterator#tymethod.next&quot;&gt;&lt;code&gt;next&lt;/code&gt;&lt;/a&gt; will return &lt;code&gt;Some(Item)&lt;/code&gt; as long as there are elements, and once they've all been exhausted, will return &lt;code&gt;None&lt;/code&gt; to indicate that iteration is finished. Individual iterators may choose to resume iteration, and so calling &lt;a href=&quot;trait.iterator#tymethod.next&quot;&gt;&lt;code&gt;next&lt;/code&gt;&lt;/a&gt; again may or may not eventually start returning &lt;code&gt;Some(Item)&lt;/code&gt; again at some point.</source>
          <target state="translated">イテレータにはメソッド&lt;a href=&quot;trait.iterator#tymethod.next&quot;&gt; &lt;code&gt;next&lt;/code&gt; &lt;/a&gt;があり、呼び出されると&lt;a href=&quot;../option/enum.option&quot;&gt; &lt;code&gt;Option&lt;/code&gt; &lt;/a&gt; &lt;code&gt;&amp;lt;Item&amp;gt;&lt;/code&gt; を返します。&lt;a href=&quot;trait.iterator#tymethod.next&quot;&gt; &lt;code&gt;next&lt;/code&gt; &lt;/a&gt;は、要素がある限り &lt;code&gt;Some(Item)&lt;/code&gt; を返します。要素がすべて使い果たされると、 &lt;code&gt;None&lt;/code&gt; を返し、反復が終了したことを示します。個々のイテレータは反復を再開することを選択する可能性があるため、&lt;a href=&quot;trait.iterator#tymethod.next&quot;&gt; &lt;code&gt;next&lt;/code&gt; を&lt;/a&gt;再度呼び出すと、ある時点で最終的に &lt;code&gt;Some(Item)&lt;/code&gt; が返されるようになる場合とそうでない場合があります。</target>
        </trans-unit>
        <trans-unit id="e31522f53dadc02b86f505f8fd01b611f6643e8b" translate="yes" xml:space="preserve">
          <source>An iterator method that applies a fallible function to each item in the iterator, stopping at the first error and returning that error.</source>
          <target state="translated">イテレータ内の各項目にフォールリブル関数を適用し、最初のエラーで停止してそのエラーを返すイテレータメソッド。</target>
        </trans-unit>
        <trans-unit id="eacb362cba384eacfe624626c78db089eba4406f" translate="yes" xml:space="preserve">
          <source>An iterator method that applies a fallible function to each item in the iterator, stopping at the first error and returning that error. &lt;a href=&quot;../../../iter/trait.iterator#method.try_for_each&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">イテレータの各項目に誤りのある関数を適用し、最初のエラーで停止してそのエラーを返すイテレータメソッド。&lt;a href=&quot;../../../iter/trait.iterator#method.try_for_each&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ca00c28d4b5a3134e86a3f660b2fa54093267401" translate="yes" xml:space="preserve">
          <source>An iterator method that applies a fallible function to each item in the iterator, stopping at the first error and returning that error. &lt;a href=&quot;../../iter/trait.iterator#method.try_for_each&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">イテレータの各項目に誤りのある関数を適用し、最初のエラーで停止してそのエラーを返すイテレータメソッド。&lt;a href=&quot;../../iter/trait.iterator#method.try_for_each&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e1489bd41c8525121e45484ed737c4171e974de0" translate="yes" xml:space="preserve">
          <source>An iterator method that applies a fallible function to each item in the iterator, stopping at the first error and returning that error. &lt;a href=&quot;../iter/trait.iterator#method.try_for_each&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">イテレータの各項目に誤りのある関数を適用し、最初のエラーで停止してそのエラーを返すイテレータメソッド。&lt;a href=&quot;../iter/trait.iterator#method.try_for_each&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="33c934134cacb66bd994968f86b620a631318b91" translate="yes" xml:space="preserve">
          <source>An iterator method that applies a fallible function to each item in the iterator, stopping at the first error and returning that error. &lt;a href=&quot;iter/trait.iterator#method.try_for_each&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">イテレータの各項目に誤りのある関数を適用し、最初のエラーで停止してそのエラーを返すイテレータメソッド。&lt;a href=&quot;iter/trait.iterator#method.try_for_each&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="19bfdbf913f10e6bc3776600b92d9135c032b4bf" translate="yes" xml:space="preserve">
          <source>An iterator method that applies a fallible function to each item in the iterator, stopping at the first error and returning that error. &lt;a href=&quot;trait.iterator#method.try_for_each&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">イテレータの各項目に誤りのある関数を適用し、最初のエラーで停止してそのエラーを返すイテレータメソッド。&lt;a href=&quot;trait.iterator#method.try_for_each&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3b59c2e3f2042ddc5a53ef66ef4d7b79f1fb5301" translate="yes" xml:space="preserve">
          <source>An iterator method that applies a function as long as it returns successfully, producing a single, final value.</source>
          <target state="translated">関数が正常に返される限り関数を適用し、1 つの最終的な値を生成するイテレータメソッド。</target>
        </trans-unit>
        <trans-unit id="117fd8070a23ba82f744d90c448b1e5813b4d282" translate="yes" xml:space="preserve">
          <source>An iterator method that applies a function as long as it returns successfully, producing a single, final value. &lt;a href=&quot;../../../iter/trait.iterator#method.try_fold&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">関数が正常に終了する限り関数を適用し、単一の最終値を生成する反復子メソッド。&lt;a href=&quot;../../../iter/trait.iterator#method.try_fold&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7ee1c8bd3a25e2ebef94ba8c0d6405c27ca7226b" translate="yes" xml:space="preserve">
          <source>An iterator method that applies a function as long as it returns successfully, producing a single, final value. &lt;a href=&quot;../../iter/trait.iterator#method.try_fold&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">関数が正常に終了する限り関数を適用し、単一の最終値を生成する反復子メソッド。&lt;a href=&quot;../../iter/trait.iterator#method.try_fold&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c658b3e624db269551bf93242408ef5c42e5fea9" translate="yes" xml:space="preserve">
          <source>An iterator method that applies a function as long as it returns successfully, producing a single, final value. &lt;a href=&quot;../iter/trait.iterator#method.try_fold&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">関数が正常に終了する限り関数を適用し、単一の最終値を生成する反復子メソッド。&lt;a href=&quot;../iter/trait.iterator#method.try_fold&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9a5362af3855236bb52258529c3514119a249eab" translate="yes" xml:space="preserve">
          <source>An iterator method that applies a function as long as it returns successfully, producing a single, final value. &lt;a href=&quot;iter/trait.iterator#method.try_fold&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">関数が正常に終了する限り関数を適用し、単一の最終値を生成する反復子メソッド。&lt;a href=&quot;iter/trait.iterator#method.try_fold&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="22eb23eabd6f5888b0f6233654a7d6b3279d1ac7" translate="yes" xml:space="preserve">
          <source>An iterator method that applies a function as long as it returns successfully, producing a single, final value. &lt;a href=&quot;trait.iterator#method.try_fold&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">関数が正常に終了する限り関数を適用し、単一の最終値を生成する反復子メソッド。&lt;a href=&quot;trait.iterator#method.try_fold&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9d551693bdcaedeac0547d596669a3c5c5179447" translate="yes" xml:space="preserve">
          <source>An iterator method that applies a function, producing a single, final value.</source>
          <target state="translated">関数を適用し、単一の最終値を生成するイテレータメソッド。</target>
        </trans-unit>
        <trans-unit id="31400216ecaba12666aff645bec4ca26c5ba43ea" translate="yes" xml:space="preserve">
          <source>An iterator method that applies a function, producing a single, final value. &lt;a href=&quot;../../../iter/trait.iterator#method.fold&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">関数を適用して単一の最終値を生成する反復子メソッド。&lt;a href=&quot;../../../iter/trait.iterator#method.fold&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="958c160388552a918125f55bba9e086f54f71484" translate="yes" xml:space="preserve">
          <source>An iterator method that applies a function, producing a single, final value. &lt;a href=&quot;../../iter/trait.iterator#method.fold&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">関数を適用して単一の最終値を生成する反復子メソッド。&lt;a href=&quot;../../iter/trait.iterator#method.fold&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5eddc2fc826e92b735803187068d19d4e441542e" translate="yes" xml:space="preserve">
          <source>An iterator method that applies a function, producing a single, final value. &lt;a href=&quot;../iter/trait.iterator#method.fold&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">関数を適用して単一の最終値を生成する反復子メソッド。&lt;a href=&quot;../iter/trait.iterator#method.fold&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="062b8bbee99bc123d00bd6ddb37a2091ecaee57f" translate="yes" xml:space="preserve">
          <source>An iterator method that applies a function, producing a single, final value. &lt;a href=&quot;iter/trait.iterator#method.fold&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">関数を適用して単一の最終値を生成する反復子メソッド。&lt;a href=&quot;iter/trait.iterator#method.fold&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="760ff7a591ac95e16cd7be5b9667ba1c820bc96e" translate="yes" xml:space="preserve">
          <source>An iterator method that applies a function, producing a single, final value. &lt;a href=&quot;trait.iterator#method.fold&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">関数を適用して単一の最終値を生成する反復子メソッド。&lt;a href=&quot;trait.iterator#method.fold&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e4cfaa2271cf9f33fe50ead23cff9cf9b29c2c97" translate="yes" xml:space="preserve">
          <source>An iterator method that reduces the iterator's elements to a single, final value, starting from the back.</source>
          <target state="translated">イテレータの要素を、後ろから始まる単一の最終的な値に縮小するイテレータメソッド。</target>
        </trans-unit>
        <trans-unit id="c9c712bf49f750f238c96785e7e704d976a72f0e" translate="yes" xml:space="preserve">
          <source>An iterator method that reduces the iterator's elements to a single, final value, starting from the back. &lt;a href=&quot;../../iter/trait.doubleendediterator#method.rfold&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">反復子の要素を後ろから開始して単一の最終値に減らす反復子メソッド。&lt;a href=&quot;../../iter/trait.doubleendediterator#method.rfold&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b44201682fdbcad5c8da77522b47e4b7fc4a3dc1" translate="yes" xml:space="preserve">
          <source>An iterator method that reduces the iterator's elements to a single, final value, starting from the back. &lt;a href=&quot;../iter/trait.doubleendediterator#method.rfold&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">反復子の要素を後ろから開始して単一の最終値に減らす反復子メソッド。&lt;a href=&quot;../iter/trait.doubleendediterator#method.rfold&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="fc53bae551d78289c9703ed2a397d1c3b35f285e" translate="yes" xml:space="preserve">
          <source>An iterator method that reduces the iterator's elements to a single, final value, starting from the back. &lt;a href=&quot;iter/trait.doubleendediterator#method.rfold&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">反復子の要素を後ろから開始して単一の最終値に減らす反復子メソッド。&lt;a href=&quot;iter/trait.doubleendediterator#method.rfold&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="836f4f2e3fffc61e14c382d8890f27b7a367beeb" translate="yes" xml:space="preserve">
          <source>An iterator method that reduces the iterator's elements to a single, final value, starting from the back. &lt;a href=&quot;trait.doubleendediterator#method.rfold&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">反復子の要素を後ろから開始して単一の最終値に減らす反復子メソッド。&lt;a href=&quot;trait.doubleendediterator#method.rfold&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b2acafc012d5ccce6e7696757b55337a6d4029a3" translate="yes" xml:space="preserve">
          <source>An iterator of &lt;a href=&quot;../primitive.u16&quot;&gt;&lt;code&gt;u16&lt;/code&gt;&lt;/a&gt; over the string encoded as UTF-16.</source>
          <target state="translated">UTF-16としてエンコードされた文字列に対する&lt;a href=&quot;../primitive.u16&quot;&gt; &lt;code&gt;u16&lt;/code&gt; &lt;/a&gt;のイテレータ。</target>
        </trans-unit>
        <trans-unit id="143fd7db785baccd8bb8346c04f451192a09006a" translate="yes" xml:space="preserve">
          <source>An iterator over &lt;a href=&quot;struct.path&quot;&gt;&lt;code&gt;Path&lt;/code&gt;&lt;/a&gt; and its ancestors.</source>
          <target state="translated">&lt;a href=&quot;struct.path&quot;&gt; &lt;code&gt;Path&lt;/code&gt; &lt;/a&gt;とその祖先に対するイテレータ。</target>
        </trans-unit>
        <trans-unit id="554dfaab9d83066a6b95354b7620556448cb3449" translate="yes" xml:space="preserve">
          <source>An iterator over &lt;a href=&quot;trait.error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;trait.error&quot;&gt; &lt;code&gt;Error&lt;/code&gt; &lt;/a&gt;に対するイテレータ</target>
        </trans-unit>
        <trans-unit id="aef63e9607a8ec1f5f596fca15621080fd76af72" translate="yes" xml:space="preserve">
          <source>An iterator over &lt;code&gt;u8&lt;/code&gt; values of a reader.</source>
          <target state="translated">リーダーの &lt;code&gt;u8&lt;/code&gt; 値に対するイテレータ。</target>
        </trans-unit>
        <trans-unit id="34e3362281b15b977d0a61ac8c5fcd00a6511c9c" translate="yes" xml:space="preserve">
          <source>An iterator over a mutable reference to the &lt;a href=&quot;enum.option#variant.Some&quot;&gt;&lt;code&gt;Some&lt;/code&gt;&lt;/a&gt; variant of an &lt;a href=&quot;enum.option&quot;&gt;&lt;code&gt;Option&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;enum.option&quot;&gt; &lt;code&gt;Option&lt;/code&gt; の&lt;/a&gt;&lt;a href=&quot;enum.option#variant.Some&quot;&gt; &lt;code&gt;Some&lt;/code&gt; &lt;/a&gt;バリアントへの変更可能な参照に対するイテレータ。</target>
        </trans-unit>
        <trans-unit id="c74c624cf35ae570735e4b7f11b57db582409878" translate="yes" xml:space="preserve">
          <source>An iterator over a mutable reference to the &lt;a href=&quot;enum.result#variant.Ok&quot;&gt;&lt;code&gt;Ok&lt;/code&gt;&lt;/a&gt; variant of a &lt;a href=&quot;enum.result&quot;&gt;&lt;code&gt;Result&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;enum.result&quot;&gt; &lt;code&gt;Result&lt;/code&gt; の&lt;/a&gt;&lt;a href=&quot;enum.result#variant.Ok&quot;&gt; &lt;code&gt;Ok&lt;/code&gt; &lt;/a&gt;バリアントへの可変参照に対するイテレータ。</target>
        </trans-unit>
        <trans-unit id="f4de84f3b1b68ec9fb8cadcc939ec573f412a94a" translate="yes" xml:space="preserve">
          <source>An iterator over a reference to the &lt;a href=&quot;enum.option#variant.Some&quot;&gt;&lt;code&gt;Some&lt;/code&gt;&lt;/a&gt; variant of an &lt;a href=&quot;enum.option&quot;&gt;&lt;code&gt;Option&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;enum.option&quot;&gt; &lt;code&gt;Option&lt;/code&gt; の&lt;/a&gt;&lt;a href=&quot;enum.option#variant.Some&quot;&gt; &lt;code&gt;Some&lt;/code&gt; &lt;/a&gt;バリアントへの参照に対するイテレータ。</target>
        </trans-unit>
        <trans-unit id="8cd69f81931caab64a8dceae843c42a8b1faa3e1" translate="yes" xml:space="preserve">
          <source>An iterator over a reference to the &lt;a href=&quot;enum.result#variant.Ok&quot;&gt;&lt;code&gt;Ok&lt;/code&gt;&lt;/a&gt; variant of a &lt;a href=&quot;enum.result&quot;&gt;&lt;code&gt;Result&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;enum.result&quot;&gt; &lt;code&gt;Result&lt;/code&gt; の&lt;/a&gt;&lt;a href=&quot;enum.result#variant.Ok&quot;&gt; &lt;code&gt;Ok&lt;/code&gt; &lt;/a&gt;バリアントへの参照に対するイテレータ。</target>
        </trans-unit>
        <trans-unit id="3dc6f80802c085f551ddaf86ddf6e8acc1dc310c" translate="yes" xml:space="preserve">
          <source>An iterator over a slice in (non-overlapping) chunks (&lt;code&gt;N&lt;/code&gt; elements at a time), starting at the beginning of the slice.</source>
          <target state="translated">スライスの先頭から開始して、（重複しない）チャンク（一度に &lt;code&gt;N&lt;/code&gt; 個の要素）内のスライス上のイテレーター。</target>
        </trans-unit>
        <trans-unit id="6d2aa423fb037ba3e42490b4a4869e7a989a8b38" translate="yes" xml:space="preserve">
          <source>An iterator over a slice in (non-overlapping) chunks (&lt;code&gt;chunk_size&lt;/code&gt; elements at a time), starting at the beginning of the slice.</source>
          <target state="translated">（重複しない）チャンク（一度に &lt;code&gt;chunk_size&lt;/code&gt; 要素）内のスライスの反復子。スライスの先頭から開始します。</target>
        </trans-unit>
        <trans-unit id="51ba4c3e078709e91115e94720e3b32e5a3519a2" translate="yes" xml:space="preserve">
          <source>An iterator over a slice in (non-overlapping) chunks (&lt;code&gt;chunk_size&lt;/code&gt; elements at a time), starting at the end of the slice.</source>
          <target state="translated">（重複しない）チャンク（一度に &lt;code&gt;chunk_size&lt;/code&gt; 要素）内のスライスの反復子。スライスの最後から開始します。</target>
        </trans-unit>
        <trans-unit id="d8851ef0d971f6cf3a6b130edee19da50b2e6eeb" translate="yes" xml:space="preserve">
          <source>An iterator over a slice in (non-overlapping) mutable chunks (&lt;code&gt;N&lt;/code&gt; elements at a time), starting at the beginning of the slice.</source>
          <target state="translated">スライスの先頭から開始して、（重複しない）可変チャンク（一度に &lt;code&gt;N&lt;/code&gt; 個の要素）内のスライス上のイテレーター。</target>
        </trans-unit>
        <trans-unit id="b727a794715c05c6c1c0cd0cd6149d40bd7c3a04" translate="yes" xml:space="preserve">
          <source>An iterator over a slice in (non-overlapping) mutable chunks (&lt;code&gt;chunk_size&lt;/code&gt; elements at a time), starting at the beginning of the slice.</source>
          <target state="translated">（重複しない）可変チャンク（一度に &lt;code&gt;chunk_size&lt;/code&gt; 要素）内のスライスの反復子。スライスの先頭から開始します。</target>
        </trans-unit>
        <trans-unit id="590e04be01e914183b27d18dc8eff4e3ae5668f0" translate="yes" xml:space="preserve">
          <source>An iterator over a slice in (non-overlapping) mutable chunks (&lt;code&gt;chunk_size&lt;/code&gt; elements at a time), starting at the end of the slice.</source>
          <target state="translated">（オーバーラップしない）可変チャンク（一度に &lt;code&gt;chunk_size&lt;/code&gt; 要素）内のスライスの反復子。スライスの最後から開始します。</target>
        </trans-unit>
        <trans-unit id="68ad6606a48079fe489aab3faf8c6e3a26b992ca" translate="yes" xml:space="preserve">
          <source>An iterator over a snapshot of the environment variables of this process.</source>
          <target state="translated">このプロセスの環境変数のスナップショット上のイテレータ。</target>
        </trans-unit>
        <trans-unit id="a94e3f24bb1eb1ba2fd58ebddc9b4d9dba8309a8" translate="yes" xml:space="preserve">
          <source>An iterator over a sub-range of entries in a &lt;code&gt;BTreeMap&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;BTreeMap&lt;/code&gt; のエントリのサブ範囲のイテレータ。</target>
        </trans-unit>
        <trans-unit id="d03569c5a9963027ad22996c9e0b70fb1554a87f" translate="yes" xml:space="preserve">
          <source>An iterator over a sub-range of items in a &lt;code&gt;BTreeSet&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;BTreeSet&lt;/code&gt; 内のアイテムのサブ範囲の反復子。</target>
        </trans-unit>
        <trans-unit id="ce0b01e77f645194e2b6b751858aec640161f669" translate="yes" xml:space="preserve">
          <source>An iterator over an &lt;a href=&quot;trait.error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; and its sources.</source>
          <target state="translated">&lt;a href=&quot;trait.error&quot;&gt; &lt;code&gt;Error&lt;/code&gt; &lt;/a&gt;とそのソースに対するイテレータ。</target>
        </trans-unit>
        <trans-unit id="f19c5dd669fe6f36f81a65798f7219d0079a694d" translate="yes" xml:space="preserve">
          <source>An iterator over incoming connections to a &lt;a href=&quot;struct.unixlistener&quot;&gt;&lt;code&gt;UnixListener&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;struct.unixlistener&quot;&gt; &lt;code&gt;UnixListener&lt;/code&gt; &lt;/a&gt;への着信接続に対するイテレータ。</target>
        </trans-unit>
        <trans-unit id="4d7488e2fccb6b43b42e67c9ea07cad9428b393b" translate="yes" xml:space="preserve">
          <source>An iterator over messages on a &lt;a href=&quot;struct.receiver&quot;&gt;&lt;code&gt;Receiver&lt;/code&gt;&lt;/a&gt;, created by &lt;a href=&quot;struct.receiver#method.iter&quot;&gt;&lt;code&gt;iter&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;struct.receiver#method.iter&quot;&gt; &lt;code&gt;iter&lt;/code&gt; &lt;/a&gt;によって作成された、&lt;a href=&quot;struct.receiver&quot;&gt; &lt;code&gt;Receiver&lt;/code&gt; &lt;/a&gt;上のメッセージに対するイテレータ。</target>
        </trans-unit>
        <trans-unit id="034a20701e995ae32aa63104e2d5dff0ab5db4e6" translate="yes" xml:space="preserve">
          <source>An iterator over overlapping subslices of length &lt;code&gt;size&lt;/code&gt;.</source>
          <target state="translated">長さ &lt;code&gt;size&lt;/code&gt; の重複するサブスライスの反復子。</target>
        </trans-unit>
        <trans-unit id="ba3bd9fb0e96735ece0b2069d478b585f0d8e7fe" translate="yes" xml:space="preserve">
          <source>An iterator over subslices separated by elements that match a predicate function, limited to a given number of splits, starting from the end of the slice.</source>
          <target state="translated">述語関数にマッチする要素で区切られたサブスライスを対象としたイテレータ.</target>
        </trans-unit>
        <trans-unit id="24b57b67d67808582aa0647134f85aea733abfd0" translate="yes" xml:space="preserve">
          <source>An iterator over subslices separated by elements that match a predicate function, limited to a given number of splits.</source>
          <target state="translated">述語関数にマッチする要素で区切られたサブスライスのイテレータ。</target>
        </trans-unit>
        <trans-unit id="7f751853b227571562b0215c1381b97b30029d0a" translate="yes" xml:space="preserve">
          <source>An iterator over subslices separated by elements that match a predicate function, starting from the end of the slice.</source>
          <target state="translated">述語関数にマッチする要素で区切られたサブスライスのイテレータ。</target>
        </trans-unit>
        <trans-unit id="6a41aa74d34fd0ce2985da917544c4f35cf020f9" translate="yes" xml:space="preserve">
          <source>An iterator over subslices separated by elements that match a predicate function.</source>
          <target state="translated">述語関数にマッチする要素で区切られたサブスライス上のイテレータ。</target>
        </trans-unit>
        <trans-unit id="e1f02e8fb3b3f7adf4ed8a711ed0b9c2ca4cda3e" translate="yes" xml:space="preserve">
          <source>An iterator over substrings of &lt;code&gt;self&lt;/code&gt;, separated by characters matched by a pattern and yielded in reverse order.</source>
          <target state="translated">パターンに一致する文字で区切られ、逆の順序で生成される &lt;code&gt;self&lt;/code&gt; の部分文字列の反復子。</target>
        </trans-unit>
        <trans-unit id="61c715ce9520941f9108744caef70fb9d86c6529" translate="yes" xml:space="preserve">
          <source>An iterator over substrings of the given string slice, separated by a pattern, restricted to returning at most &lt;code&gt;n&lt;/code&gt; items.</source>
          <target state="translated">パターンで区切られた、指定された文字列スライスの部分文字列に対するイテレータ。最大 &lt;code&gt;n&lt;/code&gt; 個のアイテムを返すように制限されています。</target>
        </trans-unit>
        <trans-unit id="44ffc34ab178359db4b3169f249d963fd153689b" translate="yes" xml:space="preserve">
          <source>An iterator over substrings of the given string slice, separated by characters matched by a pattern and yielded in reverse order.</source>
          <target state="translated">与えられた文字列スライスの部分文字列を、パターンにマッチした文字で区切って逆順に並べるイテレータ。</target>
        </trans-unit>
        <trans-unit id="f65e61a07278abe6a5b629cd21c031c73243b0de" translate="yes" xml:space="preserve">
          <source>An iterator over substrings of the given string slice, separated by characters matched by a pattern.</source>
          <target state="translated">指定された文字列スライスの部分文字列を、パターンにマッチした文字で区切ってイテレータします。</target>
        </trans-unit>
        <trans-unit id="537813cfc78da0abdca4b435c9341ecf42939302" translate="yes" xml:space="preserve">
          <source>An iterator over substrings of this string slice, separated by a pattern, starting from the end of the string, restricted to returning at most &lt;code&gt;n&lt;/code&gt; items.</source>
          <target state="translated">文字列の末尾から開始してパターンで区切られた、この文字列スライスの部分文字列の反復子。最大 &lt;code&gt;n&lt;/code&gt; 個のアイテムを返すように制限されています。</target>
        </trans-unit>
        <trans-unit id="02d9a6b83a0665db88c523e6eaff227f1f6e5ae9" translate="yes" xml:space="preserve">
          <source>An iterator over substrings of this string slice, separated by characters matched by a pattern.</source>
          <target state="translated">パターンにマッチした文字で区切られた、この文字列スライスの部分文字列に対するイテレータ。</target>
        </trans-unit>
        <trans-unit id="a2052e6e3b1c0165802cd6417a16b0838afc588a" translate="yes" xml:space="preserve">
          <source>An iterator over substrings of this string slice, separated by characters matched by a pattern. Differs from the iterator produced by &lt;code&gt;split&lt;/code&gt; in that &lt;code&gt;split_inclusive&lt;/code&gt; leaves the matched part as the terminator of the substring.</source>
          <target state="translated">パターンに一致する文字で区切られた、この文字列スライスの部分文字列に対するイテレータ。 &lt;code&gt;split_inclusive&lt;/code&gt; が部分文字列のターミネーターとして一致した部分を残すという点で、 &lt;code&gt;split&lt;/code&gt; によって生成されたイテレーターとは異なります。</target>
        </trans-unit>
        <trans-unit id="0ef8a4c9f98576b84451f0afffc7c456b9562b40" translate="yes" xml:space="preserve">
          <source>An iterator over the &lt;a href=&quot;../primitive.char&quot;&gt;&lt;code&gt;char&lt;/code&gt;&lt;/a&gt;s of a string slice, and their positions.</source>
          <target state="translated">文字列スライスの&lt;a href=&quot;../primitive.char&quot;&gt; &lt;code&gt;char&lt;/code&gt; &lt;/a&gt;とその位置の反復子。</target>
        </trans-unit>
        <trans-unit id="6dbafa08f3b2b12e80351b71ca200a8528053590" translate="yes" xml:space="preserve">
          <source>An iterator over the &lt;a href=&quot;../primitive.char&quot;&gt;&lt;code&gt;char&lt;/code&gt;&lt;/a&gt;s of a string slice.</source>
          <target state="translated">文字列スライスの&lt;a href=&quot;../primitive.char&quot;&gt; &lt;code&gt;char&lt;/code&gt; &lt;/a&gt;のイテレータ。</target>
        </trans-unit>
        <trans-unit id="94f1d147d9aa55e9343a89220481dd294b3c1ca7" translate="yes" xml:space="preserve">
          <source>An iterator over the &lt;a href=&quot;enum.component&quot;&gt;&lt;code&gt;Component&lt;/code&gt;&lt;/a&gt;s of a &lt;a href=&quot;struct.path&quot;&gt;&lt;code&gt;Path&lt;/code&gt;&lt;/a&gt;, as &lt;a href=&quot;../ffi/struct.osstr&quot;&gt;&lt;code&gt;OsStr&lt;/code&gt;&lt;/a&gt; slices.</source>
          <target state="translated">&lt;a href=&quot;../ffi/struct.osstr&quot;&gt; &lt;code&gt;OsStr&lt;/code&gt; &lt;/a&gt;スライスとしての&lt;a href=&quot;struct.path&quot;&gt; &lt;code&gt;Path&lt;/code&gt; の&lt;/a&gt;&lt;a href=&quot;enum.component&quot;&gt; &lt;code&gt;Component&lt;/code&gt; &lt;/a&gt;のイテレータ。</target>
        </trans-unit>
        <trans-unit id="81b7c7eac770fb32d5f49a8fa6788046e188a635" translate="yes" xml:space="preserve">
          <source>An iterator over the &lt;a href=&quot;enum.component&quot;&gt;&lt;code&gt;Component&lt;/code&gt;&lt;/a&gt;s of a &lt;a href=&quot;struct.path&quot;&gt;&lt;code&gt;Path&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;struct.path&quot;&gt; &lt;code&gt;Path&lt;/code&gt; の&lt;/a&gt;&lt;a href=&quot;enum.component&quot;&gt; &lt;code&gt;Component&lt;/code&gt; &lt;/a&gt;のイテレータ。</target>
        </trans-unit>
        <trans-unit id="0046da9ead2fd2c36a6a2fa82a2d2ece3e53ebf5" translate="yes" xml:space="preserve">
          <source>An iterator over the arguments of a process, yielding a &lt;a href=&quot;../string/struct.string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; value for each argument.</source>
          <target state="translated">プロセスの引数に対するイテレータ。各引数の&lt;a href=&quot;../string/struct.string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;値を生成します。</target>
        </trans-unit>
        <trans-unit id="ebb5d1c5d63504b0108ad325cad0bf7d2676c9ed" translate="yes" xml:space="preserve">
          <source>An iterator over the arguments of a process, yielding an &lt;a href=&quot;../ffi/struct.osstring&quot;&gt;&lt;code&gt;OsString&lt;/code&gt;&lt;/a&gt; value for each argument.</source>
          <target state="translated">プロセスの引数の反復子。各引数の&lt;a href=&quot;../ffi/struct.osstring&quot;&gt; &lt;code&gt;OsString&lt;/code&gt; &lt;/a&gt;値を生成します。</target>
        </trans-unit>
        <trans-unit id="db156c74a7f7733ec8d2fb32dcfb0fa41d392992" translate="yes" xml:space="preserve">
          <source>An iterator over the bytes of a string slice.</source>
          <target state="translated">文字列スライスのバイトに対するイテレータ。</target>
        </trans-unit>
        <trans-unit id="3d759394e80e7fa435aa3e0e0304961fda1ff609" translate="yes" xml:space="preserve">
          <source>An iterator over the command arguments.</source>
          <target state="translated">コマンド引数のイテレータ。</target>
        </trans-unit>
        <trans-unit id="bc24e95b2a3b7911eb4e4a74052e9fbce963a97d" translate="yes" xml:space="preserve">
          <source>An iterator over the command environment variables.</source>
          <target state="translated">コマンド環境変数のイテレータ。</target>
        </trans-unit>
        <trans-unit id="e870ff1a2a9d31100b2ac9cb6ffbae140349bbde" translate="yes" xml:space="preserve">
          <source>An iterator over the contents of an instance of &lt;code&gt;BufRead&lt;/code&gt; split on a particular byte.</source>
          <target state="translated">特定のバイトで分割された &lt;code&gt;BufRead&lt;/code&gt; のインスタンスの内容に対する反復子。</target>
        </trans-unit>
        <trans-unit id="df77d35e2c4e122e560661a4bc012ddb30bf89c7" translate="yes" xml:space="preserve">
          <source>An iterator over the disjoint matches of a pattern within &lt;code&gt;self&lt;/code&gt;, yielded in reverse order along with the index of the match.</source>
          <target state="translated">一致のインデックスと逆の順序で生成された、 &lt;code&gt;self&lt;/code&gt; 内のパターンの素の一致に対する反復子。</target>
        </trans-unit>
        <trans-unit id="f7d549ea470a7ac3f5b7f05549ca71296a3cf479" translate="yes" xml:space="preserve">
          <source>An iterator over the disjoint matches of a pattern within the given string slice.</source>
          <target state="translated">与えられた文字列スライス内のパターンの不連続マッチに対するイテレータ.</target>
        </trans-unit>
        <trans-unit id="4e8c4e320605a2ab4ab8ef1e11e40919b14ac665" translate="yes" xml:space="preserve">
          <source>An iterator over the disjoint matches of a pattern within this string slice as well as the index that the match starts at.</source>
          <target state="translated">この文字列スライス内のパターンの不連続マッチとマッチの開始位置のインデックスのイテレータ。</target>
        </trans-unit>
        <trans-unit id="bf644211cc86eb9babefe771489adf416b34d943" translate="yes" xml:space="preserve">
          <source>An iterator over the disjoint matches of a pattern within this string slice, yielded in reverse order.</source>
          <target state="translated">この文字列スライス内のパターンの不連続マッチを逆順に処理するイテレータです。</target>
        </trans-unit>
        <trans-unit id="a4b7288e219c65d73a3e6a54b4428c628926ca26" translate="yes" xml:space="preserve">
          <source>An iterator over the elements of a &lt;code&gt;BinaryHeap&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;BinaryHeap&lt;/code&gt; の要素に対するイテレータ。</target>
        </trans-unit>
        <trans-unit id="60a4b99de7b2aa615fb862b4ef6662bf265a07b3" translate="yes" xml:space="preserve">
          <source>An iterator over the elements of a &lt;code&gt;LinkedList&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;LinkedList&lt;/code&gt; の要素に対するイテレータ。</target>
        </trans-unit>
        <trans-unit id="2f97f18a1c5aa5746176c6f51c4eafd84be2fce3" translate="yes" xml:space="preserve">
          <source>An iterator over the elements of a &lt;code&gt;VecDeque&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;VecDeque&lt;/code&gt; の要素のイテレータ。</target>
        </trans-unit>
        <trans-unit id="91db6e4ce90dbed18c33044e96c535db60789527" translate="yes" xml:space="preserve">
          <source>An iterator over the entries of a &lt;code&gt;BTreeMap&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;BTreeMap&lt;/code&gt; のエントリに対するイテレータ。</target>
        </trans-unit>
        <trans-unit id="89075f098d105168914ad089684eab6ab82bd15c" translate="yes" xml:space="preserve">
          <source>An iterator over the entries of a &lt;code&gt;HashMap&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;HashMap&lt;/code&gt; のエントリに対するイテレータ。</target>
        </trans-unit>
        <trans-unit id="6598ccbf021650c51246c68845640e9702eed23d" translate="yes" xml:space="preserve">
          <source>An iterator over the escaped version of a byte.</source>
          <target state="translated">バイトのエスケープされたバージョンのイテレータ。</target>
        </trans-unit>
        <trans-unit id="56eb86799cc14570dbdb72543cfaf21c05c1abe2" translate="yes" xml:space="preserve">
          <source>An iterator over the items of a &lt;code&gt;BTreeSet&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;BTreeSet&lt;/code&gt; の項目のイテレータ。</target>
        </trans-unit>
        <trans-unit id="d5fd2e8685f9eef9092473bf82703d995770cb96" translate="yes" xml:space="preserve">
          <source>An iterator over the items of a &lt;code&gt;HashSet&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;HashSet&lt;/code&gt; のアイテムのイテレータ。</target>
        </trans-unit>
        <trans-unit id="c8ce67dcd74b8165190d1c5586f09c2e5112934e" translate="yes" xml:space="preserve">
          <source>An iterator over the keys of a &lt;code&gt;BTreeMap&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;BTreeMap&lt;/code&gt; のキーのイテレータ。</target>
        </trans-unit>
        <trans-unit id="6ab13d3c24ccbf1b667994220cf1ff47151b518f" translate="yes" xml:space="preserve">
          <source>An iterator over the keys of a &lt;code&gt;HashMap&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;HashMap&lt;/code&gt; のキーに対するイテレータ。</target>
        </trans-unit>
        <trans-unit id="bdb3c68f21440272514f422ef05c2d524b30604a" translate="yes" xml:space="preserve">
          <source>An iterator over the lines of a string, as string slices.</source>
          <target state="translated">文字列の行を文字列スライスとして扱うイテレータ。</target>
        </trans-unit>
        <trans-unit id="47a35066a39c1ed7b30ce9f4878b660c0a1e7474" translate="yes" xml:space="preserve">
          <source>An iterator over the lines of a string.</source>
          <target state="translated">文字列の行の上のイテレータ。</target>
        </trans-unit>
        <trans-unit id="4cce7f5b74c3be64996357d548c448d7d2f4462a" translate="yes" xml:space="preserve">
          <source>An iterator over the lines of an instance of &lt;code&gt;BufRead&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;BufRead&lt;/code&gt; のインスタンスの行に対するイテレータ。</target>
        </trans-unit>
        <trans-unit id="cc70893f07fa207bd53da767c3e857dc38ff1063" translate="yes" xml:space="preserve">
          <source>An iterator over the mutable subslices of the vector which are separated by elements that match &lt;code&gt;pred&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;pred&lt;/code&gt; に一致する要素で区切られたベクトルの可変サブスライスに対するイテレータ。</target>
        </trans-unit>
        <trans-unit id="a3ce41435c2e05d485713b80e3d67f84041531ab" translate="yes" xml:space="preserve">
          <source>An iterator over the non-ASCII-whitespace substrings of a string, separated by any amount of ASCII whitespace.</source>
          <target state="translated">文字列の非ASCII空白の部分文字列を、任意の量のASCII空白で区切ってイテレータします。</target>
        </trans-unit>
        <trans-unit id="98639edcf075ef0bbd56694e6fd8f3ab5801fa3b" translate="yes" xml:space="preserve">
          <source>An iterator over the non-whitespace substrings of a string, separated by any amount of whitespace.</source>
          <target state="translated">文字列の空白以外の部分文字列を、任意の量の空白で区切ってイテレータします。</target>
        </trans-unit>
        <trans-unit id="f6d3a015ca8e0813b9d2a570221365ce0bb7b9f3" translate="yes" xml:space="preserve">
          <source>An iterator over the subslices of the vector which are separated by elements that match &lt;code&gt;pred&lt;/code&gt;, starting from the end of the slice.</source>
          <target state="translated">スライスの最後から開始して、 &lt;code&gt;pred&lt;/code&gt; に一致する要素で区切られたベクトルのサブスライスの反復子。</target>
        </trans-unit>
        <trans-unit id="82456e1206b372bf7ea9d2f45cb440546d002943" translate="yes" xml:space="preserve">
          <source>An iterator over the subslices of the vector which are separated by elements that match &lt;code&gt;pred&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;pred&lt;/code&gt; に一致する要素で区切られたベクトルのサブスライスの反復子。</target>
        </trans-unit>
        <trans-unit id="551626c835c28af1e23d1b77fa736e5fca587fd5" translate="yes" xml:space="preserve">
          <source>An iterator over the value in &lt;a href=&quot;enum.option#variant.Some&quot;&gt;&lt;code&gt;Some&lt;/code&gt;&lt;/a&gt; variant of an &lt;a href=&quot;enum.option&quot;&gt;&lt;code&gt;Option&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;enum.option&quot;&gt; &lt;code&gt;Option&lt;/code&gt; の&lt;/a&gt;&lt;a href=&quot;enum.option#variant.Some&quot;&gt; &lt;code&gt;Some&lt;/code&gt; &lt;/a&gt;バリアントの値に対するイテレータ。</target>
        </trans-unit>
        <trans-unit id="2ad0a62fd20b029d94f3ea06e170d6042fc65d39" translate="yes" xml:space="preserve">
          <source>An iterator over the value in a &lt;a href=&quot;enum.result#variant.Ok&quot;&gt;&lt;code&gt;Ok&lt;/code&gt;&lt;/a&gt; variant of a &lt;a href=&quot;enum.result&quot;&gt;&lt;code&gt;Result&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;enum.result&quot;&gt; &lt;code&gt;Result&lt;/code&gt; の&lt;/a&gt;&lt;a href=&quot;enum.result#variant.Ok&quot;&gt; &lt;code&gt;Ok&lt;/code&gt; &lt;/a&gt;バリアントの値に対するイテレータ。</target>
        </trans-unit>
        <trans-unit id="06914df7e2feff75ffe46782ed50136c93cfaa1b" translate="yes" xml:space="preserve">
          <source>An iterator over the values of a &lt;code&gt;BTreeMap&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;BTreeMap&lt;/code&gt; の値のイテレータ。</target>
        </trans-unit>
        <trans-unit id="25879aa8de242e212254e6f312a25f5c0bfcd32b" translate="yes" xml:space="preserve">
          <source>An iterator over the values of a &lt;code&gt;HashMap&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;HashMap&lt;/code&gt; の値の反復子。</target>
        </trans-unit>
        <trans-unit id="1d5f58fc7c0c008712ec4e6eb8559eb52c39ce18" translate="yes" xml:space="preserve">
          <source>An iterator produced by &lt;code&gt;repeat_with()&lt;/code&gt; is not a &lt;a href=&quot;trait.doubleendediterator&quot;&gt;&lt;code&gt;DoubleEndedIterator&lt;/code&gt;&lt;/a&gt;. If you need &lt;code&gt;repeat_with()&lt;/code&gt; to return a &lt;a href=&quot;trait.doubleendediterator&quot;&gt;&lt;code&gt;DoubleEndedIterator&lt;/code&gt;&lt;/a&gt;, please open a GitHub issue explaining your use case.</source>
          <target state="translated">&lt;code&gt;repeat_with()&lt;/code&gt; によって生成されたイテレータは&lt;a href=&quot;trait.doubleendediterator&quot;&gt; &lt;code&gt;DoubleEndedIterator&lt;/code&gt; で&lt;/a&gt;はありません。あなたが必要な場合 &lt;code&gt;repeat_with()&lt;/code&gt; を返すように&lt;a href=&quot;trait.doubleendediterator&quot;&gt; &lt;code&gt;DoubleEndedIterator&lt;/code&gt; を&lt;/a&gt;、あなたのユースケースを説明するGitHubの問題を開いてください。</target>
        </trans-unit>
        <trans-unit id="28ebf2a599d5ab4a921fbe241809a3d3600be3e5" translate="yes" xml:space="preserve">
          <source>An iterator produced by &lt;code&gt;repeat_with()&lt;/code&gt; is not a &lt;code&gt;DoubleEndedIterator&lt;/code&gt;. If you need &lt;code&gt;repeat_with()&lt;/code&gt; to return a &lt;code&gt;DoubleEndedIterator&lt;/code&gt;, please open a GitHub issue explaining your use case.</source>
          <target state="translated">&lt;code&gt;repeat_with()&lt;/code&gt; によって生成された反復子は &lt;code&gt;DoubleEndedIterator&lt;/code&gt; ではありません。あなたが必要な場合 &lt;code&gt;repeat_with()&lt;/code&gt; を返すように &lt;code&gt;DoubleEndedIterator&lt;/code&gt; を、あなたのユースケースを説明するGitHubの問題を開いてください。</target>
        </trans-unit>
        <trans-unit id="57a784df1f13cfa8da5679e054cc8033f6fabdb2" translate="yes" xml:space="preserve">
          <source>An iterator produced by calling &lt;code&gt;drain_filter&lt;/code&gt; on BTreeMap.</source>
          <target state="translated">&lt;code&gt;drain_filter&lt;/code&gt; でdrain_filterを呼び出すことによって生成されるイテレーター。</target>
        </trans-unit>
        <trans-unit id="8506c9bfb6eed5d29b225ea0333e263b7b9b1840" translate="yes" xml:space="preserve">
          <source>An iterator produced by calling &lt;code&gt;drain_filter&lt;/code&gt; on BTreeSet.</source>
          <target state="translated">&lt;code&gt;drain_filter&lt;/code&gt; でdrain_filterを呼び出すことによって生成されるイテレーター。</target>
        </trans-unit>
        <trans-unit id="c51b3a9a86a32de916b3441f5cc928b34139d94d" translate="yes" xml:space="preserve">
          <source>An iterator produced by calling &lt;code&gt;drain_filter&lt;/code&gt; on LinkedList.</source>
          <target state="translated">&lt;code&gt;drain_filter&lt;/code&gt; でdrain_filterを呼び出して作成された反復子。</target>
        </trans-unit>
        <trans-unit id="d90f64072c9b86fb5e160826e11d54a35519d306" translate="yes" xml:space="preserve">
          <source>An iterator produced by calling &lt;code&gt;drain_filter&lt;/code&gt; on Vec.</source>
          <target state="translated">Vecで &lt;code&gt;drain_filter&lt;/code&gt; を呼び出して作成されたイテレーター。</target>
        </trans-unit>
        <trans-unit id="e2f38bdab7ee3f88662413a8d0762d07987cc9e4" translate="yes" xml:space="preserve">
          <source>An iterator that always continues to yield &lt;code&gt;None&lt;/code&gt; when exhausted.</source>
          <target state="translated">使い尽くされたときに常に &lt;code&gt;None&lt;/code&gt; を生成し続けるイテレータ。</target>
        </trans-unit>
        <trans-unit id="d75b48632d15091a831b75304f768ce72229865c" translate="yes" xml:space="preserve">
          <source>An iterator that attempts to yield all pending values for a &lt;a href=&quot;struct.receiver&quot;&gt;&lt;code&gt;Receiver&lt;/code&gt;&lt;/a&gt;, created by &lt;a href=&quot;struct.receiver#method.try_iter&quot;&gt;&lt;code&gt;try_iter&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;struct.receiver#method.try_iter&quot;&gt; &lt;code&gt;try_iter&lt;/code&gt; &lt;/a&gt;によって作成された、&lt;a href=&quot;struct.receiver&quot;&gt; &lt;code&gt;Receiver&lt;/code&gt; の&lt;/a&gt;保留中のすべての値を生成しようとする反復子。</target>
        </trans-unit>
        <trans-unit id="0c0e45d489e23ad54f254e3c451b03c3ad3633b8" translate="yes" xml:space="preserve">
          <source>An iterator that calls a function with a reference to each element before yielding it.</source>
          <target state="translated">各要素を参照して関数を呼び出してからそれを返すイテレータ。</target>
        </trans-unit>
        <trans-unit id="51a9a929e3e766e1bc15473a2edf034711e9603a" translate="yes" xml:space="preserve">
          <source>An iterator that clones the elements of an underlying iterator.</source>
          <target state="translated">基礎となるイテレータの要素をクローンするイテレータ。</target>
        </trans-unit>
        <trans-unit id="d2287777325ba0f8a82eefc9f82886c5e6c0375c" translate="yes" xml:space="preserve">
          <source>An iterator that copies the elements of an underlying iterator.</source>
          <target state="translated">基礎となるイテレータの要素をコピーするイテレータ。</target>
        </trans-unit>
        <trans-unit id="11b5eb68a058f133076c97a53287f7350b19b4ed" translate="yes" xml:space="preserve">
          <source>An iterator that decodes UTF-16 encoded code points from an iterator of &lt;code&gt;u16&lt;/code&gt;s.</source>
          <target state="translated">&lt;code&gt;u16&lt;/code&gt; のイテレータからUTF-16エンコードされたコードポイントをデコードするイテレータ。</target>
        </trans-unit>
        <trans-unit id="a7c2f22f759edefd0c02e7989a0830d2b9927824" translate="yes" xml:space="preserve">
          <source>An iterator that filters the elements of &lt;code&gt;iter&lt;/code&gt; with &lt;code&gt;predicate&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;iter&lt;/code&gt; の要素を &lt;code&gt;predicate&lt;/code&gt; でフィルタリングするイテレータ。</target>
        </trans-unit>
        <trans-unit id="538c0bdbb5f2579b6454154f638e3b2235b91db1" translate="yes" xml:space="preserve">
          <source>An iterator that flattens one level of nesting in an iterator of things that can be turned into iterators.</source>
          <target state="translated">イテレータ化できるモノのイテレータで1レベルのネストをフラットにするイテレータ。</target>
        </trans-unit>
        <trans-unit id="9dbf52f6fb3a5236b83ac424b9036cbd60fd5a39" translate="yes" xml:space="preserve">
          <source>An iterator that infinitely &lt;a href=&quot;struct.tcplistener#method.accept&quot;&gt;&lt;code&gt;accept&lt;/code&gt;&lt;/a&gt;s connections on a &lt;a href=&quot;struct.tcplistener&quot;&gt;&lt;code&gt;TcpListener&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;struct.tcplistener&quot;&gt; &lt;code&gt;TcpListener&lt;/code&gt; で&lt;/a&gt;の接続を無限に&lt;a href=&quot;struct.tcplistener#method.accept&quot;&gt; &lt;code&gt;accept&lt;/code&gt; &lt;/a&gt;イテレータ。</target>
        </trans-unit>
        <trans-unit id="81a5d4ccf76ade25979b7f90350112e1ade77257" translate="yes" xml:space="preserve">
          <source>An iterator that iterates two other iterators simultaneously.</source>
          <target state="translated">他の2つのイテレータを同時に反復処理するイテレータ。</target>
        </trans-unit>
        <trans-unit id="ca3c41a43b14bf4c961d798c07db548fe5c4306e" translate="yes" xml:space="preserve">
          <source>An iterator that knows its exact length.</source>
          <target state="translated">正確な長さを知っているイテレータ。</target>
        </trans-unit>
        <trans-unit id="6bd3d7d181c5f76ada28bd405c55b98768c1a53e" translate="yes" xml:space="preserve">
          <source>An iterator that links two iterators together, in a chain.</source>
          <target state="translated">2つのイテレータをチェーンでつなぐイテレータ。</target>
        </trans-unit>
        <trans-unit id="fd413348f096597213f95708520a2a2ee8e8c6ff" translate="yes" xml:space="preserve">
          <source>An iterator that maps each element to an iterator, and yields the elements of the produced iterators.</source>
          <target state="translated">各要素をイテレータにマッピングし、生成されたイテレータの要素を生成するイテレータ。</target>
        </trans-unit>
        <trans-unit id="e00fb1707b378038f217f0122cb5c2c693a99ce9" translate="yes" xml:space="preserve">
          <source>An iterator that maps the values of &lt;code&gt;iter&lt;/code&gt; with &lt;code&gt;f&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;iter&lt;/code&gt; の値を &lt;code&gt;f&lt;/code&gt; でマップするイテレータ。</target>
        </trans-unit>
        <trans-unit id="c89c4d0277ad0dbe70fcef9f7526e1d26306d3c4" translate="yes" xml:space="preserve">
          <source>An iterator that moves out of a vector.</source>
          <target state="translated">ベクトルの外に移動するイテレータ。</target>
        </trans-unit>
        <trans-unit id="18d1634bc6586ab56c39fac0a163c9d8e2300d06" translate="yes" xml:space="preserve">
          <source>An iterator that only accepts elements while &lt;code&gt;predicate&lt;/code&gt; returns &lt;code&gt;Some(_)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;predicate&lt;/code&gt; が &lt;code&gt;Some(_)&lt;/code&gt; を返す間、要素のみを受け入れるイテレータ。</target>
        </trans-unit>
        <trans-unit id="5d780c4556be41e5ade58ccb90a4cb9745c8a4a0" translate="yes" xml:space="preserve">
          <source>An iterator that only accepts elements while &lt;code&gt;predicate&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;predicate&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; を返す間、要素のみを受け入れるイテレータ。</target>
        </trans-unit>
        <trans-unit id="ca756e17e11dd720fde75ad3acbb4dc61da5a0b9" translate="yes" xml:space="preserve">
          <source>An iterator that only iterates over the first &lt;code&gt;n&lt;/code&gt; iterations of &lt;code&gt;iter&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;iter&lt;/code&gt; の最初の &lt;code&gt;n&lt;/code&gt; 回の反復のみを反復する反復子。</target>
        </trans-unit>
        <trans-unit id="473994edf3f2b12636ecfbae9c0cf95e9976442a" translate="yes" xml:space="preserve">
          <source>An iterator that rejects elements while &lt;code&gt;predicate&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;predicate&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; を返す間、要素を拒否するイテレータ。</target>
        </trans-unit>
        <trans-unit id="0464de53ba73fee454800ae2dd5fef9380113b90" translate="yes" xml:space="preserve">
          <source>An iterator that repeats an element endlessly.</source>
          <target state="translated">要素を無限に繰り返すイテレータ。</target>
        </trans-unit>
        <trans-unit id="7f0331c06c1f3247687712e4a8fa91faa255da79" translate="yes" xml:space="preserve">
          <source>An iterator that repeats elements of type &lt;code&gt;A&lt;/code&gt; endlessly by applying the provided closure &lt;code&gt;F: FnMut() -&amp;gt; A&lt;/code&gt;.</source>
          <target state="translated">提供されたクロージャー &lt;code&gt;F: FnMut() -&amp;gt; A&lt;/code&gt; 適用することにより、タイプ &lt;code&gt;A&lt;/code&gt; の要素を無限に繰り返すイテレーター。</target>
        </trans-unit>
        <trans-unit id="4f71391fe387efdecec312046c6dd55bbf198321" translate="yes" xml:space="preserve">
          <source>An iterator that repeats endlessly.</source>
          <target state="translated">無限に繰り返すイテレータ。</target>
        </trans-unit>
        <trans-unit id="905426af2dba7f51c454090a12d4200524fdd44c" translate="yes" xml:space="preserve">
          <source>An iterator that reports an accurate length using size_hint.</source>
          <target state="translated">size_hintを使用して正確な長さを報告するイテレータ。</target>
        </trans-unit>
        <trans-unit id="6e8e68927103c8756bd8e724310ac62f637e383b" translate="yes" xml:space="preserve">
          <source>An iterator that skips over &lt;code&gt;n&lt;/code&gt; elements of &lt;code&gt;iter&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;iter&lt;/code&gt; の &lt;code&gt;n&lt;/code&gt; 個の要素をスキップするイテレータ。</target>
        </trans-unit>
        <trans-unit id="cc8fdbf15929bf39a9148cd3ad1f02b7e2f3e8e1" translate="yes" xml:space="preserve">
          <source>An iterator that splits an environment variable into paths according to platform-specific conventions.</source>
          <target state="translated">プラットフォーム固有の規約に従って環境変数をパスに分割するイテレータ。</target>
        </trans-unit>
        <trans-unit id="57ccd12f7079988974d92028c7ca992c2e3dc8d6" translate="yes" xml:space="preserve">
          <source>An iterator that strings two iterators together.</source>
          <target state="translated">2つのイテレータを文字列化したイテレータ。</target>
        </trans-unit>
        <trans-unit id="277e34f21de2c1bcf08658ea7180ea41a724c7da" translate="yes" xml:space="preserve">
          <source>An iterator that uses &lt;code&gt;f&lt;/code&gt; to both filter and map elements from &lt;code&gt;iter&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;f&lt;/code&gt; を使用して、 &lt;code&gt;iter&lt;/code&gt; の要素をフィルタリングおよびマップするイテレーター。</target>
        </trans-unit>
        <trans-unit id="d1c29ab729712117252122597b1f8dee40693e18" translate="yes" xml:space="preserve">
          <source>An iterator that when yielding an item will have taken at least one element from its underlying &lt;a href=&quot;trait.sourceiter&quot;&gt;&lt;code&gt;SourceIter&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">アイテムを生成するときに、基礎となる&lt;a href=&quot;trait.sourceiter&quot;&gt; &lt;code&gt;SourceIter&lt;/code&gt; &lt;/a&gt;から少なくとも1つの要素を取得するイテレーター。</target>
        </trans-unit>
        <trans-unit id="290a4df52520d8c2cd218b2c5a66207c17bd76b5" translate="yes" xml:space="preserve">
          <source>An iterator that yields &lt;code&gt;None&lt;/code&gt; forever after the underlying iterator yields &lt;code&gt;None&lt;/code&gt; once.</source>
          <target state="translated">基礎となるイテレータが &lt;code&gt;None&lt;/code&gt; を 1回生成した後、 &lt;code&gt;None&lt;/code&gt; を永続的に生成するイテレータ。</target>
        </trans-unit>
        <trans-unit id="8077f46e4926a9ba2fe0c3a0111f99b3bfd0cee7" translate="yes" xml:space="preserve">
          <source>An iterator that yields a single element of type &lt;code&gt;A&lt;/code&gt; by applying the provided closure &lt;code&gt;F: FnOnce() -&amp;gt; A&lt;/code&gt;.</source>
          <target state="translated">提供されたクロージャー &lt;code&gt;F: FnOnce() -&amp;gt; A&lt;/code&gt; 適用してタイプ &lt;code&gt;A&lt;/code&gt; の単一の要素を生成するイテレーター。</target>
        </trans-unit>
        <trans-unit id="f74ed23fee03be7f9726d86e04759a8cdc7c98f8" translate="yes" xml:space="preserve">
          <source>An iterator that yields an element exactly once.</source>
          <target state="translated">要素を正確に一度だけ返すイテレータ。</target>
        </trans-unit>
        <trans-unit id="d839e72a6966bc49a09991c75f6ebb8c0f577f86" translate="yes" xml:space="preserve">
          <source>An iterator that yields nothing.</source>
          <target state="translated">何も得られないイテレータ。</target>
        </trans-unit>
        <trans-unit id="5c4e0833b181576427135eb9c8df2d3b1200509f" translate="yes" xml:space="preserve">
          <source>An iterator that yields the current count and the element during iteration.</source>
          <target state="translated">現在のカウントと反復中の要素を返すイテレータ。</target>
        </trans-unit>
        <trans-unit id="13cc9cc84ea0ac8db6860e2d362f3768df8c56c8" translate="yes" xml:space="preserve">
          <source>An iterator that yields the literal escape code of a &lt;code&gt;char&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;char&lt;/code&gt; のリテラルエスケープコードを生成するイテレータ。</target>
        </trans-unit>
        <trans-unit id="f37b0b305dd49cedb47e6f8dfa5f3a2bdad3bf67" translate="yes" xml:space="preserve">
          <source>An iterator to maintain state while iterating another iterator.</source>
          <target state="translated">別のイテレータを反復しながら状態を維持するイテレータ。</target>
        </trans-unit>
        <trans-unit id="47ba4cac2215dd1a04b338eb0e4a94df69cf3c0f" translate="yes" xml:space="preserve">
          <source>An iterator visiting all elements in arbitrary order. The iterator element type is &lt;code&gt;&amp;amp;'a T&lt;/code&gt;.</source>
          <target state="translated">すべての要素を任意の順序で訪問する反復子。イテレーター要素のタイプは &lt;code&gt;&amp;amp;'a T&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="7550894b7d1bb85e45b801eaeed48efa989854c0" translate="yes" xml:space="preserve">
          <source>An iterator visiting all key-value pairs in arbitrary order, with mutable references to the values. The iterator element type is &lt;code&gt;(&amp;amp;'a K, &amp;amp;'a mut V)&lt;/code&gt;.</source>
          <target state="translated">すべてのキーと値のペアを任意の順序で訪問し、値への参照を変更できるイテレータ。イテレーター要素のタイプは &lt;code&gt;(&amp;amp;'a K, &amp;amp;'a mut V)&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="1b08b2653f7dcb8dc940ed24069740a24ab5b76a" translate="yes" xml:space="preserve">
          <source>An iterator visiting all key-value pairs in arbitrary order. The iterator element type is &lt;code&gt;(&amp;amp;'a K, &amp;amp;'a V)&lt;/code&gt;.</source>
          <target state="translated">すべてのキーと値のペアを任意の順序で訪問する反復子。イテレーター要素のタイプは &lt;code&gt;(&amp;amp;'a K, &amp;amp;'a V)&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="a52b26a20f6e5a2edebe10f6f90cf9507490a85c" translate="yes" xml:space="preserve">
          <source>An iterator visiting all keys in arbitrary order. The iterator element type is &lt;code&gt;&amp;amp;'a K&lt;/code&gt;.</source>
          <target state="translated">すべてのキーを任意の順序で訪問する反復子。イテレータ要素のタイプは &lt;code&gt;&amp;amp;'a K&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="cee3468b8b5e0fdd5a440c2d5df35c4c2db2ae90" translate="yes" xml:space="preserve">
          <source>An iterator visiting all values in arbitrary order. The iterator element type is &lt;code&gt;&amp;amp;'a V&lt;/code&gt;.</source>
          <target state="translated">任意の順序ですべての値を訪問する反復子。イテレータ要素のタイプは &lt;code&gt;&amp;amp;'a V&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="7ae307f212519994d8b694a5d942377f4aec4823" translate="yes" xml:space="preserve">
          <source>An iterator visiting all values mutably in arbitrary order. The iterator element type is &lt;code&gt;&amp;amp;'a mut V&lt;/code&gt;.</source>
          <target state="translated">すべての値を任意の順序で変更可能に訪問する反復子。イテレーター要素のタイプは &lt;code&gt;&amp;amp;'a mut V&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="211d7c1adc8a12b57341be994e857003e54c6bbd" translate="yes" xml:space="preserve">
          <source>An iterator where each iteration calls the provided closure &lt;code&gt;F: FnMut() -&amp;gt; Option&amp;lt;T&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">各反復が提供されたクロージャー &lt;code&gt;F: FnMut() -&amp;gt; Option&amp;lt;T&amp;gt;&lt;/code&gt; 呼び出すイテレーター。</target>
        </trans-unit>
        <trans-unit id="33d8e5b7da8d4676782754a628f4083ffd272c18" translate="yes" xml:space="preserve">
          <source>An iterator which uses a closure to determine if an element should be removed.</source>
          <target state="translated">クロージャを使用して要素を削除するかどうかを判断するイテレータ。</target>
        </trans-unit>
        <trans-unit id="c53ddbd1d3e296430ed20afa68efda72ca0ded32" translate="yes" xml:space="preserve">
          <source>An iterator with a &lt;code&gt;peek()&lt;/code&gt; that returns an optional reference to the next element.</source>
          <target state="translated">次の要素へのオプションの参照を返す &lt;code&gt;peek()&lt;/code&gt; を持つイテレータ。</target>
        </trans-unit>
        <trans-unit id="c9cd5154a20293338cfe2c0c0c884bc897a9a0cb" translate="yes" xml:space="preserve">
          <source>An new iterator where each successive item is computed based on the preceding one.</source>
          <target state="translated">各連続した項目が前の項目に基づいて計算される新しいイテレータ.</target>
        </trans-unit>
        <trans-unit id="a64664459e6bcefaf4f866fe61f4c89bbbc6e913" translate="yes" xml:space="preserve">
          <source>An non-ascii identifier was used in an invalid context.</source>
          <target state="translated">非 ASCII 識別子が無効なコンテキストで使用されました。</target>
        </trans-unit>
        <trans-unit id="767a832ec64e700730e273e825321e36a3ef86e1" translate="yes" xml:space="preserve">
          <source>An occupied entry.</source>
          <target state="translated">占有されたエントリ。</target>
        </trans-unit>
        <trans-unit id="678664bfa424da9fc0ca21e4760f29b4b952648d" translate="yes" xml:space="preserve">
          <source>An optional item</source>
          <target state="translated">オプション項目</target>
        </trans-unit>
        <trans-unit id="d7f5308e6f605cdab4dbb8b387f9c93de98d0922" translate="yes" xml:space="preserve">
          <source>An order is a total order if it is (for all &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;c&lt;/code&gt;):</source>
          <target state="translated">注文は、それが（ &lt;code&gt;a&lt;/code&gt; 、 &lt;code&gt;b&lt;/code&gt; 、および &lt;code&gt;c&lt;/code&gt; のすべてに対して）である場合、合計注文です。</target>
        </trans-unit>
        <trans-unit id="e7c75396d6933448cc7456d6beaf9cf648ea0ef5" translate="yes" xml:space="preserve">
          <source>An ordering where a compared value is equal to another.</source>
          <target state="translated">比較された値が別の値と等しい順序。</target>
        </trans-unit>
        <trans-unit id="09dba8210b3d0ce590a3a5f065b62a6a8ab493fb" translate="yes" xml:space="preserve">
          <source>An ordering where a compared value is greater than another.</source>
          <target state="translated">比較される値が他の値よりも大きい順序。</target>
        </trans-unit>
        <trans-unit id="a2c8ca4c96fc50eebfe4b351916be57d1bf56d8c" translate="yes" xml:space="preserve">
          <source>An ordering where a compared value is less than another.</source>
          <target state="translated">比較される値が他の値よりも小さい順序。</target>
        </trans-unit>
        <trans-unit id="38792f39e0fa160ba176220b302fc6518c1e2555" translate="yes" xml:space="preserve">
          <source>An owned permission to join on a thread (block on its termination).</source>
          <target state="translated">スレッドへの参加を許可する所有権(終了時にブロック)。</target>
        </trans-unit>
        <trans-unit id="8c3512dc7441f7c48feb0adfb2813ca8cbecd465" translate="yes" xml:space="preserve">
          <source>An owned, mutable path (akin to &lt;a href=&quot;../string/struct.string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">所有された変更可能なパス（&lt;a href=&quot;../string/struct.string&quot;&gt; &lt;code&gt;String&lt;/code&gt; に&lt;/a&gt;似ています）。</target>
        </trans-unit>
        <trans-unit id="e84205a36cc39374bcb7d05c1b1547f37b9b5189" translate="yes" xml:space="preserve">
          <source>An owning iterator over messages on a &lt;a href=&quot;struct.receiver&quot;&gt;&lt;code&gt;Receiver&lt;/code&gt;&lt;/a&gt;, created by &lt;strong&gt;Receiver::into_iter&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;Receiver :: into_iter&lt;/strong&gt;によって作成された、&lt;a href=&quot;struct.receiver&quot;&gt; &lt;code&gt;Receiver&lt;/code&gt; &lt;/a&gt;上のメッセージに対する所有イテレータ。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="83bd664b01b4716a8aced24a8192a6358972a99f" translate="yes" xml:space="preserve">
          <source>An owning iterator over the elements of a &lt;code&gt;BinaryHeap&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;BinaryHeap&lt;/code&gt; の要素に対する所有イテレータ。</target>
        </trans-unit>
        <trans-unit id="34718a674d09c2eb637513ac6f89289f300970ef" translate="yes" xml:space="preserve">
          <source>An owning iterator over the elements of a &lt;code&gt;LinkedList&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;LinkedList&lt;/code&gt; の要素に対する所有イテレータ。</target>
        </trans-unit>
        <trans-unit id="f6f353b2a400a09971f91285403f6b780ae991c4" translate="yes" xml:space="preserve">
          <source>An owning iterator over the elements of a &lt;code&gt;VecDeque&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;VecDeque&lt;/code&gt; の要素に対する所有イテレータ。</target>
        </trans-unit>
        <trans-unit id="77a86a6c2dd3031f17c5e8abfe6100f81887dd42" translate="yes" xml:space="preserve">
          <source>An owning iterator over the entries of a &lt;code&gt;BTreeMap&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;BTreeMap&lt;/code&gt; のエントリに対する所有イテレータ。</target>
        </trans-unit>
        <trans-unit id="209ab8cbe2152f0b0d82c7256751114f7cd068b9" translate="yes" xml:space="preserve">
          <source>An owning iterator over the entries of a &lt;code&gt;HashMap&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;HashMap&lt;/code&gt; のエントリに対する所有イテレータ。</target>
        </trans-unit>
        <trans-unit id="ef6f78f2a2dbde9b33ceeac921bd77fbb502b5bc" translate="yes" xml:space="preserve">
          <source>An owning iterator over the items of a &lt;code&gt;BTreeSet&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;BTreeSet&lt;/code&gt; のアイテムに対する所有イテレータ。</target>
        </trans-unit>
        <trans-unit id="427fdeccedc75e2673269080f0ce6c0924e6c1bd" translate="yes" xml:space="preserve">
          <source>An owning iterator over the items of a &lt;code&gt;HashSet&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;HashSet&lt;/code&gt; のアイテムに対する所有イテレータ。</target>
        </trans-unit>
        <trans-unit id="63f91fac0583c8f40d303b24662fb74f3439b187" translate="yes" xml:space="preserve">
          <source>An owning iterator over the keys of a &lt;code&gt;BTreeMap&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;BTreeMap&lt;/code&gt; のキーに対する所有イテレータ。</target>
        </trans-unit>
        <trans-unit id="3d2eac75b0f121647617969553f50d0b9466ca4f" translate="yes" xml:space="preserve">
          <source>An owning iterator over the keys of a &lt;code&gt;HashMap&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;HashMap&lt;/code&gt; のキーに対する所有イテレータ。</target>
        </trans-unit>
        <trans-unit id="c812167dc1a9620fc28974d42c5f815dace73059" translate="yes" xml:space="preserve">
          <source>An owning iterator over the values of a &lt;code&gt;BTreeMap&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;BTreeMap&lt;/code&gt; の値に対する所有イテレータ。</target>
        </trans-unit>
        <trans-unit id="e996a80994408e932109330c3a7b8f4f5821448e" translate="yes" xml:space="preserve">
          <source>An owning iterator over the values of a &lt;code&gt;HashMap&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;HashMap&lt;/code&gt; の値に対する所有イテレータ。</target>
        </trans-unit>
        <trans-unit id="b9b2d7fe27e12071feb7334cad3f7f83e9e84aa2" translate="yes" xml:space="preserve">
          <source>An unary operator was used on a type which doesn't implement it.</source>
          <target state="translated">単項演算子が実装されていない型で使用されました。</target>
        </trans-unit>
        <trans-unit id="dcb71e1bf306a3b27e4be98207d51ae66d320fdd" translate="yes" xml:space="preserve">
          <source>An unbounded range (&lt;code&gt;..&lt;/code&gt;).</source>
          <target state="translated">無制限の範囲（ &lt;code&gt;..&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="17e397882c6b5d98ce823af67a0207c6b4f0a351" translate="yes" xml:space="preserve">
          <source>An unboxed trait object was used as a return value.</source>
          <target state="translated">箱のない形質オブジェクトが戻り値として使用されました。</target>
        </trans-unit>
        <trans-unit id="77330b9c19314a31717caeb5c6b57d3f4259e03a" translate="yes" xml:space="preserve">
          <source>An unchecked assertion allows a program in an inconsistent state to keep running, which might have unexpected consequences but does not introduce unsafety as long as this only happens in safe code. The performance cost of assertions, however, is not measurable in general. Replacing &lt;a href=&quot;macro.assert&quot;&gt;&lt;code&gt;assert!&lt;/code&gt;&lt;/a&gt; with &lt;code&gt;debug_assert!&lt;/code&gt; is thus only encouraged after thorough profiling, and more importantly, only in safe code!</source>
          <target state="translated">チェックされていないアサーションにより、一貫性のない状態のプログラムが実行を継続できます。これは予期しない結果をもたらす可能性がありますが、これが安全なコードでのみ発生する限り、安全性を損なうことはありません。ただし、アサーションのパフォーマンスコストは、一般的に測定できません。&lt;a href=&quot;macro.assert&quot;&gt; &lt;code&gt;assert!&lt;/code&gt; &lt;/a&gt;置き換え！ &lt;code&gt;debug_assert!&lt;/code&gt; したがって、徹底的なプロファイリングの後でのみ、そしてさらに重要なことに、安全なコードでのみ推奨されます！</target>
        </trans-unit>
        <trans-unit id="3caad6b327abced5bae6f8ff205241ca33ed53ab" translate="yes" xml:space="preserve">
          <source>An unchecked assertion allows a program in an inconsistent state to keep running, which might have unexpected consequences but does not introduce unsafety as long as this only happens in safe code. The performance cost of assertions, is however, not measurable in general. Replacing &lt;a href=&quot;macro.assert&quot;&gt;&lt;code&gt;assert!&lt;/code&gt;&lt;/a&gt; with &lt;code&gt;debug_assert!&lt;/code&gt; is thus only encouraged after thorough profiling, and more importantly, only in safe code!</source>
          <target state="translated">チェックされていないアサーションにより、一貫性のない状態のプログラムを実行し続けることができます。これは予期しない結果をもたらす可能性がありますが、これが安全なコードでのみ発生する限り、安全ではありません。ただし、アサーションのパフォーマンスコストは一般に測定できません。&lt;a href=&quot;macro.assert&quot;&gt; &lt;code&gt;assert!&lt;/code&gt; &lt;/a&gt;置き換える！ &lt;code&gt;debug_assert!&lt;/code&gt; したがって、徹底的なプロファイリングの後にのみ、さらに重要なことに、安全なコードでのみ推奨されます！</target>
        </trans-unit>
        <trans-unit id="442287d37e019d0e550c26e6f3dfcfb70e25272a" translate="yes" xml:space="preserve">
          <source>An undeclared crate, module, or type was used.</source>
          <target state="translated">申告されていない木箱、モジュール、またはタイプが使用されました。</target>
        </trans-unit>
        <trans-unit id="490b1d248ac38d604233cacff667b31a463976df" translate="yes" xml:space="preserve">
          <source>An undeclared label was used.</source>
          <target state="translated">宣言されていないラベルが使用されていました。</target>
        </trans-unit>
        <trans-unit id="5cc74f4a7dec23f15c6176f5d92410a97be0cd49" translate="yes" xml:space="preserve">
          <source>An undeclared lifetime was used.</source>
          <target state="translated">宣言されていない寿命が使用されていました。</target>
        </trans-unit>
        <trans-unit id="fc0bdd57bc131e7f23a48af9227bf2c7b9e2b4dd" translate="yes" xml:space="preserve">
          <source>An undeclared type or module was used.</source>
          <target state="translated">未申告のタイプまたはモジュールが使用されました。</target>
        </trans-unit>
        <trans-unit id="62b209ea92b4732aa055c2148d6eb87f3bf6ae79" translate="yes" xml:space="preserve">
          <source>An undefined atomic operation function was declared.</source>
          <target state="translated">未定義のアトミック操作関数が宣言されました。</target>
        </trans-unit>
        <trans-unit id="edf946e9423b88dbc97c6f1ffa6e16764af6cd52" translate="yes" xml:space="preserve">
          <source>An underscore &lt;code&gt;_&lt;/code&gt; character has been used as the identifier for a lifetime.</source>
          <target state="translated">アンダースコア &lt;code&gt;_&lt;/code&gt; 文字は、有効期間の識別子として使用されています。</target>
        </trans-unit>
        <trans-unit id="5c74d6c9b38a67d2a5eb623d75e946df289a3fbc" translate="yes" xml:space="preserve">
          <source>An unknown &quot;kind&quot; was specified for a link attribute.</source>
          <target state="translated">リンク属性に未知の &quot;種類 &quot;が指定されました。</target>
        </trans-unit>
        <trans-unit id="2dbef161c3305374da24ca6e3ae9cdc7bdefe6b4" translate="yes" xml:space="preserve">
          <source>An unknown &quot;kind&quot; was specified for a link attribute. Erroneous code example:</source>
          <target state="translated">リンク属性に未知の &quot;種類&quot; が指定されました。誤ったコード例です。</target>
        </trans-unit>
        <trans-unit id="a5956e957dc8b784f0e077b9955dd790db201d80" translate="yes" xml:space="preserve">
          <source>An unknown argument was given to the &lt;code&gt;inline&lt;/code&gt; attribute.</source>
          <target state="translated">&lt;code&gt;inline&lt;/code&gt; 属性に不明な引数が指定されました。</target>
        </trans-unit>
        <trans-unit id="7d952bcfdbb1c8f63e3755c7054750e6c464627c" translate="yes" xml:space="preserve">
          <source>An unknown argument was given to the &lt;code&gt;instruction_set&lt;/code&gt; attribute.</source>
          <target state="translated">不明な引数が &lt;code&gt;instruction_set&lt;/code&gt; 属性に指定されました。</target>
        </trans-unit>
        <trans-unit id="55c4e65153fb4fac3f59b06b3332f14a29b39777" translate="yes" xml:space="preserve">
          <source>An unknown external lang item was used.</source>
          <target state="translated">未知の外部言語項目が使用されました。</target>
        </trans-unit>
        <trans-unit id="9a99f6d07dc4d8ba35aa89128cc34d06dd11ce0f" translate="yes" xml:space="preserve">
          <source>An unknown external lang item was used. Erroneous code example:</source>
          <target state="translated">未知の外部言語項目が使用されました。誤ったコード例です。</target>
        </trans-unit>
        <trans-unit id="1356f6d3a3c2ce1216defe8b6863fd5e9393d5fa" translate="yes" xml:space="preserve">
          <source>An unknown field was specified into a structure.</source>
          <target state="translated">未知のフィールドが構造体に指定されていました。</target>
        </trans-unit>
        <trans-unit id="672bd73128faa09c7f440466e9f29739ad4de42d" translate="yes" xml:space="preserve">
          <source>An unknown field was specified into an enum's structure variant.</source>
          <target state="translated">未知のフィールドが enum の構造体バリアントに指定されました。</target>
        </trans-unit>
        <trans-unit id="bee5691463189269e4f427b52c0849d39e9df4f5" translate="yes" xml:space="preserve">
          <source>An unknown intrinsic function was declared.</source>
          <target state="translated">未知の固有関数が宣言されました。</target>
        </trans-unit>
        <trans-unit id="e8a840a4e189fb8e18f90b5fe877d384d51d1d3c" translate="yes" xml:space="preserve">
          <source>An unknown lint was used on the command line.</source>
          <target state="translated">コマンドラインで不明なリントが使用されていました。</target>
        </trans-unit>
        <trans-unit id="d472ec49c42739263d3ec941f6cf5b5468a2d3b2" translate="yes" xml:space="preserve">
          <source>An unknown meta item was used.</source>
          <target state="translated">未知のメタ項目が使用されていました。</target>
        </trans-unit>
        <trans-unit id="a940cccd136dc43c95bcfd2c10667fe77e672634" translate="yes" xml:space="preserve">
          <source>An unknown predicate was used inside the &lt;code&gt;cfg&lt;/code&gt; attribute.</source>
          <target state="translated">不明な述語が &lt;code&gt;cfg&lt;/code&gt; 属性内で使用されました。</target>
        </trans-unit>
        <trans-unit id="99aaced696882b10f70ccb01859e75fc7704670e" translate="yes" xml:space="preserve">
          <source>An unknown tool name was found in a scoped lint.</source>
          <target state="translated">スコープされたリントの中から未知の工具名が発見されました。</target>
        </trans-unit>
        <trans-unit id="676d0b3b83f48e6af11d16fc5aee8adc4d048290" translate="yes" xml:space="preserve">
          <source>An unknown tuple struct/variant has been used.</source>
          <target state="translated">未知のタプル struct/variant が使用されています。</target>
        </trans-unit>
        <trans-unit id="c12ae2fbe23adbaee9a27dcd9a18b88d8f9167df" translate="yes" xml:space="preserve">
          <source>An unnamed address:</source>
          <target state="translated">名前のない住所。</target>
        </trans-unit>
        <trans-unit id="91f0af616d741e6aae624d3d1dd86d853eef5383" translate="yes" xml:space="preserve">
          <source>An unnecessary type or const parameter was given in a type alias.</source>
          <target state="translated">不要な型または const パラメータが型のエイリアスで指定されました。</target>
        </trans-unit>
        <trans-unit id="f156b900d9fe99f8832687ac7404efd74f0ba00f" translate="yes" xml:space="preserve">
          <source>An unpoisoned &lt;a href=&quot;struct.once&quot;&gt;&lt;code&gt;Once&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">無毒の&lt;a href=&quot;struct.once&quot;&gt; &lt;code&gt;Once&lt;/code&gt; &lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="3386e5166859dc07663dec10855432efda42e389" translate="yes" xml:space="preserve">
          <source>An unpoisoned &lt;code&gt;Once&lt;/code&gt;:</source>
          <target state="translated">無毒な &lt;code&gt;Once&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="940487cb36b1ca715dc9f782d9f8a844e917518b" translate="yes" xml:space="preserve">
          <source>An unreachable label was used.</source>
          <target state="translated">届かないラベルが使われていました。</target>
        </trans-unit>
        <trans-unit id="9a03f5a8f224f5f2ce3d5df647878dfe5aac207b" translate="yes" xml:space="preserve">
          <source>An unresolved name was used.</source>
          <target state="translated">未解決の名前が使われていました。</target>
        </trans-unit>
        <trans-unit id="261553d92051fa692c480d6d0e6fd303bf5038fd" translate="yes" xml:space="preserve">
          <source>An unsafe trait was implemented without an unsafe implementation.</source>
          <target state="translated">安全でない形質は、安全でない実装をせずに実装しました。</target>
        </trans-unit>
        <trans-unit id="084105813293c7ee4385ace5ee9239e1a67b6d57" translate="yes" xml:space="preserve">
          <source>An unstable feature in &lt;code&gt;const&lt;/code&gt; contexts was used.</source>
          <target state="translated">&lt;code&gt;const&lt;/code&gt; コンテキストで不安定な機能が使用されました。</target>
        </trans-unit>
        <trans-unit id="c801b4c85f18e94f7cb6ce228ae449c345e89b49" translate="yes" xml:space="preserve">
          <source>An unstable feature was used.</source>
          <target state="translated">不安定な機能が使われていました。</target>
        </trans-unit>
        <trans-unit id="2837c8cb90a7a15d78fb3ebeda3b87105514ef73" translate="yes" xml:space="preserve">
          <source>An unsupported expression was used inside a const context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad604b2507c78bd47c93ad249e197a918e7208ca" translate="yes" xml:space="preserve">
          <source>An unsupported representation was attempted on a zero-variant enum.</source>
          <target state="translated">サポートされていない表現がゼロ変数列挙で試みられました。</target>
        </trans-unit>
        <trans-unit id="999140d65b2dddb09bc1533f2a2a2de632081b87" translate="yes" xml:space="preserve">
          <source>Anatomy of a Rust Program</source>
          <target state="translated">ラストプログラムの解剖学</target>
        </trans-unit>
        <trans-unit id="f96afdd93db8b2e4f4aa8b97a7ac6e4f106649a9" translate="yes" xml:space="preserve">
          <source>Ancestors</source>
          <target state="translated">Ancestors</target>
        </trans-unit>
        <trans-unit id="a69185f73b3266ea2ea0196235a7920d98b23569" translate="yes" xml:space="preserve">
          <source>Ancestors::all</source>
          <target state="translated">Ancestors::all</target>
        </trans-unit>
        <trans-unit id="5d0f93422db0f668490adf089654ecece89c57a9" translate="yes" xml:space="preserve">
          <source>Ancestors::any</source>
          <target state="translated">Ancestors::any</target>
        </trans-unit>
        <trans-unit id="c4d070344a11e561f295e6e7e6205f761d5798b6" translate="yes" xml:space="preserve">
          <source>Ancestors::borrow</source>
          <target state="translated">Ancestors::borrow</target>
        </trans-unit>
        <trans-unit id="a84c8539090bc4c2974d99b05a787e636ebe0acb" translate="yes" xml:space="preserve">
          <source>Ancestors::borrow_mut</source>
          <target state="translated">Ancestors::borrow_mut</target>
        </trans-unit>
        <trans-unit id="334238f85474f459cc0ffaef3421caf90b07c6e6" translate="yes" xml:space="preserve">
          <source>Ancestors::by_ref</source>
          <target state="translated">Ancestors::by_ref</target>
        </trans-unit>
        <trans-unit id="6fdc4e3375706d83d8aecc92a22ee70bff5dfab4" translate="yes" xml:space="preserve">
          <source>Ancestors::chain</source>
          <target state="translated">Ancestors::chain</target>
        </trans-unit>
        <trans-unit id="dce0f9cae4b8d7222a0b11c873b249cd98da26b3" translate="yes" xml:space="preserve">
          <source>Ancestors::clone</source>
          <target state="translated">Ancestors::clone</target>
        </trans-unit>
        <trans-unit id="31848f144e07d27fc7390a8c92d56ab88474c213" translate="yes" xml:space="preserve">
          <source>Ancestors::clone_from</source>
          <target state="translated">Ancestors::clone_from</target>
        </trans-unit>
        <trans-unit id="35f7611233faafb5be9d7d385104097f21e72511" translate="yes" xml:space="preserve">
          <source>Ancestors::clone_into</source>
          <target state="translated">Ancestors::clone_into</target>
        </trans-unit>
        <trans-unit id="0d02f4a4459ad43a2bc9f83a20b48ce81eb5eefc" translate="yes" xml:space="preserve">
          <source>Ancestors::cloned</source>
          <target state="translated">Ancestors::cloned</target>
        </trans-unit>
        <trans-unit id="67ff55ec2d9537e58736a03fd50c337049b761f0" translate="yes" xml:space="preserve">
          <source>Ancestors::cmp</source>
          <target state="translated">Ancestors::cmp</target>
        </trans-unit>
        <trans-unit id="0d35d199d39196de0523350cd24a1241424fa231" translate="yes" xml:space="preserve">
          <source>Ancestors::collect</source>
          <target state="translated">Ancestors::collect</target>
        </trans-unit>
        <trans-unit id="4865b6ff2a1901685d10435c12cf071b254d3a62" translate="yes" xml:space="preserve">
          <source>Ancestors::copied</source>
          <target state="translated">Ancestors::copied</target>
        </trans-unit>
        <trans-unit id="f28d6b4a44e14f0d15c4f132d556116c210c1c84" translate="yes" xml:space="preserve">
          <source>Ancestors::count</source>
          <target state="translated">Ancestors::count</target>
        </trans-unit>
        <trans-unit id="a6a740680e9008614345c582b8e1985861829875" translate="yes" xml:space="preserve">
          <source>Ancestors::cycle</source>
          <target state="translated">Ancestors::cycle</target>
        </trans-unit>
        <trans-unit id="0810bcf20fe4de2312f283ad13e930eaa61b0c30" translate="yes" xml:space="preserve">
          <source>Ancestors::enumerate</source>
          <target state="translated">Ancestors::enumerate</target>
        </trans-unit>
        <trans-unit id="f443387bf4a86a6cc1330d9f2c4d3b913b1c1dd0" translate="yes" xml:space="preserve">
          <source>Ancestors::eq</source>
          <target state="translated">Ancestors::eq</target>
        </trans-unit>
        <trans-unit id="796eb87c3af9fac554be5d4ec57ca702d510701f" translate="yes" xml:space="preserve">
          <source>Ancestors::filter</source>
          <target state="translated">Ancestors::filter</target>
        </trans-unit>
        <trans-unit id="d1822e4ea409150f5e23e24201bc84ef25560137" translate="yes" xml:space="preserve">
          <source>Ancestors::filter_map</source>
          <target state="translated">Ancestors::filter_map</target>
        </trans-unit>
        <trans-unit id="1e6cc0ef677409077aa639becd452ada01ece8d8" translate="yes" xml:space="preserve">
          <source>Ancestors::find</source>
          <target state="translated">Ancestors::find</target>
        </trans-unit>
        <trans-unit id="657aafc8bbaf8304573fbc00e24419ba040782a9" translate="yes" xml:space="preserve">
          <source>Ancestors::find_map</source>
          <target state="translated">Ancestors::find_map</target>
        </trans-unit>
        <trans-unit id="beeb7e3fb0fbc04618a5300c980c6f59ed075dcd" translate="yes" xml:space="preserve">
          <source>Ancestors::flat_map</source>
          <target state="translated">Ancestors::flat_map</target>
        </trans-unit>
        <trans-unit id="47bd10eda5c1ca25f0cc303ef197cbc1220d1b53" translate="yes" xml:space="preserve">
          <source>Ancestors::flatten</source>
          <target state="translated">Ancestors::flatten</target>
        </trans-unit>
        <trans-unit id="a456cec1879b2b70a77233841a841755191a8a86" translate="yes" xml:space="preserve">
          <source>Ancestors::fmt</source>
          <target state="translated">Ancestors::fmt</target>
        </trans-unit>
        <trans-unit id="1f02f420430d3894ec9ecddf11dd94365e77ac19" translate="yes" xml:space="preserve">
          <source>Ancestors::fold</source>
          <target state="translated">Ancestors::fold</target>
        </trans-unit>
        <trans-unit id="3ca5818636166fd5b398f8e40a922c894b0abbb6" translate="yes" xml:space="preserve">
          <source>Ancestors::for_each</source>
          <target state="translated">Ancestors::for_each</target>
        </trans-unit>
        <trans-unit id="4264a030cb324bfbad2fa80a46e42c679803a0c3" translate="yes" xml:space="preserve">
          <source>Ancestors::from</source>
          <target state="translated">Ancestors::from</target>
        </trans-unit>
        <trans-unit id="32047f73315575a8e50a462155406bb910ceed17" translate="yes" xml:space="preserve">
          <source>Ancestors::fuse</source>
          <target state="translated">Ancestors::fuse</target>
        </trans-unit>
        <trans-unit id="41f1796019df27f1dc523c24819d1254f099c660" translate="yes" xml:space="preserve">
          <source>Ancestors::ge</source>
          <target state="translated">Ancestors::ge</target>
        </trans-unit>
        <trans-unit id="f1594f0c385b82f3427f45ed26a50d1dac4fa05e" translate="yes" xml:space="preserve">
          <source>Ancestors::gt</source>
          <target state="translated">Ancestors::gt</target>
        </trans-unit>
        <trans-unit id="dd54e2ff77b477361ff6376d5b04afaad6a7ef21" translate="yes" xml:space="preserve">
          <source>Ancestors::inspect</source>
          <target state="translated">Ancestors::inspect</target>
        </trans-unit>
        <trans-unit id="1bc8d1bb95f4aedebacf2a84051d097086c1cc75" translate="yes" xml:space="preserve">
          <source>Ancestors::into</source>
          <target state="translated">Ancestors::into</target>
        </trans-unit>
        <trans-unit id="6f7bdf57cf985a0498067e483576359d43c33000" translate="yes" xml:space="preserve">
          <source>Ancestors::into_iter</source>
          <target state="translated">Ancestors::into_iter</target>
        </trans-unit>
        <trans-unit id="e4f570f8f86838a0b2f0996de24967465582d845" translate="yes" xml:space="preserve">
          <source>Ancestors::is_sorted</source>
          <target state="translated">Ancestors::is_sorted</target>
        </trans-unit>
        <trans-unit id="8fa7773f21437bd02461103d0f128fe2f328180a" translate="yes" xml:space="preserve">
          <source>Ancestors::is_sorted_by</source>
          <target state="translated">Ancestors::is_sorted_by</target>
        </trans-unit>
        <trans-unit id="da156b45c81720439526b87f492a4b80dde53f7a" translate="yes" xml:space="preserve">
          <source>Ancestors::is_sorted_by_key</source>
          <target state="translated">Ancestors::is_sorted_by_key</target>
        </trans-unit>
        <trans-unit id="6bf6d1d6ec433eb2498f88c1821e2e8d204490c9" translate="yes" xml:space="preserve">
          <source>Ancestors::last</source>
          <target state="translated">Ancestors::last</target>
        </trans-unit>
        <trans-unit id="6182ceed3235394e0830f635f2568ba50e3e7bb2" translate="yes" xml:space="preserve">
          <source>Ancestors::le</source>
          <target state="translated">Ancestors::le</target>
        </trans-unit>
        <trans-unit id="ba00a013a0f8fd57e29b01f66afccf088e1d0023" translate="yes" xml:space="preserve">
          <source>Ancestors::lt</source>
          <target state="translated">Ancestors::lt</target>
        </trans-unit>
        <trans-unit id="b588193780984cc7ebdb2f28a2c09aad1660160a" translate="yes" xml:space="preserve">
          <source>Ancestors::map</source>
          <target state="translated">Ancestors::map</target>
        </trans-unit>
        <trans-unit id="aa73ed60029c8667bd3541a6cd43b17d298a34bc" translate="yes" xml:space="preserve">
          <source>Ancestors::max</source>
          <target state="translated">Ancestors::max</target>
        </trans-unit>
        <trans-unit id="ab6d430bbae01a6904e8639546e74aa743ec4546" translate="yes" xml:space="preserve">
          <source>Ancestors::max_by</source>
          <target state="translated">Ancestors::max_by</target>
        </trans-unit>
        <trans-unit id="3f9a117ba2cfb9ce3093457ddf5a2896b25c3699" translate="yes" xml:space="preserve">
          <source>Ancestors::max_by_key</source>
          <target state="translated">Ancestors::max_by_key</target>
        </trans-unit>
        <trans-unit id="d86ac9020bc2e94f4de10dd0521bc6648555300a" translate="yes" xml:space="preserve">
          <source>Ancestors::min</source>
          <target state="translated">Ancestors::min</target>
        </trans-unit>
        <trans-unit id="d1a3237b0f7d1400e70026876d1a9e1edfd954fb" translate="yes" xml:space="preserve">
          <source>Ancestors::min_by</source>
          <target state="translated">Ancestors::min_by</target>
        </trans-unit>
        <trans-unit id="4a76ef60a157a414e53965e7b20bdb80a42a93c5" translate="yes" xml:space="preserve">
          <source>Ancestors::min_by_key</source>
          <target state="translated">Ancestors::min_by_key</target>
        </trans-unit>
        <trans-unit id="5d2760f02e37aabc523ea5766e6897c5ccc56a0b" translate="yes" xml:space="preserve">
          <source>Ancestors::ne</source>
          <target state="translated">Ancestors::ne</target>
        </trans-unit>
        <trans-unit id="94b5fbd4a6186842bbae09888725d74af29ff76c" translate="yes" xml:space="preserve">
          <source>Ancestors::next</source>
          <target state="translated">Ancestors::next</target>
        </trans-unit>
        <trans-unit id="061044f738cb0378794d00307372b84bda535007" translate="yes" xml:space="preserve">
          <source>Ancestors::nth</source>
          <target state="translated">Ancestors::nth</target>
        </trans-unit>
        <trans-unit id="104a8aab4cf5a11201b887398168f2f5e1f87087" translate="yes" xml:space="preserve">
          <source>Ancestors::partial_cmp</source>
          <target state="translated">Ancestors::partial_cmp</target>
        </trans-unit>
        <trans-unit id="bed7abfd1f96e21405eb173c4d15c03b456d92a5" translate="yes" xml:space="preserve">
          <source>Ancestors::partition</source>
          <target state="translated">Ancestors::partition</target>
        </trans-unit>
        <trans-unit id="84cd0d32c4daeda367ba0a2ae2e2b6a7ff4841da" translate="yes" xml:space="preserve">
          <source>Ancestors::peekable</source>
          <target state="translated">Ancestors::peekable</target>
        </trans-unit>
        <trans-unit id="b4ddc60ef630227f7ade5b8c560fef259500316e" translate="yes" xml:space="preserve">
          <source>Ancestors::position</source>
          <target state="translated">Ancestors::position</target>
        </trans-unit>
        <trans-unit id="7a31ee815f86cdd427869f86ea4e16e837ac74a5" translate="yes" xml:space="preserve">
          <source>Ancestors::product</source>
          <target state="translated">Ancestors::product</target>
        </trans-unit>
        <trans-unit id="b560f4cdd9c918e68c647f28819fc526f4443425" translate="yes" xml:space="preserve">
          <source>Ancestors::rev</source>
          <target state="translated">Ancestors::rev</target>
        </trans-unit>
        <trans-unit id="2d6150b963da3a5f8bb4fbcf3bede9ac1d149eac" translate="yes" xml:space="preserve">
          <source>Ancestors::rposition</source>
          <target state="translated">Ancestors::rposition</target>
        </trans-unit>
        <trans-unit id="33695d4fc7bd02cc81076a7f065f59ae331ce9d8" translate="yes" xml:space="preserve">
          <source>Ancestors::scan</source>
          <target state="translated">Ancestors::scan</target>
        </trans-unit>
        <trans-unit id="a71e116d1152775af982054ee8766888b8c17bf5" translate="yes" xml:space="preserve">
          <source>Ancestors::size_hint</source>
          <target state="translated">Ancestors::size_hint</target>
        </trans-unit>
        <trans-unit id="1492747daf21eb6d17932ae78e4e1bb6900ec817" translate="yes" xml:space="preserve">
          <source>Ancestors::skip</source>
          <target state="translated">Ancestors::skip</target>
        </trans-unit>
        <trans-unit id="7ccb1c50d003cbcf82f746c7c89b476d0db40ef9" translate="yes" xml:space="preserve">
          <source>Ancestors::skip_while</source>
          <target state="translated">Ancestors::skip_while</target>
        </trans-unit>
        <trans-unit id="2d680c75e7e0a20bba67113ba634c0b9819ec275" translate="yes" xml:space="preserve">
          <source>Ancestors::step_by</source>
          <target state="translated">Ancestors::step_by</target>
        </trans-unit>
        <trans-unit id="bb4081cc4c0735468e080f3f00abdd7bfc4c7b73" translate="yes" xml:space="preserve">
          <source>Ancestors::sum</source>
          <target state="translated">Ancestors::sum</target>
        </trans-unit>
        <trans-unit id="b184ac7bf98e724a647631566c8e7b44261ba11d" translate="yes" xml:space="preserve">
          <source>Ancestors::take</source>
          <target state="translated">Ancestors::take</target>
        </trans-unit>
        <trans-unit id="551d6d8baae9a0ead4f49097f5951591191f29fd" translate="yes" xml:space="preserve">
          <source>Ancestors::take_while</source>
          <target state="translated">Ancestors::take_while</target>
        </trans-unit>
        <trans-unit id="f38b2d2e57427d6c5d34e24a9e37978f181043c7" translate="yes" xml:space="preserve">
          <source>Ancestors::to_owned</source>
          <target state="translated">Ancestors::to_owned</target>
        </trans-unit>
        <trans-unit id="bd8e948ee34c84cdc8f1385bf9b2d83abdbf9fb4" translate="yes" xml:space="preserve">
          <source>Ancestors::try_fold</source>
          <target state="translated">Ancestors::try_fold</target>
        </trans-unit>
        <trans-unit id="46ad3f23b6a14805c5bb02a0abccbaa9ad1f0c58" translate="yes" xml:space="preserve">
          <source>Ancestors::try_for_each</source>
          <target state="translated">Ancestors::try_for_each</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
