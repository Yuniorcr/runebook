<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="rust">
    <body>
      <group id="rust">
        <trans-unit id="7da42c45b54f4237c99325204711121b9f08beec" translate="yes" xml:space="preserve">
          <source>All kinds of ASCII whitespace are considered:</source>
          <target state="translated">すべての種類のASCIIホワイトスペースを考慮しています。</target>
        </trans-unit>
        <trans-unit id="3e530c202d9d3c48672f8f7b98a14e41befed3be" translate="yes" xml:space="preserve">
          <source>All kinds of whitespace are considered:</source>
          <target state="translated">あらゆる種類のホワイトスペースが考慮されています。</target>
        </trans-unit>
        <trans-unit id="9c42bdece20642dd1d10ab718ff507235d349b8d" translate="yes" xml:space="preserve">
          <source>All layouts have an associated non-negative size and a power-of-two alignment.</source>
          <target state="translated">すべてのレイアウトは、関連する非負のサイズと2乗のアライメントを持っています。</target>
        </trans-unit>
        <trans-unit id="ad65ecd6f4c6a3cd749629f3ba92add5fa618dd9" translate="yes" xml:space="preserve">
          <source>All layouts have an associated size and a power-of-two alignment.</source>
          <target state="translated">すべてのレイアウトには、関連するサイズとパワー・オブ・ツーのアライメントがあります。</target>
        </trans-unit>
        <trans-unit id="7178a9053518ff1c5e401dc1d4bee4c24f25359b" translate="yes" xml:space="preserve">
          <source>All of</source>
          <target state="translated">すべての</target>
        </trans-unit>
        <trans-unit id="32f70044558e382c5ebf59ec68e9d711cc2cb7b2" translate="yes" xml:space="preserve">
          <source>All of the coefficients get stored in registers, which means accessing the values is very fast. There are no bounds checks on the array access at runtime. All these optimizations that Rust is able to apply make the resulting code extremely efficient. Now that you know this, you can use iterators and closures without fear! They make code seem like it&amp;rsquo;s higher level but don&amp;rsquo;t impose a runtime performance penalty for doing so.</source>
          <target state="translated">すべての係数はレジスタに格納されます。つまり、値へのアクセスは非常に高速です。実行時の配列アクセスには境界チェックはありません。Rustが適用できるこれらすべての最適化により、結果のコードは非常に効率的になります。これがわかったので、イテレーターとクロージャーを恐れずに使用できます！それらはコードをより高いレベルのように見せますが、そうするために実行時のパフォーマンスのペナルティを課しません。</target>
        </trans-unit>
        <trans-unit id="17dabbf042cc2454dd1f0ba98c8b7c6f3be65ec5" translate="yes" xml:space="preserve">
          <source>All of the logic that manages the counts and value dropping is built into &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; and &lt;code&gt;Weak&amp;lt;T&amp;gt;&lt;/code&gt; and their implementations of the &lt;code&gt;Drop&lt;/code&gt; trait. By specifying that the relationship from a child to its parent should be a &lt;code&gt;Weak&amp;lt;T&amp;gt;&lt;/code&gt; reference in the definition of &lt;code&gt;Node&lt;/code&gt;, you&amp;rsquo;re able to have parent nodes point to child nodes and vice versa without creating a reference cycle and memory leaks.</source>
          <target state="translated">カウントと値のドロップを管理するすべてのロジックは、 &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; と &lt;code&gt;Weak&amp;lt;T&amp;gt;&lt;/code&gt; とそれらの &lt;code&gt;Drop&lt;/code&gt; トレイトの実装に組み込まれています。子からその親への関係が &lt;code&gt;Node&lt;/code&gt; の定義で &lt;code&gt;Weak&amp;lt;T&amp;gt;&lt;/code&gt; 参照になるように指定することにより、参照サイクルとメモリリークを作成せずに、親ノードを子ノードにポイントでき、その逆も可能です。</target>
        </trans-unit>
        <trans-unit id="469c3254d30ae896569972fb8c0f6e762f31a91d" translate="yes" xml:space="preserve">
          <source>All of the standard collections provide several iterators for performing bulk manipulation of their contents. The three primary iterators almost every collection should provide are &lt;code&gt;iter&lt;/code&gt;, &lt;code&gt;iter_mut&lt;/code&gt;, and &lt;code&gt;into_iter&lt;/code&gt;. Some of these are not provided on collections where it would be unsound or unreasonable to provide them.</source>
          <target state="translated">すべての標準コレクションには、コンテンツの一括操作を実行するためのいくつかの反復子が用意されています。ほとんどすべてのコレクションが提供する必要がある3つの主要なイテレータは、 &lt;code&gt;iter&lt;/code&gt; 、 &lt;code&gt;iter_mut&lt;/code&gt; 、および &lt;code&gt;into_iter&lt;/code&gt; です。これらのいくつかは、それらを提供することが不健全または不合理であるコレクションでは提供されません。</target>
        </trans-unit>
        <trans-unit id="7c09f50beeaa399a934ba76d5cc5d913f4961d31" translate="yes" xml:space="preserve">
          <source>All of these are valid &lt;code&gt;String&lt;/code&gt; values.</source>
          <target state="translated">これらはすべて有効な &lt;code&gt;String&lt;/code&gt; 値です。</target>
        </trans-unit>
        <trans-unit id="3488f647e2016335e532591f4617d056149f656a" translate="yes" xml:space="preserve">
          <source>All of these method calls are possible because we specified how the &lt;code&gt;next&lt;/code&gt; method works, and the standard library provides default implementations for other methods that call &lt;code&gt;next&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;next&lt;/code&gt; メソッドの動作方法を指定したため、これらのメソッド呼び出しはすべて可能であり、標準ライブラリは、 &lt;code&gt;next&lt;/code&gt; を呼び出す他のメソッドのデフォルト実装を提供します。</target>
        </trans-unit>
        <trans-unit id="2a8409870b71900361c6e9ce41cc4d8b31f5a720" translate="yes" xml:space="preserve">
          <source>All options are initially set to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">すべてのオプションは、最初は &lt;code&gt;false&lt;/code&gt; に設定されています。</target>
        </trans-unit>
        <trans-unit id="cec813890e4d07a2defc7bce522b39b7b6522a4d" translate="yes" xml:space="preserve">
          <source>All other arguments given to the &lt;code&gt;inline&lt;/code&gt; attribute will return this error. Example:</source>
          <target state="translated">&lt;code&gt;inline&lt;/code&gt; 属性に他のすべての引数を指定すると、このエラーが返されます。例：</target>
        </trans-unit>
        <trans-unit id="110d2b10be35d17317e6c561cf91a4fabbf8e826" translate="yes" xml:space="preserve">
          <source>All other characters are given hexadecimal Unicode escapes; see &lt;a href=&quot;#method.escape_unicode&quot;&gt;&lt;code&gt;escape_unicode&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">他のすべての文字には、16進数のUnicodeエスケープが与えられます。&lt;a href=&quot;#method.escape_unicode&quot;&gt; &lt;code&gt;escape_unicode&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="f76ce538d07b9974a525f600e48b7f5dff4ae16c" translate="yes" xml:space="preserve">
          <source>All other fragment specifiers have no restrictions.</source>
          <target state="translated">他のすべてのフラグメント指定子には制限はありません。</target>
        </trans-unit>
        <trans-unit id="fef84ba857bf1c83a92f8d5a5b2d52afc2b3c691" translate="yes" xml:space="preserve">
          <source>All pointers (except for the null pointer) are valid for all operations of &lt;a href=&quot;https://doc.rust-lang.org/nomicon/exotic-sizes.html#zero-sized-types-zsts&quot;&gt;size zero&lt;/a&gt;.</source>
          <target state="translated">すべてのポインター（ヌルポインターを除く）は、&lt;a href=&quot;https://doc.rust-lang.org/nomicon/exotic-sizes.html#zero-sized-types-zsts&quot;&gt;サイズがゼロの&lt;/a&gt;すべての操作に有効です。</target>
        </trans-unit>
        <trans-unit id="bcec8da89ce19312f810d6e8b0a4c1c994af8c3f" translate="yes" xml:space="preserve">
          <source>All pointers in Rust are explicit first-class values. They can be moved or copied, stored into data structs, and returned from functions.</source>
          <target state="translated">Rust のすべてのポインタは明示的なファーストクラス値です。これらは移動やコピー、データ構造体への格納、関数からの戻り値として使用できます。</target>
        </trans-unit>
        <trans-unit id="6a33c45e166bf3f976aac4c7eec793b7d8946ca1" translate="yes" xml:space="preserve">
          <source>All programmers strive to make their code easy to understand, but sometimes extra explanation is warranted. In these cases, programmers leave notes, or &lt;em&gt;comments&lt;/em&gt;, in their source code that the compiler will ignore but people reading the source code may find useful.</source>
          <target state="translated">すべてのプログラマーはコードを理解しやすくするよう努めていますが、追加の説明が必要な場合もあります。このような場合、プログラマーはソースコードにメモまたは&lt;em&gt;コメントを&lt;/em&gt;残しますが、コンパイラーは無視しますが、ソースコードを読んでいる人には便利です。</target>
        </trans-unit>
        <trans-unit id="aa0c879bcf5cab9e7f4749d5ede013d5bf918c1f" translate="yes" xml:space="preserve">
          <source>All programs have to manage the way they use a computer&amp;rsquo;s memory while running. Some languages have garbage collection that constantly looks for no longer used memory as the program runs; in other languages, the programmer must explicitly allocate and free the memory. Rust uses a third approach: memory is managed through a system of ownership with a set of rules that the compiler checks at compile time. None of the ownership features slow down your program while it&amp;rsquo;s running.</source>
          <target state="translated">すべてのプログラムは、実行中にコンピュータのメモリを使用する方法を管理する必要があります。一部の言語には、プログラムの実行時に使用されなくなったメモリを常に探すガベージコレクションがあります。他の言語では、プログラマは明示的にメモリを割り当てて解放する必要があります。Rustは3番目のアプローチを使用します。メモリーは、コンパイラーがコンパイル時にチェックする一連のルールを持つ所有権のシステムを通じて管理されます。所有権機能は、プログラムの実行中にプログラムの速度を低下させることはありません。</target>
        </trans-unit>
        <trans-unit id="cf610b10a23cb06f62489f071586a11ed04b1ece" translate="yes" xml:space="preserve">
          <source>All reads from the returned reader will return &lt;a href=&quot;../result/enum.result#variant.Ok&quot;&gt;&lt;code&gt;Ok&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(0)&lt;/code&gt;.</source>
          <target state="translated">返されたリーダーからのすべての読み取りは&lt;a href=&quot;../result/enum.result#variant.Ok&quot;&gt; &lt;code&gt;Ok&lt;/code&gt; &lt;/a&gt; &lt;code&gt;(0)&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="5edadac5bb39f603d58e3300e69ef3e103ed0e48" translate="yes" xml:space="preserve">
          <source>All reads from this reader will succeed by filling the specified buffer with the given byte.</source>
          <target state="translated">このリーダーからのすべての読み取りは、指定されたバイトで指定されたバッファを埋めることで成功します。</target>
        </trans-unit>
        <trans-unit id="8042ca5a8b0159faa7d15d89ddf16924d0bee8ca" translate="yes" xml:space="preserve">
          <source>All results of &lt;code&gt;next()&lt;/code&gt; need to be identical to the results of &lt;code&gt;next_back()&lt;/code&gt; in reverse order.</source>
          <target state="translated">&lt;code&gt;next()&lt;/code&gt; の結果はすべて、逆の順序で &lt;code&gt;next_back()&lt;/code&gt; の結果と同一である必要があります。</target>
        </trans-unit>
        <trans-unit id="051b0a6da7e5a99366866472afe4cedd9c4ae587" translate="yes" xml:space="preserve">
          <source>All strings that adhere to the following &lt;a href=&quot;https://www.w3.org/TR/REC-xml/#sec-notation&quot;&gt;EBNF&lt;/a&gt; grammar will result in an &lt;a href=&quot;../result/enum.result#Ok.v&quot;&gt;&lt;code&gt;Ok&lt;/code&gt;&lt;/a&gt; being returned:</source>
          <target state="translated">次の&lt;a href=&quot;https://www.w3.org/TR/REC-xml/#sec-notation&quot;&gt;EBNF&lt;/a&gt;文法に準拠するすべての文字列は、&lt;a href=&quot;../result/enum.result#Ok.v&quot;&gt; &lt;code&gt;Ok&lt;/code&gt; &lt;/a&gt;が返されます。</target>
        </trans-unit>
        <trans-unit id="ba6c1035e6000e531913744213ce54c88bb453f8" translate="yes" xml:space="preserve">
          <source>All strings that adhere to the following &lt;a href=&quot;https://www.w3.org/TR/REC-xml/#sec-notation&quot;&gt;EBNF&lt;/a&gt; grammar will result in an &lt;a href=&quot;../result/enum.result#variant.Ok&quot;&gt;&lt;code&gt;Ok&lt;/code&gt;&lt;/a&gt; being returned:</source>
          <target state="translated">All strings that adhere to the following &lt;a href=&quot;https://www.w3.org/TR/REC-xml/#sec-notation&quot;&gt;EBNF&lt;/a&gt; grammar will result in an &lt;a href=&quot;../result/enum.result#variant.Ok&quot;&gt; &lt;code&gt;Ok&lt;/code&gt; &lt;/a&gt; being returned:</target>
        </trans-unit>
        <trans-unit id="8c2330d9e11176797f3b69c4b492614aa87568d1" translate="yes" xml:space="preserve">
          <source>All strings that adhere to the following &lt;a href=&quot;https://www.w3.org/TR/REC-xml/#sec-notation&quot;&gt;EBNF&lt;/a&gt; grammar will result in an &lt;a href=&quot;result/enum.result#Ok.v&quot;&gt;&lt;code&gt;Ok&lt;/code&gt;&lt;/a&gt; being returned:</source>
          <target state="translated">次の&lt;a href=&quot;https://www.w3.org/TR/REC-xml/#sec-notation&quot;&gt;EBNF&lt;/a&gt;文法に準拠するすべての文字列は、&lt;a href=&quot;result/enum.result#Ok.v&quot;&gt; &lt;code&gt;Ok&lt;/code&gt; &lt;/a&gt;が返されます。</target>
        </trans-unit>
        <trans-unit id="5099415fb85a9568ce08c4de6d590b1962a9de28" translate="yes" xml:space="preserve">
          <source>All strings that adhere to the following &lt;a href=&quot;https://www.w3.org/TR/REC-xml/#sec-notation&quot;&gt;EBNF&lt;/a&gt; grammar will result in an &lt;a href=&quot;result/enum.result#variant.Ok&quot;&gt;&lt;code&gt;Ok&lt;/code&gt;&lt;/a&gt; being returned:</source>
          <target state="translated">All strings that adhere to the following &lt;a href=&quot;https://www.w3.org/TR/REC-xml/#sec-notation&quot;&gt;EBNF&lt;/a&gt; grammar will result in an &lt;a href=&quot;result/enum.result#variant.Ok&quot;&gt; &lt;code&gt;Ok&lt;/code&gt; &lt;/a&gt; being returned:</target>
        </trans-unit>
        <trans-unit id="d19c4500c8b81bcefce226435a932d9bd67dd1d4" translate="yes" xml:space="preserve">
          <source>All supertraits must also be object safe.</source>
          <target state="translated">すべてのスーパーシステムは、オブジェクトの安全性も確保しなければなりません。</target>
        </trans-unit>
        <trans-unit id="3834b26accc0c7926a85719d5492f93bbdde2cd6" translate="yes" xml:space="preserve">
          <source>All the Places Patterns Can Be Used</source>
          <target state="translated">パターンが使える場所はすべて</target>
        </trans-unit>
        <trans-unit id="70ddc33f2c0eb4587fa8e2cac6e8f77be9184d95" translate="yes" xml:space="preserve">
          <source>All the code we&amp;rsquo;ve discussed so far has had Rust&amp;rsquo;s memory safety guarantees enforced at compile time. However, Rust has a second language hidden inside it that doesn&amp;rsquo;t enforce these memory safety guarantees: it&amp;rsquo;s called &lt;em&gt;unsafe Rust&lt;/em&gt; and works just like regular Rust, but gives us extra superpowers.</source>
          <target state="translated">これまでに説明したすべてのコードには、コンパイル時にRustのメモリの安全性が保証されています。ただし、Rustの内部には、これらのメモリの安全性を保証しない第2の言語が隠されています。これは&lt;em&gt;安全でないRust&lt;/em&gt;と呼ばれ、通常のRustと同じように機能しますが、追加の超能力を提供します。</target>
        </trans-unit>
        <trans-unit id="5d094a6ebf518b356f6cc88f0daffccbeaa88d1a" translate="yes" xml:space="preserve">
          <source>All the floating point types, such as &lt;code&gt;f64&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;f64&lt;/code&gt; などのすべての浮動小数点型。</target>
        </trans-unit>
        <trans-unit id="49768c9761f944e57fd8b28ffb7ccca3ce0255bf" translate="yes" xml:space="preserve">
          <source>All the integer types, such as &lt;code&gt;u32&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;u32&lt;/code&gt; などのすべての整数型。</target>
        </trans-unit>
        <trans-unit id="7aad067d2eb4fd66349ef7460833027940768e31" translate="yes" xml:space="preserve">
          <source>All the traits in &lt;a href=&quot;fmt/index&quot;&gt;&lt;code&gt;std::fmt&lt;/code&gt;&lt;/a&gt; except &lt;a href=&quot;fmt/trait.pointer&quot;&gt;&lt;code&gt;Pointer&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;fmt/trait.write&quot;&gt;&lt;code&gt;fmt::Write&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;fmt/trait.pointer&quot;&gt; &lt;code&gt;Pointer&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;fmt/trait.write&quot;&gt; &lt;code&gt;fmt::Write&lt;/code&gt; &lt;/a&gt;を除く&lt;a href=&quot;fmt/index&quot;&gt; &lt;code&gt;std::fmt&lt;/code&gt; &lt;/a&gt;すべての特性</target>
        </trans-unit>
        <trans-unit id="5fbc378a4bea0c74a504553c4655c69b13216d43" translate="yes" xml:space="preserve">
          <source>All tokens have an associated &lt;code&gt;Span&lt;/code&gt;. A &lt;code&gt;Span&lt;/code&gt; is an opaque value that cannot be modified but can be manufactured. &lt;code&gt;Span&lt;/code&gt;s represent an extent of source code within a program and are primarily used for error reporting. You can modify the &lt;code&gt;Span&lt;/code&gt; of any token.</source>
          <target state="translated">すべてのトークンには &lt;code&gt;Span&lt;/code&gt; が関連付けられています。A &lt;code&gt;Span&lt;/code&gt; 変更することができないが、製造することができる不透明な値です。 &lt;code&gt;Span&lt;/code&gt; は、プログラム内のソースコードの範囲を表し、主にエラー報告に使用されます。あなたは修正することができます &lt;code&gt;Span&lt;/code&gt; 任意のトークンスパンをできます。</target>
        </trans-unit>
        <trans-unit id="c4b7c6a0fbafa4ae17e0c283d126acf9c731f848" translate="yes" xml:space="preserve">
          <source>All traits define an implicit type parameter &lt;code&gt;Self&lt;/code&gt; that refers to &quot;the type that is implementing this interface&quot;. Traits may also contain additional type parameters. These type parameters, including &lt;code&gt;Self&lt;/code&gt;, may be constrained by other traits and so forth &lt;a href=&quot;generics&quot;&gt;as usual&lt;/a&gt;.</source>
          <target state="translated">すべての特性は、「このインターフェースを実装している型」を参照する暗黙の型パラメーター &lt;code&gt;Self&lt;/code&gt; を定義します。トレイトには、追加の型パラメーターも含まれる場合があります。 &lt;code&gt;Self&lt;/code&gt; を含むこれらの型パラメーターは、他の特性などによって制約される場合があります。&lt;a href=&quot;generics&quot;&gt;通常どおり&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e6af2c7840468532a887d826478745d410145630" translate="yes" xml:space="preserve">
          <source>All type parameters have an implicit bound of &lt;code&gt;Sized&lt;/code&gt;. The special syntax &lt;code&gt;?Sized&lt;/code&gt; can be used to remove this bound if it's not appropriate.</source>
          <target state="translated">すべての型パラメーターには、 &lt;code&gt;Sized&lt;/code&gt; の暗黙の境界があります。特別な構文 &lt;code&gt;?Sized&lt;/code&gt; を使用して、適切でない場合にこの境界を削除できます。</target>
        </trans-unit>
        <trans-unit id="9fcb4ee73e3ea3e00af83f66cf487fb2ad10ff05" translate="yes" xml:space="preserve">
          <source>All types in a tuple struct aren't the same when using the &lt;code&gt;#[simd]&lt;/code&gt; attribute.</source>
          <target state="translated">All types in a tuple struct aren't the same when using the &lt;code&gt;#[simd]&lt;/code&gt; attribute.</target>
        </trans-unit>
        <trans-unit id="687bde44d55450fc7926f1ddbef8c12777b88228" translate="yes" xml:space="preserve">
          <source>All user-defined composite types (&lt;code&gt;struct&lt;/code&gt;s, &lt;code&gt;enum&lt;/code&gt;s, and &lt;code&gt;union&lt;/code&gt;s) have a &lt;em&gt;representation&lt;/em&gt; that specifies what the layout is for the type. The possible representations for a type are:</source>
          <target state="translated">すべてのユーザー定義の複合型（ &lt;code&gt;struct&lt;/code&gt; 、 &lt;code&gt;enum&lt;/code&gt; 、および &lt;code&gt;union&lt;/code&gt; ）には、その型のレイアウトを指定する&lt;em&gt;表現&lt;/em&gt;があります。タイプの可能な表現は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="b66aa8bf38f6384faa05e5ba7a817e6473b9a5b6" translate="yes" xml:space="preserve">
          <source>All values have an alignment and size.</source>
          <target state="translated">すべての値には整列とサイズがあります。</target>
        </trans-unit>
        <trans-unit id="6b3bc16295776314b52aa5587d61ce1888ff84c1" translate="yes" xml:space="preserve">
          <source>Alloc</source>
          <target state="translated">Alloc</target>
        </trans-unit>
        <trans-unit id="73c626eee3cffa40774dfe1fcb9f6b9bd69dc64f" translate="yes" xml:space="preserve">
          <source>Alloc::alloc</source>
          <target state="translated">Alloc::alloc</target>
        </trans-unit>
        <trans-unit id="58fa8f803498e5ec9addefde8bfd45a79dbec5ed" translate="yes" xml:space="preserve">
          <source>Alloc::alloc_array</source>
          <target state="translated">Alloc::alloc_array</target>
        </trans-unit>
        <trans-unit id="b50e7d6a8a9d06e47daea96c8b2aea5c45efb165" translate="yes" xml:space="preserve">
          <source>Alloc::alloc_excess</source>
          <target state="translated">Alloc::alloc_excess</target>
        </trans-unit>
        <trans-unit id="889b443e61594610d30213145f921f146db36832" translate="yes" xml:space="preserve">
          <source>Alloc::alloc_one</source>
          <target state="translated">Alloc::alloc_one</target>
        </trans-unit>
        <trans-unit id="a34261c2be453348710c37c58e7b9c83398884d8" translate="yes" xml:space="preserve">
          <source>Alloc::alloc_zeroed</source>
          <target state="translated">Alloc::alloc_zeroed</target>
        </trans-unit>
        <trans-unit id="7d3d2688c4fd76b53fe3390539a364662ab17d4b" translate="yes" xml:space="preserve">
          <source>Alloc::dealloc</source>
          <target state="translated">Alloc::dealloc</target>
        </trans-unit>
        <trans-unit id="640d5625de8ef766306d60749a2169115e55e156" translate="yes" xml:space="preserve">
          <source>Alloc::dealloc_array</source>
          <target state="translated">Alloc::dealloc_array</target>
        </trans-unit>
        <trans-unit id="7053fc65b9dd32b26e961ddd07f10fe845724b56" translate="yes" xml:space="preserve">
          <source>Alloc::dealloc_one</source>
          <target state="translated">Alloc::dealloc_one</target>
        </trans-unit>
        <trans-unit id="c1a3b352f967fd646042d5ec8feb84a7842b4835" translate="yes" xml:space="preserve">
          <source>Alloc::grow_in_place</source>
          <target state="translated">Alloc::grow_in_place</target>
        </trans-unit>
        <trans-unit id="b0c3031aac44345a0cd3601e017910c7886cd822" translate="yes" xml:space="preserve">
          <source>Alloc::realloc</source>
          <target state="translated">Alloc::realloc</target>
        </trans-unit>
        <trans-unit id="50682f5a6557029f4ae580a726dd0a2a8ee83c83" translate="yes" xml:space="preserve">
          <source>Alloc::realloc_array</source>
          <target state="translated">Alloc::realloc_array</target>
        </trans-unit>
        <trans-unit id="71b9b4276801f0c0a766cb281400a5a34452c7e1" translate="yes" xml:space="preserve">
          <source>Alloc::realloc_excess</source>
          <target state="translated">Alloc::realloc_excess</target>
        </trans-unit>
        <trans-unit id="caed8ad7c332dd652a64a2f5a64ee5adce448144" translate="yes" xml:space="preserve">
          <source>Alloc::shrink_in_place</source>
          <target state="translated">Alloc::shrink_in_place</target>
        </trans-unit>
        <trans-unit id="4bdde8e404d1e339cdf8e89ef42138d76fb64cb5" translate="yes" xml:space="preserve">
          <source>Alloc::usable_size</source>
          <target state="translated">Alloc::usable_size</target>
        </trans-unit>
        <trans-unit id="74f9a2a318fbafb57c2a318b7f97cd7f558235f5" translate="yes" xml:space="preserve">
          <source>AllocErr</source>
          <target state="translated">AllocErr</target>
        </trans-unit>
        <trans-unit id="81a1e8e44229166f6c5d59b8b5cdfbd7de11a910" translate="yes" xml:space="preserve">
          <source>AllocErr::borrow</source>
          <target state="translated">AllocErr::borrow</target>
        </trans-unit>
        <trans-unit id="cab0d29cfc07f03d441e5891d8fdae354b136ec1" translate="yes" xml:space="preserve">
          <source>AllocErr::borrow_mut</source>
          <target state="translated">AllocErr::borrow_mut</target>
        </trans-unit>
        <trans-unit id="c63e5f5e71fd2207c8a6514237ae70d9dca95cf3" translate="yes" xml:space="preserve">
          <source>AllocErr::cause</source>
          <target state="translated">AllocErr::cause</target>
        </trans-unit>
        <trans-unit id="09ff0aa0e6ca318ce203b20e17f08354650229f1" translate="yes" xml:space="preserve">
          <source>AllocErr::clone</source>
          <target state="translated">AllocErr::clone</target>
        </trans-unit>
        <trans-unit id="777d6911608c872b31c4bdb18d3b776c08a9b8f5" translate="yes" xml:space="preserve">
          <source>AllocErr::clone_from</source>
          <target state="translated">AllocErr::clone_from</target>
        </trans-unit>
        <trans-unit id="b678a089fb922c246660ee4daaf38a5251355da7" translate="yes" xml:space="preserve">
          <source>AllocErr::clone_into</source>
          <target state="translated">AllocErr::clone_into</target>
        </trans-unit>
        <trans-unit id="5df229543f81998e9da115264fa06013a927adb1" translate="yes" xml:space="preserve">
          <source>AllocErr::description</source>
          <target state="translated">AllocErr::description</target>
        </trans-unit>
        <trans-unit id="d2cf0a94fd5cf29c79c5284616875b84972fb312" translate="yes" xml:space="preserve">
          <source>AllocErr::eq</source>
          <target state="translated">AllocErr::eq</target>
        </trans-unit>
        <trans-unit id="5881f4abcdbf06d5924b4a78a521cc0027e69523" translate="yes" xml:space="preserve">
          <source>AllocErr::fmt</source>
          <target state="translated">AllocErr::fmt</target>
        </trans-unit>
        <trans-unit id="270a3da0beb21d444fb57d0c363b8a08cfe0f022" translate="yes" xml:space="preserve">
          <source>AllocErr::from</source>
          <target state="translated">AllocErr::from</target>
        </trans-unit>
        <trans-unit id="98b28dbbeacbc8b3f7530e8cbb0f5369608cd809" translate="yes" xml:space="preserve">
          <source>AllocErr::into</source>
          <target state="translated">AllocErr::into</target>
        </trans-unit>
        <trans-unit id="039711c278e014b513a0be997690fca2416f8474" translate="yes" xml:space="preserve">
          <source>AllocErr::ne</source>
          <target state="translated">AllocErr::ne</target>
        </trans-unit>
        <trans-unit id="ffa94c7186e9f5d1d7bf9c63828fb87e4a775ad5" translate="yes" xml:space="preserve">
          <source>AllocErr::source</source>
          <target state="translated">AllocErr::source</target>
        </trans-unit>
        <trans-unit id="0aeb755570b957275d6d9d5317212dc6a6535090" translate="yes" xml:space="preserve">
          <source>AllocErr::to_owned</source>
          <target state="translated">AllocErr::to_owned</target>
        </trans-unit>
        <trans-unit id="0e17e4e80e3c6af6ed45e6c032cf33d55d346e46" translate="yes" xml:space="preserve">
          <source>AllocErr::to_string</source>
          <target state="translated">AllocErr::to_string</target>
        </trans-unit>
        <trans-unit id="3e40fc0676c76a71ca131dafb97f38662652bfbf" translate="yes" xml:space="preserve">
          <source>AllocErr::try_from</source>
          <target state="translated">AllocErr::try_from</target>
        </trans-unit>
        <trans-unit id="34d1124cc06e84256717b819e1f63b955e0350bf" translate="yes" xml:space="preserve">
          <source>AllocErr::try_into</source>
          <target state="translated">AllocErr::try_into</target>
        </trans-unit>
        <trans-unit id="663b204a54c41c16c072ee135d91fa4be49de349" translate="yes" xml:space="preserve">
          <source>AllocErr::type_id</source>
          <target state="translated">AllocErr::type_id</target>
        </trans-unit>
        <trans-unit id="fc99a18ee7862835928c295e62957162ad4eb462" translate="yes" xml:space="preserve">
          <source>AllocError</source>
          <target state="translated">AllocError</target>
        </trans-unit>
        <trans-unit id="4893f8fbd4cad55fcdd644464bc1fe91c279e953" translate="yes" xml:space="preserve">
          <source>AllocRef</source>
          <target state="translated">AllocRef</target>
        </trans-unit>
        <trans-unit id="4893c8174f6c1eabc41e7843e70d7ebcff1b1f84" translate="yes" xml:space="preserve">
          <source>Allocate memory as described by the given &lt;code&gt;layout&lt;/code&gt;.</source>
          <target state="translated">指定された &lt;code&gt;layout&lt;/code&gt; 説明に従ってメモリを割り当てます。</target>
        </trans-unit>
        <trans-unit id="cd02c9bc4eedba216d90a16d722506e0ce680a8a" translate="yes" xml:space="preserve">
          <source>Allocate memory as described by the given &lt;code&gt;layout&lt;/code&gt;. &lt;a href=&quot;trait.globalalloc#tymethod.alloc&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">指定された &lt;code&gt;layout&lt;/code&gt; 説明に従ってメモリを割り当てます。&lt;a href=&quot;trait.globalalloc#tymethod.alloc&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="74c59d8374e4ee1d975ce714a71b5fcdbb7aacac" translate="yes" xml:space="preserve">
          <source>Allocate memory with the global allocator.</source>
          <target state="translated">グローバルアロケータでメモリを割り当てます。</target>
        </trans-unit>
        <trans-unit id="cfb8411e19f0f79e91b6b66f6609da2b9991a1e5" translate="yes" xml:space="preserve">
          <source>Allocate zero-initialized memory with the global allocator.</source>
          <target state="translated">グローバルアロケータを使用して、ゼロ初期化されたメモリを割り当てます。</target>
        </trans-unit>
        <trans-unit id="1bfdf7915bd5c3db982b39e0a3309425f8ee260d" translate="yes" xml:space="preserve">
          <source>Allocates a block suitable for holding &lt;code&gt;n&lt;/code&gt; instances of &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; の &lt;code&gt;n&lt;/code&gt; 個のインスタンスを保持するのに適したブロックを割り当てます。</target>
        </trans-unit>
        <trans-unit id="c63c156459af2e92bb9b73d7f0f9844433b5dc2f" translate="yes" xml:space="preserve">
          <source>Allocates a block suitable for holding &lt;code&gt;n&lt;/code&gt; instances of &lt;code&gt;T&lt;/code&gt;. &lt;a href=&quot;trait.alloc#method.alloc_array&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; の &lt;code&gt;n&lt;/code&gt; 個のインスタンスを保持するのに適したブロックを割り当てます。&lt;a href=&quot;trait.alloc#method.alloc_array&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ed375cd7b209e0c5769df096531bae03a872bbbb" translate="yes" xml:space="preserve">
          <source>Allocates a block suitable for holding an instance of &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; のインスタンスを保持するのに適したブロックを割り当てます。</target>
        </trans-unit>
        <trans-unit id="02c72ac7d36294390fedc764c2754fe1636d64b1" translate="yes" xml:space="preserve">
          <source>Allocates a block suitable for holding an instance of &lt;code&gt;T&lt;/code&gt;. &lt;a href=&quot;trait.alloc#method.alloc_one&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; のインスタンスを保持するのに適したブロックを割り当てます。&lt;a href=&quot;trait.alloc#method.alloc_one&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="76e23de7e691468d4d99aac266130e3bc34f2ea4" translate="yes" xml:space="preserve">
          <source>Allocates an empty &lt;code&gt;PathBuf&lt;/code&gt;.</source>
          <target state="translated">空の &lt;code&gt;PathBuf&lt;/code&gt; を割り当てますます。</target>
        </trans-unit>
        <trans-unit id="f9ce219d6c4b42c1f87ab6030532c065b1fec11f" translate="yes" xml:space="preserve">
          <source>Allocates memory on the heap and then places &lt;code&gt;x&lt;/code&gt; into it.</source>
          <target state="translated">ヒープにメモリを割り当ててから、 &lt;code&gt;x&lt;/code&gt; を配置しますをします。</target>
        </trans-unit>
        <trans-unit id="e910169c58168ed4f75b19228b519cfb61699e61" translate="yes" xml:space="preserve">
          <source>Allow generic type parameter to be a dynamically sized type</source>
          <target state="translated">汎用型パラメータが動的なサイズの型であることを許可する</target>
        </trans-unit>
        <trans-unit id="40680c6330eab7e25541ffbe63efc1d14385635b" translate="yes" xml:space="preserve">
          <source>Allow users to add text content only when a post is in the &lt;code&gt;Draft&lt;/code&gt; state. Hint: have the state object responsible for what might change about the content but not responsible for modifying the &lt;code&gt;Post&lt;/code&gt;.</source>
          <target state="translated">投稿が &lt;code&gt;Draft&lt;/code&gt; 状態の場合にのみ、ユーザーがテキストコンテンツを追加できるようにします。ヒント：変更を担当したコンテンツではなくについて変更される可能性があります何のために責任を負う状態オブジェクト持っている &lt;code&gt;Post&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6cb50b4ef5745cf62353aeff34203276011ef50f" translate="yes" xml:space="preserve">
          <source>Allowing Access from Multiple Threads with &lt;code id=&quot;allowing-access-from-multiple-threads-with-sync&quot;&gt;Sync&lt;/code&gt;</source>
          <target state="translated">&lt;code id=&quot;allowing-access-from-multiple-threads-with-sync&quot;&gt;Sync&lt;/code&gt; 複数のスレッドからのアクセスを許可する</target>
        </trans-unit>
        <trans-unit id="fae2d8f4c50be8a20cdea347ace493568595fcd3" translate="yes" xml:space="preserve">
          <source>Allowing Multiple Guesses with Looping</source>
          <target state="translated">ループを使った複数の推測を可能にする</target>
        </trans-unit>
        <trans-unit id="7db289670d5f2b576ba5fbc25cdc4ef16295c536" translate="yes" xml:space="preserve">
          <source>Allowing Transference of Ownership Between Threads with &lt;code id=&quot;allowing-transference-of-ownership-between-threads-with-send&quot;&gt;Send&lt;/code&gt;</source>
          <target state="translated">スレッド間の所有権の譲渡を許可する &lt;code id=&quot;allowing-transference-of-ownership-between-threads-with-send&quot;&gt;Send&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fb09e5f22f3b7d16947a2ecaccff480c6609f901" translate="yes" xml:space="preserve">
          <source>Almost always it is better to use &lt;code&gt;Vec&lt;/code&gt; or &lt;a href=&quot;../vec_deque/struct.vecdeque&quot;&gt;&lt;code&gt;VecDeque&lt;/code&gt;&lt;/a&gt; instead of &lt;a href=&quot;struct.linkedlist&quot;&gt;&lt;code&gt;LinkedList&lt;/code&gt;&lt;/a&gt;. In general, array-based containers are faster, more memory efficient and make better use of CPU cache.</source>
          <target state="translated">ほとんどの場合、&lt;a href=&quot;../vec_deque/struct.vecdeque&quot;&gt; &lt;code&gt;VecDeque&lt;/code&gt; &lt;/a&gt;代わりに &lt;code&gt;Vec&lt;/code&gt; またはVecDequeを使用することをお&lt;a href=&quot;struct.linkedlist&quot;&gt; &lt;code&gt;LinkedList&lt;/code&gt; &lt;/a&gt;ます。一般に、アレイベースのコンテナはより高速で、メモリ効率が高く、CPUキャッシュをより有効に利用します。</target>
        </trans-unit>
        <trans-unit id="96a3f97ad5d3ab3ce2ee9333276a6a44f6055cf9" translate="yes" xml:space="preserve">
          <source>Almost always it is better to use &lt;code&gt;Vec&lt;/code&gt; or &lt;code&gt;VecDeque&lt;/code&gt; instead of &lt;code&gt;LinkedList&lt;/code&gt;. In general, array-based containers are faster, more memory efficient and make better use of CPU cache.</source>
          <target state="translated">ほとんどの場合、 &lt;code&gt;VecDeque&lt;/code&gt; 代わりに &lt;code&gt;Vec&lt;/code&gt; またはVecDequeを使用することをお &lt;code&gt;LinkedList&lt;/code&gt; ます。一般に、アレイベースのコンテナはより高速で、メモリ効率が高く、CPUキャッシュをより有効に利用します。</target>
        </trans-unit>
        <trans-unit id="30066ada2ed0aa1faf9262f27c4ed17333b52206" translate="yes" xml:space="preserve">
          <source>Along the way, we&amp;rsquo;ll show how to make our command line tool use features of the terminal that many command line tools use. We&amp;rsquo;ll read the value of an environment variable to allow the user to configure the behavior of our tool. We&amp;rsquo;ll also print error messages to the standard error console stream (&lt;code&gt;stderr&lt;/code&gt;) instead of standard output (&lt;code&gt;stdout&lt;/code&gt;), so, for example, the user can redirect successful output to a file while still seeing error messages onscreen.</source>
          <target state="translated">途中で、多くのコマンドラインツールが使用するターミナルの機能をコマンドラインツールで使用する方法を示します。環境変数の値を読み取り、ユーザーがツールの動作を構成できるようにします。エラーメッセージは、標準出力（ &lt;code&gt;stdout&lt;/code&gt; ）ではなく、標準エラーコンソールストリーム（ &lt;code&gt;stderr&lt;/code&gt; ）にも出力します。）ため、たとえば、ユーザーは画面にエラーメッセージを表示したまま、正常な出力をファイルにリダイレクトできます。</target>
        </trans-unit>
        <trans-unit id="2cbf8cd5d5a46820a0f6ab73279f92ce571b3bc8" translate="yes" xml:space="preserve">
          <source>Along with being made public via &lt;code&gt;pub&lt;/code&gt;, &lt;code&gt;fn&lt;/code&gt; can also have an &lt;a href=&quot;keyword.extern&quot;&gt;&lt;code&gt;extern&lt;/code&gt;&lt;/a&gt; added for use in FFI.</source>
          <target state="translated">&lt;code&gt;fn&lt;/code&gt; は、 &lt;code&gt;pub&lt;/code&gt; を介して公開されるだけでなく、FFIで使用するために&lt;a href=&quot;keyword.extern&quot;&gt; &lt;code&gt;extern&lt;/code&gt; &lt;/a&gt;追加することもできます。</target>
        </trans-unit>
        <trans-unit id="569f87a8387e1554badafba00588c85d0f8bf792" translate="yes" xml:space="preserve">
          <source>Along with the newtype pattern, Rust provides the ability to declare a &lt;em&gt;type alias&lt;/em&gt; to give an existing type another name. For this we use the &lt;code&gt;type&lt;/code&gt; keyword. For example, we can create the alias &lt;code&gt;Kilometers&lt;/code&gt; to &lt;code&gt;i32&lt;/code&gt; like so:</source>
          <target state="translated">Rustには、newtypeパターンに加えて、&lt;em&gt;型エイリアス&lt;/em&gt;を宣言して既存の型に別の名前を付ける機能があります。これには、 &lt;code&gt;type&lt;/code&gt; キーワードを使用します。たとえば、次のように &lt;code&gt;i32&lt;/code&gt; に &lt;code&gt;Kilometers&lt;/code&gt; というエイリアスを作成できます。</target>
        </trans-unit>
        <trans-unit id="6444cb062f09d53622baea0cd17deb96b9dc9f75" translate="yes" xml:space="preserve">
          <source>Also discussed were the &lt;code&gt;Deref&lt;/code&gt; and &lt;code&gt;Drop&lt;/code&gt; traits, which enable a lot of the functionality of smart pointers. We explored reference cycles that can cause memory leaks and how to prevent them using &lt;code&gt;Weak&amp;lt;T&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">また、スマートポインターの多くの機能を可能にする &lt;code&gt;Deref&lt;/code&gt; と &lt;code&gt;Drop&lt;/code&gt; トレイトについても説明しました。メモリリークを引き起こす可能性がある参照サイクルと、 &lt;code&gt;Weak&amp;lt;T&amp;gt;&lt;/code&gt; を使用してそれらを防ぐ方法を探りました。</target>
        </trans-unit>
        <trans-unit id="d6fc1b2f8caf81c693f670285ed3e30e58c8f202" translate="yes" xml:space="preserve">
          <source>Also note that &lt;code&gt;Iterator&lt;/code&gt; provides a default implementation of methods such as &lt;code&gt;nth&lt;/code&gt; and &lt;code&gt;fold&lt;/code&gt; which call &lt;code&gt;next&lt;/code&gt; internally. However, it is also possible to write a custom implementation of methods like &lt;code&gt;nth&lt;/code&gt; and &lt;code&gt;fold&lt;/code&gt; if an iterator can compute them more efficiently without calling &lt;code&gt;next&lt;/code&gt;.</source>
          <target state="translated">また、 &lt;code&gt;Iterator&lt;/code&gt; は &lt;code&gt;nth&lt;/code&gt; や &lt;code&gt;fold&lt;/code&gt; など、 &lt;code&gt;next&lt;/code&gt; 内部的に呼び出すメソッドのデフォルト実装を提供することにも注意してください。ただし、イテレータが &lt;code&gt;next&lt;/code&gt; を呼び出さなくてもより効率的に計算できる場合は、 &lt;code&gt;nth&lt;/code&gt; や &lt;code&gt;fold&lt;/code&gt; などのメソッドのカスタム実装を作成することもできます。</target>
        </trans-unit>
        <trans-unit id="2a7fb665b167f214e0e11085759c66fc45c5b538" translate="yes" xml:space="preserve">
          <source>Also note that Cargo build scripts can learn about this feature through &lt;a href=&quot;http://doc.crates.io/environment-variables.html#environment-variables-cargo-sets-for-build-scripts&quot;&gt;environment variables&lt;/a&gt;. In a build script you can detect the linkage via:</source>
          <target state="translated">Cargoビルドスクリプトは、&lt;a href=&quot;http://doc.crates.io/environment-variables.html#environment-variables-cargo-sets-for-build-scripts&quot;&gt;環境変数&lt;/a&gt;を通じてこの機能について学習できることにも注意してください。ビルドスクリプトでは、次の方法でリンケージを検出できます。</target>
        </trans-unit>
        <trans-unit id="0d1efc462e5f1fbd3ec91e9a65ca5ad80e9b3a5b" translate="yes" xml:space="preserve">
          <source>Also note that Cargo build scripts can learn about this feature through &lt;a href=&quot;https://doc.rust-lang.org/cargo/reference/environment-variables.html#environment-variables-cargo-sets-for-build-scripts&quot;&gt;environment variables&lt;/a&gt;. In a build script you can detect the linkage via:</source>
          <target state="translated">Also note that Cargo build scripts can learn about this feature through &lt;a href=&quot;https://doc.rust-lang.org/cargo/reference/environment-variables.html#environment-variables-cargo-sets-for-build-scripts&quot;&gt;environment variables&lt;/a&gt;. In a build script you can detect the linkage via:</target>
        </trans-unit>
        <trans-unit id="729f1c9440272260f81d5cd373556bbc830572f8" translate="yes" xml:space="preserve">
          <source>Also note that the values we get from the calls to &lt;code&gt;next&lt;/code&gt; are immutable references to the values in the vector. The &lt;code&gt;iter&lt;/code&gt; method produces an iterator over immutable references. If we want to create an iterator that takes ownership of &lt;code&gt;v1&lt;/code&gt; and returns owned values, we can call &lt;code&gt;into_iter&lt;/code&gt; instead of &lt;code&gt;iter&lt;/code&gt;. Similarly, if we want to iterate over mutable references, we can call &lt;code&gt;iter_mut&lt;/code&gt; instead of &lt;code&gt;iter&lt;/code&gt;.</source>
          <target state="translated">また、 &lt;code&gt;next&lt;/code&gt; の呼び出しから取得する値は、ベクター内の値への不変の参照であることにも注意してください。 &lt;code&gt;iter&lt;/code&gt; 方法は不変の参照反復子を生成します。 &lt;code&gt;v1&lt;/code&gt; の所有権を取得して所有値を返すイテレーターを作成する場合は、 &lt;code&gt;iter&lt;/code&gt; の代わりに &lt;code&gt;into_iter&lt;/code&gt; を呼び出すことができます。同様に、可変参照を反復処理したい場合は、 &lt;code&gt;iter&lt;/code&gt; の代わりに &lt;code&gt;iter_mut&lt;/code&gt; を呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="b9ce0f5a9623fa773f46d4f2d15f1add40c61350" translate="yes" xml:space="preserve">
          <source>Also note that unwinding into Rust code with a foreign exception (e.g. a an exception thrown from C++ code) is undefined behavior.</source>
          <target state="translated">また、外部例外(C++コードからスローされる例外など)を含む Rust コードへの巻き戻しは未定義の動作であることに注意してください。</target>
        </trans-unit>
        <trans-unit id="ce251a63845ba69b5ad2fd9f201455284f4f01ee" translate="yes" xml:space="preserve">
          <source>Also note that we switched the type of the &lt;code&gt;t&lt;/code&gt; parameter from &lt;code&gt;T&lt;/code&gt; to &lt;code&gt;&amp;amp;T&lt;/code&gt;. Because the type might not be &lt;code&gt;Sized&lt;/code&gt;, we need to use it behind some kind of pointer. In this case, we&amp;rsquo;ve chosen a reference.</source>
          <target state="translated">また、 &lt;code&gt;t&lt;/code&gt; パラメータのタイプを &lt;code&gt;T&lt;/code&gt; から &lt;code&gt;&amp;amp;T&lt;/code&gt; に切り替えたことにも注意してください。タイプが &lt;code&gt;Sized&lt;/code&gt; ない可能性があるためである種のポインターの背後で使用する必要があります。この例では、参照を選択しました。</target>
        </trans-unit>
        <trans-unit id="19148a1d1c1b97af52ac182d255aa33cc3c9304e" translate="yes" xml:space="preserve">
          <source>Also of note is the special syntax for &lt;code&gt;Fn&lt;/code&gt; traits (e.g. &lt;code&gt;Fn(usize, bool) -&amp;gt; usize&lt;/code&gt;). Those interested in the technical details of this can refer to &lt;a href=&quot;https://doc.rust-lang.org/nomicon/hrtb.html&quot;&gt;the relevant section in the &lt;em&gt;Rustonomicon&lt;/em&gt;&lt;/a&gt;.</source>
          <target state="translated">また、 &lt;code&gt;Fn&lt;/code&gt; トレイトの特別な構文（ &lt;code&gt;Fn(usize, bool) -&amp;gt; usize&lt;/code&gt; ）にも注意してください。これの技術的な詳細に興味がある人&lt;a href=&quot;https://doc.rust-lang.org/nomicon/hrtb.html&quot;&gt;は、&lt;em&gt;ラストノミコンの&lt;/em&gt;&lt;/a&gt;関連セクションを参照できます。</target>
        </trans-unit>
        <trans-unit id="57bf42e074718d5ea685f5e68450e52bab2d09dc" translate="yes" xml:space="preserve">
          <source>Also verify that you didn't misspell the import name and that the import exists in the module from where you tried to import it. Example:</source>
          <target state="translated">また、インポート名のスペルを間違えていないか、インポートしようとしたモジュールにインポートが存在するかどうかを確認してください。例</target>
        </trans-unit>
        <trans-unit id="ba09134ec4e68053a65f33dbded8cc605eed58ef" translate="yes" xml:space="preserve">
          <source>Also, &lt;code&gt;ManuallyDrop&lt;/code&gt; prevents us from having to &quot;touch&quot; &lt;code&gt;v&lt;/code&gt; after transferring the ownership to &lt;code&gt;s&lt;/code&gt; &amp;mdash; the final step of interacting with &lt;code&gt;v&lt;/code&gt; to dispose of it without running its destructor is entirely avoided.</source>
          <target state="translated">Also, &lt;code&gt;ManuallyDrop&lt;/code&gt; prevents us from having to &quot;touch&quot; &lt;code&gt;v&lt;/code&gt; after transferring the ownership to &lt;code&gt;s&lt;/code&gt; &amp;mdash; the final step of interacting with &lt;code&gt;v&lt;/code&gt; to dispose of it without running its destructor is entirely avoided.</target>
        </trans-unit>
        <trans-unit id="9d4cb652a8b78bec628c1d26d0df6d4c9f7c28ed" translate="yes" xml:space="preserve">
          <source>Also, if the type of the expression to the left of the dot is a pointer, it is automatically dereferenced as many times as necessary to make the field access possible. In cases of ambiguity, we prefer fewer autoderefs to more.</source>
          <target state="translated">また、ドットの左にある式の型がポインタの場合は、フィールドアクセスを可能にするために必要な回数だけ自動的に派生されます。曖昧な場合には、自動参照は多めよりも少なめの方が良いでしょう。</target>
        </trans-unit>
        <trans-unit id="56542ee08fdcb89c559a45ec666da5ba100aa6fa" translate="yes" xml:space="preserve">
          <source>Also, it allocates temporary storage half the size of &lt;code&gt;self&lt;/code&gt;, but for short slices a non-allocating insertion sort is used instead.</source>
          <target state="translated">また、それは &lt;code&gt;self&lt;/code&gt; の半分のサイズの一時ストレージを割り当てますが、短いスライスの場合は、代わりに非割り当て挿入ソートが使用されます。</target>
        </trans-unit>
        <trans-unit id="71671f4bb484f8a1e973c0578cc13715a3aa2105" translate="yes" xml:space="preserve">
          <source>Also, note that because &lt;code&gt;back_of_house::Breakfast&lt;/code&gt; has a private field, the struct needs to provide a public associated function that constructs an instance of &lt;code&gt;Breakfast&lt;/code&gt; (we&amp;rsquo;ve named it &lt;code&gt;summer&lt;/code&gt; here). If &lt;code&gt;Breakfast&lt;/code&gt; didn&amp;rsquo;t have such a function, we couldn&amp;rsquo;t create an instance of &lt;code&gt;Breakfast&lt;/code&gt; in &lt;code&gt;eat_at_restaurant&lt;/code&gt; because we couldn&amp;rsquo;t set the value of the private &lt;code&gt;seasonal_fruit&lt;/code&gt; field in &lt;code&gt;eat_at_restaurant&lt;/code&gt;.</source>
          <target state="translated">また、 &lt;code&gt;back_of_house::Breakfast&lt;/code&gt; にはプライベートフィールドがあるため、構造体は &lt;code&gt;Breakfast&lt;/code&gt; インスタンスを構築するパブリック関連関数を提供する必要があることに注意してください（ここでは &lt;code&gt;summer&lt;/code&gt; と名付けています）。場合 &lt;code&gt;Breakfast&lt;/code&gt; 、このような機能を持っていなかった、我々はのインスタンス作成できませんでした &lt;code&gt;Breakfast&lt;/code&gt; で &lt;code&gt;eat_at_restaurant&lt;/code&gt; 我々は民間の値が設定されていない可能性があるため、 &lt;code&gt;seasonal_fruit&lt;/code&gt; のフィールドを &lt;code&gt;eat_at_restaurant&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="477dbb63bb02aa6d30fe03da09f8465ff169a963" translate="yes" xml:space="preserve">
          <source>Also, note that the function body is wrapped in curly brackets, &lt;code&gt;{}&lt;/code&gt;. Rust requires these around all function bodies. It&amp;rsquo;s good style to place the opening curly bracket on the same line as the function declaration, adding one space in between.</source>
          <target state="translated">また、関数本体は中括弧 &lt;code&gt;{}&lt;/code&gt; で囲まれていることに注意してください。。Rustはすべての関数本体の周りにこれらを必要とします。開始中かっこを関数宣言と同じ行に配置し、その間にスペースを1つ追加するのが適切なスタイルです。</target>
        </trans-unit>
        <trans-unit id="8c50010a52d6913ce8428bd39d3014c723f0db3d" translate="yes" xml:space="preserve">
          <source>Also, please be aware that this method is only for special circumstances and is usually not what you want. In case of doubt, use &lt;a href=&quot;#method.borrow_mut&quot;&gt;&lt;code&gt;borrow_mut&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">また、この方法は特別な状況でのみ使用するものであり、通常は望ましい方法ではないことに注意してください。疑問がある場合は、代わりに&lt;a href=&quot;#method.borrow_mut&quot;&gt; &lt;code&gt;borrow_mut&lt;/code&gt; &lt;/a&gt;を使用してください。</target>
        </trans-unit>
        <trans-unit id="2edbd5a08a0137666e61eca4932691fdf6681fd9" translate="yes" xml:space="preserve">
          <source>Also, since &lt;code&gt;bool&lt;/code&gt; implements the &lt;a href=&quot;marker/trait.copy&quot;&gt;&lt;code&gt;Copy&lt;/code&gt;&lt;/a&gt; trait, we don't have to worry about the move semantics (just like the integer and float primitives).</source>
          <target state="translated">また、 &lt;code&gt;bool&lt;/code&gt; は&lt;a href=&quot;marker/trait.copy&quot;&gt; &lt;code&gt;Copy&lt;/code&gt; &lt;/a&gt;トレイトを実装しているので、（整数プリミティブやフロートプリミティブのように）移動セマンティクスについて心配する必要はありません。</target>
        </trans-unit>
        <trans-unit id="a9b0dcda2ee36870b49794f990ce3f2eb9803892" translate="yes" xml:space="preserve">
          <source>Alternatively there can be exactly two expressions inside the brackets, separated by a semi-colon. The expression after the &lt;code&gt;;&lt;/code&gt; must be a have type &lt;code&gt;usize&lt;/code&gt; and be a &lt;a href=&quot;../const_eval#constant-expressions&quot;&gt;constant expression&lt;/a&gt;, such as a &lt;a href=&quot;../tokens#literals&quot;&gt;literal&lt;/a&gt; or a &lt;a href=&quot;../items/constant-items&quot;&gt;constant item&lt;/a&gt;. &lt;code&gt;[a; b]&lt;/code&gt; creates an array containing &lt;code&gt;b&lt;/code&gt; copies of the value of &lt;code&gt;a&lt;/code&gt;. If the expression after the semi-colon has a value greater than 1 then this requires that the type of &lt;code&gt;a&lt;/code&gt; is &lt;a href=&quot;../special-types-and-traits#copy&quot;&gt;&lt;code&gt;Copy&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">または、セミコロンで区切られた括弧内に正確に2つの式がある場合もあります。の後の式 &lt;code&gt;;&lt;/code&gt; 型が &lt;code&gt;usize&lt;/code&gt; で、&lt;a href=&quot;../tokens#literals&quot;&gt;リテラル&lt;/a&gt;や&lt;a href=&quot;../items/constant-items&quot;&gt;定数項目&lt;/a&gt;などの&lt;a href=&quot;../const_eval#constant-expressions&quot;&gt;定数式&lt;/a&gt;である必要があります。 &lt;code&gt;[a; b]&lt;/code&gt; B]を含有する配列を作成し &lt;code&gt;b&lt;/code&gt; の値のコピー。セミコロンの後の式の値が1より大きい場合、 &lt;code&gt;a&lt;/code&gt; のタイプは&lt;a href=&quot;../special-types-and-traits#copy&quot;&gt; &lt;code&gt;Copy&lt;/code&gt; &lt;/a&gt;である必要があります。 &lt;code&gt;a&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="fc6c67aa2ed479ece24dfe7dd6029027bbfca2b3" translate="yes" xml:space="preserve">
          <source>Alternatively there can be exactly two expressions inside the brackets, separated by a semi-colon. The expression after the &lt;code&gt;;&lt;/code&gt; must have type &lt;code&gt;usize&lt;/code&gt; and be a &lt;a href=&quot;../const_eval#constant-expressions&quot;&gt;constant expression&lt;/a&gt;, such as a &lt;a href=&quot;../tokens#literals&quot;&gt;literal&lt;/a&gt; or a &lt;a href=&quot;../items/constant-items&quot;&gt;constant item&lt;/a&gt;. &lt;code&gt;[a; b]&lt;/code&gt; creates an array containing &lt;code&gt;b&lt;/code&gt; copies of the value of &lt;code&gt;a&lt;/code&gt;. If the expression after the semi-colon has a value greater than 1 then this requires that the type of &lt;code&gt;a&lt;/code&gt; is &lt;a href=&quot;../special-types-and-traits#copy&quot;&gt;&lt;code&gt;Copy&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Alternatively there can be exactly two expressions inside the brackets, separated by a semi-colon. The expression after the &lt;code&gt;;&lt;/code&gt; must have type &lt;code&gt;usize&lt;/code&gt; and be a &lt;a href=&quot;../const_eval#constant-expressions&quot;&gt;constant expression&lt;/a&gt;, such as a &lt;a href=&quot;../tokens#literals&quot;&gt;literal&lt;/a&gt; or a &lt;a href=&quot;../items/constant-items&quot;&gt;constant item&lt;/a&gt;. &lt;code&gt;[a; b]&lt;/code&gt; creates an array containing &lt;code&gt;b&lt;/code&gt; copies of the value of &lt;code&gt;a&lt;/code&gt; . If the expression after the semi-colon has a value greater than 1 then this requires that the type of &lt;code&gt;a&lt;/code&gt; is &lt;a href=&quot;../special-types-and-traits#copy&quot;&gt; &lt;code&gt;Copy&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="3c2b342df42a5ce80106fad6cca3ec251f8df3e4" translate="yes" xml:space="preserve">
          <source>Alternatively, &lt;code&gt;PhantomData&amp;lt;T&amp;gt;&lt;/code&gt; has alignment 1 for all &lt;code&gt;T&lt;/code&gt;, so you can use it if you need to keep the field for some reason:</source>
          <target state="translated">または、 &lt;code&gt;PhantomData&amp;lt;T&amp;gt;&lt;/code&gt; はすべての &lt;code&gt;T&lt;/code&gt; に対して配置1を持っているため、何らかの理由でフィールドを保持する必要がある場合は、それを使用できます。</target>
        </trans-unit>
        <trans-unit id="38449305205a0baadf0d931713ad745060ac7795" translate="yes" xml:space="preserve">
          <source>Alternatively, a paren-less version of the attribute may be used to hint the compiler about inlining opportunity:</source>
          <target state="translated">あるいは、インライン化の機会についてコンパイラにヒントを与えるために、属性の親を持たないバージョンを使用することもできます。</target>
        </trans-unit>
        <trans-unit id="d329c92752ab59bc5a187b9f641894d29c9fd208" translate="yes" xml:space="preserve">
          <source>Alternatively, define a trait locally and implement that instead:</source>
          <target state="translated">あるいは、ローカルに形質を定義し、それを代わりに実装することもできます。</target>
        </trans-unit>
        <trans-unit id="30596c4d15742cc562b249b398f8c80c1a13a17f" translate="yes" xml:space="preserve">
          <source>Alternatively, if the type parameter was intentionally inserted, it must be used. A simple fix is shown below:</source>
          <target state="translated">あるいは、typeパラメータが意図的に挿入されている場合は、それを使用しなければなりません。簡単な修正方法を以下に示します。</target>
        </trans-unit>
        <trans-unit id="7c8d494311629dbdec7e4dda72d552e11aace0ec" translate="yes" xml:space="preserve">
          <source>Alternatively, if we don't control the struct's definition, or mutable shared ownership is truly required, we can use &lt;code&gt;Rc&lt;/code&gt; and &lt;code&gt;RefCell&lt;/code&gt;:</source>
          <target state="translated">あるいは、構造体の定義を制御しない場合、または変更可能な共有所有権が本当に必要な場合は、 &lt;code&gt;Rc&lt;/code&gt; および &lt;code&gt;RefCell&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="0a59d2fc84eff79b213967bc64daab09652e8ccb" translate="yes" xml:space="preserve">
          <source>Alternatively, if your type implements &lt;code&gt;Clone&lt;/code&gt; and you need to own the value, consider borrowing and then cloning:</source>
          <target state="translated">あるいは、タイプが &lt;code&gt;Clone&lt;/code&gt; を実装していて、その値を所有する必要がある場合は、借用してから複製することを検討してください。</target>
        </trans-unit>
        <trans-unit id="ed9c6950d0598f33adea6619e4f5e3230fd020da" translate="yes" xml:space="preserve">
          <source>Alternatively, move the other attributes to the contained type:</source>
          <target state="translated">あるいは、他の属性を含まれる型に移動させます。</target>
        </trans-unit>
        <trans-unit id="b5cf6202d850db2d8b7a0068cf052fbe7d132528" translate="yes" xml:space="preserve">
          <source>Alternatively, split the pattern:</source>
          <target state="translated">または、パターンを分割します。</target>
        </trans-unit>
        <trans-unit id="9b111c2948f7df0faec47eb57a97f3c7f99e8980" translate="yes" xml:space="preserve">
          <source>Alternatively, we can consider using the &lt;code&gt;Cell&lt;/code&gt; and &lt;code&gt;RefCell&lt;/code&gt; types to achieve interior mutability through a shared reference. Our example's &lt;code&gt;mutable&lt;/code&gt; function could be redefined as below:</source>
          <target state="translated">あるいは、 &lt;code&gt;Cell&lt;/code&gt; および &lt;code&gt;RefCell&lt;/code&gt; タイプを使用して、共有参照を通じて内部の可変性を実現することを検討できます。この例の &lt;code&gt;mutable&lt;/code&gt; 関数は、次のように再定義できます。</target>
        </trans-unit>
        <trans-unit id="754e721e3e9779de9d32c607142b98694b9bb365" translate="yes" xml:space="preserve">
          <source>Alternatively, we can move out of &lt;code&gt;fancy_num&lt;/code&gt; into a second &lt;code&gt;fancy_num&lt;/code&gt;:</source>
          <target state="translated">あるいは、 &lt;code&gt;fancy_num&lt;/code&gt; から2番目の &lt;code&gt;fancy_num&lt;/code&gt; に移動することもできます。</target>
        </trans-unit>
        <trans-unit id="da767a10b83371c7ea419ae14469880fbc9efc2b" translate="yes" xml:space="preserve">
          <source>Alternatively, wrapping trait objects requires something like the following:</source>
          <target state="translated">あるいは、 trait オブジェクトをラップするには、以下のようなものが必要です。</target>
        </trans-unit>
        <trans-unit id="3374923e7cf24250807b521def52524879dd69d5" translate="yes" xml:space="preserve">
          <source>Alternatively, wrapping trait objects requires something:</source>
          <target state="translated">あるいは、形質オブジェクトをラップするには何かが必要です。</target>
        </trans-unit>
        <trans-unit id="980127d7c92391c13b6615bd3076240a03531f1c" translate="yes" xml:space="preserve">
          <source>Alternatively, you can add the following line to your &lt;em&gt;~/.bash_profile&lt;/em&gt;:</source>
          <target state="translated">または、次の行を&lt;em&gt;〜/ .bash_profileに&lt;/em&gt;追加できます。</target>
        </trans-unit>
        <trans-unit id="9de397b8421cd9e5ee08981bcb6e02a87c244a79" translate="yes" xml:space="preserve">
          <source>Alternatively, you can also use the struct pattern by using the correct field names and binding them to new identifiers:</source>
          <target state="translated">また、正しいフィールド名を使用して新しい識別子にバインドすることで、構造体パターンを使用することもできます。</target>
        </trans-unit>
        <trans-unit id="53009511a1501672faf73d204dc3eb7eb0e15f4c" translate="yes" xml:space="preserve">
          <source>Alternatively, you can create a newtype. A newtype is a wrapping tuple-struct. For example, &lt;code&gt;NewType&lt;/code&gt; is a newtype over &lt;code&gt;Foo&lt;/code&gt; in &lt;code&gt;struct NewType(Foo)&lt;/code&gt;. Example:</source>
          <target state="translated">または、新しいタイプを作成することもできます。 newtypeはラッピングタプル構造体です。例えば、 &lt;code&gt;NewType&lt;/code&gt; 上のnewtypeある &lt;code&gt;Foo&lt;/code&gt; における &lt;code&gt;struct NewType(Foo)&lt;/code&gt; 。例：</target>
        </trans-unit>
        <trans-unit id="f44934b9e6665fc0ff65386cfc3a7e7022fcb44e" translate="yes" xml:space="preserve">
          <source>Alternatively, you can obtain a &lt;code&gt;&amp;amp;[&lt;/code&gt;&lt;a href=&quot;../primitive.u8&quot;&gt;&lt;code&gt;u8&lt;/code&gt;&lt;/a&gt;&lt;code&gt;]&lt;/code&gt; slice from a &lt;code&gt;CString&lt;/code&gt; with the &lt;a href=&quot;#method.as_bytes&quot;&gt;&lt;code&gt;as_bytes&lt;/code&gt;&lt;/a&gt; method. Slices produced in this way do &lt;em&gt;not&lt;/em&gt; contain the trailing nul terminator. This is useful when you will be calling an extern function that takes a &lt;code&gt;*const u8&lt;/code&gt; argument which is not necessarily nul-terminated, plus another argument with the length of the string &amp;mdash; like C's &lt;code&gt;strndup()&lt;/code&gt;. You can of course get the slice's length with its &lt;a href=&quot;../primitive.slice#method.len&quot;&gt;&lt;code&gt;len&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">または、&lt;a href=&quot;#method.as_bytes&quot;&gt; &lt;code&gt;as_bytes&lt;/code&gt; &lt;/a&gt;メソッドを使用して、 &lt;code&gt;CString&lt;/code&gt; から &lt;code&gt;&amp;amp;[&lt;/code&gt; &lt;a href=&quot;../primitive.u8&quot;&gt; &lt;code&gt;u8&lt;/code&gt; &lt;/a&gt; &lt;code&gt;]&lt;/code&gt; スライスを取得することもできます。この方法で作成されたスライスには、末尾のヌルターミネーター&lt;em&gt;は&lt;/em&gt;含まれませ&lt;em&gt;ん&lt;/em&gt;。これは、必ずしもヌル文字で終了しているわけではない &lt;code&gt;*const u8&lt;/code&gt; 引数と、Cの &lt;code&gt;strndup()&lt;/code&gt; などの文字列の長さを持つ別の引数を取るextern関数を呼び出す場合に便利です。もちろん、&lt;a href=&quot;../primitive.slice#method.len&quot;&gt; &lt;code&gt;len&lt;/code&gt; &lt;/a&gt;メソッドを使用してスライスの長さを取得できます。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="14ed2547343b0251c75ea8d794d5d3f83b965f7e" translate="yes" xml:space="preserve">
          <source>Alternatively, you can obtain a &lt;code&gt;&amp;amp;[&lt;/code&gt;&lt;a href=&quot;https://doc.rust-lang.org/nightly/std/primitive.u8.html&quot;&gt;&lt;code&gt;u8&lt;/code&gt;&lt;/a&gt;&lt;code&gt;]&lt;/code&gt; slice from a &lt;code&gt;CString&lt;/code&gt; with the &lt;a href=&quot;struct.cstring#method.as_bytes&quot;&gt;&lt;code&gt;CString::as_bytes&lt;/code&gt;&lt;/a&gt; method. Slices produced in this way do &lt;em&gt;not&lt;/em&gt; contain the trailing nul terminator. This is useful when you will be calling an extern function that takes a &lt;code&gt;*const u8&lt;/code&gt; argument which is not necessarily nul-terminated, plus another argument with the length of the string &amp;mdash; like C's &lt;code&gt;strndup()&lt;/code&gt;. You can of course get the slice's length with its &lt;a href=&quot;../primitive.slice#method.len&quot;&gt;&lt;code&gt;len&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">Alternatively, you can obtain a &lt;code&gt;&amp;amp;[&lt;/code&gt; &lt;a href=&quot;https://doc.rust-lang.org/nightly/std/primitive.u8.html&quot;&gt; &lt;code&gt;u8&lt;/code&gt; &lt;/a&gt; &lt;code&gt;]&lt;/code&gt; slice from a &lt;code&gt;CString&lt;/code&gt; with the &lt;a href=&quot;struct.cstring#method.as_bytes&quot;&gt; &lt;code&gt;CString::as_bytes&lt;/code&gt; &lt;/a&gt; method. Slices produced in this way do &lt;em&gt;not&lt;/em&gt; contain the trailing nul terminator. This is useful when you will be calling an extern function that takes a &lt;code&gt;*const u8&lt;/code&gt; argument which is not necessarily nul-terminated, plus another argument with the length of the string &amp;mdash; like C's &lt;code&gt;strndup()&lt;/code&gt; . You can of course get the slice's length with its &lt;a href=&quot;../primitive.slice#method.len&quot;&gt; &lt;code&gt;len&lt;/code&gt; &lt;/a&gt; method.</target>
        </trans-unit>
        <trans-unit id="3a4be7155bcffba0850c80a370bc5c6b34c37e74" translate="yes" xml:space="preserve">
          <source>Alternatives</source>
          <target state="translated">Alternatives</target>
        </trans-unit>
        <trans-unit id="fb4db1dca17b4c832ac69c83b18f73ad9aa68bf9" translate="yes" xml:space="preserve">
          <source>Although Rust will let you bind &lt;code&gt;Sized&lt;/code&gt; to a trait, you won't be able to use it to form a trait object later:</source>
          <target state="translated">Rust では &lt;code&gt;Sized&lt;/code&gt; をトレイトにバインドできますが、後でそれを使用してトレイトオブジェクトを形成することはできません。</target>
        </trans-unit>
        <trans-unit id="18938413590ec4f421c089a648f9b8a820edd657" translate="yes" xml:space="preserve">
          <source>Although UDP is a connectionless protocol, this implementation provides an interface to set an address where data should be sent and received from. After setting a remote address with &lt;a href=&quot;#method.connect&quot;&gt;&lt;code&gt;connect&lt;/code&gt;&lt;/a&gt;, data can be sent to and received from that address with &lt;a href=&quot;#method.send&quot;&gt;&lt;code&gt;send&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#method.recv&quot;&gt;&lt;code&gt;recv&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">UDPはコネクションレス型プロトコルですが、この実装は、データを送受信するアドレスを設定するためのインターフェースを提供します。&lt;a href=&quot;#method.connect&quot;&gt; &lt;code&gt;connect&lt;/code&gt; &lt;/a&gt;を使用してリモートアドレスを設定した後、&lt;a href=&quot;#method.send&quot;&gt; &lt;code&gt;send&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#method.recv&quot;&gt; &lt;code&gt;recv&lt;/code&gt; &lt;/a&gt;を使用してそのアドレスとの間でデータを送受信できます。</target>
        </trans-unit>
        <trans-unit id="543c09d5bf5928a676597cb867e1ef6c78157058" translate="yes" xml:space="preserve">
          <source>Although UDP is a connectionless protocol, this implementation provides an interface to set an address where data should be sent and received from. After setting a remote address with &lt;a href=&quot;struct.udpsocket#method.connect&quot;&gt;&lt;code&gt;connect&lt;/code&gt;&lt;/a&gt;, data can be sent to and received from that address with &lt;a href=&quot;struct.udpsocket#method.send&quot;&gt;&lt;code&gt;send&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;struct.udpsocket#method.recv&quot;&gt;&lt;code&gt;recv&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Although UDP is a connectionless protocol, this implementation provides an interface to set an address where data should be sent and received from. After setting a remote address with &lt;a href=&quot;struct.udpsocket#method.connect&quot;&gt; &lt;code&gt;connect&lt;/code&gt; &lt;/a&gt;, data can be sent to and received from that address with &lt;a href=&quot;struct.udpsocket#method.send&quot;&gt; &lt;code&gt;send&lt;/code&gt; &lt;/a&gt; and &lt;a href=&quot;struct.udpsocket#method.recv&quot;&gt; &lt;code&gt;recv&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="6138cf1c64fdfba340547fa72a908d945fa65b3f" translate="yes" xml:space="preserve">
          <source>Although a &lt;code&gt;SystemTime&lt;/code&gt; cannot be directly inspected, the &lt;a href=&quot;constant.unix_epoch&quot;&gt;&lt;code&gt;UNIX_EPOCH&lt;/code&gt;&lt;/a&gt; constant is provided in this module as an anchor in time to learn information about a &lt;code&gt;SystemTime&lt;/code&gt;. By calculating the duration from this fixed point in time, a &lt;code&gt;SystemTime&lt;/code&gt; can be converted to a human-readable time, or perhaps some other string representation.</source>
          <target state="translated">が &lt;code&gt;SystemTime&lt;/code&gt; 直接検査することができない、&lt;a href=&quot;constant.unix_epoch&quot;&gt; &lt;code&gt;UNIX_EPOCH&lt;/code&gt; の&lt;/a&gt;定数はに関する情報を学ぶために時間内にアンカーとして、このモジュールで提供されて &lt;code&gt;SystemTime&lt;/code&gt; 。この固定された時点から期間を計算することにより、 &lt;code&gt;SystemTime&lt;/code&gt; は人間が読み取れる時間、またはおそらく他の文字列表現に変換できます。</target>
        </trans-unit>
        <trans-unit id="9bf2565395a043df30a2266cce3b26bdd4f8ff03" translate="yes" xml:space="preserve">
          <source>Although both Listing 7-11 and 7-13 accomplish the same task, Listing 7-11 is the idiomatic way to bring a function into scope with &lt;code&gt;use&lt;/code&gt;. Bringing the function&amp;rsquo;s parent module into scope with &lt;code&gt;use&lt;/code&gt; so we have to specify the parent module when calling the function makes it clear that the function isn&amp;rsquo;t locally defined while still minimizing repetition of the full path. The code in Listing 7-13 is unclear as to where &lt;code&gt;add_to_waitlist&lt;/code&gt; is defined.</source>
          <target state="translated">リスト7-11と7-13はどちらも同じタスクを実行しますが、リスト7-11は、 &lt;code&gt;use&lt;/code&gt; を使用して関数をスコープに入れる慣用的な方法です。範囲の中に、関数の親モジュールを持ち込み &lt;code&gt;use&lt;/code&gt; 機能を呼び出すと、それはまだ完全なパスの繰り返しを最小限に抑えながら機能はローカルに定義されていないことを明確にするとき、我々は親モジュールを指定する必要がありますので。コードリスト7-13のコードは、 &lt;code&gt;add_to_waitlist&lt;/code&gt; が定義されている場所が不明確です。</target>
        </trans-unit>
        <trans-unit id="af1566b2870173a676122bd4c9750a25b9287966" translate="yes" xml:space="preserve">
          <source>Although functional programming languages use cons lists frequently, the cons list isn&amp;rsquo;t a commonly used data structure in Rust. Most of the time when you have a list of items in Rust, &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; is a better choice to use. Other, more complex recursive data types &lt;em&gt;are&lt;/em&gt; useful in various situations, but by starting with the cons list, we can explore how boxes let us define a recursive data type without much distraction.</source>
          <target state="translated">関数型プログラミング言語はconsリストを頻繁に使用しますが、consリストはRustで一般的に使用されるデータ構造ではありません。ほとんどの場合、Rustにアイテムのリストがある場合、 &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; を使用することをお勧めします。その他、より複雑な再帰データ型&lt;em&gt;は&lt;/em&gt;さまざまな状況で役立ちます&lt;em&gt;が&lt;/em&gt;、コンスリストから始めると、ボックスを使用して、それほど気を散らすことなく再帰データ型を定義できます。</target>
        </trans-unit>
        <trans-unit id="d04af4e6b5ccd4c4682747098fc1db0b02dbd661" translate="yes" xml:space="preserve">
          <source>Although the &lt;code&gt;::&lt;/code&gt; token is allowed before the generics arguments, it is not required because there is no ambiguity like there is in &lt;em&gt;PathInExpression&lt;/em&gt;.</source>
          <target state="translated">が &lt;code&gt;::&lt;/code&gt; トークンがジェネリック医薬品の引数の前に許可されているではありのようなあいまいがないため、これは必須ではありません&lt;em&gt;PathInExpression&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="7bf75499d3d552ee0a87d1fa70ed0a0e35bd067e" translate="yes" xml:space="preserve">
          <source>Although the &lt;code&gt;let&lt;/code&gt; is pointless here, it illustrates the meaning of &lt;code&gt;!&lt;/code&gt;. Since &lt;code&gt;x&lt;/code&gt; is never assigned a value (because &lt;code&gt;return&lt;/code&gt; returns from the entire function), &lt;code&gt;x&lt;/code&gt; can be given type &lt;code&gt;!&lt;/code&gt;. We could also replace &lt;code&gt;return 123&lt;/code&gt; with a &lt;code&gt;panic!&lt;/code&gt; or a never-ending &lt;code&gt;loop&lt;/code&gt; and this code would still be valid.</source>
          <target state="translated">ここでは &lt;code&gt;let&lt;/code&gt; は無意味ですが、 &lt;code&gt;!&lt;/code&gt; の意味を示しています。。以来 &lt;code&gt;x&lt;/code&gt; が値を割り当てられることはありません（ので、 &lt;code&gt;return&lt;/code&gt; 関数全体からのリターン）は、 &lt;code&gt;x&lt;/code&gt; がタイプを与えることができます &lt;code&gt;!&lt;/code&gt; 。 &lt;code&gt;return 123&lt;/code&gt; を &lt;code&gt;panic!&lt;/code&gt; 置き換えることもできます！または終了しない &lt;code&gt;loop&lt;/code&gt; とこのコードはまだ有効です。</target>
        </trans-unit>
        <trans-unit id="6e8ecdea30a2a1885eeb369d7e2426712a189f17" translate="yes" xml:space="preserve">
          <source>Although the SipHash algorithm is considered to be generally strong, it is not intended for cryptographic purposes. As such, all cryptographic uses of this implementation are &lt;em&gt;strongly discouraged&lt;/em&gt;.</source>
          <target state="translated">SipHashアルゴリズムは一般的に強力であると考えられていますが、暗号化を目的としたものではありません。そのため、この実装の暗号化の使用はすべて&lt;em&gt;お勧めできません&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="f07ca613351cf8dcbbc0ccd12d8ef0d4721b46b7" translate="yes" xml:space="preserve">
          <source>Although the number of keys and values is growable, each key can only have one value associated with it at a time. When you want to change the data in a hash map, you have to decide how to handle the case when a key already has a value assigned. You could replace the old value with the new value, completely disregarding the old value. You could keep the old value and ignore the new value, only adding the new value if the key &lt;em&gt;doesn&amp;rsquo;t&lt;/em&gt; already have a value. Or you could combine the old value and the new value. Let&amp;rsquo;s look at how to do each of these!</source>
          <target state="translated">キーと値の数は増やすことができますが、各キーには一度に1つの値しか関連付けることができません。ハッシュマップのデータを変更する場合は、キーに既に値が割り当てられている場合の処理​​方法を決定する必要があります。古い値を完全に無視して、古い値を新しい値に置き換えることができます。古い値を保持して新しい値を無視し、キーにまだ値&lt;em&gt;がない&lt;/em&gt;場合にのみ新しい値を追加することができます。または、古い値と新しい値を組み合わせることができます。これらのそれぞれを行う方法を見てみましょう！</target>
        </trans-unit>
        <trans-unit id="9186f195f5116d4c11a411254011d9afb8932670" translate="yes" xml:space="preserve">
          <source>Although this API is unstable, it is exposed via stable APIs on the &lt;a href=&quot;../../primitive.str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt; type.</source>
          <target state="translated">Although this API is unstable, it is exposed via stable APIs on the &lt;a href=&quot;../../primitive.str&quot;&gt; &lt;code&gt;str&lt;/code&gt; &lt;/a&gt; type.</target>
        </trans-unit>
        <trans-unit id="d281e954555c8484110a6fecba9e6260dd297fe7" translate="yes" xml:space="preserve">
          <source>Although this code has the same behavior as Listing 9-5, it doesn&amp;rsquo;t contain any &lt;code&gt;match&lt;/code&gt; expressions and is cleaner to read. Come back to this example after you&amp;rsquo;ve read Chapter 13, and look up the &lt;code&gt;unwrap_or_else&lt;/code&gt; method in the standard library documentation. Many more of these methods can clean up huge nested &lt;code&gt;match&lt;/code&gt; expressions when you&amp;rsquo;re dealing with errors.</source>
          <target state="translated">このコードの動作はリスト9-5と同じですが、 &lt;code&gt;match&lt;/code&gt; 式が含まれておらず、読みやすくなっています。第13章を読んだ後、この例に戻って、標準ライブラリのドキュメントで &lt;code&gt;unwrap_or_else&lt;/code&gt; メソッドを調べてください。これらのメソッドの多くは、エラーを処理するときに、ネストされた巨大な &lt;code&gt;match&lt;/code&gt; 式をクリーンアップできます。</target>
        </trans-unit>
        <trans-unit id="db0fe462f2aa334b05d61f387c6225bd0bc5a2b6" translate="yes" xml:space="preserve">
          <source>Although this code works, duplicating code is tedious and error prone. We also have to update the code in multiple places when we want to change it.</source>
          <target state="translated">このコードはうまくいくのですが、コードを複製するのは面倒ですし、エラーになりやすいです。また、コードを変更したいときには複数の場所で更新しなければなりません。</target>
        </trans-unit>
        <trans-unit id="bf29b02a8b6e1719f55f981f1d8572dd8539b24f" translate="yes" xml:space="preserve">
          <source>Although using it won&amp;rsquo;t cause a compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MAX&quot;&gt;&lt;code&gt;i128::MAX&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">Although using it won&amp;rsquo;t cause a compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MAX&quot;&gt; &lt;code&gt;i128::MAX&lt;/code&gt; &lt;/a&gt; instead.</target>
        </trans-unit>
        <trans-unit id="05e69f2a6bb8b46764f8352e784a84dd0afadb9d" translate="yes" xml:space="preserve">
          <source>Although using it won&amp;rsquo;t cause a compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MAX&quot;&gt;&lt;code&gt;i16::MAX&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">Although using it won&amp;rsquo;t cause a compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MAX&quot;&gt; &lt;code&gt;i16::MAX&lt;/code&gt; &lt;/a&gt; instead.</target>
        </trans-unit>
        <trans-unit id="ae2e6d7ac448ad026e808cfe3cdcdd25c692cbe9" translate="yes" xml:space="preserve">
          <source>Although using it won&amp;rsquo;t cause a compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MAX&quot;&gt;&lt;code&gt;i32::MAX&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">Although using it won&amp;rsquo;t cause a compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MAX&quot;&gt; &lt;code&gt;i32::MAX&lt;/code&gt; &lt;/a&gt; instead.</target>
        </trans-unit>
        <trans-unit id="cad1997569aea8b22596a5906b14eaf599d36023" translate="yes" xml:space="preserve">
          <source>Although using it won&amp;rsquo;t cause a compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MAX&quot;&gt;&lt;code&gt;i64::MAX&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">Although using it won&amp;rsquo;t cause a compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MAX&quot;&gt; &lt;code&gt;i64::MAX&lt;/code&gt; &lt;/a&gt; instead.</target>
        </trans-unit>
        <trans-unit id="628ef478f32d02057364243517eb61194b2fa937" translate="yes" xml:space="preserve">
          <source>Although using it won&amp;rsquo;t cause a compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MAX&quot;&gt;&lt;code&gt;i8::MAX&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">Although using it won&amp;rsquo;t cause a compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MAX&quot;&gt; &lt;code&gt;i8::MAX&lt;/code&gt; &lt;/a&gt; instead.</target>
        </trans-unit>
        <trans-unit id="4e48625fb423a49263c7f7ef3730f1cadc66a1e6" translate="yes" xml:space="preserve">
          <source>Although using it won&amp;rsquo;t cause a compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MAX&quot;&gt;&lt;code&gt;isize::MAX&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">Although using it won&amp;rsquo;t cause a compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MAX&quot;&gt; &lt;code&gt;isize::MAX&lt;/code&gt; &lt;/a&gt; instead.</target>
        </trans-unit>
        <trans-unit id="7d04345ef80c5ecd03e51a7345f75034be31a60e" translate="yes" xml:space="preserve">
          <source>Although using it won&amp;rsquo;t cause a compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MIN&quot;&gt;&lt;code&gt;i128::MIN&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">Although using it won&amp;rsquo;t cause a compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MIN&quot;&gt; &lt;code&gt;i128::MIN&lt;/code&gt; &lt;/a&gt; instead.</target>
        </trans-unit>
        <trans-unit id="579ffa98c5f86f05f3788dc02042f9c6df508f9f" translate="yes" xml:space="preserve">
          <source>Although using it won&amp;rsquo;t cause a compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MIN&quot;&gt;&lt;code&gt;i16::MIN&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">Although using it won&amp;rsquo;t cause a compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MIN&quot;&gt; &lt;code&gt;i16::MIN&lt;/code&gt; &lt;/a&gt; instead.</target>
        </trans-unit>
        <trans-unit id="da2d071c44ca8237c16fc626e1f05fe6f73717ea" translate="yes" xml:space="preserve">
          <source>Although using it won&amp;rsquo;t cause a compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MIN&quot;&gt;&lt;code&gt;i32::MIN&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">Although using it won&amp;rsquo;t cause a compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MIN&quot;&gt; &lt;code&gt;i32::MIN&lt;/code&gt; &lt;/a&gt; instead.</target>
        </trans-unit>
        <trans-unit id="4c915462451daa99c7af198c86febdd1a22d7597" translate="yes" xml:space="preserve">
          <source>Although using it won&amp;rsquo;t cause a compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MIN&quot;&gt;&lt;code&gt;i64::MIN&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">Although using it won&amp;rsquo;t cause a compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MIN&quot;&gt; &lt;code&gt;i64::MIN&lt;/code&gt; &lt;/a&gt; instead.</target>
        </trans-unit>
        <trans-unit id="c7a387b30a94786833a9b0a30456b3027e1e9fbd" translate="yes" xml:space="preserve">
          <source>Although using it won&amp;rsquo;t cause a compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MIN&quot;&gt;&lt;code&gt;i8::MIN&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">Although using it won&amp;rsquo;t cause a compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MIN&quot;&gt; &lt;code&gt;i8::MIN&lt;/code&gt; &lt;/a&gt; instead.</target>
        </trans-unit>
        <trans-unit id="e5bf4822c610526f0cdddf4534d5b49b86f74f58" translate="yes" xml:space="preserve">
          <source>Although using it won&amp;rsquo;t cause a compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MIN&quot;&gt;&lt;code&gt;isize::MIN&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">Although using it won&amp;rsquo;t cause a compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MIN&quot;&gt; &lt;code&gt;isize::MIN&lt;/code&gt; &lt;/a&gt; instead.</target>
        </trans-unit>
        <trans-unit id="ebb42d33b9e27bf9b56623cf75d8b9afa2233265" translate="yes" xml:space="preserve">
          <source>Although using it won&amp;rsquo;t cause compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MAX&quot;&gt;&lt;code&gt;u128::MAX&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">Although using it won&amp;rsquo;t cause compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MAX&quot;&gt; &lt;code&gt;u128::MAX&lt;/code&gt; &lt;/a&gt; instead.</target>
        </trans-unit>
        <trans-unit id="5a7ac738426df2354794cb8df0537a30a74f6523" translate="yes" xml:space="preserve">
          <source>Although using it won&amp;rsquo;t cause compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MAX&quot;&gt;&lt;code&gt;u16::MAX&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">Although using it won&amp;rsquo;t cause compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MAX&quot;&gt; &lt;code&gt;u16::MAX&lt;/code&gt; &lt;/a&gt; instead.</target>
        </trans-unit>
        <trans-unit id="3e75c91d3cf3b6547d6e61a6969491f50f5e1d3e" translate="yes" xml:space="preserve">
          <source>Although using it won&amp;rsquo;t cause compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MAX&quot;&gt;&lt;code&gt;u32::MAX&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">Although using it won&amp;rsquo;t cause compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MAX&quot;&gt; &lt;code&gt;u32::MAX&lt;/code&gt; &lt;/a&gt; instead.</target>
        </trans-unit>
        <trans-unit id="924beee0df8993e339f5ec14d80c789072c86cef" translate="yes" xml:space="preserve">
          <source>Although using it won&amp;rsquo;t cause compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MAX&quot;&gt;&lt;code&gt;u64::MAX&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">Although using it won&amp;rsquo;t cause compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MAX&quot;&gt; &lt;code&gt;u64::MAX&lt;/code&gt; &lt;/a&gt; instead.</target>
        </trans-unit>
        <trans-unit id="9ae4b957aed4f3be97f5bc6a6d75118ff06b3cad" translate="yes" xml:space="preserve">
          <source>Although using it won&amp;rsquo;t cause compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MAX&quot;&gt;&lt;code&gt;u8::MAX&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">Although using it won&amp;rsquo;t cause compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MAX&quot;&gt; &lt;code&gt;u8::MAX&lt;/code&gt; &lt;/a&gt; instead.</target>
        </trans-unit>
        <trans-unit id="c5ebde2d554567a7b7e90cd41cbc8b0acac4a1c2" translate="yes" xml:space="preserve">
          <source>Although using it won&amp;rsquo;t cause compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MAX&quot;&gt;&lt;code&gt;usize::MAX&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">Although using it won&amp;rsquo;t cause compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MAX&quot;&gt; &lt;code&gt;usize::MAX&lt;/code&gt; &lt;/a&gt; instead.</target>
        </trans-unit>
        <trans-unit id="ad32dc2d3be50a4f8c5fdf28af0d0fed17aa13dc" translate="yes" xml:space="preserve">
          <source>Although using it won&amp;rsquo;t cause compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MIN&quot;&gt;&lt;code&gt;u128::MIN&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">Although using it won&amp;rsquo;t cause compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MIN&quot;&gt; &lt;code&gt;u128::MIN&lt;/code&gt; &lt;/a&gt; instead.</target>
        </trans-unit>
        <trans-unit id="66ce4a459f9d71da21dd5ea02e3b77c11475a92b" translate="yes" xml:space="preserve">
          <source>Although using it won&amp;rsquo;t cause compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MIN&quot;&gt;&lt;code&gt;u16::MIN&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">Although using it won&amp;rsquo;t cause compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MIN&quot;&gt; &lt;code&gt;u16::MIN&lt;/code&gt; &lt;/a&gt; instead.</target>
        </trans-unit>
        <trans-unit id="863866e2fa75d6344d5a22903dbb6eb4e36d7217" translate="yes" xml:space="preserve">
          <source>Although using it won&amp;rsquo;t cause compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MIN&quot;&gt;&lt;code&gt;u32::MIN&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">Although using it won&amp;rsquo;t cause compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MIN&quot;&gt; &lt;code&gt;u32::MIN&lt;/code&gt; &lt;/a&gt; instead.</target>
        </trans-unit>
        <trans-unit id="f0557ca69022890678ed9741ea9a18e4b1b5c3ca" translate="yes" xml:space="preserve">
          <source>Although using it won&amp;rsquo;t cause compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MIN&quot;&gt;&lt;code&gt;u64::MIN&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">Although using it won&amp;rsquo;t cause compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MIN&quot;&gt; &lt;code&gt;u64::MIN&lt;/code&gt; &lt;/a&gt; instead.</target>
        </trans-unit>
        <trans-unit id="1bc8261189beb72f8e3ea2bfcc325eac36215e34" translate="yes" xml:space="preserve">
          <source>Although using it won&amp;rsquo;t cause compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MIN&quot;&gt;&lt;code&gt;u8::MIN&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">Although using it won&amp;rsquo;t cause compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MIN&quot;&gt; &lt;code&gt;u8::MIN&lt;/code&gt; &lt;/a&gt; instead.</target>
        </trans-unit>
        <trans-unit id="018037ac23dbb67a32f73854e405231a6ffce4dc" translate="yes" xml:space="preserve">
          <source>Although using it won&amp;rsquo;t cause compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MIN&quot;&gt;&lt;code&gt;usize::MIN&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">Although using it won&amp;rsquo;t cause compilation warning, new code should use &lt;a href=&quot;#associatedconstant.MIN&quot;&gt; &lt;code&gt;usize::MIN&lt;/code&gt; &lt;/a&gt; instead.</target>
        </trans-unit>
        <trans-unit id="094096c8e8871948579e001659d96f6f0cd91ded" translate="yes" xml:space="preserve">
          <source>Although using it won&amp;rsquo;t cause compilation warning, new code should use &lt;a href=&quot;../fmt/trait.display&quot;&gt;&lt;code&gt;Display&lt;/code&gt;&lt;/a&gt; instead and new &lt;code&gt;impl&lt;/code&gt;s can omit it.</source>
          <target state="translated">これを使用してもコンパイル警告は発生しませんが、新しいコードでは代わりに&lt;a href=&quot;../fmt/trait.display&quot;&gt; &lt;code&gt;Display&lt;/code&gt; &lt;/a&gt;を使用する必要があり、新しい &lt;code&gt;impl&lt;/code&gt; は省略できます。</target>
        </trans-unit>
        <trans-unit id="929ca8c36977dca3461b8596285cdc531c6b81df" translate="yes" xml:space="preserve">
          <source>Although using these constants won&amp;rsquo;t cause compilation warnings, new code should use the associated constants directly on the primitive type.</source>
          <target state="translated">Although using these constants won&amp;rsquo;t cause compilation warnings, new code should use the associated constants directly on the primitive type.</target>
        </trans-unit>
        <trans-unit id="ce3c8369369ce1fe72325205b70eb3e2961e011c" translate="yes" xml:space="preserve">
          <source>Although you can&amp;rsquo;t remove previous versions of a crate, you can prevent any future projects from adding them as a new dependency. This is useful when a crate version is broken for one reason or another. In such situations, Cargo supports &lt;em&gt;yanking&lt;/em&gt; a crate version.</source>
          <target state="translated">以前のバージョンのクレートを削除することはできませんが、将来のプロジェクトで新しい依存関係として追加されないようにすることができます。これは、何らかの理由でクレートバージョンが壊れている場合に役立ちます。このような状況では、Cargoはクレートバージョンの&lt;em&gt;ヤンクを&lt;/em&gt;サポートします。</target>
        </trans-unit>
        <trans-unit id="a876dd4a0d144d06dda24f474bedf4412b3d4b86" translate="yes" xml:space="preserve">
          <source>Always empty bottom type for diverging functions</source>
          <target state="translated">発散機能は常に空のボトムタイプ</target>
        </trans-unit>
        <trans-unit id="30044213367fd946b86a46fbbf0f3c415f92d7bc" translate="yes" xml:space="preserve">
          <source>Always returns &lt;code&gt;Err&lt;/code&gt; on arithmetic overflow.</source>
          <target state="translated">算術オーバーフローで常に &lt;code&gt;Err&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="81c2dadc15a7e41133f5895d6079a63549a2abb5" translate="yes" xml:space="preserve">
          <source>Always returns &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;needle&lt;/code&gt; is an empty slice:</source>
          <target state="translated">&lt;code&gt;needle&lt;/code&gt; が空のスライスの場合、常に &lt;code&gt;true&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="0d0ce480d587247832892434b17dbf1b556a5191" translate="yes" xml:space="preserve">
          <source>Always use &lt;code&gt;.add(count)&lt;/code&gt; instead when possible, because &lt;code&gt;add&lt;/code&gt; allows the compiler to optimize better.</source>
          <target state="translated">常に使用 &lt;code&gt;.add(count)&lt;/code&gt; ので、代わりに、可能な場合、 &lt;code&gt;add&lt;/code&gt; 良く最適化するために、コンパイラができます。</target>
        </trans-unit>
        <trans-unit id="2dbc1421ee3e3a275bd2bb6e8f64943056afdc31" translate="yes" xml:space="preserve">
          <source>Always use &lt;code&gt;.offset(count)&lt;/code&gt; instead when possible, because &lt;code&gt;offset&lt;/code&gt; allows the compiler to optimize better. If you need to cross object boundaries, cast the pointer to an integer and do the arithmetic there.</source>
          <target state="translated">可能な場合は、代わりに常に &lt;code&gt;.offset(count)&lt;/code&gt; を使用してください。 &lt;code&gt;offset&lt;/code&gt; 使用すると、コンパイラーの最適化が向上します。オブジェクトの境界を越える必要がある場合は、ポインタを整数にキャストして、そこで計算を行います。</target>
        </trans-unit>
        <trans-unit id="701562825affe99f99fee809f333cf1e955284e4" translate="yes" xml:space="preserve">
          <source>Always use &lt;code&gt;.sub(count)&lt;/code&gt; instead when possible, because &lt;code&gt;sub&lt;/code&gt; allows the compiler to optimize better.</source>
          <target state="translated">可能な場合は、代わりに常に &lt;code&gt;.sub(count)&lt;/code&gt; を使用してください。これは、 &lt;code&gt;sub&lt;/code&gt; がコンパイラーの最適化を向上させるためです。</target>
        </trans-unit>
        <trans-unit id="9fda5d5730cef377a6f455b42dbcfb53fb2ca5ca" translate="yes" xml:space="preserve">
          <source>Among other causes, &lt;code&gt;ParseIntError&lt;/code&gt; can be thrown because of leading or trailing whitespace in the string e.g., when it is obtained from the standard input. Using the &lt;a href=&quot;../primitive.str#method.trim&quot;&gt;&lt;code&gt;str.trim()&lt;/code&gt;&lt;/a&gt; method ensures that no whitespace remains before parsing.</source>
          <target state="translated">他の原因の中でも、 &lt;code&gt;ParseIntError&lt;/code&gt; は、文字列の先頭または末尾の空白が原因でスローされる可能性があります（標準入力から取得された場合など）。&lt;a href=&quot;../primitive.str#method.trim&quot;&gt; &lt;code&gt;str.trim()&lt;/code&gt; &lt;/a&gt;メソッドを使用すると、解析前に空白が残っていないことが保証されます。</target>
        </trans-unit>
        <trans-unit id="f82aa4d4f03b38410c80f80025c8644ba744b247" translate="yes" xml:space="preserve">
          <source>Among other causes, this variant will be constructed when parsing a string that contains a letter.</source>
          <target state="translated">他の原因の中で、このバリアントは文字を含む文字列を解析する際に構築されます。</target>
        </trans-unit>
        <trans-unit id="e8d19d51f5faed38ee6324a9eb71c292315da9f7" translate="yes" xml:space="preserve">
          <source>Among other causes, this variant will be constructed when parsing an empty string.</source>
          <target state="translated">他の原因の中で、このバリアントは空の文字列を解析するときに構築されます。</target>
        </trans-unit>
        <trans-unit id="1692574d1eb8d1443991c925dc8e2acd8ed2cbd7" translate="yes" xml:space="preserve">
          <source>An &quot;or&quot; pattern was used where the variable bindings are not consistently bound across patterns.</source>
          <target state="translated">変数バインディングがパターン間で一貫してバインドされていない場合には、「または」パターンが使用されました。</target>
        </trans-unit>
        <trans-unit id="43d68d3a293f07f835d90c6279bf8faa22ceb0c8" translate="yes" xml:space="preserve">
          <source>An &amp;lsquo;abstract syntax tree&amp;rsquo;, or &amp;lsquo;AST&amp;rsquo;, is an intermediate representation of the structure of the program when the compiler is compiling it.</source>
          <target state="translated">「抽象構文ツリー」または「AST」は、コンパイラーがプログラムをコンパイルするときのプログラムの構造の中間表現です。</target>
        </trans-unit>
        <trans-unit id="db2d4110f56313292c834e1861a95c89c601039f" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;../../../result/enum.result#Err.v&quot;&gt;&lt;code&gt;Err&lt;/code&gt;&lt;/a&gt; is returned if the zero &lt;a href=&quot;../../../time/struct.duration&quot;&gt;&lt;code&gt;Duration&lt;/code&gt;&lt;/a&gt; is passed to this method:</source>
          <target state="translated">アン&lt;a href=&quot;../../../result/enum.result#Err.v&quot;&gt; &lt;code&gt;Err&lt;/code&gt; &lt;/a&gt;ゼロの場合に返される&lt;a href=&quot;../../../time/struct.duration&quot;&gt; &lt;code&gt;Duration&lt;/code&gt; &lt;/a&gt;、このメソッドに渡されます。</target>
        </trans-unit>
        <trans-unit id="c2d78c88964f9736a45223d8f771f07ad6bd857e" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;../../../result/enum.result#variant.Err&quot;&gt;&lt;code&gt;Err&lt;/code&gt;&lt;/a&gt; is returned if the zero &lt;a href=&quot;../../../time/struct.duration&quot;&gt;&lt;code&gt;Duration&lt;/code&gt;&lt;/a&gt; is passed to this method:</source>
          <target state="translated">アン&lt;a href=&quot;../../../result/enum.result#variant.Err&quot;&gt; &lt;code&gt;Err&lt;/code&gt; &lt;/a&gt;ゼロの場合に返される&lt;a href=&quot;../../../time/struct.duration&quot;&gt; &lt;code&gt;Duration&lt;/code&gt; &lt;/a&gt;、このメソッドに渡されます。</target>
        </trans-unit>
        <trans-unit id="0a7f0956daf2ce936a64a4b1e04b5752d5af8c85" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;../items/enumerations&quot;&gt;&lt;code&gt;enum&lt;/code&gt; item&lt;/a&gt; declares both the type and a number of &lt;em&gt;variants&lt;/em&gt;, each of which is independently named and has the syntax of a struct, tuple struct or unit-like struct.</source>
          <target state="translated">&lt;a href=&quot;../items/enumerations&quot;&gt; &lt;code&gt;enum&lt;/code&gt; 項目は、&lt;/a&gt;タイプと数の両方を宣言&lt;em&gt;バリアント&lt;/em&gt;独立名前と構造体、タプル構造体または構造体ユニット状の構文を有するその各々を、。</target>
        </trans-unit>
        <trans-unit id="eccb90f6f9e2e1cba49165645ca18ce97f7c3bdc" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;../result/enum.result#variant.Err&quot;&gt;&lt;code&gt;Err&lt;/code&gt;&lt;/a&gt; is returned if the zero &lt;a href=&quot;../time/struct.duration&quot;&gt;&lt;code&gt;Duration&lt;/code&gt;&lt;/a&gt; is passed to this method:</source>
          <target state="translated">アン&lt;a href=&quot;../result/enum.result#variant.Err&quot;&gt; &lt;code&gt;Err&lt;/code&gt; &lt;/a&gt;ゼロの場合に返される&lt;a href=&quot;../time/struct.duration&quot;&gt; &lt;code&gt;Duration&lt;/code&gt; &lt;/a&gt;、このメソッドに渡されます。</target>
        </trans-unit>
        <trans-unit id="6c3aa2cd86bdd94aa99cad4f7b2a3826d70a323a" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;../result/enum.result#variant.Err&quot;&gt;&lt;code&gt;Err&lt;/code&gt;&lt;/a&gt; will be returned if an error occurs while flushing the buffer.</source>
          <target state="translated">An &lt;a href=&quot;../result/enum.result#variant.Err&quot;&gt; &lt;code&gt;Err&lt;/code&gt; &lt;/a&gt; will be returned if an error occurs while flushing the buffer.</target>
        </trans-unit>
        <trans-unit id="4a13d2042a47768129ce22a87e727826521c162e" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;book/ch19-04-advanced-types#dynamically-sized-types-and-the-sized-trait&quot;&gt;unsized type&lt;/a&gt; is any type where the compiler does not know the length or alignment of at compile time. Any struct containing an unsized type is also unsized.</source>
          <target state="translated">An &lt;a href=&quot;book/ch19-04-advanced-types#dynamically-sized-types-and-the-sized-trait&quot;&gt;unsized type&lt;/a&gt; is any type where the compiler does not know the length or alignment of at compile time. Any struct containing an unsized type is also unsized.</target>
        </trans-unit>
        <trans-unit id="a6662b5b221b841136c3780ac238b4001369d2fd" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;items&quot;&gt;item&lt;/a&gt; that is not a member of an &lt;a href=&quot;items/implementations&quot;&gt;implementation&lt;/a&gt;, such as a &lt;em&gt;free function&lt;/em&gt; or a &lt;em&gt;free const&lt;/em&gt;. Contrast to an &lt;a href=&quot;#associated-item&quot;&gt;associated item&lt;/a&gt;.</source>
          <target state="translated">An &lt;a href=&quot;items&quot;&gt;item&lt;/a&gt; that is not a member of an &lt;a href=&quot;items/implementations&quot;&gt;implementation&lt;/a&gt;, such as a &lt;em&gt;free function&lt;/em&gt; or a &lt;em&gt;free const&lt;/em&gt;. Contrast to an &lt;a href=&quot;#associated-item&quot;&gt;associated item&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="ee613500276e22e6ef67273653d1676ba809144c" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;items&quot;&gt;item&lt;/a&gt; that is not a member of an &lt;a href=&quot;items/implementations&quot;&gt;implementation&lt;/a&gt;, such as a &lt;em&gt;free function&lt;/em&gt; or a &lt;em&gt;free const&lt;/em&gt;. Contrast to an &lt;a href=&quot;glossary#associated-item&quot;&gt;associated item&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;items&quot;&gt;アイテム&lt;/a&gt;のメンバーではない&lt;a href=&quot;items/implementations&quot;&gt;実装&lt;/a&gt;のような、&lt;em&gt;フリー機能&lt;/em&gt;又は&lt;em&gt;フリーCONST&lt;/em&gt;。&lt;a href=&quot;glossary#associated-item&quot;&gt;関連するアイテムと&lt;/a&gt;対比。</target>
        </trans-unit>
        <trans-unit id="dcdff555d3629a9d75bb0e2e48e4c4243e57c8c2" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;items/implementations&quot;&gt;implementation&lt;/a&gt; that applies to a nominal type, not to a trait-type pair. &lt;a href=&quot;items/implementations#inherent-implementations&quot;&gt;More&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;items/implementations&quot;&gt;実装&lt;/a&gt;ではないトレイト型のペアに、名目上のタイプに適用されます。&lt;a href=&quot;items/implementations#inherent-implementations&quot;&gt;もっと&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="21e222f83548917bbd7accfb7becfb374f31ef4a" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;patterns#identifier-patterns&quot;&gt;identifier pattern&lt;/a&gt; that binds by reference or mutable reference.</source>
          <target state="translated">An &lt;a href=&quot;patterns#identifier-patterns&quot;&gt;identifier pattern&lt;/a&gt; that binds by reference or mutable reference.</target>
        </trans-unit>
        <trans-unit id="b301517253f81d6c23866ea49ad7c91ecb7227ac" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;std/keyword.async&quot;&gt;&lt;code&gt;async&lt;/code&gt;&lt;/a&gt; function used recursion without boxing.</source>
          <target state="translated">An &lt;a href=&quot;std/keyword.async&quot;&gt; &lt;code&gt;async&lt;/code&gt; &lt;/a&gt; function used recursion without boxing.</target>
        </trans-unit>
        <trans-unit id="f864e2f214828c68972804234bf4534f4526fce2" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;struct.atomicbool&quot;&gt;&lt;code&gt;AtomicBool&lt;/code&gt;&lt;/a&gt; initialized to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">アン&lt;a href=&quot;struct.atomicbool&quot;&gt; &lt;code&gt;AtomicBool&lt;/code&gt; は&lt;/a&gt;に初期化 &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0d020d51655a42acae9fc5de2d1ee76334d13d2a" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;#[inline(..)]&lt;/code&gt; attribute was incorrectly placed on something other than a function or method.</source>
          <target state="translated">An &lt;code&gt;#[inline(..)]&lt;/code&gt; attribute was incorrectly placed on something other than a function or method.</target>
        </trans-unit>
        <trans-unit id="36aa4d3dbc6bef64eda94b67a998204c02c9bc40" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;Err&lt;/code&gt; will be returned if an error occurs while flushing the buffer.</source>
          <target state="translated">アン &lt;code&gt;Err&lt;/code&gt; バッファをフラッシュ中にエラーが発生した場合に返されます。</target>
        </trans-unit>
        <trans-unit id="93af004a9cc5d8031f1774a01ca4ad5a16a22376" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;Instant&lt;/code&gt; is a wrapper around system-specific types and it may behave differently depending on the underlying operating system. For example, the following snippet is fine on Linux but panics on macOS:</source>
          <target state="translated">An &lt;code&gt;Instant&lt;/code&gt; is a wrapper around system-specific types and it may behave differently depending on the underlying operating system. For example, the following snippet is fine on Linux but panics on macOS:</target>
        </trans-unit>
        <trans-unit id="08eb1e2f2f021298ee3677019a6bda280ed6f694" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;Ordering&lt;/code&gt; is the result of a comparison between two values.</source>
          <target state="translated">&lt;code&gt;Ordering&lt;/code&gt; 2つの値の間の比較の結果です。</target>
        </trans-unit>
        <trans-unit id="001eb435d69650fbb2db42365be5918489730c71" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;RwLock&lt;/code&gt;, like &lt;a href=&quot;struct.mutex&quot;&gt;&lt;code&gt;Mutex&lt;/code&gt;&lt;/a&gt;, will become poisoned on a panic. Note, however, that an &lt;code&gt;RwLock&lt;/code&gt; may only be poisoned if a panic occurs while it is locked exclusively (write mode). If a panic occurs in any reader, then the lock will not be poisoned.</source>
          <target state="translated">アン &lt;code&gt;RwLock&lt;/code&gt; 、のような&lt;a href=&quot;struct.mutex&quot;&gt; &lt;code&gt;Mutex&lt;/code&gt; &lt;/a&gt;、パニックに毒になるだろう。ただし、 &lt;code&gt;RwLock&lt;/code&gt; は、排他的にロックされている（書き込みモード）ときにパニックが発生した場合にのみポイズニングされる可能性があることに注意してください。リーダーでパニックが発生した場合、ロックは無効化されません。</target>
        </trans-unit>
        <trans-unit id="5247e633cc3100e9500337757cb3044553bdf55d" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;enum&lt;/code&gt; with a discriminant must specify a &lt;code&gt;#[repr(inttype)]&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;enum&lt;/code&gt; 判別式では、指定しなければなりません &lt;code&gt;#[repr(inttype)]&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c8b1cbde5060ed31e602542132d6a281bf766f42" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;export_name&lt;/code&gt; attribute contains null characters (&lt;code&gt;\0&lt;/code&gt;).</source>
          <target state="translated">An &lt;code&gt;export_name&lt;/code&gt; attribute contains null characters ( &lt;code&gt;\0&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="21ec5e4c1f77a0601ab37f0e8a98cf223a18e608" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;if let&lt;/code&gt; expression is equivalent to a &lt;a href=&quot;match-expr&quot;&gt;&lt;code&gt;match&lt;/code&gt; expression&lt;/a&gt; as follows:</source>
          <target state="translated">&lt;code&gt;if let&lt;/code&gt; 式は同等です&lt;a href=&quot;match-expr&quot;&gt; &lt;code&gt;match&lt;/code&gt; の式&lt;/a&gt;は次のよう：</target>
        </trans-unit>
        <trans-unit id="2ca624a02ac8519763d7ccacb2b0ad8dad16c279" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;if let&lt;/code&gt; expression is semantically similar to an &lt;code&gt;if&lt;/code&gt; expression but in place of a condition expression it expects the keyword &lt;code&gt;let&lt;/code&gt; followed by a pattern, an &lt;code&gt;=&lt;/code&gt; and a &lt;a href=&quot;../glossary#scrutinee&quot;&gt;scrutinee&lt;/a&gt; expression. If the value of the scrutinee matches the pattern, the corresponding block will execute. Otherwise, flow proceeds to the following &lt;code&gt;else&lt;/code&gt; block if it exists. Like &lt;code&gt;if&lt;/code&gt; expressions, &lt;code&gt;if let&lt;/code&gt; expressions have a value determined by the block that is evaluated.</source>
          <target state="translated">&lt;code&gt;if let&lt;/code&gt; 式は、意味的に似ている &lt;code&gt;if&lt;/code&gt; 表現が、条件式の代わりに、それはキーワードが期待し &lt;code&gt;let&lt;/code&gt; パターン、続い &lt;code&gt;=&lt;/code&gt; と&lt;a href=&quot;../glossary#scrutinee&quot;&gt;scrutineeの&lt;/a&gt;表現。 scrutineeの値がパターンと一致する場合、対応するブロックが実行されます。それ以外の場合、フローは次の &lt;code&gt;else&lt;/code&gt; ブロックに進みます（存在する場合）。同様に &lt;code&gt;if&lt;/code&gt; 式、 &lt;code&gt;if let&lt;/code&gt; 式が評価されたブロックによって決定された値を持っています。</target>
        </trans-unit>
        <trans-unit id="eee510cf708477f86b4dc6237cd892de065d1aca" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;if&lt;/code&gt; expression allows you to branch your code depending on conditions. You provide a condition and then state, &amp;ldquo;If this condition is met, run this block of code. If the condition is not met, do not run this block of code.&amp;rdquo;</source>
          <target state="translated">&lt;code&gt;if&lt;/code&gt; 式は条件に応じてコードを分岐することができます。条件を指定してから、「この条件が満たされている場合は、このコードブロックを実行します。条件が満たされていない場合は、このコードブロックを実行しないでください。」</target>
        </trans-unit>
        <trans-unit id="23bc01de0e1b8681253f7b567d2d01b7869caf61" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;if&lt;/code&gt; expression is a conditional branch in program control. The form of an &lt;code&gt;if&lt;/code&gt; expression is a condition expression, followed by a consequent block, any number of &lt;code&gt;else if&lt;/code&gt; conditions and blocks, and an optional trailing &lt;code&gt;else&lt;/code&gt; block. The condition expressions must have type &lt;code&gt;bool&lt;/code&gt;. If a condition expression evaluates to &lt;code&gt;true&lt;/code&gt;, the consequent block is executed and any subsequent &lt;code&gt;else if&lt;/code&gt; or &lt;code&gt;else&lt;/code&gt; block is skipped. If a condition expression evaluates to &lt;code&gt;false&lt;/code&gt;, the consequent block is skipped and any subsequent &lt;code&gt;else if&lt;/code&gt; condition is evaluated. If all &lt;code&gt;if&lt;/code&gt; and &lt;code&gt;else if&lt;/code&gt; conditions evaluate to &lt;code&gt;false&lt;/code&gt; then any &lt;code&gt;else&lt;/code&gt; block is executed. An if expression evaluates to the same value as the executed block, or &lt;code&gt;()&lt;/code&gt; if no block is evaluated. An &lt;code&gt;if&lt;/code&gt; expression must have the same type in all situations.</source>
          <target state="translated">&lt;code&gt;if&lt;/code&gt; 式がプログラム制御で条件分岐です。 &lt;code&gt;if&lt;/code&gt; 式の形式は条件式であり、その後に続くブロック、任意の数の &lt;code&gt;else if&lt;/code&gt; 条件とブロック、およびオプションの後続する &lt;code&gt;else&lt;/code&gt; ブロックが続きます。条件式のタイプは &lt;code&gt;bool&lt;/code&gt; でなければなりません。条件式が &lt;code&gt;true&lt;/code&gt; と評価された場合、結果のブロックが実行され、後続の &lt;code&gt;else if&lt;/code&gt; または &lt;code&gt;else&lt;/code&gt; ブロックはスキップされます。条件式が &lt;code&gt;false&lt;/code&gt; と評価された場合、後続のブロックはスキップされ、後続の &lt;code&gt;else if&lt;/code&gt; 条件が評価されます。すべての &lt;code&gt;if&lt;/code&gt; と &lt;code&gt;else if&lt;/code&gt; 条件は &lt;code&gt;false&lt;/code&gt; と評価され、 &lt;code&gt;else&lt;/code&gt; ブロックが実行されます。if式は、実行されたブロックと同じ値に評価されます。ブロックが評価されない場合は &lt;code&gt;()&lt;/code&gt; になります。 &lt;code&gt;if&lt;/code&gt; 式がすべての状況で同じ型を持つ必要があります。</target>
        </trans-unit>
        <trans-unit id="f4cc3ee1616a9030743a2ead317eecbbfda11446" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;if&lt;/code&gt; expression is missing an &lt;code&gt;else&lt;/code&gt; block.</source>
          <target state="translated">An &lt;code&gt;if&lt;/code&gt; expression is missing an &lt;code&gt;else&lt;/code&gt; block.</target>
        </trans-unit>
        <trans-unit id="8f0d0db502cd02811b94f8110c6b6a57d9c4d08b" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;if&lt;/code&gt; expression without an &lt;code&gt;else&lt;/code&gt; block has the type &lt;code&gt;()&lt;/code&gt;, so this is a type error. To resolve it, add an &lt;code&gt;else&lt;/code&gt; block having the same type as the &lt;code&gt;if&lt;/code&gt; block.</source>
          <target state="translated">&lt;code&gt;if&lt;/code&gt; 無し式 &lt;code&gt;else&lt;/code&gt; ブロックタイプを有する &lt;code&gt;()&lt;/code&gt; 、これは型エラーです。これを解決するには、追加 &lt;code&gt;else&lt;/code&gt; と同じ種類のブロック &lt;code&gt;if&lt;/code&gt; ブロックを。</target>
        </trans-unit>
        <trans-unit id="86c2bbd51b64dbea789df858c004c474818f64aa" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;impl Trait&lt;/code&gt; type expands to a recursive type.</source>
          <target state="translated">&lt;code&gt;impl Trait&lt;/code&gt; の種類は、再帰型に拡張されます。</target>
        </trans-unit>
        <trans-unit id="714f0cd77b96bfb041f113fa02745f0b3de0da54" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;impl Trait&lt;/code&gt; type must be expandable to a concrete type that contains no &lt;code&gt;impl Trait&lt;/code&gt; types. For example the following example tries to create an &lt;code&gt;impl Trait&lt;/code&gt; type &lt;code&gt;T&lt;/code&gt; that is equal to &lt;code&gt;[T, T]&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;impl Trait&lt;/code&gt; タイプには含まれていない具体的なタイプに拡張可能でなければならない &lt;code&gt;impl Trait&lt;/code&gt; 種類を。たとえば、次の例では、 &lt;code&gt;[T, T]&lt;/code&gt; 等しい &lt;code&gt;impl Trait&lt;/code&gt; タイプ &lt;code&gt;T&lt;/code&gt; を作成しようとしています。</target>
        </trans-unit>
        <trans-unit id="5f9bf65171254b99489d8d01742247cb5f9f2b96" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;impl Trait&lt;/code&gt; type must be expandable to a concrete type that contains no &lt;code&gt;impl Trait&lt;/code&gt; types. For example the previous example tries to create an &lt;code&gt;impl Trait&lt;/code&gt; type &lt;code&gt;T&lt;/code&gt; that is equal to &lt;code&gt;[T, T]&lt;/code&gt;.</source>
          <target state="translated">An &lt;code&gt;impl Trait&lt;/code&gt; type must be expandable to a concrete type that contains no &lt;code&gt;impl Trait&lt;/code&gt; types. For example the previous example tries to create an &lt;code&gt;impl Trait&lt;/code&gt; type &lt;code&gt;T&lt;/code&gt; that is equal to &lt;code&gt;[T, T]&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ee4fc89f6e27033dd75c8304209d0e35cd3688c5" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;impl&lt;/code&gt; for a &lt;code&gt;#[marker]&lt;/code&gt; trait tried to override an associated item.</source>
          <target state="translated">&lt;code&gt;#[marker]&lt;/code&gt; トレイトの &lt;code&gt;impl&lt;/code&gt; は、関連付けられたアイテムをオーバーライドしようとしました。</target>
        </trans-unit>
        <trans-unit id="6d1073354ecc9c5e7785479d7d2a13da928ab63a" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;x&lt;/code&gt; with value &lt;code&gt;0&lt;/code&gt; will return the bit width of &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">値 &lt;code&gt;0&lt;/code&gt; の &lt;code&gt;x&lt;/code&gt; は &lt;code&gt;T&lt;/code&gt; のビット幅を返します。</target>
        </trans-unit>
        <trans-unit id="80f05b7296f4e1950e87afc07c23f9e722a69148" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;x&lt;/code&gt; with value &lt;code&gt;0&lt;/code&gt; will return the bit width of &lt;code&gt;T&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; 値が &lt;code&gt;0&lt;/code&gt; のビット幅戻ります &lt;code&gt;T&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="4ce321b8a11937b61aec381eab2e9acd0f2ae8bc" translate="yes" xml:space="preserve">
          <source>An &lt;em&gt;&lt;a href=&quot;../types/array&quot;&gt;array&lt;/a&gt; expression&lt;/em&gt; can be written by enclosing zero or more comma-separated expressions of uniform type in square brackets. This produces an array containing each of these values in the order they are written.</source>
          <target state="translated">An &lt;em&gt;&lt;a href=&quot;../types/array&quot;&gt;array&lt;/a&gt; expression&lt;/em&gt; can be written by enclosing zero or more comma-separated expressions of uniform type in square brackets. This produces an array containing each of these values in the order they are written.</target>
        </trans-unit>
        <trans-unit id="534dc31a67cf35753f9f6ff5f73b65cd1ba58ab5" translate="yes" xml:space="preserve">
          <source>An &lt;em&gt;&lt;a href=&quot;../types/array&quot;&gt;array&lt;/a&gt; expression&lt;/em&gt; can be written by enclosing zero or more comma-separated expressions of uniform type in square brackets. This produces and array containing each of these values in the order they are written.</source>
          <target state="translated">&lt;em&gt;&lt;a href=&quot;../types/array&quot;&gt;配列の&lt;/a&gt;発現は、&lt;/em&gt;角括弧内に均一型のゼロまたはそれ以上のカンマで区切られた式を囲んで書くことができます。これにより、これらの各値が書き込まれた順序で格納された配列が生成されます。</target>
        </trans-unit>
        <trans-unit id="32616f8cb6d3bd819da208e9fcccc36635a05f1e" translate="yes" xml:space="preserve">
          <source>An &lt;em&gt;&lt;code&gt;extern crate&lt;/code&gt; declaration&lt;/em&gt; specifies a dependency on an external crate. The external crate is then bound into the declaring scope as the &lt;a href=&quot;../identifiers&quot;&gt;identifier&lt;/a&gt; provided in the &lt;code&gt;extern crate&lt;/code&gt; declaration. The &lt;code&gt;as&lt;/code&gt; clause can be used to bind the imported crate to a different name.</source>
          <target state="translated">&lt;em&gt; &lt;code&gt;extern crate&lt;/code&gt; 宣言は、&lt;/em&gt;外部クレートへの依存性を指定します。次に、外部クレートは、 &lt;code&gt;extern crate&lt;/code&gt; 宣言で提供された&lt;a href=&quot;../identifiers&quot;&gt;識別子&lt;/a&gt;として宣言スコープにバインドされます。句は、別の名前にインポートクレートを結合するために使用することができます。 &lt;code&gt;as&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="13494e1cedf4f5c5ecdcb7c07e83d0cd9827df20" translate="yes" xml:space="preserve">
          <source>An &lt;em&gt;absolute path&lt;/em&gt; starts from a crate root by using a crate name or a literal &lt;code&gt;crate&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;絶対パスは、&lt;/em&gt;クレート名またはリテラル使用して、クレートルートから開始 &lt;code&gt;crate&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="86fdc788150826ae707ba926f5a66e96063c57f9" translate="yes" xml:space="preserve">
          <source>An &lt;em&gt;assignment expression&lt;/em&gt; consists of a &lt;a href=&quot;../expressions#place-expressions-and-value-expressions&quot;&gt;place expression&lt;/a&gt; followed by an equals sign (&lt;code&gt;=&lt;/code&gt;) and a &lt;a href=&quot;../expressions#place-expressions-and-value-expressions&quot;&gt;value expression&lt;/a&gt;. Such an expression always has the &lt;a href=&quot;../types/tuple&quot;&gt;&lt;code&gt;unit&lt;/code&gt; type&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;代入式は、&lt;/em&gt;から成る&lt;a href=&quot;../expressions#place-expressions-and-value-expressions&quot;&gt;場所発現&lt;/a&gt;等号が続く（ &lt;code&gt;=&lt;/code&gt; ）と&lt;a href=&quot;../expressions#place-expressions-and-value-expressions&quot;&gt;値式&lt;/a&gt;。このような式には常に&lt;a href=&quot;../types/tuple&quot;&gt; &lt;code&gt;unit&lt;/code&gt; タイプがあり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="ca56087cc708820efe9481bf7313fdab4a040e22" translate="yes" xml:space="preserve">
          <source>An &lt;em&gt;associated constant declaration&lt;/em&gt; declares a signature for associated constant definitions. It is written as &lt;code&gt;const&lt;/code&gt;, then an identifier, then &lt;code&gt;:&lt;/code&gt;, then a type, finished by a &lt;code&gt;;&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;関連定数宣言が&lt;/em&gt;関連付けられた定数定義の署名を宣言する。それは &lt;code&gt;const&lt;/code&gt; 、次に識別子、次に &lt;code&gt;:&lt;/code&gt; 、次にタイプとして書かれ、 &lt;code&gt;;&lt;/code&gt; で終了します。。</target>
        </trans-unit>
        <trans-unit id="ec29836d6b0ec5f807474f5934209d4fe8c7bb83" translate="yes" xml:space="preserve">
          <source>An &lt;em&gt;associated constant definition&lt;/em&gt; defines a constant associated with a type. It is written the same as a &lt;a href=&quot;constant-items&quot;&gt;constant item&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;関連する定数の定義は、&lt;/em&gt;タイプに関連付けられた定数を定義します。&lt;a href=&quot;constant-items&quot;&gt;定数項目&lt;/a&gt;と同じように書かれています。</target>
        </trans-unit>
        <trans-unit id="c9d2944c74176d8d6fa13f7d573ee85d9e742d32" translate="yes" xml:space="preserve">
          <source>An &lt;em&gt;associated function declaration&lt;/em&gt; declares a signature for an associated function definition. It is written as a function item, except the function body is replaced with a &lt;code&gt;;&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;関連関数宣言は&lt;/em&gt;、関連する関数定義のシグネチャを宣言する。関数本体が &lt;code&gt;;&lt;/code&gt; に置き換えられることを除いて、関数項目として記述されます。。</target>
        </trans-unit>
        <trans-unit id="dce2c17d462060e477f166e6bcfabaf54ef17987" translate="yes" xml:space="preserve">
          <source>An &lt;em&gt;associated function definition&lt;/em&gt; defines a function associated with another type. It is written the same as a &lt;a href=&quot;../types/function-item&quot;&gt;function item&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;関連した関数の定義は&lt;/em&gt;、他のタイプに関連付けられた機能を定義します。&lt;a href=&quot;../types/function-item&quot;&gt;関数アイテム&lt;/a&gt;と同じように書かれています。</target>
        </trans-unit>
        <trans-unit id="ddd6d9f2bd71f652e6f6a519a466ea3ae43a3bff" translate="yes" xml:space="preserve">
          <source>An &lt;em&gt;associated type declaration&lt;/em&gt; declares a signature for associated type definitions. It is written as &lt;code&gt;type&lt;/code&gt;, then an &lt;a href=&quot;../identifiers&quot;&gt;identifier&lt;/a&gt;, and finally an optional list of trait bounds.</source>
          <target state="translated">&lt;em&gt;関連するタイプ宣言が&lt;/em&gt;関連付けられているタイプ定義のための署名を宣言する。これは &lt;code&gt;type&lt;/code&gt; 、次に&lt;a href=&quot;../identifiers&quot;&gt;identifier&lt;/a&gt;、最後にオプションの特性境界のリストとして記述されます。</target>
        </trans-unit>
        <trans-unit id="9bd2e844486eba2a5ee0638c6e470984a319e1bf" translate="yes" xml:space="preserve">
          <source>An &lt;em&gt;associated type definition&lt;/em&gt; defines a type alias on another type. It is written as &lt;code&gt;type&lt;/code&gt;, then an &lt;a href=&quot;../identifiers&quot;&gt;identifier&lt;/a&gt;, then an &lt;code&gt;=&lt;/code&gt;, and finally a &lt;a href=&quot;../types#type-expressions&quot;&gt;type&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;関連する型定義は&lt;/em&gt;、他の種類のタイプの別名を定義します。 &lt;code&gt;type&lt;/code&gt; 、&lt;a href=&quot;../identifiers&quot;&gt;識別子&lt;/a&gt;、 &lt;code&gt;=&lt;/code&gt; の順に記述され、最後に&lt;a href=&quot;../types#type-expressions&quot;&gt;タイプ&lt;/a&gt;が記述されます。</target>
        </trans-unit>
        <trans-unit id="d29048068c2d4e137f184a7dcfb9e91e3a77ac3e" translate="yes" xml:space="preserve">
          <source>An &lt;em&gt;async block&lt;/em&gt; is a variant of a block expression which evaluates to a &lt;em&gt;future&lt;/em&gt;. The final expression of the block, if present, determines the result value of the future.</source>
          <target state="translated">An &lt;em&gt;async block&lt;/em&gt; is a variant of a block expression which evaluates to a &lt;em&gt;future&lt;/em&gt;. The final expression of the block, if present, determines the result value of the future.</target>
        </trans-unit>
        <trans-unit id="335c18325b2749c2db5132eb57bce1ffbfa512dc" translate="yes" xml:space="preserve">
          <source>An &lt;em&gt;attribute&lt;/em&gt; is a general, free-form metadatum that is interpreted according to name, convention, and language and compiler version. Attributes are modeled on Attributes in &lt;a href=&quot;https://www.ecma-international.org/publications/standards/Ecma-335.htm&quot;&gt;ECMA-335&lt;/a&gt;, with the syntax coming from &lt;a href=&quot;https://www.ecma-international.org/publications/standards/Ecma-334.htm&quot;&gt;ECMA-334&lt;/a&gt; (C#).</source>
          <target state="translated">&lt;em&gt;属性には、&lt;/em&gt;名前、慣習、言語とコンパイラのバージョンに応じて解釈される一般的な、自由形式のmetadatumです。属性は&lt;a href=&quot;https://www.ecma-international.org/publications/standards/Ecma-335.htm&quot;&gt;ECMA-335の&lt;/a&gt;属性に基づいてモデル化され、構文は&lt;a href=&quot;https://www.ecma-international.org/publications/standards/Ecma-334.htm&quot;&gt;ECMA-334&lt;/a&gt;（C＃）から取得されます。</target>
        </trans-unit>
        <trans-unit id="7486c611897561f3f092f583b562152c09bc11bb" translate="yes" xml:space="preserve">
          <source>An &lt;em&gt;attribute&lt;/em&gt; is a general, free-form metadatum that is interpreted according to name, convention, language, and compiler version. Attributes are modeled on Attributes in &lt;a href=&quot;https://www.ecma-international.org/publications/standards/Ecma-335.htm&quot;&gt;ECMA-335&lt;/a&gt;, with the syntax coming from &lt;a href=&quot;https://www.ecma-international.org/publications/standards/Ecma-334.htm&quot;&gt;ECMA-334&lt;/a&gt; (C#).</source>
          <target state="translated">An &lt;em&gt;attribute&lt;/em&gt; is a general, free-form metadatum that is interpreted according to name, convention, language, and compiler version. Attributes are modeled on Attributes in &lt;a href=&quot;https://www.ecma-international.org/publications/standards/Ecma-335.htm&quot;&gt;ECMA-335&lt;/a&gt;, with the syntax coming from &lt;a href=&quot;https://www.ecma-international.org/publications/standards/Ecma-334.htm&quot;&gt;ECMA-334&lt;/a&gt; (C#).</target>
        </trans-unit>
        <trans-unit id="8f90d06fddc7c21886a0949a73d97b908062294c" translate="yes" xml:space="preserve">
          <source>An &lt;em&gt;enumerated type&lt;/em&gt; is a nominal, heterogeneous disjoint union type, denoted by the name of an &lt;a href=&quot;../items/enumerations&quot;&gt;&lt;code&gt;enum&lt;/code&gt; item&lt;/a&gt;. &lt;sup&gt;&lt;a href=&quot;#enumtype&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;</source>
          <target state="translated">An &lt;em&gt;enumerated type&lt;/em&gt; is a nominal, heterogeneous disjoint union type, denoted by the name of an &lt;a href=&quot;../items/enumerations&quot;&gt; &lt;code&gt;enum&lt;/code&gt; item&lt;/a&gt;. &lt;sup&gt;&lt;a href=&quot;#enumtype&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="fe8d0e2999c5dfed50da51262f087365afa14a25" translate="yes" xml:space="preserve">
          <source>An &lt;em&gt;enumerated type&lt;/em&gt; is a nominal, heterogeneous disjoint union type, denoted by the name of an &lt;a href=&quot;../items/enumerations&quot;&gt;&lt;code&gt;enum&lt;/code&gt; item&lt;/a&gt;. &lt;sup&gt;&lt;a href=&quot;enum#enumtype&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;</source>
          <target state="translated">&lt;em&gt;列挙型は、&lt;/em&gt;の名前で示され、名目、異種のばらばらの共用体型である&lt;a href=&quot;../items/enumerations&quot;&gt; &lt;code&gt;enum&lt;/code&gt; アイテム&lt;/a&gt;。&lt;sup&gt;&lt;a href=&quot;enum#enumtype&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="519b32460e4cf24cbf7584ec56a2b57870f1cdef" translate="yes" xml:space="preserve">
          <source>An &lt;em&gt;enumeration&lt;/em&gt;, also referred to as &lt;em&gt;enum&lt;/em&gt; is a simultaneous definition of a nominal &lt;a href=&quot;../types/enum&quot;&gt;enumerated type&lt;/a&gt; as well as a set of &lt;em&gt;constructors&lt;/em&gt;, that can be used to create or pattern-match values of the corresponding enumerated type.</source>
          <target state="translated">&lt;em&gt;列挙&lt;/em&gt;とも呼ばれる、&lt;em&gt;列挙は、&lt;/em&gt;公称の同時定義で&lt;a href=&quot;../types/enum&quot;&gt;列挙型&lt;/a&gt;と同様のセット&lt;em&gt;コンストラクタ&lt;/em&gt;対応する列挙型の又はパターンマッチ値を作成するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="670995bec677d5fc81f3189dbec41d6de7da346c" translate="yes" xml:space="preserve">
          <source>An &lt;em&gt;example term&lt;/em&gt; is an example of a term being defined.</source>
          <target state="translated">&lt;em&gt;例えば、この用語は、&lt;/em&gt;定義される用語の例です。</target>
        </trans-unit>
        <trans-unit id="03f2bd4498afb61074c0d1568fbae87b71b0a6a3" translate="yes" xml:space="preserve">
          <source>An &lt;em&gt;expression statement&lt;/em&gt; is one that evaluates an &lt;a href=&quot;expressions&quot;&gt;expression&lt;/a&gt; and ignores its result. As a rule, an expression statement's purpose is to trigger the effects of evaluating its expression.</source>
          <target state="translated">&lt;em&gt;式文は、&lt;/em&gt;評価1で&lt;a href=&quot;expressions&quot;&gt;表現し&lt;/a&gt;、その結果を無視します。原則として、式ステートメントの目的は、式の評価の効果をトリガーすることです。</target>
        </trans-unit>
        <trans-unit id="4c66d5e565f712d67ccd031da7fc185642328c03" translate="yes" xml:space="preserve">
          <source>An &lt;em&gt;extending pattern&lt;/em&gt; is either</source>
          <target state="translated">An &lt;em&gt;extending pattern&lt;/em&gt; is either</target>
        </trans-unit>
        <trans-unit id="111aa957a35f04452bf335357f4b5845abfce6b9" translate="yes" xml:space="preserve">
          <source>An &lt;em&gt;implementation&lt;/em&gt; is an item that associates items with an &lt;em&gt;implementing type&lt;/em&gt;. Implementations are defined with the keyword &lt;code&gt;impl&lt;/code&gt; and contain functions that belong to an instance of the type that is being implemented or to the type statically.</source>
          <target state="translated">&lt;em&gt;実装が&lt;/em&gt;持つアイテムに関連付けアイテムです&lt;em&gt;実装タイプを&lt;/em&gt;。実装はキーワード &lt;code&gt;impl&lt;/code&gt; で定義され、実装される型のインスタンスまたは静的に型に属する関数を含みます。</target>
        </trans-unit>
        <trans-unit id="26714676268e63e4c19e025e4e919231c94ab7b4" translate="yes" xml:space="preserve">
          <source>An &lt;em&gt;integer literal&lt;/em&gt; has one of four forms:</source>
          <target state="translated">&lt;em&gt;整数リテラルは、&lt;/em&gt; 4つの形式のいずれかになります。</target>
        </trans-unit>
        <trans-unit id="3b04f25de241c42aa4cc17d61d52253aec0db163" translate="yes" xml:space="preserve">
          <source>An &lt;em&gt;integer&lt;/em&gt; is a number without a fractional component. We used one integer type in Chapter 2, the &lt;code&gt;u32&lt;/code&gt; type. This type declaration indicates that the value it&amp;rsquo;s associated with should be an unsigned integer (signed integer types start with &lt;code&gt;i&lt;/code&gt;, instead of &lt;code&gt;u&lt;/code&gt;) that takes up 32 bits of space. Table 3-1 shows the built-in integer types in Rust. Each variant in the Signed and Unsigned columns (for example, &lt;code&gt;i16&lt;/code&gt;) can be used to declare the type of an integer value.</source>
          <target state="translated">&lt;em&gt;整数&lt;/em&gt;分数成分を含まない数です。第2章では、1つの整数型、 &lt;code&gt;u32&lt;/code&gt; 型を使用しました。この型宣言は、関連付けられている値が32ビットのスペースを占める符号なし整数（ &lt;code&gt;u&lt;/code&gt; の代わりに &lt;code&gt;i&lt;/code&gt; で始まる符号付き整数型）であることを示しています。表3-1は、Rustの組み込み整数型を示しています。 Signed列とUnsigned列の各バリアント（たとえば、 &lt;code&gt;i16&lt;/code&gt; ）を使用して、整数値の型を宣言できます。</target>
        </trans-unit>
        <trans-unit id="c86645edb5b5b0c86e3d214a4daf335142eb0487" translate="yes" xml:space="preserve">
          <source>An &lt;em&gt;item declaration statement&lt;/em&gt; has a syntactic form identical to an &lt;a href=&quot;items&quot;&gt;item declaration&lt;/a&gt; within a &lt;a href=&quot;items/modules&quot;&gt;module&lt;/a&gt;. Declaring an item within a statement block restricts its scope to the block containing the statement. The item is not given a &lt;a href=&quot;paths#canonical-paths&quot;&gt;canonical path&lt;/a&gt; nor are any sub-items it may declare. The exception to this is that associated items defined by &lt;a href=&quot;items/implementations&quot;&gt;implementations&lt;/a&gt; are still accessible in outer scopes as long as the item and, if applicable, trait are accessible. It is otherwise identical in meaning to declaring the item inside a module.</source>
          <target state="translated">&lt;em&gt;アイテムの宣言文は、&lt;/em&gt;同一の構文形式有する&lt;a href=&quot;items&quot;&gt;アイテム宣言&lt;/a&gt;内の&lt;a href=&quot;items/modules&quot;&gt;モジュール&lt;/a&gt;。ステートメントブロック内でアイテムを宣言すると、そのスコープはステートメントを含むブロックに制限されます。アイテムには&lt;a href=&quot;paths#canonical-paths&quot;&gt;正規のパスが&lt;/a&gt;与えられておらず、宣言できるサブアイテムもありません。これの例外は、&lt;a href=&quot;items/implementations&quot;&gt;実装&lt;/a&gt;によって定義された関連項目は、項目と、該当する場合は特性にアクセスできる限り、外部スコープで引き続きアクセスできることです。それ以外の点は、モジュール内でアイテムを宣言することと同じ意味です。</target>
        </trans-unit>
        <trans-unit id="7cb6bea3f24f939f1296c8f5c8b195169146ee81" translate="yes" xml:space="preserve">
          <source>An &lt;em&gt;item&lt;/em&gt; is a component of a crate. Items are organized within a crate by a nested set of &lt;a href=&quot;items/modules&quot;&gt;modules&lt;/a&gt;. Every crate has a single &quot;outermost&quot; anonymous module; all further items within the crate have &lt;a href=&quot;paths&quot;&gt;paths&lt;/a&gt; within the module tree of the crate.</source>
          <target state="translated">&lt;em&gt;アイテムは、&lt;/em&gt;クレートの構成要素です。アイテムは、ネストされた&lt;a href=&quot;items/modules&quot;&gt;モジュールの&lt;/a&gt;セットによってクレート内で編成されます。すべてのクレートには、単一の「最も外側の」匿名モジュールがあります。クレート内のすべてのアイテムには、クレートのモジュールツリー内の&lt;a href=&quot;paths&quot;&gt;パス&lt;/a&gt;があります。</target>
        </trans-unit>
        <trans-unit id="8df47e4537a8816a2744d87425d00def520f575a" translate="yes" xml:space="preserve">
          <source>An &lt;em&gt;octal literal&lt;/em&gt; starts with the character sequence &lt;code&gt;U+0030&lt;/code&gt;&lt;code&gt;U+006F&lt;/code&gt; (&lt;code&gt;0o&lt;/code&gt;) and continues as any mixture (with at least one digit) of octal digits and underscores.</source>
          <target state="translated">&lt;em&gt;進リテラル&lt;/em&gt;文字列で始まる &lt;code&gt;U+0030&lt;/code&gt; &lt;code&gt;U+006F&lt;/code&gt; （ &lt;code&gt;0o&lt;/code&gt; ）と進数字と下線の（少なくとも一桁で）任意の混合物として継続します。</target>
        </trans-unit>
        <trans-unit id="a141d1e8af86d54f8339e504d3e1c56051728a15" translate="yes" xml:space="preserve">
          <source>An Example Program Using Structs</source>
          <target state="translated">構造体を用いたプログラム例</target>
        </trans-unit>
        <trans-unit id="5aefcb56dc6b861369f867948d8b3b7d49377bfe" translate="yes" xml:space="preserve">
          <source>An I/O Project: Building a Command Line Program</source>
          <target state="translated">I/Oプロジェクト。コマンドラインプログラムの構築</target>
        </trans-unit>
        <trans-unit id="0827868381963388a6304543297f7f95e42e9164" translate="yes" xml:space="preserve">
          <source>An IP address, either IPv4 or IPv6.</source>
          <target state="translated">IPv4またはIPv6のいずれかのIPアドレス。</target>
        </trans-unit>
        <trans-unit id="ac4cbc9b22ca704cfdd900cac5407adcf23c5edb" translate="yes" xml:space="preserve">
          <source>An IPv4 address representing an unspecified address: 0.0.0.0</source>
          <target state="translated">不特定のアドレスを表すIPv4アドレス。0.0.0.0</target>
        </trans-unit>
        <trans-unit id="d2e22ab3badaaaa01e7375dd220a2065ca03f949" translate="yes" xml:space="preserve">
          <source>An IPv4 address representing the broadcast address: 255.255.255.255</source>
          <target state="translated">ブロードキャストアドレスを表すIPv4アドレス。255.255.255.255</target>
        </trans-unit>
        <trans-unit id="5f0e70a5e365495e2ae4d74f302988b1f303a907" translate="yes" xml:space="preserve">
          <source>An IPv4 address with the address pointing to localhost: 127.0.0.1.</source>
          <target state="translated">localhostを指すIPv4アドレス:127.0.0.0.1。</target>
        </trans-unit>
        <trans-unit id="c9d68f8900e66f00bfbfd5b6cf93e7f299173890" translate="yes" xml:space="preserve">
          <source>An IPv4 address.</source>
          <target state="translated">IPv4アドレス。</target>
        </trans-unit>
        <trans-unit id="5bb8e3b87105ecbe9c8ed2a2e3a9821088df2706" translate="yes" xml:space="preserve">
          <source>An IPv4 socket address.</source>
          <target state="translated">IPv4 ソケットアドレス。</target>
        </trans-unit>
        <trans-unit id="a30848e04ae8ee9ab468ffa0929f622538606ceb" translate="yes" xml:space="preserve">
          <source>An IPv6 address representing localhost: &lt;code&gt;::1&lt;/code&gt;.</source>
          <target state="translated">localhost：:: &lt;code&gt;::1&lt;/code&gt; 表すIPv6アドレス。</target>
        </trans-unit>
        <trans-unit id="2e145c57ced7f65d6f3f83ddc10fbd40d1da4596" translate="yes" xml:space="preserve">
          <source>An IPv6 address representing the unspecified address: &lt;code&gt;::&lt;/code&gt;</source>
          <target state="translated">未指定のアドレスを表すIPv6アドレス &lt;code&gt;::&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="ee7dda9f630704f82008f3562e22d445246045b1" translate="yes" xml:space="preserve">
          <source>An IPv6 address.</source>
          <target state="translated">IPv6アドレス。</target>
        </trans-unit>
        <trans-unit id="51d9d6e575aa92d12e0b2c0fb0d5fdcf4923ff85" translate="yes" xml:space="preserve">
          <source>An IPv6 socket address.</source>
          <target state="translated">IPv6 ソケットアドレス。</target>
        </trans-unit>
        <trans-unit id="bb7fb098f948c20be5364a0797d6630c8f71fe36" translate="yes" xml:space="preserve">
          <source>An RAII implementation of a &quot;scoped lock&quot; of a mutex. When this structure is dropped (falls out of scope), the lock will be unlocked.</source>
          <target state="translated">ミューテックスの「スコープ付きロック」のRAII実装。この構造体がドロップされると(スコープから外れると)ロックは解除されます。</target>
        </trans-unit>
        <trans-unit id="445fdaee68caea7b120e9af421a1f499e812ae92" translate="yes" xml:space="preserve">
          <source>An additional advantage of using Cargo is that the commands are the same no matter which operating system you&amp;rsquo;re working on. So, at this point, we&amp;rsquo;ll no longer provide specific instructions for Linux and macOS versus Windows.</source>
          <target state="translated">Cargoを使用するもう1つの利点は、作業しているオペレーティングシステムに関係なく、コマンドが同じであることです。そのため、現時点では、LinuxおよびmacOSとWindowsの具体的な手順は提供しません。</target>
        </trans-unit>
        <trans-unit id="71d51fdd16cd827000271f90af417efeb9cea05f" translate="yes" xml:space="preserve">
          <source>An address associated with a Unix socket.</source>
          <target state="translated">Unix ソケットに関連付けられたアドレス。</target>
        </trans-unit>
        <trans-unit id="13ebc470b9c08ca083e04f253e5b3a814fa55f28" translate="yes" xml:space="preserve">
          <source>An anchor in time which can be used to create new &lt;code&gt;SystemTime&lt;/code&gt; instances or learn about where in time a &lt;code&gt;SystemTime&lt;/code&gt; lies.</source>
          <target state="translated">新しい &lt;code&gt;SystemTime&lt;/code&gt; インスタンスを作成したり、 &lt;code&gt;SystemTime&lt;/code&gt; がどこにあるかを知るために使用できる時間のアンカー。</target>
        </trans-unit>
        <trans-unit id="0b2bb6c8ec3576952f4aecc99eb5bbbbf4cbd659" translate="yes" xml:space="preserve">
          <source>An array is a fixed-size sequence of &lt;code&gt;N&lt;/code&gt; elements of type &lt;code&gt;T&lt;/code&gt;. The array type is written as &lt;code&gt;[T; N]&lt;/code&gt;. The size is a &lt;a href=&quot;../const_eval#constant-expressions&quot;&gt;constant expression&lt;/a&gt; that evaluates to a &lt;a href=&quot;numeric#machine-dependent-integer-types&quot;&gt;&lt;code&gt;usize&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">An array is a fixed-size sequence of &lt;code&gt;N&lt;/code&gt; elements of type &lt;code&gt;T&lt;/code&gt; . The array type is written as &lt;code&gt;[T; N]&lt;/code&gt; . The size is a &lt;a href=&quot;../const_eval#constant-expressions&quot;&gt;constant expression&lt;/a&gt; that evaluates to a &lt;a href=&quot;numeric#machine-dependent-integer-types&quot;&gt; &lt;code&gt;usize&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="65f427918d6366c3545d7bcd1528880b6655f86b" translate="yes" xml:space="preserve">
          <source>An array is a fixed-size sequence of &lt;code&gt;N&lt;/code&gt; elements of type &lt;code&gt;T&lt;/code&gt;. The array type is written as &lt;code&gt;[T; N]&lt;/code&gt;. The size is an expression that evaluates to a &lt;a href=&quot;numeric#machine-dependent-integer-types&quot;&gt;&lt;code&gt;usize&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">配列は、タイプ &lt;code&gt;T&lt;/code&gt; の &lt;code&gt;N&lt;/code&gt; 個の要素の固定サイズのシーケンスです。配列タイプは &lt;code&gt;[T; N]&lt;/code&gt; N]。サイズは、&lt;a href=&quot;numeric#machine-dependent-integer-types&quot;&gt; &lt;code&gt;usize&lt;/code&gt; に&lt;/a&gt;評価される式です。</target>
        </trans-unit>
        <trans-unit id="d98f60a77f0bbfa809e448ded22428fbfae4e33e" translate="yes" xml:space="preserve">
          <source>An array is a single chunk of memory allocated on the stack. You can access elements of an array using indexing, like this:</source>
          <target state="translated">配列は、スタック上に割り当てられたメモリの1つの塊です。このようにインデックスを使って配列の要素にアクセスすることができます。</target>
        </trans-unit>
        <trans-unit id="a7bac5ec811f30188ce6fd849b796ac2d30ffddc" translate="yes" xml:space="preserve">
          <source>An array itself is not iterable:</source>
          <target state="translated">配列自体は反復可能ではありません。</target>
        </trans-unit>
        <trans-unit id="f510f3fd4950ebae5518ce0880fd83877599bc5e" translate="yes" xml:space="preserve">
          <source>An array or slice pattern required more elements than were present in the matched array.</source>
          <target state="translated">配列またはスライスパターンは、一致した配列に存在する要素よりも多くの要素を必要とします。</target>
        </trans-unit>
        <trans-unit id="005f7187c479dcce2321a163ab284d4855025280" translate="yes" xml:space="preserve">
          <source>An array or slice pattern was matched against some other type.</source>
          <target state="translated">配列またはスライスパターンが他のタイプとマッチしました。</target>
        </trans-unit>
        <trans-unit id="910b39cfa9beb5c32b52af8b271e7bb38ba1d4da" translate="yes" xml:space="preserve">
          <source>An array without a fixed length was pattern-matched.</source>
          <target state="translated">長さが固定されていない配列がパターンマッチされていました。</target>
        </trans-unit>
        <trans-unit id="9f6ee782e8b3dacab5901a68a88743cdf8f6df8d" translate="yes" xml:space="preserve">
          <source>An array, sometimes also called a fixed-size array or an inline array, is a value describing a collection of elements, each selected by an index that can be computed at run time by the program. It occupies a contiguous region of memory.</source>
          <target state="translated">配列は、固定サイズ配列やインライン配列と呼ばれることもありますが、要素の集合を表す値であり、それぞれが実行時にプログラムによって計算できるインデックスによって選択されます。これはメモリの連続した領域を占有します。</target>
        </trans-unit>
        <trans-unit id="f5926a4f64969381cfadf3083ad59aa47fe8cee7" translate="yes" xml:space="preserve">
          <source>An assignment operator was used on a non-place expression.</source>
          <target state="translated">代入演算子が非置換式で使用されていました。</target>
        </trans-unit>
        <trans-unit id="0369538fab9323882e54c1420899b941701d5cc4" translate="yes" xml:space="preserve">
          <source>An associated const has been referenced in a pattern.</source>
          <target state="translated">関連する const がパターンで参照されています。</target>
        </trans-unit>
        <trans-unit id="653f3f2885d5dd5f232a75cd2c5ed4a07f552285" translate="yes" xml:space="preserve">
          <source>An associated const was implemented when another trait item was expected.</source>
          <target state="translated">別の形質項目が予想される場合、関連する const が実装されました。</target>
        </trans-unit>
        <trans-unit id="704af6b84f8ec0b7b57fdf7ea0ff93aa51a032a6" translate="yes" xml:space="preserve">
          <source>An associated const was implemented when another trait item was expected. Erroneous code example:</source>
          <target state="translated">別の形質項目が期待されていたときに、関連付けられた const が実装されました。誤ったコード例です。</target>
        </trans-unit>
        <trans-unit id="597e595feda6e78ec52004cc35588610f09289b1" translate="yes" xml:space="preserve">
          <source>An associated constant whose name does not match any of the associated constants in the trait was used when implementing the trait.</source>
          <target state="translated">形質を実装する際に、その名前が形質内の関連定数のどれとも一致しない関連定数が使用されました。</target>
        </trans-unit>
        <trans-unit id="ac10e51ff90ef78acbd226706348e7754e0cff2c" translate="yes" xml:space="preserve">
          <source>An associated function for a trait was defined to be a method (i.e., to take a &lt;code&gt;self&lt;/code&gt; parameter), but an implementation of the trait declared the same function to be static.</source>
          <target state="translated">トレイトに関連付けられた関数はメソッド（つまり、 &lt;code&gt;self&lt;/code&gt; パラメータを取る）として定義されましたが、トレイトの実装は同じ関数を静的であると宣言しました。</target>
        </trans-unit>
        <trans-unit id="825b9fd38095eee93e418cc09ae8f9ace5e1f868" translate="yes" xml:space="preserve">
          <source>An associated function for a trait was defined to be static, but an implementation of the trait declared the same function to be a method (i.e., to take a &lt;code&gt;self&lt;/code&gt; parameter).</source>
          <target state="translated">トレイトに関連付けられた関数は静的であると定義されましたが、トレイトの実装は同じ関数をメソッドとして宣言しました（つまり、 &lt;code&gt;self&lt;/code&gt; パラメータを取るため）。</target>
        </trans-unit>
        <trans-unit id="a1184c06942df2b68acc5d480218b30a08f0c9d0" translate="yes" xml:space="preserve">
          <source>An associated item is an item that is associated with another item. Associated items are defined in &lt;a href=&quot;items/implementations&quot;&gt;implementations&lt;/a&gt; and declared in &lt;a href=&quot;items/traits&quot;&gt;traits&lt;/a&gt;. Only functions, constants, and type aliases can be associated. Contrast to a &lt;a href=&quot;#free-item&quot;&gt;free item&lt;/a&gt;.</source>
          <target state="translated">An associated item is an item that is associated with another item. Associated items are defined in &lt;a href=&quot;items/implementations&quot;&gt;implementations&lt;/a&gt; and declared in &lt;a href=&quot;items/traits&quot;&gt;traits&lt;/a&gt;. Only functions, constants, and type aliases can be associated. Contrast to a &lt;a href=&quot;#free-item&quot;&gt;free item&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="1035c9277b00c3deebef8eabfe1b836a5766b141" translate="yes" xml:space="preserve">
          <source>An associated item is an item that is associated with another item. Associated items are defined in &lt;a href=&quot;items/implementations&quot;&gt;implementations&lt;/a&gt; and declared in &lt;a href=&quot;items/traits&quot;&gt;traits&lt;/a&gt;. Only functions, constants, and type aliases can be associated. Contrast to a &lt;a href=&quot;glossary#free-item&quot;&gt;free item&lt;/a&gt;.</source>
          <target state="translated">関連アイテムは、別のアイテムに関連付けられているアイテムです。関連する項目は&lt;a href=&quot;items/implementations&quot;&gt;実装&lt;/a&gt;で定義され、&lt;a href=&quot;items/traits&quot;&gt;特性&lt;/a&gt;で宣言されます。関数、定数、および型エイリアスのみを関連付けることができます。&lt;a href=&quot;glossary#free-item&quot;&gt;無料のアイテム&lt;/a&gt;とは対照的です。</target>
        </trans-unit>
        <trans-unit id="ced942872757a981c250f3840769940a97d69e7c" translate="yes" xml:space="preserve">
          <source>An associated item wasn't found in the given type.</source>
          <target state="translated">指定されたタイプに関連する項目が見つかりませんでした。</target>
        </trans-unit>
        <trans-unit id="7d46370a3ccac2f9ec0235a03f2055e6765250fa" translate="yes" xml:space="preserve">
          <source>An associated type binding was done outside of the type parameter declaration and &lt;code&gt;where&lt;/code&gt; clause.</source>
          <target state="translated">An associated type binding was done outside of the type parameter declaration and &lt;code&gt;where&lt;/code&gt; clause.</target>
        </trans-unit>
        <trans-unit id="9116723797d95c7e68863b40ba3626f52a6ce11f" translate="yes" xml:space="preserve">
          <source>An associated type binding was done outside of the type parameter declaration and &lt;code&gt;where&lt;/code&gt; clause. Erroneous code example:</source>
          <target state="translated">関連する型バインディングが、型パラメーター宣言と &lt;code&gt;where&lt;/code&gt; 句の外で行われました。誤ったコード例：</target>
        </trans-unit>
        <trans-unit id="37ff7ecac0e044a097c6ebca208c9701778e86ec" translate="yes" xml:space="preserve">
          <source>An associated type value was specified more than once.</source>
          <target state="translated">関連付けられた型の値が複数回指定されました。</target>
        </trans-unit>
        <trans-unit id="247841afd59307a4cdd6a2a4e665f214e72f4dc2" translate="yes" xml:space="preserve">
          <source>An associated type was implemented when another trait item was expected.</source>
          <target state="translated">別の形質項目が予想される場合に、関連付けられた型が実装されました。</target>
        </trans-unit>
        <trans-unit id="01d78cadc098f0f8d19a172d639f50a5e45d007b" translate="yes" xml:space="preserve">
          <source>An associated type was implemented when another trait item was expected. Erroneous code example:</source>
          <target state="translated">別の形質項目が予想される場合に、関連付けられた型が実装されました。誤ったコード例です。</target>
        </trans-unit>
        <trans-unit id="907ca33cb695a944297042466b1a4f3511ae0a97" translate="yes" xml:space="preserve">
          <source>An associated type wasn't specified for a trait object.</source>
          <target state="translated">関連付けられた型が trait オブジェクトに指定されていませんでした。</target>
        </trans-unit>
        <trans-unit id="57e68f500f344ba1542de979c138dbc82f1b75b2" translate="yes" xml:space="preserve">
          <source>An associated type whose name does not match any of the associated types in the trait was used when implementing the trait.</source>
          <target state="translated">この形質を実装する際には、形質内の関連する型と名前が一致しない関連する型が使用されました。</target>
        </trans-unit>
        <trans-unit id="ca2d4322730aa4a674f88f33ea28a7a44379f38a" translate="yes" xml:space="preserve">
          <source>An asterisk &lt;code&gt;.*&lt;/code&gt;:</source>
          <target state="translated">アスタリスク &lt;code&gt;.*&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="b4e5a645b1ce82ee08ed7b0b7215a18a0a85f802" translate="yes" xml:space="preserve">
          <source>An async function is roughly equivalent to a function that returns &lt;a href=&quot;../types/impl-trait&quot;&gt;&lt;code&gt;impl Future&lt;/code&gt;&lt;/a&gt; and with an &lt;a href=&quot;../expressions/block-expr#async-blocks&quot;&gt;&lt;code&gt;async move&lt;/code&gt; block&lt;/a&gt; as its body:</source>
          <target state="translated">An async function is roughly equivalent to a function that returns &lt;a href=&quot;../types/impl-trait&quot;&gt; &lt;code&gt;impl Future&lt;/code&gt; &lt;/a&gt; and with an &lt;a href=&quot;../expressions/block-expr#async-blocks&quot;&gt; &lt;code&gt;async move&lt;/code&gt; block&lt;/a&gt; as its body:</target>
        </trans-unit>
        <trans-unit id="fcbf33b833d8349f917a7e3318533a910b1e01c0" translate="yes" xml:space="preserve">
          <source>An asynchronous, infinitely buffered channel. The &lt;a href=&quot;fn.channel&quot;&gt;&lt;code&gt;channel&lt;/code&gt;&lt;/a&gt; function will return a &lt;code&gt;(Sender, Receiver)&lt;/code&gt; tuple where all sends will be &lt;strong&gt;asynchronous&lt;/strong&gt; (they never block). The channel conceptually has an infinite buffer.</source>
          <target state="translated">非同期で無限にバッファリングされるチャネル。&lt;a href=&quot;fn.channel&quot;&gt; &lt;code&gt;channel&lt;/code&gt; &lt;/a&gt;機能が返されます &lt;code&gt;(Sender, Receiver)&lt;/code&gt; のすべてがされる送信タプル&lt;strong&gt;非同期に&lt;/strong&gt;（彼らはブロックしません）。チャネルには、概念的には無限のバッファーがあります。</target>
        </trans-unit>
        <trans-unit id="f387b126eb53d62fa04e8482ab5a1aac01b56bf6" translate="yes" xml:space="preserve">
          <source>An atomic fence.</source>
          <target state="translated">原子フェンス。</target>
        </trans-unit>
        <trans-unit id="a37a15efc349a5896258ef2d831759eaab050729" translate="yes" xml:space="preserve">
          <source>An atomic integer initialized to &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;0&lt;/code&gt; に初期化されるアトミック整数。</target>
        </trans-unit>
        <trans-unit id="ae4be8bb4563b5c446bf4ec14a3a559fbf234d0d" translate="yes" xml:space="preserve">
          <source>An attempt to implement the &lt;code&gt;Copy&lt;/code&gt; trait for a struct failed because one of the fields does not implement &lt;code&gt;Copy&lt;/code&gt;. To fix this, you must implement &lt;code&gt;Copy&lt;/code&gt; for the mentioned field. Note that this may not be possible, as in the example of</source>
          <target state="translated">フィールドの1つが &lt;code&gt;Copy&lt;/code&gt; を実装していないため、構造体に &lt;code&gt;Copy&lt;/code&gt; トレイトを実装しようとして失敗しました。これを修正するには、上記のフィールドに &lt;code&gt;Copy&lt;/code&gt; を実装する必要があります。の例のように、これは可能でない場合があることに注意してください</target>
        </trans-unit>
        <trans-unit id="2c5fbb1197d035a7f4fa92b6ea1f62d369096169" translate="yes" xml:space="preserve">
          <source>An attempt to implement the &lt;code&gt;Copy&lt;/code&gt; trait for an enum failed because one of the variants does not implement &lt;code&gt;Copy&lt;/code&gt;. To fix this, you must implement &lt;code&gt;Copy&lt;/code&gt; for the mentioned variant. Note that this may not be possible, as in the example of</source>
          <target state="translated">An attempt to implement the &lt;code&gt;Copy&lt;/code&gt; trait for an enum failed because one of the variants does not implement &lt;code&gt;Copy&lt;/code&gt; . To fix this, you must implement &lt;code&gt;Copy&lt;/code&gt; for the mentioned variant. Note that this may not be possible, as in the example of</target>
        </trans-unit>
        <trans-unit id="b71c2935e96e5f7fe3e3f35ad00fd7b30920019f" translate="yes" xml:space="preserve">
          <source>An attempt to index into a type which doesn't implement the &lt;code&gt;std::ops::Index&lt;/code&gt; trait was performed.</source>
          <target state="translated">&lt;code&gt;std::ops::Index&lt;/code&gt; トレイトを実装していない型にインデックスを付ける試みが行われました。</target>
        </trans-unit>
        <trans-unit id="51757a13968190cd3655b5b9aeefd9a5c033b3d1" translate="yes" xml:space="preserve">
          <source>An attempt to use index on a type which doesn't implement the &lt;code&gt;std::ops::Index&lt;/code&gt; trait was performed.</source>
          <target state="translated">An attempt to use index on a type which doesn't implement the &lt;code&gt;std::ops::Index&lt;/code&gt; trait was performed.</target>
        </trans-unit>
        <trans-unit id="8b97d7ea40069db8f20f10d06addb087be36d0ac" translate="yes" xml:space="preserve">
          <source>An attempt was made to access an associated constant through either a generic type parameter or &lt;code&gt;Self&lt;/code&gt;. This is not supported yet. An example causing this error is shown below:</source>
          <target state="translated">An attempt was made to access an associated constant through either a generic type parameter or &lt;code&gt;Self&lt;/code&gt; . This is not supported yet. An example causing this error is shown below:</target>
        </trans-unit>
        <trans-unit id="b710e02452ddf90fa51364201e945e5cc61639f6" translate="yes" xml:space="preserve">
          <source>An attempt was made to assign to a borrowed value.</source>
          <target state="translated">借りた値に代入しようとした。</target>
        </trans-unit>
        <trans-unit id="1bdf1eb8c23bfc6042e5dd9af78ec4f5f794fefe" translate="yes" xml:space="preserve">
          <source>An attempt was made to constrain an associated type.</source>
          <target state="translated">関連する型を制約する試みが行われました。</target>
        </trans-unit>
        <trans-unit id="8febb37ae18b2d657b2615e5b330d2a55118441d" translate="yes" xml:space="preserve">
          <source>An attempt was made to implement &lt;code&gt;Drop&lt;/code&gt; on a concrete specialization of a generic type. An example is shown below:</source>
          <target state="translated">ジェネリック型の具体的な特殊化に &lt;code&gt;Drop&lt;/code&gt; を実装する試みが行われました。以下に例を示します。</target>
        </trans-unit>
        <trans-unit id="26819bff2d7a8100bea5239c764f0f0d26036cba" translate="yes" xml:space="preserve">
          <source>An attempt was made to implement &lt;code&gt;Drop&lt;/code&gt; on a specialization of a generic type.</source>
          <target state="translated">An attempt was made to implement &lt;code&gt;Drop&lt;/code&gt; on a specialization of a generic type.</target>
        </trans-unit>
        <trans-unit id="09ba79d4404f5653d6f77e24331c8ba336aac40d" translate="yes" xml:space="preserve">
          <source>An attempt was made to implement &lt;code&gt;Drop&lt;/code&gt; on a specialization of a generic type. An example is shown below:</source>
          <target state="translated">ジェネリック型の特殊化に &lt;code&gt;Drop&lt;/code&gt; を実装する試みが行われました。以下に例を示します。</target>
        </trans-unit>
        <trans-unit id="c55e6f81b7dc27d46319cedb33bad7716f5297f4" translate="yes" xml:space="preserve">
          <source>An attempt was made to implement Drop on a trait, which is not allowed: only structs and enums can implement Drop. An example causing this error:</source>
          <target state="translated">Trait に Drop を実装しようとしましたが、これは許可されていません。このエラーの原因となった例。</target>
        </trans-unit>
        <trans-unit id="e153b913d67d75c58662cead8cf242032c80e00b" translate="yes" xml:space="preserve">
          <source>An attempt was made to mutate data using a non-mutable reference. This commonly occurs when attempting to assign to a non-mutable reference of a mutable reference (&lt;code&gt;&amp;amp;(&amp;amp;mut T)&lt;/code&gt;).</source>
          <target state="translated">変更不可能な参照を使用してデータを変更しようとしました。これは一般に、変更可能な参照（ &lt;code&gt;&amp;amp;(&amp;amp;mut T)&lt;/code&gt; ）の変更不可能な参照に割り当てようとすると発生します。</target>
        </trans-unit>
        <trans-unit id="ca0f2abce0a16f2ca7a56625ca020df6fd2125b3" translate="yes" xml:space="preserve">
          <source>An attempt was made to retrieve an associated type, but the type was ambiguous.</source>
          <target state="translated">関連する型を取得しようと試みましたが、型が曖昧でした。</target>
        </trans-unit>
        <trans-unit id="adb3222e10ca68a4902e2fef67ce06d659218b60" translate="yes" xml:space="preserve">
          <source>An attempt was made to retrieve an associated type, but the type was ambiguous. For example:</source>
          <target state="translated">関連する型を取得しようと試みましたが、型があいまいでした。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="89de6efbf294db50ea9580038de7bf4a99c6cc2d" translate="yes" xml:space="preserve">
          <source>An attempted conversion that consumes &lt;code&gt;self&lt;/code&gt;, which may or may not be expensive.</source>
          <target state="translated">&lt;code&gt;self&lt;/code&gt; を消費する変換の試み。費用がかかる場合とそうでない場合があります。</target>
        </trans-unit>
        <trans-unit id="2be91cd4a4fec9bf78dc3a63f6f2d68f35c2bdbd" translate="yes" xml:space="preserve">
          <source>An attempted implementation of a trait method has the wrong number of function parameters.</source>
          <target state="translated">形質メソッドの実装が試みられていますが、関数パラメータの数が間違っています。</target>
        </trans-unit>
        <trans-unit id="9d8894f1f89d7bc71fd853d9276ef9750108ee20" translate="yes" xml:space="preserve">
          <source>An attempted implementation of a trait method has the wrong number of type or const parameters.</source>
          <target state="translated">trait メソッドの実装を試みた場合、型または const パラメータの数が間違っています。</target>
        </trans-unit>
        <trans-unit id="863f680a55f734bd0dbbca55a32cd8aa13a2d823" translate="yes" xml:space="preserve">
          <source>An attribute is either active or inert. During attribute processing, &lt;em&gt;active attributes&lt;/em&gt; remove themselves from the thing they are on while &lt;em&gt;inert attributes&lt;/em&gt; stay on.</source>
          <target state="translated">属性はアクティブまたは非アクティブです。属性の処理中に、&lt;em&gt;アクティブな属性は&lt;/em&gt;、彼らがいる間にあるものから身を削除する&lt;em&gt;不活性属性&lt;/em&gt;にご滞在を。</target>
        </trans-unit>
        <trans-unit id="de85bca69e396a8c71433fa18f072a410a4fc345" translate="yes" xml:space="preserve">
          <source>An auto trait was declared with a method or an associated item.</source>
          <target state="translated">自動形質がメソッドまたは関連する項目で宣言されました。</target>
        </trans-unit>
        <trans-unit id="8f22761bfa3bdfb0003204a934bf1010c9716a93" translate="yes" xml:space="preserve">
          <source>An empty buffer returned indicates that the stream has reached EOF.</source>
          <target state="translated">返された空のバッファは、ストリームがEOFに達したことを示します。</target>
        </trans-unit>
        <trans-unit id="dc01027756efda949405e0e59c0d834ec342e061" translate="yes" xml:space="preserve">
          <source>An empty iterator returns &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">空のイテレータは &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="442cf9396651f26f54eeff92f4dde433d7f72454" translate="yes" xml:space="preserve">
          <source>An empty iterator returns &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">空のイテレータは &lt;code&gt;true&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="e3ba001b1a53998b8d224cd77e4663359ef99e71" translate="yes" xml:space="preserve">
          <source>An empty iterator returns the one value of the type.</source>
          <target state="translated">空のイテレータは、型の1つの値を返します。</target>
        </trans-unit>
        <trans-unit id="54261d577d85895bf8c09d3febd150e6fae82418" translate="yes" xml:space="preserve">
          <source>An empty iterator returns the zero value of the type.</source>
          <target state="translated">空のイテレータは、型のゼロ値を返します。</target>
        </trans-unit>
        <trans-unit id="95f62854280c7cd5daf0c2b6b4a29d4a8c72ac30" translate="yes" xml:space="preserve">
          <source>An endpoint of a range of keys.</source>
          <target state="translated">キーの範囲の終点。</target>
        </trans-unit>
        <trans-unit id="ee713135dbae7e11e49962ea65b30c33678861ed" translate="yes" xml:space="preserve">
          <source>An entity already exists, often a file.</source>
          <target state="translated">実体は既に存在しており、多くの場合はファイルです。</target>
        </trans-unit>
        <trans-unit id="2db4e2025a972767c9444bca8e88e9a77524203e" translate="yes" xml:space="preserve">
          <source>An entity was not found, often a file.</source>
          <target state="translated">実体が見つかりませんでした。</target>
        </trans-unit>
        <trans-unit id="c5a4a196ff419cb4ace58ac8718f985652b454f9" translate="yes" xml:space="preserve">
          <source>An enum with the representation hint &lt;code&gt;repr(transparent)&lt;/code&gt; had zero or more than one variants.</source>
          <target state="translated">表現ヒント &lt;code&gt;repr(transparent)&lt;/code&gt; を持つ列挙型には、ゼロまたは1つ以上のバリアントがありました。</target>
        </trans-unit>
        <trans-unit id="3dc999ff5594fd4673ff8dbd7678f9024bdecf27" translate="yes" xml:space="preserve">
          <source>An enumeration of possible errors associated with a &lt;a href=&quot;type.trylockresult&quot;&gt;&lt;code&gt;TryLockResult&lt;/code&gt;&lt;/a&gt; which can occur while trying to acquire a lock, from the &lt;a href=&quot;struct.mutex#method.try_lock&quot;&gt;&lt;code&gt;try_lock&lt;/code&gt;&lt;/a&gt; method on a &lt;a href=&quot;struct.mutex&quot;&gt;&lt;code&gt;Mutex&lt;/code&gt;&lt;/a&gt; or the &lt;a href=&quot;struct.rwlock#method.try_read&quot;&gt;&lt;code&gt;try_read&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;struct.rwlock#method.try_write&quot;&gt;&lt;code&gt;try_write&lt;/code&gt;&lt;/a&gt; methods on an &lt;a href=&quot;struct.rwlock&quot;&gt;&lt;code&gt;RwLock&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">関連付けられた可能性のあるエラーの列挙&lt;a href=&quot;type.trylockresult&quot;&gt; &lt;code&gt;TryLockResult&lt;/code&gt; &lt;/a&gt;から、ロックを取得しようとしたときに発生する可能性が&lt;a href=&quot;struct.mutex#method.try_lock&quot;&gt; &lt;code&gt;try_lock&lt;/code&gt; の&lt;/a&gt;上の方法&lt;a href=&quot;struct.mutex&quot;&gt; &lt;code&gt;Mutex&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;struct.rwlock#method.try_read&quot;&gt; &lt;code&gt;try_read&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;struct.rwlock#method.try_write&quot;&gt; &lt;code&gt;try_write&lt;/code&gt; &lt;/a&gt;のメソッド&lt;a href=&quot;struct.rwlock&quot;&gt; &lt;code&gt;RwLock&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="09fd334e73fd76483600e0a3e0818465278a8c4f" translate="yes" xml:space="preserve">
          <source>An error indicating invalid UTF-8 when converting a &lt;a href=&quot;struct.cstring&quot;&gt;&lt;code&gt;CString&lt;/code&gt;&lt;/a&gt; into a &lt;a href=&quot;../string/struct.string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;struct.cstring&quot;&gt; &lt;code&gt;CString&lt;/code&gt; &lt;/a&gt;を&lt;a href=&quot;../string/struct.string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;に変換するときに無効なUTF-8を示すエラー。</target>
        </trans-unit>
        <trans-unit id="7e00442ed63dafefaa24c2855dc12cc641d5d806" translate="yes" xml:space="preserve">
          <source>An error indicating that a nul byte was not in the expected position.</source>
          <target state="translated">nul バイトが期待された位置になかったことを示すエラー。</target>
        </trans-unit>
        <trans-unit id="607c0a59f40344c6d402da3d92f1e4d75c5c8d03" translate="yes" xml:space="preserve">
          <source>An error indicating that an interior nul byte was found.</source>
          <target state="translated">内部のヌルバイトが見つかったことを示すエラーです。</target>
        </trans-unit>
        <trans-unit id="2239ba3f9f1a9c04aabf258d44bc7c635e911959" translate="yes" xml:space="preserve">
          <source>An error of the &lt;a href=&quot;enum.errorkind#variant.Interrupted&quot;&gt;&lt;code&gt;ErrorKind::Interrupted&lt;/code&gt;&lt;/a&gt; kind is non-fatal and the read operation should be retried if there is nothing else to do.</source>
          <target state="translated">&lt;a href=&quot;enum.errorkind#variant.Interrupted&quot;&gt; &lt;code&gt;ErrorKind::Interrupted&lt;/code&gt; &lt;/a&gt;種類のエラーは致命的ではないため、他に何もすることがない場合は、読み取り操作を再試行する必要があります。</target>
        </trans-unit>
        <trans-unit id="ff800591cb202807f317ec28fbc572d02357615d" translate="yes" xml:space="preserve">
          <source>An error of the &lt;a href=&quot;enum.errorkind#variant.Interrupted&quot;&gt;&lt;code&gt;ErrorKind::Interrupted&lt;/code&gt;&lt;/a&gt; kind is non-fatal and the write operation should be retried if there is nothing else to do.</source>
          <target state="translated">&lt;a href=&quot;enum.errorkind#variant.Interrupted&quot;&gt; &lt;code&gt;ErrorKind::Interrupted&lt;/code&gt; &lt;/a&gt;種類のエラーは致命的ではないため、他に何もすることがない場合は、書き込み操作を再試行する必要があります。</target>
        </trans-unit>
        <trans-unit id="597ff1fa4b12094e64ed86609fbee72af9e8d564" translate="yes" xml:space="preserve">
          <source>An error returned by &lt;a href=&quot;struct.bufwriter#method.into_inner&quot;&gt;&lt;code&gt;BufWriter::into_inner&lt;/code&gt;&lt;/a&gt; which combines an error that happened while writing out the buffer, and the buffered writer object which may be used to recover from the condition.</source>
          <target state="translated">An error returned by &lt;a href=&quot;struct.bufwriter#method.into_inner&quot;&gt; &lt;code&gt;BufWriter::into_inner&lt;/code&gt; &lt;/a&gt; which combines an error that happened while writing out the buffer, and the buffered writer object which may be used to recover from the condition.</target>
        </trans-unit>
        <trans-unit id="b6ad7c556d901c0beffc94b348b6d4d9e1e99f53" translate="yes" xml:space="preserve">
          <source>An error returned by &lt;a href=&quot;struct.localkey#method.try_with&quot;&gt;&lt;code&gt;LocalKey::try_with&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;struct.localkey#method.try_with&quot;&gt; &lt;code&gt;LocalKey::try_with&lt;/code&gt; &lt;/a&gt;によって返されたエラー。</target>
        </trans-unit>
        <trans-unit id="4a2bb23cc4bff912e225e8d82c808ebe1116d273" translate="yes" xml:space="preserve">
          <source>An error returned by &lt;a href=&quot;struct.refcell#method.try_borrow&quot;&gt;&lt;code&gt;RefCell::try_borrow&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;struct.refcell#method.try_borrow&quot;&gt; &lt;code&gt;RefCell::try_borrow&lt;/code&gt; &lt;/a&gt;によって返されたエラー。</target>
        </trans-unit>
        <trans-unit id="49b49c608a0a48a5c64a8db743785c3d4f2cbc87" translate="yes" xml:space="preserve">
          <source>An error returned by &lt;a href=&quot;struct.refcell#method.try_borrow_mut&quot;&gt;&lt;code&gt;RefCell::try_borrow_mut&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;struct.refcell#method.try_borrow_mut&quot;&gt; &lt;code&gt;RefCell::try_borrow_mut&lt;/code&gt; &lt;/a&gt;によって返されたエラー。</target>
        </trans-unit>
        <trans-unit id="6a9d323634dc21ac2ba61947c9f4ada5b0523975" translate="yes" xml:space="preserve">
          <source>An error returned by &lt;code&gt;into_inner&lt;/code&gt; which combines an error that happened while writing out the buffer, and the buffered writer object which may be used to recover from the condition.</source>
          <target state="translated">バッファーの書き込み中に発生したエラーと、状態からの回復に使用できるバッファー付きライターオブジェクトを組み合わせた &lt;code&gt;into_inner&lt;/code&gt; によって返されるエラー。</target>
        </trans-unit>
        <trans-unit id="408e9c71ed3bc2aa80ae9ddbf31a37ecbe128d0c" translate="yes" xml:space="preserve">
          <source>An error returned from &lt;a href=&quot;struct.path#method.strip_prefix&quot;&gt;&lt;code&gt;Path::strip_prefix&lt;/code&gt;&lt;/a&gt; if the prefix was not found.</source>
          <target state="translated">プレフィックスが見つからなかった場合、&lt;a href=&quot;struct.path#method.strip_prefix&quot;&gt; &lt;code&gt;Path::strip_prefix&lt;/code&gt; &lt;/a&gt;からエラーが返されました。</target>
        </trans-unit>
        <trans-unit id="788504f3aa85eadb6d0636b88bca37c397dba8e3" translate="yes" xml:space="preserve">
          <source>An error returned from the &lt;a href=&quot;struct.receiver#method.recv&quot;&gt;&lt;code&gt;recv&lt;/code&gt;&lt;/a&gt; function on a &lt;a href=&quot;struct.receiver&quot;&gt;&lt;code&gt;Receiver&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;struct.receiver&quot;&gt; &lt;code&gt;Receiver&lt;/code&gt; の&lt;/a&gt;&lt;a href=&quot;struct.receiver#method.recv&quot;&gt; &lt;code&gt;recv&lt;/code&gt; &lt;/a&gt;関数から返されたエラー。</target>
        </trans-unit>
        <trans-unit id="9fec5ed88196e94f3e7939be6668b9ce8dfe54d0" translate="yes" xml:space="preserve">
          <source>An error returned from the &lt;a href=&quot;struct.sender#method.send&quot;&gt;&lt;code&gt;Sender::send&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;struct.syncsender#method.send&quot;&gt;&lt;code&gt;SyncSender::send&lt;/code&gt;&lt;/a&gt; function on &lt;strong&gt;channel&lt;/strong&gt;s.</source>
          <target state="translated">&lt;strong&gt;チャネル&lt;/strong&gt; sの&lt;a href=&quot;struct.sender#method.send&quot;&gt; &lt;code&gt;Sender::send&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;struct.syncsender#method.send&quot;&gt; &lt;code&gt;SyncSender::send&lt;/code&gt; &lt;/a&gt;関数から返されたエラー。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b947bf8292263975edc2c833eac5521f6b3d5e94" translate="yes" xml:space="preserve">
          <source>An error returned from the &lt;code&gt;duration_since&lt;/code&gt; and &lt;code&gt;elapsed&lt;/code&gt; methods on &lt;code&gt;SystemTime&lt;/code&gt;, used to learn how far in the opposite direction a system time lies.</source>
          <target state="translated">返されたエラー &lt;code&gt;duration_since&lt;/code&gt; と &lt;code&gt;elapsed&lt;/code&gt; の方法 &lt;code&gt;SystemTime&lt;/code&gt; どこまで反対方向のシステム時刻の嘘を学ぶために使用されます、。</target>
        </trans-unit>
        <trans-unit id="3cc3caad00d427c67aa297b2ffd580ffa8825463" translate="yes" xml:space="preserve">
          <source>An error returned when an operation could not be completed because a call to &lt;a href=&quot;trait.write#tymethod.write&quot;&gt;&lt;code&gt;write&lt;/code&gt;&lt;/a&gt; returned &lt;a href=&quot;../result/enum.result#variant.Ok&quot;&gt;&lt;code&gt;Ok(0)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">An error returned when an operation could not be completed because a call to &lt;a href=&quot;trait.write#tymethod.write&quot;&gt; &lt;code&gt;write&lt;/code&gt; &lt;/a&gt; returned &lt;a href=&quot;../result/enum.result#variant.Ok&quot;&gt; &lt;code&gt;Ok(0)&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="f51f86543e577fd1d558ef170de94a1b52743f0b" translate="yes" xml:space="preserve">
          <source>An error returned when an operation could not be completed because a call to &lt;a href=&quot;trait.write#tymethod.write&quot;&gt;&lt;code&gt;write&lt;/code&gt;&lt;/a&gt; returned &lt;a href=&quot;type.result&quot;&gt;&lt;code&gt;Ok(0)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;trait.write#tymethod.write&quot;&gt; &lt;code&gt;write&lt;/code&gt; の&lt;/a&gt;呼び出しが&lt;a href=&quot;type.result&quot;&gt; &lt;code&gt;Ok(0)&lt;/code&gt; を&lt;/a&gt;返したため、操作を完了できなかったときにエラーが返されました。</target>
        </trans-unit>
        <trans-unit id="b05482ca3068a6de89ef72655084867c49191841" translate="yes" xml:space="preserve">
          <source>An error returned when an operation could not be completed because an &quot;end of file&quot; was reached prematurely.</source>
          <target state="translated">ファイルの終了」が早まったため、操作を完了できなかった場合にエラーが返されました。</target>
        </trans-unit>
        <trans-unit id="9c4fdb1f9f1ace5ab60797b01c282f3c5da7046e" translate="yes" xml:space="preserve">
          <source>An error returned when parsing a &lt;code&gt;bool&lt;/code&gt; using &lt;a href=&quot;../primitive.bool#method.from_str&quot;&gt;&lt;code&gt;from_str&lt;/code&gt;&lt;/a&gt; fails</source>
          <target state="translated">解析時にエラーが返された &lt;code&gt;bool&lt;/code&gt; 使用して&lt;a href=&quot;../primitive.bool#method.from_str&quot;&gt; &lt;code&gt;from_str&lt;/code&gt; が&lt;/a&gt;失敗しました</target>
        </trans-unit>
        <trans-unit id="b2cc322b72612b3329e40408b842ec85e5b854bf" translate="yes" xml:space="preserve">
          <source>An error returned when parsing a &lt;code&gt;bool&lt;/code&gt; using &lt;a href=&quot;trait.fromstr#tymethod.from_str&quot;&gt;&lt;code&gt;from_str&lt;/code&gt;&lt;/a&gt; fails</source>
          <target state="translated">An error returned when parsing a &lt;code&gt;bool&lt;/code&gt; using &lt;a href=&quot;trait.fromstr#tymethod.from_str&quot;&gt; &lt;code&gt;from_str&lt;/code&gt; &lt;/a&gt; fails</target>
        </trans-unit>
        <trans-unit id="01956aad1d91d0a3eaa910ec372ba76608859bfc" translate="yes" xml:space="preserve">
          <source>An error that can be returned when decoding UTF-16 code points.</source>
          <target state="translated">UTF-16のコードポイントをデコードする際に返ってくるエラーです。</target>
        </trans-unit>
        <trans-unit id="3533bcb297f1b2a750fb10891e22e5dd49940449" translate="yes" xml:space="preserve">
          <source>An error when parsing a &lt;code&gt;String&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; の解析時のエラー。</target>
        </trans-unit>
        <trans-unit id="a8c4d17e195207f5a989ac26b5a78606dcbba09d" translate="yes" xml:space="preserve">
          <source>An error which can be returned when parsing a char.</source>
          <target state="translated">char を解析する際に返されるエラー。</target>
        </trans-unit>
        <trans-unit id="6080f2ccd647721dacbdd21e9d94b2a3bec77e1f" translate="yes" xml:space="preserve">
          <source>An error which can be returned when parsing a float.</source>
          <target state="translated">float を解析する際に返されるエラー。</target>
        </trans-unit>
        <trans-unit id="8d76e3522dda33b8ed78bf99a4c5562182d54f08" translate="yes" xml:space="preserve">
          <source>An error which can be returned when parsing an IP address or a socket address.</source>
          <target state="translated">IP アドレスまたはソケットアドレスを解析する際に返されるエラー。</target>
        </trans-unit>
        <trans-unit id="c7b106b5fd117686f0aceb67097fd3cef2a189bf" translate="yes" xml:space="preserve">
          <source>An error which can be returned when parsing an integer.</source>
          <target state="translated">整数を解析する際に返されるエラー。</target>
        </trans-unit>
        <trans-unit id="0c10923efe360df9a8a2484a223be28df23ba6ae" translate="yes" xml:space="preserve">
          <source>An evaluation of a trait requirement overflowed.</source>
          <target state="translated">形質要件の評価が溢れた。</target>
        </trans-unit>
        <trans-unit id="1d7c5a9fd1d469b89a9d56899ca1f50026a1dd32" translate="yes" xml:space="preserve">
          <source>An example implementation for a domain in which two books are considered the same book if their ISBN matches, even if the formats differ:</source>
          <target state="translated">フォーマットが異なっていても、ISBNが一致していれば、2冊の本が同じ本とみなされるドメインの実装例。</target>
        </trans-unit>
        <trans-unit id="68ff7c567c0520a3da56cf3b0e9741fe24004f8f" translate="yes" xml:space="preserve">
          <source>An example implementation of the trait:</source>
          <target state="translated">形質の例示的な実装。</target>
        </trans-unit>
        <trans-unit id="28b14342433cafd1cb0863789fedb01f7530bff9" translate="yes" xml:space="preserve">
          <source>An example is a generic struct holding a function pointer. In this case, the implementation of &lt;code&gt;Clone&lt;/code&gt; cannot be &lt;code&gt;derive&lt;/code&gt;d, but can be implemented as:</source>
          <target state="translated">例は、関数ポインタを保持する一般的な構造体です。この場合、 &lt;code&gt;Clone&lt;/code&gt; の実装を &lt;code&gt;derive&lt;/code&gt; ことはできませんが、次のように実装できます。</target>
        </trans-unit>
        <trans-unit id="da1a4e43cf80966a8d5beb99e7207867287f3da9" translate="yes" xml:space="preserve">
          <source>An example of &lt;code&gt;use&lt;/code&gt; declarations:</source>
          <target state="translated">&lt;code&gt;use&lt;/code&gt; 宣言の例：</target>
        </trans-unit>
        <trans-unit id="f512d81d83647ae47cd90bcb76d95f7b8768001b" translate="yes" xml:space="preserve">
          <source>An example of a &lt;code&gt;for&lt;/code&gt; loop over the contents of an array:</source>
          <target state="translated">配列の内容 &lt;code&gt;for&lt;/code&gt; ループの例：</target>
        </trans-unit>
        <trans-unit id="fee9699f2c385a5203b6e01e13cf6011f2fcd8a4" translate="yes" xml:space="preserve">
          <source>An example of a &lt;code&gt;match&lt;/code&gt; expression:</source>
          <target state="translated">&lt;code&gt;match&lt;/code&gt; 式の例：</target>
        </trans-unit>
        <trans-unit id="cfd1afa80d53786d32ba47458c2ed4379f4003bf" translate="yes" xml:space="preserve">
          <source>An example of a &lt;code&gt;return&lt;/code&gt; expression:</source>
          <target state="translated">&lt;code&gt;return&lt;/code&gt; 式の例：</target>
        </trans-unit>
        <trans-unit id="9c5bf1e5202001a02f36098e504bd7cb0fe28030" translate="yes" xml:space="preserve">
          <source>An example of a &lt;code&gt;struct&lt;/code&gt; item and its use:</source>
          <target state="translated">例 &lt;code&gt;struct&lt;/code&gt; 項目とその使用：</target>
        </trans-unit>
        <trans-unit id="3c2199ab0dce170bc0714704fc232fd68c69b281" translate="yes" xml:space="preserve">
          <source>An example of a &lt;em&gt;recursive&lt;/em&gt; type and its use:</source>
          <target state="translated">例&lt;em&gt;再帰&lt;/em&gt;種類とその使用：</target>
        </trans-unit>
        <trans-unit id="0f62525fdcd99f7d466515d9585c0c13357e1b2b" translate="yes" xml:space="preserve">
          <source>An example of a common associated function is a &lt;code&gt;new&lt;/code&gt; function that returns a value of the type the associated function is associated with.</source>
          <target state="translated">一般的な関連関数の例は、関連関数が関連付けられている型の値を返す &lt;code&gt;new&lt;/code&gt; 関数です。</target>
        </trans-unit>
        <trans-unit id="6a351aa1ff4672ddb51a26e9d5f1e845614b350b" translate="yes" xml:space="preserve">
          <source>An example of a for loop over a series of integers:</source>
          <target state="translated">整数列に対するforループの例。</target>
        </trans-unit>
        <trans-unit id="9bcd2ce89adc17fbe7648c05a09884aa0d701978" translate="yes" xml:space="preserve">
          <source>An example of a module:</source>
          <target state="translated">モジュールの例。</target>
        </trans-unit>
        <trans-unit id="8e8435c013addb39ce3eb498c3c558d414e6f6ad" translate="yes" xml:space="preserve">
          <source>An example of a necessary use of parentheses is when calling a function pointer that is a member of a struct:</source>
          <target state="translated">括弧の使用が必要な例としては、構造体のメンバである関数ポインタを呼び出す場合があります。</target>
        </trans-unit>
        <trans-unit id="056ff1cdb43a917deab8c9dc0f118b2d9dd496e8" translate="yes" xml:space="preserve">
          <source>An example of a non-&lt;code&gt;Send&lt;/code&gt; type is the reference-counting pointer &lt;a href=&quot;../rc/struct.rc&quot;&gt;&lt;code&gt;rc::Rc&lt;/code&gt;&lt;/a&gt;. If two threads attempt to clone &lt;a href=&quot;../rc/struct.rc&quot;&gt;&lt;code&gt;Rc&lt;/code&gt;&lt;/a&gt;s that point to the same reference-counted value, they might try to update the reference count at the same time, which is &lt;a href=&quot;../../reference/behavior-considered-undefined&quot;&gt;undefined behavior&lt;/a&gt; because &lt;a href=&quot;../rc/struct.rc&quot;&gt;&lt;code&gt;Rc&lt;/code&gt;&lt;/a&gt; doesn't use atomic operations. Its cousin &lt;a href=&quot;../sync/struct.arc&quot;&gt;&lt;code&gt;sync::Arc&lt;/code&gt;&lt;/a&gt; does use atomic operations (incurring some overhead) and thus is &lt;code&gt;Send&lt;/code&gt;.</source>
          <target state="translated">非 &lt;code&gt;Send&lt;/code&gt; タイプの例は、参照カウントポインター&lt;a href=&quot;../rc/struct.rc&quot;&gt; &lt;code&gt;rc::Rc&lt;/code&gt; &lt;/a&gt;です。2つのスレッドが同じ参照カウント値を指す&lt;a href=&quot;../rc/struct.rc&quot;&gt; &lt;code&gt;Rc&lt;/code&gt; &lt;/a&gt;のクローンを作成しようとすると、参照カウントを同時に更新しようとする可能性があります。これは、&lt;a href=&quot;../rc/struct.rc&quot;&gt; &lt;code&gt;Rc&lt;/code&gt; &lt;/a&gt;がアトミック操作を使用しないため、&lt;a href=&quot;../../reference/behavior-considered-undefined&quot;&gt;未定義の&lt;/a&gt;動作です。その従兄弟の&lt;a href=&quot;../sync/struct.arc&quot;&gt; &lt;code&gt;sync::Arc&lt;/code&gt; &lt;/a&gt;はアトミック操作を使用し（オーバーヘッドが発生します）、したがって &lt;code&gt;Send&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="e38ec369f62f9a0e9cf71faa19b5cb843376b06e" translate="yes" xml:space="preserve">
          <source>An example of a parenthesized expression:</source>
          <target state="translated">括弧で囲まれた式の例。</target>
        </trans-unit>
        <trans-unit id="f06523b9f614521a822acb49c6502314b5223a29" translate="yes" xml:space="preserve">
          <source>An example of a trait object:</source>
          <target state="translated">形質オブジェクトの例。</target>
        </trans-unit>
        <trans-unit id="f97a42d4af253ea16c2f098f9cd1358538ff9ccc" translate="yes" xml:space="preserve">
          <source>An example of a trait that can&amp;rsquo;t be derived is &lt;code&gt;Display&lt;/code&gt;, which handles formatting for end users. You should always consider the appropriate way to display a type to an end user. What parts of the type should an end user be allowed to see? What parts would they find relevant? What format of the data would be most relevant to them? The Rust compiler doesn&amp;rsquo;t have this insight, so it can&amp;rsquo;t provide appropriate default behavior for you.</source>
          <target state="translated">派生できない特性の例は &lt;code&gt;Display&lt;/code&gt; で、これはエンドユーザーのフォーマットを処理します。エンドユーザーにタイプを表示する適切な方法を常に検討する必要があります。エンドユーザーに表示を許可する必要があるのは、タイプのどの部分ですか？彼らはどの部分に関連があると思いますか？それらに最も関連するデータの形式は何ですか？Rustコンパイラーにはこの洞察がないため、適切なデフォルトの動作を提供できません。</target>
        </trans-unit>
        <trans-unit id="b2a6dc626aff375aa4d434c66ea264d4dc08b800" translate="yes" xml:space="preserve">
          <source>An example of a trait whose methods are not object safe is the standard library&amp;rsquo;s &lt;code&gt;Clone&lt;/code&gt; trait. The signature for the &lt;code&gt;clone&lt;/code&gt; method in the &lt;code&gt;Clone&lt;/code&gt; trait looks like this:</source>
          <target state="translated">メソッドがオブジェクトセーフではないトレイトの例は、標準ライブラリの &lt;code&gt;Clone&lt;/code&gt; トレイトです。 &lt;code&gt;Clone&lt;/code&gt; トレイトの &lt;code&gt;clone&lt;/code&gt; メソッドのシグネチャは次のようになります。</target>
        </trans-unit>
        <trans-unit id="5e81f6611106899f0be7f5a0792978a45ad55dd8" translate="yes" xml:space="preserve">
          <source>An example of a tuple type and its use:</source>
          <target state="translated">タプル型の例とその使用例。</target>
        </trans-unit>
        <trans-unit id="363c341cbe13044b212571253c8a33caae78cd45" translate="yes" xml:space="preserve">
          <source>An example of an &lt;code&gt;as&lt;/code&gt; expression:</source>
          <target state="translated">&lt;code&gt;as&lt;/code&gt; 式の例：</target>
        </trans-unit>
        <trans-unit id="a2db905e306fb4833044bdd9885bb27ab8f76d7f" translate="yes" xml:space="preserve">
          <source>An example of an &lt;code&gt;enum&lt;/code&gt; item and its use:</source>
          <target state="translated">例 &lt;code&gt;enum&lt;/code&gt; 項目とその使用：</target>
        </trans-unit>
        <trans-unit id="9260a714aba6105dd14cba9d58f3d41f31de6503" translate="yes" xml:space="preserve">
          <source>An example of an empty type is &lt;code&gt;enum Empty { }&lt;/code&gt;. So, the following will work:</source>
          <target state="translated">空の型の例は、 &lt;code&gt;enum Empty { }&lt;/code&gt; です。したがって、以下が機能します：</target>
        </trans-unit>
        <trans-unit id="ff969b10a01ab50464488192aa66638be2ebf171" translate="yes" xml:space="preserve">
          <source>An example of combining the above rules of &lt;code&gt;path&lt;/code&gt; attributes on inline modules and nested modules within (applies to both mod-rs and non-mod-rs files):</source>
          <target state="translated">インラインモジュールとネストされたモジュールの &lt;code&gt;path&lt;/code&gt; 属性の上記のルールを組み合わせた例（mod-rsファイルとnon-mod-rsファイルの両方に適用）：</target>
        </trans-unit>
        <trans-unit id="6e09c1385fee93fd5fa2b4010458a4fc489b7a97" translate="yes" xml:space="preserve">
          <source>An example of implementing the formatting traits would look like:</source>
          <target state="translated">フォーマットの特徴を実装する例は次のようになります。</target>
        </trans-unit>
        <trans-unit id="fa098562087edb062353d3aa89708207a19b395b" translate="yes" xml:space="preserve">
          <source>An example of matching non-exhaustively on the above enum is provided below:</source>
          <target state="translated">上記の列挙に対して非網羅的にマッチングする例を以下に示す。</target>
        </trans-unit>
        <trans-unit id="7ef19768d994b2224d1f41bd49faef1709c5e7ef" translate="yes" xml:space="preserve">
          <source>An example of panic:</source>
          <target state="translated">パニックの例。</target>
        </trans-unit>
        <trans-unit id="884b0dfdd5d082bb94960ecce28dc9f3e6d384f8" translate="yes" xml:space="preserve">
          <source>An example of re-exporting:</source>
          <target state="translated">再輸出の例。</target>
        </trans-unit>
        <trans-unit id="708c005211a8b1e93ec9aac2ad4a16e9c3bc2bc3" translate="yes" xml:space="preserve">
          <source>An example of this error:</source>
          <target state="translated">このエラーの例。</target>
        </trans-unit>
        <trans-unit id="62347f606509b323a7de02a2bce976170f493c84" translate="yes" xml:space="preserve">
          <source>An example of what not to do and how this relates to &lt;code&gt;read_unaligned&lt;/code&gt; is:</source>
          <target state="translated">An example of what not to do and how this relates to &lt;code&gt;read_unaligned&lt;/code&gt; is:</target>
        </trans-unit>
        <trans-unit id="6f16face177ebc3cd353bb963c0ea872b0ace950" translate="yes" xml:space="preserve">
          <source>An example of what not to do and how this relates to &lt;code&gt;write_unaligned&lt;/code&gt; is:</source>
          <target state="translated">An example of what not to do and how this relates to &lt;code&gt;write_unaligned&lt;/code&gt; is:</target>
        </trans-unit>
        <trans-unit id="64eb812bfe0819a20f7b7755d2742025cd360a65" translate="yes" xml:space="preserve">
          <source>An example of what will and will not work for &lt;code&gt;use&lt;/code&gt; items:</source>
          <target state="translated">&lt;code&gt;use&lt;/code&gt; アイテムで機能することと機能しないことの例：</target>
        </trans-unit>
        <trans-unit id="8365f135946b3f7b044d8cfd3fa7997f776027f4" translate="yes" xml:space="preserve">
          <source>An example of when &lt;code&gt;Clone&lt;/code&gt; is required is when calling the &lt;code&gt;to_vec&lt;/code&gt; method on a slice. The slice doesn&amp;rsquo;t own the type instances it contains, but the vector returned from &lt;code&gt;to_vec&lt;/code&gt; will need to own its instances, so &lt;code&gt;to_vec&lt;/code&gt; calls &lt;code&gt;clone&lt;/code&gt; on each item. Thus, the type stored in the slice must implement &lt;code&gt;Clone&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Clone&lt;/code&gt; が必要な場合の例は、スライスで &lt;code&gt;to_vec&lt;/code&gt; メソッドを呼び出す場合です。スライスはそれが含む型インスタンスを所有していませんが、 &lt;code&gt;to_vec&lt;/code&gt; から返されたベクターはそのインスタンスを所有する必要があるため、 &lt;code&gt;to_vec&lt;/code&gt; は各アイテムで &lt;code&gt;clone&lt;/code&gt; を呼び出します。したがって、スライスに格納される型は &lt;code&gt;Clone&lt;/code&gt; を実装する必要があります。</target>
        </trans-unit>
        <trans-unit id="aaf3c4aa1a7d59f2304836782308596d0ae75f64" translate="yes" xml:space="preserve">
          <source>An example of when &lt;code&gt;Eq&lt;/code&gt; is required is for keys in a &lt;code&gt;HashMap&amp;lt;K, V&amp;gt;&lt;/code&gt; so the &lt;code&gt;HashMap&amp;lt;K, V&amp;gt;&lt;/code&gt; can tell whether two keys are the same.</source>
          <target state="translated">場合の例 &lt;code&gt;Eq&lt;/code&gt; 必要であるがのキーのためのものである &lt;code&gt;HashMap&amp;lt;K, V&amp;gt;&lt;/code&gt; ので &lt;code&gt;HashMap&amp;lt;K, V&amp;gt;&lt;/code&gt; 2つのキーが同じであるかどうかを伝えることができます。</target>
        </trans-unit>
        <trans-unit id="e410ff694a089e824c24843049bae108ce880220" translate="yes" xml:space="preserve">
          <source>An example of when &lt;code&gt;Hash&lt;/code&gt; is required is in storing keys in a &lt;code&gt;HashMap&amp;lt;K, V&amp;gt;&lt;/code&gt; to store data efficiently.</source>
          <target state="translated">&lt;code&gt;Hash&lt;/code&gt; が必要な場合の例は、データを効率的に格納するために &lt;code&gt;HashMap&amp;lt;K, V&amp;gt;&lt;/code&gt; にキーを格納する場合です。</target>
        </trans-unit>
        <trans-unit id="13874d9be8af151d397c4923d18c3e3bb505d451" translate="yes" xml:space="preserve">
          <source>An example of when &lt;code&gt;Ord&lt;/code&gt; is required is when storing values in a &lt;code&gt;BTreeSet&amp;lt;T&amp;gt;&lt;/code&gt;, a data structure that stores data based on the sort order of the values.</source>
          <target state="translated">&lt;code&gt;Ord&lt;/code&gt; が必要な場合の例は、値のソート順に基づいてデータを格納するデータ構造である &lt;code&gt;BTreeSet&amp;lt;T&amp;gt;&lt;/code&gt; に値を格納する場合です。</target>
        </trans-unit>
        <trans-unit id="309f6d59bf7b6968dcfb2187e53fc8e9c9c42a01" translate="yes" xml:space="preserve">
          <source>An example of when you might want to use an array rather than a vector is in a program that needs to know the names of the months of the year. It&amp;rsquo;s very unlikely that such a program will need to add or remove months, so you can use an array because you know it will always contain 12 elements:</source>
          <target state="translated">An example of when you might want to use an array rather than a vector is in a program that needs to know the names of the months of the year. It&amp;rsquo;s very unlikely that such a program will need to add or remove months, so you can use an array because you know it will always contain 12 elements:</target>
        </trans-unit>
        <trans-unit id="f42b2c8e58eff03a7089947fa8ffae92137b9b5f" translate="yes" xml:space="preserve">
          <source>An example of when you might want to use an array rather than a vector is in a program that needs to know the names of the months of the year. It&amp;rsquo;s very unlikely that such a program will need to add or remove months, so you can use an array because you know it will always contain 12 items:</source>
          <target state="translated">ベクトルではなく配列を使用したい場合の例は、年の月の名前を知る必要があるプログラムです。このようなプログラムで月数を追加または削除する必要が生じる可能性は非常に低いため、配列には常に12項目が含まれることがわかっているため、配列を使用できます。</target>
        </trans-unit>
        <trans-unit id="bd0712d619a2d60e4c146e231ccdfbad8aba4743" translate="yes" xml:space="preserve">
          <source>An example of where you would want to only accept &lt;code&gt;fn&lt;/code&gt; and not closures is when interfacing with external code that doesn&amp;rsquo;t have closures: C functions can accept functions as arguments, but C doesn&amp;rsquo;t have closures.</source>
          <target state="translated">クロージャーではなく &lt;code&gt;fn&lt;/code&gt; のみを受け入れたい場合の例は、クロージャーを持たない外部コードとインターフェースする場合です。C関数は関数を引数として受け入れることができますが、Cにはクロージャーがありません。</target>
        </trans-unit>
        <trans-unit id="e73f9f6c8b4fbcf9f4fd470408b5fff3f081d3b9" translate="yes" xml:space="preserve">
          <source>An example using a closure:</source>
          <target state="translated">クロージャを使用した例。</target>
        </trans-unit>
        <trans-unit id="6d3969065ec2f88aef65174e1f6ffa620b0c83f2" translate="yes" xml:space="preserve">
          <source>An example where &lt;code&gt;Binop&lt;/code&gt; is defined as a function pointer type:</source>
          <target state="translated">&lt;code&gt;Binop&lt;/code&gt; が関数ポインター型として定義されている例：</target>
        </trans-unit>
        <trans-unit id="f481ad49809e7c27b79d2e6d830283b22c04c1f7" translate="yes" xml:space="preserve">
          <source>An example:</source>
          <target state="translated">一例です。</target>
        </trans-unit>
        <trans-unit id="9b338a4ae7f343a1618fa43d10bfc2df436ea62d" translate="yes" xml:space="preserve">
          <source>An exclusive bound.</source>
          <target state="translated">排他的な束縛。</target>
        </trans-unit>
        <trans-unit id="0a0f5c759335e3ef134a90149eb082ea59cf661b" translate="yes" xml:space="preserve">
          <source>An executing Rust program consists of a collection of native OS threads, each with their own stack and local state. Threads can be named, and provide some built-in support for low-level synchronization.</source>
          <target state="translated">実行中のRustプログラムは、ネイティブOSのスレッドのコレクションで構成されており、それぞれが独自のスタックとローカルステートを持っています。スレッドは名前を付けることができ、低レベルの同期のためのいくつかの組み込みサポートを提供します。</target>
        </trans-unit>
        <trans-unit id="12c993ee363617797c480ae0e7fa61fa88f7540e" translate="yes" xml:space="preserve">
          <source>An explicit conversion from a &lt;code&gt;&amp;amp;str&lt;/code&gt; to a String is done as follows:</source>
          <target state="translated">&lt;code&gt;&amp;amp;str&lt;/code&gt; からStringへの明示的な変換は、次のように行われます。</target>
        </trans-unit>
        <trans-unit id="9863ad7a484538312614b219ee23d089bab88f2a" translate="yes" xml:space="preserve">
          <source>An expression enclosed in parentheses evaluates to the result of the enclosed expression. Parentheses can be used to explicitly specify evaluation order within an expression.</source>
          <target state="translated">括弧で囲まれた式は、括弧で囲まれた式の結果として評価されます。括弧を使用して、式内の評価順序を明示的に指定することができます。</target>
        </trans-unit>
        <trans-unit id="b0b2d07f6ff343f37bbb2da0dbd07ed7ea53cb5d" translate="yes" xml:space="preserve">
          <source>An expression is a combination of values, constants, variables, operators and functions that evaluate to a single value, with or without side-effects.</source>
          <target state="translated">式とは、値、定数、変数、演算子、関数の組み合わせで、副作用の有無にかかわらず、単一の値に評価されるものです。</target>
        </trans-unit>
        <trans-unit id="8a470e20ec20f9f17fbbac4266c615aa43cc21c3" translate="yes" xml:space="preserve">
          <source>An expression may have two roles: it always produces a &lt;em&gt;value&lt;/em&gt;, and it may have &lt;em&gt;effects&lt;/em&gt; (otherwise known as &quot;side effects&quot;). An expression &lt;em&gt;evaluates to&lt;/em&gt; a value, and has effects during &lt;em&gt;evaluation&lt;/em&gt;. Many expressions contain sub-expressions (operands). The meaning of each kind of expression dictates several things:</source>
          <target state="translated">式には2つの役割があります。それは常に&lt;em&gt;値を&lt;/em&gt;生成する&lt;em&gt;ことと&lt;/em&gt;、&lt;em&gt;効果&lt;/em&gt;（または「副作用」として知られていること）を持つことです。式は値に&lt;em&gt;評価され&lt;/em&gt;、&lt;em&gt;評価&lt;/em&gt;中に影響を与えます。多くの式にはサブ式（オペランド）が含まれています。各種類の表現の意味は、いくつかのことを決定します。</target>
        </trans-unit>
        <trans-unit id="894873bc5f587b4733b17f7dfb18b0f3059d2176" translate="yes" xml:space="preserve">
          <source>An expression that consists of only a &lt;a href=&quot;expressions/block-expr&quot;&gt;block expression&lt;/a&gt; or control flow expression, if used in a context where a statement is permitted, can omit the trailing semicolon. This can cause an ambiguity between it being parsed as a standalone statement and as a part of another expression; in this case, it is parsed as a statement. The type of &lt;a href=&quot;expressions&quot;&gt;&lt;em&gt;ExpressionWithBlock&lt;/em&gt;&lt;/a&gt; expressions when used as statements must be the unit type.</source>
          <target state="translated">&lt;a href=&quot;expressions/block-expr&quot;&gt;ブロック式&lt;/a&gt;または制御フロー式のみで構成される式は、ステートメントが許可されているコンテキストで使用される場合、末尾のセミコロンを省略できます。これにより、スタンドアロンのステートメントとして解析されることと、別の式の一部として解析されることのあいまいさが生じる可能性があります。この場合、ステートメントとして解析されます。ステートメントとして使用する場合の&lt;a href=&quot;expressions&quot;&gt;&lt;em&gt;ExpressionWithBlock&lt;/em&gt;&lt;/a&gt;式のタイプは、ユニットタイプである必要があります。</target>
        </trans-unit>
        <trans-unit id="3db9b6e5300ec2a35e045cae789d7d65bc1644c2" translate="yes" xml:space="preserve">
          <source>An extension trait for concatenating slices</source>
          <target state="translated">スライスを連結するための拡張形質</target>
        </trans-unit>
        <trans-unit id="12147a5a52fb5c2a1b9d7472abd1e716e6699134" translate="yes" xml:space="preserve">
          <source>An external crate dependency can be declared without binding its name in scope by using an underscore with the form &lt;code&gt;extern crate foo as _&lt;/code&gt;. This may be useful for crates that only need to be linked, but are never referenced, and will avoid being reported as unused.</source>
          <target state="translated">外部クレート依存関係は、 &lt;code&gt;extern crate foo as _&lt;/code&gt; の形式でアンダースコアを使用することにより、スコープ内でその名前をバインドせずに宣言できます。これは、リンクする必要があるだけで参照されないクレートの場合に役立ち、未使用として報告されないようにします。</target>
        </trans-unit>
        <trans-unit id="af0969299b70206aefe5265b359a29ba784a7b81" translate="yes" xml:space="preserve">
          <source>An feature unstable in &lt;code&gt;const&lt;/code&gt; contexts was used.</source>
          <target state="translated">&lt;code&gt;const&lt;/code&gt; コンテキストで不安定な機能が使用されました。</target>
        </trans-unit>
        <trans-unit id="67fba469014e18ca2e89e6de19c923fe7de4bee7" translate="yes" xml:space="preserve">
          <source>An identifier is any nonempty ASCII string of the following form:</source>
          <target state="translated">識別子は、以下の形式の空でないASCII文字列です。</target>
        </trans-unit>
        <trans-unit id="c175628788a43110a89b193ae816462d4cf2d2a4" translate="yes" xml:space="preserve">
          <source>An identifier is bound more than once in a pattern.</source>
          <target state="translated">識別子はパターン内で複数回バインドされます。</target>
        </trans-unit>
        <trans-unit id="b2a87fc4bed852d77bc4439f4f9b01dff5c6624b" translate="yes" xml:space="preserve">
          <source>An identifier that is neither defined nor a struct was used.</source>
          <target state="translated">定義されていない識別子、構造体が使用されていない識別子。</target>
        </trans-unit>
        <trans-unit id="804d52ee70392ba486d9daf55c4a0571322cd6a0" translate="yes" xml:space="preserve">
          <source>An identifier was used like a function name or a value was expected and the identifier exists but it belongs to a different namespace.</source>
          <target state="translated">識別子が関数名のように使われていたか、値が期待されていて、識別子は存在するが別の名前空間に属していた。</target>
        </trans-unit>
        <trans-unit id="21a7adea588a50a532e49278e2f1d4c02481c073" translate="yes" xml:space="preserve">
          <source>An identity function that &lt;em&gt;&lt;strong&gt;hints&lt;/strong&gt;&lt;/em&gt; to the compiler to be maximally pessimistic about what &lt;code&gt;black_box&lt;/code&gt; could do.</source>
          <target state="translated">An identity function that &lt;em&gt;&lt;strong&gt;hints&lt;/strong&gt;&lt;/em&gt; to the compiler to be maximally pessimistic about what &lt;code&gt;black_box&lt;/code&gt; could do.</target>
        </trans-unit>
        <trans-unit id="a9dd54d260c1e67a0aa0b597f6cdb8722318da30" translate="yes" xml:space="preserve">
          <source>An identity function.</source>
          <target state="translated">アイデンティティ関数。</target>
        </trans-unit>
        <trans-unit id="f4072cccbc13fd032256ab05516201c0d8df3e68" translate="yes" xml:space="preserve">
          <source>An if-let pattern attempts to match the pattern, and enters the body if the match was successful. If the match is irrefutable (when it cannot fail to match), use a regular &lt;code&gt;let&lt;/code&gt;-binding instead. For instance:</source>
          <target state="translated">if-letパターンはパターンの照合を試み、照合が成功した場合は本文に入ります。一致に反論できない場合（一致に失敗しない場合）、代わりに通常の &lt;code&gt;let&lt;/code&gt; バインディングを使用します。例えば：</target>
        </trans-unit>
        <trans-unit id="a0284d91e655684ff663495c42199a2c25a3b7b6" translate="yes" xml:space="preserve">
          <source>An immutable variable was reassigned.</source>
          <target state="translated">不変変数が再割り当てされました。</target>
        </trans-unit>
        <trans-unit id="4ba45e243c916e58a2890a2d541b968fddd22dd8" translate="yes" xml:space="preserve">
          <source>An implementation can take type and lifetime parameters, which can be used in the rest of the implementation. Type parameters declared for an implementation must be used at least once in either the trait or the implementing type of an implementation. Implementation parameters are written directly after the &lt;code&gt;impl&lt;/code&gt; keyword.</source>
          <target state="translated">実装は、残りの実装で使用できるタイプと存続期間のパラメーターを取ることができます。実装用に宣言された型パラメーターは、実装の特性または実装タイプのいずれかで少なくとも1回使用する必要があります。実装パラメーターは、 &lt;code&gt;impl&lt;/code&gt; キーワードの直後に書き込まれます。</target>
        </trans-unit>
        <trans-unit id="7debed941ec31b919fee56e16fed7f3d43603fb5" translate="yes" xml:space="preserve">
          <source>An implementation cannot be chosen unambiguously because of lack of information.</source>
          <target state="translated">情報が不足しているからといって、曖昧に実装を選択することはできません。</target>
        </trans-unit>
        <trans-unit id="5c1c04198ba70d5ee214d020749cca1de7fc7d00" translate="yes" xml:space="preserve">
          <source>An implementation of &lt;code&gt;Alloc&lt;/code&gt; can allocate, reallocate, and deallocate arbitrary blocks of data described via &lt;code&gt;Layout&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Alloc&lt;/code&gt; の実装は、 &lt;code&gt;Layout&lt;/code&gt; を介して記述されたデータの任意のブロックを割り当て、再割り当て、および割り当て解除できます。</target>
        </trans-unit>
        <trans-unit id="da7ec04c76427d5dd969fd2e136866257e58eb1e" translate="yes" xml:space="preserve">
          <source>An implementation of &lt;code&gt;AllocRef&lt;/code&gt; can allocate, grow, shrink, and deallocate arbitrary blocks of data described via &lt;a href=&quot;struct.layout&quot;&gt;&lt;code&gt;Layout&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">An implementation of &lt;code&gt;AllocRef&lt;/code&gt; can allocate, grow, shrink, and deallocate arbitrary blocks of data described via &lt;a href=&quot;struct.layout&quot;&gt; &lt;code&gt;Layout&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="99623634884bf4add6cdc497873712ce416c8fd4" translate="yes" xml:space="preserve">
          <source>An implementation of &lt;code&gt;BitAnd&lt;/code&gt; for a wrapper around &lt;code&gt;Vec&amp;lt;bool&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Vec&amp;lt;bool&amp;gt;&lt;/code&gt; ラッパー用の &lt;code&gt;BitAnd&lt;/code&gt; の実装。</target>
        </trans-unit>
        <trans-unit id="0e2ff6912f2ce30546aa9104a9c9d196708332bf" translate="yes" xml:space="preserve">
          <source>An implementation of &lt;code&gt;BitAnd&lt;/code&gt; for a wrapper around &lt;code&gt;bool&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;bool&lt;/code&gt; のラッパー用の &lt;code&gt;BitAnd&lt;/code&gt; の実装。</target>
        </trans-unit>
        <trans-unit id="5f6dfa411cba86305e5e9cd742f9f63d63776e67" translate="yes" xml:space="preserve">
          <source>An implementation of &lt;code&gt;BitAndAssign&lt;/code&gt; that lifts the &lt;code&gt;&amp;amp;=&lt;/code&gt; operator to a wrapper around &lt;code&gt;bool&lt;/code&gt;.</source>
          <target state="translated">実装 &lt;code&gt;BitAndAssign&lt;/code&gt; リフト &lt;code&gt;&amp;amp;=&lt;/code&gt; ラッパーにオペレータを &lt;code&gt;bool&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b3e86b6af5dd68737dcc690c4ff3a487a1934868" translate="yes" xml:space="preserve">
          <source>An implementation of &lt;code&gt;BitOr&lt;/code&gt; for a wrapper around &lt;code&gt;Vec&amp;lt;bool&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Vec&amp;lt;bool&amp;gt;&lt;/code&gt; ラッパー用の &lt;code&gt;BitOr&lt;/code&gt; の実装。</target>
        </trans-unit>
        <trans-unit id="e8149ba6d1631c707939091192745b37494deb7b" translate="yes" xml:space="preserve">
          <source>An implementation of &lt;code&gt;BitOr&lt;/code&gt; for a wrapper around &lt;code&gt;bool&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;bool&lt;/code&gt; のラッパー用の &lt;code&gt;BitOr&lt;/code&gt; の実装。</target>
        </trans-unit>
        <trans-unit id="ce43f6aba41bb7af32e0d6e55432c6b3ca8d7e1a" translate="yes" xml:space="preserve">
          <source>An implementation of &lt;code&gt;BitXor&lt;/code&gt; that lifts &lt;code&gt;^&lt;/code&gt; to a wrapper around &lt;code&gt;bool&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;^&lt;/code&gt; を &lt;code&gt;bool&lt;/code&gt; のラッパーに引き上げる &lt;code&gt;BitXor&lt;/code&gt; の実装。</target>
        </trans-unit>
        <trans-unit id="65cb4db18d08218407844613de42d9029080f521" translate="yes" xml:space="preserve">
          <source>An implementation of &lt;code&gt;BitXor&lt;/code&gt; trait for a wrapper around &lt;code&gt;Vec&amp;lt;bool&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Vec&amp;lt;bool&amp;gt;&lt;/code&gt; ラッパー用の &lt;code&gt;BitXor&lt;/code&gt; トレイトの実装。</target>
        </trans-unit>
        <trans-unit id="b5b904d460aff616075d9ff33295d995d4012b99" translate="yes" xml:space="preserve">
          <source>An implementation of &lt;code&gt;Neg&lt;/code&gt; for &lt;code&gt;Sign&lt;/code&gt;, which allows the use of &lt;code&gt;-&lt;/code&gt; to negate its value.</source>
          <target state="translated">実装 &lt;code&gt;Neg&lt;/code&gt; のための &lt;code&gt;Sign&lt;/code&gt; の使用を可能にし、 &lt;code&gt;-&lt;/code&gt; その価値を否定します。</target>
        </trans-unit>
        <trans-unit id="873b42d4cd981f821fbfc718a707b146669b45da" translate="yes" xml:space="preserve">
          <source>An implementation of &lt;code&gt;Not&lt;/code&gt; for &lt;code&gt;Answer&lt;/code&gt;, which enables the use of &lt;code&gt;!&lt;/code&gt; to invert its value.</source>
          <target state="translated">&lt;code&gt;Not&lt;/code&gt; for &lt;code&gt;Answer&lt;/code&gt; の実装。これにより、 &lt;code&gt;!&lt;/code&gt; その値を反転します。</target>
        </trans-unit>
        <trans-unit id="b6ef2365698efd5099fd68eb5d996513953b40b7" translate="yes" xml:space="preserve">
          <source>An implementation of &lt;code&gt;Shl&lt;/code&gt; that lifts the &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; operation on integers to a wrapper around &lt;code&gt;usize&lt;/code&gt;.</source>
          <target state="translated">実装 &lt;code&gt;Shl&lt;/code&gt; リフト &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; ラッパーに整数に対する操作を &lt;code&gt;usize&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8e679f132f9bdc673ab7525c566b308cef626454" translate="yes" xml:space="preserve">
          <source>An implementation of &lt;code&gt;Shl&lt;/code&gt; that spins a vector leftward by a given amount.</source>
          <target state="translated">&lt;code&gt;Shl&lt;/code&gt; の実装で、指定された量だけベクトルを左にスピンします。</target>
        </trans-unit>
        <trans-unit id="4b9ea2f9d110fb7b7d2e508e8eb895f2a6c76af4" translate="yes" xml:space="preserve">
          <source>An implementation of &lt;code&gt;ShlAssign&lt;/code&gt; for a wrapper around &lt;code&gt;usize&lt;/code&gt;.</source>
          <target state="translated">実装 &lt;code&gt;ShlAssign&lt;/code&gt; ラッパーのため &lt;code&gt;usize&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fdc99f650e402a714069613aef9bb0ab1a03fe00" translate="yes" xml:space="preserve">
          <source>An implementation of &lt;code&gt;Shr&lt;/code&gt; that lifts the &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; operation on integers to a wrapper around &lt;code&gt;usize&lt;/code&gt;.</source>
          <target state="translated">実装 &lt;code&gt;Shr&lt;/code&gt; リフト &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; ラッパーに整数に対する操作を &lt;code&gt;usize&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="00b6c1f0f935bcc3f078a1d4c1fb779815701d8c" translate="yes" xml:space="preserve">
          <source>An implementation of &lt;code&gt;Shr&lt;/code&gt; that spins a vector rightward by a given amount.</source>
          <target state="translated">&lt;code&gt;Shr&lt;/code&gt; の実装で、指定された量だけベクトルを右にスピンします。</target>
        </trans-unit>
        <trans-unit id="fef3f9c26a074ccf18bb7e56e8695a2a73f26459" translate="yes" xml:space="preserve">
          <source>An implementation of &lt;code&gt;ShrAssign&lt;/code&gt; for a wrapper around &lt;code&gt;usize&lt;/code&gt;.</source>
          <target state="translated">実装 &lt;code&gt;ShrAssign&lt;/code&gt; ラッパーのため &lt;code&gt;usize&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f0109084bf6e2896150bb542f8a8637f2cff32f1" translate="yes" xml:space="preserve">
          <source>An implementation of &lt;code&gt;poll&lt;/code&gt; should strive to return quickly, and should not block. Returning quickly prevents unnecessarily clogging up threads or event loops. If it is known ahead of time that a call to &lt;code&gt;poll&lt;/code&gt; may end up taking awhile, the work should be offloaded to a thread pool (or something similar) to ensure that &lt;code&gt;poll&lt;/code&gt; can return quickly.</source>
          <target state="translated">&lt;code&gt;poll&lt;/code&gt; の実装は、迅速に戻るよう努めるべきであり、妨害してはなりません。すばやく戻ることで、スレッドやイベントループが不必要に詰まるのを防ぎます。 &lt;code&gt;poll&lt;/code&gt; 呼び出しに時間がかかることが事前にわかっている場合は、 &lt;code&gt;poll&lt;/code&gt; を迅速に返すことができるように、作業をスレッドプール（または類似のもの）にオフロードする必要があります。</target>
        </trans-unit>
        <trans-unit id="350059cec8495b6fd084c91dd06a8c1a8c6277a2" translate="yes" xml:space="preserve">
          <source>An implementation of SipHash 2-4.</source>
          <target state="translated">SipHash 2-4の実装。</target>
        </trans-unit>
        <trans-unit id="8a3dd636510b68fa6befc892111d7637911e62f8" translate="yes" xml:space="preserve">
          <source>An implementation of a trait doesn't match the type constraint.</source>
          <target state="translated">形質の実装が型制約にマッチしません。</target>
        </trans-unit>
        <trans-unit id="a7c410f2271131f6e26f4c1a6c01fb2def54994c" translate="yes" xml:space="preserve">
          <source>An import was unresolved.</source>
          <target state="translated">インポートが解決されませんでした。</target>
        </trans-unit>
        <trans-unit id="29610251a6990ca267c18a3b17be65ef65d80c1f" translate="yes" xml:space="preserve">
          <source>An important part of the process of learning Rust is learning how to read the error messages the compiler displays: these will guide you toward working code. As such, we&amp;rsquo;ll provide many examples that don&amp;rsquo;t compile along with the error message the compiler will show you in each situation. Know that if you enter and run a random example, it may not compile! Make sure you read the surrounding text to see whether the example you&amp;rsquo;re trying to run is meant to error. Ferris will also help you distinguish code that isn&amp;rsquo;t meant to work:</source>
          <target state="translated">Rustを学習するプロセスの重要な部分は、コンパイラーが表示するエラーメッセージの読み方を学ぶことです。これらは、コードを機能させるためのガイドになります。そのため、コンパイルできない多くの例と、コンパイラがそれぞれの状況で表示するエラーメッセージを提供します。ランダムな例を入力して実行すると、コンパイルされない可能性があることに注意してください。周囲のテキストを読んで、実行しようとしている例がエラーを意味するものかどうかを確認してください。Ferrisは、機能しないコードを区別するのにも役立ちます。</target>
        </trans-unit>
        <trans-unit id="9068331ccd5e98287382db124205efdfb79f7cfb" translate="yes" xml:space="preserve">
          <source>An important thing to remember is that the type &lt;code&gt;fmt::Error&lt;/code&gt; should not be confused with &lt;a href=&quot;../io/struct.error&quot;&gt;&lt;code&gt;std::io::Error&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../error/trait.error&quot;&gt;&lt;code&gt;std::error::Error&lt;/code&gt;&lt;/a&gt;, which you may also have in scope.</source>
          <target state="translated">覚えておくべき重要なことは、タイプ &lt;code&gt;fmt::Error&lt;/code&gt; を&lt;a href=&quot;../io/struct.error&quot;&gt; &lt;code&gt;std::io::Error&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;../error/trait.error&quot;&gt; &lt;code&gt;std::error::Error&lt;/code&gt; &lt;/a&gt;と混同しないでください。これらもスコープ内にある可能性があります。</target>
        </trans-unit>
        <trans-unit id="8f9e81cf6c354fdfd3e66804e1f412009da97856" translate="yes" xml:space="preserve">
          <source>An inclusive bound.</source>
          <target state="translated">インクルーシブバインド。</target>
        </trans-unit>
        <trans-unit id="192433a73b5ee226652b56c2bf60e3939daf0558" translate="yes" xml:space="preserve">
          <source>An inclusive range needs an end in order to &lt;em&gt;include&lt;/em&gt; it. If you just need a start and no end, use a non-inclusive range (with &lt;code&gt;..&lt;/code&gt;):</source>
          <target state="translated">包括的範囲に&lt;em&gt;は、&lt;/em&gt;それを&lt;em&gt;含める&lt;/em&gt;ために終了が必要です。あなただけの開始と終わりが必要な場合は、（と非包括範囲を使用 &lt;code&gt;..&lt;/code&gt; ）：</target>
        </trans-unit>
        <trans-unit id="50920c083a024a331ce9d74584285d9788301b90" translate="yes" xml:space="preserve">
          <source>An inclusive range was used with no end.</source>
          <target state="translated">インクルーシブな範囲をエンドレスで使用していました。</target>
        </trans-unit>
        <trans-unit id="387b0473c559329b38860546da1e2cce85651e8f" translate="yes" xml:space="preserve">
          <source>An incompatible cast was attempted.</source>
          <target state="translated">相性の悪いキャストが試みられた。</target>
        </trans-unit>
        <trans-unit id="890a9e60cf506bc22c185b6e6eaa04f58d616d41" translate="yes" xml:space="preserve">
          <source>An incorrect number of generic arguments were provided.</source>
          <target state="translated">一般的な引数の数が正しくありませんでした。</target>
        </trans-unit>
        <trans-unit id="3ffd66f253621f41011842348ba63bd0896ca4ec" translate="yes" xml:space="preserve">
          <source>An incorrect visibility restriction was specified.</source>
          <target state="translated">不正な可視性制限が指定されました。</target>
        </trans-unit>
        <trans-unit id="c9900f693c2e1b5744366ed3318b36a718fcf770" translate="yes" xml:space="preserve">
          <source>An infinite endpoint. Indicates that there is no bound in this direction.</source>
          <target state="translated">無限の終点。この方向に境界がないことを示す。</target>
        </trans-unit>
        <trans-unit id="f2f7f4bb84396a832ec236ff6b02e7c811f6141c" translate="yes" xml:space="preserve">
          <source>An inherent implementation is defined as the sequence of the &lt;code&gt;impl&lt;/code&gt; keyword, generic type declarations, a path to a nominal type, a where clause, and a bracketed set of associable items.</source>
          <target state="translated">固有の実装は、 &lt;code&gt;impl&lt;/code&gt; キーワードのシーケンス、ジェネリック型宣言、名義型へのパス、where句、および関連付けられた一連の関連項目として定義されます。</target>
        </trans-unit>
        <trans-unit id="5e6c6207529ca7e8b2b41ce66b1a1399c7520ae8" translate="yes" xml:space="preserve">
          <source>An inherent implementation was defined for a type outside the current crate.</source>
          <target state="translated">固有の実装は、現在の木枠外の型に対して定義されました。</target>
        </trans-unit>
        <trans-unit id="506894b4a872753e6bf88eaab162c1ca6bc0d7d6" translate="yes" xml:space="preserve">
          <source>An inherent implementation was defined for something which isn't a struct, enum, union, or trait object.</source>
          <target state="translated">構造体、列挙、ユニオン、形質オブジェクトではないものに対して、固有の実装が定義されました。</target>
        </trans-unit>
        <trans-unit id="110853947b6a8113db0327e6e5f3081c7c63d981" translate="yes" xml:space="preserve">
          <source>An inherent implementation was marked unsafe.</source>
          <target state="translated">固有の実装は安全ではないとマークされていました。</target>
        </trans-unit>
        <trans-unit id="cb3f4eca6453d0b265cd70c611dfbbd1e320cc15" translate="yes" xml:space="preserve">
          <source>An inner doc comment was used in an invalid context.</source>
          <target state="translated">内部の doc コメントが無効なコンテキストで使用されました。</target>
        </trans-unit>
        <trans-unit id="eaca7587ab66134ebcc5c9d98dddc7a6d1b623fb" translate="yes" xml:space="preserve">
          <source>An instance of &lt;code&gt;DirEntry&lt;/code&gt; represents an entry inside of a directory on the filesystem. Each entry can be inspected via methods to learn about the full path or possibly other metadata through per-platform extension traits.</source>
          <target state="translated">&lt;code&gt;DirEntry&lt;/code&gt; のインスタンスは、ファイルシステム上のディレクトリ内のエントリを表します。各エントリをメソッドで検査して、プラットフォームごとの拡張機能の特性を介して、フルパスまたは場合によっては他のメタデータについて知ることができます。</target>
        </trans-unit>
        <trans-unit id="1fbc585e6de8e6bcaf356cf9f8023d57041f924e" translate="yes" xml:space="preserve">
          <source>An instance of &lt;code&gt;Layout&lt;/code&gt; describes a particular layout of memory. You build a &lt;code&gt;Layout&lt;/code&gt; up as an input to give to an allocator.</source>
          <target state="translated">&lt;code&gt;Layout&lt;/code&gt; のインスタンスは、メモリの特定のレイアウトを記述します。アロケータに与える入力として &lt;code&gt;Layout&lt;/code&gt; 作成します。</target>
        </trans-unit>
        <trans-unit id="b190fdcf2cbfcbc1313cacaba62570eb78c828a4" translate="yes" xml:space="preserve">
          <source>An instance of a &lt;code&gt;File&lt;/code&gt; can be read and/or written depending on what options it was opened with. Files also implement &lt;a href=&quot;../io/trait.seek&quot;&gt;&lt;code&gt;Seek&lt;/code&gt;&lt;/a&gt; to alter the logical cursor that the file contains internally.</source>
          <target state="translated">&lt;code&gt;File&lt;/code&gt; のインスタンスは、それを開いたときのオプションに応じて、読み取りまたは書き込み、あるいはその両方を行うことができます。ファイルは、ファイルに内部に含まれている論理カーソルを変更するための&lt;a href=&quot;../io/trait.seek&quot;&gt; &lt;code&gt;Seek&lt;/code&gt; &lt;/a&gt;も実装します。</target>
        </trans-unit>
        <trans-unit id="4022f91af4f41ee796badb832f4f942b0dd3666a" translate="yes" xml:space="preserve">
          <source>An integer (&lt;code&gt;i*&lt;/code&gt;/&lt;code&gt;u*&lt;/code&gt;), floating point value (&lt;code&gt;f*&lt;/code&gt;), or raw pointer obtained from &lt;a href=&quot;http://llvm.org/docs/LangRef.html#undefined-values&quot;&gt;uninitialized memory&lt;/a&gt;, or uninitialized memory in a &lt;code&gt;str&lt;/code&gt;.</source>
          <target state="translated">An integer ( &lt;code&gt;i*&lt;/code&gt; / &lt;code&gt;u*&lt;/code&gt; ), floating point value ( &lt;code&gt;f*&lt;/code&gt; ), or raw pointer obtained from &lt;a href=&quot;http://llvm.org/docs/LangRef.html#undefined-values&quot;&gt;uninitialized memory&lt;/a&gt;, or uninitialized memory in a &lt;code&gt;str&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f4459da0411b29eac8078029351bbb76f00d3282" translate="yes" xml:space="preserve">
          <source>An integer &lt;code&gt;.N&lt;/code&gt;:</source>
          <target state="translated">整数 &lt;code&gt;.N&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="908da2eafc06fe6ced0bd1b3ca560bd9a2e72aa4" translate="yes" xml:space="preserve">
          <source>An integer or name followed by dollar sign &lt;code&gt;.N$&lt;/code&gt;:</source>
          <target state="translated">整数または名前とそれに続くドル記号 &lt;code&gt;.N$&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="d652b1aec455b9a1399356989d1b6e7890b6c2cf" translate="yes" xml:space="preserve">
          <source>An integer that is known not to equal zero.</source>
          <target state="translated">ゼロと等しくないことがわかっている整数。</target>
        </trans-unit>
        <trans-unit id="23e972eabcd349c601672f385dadf7a600ee560a" translate="yes" xml:space="preserve">
          <source>An integer type which can be safely shared between threads.</source>
          <target state="translated">スレッド間で安全に共有できる整数型。</target>
        </trans-unit>
        <trans-unit id="7738cea88357f8684a294b13f985119f27bc796a" translate="yes" xml:space="preserve">
          <source>An intensity number from the user, which is specified when they request a workout to indicate whether they want a low-intensity workout or a high-intensity workout</source>
          <target state="translated">ユーザーがワークアウトを要求する際に指定する強度番号で、低強度のワークアウトか高強度のワークアウトのどちらを希望するかを示すために使用します。</target>
        </trans-unit>
        <trans-unit id="ff8d693a0bfcced7e1e8e51c1bf01052178e048b" translate="yes" xml:space="preserve">
          <source>An interface for dealing with iterators.</source>
          <target state="translated">イテレータを扱うためのインターフェイス。</target>
        </trans-unit>
        <trans-unit id="22e5648e52f9b0472e117269511bde8fb3cbbf6f" translate="yes" xml:space="preserve">
          <source>An internet socket address, either IPv4 or IPv6.</source>
          <target state="translated">IPv4 または IPv6 のいずれかのインターネットソケットアドレス。</target>
        </trans-unit>
        <trans-unit id="854d43a414a4b60a4e76077619d9f002787508df" translate="yes" xml:space="preserve">
          <source>An intrinsic is a function available for use in a given programming language whose implementation is handled specially by the compiler. In order to fix this error, just declare a function.</source>
          <target state="translated">内部関数とは、指定されたプログラミング言語で使用可能な関数のことで、その実装はコンパイラによって特別に処理されます。このエラーを修正するには、関数を宣言するだけです。</target>
        </trans-unit>
        <trans-unit id="0e442cff22b27f71ce2c2ce15532cf3a41eb6841" translate="yes" xml:space="preserve">
          <source>An intrinsic is a function available for use in a given programming language whose implementation is handled specially by the compiler. In order to fix this error, just declare a function. Example:</source>
          <target state="translated">内部関数とは、指定されたプログラミング言語で使用可能な関数のことで、その実装はコンパイラによって特別に処理されます。このエラーを修正するには、関数を宣言するだけです。例を挙げてみます。</target>
        </trans-unit>
        <trans-unit id="d4ed3f185066b7aaf4eec2eeca59086039ee692c" translate="yes" xml:space="preserve">
          <source>An intrinsic was declared without being a function.</source>
          <target state="translated">関数ではなく、本質的なものが宣言されていました。</target>
        </trans-unit>
        <trans-unit id="4c83eebd7c224b0a142aede3c5ec04a66d472405" translate="yes" xml:space="preserve">
          <source>An invalid &lt;code&gt;self&lt;/code&gt; import was made.</source>
          <target state="translated">無効な &lt;code&gt;self&lt;/code&gt; インポートが行われました。</target>
        </trans-unit>
        <trans-unit id="82555301e5ea450f3a2a3340087105706f32de3a" translate="yes" xml:space="preserve">
          <source>An invalid cast was attempted.</source>
          <target state="translated">無効なキャストが試みられました。</target>
        </trans-unit>
        <trans-unit id="03180be565388e3e9bc81cc13b92d02f2dbb9f6d" translate="yes" xml:space="preserve">
          <source>An invalid input operand constraint was passed to the &lt;code&gt;llvm_asm&lt;/code&gt; macro (third line).</source>
          <target state="translated">An invalid input operand constraint was passed to the &lt;code&gt;llvm_asm&lt;/code&gt; macro (third line).</target>
        </trans-unit>
        <trans-unit id="8c5bb35712d552d14538dee6299b1809a75931fc" translate="yes" xml:space="preserve">
          <source>An invalid left-hand side expression was used on an assignment operation.</source>
          <target state="translated">代入操作で無効な左側の式が使用されました。</target>
        </trans-unit>
        <trans-unit id="9a8cc59d01bca4002162d9e4ee195fba0f67e5eb" translate="yes" xml:space="preserve">
          <source>An invalid lint attribute has been given.</source>
          <target state="translated">無効な lint 属性が与えられました。</target>
        </trans-unit>
        <trans-unit id="b45ca9e360736d39967051ef73e9a974697dc538" translate="yes" xml:space="preserve">
          <source>An invalid lint attribute has been given. Erroneous code example:</source>
          <target state="translated">無効な lint 属性が指定されました。誤ったコード例です。</target>
        </trans-unit>
        <trans-unit id="7afc8f120588eda0a5e01c8b52b3b7d783b74baf" translate="yes" xml:space="preserve">
          <source>An invalid meta-item was used inside an attribute.</source>
          <target state="translated">無効なメタ項目が属性内で使用されました。</target>
        </trans-unit>
        <trans-unit id="381c4fb826f13d2ae3a70efbf639e550ce3d899e" translate="yes" xml:space="preserve">
          <source>An invalid name was used for a lifetime parameter.</source>
          <target state="translated">ライフタイム・パラメータに無効な名前が使用されました。</target>
        </trans-unit>
        <trans-unit id="ca168fbcb5da1644a515cf8441248863a3fd9251" translate="yes" xml:space="preserve">
          <source>An invalid number of arguments was given when calling a closure.</source>
          <target state="translated">クロージャを呼び出すときに無効な数の引数が与えられました。</target>
        </trans-unit>
        <trans-unit id="7d49fec3c8ae574bb2ce4cd00863f78f3ce2c2fa" translate="yes" xml:space="preserve">
          <source>An invalid number of arguments was passed when calling a function.</source>
          <target state="translated">関数を呼び出すときに無効な数の引数が渡されました。</target>
        </trans-unit>
        <trans-unit id="fd1272a4d79b74d35bfe264d5c84667b1b0428f6" translate="yes" xml:space="preserve">
          <source>An invalid number of type parameters was given to an intrinsic function.</source>
          <target state="translated">無効な数の型パラメータが本質的な関数に与えられました。</target>
        </trans-unit>
        <trans-unit id="cc8a5020b458d81f8e941d19c95ab2d679341b81" translate="yes" xml:space="preserve">
          <source>An invalid syntax was passed to the second argument of an &lt;code&gt;llvm_asm&lt;/code&gt; macro line.</source>
          <target state="translated">&lt;code&gt;llvm_asm&lt;/code&gt; マクロ行の2番目の引数に無効な構文が渡されました。</target>
        </trans-unit>
        <trans-unit id="a410192aae8c1c9efe2c778af8302870ee71f57b" translate="yes" xml:space="preserve">
          <source>An item usage is ambiguous.</source>
          <target state="translated">項目の使い方が曖昧です。</target>
        </trans-unit>
        <trans-unit id="b5e68274b8d847f0c6926331f1e39e6fca71b9fd" translate="yes" xml:space="preserve">
          <source>An item was added on a negative impl.</source>
          <target state="translated">マイナスインプに項目が追加されました。</target>
        </trans-unit>
        <trans-unit id="a6cc9e350b081b1e617d64ca09e5f7073fb94361" translate="yes" xml:space="preserve">
          <source>An item which isn't a unit struct, a variant, nor a constant has been used as a match pattern.</source>
          <target state="translated">ユニット構造体でもバリアントでも定数でもない項目が一致パターンとして使用されています。</target>
        </trans-unit>
        <trans-unit id="b44509fac7828279e76e0b5a94ab5171cb157956" translate="yes" xml:space="preserve">
          <source>An iterator able to yield elements from both ends.</source>
          <target state="translated">両端から要素を生成できるイテレータ。</target>
        </trans-unit>
        <trans-unit id="a79f20c0e35d15b48bb2797970d35b63c3629a31" translate="yes" xml:space="preserve">
          <source>An iterator adaptor similar to &lt;a href=&quot;#method.fold&quot;&gt;&lt;code&gt;fold&lt;/code&gt;&lt;/a&gt; that holds internal state and produces a new iterator.</source>
          <target state="translated">内部状態を保持し、新しいイテレーターを生成する、&lt;a href=&quot;#method.fold&quot;&gt; &lt;code&gt;fold&lt;/code&gt; に&lt;/a&gt;似たイテレーターアダプター。</target>
        </trans-unit>
        <trans-unit id="2e43d9b7345ad03f5ced2dcd31e711c42d237584" translate="yes" xml:space="preserve">
          <source>An iterator adaptor similar to &lt;a href=&quot;../../../iter/trait.iterator#method.fold&quot;&gt;&lt;code&gt;fold&lt;/code&gt;&lt;/a&gt; that holds internal state and produces a new iterator. &lt;a href=&quot;../../../iter/trait.iterator#method.scan&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">内部状態を保持し、新しいイテレータを生成する、&lt;a href=&quot;../../../iter/trait.iterator#method.fold&quot;&gt; &lt;code&gt;fold&lt;/code&gt; に&lt;/a&gt;似たイテレータアダプタ。&lt;a href=&quot;../../../iter/trait.iterator#method.scan&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="773601e7cb6c7b2cb91410d40c83395d2f5a2aba" translate="yes" xml:space="preserve">
          <source>An iterator adaptor similar to &lt;a href=&quot;../../iter/trait.iterator#method.fold&quot;&gt;&lt;code&gt;fold&lt;/code&gt;&lt;/a&gt; that holds internal state and produces a new iterator. &lt;a href=&quot;../../iter/trait.iterator#method.scan&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">内部状態を保持し、新しいイテレータを生成する、&lt;a href=&quot;../../iter/trait.iterator#method.fold&quot;&gt; &lt;code&gt;fold&lt;/code&gt; に&lt;/a&gt;似たイテレータアダプタ。&lt;a href=&quot;../../iter/trait.iterator#method.scan&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e8c9fb31213d58aac0ffdd0c9178139dd13dff6e" translate="yes" xml:space="preserve">
          <source>An iterator adaptor similar to &lt;a href=&quot;../iter/trait.iterator#method.fold&quot;&gt;&lt;code&gt;fold&lt;/code&gt;&lt;/a&gt; that holds internal state and produces a new iterator. &lt;a href=&quot;../iter/trait.iterator#method.scan&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">内部状態を保持し、新しいイテレータを生成する、&lt;a href=&quot;../iter/trait.iterator#method.fold&quot;&gt; &lt;code&gt;fold&lt;/code&gt; に&lt;/a&gt;似たイテレータアダプタ。&lt;a href=&quot;../iter/trait.iterator#method.scan&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="fabf413b8f61a0afd7c5f9433f5804c39c0d2697" translate="yes" xml:space="preserve">
          <source>An iterator adaptor similar to &lt;a href=&quot;iter/trait.iterator#method.fold&quot;&gt;&lt;code&gt;fold&lt;/code&gt;&lt;/a&gt; that holds internal state and produces a new iterator. &lt;a href=&quot;iter/trait.iterator#method.scan&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">内部状態を保持し、新しいイテレータを生成する、&lt;a href=&quot;iter/trait.iterator#method.fold&quot;&gt; &lt;code&gt;fold&lt;/code&gt; に&lt;/a&gt;似たイテレータアダプタ。&lt;a href=&quot;iter/trait.iterator#method.scan&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2d2199c2efde5116c38701a8b589ced48670c6b8" translate="yes" xml:space="preserve">
          <source>An iterator adaptor similar to &lt;a href=&quot;trait.iterator#method.fold&quot;&gt;&lt;code&gt;fold&lt;/code&gt;&lt;/a&gt; that holds internal state and produces a new iterator.</source>
          <target state="translated">内部状態を保持し、新しいイテレータを生成する、&lt;a href=&quot;trait.iterator#method.fold&quot;&gt; &lt;code&gt;fold&lt;/code&gt; に&lt;/a&gt;似たイテレータアダプタ。</target>
        </trans-unit>
        <trans-unit id="1597ff1cbb678de32b1737072c75c63f3cb34a01" translate="yes" xml:space="preserve">
          <source>An iterator adaptor similar to &lt;a href=&quot;trait.iterator#method.fold&quot;&gt;&lt;code&gt;fold&lt;/code&gt;&lt;/a&gt; that holds internal state and produces a new iterator. &lt;a href=&quot;trait.iterator#method.scan&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">内部状態を保持し、新しいイテレータを生成する、&lt;a href=&quot;trait.iterator#method.fold&quot;&gt; &lt;code&gt;fold&lt;/code&gt; に&lt;/a&gt;似たイテレータアダプタ。&lt;a href=&quot;trait.iterator#method.scan&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4f7d60e521538ea62f876d5c70c545dc3addec69" translate="yes" xml:space="preserve">
          <source>An iterator adaptor similar to [&lt;code&gt;fold&lt;/code&gt;] that holds internal state and produces a new iterator. &lt;a href=&quot;../../../iter/trait.iterator#method.scan&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">[ &lt;code&gt;fold&lt;/code&gt; ]に似た、内部状態を保持して新しい反復子を生成する反復子アダプター。&lt;a href=&quot;../../../iter/trait.iterator#method.scan&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7a650dc159a2fda49c7766be96685d0f790f13a0" translate="yes" xml:space="preserve">
          <source>An iterator adaptor similar to [&lt;code&gt;fold&lt;/code&gt;] that holds internal state and produces a new iterator. &lt;a href=&quot;../../iter/trait.iterator#method.scan&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">[ &lt;code&gt;fold&lt;/code&gt; ]に似た、内部状態を保持して新しい反復子を生成する反復子アダプター。&lt;a href=&quot;../../iter/trait.iterator#method.scan&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3e898bdaf274bb7754df65ccfb97b6bd04568d2d" translate="yes" xml:space="preserve">
          <source>An iterator adaptor similar to [&lt;code&gt;fold&lt;/code&gt;] that holds internal state and produces a new iterator. &lt;a href=&quot;../iter/trait.iterator#method.scan&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">[ &lt;code&gt;fold&lt;/code&gt; ]に似た、内部状態を保持して新しい反復子を生成する反復子アダプター。&lt;a href=&quot;../iter/trait.iterator#method.scan&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e2996431c0507a4a842fe331c88d08e4bb45dcce" translate="yes" xml:space="preserve">
          <source>An iterator adaptor similar to [&lt;code&gt;fold&lt;/code&gt;] that holds internal state and produces a new iterator. &lt;a href=&quot;iter/trait.iterator#method.scan&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">[ &lt;code&gt;fold&lt;/code&gt; ]に似た、内部状態を保持して新しい反復子を生成する反復子アダプター。&lt;a href=&quot;iter/trait.iterator#method.scan&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ae7a2ef58596a8f574790d9946d5c7b0d3e0427f" translate="yes" xml:space="preserve">
          <source>An iterator adaptor similar to [&lt;code&gt;fold&lt;/code&gt;] that holds internal state and produces a new iterator. &lt;a href=&quot;trait.iterator#method.scan&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">[ &lt;code&gt;fold&lt;/code&gt; ]に似た、内部状態を保持して新しい反復子を生成する反復子アダプター。&lt;a href=&quot;trait.iterator#method.scan&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9ad9db34c1f6ac7b97514886d275ac1277b33c65" translate="yes" xml:space="preserve">
          <source>An iterator for stepping iterators by a custom amount.</source>
          <target state="translated">カスタム量でステッピングするためのイテレータ。</target>
        </trans-unit>
        <trans-unit id="25debeb61a2ecc2a431e58a161838a09b915993a" translate="yes" xml:space="preserve">
          <source>An iterator has a method, &lt;a href=&quot;trait.iterator#tymethod.next&quot;&gt;&lt;code&gt;next&lt;/code&gt;&lt;/a&gt;, which when called, returns an &lt;a href=&quot;../option/enum.option&quot;&gt;&lt;code&gt;Option&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;Item&amp;gt;&lt;/code&gt;. &lt;a href=&quot;trait.iterator#tymethod.next&quot;&gt;&lt;code&gt;next&lt;/code&gt;&lt;/a&gt; will return &lt;a href=&quot;../option/enum.option#variant.Some&quot;&gt;&lt;code&gt;Some(Item)&lt;/code&gt;&lt;/a&gt; as long as there are elements, and once they've all been exhausted, will return &lt;code&gt;None&lt;/code&gt; to indicate that iteration is finished. Individual iterators may choose to resume iteration, and so calling &lt;a href=&quot;trait.iterator#tymethod.next&quot;&gt;&lt;code&gt;next&lt;/code&gt;&lt;/a&gt; again may or may not eventually start returning &lt;a href=&quot;../option/enum.option#variant.Some&quot;&gt;&lt;code&gt;Some(Item)&lt;/code&gt;&lt;/a&gt; again at some point (for example, see &lt;a href=&quot;../sync/mpsc/struct.tryiter&quot;&gt;&lt;code&gt;TryIter&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">イテレータにはメソッド&lt;a href=&quot;trait.iterator#tymethod.next&quot;&gt; &lt;code&gt;next&lt;/code&gt; &lt;/a&gt;があり、呼び出されると&lt;a href=&quot;../option/enum.option&quot;&gt; &lt;code&gt;Option&lt;/code&gt; &lt;/a&gt; &lt;code&gt;&amp;lt;Item&amp;gt;&lt;/code&gt; を返します。&lt;a href=&quot;trait.iterator#tymethod.next&quot;&gt; &lt;code&gt;next&lt;/code&gt; &lt;/a&gt;は、要素がある限り&lt;a href=&quot;../option/enum.option#variant.Some&quot;&gt; &lt;code&gt;Some(Item)&lt;/code&gt; &lt;/a&gt;を返し、要素がすべて使い果たされると、 &lt;code&gt;None&lt;/code&gt; を返し、反復が終了したことを示します。個々のイテレータは反復を再開することを選択できるため、&lt;a href=&quot;trait.iterator#tymethod.next&quot;&gt; &lt;code&gt;next&lt;/code&gt; を&lt;/a&gt;再度呼び出すと、ある時点で&lt;a href=&quot;../option/enum.option#variant.Some&quot;&gt; &lt;code&gt;Some(Item)&lt;/code&gt; が&lt;/a&gt;再び返される場合とされない場合があります（たとえば、&lt;a href=&quot;../sync/mpsc/struct.tryiter&quot;&gt; &lt;code&gt;TryIter&lt;/code&gt; を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="fb45f260d1289d4ddcd0c03f93e3cf026ce37b59" translate="yes" xml:space="preserve">
          <source>An iterator has a method, &lt;a href=&quot;trait.iterator#tymethod.next&quot;&gt;&lt;code&gt;next&lt;/code&gt;&lt;/a&gt;, which when called, returns an &lt;a href=&quot;../option/enum.option&quot;&gt;&lt;code&gt;Option&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;Item&amp;gt;&lt;/code&gt;. &lt;a href=&quot;trait.iterator#tymethod.next&quot;&gt;&lt;code&gt;next&lt;/code&gt;&lt;/a&gt; will return &lt;code&gt;Some(Item)&lt;/code&gt; as long as there are elements, and once they've all been exhausted, will return &lt;code&gt;None&lt;/code&gt; to indicate that iteration is finished. Individual iterators may choose to resume iteration, and so calling &lt;a href=&quot;trait.iterator#tymethod.next&quot;&gt;&lt;code&gt;next&lt;/code&gt;&lt;/a&gt; again may or may not eventually start returning &lt;code&gt;Some(Item)&lt;/code&gt; again at some point.</source>
          <target state="translated">イテレータにはメソッド&lt;a href=&quot;trait.iterator#tymethod.next&quot;&gt; &lt;code&gt;next&lt;/code&gt; &lt;/a&gt;があり、呼び出されると&lt;a href=&quot;../option/enum.option&quot;&gt; &lt;code&gt;Option&lt;/code&gt; &lt;/a&gt; &lt;code&gt;&amp;lt;Item&amp;gt;&lt;/code&gt; を返します。&lt;a href=&quot;trait.iterator#tymethod.next&quot;&gt; &lt;code&gt;next&lt;/code&gt; &lt;/a&gt;は、要素がある限り &lt;code&gt;Some(Item)&lt;/code&gt; を返します。要素がすべて使い果たされると、 &lt;code&gt;None&lt;/code&gt; を返し、反復が終了したことを示します。個々のイテレータは反復を再開することを選択する可能性があるため、&lt;a href=&quot;trait.iterator#tymethod.next&quot;&gt; &lt;code&gt;next&lt;/code&gt; を&lt;/a&gt;再度呼び出すと、ある時点で最終的に &lt;code&gt;Some(Item)&lt;/code&gt; が返されるようになる場合とそうでない場合があります。</target>
        </trans-unit>
        <trans-unit id="e31522f53dadc02b86f505f8fd01b611f6643e8b" translate="yes" xml:space="preserve">
          <source>An iterator method that applies a fallible function to each item in the iterator, stopping at the first error and returning that error.</source>
          <target state="translated">イテレータ内の各項目にフォールリブル関数を適用し、最初のエラーで停止してそのエラーを返すイテレータメソッド。</target>
        </trans-unit>
        <trans-unit id="eacb362cba384eacfe624626c78db089eba4406f" translate="yes" xml:space="preserve">
          <source>An iterator method that applies a fallible function to each item in the iterator, stopping at the first error and returning that error. &lt;a href=&quot;../../../iter/trait.iterator#method.try_for_each&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">イテレータの各項目に誤りのある関数を適用し、最初のエラーで停止してそのエラーを返すイテレータメソッド。&lt;a href=&quot;../../../iter/trait.iterator#method.try_for_each&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ca00c28d4b5a3134e86a3f660b2fa54093267401" translate="yes" xml:space="preserve">
          <source>An iterator method that applies a fallible function to each item in the iterator, stopping at the first error and returning that error. &lt;a href=&quot;../../iter/trait.iterator#method.try_for_each&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">イテレータの各項目に誤りのある関数を適用し、最初のエラーで停止してそのエラーを返すイテレータメソッド。&lt;a href=&quot;../../iter/trait.iterator#method.try_for_each&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e1489bd41c8525121e45484ed737c4171e974de0" translate="yes" xml:space="preserve">
          <source>An iterator method that applies a fallible function to each item in the iterator, stopping at the first error and returning that error. &lt;a href=&quot;../iter/trait.iterator#method.try_for_each&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">イテレータの各項目に誤りのある関数を適用し、最初のエラーで停止してそのエラーを返すイテレータメソッド。&lt;a href=&quot;../iter/trait.iterator#method.try_for_each&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="33c934134cacb66bd994968f86b620a631318b91" translate="yes" xml:space="preserve">
          <source>An iterator method that applies a fallible function to each item in the iterator, stopping at the first error and returning that error. &lt;a href=&quot;iter/trait.iterator#method.try_for_each&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">イテレータの各項目に誤りのある関数を適用し、最初のエラーで停止してそのエラーを返すイテレータメソッド。&lt;a href=&quot;iter/trait.iterator#method.try_for_each&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="19bfdbf913f10e6bc3776600b92d9135c032b4bf" translate="yes" xml:space="preserve">
          <source>An iterator method that applies a fallible function to each item in the iterator, stopping at the first error and returning that error. &lt;a href=&quot;trait.iterator#method.try_for_each&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">イテレータの各項目に誤りのある関数を適用し、最初のエラーで停止してそのエラーを返すイテレータメソッド。&lt;a href=&quot;trait.iterator#method.try_for_each&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3b59c2e3f2042ddc5a53ef66ef4d7b79f1fb5301" translate="yes" xml:space="preserve">
          <source>An iterator method that applies a function as long as it returns successfully, producing a single, final value.</source>
          <target state="translated">関数が正常に返される限り関数を適用し、1 つの最終的な値を生成するイテレータメソッド。</target>
        </trans-unit>
        <trans-unit id="117fd8070a23ba82f744d90c448b1e5813b4d282" translate="yes" xml:space="preserve">
          <source>An iterator method that applies a function as long as it returns successfully, producing a single, final value. &lt;a href=&quot;../../../iter/trait.iterator#method.try_fold&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">関数が正常に終了する限り関数を適用し、単一の最終値を生成する反復子メソッド。&lt;a href=&quot;../../../iter/trait.iterator#method.try_fold&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7ee1c8bd3a25e2ebef94ba8c0d6405c27ca7226b" translate="yes" xml:space="preserve">
          <source>An iterator method that applies a function as long as it returns successfully, producing a single, final value. &lt;a href=&quot;../../iter/trait.iterator#method.try_fold&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">関数が正常に終了する限り関数を適用し、単一の最終値を生成する反復子メソッド。&lt;a href=&quot;../../iter/trait.iterator#method.try_fold&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c658b3e624db269551bf93242408ef5c42e5fea9" translate="yes" xml:space="preserve">
          <source>An iterator method that applies a function as long as it returns successfully, producing a single, final value. &lt;a href=&quot;../iter/trait.iterator#method.try_fold&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">関数が正常に終了する限り関数を適用し、単一の最終値を生成する反復子メソッド。&lt;a href=&quot;../iter/trait.iterator#method.try_fold&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9a5362af3855236bb52258529c3514119a249eab" translate="yes" xml:space="preserve">
          <source>An iterator method that applies a function as long as it returns successfully, producing a single, final value. &lt;a href=&quot;iter/trait.iterator#method.try_fold&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">関数が正常に終了する限り関数を適用し、単一の最終値を生成する反復子メソッド。&lt;a href=&quot;iter/trait.iterator#method.try_fold&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="22eb23eabd6f5888b0f6233654a7d6b3279d1ac7" translate="yes" xml:space="preserve">
          <source>An iterator method that applies a function as long as it returns successfully, producing a single, final value. &lt;a href=&quot;trait.iterator#method.try_fold&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">関数が正常に終了する限り関数を適用し、単一の最終値を生成する反復子メソッド。&lt;a href=&quot;trait.iterator#method.try_fold&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9d551693bdcaedeac0547d596669a3c5c5179447" translate="yes" xml:space="preserve">
          <source>An iterator method that applies a function, producing a single, final value.</source>
          <target state="translated">関数を適用し、単一の最終値を生成するイテレータメソッド。</target>
        </trans-unit>
        <trans-unit id="31400216ecaba12666aff645bec4ca26c5ba43ea" translate="yes" xml:space="preserve">
          <source>An iterator method that applies a function, producing a single, final value. &lt;a href=&quot;../../../iter/trait.iterator#method.fold&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">関数を適用して単一の最終値を生成する反復子メソッド。&lt;a href=&quot;../../../iter/trait.iterator#method.fold&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="958c160388552a918125f55bba9e086f54f71484" translate="yes" xml:space="preserve">
          <source>An iterator method that applies a function, producing a single, final value. &lt;a href=&quot;../../iter/trait.iterator#method.fold&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">関数を適用して単一の最終値を生成する反復子メソッド。&lt;a href=&quot;../../iter/trait.iterator#method.fold&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5eddc2fc826e92b735803187068d19d4e441542e" translate="yes" xml:space="preserve">
          <source>An iterator method that applies a function, producing a single, final value. &lt;a href=&quot;../iter/trait.iterator#method.fold&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">関数を適用して単一の最終値を生成する反復子メソッド。&lt;a href=&quot;../iter/trait.iterator#method.fold&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="062b8bbee99bc123d00bd6ddb37a2091ecaee57f" translate="yes" xml:space="preserve">
          <source>An iterator method that applies a function, producing a single, final value. &lt;a href=&quot;iter/trait.iterator#method.fold&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">関数を適用して単一の最終値を生成する反復子メソッド。&lt;a href=&quot;iter/trait.iterator#method.fold&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="760ff7a591ac95e16cd7be5b9667ba1c820bc96e" translate="yes" xml:space="preserve">
          <source>An iterator method that applies a function, producing a single, final value. &lt;a href=&quot;trait.iterator#method.fold&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">関数を適用して単一の最終値を生成する反復子メソッド。&lt;a href=&quot;trait.iterator#method.fold&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e4cfaa2271cf9f33fe50ead23cff9cf9b29c2c97" translate="yes" xml:space="preserve">
          <source>An iterator method that reduces the iterator's elements to a single, final value, starting from the back.</source>
          <target state="translated">イテレータの要素を、後ろから始まる単一の最終的な値に縮小するイテレータメソッド。</target>
        </trans-unit>
        <trans-unit id="c9c712bf49f750f238c96785e7e704d976a72f0e" translate="yes" xml:space="preserve">
          <source>An iterator method that reduces the iterator's elements to a single, final value, starting from the back. &lt;a href=&quot;../../iter/trait.doubleendediterator#method.rfold&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">反復子の要素を後ろから開始して単一の最終値に減らす反復子メソッド。&lt;a href=&quot;../../iter/trait.doubleendediterator#method.rfold&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b44201682fdbcad5c8da77522b47e4b7fc4a3dc1" translate="yes" xml:space="preserve">
          <source>An iterator method that reduces the iterator's elements to a single, final value, starting from the back. &lt;a href=&quot;../iter/trait.doubleendediterator#method.rfold&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">反復子の要素を後ろから開始して単一の最終値に減らす反復子メソッド。&lt;a href=&quot;../iter/trait.doubleendediterator#method.rfold&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="fc53bae551d78289c9703ed2a397d1c3b35f285e" translate="yes" xml:space="preserve">
          <source>An iterator method that reduces the iterator's elements to a single, final value, starting from the back. &lt;a href=&quot;iter/trait.doubleendediterator#method.rfold&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">反復子の要素を後ろから開始して単一の最終値に減らす反復子メソッド。&lt;a href=&quot;iter/trait.doubleendediterator#method.rfold&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="836f4f2e3fffc61e14c382d8890f27b7a367beeb" translate="yes" xml:space="preserve">
          <source>An iterator method that reduces the iterator's elements to a single, final value, starting from the back. &lt;a href=&quot;trait.doubleendediterator#method.rfold&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">反復子の要素を後ろから開始して単一の最終値に減らす反復子メソッド。&lt;a href=&quot;trait.doubleendediterator#method.rfold&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b2acafc012d5ccce6e7696757b55337a6d4029a3" translate="yes" xml:space="preserve">
          <source>An iterator of &lt;a href=&quot;../primitive.u16&quot;&gt;&lt;code&gt;u16&lt;/code&gt;&lt;/a&gt; over the string encoded as UTF-16.</source>
          <target state="translated">UTF-16としてエンコードされた文字列に対する&lt;a href=&quot;../primitive.u16&quot;&gt; &lt;code&gt;u16&lt;/code&gt; &lt;/a&gt;のイテレータ。</target>
        </trans-unit>
        <trans-unit id="143fd7db785baccd8bb8346c04f451192a09006a" translate="yes" xml:space="preserve">
          <source>An iterator over &lt;a href=&quot;struct.path&quot;&gt;&lt;code&gt;Path&lt;/code&gt;&lt;/a&gt; and its ancestors.</source>
          <target state="translated">&lt;a href=&quot;struct.path&quot;&gt; &lt;code&gt;Path&lt;/code&gt; &lt;/a&gt;とその祖先に対するイテレータ。</target>
        </trans-unit>
        <trans-unit id="554dfaab9d83066a6b95354b7620556448cb3449" translate="yes" xml:space="preserve">
          <source>An iterator over &lt;a href=&quot;trait.error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;trait.error&quot;&gt; &lt;code&gt;Error&lt;/code&gt; &lt;/a&gt;に対するイテレータ</target>
        </trans-unit>
        <trans-unit id="aef63e9607a8ec1f5f596fca15621080fd76af72" translate="yes" xml:space="preserve">
          <source>An iterator over &lt;code&gt;u8&lt;/code&gt; values of a reader.</source>
          <target state="translated">リーダーの &lt;code&gt;u8&lt;/code&gt; 値に対するイテレータ。</target>
        </trans-unit>
        <trans-unit id="34e3362281b15b977d0a61ac8c5fcd00a6511c9c" translate="yes" xml:space="preserve">
          <source>An iterator over a mutable reference to the &lt;a href=&quot;enum.option#variant.Some&quot;&gt;&lt;code&gt;Some&lt;/code&gt;&lt;/a&gt; variant of an &lt;a href=&quot;enum.option&quot;&gt;&lt;code&gt;Option&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;enum.option&quot;&gt; &lt;code&gt;Option&lt;/code&gt; の&lt;/a&gt;&lt;a href=&quot;enum.option#variant.Some&quot;&gt; &lt;code&gt;Some&lt;/code&gt; &lt;/a&gt;バリアントへの変更可能な参照に対するイテレータ。</target>
        </trans-unit>
        <trans-unit id="c74c624cf35ae570735e4b7f11b57db582409878" translate="yes" xml:space="preserve">
          <source>An iterator over a mutable reference to the &lt;a href=&quot;enum.result#variant.Ok&quot;&gt;&lt;code&gt;Ok&lt;/code&gt;&lt;/a&gt; variant of a &lt;a href=&quot;enum.result&quot;&gt;&lt;code&gt;Result&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;enum.result&quot;&gt; &lt;code&gt;Result&lt;/code&gt; の&lt;/a&gt;&lt;a href=&quot;enum.result#variant.Ok&quot;&gt; &lt;code&gt;Ok&lt;/code&gt; &lt;/a&gt;バリアントへの可変参照に対するイテレータ。</target>
        </trans-unit>
        <trans-unit id="f4de84f3b1b68ec9fb8cadcc939ec573f412a94a" translate="yes" xml:space="preserve">
          <source>An iterator over a reference to the &lt;a href=&quot;enum.option#variant.Some&quot;&gt;&lt;code&gt;Some&lt;/code&gt;&lt;/a&gt; variant of an &lt;a href=&quot;enum.option&quot;&gt;&lt;code&gt;Option&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;enum.option&quot;&gt; &lt;code&gt;Option&lt;/code&gt; の&lt;/a&gt;&lt;a href=&quot;enum.option#variant.Some&quot;&gt; &lt;code&gt;Some&lt;/code&gt; &lt;/a&gt;バリアントへの参照に対するイテレータ。</target>
        </trans-unit>
        <trans-unit id="8cd69f81931caab64a8dceae843c42a8b1faa3e1" translate="yes" xml:space="preserve">
          <source>An iterator over a reference to the &lt;a href=&quot;enum.result#variant.Ok&quot;&gt;&lt;code&gt;Ok&lt;/code&gt;&lt;/a&gt; variant of a &lt;a href=&quot;enum.result&quot;&gt;&lt;code&gt;Result&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;enum.result&quot;&gt; &lt;code&gt;Result&lt;/code&gt; の&lt;/a&gt;&lt;a href=&quot;enum.result#variant.Ok&quot;&gt; &lt;code&gt;Ok&lt;/code&gt; &lt;/a&gt;バリアントへの参照に対するイテレータ。</target>
        </trans-unit>
        <trans-unit id="3dc6f80802c085f551ddaf86ddf6e8acc1dc310c" translate="yes" xml:space="preserve">
          <source>An iterator over a slice in (non-overlapping) chunks (&lt;code&gt;N&lt;/code&gt; elements at a time), starting at the beginning of the slice.</source>
          <target state="translated">スライスの先頭から開始して、（重複しない）チャンク（一度に &lt;code&gt;N&lt;/code&gt; 個の要素）内のスライス上のイテレーター。</target>
        </trans-unit>
        <trans-unit id="6d2aa423fb037ba3e42490b4a4869e7a989a8b38" translate="yes" xml:space="preserve">
          <source>An iterator over a slice in (non-overlapping) chunks (&lt;code&gt;chunk_size&lt;/code&gt; elements at a time), starting at the beginning of the slice.</source>
          <target state="translated">（重複しない）チャンク（一度に &lt;code&gt;chunk_size&lt;/code&gt; 要素）内のスライスの反復子。スライスの先頭から開始します。</target>
        </trans-unit>
        <trans-unit id="51ba4c3e078709e91115e94720e3b32e5a3519a2" translate="yes" xml:space="preserve">
          <source>An iterator over a slice in (non-overlapping) chunks (&lt;code&gt;chunk_size&lt;/code&gt; elements at a time), starting at the end of the slice.</source>
          <target state="translated">（重複しない）チャンク（一度に &lt;code&gt;chunk_size&lt;/code&gt; 要素）内のスライスの反復子。スライスの最後から開始します。</target>
        </trans-unit>
        <trans-unit id="d8851ef0d971f6cf3a6b130edee19da50b2e6eeb" translate="yes" xml:space="preserve">
          <source>An iterator over a slice in (non-overlapping) mutable chunks (&lt;code&gt;N&lt;/code&gt; elements at a time), starting at the beginning of the slice.</source>
          <target state="translated">スライスの先頭から開始して、（重複しない）可変チャンク（一度に &lt;code&gt;N&lt;/code&gt; 個の要素）内のスライス上のイテレーター。</target>
        </trans-unit>
        <trans-unit id="b727a794715c05c6c1c0cd0cd6149d40bd7c3a04" translate="yes" xml:space="preserve">
          <source>An iterator over a slice in (non-overlapping) mutable chunks (&lt;code&gt;chunk_size&lt;/code&gt; elements at a time), starting at the beginning of the slice.</source>
          <target state="translated">（重複しない）可変チャンク（一度に &lt;code&gt;chunk_size&lt;/code&gt; 要素）内のスライスの反復子。スライスの先頭から開始します。</target>
        </trans-unit>
        <trans-unit id="590e04be01e914183b27d18dc8eff4e3ae5668f0" translate="yes" xml:space="preserve">
          <source>An iterator over a slice in (non-overlapping) mutable chunks (&lt;code&gt;chunk_size&lt;/code&gt; elements at a time), starting at the end of the slice.</source>
          <target state="translated">（オーバーラップしない）可変チャンク（一度に &lt;code&gt;chunk_size&lt;/code&gt; 要素）内のスライスの反復子。スライスの最後から開始します。</target>
        </trans-unit>
        <trans-unit id="68ad6606a48079fe489aab3faf8c6e3a26b992ca" translate="yes" xml:space="preserve">
          <source>An iterator over a snapshot of the environment variables of this process.</source>
          <target state="translated">このプロセスの環境変数のスナップショット上のイテレータ。</target>
        </trans-unit>
        <trans-unit id="a94e3f24bb1eb1ba2fd58ebddc9b4d9dba8309a8" translate="yes" xml:space="preserve">
          <source>An iterator over a sub-range of entries in a &lt;code&gt;BTreeMap&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;BTreeMap&lt;/code&gt; のエントリのサブ範囲のイテレータ。</target>
        </trans-unit>
        <trans-unit id="d03569c5a9963027ad22996c9e0b70fb1554a87f" translate="yes" xml:space="preserve">
          <source>An iterator over a sub-range of items in a &lt;code&gt;BTreeSet&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;BTreeSet&lt;/code&gt; 内のアイテムのサブ範囲の反復子。</target>
        </trans-unit>
        <trans-unit id="ce0b01e77f645194e2b6b751858aec640161f669" translate="yes" xml:space="preserve">
          <source>An iterator over an &lt;a href=&quot;trait.error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; and its sources.</source>
          <target state="translated">&lt;a href=&quot;trait.error&quot;&gt; &lt;code&gt;Error&lt;/code&gt; &lt;/a&gt;とそのソースに対するイテレータ。</target>
        </trans-unit>
        <trans-unit id="f19c5dd669fe6f36f81a65798f7219d0079a694d" translate="yes" xml:space="preserve">
          <source>An iterator over incoming connections to a &lt;a href=&quot;struct.unixlistener&quot;&gt;&lt;code&gt;UnixListener&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;struct.unixlistener&quot;&gt; &lt;code&gt;UnixListener&lt;/code&gt; &lt;/a&gt;への着信接続に対するイテレータ。</target>
        </trans-unit>
        <trans-unit id="4d7488e2fccb6b43b42e67c9ea07cad9428b393b" translate="yes" xml:space="preserve">
          <source>An iterator over messages on a &lt;a href=&quot;struct.receiver&quot;&gt;&lt;code&gt;Receiver&lt;/code&gt;&lt;/a&gt;, created by &lt;a href=&quot;struct.receiver#method.iter&quot;&gt;&lt;code&gt;iter&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;struct.receiver#method.iter&quot;&gt; &lt;code&gt;iter&lt;/code&gt; &lt;/a&gt;によって作成された、&lt;a href=&quot;struct.receiver&quot;&gt; &lt;code&gt;Receiver&lt;/code&gt; &lt;/a&gt;上のメッセージに対するイテレータ。</target>
        </trans-unit>
        <trans-unit id="034a20701e995ae32aa63104e2d5dff0ab5db4e6" translate="yes" xml:space="preserve">
          <source>An iterator over overlapping subslices of length &lt;code&gt;size&lt;/code&gt;.</source>
          <target state="translated">長さ &lt;code&gt;size&lt;/code&gt; の重複するサブスライスの反復子。</target>
        </trans-unit>
        <trans-unit id="ba3bd9fb0e96735ece0b2069d478b585f0d8e7fe" translate="yes" xml:space="preserve">
          <source>An iterator over subslices separated by elements that match a predicate function, limited to a given number of splits, starting from the end of the slice.</source>
          <target state="translated">述語関数にマッチする要素で区切られたサブスライスを対象としたイテレータ.</target>
        </trans-unit>
        <trans-unit id="24b57b67d67808582aa0647134f85aea733abfd0" translate="yes" xml:space="preserve">
          <source>An iterator over subslices separated by elements that match a predicate function, limited to a given number of splits.</source>
          <target state="translated">述語関数にマッチする要素で区切られたサブスライスのイテレータ。</target>
        </trans-unit>
        <trans-unit id="7f751853b227571562b0215c1381b97b30029d0a" translate="yes" xml:space="preserve">
          <source>An iterator over subslices separated by elements that match a predicate function, starting from the end of the slice.</source>
          <target state="translated">述語関数にマッチする要素で区切られたサブスライスのイテレータ。</target>
        </trans-unit>
        <trans-unit id="6a41aa74d34fd0ce2985da917544c4f35cf020f9" translate="yes" xml:space="preserve">
          <source>An iterator over subslices separated by elements that match a predicate function.</source>
          <target state="translated">述語関数にマッチする要素で区切られたサブスライス上のイテレータ。</target>
        </trans-unit>
        <trans-unit id="e1f02e8fb3b3f7adf4ed8a711ed0b9c2ca4cda3e" translate="yes" xml:space="preserve">
          <source>An iterator over substrings of &lt;code&gt;self&lt;/code&gt;, separated by characters matched by a pattern and yielded in reverse order.</source>
          <target state="translated">パターンに一致する文字で区切られ、逆の順序で生成される &lt;code&gt;self&lt;/code&gt; の部分文字列の反復子。</target>
        </trans-unit>
        <trans-unit id="61c715ce9520941f9108744caef70fb9d86c6529" translate="yes" xml:space="preserve">
          <source>An iterator over substrings of the given string slice, separated by a pattern, restricted to returning at most &lt;code&gt;n&lt;/code&gt; items.</source>
          <target state="translated">パターンで区切られた、指定された文字列スライスの部分文字列に対するイテレータ。最大 &lt;code&gt;n&lt;/code&gt; 個のアイテムを返すように制限されています。</target>
        </trans-unit>
        <trans-unit id="44ffc34ab178359db4b3169f249d963fd153689b" translate="yes" xml:space="preserve">
          <source>An iterator over substrings of the given string slice, separated by characters matched by a pattern and yielded in reverse order.</source>
          <target state="translated">与えられた文字列スライスの部分文字列を、パターンにマッチした文字で区切って逆順に並べるイテレータ。</target>
        </trans-unit>
        <trans-unit id="f65e61a07278abe6a5b629cd21c031c73243b0de" translate="yes" xml:space="preserve">
          <source>An iterator over substrings of the given string slice, separated by characters matched by a pattern.</source>
          <target state="translated">指定された文字列スライスの部分文字列を、パターンにマッチした文字で区切ってイテレータします。</target>
        </trans-unit>
        <trans-unit id="537813cfc78da0abdca4b435c9341ecf42939302" translate="yes" xml:space="preserve">
          <source>An iterator over substrings of this string slice, separated by a pattern, starting from the end of the string, restricted to returning at most &lt;code&gt;n&lt;/code&gt; items.</source>
          <target state="translated">文字列の末尾から開始してパターンで区切られた、この文字列スライスの部分文字列の反復子。最大 &lt;code&gt;n&lt;/code&gt; 個のアイテムを返すように制限されています。</target>
        </trans-unit>
        <trans-unit id="02d9a6b83a0665db88c523e6eaff227f1f6e5ae9" translate="yes" xml:space="preserve">
          <source>An iterator over substrings of this string slice, separated by characters matched by a pattern.</source>
          <target state="translated">パターンにマッチした文字で区切られた、この文字列スライスの部分文字列に対するイテレータ。</target>
        </trans-unit>
        <trans-unit id="a2052e6e3b1c0165802cd6417a16b0838afc588a" translate="yes" xml:space="preserve">
          <source>An iterator over substrings of this string slice, separated by characters matched by a pattern. Differs from the iterator produced by &lt;code&gt;split&lt;/code&gt; in that &lt;code&gt;split_inclusive&lt;/code&gt; leaves the matched part as the terminator of the substring.</source>
          <target state="translated">パターンに一致する文字で区切られた、この文字列スライスの部分文字列に対するイテレータ。 &lt;code&gt;split_inclusive&lt;/code&gt; が部分文字列のターミネーターとして一致した部分を残すという点で、 &lt;code&gt;split&lt;/code&gt; によって生成されたイテレーターとは異なります。</target>
        </trans-unit>
        <trans-unit id="0ef8a4c9f98576b84451f0afffc7c456b9562b40" translate="yes" xml:space="preserve">
          <source>An iterator over the &lt;a href=&quot;../primitive.char&quot;&gt;&lt;code&gt;char&lt;/code&gt;&lt;/a&gt;s of a string slice, and their positions.</source>
          <target state="translated">文字列スライスの&lt;a href=&quot;../primitive.char&quot;&gt; &lt;code&gt;char&lt;/code&gt; &lt;/a&gt;とその位置の反復子。</target>
        </trans-unit>
        <trans-unit id="6dbafa08f3b2b12e80351b71ca200a8528053590" translate="yes" xml:space="preserve">
          <source>An iterator over the &lt;a href=&quot;../primitive.char&quot;&gt;&lt;code&gt;char&lt;/code&gt;&lt;/a&gt;s of a string slice.</source>
          <target state="translated">文字列スライスの&lt;a href=&quot;../primitive.char&quot;&gt; &lt;code&gt;char&lt;/code&gt; &lt;/a&gt;のイテレータ。</target>
        </trans-unit>
        <trans-unit id="94f1d147d9aa55e9343a89220481dd294b3c1ca7" translate="yes" xml:space="preserve">
          <source>An iterator over the &lt;a href=&quot;enum.component&quot;&gt;&lt;code&gt;Component&lt;/code&gt;&lt;/a&gt;s of a &lt;a href=&quot;struct.path&quot;&gt;&lt;code&gt;Path&lt;/code&gt;&lt;/a&gt;, as &lt;a href=&quot;../ffi/struct.osstr&quot;&gt;&lt;code&gt;OsStr&lt;/code&gt;&lt;/a&gt; slices.</source>
          <target state="translated">&lt;a href=&quot;../ffi/struct.osstr&quot;&gt; &lt;code&gt;OsStr&lt;/code&gt; &lt;/a&gt;スライスとしての&lt;a href=&quot;struct.path&quot;&gt; &lt;code&gt;Path&lt;/code&gt; の&lt;/a&gt;&lt;a href=&quot;enum.component&quot;&gt; &lt;code&gt;Component&lt;/code&gt; &lt;/a&gt;のイテレータ。</target>
        </trans-unit>
        <trans-unit id="81b7c7eac770fb32d5f49a8fa6788046e188a635" translate="yes" xml:space="preserve">
          <source>An iterator over the &lt;a href=&quot;enum.component&quot;&gt;&lt;code&gt;Component&lt;/code&gt;&lt;/a&gt;s of a &lt;a href=&quot;struct.path&quot;&gt;&lt;code&gt;Path&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;struct.path&quot;&gt; &lt;code&gt;Path&lt;/code&gt; の&lt;/a&gt;&lt;a href=&quot;enum.component&quot;&gt; &lt;code&gt;Component&lt;/code&gt; &lt;/a&gt;のイテレータ。</target>
        </trans-unit>
        <trans-unit id="0046da9ead2fd2c36a6a2fa82a2d2ece3e53ebf5" translate="yes" xml:space="preserve">
          <source>An iterator over the arguments of a process, yielding a &lt;a href=&quot;../string/struct.string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; value for each argument.</source>
          <target state="translated">プロセスの引数に対するイテレータ。各引数の&lt;a href=&quot;../string/struct.string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;値を生成します。</target>
        </trans-unit>
        <trans-unit id="ebb5d1c5d63504b0108ad325cad0bf7d2676c9ed" translate="yes" xml:space="preserve">
          <source>An iterator over the arguments of a process, yielding an &lt;a href=&quot;../ffi/struct.osstring&quot;&gt;&lt;code&gt;OsString&lt;/code&gt;&lt;/a&gt; value for each argument.</source>
          <target state="translated">プロセスの引数の反復子。各引数の&lt;a href=&quot;../ffi/struct.osstring&quot;&gt; &lt;code&gt;OsString&lt;/code&gt; &lt;/a&gt;値を生成します。</target>
        </trans-unit>
        <trans-unit id="db156c74a7f7733ec8d2fb32dcfb0fa41d392992" translate="yes" xml:space="preserve">
          <source>An iterator over the bytes of a string slice.</source>
          <target state="translated">文字列スライスのバイトに対するイテレータ。</target>
        </trans-unit>
        <trans-unit id="3d759394e80e7fa435aa3e0e0304961fda1ff609" translate="yes" xml:space="preserve">
          <source>An iterator over the command arguments.</source>
          <target state="translated">コマンド引数のイテレータ。</target>
        </trans-unit>
        <trans-unit id="bc24e95b2a3b7911eb4e4a74052e9fbce963a97d" translate="yes" xml:space="preserve">
          <source>An iterator over the command environment variables.</source>
          <target state="translated">コマンド環境変数のイテレータ。</target>
        </trans-unit>
        <trans-unit id="e870ff1a2a9d31100b2ac9cb6ffbae140349bbde" translate="yes" xml:space="preserve">
          <source>An iterator over the contents of an instance of &lt;code&gt;BufRead&lt;/code&gt; split on a particular byte.</source>
          <target state="translated">特定のバイトで分割された &lt;code&gt;BufRead&lt;/code&gt; のインスタンスの内容に対する反復子。</target>
        </trans-unit>
        <trans-unit id="df77d35e2c4e122e560661a4bc012ddb30bf89c7" translate="yes" xml:space="preserve">
          <source>An iterator over the disjoint matches of a pattern within &lt;code&gt;self&lt;/code&gt;, yielded in reverse order along with the index of the match.</source>
          <target state="translated">一致のインデックスと逆の順序で生成された、 &lt;code&gt;self&lt;/code&gt; 内のパターンの素の一致に対する反復子。</target>
        </trans-unit>
        <trans-unit id="f7d549ea470a7ac3f5b7f05549ca71296a3cf479" translate="yes" xml:space="preserve">
          <source>An iterator over the disjoint matches of a pattern within the given string slice.</source>
          <target state="translated">与えられた文字列スライス内のパターンの不連続マッチに対するイテレータ.</target>
        </trans-unit>
        <trans-unit id="4e8c4e320605a2ab4ab8ef1e11e40919b14ac665" translate="yes" xml:space="preserve">
          <source>An iterator over the disjoint matches of a pattern within this string slice as well as the index that the match starts at.</source>
          <target state="translated">この文字列スライス内のパターンの不連続マッチとマッチの開始位置のインデックスのイテレータ。</target>
        </trans-unit>
        <trans-unit id="bf644211cc86eb9babefe771489adf416b34d943" translate="yes" xml:space="preserve">
          <source>An iterator over the disjoint matches of a pattern within this string slice, yielded in reverse order.</source>
          <target state="translated">この文字列スライス内のパターンの不連続マッチを逆順に処理するイテレータです。</target>
        </trans-unit>
        <trans-unit id="a4b7288e219c65d73a3e6a54b4428c628926ca26" translate="yes" xml:space="preserve">
          <source>An iterator over the elements of a &lt;code&gt;BinaryHeap&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;BinaryHeap&lt;/code&gt; の要素に対するイテレータ。</target>
        </trans-unit>
        <trans-unit id="60a4b99de7b2aa615fb862b4ef6662bf265a07b3" translate="yes" xml:space="preserve">
          <source>An iterator over the elements of a &lt;code&gt;LinkedList&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;LinkedList&lt;/code&gt; の要素に対するイテレータ。</target>
        </trans-unit>
        <trans-unit id="2f97f18a1c5aa5746176c6f51c4eafd84be2fce3" translate="yes" xml:space="preserve">
          <source>An iterator over the elements of a &lt;code&gt;VecDeque&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;VecDeque&lt;/code&gt; の要素のイテレータ。</target>
        </trans-unit>
        <trans-unit id="91db6e4ce90dbed18c33044e96c535db60789527" translate="yes" xml:space="preserve">
          <source>An iterator over the entries of a &lt;code&gt;BTreeMap&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;BTreeMap&lt;/code&gt; のエントリに対するイテレータ。</target>
        </trans-unit>
        <trans-unit id="89075f098d105168914ad089684eab6ab82bd15c" translate="yes" xml:space="preserve">
          <source>An iterator over the entries of a &lt;code&gt;HashMap&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;HashMap&lt;/code&gt; のエントリに対するイテレータ。</target>
        </trans-unit>
        <trans-unit id="6598ccbf021650c51246c68845640e9702eed23d" translate="yes" xml:space="preserve">
          <source>An iterator over the escaped version of a byte.</source>
          <target state="translated">バイトのエスケープされたバージョンのイテレータ。</target>
        </trans-unit>
        <trans-unit id="56eb86799cc14570dbdb72543cfaf21c05c1abe2" translate="yes" xml:space="preserve">
          <source>An iterator over the items of a &lt;code&gt;BTreeSet&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;BTreeSet&lt;/code&gt; の項目のイテレータ。</target>
        </trans-unit>
        <trans-unit id="d5fd2e8685f9eef9092473bf82703d995770cb96" translate="yes" xml:space="preserve">
          <source>An iterator over the items of a &lt;code&gt;HashSet&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;HashSet&lt;/code&gt; のアイテムのイテレータ。</target>
        </trans-unit>
        <trans-unit id="c8ce67dcd74b8165190d1c5586f09c2e5112934e" translate="yes" xml:space="preserve">
          <source>An iterator over the keys of a &lt;code&gt;BTreeMap&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;BTreeMap&lt;/code&gt; のキーのイテレータ。</target>
        </trans-unit>
        <trans-unit id="6ab13d3c24ccbf1b667994220cf1ff47151b518f" translate="yes" xml:space="preserve">
          <source>An iterator over the keys of a &lt;code&gt;HashMap&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;HashMap&lt;/code&gt; のキーに対するイテレータ。</target>
        </trans-unit>
        <trans-unit id="bdb3c68f21440272514f422ef05c2d524b30604a" translate="yes" xml:space="preserve">
          <source>An iterator over the lines of a string, as string slices.</source>
          <target state="translated">文字列の行を文字列スライスとして扱うイテレータ。</target>
        </trans-unit>
        <trans-unit id="47a35066a39c1ed7b30ce9f4878b660c0a1e7474" translate="yes" xml:space="preserve">
          <source>An iterator over the lines of a string.</source>
          <target state="translated">文字列の行の上のイテレータ。</target>
        </trans-unit>
        <trans-unit id="4cce7f5b74c3be64996357d548c448d7d2f4462a" translate="yes" xml:space="preserve">
          <source>An iterator over the lines of an instance of &lt;code&gt;BufRead&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;BufRead&lt;/code&gt; のインスタンスの行に対するイテレータ。</target>
        </trans-unit>
        <trans-unit id="cc70893f07fa207bd53da767c3e857dc38ff1063" translate="yes" xml:space="preserve">
          <source>An iterator over the mutable subslices of the vector which are separated by elements that match &lt;code&gt;pred&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;pred&lt;/code&gt; に一致する要素で区切られたベクトルの可変サブスライスに対するイテレータ。</target>
        </trans-unit>
        <trans-unit id="a3ce41435c2e05d485713b80e3d67f84041531ab" translate="yes" xml:space="preserve">
          <source>An iterator over the non-ASCII-whitespace substrings of a string, separated by any amount of ASCII whitespace.</source>
          <target state="translated">文字列の非ASCII空白の部分文字列を、任意の量のASCII空白で区切ってイテレータします。</target>
        </trans-unit>
        <trans-unit id="98639edcf075ef0bbd56694e6fd8f3ab5801fa3b" translate="yes" xml:space="preserve">
          <source>An iterator over the non-whitespace substrings of a string, separated by any amount of whitespace.</source>
          <target state="translated">文字列の空白以外の部分文字列を、任意の量の空白で区切ってイテレータします。</target>
        </trans-unit>
        <trans-unit id="f6d3a015ca8e0813b9d2a570221365ce0bb7b9f3" translate="yes" xml:space="preserve">
          <source>An iterator over the subslices of the vector which are separated by elements that match &lt;code&gt;pred&lt;/code&gt;, starting from the end of the slice.</source>
          <target state="translated">スライスの最後から開始して、 &lt;code&gt;pred&lt;/code&gt; に一致する要素で区切られたベクトルのサブスライスの反復子。</target>
        </trans-unit>
        <trans-unit id="82456e1206b372bf7ea9d2f45cb440546d002943" translate="yes" xml:space="preserve">
          <source>An iterator over the subslices of the vector which are separated by elements that match &lt;code&gt;pred&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;pred&lt;/code&gt; に一致する要素で区切られたベクトルのサブスライスの反復子。</target>
        </trans-unit>
        <trans-unit id="551626c835c28af1e23d1b77fa736e5fca587fd5" translate="yes" xml:space="preserve">
          <source>An iterator over the value in &lt;a href=&quot;enum.option#variant.Some&quot;&gt;&lt;code&gt;Some&lt;/code&gt;&lt;/a&gt; variant of an &lt;a href=&quot;enum.option&quot;&gt;&lt;code&gt;Option&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;enum.option&quot;&gt; &lt;code&gt;Option&lt;/code&gt; の&lt;/a&gt;&lt;a href=&quot;enum.option#variant.Some&quot;&gt; &lt;code&gt;Some&lt;/code&gt; &lt;/a&gt;バリアントの値に対するイテレータ。</target>
        </trans-unit>
        <trans-unit id="2ad0a62fd20b029d94f3ea06e170d6042fc65d39" translate="yes" xml:space="preserve">
          <source>An iterator over the value in a &lt;a href=&quot;enum.result#variant.Ok&quot;&gt;&lt;code&gt;Ok&lt;/code&gt;&lt;/a&gt; variant of a &lt;a href=&quot;enum.result&quot;&gt;&lt;code&gt;Result&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;enum.result&quot;&gt; &lt;code&gt;Result&lt;/code&gt; の&lt;/a&gt;&lt;a href=&quot;enum.result#variant.Ok&quot;&gt; &lt;code&gt;Ok&lt;/code&gt; &lt;/a&gt;バリアントの値に対するイテレータ。</target>
        </trans-unit>
        <trans-unit id="06914df7e2feff75ffe46782ed50136c93cfaa1b" translate="yes" xml:space="preserve">
          <source>An iterator over the values of a &lt;code&gt;BTreeMap&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;BTreeMap&lt;/code&gt; の値のイテレータ。</target>
        </trans-unit>
        <trans-unit id="25879aa8de242e212254e6f312a25f5c0bfcd32b" translate="yes" xml:space="preserve">
          <source>An iterator over the values of a &lt;code&gt;HashMap&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;HashMap&lt;/code&gt; の値の反復子。</target>
        </trans-unit>
        <trans-unit id="1d5f58fc7c0c008712ec4e6eb8559eb52c39ce18" translate="yes" xml:space="preserve">
          <source>An iterator produced by &lt;code&gt;repeat_with()&lt;/code&gt; is not a &lt;a href=&quot;trait.doubleendediterator&quot;&gt;&lt;code&gt;DoubleEndedIterator&lt;/code&gt;&lt;/a&gt;. If you need &lt;code&gt;repeat_with()&lt;/code&gt; to return a &lt;a href=&quot;trait.doubleendediterator&quot;&gt;&lt;code&gt;DoubleEndedIterator&lt;/code&gt;&lt;/a&gt;, please open a GitHub issue explaining your use case.</source>
          <target state="translated">&lt;code&gt;repeat_with()&lt;/code&gt; によって生成されたイテレータは&lt;a href=&quot;trait.doubleendediterator&quot;&gt; &lt;code&gt;DoubleEndedIterator&lt;/code&gt; で&lt;/a&gt;はありません。あなたが必要な場合 &lt;code&gt;repeat_with()&lt;/code&gt; を返すように&lt;a href=&quot;trait.doubleendediterator&quot;&gt; &lt;code&gt;DoubleEndedIterator&lt;/code&gt; を&lt;/a&gt;、あなたのユースケースを説明するGitHubの問題を開いてください。</target>
        </trans-unit>
        <trans-unit id="28ebf2a599d5ab4a921fbe241809a3d3600be3e5" translate="yes" xml:space="preserve">
          <source>An iterator produced by &lt;code&gt;repeat_with()&lt;/code&gt; is not a &lt;code&gt;DoubleEndedIterator&lt;/code&gt;. If you need &lt;code&gt;repeat_with()&lt;/code&gt; to return a &lt;code&gt;DoubleEndedIterator&lt;/code&gt;, please open a GitHub issue explaining your use case.</source>
          <target state="translated">&lt;code&gt;repeat_with()&lt;/code&gt; によって生成された反復子は &lt;code&gt;DoubleEndedIterator&lt;/code&gt; ではありません。あなたが必要な場合 &lt;code&gt;repeat_with()&lt;/code&gt; を返すように &lt;code&gt;DoubleEndedIterator&lt;/code&gt; を、あなたのユースケースを説明するGitHubの問題を開いてください。</target>
        </trans-unit>
        <trans-unit id="57a784df1f13cfa8da5679e054cc8033f6fabdb2" translate="yes" xml:space="preserve">
          <source>An iterator produced by calling &lt;code&gt;drain_filter&lt;/code&gt; on BTreeMap.</source>
          <target state="translated">&lt;code&gt;drain_filter&lt;/code&gt; でdrain_filterを呼び出すことによって生成されるイテレーター。</target>
        </trans-unit>
        <trans-unit id="8506c9bfb6eed5d29b225ea0333e263b7b9b1840" translate="yes" xml:space="preserve">
          <source>An iterator produced by calling &lt;code&gt;drain_filter&lt;/code&gt; on BTreeSet.</source>
          <target state="translated">&lt;code&gt;drain_filter&lt;/code&gt; でdrain_filterを呼び出すことによって生成されるイテレーター。</target>
        </trans-unit>
        <trans-unit id="c51b3a9a86a32de916b3441f5cc928b34139d94d" translate="yes" xml:space="preserve">
          <source>An iterator produced by calling &lt;code&gt;drain_filter&lt;/code&gt; on LinkedList.</source>
          <target state="translated">&lt;code&gt;drain_filter&lt;/code&gt; でdrain_filterを呼び出して作成された反復子。</target>
        </trans-unit>
        <trans-unit id="d90f64072c9b86fb5e160826e11d54a35519d306" translate="yes" xml:space="preserve">
          <source>An iterator produced by calling &lt;code&gt;drain_filter&lt;/code&gt; on Vec.</source>
          <target state="translated">Vecで &lt;code&gt;drain_filter&lt;/code&gt; を呼び出して作成されたイテレーター。</target>
        </trans-unit>
        <trans-unit id="e2f38bdab7ee3f88662413a8d0762d07987cc9e4" translate="yes" xml:space="preserve">
          <source>An iterator that always continues to yield &lt;code&gt;None&lt;/code&gt; when exhausted.</source>
          <target state="translated">使い尽くされたときに常に &lt;code&gt;None&lt;/code&gt; を生成し続けるイテレータ。</target>
        </trans-unit>
        <trans-unit id="d75b48632d15091a831b75304f768ce72229865c" translate="yes" xml:space="preserve">
          <source>An iterator that attempts to yield all pending values for a &lt;a href=&quot;struct.receiver&quot;&gt;&lt;code&gt;Receiver&lt;/code&gt;&lt;/a&gt;, created by &lt;a href=&quot;struct.receiver#method.try_iter&quot;&gt;&lt;code&gt;try_iter&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;struct.receiver#method.try_iter&quot;&gt; &lt;code&gt;try_iter&lt;/code&gt; &lt;/a&gt;によって作成された、&lt;a href=&quot;struct.receiver&quot;&gt; &lt;code&gt;Receiver&lt;/code&gt; の&lt;/a&gt;保留中のすべての値を生成しようとする反復子。</target>
        </trans-unit>
        <trans-unit id="0c0e45d489e23ad54f254e3c451b03c3ad3633b8" translate="yes" xml:space="preserve">
          <source>An iterator that calls a function with a reference to each element before yielding it.</source>
          <target state="translated">各要素を参照して関数を呼び出してからそれを返すイテレータ。</target>
        </trans-unit>
        <trans-unit id="51a9a929e3e766e1bc15473a2edf034711e9603a" translate="yes" xml:space="preserve">
          <source>An iterator that clones the elements of an underlying iterator.</source>
          <target state="translated">基礎となるイテレータの要素をクローンするイテレータ。</target>
        </trans-unit>
        <trans-unit id="d2287777325ba0f8a82eefc9f82886c5e6c0375c" translate="yes" xml:space="preserve">
          <source>An iterator that copies the elements of an underlying iterator.</source>
          <target state="translated">基礎となるイテレータの要素をコピーするイテレータ。</target>
        </trans-unit>
        <trans-unit id="11b5eb68a058f133076c97a53287f7350b19b4ed" translate="yes" xml:space="preserve">
          <source>An iterator that decodes UTF-16 encoded code points from an iterator of &lt;code&gt;u16&lt;/code&gt;s.</source>
          <target state="translated">&lt;code&gt;u16&lt;/code&gt; のイテレータからUTF-16エンコードされたコードポイントをデコードするイテレータ。</target>
        </trans-unit>
        <trans-unit id="a7c2f22f759edefd0c02e7989a0830d2b9927824" translate="yes" xml:space="preserve">
          <source>An iterator that filters the elements of &lt;code&gt;iter&lt;/code&gt; with &lt;code&gt;predicate&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;iter&lt;/code&gt; の要素を &lt;code&gt;predicate&lt;/code&gt; でフィルタリングするイテレータ。</target>
        </trans-unit>
        <trans-unit id="538c0bdbb5f2579b6454154f638e3b2235b91db1" translate="yes" xml:space="preserve">
          <source>An iterator that flattens one level of nesting in an iterator of things that can be turned into iterators.</source>
          <target state="translated">イテレータ化できるモノのイテレータで1レベルのネストをフラットにするイテレータ。</target>
        </trans-unit>
        <trans-unit id="9dbf52f6fb3a5236b83ac424b9036cbd60fd5a39" translate="yes" xml:space="preserve">
          <source>An iterator that infinitely &lt;a href=&quot;struct.tcplistener#method.accept&quot;&gt;&lt;code&gt;accept&lt;/code&gt;&lt;/a&gt;s connections on a &lt;a href=&quot;struct.tcplistener&quot;&gt;&lt;code&gt;TcpListener&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;struct.tcplistener&quot;&gt; &lt;code&gt;TcpListener&lt;/code&gt; で&lt;/a&gt;の接続を無限に&lt;a href=&quot;struct.tcplistener#method.accept&quot;&gt; &lt;code&gt;accept&lt;/code&gt; &lt;/a&gt;イテレータ。</target>
        </trans-unit>
        <trans-unit id="81a5d4ccf76ade25979b7f90350112e1ade77257" translate="yes" xml:space="preserve">
          <source>An iterator that iterates two other iterators simultaneously.</source>
          <target state="translated">他の2つのイテレータを同時に反復処理するイテレータ。</target>
        </trans-unit>
        <trans-unit id="ca3c41a43b14bf4c961d798c07db548fe5c4306e" translate="yes" xml:space="preserve">
          <source>An iterator that knows its exact length.</source>
          <target state="translated">正確な長さを知っているイテレータ。</target>
        </trans-unit>
        <trans-unit id="6bd3d7d181c5f76ada28bd405c55b98768c1a53e" translate="yes" xml:space="preserve">
          <source>An iterator that links two iterators together, in a chain.</source>
          <target state="translated">2つのイテレータをチェーンでつなぐイテレータ。</target>
        </trans-unit>
        <trans-unit id="fd413348f096597213f95708520a2a2ee8e8c6ff" translate="yes" xml:space="preserve">
          <source>An iterator that maps each element to an iterator, and yields the elements of the produced iterators.</source>
          <target state="translated">各要素をイテレータにマッピングし、生成されたイテレータの要素を生成するイテレータ。</target>
        </trans-unit>
        <trans-unit id="e00fb1707b378038f217f0122cb5c2c693a99ce9" translate="yes" xml:space="preserve">
          <source>An iterator that maps the values of &lt;code&gt;iter&lt;/code&gt; with &lt;code&gt;f&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;iter&lt;/code&gt; の値を &lt;code&gt;f&lt;/code&gt; でマップするイテレータ。</target>
        </trans-unit>
        <trans-unit id="c89c4d0277ad0dbe70fcef9f7526e1d26306d3c4" translate="yes" xml:space="preserve">
          <source>An iterator that moves out of a vector.</source>
          <target state="translated">ベクトルの外に移動するイテレータ。</target>
        </trans-unit>
        <trans-unit id="18d1634bc6586ab56c39fac0a163c9d8e2300d06" translate="yes" xml:space="preserve">
          <source>An iterator that only accepts elements while &lt;code&gt;predicate&lt;/code&gt; returns &lt;code&gt;Some(_)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;predicate&lt;/code&gt; が &lt;code&gt;Some(_)&lt;/code&gt; を返す間、要素のみを受け入れるイテレータ。</target>
        </trans-unit>
        <trans-unit id="5d780c4556be41e5ade58ccb90a4cb9745c8a4a0" translate="yes" xml:space="preserve">
          <source>An iterator that only accepts elements while &lt;code&gt;predicate&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;predicate&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; を返す間、要素のみを受け入れるイテレータ。</target>
        </trans-unit>
        <trans-unit id="ca756e17e11dd720fde75ad3acbb4dc61da5a0b9" translate="yes" xml:space="preserve">
          <source>An iterator that only iterates over the first &lt;code&gt;n&lt;/code&gt; iterations of &lt;code&gt;iter&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;iter&lt;/code&gt; の最初の &lt;code&gt;n&lt;/code&gt; 回の反復のみを反復する反復子。</target>
        </trans-unit>
        <trans-unit id="473994edf3f2b12636ecfbae9c0cf95e9976442a" translate="yes" xml:space="preserve">
          <source>An iterator that rejects elements while &lt;code&gt;predicate&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;predicate&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; を返す間、要素を拒否するイテレータ。</target>
        </trans-unit>
        <trans-unit id="0464de53ba73fee454800ae2dd5fef9380113b90" translate="yes" xml:space="preserve">
          <source>An iterator that repeats an element endlessly.</source>
          <target state="translated">要素を無限に繰り返すイテレータ。</target>
        </trans-unit>
        <trans-unit id="7f0331c06c1f3247687712e4a8fa91faa255da79" translate="yes" xml:space="preserve">
          <source>An iterator that repeats elements of type &lt;code&gt;A&lt;/code&gt; endlessly by applying the provided closure &lt;code&gt;F: FnMut() -&amp;gt; A&lt;/code&gt;.</source>
          <target state="translated">提供されたクロージャー &lt;code&gt;F: FnMut() -&amp;gt; A&lt;/code&gt; 適用することにより、タイプ &lt;code&gt;A&lt;/code&gt; の要素を無限に繰り返すイテレーター。</target>
        </trans-unit>
        <trans-unit id="4f71391fe387efdecec312046c6dd55bbf198321" translate="yes" xml:space="preserve">
          <source>An iterator that repeats endlessly.</source>
          <target state="translated">無限に繰り返すイテレータ。</target>
        </trans-unit>
        <trans-unit id="905426af2dba7f51c454090a12d4200524fdd44c" translate="yes" xml:space="preserve">
          <source>An iterator that reports an accurate length using size_hint.</source>
          <target state="translated">size_hintを使用して正確な長さを報告するイテレータ。</target>
        </trans-unit>
        <trans-unit id="6e8e68927103c8756bd8e724310ac62f637e383b" translate="yes" xml:space="preserve">
          <source>An iterator that skips over &lt;code&gt;n&lt;/code&gt; elements of &lt;code&gt;iter&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;iter&lt;/code&gt; の &lt;code&gt;n&lt;/code&gt; 個の要素をスキップするイテレータ。</target>
        </trans-unit>
        <trans-unit id="cc8fdbf15929bf39a9148cd3ad1f02b7e2f3e8e1" translate="yes" xml:space="preserve">
          <source>An iterator that splits an environment variable into paths according to platform-specific conventions.</source>
          <target state="translated">プラットフォーム固有の規約に従って環境変数をパスに分割するイテレータ。</target>
        </trans-unit>
        <trans-unit id="57ccd12f7079988974d92028c7ca992c2e3dc8d6" translate="yes" xml:space="preserve">
          <source>An iterator that strings two iterators together.</source>
          <target state="translated">2つのイテレータを文字列化したイテレータ。</target>
        </trans-unit>
        <trans-unit id="277e34f21de2c1bcf08658ea7180ea41a724c7da" translate="yes" xml:space="preserve">
          <source>An iterator that uses &lt;code&gt;f&lt;/code&gt; to both filter and map elements from &lt;code&gt;iter&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;f&lt;/code&gt; を使用して、 &lt;code&gt;iter&lt;/code&gt; の要素をフィルタリングおよびマップするイテレーター。</target>
        </trans-unit>
        <trans-unit id="d1c29ab729712117252122597b1f8dee40693e18" translate="yes" xml:space="preserve">
          <source>An iterator that when yielding an item will have taken at least one element from its underlying &lt;a href=&quot;trait.sourceiter&quot;&gt;&lt;code&gt;SourceIter&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">アイテムを生成するときに、基礎となる&lt;a href=&quot;trait.sourceiter&quot;&gt; &lt;code&gt;SourceIter&lt;/code&gt; &lt;/a&gt;から少なくとも1つの要素を取得するイテレーター。</target>
        </trans-unit>
        <trans-unit id="290a4df52520d8c2cd218b2c5a66207c17bd76b5" translate="yes" xml:space="preserve">
          <source>An iterator that yields &lt;code&gt;None&lt;/code&gt; forever after the underlying iterator yields &lt;code&gt;None&lt;/code&gt; once.</source>
          <target state="translated">基礎となるイテレータが &lt;code&gt;None&lt;/code&gt; を 1回生成した後、 &lt;code&gt;None&lt;/code&gt; を永続的に生成するイテレータ。</target>
        </trans-unit>
        <trans-unit id="8077f46e4926a9ba2fe0c3a0111f99b3bfd0cee7" translate="yes" xml:space="preserve">
          <source>An iterator that yields a single element of type &lt;code&gt;A&lt;/code&gt; by applying the provided closure &lt;code&gt;F: FnOnce() -&amp;gt; A&lt;/code&gt;.</source>
          <target state="translated">提供されたクロージャー &lt;code&gt;F: FnOnce() -&amp;gt; A&lt;/code&gt; 適用してタイプ &lt;code&gt;A&lt;/code&gt; の単一の要素を生成するイテレーター。</target>
        </trans-unit>
        <trans-unit id="f74ed23fee03be7f9726d86e04759a8cdc7c98f8" translate="yes" xml:space="preserve">
          <source>An iterator that yields an element exactly once.</source>
          <target state="translated">要素を正確に一度だけ返すイテレータ。</target>
        </trans-unit>
        <trans-unit id="d839e72a6966bc49a09991c75f6ebb8c0f577f86" translate="yes" xml:space="preserve">
          <source>An iterator that yields nothing.</source>
          <target state="translated">何も得られないイテレータ。</target>
        </trans-unit>
        <trans-unit id="5c4e0833b181576427135eb9c8df2d3b1200509f" translate="yes" xml:space="preserve">
          <source>An iterator that yields the current count and the element during iteration.</source>
          <target state="translated">現在のカウントと反復中の要素を返すイテレータ。</target>
        </trans-unit>
        <trans-unit id="13cc9cc84ea0ac8db6860e2d362f3768df8c56c8" translate="yes" xml:space="preserve">
          <source>An iterator that yields the literal escape code of a &lt;code&gt;char&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;char&lt;/code&gt; のリテラルエスケープコードを生成するイテレータ。</target>
        </trans-unit>
        <trans-unit id="f37b0b305dd49cedb47e6f8dfa5f3a2bdad3bf67" translate="yes" xml:space="preserve">
          <source>An iterator to maintain state while iterating another iterator.</source>
          <target state="translated">別のイテレータを反復しながら状態を維持するイテレータ。</target>
        </trans-unit>
        <trans-unit id="47ba4cac2215dd1a04b338eb0e4a94df69cf3c0f" translate="yes" xml:space="preserve">
          <source>An iterator visiting all elements in arbitrary order. The iterator element type is &lt;code&gt;&amp;amp;'a T&lt;/code&gt;.</source>
          <target state="translated">すべての要素を任意の順序で訪問する反復子。イテレーター要素のタイプは &lt;code&gt;&amp;amp;'a T&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="7550894b7d1bb85e45b801eaeed48efa989854c0" translate="yes" xml:space="preserve">
          <source>An iterator visiting all key-value pairs in arbitrary order, with mutable references to the values. The iterator element type is &lt;code&gt;(&amp;amp;'a K, &amp;amp;'a mut V)&lt;/code&gt;.</source>
          <target state="translated">すべてのキーと値のペアを任意の順序で訪問し、値への参照を変更できるイテレータ。イテレーター要素のタイプは &lt;code&gt;(&amp;amp;'a K, &amp;amp;'a mut V)&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="1b08b2653f7dcb8dc940ed24069740a24ab5b76a" translate="yes" xml:space="preserve">
          <source>An iterator visiting all key-value pairs in arbitrary order. The iterator element type is &lt;code&gt;(&amp;amp;'a K, &amp;amp;'a V)&lt;/code&gt;.</source>
          <target state="translated">すべてのキーと値のペアを任意の順序で訪問する反復子。イテレーター要素のタイプは &lt;code&gt;(&amp;amp;'a K, &amp;amp;'a V)&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="a52b26a20f6e5a2edebe10f6f90cf9507490a85c" translate="yes" xml:space="preserve">
          <source>An iterator visiting all keys in arbitrary order. The iterator element type is &lt;code&gt;&amp;amp;'a K&lt;/code&gt;.</source>
          <target state="translated">すべてのキーを任意の順序で訪問する反復子。イテレータ要素のタイプは &lt;code&gt;&amp;amp;'a K&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="cee3468b8b5e0fdd5a440c2d5df35c4c2db2ae90" translate="yes" xml:space="preserve">
          <source>An iterator visiting all values in arbitrary order. The iterator element type is &lt;code&gt;&amp;amp;'a V&lt;/code&gt;.</source>
          <target state="translated">任意の順序ですべての値を訪問する反復子。イテレータ要素のタイプは &lt;code&gt;&amp;amp;'a V&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="7ae307f212519994d8b694a5d942377f4aec4823" translate="yes" xml:space="preserve">
          <source>An iterator visiting all values mutably in arbitrary order. The iterator element type is &lt;code&gt;&amp;amp;'a mut V&lt;/code&gt;.</source>
          <target state="translated">すべての値を任意の順序で変更可能に訪問する反復子。イテレーター要素のタイプは &lt;code&gt;&amp;amp;'a mut V&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="211d7c1adc8a12b57341be994e857003e54c6bbd" translate="yes" xml:space="preserve">
          <source>An iterator where each iteration calls the provided closure &lt;code&gt;F: FnMut() -&amp;gt; Option&amp;lt;T&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">各反復が提供されたクロージャー &lt;code&gt;F: FnMut() -&amp;gt; Option&amp;lt;T&amp;gt;&lt;/code&gt; 呼び出すイテレーター。</target>
        </trans-unit>
        <trans-unit id="33d8e5b7da8d4676782754a628f4083ffd272c18" translate="yes" xml:space="preserve">
          <source>An iterator which uses a closure to determine if an element should be removed.</source>
          <target state="translated">クロージャを使用して要素を削除するかどうかを判断するイテレータ。</target>
        </trans-unit>
        <trans-unit id="c53ddbd1d3e296430ed20afa68efda72ca0ded32" translate="yes" xml:space="preserve">
          <source>An iterator with a &lt;code&gt;peek()&lt;/code&gt; that returns an optional reference to the next element.</source>
          <target state="translated">次の要素へのオプションの参照を返す &lt;code&gt;peek()&lt;/code&gt; を持つイテレータ。</target>
        </trans-unit>
        <trans-unit id="c9cd5154a20293338cfe2c0c0c884bc897a9a0cb" translate="yes" xml:space="preserve">
          <source>An new iterator where each successive item is computed based on the preceding one.</source>
          <target state="translated">各連続した項目が前の項目に基づいて計算される新しいイテレータ.</target>
        </trans-unit>
        <trans-unit id="a64664459e6bcefaf4f866fe61f4c89bbbc6e913" translate="yes" xml:space="preserve">
          <source>An non-ascii identifier was used in an invalid context.</source>
          <target state="translated">非 ASCII 識別子が無効なコンテキストで使用されました。</target>
        </trans-unit>
        <trans-unit id="767a832ec64e700730e273e825321e36a3ef86e1" translate="yes" xml:space="preserve">
          <source>An occupied entry.</source>
          <target state="translated">占有されたエントリ。</target>
        </trans-unit>
        <trans-unit id="678664bfa424da9fc0ca21e4760f29b4b952648d" translate="yes" xml:space="preserve">
          <source>An optional item</source>
          <target state="translated">オプション項目</target>
        </trans-unit>
        <trans-unit id="d7f5308e6f605cdab4dbb8b387f9c93de98d0922" translate="yes" xml:space="preserve">
          <source>An order is a total order if it is (for all &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;c&lt;/code&gt;):</source>
          <target state="translated">注文は、それが（ &lt;code&gt;a&lt;/code&gt; 、 &lt;code&gt;b&lt;/code&gt; 、および &lt;code&gt;c&lt;/code&gt; のすべてに対して）である場合、合計注文です。</target>
        </trans-unit>
        <trans-unit id="e7c75396d6933448cc7456d6beaf9cf648ea0ef5" translate="yes" xml:space="preserve">
          <source>An ordering where a compared value is equal to another.</source>
          <target state="translated">比較された値が別の値と等しい順序。</target>
        </trans-unit>
        <trans-unit id="09dba8210b3d0ce590a3a5f065b62a6a8ab493fb" translate="yes" xml:space="preserve">
          <source>An ordering where a compared value is greater than another.</source>
          <target state="translated">比較される値が他の値よりも大きい順序。</target>
        </trans-unit>
        <trans-unit id="a2c8ca4c96fc50eebfe4b351916be57d1bf56d8c" translate="yes" xml:space="preserve">
          <source>An ordering where a compared value is less than another.</source>
          <target state="translated">比較される値が他の値よりも小さい順序。</target>
        </trans-unit>
        <trans-unit id="38792f39e0fa160ba176220b302fc6518c1e2555" translate="yes" xml:space="preserve">
          <source>An owned permission to join on a thread (block on its termination).</source>
          <target state="translated">スレッドへの参加を許可する所有権(終了時にブロック)。</target>
        </trans-unit>
        <trans-unit id="8c3512dc7441f7c48feb0adfb2813ca8cbecd465" translate="yes" xml:space="preserve">
          <source>An owned, mutable path (akin to &lt;a href=&quot;../string/struct.string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">所有された変更可能なパス（&lt;a href=&quot;../string/struct.string&quot;&gt; &lt;code&gt;String&lt;/code&gt; に&lt;/a&gt;似ています）。</target>
        </trans-unit>
        <trans-unit id="e84205a36cc39374bcb7d05c1b1547f37b9b5189" translate="yes" xml:space="preserve">
          <source>An owning iterator over messages on a &lt;a href=&quot;struct.receiver&quot;&gt;&lt;code&gt;Receiver&lt;/code&gt;&lt;/a&gt;, created by &lt;strong&gt;Receiver::into_iter&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;Receiver :: into_iter&lt;/strong&gt;によって作成された、&lt;a href=&quot;struct.receiver&quot;&gt; &lt;code&gt;Receiver&lt;/code&gt; &lt;/a&gt;上のメッセージに対する所有イテレータ。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="83bd664b01b4716a8aced24a8192a6358972a99f" translate="yes" xml:space="preserve">
          <source>An owning iterator over the elements of a &lt;code&gt;BinaryHeap&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;BinaryHeap&lt;/code&gt; の要素に対する所有イテレータ。</target>
        </trans-unit>
        <trans-unit id="34718a674d09c2eb637513ac6f89289f300970ef" translate="yes" xml:space="preserve">
          <source>An owning iterator over the elements of a &lt;code&gt;LinkedList&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;LinkedList&lt;/code&gt; の要素に対する所有イテレータ。</target>
        </trans-unit>
        <trans-unit id="f6f353b2a400a09971f91285403f6b780ae991c4" translate="yes" xml:space="preserve">
          <source>An owning iterator over the elements of a &lt;code&gt;VecDeque&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;VecDeque&lt;/code&gt; の要素に対する所有イテレータ。</target>
        </trans-unit>
        <trans-unit id="77a86a6c2dd3031f17c5e8abfe6100f81887dd42" translate="yes" xml:space="preserve">
          <source>An owning iterator over the entries of a &lt;code&gt;BTreeMap&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;BTreeMap&lt;/code&gt; のエントリに対する所有イテレータ。</target>
        </trans-unit>
        <trans-unit id="209ab8cbe2152f0b0d82c7256751114f7cd068b9" translate="yes" xml:space="preserve">
          <source>An owning iterator over the entries of a &lt;code&gt;HashMap&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;HashMap&lt;/code&gt; のエントリに対する所有イテレータ。</target>
        </trans-unit>
        <trans-unit id="ef6f78f2a2dbde9b33ceeac921bd77fbb502b5bc" translate="yes" xml:space="preserve">
          <source>An owning iterator over the items of a &lt;code&gt;BTreeSet&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;BTreeSet&lt;/code&gt; のアイテムに対する所有イテレータ。</target>
        </trans-unit>
        <trans-unit id="427fdeccedc75e2673269080f0ce6c0924e6c1bd" translate="yes" xml:space="preserve">
          <source>An owning iterator over the items of a &lt;code&gt;HashSet&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;HashSet&lt;/code&gt; のアイテムに対する所有イテレータ。</target>
        </trans-unit>
        <trans-unit id="63f91fac0583c8f40d303b24662fb74f3439b187" translate="yes" xml:space="preserve">
          <source>An owning iterator over the keys of a &lt;code&gt;BTreeMap&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;BTreeMap&lt;/code&gt; のキーに対する所有イテレータ。</target>
        </trans-unit>
        <trans-unit id="3d2eac75b0f121647617969553f50d0b9466ca4f" translate="yes" xml:space="preserve">
          <source>An owning iterator over the keys of a &lt;code&gt;HashMap&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;HashMap&lt;/code&gt; のキーに対する所有イテレータ。</target>
        </trans-unit>
        <trans-unit id="c812167dc1a9620fc28974d42c5f815dace73059" translate="yes" xml:space="preserve">
          <source>An owning iterator over the values of a &lt;code&gt;BTreeMap&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;BTreeMap&lt;/code&gt; の値に対する所有イテレータ。</target>
        </trans-unit>
        <trans-unit id="e996a80994408e932109330c3a7b8f4f5821448e" translate="yes" xml:space="preserve">
          <source>An owning iterator over the values of a &lt;code&gt;HashMap&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;HashMap&lt;/code&gt; の値に対する所有イテレータ。</target>
        </trans-unit>
        <trans-unit id="b9b2d7fe27e12071feb7334cad3f7f83e9e84aa2" translate="yes" xml:space="preserve">
          <source>An unary operator was used on a type which doesn't implement it.</source>
          <target state="translated">単項演算子が実装されていない型で使用されました。</target>
        </trans-unit>
        <trans-unit id="dcb71e1bf306a3b27e4be98207d51ae66d320fdd" translate="yes" xml:space="preserve">
          <source>An unbounded range (&lt;code&gt;..&lt;/code&gt;).</source>
          <target state="translated">無制限の範囲（ &lt;code&gt;..&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="17e397882c6b5d98ce823af67a0207c6b4f0a351" translate="yes" xml:space="preserve">
          <source>An unboxed trait object was used as a return value.</source>
          <target state="translated">箱のない形質オブジェクトが戻り値として使用されました。</target>
        </trans-unit>
        <trans-unit id="77330b9c19314a31717caeb5c6b57d3f4259e03a" translate="yes" xml:space="preserve">
          <source>An unchecked assertion allows a program in an inconsistent state to keep running, which might have unexpected consequences but does not introduce unsafety as long as this only happens in safe code. The performance cost of assertions, however, is not measurable in general. Replacing &lt;a href=&quot;macro.assert&quot;&gt;&lt;code&gt;assert!&lt;/code&gt;&lt;/a&gt; with &lt;code&gt;debug_assert!&lt;/code&gt; is thus only encouraged after thorough profiling, and more importantly, only in safe code!</source>
          <target state="translated">チェックされていないアサーションにより、一貫性のない状態のプログラムが実行を継続できます。これは予期しない結果をもたらす可能性がありますが、これが安全なコードでのみ発生する限り、安全性を損なうことはありません。ただし、アサーションのパフォーマンスコストは、一般的に測定できません。&lt;a href=&quot;macro.assert&quot;&gt; &lt;code&gt;assert!&lt;/code&gt; &lt;/a&gt;置き換え！ &lt;code&gt;debug_assert!&lt;/code&gt; したがって、徹底的なプロファイリングの後でのみ、そしてさらに重要なことに、安全なコードでのみ推奨されます！</target>
        </trans-unit>
        <trans-unit id="3caad6b327abced5bae6f8ff205241ca33ed53ab" translate="yes" xml:space="preserve">
          <source>An unchecked assertion allows a program in an inconsistent state to keep running, which might have unexpected consequences but does not introduce unsafety as long as this only happens in safe code. The performance cost of assertions, is however, not measurable in general. Replacing &lt;a href=&quot;macro.assert&quot;&gt;&lt;code&gt;assert!&lt;/code&gt;&lt;/a&gt; with &lt;code&gt;debug_assert!&lt;/code&gt; is thus only encouraged after thorough profiling, and more importantly, only in safe code!</source>
          <target state="translated">チェックされていないアサーションにより、一貫性のない状態のプログラムを実行し続けることができます。これは予期しない結果をもたらす可能性がありますが、これが安全なコードでのみ発生する限り、安全ではありません。ただし、アサーションのパフォーマンスコストは一般に測定できません。&lt;a href=&quot;macro.assert&quot;&gt; &lt;code&gt;assert!&lt;/code&gt; &lt;/a&gt;置き換える！ &lt;code&gt;debug_assert!&lt;/code&gt; したがって、徹底的なプロファイリングの後にのみ、さらに重要なことに、安全なコードでのみ推奨されます！</target>
        </trans-unit>
        <trans-unit id="442287d37e019d0e550c26e6f3dfcfb70e25272a" translate="yes" xml:space="preserve">
          <source>An undeclared crate, module, or type was used.</source>
          <target state="translated">申告されていない木箱、モジュール、またはタイプが使用されました。</target>
        </trans-unit>
        <trans-unit id="490b1d248ac38d604233cacff667b31a463976df" translate="yes" xml:space="preserve">
          <source>An undeclared label was used.</source>
          <target state="translated">宣言されていないラベルが使用されていました。</target>
        </trans-unit>
        <trans-unit id="5cc74f4a7dec23f15c6176f5d92410a97be0cd49" translate="yes" xml:space="preserve">
          <source>An undeclared lifetime was used.</source>
          <target state="translated">宣言されていない寿命が使用されていました。</target>
        </trans-unit>
        <trans-unit id="fc0bdd57bc131e7f23a48af9227bf2c7b9e2b4dd" translate="yes" xml:space="preserve">
          <source>An undeclared type or module was used.</source>
          <target state="translated">未申告のタイプまたはモジュールが使用されました。</target>
        </trans-unit>
        <trans-unit id="62b209ea92b4732aa055c2148d6eb87f3bf6ae79" translate="yes" xml:space="preserve">
          <source>An undefined atomic operation function was declared.</source>
          <target state="translated">未定義のアトミック操作関数が宣言されました。</target>
        </trans-unit>
        <trans-unit id="edf946e9423b88dbc97c6f1ffa6e16764af6cd52" translate="yes" xml:space="preserve">
          <source>An underscore &lt;code&gt;_&lt;/code&gt; character has been used as the identifier for a lifetime.</source>
          <target state="translated">アンダースコア &lt;code&gt;_&lt;/code&gt; 文字は、有効期間の識別子として使用されています。</target>
        </trans-unit>
        <trans-unit id="5c74d6c9b38a67d2a5eb623d75e946df289a3fbc" translate="yes" xml:space="preserve">
          <source>An unknown &quot;kind&quot; was specified for a link attribute.</source>
          <target state="translated">リンク属性に未知の &quot;種類 &quot;が指定されました。</target>
        </trans-unit>
        <trans-unit id="2dbef161c3305374da24ca6e3ae9cdc7bdefe6b4" translate="yes" xml:space="preserve">
          <source>An unknown &quot;kind&quot; was specified for a link attribute. Erroneous code example:</source>
          <target state="translated">リンク属性に未知の &quot;種類&quot; が指定されました。誤ったコード例です。</target>
        </trans-unit>
        <trans-unit id="a5956e957dc8b784f0e077b9955dd790db201d80" translate="yes" xml:space="preserve">
          <source>An unknown argument was given to the &lt;code&gt;inline&lt;/code&gt; attribute.</source>
          <target state="translated">&lt;code&gt;inline&lt;/code&gt; 属性に不明な引数が指定されました。</target>
        </trans-unit>
        <trans-unit id="55c4e65153fb4fac3f59b06b3332f14a29b39777" translate="yes" xml:space="preserve">
          <source>An unknown external lang item was used.</source>
          <target state="translated">未知の外部言語項目が使用されました。</target>
        </trans-unit>
        <trans-unit id="9a99f6d07dc4d8ba35aa89128cc34d06dd11ce0f" translate="yes" xml:space="preserve">
          <source>An unknown external lang item was used. Erroneous code example:</source>
          <target state="translated">未知の外部言語項目が使用されました。誤ったコード例です。</target>
        </trans-unit>
        <trans-unit id="1356f6d3a3c2ce1216defe8b6863fd5e9393d5fa" translate="yes" xml:space="preserve">
          <source>An unknown field was specified into a structure.</source>
          <target state="translated">未知のフィールドが構造体に指定されていました。</target>
        </trans-unit>
        <trans-unit id="672bd73128faa09c7f440466e9f29739ad4de42d" translate="yes" xml:space="preserve">
          <source>An unknown field was specified into an enum's structure variant.</source>
          <target state="translated">未知のフィールドが enum の構造体バリアントに指定されました。</target>
        </trans-unit>
        <trans-unit id="bee5691463189269e4f427b52c0849d39e9df4f5" translate="yes" xml:space="preserve">
          <source>An unknown intrinsic function was declared.</source>
          <target state="translated">未知の固有関数が宣言されました。</target>
        </trans-unit>
        <trans-unit id="e8a840a4e189fb8e18f90b5fe877d384d51d1d3c" translate="yes" xml:space="preserve">
          <source>An unknown lint was used on the command line.</source>
          <target state="translated">コマンドラインで不明なリントが使用されていました。</target>
        </trans-unit>
        <trans-unit id="d472ec49c42739263d3ec941f6cf5b5468a2d3b2" translate="yes" xml:space="preserve">
          <source>An unknown meta item was used.</source>
          <target state="translated">未知のメタ項目が使用されていました。</target>
        </trans-unit>
        <trans-unit id="a940cccd136dc43c95bcfd2c10667fe77e672634" translate="yes" xml:space="preserve">
          <source>An unknown predicate was used inside the &lt;code&gt;cfg&lt;/code&gt; attribute.</source>
          <target state="translated">不明な述語が &lt;code&gt;cfg&lt;/code&gt; 属性内で使用されました。</target>
        </trans-unit>
        <trans-unit id="99aaced696882b10f70ccb01859e75fc7704670e" translate="yes" xml:space="preserve">
          <source>An unknown tool name was found in a scoped lint.</source>
          <target state="translated">スコープされたリントの中から未知の工具名が発見されました。</target>
        </trans-unit>
        <trans-unit id="676d0b3b83f48e6af11d16fc5aee8adc4d048290" translate="yes" xml:space="preserve">
          <source>An unknown tuple struct/variant has been used.</source>
          <target state="translated">未知のタプル struct/variant が使用されています。</target>
        </trans-unit>
        <trans-unit id="c12ae2fbe23adbaee9a27dcd9a18b88d8f9167df" translate="yes" xml:space="preserve">
          <source>An unnamed address:</source>
          <target state="translated">名前のない住所。</target>
        </trans-unit>
        <trans-unit id="91f0af616d741e6aae624d3d1dd86d853eef5383" translate="yes" xml:space="preserve">
          <source>An unnecessary type or const parameter was given in a type alias.</source>
          <target state="translated">不要な型または const パラメータが型のエイリアスで指定されました。</target>
        </trans-unit>
        <trans-unit id="f156b900d9fe99f8832687ac7404efd74f0ba00f" translate="yes" xml:space="preserve">
          <source>An unpoisoned &lt;a href=&quot;struct.once&quot;&gt;&lt;code&gt;Once&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">無毒の&lt;a href=&quot;struct.once&quot;&gt; &lt;code&gt;Once&lt;/code&gt; &lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="3386e5166859dc07663dec10855432efda42e389" translate="yes" xml:space="preserve">
          <source>An unpoisoned &lt;code&gt;Once&lt;/code&gt;:</source>
          <target state="translated">無毒な &lt;code&gt;Once&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="940487cb36b1ca715dc9f782d9f8a844e917518b" translate="yes" xml:space="preserve">
          <source>An unreachable label was used.</source>
          <target state="translated">届かないラベルが使われていました。</target>
        </trans-unit>
        <trans-unit id="9a03f5a8f224f5f2ce3d5df647878dfe5aac207b" translate="yes" xml:space="preserve">
          <source>An unresolved name was used.</source>
          <target state="translated">未解決の名前が使われていました。</target>
        </trans-unit>
        <trans-unit id="261553d92051fa692c480d6d0e6fd303bf5038fd" translate="yes" xml:space="preserve">
          <source>An unsafe trait was implemented without an unsafe implementation.</source>
          <target state="translated">安全でない形質は、安全でない実装をせずに実装しました。</target>
        </trans-unit>
        <trans-unit id="084105813293c7ee4385ace5ee9239e1a67b6d57" translate="yes" xml:space="preserve">
          <source>An unstable feature in &lt;code&gt;const&lt;/code&gt; contexts was used.</source>
          <target state="translated">&lt;code&gt;const&lt;/code&gt; コンテキストで不安定な機能が使用されました。</target>
        </trans-unit>
        <trans-unit id="c801b4c85f18e94f7cb6ce228ae449c345e89b49" translate="yes" xml:space="preserve">
          <source>An unstable feature was used.</source>
          <target state="translated">不安定な機能が使われていました。</target>
        </trans-unit>
        <trans-unit id="ad604b2507c78bd47c93ad249e197a918e7208ca" translate="yes" xml:space="preserve">
          <source>An unsupported representation was attempted on a zero-variant enum.</source>
          <target state="translated">サポートされていない表現がゼロ変数列挙で試みられました。</target>
        </trans-unit>
        <trans-unit id="999140d65b2dddb09bc1533f2a2a2de632081b87" translate="yes" xml:space="preserve">
          <source>Anatomy of a Rust Program</source>
          <target state="translated">ラストプログラムの解剖学</target>
        </trans-unit>
        <trans-unit id="f96afdd93db8b2e4f4aa8b97a7ac6e4f106649a9" translate="yes" xml:space="preserve">
          <source>Ancestors</source>
          <target state="translated">Ancestors</target>
        </trans-unit>
        <trans-unit id="a69185f73b3266ea2ea0196235a7920d98b23569" translate="yes" xml:space="preserve">
          <source>Ancestors::all</source>
          <target state="translated">Ancestors::all</target>
        </trans-unit>
        <trans-unit id="5d0f93422db0f668490adf089654ecece89c57a9" translate="yes" xml:space="preserve">
          <source>Ancestors::any</source>
          <target state="translated">Ancestors::any</target>
        </trans-unit>
        <trans-unit id="c4d070344a11e561f295e6e7e6205f761d5798b6" translate="yes" xml:space="preserve">
          <source>Ancestors::borrow</source>
          <target state="translated">Ancestors::borrow</target>
        </trans-unit>
        <trans-unit id="a84c8539090bc4c2974d99b05a787e636ebe0acb" translate="yes" xml:space="preserve">
          <source>Ancestors::borrow_mut</source>
          <target state="translated">Ancestors::borrow_mut</target>
        </trans-unit>
        <trans-unit id="334238f85474f459cc0ffaef3421caf90b07c6e6" translate="yes" xml:space="preserve">
          <source>Ancestors::by_ref</source>
          <target state="translated">Ancestors::by_ref</target>
        </trans-unit>
        <trans-unit id="6fdc4e3375706d83d8aecc92a22ee70bff5dfab4" translate="yes" xml:space="preserve">
          <source>Ancestors::chain</source>
          <target state="translated">Ancestors::chain</target>
        </trans-unit>
        <trans-unit id="dce0f9cae4b8d7222a0b11c873b249cd98da26b3" translate="yes" xml:space="preserve">
          <source>Ancestors::clone</source>
          <target state="translated">Ancestors::clone</target>
        </trans-unit>
        <trans-unit id="31848f144e07d27fc7390a8c92d56ab88474c213" translate="yes" xml:space="preserve">
          <source>Ancestors::clone_from</source>
          <target state="translated">Ancestors::clone_from</target>
        </trans-unit>
        <trans-unit id="35f7611233faafb5be9d7d385104097f21e72511" translate="yes" xml:space="preserve">
          <source>Ancestors::clone_into</source>
          <target state="translated">Ancestors::clone_into</target>
        </trans-unit>
        <trans-unit id="0d02f4a4459ad43a2bc9f83a20b48ce81eb5eefc" translate="yes" xml:space="preserve">
          <source>Ancestors::cloned</source>
          <target state="translated">Ancestors::cloned</target>
        </trans-unit>
        <trans-unit id="67ff55ec2d9537e58736a03fd50c337049b761f0" translate="yes" xml:space="preserve">
          <source>Ancestors::cmp</source>
          <target state="translated">Ancestors::cmp</target>
        </trans-unit>
        <trans-unit id="0d35d199d39196de0523350cd24a1241424fa231" translate="yes" xml:space="preserve">
          <source>Ancestors::collect</source>
          <target state="translated">Ancestors::collect</target>
        </trans-unit>
        <trans-unit id="4865b6ff2a1901685d10435c12cf071b254d3a62" translate="yes" xml:space="preserve">
          <source>Ancestors::copied</source>
          <target state="translated">Ancestors::copied</target>
        </trans-unit>
        <trans-unit id="f28d6b4a44e14f0d15c4f132d556116c210c1c84" translate="yes" xml:space="preserve">
          <source>Ancestors::count</source>
          <target state="translated">Ancestors::count</target>
        </trans-unit>
        <trans-unit id="a6a740680e9008614345c582b8e1985861829875" translate="yes" xml:space="preserve">
          <source>Ancestors::cycle</source>
          <target state="translated">Ancestors::cycle</target>
        </trans-unit>
        <trans-unit id="0810bcf20fe4de2312f283ad13e930eaa61b0c30" translate="yes" xml:space="preserve">
          <source>Ancestors::enumerate</source>
          <target state="translated">Ancestors::enumerate</target>
        </trans-unit>
        <trans-unit id="f443387bf4a86a6cc1330d9f2c4d3b913b1c1dd0" translate="yes" xml:space="preserve">
          <source>Ancestors::eq</source>
          <target state="translated">Ancestors::eq</target>
        </trans-unit>
        <trans-unit id="796eb87c3af9fac554be5d4ec57ca702d510701f" translate="yes" xml:space="preserve">
          <source>Ancestors::filter</source>
          <target state="translated">Ancestors::filter</target>
        </trans-unit>
        <trans-unit id="d1822e4ea409150f5e23e24201bc84ef25560137" translate="yes" xml:space="preserve">
          <source>Ancestors::filter_map</source>
          <target state="translated">Ancestors::filter_map</target>
        </trans-unit>
        <trans-unit id="1e6cc0ef677409077aa639becd452ada01ece8d8" translate="yes" xml:space="preserve">
          <source>Ancestors::find</source>
          <target state="translated">Ancestors::find</target>
        </trans-unit>
        <trans-unit id="657aafc8bbaf8304573fbc00e24419ba040782a9" translate="yes" xml:space="preserve">
          <source>Ancestors::find_map</source>
          <target state="translated">Ancestors::find_map</target>
        </trans-unit>
        <trans-unit id="beeb7e3fb0fbc04618a5300c980c6f59ed075dcd" translate="yes" xml:space="preserve">
          <source>Ancestors::flat_map</source>
          <target state="translated">Ancestors::flat_map</target>
        </trans-unit>
        <trans-unit id="47bd10eda5c1ca25f0cc303ef197cbc1220d1b53" translate="yes" xml:space="preserve">
          <source>Ancestors::flatten</source>
          <target state="translated">Ancestors::flatten</target>
        </trans-unit>
        <trans-unit id="a456cec1879b2b70a77233841a841755191a8a86" translate="yes" xml:space="preserve">
          <source>Ancestors::fmt</source>
          <target state="translated">Ancestors::fmt</target>
        </trans-unit>
        <trans-unit id="1f02f420430d3894ec9ecddf11dd94365e77ac19" translate="yes" xml:space="preserve">
          <source>Ancestors::fold</source>
          <target state="translated">Ancestors::fold</target>
        </trans-unit>
        <trans-unit id="3ca5818636166fd5b398f8e40a922c894b0abbb6" translate="yes" xml:space="preserve">
          <source>Ancestors::for_each</source>
          <target state="translated">Ancestors::for_each</target>
        </trans-unit>
        <trans-unit id="4264a030cb324bfbad2fa80a46e42c679803a0c3" translate="yes" xml:space="preserve">
          <source>Ancestors::from</source>
          <target state="translated">Ancestors::from</target>
        </trans-unit>
        <trans-unit id="32047f73315575a8e50a462155406bb910ceed17" translate="yes" xml:space="preserve">
          <source>Ancestors::fuse</source>
          <target state="translated">Ancestors::fuse</target>
        </trans-unit>
        <trans-unit id="41f1796019df27f1dc523c24819d1254f099c660" translate="yes" xml:space="preserve">
          <source>Ancestors::ge</source>
          <target state="translated">Ancestors::ge</target>
        </trans-unit>
        <trans-unit id="f1594f0c385b82f3427f45ed26a50d1dac4fa05e" translate="yes" xml:space="preserve">
          <source>Ancestors::gt</source>
          <target state="translated">Ancestors::gt</target>
        </trans-unit>
        <trans-unit id="dd54e2ff77b477361ff6376d5b04afaad6a7ef21" translate="yes" xml:space="preserve">
          <source>Ancestors::inspect</source>
          <target state="translated">Ancestors::inspect</target>
        </trans-unit>
        <trans-unit id="1bc8d1bb95f4aedebacf2a84051d097086c1cc75" translate="yes" xml:space="preserve">
          <source>Ancestors::into</source>
          <target state="translated">Ancestors::into</target>
        </trans-unit>
        <trans-unit id="6f7bdf57cf985a0498067e483576359d43c33000" translate="yes" xml:space="preserve">
          <source>Ancestors::into_iter</source>
          <target state="translated">Ancestors::into_iter</target>
        </trans-unit>
        <trans-unit id="e4f570f8f86838a0b2f0996de24967465582d845" translate="yes" xml:space="preserve">
          <source>Ancestors::is_sorted</source>
          <target state="translated">Ancestors::is_sorted</target>
        </trans-unit>
        <trans-unit id="8fa7773f21437bd02461103d0f128fe2f328180a" translate="yes" xml:space="preserve">
          <source>Ancestors::is_sorted_by</source>
          <target state="translated">Ancestors::is_sorted_by</target>
        </trans-unit>
        <trans-unit id="da156b45c81720439526b87f492a4b80dde53f7a" translate="yes" xml:space="preserve">
          <source>Ancestors::is_sorted_by_key</source>
          <target state="translated">Ancestors::is_sorted_by_key</target>
        </trans-unit>
        <trans-unit id="6bf6d1d6ec433eb2498f88c1821e2e8d204490c9" translate="yes" xml:space="preserve">
          <source>Ancestors::last</source>
          <target state="translated">Ancestors::last</target>
        </trans-unit>
        <trans-unit id="6182ceed3235394e0830f635f2568ba50e3e7bb2" translate="yes" xml:space="preserve">
          <source>Ancestors::le</source>
          <target state="translated">Ancestors::le</target>
        </trans-unit>
        <trans-unit id="ba00a013a0f8fd57e29b01f66afccf088e1d0023" translate="yes" xml:space="preserve">
          <source>Ancestors::lt</source>
          <target state="translated">Ancestors::lt</target>
        </trans-unit>
        <trans-unit id="b588193780984cc7ebdb2f28a2c09aad1660160a" translate="yes" xml:space="preserve">
          <source>Ancestors::map</source>
          <target state="translated">Ancestors::map</target>
        </trans-unit>
        <trans-unit id="aa73ed60029c8667bd3541a6cd43b17d298a34bc" translate="yes" xml:space="preserve">
          <source>Ancestors::max</source>
          <target state="translated">Ancestors::max</target>
        </trans-unit>
        <trans-unit id="ab6d430bbae01a6904e8639546e74aa743ec4546" translate="yes" xml:space="preserve">
          <source>Ancestors::max_by</source>
          <target state="translated">Ancestors::max_by</target>
        </trans-unit>
        <trans-unit id="3f9a117ba2cfb9ce3093457ddf5a2896b25c3699" translate="yes" xml:space="preserve">
          <source>Ancestors::max_by_key</source>
          <target state="translated">Ancestors::max_by_key</target>
        </trans-unit>
        <trans-unit id="d86ac9020bc2e94f4de10dd0521bc6648555300a" translate="yes" xml:space="preserve">
          <source>Ancestors::min</source>
          <target state="translated">Ancestors::min</target>
        </trans-unit>
        <trans-unit id="d1a3237b0f7d1400e70026876d1a9e1edfd954fb" translate="yes" xml:space="preserve">
          <source>Ancestors::min_by</source>
          <target state="translated">Ancestors::min_by</target>
        </trans-unit>
        <trans-unit id="4a76ef60a157a414e53965e7b20bdb80a42a93c5" translate="yes" xml:space="preserve">
          <source>Ancestors::min_by_key</source>
          <target state="translated">Ancestors::min_by_key</target>
        </trans-unit>
        <trans-unit id="5d2760f02e37aabc523ea5766e6897c5ccc56a0b" translate="yes" xml:space="preserve">
          <source>Ancestors::ne</source>
          <target state="translated">Ancestors::ne</target>
        </trans-unit>
        <trans-unit id="94b5fbd4a6186842bbae09888725d74af29ff76c" translate="yes" xml:space="preserve">
          <source>Ancestors::next</source>
          <target state="translated">Ancestors::next</target>
        </trans-unit>
        <trans-unit id="061044f738cb0378794d00307372b84bda535007" translate="yes" xml:space="preserve">
          <source>Ancestors::nth</source>
          <target state="translated">Ancestors::nth</target>
        </trans-unit>
        <trans-unit id="104a8aab4cf5a11201b887398168f2f5e1f87087" translate="yes" xml:space="preserve">
          <source>Ancestors::partial_cmp</source>
          <target state="translated">Ancestors::partial_cmp</target>
        </trans-unit>
        <trans-unit id="bed7abfd1f96e21405eb173c4d15c03b456d92a5" translate="yes" xml:space="preserve">
          <source>Ancestors::partition</source>
          <target state="translated">Ancestors::partition</target>
        </trans-unit>
        <trans-unit id="84cd0d32c4daeda367ba0a2ae2e2b6a7ff4841da" translate="yes" xml:space="preserve">
          <source>Ancestors::peekable</source>
          <target state="translated">Ancestors::peekable</target>
        </trans-unit>
        <trans-unit id="b4ddc60ef630227f7ade5b8c560fef259500316e" translate="yes" xml:space="preserve">
          <source>Ancestors::position</source>
          <target state="translated">Ancestors::position</target>
        </trans-unit>
        <trans-unit id="7a31ee815f86cdd427869f86ea4e16e837ac74a5" translate="yes" xml:space="preserve">
          <source>Ancestors::product</source>
          <target state="translated">Ancestors::product</target>
        </trans-unit>
        <trans-unit id="b560f4cdd9c918e68c647f28819fc526f4443425" translate="yes" xml:space="preserve">
          <source>Ancestors::rev</source>
          <target state="translated">Ancestors::rev</target>
        </trans-unit>
        <trans-unit id="2d6150b963da3a5f8bb4fbcf3bede9ac1d149eac" translate="yes" xml:space="preserve">
          <source>Ancestors::rposition</source>
          <target state="translated">Ancestors::rposition</target>
        </trans-unit>
        <trans-unit id="33695d4fc7bd02cc81076a7f065f59ae331ce9d8" translate="yes" xml:space="preserve">
          <source>Ancestors::scan</source>
          <target state="translated">Ancestors::scan</target>
        </trans-unit>
        <trans-unit id="a71e116d1152775af982054ee8766888b8c17bf5" translate="yes" xml:space="preserve">
          <source>Ancestors::size_hint</source>
          <target state="translated">Ancestors::size_hint</target>
        </trans-unit>
        <trans-unit id="1492747daf21eb6d17932ae78e4e1bb6900ec817" translate="yes" xml:space="preserve">
          <source>Ancestors::skip</source>
          <target state="translated">Ancestors::skip</target>
        </trans-unit>
        <trans-unit id="7ccb1c50d003cbcf82f746c7c89b476d0db40ef9" translate="yes" xml:space="preserve">
          <source>Ancestors::skip_while</source>
          <target state="translated">Ancestors::skip_while</target>
        </trans-unit>
        <trans-unit id="2d680c75e7e0a20bba67113ba634c0b9819ec275" translate="yes" xml:space="preserve">
          <source>Ancestors::step_by</source>
          <target state="translated">Ancestors::step_by</target>
        </trans-unit>
        <trans-unit id="bb4081cc4c0735468e080f3f00abdd7bfc4c7b73" translate="yes" xml:space="preserve">
          <source>Ancestors::sum</source>
          <target state="translated">Ancestors::sum</target>
        </trans-unit>
        <trans-unit id="b184ac7bf98e724a647631566c8e7b44261ba11d" translate="yes" xml:space="preserve">
          <source>Ancestors::take</source>
          <target state="translated">Ancestors::take</target>
        </trans-unit>
        <trans-unit id="551d6d8baae9a0ead4f49097f5951591191f29fd" translate="yes" xml:space="preserve">
          <source>Ancestors::take_while</source>
          <target state="translated">Ancestors::take_while</target>
        </trans-unit>
        <trans-unit id="f38b2d2e57427d6c5d34e24a9e37978f181043c7" translate="yes" xml:space="preserve">
          <source>Ancestors::to_owned</source>
          <target state="translated">Ancestors::to_owned</target>
        </trans-unit>
        <trans-unit id="bd8e948ee34c84cdc8f1385bf9b2d83abdbf9fb4" translate="yes" xml:space="preserve">
          <source>Ancestors::try_fold</source>
          <target state="translated">Ancestors::try_fold</target>
        </trans-unit>
        <trans-unit id="46ad3f23b6a14805c5bb02a0abccbaa9ad1f0c58" translate="yes" xml:space="preserve">
          <source>Ancestors::try_for_each</source>
          <target state="translated">Ancestors::try_for_each</target>
        </trans-unit>
        <trans-unit id="f18ea48cefb527612333927e42f98b5493e80a96" translate="yes" xml:space="preserve">
          <source>Ancestors::try_from</source>
          <target state="translated">Ancestors::try_from</target>
        </trans-unit>
        <trans-unit id="f07951de2fcfeba585ae159316c166c38d8606b4" translate="yes" xml:space="preserve">
          <source>Ancestors::try_into</source>
          <target state="translated">Ancestors::try_into</target>
        </trans-unit>
        <trans-unit id="0008829b37e7881a29a429bd8ff5a7a5ef753374" translate="yes" xml:space="preserve">
          <source>Ancestors::type_id</source>
          <target state="translated">Ancestors::type_id</target>
        </trans-unit>
        <trans-unit id="04f137aff1969f866b7d2666a9252de9e0efa21b" translate="yes" xml:space="preserve">
          <source>Ancestors::unzip</source>
          <target state="translated">Ancestors::unzip</target>
        </trans-unit>
        <trans-unit id="55dbfc2c3d770eaac08b3c73d87bccce57c4f78d" translate="yes" xml:space="preserve">
          <source>Ancestors::zip</source>
          <target state="translated">Ancestors::zip</target>
        </trans-unit>
        <trans-unit id="a01e33f4dcdb6ba1ae9f34a97cf8f6deeedf1a8d" translate="yes" xml:space="preserve">
          <source>And</source>
          <target state="translated">And</target>
        </trans-unit>
        <trans-unit id="42b71964be13234f4cbc3e386af8045e5f37b66e" translate="yes" xml:space="preserve">
          <source>And &lt;em&gt;src/front_of_house.rs&lt;/em&gt; gets the definitions from the body of the &lt;code&gt;front_of_house&lt;/code&gt; module, as shown in Listing 7-22.</source>
          <target state="translated">そして、&lt;em&gt;SRC / front_of_house.rsは、&lt;/em&gt;本体から定義を取得 &lt;code&gt;front_of_house&lt;/code&gt; のリスト7-22に示すように、モジュール。</target>
        </trans-unit>
        <trans-unit id="a66dda047400c5c52222e76fafe04295868d79a8" translate="yes" xml:space="preserve">
          <source>And a very common source of output is standard output:</source>
          <target state="translated">そして、ごく一般的な出力源は標準出力です。</target>
        </trans-unit>
        <trans-unit id="5cd52670a2b07449cbe1bd4abb403c682ccaf168" translate="yes" xml:space="preserve">
          <source>And finally, for the last example, only &lt;code&gt;Box&amp;lt;Self&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;amp;Self&lt;/code&gt;, &lt;code&gt;Self&lt;/code&gt;, or &lt;code&gt;&amp;amp;mut Self&lt;/code&gt; work as explicit self parameters. Example:</source>
          <target state="translated">そして最後に、最後の例では、 &lt;code&gt;Box&amp;lt;Self&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&amp;amp;Self&lt;/code&gt; 、 &lt;code&gt;Self&lt;/code&gt; 、または &lt;code&gt;&amp;amp;mut Self&lt;/code&gt; のみが明示的な自己パラメーターとして機能します。例：</target>
        </trans-unit>
        <trans-unit id="b91a984e8eba980f8ed5afc44476d8d32720a1d5" translate="yes" xml:space="preserve">
          <source>And finally, let&amp;rsquo;s make sure that we don&amp;rsquo;t get any lines when we search for a word that isn&amp;rsquo;t anywhere in the poem, such as &amp;ldquo;monomorphization&amp;rdquo;:</source>
          <target state="translated">そして最後に、詩のどこにもない単語を検索するときに、「モノモーフィゼーション」などのように、行を取得しないようにします。</target>
        </trans-unit>
        <trans-unit id="8ddbbced7930dcaf198948383ed803d74e9323cf" translate="yes" xml:space="preserve">
          <source>And finally, the standard library exports a number of standard macros, and &lt;a href=&quot;#macros&quot;&gt;lists them on this page&lt;/a&gt; (technically, not all of the standard macros are defined by the standard library - some are defined by the compiler - but they are documented here the same). Like the prelude, the standard macros are imported by default into all crates.</source>
          <target state="translated">そして最後に、標準ライブラリはいくつかの標準マクロをエクスポート&lt;a href=&quot;#macros&quot;&gt;し、このページにリストします&lt;/a&gt;（技術的には、すべての標準マクロが標準ライブラリによって定義されているわけではありません-一部はコンパイラによって定義されています-それらはここでも同じようにドキュメント化されています）。 。プレリュードと同様に、標準マクロはデフォルトですべてのクレートにインポートされます。</target>
        </trans-unit>
        <trans-unit id="01c604c6cbed200d9271efd93c6961cdbaa99ebc" translate="yes" xml:space="preserve">
          <source>And now let's give working examples:</source>
          <target state="translated">そして、ここでは実際に働いている例を挙げてみましょう。</target>
        </trans-unit>
        <trans-unit id="076add01b447af4a01e4ff6b95c8cd6d23f8bbbe" translate="yes" xml:space="preserve">
          <source>And now some working examples:</source>
          <target state="translated">そして今、いくつかの作業例をご紹介します。</target>
        </trans-unit>
        <trans-unit id="3e0adb51e88db164baaa3fd268ad64b534eb5476" translate="yes" xml:space="preserve">
          <source>And so on.</source>
          <target state="translated">といった感じで。</target>
        </trans-unit>
        <trans-unit id="965c5135f65b1edbef655afbf975cd109690bf20" translate="yes" xml:space="preserve">
          <source>And so, our final result, &lt;code&gt;6&lt;/code&gt;.</source>
          <target state="translated">そして、最終的な結果は &lt;code&gt;6&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="8576d009cd19a7310431c770ccd6d0477a9a38f5" translate="yes" xml:space="preserve">
          <source>And the expected output would look like the following, because both dimensions of &lt;code&gt;rect2&lt;/code&gt; are smaller than the dimensions of &lt;code&gt;rect1&lt;/code&gt; but &lt;code&gt;rect3&lt;/code&gt; is wider than &lt;code&gt;rect1&lt;/code&gt;:</source>
          <target state="translated">両方の寸法いるためと予想される出力は、次のようになり &lt;code&gt;rect2&lt;/code&gt; の寸法よりも小さい &lt;code&gt;rect1&lt;/code&gt; が、 &lt;code&gt;rect3&lt;/code&gt; がより広くなっている &lt;code&gt;rect1&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="304a9abb7c8dbb46b1cac5f34e7d81eb70527d19" translate="yes" xml:space="preserve">
          <source>And the following is the same example, except using &lt;a href=&quot;generics#where-clauses&quot;&gt;where clauses&lt;/a&gt;.</source>
          <target state="translated">また、次の例も同じですが、&lt;a href=&quot;generics#where-clauses&quot;&gt;where句&lt;/a&gt;を使用しています。</target>
        </trans-unit>
        <trans-unit id="913d407459e0226b150e7a70e74b4001bb096c87" translate="yes" xml:space="preserve">
          <source>And then usage on the derive macro on a struct:</source>
          <target state="translated">そして、構造体上での派生マクロの使用法。</target>
        </trans-unit>
        <trans-unit id="16869e8d4badcf1212b889f654db64e52cba8e49" translate="yes" xml:space="preserve">
          <source>And then using said derive macro:</source>
          <target state="translated">そして、その導出マクロを使って</target>
        </trans-unit>
        <trans-unit id="fde456d658fb04a2082b8789148df9b0dd8dabdb" translate="yes" xml:space="preserve">
          <source>And then we use it a binary crate to print &quot;42&quot; to standard output.</source>
          <target state="translated">そして、それをバイナリクレートにして「42」を標準出力に出力しています。</target>
        </trans-unit>
        <trans-unit id="57be02e986031e930e9bf37db6620140ea92c664" translate="yes" xml:space="preserve">
          <source>And then we use it in a binary crate to print &quot;42&quot; to standard output.</source>
          <target state="translated">そして、それをバイナリークレートで使って「42」を標準出力に出力しています。</target>
        </trans-unit>
        <trans-unit id="843c5d94071a4fae0f20d3e75ea70e29673c03d4" translate="yes" xml:space="preserve">
          <source>And we can call this function with either variant:</source>
          <target state="translated">そして、この関数をどちらかのバリアントで呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="406aea8920a159db743c7e055df50170c501f68e" translate="yes" xml:space="preserve">
          <source>And we&amp;rsquo;re done&amp;mdash;all of Listing 17-11 now works! We&amp;rsquo;ve implemented the state pattern with the rules of the blog post workflow. The logic related to the rules lives in the state objects rather than being scattered throughout &lt;code&gt;Post&lt;/code&gt;.</source>
          <target state="translated">これで完了です。リスト17-11のすべてが機能するようになりました。ブログ投稿ワークフローのルールを使用して状態パターンを実装しました。ルールに関連するロジックは、 &lt;code&gt;Post&lt;/code&gt; 全体に分散するのではなく、状態オブジェクトに存在します。</target>
        </trans-unit>
        <trans-unit id="d71a2256704824ddf84d5c0504e7d9d40555e056" translate="yes" xml:space="preserve">
          <source>And you make a hard link of the program:</source>
          <target state="translated">そして、プログラムのハードリンクを作るんですね。</target>
        </trans-unit>
        <trans-unit id="1a652f499d8171d97dc8db68df0dbf0a99d7c3f2" translate="yes" xml:space="preserve">
          <source>AndAnd</source>
          <target state="translated">AndAnd</target>
        </trans-unit>
        <trans-unit id="bcffbb2710fb4ff9f2236988e5b2ed04ecff3723" translate="yes" xml:space="preserve">
          <source>AndEq</source>
          <target state="translated">AndEq</target>
        </trans-unit>
        <trans-unit id="c4af9f801ba386b4d95b5962fd0aee793823a0c6" translate="yes" xml:space="preserve">
          <source>Anonymous type parameters</source>
          <target state="translated">匿名型パラメータ</target>
        </trans-unit>
        <trans-unit id="f739dc0ff02bf7ebdbbaf543c53bc8d5f32aa9b9" translate="yes" xml:space="preserve">
          <source>Another aspect commonly associated with OOP is the idea of &lt;em&gt;encapsulation&lt;/em&gt;, which means that the implementation details of an object aren&amp;rsquo;t accessible to code using that object. Therefore, the only way to interact with an object is through its public API; code using the object shouldn&amp;rsquo;t be able to reach into the object&amp;rsquo;s internals and change data or behavior directly. This enables the programmer to change and refactor an object&amp;rsquo;s internals without needing to change the code that uses the object.</source>
          <target state="translated">一般にOOPに関連するもう1つの側面は、&lt;em&gt;カプセル化&lt;/em&gt;の概念です。つまり、オブジェクトの実装の詳細には、そのオブジェクトを使用するコードからアクセスできません。したがって、オブジェクトと対話する唯一の方法は、そのパブリックAPIを使用することです。オブジェクトを使用するコードは、オブジェクトの内部に到達して、データや動作を直接変更できないようにする必要があります。これにより、プログラマは、オブジェクトを使用するコードを変更する必要なく、オブジェクトの内部を変更およびリファクタリングできます。</target>
        </trans-unit>
        <trans-unit id="3244c196f26eb3ebda5753ab0aa6df5308b053cc" translate="yes" xml:space="preserve">
          <source>Another case that causes this error is when a type is imported into a parent module. To fix this, you can follow the suggestion and use File directly or &lt;code&gt;use super::File;&lt;/code&gt; which will import the types from the parent namespace. An example that causes this error is below:</source>
          <target state="translated">このエラーの原因となるもう1つのケースは、型が親モジュールにインポートされた場合です。これを修正するには、提案に従ってFileを直接 &lt;code&gt;use super::File;&lt;/code&gt; するか、super :: Fileを使用します。親名前空間から型をインポートします。このエラーの原因となる例を以下に示します。</target>
        </trans-unit>
        <trans-unit id="f5177285c1540f1a230a9212d6ad08c740059bb0" translate="yes" xml:space="preserve">
          <source>Another case where this error is emitted is when a value is expected, but something else is found:</source>
          <target state="translated">このエラーが出るもう一つのケースは、値が期待されていたのに何か別のものが見つかった場合です。</target>
        </trans-unit>
        <trans-unit id="583bae5ce904e4cf097b6105871c304a4243a347" translate="yes" xml:space="preserve">
          <source>Another common use case for hash maps is to look up a key&amp;rsquo;s value and then update it based on the old value. For instance, Listing 8-26 shows code that counts how many times each word appears in some text. We use a hash map with the words as keys and increment the value to keep track of how many times we&amp;rsquo;ve seen that word. If it&amp;rsquo;s the first time we&amp;rsquo;ve seen a word, we&amp;rsquo;ll first insert the value 0.</source>
          <target state="translated">ハッシュマップのもう1つの一般的な使用例は、キーの値を検索し、古い値に基づいて更新することです。たとえば、リスト8-26は、各単語がテキストに出現する回数をカウントするコードを示しています。単語をキーとしてハッシュマップを使用し、値を増分して、その単語を何回目にしたかを追跡します。単語を初めて見た場合は、最初に値0を挿入します。</target>
        </trans-unit>
        <trans-unit id="6faac33ab3de2071db8e2f1ae3893ca39a492717" translate="yes" xml:space="preserve">
          <source>Another common way to evaluate an iterator is to use the &lt;a href=&quot;trait.iterator#method.collect&quot;&gt;&lt;code&gt;collect&lt;/code&gt;&lt;/a&gt; method to produce a new collection.</source>
          <target state="translated">イテレータを評価するもう1つの一般的な方法は、&lt;a href=&quot;trait.iterator#method.collect&quot;&gt; &lt;code&gt;collect&lt;/code&gt; &lt;/a&gt;メソッドを使用して新しいコレクションを作成することです。</target>
        </trans-unit>
        <trans-unit id="dc4154c9de58b2e0fcab49a95a24b663a485fc7b" translate="yes" xml:space="preserve">
          <source>Another crate that depends on this library would need &lt;code&gt;use&lt;/code&gt; statements that bring the items from &lt;code&gt;art&lt;/code&gt; into scope, specifying the module structure that&amp;rsquo;s currently defined. Listing 14-4 shows an example of a crate that uses the &lt;code&gt;PrimaryColor&lt;/code&gt; and &lt;code&gt;mix&lt;/code&gt; items from the &lt;code&gt;art&lt;/code&gt; crate:</source>
          <target state="translated">このライブラリに依存する別のクレートでは、 &lt;code&gt;art&lt;/code&gt; のアイテムをスコープに入れ、現在定義されているモジュール構造を指定 &lt;code&gt;use&lt;/code&gt; ステートメントを使用する必要があります。リスト14-4は、 &lt;code&gt;PrimaryColor&lt;/code&gt; と &lt;code&gt;art&lt;/code&gt; クレートの &lt;code&gt;mix&lt;/code&gt; アイテムを使用するクレートの例を示しています。</target>
        </trans-unit>
        <trans-unit id="36e9fb79f8131b77a6b5deaea1a5127794ef21b6" translate="yes" xml:space="preserve">
          <source>Another data type that does not have ownership is the &lt;em&gt;slice&lt;/em&gt;. Slices let you reference a contiguous sequence of elements in a collection rather than the whole collection.</source>
          <target state="translated">所有権を持たないもう1つのデータ型は&lt;em&gt;スライス&lt;/em&gt;です。スライスを使用すると、コレクション全体ではなく、コレクション内の連続した要素のシーケンスを参照できます。</target>
        </trans-unit>
        <trans-unit id="2188fdee49af653aee0e28e4ac63dee8849194f0" translate="yes" xml:space="preserve">
          <source>Another detail to note is that Rust can&amp;rsquo;t protect you from all kinds of logic errors when you use &lt;code&gt;Mutex&amp;lt;T&amp;gt;&lt;/code&gt;. Recall in Chapter 15 that using &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; came with the risk of creating reference cycles, where two &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; values refer to each other, causing memory leaks. Similarly, &lt;code&gt;Mutex&amp;lt;T&amp;gt;&lt;/code&gt; comes with the risk of creating &lt;em&gt;deadlocks&lt;/em&gt;. These occur when an operation needs to lock two resources and two threads have each acquired one of the locks, causing them to wait for each other forever. If you&amp;rsquo;re interested in deadlocks, try creating a Rust program that has a deadlock; then research deadlock mitigation strategies for mutexes in any language and have a go at implementing them in Rust. The standard library API documentation for &lt;code&gt;Mutex&amp;lt;T&amp;gt;&lt;/code&gt; and &lt;code&gt;MutexGuard&lt;/code&gt; offers useful information.</source>
          <target state="translated">もう1つ注意すべき点は、Ruteは &lt;code&gt;Mutex&amp;lt;T&amp;gt;&lt;/code&gt; を使用する場合、あらゆる種類の論理エラーから保護できるわけではないということです。第15章で、 &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; を使用すると、2つの &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; 値が相互に参照し、メモリリークを引き起こす参照サイクルが作成されるリスクがあったことを思い出してください。同様に、 &lt;code&gt;Mutex&amp;lt;T&amp;gt;&lt;/code&gt; は&lt;em&gt;デッドロックが発生&lt;/em&gt;するリスクがあります。&lt;em&gt;&lt;/em&gt;。これらは、操作が2つのリソースをロックする必要があり、2つのスレッドがそれぞれロックの1つを取得している場合に発生します。デッドロックに興味がある場合は、デッドロックを持つRustプログラムを作成してみてください。次に、ミューテックスのデッドロック緩和戦略を任意の言語で調査し、それらをRustに実装します。 &lt;code&gt;Mutex&amp;lt;T&amp;gt;&lt;/code&gt; および &lt;code&gt;MutexGuard&lt;/code&gt; の標準ライブラリAPIドキュメントには、役立つ情報が含まれています。</target>
        </trans-unit>
        <trans-unit id="a89f510396bf7e7d6ce47105d5094f9ffdc43c0a" translate="yes" xml:space="preserve">
          <source>Another difference between constants and static variables is that static variables can be mutable. Accessing and modifying mutable static variables is &lt;em&gt;unsafe&lt;/em&gt;. Listing 19-10 shows how to declare, access, and modify a mutable static variable named &lt;code&gt;COUNTER&lt;/code&gt;.</source>
          <target state="translated">定数と静的変数のもう1つの違いは、静的変数が変更可能になる可能性があることです。変更可能な静的変数へのアクセスと変更は&lt;em&gt;安全で&lt;/em&gt;はあり&lt;em&gt;ません&lt;/em&gt;。リスト19-10は、 &lt;code&gt;COUNTER&lt;/code&gt; という名前の変更可能な静的変数を宣言、アクセス、変更する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="7e6b390982d432e5d51ecddfefa741ac598bed4a" translate="yes" xml:space="preserve">
          <source>Another downside is that we&amp;rsquo;ve duplicated some logic. To eliminate some of the duplication, we might try to make default implementations for the &lt;code&gt;request_review&lt;/code&gt; and &lt;code&gt;approve&lt;/code&gt; methods on the &lt;code&gt;State&lt;/code&gt; trait that return &lt;code&gt;self&lt;/code&gt;; however, this would violate object safety, because the trait doesn&amp;rsquo;t know what the concrete &lt;code&gt;self&lt;/code&gt; will be exactly. We want to be able to use &lt;code&gt;State&lt;/code&gt; as a trait object, so we need its methods to be object safe.</source>
          <target state="translated">もう1つの欠点は、ロジックが重複していることです。重複の一部を排除するために、 &lt;code&gt;request_review&lt;/code&gt; のデフォルト実装を作成し、 &lt;code&gt;State&lt;/code&gt; トレイトで &lt;code&gt;self&lt;/code&gt; を返すメソッドを &lt;code&gt;approve&lt;/code&gt; しようとする場合があります。ただし、特性は具体的な &lt;code&gt;self&lt;/code&gt; が正確に何であるかを知らないため、これはオブジェクトの安全性に違反します。 &lt;code&gt;State&lt;/code&gt; を特性オブジェクトとして使用できるようにしたいので、そのメソッドはオブジェクトセーフである必要があります。</target>
        </trans-unit>
        <trans-unit id="0b90ca84780d33c44fc3e74f14be69eb7fd048f1" translate="yes" xml:space="preserve">
          <source>Another erroneous code example:</source>
          <target state="translated">別の誤ったコード例です。</target>
        </trans-unit>
        <trans-unit id="b9c6fc1e93014c21a06c17d750322f830024d1b0" translate="yes" xml:space="preserve">
          <source>Another example of a complex NT is &lt;code&gt;$(hi $e:expr ;)+&lt;/code&gt;, which matches any fragment of the form &lt;code&gt;hi &amp;lt;expr&amp;gt;; hi &amp;lt;expr&amp;gt;; ...&lt;/code&gt; where &lt;code&gt;hi &amp;lt;expr&amp;gt;;&lt;/code&gt; occurs at least once. Note that this complex NT does not have a dedicated separator token.</source>
          <target state="translated">複雑なNTのもう1つの例は &lt;code&gt;$(hi $e:expr ;)+&lt;/code&gt; 、これは &lt;code&gt;hi &amp;lt;expr&amp;gt;; hi &amp;lt;expr&amp;gt;; ...&lt;/code&gt; 形式のフラグメントに一致します。こんにちは&amp;lt;expr&amp;gt;; ...ここで &lt;code&gt;hi &amp;lt;expr&amp;gt;;&lt;/code&gt; 少なくとも1回発生します。この複雑なNTには専用の分離トークンがないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="7ec0f590b55aa6269d2b833239d2434dfe2c8db0" translate="yes" xml:space="preserve">
          <source>Another example of a non-&lt;code&gt;Sync&lt;/code&gt; type is the reference-counting pointer &lt;a href=&quot;../rc/struct.rc&quot;&gt;&lt;code&gt;Rc&lt;/code&gt;&lt;/a&gt;. Given any reference &lt;a href=&quot;../rc/struct.rc&quot;&gt;&lt;code&gt;&amp;amp;Rc&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;, you can clone a new &lt;a href=&quot;../rc/struct.rc&quot;&gt;&lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;, modifying the reference counts in a non-atomic way.</source>
          <target state="translated">&lt;code&gt;Sync&lt;/code&gt; タイプの別の例は、参照カウントポインタ&lt;a href=&quot;../rc/struct.rc&quot;&gt; &lt;code&gt;Rc&lt;/code&gt; &lt;/a&gt;です。任意の参照&lt;a href=&quot;../rc/struct.rc&quot;&gt; &lt;code&gt;&amp;amp;Rc&amp;lt;T&amp;gt;&lt;/code&gt; &lt;/a&gt;与えられると、新しい&lt;a href=&quot;../rc/struct.rc&quot;&gt; &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; &lt;/a&gt;クローンを作成して、非アトミックな方法で参照カウントを変更できます。</target>
        </trans-unit>
        <trans-unit id="93c5ab10f51e34387707bf7df6173ca28d162973" translate="yes" xml:space="preserve">
          <source>Another example of a non-&lt;code&gt;Sync&lt;/code&gt; type is the reference-counting pointer &lt;a href=&quot;../rc/struct.rc&quot;&gt;&lt;code&gt;rc::Rc&lt;/code&gt;&lt;/a&gt;. Given any reference &lt;a href=&quot;../rc/struct.rc&quot;&gt;&lt;code&gt;&amp;amp;Rc&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;, you can clone a new &lt;a href=&quot;../rc/struct.rc&quot;&gt;&lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;, modifying the reference counts in a non-atomic way.</source>
          <target state="translated">&lt;code&gt;Sync&lt;/code&gt; タイプの別の例は、参照カウントポインター&lt;a href=&quot;../rc/struct.rc&quot;&gt; &lt;code&gt;rc::Rc&lt;/code&gt; &lt;/a&gt;です。参照&lt;a href=&quot;../rc/struct.rc&quot;&gt; &lt;code&gt;&amp;amp;Rc&amp;lt;T&amp;gt;&lt;/code&gt; &lt;/a&gt;を指定すると、新しい&lt;a href=&quot;../rc/struct.rc&quot;&gt; &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; &lt;/a&gt;複製して、非アトミックな方法で参照カウントを変更できます。</target>
        </trans-unit>
        <trans-unit id="5d9b32be0b7923daf9aadae8867f04bd738917c6" translate="yes" xml:space="preserve">
          <source>Another example showing how to keep &lt;code&gt;Cow&lt;/code&gt; in a struct:</source>
          <target state="translated">&lt;code&gt;Cow&lt;/code&gt; を構造体に保つ方法を示す別の例：</target>
        </trans-unit>
        <trans-unit id="dedf5ccdeb6bf446ef7cfb01d8db4c4b042b2078" translate="yes" xml:space="preserve">
          <source>Another example:</source>
          <target state="translated">別の例です。</target>
        </trans-unit>
        <trans-unit id="73dbef5057ac390e03a6e177bceb38dfa0e2cca7" translate="yes" xml:space="preserve">
          <source>Another implication of the 4-byte fixed size of a &lt;code&gt;char&lt;/code&gt; is that per-&lt;code&gt;char&lt;/code&gt; processing can end up using a lot more memory:</source>
          <target state="translated">4バイトの固定サイズの別の意味合い &lt;code&gt;char&lt;/code&gt; がパーということである &lt;code&gt;char&lt;/code&gt; 型の処理がより多くのメモリを使用して終了することができます：</target>
        </trans-unit>
        <trans-unit id="8ab43d76c6773436cfee7acbc8b6406943d7ca07" translate="yes" xml:space="preserve">
          <source>Another important difference between macros and functions is that you must define macros or bring them into scope &lt;em&gt;before&lt;/em&gt; you call them in a file, as opposed to functions you can define anywhere and call anywhere.</source>
          <target state="translated">マクロと関数のもう1つの重要な違いは、どこにでも定義してどこにでも呼び出すことができる関数とは対照的に、ファイルで呼び出す&lt;em&gt;前に&lt;/em&gt;マクロを定義するか、マクロをスコープ&lt;em&gt;に&lt;/em&gt;入れる必要があることです。</target>
        </trans-unit>
        <trans-unit id="6f8bbe73702fb41924bac262bfb8595f3c660f2c" translate="yes" xml:space="preserve">
          <source>Another indicator that shows there&amp;rsquo;s room for improvement is the &lt;code&gt;config&lt;/code&gt; part of &lt;code&gt;parse_config&lt;/code&gt;, which implies that the two values we return are related and are both part of one configuration value. We&amp;rsquo;re not currently conveying this meaning in the structure of the data other than by grouping the two values into a tuple; we could put the two values into one struct and give each of the struct fields a meaningful name. Doing so will make it easier for future maintainers of this code to understand how the different values relate to each other and what their purpose is.</source>
          <target state="translated">改善の余地があります示すことが別の指標である &lt;code&gt;config&lt;/code&gt; の一部 &lt;code&gt;parse_config&lt;/code&gt; 我々は戻り二つの値が関連しており、一つの構成値の両方の一部であることを意味します。現在のところ、2つの値をタプルにグループ化する以外の方法では、データの構造でこの意味を伝えていません。 2つの値を1つの構造体に入れ、各構造体フィールドに意味のある名前を付けることができます。そうすることで、このコードの将来のメンテナーが、異なる値が互いにどのように関連しているか、そしてそれらの目的が何であるかを理解しやすくなります。</target>
        </trans-unit>
        <trans-unit id="00e0685682ab1fea96a488f384eaf2fdca89f82c" translate="yes" xml:space="preserve">
          <source>Another kind of generic that we&amp;rsquo;ve already been using is called &lt;em&gt;lifetimes&lt;/em&gt;. Rather than ensuring that a type has the behavior we want, lifetimes ensure that references are valid as long as we need them to be. Let&amp;rsquo;s look at how lifetimes do that.</source>
          <target state="translated">私たちがすでに使用している別の種類のジェネリックは、&lt;em&gt;ライフタイム&lt;/em&gt;と呼ばれています。ライフタイムは、型が希望する動作をすることを保証するのではなく、必要な限り参照が有効であることを保証します。生涯がどのようにそれを行うか見てみましょう。</target>
        </trans-unit>
        <trans-unit id="310cbb5c9fbbbdff4450ff99ffebe8e97470ef1e" translate="yes" xml:space="preserve">
          <source>Another method, &lt;code&gt;expect&lt;/code&gt;, which is similar to &lt;code&gt;unwrap&lt;/code&gt;, lets us also choose the &lt;code&gt;panic!&lt;/code&gt; error message. Using &lt;code&gt;expect&lt;/code&gt; instead of &lt;code&gt;unwrap&lt;/code&gt; and providing good error messages can convey your intent and make tracking down the source of a panic easier. The syntax of &lt;code&gt;expect&lt;/code&gt; looks like this:</source>
          <target state="translated">&lt;code&gt;unwrap&lt;/code&gt; に類似した別の方法である &lt;code&gt;expect&lt;/code&gt; は、 &lt;code&gt;panic!&lt;/code&gt; も選択できるようにします！エラーメッセージ。 &lt;code&gt;unwrap&lt;/code&gt; の代わりに &lt;code&gt;expect&lt;/code&gt; を使用して適切なエラーメッセージを提供すると、意図が伝わり、パニックの原因を追跡しやすくなります。 &lt;code&gt;expect&lt;/code&gt; の構文は次のようになります。</target>
        </trans-unit>
        <trans-unit id="f5499cba2c47a56c76648e5bfb00e8274cd4700a" translate="yes" xml:space="preserve">
          <source>Another point about UTF-8 is that there are actually three relevant ways to look at strings from Rust&amp;rsquo;s perspective: as bytes, scalar values, and grapheme clusters (the closest thing to what we would call &lt;em&gt;letters&lt;/em&gt;).</source>
          <target state="translated">UTF-8のもう1つのポイントは、Rustの観点から文字列を見るには、実際には3つの関連する方法があることです：バイト、スカラー値、および書記素クラスター（&lt;em&gt;文字&lt;/em&gt;と呼ばれるものに最も近いもの）。</target>
        </trans-unit>
        <trans-unit id="81bb35319cfe55cae7a1b6f8b640c268f984543f" translate="yes" xml:space="preserve">
          <source>Another problem you might be facing is this: suppose you've overloaded the &lt;code&gt;+&lt;/code&gt; operator for some type &lt;code&gt;Foo&lt;/code&gt; by implementing the &lt;code&gt;std::ops::Add&lt;/code&gt; trait for &lt;code&gt;Foo&lt;/code&gt;, but you find that using &lt;code&gt;+=&lt;/code&gt; does not work, as in this example:</source>
          <target state="translated">あなたが直面するかもしれないもう一つの問題はこれです：あなたが過負荷にきたと仮定 &lt;code&gt;+&lt;/code&gt; のいくつかのタイプのためにオペレータ &lt;code&gt;Foo&lt;/code&gt; 実装することにより、 &lt;code&gt;std::ops::Add&lt;/code&gt; するために形質を &lt;code&gt;Foo&lt;/code&gt; のが、あなたが使用していることを見つける &lt;code&gt;+=&lt;/code&gt; は、この例のように、仕事をしません：</target>
        </trans-unit>
        <trans-unit id="aac5c18dffed07c8f0aa7695dfba8d6c18e4b19b" translate="yes" xml:space="preserve">
          <source>Another reason Rust has an unsafe alter ego is that the underlying computer hardware is inherently unsafe. If Rust didn&amp;rsquo;t let you do unsafe operations, you couldn&amp;rsquo;t do certain tasks. Rust needs to allow you to do low-level systems programming, such as directly interacting with the operating system or even writing your own operating system. Working with low-level systems programming is one of the goals of the language. Let&amp;rsquo;s explore what we can do with unsafe Rust and how to do it.</source>
          <target state="translated">Rustが安全でない代替エゴを持っているもう1つの理由は、基盤となるコンピューターハードウェアが本質的に安全でないためです。 Rustが安全でない操作を許可していない場合、特定のタスクを実行できません。 Rustは、オペレーティングシステムと直接対話したり、独自のオペレーティングシステムを作成したりするなど、低レベルのシステムプログラミングを実行できるようにする必要があります。低レベルシステムプログラミングでの作業は、言語の目標の1つです。安全でないRustで何ができるか、そしてそれをどのように行うかを探りましょう。</target>
        </trans-unit>
        <trans-unit id="ea0e4d862c74d436d68a36a2f5a91a9f7ba71ea8" translate="yes" xml:space="preserve">
          <source>Another shortcut for struct instantiation is available, used when you need to make a new struct that has the same values as most of a previous struct of the same type, called struct update syntax:</source>
          <target state="translated">構造体のインスタンス化のための別のショートカットがあり、構造体更新構文と呼ばれる、同じ型の以前の構造体のほとんどと同じ値を持つ新しい構造体を作成する必要がある場合に使用されます。</target>
        </trans-unit>
        <trans-unit id="f3ef4925d92f67dd0f9c6ef4b106d217ff19945f" translate="yes" xml:space="preserve">
          <source>Another situation where this might be encountered is when spawning threads:</source>
          <target state="translated">もう一つの状況は、スレッドをスポーンするときに発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="34208ffcc5dda542066ff03ecbdd472bf7d5f1c2" translate="yes" xml:space="preserve">
          <source>Another solution for avoiding reference cycles is reorganizing your data structures so that some references express ownership and some references don&amp;rsquo;t. As a result, you can have cycles made up of some ownership relationships and some non-ownership relationships, and only the ownership relationships affect whether or not a value can be dropped. In Listing 15-25, we always want &lt;code&gt;Cons&lt;/code&gt; variants to own their list, so reorganizing the data structure isn&amp;rsquo;t possible. Let&amp;rsquo;s look at an example using graphs made up of parent nodes and child nodes to see when non-ownership relationships are an appropriate way to prevent reference cycles.</source>
          <target state="translated">参照サイクルを回避するための別のソリューションは、一部の参照が所有権を表し、一部の参照が所有権を表さないようにデータ構造を再編成することです。その結果、いくつかの所有関係といくつかの非所有関係で構成されるサイクルがあり、値を削除できるかどうかには所有関係のみが影響します。リスト15-25では、常に &lt;code&gt;Cons&lt;/code&gt; のバリアントがリストを所有するようにしたいので、データ構造を再編成することは不可能です。親ノードと子ノードで構成されるグラフを使用した例を見て、所有権以外の関係が参照循環を防ぐ適切な方法であるかどうかを確認してみましょう。</target>
        </trans-unit>
        <trans-unit id="561d97b6164c78f724fabd7e84d16f2ca6a5f05e" translate="yes" xml:space="preserve">
          <source>Another style of doc comment, &lt;code&gt;//!&lt;/code&gt;, adds documentation to the item that contains the comments rather than adding documentation to the items following the comments. We typically use these doc comments inside the crate root file (&lt;em&gt;src/lib.rs&lt;/em&gt; by convention) or inside a module to document the crate or the module as a whole.</source>
          <target state="translated">別のスタイルのドキュメントコメント、 &lt;code&gt;//!&lt;/code&gt; 、コメントに続くアイテムにドキュメントを追加するのではなく、コメントを含むアイテムにドキュメントを追加します。通常、これらのdocコメントは、クレートのルートファイル（&lt;em&gt;慣例&lt;/em&gt;により&lt;em&gt;src / lib.rs&lt;/em&gt;）内またはモジュール内で使用して、クレートまたはモジュール全体を文書化します。</target>
        </trans-unit>
        <trans-unit id="bfe5186a552091b0c590be070139e735a13d8759" translate="yes" xml:space="preserve">
          <source>Another use of the newtype pattern is in abstracting away some implementation details of a type: the new type can expose a public API that is different from the API of the private inner type if we used the new type directly to restrict the available functionality, for example.</source>
          <target state="translated">newtypeパターンのもう一つの用途は、型の実装の詳細を抽象化することです。例えば、利用可能な機能を制限するためにnewtypeを直接使用した場合、newtypeはプライベート内部型のAPIとは異なるパブリックAPIを公開することができます。</target>
        </trans-unit>
        <trans-unit id="5796386c80b53dfd4fee86ac2eb96a8dcc028b10" translate="yes" xml:space="preserve">
          <source>Another useful feature of &lt;code&gt;impl&lt;/code&gt; blocks is that we&amp;rsquo;re allowed to define functions within &lt;code&gt;impl&lt;/code&gt; blocks that &lt;em&gt;don&amp;rsquo;t&lt;/em&gt; take &lt;code&gt;self&lt;/code&gt; as a parameter. These are called &lt;em&gt;associated functions&lt;/em&gt; because they&amp;rsquo;re associated with the struct. They&amp;rsquo;re still functions, not methods, because they don&amp;rsquo;t have an instance of the struct to work with. You&amp;rsquo;ve already used the &lt;code&gt;String::from&lt;/code&gt; associated function.</source>
          <target state="translated">別の便利な機能 &lt;code&gt;impl&lt;/code&gt; ブロックは、我々は内の関数を定義することが許されているということです &lt;code&gt;impl&lt;/code&gt; ブロック&lt;em&gt;しません&lt;/em&gt;取る &lt;code&gt;self&lt;/code&gt; パラメータとして。これらは、構造体に関連付けられているため、&lt;em&gt;関連関数&lt;/em&gt;と呼ばれます。機能する構造体のインスタンスがないので、メソッドではなく関数のままです。 &lt;code&gt;String::from&lt;/code&gt; 関連関数をすでに使用しています。</target>
        </trans-unit>
        <trans-unit id="30235cc37ef7579d4a5373609eca2f1e91e01f9f" translate="yes" xml:space="preserve">
          <source>Another useful feature of match arms is that they can bind to the parts of the values that match the pattern. This is how we can extract values out of enum variants.</source>
          <target state="translated">マッチアームのもう一つの便利な機能は、パターンにマッチした値の部分にバインドできることです。このようにして、列挙バリアントから値を抽出することができます。</target>
        </trans-unit>
        <trans-unit id="03644769062de97f25c38104b0372355c4a77983" translate="yes" xml:space="preserve">
          <source>Another way is to do away with the associated type in &lt;code&gt;Maker&lt;/code&gt; and use an input type parameter instead:</source>
          <target state="translated">もう1つの方法は、 &lt;code&gt;Maker&lt;/code&gt; で関連する型を取り除き、代わりに入力型パラメーターを使用することです。</target>
        </trans-unit>
        <trans-unit id="6f7bb901bc2f8efc6ca57a7f109d4ad53f1c9e20" translate="yes" xml:space="preserve">
          <source>Another way of constructing a hash map is by using iterators and the &lt;code&gt;collect&lt;/code&gt; method on a vector of tuples, where each tuple consists of a key and its value. We&amp;rsquo;ll be going into more detail about iterators and their associated methods in the &lt;a href=&quot;ch13-02-iterators&quot;&gt;&amp;rdquo;Processing a Series of Items with Iterators&amp;rdquo; section of Chapter 13&lt;/a&gt;. The &lt;code&gt;collect&lt;/code&gt; method gathers data into a number of collection types, including &lt;code&gt;HashMap&lt;/code&gt;. For example, if we had the team names and initial scores in two separate vectors, we could use the &lt;code&gt;zip&lt;/code&gt; method to create a vector of tuples where &amp;ldquo;Blue&amp;rdquo; is paired with 10, and so forth. Then we could use the &lt;code&gt;collect&lt;/code&gt; method to turn that vector of tuples into a hash map, as shown in Listing 8-21.</source>
          <target state="translated">ハッシュマップを作成する別の方法は、タプルのベクトルに対してイテレーターと &lt;code&gt;collect&lt;/code&gt; メソッドを使用することです。ここで、各タプルはキーとその値で構成されます。イテレータとそれに関連するメソッドについて&lt;a href=&quot;ch13-02-iterators&quot;&gt;は、第13章の「イテレータを使用した一連のアイテムの処理」セクションで&lt;/a&gt;詳しく説明します。 &lt;code&gt;collect&lt;/code&gt; 方法は、以下を含むコレクション・タイプの数、にデータを収集し &lt;code&gt;HashMap&lt;/code&gt; 。たとえば、チーム名と初期スコアが2つの別々のベクトルにある場合、 &lt;code&gt;zip&lt;/code&gt; メソッドを使用して、「青」が10とペアになっているタプルのベクトルを作成できます。次に、リスト8-21に示すように、 &lt;code&gt;collect&lt;/code&gt; メソッドを使用して、タプルのベクトルをハッシュマップに変換できます。</target>
        </trans-unit>
        <trans-unit id="ccc69aa411fffd31870708506663671f3a6766b5" translate="yes" xml:space="preserve">
          <source>Another way of constructing a hash map is by using the &lt;code&gt;collect&lt;/code&gt; method on a vector of tuples, where each tuple consists of a key and its value. The &lt;code&gt;collect&lt;/code&gt; method gathers data into a number of collection types, including &lt;code&gt;HashMap&lt;/code&gt;. For example, if we had the team names and initial scores in two separate vectors, we could use the &lt;code&gt;zip&lt;/code&gt; method to create a vector of tuples where &amp;ldquo;Blue&amp;rdquo; is paired with 10, and so forth. Then we could use the &lt;code&gt;collect&lt;/code&gt; method to turn that vector of tuples into a hash map, as shown in Listing 8-21.</source>
          <target state="translated">ハッシュマップを作成する別の方法は、タプルのベクトルに対して &lt;code&gt;collect&lt;/code&gt; メソッドを使用することです。この場合、各タプルはキーとその値で構成されます。 &lt;code&gt;collect&lt;/code&gt; 方法は、以下を含むコレクション・タイプの数、にデータを収集し &lt;code&gt;HashMap&lt;/code&gt; 。たとえば、チーム名と初期スコアが2つの別々のベクトルにある場合、 &lt;code&gt;zip&lt;/code&gt; を使用できますメソッドを使用して、「Blue」が10とペアになっているタプルのベクトルを作成。次に、リスト8-21に示すように、 &lt;code&gt;collect&lt;/code&gt; メソッドを使用して、タプルのベクトルをハッシュマップに変換します。</target>
        </trans-unit>
        <trans-unit id="56bc825abe2ef1255ee87da2e4f261c23258e491" translate="yes" xml:space="preserve">
          <source>Another way of thinking about &lt;code&gt;flat_map()&lt;/code&gt;: &lt;a href=&quot;#method.map&quot;&gt;&lt;code&gt;map&lt;/code&gt;&lt;/a&gt;'s closure returns one item for each element, and &lt;code&gt;flat_map()&lt;/code&gt;'s closure returns an iterator for each element.</source>
          <target state="translated">&lt;code&gt;flat_map()&lt;/code&gt; についての別の考え方：&lt;a href=&quot;#method.map&quot;&gt; &lt;code&gt;map&lt;/code&gt; &lt;/a&gt;のクロージャーは、要素ごとに1つのアイテムを返します。 &lt;code&gt;flat_map()&lt;/code&gt; のクロージャは各要素に対してイテレータを返します。</target>
        </trans-unit>
        <trans-unit id="d1f28d9b77a5082f5c9d67a87d7ff9fdc9ab88db" translate="yes" xml:space="preserve">
          <source>Another way of thinking about &lt;code&gt;flat_map()&lt;/code&gt;: &lt;a href=&quot;trait.iterator#method.map&quot;&gt;&lt;code&gt;map&lt;/code&gt;&lt;/a&gt;'s closure returns one item for each element, and &lt;code&gt;flat_map()&lt;/code&gt;'s closure returns an iterator for each element.</source>
          <target state="translated">&lt;code&gt;flat_map()&lt;/code&gt; についての別の考え方：&lt;a href=&quot;trait.iterator#method.map&quot;&gt; &lt;code&gt;map&lt;/code&gt; &lt;/a&gt;のクロージャは要素ごとに1つのアイテムを返し、 &lt;code&gt;flat_map()&lt;/code&gt; のクロージャは要素ごとにイテレータを返します。</target>
        </trans-unit>
        <trans-unit id="590fe2daae703b4f29d9d514cb7fe9863489ba23" translate="yes" xml:space="preserve">
          <source>Another way to access union fields is to use pattern matching. Pattern matching on union fields uses the same syntax as struct patterns, except that the pattern must specify exactly one field. Since pattern matching is like reading the union with a particular field, it has to be placed in &lt;code&gt;unsafe&lt;/code&gt; blocks as well.</source>
          <target state="translated">ユニオンフィールドにアクセスする別の方法は、パターンマッチングを使用することです。ユニオンフィールドのパターンマッチングでは、構造体パターンと同じ構文を使用します。ただし、パターンはフィールドを1つだけ指定する必要があります。パターンマッチングは特定のフィールドとの共用体を読み取るようなものなので、次の場所に配置する必要があります &lt;code&gt;unsafe&lt;/code&gt; ブロックあります。</target>
        </trans-unit>
        <trans-unit id="1b9e5f7972ceab35649387701cac506db165c92f" translate="yes" xml:space="preserve">
          <source>Another way to have a collection of multiple values is with an &lt;em&gt;array&lt;/em&gt;. Unlike a tuple, every element of an array must have the same type. Arrays in Rust are different from arrays in some other languages because arrays in Rust have a fixed length, like tuples.</source>
          <target state="translated">複数の値のコレクションを取得する別の方法は、 &lt;em&gt;配列を使用すること&lt;/em&gt;です。タプルとは異なり、配列のすべての要素は同じ型でなければなりません。Rustの配列はタプルのように固定長であるため、Rustの配列は他のいくつかの言語の配列とは異なります。</target>
        </trans-unit>
        <trans-unit id="6b16dbbf7d35ba29c07c44408e5ca0fc777803bb" translate="yes" xml:space="preserve">
          <source>Another way to provide the compiler with enough information, is to specify the generic type parameter:</source>
          <target state="translated">コンパイラに十分な情報を提供するもう一つの方法は、汎用型パラメータを指定することです。</target>
        </trans-unit>
        <trans-unit id="9b14c4635b7e156ee560ca02ddafb5c338efe01a" translate="yes" xml:space="preserve">
          <source>Another way we could implement &lt;code&gt;largest&lt;/code&gt; is for the function to return a reference to a &lt;code&gt;T&lt;/code&gt; value in the slice. If we change the return type to &lt;code&gt;&amp;amp;T&lt;/code&gt; instead of &lt;code&gt;T&lt;/code&gt;, thereby changing the body of the function to return a reference, we wouldn&amp;rsquo;t need the &lt;code&gt;Clone&lt;/code&gt; or &lt;code&gt;Copy&lt;/code&gt; trait bounds and we could avoid heap allocations. Try implementing these alternate solutions on your own!</source>
          <target state="translated">&lt;code&gt;largest&lt;/code&gt; 値を実装できるもう1つの方法は、関数がスライス内の &lt;code&gt;T&lt;/code&gt; 値への参照を返すことです。我々は戻り値の型を変更した場合は &lt;code&gt;&amp;amp;T&lt;/code&gt; の代わりに &lt;code&gt;T&lt;/code&gt; これにより、参照を返すように関数の本体を変更し、我々は必要はありません &lt;code&gt;Clone&lt;/code&gt; または &lt;code&gt;Copy&lt;/code&gt; 形質境界を、私たちは、ヒープ割り当てを避けることができます。これらの代替ソリューションを自分で実装してみてください！</target>
        </trans-unit>
        <trans-unit id="322444d3bb52c341f429ca0454f292dc242f315b" translate="yes" xml:space="preserve">
          <source>Any</source>
          <target state="translated">Any</target>
        </trans-unit>
        <trans-unit id="28a9dd9802c2f2d457b2df1a706228a0fe1e9650" translate="yes" xml:space="preserve">
          <source>Any &lt;code&gt;BuildHasherDefault&lt;/code&gt; is &lt;a href=&quot;https://doc.rust-lang.org/nomicon/exotic-sizes.html#zero-sized-types-zsts&quot;&gt;zero-sized&lt;/a&gt;. It can be created with &lt;a href=&quot;#method.default&quot;&gt;&lt;code&gt;default&lt;/code&gt;&lt;/a&gt;. When using &lt;code&gt;BuildHasherDefault&lt;/code&gt; with &lt;a href=&quot;../collections/struct.hashmap&quot;&gt;&lt;code&gt;HashMap&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../collections/struct.hashset&quot;&gt;&lt;code&gt;HashSet&lt;/code&gt;&lt;/a&gt;, this doesn't need to be done, since they implement appropriate &lt;a href=&quot;../default/trait.default&quot;&gt;&lt;code&gt;Default&lt;/code&gt;&lt;/a&gt; instances themselves.</source>
          <target state="translated">どれ &lt;code&gt;BuildHasherDefault&lt;/code&gt; はある&lt;a href=&quot;https://doc.rust-lang.org/nomicon/exotic-sizes.html#zero-sized-types-zsts&quot;&gt;ゼロ・サイズ&lt;/a&gt;。&lt;a href=&quot;#method.default&quot;&gt; &lt;code&gt;default&lt;/code&gt; &lt;/a&gt;で作成できます。 &lt;code&gt;BuildHasherDefault&lt;/code&gt; を&lt;a href=&quot;../collections/struct.hashmap&quot;&gt; &lt;code&gt;HashMap&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;../collections/struct.hashset&quot;&gt; &lt;code&gt;HashSet&lt;/code&gt; &lt;/a&gt;で使用する場合、適切な&lt;a href=&quot;../default/trait.default&quot;&gt; &lt;code&gt;Default&lt;/code&gt; &lt;/a&gt;インスタンス自体を実装するため、これを行う必要はありません。</target>
        </trans-unit>
        <trans-unit id="39acf470f03d64f751336d22936382dc10cf66e8" translate="yes" xml:space="preserve">
          <source>Any &lt;code&gt;BuildHasherDefault&lt;/code&gt; is &lt;a href=&quot;https://doc.rust-lang.org/nomicon/exotic-sizes.html#zero-sized-types-zsts&quot;&gt;zero-sized&lt;/a&gt;. It can be created with &lt;a href=&quot;struct.buildhasherdefault#method.default&quot;&gt;&lt;code&gt;default&lt;/code&gt;&lt;/a&gt;. When using &lt;code&gt;BuildHasherDefault&lt;/code&gt; with &lt;a href=&quot;../collections/struct.hashmap&quot;&gt;&lt;code&gt;HashMap&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../collections/struct.hashset&quot;&gt;&lt;code&gt;HashSet&lt;/code&gt;&lt;/a&gt;, this doesn't need to be done, since they implement appropriate &lt;a href=&quot;../default/trait.default&quot;&gt;&lt;code&gt;Default&lt;/code&gt;&lt;/a&gt; instances themselves.</source>
          <target state="translated">&lt;code&gt;BuildHasherDefault&lt;/code&gt; はすべて&lt;a href=&quot;https://doc.rust-lang.org/nomicon/exotic-sizes.html#zero-sized-types-zsts&quot;&gt;ゼロサイズ&lt;/a&gt;です。&lt;a href=&quot;struct.buildhasherdefault#method.default&quot;&gt; &lt;code&gt;default&lt;/code&gt; &lt;/a&gt;で作成できます。 &lt;code&gt;BuildHasherDefault&lt;/code&gt; を&lt;a href=&quot;../collections/struct.hashmap&quot;&gt; &lt;code&gt;HashMap&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;../collections/struct.hashset&quot;&gt; &lt;code&gt;HashSet&lt;/code&gt; &lt;/a&gt;とともに使用する場合、適切な&lt;a href=&quot;../default/trait.default&quot;&gt; &lt;code&gt;Default&lt;/code&gt; &lt;/a&gt;インスタンスを実装するため、これを行う必要はありません。</target>
        </trans-unit>
        <trans-unit id="61c0cc711bc6806236220ae14adf5485763a3373" translate="yes" xml:space="preserve">
          <source>Any &lt;code&gt;enum&lt;/code&gt; value consumes as much memory as the largest variant for its corresponding &lt;code&gt;enum&lt;/code&gt; type, as well as the size needed to store a discriminant.</source>
          <target state="translated">任意の &lt;code&gt;enum&lt;/code&gt; それに対応するための最大の変種として多くのメモリとしての価値が消費 &lt;code&gt;enum&lt;/code&gt; タイプと同様に、判別式を格納するのに必要なサイズ。</target>
        </trans-unit>
        <trans-unit id="6ab54097a9523b84f57f773009ba255a131e3917" translate="yes" xml:space="preserve">
          <source>Any &lt;code&gt;with_capacity&lt;/code&gt; constructor will instruct the collection to allocate enough space for the specified number of elements. Ideally this will be for exactly that many elements, but some implementation details may prevent this. See collection-specific documentation for details. In general, use &lt;code&gt;with_capacity&lt;/code&gt; when you know exactly how many elements will be inserted, or at least have a reasonable upper-bound on that number.</source>
          <target state="translated">どれ &lt;code&gt;with_capacity&lt;/code&gt; のコンストラクタは、要素の指定された数のための十分なスペースを割り当てるコレクションを指示します。理想的には、これはまさにその多くの要素に対するものですが、実装の詳細によってはこれを妨げる場合があります。詳細については、コレクション固有のドキュメントを参照してください。一般的には、 &lt;code&gt;with_capacity&lt;/code&gt; 挿入される要素の数が正確にわかっている場合、または少なくともその数に適切な上限がある場合は with_capacityをします。</target>
        </trans-unit>
        <trans-unit id="0b673eb46a7f5984769da2ecfe123198574739d4" translate="yes" xml:space="preserve">
          <source>Any I/O error not part of this list.</source>
          <target state="translated">このリストに含まれない任意の I/O エラー。</target>
        </trans-unit>
        <trans-unit id="49edcccea744a8f077751ea25c38d4fc4cfa0fe8" translate="yes" xml:space="preserve">
          <source>Any IP address can be either a version four or a version six address, but not both at the same time. That property of IP addresses makes the enum data structure appropriate, because enum values can only be one of its variants. Both version four and version six addresses are still fundamentally IP addresses, so they should be treated as the same type when the code is handling situations that apply to any kind of IP address.</source>
          <target state="translated">どのIPアドレスもバージョン4またはバージョン6のアドレスになりますが、同時に両方のアドレスになることはありません。IP アドレスのこの性質は、列挙型データ構造を適切なものにしています。バージョン4もバージョン6も基本的にはIPアドレスなので、コードがどのような種類のIPアドレスにも適用される状況を扱う場合には、それらは同じ型として扱われるべきです。</target>
        </trans-unit>
        <trans-unit id="6867ac894a456ea99c7c6870f309c422acaaf4df" translate="yes" xml:space="preserve">
          <source>Any IP address can be either a version four or a version six address, but not both at the same time. That property of IP addresses makes the enum data structure appropriate, because enum values can only be one of the variants. Both version four and version six addresses are still fundamentally IP addresses, so they should be treated as the same type when the code is handling situations that apply to any kind of IP address.</source>
          <target state="translated">どのIPアドレスもバージョン4かバージョン6のどちらかになりますが、同時に両方になることはありません。IP アドレスのこの性質は enum データ構造を適切なものにしています。バージョン4もバージョン6も基本的にはIPアドレスなので、コードがどのような種類のIPアドレスにも適用される状況を扱う場合には、それらは同じ型として扱われるべきです。</target>
        </trans-unit>
        <trans-unit id="771cc11d8125e00769bce8eb3a9472fcb3c21cb2" translate="yes" xml:space="preserve">
          <source>Any character in the 'printable ASCII' range &lt;code&gt;0x20&lt;/code&gt; .. &lt;code&gt;0x7e&lt;/code&gt; inclusive is not escaped.</source>
          <target state="translated">「印刷可能なASCII」の範囲内の任意の文字 &lt;code&gt;0x20&lt;/code&gt; .. &lt;code&gt;0x7e&lt;/code&gt; 含むはエスケープされません。</target>
        </trans-unit>
        <trans-unit id="3e6eb82cfd1ccce10703d68820085fb1a0e36401" translate="yes" xml:space="preserve">
          <source>Any characters, except this sequence</source>
          <target state="translated">このシーケンス以外の任意の文字</target>
        </trans-unit>
        <trans-unit id="4cd23fb2001ef303a1bdb9cc4bb51ec0898b0bb8" translate="yes" xml:space="preserve">
          <source>Any characters, except those listed</source>
          <target state="translated">記載されている文字以外の任意の文字</target>
        </trans-unit>
        <trans-unit id="cf63f064edae30139fdd89fa67002f6be993edd6" translate="yes" xml:space="preserve">
          <source>Any conversions allowed by coercion can also be explicitly performed by the &lt;a href=&quot;expressions/operator-expr#type-cast-expressions&quot;&gt;type cast operator&lt;/a&gt;, &lt;code&gt;as&lt;/code&gt;.</source>
          <target state="translated">強制によって許可された任意の変換も明示することにより行うことができる&lt;a href=&quot;expressions/operator-expr#type-cast-expressions&quot;&gt;タイプのキャスト演算子&lt;/a&gt;、 &lt;code&gt;as&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="de99d379f5705cbf09c5d5e30200a62d7427ee91" translate="yes" xml:space="preserve">
          <source>Any excess capacity is removed:</source>
          <target state="translated">余った容量は削除されます。</target>
        </trans-unit>
        <trans-unit id="cfff92a36bb4f2aba0bfefa3df53467014699fa5" translate="yes" xml:space="preserve">
          <source>Any implementation where a type appears &lt;a href=&quot;#uncovered-type&quot;&gt;uncovered&lt;/a&gt;. &lt;code&gt;impl&amp;lt;T&amp;gt; Foo for T&lt;/code&gt;, &lt;code&gt;impl&amp;lt;T&amp;gt; Bar&amp;lt;T&amp;gt; for T&lt;/code&gt;, &lt;code&gt;impl&amp;lt;T&amp;gt; Bar&amp;lt;Vec&amp;lt;T&amp;gt;&amp;gt; for T&lt;/code&gt;, and &lt;code&gt;impl&amp;lt;T&amp;gt; Bar&amp;lt;T&amp;gt; for Vec&amp;lt;T&amp;gt;&lt;/code&gt; are considered blanket impls. However, &lt;code&gt;impl&amp;lt;T&amp;gt; Bar&amp;lt;Vec&amp;lt;T&amp;gt;&amp;gt; for Vec&amp;lt;T&amp;gt;&lt;/code&gt; is not a blanket impl, as all instances of &lt;code&gt;T&lt;/code&gt; which appear in this &lt;code&gt;impl&lt;/code&gt; are covered by &lt;code&gt;Vec&lt;/code&gt;.</source>
          <target state="translated">タイプが&lt;a href=&quot;#uncovered-type&quot;&gt;カバーされていない&lt;/a&gt;ように見える実装。 &lt;code&gt;impl&amp;lt;T&amp;gt; Foo for T&lt;/code&gt; 、 &lt;code&gt;impl&amp;lt;T&amp;gt; Bar&amp;lt;T&amp;gt; for T&lt;/code&gt; 、 &lt;code&gt;impl&amp;lt;T&amp;gt; Bar&amp;lt;Vec&amp;lt;T&amp;gt;&amp;gt; for T&lt;/code&gt; 、と &lt;code&gt;impl&amp;lt;T&amp;gt; Bar&amp;lt;T&amp;gt; for Vec&amp;lt;T&amp;gt;&lt;/code&gt; 毛布と考えられていますimpls。ただし、 &lt;code&gt;impl&amp;lt;T&amp;gt; Bar&amp;lt;Vec&amp;lt;T&amp;gt;&amp;gt; for Vec&amp;lt;T&amp;gt;&lt;/code&gt; 、この &lt;code&gt;impl&lt;/code&gt; に表示される &lt;code&gt;T&lt;/code&gt; のすべてのインスタンスが &lt;code&gt;Vec&lt;/code&gt; でカバーされているため、包括的なimplではありません。</target>
        </trans-unit>
        <trans-unit id="4eba9dcc5c9c9c3a4fc6d9f7d5233af8a7847a24" translate="yes" xml:space="preserve">
          <source>Any kind of aggregate constructor (array, &lt;code&gt;struct&lt;/code&gt;, &lt;code&gt;enum&lt;/code&gt;, tuple, ...)</source>
          <target state="translated">あらゆる種類の集約コンストラクター（配列、 &lt;code&gt;struct&lt;/code&gt; 、 &lt;code&gt;enum&lt;/code&gt; 、タプルなど）</target>
        </trans-unit>
        <trans-unit id="a2d418110b6f755d1311536fe4acdfee5af1facd" translate="yes" xml:space="preserve">
          <source>Any kind of literal (string, integer, etc) with any suffix is valid as a token, and can be passed to a macro without producing an error.</source>
          <target state="translated">任意のサフィックスを持つリテラル (文字列、整数など)はトークンとして有効であり、エラーを発生させることなくマクロに渡すことができます。</target>
        </trans-unit>
        <trans-unit id="6f537d5097da9afc6f346b4806da2a5f2a4e11dd" translate="yes" xml:space="preserve">
          <source>Any kind of literal (string, integer, etc) with any suffix is valid as a token, and can be passed to a macro without producing an error. The macro itself will decide how to interpret such a token and whether to produce an error or not.</source>
          <target state="translated">任意のサフィックスを持つ任意の種類のリテラル(文字列、整数など)はトークンとして有効であり、エラーを発生させることなくマクロに渡すことができます。マクロ自身がそのようなトークンをどのように解釈し、エラーを発生させるかどうかを決定します。</target>
        </trans-unit>
        <trans-unit id="4cbac428240bad16fb03767cc5cca3e5e71622e2" translate="yes" xml:space="preserve">
          <source>Any non-Unicode sequences are replaced with &lt;a href=&quot;../char/constant.replacement_character&quot;&gt;&lt;code&gt;U+FFFD REPLACEMENT CHARACTER&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">非Unicodeシーケンスは&lt;a href=&quot;../char/constant.replacement_character&quot;&gt; &lt;code&gt;U+FFFD REPLACEMENT CHARACTER&lt;/code&gt; &lt;/a&gt;置換文字に置き換えられますます。</target>
        </trans-unit>
        <trans-unit id="3df46fe98310c858bb458ed2bc6017d791596b12" translate="yes" xml:space="preserve">
          <source>Any of the characters in the range</source>
          <target state="translated">範囲内の任意の文字</target>
        </trans-unit>
        <trans-unit id="df4bb3c1fbc6102d5b31f44ab7298372090f0684" translate="yes" xml:space="preserve">
          <source>Any of the characters listed</source>
          <target state="translated">記載されているキャラクターのいずれか</target>
        </trans-unit>
        <trans-unit id="e1fe17e124adf671f41a6bcdb30bc09a9767a019" translate="yes" xml:space="preserve">
          <source>Any of the methods provided by a &lt;a href=&quot;../visibility-and-privacy&quot;&gt;visible&lt;/a&gt; trait implemented by &lt;code&gt;T&lt;/code&gt;. If &lt;code&gt;T&lt;/code&gt; is a type parameter, methods provided by trait bounds on &lt;code&gt;T&lt;/code&gt; are looked up first. Then all remaining methods in scope are looked up.</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; によって実装される&lt;a href=&quot;../visibility-and-privacy&quot;&gt;目に見える&lt;/a&gt;特性によって提供されるメソッドのいずれか。場合 &lt;code&gt;T&lt;/code&gt; は、タイプパラメータである、上で形質境界によって提供される方法 &lt;code&gt;T&lt;/code&gt; は、最初に検索されます。次に、スコープ内の残りのすべてのメソッドが検索されます。</target>
        </trans-unit>
        <trans-unit id="5c8d97ac8cad3dfb222e1fcec0cd986d681f1547" translate="yes" xml:space="preserve">
          <source>Any other &lt;code&gt;Arc&lt;/code&gt; or &lt;a href=&quot;struct.weak&quot;&gt;&lt;code&gt;Weak&lt;/code&gt;&lt;/a&gt; pointers to the same allocation must not be dereferenced for the duration of the returned borrow. This is trivially the case if no such pointers exist, for example immediately after &lt;code&gt;Arc::new&lt;/code&gt;.</source>
          <target state="translated">同じ割り当てへの他の &lt;code&gt;Arc&lt;/code&gt; または&lt;a href=&quot;struct.weak&quot;&gt; &lt;code&gt;Weak&lt;/code&gt; &lt;/a&gt;ポインターは、返された借用の期間中、逆参照されてはなりません。これは、たとえば &lt;code&gt;Arc::new&lt;/code&gt; 直後など、そのようなポインタが存在しない場合は簡単に当てはまります。</target>
        </trans-unit>
        <trans-unit id="0c05e8f1c6956f4765a713498f6a6547d98317e6" translate="yes" xml:space="preserve">
          <source>Any other &lt;code&gt;Rc&lt;/code&gt; or &lt;a href=&quot;struct.weak&quot;&gt;&lt;code&gt;Weak&lt;/code&gt;&lt;/a&gt; pointers to the same allocation must not be dereferenced for the duration of the returned borrow. This is trivially the case if no such pointers exist, for example immediately after &lt;code&gt;Rc::new&lt;/code&gt;.</source>
          <target state="translated">同じ割り当てへの他の &lt;code&gt;Rc&lt;/code&gt; または&lt;a href=&quot;struct.weak&quot;&gt; &lt;code&gt;Weak&lt;/code&gt; &lt;/a&gt;ポインターは、返された借用の期間中、逆参照されてはなりません。これは、たとえば &lt;code&gt;Rc::new&lt;/code&gt; 直後など、そのようなポインタが存在しない場合は簡単に当てはまります。</target>
        </trans-unit>
        <trans-unit id="e19f15fb75a4bf5f47bda7e931808400dd6bf097" translate="yes" xml:space="preserve">
          <source>Any other changes attempted on a post should have no effect. For example, if we try to approve a draft blog post before we&amp;rsquo;ve requested a review, the post should remain an unpublished draft.</source>
          <target state="translated">投稿に対して行われたその他の変更は影響を与えません。たとえば、レビューをリクエストする前に下書きのブログ投稿を承認しようとした場合、その投稿は未公開の下書きのままにしておく必要があります。</target>
        </trans-unit>
        <trans-unit id="d6894150447e47d12e66ba741e1dc8f000de5b10" translate="yes" xml:space="preserve">
          <source>Any other chars are given hex escapes of the form '\xNN'.</source>
          <target state="translated">他の文字は '\xNN' という形式のヘックスエスケープが与えられます。</target>
        </trans-unit>
        <trans-unit id="c7e7ce7ad0344363614031d689f8048423505a67" translate="yes" xml:space="preserve">
          <source>Any resources the value manages, such as heap memory or a file handle, will linger forever in an unreachable state. However, it does not guarantee that pointers to this memory will remain valid.</source>
          <target state="translated">ヒープメモリやファイルハンドルなど、値が管理するリソースは、到達不可能な状態で永遠に残ります。しかし、このメモリへのポインタが有効なままであることを保証するものではありません。</target>
        </trans-unit>
        <trans-unit id="4582f1278b61140a4c03b6946eaab9c9e43377c3" translate="yes" xml:space="preserve">
          <source>Any suffixes are rejected on non-numeric literal tokens, and numeric literal tokens are accepted only with suffixes from the list below.</source>
          <target state="translated">数値以外のリテラルトークンにはサフィックスを付けることはできません。</target>
        </trans-unit>
        <trans-unit id="31bced9874925b40b1709b82b080279f57f95fc4" translate="yes" xml:space="preserve">
          <source>Any time a type &lt;code&gt;T&lt;/code&gt; is considered &lt;a href=&quot;#local-type&quot;&gt;local&lt;/a&gt;, &lt;code&gt;&amp;amp;T&lt;/code&gt;, &lt;code&gt;&amp;amp;mut T&lt;/code&gt;, &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt;, and &lt;code&gt;Pin&amp;lt;T&amp;gt;&lt;/code&gt; are also considered local. Fundamental type constructors cannot &lt;a href=&quot;#uncovered-type&quot;&gt;cover&lt;/a&gt; other types. Any time the term &quot;covered type&quot; is used, the &lt;code&gt;T&lt;/code&gt; in &lt;code&gt;&amp;amp;T&lt;/code&gt;, &lt;code&gt;&amp;amp;mut T&lt;/code&gt;, &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt;, and &lt;code&gt;Pin&amp;lt;T&amp;gt;&lt;/code&gt; is not considered covered.</source>
          <target state="translated">タイプ &lt;code&gt;T&lt;/code&gt; が&lt;a href=&quot;#local-type&quot;&gt;ローカル&lt;/a&gt;と見なされるときはいつでも、 &lt;code&gt;&amp;amp;T&lt;/code&gt; 、 &lt;code&gt;&amp;amp;mut T&lt;/code&gt; 、 &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; 、および &lt;code&gt;Pin&amp;lt;T&amp;gt;&lt;/code&gt; もローカルと見なされます。基本的な型コンストラクターは他の型を&lt;a href=&quot;#uncovered-type&quot;&gt;カバー&lt;/a&gt;できません。「タイプをカバーした」いつでも用語は、使用されている &lt;code&gt;T&lt;/code&gt; で &lt;code&gt;&amp;amp;T&lt;/code&gt; 、 &lt;code&gt;&amp;amp;mut T&lt;/code&gt; 、 &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; 、および &lt;code&gt;Pin&amp;lt;T&amp;gt;&lt;/code&gt; カバーされたと見なされていません。</target>
        </trans-unit>
        <trans-unit id="972a6afc1089fd19efd410e0369cd9e91a4ef0f3" translate="yes" xml:space="preserve">
          <source>Any time a type or function is provided by the standard library and you&amp;rsquo;re not sure what it does or how to use it, use the application programming interface (API) documentation to find out!</source>
          <target state="translated">タイプまたは関数が標準ライブラリによって提供されていて、その機能や使用方法がわからない場合は、アプリケーションプログラミングインターフェイス（API）のドキュメントを使用して調べてください。</target>
        </trans-unit>
        <trans-unit id="76deb7250dd43b06f05ef65522ed5c978849b0e5" translate="yes" xml:space="preserve">
          <source>Any type composed entirely of &lt;code&gt;Send&lt;/code&gt; types is automatically marked as &lt;code&gt;Send&lt;/code&gt; as well. Almost all primitive types are &lt;code&gt;Send&lt;/code&gt;, aside from raw pointers, which we&amp;rsquo;ll discuss in Chapter 19.</source>
          <target state="translated">完全に &lt;code&gt;Send&lt;/code&gt; タイプで構成されるタイプは、自動的に &lt;code&gt;Send&lt;/code&gt; としてもマークされます。ほとんどすべてのプリミティブ型は &lt;code&gt;Send&lt;/code&gt; 、これは19章で説明する生のポインタを除きます。</target>
        </trans-unit>
        <trans-unit id="af69a2cb47235b6ee090b2e8285120ce18b240b2" translate="yes" xml:space="preserve">
          <source>Any type parameter or lifetime parameter of an &lt;code&gt;impl&lt;/code&gt; must meet at least one of the following criteria:</source>
          <target state="translated">&lt;code&gt;impl&lt;/code&gt; のタイプパラメータまたはライフタイムパラメータは、次の基準の少なくとも1つを満たす必要があります。</target>
        </trans-unit>
        <trans-unit id="4b06ed0f2a9b9712d1ad4ec6082f1ea5cba3b543" translate="yes" xml:space="preserve">
          <source>Any type parameter parameter of an &lt;code&gt;impl&lt;/code&gt; must meet at least one of the following criteria:</source>
          <target state="translated">&lt;code&gt;impl&lt;/code&gt; の型パラメーターパラメーターは、次の基準の少なくとも1つを満たす必要があります。</target>
        </trans-unit>
        <trans-unit id="07027ef0df88ca520ae158040613bfcdb04fbd90" translate="yes" xml:space="preserve">
          <source>Any types with interior mutability must also use the &lt;a href=&quot;../cell/struct.unsafecell&quot;&gt;&lt;code&gt;cell::UnsafeCell&lt;/code&gt;&lt;/a&gt; wrapper around the value(s) which can be mutated through a shared reference. Failing to doing this is &lt;a href=&quot;../../reference/behavior-considered-undefined&quot;&gt;undefined behavior&lt;/a&gt;. For example, &lt;a href=&quot;../mem/fn.transmute&quot;&gt;&lt;code&gt;transmute&lt;/code&gt;&lt;/a&gt;-ing from &lt;code&gt;&amp;amp;T&lt;/code&gt; to &lt;code&gt;&amp;amp;mut T&lt;/code&gt; is invalid.</source>
          <target state="translated">内部で変更可能なタイプでは、共有参照を介して変更できる値の周りに&lt;a href=&quot;../cell/struct.unsafecell&quot;&gt; &lt;code&gt;cell::UnsafeCell&lt;/code&gt; &lt;/a&gt;ラッパーも使用する必要があります。これを実行し&lt;a href=&quot;../../reference/behavior-considered-undefined&quot;&gt;ない&lt;/a&gt;と、未定義の動作になります。例えば、&lt;a href=&quot;../mem/fn.transmute&quot;&gt; &lt;code&gt;transmute&lt;/code&gt; &lt;/a&gt;から-ing &lt;code&gt;&amp;amp;T&lt;/code&gt; の &lt;code&gt;&amp;amp;mut T&lt;/code&gt; 無効です。</target>
        </trans-unit>
        <trans-unit id="4098bab2016a26a2da921c6a4c090c6509eb5934" translate="yes" xml:space="preserve">
          <source>Any use other than with &lt;code&gt;if&lt;/code&gt; statements will probably not have an effect.</source>
          <target state="translated">&lt;code&gt;if&lt;/code&gt; 以外の用途ステートメントは、おそらく効果がありません。</target>
        </trans-unit>
        <trans-unit id="910dd93279c47bcced2d261d2b21071bc5cf465a" translate="yes" xml:space="preserve">
          <source>Any::downcast_mut</source>
          <target state="translated">Any::downcast_mut</target>
        </trans-unit>
        <trans-unit id="3142933cd2ff31b31d3f631fe20ea508e96ad05b" translate="yes" xml:space="preserve">
          <source>Any::downcast_ref</source>
          <target state="translated">Any::downcast_ref</target>
        </trans-unit>
        <trans-unit id="47853f41e226da1c34d9eedcdb8b975ed79ec7bc" translate="yes" xml:space="preserve">
          <source>Any::fmt</source>
          <target state="translated">Any::fmt</target>
        </trans-unit>
        <trans-unit id="63f0fc770b243d87075e5d22567fc12df96b560f" translate="yes" xml:space="preserve">
          <source>Any::is</source>
          <target state="translated">Any::is</target>
        </trans-unit>
        <trans-unit id="153b1345e60af7ce7872d3438b64b0f7f8addb2c" translate="yes" xml:space="preserve">
          <source>Any::type_id</source>
          <target state="translated">Any::type_id</target>
        </trans-unit>
        <trans-unit id="4cde3fadbf976f0b359d3c2a1968c555ccde759f" translate="yes" xml:space="preserve">
          <source>Anyone can write RFCs to improve Rust, and the proposals are reviewed and discussed by the Rust team, which is comprised of many topic subteams. There&amp;rsquo;s a full list of the teams &lt;a href=&quot;https://www.rust-lang.org/governance&quot;&gt;on Rust&amp;rsquo;s website&lt;/a&gt;, which includes teams for each area of the project: language design, compiler implementation, infrastructure, documentation, and more. The appropriate team reads the proposal and the comments, writes some comments of their own, and eventually, there&amp;rsquo;s consensus to accept or reject the feature.</source>
          <target state="translated">Rustを改善するために誰でもRFCを作成できます。提案は、多くのトピックサブチームで構成されるRustチームによってレビューおよび議論されます。&lt;a href=&quot;https://www.rust-lang.org/governance&quot;&gt;RustのWebサイトには&lt;/a&gt;、言語設計、コンパイラーの実装、インフラストラクチャ、ドキュメントなど、プロジェクトの各領域のチームを含むチームの完全なリストがあります。適切なチームが提案とコメントを読み、独自のコメントをいくつか書き込みます。最終的には、機能を受け入れるか拒否するかについてのコンセンサスがあります。</target>
        </trans-unit>
        <trans-unit id="53fc70bfdc4b06ea1c2fe17e53fbb9c43726838e" translate="yes" xml:space="preserve">
          <source>Apart from a method or function with a generic type parameter, this error can occur when a type parameter of a struct or trait cannot be inferred. In that case it is not always possible to use a type annotation, because all candidates have the same return type. For instance:</source>
          <target state="translated">一般的な型パラメータを持つメソッドや関数とは別に、構造体や形質の型パラメータが推論できない場合に、このエラーが発生することがあります。その場合、すべての候補が同じ戻り値の型を持っているため、型アノテーションを使用することができない場合があります。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="b813c448dbc23e1f367ecbf1266f8f07cadc0bab" translate="yes" xml:space="preserve">
          <source>Apart from lifetime extension, the temporary scope of an expression is the smallest scope that contains the expression and is for one of the following:</source>
          <target state="translated">寿命の延長とは別に、式の一時的なスコープは、式を含む最小のスコープであり、以下のいずれかのためのものです。</target>
        </trans-unit>
        <trans-unit id="73973cfd168d40bb8277e2f6044ecdb605409c4e" translate="yes" xml:space="preserve">
          <source>Appendices</source>
          <target state="translated">Appendices</target>
        </trans-unit>
        <trans-unit id="56e2c591df0fef929570597dca64284006730141" translate="yes" xml:space="preserve">
          <source>Appending to a String with &lt;code id=&quot;appending-to-a-string-with-push_str-and-push&quot;&gt;push_str&lt;/code&gt; and &lt;code&gt;push&lt;/code&gt;</source>
          <target state="translated">&lt;code id=&quot;appending-to-a-string-with-push_str-and-push&quot;&gt;push_str&lt;/code&gt; と &lt;code&gt;push&lt;/code&gt; を使用して文字列に追加する</target>
        </trans-unit>
        <trans-unit id="f3f60044b06335eb6c4230e3c39f5e0218445878" translate="yes" xml:space="preserve">
          <source>Appendix</source>
          <target state="translated">Appendix</target>
        </trans-unit>
        <trans-unit id="4c40c194c9cdc4d680691d4aa8fa1913dc98b2c3" translate="yes" xml:space="preserve">
          <source>Appendix A, &amp;ldquo;Keywords,&amp;rdquo; also explains the new raw identifiers feature that enables code written in the 2015 Edition and the 2018 Edition to interoperate.</source>
          <target state="translated">付録A「キーワード」では、2015年版と2018年版で記述されたコードの相互運用を可能にする新しい未加工識別子機能についても説明します。</target>
        </trans-unit>
        <trans-unit id="8415247b515164394b09f1335fc5dabc83b9e17a" translate="yes" xml:space="preserve">
          <source>Appendix A: Keywords</source>
          <target state="translated">付録A:キーワード</target>
        </trans-unit>
        <trans-unit id="540243de89d6ff78feccd1151f1eeb23d45eae75" translate="yes" xml:space="preserve">
          <source>Appendix B: Operators and Symbols</source>
          <target state="translated">付録B:オペレータと記号</target>
        </trans-unit>
        <trans-unit id="e440a4e5c41dd9d1d57a9a1afc26c19786ef345a" translate="yes" xml:space="preserve">
          <source>Appendix C: Derivable Traits</source>
          <target state="translated">付録C:派生形質</target>
        </trans-unit>
        <trans-unit id="41116b5529dd9b48afe443e282c8edc6aed9a707" translate="yes" xml:space="preserve">
          <source>Appendix D - Useful Development Tools</source>
          <target state="translated">付録D-便利な開発ツール</target>
        </trans-unit>
        <trans-unit id="707523bd94a1c061f370a00dc35452edc4f5ca2b" translate="yes" xml:space="preserve">
          <source>Appendix D is now titled &amp;ldquo;Useful Development Tools&amp;rdquo; and covers recently released tools that help you write Rust code.</source>
          <target state="translated">付録Dのタイトルは「便利な開発ツール」になり、Rustコードの記述に役立つ最近リリースされたツールについて説明しています。</target>
        </trans-unit>
        <trans-unit id="e50a67316708bcdc8cd3a1c83a15ee617b6e1717" translate="yes" xml:space="preserve">
          <source>Appendix E - Editions</source>
          <target state="translated">付録E-エディション</target>
        </trans-unit>
        <trans-unit id="db95e2a46f6e17f889e1ec8cb84b232b2ac6a554" translate="yes" xml:space="preserve">
          <source>Appendix F: Translations of the Book</source>
          <target state="translated">付録F:本の翻訳</target>
        </trans-unit>
        <trans-unit id="cd9cd2e1d4c917e818f77ba2a0d93ffcdf7874d2" translate="yes" xml:space="preserve">
          <source>Appendix G - How Rust is Made and &amp;ldquo;Nightly Rust&amp;rdquo;</source>
          <target state="translated">付録G-錆の発生方法と「夜間に錆びる」</target>
        </trans-unit>
        <trans-unit id="7ea8d3526ea6b8af40ac97da94b0ad40d6cea127" translate="yes" xml:space="preserve">
          <source>Appendix chapters providing rationale and references to languages that influenced the design.</source>
          <target state="translated">デザインに影響を与えた言語の根拠と参照を提供する付録の章。</target>
        </trans-unit>
        <trans-unit id="0d6a0bfa8816321ae3291d75b6bf84f8077fe48b" translate="yes" xml:space="preserve">
          <source>Appendix: Macro Follow-Set Ambiguity Formal Specification</source>
          <target state="translated">付録 マクロフォローセットの曖昧さ 形式的な仕様</target>
        </trans-unit>
        <trans-unit id="54e814d184dccc0b7473b24d35812b283adff9c0" translate="yes" xml:space="preserve">
          <source>Appends a given string slice onto the end of this &lt;code&gt;String&lt;/code&gt;.</source>
          <target state="translated">指定された文字列スライスをこの &lt;code&gt;String&lt;/code&gt; の最後に追加します。</target>
        </trans-unit>
        <trans-unit id="bd5ef47a12f2696c33dc462f202e22f6e229647a" translate="yes" xml:space="preserve">
          <source>Appends an element to the back of a collection.</source>
          <target state="translated">コレクションの後ろに要素を追加します。</target>
        </trans-unit>
        <trans-unit id="ddf4cf8edbc5fa033e85502f0a84bfe8b2914aec" translate="yes" xml:space="preserve">
          <source>Appends an element to the back of a list.</source>
          <target state="translated">リストの後ろに要素を追加します。</target>
        </trans-unit>
        <trans-unit id="9427717eceb820f7ae4720310e1343f09df153f2" translate="yes" xml:space="preserve">
          <source>Appends an element to the back of the &lt;code&gt;VecDeque&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;VecDeque&lt;/code&gt; の後ろに要素を追加します。</target>
        </trans-unit>
        <trans-unit id="373311f9bb46882cd119d03cfc2b6fa19fdf5ba3" translate="yes" xml:space="preserve">
          <source>Appends the given &lt;a href=&quot;../primitive.char&quot;&gt;&lt;code&gt;char&lt;/code&gt;&lt;/a&gt; to the end of this &lt;code&gt;String&lt;/code&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../primitive.char&quot;&gt; &lt;code&gt;char&lt;/code&gt; &lt;/a&gt;をこの &lt;code&gt;String&lt;/code&gt; の最後に追加します。</target>
        </trans-unit>
        <trans-unit id="f88d43733a3d3b030bf7286e9ed4c303cc3a7d2b" translate="yes" xml:space="preserve">
          <source>Application Binary Interface (ABI)</source>
          <target state="translated">アプリケーションバイナリインタフェース(ABI)</target>
        </trans-unit>
        <trans-unit id="9a4440ced79c9610e5a61ec32030ae30f58d9a8c" translate="yes" xml:space="preserve">
          <source>Applies a function to the contained value (if &lt;a href=&quot;enum.result#variant.Ok&quot;&gt;&lt;code&gt;Ok&lt;/code&gt;&lt;/a&gt;), or returns the provided default (if &lt;a href=&quot;enum.result#variant.Err&quot;&gt;&lt;code&gt;Err&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">含まれている値に関数を適用するか（&lt;a href=&quot;enum.result#variant.Ok&quot;&gt; &lt;code&gt;Ok&lt;/code&gt; の&lt;/a&gt;場合）、提供されたデフォルトを返します（&lt;a href=&quot;enum.result#variant.Err&quot;&gt; &lt;code&gt;Err&lt;/code&gt; の&lt;/a&gt;場合）。</target>
        </trans-unit>
        <trans-unit id="bed8e79e380caf3902110314a704f53a22b3ecbe" translate="yes" xml:space="preserve">
          <source>Applies a function to the contained value (if any), or computes a default (if not).</source>
          <target state="translated">含まれている値に関数を適用し(あれば)、デフォルト値を計算します(なければ)。</target>
        </trans-unit>
        <trans-unit id="ef8795473614177b83e201e3db900beeef41c1e2" translate="yes" xml:space="preserve">
          <source>Applies a function to the contained value (if any), or returns the provided default (if not).</source>
          <target state="translated">含まれる値に関数を適用し(あれば)、指定されたデフォルト値を返します(なければ)。</target>
        </trans-unit>
        <trans-unit id="a6be2123eb22e6f1506885d0c1439a3655475eac" translate="yes" xml:space="preserve">
          <source>Applies function to the elements of iterator and returns the first non-none result.</source>
          <target state="translated">イテレータの要素に関数を適用し、最初の非ゼロの結果を返します。</target>
        </trans-unit>
        <trans-unit id="2f579750efee0b6f5e959f71ab15df216a9fb1b9" translate="yes" xml:space="preserve">
          <source>Applies function to the elements of iterator and returns the first non-none result. &lt;a href=&quot;../../../iter/trait.iterator#method.find_map&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">イテレータの要素に関数を適用し、最初のnone以外の結果を返します。&lt;a href=&quot;../../../iter/trait.iterator#method.find_map&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7da1899028718ec8a07b6c08455d63f4e3489b90" translate="yes" xml:space="preserve">
          <source>Applies function to the elements of iterator and returns the first non-none result. &lt;a href=&quot;../../iter/trait.iterator#method.find_map&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">イテレータの要素に関数を適用し、最初のnone以外の結果を返します。&lt;a href=&quot;../../iter/trait.iterator#method.find_map&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="0f3002a1274a5209b380bd8bf18387ed22cf040f" translate="yes" xml:space="preserve">
          <source>Applies function to the elements of iterator and returns the first non-none result. &lt;a href=&quot;../iter/trait.iterator#method.find_map&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">イテレータの要素に関数を適用し、最初のnone以外の結果を返します。&lt;a href=&quot;../iter/trait.iterator#method.find_map&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="67cbbc3631a3803076e70ec9a10a8358879f6e02" translate="yes" xml:space="preserve">
          <source>Applies function to the elements of iterator and returns the first non-none result. &lt;a href=&quot;iter/trait.iterator#method.find_map&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">イテレータの要素に関数を適用し、最初のnone以外の結果を返します。&lt;a href=&quot;iter/trait.iterator#method.find_map&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8819d96feaef2f02cd8965c68d9eb2580ebfc977" translate="yes" xml:space="preserve">
          <source>Applies function to the elements of iterator and returns the first non-none result. &lt;a href=&quot;trait.iterator#method.find_map&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">イテレータの要素に関数を適用し、最初のnone以外の結果を返します。&lt;a href=&quot;trait.iterator#method.find_map&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c71f5fd4b8bc9dae7fc6bb52c696f533ce8ed924" translate="yes" xml:space="preserve">
          <source>Applies function to the elements of iterator and returns the first true result or the first error.</source>
          <target state="translated">イテレータの要素に関数を適用し、最初の真の結果または最初のエラーを返します。</target>
        </trans-unit>
        <trans-unit id="fd078bc0e6ebca661ba36b845bc2f34f79671219" translate="yes" xml:space="preserve">
          <source>Applies function to the elements of iterator and returns the first true result or the first error. &lt;a href=&quot;../../../iter/trait.iterator#method.try_find&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">イテレータの要素に関数を適用し、最初の真の結果または最初のエラーを返します。&lt;a href=&quot;../../../iter/trait.iterator#method.try_find&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="13f3965e6fc53b243d5a7c2dc2282a44cca3805a" translate="yes" xml:space="preserve">
          <source>Applies function to the elements of iterator and returns the first true result or the first error. &lt;a href=&quot;../../iter/trait.iterator#method.try_find&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">イテレータの要素に関数を適用し、最初の真の結果または最初のエラーを返します。&lt;a href=&quot;../../iter/trait.iterator#method.try_find&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ddb07d601f2efbf0db36543c96f74916e4858345" translate="yes" xml:space="preserve">
          <source>Applies function to the elements of iterator and returns the first true result or the first error. &lt;a href=&quot;../iter/trait.iterator#method.try_find&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">イテレータの要素に関数を適用し、最初の真の結果または最初のエラーを返します。&lt;a href=&quot;../iter/trait.iterator#method.try_find&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="cfe6a04d1d11293ba9f6db79767b686fae8501d1" translate="yes" xml:space="preserve">
          <source>Applies function to the elements of iterator and returns the first true result or the first error. &lt;a href=&quot;iter/trait.iterator#method.try_find&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">イテレータの要素に関数を適用し、最初の真の結果または最初のエラーを返します。&lt;a href=&quot;iter/trait.iterator#method.try_find&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="813b671e50d44d7d39a003bdb093dc2cdbf235f8" translate="yes" xml:space="preserve">
          <source>Applies function to the elements of iterator and returns the first true result or the first error. &lt;a href=&quot;trait.iterator#method.try_find&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">イテレータの要素に関数を適用し、最初の真の結果または最初のエラーを返します。&lt;a href=&quot;trait.iterator#method.try_find&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1ff8e99aa0f8295d1776562bee993cb0a364606b" translate="yes" xml:space="preserve">
          <source>Applies the &quot;?&quot; operator. A return of &lt;code&gt;Ok(t)&lt;/code&gt; means that the execution should continue normally, and the result of &lt;code&gt;?&lt;/code&gt; is the value &lt;code&gt;t&lt;/code&gt;. A return of &lt;code&gt;Err(e)&lt;/code&gt; means that execution should branch to the innermost enclosing &lt;code&gt;catch&lt;/code&gt;, or return from the function.</source>
          <target state="translated">「？」を適用します オペレーター。 &lt;code&gt;Ok(t)&lt;/code&gt; の戻り値は、実行が正常に継続する必要があることを意味し、 &lt;code&gt;?&lt;/code&gt; 値 &lt;code&gt;t&lt;/code&gt; です。 &lt;code&gt;Err(e)&lt;/code&gt; の戻り値は、実行が最も内側の囲んでいる &lt;code&gt;catch&lt;/code&gt; に分岐することを意味しますか、関数から戻るます。</target>
        </trans-unit>
        <trans-unit id="d771dbfeb7c050dea75fe4d6749833e3ae20e4ae" translate="yes" xml:space="preserve">
          <source>Applies the &quot;?&quot; operator. A return of &lt;code&gt;Ok(t)&lt;/code&gt; means that the execution should continue normally, and the result of &lt;code&gt;?&lt;/code&gt; is the value &lt;code&gt;t&lt;/code&gt;. A return of &lt;code&gt;Err(e)&lt;/code&gt; means that execution should branch to the innermost enclosing &lt;code&gt;catch&lt;/code&gt;, or return from the function. &lt;a href=&quot;../ops/trait.try#tymethod.into_result&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">「？」を適用します オペレーター。 &lt;code&gt;Ok(t)&lt;/code&gt; の戻り値は、実行が正常に継続する必要があることを意味し、 &lt;code&gt;?&lt;/code&gt; 値 &lt;code&gt;t&lt;/code&gt; です。 &lt;code&gt;Err(e)&lt;/code&gt; の戻り値は、実行が最も内側の外側の &lt;code&gt;catch&lt;/code&gt; に分岐するか、関数から戻る必要があることを意味します。&lt;a href=&quot;../ops/trait.try#tymethod.into_result&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="6233fb9390747dc2f23a28899738d6cc6a72590f" translate="yes" xml:space="preserve">
          <source>Applying the attribute to a function &lt;code&gt;f&lt;/code&gt; allows code within &lt;code&gt;f&lt;/code&gt; to get a hint of the &lt;a href=&quot;https://doc.rust-lang.org/core/panic/struct.Location.html&quot;&gt;&lt;code&gt;Location&lt;/code&gt;&lt;/a&gt; of the &quot;topmost&quot; tracked call that led to &lt;code&gt;f&lt;/code&gt;'s invocation. At the point of observation, an implementation behaves as if it walks up the stack from &lt;code&gt;f&lt;/code&gt;'s frame to find the nearest frame of an &lt;em&gt;unattributed&lt;/em&gt; function &lt;code&gt;outer&lt;/code&gt;, and it returns the &lt;a href=&quot;https://doc.rust-lang.org/core/panic/struct.Location.html&quot;&gt;&lt;code&gt;Location&lt;/code&gt;&lt;/a&gt; of the tracked call in &lt;code&gt;outer&lt;/code&gt;.</source>
          <target state="translated">関数に属性を適用する &lt;code&gt;f&lt;/code&gt; 内のコードができます &lt;code&gt;f&lt;/code&gt; はのヒントを得るために&lt;a href=&quot;https://doc.rust-lang.org/core/panic/struct.Location.html&quot;&gt; &lt;code&gt;Location&lt;/code&gt; &lt;/a&gt;につながったことを「最上位」追跡コールの &lt;code&gt;f&lt;/code&gt; の呼び出しを。観測点で、実施振る舞うことからスタックを歩くかのように &lt;code&gt;f&lt;/code&gt; の最も近いフレーム見つけるためのフレームを&lt;em&gt;アトリビューションのない&lt;/em&gt;機能の &lt;code&gt;outer&lt;/code&gt; 、それは戻り&lt;a href=&quot;https://doc.rust-lang.org/core/panic/struct.Location.html&quot;&gt; &lt;code&gt;Location&lt;/code&gt; &lt;/a&gt;で追跡コールを &lt;code&gt;outer&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7e15c6fd69af4acca9c9f459c798f3ae0c37890f" translate="yes" xml:space="preserve">
          <source>Approximate number of significant digits in base 10.</source>
          <target state="translated">ベース10の有効数字のおおよその数。</target>
        </trans-unit>
        <trans-unit id="741aa1a23115e831e460da0298845488131bda9a" translate="yes" xml:space="preserve">
          <source>Approximate number of significant digits in base 10. Use &lt;a href=&quot;../primitive.f32#associatedconstant.DIGITS&quot;&gt;&lt;code&gt;f32::DIGITS&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">基数10の有効桁数のおおよその数。代わりに&lt;a href=&quot;../primitive.f32#associatedconstant.DIGITS&quot;&gt; &lt;code&gt;f32::DIGITS&lt;/code&gt; &lt;/a&gt;使用してください。</target>
        </trans-unit>
        <trans-unit id="d8912ed7e59aeef6ce8c4355dd3b80515ddbd4f1" translate="yes" xml:space="preserve">
          <source>Approximate number of significant digits in base 10. Use &lt;a href=&quot;../primitive.f64#associatedconstant.DIGITS&quot;&gt;&lt;code&gt;f64::DIGITS&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">基数10の有効桁数のおおよその数。代わりに&lt;a href=&quot;../primitive.f64#associatedconstant.DIGITS&quot;&gt; &lt;code&gt;f64::DIGITS&lt;/code&gt; &lt;/a&gt;使用してください。</target>
        </trans-unit>
        <trans-unit id="853a983f6b8abdb9ecba43da2ceda1641c9d519f" translate="yes" xml:space="preserve">
          <source>Arc</source>
          <target state="translated">Arc</target>
        </trans-unit>
        <trans-unit id="59cfa485c658b8f9969a88c2eb92540fdf722cfd" translate="yes" xml:space="preserve">
          <source>Arc::as_ref</source>
          <target state="translated">Arc::as_ref</target>
        </trans-unit>
        <trans-unit id="2f1c5ec3613e810179b1dde9e1ff629a07f45de3" translate="yes" xml:space="preserve">
          <source>Arc::borrow</source>
          <target state="translated">Arc::borrow</target>
        </trans-unit>
        <trans-unit id="e6381920a9fbe9f6076603c436d6eef9b74e1f24" translate="yes" xml:space="preserve">
          <source>Arc::borrow_mut</source>
          <target state="translated">Arc::borrow_mut</target>
        </trans-unit>
        <trans-unit id="de0c16869f1a3fad5d726dc3e3fba2293f156861" translate="yes" xml:space="preserve">
          <source>Arc::clamp</source>
          <target state="translated">Arc::clamp</target>
        </trans-unit>
        <trans-unit id="9fa492e8fa6e20e1b52a4de7403dbe55ec1b79bf" translate="yes" xml:space="preserve">
          <source>Arc::clone</source>
          <target state="translated">Arc::clone</target>
        </trans-unit>
        <trans-unit id="39cf0d205cd739521ce28938f9a2250155c1bac4" translate="yes" xml:space="preserve">
          <source>Arc::clone_from</source>
          <target state="translated">Arc::clone_from</target>
        </trans-unit>
        <trans-unit id="773d06cfd159d4606ff3014fee5f9931067cf220" translate="yes" xml:space="preserve">
          <source>Arc::clone_into</source>
          <target state="translated">Arc::clone_into</target>
        </trans-unit>
        <trans-unit id="7561059135cbd0c5fbb5238091fd429a9e1b09c1" translate="yes" xml:space="preserve">
          <source>Arc::cmp</source>
          <target state="translated">Arc::cmp</target>
        </trans-unit>
        <trans-unit id="b73ea8e602ed4ab4007a418f3f6cee6a05a73996" translate="yes" xml:space="preserve">
          <source>Arc::default</source>
          <target state="translated">Arc::default</target>
        </trans-unit>
        <trans-unit id="cdd18aaa5e1ccdcb1656e6b3c539ea6dd22d2613" translate="yes" xml:space="preserve">
          <source>Arc::deref</source>
          <target state="translated">Arc::deref</target>
        </trans-unit>
        <trans-unit id="3d5ef1d21d6636272bbb1c82a7af354e776cadde" translate="yes" xml:space="preserve">
          <source>Arc::downcast</source>
          <target state="translated">Arc::downcast</target>
        </trans-unit>
        <trans-unit id="8f4a9849100a7720ad47a02d98c3cc428143986f" translate="yes" xml:space="preserve">
          <source>Arc::downgrade</source>
          <target state="translated">Arc::downgrade</target>
        </trans-unit>
        <trans-unit id="4d05d06001426353e874710f4e01911168266628" translate="yes" xml:space="preserve">
          <source>Arc::drop</source>
          <target state="translated">Arc::drop</target>
        </trans-unit>
        <trans-unit id="d616628ce7e2e600feb8196c85f5e01fa37ae824" translate="yes" xml:space="preserve">
          <source>Arc::eq</source>
          <target state="translated">Arc::eq</target>
        </trans-unit>
        <trans-unit id="541daae394114016fc018c7425373988b033cde5" translate="yes" xml:space="preserve">
          <source>Arc::fmt</source>
          <target state="translated">Arc::fmt</target>
        </trans-unit>
        <trans-unit id="c5939b1aa685e46bfb67eeb83668be8ab9a5dab1" translate="yes" xml:space="preserve">
          <source>Arc::from</source>
          <target state="translated">Arc::from</target>
        </trans-unit>
        <trans-unit id="dea799f19377ba936fa669465a1dea313ae3aa7a" translate="yes" xml:space="preserve">
          <source>Arc::from_raw</source>
          <target state="translated">Arc::from_raw</target>
        </trans-unit>
        <trans-unit id="6910e0ecb20317c068e1ba9e8ebf007d417f95a2" translate="yes" xml:space="preserve">
          <source>Arc::ge</source>
          <target state="translated">Arc::ge</target>
        </trans-unit>
        <trans-unit id="7e24d2d9f75e2ea02439ac0bd0d3b07ceaa736e4" translate="yes" xml:space="preserve">
          <source>Arc::get_mut</source>
          <target state="translated">Arc::get_mut</target>
        </trans-unit>
        <trans-unit id="e94b486a276abc7bcb5888a4d6fc97a6fa8eebaa" translate="yes" xml:space="preserve">
          <source>Arc::gt</source>
          <target state="translated">Arc::gt</target>
        </trans-unit>
        <trans-unit id="f233cce03a62c687a1d4be5e670e3be37d179359" translate="yes" xml:space="preserve">
          <source>Arc::hash</source>
          <target state="translated">Arc::hash</target>
        </trans-unit>
        <trans-unit id="963937d635066d272a6f67596279f6b16956abdb" translate="yes" xml:space="preserve">
          <source>Arc::hash_slice</source>
          <target state="translated">Arc::hash_slice</target>
        </trans-unit>
        <trans-unit id="2b8954f29938fa3429d664d59b2922996301d34a" translate="yes" xml:space="preserve">
          <source>Arc::into</source>
          <target state="translated">Arc::into</target>
        </trans-unit>
        <trans-unit id="24e83cc9b0b264818fc7b3695d912fc8e4d9e845" translate="yes" xml:space="preserve">
          <source>Arc::into_raw</source>
          <target state="translated">Arc::into_raw</target>
        </trans-unit>
        <trans-unit id="921d5aa53e181c2612da9bf23381db35c63bd321" translate="yes" xml:space="preserve">
          <source>Arc::into_raw_non_null</source>
          <target state="translated">Arc::into_raw_non_null</target>
        </trans-unit>
        <trans-unit id="f3473006930ab6b55f7aef32c93c0af0f87e7790" translate="yes" xml:space="preserve">
          <source>Arc::le</source>
          <target state="translated">Arc::le</target>
        </trans-unit>
        <trans-unit id="34b95793d03cc8c6cef222cea98c6e99dc74e9e2" translate="yes" xml:space="preserve">
          <source>Arc::lt</source>
          <target state="translated">Arc::lt</target>
        </trans-unit>
        <trans-unit id="eab1ca96353cac811bc765a502fbbe1723278950" translate="yes" xml:space="preserve">
          <source>Arc::make_mut</source>
          <target state="translated">Arc::make_mut</target>
        </trans-unit>
        <trans-unit id="0a9a2e87881627fae4b58af4ea1e4cdaa0c36395" translate="yes" xml:space="preserve">
          <source>Arc::max</source>
          <target state="translated">Arc::max</target>
        </trans-unit>
        <trans-unit id="431ba8a8a73b16f867d8367c027605d9a9f25a4e" translate="yes" xml:space="preserve">
          <source>Arc::min</source>
          <target state="translated">Arc::min</target>
        </trans-unit>
        <trans-unit id="a700586ffae96fc24dca7f29fd88b64a47bae03d" translate="yes" xml:space="preserve">
          <source>Arc::ne</source>
          <target state="translated">Arc::ne</target>
        </trans-unit>
        <trans-unit id="1311cfe952a5208cf9ab108dab2eb693395bbca1" translate="yes" xml:space="preserve">
          <source>Arc::new</source>
          <target state="translated">Arc::new</target>
        </trans-unit>
        <trans-unit id="2c2d4efc7b27aae2edec462666037bcaf500cae7" translate="yes" xml:space="preserve">
          <source>Arc::partial_cmp</source>
          <target state="translated">Arc::partial_cmp</target>
        </trans-unit>
        <trans-unit id="41a523a445899356c297537c4b72fff018176305" translate="yes" xml:space="preserve">
          <source>Arc::pin</source>
          <target state="translated">Arc::pin</target>
        </trans-unit>
        <trans-unit id="1d09dbe8f647daf2ca429c9d36141d61d7d2799f" translate="yes" xml:space="preserve">
          <source>Arc::ptr_eq</source>
          <target state="translated">Arc::ptr_eq</target>
        </trans-unit>
        <trans-unit id="ec8427607c6875d57c1cbb7ae116c8a1b2bc9f8b" translate="yes" xml:space="preserve">
          <source>Arc::strong_count</source>
          <target state="translated">Arc::strong_count</target>
        </trans-unit>
        <trans-unit id="12f7dc5817d10cbbabc6ff3c697a1ca67ff339d5" translate="yes" xml:space="preserve">
          <source>Arc::to_owned</source>
          <target state="translated">Arc::to_owned</target>
        </trans-unit>
        <trans-unit id="dd1da4e8925e8953dfb4aef0354dd388c867af08" translate="yes" xml:space="preserve">
          <source>Arc::to_string</source>
          <target state="translated">Arc::to_string</target>
        </trans-unit>
        <trans-unit id="b36b4607ae74c4708612a87739b787ab550df768" translate="yes" xml:space="preserve">
          <source>Arc::try_from</source>
          <target state="translated">Arc::try_from</target>
        </trans-unit>
        <trans-unit id="450b59e4892b86614294b44b39674630d4067a1f" translate="yes" xml:space="preserve">
          <source>Arc::try_into</source>
          <target state="translated">Arc::try_into</target>
        </trans-unit>
        <trans-unit id="8cc0a8e7a4fa3ddf0be44f0e2f8210b7538bff4d" translate="yes" xml:space="preserve">
          <source>Arc::try_unwrap</source>
          <target state="translated">Arc::try_unwrap</target>
        </trans-unit>
        <trans-unit id="e60b417105d1b796fbb9108c579b5a5a3f60ab78" translate="yes" xml:space="preserve">
          <source>Arc::type_id</source>
          <target state="translated">Arc::type_id</target>
        </trans-unit>
        <trans-unit id="6623270e41b383306513b26dd0972d02a62dabdc" translate="yes" xml:space="preserve">
          <source>Arc::weak_count</source>
          <target state="translated">Arc::weak_count</target>
        </trans-unit>
        <trans-unit id="bcef6163f2366764b97712c1e02d4e8de8728060" translate="yes" xml:space="preserve">
          <source>Archimedes' constant (&amp;pi;)</source>
          <target state="translated">アルキメデスの定数（&amp;pi;）</target>
        </trans-unit>
        <trans-unit id="02d36a6ada7ba4a678771b24dc19a1d26e06d584" translate="yes" xml:space="preserve">
          <source>Are allowed to be null</source>
          <target state="translated">nullであることが許されています。</target>
        </trans-unit>
        <trans-unit id="7bcd778277bf4c00f69bda3256c3718425635b4a" translate="yes" xml:space="preserve">
          <source>Are allowed to ignore the borrowing rules by having both immutable and mutable pointers or multiple mutable pointers to the same location</source>
          <target state="translated">同じ場所への不変型と変異型の両方のポインタ、または複数の変異型ポインタを持つことで、借用ルールを無視することができます。</target>
        </trans-unit>
        <trans-unit id="79232b3ded8b7d0b1c86ea5d989ec5b302602c26" translate="yes" xml:space="preserve">
          <source>Aren&amp;rsquo;t guaranteed to point to valid memory</source>
          <target state="translated">有効なメモリを指すことが保証されていません</target>
        </trans-unit>
        <trans-unit id="4bf0024c4bc943f998126635e2b2826496ec8582" translate="yes" xml:space="preserve">
          <source>Args</source>
          <target state="translated">Args</target>
        </trans-unit>
        <trans-unit id="11997e344b54f51ca26eed6c34abb35c17719846" translate="yes" xml:space="preserve">
          <source>Args::all</source>
          <target state="translated">Args::all</target>
        </trans-unit>
        <trans-unit id="834e48f2681bde9c6de2a1d6fe4ea459480940da" translate="yes" xml:space="preserve">
          <source>Args::any</source>
          <target state="translated">Args::any</target>
        </trans-unit>
        <trans-unit id="852de3f0c6270398ac654986a4377df5f50c393c" translate="yes" xml:space="preserve">
          <source>Args::borrow</source>
          <target state="translated">Args::borrow</target>
        </trans-unit>
        <trans-unit id="8aa2c84655d80e6196471b5bce3e6eb8f9d79f61" translate="yes" xml:space="preserve">
          <source>Args::borrow_mut</source>
          <target state="translated">Args::borrow_mut</target>
        </trans-unit>
        <trans-unit id="6235293cd6910b3c74977e8687ec90afadb03077" translate="yes" xml:space="preserve">
          <source>Args::by_ref</source>
          <target state="translated">Args::by_ref</target>
        </trans-unit>
        <trans-unit id="4438640d50dfd08974f7aac6bf0d2aecb461c3f5" translate="yes" xml:space="preserve">
          <source>Args::chain</source>
          <target state="translated">Args::chain</target>
        </trans-unit>
        <trans-unit id="fd443c43e63db2a659b5f263c42823b6b670bd44" translate="yes" xml:space="preserve">
          <source>Args::cloned</source>
          <target state="translated">Args::cloned</target>
        </trans-unit>
        <trans-unit id="46277936c8445a042e94cc3a26942468f91253e9" translate="yes" xml:space="preserve">
          <source>Args::cmp</source>
          <target state="translated">Args::cmp</target>
        </trans-unit>
        <trans-unit id="48dd95fc8d6a07728f5a1cf7809d55524bf20034" translate="yes" xml:space="preserve">
          <source>Args::collect</source>
          <target state="translated">Args::collect</target>
        </trans-unit>
        <trans-unit id="9d0c9a3a72db97b3f6cab2b952f231796f20a50c" translate="yes" xml:space="preserve">
          <source>Args::copied</source>
          <target state="translated">Args::copied</target>
        </trans-unit>
        <trans-unit id="4fbeb4376f2e8b5f2155e6dbdec8f0740c8c04c9" translate="yes" xml:space="preserve">
          <source>Args::count</source>
          <target state="translated">Args::count</target>
        </trans-unit>
        <trans-unit id="4a06de4989ebe4016d146a0bb3c59a627e816965" translate="yes" xml:space="preserve">
          <source>Args::cycle</source>
          <target state="translated">Args::cycle</target>
        </trans-unit>
        <trans-unit id="dbd2a1eb1e566bd90b7919caa38a19ccb4685bdf" translate="yes" xml:space="preserve">
          <source>Args::enumerate</source>
          <target state="translated">Args::enumerate</target>
        </trans-unit>
        <trans-unit id="d22f2ebcc4f66631a8b99dffd5e42317b95a23c3" translate="yes" xml:space="preserve">
          <source>Args::eq</source>
          <target state="translated">Args::eq</target>
        </trans-unit>
        <trans-unit id="825fef0560348f1a6b9c4b27b6c58018c4f453ef" translate="yes" xml:space="preserve">
          <source>Args::filter</source>
          <target state="translated">Args::filter</target>
        </trans-unit>
        <trans-unit id="ab08ac4972fbd0c43add6cedcff53d5b9d40bc35" translate="yes" xml:space="preserve">
          <source>Args::filter_map</source>
          <target state="translated">Args::filter_map</target>
        </trans-unit>
        <trans-unit id="86056472eedb8eee7dbef63077919c7204cfa67b" translate="yes" xml:space="preserve">
          <source>Args::find</source>
          <target state="translated">Args::find</target>
        </trans-unit>
        <trans-unit id="e877bf0f63fb53fe48a38a7b49bdba91724d4dc9" translate="yes" xml:space="preserve">
          <source>Args::find_map</source>
          <target state="translated">Args::find_map</target>
        </trans-unit>
        <trans-unit id="09774b60a814c8b4104b1538a3d2232fe023f569" translate="yes" xml:space="preserve">
          <source>Args::flat_map</source>
          <target state="translated">Args::flat_map</target>
        </trans-unit>
        <trans-unit id="5eeb63d240af1b2ec0ce621fdcebe38dd652ee35" translate="yes" xml:space="preserve">
          <source>Args::flatten</source>
          <target state="translated">Args::flatten</target>
        </trans-unit>
        <trans-unit id="2824f41303961ce133138bbb9cdb7c73c49c034e" translate="yes" xml:space="preserve">
          <source>Args::fmt</source>
          <target state="translated">Args::fmt</target>
        </trans-unit>
        <trans-unit id="bdc321df53c7563363bb091073cc745371fec866" translate="yes" xml:space="preserve">
          <source>Args::fold</source>
          <target state="translated">Args::fold</target>
        </trans-unit>
        <trans-unit id="0bfb713bd78f482e7b1b8ccad2fb85c3059b45d0" translate="yes" xml:space="preserve">
          <source>Args::for_each</source>
          <target state="translated">Args::for_each</target>
        </trans-unit>
        <trans-unit id="bf62c774de1d7877320ea0fd8f640a1da6f668ae" translate="yes" xml:space="preserve">
          <source>Args::from</source>
          <target state="translated">Args::from</target>
        </trans-unit>
        <trans-unit id="4b2d02be4c99f1b285f809b3bada4d6e1d5de2c4" translate="yes" xml:space="preserve">
          <source>Args::fuse</source>
          <target state="translated">Args::fuse</target>
        </trans-unit>
        <trans-unit id="e9d47e65f07958eb4c539e9aa4794d4c91301d74" translate="yes" xml:space="preserve">
          <source>Args::ge</source>
          <target state="translated">Args::ge</target>
        </trans-unit>
        <trans-unit id="41716a498dc92ecead97571d6a7701faab3446af" translate="yes" xml:space="preserve">
          <source>Args::gt</source>
          <target state="translated">Args::gt</target>
        </trans-unit>
        <trans-unit id="ffe407b598fd64603f4cdfacf4c22332227c8373" translate="yes" xml:space="preserve">
          <source>Args::inspect</source>
          <target state="translated">Args::inspect</target>
        </trans-unit>
        <trans-unit id="4982b89e7bce55b901b94270e4e00a5ac09ba3e0" translate="yes" xml:space="preserve">
          <source>Args::into</source>
          <target state="translated">Args::into</target>
        </trans-unit>
        <trans-unit id="2fc7d02ccfe30c7d6decfb090f0a5dcabb2e0c43" translate="yes" xml:space="preserve">
          <source>Args::into_iter</source>
          <target state="translated">Args::into_iter</target>
        </trans-unit>
        <trans-unit id="0cc324954d5e5cfc9f0640a45fd39c06463171c8" translate="yes" xml:space="preserve">
          <source>Args::is_empty</source>
          <target state="translated">Args::is_empty</target>
        </trans-unit>
        <trans-unit id="9320ccfba6fb85da2cd8f4ea07146d9e90d55e69" translate="yes" xml:space="preserve">
          <source>Args::is_sorted</source>
          <target state="translated">Args::is_sorted</target>
        </trans-unit>
        <trans-unit id="18a7ac322b2479e407afbb8da7a0d6e559099523" translate="yes" xml:space="preserve">
          <source>Args::is_sorted_by</source>
          <target state="translated">Args::is_sorted_by</target>
        </trans-unit>
        <trans-unit id="8d806d23a84355aca10dbfd0171313e44075d284" translate="yes" xml:space="preserve">
          <source>Args::is_sorted_by_key</source>
          <target state="translated">Args::is_sorted_by_key</target>
        </trans-unit>
        <trans-unit id="c6efefb9b080afb608e934c39e299c62aaaa6fc0" translate="yes" xml:space="preserve">
          <source>Args::last</source>
          <target state="translated">Args::last</target>
        </trans-unit>
        <trans-unit id="04a547ce59955db8d408e3c98a9edc55fc1c82e5" translate="yes" xml:space="preserve">
          <source>Args::le</source>
          <target state="translated">Args::le</target>
        </trans-unit>
        <trans-unit id="f88c3621988f7c3fdb34fd16f1e9ea82cfbcea71" translate="yes" xml:space="preserve">
          <source>Args::len</source>
          <target state="translated">Args::len</target>
        </trans-unit>
        <trans-unit id="01c7bcbbd63e3d113fbbd64d77442cb638b835d1" translate="yes" xml:space="preserve">
          <source>Args::lt</source>
          <target state="translated">Args::lt</target>
        </trans-unit>
        <trans-unit id="039581be23b84f6e55f8a2add1bc6bfa811639f2" translate="yes" xml:space="preserve">
          <source>Args::map</source>
          <target state="translated">Args::map</target>
        </trans-unit>
        <trans-unit id="994f671b6e95e4ae34dd6e2c082281ea8ea61313" translate="yes" xml:space="preserve">
          <source>Args::max</source>
          <target state="translated">Args::max</target>
        </trans-unit>
        <trans-unit id="74a4e2d3f00af26f6a0ad2245e073d3b5a0cd3d2" translate="yes" xml:space="preserve">
          <source>Args::max_by</source>
          <target state="translated">Args::max_by</target>
        </trans-unit>
        <trans-unit id="deb310f6f85b56ebc7fe38e266f44493563fc6cf" translate="yes" xml:space="preserve">
          <source>Args::max_by_key</source>
          <target state="translated">Args::max_by_key</target>
        </trans-unit>
        <trans-unit id="dde4047d67a5b16733c51e9703c57fbdf575a4e4" translate="yes" xml:space="preserve">
          <source>Args::min</source>
          <target state="translated">Args::min</target>
        </trans-unit>
        <trans-unit id="403ed2480b700e9a65c715919e29b948e24f4b97" translate="yes" xml:space="preserve">
          <source>Args::min_by</source>
          <target state="translated">Args::min_by</target>
        </trans-unit>
        <trans-unit id="61041884b34bb5182aa5504e5448d5bac7a830ec" translate="yes" xml:space="preserve">
          <source>Args::min_by_key</source>
          <target state="translated">Args::min_by_key</target>
        </trans-unit>
        <trans-unit id="254900be5bd6dab1a3e1e8f2d8135ce517862048" translate="yes" xml:space="preserve">
          <source>Args::ne</source>
          <target state="translated">Args::ne</target>
        </trans-unit>
        <trans-unit id="d7cb929a8cedef153a932b274a4aba45b153fd66" translate="yes" xml:space="preserve">
          <source>Args::next</source>
          <target state="translated">Args::next</target>
        </trans-unit>
        <trans-unit id="2dcb9f5424d93dea8b755e44bed8488448308f48" translate="yes" xml:space="preserve">
          <source>Args::next_back</source>
          <target state="translated">Args::next_back</target>
        </trans-unit>
        <trans-unit id="7117eeb7949ae721ac3782d5eedc483a09ccac61" translate="yes" xml:space="preserve">
          <source>Args::nth</source>
          <target state="translated">Args::nth</target>
        </trans-unit>
        <trans-unit id="920bfede689288166976e1de3db01783fca343a2" translate="yes" xml:space="preserve">
          <source>Args::nth_back</source>
          <target state="translated">Args::nth_back</target>
        </trans-unit>
        <trans-unit id="827560f3761313e8fff14e1e90ac372f2bcfaccc" translate="yes" xml:space="preserve">
          <source>Args::partial_cmp</source>
          <target state="translated">Args::partial_cmp</target>
        </trans-unit>
        <trans-unit id="7fd69506fed5f2e3f675c8f01ed77c7a8573ed9f" translate="yes" xml:space="preserve">
          <source>Args::partition</source>
          <target state="translated">Args::partition</target>
        </trans-unit>
        <trans-unit id="0f80b2cd77c5343960cc6f37513564b206a6f770" translate="yes" xml:space="preserve">
          <source>Args::peekable</source>
          <target state="translated">Args::peekable</target>
        </trans-unit>
        <trans-unit id="d35d46b1d259e3d81a7c87e03f05934ae588d4a7" translate="yes" xml:space="preserve">
          <source>Args::position</source>
          <target state="translated">Args::position</target>
        </trans-unit>
        <trans-unit id="4ed9e8e605899d2c4c96340af8f07ac7b263210f" translate="yes" xml:space="preserve">
          <source>Args::product</source>
          <target state="translated">Args::product</target>
        </trans-unit>
        <trans-unit id="eb295f32cccde70f35d8df7df01c50708f27bd93" translate="yes" xml:space="preserve">
          <source>Args::rev</source>
          <target state="translated">Args::rev</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
