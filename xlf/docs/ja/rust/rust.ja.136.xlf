<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="rust">
    <body>
      <group id="rust">
        <trans-unit id="0a96531a2ad16ab4c68e8dd30a04fcb8b88d0c9e" translate="yes" xml:space="preserve">
          <source>Inserts a key-value pair into the map.</source>
          <target state="translated">キーと値のペアをマップに挿入します。</target>
        </trans-unit>
        <trans-unit id="bc42a512a6b6856f7f8d324cb00ee4762d1d8f2a" translate="yes" xml:space="preserve">
          <source>Inserts a new element into the &lt;code&gt;LinkedList&lt;/code&gt; after the current one.</source>
          <target state="translated">現在の要素の後に新しい要素を &lt;code&gt;LinkedList&lt;/code&gt; に挿入します。</target>
        </trans-unit>
        <trans-unit id="72f7ad47cd6a43af311ed7238acb4e8855c0abcd" translate="yes" xml:space="preserve">
          <source>Inserts a new element into the &lt;code&gt;LinkedList&lt;/code&gt; before the current one.</source>
          <target state="translated">現在の要素の前に新しい要素を &lt;code&gt;LinkedList&lt;/code&gt; に挿入します。</target>
        </trans-unit>
        <trans-unit id="6f07650e645ae306862b323d418b09fad3b7f7a0" translate="yes" xml:space="preserve">
          <source>Inserts a string slice into this &lt;code&gt;String&lt;/code&gt; at a byte position.</source>
          <target state="translated">文字列スライスをこの &lt;code&gt;String&lt;/code&gt; のバイト位置に挿入します。</target>
        </trans-unit>
        <trans-unit id="7d8655d30bbaeaee48aa3f55378c0fe2a4d62e4c" translate="yes" xml:space="preserve">
          <source>Inserts a value computed from &lt;code&gt;f&lt;/code&gt; into the option if it is &lt;a href=&quot;#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt;, then returns a mutable reference to the contained value.</source>
          <target state="translated">&lt;a href=&quot;#variant.None&quot;&gt; &lt;code&gt;None&lt;/code&gt; の&lt;/a&gt;場合、 &lt;code&gt;f&lt;/code&gt; から計算された値をオプションに挿入し、含まれている値への変更可能な参照を返します。</target>
        </trans-unit>
        <trans-unit id="cf859e7e91bd94533ccef650a59dbaf129cf0d1c" translate="yes" xml:space="preserve">
          <source>Inserts a value computed from &lt;code&gt;f&lt;/code&gt; into the option if it is &lt;a href=&quot;enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt;, then returns a mutable reference to the contained value.</source>
          <target state="translated">&lt;a href=&quot;enum.option#variant.None&quot;&gt; &lt;code&gt;None&lt;/code&gt; の&lt;/a&gt;場合、 &lt;code&gt;f&lt;/code&gt; から計算された値をオプションに挿入し、含まれている値への可変参照を返します。</target>
        </trans-unit>
        <trans-unit id="bd878e1d7609b46228a7e1a93fb6e8fa8ab178e1" translate="yes" xml:space="preserve">
          <source>Inserts a value computed from &lt;code&gt;f&lt;/code&gt; into the set if the given &lt;code&gt;value&lt;/code&gt; is not present, then returns a reference to the value in the set.</source>
          <target state="translated">指定された &lt;code&gt;value&lt;/code&gt; が存在しない場合、 &lt;code&gt;f&lt;/code&gt; から計算された値をセットに挿入し、セット内の値への参照を返します。</target>
        </trans-unit>
        <trans-unit id="e4c367e5c15ba31d0f216cb7099e2418408fa476" translate="yes" xml:space="preserve">
          <source>Inserts all new key-values from the iterator and replaces values with existing keys with new values returned from the iterator.</source>
          <target state="translated">イテレータからすべての新しいキー-値を挿入し、既存のキーの値をイテレータから返された新しい値に置き換えます。</target>
        </trans-unit>
        <trans-unit id="033e5469d3495f120ca34f88432068fa89f314f7" translate="yes" xml:space="preserve">
          <source>Inserts an element at &lt;code&gt;index&lt;/code&gt; within the &lt;code&gt;VecDeque&lt;/code&gt;, shifting all elements with indices greater than or equal to &lt;code&gt;index&lt;/code&gt; towards the back.</source>
          <target state="translated">インサートの要素 &lt;code&gt;index&lt;/code&gt; 内 &lt;code&gt;VecDeque&lt;/code&gt; 、より大きいまたは等しいインデックスを有するすべての要素をシフト &lt;code&gt;index&lt;/code&gt; 背面に向かっ。</target>
        </trans-unit>
        <trans-unit id="12d5beb4f208ab2afd01a906d06c0928be9bf9f4" translate="yes" xml:space="preserve">
          <source>Inserts an element at position &lt;code&gt;index&lt;/code&gt; within the vector, shifting all elements after it to the right.</source>
          <target state="translated">ベクトル内の位置 &lt;code&gt;index&lt;/code&gt; に要素を挿入し、その後のすべての要素を右にシフトします。</target>
        </trans-unit>
        <trans-unit id="9bb4759e4324e0dbf38962bc28c2aed1b8022c83" translate="yes" xml:space="preserve">
          <source>Inserts an owned copy of the given &lt;code&gt;value&lt;/code&gt; into the set if it is not present, then returns a reference to the value in the set.</source>
          <target state="translated">指定された &lt;code&gt;value&lt;/code&gt; 所有コピーが存在しない場合はセットに挿入し、セット内の値への参照を返します。</target>
        </trans-unit>
        <trans-unit id="32004441f1f355a905cf795d20839963739fd9b1" translate="yes" xml:space="preserve">
          <source>Inserts or updates an environment variable mapping.</source>
          <target state="translated">環境変数のマッピングを挿入または更新します。</target>
        </trans-unit>
        <trans-unit id="d407882b4597c3f9cc373c79e663633b3651a26e" translate="yes" xml:space="preserve">
          <source>Inserts the elements from the given &lt;code&gt;LinkedList&lt;/code&gt; after the current one.</source>
          <target state="translated">指定された &lt;code&gt;LinkedList&lt;/code&gt; の要素を現在の要素の後に挿入します。</target>
        </trans-unit>
        <trans-unit id="f751f427f5a00ba1f4ba152bfd16fef910d4b118" translate="yes" xml:space="preserve">
          <source>Inserts the elements from the given &lt;code&gt;LinkedList&lt;/code&gt; before the current one.</source>
          <target state="translated">指定された &lt;code&gt;LinkedList&lt;/code&gt; の要素を現在の要素の前に挿入します。</target>
        </trans-unit>
        <trans-unit id="ec935fc4eff4c401230b5e9494768220ac04ae85" translate="yes" xml:space="preserve">
          <source>Inserts the given &lt;code&gt;value&lt;/code&gt; into the set if it is not present, then returns a reference to the value in the set.</source>
          <target state="translated">指定された &lt;code&gt;value&lt;/code&gt; が存在しない場合はセットに挿入し、セット内の値への参照を返します。</target>
        </trans-unit>
        <trans-unit id="10a95bea4ce01379ab8d7b752bb3fe35f6abf8b1" translate="yes" xml:space="preserve">
          <source>Inserts the given element just after the element most recently returned by &lt;code&gt;.next()&lt;/code&gt;. The inserted element does not appear in the iteration.</source>
          <target state="translated">&lt;code&gt;.next()&lt;/code&gt; によって最後に返された要素の直後に、指定された要素を挿入します。挿入された要素は反復に表示されません。</target>
        </trans-unit>
        <trans-unit id="af470e35471ccbf3c83cd6c715dc2e1540c10617" translate="yes" xml:space="preserve">
          <source>Inside the &lt;code&gt;for&lt;/code&gt; loop, we search for the byte that represents the space by using the byte literal syntax. If we find a space, we return the position. Otherwise, we return the length of the string by using &lt;code&gt;s.len()&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;for&lt;/code&gt; ループ内では、バイトリテラル構文を使用して、スペースを表すバイトを検索します。スペースが見つかったら、位置を返します。それ以外の場合は、 &lt;code&gt;s.len()&lt;/code&gt; を使用して文字列の長さを返します。</target>
        </trans-unit>
        <trans-unit id="49f499d15e7cb0aca0c18bf8de68e4d96c591f23" translate="yes" xml:space="preserve">
          <source>Inside the &lt;code&gt;main&lt;/code&gt; function is the following code:</source>
          <target state="translated">&lt;code&gt;main&lt;/code&gt; 関数内には次のコードがあります。</target>
        </trans-unit>
        <trans-unit id="743099d758832aebc06d09f96504a2db95574113" translate="yes" xml:space="preserve">
          <source>Inside the function signature and body, the name of the type parameter can be used as a type name. &lt;a href=&quot;traits&quot;&gt;Trait&lt;/a&gt; bounds can be specified for type parameters to allow methods with that trait to be called on values of that type. This is specified using the &lt;code&gt;where&lt;/code&gt; syntax:</source>
          <target state="translated">関数のシグネチャと本体の内部では、型パラメーターの名前を型名として使用できます。型パラメーターに&lt;a href=&quot;traits&quot;&gt;特性&lt;/a&gt;境界を指定して、その特性を持つメソッドをその型の値で呼び出すことができます。これは、 &lt;code&gt;where&lt;/code&gt; 構文を使用して指定されます。</target>
        </trans-unit>
        <trans-unit id="18ca87afec4298d9de864e32b4eeb6a31786e496" translate="yes" xml:space="preserve">
          <source>Inspect</source>
          <target state="translated">Inspect</target>
        </trans-unit>
        <trans-unit id="82ab79e7a84c19ee615f55de9576c57f6039cbaf" translate="yes" xml:space="preserve">
          <source>Inspect::all</source>
          <target state="translated">Inspect::all</target>
        </trans-unit>
        <trans-unit id="af62c7ee7c236c7e17a30a78c2b4fcf9f79c0b4b" translate="yes" xml:space="preserve">
          <source>Inspect::any</source>
          <target state="translated">Inspect::any</target>
        </trans-unit>
        <trans-unit id="b077905231123238f4a7bb9fcc60ce75f6089a93" translate="yes" xml:space="preserve">
          <source>Inspect::borrow</source>
          <target state="translated">Inspect::borrow</target>
        </trans-unit>
        <trans-unit id="dac186ed9d0b7d57d599f5ce890d1950aca83d7e" translate="yes" xml:space="preserve">
          <source>Inspect::borrow_mut</source>
          <target state="translated">Inspect::borrow_mut</target>
        </trans-unit>
        <trans-unit id="eff030734cfa782924c1060ba45ae2c9617ddff7" translate="yes" xml:space="preserve">
          <source>Inspect::by_ref</source>
          <target state="translated">Inspect::by_ref</target>
        </trans-unit>
        <trans-unit id="c6e04f66ee740f870c7db51ddce5c394c1f5b366" translate="yes" xml:space="preserve">
          <source>Inspect::chain</source>
          <target state="translated">Inspect::chain</target>
        </trans-unit>
        <trans-unit id="af5a3161569b3cc4b1af16e096368ee36af988fd" translate="yes" xml:space="preserve">
          <source>Inspect::clone</source>
          <target state="translated">Inspect::clone</target>
        </trans-unit>
        <trans-unit id="4b8f1150495fa883babb18b3738d6b381ca35719" translate="yes" xml:space="preserve">
          <source>Inspect::clone_from</source>
          <target state="translated">Inspect::clone_from</target>
        </trans-unit>
        <trans-unit id="f20fee187ea64cd2682fd76ef634f46c65ea7337" translate="yes" xml:space="preserve">
          <source>Inspect::clone_into</source>
          <target state="translated">Inspect::clone_into</target>
        </trans-unit>
        <trans-unit id="91d60f6fbbeb3649b6191055cd46e14268f30490" translate="yes" xml:space="preserve">
          <source>Inspect::cloned</source>
          <target state="translated">Inspect::cloned</target>
        </trans-unit>
        <trans-unit id="85a2573bc9e0fcf94624c4b800d4b5742004e819" translate="yes" xml:space="preserve">
          <source>Inspect::cmp</source>
          <target state="translated">Inspect::cmp</target>
        </trans-unit>
        <trans-unit id="bb80987b9610829409c7cf311bd83c99cafb9358" translate="yes" xml:space="preserve">
          <source>Inspect::collect</source>
          <target state="translated">Inspect::collect</target>
        </trans-unit>
        <trans-unit id="6c4755e22c04a1a561bd40c8f7ed7cc9e14afdd5" translate="yes" xml:space="preserve">
          <source>Inspect::copied</source>
          <target state="translated">Inspect::copied</target>
        </trans-unit>
        <trans-unit id="d91465c1eb8c20ff2aaf256018f191b4b51027db" translate="yes" xml:space="preserve">
          <source>Inspect::count</source>
          <target state="translated">Inspect::count</target>
        </trans-unit>
        <trans-unit id="f6a3530affc366af3c3031653f04c92d94544c6f" translate="yes" xml:space="preserve">
          <source>Inspect::cycle</source>
          <target state="translated">Inspect::cycle</target>
        </trans-unit>
        <trans-unit id="2ef8727649c440036fbfd895887f256337974360" translate="yes" xml:space="preserve">
          <source>Inspect::enumerate</source>
          <target state="translated">Inspect::enumerate</target>
        </trans-unit>
        <trans-unit id="90d29ac40ce8f2f13585d9242b559870d571b0d2" translate="yes" xml:space="preserve">
          <source>Inspect::eq</source>
          <target state="translated">Inspect::eq</target>
        </trans-unit>
        <trans-unit id="3c8af74b0f8d034e93cc2689eb1582aea35cd194" translate="yes" xml:space="preserve">
          <source>Inspect::filter</source>
          <target state="translated">Inspect::filter</target>
        </trans-unit>
        <trans-unit id="0c1d967d962d5542a61729409b6700ebf061e41a" translate="yes" xml:space="preserve">
          <source>Inspect::filter_map</source>
          <target state="translated">Inspect::filter_map</target>
        </trans-unit>
        <trans-unit id="ef11d99b08eee4456cbbcf30c8d5eaf30c8a59bd" translate="yes" xml:space="preserve">
          <source>Inspect::find</source>
          <target state="translated">Inspect::find</target>
        </trans-unit>
        <trans-unit id="de75c9aaf20b405a1c60fd94f4dbe93e04bb79b9" translate="yes" xml:space="preserve">
          <source>Inspect::find_map</source>
          <target state="translated">Inspect::find_map</target>
        </trans-unit>
        <trans-unit id="4bdd706bdfb04e01d1c9af213d5586e2748a2444" translate="yes" xml:space="preserve">
          <source>Inspect::flat_map</source>
          <target state="translated">Inspect::flat_map</target>
        </trans-unit>
        <trans-unit id="adc62575b9ec6c48f327e8e73d67dd12a37fd54f" translate="yes" xml:space="preserve">
          <source>Inspect::flatten</source>
          <target state="translated">Inspect::flatten</target>
        </trans-unit>
        <trans-unit id="bf64f53f8ddafacb88390ac8654fa5e287a73a7c" translate="yes" xml:space="preserve">
          <source>Inspect::fmt</source>
          <target state="translated">Inspect::fmt</target>
        </trans-unit>
        <trans-unit id="e1203b82ecf5e7d86eeb57728448c3072c4d31ca" translate="yes" xml:space="preserve">
          <source>Inspect::fold</source>
          <target state="translated">Inspect::fold</target>
        </trans-unit>
        <trans-unit id="e36f213246f9d2f573670ffad6151bd06e3fa586" translate="yes" xml:space="preserve">
          <source>Inspect::for_each</source>
          <target state="translated">Inspect::for_each</target>
        </trans-unit>
        <trans-unit id="e7c3f5132be9e5287630addcdee29ef7865ef06d" translate="yes" xml:space="preserve">
          <source>Inspect::from</source>
          <target state="translated">Inspect::from</target>
        </trans-unit>
        <trans-unit id="fe4bfacc82f6be56fbd2cbdacbd9f9c98dbeb4d0" translate="yes" xml:space="preserve">
          <source>Inspect::fuse</source>
          <target state="translated">Inspect::fuse</target>
        </trans-unit>
        <trans-unit id="18e6f5734f2efd739f3505c74a0c0d087a45dc44" translate="yes" xml:space="preserve">
          <source>Inspect::ge</source>
          <target state="translated">Inspect::ge</target>
        </trans-unit>
        <trans-unit id="51b9499c2f6bcf728ec327afb3eadb4e80054ef7" translate="yes" xml:space="preserve">
          <source>Inspect::gt</source>
          <target state="translated">Inspect::gt</target>
        </trans-unit>
        <trans-unit id="df78def6e9a15f9326fc866aa7162363317dfe3c" translate="yes" xml:space="preserve">
          <source>Inspect::inspect</source>
          <target state="translated">Inspect::inspect</target>
        </trans-unit>
        <trans-unit id="cde84bc6a1ac6acfa3ca27e39148f1683f7a639a" translate="yes" xml:space="preserve">
          <source>Inspect::into</source>
          <target state="translated">Inspect::into</target>
        </trans-unit>
        <trans-unit id="0c85f8b299a3868a074eadb647478881cca1f5f2" translate="yes" xml:space="preserve">
          <source>Inspect::into_iter</source>
          <target state="translated">Inspect::into_iter</target>
        </trans-unit>
        <trans-unit id="93bdbca2f9e35d0382950f48be8119f4c4cd8c39" translate="yes" xml:space="preserve">
          <source>Inspect::is_empty</source>
          <target state="translated">Inspect::is_empty</target>
        </trans-unit>
        <trans-unit id="6cb061e34832197156e0eae9b796318c52eae21c" translate="yes" xml:space="preserve">
          <source>Inspect::is_sorted</source>
          <target state="translated">Inspect::is_sorted</target>
        </trans-unit>
        <trans-unit id="0b700978aa9715e5aeabd053030f7e06e5dfdbe8" translate="yes" xml:space="preserve">
          <source>Inspect::is_sorted_by</source>
          <target state="translated">Inspect::is_sorted_by</target>
        </trans-unit>
        <trans-unit id="01522e5b03123c9816813cfbecb670d36dcf9bae" translate="yes" xml:space="preserve">
          <source>Inspect::is_sorted_by_key</source>
          <target state="translated">Inspect::is_sorted_by_key</target>
        </trans-unit>
        <trans-unit id="97c7968340cdbfc55e6279e63210f8319602c3b1" translate="yes" xml:space="preserve">
          <source>Inspect::last</source>
          <target state="translated">Inspect::last</target>
        </trans-unit>
        <trans-unit id="1641c5ab204a86bd76b52647b967fa3844ee555e" translate="yes" xml:space="preserve">
          <source>Inspect::le</source>
          <target state="translated">Inspect::le</target>
        </trans-unit>
        <trans-unit id="8fedbf984d9131a9c32910d0dd8cd507c9ae41f1" translate="yes" xml:space="preserve">
          <source>Inspect::len</source>
          <target state="translated">Inspect::len</target>
        </trans-unit>
        <trans-unit id="2aae13f70bf251eedf4d622e3c8e8d7ebe509466" translate="yes" xml:space="preserve">
          <source>Inspect::lt</source>
          <target state="translated">Inspect::lt</target>
        </trans-unit>
        <trans-unit id="3c10daeba2bb0af4fb652f56b13c4f712081ee60" translate="yes" xml:space="preserve">
          <source>Inspect::map</source>
          <target state="translated">Inspect::map</target>
        </trans-unit>
        <trans-unit id="d7ab985e5175dcb4007a24ad2073cd92e1ee725b" translate="yes" xml:space="preserve">
          <source>Inspect::max</source>
          <target state="translated">Inspect::max</target>
        </trans-unit>
        <trans-unit id="5548cb84f4f36e68e97b0766437c90e71bec388e" translate="yes" xml:space="preserve">
          <source>Inspect::max_by</source>
          <target state="translated">Inspect::max_by</target>
        </trans-unit>
        <trans-unit id="dce539004497e98e80382919f2b44ac4f343a42e" translate="yes" xml:space="preserve">
          <source>Inspect::max_by_key</source>
          <target state="translated">Inspect::max_by_key</target>
        </trans-unit>
        <trans-unit id="588f749d074427554e4d2614e02fff13ad9cd053" translate="yes" xml:space="preserve">
          <source>Inspect::min</source>
          <target state="translated">Inspect::min</target>
        </trans-unit>
        <trans-unit id="60fe678c3fd98d803d7a0a967cf63b451cdaf79c" translate="yes" xml:space="preserve">
          <source>Inspect::min_by</source>
          <target state="translated">Inspect::min_by</target>
        </trans-unit>
        <trans-unit id="2487d43ef493a331b1b717bc22f40361c1ef635a" translate="yes" xml:space="preserve">
          <source>Inspect::min_by_key</source>
          <target state="translated">Inspect::min_by_key</target>
        </trans-unit>
        <trans-unit id="ffc55c77a0a3cf78936319f186df9927df3e0ccd" translate="yes" xml:space="preserve">
          <source>Inspect::ne</source>
          <target state="translated">Inspect::ne</target>
        </trans-unit>
        <trans-unit id="a43fcb5b031c0ce3926f10977d7f6a10a43f6208" translate="yes" xml:space="preserve">
          <source>Inspect::next</source>
          <target state="translated">Inspect::next</target>
        </trans-unit>
        <trans-unit id="6febe3467ee6ea45f701752f64651a80fe8404ab" translate="yes" xml:space="preserve">
          <source>Inspect::next_back</source>
          <target state="translated">Inspect::next_back</target>
        </trans-unit>
        <trans-unit id="0f9d290f3781cb4ac95ed05a1829eb899359b7f9" translate="yes" xml:space="preserve">
          <source>Inspect::nth</source>
          <target state="translated">Inspect::nth</target>
        </trans-unit>
        <trans-unit id="633dbdd78d8cdd2854d53a34adbb447ab4e90331" translate="yes" xml:space="preserve">
          <source>Inspect::nth_back</source>
          <target state="translated">Inspect::nth_back</target>
        </trans-unit>
        <trans-unit id="fc4ec8ac3236397826a770a15ac100842f901223" translate="yes" xml:space="preserve">
          <source>Inspect::partial_cmp</source>
          <target state="translated">Inspect::partial_cmp</target>
        </trans-unit>
        <trans-unit id="40853e163585e56c8285d38aa5808ca70dc06c35" translate="yes" xml:space="preserve">
          <source>Inspect::partition</source>
          <target state="translated">Inspect::partition</target>
        </trans-unit>
        <trans-unit id="9434c28e5a571fffcf6e901ec452b5ae6a98ab38" translate="yes" xml:space="preserve">
          <source>Inspect::peekable</source>
          <target state="translated">Inspect::peekable</target>
        </trans-unit>
        <trans-unit id="43968189a660c3e4fac603b379bde0cd86ad697c" translate="yes" xml:space="preserve">
          <source>Inspect::position</source>
          <target state="translated">Inspect::position</target>
        </trans-unit>
        <trans-unit id="89b4972ffab1f05ea2fbde1d69c01d599123b156" translate="yes" xml:space="preserve">
          <source>Inspect::product</source>
          <target state="translated">Inspect::product</target>
        </trans-unit>
        <trans-unit id="0443653aa8a5d69a1b0d33c9f17e2c9254f5f5d7" translate="yes" xml:space="preserve">
          <source>Inspect::rev</source>
          <target state="translated">Inspect::rev</target>
        </trans-unit>
        <trans-unit id="7cb21ca083cda72535e929cef63f871b4f3cf651" translate="yes" xml:space="preserve">
          <source>Inspect::rfind</source>
          <target state="translated">Inspect::rfind</target>
        </trans-unit>
        <trans-unit id="f79e10ec84996051e8312ada6ac965fccb6846de" translate="yes" xml:space="preserve">
          <source>Inspect::rfold</source>
          <target state="translated">Inspect::rfold</target>
        </trans-unit>
        <trans-unit id="f78976291c9758ab5955ca36b2caedb636e425a2" translate="yes" xml:space="preserve">
          <source>Inspect::rposition</source>
          <target state="translated">Inspect::rposition</target>
        </trans-unit>
        <trans-unit id="2392835414c1e0b5afa2ace3b96de2ef5ff9083c" translate="yes" xml:space="preserve">
          <source>Inspect::scan</source>
          <target state="translated">Inspect::scan</target>
        </trans-unit>
        <trans-unit id="3e468495e996e3f520360765bb1983040761bf4d" translate="yes" xml:space="preserve">
          <source>Inspect::size_hint</source>
          <target state="translated">Inspect::size_hint</target>
        </trans-unit>
        <trans-unit id="65d5d88728cb3772dee70aa6ae26fe906858cdfa" translate="yes" xml:space="preserve">
          <source>Inspect::skip</source>
          <target state="translated">Inspect::skip</target>
        </trans-unit>
        <trans-unit id="e4df02a7fa585f7bf67e2c2e7620ec2b27bf223a" translate="yes" xml:space="preserve">
          <source>Inspect::skip_while</source>
          <target state="translated">Inspect::skip_while</target>
        </trans-unit>
        <trans-unit id="81611aac4ee662fdf8e1bb6309a5396db2852250" translate="yes" xml:space="preserve">
          <source>Inspect::step_by</source>
          <target state="translated">Inspect::step_by</target>
        </trans-unit>
        <trans-unit id="333ad3419c346fac8b8d3c0fd4cc6a07785ed3a9" translate="yes" xml:space="preserve">
          <source>Inspect::sum</source>
          <target state="translated">Inspect::sum</target>
        </trans-unit>
        <trans-unit id="07c4846ffa005c2b497a796ecdc14a564003a4a8" translate="yes" xml:space="preserve">
          <source>Inspect::take</source>
          <target state="translated">Inspect::take</target>
        </trans-unit>
        <trans-unit id="4f28a1534dff8b2e2c944f0bfaafe96286e1baaa" translate="yes" xml:space="preserve">
          <source>Inspect::take_while</source>
          <target state="translated">Inspect::take_while</target>
        </trans-unit>
        <trans-unit id="2a423ad3eae2fec9385b69311ba93e53244f0ad5" translate="yes" xml:space="preserve">
          <source>Inspect::to_owned</source>
          <target state="translated">Inspect::to_owned</target>
        </trans-unit>
        <trans-unit id="a6362c52c757937e435b1eeef2d9ab055596b389" translate="yes" xml:space="preserve">
          <source>Inspect::try_fold</source>
          <target state="translated">Inspect::try_fold</target>
        </trans-unit>
        <trans-unit id="b44f87043be8c6e37fe81b5e52b558de6e2af9af" translate="yes" xml:space="preserve">
          <source>Inspect::try_for_each</source>
          <target state="translated">Inspect::try_for_each</target>
        </trans-unit>
        <trans-unit id="2933e22002dc23a223d51ac3b5541e6507691dd0" translate="yes" xml:space="preserve">
          <source>Inspect::try_from</source>
          <target state="translated">Inspect::try_from</target>
        </trans-unit>
        <trans-unit id="b21cad5abb074d64e5dc5deb026a557335ea6176" translate="yes" xml:space="preserve">
          <source>Inspect::try_into</source>
          <target state="translated">Inspect::try_into</target>
        </trans-unit>
        <trans-unit id="1fd81bf07a71bc1209ac8f8b1e33f27ed1378a45" translate="yes" xml:space="preserve">
          <source>Inspect::try_rfold</source>
          <target state="translated">Inspect::try_rfold</target>
        </trans-unit>
        <trans-unit id="0e9b8b3f317cc849ace42df081dd27ff57c0541e" translate="yes" xml:space="preserve">
          <source>Inspect::type_id</source>
          <target state="translated">Inspect::type_id</target>
        </trans-unit>
        <trans-unit id="41140164c66c290cc48804ad982a4e7115e22da9" translate="yes" xml:space="preserve">
          <source>Inspect::unzip</source>
          <target state="translated">Inspect::unzip</target>
        </trans-unit>
        <trans-unit id="fe0d4b72621d75d8a76f592b0efd07f85c74dca9" translate="yes" xml:space="preserve">
          <source>Inspect::zip</source>
          <target state="translated">Inspect::zip</target>
        </trans-unit>
        <trans-unit id="8a955d8f62cddda7e4b47eb2772b795f5ac4e929" translate="yes" xml:space="preserve">
          <source>Inspecting a foreign C string:</source>
          <target state="translated">外部のC文字列を検査します。</target>
        </trans-unit>
        <trans-unit id="24c028aad5e4f71eb7323a7fdf907c77523124b6" translate="yes" xml:space="preserve">
          <source>Inspection and manipulation of the process's environment.</source>
          <target state="translated">プロセスの環境の検査・操作。</target>
        </trans-unit>
        <trans-unit id="2cc2859dfe537be8955a457d12a963c9483cf55a" translate="yes" xml:space="preserve">
          <source>Inspects an environment variable at compile time.</source>
          <target state="translated">コンパイル時に環境変数を検査します。</target>
        </trans-unit>
        <trans-unit id="da805945f5409d032b925fa086323fea9942dc3f" translate="yes" xml:space="preserve">
          <source>Install binaries from &lt;a href=&quot;https://crates.io/&quot;&gt;crates.io&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://crates.io/&quot;&gt;crates.io&lt;/a&gt;からバイナリをインストールする</target>
        </trans-unit>
        <trans-unit id="27807feadc6086bb00cc2f2fc11c34f918ce0b35" translate="yes" xml:space="preserve">
          <source>Install the latest stable version of Rust using &lt;code&gt;rustup&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;rustup&lt;/code&gt; を使用して最新の安定したバージョンのRustをインストールする</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">Installation</target>
        </trans-unit>
        <trans-unit id="8bc95ab544ffc801a72a650102cb1b4b0031b02c" translate="yes" xml:space="preserve">
          <source>Installing &lt;code id=&quot;installing-rustup-on-linux-or-macos&quot;&gt;rustup&lt;/code&gt; on Linux or macOS</source>
          <target state="translated">LinuxまたはmacOSへの &lt;code id=&quot;installing-rustup-on-linux-or-macos&quot;&gt;rustup&lt;/code&gt; のインストール</target>
        </trans-unit>
        <trans-unit id="d41546865affb2f20149c73fe77f1fc24d402ca2" translate="yes" xml:space="preserve">
          <source>Installing &lt;code id=&quot;installing-rustup-on-windows&quot;&gt;rustup&lt;/code&gt; on Windows</source>
          <target state="translated">Windowsへの &lt;code id=&quot;installing-rustup-on-windows&quot;&gt;rustup&lt;/code&gt; のインストール</target>
        </trans-unit>
        <trans-unit id="e19f38815d4acff6e4f527222a8aef2789228129" translate="yes" xml:space="preserve">
          <source>Installing Binaries from Crates.io with &lt;code id=&quot;installing-binaries-from-cratesio-with-cargo-install&quot;&gt;cargo install&lt;/code&gt;</source>
          <target state="translated">&lt;code id=&quot;installing-binaries-from-cratesio-with-cargo-install&quot;&gt;cargo install&lt;/code&gt; Crates.ioからバイナリをインストールする</target>
        </trans-unit>
        <trans-unit id="b810516d3307cdf27a35ee79c057d48b6aa21230" translate="yes" xml:space="preserve">
          <source>Installing Rust on Linux, macOS, and Windows</source>
          <target state="translated">Linux、macOS、WindowsへのRustのインストール</target>
        </trans-unit>
        <trans-unit id="2c30b9b10b587e1e4e3853ef85ec4740848abbd7" translate="yes" xml:space="preserve">
          <source>Instances of &lt;code&gt;Fn&lt;/code&gt; can be called repeatedly without mutating state.</source>
          <target state="translated">&lt;code&gt;Fn&lt;/code&gt; のインスタンスは、状態を変更せずに繰り返し呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="1322a032825805d3a73d3fe7e3a12985cf1de692" translate="yes" xml:space="preserve">
          <source>Instances of &lt;code&gt;FnMut&lt;/code&gt; can be called repeatedly and may mutate state.</source>
          <target state="translated">&lt;code&gt;FnMut&lt;/code&gt; のインスタンスは繰り返し呼び出すことができ、状態が変化する場合があります。</target>
        </trans-unit>
        <trans-unit id="b9bc8df98d67671ea9af2ebbd9472094277d62c7" translate="yes" xml:space="preserve">
          <source>Instances of &lt;code&gt;FnOnce&lt;/code&gt; can be called, but might not be callable multiple times. Because of this, if the only thing known about a type is that it implements &lt;code&gt;FnOnce&lt;/code&gt;, it can only be called once.</source>
          <target state="translated">&lt;code&gt;FnOnce&lt;/code&gt; のインスタンスは呼び出すことができますが、複数回呼び出すことができない場合があります。このため、型についてわかっていることが &lt;code&gt;FnOnce&lt;/code&gt; を実装していることだけである場合、一度しか呼び出せません。</target>
        </trans-unit>
        <trans-unit id="5b9d31413b772c5dc3e318115ee395c8ad114636" translate="yes" xml:space="preserve">
          <source>Instances of &lt;code&gt;Hasher&lt;/code&gt; usually represent state that is changed while hashing data.</source>
          <target state="translated">&lt;code&gt;Hasher&lt;/code&gt; のインスタンスは通常、データのハッシュ中に変更される状態を表します。</target>
        </trans-unit>
        <trans-unit id="21ec3e515a993282791572f7098d9de91b54a575" translate="yes" xml:space="preserve">
          <source>Instances of this &lt;code&gt;struct&lt;/code&gt; can be obtained by matching against the &lt;a href=&quot;enum.component#variant.Prefix&quot;&gt;&lt;code&gt;Prefix&lt;/code&gt; variant&lt;/a&gt; on &lt;a href=&quot;enum.component&quot;&gt;&lt;code&gt;Component&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この &lt;code&gt;struct&lt;/code&gt; インスタンスは、&lt;a href=&quot;enum.component&quot;&gt; &lt;code&gt;Component&lt;/code&gt; の&lt;/a&gt;&lt;a href=&quot;enum.component#variant.Prefix&quot;&gt; &lt;code&gt;Prefix&lt;/code&gt; バリアントと&lt;/a&gt;照合することで取得できます。</target>
        </trans-unit>
        <trans-unit id="e5dd7083ff5f07cec7b9b34c02884013f777ac05" translate="yes" xml:space="preserve">
          <source>Instant</source>
          <target state="translated">Instant</target>
        </trans-unit>
        <trans-unit id="b5ac78fce22209b999309e8a7436e97b10622104" translate="yes" xml:space="preserve">
          <source>Instant::add</source>
          <target state="translated">Instant::add</target>
        </trans-unit>
        <trans-unit id="e5c83578445bb46f2191fb87fb2e970bfde98993" translate="yes" xml:space="preserve">
          <source>Instant::add_assign</source>
          <target state="translated">Instant::add_assign</target>
        </trans-unit>
        <trans-unit id="0c8c3b63eb155a52c73bfac3155d0197dd1a085d" translate="yes" xml:space="preserve">
          <source>Instant::borrow</source>
          <target state="translated">Instant::borrow</target>
        </trans-unit>
        <trans-unit id="f0f79568d43ec6cff172ef06950242a1e38ab9d4" translate="yes" xml:space="preserve">
          <source>Instant::borrow_mut</source>
          <target state="translated">Instant::borrow_mut</target>
        </trans-unit>
        <trans-unit id="2e29432f378f62b734e945a4acd41b7defd436d4" translate="yes" xml:space="preserve">
          <source>Instant::checked_add</source>
          <target state="translated">Instant::checked_add</target>
        </trans-unit>
        <trans-unit id="eb4f8d11d037399c427f9a46cdb4e74b0b9fb310" translate="yes" xml:space="preserve">
          <source>Instant::checked_duration_since</source>
          <target state="translated">Instant::checked_duration_since</target>
        </trans-unit>
        <trans-unit id="f623e63718dd7f5e08fc4822d3ea1e552e483468" translate="yes" xml:space="preserve">
          <source>Instant::checked_sub</source>
          <target state="translated">Instant::checked_sub</target>
        </trans-unit>
        <trans-unit id="f7961f96937c07d9b42758cbb78758eeb1202726" translate="yes" xml:space="preserve">
          <source>Instant::clamp</source>
          <target state="translated">Instant::clamp</target>
        </trans-unit>
        <trans-unit id="a221c46ded2b61b64dcb1f60bfcb2b2993a3a5c9" translate="yes" xml:space="preserve">
          <source>Instant::clone</source>
          <target state="translated">Instant::clone</target>
        </trans-unit>
        <trans-unit id="0e4e4ec37ffa30c7418b3d4c01f925199339bd78" translate="yes" xml:space="preserve">
          <source>Instant::clone_from</source>
          <target state="translated">Instant::clone_from</target>
        </trans-unit>
        <trans-unit id="8b5bc24c2667bb02ad8d0c988c0c260c44857a92" translate="yes" xml:space="preserve">
          <source>Instant::clone_into</source>
          <target state="translated">Instant::clone_into</target>
        </trans-unit>
        <trans-unit id="e2495f5ad07793d7e77643dd4f486d02627866e1" translate="yes" xml:space="preserve">
          <source>Instant::cmp</source>
          <target state="translated">Instant::cmp</target>
        </trans-unit>
        <trans-unit id="5bb91176ea9d1de93e298e46888f1699788ffa0c" translate="yes" xml:space="preserve">
          <source>Instant::duration_since</source>
          <target state="translated">Instant::duration_since</target>
        </trans-unit>
        <trans-unit id="afcae638aa376f5908f1f30bd28087f8ac6046bd" translate="yes" xml:space="preserve">
          <source>Instant::elapsed</source>
          <target state="translated">Instant::elapsed</target>
        </trans-unit>
        <trans-unit id="243a247fce13eeb9a4a84c1d5fb1dac67574f6d1" translate="yes" xml:space="preserve">
          <source>Instant::eq</source>
          <target state="translated">Instant::eq</target>
        </trans-unit>
        <trans-unit id="c0e9c53ccf6d3d28525b5acc190c32004eb85ec8" translate="yes" xml:space="preserve">
          <source>Instant::fmt</source>
          <target state="translated">Instant::fmt</target>
        </trans-unit>
        <trans-unit id="91e13bb77c7e58f374e2d3daa91a9fc513ccb0bb" translate="yes" xml:space="preserve">
          <source>Instant::from</source>
          <target state="translated">Instant::from</target>
        </trans-unit>
        <trans-unit id="666400c2a2e214fcba1e53bc6d351d576dedbf88" translate="yes" xml:space="preserve">
          <source>Instant::ge</source>
          <target state="translated">Instant::ge</target>
        </trans-unit>
        <trans-unit id="e1545f7a496f8f598ffee1a4b219bdc08ac325eb" translate="yes" xml:space="preserve">
          <source>Instant::gt</source>
          <target state="translated">Instant::gt</target>
        </trans-unit>
        <trans-unit id="41c216d5664a8a7e6d226c8c88076fb379772e86" translate="yes" xml:space="preserve">
          <source>Instant::hash</source>
          <target state="translated">Instant::hash</target>
        </trans-unit>
        <trans-unit id="754e2486a3657aa16f85c8a3399792e46fc3859e" translate="yes" xml:space="preserve">
          <source>Instant::hash_slice</source>
          <target state="translated">Instant::hash_slice</target>
        </trans-unit>
        <trans-unit id="77b8dcf93181fdfb9c2ccd019961362f091bc10d" translate="yes" xml:space="preserve">
          <source>Instant::into</source>
          <target state="translated">Instant::into</target>
        </trans-unit>
        <trans-unit id="27c580d98c20ea09e90f23c4e7129dd284f1e540" translate="yes" xml:space="preserve">
          <source>Instant::le</source>
          <target state="translated">Instant::le</target>
        </trans-unit>
        <trans-unit id="077dca8f66a9fddef8fd3afcd25ba70cba946a7c" translate="yes" xml:space="preserve">
          <source>Instant::lt</source>
          <target state="translated">Instant::lt</target>
        </trans-unit>
        <trans-unit id="5f279b9b945d564222473676176af94a42a66352" translate="yes" xml:space="preserve">
          <source>Instant::max</source>
          <target state="translated">Instant::max</target>
        </trans-unit>
        <trans-unit id="1fef472f05cd2b320ab2c2019b4644689c5cb2f0" translate="yes" xml:space="preserve">
          <source>Instant::min</source>
          <target state="translated">Instant::min</target>
        </trans-unit>
        <trans-unit id="2607167b08c7b923c8543daeccd1a89c638f791c" translate="yes" xml:space="preserve">
          <source>Instant::ne</source>
          <target state="translated">Instant::ne</target>
        </trans-unit>
        <trans-unit id="2e89ed9eeb6e6fedfd76e029598f95d52ac89e9c" translate="yes" xml:space="preserve">
          <source>Instant::now</source>
          <target state="translated">Instant::now</target>
        </trans-unit>
        <trans-unit id="ef217fe283814eb7e0d5fb84203270e40f97b8d2" translate="yes" xml:space="preserve">
          <source>Instant::partial_cmp</source>
          <target state="translated">Instant::partial_cmp</target>
        </trans-unit>
        <trans-unit id="bf1b8520fb2822b3f5cb83bccfd646a516fffcbf" translate="yes" xml:space="preserve">
          <source>Instant::saturating_duration_since</source>
          <target state="translated">Instant::saturating_duration_since</target>
        </trans-unit>
        <trans-unit id="9ed1ccf1a589fe42420c89b940730dc8b7982f7d" translate="yes" xml:space="preserve">
          <source>Instant::sub</source>
          <target state="translated">Instant::sub</target>
        </trans-unit>
        <trans-unit id="57ade0b6d4dcc1517fdb9cf85b73a61857e80559" translate="yes" xml:space="preserve">
          <source>Instant::sub_assign</source>
          <target state="translated">Instant::sub_assign</target>
        </trans-unit>
        <trans-unit id="bdec0c97db20d86ebdd661571569d5a69a65be45" translate="yes" xml:space="preserve">
          <source>Instant::to_owned</source>
          <target state="translated">Instant::to_owned</target>
        </trans-unit>
        <trans-unit id="0901e5a9482040c503269599b849e7e300181ba0" translate="yes" xml:space="preserve">
          <source>Instant::try_from</source>
          <target state="translated">Instant::try_from</target>
        </trans-unit>
        <trans-unit id="5df3e1f653d0b4e8c037a1c9641f59e6a8cbc24c" translate="yes" xml:space="preserve">
          <source>Instant::try_into</source>
          <target state="translated">Instant::try_into</target>
        </trans-unit>
        <trans-unit id="69f76dc23d56db8a52e6e54a74ec2db10116eb78" translate="yes" xml:space="preserve">
          <source>Instant::type_id</source>
          <target state="translated">Instant::type_id</target>
        </trans-unit>
        <trans-unit id="001172aad080d8306d5d4d1b5dc437b8d68f3a48" translate="yes" xml:space="preserve">
          <source>Instantiating enum variants involves explicitly using the enum's name as its namespace, followed by one of its variants. &lt;code&gt;SimpleEnum::SecondVariant&lt;/code&gt; would be an example from above. When data follows along with a variant, such as with rust's built-in &lt;a href=&quot;option/enum.option&quot;&gt;&lt;code&gt;Option&lt;/code&gt;&lt;/a&gt; type, the data is added as the type describes, for example &lt;code&gt;Option::Some(123)&lt;/code&gt;. The same follows with struct-like variants, with things looking like &lt;code&gt;ComplexEnum::LotsOfThings { usual_struct_stuff: true, blah: &quot;hello!&quot;.to_string(), }&lt;/code&gt;. Empty Enums are similar to () in that they cannot be instantiated at all, and are used mainly to mess with the type system in interesting ways.</source>
          <target state="translated">enumバリアントのインスタンス化では、enumの名前を名前空間として明示的に使用し、その後にそのバリアントの1つを続けます。 &lt;code&gt;SimpleEnum::SecondVariant&lt;/code&gt; は、上記の例です。 rustの組み込み&lt;a href=&quot;option/enum.option&quot;&gt; &lt;code&gt;Option&lt;/code&gt; &lt;/a&gt;タイプなど、バリアントに沿ってデータが続く場合、データはタイプが説明するとおりに追加されます &lt;code&gt;Option::Some(123)&lt;/code&gt; 例：Option :: Some（123））。同じことは、構造体のようなバリアントでも続き、 &lt;code&gt;ComplexEnum::LotsOfThings { usual_struct_stuff: true, blah: &quot;hello!&quot;.to_string(), }&lt;/code&gt; ます。空のEnumは、インスタンス化できないという点で（）に似ており、主に型システムを面白い方法で混乱させるために使用されます。</target>
        </trans-unit>
        <trans-unit id="2c525f735dffbb0093cdbc000d1e1854b0b45f32" translate="yes" xml:space="preserve">
          <source>Instantiating enum variants involves explicitly using the enum's name as its namespace, followed by one of its variants. &lt;code&gt;SimpleEnum::SecondVariant&lt;/code&gt; would be an example from above. When data follows along with a variant, such as with rust's built-in &lt;a href=&quot;option/enum.option&quot;&gt;&lt;code&gt;Option&lt;/code&gt;&lt;/a&gt; type, the data is added as the type describes, for example &lt;code&gt;Option::Some(123)&lt;/code&gt;. The same follows with struct-like variants, with things looking like &lt;code&gt;ComplexEnum::LotsOfThings { usual_struct_stuff: true, blah: &quot;hello!&quot;.to_string(), }&lt;/code&gt;. Empty Enums are similar to &lt;a href=&quot;primitive.never&quot;&gt;&lt;code&gt;!&lt;/code&gt;&lt;/a&gt; in that they cannot be instantiated at all, and are used mainly to mess with the type system in interesting ways.</source>
          <target state="translated">列挙型バリアントのインスタンス化には、名前空間として列挙型の名前を明示的に使用し、その後にそのバリアントの1つを使用する必要があります。 &lt;code&gt;SimpleEnum::SecondVariant&lt;/code&gt; は上記の例です。 rustの組み込み&lt;a href=&quot;option/enum.option&quot;&gt; &lt;code&gt;Option&lt;/code&gt; &lt;/a&gt;タイプなど、バリアントとともにデータが続く場合、データはタイプの説明に従って追加されます &lt;code&gt;Option::Some(123)&lt;/code&gt; 例：Option :: Some（123））。 &lt;code&gt;ComplexEnum::LotsOfThings { usual_struct_stuff: true, blah: &quot;hello!&quot;.to_string(), }&lt;/code&gt; ようなもので、構造体のようなバリアントでも同じことが続きます。空の列挙型は&lt;a href=&quot;primitive.never&quot;&gt; &lt;code&gt;!&lt;/code&gt; に&lt;/a&gt;似ています。それらはまったくインスタンス化できず、主に型システムを興味深い方法で混乱させるために使用されます。</target>
        </trans-unit>
        <trans-unit id="89d417c0066da918ab986006990b8c13e4a1c9d4" translate="yes" xml:space="preserve">
          <source>Instantiation</source>
          <target state="translated">Instantiation</target>
        </trans-unit>
        <trans-unit id="b9d10d744d3b830949e2bf595c80e084be4f440a" translate="yes" xml:space="preserve">
          <source>Instantiations of struct or variant fields</source>
          <target state="translated">構造体またはバリアントフィールドのインスタンス</target>
        </trans-unit>
        <trans-unit id="052f953d4dc163101293e43033ca426c81cc5b70" translate="yes" xml:space="preserve">
          <source>Instantiations of struct, union, or enum variant fields</source>
          <target state="translated">構造体、組合、または列挙バリアントフィールドのインスタンス化</target>
        </trans-unit>
        <trans-unit id="f7b4faec33775d5b4afedfc919179e22bbcfd3c9" translate="yes" xml:space="preserve">
          <source>Instants are always guaranteed to be no less than any previously measured instant when created, and are often useful for tasks such as measuring benchmarks or timing how long an operation takes.</source>
          <target state="translated">インスタントは、作成時には常に以前に測定されたどのインスタントにも劣らないことが保証されており、ベンチマークを測定したり、操作にかかる時間を計ったりするのに便利なことが多いです。</target>
        </trans-unit>
        <trans-unit id="283f4073d67eb71b9aee283558af89f84e2066b3" translate="yes" xml:space="preserve">
          <source>Instants are opaque types that can only be compared to one another. There is no method to get &quot;the number of seconds&quot; from an instant. Instead, it only allows measuring the duration between two instants (or comparing two instants).</source>
          <target state="translated">インスタントは、互いに比較することしかできない不透明なタイプです。インスタントから「秒数」を取得する方法はありません。代わりに、2つのインスタンス間の持続時間を測定することができるだけです(または、2つのインスタンスを比較することができます)。</target>
        </trans-unit>
        <trans-unit id="61804bc8442fc7d7bb4e71e306aef5c0aea1b60a" translate="yes" xml:space="preserve">
          <source>Instead it is used to prevent moves through the type system, by controlling the behavior of pointers &lt;code&gt;P&lt;/code&gt; wrapped in the &lt;a href=&quot;../pin/struct.pin&quot;&gt;&lt;code&gt;Pin&amp;lt;P&amp;gt;&lt;/code&gt;&lt;/a&gt; wrapper, which &quot;pin&quot; the type in place by not allowing it to be moved out of them. See the &lt;a href=&quot;../pin/index&quot;&gt;&lt;code&gt;pin module&lt;/code&gt;&lt;/a&gt; documentation for more information on pinning.</source>
          <target state="translated">代わりに、&lt;a href=&quot;../pin/struct.pin&quot;&gt; &lt;code&gt;Pin&amp;lt;P&amp;gt;&lt;/code&gt; &lt;/a&gt;ラッパーでラップされたポインター &lt;code&gt;P&lt;/code&gt; の動作を制御することにより、型システム内での移動を防止するために使用されます。&lt;a href=&quot;../pin/index&quot;&gt; &lt;code&gt;pin module&lt;/code&gt; &lt;/a&gt;詳細については、ピンモジュールのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="3589fb3ebd4ad6821bd6d9b7e8dfdf86bb935287" translate="yes" xml:space="preserve">
          <source>Instead of &lt;code&gt;ok&lt;/code&gt;, the line &lt;code&gt;test tests::another&lt;/code&gt; shows &lt;code&gt;FAILED&lt;/code&gt;. Two new sections appear between the individual results and the summary: the first section displays the detailed reason for each test failure. In this case, &lt;code&gt;another&lt;/code&gt; failed because it &lt;code&gt;panicked at 'Make this test fail'&lt;/code&gt;, which happened on line 10 in the &lt;em&gt;src/lib.rs&lt;/em&gt; file. The next section lists just the names of all the failing tests, which is useful when there are lots of tests and lots of detailed failing test output. We can use the name of a failing test to run just that test to more easily debug it; we&amp;rsquo;ll talk more about ways to run tests in the &lt;a href=&quot;ch11-02-running-tests#controlling-how-tests-are-run&quot;&gt;&amp;ldquo;Controlling How Tests Are Run&amp;rdquo;&lt;/a&gt; section.</source>
          <target state="translated">&lt;code&gt;ok&lt;/code&gt; の代わりに、行 &lt;code&gt;test tests::another&lt;/code&gt; は &lt;code&gt;FAILED&lt;/code&gt; を示します。個々の結果と要約の間に2つの新しいセクションが表示されます。最初のセクションには、各テストの失敗の詳細な理由が表示されます。この場合、&lt;em&gt;src / lib.rs&lt;/em&gt;ファイルの10行目で発生 &lt;code&gt;panicked at 'Make this test fail'&lt;/code&gt; でパニックが発生したため、 &lt;code&gt;another&lt;/code&gt; 失敗しました。次のセクションには、失敗したすべてのテストの名前だけがリストされています。これは、多数のテストと詳細な失敗したテスト出力がたくさんある場合に役立ちます。失敗したテストの名前を使用して、そのテストのみを実行し、より簡単にデバッグできます。テストの実行方法については、&lt;a href=&quot;ch11-02-running-tests#controlling-how-tests-are-run&quot;&gt;「テストの実行方法の制御」&lt;/a&gt;セクションで詳しく説明します。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="1a520d0103dd9e1e65d5d07eb5562a910a387f00" translate="yes" xml:space="preserve">
          <source>Instead of a concrete type for the &lt;code&gt;item&lt;/code&gt; parameter, we specify the &lt;code&gt;impl&lt;/code&gt; keyword and the trait name. This parameter accepts any type that implements the specified trait. In the body of &lt;code&gt;notify&lt;/code&gt;, we can call any methods on &lt;code&gt;item&lt;/code&gt; that come from the &lt;code&gt;Summary&lt;/code&gt; trait, such as &lt;code&gt;summarize&lt;/code&gt;. We can call &lt;code&gt;notify&lt;/code&gt; and pass in any instance of &lt;code&gt;NewsArticle&lt;/code&gt; or &lt;code&gt;Tweet&lt;/code&gt;. Code that calls the function with any other type, such as a &lt;code&gt;String&lt;/code&gt; or an &lt;code&gt;i32&lt;/code&gt;, won&amp;rsquo;t compile because those types don&amp;rsquo;t implement &lt;code&gt;Summary&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;item&lt;/code&gt; パラメータの具体的なタイプの代わりに、 &lt;code&gt;impl&lt;/code&gt; キーワードと特性名を指定します。このパラメーターは、指定された特性を実装するすべてのタイプを受け入れます。ボディに &lt;code&gt;notify&lt;/code&gt; 、我々は上の任意のメソッドを呼び出すことができます &lt;code&gt;item&lt;/code&gt; から来る &lt;code&gt;Summary&lt;/code&gt; などの特性、 &lt;code&gt;summarize&lt;/code&gt; 。 &lt;code&gt;NewsArticle&lt;/code&gt; または &lt;code&gt;Tweet&lt;/code&gt; のどのインスタンスでも、 &lt;code&gt;notify&lt;/code&gt; を呼び出して渡すことができます。 &lt;code&gt;String&lt;/code&gt; や &lt;code&gt;i32&lt;/code&gt; などの他のタイプの関数を呼び出すコードは、これらのタイプが &lt;code&gt;Summary&lt;/code&gt; を実装していないため、コンパイルされません。</target>
        </trans-unit>
        <trans-unit id="c586c2da19eaf29595cd7783a0bdd1aaa4af1f4c" translate="yes" xml:space="preserve">
          <source>Instead of adding the &lt;code&gt;assert!&lt;/code&gt; macro as we&amp;rsquo;ve done here, we could make &lt;code&gt;new&lt;/code&gt; return a &lt;code&gt;Result&lt;/code&gt; like we did with &lt;code&gt;Config::new&lt;/code&gt; in the I/O project in Listing 12-9. But we&amp;rsquo;ve decided in this case that trying to create a thread pool without any threads should be an unrecoverable error. If you&amp;rsquo;re feeling ambitious, try to write a version of &lt;code&gt;new&lt;/code&gt; with the following signature to compare both versions:</source>
          <target state="translated">&lt;code&gt;assert!&lt;/code&gt; を追加する代わりに！ここで行ったように、マクロを使用して、リスト12-9のI / Oプロジェクトの &lt;code&gt;Config::new&lt;/code&gt; で行ったように、 &lt;code&gt;new&lt;/code&gt; &lt;code&gt;Result&lt;/code&gt; 返すことができます。ただし、この場合、スレッドなしでスレッドプールを作成しようとすると、回復不可能なエラーになるはずです。意欲的な場合は、次のシグネチャを使用して &lt;code&gt;new&lt;/code&gt; のバージョンを作成し、両方のバージョンを比較してください。</target>
        </trans-unit>
        <trans-unit id="9745bfc2f2927dceb9288ed29cf395b852078f44" translate="yes" xml:space="preserve">
          <source>Instead of always calling the &lt;code&gt;simulated_expensive_calculation&lt;/code&gt; function before the &lt;code&gt;if&lt;/code&gt; blocks, we can define a closure and store the &lt;em&gt;closure&lt;/em&gt; in a variable rather than storing the result of the function call, as shown in Listing 13-5. We can actually move the whole body of &lt;code&gt;simulated_expensive_calculation&lt;/code&gt; within the closure we&amp;rsquo;re introducing here.</source>
          <target state="translated">代わりに、常に呼び出しの &lt;code&gt;simulated_expensive_calculation&lt;/code&gt; の前に機能を &lt;code&gt;if&lt;/code&gt; ブロック、我々はクロージャを定義することができますし、保存&lt;em&gt;閉鎖を&lt;/em&gt;リスト13-5に示すように、変数ではなく、関数呼び出しの結果を格納します。ここで紹介するクロージャー内で &lt;code&gt;simulated_expensive_calculation&lt;/code&gt; 本体全体を実際に移動できます。</target>
        </trans-unit>
        <trans-unit id="ae67e98f84394870dad9c2dee4383fa199b41a3d" translate="yes" xml:space="preserve">
          <source>Instead of comparing the iterator's elements directly, this function compares the keys of the elements, as determined by &lt;code&gt;f&lt;/code&gt;. Apart from that, it's equivalent to &lt;a href=&quot;trait.iterator#method.is_sorted&quot;&gt;&lt;code&gt;is_sorted&lt;/code&gt;&lt;/a&gt;; see its documentation for more information.</source>
          <target state="translated">イテレータの要素を直接比較するのではなく、この関数は、 &lt;code&gt;f&lt;/code&gt; によって決定されるように、要素のキーを比較します。それ以外は、&lt;a href=&quot;trait.iterator#method.is_sorted&quot;&gt; &lt;code&gt;is_sorted&lt;/code&gt; &lt;/a&gt;と同等です。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="3f4a03c266892c8db13bbe1ed2f70b65c01aa093" translate="yes" xml:space="preserve">
          <source>Instead of comparing the slice's elements directly, this function compares the keys of the elements, as determined by &lt;code&gt;f&lt;/code&gt;. Apart from that, it's equivalent to &lt;a href=&quot;#method.is_sorted&quot;&gt;&lt;code&gt;is_sorted&lt;/code&gt;&lt;/a&gt;; see its documentation for more information.</source>
          <target state="translated">この関数は、スライスの要素を直接比較するのではなく、 &lt;code&gt;f&lt;/code&gt; によって決定されるように、要素のキーを比較します。それ以外は、&lt;a href=&quot;#method.is_sorted&quot;&gt; &lt;code&gt;is_sorted&lt;/code&gt; &lt;/a&gt;と同等です。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="ab414c3f0e8d06ac0d388f321dffd0ec64ba1540" translate="yes" xml:space="preserve">
          <source>Instead of defining an inherent implementation on a reference, you could also move the reference inside the implementation:</source>
          <target state="translated">参照上に固有の実装を定義するのではなく、実装内で参照を移動させることもできます。</target>
        </trans-unit>
        <trans-unit id="cf669630673f131e83096baf2080a7fff2853dbb" translate="yes" xml:space="preserve">
          <source>Instead of saving the closure in a variable directly, we save a new instance of &lt;code&gt;Cacher&lt;/code&gt; that holds the closure. Then, in each place we want the result, we call the &lt;code&gt;value&lt;/code&gt; method on the &lt;code&gt;Cacher&lt;/code&gt; instance. We can call the &lt;code&gt;value&lt;/code&gt; method as many times as we want, or not call it at all, and the expensive calculation will be run a maximum of once.</source>
          <target state="translated">クロージャーを変数に直接保存する代わりに、クロージャーを保持する &lt;code&gt;Cacher&lt;/code&gt; の新しいインスタンスを保存します。次に、結果が必要な各場所で、 &lt;code&gt;Cacher&lt;/code&gt; インスタンスの &lt;code&gt;value&lt;/code&gt; メソッドを呼び出します。私たちは、呼び出すことができる &lt;code&gt;value&lt;/code&gt; 私たちが望むように何回のような方法を、またはすべてでそれを呼び出さない、と高価な計算は、かつての最大の実行されます。</target>
        </trans-unit>
        <trans-unit id="007ce9d48190918926ae8e5decfb3ba7fb1ee115" translate="yes" xml:space="preserve">
          <source>Instead of saving the result of the build in the same directory as our code, Cargo stores it in the &lt;em&gt;target/debug&lt;/em&gt; directory.</source>
          <target state="translated">ビルドの結果をコードと同じディレクトリに保存する代わりに、Cargoはそれを&lt;em&gt;target / debug&lt;/em&gt;ディレクトリに保存します。</target>
        </trans-unit>
        <trans-unit id="12c9e09de719f2e7a3f500e0f9b7335d3a4a658d" translate="yes" xml:space="preserve">
          <source>Instead of stopping at &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt;, the iterator will instead start again, from the beginning. After iterating again, it will start at the beginning again. And again. And again. Forever.</source>
          <target state="translated">イテレータは&lt;a href=&quot;../option/enum.option#variant.None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt;で停止する代わりに、最初から再開します。再度繰り返した後、再び最初から開始します。そしてまた。そしてまた。永遠に。</target>
        </trans-unit>
        <trans-unit id="57207c003495c85f3158cd50928c0d6b80c8565c" translate="yes" xml:space="preserve">
          <source>Instead of storing a vector of &lt;code&gt;JoinHandle&amp;lt;()&amp;gt;&lt;/code&gt; instances in the thread pool, we&amp;rsquo;ll store instances of the &lt;code&gt;Worker&lt;/code&gt; struct. Each &lt;code&gt;Worker&lt;/code&gt; will store a single &lt;code&gt;JoinHandle&amp;lt;()&amp;gt;&lt;/code&gt; instance. Then we&amp;rsquo;ll implement a method on &lt;code&gt;Worker&lt;/code&gt; that will take a closure of code to run and send it to the already running thread for execution. We&amp;rsquo;ll also give each worker an &lt;code&gt;id&lt;/code&gt; so we can distinguish between the different workers in the pool when logging or debugging.</source>
          <target state="translated">&lt;code&gt;JoinHandle&amp;lt;()&amp;gt;&lt;/code&gt; インスタンスのベクトルをスレッドプールに格納する代わりに、 &lt;code&gt;Worker&lt;/code&gt; 構造体のインスタンスを格納します。各 &lt;code&gt;Worker&lt;/code&gt; は単一の &lt;code&gt;JoinHandle&amp;lt;()&amp;gt;&lt;/code&gt; インスタンスを格納します。次に、 &lt;code&gt;Worker&lt;/code&gt; メソッドを実装して、コードのクロージャーを実行し、すでに実行中のスレッドに送信して実行します。また、ロギングまたはデバッグ時にプール内の異なるワーカーを区別できるように、各ワーカーに &lt;code&gt;id&lt;/code&gt; を割り当てます。</target>
        </trans-unit>
        <trans-unit id="e496da216bd15fab37b8868b5d0249983379dbc2" translate="yes" xml:space="preserve">
          <source>Instead of using &lt;code&gt;PartialOrd::partial_cmp&lt;/code&gt;, this function uses the given &lt;code&gt;compare&lt;/code&gt; function to determine the ordering of two elements. Apart from that, it's equivalent to &lt;a href=&quot;#method.is_sorted&quot;&gt;&lt;code&gt;is_sorted&lt;/code&gt;&lt;/a&gt;; see its documentation for more information.</source>
          <target state="translated">&lt;code&gt;PartialOrd::partial_cmp&lt;/code&gt; を使用する代わりに、この関数は指定された &lt;code&gt;compare&lt;/code&gt; 関数を使用して2つの要素の順序を決定します。それ以外は、&lt;a href=&quot;#method.is_sorted&quot;&gt; &lt;code&gt;is_sorted&lt;/code&gt; &lt;/a&gt;と同等です。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="c10b23d92f193b5b7c4a31db6e9dd35bde4c84df" translate="yes" xml:space="preserve">
          <source>Instead of using &lt;code&gt;PartialOrd::partial_cmp&lt;/code&gt;, this function uses the given &lt;code&gt;compare&lt;/code&gt; function to determine the ordering of two elements. Apart from that, it's equivalent to &lt;a href=&quot;trait.iterator#method.is_sorted&quot;&gt;&lt;code&gt;is_sorted&lt;/code&gt;&lt;/a&gt;; see its documentation for more information.</source>
          <target state="translated">&lt;code&gt;PartialOrd::partial_cmp&lt;/code&gt; を使用する代わりに、この関数は指定された &lt;code&gt;compare&lt;/code&gt; 関数を使用して2つの要素の順序を決定します。それ以外は、&lt;a href=&quot;trait.iterator#method.is_sorted&quot;&gt; &lt;code&gt;is_sorted&lt;/code&gt; &lt;/a&gt;と同等です。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="78836dae939176c5518d6cb16a8bc88f88e60ed0" translate="yes" xml:space="preserve">
          <source>Instead, the &lt;code&gt;get&lt;/code&gt; method is generic over the type of the underlying key data, called &lt;code&gt;Q&lt;/code&gt; in the method signature above. It states that &lt;code&gt;K&lt;/code&gt; borrows as a &lt;code&gt;Q&lt;/code&gt; by requiring that &lt;code&gt;K: Borrow&amp;lt;Q&amp;gt;&lt;/code&gt;. By additionally requiring &lt;code&gt;Q: Hash + Eq&lt;/code&gt;, it signals the requirement that &lt;code&gt;K&lt;/code&gt; and &lt;code&gt;Q&lt;/code&gt; have implementations of the &lt;code&gt;Hash&lt;/code&gt; and &lt;code&gt;Eq&lt;/code&gt; traits that produce identical results.</source>
          <target state="translated">代わりに、 &lt;code&gt;get&lt;/code&gt; メソッドは、上記のメソッドシグネチャで &lt;code&gt;Q&lt;/code&gt; と呼ばれる、基になるキーデータのタイプに対してジェネリックです。それは、 &lt;code&gt;K&lt;/code&gt; が &lt;code&gt;Q&lt;/code&gt; &lt;code&gt;K: Borrow&amp;lt;Q&amp;gt;&lt;/code&gt; 要求することにより、Qとして借用すると述べています。さらに &lt;code&gt;Q: Hash + Eq&lt;/code&gt; 要求することで、 &lt;code&gt;K&lt;/code&gt; と &lt;code&gt;Q&lt;/code&gt; が同じ結果を生成する &lt;code&gt;Hash&lt;/code&gt; と &lt;code&gt;Eq&lt;/code&gt; トレイトの実装を持っているという要件を示します。</target>
        </trans-unit>
        <trans-unit id="878f7237ad30bf50b95fb9667897fe778bbcf6bb" translate="yes" xml:space="preserve">
          <source>Instead, we can make a new type and put the validations in a function to create an instance of the type rather than repeating the validations everywhere. That way, it&amp;rsquo;s safe for functions to use the new type in their signatures and confidently use the values they receive. Listing 9-10 shows one way to define a &lt;code&gt;Guess&lt;/code&gt; type that will only create an instance of &lt;code&gt;Guess&lt;/code&gt; if the &lt;code&gt;new&lt;/code&gt; function receives a value between 1 and 100.</source>
          <target state="translated">代わりに、すべての場所で検証を繰り返すのではなく、新しい型を作成し、検証を関数に入れて型のインスタンスを作成できます。そうすることで、関数がシグネチャで新しい型を使用し、受け取った値を自信を持って使用しても安全です。リスト9-10は、 &lt;code&gt;new&lt;/code&gt; 関数が1〜100の値を受け取った場合にのみ &lt;code&gt;Guess&lt;/code&gt; のインスタンスを作成する &lt;code&gt;Guess&lt;/code&gt; 型を定義する1つの方法を示しています。</target>
        </trans-unit>
        <trans-unit id="4262f2636f484912c23478cb754110e371d9c5c5" translate="yes" xml:space="preserve">
          <source>Instead, we can use nested paths to bring the same items into scope in one line. We do this by specifying the common part of the path, followed by two colons, and then curly brackets around a list of the parts of the paths that differ, as shown in Listing 7-18.</source>
          <target state="translated">代わりに、同じアイテムを1行でスコープに入れるために入れ子になったパスを使うことができます。リスト7-18で示されるように、パスの共通部分を指定し、2つのコロンが続き、異なるパスの部分のリストを中括弧で囲むことでこれを実現します。</target>
        </trans-unit>
        <trans-unit id="5890f5912d1fb9403515b5a5574c224c2a726c72" translate="yes" xml:space="preserve">
          <source>Instead, we could write this in a shorter way using &lt;code&gt;if let&lt;/code&gt;. The following code behaves the same as the &lt;code&gt;match&lt;/code&gt; in Listing 6-6:</source>
          <target state="translated">代わりに、 &lt;code&gt;if let&lt;/code&gt; を使用してこれをより短い方法で書くことができます。次のコードは、コードリスト6-6の &lt;code&gt;match&lt;/code&gt; と同じように動作します。</target>
        </trans-unit>
        <trans-unit id="f97c87a1b2b6afb4bd47b58a7850a17ba4dcea9b" translate="yes" xml:space="preserve">
          <source>Instead, we get the following error that talks about lifetimes:</source>
          <target state="translated">その代わりに、寿命について語る次のようなエラーが出てきます。</target>
        </trans-unit>
        <trans-unit id="e71162b50e657665aeaa9b501b8264cb1685df94" translate="yes" xml:space="preserve">
          <source>Instead, we&amp;rsquo;ll change our definition of &lt;code&gt;List&lt;/code&gt; to use &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; in place of &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt;, as shown in Listing 15-18. Each &lt;code&gt;Cons&lt;/code&gt; variant will now hold a value and an &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; pointing to a &lt;code&gt;List&lt;/code&gt;. When we create &lt;code&gt;b&lt;/code&gt;, instead of taking ownership of &lt;code&gt;a&lt;/code&gt;, we&amp;rsquo;ll clone the &lt;code&gt;Rc&amp;lt;List&amp;gt;&lt;/code&gt; that &lt;code&gt;a&lt;/code&gt; is holding, thereby increasing the number of references from one to two and letting &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; share ownership of the data in that &lt;code&gt;Rc&amp;lt;List&amp;gt;&lt;/code&gt;. We&amp;rsquo;ll also clone &lt;code&gt;a&lt;/code&gt; when creating &lt;code&gt;c&lt;/code&gt;, increasing the number of references from two to three. Every time we call &lt;code&gt;Rc::clone&lt;/code&gt;, the reference count to the data within the &lt;code&gt;Rc&amp;lt;List&amp;gt;&lt;/code&gt; will increase, and the data won&amp;rsquo;t be cleaned up unless there are zero references to it.</source>
          <target state="translated">代わりに、リスト15-18に示すように、 &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; 代わりに &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; を使用するように &lt;code&gt;List&lt;/code&gt; の定義を変更します。各 &lt;code&gt;Cons&lt;/code&gt; バリアントは、値と &lt;code&gt;List&lt;/code&gt; を指す &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; 保持します。私たちが作成した場合 &lt;code&gt;b&lt;/code&gt; 代わりに所有権取る、我々はクローンます &lt;code&gt;Rc&amp;lt;List&amp;gt;&lt;/code&gt; することを、保持することにより1から2に参照の数を増やすとさせて頂いておりかつ &lt;code&gt;b&lt;/code&gt; 中でデータの共有所有権をすることを &lt;code&gt;Rc&amp;lt;List&amp;gt;&lt;/code&gt; 。 &lt;code&gt;c&lt;/code&gt; の作成時にaも複製 &lt;code&gt;a&lt;/code&gt; ます &lt;code&gt;a&lt;/code&gt; &lt;code&gt;a&lt;/code&gt; &lt;code&gt;a&lt;/code&gt; 、参照の数を2から3に増やします。 &lt;code&gt;Rc::clone&lt;/code&gt; を呼び出すたびに、 &lt;code&gt;Rc&amp;lt;List&amp;gt;&lt;/code&gt; 内のデータへの参照カウントが増加し、データへの参照がゼロでない限り、データはクリーンアップされません。</target>
        </trans-unit>
        <trans-unit id="2890fe24db6f7388a46470ac6834b80784db6337" translate="yes" xml:space="preserve">
          <source>Instructions can execute in a different order from the one we define, due to various reasons:</source>
          <target state="translated">命令は、様々な理由により、私たちが定義したものとは異なる順序で実行されることがあります。</target>
        </trans-unit>
        <trans-unit id="b74294f827b0d4541ba12662271114a470d6d7a4" translate="yes" xml:space="preserve">
          <source>IntErrorKind</source>
          <target state="translated">IntErrorKind</target>
        </trans-unit>
        <trans-unit id="80fb7220d8146322b259aee21dfef8944e427bb7" translate="yes" xml:space="preserve">
          <source>IntErrorKind::borrow</source>
          <target state="translated">IntErrorKind::borrow</target>
        </trans-unit>
        <trans-unit id="bb7aa40e4b4db6e736d2b09e30f31443f1c9b44c" translate="yes" xml:space="preserve">
          <source>IntErrorKind::borrow_mut</source>
          <target state="translated">IntErrorKind::borrow_mut</target>
        </trans-unit>
        <trans-unit id="86f2a2b8f3ab0b9d3e18ee8e7279ac3646f5e5b6" translate="yes" xml:space="preserve">
          <source>IntErrorKind::clone</source>
          <target state="translated">IntErrorKind::clone</target>
        </trans-unit>
        <trans-unit id="dd987594d4a6731556fb4db2a25b883f8e6e834a" translate="yes" xml:space="preserve">
          <source>IntErrorKind::clone_from</source>
          <target state="translated">IntErrorKind::clone_from</target>
        </trans-unit>
        <trans-unit id="8f1809c6588a2cc665ccd543289e14a938828a70" translate="yes" xml:space="preserve">
          <source>IntErrorKind::clone_into</source>
          <target state="translated">IntErrorKind::clone_into</target>
        </trans-unit>
        <trans-unit id="a5e2ed2cdfa8d2140437ae0a8783a450793b17a2" translate="yes" xml:space="preserve">
          <source>IntErrorKind::eq</source>
          <target state="translated">IntErrorKind::eq</target>
        </trans-unit>
        <trans-unit id="92fce40d27d225b47d39433e8ff156d8c2c93e18" translate="yes" xml:space="preserve">
          <source>IntErrorKind::fmt</source>
          <target state="translated">IntErrorKind::fmt</target>
        </trans-unit>
        <trans-unit id="cd16b5df7c131824209cf18f2e5abfbebb79b75a" translate="yes" xml:space="preserve">
          <source>IntErrorKind::from</source>
          <target state="translated">IntErrorKind::from</target>
        </trans-unit>
        <trans-unit id="e6625420510ba7fab278784b2593fb38c7566390" translate="yes" xml:space="preserve">
          <source>IntErrorKind::into</source>
          <target state="translated">IntErrorKind::into</target>
        </trans-unit>
        <trans-unit id="9d0115c16bd4f87138d516953bbe461d1bf9ec02" translate="yes" xml:space="preserve">
          <source>IntErrorKind::ne</source>
          <target state="translated">IntErrorKind::ne</target>
        </trans-unit>
        <trans-unit id="14958c3a69f5e70cdde8bcf9555c598ab9bb336b" translate="yes" xml:space="preserve">
          <source>IntErrorKind::to_owned</source>
          <target state="translated">IntErrorKind::to_owned</target>
        </trans-unit>
        <trans-unit id="6415d36e18efe91e53b209d52b6293cb58ff6bfa" translate="yes" xml:space="preserve">
          <source>IntErrorKind::try_from</source>
          <target state="translated">IntErrorKind::try_from</target>
        </trans-unit>
        <trans-unit id="03f332b4c41b3659819ff1f646ef37a2e67d10fd" translate="yes" xml:space="preserve">
          <source>IntErrorKind::try_into</source>
          <target state="translated">IntErrorKind::try_into</target>
        </trans-unit>
        <trans-unit id="b726776952bee36d5bafae04149385980bc0b309" translate="yes" xml:space="preserve">
          <source>IntErrorKind::type_id</source>
          <target state="translated">IntErrorKind::type_id</target>
        </trans-unit>
        <trans-unit id="9edcffff4461c9083fbff857f8dcee0f0769cbd4" translate="yes" xml:space="preserve">
          <source>Integer</source>
          <target state="translated">Integer</target>
        </trans-unit>
        <trans-unit id="65424b5083b7bb599ce3d3b760be23e671c074b2" translate="yes" xml:space="preserve">
          <source>Integer Overflow</source>
          <target state="translated">整数オーバーフロー</target>
        </trans-unit>
        <trans-unit id="dee2f95e5c81fdaa601cb7ca5b7396c9d7532488" translate="yes" xml:space="preserve">
          <source>Integer Types</source>
          <target state="translated">整数型</target>
        </trans-unit>
        <trans-unit id="6977c92d9e82d5b8f471a2623681e1d1d400b4fb" translate="yes" xml:space="preserve">
          <source>Integer and floating point literals are stringified in order to be concatenated.</source>
          <target state="translated">整数リテラルと浮動小数点リテラルは連結するために文字列化されます。</target>
        </trans-unit>
        <trans-unit id="eea9a8e4af8d6805a657b383a298ba05a67ec8a4" translate="yes" xml:space="preserve">
          <source>Integer is too large to store in target integer type.</source>
          <target state="translated">整数が大きすぎて、ターゲットの整数型に格納できません。</target>
        </trans-unit>
        <trans-unit id="25419a68a3cc357926618f13c044ff7b1347aa8b" translate="yes" xml:space="preserve">
          <source>Integer is too small to store in target integer type.</source>
          <target state="translated">整数が小さすぎて、ターゲットの整数型に格納できません。</target>
        </trans-unit>
        <trans-unit id="13c9f1f069c2155e025409b7880e9bda6c11b765" translate="yes" xml:space="preserve">
          <source>Integer literals</source>
          <target state="translated">整数リテラル</target>
        </trans-unit>
        <trans-unit id="f64049bb9bdfd33c50813111908ece46c327c630" translate="yes" xml:space="preserve">
          <source>Integer operators will panic when they overflow when compiled in debug mode. The &lt;code&gt;-C debug-assertions&lt;/code&gt; and &lt;code&gt;-C overflow-checks&lt;/code&gt; compiler flags can be used to control this more directly. The following things are considered to be overflow:</source>
          <target state="translated">整数演算子は、デバッグモードでコンパイルしたときにオーバーフローするとパニックになります。 &lt;code&gt;-C debug-assertions&lt;/code&gt; 及び &lt;code&gt;-C overflow-checks&lt;/code&gt; コンパイラフラグは、より直接的にこれを制御するために使用することができます。以下はオーバーフローと見なされます。</target>
        </trans-unit>
        <trans-unit id="16d3c89b38e84e433e4fbd3b3a5bad55571258af" translate="yes" xml:space="preserve">
          <source>Integer or Float type</source>
          <target state="translated">整数またはフロート型</target>
        </trans-unit>
        <trans-unit id="3a26a4e37ae1b89c4b86a6d96e9ccef63b9ca764" translate="yes" xml:space="preserve">
          <source>Integer overflow</source>
          <target state="translated">整数オーバーフロー</target>
        </trans-unit>
        <trans-unit id="60c11385ec83a73512788efd527bda9740331202" translate="yes" xml:space="preserve">
          <source>Integer suffixes</source>
          <target state="translated">整数接尾辞</target>
        </trans-unit>
        <trans-unit id="f59b20cbbdd5ddf3c9bd85fd552a52f66ae334d9" translate="yes" xml:space="preserve">
          <source>Integer type</source>
          <target state="translated">整数型</target>
        </trans-unit>
        <trans-unit id="876569ad85ebaf17d9149dea5706aba22e882fe8" translate="yes" xml:space="preserve">
          <source>Integer types</source>
          <target state="translated">整数型</target>
        </trans-unit>
        <trans-unit id="19f28971f5db0ac7dee3fee9af716d1da8917af3" translate="yes" xml:space="preserve">
          <source>Integer types (u8, i8, u16, i16, usize, isize, etc.).</source>
          <target state="translated">整数型(u8、i8、u16、i16、usize、isizeなど)。</target>
        </trans-unit>
        <trans-unit id="a83667e8fbc7d07069b4ce287d78c06adec56630" translate="yes" xml:space="preserve">
          <source>Integers and other types implementing &lt;a href=&quot;../marker/trait.copy&quot;&gt;&lt;code&gt;Copy&lt;/code&gt;&lt;/a&gt; are unaffected by &lt;code&gt;drop&lt;/code&gt;.</source>
          <target state="translated">整数や、&lt;a href=&quot;../marker/trait.copy&quot;&gt; &lt;code&gt;Copy&lt;/code&gt; &lt;/a&gt;を実装するその他の型は、 &lt;code&gt;drop&lt;/code&gt; の影響を受けません。</target>
        </trans-unit>
        <trans-unit id="036a5d47efaf84af91b96bca27d0e3394108b032" translate="yes" xml:space="preserve">
          <source>Integration Tests</source>
          <target state="translated">統合テスト</target>
        </trans-unit>
        <trans-unit id="d9b3c69227b8b09ee6557a63d6eadc1309909958" translate="yes" xml:space="preserve">
          <source>Integration Tests for Binary Crates</source>
          <target state="translated">バイナリクレートの統合テスト</target>
        </trans-unit>
        <trans-unit id="22d0f1d4f5d8a4b65c3ed4d1e121eaf3dc6e87d2" translate="yes" xml:space="preserve">
          <source>Intended for use for errors not exposed to the user, where allocating onto the heap (for normal construction via Error::new) is too costly.</source>
          <target state="translated">(Error::new を介した通常の構築では)ヒープへの割り当てがコスト高になるような、ユーザに公開されないエラーのために使用することを意図しています。</target>
        </trans-unit>
        <trans-unit id="8b67f9d330a2d3ef64e53c30ab32b2a3ac9f06b6" translate="yes" xml:space="preserve">
          <source>Intense! In effect, this error message means that Rust doesn&amp;rsquo;t understand how to add an &lt;code&gt;i8&lt;/code&gt; and an &lt;code&gt;Option&amp;lt;i8&amp;gt;&lt;/code&gt;, because they&amp;rsquo;re different types. When we have a value of a type like &lt;code&gt;i8&lt;/code&gt; in Rust, the compiler will ensure that we always have a valid value. We can proceed confidently without having to check for null before using that value. Only when we have an &lt;code&gt;Option&amp;lt;i8&amp;gt;&lt;/code&gt; (or whatever type of value we&amp;rsquo;re working with) do we have to worry about possibly not having a value, and the compiler will make sure we handle that case before using the value.</source>
          <target state="translated">激しい！実際、このエラーメッセージは、Rustが &lt;code&gt;i8&lt;/code&gt; と &lt;code&gt;Option&amp;lt;i8&amp;gt;&lt;/code&gt; を追加する方法を理解していないことを意味します。これらは異なるタイプだからです。Rustの &lt;code&gt;i8&lt;/code&gt; のような型の値がある場合、コンパイラーは常に有効な値を持つことを保証します。その値を使用する前にnullをチェックする必要なく、自信を持って続行できます。唯一の我々は持っている時に &lt;code&gt;Option&amp;lt;i8&amp;gt;&lt;/code&gt; （あるいは我々が作業している値のどんなタイプ）私たちは、おそらく価値を持っていない心配する必要があり、コンパイラは必ず私たちは値を使用する前に、そのケースを扱うようになります行います。</target>
        </trans-unit>
        <trans-unit id="ffafe2f71610dfdf28d74f6f54bc9015fbb24203" translate="yes" xml:space="preserve">
          <source>Interestingly, the Rust language has &lt;em&gt;very&lt;/em&gt; few concurrency features. Almost every concurrency feature we&amp;rsquo;ve talked about so far in this chapter has been part of the standard library, not the language. Your options for handling concurrency are not limited to the language or the standard library; you can write your own concurrency features or use those written by others.</source>
          <target state="translated">興味深いことに、Rust言語には同時実行機能がほとんどあり&lt;em&gt;ませ&lt;/em&gt;ん。この章でこれまで説明してきたほぼすべての同時実行機能は、言語ではなく標準ライブラリの一部でした。並行処理のオプションは、言語や標準ライブラリに限定されません。独自の同時実行機能を作成するか、他のユーザーが作成した機能を使用できます。</target>
        </trans-unit>
        <trans-unit id="21bdfe87f76bf3a6413dde02708bb83e04770512" translate="yes" xml:space="preserve">
          <source>Interior Mutability</source>
          <target state="translated">内部変異性</target>
        </trans-unit>
        <trans-unit id="88bf37967a115d0f3e4ede63c58d62ebf4f74d5a" translate="yes" xml:space="preserve">
          <source>Interior Mutability: A Mutable Borrow to an Immutable Value</source>
          <target state="translated">内的変異性。不変の価値への借り入れ</target>
        </trans-unit>
        <trans-unit id="bb56d65f2c6cb59165a8429fad875c4b21a44fc9" translate="yes" xml:space="preserve">
          <source>Interior mutability is required.</source>
          <target state="translated">内部変異性が必要です。</target>
        </trans-unit>
        <trans-unit id="ca7ba6473fcf9f5318db96e54bb8153323ab66d4" translate="yes" xml:space="preserve">
          <source>Internal Representation</source>
          <target state="translated">内部表現</target>
        </trans-unit>
        <trans-unit id="951194525a57d9119eb003c4910a0f82fea56f08" translate="yes" xml:space="preserve">
          <source>Internally uses an alias to &lt;a href=&quot;trait.ord#method.max&quot;&gt;&lt;code&gt;Ord::max&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">内部的に&lt;a href=&quot;trait.ord#method.max&quot;&gt; &lt;code&gt;Ord::max&lt;/code&gt; &lt;/a&gt;エイリアスを使用します。</target>
        </trans-unit>
        <trans-unit id="acf9ba348896a745b094371c98fa0f28a4195e87" translate="yes" xml:space="preserve">
          <source>Internally uses an alias to &lt;a href=&quot;trait.ord#method.min&quot;&gt;&lt;code&gt;Ord::min&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">内部的に&lt;a href=&quot;trait.ord#method.min&quot;&gt; &lt;code&gt;Ord::min&lt;/code&gt; &lt;/a&gt;エイリアスを使用します。</target>
        </trans-unit>
        <trans-unit id="f8e983bc961f2f79520b6f7bb3705df394320c6d" translate="yes" xml:space="preserve">
          <source>Internally uses an alias to &lt;code&gt;Ord::max&lt;/code&gt;.</source>
          <target state="translated">内部的に &lt;code&gt;Ord::max&lt;/code&gt; エイリアスを使用します。</target>
        </trans-unit>
        <trans-unit id="944d65bab4f9ee9f9e2c120271148593d01f1819" translate="yes" xml:space="preserve">
          <source>Internally uses an alias to &lt;code&gt;Ord::min&lt;/code&gt;.</source>
          <target state="translated">内部的に &lt;code&gt;Ord::min&lt;/code&gt; エイリアスを使用します。</target>
        </trans-unit>
        <trans-unit id="068003ac53324bf3f0b64c29929ac10bbe1c05ab" translate="yes" xml:space="preserve">
          <source>Internet socket addresses consist of an &lt;a href=&quot;enum.ipaddr&quot;&gt;IP address&lt;/a&gt;, a 16-bit port number, as well as possibly some version-dependent additional information. See &lt;a href=&quot;struct.socketaddrv4&quot;&gt;&lt;code&gt;SocketAddrV4&lt;/code&gt;&lt;/a&gt;'s and &lt;a href=&quot;struct.socketaddrv6&quot;&gt;&lt;code&gt;SocketAddrV6&lt;/code&gt;&lt;/a&gt;'s respective documentation for more details.</source>
          <target state="translated">インターネットソケットアドレスは、&lt;a href=&quot;enum.ipaddr&quot;&gt;IPアドレス&lt;/a&gt;、16ビットのポート番号、および場合によってはバージョンに依存する追加情報で構成されます。詳細については、&lt;a href=&quot;struct.socketaddrv4&quot;&gt; &lt;code&gt;SocketAddrV4&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;struct.socketaddrv6&quot;&gt; &lt;code&gt;SocketAddrV6&lt;/code&gt; &lt;/a&gt;のそれぞれのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="ff358fd17c71b9310a296d32bf0fad9d3ef93b34" translate="yes" xml:space="preserve">
          <source>Interprets &lt;code&gt;src&lt;/code&gt; as having type &lt;code&gt;&amp;amp;U&lt;/code&gt;, and then reads &lt;code&gt;src&lt;/code&gt; without moving the contained value.</source>
          <target state="translated">&lt;code&gt;src&lt;/code&gt; をタイプ &lt;code&gt;&amp;amp;U&lt;/code&gt; として解釈し、含まれている値を移動せずに &lt;code&gt;src&lt;/code&gt; を読み取ります。</target>
        </trans-unit>
        <trans-unit id="6a36b9396eb19f7860ffbd9cb812832709b1a0ee" translate="yes" xml:space="preserve">
          <source>Interrupted operations can typically be retried.</source>
          <target state="translated">中断された操作は、通常、再試行することができます。</target>
        </trans-unit>
        <trans-unit id="d0f596ba112a353008597117b57b10b067fc620b" translate="yes" xml:space="preserve">
          <source>Intersection</source>
          <target state="translated">Intersection</target>
        </trans-unit>
        <trans-unit id="d937d21f811516b74380ee512b99e31251a84531" translate="yes" xml:space="preserve">
          <source>Into</source>
          <target state="translated">Into</target>
        </trans-unit>
        <trans-unit id="5bfe78f7766048c0532cc66994c73d1126acb835" translate="yes" xml:space="preserve">
          <source>Into::into</source>
          <target state="translated">Into::into</target>
        </trans-unit>
        <trans-unit id="44f9db19d74f7cdef0547d820fed0d75c60f0beb" translate="yes" xml:space="preserve">
          <source>IntoFuture</source>
          <target state="translated">IntoFuture</target>
        </trans-unit>
        <trans-unit id="77f5dd8de42c3fb03062223e3c47c92129133f82" translate="yes" xml:space="preserve">
          <source>IntoInnerError</source>
          <target state="translated">IntoInnerError</target>
        </trans-unit>
        <trans-unit id="3f3157b39d55c6291f5fe8213b30cc7d15253d48" translate="yes" xml:space="preserve">
          <source>IntoInnerError::borrow</source>
          <target state="translated">IntoInnerError::borrow</target>
        </trans-unit>
        <trans-unit id="8dfa8d9b4ac06c1a6626ce8031f10e6de0dc0387" translate="yes" xml:space="preserve">
          <source>IntoInnerError::borrow_mut</source>
          <target state="translated">IntoInnerError::borrow_mut</target>
        </trans-unit>
        <trans-unit id="7c332dec4b157cd5d25efcbb73292737fbcafa2a" translate="yes" xml:space="preserve">
          <source>IntoInnerError::cause</source>
          <target state="translated">IntoInnerError::cause</target>
        </trans-unit>
        <trans-unit id="824ab9811aae7de9a48a47b240a825897e788412" translate="yes" xml:space="preserve">
          <source>IntoInnerError::description</source>
          <target state="translated">IntoInnerError::description</target>
        </trans-unit>
        <trans-unit id="83d6a8f5f81bfae0852073773b72a21c220d1541" translate="yes" xml:space="preserve">
          <source>IntoInnerError::error</source>
          <target state="translated">IntoInnerError::error</target>
        </trans-unit>
        <trans-unit id="b1804b3db5a18e0f8ea6f6cff9edd76e45db12ed" translate="yes" xml:space="preserve">
          <source>IntoInnerError::fmt</source>
          <target state="translated">IntoInnerError::fmt</target>
        </trans-unit>
        <trans-unit id="74ec382ed3daa2186fca394930d62ea36a8c17d2" translate="yes" xml:space="preserve">
          <source>IntoInnerError::from</source>
          <target state="translated">IntoInnerError::from</target>
        </trans-unit>
        <trans-unit id="f77ca8c3b2a09378cb7ab11a7034bfe301502366" translate="yes" xml:space="preserve">
          <source>IntoInnerError::into</source>
          <target state="translated">IntoInnerError::into</target>
        </trans-unit>
        <trans-unit id="b64935fe113c6776466d9f925b72b58f10a95d0a" translate="yes" xml:space="preserve">
          <source>IntoInnerError::into_inner</source>
          <target state="translated">IntoInnerError::into_inner</target>
        </trans-unit>
        <trans-unit id="b98cd1e7eff5f2d406e34cac12fb4fec6a0205d4" translate="yes" xml:space="preserve">
          <source>IntoInnerError::source</source>
          <target state="translated">IntoInnerError::source</target>
        </trans-unit>
        <trans-unit id="b27666ff3803b78aee0d747dc0d776b1f36b641a" translate="yes" xml:space="preserve">
          <source>IntoInnerError::to_string</source>
          <target state="translated">IntoInnerError::to_string</target>
        </trans-unit>
        <trans-unit id="0b54c908cc8363881d303f189af2d3a384fbe644" translate="yes" xml:space="preserve">
          <source>IntoInnerError::try_from</source>
          <target state="translated">IntoInnerError::try_from</target>
        </trans-unit>
        <trans-unit id="496358b49c2805d5e6526e43d48129b6eb94e5f4" translate="yes" xml:space="preserve">
          <source>IntoInnerError::try_into</source>
          <target state="translated">IntoInnerError::try_into</target>
        </trans-unit>
        <trans-unit id="b48124715dd42f1aa190750b7aa9535327b5b2db" translate="yes" xml:space="preserve">
          <source>IntoInnerError::type_id</source>
          <target state="translated">IntoInnerError::type_id</target>
        </trans-unit>
        <trans-unit id="d5bc3a63a8bde6cc5fb0c0c11c8f6e6a2d150f75" translate="yes" xml:space="preserve">
          <source>IntoIter</source>
          <target state="translated">IntoIter</target>
        </trans-unit>
        <trans-unit id="169272921e3355905d2215419cf69783d5e1115d" translate="yes" xml:space="preserve">
          <source>IntoIter::all</source>
          <target state="translated">IntoIter::all</target>
        </trans-unit>
        <trans-unit id="a15574f60107e9d0464eff7cacee4bccf74dd72e" translate="yes" xml:space="preserve">
          <source>IntoIter::any</source>
          <target state="translated">IntoIter::any</target>
        </trans-unit>
        <trans-unit id="51c36bf4138559f11f65b74500f686e06c1f07c6" translate="yes" xml:space="preserve">
          <source>IntoIter::as_mut_slice</source>
          <target state="translated">IntoIter::as_mut_slice</target>
        </trans-unit>
        <trans-unit id="375d884ce90ecd76e63b6eebc5d52f38165f98ea" translate="yes" xml:space="preserve">
          <source>IntoIter::as_slice</source>
          <target state="translated">IntoIter::as_slice</target>
        </trans-unit>
        <trans-unit id="945728e84b93878ccde99bc6b6c902e3add25ce9" translate="yes" xml:space="preserve">
          <source>IntoIter::borrow</source>
          <target state="translated">IntoIter::borrow</target>
        </trans-unit>
        <trans-unit id="4db752fa4ec7a9c0d095aaf0baac141df030f531" translate="yes" xml:space="preserve">
          <source>IntoIter::borrow_mut</source>
          <target state="translated">IntoIter::borrow_mut</target>
        </trans-unit>
        <trans-unit id="aaf973384105c3d31f532c4ad4e6dc925ca8038e" translate="yes" xml:space="preserve">
          <source>IntoIter::by_ref</source>
          <target state="translated">IntoIter::by_ref</target>
        </trans-unit>
        <trans-unit id="bcd8f637007c65386e7e2794c338143218170c6f" translate="yes" xml:space="preserve">
          <source>IntoIter::chain</source>
          <target state="translated">IntoIter::chain</target>
        </trans-unit>
        <trans-unit id="4b7971718173fafccbf11a50c2db440035e10f18" translate="yes" xml:space="preserve">
          <source>IntoIter::clone</source>
          <target state="translated">IntoIter::clone</target>
        </trans-unit>
        <trans-unit id="cdb70f02920a7096b80eae8222a39e9acc9946ce" translate="yes" xml:space="preserve">
          <source>IntoIter::clone_from</source>
          <target state="translated">IntoIter::clone_from</target>
        </trans-unit>
        <trans-unit id="a82a0721b8481c0815dcd502e84574a2073e6632" translate="yes" xml:space="preserve">
          <source>IntoIter::clone_into</source>
          <target state="translated">IntoIter::clone_into</target>
        </trans-unit>
        <trans-unit id="50371856061d6c57455d0ce1dfd33e8f9cb33e2b" translate="yes" xml:space="preserve">
          <source>IntoIter::cloned</source>
          <target state="translated">IntoIter::cloned</target>
        </trans-unit>
        <trans-unit id="e8ad516621215eb3804081635021e01bb0d15b51" translate="yes" xml:space="preserve">
          <source>IntoIter::cmp</source>
          <target state="translated">IntoIter::cmp</target>
        </trans-unit>
        <trans-unit id="8fbe1060e2b348d75cd8e260134f4152fb629580" translate="yes" xml:space="preserve">
          <source>IntoIter::collect</source>
          <target state="translated">IntoIter::collect</target>
        </trans-unit>
        <trans-unit id="49b1597675bf50c85b1e156757a3fba15d6379b2" translate="yes" xml:space="preserve">
          <source>IntoIter::copied</source>
          <target state="translated">IntoIter::copied</target>
        </trans-unit>
        <trans-unit id="1b07d7fdfbcbc77dd6f739fc3349c3f2c936082e" translate="yes" xml:space="preserve">
          <source>IntoIter::count</source>
          <target state="translated">IntoIter::count</target>
        </trans-unit>
        <trans-unit id="abc24391b60331e5b16547b639bace5c08a577cf" translate="yes" xml:space="preserve">
          <source>IntoIter::cycle</source>
          <target state="translated">IntoIter::cycle</target>
        </trans-unit>
        <trans-unit id="076c1a1b603e193e4eb4e0757f8c8cf292b8dfb5" translate="yes" xml:space="preserve">
          <source>IntoIter::drop</source>
          <target state="translated">IntoIter::drop</target>
        </trans-unit>
        <trans-unit id="c4d617218636a45df4ca846f67499ffba56d0009" translate="yes" xml:space="preserve">
          <source>IntoIter::enumerate</source>
          <target state="translated">IntoIter::enumerate</target>
        </trans-unit>
        <trans-unit id="203a6dcfb8a13fd0add782bc832058504307c28c" translate="yes" xml:space="preserve">
          <source>IntoIter::eq</source>
          <target state="translated">IntoIter::eq</target>
        </trans-unit>
        <trans-unit id="c908d336a9125db6fbd5e895b62999e14ef83fab" translate="yes" xml:space="preserve">
          <source>IntoIter::filter</source>
          <target state="translated">IntoIter::filter</target>
        </trans-unit>
        <trans-unit id="dffdf83b64aeaec0f8093868f1a7bbb32780e9ca" translate="yes" xml:space="preserve">
          <source>IntoIter::filter_map</source>
          <target state="translated">IntoIter::filter_map</target>
        </trans-unit>
        <trans-unit id="ab410a5d7b7cbc92b7134e524269b1fa848fc30b" translate="yes" xml:space="preserve">
          <source>IntoIter::find</source>
          <target state="translated">IntoIter::find</target>
        </trans-unit>
        <trans-unit id="27ee1265a09c796da003def69a36560ceff2b181" translate="yes" xml:space="preserve">
          <source>IntoIter::find_map</source>
          <target state="translated">IntoIter::find_map</target>
        </trans-unit>
        <trans-unit id="eddd95067e023ebec6158e4fd0749c395bbce3b5" translate="yes" xml:space="preserve">
          <source>IntoIter::flat_map</source>
          <target state="translated">IntoIter::flat_map</target>
        </trans-unit>
        <trans-unit id="24f22711986263a8d0e02c113bb93328c331ce4c" translate="yes" xml:space="preserve">
          <source>IntoIter::flatten</source>
          <target state="translated">IntoIter::flatten</target>
        </trans-unit>
        <trans-unit id="e538b5a92b4ad8916bfeef8710693a5e5266e987" translate="yes" xml:space="preserve">
          <source>IntoIter::fmt</source>
          <target state="translated">IntoIter::fmt</target>
        </trans-unit>
        <trans-unit id="d818332c13e9dac3c39cfd50a50265cfaea983ac" translate="yes" xml:space="preserve">
          <source>IntoIter::fold</source>
          <target state="translated">IntoIter::fold</target>
        </trans-unit>
        <trans-unit id="ebce24dad77f86422316868125c1ce1b1376c47d" translate="yes" xml:space="preserve">
          <source>IntoIter::for_each</source>
          <target state="translated">IntoIter::for_each</target>
        </trans-unit>
        <trans-unit id="63d5fee827e27caa7f9e5b809ff35ace75693193" translate="yes" xml:space="preserve">
          <source>IntoIter::from</source>
          <target state="translated">IntoIter::from</target>
        </trans-unit>
        <trans-unit id="d10213dec7222893569b1e32a4313a41a6aaecb0" translate="yes" xml:space="preserve">
          <source>IntoIter::fuse</source>
          <target state="translated">IntoIter::fuse</target>
        </trans-unit>
        <trans-unit id="2c8a9a1c31b0f9b10030a7c20db1f8dae0614589" translate="yes" xml:space="preserve">
          <source>IntoIter::ge</source>
          <target state="translated">IntoIter::ge</target>
        </trans-unit>
        <trans-unit id="104a30acd770869920244c22e6c1a727cdee6dae" translate="yes" xml:space="preserve">
          <source>IntoIter::gt</source>
          <target state="translated">IntoIter::gt</target>
        </trans-unit>
        <trans-unit id="ab8d2e8c457b63ffae7769711a00e1a87b2a56eb" translate="yes" xml:space="preserve">
          <source>IntoIter::inspect</source>
          <target state="translated">IntoIter::inspect</target>
        </trans-unit>
        <trans-unit id="c0c222348756fc6dca4ff42b109916a4d5aa1041" translate="yes" xml:space="preserve">
          <source>IntoIter::into</source>
          <target state="translated">IntoIter::into</target>
        </trans-unit>
        <trans-unit id="00014741248dda82e6a92af65524e8bc527d5270" translate="yes" xml:space="preserve">
          <source>IntoIter::into_iter</source>
          <target state="translated">IntoIter::into_iter</target>
        </trans-unit>
        <trans-unit id="5136432030a36a1b23033a0d753895604b4149ac" translate="yes" xml:space="preserve">
          <source>IntoIter::is_empty</source>
          <target state="translated">IntoIter::is_empty</target>
        </trans-unit>
        <trans-unit id="cf791dcb18f1b7d93faf9bdd64add013d8076499" translate="yes" xml:space="preserve">
          <source>IntoIter::is_sorted</source>
          <target state="translated">IntoIter::is_sorted</target>
        </trans-unit>
        <trans-unit id="5c6daaffe95fe047d7827bfe50f3fd317d40c563" translate="yes" xml:space="preserve">
          <source>IntoIter::is_sorted_by</source>
          <target state="translated">IntoIter::is_sorted_by</target>
        </trans-unit>
        <trans-unit id="9f7c1ed14fd6d8b0ea5624c99850ff1ba4ac8f4c" translate="yes" xml:space="preserve">
          <source>IntoIter::is_sorted_by_key</source>
          <target state="translated">IntoIter::is_sorted_by_key</target>
        </trans-unit>
        <trans-unit id="e39349aed40aa6fcfd458252b9c0e111206b7d16" translate="yes" xml:space="preserve">
          <source>IntoIter::last</source>
          <target state="translated">IntoIter::last</target>
        </trans-unit>
        <trans-unit id="965a66efe77546764045f5f96e42028dbb177b19" translate="yes" xml:space="preserve">
          <source>IntoIter::le</source>
          <target state="translated">IntoIter::le</target>
        </trans-unit>
        <trans-unit id="22be990e0e582b87c69cd8c67de2cfd9920d77cd" translate="yes" xml:space="preserve">
          <source>IntoIter::len</source>
          <target state="translated">IntoIter::len</target>
        </trans-unit>
        <trans-unit id="8440a9053eaee6916d3cec75da248b9b8410507f" translate="yes" xml:space="preserve">
          <source>IntoIter::lt</source>
          <target state="translated">IntoIter::lt</target>
        </trans-unit>
        <trans-unit id="e3e2d404675aba8735567f55b57c588d0c0c351a" translate="yes" xml:space="preserve">
          <source>IntoIter::map</source>
          <target state="translated">IntoIter::map</target>
        </trans-unit>
        <trans-unit id="181026e325e14528b026dfe68716b7b26ecd2d2d" translate="yes" xml:space="preserve">
          <source>IntoIter::max</source>
          <target state="translated">IntoIter::max</target>
        </trans-unit>
        <trans-unit id="dd9a47d87f8a0e2db21c65ae146ddcfdf6e0f952" translate="yes" xml:space="preserve">
          <source>IntoIter::max_by</source>
          <target state="translated">IntoIter::max_by</target>
        </trans-unit>
        <trans-unit id="32723c1a1514dde11ed20c922fc56eff6425fcc8" translate="yes" xml:space="preserve">
          <source>IntoIter::max_by_key</source>
          <target state="translated">IntoIter::max_by_key</target>
        </trans-unit>
        <trans-unit id="c528958b5dc23955203383c2f66331a5a91f6f86" translate="yes" xml:space="preserve">
          <source>IntoIter::min</source>
          <target state="translated">IntoIter::min</target>
        </trans-unit>
        <trans-unit id="390fd21e220a5da046b34c827add37c65b895f97" translate="yes" xml:space="preserve">
          <source>IntoIter::min_by</source>
          <target state="translated">IntoIter::min_by</target>
        </trans-unit>
        <trans-unit id="05a738d3c9912a808e8d6c464d2a7c6d5e602efc" translate="yes" xml:space="preserve">
          <source>IntoIter::min_by_key</source>
          <target state="translated">IntoIter::min_by_key</target>
        </trans-unit>
        <trans-unit id="6cc5e0ff9437accb5f5b72fc20bbf3b3985983ae" translate="yes" xml:space="preserve">
          <source>IntoIter::ne</source>
          <target state="translated">IntoIter::ne</target>
        </trans-unit>
        <trans-unit id="95d68245f80704a894c91867b96e64891330dc8f" translate="yes" xml:space="preserve">
          <source>IntoIter::next</source>
          <target state="translated">IntoIter::next</target>
        </trans-unit>
        <trans-unit id="c4df8bce742e0396e8452ed5481fe551b8b2badd" translate="yes" xml:space="preserve">
          <source>IntoIter::next_back</source>
          <target state="translated">IntoIter::next_back</target>
        </trans-unit>
        <trans-unit id="489c39625b1b427238a77aa99c56a91ae04c9c31" translate="yes" xml:space="preserve">
          <source>IntoIter::nth</source>
          <target state="translated">IntoIter::nth</target>
        </trans-unit>
        <trans-unit id="54146217e0f00a76ac06385e197cdac1011f680c" translate="yes" xml:space="preserve">
          <source>IntoIter::nth_back</source>
          <target state="translated">IntoIter::nth_back</target>
        </trans-unit>
        <trans-unit id="2a293f8986446751513826e2a6e67042070d4889" translate="yes" xml:space="preserve">
          <source>IntoIter::partial_cmp</source>
          <target state="translated">IntoIter::partial_cmp</target>
        </trans-unit>
        <trans-unit id="7432ba6416e1cdf63a74ea8f79c2559a3d61d6f5" translate="yes" xml:space="preserve">
          <source>IntoIter::partition</source>
          <target state="translated">IntoIter::partition</target>
        </trans-unit>
        <trans-unit id="a2c1d18ee38c61b94c1e15afa12302f3d7a18c8a" translate="yes" xml:space="preserve">
          <source>IntoIter::peekable</source>
          <target state="translated">IntoIter::peekable</target>
        </trans-unit>
        <trans-unit id="7240e01f5d7115ce4d05e7b2faa4a077b8d81625" translate="yes" xml:space="preserve">
          <source>IntoIter::position</source>
          <target state="translated">IntoIter::position</target>
        </trans-unit>
        <trans-unit id="0fd92308f15c7b0abf6973b7defdbd676ab073f7" translate="yes" xml:space="preserve">
          <source>IntoIter::product</source>
          <target state="translated">IntoIter::product</target>
        </trans-unit>
        <trans-unit id="87be344797cbbbf8b5139732e88f449d1b5cc284" translate="yes" xml:space="preserve">
          <source>IntoIter::rev</source>
          <target state="translated">IntoIter::rev</target>
        </trans-unit>
        <trans-unit id="cb35ac9eaac8868683280e1dd8b84b76dcd5253c" translate="yes" xml:space="preserve">
          <source>IntoIter::rfind</source>
          <target state="translated">IntoIter::rfind</target>
        </trans-unit>
        <trans-unit id="7231cdd22fc5f767b74f59229681b2cb27b3a8a9" translate="yes" xml:space="preserve">
          <source>IntoIter::rfold</source>
          <target state="translated">IntoIter::rfold</target>
        </trans-unit>
        <trans-unit id="fc4f91f7bc50fd166afe9eee868201d382ba4b60" translate="yes" xml:space="preserve">
          <source>IntoIter::rposition</source>
          <target state="translated">IntoIter::rposition</target>
        </trans-unit>
        <trans-unit id="5298f16d195003a5ea725c4a2f787c36fc2ecf95" translate="yes" xml:space="preserve">
          <source>IntoIter::scan</source>
          <target state="translated">IntoIter::scan</target>
        </trans-unit>
        <trans-unit id="e2c872b5440e3714483ceb31004f10b634f3b596" translate="yes" xml:space="preserve">
          <source>IntoIter::size_hint</source>
          <target state="translated">IntoIter::size_hint</target>
        </trans-unit>
        <trans-unit id="8da43de95b9fb617735c0b5f05ce1971df79ae91" translate="yes" xml:space="preserve">
          <source>IntoIter::skip</source>
          <target state="translated">IntoIter::skip</target>
        </trans-unit>
        <trans-unit id="7cdd555373586d1cc526b91787520022c1b5802f" translate="yes" xml:space="preserve">
          <source>IntoIter::skip_while</source>
          <target state="translated">IntoIter::skip_while</target>
        </trans-unit>
        <trans-unit id="661cf4b069d769b36d7e4adf5b8fb0aa4c3dd29f" translate="yes" xml:space="preserve">
          <source>IntoIter::step_by</source>
          <target state="translated">IntoIter::step_by</target>
        </trans-unit>
        <trans-unit id="98bf1ddbdcb82a855ba5cfa0a55bb46fec337f4b" translate="yes" xml:space="preserve">
          <source>IntoIter::sum</source>
          <target state="translated">IntoIter::sum</target>
        </trans-unit>
        <trans-unit id="d4618f74f9d5d75a0acca06e8a09c073539a2aef" translate="yes" xml:space="preserve">
          <source>IntoIter::take</source>
          <target state="translated">IntoIter::take</target>
        </trans-unit>
        <trans-unit id="9fe22ceb1381a9edace4e35f2d28c23142f99a56" translate="yes" xml:space="preserve">
          <source>IntoIter::take_while</source>
          <target state="translated">IntoIter::take_while</target>
        </trans-unit>
        <trans-unit id="2b34db4df91a1ac8be037bcd7eb58942819d00ad" translate="yes" xml:space="preserve">
          <source>IntoIter::to_owned</source>
          <target state="translated">IntoIter::to_owned</target>
        </trans-unit>
        <trans-unit id="772750fa37f6b74b4e6358710cdb957bddeb44ce" translate="yes" xml:space="preserve">
          <source>IntoIter::try_fold</source>
          <target state="translated">IntoIter::try_fold</target>
        </trans-unit>
        <trans-unit id="edf3daf75af0e05f2d21875b7c094720775d11c5" translate="yes" xml:space="preserve">
          <source>IntoIter::try_for_each</source>
          <target state="translated">IntoIter::try_for_each</target>
        </trans-unit>
        <trans-unit id="d6b9806fe0a7d9fecc2d3de823bae6fd8502edb8" translate="yes" xml:space="preserve">
          <source>IntoIter::try_from</source>
          <target state="translated">IntoIter::try_from</target>
        </trans-unit>
        <trans-unit id="c651b804d75adc612d6c4b9e3a2f3139ff83b4ef" translate="yes" xml:space="preserve">
          <source>IntoIter::try_into</source>
          <target state="translated">IntoIter::try_into</target>
        </trans-unit>
        <trans-unit id="0dba2be6b9f4b004d4e321a351df358b821e2637" translate="yes" xml:space="preserve">
          <source>IntoIter::try_rfold</source>
          <target state="translated">IntoIter::try_rfold</target>
        </trans-unit>
        <trans-unit id="b656b4334602090068cb0e3af82bcfe6e99000c6" translate="yes" xml:space="preserve">
          <source>IntoIter::type_id</source>
          <target state="translated">IntoIter::type_id</target>
        </trans-unit>
        <trans-unit id="93d7a5a1be00e631699c6d0e8f2b9a469d7682df" translate="yes" xml:space="preserve">
          <source>IntoIter::unzip</source>
          <target state="translated">IntoIter::unzip</target>
        </trans-unit>
        <trans-unit id="2ead629bd91db49e5e289d4a9d83aa966e2aef76" translate="yes" xml:space="preserve">
          <source>IntoIter::zip</source>
          <target state="translated">IntoIter::zip</target>
        </trans-unit>
        <trans-unit id="5a9e582d9690319d0718e51b09f69686a20f0e41" translate="yes" xml:space="preserve">
          <source>IntoIterSorted</source>
          <target state="translated">IntoIterSorted</target>
        </trans-unit>
        <trans-unit id="7ec61d625cdf338b6e7eefc1b7f35fb136a21981" translate="yes" xml:space="preserve">
          <source>IntoIterator</source>
          <target state="translated">IntoIterator</target>
        </trans-unit>
        <trans-unit id="6c78f7b3978fea56c0f5ff4073e20eca741514bf" translate="yes" xml:space="preserve">
          <source>IntoIterator::into_iter</source>
          <target state="translated">IntoIterator::into_iter</target>
        </trans-unit>
        <trans-unit id="d9576fb0c66590a804264acb28dd47a3fb023c22" translate="yes" xml:space="preserve">
          <source>IntoKeys</source>
          <target state="translated">IntoKeys</target>
        </trans-unit>
        <trans-unit id="16b2c49e47a9cdd1e65117e3f6dfb4bcbee6f387" translate="yes" xml:space="preserve">
          <source>IntoRawFd</source>
          <target state="translated">IntoRawFd</target>
        </trans-unit>
        <trans-unit id="a365631ab12e53b287fe74345a1899c6e331c741" translate="yes" xml:space="preserve">
          <source>IntoRawHandle</source>
          <target state="translated">IntoRawHandle</target>
        </trans-unit>
        <trans-unit id="9d9a97edc4ce8e9862f860071c09a9c14a518af1" translate="yes" xml:space="preserve">
          <source>IntoRawSocket</source>
          <target state="translated">IntoRawSocket</target>
        </trans-unit>
        <trans-unit id="7f11e8cc7632bcc87c94b5a2c9b1b74de01004d8" translate="yes" xml:space="preserve">
          <source>IntoStringError</source>
          <target state="translated">IntoStringError</target>
        </trans-unit>
        <trans-unit id="50d9b93fcfc23141a5ffff21c34c9750d4a3c933" translate="yes" xml:space="preserve">
          <source>IntoStringError::borrow</source>
          <target state="translated">IntoStringError::borrow</target>
        </trans-unit>
        <trans-unit id="1966c3cf239a5f29a297fcc1a9db02fe5893217d" translate="yes" xml:space="preserve">
          <source>IntoStringError::borrow_mut</source>
          <target state="translated">IntoStringError::borrow_mut</target>
        </trans-unit>
        <trans-unit id="4452bc0fb43159ff656d4a93c8618a42c0393734" translate="yes" xml:space="preserve">
          <source>IntoStringError::cause</source>
          <target state="translated">IntoStringError::cause</target>
        </trans-unit>
        <trans-unit id="311fc7dd5db9e933c2a85125d79440050ba91ace" translate="yes" xml:space="preserve">
          <source>IntoStringError::clone</source>
          <target state="translated">IntoStringError::clone</target>
        </trans-unit>
        <trans-unit id="170ddc74179150ba05b86b24f4fbc1d6aa2d52e0" translate="yes" xml:space="preserve">
          <source>IntoStringError::clone_from</source>
          <target state="translated">IntoStringError::clone_from</target>
        </trans-unit>
        <trans-unit id="e4500a75c8a08379e11e639eff9a48d27a0ae646" translate="yes" xml:space="preserve">
          <source>IntoStringError::clone_into</source>
          <target state="translated">IntoStringError::clone_into</target>
        </trans-unit>
        <trans-unit id="e6d3177264e5419002ca6b90870d84f6de5318ae" translate="yes" xml:space="preserve">
          <source>IntoStringError::description</source>
          <target state="translated">IntoStringError::description</target>
        </trans-unit>
        <trans-unit id="5bb48ecdc95fe61110fc679d446ff8bfb8efd2a3" translate="yes" xml:space="preserve">
          <source>IntoStringError::eq</source>
          <target state="translated">IntoStringError::eq</target>
        </trans-unit>
        <trans-unit id="2de62132572699348da4c1486645acbfe65816f7" translate="yes" xml:space="preserve">
          <source>IntoStringError::fmt</source>
          <target state="translated">IntoStringError::fmt</target>
        </trans-unit>
        <trans-unit id="371ee3a8925c033093eb47daab1eaf52038293a7" translate="yes" xml:space="preserve">
          <source>IntoStringError::from</source>
          <target state="translated">IntoStringError::from</target>
        </trans-unit>
        <trans-unit id="7701464be4ef893fc2c5c3f4c5145f545fd69bc7" translate="yes" xml:space="preserve">
          <source>IntoStringError::into</source>
          <target state="translated">IntoStringError::into</target>
        </trans-unit>
        <trans-unit id="582c82615bdad453dc78b3b7161f1c2e89500049" translate="yes" xml:space="preserve">
          <source>IntoStringError::into_cstring</source>
          <target state="translated">IntoStringError::into_cstring</target>
        </trans-unit>
        <trans-unit id="72c3a4bc2137cb67b0ad93a2e5391da1fc022c51" translate="yes" xml:space="preserve">
          <source>IntoStringError::ne</source>
          <target state="translated">IntoStringError::ne</target>
        </trans-unit>
        <trans-unit id="44a66cffe02ce75fc4e71dc95ab13d91cdba6c61" translate="yes" xml:space="preserve">
          <source>IntoStringError::source</source>
          <target state="translated">IntoStringError::source</target>
        </trans-unit>
        <trans-unit id="ad03af038caae21639f90297a46d2ffcd2596ee4" translate="yes" xml:space="preserve">
          <source>IntoStringError::to_owned</source>
          <target state="translated">IntoStringError::to_owned</target>
        </trans-unit>
        <trans-unit id="c09f10ab1dd9b0342f7fb1dad4fc7e2096345bb9" translate="yes" xml:space="preserve">
          <source>IntoStringError::to_string</source>
          <target state="translated">IntoStringError::to_string</target>
        </trans-unit>
        <trans-unit id="5c3026fa186ad1f8d938dd92384c9db9e3dc865e" translate="yes" xml:space="preserve">
          <source>IntoStringError::try_from</source>
          <target state="translated">IntoStringError::try_from</target>
        </trans-unit>
        <trans-unit id="9fba74ad721f87d025ad8e718482da5c76958744" translate="yes" xml:space="preserve">
          <source>IntoStringError::try_into</source>
          <target state="translated">IntoStringError::try_into</target>
        </trans-unit>
        <trans-unit id="99cffcb47b8ca60f8f0bb7b29b56b473ac510576" translate="yes" xml:space="preserve">
          <source>IntoStringError::type_id</source>
          <target state="translated">IntoStringError::type_id</target>
        </trans-unit>
        <trans-unit id="0bd993d0b67ac388c683b5e901ee7503442bb940" translate="yes" xml:space="preserve">
          <source>IntoStringError::utf8_error</source>
          <target state="translated">IntoStringError::utf8_error</target>
        </trans-unit>
        <trans-unit id="8c734a51383a161298950f1bdab61a8852ba0f3c" translate="yes" xml:space="preserve">
          <source>IntoValues</source>
          <target state="translated">IntoValues</target>
        </trans-unit>
        <trans-unit id="54ac30147bd72e0bc1ea9316f36c7e85df3ce9ba" translate="yes" xml:space="preserve">
          <source>Introducing mutability 'inside' of something immutable</source>
          <target state="translated">不変のものの「内部」に突然変異性を導入</target>
        </trans-unit>
        <trans-unit id="2473e96bc614a911821242119918a241a41836d6" translate="yes" xml:space="preserve">
          <source>Introduction</source>
          <target state="translated">Introduction</target>
        </trans-unit>
        <trans-unit id="633ae22a8ea65542349f4c6d8bd195a50bd29e7d" translate="yes" xml:space="preserve">
          <source>Invalid ABI (Application Binary Interface) used in the code.</source>
          <target state="translated">コード内で使用されている ABI (Application Binary Interface)が無効です。</target>
        </trans-unit>
        <trans-unit id="91f8a82c86c42154fb0095cbe44eb1389b3549a5" translate="yes" xml:space="preserve">
          <source>Invalid Array Element Access</source>
          <target state="translated">無効な配列要素アクセス</target>
        </trans-unit>
        <trans-unit id="b05fe7935b939bfbbf85104eb2c338970f3d02f1" translate="yes" xml:space="preserve">
          <source>Invalid metadata in a wide reference, &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt;, or raw pointer:</source>
          <target state="translated">ワイド参照、 &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; 、または生のポインターの無効なメタデータ：</target>
        </trans-unit>
        <trans-unit id="d246a9d199c00b56fdfcde8fcd1cd5c6d94b9a1b" translate="yes" xml:space="preserve">
          <source>Invalid monomorphization of an intrinsic function was used.</source>
          <target state="translated">固有関数の無効な単形化が使用されていました。</target>
        </trans-unit>
        <trans-unit id="48ebb476b87cd60f48ebf50a0407b351c5107cec" translate="yes" xml:space="preserve">
          <source>Invalid monomorphization of an intrinsic function was used. Erroneous code example:</source>
          <target state="translated">無効な固有関数の単定形化が使用されました。誤ったコード例です。</target>
        </trans-unit>
        <trans-unit id="5ede6c63a691e01ee97efae352db5386371736a5" translate="yes" xml:space="preserve">
          <source>Invalid values for a type with a custom definition of invalid values. In the standard library, this affects &lt;a href=&quot;https://doc.rust-lang.org/core/ptr/struct.NonNull.html&quot;&gt;&lt;code&gt;NonNull&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://doc.rust-lang.org/core/num/index.html&quot;&gt;&lt;code&gt;NonZero*&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">無効な値のカスタム定義を持つタイプの無効な値。標準ライブラリでは、これは&lt;a href=&quot;https://doc.rust-lang.org/core/ptr/struct.NonNull.html&quot;&gt; &lt;code&gt;NonNull&amp;lt;T&amp;gt;&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;https://doc.rust-lang.org/core/num/index.html&quot;&gt; &lt;code&gt;NonZero*&lt;/code&gt; &lt;/a&gt;影響します。</target>
        </trans-unit>
        <trans-unit id="2724bdaef4601c56db3d05244277ab05b35a54b3" translate="yes" xml:space="preserve">
          <source>Invalid values in primitive types, even in private fields and locals:</source>
          <target state="translated">プライベートフィールドやローカルであっても、プリミティブ型の値が無効です。</target>
        </trans-unit>
        <trans-unit id="3390616cafac7ff314d6aadaf20e48034cbb3314" translate="yes" xml:space="preserve">
          <source>Invariants</source>
          <target state="translated">Invariants</target>
        </trans-unit>
        <trans-unit id="556ef6bf1ce64fe45a2cdf7c095ee4ab45ecf2bc" translate="yes" xml:space="preserve">
          <source>Inverse hyperbolic cosine function.</source>
          <target state="translated">逆双曲余弦関数。</target>
        </trans-unit>
        <trans-unit id="6ed8d04de38ff90d141bd8e28a751473d8b5e58a" translate="yes" xml:space="preserve">
          <source>Inverse hyperbolic sine function.</source>
          <target state="translated">逆双曲正弦関数。</target>
        </trans-unit>
        <trans-unit id="93d434c1339f113d603c470280ae15d6ba4069dd" translate="yes" xml:space="preserve">
          <source>Inverse hyperbolic tangent function.</source>
          <target state="translated">逆双曲正接関数。</target>
        </trans-unit>
        <trans-unit id="88febe0c5bd47bdcaa24fa407c931736c9254d02" translate="yes" xml:space="preserve">
          <source>Invokes &lt;a href=&quot;../ffi/struct.osstring#method.capacity&quot;&gt;&lt;code&gt;capacity&lt;/code&gt;&lt;/a&gt; on the underlying instance of &lt;a href=&quot;../ffi/struct.osstring&quot;&gt;&lt;code&gt;OsString&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../ffi/struct.osstring&quot;&gt; &lt;code&gt;OsString&lt;/code&gt; &lt;/a&gt;の基になるインスタンスの&lt;a href=&quot;../ffi/struct.osstring#method.capacity&quot;&gt; &lt;code&gt;capacity&lt;/code&gt; &lt;/a&gt;を呼び出します。</target>
        </trans-unit>
        <trans-unit id="bf466fb0852d7cebcba10b12dd881c0dd0bb5daa" translate="yes" xml:space="preserve">
          <source>Invokes &lt;a href=&quot;../ffi/struct.osstring#method.clear&quot;&gt;&lt;code&gt;clear&lt;/code&gt;&lt;/a&gt; on the underlying instance of &lt;a href=&quot;../ffi/struct.osstring&quot;&gt;&lt;code&gt;OsString&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../ffi/struct.osstring&quot;&gt; &lt;code&gt;OsString&lt;/code&gt; &lt;/a&gt;の基になるインスタンスで&lt;a href=&quot;../ffi/struct.osstring#method.clear&quot;&gt; &lt;code&gt;clear&lt;/code&gt; &lt;/a&gt;を呼び出します。</target>
        </trans-unit>
        <trans-unit id="84ecde704d4d279fa7d2d406323e14c8fdc0fdc9" translate="yes" xml:space="preserve">
          <source>Invokes &lt;a href=&quot;../ffi/struct.osstring#method.reserve&quot;&gt;&lt;code&gt;reserve&lt;/code&gt;&lt;/a&gt; on the underlying instance of &lt;a href=&quot;../ffi/struct.osstring&quot;&gt;&lt;code&gt;OsString&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../ffi/struct.osstring&quot;&gt; &lt;code&gt;OsString&lt;/code&gt; &lt;/a&gt;の基になるインスタンスで&lt;a href=&quot;../ffi/struct.osstring#method.reserve&quot;&gt; &lt;code&gt;reserve&lt;/code&gt; &lt;/a&gt;を呼び出します。</target>
        </trans-unit>
        <trans-unit id="19bb4e6602e1786c18a6b52f8a0bcf8a73adf2a7" translate="yes" xml:space="preserve">
          <source>Invokes &lt;a href=&quot;../ffi/struct.osstring#method.reserve_exact&quot;&gt;&lt;code&gt;reserve_exact&lt;/code&gt;&lt;/a&gt; on the underlying instance of &lt;a href=&quot;../ffi/struct.osstring&quot;&gt;&lt;code&gt;OsString&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../ffi/struct.osstring#method.reserve_exact&quot;&gt; &lt;code&gt;reserve_exact&lt;/code&gt; &lt;/a&gt;の基になるインスタンスで&lt;a href=&quot;../ffi/struct.osstring&quot;&gt; &lt;code&gt;OsString&lt;/code&gt; &lt;/a&gt;呼び出します。</target>
        </trans-unit>
        <trans-unit id="17f17310b62ca98a66dacbef4b44348c04ea8919" translate="yes" xml:space="preserve">
          <source>Invokes &lt;a href=&quot;../ffi/struct.osstring#method.shrink_to&quot;&gt;&lt;code&gt;shrink_to&lt;/code&gt;&lt;/a&gt; on the underlying instance of &lt;a href=&quot;../ffi/struct.osstring&quot;&gt;&lt;code&gt;OsString&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../ffi/struct.osstring#method.shrink_to&quot;&gt; &lt;code&gt;shrink_to&lt;/code&gt; &lt;/a&gt;の基になるインスタンスで&lt;a href=&quot;../ffi/struct.osstring&quot;&gt; &lt;code&gt;OsString&lt;/code&gt; &lt;/a&gt;呼び出します。</target>
        </trans-unit>
        <trans-unit id="dc1a66892291a57859c285b1511e4adb63b718ef" translate="yes" xml:space="preserve">
          <source>Invokes &lt;a href=&quot;../ffi/struct.osstring#method.shrink_to_fit&quot;&gt;&lt;code&gt;shrink_to_fit&lt;/code&gt;&lt;/a&gt; on the underlying instance of &lt;a href=&quot;../ffi/struct.osstring&quot;&gt;&lt;code&gt;OsString&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../ffi/struct.osstring#method.shrink_to_fit&quot;&gt; &lt;code&gt;shrink_to_fit&lt;/code&gt; &lt;/a&gt;の基になるインスタンスで&lt;a href=&quot;../ffi/struct.osstring&quot;&gt; &lt;code&gt;OsString&lt;/code&gt; &lt;/a&gt;呼び出します。</target>
        </trans-unit>
        <trans-unit id="33939d473461270530bee40f4613f194eeb624e1" translate="yes" xml:space="preserve">
          <source>Invokes a closure, capturing the cause of an unwinding panic if one occurs.</source>
          <target state="translated">閉鎖を呼び出し、パニックが発生した場合には、巻き戻しのないパニックの原因を捕捉します。</target>
        </trans-unit>
        <trans-unit id="0dc0bc0c16d89f8a26d9f8e8e27b63f4e79127b2" translate="yes" xml:space="preserve">
          <source>Invokes memset on the specified pointer, setting &lt;code&gt;count * size_of::&amp;lt;T&amp;gt;()&lt;/code&gt; bytes of memory starting at &lt;code&gt;self&lt;/code&gt; to &lt;code&gt;val&lt;/code&gt;.</source>
          <target state="translated">指定されたポインターでmemsetを呼び出し、 &lt;code&gt;self&lt;/code&gt; で始まるメモリの &lt;code&gt;count * size_of::&amp;lt;T&amp;gt;()&lt;/code&gt; バイトを &lt;code&gt;val&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="7edb4f958e67ccc2ebdef5e59be5a3705d1b5984" translate="yes" xml:space="preserve">
          <source>Invoking the macro on an expression moves and takes ownership of it before returning the evaluated expression unchanged. If the type of the expression does not implement &lt;code&gt;Copy&lt;/code&gt; and you don't want to give up ownership, you can instead borrow with &lt;code&gt;dbg!(&amp;amp;expr)&lt;/code&gt; for some expression &lt;code&gt;expr&lt;/code&gt;.</source>
          <target state="translated">式でマクロを呼び出すと、評価された式を変更せずに返す前に、移動してその所有権を取得します。式のタイプが &lt;code&gt;Copy&lt;/code&gt; を実装せず、所有権を放棄したくない場合は、代わりに &lt;code&gt;dbg!(&amp;amp;expr)&lt;/code&gt; を使用して式 &lt;code&gt;expr&lt;/code&gt; を借りることができます。</target>
        </trans-unit>
        <trans-unit id="8a14686f3a91a872040e4db2ac1c21bf4f904c92" translate="yes" xml:space="preserve">
          <source>Invoking undefined behavior via compiler intrinsics.</source>
          <target state="translated">コンパイラの内部構造を介して未定義の動作を呼び出します。</target>
        </trans-unit>
        <trans-unit id="a85319a9242521d1b81154c86dbb76178cda35d2" translate="yes" xml:space="preserve">
          <source>Invoking undefined behavior via compiler intrinsics:</source>
          <target state="translated">コンパイラの内部構造を介して未定義の動作を呼び出します。</target>
        </trans-unit>
        <trans-unit id="8ea7ba835c096df0008ad44cff1240d3b0866ef1" translate="yes" xml:space="preserve">
          <source>IoSlice</source>
          <target state="translated">IoSlice</target>
        </trans-unit>
        <trans-unit id="bf69b8681dc713cd673b4744a6a18884b73addc1" translate="yes" xml:space="preserve">
          <source>IoSlice::align_to</source>
          <target state="translated">IoSlice::align_to</target>
        </trans-unit>
        <trans-unit id="b6ecef449d7c716925f5b7b0b49d082a4bdbc2b8" translate="yes" xml:space="preserve">
          <source>IoSlice::as_ptr</source>
          <target state="translated">IoSlice::as_ptr</target>
        </trans-unit>
        <trans-unit id="77a5c4c2b1cbe6822957872bc631e9dc81a97b7a" translate="yes" xml:space="preserve">
          <source>IoSlice::binary_search</source>
          <target state="translated">IoSlice::binary_search</target>
        </trans-unit>
        <trans-unit id="b99305714a884d4e67d7225ef67c1aaace3a0d2a" translate="yes" xml:space="preserve">
          <source>IoSlice::binary_search_by</source>
          <target state="translated">IoSlice::binary_search_by</target>
        </trans-unit>
        <trans-unit id="b2b7e6c0a986e61ca591420616fe6966a129fdad" translate="yes" xml:space="preserve">
          <source>IoSlice::binary_search_by_key</source>
          <target state="translated">IoSlice::binary_search_by_key</target>
        </trans-unit>
        <trans-unit id="69d111c0972ec5963c7284b91c7aebfcec55891b" translate="yes" xml:space="preserve">
          <source>IoSlice::borrow</source>
          <target state="translated">IoSlice::borrow</target>
        </trans-unit>
        <trans-unit id="e0220b06a9a728a2ee453fdb0bf48c89e6024a6b" translate="yes" xml:space="preserve">
          <source>IoSlice::borrow_mut</source>
          <target state="translated">IoSlice::borrow_mut</target>
        </trans-unit>
        <trans-unit id="67dc23a0402757984c60ce5b402f95252eb22d87" translate="yes" xml:space="preserve">
          <source>IoSlice::chunks</source>
          <target state="translated">IoSlice::chunks</target>
        </trans-unit>
        <trans-unit id="a3056337e95e295361e36fae2d3ac55a93aa581c" translate="yes" xml:space="preserve">
          <source>IoSlice::chunks_exact</source>
          <target state="translated">IoSlice::chunks_exact</target>
        </trans-unit>
        <trans-unit id="911fd13cfc35bda5552744aea0451f85b09933ce" translate="yes" xml:space="preserve">
          <source>IoSlice::contains</source>
          <target state="translated">IoSlice::contains</target>
        </trans-unit>
        <trans-unit id="1bff3dd00133bd3cfb286f3bea310ac0cf1421c3" translate="yes" xml:space="preserve">
          <source>IoSlice::deref</source>
          <target state="translated">IoSlice::deref</target>
        </trans-unit>
        <trans-unit id="48072cbda243e3b9e179d39ee1a7cc128d1a937f" translate="yes" xml:space="preserve">
          <source>IoSlice::ends_with</source>
          <target state="translated">IoSlice::ends_with</target>
        </trans-unit>
        <trans-unit id="12d21cc5f8a9a9ed66a9f121aa2ba7dcd992afa2" translate="yes" xml:space="preserve">
          <source>IoSlice::eq_ignore_ascii_case</source>
          <target state="translated">IoSlice::eq_ignore_ascii_case</target>
        </trans-unit>
        <trans-unit id="cd8d733f91433d04a8ce7781e52e70e7dfffd99f" translate="yes" xml:space="preserve">
          <source>IoSlice::first</source>
          <target state="translated">IoSlice::first</target>
        </trans-unit>
        <trans-unit id="df6126ce38880e35ce060ff0c854c8309a24ac0e" translate="yes" xml:space="preserve">
          <source>IoSlice::fmt</source>
          <target state="translated">IoSlice::fmt</target>
        </trans-unit>
        <trans-unit id="ff7211a4daabf521e93261511880baae217efac4" translate="yes" xml:space="preserve">
          <source>IoSlice::from</source>
          <target state="translated">IoSlice::from</target>
        </trans-unit>
        <trans-unit id="3f81ad3ba2d6f6e75b1565f7d95b6aaa063cf60a" translate="yes" xml:space="preserve">
          <source>IoSlice::get</source>
          <target state="translated">IoSlice::get</target>
        </trans-unit>
        <trans-unit id="ddd8c6f234cd7ab0c552da1f27123df012711db7" translate="yes" xml:space="preserve">
          <source>IoSlice::get_unchecked</source>
          <target state="translated">IoSlice::get_unchecked</target>
        </trans-unit>
        <trans-unit id="fea55d08cc2b49f13f05547189186a4dc8d60ff9" translate="yes" xml:space="preserve">
          <source>IoSlice::into</source>
          <target state="translated">IoSlice::into</target>
        </trans-unit>
        <trans-unit id="fa82db2f2b2c313a4de2311d7bc8d4baf4a421fa" translate="yes" xml:space="preserve">
          <source>IoSlice::is_ascii</source>
          <target state="translated">IoSlice::is_ascii</target>
        </trans-unit>
        <trans-unit id="ff882761d48529351ae9d206494e3bec2c600ee5" translate="yes" xml:space="preserve">
          <source>IoSlice::is_empty</source>
          <target state="translated">IoSlice::is_empty</target>
        </trans-unit>
        <trans-unit id="3545e77f51efa1c6b8286f04bc4e0b2470be417b" translate="yes" xml:space="preserve">
          <source>IoSlice::is_sorted</source>
          <target state="translated">IoSlice::is_sorted</target>
        </trans-unit>
        <trans-unit id="4701fb2e410ad6e71f1f087266f993194c134f7b" translate="yes" xml:space="preserve">
          <source>IoSlice::is_sorted_by</source>
          <target state="translated">IoSlice::is_sorted_by</target>
        </trans-unit>
        <trans-unit id="9472b8d8f8511079fc16e702ed084b2b7f7e6016" translate="yes" xml:space="preserve">
          <source>IoSlice::is_sorted_by_key</source>
          <target state="translated">IoSlice::is_sorted_by_key</target>
        </trans-unit>
        <trans-unit id="2f0762847dd7e3fd1491b336362b18393b1a6965" translate="yes" xml:space="preserve">
          <source>IoSlice::iter</source>
          <target state="translated">IoSlice::iter</target>
        </trans-unit>
        <trans-unit id="f1c33c515a4f6f2a77787f9f8b1800fc0cb7392a" translate="yes" xml:space="preserve">
          <source>IoSlice::last</source>
          <target state="translated">IoSlice::last</target>
        </trans-unit>
        <trans-unit id="71b526ef1019bf4f73ee807254105381336e4d1c" translate="yes" xml:space="preserve">
          <source>IoSlice::len</source>
          <target state="translated">IoSlice::len</target>
        </trans-unit>
        <trans-unit id="967dd07a6e0c5576e4280dec2d30d45df16ac291" translate="yes" xml:space="preserve">
          <source>IoSlice::new</source>
          <target state="translated">IoSlice::new</target>
        </trans-unit>
        <trans-unit id="e9562dd3a5978f42d06066035675f397acce1c2b" translate="yes" xml:space="preserve">
          <source>IoSlice::rchunks</source>
          <target state="translated">IoSlice::rchunks</target>
        </trans-unit>
        <trans-unit id="af30963d5b4c2c7628a5afb93f5a9d3130eaa545" translate="yes" xml:space="preserve">
          <source>IoSlice::rchunks_exact</source>
          <target state="translated">IoSlice::rchunks_exact</target>
        </trans-unit>
        <trans-unit id="5006a78909ddbf7c8e9227d27186ddd35dae6459" translate="yes" xml:space="preserve">
          <source>IoSlice::repeat</source>
          <target state="translated">IoSlice::repeat</target>
        </trans-unit>
        <trans-unit id="055c2496baa6ae3bd9b33d660b588e6f2ebf5d4c" translate="yes" xml:space="preserve">
          <source>IoSlice::rsplit</source>
          <target state="translated">IoSlice::rsplit</target>
        </trans-unit>
        <trans-unit id="d3df5856ba5180f3260fca40514105630ea1ae9a" translate="yes" xml:space="preserve">
          <source>IoSlice::rsplitn</source>
          <target state="translated">IoSlice::rsplitn</target>
        </trans-unit>
        <trans-unit id="4e9115a3db6b0c099ecf94ffba746840b9b61e39" translate="yes" xml:space="preserve">
          <source>IoSlice::split</source>
          <target state="translated">IoSlice::split</target>
        </trans-unit>
        <trans-unit id="69853953f39b08c8104a39f89f6c888f20cccdf6" translate="yes" xml:space="preserve">
          <source>IoSlice::split_at</source>
          <target state="translated">IoSlice::split_at</target>
        </trans-unit>
        <trans-unit id="49a1324d962da721e4be986803d84827537c7170" translate="yes" xml:space="preserve">
          <source>IoSlice::split_first</source>
          <target state="translated">IoSlice::split_first</target>
        </trans-unit>
        <trans-unit id="05538b404adac2961d7e5bc92bef01b019825cd6" translate="yes" xml:space="preserve">
          <source>IoSlice::split_last</source>
          <target state="translated">IoSlice::split_last</target>
        </trans-unit>
        <trans-unit id="019564e811a7ef239d682e135b0fc68c251b133b" translate="yes" xml:space="preserve">
          <source>IoSlice::splitn</source>
          <target state="translated">IoSlice::splitn</target>
        </trans-unit>
        <trans-unit id="f61e9cda20345736621059e982beaf04c366b19b" translate="yes" xml:space="preserve">
          <source>IoSlice::starts_with</source>
          <target state="translated">IoSlice::starts_with</target>
        </trans-unit>
        <trans-unit id="843f9a3f4aeba9de52f81c21b641623650a4f908" translate="yes" xml:space="preserve">
          <source>IoSlice::to_ascii_lowercase</source>
          <target state="translated">IoSlice::to_ascii_lowercase</target>
        </trans-unit>
        <trans-unit id="1000adb40178bc3812fa5c878bdbe59eab225ef9" translate="yes" xml:space="preserve">
          <source>IoSlice::to_ascii_uppercase</source>
          <target state="translated">IoSlice::to_ascii_uppercase</target>
        </trans-unit>
        <trans-unit id="8a40698597eb46430e06c8ca37e19cc35bf7670e" translate="yes" xml:space="preserve">
          <source>IoSlice::to_vec</source>
          <target state="translated">IoSlice::to_vec</target>
        </trans-unit>
        <trans-unit id="790cec74306c7f07e3a27b8f7dfb0bbb3794bb65" translate="yes" xml:space="preserve">
          <source>IoSlice::try_from</source>
          <target state="translated">IoSlice::try_from</target>
        </trans-unit>
        <trans-unit id="43f5e13ccc6bae71b7f6204f1727c50f3248e591" translate="yes" xml:space="preserve">
          <source>IoSlice::try_into</source>
          <target state="translated">IoSlice::try_into</target>
        </trans-unit>
        <trans-unit id="ba54fa43762f26b417d2b3603b107780cf506264" translate="yes" xml:space="preserve">
          <source>IoSlice::type_id</source>
          <target state="translated">IoSlice::type_id</target>
        </trans-unit>
        <trans-unit id="4e3b2ad4c2f16ac0767ead9ab2125e9d33ceee8e" translate="yes" xml:space="preserve">
          <source>IoSlice::windows</source>
          <target state="translated">IoSlice::windows</target>
        </trans-unit>
        <trans-unit id="3095e84a9c9bc332f4091ce90417e2f7cc01182f" translate="yes" xml:space="preserve">
          <source>IoSliceMut</source>
          <target state="translated">IoSliceMut</target>
        </trans-unit>
        <trans-unit id="edc61764332d50536dc632bf3e42031b6220229f" translate="yes" xml:space="preserve">
          <source>IoSliceMut::align_to</source>
          <target state="translated">IoSliceMut::align_to</target>
        </trans-unit>
        <trans-unit id="6165ce93f6a343b1b6974bf63a9dc441cfa9b855" translate="yes" xml:space="preserve">
          <source>IoSliceMut::align_to_mut</source>
          <target state="translated">IoSliceMut::align_to_mut</target>
        </trans-unit>
        <trans-unit id="756ce08f67d32fb2870a7d27c2cf0b5d1fdceeda" translate="yes" xml:space="preserve">
          <source>IoSliceMut::as_mut_ptr</source>
          <target state="translated">IoSliceMut::as_mut_ptr</target>
        </trans-unit>
        <trans-unit id="53eec41d853d1cd27e3aa8594d9ca519a6e70256" translate="yes" xml:space="preserve">
          <source>IoSliceMut::as_ptr</source>
          <target state="translated">IoSliceMut::as_ptr</target>
        </trans-unit>
        <trans-unit id="feee017bcb491b872bb0c7e0e011449a0d2fba5b" translate="yes" xml:space="preserve">
          <source>IoSliceMut::binary_search</source>
          <target state="translated">IoSliceMut::binary_search</target>
        </trans-unit>
        <trans-unit id="91d068e145a8703aa2b53040a33e0633d07ae322" translate="yes" xml:space="preserve">
          <source>IoSliceMut::binary_search_by</source>
          <target state="translated">IoSliceMut::binary_search_by</target>
        </trans-unit>
        <trans-unit id="cf8c8086f089d2efa99d956c60331c0cffaba94a" translate="yes" xml:space="preserve">
          <source>IoSliceMut::binary_search_by_key</source>
          <target state="translated">IoSliceMut::binary_search_by_key</target>
        </trans-unit>
        <trans-unit id="814009b2627b9eb1414d1db129d496de87b90dee" translate="yes" xml:space="preserve">
          <source>IoSliceMut::borrow</source>
          <target state="translated">IoSliceMut::borrow</target>
        </trans-unit>
        <trans-unit id="caeb2fb6619a9691d7ba27f727be8e220bf3a927" translate="yes" xml:space="preserve">
          <source>IoSliceMut::borrow_mut</source>
          <target state="translated">IoSliceMut::borrow_mut</target>
        </trans-unit>
        <trans-unit id="b1cb059b24c754db0743f290cc8e416acdc4078d" translate="yes" xml:space="preserve">
          <source>IoSliceMut::chunks</source>
          <target state="translated">IoSliceMut::chunks</target>
        </trans-unit>
        <trans-unit id="4ea089981896b2968abb410d369893430efed500" translate="yes" xml:space="preserve">
          <source>IoSliceMut::chunks_exact</source>
          <target state="translated">IoSliceMut::chunks_exact</target>
        </trans-unit>
        <trans-unit id="f1be8473de9a8d39d4f075d887ea01ff1f9161e0" translate="yes" xml:space="preserve">
          <source>IoSliceMut::chunks_exact_mut</source>
          <target state="translated">IoSliceMut::chunks_exact_mut</target>
        </trans-unit>
        <trans-unit id="767b916694743c2e64a1c234e5dd646ac41ca1fc" translate="yes" xml:space="preserve">
          <source>IoSliceMut::chunks_mut</source>
          <target state="translated">IoSliceMut::chunks_mut</target>
        </trans-unit>
        <trans-unit id="f404069508d8888d6af514f87922bc8d40f10f6c" translate="yes" xml:space="preserve">
          <source>IoSliceMut::clone_from_slice</source>
          <target state="translated">IoSliceMut::clone_from_slice</target>
        </trans-unit>
        <trans-unit id="c7c55fc22e698b053cd4550732c2746b176f44ba" translate="yes" xml:space="preserve">
          <source>IoSliceMut::contains</source>
          <target state="translated">IoSliceMut::contains</target>
        </trans-unit>
        <trans-unit id="dbb130c545841944c9cc0b6c9e692b48dc327a1e" translate="yes" xml:space="preserve">
          <source>IoSliceMut::copy_from_slice</source>
          <target state="translated">IoSliceMut::copy_from_slice</target>
        </trans-unit>
        <trans-unit id="71a3fdfdbafc2bc43ba47f9382fcc293b92c46e3" translate="yes" xml:space="preserve">
          <source>IoSliceMut::copy_within</source>
          <target state="translated">IoSliceMut::copy_within</target>
        </trans-unit>
        <trans-unit id="890c0786efc8a468ffebc08fb5498cda52cf33fb" translate="yes" xml:space="preserve">
          <source>IoSliceMut::deref</source>
          <target state="translated">IoSliceMut::deref</target>
        </trans-unit>
        <trans-unit id="4a7f6590300a48130f1f500865046f4da8307d95" translate="yes" xml:space="preserve">
          <source>IoSliceMut::deref_mut</source>
          <target state="translated">IoSliceMut::deref_mut</target>
        </trans-unit>
        <trans-unit id="4c937a77491635e4e51ece3d6794e05ccebd811b" translate="yes" xml:space="preserve">
          <source>IoSliceMut::ends_with</source>
          <target state="translated">IoSliceMut::ends_with</target>
        </trans-unit>
        <trans-unit id="80baa7923010134c30d45ede26ebcb72f4ec4c94" translate="yes" xml:space="preserve">
          <source>IoSliceMut::eq_ignore_ascii_case</source>
          <target state="translated">IoSliceMut::eq_ignore_ascii_case</target>
        </trans-unit>
        <trans-unit id="00978c0ce0b22335f6482ceca143e772ce778265" translate="yes" xml:space="preserve">
          <source>IoSliceMut::first</source>
          <target state="translated">IoSliceMut::first</target>
        </trans-unit>
        <trans-unit id="efca655b88011a830e591bfe2b1493cadaf05e46" translate="yes" xml:space="preserve">
          <source>IoSliceMut::first_mut</source>
          <target state="translated">IoSliceMut::first_mut</target>
        </trans-unit>
        <trans-unit id="087659858c5fbd32d8ce660c5d447d432b4a58f9" translate="yes" xml:space="preserve">
          <source>IoSliceMut::fmt</source>
          <target state="translated">IoSliceMut::fmt</target>
        </trans-unit>
        <trans-unit id="cb369e3527c8a515f146f114fa20da06fa0105bd" translate="yes" xml:space="preserve">
          <source>IoSliceMut::from</source>
          <target state="translated">IoSliceMut::from</target>
        </trans-unit>
        <trans-unit id="1a4874b1746a7812e40b2ffd5ecaf8ee17040c73" translate="yes" xml:space="preserve">
          <source>IoSliceMut::get</source>
          <target state="translated">IoSliceMut::get</target>
        </trans-unit>
        <trans-unit id="87cf1ba0087efc43ee27e77bd516e6bc62235196" translate="yes" xml:space="preserve">
          <source>IoSliceMut::get_mut</source>
          <target state="translated">IoSliceMut::get_mut</target>
        </trans-unit>
        <trans-unit id="9224459dc771cd1e571acc3f60ac5030d6506ad4" translate="yes" xml:space="preserve">
          <source>IoSliceMut::get_unchecked</source>
          <target state="translated">IoSliceMut::get_unchecked</target>
        </trans-unit>
        <trans-unit id="6c84cb3392dfcb3ebc95e49bec2c9a2caf890b70" translate="yes" xml:space="preserve">
          <source>IoSliceMut::get_unchecked_mut</source>
          <target state="translated">IoSliceMut::get_unchecked_mut</target>
        </trans-unit>
        <trans-unit id="87175e203ab3ff1feb03a30f6abb72b0c78f325f" translate="yes" xml:space="preserve">
          <source>IoSliceMut::into</source>
          <target state="translated">IoSliceMut::into</target>
        </trans-unit>
        <trans-unit id="4501fdbbbb28747f7aaad7c1a5b8a44782077179" translate="yes" xml:space="preserve">
          <source>IoSliceMut::is_ascii</source>
          <target state="translated">IoSliceMut::is_ascii</target>
        </trans-unit>
        <trans-unit id="9838cb25545f83e047044f3c84c1e510152c5e9a" translate="yes" xml:space="preserve">
          <source>IoSliceMut::is_empty</source>
          <target state="translated">IoSliceMut::is_empty</target>
        </trans-unit>
        <trans-unit id="f055a512eb3e13e97c7f4986f75a28be49709162" translate="yes" xml:space="preserve">
          <source>IoSliceMut::is_sorted</source>
          <target state="translated">IoSliceMut::is_sorted</target>
        </trans-unit>
        <trans-unit id="3e5f350240631bbb82c3ccc7b63b75f7ef3cff06" translate="yes" xml:space="preserve">
          <source>IoSliceMut::is_sorted_by</source>
          <target state="translated">IoSliceMut::is_sorted_by</target>
        </trans-unit>
        <trans-unit id="f2e9454f22d864a0c455e41dc7fb5b7ca6dd2c05" translate="yes" xml:space="preserve">
          <source>IoSliceMut::is_sorted_by_key</source>
          <target state="translated">IoSliceMut::is_sorted_by_key</target>
        </trans-unit>
        <trans-unit id="fb1e214569f94fc95d9751c93230dfe38c28f64d" translate="yes" xml:space="preserve">
          <source>IoSliceMut::iter</source>
          <target state="translated">IoSliceMut::iter</target>
        </trans-unit>
        <trans-unit id="d77e5889908e5866350ffeb826e0ee4b302306d1" translate="yes" xml:space="preserve">
          <source>IoSliceMut::iter_mut</source>
          <target state="translated">IoSliceMut::iter_mut</target>
        </trans-unit>
        <trans-unit id="8934e61161bd86f368fc145fd636e2c155d1529f" translate="yes" xml:space="preserve">
          <source>IoSliceMut::last</source>
          <target state="translated">IoSliceMut::last</target>
        </trans-unit>
        <trans-unit id="e110df4ba897b60ee2d225cbfc465e2c2376e128" translate="yes" xml:space="preserve">
          <source>IoSliceMut::last_mut</source>
          <target state="translated">IoSliceMut::last_mut</target>
        </trans-unit>
        <trans-unit id="2ae8d8c5611aee438f8d894e9883dff2fd658f4e" translate="yes" xml:space="preserve">
          <source>IoSliceMut::len</source>
          <target state="translated">IoSliceMut::len</target>
        </trans-unit>
        <trans-unit id="47113547b6123b6a9b0c2bd9c5c02e4ace6bda06" translate="yes" xml:space="preserve">
          <source>IoSliceMut::make_ascii_lowercase</source>
          <target state="translated">IoSliceMut::make_ascii_lowercase</target>
        </trans-unit>
        <trans-unit id="1368789df63815a8365adaaa916b097c47ee6bf0" translate="yes" xml:space="preserve">
          <source>IoSliceMut::make_ascii_uppercase</source>
          <target state="translated">IoSliceMut::make_ascii_uppercase</target>
        </trans-unit>
        <trans-unit id="2bfeef33af972135cd4201fd40a799693a598545" translate="yes" xml:space="preserve">
          <source>IoSliceMut::new</source>
          <target state="translated">IoSliceMut::new</target>
        </trans-unit>
        <trans-unit id="d0fc0d6411d4a1c6e3b5edaf08263c19c66688b7" translate="yes" xml:space="preserve">
          <source>IoSliceMut::partition_at_index</source>
          <target state="translated">IoSliceMut::partition_at_index</target>
        </trans-unit>
        <trans-unit id="7e77416a3b99e33c3ca80e12413b2d6db2066eb0" translate="yes" xml:space="preserve">
          <source>IoSliceMut::partition_at_index_by</source>
          <target state="translated">IoSliceMut::partition_at_index_by</target>
        </trans-unit>
        <trans-unit id="9259876e720033ee87d32732200d6400132c625e" translate="yes" xml:space="preserve">
          <source>IoSliceMut::partition_at_index_by_key</source>
          <target state="translated">IoSliceMut::partition_at_index_by_key</target>
        </trans-unit>
        <trans-unit id="d3b05480abbc9116759faebf47e681f0d773c97b" translate="yes" xml:space="preserve">
          <source>IoSliceMut::partition_dedup</source>
          <target state="translated">IoSliceMut::partition_dedup</target>
        </trans-unit>
        <trans-unit id="aa55cd0eb794711175af2dd5d3f07714f2510500" translate="yes" xml:space="preserve">
          <source>IoSliceMut::partition_dedup_by</source>
          <target state="translated">IoSliceMut::partition_dedup_by</target>
        </trans-unit>
        <trans-unit id="c9023248e90bdb829d7846b404b7dd00c8e2f1d8" translate="yes" xml:space="preserve">
          <source>IoSliceMut::partition_dedup_by_key</source>
          <target state="translated">IoSliceMut::partition_dedup_by_key</target>
        </trans-unit>
        <trans-unit id="112858cc757d2ee696d5fd19edd29a07e86a60dd" translate="yes" xml:space="preserve">
          <source>IoSliceMut::rchunks</source>
          <target state="translated">IoSliceMut::rchunks</target>
        </trans-unit>
        <trans-unit id="27c3a585495b862cd5953b14b62627eb2b786e7e" translate="yes" xml:space="preserve">
          <source>IoSliceMut::rchunks_exact</source>
          <target state="translated">IoSliceMut::rchunks_exact</target>
        </trans-unit>
        <trans-unit id="0bbc4b799ee0750c9670f7268648fc24ec698bf5" translate="yes" xml:space="preserve">
          <source>IoSliceMut::rchunks_exact_mut</source>
          <target state="translated">IoSliceMut::rchunks_exact_mut</target>
        </trans-unit>
        <trans-unit id="e0079c5e5007cbcfdd4a4ec3cdc15f0f595b4eb9" translate="yes" xml:space="preserve">
          <source>IoSliceMut::rchunks_mut</source>
          <target state="translated">IoSliceMut::rchunks_mut</target>
        </trans-unit>
        <trans-unit id="5a1db3383ef35f1e9a609af596c49764b468ecc0" translate="yes" xml:space="preserve">
          <source>IoSliceMut::repeat</source>
          <target state="translated">IoSliceMut::repeat</target>
        </trans-unit>
        <trans-unit id="4b00bcb936857777cddfc030b90dd94af33aab6f" translate="yes" xml:space="preserve">
          <source>IoSliceMut::reverse</source>
          <target state="translated">IoSliceMut::reverse</target>
        </trans-unit>
        <trans-unit id="b8383f8b3071a37ca80d4fd630b68ae5d6407f25" translate="yes" xml:space="preserve">
          <source>IoSliceMut::rotate_left</source>
          <target state="translated">IoSliceMut::rotate_left</target>
        </trans-unit>
        <trans-unit id="b81b7fa90aa18a998eac27394adb8adaba8589f1" translate="yes" xml:space="preserve">
          <source>IoSliceMut::rotate_right</source>
          <target state="translated">IoSliceMut::rotate_right</target>
        </trans-unit>
        <trans-unit id="8b5984b3aa27e1db968a75d1458662d4356f394f" translate="yes" xml:space="preserve">
          <source>IoSliceMut::rsplit</source>
          <target state="translated">IoSliceMut::rsplit</target>
        </trans-unit>
        <trans-unit id="7b014f737bfafc775e4b112ac7ec11323e2824e1" translate="yes" xml:space="preserve">
          <source>IoSliceMut::rsplit_mut</source>
          <target state="translated">IoSliceMut::rsplit_mut</target>
        </trans-unit>
        <trans-unit id="79948d326e7daffd00109bebcfe6ec92b09222ad" translate="yes" xml:space="preserve">
          <source>IoSliceMut::rsplitn</source>
          <target state="translated">IoSliceMut::rsplitn</target>
        </trans-unit>
        <trans-unit id="8a0545746595f7e4171cebd930e38c4c6d0fd3e8" translate="yes" xml:space="preserve">
          <source>IoSliceMut::rsplitn_mut</source>
          <target state="translated">IoSliceMut::rsplitn_mut</target>
        </trans-unit>
        <trans-unit id="ddb129b041939c14d352bbf67329eeecf7260e65" translate="yes" xml:space="preserve">
          <source>IoSliceMut::sort</source>
          <target state="translated">IoSliceMut::sort</target>
        </trans-unit>
        <trans-unit id="35ba78eb5cd736c963cfc215217c45c8dda10d3b" translate="yes" xml:space="preserve">
          <source>IoSliceMut::sort_by</source>
          <target state="translated">IoSliceMut::sort_by</target>
        </trans-unit>
        <trans-unit id="aee0fff21b9514e212d22c64b39409165b2cab64" translate="yes" xml:space="preserve">
          <source>IoSliceMut::sort_by_cached_key</source>
          <target state="translated">IoSliceMut::sort_by_cached_key</target>
        </trans-unit>
        <trans-unit id="994f7e09e5d80ef5dd812336bcb0a176a31ef6c1" translate="yes" xml:space="preserve">
          <source>IoSliceMut::sort_by_key</source>
          <target state="translated">IoSliceMut::sort_by_key</target>
        </trans-unit>
        <trans-unit id="69a01417bee9fe016be3925f4d1c6f53bb4316b9" translate="yes" xml:space="preserve">
          <source>IoSliceMut::sort_unstable</source>
          <target state="translated">IoSliceMut::sort_unstable</target>
        </trans-unit>
        <trans-unit id="26d86d6c065cff24f16e866215162e8197db89a2" translate="yes" xml:space="preserve">
          <source>IoSliceMut::sort_unstable_by</source>
          <target state="translated">IoSliceMut::sort_unstable_by</target>
        </trans-unit>
        <trans-unit id="1591d811a42faf0c27290c61c13962a9d52e6883" translate="yes" xml:space="preserve">
          <source>IoSliceMut::sort_unstable_by_key</source>
          <target state="translated">IoSliceMut::sort_unstable_by_key</target>
        </trans-unit>
        <trans-unit id="ca126408cfc67455e487ee1930ca11c397f8f21f" translate="yes" xml:space="preserve">
          <source>IoSliceMut::split</source>
          <target state="translated">IoSliceMut::split</target>
        </trans-unit>
        <trans-unit id="9ce7dd2f993172516d076ad5208aaaaaed4be576" translate="yes" xml:space="preserve">
          <source>IoSliceMut::split_at</source>
          <target state="translated">IoSliceMut::split_at</target>
        </trans-unit>
        <trans-unit id="a9f4775f9c968b1b54abb603239e2832c3960bcd" translate="yes" xml:space="preserve">
          <source>IoSliceMut::split_at_mut</source>
          <target state="translated">IoSliceMut::split_at_mut</target>
        </trans-unit>
        <trans-unit id="04f41bcdd653cbc93653f91796e5a60801b9293d" translate="yes" xml:space="preserve">
          <source>IoSliceMut::split_first</source>
          <target state="translated">IoSliceMut::split_first</target>
        </trans-unit>
        <trans-unit id="d88487ea6f16bda2b38a613374cc839f837e50ee" translate="yes" xml:space="preserve">
          <source>IoSliceMut::split_first_mut</source>
          <target state="translated">IoSliceMut::split_first_mut</target>
        </trans-unit>
        <trans-unit id="e077fdea55bf605bea57cd6afeaf715ca83c0ad3" translate="yes" xml:space="preserve">
          <source>IoSliceMut::split_last</source>
          <target state="translated">IoSliceMut::split_last</target>
        </trans-unit>
        <trans-unit id="c8e20234f7bea859d7664b1b7bb3eed2bc4a51d5" translate="yes" xml:space="preserve">
          <source>IoSliceMut::split_last_mut</source>
          <target state="translated">IoSliceMut::split_last_mut</target>
        </trans-unit>
        <trans-unit id="f6235363d8f27f1e8c28bf4df2329fcbc4ace1a1" translate="yes" xml:space="preserve">
          <source>IoSliceMut::split_mut</source>
          <target state="translated">IoSliceMut::split_mut</target>
        </trans-unit>
        <trans-unit id="9dbada99c8a947eba3daeff4a3521f91bb81bd90" translate="yes" xml:space="preserve">
          <source>IoSliceMut::splitn</source>
          <target state="translated">IoSliceMut::splitn</target>
        </trans-unit>
        <trans-unit id="3cf2674726ff6b7045de0b3e635d0a1f7df50615" translate="yes" xml:space="preserve">
          <source>IoSliceMut::splitn_mut</source>
          <target state="translated">IoSliceMut::splitn_mut</target>
        </trans-unit>
        <trans-unit id="aa18548ad4490c3366a3bab22827f88c2eb93f27" translate="yes" xml:space="preserve">
          <source>IoSliceMut::starts_with</source>
          <target state="translated">IoSliceMut::starts_with</target>
        </trans-unit>
        <trans-unit id="53e5e19d65bb8030c09ed2572e8e551a619bb85a" translate="yes" xml:space="preserve">
          <source>IoSliceMut::swap</source>
          <target state="translated">IoSliceMut::swap</target>
        </trans-unit>
        <trans-unit id="a645fa50fbb5c37388df17709c852c50b89ea8d6" translate="yes" xml:space="preserve">
          <source>IoSliceMut::swap_with_slice</source>
          <target state="translated">IoSliceMut::swap_with_slice</target>
        </trans-unit>
        <trans-unit id="ae3bf6a739be497a693a36ed80d558bbb3918541" translate="yes" xml:space="preserve">
          <source>IoSliceMut::to_ascii_lowercase</source>
          <target state="translated">IoSliceMut::to_ascii_lowercase</target>
        </trans-unit>
        <trans-unit id="e376283217440eef63b94cd987da83cb40aede71" translate="yes" xml:space="preserve">
          <source>IoSliceMut::to_ascii_uppercase</source>
          <target state="translated">IoSliceMut::to_ascii_uppercase</target>
        </trans-unit>
        <trans-unit id="391fa7871165db3ac0f05870f2a5050056f7916a" translate="yes" xml:space="preserve">
          <source>IoSliceMut::to_vec</source>
          <target state="translated">IoSliceMut::to_vec</target>
        </trans-unit>
        <trans-unit id="8376010efc59358ba141cb428936bf23451c7d6e" translate="yes" xml:space="preserve">
          <source>IoSliceMut::try_from</source>
          <target state="translated">IoSliceMut::try_from</target>
        </trans-unit>
        <trans-unit id="ce50ba5cdfbc273da4c72a3e73ca855ed6cf6df0" translate="yes" xml:space="preserve">
          <source>IoSliceMut::try_into</source>
          <target state="translated">IoSliceMut::try_into</target>
        </trans-unit>
        <trans-unit id="b83dd87d2ec2e898db655ae58a7cd873ea0d8d2e" translate="yes" xml:space="preserve">
          <source>IoSliceMut::type_id</source>
          <target state="translated">IoSliceMut::type_id</target>
        </trans-unit>
        <trans-unit id="0677fc2bcad3ffd6e1f3e2e468b03f8e0639f7c7" translate="yes" xml:space="preserve">
          <source>IoSliceMut::windows</source>
          <target state="translated">IoSliceMut::windows</target>
        </trans-unit>
        <trans-unit id="80c7dd22517caabb4b80ff90fceda4a6879202d3" translate="yes" xml:space="preserve">
          <source>IpAddr</source>
          <target state="translated">IpAddr</target>
        </trans-unit>
        <trans-unit id="18dcf7a25bc74232fd1ef06e66f66a9b58a15594" translate="yes" xml:space="preserve">
          <source>IpAddr::borrow</source>
          <target state="translated">IpAddr::borrow</target>
        </trans-unit>
        <trans-unit id="8ccc863c2cc929b895a9a7a5f36b4ffd6dacfefb" translate="yes" xml:space="preserve">
          <source>IpAddr::borrow_mut</source>
          <target state="translated">IpAddr::borrow_mut</target>
        </trans-unit>
        <trans-unit id="1d22b0fa46381b2fee190440340df7db25bbaab4" translate="yes" xml:space="preserve">
          <source>IpAddr::clamp</source>
          <target state="translated">IpAddr::clamp</target>
        </trans-unit>
        <trans-unit id="c5b49df3db406820aae7446426b53c486eb09ed2" translate="yes" xml:space="preserve">
          <source>IpAddr::clone</source>
          <target state="translated">IpAddr::clone</target>
        </trans-unit>
        <trans-unit id="df8040dfc89ba7aed1f5bb9fb38c981ae8013245" translate="yes" xml:space="preserve">
          <source>IpAddr::clone_from</source>
          <target state="translated">IpAddr::clone_from</target>
        </trans-unit>
        <trans-unit id="2e231a5b1670e66fd9b295e66c9b487760ec0cd5" translate="yes" xml:space="preserve">
          <source>IpAddr::clone_into</source>
          <target state="translated">IpAddr::clone_into</target>
        </trans-unit>
        <trans-unit id="ccf0a20beed4bfb31ab7de41f2fe72887b3afef1" translate="yes" xml:space="preserve">
          <source>IpAddr::cmp</source>
          <target state="translated">IpAddr::cmp</target>
        </trans-unit>
        <trans-unit id="1e451c2048ce103ce5a1fdc80f143226ee3ac738" translate="yes" xml:space="preserve">
          <source>IpAddr::eq</source>
          <target state="translated">IpAddr::eq</target>
        </trans-unit>
        <trans-unit id="de15dc7014bcddec35489eab12ccb7de4e61f814" translate="yes" xml:space="preserve">
          <source>IpAddr::fmt</source>
          <target state="translated">IpAddr::fmt</target>
        </trans-unit>
        <trans-unit id="cd82d20eb5adef0621b03b67c04075c8e8d22c13" translate="yes" xml:space="preserve">
          <source>IpAddr::from</source>
          <target state="translated">IpAddr::from</target>
        </trans-unit>
        <trans-unit id="1b18f811dcd6bd2be2da6af78c6da2512cea431f" translate="yes" xml:space="preserve">
          <source>IpAddr::from_str</source>
          <target state="translated">IpAddr::from_str</target>
        </trans-unit>
        <trans-unit id="fe7270d2fc646cf2e120c74e60b44f6fe3226fb1" translate="yes" xml:space="preserve">
          <source>IpAddr::ge</source>
          <target state="translated">IpAddr::ge</target>
        </trans-unit>
        <trans-unit id="596bc315329df27bdada6bfc4c172ea14c6cc583" translate="yes" xml:space="preserve">
          <source>IpAddr::gt</source>
          <target state="translated">IpAddr::gt</target>
        </trans-unit>
        <trans-unit id="7b43ebda452f32a749f28cf341479b33fad4fd8f" translate="yes" xml:space="preserve">
          <source>IpAddr::hash</source>
          <target state="translated">IpAddr::hash</target>
        </trans-unit>
        <trans-unit id="a6c626e9d203c303fe8bdf8bd02befa7941a60f6" translate="yes" xml:space="preserve">
          <source>IpAddr::hash_slice</source>
          <target state="translated">IpAddr::hash_slice</target>
        </trans-unit>
        <trans-unit id="bc0a2a089760008263e0c7d196dcda76407f2e2f" translate="yes" xml:space="preserve">
          <source>IpAddr::into</source>
          <target state="translated">IpAddr::into</target>
        </trans-unit>
        <trans-unit id="6aea05c2bb7a6ec19799f8ccd09371123895bffd" translate="yes" xml:space="preserve">
          <source>IpAddr::is_documentation</source>
          <target state="translated">IpAddr::is_documentation</target>
        </trans-unit>
        <trans-unit id="35e750aa8facebec148e21174f1b11f8f102ac1e" translate="yes" xml:space="preserve">
          <source>IpAddr::is_global</source>
          <target state="translated">IpAddr::is_global</target>
        </trans-unit>
        <trans-unit id="6d3064eb468b3aa541c1ebcbb93937383d1b5ce2" translate="yes" xml:space="preserve">
          <source>IpAddr::is_ipv4</source>
          <target state="translated">IpAddr::is_ipv4</target>
        </trans-unit>
        <trans-unit id="7cdffbf0a370fd55a0c2a72fa5c73de1a7e9c8ae" translate="yes" xml:space="preserve">
          <source>IpAddr::is_ipv6</source>
          <target state="translated">IpAddr::is_ipv6</target>
        </trans-unit>
        <trans-unit id="f1b5ba9a40c1d77558e70ec390b97ec0113d8759" translate="yes" xml:space="preserve">
          <source>IpAddr::is_loopback</source>
          <target state="translated">IpAddr::is_loopback</target>
        </trans-unit>
        <trans-unit id="e91ac24fb68aad99d2dea251365431ba20a3867b" translate="yes" xml:space="preserve">
          <source>IpAddr::is_multicast</source>
          <target state="translated">IpAddr::is_multicast</target>
        </trans-unit>
        <trans-unit id="a457140fd4bc4739b6888b5fa4fd5a528a1e87d7" translate="yes" xml:space="preserve">
          <source>IpAddr::is_unspecified</source>
          <target state="translated">IpAddr::is_unspecified</target>
        </trans-unit>
        <trans-unit id="075a86319470dde568dd6a068923e786ff41b626" translate="yes" xml:space="preserve">
          <source>IpAddr::le</source>
          <target state="translated">IpAddr::le</target>
        </trans-unit>
        <trans-unit id="2ee565a162a01a379da7271dca98ac34c1b3d062" translate="yes" xml:space="preserve">
          <source>IpAddr::lt</source>
          <target state="translated">IpAddr::lt</target>
        </trans-unit>
        <trans-unit id="21475b86807c525401acbad46b0d285b86f77c6c" translate="yes" xml:space="preserve">
          <source>IpAddr::max</source>
          <target state="translated">IpAddr::max</target>
        </trans-unit>
        <trans-unit id="6c19c9fa1118c738451a2a0ccab1e063e8453279" translate="yes" xml:space="preserve">
          <source>IpAddr::min</source>
          <target state="translated">IpAddr::min</target>
        </trans-unit>
        <trans-unit id="80516dd8787ef4ff1f53fd45e6539ecc0557944c" translate="yes" xml:space="preserve">
          <source>IpAddr::ne</source>
          <target state="translated">IpAddr::ne</target>
        </trans-unit>
        <trans-unit id="5ac433ae6b88b3faf0bab89b49547e507f3c5dbe" translate="yes" xml:space="preserve">
          <source>IpAddr::partial_cmp</source>
          <target state="translated">IpAddr::partial_cmp</target>
        </trans-unit>
        <trans-unit id="a66331ad09004ffc11c6bc336cec3dd2c1058851" translate="yes" xml:space="preserve">
          <source>IpAddr::to_owned</source>
          <target state="translated">IpAddr::to_owned</target>
        </trans-unit>
        <trans-unit id="c266c72106f541c9d079787ece667b3b71aa633c" translate="yes" xml:space="preserve">
          <source>IpAddr::to_string</source>
          <target state="translated">IpAddr::to_string</target>
        </trans-unit>
        <trans-unit id="310b4b19006f132dcc381f1e6408fe062644a5dc" translate="yes" xml:space="preserve">
          <source>IpAddr::try_from</source>
          <target state="translated">IpAddr::try_from</target>
        </trans-unit>
        <trans-unit id="6de54fb276669395f791daae14b60bdb8bb9ecab" translate="yes" xml:space="preserve">
          <source>IpAddr::try_into</source>
          <target state="translated">IpAddr::try_into</target>
        </trans-unit>
        <trans-unit id="76655a5dcdc7c4b7a1f489495625902f75957be4" translate="yes" xml:space="preserve">
          <source>IpAddr::type_id</source>
          <target state="translated">IpAddr::type_id</target>
        </trans-unit>
        <trans-unit id="9576adee9505e0e642c8cf6d8f843a2b00527190" translate="yes" xml:space="preserve">
          <source>Ipv4Addr</source>
          <target state="translated">Ipv4Addr</target>
        </trans-unit>
        <trans-unit id="c0670c429f8a4f4f07ef0b7f2b4e03d5be7cdc5b" translate="yes" xml:space="preserve">
          <source>Ipv4Addr::borrow</source>
          <target state="translated">Ipv4Addr::borrow</target>
        </trans-unit>
        <trans-unit id="66fc34d63836dd285320b9e7805a0993e253d053" translate="yes" xml:space="preserve">
          <source>Ipv4Addr::borrow_mut</source>
          <target state="translated">Ipv4Addr::borrow_mut</target>
        </trans-unit>
        <trans-unit id="87a2ad02487f9ecff09754664875f3fbf92e1aab" translate="yes" xml:space="preserve">
          <source>Ipv4Addr::clamp</source>
          <target state="translated">Ipv4Addr::clamp</target>
        </trans-unit>
        <trans-unit id="86447e7e8694086d5dc29cbcf6bbc43172b77513" translate="yes" xml:space="preserve">
          <source>Ipv4Addr::clone</source>
          <target state="translated">Ipv4Addr::clone</target>
        </trans-unit>
        <trans-unit id="f49b0fda7799a12b9106e653f8817c29e74a2242" translate="yes" xml:space="preserve">
          <source>Ipv4Addr::clone_from</source>
          <target state="translated">Ipv4Addr::clone_from</target>
        </trans-unit>
        <trans-unit id="70d0f414add20ac85a1ac45856f7ef5006e570d8" translate="yes" xml:space="preserve">
          <source>Ipv4Addr::clone_into</source>
          <target state="translated">Ipv4Addr::clone_into</target>
        </trans-unit>
        <trans-unit id="dc9773a4bf1673daf97b49a6b852c1d09da0533a" translate="yes" xml:space="preserve">
          <source>Ipv4Addr::cmp</source>
          <target state="translated">Ipv4Addr::cmp</target>
        </trans-unit>
        <trans-unit id="9e8900c91f9869e1bd25bdeb1f480c627ddad7c1" translate="yes" xml:space="preserve">
          <source>Ipv4Addr::eq</source>
          <target state="translated">Ipv4Addr::eq</target>
        </trans-unit>
        <trans-unit id="4cd7a35503bdc79c8a6d2eb2e96d19bb1d13b386" translate="yes" xml:space="preserve">
          <source>Ipv4Addr::fmt</source>
          <target state="translated">Ipv4Addr::fmt</target>
        </trans-unit>
        <trans-unit id="96f1af7ae9368105392d9cc46e3fcdf5512b5c86" translate="yes" xml:space="preserve">
          <source>Ipv4Addr::from</source>
          <target state="translated">Ipv4Addr::from</target>
        </trans-unit>
        <trans-unit id="c9814a89a183d677ccaba791ca610f1dbd9966e0" translate="yes" xml:space="preserve">
          <source>Ipv4Addr::from_str</source>
          <target state="translated">Ipv4Addr::from_str</target>
        </trans-unit>
        <trans-unit id="a99258bd17a7b9473a9733d0d8cefdf5f6718002" translate="yes" xml:space="preserve">
          <source>Ipv4Addr::ge</source>
          <target state="translated">Ipv4Addr::ge</target>
        </trans-unit>
        <trans-unit id="17edfcb10f49b77c9d0c9872e17c35b5128a4660" translate="yes" xml:space="preserve">
          <source>Ipv4Addr::gt</source>
          <target state="translated">Ipv4Addr::gt</target>
        </trans-unit>
        <trans-unit id="8d9673e9e9140d616d250a1c2fd05b32e727f0bd" translate="yes" xml:space="preserve">
          <source>Ipv4Addr::hash</source>
          <target state="translated">Ipv4Addr::hash</target>
        </trans-unit>
        <trans-unit id="33d72bb730a0f4415706682897a4dbeca937097e" translate="yes" xml:space="preserve">
          <source>Ipv4Addr::hash_slice</source>
          <target state="translated">Ipv4Addr::hash_slice</target>
        </trans-unit>
        <trans-unit id="a0a5624897c7561cf8904fb1069326cac7d4849a" translate="yes" xml:space="preserve">
          <source>Ipv4Addr::into</source>
          <target state="translated">Ipv4Addr::into</target>
        </trans-unit>
        <trans-unit id="a28162edd246e58c591efd6d2f7e0f95677a17b4" translate="yes" xml:space="preserve">
          <source>Ipv4Addr::is_benchmarking</source>
          <target state="translated">Ipv4Addr::is_benchmarking</target>
        </trans-unit>
        <trans-unit id="e6c68f36a0501dd1c101e1de3fe289267ab116d7" translate="yes" xml:space="preserve">
          <source>Ipv4Addr::is_broadcast</source>
          <target state="translated">Ipv4Addr::is_broadcast</target>
        </trans-unit>
        <trans-unit id="d1c44235068a67cbe1de6fa7f1ecd5c62159b7eb" translate="yes" xml:space="preserve">
          <source>Ipv4Addr::is_documentation</source>
          <target state="translated">Ipv4Addr::is_documentation</target>
        </trans-unit>
        <trans-unit id="490980e7baecbdb16df4c536ff701a4b9c6f3a87" translate="yes" xml:space="preserve">
          <source>Ipv4Addr::is_global</source>
          <target state="translated">Ipv4Addr::is_global</target>
        </trans-unit>
        <trans-unit id="7dc9db6b00fed2f3a364f1abbeb6b19c6a865b8c" translate="yes" xml:space="preserve">
          <source>Ipv4Addr::is_ietf_protocol_assignment</source>
          <target state="translated">Ipv4Addr::is_ietf_protocol_assignment</target>
        </trans-unit>
        <trans-unit id="bcc94df664112964d43eabb2d514303df1ec2159" translate="yes" xml:space="preserve">
          <source>Ipv4Addr::is_link_local</source>
          <target state="translated">Ipv4Addr::is_link_local</target>
        </trans-unit>
        <trans-unit id="cfe2080acebd57083f5209b2051ccd19002609f2" translate="yes" xml:space="preserve">
          <source>Ipv4Addr::is_loopback</source>
          <target state="translated">Ipv4Addr::is_loopback</target>
        </trans-unit>
        <trans-unit id="28b9c1629dd15420ecafb39f3dfbae73a4ea518c" translate="yes" xml:space="preserve">
          <source>Ipv4Addr::is_multicast</source>
          <target state="translated">Ipv4Addr::is_multicast</target>
        </trans-unit>
        <trans-unit id="3763f7c2e4d81cf18a61fa9d1039122b09d3f6af" translate="yes" xml:space="preserve">
          <source>Ipv4Addr::is_private</source>
          <target state="translated">Ipv4Addr::is_private</target>
        </trans-unit>
        <trans-unit id="ded22ef0151f56687869efa355fc02ddba31b8da" translate="yes" xml:space="preserve">
          <source>Ipv4Addr::is_reserved</source>
          <target state="translated">Ipv4Addr::is_reserved</target>
        </trans-unit>
        <trans-unit id="af8e482daade31f5216d01b0acb05b1f1a06363a" translate="yes" xml:space="preserve">
          <source>Ipv4Addr::is_shared</source>
          <target state="translated">Ipv4Addr::is_shared</target>
        </trans-unit>
        <trans-unit id="94fd19fb5c77bb66f1dd4e3ea2bd66c0cd328221" translate="yes" xml:space="preserve">
          <source>Ipv4Addr::is_unspecified</source>
          <target state="translated">Ipv4Addr::is_unspecified</target>
        </trans-unit>
        <trans-unit id="6f06522a0d23f3ce3fb7a7bbcf5b64422c03cab1" translate="yes" xml:space="preserve">
          <source>Ipv4Addr::le</source>
          <target state="translated">Ipv4Addr::le</target>
        </trans-unit>
        <trans-unit id="7ddb9be2edc96e85ada95865505918fe2c31c08c" translate="yes" xml:space="preserve">
          <source>Ipv4Addr::lt</source>
          <target state="translated">Ipv4Addr::lt</target>
        </trans-unit>
        <trans-unit id="588e3a62e403b2acaff68c35f34372111ff7475b" translate="yes" xml:space="preserve">
          <source>Ipv4Addr::max</source>
          <target state="translated">Ipv4Addr::max</target>
        </trans-unit>
        <trans-unit id="f0f6703268f715e35b633ffa8e701e62eda903f0" translate="yes" xml:space="preserve">
          <source>Ipv4Addr::min</source>
          <target state="translated">Ipv4Addr::min</target>
        </trans-unit>
        <trans-unit id="8752da42e18e3890559177c1610168a779a113cf" translate="yes" xml:space="preserve">
          <source>Ipv4Addr::ne</source>
          <target state="translated">Ipv4Addr::ne</target>
        </trans-unit>
        <trans-unit id="dda7ca845b881cbb8bdf3787be6ee9ac1fc45b41" translate="yes" xml:space="preserve">
          <source>Ipv4Addr::new</source>
          <target state="translated">Ipv4Addr::new</target>
        </trans-unit>
        <trans-unit id="507f23cd2f1d898fa8d18a4f56faa306c969539d" translate="yes" xml:space="preserve">
          <source>Ipv4Addr::octets</source>
          <target state="translated">Ipv4Addr::octets</target>
        </trans-unit>
        <trans-unit id="ae2ee18a4ab1872b9c91e8a1e83866fd664e6feb" translate="yes" xml:space="preserve">
          <source>Ipv4Addr::partial_cmp</source>
          <target state="translated">Ipv4Addr::partial_cmp</target>
        </trans-unit>
        <trans-unit id="05bbaef82cf48bd89cdb234db3e68e898269d87a" translate="yes" xml:space="preserve">
          <source>Ipv4Addr::to_ipv6_compatible</source>
          <target state="translated">Ipv4Addr::to_ipv6_compatible</target>
        </trans-unit>
        <trans-unit id="2136b09c14369a3b7d334fb003b5f0a2b70ab6f8" translate="yes" xml:space="preserve">
          <source>Ipv4Addr::to_ipv6_mapped</source>
          <target state="translated">Ipv4Addr::to_ipv6_mapped</target>
        </trans-unit>
        <trans-unit id="fdcf5dff54d1f120adbacb5e658048c222d56c54" translate="yes" xml:space="preserve">
          <source>Ipv4Addr::to_owned</source>
          <target state="translated">Ipv4Addr::to_owned</target>
        </trans-unit>
        <trans-unit id="269c08b4181e19fd8b66cea4812bd4bd7ea2af16" translate="yes" xml:space="preserve">
          <source>Ipv4Addr::to_string</source>
          <target state="translated">Ipv4Addr::to_string</target>
        </trans-unit>
        <trans-unit id="412e053ce749bb8025b592e2499a7d73749e6fbe" translate="yes" xml:space="preserve">
          <source>Ipv4Addr::try_from</source>
          <target state="translated">Ipv4Addr::try_from</target>
        </trans-unit>
        <trans-unit id="3e4b53822154707283b1d82871537a4148878b64" translate="yes" xml:space="preserve">
          <source>Ipv4Addr::try_into</source>
          <target state="translated">Ipv4Addr::try_into</target>
        </trans-unit>
        <trans-unit id="29c219582f8e2fb59bc91723bc9968e9e558d78a" translate="yes" xml:space="preserve">
          <source>Ipv4Addr::type_id</source>
          <target state="translated">Ipv4Addr::type_id</target>
        </trans-unit>
        <trans-unit id="0d8606594389e9bf1434e5e041fc45b49d2d89fb" translate="yes" xml:space="preserve">
          <source>Ipv6Addr</source>
          <target state="translated">Ipv6Addr</target>
        </trans-unit>
        <trans-unit id="d70b655b95a966bf32c7e29d4eb302d94d537409" translate="yes" xml:space="preserve">
          <source>Ipv6Addr::borrow</source>
          <target state="translated">Ipv6Addr::borrow</target>
        </trans-unit>
        <trans-unit id="5bcfe843497d7c0d0e1435cd2a4e6d7c081bbbc0" translate="yes" xml:space="preserve">
          <source>Ipv6Addr::borrow_mut</source>
          <target state="translated">Ipv6Addr::borrow_mut</target>
        </trans-unit>
        <trans-unit id="f7dd13e8c27649fb7974784c22309d13f14d3cb8" translate="yes" xml:space="preserve">
          <source>Ipv6Addr::clamp</source>
          <target state="translated">Ipv6Addr::clamp</target>
        </trans-unit>
        <trans-unit id="75d479dee6aa25b111b95de4fe2ff9431fd40236" translate="yes" xml:space="preserve">
          <source>Ipv6Addr::clone</source>
          <target state="translated">Ipv6Addr::clone</target>
        </trans-unit>
        <trans-unit id="23bca06a900c89dfaa4d74bf597a4b4d7db14dd8" translate="yes" xml:space="preserve">
          <source>Ipv6Addr::clone_from</source>
          <target state="translated">Ipv6Addr::clone_from</target>
        </trans-unit>
        <trans-unit id="a1b88b248e8ee4b5b484c234c2ecfbe7dbfdd996" translate="yes" xml:space="preserve">
          <source>Ipv6Addr::clone_into</source>
          <target state="translated">Ipv6Addr::clone_into</target>
        </trans-unit>
        <trans-unit id="dc97ee1fb759cbf2f49863623e2495bd92e0cc2d" translate="yes" xml:space="preserve">
          <source>Ipv6Addr::cmp</source>
          <target state="translated">Ipv6Addr::cmp</target>
        </trans-unit>
        <trans-unit id="92b52ce5c0ec7c8283a07b53ad7860ec0014b4c9" translate="yes" xml:space="preserve">
          <source>Ipv6Addr::eq</source>
          <target state="translated">Ipv6Addr::eq</target>
        </trans-unit>
        <trans-unit id="3b311d466c72a6b513175602e48a797929f3d67d" translate="yes" xml:space="preserve">
          <source>Ipv6Addr::fmt</source>
          <target state="translated">Ipv6Addr::fmt</target>
        </trans-unit>
        <trans-unit id="8026446e621a4f6612c20cfc5e55af6998493a0a" translate="yes" xml:space="preserve">
          <source>Ipv6Addr::from</source>
          <target state="translated">Ipv6Addr::from</target>
        </trans-unit>
        <trans-unit id="3b0a22d0bf352f30e40cf12cf400d0bcc3d4fbeb" translate="yes" xml:space="preserve">
          <source>Ipv6Addr::from_str</source>
          <target state="translated">Ipv6Addr::from_str</target>
        </trans-unit>
        <trans-unit id="1b12986f3c342df0da012478446d35bc1e25adff" translate="yes" xml:space="preserve">
          <source>Ipv6Addr::ge</source>
          <target state="translated">Ipv6Addr::ge</target>
        </trans-unit>
        <trans-unit id="cfefe2f3000d50064ee292bedfc9212d2af9fa6d" translate="yes" xml:space="preserve">
          <source>Ipv6Addr::gt</source>
          <target state="translated">Ipv6Addr::gt</target>
        </trans-unit>
        <trans-unit id="76f36f887e858b436e8356c4db0f8649f4a0fa39" translate="yes" xml:space="preserve">
          <source>Ipv6Addr::hash</source>
          <target state="translated">Ipv6Addr::hash</target>
        </trans-unit>
        <trans-unit id="2266f98ea937ce9e92f9c74b16810ce281c5f688" translate="yes" xml:space="preserve">
          <source>Ipv6Addr::hash_slice</source>
          <target state="translated">Ipv6Addr::hash_slice</target>
        </trans-unit>
        <trans-unit id="45ed8315dcbcb3116b3eb8b57c7b03b534df4ade" translate="yes" xml:space="preserve">
          <source>Ipv6Addr::into</source>
          <target state="translated">Ipv6Addr::into</target>
        </trans-unit>
        <trans-unit id="100022f73659e9325e7ac2e452d9737325bc6205" translate="yes" xml:space="preserve">
          <source>Ipv6Addr::is_documentation</source>
          <target state="translated">Ipv6Addr::is_documentation</target>
        </trans-unit>
        <trans-unit id="779fa2a92533a376818cec5898176281cf38b662" translate="yes" xml:space="preserve">
          <source>Ipv6Addr::is_global</source>
          <target state="translated">Ipv6Addr::is_global</target>
        </trans-unit>
        <trans-unit id="9ea19eb6e650cc597cabc4d80c14f0f132c8c23d" translate="yes" xml:space="preserve">
          <source>Ipv6Addr::is_loopback</source>
          <target state="translated">Ipv6Addr::is_loopback</target>
        </trans-unit>
        <trans-unit id="674f4cff3c09e352444adb1edda7bff67e73c3d6" translate="yes" xml:space="preserve">
          <source>Ipv6Addr::is_multicast</source>
          <target state="translated">Ipv6Addr::is_multicast</target>
        </trans-unit>
        <trans-unit id="53343e7e3d105f1a44ebe32d0eefc791089badc8" translate="yes" xml:space="preserve">
          <source>Ipv6Addr::is_unicast_global</source>
          <target state="translated">Ipv6Addr::is_unicast_global</target>
        </trans-unit>
        <trans-unit id="ef3d5cf9b22cff3832f46ef32799dfbc2d0e5d23" translate="yes" xml:space="preserve">
          <source>Ipv6Addr::is_unicast_link_local</source>
          <target state="translated">Ipv6Addr::is_unicast_link_local</target>
        </trans-unit>
        <trans-unit id="a210d1d3c529f4648ccb8a6d5d259a6a6d471504" translate="yes" xml:space="preserve">
          <source>Ipv6Addr::is_unicast_link_local_strict</source>
          <target state="translated">Ipv6Addr::is_unicast_link_local_strict</target>
        </trans-unit>
        <trans-unit id="fa85561c123be7bf6016020f1992fd1b205fb3ab" translate="yes" xml:space="preserve">
          <source>Ipv6Addr::is_unicast_site_local</source>
          <target state="translated">Ipv6Addr::is_unicast_site_local</target>
        </trans-unit>
        <trans-unit id="f214d60d9ab8bf7117df211486c37f22952d790b" translate="yes" xml:space="preserve">
          <source>Ipv6Addr::is_unique_local</source>
          <target state="translated">Ipv6Addr::is_unique_local</target>
        </trans-unit>
        <trans-unit id="a8d6c989ec571a72320733615b69d2c07fcb0ba9" translate="yes" xml:space="preserve">
          <source>Ipv6Addr::is_unspecified</source>
          <target state="translated">Ipv6Addr::is_unspecified</target>
        </trans-unit>
        <trans-unit id="02c8fce30d5a32465175cbe3879c69259c312ded" translate="yes" xml:space="preserve">
          <source>Ipv6Addr::le</source>
          <target state="translated">Ipv6Addr::le</target>
        </trans-unit>
        <trans-unit id="297e749932b92e4808241fddcb9b960c1bbefb12" translate="yes" xml:space="preserve">
          <source>Ipv6Addr::lt</source>
          <target state="translated">Ipv6Addr::lt</target>
        </trans-unit>
        <trans-unit id="1f93180931140e8587a275013dfcfce7f8b6490e" translate="yes" xml:space="preserve">
          <source>Ipv6Addr::max</source>
          <target state="translated">Ipv6Addr::max</target>
        </trans-unit>
        <trans-unit id="50eb114b333cecae538ca6ad284c88fab52f336e" translate="yes" xml:space="preserve">
          <source>Ipv6Addr::min</source>
          <target state="translated">Ipv6Addr::min</target>
        </trans-unit>
        <trans-unit id="183f35750e05512d0c059a06dbccd93abd3349c7" translate="yes" xml:space="preserve">
          <source>Ipv6Addr::multicast_scope</source>
          <target state="translated">Ipv6Addr::multicast_scope</target>
        </trans-unit>
        <trans-unit id="e51b9303d310ea2cd79b483b6689ac80fe75fbd6" translate="yes" xml:space="preserve">
          <source>Ipv6Addr::ne</source>
          <target state="translated">Ipv6Addr::ne</target>
        </trans-unit>
        <trans-unit id="f1d4f467002e9522e65e198bfa78a0a6829f670e" translate="yes" xml:space="preserve">
          <source>Ipv6Addr::new</source>
          <target state="translated">Ipv6Addr::new</target>
        </trans-unit>
        <trans-unit id="d61c56e79ee209a5c274b6372f7bfb67e409ab7e" translate="yes" xml:space="preserve">
          <source>Ipv6Addr::octets</source>
          <target state="translated">Ipv6Addr::octets</target>
        </trans-unit>
        <trans-unit id="17e1469eab47bf29477cd18cccbbb0cde2f23783" translate="yes" xml:space="preserve">
          <source>Ipv6Addr::partial_cmp</source>
          <target state="translated">Ipv6Addr::partial_cmp</target>
        </trans-unit>
        <trans-unit id="b7b98dc05081d889b0f5f7de6c80a3ae378cf699" translate="yes" xml:space="preserve">
          <source>Ipv6Addr::segments</source>
          <target state="translated">Ipv6Addr::segments</target>
        </trans-unit>
        <trans-unit id="c35cdbb386870b8f97c03a67a421ae849b3268f9" translate="yes" xml:space="preserve">
          <source>Ipv6Addr::to_ipv4</source>
          <target state="translated">Ipv6Addr::to_ipv4</target>
        </trans-unit>
        <trans-unit id="33aea393ab3dab6c3a68e6f00c689810fe9bd799" translate="yes" xml:space="preserve">
          <source>Ipv6Addr::to_owned</source>
          <target state="translated">Ipv6Addr::to_owned</target>
        </trans-unit>
        <trans-unit id="744da9f6f868ba8486c07d001e1497f4af409a6c" translate="yes" xml:space="preserve">
          <source>Ipv6Addr::to_string</source>
          <target state="translated">Ipv6Addr::to_string</target>
        </trans-unit>
        <trans-unit id="e7906ea8de471e39df4e64193a59ad6753c407ea" translate="yes" xml:space="preserve">
          <source>Ipv6Addr::try_from</source>
          <target state="translated">Ipv6Addr::try_from</target>
        </trans-unit>
        <trans-unit id="57e4d786e8cd27bd0e1a73e9af4d39fca767500d" translate="yes" xml:space="preserve">
          <source>Ipv6Addr::try_into</source>
          <target state="translated">Ipv6Addr::try_into</target>
        </trans-unit>
        <trans-unit id="fb2fe802e9fb2190aa9429082c672e39e9fa6875" translate="yes" xml:space="preserve">
          <source>Ipv6Addr::type_id</source>
          <target state="translated">Ipv6Addr::type_id</target>
        </trans-unit>
        <trans-unit id="88a82ca1333481fb3a1f5fa852a0e945500824b1" translate="yes" xml:space="preserve">
          <source>Ipv6MulticastScope</source>
          <target state="translated">Ipv6MulticastScope</target>
        </trans-unit>
        <trans-unit id="e84c27e16f953494b556166d8f312c91254c12d0" translate="yes" xml:space="preserve">
          <source>Ipv6MulticastScope::borrow</source>
          <target state="translated">Ipv6MulticastScope::borrow</target>
        </trans-unit>
        <trans-unit id="677ee6c513806ce0784ec7fe2a00a0d6bca85485" translate="yes" xml:space="preserve">
          <source>Ipv6MulticastScope::borrow_mut</source>
          <target state="translated">Ipv6MulticastScope::borrow_mut</target>
        </trans-unit>
        <trans-unit id="dcf68f3ffbb91cc5040a7613640f04ad758b23a4" translate="yes" xml:space="preserve">
          <source>Ipv6MulticastScope::clone</source>
          <target state="translated">Ipv6MulticastScope::clone</target>
        </trans-unit>
        <trans-unit id="61fd8492371c7f4b111966fae5d5fe08c4b97229" translate="yes" xml:space="preserve">
          <source>Ipv6MulticastScope::clone_from</source>
          <target state="translated">Ipv6MulticastScope::clone_from</target>
        </trans-unit>
        <trans-unit id="134ebe2c42587c3ca82d7925389e251db2163a7b" translate="yes" xml:space="preserve">
          <source>Ipv6MulticastScope::clone_into</source>
          <target state="translated">Ipv6MulticastScope::clone_into</target>
        </trans-unit>
        <trans-unit id="390d22aa747105ced3c5976e7e0b509871c131ca" translate="yes" xml:space="preserve">
          <source>Ipv6MulticastScope::eq</source>
          <target state="translated">Ipv6MulticastScope::eq</target>
        </trans-unit>
        <trans-unit id="608099f9c2565ad9310942c2ab375a0a27d03555" translate="yes" xml:space="preserve">
          <source>Ipv6MulticastScope::fmt</source>
          <target state="translated">Ipv6MulticastScope::fmt</target>
        </trans-unit>
        <trans-unit id="3ba69289a058c4abe74375992c848e97e5c3e1f0" translate="yes" xml:space="preserve">
          <source>Ipv6MulticastScope::from</source>
          <target state="translated">Ipv6MulticastScope::from</target>
        </trans-unit>
        <trans-unit id="50dbeef4e426d6a1662be73f3b710581f45f5726" translate="yes" xml:space="preserve">
          <source>Ipv6MulticastScope::hash</source>
          <target state="translated">Ipv6MulticastScope::hash</target>
        </trans-unit>
        <trans-unit id="d937291039e717d6b72ac61199880b756bb71cc6" translate="yes" xml:space="preserve">
          <source>Ipv6MulticastScope::hash_slice</source>
          <target state="translated">Ipv6MulticastScope::hash_slice</target>
        </trans-unit>
        <trans-unit id="72c69d6697741a6839af11bc528c0219d8f51a86" translate="yes" xml:space="preserve">
          <source>Ipv6MulticastScope::into</source>
          <target state="translated">Ipv6MulticastScope::into</target>
        </trans-unit>
        <trans-unit id="f19d929ae7f3905c1d7f61ba332bba83b3ee1713" translate="yes" xml:space="preserve">
          <source>Ipv6MulticastScope::ne</source>
          <target state="translated">Ipv6MulticastScope::ne</target>
        </trans-unit>
        <trans-unit id="1ae2897866e78e1fede7326722ae13d5ef68df29" translate="yes" xml:space="preserve">
          <source>Ipv6MulticastScope::to_owned</source>
          <target state="translated">Ipv6MulticastScope::to_owned</target>
        </trans-unit>
        <trans-unit id="0446e23a43371fe0f94b03f56d1bb98116018284" translate="yes" xml:space="preserve">
          <source>Ipv6MulticastScope::try_from</source>
          <target state="translated">Ipv6MulticastScope::try_from</target>
        </trans-unit>
        <trans-unit id="f9b3de0a7b333e261fdc7c4ad1a32806dd360521" translate="yes" xml:space="preserve">
          <source>Ipv6MulticastScope::try_into</source>
          <target state="translated">Ipv6MulticastScope::try_into</target>
        </trans-unit>
        <trans-unit id="54bb08375bed2835d5a0ef191ec626eeb541ad77" translate="yes" xml:space="preserve">
          <source>Ipv6MulticastScope::type_id</source>
          <target state="translated">Ipv6MulticastScope::type_id</target>
        </trans-unit>
        <trans-unit id="2b0293fd28dd03b9f1762b219cba0106642f1259" translate="yes" xml:space="preserve">
          <source>Is &lt;code&gt;true&lt;/code&gt; if during a recv operation the ancillary was truncated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ded365c250b74bea186557cb8382c1ec7f7a2ef" translate="yes" xml:space="preserve">
          <source>Is called to get the representation of the value as status code. This status code is returned to the operating system.</source>
          <target state="translated">値の表現をステータスコードとして取得するために呼び出されます。このステータスコードはオペレーティングシステムに返されます。</target>
        </trans-unit>
        <trans-unit id="59458c2be32dcdeda9fe0621a635d170f4b150d0" translate="yes" xml:space="preserve">
          <source>Is called to get the representation of the value as status code. This status code is returned to the operating system. &lt;a href=&quot;../process/trait.termination#tymethod.report&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">値の表現をステータスコードとして取得するために呼び出されます。このステータスコードはオペレーティングシステムに返されます。&lt;a href=&quot;../process/trait.termination#tymethod.report&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5992205e7f17c7190fe09ef40bc9950c869d373e" translate="yes" xml:space="preserve">
          <source>Is called to get the representation of the value as status code. This status code is returned to the operating system. &lt;a href=&quot;process/trait.termination#tymethod.report&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">値の表現をステータスコードとして取得するために呼び出されます。このステータスコードはオペレーティングシステムに返されます。&lt;a href=&quot;process/trait.termination#tymethod.report&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="680b4746f2d256076239ed1e9dc02c5c4926c34a" translate="yes" xml:space="preserve">
          <source>Is called to get the representation of the value as status code. This status code is returned to the operating system. &lt;a href=&quot;trait.termination#tymethod.report&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">値の表現をステータスコードとして取得するために呼び出されます。このステータスコードはオペレーティングシステムに返されます。&lt;a href=&quot;trait.termination#tymethod.report&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="51ca310768b85e8610e7fa8789046380b05cedd2" translate="yes" xml:space="preserve">
          <source>Isolated CRs (&lt;code&gt;\r&lt;/code&gt;), i.e. not followed by LF (&lt;code&gt;\n&lt;/code&gt;), are not allowed in doc comments.</source>
          <target state="translated">分離されたCR（ &lt;code&gt;\r&lt;/code&gt; ）、つまりLF（ &lt;code&gt;\n&lt;/code&gt; ）が後に続かないものは、ドキュメントコメントでは許可されません。</target>
        </trans-unit>
        <trans-unit id="21d9ab30a1c1e374b953d4ada2aa7c7ea2c3447d" translate="yes" xml:space="preserve">
          <source>It appears as if some variables stored in memory are changed, an addition is performed, result is stored in &lt;code&gt;A&lt;/code&gt; and the variable &lt;code&gt;C&lt;/code&gt; is modified twice.</source>
          <target state="translated">メモリに格納されている一部の変数が変更され、加算が実行され、結果が &lt;code&gt;A&lt;/code&gt; に格納され、変数 &lt;code&gt;C&lt;/code&gt; が2回変更されているように見えます。</target>
        </trans-unit>
        <trans-unit id="bec31df4330e5539ca332e9180d08b7d0285868d" translate="yes" xml:space="preserve">
          <source>It avoids the need to allocate mutexes and condvars when building new synchronization primitives; the threads already provide basic blocking/signaling.</source>
          <target state="translated">これにより、新しい同期プリミティブを構築する際にミューテックスやコンドバーを割り当てる必要がなくなります。</target>
        </trans-unit>
        <trans-unit id="03d3e7d539855e7b059008a40edfba81dc44ce33" translate="yes" xml:space="preserve">
          <source>It can also be fixed by using a type with interior mutability, such as &lt;code&gt;Cell&lt;/code&gt; or &lt;code&gt;RefCell&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;Cell&lt;/code&gt; や &lt;code&gt;RefCell&lt;/code&gt; などの内部可変性を持つタイプを使用して修正することもできます。</target>
        </trans-unit>
        <trans-unit id="5a8b452f4173e1504b134fc7f377b9484d0800b0" translate="yes" xml:space="preserve">
          <source>It can also be used directly to allocate memory independently of whatever global allocator has been selected for a Rust program. For example if a Rust program opts in to using jemalloc as the global allocator, &lt;code&gt;System&lt;/code&gt; will still allocate memory using &lt;code&gt;malloc&lt;/code&gt; and &lt;code&gt;HeapAlloc&lt;/code&gt;.</source>
          <target state="translated">また、Rustプログラム用に選択されたグローバルアロケータとは無関係に、メモリを直接割り当てるために使用することもできます。たとえば、Rustプログラムがjemallocをグローバルアロケータとして使用することを選択した場合でも、 &lt;code&gt;System&lt;/code&gt; は &lt;code&gt;malloc&lt;/code&gt; と &lt;code&gt;HeapAlloc&lt;/code&gt; を使用してメモリを割り当てます。</target>
        </trans-unit>
        <trans-unit id="00660b666c533a7c559c2ecac031a0dd6fae7e81" translate="yes" xml:space="preserve">
          <source>It can also be useful to check if a pointer to an element refers to an element of this slice:</source>
          <target state="translated">また、要素へのポインタがこのスライスの要素を参照しているかどうかを確認するのにも便利です。</target>
        </trans-unit>
        <trans-unit id="310caca6a04a9d8a72a66083548cffe2c3deb96f" translate="yes" xml:space="preserve">
          <source>It can also initialize each element of a &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; with a given value. This may be more efficient than performing allocation and initialization in separate steps, especially when initializing a vector of zeros:</source>
          <target state="translated">また、 &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; 各要素を特定の値で初期化することもできます。これは、特にゼロのベクトルを初期化するときに、割り当てと初期化を別々のステップで実行するよりも効率的です。</target>
        </trans-unit>
        <trans-unit id="190277fdc267c49497782df2cc44dfe65d610086" translate="yes" xml:space="preserve">
          <source>It can be confusing whether or not you should use a constant item or a static item. Constants should, in general, be preferred over statics unless one of the following are true:</source>
          <target state="translated">定数アイテムを使うべきか、静的アイテムを使うべきか混乱することがあります。以下のいずれかが真でない限り、一般的には静的項目よりも定数の方が優先されるべきです。</target>
        </trans-unit>
        <trans-unit id="a43d03c9bf141b9b8115ffe53976da5e1200d527" translate="yes" xml:space="preserve">
          <source>It can be excessively inefficient to work directly with a &lt;a href=&quot;trait.read&quot;&gt;&lt;code&gt;Read&lt;/code&gt;&lt;/a&gt; instance. For example, every call to &lt;a href=&quot;../net/struct.tcpstream#method.read&quot;&gt;&lt;code&gt;read&lt;/code&gt;&lt;/a&gt; on &lt;a href=&quot;../net/struct.tcpstream&quot;&gt;&lt;code&gt;TcpStream&lt;/code&gt;&lt;/a&gt; results in a system call. A &lt;code&gt;BufReader&amp;lt;R&amp;gt;&lt;/code&gt; performs large, infrequent reads on the underlying &lt;a href=&quot;trait.read&quot;&gt;&lt;code&gt;Read&lt;/code&gt;&lt;/a&gt; and maintains an in-memory buffer of the results.</source>
          <target state="translated">&lt;a href=&quot;trait.read&quot;&gt; &lt;code&gt;Read&lt;/code&gt; &lt;/a&gt;インスタンスを直接操作するのは非常に非効率的です。たとえば、&lt;a href=&quot;../net/struct.tcpstream&quot;&gt; &lt;code&gt;TcpStream&lt;/code&gt; で&lt;/a&gt;&lt;a href=&quot;../net/struct.tcpstream#method.read&quot;&gt; &lt;code&gt;read&lt;/code&gt; &lt;/a&gt;を呼び出すたびに、システムコールが発生します。A &lt;code&gt;BufReader&amp;lt;R&amp;gt;&lt;/code&gt; を行う大きい、稀では根本的に読み取り、&lt;a href=&quot;trait.read&quot;&gt; &lt;code&gt;Read&lt;/code&gt; &lt;/a&gt;、結果のメモリ内のバッファを維持します。</target>
        </trans-unit>
        <trans-unit id="0bd32cfa263bd1bf213225174ecd4ec323617bbd" translate="yes" xml:space="preserve">
          <source>It can be excessively inefficient to work directly with a &lt;a href=&quot;trait.read&quot;&gt;&lt;code&gt;Read&lt;/code&gt;&lt;/a&gt; instance. For example, every call to &lt;a href=&quot;../net/struct.tcpstream#method.read&quot;&gt;&lt;code&gt;read&lt;/code&gt;&lt;/a&gt; on &lt;a href=&quot;../net/struct.tcpstream&quot;&gt;&lt;code&gt;TcpStream&lt;/code&gt;&lt;/a&gt; results in a system call. A &lt;code&gt;BufReader&lt;/code&gt; performs large, infrequent reads on the underlying &lt;a href=&quot;trait.read&quot;&gt;&lt;code&gt;Read&lt;/code&gt;&lt;/a&gt; and maintains an in-memory buffer of the results.</source>
          <target state="translated">&lt;a href=&quot;trait.read&quot;&gt; &lt;code&gt;Read&lt;/code&gt; &lt;/a&gt;インスタンスを直接操作するのは非常に非効率的です。たとえば、すべての通話がする&lt;a href=&quot;../net/struct.tcpstream#method.read&quot;&gt; &lt;code&gt;read&lt;/code&gt; &lt;/a&gt;で&lt;a href=&quot;../net/struct.tcpstream&quot;&gt; &lt;code&gt;TcpStream&lt;/code&gt; の&lt;/a&gt;システムコールで結果。A &lt;code&gt;BufReader&lt;/code&gt; が大きい行い、不定期は根本的に読み取り、&lt;a href=&quot;trait.read&quot;&gt; &lt;code&gt;Read&lt;/code&gt; &lt;/a&gt;、結果のメモリ内のバッファを維持します。</target>
        </trans-unit>
        <trans-unit id="a53c30292449f5c65f658f1ab5f787257b2ab97a" translate="yes" xml:space="preserve">
          <source>It can be excessively inefficient to work directly with a &lt;a href=&quot;trait.read&quot;&gt;&lt;code&gt;Read&lt;/code&gt;&lt;/a&gt; instance. For example, every call to &lt;a href=&quot;trait.read#tymethod.read&quot;&gt;&lt;code&gt;read&lt;/code&gt;&lt;/a&gt; on &lt;a href=&quot;../net/struct.tcpstream&quot;&gt;&lt;code&gt;TcpStream&lt;/code&gt;&lt;/a&gt; results in a system call. A &lt;code&gt;BufReader&amp;lt;R&amp;gt;&lt;/code&gt; performs large, infrequent reads on the underlying &lt;a href=&quot;trait.read&quot;&gt;&lt;code&gt;Read&lt;/code&gt;&lt;/a&gt; and maintains an in-memory buffer of the results.</source>
          <target state="translated">&lt;a href=&quot;trait.read&quot;&gt; &lt;code&gt;Read&lt;/code&gt; &lt;/a&gt;インスタンスを直接操作するのは非常に非効率的です。たとえば、&lt;a href=&quot;../net/struct.tcpstream&quot;&gt; &lt;code&gt;TcpStream&lt;/code&gt; で&lt;/a&gt;&lt;a href=&quot;trait.read#tymethod.read&quot;&gt; &lt;code&gt;read&lt;/code&gt; &lt;/a&gt;を呼び出すたびに、システムコールが発生します。A &lt;code&gt;BufReader&amp;lt;R&amp;gt;&lt;/code&gt; を行う大きい、稀では根本的に読み取り、&lt;a href=&quot;trait.read&quot;&gt; &lt;code&gt;Read&lt;/code&gt; &lt;/a&gt;、結果のメモリ内のバッファを維持します。</target>
        </trans-unit>
        <trans-unit id="2b3b5769710ce522dc80990250d14aa119cb0a78" translate="yes" xml:space="preserve">
          <source>It can be excessively inefficient to work directly with something that implements &lt;a href=&quot;trait.write&quot;&gt;&lt;code&gt;Write&lt;/code&gt;&lt;/a&gt;. For example, every call to &lt;a href=&quot;../net/struct.tcpstream#method.write&quot;&gt;&lt;code&gt;write&lt;/code&gt;&lt;/a&gt; on &lt;a href=&quot;../net/struct.tcpstream&quot;&gt;&lt;code&gt;TcpStream&lt;/code&gt;&lt;/a&gt; results in a system call. A &lt;code&gt;BufWriter&amp;lt;W&amp;gt;&lt;/code&gt; keeps an in-memory buffer of data and writes it to an underlying writer in large, infrequent batches.</source>
          <target state="translated">&lt;a href=&quot;trait.write&quot;&gt; &lt;code&gt;Write&lt;/code&gt; &lt;/a&gt;を実装するものを直接操作するのは非常に非効率的です。たとえば、すべての呼び出し&lt;a href=&quot;../net/struct.tcpstream#method.write&quot;&gt; &lt;code&gt;write&lt;/code&gt; &lt;/a&gt;に&lt;a href=&quot;../net/struct.tcpstream&quot;&gt; &lt;code&gt;TcpStream&lt;/code&gt; は、&lt;/a&gt;システムコールになります。A &lt;code&gt;BufWriter&amp;lt;W&amp;gt;&lt;/code&gt; データのメモリバッファを保持し、大規模、頻度の低いバッチで根本的なライターに書き込みます。</target>
        </trans-unit>
        <trans-unit id="c9b4e83780a18771dd321f0082a8c599b84b0325" translate="yes" xml:space="preserve">
          <source>It can be excessively inefficient to work directly with something that implements &lt;a href=&quot;trait.write&quot;&gt;&lt;code&gt;Write&lt;/code&gt;&lt;/a&gt;. For example, every call to &lt;a href=&quot;../net/struct.tcpstream#method.write&quot;&gt;&lt;code&gt;write&lt;/code&gt;&lt;/a&gt; on &lt;a href=&quot;../net/struct.tcpstream&quot;&gt;&lt;code&gt;TcpStream&lt;/code&gt;&lt;/a&gt; results in a system call. A &lt;code&gt;BufWriter&lt;/code&gt; keeps an in-memory buffer of data and writes it to an underlying writer in large, infrequent batches.</source>
          <target state="translated">&lt;a href=&quot;trait.write&quot;&gt; &lt;code&gt;Write&lt;/code&gt; &lt;/a&gt;を実装するものを直接操作するのは非常に非効率的です。たとえば、すべての呼び出し&lt;a href=&quot;../net/struct.tcpstream#method.write&quot;&gt; &lt;code&gt;write&lt;/code&gt; &lt;/a&gt;に&lt;a href=&quot;../net/struct.tcpstream&quot;&gt; &lt;code&gt;TcpStream&lt;/code&gt; は、&lt;/a&gt;システムコールになります。A &lt;code&gt;BufWriter&lt;/code&gt; は、データのメモリバッファを保持し、大規模、頻度の低いバッチで根本的なライターに書き込みます。</target>
        </trans-unit>
        <trans-unit id="c37fef9993e5a7b5cdbbe83955b856b6da5daba4" translate="yes" xml:space="preserve">
          <source>It can be excessively inefficient to work directly with something that implements &lt;a href=&quot;trait.write&quot;&gt;&lt;code&gt;Write&lt;/code&gt;&lt;/a&gt;. For example, every call to &lt;a href=&quot;trait.write#tymethod.write&quot;&gt;&lt;code&gt;write&lt;/code&gt;&lt;/a&gt; on &lt;a href=&quot;../net/struct.tcpstream&quot;&gt;&lt;code&gt;TcpStream&lt;/code&gt;&lt;/a&gt; results in a system call. A &lt;code&gt;BufWriter&amp;lt;W&amp;gt;&lt;/code&gt; keeps an in-memory buffer of data and writes it to an underlying writer in large, infrequent batches.</source>
          <target state="translated">&lt;a href=&quot;trait.write&quot;&gt; &lt;code&gt;Write&lt;/code&gt; &lt;/a&gt;を実装するものを直接操作するのは非常に非効率的です。たとえば、すべての呼び出し&lt;a href=&quot;trait.write#tymethod.write&quot;&gt; &lt;code&gt;write&lt;/code&gt; &lt;/a&gt;に&lt;a href=&quot;../net/struct.tcpstream&quot;&gt; &lt;code&gt;TcpStream&lt;/code&gt; は、&lt;/a&gt;システムコールになります。A &lt;code&gt;BufWriter&amp;lt;W&amp;gt;&lt;/code&gt; データのメモリバッファを保持し、大規模、頻度の低いバッチで根本的なライターに書き込みます。</target>
        </trans-unit>
        <trans-unit id="9005a41b0a5154d7a83abaf469c6cbf2455196bc" translate="yes" xml:space="preserve">
          <source>It can be fixed by adjusting the trait bound like this:</source>
          <target state="translated">このように形質結合を調整することで固定することができます。</target>
        </trans-unit>
        <trans-unit id="fe6abd0552b2b40662057338eb474072bfd467ab" translate="yes" xml:space="preserve">
          <source>It can be implemented very efficiently on many platforms.</source>
          <target state="translated">多くのプラットフォームで非常に効率的に実装することができます。</target>
        </trans-unit>
        <trans-unit id="1742a20f108d58ed46034272510180c651908ea6" translate="yes" xml:space="preserve">
          <source>It can be more efficient to read the contents of a file with a buffered &lt;a href=&quot;../io/trait.read&quot;&gt;&lt;code&gt;Read&lt;/code&gt;&lt;/a&gt;er. This can be accomplished with &lt;a href=&quot;../io/struct.bufreader&quot;&gt;&lt;code&gt;BufReader&amp;lt;R&amp;gt;&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">バッファされた&lt;a href=&quot;../io/trait.read&quot;&gt; &lt;code&gt;Read&lt;/code&gt; &lt;/a&gt; erを使用してファイルの内容を読み取る方が効率的です。これは&lt;a href=&quot;../io/struct.bufreader&quot;&gt; &lt;code&gt;BufReader&amp;lt;R&amp;gt;&lt;/code&gt; &lt;/a&gt;で実現できます：</target>
        </trans-unit>
        <trans-unit id="66395a368b8513422e9376d626f808ed1f8bf32e" translate="yes" xml:space="preserve">
          <source>It can be used to drop &lt;a href=&quot;../pin/index&quot;&gt;pinned&lt;/a&gt; data when &lt;code&gt;T&lt;/code&gt; is not &lt;code&gt;repr(packed)&lt;/code&gt; (pinned data must not be moved before it is dropped).</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; が &lt;code&gt;repr(packed)&lt;/code&gt; されていない場合に、&lt;a href=&quot;../pin/index&quot;&gt;ピン留めされた&lt;/a&gt;データをドロップするために使用できます（ピン留めされたデータはドロップする前に移動しないでください）。</target>
        </trans-unit>
        <trans-unit id="7a115494bb139f55de5b0b3f70529477957a7f61" translate="yes" xml:space="preserve">
          <source>It can occur, for example, when giving ill-formed UTF-8 bytes to &lt;a href=&quot;../string/struct.string#method.from_utf8_lossy&quot;&gt;&lt;code&gt;String::from_utf8_lossy&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">たとえば、&lt;a href=&quot;../string/struct.string#method.from_utf8_lossy&quot;&gt; &lt;code&gt;String::from_utf8_lossy&lt;/code&gt; &lt;/a&gt; UTF-8バイトをString :: from_utf8_lossyに渡すときに発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="99e2bcf85c866fbb510069805b1b10aa2dbd5078" translate="yes" xml:space="preserve">
          <source>It can occur, for example, when giving ill-formed UTF-8 bytes to &lt;a href=&quot;string/struct.string#method.from_utf8_lossy&quot;&gt;&lt;code&gt;String::from_utf8_lossy&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これは、たとえば、&lt;a href=&quot;string/struct.string#method.from_utf8_lossy&quot;&gt; &lt;code&gt;String::from_utf8_lossy&lt;/code&gt; &lt;/a&gt;UTF-8バイトをString :: from_utf8_lossyに与える場合に発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="865ab19a4feb80b70039c9bd315636afdebb41d4" translate="yes" xml:space="preserve">
          <source>It compiles! But note that if you try &lt;code&gt;cargo run&lt;/code&gt; and make a request in the browser, you&amp;rsquo;ll see the errors in the browser that we saw at the beginning of the chapter. Our library isn&amp;rsquo;t actually calling the closure passed to &lt;code&gt;execute&lt;/code&gt; yet!</source>
          <target state="translated">コンパイルします！しかし、あなたがしようというノート &lt;code&gt;cargo run&lt;/code&gt; して、ブラウザでの要求を行う、あなたは私たちがこの章の冒頭で見たとブラウザにエラーが表示されます。私たちのライブラリは、 &lt;code&gt;execute&lt;/code&gt; 渡されたクロージャを実際にはまだ呼び出していません！</target>
        </trans-unit>
        <trans-unit id="00fe0776828801d6e4d2d0000fdfe545e88338bd" translate="yes" xml:space="preserve">
          <source>It consists of a data pointer and a &lt;a href=&quot;https://en.wikipedia.org/wiki/Virtual_method_table&quot;&gt;virtual function pointer table (vtable)&lt;/a&gt; that customizes the behavior of the &lt;code&gt;RawWaker&lt;/code&gt;.</source>
          <target state="translated">データポインターと &lt;code&gt;RawWaker&lt;/code&gt; の動作をカスタマイズする&lt;a href=&quot;https://en.wikipedia.org/wiki/Virtual_method_table&quot;&gt;仮想関数ポインターテーブル（vtable）&lt;/a&gt;で構成されます。</target>
        </trans-unit>
        <trans-unit id="304308a190fdf4f0822058e40b620979e500ac31" translate="yes" xml:space="preserve">
          <source>It could also be that the browser is trying to connect to the server multiple times because the server isn&amp;rsquo;t responding with any data. When &lt;code&gt;stream&lt;/code&gt; goes out of scope and is dropped at the end of the loop, the connection is closed as part of the &lt;code&gt;drop&lt;/code&gt; implementation. Browsers sometimes deal with closed connections by retrying, because the problem might be temporary. The important factor is that we&amp;rsquo;ve successfully gotten a handle to a TCP connection!</source>
          <target state="translated">また、サーバーがデータに応答していないため、ブラウザがサーバーに複数回接続しようとしている可能性もあります。場合 &lt;code&gt;stream&lt;/code&gt; 範囲外になると、ループの終了時に廃棄され、接続の一部として閉じている &lt;code&gt;drop&lt;/code&gt; 実装。問題は一時的なものである可能性があるため、ブラウザは再試行によって閉じられた接続を処理することがあります。重要な要素は、TCP接続へのハンドルを取得できたことです。</target>
        </trans-unit>
        <trans-unit id="ade427f6a9f3a1335d386816dffbf2fdc2034717" translate="yes" xml:space="preserve">
          <source>It does &lt;em&gt;not&lt;/em&gt; give you:</source>
          <target state="translated">それはない&lt;em&gt;ない&lt;/em&gt;あなたを与えます：</target>
        </trans-unit>
        <trans-unit id="794a6ddebef5a3a25c88c1d2d823ee0600bddf9c" translate="yes" xml:space="preserve">
          <source>It does not have an &lt;a href=&quot;../iter/trait.intoiterator&quot;&gt;&lt;code&gt;IntoIterator&lt;/code&gt;&lt;/a&gt; implementation, so you can't use it in a &lt;code&gt;for&lt;/code&gt; loop directly. This won't compile:</source>
          <target state="translated">それは持っていません&lt;a href=&quot;../iter/trait.intoiterator&quot;&gt; &lt;code&gt;IntoIterator&lt;/code&gt; の&lt;/a&gt;あなたがそれを使用することはできませんので、実装の &lt;code&gt;for&lt;/code&gt; 直接ループ。これはコンパイルされません：</target>
        </trans-unit>
        <trans-unit id="ffb73bdc252e7f6e26b2827c67cb797c04a45c79" translate="yes" xml:space="preserve">
          <source>It does not have an &lt;a href=&quot;../iter/trait.iterator&quot;&gt;&lt;code&gt;IntoIterator&lt;/code&gt;&lt;/a&gt; implementation, so you can't use it in a &lt;code&gt;for&lt;/code&gt; loop directly. This won't compile:</source>
          <target state="translated">それは持っていません&lt;a href=&quot;../iter/trait.iterator&quot;&gt; &lt;code&gt;IntoIterator&lt;/code&gt; の&lt;/a&gt;あなたがそれを使用することはできませんので、実装の &lt;code&gt;for&lt;/code&gt; 直接ループ。これはコンパイルされません：</target>
        </trans-unit>
        <trans-unit id="74bec73f805593fee91ebe017ac47c318ef63b70" translate="yes" xml:space="preserve">
          <source>It does pass! Let&amp;rsquo;s add another test, this time asserting that a smaller rectangle cannot hold a larger rectangle:</source>
          <target state="translated">合格！別のテストを追加してみましょう。今回は、小さい方の長方形が大きい方の長方形を保持できないことをアサートします。</target>
        </trans-unit>
        <trans-unit id="e2bf564d4c76feec85879b21bc874b8175ee437c" translate="yes" xml:space="preserve">
          <source>It doesn&amp;rsquo;t matter if we mix up width and height for the area calculation, but if we want to draw the rectangle on the screen, it would matter! We would have to keep in mind that &lt;code&gt;width&lt;/code&gt; is the tuple index &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; is the tuple index &lt;code&gt;1&lt;/code&gt;. If someone else worked on this code, they would have to figure this out and keep it in mind as well. It would be easy to forget or mix up these values and cause errors, because we haven&amp;rsquo;t conveyed the meaning of our data in our code.</source>
          <target state="translated">面積の計算に幅と高さを混ぜてもかまいませんが、画面上に長方形を描画する場合は重要です。 &lt;code&gt;width&lt;/code&gt; はタプルインデックス &lt;code&gt;0&lt;/code&gt; で、 &lt;code&gt;height&lt;/code&gt; はタプルインデックス &lt;code&gt;1&lt;/code&gt; であることを覚えておく必要があります。他の誰かがこのコードに取り組んだ場合、彼らはこれを理解し、同様にそれを覚えておく必要があります。コードでデータの意味を伝えていないため、これらの値を忘れたり混同したりしてエラーが発生しやすくなります。</target>
        </trans-unit>
        <trans-unit id="d52b4ba1c15e44e888e3928ea17d62d2f1924cb8" translate="yes" xml:space="preserve">
          <source>It exposes more ways to deal with platform-specific strings (&lt;code&gt;OsStr&lt;/code&gt;, &lt;code&gt;OsString&lt;/code&gt;), allows to set permissions more granularly, extract low-level file descriptors from files and sockets, and has platform-specific helpers for spawning processes.</source>
          <target state="translated">これは、プラットフォーム固有の文字列（ &lt;code&gt;OsStr&lt;/code&gt; 、 &lt;code&gt;OsString&lt;/code&gt; ）を処理するより多くの方法を公開し、アクセス許可をより細かく設定し、ファイルとソケットから低レベルのファイル記述子を抽出し、プロセスを生成するためのプラットフォーム固有のヘルパーを備えています。</target>
        </trans-unit>
        <trans-unit id="7b00fd960002cfd9909fc9bce365f904914da1b7" translate="yes" xml:space="preserve">
          <source>It has also initialized a new Git repository along with a &lt;em&gt;.gitignore&lt;/em&gt; file. Git files won&amp;rsquo;t be generated if you run &lt;code&gt;cargo new&lt;/code&gt; within an existing Git repository; you can override this behavior by using &lt;code&gt;cargo new --vcs=git&lt;/code&gt;.</source>
          <target state="translated">また、&lt;em&gt;.gitignore&lt;/em&gt;ファイルとともに新しいGitリポジトリを初期化しました。既存のGitリポジトリ内で &lt;code&gt;cargo new&lt;/code&gt; を実行した場合、Gitファイルは生成されません。この動作は、 &lt;code&gt;cargo new --vcs=git&lt;/code&gt; を使用してオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="11abb8c04f2668a58f566442bd95936d3058b5af" translate="yes" xml:space="preserve">
          <source>It is &lt;a href=&quot;../behavior-considered-undefined&quot;&gt;undefined behavior&lt;/a&gt; to call a function that is compiled with a feature that is not supported on the current platform the code is running on.</source>
          <target state="translated">コードが実行されている現在のプラットフォームでサポートされていない機能でコンパイルされた関数を呼び出すことは、&lt;a href=&quot;../behavior-considered-undefined&quot;&gt;未定義の動作&lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="14b8fe5823c3e0b4ead46dab65d150ba97815143" translate="yes" xml:space="preserve">
          <source>It is &lt;code&gt;unsafe&lt;/code&gt; to access a static item declared in an extern block, whether or not it's mutable.</source>
          <target state="translated">変更可能かどうかに関係なく、externブロックで宣言された静的項目にアクセスすることは &lt;code&gt;unsafe&lt;/code&gt; ではありません。</target>
        </trans-unit>
        <trans-unit id="789a56605a4c0fc94024c04229e1954360379606" translate="yes" xml:space="preserve">
          <source>It is &lt;em&gt;required&lt;/em&gt; to use &lt;code&gt;drop_in_place&lt;/code&gt; to drop unsized types like trait objects, because they can't be read out onto the stack and dropped normally.</source>
          <target state="translated">&lt;em&gt;必要な&lt;/em&gt;用途に &lt;code&gt;drop_in_place&lt;/code&gt; それらがスタック上に読み出され、正常にドロップすることができないため、形質オブジェクトのように無サイズの種類をドロップします。</target>
        </trans-unit>
        <trans-unit id="122d47e267f58dbf245d83bbd151c9d835be4c42" translate="yes" xml:space="preserve">
          <source>It is &lt;strong&gt;not&lt;/strong&gt; considered an error if the entire buffer could not be written to this writer.</source>
          <target state="translated">バッファ全体をこのライターに書き込めなかった場合、エラーと&lt;strong&gt;は&lt;/strong&gt;見なされません。</target>
        </trans-unit>
        <trans-unit id="bf8bf34a5d274735d5f3f6b75aeb9079259905f3" translate="yes" xml:space="preserve">
          <source>It is &lt;strong&gt;not&lt;/strong&gt; recommended to use this function for a general try/catch mechanism. The &lt;a href=&quot;../result/enum.result&quot;&gt;&lt;code&gt;Result&lt;/code&gt;&lt;/a&gt; type is more appropriate to use for functions that can fail on a regular basis. Additionally, this function is not guaranteed to catch all panics, see the &quot;Notes&quot; section below.</source>
          <target state="translated">この関数を一般的なtry / catchメカニズムに使用することはお勧めし&lt;strong&gt;ません&lt;/strong&gt;。&lt;a href=&quot;../result/enum.result&quot;&gt; &lt;code&gt;Result&lt;/code&gt; &lt;/a&gt;タイプは、定期的に失敗する可能性が機能するために使用することがより適切です。さらに、この関数はすべてのパニックをキャッチすることが保証されていません。以下の「注意」セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="b1a810a5051116223295807560408c5af68cd37c" translate="yes" xml:space="preserve">
          <source>It is &lt;strong&gt;not&lt;/strong&gt; recommended to use this function for a general try/catch mechanism. The &lt;a href=&quot;../thread/type.result&quot;&gt;&lt;code&gt;Result&lt;/code&gt;&lt;/a&gt; type is more appropriate to use for functions that can fail on a regular basis. Additionally, this function is not guaranteed to catch all panics, see the &quot;Notes&quot; section below.</source>
          <target state="translated">一般的なtry / catchメカニズムにこの関数を使用することはお勧めし&lt;strong&gt;ません&lt;/strong&gt;。&lt;a href=&quot;../thread/type.result&quot;&gt; &lt;code&gt;Result&lt;/code&gt; &lt;/a&gt;タイプは、定期的に失敗する可能性が機能するために使用することがより適切です。さらに、この機能がすべてのパニックをキャッチすることは保証されていません。以下の「注意事項」セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="f44c0918ab46b70725b0bcd2ecf83b8a768d4eb5" translate="yes" xml:space="preserve">
          <source>It is a logic error for a key to be modified in such a way that the key's hash, as determined by the &lt;a href=&quot;../../hash/trait.hash&quot;&gt;&lt;code&gt;Hash&lt;/code&gt;&lt;/a&gt; trait, or its equality, as determined by the &lt;a href=&quot;../../cmp/trait.eq&quot;&gt;&lt;code&gt;Eq&lt;/code&gt;&lt;/a&gt; trait, changes while it is in the map. This is normally only possible through &lt;a href=&quot;../../cell/struct.cell&quot;&gt;&lt;code&gt;Cell&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../cell/struct.refcell&quot;&gt;&lt;code&gt;RefCell&lt;/code&gt;&lt;/a&gt;, global state, I/O, or unsafe code.</source>
          <target state="translated">&lt;a href=&quot;../../hash/trait.hash&quot;&gt; &lt;code&gt;Hash&lt;/code&gt; &lt;/a&gt;トレイトによって決定されるキーのハッシュ、または&lt;a href=&quot;../../cmp/trait.eq&quot;&gt; &lt;code&gt;Eq&lt;/code&gt; &lt;/a&gt;トレイトによって決定されるその等価性が、マップ内にある間に変更されるようにキーを変更することは、論理エラーです。これは通常、&lt;a href=&quot;../../cell/struct.cell&quot;&gt; &lt;code&gt;Cell&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../../cell/struct.refcell&quot;&gt; &lt;code&gt;RefCell&lt;/code&gt; &lt;/a&gt;、グローバル状態、I / O、または安全でないコードを通じてのみ可能です。</target>
        </trans-unit>
        <trans-unit id="d5c36c17020650b28936fe4d1b2ab87233144be8" translate="yes" xml:space="preserve">
          <source>It is a logic error for a key to be modified in such a way that the key's hash, as determined by the &lt;a href=&quot;../hash/trait.hash&quot;&gt;&lt;code&gt;Hash&lt;/code&gt;&lt;/a&gt; trait, or its equality, as determined by the &lt;a href=&quot;../cmp/trait.eq&quot;&gt;&lt;code&gt;Eq&lt;/code&gt;&lt;/a&gt; trait, changes while it is in the map. This is normally only possible through &lt;a href=&quot;../cell/struct.cell&quot;&gt;&lt;code&gt;Cell&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../cell/struct.refcell&quot;&gt;&lt;code&gt;RefCell&lt;/code&gt;&lt;/a&gt;, global state, I/O, or unsafe code.</source>
          <target state="translated">&lt;a href=&quot;../hash/trait.hash&quot;&gt; &lt;code&gt;Hash&lt;/code&gt; &lt;/a&gt;トレイトによって決定されるキーのハッシュ、または&lt;a href=&quot;../cmp/trait.eq&quot;&gt; &lt;code&gt;Eq&lt;/code&gt; &lt;/a&gt;トレイトによって決定されるその等価性が、マップ内にある間に変更されるようにキーを変更することは、論理エラーです。これは通常、&lt;a href=&quot;../cell/struct.cell&quot;&gt; &lt;code&gt;Cell&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../cell/struct.refcell&quot;&gt; &lt;code&gt;RefCell&lt;/code&gt; &lt;/a&gt;、グローバル状態、I / O、または安全でないコードを通じてのみ可能です。</target>
        </trans-unit>
        <trans-unit id="46331dafb0153e4395d3531f25654f92dc26340b" translate="yes" xml:space="preserve">
          <source>It is a logic error for a key to be modified in such a way that the key's ordering relative to any other key, as determined by the &lt;a href=&quot;../../cmp/trait.ord&quot;&gt;&lt;code&gt;Ord&lt;/code&gt;&lt;/a&gt; trait, changes while it is in the map. This is normally only possible through &lt;a href=&quot;../../cell/struct.cell&quot;&gt;&lt;code&gt;Cell&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../cell/struct.refcell&quot;&gt;&lt;code&gt;RefCell&lt;/code&gt;&lt;/a&gt;, global state, I/O, or unsafe code.</source>
          <target state="translated">&lt;a href=&quot;../../cmp/trait.ord&quot;&gt; &lt;code&gt;Ord&lt;/code&gt; &lt;/a&gt;トレイトによって決定される他のキーに対するキーの順序が、マップ内にある間に変更されるようにキーを変更することは、論理エラーです。これは通常、&lt;a href=&quot;../../cell/struct.cell&quot;&gt; &lt;code&gt;Cell&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../../cell/struct.refcell&quot;&gt; &lt;code&gt;RefCell&lt;/code&gt; &lt;/a&gt;、グローバル状態、I / O、または安全でないコードを通じてのみ可能です。</target>
        </trans-unit>
        <trans-unit id="85493dfb2b8e297a25b008cf35e5fe74ede0c214" translate="yes" xml:space="preserve">
          <source>It is a logic error for a key to be modified in such a way that the key's ordering relative to any other key, as determined by the &lt;a href=&quot;../cmp/trait.ord&quot;&gt;&lt;code&gt;Ord&lt;/code&gt;&lt;/a&gt; trait, changes while it is in the map. This is normally only possible through &lt;a href=&quot;../cell/struct.cell&quot;&gt;&lt;code&gt;Cell&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../cell/struct.refcell&quot;&gt;&lt;code&gt;RefCell&lt;/code&gt;&lt;/a&gt;, global state, I/O, or unsafe code.</source>
          <target state="translated">&lt;a href=&quot;../cmp/trait.ord&quot;&gt; &lt;code&gt;Ord&lt;/code&gt; &lt;/a&gt;トレイトによって決定される他のキーに対するキーの順序が、マップ内にある間に変更されるようにキーを変更することは、論理エラーです。これは通常、&lt;a href=&quot;../cell/struct.cell&quot;&gt; &lt;code&gt;Cell&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../cell/struct.refcell&quot;&gt; &lt;code&gt;RefCell&lt;/code&gt; &lt;/a&gt;、グローバル状態、I / O、または安全でないコードを通じてのみ可能です。</target>
        </trans-unit>
        <trans-unit id="3a06bdad2097a07f5094016d13cc933d3f72af47" translate="yes" xml:space="preserve">
          <source>It is a logic error for an item to be modified in such a way that the item's hash, as determined by the &lt;a href=&quot;../../hash/trait.hash&quot;&gt;&lt;code&gt;Hash&lt;/code&gt;&lt;/a&gt; trait, or its equality, as determined by the &lt;a href=&quot;../../cmp/trait.eq&quot;&gt;&lt;code&gt;Eq&lt;/code&gt;&lt;/a&gt; trait, changes while it is in the set. This is normally only possible through &lt;a href=&quot;../../cell/struct.cell&quot;&gt;&lt;code&gt;Cell&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../cell/struct.refcell&quot;&gt;&lt;code&gt;RefCell&lt;/code&gt;&lt;/a&gt;, global state, I/O, or unsafe code.</source>
          <target state="translated">&lt;a href=&quot;../../hash/trait.hash&quot;&gt; &lt;code&gt;Hash&lt;/code&gt; &lt;/a&gt;トレイトによって決定されるアイテムのハッシュ、または&lt;a href=&quot;../../cmp/trait.eq&quot;&gt; &lt;code&gt;Eq&lt;/code&gt; &lt;/a&gt;トレイトによって決定されるその等価性がセット内にある間に変更されるような方法でアイテムを変更することは、論理エラーです。これは通常、&lt;a href=&quot;../../cell/struct.cell&quot;&gt; &lt;code&gt;Cell&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../../cell/struct.refcell&quot;&gt; &lt;code&gt;RefCell&lt;/code&gt; &lt;/a&gt;、グローバル状態、I / O、または安全でないコードを通じてのみ可能です。</target>
        </trans-unit>
        <trans-unit id="d42ef3a74bef90b249465c06d2f032ccefb653f1" translate="yes" xml:space="preserve">
          <source>It is a logic error for an item to be modified in such a way that the item's hash, as determined by the &lt;a href=&quot;../hash/trait.hash&quot;&gt;&lt;code&gt;Hash&lt;/code&gt;&lt;/a&gt; trait, or its equality, as determined by the &lt;a href=&quot;../cmp/trait.eq&quot;&gt;&lt;code&gt;Eq&lt;/code&gt;&lt;/a&gt; trait, changes while it is in the set. This is normally only possible through &lt;a href=&quot;../cell/struct.cell&quot;&gt;&lt;code&gt;Cell&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../cell/struct.refcell&quot;&gt;&lt;code&gt;RefCell&lt;/code&gt;&lt;/a&gt;, global state, I/O, or unsafe code.</source>
          <target state="translated">&lt;a href=&quot;../hash/trait.hash&quot;&gt; &lt;code&gt;Hash&lt;/code&gt; &lt;/a&gt;トレイトによって決定されるアイテムのハッシュ、または&lt;a href=&quot;../cmp/trait.eq&quot;&gt; &lt;code&gt;Eq&lt;/code&gt; &lt;/a&gt;トレイトによって決定されるその等価性がセット内にある間に変更されるような方法でアイテムを変更することは、論理エラーです。これは通常、&lt;a href=&quot;../cell/struct.cell&quot;&gt; &lt;code&gt;Cell&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../cell/struct.refcell&quot;&gt; &lt;code&gt;RefCell&lt;/code&gt; &lt;/a&gt;、グローバル状態、I / O、または安全でないコードを通じてのみ可能です。</target>
        </trans-unit>
        <trans-unit id="3ab5c67b79a448ca7bc9aba52ab29aac6f49d326" translate="yes" xml:space="preserve">
          <source>It is a logic error for an item to be modified in such a way that the item's ordering relative to any other item, as determined by the &lt;a href=&quot;../../cmp/trait.ord&quot;&gt;&lt;code&gt;Ord&lt;/code&gt;&lt;/a&gt; trait, changes while it is in the set. This is normally only possible through &lt;a href=&quot;../../cell/struct.cell&quot;&gt;&lt;code&gt;Cell&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../cell/struct.refcell&quot;&gt;&lt;code&gt;RefCell&lt;/code&gt;&lt;/a&gt;, global state, I/O, or unsafe code.</source>
          <target state="translated">&lt;a href=&quot;../../cmp/trait.ord&quot;&gt; &lt;code&gt;Ord&lt;/code&gt; &lt;/a&gt;トレイトによって決定される他のアイテムに対するアイテムの順序がセット内にある間に変更されるようにアイテムを変更することは、論理エラーです。これは通常、&lt;a href=&quot;../../cell/struct.cell&quot;&gt; &lt;code&gt;Cell&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../../cell/struct.refcell&quot;&gt; &lt;code&gt;RefCell&lt;/code&gt; &lt;/a&gt;、グローバル状態、I / O、または安全でないコードを通じてのみ可能です。</target>
        </trans-unit>
        <trans-unit id="81558e504ca17a10e655e3f35b43a6c2e19151af" translate="yes" xml:space="preserve">
          <source>It is a logic error for an item to be modified in such a way that the item's ordering relative to any other item, as determined by the &lt;a href=&quot;../cmp/trait.ord&quot;&gt;&lt;code&gt;Ord&lt;/code&gt;&lt;/a&gt; trait, changes while it is in the set. This is normally only possible through &lt;a href=&quot;../cell/struct.cell&quot;&gt;&lt;code&gt;Cell&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../cell/struct.refcell&quot;&gt;&lt;code&gt;RefCell&lt;/code&gt;&lt;/a&gt;, global state, I/O, or unsafe code.</source>
          <target state="translated">&lt;a href=&quot;../cmp/trait.ord&quot;&gt; &lt;code&gt;Ord&lt;/code&gt; &lt;/a&gt;トレイトによって決定される他のアイテムに対するアイテムの順序がセット内にある間に変更されるようにアイテムを変更することは、論理エラーです。これは通常、&lt;a href=&quot;../cell/struct.cell&quot;&gt; &lt;code&gt;Cell&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../cell/struct.refcell&quot;&gt; &lt;code&gt;RefCell&lt;/code&gt; &lt;/a&gt;、グローバル状態、I / O、または安全でないコードを通じてのみ可能です。</target>
        </trans-unit>
        <trans-unit id="5e476b6f2887551b48a3be2ee9ea6d582ce86836" translate="yes" xml:space="preserve">
          <source>It is a logic error for an item to be modified in such a way that the item's ordering relative to any other item, as determined by the &lt;code&gt;Ord&lt;/code&gt; trait, changes while it is in the heap. This is normally only possible through &lt;code&gt;Cell&lt;/code&gt;, &lt;code&gt;RefCell&lt;/code&gt;, global state, I/O, or unsafe code.</source>
          <target state="translated">&lt;code&gt;Ord&lt;/code&gt; トレイトによって決定される他のアイテムに対するアイテムの順序がヒープ内にある間に変更されるようにアイテムを変更することは、論理エラーです。これは通常、 &lt;code&gt;Cell&lt;/code&gt; 、 &lt;code&gt;RefCell&lt;/code&gt; 、グローバル状態、I / O、または安全でないコードを通じてのみ可能です。</target>
        </trans-unit>
        <trans-unit id="a1fecc95182812f5ebb362d1bac59ac94dc2f98d" translate="yes" xml:space="preserve">
          <source>It is a multiple of the alignment, including zero. The size can change depending on compiler version (as new optimizations are made) and target platform (similar to how &lt;code&gt;usize&lt;/code&gt; varies per-platform).</source>
          <target state="translated">ゼロを含む、アラインメントの倍数です。サイズは、コンパイラーのバージョン（新しい最適化が行われる）とターゲットプラットフォーム（プラットフォームごとに使用 &lt;code&gt;usize&lt;/code&gt; 変化するのと同様）に応じて変化します。</target>
        </trans-unit>
        <trans-unit id="78d00f7fd123a3c3fdf75cbae3233ae2e6e3470e" translate="yes" xml:space="preserve">
          <source>It is allowed for the strong count to be 0 at the time of calling this. Nevertheless, this takes ownership of one weak reference currently represented as a raw pointer (the weak count is not modified by this operation) and therefore it must be paired with a previous call to &lt;a href=&quot;struct.weak#method.into_raw&quot;&gt;&lt;code&gt;into_raw&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これを呼び出すときに、ストロングカウントを0にすることができます。それでも、これは現在rawポインターとして表されている1つの弱参照の所有権を取得します（弱カウントはこの操作では変更されません）。したがって、以前の&lt;a href=&quot;struct.weak#method.into_raw&quot;&gt; &lt;code&gt;into_raw&lt;/code&gt; の&lt;/a&gt;呼び出しとペアにする必要があります。</target>
        </trans-unit>
        <trans-unit id="a0f9d3e3312ad57e5a6d3bcdd50a937a22f832b6" translate="yes" xml:space="preserve">
          <source>It is also an error to have an unspecified discriminant where the previous discriminant is the maximum value for the size of the discriminant.</source>
          <target state="translated">また、前の判別器が判別器の大きさの最大値となるような不特定判別器を持つのも誤りである。</target>
        </trans-unit>
        <trans-unit id="2aaa72db942d7c7ea290053204f195dee9198e63" translate="yes" xml:space="preserve">
          <source>It is also possible that immediately after &lt;code&gt;is_completed&lt;/code&gt; returns false, some other thread finishes executing &lt;code&gt;call_once&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;is_completed&lt;/code&gt; がfalseを返した直後に、他のスレッドが &lt;code&gt;call_once&lt;/code&gt; の実行を終了する可能性もあります。</target>
        </trans-unit>
        <trans-unit id="19ceccce9e9543f68e6cf0b82b34ef37c7f04824" translate="yes" xml:space="preserve">
          <source>It is also possible to manually transmute:</source>
          <target state="translated">手動での転写も可能です。</target>
        </trans-unit>
        <trans-unit id="b9152c587c216123563f72b60e624fb7b37150c7" translate="yes" xml:space="preserve">
          <source>It is also possible to overload most operators for your own type by implementing the &lt;code&gt;[OP]Assign&lt;/code&gt; traits from &lt;code&gt;std::ops&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;std::ops&lt;/code&gt; から &lt;code&gt;[OP]Assign&lt;/code&gt; トレイトを実装することにより、独自のタイプのほとんどの演算子をオーバーロードすることもできます。</target>
        </trans-unit>
        <trans-unit id="9c720012a3e805c9d62f2435d313e2b4c97a82fa" translate="yes" xml:space="preserve">
          <source>It is also possible to overload most operators for your own type by implementing traits from &lt;code&gt;std::ops&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;std::ops&lt;/code&gt; からトレイトを実装することにより、独自のタイプのほとんどの演算子をオーバーロードすることもできます。</target>
        </trans-unit>
        <trans-unit id="665d59482618a683a851550ec2845d9aceb97fe9" translate="yes" xml:space="preserve">
          <source>It is also possible to use &lt;code&gt;super&lt;/code&gt; multiple times: &lt;code&gt;super::super::foo&lt;/code&gt;, going up the ancestor chain.</source>
          <target state="translated">&lt;code&gt;super&lt;/code&gt; を複数回使用することもできます： &lt;code&gt;super::super::foo&lt;/code&gt; 、祖先チェーンを上っていきます。</target>
        </trans-unit>
        <trans-unit id="12a0c387e81a8235a99c7d165954f2002b18f388" translate="yes" xml:space="preserve">
          <source>It is an error for &lt;a href=&quot;items/enumerations#zero-variant-enums&quot;&gt;zero-variant enumerations&lt;/a&gt; to have a primitive representation.</source>
          <target state="translated">&lt;a href=&quot;items/enumerations#zero-variant-enums&quot;&gt;ゼロバリアント列挙&lt;/a&gt;がプリミティブ表現を持つことはエラーです。</target>
        </trans-unit>
        <trans-unit id="8b8784e54718e2a6d91bae7b9a9deae29e0d7cb7" translate="yes" xml:space="preserve">
          <source>It is an error for &lt;a href=&quot;items/enumerations#zero-variant-enums&quot;&gt;zero-variant enumerations&lt;/a&gt; to have the &lt;code&gt;C&lt;/code&gt; representation.</source>
          <target state="translated">&lt;a href=&quot;items/enumerations#zero-variant-enums&quot;&gt;ゼロバリアント列挙&lt;/a&gt;が &lt;code&gt;C&lt;/code&gt; 表現を持つことはエラーです。</target>
        </trans-unit>
        <trans-unit id="c5e73da35c291d17423e4b430565c57bff241da2" translate="yes" xml:space="preserve">
          <source>It is an error to define two associated items (like methods, associated types, associated functions, etc.) with the same identifier.</source>
          <target state="translated">2 つの関連項目(メソッド、関連型、関連関数など)を同じ識別子で定義するとエラーになります。</target>
        </trans-unit>
        <trans-unit id="1ecd71d2b66919da6bca2d4ca4f7a151af58acc5" translate="yes" xml:space="preserve">
          <source>It is an error to pass a zero &lt;code&gt;Duration&lt;/code&gt; to this function.</source>
          <target state="translated">この関数にゼロの &lt;code&gt;Duration&lt;/code&gt; を渡すとエラーになります。</target>
        </trans-unit>
        <trans-unit id="dfd7490ed5e505609b9db1302543626c62fa94ee" translate="yes" xml:space="preserve">
          <source>It is an error to reentrantly initialize the cell from &lt;code&gt;f&lt;/code&gt;. Doing so results in a panic.</source>
          <target state="translated">セルを &lt;code&gt;f&lt;/code&gt; から再入力するとエラーになります。そうするとパニックになります。</target>
        </trans-unit>
        <trans-unit id="4f3be7de61dff0ad6668f83a5edb95e6db095c56" translate="yes" xml:space="preserve">
          <source>It is an error to reentrantly initialize the cell from &lt;code&gt;f&lt;/code&gt;. The exact outcome is unspecified. Current implementation deadlocks, but this may be changed to a panic in the future.</source>
          <target state="translated">セルを &lt;code&gt;f&lt;/code&gt; から再入力するとエラーになります。正確な結果は特定されていません。現在の実装はデッドロックしますが、これは将来パニックに変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="c705f9525d896b896f63b638e17d43664425dcf5" translate="yes" xml:space="preserve">
          <source>It is an error when two variants share the same discriminant.</source>
          <target state="translated">2つの変種が同じ判別器を共有している場合のエラーです。</target>
        </trans-unit>
        <trans-unit id="2f90cd6ec421d6e869d99b74e53a91895af9c5d9" translate="yes" xml:space="preserve">
          <source>It is available for use in stable rust from version 1.39 onwards.</source>
          <target state="translated">バージョン1.39以降の安定したサビで使用できます。</target>
        </trans-unit>
        <trans-unit id="4e066ad57d2ce7768c716de2f11bbba9cfbc5ef3" translate="yes" xml:space="preserve">
          <source>It is common to forget the trailing &lt;code&gt;!&lt;/code&gt; on macro invocations, which would also yield this error:</source>
          <target state="translated">末尾を忘れることはよくあり &lt;code&gt;!&lt;/code&gt; マクロの呼び出しでは、このエラーも発生します。</target>
        </trans-unit>
        <trans-unit id="ab682946a2c7b0a4e860227b119766dc69c7e1ad" translate="yes" xml:space="preserve">
          <source>It is common to use &lt;code&gt;IntoIterator&lt;/code&gt; as a trait bound. This allows the input collection type to change, so long as it is still an iterator. Additional bounds can be specified by restricting on &lt;code&gt;Item&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;IntoIterator&lt;/code&gt; を特性の境界として使用することは一般的です。これにより、イテレータである限り、入力コレクションのタイプを変更できます。追加の境界は、 &lt;code&gt;Item&lt;/code&gt; を制限することで指定できます：</target>
        </trans-unit>
        <trans-unit id="24d52c7dd0ec99d9a6af7862341acee02c183bdc" translate="yes" xml:space="preserve">
          <source>It is common to use the &lt;a href=&quot;trait.iterator#method.take&quot;&gt;&lt;code&gt;take&lt;/code&gt;&lt;/a&gt; iterator adapter to turn an infinite iterator into a finite one:</source>
          <target state="translated">&lt;a href=&quot;trait.iterator#method.take&quot;&gt; &lt;code&gt;take&lt;/code&gt; &lt;/a&gt;イテレーターアダプターを使用して無限イテレーターを有限イテレーターに変換するのが一般的です。</target>
        </trans-unit>
        <trans-unit id="c95bb9f004735a87f727f19d983aa3691d7d3210" translate="yes" xml:space="preserve">
          <source>It is considered an error if not all bytes could be written due to I/O errors or EOF being reached.</source>
          <target state="translated">I/OエラーやEOFに達しているため、すべてのバイトが書き込めなかった場合はエラーとなります。</target>
        </trans-unit>
        <trans-unit id="3bd73943cb17deb4f2b3ccabad843f693f98447d" translate="yes" xml:space="preserve">
          <source>It is considered an error if the directory already exists unless recursive mode is enabled.</source>
          <target state="translated">再帰モードが有効になっていない限り、ディレクトリが既に存在する場合はエラーとみなされます。</target>
        </trans-unit>
        <trans-unit id="4dc00d92a161d3872b936e6a77e4e623f4fb1698" translate="yes" xml:space="preserve">
          <source>It is critical to call &lt;a href=&quot;struct.bufwriter#method.flush&quot;&gt;&lt;code&gt;flush&lt;/code&gt;&lt;/a&gt; before &lt;code&gt;BufWriter&amp;lt;W&amp;gt;&lt;/code&gt; is dropped. Though dropping will attempt to flush the contents of the buffer, any errors that happen in the process of dropping will be ignored. Calling &lt;a href=&quot;struct.bufwriter#method.flush&quot;&gt;&lt;code&gt;flush&lt;/code&gt;&lt;/a&gt; ensures that the buffer is empty and thus dropping will not even attempt file operations.</source>
          <target state="translated">&lt;code&gt;BufWriter&amp;lt;W&amp;gt;&lt;/code&gt; がドロップされる前に、&lt;a href=&quot;struct.bufwriter#method.flush&quot;&gt; &lt;code&gt;flush&lt;/code&gt; &lt;/a&gt;を呼び出すことが重要です。ドロップはバッファの内容をフラッシュしようとしますが、ドロップの過程で発生したエラーは無視されます。&lt;a href=&quot;struct.bufwriter#method.flush&quot;&gt; &lt;code&gt;flush&lt;/code&gt; &lt;/a&gt;を呼び出すと、バッファが空になり、ドロップしてもファイル操作が試行されなくなります。</target>
        </trans-unit>
        <trans-unit id="537243f1f25a0d4711910325fd3d083b4262a463" translate="yes" xml:space="preserve">
          <source>It is critical to call &lt;a href=&quot;trait.write#tymethod.flush&quot;&gt;&lt;code&gt;flush&lt;/code&gt;&lt;/a&gt; before &lt;code&gt;BufWriter&amp;lt;W&amp;gt;&lt;/code&gt; is dropped. Though dropping will attempt to flush the contents of the buffer, any errors that happen in the process of dropping will be ignored. Calling &lt;a href=&quot;trait.write#tymethod.flush&quot;&gt;&lt;code&gt;flush&lt;/code&gt;&lt;/a&gt; ensures that the buffer is empty and thus dropping will not even attempt file operations.</source>
          <target state="translated">&lt;code&gt;BufWriter&amp;lt;W&amp;gt;&lt;/code&gt; がドロップされる前に、&lt;a href=&quot;trait.write#tymethod.flush&quot;&gt; &lt;code&gt;flush&lt;/code&gt; &lt;/a&gt;を呼び出すことが重要です。ドロップはバッファの内容をフラッシュしようとしますが、ドロップの過程で発生するエラーはすべて無視されます。&lt;a href=&quot;trait.write#tymethod.flush&quot;&gt; &lt;code&gt;flush&lt;/code&gt; &lt;/a&gt;を呼び出すと、バッファが空になり、ドロップしてもファイル操作が試行されなくなります。</target>
        </trans-unit>
        <trans-unit id="60b8c7a920e8c6cdcbcebde2d4eda5f284d3bbea" translate="yes" xml:space="preserve">
          <source>It is currently impossible to create raw pointers to unaligned fields of a packed struct.</source>
          <target state="translated">現在のところ、パックされた構造体のアラインメントされていないフィールドへの生のポインタを作成することはできません。</target>
        </trans-unit>
        <trans-unit id="c5c36c5e7602baf3c3616b07cef1f3665caf1d22" translate="yes" xml:space="preserve">
          <source>It is currently undefined behavior to unwind from Rust code into foreign code, so this function is particularly useful when Rust is called from another language (normally C). This can run arbitrary Rust code, capturing a panic and allowing a graceful handling of the error.</source>
          <target state="translated">Rustのコードから外国のコードへの巻き戻しは現在未定義の動作なので、この関数はRustが他の言語(通常はC)から呼び出された場合に特に便利です。これは任意の Rust コードを実行し、パニックを捕捉し、エラーを優雅に処理できるようにします。</target>
        </trans-unit>
        <trans-unit id="5c66ccca042f9b01dffd3651727dd1995756e7b3" translate="yes" xml:space="preserve">
          <source>It is equivalent to &lt;code&gt;OpenOptions::new()&lt;/code&gt; but allows you to write more readable code. Instead of &lt;code&gt;OpenOptions::new().read(true).open(&quot;foo.txt&quot;)&lt;/code&gt; you can write &lt;code&gt;File::with_options().read(true).open(&quot;foo.txt&quot;)&lt;/code&gt;. This also avoids the need to import &lt;code&gt;OpenOptions&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;OpenOptions::new()&lt;/code&gt; と同等ですが、より読みやすいコードを記述できます。代わりの &lt;code&gt;OpenOptions::new().read(true).open(&quot;foo.txt&quot;)&lt;/code&gt; 、あなたが書くことができ &lt;code&gt;File::with_options().read(true).open(&quot;foo.txt&quot;)&lt;/code&gt; 。これにより、 &lt;code&gt;OpenOptions&lt;/code&gt; をインポートする必要もなくなります。</target>
        </trans-unit>
        <trans-unit id="dae5ff64ed07894b48692747efd0c02dda81558f" translate="yes" xml:space="preserve">
          <source>It is fine only if you put something back. &lt;code&gt;mem::replace&lt;/code&gt; can be used for that:</source>
          <target state="translated">元に戻せば大丈夫です。 &lt;code&gt;mem::replace&lt;/code&gt; はそのために使用できます：</target>
        </trans-unit>
        <trans-unit id="d4db503d0191e71bd73bd86e32c32b427b7b7d14" translate="yes" xml:space="preserve">
          <source>It is friendlier to the optimizer to do this over &lt;a href=&quot;../ptr/fn.read&quot;&gt;&lt;code&gt;ptr::read&lt;/code&gt;&lt;/a&gt; when dropping manually allocated memory (e.g., in the implementations of &lt;code&gt;Box&lt;/code&gt;/&lt;code&gt;Rc&lt;/code&gt;/&lt;code&gt;Vec&lt;/code&gt;), as the compiler doesn't need to prove that it's sound to elide the copy.</source>
          <target state="translated">コンパイラはコピーを削除するのが適切であることを証明する必要がないため、手動で割り当てられたメモリを削除するときに（たとえば、 &lt;code&gt;Box&lt;/code&gt; / &lt;code&gt;Rc&lt;/code&gt; / &lt;code&gt;Vec&lt;/code&gt; の実装で）&lt;a href=&quot;../ptr/fn.read&quot;&gt; &lt;code&gt;ptr::read&lt;/code&gt; &lt;/a&gt;介してこれを行う方がオプティマイザにとって使いやすいです。</target>
        </trans-unit>
        <trans-unit id="c557fd6825bdb89ba5f031ec165be0dd6a26ff58" translate="yes" xml:space="preserve">
          <source>It is friendlier to the optimizer to do this over &lt;a href=&quot;../ptr/fn.read&quot;&gt;&lt;code&gt;ptr::read&lt;/code&gt;&lt;/a&gt; when dropping manually allocated memory (e.g., when writing Box/Rc/Vec), as the compiler doesn't need to prove that it's sound to elide the copy.</source>
          <target state="translated">手動で割り当てられたメモリを削除するとき（たとえば、Box / Rc / Vecを書き込むとき）は、オプティマイザ&lt;a href=&quot;../ptr/fn.read&quot;&gt; &lt;code&gt;ptr::read&lt;/code&gt; &lt;/a&gt;これはptr :: readを介して行う方が便利です。コンパイラはコピーを除外するのが適切であることを証明する必要がないためです。</target>
        </trans-unit>
        <trans-unit id="6cdb9b5d9e63ae9c3524961be1d7c967bf76da76" translate="yes" xml:space="preserve">
          <source>It is friendlier to the optimizer to do this over &lt;a href=&quot;fn.read&quot;&gt;&lt;code&gt;ptr::read&lt;/code&gt;&lt;/a&gt; when dropping manually allocated memory (e.g., in the implementations of &lt;code&gt;Box&lt;/code&gt;/&lt;code&gt;Rc&lt;/code&gt;/&lt;code&gt;Vec&lt;/code&gt;), as the compiler doesn't need to prove that it's sound to elide the copy.</source>
          <target state="translated">コンパイラはコピーを削除するのが適切であることを証明する必要がないため、手動で割り当てられたメモリを削除するときに（たとえば、 &lt;code&gt;Box&lt;/code&gt; / &lt;code&gt;Rc&lt;/code&gt; / &lt;code&gt;Vec&lt;/code&gt; の実装で）&lt;a href=&quot;fn.read&quot;&gt; &lt;code&gt;ptr::read&lt;/code&gt; &lt;/a&gt;介してこれを行う方がオプティマイザにとって使いやすいです。</target>
        </trans-unit>
        <trans-unit id="98cf066d0eeb6931da37108448f70da379f6d2ff" translate="yes" xml:space="preserve">
          <source>It is friendlier to the optimizer to do this over &lt;a href=&quot;fn.read&quot;&gt;&lt;code&gt;ptr::read&lt;/code&gt;&lt;/a&gt; when dropping manually allocated memory (e.g., when writing Box/Rc/Vec), as the compiler doesn't need to prove that it's sound to elide the copy.</source>
          <target state="translated">手動で割り当てられたメモリを削除するとき（たとえば、Box / Rc / Vecを書き込むとき）は、オプティマイザ&lt;a href=&quot;fn.read&quot;&gt; &lt;code&gt;ptr::read&lt;/code&gt; &lt;/a&gt;これはptr :: readを介して行う方が便利です。コンパイラはコピーを除外するのが適切であることを証明する必要がないためです。</target>
        </trans-unit>
        <trans-unit id="ed685795cf4962708592336505a9a35be53c890e" translate="yes" xml:space="preserve">
          <source>It is further guaranteed that, for the cases above, one can &lt;a href=&quot;../mem/fn.transmute&quot;&gt;&lt;code&gt;mem::transmute&lt;/code&gt;&lt;/a&gt; from all valid values of &lt;code&gt;T&lt;/code&gt; to &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; and from &lt;code&gt;Some::&amp;lt;T&amp;gt;(_)&lt;/code&gt; to &lt;code&gt;T&lt;/code&gt; (but transmuting &lt;code&gt;None::&amp;lt;T&amp;gt;&lt;/code&gt; to &lt;code&gt;T&lt;/code&gt; is undefined behaviour).</source>
          <target state="translated">さらに、上記の場合、 &lt;code&gt;T&lt;/code&gt; のすべての有効な値から &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; に、 &lt;code&gt;Some::&amp;lt;T&amp;gt;(_)&lt;/code&gt; から &lt;code&gt;T&lt;/code&gt; に&lt;a href=&quot;../mem/fn.transmute&quot;&gt; &lt;code&gt;mem::transmute&lt;/code&gt; &lt;/a&gt;できることが保証されます（ただし、 &lt;code&gt;None::&amp;lt;T&amp;gt;&lt;/code&gt; 変換されます）。 to &lt;code&gt;T&lt;/code&gt; は未定義の振る舞いです）。</target>
        </trans-unit>
        <trans-unit id="a482eb06332931aa49748cd7170635733f6d060d" translate="yes" xml:space="preserve">
          <source>It is important to note that although the returned vector has the &lt;em&gt;capacity&lt;/em&gt; specified, the vector will have a zero &lt;em&gt;length&lt;/em&gt;. For an explanation of the difference between length and capacity, see &lt;em&gt;&lt;a href=&quot;#capacity-and-reallocation&quot;&gt;Capacity and reallocation&lt;/a&gt;&lt;/em&gt;.</source>
          <target state="translated">返されるベクターの&lt;em&gt;容量は&lt;/em&gt;指定されていますが、ベクターの&lt;em&gt;長さ&lt;/em&gt;がゼロになることに注意してください。長さと容量の違いについては、&lt;em&gt;&lt;a href=&quot;#capacity-and-reallocation&quot;&gt;容量と再割り当てを&lt;/a&gt;&lt;/em&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="c3de289a473969bb492d7f49323becca72758c15" translate="yes" xml:space="preserve">
          <source>It is important to note that both back and forth work on the same range, and do not cross: iteration is over when they meet in the middle.</source>
          <target state="translated">ここで重要なのは、前後の両方が同じ範囲で動作し、交差しないことです。</target>
        </trans-unit>
        <trans-unit id="688443f49dee6c57698fbe38d0a4fd0c6b98badb" translate="yes" xml:space="preserve">
          <source>It is important to understand that &lt;a href=&quot;trait.into&quot;&gt;&lt;code&gt;Into&lt;/code&gt;&lt;/a&gt; does not provide a &lt;a href=&quot;trait.from&quot;&gt;&lt;code&gt;From&lt;/code&gt;&lt;/a&gt; implementation (as &lt;a href=&quot;trait.from&quot;&gt;&lt;code&gt;From&lt;/code&gt;&lt;/a&gt; does with &lt;a href=&quot;trait.into&quot;&gt;&lt;code&gt;Into&lt;/code&gt;&lt;/a&gt;). Therefore, you should always try to implement &lt;a href=&quot;trait.from&quot;&gt;&lt;code&gt;From&lt;/code&gt;&lt;/a&gt; and then fall back to &lt;a href=&quot;trait.into&quot;&gt;&lt;code&gt;Into&lt;/code&gt;&lt;/a&gt; if &lt;a href=&quot;trait.from&quot;&gt;&lt;code&gt;From&lt;/code&gt;&lt;/a&gt; can't be implemented.</source>
          <target state="translated">&lt;a href=&quot;trait.into&quot;&gt; &lt;code&gt;Into&lt;/code&gt; &lt;/a&gt;は&lt;a href=&quot;trait.from&quot;&gt; &lt;code&gt;From&lt;/code&gt; &lt;/a&gt;実装を提供しないことを理解することが重要です（&lt;a href=&quot;trait.from&quot;&gt; &lt;code&gt;From&lt;/code&gt; &lt;/a&gt;が&lt;a href=&quot;trait.into&quot;&gt; &lt;code&gt;Into&lt;/code&gt; で行うように&lt;/a&gt;）。したがって、あなたは常に実装しようとする必要があります&lt;a href=&quot;trait.from&quot;&gt; &lt;code&gt;From&lt;/code&gt; &lt;/a&gt;、その後にフォールバック&lt;a href=&quot;trait.into&quot;&gt; &lt;code&gt;Into&lt;/code&gt; &lt;/a&gt;場合&lt;a href=&quot;trait.from&quot;&gt; &lt;code&gt;From&lt;/code&gt; &lt;/a&gt;実装することはできません。</target>
        </trans-unit>
        <trans-unit id="0b60eba4804f29ceedf6d48ba368778e00e21367" translate="yes" xml:space="preserve">
          <source>It is impossible to define an integer type to be used to represent zero-variant enum values because there are no zero-variant enum values. There is no way to construct an instance of the following type using only safe code. So you have two solutions. Either you add variants in your enum:</source>
          <target state="translated">ゼロ変量の列挙値が存在しないので、ゼロ変量の列挙値を表現するための整数型を定義することは不可能です。安全なコードだけを使って次の型のインスタンスを構築する方法はありません。ということで、2つの解決策があります。一つは、列挙型にバリアントを追加することです。</target>
        </trans-unit>
        <trans-unit id="4d5291d52684a5eab8a4aab9333d7cc4b2cb958b" translate="yes" xml:space="preserve">
          <source>It is inadvisable to directly read from the underlying reader.</source>
          <target state="translated">下敷きになっている読者から直接読むのは禁物です。</target>
        </trans-unit>
        <trans-unit id="f3c4bfe06953b97ae05b73dab70d1d3859db96ce" translate="yes" xml:space="preserve">
          <source>It is inadvisable to directly write to the underlying writer.</source>
          <target state="translated">下敷きになっているライターに直接書き込むのは避けた方がいい。</target>
        </trans-unit>
        <trans-unit id="8ec3e32d91034e8ec262cdcaaa5495ade82532d3" translate="yes" xml:space="preserve">
          <source>It is legal to declare a function that is both async and unsafe. The resulting function is unsafe to call and (like any async function) returns a future. This future is just an ordinary future and thus an &lt;code&gt;unsafe&lt;/code&gt; context is not required to &quot;await&quot; it:</source>
          <target state="translated">非同期で安全でない関数を宣言することは合法です。結果の関数は呼び出すのが安全ではなく、（他の非同期関数と同様に）futureを返します。この未来は単なる普通の未来であり、したがって、それを「待つ」ために &lt;code&gt;unsafe&lt;/code&gt; 状況は必要ありません。</target>
        </trans-unit>
        <trans-unit id="f3dbb1246b199ac521c8acb1693aa5061246652a" translate="yes" xml:space="preserve">
          <source>It is not a compile-time error if &lt;code&gt;T&lt;/code&gt; and &lt;code&gt;U&lt;/code&gt; have different sizes, but it is highly encouraged to only invoke this function where &lt;code&gt;T&lt;/code&gt; and &lt;code&gt;U&lt;/code&gt; have the same size. This function triggers &lt;a href=&quot;../../reference/behavior-considered-undefined&quot;&gt;undefined behavior&lt;/a&gt; if &lt;code&gt;U&lt;/code&gt; is larger than &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">それならば、コンパイル時エラーではない &lt;code&gt;T&lt;/code&gt; 及び &lt;code&gt;U&lt;/code&gt; は異なるサイズを有し、それは非常にのみ、この関数呼び出しに奨励さ &lt;code&gt;T&lt;/code&gt; 及び &lt;code&gt;U&lt;/code&gt; は、同じサイズを有します。 &lt;code&gt;U&lt;/code&gt; が &lt;code&gt;T&lt;/code&gt; より大きい場合、この関数は&lt;a href=&quot;../../reference/behavior-considered-undefined&quot;&gt;未定義の動作を&lt;/a&gt;トリガーします。</target>
        </trans-unit>
        <trans-unit id="c8633689304bc80e12157956bafdee7aa5571ef8" translate="yes" xml:space="preserve">
          <source>It is not allowed to cast to a bool.</source>
          <target state="translated">boolにキャストすることはできません。</target>
        </trans-unit>
        <trans-unit id="804904553c24d5c3119a2a373f46ee3afe1e1bcf" translate="yes" xml:space="preserve">
          <source>It is not allowed to cast to a bool. If you are trying to cast a numeric type to a bool, you can compare it with zero instead:</source>
          <target state="translated">bool にキャストすることはできません。数値型をboolにキャストしようとしている場合は、代わりにゼロと比較することができます。</target>
        </trans-unit>
        <trans-unit id="3fc97c498b6845f6dd515270a06b8fc333df6ada" translate="yes" xml:space="preserve">
          <source>It is not allowed to manually call destructors in Rust.</source>
          <target state="translated">Rustではデストラクタを手動で呼び出すことはできません。</target>
        </trans-unit>
        <trans-unit id="16c9437daa5a5b2d54fcaf5cf82931c13dd48503" translate="yes" xml:space="preserve">
          <source>It is not allowed to manually call destructors in Rust. It is also not necessary to do this since &lt;code&gt;drop&lt;/code&gt; is called automatically whenever a value goes out of scope.</source>
          <target state="translated">Rustでデストラクタを手動で呼び出すことはできません。値がスコープ外になると、 &lt;code&gt;drop&lt;/code&gt; は自動的に呼び出されるため、これを行う必要もありません。</target>
        </trans-unit>
        <trans-unit id="0af3651d21c13332936be1aeb070069427b04863" translate="yes" xml:space="preserve">
          <source>It is not allowed to use or capture an uninitialized variable.</source>
          <target state="translated">初期化されていない変数を使用したり、キャプチャしたりすることはできません。</target>
        </trans-unit>
        <trans-unit id="7767b89b540932cb942c6e1844049703b82b847b" translate="yes" xml:space="preserve">
          <source>It is not allowed to use or capture an uninitialized variable. For example:</source>
          <target state="translated">初期化されていない変数を使用したり、キャプチャしたりすることはできません。例えば</target>
        </trans-unit>
        <trans-unit id="9ec565a6be063138e105edece3d9609dbd23ba59" translate="yes" xml:space="preserve">
          <source>It is not always equivalent to a closure like &lt;code&gt;|x| x&lt;/code&gt; since the closure may coerce &lt;code&gt;x&lt;/code&gt; into a different type.</source>
          <target state="translated">&lt;code&gt;|x| x&lt;/code&gt; ようなクロージャーと常に同等であるとは限りません。xクロージャーが &lt;code&gt;x&lt;/code&gt; を別の型に強制変換する可能性があるため。</target>
        </trans-unit>
        <trans-unit id="d85afe6ee8d10535dc66c9e1b7be7b3cdd688a64" translate="yes" xml:space="preserve">
          <source>It is not always equivalent to a closure like &lt;code&gt;|x| x&lt;/code&gt;, since the closure may coerce &lt;code&gt;x&lt;/code&gt; into a different type.</source>
          <target state="translated">&lt;code&gt;|x| x&lt;/code&gt; ようなクロージャと常に同等であるとは限りません。x、クロージャが &lt;code&gt;x&lt;/code&gt; を別のタイプに強制する可能性があるため。</target>
        </trans-unit>
        <trans-unit id="f1671d6fa1d906f29299a5bc6eb309657467bdad" translate="yes" xml:space="preserve">
          <source>It is not an error if the returned value &lt;code&gt;n&lt;/code&gt; is smaller than the buffer size, even when the reader is not at the end of the stream yet. This may happen for example because fewer bytes are actually available right now (e. g. being close to end-of-file) or because read() was interrupted by a signal.</source>
          <target state="translated">リーダーがまだストリームの最後にいない場合でも、戻り値 &lt;code&gt;n&lt;/code&gt; がバッファーサイズよりも小さい場合はエラーではありません。これは、たとえば、現在実際に使用できるバイト数が少ない（たとえば、ファイルの終わりに近い）ため、またはread（）がシグナルによって中断されたために発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="9d7dcfb4170b72e2facf78d57d95eed97b2a6250" translate="yes" xml:space="preserve">
          <source>It is not an error to define a macro multiple times; the most recent declaration will shadow the previous one unless it has gone out of scope.</source>
          <target state="translated">マクロを複数回定義してもエラーにはなりません。</target>
        </trans-unit>
        <trans-unit id="fe10caafa0ee23dcebc8469f9e22713be6e1455c" translate="yes" xml:space="preserve">
          <source>It is not enforced that an iterator implementation yields the declared number of elements. A buggy iterator may yield less than the lower bound or more than the upper bound of elements.</source>
          <target state="translated">イテレータの実装が宣言された要素数を生成することは強制されません。バギーなイテレータは、要素の下限値よりも小さい値や上限値よりも大きい値を返すことがあります。</target>
        </trans-unit>
        <trans-unit id="b8f822d10fd7f248875122ae295429f7075d08d7" translate="yes" xml:space="preserve">
          <source>It is not guaranteed that the memory pointed by &lt;code&gt;ptr&lt;/code&gt; won't change before the &lt;code&gt;CStr&lt;/code&gt; has been destroyed.</source>
          <target state="translated">&lt;code&gt;CStr&lt;/code&gt; が破棄されるまで、 &lt;code&gt;ptr&lt;/code&gt; が指すメモリが変化しないことは保証されていません。</target>
        </trans-unit>
        <trans-unit id="63ef7dab9cc8c89ff48dae3884d5439039407f4c" translate="yes" xml:space="preserve">
          <source>It is not intended that most types or functions need to worry about this trait. It is only used as a bound on the &lt;code&gt;catch_unwind&lt;/code&gt; function and as mentioned above, the lack of &lt;code&gt;unsafe&lt;/code&gt; means it is mostly an advisory. The &lt;a href=&quot;struct.assertunwindsafe&quot;&gt;&lt;code&gt;AssertUnwindSafe&lt;/code&gt;&lt;/a&gt; wrapper struct can be used to force this trait to be implemented for any closed over variables passed to &lt;code&gt;catch_unwind&lt;/code&gt;.</source>
          <target state="translated">ほとんどの型または関数がこの特性について心配する必要があることは意図されていません。これは、 &lt;code&gt;catch_unwind&lt;/code&gt; 関数の境界としてのみ使用されます。前述のように、 &lt;code&gt;unsafe&lt;/code&gt; でないことの欠如は、それがほとんど勧告であることを意味します。&lt;a href=&quot;struct.assertunwindsafe&quot;&gt; &lt;code&gt;AssertUnwindSafe&lt;/code&gt; &lt;/a&gt;ラッパー構造体にはに渡されるオーバー閉じた変数のために実装されるように、この形質を強制するために使用することができます &lt;code&gt;catch_unwind&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="34f3040279fd242d13257751040f971829001939" translate="yes" xml:space="preserve">
          <source>It is not necessary to annotate the full type. Once the ambiguity is resolved, the compiler can infer the rest:</source>
          <target state="translated">完全な型をアノテーションする必要はありません。曖昧さが解消されれば、コンパイラは残りの部分を推論することができます。</target>
        </trans-unit>
        <trans-unit id="79ac203d9d8f6d2d15f792ef9b54266d902c1bf2" translate="yes" xml:space="preserve">
          <source>It is not possible to declare type parameters on a function that has the &lt;code&gt;start&lt;/code&gt; attribute. Such a function must have the following type signature (for more information, view &lt;a href=&quot;https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib&quot;&gt;the unstable book&lt;/a&gt;):</source>
          <target state="translated">&lt;code&gt;start&lt;/code&gt; 属性を持つ関数で型パラメーターを宣言することはできません。そのような関数には、次の型シグネチャが必要です（詳細については&lt;a href=&quot;https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib&quot;&gt;、unstableブックを&lt;/a&gt;参照してください）。</target>
        </trans-unit>
        <trans-unit id="de00175d000048a3ab2db1da305a9746730281d2" translate="yes" xml:space="preserve">
          <source>It is not possible to define &lt;code&gt;main&lt;/code&gt; with a where clause.</source>
          <target state="translated">where句で &lt;code&gt;main&lt;/code&gt; を定義することはできません。</target>
        </trans-unit>
        <trans-unit id="9b5f5303b9508d3572ecb0aabe587d9c97215e2a" translate="yes" xml:space="preserve">
          <source>It is not possible to define &lt;code&gt;main&lt;/code&gt; with a where clause. Erroneous code example:</source>
          <target state="translated">where句で &lt;code&gt;main&lt;/code&gt; を定義することはできません。誤ったコード例：</target>
        </trans-unit>
        <trans-unit id="d0b1c5c12eac01beb248497b03a0ab70e561e5a5" translate="yes" xml:space="preserve">
          <source>It is not possible to define &lt;code&gt;main&lt;/code&gt; with generic parameters. When &lt;code&gt;main&lt;/code&gt; is present, it must take no arguments and return &lt;code&gt;()&lt;/code&gt;. Erroneous code example:</source>
          <target state="translated">ジェネリックパラメーターで &lt;code&gt;main&lt;/code&gt; を定義することはできません。 &lt;code&gt;main&lt;/code&gt; が存在する場合、引数を取らず、 &lt;code&gt;()&lt;/code&gt; を返す必要があります。誤ったコード例：</target>
        </trans-unit>
        <trans-unit id="dac867cdafaa004a57591e1391a5068dc6cc6e4a" translate="yes" xml:space="preserve">
          <source>It is not possible to define &lt;code&gt;start&lt;/code&gt; with a where clause. Erroneous code example:</source>
          <target state="translated">where句で &lt;code&gt;start&lt;/code&gt; を定義することはできません。誤ったコード例：</target>
        </trans-unit>
        <trans-unit id="77edaee193e2b26f0dc132c04fc983d7a3f09123" translate="yes" xml:space="preserve">
          <source>It is not possible to define the &lt;code&gt;main&lt;/code&gt; function with generic parameters. It must not take any arguments.</source>
          <target state="translated">ジェネリックパラメーターを使用して &lt;code&gt;main&lt;/code&gt; 関数を定義することはできません。引数を取ってはいけません。</target>
        </trans-unit>
        <trans-unit id="42e4484b8793e84f3d96cf9d91150a25ddc1b027" translate="yes" xml:space="preserve">
          <source>It is not possible to use stability attributes outside of the standard library. Also, for now, it is not possible to write deprecation messages either.</source>
          <target state="translated">標準ライブラリ以外で安定性属性を使用することはできません。また、今のところ、Deprecationメッセージも書けません。</target>
        </trans-unit>
        <trans-unit id="a4bacc3cad49d167308e0fdf3be52c1450a1de33" translate="yes" xml:space="preserve">
          <source>It is not valid to put positional parameters (those without names) after arguments that have names. Like with positional parameters, it is not valid to provide named parameters that are unused by the format string.</source>
          <target state="translated">名前を持つ引数の後に位置パラメータ(名前のないもの)を付けることは無効です。位置パラメータと同様に、フォーマット文字列で使用されない名前付きパラメータを指定することは無効です。</target>
        </trans-unit>
        <trans-unit id="babf4563d827f22cdca258081ab4debae3695f91" translate="yes" xml:space="preserve">
          <source>It is not valid to put positional parameters (those without names) after arguments which have names. Like with positional parameters, it is not valid to provide named parameters that are unused by the format string.</source>
          <target state="translated">名前を持つ引数の後に位置パラメータ(名前のないもの)を付けることは無効です。位置パラメータと同様に、フォーマット文字列で使用されない名前付きパラメータを指定することは無効です。</target>
        </trans-unit>
        <trans-unit id="d3ba3f42fb0bf8686407f3cf8b99f8a8d970d5d7" translate="yes" xml:space="preserve">
          <source>It is often seen in its borrowed forms, either mutable or shared. The shared slice type is &lt;code&gt;&amp;amp;[T]&lt;/code&gt;, while the mutable slice type is &lt;code&gt;&amp;amp;mut [T]&lt;/code&gt;, where &lt;code&gt;T&lt;/code&gt; represents the element type.</source>
          <target state="translated">それは、可変または共有の借用形式でよく見られます。共有スライスタイプは &lt;code&gt;&amp;amp;[T]&lt;/code&gt; ですが、可変スライスタイプは &lt;code&gt;&amp;amp;mut [T]&lt;/code&gt; です &lt;code&gt;T&lt;/code&gt; は要素タイプを表します。</target>
        </trans-unit>
        <trans-unit id="2fab516d94cc4b051eccfa289cd47f35b51a6906" translate="yes" xml:space="preserve">
          <source>It is possible for &lt;code&gt;addr&lt;/code&gt; to yield multiple addresses, but &lt;code&gt;send_to&lt;/code&gt; will only send data to the first address yielded by &lt;code&gt;addr&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;addr&lt;/code&gt; が複数のアドレスを生成することは可能ですが、 &lt;code&gt;send_to&lt;/code&gt; は &lt;code&gt;addr&lt;/code&gt; によって生成された最初のアドレスにのみデータを送信します。</target>
        </trans-unit>
        <trans-unit id="6369907ebe6b468b9a2ca85d26bcb0993424305d" translate="yes" xml:space="preserve">
          <source>It is possible to seek beyond the end of an object, but it's an error to seek before byte 0.</source>
          <target state="translated">オブジェクトの終端を超えてシークすることは可能ですが、バイト0より前にシークするとエラーになります。</target>
        </trans-unit>
        <trans-unit id="fdaed3dad08dda198d1195920589e6980812bcbd" translate="yes" xml:space="preserve">
          <source>It is possible to use &lt;code&gt;ManuallyDrop&lt;/code&gt; to control the drop order, but this requires unsafe code and is hard to do correctly in the presence of unwinding.</source>
          <target state="translated">&lt;code&gt;ManuallyDrop&lt;/code&gt; を使用してドロップ順序を制御することは可能ですが、これには安全でないコードが必要であり、巻き戻しがある場合に正しく実行するのは困難です。</target>
        </trans-unit>
        <trans-unit id="2a2042bff8db30718f4be68e6828fc24e384458a" translate="yes" xml:space="preserve">
          <source>It is possible to use pattern matching on &lt;code&gt;union&lt;/code&gt;s. A single field name must be used and it must match the name of one of the &lt;code&gt;union&lt;/code&gt;'s field. Like reading from a &lt;code&gt;union&lt;/code&gt;, pattern matching on a &lt;code&gt;union&lt;/code&gt; requires &lt;code&gt;unsafe&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;union&lt;/code&gt; パターンマッチングを使用することができます。単一のフィールド名を使用する必要があり、 &lt;code&gt;union&lt;/code&gt; のフィールドの1つの名前と一致する必要があります。以下からの読み込みと同じように &lt;code&gt;union&lt;/code&gt; 、上のパターンマッチング &lt;code&gt;union&lt;/code&gt; 必要で &lt;code&gt;unsafe&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cecc5cbf610b50fb9b85dc5d9562253999d191e2" translate="yes" xml:space="preserve">
          <source>It is possible, however, for &lt;strong&gt;logical&lt;/strong&gt; invariants to be broken in Rust, which can end up causing behavioral bugs. Another key aspect of unwind safety in Rust is that, in the absence of &lt;code&gt;unsafe&lt;/code&gt; code, a panic cannot lead to memory unsafety.</source>
          <target state="translated">ただし、Rustで&lt;strong&gt;論理&lt;/strong&gt;不変式が壊れて、動作上のバグが発生する可能性があります。Rustでの巻き戻しの安全性のもう1つの重要な側面は、 &lt;code&gt;unsafe&lt;/code&gt; でないコードがない場合、パニックがメモリの安全性を損なう可能性がないことです。</target>
        </trans-unit>
        <trans-unit id="da80bba13418a2462cda990927908d8ad7892c41" translate="yes" xml:space="preserve">
          <source>It is recommended that you look for a &lt;code&gt;new&lt;/code&gt; function or equivalent in the crate's documentation.</source>
          <target state="translated">クレートのドキュメントで &lt;code&gt;new&lt;/code&gt; 機能または同等の機能を探すことをお勧めします。</target>
        </trans-unit>
        <trans-unit id="158d82d49dddadcae62bf58b7e9d48850c1ba3f3" translate="yes" xml:space="preserve">
          <source>It is required that the keys implement the &lt;a href=&quot;../../cmp/trait.eq&quot;&gt;&lt;code&gt;Eq&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../hash/trait.hash&quot;&gt;&lt;code&gt;Hash&lt;/code&gt;&lt;/a&gt; traits, although this can frequently be achieved by using &lt;code&gt;#[derive(PartialEq, Eq, Hash)]&lt;/code&gt;. If you implement these yourself, it is important that the following property holds:</source>
          <target state="translated">キーは&lt;a href=&quot;../../cmp/trait.eq&quot;&gt; &lt;code&gt;Eq&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;../../hash/trait.hash&quot;&gt; &lt;code&gt;Hash&lt;/code&gt; &lt;/a&gt;トレイトを実装する必要がありますが、 &lt;code&gt;#[derive(PartialEq, Eq, Hash)]&lt;/code&gt; を使用することで頻繁に実現できます。これらを自分で実装する場合、次のプロパティが保持されていることが重要です。</target>
        </trans-unit>
        <trans-unit id="1c5f8488f4eecd7c3ca6dd6e0c4ceb285589eb45" translate="yes" xml:space="preserve">
          <source>It is required that the keys implement the &lt;a href=&quot;../cmp/trait.eq&quot;&gt;&lt;code&gt;Eq&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../hash/trait.hash&quot;&gt;&lt;code&gt;Hash&lt;/code&gt;&lt;/a&gt; traits, although this can frequently be achieved by using &lt;code&gt;#[derive(PartialEq, Eq, Hash)]&lt;/code&gt;. If you implement these yourself, it is important that the following property holds:</source>
          <target state="translated">キーは&lt;a href=&quot;../cmp/trait.eq&quot;&gt; &lt;code&gt;Eq&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;../hash/trait.hash&quot;&gt; &lt;code&gt;Hash&lt;/code&gt; &lt;/a&gt;トレイトを実装する必要がありますが、 &lt;code&gt;#[derive(PartialEq, Eq, Hash)]&lt;/code&gt; を使用することで頻繁に実現できます。これらを自分で実装する場合、次のプロパティが保持されていることが重要です。</target>
        </trans-unit>
        <trans-unit id="9e65409691544dfbd0d6482536ef748a0086ee53" translate="yes" xml:space="preserve">
          <source>It is returned by the &lt;a href=&quot;struct.condvar#method.wait_timeout&quot;&gt;&lt;code&gt;wait_timeout&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">これは、&lt;a href=&quot;struct.condvar#method.wait_timeout&quot;&gt; &lt;code&gt;wait_timeout&lt;/code&gt; &lt;/a&gt;メソッドによって返されます。</target>
        </trans-unit>
        <trans-unit id="43f6a5e55fbbfc805831e83b9b3a4f775c58ea12" translate="yes" xml:space="preserve">
          <source>It is roughly equal to a duration of 584,942,417,355 years.</source>
          <target state="translated">584,942,417,355年の期間にほぼ等しくなります。</target>
        </trans-unit>
        <trans-unit id="9e22d2249ea3cf1183d26c8fb6b0c9e7619f06c9" translate="yes" xml:space="preserve">
          <source>It is semantically a wrapper around an &lt;code&gt;&amp;amp;[u8]&lt;/code&gt;, but is guaranteed to be ABI compatible with the &lt;code&gt;iovec&lt;/code&gt; type on Unix platforms and &lt;code&gt;WSABUF&lt;/code&gt; on Windows.</source>
          <target state="translated">これは意味的には &lt;code&gt;&amp;amp;[u8]&lt;/code&gt; のラッパーですが、Unixプラットフォームの &lt;code&gt;iovec&lt;/code&gt; タイプおよびWindowsの &lt;code&gt;WSABUF&lt;/code&gt; とのABI互換性が保証されています。</target>
        </trans-unit>
        <trans-unit id="310066900f319893888448530eda337cc1113b35" translate="yes" xml:space="preserve">
          <source>It is semantically a wrapper around an &lt;code&gt;&amp;amp;mut [u8]&lt;/code&gt;, but is guaranteed to be ABI compatible with the &lt;code&gt;iovec&lt;/code&gt; type on Unix platforms and &lt;code&gt;WSABUF&lt;/code&gt; on Windows.</source>
          <target state="translated">これは意味的には &lt;code&gt;&amp;amp;mut [u8]&lt;/code&gt; のラッパーですが、Unixプラットフォームの &lt;code&gt;iovec&lt;/code&gt; タイプおよびWindowsの &lt;code&gt;WSABUF&lt;/code&gt; とのABI互換性が保証されています。</target>
        </trans-unit>
        <trans-unit id="d5c70546718e8bec6af4968356db7e36252be3a4" translate="yes" xml:space="preserve">
          <source>It is sometimes necessary to manually drop the mutex guard to unlock it sooner than the end of the enclosing scope.</source>
          <target state="translated">封入スコープの終了よりも早くロックを解除するために、ミューテックスガードを手動で落とす必要がある場合があります。</target>
        </trans-unit>
        <trans-unit id="82e8beb4413ce9188f6c9ea8439432ef5b9611d2" translate="yes" xml:space="preserve">
          <source>It is sometimes useful to have objects that are guaranteed not to move, in the sense that their placement in memory does not change, and can thus be relied upon. A prime example of such a scenario would be building self-referential structs, as moving an object with pointers to itself will invalidate them, which could cause undefined behavior.</source>
          <target state="translated">移動しないことが保証されているオブジェクトがあると便利な場合がありますが、これは、メモリ内での配置が変化しないという意味で、そのオブジェクトに依存することができます。このようなシナリオの主要な例としては、自己参照構造体を構築することが挙げられます。</target>
        </trans-unit>
        <trans-unit id="4371e8f3f7450e76f6a242238c801628a1cbf06b" translate="yes" xml:space="preserve">
          <source>It is the declarations that make up the contract of traits and what is available on generic types.</source>
          <target state="translated">それは形質の契約を構成する宣言であり、汎用型で利用できるものです。</target>
        </trans-unit>
        <trans-unit id="d37c9a79672120af34904e218ec499be2dd86aef" translate="yes" xml:space="preserve">
          <source>It is the declarations that make up the contract of traits and what it available on generic types.</source>
          <target state="translated">それは形質の契約を構成する宣言であり、汎用型で利用可能なものです。</target>
        </trans-unit>
        <trans-unit id="0b7557ddb14fd9cccc6582df092ab6f10becd5d9" translate="yes" xml:space="preserve">
          <source>It is the maximum index such that &lt;code&gt;from_utf8(&amp;amp;input[..index])&lt;/code&gt; would return &lt;code&gt;Ok(_)&lt;/code&gt;.</source>
          <target state="translated">これは、 &lt;code&gt;from_utf8(&amp;amp;input[..index])&lt;/code&gt; が &lt;code&gt;Ok(_)&lt;/code&gt; を返すような最大のインデックスです。</target>
        </trans-unit>
        <trans-unit id="b264294fdd4a01382c3aea7e168cfb7358441c48" translate="yes" xml:space="preserve">
          <source>It is the programmer's responsibility when writing &lt;code&gt;unsafe&lt;/code&gt; code to ensure that any safe code interacting with the &lt;code&gt;unsafe&lt;/code&gt; code cannot trigger these behaviors. &lt;code&gt;unsafe&lt;/code&gt; code that satisfies this property for any safe client is called &lt;em&gt;sound&lt;/em&gt;; if &lt;code&gt;unsafe&lt;/code&gt; code can be misused by safe code to exhibit undefined behavior, it is &lt;em&gt;unsound&lt;/em&gt;.</source>
          <target state="translated">&lt;code&gt;unsafe&lt;/code&gt; コードを作成するときは、安全でないコードと相互作用する &lt;code&gt;unsafe&lt;/code&gt; コードがこれらの動作をトリガーできないようにするのはプログラマーの責任です。 &lt;code&gt;unsafe&lt;/code&gt; なクライアントに対してこのプロパティを満たす安全でないコードは、&lt;em&gt;サウンド&lt;/em&gt;と呼ばれ&lt;em&gt;ます&lt;/em&gt;。 &lt;code&gt;unsafe&lt;/code&gt; コードが安全なコードによって誤用されて未定義の動作を示す可能性がある場合、それは&lt;em&gt;健全&lt;/em&gt;ではありません。</target>
        </trans-unit>
        <trans-unit id="f5ade12a490d1fb2caaede62e82d953ed5a36f49" translate="yes" xml:space="preserve">
          <source>It is typically faster than stable sorting, except in a few special cases, e.g., when the slice consists of several concatenated sorted sequences.</source>
          <target state="translated">これは、いくつかの特殊なケース(例えば、スライスが複数の連結ソートされたシーケンスから構成されている場合など)を除いて、一般的に安定したソートよりも高速です。</target>
        </trans-unit>
        <trans-unit id="a75ff90de5ca8eff04b8583b7bb1f33e14e7d147" translate="yes" xml:space="preserve">
          <source>It is undefined behavior for this operation to overflow the range of values supported by &lt;code&gt;Self&lt;/code&gt;. If you cannot guarantee that this will not overflow, use &lt;code&gt;backward&lt;/code&gt; or &lt;code&gt;backward_checked&lt;/code&gt; instead.</source>
          <target state="translated">この操作が &lt;code&gt;Self&lt;/code&gt; でサポートされている値の範囲をオーバーフローすることは未定義の動作です。これがオーバーフローしないことを保証できない場合は、代わりに &lt;code&gt;backward&lt;/code&gt; または &lt;code&gt;backward_checked&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="ea8054d51290c5e837766cf36b3dc8b91cb98821" translate="yes" xml:space="preserve">
          <source>It is undefined behavior for this operation to overflow the range of values supported by &lt;code&gt;Self&lt;/code&gt;. If you cannot guarantee that this will not overflow, use &lt;code&gt;forward&lt;/code&gt; or &lt;code&gt;forward_checked&lt;/code&gt; instead.</source>
          <target state="translated">この操作が &lt;code&gt;Self&lt;/code&gt; でサポートされている値の範囲をオーバーフローすることは未定義の動作です。これがオーバーフローしないことを保証できない場合は、代わりに &lt;code&gt;forward&lt;/code&gt; または &lt;code&gt;forward_checked&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="4acc32d24d7d6395cf0c7d59cd524a48233ae10a" translate="yes" xml:space="preserve">
          <source>It is unnecessary to do this since &lt;code&gt;drop&lt;/code&gt; is called automatically whenever a value goes out of scope. However, if you really need to drop a value by hand, you can use the &lt;code&gt;std::mem::drop&lt;/code&gt; function:</source>
          <target state="translated">値がスコープ外になると &lt;code&gt;drop&lt;/code&gt; が自動的に呼び出されるため、これを行う必要はありません。ただし、本当に手動で値を削除する必要がある場合は、 &lt;code&gt;std::mem::drop&lt;/code&gt; 関数を使用できます。</target>
        </trans-unit>
        <trans-unit id="44e547b1d483f3958a2447866fe3c4d46a3e009d" translate="yes" xml:space="preserve">
          <source>It is unspecified how many elements are removed from the vector if the &lt;code&gt;Splice&lt;/code&gt; value is leaked.</source>
          <target state="translated">&lt;code&gt;Splice&lt;/code&gt; 値がリークされた場合、ベクターから削除される要素の数は不定です。</target>
        </trans-unit>
        <trans-unit id="295705b2fa436290d781c9b500c921db48521039" translate="yes" xml:space="preserve">
          <source>It is unspecified how many more elements will be subjected to the closure if a panic occurs in the closure, or a panic occurs while dropping an element, or if the &lt;code&gt;DrainFilter&lt;/code&gt; value is leaked.</source>
          <target state="translated">クロージャーでパニックが発生した場合、要素のドロップ中にパニックが発生した場合、または &lt;code&gt;DrainFilter&lt;/code&gt; 値がリークした場合に、クロージャーの対象となる要素の数は指定されていません。</target>
        </trans-unit>
        <trans-unit id="c5e979093f4634e70883c1e6b5d99af22f995783" translate="yes" xml:space="preserve">
          <source>It is unspecified how many more values will be subjected to the closure if a panic occurs in the closure, or if a panic occurs while dropping a value, or if the &lt;code&gt;DrainFilter&lt;/code&gt; itself is leaked.</source>
          <target state="translated">クロージャでパニックが発生した場合、値の削除中にパニックが発生した場合、または &lt;code&gt;DrainFilter&lt;/code&gt; 自体がリークした場合に、クロージャの対象となる値があといくつあるかは指定されていません。</target>
        </trans-unit>
        <trans-unit id="d6cad4b99027fa4acf9843034ac2fdd309a68ec9" translate="yes" xml:space="preserve">
          <source>It is up to the caller to ensure that the object is still alive when accessing it through the pointer.</source>
          <target state="translated">ポインタを介してオブジェクトにアクセスする際に、そのオブジェクトがまだ生きているかどうかは呼び出し元にかかっています。</target>
        </trans-unit>
        <trans-unit id="98956152124bb7bc80eb86d315a85b9b45c037d0" translate="yes" xml:space="preserve">
          <source>It is up to the caller to guarantee that the &lt;code&gt;MaybeUninit&amp;lt;T&amp;gt;&lt;/code&gt; elements really are in an initialized state. Calling this when the content is not yet fully initialized causes undefined behavior.</source>
          <target state="translated">&lt;code&gt;MaybeUninit&amp;lt;T&amp;gt;&lt;/code&gt; 要素が実際に初期化された状態にあることを保証するのは呼び出し元の責任です。コンテンツがまだ完全に初期化されていないときにこれを呼び出すと、未定義の動作が発生します。</target>
        </trans-unit>
        <trans-unit id="aa61fcbe3608674ea2f0e3a8facadbaeb00b9db0" translate="yes" xml:space="preserve">
          <source>It is up to the caller to guarantee that the &lt;code&gt;MaybeUninit&amp;lt;T&amp;gt;&lt;/code&gt; really is in an initialized state. Calling this when the content is not yet fully initialized causes immediate undefined behavior. The &lt;a href=&quot;#initialization-invariant&quot;&gt;type-level documentation&lt;/a&gt; contains more information about this initialization invariant.</source>
          <target state="translated">&lt;code&gt;MaybeUninit&amp;lt;T&amp;gt;&lt;/code&gt; 実際に初期化された状態であることを保証するのは呼び出し側の責任です。コンテンツがまだ完全に初期化されていないときにこれを呼び出すと、すぐに未定義の動作が発生します。&lt;a href=&quot;#initialization-invariant&quot;&gt;タイプレベルのドキュメントでは、&lt;/a&gt;この初期化不変の詳細情報が含まれています。</target>
        </trans-unit>
        <trans-unit id="e90618210aeb35b7fbf1d0dce959c7d288e195c5" translate="yes" xml:space="preserve">
          <source>It is up to the caller to guarantee that the &lt;code&gt;MaybeUninit&amp;lt;T&amp;gt;&lt;/code&gt; really is in an initialized state. Calling this when the content is not yet fully initialized causes undefined behavior.</source>
          <target state="translated">&lt;code&gt;MaybeUninit&amp;lt;T&amp;gt;&lt;/code&gt; 実際に初期化された状態であることを保証するのは呼び出し側の責任です。コンテンツがまだ完全に初期化されていないときにこれを呼び出すと、未定義の動作が発生します。</target>
        </trans-unit>
        <trans-unit id="1cc21693b6059e6e8119cffad058e61a70eeecf5" translate="yes" xml:space="preserve">
          <source>It is up to the caller to guarantee that the &lt;code&gt;MaybeUninit&amp;lt;T&amp;gt;&lt;/code&gt; really is in an initialized state. Calling this when the content is not yet fully initialized causes undefined behavior. The &lt;a href=&quot;#initialization-invariant&quot;&gt;type-level documentation&lt;/a&gt; contains more information about this initialization invariant.</source>
          <target state="translated">&lt;code&gt;MaybeUninit&amp;lt;T&amp;gt;&lt;/code&gt; 実際に初期化された状態であることを保証するのは呼び出し側の責任です。コンテンツがまだ完全に初期化されていないときにこれを呼び出すと、未定義の動作が発生します。&lt;a href=&quot;#initialization-invariant&quot;&gt;タイプレベルのドキュメントでは、&lt;/a&gt;この初期化不変の詳細情報が含まれています。</target>
        </trans-unit>
        <trans-unit id="ea0a0e4346d92e82b2088690613099c2bf07dc7c" translate="yes" xml:space="preserve">
          <source>It is used by the &lt;a href=&quot;trait.seek&quot;&gt;&lt;code&gt;Seek&lt;/code&gt;&lt;/a&gt; trait.</source>
          <target state="translated">&lt;a href=&quot;trait.seek&quot;&gt; &lt;code&gt;Seek&lt;/code&gt; &lt;/a&gt;トレイトで使用されます。</target>
        </trans-unit>
        <trans-unit id="76aa244bb958db0a4b9e995026430044d057625c" translate="yes" xml:space="preserve">
          <source>It is used with the &lt;a href=&quot;struct.error&quot;&gt;&lt;code&gt;io::Error&lt;/code&gt;&lt;/a&gt; type.</source>
          <target state="translated">&lt;a href=&quot;struct.error&quot;&gt; &lt;code&gt;io::Error&lt;/code&gt; &lt;/a&gt;タイプで使用されます。</target>
        </trans-unit>
        <trans-unit id="2f1ece6b57f7a1f8dc31198244f231a713dd3042" translate="yes" xml:space="preserve">
          <source>It is valid to add the &lt;code&gt;link&lt;/code&gt; attribute on an empty extern block. You can use this to satisfy the linking requirements of extern blocks elsewhere in your code (including upstream crates) instead of adding the attribute to each extern block.</source>
          <target state="translated">空のexternブロックに &lt;code&gt;link&lt;/code&gt; 属性を追加することは有効です。これを使用して、各externブロックに属性を追加する代わりに、コードの他の場所（上流のクレートを含む）のexternブロックのリンク要件を満たすことができます。</target>
        </trans-unit>
        <trans-unit id="d3e90c3943be0d42f62f18b3f27da88ff78617f2" translate="yes" xml:space="preserve">
          <source>It is worth reiterating that &lt;a href=&quot;struct.pin&quot;&gt;&lt;code&gt;Pin&amp;lt;P&amp;gt;&lt;/code&gt;&lt;/a&gt; does &lt;em&gt;not&lt;/em&gt; change the fact that a Rust compiler considers all types movable. &lt;a href=&quot;../mem/fn.swap&quot;&gt;&lt;code&gt;mem::swap&lt;/code&gt;&lt;/a&gt; remains callable for any &lt;code&gt;T&lt;/code&gt;. Instead, &lt;a href=&quot;struct.pin&quot;&gt;&lt;code&gt;Pin&amp;lt;P&amp;gt;&lt;/code&gt;&lt;/a&gt; prevents certain &lt;em&gt;values&lt;/em&gt; (pointed to by pointers wrapped in &lt;a href=&quot;struct.pin&quot;&gt;&lt;code&gt;Pin&amp;lt;P&amp;gt;&lt;/code&gt;&lt;/a&gt;) from being moved by making it impossible to call methods that require &lt;code&gt;&amp;amp;mut T&lt;/code&gt; on them (like &lt;a href=&quot;../mem/fn.swap&quot;&gt;&lt;code&gt;mem::swap&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">&lt;a href=&quot;struct.pin&quot;&gt; &lt;code&gt;Pin&amp;lt;P&amp;gt;&lt;/code&gt; &lt;/a&gt;は、Rustコンパイラがすべてのタイプを移動可能と見なすという事実を変更し&lt;em&gt;ない&lt;/em&gt;ことを繰り返す価値が&lt;em&gt;あり&lt;/em&gt;ます。&lt;a href=&quot;../mem/fn.swap&quot;&gt; &lt;code&gt;mem::swap&lt;/code&gt; &lt;/a&gt;は、どの &lt;code&gt;T&lt;/code&gt; に対しても呼び出し可能のままです。代わりに、&lt;a href=&quot;struct.pin&quot;&gt; &lt;code&gt;Pin&amp;lt;P&amp;gt;&lt;/code&gt; &lt;/a&gt;は、 &lt;code&gt;&amp;amp;mut T&lt;/code&gt; を必要とするメソッド（&lt;a href=&quot;../mem/fn.swap&quot;&gt; &lt;code&gt;mem::swap&lt;/code&gt; &lt;/a&gt;）を呼び出せないようにすることで、特定の&lt;em&gt;値&lt;/em&gt;（&lt;a href=&quot;struct.pin&quot;&gt; &lt;code&gt;Pin&amp;lt;P&amp;gt;&lt;/code&gt; &lt;/a&gt;ラップされたポインターが指す）が移動するのを防ぎ&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="6738e5c58c6dd95792620faa63b8d5cc231a8b6d" translate="yes" xml:space="preserve">
          <source>It is worth reiterating that &lt;a href=&quot;struct.pin&quot;&gt;&lt;code&gt;Pin&amp;lt;P&amp;gt;&lt;/code&gt;&lt;/a&gt; does &lt;em&gt;not&lt;/em&gt; change the fact that a Rust compiler considers all types movable. &lt;a href=&quot;../mem/fn.swap&quot;&gt;&lt;code&gt;mem::swap&lt;/code&gt;&lt;/a&gt; remains callable for any &lt;code&gt;T&lt;/code&gt;. Instead, &lt;code&gt;Pin&amp;lt;P&amp;gt;&lt;/code&gt; prevents certain &lt;em&gt;values&lt;/em&gt; (pointed to by pointers wrapped in &lt;code&gt;Pin&amp;lt;P&amp;gt;&lt;/code&gt;) from being moved by making it impossible to call methods that require &lt;code&gt;&amp;amp;mut T&lt;/code&gt; on them (like &lt;a href=&quot;../mem/fn.swap&quot;&gt;&lt;code&gt;mem::swap&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">繰り返しますが、&lt;a href=&quot;struct.pin&quot;&gt; &lt;code&gt;Pin&amp;lt;P&amp;gt;&lt;/code&gt; &lt;/a&gt;は、Rustコンパイラがすべての型を移動可能と見なしているという事実を変更しませ&lt;em&gt;ん&lt;/em&gt;。&lt;a href=&quot;../mem/fn.swap&quot;&gt; &lt;code&gt;mem::swap&lt;/code&gt; &lt;/a&gt;は、どの &lt;code&gt;T&lt;/code&gt; でも呼び出し可能のままです。代わりに、 &lt;code&gt;Pin&amp;lt;P&amp;gt;&lt;/code&gt; は、それらに &lt;code&gt;&amp;amp;mut T&lt;/code&gt; を必要とするメソッド（&lt;a href=&quot;../mem/fn.swap&quot;&gt; &lt;code&gt;mem::swap&lt;/code&gt; &lt;/a&gt;）を呼び出せないようにすることで、特定の&lt;em&gt;値&lt;/em&gt;（ &lt;code&gt;Pin&amp;lt;P&amp;gt;&lt;/code&gt; ラップされたポインターが指す）の移動を防ぎ&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="0497668f013a73ed21db051aa84713bf2b2c56fa" translate="yes" xml:space="preserve">
          <source>It is written as &lt;code&gt;cfg&lt;/code&gt;, &lt;code&gt;(&lt;/code&gt;, a configuration predicate, and finally &lt;code&gt;)&lt;/code&gt;.</source>
          <target state="translated">それは &lt;code&gt;cfg&lt;/code&gt; 、 &lt;code&gt;(&lt;/code&gt; 、構成述語、そして最後に &lt;code&gt;)&lt;/code&gt; と書かれています。</target>
        </trans-unit>
        <trans-unit id="ff3c5f08953486f2ebadb5983fbdd75f91d8e664" translate="yes" xml:space="preserve">
          <source>It is your responsibility to make sure that the string slice only gets modified in a way that it remains valid UTF-8.</source>
          <target state="translated">文字列スライスが有効なUTF-8のままの方法でのみ変更されるようにするのは、あなたの責任です。</target>
        </trans-unit>
        <trans-unit id="e9c82e577605ff32cb90a4cd85e5d6c96aa90577" translate="yes" xml:space="preserve">
          <source>It is your responsibility to make sure that the underlying memory is not freed too early. For example, the following code will cause undefined behavior when &lt;code&gt;ptr&lt;/code&gt; is used inside the &lt;code&gt;unsafe&lt;/code&gt; block:</source>
          <target state="translated">基礎となるメモリが早く解放されないようにするのは、あなたの責任です。たとえば、次のコードでは、 &lt;code&gt;unsafe&lt;/code&gt; ブロック内で &lt;code&gt;ptr&lt;/code&gt; を使用すると、未定義の動作が発生します。</target>
        </trans-unit>
        <trans-unit id="0e3a6e91bbdb9a45516082a07a40a29592b3f0cb" translate="yes" xml:space="preserve">
          <source>It makes sense to name the function parameters with the same name as the struct fields, but having to repeat the &lt;code&gt;email&lt;/code&gt; and &lt;code&gt;username&lt;/code&gt; field names and variables is a bit tedious. If the struct had more fields, repeating each name would get even more annoying. Luckily, there&amp;rsquo;s a convenient shorthand!</source>
          <target state="translated">関数パラメーターにstructフィールドと同じ名前を付けるのは理にかなっていますが、 &lt;code&gt;email&lt;/code&gt; と &lt;code&gt;username&lt;/code&gt; フィールド名と変数を繰り返す必要があるので、少々面倒です。構造体にさらにフィールドがある場合、各名前を繰り返すとさらに面倒になります。幸いなことに、便利な速記があります！</target>
        </trans-unit>
        <trans-unit id="d6943ba68e7fe9f38375bc9f4ece082b476fd104" translate="yes" xml:space="preserve">
          <source>It matches! There&amp;rsquo;s no value to add to, so the program stops and returns the &lt;code&gt;None&lt;/code&gt; value on the right side of &lt;code&gt;=&amp;gt;&lt;/code&gt;. Because the first arm matched, no other arms are compared.</source>
          <target state="translated">マッチ！追加する値がないため、プログラムは停止し、 &lt;code&gt;=&amp;gt;&lt;/code&gt; の右側に &lt;code&gt;None&lt;/code&gt; 値を返します。最初のアームが一致したため、他のアームは比較されません。</target>
        </trans-unit>
        <trans-unit id="843b41eaa3d5b0c22ed8a08ff3f89c4230955bbd" translate="yes" xml:space="preserve">
          <source>It may be possible to define the closure later:</source>
          <target state="translated">後からクロージャーを定義することも可能かもしれません。</target>
        </trans-unit>
        <trans-unit id="37366d1499bbe80dc60f80cfc9ff38beb421f588" translate="yes" xml:space="preserve">
          <source>It may seem counter-intuitive that the field of a pinned struct might not be pinned, but that is actually the easiest choice: if a &lt;a href=&quot;struct.pin&quot;&gt;&lt;code&gt;Pin&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;&amp;amp;mut Field&amp;gt;&lt;/code&gt; is never created, nothing can go wrong! So, if you decide that some field does not have structural pinning, all you have to ensure is that you never create a pinned reference to that field.</source>
          <target state="translated">これは、固定構造体のフィールドは固定されていない可能性があることを直感的に見えるかもしれませんが、それは実際には最も簡単な選択である：場合&lt;a href=&quot;struct.pin&quot;&gt; &lt;code&gt;Pin&lt;/code&gt; &lt;/a&gt; &lt;code&gt;&amp;lt;&amp;amp;mut Field&amp;gt;&lt;/code&gt; 作成されることはありません、何も間違って行くことはできません！したがって、一部のフィールドに構造的な固定がないと判断した場合、確認する必要があるのは、そのフィールドへの固定された参照を作成しないことだけです。</target>
        </trans-unit>
        <trans-unit id="7626a2cf86a0ef32fb36f30c95b230833af23f10" translate="yes" xml:space="preserve">
          <source>It may seem counter-intuitive that the field of a pinned struct might not be pinned, but that is actually the easiest choice: if a &lt;code&gt;Pin&amp;lt;&amp;amp;mut Field&amp;gt;&lt;/code&gt; is never created, nothing can go wrong! So, if you decide that some field does not have structural pinning, all you have to ensure is that you never create a pinned reference to that field.</source>
          <target state="translated">これは、固定構造体のフィールドは固定されていない可能性があることを直感的に見えるかもしれませんが、それは実際には最も簡単な選択である：場合 &lt;code&gt;Pin&amp;lt;&amp;amp;mut Field&amp;gt;&lt;/code&gt; 作成されることはありません、何も間違って行くことはできません！したがって、一部のフィールドに構造的な固定がないと決定した場合、そのフィールドへの固定参照を作成しないことを確認するだけで済みます。</target>
        </trans-unit>
        <trans-unit id="1bb0d24f6b4149955502e6e8ad32374412376163" translate="yes" xml:space="preserve">
          <source>It might seem like the paths we&amp;rsquo;ve written to call functions so far are inconveniently long and repetitive. For example, in Listing 7-7, whether we chose the absolute or relative path to the &lt;code&gt;add_to_waitlist&lt;/code&gt; function, every time we wanted to call &lt;code&gt;add_to_waitlist&lt;/code&gt; we had to specify &lt;code&gt;front_of_house&lt;/code&gt; and &lt;code&gt;hosting&lt;/code&gt; too. Fortunately, there&amp;rsquo;s a way to simplify this process. We can bring a path into a scope once and then call the items in that path as if they&amp;rsquo;re local items with the &lt;code&gt;use&lt;/code&gt; keyword.</source>
          <target state="translated">これまでに関数を呼び出すために作成したパスは、不便なほど長く反復的であるように思えるかもしれません。たとえば、リスト7-7では、 &lt;code&gt;add_to_waitlist&lt;/code&gt; 関数への絶対パスと相対パスのどちらを選択した場合でも、add_to_waitlistを呼び出す &lt;code&gt;add_to_waitlist&lt;/code&gt; に、 &lt;code&gt;front_of_house&lt;/code&gt; と &lt;code&gt;hosting&lt;/code&gt; を指定する必要がありました。幸いにも、このプロセスを簡略化する方法があります。一度パスをスコープに入れて、そのパス内のアイテムを、 &lt;code&gt;use&lt;/code&gt; キーワードを使用してローカルアイテムであるかのように呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="805aa02c515eaa318de6b78a094bce98b8c53d4d" translate="yes" xml:space="preserve">
          <source>It moves the input &lt;code&gt;x&lt;/code&gt; passed to the function.</source>
          <target state="translated">関数に渡された入力 &lt;code&gt;x&lt;/code&gt; を移動します。</target>
        </trans-unit>
        <trans-unit id="5eebbaa7bc3cdd0a56ef1daa1103d4c78b76f258" translate="yes" xml:space="preserve">
          <source>It must be &quot;dereferencable&quot; in the sense defined in &lt;a href=&quot;index#safety&quot;&gt;the module documentation&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;index#safety&quot;&gt;モジュールのドキュメント&lt;/a&gt;で定義されている意味で「参照解除可能」である必要があります。</target>
        </trans-unit>
        <trans-unit id="00a5c10c251d6c8327aa492d2913739597d4a71f" translate="yes" xml:space="preserve">
          <source>It must be &quot;dereferencable&quot; in the sense defined in &lt;a href=&quot;ptr/index#safety&quot;&gt;the module documentation&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;ptr/index#safety&quot;&gt;モジュールのドキュメント&lt;/a&gt;で定義されている意味で「参照解除可能」である必要があります。</target>
        </trans-unit>
        <trans-unit id="e3e5a16652e3acc5312ad5ba06a9e285d4162164" translate="yes" xml:space="preserve">
          <source>It must not have any associated constants.</source>
          <target state="translated">関連する定数を持っていてはいけません。</target>
        </trans-unit>
        <trans-unit id="2ed9fe4f614f6746c16c9c39cbffbf6f903c7ae2" translate="yes" xml:space="preserve">
          <source>It must not require &lt;code&gt;Self: Sized&lt;/code&gt;</source>
          <target state="translated">それは &lt;code&gt;Self: Sized&lt;/code&gt; 必要としてはなりません：サイズ</target>
        </trans-unit>
        <trans-unit id="3f3447254df95470f3130af039bc15cf58155424" translate="yes" xml:space="preserve">
          <source>It operates on raw pointers instead of references. When references are available, &lt;a href=&quot;../mem/fn.swap&quot;&gt;&lt;code&gt;mem::swap&lt;/code&gt;&lt;/a&gt; should be preferred.</source>
          <target state="translated">参照ではなく生のポインタを操作します。参照が利用可能な場合、&lt;a href=&quot;../mem/fn.swap&quot;&gt; &lt;code&gt;mem::swap&lt;/code&gt; &lt;/a&gt;が推奨されます。</target>
        </trans-unit>
        <trans-unit id="15a360bcd6063536513f56852862c8efa63c2070" translate="yes" xml:space="preserve">
          <source>It remains valid until it goes &lt;em&gt;out of scope&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;範囲外になる&lt;/em&gt;まで有効です。</target>
        </trans-unit>
        <trans-unit id="28129f615360627e84e6c1c9dbfcb777498ce57b" translate="yes" xml:space="preserve">
          <source>It replaces this:</source>
          <target state="translated">これに置き換わります。</target>
        </trans-unit>
        <trans-unit id="a96e5b042b30c122375f53b68b92a35b6c66cd8b" translate="yes" xml:space="preserve">
          <source>It represents a separator that designates that a path starts from root.</source>
          <target state="translated">これは、パスがルートから始まることを示す区切り文字を表します。</target>
        </trans-unit>
        <trans-unit id="813494512097c4629c56611a8d3205233aba9f55" translate="yes" xml:space="preserve">
          <source>It should be noted that the length isn't just &quot;recomputed,&quot; but that the recomputed length must match the original length from the &lt;a href=&quot;struct.cstring#method.into_raw&quot;&gt;&lt;code&gt;CString::into_raw&lt;/code&gt;&lt;/a&gt; call. This means the &lt;a href=&quot;struct.cstring#method.into_raw&quot;&gt;&lt;code&gt;CString::into_raw&lt;/code&gt;&lt;/a&gt;/&lt;code&gt;from_raw&lt;/code&gt; methods should not be used when passing the string to C functions that can modify the string's length.</source>
          <target state="translated">長さは単に「再計算」されるだけでなく、再計算された長さは&lt;a href=&quot;struct.cstring#method.into_raw&quot;&gt; &lt;code&gt;CString::into_raw&lt;/code&gt; &lt;/a&gt;呼び出しからの元の長さと一致する必要があることに注意してください。つまり、文字列の長さを変更できるC関数に文字列を渡すときは、&lt;a href=&quot;struct.cstring#method.into_raw&quot;&gt; &lt;code&gt;CString::into_raw&lt;/code&gt; &lt;/a&gt; / &lt;code&gt;from_raw&lt;/code&gt; メソッドを使用しないでください。</target>
        </trans-unit>
        <trans-unit id="110275e5135057ece97674a5c23f292001714824" translate="yes" xml:space="preserve">
          <source>It sometimes happens that you have unused type parameters which indicate what type of data a struct is &quot;tied&quot; to, even though that data is not actually found in the struct itself. Here is an example where this arises with &lt;a href=&quot;../../book/ch19-01-unsafe-rust#using-extern-functions-to-call-external-code&quot;&gt;FFI&lt;/a&gt;. The foreign interface uses handles of type &lt;code&gt;*mut ()&lt;/code&gt; to refer to Rust values of different types. We track the Rust type using a phantom type parameter on the struct &lt;code&gt;ExternalResource&lt;/code&gt; which wraps a handle.</source>
          <target state="translated">そのデータが実際には構造体自体に見つからない場合でも、構造体が「結び付けられている」データのタイプを示す未使用の型パラメーターがある場合があります。これが&lt;a href=&quot;../../book/ch19-01-unsafe-rust#using-extern-functions-to-call-external-code&quot;&gt;FFIで&lt;/a&gt;発生する例です。外部インターフェースは、 &lt;code&gt;*mut ()&lt;/code&gt; タイプのハンドルを使用して、異なるタイプのRust値を参照します。ハンドルをラップする &lt;code&gt;ExternalResource&lt;/code&gt; 構造体のファントムタイプパラメータを使用して、Rustタイプを追跡します。</target>
        </trans-unit>
        <trans-unit id="c8a5407ac4250c5a13730093f7af0747e49f3547" translate="yes" xml:space="preserve">
          <source>It takes ownership of one weak count. In case a &lt;a href=&quot;../ptr/fn.null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt; is passed, a dangling &lt;a href=&quot;struct.weak&quot;&gt;&lt;code&gt;Weak&lt;/code&gt;&lt;/a&gt; is returned.</source>
          <target state="translated">それは1つの弱いカウントの所有権をとります。場合&lt;a href=&quot;../ptr/fn.null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt;ぶら下がり、渡された&lt;a href=&quot;struct.weak&quot;&gt; &lt;code&gt;Weak&lt;/code&gt; &lt;/a&gt;返されます。</target>
        </trans-unit>
        <trans-unit id="cc57f2847f6e3b461b4b48ae401fd449efb6afda" translate="yes" xml:space="preserve">
          <source>It takes ownership of one weak reference (with the exception of pointers created by &lt;a href=&quot;struct.weak#method.new&quot;&gt;&lt;code&gt;new&lt;/code&gt;&lt;/a&gt;, as these don't own anything; the method still works on them).</source>
          <target state="translated">1つの弱参照の所有権を取得します（&lt;a href=&quot;struct.weak#method.new&quot;&gt; &lt;code&gt;new&lt;/code&gt; &lt;/a&gt;によって作成されたポインターを除いて、これらは何も所有していないため、メソッドは引き続き機能します）。</target>
        </trans-unit>
        <trans-unit id="556eed10e4ddb25bae7da43fa1a61a57fb93be86" translate="yes" xml:space="preserve">
          <source>It turns out that it is actually up to the author of the data structure to decide whether the pinned projection for a particular field turns &lt;a href=&quot;struct.pin&quot;&gt;&lt;code&gt;Pin&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;&amp;amp;mut Struct&amp;gt;&lt;/code&gt; into &lt;a href=&quot;struct.pin&quot;&gt;&lt;code&gt;Pin&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;&amp;amp;mut Field&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;amp;mut Field&lt;/code&gt;. There are some constraints though, and the most important constraint is &lt;em&gt;consistency&lt;/em&gt;: every field can be &lt;em&gt;either&lt;/em&gt; projected to a pinned reference, &lt;em&gt;or&lt;/em&gt; have pinning removed as part of the projection. If both are done for the same field, that will likely be unsound!</source>
          <target state="translated">特定のフィールドのピン留めされた射影が&lt;a href=&quot;struct.pin&quot;&gt; &lt;code&gt;Pin&lt;/code&gt; &lt;/a&gt; &lt;code&gt;&amp;lt;&amp;amp;mut Struct&amp;gt;&lt;/code&gt; を&lt;a href=&quot;struct.pin&quot;&gt; &lt;code&gt;Pin&lt;/code&gt; &lt;/a&gt; &lt;code&gt;&amp;lt;&amp;amp;mut Field&amp;gt;&lt;/code&gt; または &lt;code&gt;&amp;amp;mut Field&lt;/code&gt; に変換するかどうかを決定するのは、実際にはデータ構造の作成者次第であることがわかります。そこかかわらず、いくつかの制約があり、そして最も重要な制約がある&lt;em&gt;一貫性&lt;/em&gt;：すべてのフィールドをすることができます&lt;em&gt;いずれかの&lt;/em&gt;ピン止めされた基準に投影、&lt;em&gt;または&lt;/em&gt;投影の一部として削除ピニングしています。両方が同じフィールドに対して行われた場合、それはおそらく不健全になります！</target>
        </trans-unit>
        <trans-unit id="2e869ff63d6d4b946c2cdd219b436de253a41746" translate="yes" xml:space="preserve">
          <source>It turns out that it is actually up to the author of the data structure to decide whether the pinned projection for a particular field turns &lt;code&gt;Pin&amp;lt;&amp;amp;mut Struct&amp;gt;&lt;/code&gt; into &lt;code&gt;Pin&amp;lt;&amp;amp;mut Field&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;amp;mut Field&lt;/code&gt;. There are some constraints though, and the most important constraint is &lt;em&gt;consistency&lt;/em&gt;: every field can be &lt;em&gt;either&lt;/em&gt; projected to a pinned reference, &lt;em&gt;or&lt;/em&gt; have pinning removed as part of the projection. If both are done for the same field, that will likely be unsound!</source>
          <target state="translated">特定のフィールドの固定投影が &lt;code&gt;Pin&amp;lt;&amp;amp;mut Struct&amp;gt;&lt;/code&gt; を &lt;code&gt;Pin&amp;lt;&amp;amp;mut Field&amp;gt;&lt;/code&gt; または &lt;code&gt;&amp;amp;mut Field&lt;/code&gt; に変換するかどうかを決定するのは、実際にはデータ構造の作成者次第です。そこかかわらず、いくつかの制約があり、そして最も重要な制約がある&lt;em&gt;一貫性&lt;/em&gt;：すべてのフィールドをすることができます&lt;em&gt;いずれかの&lt;/em&gt;ピン止めされた基準に投影、&lt;em&gt;または&lt;/em&gt;投影の一部として削除ピニングしています。両方が同じフィールドで行われた場合、それはおそらく不健全です！</target>
        </trans-unit>
        <trans-unit id="43f35f0c065fabfd41f89d1318ce0f42a18d0c80" translate="yes" xml:space="preserve">
          <source>It wasn&amp;rsquo;t always so clear, but the Rust programming language is fundamentally about &lt;em&gt;empowerment&lt;/em&gt;: no matter what kind of code you are writing now, Rust empowers you to reach farther, to program with confidence in a wider variety of domains than you did before.</source>
          <target state="translated">常に明確であるとは限りませんでしたが、Rustプログラミング言語は根本的に&lt;em&gt;エンパワーメント&lt;/em&gt;についてです。現在どのような種類のコードを記述していても、Rustは以前よりも幅広い種類のドメインで自信を持ってプログラミングできるようにします。 。</target>
        </trans-unit>
        <trans-unit id="e5c52d18214990d951c10878c00ac04808b86559" translate="yes" xml:space="preserve">
          <source>It will also return an error if it encounters while reading an error of a kind other than &lt;a href=&quot;../io/enum.errorkind#variant.Interrupted&quot;&gt;&lt;code&gt;ErrorKind::Interrupted&lt;/code&gt;&lt;/a&gt;, or if the contents of the file are not valid UTF-8.</source>
          <target state="translated">&lt;a href=&quot;../io/enum.errorkind#variant.Interrupted&quot;&gt; &lt;code&gt;ErrorKind::Interrupted&lt;/code&gt; &lt;/a&gt;以外の種類のエラーの読み取り中に発生した場合、またはファイルの内容が有効なUTF-8でない場合も、エラーを返します。</target>
        </trans-unit>
        <trans-unit id="88d7df68d5037684c00152095cea66d62196594d" translate="yes" xml:space="preserve">
          <source>It will also return an error if it encounters while reading an error of a kind other than &lt;a href=&quot;../io/enum.errorkind#variant.Interrupted&quot;&gt;&lt;code&gt;ErrorKind::Interrupted&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../io/enum.errorkind#variant.Interrupted&quot;&gt; &lt;code&gt;ErrorKind::Interrupted&lt;/code&gt; &lt;/a&gt;以外の種類のエラーの読み取り中に発生した場合も、エラーを返します。</target>
        </trans-unit>
        <trans-unit id="b634d15305e7f67a78aa8cca8e62aa2565532e97" translate="yes" xml:space="preserve">
          <source>It will also return an error if it encounters while reading an error of a kind other than &lt;a href=&quot;../io/enum.errorkind#variant.Interrupted&quot;&gt;&lt;code&gt;io::ErrorKind::Interrupted&lt;/code&gt;&lt;/a&gt;, or if the contents of the file are not valid UTF-8.</source>
          <target state="translated">また、&lt;a href=&quot;../io/enum.errorkind#variant.Interrupted&quot;&gt; &lt;code&gt;io::ErrorKind::Interrupted&lt;/code&gt; &lt;/a&gt;以外の種類のエラーの読み取り中に発生した場合、またはファイルの内容が有効なUTF-8でない場合にも、エラーが返されます。</target>
        </trans-unit>
        <trans-unit id="f94bfac984e5cdabffa566b75c8486ad84a9f63a" translate="yes" xml:space="preserve">
          <source>It will also return an error if it encounters while reading an error of a kind other than &lt;a href=&quot;../io/enum.errorkind#variant.Interrupted&quot;&gt;&lt;code&gt;io::ErrorKind::Interrupted&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">また、&lt;a href=&quot;../io/enum.errorkind#variant.Interrupted&quot;&gt; &lt;code&gt;io::ErrorKind::Interrupted&lt;/code&gt; &lt;/a&gt;以外の種類のエラーの読み取り中に発生した場合もエラーを返します。</target>
        </trans-unit>
        <trans-unit id="4977950c4a1247296e8ff0c58adfe3a8ef825061" translate="yes" xml:space="preserve">
          <source>It will be implemented by associated &lt;a href=&quot;trait.searcher&quot;&gt;&lt;code&gt;Searcher&lt;/code&gt;&lt;/a&gt; types of the &lt;a href=&quot;trait.pattern&quot;&gt;&lt;code&gt;Pattern&lt;/code&gt;&lt;/a&gt; trait if the pattern supports searching for it from the back.</source>
          <target state="translated">それは、関連することで実現される&lt;a href=&quot;trait.searcher&quot;&gt; &lt;code&gt;Searcher&lt;/code&gt; &lt;/a&gt;の種類の&lt;a href=&quot;trait.pattern&quot;&gt; &lt;code&gt;Pattern&lt;/code&gt; &lt;/a&gt;パターンがサポート後ろからそれを探している場合、形質。</target>
        </trans-unit>
        <trans-unit id="01c79069ef32a54734e3b8b3c591b459a403a4fa" translate="yes" xml:space="preserve">
          <source>It will be implemented by associated &lt;code&gt;Searcher&lt;/code&gt; types of the &lt;a href=&quot;trait.pattern&quot;&gt;&lt;code&gt;Pattern&lt;/code&gt;&lt;/a&gt; trait.</source>
          <target state="translated">これは、&lt;a href=&quot;trait.pattern&quot;&gt; &lt;code&gt;Pattern&lt;/code&gt; &lt;/a&gt;特性の関連する &lt;code&gt;Searcher&lt;/code&gt; タイプによって実装されます。</target>
        </trans-unit>
        <trans-unit id="ea8e67a12d7988664bc05e18e9798989cd3eb135" translate="yes" xml:space="preserve">
          <source>It will be implemented by associated &lt;code&gt;Searcher&lt;/code&gt; types of the &lt;code&gt;Pattern&lt;/code&gt; trait if the pattern supports searching for it from the back.</source>
          <target state="translated">それは、関連することで実現される &lt;code&gt;Searcher&lt;/code&gt; の種類の &lt;code&gt;Pattern&lt;/code&gt; パターンがサポート後ろからそれを探している場合、形質。</target>
        </trans-unit>
        <trans-unit id="9f81a8ca5067c3c3b4399b6129a830805c0cc0ff" translate="yes" xml:space="preserve">
          <source>It will be implemented by associated &lt;code&gt;Searcher&lt;/code&gt; types of the &lt;code&gt;Pattern&lt;/code&gt; trait.</source>
          <target state="translated">&lt;code&gt;Pattern&lt;/code&gt; トレイトの関連する &lt;code&gt;Searcher&lt;/code&gt; タイプによって実装されます。</target>
        </trans-unit>
        <trans-unit id="6ec53dce211a7944d162428d571097183435ce6f" translate="yes" xml:space="preserve">
          <source>It will drop down as close as possible to the length but the allocator may still inform the &lt;code&gt;VecDeque&lt;/code&gt; that there is space for a few more elements.</source>
          <target state="translated">できるだけ長さに近くなるようにドロップダウンしますが、アロケータはさらにいくつかの要素のためのスペースがあることを &lt;code&gt;VecDeque&lt;/code&gt; に通知する場合があります。</target>
        </trans-unit>
        <trans-unit id="5d0e16f9adb2110bbd3e927ea4577168391e9b74" translate="yes" xml:space="preserve">
          <source>It will drop down as close as possible to the length but the allocator may still inform the vector that there is space for a few more elements.</source>
          <target state="translated">これは可能な限り長さに近づけてドロップダウンしますが、アロケータはまだいくつかの要素のためのスペースがあることをベクトルに通知するかもしれません。</target>
        </trans-unit>
        <trans-unit id="583613916c43b1fe106e05c39ca4ce6da47ce68b" translate="yes" xml:space="preserve">
          <source>It will never return &lt;a href=&quot;../../../option/enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../../option/enum.option#variant.None&quot;&gt; &lt;code&gt;None&lt;/code&gt; を&lt;/a&gt;返すことはありません。</target>
        </trans-unit>
        <trans-unit id="38d1d8fbd49b71b116c5d704cf7c49ee955c939a" translate="yes" xml:space="preserve">
          <source>It would also be appropriate to call &lt;code&gt;unwrap&lt;/code&gt; when you have some other logic that ensures the &lt;code&gt;Result&lt;/code&gt; will have an &lt;code&gt;Ok&lt;/code&gt; value, but the logic isn&amp;rsquo;t something the compiler understands. You&amp;rsquo;ll still have a &lt;code&gt;Result&lt;/code&gt; value that you need to handle: whatever operation you&amp;rsquo;re calling still has the possibility of failing in general, even though it&amp;rsquo;s logically impossible in your particular situation. If you can ensure by manually inspecting the code that you&amp;rsquo;ll never have an &lt;code&gt;Err&lt;/code&gt; variant, it&amp;rsquo;s perfectly acceptable to call &lt;code&gt;unwrap&lt;/code&gt;. Here&amp;rsquo;s an example:</source>
          <target state="translated">&lt;code&gt;Result&lt;/code&gt; に &lt;code&gt;Ok&lt;/code&gt; 値が含まれることを保証する他のロジックがある場合に &lt;code&gt;unwrap&lt;/code&gt; を呼び出すことも適切ですが、そのロジックはコンパイラーが理解するものではありません。処理する必要のある &lt;code&gt;Result&lt;/code&gt; 値は引き続き存在します。特定の状況では論理的に不可能であるとしても、呼び出す操作は一般的に失敗する可能性があります。コードを手動で検査して、 &lt;code&gt;Err&lt;/code&gt; バリアントがないことを確認できる場合は、 &lt;code&gt;unwrap&lt;/code&gt; を呼び出してもまったく問題ありません。次に例を示します。</target>
        </trans-unit>
        <trans-unit id="281e22ba57501fc7d3d70b8f1f8f4bfbc5dcf1a5" translate="yes" xml:space="preserve">
          <source>It would make it more difficult for unsafe code to correctly manipulate a &lt;code&gt;Vec&lt;/code&gt;. The contents of a &lt;code&gt;Vec&lt;/code&gt; wouldn't have a stable address if it were only moved, and it would be more difficult to determine if a &lt;code&gt;Vec&lt;/code&gt; had actually allocated memory.</source>
          <target state="translated">安全でないコードが &lt;code&gt;Vec&lt;/code&gt; を正しく操作するのがより困難になります。 &lt;code&gt;Vec&lt;/code&gt; が移動されただけの場合、Vecのコンテンツは安定したアドレスを持たず、 &lt;code&gt;Vec&lt;/code&gt; が実際にメモリを割り当てたかどうかを判断することはより困難です。</target>
        </trans-unit>
        <trans-unit id="8927c51bfbab721165d17b97848a237b8ec4da60" translate="yes" xml:space="preserve">
          <source>It would penalize the general case, incurring an additional branch on every access.</source>
          <target state="translated">それは一般的なケースにペナルティを与えることになり、アクセスのたびに追加のブランチが発生します。</target>
        </trans-unit>
        <trans-unit id="0a1ec3ed4f97e53ed39cbe77eeb33099668d0775" translate="yes" xml:space="preserve">
          <source>It wouldn't work. This is because the size of a &lt;code&gt;List&lt;/code&gt; depends on how many elements are in the list, and so we don't know how much memory to allocate for a &lt;code&gt;Cons&lt;/code&gt;. By introducing a &lt;a href=&quot;struct.box&quot;&gt;&lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;, which has a defined size, we know how big &lt;code&gt;Cons&lt;/code&gt; needs to be.</source>
          <target state="translated">それはうまくいきません。これは、 &lt;code&gt;List&lt;/code&gt; のサイズがリスト内の要素の数に依存するため、 &lt;code&gt;Cons&lt;/code&gt; に割り当てるメモリの量がわからないためです。サイズが定義されている&lt;a href=&quot;struct.box&quot;&gt; &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; &lt;/a&gt;導入することで、 &lt;code&gt;Cons&lt;/code&gt; 大きさがわかります。</target>
        </trans-unit>
        <trans-unit id="f6be8378a582020df10360545b9470cc00244ca7" translate="yes" xml:space="preserve">
          <source>It wouldn't work. This is because the size of a &lt;code&gt;List&lt;/code&gt; depends on how many elements are in the list, and so we don't know how much memory to allocate for a &lt;code&gt;Cons&lt;/code&gt;. By introducing a &lt;code&gt;Box&lt;/code&gt;, which has a defined size, we know how big &lt;code&gt;Cons&lt;/code&gt; needs to be.</source>
          <target state="translated">それはうまくいきません。これは、 &lt;code&gt;List&lt;/code&gt; のサイズがリスト内の要素の数に依存するため、 &lt;code&gt;Cons&lt;/code&gt; に割り当てるメモリの量がわからないためです。サイズが定義されている &lt;code&gt;Box&lt;/code&gt; を導入することで、 &lt;code&gt;Cons&lt;/code&gt; 大きさがどれほど必要かがわかります。</target>
        </trans-unit>
        <trans-unit id="a4998da21c6a9914c8ce4ea9184bccf6c0873e7d" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;d be nice to be able to print an instance of &lt;code&gt;Rectangle&lt;/code&gt; while we&amp;rsquo;re debugging our program and see the values for all its fields. Listing 5-11 tries using the &lt;code&gt;println!&lt;/code&gt; macro as we have used in previous chapters. This won&amp;rsquo;t work, however.</source>
          <target state="translated">プログラムをデバッグし、そのすべてのフィールドの値を確認している間に、 &lt;code&gt;Rectangle&lt;/code&gt; のインスタンスを印刷できると便利です。リスト5-11は &lt;code&gt;println!&lt;/code&gt; 前の章で使用したマクロ。ただし、これは機能しません。</target>
        </trans-unit>
        <trans-unit id="9fd4ff89cd3ed9767f9bb50021655606612821c0" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s a panoply of Rust features with something for everyone! Let&amp;rsquo;s dive in!</source>
          <target state="translated">これは、Rustの機能の総称であり、誰にとっても便利です。飛び込もう！</target>
        </trans-unit>
        <trans-unit id="2f4a91582fca2b4ddf611bb05db0236c35e6a95d" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s advisable to have your code panic when it&amp;rsquo;s possible that your code could end up in a bad state. In this context, a &lt;em&gt;bad state&lt;/em&gt; is when some assumption, guarantee, contract, or invariant has been broken, such as when invalid values, contradictory values, or missing values are passed to your code&amp;mdash;plus one or more of the following:</source>
          <target state="translated">コードが悪い状態になる可能性がある場合は、コードをパニックにすることをお勧めします。このコンテキストでは、&lt;em&gt;不正な状態&lt;/em&gt;とは、無効な値、矛盾する値、欠損値がコードに渡された場合など、何らかの仮定、保証、契約、または不変条件が破られた場合であり、さらに次の1つ以上が含まれます。</target>
        </trans-unit>
        <trans-unit id="1d4af836f0cd460a3ac351996453b851549fe52a" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s also worth noting that the condition in this code &lt;em&gt;must&lt;/em&gt; be a &lt;code&gt;bool&lt;/code&gt;. If the condition isn&amp;rsquo;t a &lt;code&gt;bool&lt;/code&gt;, we&amp;rsquo;ll get an error. For example, try running the following code:</source>
          <target state="translated">このコードの条件は &lt;code&gt;bool&lt;/code&gt; で&lt;em&gt;なければならない&lt;/em&gt;ことにも注意する価値が&lt;em&gt;あり&lt;/em&gt;ます。条件が &lt;code&gt;bool&lt;/code&gt; ではない場合、エラーが発生します。たとえば、次のコードを実行してみてください。</target>
        </trans-unit>
        <trans-unit id="d52fc1028632f974c83efdc9f4200e35b249610e" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s been a long journey, but we&amp;rsquo;ve reached the end of the book. In this chapter, we&amp;rsquo;ll build one more project together to demonstrate some of the concepts we covered in the final chapters, as well as recap some earlier lessons.</source>
          <target state="translated">長い旅でしたが、本の終わりに達しました。この章では、最後の章で取り上げたいくつかの概念を示すために、もう1つのプロジェクトを一緒に構築し、以前のいくつかのレッスンを要約します。</target>
        </trans-unit>
        <trans-unit id="1024ef58107465d0b2d166ab80e88f189d22f3a3" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s common to check whether a particular key has a value and, if it doesn&amp;rsquo;t, insert a value for it. Hash maps have a special API for this called &lt;code&gt;entry&lt;/code&gt; that takes the key you want to check as a parameter. The return value of the &lt;code&gt;entry&lt;/code&gt; method is an enum called &lt;code&gt;Entry&lt;/code&gt; that represents a value that might or might not exist. Let&amp;rsquo;s say we want to check whether the key for the Yellow team has a value associated with it. If it doesn&amp;rsquo;t, we want to insert the value 50, and the same for the Blue team. Using the &lt;code&gt;entry&lt;/code&gt; API, the code looks like Listing 8-25.</source>
          <target state="translated">特定のキーに値があるかどうかを確認し、ない場合は値を挿入するのが一般的です。ハッシュマップには、この呼び出された &lt;code&gt;entry&lt;/code&gt; 用の特別なAPI があり、チェックするキーをパラメーターとして受け取ります。 &lt;code&gt;entry&lt;/code&gt; メソッドの戻り値は &lt;code&gt;Entry&lt;/code&gt; と呼ばれる列挙型であり、存在する場合と存在しない場合がある値を表します。 Yellowチームのキーに値が関連付けられているかどうかを確認するとします。そうでない場合は、値50を挿入します。Blueチームも同じです。 &lt;code&gt;entry&lt;/code&gt; API を使用すると、コードはリスト8-25のようになります。</target>
        </trans-unit>
        <trans-unit id="b254f401bbc453696a95036f25cc6c8b9f205677" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s important that we get compile-time errors when we attempt to change a value that we previously designated as immutable because this very situation can lead to bugs. If one part of our code operates on the assumption that a value will never change and another part of our code changes that value, it&amp;rsquo;s possible that the first part of the code won&amp;rsquo;t do what it was designed to do. The cause of this kind of bug can be difficult to track down after the fact, especially when the second piece of code changes the value only &lt;em&gt;sometimes&lt;/em&gt;.</source>
          <target state="translated">以前は不変として指定した値を変更しようとすると、コンパイル時にエラーが発生することが重要です。これは、まさにこの状況がバグにつながる可能性があるためです。コードの一部が値が変更されないことを前提に動作し、コードの別の部分がその値を変更する場合、コードの最初の部分が意図したとおりに動作しない可能性があります。この種のバグの原因は、特に2番目のコードが&lt;em&gt;時々&lt;/em&gt;しか値を変更しない場合は特に、事後に追跡するのが難しい場合が&lt;em&gt;あり&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="9ed2c9ced3e236750c87d43ad1072d6e0ed07bbb" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s important to understand that &lt;code&gt;unsafe&lt;/code&gt; doesn&amp;rsquo;t turn off the borrow checker or disable any other of Rust&amp;rsquo;s safety checks: if you use a reference in unsafe code, it will still be checked. The &lt;code&gt;unsafe&lt;/code&gt; keyword only gives you access to these five features that are then not checked by the compiler for memory safety. You&amp;rsquo;ll still get some degree of safety inside of an unsafe block.</source>
          <target state="translated">&lt;code&gt;unsafe&lt;/code&gt; は、ボローチェッカーをオフにしたり、Rustの他の安全チェックを無効にしたりしないことを理解することが重要です。安全でないコードで参照を使用しても、引き続きチェックされます。 &lt;code&gt;unsafe&lt;/code&gt; キーワードは、あなたに、メモリ安全性のために、コンパイラによってチェックされないこれらの5つの機能へのアクセスを提供します。安全でないブロックの内部では、ある程度の安全性が得られます。</target>
        </trans-unit>
        <trans-unit id="8cdb0b8313d7ae007e7e125bdfd991a30a8e291c" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s important to understand that &lt;code&gt;unsafe&lt;/code&gt; doesn&amp;rsquo;t turn off the borrow checker or disable any other of Rust&amp;rsquo;s safety checks: if you use a reference in unsafe code, it will still be checked. The &lt;code&gt;unsafe&lt;/code&gt; keyword only gives you access to these four features that are then not checked by the compiler for memory safety. You&amp;rsquo;ll still get some degree of safety inside of an unsafe block.</source>
          <target state="translated">&lt;code&gt;unsafe&lt;/code&gt; がボローチェッカーをオフにしたり、他のRustの安全性チェックを無効にしたりしないことを理解することが重要です。安全でないコードで参照を使用しても、チェックは引き続き行われます。 &lt;code&gt;unsafe&lt;/code&gt; キーワードは、あなたに、メモリ安全性のために、コンパイラによってチェックされないこれら四つの機能へのアクセスを提供します。安全でないブロック内でも、ある程度の安全性は確保されます。</target>
        </trans-unit>
        <trans-unit id="8deea23b26cb7cf37f9d9061e806bcfc7feaa092" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s impossible for Rust to determine how many values in the tuple to ignore before matching a value with &lt;code&gt;second&lt;/code&gt; and then how many further values to ignore thereafter. This code could mean that we want to ignore &lt;code&gt;2&lt;/code&gt;, bind &lt;code&gt;second&lt;/code&gt; to &lt;code&gt;4&lt;/code&gt;, and then ignore &lt;code&gt;8&lt;/code&gt;, &lt;code&gt;16&lt;/code&gt;, and &lt;code&gt;32&lt;/code&gt;; or that we want to ignore &lt;code&gt;2&lt;/code&gt; and &lt;code&gt;4&lt;/code&gt;, bind &lt;code&gt;second&lt;/code&gt; to &lt;code&gt;8&lt;/code&gt;, and then ignore &lt;code&gt;16&lt;/code&gt; and &lt;code&gt;32&lt;/code&gt;; and so forth. The variable name &lt;code&gt;second&lt;/code&gt; doesn&amp;rsquo;t mean anything special to Rust, so we get a compiler error because using &lt;code&gt;..&lt;/code&gt; in two places like this is ambiguous.</source>
          <target state="translated">Rustが、タプル内の値を &lt;code&gt;second&lt;/code&gt; 値と照合する前に無視する値の数を決定し、その後、その後無視する値の数を決定することは不可能です。このコードは、我々が無視することを意味する可能性がある &lt;code&gt;2&lt;/code&gt; 、バインド &lt;code&gt;second&lt;/code&gt; に &lt;code&gt;4&lt;/code&gt; を無視し、その後、および &lt;code&gt;8&lt;/code&gt; 、 &lt;code&gt;16&lt;/code&gt; 、および &lt;code&gt;32&lt;/code&gt; を、または、 &lt;code&gt;2&lt;/code&gt; と &lt;code&gt;4&lt;/code&gt; を無視し、2 &lt;code&gt;second&lt;/code&gt; に &lt;code&gt;8&lt;/code&gt; にバインドしてから、 &lt;code&gt;16&lt;/code&gt; と &lt;code&gt;32&lt;/code&gt; を無視したい場合。など。変数名の &lt;code&gt;second&lt;/code&gt; は、Rustにとって特別な意味を持たないため、 &lt;code&gt;..&lt;/code&gt; を使用しているためにコンパイラエラーが発生します。 このような2つの場所があいまいです。</target>
        </trans-unit>
        <trans-unit id="b30b0ad80edd47c563a2e1776ed2c849ecd649e3" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s often useful for a program to evaluate a condition within a loop. While the condition is true, the loop runs. When the condition ceases to be true, the program calls &lt;code&gt;break&lt;/code&gt;, stopping the loop. This loop type could be implemented using a combination of &lt;code&gt;loop&lt;/code&gt;, &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;else&lt;/code&gt;, and &lt;code&gt;break&lt;/code&gt;; you could try that now in a program, if you&amp;rsquo;d like.</source>
          <target state="translated">プログラムがループ内の条件を評価することは、しばしば役に立ちます。条件が真の間、ループが実行されます。条件がtrueでなくなると、プログラムは &lt;code&gt;break&lt;/code&gt; を呼び出してループを停止します。このループタイプは、 &lt;code&gt;loop&lt;/code&gt; 、 &lt;code&gt;if&lt;/code&gt; 、 &lt;code&gt;else&lt;/code&gt; 、 &lt;code&gt;break&lt;/code&gt; の組み合わせを使用して実装できます。必要に応じて、プログラムでそれを試すことができます。</target>
        </trans-unit>
        <trans-unit id="2a4b6828f8495332d03de5c3d6e1db7c761b6380" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s often useful to create a new instance of a struct that uses most of an old instance&amp;rsquo;s values but changes some. You&amp;rsquo;ll do this using &lt;em&gt;struct update syntax&lt;/em&gt;.</source>
          <target state="translated">多くの場合、古いインスタンスの値のほとんどを使用し、一部を変更する構造体の新しいインスタンスを作成すると便利です。これは&lt;em&gt;struct update syntax&lt;/em&gt;を使用して行い&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="723b901f30cea9edf0e74e2f7413d0b6d6d9f846" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s often useful to execute a block of code more than once. For this task, Rust provides several &lt;em&gt;loops&lt;/em&gt;. A loop runs through the code inside the loop body to the end and then starts immediately back at the beginning. To experiment with loops, let&amp;rsquo;s make a new project called &lt;em&gt;loops&lt;/em&gt;.</source>
          <target state="translated">多くの場合、コードのブロックを複数回実行すると便利です。このタスクのために、Rustはいくつかの&lt;em&gt;ループを&lt;/em&gt;提供し&lt;em&gt;ます&lt;/em&gt;。ループは、ループ本体内のコードを最後まで実行し、すぐに最初から開始します。ループを試すために、のは、新しいプロジェクトと呼ばれる作ろう&lt;em&gt;ループを&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="753665469cbfa717250694f7de09ac1968d71cfc" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s possible for structs to store references to data owned by something else, but to do so requires the use of &lt;em&gt;lifetimes&lt;/em&gt;, a Rust feature that we&amp;rsquo;ll discuss in Chapter 10. Lifetimes ensure that the data referenced by a struct is valid for as long as the struct is. Let&amp;rsquo;s say you try to store a reference in a struct without specifying lifetimes, like this, which won&amp;rsquo;t work:</source>
          <target state="translated">構造体が別のものによって所有されているデータへの参照を格納することは可能ですが、これを行うには、第10章で説明するRust機能である&lt;em&gt;ライフタイムを&lt;/em&gt;使用する必要があります。構造体はそうです。次のように、ライフタイムを指定せずに構造体に参照を保存しようとすると、機能しません。</target>
        </trans-unit>
        <trans-unit id="1330d73ba4baef219cde7c8056164e7a0d0b3b12" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s possible to return multiple values using a tuple, as shown in Listing 4-5.</source>
          <target state="translated">リスト4-5で示されるように、タプルを使用して複数の値を返すことが可能です。</target>
        </trans-unit>
        <trans-unit id="dd54062a6d4a18f88f50f4130b2d691d87e7c906" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s useful to discuss strings in the context of collections because strings are implemented as a collection of bytes, plus some methods to provide useful functionality when those bytes are interpreted as text. In this section, we&amp;rsquo;ll talk about the operations on &lt;code&gt;String&lt;/code&gt; that every collection type has, such as creating, updating, and reading. We&amp;rsquo;ll also discuss the ways in which &lt;code&gt;String&lt;/code&gt; is different from the other collections, namely how indexing into a &lt;code&gt;String&lt;/code&gt; is complicated by the differences between how people and computers interpret &lt;code&gt;String&lt;/code&gt; data.</source>
          <target state="translated">文字列はバイトのコレクションとして実装されているため、コレクションのコンテキストで文字列を説明することは便利です。また、これらのバイトがテキストとして解釈されるときに便利な機能を提供するいくつかのメソッドもあります。このセクションでは、作成、更新、読み取りなど、すべてのコレクション型が持つ &lt;code&gt;String&lt;/code&gt; の操作について説明します。また、 &lt;code&gt;String&lt;/code&gt; が他のコレクションと異なる点、つまり、人とコンピュータが &lt;code&gt;String&lt;/code&gt; データを解釈する方法の違いにより、 &lt;code&gt;String&lt;/code&gt; へのインデックス付けがどのように複雑になるかについても説明します。</target>
        </trans-unit>
        <trans-unit id="08a5c61453f5e990492626e9bb6d14bf2f43a9aa" translate="yes" xml:space="preserve">
          <source>It's also important to note that the Rust compiler can generally determine the lifetime by itself. Example:</source>
          <target state="translated">また、Rust コンパイラが一般的に自分でライフタイムを決めることができることにも注意が必要です。例を挙げてみます。</target>
        </trans-unit>
        <trans-unit id="33ba7241cc90a10e5fee095fa049c987fe61e308" translate="yes" xml:space="preserve">
          <source>It's common for people who haven't used iterators a lot to use a &lt;code&gt;for&lt;/code&gt; loop with a list of things to build up a result. Those can be turned into &lt;code&gt;fold()&lt;/code&gt;s:</source>
          <target state="translated">イテレータをあまり使用していない人は、 &lt;code&gt;for&lt;/code&gt; ループを使用して結果のリストを作成するのが一般的です。それらは &lt;code&gt;fold()&lt;/code&gt; に変換できます：</target>
        </trans-unit>
        <trans-unit id="ba017d93d6349943ce3ed0d06f842a0f9c987ffa" translate="yes" xml:space="preserve">
          <source>It's common to instead use destructuring on the argument to strip away one:</source>
          <target state="translated">代わりに引数にデストラクチャリングを使って1つを剥ぎ取るのが一般的です。</target>
        </trans-unit>
        <trans-unit id="891a671848c4a682fb142edcf82798dab7b0cc3f" translate="yes" xml:space="preserve">
          <source>It's frequently the case that there's no value needed with &lt;code&gt;Continue&lt;/code&gt;, so this provides a way to avoid typing &lt;code&gt;(())&lt;/code&gt;, if you prefer it.</source>
          <target state="translated">[ &lt;code&gt;Continue&lt;/code&gt; で値が不要になることがよくあるため、必要に応じて、 &lt;code&gt;(())&lt;/code&gt; の入力を回避する方法を提供します。</target>
        </trans-unit>
        <trans-unit id="686ffc7f644232912f8eff3ec52197d230c78db4" translate="yes" xml:space="preserve">
          <source>It's important to note that in these two examples, the only difference is whether you are allowed to access &lt;code&gt;x&lt;/code&gt; after the assignment. Under the hood, both a copy and a move can result in bits being copied in memory, although this is sometimes optimized away.</source>
          <target state="translated">これらの2つの例では、唯一の違いは、割り当て後に &lt;code&gt;x&lt;/code&gt; へのアクセスが許可されているかどうかに注意することが重要です。内部的には、コピーと移動の両方でメモリ内にビットがコピーされる可能性がありますが、これは最適化されることもあります。</target>
        </trans-unit>
        <trans-unit id="bf0d2bc6515048c1222c1faf89f4b7dfbf926400" translate="yes" xml:space="preserve">
          <source>It's important to remember that &lt;a href=&quot;../char/index&quot;&gt;&lt;code&gt;char&lt;/code&gt;&lt;/a&gt; represents a Unicode Scalar Value, and may not match your idea of what a 'character' is. Iteration over grapheme clusters may be what you actually want.</source>
          <target state="translated">&lt;a href=&quot;../char/index&quot;&gt; &lt;code&gt;char&lt;/code&gt; &lt;/a&gt;はUnicodeスカラー値を表し、「文字」が何であるかについてのあなたの考えと一致しない可能性があることを覚えておくことは重要です。書記素クラスターの反復は、実際に必要な場合があります。</target>
        </trans-unit>
        <trans-unit id="a89bf255278a9fcad7529f6bfd4c6a49b45cb147" translate="yes" xml:space="preserve">
          <source>It's important to remember that &lt;a href=&quot;../primitive.char&quot;&gt;&lt;code&gt;char&lt;/code&gt;&lt;/a&gt; represents a Unicode Scalar Value, and may not match your idea of what a 'character' is. Iteration over grapheme clusters may be what you actually want. This functionality is not provided by Rust's standard library, check crates.io instead.</source>
          <target state="translated">&lt;a href=&quot;../primitive.char&quot;&gt; &lt;code&gt;char&lt;/code&gt; &lt;/a&gt;はUnicodeスカラー値を表し、「文字」が何であるかについてのあなたの考えと一致しない可能性があることを覚えておくことが重要です。書記素クラスターの反復は、実際に必要な場合があります。この機能はRustの標準ライブラリでは提供されていません。代わりにcrates.ioを確認してください。</target>
        </trans-unit>
        <trans-unit id="a4da28ef521125e0c1be74a0e5b5fccf5a9444a6" translate="yes" xml:space="preserve">
          <source>It's important to remember that &lt;a href=&quot;char/index&quot;&gt;&lt;code&gt;char&lt;/code&gt;&lt;/a&gt; represents a Unicode Scalar Value, and may not match your idea of what a 'character' is. Iteration over grapheme clusters may be what you actually want.</source>
          <target state="translated">&lt;a href=&quot;char/index&quot;&gt; &lt;code&gt;char&lt;/code&gt; &lt;/a&gt;はUnicodeスカラー値を表し、「文字」が何であるかについてのあなたの考えと一致しない可能性があることを覚えておくことは重要です。書記素クラスターの反復は、実際に必要な場合があります。</target>
        </trans-unit>
        <trans-unit id="21dabe83c3c9b91d37de871b20d8a3fe9aea8d87" translate="yes" xml:space="preserve">
          <source>It's important to remember that &lt;a href=&quot;primitive.char&quot;&gt;&lt;code&gt;char&lt;/code&gt;&lt;/a&gt; represents a Unicode Scalar Value, and may not match your idea of what a 'character' is. Iteration over grapheme clusters may be what you actually want. This functionality is not provided by Rust's standard library, check crates.io instead.</source>
          <target state="translated">&lt;a href=&quot;primitive.char&quot;&gt; &lt;code&gt;char&lt;/code&gt; &lt;/a&gt;はUnicodeスカラー値を表し、「文字」が何であるかについてのあなたの考えと一致しない可能性があることを覚えておくことが重要です。書記素クラスターの反復は、実際に必要な場合があります。この機能はRustの標準ライブラリでは提供されていません。代わりにcrates.ioを確認してください。</target>
        </trans-unit>
        <trans-unit id="34560c82a9fb0dc71d1acee3f7d70c175383bc7b" translate="yes" xml:space="preserve">
          <source>It's invalid to directly import methods belonging to a trait or concrete type.</source>
          <target state="translated">traitや具象型に属するメソッドを直接インポートすることは無効です。</target>
        </trans-unit>
        <trans-unit id="c4ea1a04986d9525398a48411915463d79b08630" translate="yes" xml:space="preserve">
          <source>It's more common for &lt;code&gt;inspect()&lt;/code&gt; to be used as a debugging tool than to exist in your final code, but applications may find it useful in certain situations when errors need to be logged before being discarded.</source>
          <target state="translated">最終的なコードに存在するよりも、 &lt;code&gt;inspect()&lt;/code&gt; をデバッグツールとして使用する方が一般的ですが、アプリケーションは、破棄する前にエラーをログに記録する必要がある特定の状況で役立つ場合があります。</target>
        </trans-unit>
        <trans-unit id="2f6fd4d024f3a27229b0326aaec954fc7e7267f9" translate="yes" xml:space="preserve">
          <source>It's only possible to directly instantiate a struct using struct literal syntax when all of its fields are visible to you.</source>
          <target state="translated">構造体リテラル構文を使用して構造体を直接インスタンス化できるのは、構造体のすべてのフィールドが表示されている場合のみです。</target>
        </trans-unit>
        <trans-unit id="bc2a391a320094b486e218290333929f21b82924" translate="yes" xml:space="preserve">
          <source>It's undefined behavior if global allocators unwind. This restriction may be lifted in the future, but currently a panic from any of these functions may lead to memory unsafety.</source>
          <target state="translated">グローバルアロケータがアンワインドした場合の動作は未定義です。この制限は将来的には解除されるかもしれませんが、現在のところ、これらの関数のいずれかがパニックを起こすと、メモリの安全性が損なわれる可能性があります。</target>
        </trans-unit>
        <trans-unit id="90d66c69bdab0c4f62a7abada1a3e2fdee354d75" translate="yes" xml:space="preserve">
          <source>It's very common then to put a &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; inside shared pointer types to reintroduce mutability:</source>
          <target state="translated">&lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; を再導入するために、共有セル型の内部にRefCell &amp;lt;T&amp;gt;を配置することは非常に一般的です。</target>
        </trans-unit>
        <trans-unit id="21df73947a06d77d2ad5fe166c8ddfcdc53a6fdb" translate="yes" xml:space="preserve">
          <source>Italiano</source>
          <target state="translated">Italiano</target>
        </trans-unit>
        <trans-unit id="1927b99b7203a5d61bb78b1a858edbf1a4446227" translate="yes" xml:space="preserve">
          <source>Item declarations</source>
          <target state="translated">項目宣言</target>
        </trans-unit>
        <trans-unit id="052ff2f8a72886a3883816a6bea2ff5da9ae8dcc" translate="yes" xml:space="preserve">
          <source>Item visibility</source>
          <target state="translated">アイテムの視認性</target>
        </trans-unit>
        <trans-unit id="44d25b5d1b6d98c7d090ca3609aca11ae2815fa0" translate="yes" xml:space="preserve">
          <source>Items</source>
          <target state="translated">Items</target>
        </trans-unit>
        <trans-unit id="e94f4a33f00d601e0668e3316c1f5baec10b371b" translate="yes" xml:space="preserve">
          <source>Items are entirely determined at compile-time, generally remain fixed during execution, and may reside in read-only memory.</source>
          <target state="translated">アイテムはコンパイル時に完全に決定され、一般的には実行時に固定されたままであり、読み取り専用メモリに存在する可能性があります。</target>
        </trans-unit>
        <trans-unit id="d65bc9662d384da5396d0c23266596b91dc5d76b" translate="yes" xml:space="preserve">
          <source>Items are missing in a trait implementation.</source>
          <target state="translated">形質の実装で項目が欠落しています。</target>
        </trans-unit>
        <trans-unit id="ddf93f2b738152017441b72f8223700a6c86d570" translate="yes" xml:space="preserve">
          <source>Items are missing in a trait implementation. Erroneous code example:</source>
          <target state="translated">形質の実装で項目が欠落しています。誤ったコード例。</target>
        </trans-unit>
        <trans-unit id="e8b3f0ebaa39e2f70c17e1cb57e9f0ef34b2a7cd" translate="yes" xml:space="preserve">
          <source>Items associated with a trait do not need to be defined in the trait, but they may be. If the trait provides a definition, then this definition acts as a default for any implementation which does not override it. If it does not, then any implementation must provide a definition.</source>
          <target state="translated">形質に関連付けられた項目は、形質の中で定義する必要はありませんが、定義することができます。形質が定義を提供している場合、その定義は、それをオーバーライドしない実装のデフォルトとして機能します。定義がない場合は、どの実装でも定義を提供しなければなりません。</target>
        </trans-unit>
        <trans-unit id="d525f8eb402a25c60f5c5ba9759986177ee5a851" translate="yes" xml:space="preserve">
          <source>Items can be imported without binding to a name by using an underscore with the form &lt;code&gt;use path as _&lt;/code&gt;. This is particularly useful to import a trait so that its methods may be used without importing the trait's symbol, for example if the trait's symbol may conflict with another symbol. Another example is to link an external crate without importing its name.</source>
          <target state="translated">アイテムを名前にバインドせずにインポートするには、フォームの &lt;code&gt;use path as _&lt;/code&gt; アンダースコアを使用します。これは、たとえば、特性のシンボルが別のシンボルと競合する可能性がある場合など、特性のシンボルをインポートせずにそのメソッドを使用できるように、特性をインポートする場合に特に便利です。別の例は、名前をインポートせずに外部クレートをリンクすることです。</target>
        </trans-unit>
        <trans-unit id="d80427c3d2c84e1095c0f47d752a2b536590da04" translate="yes" xml:space="preserve">
          <source>Items defined in a module or implementation have a &lt;em&gt;canonical path&lt;/em&gt; that corresponds to where within its crate it is defined. All other paths to these items are aliases. The canonical path is defined as a &lt;em&gt;path prefix&lt;/em&gt; appended by the path segment the item itself defines.</source>
          <target state="translated">モジュールまたは実装で定義されたアイテムには、そのクレート内で定義されている場所に対応する&lt;em&gt;正規パス&lt;/em&gt;があります。これらのアイテムへの他のすべてのパスはエイリアスです。正規パスは、アイテム自体が定義するパスセグメントによって追加される&lt;em&gt;パスプレフィックス&lt;/em&gt;として定義されます。</target>
        </trans-unit>
        <trans-unit id="dff50658b0fc9891bf43ec3aa222a12df699a4f5" translate="yes" xml:space="preserve">
          <source>Items inside functions are basically just like top-level items, except that they can only be used from the function they are in.</source>
          <target state="translated">関数内の項目は、基本的にはトップレベルの項目と同じですが、その中にある関数からしか使用できません。</target>
        </trans-unit>
        <trans-unit id="091b8d78ec3176b66348479ab0a7eba113756aa7" translate="yes" xml:space="preserve">
          <source>Iter</source>
          <target state="translated">Iter</target>
        </trans-unit>
        <trans-unit id="562356f4191fd96292159c9a51f1502a656a766d" translate="yes" xml:space="preserve">
          <source>Iter::all</source>
          <target state="translated">Iter::all</target>
        </trans-unit>
        <trans-unit id="598e9d1442d2d90b30d41f52dc9f35d312a9ea85" translate="yes" xml:space="preserve">
          <source>Iter::any</source>
          <target state="translated">Iter::any</target>
        </trans-unit>
        <trans-unit id="11c24b7b71f44b4c32bd475993cf94651f69ef7b" translate="yes" xml:space="preserve">
          <source>Iter::as_path</source>
          <target state="translated">Iter::as_path</target>
        </trans-unit>
        <trans-unit id="b00470be46e8b1319d806bf1fedc19612d599118" translate="yes" xml:space="preserve">
          <source>Iter::as_ref</source>
          <target state="translated">Iter::as_ref</target>
        </trans-unit>
        <trans-unit id="1c4a85c9060fc0533851d2ebb18b0944dec20504" translate="yes" xml:space="preserve">
          <source>Iter::as_slice</source>
          <target state="translated">Iter::as_slice</target>
        </trans-unit>
        <trans-unit id="cd753ac2ff5d2f5e373d6da3f28eb6cc4f4a12da" translate="yes" xml:space="preserve">
          <source>Iter::borrow</source>
          <target state="translated">Iter::borrow</target>
        </trans-unit>
        <trans-unit id="ccae721db6c0b80ead456e39e15a574d91f05503" translate="yes" xml:space="preserve">
          <source>Iter::borrow_mut</source>
          <target state="translated">Iter::borrow_mut</target>
        </trans-unit>
        <trans-unit id="9e9e1cc006a1a0c230f182d60dc3ae25867fa96b" translate="yes" xml:space="preserve">
          <source>Iter::by_ref</source>
          <target state="translated">Iter::by_ref</target>
        </trans-unit>
        <trans-unit id="40958308a6a00b30f0186ac470a90b4263782276" translate="yes" xml:space="preserve">
          <source>Iter::chain</source>
          <target state="translated">Iter::chain</target>
        </trans-unit>
        <trans-unit id="a16e2afb6a204e2c61484cc43715d2838e449cea" translate="yes" xml:space="preserve">
          <source>Iter::clone</source>
          <target state="translated">Iter::clone</target>
        </trans-unit>
        <trans-unit id="d33632634125b5bfb914d7696031de5e4050211f" translate="yes" xml:space="preserve">
          <source>Iter::clone_from</source>
          <target state="translated">Iter::clone_from</target>
        </trans-unit>
        <trans-unit id="c521a7d4341dba591b54fa4bc0805ada3d50f399" translate="yes" xml:space="preserve">
          <source>Iter::clone_into</source>
          <target state="translated">Iter::clone_into</target>
        </trans-unit>
        <trans-unit id="566bebbe7d115865fba84687df984d4d09e626cd" translate="yes" xml:space="preserve">
          <source>Iter::cloned</source>
          <target state="translated">Iter::cloned</target>
        </trans-unit>
        <trans-unit id="49fa3b568d34193bae851426004f13121d5dfbf5" translate="yes" xml:space="preserve">
          <source>Iter::cmp</source>
          <target state="translated">Iter::cmp</target>
        </trans-unit>
        <trans-unit id="8a894f2ab589ed2151abc86111334156ce8c99e0" translate="yes" xml:space="preserve">
          <source>Iter::collect</source>
          <target state="translated">Iter::collect</target>
        </trans-unit>
        <trans-unit id="d84a1dc76269ab42456219572352b77058751d5b" translate="yes" xml:space="preserve">
          <source>Iter::copied</source>
          <target state="translated">Iter::copied</target>
        </trans-unit>
        <trans-unit id="e3337214a7610ab020e239ae370944a464cce517" translate="yes" xml:space="preserve">
          <source>Iter::count</source>
          <target state="translated">Iter::count</target>
        </trans-unit>
        <trans-unit id="e2ed51e9cb2227202dee5fc9ebaab5c5c44fe8c9" translate="yes" xml:space="preserve">
          <source>Iter::cycle</source>
          <target state="translated">Iter::cycle</target>
        </trans-unit>
        <trans-unit id="b1eb95f6c453fe7f1cf4909e898eaf13d79e9e40" translate="yes" xml:space="preserve">
          <source>Iter::enumerate</source>
          <target state="translated">Iter::enumerate</target>
        </trans-unit>
        <trans-unit id="f2edb3630485a9830839e0b2bd5394c408a64499" translate="yes" xml:space="preserve">
          <source>Iter::eq</source>
          <target state="translated">Iter::eq</target>
        </trans-unit>
        <trans-unit id="f27a886f8dd8072bf872054aa4fa798de4583d5b" translate="yes" xml:space="preserve">
          <source>Iter::filter</source>
          <target state="translated">Iter::filter</target>
        </trans-unit>
        <trans-unit id="9f085b504d73e51e20340f0c14d7d3ec20d8c09e" translate="yes" xml:space="preserve">
          <source>Iter::filter_map</source>
          <target state="translated">Iter::filter_map</target>
        </trans-unit>
        <trans-unit id="482d391704ccfc6551b38406a5c7e4a07c0b7dc9" translate="yes" xml:space="preserve">
          <source>Iter::find</source>
          <target state="translated">Iter::find</target>
        </trans-unit>
        <trans-unit id="cf9a0662f2645651e697db323db99571753cf8fe" translate="yes" xml:space="preserve">
          <source>Iter::find_map</source>
          <target state="translated">Iter::find_map</target>
        </trans-unit>
        <trans-unit id="1afb3fc5d230f5ed3a998d62e9235b71e0c70e53" translate="yes" xml:space="preserve">
          <source>Iter::flat_map</source>
          <target state="translated">Iter::flat_map</target>
        </trans-unit>
        <trans-unit id="233b4826a12d699f0512cb0d95df19aaab9dd4ca" translate="yes" xml:space="preserve">
          <source>Iter::flatten</source>
          <target state="translated">Iter::flatten</target>
        </trans-unit>
        <trans-unit id="7f47a4f5f722efa8de94b21b465ada55ddfa53c5" translate="yes" xml:space="preserve">
          <source>Iter::fmt</source>
          <target state="translated">Iter::fmt</target>
        </trans-unit>
        <trans-unit id="2d150a20937e50aeb5fc3c33739f77c30ca57b98" translate="yes" xml:space="preserve">
          <source>Iter::fold</source>
          <target state="translated">Iter::fold</target>
        </trans-unit>
        <trans-unit id="9ee0b5e31b874c88b499b0f63ac35f2da29dcbb1" translate="yes" xml:space="preserve">
          <source>Iter::for_each</source>
          <target state="translated">Iter::for_each</target>
        </trans-unit>
        <trans-unit id="fb5570128f1baf2cde42d918eac6ebeb0e442ac8" translate="yes" xml:space="preserve">
          <source>Iter::from</source>
          <target state="translated">Iter::from</target>
        </trans-unit>
        <trans-unit id="840450e607dae83abf8fa2b370c6fb1be77c898b" translate="yes" xml:space="preserve">
          <source>Iter::fuse</source>
          <target state="translated">Iter::fuse</target>
        </trans-unit>
        <trans-unit id="23bdea91405b4acdaeed6b4d07b8c58d93cbd9ee" translate="yes" xml:space="preserve">
          <source>Iter::ge</source>
          <target state="translated">Iter::ge</target>
        </trans-unit>
        <trans-unit id="47e26389513b5fb9c312c18d98dfcb98e224fec9" translate="yes" xml:space="preserve">
          <source>Iter::gt</source>
          <target state="translated">Iter::gt</target>
        </trans-unit>
        <trans-unit id="ce4e0788e86ba75e4d44e53b0367cc1f2f04da63" translate="yes" xml:space="preserve">
          <source>Iter::inspect</source>
          <target state="translated">Iter::inspect</target>
        </trans-unit>
        <trans-unit id="84b381fb810d521e23ba1af41b818ce7d2699ac5" translate="yes" xml:space="preserve">
          <source>Iter::into</source>
          <target state="translated">Iter::into</target>
        </trans-unit>
        <trans-unit id="0ec8b2c7e9866e4932264828ae5ae53473579659" translate="yes" xml:space="preserve">
          <source>Iter::into_iter</source>
          <target state="translated">Iter::into_iter</target>
        </trans-unit>
        <trans-unit id="fef12e1b5037aa29137e1d32a9384c2c3b1a9d46" translate="yes" xml:space="preserve">
          <source>Iter::is_empty</source>
          <target state="translated">Iter::is_empty</target>
        </trans-unit>
        <trans-unit id="c845a405850165bfe2d3ee71bdc1256c40185ebf" translate="yes" xml:space="preserve">
          <source>Iter::is_sorted</source>
          <target state="translated">Iter::is_sorted</target>
        </trans-unit>
        <trans-unit id="12877f076c9cd1f4b18bb0043ef86e4ecaae9828" translate="yes" xml:space="preserve">
          <source>Iter::is_sorted_by</source>
          <target state="translated">Iter::is_sorted_by</target>
        </trans-unit>
        <trans-unit id="20997a51f1e8798fb3f3c383fb60434b3e8cb926" translate="yes" xml:space="preserve">
          <source>Iter::is_sorted_by_key</source>
          <target state="translated">Iter::is_sorted_by_key</target>
        </trans-unit>
        <trans-unit id="b86d7151989059491e48352d38e9c3a298578cd1" translate="yes" xml:space="preserve">
          <source>Iter::last</source>
          <target state="translated">Iter::last</target>
        </trans-unit>
        <trans-unit id="be8b408760eecdbf28c58c97d461c17d4700ffae" translate="yes" xml:space="preserve">
          <source>Iter::le</source>
          <target state="translated">Iter::le</target>
        </trans-unit>
        <trans-unit id="0c6655f000bb8d852e4c2ebc7d52bd9826150f55" translate="yes" xml:space="preserve">
          <source>Iter::len</source>
          <target state="translated">Iter::len</target>
        </trans-unit>
        <trans-unit id="f5f969c8865a706d946ba8d9640ca2c5a0bcf40e" translate="yes" xml:space="preserve">
          <source>Iter::lt</source>
          <target state="translated">Iter::lt</target>
        </trans-unit>
        <trans-unit id="bc0be7886235deb5cb7d836720591efa37538450" translate="yes" xml:space="preserve">
          <source>Iter::map</source>
          <target state="translated">Iter::map</target>
        </trans-unit>
        <trans-unit id="d7746cc600a78a4b80fd8b858ffaf0fe418f31a5" translate="yes" xml:space="preserve">
          <source>Iter::max</source>
          <target state="translated">Iter::max</target>
        </trans-unit>
        <trans-unit id="bdd59dfbd93f93e5159fb6bb4b959f6208971864" translate="yes" xml:space="preserve">
          <source>Iter::max_by</source>
          <target state="translated">Iter::max_by</target>
        </trans-unit>
        <trans-unit id="f2c43a9070f91fd7b274911cb1767f64abad6d73" translate="yes" xml:space="preserve">
          <source>Iter::max_by_key</source>
          <target state="translated">Iter::max_by_key</target>
        </trans-unit>
        <trans-unit id="4953889b3e4b5985acf4e330c37581c731343efb" translate="yes" xml:space="preserve">
          <source>Iter::min</source>
          <target state="translated">Iter::min</target>
        </trans-unit>
        <trans-unit id="a4a384bc464b64ebda76930693b161019c57569b" translate="yes" xml:space="preserve">
          <source>Iter::min_by</source>
          <target state="translated">Iter::min_by</target>
        </trans-unit>
        <trans-unit id="c1b4af4d4490229831ed89e5d2564fd1a077b311" translate="yes" xml:space="preserve">
          <source>Iter::min_by_key</source>
          <target state="translated">Iter::min_by_key</target>
        </trans-unit>
        <trans-unit id="16cc992c33d00ce5220249a5220c02b65f8e4e1b" translate="yes" xml:space="preserve">
          <source>Iter::ne</source>
          <target state="translated">Iter::ne</target>
        </trans-unit>
        <trans-unit id="5726d1319a6927ed8641e6153ccd76700e05b49d" translate="yes" xml:space="preserve">
          <source>Iter::next</source>
          <target state="translated">Iter::next</target>
        </trans-unit>
        <trans-unit id="73c0a4abe0cf04469092e41f4f2fe0440e2dba4e" translate="yes" xml:space="preserve">
          <source>Iter::next_back</source>
          <target state="translated">Iter::next_back</target>
        </trans-unit>
        <trans-unit id="71ecfc9eea70a0501cbf73f369a815090a015495" translate="yes" xml:space="preserve">
          <source>Iter::nth</source>
          <target state="translated">Iter::nth</target>
        </trans-unit>
        <trans-unit id="c585764b69dade897771dda3b24e4c7fa05c8894" translate="yes" xml:space="preserve">
          <source>Iter::nth_back</source>
          <target state="translated">Iter::nth_back</target>
        </trans-unit>
        <trans-unit id="f0d7a323f948a119f8ad33ad48acc983a8d68fd3" translate="yes" xml:space="preserve">
          <source>Iter::partial_cmp</source>
          <target state="translated">Iter::partial_cmp</target>
        </trans-unit>
        <trans-unit id="d508da27672fef4e1401a3134f511ffdb76349df" translate="yes" xml:space="preserve">
          <source>Iter::partition</source>
          <target state="translated">Iter::partition</target>
        </trans-unit>
        <trans-unit id="b7e23f6eab45233e924f47870e7155a7d93ac461" translate="yes" xml:space="preserve">
          <source>Iter::peekable</source>
          <target state="translated">Iter::peekable</target>
        </trans-unit>
        <trans-unit id="c6069463aa7c4524fc50e7f8524606571f2479a2" translate="yes" xml:space="preserve">
          <source>Iter::position</source>
          <target state="translated">Iter::position</target>
        </trans-unit>
        <trans-unit id="49a5d1c1b47f8042ecc9f92065cab6ee7c7e1cc2" translate="yes" xml:space="preserve">
          <source>Iter::product</source>
          <target state="translated">Iter::product</target>
        </trans-unit>
        <trans-unit id="226d371b07f791bdc3b75f6182aa99ed768f3c2f" translate="yes" xml:space="preserve">
          <source>Iter::rev</source>
          <target state="translated">Iter::rev</target>
        </trans-unit>
        <trans-unit id="0e61327392e92ba0988cedb744e914baec8d327a" translate="yes" xml:space="preserve">
          <source>Iter::rfind</source>
          <target state="translated">Iter::rfind</target>
        </trans-unit>
        <trans-unit id="436b05314063cdc717e75ffae43d2197b71db43d" translate="yes" xml:space="preserve">
          <source>Iter::rfold</source>
          <target state="translated">Iter::rfold</target>
        </trans-unit>
        <trans-unit id="ff90d1def598911fc5bfcb191f5cc4a07e4d1561" translate="yes" xml:space="preserve">
          <source>Iter::rposition</source>
          <target state="translated">Iter::rposition</target>
        </trans-unit>
        <trans-unit id="e85d8810cc5f5069c23f9a8039d15b9337b41c52" translate="yes" xml:space="preserve">
          <source>Iter::scan</source>
          <target state="translated">Iter::scan</target>
        </trans-unit>
        <trans-unit id="02418ffbb8d48f42372da15dae730f8a6afc35b5" translate="yes" xml:space="preserve">
          <source>Iter::size_hint</source>
          <target state="translated">Iter::size_hint</target>
        </trans-unit>
        <trans-unit id="4369939a1ce2e9f84ffb9bdab8e42a905e51bdaa" translate="yes" xml:space="preserve">
          <source>Iter::skip</source>
          <target state="translated">Iter::skip</target>
        </trans-unit>
        <trans-unit id="366d06ce202700d06e1162480b372fb9fe5f9f48" translate="yes" xml:space="preserve">
          <source>Iter::skip_while</source>
          <target state="translated">Iter::skip_while</target>
        </trans-unit>
        <trans-unit id="32cde76eb29f240c9e4df839757b9c8dee038962" translate="yes" xml:space="preserve">
          <source>Iter::step_by</source>
          <target state="translated">Iter::step_by</target>
        </trans-unit>
        <trans-unit id="17f9c830155902444763f7911cd38ce5759e0af8" translate="yes" xml:space="preserve">
          <source>Iter::sum</source>
          <target state="translated">Iter::sum</target>
        </trans-unit>
        <trans-unit id="dcb50b3349dc76f0b288cc8da46262ff9851d3ff" translate="yes" xml:space="preserve">
          <source>Iter::take</source>
          <target state="translated">Iter::take</target>
        </trans-unit>
        <trans-unit id="cde2481711540ccdcb763463f9a8e48ead5b8c11" translate="yes" xml:space="preserve">
          <source>Iter::take_while</source>
          <target state="translated">Iter::take_while</target>
        </trans-unit>
        <trans-unit id="7be8f868236c0bacde7fa60a245f689dbd73f4b1" translate="yes" xml:space="preserve">
          <source>Iter::to_owned</source>
          <target state="translated">Iter::to_owned</target>
        </trans-unit>
        <trans-unit id="a61b9bdc8bf2d65e849104ea9f9ddb34b2e438f1" translate="yes" xml:space="preserve">
          <source>Iter::try_fold</source>
          <target state="translated">Iter::try_fold</target>
        </trans-unit>
        <trans-unit id="a376d6605801d1f94fdc5bc8378bfb7d3bf0f291" translate="yes" xml:space="preserve">
          <source>Iter::try_for_each</source>
          <target state="translated">Iter::try_for_each</target>
        </trans-unit>
        <trans-unit id="4742b7e7ce2dc63b3cde1feac9ff7841b386d97b" translate="yes" xml:space="preserve">
          <source>Iter::try_from</source>
          <target state="translated">Iter::try_from</target>
        </trans-unit>
        <trans-unit id="305f66fe9d6f3bd4da9108c4fb964e6d3d7ae558" translate="yes" xml:space="preserve">
          <source>Iter::try_into</source>
          <target state="translated">Iter::try_into</target>
        </trans-unit>
        <trans-unit id="28e819d5eb5da6c1ca2f6898d2a9682f6bd3113c" translate="yes" xml:space="preserve">
          <source>Iter::try_rfold</source>
          <target state="translated">Iter::try_rfold</target>
        </trans-unit>
        <trans-unit id="5431b8f7a2f8d57a1b9712ca70970d17da1898b4" translate="yes" xml:space="preserve">
          <source>Iter::type_id</source>
          <target state="translated">Iter::type_id</target>
        </trans-unit>
        <trans-unit id="ba93aa487eb63805115eee9259cd946bbcc81dc7" translate="yes" xml:space="preserve">
          <source>Iter::unzip</source>
          <target state="translated">Iter::unzip</target>
        </trans-unit>
        <trans-unit id="2eb63393ea4d4a003b71033749175816e8e34fdf" translate="yes" xml:space="preserve">
          <source>Iter::zip</source>
          <target state="translated">Iter::zip</target>
        </trans-unit>
        <trans-unit id="685f18edffd1064c20f2b29242001a402ffdb3fc" translate="yes" xml:space="preserve">
          <source>IterMut</source>
          <target state="translated">IterMut</target>
        </trans-unit>
        <trans-unit id="d15ac12246998b60e4436683e1d97cc9ae701e03" translate="yes" xml:space="preserve">
          <source>IterMut::all</source>
          <target state="translated">IterMut::all</target>
        </trans-unit>
        <trans-unit id="c1e555b3dfd69f8056e360cb14a2a01feb0013e6" translate="yes" xml:space="preserve">
          <source>IterMut::any</source>
          <target state="translated">IterMut::any</target>
        </trans-unit>
        <trans-unit id="fbe3dac2bb3b890d1d56cbc2f3fa0126fa2d43e8" translate="yes" xml:space="preserve">
          <source>IterMut::as_slice</source>
          <target state="translated">IterMut::as_slice</target>
        </trans-unit>
        <trans-unit id="0a947d1a8be02e41fa37714da075d627e9a6d6da" translate="yes" xml:space="preserve">
          <source>IterMut::borrow</source>
          <target state="translated">IterMut::borrow</target>
        </trans-unit>
        <trans-unit id="f88bb4554293b88f8dc1c8bb69415e923325b965" translate="yes" xml:space="preserve">
          <source>IterMut::borrow_mut</source>
          <target state="translated">IterMut::borrow_mut</target>
        </trans-unit>
        <trans-unit id="48fa60a837a6bc036bd0c7d9497e19c4f719ec84" translate="yes" xml:space="preserve">
          <source>IterMut::by_ref</source>
          <target state="translated">IterMut::by_ref</target>
        </trans-unit>
        <trans-unit id="f5d9bc35cc15ce8be47292ce1998b21d7b90f454" translate="yes" xml:space="preserve">
          <source>IterMut::chain</source>
          <target state="translated">IterMut::chain</target>
        </trans-unit>
        <trans-unit id="4859f67bc45d1cfa5be5d41026dcf3b89772eceb" translate="yes" xml:space="preserve">
          <source>IterMut::cloned</source>
          <target state="translated">IterMut::cloned</target>
        </trans-unit>
        <trans-unit id="0680e13c44f187b2e2903bd2e1023ab5334923ea" translate="yes" xml:space="preserve">
          <source>IterMut::cmp</source>
          <target state="translated">IterMut::cmp</target>
        </trans-unit>
        <trans-unit id="a0e64fc534b3756ecdc15f5f8acaf539397a5145" translate="yes" xml:space="preserve">
          <source>IterMut::collect</source>
          <target state="translated">IterMut::collect</target>
        </trans-unit>
        <trans-unit id="95a4dd4c3dfd61737eaad683762b0bc7a7f9e7fc" translate="yes" xml:space="preserve">
          <source>IterMut::copied</source>
          <target state="translated">IterMut::copied</target>
        </trans-unit>
        <trans-unit id="5766f26143f5bcf6f3046a585e17bcfe339aad1e" translate="yes" xml:space="preserve">
          <source>IterMut::count</source>
          <target state="translated">IterMut::count</target>
        </trans-unit>
        <trans-unit id="b687092d76c8cc05745b7269130d0abfdaca355d" translate="yes" xml:space="preserve">
          <source>IterMut::cycle</source>
          <target state="translated">IterMut::cycle</target>
        </trans-unit>
        <trans-unit id="6d2db6ed0889c67bb6b498f2b3f67091fe29b968" translate="yes" xml:space="preserve">
          <source>IterMut::enumerate</source>
          <target state="translated">IterMut::enumerate</target>
        </trans-unit>
        <trans-unit id="fb228b5c55ad8378b706b298cb18e19a8d1b92e0" translate="yes" xml:space="preserve">
          <source>IterMut::eq</source>
          <target state="translated">IterMut::eq</target>
        </trans-unit>
        <trans-unit id="10b9735610da183bc0904cfcdc41b325717c5fa4" translate="yes" xml:space="preserve">
          <source>IterMut::filter</source>
          <target state="translated">IterMut::filter</target>
        </trans-unit>
        <trans-unit id="50b5344a605daa6db154682749d39063c82b3aa3" translate="yes" xml:space="preserve">
          <source>IterMut::filter_map</source>
          <target state="translated">IterMut::filter_map</target>
        </trans-unit>
        <trans-unit id="bc7ee8167e059bacfd966b6012e519970cd73008" translate="yes" xml:space="preserve">
          <source>IterMut::find</source>
          <target state="translated">IterMut::find</target>
        </trans-unit>
        <trans-unit id="410d4ebdc94090e744fedb731647c7ec0d8578cc" translate="yes" xml:space="preserve">
          <source>IterMut::find_map</source>
          <target state="translated">IterMut::find_map</target>
        </trans-unit>
        <trans-unit id="65e5eda673bd31f19324431c366d3dfedb17fb01" translate="yes" xml:space="preserve">
          <source>IterMut::flat_map</source>
          <target state="translated">IterMut::flat_map</target>
        </trans-unit>
        <trans-unit id="b284560776dd5bb1ff4273557604dbb2553c7c07" translate="yes" xml:space="preserve">
          <source>IterMut::flatten</source>
          <target state="translated">IterMut::flatten</target>
        </trans-unit>
        <trans-unit id="ab0f6e0b99bf1433157d69dc73b614b9ae6780fe" translate="yes" xml:space="preserve">
          <source>IterMut::fmt</source>
          <target state="translated">IterMut::fmt</target>
        </trans-unit>
        <trans-unit id="4b759c2db23677552fe4a6582ff9535f267cf416" translate="yes" xml:space="preserve">
          <source>IterMut::fold</source>
          <target state="translated">IterMut::fold</target>
        </trans-unit>
        <trans-unit id="ff2b68bb585bc2eef74e222255298430657bd568" translate="yes" xml:space="preserve">
          <source>IterMut::for_each</source>
          <target state="translated">IterMut::for_each</target>
        </trans-unit>
        <trans-unit id="a33e41fe818af66e485ef7d3667b7d969b562154" translate="yes" xml:space="preserve">
          <source>IterMut::from</source>
          <target state="translated">IterMut::from</target>
        </trans-unit>
        <trans-unit id="b0e6a8de88a1b4c1f800636e965b45722312ad0f" translate="yes" xml:space="preserve">
          <source>IterMut::fuse</source>
          <target state="translated">IterMut::fuse</target>
        </trans-unit>
        <trans-unit id="664fd7bab24c7daac348bb72a1609830e80d691b" translate="yes" xml:space="preserve">
          <source>IterMut::ge</source>
          <target state="translated">IterMut::ge</target>
        </trans-unit>
        <trans-unit id="6bfb9c74b746559572b1cb3b3a42167374cd95d6" translate="yes" xml:space="preserve">
          <source>IterMut::gt</source>
          <target state="translated">IterMut::gt</target>
        </trans-unit>
        <trans-unit id="661eb528c55fa69d49ca565e9e26cfd5ddfff9bb" translate="yes" xml:space="preserve">
          <source>IterMut::inspect</source>
          <target state="translated">IterMut::inspect</target>
        </trans-unit>
        <trans-unit id="0085a0c4d6891c0fa655511a1f17f0c6798fffe3" translate="yes" xml:space="preserve">
          <source>IterMut::into</source>
          <target state="translated">IterMut::into</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
