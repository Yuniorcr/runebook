<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="rust">
    <body>
      <group id="rust">
        <trans-unit id="40806bdac66961c97f14caf3bdb5bd4161107da4" translate="yes" xml:space="preserve">
          <source>To resolve this error use the concrete type:</source>
          <target state="translated">このエラーを解決するには、具象型を使用します。</target>
        </trans-unit>
        <trans-unit id="bba50911f39e97c448e79f8065cbe76ff37d962c" translate="yes" xml:space="preserve">
          <source>To resolve this error, use a concrete type for the intermediate expression:</source>
          <target state="translated">このエラーを解決するには、中間式に具象型を使用します。</target>
        </trans-unit>
        <trans-unit id="336222d4e74857a65248fce76ba73fa02fe1c00a" translate="yes" xml:space="preserve">
          <source>To return a new lowercased value without modifying the existing one, use &lt;a href=&quot;#method.to_ascii_lowercase&quot;&gt;&lt;code&gt;to_ascii_lowercase&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">既存の値を変更せずに新しい小文字の値を返すには、&lt;a href=&quot;#method.to_ascii_lowercase&quot;&gt; &lt;code&gt;to_ascii_lowercase&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="c6eff45b987ef30ba84b5033a569d4671d667c28" translate="yes" xml:space="preserve">
          <source>To return a new lowercased value without modifying the existing one, use &lt;a href=&quot;#tymethod.to_ascii_lowercase&quot;&gt;&lt;code&gt;to_ascii_lowercase&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">既存の値を変更せずに新しい小文字の値を返すには、&lt;a href=&quot;#tymethod.to_ascii_lowercase&quot;&gt; &lt;code&gt;to_ascii_lowercase&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="8a6b8af0a2d7bad5168dd7563a5faab87aca3dc2" translate="yes" xml:space="preserve">
          <source>To return a new lowercased value without modifying the existing one, use &lt;a href=&quot;struct.osstr#method.to_ascii_lowercase&quot;&gt;&lt;code&gt;OsStr::to_ascii_lowercase&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">既存の値を変更せずに新しい小文字の値を返すには、&lt;a href=&quot;struct.osstr#method.to_ascii_lowercase&quot;&gt; &lt;code&gt;OsStr::to_ascii_lowercase&lt;/code&gt; &lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="99049f339cacaaabe4b0c50ed3b0d3a63d16bda2" translate="yes" xml:space="preserve">
          <source>To return a new lowercased value without modifying the existing one, use &lt;a href=&quot;trait.asciiext#tymethod.to_ascii_lowercase&quot;&gt;&lt;code&gt;to_ascii_lowercase&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">既存の値を変更せずに新しい小文字の値を返すには、&lt;a href=&quot;trait.asciiext#tymethod.to_ascii_lowercase&quot;&gt; &lt;code&gt;to_ascii_lowercase&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="4fc2431e450771dead21af33dda64aadfaf2de37" translate="yes" xml:space="preserve">
          <source>To return a new uppercased value without modifying the existing one, use &lt;a href=&quot;#method.to_ascii_uppercase&quot;&gt;&lt;code&gt;to_ascii_uppercase&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">既存の値を変更せずに新しい大文字の値を返すには、&lt;a href=&quot;#method.to_ascii_uppercase&quot;&gt; &lt;code&gt;to_ascii_uppercase&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="3f98861983753d9167b54a4036b6c14ee7465a79" translate="yes" xml:space="preserve">
          <source>To return a new uppercased value without modifying the existing one, use &lt;a href=&quot;#tymethod.to_ascii_uppercase&quot;&gt;&lt;code&gt;to_ascii_uppercase&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">既存の値を変更せずに新しい大文字の値を返すには、&lt;a href=&quot;#tymethod.to_ascii_uppercase&quot;&gt; &lt;code&gt;to_ascii_uppercase&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="b269c5e12c3307032fd7c3ae09e5e6e5ef1b2811" translate="yes" xml:space="preserve">
          <source>To return a new uppercased value without modifying the existing one, use &lt;a href=&quot;struct.osstr#method.to_ascii_uppercase&quot;&gt;&lt;code&gt;OsStr::to_ascii_uppercase&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">既存の値を変更せずに新しい大文字の値を返すには、&lt;a href=&quot;struct.osstr#method.to_ascii_uppercase&quot;&gt; &lt;code&gt;OsStr::to_ascii_uppercase&lt;/code&gt; &lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="b8bdcca7b53a29d96e387d59f21508e247003424" translate="yes" xml:space="preserve">
          <source>To return a new uppercased value without modifying the existing one, use &lt;a href=&quot;trait.asciiext#tymethod.to_ascii_uppercase&quot;&gt;&lt;code&gt;to_ascii_uppercase&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">既存の値を変更せずに新しい大文字の値を返すには、&lt;a href=&quot;trait.asciiext#tymethod.to_ascii_uppercase&quot;&gt; &lt;code&gt;to_ascii_uppercase&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="b3eb99467dbfaa372dd0858f79acae31153782c2" translate="yes" xml:space="preserve">
          <source>To round out this project, we&amp;rsquo;ll briefly demonstrate how to work with environment variables and how to print to standard error, both of which are useful when you&amp;rsquo;re writing command line programs.</source>
          <target state="translated">このプロジェクトを完成させるために、環境変数を使用する方法と標準エラーに出力する方法を簡単に示します。どちらもコマンドラインプログラムを作成するときに役立ちます。</target>
        </trans-unit>
        <trans-unit id="1d354bd55577a0ae6fc2f95a62753d1f62548897" translate="yes" xml:space="preserve">
          <source>To run Clippy&amp;rsquo;s lints on any Cargo project, enter the following:</source>
          <target state="translated">CargoプロジェクトでClippyのリントを実行するには、次のように入力します。</target>
        </trans-unit>
        <trans-unit id="38b636b1ad46eb0add3e75f7e9d97cbfc1d6f9d8" translate="yes" xml:space="preserve">
          <source>To run the binary crate from the &lt;em&gt;add&lt;/em&gt; directory, we can specify which package in the workspace we want to run by using the &lt;code&gt;-p&lt;/code&gt; argument and the package name with &lt;code&gt;cargo run&lt;/code&gt;:</source>
          <target state="translated">&lt;em&gt;add&lt;/em&gt;ディレクトリからバイナリクレートを実行するには、 &lt;code&gt;-p&lt;/code&gt; 引数と &lt;code&gt;cargo run&lt;/code&gt; のパッケージ名を使用して、ワークスペース内で実行するパッケージを指定できます。</target>
        </trans-unit>
        <trans-unit id="d744134b2344eca07ba0f4cf9819619cc570948e" translate="yes" xml:space="preserve">
          <source>To run the binary crate from the &lt;em&gt;add&lt;/em&gt; directory, we need to specify which package in the workspace we want to use by using the &lt;code&gt;-p&lt;/code&gt; argument and the package name with &lt;code&gt;cargo run&lt;/code&gt;:</source>
          <target state="translated">&lt;em&gt;add&lt;/em&gt;ディレクトリからバイナリクレートを実行するには、 &lt;code&gt;-p&lt;/code&gt; 引数と &lt;code&gt;cargo run&lt;/code&gt; パッケージ名を使用して、使用するワークスペース内のパッケージを指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="8bc4f6782a835ae358ae31b6f96421e46fc704f9" translate="yes" xml:space="preserve">
          <source>To see deref coercion in action, let&amp;rsquo;s use the &lt;code&gt;MyBox&amp;lt;T&amp;gt;&lt;/code&gt; type we defined in Listing 15-8 as well as the implementation of &lt;code&gt;Deref&lt;/code&gt; that we added in Listing 15-10. Listing 15-11 shows the definition of a function that has a string slice parameter:</source>
          <target state="translated">アクションでDEREF強制を確認するには、聞かせてのは、使用 &lt;code&gt;MyBox&amp;lt;T&amp;gt;&lt;/code&gt; 私たちは井戸の実装などとしてリスト15-8で定義された入力 &lt;code&gt;Deref&lt;/code&gt; 私たちは、リスト15-10で追加されていること。リスト15-11は文字列スライスパラメーターを持つ関数の定義を示しています：</target>
        </trans-unit>
        <trans-unit id="0acf6acdd95133438e45baebe84203f1ed05a023" translate="yes" xml:space="preserve">
          <source>To see destructors in action, let's take a look at the following program:</source>
          <target state="translated">デストラクタの動作を見るために、以下のプログラムを見てみましょう。</target>
        </trans-unit>
        <trans-unit id="46d871d99b751923bfc8199196805ccdb06df1da" translate="yes" xml:space="preserve">
          <source>To see the pattern matching aspect of &lt;code&gt;let&lt;/code&gt; more clearly, consider Listing 18-4, which uses a pattern with &lt;code&gt;let&lt;/code&gt; to destructure a tuple.</source>
          <target state="translated">&lt;code&gt;let&lt;/code&gt; のパターンマッチングの側面をより明確に確認するには、 &lt;code&gt;let&lt;/code&gt; を含むパターンを使用してタプルを分解するリスト18-4を検討してください。</target>
        </trans-unit>
        <trans-unit id="76ec71028cdc11f78838d4138f08838dc91ccb67" translate="yes" xml:space="preserve">
          <source>To see this code in action, let&amp;rsquo;s modify &lt;code&gt;main&lt;/code&gt; to accept only two requests before gracefully shutting down the server, as shown in Listing 20-25.</source>
          <target state="translated">リスト20-25に示すように、このコードの動作を確認するために、サーバーを正常にシャットダウンする前に、 &lt;code&gt;main&lt;/code&gt; を変更して2つの要求のみを受け入れるようにします。</target>
        </trans-unit>
        <trans-unit id="be7f1edd4187697ed5c2e4f6dc220a6d712ca92f" translate="yes" xml:space="preserve">
          <source>To see this code in action, let&amp;rsquo;s modify &lt;code&gt;main&lt;/code&gt; to accept only two requests before gracefully shutting down the server, as shown in Listing 20-26.</source>
          <target state="translated">このコードの動作を確認するために、リスト20-26に示すように、サーバーを正常にシャットダウンする前に &lt;code&gt;main&lt;/code&gt; を2つの要求のみを受け入れるように変更してみましょう。</target>
        </trans-unit>
        <trans-unit id="a7940de3192aef0247f83e244b60b2d3b6e58939" translate="yes" xml:space="preserve">
          <source>To see what happens when a &lt;code&gt;should_panic&lt;/code&gt; test with an &lt;code&gt;expected&lt;/code&gt; message fails, let&amp;rsquo;s again introduce a bug into our code by swapping the bodies of the &lt;code&gt;if value &amp;lt; 1&lt;/code&gt; and the &lt;code&gt;else if value &amp;gt; 100&lt;/code&gt; blocks:</source>
          <target state="translated">&lt;code&gt;expected&lt;/code&gt; メッセージを伴う &lt;code&gt;should_panic&lt;/code&gt; テストが失敗したときに何が起こるかを確認するために、 &lt;code&gt;if value &amp;lt; 1&lt;/code&gt; と &lt;code&gt;else if value &amp;gt; 100&lt;/code&gt; ブロックの本体を交換して、コードにバグを再び導入しましょう。</target>
        </trans-unit>
        <trans-unit id="8576f35029f2c29efb15d99933a9de10a34dcb7b" translate="yes" xml:space="preserve">
          <source>To see why that last example was allowed, you need to understand the general rule. Unfortunately this rule is a bit tricky to state. Consider an &lt;code&gt;impl&lt;/code&gt;:</source>
          <target state="translated">最後の例が許可された理由を確認するには、一般的なルールを理解する必要があります。残念ながら、このルールは少し難しいです。 &lt;code&gt;impl&lt;/code&gt; 検討してください：</target>
        </trans-unit>
        <trans-unit id="a14fdfe6208af1cb452de86927ad706e8201fb30" translate="yes" xml:space="preserve">
          <source>To seek without discarding the internal buffer, use &lt;a href=&quot;struct.bufreader#method.seek_relative&quot;&gt;&lt;code&gt;BufReader::seek_relative&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">内部バッファを破棄せずにシークするには、&lt;a href=&quot;struct.bufreader#method.seek_relative&quot;&gt; &lt;code&gt;BufReader::seek_relative&lt;/code&gt; &lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="0d7ebdd071ebe03ef9670cc1129fd6804ce04dfa" translate="yes" xml:space="preserve">
          <source>To service better ergonomics, patterns operate in different &lt;em&gt;binding modes&lt;/em&gt; in order to make it easier to bind references to values. When a reference value is matched by a non-reference pattern, it will be automatically treated as a &lt;code&gt;ref&lt;/code&gt; or &lt;code&gt;ref mut&lt;/code&gt; binding. Example:</source>
          <target state="translated">人間工学を改善するために、パターンは参照を値にバインドしやすくするために、異なる&lt;em&gt;バインドモード&lt;/em&gt;で動作します。参照値が非参照パターンと一致すると、それは自動的に &lt;code&gt;ref&lt;/code&gt; または &lt;code&gt;ref mut&lt;/code&gt; バインディングとして扱われます。例：</target>
        </trans-unit>
        <trans-unit id="a3d0badb6b5b316657f5cb3fda3963d136213146" translate="yes" xml:space="preserve">
          <source>To set up a new project, go to the &lt;em&gt;projects&lt;/em&gt; directory that you created in Chapter 1 and make a new project using Cargo, like so:</source>
          <target state="translated">新しいプロジェクトを設定するには、第1章で作成した&lt;em&gt;プロジェクト&lt;/em&gt;ディレクトリに移動し、Cargoを使用して次のように新しいプロジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="58b49ff05dd6fb8ece812d318c3efc42db98cdbb" translate="yes" xml:space="preserve">
          <source>To show Rust where to find an item in a module tree, we use a path in the same way we use a path when navigating a filesystem. If we want to call a function, we need to know its path.</source>
          <target state="translated">モジュールツリーのどこにアイテムがあるかを示すために、ファイルシステムをナビゲートするときにパスを使用するのと同じようにパスを使用します。関数を呼び出したい場合は、そのパスを知る必要があります。</target>
        </trans-unit>
        <trans-unit id="da1e1e9f2dd7b1c40ddec9ecef1f4d928ddb4f25" translate="yes" xml:space="preserve">
          <source>To silence this warning, edit your code to use an explicit bound. Most of the time, this means that you will want to change the signature of a function that you are calling. For example, if the error is reported on a call like &lt;code&gt;foo(x)&lt;/code&gt;, and &lt;code&gt;foo&lt;/code&gt; is defined as follows:</source>
          <target state="translated">この警告を抑制するには、コードを編集して明示的な境界を使用します。ほとんどの場合、これは、呼び出す関数のシグネチャを変更する必要があることを意味します。例えば、エラーが等呼び出しで報告された場合 &lt;code&gt;foo(x)&lt;/code&gt; 、および &lt;code&gt;foo&lt;/code&gt; 、以下のように定義されます。</target>
        </trans-unit>
        <trans-unit id="0ae8db76a02a996f64985b9fc49d037c6c1ea0c5" translate="yes" xml:space="preserve">
          <source>To solve this error you can use conditional compilation:</source>
          <target state="translated">このエラーを解決するには、条件付きコンパイルを使用します。</target>
        </trans-unit>
        <trans-unit id="384aa431a554e0c72ecb63fe411f4d1d9ac5425c" translate="yes" xml:space="preserve">
          <source>To solve this error, please ensure that the trait is also public. The trait can be made inaccessible if necessary by placing it into a private inner module, but it still has to be marked with &lt;code&gt;pub&lt;/code&gt;. Example:</source>
          <target state="translated">このエラーを解決するには、特性が公開されていることを確認してください。トレイトは、プライベート内部モジュールに配置することで、必要に応じてアクセスできなくなりますが、それでも &lt;code&gt;pub&lt;/code&gt; でマークする必要があります。例：</target>
        </trans-unit>
        <trans-unit id="e8fd0f72a971d26cc1bbb2830412854500357f79" translate="yes" xml:space="preserve">
          <source>To solve this error, please ensure that the type is also public. The type can be made inaccessible if necessary by placing it into a private inner module, but it still has to be marked with &lt;code&gt;pub&lt;/code&gt;. Example:</source>
          <target state="translated">このエラーを解決するには、タイプもパブリックであることを確認してください。タイプは、必要に応じてプライベート内部モジュールに配置することでアクセスできなくなりますが、それでも &lt;code&gt;pub&lt;/code&gt; でマークする必要があります。例：</target>
        </trans-unit>
        <trans-unit id="3cffb477b8b527a4ad5d6a5090b9a2b24adc51f1" translate="yes" xml:space="preserve">
          <source>To solve this error, please move the type bindings in the type parameter declaration:</source>
          <target state="translated">このエラーを解決するには、型パラメータ宣言の中の型バインディングを移動させてください。</target>
        </trans-unit>
        <trans-unit id="4a77dd198bd76ba335ad5b87d56789f39f1b6b5e" translate="yes" xml:space="preserve">
          <source>To solve this error, the best solution is generally to keep the path before the item when using it. Example:</source>
          <target state="translated">このエラーを解決するには、一般的には、使用するときにアイテムの前にパスを保持するのが最善の解決策です。例</target>
        </trans-unit>
        <trans-unit id="e0683b0386295fb5b1a3a7f5a6c76d0ac644fc3b" translate="yes" xml:space="preserve">
          <source>To solve this issue, multiple solutions are available. First, is it required for this variable to be used in more than one closure at a time? If it is the case, use reference counted types such as &lt;code&gt;Rc&lt;/code&gt; (or &lt;code&gt;Arc&lt;/code&gt; if it runs concurrently):</source>
          <target state="translated">この問題を解決するために、複数のソリューションが利用可能です。まず、この変数を一度に複数のクロージャで使用する必要がありますか？その場合は、 &lt;code&gt;Rc&lt;/code&gt; （または同時に実行される場合は &lt;code&gt;Arc&lt;/code&gt; )などの参照カウントタイプを使用します。</target>
        </trans-unit>
        <trans-unit id="41f267efd7ba6e9990897495f245eaad001164fa" translate="yes" xml:space="preserve">
          <source>To solve, ensure that the trait object has at least one trait:</source>
          <target state="translated">解決するには、形質オブジェクトが少なくとも1つの形質を持っていることを確認します。</target>
        </trans-unit>
        <trans-unit id="d8595d9620d15e23dd7e60f0c946808adb0c94b9" translate="yes" xml:space="preserve">
          <source>To split by Unicode &lt;code&gt;Whitespace&lt;/code&gt; instead, use &lt;a href=&quot;#method.split_whitespace&quot;&gt;&lt;code&gt;split_whitespace&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">代わりにUnicode &lt;code&gt;Whitespace&lt;/code&gt; 分割するには、&lt;a href=&quot;#method.split_whitespace&quot;&gt; &lt;code&gt;split_whitespace&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="f4419c6b42b03b7ee73a5252ee2ba8b90aa54d16" translate="yes" xml:space="preserve">
          <source>To split by Unicode &lt;code&gt;Whitespace&lt;/code&gt; instead, use &lt;a href=&quot;../primitive.str#method.split_whitespace&quot;&gt;&lt;code&gt;split_whitespace&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">代わりにUnicode &lt;code&gt;Whitespace&lt;/code&gt; 分割するには、&lt;a href=&quot;../primitive.str#method.split_whitespace&quot;&gt; &lt;code&gt;split_whitespace&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="008a095ac9e41d95c26562938b70663fdac5db0b" translate="yes" xml:space="preserve">
          <source>To split by Unicode &lt;code&gt;Whitespace&lt;/code&gt; instead, use &lt;a href=&quot;primitive.str#method.split_whitespace&quot;&gt;&lt;code&gt;split_whitespace&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">代わりにUnicode &lt;code&gt;Whitespace&lt;/code&gt; 分割するには、&lt;a href=&quot;primitive.str#method.split_whitespace&quot;&gt; &lt;code&gt;split_whitespace&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="39efc8d301c98f5b54ae3dfd338106520f5157d1" translate="yes" xml:space="preserve">
          <source>To start defining the procedural macro, place the code in Listing 19-31 into your &lt;em&gt;src/lib.rs&lt;/em&gt; file for the &lt;code&gt;hello_macro_derive&lt;/code&gt; crate. Note that this code won&amp;rsquo;t compile until we add a definition for the &lt;code&gt;impl_hello_macro&lt;/code&gt; function.</source>
          <target state="translated">手続き型マクロの定義を開始するには、リスト19-31のコードを &lt;code&gt;hello_macro_derive&lt;/code&gt; クレートの&lt;em&gt;src / lib.rs&lt;/em&gt;ファイルに&lt;em&gt;配置し&lt;/em&gt;ます。このコードは、 &lt;code&gt;impl_hello_macro&lt;/code&gt; 関数の定義を追加するまでコンパイルされないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="4cd7a51fb6e1263e5fbdd69b060072fe94d9dc2f" translate="yes" xml:space="preserve">
          <source>To start, we&amp;rsquo;ll build a tree with nodes that know about their child nodes. We&amp;rsquo;ll create a struct named &lt;code&gt;Node&lt;/code&gt; that holds its own &lt;code&gt;i32&lt;/code&gt; value as well as references to its children &lt;code&gt;Node&lt;/code&gt; values:</source>
          <target state="translated">まず、子ノードについて知っているノードを持つツリーを構築します。独自の &lt;code&gt;i32&lt;/code&gt; 値とその子 &lt;code&gt;Node&lt;/code&gt; 値への参照を保持する &lt;code&gt;Node&lt;/code&gt; という名前の構造体を作成します。</target>
        </trans-unit>
        <trans-unit id="e88b248a81f262510bb36c205a0d4dc2d7d064a2" translate="yes" xml:space="preserve">
          <source>To structure our crate in the same way that a real restaurant works, we can organize the functions into nested modules. Create a new library named &lt;code&gt;restaurant&lt;/code&gt; by running &lt;code&gt;cargo new --lib restaurant&lt;/code&gt;; then put the code in Listing 7-1 into &lt;em&gt;src/lib.rs&lt;/em&gt; to define some modules and function signatures.</source>
          <target state="translated">実際のレストランが機能するのと同じ方法でクレートを構造化するために、関数をネストされたモジュールに編成できます。 &lt;code&gt;cargo new --lib restaurant&lt;/code&gt; 実行して、 &lt;code&gt;restaurant&lt;/code&gt; という名前の新しいライブラリを作成します。次に、リスト7-1のコードを&lt;em&gt;src / lib.rsに配置&lt;/em&gt;して、いくつかのモジュールと関数のシグネチャを定義します。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="314819f76bd8c5d973c493b80242bed1a2fc84f6" translate="yes" xml:space="preserve">
          <source>To summarize, here you can find the full grammar of format strings. The syntax for the formatting language used is drawn from other languages, so it should not be too alien. Arguments are formatted with Python-like syntax, meaning that arguments are surrounded by &lt;code&gt;{}&lt;/code&gt; instead of the C-like &lt;code&gt;%&lt;/code&gt;. The actual grammar for the formatting syntax is:</source>
          <target state="translated">要約すると、ここにフォーマット文字列の完全な文法があります。使用されるフォーマット言語の構文は他の言語から引き出されているため、あまり異質なものであってはなりません。引数はPythonのような構文でフォーマットされます。つまり、引数はCのような &lt;code&gt;%&lt;/code&gt; ではなく &lt;code&gt;{}&lt;/code&gt; で囲まれます。フォーマット構文の実際の文法は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="9f66b79eaf886d6c72a892191c1e18c1c1df90d3" translate="yes" xml:space="preserve">
          <source>To summarize, strings are complicated. Different programming languages make different choices about how to present this complexity to the programmer. Rust has chosen to make the correct handling of &lt;code&gt;String&lt;/code&gt; data the default behavior for all Rust programs, which means programmers have to put more thought into handling UTF-8 data upfront. This trade-off exposes more of the complexity of strings than is apparent in other programming languages, but it prevents you from having to handle errors involving non-ASCII characters later in your development life cycle.</source>
          <target state="translated">要約すると、文字列は複雑です。プログラミング言語が異なれば、この複雑さをプログラマーに提示する方法も異なります。Rustは、 &lt;code&gt;String&lt;/code&gt; データの正しい処理をすべてのRustプログラムのデフォルトの動作にすることを選択しました。つまり、プログラマは、UTF-8データを前もって処理することを考慮しなければなりません。このトレードオフにより、他のプログラミング言語で見られるよりも複雑な文字列が明らかになりますが、開発ライフサイクルの後半で非ASCII文字に関連するエラーを処理する必要がなくなります。</target>
        </trans-unit>
        <trans-unit id="de7e750f454d2e6ac7a8ffdfb7a0160a0d2868ee" translate="yes" xml:space="preserve">
          <source>To summarize, the &lt;code&gt;let mut guess = String::new();&lt;/code&gt; line has created a mutable variable that is currently bound to a new, empty instance of a &lt;code&gt;String&lt;/code&gt;. Whew!</source>
          <target state="translated">要約すると、 &lt;code&gt;let mut guess = String::new();&lt;/code&gt; lineは、現在 &lt;code&gt;String&lt;/code&gt; の新しい空のインスタンスにバインドされている可変変数を作成しました。ふew！</target>
        </trans-unit>
        <trans-unit id="9cb396520770d271c92551f4d7e0bcd83c651b95" translate="yes" xml:space="preserve">
          <source>To switch to unsafe Rust, use the &lt;code&gt;unsafe&lt;/code&gt; keyword and then start a new block that holds the unsafe code. You can take five actions in unsafe Rust, called &lt;em&gt;unsafe superpowers&lt;/em&gt;, that you can&amp;rsquo;t in safe Rust. Those superpowers include the ability to:</source>
          <target state="translated">安全でないRustに切り替えるには、 &lt;code&gt;unsafe&lt;/code&gt; キーワードを使用してから、安全でないコードを保持する新しいブロックを開始します。安全でないRustでは、&lt;em&gt;安全でない超大国&lt;/em&gt;と呼ばれる5つのアクションを実行できますが、安全なRustでは実行できません。これらの超大国には、次の機能が含まれます。</target>
        </trans-unit>
        <trans-unit id="f43e14ce7587570f1bef4bdb30b6cbaa4b75f17f" translate="yes" xml:space="preserve">
          <source>To switch to unsafe Rust, use the &lt;code&gt;unsafe&lt;/code&gt; keyword and then start a new block that holds the unsafe code. You can take four actions in unsafe Rust, called &lt;em&gt;unsafe superpowers&lt;/em&gt;, that you can&amp;rsquo;t in safe Rust. Those superpowers include the ability to:</source>
          <target state="translated">安全でないRustに切り替えるには、 &lt;code&gt;unsafe&lt;/code&gt; キーワードを使用してから、安全でないコードを保持する新しいブロックを開始します。安全ではないRustで実行できない4つのアクション（安全では&lt;em&gt;ない超大国&lt;/em&gt;）を実行できます。これらの超大国には、次の能力が含まれます。</target>
        </trans-unit>
        <trans-unit id="11f1d9981c2d0b02d68889e44295f6ab0f30c56d" translate="yes" xml:space="preserve">
          <source>To terminate a raw string, you have to have the same number of &lt;code&gt;#&lt;/code&gt; at the end as at the beginning. Example:</source>
          <target state="translated">生の文字列を終了するには、最初と同じ数の &lt;code&gt;#&lt;/code&gt; を最後に付ける必要があります。例：</target>
        </trans-unit>
        <trans-unit id="31217910df272b1f25ece09faa304c39aefdc3a5" translate="yes" xml:space="preserve">
          <source>To this:</source>
          <target state="translated">これに</target>
        </trans-unit>
        <trans-unit id="057adfa85ddef458f115bd296031094452f5b4a0" translate="yes" xml:space="preserve">
          <source>To understand better how closures work in Rust, read: https://doc.rust-lang.org/book/ch13-01-closures.html</source>
          <target state="translated">Rust でのクロージャの仕組みをよりよく理解するには、https://doc.rust-lang.org/book/ch13-01-closures.html を参照してください。</target>
        </trans-unit>
        <trans-unit id="28d2bbf95b0b86d0881e2c7c6550fc005fe06275" translate="yes" xml:space="preserve">
          <source>To understand what this means, it is perhaps easier to consider a few examples.</source>
          <target state="translated">この意味を理解するためには、いくつかの例を考えてみるとわかりやすいかもしれません。</target>
        </trans-unit>
        <trans-unit id="c87f629cfb96af20696ef3d804bdc670ac7c36a2" translate="yes" xml:space="preserve">
          <source>To understand when we might want to use structs, let&amp;rsquo;s write a program that calculates the area of a rectangle. We&amp;rsquo;ll start with single variables, and then refactor the program until we&amp;rsquo;re using structs instead.</source>
          <target state="translated">いつ構造体を使用するかを理解するために、長方形の面積を計算するプログラムを作成しましょう。単一の変数から始めて、代わりに構造体を使用するまでプログラムをリファクタリングします。</target>
        </trans-unit>
        <trans-unit id="f3887dc1ab813c2423acfe9d57d029c4502fb78e" translate="yes" xml:space="preserve">
          <source>To uninstall Rust and &lt;code&gt;rustup&lt;/code&gt;, run the following uninstall script from your shell:</source>
          <target state="translated">Rustと &lt;code&gt;rustup&lt;/code&gt; をアンインストールするには、シェルから次のアンインストールスクリプトを実行します。</target>
        </trans-unit>
        <trans-unit id="662f41af8eb574e21b57913c6f9a0bd1516cbc7a" translate="yes" xml:space="preserve">
          <source>To uppercase ASCII characters in addition to non-ASCII characters, use &lt;a href=&quot;#method.to_uppercase&quot;&gt;&lt;code&gt;to_uppercase&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">非ASCII文字に加えてASCII文字を大文字にするには、&lt;a href=&quot;#method.to_uppercase&quot;&gt; &lt;code&gt;to_uppercase&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="bae7e9e1be3baf0aecb5ead601705215f7341743" translate="yes" xml:space="preserve">
          <source>To uppercase ASCII characters in addition to non-ASCII characters, use &lt;a href=&quot;../primitive.str#method.to_uppercase&quot;&gt;&lt;code&gt;str::to_uppercase&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">非ASCII文字に加えてASCII文字を大文字にするには、&lt;a href=&quot;../primitive.str#method.to_uppercase&quot;&gt; &lt;code&gt;str::to_uppercase&lt;/code&gt; &lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="3ceeb5afb45130513f95c0c76f8c194cbc22cc90" translate="yes" xml:space="preserve">
          <source>To uppercase ASCII characters in addition to non-ASCII characters, use &lt;a href=&quot;https://doc.rust-lang.org/nightly/std/primitive.str.html#method.to_uppercase&quot;&gt;&lt;code&gt;str::to_uppercase&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">非ASCII文字に加えてASCII文字を大文字にするには、&lt;a href=&quot;https://doc.rust-lang.org/nightly/std/primitive.str.html#method.to_uppercase&quot;&gt; &lt;code&gt;str::to_uppercase&lt;/code&gt; &lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="00c3dbee0cfe96289d27fa6bc805ddc167d97ef8" translate="yes" xml:space="preserve">
          <source>To uppercase the value in-place, use &lt;a href=&quot;#method.make_ascii_uppercase&quot;&gt;&lt;code&gt;make_ascii_uppercase&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">値をインプレースで大文字にするには、&lt;a href=&quot;#method.make_ascii_uppercase&quot;&gt; &lt;code&gt;make_ascii_uppercase&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="f0fee41197e5788cb8d5e92ad9fa5f070d016314" translate="yes" xml:space="preserve">
          <source>To uppercase the value in-place, use &lt;a href=&quot;#tymethod.make_ascii_uppercase&quot;&gt;&lt;code&gt;make_ascii_uppercase&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">値をインプレースで大文字にするには、&lt;a href=&quot;#tymethod.make_ascii_uppercase&quot;&gt; &lt;code&gt;make_ascii_uppercase&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="03872893861b26ce89768ebad491eb1be2bc29f7" translate="yes" xml:space="preserve">
          <source>To uppercase the value in-place, use &lt;a href=&quot;../primitive.str#method.make_ascii_uppercase&quot;&gt;&lt;code&gt;make_ascii_uppercase&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">インプレースで値を大文字にするには、&lt;a href=&quot;../primitive.str#method.make_ascii_uppercase&quot;&gt; &lt;code&gt;make_ascii_uppercase&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="52ba625fbc6adb072f55ed4d3847b030100a31e3" translate="yes" xml:space="preserve">
          <source>To uppercase the value in-place, use &lt;a href=&quot;../primitive.u8#method.make_ascii_uppercase&quot;&gt;&lt;code&gt;make_ascii_uppercase&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">インプレースで値を大文字にするには、&lt;a href=&quot;../primitive.u8#method.make_ascii_uppercase&quot;&gt; &lt;code&gt;make_ascii_uppercase&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="e8d877f3de3ce27771a5ff9e83ea6d9c1e61cdbd" translate="yes" xml:space="preserve">
          <source>To uppercase the value in-place, use &lt;a href=&quot;primitive.str#method.make_ascii_uppercase&quot;&gt;&lt;code&gt;make_ascii_uppercase&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">インプレースで値を大文字にするには、&lt;a href=&quot;primitive.str#method.make_ascii_uppercase&quot;&gt; &lt;code&gt;make_ascii_uppercase&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="a9ebf88e0ca05fe29ac69ce486bd57ddd729efb8" translate="yes" xml:space="preserve">
          <source>To uppercase the value in-place, use &lt;a href=&quot;primitive.u8#method.make_ascii_uppercase&quot;&gt;&lt;code&gt;make_ascii_uppercase&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">インプレースで値を大文字にするには、&lt;a href=&quot;primitive.u8#method.make_ascii_uppercase&quot;&gt; &lt;code&gt;make_ascii_uppercase&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="1ad9a8481cb2cb5dd232df2f396463103d3a41d2" translate="yes" xml:space="preserve">
          <source>To uppercase the value in-place, use &lt;a href=&quot;struct.osstr#method.make_ascii_uppercase&quot;&gt;&lt;code&gt;OsStr::make_ascii_uppercase&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">インプレースで値を大文字にするには、&lt;a href=&quot;struct.osstr#method.make_ascii_uppercase&quot;&gt; &lt;code&gt;OsStr::make_ascii_uppercase&lt;/code&gt; &lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="2ec9e0a0dd307f8b51434cf6c875a527cefcad70" translate="yes" xml:space="preserve">
          <source>To uppercase the value in-place, use &lt;a href=&quot;trait.asciiext#tymethod.make_ascii_uppercase&quot;&gt;&lt;code&gt;make_ascii_uppercase&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">インプレースで値を大文字にするには、&lt;a href=&quot;trait.asciiext#tymethod.make_ascii_uppercase&quot;&gt; &lt;code&gt;make_ascii_uppercase&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="2a0a581c19fda5f34a2ecc353cab28485839d3f8" translate="yes" xml:space="preserve">
          <source>To use a default implementation to summarize instances of &lt;code&gt;NewsArticle&lt;/code&gt; instead of defining a custom implementation, we specify an empty &lt;code&gt;impl&lt;/code&gt; block with &lt;code&gt;impl Summary for NewsArticle {}&lt;/code&gt;.</source>
          <target state="translated">カスタム実装を定義する代わりに、デフォルト実装を使用して &lt;code&gt;NewsArticle&lt;/code&gt; のインスタンスを &lt;code&gt;impl Summary for NewsArticle {}&lt;/code&gt; 空の &lt;code&gt;impl&lt;/code&gt; ブロックを指定します。</target>
        </trans-unit>
        <trans-unit id="9f435d65416d088237053151174da52702ca2759" translate="yes" xml:space="preserve">
          <source>To use a module from your current crate, add the &lt;code&gt;crate::&lt;/code&gt; prefix to the path.</source>
          <target state="translated">現在のクレートのモジュールを使用するには、パスに &lt;code&gt;crate::&lt;/code&gt; プレフィックスを追加します。</target>
        </trans-unit>
        <trans-unit id="adbf67a283306a6366d793a3b3158fdc68b8ad73" translate="yes" xml:space="preserve">
          <source>To use a namespace itself in addition to some of its members, &lt;code&gt;self&lt;/code&gt; may appear as part of a brace-enclosed list of imports:</source>
          <target state="translated">そのメンバーの一部に加えて、名前空間自体を使用するには、 &lt;code&gt;self&lt;/code&gt; 輸入の括弧で囲まれたリストの一部として表示されることがあります。</target>
        </trans-unit>
        <trans-unit id="4b03ec43b2895de636748b67704c685a1fa98427" translate="yes" xml:space="preserve">
          <source>To use a pattern, we compare it to some value. If the pattern matches the value, we use the value parts in our code. Recall the &lt;code&gt;match&lt;/code&gt; expressions in Chapter 6 that used patterns, such as the coin-sorting machine example. If the value fits the shape of the pattern, we can use the named pieces. If it doesn&amp;rsquo;t, the code associated with the pattern won&amp;rsquo;t run.</source>
          <target state="translated">パターンを使用するには、それをある値と比較します。パターンが値と一致する場合は、コードで値の部分を使用します。コイン選別機の例など、パターンを使用した第6章の &lt;code&gt;match&lt;/code&gt; 表現を思い出してください。値がパターンの形状に合う場合は、名前付きのピースを使用できます。そうでない場合、パターンに関連付けられたコードは実行されません。</target>
        </trans-unit>
        <trans-unit id="6cd526c3f5cdfb3e49b95a57c88c2fc1245de535" translate="yes" xml:space="preserve">
          <source>To use a slice type it generally has to be used behind a pointer for example as:</source>
          <target state="translated">slice型を使用するには、一般的にポインタの後ろで使用しなければなりません。</target>
        </trans-unit>
        <trans-unit id="1d9510373e7fd3a8d97cc9744e3544cf1ebe365c" translate="yes" xml:space="preserve">
          <source>To use a struct after we&amp;rsquo;ve defined it, we create an &lt;em&gt;instance&lt;/em&gt; of that struct by specifying concrete values for each of the fields. We create an instance by stating the name of the struct and then add curly brackets containing &lt;code&gt;key: value&lt;/code&gt; pairs, where the keys are the names of the fields and the values are the data we want to store in those fields. We don&amp;rsquo;t have to specify the fields in the same order in which we declared them in the struct. In other words, the struct definition is like a general template for the type, and instances fill in that template with particular data to create values of the type. For example, we can declare a particular user as shown in Listing 5-2.</source>
          <target state="translated">構造体を定義した後で使用するには、各フィールドに具体的な値を指定して、その構造体の&lt;em&gt;インスタンス&lt;/em&gt;を作成し&lt;em&gt;ます&lt;/em&gt;。構造体の名前を記述してインスタンスを作成し、 &lt;code&gt;key: value&lt;/code&gt; ペアを含む中括弧を追加します。ここで、キーはフィールドの名前であり、値はこれらのフィールドに格納するデータです。構造体で宣言したのと同じ順序でフィールドを指定する必要はありません。つまり、構造体の定義はタイプの一般的なテンプレートのようなものであり、インスタンスはそのテンプレートに特定のデータを入力して、タイプの値を作成します。たとえば、コードリスト5-2に示すように、特定のユーザーを宣言できます。</target>
        </trans-unit>
        <trans-unit id="27989b6610882b719a5ea410b5f71f23c1e34efa" translate="yes" xml:space="preserve">
          <source>To use this feature locally, you typically will use the &lt;code&gt;RUSTFLAGS&lt;/code&gt; environment variable to specify flags to the compiler through Cargo. For example to compile a statically linked binary on MSVC you would execute:</source>
          <target state="translated">この機能をローカルで使用するには、通常、 &lt;code&gt;RUSTFLAGS&lt;/code&gt; 環境変数を使用して、Cargoを介してコンパイラーにフラグを指定します。たとえば、MSVCで静的にリンクされたバイナリをコンパイルするには、次のコマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="aa8b8effb94e7abcaae16085a72643f10b8227aa" translate="yes" xml:space="preserve">
          <source>To use this version of &lt;code&gt;Summary&lt;/code&gt;, we only need to define &lt;code&gt;summarize_author&lt;/code&gt; when we implement the trait on a type:</source>
          <target state="translated">このバージョンの使用するには &lt;code&gt;Summary&lt;/code&gt; 、私たちは定義する必要があり &lt;code&gt;summarize_author&lt;/code&gt; を我々はタイプの形質を実装する場合：</target>
        </trans-unit>
        <trans-unit id="bc4c76af44cf81aae5a3bedd1a4fabcaf591ba2f" translate="yes" xml:space="preserve">
          <source>To wake up all threads, see &lt;a href=&quot;#method.notify_all&quot;&gt;&lt;code&gt;notify_all&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">すべてのスレッドを&lt;a href=&quot;#method.notify_all&quot;&gt; &lt;code&gt;notify_all&lt;/code&gt; &lt;/a&gt;には、notify_allを参照してください。</target>
        </trans-unit>
        <trans-unit id="1bba606e9595f006eac21496e730831a817fd203" translate="yes" xml:space="preserve">
          <source>To wake up all threads, see &lt;a href=&quot;struct.condvar#method.notify_all&quot;&gt;&lt;code&gt;notify_all&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">すべてのスレッドをウェイクアップするには、&lt;a href=&quot;struct.condvar#method.notify_all&quot;&gt; &lt;code&gt;notify_all&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="43d932c297a4d2b73e1f772e97d55db4b8e0dc93" translate="yes" xml:space="preserve">
          <source>To wake up only one thread, see &lt;a href=&quot;#method.notify_one&quot;&gt;&lt;code&gt;notify_one&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">1つのスレッドだけを起こすには、&lt;a href=&quot;#method.notify_one&quot;&gt; &lt;code&gt;notify_one&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="bee8651caa9f53e075921bde6a903cb8a56a8a73" translate="yes" xml:space="preserve">
          <source>To wake up only one thread, see &lt;a href=&quot;struct.condvar#method.notify_one&quot;&gt;&lt;code&gt;notify_one&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">1つのスレッドのみをウェイクアップするには、&lt;a href=&quot;struct.condvar#method.notify_one&quot;&gt; &lt;code&gt;notify_one&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="c88cf3ca8e9feae5d3beb7bbd55b97e74623d342" translate="yes" xml:space="preserve">
          <source>To work around this restriction, consider &quot;hiding&quot; the value behind a reference: either &lt;code&gt;&amp;amp;x&lt;/code&gt; or &lt;code&gt;&amp;amp;mut x&lt;/code&gt;. Since a reference has a fixed size, this lets you move it around as usual. Example:</source>
          <target state="translated">この制限を回避するには、参照の後ろに値を「隠す」ことを検討してください： &lt;code&gt;&amp;amp;x&lt;/code&gt; または &lt;code&gt;&amp;amp;mut x&lt;/code&gt; のいずれか。参照のサイズは固定されているため、通常どおりに移動できます。例：</target>
        </trans-unit>
        <trans-unit id="6500c202f483ded49d90dd12d80754b82fdf0dff" translate="yes" xml:space="preserve">
          <source>To work around this, it can be covered with a local type, &lt;code&gt;MyType&lt;/code&gt;:</source>
          <target state="translated">これを回避するには、ローカルタイプ &lt;code&gt;MyType&lt;/code&gt; でカバーできます。</target>
        </trans-unit>
        <trans-unit id="36dd8bd129ed7bbb15977196b4ec891eb2cbcdbb" translate="yes" xml:space="preserve">
          <source>To work around this, we can use &lt;a href=&quot;#method.split_at_mut&quot;&gt;&lt;code&gt;split_at_mut&lt;/code&gt;&lt;/a&gt; to create two distinct mutable sub-slices from a slice:</source>
          <target state="translated">これを回避するには、&lt;a href=&quot;#method.split_at_mut&quot;&gt; &lt;code&gt;split_at_mut&lt;/code&gt; &lt;/a&gt;を使用して、スライスから2つの異なる可変サブスライスを作成します。</target>
        </trans-unit>
        <trans-unit id="24f7e027af97b0bcea482e03195ef7fce8ba5648" translate="yes" xml:space="preserve">
          <source>To work around this, we can use &lt;a href=&quot;#method.split_at_mut&quot;&gt;&lt;code&gt;split_at_mut&lt;/code&gt;&lt;/a&gt; to create two distinct sub-slices from a slice:</source>
          <target state="translated">これを回避するには、&lt;a href=&quot;#method.split_at_mut&quot;&gt; &lt;code&gt;split_at_mut&lt;/code&gt; &lt;/a&gt;を使用して、スライスから2つの異なるサブスライスを作成します。</target>
        </trans-unit>
        <trans-unit id="88426551199f60d0c53bc995bbba2a8ae94e26e1" translate="yes" xml:space="preserve">
          <source>To work with DSTs, Rust has a particular trait called the &lt;code&gt;Sized&lt;/code&gt; trait to determine whether or not a type&amp;rsquo;s size is known at compile time. This trait is automatically implemented for everything whose size is known at compile time. In addition, Rust implicitly adds a bound on &lt;code&gt;Sized&lt;/code&gt; to every generic function. That is, a generic function definition like this:</source>
          <target state="translated">DSTを操作するために、Rustには &lt;code&gt;Sized&lt;/code&gt; トレイトと呼ばれる特定のトレイトがあり、コンパイル時に型のサイズがわかっているかどうかを判別します。この特性は、コンパイル時にサイズがわかっているすべてのものに対して自動的に実装されます。さらに、Rustは暗黙的に &lt;code&gt;Sized&lt;/code&gt; の境界をすべてのジェネリック関数に追加します。つまり、次のような一般的な関数定義です。</target>
        </trans-unit>
        <trans-unit id="fb14220cb77cbb7e4cc1fc269b18360bfeb61f7b" translate="yes" xml:space="preserve">
          <source>To yank a version of a crate, run &lt;code&gt;cargo yank&lt;/code&gt; and specify which version you want to yank:</source>
          <target state="translated">クレートのバージョンをヤンクするには、 &lt;code&gt;cargo yank&lt;/code&gt; を実行して、ヤンクするバージョンを指定します。</target>
        </trans-unit>
        <trans-unit id="358ef599a863a7317d7b73949a61a65e9c8b5929" translate="yes" xml:space="preserve">
          <source>ToLowercase</source>
          <target state="translated">ToLowercase</target>
        </trans-unit>
        <trans-unit id="df38106c5dbe8437c114ca2d685149a2779acb46" translate="yes" xml:space="preserve">
          <source>ToLowercase::all</source>
          <target state="translated">ToLowercase::all</target>
        </trans-unit>
        <trans-unit id="bbeaa264c1c37f2bac007b1544ec3f5ad9fa247a" translate="yes" xml:space="preserve">
          <source>ToLowercase::any</source>
          <target state="translated">ToLowercase::any</target>
        </trans-unit>
        <trans-unit id="0a141811b0b02a8a6bc1f88e69b931b80579b5c2" translate="yes" xml:space="preserve">
          <source>ToLowercase::borrow</source>
          <target state="translated">ToLowercase::borrow</target>
        </trans-unit>
        <trans-unit id="cdeca1abdbe65f3026e21a79b8f904e797c979d8" translate="yes" xml:space="preserve">
          <source>ToLowercase::borrow_mut</source>
          <target state="translated">ToLowercase::borrow_mut</target>
        </trans-unit>
        <trans-unit id="04089a7fe4a382bdeab885ef9891fb5765277adf" translate="yes" xml:space="preserve">
          <source>ToLowercase::by_ref</source>
          <target state="translated">ToLowercase::by_ref</target>
        </trans-unit>
        <trans-unit id="a079ce9b966f7512985cc3db6325af88008cc5f5" translate="yes" xml:space="preserve">
          <source>ToLowercase::chain</source>
          <target state="translated">ToLowercase::chain</target>
        </trans-unit>
        <trans-unit id="34f89547554d65a0175fa66474bd90120ecce7b1" translate="yes" xml:space="preserve">
          <source>ToLowercase::clone</source>
          <target state="translated">ToLowercase::clone</target>
        </trans-unit>
        <trans-unit id="0a39078458104a1579ea1ffbefc1eff627ca4db9" translate="yes" xml:space="preserve">
          <source>ToLowercase::clone_from</source>
          <target state="translated">ToLowercase::clone_from</target>
        </trans-unit>
        <trans-unit id="69987693fa5c572002cf4a8687ae06044830821a" translate="yes" xml:space="preserve">
          <source>ToLowercase::clone_into</source>
          <target state="translated">ToLowercase::clone_into</target>
        </trans-unit>
        <trans-unit id="121cb5982b6d466308c6295488de685c5924188f" translate="yes" xml:space="preserve">
          <source>ToLowercase::cloned</source>
          <target state="translated">ToLowercase::cloned</target>
        </trans-unit>
        <trans-unit id="2a56c21b2935dd999e82afb8be288b273e7d2e4e" translate="yes" xml:space="preserve">
          <source>ToLowercase::cmp</source>
          <target state="translated">ToLowercase::cmp</target>
        </trans-unit>
        <trans-unit id="9a83c4a51b2449ab4001a1ea57020189f34eb86e" translate="yes" xml:space="preserve">
          <source>ToLowercase::collect</source>
          <target state="translated">ToLowercase::collect</target>
        </trans-unit>
        <trans-unit id="fc76b0e4ac6af8ee61de5ea6000b4e90b61281f6" translate="yes" xml:space="preserve">
          <source>ToLowercase::copied</source>
          <target state="translated">ToLowercase::copied</target>
        </trans-unit>
        <trans-unit id="ebd8500418acdbe357cc1847a2d0349da2ad6802" translate="yes" xml:space="preserve">
          <source>ToLowercase::count</source>
          <target state="translated">ToLowercase::count</target>
        </trans-unit>
        <trans-unit id="46c2bfc1c56cb3945b434e3354e83dfe8b8c506d" translate="yes" xml:space="preserve">
          <source>ToLowercase::cycle</source>
          <target state="translated">ToLowercase::cycle</target>
        </trans-unit>
        <trans-unit id="17c64b13d578e62f4865fa3a426a453511fad16f" translate="yes" xml:space="preserve">
          <source>ToLowercase::enumerate</source>
          <target state="translated">ToLowercase::enumerate</target>
        </trans-unit>
        <trans-unit id="22c6e7593fef2063b7782e7156f48b60a1a13824" translate="yes" xml:space="preserve">
          <source>ToLowercase::eq</source>
          <target state="translated">ToLowercase::eq</target>
        </trans-unit>
        <trans-unit id="a97a62afe9c15bee17e74d16036987e2c4a3f22a" translate="yes" xml:space="preserve">
          <source>ToLowercase::filter</source>
          <target state="translated">ToLowercase::filter</target>
        </trans-unit>
        <trans-unit id="282e7712aa0755dc3cee721bbb60ae3056ffd1b8" translate="yes" xml:space="preserve">
          <source>ToLowercase::filter_map</source>
          <target state="translated">ToLowercase::filter_map</target>
        </trans-unit>
        <trans-unit id="5e623530b92901b135346a206054ea74de34c74b" translate="yes" xml:space="preserve">
          <source>ToLowercase::find</source>
          <target state="translated">ToLowercase::find</target>
        </trans-unit>
        <trans-unit id="8199273d20714ffb35f8bf63fc8de1aeeb62aaaf" translate="yes" xml:space="preserve">
          <source>ToLowercase::find_map</source>
          <target state="translated">ToLowercase::find_map</target>
        </trans-unit>
        <trans-unit id="4ed7f75d1d13393082ea7b8eeecf7e820cecc331" translate="yes" xml:space="preserve">
          <source>ToLowercase::flat_map</source>
          <target state="translated">ToLowercase::flat_map</target>
        </trans-unit>
        <trans-unit id="8faef9a1d718b76295200253966c7806e7cdc59c" translate="yes" xml:space="preserve">
          <source>ToLowercase::flatten</source>
          <target state="translated">ToLowercase::flatten</target>
        </trans-unit>
        <trans-unit id="d060a84d6f235fd2215550273860f38eeab5eccf" translate="yes" xml:space="preserve">
          <source>ToLowercase::fmt</source>
          <target state="translated">ToLowercase::fmt</target>
        </trans-unit>
        <trans-unit id="8131b5a5bcf84d17a43fb10e483ba9ff1d8d359c" translate="yes" xml:space="preserve">
          <source>ToLowercase::fold</source>
          <target state="translated">ToLowercase::fold</target>
        </trans-unit>
        <trans-unit id="327b78b92e355c99705bbf603c2bb143fa92d2e9" translate="yes" xml:space="preserve">
          <source>ToLowercase::for_each</source>
          <target state="translated">ToLowercase::for_each</target>
        </trans-unit>
        <trans-unit id="c1d00ad3539f24458681e04a1741cd54badd39cf" translate="yes" xml:space="preserve">
          <source>ToLowercase::from</source>
          <target state="translated">ToLowercase::from</target>
        </trans-unit>
        <trans-unit id="7d595874443f42a9e344ead1449f7c72a2522b74" translate="yes" xml:space="preserve">
          <source>ToLowercase::fuse</source>
          <target state="translated">ToLowercase::fuse</target>
        </trans-unit>
        <trans-unit id="5f012ebb8814c9cf77a450ef55b693640b7421e7" translate="yes" xml:space="preserve">
          <source>ToLowercase::ge</source>
          <target state="translated">ToLowercase::ge</target>
        </trans-unit>
        <trans-unit id="a451e0c1969a73439fef2468147038b278d489fd" translate="yes" xml:space="preserve">
          <source>ToLowercase::gt</source>
          <target state="translated">ToLowercase::gt</target>
        </trans-unit>
        <trans-unit id="642b22a76015cab4922545ce0b1b8fce9e09e5ed" translate="yes" xml:space="preserve">
          <source>ToLowercase::inspect</source>
          <target state="translated">ToLowercase::inspect</target>
        </trans-unit>
        <trans-unit id="7ca3893f4299d51675bc4e51e48ab78b6e95e7ae" translate="yes" xml:space="preserve">
          <source>ToLowercase::into</source>
          <target state="translated">ToLowercase::into</target>
        </trans-unit>
        <trans-unit id="9baa58c23f7e0d689b278ecfab3e39c8efae52c3" translate="yes" xml:space="preserve">
          <source>ToLowercase::into_iter</source>
          <target state="translated">ToLowercase::into_iter</target>
        </trans-unit>
        <trans-unit id="41740e63b2346c1e13490d8bb5f5d3524774e936" translate="yes" xml:space="preserve">
          <source>ToLowercase::is_empty</source>
          <target state="translated">ToLowercase::is_empty</target>
        </trans-unit>
        <trans-unit id="0a3555fc3fa048af9c1a10c2d056047061c3acad" translate="yes" xml:space="preserve">
          <source>ToLowercase::is_sorted</source>
          <target state="translated">ToLowercase::is_sorted</target>
        </trans-unit>
        <trans-unit id="d1e0425d483ec70bb6984df2a767d8b9e4f434c4" translate="yes" xml:space="preserve">
          <source>ToLowercase::is_sorted_by</source>
          <target state="translated">ToLowercase::is_sorted_by</target>
        </trans-unit>
        <trans-unit id="a66c5bf8964eab56ac90671d7ee744d61569a85f" translate="yes" xml:space="preserve">
          <source>ToLowercase::is_sorted_by_key</source>
          <target state="translated">ToLowercase::is_sorted_by_key</target>
        </trans-unit>
        <trans-unit id="f9ef704f171d5f967ad9a902b9e6c885aa657d95" translate="yes" xml:space="preserve">
          <source>ToLowercase::last</source>
          <target state="translated">ToLowercase::last</target>
        </trans-unit>
        <trans-unit id="d3f98dd839d26ad724880104a40c7e70d33d18c3" translate="yes" xml:space="preserve">
          <source>ToLowercase::le</source>
          <target state="translated">ToLowercase::le</target>
        </trans-unit>
        <trans-unit id="e1ba36fd3934ba511b5d0af5c6f135a35664771b" translate="yes" xml:space="preserve">
          <source>ToLowercase::len</source>
          <target state="translated">ToLowercase::len</target>
        </trans-unit>
        <trans-unit id="2eed1cdf88b1cb0a9fa1233f81e8f43967248498" translate="yes" xml:space="preserve">
          <source>ToLowercase::lt</source>
          <target state="translated">ToLowercase::lt</target>
        </trans-unit>
        <trans-unit id="e43226c948078b9cc9aebaa496f80af6656f0917" translate="yes" xml:space="preserve">
          <source>ToLowercase::map</source>
          <target state="translated">ToLowercase::map</target>
        </trans-unit>
        <trans-unit id="e0c53789432635e282bac9afc1520196b7c560e8" translate="yes" xml:space="preserve">
          <source>ToLowercase::max</source>
          <target state="translated">ToLowercase::max</target>
        </trans-unit>
        <trans-unit id="903a830f2d66f982a4644a703e0e8e4957273461" translate="yes" xml:space="preserve">
          <source>ToLowercase::max_by</source>
          <target state="translated">ToLowercase::max_by</target>
        </trans-unit>
        <trans-unit id="18bae373fc9373515a693f2601a3ad81cbde3459" translate="yes" xml:space="preserve">
          <source>ToLowercase::max_by_key</source>
          <target state="translated">ToLowercase::max_by_key</target>
        </trans-unit>
        <trans-unit id="bb9afa7050228536bbc7504f5c5dfc47a13e78c0" translate="yes" xml:space="preserve">
          <source>ToLowercase::min</source>
          <target state="translated">ToLowercase::min</target>
        </trans-unit>
        <trans-unit id="77c4813b999aa04010a0f28c8553bcc6214e1616" translate="yes" xml:space="preserve">
          <source>ToLowercase::min_by</source>
          <target state="translated">ToLowercase::min_by</target>
        </trans-unit>
        <trans-unit id="423a7c3614737a7cb7033368fb85813297ba5915" translate="yes" xml:space="preserve">
          <source>ToLowercase::min_by_key</source>
          <target state="translated">ToLowercase::min_by_key</target>
        </trans-unit>
        <trans-unit id="45cf81c6356fb6305106b81d4e38e7f435f86cc1" translate="yes" xml:space="preserve">
          <source>ToLowercase::ne</source>
          <target state="translated">ToLowercase::ne</target>
        </trans-unit>
        <trans-unit id="a71fc3ee26e013ac8645c417796e09cd264a122e" translate="yes" xml:space="preserve">
          <source>ToLowercase::next</source>
          <target state="translated">ToLowercase::next</target>
        </trans-unit>
        <trans-unit id="1911198040fb257baaa909fbd9e0ff4bd63738b2" translate="yes" xml:space="preserve">
          <source>ToLowercase::nth</source>
          <target state="translated">ToLowercase::nth</target>
        </trans-unit>
        <trans-unit id="8e0ec3fa9f7c6b4e02f5cdbcceafdedd84b428e3" translate="yes" xml:space="preserve">
          <source>ToLowercase::partial_cmp</source>
          <target state="translated">ToLowercase::partial_cmp</target>
        </trans-unit>
        <trans-unit id="47c77ae9e15794fc333d6ed8815d4414bb103610" translate="yes" xml:space="preserve">
          <source>ToLowercase::partition</source>
          <target state="translated">ToLowercase::partition</target>
        </trans-unit>
        <trans-unit id="75ec1c2334a1ca3250b6d8818285245c4e4389b7" translate="yes" xml:space="preserve">
          <source>ToLowercase::peekable</source>
          <target state="translated">ToLowercase::peekable</target>
        </trans-unit>
        <trans-unit id="5bd4eb545154844db83963b7bf6e24d4160c4184" translate="yes" xml:space="preserve">
          <source>ToLowercase::position</source>
          <target state="translated">ToLowercase::position</target>
        </trans-unit>
        <trans-unit id="da1c2a6ce254ef365fc893f21ebcfb9884ec4d92" translate="yes" xml:space="preserve">
          <source>ToLowercase::product</source>
          <target state="translated">ToLowercase::product</target>
        </trans-unit>
        <trans-unit id="7513906fb803029e9d762eb5a94c745eb5662524" translate="yes" xml:space="preserve">
          <source>ToLowercase::rev</source>
          <target state="translated">ToLowercase::rev</target>
        </trans-unit>
        <trans-unit id="418774bd5cf3162562c6090441d234e9d61a03d7" translate="yes" xml:space="preserve">
          <source>ToLowercase::rposition</source>
          <target state="translated">ToLowercase::rposition</target>
        </trans-unit>
        <trans-unit id="9b317c9f2c5a4d58ea3427624437ce70f6752c98" translate="yes" xml:space="preserve">
          <source>ToLowercase::scan</source>
          <target state="translated">ToLowercase::scan</target>
        </trans-unit>
        <trans-unit id="2347172afd0d4f896ed7b4c55d0f9d8e2916251b" translate="yes" xml:space="preserve">
          <source>ToLowercase::size_hint</source>
          <target state="translated">ToLowercase::size_hint</target>
        </trans-unit>
        <trans-unit id="418c2ea2c35afdc50dcf9a90930d3ce62e8f3999" translate="yes" xml:space="preserve">
          <source>ToLowercase::skip</source>
          <target state="translated">ToLowercase::skip</target>
        </trans-unit>
        <trans-unit id="95df49075bec9d23f70a04c44f6a727846e429e6" translate="yes" xml:space="preserve">
          <source>ToLowercase::skip_while</source>
          <target state="translated">ToLowercase::skip_while</target>
        </trans-unit>
        <trans-unit id="b9d44057d9ed2703572ffed49f6eca5288b3d100" translate="yes" xml:space="preserve">
          <source>ToLowercase::step_by</source>
          <target state="translated">ToLowercase::step_by</target>
        </trans-unit>
        <trans-unit id="12fc6d57d9454f947a272a38199873e4fabe30e6" translate="yes" xml:space="preserve">
          <source>ToLowercase::sum</source>
          <target state="translated">ToLowercase::sum</target>
        </trans-unit>
        <trans-unit id="0f151b1e0bb55576903eeeb5a1d3d1df40fa455c" translate="yes" xml:space="preserve">
          <source>ToLowercase::take</source>
          <target state="translated">ToLowercase::take</target>
        </trans-unit>
        <trans-unit id="bb7ec83ca1b296882f68aab3b80d313fe4becdda" translate="yes" xml:space="preserve">
          <source>ToLowercase::take_while</source>
          <target state="translated">ToLowercase::take_while</target>
        </trans-unit>
        <trans-unit id="4ee080cf3eb36fa9ffb413ea40781d5206121d04" translate="yes" xml:space="preserve">
          <source>ToLowercase::to_owned</source>
          <target state="translated">ToLowercase::to_owned</target>
        </trans-unit>
        <trans-unit id="89719f79b975bafdc49f6c2bf1b53c77dd82479f" translate="yes" xml:space="preserve">
          <source>ToLowercase::to_string</source>
          <target state="translated">ToLowercase::to_string</target>
        </trans-unit>
        <trans-unit id="02fb5f5e1e24ebbf9a57d55d395e203de6f1bb79" translate="yes" xml:space="preserve">
          <source>ToLowercase::try_fold</source>
          <target state="translated">ToLowercase::try_fold</target>
        </trans-unit>
        <trans-unit id="24adb2676fd932bafa66d72575c91291c6415cb3" translate="yes" xml:space="preserve">
          <source>ToLowercase::try_for_each</source>
          <target state="translated">ToLowercase::try_for_each</target>
        </trans-unit>
        <trans-unit id="ca18cfcbad0e84fa95fbec8b5bfb913cdebdfd50" translate="yes" xml:space="preserve">
          <source>ToLowercase::try_from</source>
          <target state="translated">ToLowercase::try_from</target>
        </trans-unit>
        <trans-unit id="e06d04b43ebaa98937e8ae299a145ab53f8f8401" translate="yes" xml:space="preserve">
          <source>ToLowercase::try_into</source>
          <target state="translated">ToLowercase::try_into</target>
        </trans-unit>
        <trans-unit id="37b6363c64db2b818bf5770928eeb9cb5799b27c" translate="yes" xml:space="preserve">
          <source>ToLowercase::type_id</source>
          <target state="translated">ToLowercase::type_id</target>
        </trans-unit>
        <trans-unit id="5dab7a97b855d1005e423aac5a301136ccbfbda8" translate="yes" xml:space="preserve">
          <source>ToLowercase::unzip</source>
          <target state="translated">ToLowercase::unzip</target>
        </trans-unit>
        <trans-unit id="8c6300316ee7d9e235cf97abcd7ffe7ee60f526a" translate="yes" xml:space="preserve">
          <source>ToLowercase::zip</source>
          <target state="translated">ToLowercase::zip</target>
        </trans-unit>
        <trans-unit id="6a954abfe9e5f07fb766f0356ed1234d8f9b2362" translate="yes" xml:space="preserve">
          <source>ToOwned</source>
          <target state="translated">ToOwned</target>
        </trans-unit>
        <trans-unit id="88395f188f7e1627b5813c10232224a853eb2ce1" translate="yes" xml:space="preserve">
          <source>ToOwned::clone_into</source>
          <target state="translated">ToOwned::clone_into</target>
        </trans-unit>
        <trans-unit id="b54aeb29a238430e61c4864d679de09e146fc8bd" translate="yes" xml:space="preserve">
          <source>ToOwned::to_owned</source>
          <target state="translated">ToOwned::to_owned</target>
        </trans-unit>
        <trans-unit id="db76836dc2d12f75bc694c079718628342759cd3" translate="yes" xml:space="preserve">
          <source>ToSocketAddrs</source>
          <target state="translated">ToSocketAddrs</target>
        </trans-unit>
        <trans-unit id="0fed83f8d392d8ac77157990f089f9649d9b7750" translate="yes" xml:space="preserve">
          <source>ToSocketAddrs::to_socket_addrs</source>
          <target state="translated">ToSocketAddrs::to_socket_addrs</target>
        </trans-unit>
        <trans-unit id="1dbc7385badbfda548fb27e2160a33cf32c0f545" translate="yes" xml:space="preserve">
          <source>ToString</source>
          <target state="translated">ToString</target>
        </trans-unit>
        <trans-unit id="44b9808561fdc5221237b58497f052b0ab411690" translate="yes" xml:space="preserve">
          <source>ToString::to_string</source>
          <target state="translated">ToString::to_string</target>
        </trans-unit>
        <trans-unit id="0e33b561569f62cb10ee567c1f64d4f901389c05" translate="yes" xml:space="preserve">
          <source>ToUppercase</source>
          <target state="translated">ToUppercase</target>
        </trans-unit>
        <trans-unit id="9ff9a36e95ac5564578763dcb0e10b5a089787be" translate="yes" xml:space="preserve">
          <source>ToUppercase::all</source>
          <target state="translated">ToUppercase::all</target>
        </trans-unit>
        <trans-unit id="65730a9e88411b06193ba55e82da8ee1907a8064" translate="yes" xml:space="preserve">
          <source>ToUppercase::any</source>
          <target state="translated">ToUppercase::any</target>
        </trans-unit>
        <trans-unit id="7bbc3824337aaeab2c429030633a1af5ed905e80" translate="yes" xml:space="preserve">
          <source>ToUppercase::borrow</source>
          <target state="translated">ToUppercase::borrow</target>
        </trans-unit>
        <trans-unit id="054e212cd833cb188e6198592b3d47a12224a8d7" translate="yes" xml:space="preserve">
          <source>ToUppercase::borrow_mut</source>
          <target state="translated">ToUppercase::borrow_mut</target>
        </trans-unit>
        <trans-unit id="6cb0a8be2d9bacab3bc53f929148bf74eddc427a" translate="yes" xml:space="preserve">
          <source>ToUppercase::by_ref</source>
          <target state="translated">ToUppercase::by_ref</target>
        </trans-unit>
        <trans-unit id="f6523db9347a61697b6b9197bca2d6fba8a42d3c" translate="yes" xml:space="preserve">
          <source>ToUppercase::chain</source>
          <target state="translated">ToUppercase::chain</target>
        </trans-unit>
        <trans-unit id="c0aca2868b888310176cab83baeec3b2d775557f" translate="yes" xml:space="preserve">
          <source>ToUppercase::clone</source>
          <target state="translated">ToUppercase::clone</target>
        </trans-unit>
        <trans-unit id="67fd93e201a873e97c66908ead7ceae8bc1e8a92" translate="yes" xml:space="preserve">
          <source>ToUppercase::clone_from</source>
          <target state="translated">ToUppercase::clone_from</target>
        </trans-unit>
        <trans-unit id="b84ef7303ff66cf2803f532b77195b1cf5d457a1" translate="yes" xml:space="preserve">
          <source>ToUppercase::clone_into</source>
          <target state="translated">ToUppercase::clone_into</target>
        </trans-unit>
        <trans-unit id="5ccbf12c4818e31f1595aa777831465b36f69a51" translate="yes" xml:space="preserve">
          <source>ToUppercase::cloned</source>
          <target state="translated">ToUppercase::cloned</target>
        </trans-unit>
        <trans-unit id="a8f2e905cd5750074d352d368e76df6b39f96427" translate="yes" xml:space="preserve">
          <source>ToUppercase::cmp</source>
          <target state="translated">ToUppercase::cmp</target>
        </trans-unit>
        <trans-unit id="1dc5a2f9004fb521903e5e5a3fd364dc11757205" translate="yes" xml:space="preserve">
          <source>ToUppercase::collect</source>
          <target state="translated">ToUppercase::collect</target>
        </trans-unit>
        <trans-unit id="af8f9ceea80fc5e950363e9318dd158d01a4d040" translate="yes" xml:space="preserve">
          <source>ToUppercase::copied</source>
          <target state="translated">ToUppercase::copied</target>
        </trans-unit>
        <trans-unit id="1366fc011a472ff5d53cde6f1ac86461228351e7" translate="yes" xml:space="preserve">
          <source>ToUppercase::count</source>
          <target state="translated">ToUppercase::count</target>
        </trans-unit>
        <trans-unit id="1184c3c693dff48405ca7548cca0ed458ff29830" translate="yes" xml:space="preserve">
          <source>ToUppercase::cycle</source>
          <target state="translated">ToUppercase::cycle</target>
        </trans-unit>
        <trans-unit id="4e91911466f6b5af4078b70e11c4d24775fe742f" translate="yes" xml:space="preserve">
          <source>ToUppercase::enumerate</source>
          <target state="translated">ToUppercase::enumerate</target>
        </trans-unit>
        <trans-unit id="7840d75ecceac6bb8014df3896750d9d72c6c4f4" translate="yes" xml:space="preserve">
          <source>ToUppercase::eq</source>
          <target state="translated">ToUppercase::eq</target>
        </trans-unit>
        <trans-unit id="2a9bfa9a45635d09ff4f0e7dbad7c78cf4865a99" translate="yes" xml:space="preserve">
          <source>ToUppercase::filter</source>
          <target state="translated">ToUppercase::filter</target>
        </trans-unit>
        <trans-unit id="a2ce94b0c7944e165ba6c67b1e1d6438853b3133" translate="yes" xml:space="preserve">
          <source>ToUppercase::filter_map</source>
          <target state="translated">ToUppercase::filter_map</target>
        </trans-unit>
        <trans-unit id="33b7908aaa91c2cca1edd3fbd1eb5ed2b7161ab8" translate="yes" xml:space="preserve">
          <source>ToUppercase::find</source>
          <target state="translated">ToUppercase::find</target>
        </trans-unit>
        <trans-unit id="26582c132713274fb6090fc39fe168d493ee012a" translate="yes" xml:space="preserve">
          <source>ToUppercase::find_map</source>
          <target state="translated">ToUppercase::find_map</target>
        </trans-unit>
        <trans-unit id="d2233ee6bb72d979bc01f41100247c5902cf0607" translate="yes" xml:space="preserve">
          <source>ToUppercase::flat_map</source>
          <target state="translated">ToUppercase::flat_map</target>
        </trans-unit>
        <trans-unit id="bc467f30c7752c24841765febf75cc9fdc574574" translate="yes" xml:space="preserve">
          <source>ToUppercase::flatten</source>
          <target state="translated">ToUppercase::flatten</target>
        </trans-unit>
        <trans-unit id="da04bbd5685fac2d5a4df3c9db6cca8ac3ddfa78" translate="yes" xml:space="preserve">
          <source>ToUppercase::fmt</source>
          <target state="translated">ToUppercase::fmt</target>
        </trans-unit>
        <trans-unit id="dab772b50aae344c74f698ba5170622c5f015ee3" translate="yes" xml:space="preserve">
          <source>ToUppercase::fold</source>
          <target state="translated">ToUppercase::fold</target>
        </trans-unit>
        <trans-unit id="771853b6cd0b3a3d225b473ef9703bb5e4303729" translate="yes" xml:space="preserve">
          <source>ToUppercase::for_each</source>
          <target state="translated">ToUppercase::for_each</target>
        </trans-unit>
        <trans-unit id="8ce8c4bb893f0605c572e1569c0a3c898fc706ea" translate="yes" xml:space="preserve">
          <source>ToUppercase::from</source>
          <target state="translated">ToUppercase::from</target>
        </trans-unit>
        <trans-unit id="e5bc2c74a5fd665c9a82c2a33e80270730f97b12" translate="yes" xml:space="preserve">
          <source>ToUppercase::fuse</source>
          <target state="translated">ToUppercase::fuse</target>
        </trans-unit>
        <trans-unit id="20067e8f8574346c33f6af0deb21cc95edf75430" translate="yes" xml:space="preserve">
          <source>ToUppercase::ge</source>
          <target state="translated">ToUppercase::ge</target>
        </trans-unit>
        <trans-unit id="d691aa9e30d434c7acd37842ea89626858043c5a" translate="yes" xml:space="preserve">
          <source>ToUppercase::gt</source>
          <target state="translated">ToUppercase::gt</target>
        </trans-unit>
        <trans-unit id="2c07bcd9aa88f2987da2c05609b8b051fbd0bd49" translate="yes" xml:space="preserve">
          <source>ToUppercase::inspect</source>
          <target state="translated">ToUppercase::inspect</target>
        </trans-unit>
        <trans-unit id="fdebac9771e781ff415a919dcfc0e2e2f813f95f" translate="yes" xml:space="preserve">
          <source>ToUppercase::into</source>
          <target state="translated">ToUppercase::into</target>
        </trans-unit>
        <trans-unit id="28c925e3769d53d774548da83c53adf049d9614e" translate="yes" xml:space="preserve">
          <source>ToUppercase::into_iter</source>
          <target state="translated">ToUppercase::into_iter</target>
        </trans-unit>
        <trans-unit id="bf3856a1c7cdbe8a6b0b5d5447d4f1dda66c5b87" translate="yes" xml:space="preserve">
          <source>ToUppercase::is_empty</source>
          <target state="translated">ToUppercase::is_empty</target>
        </trans-unit>
        <trans-unit id="e56ebe838b86d90990ba23ebb8e7d7b475bfba70" translate="yes" xml:space="preserve">
          <source>ToUppercase::is_sorted</source>
          <target state="translated">ToUppercase::is_sorted</target>
        </trans-unit>
        <trans-unit id="e213f890c3567bf89ebbd96dd28396c3c8369989" translate="yes" xml:space="preserve">
          <source>ToUppercase::is_sorted_by</source>
          <target state="translated">ToUppercase::is_sorted_by</target>
        </trans-unit>
        <trans-unit id="4214e06077f37c115583c69ea8457f9ca4ca03c8" translate="yes" xml:space="preserve">
          <source>ToUppercase::is_sorted_by_key</source>
          <target state="translated">ToUppercase::is_sorted_by_key</target>
        </trans-unit>
        <trans-unit id="43c20634324c1e57c53610dd095c7b85f97be6a8" translate="yes" xml:space="preserve">
          <source>ToUppercase::last</source>
          <target state="translated">ToUppercase::last</target>
        </trans-unit>
        <trans-unit id="e15b9289846aa62aa7c399eec130546dddf92570" translate="yes" xml:space="preserve">
          <source>ToUppercase::le</source>
          <target state="translated">ToUppercase::le</target>
        </trans-unit>
        <trans-unit id="bf4ae1725f8c939f34b0f3698672e2eca8d46e36" translate="yes" xml:space="preserve">
          <source>ToUppercase::len</source>
          <target state="translated">ToUppercase::len</target>
        </trans-unit>
        <trans-unit id="6ef86484cb6e83aca67edc255bfe91855fddeaee" translate="yes" xml:space="preserve">
          <source>ToUppercase::lt</source>
          <target state="translated">ToUppercase::lt</target>
        </trans-unit>
        <trans-unit id="36fb30f84e7d12187cc3a5d20674f0ffa2e7e434" translate="yes" xml:space="preserve">
          <source>ToUppercase::map</source>
          <target state="translated">ToUppercase::map</target>
        </trans-unit>
        <trans-unit id="a5794f06c8f621ebfd36483cb2bdfba69962a46b" translate="yes" xml:space="preserve">
          <source>ToUppercase::max</source>
          <target state="translated">ToUppercase::max</target>
        </trans-unit>
        <trans-unit id="54ed5ffb42b174875a2cfcdf299aa03324e7d8e8" translate="yes" xml:space="preserve">
          <source>ToUppercase::max_by</source>
          <target state="translated">ToUppercase::max_by</target>
        </trans-unit>
        <trans-unit id="82140a942c03457466b33d70a38f8b426ee443a8" translate="yes" xml:space="preserve">
          <source>ToUppercase::max_by_key</source>
          <target state="translated">ToUppercase::max_by_key</target>
        </trans-unit>
        <trans-unit id="8c46ff457e70dbefd5377da1fe14a1d716feed69" translate="yes" xml:space="preserve">
          <source>ToUppercase::min</source>
          <target state="translated">ToUppercase::min</target>
        </trans-unit>
        <trans-unit id="1f4f06fa647a15bfd6777e3ad80989539da952c2" translate="yes" xml:space="preserve">
          <source>ToUppercase::min_by</source>
          <target state="translated">ToUppercase::min_by</target>
        </trans-unit>
        <trans-unit id="d2ca7b43662db6e83751c9781321c5f447b69b54" translate="yes" xml:space="preserve">
          <source>ToUppercase::min_by_key</source>
          <target state="translated">ToUppercase::min_by_key</target>
        </trans-unit>
        <trans-unit id="a2c10d642735dd01dd2230f6eb42d2d15de01ca4" translate="yes" xml:space="preserve">
          <source>ToUppercase::ne</source>
          <target state="translated">ToUppercase::ne</target>
        </trans-unit>
        <trans-unit id="bdcf8b574275972312b79411fc90c298fec5c707" translate="yes" xml:space="preserve">
          <source>ToUppercase::next</source>
          <target state="translated">ToUppercase::next</target>
        </trans-unit>
        <trans-unit id="d3b98223ff39c0cf8bc6901176a913dbb5af5a3f" translate="yes" xml:space="preserve">
          <source>ToUppercase::nth</source>
          <target state="translated">ToUppercase::nth</target>
        </trans-unit>
        <trans-unit id="ac55c59ffb3d1b90b5281f1cdb8221031a9f3d86" translate="yes" xml:space="preserve">
          <source>ToUppercase::partial_cmp</source>
          <target state="translated">ToUppercase::partial_cmp</target>
        </trans-unit>
        <trans-unit id="43ba4010531c56c76a71cac5c7783bb9326c06ff" translate="yes" xml:space="preserve">
          <source>ToUppercase::partition</source>
          <target state="translated">ToUppercase::partition</target>
        </trans-unit>
        <trans-unit id="8a67cd96d9e9df3939b7f6b2d037a84acda5915a" translate="yes" xml:space="preserve">
          <source>ToUppercase::peekable</source>
          <target state="translated">ToUppercase::peekable</target>
        </trans-unit>
        <trans-unit id="c5de4cd05b5eea91f6372ea13496d89698a886d9" translate="yes" xml:space="preserve">
          <source>ToUppercase::position</source>
          <target state="translated">ToUppercase::position</target>
        </trans-unit>
        <trans-unit id="3276e7acdf8a52ca46452466df5445f95d4c42ce" translate="yes" xml:space="preserve">
          <source>ToUppercase::product</source>
          <target state="translated">ToUppercase::product</target>
        </trans-unit>
        <trans-unit id="2ec3aca6fa0998e131a8dbb7e0429f53b8e20e3a" translate="yes" xml:space="preserve">
          <source>ToUppercase::rev</source>
          <target state="translated">ToUppercase::rev</target>
        </trans-unit>
        <trans-unit id="1f5b04931231d64a89f93330632ae0491d9a8306" translate="yes" xml:space="preserve">
          <source>ToUppercase::rposition</source>
          <target state="translated">ToUppercase::rposition</target>
        </trans-unit>
        <trans-unit id="bd0bd16a7f62be84e2b4f57e866e556615bf5f51" translate="yes" xml:space="preserve">
          <source>ToUppercase::scan</source>
          <target state="translated">ToUppercase::scan</target>
        </trans-unit>
        <trans-unit id="c12a079f9acc9eb022d00c3c9e691984df24e3dd" translate="yes" xml:space="preserve">
          <source>ToUppercase::size_hint</source>
          <target state="translated">ToUppercase::size_hint</target>
        </trans-unit>
        <trans-unit id="36cc8342ae3ebfcc66e29de8713ad4b5d25ed1ec" translate="yes" xml:space="preserve">
          <source>ToUppercase::skip</source>
          <target state="translated">ToUppercase::skip</target>
        </trans-unit>
        <trans-unit id="bc763b46d6ffe3cde30022e6b310b987fb4690fc" translate="yes" xml:space="preserve">
          <source>ToUppercase::skip_while</source>
          <target state="translated">ToUppercase::skip_while</target>
        </trans-unit>
        <trans-unit id="bdd73144830ccf5acc66a08a0eb4055b58dd100c" translate="yes" xml:space="preserve">
          <source>ToUppercase::step_by</source>
          <target state="translated">ToUppercase::step_by</target>
        </trans-unit>
        <trans-unit id="355510b3a2c94feee0516eb6236e6b26c520c86f" translate="yes" xml:space="preserve">
          <source>ToUppercase::sum</source>
          <target state="translated">ToUppercase::sum</target>
        </trans-unit>
        <trans-unit id="5f1bfaa41ae891ff2a87080b765b405813dfaf1e" translate="yes" xml:space="preserve">
          <source>ToUppercase::take</source>
          <target state="translated">ToUppercase::take</target>
        </trans-unit>
        <trans-unit id="ace4eaaac22836c883eb26f26b69083a1e81c44a" translate="yes" xml:space="preserve">
          <source>ToUppercase::take_while</source>
          <target state="translated">ToUppercase::take_while</target>
        </trans-unit>
        <trans-unit id="aeac81822411ec59962d593c1135903013fb64dd" translate="yes" xml:space="preserve">
          <source>ToUppercase::to_owned</source>
          <target state="translated">ToUppercase::to_owned</target>
        </trans-unit>
        <trans-unit id="c254c93eabb3947af47ca116107ff60db0f65f9f" translate="yes" xml:space="preserve">
          <source>ToUppercase::to_string</source>
          <target state="translated">ToUppercase::to_string</target>
        </trans-unit>
        <trans-unit id="9586835b3ffa68bc81bff272ded62df7bfd896a5" translate="yes" xml:space="preserve">
          <source>ToUppercase::try_fold</source>
          <target state="translated">ToUppercase::try_fold</target>
        </trans-unit>
        <trans-unit id="3285dc30d7466785bb24e349a2a90f48ee1105df" translate="yes" xml:space="preserve">
          <source>ToUppercase::try_for_each</source>
          <target state="translated">ToUppercase::try_for_each</target>
        </trans-unit>
        <trans-unit id="f78675d80da0fb2dc076781338842ee7388e6bbb" translate="yes" xml:space="preserve">
          <source>ToUppercase::try_from</source>
          <target state="translated">ToUppercase::try_from</target>
        </trans-unit>
        <trans-unit id="bbc85f420c55ff506706c343e3d016f559155d33" translate="yes" xml:space="preserve">
          <source>ToUppercase::try_into</source>
          <target state="translated">ToUppercase::try_into</target>
        </trans-unit>
        <trans-unit id="67c5523cb2fdea348c069bcedcae5b194e0fa100" translate="yes" xml:space="preserve">
          <source>ToUppercase::type_id</source>
          <target state="translated">ToUppercase::type_id</target>
        </trans-unit>
        <trans-unit id="59512192fd21e6e15883e4c5f16fa785a7ae4b9e" translate="yes" xml:space="preserve">
          <source>ToUppercase::unzip</source>
          <target state="translated">ToUppercase::unzip</target>
        </trans-unit>
        <trans-unit id="71c5320853e9bf97d3c8e47e587d200e6ab7e991" translate="yes" xml:space="preserve">
          <source>ToUppercase::zip</source>
          <target state="translated">ToUppercase::zip</target>
        </trans-unit>
        <trans-unit id="c38c6c1f3a2743f8626703abb302e403d20ff81c" translate="yes" xml:space="preserve">
          <source>Tokens</source>
          <target state="translated">Tokens</target>
        </trans-unit>
        <trans-unit id="23b07a92f99f26864b1d4cab09dbe7e6ffc01402" translate="yes" xml:space="preserve">
          <source>Tokens are primitive productions in the grammar defined by regular (non-recursive) languages. Rust source input can be broken down into the following kinds of tokens:</source>
          <target state="translated">トークンは、通常の (非再帰的な)言語で定義された文法のプリミティブな生成物です。Rustのソース入力は、以下の種類のトークンに分解することができます。</target>
        </trans-unit>
        <trans-unit id="d3997b5b9595479642fa6a353b8f62de4c85bdb4" translate="yes" xml:space="preserve">
          <source>Too few type arguments were supplied for a function. For example:</source>
          <target state="translated">関数に与えられる型引数が少なすぎました。例えば</target>
        </trans-unit>
        <trans-unit id="b64cc80b4d048074e951f53af2266c9b980ecc1d" translate="yes" xml:space="preserve">
          <source>Too many type arguments were supplied for a function. For example:</source>
          <target state="translated">関数に与えられた型引数が多すぎました。例えば</target>
        </trans-unit>
        <trans-unit id="3becdad8640a8a7664cb1587373bbed530e9eaef" translate="yes" xml:space="preserve">
          <source>Tool attributes</source>
          <target state="translated">ツール属性</target>
        </trans-unit>
        <trans-unit id="298b5435880f729f28b40fb8cb4d6d358f7d7bda" translate="yes" xml:space="preserve">
          <source>Tool attributes are not available if the &lt;a href=&quot;items/modules#prelude-items&quot;&gt;&lt;code&gt;no_implicit_prelude&lt;/code&gt;&lt;/a&gt; attribute is used.</source>
          <target state="translated">&lt;a href=&quot;items/modules#prelude-items&quot;&gt; &lt;code&gt;no_implicit_prelude&lt;/code&gt; &lt;/a&gt;属性が使用されている場合、ツール属性は使用できません。</target>
        </trans-unit>
        <trans-unit id="04ecf72079460c624f56de2aec19167e9b592e5f" translate="yes" xml:space="preserve">
          <source>Tool lint attributes</source>
          <target state="translated">ツールのリント属性</target>
        </trans-unit>
        <trans-unit id="9e4ff695f8d7f54d10234c8c693febf11bceeb0a" translate="yes" xml:space="preserve">
          <source>Tool lints allows using scoped lints, to &lt;code&gt;allow&lt;/code&gt;, &lt;code&gt;warn&lt;/code&gt;, &lt;code&gt;deny&lt;/code&gt; or &lt;code&gt;forbid&lt;/code&gt; lints of certain tools.</source>
          <target state="translated">ツールリントでは、スコープ付きリントを &lt;code&gt;allow&lt;/code&gt; 、特定のツールのリントを許可、 &lt;code&gt;warn&lt;/code&gt; 、 &lt;code&gt;deny&lt;/code&gt; または &lt;code&gt;forbid&lt;/code&gt; できます。</target>
        </trans-unit>
        <trans-unit id="b0cfacecf587078db6db43488caa6d580978c4bb" translate="yes" xml:space="preserve">
          <source>Tool lints only get checked when the associated tool is active. If a lint attribute, such as &lt;code&gt;allow&lt;/code&gt;, references a nonexistent tool lint, the compiler will not warn about the nonexistent lint until you use the tool.</source>
          <target state="translated">ツールリントは、関連するツールがアクティブな場合にのみチェックされます。 &lt;code&gt;allow&lt;/code&gt; などのlint属性が存在しないツールlintを参照する場合、コンパイラーはツールを使用するまで、存在しないlintについて警告しません。</target>
        </trans-unit>
        <trans-unit id="2b3bf7074f1000742128073f003a13e0d75375fa" translate="yes" xml:space="preserve">
          <source>Tracking the inebriation of customers at a bar</source>
          <target state="translated">バーでの客の酩酊感を追う</target>
        </trans-unit>
        <trans-unit id="dad674e48704a92597b8a13244ba1d8ca29324b7" translate="yes" xml:space="preserve">
          <source>Trade-offs</source>
          <target state="translated">Trade-offs</target>
        </trans-unit>
        <trans-unit id="8a6c5b14d85fb7777855348d57172119a05a9066" translate="yes" xml:space="preserve">
          <source>Trade-offs of the State Pattern</source>
          <target state="translated">状態パターンのトレードオフ</target>
        </trans-unit>
        <trans-unit id="b36366d44b437b0f859e29f4614b0107cecfe355" translate="yes" xml:space="preserve">
          <source>Trait</source>
          <target state="translated">Trait</target>
        </trans-unit>
        <trans-unit id="7418cda1dddd9f707baf2b1acabeb7297ddae8f4" translate="yes" xml:space="preserve">
          <source>Trait Bound Syntax</source>
          <target state="translated">Trait Bound 構文</target>
        </trans-unit>
        <trans-unit id="79d040a039f209d4b088e4414045e49f19a318f9" translate="yes" xml:space="preserve">
          <source>Trait Implementation Coherence</source>
          <target state="translated">形質実装のコヒーレンス</target>
        </trans-unit>
        <trans-unit id="26b898f7f42ac0607067211907cfe144baef2099" translate="yes" xml:space="preserve">
          <source>Trait Implementations</source>
          <target state="translated">Traitの実装</target>
        </trans-unit>
        <trans-unit id="29c33623e3eecc134b62bfbdf8421daa25449235" translate="yes" xml:space="preserve">
          <source>Trait Object Layout</source>
          <target state="translated">オブジェクトのレイアウト</target>
        </trans-unit>
        <trans-unit id="1d17f32f109df2cae8776e118c0cd08d010484eb" translate="yes" xml:space="preserve">
          <source>Trait Object Lifetime Bounds</source>
          <target state="translated">特性オブジェクトの寿命の境界</target>
        </trans-unit>
        <trans-unit id="0f2fa6f9f52d26ee86cd56ce4895853eea3665a6" translate="yes" xml:space="preserve">
          <source>Trait Objects Perform Dynamic Dispatch</source>
          <target state="translated">Trait オブジェクトが動的なディスパッチを実行する</target>
        </trans-unit>
        <trans-unit id="a75e14ab76ff0ab816d5d3c2937abd862e423b2f" translate="yes" xml:space="preserve">
          <source>Trait and lifetime bounds</source>
          <target state="translated">形質と生涯の境界線</target>
        </trans-unit>
        <trans-unit id="41af368f93d8a39d7122b161977ffe16f6a12e35" translate="yes" xml:space="preserve">
          <source>Trait and lifetime bounds are also used to name &lt;a href=&quot;types/trait-object&quot;&gt;trait objects&lt;/a&gt;.</source>
          <target state="translated">特性とライフタイムの境界は、&lt;a href=&quot;types/trait-object&quot;&gt;特性オブジェクト&lt;/a&gt;に名前を付けるためにも使用されます。</target>
        </trans-unit>
        <trans-unit id="941497474640686e1a5e201b7a0add49b752830f" translate="yes" xml:space="preserve">
          <source>Trait bounds</source>
          <target state="translated">Trait 境界線</target>
        </trans-unit>
        <trans-unit id="4fcf62d60d13dd717001ca9dd0618f2bf25f60fb" translate="yes" xml:space="preserve">
          <source>Trait for equality comparisons which are &lt;a href=&quot;http://en.wikipedia.org/wiki/Partial_equivalence_relation&quot;&gt;partial equivalence relations&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://en.wikipedia.org/wiki/Partial_equivalence_relation&quot;&gt;部分的等価関係で&lt;/a&gt;ある等価比較の特性。</target>
        </trans-unit>
        <trans-unit id="ef0a7e79d3d4953fe69d9a8d5ee6294c86326bfd" translate="yes" xml:space="preserve">
          <source>Trait for equality comparisons which are &lt;a href=&quot;https://en.wikipedia.org/wiki/Equivalence_relation&quot;&gt;equivalence relations&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://en.wikipedia.org/wiki/Equivalence_relation&quot;&gt;等価関係&lt;/a&gt;である等価比較の特性。</target>
        </trans-unit>
        <trans-unit id="eac0088c6ab97a23265d057818a34fc5c7b03fb7" translate="yes" xml:space="preserve">
          <source>Trait for equality comparisons which are &lt;a href=&quot;https://en.wikipedia.org/wiki/Partial_equivalence_relation&quot;&gt;partial equivalence relations&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://en.wikipedia.org/wiki/Partial_equivalence_relation&quot;&gt;半同値関係で&lt;/a&gt;ある等式比較の特性。</target>
        </trans-unit>
        <trans-unit id="8cec9bd7b654341aff1af9f8d64c24f966f7b024" translate="yes" xml:space="preserve">
          <source>Trait for types that form a &lt;a href=&quot;https://en.wikipedia.org/wiki/Total_order&quot;&gt;total order&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://en.wikipedia.org/wiki/Total_order&quot;&gt;合計注文&lt;/a&gt;を形成するタイプの特性。</target>
        </trans-unit>
        <trans-unit id="eda5d9fc229c855a2ef6aa3c2bfb5731468bf0cc" translate="yes" xml:space="preserve">
          <source>Trait for values that can be compared for a sort-order.</source>
          <target state="translated">ソート順に比較できる値の形質。</target>
        </trans-unit>
        <trans-unit id="64186133cfc350eebda0888af60b096eb938c6a7" translate="yes" xml:space="preserve">
          <source>Trait implementations</source>
          <target state="translated">ライン実装</target>
        </trans-unit>
        <trans-unit id="ddca8ab133e8a574bb0807189227aaf80ac0b4fc" translate="yes" xml:space="preserve">
          <source>Trait implementations can only implement associated constants that are members of the trait in question.</source>
          <target state="translated">形質の実装は、問題の形質のメンバーである関連定数のみを実装できます。</target>
        </trans-unit>
        <trans-unit id="1a2ed29df58a98467df7b65482664c061f2e57d4" translate="yes" xml:space="preserve">
          <source>Trait implementations can only implement associated constants that are members of the trait in question. This error indicates that you attempted to implement an associated constant whose name does not match the name of any associated constant in the trait.</source>
          <target state="translated">Trait の実装では、問題の trait のメンバである関連付けられた定数のみを実装できます。このエラーは、形質内の関連定数の名前と一致しない名前の関連定数を実装しようとしたことを示しています。</target>
        </trans-unit>
        <trans-unit id="826d4810ddc337c0170d557193ecb3f363cb0584" translate="yes" xml:space="preserve">
          <source>Trait implementations can only implement associated types that are members of the trait in question.</source>
          <target state="translated">Trait の実装では、問題の trait のメンバである関連型のみを実装できます。</target>
        </trans-unit>
        <trans-unit id="dc82d5ecd28dae290ae968b51be9ef3018535288" translate="yes" xml:space="preserve">
          <source>Trait implementations can only implement associated types that are members of the trait in question. This error indicates that you attempted to implement an associated type whose name does not match the name of any associated type in the trait.</source>
          <target state="translated">Trait の実装では、問題の trait のメンバである関連付けられた型のみを実装することができます。このエラーは、形質内のどの関連型の名前とも一致しない関連型を実装しようとしたことを示しています。</target>
        </trans-unit>
        <trans-unit id="24048bbeb068432309ce266edfa2a054d72baec8" translate="yes" xml:space="preserve">
          <source>Trait items syntactically allow a &lt;a href=&quot;../visibility-and-privacy&quot;&gt;&lt;em&gt;Visibility&lt;/em&gt;&lt;/a&gt; annotation, but this is rejected when the trait is validated. This allows items to be parsed with a unified syntax across different contexts where they are used. As an example, an empty &lt;code&gt;vis&lt;/code&gt; macro fragment specifier can be used for trait items, where the macro rule may be used in other situations where visibility is allowed.</source>
          <target state="translated">トレイトアイテムは構文的に&lt;a href=&quot;../visibility-and-privacy&quot;&gt;&lt;em&gt;可視性&lt;/em&gt;&lt;/a&gt;アノテーションを許可しますが、トレイトが検証されるとこれは拒否されます。これにより、アイテムが使用されるさまざまなコンテキスト間で統一された構文でアイテムを解析できます。例として、空の &lt;code&gt;vis&lt;/code&gt; マクロフラグメント指定子をトレイトアイテムに使用できます。マクロルールは、可視性が許可されている他の状況で使用できます。</target>
        </trans-unit>
        <trans-unit id="93dc7d0661c7c1cf56a871254e1715d367179182" translate="yes" xml:space="preserve">
          <source>Trait methods cannot be declared &lt;code&gt;const&lt;/code&gt; by design. For more information, see &lt;a href=&quot;https://github.com/rust-lang/rfcs/pull/911&quot;&gt;RFC 911&lt;/a&gt;.</source>
          <target state="translated">トレイトメソッドは、設計によって &lt;code&gt;const&lt;/code&gt; として宣言できません。詳細については、&lt;a href=&quot;https://github.com/rust-lang/rfcs/pull/911&quot;&gt;RFC 911を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="3a51226ce6186ef57bc4f8d39074c6398e097981" translate="yes" xml:space="preserve">
          <source>Trait methods currently cannot take patterns as arguments.</source>
          <target state="translated">Trait メソッドは現在、パターンを引数に取ることができません。</target>
        </trans-unit>
        <trans-unit id="2484ce752e551a673766cb07f53076cdd0470999" translate="yes" xml:space="preserve">
          <source>Trait objects</source>
          <target state="translated">Trait オブジェクト</target>
        </trans-unit>
        <trans-unit id="d0ff67bb0a0ee2576fc48fed596bc8092c7aa725" translate="yes" xml:space="preserve">
          <source>Trait objects are a form of dynamic dispatch and use a dynamically sized type for the inner type. So, for a given trait &lt;code&gt;Trait&lt;/code&gt;, when &lt;code&gt;Trait&lt;/code&gt; is treated as a type, as in &lt;code&gt;Box&amp;lt;Trait&amp;gt;&lt;/code&gt;, the inner type is 'unsized'. In such cases the boxed pointer is a 'fat pointer' that contains an extra pointer to a table of methods (among other things) for dynamic dispatch. This design mandates some restrictions on the types of traits that are allowed to be used in trait objects, which are collectively termed as 'object safety' rules.</source>
          <target state="translated">トレイトオブジェクトは動的ディスパッチの形式であり、動的なサイズのタイプを内部タイプに使用します。したがって、指定されたトレイト &lt;code&gt;Trait&lt;/code&gt; について、 &lt;code&gt;Trait&lt;/code&gt; が &lt;code&gt;Box&amp;lt;Trait&amp;gt;&lt;/code&gt; ようにタイプとして扱われる場合、内部タイプは「サイズなし」です。そのような場合、ボックス化されたポインターは、動的ディスパッチ用のメソッドのテーブルへの（特に）追加のポインターを含む「ファットポインター」です。この設計では、「オブジェクトの安全性」ルールと総称される、特性オブジェクトで使用できる特性のタイプにいくつかの制限を課しています。</target>
        </trans-unit>
        <trans-unit id="5ea53f21fe7d48d8c36beccecda99fd8c1606afe" translate="yes" xml:space="preserve">
          <source>Trait objects are written as the optional keyword &lt;code&gt;dyn&lt;/code&gt; followed by a set of trait bounds, but with the following restrictions on the trait bounds. All traits except the first trait must be auto traits, there may not be more than one lifetime, and opt-out bounds (e.g. &lt;code&gt;?Sized&lt;/code&gt;) are not allowed. Furthermore, paths to traits may be parenthesized.</source>
          <target state="translated">特性オブジェクトは、オプションのキーワード &lt;code&gt;dyn&lt;/code&gt; として記述され、その後に一連の特性境界が続きますが、特性境界には次の制限があります。最初のトレイトを除くすべてのトレイトは自動トレイトである必要があり、存続期間は1つだけである可能性があり、オプトアウト境界（たとえば &lt;code&gt;?Sized&lt;/code&gt; ）は許可されません。さらに、トレイトへのパスは括弧で括られるかもしれません。</target>
        </trans-unit>
        <trans-unit id="59817a6fb01d811236061d6945ce61c60bbb6a8e" translate="yes" xml:space="preserve">
          <source>Trait objects have the same layout as the value the trait object is of.</source>
          <target state="translated">形質オブジェクトは、形質オブジェクトが持つ値と同じレイアウトを持ちます。</target>
        </trans-unit>
        <trans-unit id="1bbbb43369cd1da1e54ccdae8b4bbe0c9a735c31" translate="yes" xml:space="preserve">
          <source>Trait objects implement the base trait, its auto traits, and any &lt;a href=&quot;../items/traits#supertraits&quot;&gt;supertraits&lt;/a&gt; of the base trait.</source>
          <target state="translated">トレイトオブジェクトは、&lt;a href=&quot;../items/traits#supertraits&quot;&gt;ベーストレイト&lt;/a&gt;、その自動トレイト、およびベーストレイトのスーパートレイトを実装します。</target>
        </trans-unit>
        <trans-unit id="d4f37b1632bc74808bbd4522d9d582acfc5a118f" translate="yes" xml:space="preserve">
          <source>Trait objects like &lt;code&gt;Box&amp;lt;Trait&amp;gt;&lt;/code&gt; can only be constructed when certain requirements are satisfied by the trait in question.</source>
          <target state="translated">&lt;code&gt;Box&amp;lt;Trait&amp;gt;&lt;/code&gt; ような特性オブジェクトは、問題の特性によって特定の要件が満たされた場合にのみ作成できます。</target>
        </trans-unit>
        <trans-unit id="046dc44c748313b6f776a3acf8abdd3d74f9acc5" translate="yes" xml:space="preserve">
          <source>Trait objects need to have all associated types specified. Erroneous code example:</source>
          <target state="translated">Trait オブジェクトには、すべての関連する型が指定されている必要があります。誤ったコード例。</target>
        </trans-unit>
        <trans-unit id="e77aaa69af7e604fc6cf7c5dbf4abb6705458260" translate="yes" xml:space="preserve">
          <source>Trait objects need to have all associated types specified. Please verify that all associated types of the trait were specified and the correct trait was used. Example:</source>
          <target state="translated">Trait オブジェクトには、すべての関連する型が指定されている必要があります。形質のすべての関連する型が指定されており、正しい形質が使用されていることを確認してください。例</target>
        </trans-unit>
        <trans-unit id="ad068a7a9dcf8a835215d9d2bd6df82d37ea9f8e" translate="yes" xml:space="preserve">
          <source>Trait std::alloc::Alloc</source>
          <target state="translated">Trait std::Alloc::Alloc</target>
        </trans-unit>
        <trans-unit id="eb91cda935fecc3ed63527ec374ccb91480b436e" translate="yes" xml:space="preserve">
          <source>Trait std::alloc::AllocRef</source>
          <target state="translated">Trait std::Alloc::AllocRef</target>
        </trans-unit>
        <trans-unit id="863608218cf19a899841e79768deb9add49e00f3" translate="yes" xml:space="preserve">
          <source>Trait std::alloc::GlobalAlloc</source>
          <target state="translated">Trait std::alloc::GlobalAlloc</target>
        </trans-unit>
        <trans-unit id="392d8121c387b6100e7dca67e7c52d32a16a3def" translate="yes" xml:space="preserve">
          <source>Trait std::any::Any</source>
          <target state="translated">Trait std::any::Any::Any</target>
        </trans-unit>
        <trans-unit id="0bdbfe0deda36628eacc51abdb83fdbfcea6cc11" translate="yes" xml:space="preserve">
          <source>Trait std::array::FixedSizeArray</source>
          <target state="translated">Trait std::array::FixedSizeArray</target>
        </trans-unit>
        <trans-unit id="1eb8a5154ce5a680a452312a74723021b34c3aaa" translate="yes" xml:space="preserve">
          <source>Trait std::ascii::AsciiExt</source>
          <target state="translated">Trait std::ascii::AsciiExt</target>
        </trans-unit>
        <trans-unit id="5de77502b5980be7c3473a72d6105527f1215243" translate="yes" xml:space="preserve">
          <source>Trait std::borrow::Borrow</source>
          <target state="translated">Trait std::borrow::Borrow</target>
        </trans-unit>
        <trans-unit id="70f054dd274fb96a8db0596d418507c91adce6b6" translate="yes" xml:space="preserve">
          <source>Trait std::borrow::BorrowMut</source>
          <target state="translated">Trait std::borrow::BorrowMut</target>
        </trans-unit>
        <trans-unit id="bbcce0cbc4cb2a4bf5264b04d903d25c0a192013" translate="yes" xml:space="preserve">
          <source>Trait std::borrow::ToOwned</source>
          <target state="translated">Trait std::borrow::ToOwned</target>
        </trans-unit>
        <trans-unit id="f2b9f8276056ca658e39ee7a72fdcb03a7c37efb" translate="yes" xml:space="preserve">
          <source>Trait std::clone::Clone</source>
          <target state="translated">Trait std::clone::クローン</target>
        </trans-unit>
        <trans-unit id="7cd5d0fd30409561bc6e76fd837e1f62470836a8" translate="yes" xml:space="preserve">
          <source>Trait std::cmp::Eq</source>
          <target state="translated">Trait std::cmp::Eq</target>
        </trans-unit>
        <trans-unit id="246cf166657201c68115fb66fd9221b8ffeb9ec4" translate="yes" xml:space="preserve">
          <source>Trait std::cmp::Ord</source>
          <target state="translated">Trait std::cmp::Ord</target>
        </trans-unit>
        <trans-unit id="72ff4c9778d08578e0f03c27d9d6272685274d91" translate="yes" xml:space="preserve">
          <source>Trait std::cmp::PartialEq</source>
          <target state="translated">Trait std::cmp::PartialEq</target>
        </trans-unit>
        <trans-unit id="4fde07025ebb4afc05e6897ef74b43fe5347e982" translate="yes" xml:space="preserve">
          <source>Trait std::cmp::PartialOrd</source>
          <target state="translated">Trait std::cmp::PartialOrd</target>
        </trans-unit>
        <trans-unit id="d870aa7cb7664d7c10835889d14c6b391cb4500e" translate="yes" xml:space="preserve">
          <source>Trait std::convert::AsMut</source>
          <target state="translated">Trait std::convert::AsMut</target>
        </trans-unit>
        <trans-unit id="d445d52fad68586ece567104043e8c242d2c7a73" translate="yes" xml:space="preserve">
          <source>Trait std::convert::AsRef</source>
          <target state="translated">Trait std::convert::AsRef</target>
        </trans-unit>
        <trans-unit id="9ae644602fe63ca3fafb728aff34886ea890d0e0" translate="yes" xml:space="preserve">
          <source>Trait std::convert::FloatToInt</source>
          <target state="translated">Std trait::convert::FloatToInt</target>
        </trans-unit>
        <trans-unit id="1da7f8aa53cf47c39294631d860061958af42da6" translate="yes" xml:space="preserve">
          <source>Trait std::convert::From</source>
          <target state="translated">Trait std::convert::From</target>
        </trans-unit>
        <trans-unit id="b6ffd418e0a0b6d0cb5548ea09febb34aa5a1ba4" translate="yes" xml:space="preserve">
          <source>Trait std::convert::Into</source>
          <target state="translated">Trait std::convert::Into</target>
        </trans-unit>
        <trans-unit id="4d1380373e375c0e4553b789733d1a89b1fb0101" translate="yes" xml:space="preserve">
          <source>Trait std::convert::TryFrom</source>
          <target state="translated">Trait std::convert::TryFrom</target>
        </trans-unit>
        <trans-unit id="052f060bad402d8a2cd358057bd4871783c01ba4" translate="yes" xml:space="preserve">
          <source>Trait std::convert::TryInto</source>
          <target state="translated">Trait std::convert::TryInto</target>
        </trans-unit>
        <trans-unit id="36871446454b625eddb2f384614252a30a76670d" translate="yes" xml:space="preserve">
          <source>Trait std::default::Default</source>
          <target state="translated">Trait std::default::Default</target>
        </trans-unit>
        <trans-unit id="adf0d0f8b00918a2c28aba66b14f04f6c4e0fded" translate="yes" xml:space="preserve">
          <source>Trait std::error::Error</source>
          <target state="translated">Trait std::error::Error</target>
        </trans-unit>
        <trans-unit id="c2d288fe88fdd80f7dd81a3a1f2aeef5dc8ba7dc" translate="yes" xml:space="preserve">
          <source>Trait std::fmt::Binary</source>
          <target state="translated">Trait std::fmt::Binary</target>
        </trans-unit>
        <trans-unit id="33f44cc3a6de7dd1507041a00c8faf2775c0c8df" translate="yes" xml:space="preserve">
          <source>Trait std::fmt::Debug</source>
          <target state="translated">Trait std::fmt::Debug</target>
        </trans-unit>
        <trans-unit id="245d17885bbc5448412416b59b0f51c9d9b68eac" translate="yes" xml:space="preserve">
          <source>Trait std::fmt::Display</source>
          <target state="translated">Trait std::fmt::Display</target>
        </trans-unit>
        <trans-unit id="c8de6a747580fa084cc85d42225e02c2e93e67d5" translate="yes" xml:space="preserve">
          <source>Trait std::fmt::LowerExp</source>
          <target state="translated">Trait std::fmt::LowerExp</target>
        </trans-unit>
        <trans-unit id="e725d6041bd9bc4d83fca5b07971b62d421e6e64" translate="yes" xml:space="preserve">
          <source>Trait std::fmt::LowerHex</source>
          <target state="translated">Trait std::fmt::LowerHex</target>
        </trans-unit>
        <trans-unit id="194006985569f163bb35c90c3abcdbc7deec0e4a" translate="yes" xml:space="preserve">
          <source>Trait std::fmt::Octal</source>
          <target state="translated">Trait std::fmt::Octal</target>
        </trans-unit>
        <trans-unit id="8a32cd848a50f19a4618eac36d5bd1b3a315cf4d" translate="yes" xml:space="preserve">
          <source>Trait std::fmt::Pointer</source>
          <target state="translated">標準行::fmt::ポインタ</target>
        </trans-unit>
        <trans-unit id="8718228edc98337e120714c5797ad6fa1124ce31" translate="yes" xml:space="preserve">
          <source>Trait std::fmt::UpperExp</source>
          <target state="translated">Trait std::fmt::UpperExp</target>
        </trans-unit>
        <trans-unit id="26a977a1233b688edd74d1ce605bed2138e89350" translate="yes" xml:space="preserve">
          <source>Trait std::fmt::UpperHex</source>
          <target state="translated">Trait std::fmt::UpperHex</target>
        </trans-unit>
        <trans-unit id="0e6b8aa3448ea0d1e3124dcc61d87f01fb6bfd66" translate="yes" xml:space="preserve">
          <source>Trait std::fmt::Write</source>
          <target state="translated">Trait std::fmt::Write</target>
        </trans-unit>
        <trans-unit id="e8d3634caaf52ad6c8639c87d834bc299c37f7d5" translate="yes" xml:space="preserve">
          <source>Trait std::future::Future</source>
          <target state="translated">Trait std::future::Future</target>
        </trans-unit>
        <trans-unit id="86e4064ba539203461594226ee88477b56127c23" translate="yes" xml:space="preserve">
          <source>Trait std::future::IntoFuture</source>
          <target state="translated">Trait std::future::IntoFuture</target>
        </trans-unit>
        <trans-unit id="e9cb7ef33fdeeee2adf1be409e245554e4935f7b" translate="yes" xml:space="preserve">
          <source>Trait std::hash::BuildHasher</source>
          <target state="translated">Trait std::hash::BuildHasher</target>
        </trans-unit>
        <trans-unit id="c7747499a3fe2fcc70735dec924c847206626023" translate="yes" xml:space="preserve">
          <source>Trait std::hash::Hash</source>
          <target state="translated">Trait std::hash::Hash</target>
        </trans-unit>
        <trans-unit id="2254c3bc605b18ffc7e9aa4bd6f57a17e5b13944" translate="yes" xml:space="preserve">
          <source>Trait std::hash::Hasher</source>
          <target state="translated">Trait std::hash::Hasher</target>
        </trans-unit>
        <trans-unit id="fd3fa6f5ef1435b1cb913f92dfb4fe0a0ac0248a" translate="yes" xml:space="preserve">
          <source>Trait std::io::BufRead</source>
          <target state="translated">Trait std::io::BufRead</target>
        </trans-unit>
        <trans-unit id="4c4e965bc67dd33a7c09b8db70c86024088aa45b" translate="yes" xml:space="preserve">
          <source>Trait std::io::Read</source>
          <target state="translated">Trait std::io::Read</target>
        </trans-unit>
        <trans-unit id="5d0aac0ef2620914932ce91ac2b555eba9c75b6a" translate="yes" xml:space="preserve">
          <source>Trait std::io::Seek</source>
          <target state="translated">Trait std::io::Seek</target>
        </trans-unit>
        <trans-unit id="23c37542e0343a876f9566d6681875d507142219" translate="yes" xml:space="preserve">
          <source>Trait std::io::Write</source>
          <target state="translated">Trait std::io::Write</target>
        </trans-unit>
        <trans-unit id="557d86b90451662a5be206878fb6037c4adc186c" translate="yes" xml:space="preserve">
          <source>Trait std::iter::DoubleEndedIterator</source>
          <target state="translated">Trait std::iter::DoubleEndedIterator</target>
        </trans-unit>
        <trans-unit id="f1b39cf8be9a057d9577992deaebe45e596b1a85" translate="yes" xml:space="preserve">
          <source>Trait std::iter::ExactSizeIterator</source>
          <target state="translated">Trait std::iter::ExactSizeIterator</target>
        </trans-unit>
        <trans-unit id="993ad040e2e34adc2956488f0eb4db104a067cbf" translate="yes" xml:space="preserve">
          <source>Trait std::iter::Extend</source>
          <target state="translated">Trait std::iter::Extend</target>
        </trans-unit>
        <trans-unit id="5d994406c4beb394a68ed1206fddfd385bea8323" translate="yes" xml:space="preserve">
          <source>Trait std::iter::FromIterator</source>
          <target state="translated">Trait std::iter::FromIterator</target>
        </trans-unit>
        <trans-unit id="2fce9eb181dd3ce47112a06174082d5e79cf74c2" translate="yes" xml:space="preserve">
          <source>Trait std::iter::FusedIterator</source>
          <target state="translated">Trait std::iter::FusedIterator</target>
        </trans-unit>
        <trans-unit id="73b5b9782c27307aa12c70b9e21ec99ddb587e29" translate="yes" xml:space="preserve">
          <source>Trait std::iter::InPlaceIterable</source>
          <target state="translated">Trait std::iter::InPlaceIterable</target>
        </trans-unit>
        <trans-unit id="e86b71b89c47a871b78ca20df617b375a62e7185" translate="yes" xml:space="preserve">
          <source>Trait std::iter::IntoIterator</source>
          <target state="translated">Trait std::iter::IntoIterator</target>
        </trans-unit>
        <trans-unit id="2da3e674c34b9eab7bfc5aeebb0e4f54178e88c3" translate="yes" xml:space="preserve">
          <source>Trait std::iter::Iterator</source>
          <target state="translated">Trait std::iter::Iterator</target>
        </trans-unit>
        <trans-unit id="28c48f7585e0c72c08462070ebcfc21850b855dd" translate="yes" xml:space="preserve">
          <source>Trait std::iter::Product</source>
          <target state="translated">Trait std::iter::Product</target>
        </trans-unit>
        <trans-unit id="06e37aadfebc92508dfec7f48cb36ae23d2d7987" translate="yes" xml:space="preserve">
          <source>Trait std::iter::SourceIter</source>
          <target state="translated">Trait std::iter::SourceIter</target>
        </trans-unit>
        <trans-unit id="4cd139b55d183603c0136ea95dadb637efaf38a2" translate="yes" xml:space="preserve">
          <source>Trait std::iter::Step</source>
          <target state="translated">Trait std::iter::Step</target>
        </trans-unit>
        <trans-unit id="5db41fec6d94d07ed5a8c95c380992ba4e70704b" translate="yes" xml:space="preserve">
          <source>Trait std::iter::Sum</source>
          <target state="translated">Trait std::iter::Sum</target>
        </trans-unit>
        <trans-unit id="d2c14fdb677cf9e40834e0c15272aef7a318414f" translate="yes" xml:space="preserve">
          <source>Trait std::iter::TrustedLen</source>
          <target state="translated">Trait std::iter::TrustedLen</target>
        </trans-unit>
        <trans-unit id="97864c14469b7b4a0942294bc953528cb554eb45" translate="yes" xml:space="preserve">
          <source>Trait std::marker::Copy</source>
          <target state="translated">形質 std::marker::Copy</target>
        </trans-unit>
        <trans-unit id="3884613e3e74d695dee222818d0b37300a040b05" translate="yes" xml:space="preserve">
          <source>Trait std::marker::DiscriminantKind</source>
          <target state="translated">Trait std::marker::DiscriminantKind</target>
        </trans-unit>
        <trans-unit id="d7b568be22b28c92ca0e71ed060c7b03cf03fb4f" translate="yes" xml:space="preserve">
          <source>Trait std::marker::Send</source>
          <target state="translated">Trait std::marker::Send</target>
        </trans-unit>
        <trans-unit id="00852f537576ef249f511a14cf0e0d88604a985c" translate="yes" xml:space="preserve">
          <source>Trait std::marker::Sized</source>
          <target state="translated">Trait std::marker::Sized</target>
        </trans-unit>
        <trans-unit id="3be5f907deaf6a27bd285184a0abe9f9ff5ddb94" translate="yes" xml:space="preserve">
          <source>Trait std::marker::StructuralEq</source>
          <target state="translated">Trait std::marker::StructuralEq</target>
        </trans-unit>
        <trans-unit id="28b09758b5f746fc434e81d9d3fa5f5b9cafe3f8" translate="yes" xml:space="preserve">
          <source>Trait std::marker::StructuralPartialEq</source>
          <target state="translated">Trait std::marker::StructuralPartialEq</target>
        </trans-unit>
        <trans-unit id="259bdec063434c0a27f0691a2488a4567088a5e0" translate="yes" xml:space="preserve">
          <source>Trait std::marker::Sync</source>
          <target state="translated">Trait std::marker::Sync</target>
        </trans-unit>
        <trans-unit id="3f94365e96f98d2913bb838b56a6cb437e2a3543" translate="yes" xml:space="preserve">
          <source>Trait std::marker::Unpin</source>
          <target state="translated">形質 std::marker::Unpin</target>
        </trans-unit>
        <trans-unit id="311396699adc0c66b758dcec6485921335dcacf8" translate="yes" xml:space="preserve">
          <source>Trait std::marker::Unsize</source>
          <target state="translated">形質 std::marker::Unsize</target>
        </trans-unit>
        <trans-unit id="56b1f3f0f786678bf876540fb69232e234007e31" translate="yes" xml:space="preserve">
          <source>Trait std::net::ToSocketAddrs</source>
          <target state="translated">Trait std::net::ToSocketAddrs</target>
        </trans-unit>
        <trans-unit id="37966fc5ec2acafba273f997b504b3bf34ed922b" translate="yes" xml:space="preserve">
          <source>Trait std::ops::Add</source>
          <target state="translated">Trait std::ops::Add</target>
        </trans-unit>
        <trans-unit id="eb2302d36fa57d1adc4a45dc1d240d27866b69da" translate="yes" xml:space="preserve">
          <source>Trait std::ops::AddAssign</source>
          <target state="translated">Trait std::ops::AddAssign</target>
        </trans-unit>
        <trans-unit id="b5f5f47beac59c26ee424be54e3b7e3d95164b94" translate="yes" xml:space="preserve">
          <source>Trait std::ops::BitAnd</source>
          <target state="translated">Trait std::ops::BitAnd</target>
        </trans-unit>
        <trans-unit id="fb181e8cea7de0ad56c4c91c6a0777e1d53fd765" translate="yes" xml:space="preserve">
          <source>Trait std::ops::BitAndAssign</source>
          <target state="translated">Trait std::ops::BitAndAssign</target>
        </trans-unit>
        <trans-unit id="b888f514c1fa78a8e8fe84b58a6fbc1d25aaf2c1" translate="yes" xml:space="preserve">
          <source>Trait std::ops::BitOr</source>
          <target state="translated">Trait std::ops::BitOr</target>
        </trans-unit>
        <trans-unit id="ca3ae8400b524007a326d21b18e44fb657bdb697" translate="yes" xml:space="preserve">
          <source>Trait std::ops::BitOrAssign</source>
          <target state="translated">Trait std::ops::BitOrAssign</target>
        </trans-unit>
        <trans-unit id="8d18eaa27370f1eb1f6ce036dc60c1aa5493c417" translate="yes" xml:space="preserve">
          <source>Trait std::ops::BitXor</source>
          <target state="translated">Trait std::ops::BitXor</target>
        </trans-unit>
        <trans-unit id="5961f53888aa07cd5cd15ed30fa1971a719c8b25" translate="yes" xml:space="preserve">
          <source>Trait std::ops::BitXorAssign</source>
          <target state="translated">Trait std::ops::BitXorAssign</target>
        </trans-unit>
        <trans-unit id="5e9158651355d13bfdd0cc23ab8ae22e93570742" translate="yes" xml:space="preserve">
          <source>Trait std::ops::CoerceUnsized</source>
          <target state="translated">Trait std::ops::CoerceUnsized</target>
        </trans-unit>
        <trans-unit id="e2225eef9926066643795abab6cb04cea79ce68b" translate="yes" xml:space="preserve">
          <source>Trait std::ops::Deref</source>
          <target state="translated">Trait std::ops::Deref</target>
        </trans-unit>
        <trans-unit id="8071035f23a5d586519a8248517d2e29e7adcb51" translate="yes" xml:space="preserve">
          <source>Trait std::ops::DerefMut</source>
          <target state="translated">Trait std::ops::DerefMut</target>
        </trans-unit>
        <trans-unit id="1bdb82d5309eaed70f5481f05b19a4d41b5808d7" translate="yes" xml:space="preserve">
          <source>Trait std::ops::DispatchFromDyn</source>
          <target state="translated">Trait std::ops::DispatchFromDyn</target>
        </trans-unit>
        <trans-unit id="9119f5359ef3817ec9f0b7e45b3f1ecbc08a66ae" translate="yes" xml:space="preserve">
          <source>Trait std::ops::Div</source>
          <target state="translated">Trait std::ops::Div</target>
        </trans-unit>
        <trans-unit id="f65e4311dbd340efad891a4945558b2592826b48" translate="yes" xml:space="preserve">
          <source>Trait std::ops::DivAssign</source>
          <target state="translated">Trait std::ops::DivAssign</target>
        </trans-unit>
        <trans-unit id="ead9d9ba97193a4d1ac24f05c905c8b13350ed9c" translate="yes" xml:space="preserve">
          <source>Trait std::ops::Drop</source>
          <target state="translated">Trait std::ops::Drop</target>
        </trans-unit>
        <trans-unit id="516e4c37897e1d20a60743aea36782c56e8156a9" translate="yes" xml:space="preserve">
          <source>Trait std::ops::Fn</source>
          <target state="translated">Trait std::ops::Fn</target>
        </trans-unit>
        <trans-unit id="77005c859f62996c3f249d5673d1b2c4d6da6a8e" translate="yes" xml:space="preserve">
          <source>Trait std::ops::FnMut</source>
          <target state="translated">Trait std::ops::FnMut</target>
        </trans-unit>
        <trans-unit id="b435f6c3c75102c4c8177872a25a996a1ff95c72" translate="yes" xml:space="preserve">
          <source>Trait std::ops::FnOnce</source>
          <target state="translated">Trait std::ops::FnOnce</target>
        </trans-unit>
        <trans-unit id="9aa827be880a5bea9bb3024a041653fb3a60ff06" translate="yes" xml:space="preserve">
          <source>Trait std::ops::Generator</source>
          <target state="translated">Trait std::ops::Generator</target>
        </trans-unit>
        <trans-unit id="59811c59bb31cbb96886cf966994463b72ad700c" translate="yes" xml:space="preserve">
          <source>Trait std::ops::Index</source>
          <target state="translated">Trait std::ops::Index</target>
        </trans-unit>
        <trans-unit id="1b08e9090daf7ede77089f8107e6507872bde2ab" translate="yes" xml:space="preserve">
          <source>Trait std::ops::IndexMut</source>
          <target state="translated">Trait std::ops::IndexMut</target>
        </trans-unit>
        <trans-unit id="10babff383e103d1471a771d922a28289586b73a" translate="yes" xml:space="preserve">
          <source>Trait std::ops::Mul</source>
          <target state="translated">Trait std::ops::Mul</target>
        </trans-unit>
        <trans-unit id="b32e6664a7b4d68e303b33188cda08fc977bd7b7" translate="yes" xml:space="preserve">
          <source>Trait std::ops::MulAssign</source>
          <target state="translated">Trait std::ops::MulAssign</target>
        </trans-unit>
        <trans-unit id="7244a7be2c4624654c9b462b1947447297e505fd" translate="yes" xml:space="preserve">
          <source>Trait std::ops::Neg</source>
          <target state="translated">Trait std::ops::Neg</target>
        </trans-unit>
        <trans-unit id="598dee8649518d42201f87386801464e34102c60" translate="yes" xml:space="preserve">
          <source>Trait std::ops::Not</source>
          <target state="translated">Trait std::ops::Not</target>
        </trans-unit>
        <trans-unit id="bc51ccaddf33118323d7fc1d905d959ce650d2fc" translate="yes" xml:space="preserve">
          <source>Trait std::ops::RangeBounds</source>
          <target state="translated">Trait std::ops::RangeBounds</target>
        </trans-unit>
        <trans-unit id="4ee55841b26a89cf9d805e3a28fb34dc38ab767a" translate="yes" xml:space="preserve">
          <source>Trait std::ops::Rem</source>
          <target state="translated">Trait std::ops::Rem</target>
        </trans-unit>
        <trans-unit id="a0e35ffe757b24704f0ad197b4f1a2195f4a4f69" translate="yes" xml:space="preserve">
          <source>Trait std::ops::RemAssign</source>
          <target state="translated">Trait std::ops::RemAssign</target>
        </trans-unit>
        <trans-unit id="5922247946e4630b62a74e89d87c15ed9dbf8321" translate="yes" xml:space="preserve">
          <source>Trait std::ops::Shl</source>
          <target state="translated">Trait std::ops::Shl</target>
        </trans-unit>
        <trans-unit id="f84eeb046dfef53ab5217181c0fe9161eb7133b2" translate="yes" xml:space="preserve">
          <source>Trait std::ops::ShlAssign</source>
          <target state="translated">Trait std::ops::ShlAssign</target>
        </trans-unit>
        <trans-unit id="55d865e44b6599da1d5b41d269ec7455a02e4d75" translate="yes" xml:space="preserve">
          <source>Trait std::ops::Shr</source>
          <target state="translated">Trait std::ops::Shr</target>
        </trans-unit>
        <trans-unit id="e7c92d6f8a50e1ae3b29a226a8335aff1fecf601" translate="yes" xml:space="preserve">
          <source>Trait std::ops::ShrAssign</source>
          <target state="translated">Trait std::ops::ShrAssign</target>
        </trans-unit>
        <trans-unit id="cbaeb43954d65c4471777365a4ccdaf3b98314da" translate="yes" xml:space="preserve">
          <source>Trait std::ops::Sub</source>
          <target state="translated">Trait std::ops::Sub</target>
        </trans-unit>
        <trans-unit id="60e6a61f8c88f9e6239b7053de7f86d23a70926d" translate="yes" xml:space="preserve">
          <source>Trait std::ops::SubAssign</source>
          <target state="translated">Trait std::ops::SubAssign</target>
        </trans-unit>
        <trans-unit id="1e84214c3e8570e12d3f9ef3b558be6c152516f7" translate="yes" xml:space="preserve">
          <source>Trait std::ops::Try</source>
          <target state="translated">Trait std::ops::Try</target>
        </trans-unit>
        <trans-unit id="aee85e47c1ef28a026ccdb2b42dd67004cf6d92b" translate="yes" xml:space="preserve">
          <source>Trait std::os::linux::fs::MetadataExt</source>
          <target state="translated">Trait std::os::linux::fs::MetadataExt</target>
        </trans-unit>
        <trans-unit id="ce6f693798415e4676d8d1ff10beb4360e2b88ea" translate="yes" xml:space="preserve">
          <source>Trait std::os::unix::ffi::OsStrExt</source>
          <target state="translated">Trait std::os::unix::fi::OsStrExt</target>
        </trans-unit>
        <trans-unit id="ccee631397fcdd7aa7a9f0bce0da5d850063085b" translate="yes" xml:space="preserve">
          <source>Trait std::os::unix::ffi::OsStringExt</source>
          <target state="translated">Trait std::os::unix::fi::OsStringExt</target>
        </trans-unit>
        <trans-unit id="e621c9f13dd9d62e26bc7432de51e95d4d92457d" translate="yes" xml:space="preserve">
          <source>Trait std::os::unix::fs::DirBuilderExt</source>
          <target state="translated">Trait std::os::unix::fs::DirBuilderExt</target>
        </trans-unit>
        <trans-unit id="0709fdc0b13d2f0cb5f5c17d0f41b133a5719e30" translate="yes" xml:space="preserve">
          <source>Trait std::os::unix::fs::DirEntryExt</source>
          <target state="translated">Trait std::os::unix::fs::DirEntryExt</target>
        </trans-unit>
        <trans-unit id="030f7ec1f295cca2c02129cf381f726caf5a30ca" translate="yes" xml:space="preserve">
          <source>Trait std::os::unix::fs::FileExt</source>
          <target state="translated">Std line::os::unix::fs::FileExt</target>
        </trans-unit>
        <trans-unit id="f955ea7fe9356c94c24f7600e345d8c1f23ecc81" translate="yes" xml:space="preserve">
          <source>Trait std::os::unix::fs::FileTypeExt</source>
          <target state="translated">Std trait::os::unix::fs::FileTypeExt</target>
        </trans-unit>
        <trans-unit id="062f7bd7816b0a1187ddcd41fdc03811ea335026" translate="yes" xml:space="preserve">
          <source>Trait std::os::unix::fs::MetadataExt</source>
          <target state="translated">Trait std::os::unix::fs::MetadataExt</target>
        </trans-unit>
        <trans-unit id="5cc7126ad859e04f63e6bf507db0f3f32c1e3609" translate="yes" xml:space="preserve">
          <source>Trait std::os::unix::fs::OpenOptionsExt</source>
          <target state="translated">Std Feature::os::unix::fs::OpenOptionsExt</target>
        </trans-unit>
        <trans-unit id="7b61dfb2986a0864a907b937d464ff43d30cc28a" translate="yes" xml:space="preserve">
          <source>Trait std::os::unix::fs::PermissionsExt</source>
          <target state="translated">Std trait::os::unix::fs::PermissionsExt</target>
        </trans-unit>
        <trans-unit id="029585bd86a69a9cb4ab7c864e7dc9b2373a14b3" translate="yes" xml:space="preserve">
          <source>Trait std::os::unix::io::AsRawFd</source>
          <target state="translated">Std trait::os::unix::io::AsRawFd</target>
        </trans-unit>
        <trans-unit id="e4e4a27468811544480dddf3c4047ee3d4694a0c" translate="yes" xml:space="preserve">
          <source>Trait std::os::unix::io::FromRawFd</source>
          <target state="translated">Trait std::os::unix::io::FromRawFd</target>
        </trans-unit>
        <trans-unit id="ad731bff461d938e10c799939e10ae14e837a1d4" translate="yes" xml:space="preserve">
          <source>Trait std::os::unix::io::IntoRawFd</source>
          <target state="translated">Std.stroke::os::unix::io::IntoRawFd</target>
        </trans-unit>
        <trans-unit id="e0e834bab744daaedf71c0c8937cc0857c11c815" translate="yes" xml:space="preserve">
          <source>Trait std::os::unix::process::CommandExt</source>
          <target state="translated">Std trait::os::unix::process::CommandExt</target>
        </trans-unit>
        <trans-unit id="3fdb072f5381c741536b73b80e58115bb5f3dc4d" translate="yes" xml:space="preserve">
          <source>Trait std::os::unix::process::ExitStatusExt</source>
          <target state="translated">Trait std::os::unix::process::ExitStatusExt</target>
        </trans-unit>
        <trans-unit id="398944c7337c4aa8b95b799fcb3bb79124d70d16" translate="yes" xml:space="preserve">
          <source>Trait std::os::unix::thread::JoinHandleExt</source>
          <target state="translated">Trait std::os::unix::thread::JoinHandleExt</target>
        </trans-unit>
        <trans-unit id="775a7a0c3bd36d7ff6360e6cd0ef765ee978cd67" translate="yes" xml:space="preserve">
          <source>Trait std::os::windows::ffi::OsStrExt</source>
          <target state="translated">Trait std::os::windows::fi::OsStrExt</target>
        </trans-unit>
        <trans-unit id="fef545ee7fe66334043f38cfbfbf352be492c487" translate="yes" xml:space="preserve">
          <source>Trait std::os::windows::ffi::OsStringExt</source>
          <target state="translated">Trait std::os::windows::fi::OsStringExt</target>
        </trans-unit>
        <trans-unit id="ecb052e97ecce0a67db913c47f009bfcbacc3af0" translate="yes" xml:space="preserve">
          <source>Trait std::os::windows::fs::FileExt</source>
          <target state="translated">Trait std::os::windows::fs::FileExt</target>
        </trans-unit>
        <trans-unit id="91c8fb448f57a608a43c2c6a50e10bec34d5ab25" translate="yes" xml:space="preserve">
          <source>Trait std::os::windows::fs::FileTypeExt</source>
          <target state="translated">Trait std::os::windows::fs::FileTypeExt</target>
        </trans-unit>
        <trans-unit id="48eaa197d2777c5eb543ac927807cb3bcfa429bf" translate="yes" xml:space="preserve">
          <source>Trait std::os::windows::fs::MetadataExt</source>
          <target state="translated">Trait std::os::windows::fs::MetadataExt</target>
        </trans-unit>
        <trans-unit id="adfee6aa3be6cbe6237011186a8914e73584ae0c" translate="yes" xml:space="preserve">
          <source>Trait std::os::windows::fs::OpenOptionsExt</source>
          <target state="translated">標準機能::os::windows::fs::OpenOptionsExt</target>
        </trans-unit>
        <trans-unit id="2cdd2fa8158633908c8d054d4d1297a0e8730a45" translate="yes" xml:space="preserve">
          <source>Trait std::os::windows::io::AsRawHandle</source>
          <target state="translated">Trait std::os::windows::io::AsRawHandle</target>
        </trans-unit>
        <trans-unit id="0d00fd25b06cb924c3fdd7f42d54ec1498a98e1b" translate="yes" xml:space="preserve">
          <source>Trait std::os::windows::io::AsRawSocket</source>
          <target state="translated">Trait std::os::windows::io::AsRawSocket</target>
        </trans-unit>
        <trans-unit id="61063f360cb8b5295929ae6072d8fe4c6d6e69db" translate="yes" xml:space="preserve">
          <source>Trait std::os::windows::io::FromRawHandle</source>
          <target state="translated">Trait std::os::windows::io::FromRawHandle</target>
        </trans-unit>
        <trans-unit id="7942dc2954f8548cc31aadda78e4bf28314f92d8" translate="yes" xml:space="preserve">
          <source>Trait std::os::windows::io::FromRawSocket</source>
          <target state="translated">Trait std::os::windows::io::FromRawSocket</target>
        </trans-unit>
        <trans-unit id="bb1fb08e33748cf05582377cef8603a0b7d61ea6" translate="yes" xml:space="preserve">
          <source>Trait std::os::windows::io::IntoRawHandle</source>
          <target state="translated">Trait std::os::windows::io::IntoRawHandle</target>
        </trans-unit>
        <trans-unit id="1fe8126ee24f29a74bcdb4233344f05c1aaeb804" translate="yes" xml:space="preserve">
          <source>Trait std::os::windows::io::IntoRawSocket</source>
          <target state="translated">Trait std::os::windows::io::IntoRawSocket</target>
        </trans-unit>
        <trans-unit id="03f13d9ed2758f8306f48846a3b40b6e4ee6fb67" translate="yes" xml:space="preserve">
          <source>Trait std::os::windows::process::CommandExt</source>
          <target state="translated">Trait std::os::windows::process::CommandExt</target>
        </trans-unit>
        <trans-unit id="5474211db770299d01cd13e53280d9a32e0a6eb8" translate="yes" xml:space="preserve">
          <source>Trait std::os::windows::process::ExitStatusExt</source>
          <target state="translated">Trait std::os::windows::process::ExitStatusExt</target>
        </trans-unit>
        <trans-unit id="f12279b49645006e0e35a65e657e45472c813936" translate="yes" xml:space="preserve">
          <source>Trait std::panic::RefUnwindSafe</source>
          <target state="translated">Trait std::panic::RefUnwindSafe</target>
        </trans-unit>
        <trans-unit id="94584086fc586a7b81f5ac90f21ac1115c03a3ce" translate="yes" xml:space="preserve">
          <source>Trait std::panic::UnwindSafe</source>
          <target state="translated">Trait std::panic::UnwindSafe</target>
        </trans-unit>
        <trans-unit id="adb81f6851cec81b5352770932f85397129ab8a4" translate="yes" xml:space="preserve">
          <source>Trait std::process::Termination</source>
          <target state="translated">Trait std::process::Termination</target>
        </trans-unit>
        <trans-unit id="ded34cefc8f278d5953ceacebaad94241cbf68af" translate="yes" xml:space="preserve">
          <source>Trait std::slice::Concat</source>
          <target state="translated">Trait std::slice::Concat</target>
        </trans-unit>
        <trans-unit id="9d456c4e733533dd7d0fbe862eae7258dcf0c0b5" translate="yes" xml:space="preserve">
          <source>Trait std::slice::Join</source>
          <target state="translated">Trait std::slice::Join</target>
        </trans-unit>
        <trans-unit id="7640946c865124bdea836774595f3568b91b7998" translate="yes" xml:space="preserve">
          <source>Trait std::slice::SliceConcatExt</source>
          <target state="translated">Trait std::slice::SliceConcatExt</target>
        </trans-unit>
        <trans-unit id="f46e5f5628a346f08367c4e254d503cf40a8e630" translate="yes" xml:space="preserve">
          <source>Trait std::slice::SliceIndex</source>
          <target state="translated">Trait std::slice::SliceIndex</target>
        </trans-unit>
        <trans-unit id="376de5fab14024883dddc8825294275d1ab087fe" translate="yes" xml:space="preserve">
          <source>Trait std::str::FromStr</source>
          <target state="translated">Trait std::str::FromStr</target>
        </trans-unit>
        <trans-unit id="44dfa41c6566ca84e623c4ad35fe85e2a3871106" translate="yes" xml:space="preserve">
          <source>Trait std::str::pattern::DoubleEndedSearcher</source>
          <target state="translated">Trait std::str::pattern::DoubleEndedSearcher</target>
        </trans-unit>
        <trans-unit id="60d7ae5ae877268eee71ef1b870695c55f5799dd" translate="yes" xml:space="preserve">
          <source>Trait std::str::pattern::Pattern</source>
          <target state="translated">Trait std::str::pattern::パターン</target>
        </trans-unit>
        <trans-unit id="57c9157b22b76a9e5814b9b5b2e9d0438b5d56c6" translate="yes" xml:space="preserve">
          <source>Trait std::str::pattern::ReverseSearcher</source>
          <target state="translated">Trait std::str::pattern::ReverseSearcher</target>
        </trans-unit>
        <trans-unit id="c47b1d5d24f300a29158b5903ba66de94f2261c7" translate="yes" xml:space="preserve">
          <source>Trait std::str::pattern::Searcher</source>
          <target state="translated">Trait std::str::pattern::Searcher</target>
        </trans-unit>
        <trans-unit id="44bc0cc22a45fc90a102d47cbd5cd3c88d279925" translate="yes" xml:space="preserve">
          <source>Trait std::string::ToString</source>
          <target state="translated">Trait std::string::ToString</target>
        </trans-unit>
        <trans-unit id="0bd7b8ac22a188c807565d30737ca706bfa565b8" translate="yes" xml:space="preserve">
          <source>Trait std::task::Wake</source>
          <target state="translated">Trait std::task::Wake</target>
        </trans-unit>
        <trans-unit id="902e019f3fc71a92236203a22158a6e688676cd4" translate="yes" xml:space="preserve">
          <source>Trait that indicates that this is a pointer or a wrapper for one, where unsizing can be performed on the pointee.</source>
          <target state="translated">これがポインタまたはポインタのラッパーであることを示す形質で、ここではポインタに対してアンサイジングを行うことができます。</target>
        </trans-unit>
        <trans-unit id="914213ad374b434003e30cd9d7bcaca26d295c77" translate="yes" xml:space="preserve">
          <source>Trait to represent types that can be created by multiplying elements of an iterator.</source>
          <target state="translated">イテレータの要素を掛け合わせて作成できる型を表現するためのtrait。</target>
        </trans-unit>
        <trans-unit id="badf961de53295edcdb207c7619b3c8c3ea8ab3f" translate="yes" xml:space="preserve">
          <source>Trait to represent types that can be created by summing up an iterator.</source>
          <target state="translated">イテレータを合計して作成できる型を表現するためのtrait。</target>
        </trans-unit>
        <trans-unit id="d881d840fb21638a45b7fe784d4a5eb2d495d58e" translate="yes" xml:space="preserve">
          <source>Trait types:</source>
          <target state="translated">形質の種類。</target>
        </trans-unit>
        <trans-unit id="602d794344a5274058fe843b2cdf8ec0429dd8a0" translate="yes" xml:space="preserve">
          <source>Trait types: &lt;a href=&quot;types/trait-object&quot;&gt;Trait objects&lt;/a&gt; and &lt;a href=&quot;types/impl-trait&quot;&gt;impl trait&lt;/a&gt;.</source>
          <target state="translated">トレイトのタイプ：&lt;a href=&quot;types/trait-object&quot;&gt;トレイトオブジェクト&lt;/a&gt;と&lt;a href=&quot;types/impl-trait&quot;&gt;implトレイト&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9bb3c78c542b9f8ec90ade6e9ec8d9a3209bf67e" translate="yes" xml:space="preserve">
          <source>TraitObject</source>
          <target state="translated">TraitObject</target>
        </trans-unit>
        <trans-unit id="6dafbe61d09e60652f6bbad6957562daf88836c1" translate="yes" xml:space="preserve">
          <source>TraitObject::borrow</source>
          <target state="translated">TraitObject::borrow</target>
        </trans-unit>
        <trans-unit id="d4a155778d83f0c6e0941f69c58ed350bc406da6" translate="yes" xml:space="preserve">
          <source>TraitObject::borrow_mut</source>
          <target state="translated">TraitObject::borrow_mut</target>
        </trans-unit>
        <trans-unit id="1ad27b39ed4c34288ce66526e3c4d0c6cfa27a49" translate="yes" xml:space="preserve">
          <source>TraitObject::clone</source>
          <target state="translated">TraitObject::clone</target>
        </trans-unit>
        <trans-unit id="f7e5bbc88cb023be138b61515a8a95359d090a5c" translate="yes" xml:space="preserve">
          <source>TraitObject::clone_from</source>
          <target state="translated">TraitObject::clone_from</target>
        </trans-unit>
        <trans-unit id="fdf0c70ef2387158d4df2cba6555b292ed39d46d" translate="yes" xml:space="preserve">
          <source>TraitObject::clone_into</source>
          <target state="translated">TraitObject::clone_into</target>
        </trans-unit>
        <trans-unit id="743885aa5243b74deebe5c3d51ac4806100e3c4f" translate="yes" xml:space="preserve">
          <source>TraitObject::from</source>
          <target state="translated">TraitObject::from</target>
        </trans-unit>
        <trans-unit id="83e65850a79cb15fc900dff422e0637ecd287f18" translate="yes" xml:space="preserve">
          <source>TraitObject::into</source>
          <target state="translated">TraitObject::into</target>
        </trans-unit>
        <trans-unit id="4d10ca4ab3471cdb18500652e2706f1af91011a7" translate="yes" xml:space="preserve">
          <source>TraitObject::to_owned</source>
          <target state="translated">TraitObject::to_owned</target>
        </trans-unit>
        <trans-unit id="cb08794c131e1ac1a49313ec36f386568341f2c9" translate="yes" xml:space="preserve">
          <source>TraitObject::try_from</source>
          <target state="translated">TraitObject::try_from</target>
        </trans-unit>
        <trans-unit id="368b837c4e44612f1f89ff1a01dc94c771822d93" translate="yes" xml:space="preserve">
          <source>TraitObject::try_into</source>
          <target state="translated">TraitObject::try_into</target>
        </trans-unit>
        <trans-unit id="74e84d6c289e114766c37bd05fe2729da4981e80" translate="yes" xml:space="preserve">
          <source>TraitObject::type_id</source>
          <target state="translated">TraitObject::type_id</target>
        </trans-unit>
        <trans-unit id="d1a616085a1a99a58e14bafaa350abc6783a3160" translate="yes" xml:space="preserve">
          <source>Traits</source>
          <target state="translated">Traits</target>
        </trans-unit>
        <trans-unit id="9c97df5331a0dd1cf9d7e4754c7f28e534496f46" translate="yes" xml:space="preserve">
          <source>Traits and trait bounds let us write code that uses generic type parameters to reduce duplication but also specify to the compiler that we want the generic type to have particular behavior. The compiler can then use the trait bound information to check that all the concrete types used with our code provide the correct behavior. In dynamically typed languages, we would get an error at runtime if we called a method on a type that the type didn&amp;rsquo;t implement. But Rust moves these errors to compile time so we&amp;rsquo;re forced to fix the problems before our code is even able to run. Additionally, we don&amp;rsquo;t have to write code that checks for behavior at runtime because we&amp;rsquo;ve already checked at compile time. Doing so improves performance without having to give up the flexibility of generics.</source>
          <target state="translated">特性と特性の境界により、ジェネリック型パラメーターを使用して重複を削減するコードを記述できるだけでなく、ジェネリック型に特定の動作をさせることをコンパイラーに指定することもできます。次に、コンパイラーは特性バインド情報を使用して、コードで使用されるすべての具象型が正しい動作を提供することを確認できます。動的に型付けされた言語では、型が実装していない型に対してメソッドを呼び出すと、実行時にエラーが発生します。しかし、Rustはこれらのエラーをコンパイル時に移動するため、コードを実行する前に問題を修正する必要があります。さらに、コンパイル時にチェック済みなので、実行時に動作をチェックするコードを記述する必要はありません。そうすることで、ジェネリックスの柔軟性をあきらめる必要がなく、パフォーマンスが向上します。</target>
        </trans-unit>
        <trans-unit id="3fc76183719059f2c0c8080816f40e16e5dee060" translate="yes" xml:space="preserve">
          <source>Traits and trait bounds let us write code that uses generic type parameters to reduce duplication but also specify to the compiler that we want the generic type to have particular behavior. The compiler can then use the trait bound information to check that all the concrete types used with our code provide the correct behavior. In dynamically typed languages, we would get an error at runtime if we called a method on a type which didn&amp;rsquo;t define the method. But Rust moves these errors to compile time so we&amp;rsquo;re forced to fix the problems before our code is even able to run. Additionally, we don&amp;rsquo;t have to write code that checks for behavior at runtime because we&amp;rsquo;ve already checked at compile time. Doing so improves performance without having to give up the flexibility of generics.</source>
          <target state="translated">特性と特性の境界を使用すると、ジェネリック型パラメーターを使用して重複を減らすだけでなく、ジェネリック型に特定の動作を持たせるようにコンパイラーに指定するコードを記述できます。次に、コンパイラーは特性バインド情報を使用して、コードで使用されるすべての具象型が正しい動作を提供することを確認できます。動的に型指定された言語では、メソッドを定義していない型でメソッドを呼び出すと、実行時にエラーが発生します。しかし、Rustはこれらのエラーをコンパイル時に移動するため、コードを実行する前に問題を修正する必要があります。さらに、コンパイル時にすでにチェックしているため、実行時に動作をチェックするコードを記述する必要はありません。そうすることで、ジェネリックスの柔軟性をあきらめることなくパフォーマンスが向上します。</target>
        </trans-unit>
        <trans-unit id="30d92be1538d577b3a476ce5c89b01f7242bf547" translate="yes" xml:space="preserve">
          <source>Traits are also compared by their implementation:</source>
          <target state="translated">また、形質は、その実装によって比較されます。</target>
        </trans-unit>
        <trans-unit id="e9a67b2444510e46e8948ad83a34775ca31fa40c" translate="yes" xml:space="preserve">
          <source>Traits are declared using the &lt;code&gt;trait&lt;/code&gt; keyword. Types can implement them using &lt;a href=&quot;keyword.impl&quot;&gt;&lt;code&gt;impl&lt;/code&gt;&lt;/a&gt;&lt;code&gt;Trait&lt;/code&gt;&lt;a href=&quot;keyword.for&quot;&gt;&lt;code&gt;for&lt;/code&gt;&lt;/a&gt;&lt;code&gt;Type&lt;/code&gt;:</source>
          <target state="translated">特性は、 &lt;code&gt;trait&lt;/code&gt; キーワードを使用して宣言されます。タイプは&lt;a href=&quot;keyword.for&quot;&gt; &lt;code&gt;for&lt;/code&gt; &lt;/a&gt; &lt;code&gt;Type&lt;/code&gt; &lt;a href=&quot;keyword.impl&quot;&gt; &lt;code&gt;impl&lt;/code&gt; &lt;/a&gt; &lt;code&gt;Trait&lt;/code&gt; を使用してそれらを実装できます。</target>
        </trans-unit>
        <trans-unit id="66685be42641df1c5c014df0db7fb2681f6517c0" translate="yes" xml:space="preserve">
          <source>Traits are implemented for specific types through separate &lt;a href=&quot;implementations&quot;&gt;implementations&lt;/a&gt;.</source>
          <target state="translated">特性は、個別の&lt;a href=&quot;implementations&quot;&gt;実装&lt;/a&gt;を通じて特定のタイプに実装されます。</target>
        </trans-unit>
        <trans-unit id="68c3dbb43f5798e7691ebd93a6d889062ce5c80e" translate="yes" xml:space="preserve">
          <source>Traits as Parameters</source>
          <target state="translated">パラメータとしての形質</target>
        </trans-unit>
        <trans-unit id="4bf9fb060bd902afb2cded8739189581c26cdf0d" translate="yes" xml:space="preserve">
          <source>Traits can also be declared as &lt;code&gt;unsafe&lt;/code&gt;:</source>
          <target state="translated">特性は &lt;code&gt;unsafe&lt;/code&gt; と宣言することもできます：</target>
        </trans-unit>
        <trans-unit id="661e39b3878b924290822d7b53ab6af8bbecce44" translate="yes" xml:space="preserve">
          <source>Traits can be generic, with constraints or without:</source>
          <target state="translated">形質は一般的なもので、制約がある場合とない場合があります。</target>
        </trans-unit>
        <trans-unit id="b9d13ed5586289e0d3d40796b5bf51fc03fcc1f1" translate="yes" xml:space="preserve">
          <source>Traits can be made up of three varieties of associated items:</source>
          <target state="translated">形質は、3種類の関連アイテムで構成されています。</target>
        </trans-unit>
        <trans-unit id="2f25be72831238ea3a0070cedc0b27becde04cb1" translate="yes" xml:space="preserve">
          <source>Traits can be used in functions, as parameters:</source>
          <target state="translated">形質は、関数の中でパラメータとして使用することができます。</target>
        </trans-unit>
        <trans-unit id="d1a444e95cf19cfd56b5bd44d15b0d8f1bb04bba" translate="yes" xml:space="preserve">
          <source>Traits can build upon the requirements of other traits. In the example below &lt;code&gt;Iterator&lt;/code&gt; is a &lt;strong&gt;supertrait&lt;/strong&gt; and &lt;code&gt;ThreeIterator&lt;/code&gt; is a &lt;strong&gt;subtrait&lt;/strong&gt;:</source>
          <target state="translated">特性は、他の特性の要件に基づいて構築できます。以下の例では &lt;code&gt;Iterator&lt;/code&gt; で&lt;strong&gt;supertrait&lt;/strong&gt;と &lt;code&gt;ThreeIterator&lt;/code&gt; がある&lt;strong&gt;subtrait&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="a5bf3800cd574708d91373db1be628b4ff994b51" translate="yes" xml:space="preserve">
          <source>Traits can serve as markers or carry other logical semantics that aren't expressed through their items. When a type implements that trait it is promising to uphold its contract. &lt;a href=&quot;marker/trait.send&quot;&gt;&lt;code&gt;Send&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;marker/trait.sync&quot;&gt;&lt;code&gt;Sync&lt;/code&gt;&lt;/a&gt; are two such marker traits present in the standard library.</source>
          <target state="translated">特性は、マーカーとして機能したり、アイテムでは表現されない他の論理セマンティクスを保持したりできます。タイプがその特性を実装するとき、それはその契約を維持することを約束します。&lt;a href=&quot;marker/trait.send&quot;&gt; &lt;code&gt;Send&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;marker/trait.sync&quot;&gt; &lt;code&gt;Sync&lt;/code&gt; &lt;/a&gt;は、標準ライブラリに存在する2つのそのようなマーカー特性です。</target>
        </trans-unit>
        <trans-unit id="f1779dfd4e53a302206ca9f432ac589991148919" translate="yes" xml:space="preserve">
          <source>Traits for conversions between types.</source>
          <target state="translated">タイプ間の変換のための形質。</target>
        </trans-unit>
        <trans-unit id="5129fe11a670c9d54f51f82654cb88d2c5359dd3" translate="yes" xml:space="preserve">
          <source>Traits for working with Errors.</source>
          <target state="translated">エラーズで仕事をするための特徴</target>
        </trans-unit>
        <trans-unit id="e714d1e850bbb5cbfe4cbf81d9f96ff676eaae8d" translate="yes" xml:space="preserve">
          <source>Traits items that begin with the &lt;code&gt;unsafe&lt;/code&gt; keyword indicate that &lt;em&gt;implementing&lt;/em&gt; the trait may be &lt;a href=&quot;../unsafety&quot;&gt;unsafe&lt;/a&gt;. It is safe to use a correctly implemented unsafe trait. The &lt;a href=&quot;implementations#trait-implementations&quot;&gt;trait implementation&lt;/a&gt; must also begin with the &lt;code&gt;unsafe&lt;/code&gt; keyword.</source>
          <target state="translated">&lt;code&gt;unsafe&lt;/code&gt; キーワードで始まる特性項目は、その特性の&lt;em&gt;実装&lt;/em&gt;が&lt;a href=&quot;../unsafety&quot;&gt;安全でない&lt;/a&gt;可能性があることを示してい&lt;em&gt;ます&lt;/em&gt;。正しく実装された安全でない特性を使用しても安全です。&lt;a href=&quot;implementations#trait-implementations&quot;&gt;形質実装は&lt;/a&gt;また、で始まる必要があり &lt;code&gt;unsafe&lt;/code&gt; キーワード。</target>
        </trans-unit>
        <trans-unit id="c4f3eba08a0ef9ddc5179fc934760dae14913d40" translate="yes" xml:space="preserve">
          <source>Traits marked as &lt;code&gt;unsafe&lt;/code&gt; must be &lt;a href=&quot;keyword.impl&quot;&gt;&lt;code&gt;impl&lt;/code&gt;&lt;/a&gt;emented using &lt;code&gt;unsafe impl&lt;/code&gt;. This makes a guarantee to other &lt;code&gt;unsafe&lt;/code&gt; code that the implementation satisfies the trait's safety contract. The &lt;a href=&quot;marker/trait.send&quot;&gt;Send&lt;/a&gt; and &lt;a href=&quot;marker/trait.sync&quot;&gt;Sync&lt;/a&gt; traits are examples of this behaviour in the standard library.</source>
          <target state="translated">マークされた形質 &lt;code&gt;unsafe&lt;/code&gt; しなければならない&lt;a href=&quot;keyword.impl&quot;&gt; &lt;code&gt;impl&lt;/code&gt; &lt;/a&gt;使用してemented &lt;code&gt;unsafe impl&lt;/code&gt; 。これにより、他の &lt;code&gt;unsafe&lt;/code&gt; コードに対して、実装がトレイトの安全契約を満たしていることが保証されます。&lt;a href=&quot;marker/trait.send&quot;&gt;送信&lt;/a&gt;と&lt;a href=&quot;marker/trait.sync&quot;&gt;同期&lt;/a&gt;の特性は、標準ライブラリでこの動作の例です。</target>
        </trans-unit>
        <trans-unit id="a0bb75d5aa409703504921566195fb3122da2052" translate="yes" xml:space="preserve">
          <source>Traits may also contain additional type parameters. Those type parameters or the trait itself can be constrained by other traits.</source>
          <target state="translated">形質は、追加の型パラメータを含んでいる場合もあります。これらの型パラメータや形質自体は、他の形質によって制約されることがあります。</target>
        </trans-unit>
        <trans-unit id="7b45c49a33c4022855bfa5d2a686751214a7126a" translate="yes" xml:space="preserve">
          <source>Traits may be implemented for</source>
          <target state="translated">形質は、以下のために実装されている可能性があります。</target>
        </trans-unit>
        <trans-unit id="986fcbb6a73e7cc26d2d8b2b6164011d8bab7460" translate="yes" xml:space="preserve">
          <source>Traits, helpers, and type definitions for core I/O functionality.</source>
          <target state="translated">コアI/O機能の特徴、ヘルパー、およびタイプ定義。</target>
        </trans-unit>
        <trans-unit id="9aa77953b92e4e6c565758326d541910014cfd21" translate="yes" xml:space="preserve">
          <source>Traits: Defining Shared Behavior</source>
          <target state="translated">特徴。共有行動の定義</target>
        </trans-unit>
        <trans-unit id="d8a8f61d9f0fd714531d17d414abcb212572f131" translate="yes" xml:space="preserve">
          <source>Transcribing</source>
          <target state="translated">Transcribing</target>
        </trans-unit>
        <trans-unit id="2df1d93dea4e259eb26edde2c26eb9c20992b104" translate="yes" xml:space="preserve">
          <source>Transforms an iterator into a collection.</source>
          <target state="translated">イテレータをコレクションに変換します。</target>
        </trans-unit>
        <trans-unit id="81c1484a18bb69461dc41663b8ca61aba770c66a" translate="yes" xml:space="preserve">
          <source>Transforms an iterator into a collection. &lt;a href=&quot;../../../iter/trait.iterator#method.collect&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">イテレータをコレクションに変換します。&lt;a href=&quot;../../../iter/trait.iterator#method.collect&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="0fe9703c09ae5aff473aa850cc9ea84e177f2a25" translate="yes" xml:space="preserve">
          <source>Transforms an iterator into a collection. &lt;a href=&quot;../../iter/trait.iterator#method.collect&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">イテレータをコレクションに変換します。&lt;a href=&quot;../../iter/trait.iterator#method.collect&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d95c53779cc93ec00cbab50bc8d1d781ee0140b9" translate="yes" xml:space="preserve">
          <source>Transforms an iterator into a collection. &lt;a href=&quot;../iter/trait.iterator#method.collect&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">イテレータをコレクションに変換します。&lt;a href=&quot;../iter/trait.iterator#method.collect&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8f6c7d5e9d128d42f6100c26dc454bf0231e3a05" translate="yes" xml:space="preserve">
          <source>Transforms an iterator into a collection. &lt;a href=&quot;iter/trait.iterator#method.collect&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">イテレータをコレクションに変換します。&lt;a href=&quot;iter/trait.iterator#method.collect&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="6f3c54bd44a2ac346c25bc4bf8dc990a7215290b" translate="yes" xml:space="preserve">
          <source>Transforms an iterator into a collection. &lt;a href=&quot;trait.iterator#method.collect&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">イテレータをコレクションに変換します。&lt;a href=&quot;trait.iterator#method.collect&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="6d04afdfe20a5d1e30c5697c258379dba1dfdd82" translate="yes" xml:space="preserve">
          <source>Transforms the &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; into a &lt;a href=&quot;../result/enum.result&quot;&gt;&lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt;&lt;/a&gt;, mapping &lt;a href=&quot;#variant.Some&quot;&gt;&lt;code&gt;Some(v)&lt;/code&gt;&lt;/a&gt; to &lt;a href=&quot;../result/enum.result#variant.Ok&quot;&gt;&lt;code&gt;Ok(v)&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; to &lt;a href=&quot;../result/enum.result#variant.Err&quot;&gt;&lt;code&gt;Err(err())&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">トランスフォーム &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; への&lt;a href=&quot;../result/enum.result&quot;&gt; &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt; &lt;/a&gt;、マッピングする&lt;a href=&quot;#variant.Some&quot;&gt; &lt;code&gt;Some(v)&lt;/code&gt; &lt;/a&gt;に&lt;a href=&quot;../result/enum.result#variant.Ok&quot;&gt; &lt;code&gt;Ok(v)&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#variant.None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt;に&lt;a href=&quot;../result/enum.result#variant.Err&quot;&gt; &lt;code&gt;Err(err())&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9a32b0b090c9474f23fede28872bd2f862d58ca7" translate="yes" xml:space="preserve">
          <source>Transforms the &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; into a &lt;a href=&quot;../result/enum.result&quot;&gt;&lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt;&lt;/a&gt;, mapping &lt;a href=&quot;#variant.Some&quot;&gt;&lt;code&gt;Some(v)&lt;/code&gt;&lt;/a&gt; to &lt;a href=&quot;../result/enum.result#variant.Ok&quot;&gt;&lt;code&gt;Ok(v)&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; to &lt;a href=&quot;../result/enum.result#variant.Err&quot;&gt;&lt;code&gt;Err(err)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">トランスフォーム &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; への&lt;a href=&quot;../result/enum.result&quot;&gt; &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt; &lt;/a&gt;、マッピングする&lt;a href=&quot;#variant.Some&quot;&gt; &lt;code&gt;Some(v)&lt;/code&gt; &lt;/a&gt;に&lt;a href=&quot;../result/enum.result#variant.Ok&quot;&gt; &lt;code&gt;Ok(v)&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#variant.None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt;に&lt;a href=&quot;../result/enum.result#variant.Err&quot;&gt; &lt;code&gt;Err(err)&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="398730368239daf72c58a553f251431298c7cfb2" translate="yes" xml:space="preserve">
          <source>Transforms the &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; into a &lt;a href=&quot;../result/enum.result&quot;&gt;&lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt;&lt;/a&gt;, mapping &lt;a href=&quot;enum.option#variant.Some&quot;&gt;&lt;code&gt;Some(v)&lt;/code&gt;&lt;/a&gt; to &lt;a href=&quot;../result/enum.result#variant.Ok&quot;&gt;&lt;code&gt;Ok(v)&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; to &lt;a href=&quot;../result/enum.result#variant.Err&quot;&gt;&lt;code&gt;Err(err())&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">トランスフォーム &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; への&lt;a href=&quot;../result/enum.result&quot;&gt; &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt; &lt;/a&gt;、マッピングする&lt;a href=&quot;enum.option#variant.Some&quot;&gt; &lt;code&gt;Some(v)&lt;/code&gt; &lt;/a&gt;に&lt;a href=&quot;../result/enum.result#variant.Ok&quot;&gt; &lt;code&gt;Ok(v)&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;enum.option#variant.None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt;に&lt;a href=&quot;../result/enum.result#variant.Err&quot;&gt; &lt;code&gt;Err(err())&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3d6f8723802ef085327c42e8d97e13f22a876933" translate="yes" xml:space="preserve">
          <source>Transforms the &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; into a &lt;a href=&quot;../result/enum.result&quot;&gt;&lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt;&lt;/a&gt;, mapping &lt;a href=&quot;enum.option#variant.Some&quot;&gt;&lt;code&gt;Some(v)&lt;/code&gt;&lt;/a&gt; to &lt;a href=&quot;../result/enum.result#variant.Ok&quot;&gt;&lt;code&gt;Ok(v)&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; to &lt;a href=&quot;../result/enum.result#variant.Err&quot;&gt;&lt;code&gt;Err(err)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">トランスフォーム &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; への&lt;a href=&quot;../result/enum.result&quot;&gt; &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt; &lt;/a&gt;、マッピングする&lt;a href=&quot;enum.option#variant.Some&quot;&gt; &lt;code&gt;Some(v)&lt;/code&gt; &lt;/a&gt;に&lt;a href=&quot;../result/enum.result#variant.Ok&quot;&gt; &lt;code&gt;Ok(v)&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;enum.option#variant.None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt;に&lt;a href=&quot;../result/enum.result#variant.Err&quot;&gt; &lt;code&gt;Err(err)&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="eeb313d7fccfec96291e799fbdbae78f85b64379" translate="yes" xml:space="preserve">
          <source>Transforms this &lt;code&gt;Read&lt;/code&gt; instance to an &lt;a href=&quot;../../../iter/trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt; over its bytes. &lt;a href=&quot;../../../io/trait.read#method.bytes&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">この &lt;code&gt;Read&lt;/code&gt; インスタンスを、そのバイトを介して&lt;a href=&quot;../../../iter/trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt;変換します。&lt;a href=&quot;../../../io/trait.read#method.bytes&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b4eb95563ead3e77457aefa3ae80b465ed16f04e" translate="yes" xml:space="preserve">
          <source>Transforms this &lt;code&gt;Read&lt;/code&gt; instance to an &lt;a href=&quot;../iter/trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt; over its bytes.</source>
          <target state="translated">この &lt;code&gt;Read&lt;/code&gt; インスタンスを、そのバイトを介して&lt;a href=&quot;../iter/trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt;変換します。</target>
        </trans-unit>
        <trans-unit id="95b63dbe9d04ab6189a2f04a995620130158a036" translate="yes" xml:space="preserve">
          <source>Transforms this &lt;code&gt;Read&lt;/code&gt; instance to an &lt;a href=&quot;../iter/trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt; over its bytes. &lt;a href=&quot;../io/trait.read#method.bytes&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">この &lt;code&gt;Read&lt;/code&gt; インスタンスを、そのバイトを介して&lt;a href=&quot;../iter/trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt;変換します。&lt;a href=&quot;../io/trait.read#method.bytes&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="87a749feee7f6dbf3973b0c9eb615ab3107735d9" translate="yes" xml:space="preserve">
          <source>Transforms this &lt;code&gt;Read&lt;/code&gt; instance to an &lt;a href=&quot;../iter/trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt; over its bytes. &lt;a href=&quot;trait.read#method.bytes&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">この &lt;code&gt;Read&lt;/code&gt; インスタンスを、そのバイトを介して&lt;a href=&quot;../iter/trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt;変換します。&lt;a href=&quot;trait.read#method.bytes&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="96b59ca5339cfaac01d1e21047c3e9f00c4f7918" translate="yes" xml:space="preserve">
          <source>Transforms this &lt;code&gt;Read&lt;/code&gt; instance to an &lt;a href=&quot;iter/trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt; over its bytes. &lt;a href=&quot;io/trait.read#method.bytes&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">この &lt;code&gt;Read&lt;/code&gt; インスタンスを、そのバイトを介して&lt;a href=&quot;iter/trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt;変換します。&lt;a href=&quot;io/trait.read#method.bytes&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="03c96526be3584d2d000005b6f01d7d3341c8987" translate="yes" xml:space="preserve">
          <source>Transforms this &lt;code&gt;Read&lt;/code&gt; instance to an [&lt;code&gt;Iterator&lt;/code&gt;] over its bytes. &lt;a href=&quot;../../../io/trait.read#method.bytes&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">この &lt;code&gt;Read&lt;/code&gt; インスタンスを、そのバイトを介して[ &lt;code&gt;Iterator&lt;/code&gt; ]に変換します。&lt;a href=&quot;../../../io/trait.read#method.bytes&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="12fec74288b63220271ad545369927ef8290a081" translate="yes" xml:space="preserve">
          <source>Transforms this &lt;code&gt;Read&lt;/code&gt; instance to an [&lt;code&gt;Iterator&lt;/code&gt;] over its bytes. &lt;a href=&quot;../io/trait.read#method.bytes&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">この &lt;code&gt;Read&lt;/code&gt; インスタンスを、そのバイトを介して[ &lt;code&gt;Iterator&lt;/code&gt; ]に変換します。&lt;a href=&quot;../io/trait.read#method.bytes&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="caf9cf05351d52e3be9282ae06933a14488056d3" translate="yes" xml:space="preserve">
          <source>Transforms this &lt;code&gt;Read&lt;/code&gt; instance to an [&lt;code&gt;Iterator&lt;/code&gt;] over its bytes. &lt;a href=&quot;io/trait.read#method.bytes&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">この &lt;code&gt;Read&lt;/code&gt; インスタンスを、そのバイトを介して[ &lt;code&gt;Iterator&lt;/code&gt; ]に変換します。&lt;a href=&quot;io/trait.read#method.bytes&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="971992e8ed9d30a3c4193fa3cfd51e0926ac6cae" translate="yes" xml:space="preserve">
          <source>Transforms this &lt;code&gt;Read&lt;/code&gt; instance to an [&lt;code&gt;Iterator&lt;/code&gt;] over its bytes. &lt;a href=&quot;trait.read#method.bytes&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">この &lt;code&gt;Read&lt;/code&gt; インスタンスを、そのバイトを介して[ &lt;code&gt;Iterator&lt;/code&gt; ]に変換します。&lt;a href=&quot;trait.read#method.bytes&quot;&gt;続きを読む&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1a3526b9261f151b08efa12a2cb227e4ab668a50" translate="yes" xml:space="preserve">
          <source>Transmute the slice to a slice of another type, ensuring alignment of the types is maintained.</source>
          <target state="translated">スライスを別のタイプのスライスに変換し、タイプのアラインメントが維持されるようにします。</target>
        </trans-unit>
        <trans-unit id="b2cf0502b0b75797a67313725bcf7174bc249f5e" translate="yes" xml:space="preserve">
          <source>Transmute with two differently sized types was attempted.</source>
          <target state="translated">サイズの異なる2種類のタイプでトランスミュートを試みました。</target>
        </trans-unit>
        <trans-unit id="f952303e87a91f8044520d869ced49cf3453271e" translate="yes" xml:space="preserve">
          <source>Transmute with two differently sized types was attempted. Erroneous code example:</source>
          <target state="translated">サイズの異なる 2 つのタイプを使用したトランスミュートが試みられました。誤ったコード例です。</target>
        </trans-unit>
        <trans-unit id="b4634eab766a7c67f4a788882ed6708930ac7723" translate="yes" xml:space="preserve">
          <source>Transposes a &lt;code&gt;Result&lt;/code&gt; of an &lt;code&gt;Option&lt;/code&gt; into an &lt;code&gt;Option&lt;/code&gt; of a &lt;code&gt;Result&lt;/code&gt;.</source>
          <target state="translated">移調 &lt;code&gt;Result&lt;/code&gt; の &lt;code&gt;Option&lt;/code&gt; に &lt;code&gt;Option&lt;/code&gt; の &lt;code&gt;Result&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="aeec9f606ca7cc27f401e6245265d892d7c06264" translate="yes" xml:space="preserve">
          <source>Transposes an &lt;code&gt;Option&lt;/code&gt; of a &lt;a href=&quot;../result/enum.result&quot;&gt;&lt;code&gt;Result&lt;/code&gt;&lt;/a&gt; into a &lt;a href=&quot;../result/enum.result&quot;&gt;&lt;code&gt;Result&lt;/code&gt;&lt;/a&gt; of an &lt;code&gt;Option&lt;/code&gt;.</source>
          <target state="translated">移調 &lt;code&gt;Option&lt;/code&gt; の&lt;a href=&quot;../result/enum.result&quot;&gt; &lt;code&gt;Result&lt;/code&gt; &lt;/a&gt;への&lt;a href=&quot;../result/enum.result&quot;&gt; &lt;code&gt;Result&lt;/code&gt; &lt;/a&gt;の &lt;code&gt;Option&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="86f3938f31467da551894d5bc312a73ba5dfa379" translate="yes" xml:space="preserve">
          <source>Transposes an &lt;code&gt;Option&lt;/code&gt; of a &lt;code&gt;Result&lt;/code&gt; into a &lt;code&gt;Result&lt;/code&gt; of an &lt;code&gt;Option&lt;/code&gt;.</source>
          <target state="translated">移調 &lt;code&gt;Option&lt;/code&gt; の &lt;code&gt;Result&lt;/code&gt; への &lt;code&gt;Result&lt;/code&gt; の &lt;code&gt;Option&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c9ccf92c436ad92e69f629d1e0488d9928d7d7e6" translate="yes" xml:space="preserve">
          <source>Treating Smart Pointers Like Regular References with the &lt;code id=&quot;treating-smart-pointers-like-regular-references-with-the-deref-trait&quot;&gt;Deref&lt;/code&gt; Trait</source>
          <target state="translated">スマートポインターを通常の参照のように &lt;code id=&quot;treating-smart-pointers-like-regular-references-with-the-deref-trait&quot;&gt;Deref&lt;/code&gt; トレイトで処理する</target>
        </trans-unit>
        <trans-unit id="453a0f8e23093d2d468470224b84f666ef425b17" translate="yes" xml:space="preserve">
          <source>Treating a Type Like a Reference by Implementing the &lt;code id=&quot;treating-a-type-like-a-reference-by-implementing-the-deref-trait&quot;&gt;Deref&lt;/code&gt; Trait</source>
          <target state="translated">&lt;code id=&quot;treating-a-type-like-a-reference-by-implementing-the-deref-trait&quot;&gt;Deref&lt;/code&gt; トレイトを実装して参照のように型を処理する</target>
        </trans-unit>
        <trans-unit id="dc5f05aecd7821404c68147034c8c8b762c94716" translate="yes" xml:space="preserve">
          <source>Treating each integration test file as its own crate is useful to create separate scopes that are more like the way end users will be using your crate. However, this means files in the &lt;em&gt;tests&lt;/em&gt; directory don&amp;rsquo;t share the same behavior as files in &lt;em&gt;src&lt;/em&gt; do, as you learned in Chapter 7 regarding how to separate code into modules and files.</source>
          <target state="translated">各統合テストファイルを独自のクレートとして扱うと、エンドユーザーがクレートを使用する方法に似た個別のスコープを作成するのに役立ちます。ただし、これは、コードをモジュールとファイルに分離する方法について第7章で学習したように、&lt;em&gt;tests&lt;/em&gt;ディレクトリ内のファイルが&lt;em&gt;src&lt;/em&gt;内のファイルと同じ動作を共有しないことを意味します。</target>
        </trans-unit>
        <trans-unit id="872845f485ac296c3cd7906d73027227f117e870" translate="yes" xml:space="preserve">
          <source>Tries to reserve capacity for at least &lt;code&gt;additional&lt;/code&gt; more elements to be inserted in the given &lt;code&gt;HashMap&amp;lt;K, V&amp;gt;&lt;/code&gt;. The collection may reserve more space to avoid frequent reallocations.</source>
          <target state="translated">指定された &lt;code&gt;HashMap&amp;lt;K, V&amp;gt;&lt;/code&gt; 挿入される少なくとも &lt;code&gt;additional&lt;/code&gt; 要素の容量を予約しようとします。コレクションは、頻繁な再割り当てを回避するために、より多くのスペースを予約する場合があります。</target>
        </trans-unit>
        <trans-unit id="7569cb1679e0c3aa7540702f13a5f8dd4a1739a0" translate="yes" xml:space="preserve">
          <source>Tries to reserve capacity for at least &lt;code&gt;additional&lt;/code&gt; more elements to be inserted in the given &lt;code&gt;HashMap&amp;lt;K,V&amp;gt;&lt;/code&gt;. The collection may reserve more space to avoid frequent reallocations.</source>
          <target state="translated">指定された &lt;code&gt;HashMap&amp;lt;K,V&amp;gt;&lt;/code&gt; 挿入される少なくとも &lt;code&gt;additional&lt;/code&gt; 要素の容量を予約しようとします。コレクションは、頻繁な再割り当てを回避するために、より多くのスペースを予約する場合があります。</target>
        </trans-unit>
        <trans-unit id="9f49475f33b235b7fd68d7b22ade090a001ae44f" translate="yes" xml:space="preserve">
          <source>Tries to reserve capacity for at least &lt;code&gt;additional&lt;/code&gt; more elements to be inserted in the given &lt;code&gt;HashSet&amp;lt;K, V&amp;gt;&lt;/code&gt;. The collection may reserve more space to avoid frequent reallocations.</source>
          <target state="translated">指定された &lt;code&gt;HashSet&amp;lt;K, V&amp;gt;&lt;/code&gt; 挿入される少なくとも &lt;code&gt;additional&lt;/code&gt; 要素の容量を予約しようとします。コレクションは、頻繁な再割り当てを回避するために、より多くのスペースを予約する場合があります。</target>
        </trans-unit>
        <trans-unit id="44298809e4f1f115c9f5ba28f46ae5a8d609bfc3" translate="yes" xml:space="preserve">
          <source>Tries to reserve capacity for at least &lt;code&gt;additional&lt;/code&gt; more elements to be inserted in the given &lt;code&gt;HashSet&amp;lt;K,V&amp;gt;&lt;/code&gt;. The collection may reserve more space to avoid frequent reallocations.</source>
          <target state="translated">指定された &lt;code&gt;HashSet&amp;lt;K,V&amp;gt;&lt;/code&gt; 挿入される少なくとも &lt;code&gt;additional&lt;/code&gt; 要素の容量を予約しようとします。コレクションは、頻繁な再割り当てを回避するために、より多くのスペースを予約する場合があります。</target>
        </trans-unit>
        <trans-unit id="57b7ed7bcbd15d35b279a1bce9bfd658efd71b2a" translate="yes" xml:space="preserve">
          <source>Tries to reserve capacity for at least &lt;code&gt;additional&lt;/code&gt; more elements to be inserted in the given &lt;code&gt;String&lt;/code&gt;. The collection may reserve more space to avoid frequent reallocations. After calling &lt;code&gt;reserve&lt;/code&gt;, capacity will be greater than or equal to &lt;code&gt;self.len() + additional&lt;/code&gt;. Does nothing if capacity is already sufficient.</source>
          <target state="translated">指定された &lt;code&gt;String&lt;/code&gt; に挿入される少なくとも &lt;code&gt;additional&lt;/code&gt; 要素の容量を予約しようとします。コレクションは、頻繁な再割り当てを回避するために、より多くのスペースを予約する場合があります。 &lt;code&gt;reserve&lt;/code&gt; を呼び出した後、容量は &lt;code&gt;self.len() + additional&lt;/code&gt; と同じかそれ以上になります。容量がすでに十分である場合は何もしません。</target>
        </trans-unit>
        <trans-unit id="1cd7b987cbc0791bfb1324cfd6464263751dd7d3" translate="yes" xml:space="preserve">
          <source>Tries to reserve capacity for at least &lt;code&gt;additional&lt;/code&gt; more elements to be inserted in the given &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt;. The collection may reserve more space to avoid frequent reallocations. After calling &lt;code&gt;reserve&lt;/code&gt;, capacity will be greater than or equal to &lt;code&gt;self.len() + additional&lt;/code&gt;. Does nothing if capacity is already sufficient.</source>
          <target state="translated">指定された &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; 挿入される少なくとも &lt;code&gt;additional&lt;/code&gt; 要素の容量を予約しようとします。コレクションは、頻繁な再割り当てを回避するために、より多くのスペースを予約する場合があります。 &lt;code&gt;reserve&lt;/code&gt; を呼び出した後、容量は &lt;code&gt;self.len() + additional&lt;/code&gt; と同じかそれ以上になります。容量がすでに十分である場合は何もしません。</target>
        </trans-unit>
        <trans-unit id="3cfac0433720c8cd13adc91772d417cffa80bddb" translate="yes" xml:space="preserve">
          <source>Tries to reserve capacity for at least &lt;code&gt;additional&lt;/code&gt; more elements to be inserted in the given &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt;. The collection may reserve more space to avoid frequent reallocations. After calling &lt;code&gt;try_reserve&lt;/code&gt;, capacity will be greater than or equal to &lt;code&gt;self.len() + additional&lt;/code&gt;. Does nothing if capacity is already sufficient.</source>
          <target state="translated">指定された &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; 挿入される少なくとも &lt;code&gt;additional&lt;/code&gt; 要素の容量を予約しようとします。コレクションは、頻繁な再割り当てを回避するために、より多くのスペースを予約する場合があります。 &lt;code&gt;try_reserve&lt;/code&gt; を呼び出した後、容量は &lt;code&gt;self.len() + additional&lt;/code&gt; ます。容量がすでに十分な場合は何もしません。</target>
        </trans-unit>
        <trans-unit id="4ddb2f7e963d7384fcd84f59781aafbcb1eefd0c" translate="yes" xml:space="preserve">
          <source>Tries to reserve capacity for at least &lt;code&gt;additional&lt;/code&gt; more elements to be inserted in the given &lt;code&gt;VecDeque&amp;lt;T&amp;gt;&lt;/code&gt;. The collection may reserve more space to avoid frequent reallocations. After calling &lt;code&gt;reserve&lt;/code&gt;, capacity will be greater than or equal to &lt;code&gt;self.len() + additional&lt;/code&gt;. Does nothing if capacity is already sufficient.</source>
          <target state="translated">指定された &lt;code&gt;VecDeque&amp;lt;T&amp;gt;&lt;/code&gt; 挿入される少なくとも &lt;code&gt;additional&lt;/code&gt; 要素の容量を予約しようとします。コレクションは、頻繁な再割り当てを回避するために、より多くのスペースを予約する場合があります。 &lt;code&gt;reserve&lt;/code&gt; を呼び出した後、容量は &lt;code&gt;self.len() + additional&lt;/code&gt; と同じかそれ以上になります。容量がすでに十分である場合は何もしません。</target>
        </trans-unit>
        <trans-unit id="c6ae8edff340a9bc30d1fc3ea07c88a2d615e594" translate="yes" xml:space="preserve">
          <source>Tries to reserve capacity for at least &lt;code&gt;additional&lt;/code&gt; more elements to be inserted in the given &lt;code&gt;VecDeque&amp;lt;T&amp;gt;&lt;/code&gt;. The collection may reserve more space to avoid frequent reallocations. After calling &lt;code&gt;try_reserve&lt;/code&gt;, capacity will be greater than or equal to &lt;code&gt;self.len() + additional&lt;/code&gt;. Does nothing if capacity is already sufficient.</source>
          <target state="translated">指定された &lt;code&gt;VecDeque&amp;lt;T&amp;gt;&lt;/code&gt; 挿入される少なくとも &lt;code&gt;additional&lt;/code&gt; 要素の容量を予約しようとします。コレクションは、頻繁な再割り当てを回避するために、より多くのスペースを予約する場合があります。 &lt;code&gt;try_reserve&lt;/code&gt; を呼び出した後、容量は &lt;code&gt;self.len() + additional&lt;/code&gt; ます。容量がすでに十分な場合は何もしません。</target>
        </trans-unit>
        <trans-unit id="64c1225ca478afba96e69e3738929c44dc44f818" translate="yes" xml:space="preserve">
          <source>Tries to reserve the minimum capacity for exactly &lt;code&gt;additional&lt;/code&gt; elements to be inserted in the given &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt;. After calling &lt;code&gt;try_reserve_exact&lt;/code&gt;, capacity will be greater than or equal to &lt;code&gt;self.len() + additional&lt;/code&gt; if it returns &lt;code&gt;Ok(())&lt;/code&gt;. Does nothing if the capacity is already sufficient.</source>
          <target state="translated">指定された &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; 挿入される正確に &lt;code&gt;additional&lt;/code&gt; 要素の最小容量を予約しようとします。 &lt;code&gt;try_reserve_exact&lt;/code&gt; を呼び出した後、容量は &lt;code&gt;self.len() + additional&lt;/code&gt; &lt;code&gt;Ok(())&lt;/code&gt; 返す場合）以上になります。容量がすでに十分な場合は何もしません。</target>
        </trans-unit>
        <trans-unit id="1c910716261f7e551f1259edf1ea661f9578f8fe" translate="yes" xml:space="preserve">
          <source>Tries to reserve the minimum capacity for exactly &lt;code&gt;additional&lt;/code&gt; more elements to be inserted in the given &lt;code&gt;VecDeque&amp;lt;T&amp;gt;&lt;/code&gt;. After calling &lt;code&gt;try_reserve_exact&lt;/code&gt;, capacity will be greater than or equal to &lt;code&gt;self.len() + additional&lt;/code&gt;. Does nothing if the capacity is already sufficient.</source>
          <target state="translated">指定された &lt;code&gt;VecDeque&amp;lt;T&amp;gt;&lt;/code&gt; 挿入される要素を正確に &lt;code&gt;additional&lt;/code&gt; するための最小容量を予約しようとします。 &lt;code&gt;try_reserve_exact&lt;/code&gt; を呼び出した後、容量は &lt;code&gt;self.len() + additional&lt;/code&gt; ます。容量がすでに十分な場合は何もしません。</target>
        </trans-unit>
        <trans-unit id="ea826f973c60e61f52c1a1545b1dfe84c909b71b" translate="yes" xml:space="preserve">
          <source>Tries to reserves the minimum capacity for exactly &lt;code&gt;additional&lt;/code&gt; more elements to be inserted in the given &lt;code&gt;String&lt;/code&gt;. After calling &lt;code&gt;reserve_exact&lt;/code&gt;, capacity will be greater than or equal to &lt;code&gt;self.len() + additional&lt;/code&gt;. Does nothing if the capacity is already sufficient.</source>
          <target state="translated">指定された &lt;code&gt;String&lt;/code&gt; に挿入される要素を &lt;code&gt;additional&lt;/code&gt; するための最小容量を予約しようとします。 &lt;code&gt;reserve_exact&lt;/code&gt; を呼び出した後、容量は &lt;code&gt;self.len() + additional&lt;/code&gt; ます。容量がすでに十分である場合は何もしません。</target>
        </trans-unit>
        <trans-unit id="c6bd5db90f8cb9540fd3f35c2883f8b8a881d37a" translate="yes" xml:space="preserve">
          <source>Tries to reserves the minimum capacity for exactly &lt;code&gt;additional&lt;/code&gt; more elements to be inserted in the given &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt;. After calling &lt;code&gt;reserve_exact&lt;/code&gt;, capacity will be greater than or equal to &lt;code&gt;self.len() + additional&lt;/code&gt;. Does nothing if the capacity is already sufficient.</source>
          <target state="translated">指定された &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; 挿入される要素を &lt;code&gt;additional&lt;/code&gt; するための最小容量を予約しようとします。 &lt;code&gt;reserve_exact&lt;/code&gt; を呼び出した後、容量は &lt;code&gt;self.len() + additional&lt;/code&gt; ます。容量がすでに十分である場合は何もしません。</target>
        </trans-unit>
        <trans-unit id="90bd1ab7f76bd67110646c064057b5e26a376cef" translate="yes" xml:space="preserve">
          <source>Tries to reserves the minimum capacity for exactly &lt;code&gt;additional&lt;/code&gt; more elements to be inserted in the given &lt;code&gt;VecDeque&amp;lt;T&amp;gt;&lt;/code&gt;. After calling &lt;code&gt;reserve_exact&lt;/code&gt;, capacity will be greater than or equal to &lt;code&gt;self.len() + additional&lt;/code&gt;. Does nothing if the capacity is already sufficient.</source>
          <target state="translated">指定された &lt;code&gt;VecDeque&amp;lt;T&amp;gt;&lt;/code&gt; 挿入される要素を &lt;code&gt;additional&lt;/code&gt; するための最小容量を予約しようとします。 &lt;code&gt;reserve_exact&lt;/code&gt; を呼び出した後、容量は &lt;code&gt;self.len() + additional&lt;/code&gt; ます。容量がすでに十分である場合は何もしません。</target>
        </trans-unit>
        <trans-unit id="6547ac01541509cbac431ef7568ec956f10079ba" translate="yes" xml:space="preserve">
          <source>Triggers a panic without invoking the panic hook.</source>
          <target state="translated">パニックフックを発動させずにパニックを誘発します。</target>
        </trans-unit>
        <trans-unit id="285ec850c11d78bac10f6bfa31b69a37f1b257c9" translate="yes" xml:space="preserve">
          <source>Troubleshooting</source>
          <target state="translated">Troubleshooting</target>
        </trans-unit>
        <trans-unit id="27c211f297ff6afd2354cf8148b012cae3b0628b" translate="yes" xml:space="preserve">
          <source>Truncates &lt;code&gt;self&lt;/code&gt; to &lt;a href=&quot;struct.path#method.parent&quot;&gt;&lt;code&gt;self.parent&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;self&lt;/code&gt; を&lt;a href=&quot;struct.path#method.parent&quot;&gt; &lt;code&gt;self.parent&lt;/code&gt; に&lt;/a&gt;切り捨てます。</target>
        </trans-unit>
        <trans-unit id="adb95599ef56aa13caaac1499a3644565e8b6049" translate="yes" xml:space="preserve">
          <source>Truncates &lt;code&gt;self&lt;/code&gt; to &lt;a href=&quot;struct.pathbuf#method.parent&quot;&gt;&lt;code&gt;self.parent&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;self&lt;/code&gt; を&lt;a href=&quot;struct.pathbuf#method.parent&quot;&gt; &lt;code&gt;self.parent&lt;/code&gt; に&lt;/a&gt;切り捨てます。</target>
        </trans-unit>
        <trans-unit id="5927f0d5ac8801b4254d8379327d991a701a80da" translate="yes" xml:space="preserve">
          <source>Truncates or extends the underlying file, updating the size of this file to become &lt;code&gt;size&lt;/code&gt;.</source>
          <target state="translated">切り捨てまたはなるために、このファイルのサイズを更新し、基礎となるファイルを拡張 &lt;code&gt;size&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2702cfbf0e58f8f82fb23e8d650e499d7cc927c5" translate="yes" xml:space="preserve">
          <source>Truncates the &lt;code&gt;OsString&lt;/code&gt; to zero length.</source>
          <target state="translated">&lt;code&gt;OsString&lt;/code&gt; の長さをゼロに切り捨てます。</target>
        </trans-unit>
        <trans-unit id="ed28d8bdecc758ddcef76eed8b86ffa1d4ea3181" translate="yes" xml:space="preserve">
          <source>Truncates this &lt;code&gt;String&lt;/code&gt;, removing all contents.</source>
          <target state="translated">この &lt;code&gt;String&lt;/code&gt; を切り捨て、すべてのコンテンツを削除します。</target>
        </trans-unit>
        <trans-unit id="5474aa5946c713a1f6e7a033ad591db623edd6d3" translate="yes" xml:space="preserve">
          <source>Truncating a five element vector to two elements:</source>
          <target state="translated">5つの要素のベクトルを2つの要素に切り捨てます。</target>
        </trans-unit>
        <trans-unit id="743f01c9ef69fe480785553858265deba678132e" translate="yes" xml:space="preserve">
          <source>Truncating when &lt;code&gt;len == 0&lt;/code&gt; is equivalent to calling the &lt;a href=&quot;#method.clear&quot;&gt;&lt;code&gt;clear&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;code&gt;len == 0&lt;/code&gt; 場合の切り捨ては、&lt;a href=&quot;#method.clear&quot;&gt; &lt;code&gt;clear&lt;/code&gt; &lt;/a&gt;メソッドの呼び出しと同等です。</target>
        </trans-unit>
        <trans-unit id="7b9f4a78a76c6893e05b1ff011a47211505551b2" translate="yes" xml:space="preserve">
          <source>Truncating when &lt;code&gt;len == 0&lt;/code&gt; is equivalent to calling the &lt;a href=&quot;struct.vec#method.clear&quot;&gt;&lt;code&gt;clear&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;code&gt;len == 0&lt;/code&gt; ときに切り捨てることは、&lt;a href=&quot;struct.vec#method.clear&quot;&gt; &lt;code&gt;clear&lt;/code&gt; &lt;/a&gt;メソッドを呼び出すことと同じです。</target>
        </trans-unit>
        <trans-unit id="63908c3dcfc457f07a333b89f52c763024b846da" translate="yes" xml:space="preserve">
          <source>TrustedLen</source>
          <target state="translated">TrustedLen</target>
        </trans-unit>
        <trans-unit id="72677028b4d0d41af475041fdbe030f7c7146d2c" translate="yes" xml:space="preserve">
          <source>Try</source>
          <target state="translated">Try</target>
        </trans-unit>
        <trans-unit id="93cacc9f6a162523f52bc4401526c741faac95a0" translate="yes" xml:space="preserve">
          <source>Try designing more experiments that vary the values and lifetimes of the references passed in to the &lt;code&gt;longest&lt;/code&gt; function and how the returned reference is used. Make hypotheses about whether or not your experiments will pass the borrow checker before you compile; then check to see if you&amp;rsquo;re right!</source>
          <target state="translated">&lt;code&gt;longest&lt;/code&gt; 関数に渡される参照の値と有効期間、および返された参照の使用方法を変化させる実験をさらに設計してみてください。コンパイルする前に実験がボローチェッカーに合格するかどうかについて仮説を立てます。次に、あなたが正しいかどうかを確認してください！</target>
        </trans-unit>
        <trans-unit id="b25651affa48a09fef804a246293a9441327deef" translate="yes" xml:space="preserve">
          <source>Try making a request from a different browser or asking for a different address, such as &lt;em&gt;127.0.0.1:7878/test&lt;/em&gt;, to see how the request data changes.</source>
          <target state="translated">別のブラウザーから要求を行うか、&lt;em&gt;127.0.0.1:7878/test&lt;/em&gt;などの別のアドレスを要求して、要求データがどのように変化するかを確認してください。</target>
        </trans-unit>
        <trans-unit id="3cdedf03df7f2d7ff7f62a3fe4c0233e49c2605a" translate="yes" xml:space="preserve">
          <source>Try modifying &lt;code&gt;Cacher&lt;/code&gt; to hold a hash map rather than a single value. The keys of the hash map will be the &lt;code&gt;arg&lt;/code&gt; values that are passed in, and the values of the hash map will be the result of calling the closure on that key. Instead of looking at whether &lt;code&gt;self.value&lt;/code&gt; directly has a &lt;code&gt;Some&lt;/code&gt; or a &lt;code&gt;None&lt;/code&gt; value, the &lt;code&gt;value&lt;/code&gt; function will look up the &lt;code&gt;arg&lt;/code&gt; in the hash map and return the value if it&amp;rsquo;s present. If it&amp;rsquo;s not present, the &lt;code&gt;Cacher&lt;/code&gt; will call the closure and save the resulting value in the hash map associated with its &lt;code&gt;arg&lt;/code&gt; value.</source>
          <target state="translated">単一の値ではなくハッシュマップを保持するように &lt;code&gt;Cacher&lt;/code&gt; を変更してみてください。ハッシュマップのキーは渡される &lt;code&gt;arg&lt;/code&gt; の値になり、ハッシュマップの値はそのキーのクロージャを呼び出した結果になります。 &lt;code&gt;self.value&lt;/code&gt; が直接 &lt;code&gt;Some&lt;/code&gt; または &lt;code&gt;None&lt;/code&gt; 値を持っているかどうかを調べる代わりに、 &lt;code&gt;value&lt;/code&gt; 関数はハッシュマップで &lt;code&gt;arg&lt;/code&gt; を検索し、存在する場合はその値を返します。存在しない場合、 &lt;code&gt;Cacher&lt;/code&gt; はクロージャーを呼び出し、結果の値をその &lt;code&gt;arg&lt;/code&gt; 値に関連付けられたハッシュマップに保存します。</target>
        </trans-unit>
        <trans-unit id="746db25e46725d2a25a5be38541b8fd90c0e318e" translate="yes" xml:space="preserve">
          <source>Try running the program a few times:</source>
          <target state="translated">何度か実行してみてください。</target>
        </trans-unit>
        <trans-unit id="40db21ca976b20c4f1a37614a766d7e0fedff356" translate="yes" xml:space="preserve">
          <source>Try running this code; you should see the following output:</source>
          <target state="translated">このコードを実行してみてください。</target>
        </trans-unit>
        <trans-unit id="0c704dff8c8947b24bdb19d42ed1933021fa9b51" translate="yes" xml:space="preserve">
          <source>Try running this program with the &lt;code&gt;main&lt;/code&gt; function from Listing 13-2. Change the values in the &lt;code&gt;simulated_user_specified_value&lt;/code&gt; and &lt;code&gt;simulated_random_number&lt;/code&gt; variables to verify that in all the cases in the various &lt;code&gt;if&lt;/code&gt; and &lt;code&gt;else&lt;/code&gt; blocks, &lt;code&gt;calculating slowly...&lt;/code&gt; appears only once and only when needed. The &lt;code&gt;Cacher&lt;/code&gt; takes care of the logic necessary to ensure we aren&amp;rsquo;t calling the expensive calculation more than we need to so &lt;code&gt;generate_workout&lt;/code&gt; can focus on the business logic.</source>
          <target state="translated">リスト13-2の &lt;code&gt;main&lt;/code&gt; 関数でこのプログラムを実行してみてください。内の値に変更 &lt;code&gt;simulated_user_specified_value&lt;/code&gt; と &lt;code&gt;simulated_random_number&lt;/code&gt; 様々で、すべての場合にそのことを確認するために、変数を &lt;code&gt;if&lt;/code&gt; と、 &lt;code&gt;else&lt;/code&gt; ブロックは、 &lt;code&gt;calculating slowly...&lt;/code&gt; 必要な時に一度だけしか表示されます。 &lt;code&gt;Cacher&lt;/code&gt; 我々はように必要以上の高価な計算を呼び出していないことを確認するために必要なロジックの世話を &lt;code&gt;generate_workout&lt;/code&gt; は、ビジネスロジックに集中することができます。</target>
        </trans-unit>
        <trans-unit id="f64954535b22680cee23c59284f0821d313912c5" translate="yes" xml:space="preserve">
          <source>Try running this program; you should get the following output:</source>
          <target state="translated">このプログラムを実行してみてください。</target>
        </trans-unit>
        <trans-unit id="4e2f79e768da3d333677b7768aba6698b9473abe" translate="yes" xml:space="preserve">
          <source>Try the tasks suggested for additional requirements that we mentioned at the start of this section on the &lt;code&gt;blog&lt;/code&gt; crate as it is after Listing 17-20 to see what you think about the design of this version of the code. Note that some of the tasks might be completed already in this design.</source>
          <target state="translated">リスト17-20の後のように、 &lt;code&gt;blog&lt;/code&gt; クレートでこのセクションの冒頭に述べた追加の要件について提案されたタスクを試して、このバージョンのコードの設計についてどう思うかを確認してください。一部のタスクは、この設計ですでに完了している場合があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="bea7aa5241bc934fb93d73fbe72c3c92fd9cb391" translate="yes" xml:space="preserve">
          <source>Try this instead:</source>
          <target state="translated">代わりにこれを試してみてください。</target>
        </trans-unit>
        <trans-unit id="cf4dffd1f17e87d4131fe9dbd6ed3566366e3295" translate="yes" xml:space="preserve">
          <source>Try to avoid moving the variable.</source>
          <target state="translated">変数を移動させないようにしましょう。</target>
        </trans-unit>
        <trans-unit id="708f496ce718cad5f2bfb9c2203cb73e375d06e0" translate="yes" xml:space="preserve">
          <source>Try to create the target number type from a source number type. This returns an error if the source value is outside of the range of the target type.</source>
          <target state="translated">ソースの数値型からターゲットの数値型を作成しようとします。これは、ソース値がターゲット型の範囲外の場合にエラーを返します。</target>
        </trans-unit>
        <trans-unit id="d7bb54d91c5813615d6b6445e2ebf488e82cdc0c" translate="yes" xml:space="preserve">
          <source>Try using &lt;code&gt;{}&lt;/code&gt; instead:</source>
          <target state="translated">代わりに &lt;code&gt;{}&lt;/code&gt; を使用してみてください：</target>
        </trans-unit>
        <trans-unit id="b8a1eb6a4114d62537aa281f5d03abf55ba6e9e3" translate="yes" xml:space="preserve">
          <source>Try using type inference instead. Example:</source>
          <target state="translated">代わりに型推論を使ってみてください。例。</target>
        </trans-unit>
        <trans-unit id="ea0079401a89dd04fe8291c0c734d4aa5a8c7177" translate="yes" xml:space="preserve">
          <source>Try::from_error</source>
          <target state="translated">Try::from_error</target>
        </trans-unit>
        <trans-unit id="bde6f44b7e04bd6491a07ffb037c4fa48b882a33" translate="yes" xml:space="preserve">
          <source>Try::from_ok</source>
          <target state="translated">Try::from_ok</target>
        </trans-unit>
        <trans-unit id="809111dd75695d75905fa1c8b4bad5d14691a30e" translate="yes" xml:space="preserve">
          <source>Try::into_result</source>
          <target state="translated">Try::into_result</target>
        </trans-unit>
        <trans-unit id="18e77d4b44ff639060d9a2fa2960f190781f7859" translate="yes" xml:space="preserve">
          <source>TryFrom</source>
          <target state="translated">TryFrom</target>
        </trans-unit>
        <trans-unit id="4acc1ac1c58ab4ae6724001d461baf2c8b8dbc3a" translate="yes" xml:space="preserve">
          <source>TryFrom::try_from</source>
          <target state="translated">TryFrom::try_from</target>
        </trans-unit>
        <trans-unit id="ad96c601815ad5f050e0b6351dd0b189e48a31a9" translate="yes" xml:space="preserve">
          <source>TryFromIntError</source>
          <target state="translated">TryFromIntError</target>
        </trans-unit>
        <trans-unit id="f81061adcf59a4b18f6432dc500e16b9a793d0e6" translate="yes" xml:space="preserve">
          <source>TryFromIntError::borrow</source>
          <target state="translated">TryFromIntError::borrow</target>
        </trans-unit>
        <trans-unit id="4d5e6ded3e6e6a7b69de27e74b52df8d33085625" translate="yes" xml:space="preserve">
          <source>TryFromIntError::borrow_mut</source>
          <target state="translated">TryFromIntError::borrow_mut</target>
        </trans-unit>
        <trans-unit id="8c6ac7bc7b08a0164c28c84e181d07ac7264caa1" translate="yes" xml:space="preserve">
          <source>TryFromIntError::cause</source>
          <target state="translated">TryFromIntError::cause</target>
        </trans-unit>
        <trans-unit id="f0da83cb703ff9ab478400076f17fb3b6df58453" translate="yes" xml:space="preserve">
          <source>TryFromIntError::clone</source>
          <target state="translated">TryFromIntError::clone</target>
        </trans-unit>
        <trans-unit id="21c991dfc7c9f46d0f223e9ada6bbb1b3ddc0419" translate="yes" xml:space="preserve">
          <source>TryFromIntError::clone_from</source>
          <target state="translated">TryFromIntError::clone_from</target>
        </trans-unit>
        <trans-unit id="611f56282230f313fea840ae9d1b4022b318faec" translate="yes" xml:space="preserve">
          <source>TryFromIntError::clone_into</source>
          <target state="translated">TryFromIntError::clone_into</target>
        </trans-unit>
        <trans-unit id="05df18eb5e5e51ad418c603a8c9e45f939b7afa0" translate="yes" xml:space="preserve">
          <source>TryFromIntError::description</source>
          <target state="translated">TryFromIntError::description</target>
        </trans-unit>
        <trans-unit id="cffa72c79f028d8b2b67ac3b5a88fa8e893445f1" translate="yes" xml:space="preserve">
          <source>TryFromIntError::eq</source>
          <target state="translated">TryFromIntError::eq</target>
        </trans-unit>
        <trans-unit id="7ec29ac29b26af4ad4e22c908d20f04e34123009" translate="yes" xml:space="preserve">
          <source>TryFromIntError::fmt</source>
          <target state="translated">TryFromIntError::fmt</target>
        </trans-unit>
        <trans-unit id="27af3cbe1fc043a4ba2263a1ddb04f43ed3341d8" translate="yes" xml:space="preserve">
          <source>TryFromIntError::from</source>
          <target state="translated">TryFromIntError::from</target>
        </trans-unit>
        <trans-unit id="88b0ca4bd6e97295df88042c17da3bc4ad1d1e49" translate="yes" xml:space="preserve">
          <source>TryFromIntError::into</source>
          <target state="translated">TryFromIntError::into</target>
        </trans-unit>
        <trans-unit id="b590493dab8454ef91bc8263edc4d90474ae7585" translate="yes" xml:space="preserve">
          <source>TryFromIntError::ne</source>
          <target state="translated">TryFromIntError::ne</target>
        </trans-unit>
        <trans-unit id="34bc40cbf452f309c77160c0bc046a559d512c4c" translate="yes" xml:space="preserve">
          <source>TryFromIntError::source</source>
          <target state="translated">TryFromIntError::source</target>
        </trans-unit>
        <trans-unit id="4650111711913011245aed1cfd4e401bf80b92bd" translate="yes" xml:space="preserve">
          <source>TryFromIntError::to_owned</source>
          <target state="translated">TryFromIntError::to_owned</target>
        </trans-unit>
        <trans-unit id="145d38c6294ea7b0b18a9beaf5c2ba62d71c6d31" translate="yes" xml:space="preserve">
          <source>TryFromIntError::to_string</source>
          <target state="translated">TryFromIntError::to_string</target>
        </trans-unit>
        <trans-unit id="3bd074fd7b824eb16d5c009603fefee21d967354" translate="yes" xml:space="preserve">
          <source>TryFromIntError::try_from</source>
          <target state="translated">TryFromIntError::try_from</target>
        </trans-unit>
        <trans-unit id="2a66975e8a4a9df97b01eea79b97edba1ce4fc13" translate="yes" xml:space="preserve">
          <source>TryFromIntError::try_into</source>
          <target state="translated">TryFromIntError::try_into</target>
        </trans-unit>
        <trans-unit id="853b95e029b9b10b04426ea41bce22a33cadfde3" translate="yes" xml:space="preserve">
          <source>TryFromIntError::type_id</source>
          <target state="translated">TryFromIntError::type_id</target>
        </trans-unit>
        <trans-unit id="f7ae979f3e3e5c6883cf562acec4a3d8911ff6b7" translate="yes" xml:space="preserve">
          <source>TryFromSliceError</source>
          <target state="translated">TryFromSliceError</target>
        </trans-unit>
        <trans-unit id="08abda7dda4132c13ad2de215a8116ad1c512693" translate="yes" xml:space="preserve">
          <source>TryFromSliceError::borrow</source>
          <target state="translated">TryFromSliceError::borrow</target>
        </trans-unit>
        <trans-unit id="a42a16b656b3e78ad3c1fba788c25cca8562aa04" translate="yes" xml:space="preserve">
          <source>TryFromSliceError::borrow_mut</source>
          <target state="translated">TryFromSliceError::borrow_mut</target>
        </trans-unit>
        <trans-unit id="6b154dc43d23a695abe3c26c810c9600a10bbfc7" translate="yes" xml:space="preserve">
          <source>TryFromSliceError::cause</source>
          <target state="translated">TryFromSliceError::cause</target>
        </trans-unit>
        <trans-unit id="06c3cdee5b115341587a81b7640e380fd15333ea" translate="yes" xml:space="preserve">
          <source>TryFromSliceError::clone</source>
          <target state="translated">TryFromSliceError::clone</target>
        </trans-unit>
        <trans-unit id="a4d48a9b9f7dd5e07e2bb398d2d1029a5b1eb76b" translate="yes" xml:space="preserve">
          <source>TryFromSliceError::clone_from</source>
          <target state="translated">TryFromSliceError::clone_from</target>
        </trans-unit>
        <trans-unit id="faf3d5f757e37a47d1e58275eb48efaa726218ad" translate="yes" xml:space="preserve">
          <source>TryFromSliceError::clone_into</source>
          <target state="translated">TryFromSliceError::clone_into</target>
        </trans-unit>
        <trans-unit id="49619f8bf5df143f7d9e552904f6a84fca8093ea" translate="yes" xml:space="preserve">
          <source>TryFromSliceError::description</source>
          <target state="translated">TryFromSliceError::description</target>
        </trans-unit>
        <trans-unit id="fc484006f6aa38bffa40eb517d8b4b32091a5671" translate="yes" xml:space="preserve">
          <source>TryFromSliceError::fmt</source>
          <target state="translated">TryFromSliceError::fmt</target>
        </trans-unit>
        <trans-unit id="630dd1955f1b733df02d2f1446cd6b9ba9cd293b" translate="yes" xml:space="preserve">
          <source>TryFromSliceError::from</source>
          <target state="translated">TryFromSliceError::from</target>
        </trans-unit>
        <trans-unit id="2a5519380aabe238e175f9b6849d0a2d7f53c5a8" translate="yes" xml:space="preserve">
          <source>TryFromSliceError::into</source>
          <target state="translated">TryFromSliceError::into</target>
        </trans-unit>
        <trans-unit id="b1ef9a7f4941a7c7fc1ee4d269c0be752b4049c1" translate="yes" xml:space="preserve">
          <source>TryFromSliceError::source</source>
          <target state="translated">TryFromSliceError::source</target>
        </trans-unit>
        <trans-unit id="46b791fdfec792bbb13fbb3115a245caecffc0d8" translate="yes" xml:space="preserve">
          <source>TryFromSliceError::to_owned</source>
          <target state="translated">TryFromSliceError::to_owned</target>
        </trans-unit>
        <trans-unit id="04f8529255b3a3ba17e31837ca350fb03a1837a0" translate="yes" xml:space="preserve">
          <source>TryFromSliceError::to_string</source>
          <target state="translated">TryFromSliceError::to_string</target>
        </trans-unit>
        <trans-unit id="d39f8030ca01a81b1eedd289678e98a9a8c6374d" translate="yes" xml:space="preserve">
          <source>TryFromSliceError::try_from</source>
          <target state="translated">TryFromSliceError::try_from</target>
        </trans-unit>
        <trans-unit id="87b56d5270282ca8cea8f2ae22fb393b6ef2e185" translate="yes" xml:space="preserve">
          <source>TryFromSliceError::try_into</source>
          <target state="translated">TryFromSliceError::try_into</target>
        </trans-unit>
        <trans-unit id="273ef45502220a3e82cc6cd2ff47d1b967ced192" translate="yes" xml:space="preserve">
          <source>TryFromSliceError::type_id</source>
          <target state="translated">TryFromSliceError::type_id</target>
        </trans-unit>
        <trans-unit id="eb91bb9edb358310d1de44ff46dcb50ed3d4dbf6" translate="yes" xml:space="preserve">
          <source>TryInto</source>
          <target state="translated">TryInto</target>
        </trans-unit>
        <trans-unit id="d4782bb6e82830853df5d390b765742f2ed433ce" translate="yes" xml:space="preserve">
          <source>TryInto::try_into</source>
          <target state="translated">TryInto::try_into</target>
        </trans-unit>
        <trans-unit id="d550a8f93a6fe62cffc66481db4e53166b4de9e5" translate="yes" xml:space="preserve">
          <source>TryIter</source>
          <target state="translated">TryIter</target>
        </trans-unit>
        <trans-unit id="b4f81b18947056193693e5cce08cae5bcc996cf1" translate="yes" xml:space="preserve">
          <source>TryLockError</source>
          <target state="translated">TryLockError</target>
        </trans-unit>
        <trans-unit id="6408d526dcb04978c761f176b4b48253f6e2b3a3" translate="yes" xml:space="preserve">
          <source>TryLockError::borrow</source>
          <target state="translated">TryLockError::borrow</target>
        </trans-unit>
        <trans-unit id="c1162b670a7e56c24667fd355cb74c01579b66f6" translate="yes" xml:space="preserve">
          <source>TryLockError::borrow_mut</source>
          <target state="translated">TryLockError::borrow_mut</target>
        </trans-unit>
        <trans-unit id="645caaf83340c9e36066d5283df40d2289f0c56a" translate="yes" xml:space="preserve">
          <source>TryLockError::cause</source>
          <target state="translated">TryLockError::cause</target>
        </trans-unit>
        <trans-unit id="edc35be2771c53d502f5e8aaee878dd2e15d3b5a" translate="yes" xml:space="preserve">
          <source>TryLockError::description</source>
          <target state="translated">TryLockError::description</target>
        </trans-unit>
        <trans-unit id="c6f2c000c844249e646527b009bb44e488eef5e5" translate="yes" xml:space="preserve">
          <source>TryLockError::fmt</source>
          <target state="translated">TryLockError::fmt</target>
        </trans-unit>
        <trans-unit id="9001bf82d878e70373f04e6654b0f776179b2f53" translate="yes" xml:space="preserve">
          <source>TryLockError::from</source>
          <target state="translated">TryLockError::from</target>
        </trans-unit>
        <trans-unit id="655a2e7bdf752d14f5354358dacab8b46b5c1b0d" translate="yes" xml:space="preserve">
          <source>TryLockError::into</source>
          <target state="translated">TryLockError::into</target>
        </trans-unit>
        <trans-unit id="e4ccb09bacf6984439f523c7aecac39df9844058" translate="yes" xml:space="preserve">
          <source>TryLockError::source</source>
          <target state="translated">TryLockError::source</target>
        </trans-unit>
        <trans-unit id="c61e09fc91fbcfa81bcf718beb714ea63719b4eb" translate="yes" xml:space="preserve">
          <source>TryLockError::to_string</source>
          <target state="translated">TryLockError::to_string</target>
        </trans-unit>
        <trans-unit id="ebcde8097671e82bd0e812397421ce3e5f83aa6a" translate="yes" xml:space="preserve">
          <source>TryLockError::try_from</source>
          <target state="translated">TryLockError::try_from</target>
        </trans-unit>
        <trans-unit id="7b92cc07d0ee9b28099cb947d6053805d66baac1" translate="yes" xml:space="preserve">
          <source>TryLockError::try_into</source>
          <target state="translated">TryLockError::try_into</target>
        </trans-unit>
        <trans-unit id="904eaeeceb270dd726f594af3ac7324866060774" translate="yes" xml:space="preserve">
          <source>TryLockError::type_id</source>
          <target state="translated">TryLockError::type_id</target>
        </trans-unit>
        <trans-unit id="7d779fd6e34ddc3c9ecd145e12eaab2707fb88f2" translate="yes" xml:space="preserve">
          <source>TryLockResult</source>
          <target state="translated">TryLockResult</target>
        </trans-unit>
        <trans-unit id="b00cb1382a524b91c7b6f872f909018a2ba2fcdb" translate="yes" xml:space="preserve">
          <source>TryRecvError</source>
          <target state="translated">TryRecvError</target>
        </trans-unit>
        <trans-unit id="ffa19b2195d0c15e9339c99460878fe4f010d76d" translate="yes" xml:space="preserve">
          <source>TryReserveError</source>
          <target state="translated">TryReserveError</target>
        </trans-unit>
        <trans-unit id="7b782adc98cd68cba60f49733fd7fc4e8ce78c2c" translate="yes" xml:space="preserve">
          <source>TrySendError</source>
          <target state="translated">TrySendError</target>
        </trans-unit>
        <trans-unit id="bb111acc067364e9c3571b77d0ce5c4a9c6b3124" translate="yes" xml:space="preserve">
          <source>Trying to implement this scenario using our definition of &lt;code&gt;List&lt;/code&gt; with &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; won&amp;rsquo;t work, as shown in Listing 15-17:</source>
          <target state="translated">当社の定義使用してこのシナリオを実装しようとしている &lt;code&gt;List&lt;/code&gt; して &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; リスト15-17のように動作しません：</target>
        </trans-unit>
        <trans-unit id="c41a2be51027c17da2914785c19c9af65da7231f" translate="yes" xml:space="preserve">
          <source>Tuple</source>
          <target state="translated">Tuple</target>
        </trans-unit>
        <trans-unit id="5518f0873d902287241e5e83188a303861d5a9e6" translate="yes" xml:space="preserve">
          <source>Tuple Layout</source>
          <target state="translated">タプルレイアウト</target>
        </trans-unit>
        <trans-unit id="11dd41e6851bdf449646a773272c37c50a284fc9" translate="yes" xml:space="preserve">
          <source>Tuple and tuple indexing expressions</source>
          <target state="translated">タプルとタプルのインデックス式</target>
        </trans-unit>
        <trans-unit id="6bdf2a89da03771b9bc590f650c8c5b6c77c5197" translate="yes" xml:space="preserve">
          <source>Tuple expression</source>
          <target state="translated">タプル式</target>
        </trans-unit>
        <trans-unit id="a63a11d9cdfd9d84d9c0b5569d554b9e83dcf1cc" translate="yes" xml:space="preserve">
          <source>Tuple expression attributes</source>
          <target state="translated">タプル式属性</target>
        </trans-unit>
        <trans-unit id="e822aa7ad790f9164d76dd24bd82039b2ac65758" translate="yes" xml:space="preserve">
          <source>Tuple expressions</source>
          <target state="translated">タプル式</target>
        </trans-unit>
        <trans-unit id="49e52f54a16d5e893978d9d7c233cca906e4a8cd" translate="yes" xml:space="preserve">
          <source>Tuple expressions are written by listing the &lt;a href=&quot;../expressions&quot;&gt;operands&lt;/a&gt; in a parenthesized, comma-separated list. 1-ary tuple expressions require a comma after their operand to be disambiguated with a &lt;a href=&quot;grouped-expr&quot;&gt;parenthetical expression&lt;/a&gt;.</source>
          <target state="translated">タプル式は、括弧で囲まれたコンマ区切りのリストに&lt;a href=&quot;../expressions&quot;&gt;オペランド&lt;/a&gt;をリストすることによって記述されます。1-aryタプル式では、オペランドの後に&lt;a href=&quot;grouped-expr&quot;&gt;括弧付きの式で&lt;/a&gt;明確にするためにコンマが必要です。</target>
        </trans-unit>
        <trans-unit id="65e413cd44223377d7cfb3699dad2f2341e4e6ba" translate="yes" xml:space="preserve">
          <source>Tuple expressions evaluate into &lt;a href=&quot;../types/tuple&quot;&gt;tuple values&lt;/a&gt; with the operands initializing the elements of the tuple.</source>
          <target state="translated">タプル式は、タプルの要素を初期化するオペランドを使用して&lt;a href=&quot;../types/tuple&quot;&gt;タプル値に&lt;/a&gt;評価されます。</target>
        </trans-unit>
        <trans-unit id="f601e94cafc9d12d8593dd02c6d703d40de35c4d" translate="yes" xml:space="preserve">
          <source>Tuple index</source>
          <target state="translated">タプルインデックス</target>
        </trans-unit>
        <trans-unit id="b17e1ada42d80816617817c68a5ec792352c6c67" translate="yes" xml:space="preserve">
          <source>Tuple index expressions are written as an operand, &lt;code&gt;.&lt;/code&gt;, and a tuple index. The index must be written as a &lt;a href=&quot;../tokens#integer-literals&quot;&gt;decimal literal&lt;/a&gt; with no leading zeros, underscores, or suffix. The operand must have the type of a tuple or tuple struct. If the tuple index is not an element of the tuple or tuple struct, it is a compiler error.</source>
          <target state="translated">タプルインデックス式は、オペランドとして記述され &lt;code&gt;.&lt;/code&gt; 、およびタプルインデックス。インデックスは、先行ゼロ、アンダースコア、またはサフィックスを含まない&lt;a href=&quot;../tokens#integer-literals&quot;&gt;10進リテラル&lt;/a&gt;として記述する必要があります。オペランドは、タプルまたはタプル構造体のタイプである必要があります。タプルインデックスがタプルまたはタプル構造体の要素でない場合は、コンパイラエラーです。</target>
        </trans-unit>
        <trans-unit id="fe6c1f43b44b32fa35dca7937a6775d19792506c" translate="yes" xml:space="preserve">
          <source>Tuple indexing</source>
          <target state="translated">タプルインデックス</target>
        </trans-unit>
        <trans-unit id="44dc4b3b01b16ad2661df0966d7c7a1cf905b8b9" translate="yes" xml:space="preserve">
          <source>Tuple indexing expressions</source>
          <target state="translated">タプルインデックス式</target>
        </trans-unit>
        <trans-unit id="9e4c13ade8d660c6335dcf428421b9b28b1656d1" translate="yes" xml:space="preserve">
          <source>Tuple indexing expressions evaluate like &lt;a href=&quot;field-expr#field-access-expressions&quot;&gt;field access expressions&lt;/a&gt;, but access elements of &lt;a href=&quot;../types/tuple&quot;&gt;tuples&lt;/a&gt; or &lt;a href=&quot;../types/struct&quot;&gt;tuple structs&lt;/a&gt;.</source>
          <target state="translated">タプルインデックス式は&lt;a href=&quot;field-expr#field-access-expressions&quot;&gt;フィールドアクセス式&lt;/a&gt;と同様に評価されますが、&lt;a href=&quot;../types/tuple&quot;&gt;タプル&lt;/a&gt;または&lt;a href=&quot;../types/struct&quot;&gt;タプル構造体の&lt;/a&gt;要素にアクセスします。</target>
        </trans-unit>
        <trans-unit id="b8a1d058f14f452a93d10da089ec69f4c32d794e" translate="yes" xml:space="preserve">
          <source>Tuple indices are compared with the literal token directly. Tuple indices start with &lt;code&gt;0&lt;/code&gt; and each successive index increments the value by &lt;code&gt;1&lt;/code&gt; as a decimal value. Thus, only decimal values will match, and the value must not have any extra &lt;code&gt;0&lt;/code&gt; prefix characters.</source>
          <target state="translated">タプルインデックスは、リテラルトークンと直接比較されます。タプルインデックスは &lt;code&gt;0&lt;/code&gt; から始まり、連続する各インデックスは値を10進値として &lt;code&gt;1&lt;/code&gt; ずつインクリメントします。したがって、10進値のみが一致し、値に余分な &lt;code&gt;0&lt;/code&gt; プレフィックス文字を含めることはできません。</target>
        </trans-unit>
        <trans-unit id="f28c59e960977888e94a3c34b0278e6e00c6936d" translate="yes" xml:space="preserve">
          <source>Tuple patterns</source>
          <target state="translated">タプルパターン</target>
        </trans-unit>
        <trans-unit id="49d48b16cda97c82ccd41f82c8b675a2db8b4116" translate="yes" xml:space="preserve">
          <source>Tuple patterns match tuple values that match all criteria defined by its subpatterns. They are also used to &lt;a href=&quot;#destructuring&quot;&gt;destructure&lt;/a&gt; a tuple.</source>
          <target state="translated">タプルパターンは、そのサブパターンによって定義されたすべての基準に一致するタプル値に一致します。これらはまたするために使用されている&lt;a href=&quot;#destructuring&quot;&gt;destructure&lt;/a&gt;タプルを。</target>
        </trans-unit>
        <trans-unit id="0d60a4a77a7ad9b86665dc5ec42ea14f2698ee75" translate="yes" xml:space="preserve">
          <source>Tuple patterns match tuple values that match all criteria defined by its subpatterns. They are also used to &lt;a href=&quot;patterns#destructuring&quot;&gt;destructure&lt;/a&gt; a tuple.</source>
          <target state="translated">タプルパターンは、そのサブパターンで定義されたすべての基準に一致するタプル値に一致します。これらはまたするために使用されている&lt;a href=&quot;patterns#destructuring&quot;&gt;destructure&lt;/a&gt;タプルを。</target>
        </trans-unit>
        <trans-unit id="f4691e7b0b597791c415f166cd1397c0daec1163" translate="yes" xml:space="preserve">
          <source>Tuple struct expression</source>
          <target state="translated">タプル構造式</target>
        </trans-unit>
        <trans-unit id="ea9f0838dcbcc88a01e222d90f53e8f39880136f" translate="yes" xml:space="preserve">
          <source>Tuple struct patterns</source>
          <target state="translated">タプル構造体パターン</target>
        </trans-unit>
        <trans-unit id="91a08356932d9cf1d09320f96dfca3ba26d2fc8a" translate="yes" xml:space="preserve">
          <source>Tuple struct patterns match tuple struct and enum values that match all criteria defined by its subpatterns. They are also used to &lt;a href=&quot;#destructuring&quot;&gt;destructure&lt;/a&gt; a tuple struct or enum value.</source>
          <target state="translated">タプル構造体パターンは、そのサブパターンによって定義されたすべての基準に一致するタプル構造体と列挙型の値に一致します。これらはまたするために使用されている&lt;a href=&quot;#destructuring&quot;&gt;destructure&lt;/a&gt;タプル構造体や列挙値を。</target>
        </trans-unit>
        <trans-unit id="6ce23bf97599891184ee6af65a034650dc03427a" translate="yes" xml:space="preserve">
          <source>Tuple struct patterns match tuple struct and enum values that match all criteria defined by its subpatterns. They are also used to &lt;a href=&quot;patterns#destructuring&quot;&gt;destructure&lt;/a&gt; a tuple struct or enum value.</source>
          <target state="translated">タプル構造体パターンは、そのサブパターンで定義されたすべての基準に一致するタプル構造体と列挙値に一致します。これらはまたするために使用されている&lt;a href=&quot;patterns#destructuring&quot;&gt;destructure&lt;/a&gt;タプル構造体や列挙値を。</target>
        </trans-unit>
        <trans-unit id="dd28158a620f360ba4aa0c759eb104e4dede6329" translate="yes" xml:space="preserve">
          <source>Tuple structs are instantiated in the same way as tuples themselves, except with the struct's name as a prefix: &lt;code&gt;Foo(123, false, 0.1)&lt;/code&gt;.</source>
          <target state="translated">タプル構造体は、タプル自体と同じ方法でインスタンス化されますが、構造体の名前が接頭辞として使用されます： &lt;code&gt;Foo(123, false, 0.1)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="985c4283e220405d4d0ac504a38671b8b680d3c5" translate="yes" xml:space="preserve">
          <source>Tuple structs are similar to regular structs, but its fields have no names. They are used like tuples, with deconstruction possible via &lt;code&gt;let TupleStruct(x, y) = foo;&lt;/code&gt; syntax. For accessing individual variables, the same syntax is used as with regular tuples, namely &lt;code&gt;foo.0&lt;/code&gt;, &lt;code&gt;foo.1&lt;/code&gt;, etc, starting at zero.</source>
          <target state="translated">タプル構造体は通常の構造体に似ていますが、そのフィールドには名前がありません。それらはタプルのように使用され、 &lt;code&gt;let TupleStruct(x, y) = foo;&lt;/code&gt; 構文。個々の変数にアクセスするには、通常のタプルと同じ構文、つまり &lt;code&gt;foo.0&lt;/code&gt; 、 &lt;code&gt;foo.1&lt;/code&gt; などがゼロから始まります。</target>
        </trans-unit>
        <trans-unit id="405d7b4bc4604c6657b54f4846e0560006e9fc0e" translate="yes" xml:space="preserve">
          <source>Tuple type</source>
          <target state="translated">タプル型</target>
        </trans-unit>
        <trans-unit id="5501f69a4f42fb8e135b4df10c2273778be704fd" translate="yes" xml:space="preserve">
          <source>Tuple types</source>
          <target state="translated">タプル型</target>
        </trans-unit>
        <trans-unit id="5e273646744d8620cb13d8fba10b333bc84bed1e" translate="yes" xml:space="preserve">
          <source>Tuple types and values are denoted by listing the types or values of their elements, respectively, in a parenthesized, comma-separated list.</source>
          <target state="translated">タプルの型と値は、それぞれの要素の型または値を、括弧で囲んだカンマ区切りのリストで示すことで示されます。</target>
        </trans-unit>
        <trans-unit id="a1babd8f3b1a5b3b8804a04ea58994b24b061e4b" translate="yes" xml:space="preserve">
          <source>Tuple types are written by listing the types of their elements in a parenthesized, comma-separated list. 1-ary tuples require a comma after their element type to be disambiguated with a &lt;a href=&quot;../types#parenthesized-types&quot;&gt;parenthesized type&lt;/a&gt;.</source>
          <target state="translated">タプルタイプは、要素のタイプを括弧で囲まれたコンマ区切りのリストにリストすることによって記述されます。1-aryタプルでは、​​要素タイプの後に、&lt;a href=&quot;../types#parenthesized-types&quot;&gt;括弧で囲まれたタイプで&lt;/a&gt;明確にするためにコンマが必要です。</target>
        </trans-unit>
        <trans-unit id="3fbd57dd63bac7c82834159ddc9ea56e1515ece9" translate="yes" xml:space="preserve">
          <source>Tuple types, if each component also implements &lt;code&gt;Clone&lt;/code&gt; (e.g., &lt;code&gt;()&lt;/code&gt;, &lt;code&gt;(i32, bool)&lt;/code&gt;)</source>
          <target state="translated">タプル型（各コンポーネントが &lt;code&gt;Clone&lt;/code&gt; も実装している場合 &lt;code&gt;()&lt;/code&gt; （例：（）、 &lt;code&gt;(i32, bool)&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="bd89c408cfdec88fd6d8e898f3566b701ea35d3a" translate="yes" xml:space="preserve">
          <source>Tuple types, if each component also implements &lt;code&gt;Copy&lt;/code&gt; (e.g., &lt;code&gt;()&lt;/code&gt;, &lt;code&gt;(i32, bool)&lt;/code&gt;)</source>
          <target state="translated">タプル型（各コンポーネントが &lt;code&gt;Copy&lt;/code&gt; も実装している場合（例： &lt;code&gt;()&lt;/code&gt; 、 &lt;code&gt;(i32, bool)&lt;/code&gt; ））</target>
        </trans-unit>
        <trans-unit id="56d624bd930abb83c2a720d48bf858a7d49eb690" translate="yes" xml:space="preserve">
          <source>Tuples are &lt;em&gt;finite&lt;/em&gt;. In other words, a tuple has a length. Here's a tuple of length &lt;code&gt;3&lt;/code&gt;:</source>
          <target state="translated">タプルは&lt;em&gt;有限&lt;/em&gt;です。つまり、タプルには長さがあります。これが長さ &lt;code&gt;3&lt;/code&gt; のタプルです。</target>
        </trans-unit>
        <trans-unit id="4da05b6b2dc1fb19e334d246d97430b523feb378" translate="yes" xml:space="preserve">
          <source>Tuples are &lt;em&gt;heterogeneous&lt;/em&gt;. This means that each element of the tuple can have a different type. In that tuple above, it has the type:</source>
          <target state="translated">タプルは&lt;em&gt;異種&lt;/em&gt;です。これは、タプルの各要素が異なるタイプを持つことができることを意味します。上記のタプルでは、​​タイプは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="567f8079007690271f5a29cda47d067992841b99" translate="yes" xml:space="preserve">
          <source>Tuples are a &lt;em&gt;sequence&lt;/em&gt;. This means that they can be accessed by position; this is called 'tuple indexing', and it looks like this:</source>
          <target state="translated">タプルは&lt;em&gt;シーケンス&lt;/em&gt;です。つまり、位置によってアクセスできます。これは「タプルインデックス」と呼ばれ、次のようになります。</target>
        </trans-unit>
        <trans-unit id="e91ee0fad8731c0386a059fa3bf0652dd08c64d3" translate="yes" xml:space="preserve">
          <source>Tuples are often used as a return type when you want to return more than one value:</source>
          <target state="translated">タプルは、複数の値を返したいときにリターン型としてよく使われます。</target>
        </trans-unit>
        <trans-unit id="d7ee3ba750e08e0013c45b2b001ce78e8459fa90" translate="yes" xml:space="preserve">
          <source>Tuples are written by enclosing zero or more comma-separated expressions in parentheses. They are used to create &lt;a href=&quot;../types/tuple&quot;&gt;tuple-typed&lt;/a&gt; values.</source>
          <target state="translated">タプルは、0個以上のコンマ区切りの式を括弧で囲んで記述されます。&lt;a href=&quot;../types/tuple&quot;&gt;タプル型の&lt;/a&gt;値を作成するために使用されます。</target>
        </trans-unit>
        <trans-unit id="5fb8ee22cf29120bf8f87bd0e3ee7ebd9949b96b" translate="yes" xml:space="preserve">
          <source>Tuples do not have any guarantees about their layout.</source>
          <target state="translated">タプルは、そのレイアウトを保証するものではありません。</target>
        </trans-unit>
        <trans-unit id="cf3ce6296bd35ecede807c2ca855fee144afacb9" translate="yes" xml:space="preserve">
          <source>Tuples, if they only contain types that are also &lt;code&gt;Copy&lt;/code&gt;. For example, &lt;code&gt;(i32, i32)&lt;/code&gt; is &lt;code&gt;Copy&lt;/code&gt;, but &lt;code&gt;(i32, String)&lt;/code&gt; is not.</source>
          <target state="translated">タプルは、彼らだけでもある種類含まれている場合は &lt;code&gt;Copy&lt;/code&gt; 。たとえば、 &lt;code&gt;(i32, i32)&lt;/code&gt; は &lt;code&gt;Copy&lt;/code&gt; ですが、 &lt;code&gt;(i32, String)&lt;/code&gt; はそうではありません。</target>
        </trans-unit>
        <trans-unit id="f9c67af2890eabc2460069a200a1d4229437528f" translate="yes" xml:space="preserve">
          <source>Tuples, where a tuple is a coercion site to type &lt;code&gt;(U_0, U_1, ..., U_n)&lt;/code&gt;. Each sub-expression is a coercion site to the respective type, e.g. the zeroth sub-expression is a coercion site to type &lt;code&gt;U_0&lt;/code&gt;.</source>
          <target state="translated">タプル。タプルは &lt;code&gt;(U_0, U_1, ..., U_n)&lt;/code&gt; と入力する強制サイトです。各部分式はそれぞれのタイプへの強制サイトです。たとえば、0番目の部分式はタイプ &lt;code&gt;U_0&lt;/code&gt; への強制サイトです。</target>
        </trans-unit>
        <trans-unit id="c9853aa9de5add5fa51a4530e193cc7279fd6159" translate="yes" xml:space="preserve">
          <source>Turn a &lt;a href=&quot;../../vec/struct.vec&quot;&gt;&lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; into a &lt;a href=&quot;../struct.vecdeque&quot;&gt;&lt;code&gt;VecDeque&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">回し&lt;a href=&quot;../../vec/struct.vec&quot;&gt; &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; &lt;/a&gt;に&lt;a href=&quot;../struct.vecdeque&quot;&gt; &lt;code&gt;VecDeque&amp;lt;T&amp;gt;&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e89ab8db9a13e916878d1aff18816e183dfae8d6" translate="yes" xml:space="preserve">
          <source>Turn a &lt;a href=&quot;../collections/struct.vecdeque&quot;&gt;&lt;code&gt;VecDeque&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; into a &lt;a href=&quot;../vec/struct.vec&quot;&gt;&lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">回し&lt;a href=&quot;../collections/struct.vecdeque&quot;&gt; &lt;code&gt;VecDeque&amp;lt;T&amp;gt;&lt;/code&gt; &lt;/a&gt;に&lt;a href=&quot;../vec/struct.vec&quot;&gt; &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e7311ea0eb58a505bdf5f01b88b3339c4b7cd8b3" translate="yes" xml:space="preserve">
          <source>Turn a &lt;a href=&quot;../collections/struct.vecdeque&quot;&gt;&lt;code&gt;VecDeque&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; into a &lt;a href=&quot;struct.vec&quot;&gt;&lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">回し&lt;a href=&quot;../collections/struct.vecdeque&quot;&gt; &lt;code&gt;VecDeque&amp;lt;T&amp;gt;&lt;/code&gt; &lt;/a&gt;に&lt;a href=&quot;struct.vec&quot;&gt; &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2b38a71dfcaefc79a39b01d00754205648079aa2" translate="yes" xml:space="preserve">
          <source>Turn a &lt;a href=&quot;../struct.vecdeque&quot;&gt;&lt;code&gt;VecDeque&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; into a &lt;a href=&quot;../../vec/struct.vec&quot;&gt;&lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">回し&lt;a href=&quot;../struct.vecdeque&quot;&gt; &lt;code&gt;VecDeque&amp;lt;T&amp;gt;&lt;/code&gt; &lt;/a&gt;に&lt;a href=&quot;../../vec/struct.vec&quot;&gt; &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6fe97f664cc043b9cae686cc00711fc73ef1df08" translate="yes" xml:space="preserve">
          <source>Turn a &lt;a href=&quot;../vec/struct.vec&quot;&gt;&lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; into a &lt;a href=&quot;../collections/struct.vecdeque&quot;&gt;&lt;code&gt;VecDeque&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">回し&lt;a href=&quot;../vec/struct.vec&quot;&gt; &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; &lt;/a&gt;に&lt;a href=&quot;../collections/struct.vecdeque&quot;&gt; &lt;code&gt;VecDeque&amp;lt;T&amp;gt;&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3fbea64da5a5f06d75e0a8af0090b3b0e2a08380" translate="yes" xml:space="preserve">
          <source>Turn a &lt;a href=&quot;../vec/struct.vec&quot;&gt;&lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; into a &lt;a href=&quot;struct.vecdeque&quot;&gt;&lt;code&gt;VecDeque&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">回し&lt;a href=&quot;../vec/struct.vec&quot;&gt; &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; &lt;/a&gt;に&lt;a href=&quot;struct.vecdeque&quot;&gt; &lt;code&gt;VecDeque&amp;lt;T&amp;gt;&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="4669fd8f77a02ec1c266c7fe545791bb7885dad1" translate="yes" xml:space="preserve">
          <source>Turn a &lt;a href=&quot;struct.vec&quot;&gt;&lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; into a &lt;a href=&quot;../collections/struct.vecdeque&quot;&gt;&lt;code&gt;VecDeque&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">回し&lt;a href=&quot;struct.vec&quot;&gt; &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; &lt;/a&gt;に&lt;a href=&quot;../collections/struct.vecdeque&quot;&gt; &lt;code&gt;VecDeque&amp;lt;T&amp;gt;&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b09625451991a5b8e805da34776aaedc90525fbd" translate="yes" xml:space="preserve">
          <source>Turn a &lt;a href=&quot;struct.vecdeque&quot;&gt;&lt;code&gt;VecDeque&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; into a &lt;a href=&quot;../vec/struct.vec&quot;&gt;&lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">回し&lt;a href=&quot;struct.vecdeque&quot;&gt; &lt;code&gt;VecDeque&amp;lt;T&amp;gt;&lt;/code&gt; &lt;/a&gt;に&lt;a href=&quot;../vec/struct.vec&quot;&gt; &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="54437abef1f3840afb67899d2d515749e44d9fef" translate="yes" xml:space="preserve">
          <source>Turn a [&lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt;] into a [&lt;code&gt;VecDeque&amp;lt;T&amp;gt;&lt;/code&gt;].</source>
          <target state="translated">[ &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; ]を[ &lt;code&gt;VecDeque&amp;lt;T&amp;gt;&lt;/code&gt; ]に変換します。</target>
        </trans-unit>
        <trans-unit id="e6b58be63cc031a2c0fb9a41ef4a5c4c544f30d9" translate="yes" xml:space="preserve">
          <source>Turn a [&lt;code&gt;VecDeque&amp;lt;T&amp;gt;&lt;/code&gt;] into a [&lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt;].</source>
          <target state="translated">[ &lt;code&gt;VecDeque&amp;lt;T&amp;gt;&lt;/code&gt; ]を[ &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; ]に変換します。</target>
        </trans-unit>
        <trans-unit id="68fccb5986b95d1769fe3ac2f5db1e4528fbe17a" translate="yes" xml:space="preserve">
          <source>Turning Our Single-Threaded Server into a Multithreaded Server</source>
          <target state="translated">シングルスレッドサーバをマルチスレッドサーバに変える</target>
        </trans-unit>
        <trans-unit id="b859b7ff96007e824952102a2b6cf7f2532bb6f5" translate="yes" xml:space="preserve">
          <source>Turning a &lt;code&gt;*mut T&lt;/code&gt; into an &lt;code&gt;&amp;amp;mut T&lt;/code&gt;:</source>
          <target state="translated">ターニング &lt;code&gt;*mut T&lt;/code&gt; に &lt;code&gt;&amp;amp;mut T&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="92f32c54d91cd32dab86c92433ff5bf59fbe670a" translate="yes" xml:space="preserve">
          <source>Turning a &lt;code&gt;Vec&amp;lt;&amp;amp;T&amp;gt;&lt;/code&gt; into a &lt;code&gt;Vec&amp;lt;Option&amp;lt;&amp;amp;T&amp;gt;&amp;gt;&lt;/code&gt;:</source>
          <target state="translated">ターニング &lt;code&gt;Vec&amp;lt;&amp;amp;T&amp;gt;&lt;/code&gt; に &lt;code&gt;Vec&amp;lt;Option&amp;lt;&amp;amp;T&amp;gt;&amp;gt;&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="25f375d70a4ba87d59382df0fccc95f55dd8020a" translate="yes" xml:space="preserve">
          <source>Turning a &lt;code&gt;fn&lt;/code&gt; into a &lt;code&gt;const fn&lt;/code&gt; has no effect on run-time uses of that function.</source>
          <target state="translated">ターニング &lt;code&gt;fn&lt;/code&gt; へ &lt;code&gt;const fn&lt;/code&gt; その関数の実行時の使用には影響しません。</target>
        </trans-unit>
        <trans-unit id="ddddd1c6a422bfc2e73b1e1e06d4513f4b671ef3" translate="yes" xml:space="preserve">
          <source>Turning a pointer into a &lt;code&gt;usize&lt;/code&gt;:</source>
          <target state="translated">ポインタを &lt;code&gt;usize&lt;/code&gt; に変える：</target>
        </trans-unit>
        <trans-unit id="0cfcb75a89ff8f3d42e0969a81b68c58ff41ffed" translate="yes" xml:space="preserve">
          <source>Turning a pointer into a function pointer. This is &lt;em&gt;not&lt;/em&gt; portable to machines where function pointers and data pointers have different sizes.</source>
          <target state="translated">ポインターを関数ポインターに変換します。これは、関数ポインターとデータポインターのサイズが異なるマシンに&lt;em&gt;は&lt;/em&gt;移植&lt;em&gt;できません&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="406e60e2392b6e162c75155bdd0eec0802166101" translate="yes" xml:space="preserve">
          <source>Turning an &lt;code&gt;&amp;amp;mut T&lt;/code&gt; into an &lt;code&gt;&amp;amp;mut U&lt;/code&gt;:</source>
          <target state="translated">ターニング &lt;code&gt;&amp;amp;mut T&lt;/code&gt; に &lt;code&gt;&amp;amp;mut U&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="b7709a825d906324651f42904d312bfc3d9cfdce" translate="yes" xml:space="preserve">
          <source>Turning an &lt;code&gt;&amp;amp;str&lt;/code&gt; into an &lt;code&gt;&amp;amp;[u8]&lt;/code&gt;:</source>
          <target state="translated">ターニング &lt;code&gt;&amp;amp;str&lt;/code&gt; に &lt;code&gt;&amp;amp;[u8]&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="8fe665706a3a9d23c3f80f786fb6f659e7dafb3b" translate="yes" xml:space="preserve">
          <source>Turning raw bytes(&lt;code&gt;&amp;amp;[u8]&lt;/code&gt;) to &lt;code&gt;u32&lt;/code&gt;, &lt;code&gt;f64&lt;/code&gt;, etc.:</source>
          <target state="translated">rawバイト（ &lt;code&gt;&amp;amp;[u8]&lt;/code&gt; ）を &lt;code&gt;u32&lt;/code&gt; 、 &lt;code&gt;f64&lt;/code&gt; などに変換します。</target>
        </trans-unit>
        <trans-unit id="45cfabf1744551752d0d316f8226b7949182c80d" translate="yes" xml:space="preserve">
          <source>Two &lt;code&gt;Arc&lt;/code&gt;s are equal if their inner values are equal, even if they are stored in different allocation.</source>
          <target state="translated">2つの &lt;code&gt;Arc&lt;/code&gt; は、それらが異なる割り当てで格納されている場合でも、それらの内部値が等しい場合は等しくなります。</target>
        </trans-unit>
        <trans-unit id="1e4a5ffe0d58bc942e71a31a403ac137dbf193dd" translate="yes" xml:space="preserve">
          <source>Two &lt;code&gt;Arc&lt;/code&gt;s are equal if their inner values are equal.</source>
          <target state="translated">2つの &lt;code&gt;Arc&lt;/code&gt; は、それらの内部値が等しい場合に等しくなります。</target>
        </trans-unit>
        <trans-unit id="3b0340dc9882895d2ed9f18ec41d4ee9ceaf4e0c" translate="yes" xml:space="preserve">
          <source>Two &lt;code&gt;Arc&lt;/code&gt;s are unequal if their inner values are unequal.</source>
          <target state="translated">2つの &lt;code&gt;Arc&lt;/code&gt; は、内部の値が等しくない場合は等しくありません。</target>
        </trans-unit>
        <trans-unit id="77c963714f423503919254b2ffd83b6fa90a298e" translate="yes" xml:space="preserve">
          <source>Two &lt;code&gt;Rc&lt;/code&gt;s are equal if their inner values are equal, even if they are stored in different allocation.</source>
          <target state="translated">2つの &lt;code&gt;Rc&lt;/code&gt; は、それらが異なる割り当てで格納されている場合でも、それらの内部値が等しい場合は等しくなります。</target>
        </trans-unit>
        <trans-unit id="d6a2d18514777aaae37a7ce067b908310bbd6b4b" translate="yes" xml:space="preserve">
          <source>Two &lt;code&gt;Rc&lt;/code&gt;s are equal if their inner values are equal.</source>
          <target state="translated">2つの &lt;code&gt;Rc&lt;/code&gt; は、それらの内部値が等しい場合に等しくなります。</target>
        </trans-unit>
        <trans-unit id="2fa5c112e4e91cdb91570c34d930cf27ff1cdefa" translate="yes" xml:space="preserve">
          <source>Two &lt;code&gt;Rc&lt;/code&gt;s are unequal if their inner values are unequal.</source>
          <target state="translated">2つの &lt;code&gt;Rc&lt;/code&gt; は、それらの内部値が等しくない場合は等しくありません。</target>
        </trans-unit>
        <trans-unit id="2b4b2f527e82e5d4b1ed0e9743d509787616d686" translate="yes" xml:space="preserve">
          <source>Two associated items (like methods, associated types, associated functions, etc.) were defined with the same identifier.</source>
          <target state="translated">関連する2つの項目(メソッド、関連するタイプ、関連する関数など)を同じ識別子で定義しました。</target>
        </trans-unit>
        <trans-unit id="f479794ce7a491842f3bc3c9a27aca16db4ad3d3" translate="yes" xml:space="preserve">
          <source>Two empty sequences are lexicographically equal.</source>
          <target state="translated">2つの空のシーケンスは語彙的に等しい。</target>
        </trans-unit>
        <trans-unit id="026acb3ca4aa61acf271a2918c10ebc97e741248" translate="yes" xml:space="preserve">
          <source>Two examples of simple paths consisting of only identifier segments:</source>
          <target state="translated">識別子セグメントのみからなる単純なパスの2つの例。</target>
        </trans-unit>
        <trans-unit id="0cd83d672a615733082e8ee7f56c39b0af561a3e" translate="yes" xml:space="preserve">
          <source>Two items of the same name cannot be imported without rebinding one of the items under a new local name.</source>
          <target state="translated">同名の2つのアイテムをインポートするには、1つのアイテムを新しいローカル名でリバインドしなければなりません。</target>
        </trans-unit>
        <trans-unit id="cbb02c3e2b1b62256b2dccb2ec1aec1fddd7391c" translate="yes" xml:space="preserve">
          <source>Two kind of item &lt;em&gt;declarations&lt;/em&gt; are allowed in external blocks: &lt;a href=&quot;functions&quot;&gt;functions&lt;/a&gt; and &lt;a href=&quot;static-items&quot;&gt;statics&lt;/a&gt;. Calling functions or accessing statics that are declared in external blocks is only allowed in an &lt;code&gt;unsafe&lt;/code&gt; context.</source>
          <target state="translated">外部ブロックでは、&lt;a href=&quot;functions&quot;&gt;関数&lt;/a&gt;と&lt;a href=&quot;static-items&quot;&gt;静的の&lt;/a&gt;2種類の項目&lt;em&gt;宣言&lt;/em&gt;を使用できます。関数の呼び出しまたは外部ブロックで宣言されている統計へのアクセスは、 &lt;code&gt;unsafe&lt;/code&gt; コンテキストでのみ許可されます。</target>
        </trans-unit>
        <trans-unit id="f6d0f0b6138243f294ae08264cc55ed1bd1ca167" translate="yes" xml:space="preserve">
          <source>Two lifetimes cannot have the same name. To fix this example, change the second &lt;code&gt;'a&lt;/code&gt; lifetime into something else (&lt;code&gt;'c&lt;/code&gt; for example):</source>
          <target state="translated">2つのライフタイムに同じ名前を付けることはできません。この例を修正するには、2番目 &lt;code&gt;'a&lt;/code&gt; ライフタイムを別のライフタイムに変更します（たとえば、 &lt;code&gt;'c&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="30c944c513e67b8c4ff5047db8e7ab8f3c379bad" translate="yes" xml:space="preserve">
          <source>Two or more pointers access the same data at the same time.</source>
          <target state="translated">2つ以上のポインタが同時に同じデータにアクセスします。</target>
        </trans-unit>
        <trans-unit id="ea818e0ad4fe2dcf3d6dd4c02bacf808745d38d6" translate="yes" xml:space="preserve">
          <source>Two possibilities are available to solve this issue:</source>
          <target state="translated">この問題を解決するためには、2つの可能性があります。</target>
        </trans-unit>
        <trans-unit id="00651d0b6fd0e23f3452ef97aaddc1cda2303a0d" translate="yes" xml:space="preserve">
          <source>Two sequences are compared element by element.</source>
          <target state="translated">2つの配列を要素ごとに比較します。</target>
        </trans-unit>
        <trans-unit id="9e61db6f0549ccd99ae56429864c2f4cbe98bb50" translate="yes" xml:space="preserve">
          <source>Two such examples are macros and &lt;code&gt;#[cfg]&lt;/code&gt; environments.</source>
          <target state="translated">そのような2つの例は、マクロと &lt;code&gt;#[cfg]&lt;/code&gt; 環境です。</target>
        </trans-unit>
        <trans-unit id="9d8a406e3a91b6f18f7fee9fffccd411cd7bea0e" translate="yes" xml:space="preserve">
          <source>Two tests that pass! Now let&amp;rsquo;s see what happens to our test results when we introduce a bug in our code. Let&amp;rsquo;s change the implementation of the &lt;code&gt;can_hold&lt;/code&gt; method by replacing the greater than sign with a less than sign when it compares the widths:</source>
          <target state="translated">合格した2つのテスト！次に、コードにバグを導入したときにテスト結果がどうなるかを見てみましょう。幅を比較するときに、大なり記号を小なり記号に置き換えることで、 &lt;code&gt;can_hold&lt;/code&gt; メソッドの実装を変更してみましょう。</target>
        </trans-unit>
        <trans-unit id="6831c93d3c0041ecff78583892f51cefdc18f74a" translate="yes" xml:space="preserve">
          <source>Two things are important to note about this function:</source>
          <target state="translated">この機能について注意すべき点が2つあります。</target>
        </trans-unit>
        <trans-unit id="d73651bf2df8af467f41b29a872952ef24a40245" translate="yes" xml:space="preserve">
          <source>Two trait implementations overlap when there is a non-empty intersection of the traits the implementation is for, the implementations can be instantiated with the same type.</source>
          <target state="translated">2つの形質の実装は、実装が対象とする形質の空ではない交点がある場合に重複し、実装は同じ型でインスタンス化できます。</target>
        </trans-unit>
        <trans-unit id="45049ec7ea97abec9bd8269a665797ccca478bf9" translate="yes" xml:space="preserve">
          <source>Two trait object types alias each other if the base traits alias each other and if the sets of auto traits are the same and the lifetime bounds are the same. For example, &lt;code&gt;dyn Trait + Send + UnwindSafe&lt;/code&gt; is the same as &lt;code&gt;dyn Trait + UnwindSafe + Send&lt;/code&gt;.</source>
          <target state="translated">基本特性が相互にエイリアスし、自動特性のセットが同じでライフタイム境界が同じである場合、2つの特性オブジェクトタイプは相互にエイリアスします。たとえば、 &lt;code&gt;dyn Trait + Send + UnwindSafe&lt;/code&gt; は、 &lt;code&gt;dyn Trait + UnwindSafe + Send&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="7b6094fd54b67e7d276ce315b3b79ffc2dd18ae2" translate="yes" xml:space="preserve">
          <source>Two trait object types alias each other if the base traits alias each other and if the sets of auto traits are the same and the lifetime bounds are the same. For example, &lt;code&gt;dyn Trait + Send + UnwindSafe&lt;/code&gt; is the same as &lt;code&gt;dyn Trait + Unwindsafe + Send&lt;/code&gt;.</source>
          <target state="translated">2つの特性オブジェクトタイプは、基本特性が互いにエイリアスし、自動特性のセットが同じで、ライフタイム境界が同じである場合、互いにエイリアスします。たとえば、 &lt;code&gt;dyn Trait + Send + UnwindSafe&lt;/code&gt; は、 &lt;code&gt;dyn Trait + Unwindsafe + Send&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="0d078a0dedfa986439265f5fefabc817ba279445" translate="yes" xml:space="preserve">
          <source>Two traits, &lt;a href=&quot;../std/marker/trait.unsize&quot;&gt;&lt;code&gt;Unsize&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../std/ops/trait.coerceunsized&quot;&gt;&lt;code&gt;CoerceUnsized&lt;/code&gt;&lt;/a&gt;, are used to assist in this process and expose it for library use. The following coercions are built-ins and, if &lt;code&gt;T&lt;/code&gt; can be coerced to &lt;code&gt;U&lt;/code&gt; with one of them, then an implementation of &lt;code&gt;Unsize&amp;lt;U&amp;gt;&lt;/code&gt; for &lt;code&gt;T&lt;/code&gt; will be provided:</source>
          <target state="translated">二つの特性、&lt;a href=&quot;../std/marker/trait.unsize&quot;&gt; &lt;code&gt;Unsize&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;../std/ops/trait.coerceunsized&quot;&gt; &lt;code&gt;CoerceUnsized&lt;/code&gt; は&lt;/a&gt;、このプロセスを支援し、ライブラリを使用する際に、それを公開するために使用されています。以下の型変換は、インが組み込まれているとすれば、 &lt;code&gt;T&lt;/code&gt; は、に強制することができる &lt;code&gt;U&lt;/code&gt; それらのいずれかと、その後の実装 &lt;code&gt;Unsize&amp;lt;U&amp;gt;&lt;/code&gt; のための &lt;code&gt;T&lt;/code&gt; が提供されます。</target>
        </trans-unit>
        <trans-unit id="0c40881391e5533daaab739e69ccda2bb7bda270" translate="yes" xml:space="preserve">
          <source>TyCtor(&lt;code&gt;T&lt;/code&gt;) to TyCtor(&lt;code&gt;U&lt;/code&gt;), where TyCtor(&lt;code&gt;T&lt;/code&gt;) is one of</source>
          <target state="translated">TyCtor（ &lt;code&gt;T&lt;/code&gt; TyCtorに）（ &lt;code&gt;U&lt;/code&gt; TyCtor（）、 &lt;code&gt;T&lt;/code&gt; は）の一つであります</target>
        </trans-unit>
        <trans-unit id="3deb7456519697ecf4eefc455516c969a3681bae" translate="yes" xml:space="preserve">
          <source>Type</source>
          <target state="translated">Type</target>
        </trans-unit>
        <trans-unit id="8893ac4ddfe0ea4688a44afc0ddfe4ebc76a84ef" translate="yes" xml:space="preserve">
          <source>Type &lt;a href=&quot;enum.option&quot;&gt;&lt;code&gt;Option&lt;/code&gt;&lt;/a&gt; represents an optional value: every &lt;a href=&quot;enum.option&quot;&gt;&lt;code&gt;Option&lt;/code&gt;&lt;/a&gt; is either &lt;a href=&quot;enum.option#variant.Some&quot;&gt;&lt;code&gt;Some&lt;/code&gt;&lt;/a&gt; and contains a value, or &lt;a href=&quot;enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt;, and does not. &lt;a href=&quot;enum.option&quot;&gt;&lt;code&gt;Option&lt;/code&gt;&lt;/a&gt; types are very common in Rust code, as they have a number of uses:</source>
          <target state="translated">タイプ&lt;a href=&quot;enum.option&quot;&gt; &lt;code&gt;Option&lt;/code&gt; &lt;/a&gt;はオプションの値を表します。すべての&lt;a href=&quot;enum.option&quot;&gt; &lt;code&gt;Option&lt;/code&gt; &lt;/a&gt;は&lt;a href=&quot;enum.option#variant.Some&quot;&gt; &lt;code&gt;Some&lt;/code&gt; &lt;/a&gt;で値を含むか&lt;a href=&quot;enum.option#variant.None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt;であり、含まれません。&lt;a href=&quot;enum.option&quot;&gt; &lt;code&gt;Option&lt;/code&gt; &lt;/a&gt;タイプは、いくつかの用途があるため、Rustコードでは非常に一般的です。</target>
        </trans-unit>
        <trans-unit id="5a34cc9264aacb6462265b18d25bcf726faf398f" translate="yes" xml:space="preserve">
          <source>Type Definition std::fmt::Result</source>
          <target state="translated">型定義 std::fmt::結果</target>
        </trans-unit>
        <trans-unit id="34dd3e846f6d75301a90ce0c190a60bbb2f75015" translate="yes" xml:space="preserve">
          <source>Type Definition std::io::Result</source>
          <target state="translated">型定義 std::io::結果</target>
        </trans-unit>
        <trans-unit id="46f6920a49ecfbe5727cafe69a86a93c6dc323b4" translate="yes" xml:space="preserve">
          <source>Type Definition std::os::linux::raw::blkcnt_t</source>
          <target state="translated">型定義 std::os::linux::raw::blkcnt_t</target>
        </trans-unit>
        <trans-unit id="85fbcc37c53b78d2794e588bd5f55d25d53b121b" translate="yes" xml:space="preserve">
          <source>Type Definition std::os::linux::raw::blksize_t</source>
          <target state="translated">型定義 std::os::linux::raw::blksize_t</target>
        </trans-unit>
        <trans-unit id="e2606fd8324f1985d42d98f82ef97532070eae3e" translate="yes" xml:space="preserve">
          <source>Type Definition std::os::linux::raw::dev_t</source>
          <target state="translated">型定義 std::os::linux::raw::dev_t</target>
        </trans-unit>
        <trans-unit id="1a0725c0d449cfcc82b033154c822ab6aa94cb70" translate="yes" xml:space="preserve">
          <source>Type Definition std::os::linux::raw::ino_t</source>
          <target state="translated">型定義 std::os::linux::raw::ino_t</target>
        </trans-unit>
        <trans-unit id="96a7fc18b0419da7fc9a515e767bed1bfbc9562c" translate="yes" xml:space="preserve">
          <source>Type Definition std::os::linux::raw::mode_t</source>
          <target state="translated">型定義 std::os::linux::raw::mode_t</target>
        </trans-unit>
        <trans-unit id="75a060e0f5140a7dabbcb1ba8000909c3c0378d8" translate="yes" xml:space="preserve">
          <source>Type Definition std::os::linux::raw::nlink_t</source>
          <target state="translated">型定義 std::os::linux::raw::nlink_t</target>
        </trans-unit>
        <trans-unit id="7ae7bb16976469a8ad4e67f2c0d76a2afe6847e7" translate="yes" xml:space="preserve">
          <source>Type Definition std::os::linux::raw::off_t</source>
          <target state="translated">型定義 std::os::linux::raw::off_t</target>
        </trans-unit>
        <trans-unit id="76556b9aa9b1d76aecac20fd90dee8158aed1fa4" translate="yes" xml:space="preserve">
          <source>Type Definition std::os::linux::raw::pthread_t</source>
          <target state="translated">型定義 std::os::linux::raw::pthread_t</target>
        </trans-unit>
        <trans-unit id="c8140af217e68caacdab8d2aaef2318b6e02ba66" translate="yes" xml:space="preserve">
          <source>Type Definition std::os::linux::raw::time_t</source>
          <target state="translated">型定義 std::os::linux::raw::time_t</target>
        </trans-unit>
        <trans-unit id="d80e70a5e9f44648db2fa12eba538e96a084706b" translate="yes" xml:space="preserve">
          <source>Type Definition std::os::raw::c_char</source>
          <target state="translated">型定義 std::os::raw::c_char</target>
        </trans-unit>
        <trans-unit id="47268ec268f5e51266c8c9b25e903a966387595d" translate="yes" xml:space="preserve">
          <source>Type Definition std::os::raw::c_double</source>
          <target state="translated">型定義 std::os::raw::c_double</target>
        </trans-unit>
        <trans-unit id="167acfa92657a06bc69cb3f91777f380110e4dc9" translate="yes" xml:space="preserve">
          <source>Type Definition std::os::raw::c_float</source>
          <target state="translated">型定義 std::os::raw::c_float</target>
        </trans-unit>
        <trans-unit id="c27fd9199e90c2472f965bdc0cca23d6c8c570f4" translate="yes" xml:space="preserve">
          <source>Type Definition std::os::raw::c_int</source>
          <target state="translated">型定義 std::os::raw::c_int</target>
        </trans-unit>
        <trans-unit id="19f693eccac3c497abf741d0f8baed1d19e53f4b" translate="yes" xml:space="preserve">
          <source>Type Definition std::os::raw::c_long</source>
          <target state="translated">型定義 std::os::raw::c_long</target>
        </trans-unit>
        <trans-unit id="8600d6f2d9a4b023e7037b70faa22dc15e66388f" translate="yes" xml:space="preserve">
          <source>Type Definition std::os::raw::c_longlong</source>
          <target state="translated">型定義 std::os::raw::c_longlonglong</target>
        </trans-unit>
        <trans-unit id="38fbb377e146c43dbf57e7ef0b9149de46dd63ee" translate="yes" xml:space="preserve">
          <source>Type Definition std::os::raw::c_schar</source>
          <target state="translated">型定義 std::os::raw::c_schar</target>
        </trans-unit>
        <trans-unit id="24f91247eef9f189a56e0d26eb63e94174545d18" translate="yes" xml:space="preserve">
          <source>Type Definition std::os::raw::c_short</source>
          <target state="translated">型定義 std::os::raw::c_short</target>
        </trans-unit>
        <trans-unit id="8fd264b0559dbbedb815b835dcd8dc23c60e3e46" translate="yes" xml:space="preserve">
          <source>Type Definition std::os::raw::c_uchar</source>
          <target state="translated">型定義 std::os::raw::c_uchar</target>
        </trans-unit>
        <trans-unit id="73ae8275dba1734adb8dd3eb79d165dfd8926f8e" translate="yes" xml:space="preserve">
          <source>Type Definition std::os::raw::c_uint</source>
          <target state="translated">型定義 std::os::raw::c_uint</target>
        </trans-unit>
        <trans-unit id="963d890a0fa816ac69f7b2a91122d42f47482af6" translate="yes" xml:space="preserve">
          <source>Type Definition std::os::raw::c_ulong</source>
          <target state="translated">型定義 std::os::raw::c_ulong</target>
        </trans-unit>
        <trans-unit id="9529b81e31c700d29c794b44439c31236befee6e" translate="yes" xml:space="preserve">
          <source>Type Definition std::os::raw::c_ulonglong</source>
          <target state="translated">型定義 std::os::raw::c_ulonglong</target>
        </trans-unit>
        <trans-unit id="2add572706fcd5310850bb5c41c263a68becd701" translate="yes" xml:space="preserve">
          <source>Type Definition std::os::raw::c_ushort</source>
          <target state="translated">型定義 std::os::raw::c_ushort</target>
        </trans-unit>
        <trans-unit id="af576d5699684e5ccc6dd3bdda06f283b79646ba" translate="yes" xml:space="preserve">
          <source>Type Definition std::os::unix::io::RawFd</source>
          <target state="translated">型定義 std::os::unix::io::RawFd</target>
        </trans-unit>
        <trans-unit id="54df1b972115ebdb7492ee1ec118ad059c5b96b9" translate="yes" xml:space="preserve">
          <source>Type Definition std::os::unix::raw::blkcnt_t</source>
          <target state="translated">型定義 std::os::unix::raw::blkcnt_t</target>
        </trans-unit>
        <trans-unit id="24cf96c7673dcafd447d654adb8e4cf01b30bb6f" translate="yes" xml:space="preserve">
          <source>Type Definition std::os::unix::raw::blksize_t</source>
          <target state="translated">型定義 std::os::unix::raw::blksize_t</target>
        </trans-unit>
        <trans-unit id="27da02afd4df0cefb0f36b07dc40fb05a497c94e" translate="yes" xml:space="preserve">
          <source>Type Definition std::os::unix::raw::dev_t</source>
          <target state="translated">型定義 std::os::unix::raw::dev_t</target>
        </trans-unit>
        <trans-unit id="73d1317f78cb687f50d63c8e6d4ee01bdba096f4" translate="yes" xml:space="preserve">
          <source>Type Definition std::os::unix::raw::gid_t</source>
          <target state="translated">型定義 std::os::unix::raw::gid_t</target>
        </trans-unit>
        <trans-unit id="f1c61da35b3b5a8948934b0c33b08607e17ab49a" translate="yes" xml:space="preserve">
          <source>Type Definition std::os::unix::raw::ino_t</source>
          <target state="translated">型定義 std::os::unix::raw::ino_t</target>
        </trans-unit>
        <trans-unit id="f57f89ce06fb76c13960558bcf6af72b48025b0a" translate="yes" xml:space="preserve">
          <source>Type Definition std::os::unix::raw::mode_t</source>
          <target state="translated">型定義 std::os::unix::raw::mode_t</target>
        </trans-unit>
        <trans-unit id="6efe4bc154c56731d72a72033b5e96f1e8e776fa" translate="yes" xml:space="preserve">
          <source>Type Definition std::os::unix::raw::nlink_t</source>
          <target state="translated">型定義 std::os::unix::raw::nlink_t</target>
        </trans-unit>
        <trans-unit id="16d41f66ea53de25694ff8008809453896212992" translate="yes" xml:space="preserve">
          <source>Type Definition std::os::unix::raw::off_t</source>
          <target state="translated">型定義 std::os::unix::raw::off_t</target>
        </trans-unit>
        <trans-unit id="7fcd1c7c7d47846aeea79e3b67b951552799ecac" translate="yes" xml:space="preserve">
          <source>Type Definition std::os::unix::raw::pid_t</source>
          <target state="translated">型定義 std::os::unix::raw::pid_t</target>
        </trans-unit>
        <trans-unit id="15394730cd6adf60683b03d0f547388ed732a617" translate="yes" xml:space="preserve">
          <source>Type Definition std::os::unix::raw::pthread_t</source>
          <target state="translated">型定義 std::os::unix::raw::pthread_t</target>
        </trans-unit>
        <trans-unit id="f5866aac0842b4a721a91364de015f0e36fbc706" translate="yes" xml:space="preserve">
          <source>Type Definition std::os::unix::raw::time_t</source>
          <target state="translated">型定義 std::os::unix::raw::time_t</target>
        </trans-unit>
        <trans-unit id="c10ba42310b44320213f70095552a73e406c10bc" translate="yes" xml:space="preserve">
          <source>Type Definition std::os::unix::raw::uid_t</source>
          <target state="translated">型定義 std::os::unix::raw::uid_t</target>
        </trans-unit>
        <trans-unit id="ccfd242450d8d8e764c541c183e48c95060db965" translate="yes" xml:space="preserve">
          <source>Type Definition std::os::unix::thread::RawPthread</source>
          <target state="translated">型定義 std::os::unix::thread::RawPthread</target>
        </trans-unit>
        <trans-unit id="43663035c10bc49312c1bd0f80dfefc8e89294c1" translate="yes" xml:space="preserve">
          <source>Type Definition std::os::windows::io::RawHandle</source>
          <target state="translated">型定義 std::os::windows::io::RawHandle</target>
        </trans-unit>
        <trans-unit id="3c2575150d67f1e23972163c0fc5f2c5d673b3e4" translate="yes" xml:space="preserve">
          <source>Type Definition std::os::windows::io::RawSocket</source>
          <target state="translated">型定義 std::os::windows::io::RawSocket</target>
        </trans-unit>
        <trans-unit id="05dc66459d6d8527de01519647dff10489bc279b" translate="yes" xml:space="preserve">
          <source>Type Definition std::os::windows::raw::HANDLE</source>
          <target state="translated">型定義 std::os::windows::raw::HANDLE</target>
        </trans-unit>
        <trans-unit id="e2a21128c36897e8cf2791477ca7f265a71b8679" translate="yes" xml:space="preserve">
          <source>Type Definition std::os::windows::raw::SOCKET</source>
          <target state="translated">型定義 std::os::windows::raw::SOCKET</target>
        </trans-unit>
        <trans-unit id="f0f25e562f1eacf92009b3b9edd31757a9d568ee" translate="yes" xml:space="preserve">
          <source>Type Definition std::string::ParseError</source>
          <target state="translated">型定義 std::string::ParseError</target>
        </trans-unit>
        <trans-unit id="2cb5d5fbdf79715e3b849f3194ff3e1783dcc241" translate="yes" xml:space="preserve">
          <source>Type Definition std::sync::LockResult</source>
          <target state="translated">型定義 std::sync::LockResult</target>
        </trans-unit>
        <trans-unit id="a007682d472492c4b8b35e81f42caebf855855fb" translate="yes" xml:space="preserve">
          <source>Type Definition std::sync::TryLockResult</source>
          <target state="translated">型定義 std::sync::TryLockResult</target>
        </trans-unit>
        <trans-unit id="0fbaa33419fbed78ef077708914d095867001a9d" translate="yes" xml:space="preserve">
          <source>Type Definition std::thread::Result</source>
          <target state="translated">型定義 std::thread::Result</target>
        </trans-unit>
        <trans-unit id="3ba69662a63352acd45295d8a4cf929df3f97fd7" translate="yes" xml:space="preserve">
          <source>Type Definitions</source>
          <target state="translated">型の定義</target>
        </trans-unit>
        <trans-unit id="9037feed073eee5a9272aeaba9be605266f5d249" translate="yes" xml:space="preserve">
          <source>Type Layout</source>
          <target state="translated">タイプレイアウト</target>
        </trans-unit>
        <trans-unit id="7433446286e8e2d16c8a5d667b180309a3d0c3b1" translate="yes" xml:space="preserve">
          <source>Type System</source>
          <target state="translated">タイプシステム</target>
        </trans-unit>
        <trans-unit id="58cf557846d7f65d34e8a92739eef2665164fad4" translate="yes" xml:space="preserve">
          <source>Type aliases</source>
          <target state="translated">タイプエイリアス</target>
        </trans-unit>
        <trans-unit id="46e484c635b0e4d4b2d73cd209e4672f43ad07bf" translate="yes" xml:space="preserve">
          <source>Type aliases are also commonly used with the &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt; type for reducing repetition. Consider the &lt;code&gt;std::io&lt;/code&gt; module in the standard library. I/O operations often return a &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt; to handle situations when operations fail to work. This library has a &lt;code&gt;std::io::Error&lt;/code&gt; struct that represents all possible I/O errors. Many of the functions in &lt;code&gt;std::io&lt;/code&gt; will be returning &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt; where the &lt;code&gt;E&lt;/code&gt; is &lt;code&gt;std::io::Error&lt;/code&gt;, such as these functions in the &lt;code&gt;Write&lt;/code&gt; trait:</source>
          <target state="translated">タイプエイリアスは &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt; 繰り返しを減らすためにResult &amp;lt;T、E&amp;gt;タイプでも一般的に使用されます。標準ライブラリの &lt;code&gt;std::io&lt;/code&gt; モジュールを検討してください。 I / O操作は、操作が機能しない場合の状況を処理するために &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt; しばしばResult &amp;lt;T、E&amp;gt;を返します。このライブラリには、考えられるすべてのI / Oエラーを表す &lt;code&gt;std::io::Error&lt;/code&gt; 構造体があります。関数の多く &lt;code&gt;std::io&lt;/code&gt; 返却される &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt; &lt;code&gt;E&lt;/code&gt; がある &lt;code&gt;std::io::Error&lt;/code&gt; などで、これらの機能として、 &lt;code&gt;Write&lt;/code&gt; 特性を：</target>
        </trans-unit>
        <trans-unit id="6d5463932cf5afab710bceb8f1d7684735a25ccf" translate="yes" xml:space="preserve">
          <source>Type and Lifetime Parameters</source>
          <target state="translated">タイプと寿命のパラメータ</target>
        </trans-unit>
        <trans-unit id="46505cd1622c8bbcf00ce8fef2ff0cd36549954e" translate="yes" xml:space="preserve">
          <source>Type bounds may be &lt;em&gt;higher ranked&lt;/em&gt; over lifetimes. These bounds specify a bound is true &lt;em&gt;for all&lt;/em&gt; lifetimes. For example, a bound such as &lt;code&gt;for&amp;lt;'a&amp;gt; &amp;amp;'a T: PartialEq&amp;lt;i32&amp;gt;&lt;/code&gt; would require an implementation like</source>
          <target state="translated">型の境界は、ライフタイム全体で&lt;em&gt;上位にランク付けさ&lt;/em&gt;れる場合があります。これらの境界は&lt;em&gt;、すべての&lt;/em&gt;ライフタイムで境界がtrueであること&lt;em&gt;を&lt;/em&gt;指定します。たとえば &lt;code&gt;for&amp;lt;'a&amp;gt; &amp;amp;'a T: PartialEq&amp;lt;i32&amp;gt;&lt;/code&gt; は、次のような実装が必要です。</target>
        </trans-unit>
        <trans-unit id="ee004d162350a5b317e1dbaab9ce920a6f34a9cb" translate="yes" xml:space="preserve">
          <source>Type cast expressions</source>
          <target state="translated">型キャスト式</target>
        </trans-unit>
        <trans-unit id="7b7e747774abb621d3a39f39c2761d3405b325bb" translate="yes" xml:space="preserve">
          <source>Type coercions</source>
          <target state="translated">タイプの強制</target>
        </trans-unit>
        <trans-unit id="b6d852132e2d9e31234c0b7e2d2b2f126e521734" translate="yes" xml:space="preserve">
          <source>Type expressions</source>
          <target state="translated">型表現</target>
        </trans-unit>
        <trans-unit id="00e950510855acd161003d11973afbcccbd1f3d1" translate="yes" xml:space="preserve">
          <source>Type inference typically proceeds from the top of the function to the bottom, figuring out types as it goes. In some cases -- notably method calls and overloadable operators like &lt;code&gt;*&lt;/code&gt; -- the type checker may not have enough information &lt;em&gt;yet&lt;/em&gt; to make progress. This can be true even if the rest of the function provides enough context (because the type-checker hasn't looked that far ahead yet). In this case, type annotations can be used to help it along.</source>
          <target state="translated">型推論は、通常、関数の上部から下部に進み、型を計算します。場合によっては-特にメソッド呼び出しや &lt;code&gt;*&lt;/code&gt; のようなオーバーロード可能な演算子-型チェッカーには、&lt;em&gt;まだ&lt;/em&gt;十分な情報が&lt;em&gt;ない&lt;/em&gt;ために進行しない場合があります。これは、残りの関数が十分なコンテキストを提供する場合でも当てはまります（型チェッカーがまだそれほど前を向いていないため）。この場合、タイプアノテーションを使用してそれを支援できます。</target>
        </trans-unit>
        <trans-unit id="c11526a8c75cf7eda7350bd42de65837b525d024" translate="yes" xml:space="preserve">
          <source>Type information must be provided if a pointer type being cast from/into another type which cannot be inferred:</source>
          <target state="translated">ポインタ型が他の型から/他の型へキャストされている場合、型情報を提供しなければならない。</target>
        </trans-unit>
        <trans-unit id="a230d1816e8c1575c2c45ae6cf6a3850545e094f" translate="yes" xml:space="preserve">
          <source>Type layout can be changed with each compilation. Instead of trying to document exactly what is done, we only document what is guaranteed today.</source>
          <target state="translated">型のレイアウトはコンパイルのたびに変更することができます。正確に何が行われているかを文書化しようとするのではなく、今日保証されているものだけを文書化します。</target>
        </trans-unit>
        <trans-unit id="421e94d5ad1cf070315124ce8a70fe7342de0094" translate="yes" xml:space="preserve">
          <source>Type of &lt;code&gt;e&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;e&lt;/code&gt; のタイプ</target>
        </trans-unit>
        <trans-unit id="483996222a68497be8a52e043163c1b07da634c0" translate="yes" xml:space="preserve">
          <source>Type of the hasher that will be created.</source>
          <target state="translated">作成されるハッシャーのタイプ。</target>
        </trans-unit>
        <trans-unit id="90d41d3e02c3a5714dfb49c0b53d465ea95595cd" translate="yes" xml:space="preserve">
          <source>Type parameter defaults can only use parameters that occur before them. Erroneous code example:</source>
          <target state="translated">型パラメータのデフォルトでは、その前に出現するパラメータのみを使用することができます。誤ったコード例。</target>
        </trans-unit>
        <trans-unit id="610a43f90945887f546fa9894dbf887213eca6c4" translate="yes" xml:space="preserve">
          <source>Type parameter defaults can only use parameters that occur before them. Since type parameters are evaluated in-order, this issue could be fixed by doing:</source>
          <target state="translated">型パラメータのデフォルトでは、その前にあるパラメータのみを使用することができます。型パラメータは順番に評価されるので、この問題は以下のようにすることで修正できます。</target>
        </trans-unit>
        <trans-unit id="dac2f87deb7b8641c81a7d19aab25baf97b67f2a" translate="yes" xml:space="preserve">
          <source>Type parameter defaults cannot use &lt;code&gt;Self&lt;/code&gt; on structs, enums, or unions.</source>
          <target state="translated">型パラメーターのデフォルトでは、構造体、列挙型、または和集合で &lt;code&gt;Self&lt;/code&gt; を使用できません。</target>
        </trans-unit>
        <trans-unit id="c9a3646a7ac556f56d25e93e18f2d2b1583d0264" translate="yes" xml:space="preserve">
          <source>Type parameters</source>
          <target state="translated">タイプパラメータ</target>
        </trans-unit>
        <trans-unit id="4a3ece058bb3ba65db202bc18df133e4b49391e3" translate="yes" xml:space="preserve">
          <source>Type parameters can be specified for a trait to make it generic. These appear after the trait name, using the same syntax used in &lt;a href=&quot;functions#generic-functions&quot;&gt;generic functions&lt;/a&gt;.</source>
          <target state="translated">特性のタイプパラメータを指定して、特性を汎用にすることができます。これらは、&lt;a href=&quot;functions#generic-functions&quot;&gt;汎用関数で&lt;/a&gt;使用されるのと同じ構文を使用して、特性名の後に表示されます。</target>
        </trans-unit>
        <trans-unit id="8de0a3ce745cf3e1cf2895f8f92a4c1b4a8865b7" translate="yes" xml:space="preserve">
          <source>Type parameters for &lt;code&gt;impl Trait&lt;/code&gt; types must be explicitly defined as named generic parameters:</source>
          <target state="translated">&lt;code&gt;impl Trait&lt;/code&gt; 型の型パラメーターは、名前付きジェネリックパラメーターとして明示的に定義する必要があります。</target>
        </trans-unit>
        <trans-unit id="788f8ff13becde924812f48a846332da2dde1b3b" translate="yes" xml:space="preserve">
          <source>Type parameters in an associated item also cannot shadow parameters from the containing item:</source>
          <target state="translated">また、関連付けられた項目の型パラメータは、含まれる項目のパラメータをシャドーイングすることはできません。</target>
        </trans-unit>
        <trans-unit id="d2b6a64cfc2d2019725a350386f952f6ea964501" translate="yes" xml:space="preserve">
          <source>Type parameters in type definitions have lifetimes associated with them that represent how long the data stored within them is guaranteed to live. This lifetime must be as long as the data needs to be alive, and missing the constraint that denotes this will cause this error.</source>
          <target state="translated">型定義の型パラメータには、その中に格納されているデータがどれくらいの期間生きているかを表す寿命が関連付けられています。この寿命は、データが生きている必要があるだけの長さでなければならず、これを示す制約を欠くとこのエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="635a70628fcb4cdf2545b82d9a213017cf1ec1dc" translate="yes" xml:space="preserve">
          <source>Type parameters where the parameters only have any &lt;a href=&quot;../trait-bounds&quot;&gt;trait bounds&lt;/a&gt; of the following kind:</source>
          <target state="translated">型パラメーター。パラメーターには、次の種類の&lt;a href=&quot;../trait-bounds&quot;&gt;特性境界&lt;/a&gt;のみがあります。</target>
        </trans-unit>
        <trans-unit id="f5436dd7df5cce78281ac167ac45b8ad046b6808" translate="yes" xml:space="preserve">
          <source>Type paths are used within type definitions, trait bounds, type parameter bounds, and qualified paths.</source>
          <target state="translated">型パスは、型定義、形質境界、型パラメータ境界、および修飾パスの中で使用されます。</target>
        </trans-unit>
        <trans-unit id="0fc5390ca69aecade222ecf85ac47ee15fecaa1e" translate="yes" xml:space="preserve">
          <source>Type system</source>
          <target state="translated">タイプ別システム</target>
        </trans-unit>
        <trans-unit id="40294f1b1dbbecd786588c1ac7a98f52d1946633" translate="yes" xml:space="preserve">
          <source>Type system attributes</source>
          <target state="translated">タイプシステムの属性</target>
        </trans-unit>
        <trans-unit id="e6b05abe4f4f396debd3f7c7c7a457e652381139" translate="yes" xml:space="preserve">
          <source>TypeId</source>
          <target state="translated">TypeId</target>
        </trans-unit>
        <trans-unit id="6174852658dcb07e66221cdda0d47c6a79955026" translate="yes" xml:space="preserve">
          <source>TypeId::borrow</source>
          <target state="translated">TypeId::borrow</target>
        </trans-unit>
        <trans-unit id="9240a6191da03dd3e162b4d594573c014ae637e8" translate="yes" xml:space="preserve">
          <source>TypeId::borrow_mut</source>
          <target state="translated">TypeId::borrow_mut</target>
        </trans-unit>
        <trans-unit id="1e830f38943c98994765e5634b28fc734e6d131b" translate="yes" xml:space="preserve">
          <source>TypeId::clamp</source>
          <target state="translated">TypeId::clamp</target>
        </trans-unit>
        <trans-unit id="716fa011ef15618f6c39d058d78de9fd5d26d8a4" translate="yes" xml:space="preserve">
          <source>TypeId::clone</source>
          <target state="translated">TypeId::clone</target>
        </trans-unit>
        <trans-unit id="d206fca55570d1ee7222250a6099efa3eefe5378" translate="yes" xml:space="preserve">
          <source>TypeId::clone_from</source>
          <target state="translated">TypeId::clone_from</target>
        </trans-unit>
        <trans-unit id="795523e4b3053e8ae487bb7ffbfed98163be00e1" translate="yes" xml:space="preserve">
          <source>TypeId::clone_into</source>
          <target state="translated">TypeId::clone_into</target>
        </trans-unit>
        <trans-unit id="ddba09636ddf2c450efd47bdbd5c1086798641ce" translate="yes" xml:space="preserve">
          <source>TypeId::cmp</source>
          <target state="translated">TypeId::cmp</target>
        </trans-unit>
        <trans-unit id="3f0565a2054d47ca089c9dd28d09f714cfe255a6" translate="yes" xml:space="preserve">
          <source>TypeId::eq</source>
          <target state="translated">TypeId::eq</target>
        </trans-unit>
        <trans-unit id="3b66ed765f5e07da8b6a35c0796de577d880004a" translate="yes" xml:space="preserve">
          <source>TypeId::fmt</source>
          <target state="translated">TypeId::fmt</target>
        </trans-unit>
        <trans-unit id="a6d534f62ff1c6a2b12bb6ea7101f9db8f3b6a65" translate="yes" xml:space="preserve">
          <source>TypeId::from</source>
          <target state="translated">TypeId::from</target>
        </trans-unit>
        <trans-unit id="0ad8421f49348cec9c5c0ea27504bddf46f46746" translate="yes" xml:space="preserve">
          <source>TypeId::ge</source>
          <target state="translated">TypeId::ge</target>
        </trans-unit>
        <trans-unit id="98d12bbe982cc4e9feaef864de49f327eade548c" translate="yes" xml:space="preserve">
          <source>TypeId::gt</source>
          <target state="translated">TypeId::gt</target>
        </trans-unit>
        <trans-unit id="e1dea7697f9d16fe9585b0146b54ef1ba2595a7c" translate="yes" xml:space="preserve">
          <source>TypeId::hash</source>
          <target state="translated">TypeId::hash</target>
        </trans-unit>
        <trans-unit id="d7a9744fc39a0fe544964e9b703ad9db8ff88413" translate="yes" xml:space="preserve">
          <source>TypeId::hash_slice</source>
          <target state="translated">TypeId::hash_slice</target>
        </trans-unit>
        <trans-unit id="8f7e7f7b59fc95161e5efd4c331382bf506c5fe2" translate="yes" xml:space="preserve">
          <source>TypeId::into</source>
          <target state="translated">TypeId::into</target>
        </trans-unit>
        <trans-unit id="02f386a913763d6012a9e28821eacb6458ea8546" translate="yes" xml:space="preserve">
          <source>TypeId::le</source>
          <target state="translated">TypeId::le</target>
        </trans-unit>
        <trans-unit id="578f87bf8b84d3b8635f212a617fcec0f23b5476" translate="yes" xml:space="preserve">
          <source>TypeId::lt</source>
          <target state="translated">TypeId::lt</target>
        </trans-unit>
        <trans-unit id="6c7811e3962847e55153d132edc379a97aeab156" translate="yes" xml:space="preserve">
          <source>TypeId::max</source>
          <target state="translated">TypeId::max</target>
        </trans-unit>
        <trans-unit id="5de1024eb47140ae18a0b9ef6b7abda00f5ebc42" translate="yes" xml:space="preserve">
          <source>TypeId::min</source>
          <target state="translated">TypeId::min</target>
        </trans-unit>
        <trans-unit id="19a1b2382c162a3deb2660f8d535151330c4dd68" translate="yes" xml:space="preserve">
          <source>TypeId::ne</source>
          <target state="translated">TypeId::ne</target>
        </trans-unit>
        <trans-unit id="57bbf815ae3734582141e6c3d94d16d795b42238" translate="yes" xml:space="preserve">
          <source>TypeId::of</source>
          <target state="translated">TypeId::of</target>
        </trans-unit>
        <trans-unit id="9387d6c30cfc43859bbce0cd6a9e882f482aa548" translate="yes" xml:space="preserve">
          <source>TypeId::partial_cmp</source>
          <target state="translated">TypeId::partial_cmp</target>
        </trans-unit>
        <trans-unit id="275a8a5c8970873ed0f6e5f7be025d1d88c24b17" translate="yes" xml:space="preserve">
          <source>TypeId::to_owned</source>
          <target state="translated">TypeId::to_owned</target>
        </trans-unit>
        <trans-unit id="b305d0eb27c70d75d6581a7bb24fd3b0cabb8713" translate="yes" xml:space="preserve">
          <source>TypeId::try_from</source>
          <target state="translated">TypeId::try_from</target>
        </trans-unit>
        <trans-unit id="ab6bd512f140c02836e01449097676127e0b1727" translate="yes" xml:space="preserve">
          <source>TypeId::try_into</source>
          <target state="translated">TypeId::try_into</target>
        </trans-unit>
        <trans-unit id="b7aa84284f56989bd040008a9a1842dc034ac075" translate="yes" xml:space="preserve">
          <source>TypeId::type_id</source>
          <target state="translated">TypeId::type_id</target>
        </trans-unit>
        <trans-unit id="ca804ab74bf9fa2667ceb8c95926b696eb69be50" translate="yes" xml:space="preserve">
          <source>Typedefs</source>
          <target state="translated">Typedefs</target>
        </trans-unit>
        <trans-unit id="93b9e289e2842469d001eccf7ad5d79f3c302dc9" translate="yes" xml:space="preserve">
          <source>Types</source>
          <target state="translated">Types</target>
        </trans-unit>
        <trans-unit id="51920e55843cc4f1f030d29bb9494f870acf0911" translate="yes" xml:space="preserve">
          <source>Types and Traits for working with asynchronous tasks.</source>
          <target state="translated">非同期タスクで作業するためのタイプと特徴</target>
        </trans-unit>
        <trans-unit id="eb96b9196c6d15505da132a08c116566f7a5d2bc" translate="yes" xml:space="preserve">
          <source>Types express that they can be borrowed as some type &lt;code&gt;T&lt;/code&gt; by implementing &lt;code&gt;Borrow&amp;lt;T&amp;gt;&lt;/code&gt;, providing a reference to a &lt;code&gt;T&lt;/code&gt; in the trait&amp;rsquo;s &lt;a href=&quot;#tymethod.borrow&quot;&gt;&lt;code&gt;borrow&lt;/code&gt;&lt;/a&gt; method. A type is free to borrow as several different types. If it wishes to mutably borrow as the type &amp;ndash; allowing the underlying data to be modified, it can additionally implement &lt;a href=&quot;trait.borrowmut&quot;&gt;&lt;code&gt;BorrowMut&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">型は、 &lt;code&gt;Borrow&amp;lt;T&amp;gt;&lt;/code&gt; 実装し、特性の&lt;a href=&quot;#tymethod.borrow&quot;&gt; &lt;code&gt;borrow&lt;/code&gt; &lt;/a&gt;メソッドで &lt;code&gt;T&lt;/code&gt; への参照を提供することにより、それらをある型 &lt;code&gt;T&lt;/code&gt; として借用できることを表します。タイプは、いくつかの異なるタイプとして自由に借用できます。型として可変的に借用したい場合-基になるデータを変更できるようにするには、さらに&lt;a href=&quot;trait.borrowmut&quot;&gt; &lt;code&gt;BorrowMut&amp;lt;T&amp;gt;&lt;/code&gt; &lt;/a&gt;実装できます。</target>
        </trans-unit>
        <trans-unit id="6aef87c840bd9c8d6b5be21927a32724dcebf8ad" translate="yes" xml:space="preserve">
          <source>Types express that they can be borrowed as some type &lt;code&gt;T&lt;/code&gt; by implementing &lt;code&gt;Borrow&amp;lt;T&amp;gt;&lt;/code&gt;, providing a reference to a &lt;code&gt;T&lt;/code&gt; in the trait&amp;rsquo;s &lt;a href=&quot;trait.borrow#tymethod.borrow&quot;&gt;&lt;code&gt;borrow&lt;/code&gt;&lt;/a&gt; method. A type is free to borrow as several different types. If it wishes to mutably borrow as the type &amp;ndash; allowing the underlying data to be modified, it can additionally implement &lt;a href=&quot;trait.borrowmut&quot;&gt;&lt;code&gt;BorrowMut&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">タイプは、 &lt;code&gt;Borrow&amp;lt;T&amp;gt;&lt;/code&gt; 実装することにより、タイプ &lt;code&gt;T&lt;/code&gt; として借用できることを表し、トレイトの&lt;a href=&quot;trait.borrow#tymethod.borrow&quot;&gt; &lt;code&gt;borrow&lt;/code&gt; &lt;/a&gt;メソッドで &lt;code&gt;T&lt;/code&gt; への参照を提供します。タイプはいくつかの異なるタイプとして自由に借りることができます。タイプとして可変的に借用したい場合は、基になるデータを変更できるようにするために、&lt;a href=&quot;trait.borrowmut&quot;&gt; &lt;code&gt;BorrowMut&amp;lt;T&amp;gt;&lt;/code&gt; &lt;/a&gt;追加で実装できます。</target>
        </trans-unit>
        <trans-unit id="7a53d10bc9765156a98cd22298d0dddb08f16d1f" translate="yes" xml:space="preserve">
          <source>Types for which it is safe to share references between threads.</source>
          <target state="translated">スレッド間で参照を共有しても安全な型。</target>
        </trans-unit>
        <trans-unit id="98c95794e6189dee1201d1bd443780e1c531d39b" translate="yes" xml:space="preserve">
          <source>Types implementing &lt;code&gt;Hash&lt;/code&gt; are able to be &lt;a href=&quot;#tymethod.hash&quot;&gt;&lt;code&gt;hash&lt;/code&gt;&lt;/a&gt;ed with an instance of &lt;a href=&quot;trait.hasher&quot;&gt;&lt;code&gt;Hasher&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Hash&lt;/code&gt; を実装する型は、&lt;a href=&quot;trait.hasher&quot;&gt; &lt;code&gt;Hasher&lt;/code&gt; の&lt;/a&gt;インスタンスで&lt;a href=&quot;#tymethod.hash&quot;&gt; &lt;code&gt;hash&lt;/code&gt; &lt;/a&gt;できます。</target>
        </trans-unit>
        <trans-unit id="e63cf5842f436d926f1be87d5535f3c61b75dd54" translate="yes" xml:space="preserve">
          <source>Types implementing &lt;code&gt;Hash&lt;/code&gt; are able to be &lt;a href=&quot;trait.hash#tymethod.hash&quot;&gt;&lt;code&gt;hash&lt;/code&gt;&lt;/a&gt;ed with an instance of &lt;a href=&quot;trait.hasher&quot;&gt;&lt;code&gt;Hasher&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Hash&lt;/code&gt; を実装する型は、&lt;a href=&quot;trait.hasher&quot;&gt; &lt;code&gt;Hasher&lt;/code&gt; の&lt;/a&gt;インスタンスで&lt;a href=&quot;trait.hash#tymethod.hash&quot;&gt; &lt;code&gt;hash&lt;/code&gt; &lt;/a&gt;できます。</target>
        </trans-unit>
        <trans-unit id="f882465e79764914f835cc19a5911f31e45f796b" translate="yes" xml:space="preserve">
          <source>Types in type definitions have lifetimes associated with them that represent how long the data stored within them is guaranteed to be live. This lifetime must be as long as the data needs to be alive, and missing the constraint that denotes this will cause this error.</source>
          <target state="translated">型定義の型には、その中に格納されているデータがどれくらいの期間生きていることが保証されているかを表す寿命が関連付けられています。この寿命は、データが生きている必要がある限り長くなければならず、これを示す制約を欠くとこのエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="777921b6f1b475c9ffaa77c98a5d17f39e3660e5" translate="yes" xml:space="preserve">
          <source>Types like &lt;code&gt;&amp;amp;Mutex&amp;lt;T&amp;gt;&lt;/code&gt;, however, are unwind safe because they implement poisoning by default. They still allow witnessing a broken invariant, but they already provide their own &quot;speed bumps&quot; to do so.</source>
          <target state="translated">ただし、 &lt;code&gt;&amp;amp;Mutex&amp;lt;T&amp;gt;&lt;/code&gt; ようなタイプは、デフォルトでポイズニングを実装しているため、アンワインドセーフです。彼らはまだ壊れた不変条件を目撃することを許可しますが、そうするために彼ら自身の「スピードバンプ」をすでに提供しています。</target>
        </trans-unit>
        <trans-unit id="b83d85bf5da8e86595350c0dcf9e419a4d654c49" translate="yes" xml:space="preserve">
          <source>Types like Vec therefore just &lt;code&gt;drop_in_place(&amp;amp;mut self[..])&lt;/code&gt; without using &lt;code&gt;needs_drop&lt;/code&gt; explicitly. Types like &lt;a href=&quot;../collections/struct.hashmap&quot;&gt;&lt;code&gt;HashMap&lt;/code&gt;&lt;/a&gt;, on the other hand, have to drop values one at a time and should use this API.</source>
          <target state="translated">したがって、Vecのようなタイプは、 &lt;code&gt;needs_drop&lt;/code&gt; を明示的に使用せずに、 &lt;code&gt;drop_in_place(&amp;amp;mut self[..])&lt;/code&gt; だけです。一方、&lt;a href=&quot;../collections/struct.hashmap&quot;&gt; &lt;code&gt;HashMap&lt;/code&gt; の&lt;/a&gt;ようなタイプは、一度に1つずつ値をドロップする必要があり、このAPIを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="a8a83f5b2fb6977b69a3feef08ecd269c85a9244" translate="yes" xml:space="preserve">
          <source>Types like Vec therefore just &lt;code&gt;drop_in_place(&amp;amp;mut self[..])&lt;/code&gt; without using needs_drop explicitly. Types like &lt;code&gt;HashMap&lt;/code&gt;, on the other hand, have to drop values one at a time and should use this API.</source>
          <target state="translated">したがって、Vecのような型は、needs_dropを明示的に使用せずに、単に &lt;code&gt;drop_in_place(&amp;amp;mut self[..])&lt;/code&gt; 。一方、 &lt;code&gt;HashMap&lt;/code&gt; のようなタイプは、一度に1つずつ値をドロップする必要があり、このAPIを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="7478d20240bfc3f122030bf28d31bd62139a2c2b" translate="yes" xml:space="preserve">
          <source>Types of paths</source>
          <target state="translated">パスの種類</target>
        </trans-unit>
        <trans-unit id="927769adc55a691f31ed2d50893e6b26e3a7e1f3" translate="yes" xml:space="preserve">
          <source>Types such as &lt;code&gt;&amp;amp;mut T&lt;/code&gt; and &lt;code&gt;&amp;amp;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; are examples which are &lt;strong&gt;not&lt;/strong&gt; unwind safe. The general idea is that any mutable state which can be shared across &lt;code&gt;catch_unwind&lt;/code&gt; is not unwind safe by default. This is because it is very easy to witness a broken invariant outside of &lt;code&gt;catch_unwind&lt;/code&gt; as the data is simply accessed as usual.</source>
          <target state="translated">&lt;code&gt;&amp;amp;mut T&lt;/code&gt; や &lt;code&gt;&amp;amp;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; などのタイプは、アンワインドセーフでは&lt;strong&gt;ない&lt;/strong&gt;例です。一般的な考え方は、 &lt;code&gt;catch_unwind&lt;/code&gt; 全体で共有できる変更可能な状態は、デフォルトではアンワインドセーフではないということです。これは、通常どおりデータにアクセスするだけなので、 &lt;code&gt;catch_unwind&lt;/code&gt; の外で壊れた不変条件を簡単に確認できるためです。</target>
        </trans-unit>
        <trans-unit id="c3195172a47cd29103a9c049d30b8fbf3e8b1360" translate="yes" xml:space="preserve">
          <source>Types that are &lt;a href=&quot;../marker/trait.copy&quot;&gt;&lt;code&gt;Copy&lt;/code&gt;&lt;/a&gt; should have a trivial implementation of &lt;code&gt;Clone&lt;/code&gt;. More formally: if &lt;code&gt;T: Copy&lt;/code&gt;, &lt;code&gt;x: T&lt;/code&gt;, and &lt;code&gt;y: &amp;amp;T&lt;/code&gt;, then &lt;code&gt;let x = y.clone();&lt;/code&gt; is equivalent to &lt;code&gt;let x = *y;&lt;/code&gt;. Manual implementations should be careful to uphold this invariant; however, unsafe code must not rely on it to ensure memory safety.</source>
          <target state="translated">&lt;a href=&quot;../marker/trait.copy&quot;&gt; &lt;code&gt;Copy&lt;/code&gt; &lt;/a&gt;型は、 &lt;code&gt;Clone&lt;/code&gt; 簡単な実装が必要です。より正式には： &lt;code&gt;T: Copy&lt;/code&gt; 、 &lt;code&gt;x: T&lt;/code&gt; 、および &lt;code&gt;y: &amp;amp;T&lt;/code&gt; 場合 &lt;code&gt;let x = y.clone();&lt;/code&gt; &lt;code&gt;let x = *y;&lt;/code&gt; と同等です。。手動の実装では、この不変条件を維持するように注意する必要があります。ただし、安全でないコードは、メモリの安全性を確保するためにそれに依存してはなりません。</target>
        </trans-unit>
        <trans-unit id="f0ac37d244c8fc744b51cd8122917f397c819f37" translate="yes" xml:space="preserve">
          <source>Types that are not &lt;code&gt;Sync&lt;/code&gt; are those that have &quot;interior mutability&quot; in a non-thread-safe form, such as &lt;a href=&quot;../cell/struct.cell&quot;&gt;&lt;code&gt;Cell&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../cell/struct.refcell&quot;&gt;&lt;code&gt;RefCell&lt;/code&gt;&lt;/a&gt;. These types allow for mutation of their contents even through an immutable, shared reference. For example the &lt;code&gt;set&lt;/code&gt; method on &lt;a href=&quot;../cell/struct.cell&quot;&gt;&lt;code&gt;Cell&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; takes &lt;code&gt;&amp;amp;self&lt;/code&gt;, so it requires only a shared reference &lt;a href=&quot;../cell/struct.cell&quot;&gt;&lt;code&gt;&amp;amp;Cell&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;. The method performs no synchronization, thus &lt;a href=&quot;../cell/struct.cell&quot;&gt;&lt;code&gt;Cell&lt;/code&gt;&lt;/a&gt; cannot be &lt;code&gt;Sync&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Sync&lt;/code&gt; でないタイプは、&lt;a href=&quot;../cell/struct.cell&quot;&gt; &lt;code&gt;Cell&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;../cell/struct.refcell&quot;&gt; &lt;code&gt;RefCell&lt;/code&gt; &lt;/a&gt;など、スレッドセーフではない形式で「内部可変性」を持つタイプです。これらのタイプでは、不変の共有参照を介してもコンテンツの変更が可能です。たとえば、&lt;a href=&quot;../cell/struct.cell&quot;&gt; &lt;code&gt;Cell&amp;lt;T&amp;gt;&lt;/code&gt; &lt;/a&gt;の &lt;code&gt;set&lt;/code&gt; メソッドは &lt;code&gt;&amp;amp;self&lt;/code&gt; を受け取るため、共有参照&lt;a href=&quot;../cell/struct.cell&quot;&gt; &lt;code&gt;&amp;amp;Cell&amp;lt;T&amp;gt;&lt;/code&gt; &lt;/a&gt;のみが必要です。この方法には、同期を実行せず、従って&lt;a href=&quot;../cell/struct.cell&quot;&gt; &lt;code&gt;Cell&lt;/code&gt; &lt;/a&gt;できません &lt;code&gt;Sync&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="052471a32eb0536b190d6178524500a9ab363d4b" translate="yes" xml:space="preserve">
          <source>Types that are not &lt;code&gt;Sync&lt;/code&gt; are those that have &quot;interior mutability&quot; in a non-thread-safe form, such as &lt;a href=&quot;../cell/struct.cell&quot;&gt;&lt;code&gt;cell::Cell&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../cell/struct.refcell&quot;&gt;&lt;code&gt;cell::RefCell&lt;/code&gt;&lt;/a&gt;. These types allow for mutation of their contents even through an immutable, shared reference. For example the &lt;code&gt;set&lt;/code&gt; method on &lt;a href=&quot;../cell/struct.cell&quot;&gt;&lt;code&gt;Cell&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; takes &lt;code&gt;&amp;amp;self&lt;/code&gt;, so it requires only a shared reference &lt;a href=&quot;../cell/struct.cell&quot;&gt;&lt;code&gt;&amp;amp;Cell&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;. The method performs no synchronization, thus &lt;a href=&quot;../cell/struct.cell&quot;&gt;&lt;code&gt;Cell&lt;/code&gt;&lt;/a&gt; cannot be &lt;code&gt;Sync&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Sync&lt;/code&gt; ない型は、&lt;a href=&quot;../cell/struct.cell&quot;&gt; &lt;code&gt;cell::Cell&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;../cell/struct.refcell&quot;&gt; &lt;code&gt;cell::RefCell&lt;/code&gt; &lt;/a&gt;など、スレッドセーフでない形式で「内部の可変性」を持つ型です。これらのタイプでは、不変の共有参照を介してもコンテンツの変更が可能です。たとえば、&lt;a href=&quot;../cell/struct.cell&quot;&gt; &lt;code&gt;Cell&amp;lt;T&amp;gt;&lt;/code&gt; &lt;/a&gt;の &lt;code&gt;set&lt;/code&gt; メソッドは &lt;code&gt;&amp;amp;self&lt;/code&gt; を取るため、共有参照&lt;a href=&quot;../cell/struct.cell&quot;&gt; &lt;code&gt;&amp;amp;Cell&amp;lt;T&amp;gt;&lt;/code&gt; &lt;/a&gt;のみが必要です。このメソッドは同期を実行しないため、&lt;a href=&quot;../cell/struct.cell&quot;&gt; &lt;code&gt;Cell&lt;/code&gt; &lt;/a&gt;を &lt;code&gt;Sync&lt;/code&gt; にすることはできません。</target>
        </trans-unit>
        <trans-unit id="a93bcdad638deb7c786807f08f731b7cc346d96e" translate="yes" xml:space="preserve">
          <source>Types that can be &quot;unsized&quot; to a dynamically-sized type.</source>
          <target state="translated">動的にサイズを変更できる型に「サイズを変更しない」ことができる型。</target>
        </trans-unit>
        <trans-unit id="cb55fa05185a6907e8b5c6521da0fcc611e7870b" translate="yes" xml:space="preserve">
          <source>Types that can be referred to by a path directly. Specifically &lt;a href=&quot;items/enumerations&quot;&gt;enums&lt;/a&gt;, &lt;a href=&quot;items/structs&quot;&gt;structs&lt;/a&gt;, &lt;a href=&quot;items/unions&quot;&gt;unions&lt;/a&gt;, and &lt;a href=&quot;types/trait-object&quot;&gt;trait objects&lt;/a&gt;.</source>
          <target state="translated">パスから直接参照できるタイプ。具体的には、&lt;a href=&quot;items/enumerations&quot;&gt;列挙&lt;/a&gt;、&lt;a href=&quot;items/structs&quot;&gt;構造体&lt;/a&gt;、&lt;a href=&quot;items/unions&quot;&gt;共用&lt;/a&gt;体、および&lt;a href=&quot;types/trait-object&quot;&gt;特性オブジェクト&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="25ee853941e3e88ccc68136bde43188a34e9bb72" translate="yes" xml:space="preserve">
          <source>Types that can be safely moved after being pinned.</source>
          <target state="translated">ピン留めされても安全に移動できるタイプ</target>
        </trans-unit>
        <trans-unit id="1ac756fd205dd639ca5e2fd93c5deef27d4364ad" translate="yes" xml:space="preserve">
          <source>Types that can be transferred across thread boundaries.</source>
          <target state="translated">スレッドの境界を越えて転送できる型</target>
        </trans-unit>
        <trans-unit id="320fc78d266da1348d0700937ff111e53e935f29" translate="yes" xml:space="preserve">
          <source>Types that pin data to its location in memory.</source>
          <target state="translated">データをメモリ内の位置にピンで固定するタイプです。</target>
        </trans-unit>
        <trans-unit id="76aa938f99526e648196d0e632e37d9cfcfbe64a" translate="yes" xml:space="preserve">
          <source>Types where all values have the same size and alignment known at compile time implement the &lt;a href=&quot;../std/marker/trait.sized&quot;&gt;&lt;code&gt;Sized&lt;/code&gt;&lt;/a&gt; trait and can be checked with the &lt;a href=&quot;../std/mem/fn.size_of&quot;&gt;&lt;code&gt;size_of&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../std/mem/fn.align_of&quot;&gt;&lt;code&gt;align_of&lt;/code&gt;&lt;/a&gt; functions. Types that are not &lt;a href=&quot;../std/marker/trait.sized&quot;&gt;&lt;code&gt;Sized&lt;/code&gt;&lt;/a&gt; are known as &lt;a href=&quot;dynamically-sized-types&quot;&gt;dynamically sized types&lt;/a&gt;. Since all values of a &lt;code&gt;Sized&lt;/code&gt; type share the same size and alignment, we refer to those shared values as the size of the type and the alignment of the type respectively.</source>
          <target state="translated">すべての値がコンパイル時に知られている同じサイズとアライメントを持って実装する型&lt;a href=&quot;../std/marker/trait.sized&quot;&gt; &lt;code&gt;Sized&lt;/code&gt; &lt;/a&gt;形質をしてで確認することができ&lt;a href=&quot;../std/mem/fn.size_of&quot;&gt; &lt;code&gt;size_of&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;../std/mem/fn.align_of&quot;&gt; &lt;code&gt;align_of&lt;/code&gt; &lt;/a&gt;機能。&lt;a href=&quot;../std/marker/trait.sized&quot;&gt; &lt;code&gt;Sized&lt;/code&gt; &lt;/a&gt;されていないタイプは、&lt;a href=&quot;dynamically-sized-types&quot;&gt;動的サイズ設定タイプと&lt;/a&gt;呼ばれます。すべての値ので、 &lt;code&gt;Sized&lt;/code&gt; 型を共有同じサイズ及び位置合わせ、我々は、型のサイズと、それぞれのタイプの位置合わせとして、それらの共有の値を指します。</target>
        </trans-unit>
        <trans-unit id="3210f89648e92f030dff845af33244c5ff84d48b" translate="yes" xml:space="preserve">
          <source>Types which can be safely moved after being pinned.</source>
          <target state="translated">ピン留めされても安全に移動できるタイプ。</target>
        </trans-unit>
        <trans-unit id="2f9fa3c4c8befc1e893d11ac3d1acf505f4ef9f3" translate="yes" xml:space="preserve">
          <source>Types whose values can be duplicated simply by copying bits.</source>
          <target state="translated">ビットをコピーするだけで値が複製できる型。</target>
        </trans-unit>
        <trans-unit id="184223af25e77a5fba4124f5c744634bac8d8134" translate="yes" xml:space="preserve">
          <source>Types with a built-in &lt;code&gt;Copy&lt;/code&gt; implementation (see above)</source>
          <target state="translated">組み込みの &lt;code&gt;Copy&lt;/code&gt; 実装を持つ型（上記を参照）</target>
        </trans-unit>
        <trans-unit id="484e89278738e43bbfac83c89cf041e830b0fa33" translate="yes" xml:space="preserve">
          <source>Types with a constant size known at compile time.</source>
          <target state="translated">コンパイル時にサイズが一定であることがわかっている型。</target>
        </trans-unit>
        <trans-unit id="c606776082303165b5e8cc822f677d6b3746b68d" translate="yes" xml:space="preserve">
          <source>Typically in Rust, it is difficult to perform step (2) because catching a panic involves either spawning a thread (which in turns makes it difficult to later witness broken invariants) or using the &lt;code&gt;catch_unwind&lt;/code&gt; function in this module. Additionally, even if an invariant is witnessed, it typically isn't a problem in Rust because there are no uninitialized values (like in C or C++).</source>
          <target state="translated">通常、Rustでは、パニックをキャッチするためにスレッドを生成する（その結果、後から壊れた不変条件を目撃することが困難になる）か、このモジュールで &lt;code&gt;catch_unwind&lt;/code&gt; 関数を使用するため、ステップ（2）を実行することは困難です。さらに、不変条件が目撃されたとしても、初期化されていない値（CやC ++など）がないため、Rustでは通常問題になりません。</target>
        </trans-unit>
        <trans-unit id="cb301c3b538136ec6b1f761774f64171df868f5f" translate="yes" xml:space="preserve">
          <source>Typing &lt;code&gt;quit&lt;/code&gt; actually quits the game, but so will any other non-number input. However, this is suboptimal to say the least. We want the game to automatically stop when the correct number is guessed.</source>
          <target state="translated">&lt;code&gt;quit&lt;/code&gt; と入力すると、実際にはゲームが終了しますが、数値以外の入力も終了します。ただし、これは控えめに言っても最適ではありません。正しい数が推測されたときにゲームを自動的に停止させたい。</target>
        </trans-unit>
        <trans-unit id="a153700f851859e0ff4a79a843433857f27950a3" translate="yes" xml:space="preserve">
          <source>U+0021 ..= U+002F &lt;code&gt;! &quot; # $ % &amp;amp; ' ( ) * + , - . /&lt;/code&gt;, or</source>
          <target state="translated">U + 0021 .. = U + 002F &lt;code&gt;! &quot; # $ % &amp;amp; ' ( ) * + , - . /&lt;/code&gt; 、または</target>
        </trans-unit>
        <trans-unit id="9a3efbcf50b26fb17c75edefb4d0573be03644e1" translate="yes" xml:space="preserve">
          <source>U+0030 '0' ..= U+0039 '9', or</source>
          <target state="translated">U+0030 '0' ...=U+0039 '9'、または</target>
        </trans-unit>
        <trans-unit id="974d5e574e1e2bc13b31d24cc4a60ea2f16fa049" translate="yes" xml:space="preserve">
          <source>U+0030 '0' ..= U+0039 '9'.</source>
          <target state="translated">U+0030 '0' ...=U+0039 '9'。</target>
        </trans-unit>
        <trans-unit id="fc0e8044fa37810bc4ad961db684088868f06aba" translate="yes" xml:space="preserve">
          <source>U+003A ..= U+0040 &lt;code&gt;: ; &amp;lt; = &amp;gt; ? @&lt;/code&gt;, or</source>
          <target state="translated">U + 003A ... = U + 0040 &lt;code&gt;: ; &amp;lt; = &amp;gt; ? @&lt;/code&gt; 、または</target>
        </trans-unit>
        <trans-unit id="302310fbdc6543d9d3ceaffa2ea8c3882849e20a" translate="yes" xml:space="preserve">
          <source>U+0041 'A' ..= U+0046 'F', or</source>
          <target state="translated">U+0041 'A' ...=U+0046 'F'、または</target>
        </trans-unit>
        <trans-unit id="0736721e1e5a1d0311260bd3b8011dcd68e67375" translate="yes" xml:space="preserve">
          <source>U+0041 'A' ..= U+005A 'Z', or</source>
          <target state="translated">U+0041 'A' ...=U+005A 'Z'、または</target>
        </trans-unit>
        <trans-unit id="db2fb3a2a6da1a41f13ef4503845f3b0b40f0c2e" translate="yes" xml:space="preserve">
          <source>U+005B ..= U+0060 &lt;code&gt;[ \ ] ^ _ ` &lt;/code&gt;, or</source>
          <target state="translated">U + 005B .. = U + 0060 &lt;code&gt;[ \ ] ^ _ ` &lt;/code&gt; 、または</target>
        </trans-unit>
        <trans-unit id="d8cc906d3074f1fb9435c008fb8f60999129ec67" translate="yes" xml:space="preserve">
          <source>U+0061 'a' ..= U+0066 'f'.</source>
          <target state="translated">U+0061 'a' ...=U+0066 'f'。</target>
        </trans-unit>
        <trans-unit id="c1d839fcec5226b8d1bd246357b031dd87454f54" translate="yes" xml:space="preserve">
          <source>U+0061 'a' ..= U+007A 'z', or</source>
          <target state="translated">U+0061 'a' ...=U+007A 'z'、または</target>
        </trans-unit>
        <trans-unit id="94a61fd70b1e7aaf895ebbced86d7174cebf3cb2" translate="yes" xml:space="preserve">
          <source>U+0061 'a' ..= U+007A 'z'.</source>
          <target state="translated">U+0061 'a' ...=U+007A 'z'。</target>
        </trans-unit>
        <trans-unit id="2bed9fc1e2abd580e2aa130399315d68f08afda9" translate="yes" xml:space="preserve">
          <source>U+007B ..= U+007E &lt;code&gt;{ | } ~&lt;/code&gt;</source>
          <target state="translated">U + 007B .. = U + 007E &lt;code&gt;{ | } ~&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d6732b9263430ba9b754d7ce4c99335950d3da8b" translate="yes" xml:space="preserve">
          <source>UCred</source>
          <target state="translated">UCred</target>
        </trans-unit>
        <trans-unit id="0dd9df57e9839a1ea6ed560675b576be4884654a" translate="yes" xml:space="preserve">
          <source>UNC prefixes consist of the server's hostname and a share name.</source>
          <target state="translated">UNC接頭辞はサーバのホスト名と共有名で構成されています。</target>
        </trans-unit>
        <trans-unit id="08e32e0a7cca1165daa904dec1d1f04e68736d5e" translate="yes" xml:space="preserve">
          <source>UNICODE_ESCAPE :</source>
          <target state="translated">UNICODE_ESCAPE .</target>
        </trans-unit>
        <trans-unit id="a22641b9fc9c9910a6cdbff4d4c69eb3d13192f7" translate="yes" xml:space="preserve">
          <source>UNICODE_VERSION</source>
          <target state="translated">UNICODE_VERSION</target>
        </trans-unit>
        <trans-unit id="039571ef60c9b1a6527c96a684dccfc0e4f32a75" translate="yes" xml:space="preserve">
          <source>UNIX</source>
          <target state="translated">UNIX</target>
        </trans-unit>
        <trans-unit id="82e26360ac87e10e1e21c7c1d4d889a8777bad06" translate="yes" xml:space="preserve">
          <source>UNIX_EPOCH</source>
          <target state="translated">UNIX_EPOCH</target>
        </trans-unit>
        <trans-unit id="663b90c899fa25a111067be0c22ffc64dcf581c2" translate="yes" xml:space="preserve">
          <source>UTF-8</source>
          <target state="translated">UTF-8</target>
        </trans-unit>
        <trans-unit id="ff463dac21cfe2cbf8ee41ca3cd6ef5584048c23" translate="yes" xml:space="preserve">
          <source>UTF8BOM : &lt;code&gt;\uFEFF&lt;/code&gt;</source>
          <target state="translated">UTF8BOM： &lt;code&gt;\uFEFF&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9bc8e71f3f5fe8f28cf7f67493cc988d6461307a" translate="yes" xml:space="preserve">
          <source>UTF8BOM&lt;sup&gt;?&lt;/sup&gt;</source>
          <target state="translated">UTF8BOM&lt;sup&gt;?&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="f301189dd0e6ecd6aa5f6cd826f3ac3660574f9f" translate="yes" xml:space="preserve">
          <source>UdpSocket</source>
          <target state="translated">UdpSocket</target>
        </trans-unit>
        <trans-unit id="eef9838e551c21ad60465337cf4a411d0bc3c3b0" translate="yes" xml:space="preserve">
          <source>UdpSocket::as_raw_fd</source>
          <target state="translated">UdpSocket::as_raw_fd</target>
        </trans-unit>
        <trans-unit id="3dead55d6e23751656153f593bd69532bbdd74b4" translate="yes" xml:space="preserve">
          <source>UdpSocket::as_raw_socket</source>
          <target state="translated">UdpSocket::as_raw_socket</target>
        </trans-unit>
        <trans-unit id="e711eb64b283a492f76bc94de05d5beae4ce3446" translate="yes" xml:space="preserve">
          <source>UdpSocket::bind</source>
          <target state="translated">UdpSocket::bind</target>
        </trans-unit>
        <trans-unit id="bd6abe4ecc1b7a3998504825b222c78c7397b977" translate="yes" xml:space="preserve">
          <source>UdpSocket::borrow</source>
          <target state="translated">UdpSocket::borrow</target>
        </trans-unit>
        <trans-unit id="d6dfaba170b099d4935948d95be3a9b2d44c1b67" translate="yes" xml:space="preserve">
          <source>UdpSocket::borrow_mut</source>
          <target state="translated">UdpSocket::borrow_mut</target>
        </trans-unit>
        <trans-unit id="c7601afb8a1f8cbf9600b90ec208697e7f31bb37" translate="yes" xml:space="preserve">
          <source>UdpSocket::broadcast</source>
          <target state="translated">UdpSocket::broadcast</target>
        </trans-unit>
        <trans-unit id="b5425c83fcfa16a56bdac78f93d426c4d76de0d0" translate="yes" xml:space="preserve">
          <source>UdpSocket::connect</source>
          <target state="translated">UdpSocket::connect</target>
        </trans-unit>
        <trans-unit id="4ef0111b75ab32121f2408b7d5f05ebfa5b6081d" translate="yes" xml:space="preserve">
          <source>UdpSocket::fmt</source>
          <target state="translated">UdpSocket::fmt</target>
        </trans-unit>
        <trans-unit id="6967c776a7bd3c84521bc241c391c1e849c635bd" translate="yes" xml:space="preserve">
          <source>UdpSocket::from</source>
          <target state="translated">UdpSocket::from</target>
        </trans-unit>
        <trans-unit id="bb5a7c0a1436e4ab18aa912a9f605f7b18ee8765" translate="yes" xml:space="preserve">
          <source>UdpSocket::from_raw_fd</source>
          <target state="translated">UdpSocket::from_raw_fd</target>
        </trans-unit>
        <trans-unit id="f80335b07809af571cc3df35b472a55569fb682a" translate="yes" xml:space="preserve">
          <source>UdpSocket::from_raw_socket</source>
          <target state="translated">UdpSocket::from_raw_socket</target>
        </trans-unit>
        <trans-unit id="9027e17e6ff5173579151cfa12fc5dbe9441694f" translate="yes" xml:space="preserve">
          <source>UdpSocket::into</source>
          <target state="translated">UdpSocket::into</target>
        </trans-unit>
        <trans-unit id="a803dafad8d15d21084fc92907391bd1b059ddfd" translate="yes" xml:space="preserve">
          <source>UdpSocket::into_raw_fd</source>
          <target state="translated">UdpSocket::into_raw_fd</target>
        </trans-unit>
        <trans-unit id="9cf9f423f72726c7578e2b5f5e2920796c1f2793" translate="yes" xml:space="preserve">
          <source>UdpSocket::into_raw_socket</source>
          <target state="translated">UdpSocket::into_raw_socket</target>
        </trans-unit>
        <trans-unit id="3f8673b9aaf4671a169334c3798e42c1cef61195" translate="yes" xml:space="preserve">
          <source>UdpSocket::join_multicast_v4</source>
          <target state="translated">UdpSocket::join_multicast_v4</target>
        </trans-unit>
        <trans-unit id="fdb0ef8819eb18c412a260ee8e4e9ed4c176ee44" translate="yes" xml:space="preserve">
          <source>UdpSocket::join_multicast_v6</source>
          <target state="translated">UdpSocket::join_multicast_v6</target>
        </trans-unit>
        <trans-unit id="daf0d0331de8a89e9e07829bd3f8f62b73e26c9f" translate="yes" xml:space="preserve">
          <source>UdpSocket::leave_multicast_v4</source>
          <target state="translated">UdpSocket::leave_multicast_v4</target>
        </trans-unit>
        <trans-unit id="19e7ef348410341be9e9f87a0c453576eeabf4f2" translate="yes" xml:space="preserve">
          <source>UdpSocket::leave_multicast_v6</source>
          <target state="translated">UdpSocket::leave_multicast_v6</target>
        </trans-unit>
        <trans-unit id="4541378b6e55fa1b6ff0ecd59a93caf5944114ce" translate="yes" xml:space="preserve">
          <source>UdpSocket::local_addr</source>
          <target state="translated">UdpSocket::local_addr</target>
        </trans-unit>
        <trans-unit id="e1d4fbc9e9ee16f13b25d7e15d3094bef922be02" translate="yes" xml:space="preserve">
          <source>UdpSocket::multicast_loop_v4</source>
          <target state="translated">UdpSocket::multicast_loop_v4</target>
        </trans-unit>
        <trans-unit id="47fea5b479b31e88d1e71ca6bcfb3bb1110ffa70" translate="yes" xml:space="preserve">
          <source>UdpSocket::multicast_loop_v6</source>
          <target state="translated">UdpSocket::multicast_loop_v6</target>
        </trans-unit>
        <trans-unit id="af0afd1673286058b665d369d31b395392204948" translate="yes" xml:space="preserve">
          <source>UdpSocket::multicast_ttl_v4</source>
          <target state="translated">UdpSocket::multicast_ttl_v4</target>
        </trans-unit>
        <trans-unit id="7ea92dd593f0d5cfd6700064620321c00b369e37" translate="yes" xml:space="preserve">
          <source>UdpSocket::peek</source>
          <target state="translated">UdpSocket::peek</target>
        </trans-unit>
        <trans-unit id="618b3359f531c1676b89a79683f9f10d7d9e63d6" translate="yes" xml:space="preserve">
          <source>UdpSocket::peek_from</source>
          <target state="translated">UdpSocket::peek_from</target>
        </trans-unit>
        <trans-unit id="ed605d1f943615e31a607bcc21bab5caa4744d32" translate="yes" xml:space="preserve">
          <source>UdpSocket::peer_addr</source>
          <target state="translated">UdpSocket::peer_addr</target>
        </trans-unit>
        <trans-unit id="e623079f9fa431b1604c2d3e586552e0f51cec43" translate="yes" xml:space="preserve">
          <source>UdpSocket::read_timeout</source>
          <target state="translated">UdpSocket::read_timeout</target>
        </trans-unit>
        <trans-unit id="117a240778e6d7c73d9190f8661f261267ed1dce" translate="yes" xml:space="preserve">
          <source>UdpSocket::recv</source>
          <target state="translated">UdpSocket::recv</target>
        </trans-unit>
        <trans-unit id="6b5d35c54deb341c259817d88dd2d0d29fec7a61" translate="yes" xml:space="preserve">
          <source>UdpSocket::recv_from</source>
          <target state="translated">UdpSocket::recv_from</target>
        </trans-unit>
        <trans-unit id="342543bea1d10360d53cdb0e77dc5cb9afda6331" translate="yes" xml:space="preserve">
          <source>UdpSocket::send</source>
          <target state="translated">UdpSocket::send</target>
        </trans-unit>
        <trans-unit id="22d3f7e464f346e514fa3986fce3b3f1e2571e5b" translate="yes" xml:space="preserve">
          <source>UdpSocket::send_to</source>
          <target state="translated">UdpSocket::send_to</target>
        </trans-unit>
        <trans-unit id="9e2a55f7f7b4b48356483d8d2fb5b602fa0f3530" translate="yes" xml:space="preserve">
          <source>UdpSocket::set_broadcast</source>
          <target state="translated">UdpSocket::set_broadcast</target>
        </trans-unit>
        <trans-unit id="3f47efd4587a1a296613dd09d826c04823707540" translate="yes" xml:space="preserve">
          <source>UdpSocket::set_multicast_loop_v4</source>
          <target state="translated">UdpSocket::set_multicast_loop_v4</target>
        </trans-unit>
        <trans-unit id="e20ba27d970b370c3419b1aeb14d08d71bc56a8c" translate="yes" xml:space="preserve">
          <source>UdpSocket::set_multicast_loop_v6</source>
          <target state="translated">UdpSocket::set_multicast_loop_v6</target>
        </trans-unit>
        <trans-unit id="9cd522d20aa030dbf9138752a7e810a44b5efb38" translate="yes" xml:space="preserve">
          <source>UdpSocket::set_multicast_ttl_v4</source>
          <target state="translated">UdpSocket::set_multicast_ttl_v4</target>
        </trans-unit>
        <trans-unit id="03074d339b260baa1ad044577238a1336825ab4b" translate="yes" xml:space="preserve">
          <source>UdpSocket::set_nonblocking</source>
          <target state="translated">UdpSocket::set_nonblocking</target>
        </trans-unit>
        <trans-unit id="d915caa0f42d8eb7576e0424ad1fb96ff110018c" translate="yes" xml:space="preserve">
          <source>UdpSocket::set_read_timeout</source>
          <target state="translated">UdpSocket::set_read_timeout</target>
        </trans-unit>
        <trans-unit id="00311ef46c51fae7556414d73e84c73f1d7812ff" translate="yes" xml:space="preserve">
          <source>UdpSocket::set_ttl</source>
          <target state="translated">UdpSocket::set_ttl</target>
        </trans-unit>
        <trans-unit id="febfbd7ca83810329de07b88d8fb3393c6ca4798" translate="yes" xml:space="preserve">
          <source>UdpSocket::set_write_timeout</source>
          <target state="translated">UdpSocket::set_write_timeout</target>
        </trans-unit>
        <trans-unit id="9d7c771c5a45977006ca3dfa60a86af6dd8ee823" translate="yes" xml:space="preserve">
          <source>UdpSocket::take_error</source>
          <target state="translated">UdpSocket::take_error</target>
        </trans-unit>
        <trans-unit id="9f4ec7ded42c7be9420f00ecf5a43baac427f3a2" translate="yes" xml:space="preserve">
          <source>UdpSocket::try_clone</source>
          <target state="translated">UdpSocket::try_clone</target>
        </trans-unit>
        <trans-unit id="124c70e6a48a5f998f83b2f8f60af01be757111c" translate="yes" xml:space="preserve">
          <source>UdpSocket::try_from</source>
          <target state="translated">UdpSocket::try_from</target>
        </trans-unit>
        <trans-unit id="419d8221e876e08ccc71dcef9e30956e6a2336ce" translate="yes" xml:space="preserve">
          <source>UdpSocket::try_into</source>
          <target state="translated">UdpSocket::try_into</target>
        </trans-unit>
        <trans-unit id="179be00cc6604f24b28a0eaa033c371e9b537141" translate="yes" xml:space="preserve">
          <source>UdpSocket::ttl</source>
          <target state="translated">UdpSocket::ttl</target>
        </trans-unit>
        <trans-unit id="2e57927ff8f0f2d0d53c88f359b91dce0a9fac1a" translate="yes" xml:space="preserve">
          <source>UdpSocket::type_id</source>
          <target state="translated">UdpSocket::type_id</target>
        </trans-unit>
        <trans-unit id="6e4a0fe28e49c9f074eb8b5bf8aa033213c911d5" translate="yes" xml:space="preserve">
          <source>UdpSocket::write_timeout</source>
          <target state="translated">UdpSocket::write_timeout</target>
        </trans-unit>
        <trans-unit id="ad739a773605a26e0e278e2e21fb10279a5b2fe3" translate="yes" xml:space="preserve">
          <source>Ultimately, lifetime syntax is about connecting the lifetimes of various parameters and return values of functions. Once they&amp;rsquo;re connected, Rust has enough information to allow memory-safe operations and disallow operations that would create dangling pointers or otherwise violate memory safety.</source>
          <target state="translated">最終的に、寿命の構文とは、さまざまなパラメーターの寿命と関数の戻り値を接続することです。それらが接続されると、Rustは、メモリセーフな操作を許可し、ダングリングポインターを作成するか、そうでなければメモリの安全性に違反する操作を禁止するのに十分な情報を持っています。</target>
        </trans-unit>
        <trans-unit id="4eb578990ad7468d516f19c1a212e616f769fb7d" translate="yes" xml:space="preserve">
          <source>Ultimately, we want to convert the &lt;code&gt;String&lt;/code&gt; the program reads as input into a real number type so we can compare it numerically to the secret number. We can do that by adding another line to the &lt;code&gt;main&lt;/code&gt; function body:</source>
          <target state="translated">最終的には、プログラムが入力として読み取る &lt;code&gt;String&lt;/code&gt; 実数型に変換して、秘密の数値と数値的に比較できるようにします。これを行うには、 &lt;code&gt;main&lt;/code&gt; 関数本体に別の行を追加します。</target>
        </trans-unit>
        <trans-unit id="4c83e690d015c2dda5615d91434e066248316e35" translate="yes" xml:space="preserve">
          <source>Ultimately, we want to convert the &lt;code&gt;String&lt;/code&gt; the program reads as input into a real number type so we can compare it numerically to the secret number. We can do that by adding the following two lines to the &lt;code&gt;main&lt;/code&gt; function body:</source>
          <target state="translated">最終的に、プログラムが入力として読み取る &lt;code&gt;String&lt;/code&gt; 実数型に変換して、数値と秘密の数値を比較できるようにします。これを行うには、 &lt;code&gt;main&lt;/code&gt; 関数本体に次の2行を追加します。</target>
        </trans-unit>
        <trans-unit id="f65abf2396d9d0e3036b5edd214ba0117f22347c" translate="yes" xml:space="preserve">
          <source>Unaligned pointer reading and writing outside of &lt;a href=&quot;../std/ptr/fn.read_unaligned&quot;&gt;&lt;code&gt;read_unaligned&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../std/ptr/fn.write_unaligned&quot;&gt;&lt;code&gt;write_unaligned&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">read_unaligned および&lt;a href=&quot;../std/ptr/fn.write_unaligned&quot;&gt; &lt;code&gt;write_unaligned&lt;/code&gt; の&lt;/a&gt;外部での&lt;a href=&quot;../std/ptr/fn.read_unaligned&quot;&gt; &lt;code&gt;read_unaligned&lt;/code&gt; &lt;/a&gt;整列ポインターの読み取りおよび書き込み。</target>
        </trans-unit>
        <trans-unit id="7e740f17c2c4678005ceef9e2ecf547507892500" translate="yes" xml:space="preserve">
          <source>Unaligned values cannot be dropped in place, they must be copied to an aligned location first using &lt;a href=&quot;../ptr/fn.read_unaligned&quot;&gt;&lt;code&gt;ptr::read_unaligned&lt;/code&gt;&lt;/a&gt;. For packed structs, this move is done automatically by the compiler. This means the fields of packed structs are not dropped in-place.</source>
          <target state="translated">整列されていない値はその場にドロップできません。最初に&lt;a href=&quot;../ptr/fn.read_unaligned&quot;&gt; &lt;code&gt;ptr::read_unaligned&lt;/code&gt; &lt;/a&gt;を使用して整列された場所にコピーする必要があります。パックされた構造体の場合、この移動はコンパイラーによって自動的に行われます。これは、パックされた構造体のフィールドがインプレースにドロップされないことを意味します。</target>
        </trans-unit>
        <trans-unit id="de8646776b21ba1fa4fa08017bad8f9f8fd98a56" translate="yes" xml:space="preserve">
          <source>Unaligned values cannot be dropped in place, they must be copied to an aligned location first using &lt;a href=&quot;fn.read_unaligned&quot;&gt;&lt;code&gt;ptr::read_unaligned&lt;/code&gt;&lt;/a&gt;. For packed structs, this move is done automatically by the compiler. This means the fields of packed structs are not dropped in-place.</source>
          <target state="translated">整列されていない値はその場にドロップできません。最初に&lt;a href=&quot;fn.read_unaligned&quot;&gt; &lt;code&gt;ptr::read_unaligned&lt;/code&gt; &lt;/a&gt;を使用して整列された場所にコピーする必要があります。パックされた構造体の場合、この移動はコンパイラーによって自動的に行われます。これは、パックされた構造体のフィールドがインプレースにドロップされないことを意味します。</target>
        </trans-unit>
        <trans-unit id="a19c02a20defb4e5a19ad20ddc9f198b595912c2" translate="yes" xml:space="preserve">
          <source>Unaligned values cannot be dropped in place, they must be copied to an aligned location first:</source>
          <target state="translated">アラインメントされていない値をその場でドロップすることはできませんので、最初にアラインメントされた場所にコピーする必要があります。</target>
        </trans-unit>
        <trans-unit id="06561b17b729c80e40714208c692221607fb499c" translate="yes" xml:space="preserve">
          <source>Unary &lt;code&gt;-&lt;/code&gt;&lt;code&gt;*&lt;/code&gt;&lt;code&gt;!&lt;/code&gt;&lt;code&gt;&amp;amp;&lt;/code&gt;&lt;code&gt;&amp;amp;mut&lt;/code&gt;</source>
          <target state="translated">単項 &lt;code&gt;-&lt;/code&gt; &lt;code&gt;*&lt;/code&gt; &lt;code&gt;!&lt;/code&gt; &lt;code&gt;&amp;amp;&lt;/code&gt; &lt;code&gt;&amp;amp;mut&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="eaeaaeab2b8c39fed19b6ad2f8f02ca13156250d" translate="yes" xml:space="preserve">
          <source>Unchecked integer addition. Computes &lt;code&gt;self + rhs&lt;/code&gt;, assuming overflow cannot occur. This results in undefined behavior when &lt;code&gt;self + rhs &amp;gt; i128::MAX&lt;/code&gt; or &lt;code&gt;self + rhs &amp;lt; i128::MIN&lt;/code&gt;.</source>
          <target state="translated">チェックされていない整数の加算。オーバーフローが発生しないと仮定して、 &lt;code&gt;self + rhs&lt;/code&gt; 計算します。これにより、 &lt;code&gt;self + rhs &amp;gt; i128::MAX&lt;/code&gt; または &lt;code&gt;self + rhs &amp;lt; i128::MIN&lt;/code&gt; 場合、未定義の動作が発生します。</target>
        </trans-unit>
        <trans-unit id="bf60089baa8e1b12ead76beae70eb523584bfcff" translate="yes" xml:space="preserve">
          <source>Unchecked integer addition. Computes &lt;code&gt;self + rhs&lt;/code&gt;, assuming overflow cannot occur. This results in undefined behavior when &lt;code&gt;self + rhs &amp;gt; i16::MAX&lt;/code&gt; or &lt;code&gt;self + rhs &amp;lt; i16::MIN&lt;/code&gt;.</source>
          <target state="translated">チェックされていない整数の加算。オーバーフローが発生しないと仮定して、 &lt;code&gt;self + rhs&lt;/code&gt; 計算します。これにより、 &lt;code&gt;self + rhs &amp;gt; i16::MAX&lt;/code&gt; または &lt;code&gt;self + rhs &amp;lt; i16::MIN&lt;/code&gt; 場合、未定義の動作が発生します。</target>
        </trans-unit>
        <trans-unit id="57d2d3f2c8b1f0f83b5c8311b2489a069d73a68e" translate="yes" xml:space="preserve">
          <source>Unchecked integer addition. Computes &lt;code&gt;self + rhs&lt;/code&gt;, assuming overflow cannot occur. This results in undefined behavior when &lt;code&gt;self + rhs &amp;gt; i32::MAX&lt;/code&gt; or &lt;code&gt;self + rhs &amp;lt; i32::MIN&lt;/code&gt;.</source>
          <target state="translated">チェックされていない整数の加算。オーバーフローが発生しないと仮定して、 &lt;code&gt;self + rhs&lt;/code&gt; 計算します。これにより、 &lt;code&gt;self + rhs &amp;gt; i32::MAX&lt;/code&gt; または &lt;code&gt;self + rhs &amp;lt; i32::MIN&lt;/code&gt; 場合、未定義の動作が発生します。</target>
        </trans-unit>
        <trans-unit id="04a73576177ebee5f439e851247328471bb0c25a" translate="yes" xml:space="preserve">
          <source>Unchecked integer addition. Computes &lt;code&gt;self + rhs&lt;/code&gt;, assuming overflow cannot occur. This results in undefined behavior when &lt;code&gt;self + rhs &amp;gt; i64::MAX&lt;/code&gt; or &lt;code&gt;self + rhs &amp;lt; i64::MIN&lt;/code&gt;.</source>
          <target state="translated">チェックされていない整数の加算。オーバーフローが発生しないと仮定して、 &lt;code&gt;self + rhs&lt;/code&gt; 計算します。これにより、 &lt;code&gt;self + rhs &amp;gt; i64::MAX&lt;/code&gt; または &lt;code&gt;self + rhs &amp;lt; i64::MIN&lt;/code&gt; 場合、未定義の動作が発生します。</target>
        </trans-unit>
        <trans-unit id="98456ae98d27b023cd6297deba77970fa8fe5737" translate="yes" xml:space="preserve">
          <source>Unchecked integer addition. Computes &lt;code&gt;self + rhs&lt;/code&gt;, assuming overflow cannot occur. This results in undefined behavior when &lt;code&gt;self + rhs &amp;gt; i8::MAX&lt;/code&gt; or &lt;code&gt;self + rhs &amp;lt; i8::MIN&lt;/code&gt;.</source>
          <target state="translated">チェックされていない整数の加算。オーバーフローが発生しないと仮定して、 &lt;code&gt;self + rhs&lt;/code&gt; 計算します。これにより、 &lt;code&gt;self + rhs &amp;gt; i8::MAX&lt;/code&gt; または &lt;code&gt;self + rhs &amp;lt; i8::MIN&lt;/code&gt; 場合、未定義の動作が発生します。</target>
        </trans-unit>
        <trans-unit id="181cfbbcfa7badb7116e737475005644ef4b02af" translate="yes" xml:space="preserve">
          <source>Unchecked integer addition. Computes &lt;code&gt;self + rhs&lt;/code&gt;, assuming overflow cannot occur. This results in undefined behavior when &lt;code&gt;self + rhs &amp;gt; isize::MAX&lt;/code&gt; or &lt;code&gt;self + rhs &amp;lt; isize::MIN&lt;/code&gt;.</source>
          <target state="translated">チェックされていない整数の加算。オーバーフローが発生しないと仮定して、 &lt;code&gt;self + rhs&lt;/code&gt; 計算します。これにより、 &lt;code&gt;self + rhs &amp;gt; isize::MAX&lt;/code&gt; または &lt;code&gt;self + rhs &amp;lt; isize::MIN&lt;/code&gt; 場合、未定義の動作が発生します。</target>
        </trans-unit>
        <trans-unit id="6e7dffee5ddf31f6bb308589f3d1034539c1ed44" translate="yes" xml:space="preserve">
          <source>Unchecked integer addition. Computes &lt;code&gt;self + rhs&lt;/code&gt;, assuming overflow cannot occur. This results in undefined behavior when &lt;code&gt;self + rhs &amp;gt; u128::MAX&lt;/code&gt; or &lt;code&gt;self + rhs &amp;lt; u128::MIN&lt;/code&gt;.</source>
          <target state="translated">チェックされていない整数の加算。オーバーフローが発生しないと仮定して、 &lt;code&gt;self + rhs&lt;/code&gt; 計算します。これにより、 &lt;code&gt;self + rhs &amp;gt; u128::MAX&lt;/code&gt; または &lt;code&gt;self + rhs &amp;lt; u128::MIN&lt;/code&gt; 場合、未定義の動作が発生します。</target>
        </trans-unit>
        <trans-unit id="f17243b2da1ec0e37d5c613451d7b628005e7af8" translate="yes" xml:space="preserve">
          <source>Unchecked integer addition. Computes &lt;code&gt;self + rhs&lt;/code&gt;, assuming overflow cannot occur. This results in undefined behavior when &lt;code&gt;self + rhs &amp;gt; u16::MAX&lt;/code&gt; or &lt;code&gt;self + rhs &amp;lt; u16::MIN&lt;/code&gt;.</source>
          <target state="translated">チェックされていない整数の加算。オーバーフローが発生しないと仮定して、 &lt;code&gt;self + rhs&lt;/code&gt; 計算します。これにより、 &lt;code&gt;self + rhs &amp;gt; u16::MAX&lt;/code&gt; または &lt;code&gt;self + rhs &amp;lt; u16::MIN&lt;/code&gt; 場合、未定義の動作が発生します。</target>
        </trans-unit>
        <trans-unit id="e8a542644a4285f9d7b2a44c5f2775b79db39a7b" translate="yes" xml:space="preserve">
          <source>Unchecked integer addition. Computes &lt;code&gt;self + rhs&lt;/code&gt;, assuming overflow cannot occur. This results in undefined behavior when &lt;code&gt;self + rhs &amp;gt; u32::MAX&lt;/code&gt; or &lt;code&gt;self + rhs &amp;lt; u32::MIN&lt;/code&gt;.</source>
          <target state="translated">チェックされていない整数の加算。オーバーフローが発生しないと仮定して、 &lt;code&gt;self + rhs&lt;/code&gt; 計算します。これにより、 &lt;code&gt;self + rhs &amp;gt; u32::MAX&lt;/code&gt; または &lt;code&gt;self + rhs &amp;lt; u32::MIN&lt;/code&gt; 場合、未定義の動作が発生します。</target>
        </trans-unit>
        <trans-unit id="bae0a8aba40c37aa489fd12e7bd803aa59ab9b06" translate="yes" xml:space="preserve">
          <source>Unchecked integer addition. Computes &lt;code&gt;self + rhs&lt;/code&gt;, assuming overflow cannot occur. This results in undefined behavior when &lt;code&gt;self + rhs &amp;gt; u64::MAX&lt;/code&gt; or &lt;code&gt;self + rhs &amp;lt; u64::MIN&lt;/code&gt;.</source>
          <target state="translated">チェックされていない整数の加算。オーバーフローが発生しないと仮定して、 &lt;code&gt;self + rhs&lt;/code&gt; 計算します。これにより、 &lt;code&gt;self + rhs &amp;gt; u64::MAX&lt;/code&gt; または &lt;code&gt;self + rhs &amp;lt; u64::MIN&lt;/code&gt; 場合、未定義の動作が発生します。</target>
        </trans-unit>
        <trans-unit id="217823d7931de445dbac4c7c600ba231f5d01a32" translate="yes" xml:space="preserve">
          <source>Unchecked integer addition. Computes &lt;code&gt;self + rhs&lt;/code&gt;, assuming overflow cannot occur. This results in undefined behavior when &lt;code&gt;self + rhs &amp;gt; u8::MAX&lt;/code&gt; or &lt;code&gt;self + rhs &amp;lt; u8::MIN&lt;/code&gt;.</source>
          <target state="translated">チェックされていない整数の加算。オーバーフローが発生しないと仮定して、 &lt;code&gt;self + rhs&lt;/code&gt; 計算します。これにより、 &lt;code&gt;self + rhs &amp;gt; u8::MAX&lt;/code&gt; または &lt;code&gt;self + rhs &amp;lt; u8::MIN&lt;/code&gt; 場合、未定義の動作が発生します。</target>
        </trans-unit>
        <trans-unit id="3784f542c08995d9da31ec918116bee7959049c6" translate="yes" xml:space="preserve">
          <source>Unchecked integer addition. Computes &lt;code&gt;self + rhs&lt;/code&gt;, assuming overflow cannot occur. This results in undefined behavior when &lt;code&gt;self + rhs &amp;gt; usize::MAX&lt;/code&gt; or &lt;code&gt;self + rhs &amp;lt; usize::MIN&lt;/code&gt;.</source>
          <target state="translated">チェックされていない整数の加算。オーバーフローが発生しないと仮定して、 &lt;code&gt;self + rhs&lt;/code&gt; 計算します。これにより、 &lt;code&gt;self + rhs &amp;gt; usize::MAX&lt;/code&gt; または &lt;code&gt;self + rhs &amp;lt; usize::MIN&lt;/code&gt; 場合、未定義の動作が発生します。</target>
        </trans-unit>
        <trans-unit id="e46989e35b2cb886206f7735df0231524fbe7ccd" translate="yes" xml:space="preserve">
          <source>Unchecked integer multiplication. Computes &lt;code&gt;self * rhs&lt;/code&gt;, assuming overflow cannot occur. This results in undefined behavior when &lt;code&gt;self * rhs &amp;gt; i128::MAX&lt;/code&gt; or &lt;code&gt;self * rhs &amp;lt; i128::MIN&lt;/code&gt;.</source>
          <target state="translated">チェックされていない整数の乗算。オーバーフローが発生しないと仮定して、 &lt;code&gt;self * rhs&lt;/code&gt; 計算します。これにより、 &lt;code&gt;self * rhs &amp;gt; i128::MAX&lt;/code&gt; または &lt;code&gt;self * rhs &amp;lt; i128::MIN&lt;/code&gt; 場合、未定義の動作が発生します。</target>
        </trans-unit>
        <trans-unit id="e25f8da52dbbff157dca4617b3f1a59b2bfc36a7" translate="yes" xml:space="preserve">
          <source>Unchecked integer multiplication. Computes &lt;code&gt;self * rhs&lt;/code&gt;, assuming overflow cannot occur. This results in undefined behavior when &lt;code&gt;self * rhs &amp;gt; i16::MAX&lt;/code&gt; or &lt;code&gt;self * rhs &amp;lt; i16::MIN&lt;/code&gt;.</source>
          <target state="translated">チェックされていない整数の乗算。オーバーフローが発生しないと仮定して、 &lt;code&gt;self * rhs&lt;/code&gt; 計算します。これにより、 &lt;code&gt;self * rhs &amp;gt; i16::MAX&lt;/code&gt; または &lt;code&gt;self * rhs &amp;lt; i16::MIN&lt;/code&gt; 場合、未定義の動作が発生します。</target>
        </trans-unit>
        <trans-unit id="35f739b4aaf5e35f8f41b2fc34c5c1af364fd56e" translate="yes" xml:space="preserve">
          <source>Unchecked integer multiplication. Computes &lt;code&gt;self * rhs&lt;/code&gt;, assuming overflow cannot occur. This results in undefined behavior when &lt;code&gt;self * rhs &amp;gt; i32::MAX&lt;/code&gt; or &lt;code&gt;self * rhs &amp;lt; i32::MIN&lt;/code&gt;.</source>
          <target state="translated">チェックされていない整数の乗算。オーバーフローが発生しないと仮定して、 &lt;code&gt;self * rhs&lt;/code&gt; 計算します。これにより、 &lt;code&gt;self * rhs &amp;gt; i32::MAX&lt;/code&gt; または &lt;code&gt;self * rhs &amp;lt; i32::MIN&lt;/code&gt; 場合、未定義の動作が発生します。</target>
        </trans-unit>
        <trans-unit id="68857c1be152e69874bd8a3d7df9e0082927641b" translate="yes" xml:space="preserve">
          <source>Unchecked integer multiplication. Computes &lt;code&gt;self * rhs&lt;/code&gt;, assuming overflow cannot occur. This results in undefined behavior when &lt;code&gt;self * rhs &amp;gt; i64::MAX&lt;/code&gt; or &lt;code&gt;self * rhs &amp;lt; i64::MIN&lt;/code&gt;.</source>
          <target state="translated">チェックされていない整数の乗算。オーバーフローが発生しないと仮定して、 &lt;code&gt;self * rhs&lt;/code&gt; 計算します。これにより、 &lt;code&gt;self * rhs &amp;gt; i64::MAX&lt;/code&gt; または &lt;code&gt;self * rhs &amp;lt; i64::MIN&lt;/code&gt; 場合、未定義の動作が発生します。</target>
        </trans-unit>
        <trans-unit id="43ba5e2f667a70448c2bc30e68127889e33fbcb0" translate="yes" xml:space="preserve">
          <source>Unchecked integer multiplication. Computes &lt;code&gt;self * rhs&lt;/code&gt;, assuming overflow cannot occur. This results in undefined behavior when &lt;code&gt;self * rhs &amp;gt; i8::MAX&lt;/code&gt; or &lt;code&gt;self * rhs &amp;lt; i8::MIN&lt;/code&gt;.</source>
          <target state="translated">チェックされていない整数の乗算。オーバーフローが発生しないと仮定して、 &lt;code&gt;self * rhs&lt;/code&gt; 計算します。これにより、 &lt;code&gt;self * rhs &amp;gt; i8::MAX&lt;/code&gt; または &lt;code&gt;self * rhs &amp;lt; i8::MIN&lt;/code&gt; 場合、未定義の動作が発生します。</target>
        </trans-unit>
        <trans-unit id="2d8ea5bd84cde0d4b308a1762db7027c570a55b6" translate="yes" xml:space="preserve">
          <source>Unchecked integer multiplication. Computes &lt;code&gt;self * rhs&lt;/code&gt;, assuming overflow cannot occur. This results in undefined behavior when &lt;code&gt;self * rhs &amp;gt; isize::MAX&lt;/code&gt; or &lt;code&gt;self * rhs &amp;lt; isize::MIN&lt;/code&gt;.</source>
          <target state="translated">チェックされていない整数の乗算。オーバーフローが発生しないと仮定して、 &lt;code&gt;self * rhs&lt;/code&gt; 計算します。これにより、 &lt;code&gt;self * rhs &amp;gt; isize::MAX&lt;/code&gt; または &lt;code&gt;self * rhs &amp;lt; isize::MIN&lt;/code&gt; 場合、未定義の動作が発生します。</target>
        </trans-unit>
        <trans-unit id="b9ddf676d896b37ebffa48cd9f6ff3ee28c7f039" translate="yes" xml:space="preserve">
          <source>Unchecked integer multiplication. Computes &lt;code&gt;self * rhs&lt;/code&gt;, assuming overflow cannot occur. This results in undefined behavior when &lt;code&gt;self * rhs &amp;gt; u128::MAX&lt;/code&gt; or &lt;code&gt;self * rhs &amp;lt; u128::MIN&lt;/code&gt;.</source>
          <target state="translated">チェックされていない整数の乗算。オーバーフローが発生しないと仮定して、 &lt;code&gt;self * rhs&lt;/code&gt; 計算します。これにより、 &lt;code&gt;self * rhs &amp;gt; u128::MAX&lt;/code&gt; または &lt;code&gt;self * rhs &amp;lt; u128::MIN&lt;/code&gt; 場合、未定義の動作が発生します。</target>
        </trans-unit>
        <trans-unit id="a3bb62e69c1601ccfe0ef959e2a876a22790ef04" translate="yes" xml:space="preserve">
          <source>Unchecked integer multiplication. Computes &lt;code&gt;self * rhs&lt;/code&gt;, assuming overflow cannot occur. This results in undefined behavior when &lt;code&gt;self * rhs &amp;gt; u16::MAX&lt;/code&gt; or &lt;code&gt;self * rhs &amp;lt; u16::MIN&lt;/code&gt;.</source>
          <target state="translated">チェックされていない整数の乗算。オーバーフローが発生しないと仮定して、 &lt;code&gt;self * rhs&lt;/code&gt; 計算します。これにより、 &lt;code&gt;self * rhs &amp;gt; u16::MAX&lt;/code&gt; または &lt;code&gt;self * rhs &amp;lt; u16::MIN&lt;/code&gt; 場合、未定義の動作が発生します。</target>
        </trans-unit>
        <trans-unit id="e65b8aaadedff35c0a62f7a135254f90f4ccab0a" translate="yes" xml:space="preserve">
          <source>Unchecked integer multiplication. Computes &lt;code&gt;self * rhs&lt;/code&gt;, assuming overflow cannot occur. This results in undefined behavior when &lt;code&gt;self * rhs &amp;gt; u32::MAX&lt;/code&gt; or &lt;code&gt;self * rhs &amp;lt; u32::MIN&lt;/code&gt;.</source>
          <target state="translated">チェックされていない整数の乗算。オーバーフローが発生しないと仮定して、 &lt;code&gt;self * rhs&lt;/code&gt; 計算します。これにより、 &lt;code&gt;self * rhs &amp;gt; u32::MAX&lt;/code&gt; または &lt;code&gt;self * rhs &amp;lt; u32::MIN&lt;/code&gt; 場合、未定義の動作が発生します。</target>
        </trans-unit>
        <trans-unit id="111c8c208814caa52463838dcecbd292a0ff4bce" translate="yes" xml:space="preserve">
          <source>Unchecked integer multiplication. Computes &lt;code&gt;self * rhs&lt;/code&gt;, assuming overflow cannot occur. This results in undefined behavior when &lt;code&gt;self * rhs &amp;gt; u64::MAX&lt;/code&gt; or &lt;code&gt;self * rhs &amp;lt; u64::MIN&lt;/code&gt;.</source>
          <target state="translated">チェックされていない整数の乗算。オーバーフローが発生しないと仮定して、 &lt;code&gt;self * rhs&lt;/code&gt; 計算します。これにより、 &lt;code&gt;self * rhs &amp;gt; u64::MAX&lt;/code&gt; または &lt;code&gt;self * rhs &amp;lt; u64::MIN&lt;/code&gt; 場合、未定義の動作が発生します。</target>
        </trans-unit>
        <trans-unit id="fa225d3efab56513dbab5c9b4e8a9843ef6fdaf6" translate="yes" xml:space="preserve">
          <source>Unchecked integer multiplication. Computes &lt;code&gt;self * rhs&lt;/code&gt;, assuming overflow cannot occur. This results in undefined behavior when &lt;code&gt;self * rhs &amp;gt; u8::MAX&lt;/code&gt; or &lt;code&gt;self * rhs &amp;lt; u8::MIN&lt;/code&gt;.</source>
          <target state="translated">チェックされていない整数の乗算。オーバーフローが発生しないと仮定して、 &lt;code&gt;self * rhs&lt;/code&gt; 計算します。これにより、 &lt;code&gt;self * rhs &amp;gt; u8::MAX&lt;/code&gt; または &lt;code&gt;self * rhs &amp;lt; u8::MIN&lt;/code&gt; 場合、未定義の動作が発生します。</target>
        </trans-unit>
        <trans-unit id="357967f063fbfe8af622e52b6f92d48adbffb3ef" translate="yes" xml:space="preserve">
          <source>Unchecked integer multiplication. Computes &lt;code&gt;self * rhs&lt;/code&gt;, assuming overflow cannot occur. This results in undefined behavior when &lt;code&gt;self * rhs &amp;gt; usize::MAX&lt;/code&gt; or &lt;code&gt;self * rhs &amp;lt; usize::MIN&lt;/code&gt;.</source>
          <target state="translated">チェックされていない整数の乗算。オーバーフローが発生しないと仮定して、 &lt;code&gt;self * rhs&lt;/code&gt; 計算します。これにより、 &lt;code&gt;self * rhs &amp;gt; usize::MAX&lt;/code&gt; または &lt;code&gt;self * rhs &amp;lt; usize::MIN&lt;/code&gt; 場合、未定義の動作が発生します。</target>
        </trans-unit>
        <trans-unit id="fe8dd13c5dff45f9d9fade7c23010632d824bbc5" translate="yes" xml:space="preserve">
          <source>Unchecked integer subtraction. Computes &lt;code&gt;self - rhs&lt;/code&gt;, assuming overflow cannot occur. This results in undefined behavior when &lt;code&gt;self - rhs &amp;gt; i128::MAX&lt;/code&gt; or &lt;code&gt;self - rhs &amp;lt; i128::MIN&lt;/code&gt;.</source>
          <target state="translated">チェックされていない整数の減算。オーバーフローが発生しないと仮定して、 &lt;code&gt;self - rhs&lt;/code&gt; 計算します。これにより、 &lt;code&gt;self - rhs &amp;gt; i128::MAX&lt;/code&gt; または &lt;code&gt;self - rhs &amp;lt; i128::MIN&lt;/code&gt; 場合、未定義の動作が発生します。</target>
        </trans-unit>
        <trans-unit id="4f796122fc9def8df4649d0b2d125dd1cd6e291b" translate="yes" xml:space="preserve">
          <source>Unchecked integer subtraction. Computes &lt;code&gt;self - rhs&lt;/code&gt;, assuming overflow cannot occur. This results in undefined behavior when &lt;code&gt;self - rhs &amp;gt; i16::MAX&lt;/code&gt; or &lt;code&gt;self - rhs &amp;lt; i16::MIN&lt;/code&gt;.</source>
          <target state="translated">チェックされていない整数の減算。オーバーフローが発生しないと仮定して、 &lt;code&gt;self - rhs&lt;/code&gt; 計算します。これにより、 &lt;code&gt;self - rhs &amp;gt; i16::MAX&lt;/code&gt; または &lt;code&gt;self - rhs &amp;lt; i16::MIN&lt;/code&gt; 場合、未定義の動作が発生します。</target>
        </trans-unit>
        <trans-unit id="84c8864cef260c48a4e59f2b70d655fdf389430b" translate="yes" xml:space="preserve">
          <source>Unchecked integer subtraction. Computes &lt;code&gt;self - rhs&lt;/code&gt;, assuming overflow cannot occur. This results in undefined behavior when &lt;code&gt;self - rhs &amp;gt; i32::MAX&lt;/code&gt; or &lt;code&gt;self - rhs &amp;lt; i32::MIN&lt;/code&gt;.</source>
          <target state="translated">チェックされていない整数の減算。オーバーフローが発生しないと仮定して、 &lt;code&gt;self - rhs&lt;/code&gt; 計算します。これにより、 &lt;code&gt;self - rhs &amp;gt; i32::MAX&lt;/code&gt; または &lt;code&gt;self - rhs &amp;lt; i32::MIN&lt;/code&gt; 場合、未定義の動作が発生します。</target>
        </trans-unit>
        <trans-unit id="31a325f491fcfe3291d440373b764f580c3f0582" translate="yes" xml:space="preserve">
          <source>Unchecked integer subtraction. Computes &lt;code&gt;self - rhs&lt;/code&gt;, assuming overflow cannot occur. This results in undefined behavior when &lt;code&gt;self - rhs &amp;gt; i64::MAX&lt;/code&gt; or &lt;code&gt;self - rhs &amp;lt; i64::MIN&lt;/code&gt;.</source>
          <target state="translated">チェックされていない整数の減算。オーバーフローが発生しないと仮定して、 &lt;code&gt;self - rhs&lt;/code&gt; 計算します。これにより、 &lt;code&gt;self - rhs &amp;gt; i64::MAX&lt;/code&gt; または &lt;code&gt;self - rhs &amp;lt; i64::MIN&lt;/code&gt; 場合、未定義の動作が発生します。</target>
        </trans-unit>
        <trans-unit id="c6cd990380c2a0d5b9b2454a9569e6e2c5a42f96" translate="yes" xml:space="preserve">
          <source>Unchecked integer subtraction. Computes &lt;code&gt;self - rhs&lt;/code&gt;, assuming overflow cannot occur. This results in undefined behavior when &lt;code&gt;self - rhs &amp;gt; i8::MAX&lt;/code&gt; or &lt;code&gt;self - rhs &amp;lt; i8::MIN&lt;/code&gt;.</source>
          <target state="translated">チェックされていない整数の減算。オーバーフローが発生しないと仮定して、 &lt;code&gt;self - rhs&lt;/code&gt; 計算します。これにより、 &lt;code&gt;self - rhs &amp;gt; i8::MAX&lt;/code&gt; または &lt;code&gt;self - rhs &amp;lt; i8::MIN&lt;/code&gt; 場合、未定義の動作が発生します。</target>
        </trans-unit>
        <trans-unit id="af189c7306f2089208258aece688aaa4cbb8ac02" translate="yes" xml:space="preserve">
          <source>Unchecked integer subtraction. Computes &lt;code&gt;self - rhs&lt;/code&gt;, assuming overflow cannot occur. This results in undefined behavior when &lt;code&gt;self - rhs &amp;gt; isize::MAX&lt;/code&gt; or &lt;code&gt;self - rhs &amp;lt; isize::MIN&lt;/code&gt;.</source>
          <target state="translated">チェックされていない整数の減算。オーバーフローが発生しないと仮定して、 &lt;code&gt;self - rhs&lt;/code&gt; 計算します。これにより、 &lt;code&gt;self - rhs &amp;gt; isize::MAX&lt;/code&gt; または &lt;code&gt;self - rhs &amp;lt; isize::MIN&lt;/code&gt; 場合、未定義の動作が発生します。</target>
        </trans-unit>
        <trans-unit id="ba6ec2a37ff7eb25e8c786febab4ab98bbd27660" translate="yes" xml:space="preserve">
          <source>Unchecked integer subtraction. Computes &lt;code&gt;self - rhs&lt;/code&gt;, assuming overflow cannot occur. This results in undefined behavior when &lt;code&gt;self - rhs &amp;gt; u128::MAX&lt;/code&gt; or &lt;code&gt;self - rhs &amp;lt; u128::MIN&lt;/code&gt;.</source>
          <target state="translated">チェックされていない整数の減算。オーバーフローが発生しないと仮定して、 &lt;code&gt;self - rhs&lt;/code&gt; 計算します。これにより、 &lt;code&gt;self - rhs &amp;gt; u128::MAX&lt;/code&gt; または &lt;code&gt;self - rhs &amp;lt; u128::MIN&lt;/code&gt; 場合、未定義の動作が発生します。</target>
        </trans-unit>
        <trans-unit id="baacb800b9617663d503dd16c499fbf3c18d485b" translate="yes" xml:space="preserve">
          <source>Unchecked integer subtraction. Computes &lt;code&gt;self - rhs&lt;/code&gt;, assuming overflow cannot occur. This results in undefined behavior when &lt;code&gt;self - rhs &amp;gt; u16::MAX&lt;/code&gt; or &lt;code&gt;self - rhs &amp;lt; u16::MIN&lt;/code&gt;.</source>
          <target state="translated">チェックされていない整数の減算。オーバーフローが発生しないと仮定して、 &lt;code&gt;self - rhs&lt;/code&gt; 計算します。これにより、 &lt;code&gt;self - rhs &amp;gt; u16::MAX&lt;/code&gt; または &lt;code&gt;self - rhs &amp;lt; u16::MIN&lt;/code&gt; 場合、未定義の動作が発生します。</target>
        </trans-unit>
        <trans-unit id="026df7825e54c4d4d1564e862d070306e0b0ad6b" translate="yes" xml:space="preserve">
          <source>Unchecked integer subtraction. Computes &lt;code&gt;self - rhs&lt;/code&gt;, assuming overflow cannot occur. This results in undefined behavior when &lt;code&gt;self - rhs &amp;gt; u32::MAX&lt;/code&gt; or &lt;code&gt;self - rhs &amp;lt; u32::MIN&lt;/code&gt;.</source>
          <target state="translated">チェックされていない整数の減算。オーバーフローが発生しないと仮定して、 &lt;code&gt;self - rhs&lt;/code&gt; 計算します。これにより、 &lt;code&gt;self - rhs &amp;gt; u32::MAX&lt;/code&gt; または &lt;code&gt;self - rhs &amp;lt; u32::MIN&lt;/code&gt; 場合、未定義の動作が発生します。</target>
        </trans-unit>
        <trans-unit id="7acb45d177f4b13e2bbada8a1a7786dfd123ebb3" translate="yes" xml:space="preserve">
          <source>Unchecked integer subtraction. Computes &lt;code&gt;self - rhs&lt;/code&gt;, assuming overflow cannot occur. This results in undefined behavior when &lt;code&gt;self - rhs &amp;gt; u64::MAX&lt;/code&gt; or &lt;code&gt;self - rhs &amp;lt; u64::MIN&lt;/code&gt;.</source>
          <target state="translated">チェックされていない整数の減算。オーバーフローが発生しないと仮定して、 &lt;code&gt;self - rhs&lt;/code&gt; 計算します。これにより、 &lt;code&gt;self - rhs &amp;gt; u64::MAX&lt;/code&gt; または &lt;code&gt;self - rhs &amp;lt; u64::MIN&lt;/code&gt; 場合、未定義の動作が発生します。</target>
        </trans-unit>
        <trans-unit id="474d17a8d47d3b421384881d2bc565471dac82d4" translate="yes" xml:space="preserve">
          <source>Unchecked integer subtraction. Computes &lt;code&gt;self - rhs&lt;/code&gt;, assuming overflow cannot occur. This results in undefined behavior when &lt;code&gt;self - rhs &amp;gt; u8::MAX&lt;/code&gt; or &lt;code&gt;self - rhs &amp;lt; u8::MIN&lt;/code&gt;.</source>
          <target state="translated">チェックされていない整数の減算。オーバーフローが発生しないと仮定して、 &lt;code&gt;self - rhs&lt;/code&gt; 計算します。これにより、 &lt;code&gt;self - rhs &amp;gt; u8::MAX&lt;/code&gt; または &lt;code&gt;self - rhs &amp;lt; u8::MIN&lt;/code&gt; 場合、未定義の動作が発生します。</target>
        </trans-unit>
        <trans-unit id="f27d966c87f4516cf43f8b199f1a37517f69d9bb" translate="yes" xml:space="preserve">
          <source>Unchecked integer subtraction. Computes &lt;code&gt;self - rhs&lt;/code&gt;, assuming overflow cannot occur. This results in undefined behavior when &lt;code&gt;self - rhs &amp;gt; usize::MAX&lt;/code&gt; or &lt;code&gt;self - rhs &amp;lt; usize::MIN&lt;/code&gt;.</source>
          <target state="translated">チェックされていない整数の減算。オーバーフローが発生しないと仮定して、 &lt;code&gt;self - rhs&lt;/code&gt; 計算します。これにより、 &lt;code&gt;self - rhs &amp;gt; usize::MAX&lt;/code&gt; または &lt;code&gt;self - rhs &amp;lt; usize::MIN&lt;/code&gt; 場合、未定義の動作が発生します。</target>
        </trans-unit>
        <trans-unit id="1c9a7a4592fa01f0c87a973312a3417b3c758e1e" translate="yes" xml:space="preserve">
          <source>Uncovered type</source>
          <target state="translated">アンカバータイプ</target>
        </trans-unit>
        <trans-unit id="ebb35fed37a359f87ca6b9131bfd7b210eb81cd6" translate="yes" xml:space="preserve">
          <source>Undefined behavior</source>
          <target state="translated">未定義の動作</target>
        </trans-unit>
        <trans-unit id="370c58f039e07727be3fca997e7473eb72b353e5" translate="yes" xml:space="preserve">
          <source>Under the &lt;a href=&quot;../type-layout#the-default-representation&quot;&gt;default representation&lt;/a&gt;, the specified discriminant is interpreted as an &lt;code&gt;isize&lt;/code&gt; value although the compiler is allowed to use a smaller type in the actual memory layout. The size and thus acceptable values can be changed by using a &lt;a href=&quot;../type-layout#primitive-representations&quot;&gt;primitive representation&lt;/a&gt; or the &lt;a href=&quot;../type-layout#the-c-representation&quot;&gt;&lt;code&gt;C&lt;/code&gt; representation&lt;/a&gt;.</source>
          <target state="translated">下&lt;a href=&quot;../type-layout#the-default-representation&quot;&gt;デフォルト表現&lt;/a&gt;、指定された判別式は以下のように解釈される &lt;code&gt;isize&lt;/code&gt; コンパイラが実際のメモリレイアウトに小さいタイプを使用することを許可されているが値。サイズと許容値は、&lt;a href=&quot;../type-layout#primitive-representations&quot;&gt;プリミティブ表現&lt;/a&gt;または&lt;a href=&quot;../type-layout#the-c-representation&quot;&gt; &lt;code&gt;C&lt;/code&gt; 表現&lt;/a&gt;を使用して変更できます。</target>
        </trans-unit>
        <trans-unit id="934025592a349e0ccdf3fcea702e3b4fab1b4701" translate="yes" xml:space="preserve">
          <source>Under the surface, the &lt;code&gt;assert_eq!&lt;/code&gt; and &lt;code&gt;assert_ne!&lt;/code&gt; macros use the operators &lt;code&gt;==&lt;/code&gt; and &lt;code&gt;!=&lt;/code&gt;, respectively. When the assertions fail, these macros print their arguments using debug formatting, which means the values being compared must implement the &lt;code&gt;PartialEq&lt;/code&gt; and &lt;code&gt;Debug&lt;/code&gt; traits. All the primitive types and most of the standard library types implement these traits. For structs and enums that you define, you&amp;rsquo;ll need to implement &lt;code&gt;PartialEq&lt;/code&gt; to assert that values of those types are equal or not equal. You&amp;rsquo;ll need to implement &lt;code&gt;Debug&lt;/code&gt; to print the values when the assertion fails. Because both traits are derivable traits, as mentioned in Listing 5-12 in Chapter 5, this is usually as straightforward as adding the &lt;code&gt;#[derive(PartialEq, Debug)]&lt;/code&gt; annotation to your struct or enum definition. See Appendix C, &lt;a href=&quot;appendix-03-derivable-traits&quot;&gt;&amp;ldquo;Derivable Traits,&amp;rdquo;&lt;/a&gt; for more details about these and other derivable traits.</source>
          <target state="translated">表面下では、 &lt;code&gt;assert_eq!&lt;/code&gt; そして &lt;code&gt;assert_ne!&lt;/code&gt; マクロは、それぞれ &lt;code&gt;==&lt;/code&gt; および &lt;code&gt;!=&lt;/code&gt; 演算子を使用します。アサーションが失敗すると、これらのマクロはデバッグフォーマットを使用して引数を出力します。つまり、比較される値は &lt;code&gt;PartialEq&lt;/code&gt; および &lt;code&gt;Debug&lt;/code&gt; トレイトを実装する必要があります。すべてのプリミティブ型とほとんどの標準ライブラリ型は、これらの特性を実装しています。定義する構造体と列挙型については、 &lt;code&gt;PartialEq&lt;/code&gt; を実装して、それらの型の値が等しいか等しくないことを表明する必要があります。 &lt;code&gt;Debug&lt;/code&gt; を実装する必要がありますアサーションが失敗したときに値を出力します。第5章のリスト5-12で説明されているように、両方の特性は派生可能な特性であるため、通常、構造体または列挙型の定義に &lt;code&gt;#[derive(PartialEq, Debug)]&lt;/code&gt; アノテーションを追加するのと同じくらい簡単です。これらおよびその他の派生可能な特性の詳細については&lt;a href=&quot;appendix-03-derivable-traits&quot;&gt;、&lt;/a&gt;付録C 「派生可能な特性」を参照してください。</target>
        </trans-unit>
        <trans-unit id="c52b1bbb83c6ff68ef901a5b3c68e708f2da78aa" translate="yes" xml:space="preserve">
          <source>Underlying System calls</source>
          <target state="translated">基礎となるシステムコール</target>
        </trans-unit>
        <trans-unit id="ca035a5ce4c3df59c37ddda21e0189a6380e3b1f" translate="yes" xml:space="preserve">
          <source>Underscore</source>
          <target state="translated">Underscore</target>
        </trans-unit>
        <trans-unit id="7bd1424f9d38ad3f094e622e30f38d61cffee843" translate="yes" xml:space="preserve">
          <source>Underscore Imports</source>
          <target state="translated">アンダースコアの輸入品</target>
        </trans-unit>
        <trans-unit id="e31df2c04ec1e4b0b36bedd38e82d9eeb2726bb3" translate="yes" xml:space="preserve">
          <source>Understanding Ownership</source>
          <target state="translated">所有権の理解</target>
        </trans-unit>
        <trans-unit id="f50d8069b5b46a2b00b55d627b937dadef8d4c8b" translate="yes" xml:space="preserve">
          <source>Undo the effect of leaked guards on the borrow state of the &lt;code&gt;RefCell&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;RefCell&lt;/code&gt; の借用状態に対するリークされたガードの影響を元に戻します。</target>
        </trans-unit>
        <trans-unit id="2bd6a0012c9128bdcdb48f1df7a5232a746b1dd8" translate="yes" xml:space="preserve">
          <source>Unfortunately, &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; is not safe to share across threads. When &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; manages the reference count, it adds to the count for each call to &lt;code&gt;clone&lt;/code&gt; and subtracts from the count when each clone is dropped. But it doesn&amp;rsquo;t use any concurrency primitives to make sure that changes to the count can&amp;rsquo;t be interrupted by another thread. This could lead to wrong counts&amp;mdash;subtle bugs that could in turn lead to memory leaks or a value being dropped before we&amp;rsquo;re done with it. What we need is a type exactly like &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; but one that makes changes to the reference count in a thread-safe way.</source>
          <target state="translated">残念ながら、 &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; をスレッド間で共有するのは安全ではありません。とき &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; 参照カウントを管理し、それはへの各呼び出しのカウントに追加されます &lt;code&gt;clone&lt;/code&gt; 各クローンがドロップされたときに、カウントから減算します。ただし、カウントの変更が別のスレッドによって中断されないようにするために、同時実行プリミティブは使用しません。これにより、誤ったカウントが発生する可能性があります。微妙なバグが原因で、メモリリークが発生したり、処理が完了する前に値が削除されたりする可能性があります。必要なのは、 &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; まったく同じ型ですが、スレッドセーフな方法で参照カウントを変更する型です。</target>
        </trans-unit>
        <trans-unit id="ccb18a8dd577d217916f372c4de88677ea8361fc" translate="yes" xml:space="preserve">
          <source>Unfortunately, it&amp;rsquo;s not straightforward to disable the automatic &lt;code&gt;drop&lt;/code&gt; functionality. Disabling &lt;code&gt;drop&lt;/code&gt; isn&amp;rsquo;t usually necessary; the whole point of the &lt;code&gt;Drop&lt;/code&gt; trait is that it&amp;rsquo;s taken care of automatically. Occasionally, however, you might want to clean up a value early. One example is when using smart pointers that manage locks: you might want to force the &lt;code&gt;drop&lt;/code&gt; method that releases the lock so that other code in the same scope can acquire the lock. Rust doesn&amp;rsquo;t let you call the &lt;code&gt;Drop&lt;/code&gt; trait&amp;rsquo;s &lt;code&gt;drop&lt;/code&gt; method manually; instead you have to call the &lt;code&gt;std::mem::drop&lt;/code&gt; function provided by the standard library if you want to force a value to be dropped before the end of its scope.</source>
          <target state="translated">残念ながら、自動 &lt;code&gt;drop&lt;/code&gt; 機能を無効にするのは簡単ではありません。通常、 &lt;code&gt;drop&lt;/code&gt; 無効にする必要はありません。 &lt;code&gt;Drop&lt;/code&gt; 特性の要点は、自動的に処理されることです。ただし、場合によっては、値を早期にクリーンアップすることをお勧めします。1つの例は、ロックを管理するスマートポインターを使用する場合です。同じスコープ内の他のコードがロックを取得できるように、ロックを解放する &lt;code&gt;drop&lt;/code&gt; メソッドを強制することができます。Rustでは、 &lt;code&gt;Drop&lt;/code&gt; トレイトの &lt;code&gt;drop&lt;/code&gt; メソッドを手動で呼び出すことはできません。代わりに、 &lt;code&gt;std::mem::drop&lt;/code&gt; を呼び出す必要がありますスコープが終了する前に値を強制的に削除する場合は、標準ライブラリによって提供される関数。</target>
        </trans-unit>
        <trans-unit id="1444761777045d9a10886b422e6940c76965059f" translate="yes" xml:space="preserve">
          <source>Unfortunately, it&amp;rsquo;s not straightforward to disable the automatic &lt;code&gt;drop&lt;/code&gt; functionality. Disabling &lt;code&gt;drop&lt;/code&gt; isn&amp;rsquo;t usually necessary; the whole point of the &lt;code&gt;Drop&lt;/code&gt; trait is that it&amp;rsquo;s taken care of automatically. Occasionally, however, you might want to clean up a value early. One example is when using smart pointers that manage locks: you might want to force the &lt;code&gt;drop&lt;/code&gt; method that releases the lock to run so other code in the same scope can acquire the lock. Rust doesn&amp;rsquo;t let you call the &lt;code&gt;Drop&lt;/code&gt; trait&amp;rsquo;s &lt;code&gt;drop&lt;/code&gt; method manually; instead you have to call the &lt;code&gt;std::mem::drop&lt;/code&gt; function provided by the standard library if you want to force a value to be dropped before the end of its scope.</source>
          <target state="translated">残念ながら、自動 &lt;code&gt;drop&lt;/code&gt; 機能を無効にするのは簡単ではありません。通常、 &lt;code&gt;drop&lt;/code&gt; 無効にする必要はありません。 &lt;code&gt;Drop&lt;/code&gt; トレイトの要点は、自動的に処理されるということです。ただし、値を早期にクリーンアップしたい場合があります。1つの例は、ロックを管理するスマートポインターを使用する場合です。ロックを解放する &lt;code&gt;drop&lt;/code&gt; メソッドを強制的に実行して、同じスコープ内の他のコードがロックを取得できるようにすることができます。Rustでは、 &lt;code&gt;Drop&lt;/code&gt; トレイトの &lt;code&gt;drop&lt;/code&gt; メソッドを手動で呼び出すことはできません。代わりに、 &lt;code&gt;std::mem::drop&lt;/code&gt; を呼び出す必要があります スコープの終了前に値を強制的に削除する場合は、標準ライブラリによって提供される関数。</target>
        </trans-unit>
        <trans-unit id="1a531b7898235009a0cc7b2eec486ea25b9d6d2f" translate="yes" xml:space="preserve">
          <source>Unfortunately, the code in Listing 7-5 still results in an error, as shown in Listing 7-6.</source>
          <target state="translated">残念ながら、リスト7-5のコードはリスト7-6で示されているように、まだエラーになります。</target>
        </trans-unit>
        <trans-unit id="be79a988f81db8bfcf6945f3ba47d61010546fc9" translate="yes" xml:space="preserve">
          <source>Unicode escapes</source>
          <target state="translated">ユニコードエスケープ</target>
        </trans-unit>
        <trans-unit id="ae0d9cce1182bdae15059a991a47bf01218e3825" translate="yes" xml:space="preserve">
          <source>Unicode escapes are never generated by this function.</source>
          <target state="translated">この関数では Unicode エスケープは生成されません。</target>
        </trans-unit>
        <trans-unit id="049c2f43b308773f947249e6515dfdd4cc3c35a2" translate="yes" xml:space="preserve">
          <source>Unicode is designed such that this effectively decodes bytes with the character encoding that IANA calls ISO-8859-1. This encoding is compatible with ASCII.</source>
          <target state="translated">Unicodeは、IANAがISO-8859-1と呼ぶ文字エンコーディングでバイトを効果的にデコードするように設計されています。このエンコーディングはASCIIと互換性があります。</target>
        </trans-unit>
        <trans-unit id="045e4620605ab61ee2d00d3c61380dde56a437e0" translate="yes" xml:space="preserve">
          <source>Unicode string slices.</source>
          <target state="translated">Unicode文字列スライス。</target>
        </trans-unit>
        <trans-unit id="ea8b0aa9835ad896a48c3cd1f5107ad4d8a0d9e1" translate="yes" xml:space="preserve">
          <source>UnicodeVersion</source>
          <target state="translated">UnicodeVersion</target>
        </trans-unit>
        <trans-unit id="2e2480da297a5a795e54a8b1e8174027d5cb3056" translate="yes" xml:space="preserve">
          <source>UnicodeVersion::borrow</source>
          <target state="translated">UnicodeVersion::borrow</target>
        </trans-unit>
        <trans-unit id="89b51103925ce314bbcaaf20a8fe1cadc3924003" translate="yes" xml:space="preserve">
          <source>UnicodeVersion::borrow_mut</source>
          <target state="translated">UnicodeVersion::borrow_mut</target>
        </trans-unit>
        <trans-unit id="88a2e4badb33e94ea8a5b499e6fc153387a0beb3" translate="yes" xml:space="preserve">
          <source>UnicodeVersion::clamp</source>
          <target state="translated">UnicodeVersion::clamp</target>
        </trans-unit>
        <trans-unit id="d17cdcafd0174814c16b4f219e4fed72e9bd469a" translate="yes" xml:space="preserve">
          <source>UnicodeVersion::clone</source>
          <target state="translated">UnicodeVersion::clone</target>
        </trans-unit>
        <trans-unit id="47b2336d0c0eb30610891e9aeb66476192776d1f" translate="yes" xml:space="preserve">
          <source>UnicodeVersion::clone_from</source>
          <target state="translated">UnicodeVersion::clone_from</target>
        </trans-unit>
        <trans-unit id="df3118b48825d7934a06fa42be12de85a41743a3" translate="yes" xml:space="preserve">
          <source>UnicodeVersion::clone_into</source>
          <target state="translated">UnicodeVersion::clone_into</target>
        </trans-unit>
        <trans-unit id="a501e28c8f674e6c8775cd5763a1269e58854a95" translate="yes" xml:space="preserve">
          <source>UnicodeVersion::cmp</source>
          <target state="translated">UnicodeVersion::cmp</target>
        </trans-unit>
        <trans-unit id="eb0f8f28b23626496734a42b66b3d04fceab6e15" translate="yes" xml:space="preserve">
          <source>UnicodeVersion::eq</source>
          <target state="translated">UnicodeVersion::eq</target>
        </trans-unit>
        <trans-unit id="d50614eac8572f390490b398b9df8d2ee6162d01" translate="yes" xml:space="preserve">
          <source>UnicodeVersion::fmt</source>
          <target state="translated">UnicodeVersion::fmt</target>
        </trans-unit>
        <trans-unit id="870f165e6cd936b143cbc0dbc14afac1093420d0" translate="yes" xml:space="preserve">
          <source>UnicodeVersion::from</source>
          <target state="translated">UnicodeVersion::from</target>
        </trans-unit>
        <trans-unit id="2bad969f3e70b400e54b881fe8536995db1f2994" translate="yes" xml:space="preserve">
          <source>UnicodeVersion::ge</source>
          <target state="translated">UnicodeVersion::ge</target>
        </trans-unit>
        <trans-unit id="08f3a8d2999b98ac5f6c67691d5bdd1bc1a0e145" translate="yes" xml:space="preserve">
          <source>UnicodeVersion::gt</source>
          <target state="translated">UnicodeVersion::gt</target>
        </trans-unit>
        <trans-unit id="b5a9d9239e831f7ef74e7e53b12fa0fd62d71a97" translate="yes" xml:space="preserve">
          <source>UnicodeVersion::into</source>
          <target state="translated">UnicodeVersion::into</target>
        </trans-unit>
        <trans-unit id="1ea14b2a7575169ecf16f30acb48c3409c34b763" translate="yes" xml:space="preserve">
          <source>UnicodeVersion::le</source>
          <target state="translated">UnicodeVersion::le</target>
        </trans-unit>
        <trans-unit id="eb08588571d008fa3a48093f6cad0aa8209e47e3" translate="yes" xml:space="preserve">
          <source>UnicodeVersion::lt</source>
          <target state="translated">UnicodeVersion::lt</target>
        </trans-unit>
        <trans-unit id="809dd77e054b744c6372ff89e0b31e14994e27e7" translate="yes" xml:space="preserve">
          <source>UnicodeVersion::max</source>
          <target state="translated">UnicodeVersion::max</target>
        </trans-unit>
        <trans-unit id="1c035e39a67ae5609815950cc75aebf117385e95" translate="yes" xml:space="preserve">
          <source>UnicodeVersion::min</source>
          <target state="translated">UnicodeVersion::min</target>
        </trans-unit>
        <trans-unit id="064f84b6703cb5f6f68f68e7fc2c4d251f631296" translate="yes" xml:space="preserve">
          <source>UnicodeVersion::ne</source>
          <target state="translated">UnicodeVersion::ne</target>
        </trans-unit>
        <trans-unit id="7c59df82b034e552f2c3f4f3995f283f8463f626" translate="yes" xml:space="preserve">
          <source>UnicodeVersion::partial_cmp</source>
          <target state="translated">UnicodeVersion::partial_cmp</target>
        </trans-unit>
        <trans-unit id="cd2d6e2e056d2c57e62b0e2e433f8281504be6b4" translate="yes" xml:space="preserve">
          <source>UnicodeVersion::to_owned</source>
          <target state="translated">UnicodeVersion::to_owned</target>
        </trans-unit>
        <trans-unit id="c51cc398d26afae848ea754f781315242ac4e979" translate="yes" xml:space="preserve">
          <source>UnicodeVersion::try_from</source>
          <target state="translated">UnicodeVersion::try_from</target>
        </trans-unit>
        <trans-unit id="a8b18a0ff13e1e11bb861c761bf0dc70df4c71e0" translate="yes" xml:space="preserve">
          <source>UnicodeVersion::try_into</source>
          <target state="translated">UnicodeVersion::try_into</target>
        </trans-unit>
        <trans-unit id="eecb3bfce19f7a3ae0d89e37123a7c922b8eeab9" translate="yes" xml:space="preserve">
          <source>UnicodeVersion::type_id</source>
          <target state="translated">UnicodeVersion::type_id</target>
        </trans-unit>
        <trans-unit id="6ec76a97b7c965b8294c7506df62a1b9b03c72be" translate="yes" xml:space="preserve">
          <source>Uninhabited</source>
          <target state="translated">Uninhabited</target>
        </trans-unit>
        <trans-unit id="72d1bc1786787b9f5cf6f8701a1fb442f4f59285" translate="yes" xml:space="preserve">
          <source>Union</source>
          <target state="translated">Union</target>
        </trans-unit>
        <trans-unit id="431e2898d7b9070b1bc9e3d0e0fac72fa778d000" translate="yes" xml:space="preserve">
          <source>Union std::mem::MaybeUninit</source>
          <target state="translated">ユニオン std::mem::MaybeUninit</target>
        </trans-unit>
        <trans-unit id="2697f04d1c34bc0fd003a5d4f2f248be3c9842cb" translate="yes" xml:space="preserve">
          <source>Union types</source>
          <target state="translated">ユニオンタイプ</target>
        </trans-unit>
        <trans-unit id="00002b164c08859d5a15579e55c8f17ce6478546" translate="yes" xml:space="preserve">
          <source>Unions</source>
          <target state="translated">Unions</target>
        </trans-unit>
        <trans-unit id="0b4b57a2ff8ee5597f14593b11685d486d14ac1f" translate="yes" xml:space="preserve">
          <source>Unions and &lt;code id=&quot;unions-and-drop&quot;&gt;Drop&lt;/code&gt;</source>
          <target state="translated">ユニオンと &lt;code id=&quot;unions-and-drop&quot;&gt;Drop&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="70ff5b52f206cf593da36650b6dcc3e0e0087048" translate="yes" xml:space="preserve">
          <source>Unions have no notion of an &quot;active field&quot;. Instead, every union access just interprets the storage at the type of the field used for the access. Reading a union field reads the bits of the union at the field's type. Fields might have a non-zero offset (except when &lt;code&gt;#[repr(C)]&lt;/code&gt; is used); in that case the bits starting at the offset of the fields are read. It is the programmer's responsibility to make sure that the data is valid at the field's type. Failing to do so results in undefined behavior. For example, reading the value &lt;code&gt;3&lt;/code&gt; at type &lt;code&gt;bool&lt;/code&gt; is undefined behavior. Effectively, writing to and then reading from a &lt;code&gt;#[repr(C)]&lt;/code&gt; union is analogous to a &lt;a href=&quot;../../std/mem/fn.transmute&quot;&gt;&lt;code&gt;transmute&lt;/code&gt;&lt;/a&gt; from the type used for writing to the type used for reading.</source>
          <target state="translated">組合には「活動分野」の概念はありません。代わりに、すべてのユニオンアクセスは、アクセスに使用されるフィールドのタイプでストレージを解釈するだけです。ユニオンフィールドを読み取ると、フィールドのタイプでユニオンのビットが読み取られます。フィールドのオフセットがゼロ以外の場合があります（ &lt;code&gt;#[repr(C)]&lt;/code&gt; が使用されている場合を除く）。その場合、フィールドのオフセットで始まるビットが読み取られます。データがフィールドのタイプで有効であることを確認するのはプログラマーの責任です。そうしないと、未定義の動作が発生します。たとえば、 &lt;code&gt;bool&lt;/code&gt; 型で値 &lt;code&gt;3&lt;/code&gt; を読み取ることは、未定義の動作です。事実上、 &lt;code&gt;#[repr(C)]&lt;/code&gt; 共用体への書き込みと読み取りは、&lt;a href=&quot;../../std/mem/fn.transmute&quot;&gt; &lt;code&gt;transmute&lt;/code&gt; &lt;/a&gt;類似しています。 書き込みに使用するタイプから読み取りに使用するタイプまで。</target>
        </trans-unit>
        <trans-unit id="9ee9dda7ec1e961b1ea8bab0ad66f79036feccce" translate="yes" xml:space="preserve">
          <source>Unions have no notion of an &quot;active field&quot;. Instead, every union access just interprets the storage at the type of the field used for the access. Reading a union field reads the bits of the union at the field's type. It is the programmer's responsibility to make sure that the data is valid at that type. Failing to do so results in undefined behavior. For example, reading the value &lt;code&gt;3&lt;/code&gt; at type &lt;code&gt;bool&lt;/code&gt; is undefined behavior. Effectively, writing to and then reading from a union is analogous to a &lt;a href=&quot;../../std/mem/fn.transmute&quot;&gt;&lt;code&gt;transmute&lt;/code&gt;&lt;/a&gt; from the type used for writing to the type used for reading.</source>
          <target state="translated">労働組合は「アクティブフィールド」という概念を持ちません。代わりに、すべてのユニオンアクセスは、アクセスに使用されるフィールドのタイプでストレージを解釈するだけです。共用体フィールドを読み取ると、フィールドの型にある共用体のビットが読み取られます。データがその型で有効であることを確認するのはプログラマの責任です。そうしないと、未定義の動作が発生します。たとえば、タイプ &lt;code&gt;bool&lt;/code&gt; で値 &lt;code&gt;3&lt;/code&gt; を読み取ることは未定義の動作です。事実上、ユニオンへの書き込みとその後の読み取りは、書き込みに使用されるタイプから読み取りに使用されるタイプへの&lt;a href=&quot;../../std/mem/fn.transmute&quot;&gt; &lt;code&gt;transmute&lt;/code&gt; &lt;/a&gt;類似しています。</target>
        </trans-unit>
        <trans-unit id="5078dc66c307401e9db5997fdb77c1b9baee7912" translate="yes" xml:space="preserve">
          <source>Unions have no notion of an &quot;active field&quot;. Instead, every union access transmutes parts of the content of the union to the type of the accessed field. Since transmutes can cause unexpected or undefined behaviour, &lt;code&gt;unsafe&lt;/code&gt; is required to read from a union field or to write to a field that doesn't implement &lt;a href=&quot;../special-types-and-traits#copy&quot;&gt;&lt;code&gt;Copy&lt;/code&gt;&lt;/a&gt;. See the &lt;a href=&quot;../items/unions&quot;&gt;item&lt;/a&gt; documentation for further details.</source>
          <target state="translated">組合には「活動分野」の概念はありません。代わりに、すべてのユニオンアクセスは、ユニオンのコンテンツの一部をアクセスされたフィールドのタイプに変換します。核変換は予期しない動作や未定義の動作を引き起こす可能性があるため、ユニオンフィールドからの読み取り、または&lt;a href=&quot;../special-types-and-traits#copy&quot;&gt; &lt;code&gt;Copy&lt;/code&gt; を&lt;/a&gt;実装していないフィールドへの書き込みには &lt;code&gt;unsafe&lt;/code&gt; はない必要があります。詳細については、&lt;a href=&quot;../items/unions&quot;&gt;アイテムの&lt;/a&gt;ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="fa92690b772357d1ef06b6b63773a7916e701512" translate="yes" xml:space="preserve">
          <source>Unions have no notion of an &quot;active field&quot;. Instead, every union access transmutes parts of the content of the union to the type of the accessed field. Since transmutes can cause unexpected or undefined behaviour, &lt;code&gt;unsafe&lt;/code&gt; is required to read from a union field, or to write to a field that doesn't implement &lt;a href=&quot;../special-types-and-traits#copy&quot;&gt;&lt;code&gt;Copy&lt;/code&gt;&lt;/a&gt;. See the &lt;a href=&quot;../items/unions&quot;&gt;item&lt;/a&gt; documentation for further details.</source>
          <target state="translated">組合には「活動分野」の概念はありません。代わりに、すべてのユニオンアクセスは、ユニオンのコンテンツの一部をアクセスされたフィールドのタイプに変換します。トランスミュートは予期しない動作や未定義の動作を引き起こす可能性があるため、ユニオンフィールドからの読み取り、または&lt;a href=&quot;../special-types-and-traits#copy&quot;&gt; &lt;code&gt;Copy&lt;/code&gt; を&lt;/a&gt;実装していないフィールドへの書き込みには &lt;code&gt;unsafe&lt;/code&gt; はない必要があります。詳細については、&lt;a href=&quot;../items/unions&quot;&gt;アイテムの&lt;/a&gt;ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="cb2b3efb0aed2e9062949d0d6efb28c840e4bdd0" translate="yes" xml:space="preserve">
          <source>Unique immutable borrows in captures</source>
          <target state="translated">キャプチャでのユニークな不変の借用</target>
        </trans-unit>
        <trans-unit id="55319d93decd49524c6577ad2944aab8499b8def" translate="yes" xml:space="preserve">
          <source>Unit Tests</source>
          <target state="translated">ユニットテスト</target>
        </trans-unit>
        <trans-unit id="fc4dd0d2f506c2585198c093fe3355566c69c50a" translate="yes" xml:space="preserve">
          <source>Unit struct expression</source>
          <target state="translated">単位構造式</target>
        </trans-unit>
        <trans-unit id="43b9bb5cd29f3ad5aabe2057140ec12468595ac3" translate="yes" xml:space="preserve">
          <source>Unit structs are most commonly used as marker. They have a size of zero bytes, but unlike empty enums they can be instantiated, making them isomorphic to the unit type &lt;code&gt;()&lt;/code&gt;. Unit structs are useful when you need to implement a trait on something, but don't need to store any data inside it.</source>
          <target state="translated">ユニット構造体は、マーカーとして最もよく使用されます。サイズは0バイトですが、空の列挙型とは異なり、インスタンス化してユニットタイプ &lt;code&gt;()&lt;/code&gt; に同型にすることができます。ユニット構造体は、何かに特性を実装する必要があるが、その中にデータを格納する必要がない場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="29ad46d73653a34f4423b5d45017917794627b45" translate="yes" xml:space="preserve">
          <source>Unit-Like Structs Without Any Fields</source>
          <target state="translated">フィールドを持たないユニットライク構造</target>
        </trans-unit>
        <trans-unit id="cecc0d8500754b34f5bd7f11dfabb25c3a770aaf" translate="yes" xml:space="preserve">
          <source>Unix</source>
          <target state="translated">Unix</target>
        </trans-unit>
        <trans-unit id="b00eb2991ece231ee34e1193574afcc6b4379e47" translate="yes" xml:space="preserve">
          <source>Unix peer credentials.</source>
          <target state="translated">Unix のピア資格情報。</target>
        </trans-unit>
        <trans-unit id="122365e7dc1f75db94d30ca063c2e50b567c06af" translate="yes" xml:space="preserve">
          <source>Unix-specific extension methods for &lt;a href=&quot;../../../fs/struct.direntry&quot;&gt;&lt;code&gt;fs::DirEntry&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../../fs/struct.direntry&quot;&gt; &lt;code&gt;fs::DirEntry&lt;/code&gt; &lt;/a&gt; Unix固有の拡張メソッド。</target>
        </trans-unit>
        <trans-unit id="40290eba8741a7fb561802cc4fd7a5f03fc12be7" translate="yes" xml:space="preserve">
          <source>Unix-specific extension to the primitives in the &lt;code&gt;std::ffi&lt;/code&gt; module</source>
          <target state="translated">&lt;code&gt;std::ffi&lt;/code&gt; モジュールのプリミティブに対するUnix固有の拡張</target>
        </trans-unit>
        <trans-unit id="abb9e72437d43bc0a2c9b376ba3ef37ee9f0016a" translate="yes" xml:space="preserve">
          <source>Unix-specific extension to the primitives in the &lt;code&gt;std::ffi&lt;/code&gt; module.</source>
          <target state="translated">&lt;code&gt;std::ffi&lt;/code&gt; モジュールのプリミティブに対するUnix固有の拡張。</target>
        </trans-unit>
        <trans-unit id="7d8456cebfaf04274630f018fe98c85f0928fd59" translate="yes" xml:space="preserve">
          <source>Unix-specific extensions for &lt;a href=&quot;../../../fs/struct.filetype&quot;&gt;&lt;code&gt;FileType&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../../fs/struct.filetype&quot;&gt; &lt;code&gt;FileType&lt;/code&gt; の&lt;/a&gt; Unix固有の拡張子。</target>
        </trans-unit>
        <trans-unit id="1f656dcd59d506e815045da5be6675c4c9594d4c" translate="yes" xml:space="preserve">
          <source>Unix-specific extensions for &lt;a href=&quot;../../../fs/struct.filetype&quot;&gt;&lt;code&gt;fs::FileType&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../../fs/struct.filetype&quot;&gt; &lt;code&gt;fs::FileType&lt;/code&gt; &lt;/a&gt;Unix固有の拡張機能。</target>
        </trans-unit>
        <trans-unit id="44ae3204adf61398987a8d1c1ea0cc0ee7054526" translate="yes" xml:space="preserve">
          <source>Unix-specific extensions to &lt;a href=&quot;../../../fs/struct.dirbuilder&quot;&gt;&lt;code&gt;fs::DirBuilder&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../../fs/struct.dirbuilder&quot;&gt; &lt;code&gt;fs::DirBuilder&lt;/code&gt; &lt;/a&gt;に対するUnix固有の拡張。</target>
        </trans-unit>
        <trans-unit id="5c055cc3e8d38d074a1699c2467aa73f8a67ec8b" translate="yes" xml:space="preserve">
          <source>Unix-specific extensions to &lt;a href=&quot;../../../fs/struct.file&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../../fs/struct.file&quot;&gt; &lt;code&gt;File&lt;/code&gt; &lt;/a&gt;に対するUnix固有の拡張。</target>
        </trans-unit>
        <trans-unit id="edc026b1b59822f06029958a23a0df330b02c688" translate="yes" xml:space="preserve">
          <source>Unix-specific extensions to &lt;a href=&quot;../../../fs/struct.file&quot;&gt;&lt;code&gt;fs::File&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../../fs/struct.file&quot;&gt; &lt;code&gt;fs::File&lt;/code&gt; &lt;/a&gt;に対するUnix固有の拡張機能。</target>
        </trans-unit>
        <trans-unit id="f808e6d0f3cef15729ba995896155633f9c4e702" translate="yes" xml:space="preserve">
          <source>Unix-specific extensions to &lt;a href=&quot;../../../fs/struct.metadata&quot;&gt;&lt;code&gt;fs::Metadata&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../../fs/struct.metadata&quot;&gt; &lt;code&gt;fs::Metadata&lt;/code&gt; &lt;/a&gt;に対するUnix固有の拡張。</target>
        </trans-unit>
        <trans-unit id="a398ee8c4edc244dd48383efb674694800d11b42" translate="yes" xml:space="preserve">
          <source>Unix-specific extensions to &lt;a href=&quot;../../../fs/struct.openoptions&quot;&gt;&lt;code&gt;fs::OpenOptions&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../../fs/struct.openoptions&quot;&gt; &lt;code&gt;fs::OpenOptions&lt;/code&gt; &lt;/a&gt;に対するUnix固有の拡張。</target>
        </trans-unit>
        <trans-unit id="5c3e2254255ed122649ef706ca6351a05878a982" translate="yes" xml:space="preserve">
          <source>Unix-specific extensions to &lt;a href=&quot;../../../fs/struct.permissions&quot;&gt;&lt;code&gt;fs::Permissions&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../../fs/struct.permissions&quot;&gt; &lt;code&gt;fs::Permissions&lt;/code&gt; &lt;/a&gt;に対するUnix固有の拡張。</target>
        </trans-unit>
        <trans-unit id="debd12446f93bf566a622bdf802607a7783bf6af" translate="yes" xml:space="preserve">
          <source>Unix-specific extensions to &lt;a href=&quot;../../../process/struct.exitstatus&quot;&gt;&lt;code&gt;process::ExitStatus&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">処理するUnix固有の拡張機能&lt;a href=&quot;../../../process/struct.exitstatus&quot;&gt; &lt;code&gt;process::ExitStatus&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="04090d3e2df7580a6d7cec986c08600c0473b452" translate="yes" xml:space="preserve">
          <source>Unix-specific extensions to &lt;a href=&quot;../../../thread/struct.joinhandle&quot;&gt;&lt;code&gt;JoinHandle&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../../thread/struct.joinhandle&quot;&gt; &lt;code&gt;JoinHandle&lt;/code&gt; に対する&lt;/a&gt;Unix固有の拡張。</target>
        </trans-unit>
        <trans-unit id="a44e2e0da5854a8ebdf4095318d97783ef5ced71" translate="yes" xml:space="preserve">
          <source>Unix-specific extensions to &lt;a href=&quot;../../../thread/struct.joinhandle&quot;&gt;&lt;code&gt;thread::JoinHandle&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../../thread/struct.joinhandle&quot;&gt; &lt;code&gt;thread::JoinHandle&lt;/code&gt; &lt;/a&gt;に対するUnix固有の拡張。</target>
        </trans-unit>
        <trans-unit id="d0f569dc194098f87c8bc0882017a7d0c963c955" translate="yes" xml:space="preserve">
          <source>Unix-specific extensions to general I/O primitives</source>
          <target state="translated">一般的な I/O プリミティブへの Unix 固有の拡張</target>
        </trans-unit>
        <trans-unit id="8e6df3ed34620f11bd872bbbdadc0905f4158426" translate="yes" xml:space="preserve">
          <source>Unix-specific extensions to general I/O primitives.</source>
          <target state="translated">一般的なI/OプリミティブへのUnix固有の拡張。</target>
        </trans-unit>
        <trans-unit id="3789837939ff4014248adcb7118252ef4bacad14" translate="yes" xml:space="preserve">
          <source>Unix-specific extensions to primitives in the &lt;code&gt;std::fs&lt;/code&gt; module.</source>
          <target state="translated">&lt;code&gt;std::fs&lt;/code&gt; モジュールのプリミティブに対するUnix固有の拡張。</target>
        </trans-unit>
        <trans-unit id="b4f34673a7f1203fc92e8429aa07449552c09698" translate="yes" xml:space="preserve">
          <source>Unix-specific extensions to primitives in the &lt;code&gt;std::process&lt;/code&gt; module.</source>
          <target state="translated">&lt;code&gt;std::process&lt;/code&gt; モジュールのプリミティブに対するUnix固有の拡張。</target>
        </trans-unit>
        <trans-unit id="60cfd734bf76c756b8e059f4a9d1700ff9a4713c" translate="yes" xml:space="preserve">
          <source>Unix-specific extensions to primitives in the &lt;code&gt;std::thread&lt;/code&gt; module.</source>
          <target state="translated">&lt;code&gt;std::thread&lt;/code&gt; モジュールのプリミティブに対するUnix固有の拡張。</target>
        </trans-unit>
        <trans-unit id="2ffca9f4f9cc7c8dd85f78563efe7167f6d2b47d" translate="yes" xml:space="preserve">
          <source>Unix-specific extensions to the &lt;a href=&quot;../../../process/struct.command&quot;&gt;&lt;code&gt;process::Command&lt;/code&gt;&lt;/a&gt; builder.</source>
          <target state="translated">&lt;a href=&quot;../../../process/struct.command&quot;&gt; &lt;code&gt;process::Command&lt;/code&gt; &lt;/a&gt;ビルダーに対するUnix固有の拡張。</target>
        </trans-unit>
        <trans-unit id="e0d68049fb554c75225dfe9c03296f580e460278" translate="yes" xml:space="preserve">
          <source>Unix-specific networking functionality</source>
          <target state="translated">Unixに特化したネットワーク機能</target>
        </trans-unit>
        <trans-unit id="547d566a755a9f281512ec4438e2afbe2e8555f4" translate="yes" xml:space="preserve">
          <source>Unix-specific networking functionality.</source>
          <target state="translated">Unix 固有のネットワーク機能。</target>
        </trans-unit>
        <trans-unit id="6dc7e1fbf723c58f49b9c7b7c9486e8910ff303f" translate="yes" xml:space="preserve">
          <source>Unix-specific primitives available on all unix platforms</source>
          <target state="translated">すべての Unix プラットフォームで利用可能な Unix 固有のプリミティブ</target>
        </trans-unit>
        <trans-unit id="5d6c2bdf64d7b2867f336fc3ecf7da3868d50a13" translate="yes" xml:space="preserve">
          <source>Unix-specific primitives available on all unix platforms.</source>
          <target state="translated">すべてのUnixプラットフォームで利用可能なUnix固有のプリミティブ。</target>
        </trans-unit>
        <trans-unit id="559d58e1a8d746d91fa3600f29dbbb56c9ca25cd" translate="yes" xml:space="preserve">
          <source>UnixDatagram</source>
          <target state="translated">UnixDatagram</target>
        </trans-unit>
        <trans-unit id="67d62a4911bb1e0d83beb3b448aab6df455a9a7a" translate="yes" xml:space="preserve">
          <source>UnixListener</source>
          <target state="translated">UnixListener</target>
        </trans-unit>
        <trans-unit id="941c06c80eb53ce02937637ee16d42217c4f223a" translate="yes" xml:space="preserve">
          <source>UnixStream</source>
          <target state="translated">UnixStream</target>
        </trans-unit>
        <trans-unit id="55add9bdacff5201b17fde89c00c759c2cb86e1e" translate="yes" xml:space="preserve">
          <source>Unless you are in such a situation, higher-level and more foolproof APIs like &lt;code&gt;get&lt;/code&gt; should be preferred.</source>
          <target state="translated">このような状況でない限り、 &lt;code&gt;get&lt;/code&gt; のようなより高レベルでより確実なAPIをお勧めします。</target>
        </trans-unit>
        <trans-unit id="a444b89922afd7135047b0a62b434579bde022e6" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;#method.compare_exchange&quot;&gt;&lt;code&gt;compare_exchange&lt;/code&gt;&lt;/a&gt;, this function is allowed to spuriously fail even when the comparison succeeds, which can result in more efficient code on some platforms. The return value is a result indicating whether the new value was written and containing the previous value.</source>
          <target state="translated">&lt;a href=&quot;#method.compare_exchange&quot;&gt; &lt;code&gt;compare_exchange&lt;/code&gt; &lt;/a&gt;とは異なり、この関数は、比較が成功した場合でも誤って失敗することを許可します。これにより、一部のプラットフォームではより効率的なコードが得られます。戻り値は、新しい値が書き込まれ、以前の値が含まれているかどうかを示す結果です。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
