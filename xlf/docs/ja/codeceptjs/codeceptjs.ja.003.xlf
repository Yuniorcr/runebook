<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="codeceptjs">
    <body>
      <group id="codeceptjs">
        <trans-unit id="40e3da7a34426e713e445b29bdc1153e217ed16d" translate="yes" xml:space="preserve">
          <source>Presses a key on a focused element. Special keys like 'Enter', 'Control', &lt;a href=&quot;https://code.google.com/p/selenium/wiki/JsonWireProtocol#/session/:sessionId/element/:id/value&quot;&gt;etc (opens new window)&lt;/a&gt; will be replaced with corresponding unicode. If modifier key is used (Control, Command, Alt, Shift) in array, it will be released afterwards.</source>
          <target state="translated">フォーカスされた要素のキーを押します。'Enter'、 'C​​ontrol'&lt;a href=&quot;https://code.google.com/p/selenium/wiki/JsonWireProtocol#/session/:sessionId/element/:id/value&quot;&gt;などの&lt;/a&gt;特別なキー（新しいウィンドウを開きます）は、対応するユニコードに置き換えられます。配列で修飾キー（Control、Command、Alt、Shift）を使用すると、後で解放されます。</target>
        </trans-unit>
        <trans-unit id="3849eb902fbc2bb42000f2789d3993626e2d2a79" translate="yes" xml:space="preserve">
          <source>Presses a key on a focused element. Special keys like 'Enter', 'Control', &lt;a href=&quot;https://code.google.com/p/selenium/wiki/JsonWireProtocol#/session/:sessionId/element/:id/value&quot;&gt;etc&lt;/a&gt; will be replaced with corresponding unicode. If modifier key is used (Control, Command, Alt, Shift) in array, it will be released afterwards.</source>
          <target state="translated">フォーカスされた要素のキーを押します。「を入力」、「コントロール」のような特殊キー&lt;a href=&quot;https://code.google.com/p/selenium/wiki/JsonWireProtocol#/session/:sessionId/element/:id/value&quot;&gt;などが&lt;/a&gt;対応するUnicodeに置き換えられます。修飾キーが配列で使用されている場合（Control、Command、Alt、Shift）、後で解放されます。</target>
        </trans-unit>
        <trans-unit id="2b68bb22f9d2c8c0391d93300c1ed460b697befe" translate="yes" xml:space="preserve">
          <source>Prints all available methods of &lt;code&gt;I&lt;/code&gt; to console</source>
          <target state="translated">&lt;code&gt;I&lt;/code&gt; の使用可能なすべてのメソッドをコンソールに出力します</target>
        </trans-unit>
        <trans-unit id="a1e89128b9db4b25e947fbd75a85386e9d2004d4" translate="yes" xml:space="preserve">
          <source>Prints debugging information concerning the local environment</source>
          <target state="translated">ローカル環境に関するデバッグ情報を表示します。</target>
        </trans-unit>
        <trans-unit id="2ee5ed93cc6fa1932f3362f400b843124c501230" translate="yes" xml:space="preserve">
          <source>Prints test scenarios without executing them</source>
          <target state="translated">実行せずにテストシナリオを印刷する</target>
        </trans-unit>
        <trans-unit id="14daa113536d8253331dd78c208c256a9375fa17" translate="yes" xml:space="preserve">
          <source>Problem: request mocking does not work and in debug mode you see this in output:</source>
          <target state="translated">問題:リクエストのモッキングがうまくいかず、デバッグモードでは出力にこれが表示されます。</target>
        </trans-unit>
        <trans-unit id="5aef942ac8ff2b9437b3a404b6f2ca126f3edc50" translate="yes" xml:space="preserve">
          <source>Produces &lt;code&gt;steps.d.ts&lt;/code&gt; file, which referenced in the very beginning of a test file.</source>
          <target state="translated">生成し &lt;code&gt;steps.d.ts&lt;/code&gt; の非常にテストファイルの最初に参照されるファイルを、。</target>
        </trans-unit>
        <trans-unit id="ff4fc0276e960c348647b647235f68200887c9d2" translate="yes" xml:space="preserve">
          <source>Profile</source>
          <target state="translated">Profile</target>
        </trans-unit>
        <trans-unit id="84083370162d72d8f9d3e15fe561f0204aaadf33" translate="yes" xml:space="preserve">
          <source>Pros</source>
          <target state="translated">Pros</target>
        </trans-unit>
        <trans-unit id="c2dfdb825ac19ef8886164073605851f7838e15e" translate="yes" xml:space="preserve">
          <source>Protractor</source>
          <target state="translated">Protractor</target>
        </trans-unit>
        <trans-unit id="f7f9ee0ea4941e47284fb36a443348f3543e4803" translate="yes" xml:space="preserve">
          <source>Protractor Example</source>
          <target state="translated">分度器の例</target>
        </trans-unit>
        <trans-unit id="e364f6c8f4f86c7e30356dba2c09fe4f25ae6965" translate="yes" xml:space="preserve">
          <source>Protractor Testing with CodeceptJS</source>
          <target state="translated">CodeceptJSによる分度器テスト</target>
        </trans-unit>
        <trans-unit id="df88a6d3dcef749963b90cc85e818bf2192e7bc1" translate="yes" xml:space="preserve">
          <source>Protractor can also be used to test applications built without AngularJS. In this case, you need to disable the angular synchronization feature inside the config:</source>
          <target state="translated">ProtractorはAngularJSを使わずに構築されたアプリケーションのテストにも使えます。この場合、config内でAngular同期機能を無効にする必要があります。</target>
        </trans-unit>
        <trans-unit id="60739083347cd1f2142c1140890d3d05ecff884f" translate="yes" xml:space="preserve">
          <source>Protractor example demonstrates usage of global &lt;code&gt;element&lt;/code&gt; and &lt;code&gt;by&lt;/code&gt; objects. However &lt;code&gt;browser&lt;/code&gt; should be accessed from a helper instance via &lt;code&gt;this.helpers['Protractor']&lt;/code&gt;; We also use &lt;code&gt;chai-as-promised&lt;/code&gt; library to have nice assertions with promises.</source>
          <target state="translated">分度器の例は、グローバル &lt;code&gt;element&lt;/code&gt; 使用とオブジェクト &lt;code&gt;by&lt;/code&gt; 使用を示しています。ただし、 &lt;code&gt;browser&lt;/code&gt; は &lt;code&gt;this.helpers['Protractor']&lt;/code&gt; 介してヘルパーインスタンスからアクセスする必要があります。また、約束の付いた &lt;code&gt;chai-as-promised&lt;/code&gt; ライブラリを使用して、promiseを使用した優れた表明を行います。</target>
        </trans-unit>
        <trans-unit id="9fc22139714c4d907ef3c59e8d21d9b53e71cf13" translate="yes" xml:space="preserve">
          <source>Protractor helper is based on &lt;a href=&quot;http://www.protractortest.org&quot;&gt;Protractor library (opens new window)&lt;/a&gt; and used for testing web applications.</source>
          <target state="translated">分度器ヘルパーは&lt;a href=&quot;http://www.protractortest.org&quot;&gt;分度器ライブラリに&lt;/a&gt;基づいており（新しいウィンドウを開きます）、Webアプリケーションのテストに使用されます。</target>
        </trans-unit>
        <trans-unit id="dac7263d70842f03433601148e83eeb5030ca97e" translate="yes" xml:space="preserve">
          <source>Protractor helper is based on &lt;a href=&quot;http://www.protractortest.org&quot;&gt;Protractor library&lt;/a&gt; and used for testing web applications.</source>
          <target state="translated">分度器ヘルパーは&lt;a href=&quot;http://www.protractortest.org&quot;&gt;分度器ライブラリに&lt;/a&gt;基づいており、Webアプリケーションのテストに使用されます。</target>
        </trans-unit>
        <trans-unit id="3c8515ad045a941505034b570cf91c84424c4d55" translate="yes" xml:space="preserve">
          <source>Protractor requires &lt;a href=&quot;https://codecept.io/quickstart/#prepare-selenium-server&quot;&gt;Selenium Server and ChromeDriver/GeckoDriver to be installed (opens new window)&lt;/a&gt;. To test non-Angular applications please make sure you have &lt;code&gt;angular: false&lt;/code&gt; in configuration file.</source>
          <target state="translated">分度器では、&lt;a href=&quot;https://codecept.io/quickstart/#prepare-selenium-server&quot;&gt;SeleniumサーバーとChromeDriver / GeckoDriverがインストールされている&lt;/a&gt;必要があります（新しいウィンドウが開きます）。非Angularアプリケーションをテストするには、構成ファイルに &lt;code&gt;angular: false&lt;/code&gt; があることを確認してください。</target>
        </trans-unit>
        <trans-unit id="f83f4c1cb18fa6f6c0f9efda82e6bf0147d9e669" translate="yes" xml:space="preserve">
          <source>Protractor requires &lt;a href=&quot;https://codecept.io/quickstart/#prepare-selenium-server&quot;&gt;Selenium Server and ChromeDriver/GeckoDriver to be installed&lt;/a&gt;. To test non-Angular applications please make sure you have &lt;code&gt;angular: false&lt;/code&gt; in configuration file.</source>
          <target state="translated">分度器には、&lt;a href=&quot;https://codecept.io/quickstart/#prepare-selenium-server&quot;&gt;Selenium ServerとChromeDriver / GeckoDriverがインストールされている&lt;/a&gt;必要があります。Angular以外のアプリケーションをテストするには、構成ファイルに &lt;code&gt;angular: false&lt;/code&gt; があることを確認してください。</target>
        </trans-unit>
        <trans-unit id="2c23a1366111a61e3dc62c1c5c4d269758011462" translate="yes" xml:space="preserve">
          <source>Protractor requires Selenium Server to be started and running. To start and stop Selenium automatically install &lt;code&gt;@wdio/selenium-standalone-service&lt;/code&gt;.</source>
          <target state="translated">分度器では、Seleniumサーバーを起動して実行する必要があります。Seleniumを開始および停止するには、 &lt;code&gt;@wdio/selenium-standalone-service&lt;/code&gt; 自動的にインストールします。</target>
        </trans-unit>
        <trans-unit id="e05ad465d2e7b7cf009240fd6413771c7dbb26ce" translate="yes" xml:space="preserve">
          <source>Provide a function description as a first parameter, function should return a promise:</source>
          <target state="translated">最初のパラメータとして関数の説明を提供し、関数はプロミスを返す必要があります。</target>
        </trans-unit>
        <trans-unit id="8514d84a13dc9bca091ec4f251085af7509cb1c9" translate="yes" xml:space="preserve">
          <source>Provide an array for the second argument to select multiple options.</source>
          <target state="translated">複数のオプションを選択するために、第2引数に配列を指定します。</target>
        </trans-unit>
        <trans-unit id="6ae22c161ea98cdfc51e0fe5643ee1613027f054" translate="yes" xml:space="preserve">
          <source>Public API</source>
          <target state="translated">パブリックAPI</target>
        </trans-unit>
        <trans-unit id="f475e0bb1876c07330627db87c50f93a234b1e33" translate="yes" xml:space="preserve">
          <source>Pulls a file from the device.</source>
          <target state="translated">デバイスからファイルを取り出します。</target>
        </trans-unit>
        <trans-unit id="8b962c5248e49ad5e80a98e9a17775f4f17e4645" translate="yes" xml:space="preserve">
          <source>Puppeteer</source>
          <target state="translated">Puppeteer</target>
        </trans-unit>
        <trans-unit id="065879c8e6636d94367db56e89f66071ceb76049" translate="yes" xml:space="preserve">
          <source>Puppeteer Example</source>
          <target state="translated">人形遣いの例</target>
        </trans-unit>
        <trans-unit id="7ba85998ce9fb6a1d589bf1d6e90ddc3979fd94a" translate="yes" xml:space="preserve">
          <source>Puppeteer can also work with Firefox. &lt;a href=&quot;https://codecept.io/helpers/Puppeteer-firefox&quot;&gt;Learn how to set it up&lt;/a&gt;</source>
          <target state="translated">PuppeteerはFirefoxでも動作します。&lt;a href=&quot;https://codecept.io/helpers/Puppeteer-firefox&quot;&gt;設定方法を学ぶ&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8937271ef4cac53671885a03ca83099e5c121cd3" translate="yes" xml:space="preserve">
          <source>Puppeteer commands are asynchronous so a callback function must be async.</source>
          <target state="translated">人形使いのコマンドは非同期なので、コールバック関数は非同期でなければなりません。</target>
        </trans-unit>
        <trans-unit id="1ed2d3d37f5bcd1a6c6221b975cd12d062b6a375" translate="yes" xml:space="preserve">
          <source>Puppeteer has &lt;a href=&quot;https://github.com/GoogleChrome/puppeteer/blob/master/docs/api.md&quot;&gt;nice and elegant API (opens new window)&lt;/a&gt; which you can use inside helpers. Accessing &lt;code&gt;page&lt;/code&gt; instance via &lt;code&gt;this.helpers.Puppeteer.page&lt;/code&gt; from inside a helper.</source>
          <target state="translated">Puppeteerには&lt;a href=&quot;https://github.com/GoogleChrome/puppeteer/blob/master/docs/api.md&quot;&gt;、&lt;/a&gt;ヘルパー内で使用できる素敵でエレガントなAPI（新しいウィンドウが開きます）があります。ヘルパー内から &lt;code&gt;this.helpers.Puppeteer.page&lt;/code&gt; を介して &lt;code&gt;page&lt;/code&gt; インスタンスにアクセスします。</target>
        </trans-unit>
        <trans-unit id="44cf533586f4ecba59625f417469913793d64503" translate="yes" xml:space="preserve">
          <source>Puppeteer has a very &lt;a href=&quot;https://github.com/GoogleChrome/puppeteer/blob/master/docs/api.md&quot;&gt;rich and flexible API&lt;/a&gt;. Sure, you can extend your test suites to use the methods listed there. CodeceptJS already prepares some objects for you and you can use them from your you helpers.</source>
          <target state="translated">Puppeteerには、非常に&lt;a href=&quot;https://github.com/GoogleChrome/puppeteer/blob/master/docs/api.md&quot;&gt;豊富で柔軟なAPIがあります&lt;/a&gt;。もちろん、そこにリストされているメソッドを使用するようにテストスイートを拡張できます。CodeceptJSはすでにいくつかのオブジェクトを準備しており、ヘルパーからそれらを使用できます。</target>
        </trans-unit>
        <trans-unit id="b06b43318edd1a95d3a51290acedd41c7fd3b517" translate="yes" xml:space="preserve">
          <source>Puppeteer starts a browser without showing its window. To see the browser, edit &lt;code&gt;codecept.json&lt;/code&gt; config and set &lt;code&gt;show: true&lt;/code&gt; for Puppeteer:</source>
          <target state="translated">Puppeteerはウィンドウを表示せずにブラウザーを起動します。ブラウザーを表示するには、 &lt;code&gt;codecept.json&lt;/code&gt; 構成を編集し、Puppeteerの &lt;code&gt;show: true&lt;/code&gt; を設定します。</target>
        </trans-unit>
        <trans-unit id="b7e8c083d4680d692e97e537fa0321b84b117713" translate="yes" xml:space="preserve">
          <source>Puppeteer uses different strategies to detect if a page is loaded. In configuration use &lt;code&gt;waitForNavigation&lt;/code&gt; option for that:</source>
          <target state="translated">Puppeteerはさまざまな戦略を使用して、ページがロードされているかどうかを検出します。構成では、そのために &lt;code&gt;waitForNavigation&lt;/code&gt; オプションを使用します。</target>
        </trans-unit>
        <trans-unit id="84f2680d95df677767ad2a02ced7ab510413fa2f" translate="yes" xml:space="preserve">
          <source>QAs</source>
          <target state="translated">QAs</target>
        </trans-unit>
        <trans-unit id="2467c80fb7cdd0df0768bcc064410e21bd71a2ed" translate="yes" xml:space="preserve">
          <source>QuickStart</source>
          <target state="translated">QuickStart</target>
        </trans-unit>
        <trans-unit id="d07133c8504b6a0e98371a1b9afe2ca2855a7270" translate="yes" xml:space="preserve">
          <source>Quickstart</source>
          <target state="translated">Quickstart</target>
        </trans-unit>
        <trans-unit id="cbaaa18133a5ea571bba33bebe1a8cc7e93344f9" translate="yes" xml:space="preserve">
          <source>REST</source>
          <target state="translated">REST</target>
        </trans-unit>
        <trans-unit id="0e719b3143e2b6ccb1fe9c98ac0c69157e0722cc" translate="yes" xml:space="preserve">
          <source>REST API endpoint which allows to perform create / delete requests and</source>
          <target state="translated">REST API エンドポイントは、作成/削除リクエストと</target>
        </trans-unit>
        <trans-unit id="eb17d8a03430f7ed2c77f54e2f18f6fae341e06e" translate="yes" xml:space="preserve">
          <source>REST helper allows to send additional requests to the REST API during acceptance tests. &lt;a href=&quot;http://unirest.io/nodejs.html&quot;&gt;Unirest&lt;/a&gt; library is used to perform requests.</source>
          <target state="translated">RESTヘルパーにより、受け入れテスト中にREST APIに追加のリクエストを送信できます。&lt;a href=&quot;http://unirest.io/nodejs.html&quot;&gt;Unirest&lt;/a&gt;ライブラリは、リクエストを実行するために使用されます。</target>
        </trans-unit>
        <trans-unit id="e26fb0253fe97716b9fa4f463d617cbb777933d5" translate="yes" xml:space="preserve">
          <source>REST helper allows to send additional requests to the REST API during acceptance tests. &lt;a href=&quot;https://github.com/axios/axios&quot;&gt;Axios (opens new window)&lt;/a&gt; library is used to perform requests.</source>
          <target state="translated">RESTヘルパーを使用すると、受け入れテスト中にRESTAPIに追加のリクエストを送信できます。&lt;a href=&quot;https://github.com/axios/axios&quot;&gt;Axios（新しいウィンドウを開く）&lt;/a&gt;ライブラリは、リクエストを実行するために使用されます。</target>
        </trans-unit>
        <trans-unit id="01a0a40d519f377d62cdb66ddf26e5b46a9f93c5" translate="yes" xml:space="preserve">
          <source>REST helper provides basic methods to send requests to application:</source>
          <target state="translated">RESTヘルパーは、アプリケーションにリクエストを送信するための基本的なメソッドを提供します。</target>
        </trans-unit>
        <trans-unit id="b461d03d5b49fd3005114266c0578b80b33a781d" translate="yes" xml:space="preserve">
          <source>React applications require some additional love for end to end testing. At first, it is very hard to test an application which was never designed to be tested! This happens to many React application. While building components developers often forget to keep the element's semantic.</source>
          <target state="translated">Reactアプリケーションでは、エンドツーエンドのテストのためにいくつかの追加の愛を必要とします。最初は、テストされるように設計されていないアプリケーションをテストするのは非常に難しいです。これは多くのReactアプリケーションで起こります。コンポーネントを構築している間、開発者はしばしば要素のセマンティックを保つことを忘れてしまいます。</target>
        </trans-unit>
        <trans-unit id="a6a873d807ab46bbac572d7d36d29e5eb81b1496" translate="yes" xml:space="preserve">
          <source>React locators work via &lt;a href=&quot;https://github.com/baruchvlz/resq&quot;&gt;resq (opens new window)&lt;/a&gt; library, which handles React 16 and above.</source>
          <target state="translated">Reactロケーターは、React 16以降を処理&lt;a href=&quot;https://github.com/baruchvlz/resq&quot;&gt;するresq（新しいウィンドウを開く）&lt;/a&gt;ライブラリを介して機能します。</target>
        </trans-unit>
        <trans-unit id="52499d8864ecc6bafdc64251b205e22644e1f0bf" translate="yes" xml:space="preserve">
          <source>Real Page Objects</source>
          <target state="translated">リアルページオブジェクト</target>
        </trans-unit>
        <trans-unit id="d4f33e47d3b2b0af12574bbd494a84c450c96d32" translate="yes" xml:space="preserve">
          <source>Receive Playwright client from a custom helper by accessing &lt;code&gt;browser&lt;/code&gt; for the Browser object or &lt;code&gt;page&lt;/code&gt; for the current Page object:</source>
          <target state="translated">アクセスして、カスタムヘルパーからの劇作家、クライアントを受信 &lt;code&gt;browser&lt;/code&gt; ブラウザのオブジェクトまたはのための &lt;code&gt;page&lt;/code&gt; 現在のページオブジェクトの：</target>
        </trans-unit>
        <trans-unit id="47dd8f8025ece94d49096ed6f949b6a5d16f50c2" translate="yes" xml:space="preserve">
          <source>Receive Puppeteer client from a custom helper by accessing &lt;code&gt;browser&lt;/code&gt; for the Browser object or &lt;code&gt;page&lt;/code&gt; for the current Page object:</source>
          <target state="translated">アクセスして、カスタムヘルパーから人形遣いクライアントを受け取る &lt;code&gt;browser&lt;/code&gt; ブラウザのオブジェクトまたはのための &lt;code&gt;page&lt;/code&gt; 現在のPageオブジェクトのための：</target>
        </trans-unit>
        <trans-unit id="6b18e65250fe51bcbb7ac2ea4f5873c9c257d6c4" translate="yes" xml:space="preserve">
          <source>Receive a Appium client from a custom helper by accessing &lt;code&gt;browser&lt;/code&gt; property:</source>
          <target state="translated">&lt;code&gt;browser&lt;/code&gt; プロパティにアクセスして、カスタムヘルパーからAppiumクライアントを受け取ります。</target>
        </trans-unit>
        <trans-unit id="2c6a921a87dec3b7be1ca9bb6ec83f03a6573cfd" translate="yes" xml:space="preserve">
          <source>Receive a WebDriver client from a custom helper by accessing &lt;code&gt;browser&lt;/code&gt; property:</source>
          <target state="translated">&lt;code&gt;browser&lt;/code&gt; プロパティにアクセスして、カスタムヘルパーからWebDriverクライアントを受け取ります。</target>
        </trans-unit>
        <trans-unit id="47ef6d2ffab580ce1dfef17c03ce72bff13f9940" translate="yes" xml:space="preserve">
          <source>Receive a WebDriverIO client from a custom helper by accessing &lt;code&gt;browser&lt;/code&gt; property:</source>
          <target state="translated">&lt;code&gt;browser&lt;/code&gt; プロパティにアクセスして、カスタムヘルパーからWebDriverIOクライアントを受け取ります。</target>
        </trans-unit>
        <trans-unit id="cfbb5137925b6ff0a5fe989d878a0765221b34bc" translate="yes" xml:space="preserve">
          <source>Record &amp;amp; Replay mode allows you to record all xhr &amp;amp; fetch requests and save them to file. On next runs those requests can be replayed. By default, it stores all passed requests, but this behavior can be customized with &lt;code&gt;I.mockServer&lt;/code&gt;</source>
          <target state="translated">Record＆Replayモードでは、すべてのxhr＆fetchリクエストを記録し、ファイルに保存できます。次回の実行時に、これらの要求を再生できます。デフォルトでは、渡されたすべてのリクエストが保存されますが、この動作は &lt;code&gt;I.mockServer&lt;/code&gt; でカスタマイズできます。</target>
        </trans-unit>
        <trans-unit id="c47f70f41f36cbaf588ca2a5c5390ec46b311f2d" translate="yes" xml:space="preserve">
          <source>Record/Replay mode is not tested in WebDriver but technically can work with &lt;a href=&quot;https://netflix.github.io/pollyjs/#/examples?id=rest-persister&quot;&gt;REST Persister (opens new window)&lt;/a&gt;</source>
          <target state="translated">記録/再生モードはWebDriverでテストされていませんが、技術的には&lt;a href=&quot;https://netflix.github.io/pollyjs/#/examples?id=rest-persister&quot;&gt;REST Persisterで&lt;/a&gt;動作できます（新しいウィンドウが開きます）</target>
        </trans-unit>
        <trans-unit id="114edfc04a1ab03541bdc80ce064f66a7cfcedbb" translate="yes" xml:space="preserve">
          <source>Recorder</source>
          <target state="translated">Recorder</target>
        </trans-unit>
        <trans-unit id="7ea6763b951f2a35f74af093a867481aac0a1086" translate="yes" xml:space="preserve">
          <source>Refactoring</source>
          <target state="translated">Refactoring</target>
        </trans-unit>
        <trans-unit id="284d7d88eba3ed71662e1ded3c6f362225e0c8fe" translate="yes" xml:space="preserve">
          <source>Refer to following guides to more information on:</source>
          <target state="translated">詳細については、以下のガイドを参照してください。</target>
        </trans-unit>
        <trans-unit id="db1c784524e1b54011a95823026161f7c8517fe0" translate="yes" xml:space="preserve">
          <source>Reference</source>
          <target state="translated">Reference</target>
        </trans-unit>
        <trans-unit id="d07e4357dc3fac0017cf9e24498ab112ec6ade33" translate="yes" xml:space="preserve">
          <source>Registering &lt;code&gt;Step&lt;/code&gt; globally:</source>
          <target state="translated">&lt;code&gt;Step&lt;/code&gt; グローバルに登録する：</target>
        </trans-unit>
        <trans-unit id="d4417cd22c88f685b10e6ff7553917e65ef6a9a1" translate="yes" xml:space="preserve">
          <source>Registering &lt;code&gt;__&lt;/code&gt; globally:</source>
          <target state="translated">&lt;code&gt;__&lt;/code&gt; をグローバルに登録する：</target>
        </trans-unit>
        <trans-unit id="22401807a2e23faefb91cba8e3516d66c81e46fc" translate="yes" xml:space="preserve">
          <source>Relaunches an application.</source>
          <target state="translated">アプリケーションを再起動します。</target>
        </trans-unit>
        <trans-unit id="541755c3d3d17bbfab6143af54338c15261319d7" translate="yes" xml:space="preserve">
          <source>Releases a key in the browser which was previously set to a down state.</source>
          <target state="translated">今までダウン状態に設定されていたブラウザのキーを解放します。</target>
        </trans-unit>
        <trans-unit id="4dc5b76a93b9f16f06fd974329b5dd531a8e3ceb" translate="yes" xml:space="preserve">
          <source>Reload the current page.</source>
          <target state="translated">現在のページをリロードします。</target>
        </trans-unit>
        <trans-unit id="a38c5d50bd59992b9d41a9f23ac2c71a97fe3d5c" translate="yes" xml:space="preserve">
          <source>Reload the page</source>
          <target state="translated">ページの再読み込み</target>
        </trans-unit>
        <trans-unit id="3233d5661131c9e47c617e6d4063c0f8cd4de0f4" translate="yes" xml:space="preserve">
          <source>Reloads page</source>
          <target state="translated">ページをリロード</target>
        </trans-unit>
        <trans-unit id="eddef9a41046e5bbbf71be178224c2322f1300d1" translate="yes" xml:space="preserve">
          <source>Remove an app from the device.</source>
          <target state="translated">端末からアプリを削除します。</target>
        </trans-unit>
        <trans-unit id="6d5b63f0da71fc56b08584ec7a9c77d5551b5753" translate="yes" xml:space="preserve">
          <source>Removes mocked Angular module. If modName not specified - clears all mock modules.</source>
          <target state="translated">モックされたAngularモジュールを削除します。modNameが指定されていない場合-すべてのモックされたモジュールをクリアします。</target>
        </trans-unit>
        <trans-unit id="2d3854f75b15e6afe710ee0345fcdda113316ec7" translate="yes" xml:space="preserve">
          <source>ReportPortal</source>
          <target state="translated">ReportPortal</target>
        </trans-unit>
        <trans-unit id="4a28165bd85132c82d26771bbd29abef42ef343a" translate="yes" xml:space="preserve">
          <source>Reporters</source>
          <target state="translated">Reporters</target>
        </trans-unit>
        <trans-unit id="f7194e6a0d0b838382b202853e7c198d693fbabc" translate="yes" xml:space="preserve">
          <source>Requests</source>
          <target state="translated">Requests</target>
        </trans-unit>
        <trans-unit id="5b3dee3677bcc9736eb819a9140fca1d7501f0c7" translate="yes" xml:space="preserve">
          <source>Requests Using Browser Session</source>
          <target state="translated">ブラウザセッションを利用したリクエスト</target>
        </trans-unit>
        <trans-unit id="1a04dc4f49d1906c9b8f39d673d4f3319dfa8b2a" translate="yes" xml:space="preserve">
          <source>Requests can also be overridden with a function which returns &lt;a href=&quot;https://github.com/axios/axios#request-config&quot;&gt;axois request config (opens new window)&lt;/a&gt;.</source>
          <target state="translated">リクエストは、&lt;a href=&quot;https://github.com/axios/axios#request-config&quot;&gt;axoisリクエスト設定&lt;/a&gt;を返す（新しいウィンドウを開く）関数でオーバーライドすることもできます。</target>
        </trans-unit>
        <trans-unit id="19bd6e69e6a7d1db728904f95fea8d2c827e9ef0" translate="yes" xml:space="preserve">
          <source>Requests can be updated on the fly by using &lt;code&gt;onRequest&lt;/code&gt; function. For instance, you can pass in current session from a cookie.</source>
          <target state="translated">&lt;code&gt;onRequest&lt;/code&gt; 関数を使用すると、リクエストをその場で更新できます。たとえば、Cookieから現在のセッションを渡すことができます。</target>
        </trans-unit>
        <trans-unit id="bff5c4dd0585a4f0e68311b683e36c85f477b138" translate="yes" xml:space="preserve">
          <source>Require</source>
          <target state="translated">Require</target>
        </trans-unit>
        <trans-unit id="73dd60eb63803275fc2458230a021c50c5920915" translate="yes" xml:space="preserve">
          <source>Required objects can be obtained via parameters in tests or via a global &lt;code&gt;inject()&lt;/code&gt; call.</source>
          <target state="translated">必要なオブジェクトは、テストのパラメーターまたはグローバル &lt;code&gt;inject()&lt;/code&gt; 呼び出しを介して取得できます。</target>
        </trans-unit>
        <trans-unit id="b4aed93d38a7275aad2b08f1d965390e818cf1c2" translate="yes" xml:space="preserve">
          <source>Requires &lt;code&gt;nightmare&lt;/code&gt; package to be installed.</source>
          <target state="translated">&lt;code&gt;nightmare&lt;/code&gt; パッケージをインストールする必要があります。</target>
        </trans-unit>
        <trans-unit id="063fa1926cbb8442fa2ba27b97d3d6da16ce9106" translate="yes" xml:space="preserve">
          <source>Requires &lt;code&gt;playwright&lt;/code&gt; package version ^1 to be installed:</source>
          <target state="translated">&lt;code&gt;playwright&lt;/code&gt; パッケージバージョン^ 1をインストールする必要があります。</target>
        </trans-unit>
        <trans-unit id="fbe444f58c1b317a70e54521fdc3d73ccc8bab16" translate="yes" xml:space="preserve">
          <source>Requires &lt;code&gt;puppeteer&lt;/code&gt; package to be installed.</source>
          <target state="translated">&lt;code&gt;puppeteer&lt;/code&gt; パッケージをインストールする必要があります。</target>
        </trans-unit>
        <trans-unit id="a631648e8761d4005bd218de222f86441253ccc8" translate="yes" xml:space="preserve">
          <source>Requires &lt;code&gt;testcafe&lt;/code&gt; package to be installed.</source>
          <target state="translated">&lt;code&gt;testcafe&lt;/code&gt; パッケージをインストールする必要があります。</target>
        </trans-unit>
        <trans-unit id="6c0c7017477a1b056ce9d89135229e970505f6ed" translate="yes" xml:space="preserve">
          <source>Requires Puppeteer helper or WebDriver helper enabled</source>
          <target state="translated">パピーチュアヘルパーまたはWebDriverヘルパーが有効になっている必要があります。</target>
        </trans-unit>
        <trans-unit id="851f378757a0dce41539e8269d58cdb53e14a059" translate="yes" xml:space="preserve">
          <source>Requires described module before run. This option is useful for assertion libraries, so you may &lt;code&gt;--require should&lt;/code&gt; instead of manually invoking &lt;code&gt;require('should')&lt;/code&gt; within each test file. It can be used with relative paths, e.g. &lt;code&gt;&quot;require&quot;: [&quot;/lib/somemodule&quot;]&lt;/code&gt;, and installed packages.</source>
          <target state="translated">実行する前に、説明されているモジュールが必要です。このオプションはアサーションライブラリに役立つため、各テストファイル内で &lt;code&gt;require('should')&lt;/code&gt; を手動で呼び出す代わりに、 &lt;code&gt;--require should&lt;/code&gt; 呼び出すことができます。 &lt;code&gt;&quot;require&quot;: [&quot;/lib/somemodule&quot;]&lt;/code&gt; などの相対パス、およびインストールされたパッケージで使用できます。</target>
        </trans-unit>
        <trans-unit id="069499a028eed62047e7c8708c2fcdbf148cdb21" translate="yes" xml:space="preserve">
          <source>Rerun the test to see the browser.</source>
          <target state="translated">テストを再実行してブラウザを確認します。</target>
        </trans-unit>
        <trans-unit id="3b31c9b567b52248115c11b3cb3e6841f9741142" translate="yes" xml:space="preserve">
          <source>Rerunning Flaky Tests Multiple Times Since 2.4</source>
          <target state="translated">2.4 以降、フラッキーテストを何度も再実行する</target>
        </trans-unit>
        <trans-unit id="04554c47fb754259bc69e2f39679b1d1f30b7ed4" translate="yes" xml:space="preserve">
          <source>Reset headers for the request to default state</source>
          <target state="translated">リクエストのヘッダをデフォルト状態にリセットする</target>
        </trans-unit>
        <trans-unit id="e8055ec8af542ea8a47aaeff9bc82134775d6d72" translate="yes" xml:space="preserve">
          <source>Resize the current window to provided width and height. First parameter can be set to &lt;code&gt;maximize&lt;/code&gt;</source>
          <target state="translated">現在のウィンドウのサイズを指定された幅と高さに変更します。最初のパラメータは &lt;code&gt;maximize&lt;/code&gt; ように設定できます</target>
        </trans-unit>
        <trans-unit id="e9024410674ef71b0ab09b94022c7137156e55a6" translate="yes" xml:space="preserve">
          <source>Resize the current window to provided width and height. First parameter can be set to &lt;code&gt;maximize&lt;/code&gt;.</source>
          <target state="translated">現在のウィンドウのサイズを指定された幅と高さに変更します。最初のパラメータは、を &lt;code&gt;maximize&lt;/code&gt; ように設定できます。</target>
        </trans-unit>
        <trans-unit id="633f6e8b851aad01759e04e23cfe5188859a4d5b" translate="yes" xml:space="preserve">
          <source>Responses</source>
          <target state="translated">Responses</target>
        </trans-unit>
        <trans-unit id="1e7bb78d52e8900ce214cb49a4799abec8233fd9" translate="yes" xml:space="preserve">
          <source>Result will be located at &lt;code&gt;output/index.html&lt;/code&gt; file.</source>
          <target state="translated">結果は &lt;code&gt;output/index.html&lt;/code&gt; ファイルにあります。</target>
        </trans-unit>
        <trans-unit id="d70b759158ba7fee783d205fc9d6e6d2172115f6" translate="yes" xml:space="preserve">
          <source>Result will be located at &lt;code&gt;output/result.xml&lt;/code&gt; file.</source>
          <target state="translated">結果は &lt;code&gt;output/result.xml&lt;/code&gt; ファイルにあります。</target>
        </trans-unit>
        <trans-unit id="13093e568fcffba32cbe1f9796a271c07111d626" translate="yes" xml:space="preserve">
          <source>Retries</source>
          <target state="translated">Retries</target>
        </trans-unit>
        <trans-unit id="afad64b606c7018d2e200f9fe7320e95fe8e9c90" translate="yes" xml:space="preserve">
          <source>Retries each failed step in a test.</source>
          <target state="translated">テストで失敗した各ステップを再試行します。</target>
        </trans-unit>
        <trans-unit id="98fb7e90083b5dee928588120ed4d296eb12cb50" translate="yes" xml:space="preserve">
          <source>Retrieve current context</source>
          <target state="translated">現在のコンテキストを取得する</target>
        </trans-unit>
        <trans-unit id="bb443503a323446c5cb5041e4d13cbdfff0740d6" translate="yes" xml:space="preserve">
          <source>Retrieves a page scroll position and returns it to test. Resumes test execution, so &lt;strong&gt;should be used inside an async function with &lt;code&gt;await&lt;/code&gt;&lt;/strong&gt; operator.</source>
          <target state="translated">ページのスクロール位置を取得して、テストに戻します。テストの実行を再開するため&lt;strong&gt;、 &lt;code&gt;await&lt;/code&gt; &lt;/strong&gt;演算子を&lt;strong&gt;使用した非同期関数内で使用&lt;/strong&gt;する&lt;strong&gt;必要があります&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="4180b4b7cb04304023bbb7e4538f77c6509272e4" translate="yes" xml:space="preserve">
          <source>Retrieves a page title and returns it to test. Resumes test execution, so &lt;strong&gt;should be used inside async with &lt;code&gt;await&lt;/code&gt;&lt;/strong&gt; operator.</source>
          <target state="translated">ページタイトルを取得し、テストに戻します。テストの実行を再開するため&lt;strong&gt;、 &lt;code&gt;await&lt;/code&gt; &lt;/strong&gt;オペレーター&lt;strong&gt;と非同期で使用&lt;/strong&gt;する&lt;strong&gt;必要があります&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="b07562a1f3b0b6eea8614461aaead5baccdf26cd" translate="yes" xml:space="preserve">
          <source>Retrieves a text from an element located by CSS or XPath and returns it to test. Resumes test execution, so &lt;strong&gt;should be used inside async with &lt;code&gt;await&lt;/code&gt;&lt;/strong&gt; operator.</source>
          <target state="translated">CSSまたはXPathによって配置された要素からテキストを取得し、テストに返します。テストの実行を再開するため&lt;strong&gt;、 &lt;code&gt;await&lt;/code&gt; &lt;/strong&gt;オペレーター&lt;strong&gt;と非同期で使用&lt;/strong&gt;する&lt;strong&gt;必要があります&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="b6a3602d8da6ead40381ed023262c94011e8bce4" translate="yes" xml:space="preserve">
          <source>Retrieves a value from a form element located by CSS or XPath and returns it to test. Resumes test execution, so &lt;strong&gt;should be used inside async function with &lt;code&gt;await&lt;/code&gt;&lt;/strong&gt; operator.</source>
          <target state="translated">CSSまたはXPathによって配置されたフォーム要素から値を取得し、テストに返します。テストの実行を再開するため&lt;strong&gt;、 &lt;code&gt;await&lt;/code&gt; &lt;/strong&gt;演算子を&lt;strong&gt;使用して非同期関数内で使用&lt;/strong&gt;する&lt;strong&gt;必要があります&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="f4fb188cd253573953f3e96d7686e078ed691b01" translate="yes" xml:space="preserve">
          <source>Retrieves a value from a form element located by CSS or XPath and returns it to test. Resumes test execution, so &lt;strong&gt;should be used inside async function with &lt;code&gt;await&lt;/code&gt;&lt;/strong&gt; operator. If more than one element is found - value of first element is returned.</source>
          <target state="translated">CSSまたはXPathによって配置されたフォーム要素から値を取得し、それをテストに返します。テストの実行を再開するため&lt;strong&gt;、 &lt;code&gt;await&lt;/code&gt; &lt;/strong&gt;演算子を&lt;strong&gt;使用してasync関数内で使用&lt;/strong&gt;する&lt;strong&gt;必要があります&lt;/strong&gt;。複数の要素が見つかった場合-最初の要素の値が返されます。</target>
        </trans-unit>
        <trans-unit id="766b3104e8054ea06c72ea3a1edaa244cb99cd24" translate="yes" xml:space="preserve">
          <source>Retrieves all texts from an element located by CSS or XPath and returns it to test. Resumes test execution, so &lt;strong&gt;should be used inside async with &lt;code&gt;await&lt;/code&gt;&lt;/strong&gt; operator.</source>
          <target state="translated">CSSまたはXPathによって配置された要素からすべてのテキストを取得し、テストに返します。テストの実行を再開するため&lt;strong&gt;、 &lt;code&gt;await&lt;/code&gt; &lt;/strong&gt;演算子を&lt;strong&gt;使用してasync内で使用&lt;/strong&gt;する&lt;strong&gt;必要があります&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="55fe99cbba0e0300dd49a341998509a46d078e26" translate="yes" xml:space="preserve">
          <source>Retrieves all the innerHTML from elements located by CSS or XPath and returns it to test. Resumes test execution, so &lt;strong&gt;should be used inside async function with &lt;code&gt;await&lt;/code&gt;&lt;/strong&gt; operator.</source>
          <target state="translated">CSSまたはXPathによって配置された要素からすべてのinnerHTMLを取得し、テストに返します。テストの実行を再開するため&lt;strong&gt;、 &lt;code&gt;await&lt;/code&gt; &lt;/strong&gt;演算子を&lt;strong&gt;使用してasync関数内で使用&lt;/strong&gt;する&lt;strong&gt;必要があります&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="9caff694b6c4bcc0afe4c030111ef77e45fdf0b2" translate="yes" xml:space="preserve">
          <source>Retrieves an array of attributes from elements located by CSS or XPath and returns it to test. Resumes test execution, so &lt;strong&gt;should be used inside async with &lt;code&gt;await&lt;/code&gt;&lt;/strong&gt; operator.</source>
          <target state="translated">CSSまたはXPathによって配置された要素から属性の配列を取得し、それをテストに返します。テストの実行を再開するため&lt;strong&gt;、 &lt;code&gt;await&lt;/code&gt; &lt;/strong&gt;演算子を&lt;strong&gt;使用してasync内で使用&lt;/strong&gt;する&lt;strong&gt;必要があります&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="8e2b2b6a23640b6ac5ebb5b7dfad03653d6ee178" translate="yes" xml:space="preserve">
          <source>Retrieves an array of value from a form located by CSS or XPath and returns it to test. Resumes test execution, so &lt;strong&gt;should be used inside async function with &lt;code&gt;await&lt;/code&gt;&lt;/strong&gt; operator.</source>
          <target state="translated">CSSまたはXPathによって配置されたフォームから値の配列を取得し、それをテストに返します。テストの実行を再開するため&lt;strong&gt;、 &lt;code&gt;await&lt;/code&gt; &lt;/strong&gt;演算子を&lt;strong&gt;使用してasync関数内で使用&lt;/strong&gt;する&lt;strong&gt;必要があります&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="6305af7785a6e1fe2d21fb891c7c8938a0c8589e" translate="yes" xml:space="preserve">
          <source>Retrieves an attribute from an element located by CSS or XPath and returns it to test. Resumes test execution, so &lt;strong&gt;should be used inside async with &lt;code&gt;await&lt;/code&gt;&lt;/strong&gt; operator.</source>
          <target state="translated">CSSまたはXPathによって配置された要素から属性を取得し、それをテストに返します。テストの実行を再開するため&lt;strong&gt;、 &lt;code&gt;await&lt;/code&gt; &lt;/strong&gt;オペレーター&lt;strong&gt;と非同期で使用&lt;/strong&gt;する&lt;strong&gt;必要があります&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="8b74dfa2d621a4835236a8a7f25db51f8a04be4f" translate="yes" xml:space="preserve">
          <source>Retrieves an attribute from an element located by CSS or XPath and returns it to test. Resumes test execution, so &lt;strong&gt;should be used inside async with &lt;code&gt;await&lt;/code&gt;&lt;/strong&gt; operator. If more than one element is found - attribute of first element is returned.</source>
          <target state="translated">CSSまたはXPathによって配置された要素から属性を取得し、それをテストに返します。テストの実行を再開するため&lt;strong&gt;、 &lt;code&gt;await&lt;/code&gt; &lt;/strong&gt;演算子を&lt;strong&gt;使用してasync内で使用&lt;/strong&gt;する&lt;strong&gt;必要があります&lt;/strong&gt;。複数の要素が見つかった場合-最初の要素の属性が返されます。</target>
        </trans-unit>
        <trans-unit id="6703356ecbf5df71324c3b9ce6d350c264879dc2" translate="yes" xml:space="preserve">
          <source>Retrieves page source and returns it to test. Resumes test execution, so &lt;strong&gt;should be used inside async function with &lt;code&gt;await&lt;/code&gt;&lt;/strong&gt; operator.</source>
          <target state="translated">ページソースを取得し、テストに返します。テストの実行を再開するため&lt;strong&gt;、 &lt;code&gt;await&lt;/code&gt; &lt;/strong&gt;演算子を&lt;strong&gt;使用してasync関数内で使用&lt;/strong&gt;する&lt;strong&gt;必要があります&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="4afb230c367b7c1a79c1bea84e3c76fba50ac75b" translate="yes" xml:space="preserve">
          <source>Retrieves page source and returns it to test. Resumes test execution, so should be used inside an async function.</source>
          <target state="translated">ページのソースを取得し、それをテストに返します。テストの実行を再開するので、非同期関数内で使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="bbfd7df8a8a14dc25251ce9f6965b21990d169dd" translate="yes" xml:space="preserve">
          <source>Retrieves the innerHTML from an element located by CSS or XPath and returns it to test. Resumes test execution, so &lt;strong&gt;should be used inside an async function with &lt;code&gt;await&lt;/code&gt;&lt;/strong&gt; operator.</source>
          <target state="translated">CSSまたはXPathによって配置された要素からinnerHTMLを取得し、テストに返します。テストの実行を再開するため&lt;strong&gt;、 &lt;code&gt;await&lt;/code&gt; &lt;/strong&gt;演算子を&lt;strong&gt;使用した非同期関数内で使用&lt;/strong&gt;する&lt;strong&gt;必要があります&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="4a46e0e2adae2604c9b47d589658c533aa18d076" translate="yes" xml:space="preserve">
          <source>Retrieves the innerHTML from an element located by CSS or XPath and returns it to test. Resumes test execution, so &lt;strong&gt;should be used inside async function with &lt;code&gt;await&lt;/code&gt;&lt;/strong&gt; operator. Appium: support only web testing</source>
          <target state="translated">CSSまたはXPathによって配置された要素からinnerHTMLを取得し、テストに返します。テストの実行を再開するため&lt;strong&gt;、 &lt;code&gt;await&lt;/code&gt; &lt;/strong&gt;演算子を&lt;strong&gt;使用して非同期関数内で使用&lt;/strong&gt;する&lt;strong&gt;必要があります&lt;/strong&gt;。Appium：Webテストのみをサポート</target>
        </trans-unit>
        <trans-unit id="8cc70fc1495b433f4fd4b299d86941437a1cdd81" translate="yes" xml:space="preserve">
          <source>Retrieves the innerHTML from an element located by CSS or XPath and returns it to test. Resumes test execution, so &lt;strong&gt;should be used inside async function with &lt;code&gt;await&lt;/code&gt;&lt;/strong&gt; operator. If more than one element is found - HTML of first element is returned.</source>
          <target state="translated">CSSまたはXPathによって配置された要素からinnerHTMLを取得し、テストに返します。テストの実行を再開するため&lt;strong&gt;、 &lt;code&gt;await&lt;/code&gt; &lt;/strong&gt;演算子を&lt;strong&gt;使用してasync関数内で使用&lt;/strong&gt;する&lt;strong&gt;必要があります&lt;/strong&gt;。複数の要素が見つかった場合-最初の要素のHTMLが返されます。</target>
        </trans-unit>
        <trans-unit id="260eaaf644586aca4304c03d3421acd2ac46b51b" translate="yes" xml:space="preserve">
          <source>Retry Feature</source>
          <target state="translated">リトライ機能</target>
        </trans-unit>
        <trans-unit id="08ab4a2cc52fce7ef23917b562f73d6ca8e17e3d" translate="yes" xml:space="preserve">
          <source>Retry Scenario</source>
          <target state="translated">再試行シナリオ</target>
        </trans-unit>
        <trans-unit id="0fd09abb183aa607029cd3fdd3325122654a4da7" translate="yes" xml:space="preserve">
          <source>Retry Step</source>
          <target state="translated">リトライステップ</target>
        </trans-unit>
        <trans-unit id="9c26945104722d7cac8e10baf818c00221a015f7" translate="yes" xml:space="preserve">
          <source>Retry rules are available in array &lt;code&gt;recorder.retries&lt;/code&gt;. The last retry rule can be disabled by running &lt;code&gt;recorder.retries.pop()&lt;/code&gt;;</source>
          <target state="translated">再試行ルールは、配列 &lt;code&gt;recorder.retries&lt;/code&gt; 使用できます。最後の再試行ルールは、 &lt;code&gt;recorder.retries.pop()&lt;/code&gt; を実行して無効にすることができます。</target>
        </trans-unit>
        <trans-unit id="a91902f0fe952388b669c62051a0ed4d9fbed301" translate="yes" xml:space="preserve">
          <source>Return the current geo location Resumes test execution, so &lt;strong&gt;should be used inside async function with &lt;code&gt;await&lt;/code&gt;&lt;/strong&gt; operator.</source>
          <target state="translated">現在の地理的位置を返しますテストの実行を再開するため&lt;strong&gt;、 &lt;code&gt;await&lt;/code&gt; &lt;/strong&gt;演算子を&lt;strong&gt;使用してasync関数内で使用&lt;/strong&gt;する&lt;strong&gt;必要があります&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="6f3455878936015a796b84f0b39feb3c655b387f" translate="yes" xml:space="preserve">
          <source>Returns &lt;strong&gt;(&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise (opens new window)&lt;/a&gt;&amp;lt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array&quot;&gt;Array (opens new window)&lt;/a&gt;&amp;lt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object&quot;&gt;object (opens new window)&lt;/a&gt;&amp;gt;&amp;gt; | &lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/undefined&quot;&gt;undefined (opens new window)&lt;/a&gt;)&lt;/strong&gt; all browser logs</source>
          <target state="translated">戻り値&lt;strong&gt;（&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise（新しいウィンドウを開く）&lt;/a&gt; &amp;lt; &lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array&quot;&gt;Array（新しいウィンドウを開く）&lt;/a&gt; &amp;lt; &lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object&quot;&gt;object（新しいウィンドウを開く）&lt;/a&gt; &amp;gt;&amp;gt; | &lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/undefined&quot;&gt;undefined（新しいウィンドウを開く）&lt;/a&gt;）&lt;/strong&gt;すべてのブラウザログ</target>
        </trans-unit>
        <trans-unit id="7cc7777c2c9b82d6a50e5a17795c5c5492dd5fb7" translate="yes" xml:space="preserve">
          <source>Returns &lt;strong&gt;(&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise (opens new window)&lt;/a&gt;&amp;lt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String&quot;&gt;string (opens new window)&lt;/a&gt;&amp;gt; | &lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise (opens new window)&lt;/a&gt;&amp;lt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array&quot;&gt;Array (opens new window)&lt;/a&gt;&amp;lt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String&quot;&gt;string (opens new window)&lt;/a&gt;&amp;gt;&amp;gt;)&lt;/strong&gt; attribute value</source>
          <target state="translated">戻り値&lt;strong&gt;（&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise（新しいウィンドウを開く）&lt;/a&gt; &amp;lt; &lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String&quot;&gt;string（新しいウィンドウを開く）&lt;/a&gt; &amp;gt; | &lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise（新しいウィンドウを開く）&lt;/a&gt; &amp;lt; &lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array&quot;&gt;Array（新しいウィンドウを開く）&lt;/a&gt; &amp;lt; &lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String&quot;&gt;string（新しいウィンドウを開く）&lt;/a&gt; &amp;gt;&amp;gt;）&lt;/strong&gt;属性値</target>
        </trans-unit>
        <trans-unit id="6e7de14b46bd390f4c148941a6313299cbf49035" translate="yes" xml:space="preserve">
          <source>Returns &lt;strong&gt;(&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise (opens new window)&lt;/a&gt;&amp;lt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String&quot;&gt;string (opens new window)&lt;/a&gt;&amp;gt; | &lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise (opens new window)&lt;/a&gt;&amp;lt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array&quot;&gt;Array (opens new window)&lt;/a&gt;&amp;lt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String&quot;&gt;string (opens new window)&lt;/a&gt;&amp;gt;&amp;gt;)&lt;/strong&gt; attribute valueCookie in JSON format. If name not passed returns all cookies for this domain.Multiple cookies can be received by passing query object &lt;code&gt;I.grabCookie({ secure: true});&lt;/code&gt;. If you'd like get all cookies for all urls, use: &lt;code&gt;.grabCookie({ url: null }).&lt;/code&gt;</source>
          <target state="translated">戻り値&lt;strong&gt;（&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise（新しいウィンドウを開く）&lt;/a&gt; &amp;lt; &lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String&quot;&gt;string（新しいウィンドウを開く）&lt;/a&gt; &amp;gt; | &lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise（新しいウィンドウを開く）&lt;/a&gt; &amp;lt; &lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array&quot;&gt;Array（新しいウィンドウを開く）&lt;/a&gt; &amp;lt; &lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String&quot;&gt;string（新しいウィンドウを開く）&lt;/a&gt; &amp;gt;&amp;gt;）&lt;/strong&gt;属性valueCookie inJSON形式。名前が渡されない場合、このドメインのすべてのCookieが返されます。クエリオブジェクト &lt;code&gt;I.grabCookie({ secure: true});&lt;/code&gt; を渡すことにより、複数のCookieを受け取ることができます。。すべてのURLのすべてのCookieを取得する場合は、 &lt;code&gt;.grabCookie({ url: null }).&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7eb1e561074ea9640cc8a34469985ebd772175e4" translate="yes" xml:space="preserve">
          <source>Returns &lt;strong&gt;(&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise (opens new window)&lt;/a&gt;&amp;lt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String&quot;&gt;string (opens new window)&lt;/a&gt;&amp;gt; | &lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise (opens new window)&lt;/a&gt;&amp;lt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array&quot;&gt;Array (opens new window)&lt;/a&gt;&amp;lt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String&quot;&gt;string (opens new window)&lt;/a&gt;&amp;gt;&amp;gt;)&lt;/strong&gt; attribute valueReturns cookie in JSON &lt;a href=&quot;https://code.google.com/p/selenium/wiki/JsonWireProtocol#Cookie_JSON_Object&quot;&gt;format (opens new window)&lt;/a&gt;.</source>
          <target state="translated">戻り値&lt;strong&gt;（&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise（新しいウィンドウを開く）&lt;/a&gt; &amp;lt; &lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String&quot;&gt;string（新しいウィンドウを開く）&lt;/a&gt; &amp;gt; | &lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise（新しいウィンドウを開く）&lt;/a&gt; &amp;lt; &lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array&quot;&gt;Array（新しいウィンドウを開く）&lt;/a&gt; &amp;lt; &lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String&quot;&gt;string（新しいウィンドウを開く）&lt;/a&gt; &amp;gt;&amp;gt;）&lt;/strong&gt;属性値JSON&lt;a href=&quot;https://code.google.com/p/selenium/wiki/JsonWireProtocol#Cookie_JSON_Object&quot;&gt;形式で&lt;/a&gt;Cookieを返します（新しいウィンドウを開きます） ）。</target>
        </trans-unit>
        <trans-unit id="202ab253f7a88ef91fd8106c6cb32f0e14001e47" translate="yes" xml:space="preserve">
          <source>Returns &lt;strong&gt;(&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise (opens new window)&lt;/a&gt;&amp;lt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String&quot;&gt;string (opens new window)&lt;/a&gt;&amp;gt; | &lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise (opens new window)&lt;/a&gt;&amp;lt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array&quot;&gt;Array (opens new window)&lt;/a&gt;&amp;lt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String&quot;&gt;string (opens new window)&lt;/a&gt;&amp;gt;&amp;gt;)&lt;/strong&gt; attribute valueReturns cookie in JSON format. If name not passed returns all cookies for this domain.</source>
          <target state="translated">戻り値&lt;strong&gt;（&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise（新しいウィンドウを開く）&lt;/a&gt; &amp;lt; &lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String&quot;&gt;string（新しいウィンドウを開く）&lt;/a&gt; &amp;gt; | &lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise（新しいウィンドウを開く）&lt;/a&gt; &amp;lt; &lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array&quot;&gt;Array（新しいウィンドウを開く）&lt;/a&gt; &amp;lt; &lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String&quot;&gt;string（新しいウィンドウを開く）&lt;/a&gt; &amp;gt;&amp;gt;）&lt;/strong&gt;属性値JSON形式でCookieを返します。名前が渡されない場合、このドメインのすべてのCookieが返されます。</target>
        </trans-unit>
        <trans-unit id="6b4a6e0dea6b03dbb75b449bf79cf08b168378d1" translate="yes" xml:space="preserve">
          <source>Returns &lt;strong&gt;(&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise (opens new window)&lt;/a&gt;&amp;lt;DOMRect&amp;gt; | &lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise (opens new window)&lt;/a&gt;&amp;lt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number&quot;&gt;number (opens new window)&lt;/a&gt;&amp;gt;)&lt;/strong&gt; Element bounding rectangle</source>
          <target state="translated">戻り値&lt;strong&gt;（&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise（新しいウィンドウを開く）&lt;/a&gt; &amp;lt;DOMRect&amp;gt; | &lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise（新しいウィンドウを開く）&lt;/a&gt; &amp;lt; &lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number&quot;&gt;number（新しいウィンドウを開く）&lt;/a&gt; &amp;gt;）&lt;/strong&gt;要素の境界矩形</target>
        </trans-unit>
        <trans-unit id="99cc5f88381914e63f4a320025c60c453965732b" translate="yes" xml:space="preserve">
          <source>Returns &lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise (opens new window)&lt;/a&gt;&amp;lt;(&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String&quot;&gt;string (opens new window)&lt;/a&gt; | null)&amp;gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise（新しいウィンドウを開く）&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt; &amp;lt;（&lt;/strong&gt;&lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String&quot;&gt;string（新しいウィンドウを開く）&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt; | null）&amp;gt;を&lt;/strong&gt;返します&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="45e896a01c9b0067e39de1b0fb886f9d4464efeb" translate="yes" xml:space="preserve">
          <source>Returns &lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise (opens new window)&lt;/a&gt;&amp;lt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array&quot;&gt;Array (opens new window)&lt;/a&gt;&amp;lt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String&quot;&gt;string (opens new window)&lt;/a&gt;&amp;gt;&amp;gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise（新しいウィンドウを開く）&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt; &amp;lt; &lt;/strong&gt;&lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array&quot;&gt;Array（新しいウィンドウを開く）&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt; &amp;lt; &lt;/strong&gt;&lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String&quot;&gt;string（&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;新しいウィンドウを開く&lt;/strong&gt;&lt;strong&gt;）を&lt;/strong&gt;返します&lt;strong&gt;&amp;gt;&amp;gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0b7cd12cd909a62c72b6f0f89d93ae0f99163b26" translate="yes" xml:space="preserve">
          <source>Returns &lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise (opens new window)&lt;/a&gt;&amp;lt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array&quot;&gt;Array (opens new window)&lt;/a&gt;&amp;lt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String&quot;&gt;string (opens new window)&lt;/a&gt;&amp;gt;&amp;gt;&lt;/strong&gt; CSS value</source>
          <target state="translated">&lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise（新しいウィンドウを開く）&lt;/a&gt; &amp;lt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array&quot;&gt;配列（新しいウィンドウを開く）&lt;/a&gt; &amp;lt; &lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String&quot;&gt;string（新しいウィンドウを開く）&lt;/a&gt; &amp;gt;&amp;gt;&lt;/strong&gt; CSS値を返します</target>
        </trans-unit>
        <trans-unit id="c896ffb3a4db669d237cf8ce54b6f6d756caa79e" translate="yes" xml:space="preserve">
          <source>Returns &lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise (opens new window)&lt;/a&gt;&amp;lt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array&quot;&gt;Array (opens new window)&lt;/a&gt;&amp;lt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String&quot;&gt;string (opens new window)&lt;/a&gt;&amp;gt;&amp;gt;&lt;/strong&gt; HTML code for an element</source>
          <target state="translated">&lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise（新しいウィンドウを開く）&lt;/a&gt; &amp;lt; &lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array&quot;&gt;Array（新しいウィンドウを開く）&lt;/a&gt; &amp;lt; &lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String&quot;&gt;string（新しいウィンドウを開く）&lt;/a&gt; &amp;gt;&amp;gt;&lt;/strong&gt;要素のHTMLコードを返します</target>
        </trans-unit>
        <trans-unit id="bda969b578a0d19ff7bf842adbaeab6f14d5a54e" translate="yes" xml:space="preserve">
          <source>Returns &lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise (opens new window)&lt;/a&gt;&amp;lt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array&quot;&gt;Array (opens new window)&lt;/a&gt;&amp;lt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String&quot;&gt;string (opens new window)&lt;/a&gt;&amp;gt;&amp;gt;&lt;/strong&gt; attribute value</source>
          <target state="translated">&lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise（新しいウィンドウを開く）&lt;/a&gt; &amp;lt; &lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array&quot;&gt;Array（新しいウィンドウを開く）&lt;/a&gt; &amp;lt; &lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String&quot;&gt;string（新しいウィンドウを開く）&lt;/a&gt; &amp;gt;&amp;gt;&lt;/strong&gt;属性値を返します</target>
        </trans-unit>
        <trans-unit id="15060178151240e4e48f425aeb432f583c59f86e" translate="yes" xml:space="preserve">
          <source>Returns &lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise (opens new window)&lt;/a&gt;&amp;lt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array&quot;&gt;Array (opens new window)&lt;/a&gt;&amp;lt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String&quot;&gt;string (opens new window)&lt;/a&gt;&amp;gt;&amp;gt;&lt;/strong&gt; attribute valueAppium: can be used for apps only with several values (&quot;contentDescription&quot;, &quot;text&quot;, &quot;className&quot;, &quot;resourceId&quot;)</source>
          <target state="translated">戻り値&lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise（新しいウィンドウを開く）&lt;/a&gt; &amp;lt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array&quot;&gt;配列（新しいウィンドウを開く）&lt;/a&gt; &amp;lt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String&quot;&gt;文字列（新しいウィンドウを開く）&lt;/a&gt; &amp;gt;&amp;gt;&lt;/strong&gt;属性valueAppium：複数の値（ &quot;contentDescription&quot;、 &quot;text&quot;、 &quot;className&quot;、 &quot;resourceId&quot;を持つアプリにのみ使用できます&quot;）</target>
        </trans-unit>
        <trans-unit id="d35d1e45a263290b5d74d7f7c9f7ba99f1ea3aca" translate="yes" xml:space="preserve">
          <source>Returns &lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise (opens new window)&lt;/a&gt;&amp;lt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array&quot;&gt;Array (opens new window)&lt;/a&gt;&amp;lt;any&amp;gt;&amp;gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise（新しいウィンドウを開く）&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt; &amp;lt; &lt;/strong&gt;&lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array&quot;&gt;Array（新しいウィンドウを開く）&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt; &amp;lt;any &amp;gt;&amp;gt;を&lt;/strong&gt;返します&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cad195311750da1ef70b7492a7217d5c186b8fea" translate="yes" xml:space="preserve">
          <source>Returns &lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise (opens new window)&lt;/a&gt;&amp;lt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number&quot;&gt;number (opens new window)&lt;/a&gt;&amp;gt;&lt;/strong&gt; number of open tabs</source>
          <target state="translated">&lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise（新しいウィンドウを開く）&lt;/a&gt; &amp;lt; &lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number&quot;&gt;number（新しいウィンドウ&lt;/a&gt;&lt;/strong&gt;を開く&lt;strong&gt;）&lt;/strong&gt;&lt;strong&gt; &amp;gt;&lt;/strong&gt;開いているタブの数を返します</target>
        </trans-unit>
        <trans-unit id="60310de406c4565f49b7939d73e7f594ca2f0eb1" translate="yes" xml:space="preserve">
          <source>Returns &lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise (opens new window)&lt;/a&gt;&amp;lt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number&quot;&gt;number (opens new window)&lt;/a&gt;&amp;gt;&lt;/strong&gt; number of visible elements</source>
          <target state="translated">&lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise（新しいウィンドウを開く）&lt;/a&gt; &amp;lt; &lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number&quot;&gt;number（新しいウィンドウを開く）&lt;/a&gt; &amp;gt;&lt;/strong&gt;表示される要素の数を返します</target>
        </trans-unit>
        <trans-unit id="2b3585f49325724fb299f80bd0631f9294b3791d" translate="yes" xml:space="preserve">
          <source>Returns &lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise (opens new window)&lt;/a&gt;&amp;lt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String&quot;&gt;string (opens new window)&lt;/a&gt;&amp;gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise（新しいウィンドウを開く）&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt; &amp;lt; &lt;/strong&gt;&lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String&quot;&gt;string（新しいウィンドウを開く）&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt; &amp;gt;を&lt;/strong&gt;返します&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="94969d585b1a5632e0d51ada89c33201ad57a3e3" translate="yes" xml:space="preserve">
          <source>Returns &lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise (opens new window)&lt;/a&gt;&amp;lt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String&quot;&gt;string (opens new window)&lt;/a&gt;&amp;gt;&lt;/strong&gt; CSS value</source>
          <target state="translated">&lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise（新しいウィンドウを開く）&lt;/a&gt; &amp;lt; &lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String&quot;&gt;string（新しいウィンドウを開く）&lt;/a&gt; &amp;gt;&lt;/strong&gt; CSS値を返します</target>
        </trans-unit>
        <trans-unit id="78906776c3fb7a7a202a58f49a1fa9df01aa1d6d" translate="yes" xml:space="preserve">
          <source>Returns &lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise (opens new window)&lt;/a&gt;&amp;lt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String&quot;&gt;string (opens new window)&lt;/a&gt;&amp;gt;&lt;/strong&gt; HTML code for an element</source>
          <target state="translated">&lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise（新しいウィンドウを開く）&lt;/a&gt; &amp;lt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String&quot;&gt;文字列（新しいウィンドウを開く）&lt;/a&gt; &amp;gt;&lt;/strong&gt;要素のHTMLコードを返します</target>
        </trans-unit>
        <trans-unit id="0d77ee87607d18ec2da7a3f8f839b4a11f70af58" translate="yes" xml:space="preserve">
          <source>Returns &lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise (opens new window)&lt;/a&gt;&amp;lt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String&quot;&gt;string (opens new window)&lt;/a&gt;&amp;gt;&lt;/strong&gt; attribute value</source>
          <target state="translated">&lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise（新しいウィンドウを開く）&lt;/a&gt; &amp;lt; &lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String&quot;&gt;string（新しいウィンドウを開く）&lt;/a&gt; &amp;gt;&lt;/strong&gt;属性値を返します</target>
        </trans-unit>
        <trans-unit id="124a528417730b53a4de95b49312a054cc8daf45" translate="yes" xml:space="preserve">
          <source>Returns &lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise (opens new window)&lt;/a&gt;&amp;lt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String&quot;&gt;string (opens new window)&lt;/a&gt;&amp;gt;&lt;/strong&gt; attribute valueAppium: can be used for apps only with several values (&quot;contentDescription&quot;, &quot;text&quot;, &quot;className&quot;, &quot;resourceId&quot;)</source>
          <target state="translated">&lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise（新しいウィンドウを開く）&lt;/a&gt; &amp;lt; &lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String&quot;&gt;string（新しいウィンドウを開く）&lt;/a&gt; &amp;gt;&lt;/strong&gt;属性valueAppiumを返します：複数の値（ &quot;contentDescription&quot;、 &quot;text&quot;、 &quot;className&quot;、 &quot;resourceId&quot;）を持つアプリにのみ使用できます</target>
        </trans-unit>
        <trans-unit id="e1f8e2af404d7b6280ebba16566a8b68516b5919" translate="yes" xml:space="preserve">
          <source>Returns &lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise (opens new window)&lt;/a&gt;&amp;lt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String&quot;&gt;string (opens new window)&lt;/a&gt;&amp;gt;&lt;/strong&gt; current URL</source>
          <target state="translated">&lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise（新しいウィンドウを開く）&lt;/a&gt; &amp;lt; &lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String&quot;&gt;string（新しいウィンドウを開く）&lt;/a&gt; &amp;gt;&lt;/strong&gt;現在のURLを返します</target>
        </trans-unit>
        <trans-unit id="db052df9b04bd85633eb97370ef3be20bac57cad" translate="yes" xml:space="preserve">
          <source>Returns &lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise (opens new window)&lt;/a&gt;&amp;lt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String&quot;&gt;string (opens new window)&lt;/a&gt;&amp;gt;&lt;/strong&gt; source code</source>
          <target state="translated">&lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise（新しいウィンドウを開く）&lt;/a&gt; &amp;lt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String&quot;&gt;文字列（新しいウィンドウを開く）&lt;/a&gt; &amp;gt;&lt;/strong&gt;ソースコードを返します</target>
        </trans-unit>
        <trans-unit id="e20279e4835dc68b3eea325ac926b6b33137e812" translate="yes" xml:space="preserve">
          <source>Returns &lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise (opens new window)&lt;/a&gt;&amp;lt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String&quot;&gt;string (opens new window)&lt;/a&gt;&amp;gt;&lt;/strong&gt; title</source>
          <target state="translated">&lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise（新しいウィンドウを開く）&lt;/a&gt; &amp;lt; &lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String&quot;&gt;string（新しいウィンドウを開く）&lt;/a&gt; &amp;gt;&lt;/strong&gt; titleを返します</target>
        </trans-unit>
        <trans-unit id="c454d121189eab941bca7bc1ca5de96d74dd6cd9" translate="yes" xml:space="preserve">
          <source>Returns &lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise (opens new window)&lt;/a&gt;&amp;lt;PageScrollPosition&amp;gt;&lt;/strong&gt; scroll position</source>
          <target state="translated">&lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promiseを&lt;/a&gt;&lt;/strong&gt;返します&lt;strong&gt;（新しいウィンドウを開きます）&lt;/strong&gt;&lt;strong&gt; &amp;lt;PageScrollPosition&amp;gt;&lt;/strong&gt;スクロール位置</target>
        </trans-unit>
        <trans-unit id="b571c47d1e86a8668441a649ffb10405f880e61d" translate="yes" xml:space="preserve">
          <source>Returns &lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise (opens new window)&lt;/a&gt;&amp;lt;any&amp;gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promiseを&lt;/a&gt;&lt;/strong&gt;返します&lt;strong&gt;（新しいウィンドウを開きます） &amp;lt;any&amp;gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="74450cdc59ed71aa42df834a36997f1d3550a017" translate="yes" xml:space="preserve">
          <source>Returns &lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise (opens new window)&lt;/a&gt;&amp;lt;any&amp;gt;&lt;/strong&gt; Asynchronous scripts can also be executed with &lt;code&gt;executeScript&lt;/code&gt; if a function returns a Promise.</source>
          <target state="translated">&lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promiseを&lt;/a&gt;&lt;/strong&gt;返します&lt;strong&gt;（新しいウィンドウを開きます）&lt;/strong&gt;&lt;strong&gt; &amp;lt;any&amp;gt;&lt;/strong&gt;関数がPromiseを返す場合、 &lt;code&gt;executeScript&lt;/code&gt; を使用して非同期スクリプトを実行することもできます。</target>
        </trans-unit>
        <trans-unit id="0324e09e841841cd318f4fc4fa4f165a2b70c68e" translate="yes" xml:space="preserve">
          <source>Returns &lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise (opens new window)&lt;/a&gt;&amp;lt;any&amp;gt;&lt;/strong&gt; If a function returns a Promise It will wait for it resolution.</source>
          <target state="translated">&lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promiseを&lt;/a&gt;&lt;/strong&gt;返します&lt;strong&gt;（新しいウィンドウを開きます）&lt;/strong&gt;&lt;strong&gt; &amp;lt;any&amp;gt;&lt;/strong&gt;関数がPromiseを返す場合、解決を待ちます。</target>
        </trans-unit>
        <trans-unit id="47395a254cdebe136d619f832d0704874b422d4c" translate="yes" xml:space="preserve">
          <source>Returns &lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise (opens new window)&lt;/a&gt;&amp;lt;any&amp;gt;&lt;/strong&gt; Wrapper for asynchronous &lt;a href=&quot;https://github.com/segmentio/nightmare#evaluatefn-arg1-arg2&quot;&gt;evaluate (opens new window)&lt;/a&gt;. Unlike NightmareJS implementation calling &lt;code&gt;done&lt;/code&gt; will return its first argument.</source>
          <target state="translated">&lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promiseを&lt;/a&gt;&lt;/strong&gt;返します&lt;strong&gt;（新しいウィンドウを開きます）&lt;/strong&gt;&lt;strong&gt; &amp;lt;any&amp;gt;&lt;/strong&gt;非同期&lt;a href=&quot;https://github.com/segmentio/nightmare#evaluatefn-arg1-arg2&quot;&gt;評価&lt;/a&gt;用のラッパー（新しいウィンドウを開きます）。NightmareJS実装とは異なり、 &lt;code&gt;done&lt;/code&gt; を呼び出すと、最初の引数が返されます。</target>
        </trans-unit>
        <trans-unit id="0ef45cfe560fd8f1576c1133dde364b0c9387ba0" translate="yes" xml:space="preserve">
          <source>Returns &lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise (opens new window)&lt;/a&gt;&amp;lt;any&amp;gt;&lt;/strong&gt; Wrapper for synchronous &lt;a href=&quot;https://github.com/segmentio/nightmare#evaluatefn-arg1-arg2&quot;&gt;evaluate (opens new window)&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promiseを&lt;/a&gt;&lt;/strong&gt;返します&lt;strong&gt;（新しいウィンドウを開きます）&lt;/strong&gt;&lt;strong&gt; &amp;lt;any&amp;gt;&lt;/strong&gt;同期&lt;a href=&quot;https://github.com/segmentio/nightmare#evaluatefn-arg1-arg2&quot;&gt;評価&lt;/a&gt;用のラッパー（新しいウィンドウを開きます）</target>
        </trans-unit>
        <trans-unit id="21d807e8e3ea4720f4ef6cd47db40ceced2e5e70" translate="yes" xml:space="preserve">
          <source>Returns &lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise (opens new window)&lt;/a&gt;&amp;lt;any&amp;gt;&lt;/strong&gt; Wraps &lt;a href=&quot;http://webdriver.io/api/protocol/execute&quot;&gt;execute (opens new window)&lt;/a&gt; command.</source>
          <target state="translated">&lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise（新しいウィンドウを開く）を&lt;/a&gt;&lt;/strong&gt;返します&lt;strong&gt;&amp;lt;any&amp;gt;&lt;/strong&gt;&lt;a href=&quot;http://webdriver.io/api/protocol/execute&quot;&gt;実行（新しいウィンドウを開く）&lt;/a&gt;コマンドをラップします。</target>
        </trans-unit>
        <trans-unit id="3e15406232342ae919cc1e611ac370ad4f8e1dbb" translate="yes" xml:space="preserve">
          <source>Returns &lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise (opens new window)&lt;/a&gt;&amp;lt;{latitude: &lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number&quot;&gt;number (opens new window)&lt;/a&gt;, longitude: &lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number&quot;&gt;number (opens new window)&lt;/a&gt;, altitude: &lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number&quot;&gt;number (opens new window)&lt;/a&gt;}&amp;gt;&lt;/strong&gt;</source>
          <target state="translated">戻り値&lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise（新しいウィンドウを開きます）&lt;/a&gt; &amp;lt;{緯度：&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number&quot;&gt;数値（新しいウィンドウを開きます）&lt;/a&gt;、経度：&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number&quot;&gt;数値（新しいウィンドウを開きます）&lt;/a&gt;、高度：&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number&quot;&gt;数値（新しいウィンドウを開きます）&lt;/a&gt; }&amp;gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3f504e27fbf061ba75aa698dc79db8d20bc3f8c6" translate="yes" xml:space="preserve">
          <source>Returns &lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String&quot;&gt;string (opens new window)&lt;/a&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String&quot;&gt;文字列を&lt;/a&gt;&lt;/strong&gt;返し&lt;strong&gt;ます（新しいウィンドウを開きます）&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9c941c325d96ee746bd7d4088dda9fbda9620305" translate="yes" xml:space="preserve">
          <source>Returns an object with &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;, &lt;code&gt;width&lt;/code&gt;, &lt;code&gt;height&lt;/code&gt; keys.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; 、 &lt;code&gt;y&lt;/code&gt; 、 &lt;code&gt;width&lt;/code&gt; 、 &lt;code&gt;height&lt;/code&gt; キーを持つオブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="8445de9963ce0a309fefe8172bbb0c1a83b49d59" translate="yes" xml:space="preserve">
          <source>Returns file names in current directory.</source>
          <target state="translated">カレントディレクトリ内のファイル名を返します。</target>
        </trans-unit>
        <trans-unit id="4190ec0b88013176fb43fddbc7677643b5e29d05" translate="yes" xml:space="preserve">
          <source>Robust Chrome Testing with Puppeteer</source>
          <target state="translated">Puppeteerによる堅牢なクロームテスト</target>
        </trans-unit>
        <trans-unit id="b1b392607deaf29a7e81453e069b7c07a32a6b18" translate="yes" xml:space="preserve">
          <source>Run</source>
          <target state="translated">Run</target>
        </trans-unit>
        <trans-unit id="4e31b6583f3448bf26451b672c9602f1cce18bbb" translate="yes" xml:space="preserve">
          <source>Run &lt;code&gt;basic&lt;/code&gt; suite for all browsers</source>
          <target state="translated">すべてのブラウザーで &lt;code&gt;basic&lt;/code&gt; スイートを実行する</target>
        </trans-unit>
        <trans-unit id="13a9bcf58f7f665b48f3a9a2b8eab6fc1f2914d1" translate="yes" xml:space="preserve">
          <source>Run &lt;code&gt;basic&lt;/code&gt; suite for chrome and &lt;code&gt;smoke&lt;/code&gt; for firefox</source>
          <target state="translated">Chromeの &lt;code&gt;basic&lt;/code&gt; スイートとFirefoxの &lt;code&gt;smoke&lt;/code&gt; を実行する</target>
        </trans-unit>
        <trans-unit id="b216fb014ddac5074fe81df244ec1a371ab8d6c3" translate="yes" xml:space="preserve">
          <source>Run &lt;code&gt;basic&lt;/code&gt; suite for chrome only:</source>
          <target state="translated">クロムのみの &lt;code&gt;basic&lt;/code&gt; スイートを実行します。</target>
        </trans-unit>
        <trans-unit id="d7f7e5044afd205fa90a11340b6417e4a7910444" translate="yes" xml:space="preserve">
          <source>Run Multiple</source>
          <target state="translated">複数の実行</target>
        </trans-unit>
        <trans-unit id="405f5bdedea647d83c00cd39fafe33979ec170c9" translate="yes" xml:space="preserve">
          <source>Run Rerun Since 2.4</source>
          <target state="translated">2.4以降の再実行</target>
        </trans-unit>
        <trans-unit id="69d15c5dc48c3bc917a8cbb3b459970e3193a822" translate="yes" xml:space="preserve">
          <source>Run Workers</source>
          <target state="translated">ランワーカーズ</target>
        </trans-unit>
        <trans-unit id="3ac8dd11af992c92ca27e751f739a82d1574593d" translate="yes" xml:space="preserve">
          <source>Run a test:</source>
          <target state="translated">テストを実行します。</target>
        </trans-unit>
        <trans-unit id="dc65b719dcbb085e14c80e3a34c5e4a755084a35" translate="yes" xml:space="preserve">
          <source>Run all suites for all browsers:</source>
          <target state="translated">すべてのブラウザですべてのスイートを実行します。</target>
        </trans-unit>
        <trans-unit id="ea5882424aed17dc371164413d3cffefbffc812e" translate="yes" xml:space="preserve">
          <source>Run all tests from current dir</source>
          <target state="translated">現在のディレクトリからすべてのテストを実行</target>
        </trans-unit>
        <trans-unit id="dc33325df522d34bed2408a2899f8bb98166cb04" translate="yes" xml:space="preserve">
          <source>Run all tests without &quot;@IEOnly&quot; word in name</source>
          <target state="translated">名前に&quot;@IEOnly &quot;の単語を含まないすべてのテストを実行する</target>
        </trans-unit>
        <trans-unit id="4aaecbbee66665b81ea8cc4208beed08dd95d6c7" translate="yes" xml:space="preserve">
          <source>Run basic tests with grep and junit reporter</source>
          <target state="translated">grep と junit レポーターを使った基本的なテストの実行</target>
        </trans-unit>
        <trans-unit id="19092aa569ee7004cd983f8244cfd4f01767d93c" translate="yes" xml:space="preserve">
          <source>Run multiple</source>
          <target state="translated">複数の実行</target>
        </trans-unit>
        <trans-unit id="0a79987f8e91a6c7956f47484ee91bcafe5d7fd7" translate="yes" xml:space="preserve">
          <source>Run multiple suites.</source>
          <target state="translated">複数のスイートを実行します。</target>
        </trans-unit>
        <trans-unit id="70ef98648b1435b516464ac375ba5ec1f80f486b" translate="yes" xml:space="preserve">
          <source>Run multiple suites. Unlike &lt;code&gt;run-workers&lt;/code&gt; spawns processes to execute tests. &lt;a href=&quot;https://codecept.io/advanced#multiple-browsers-execution&quot;&gt;Requires additional configuration&lt;/a&gt; and can be used to execute tests in multiple browsers.</source>
          <target state="translated">複数のスイートを実行します。 &lt;code&gt;run-workers&lt;/code&gt; とは異なり、テストを実行するプロセスを生成します。&lt;a href=&quot;https://codecept.io/advanced#multiple-browsers-execution&quot;&gt;追加の構成が必要であり&lt;/a&gt;、複数のブラウザーでテストを実行するために使用できます。</target>
        </trans-unit>
        <trans-unit id="efc6c38dd1abfa13f9e36ed21953e389b7bbdfe7" translate="yes" xml:space="preserve">
          <source>Run only tests with &quot;signin&quot; word in name</source>
          <target state="translated">名前に &quot;signin &quot;という単語を含むテストのみを実行する</target>
        </trans-unit>
        <trans-unit id="71cbe30509142b3eec365162487ddf23c54c2680" translate="yes" xml:space="preserve">
          <source>Run regression tests specifying different config path:</source>
          <target state="translated">異なる設定パスを指定してリグレッションテストを実行します。</target>
        </trans-unit>
        <trans-unit id="817582e16009198fcecfda3072a58fa72e2bdb7c" translate="yes" xml:space="preserve">
          <source>Run single test [path to codecept.js] [test filename]</source>
          <target state="translated">単一のテストを実行する [codecept.jsへのパス][テストファイル名]</target>
        </trans-unit>
        <trans-unit id="dedcdeb6f32b2ee88556eb063eb5c38b17785d14" translate="yes" xml:space="preserve">
          <source>Run single test in debug mode</source>
          <target state="translated">デバッグモードでの単一テストの実行</target>
        </trans-unit>
        <trans-unit id="7e97f3563af3d7e8311e7f479f3b241ec4d2dcc4" translate="yes" xml:space="preserve">
          <source>Run single test with steps printed</source>
          <target state="translated">ステップが印刷された単一のテストを実行</target>
        </trans-unit>
        <trans-unit id="9e41c1d3d1ecf39de84bd4767ededea0475c12c4" translate="yes" xml:space="preserve">
          <source>Run test with internal logs printed (global promises, and events).</source>
          <target state="translated">内部ログ(グローバルプロミス、イベント)を印刷した状態でテストを実行します。</target>
        </trans-unit>
        <trans-unit id="ab8fdf0ac0c124be432f91e0679013c13a2d4fca" translate="yes" xml:space="preserve">
          <source>Run tests and produce xunit report:</source>
          <target state="translated">テストを実行し、xunitレポートを作成します。</target>
        </trans-unit>
        <trans-unit id="aa98b61f66941ec8f4586b2bf8230a83625071b0" translate="yes" xml:space="preserve">
          <source>Run tests in parallel threads.</source>
          <target state="translated">並列スレッドでテストを実行します。</target>
        </trans-unit>
        <trans-unit id="31351cd4a4b83ff7579e91d6ed5c9e009b5ac84f" translate="yes" xml:space="preserve">
          <source>Run tests multiple times to detect and fix flaky tests.</source>
          <target state="translated">テストを複数回実行して、フラックテストを検出し、修正する。</target>
        </trans-unit>
        <trans-unit id="11125f64499039423e1060a4466c4fbd1606546a" translate="yes" xml:space="preserve">
          <source>Run tests with allure plugin enabled:</source>
          <target state="translated">allure プラグインを有効にしてテストを実行します。</target>
        </trans-unit>
        <trans-unit id="50401e73976f4fa3a94423a6c1b928818312f83a" translate="yes" xml:space="preserve">
          <source>Run tests with plugin enabled:</source>
          <target state="translated">プラグインを有効にしてテストを実行します。</target>
        </trans-unit>
        <trans-unit id="75744a3735a0ff77baa819eeadd5f1fb8b596d7c" translate="yes" xml:space="preserve">
          <source>Run the following command to create a container. To know more &lt;a href=&quot;https://aerokube.com/selenoid/latest/#_option_2_start_selenoid_container&quot;&gt;refer here (opens new window)&lt;/a&gt;</source>
          <target state="translated">次のコマンドを実行して、コンテナーを作成します。詳細&lt;a href=&quot;https://aerokube.com/selenoid/latest/#_option_2_start_selenoid_container&quot;&gt;については、こちらを参照してください（新しいウィンドウが開きます）&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="fc92e94da2c9f57dc988bdd79b05b846d2e7908c" translate="yes" xml:space="preserve">
          <source>Running Several Scenarios</source>
          <target state="translated">複数のシナリオを実行する</target>
        </trans-unit>
        <trans-unit id="7ec9eede60ad8e8637510a86e616531533ada02f" translate="yes" xml:space="preserve">
          <source>Running Tests</source>
          <target state="translated">テストの実行</target>
        </trans-unit>
        <trans-unit id="74ad93cbebf587ac46ab0ef1e3f24139ddd3f535" translate="yes" xml:space="preserve">
          <source>Russian</source>
          <target state="translated">Russian</target>
        </trans-unit>
        <trans-unit id="f6714ba6fbbfa9f41e0113bdff1b54fa43e9ffe1" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;#click&quot;&gt;click&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;#click&quot;&gt;クリックと&lt;/a&gt;同じ</target>
        </trans-unit>
        <trans-unit id="abc0840cf15d4771db0be1f80654f1877c21a9f2" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;#tap&quot;&gt;tap&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;#tap&quot;&gt;タップと&lt;/a&gt;同じ</target>
        </trans-unit>
        <trans-unit id="6f07b83d2e31d894c449039955009319d2c7ef96" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;Before&lt;/code&gt; you can use &lt;code&gt;After&lt;/code&gt; to run teardown for each scenario.</source>
          <target state="translated">&lt;code&gt;Before&lt;/code&gt; と同じですが、 &lt;code&gt;After&lt;/code&gt; を使用して各シナリオのティアダウンを実行できます。</target>
        </trans-unit>
        <trans-unit id="1ad331ccc6d744e11d717226988dee92221b10b5" translate="yes" xml:space="preserve">
          <source>Same syntax is the same for all helpers in CodeceptJS so to learn more about available commands learn &lt;a href=&quot;https://codecept.io/basics&quot;&gt;CodeceptJS Basics&lt;/a&gt;.</source>
          <target state="translated">同じ構文はCodeceptJSのすべてのヘルパーで同じであるため、使用可能なコマンドの詳細については、&lt;a href=&quot;https://codecept.io/basics&quot;&gt;CodeceptJSの基本を&lt;/a&gt;学習してください。</target>
        </trans-unit>
        <trans-unit id="8e1c47c2a79c81519b3b7bdca43afee2568829ff" translate="yes" xml:space="preserve">
          <source>Same thing happens for form fields: they are searched by field names, labels, and so on.</source>
          <target state="translated">同じことがフォームフィールドにも起こります:フィールド名やラベルなどで検索されます。</target>
        </trans-unit>
        <trans-unit id="b2778159c46e81686feb1e25e79dc17c461e7ff6" translate="yes" xml:space="preserve">
          <source>Sample Config</source>
          <target state="translated">サンプル設定</target>
        </trans-unit>
        <trans-unit id="9bb7a7739abd6fc514637ade05ad13e47e60af00" translate="yes" xml:space="preserve">
          <source>Sample mount: &lt;code&gt;-v path/to/codecept.json:/tests&lt;/code&gt;</source>
          <target state="translated">サンプルマウント： &lt;code&gt;-v path/to/codecept.json:/tests&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c6be98fc70d403137beb6c354f6278b6f8869fc6" translate="yes" xml:space="preserve">
          <source>Sauce Service</source>
          <target state="translated">ソースサービス</target>
        </trans-unit>
        <trans-unit id="013bfd20d5a21fd2c3d0eed3c9b347644f4d5bba" translate="yes" xml:space="preserve">
          <source>SauceLabs</source>
          <target state="translated">SauceLabs</target>
        </trans-unit>
        <trans-unit id="d6c25c67ecc6fd031d3c09e51cc2293f0605f370" translate="yes" xml:space="preserve">
          <source>SauceLabs can be configured via wdio service, which should be installed additionally:</source>
          <target state="translated">SauceLabs は wdio サービスを介して設定できますが、これは追加でインストールする必要があります。</target>
        </trans-unit>
        <trans-unit id="055a40f803af696f3ae1319f3934809998f5ca59" translate="yes" xml:space="preserve">
          <source>Saves a screenshot to ouput folder (set in codecept.json or codecept.conf.js). Filename is relative to output folder. Optionally resize the window to the full available page &lt;code&gt;scrollHeight&lt;/code&gt; and &lt;code&gt;scrollWidth&lt;/code&gt; to capture the entire page by passing &lt;code&gt;true&lt;/code&gt; in as the second argument.</source>
          <target state="translated">スクリーンショットを出力フォルダー（codecept.jsonまたはcodecept.conf.jsで設定）に保存します。ファイル名は出力フォルダを基準にしています。オプションで、ウィンドウのサイズを使用可能なページ全体に変更します &lt;code&gt;scrollHeight&lt;/code&gt; と &lt;code&gt;scrollWidth&lt;/code&gt; は、2番目の引数として &lt;code&gt;true&lt;/code&gt; を渡して、ページ全体をキャプチャします。</target>
        </trans-unit>
        <trans-unit id="6f67346e7c91844a2f7f82ff58f77a800cc88952" translate="yes" xml:space="preserve">
          <source>Saves a screenshot to ouput folder (set in codecept.json). Filename is relative to output folder. Optionally resize the window to the full available page &lt;code&gt;scrollHeight&lt;/code&gt; and &lt;code&gt;scrollWidth&lt;/code&gt; to capture the entire page by passing &lt;code&gt;true&lt;/code&gt; in as the second argument.</source>
          <target state="translated">スクリーンショットを出力フォルダーに保存します（codecept.jsonで設定）。ファイル名は出力フォルダを基準にしています。オプションで、2番目の引数として &lt;code&gt;true&lt;/code&gt; を渡すことにより、ウィンドウ全体を利用可能なページ &lt;code&gt;scrollHeight&lt;/code&gt; および &lt;code&gt;scrollWidth&lt;/code&gt; にサイズ変更して、ページ全体をキャプチャします。</target>
        </trans-unit>
        <trans-unit id="1287bd7541e548acaf09bd520da2ce74fa495f69" translate="yes" xml:space="preserve">
          <source>Saves a screenshot to the output dir</source>
          <target state="translated">スクリーンショットを出力ディレクトリに保存します。</target>
        </trans-unit>
        <trans-unit id="22bcc2a6932a909854a5a7153622a54de6a93171" translate="yes" xml:space="preserve">
          <source>Saves screenshot of the specified locator to ouput folder (set in codecept.json or codecept.conf.js). Filename is relative to output folder.</source>
          <target state="translated">指定したロケータのスクリーンショットを出力フォルダ(codecept.jsonまたはcodecept.conf.jsで設定)に保存します。ファイル名は出力フォルダからの相対パスです。</target>
        </trans-unit>
        <trans-unit id="d4441482cb724726d30f3a314769de568ad18d09" translate="yes" xml:space="preserve">
          <source>Scenario('project update test', async (I) =&amp;gt; { Given(); const projectId = await I.have('project');</source>
          <target state="translated">シナリオ（ 'プロジェクト更新テスト'、非同期（I）=&amp;gt; {Given（）; const projectId = await I.have（ 'project'）;</target>
        </trans-unit>
        <trans-unit id="2dd4a83d012acd714fbd600cfb9847611783fea3" translate="yes" xml:space="preserve">
          <source>Scenarios</source>
          <target state="translated">Scenarios</target>
        </trans-unit>
        <trans-unit id="34c1918b2a4b9612d701de55207d79e2d08b7a2b" translate="yes" xml:space="preserve">
          <source>Scenarios are live examples of feature usage. Inside a feature file it should be written inside a &lt;em&gt;Feature&lt;/em&gt; block. Each scenario should contain its title:</source>
          <target state="translated">シナリオは、機能の使用に関する実際の例です。機能ファイル内では、&lt;em&gt;Feature&lt;/em&gt;ブロック内に書き込む必要があります。各シナリオにはタイトルが含まれている必要があります。</target>
        </trans-unit>
        <trans-unit id="0f1e7edea1e62bf8f0750b5063b3924d3112bc6e" translate="yes" xml:space="preserve">
          <source>Scenarios are written in step-by-step manner using Given-When-Then approach. At start, scenario should describe its context with &lt;strong&gt;Given&lt;/strong&gt; keyword:</source>
          <target state="translated">シナリオは、Given-When-Thenアプローチを使用して段階的に記述されます。最初に、シナリオは&lt;strong&gt;与えられた&lt;/strong&gt;キーワードでそのコンテキストを説明する必要があります：</target>
        </trans-unit>
        <trans-unit id="8ef02ceac1eb32f96bf500ca4f1cf50da1f3fbd1" translate="yes" xml:space="preserve">
          <source>Scenarios can become more descriptive when you represent repeating data as tables. Instead of writing several steps &quot;I have product with :num1 $ price in my cart&quot; we can have one step with multiple values in it.</source>
          <target state="translated">繰り返しのデータをテーブルとして表現すると、シナリオがより説明的になります。I have product with :num1 $ price in my cart &quot;という複数のステップを書く代わりに、複数の値を含む1つのステップを持つことができます。</target>
        </trans-unit>
        <trans-unit id="a2ee6ad7423825a816eadc12664a35e00eb60a06" translate="yes" xml:space="preserve">
          <source>Screenshot on Failure</source>
          <target state="translated">失敗のスクリーンショット</target>
        </trans-unit>
        <trans-unit id="2d995bfdf6ef22b499f2293e11c42b1b5bf347c9" translate="yes" xml:space="preserve">
          <source>Screenshot on failure</source>
          <target state="translated">失敗のスクリーンショット</target>
        </trans-unit>
        <trans-unit id="75b458f6eae110ea130f3961193f50f26eb40778" translate="yes" xml:space="preserve">
          <source>Scroll element into viewport.</source>
          <target state="translated">要素をビューポートにスクロールします。</target>
        </trans-unit>
        <trans-unit id="e2507d5c553f672f570a2e024900210f298de934" translate="yes" xml:space="preserve">
          <source>Scroll page to the bottom</source>
          <target state="translated">ページを下にスクロール</target>
        </trans-unit>
        <trans-unit id="e5f57d1a36e65eb1914017876506fdf92c34a96a" translate="yes" xml:space="preserve">
          <source>Scroll page to the bottom.</source>
          <target state="translated">ページを下までスクロールします。</target>
        </trans-unit>
        <trans-unit id="69a7ea09f965854022556b2ac5bcf712bd973cc3" translate="yes" xml:space="preserve">
          <source>Scroll page to the top</source>
          <target state="translated">ページを上にスクロール</target>
        </trans-unit>
        <trans-unit id="6581343da5dd8e8932f75839b2d131149a3011d0" translate="yes" xml:space="preserve">
          <source>Scroll page to the top.</source>
          <target state="translated">ページを上にスクロールします。</target>
        </trans-unit>
        <trans-unit id="27dda94169d44c7f5cbbf2302ceadd146abe47d5" translate="yes" xml:space="preserve">
          <source>Scrolls to element matched by locator. Extra shift can be set with offsetX and offsetY options</source>
          <target state="translated">ロケータにマッチした要素までスクロールします。offsetX および offsetY オプションで余分なシフトを設定することができます。</target>
        </trans-unit>
        <trans-unit id="8437fe5c928d92697b8e3456167d4cc85dfdf257" translate="yes" xml:space="preserve">
          <source>Scrolls to element matched by locator. Extra shift can be set with offsetX and offsetY options Appium: support only web testing</source>
          <target state="translated">ロケータにマッチした要素までスクロールします。offsetXとoffsetYオプションで余分なシフトを設定可能 Appium:ウェブテストのみサポート</target>
        </trans-unit>
        <trans-unit id="350af05edafad8ee55367d6ae339c2a228786fd8" translate="yes" xml:space="preserve">
          <source>Scrolls to element matched by locator. Extra shift can be set with offsetX and offsetY options.</source>
          <target state="translated">ロケータにマッチした要素までスクロールします。offsetX と offsetY オプションで余分なシフトを設定することができます。</target>
        </trans-unit>
        <trans-unit id="6026b1681a7e0f1ad1fd379047701c73ba57813d" translate="yes" xml:space="preserve">
          <source>Scrolls to the bottom of an element.</source>
          <target state="translated">要素の下までスクロールします。</target>
        </trans-unit>
        <trans-unit id="7b6a158fed009123c92648b80273f0a357fa69e8" translate="yes" xml:space="preserve">
          <source>Scrolls to the left of an element.</source>
          <target state="translated">要素の左にスクロールします。</target>
        </trans-unit>
        <trans-unit id="d634124705b94e0ec75eb5a837550c2edd59e89b" translate="yes" xml:space="preserve">
          <source>Scrolls to the right of an element.</source>
          <target state="translated">要素の右側にスクロールします。</target>
        </trans-unit>
        <trans-unit id="99b9160bb20d84280d04a666c73125d9e34c0aa9" translate="yes" xml:space="preserve">
          <source>Scrolls to the top of an element.</source>
          <target state="translated">要素の先頭にスクロールします。</target>
        </trans-unit>
        <trans-unit id="17c289585eee45e0d4d891e5670d7b637f1f6e1f" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://codecept.io/helpers/MockRequest#mockrequest&quot;&gt;&lt;code&gt;mockRequest&lt;/code&gt; API&lt;/a&gt;</source>
          <target state="translated">参照してください&lt;a href=&quot;https://codecept.io/helpers/MockRequest#mockrequest&quot;&gt; &lt;code&gt;mockRequest&lt;/code&gt; API&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7efc5ca439275632563bc0810612eb479f0c9818" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://github.com/GoogleChrome/puppeteer/blob/master/docs/api.md#pagewaitfornavigationoptions&quot;&gt;Pupeteer's reference (opens new window)&lt;/a&gt;</source>
          <target state="translated">参照してください&lt;a href=&quot;https://github.com/GoogleChrome/puppeteer/blob/master/docs/api.md#pagewaitfornavigationoptions&quot;&gt;Pupeteerの参照は（新しいウィンドウが開きます）&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="022434a063c021b324efb59ec2bd1b2f2d96c14f" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://github.com/GoogleChrome/puppeteer/blob/master/docs/api.md#pagewaitfornavigationoptions&quot;&gt;Pupeteer's reference&lt;/a&gt;</source>
          <target state="translated">参照してください&lt;a href=&quot;https://github.com/GoogleChrome/puppeteer/blob/master/docs/api.md#pagewaitfornavigationoptions&quot;&gt;Pupeteerの参照を&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5839a8d635dcc93b48bb2d2adaab21c8d7b8c591" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://github.com/microsoft/Playwright/blob/master/docs/api.md#pagewaitfornavigationoptions&quot;&gt;Pupeteer's reference (opens new window)&lt;/a&gt;</source>
          <target state="translated">参照してください&lt;a href=&quot;https://github.com/microsoft/Playwright/blob/master/docs/api.md#pagewaitfornavigationoptions&quot;&gt;Pupeteerの参照は（新しいウィンドウが開きます）&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8c315427b938775713aa084d4f054b240c916bae" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://webdriver.io/docs/browserstack-service&quot;&gt;complete reference on webdriver.io (opens new window)&lt;/a&gt;.</source>
          <target state="translated">参照してください&lt;a href=&quot;https://webdriver.io/docs/browserstack-service&quot;&gt;webdriver.ioの完全なリファレンスを（新しいウィンドウが開きます）&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a89fdce36364d388f292e639560dae7f9f1a0480" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://webdriver.io/docs/sauce-service&quot;&gt;complete reference on webdriver.io (opens new window)&lt;/a&gt;.</source>
          <target state="translated">参照してください&lt;a href=&quot;https://webdriver.io/docs/sauce-service&quot;&gt;webdriver.ioの完全なリファレンスを（新しいウィンドウが開きます）&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a4962e5d40b98d6dfece7ad3d3d11db244dbbca0" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://webdriver.io/docs/testingbot-service&quot;&gt;complete reference on webdriver.io (opens new window)&lt;/a&gt;.</source>
          <target state="translated">参照してください&lt;a href=&quot;https://webdriver.io/docs/testingbot-service&quot;&gt;webdriver.ioの完全なリファレンスを（新しいウィンドウが開きます）&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f78a0fd348a8c3c088143e2d60763a7eba0ae02e" translate="yes" xml:space="preserve">
          <source>See complete reference</source>
          <target state="translated">完全なリファレンスを参照してください。</target>
        </trans-unit>
        <trans-unit id="833a1b59e5121dca1483d5b1b564751fc519d571" translate="yes" xml:space="preserve">
          <source>See complete reference on &lt;a href=&quot;https://codecept.io/helpers/ApiDataFactory&quot;&gt;ApiDataFactory (opens new window)&lt;/a&gt; helper</source>
          <target state="translated">&lt;a href=&quot;https://codecept.io/helpers/ApiDataFactory&quot;&gt;ApiDataFactory（新しいウィンドウを開く）&lt;/a&gt;ヘルパーの完全なリファレンスを参照してください</target>
        </trans-unit>
        <trans-unit id="333a498c1507c431f90d8b77190f863c84eeb976" translate="yes" xml:space="preserve">
          <source>See complete reference on &lt;a href=&quot;https://codecept.io/helpers/GraphQL&quot;&gt;GraphQL (opens new window)&lt;/a&gt; helper</source>
          <target state="translated">&lt;a href=&quot;https://codecept.io/helpers/GraphQL&quot;&gt;GraphQL（新しいウィンドウを開く）&lt;/a&gt;ヘルパーの完全なリファレンスを参照してください</target>
        </trans-unit>
        <trans-unit id="5dc73ffb5d4a968aaec2ec19dc4a8c5e7aeab6a4" translate="yes" xml:space="preserve">
          <source>See complete reference on &lt;a href=&quot;https://codecept.io/helpers/GraphQLDataFactory&quot;&gt;GraphQLDataFactory (opens new window)&lt;/a&gt; helper</source>
          <target state="translated">&lt;a href=&quot;https://codecept.io/helpers/GraphQLDataFactory&quot;&gt;GraphQLDataFactory（新しいウィンドウを開く）&lt;/a&gt;ヘルパーの完全なリファレンスを参照してください</target>
        </trans-unit>
        <trans-unit id="687cbd1730d4ca8180026907ef405bd1fdbba69b" translate="yes" xml:space="preserve">
          <source>See complete reference on &lt;a href=&quot;https://codecept.io/helpers/REST&quot;&gt;REST (opens new window)&lt;/a&gt; helper</source>
          <target state="translated">&lt;a href=&quot;https://codecept.io/helpers/REST&quot;&gt;REST（新しいウィンドウを開く）&lt;/a&gt;ヘルパーの完全なリファレンスを参照してください</target>
        </trans-unit>
        <trans-unit id="5f6a0a8c6fa04ac3ffce4e722c07aec1c8fa6fb9" translate="yes" xml:space="preserve">
          <source>See corresponding &lt;a href=&quot;http://webdriver.io/api/mobile/rotate.html&quot;&gt;webdriverio reference&lt;/a&gt;.</source>
          <target state="translated">対応する&lt;a href=&quot;http://webdriver.io/api/mobile/rotate.html&quot;&gt;webdriverioリファレンスを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="d2025fb94570e711ec1811e17b60552181c5bf76" translate="yes" xml:space="preserve">
          <source>See corresponding &lt;a href=&quot;http://webdriver.io/api/mobile/setImmediateValue.html&quot;&gt;webdriverio reference&lt;/a&gt;.</source>
          <target state="translated">対応する&lt;a href=&quot;http://webdriver.io/api/mobile/setImmediateValue.html&quot;&gt;webdriverioリファレンスを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="c1838601e020488d4d06ba20d0451d4d77963a68" translate="yes" xml:space="preserve">
          <source>See corresponding &lt;a href=&quot;http://webdriver.io/api/mobile/setNetworkConnection.html&quot;&gt;webdriverio reference&lt;/a&gt;.</source>
          <target state="translated">対応する&lt;a href=&quot;http://webdriver.io/api/mobile/setNetworkConnection.html&quot;&gt;webdriverioリファレンスを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="d2d3b6faf92f4bc2a52191b39d48ba4bdce1daa0" translate="yes" xml:space="preserve">
          <source>See example:</source>
          <target state="translated">例を参照してください。</target>
        </trans-unit>
        <trans-unit id="d1fd138f5fd5292b9691ec5a00994533496d6e13" translate="yes" xml:space="preserve">
          <source>See examples below:</source>
          <target state="translated">以下の例を参照してください。</target>
        </trans-unit>
        <trans-unit id="28e5a74b9cdfb2150c0a68c2e968041bfa7391ce" translate="yes" xml:space="preserve">
          <source>See full reference for CodeceptJS Puppeteer Helper</source>
          <target state="translated">CodeceptJS人形師ヘルパーのフルリファレンスを見る</target>
        </trans-unit>
        <trans-unit id="0e4194f2eda38c312f92f2370f623ef4dca02eeb" translate="yes" xml:space="preserve">
          <source>See the config example:</source>
          <target state="translated">設定例を参照してください。</target>
        </trans-unit>
        <trans-unit id="e772f531e6c8ba34fc884a1c6275df38b7ab334d" translate="yes" xml:space="preserve">
          <source>See the example for Posts factories:</source>
          <target state="translated">Posts工場の例を参照してください。</target>
        </trans-unit>
        <trans-unit id="5068db9133fc6be487406be030f025199d09e5b0" translate="yes" xml:space="preserve">
          <source>See the example for Users factories:</source>
          <target state="translated">ユーザー工場の例を参照してください。</target>
        </trans-unit>
        <trans-unit id="2e895751becd350a9e6bb3ce36cfa9770375c24c" translate="yes" xml:space="preserve">
          <source>See the example providing a factory for User generation:</source>
          <target state="translated">ユーザー生成のためのファクトリーを提供する例を参照してください。</target>
        </trans-unit>
        <trans-unit id="0bbbbdc9053f2d238b9281d4416c62297eb55446" translate="yes" xml:space="preserve">
          <source>See the example:</source>
          <target state="translated">例を参照してください。</target>
        </trans-unit>
        <trans-unit id="65c86b16dbab8f7d681a84420cc277b0f16ded46" translate="yes" xml:space="preserve">
          <source>See the sample config:</source>
          <target state="translated">サンプル設定を参照してください。</target>
        </trans-unit>
        <trans-unit id="067ec3769735c3fbd410b9853d493c7243798236" translate="yes" xml:space="preserve">
          <source>Select &lt;a href=&quot;https://codecept.io/helpers/Appium/&quot;&gt;Appium helper (opens new window)&lt;/a&gt; when asked.</source>
          <target state="translated">求められ&lt;a href=&quot;https://codecept.io/helpers/Appium/&quot;&gt;たら、Appiumヘルパーを&lt;/a&gt;選択します（新しいウィンドウを開きます）。</target>
        </trans-unit>
        <trans-unit id="273950a2248e9ffd34af5b18871f08d1ce94971b" translate="yes" xml:space="preserve">
          <source>Select &lt;a href=&quot;https://codecept.io/helpers/Appium/&quot;&gt;Appium helper&lt;/a&gt; when asked.</source>
          <target state="translated">尋ねられ&lt;a href=&quot;https://codecept.io/helpers/Appium/&quot;&gt;たらAppiumヘルパーを&lt;/a&gt;選択します。</target>
        </trans-unit>
        <trans-unit id="4d9dc7d891e4f550e79eb65aab9a3a12a86857c9" translate="yes" xml:space="preserve">
          <source>Select config file manually (&lt;code&gt;-c&lt;/code&gt; or &lt;code&gt;--config&lt;/code&gt; option)</source>
          <target state="translated">手動で設定ファイルを選択（ &lt;code&gt;-c&lt;/code&gt; または &lt;code&gt;--config&lt;/code&gt; オプション）</target>
        </trans-unit>
        <trans-unit id="0a29bfdd195a3aace7d215fda862d76540093511" translate="yes" xml:space="preserve">
          <source>Selects a checkbox or radio button. Element is located by label or name or CSS or XPath.</source>
          <target state="translated">チェックボックスまたはラジオボタンを選択します。要素はラベルや名前、CSSやXPathで指定します。</target>
        </trans-unit>
        <trans-unit id="90ba29b15e0b252fe89bc91455e670952ec764fa" translate="yes" xml:space="preserve">
          <source>Selects an option in a drop-down select. Field is searched by label | name | CSS | XPath. Option is selected by visible text or by value.</source>
          <target state="translated">ドロップダウンセレクトでオプションを選択します。フィールドはラベル、名前、CSS、XPathで検索されます。オプションは表示されているテキストまたは値で選択されます。</target>
        </trans-unit>
        <trans-unit id="7fcf32472f53b4b471e0f4f1131cbf84b9f91cc0" translate="yes" xml:space="preserve">
          <source>Selenium - is a toolset for browser test automation</source>
          <target state="translated">Selenium-ブラウザテスト自動化のためのツールセットです。</target>
        </trans-unit>
        <trans-unit id="e8d17f3bc84f194c7c06d01937600261380b023f" translate="yes" xml:space="preserve">
          <source>Selenium Server - to execute and send commands to browser</source>
          <target state="translated">Selenium Server-ブラウザにコマンドを実行して送信するために</target>
        </trans-unit>
        <trans-unit id="2c7ace0f588b8ad5f189682e0c019c650d4a1faf" translate="yes" xml:space="preserve">
          <source>Selenium Standalone Service</source>
          <target state="translated">Seleniumスタンドアロンサービス</target>
        </trans-unit>
        <trans-unit id="01bf18d9fcf98ef2b19f4532c311a59187e8e055" translate="yes" xml:space="preserve">
          <source>Selenium WebDriver is considered to be standard for end to end testing of web applications. Despite its popularity it have its drawbacks, it requires a real browser and Selenium server to control it. This hardens setting it up testing environment for CI server and slows down test execution.</source>
          <target state="translated">Selenium WebDriverはウェブアプリケーションのエンドツーエンドテストの標準と考えられています。その人気とは裏腹に、実際のブラウザとそれを制御するためのSeleniumサーバーを必要とするという欠点があります。これはCIサーバのテスト環境の設定が難しく、テストの実行が遅くなります。</target>
        </trans-unit>
        <trans-unit id="689f2c6fa8a40bc9e810832fc8bfb3ee6ac94365" translate="yes" xml:space="preserve">
          <source>Selenium WebDriver may be complicated from start, as it requires following tools to be installed and started.</source>
          <target state="translated">Selenium WebDriverは、以下のツールをインストールして起動する必要があるため、最初から複雑な作業になるかもしれません。</target>
        </trans-unit>
        <trans-unit id="b860f1ab211dd643c40626bbc4a1873669f14310" translate="yes" xml:space="preserve">
          <source>Selenium in Docker (Selenoid)</source>
          <target state="translated">DockerでのSelenium(セレノイド</target>
        </trans-unit>
        <trans-unit id="f095ed92e75dd5f830c1bf3ec326326a36644f36" translate="yes" xml:space="preserve">
          <source>Selenoid Options</source>
          <target state="translated">セレノイドオプション</target>
        </trans-unit>
        <trans-unit id="f11a4c640b7b76a53b53e39e423d18b1347e330b" translate="yes" xml:space="preserve">
          <source>Selenoid plugin can be started in two ways:</source>
          <target state="translated">セレノイドのプラグインを起動するには、2つの方法があります。</target>
        </trans-unit>
        <trans-unit id="623eddfde4828010d0b87b41a97533eee1cd3638" translate="yes" xml:space="preserve">
          <source>Semantic Locators</source>
          <target state="translated">セマンティックロケータ</target>
        </trans-unit>
        <trans-unit id="485a04931a8039a26249c836145881254c2654c1" translate="yes" xml:space="preserve">
          <source>Send GET request to REST API</source>
          <target state="translated">REST APIへのGETリクエストの送信</target>
        </trans-unit>
        <trans-unit id="381ffae3c0bf4a4ef7d246d855cd3aaf29579644" translate="yes" xml:space="preserve">
          <source>Send GraphQL requests by accessing &lt;code&gt;_executeQuery&lt;/code&gt; method:</source>
          <target state="translated">&lt;code&gt;_executeQuery&lt;/code&gt; メソッドにアクセスしてGraphQLリクエストを送信します。</target>
        </trans-unit>
        <trans-unit id="62f20f785960d3ece4058474b273c42d68da8dbe" translate="yes" xml:space="preserve">
          <source>Send REST requests by accessing &lt;code&gt;_executeRequest&lt;/code&gt; method:</source>
          <target state="translated">&lt;code&gt;_executeRequest&lt;/code&gt; メソッドにアクセスしてRESTリクエストを送信します。</target>
        </trans-unit>
        <trans-unit id="783650e8e39af192da6f02fbce684f4b4c646ce3" translate="yes" xml:space="preserve">
          <source>Send a key event to the device. List of keys: &lt;a href=&quot;https://developer.android.com/reference/android/view/KeyEvent.html&quot;&gt;https://developer.android.com/reference/android/view/KeyEvent.html&lt;/a&gt;</source>
          <target state="translated">キーイベントをデバイスに送信します。キーのリスト：&lt;a href=&quot;https://developer.android.com/reference/android/view/KeyEvent.html&quot;&gt;https&lt;/a&gt; : //developer.android.com/reference/android/view/KeyEvent.html</target>
        </trans-unit>
        <trans-unit id="1aa8b485c5246b0a81aa10f3be06ebd283c16fdf" translate="yes" xml:space="preserve">
          <source>Send query to GraphQL endpoint over http</source>
          <target state="translated">http経由でGraphQLエンドポイントにクエリを送信</target>
        </trans-unit>
        <trans-unit id="7f3ddb3dc45dab22e200ae494abedcf5f3c913c0" translate="yes" xml:space="preserve">
          <source>Send query to GraphQL endpoint over http. Returns a response as a promise.</source>
          <target state="translated">http経由でGraphQLエンドポイントにクエリを送信します。レスポンスをプロミスとして返します。</target>
        </trans-unit>
        <trans-unit id="bb9d9af165d51cd3c67c403407a01ddc64922e72" translate="yes" xml:space="preserve">
          <source>Sends &lt;a href=&quot;https://electron.atom.io/docs/api/web-contents/#contentssendinputeventevent&quot;&gt;input event (opens new window)&lt;/a&gt; on a page. Should be a mouse event like: { type: 'mouseDown', x: args.x, y: args.y, button: &quot;left&quot; }</source>
          <target state="translated">ページ上で&lt;a href=&quot;https://electron.atom.io/docs/api/web-contents/#contentssendinputeventevent&quot;&gt;入力イベントを&lt;/a&gt;送信します（新しいウィンドウを開きます）。次のようなマウスイベントである必要があります：{タイプ： 'mouseDown'、x：args.x、y：args.y、ボタン： &quot;左&quot;}</target>
        </trans-unit>
        <trans-unit id="28cb789787ec3d1d4fdb0c5c51753ef8db874835" translate="yes" xml:space="preserve">
          <source>Sends &lt;a href=&quot;https://electron.atom.io/docs/api/web-contents/#contentssendinputeventevent&quot;&gt;input event&lt;/a&gt; on a page. Should be a mouse event like: { type: 'mouseDown', x: args.x, y: args.y, button: &quot;left&quot; }</source>
          <target state="translated">ページで&lt;a href=&quot;https://electron.atom.io/docs/api/web-contents/#contentssendinputeventevent&quot;&gt;入力イベント&lt;/a&gt;を送信します。次のようなマウスイベントである必要があります：{type： 'mouseDown'、x：args.x、y：args.y、button： &quot;left&quot;}</target>
        </trans-unit>
        <trans-unit id="8589a786417d8609b779c7587f41c824270a3527" translate="yes" xml:space="preserve">
          <source>Sends &lt;a href=&quot;https://electron.atom.io/docs/api/web-contents/#webcontentssendinputeventevent&quot;&gt;input event (opens new window)&lt;/a&gt; on a page. Can submit special keys like 'Enter', 'Backspace', etc</source>
          <target state="translated">ページ上で&lt;a href=&quot;https://electron.atom.io/docs/api/web-contents/#webcontentssendinputeventevent&quot;&gt;入力イベントを&lt;/a&gt;送信します（新しいウィンドウを開きます）。「Enter」、「Backspace」などの特別なキーを送信できます</target>
        </trans-unit>
        <trans-unit id="7800516bba6d585d7bad2c5e7a638da03c1abdc0" translate="yes" xml:space="preserve">
          <source>Sends &lt;a href=&quot;https://electron.atom.io/docs/api/web-contents/#webcontentssendinputeventevent&quot;&gt;input event&lt;/a&gt; on a page. Can submit special keys like 'Enter', 'Backspace', etc</source>
          <target state="translated">ページで&lt;a href=&quot;https://electron.atom.io/docs/api/web-contents/#webcontentssendinputeventevent&quot;&gt;入力イベント&lt;/a&gt;を送信します。「Enter」、「Backspace」などの特別なキーを送信できます</target>
        </trans-unit>
        <trans-unit id="ec3749a0974c79c6c78c4593244bd25c5f471603" translate="yes" xml:space="preserve">
          <source>Sends DELETE request to API.</source>
          <target state="translated">DELETEリクエストをAPIに送信します。</target>
        </trans-unit>
        <trans-unit id="69ad3848b4f7ecfedd2fc6e8820624c48ec9ce40" translate="yes" xml:space="preserve">
          <source>Sends PATCH request to API.</source>
          <target state="translated">PATCHリクエストをAPIに送信します。</target>
        </trans-unit>
        <trans-unit id="ec9fb25f4bc759186d65790aa0bea89d5ce55812" translate="yes" xml:space="preserve">
          <source>Sends POST request to API.</source>
          <target state="translated">POSTリクエストをAPIに送信します。</target>
        </trans-unit>
        <trans-unit id="fa618a74443bacc4be85a1af63891942f3fca9ee" translate="yes" xml:space="preserve">
          <source>Sends PUT request to API.</source>
          <target state="translated">PUTリクエストをAPIに送信します。</target>
        </trans-unit>
        <trans-unit id="162a33788262f9737ba77d94a437395860580408" translate="yes" xml:space="preserve">
          <source>Set &lt;a href=&quot;http://webdriver.io/guide/testrunner/timeouts.html&quot;&gt;WebDriverIO timeouts&lt;/a&gt; in realtime. Appium: support only web testing Timeouts are expected to be passed as object:</source>
          <target state="translated">&lt;a href=&quot;http://webdriver.io/guide/testrunner/timeouts.html&quot;&gt;WebDriverIOタイムアウト&lt;/a&gt;をリアルタイムで設定します。Appium：Webテストのみをサポートタイムアウトはオブジェクトとして渡されることが期待されます：</target>
        </trans-unit>
        <trans-unit id="a65cba7035ddc72ae1a82d3c5a46f5d23a87b861" translate="yes" xml:space="preserve">
          <source>Set &lt;a href=&quot;https://webdriver.io/docs/timeouts&quot;&gt;WebDriver timeouts (opens new window)&lt;/a&gt; in realtime.</source>
          <target state="translated">&lt;a href=&quot;https://webdriver.io/docs/timeouts&quot;&gt;WebDriverのタイムアウト&lt;/a&gt;をリアルタイムで設定します（新しいウィンドウを開きます）。</target>
        </trans-unit>
        <trans-unit id="45c009f50a1560ab747e8c13573f874470bc87f9" translate="yes" xml:space="preserve">
          <source>Set Up steps.d.ts</source>
          <target state="translated">steps.d.tsの設定</target>
        </trans-unit>
        <trans-unit id="a037bc4a89ef92481f7f7bb6d246599b5e4f15db" translate="yes" xml:space="preserve">
          <source>Set a device orientation. Will fail, if app will not set orientation</source>
          <target state="translated">端末の向きを設定します。アプリが方向を設定しない場合は失敗します</target>
        </trans-unit>
        <trans-unit id="bb2420583dd9a772877ef200c6f9e77552ee83cd" translate="yes" xml:space="preserve">
          <source>Set current page</source>
          <target state="translated">現在のページを設定する</target>
        </trans-unit>
        <trans-unit id="88768284b0dbd38726bfdf5a5db51d28e69ff74a" translate="yes" xml:space="preserve">
          <source>Set headers for all next requests</source>
          <target state="translated">すべての次のリクエストにヘッダを設定する</target>
        </trans-unit>
        <trans-unit id="2489467a87b02beead88b63711725bf335dffd35" translate="yes" xml:space="preserve">
          <source>Set headers for the request</source>
          <target state="translated">リクエストのヘッダを設定します。</target>
        </trans-unit>
        <trans-unit id="95ca3da5b05e13d9a007147731b73470f743fcc2" translate="yes" xml:space="preserve">
          <source>Set immediate value in app.</source>
          <target state="translated">アプリで即時値を設定します。</target>
        </trans-unit>
        <trans-unit id="d560786311f1d96c9bcc0219670410e894d9b4c0" translate="yes" xml:space="preserve">
          <source>Set mode via enironment variable, &lt;code&gt;replay&lt;/code&gt; mode by default:</source>
          <target state="translated">環境変数を介してモードを設定し、デフォルトで &lt;code&gt;replay&lt;/code&gt; モード：</target>
        </trans-unit>
        <trans-unit id="a309593068c7c2e3c15d38d7efd249bf09f063d4" translate="yes" xml:space="preserve">
          <source>Set network connection mode.</source>
          <target state="translated">ネットワーク接続モードを設定します。</target>
        </trans-unit>
        <trans-unit id="25a2bd07e00968bce4997ee8190d0e1c6e3bf896" translate="yes" xml:space="preserve">
          <source>Set response auto-redirects OFF</source>
          <target state="translated">レスポンスオートリダイレクトをOFFに設定</target>
        </trans-unit>
        <trans-unit id="a6f103c2f170a25fabe5cb673ae6d723461ede79" translate="yes" xml:space="preserve">
          <source>Set response auto-redirects ON</source>
          <target state="translated">レスポンス自動リダイレクトをONに設定</target>
        </trans-unit>
        <trans-unit id="cb157b756b2814c1a8877f3074c78762d4eaa00a" translate="yes" xml:space="preserve">
          <source>Set the automatic popup response to Accept. This must be set before a popup is triggered.</source>
          <target state="translated">自動ポップアップの応答をAcceptに設定します。これは、ポップアップがトリガーされる前に設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="431e3067d64835671cab7d5a53d9ede78d97cb5b" translate="yes" xml:space="preserve">
          <source>Set the automatic popup response to Cancel/Dismiss. This must be set before a popup is triggered.</source>
          <target state="translated">ポップアップの自動応答を「キャンセル/中止」に設定します。これは、ポップアップが起動する前に設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="bc3d02f053b3b655db78fd77f92703e53ba86da3" translate="yes" xml:space="preserve">
          <source>Set the current geo location</source>
          <target state="translated">現在のジオロケーションを設定する</target>
        </trans-unit>
        <trans-unit id="7ab825c598446256746994267ac9c557fb6e4797" translate="yes" xml:space="preserve">
          <source>Set the number of taps in second argument. Optionally define the context element by third argument.</source>
          <target state="translated">第2引数にタップ数を設定します。オプションで第3引数でコンテキスト要素を定義します。</target>
        </trans-unit>
        <trans-unit id="22de2c6794d0044043ab9e0317394b2510c6b63e" translate="yes" xml:space="preserve">
          <source>Set timeout for the request</source>
          <target state="translated">リクエストのタイムアウトを設定する</target>
        </trans-unit>
        <trans-unit id="da574cb621f2823122b91de999ab3147d36a879c" translate="yes" xml:space="preserve">
          <source>Sets a cookie</source>
          <target state="translated">クッキーを設定する</target>
        </trans-unit>
        <trans-unit id="0de8e0190844de1c128747647133bdd80a93e489" translate="yes" xml:space="preserve">
          <source>Sets a directory to where save files. Allows to test file downloads. Should be used with &lt;a href=&quot;https://codecept.io/helpers/FileSystem&quot;&gt;FileSystem helper (opens new window)&lt;/a&gt; to check that file were downloaded correctly.</source>
          <target state="translated">ファイルを保存する場所にディレクトリを設定します。ファイルのダウンロードをテストできます。ファイルが正しくダウンロードされたことを確認&lt;a href=&quot;https://codecept.io/helpers/FileSystem&quot;&gt;するには&lt;/a&gt;、FileSystemヘルパー（新しいウィンドウを開きます）とともに使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="6479a90f34e6e2327a722959551fb74001e712f8" translate="yes" xml:space="preserve">
          <source>Sets cookie(s).</source>
          <target state="translated">クッキーを設定します。</target>
        </trans-unit>
        <trans-unit id="d60b0890a431be3750d67b0f7fe70b5f3af16d7e" translate="yes" xml:space="preserve">
          <source>Setting Up</source>
          <target state="translated">設定</target>
        </trans-unit>
        <trans-unit id="869a7d3a9ca25d6de15bdb645841995850933cc2" translate="yes" xml:space="preserve">
          <source>Setting up CodeceptJS with Protractor</source>
          <target state="translated">CodeceptJSをProtractorで設定する</target>
        </trans-unit>
        <trans-unit id="cdd7bb2816b7a8f88bce0e47be39943bc369516b" translate="yes" xml:space="preserve">
          <source>Setup</source>
          <target state="translated">Setup</target>
        </trans-unit>
        <trans-unit id="cbcda5e1472c6c7a556cd0ba7be55ea13a2e3eef" translate="yes" xml:space="preserve">
          <source>Setup (ApiDataFactory)</source>
          <target state="translated">セットアップ(ApiDataFactory)</target>
        </trans-unit>
        <trans-unit id="278694d055f8dc0f782c12f629c13eb221836e8f" translate="yes" xml:space="preserve">
          <source>Several plugins can be enabled as well:</source>
          <target state="translated">いくつかのプラグインを有効にすることもできます。</target>
        </trans-unit>
        <trans-unit id="106e8b8c146ebd8120c61c66a86a10d167741fa6" translate="yes" xml:space="preserve">
          <source>Shakes the device.</source>
          <target state="translated">装置を振る。</target>
        </trans-unit>
        <trans-unit id="cc59823d5fabf49ccb4730fd8f8914e9a7898753" translate="yes" xml:space="preserve">
          <source>Share your helpers at our &lt;a href=&quot;https://github.com/codeceptjs/CodeceptJS/wiki/Community-Helpers&quot;&gt;Wiki Page (opens new window)&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/codeceptjs/CodeceptJS/wiki/Community-Helpers&quot;&gt;Wikiページで&lt;/a&gt;ヘルパーを共有します（新しいウィンドウが開きます）</target>
        </trans-unit>
        <trans-unit id="cc329c3f9aa282e248e2a78e6c1a0b820b0eaf7e" translate="yes" xml:space="preserve">
          <source>Sharing Data Between Workers</source>
          <target state="translated">労働者間のデータ共有</target>
        </trans-unit>
        <trans-unit id="2a88eb48e590cfb575f793ec1821ab493f045706" translate="yes" xml:space="preserve">
          <source>Sharing browser session with ApiDataFactory or GraphQLDataFactory can be especially useful when you test Single Page Applications</source>
          <target state="translated">ApiDataFactoryやGraphQLDataFactoryとブラウザセッションを共有することは、シングルページアプリケーションをテストする際に特に便利です。</target>
        </trans-unit>
        <trans-unit id="bdc1fd5d3c0f3dcfd55d010426e61bf9451e680d" translate="yes" xml:space="preserve">
          <source>Shell</source>
          <target state="translated">Shell</target>
        </trans-unit>
        <trans-unit id="dbef73b4c7113c8da3915b8e8577bd55d20fff63" translate="yes" xml:space="preserve">
          <source>Short Cuts</source>
          <target state="translated">ショートカット</target>
        </trans-unit>
        <trans-unit id="94d4b1ccc193e1e957985e253bdf12a52a1377d7" translate="yes" xml:space="preserve">
          <source>Shortcut for &lt;code&gt;makeTouchAction&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;makeTouchAction&lt;/code&gt; のショートカット</target>
        </trans-unit>
        <trans-unit id="ab240773e92c6c2b636f6252abc12f0780ed52d1" translate="yes" xml:space="preserve">
          <source>Should be used with &lt;a href=&quot;https://codecept.io/helpers/FileSystem&quot;&gt;FileSystem helper (opens new window)&lt;/a&gt; to check that file were downloaded correctly.</source>
          <target state="translated">ファイルが正しくダウンロードされたことを確認&lt;a href=&quot;https://codecept.io/helpers/FileSystem&quot;&gt;するには&lt;/a&gt;、FileSystemヘルパー（新しいウィンドウを開きます）とともに使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="2f64df420023dd824589a797870e203d76d58494" translate="yes" xml:space="preserve">
          <source>Similar method can be implemented for Playwright &amp;amp; Puppeteer:</source>
          <target state="translated">同様の方法を劇作家とパペッティアにも実装できます。</target>
        </trans-unit>
        <trans-unit id="6a6f3df748f6af9a1a1ef99511614e0cbd1cd7d3" translate="yes" xml:space="preserve">
          <source>Similarly to &lt;code&gt;Before&lt;/code&gt; you can use &lt;code&gt;After&lt;/code&gt; and &lt;code&gt;Fail&lt;/code&gt; inside a scenario. &lt;code&gt;Fail&lt;/code&gt; hook is activated on failure and receive two parameters: &lt;code&gt;test&lt;/code&gt; and current &lt;code&gt;error&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Before&lt;/code&gt; と同様に、シナリオ内で &lt;code&gt;After&lt;/code&gt; と &lt;code&gt;Fail&lt;/code&gt; を使用できます。 &lt;code&gt;Fail&lt;/code&gt; フックは失敗時にアクティブになり、 &lt;code&gt;test&lt;/code&gt; と現在の &lt;code&gt;error&lt;/code&gt; 2つのパラメーターを受け取ります。</target>
        </trans-unit>
        <trans-unit id="63c19e91b6684402f716df8f9a08fb706d5441e6" translate="yes" xml:space="preserve">
          <source>Similarly, CodeceptJS allows you to generate &lt;strong&gt;PageFragments&lt;/strong&gt; and any other abstractions by running the &lt;code&gt;go&lt;/code&gt; command with &lt;code&gt;--type&lt;/code&gt; (or &lt;code&gt;-t&lt;/code&gt;) option:</source>
          <target state="translated">同様に、CodeceptJSでは、-type （または &lt;code&gt;-t&lt;/code&gt; ）オプションを &lt;code&gt;--type&lt;/code&gt; て &lt;code&gt;go&lt;/code&gt; コマンドを実行することにより、&lt;strong&gt;PageFragments&lt;/strong&gt;およびその他の抽象化を生成できます。</target>
        </trans-unit>
        <trans-unit id="11573989d1103235b7dffb7ed73ead58fe7a540a" translate="yes" xml:space="preserve">
          <source>Simulate Touch ID with either valid (match == true) or invalid (match == false) fingerprint.</source>
          <target state="translated">有効な (一致する ==true)または無効な (一致する ==false)指紋で Touch ID をシミュレートします。</target>
        </trans-unit>
        <trans-unit id="68a1412afd5e57c5e41380840f6865e958b90deb" translate="yes" xml:space="preserve">
          <source>Since CodeceptJS 2.3, you can run tests in parallel by using NodeJS workers. This feature requires NodeJS &amp;gt;= 11.6. Use &lt;code&gt;run-workers&lt;/code&gt; command with the number of workers (threads) to split tests.</source>
          <target state="translated">CodeceptJS 2.3以降、NodeJSワーカーを使用してテストを並行して実行できます。この機能には、NodeJS&amp;gt; = 11.6が必要です。ワーカー（スレッド）の数を指定して &lt;code&gt;run-workers&lt;/code&gt; コマンドを使用し、テストを分割します。</target>
        </trans-unit>
        <trans-unit id="9d924a5b1db65db0c351619ba2f57161f93b168b" translate="yes" xml:space="preserve">
          <source>Since CodeceptJS 2.3.3 there is a simple way to enable shared session for browser and data helpers. Install &lt;a href=&quot;https://github.com/codeceptjs/configure&quot;&gt;&lt;code&gt;@codeceptjs/configure&lt;/code&gt; (opens new window)&lt;/a&gt; package:</source>
          <target state="translated">CodeceptJS 2.3.3以降、ブラウザとデータヘルパーの共有セッションを有効にする簡単な方法があります。&lt;a href=&quot;https://github.com/codeceptjs/configure&quot;&gt; &lt;code&gt;@codeceptjs/configure&lt;/code&gt; （新しいウィンドウを開きます）&lt;/a&gt;パッケージをインストールします。</target>
        </trans-unit>
        <trans-unit id="22c22c92516b167e48a8850862fd9d43b049ad6a" translate="yes" xml:space="preserve">
          <source>Skipping</source>
          <target state="translated">Skipping</target>
        </trans-unit>
        <trans-unit id="d9318dfc9bb40977755987003dec8c59bea1e642" translate="yes" xml:space="preserve">
          <source>Smart Wait to locate an element</source>
          <target state="translated">要素を見つけるためのスマートな待ち時間</target>
        </trans-unit>
        <trans-unit id="c5cad87bd00c6e7984876cefb0f1643d6574a8dc" translate="yes" xml:space="preserve">
          <source>SmartWait</source>
          <target state="translated">SmartWait</target>
        </trans-unit>
        <trans-unit id="0e9b6d56a0d9624faca2fbd76751a2c687e687e1" translate="yes" xml:space="preserve">
          <source>SmartWait can be enabled by setting wait option in WebDriver config. Add &lt;code&gt;smartWait: 5000&lt;/code&gt; to wait for additional 5s.</source>
          <target state="translated">SmartWaitは、WebDriver構成で待機オプションを設定することで有効にできます。 &lt;code&gt;smartWait: 5000&lt;/code&gt; を追加して、さらに5秒待機します。</target>
        </trans-unit>
        <trans-unit id="08896a7011d754d1ed29528e735a4ec7e60147ae" translate="yes" xml:space="preserve">
          <source>SmartWait can be enabled by setting wait option in WebDriverIO config. Add &lt;code&gt;&quot;smartWait&quot;: 5000&lt;/code&gt; to wait for additional 5s.</source>
          <target state="translated">SmartWaitは、WebDriverIO構成の待機オプションを設定することで有効にできます。追加 &lt;code&gt;&quot;smartWait&quot;: 5000&lt;/code&gt; 追加5Sを待ちます。</target>
        </trans-unit>
        <trans-unit id="886bc26f868889175f76167da8da37db770d0da6" translate="yes" xml:space="preserve">
          <source>SmartWait doesn't check element for visibility, so tests may fail even element is on a page.</source>
          <target state="translated">SmartWaitは要素が見えるかどうかをチェックしないので、要素がページ上にあってもテストが失敗することがあります。</target>
        </trans-unit>
        <trans-unit id="928abb982eead875a3265bf6eb4995630fb0d9c8" translate="yes" xml:space="preserve">
          <source>SmartWait works with a CSS/XPath locators in &lt;code&gt;click&lt;/code&gt;, &lt;code&gt;seeElement&lt;/code&gt; and other methods. See where it is enabled and where is not:</source>
          <target state="translated">SmartWaitは、 &lt;code&gt;click&lt;/code&gt; 、 &lt;code&gt;seeElement&lt;/code&gt; 、およびその他のメソッドでCSS / XPathロケーターと連携します。有効な場所と無効な場所を確認します。</target>
        </trans-unit>
        <trans-unit id="4ee924fbbe5c9a269b6b854496bf5ed3ce44830a" translate="yes" xml:space="preserve">
          <source>So there is no magic in testing of AngularJS application in CodeceptJS. You just execute regular Protractor commands, packed in a simple high-level API.</source>
          <target state="translated">そのため、CodeceptJSでのAngularJSアプリケーションのテストには何のマジックもありません。シンプルな高レベルAPIに詰め込まれた通常の分度器コマンドを実行するだけです。</target>
        </trans-unit>
        <trans-unit id="fe006693e786db6e0c56212380f73eb403fb9e87" translate="yes" xml:space="preserve">
          <source>Solution: update Puppeteer config to include &lt;code&gt;--disable-web-security&lt;/code&gt; arguments:</source>
          <target state="translated">解決策：Puppeteer構成を更新して、 &lt;code&gt;--disable-web-security&lt;/code&gt; 引数を含めます。</target>
        </trans-unit>
        <trans-unit id="794d5660d1d35a1528deef2c2e1eef0d68fcf3cf" translate="yes" xml:space="preserve">
          <source>Some of the supported key names are:</source>
          <target state="translated">サポートされているキー名の一部は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="7208c775cf3c3adc8d6b9dc1da43701dbfc810a1" translate="yes" xml:space="preserve">
          <source>Sometimes it takes some time for a page to respond to user's actions. Depending on app's performance this can be either slow or fast.</source>
          <target state="translated">ページがユーザーのアクションに反応するまでに時間がかかることがあります。アプリのパフォーマンスにもよりますが、これは遅いか速いかのどちらかになります。</target>
        </trans-unit>
        <trans-unit id="f563bdd805295a83a564d4fa51d6f2cc8cafb135" translate="yes" xml:space="preserve">
          <source>Sometimes it takes some time for a page to respond to user's actions. Depending on app's perfromance this can be either slow or fast.</source>
          <target state="translated">ページがユーザーのアクションに反応するまでに時間がかかることがあります。アプリの性能にもよりますが、これは遅いか速いかのどちらかになります。</target>
        </trans-unit>
        <trans-unit id="9eb4c1f832cb28079156a04b2d24c28ac702b21a" translate="yes" xml:space="preserve">
          <source>Sometimes you need to retrieve a data from a page to use it in next steps of a scenario. Imagine, application generates a password and you want to ensure that user can login using this password.</source>
          <target state="translated">あるシナリオの次のステップで使用するために、ページからデータを取得する必要がある場合があります。アプリケーションがパスワードを生成し、このパスワードを使ってログインできるようにしたい場合を想像してください。</target>
        </trans-unit>
        <trans-unit id="fb1168d40890ffba02a51776265cf02a0a827262" translate="yes" xml:space="preserve">
          <source>Sometimes you need to retrieve data from a page to use it in the following steps of a scenario. Imagine the application generates a password, and you want to ensure that user can login using this password.</source>
          <target state="translated">あるシナリオの次のステップで使用するために、ページからデータを取得する必要があることがあります。アプリケーションがパスワードを生成し、ユーザーがこのパスワードを使ってログインできるようにしたいと想像してください。</target>
        </trans-unit>
        <trans-unit id="c197d5ce5da757b0d160cc68cdac20665ff36a18" translate="yes" xml:space="preserve">
          <source>Start a test by opening a page. Use the &lt;code&gt;I.amOnPage()&lt;/code&gt; command for this:</source>
          <target state="translated">ページを開いてテストを開始します。これには &lt;code&gt;I.amOnPage()&lt;/code&gt; コマンドを使用します。</target>
        </trans-unit>
        <trans-unit id="cbef4d87ea1a0b40a4940da07298533a21d73089" translate="yes" xml:space="preserve">
          <source>Start an arbitrary Android activity during a session.</source>
          <target state="translated">セッション中に任意のAndroidアクティビティを開始します。</target>
        </trans-unit>
        <trans-unit id="faa99e666b09bfc6656274bc0bc55a322d5346ec" translate="yes" xml:space="preserve">
          <source>Start with creating an &lt;code&gt;MyPlaywright&lt;/code&gt; helper using &lt;code&gt;generate:helper&lt;/code&gt; or &lt;code&gt;gh&lt;/code&gt; command:</source>
          <target state="translated">&lt;code&gt;generate:helper&lt;/code&gt; または &lt;code&gt;gh&lt;/code&gt; コマンドを使用して &lt;code&gt;MyPlaywright&lt;/code&gt; ヘルパーを作成することから始めます。</target>
        </trans-unit>
        <trans-unit id="df38f2065f16537b5f945a5f104d16cec0b91df0" translate="yes" xml:space="preserve">
          <source>Start with creating an &lt;code&gt;MyPuppeteer&lt;/code&gt; helper using &lt;code&gt;generate:helper&lt;/code&gt; or &lt;code&gt;gh&lt;/code&gt; command:</source>
          <target state="translated">&lt;code&gt;MyPuppeteer&lt;/code&gt; 、 &lt;code&gt;generate:helper&lt;/code&gt; または &lt;code&gt;gh&lt;/code&gt; コマンドを使用してMyPuppeteerヘルパーを作成します。</target>
        </trans-unit>
        <trans-unit id="0226ae9dcbdbe4e339b7dc2f4a2bfa39d94cfe00" translate="yes" xml:space="preserve">
          <source>Start with creating file &lt;code&gt;bin/parallel.js&lt;/code&gt;.</source>
          <target state="translated">ファイル &lt;code&gt;bin/parallel.js&lt;/code&gt; の作成から始めます。</target>
        </trans-unit>
        <trans-unit id="5c2034c45360b8fe6fa31eb66665ad2b203d3fb8" translate="yes" xml:space="preserve">
          <source>Starting Selenium Server</source>
          <target state="translated">Seleniumサーバの起動</target>
        </trans-unit>
        <trans-unit id="df43e39b48b283836168db75ef927076e615fc1a" translate="yes" xml:space="preserve">
          <source>Starts mocking of http requests. In record mode starts recording of all requests. In replay mode blocks all requests and replaces them with saved.</source>
          <target state="translated">http リクエストのモッキングを開始します。記録モードでは、すべてのリクエストの記録を開始します。再生モードでは、すべてのリクエストをブロックし、保存されたものに置き換えます。</target>
        </trans-unit>
        <trans-unit id="a3808b0d6f92482aefb62858b27bc89bd8fdf66a" translate="yes" xml:space="preserve">
          <source>Step By Step Report</source>
          <target state="translated">ステップバイステップレポート</target>
        </trans-unit>
        <trans-unit id="baa48047d0504ed625a6534181f9614799002447" translate="yes" xml:space="preserve">
          <source>Step Definitions</source>
          <target state="translated">ステップの定義</target>
        </trans-unit>
        <trans-unit id="4ef83d2fb6cf941db835f1e60eb89c18afd537c8" translate="yes" xml:space="preserve">
          <source>Step Object</source>
          <target state="translated">ステップオブジェクト</target>
        </trans-unit>
        <trans-unit id="b3d3ee980e92439bb447866c5bdc52cbde63738b" translate="yes" xml:space="preserve">
          <source>Step definitions are placed in JavaScript file with Given/When/Then functions that map strings from feature file to functions:</source>
          <target state="translated">ステップ定義は、Given/When/Then関数でJavaScriptファイルに配置され、フィーチャーファイルの文字列を関数にマッピングします。</target>
        </trans-unit>
        <trans-unit id="8c6d65f895af48edaeda2ab1f364743f1a0ca8ae" translate="yes" xml:space="preserve">
          <source>Step events provide step objects with following fields:</source>
          <target state="translated">ステップイベントは、以下のフィールドを持つステップオブジェクトを提供します。</target>
        </trans-unit>
        <trans-unit id="86e2b082d0e8bc6a146b47345920ce9fdfb156da" translate="yes" xml:space="preserve">
          <source>StepObjects</source>
          <target state="translated">StepObjects</target>
        </trans-unit>
        <trans-unit id="c7cbecdb145a805da7d7d53fd5148b834740756c" translate="yes" xml:space="preserve">
          <source>StepObjects represent complex actions which involve the usage of multiple web pages. For instance, creating users in the backend, changing permissions, etc. StepObject can be created similarly to PageObjects or PageFragments:</source>
          <target state="translated">StepObject は、複数のウェブページの使用を伴う複雑なアクションを表します。例えば、バックエンドでユーザーを作成したり、パーミッションを変更したりなどです。StepObjectはPageObjectやPageFragmentsと同様に作成することができます。</target>
        </trans-unit>
        <trans-unit id="cf980df6fb420f6f506f82d4c39fa3da38544782" translate="yes" xml:space="preserve">
          <source>StepObjects represent complex actions which involve usage of multiple web pages. For instance, creating users in backend, changing permissions, etc. StepObject can be created similarly to PageObjects or PageFragments:</source>
          <target state="translated">StepObjectは、複数のWebページの利用を伴う複雑なアクションを表します。例えば、バックエンドでユーザーを作成したり、パーミッションを変更したりなどです。StepObjectはPageObjectやPageFragmentsと同様に作成することができます。</target>
        </trans-unit>
        <trans-unit id="192aafddea514fb73ba264406454d326851304fe" translate="yes" xml:space="preserve">
          <source>Steps can be either strings or regular expressions. Parameters from string are passed as function arguments. To define parameters in a string we use &lt;a href=&quot;https://docs.cucumber.io/cucumber/cucumber-expressions/&quot;&gt;Cucumber expressions (opens new window)&lt;/a&gt;</source>
          <target state="translated">ステップは、文字列または正規表現のいずれかです。文字列のパラメータは関数の引数として渡されます。文字列でパラメータを定義するには、&lt;a href=&quot;https://docs.cucumber.io/cucumber/cucumber-expressions/&quot;&gt;Cucumber式&lt;/a&gt;を使用します（新しいウィンドウを開きます）</target>
        </trans-unit>
        <trans-unit id="461036301bb6091a9d8b11b6ee26676d0abdd1c3" translate="yes" xml:space="preserve">
          <source>Steps can be either strings or regular expressions. Parameters from string are passed as function arguments. To define parameters in a string we use &lt;a href=&quot;https://docs.cucumber.io/cucumber/cucumber-expressions/&quot;&gt;Cucumber expressions&lt;/a&gt;</source>
          <target state="translated">ステップは文字列または正規表現のいずれかです。文字列のパラメータは、関数の引数として渡されます。文字列のパラメータを定義するには、&lt;a href=&quot;https://docs.cucumber.io/cucumber/cucumber-expressions/&quot;&gt;キュウリ式&lt;/a&gt;を使用します</target>
        </trans-unit>
        <trans-unit id="43a1f02f811190703678e0cc1d87fa782f0048bd" translate="yes" xml:space="preserve">
          <source>Steps in background are defined the same way as in scenarios.</source>
          <target state="translated">背景のステップは、シナリオと同じように定義されています。</target>
        </trans-unit>
        <trans-unit id="ccb952823faf9cedf36e274b9205e4744e9388da" translate="yes" xml:space="preserve">
          <source>Steps prefixed with &lt;code&gt;__&lt;/code&gt; will be printed as nested steps in &lt;code&gt;--steps&lt;/code&gt; output:</source>
          <target state="translated">接頭辞 &lt;code&gt;__&lt;/code&gt; が付いたステップは、 &lt;code&gt;--steps&lt;/code&gt; 出力にネストされたステップとして出力されます。</target>
        </trans-unit>
        <trans-unit id="8f240afe4b99a709cace817dc39136c74b0b2ee9" translate="yes" xml:space="preserve">
          <source>Stopping a server from a previous example can be done in a similar manner. Create a teardown file and add it to &lt;code&gt;codecept.json&lt;/code&gt;:</source>
          <target state="translated">前の例のサーバーの停止は、同様の方法で実行できます。分解ファイルを作成し、それを &lt;code&gt;codecept.json&lt;/code&gt; に追加します。</target>
        </trans-unit>
        <trans-unit id="7600a6c86d6b62a844ec83630cb51bdb676dbccb" translate="yes" xml:space="preserve">
          <source>Stops mocking requests. Must be called to save recorded requests into faile.</source>
          <target state="translated">リクエストのモッキングを停止します。記録されたリクエストを faile に保存するために呼び出されなければなりません。</target>
        </trans-unit>
        <trans-unit id="28d39e269d7e17367aad2cf5adab2134e15415d4" translate="yes" xml:space="preserve">
          <source>Strict locators allow to specify additional locator types:</source>
          <target state="translated">厳格なロケータでは、追加のロケータタイプを指定することができます。</target>
        </trans-unit>
        <trans-unit id="5ebde4c2b10e6ace16338f84a54f868d47c06a9e" translate="yes" xml:space="preserve">
          <source>Such talks should produce written stories. There should be an actor that doing some things, the feature that should be fulfilled within the story and the result achieved.</source>
          <target state="translated">そのような話は、書かれた物語を生み出すものでなければならない。何かをする役者がいて、その役者が物語の中で満たすべき特徴と、その結果があるはずです。</target>
        </trans-unit>
        <trans-unit id="ad8c707c9820471da9a35d61ffc28291f147d0cc" translate="yes" xml:space="preserve">
          <source>Sure, Protractor can be used to test applications built without AngularJS. In this case you need to disable angular synchronization feature in config:</source>
          <target state="translated">確かに、ProtractorはAngularJSを使わずに作られたアプリケーションをテストするために使うことができます。この場合、設定で角度同期機能を無効にする必要があります。</target>
        </trans-unit>
        <trans-unit id="3d4d2ff51f2e539277119b5ec706030864779b1f" translate="yes" xml:space="preserve">
          <source>Switch focus to a particular tab by its number. It waits tabs loading and then switch tab</source>
          <target state="translated">特定のタブの番号でフォーカスを切り替えます。タブが読み込まれるのを待ってから、タブを切り替えます。</target>
        </trans-unit>
        <trans-unit id="e2cfbaf28e9ce0ca990fab73b45a1735c5bff2cf" translate="yes" xml:space="preserve">
          <source>Switch focus to a particular tab by its number. It waits tabs loading and then switch tab.</source>
          <target state="translated">特定のタブの番号でフォーカスを切り替えます。タブの読み込みを待ってからタブを切り替えます。</target>
        </trans-unit>
        <trans-unit id="fcea82fb41ee294997c8999f99f0be5cb6269093" translate="yes" xml:space="preserve">
          <source>Switch to non-Angular mode, start using WebDriver instead of Protractor in this session</source>
          <target state="translated">非Angularモードに切り替え、このセッションでは分度器の代わりにWebDriverを使用します。</target>
        </trans-unit>
        <trans-unit id="39e073c7ca09d9a9aecea4c3060c302c5b66c202" translate="yes" xml:space="preserve">
          <source>Switch to the specified context.</source>
          <target state="translated">指定したコンテキストに切り替えます。</target>
        </trans-unit>
        <trans-unit id="1255f3cea5319884a49350da7f444177476a068c" translate="yes" xml:space="preserve">
          <source>Switch to the window with a specified handle.</source>
          <target state="translated">指定したハンドルを持つウィンドウに切り替えます。</target>
        </trans-unit>
        <trans-unit id="1b0397a1271d032469d5e329935eb61696ce5d8d" translate="yes" xml:space="preserve">
          <source>Switches current element to found one. Can accept another &lt;code&gt;locate&lt;/code&gt; call or strict locator.</source>
          <target state="translated">現在の要素を見つかった要素に切り替えます。別の &lt;code&gt;locate&lt;/code&gt; コールまたは厳密なロケータを受け入れることができます。</target>
        </trans-unit>
        <trans-unit id="d557a7ad34933bc80e9ad74d43985bf6d220bae9" translate="yes" xml:space="preserve">
          <source>Switches device to landscape orientation</source>
          <target state="translated">デバイスを横向きに切り替えます。</target>
        </trans-unit>
        <trans-unit id="f0e754ab23fc4f02647128266f4b3f45845b1dce" translate="yes" xml:space="preserve">
          <source>Switches device to portrait orientation</source>
          <target state="translated">デバイスを縦向きに切り替えます。</target>
        </trans-unit>
        <trans-unit id="938dd9a547288d32442854a39ff875501212780f" translate="yes" xml:space="preserve">
          <source>Switches frame or in case of null locator reverts to parent.</source>
          <target state="translated">フレームを切り替えるか、ロケータがNULLの場合は親に戻します。</target>
        </trans-unit>
        <trans-unit id="43ac0e5cc77506828a814ad113dd34db757f438d" translate="yes" xml:space="preserve">
          <source>Switches frame or in case of null locator reverts to parent. Appium: support only web testing</source>
          <target state="translated">フレームを切り替えるか、nullの場合はロケータを親に戻す。Appium:ウェブテストのみサポート</target>
        </trans-unit>
        <trans-unit id="a50d93537099424c48a1441c688ff52e91413e92" translate="yes" xml:space="preserve">
          <source>Switches to native context. By default switches to NATIVE_APP context unless other specified.</source>
          <target state="translated">ネイティブコンテキストに切り替えます。デフォルトでは、他の指定がない限り NATIVE_APP コンテキストに切り替わります。</target>
        </trans-unit>
        <trans-unit id="87c53cfda5e293677d2f0361b8c27c198496ecf8" translate="yes" xml:space="preserve">
          <source>Switches to web context. If no context is provided switches to the first detected web context</source>
          <target state="translated">ウェブコンテキストに切り替えます。コンテキストが提供されていない場合は、最初に検出されたウェブコンテキストに切り替えます。</target>
        </trans-unit>
        <trans-unit id="deffdf8f3fef992a077a0ca33839a5ae3800fe33" translate="yes" xml:space="preserve">
          <source>TO launch additional browser context (or incognito window) use &lt;code&gt;session&lt;/code&gt; command.</source>
          <target state="translated">追加のブラウザコンテキスト（またはシークレットウィンドウ）を起動するには、 &lt;code&gt;session&lt;/code&gt; コマンドを使用します。</target>
        </trans-unit>
        <trans-unit id="193daf137ed8b89de36d47c3df5fd8f66c0e1d14" translate="yes" xml:space="preserve">
          <source>Tables</source>
          <target state="translated">Tables</target>
        </trans-unit>
        <trans-unit id="3b4d5a2bc9581e399e44d82776f6a357d67bce7d" translate="yes" xml:space="preserve">
          <source>Tables are the recommended way to pass arrays into test scenarios. Inside a step definition data is stored in argument passed as &lt;code&gt;DataTable&lt;/code&gt; JavaScript object. You can iterate on it like this:</source>
          <target state="translated">テーブルは、配列をテストシナリオに渡すための推奨される方法です。ステップ定義内では、データは &lt;code&gt;DataTable&lt;/code&gt; JavaScriptオブジェクトとして渡される引数に格納されます。あなたはこのようにそれを繰り返すことができます：</target>
        </trans-unit>
        <trans-unit id="f8927cf1b362bf42a3e4a3cbe9f6f2cf9170ce2d" translate="yes" xml:space="preserve">
          <source>Tables is a recommended ways to pass arrays into test scenarios. Inside a step definition data is stored in argument passed as &lt;code&gt;DataTable&lt;/code&gt; JavaScript object. You can iterate on it like this:</source>
          <target state="translated">テーブルは、配列をテストシナリオに渡すための推奨される方法です。ステップの定義データは、 &lt;code&gt;DataTable&lt;/code&gt; JavaScriptオブジェクトとして渡された引数に格納されます。次のように反復できます：</target>
        </trans-unit>
        <trans-unit id="1efa71619d15a19a43b3d9877337ae315f174228" translate="yes" xml:space="preserve">
          <source>Tag should be placed before &lt;em&gt;Scenario:&lt;/em&gt; or before &lt;em&gt;Feature:&lt;/em&gt; keyword. In the last case all scenarios of that feature will be added to corresponding group.</source>
          <target state="translated">タグは、&lt;em&gt;シナリオ：&lt;/em&gt;または&lt;em&gt;フィーチャー：&lt;/em&gt;キーワードの前に配置する必要があります。最後のケースでは、その機能のすべてのシナリオが対応するグループに追加されます。</target>
        </trans-unit>
        <trans-unit id="848eed0fbd5429f556b2982dec3ea87136e33e44" translate="yes" xml:space="preserve">
          <source>Tags</source>
          <target state="translated">Tags</target>
        </trans-unit>
        <trans-unit id="14337687dd6f084a5c3dc9a199d6957658461aa4" translate="yes" xml:space="preserve">
          <source>Take a look at a sample test:</source>
          <target state="translated">サンプルテストを見てみましょう。</target>
        </trans-unit>
        <trans-unit id="ff49742ffccb37f7db97ddb5ff2a6ec05b7e463c" translate="yes" xml:space="preserve">
          <source>Take a look into the next example:</source>
          <target state="translated">次の例を見てみましょう。</target>
        </trans-unit>
        <trans-unit id="2de8011c16566b3f36b36c0f42fcce1272cba6d0" translate="yes" xml:space="preserve">
          <source>Taps an element and holds for a requested time.</source>
          <target state="translated">要素をタップして、要求された時間だけ保持します。</target>
        </trans-unit>
        <trans-unit id="a848e4577aa84fec2eedefdac01136b2e75261d4" translate="yes" xml:space="preserve">
          <source>Taps on an element. Element can be located by its text or id or accessibility id.</source>
          <target state="translated">要素をタップします。要素は、そのテキスト、id、またはアクセシビリティIDによって位置を特定することができます。</target>
        </trans-unit>
        <trans-unit id="252658a12cbff4f469056cd394139b9d57025d63" translate="yes" xml:space="preserve">
          <source>Taps on element.</source>
          <target state="translated">要素をタップします。</target>
        </trans-unit>
        <trans-unit id="08e18970a23ec7fd37ee52303a6dad58f3e611a2" translate="yes" xml:space="preserve">
          <source>Technically they are the same as PageObjects. StepObjects can inject PageObjects and use multiple POs to make a complex scenarios:</source>
          <target state="translated">技術的には PageObject と同じです。StepObjectはPageObjectを注入し、複数のPOを使って複雑なシナリオを作ることができます。</target>
        </trans-unit>
        <trans-unit id="685a6d7d678c767ea0b2f923575227aa98705d0d" translate="yes" xml:space="preserve">
          <source>Technically, they are the same as PageObjects. StepObjects can inject PageObjects and use multiple POs to make a complex scenarios:</source>
          <target state="translated">技術的には PageObject と同じです。StepObjectはPageObjectを注入し、複数のPOを使って複雑なシナリオを作ることができます。</target>
        </trans-unit>
        <trans-unit id="192b6b9f049fe6b310066bdf747ff2d241bf1774" translate="yes" xml:space="preserve">
          <source>Test Object</source>
          <target state="translated">テストオブジェクト</target>
        </trans-unit>
        <trans-unit id="49fbc53d093bfa5de1b61d4e6675d1eb626c9373" translate="yes" xml:space="preserve">
          <source>Test Options</source>
          <target state="translated">テストオプション</target>
        </trans-unit>
        <trans-unit id="07dd06c7d7bd89ecc801268ec9e941c29d2cff80" translate="yes" xml:space="preserve">
          <source>Test events provide a test object with following fields:</source>
          <target state="translated">テストイベントは、以下のフィールドを持つテストオブジェクトを提供します。</target>
        </trans-unit>
        <trans-unit id="5cc9c82bae22de7e1cb2c62d6c1b4f4bbca74c76" translate="yes" xml:space="preserve">
          <source>Test execution can be paused in any place of a test with &lt;code&gt;pause()&lt;/code&gt; call.</source>
          <target state="translated">テストの実行は、 &lt;code&gt;pause()&lt;/code&gt; 呼び出しを使用して、テストの任意の場所で一時停止できます。</target>
        </trans-unit>
        <trans-unit id="f0149057a8d28c1b63470da901a951ae194e0108" translate="yes" xml:space="preserve">
          <source>Test execution can be paused in any place of a test with &lt;code&gt;pause()&lt;/code&gt; call. Variables can also be passed to &lt;code&gt;pause({data: 'hi', func: () =&amp;gt; console.log('hello')})&lt;/code&gt; which can be accessed in Interactive shell.</source>
          <target state="translated">テストの実行は、 &lt;code&gt;pause()&lt;/code&gt; 呼び出しを使用して、テストの任意の場所で一時停止できます。変数は、インタラクティブシェルでアクセスできる &lt;code&gt;pause({data: 'hi', func: () =&amp;gt; console.log('hello')})&lt;/code&gt; に渡すこともできます。</target>
        </trans-unit>
        <trans-unit id="f79afa07b33a6ac4edcad4679b2c59369a204a41" translate="yes" xml:space="preserve">
          <source>Test output and the way tests are written can be localized. This way scenarios can be written in almost native language using UTF support of JavaScript. If you have non-English team and you work on non-English project consider enabling translation by setting translation to &lt;a href=&quot;https://github.com/Codeception/CodeceptJS/blob/master/translations&quot;&gt;one of available languages&lt;/a&gt;.</source>
          <target state="translated">テスト出力とテストの作成方法をローカライズできます。この方法では、JavaScriptのUTFサポートを使用して、シナリオをほぼネイティブ言語で記述できます。英語以外のチームがあり、英語以外のプロジェクトに取り組んでいる場合&lt;a href=&quot;https://github.com/Codeception/CodeceptJS/blob/master/translations&quot;&gt;は、使用可能な言語のいずれかに&lt;/a&gt;翻訳を設定して翻訳を有効にすることを検討してください。</target>
        </trans-unit>
        <trans-unit id="0162da41d3ee89d844a17f750d14e9f1836e01ea" translate="yes" xml:space="preserve">
          <source>Test output and the way tests are written can be localized. This way scenarios can be written in almost native language using UTF support of JavaScript. If you have non-English team and you work on non-English project consider enabling translation by setting translation to &lt;a href=&quot;https://github.com/codeceptjs/CodeceptJS/blob/master/translations&quot;&gt;one of available languages (opens new window)&lt;/a&gt;.</source>
          <target state="translated">テスト出力とテストの記述方法をローカライズできます。このようにして、JavaScriptのUTFサポートを使用して、ほぼ母国語でシナリオを作成できます。英語以外のチームがいて、英語以外のプロジェクトに取り組んでいる場合は、翻訳&lt;a href=&quot;https://github.com/codeceptjs/CodeceptJS/blob/master/translations&quot;&gt;を使用可能な言語の1つに&lt;/a&gt;設定して翻訳を有効にすることを検討してください（新しいウィンドウが開きます）。</target>
        </trans-unit>
        <trans-unit id="d18c21b6ad742120f6d46f4a1f8bc7d5d148017f" translate="yes" xml:space="preserve">
          <source>Test scenario should always use &lt;code&gt;I&lt;/code&gt; object to execute commands. This is important as all methods of &lt;code&gt;I&lt;/code&gt; are running in global promise chain, this way CodeceptJS makes sure everything is executed in right order. At first a page should be opened to proceed, we use &lt;code&gt;amOnPage&lt;/code&gt; command for that. As we already specified full URL to TodoMVC app, we can pass relative path into it instead of absolute url:</source>
          <target state="translated">テストシナリオでは、コマンドを実行するため &lt;code&gt;I&lt;/code&gt; 常にIオブジェクトを使用する必要があります。 &lt;code&gt;I&lt;/code&gt; すべてのメソッドがグローバルなプロミスチェーンで実行されているため、これは重要です。これにより、CodeceptJSはすべてが正しい順序で実行されるようにします。最初にページを開いて続行する必要があります。そのために &lt;code&gt;amOnPage&lt;/code&gt; コマンドを使用します。TodoMVCアプリに完全なURLを既に指定しているので、絶対URLの代わりに相対パスを渡すことができます。</target>
        </trans-unit>
        <trans-unit id="5d73d3609e28a38ef9ba867f4b929d149dfa5f30" translate="yes" xml:space="preserve">
          <source>Test the application how it is.</source>
          <target state="translated">アプリケーションがどのようになっているかをテストします。</target>
        </trans-unit>
        <trans-unit id="10f908ceba5f009dd71054f4ef6b3aaa66ff44bc" translate="yes" xml:space="preserve">
          <source>TestCafe</source>
          <target state="translated">TestCafe</target>
        </trans-unit>
        <trans-unit id="af5b9ac8a804139c9bfbba6723bb19d15fc87844" translate="yes" xml:space="preserve">
          <source>Testing React Applications</source>
          <target state="translated">Reactアプリケーションのテスト</target>
        </trans-unit>
        <trans-unit id="57525f64f0bc512c8eb3639634df1962d99608b0" translate="yes" xml:space="preserve">
          <source>Testing is simple &amp;amp; fun, enjoy it!</source>
          <target state="translated">テストはシンプルで楽しいです、楽しんでください！</target>
        </trans-unit>
        <trans-unit id="44d27de8c6e9a942f3ac2d23ea0acada26438a78" translate="yes" xml:space="preserve">
          <source>Testing non-Angular Applications</source>
          <target state="translated">非Angularアプリケーションのテスト</target>
        </trans-unit>
        <trans-unit id="0673872405ca83ff2ef42b5512e1da209b2ee115" translate="yes" xml:space="preserve">
          <source>Testing with Playwright Since 2.5</source>
          <target state="translated">2.5以降のPlaywrightでのテスト</target>
        </trans-unit>
        <trans-unit id="d8045cb3a5df69281dc7eb27619cbace7c80acda" translate="yes" xml:space="preserve">
          <source>Testing with Puppeteer</source>
          <target state="translated">人形使いを使ったテスト</target>
        </trans-unit>
        <trans-unit id="801685e614ff643e78df2081be908532feb10afb" translate="yes" xml:space="preserve">
          <source>Testing with TestCafe</source>
          <target state="translated">TestCafeでのテスト</target>
        </trans-unit>
        <trans-unit id="204ace9503976e6dc9bb63fac7371334cb0a1da4" translate="yes" xml:space="preserve">
          <source>Testing with WebDriver</source>
          <target state="translated">WebDriverでのテスト</target>
        </trans-unit>
        <trans-unit id="3ada2358a0771d2fb106fe5467eb5dd50e9b17d5" translate="yes" xml:space="preserve">
          <source>TestingBot</source>
          <target state="translated">TestingBot</target>
        </trans-unit>
        <trans-unit id="c85c378d5341f4e581c246216e32826da4651116" translate="yes" xml:space="preserve">
          <source>Tests are expected to be written in &lt;strong&gt;ECMAScript 7&lt;/strong&gt;.</source>
          <target state="translated">テストは&lt;strong&gt;ECMAScript 7&lt;/strong&gt;で書かれることが期待されています。</target>
        </trans-unit>
        <trans-unit id="57cadeb225c8d7b89cd6c27cace559d468fbd4f2" translate="yes" xml:space="preserve">
          <source>Tests are split by scenarios, not by files. Results are aggregated and shown up in the main process.</source>
          <target state="translated">テストはファイルごとではなく、シナリオごとに分割されます。結果は集計され、メインプロセスに表示されます。</target>
        </trans-unit>
        <trans-unit id="cb26fe90f1a3bb8e52a5b9a8b8fb9d720ad1bd88" translate="yes" xml:space="preserve">
          <source>Tests are written from a user's perspective. There is an actor (represented as &lt;code&gt;I&lt;/code&gt;) which contains actions taken from helpers. A test is written as a sequence of actions performed by an actor:</source>
          <target state="translated">テストはユーザーの視点から書かれています。ヘルパーから実行されたアクションを含むアクター（ &lt;code&gt;I&lt;/code&gt; として表される）があります。テストは、アクターによって実行される一連のアクションとして記述されます。</target>
        </trans-unit>
        <trans-unit id="99e91084d2f58a5b0219e27f14ed6920cf0d87d5" translate="yes" xml:space="preserve">
          <source>Tests are written from user's perspective. There is an actor (represented as &lt;code&gt;I&lt;/code&gt;) which contains actions taken from helpers. A test is written as a sequence of actions performed y actor:</source>
          <target state="translated">テストはユーザーの観点から書かれています。ヘルパーから実行されたアクションを含む俳優（ &lt;code&gt;I&lt;/code&gt; として表されます）があります。テストは、アクターによって実行される一連のアクションとして記述されます。</target>
        </trans-unit>
        <trans-unit id="4c6ba368e21e52a786f00b796962f04c9a68962a" translate="yes" xml:space="preserve">
          <source>Tests are written in a synchronous way. This improves the readability and maintainability of tests. While writing tests you should not think about promises, and instead should focus on the test scenario.</source>
          <target state="translated">テストは同期的に書かれます。これにより、テストの可読性と保守性が向上します。テストを書いている間は、約束事を考えず、代わりにテストシナリオに焦点を当てるべきです。</target>
        </trans-unit>
        <trans-unit id="f3e6459857b5fc7ee47e6443c5b35545d610a6d3" translate="yes" xml:space="preserve">
          <source>Tests are written in synchronous way. This improves readability and maintainability of tests. While writing tests you should not think about promises. You should focus on test scenario.</source>
          <target state="translated">テストは同期的に書かれます。これにより、テストの可読性と保守性が向上します。テストを書いている間は、約束事について考えるべきではありません。テストシナリオに焦点を当てるべきです。</target>
        </trans-unit>
        <trans-unit id="9cc3b22835c9f790c60b5c6b1c109d0efa0c5b51" translate="yes" xml:space="preserve">
          <source>Tests consist with a scenario of user's action taken on a page. The most widely used ones are:</source>
          <target state="translated">テストは、ユーザーがページ上で行ったアクションのシナリオで構成されています。最も広く使われているものは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="b5eb29aef6674e7a9336098909cb7847b0a0059d" translate="yes" xml:space="preserve">
          <source>Tests vs Features</source>
          <target state="translated">テストと機能</target>
        </trans-unit>
        <trans-unit id="30b6fda3137a3460993392b5a9a737ff4fbd4b84" translate="yes" xml:space="preserve">
          <source>Text values inside a scenarios can be set inside a &lt;code&gt;&quot;&quot;&quot;&lt;/code&gt; block:</source>
          <target state="translated">シナリオ内のテキスト値は、 &lt;code&gt;&quot;&quot;&quot;&lt;/code&gt; ブロック内に設定できます。</target>
        </trans-unit>
        <trans-unit id="fdeeb3f63916a3eeb97d5d5ed471f73462f099d6" translate="yes" xml:space="preserve">
          <source>That's all. New locator type is ready to use:</source>
          <target state="translated">以上です。新しいロケータータイプができました。</target>
        </trans-unit>
        <trans-unit id="66466173a1b0458ee12202924688eff7dfb3e2fa" translate="yes" xml:space="preserve">
          <source>That's it, our method is now available to use as &lt;code&gt;I.createTodo(title)&lt;/code&gt;:</source>
          <target state="translated">これで、 &lt;code&gt;I.createTodo(title)&lt;/code&gt; として使用できるメソッドが利用可能になりました。</target>
        </trans-unit>
        <trans-unit id="6b41c5e2c82945f3e47d4b1a5274c6f9950662ea" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;grabTextFrom&lt;/code&gt; action is used to retrieve the text from an element. All actions starting with the &lt;code&gt;grab&lt;/code&gt; prefix are expected to return data. In order to synchronize this step with a scenario you should pause the test execution with the &lt;code&gt;await&lt;/code&gt; keyword of ES6. To make it work, your test should be written inside a async function (notice &lt;code&gt;async&lt;/code&gt; in its definition).</source>
          <target state="translated">&lt;code&gt;grabTextFrom&lt;/code&gt; のアクションは、要素からテキストを取得するために使用されます。 &lt;code&gt;grab&lt;/code&gt; プレフィックスで始まるすべてのアクションは、データを返すことが期待されています。このステップをシナリオと同期させるには、ES6の &lt;code&gt;await&lt;/code&gt; キーワードを使用してテストの実行を一時停止する必要があります。それを機能させるには、テストをasync関数内に記述する必要があります（定義の &lt;code&gt;async&lt;/code&gt; に注意してください）。</target>
        </trans-unit>
        <trans-unit id="ca8209af3a52426e3a4e5c2365566dcda25f0179" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;session&lt;/code&gt; function expects the first parameter to be the name of the session. You can switch back to this session by using the same name.</source>
          <target state="translated">&lt;code&gt;session&lt;/code&gt; 機能は、最初のパラメータは、セッションの名前であることを期待しています。同じ名前を使用して、このセッションに戻ることができます。</target>
        </trans-unit>
        <trans-unit id="c7680af57cf68b97bcebebcf13e5bfce4798da54" translate="yes" xml:space="preserve">
          <source>The Touch Action API provides the basis of all gestures that can be automated in Appium. At its core is the ability to chain together ad hoc individual actions, which will then be applied to an element in the application on the device. &lt;a href=&quot;http://webdriver.io/api/mobile/touchAction.html&quot;&gt;See complete documentation&lt;/a&gt;</source>
          <target state="translated">タッチアクションAPIは、Appiumで自動化できるすべてのジェスチャーの基礎を提供します。その中心となるのは、アドホックな個々のアクションをつなぎ合わせる機能です。このアクションは、デバイス上のアプリケーションの要素に適用されます。&lt;a href=&quot;http://webdriver.io/api/mobile/touchAction.html&quot;&gt;完全なドキュメントを見る&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e3163a1b2c475e8bcddc933e317814b442251938" translate="yes" xml:space="preserve">
          <source>The UI of your web application has interaction areas which can be shared across different tests. To avoid code duplication you can put common locators and methods in one place.</source>
          <target state="translated">ウェブアプリケーションの UI には、異なるテスト間で共有できるインタラクション領域があります。コードの重複を避けるために、共通のロケータとメソッドを一つの場所に置くことができます。</target>
        </trans-unit>
        <trans-unit id="369164e60e5eee81c94b4860b9f8307ff0c8642f" translate="yes" xml:space="preserve">
          <source>The following is a diagram of the CodeceptJS architecture:</source>
          <target state="translated">以下にCodeceptJSのアーキテクチャの図を示します。</target>
        </trans-unit>
        <trans-unit id="f50e4f76876708b934c2ac0dc3af15738a1bfc64" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;mockRequest&lt;/code&gt; will be added to &lt;code&gt;I&lt;/code&gt; object. You can use it to explicitly define which requests to block and which response they should return instead:</source>
          <target state="translated">関数 &lt;code&gt;mockRequest&lt;/code&gt; が &lt;code&gt;I&lt;/code&gt; オブジェクトに追加されます。これを使用して、ブロックする要求と、代わりに返す必要のある応答を明示的に定義できます。</target>
        </trans-unit>
        <trans-unit id="a17f4bfca15c256f6d52aa218d7718113978d172" translate="yes" xml:space="preserve">
          <source>The helper uses GraphQL mutations to store the built data and automatically clean them up after a test. This way for setting data for a test is as simple as writing:</source>
          <target state="translated">ヘルパーはGraphQLの変異を利用して、ビルドされたデータを保存し、テスト後に自動的にクリーンアップします。このようにテスト用のデータを設定する方法は、書くのと同じくらい簡単です。</target>
        </trans-unit>
        <trans-unit id="996c7574ad48e1d2447f138442e5ace9e50b4d9d" translate="yes" xml:space="preserve">
          <source>The idea of story BDD can be narrowed to:</source>
          <target state="translated">ストーリーBDDという発想で絞ることができます。</target>
        </trans-unit>
        <trans-unit id="62721d2e633cefe2bc9f9d6e352a599e4e9cc3df" translate="yes" xml:space="preserve">
          <source>The interactive shell can be started outside of test context by running &lt;code&gt;npx codeceptjs shell&lt;/code&gt;</source>
          <target state="translated">インタラクティブシェルは、 &lt;code&gt;npx codeceptjs shell&lt;/code&gt; 実行することにより、テストコンテキストの外部で開始できます。</target>
        </trans-unit>
        <trans-unit id="4ba21799d73141c4a2378db8dc797638b66ff696" translate="yes" xml:space="preserve">
          <source>The most efficient way would be to allow test to control its data, i.e. the 3rd option. However, accessing database directly is not a good idea as database vendor, schema and data are used by application internally and are out of scope of acceptance test.</source>
          <target state="translated">最も効率的な方法は、テストがそのデータを制御できるようにすることです。しかし、データベースベンダー、スキーマ、データはアプリケーション内部で使用されるため、データベースに直接アクセスすることは良いアイデアではありません。</target>
        </trans-unit>
        <trans-unit id="eb586497437367f06c08d6161ca37357b9de448c" translate="yes" xml:space="preserve">
          <source>The most general and common assertion is &lt;code&gt;see&lt;/code&gt;, which checks visilibility of a text on a page:</source>
          <target state="translated">最も一般的な共通の主張はある &lt;code&gt;see&lt;/code&gt; 、ページ上のテキストのチェックをvisilibility：</target>
        </trans-unit>
        <trans-unit id="6451a931e4d9909ce742793c54649a28a9cffaa2" translate="yes" xml:space="preserve">
          <source>The most general and common assertion is &lt;code&gt;see&lt;/code&gt;:</source>
          <target state="translated">最も一般的な共通の主張がされて &lt;code&gt;see&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="cd267140c77c5263311dfb0511aaf730d67d2d9f" translate="yes" xml:space="preserve">
          <source>The object built by the factory is sent as the variables object along with the mutation. So make sure it matches the argument type as detailed in the GraphQL schema. You may want to pass a constructor to the factory to achieve that.</source>
          <target state="translated">ファクトリーで構築されたオブジェクトは、突然変異と一緒に変数オブジェクトとして送信されます。ですから、それが GraphQL スキーマで詳細に説明されている引数の型と一致していることを確認してください。そのためにコンストラクタをファクトリーに渡すとよいでしょう。</target>
        </trans-unit>
        <trans-unit id="6bb1ed62767476c3b6f3cccf4eac8109df4c548b" translate="yes" xml:space="preserve">
          <source>The order of helpers is important! ApiDataFactory will clean up created users after a test, so it needs browser to be still opened to obtain its cookies.</source>
          <target state="translated">ヘルパーの順番が重要 ApiDataFactoryはテスト後に作成されたユーザをクリーンアップするため、クッキーを取得するためにはブラウザを開いたままにしておく必要があります。</target>
        </trans-unit>
        <trans-unit id="f835919883c42f42e321068832ab318ce5dcb572" translate="yes" xml:space="preserve">
          <source>The output should be similar to this:</source>
          <target state="translated">出力はこのようになるはずです。</target>
        </trans-unit>
        <trans-unit id="32a9695194a96a58df511927cfeca5ba9802894a" translate="yes" xml:space="preserve">
          <source>The same can be done with GraphQLDataFactory.</source>
          <target state="translated">GraphQLDataFactoryでも同じことができます。</target>
        </trans-unit>
        <trans-unit id="f90c469dff798af96908a0a9d1f5caaa558c2a5d" translate="yes" xml:space="preserve">
          <source>The same code can be shared for web applications as well. To execute some code in web browser only, use &lt;code&gt;I.runInWeb&lt;/code&gt;:</source>
          <target state="translated">同じコードをWebアプリケーションでも共有できます。一部のコードをWebブラウザーのみで実行するには、 &lt;code&gt;I.runInWeb&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="297de5b6285481a079ce32f45200c204a5b3a89f" translate="yes" xml:space="preserve">
          <source>The same is true for form fields: they can be searched by field name, label, and so on.</source>
          <target state="translated">フォームフィールドも同様で、フィールド名やラベルなどで検索することができます。</target>
        </trans-unit>
        <trans-unit id="8b30c557ddaa3468d8c17c030b1b41534011fdbb" translate="yes" xml:space="preserve">
          <source>The same way you can also access &lt;code&gt;browser&lt;/code&gt; object to implement more actions or handle events.</source>
          <target state="translated">同様に、 &lt;code&gt;browser&lt;/code&gt; オブジェクトにアクセスして、より多くのアクションを実装したり、イベントを処理したりすることもできます。</target>
        </trans-unit>
        <trans-unit id="cb6e02cb66e1f6b02d779672dc1b962eda4bf74b" translate="yes" xml:space="preserve">
          <source>The same way you can also access &lt;code&gt;browser&lt;/code&gt; object to implement more actions or handle events. &lt;a href=&quot;https://codecept.io/helpers/&quot;&gt;Learn more about Helpers&lt;/a&gt; in the corresponding guide.</source>
          <target state="translated">同じ方法で、 &lt;code&gt;browser&lt;/code&gt; オブジェクトにアクセスして、より多くのアクションを実装したり、イベントを処理したりすることもできます。&lt;a href=&quot;https://codecept.io/helpers/&quot;&gt;ヘルパーについて詳しく&lt;/a&gt;は、対応するガイドをご覧ください。</target>
        </trans-unit>
        <trans-unit id="7f5a11892b6445e935912e6d04f0307abfb58c51" translate="yes" xml:space="preserve">
          <source>The same way you can also access &lt;code&gt;browser&lt;/code&gt; object to implement more actions or handle events. For instance, you want to set the permissions, you can approach it with:</source>
          <target state="translated">同様に、 &lt;code&gt;browser&lt;/code&gt; オブジェクトにアクセスして、より多くのアクションを実装したり、イベントを処理したりすることもできます。たとえば、権限を設定したい場合は、次の方法でアプローチできます。</target>
        </trans-unit>
        <trans-unit id="a33d02ff1f25b4b25ac847f2e6b6b840547327df" translate="yes" xml:space="preserve">
          <source>The second parameter is a context (CSS or XPath locator) to narrow the search.</source>
          <target state="translated">2番目のパラメータは、検索を絞り込むためのコンテキスト(CSSまたはXPathロケータ)です。</target>
        </trans-unit>
        <trans-unit id="a31335c50438edfb932d2915b8b40355dbf5c533" translate="yes" xml:space="preserve">
          <source>The second parameter is a context (id | type | accessibility id) to narrow the search.</source>
          <target state="translated">2番目のパラメータは、検索を絞り込むためのコンテキスト(id | type | accessibility id)です。</target>
        </trans-unit>
        <trans-unit id="01737434983574b8e5ab93179b6a5b840b50bf01" translate="yes" xml:space="preserve">
          <source>The second parameter is a context element to narrow the search.</source>
          <target state="translated">2番目のパラメータは、検索を絞り込むためのコンテキスト要素です。</target>
        </trans-unit>
        <trans-unit id="95d64fd731a82bd66e3e7131da7556f667749b7e" translate="yes" xml:space="preserve">
          <source>The similar test written in native syntax of Protractor (inherited from selenium-webdriver) would look like this:</source>
          <target state="translated">Protractor(selenium-webdriverから継承)のネイティブ構文で書かれた類似のテストは次のようになります。</target>
        </trans-unit>
        <trans-unit id="21822eecd05230cb62e477d1944311e1c31d67db" translate="yes" xml:space="preserve">
          <source>The standard and proved way to run browser test automation over years is Selenium WebDriver. Over years this technology was standartized and works over all popular browsers and operating systems. There are cloud services like SauceLabs or BrowserStack which allow executing such browsers in the cloud. The superset of WebDriver protocol is also used to test &lt;a href=&quot;https://codecept.io/mobile&quot;&gt;native and hybrid mobile applications&lt;/a&gt;.</source>
          <target state="translated">何年にもわたってブラウザテストの自動化を実行するための標準的で実証済みの方法は、SeleniumWebDriverです。何年にもわたって、このテクノロジーは標準化され、すべての一般的なブラウザーとオペレーティングシステムで機能します。SauceLabsやBrowserStackのようなクラウドサービスがあり、クラウドでそのようなブラウザを実行できます。WebDriverプロトコルのスーパーセットは、&lt;a href=&quot;https://codecept.io/mobile&quot;&gt;ネイティブおよびハイブリッドモバイルアプリケーションの&lt;/a&gt;テストにも使用されます。</target>
        </trans-unit>
        <trans-unit id="c00e3c7bfc5ea3e2783fb2a2dfc14d8a0aceb579" translate="yes" xml:space="preserve">
          <source>The ubiquitous language is always referred as &lt;em&gt;common&lt;/em&gt; language. That is it's main benefit. It is not a couple of our business specification's words, and not a couple of developer's technical terms. It is a common words and terms that can be understood by people for whom we are building the software and should be understood by developers. Establishing correct communication between this two groups people is vital for building successful project that will fit the domain and fulfill all business needs.</source>
          <target state="translated">ユビキタス言語は常に&lt;em&gt;共通&lt;/em&gt;言語と呼ばれます。それが主なメリットです。これは、ビジネス仕様の言葉ではなく、開発者の技術用語でもありません。これは、ソフトウェアを構築している人が理解できる一般的な言葉であり、開発者も理解する必要があります。この2つのグループ間の正しいコミュニケーションを確立することは、ドメインに適合し、すべてのビジネスニーズを満たすプロジェクトを成功させるために不可欠です。</target>
        </trans-unit>
        <trans-unit id="dfb2b6ef6d0b9480226e4470da6dda201a3f0a6d" translate="yes" xml:space="preserve">
          <source>Then configure ApiDataHelper to match factories and REST API:</source>
          <target state="translated">そして、工場とREST APIを一致させるようにApiDataHelperを設定します。</target>
        </trans-unit>
        <trans-unit id="1626cd0728fd4ad2471fa2fe70a505a4087dbca2" translate="yes" xml:space="preserve">
          <source>Then configure GraphQLDataHelper to match factories and GraphQL schema:</source>
          <target state="translated">そして、工場とGraphQLスキーマを一致させるようにGraphQLDataHelperを設定します。</target>
        </trans-unit>
        <trans-unit id="82ad5e606ab96946347370a802d796f02991634f" translate="yes" xml:space="preserve">
          <source>Then create a module which will export a factory for an entity.</source>
          <target state="translated">次に、エンティティの工場をエクスポートするモジュールを作成します。</target>
        </trans-unit>
        <trans-unit id="472a18d3620739a44a5b1763264bdd48acc51a89" translate="yes" xml:space="preserve">
          <source>Then create a module which will export a factory for an entity. And add that module as a part of the configuration for the helper.</source>
          <target state="translated">そして、エンティティのファクトリをエクスポートするモジュールを作成します。そして、そのモジュールをヘルパーの設定の一部として追加します。</target>
        </trans-unit>
        <trans-unit id="d8349d8a3be095091f92e07c83f2b075a32f2eeb" translate="yes" xml:space="preserve">
          <source>Then inside a Helper you can access &lt;code&gt;Playwright&lt;/code&gt; helper of CodeceptJS. Let's say you want to create &lt;code&gt;I.grabDimensionsOfCurrentPage&lt;/code&gt; action. In this case you need to call &lt;code&gt;evaluate&lt;/code&gt; method of &lt;code&gt;page&lt;/code&gt; object</source>
          <target state="translated">次に、ヘルパー内で、CodeceptJSの &lt;code&gt;Playwright&lt;/code&gt; ヘルパーにアクセスできます。 &lt;code&gt;I.grabDimensionsOfCurrentPage&lt;/code&gt; アクションを作成するとします。この場合、 &lt;code&gt;page&lt;/code&gt; オブジェクトの &lt;code&gt;evaluate&lt;/code&gt; メソッドを呼び出す必要があります</target>
        </trans-unit>
        <trans-unit id="d04e975876bde4dc99ada01737a1886fcdd6fd33" translate="yes" xml:space="preserve">
          <source>Then inside a Helper you can access &lt;code&gt;Puppeteer&lt;/code&gt; helper of CodeceptJS. Let's say you want to create &lt;code&gt;I.renderPageToPdf&lt;/code&gt; action. In this case you need to call &lt;code&gt;pdf&lt;/code&gt; method of &lt;code&gt;page&lt;/code&gt; object</source>
          <target state="translated">次に、ヘルパー内で、CodeceptJSの &lt;code&gt;Puppeteer&lt;/code&gt; ヘルパーにアクセスできます。 &lt;code&gt;I.renderPageToPdf&lt;/code&gt; アクションを作成するとします。この場合、 &lt;code&gt;page&lt;/code&gt; オブジェクトの &lt;code&gt;pdf&lt;/code&gt; メソッドを呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="dcbea797e5a4a4a25507c16ec3990b282b42570c" translate="yes" xml:space="preserve">
          <source>Then inside a test import a comment function from a plugin. For instance, you can prepare Given/When/Then functions to use them inside tests:</source>
          <target state="translated">そして、テストの内部でプラグインからコメント関数をインポートします。例えば、Given/When/Then関数を用意して、テストの中で使うことができます。</target>
        </trans-unit>
        <trans-unit id="5dac1ec98baf75521016d7fe4b46d6ebdb5eaa0f" translate="yes" xml:space="preserve">
          <source>Then tests can be executed using &lt;code&gt;run-multiple&lt;/code&gt; command.</source>
          <target state="translated">次に、 &lt;code&gt;run-multiple&lt;/code&gt; コマンドを使用してテストを実行できます。</target>
        </trans-unit>
        <trans-unit id="5b07fa5c8069c5be64a66f3d4234c1cf42973600" translate="yes" xml:space="preserve">
          <source>Then tests with failure will have screenshots.</source>
          <target state="translated">その後、失敗したテストにはスクリーンショットが表示されます。</target>
        </trans-unit>
        <trans-unit id="ced7ce868e1f8b9e3a3fec4cfdf6a2e4073d77e3" translate="yes" xml:space="preserve">
          <source>Then to execute them use run-multiple command passing configured suite, which is parallel in this example:</source>
          <target state="translated">そして、それらを実行するには、この例では並列に設定されたスイートを渡すrun-multipleコマンドを使用します。</target>
        </trans-unit>
        <trans-unit id="59a52e66d3871ba0d11ebd12c311f8d61c173386" translate="yes" xml:space="preserve">
          <source>Then you need to add this helper to your &lt;code&gt;codecept.conf.js&lt;/code&gt; like in this &lt;a href=&quot;https://codecept.io/helpers/#configuration&quot;&gt;docs (opens new window)&lt;/a&gt;. And then run the command &lt;code&gt;npx codeceptjs def&lt;/code&gt;.</source>
          <target state="translated">次に、この&lt;a href=&quot;https://codecept.io/helpers/#configuration&quot;&gt;ドキュメントの&lt;/a&gt;ように、このヘルパーを &lt;code&gt;codecept.conf.js&lt;/code&gt; に追加する必要があります（新しいウィンドウが開きます）。次に、コマンド &lt;code&gt;npx codeceptjs def&lt;/code&gt; 実行します。</target>
        </trans-unit>
        <trans-unit id="2fc63de61e30fe7786a7c38d788176106750506a" translate="yes" xml:space="preserve">
          <source>Then you need to initialize a project, selecting TestCafe when asked:</source>
          <target state="translated">その後、質問されたらTestCafeを選択して、プロジェクトを初期化する必要があります。</target>
        </trans-unit>
        <trans-unit id="0bba0788f0cd22006371a2be0cb04db1b44b8eca" translate="yes" xml:space="preserve">
          <source>Then you need to prepare application for execution. It should be packed into apk (for Android) or .ipa (for iOS) or zip.</source>
          <target state="translated">あとは、実行するためのアプリを用意する必要があります。apk(Androidの場合)か.ipa(iOSの場合)かzipに圧縮されている必要があります。</target>
        </trans-unit>
        <trans-unit id="5166231d1f44bbd29f0386fd8ecf26ce3ff0dec9" translate="yes" xml:space="preserve">
          <source>Then(); projectPage.open(projectId); I.see('new title', 'h1'); });</source>
          <target state="translated">Then();projectPage.open(projectId);I.see('新規タイトル','h1');}).</target>
        </trans-unit>
        <trans-unit id="d001f9befe93533e211c8c089ad8719e2cb522d4" translate="yes" xml:space="preserve">
          <source>Then, calling &lt;code&gt;I.have('user')&lt;/code&gt; inside a test will create a new user for you. This is done by sending POST request to &lt;code&gt;/api/users&lt;/code&gt; URL. Response is returned and can be used in tests.</source>
          <target state="translated">次に、テスト内で &lt;code&gt;I.have('user')&lt;/code&gt; を呼び出すと、新しいユーザーが作成されます。これは、POSTリクエストを &lt;code&gt;/api/users&lt;/code&gt; URLに送信することで行われます。応答が返され、テストで使用できます。</target>
        </trans-unit>
        <trans-unit id="1529a1589398a2c9b64d247d86d46961de1bd2dc" translate="yes" xml:space="preserve">
          <source>Then, calling &lt;code&gt;I.mutateData('createUser')&lt;/code&gt; inside a test will create a new user for you. This is done by sending a GraphQL mutation request over Http to &lt;code&gt;/graphql&lt;/code&gt; endpoint. Response is returned and can be used in tests.</source>
          <target state="translated">次に、テスト内で &lt;code&gt;I.mutateData('createUser')&lt;/code&gt; を呼び出すと、新しいユーザーが作成されます。これは、Httpを介して &lt;code&gt;/graphql&lt;/code&gt; エンドポイントにGraphQLミューテーションリクエストを送信することによって行われます。応答が返され、テストで使用できます。</target>
        </trans-unit>
        <trans-unit id="ee3d6af2e36b2faab8eb2d1312a7e8505d00ec37" translate="yes" xml:space="preserve">
          <source>There are also &lt;a href=&quot;https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities&quot;&gt;browser and platform specific capabilities (opens new window)&lt;/a&gt;. Services like SauceLabs, BrowserStack or browser vendors can provide their own specific capabilities for more tuning.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities&quot;&gt;ブラウザとプラットフォーム固有の機能&lt;/a&gt;もあります（新しいウィンドウが開きます）。SauceLabs、BrowserStack、またはブラウザベンダーなどのサービスは、さらに調整するための独自の特定の機能を提供できます。</target>
        </trans-unit>
        <trans-unit id="886d107ce2677c96a17122673fc769d56dc9d551" translate="yes" xml:space="preserve">
          <source>There are different ways to define bootstrap and teardown functions:</source>
          <target state="translated">ブートストラップとティアダウン関数を定義する方法は様々です。</target>
        </trans-unit>
        <trans-unit id="fe1fee044950c42195a6bbb794e1806a985efcad" translate="yes" xml:space="preserve">
          <source>There are few public API methods which can be accessed from other plugins.</source>
          <target state="translated">他のプラグインからアクセスできるパブリックAPIメソッドはいくつかあります。</target>
        </trans-unit>
        <trans-unit id="30ad69df407e2991e7143e7d2d97406284c266db" translate="yes" xml:space="preserve">
          <source>There are following options available:</source>
          <target state="translated">以下のオプションがあります。</target>
        </trans-unit>
        <trans-unit id="8ab0062d589deac8948bc116f1075f80ac953a79" translate="yes" xml:space="preserve">
          <source>There are mobile-only methods like:</source>
          <target state="translated">のようなモバイル専用の方法があります。</target>
        </trans-unit>
        <trans-unit id="21bc44a8ff6c076290ddb77e9fde639d9bd1e507" translate="yes" xml:space="preserve">
          <source>There is a simple way to add additional comments to your test scenario. Use &lt;code&gt;say&lt;/code&gt; command to print information to screen:</source>
          <target state="translated">テストシナリオにコメントを追加する簡単な方法があります。 &lt;code&gt;say&lt;/code&gt; コマンドを使用して、画面に情報を出力します。</target>
        </trans-unit>
        <trans-unit id="8244170e5cbd276880f3ae206e7e52defd9d16ae" translate="yes" xml:space="preserve">
          <source>There is a simple way to add additional comments to your test scenario: Use the &lt;code&gt;say&lt;/code&gt; command to print information to screen:</source>
          <target state="translated">テストシナリオにコメントを追加する簡単な方法があります &lt;code&gt;say&lt;/code&gt; コマンドを使用して、画面に情報を出力します。</target>
        </trans-unit>
        <trans-unit id="741ed77d944c6e548003536938b36c33faae6acd" translate="yes" xml:space="preserve">
          <source>There is a way to execute unsuccessful actions to without failing a test. This might be useful when you might need to click &quot;Accept cookie&quot; button but probably cookies were already accepted. To handle these cases &lt;code&gt;tryTo&lt;/code&gt; function was introduced:</source>
          <target state="translated">テストに失敗することなく、失敗したアクションを実行する方法があります。これは、[Cookieを受け入れる]ボタンをクリックする必要があるが、おそらくCookieがすでに受け入れられている場合に役立つことがあります。これらのケースを処理するために、 &lt;code&gt;tryTo&lt;/code&gt; 関数が導入されました。</target>
        </trans-unit>
        <trans-unit id="a151df5297554c3ddcdcfcf19ccd15a9caf8cad4" translate="yes" xml:space="preserve">
          <source>There is a way to list all tests and their steps without actually executing them. Execute tests in &lt;code&gt;dry-run&lt;/code&gt; mode to see all available tests:</source>
          <target state="translated">実際に実行せずに、すべてのテストとそのステップを一覧表示する方法があります。でテストを実行し &lt;code&gt;dry-run&lt;/code&gt; 、使用可能なすべてのテストを参照してくださいモード：</target>
        </trans-unit>
        <trans-unit id="9d566001e452b689c3cecc45aef2131a100cc26c" translate="yes" xml:space="preserve">
          <source>There is no magic in testing of AngularJS application in CodeceptJS. You just execute regular Protractor commands, packaged into a simple, high-level API.</source>
          <target state="translated">CodeceptJSのAngularJSアプリケーションのテストに魔法はありません。シンプルで高レベルなAPIにパッケージ化された通常のProtractorコマンドを実行するだけです。</target>
        </trans-unit>
        <trans-unit id="4f47904294169120cbb1afb2131fd41c1aa9df34" translate="yes" xml:space="preserve">
          <source>These helpers build data according to defined rules and use REST API or GraphQL mutations to store them and automatically clean them up after a test.</source>
          <target state="translated">これらのヘルパーは、定義されたルールに従ってデータを構築し、REST APIやGraphQLの変異を使用してデータを保存し、テスト後に自動的にデータをクリーンアップします。</target>
        </trans-unit>
        <trans-unit id="72b9e97f7810d40b3bafb1e9390a03684e6047c2" translate="yes" xml:space="preserve">
          <source>These objects can now be retrieved by the name specified in the configuration.</source>
          <target state="translated">これらのオブジェクトは、設定で指定した名前で取得できるようになりました。</target>
        </trans-unit>
        <trans-unit id="428e1134da804eeda54e0c42e80eb943ad39f7f0" translate="yes" xml:space="preserve">
          <source>This Helper uses &lt;a href=&quot;https://codecept.io/helpers/GraphQL/&quot;&gt;GraphQL (opens new window)&lt;/a&gt; helper and accepts its configuration in &quot;GraphQL&quot; section. For instance, to set timeout you should add:</source>
          <target state="translated">このヘルパーは&lt;a href=&quot;https://codecept.io/helpers/GraphQL/&quot;&gt;GraphQL（新しいウィンドウを開く）&lt;/a&gt;ヘルパーを使用し、「GraphQL」セクションでその構成を受け入れます。たとえば、タイムアウトを設定するには、次を追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="5186782edac8c1b55c6773c5ab2c05ac6d5fca81" translate="yes" xml:space="preserve">
          <source>This Helper uses &lt;a href=&quot;https://codecept.io/helpers/REST/&quot;&gt;REST (opens new window)&lt;/a&gt; helper and accepts its configuration in &quot;REST&quot; section. For instance, to set timeout you should add:</source>
          <target state="translated">このヘルパーは&lt;a href=&quot;https://codecept.io/helpers/REST/&quot;&gt;REST（新しいウィンドウを開く）&lt;/a&gt;ヘルパーを使用し、「REST」セクションでその構成を受け入れます。たとえば、タイムアウトを設定するには、次を追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="6913f6a5fca5a91e42516c70feb17807829caeb8" translate="yes" xml:space="preserve">
          <source>This Helper uses &lt;a href=&quot;https://codecept.io/helpers/REST/&quot;&gt;REST&lt;/a&gt; helper and accepts its configuration in &quot;REST&quot; section. So, in order to set default headers or timeout you should add:</source>
          <target state="translated">このヘルパーは&lt;a href=&quot;https://codecept.io/helpers/REST/&quot;&gt;REST&lt;/a&gt;ヘルパーを使用し、「REST」セクションでその構成を受け入れます。したがって、デフォルトのヘッダーまたはタイムアウトを設定するには、以下を追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="41287ed8b53bd169bbf16788d4c719d0703d5e99" translate="yes" xml:space="preserve">
          <source>This action supports &lt;a href=&quot;https://codecept.io/react#locators&quot;&gt;React locators (opens new window)&lt;/a&gt;</source>
          <target state="translated">このアクションは&lt;a href=&quot;https://codecept.io/react#locators&quot;&gt;Reactロケーターを&lt;/a&gt;サポートします（新しいウィンドウを開きます）</target>
        </trans-unit>
        <trans-unit id="31f60d330f6c7015ec91647dcd80f15f51d7aec6" translate="yes" xml:space="preserve">
          <source>This also enables localized method names for actor object.</source>
          <target state="translated">これにより、アクターオブジェクトのメソッド名のローカライズも可能になります。</target>
        </trans-unit>
        <trans-unit id="5afe6ba27fa86e2dd1473f62bdcf3aea58c40b72" translate="yes" xml:space="preserve">
          <source>This behavior can be configured with following options:</source>
          <target state="translated">この動作は以下のオプションで設定できます。</target>
        </trans-unit>
        <trans-unit id="8d61d6f09f1365d31eb0521e13a97b3401b0b22a" translate="yes" xml:space="preserve">
          <source>This can also be used to emulate Ajax requests:</source>
          <target state="translated">これはAjaxリクエストをエミュレートするためにも使用できます。</target>
        </trans-unit>
        <trans-unit id="8c042c27fca5f5c4fafbdd654199ffce11f503f2" translate="yes" xml:space="preserve">
          <source>This can be done inside a helper using the global &lt;a href=&quot;https://codecept.io/hooks/#api&quot;&gt;promise recorder&lt;/a&gt;:</source>
          <target state="translated">これは、グローバル&lt;a href=&quot;https://codecept.io/hooks/#api&quot;&gt;promiseレコーダー&lt;/a&gt;を使用してヘルパー内で実行できます。</target>
        </trans-unit>
        <trans-unit id="f6a9243d6be87dd0e39640753e81dca777e5f943" translate="yes" xml:space="preserve">
          <source>This can be used to keep state between steps:</source>
          <target state="translated">これは、ステップ間の状態を保持するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="3c7de9ee8ab9642e3e71f92abc71a8d687659c72" translate="yes" xml:space="preserve">
          <source>This chapter describes data management for external sources. If you are looking for using Data Sets in tests, see &lt;a href=&quot;https://codecept.io/advanced/#data-drivern-tests&quot;&gt;Data Driven Tests (opens new window)&lt;/a&gt; section*</source>
          <target state="translated">この章では、外部ソースのデータ管理について説明します。テストでのデータセットの使用をお探しの場合は、「&lt;a href=&quot;https://codecept.io/advanced/#data-drivern-tests&quot;&gt;データ駆動型テスト（新しいウィンドウを開く）」&lt;/a&gt;セクションを参照してください*</target>
        </trans-unit>
        <trans-unit id="95aaa285451b24d0eff26b7c32227c7be369f918" translate="yes" xml:space="preserve">
          <source>This command generates a basic helper and appends it to &lt;code&gt;helpers&lt;/code&gt; section of config file:</source>
          <target state="translated">このコマンドは、基本的なヘルパーを生成し、構成ファイルの &lt;code&gt;helpers&lt;/code&gt; セクションに追加します。</target>
        </trans-unit>
        <trans-unit id="b385a3bfe9445f95d96eb0207079a41d5e3f641e" translate="yes" xml:space="preserve">
          <source>This command generates a basic helper, append it to &lt;code&gt;helpers&lt;/code&gt; section of config file:</source>
          <target state="translated">このコマンドは、基本的なヘルパーを生成し、構成ファイルの &lt;code&gt;helpers&lt;/code&gt; セクションに追加します。</target>
        </trans-unit>
        <trans-unit id="488c0e1a57a6dfdc4eb25b3d25dbfd760463f4e3" translate="yes" xml:space="preserve">
          <source>This command is a wrapper for &lt;code&gt;codecept run --steps&lt;/code&gt;. You can use the &lt;a href=&quot;https://codecept.io/commands#run&quot;&gt;Run arguments and options&lt;/a&gt; here.</source>
          <target state="translated">このコマンドは、 &lt;code&gt;codecept run --steps&lt;/code&gt; ラッパーです。ここで&lt;a href=&quot;https://codecept.io/commands#run&quot;&gt;Run引数とオプションを&lt;/a&gt;使用できます。</target>
        </trans-unit>
        <trans-unit id="4a0c0567430b801351b64db84fb14337a5bccfc2" translate="yes" xml:space="preserve">
          <source>This command is a wrapper for &lt;code&gt;codecept run-workers 2&lt;/code&gt;. You can use the &lt;a href=&quot;https://codecept.io/commands#run-workers&quot;&gt;Run arguments and options&lt;/a&gt; here.</source>
          <target state="translated">このコマンドは、 &lt;code&gt;codecept run-workers 2&lt;/code&gt; ラッパーです。ここで&lt;a href=&quot;https://codecept.io/commands#run-workers&quot;&gt;Run引数とオプションを&lt;/a&gt;使用できます。</target>
        </trans-unit>
        <trans-unit id="dee791bcbdc88c6baf56073626d7a8c3dbca03a7" translate="yes" xml:space="preserve">
          <source>This command is similar to &lt;code&gt;run&lt;/code&gt;, however, steps output can't be shown in workers mode, as it is impossible to synchronize steps output from different processes.</source>
          <target state="translated">このコマンドは &lt;code&gt;run&lt;/code&gt; に似ていますが、異なるプロセスから出力されたステップを同期することができないため、ワーカーモードではステップ出力を表示できません。</target>
        </trans-unit>
        <trans-unit id="a3e5a039b7d7dccc484243121b0a63525e085810" translate="yes" xml:space="preserve">
          <source>This concept is extended by &lt;a href=&quot;https://codecept.io/helpers/ApiDataFactory/&quot;&gt;ApiDataFactory&lt;/a&gt; helper. It builds data according to defined rules and uses API to store them and automatically clean them up after a test, This way setting data for a test is as simple as writing:</source>
          <target state="translated">この概念は、&lt;a href=&quot;https://codecept.io/helpers/ApiDataFactory/&quot;&gt;ApiDataFactory&lt;/a&gt;ヘルパーによって拡張されます。定義されたルールに従ってデータを構築し、APIを使用してそれらを格納し、テスト後にそれらを自動的にクリーンアップします。この方法で、テストのデータを設定することは、書くのと同じくらい簡単です：</target>
        </trans-unit>
        <trans-unit id="012d865063f816993ba225a715704c70dcae8b26" translate="yes" xml:space="preserve">
          <source>This concept is extended by:</source>
          <target state="translated">この概念は拡張されています。</target>
        </trans-unit>
        <trans-unit id="d36a9e8b31251ba3fe6f7a2a9798358ed3f3e615" translate="yes" xml:space="preserve">
          <source>This example is &lt;a href=&quot;https://github.com/DavertMik/codeceptjs-angular-todomvc&quot;&gt;available on GitHub (opens new window)&lt;/a&gt;.</source>
          <target state="translated">この例は&lt;a href=&quot;https://github.com/DavertMik/codeceptjs-angular-todomvc&quot;&gt;GitHub&lt;/a&gt;で利用できます（新しいウィンドウが開きます）。</target>
        </trans-unit>
        <trans-unit id="f17a4bb2aaf142defa278f9dba00fab6f4efb2f8" translate="yes" xml:space="preserve">
          <source>This helper allows to &lt;strong&gt;mock requests while running tests in Puppeteer or WebDriver&lt;/strong&gt;. For instance, you can block calls to 3rd-party services like Google Analytics, CDNs. Another way of using is to emulate requests from server by passing prepared data.</source>
          <target state="translated">このヘルパーを使用すると&lt;strong&gt;、PuppeteerまたはWebDriverでテストを実行しているときにリクエスト&lt;/strong&gt;を&lt;strong&gt;モック&lt;/strong&gt;できます。たとえば、Google Analytics、CDNなどのサードパーティサービスへの呼び出しをブロックできます。別の使用方法は、準備されたデータを渡すことによってサーバーからの要求をエミュレートすることです。</target>
        </trans-unit>
        <trans-unit id="3e9991faf1d5c5f019d7b1be4ab97290bc419d3e" translate="yes" xml:space="preserve">
          <source>This helper partially works with WebDriver. It can intercept and mock requests &lt;strong&gt;only on already loaded page&lt;/strong&gt;.</source>
          <target state="translated">このヘルパーは部分的にWebDriverと連携します。&lt;strong&gt;すでにロードされているページでのみ&lt;/strong&gt;リクエストをインターセプトしてモックすることができ&lt;strong&gt;ます&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="9fe9d34c56927d006bdf186d436d0bac003bdc29" translate="yes" xml:space="preserve">
          <source>This helper should be configured in codecept.json</source>
          <target state="translated">このヘルパーは codecept.json で設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="90aeec2fcc0c8d0451f84c6c8f5db04dd4ce588b" translate="yes" xml:space="preserve">
          <source>This helper should be configured in codecept.json or codecept.conf.js</source>
          <target state="translated">このヘルパーは codecept.json または codecept.conf.js で設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="d4e6633a9115a0553c0108898e3f567fc971be3d" translate="yes" xml:space="preserve">
          <source>This helper solves this problem. If a web application has GraphQL support, it can be used to create and delete test records. By combining GraphQL with Factories you can easily create records for tests:</source>
          <target state="translated">このヘルパーはこの問題を解決します。ウェブアプリケーションが GraphQL をサポートしている場合、テストレコードの作成と削除に使用することができます。GraphQLとFactoryを組み合わせることで、テスト用のレコードを簡単に作成することができます。</target>
        </trans-unit>
        <trans-unit id="d268688c213c8ece4be450b6ca19c03fb9511d61" translate="yes" xml:space="preserve">
          <source>This helper solves this problem. Most of web application have API, and it can be used to create and delete test records. By combining REST API with Factories you can easily create records for tests:</source>
          <target state="translated">このヘルパーはこの問題を解決します。ほとんどのWebアプリケーションはAPIを持っており、それを使ってテストレコードを作成したり削除したりすることができます。REST APIとFactoryを組み合わせることで、テスト用のレコードを簡単に作成することができます。</target>
        </trans-unit>
        <trans-unit id="14e7301456eb6bcfec0527bf7e3d920ab87a41c2" translate="yes" xml:space="preserve">
          <source>This helper uses REST API to store the built data and automatically clean them up after a test, The way for setting data for a test is as simple as writing:</source>
          <target state="translated">このヘルパーはREST APIを利用してビルドされたデータを保存し、テスト後に自動的にクリーンアップします。</target>
        </trans-unit>
        <trans-unit id="49385fdef69a4f4640c9c5434fe7132fed15c3d8" translate="yes" xml:space="preserve">
          <source>This helper works with a browser out of the box with no additional tools required to install.</source>
          <target state="translated">このヘルパーは、インストールに追加のツールを必要とせず、箱から出してブラウザで動作します。</target>
        </trans-unit>
        <trans-unit id="e8e7e3d96883016042e9f3abc62018e4928a8ae9" translate="yes" xml:space="preserve">
          <source>This image comes with the necessary dependencies and packages to execute CodeceptJS tests. Mount in your CodeceptJS config directory into the &lt;code&gt;/tests&lt;/code&gt; directory in the docker container.</source>
          <target state="translated">このイメージには、CodeceptJSテストを実行するために必要な依存関係とパッケージが含まれています。CodeceptJS configディレクトリをdocker コンテナの &lt;code&gt;/tests&lt;/code&gt; ディレクトリにマウントします。</target>
        </trans-unit>
        <trans-unit id="693b9372d48e692af54307532ad38bb73190d369" translate="yes" xml:space="preserve">
          <source>This is a work in progress but you can control two browsers at a time right out of the box. Individual control is something that is planned for a later version.</source>
          <target state="translated">これは進行中の作業ですが、箱から出してすぐに2つのブラウザを同時に制御することができます。個別の制御は後のバージョンで計画されているものです。</target>
        </trans-unit>
        <trans-unit id="7f63ca52990cbfa65eed032bc4b365e184fb22b0" translate="yes" xml:space="preserve">
          <source>This is a wrapper on top of &lt;a href=&quot;https://github.com/wix/Detox&quot;&gt;Detox (opens new window)&lt;/a&gt; library, aimied to unify testing experience for CodeceptJS framework. Detox provides a grey box testing for mobile applications, playing especially good for React Native apps.</source>
          <target state="translated">これは、CodeceptJSフレームワークのテストエクスペリエンスを統合することを目的とした、&lt;a href=&quot;https://github.com/wix/Detox&quot;&gt;Detox（新しいウィンドウを開く）&lt;/a&gt;ライブラリの上のラッパーです。Detoxは、モバイルアプリケーションのグレーボックステストを提供し、ReactNativeアプリに特に適しています。</target>
        </trans-unit>
        <trans-unit id="ae5aa27faaf98e955484f545e7ce20d1c471f26e" translate="yes" xml:space="preserve">
          <source>This is especially useful while writing a new scratch. After opening a page call &lt;code&gt;pause()&lt;/code&gt; to start interacting with a page:</source>
          <target state="translated">これは、新しいスクラッチを書き込むときに特に役立ちます。ページを開いた後、 &lt;code&gt;pause()&lt;/code&gt; を呼び出してページとの対話を開始します。</target>
        </trans-unit>
        <trans-unit id="a82a1627e563ecf486ddacd07380b7804bae8e99" translate="yes" xml:space="preserve">
          <source>This is how we can check that login form of a simple web application works. At first we opened &lt;code&gt;/login&lt;/code&gt; page, then filled forms and in the end we saw the greetings text.</source>
          <target state="translated">これは、シンプルなWebアプリケーションのログインフォームが機能することを確認する方法です。最初に &lt;code&gt;/login&lt;/code&gt; ページを開き、次にフォームに入力し、最後にあいさつ文を確認しました。</target>
        </trans-unit>
        <trans-unit id="b4fc848e78da33625b5580ea2409fe5cafeb572e" translate="yes" xml:space="preserve">
          <source>This is how we described the initial conditions. Next, we perform some action. We use &lt;strong&gt;When&lt;/strong&gt; keyword for it:</source>
          <target state="translated">このようにして初期条件を説明しました。次に、いくつかのアクションを実行します。&lt;strong&gt;When&lt;/strong&gt;キーワードを使用します：</target>
        </trans-unit>
        <trans-unit id="640fee89bcd023ff4d43a3ce0e8ae1003555389a" translate="yes" xml:space="preserve">
          <source>This is just enough to run a test, open a browser, and think what to do next to write a test case.</source>
          <target state="translated">テストを実行して、ブラウザを開いて、次に何をすればテストケースが書けるのかを考えれば、これだけで十分です。</target>
        </trans-unit>
        <trans-unit id="c49c266e560f5a3ed42270339184d20a4ad666a2" translate="yes" xml:space="preserve">
          <source>This is the recommended way to implement all custom logic using low-level Protractor syntax in order to reuse it inside of test scenarios. For more information, see an &lt;a href=&quot;https://codecept.io/helpers/#protractor-example&quot;&gt;example of such a helper (opens new window)&lt;/a&gt;.</source>
          <target state="translated">これは、テストシナリオ内で再利用するために、低レベルの分度器構文を使用してすべてのカスタムロジックを実装するための推奨される方法です。詳細について&lt;a href=&quot;https://codecept.io/helpers/#protractor-example&quot;&gt;は、このようなヘルパーの例を&lt;/a&gt;参照してください（新しいウィンドウが開きます）。</target>
        </trans-unit>
        <trans-unit id="7a34a24d7996350334e0d38098267bc12b1e245b" translate="yes" xml:space="preserve">
          <source>This is useful if you want to execute same tests but on different browsers and with different configurations or different tests on same browsers in parallel.</source>
          <target state="translated">これは、同じテストを異なるブラウザ上で、異なる設定で実行したい場合や、同じブラウザ上で異なるテストを並行して実行したい場合に便利です。</target>
        </trans-unit>
        <trans-unit id="9fe781d62786b685507c2e1b0e49caf42baf32e8" translate="yes" xml:space="preserve">
          <source>This is very smart idea. But to use TestCafe on daily basis you need to clearly understand its benefits and limitations:</source>
          <target state="translated">これは非常にスマートなアイデアです。しかし、日常的にTestCafeを使用するには、その利点と限界を明確に理解する必要があります。</target>
        </trans-unit>
        <trans-unit id="8114fea1026c85d180ad85100e4a14b4c3610a1e" translate="yes" xml:space="preserve">
          <source>This launches interactive console where you can call actions of &lt;code&gt;I&lt;/code&gt; object.</source>
          <target state="translated">これにより、 &lt;code&gt;I&lt;/code&gt; オブジェクトのアクションを呼び出すことができるインタラクティブコンソールが起動します。</target>
        </trans-unit>
        <trans-unit id="305fbbd698c9e98614b5ff83c4e818076388497e" translate="yes" xml:space="preserve">
          <source>This launches the interactive console where you can call any action from the &lt;code&gt;I&lt;/code&gt; object.</source>
          <target state="translated">これにより、 &lt;code&gt;I&lt;/code&gt; オブジェクトから任意のアクションを呼び出すことができるインタラクティブコンソールが起動します。</target>
        </trans-unit>
        <trans-unit id="8640e784f2a247192307026a8c32632b9e5307ce" translate="yes" xml:space="preserve">
          <source>This method is &lt;strong&gt;deprecated&lt;/strong&gt;.</source>
          <target state="translated">このメソッドは&lt;strong&gt;非推奨です&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="f9b83b62f695a585d0f56ec348c37388845bad59" translate="yes" xml:space="preserve">
          <source>This method return promise with array of IDs of found elements. Actual elements can be accessed inside &lt;code&gt;evaluate&lt;/code&gt; by using &lt;code&gt;codeceptjs.fetchElement()&lt;/code&gt; client-side function:</source>
          <target state="translated">このメソッドは、見つかった要素のIDの配列を持つpromiseを返します。実際の要素は、内部にアクセスすることができる &lt;code&gt;evaluate&lt;/code&gt; 用いて &lt;code&gt;codeceptjs.fetchElement()&lt;/code&gt; クライアント側の機能を：</target>
        </trans-unit>
        <trans-unit id="78ff19fbe184de9d6618ecb15b5895bbec16b2ab" translate="yes" xml:space="preserve">
          <source>This plugin &lt;strong&gt;requires Docker&lt;/strong&gt; to be installed.</source>
          <target state="translated">このプラグインに&lt;strong&gt;は、Docker&lt;/strong&gt;がインストールされている&lt;strong&gt;必要があり&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="d9f1e4ad06454d0bb9b6bcd2031a37d45f25680e" translate="yes" xml:space="preserve">
          <source>This plugin allows to record and save video per each executed tests.</source>
          <target state="translated">このプラグインを使うと、テストの実行ごとに動画を録画して保存することができます。</target>
        </trans-unit>
        <trans-unit id="a6f5cc6a8f99a7d4e982c1f24cc5725d25a1c834" translate="yes" xml:space="preserve">
          <source>This plugin allows to run webdriverio services like:</source>
          <target state="translated">このプラグインを使うと、以下のようなWebdriverioのサービスを実行することができます。</target>
        </trans-unit>
        <trans-unit id="85f65c7acb1660fa4ee1dfa0ca1626ce88c32299" translate="yes" xml:space="preserve">
          <source>This plugin allows to slow down tests execution when a test running too fast. It puts a tiny delay for before and after action commands.</source>
          <target state="translated">このプラグインを使うと、テストの実行速度を遅くすることができます。アクションコマンドの前後に微小な遅延を与えます。</target>
        </trans-unit>
        <trans-unit id="fc8a0999cca3e15d5797262daf239f18b5f528c8" translate="yes" xml:space="preserve">
          <source>This plugin can be disabled per test. In this case you will need to stet &lt;code&gt;I.retry()&lt;/code&gt; to all flaky steps:</source>
          <target state="translated">このプラグインは、テストごとに無効にすることができます。この場合、すべての &lt;code&gt;I.retry()&lt;/code&gt; なステップにI.retry（）を設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="2d2a0cb1f807d7b47c74d7b402ef6f8a5e1bf757" translate="yes" xml:space="preserve">
          <source>This plugin can be used</source>
          <target state="translated">このプラグインは</target>
        </trans-unit>
        <trans-unit id="815e01b007f3f5c9fd9c1b0b0f32e8cbeafa3c0e" translate="yes" xml:space="preserve">
          <source>This plugin is &lt;strong&gt;enabled by default&lt;/strong&gt;.</source>
          <target state="translated">このプラグインは&lt;strong&gt;デフォルト&lt;/strong&gt;で&lt;strong&gt;有効になっています&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="58e203fef09c7b5e4ac99e2b45ee03864e830dff" translate="yes" xml:space="preserve">
          <source>This plugin is very basic so it's recommended to improve it to match your custom needs.</source>
          <target state="translated">このプラグインは非常に基本的なものなので、カスタムに合わせて改良していくことをお勧めします。</target>
        </trans-unit>
        <trans-unit id="4cbbc26781e8560d9af5a2f6850bc6cca1992b0b" translate="yes" xml:space="preserve">
          <source>This plugin requires some configuration but is very simple in use:</source>
          <target state="translated">このプラグインはいくつかの設定が必要ですが、使用方法は非常にシンプルです。</target>
        </trans-unit>
        <trans-unit id="f6a3b222ee6fbcf879d209d1b3cf8e11eafa6b92" translate="yes" xml:space="preserve">
          <source>This plugin requires two options: locator prefix and actual attribute to match.</source>
          <target state="translated">このプラグインは、ロケータの接頭辞と実際の属性をマッチさせるための2つのオプションを必要とします。</target>
        </trans-unit>
        <trans-unit id="c5c9eb0b0802df498781c4f9967e4c4a14d91b8a" translate="yes" xml:space="preserve">
          <source>This plugin will create a valid XPath locator for you.</source>
          <target state="translated">このプラグインは、有効な XPath ロケータを作成します。</target>
        </trans-unit>
        <trans-unit id="3064ffa320d13b40a656377d2231749ee91563de" translate="yes" xml:space="preserve">
          <source>This provides use with output:</source>
          <target state="translated">これは、出力での使用を提供します。</target>
        </trans-unit>
        <trans-unit id="6d563a209391db9676bec1f114d9761da7217ca1" translate="yes" xml:space="preserve">
          <source>This requires &lt;code&gt;./data.js&lt;/code&gt; module and assigns it to &lt;code&gt;Data&lt;/code&gt; argument in a test.</source>
          <target state="translated">これには &lt;code&gt;./data.js&lt;/code&gt; モジュールが必要で、テストの &lt;code&gt;Data&lt;/code&gt; 引数に割り当てます。</target>
        </trans-unit>
        <trans-unit id="51af69de4d872885141002ac582a20c987ff1a98" translate="yes" xml:space="preserve">
          <source>This requires &lt;code&gt;@codeceptjs/configure&lt;/code&gt; package to be installed.</source>
          <target state="translated">これには、 &lt;code&gt;@codeceptjs/configure&lt;/code&gt; パッケージがインストールされている必要があります。</target>
        </trans-unit>
        <trans-unit id="d87fef17ab7d0002efc3fa21eb79dcbdbc56775c" translate="yes" xml:space="preserve">
          <source>This requires the &lt;code&gt;./data.js&lt;/code&gt; module and assigns it to a &lt;code&gt;Data&lt;/code&gt; argument in a test.</source>
          <target state="translated">これには &lt;code&gt;./data.js&lt;/code&gt; モジュールが必要であり、テストの &lt;code&gt;Data&lt;/code&gt; 引数に割り当てます。</target>
        </trans-unit>
        <trans-unit id="ffa1cf782b4598dafaa487dbdcb0037135516e3e" translate="yes" xml:space="preserve">
          <source>This sample assertion used &lt;code&gt;_locate&lt;/code&gt; helper method which searched for elements by CSS/XPath or a strict locator. Then &lt;code&gt;browser.evaluate&lt;/code&gt; method was called to use locate found elements on a page and return attribute from the first of them.</source>
          <target state="translated">このサンプルアサーションでは、CSS / XPathまたは厳密なロケーターによって要素を検索する &lt;code&gt;_locate&lt;/code&gt; ヘルパーメソッドを使用しました。次に、 &lt;code&gt;browser.evaluate&lt;/code&gt; メソッドが呼び出され、ページで検索された要素を検索し、最初の要素から属性を返します。</target>
        </trans-unit>
        <trans-unit id="3c123974910057a1aa1899f129426be904b7da36" translate="yes" xml:space="preserve">
          <source>This scenario will be restarted two times on a failure.</source>
          <target state="translated">このシナリオは、失敗した時に2回再起動します。</target>
        </trans-unit>
        <trans-unit id="1fc1adcb102b4d4b4a2c7b8dfb114764c0867c04" translate="yes" xml:space="preserve">
          <source>This scenario will be restarted two times on a failure. Unlike retry step, there is no &lt;code&gt;when&lt;/code&gt; condition supported for retries on a scenario level.</source>
          <target state="translated">このシナリオは、障害が発生すると2回再開されます。再試行ステップとは異なり、シナリオレベルでの再試行でサポートされる &lt;code&gt;when&lt;/code&gt; 条件はありません。</target>
        </trans-unit>
        <trans-unit id="26ce3457e17ce1251213460ca505d70fbc2a8cff" translate="yes" xml:space="preserve">
          <source>This scenarios are nice as live documentation but they do not test anything yet. What we need next is to define how to run those steps. Steps can be defined by executing &lt;code&gt;gherkin:snippets&lt;/code&gt; command:</source>
          <target state="translated">このシナリオはライブドキュメントとしては優れていますが、まだ何もテストしていません。次に必要なのは、これらのステップの実行方法を定義することです。ステップは、 &lt;code&gt;gherkin:snippets&lt;/code&gt; コマンドを実行して定義できます。</target>
        </trans-unit>
        <trans-unit id="690bde6733776176baee026a9da68a536800e0e9" translate="yes" xml:space="preserve">
          <source>This string can be accessed inside a &lt;code&gt;content&lt;/code&gt; property of a last argument:</source>
          <target state="translated">この文字列は、最後の引数の &lt;code&gt;content&lt;/code&gt; プロパティ内でアクセスできます。</target>
        </trans-unit>
        <trans-unit id="b3352e1bab831b37c11a9a1d55733702ef451f41" translate="yes" xml:space="preserve">
          <source>This test is easy to read and write. Also it will work both on iOS and Android devices. Doesn't it sound cool?</source>
          <target state="translated">このテストは読みやすく、書きやすいです。また、それはiOSとAndroidデバイスの両方で動作します。かっこいいと思いませんか?</target>
        </trans-unit>
        <trans-unit id="870bb977208d3c2b6f600ef1de1fdac969564a03" translate="yes" xml:space="preserve">
          <source>This test will be skipped like with regular &lt;code&gt;Scenario.skip&lt;/code&gt; but with additional message &quot;Test not implemented!&quot;:</source>
          <target state="translated">このテストは、通常の &lt;code&gt;Scenario.skip&lt;/code&gt; と同様にスキップされますが、「テストは実装されていません！」という追加のメッセージが表示されます。</target>
        </trans-unit>
        <trans-unit id="ed7e13d5023ce183dfb3b32d6a8eb5578f121eaf" translate="yes" xml:space="preserve">
          <source>This text should be rewritten to follow your buisness rules. Don't think about a web interface for a while. Think about how user interacts with your system and what goals they want to achieve. Then write interaction scenarios.</source>
          <target state="translated">この文章は、あなたのビジネスルールに沿って書き換えてください。しばらくの間は、ウェブ・インターフェースについて考えないでください。ユーザーがあなたのシステムとどのように相互作用し、どのような目標を達成したいかを考えてください。そして、インタラクションシナリオを書きましょう。</target>
        </trans-unit>
        <trans-unit id="3a403b6a8735cf715fd7fe6250357750b12cf82b" translate="yes" xml:space="preserve">
          <source>This way tests can be written in Chinese language while it is still JavaScript:</source>
          <target state="translated">このようにして、テストはJavaScriptのままで中国語で書くことができます。</target>
        </trans-unit>
        <trans-unit id="69c1d67d688c6c06b60c2823f5c9c8a94c055829" translate="yes" xml:space="preserve">
          <source>This way tests can be written in native language while it is still JavaScript:</source>
          <target state="translated">このようにして、テストはJavaScriptのままでネイティブ言語で書くことができます。</target>
        </trans-unit>
        <trans-unit id="a06dd5f4a07b4dc2e8cd2fc5a5c5e6b8e7df8ddd" translate="yes" xml:space="preserve">
          <source>This way we recommend to implement all custom logic using low-level Protractor syntax and using it inside scenario tests. Please see an &lt;a href=&quot;https://codecept.io/helpers/#protractor-example&quot;&gt;example of such helper&lt;/a&gt;.</source>
          <target state="translated">このように、低レベルの分度器構文を使用してシナリオテスト内で使用することで、すべてのカスタムロジックを実装することをお勧めします。&lt;a href=&quot;https://codecept.io/helpers/#protractor-example&quot;&gt;そのようなヘルパーの例を&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="c482d6a4f0fc68267d5566fecdc03d74f5d8a278" translate="yes" xml:space="preserve">
          <source>This way you can build very flexible and stable locators even on application never designed for testing.</source>
          <target state="translated">これにより、テスト用に設計されていないアプリケーションでも、非常に柔軟で安定したロケータを構築することができます。</target>
        </trans-unit>
        <trans-unit id="2efce9385b092d2186d44776f32f2180bbc93b92" translate="yes" xml:space="preserve">
          <source>This way you can call &lt;a href=&quot;https://github.com/segmentio/nightmare#interact-with-the-page&quot;&gt;native Nightmare commands&lt;/a&gt;.</source>
          <target state="translated">この方法で、&lt;a href=&quot;https://github.com/segmentio/nightmare#interact-with-the-page&quot;&gt;ネイティブのNightmareコマンドを&lt;/a&gt;呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="b0984100e3067bc6bf0929fe1084b16ba5399996" translate="yes" xml:space="preserve">
          <source>This way, if your tests are written with TypeScript, your IDE will be able to leverage features like autocomplete and so on.</source>
          <target state="translated">このようにして、テストが TypeScript で書かれている場合、IDE はオートコンプリートなどの機能を活用することができます。</target>
        </trans-unit>
        <trans-unit id="efd58ec5c30e165d6897ff9542dbdfd0dbce46e0" translate="yes" xml:space="preserve">
          <source>This will create a sample template for a page object and include it in the &lt;code&gt;codecept.json&lt;/code&gt; config file.</source>
          <target state="translated">これにより、ページオブジェクトのサンプルテンプレートが作成され、 &lt;code&gt;codecept.json&lt;/code&gt; 構成ファイルに含まれます。</target>
        </trans-unit>
        <trans-unit id="5967bd21ac5a62a104c79503cf53afc129efc373" translate="yes" xml:space="preserve">
          <source>This will create a sample template for a page object and include it into &lt;code&gt;codecept.json&lt;/code&gt; config.</source>
          <target state="translated">これにより、ページオブジェクトのサンプルテンプレートが作成され、 &lt;code&gt;codecept.json&lt;/code&gt; 構成に含まれます。</target>
        </trans-unit>
        <trans-unit id="c6a2bc9d429955a08af5a5119865b23ee2b87cc6" translate="yes" xml:space="preserve">
          <source>This will give you cli with steps in console and HTML report in &lt;code&gt;output&lt;/code&gt; directory.</source>
          <target state="translated">これにより、コンソールのステップと &lt;code&gt;output&lt;/code&gt; ディレクトリのHTMLレポートでCLIが提供されます。</target>
        </trans-unit>
        <trans-unit id="cd7962c1146774ece46ff3c8e4b3d6c4b98f7887" translate="yes" xml:space="preserve">
          <source>This will install CodeceptJS, CodeceptUI &amp;amp; Puppeteer with Chrome browser.</source>
          <target state="translated">これにより、ChromeブラウザでCodeceptJS、CodeceptUI、Puppeteerがインストールされます。</target>
        </trans-unit>
        <trans-unit id="44afd644987855e8bde0e77f006fd8ebb8c07d78" translate="yes" xml:space="preserve">
          <source>This will limit data sets accoring passed function:</source>
          <target state="translated">これは、渡された関数のアコーリングを行うデータセットを制限します。</target>
        </trans-unit>
        <trans-unit id="88250cb017c0fd611db72a09f64ed7591d533fd3" translate="yes" xml:space="preserve">
          <source>This will produce 2 tests with different data sets. Current data set is appended to a test name in output:</source>
          <target state="translated">これは、異なるデータセットを持つ2つのテストを生成します。現在のデータセットは、出力のテスト名に付加されます。</target>
        </trans-unit>
        <trans-unit id="b00a344050375c1e13c934384a2afcdae9367d53" translate="yes" xml:space="preserve">
          <source>This will produce code templates for all undefined steps in all feature files of this suite. It will also place stub definitions into &lt;code&gt;step_definitions/steps.js&lt;/code&gt; file. Our next step will be to define those steps and transforming feature-file into a valid test.</source>
          <target state="translated">これにより、このスイートのすべての機能ファイル内のすべての未定義ステップのコードテンプレートが生成されます。また、スタブ定義を &lt;code&gt;step_definitions/steps.js&lt;/code&gt; ファイルに配置します。次のステップは、これらのステップを定義し、機能ファイルを有効なテストに変換することです。</target>
        </trans-unit>
        <trans-unit id="eb8c2ad7bf42239192af22a0e465871996637c1e" translate="yes" xml:space="preserve">
          <source>This will produce code templates for all undefined steps in the .feature files. By default, it will scan all of the .feature files specified in the gherkin.features section of the config and produce code templates for all undefined steps. If the &lt;code&gt;--feature&lt;/code&gt; option is specified, it will scan the specified .feature file(s). The stub definitions by default will be placed into the first file specified in the gherkin.steps section of the config. However, you may also use &lt;code&gt;--path&lt;/code&gt; to specify a specific file in which to place all undefined steps. This file must exist and be in the gherkin.steps array of the config. Our next step will be to define those steps and transforming feature-file into a valid test.</source>
          <target state="translated">これにより、.featureファイル内の未定義のすべてのステップのコードテンプレートが生成されます。デフォルトでは、構成のgherkin.featuresセクションで指定されているすべての.featureファイルをスキャンし、未定義のすべてのステップのコードテンプレートを生成します。 &lt;code&gt;--feature&lt;/code&gt; オプションが指定されている場合、指定された.featureファイルをスキャンします。デフォルトでは、スタブ定義は、構成のgherkin.stepsセクションで指定された最初のファイルに配置されます。ただし、 &lt;code&gt;--path&lt;/code&gt; を使用して、未定義のすべてのステップを配置する特定のファイルを指定することもできます。このファイルは存在し、構成のgherkin.steps配列に含まれている必要があります。次のステップは、これらのステップを定義し、機能ファイルを有効なテストに変換することです。</target>
        </trans-unit>
        <trans-unit id="de3985659507ca6e52659b3ca5fc95577520b71b" translate="yes" xml:space="preserve">
          <source>This will show execution steps as well as notices from test runner. To get even more information with more technical details like error stack traces, and global promises, or events use &lt;code&gt;--verbose&lt;/code&gt; mode.</source>
          <target state="translated">これにより、実行手順とテストランナーからの通知が表示されます。エラースタックトレース、グローバルプロミス、イベントなどの技術的な詳細を含むさらに多くの情報を取得するには、 &lt;code&gt;--verbose&lt;/code&gt; モードを使用します。</target>
        </trans-unit>
        <trans-unit id="1084029148ee5678063c3031c603530abcfc4538" translate="yes" xml:space="preserve">
          <source>Those tools can be easily installed via NPM. Use &lt;a href=&quot;https://www.npmjs.com/package/selenium-standalone&quot;&gt;selenium-standalone (opens new window)&lt;/a&gt; to automatically install them.</source>
          <target state="translated">これらのツールは、NPMを介して簡単にインストールできます。利用&lt;a href=&quot;https://www.npmjs.com/package/selenium-standalone&quot;&gt;セレン-スタンドアロン（新しいウィンドウが開きます）&lt;/a&gt;それらを自動的にインストールします。</target>
        </trans-unit>
        <trans-unit id="d4c45de0fe64ac43c72a798c67faaadadfaa1b90" translate="yes" xml:space="preserve">
          <source>Timeout</source>
          <target state="translated">Timeout</target>
        </trans-unit>
        <trans-unit id="e1f4f1007f7f5c5e4b911db91fe3c124c76e860f" translate="yes" xml:space="preserve">
          <source>Timeouts are expected to be passed as object:</source>
          <target state="translated">タイムアウトはオブジェクトとして渡されることが予想されます。</target>
        </trans-unit>
        <trans-unit id="50d84252b2753cd57724f32fcb2246d871d2d463" translate="yes" xml:space="preserve">
          <source>Tips: Using async function in the autoLogin</source>
          <target state="translated">Tips.autoLogin での async 関数の使用</target>
        </trans-unit>
        <trans-unit id="ba84f02583de459271902082d3f778d02a86a675" translate="yes" xml:space="preserve">
          <source>To &lt;strong&gt;debug test step-by-step&lt;/strong&gt; press Enter, the next step will be executed and interactive shell will be shown again.</source>
          <target state="translated">&lt;strong&gt;ステップバイステップのデバッグテスト&lt;/strong&gt;は、Enterキーを押し、次のステップは実行され、対話型シェルが再び表示されます。</target>
        </trans-unit>
        <trans-unit id="0b3a218d7485b4ed466c26bdd616aa3f6470f1df" translate="yes" xml:space="preserve">
          <source>To &lt;strong&gt;debug test step-by-step&lt;/strong&gt; type &lt;code&gt;next&lt;/code&gt; and press Enter. The next step will be executed and interactive shell will be shown again.</source>
          <target state="translated">&lt;strong&gt;デバッグテストステップバイステップの&lt;/strong&gt;種類 &lt;code&gt;next&lt;/code&gt; 、Enterキーを押します。次のステップが実行され、インタラクティブシェルが再び表示されます。</target>
        </trans-unit>
        <trans-unit id="d06e105dca9eae5b4cb8e3d3e1e34f2cf13cf1b0" translate="yes" xml:space="preserve">
          <source>To add CodeceptJS to your project invoke installer:</source>
          <target state="translated">CodeceptJSをプロジェクトに追加するには、インストーラを起動します。</target>
        </trans-unit>
        <trans-unit id="b24585a5a9d7c99db79536da56481b741710483b" translate="yes" xml:space="preserve">
          <source>To adjust browser settings you can pass &lt;a href=&quot;https://github.com/microsoft/playwright/blob/master/docs/api.md#browsernewcontextoptions&quot;&gt;custom options (opens new window)&lt;/a&gt;</source>
          <target state="translated">ブラウザの設定を調整するには、&lt;a href=&quot;https://github.com/microsoft/playwright/blob/master/docs/api.md#browsernewcontextoptions&quot;&gt;カスタムオプション&lt;/a&gt;を渡すことができます（新しいウィンドウを開きます）</target>
        </trans-unit>
        <trans-unit id="367aa5415d4dcf0f64345dbe9ff472b0df76017b" translate="yes" xml:space="preserve">
          <source>To build this image:</source>
          <target state="translated">このイメージを構築するために</target>
        </trans-unit>
        <trans-unit id="73b409c537ba85ebc3d787beeb44b7562586bbdd" translate="yes" xml:space="preserve">
          <source>To configure TypeScript in your project, you need to add &lt;a href=&quot;https://github.com/TypeStrong/ts-node&quot;&gt;&lt;code&gt;ts-node/register&lt;/code&gt; (opens new window)&lt;/a&gt; on first line in your config. Like in the following config file:</source>
          <target state="translated">プロジェクトでTypeScriptを構成するには、構成の最初の行に&lt;a href=&quot;https://github.com/TypeStrong/ts-node&quot;&gt; &lt;code&gt;ts-node/register&lt;/code&gt; （新しいウィンドウを開きます）&lt;/a&gt;を追加する必要があります。次の設定ファイルのように：</target>
        </trans-unit>
        <trans-unit id="ec0287854527ccbded8b0a0388a94a0ed66762c1" translate="yes" xml:space="preserve">
          <source>To create custom &lt;code&gt;I.*&lt;/code&gt; commands using Playwright API you need to create a custom helper.</source>
          <target state="translated">PlaywrightAPIを使用してカスタム &lt;code&gt;I.*&lt;/code&gt; コマンドを作成するには、カスタムヘルパーを作成する必要があります。</target>
        </trans-unit>
        <trans-unit id="b8959819322fcfe83626cdfe229e15709d5f046f" translate="yes" xml:space="preserve">
          <source>To create custom &lt;code&gt;I.*&lt;/code&gt; commands using Puppeteer API you need to create a custom helper.</source>
          <target state="translated">PuppeteerAPIを使用してカスタム &lt;code&gt;I.*&lt;/code&gt; コマンドを作成するには、カスタムヘルパーを作成する必要があります。</target>
        </trans-unit>
        <trans-unit id="a145838bd14b58f565a2ccfceeda4b70e510f0d5" translate="yes" xml:space="preserve">
          <source>To create new actions which will be added into &lt;code&gt;I.&lt;/code&gt; object you need to create a new helper. This can be done with &lt;code&gt;codeceptjs gh&lt;/code&gt; command.</source>
          <target state="translated">&lt;code&gt;I.&lt;/code&gt; オブジェクトに追加される新しいアクションを作成するには、新しいヘルパーを作成する必要があります。これは、 &lt;code&gt;codeceptjs gh&lt;/code&gt; コマンドを使用して実行できます。</target>
        </trans-unit>
        <trans-unit id="892114ab881fbb3c7b6c1e54c96e1c23ae227c79" translate="yes" xml:space="preserve">
          <source>To customize execution call &lt;code&gt;codeceptjs&lt;/code&gt; command:</source>
          <target state="translated">実行呼び出しの &lt;code&gt;codeceptjs&lt;/code&gt; コマンドをカスタマイズするには：</target>
        </trans-unit>
        <trans-unit id="19c961f1cbe920242e3c7451961ad207a7bce9b3" translate="yes" xml:space="preserve">
          <source>To develop tests it's fine to use local Selenium Server and window mode. Setting up WebDriver on remote CI (Continous Integration) server is different. If there is no desktop and no window mode on CI.</source>
          <target state="translated">テストを開発するには、ローカルのSelenium Serverとウィンドウモードを使うのが良いと思います。リモートのCI(Continous Integration)サーバにWebDriverを設定するのは違う。CI上にデスクトップもウィンドウモードもない場合。</target>
        </trans-unit>
        <trans-unit id="b5c9a4f989d6525d975e53e0904361fd7872af68" translate="yes" xml:space="preserve">
          <source>To enable bootstrap script in dry-run mode, pass in &lt;code&gt;--bootstrap&lt;/code&gt; option when running with &lt;code&gt;--steps&lt;/code&gt; or &lt;code&gt;--debug&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;--bootstrap&lt;/code&gt; モードでブートストラップスクリプトを有効にするには、 &lt;code&gt;--steps&lt;/code&gt; または &lt;code&gt;--debug&lt;/code&gt; を指定して実行するときに--bootstrapオプションを渡します。</target>
        </trans-unit>
        <trans-unit id="114e31584b04e58fc6eea15136260f2ad205792e" translate="yes" xml:space="preserve">
          <source>To enable device emulation for a specific test, create an additional browser session and pass in config as a second parameter:</source>
          <target state="translated">特定のテストでデバイスエミュレーションを有効にするには、追加のブラウザセッションを作成し、2番目のパラメータとしてconfigを渡します。</target>
        </trans-unit>
        <trans-unit id="dda1d3c081df9e856ac6016e29a26063f994a1ba" translate="yes" xml:space="preserve">
          <source>To enable pause after a test without a plugin you can use &lt;code&gt;After(pause)&lt;/code&gt; inside a test file.</source>
          <target state="translated">プラグインなしでテスト後に一時停止を有効にするには、テストファイル内で &lt;code&gt;After(pause)&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="59ae223bedd5c14158c5f1525153951eedec3a1a" translate="yes" xml:space="preserve">
          <source>To enable your custom plugin in config add it to &lt;code&gt;plugins&lt;/code&gt; section. Specify path to node module using &lt;code&gt;require&lt;/code&gt;.</source>
          <target state="translated">設定でカスタムプラグインを有効にするには、 &lt;code&gt;plugins&lt;/code&gt; セクションに追加します。 &lt;code&gt;require&lt;/code&gt; を使用してノードモジュールへのパスを指定します。</target>
        </trans-unit>
        <trans-unit id="e67163839e7bef0d8a96d0beb89bdad79284d6ca" translate="yes" xml:space="preserve">
          <source>To execute commands in context of a webview use &lt;code&gt;within('webview')&lt;/code&gt; function:</source>
          <target state="translated">webviewのコンテキストでコマンドを実行するには、within &lt;code&gt;within('webview')&lt;/code&gt; 関数を使用します。</target>
        </trans-unit>
        <trans-unit id="d9428fc3c91fd56331af17c6cf7c1791be5c31fc" translate="yes" xml:space="preserve">
          <source>To execute tests in Google Chrome browser running Selenium Server with ChromeDriver is required.</source>
          <target state="translated">Selenium Serverが動作するGoogle Chromeブラウザでテストを実行するためには、ChromeDriverを搭載したSelenium Serverが必要です。</target>
        </trans-unit>
        <trans-unit id="226e2f1d55e877f0272201e815db8629b3660624" translate="yes" xml:space="preserve">
          <source>To execute them use &lt;code&gt;run-multiple&lt;/code&gt; command passing configured suite, which is &lt;code&gt;parallel&lt;/code&gt; in this example:</source>
          <target state="translated">それらを実行するには、構成されたスイートを渡す &lt;code&gt;run-multiple&lt;/code&gt; コマンドを使用します。これは、この例では &lt;code&gt;parallel&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="348cf81ca03cf4569a0f486b8c7419aeb9536231" translate="yes" xml:space="preserve">
          <source>To fill in sensitive data use the &lt;code&gt;secret&lt;/code&gt; function, it won't expose actual value in logs.</source>
          <target state="translated">&lt;code&gt;secret&lt;/code&gt; 関数を使用して機密データを入力するには、ログに実際の値を公開しません。</target>
        </trans-unit>
        <trans-unit id="43dbb9517f12283b733dc8e062ee7f1d6be9a892" translate="yes" xml:space="preserve">
          <source>To filter a test by name use &lt;code&gt;--grep&lt;/code&gt; parameter. Which will execute all tests with names matching the regex pattern.</source>
          <target state="translated">名前でテストをフィルターするには、 &lt;code&gt;--grep&lt;/code&gt; パラメーターを使用します。これは、正規表現パターンに一致する名前ですべてのテストを実行します。</target>
        </trans-unit>
        <trans-unit id="42943775db71644bff76164dfac10113c8cb35ae" translate="yes" xml:space="preserve">
          <source>To filter a test by name use the &lt;code&gt;--grep&lt;/code&gt; parameter, which will execute all tests with names matching the regex pattern.</source>
          <target state="translated">名前でテストをフィルタリングするには、 &lt;code&gt;--grep&lt;/code&gt; パラメーターを使用します。これにより、正規表現パターンに一致する名前ですべてのテストが実行されます。</target>
        </trans-unit>
        <trans-unit id="56987b8a8568a5102e9c6351100575132c69a637" translate="yes" xml:space="preserve">
          <source>To find React element names and props in a tree use &lt;a href=&quot;https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi&quot;&gt;React DevTools (opens new window)&lt;/a&gt; extension.</source>
          <target state="translated">ツリーでReact要素の名前と小道具を見つけるには、&lt;a href=&quot;https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi&quot;&gt;React DevTools（新しいウィンドウを開く）&lt;/a&gt;拡張機能を使用します。</target>
        </trans-unit>
        <trans-unit id="56f2dbf9c03629b6c8986274b48c93c4ca1e480e" translate="yes" xml:space="preserve">
          <source>To get &lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/test-api/test-code-structure.html#test-controller&quot;&gt;testController (opens new window)&lt;/a&gt;)) inside a test use &lt;a href=&quot;https://codecept.io/helpers/TestCafe/#usetestcafeto&quot;&gt;&lt;code&gt;I.useTestCafeTo&lt;/code&gt;&lt;/a&gt; method with a callback. To keep test readable provide a description of a callback inside the first parameter.</source>
          <target state="translated">取得するには&lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/test-api/test-code-structure.html#test-controller&quot;&gt;testController（新しいウィンドウが開きます）を&lt;/a&gt;テスト用の内側））&lt;a href=&quot;https://codecept.io/helpers/TestCafe/#usetestcafeto&quot;&gt; &lt;code&gt;I.useTestCafeTo&lt;/code&gt; の&lt;/a&gt;コールバックを持つ方法。テストを読みやすくするために、最初のパラメーター内にコールバックの説明を入力します。</target>
        </trans-unit>
        <trans-unit id="7cfd4d243832149c9696ada4092f7e6874df98a6" translate="yes" xml:space="preserve">
          <source>To get &lt;a href=&quot;https://github.com/microsoft/playwright/blob/master/docs/api.md&quot;&gt;Playwright API (opens new window)&lt;/a&gt; inside a test use &lt;code&gt;I.usePlaywrightTo&lt;/code&gt; method with a callback. To keep test readable provide a description of a callback inside the first parameter.</source>
          <target state="translated">テスト内で&lt;a href=&quot;https://github.com/microsoft/playwright/blob/master/docs/api.md&quot;&gt;PlaywrightAPI&lt;/a&gt;を取得（新しいウィンドウを開く）するには、コールバックで &lt;code&gt;I.usePlaywrightTo&lt;/code&gt; メソッドを使用します。テストを読みやすくするために、最初のパラメーター内にコールバックの説明を入力します。</target>
        </trans-unit>
        <trans-unit id="8c0d246e12bec11c478039300484fc655e1ec6e9" translate="yes" xml:space="preserve">
          <source>To get &lt;a href=&quot;https://webdriver.io/docs/api&quot;&gt;webdriverio browser API (opens new window)&lt;/a&gt; inside a test use &lt;a href=&quot;https://codecept.io/helpers/WebDriver/#usewebdriverto&quot;&gt;&lt;code&gt;I.useWebDriverTo&lt;/code&gt;&lt;/a&gt; method with a callback. To keep test readable provide a description of a callback inside the first parameter.</source>
          <target state="translated">テスト内で&lt;a href=&quot;https://webdriver.io/docs/api&quot;&gt;webdriverioブラウザーAPI&lt;/a&gt;を取得（新しいウィンドウを開く）するには、コールバックを&lt;a href=&quot;https://codecept.io/helpers/WebDriver/#usewebdriverto&quot;&gt; &lt;code&gt;I.useWebDriverTo&lt;/code&gt; &lt;/a&gt;メソッドを使用します。テストを読みやすくするために、最初のパラメーター内にコールバックの説明を入力します。</target>
        </trans-unit>
        <trans-unit id="d7b3c36dce44ad51856aefeb9c05f8c51978ef11" translate="yes" xml:space="preserve">
          <source>To get Puppeteer API inside a test use &lt;a href=&quot;https://codecept.io/helpers/Puppeteer/#usepuppeteerto&quot;&gt;&lt;code&gt;I.usePupepteerTo&lt;/code&gt;&lt;/a&gt; method with a callback. To keep test readable provide a description of a callback inside the first parameter.</source>
          <target state="translated">テスト内でPuppeteerAPIを取得するには、コールバックで&lt;a href=&quot;https://codecept.io/helpers/Puppeteer/#usepuppeteerto&quot;&gt; &lt;code&gt;I.usePupepteerTo&lt;/code&gt; &lt;/a&gt;メソッドを使用します。テストを読みやすくするために、最初のパラメーター内にコールバックの説明を入力します。</target>
        </trans-unit>
        <trans-unit id="9ed92f252e318c4afcbaf8bac47f9ec7b3d1bd7e" translate="yes" xml:space="preserve">
          <source>To get a full control of parallelization create a custom execution script to match your needs. This way you can configure which tests are matched, how the groups are formed, and with which configuration each worker is executed.</source>
          <target state="translated">並列化を完全に制御するには、ニーズに合わせてカスタム実行スクリプトを作成します。これにより、どのテストをマッチさせるか、グループをどのように形成するか、そして各ワーカーをどのような設定で実行するかを設定することができます。</target>
        </trans-unit>
        <trans-unit id="be6eb647d7a8379accd2b82b9ef36ec1d75df188" translate="yes" xml:space="preserve">
          <source>To get a list of all contexts use &lt;code&gt;grabAllContexts&lt;/code&gt; method:</source>
          <target state="translated">すべてのコンテキストのリストを取得するには、 &lt;code&gt;grabAllContexts&lt;/code&gt; メソッドを使用します。</target>
        </trans-unit>
        <trans-unit id="a45e6f3a7e0ba7a1e8835d248f39ca28483f35ad" translate="yes" xml:space="preserve">
          <source>To get access for elements, connect to a corresponding helper and use &lt;code&gt;_locate&lt;/code&gt; function to match web elements by CSS or XPath, like you usually do:</source>
          <target state="translated">要素にアクセスするには、対応するヘルパーに接続し、 &lt;code&gt;_locate&lt;/code&gt; 関数を使用して、通常どおりにCSSまたはXPathでWeb要素を照合します。</target>
        </trans-unit>
        <trans-unit id="b40a99c9959ee7e561dd8c2220c1c32cef853af2" translate="yes" xml:space="preserve">
          <source>To get additional information about test execution use &lt;code&gt;--debug&lt;/code&gt; option.</source>
          <target state="translated">テストの実行に関する追加情報を取得するには、 &lt;code&gt;--debug&lt;/code&gt; オプションを使用します。</target>
        </trans-unit>
        <trans-unit id="f98169d773a2abc1972174f572ac57282b5edfec" translate="yes" xml:space="preserve">
          <source>To get additional information about test execution use &lt;code&gt;--debug&lt;/code&gt; option. This will show execution steps as well as notices from test runner. To get even more information with more technical details like error stack traces, and global promises, or events use &lt;code&gt;--verbose&lt;/code&gt; mode.</source>
          <target state="translated">テストの実行に関する追加情報を取得するには、 &lt;code&gt;--debug&lt;/code&gt; オプションを使用します。実行手順とテストランナーからの通知が表示されます。エラースタックトレース、グローバルプロミス、イベントなどのより技術的な詳細でさらに情報を取得するには、 &lt;code&gt;--verbose&lt;/code&gt; モードを使用します。</target>
        </trans-unit>
        <trans-unit id="05fe39eb551453a4274186c3f5562e88c9b27422" translate="yes" xml:space="preserve">
          <source>To get autocompletion for localized method names generate definitions by running</source>
          <target state="translated">ローカライズされたメソッド名の自動補完を取得するには、次のように実行して定義を生成します。</target>
        </trans-unit>
        <trans-unit id="f06195aab0f2a6c52e79a3136fb5511ba65cd0a2" translate="yes" xml:space="preserve">
          <source>To get autocompletion when working with CodeceptJS, use Visual Studio Code or another IDE that supports TypeScript Definitions.</source>
          <target state="translated">CodeceptJSで作業する際に自動補完を取得するには、Visual Studio CodeまたはTypeScript定義をサポートしている他のIDEを使用してください。</target>
        </trans-unit>
        <trans-unit id="9ad34beca2e6bb591d796ddff9528fa41ba95449" translate="yes" xml:space="preserve">
          <source>To get only one metric use second parameter:</source>
          <target state="translated">1つのメトリックだけを取得するには、2番目のパラメータを使用します。</target>
        </trans-unit>
        <trans-unit id="eedd748bde9b30d94ca1cbf8159fbf6e3a2479ce" translate="yes" xml:space="preserve">
          <source>To get started faster we prepared &lt;a href=&quot;https://github.com/codeceptjs/typescript-boilerplate&quot;&gt;typescript boilerplate project (opens new window)&lt;/a&gt; which can be used instead of configuring TypeScript on your own. Clone this repository into an empty folder and you are done.</source>
          <target state="translated">より早く始めるために、TypeScriptを自分で構成する代わりに使用できる&lt;a href=&quot;https://github.com/codeceptjs/typescript-boilerplate&quot;&gt;typescriptボイラープレートプロジェクト（新しいウィンドウを開きます）&lt;/a&gt;を用意しました。このリポジトリを空のフォルダに複製すれば完了です。</target>
        </trans-unit>
        <trans-unit id="9d7df25a6b694205cbc23435b8d6478cacdfaecf" translate="yes" xml:space="preserve">
          <source>To inject asynchronous functions in a test or before/after a test you can subscribe to corresponding event and register a function inside a recorder object. &lt;a href=&quot;https://github.com/Codeception/CodeceptJS/blob/master/lib/recorder.js&quot;&gt;Recorder&lt;/a&gt; represents a global promises chain.</source>
          <target state="translated">テストまたはテストの前後に非同期関数を挿入するには、対応するイベントをサブスクライブし、レコーダーオブジェクト内に関数を登録します。&lt;a href=&quot;https://github.com/Codeception/CodeceptJS/blob/master/lib/recorder.js&quot;&gt;Recorder&lt;/a&gt;は、グローバルなpromiseチェーンを表します。</target>
        </trans-unit>
        <trans-unit id="4951a804b008d14b721a514dbf9c61ec15652e79" translate="yes" xml:space="preserve">
          <source>To install Appium use npm:</source>
          <target state="translated">Appiumをインストールするにはnpmを使います。</target>
        </trans-unit>
        <trans-unit id="a5f3c0cb215ece2c2cac6457f937e76ea0ff66ba" translate="yes" xml:space="preserve">
          <source>To install codeceptjs into a different folder, like &lt;code&gt;tests&lt;/code&gt; use &lt;code&gt;npx create-codeceptjs tests&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;tests&lt;/code&gt; ようにcodeceptjsを別のフォルダーにインストールするには、npxcreate &lt;code&gt;npx create-codeceptjs tests&lt;/code&gt; 使用します</target>
        </trans-unit>
        <trans-unit id="1b7bb7bf920dcf70fe2695fe169c93640486faab" translate="yes" xml:space="preserve">
          <source>To intercept API requests and mock them use following API</source>
          <target state="translated">API リクエストをインターセプトしてモックするには、以下の API を使用します。</target>
        </trans-unit>
        <trans-unit id="71c5f0e1c349a096f90935c60d4f6b1ff7a5d827" translate="yes" xml:space="preserve">
          <source>To launch tests use &lt;code&gt;run&lt;/code&gt; command. To execute tests in &lt;a href=&quot;https://codecept.io/advanced/#multiple-browsers-execution&quot;&gt;multiple browsers&lt;/a&gt; or &lt;a href=&quot;https://codecept.io/advanced/#parallel-execution&quot;&gt;multiple threads&lt;/a&gt; use &lt;code&gt;run-multiple&lt;/code&gt;.</source>
          <target state="translated">テストを起動するには、 &lt;code&gt;run&lt;/code&gt; コマンドを使用します。&lt;a href=&quot;https://codecept.io/advanced/#multiple-browsers-execution&quot;&gt;複数のブラウザー&lt;/a&gt;または&lt;a href=&quot;https://codecept.io/advanced/#parallel-execution&quot;&gt;複数のスレッドで&lt;/a&gt;テストを実行するには、 &lt;code&gt;run-multiple&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="13498b3bc6ffd55724598ecb31efc2f20540d679" translate="yes" xml:space="preserve">
          <source>To launch tests use the &lt;code&gt;run&lt;/code&gt; command, and to execute tests in &lt;a href=&quot;https://codecept.io/advanced/#multiple-browsers-execution&quot;&gt;multiple browsers&lt;/a&gt; or &lt;a href=&quot;https://codecept.io/advanced/#parallel-execution&quot;&gt;multiple threads&lt;/a&gt; use the &lt;code&gt;run-multiple&lt;/code&gt; command.</source>
          <target state="translated">テストを起動するには &lt;code&gt;run&lt;/code&gt; コマンドを使用し、&lt;a href=&quot;https://codecept.io/advanced/#multiple-browsers-execution&quot;&gt;複数のブラウザー&lt;/a&gt;または&lt;a href=&quot;https://codecept.io/advanced/#parallel-execution&quot;&gt;複数のスレッドで&lt;/a&gt;テストを実行するには &lt;code&gt;run-multiple&lt;/code&gt; コマンドを使用します。</target>
        </trans-unit>
        <trans-unit id="f4dbe083331d7606a98d1efca353bdd373d6fb42" translate="yes" xml:space="preserve">
          <source>To learn more about refactoring options in CodeceptJS read &lt;a href=&quot;https://codecept.io/pageobjects/&quot;&gt;PageObjects guide (opens new window)&lt;/a&gt;.</source>
          <target state="translated">CodeceptJSのリファクタリングオプションの詳細については、&lt;a href=&quot;https://codecept.io/pageobjects/&quot;&gt;PageObjectsガイド（新しいウィンドウを開きます）&lt;/a&gt;をお読みください。</target>
        </trans-unit>
        <trans-unit id="3764ed3de22bce95002e04f9e38dba88b5d545ab" translate="yes" xml:space="preserve">
          <source>To learn more about refactoring options in CodeceptJS read &lt;a href=&quot;https://codecept.io/pageobjects/&quot;&gt;PageObjects guide&lt;/a&gt;.</source>
          <target state="translated">CodeceptJSのリファクタリングオプションの詳細については、&lt;a href=&quot;https://codecept.io/pageobjects/&quot;&gt;PageObjectsガイドをご覧ください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="33ca1416d034c2a6195929194308c2ba3df3b4de" translate="yes" xml:space="preserve">
          <source>To list all available commands for current configuration run &lt;code&gt;codeceptjs list&lt;/code&gt; or enable &lt;a href=&quot;#intellisense&quot;&gt;auto-completion by generating TypeScript definitions&lt;/a&gt;.</source>
          <target state="translated">現在の構成で使用可能なすべてのコマンドを一覧表示するには、 &lt;code&gt;codeceptjs list&lt;/code&gt; を実行するか、&lt;a href=&quot;#intellisense&quot;&gt;TypeScript定義を生成して自動補完を&lt;/a&gt;有効にします。</target>
        </trans-unit>
        <trans-unit id="32bd993b3aec35c6f35db98215ee283e09b83cfe" translate="yes" xml:space="preserve">
          <source>To list all available commands for the current configuration run &lt;code&gt;codeceptjs list&lt;/code&gt; or enable &lt;a href=&quot;#intellisense&quot;&gt;auto-completion by generating TypeScript definitions&lt;/a&gt;.</source>
          <target state="translated">現在の構成で使用可能なすべてのコマンドを一覧表示するには、 &lt;code&gt;codeceptjs list&lt;/code&gt; を実行するか、&lt;a href=&quot;#intellisense&quot;&gt;TypeScript定義を生成してオートコンプリートを&lt;/a&gt;有効にします。</target>
        </trans-unit>
        <trans-unit id="bc8144a9117a2721cea959d1ebd8b234a8a47835" translate="yes" xml:space="preserve">
          <source>To list all defined steps run &lt;code&gt;gherkin:steps&lt;/code&gt; command:</source>
          <target state="translated">定義されているすべてのステップを一覧表示するには、 &lt;code&gt;gherkin:steps&lt;/code&gt; コマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="44a70268ed0e15ed0d98ea6e20c80b2908c0fd7f" translate="yes" xml:space="preserve">
          <source>To locate &lt;code&gt;a&lt;/code&gt; element inside &lt;code&gt;label&lt;/code&gt; with text: 'Hello' use:</source>
          <target state="translated">「Hello」というテキストを含む &lt;code&gt;label&lt;/code&gt; 内 &lt;code&gt;a&lt;/code&gt; 要素を見つけるには：</target>
        </trans-unit>
        <trans-unit id="a892b91e923b926fd18f1db7b9776bc02d60a72a" translate="yes" xml:space="preserve">
          <source>To make combinations with modifier and mouse clicks (like Ctrl+Click) press a modifier, click, then release it. Appium: support, but clear field before pressing in apps:</source>
          <target state="translated">モディファイアとマウスクリック(Ctrl+クリックのような)の組み合わせを作るには、モディファイアを押してクリックしてから離す。Appium:サポートしていますが、アプリで押す前にフィールドをクリアします。</target>
        </trans-unit>
        <trans-unit id="dd700208c317dee5b703250d03c63c9ea29f158a" translate="yes" xml:space="preserve">
          <source>To make combinations with modifier key and user operation (e.g. &lt;code&gt;'Control'&lt;/code&gt; + &lt;a href=&quot;#click&quot;&gt;&lt;code&gt;click&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">修飾キーとユーザー操作（例： &lt;code&gt;'Control'&lt;/code&gt; +&lt;a href=&quot;#click&quot;&gt; &lt;code&gt;click&lt;/code&gt; &lt;/a&gt;）を組み合わせます。</target>
        </trans-unit>
        <trans-unit id="b300bf3184855e39930b5b2d135f2ee09a3d9288" translate="yes" xml:space="preserve">
          <source>To make this work some preparations are required.</source>
          <target state="translated">この作業を行うためには、いくつかの準備が必要です。</target>
        </trans-unit>
        <trans-unit id="7c33db9745c88b0183af1a1e9d3fbe85d03c4cdb" translate="yes" xml:space="preserve">
          <source>To make this work you need</source>
          <target state="translated">これを実現するためには</target>
        </trans-unit>
        <trans-unit id="1cd1b591f892518d095ff67cb6f7713fca8a403b" translate="yes" xml:space="preserve">
          <source>To mock requests enable additional helper &lt;a href=&quot;https://codecept.io/helpers/MockRequest&quot;&gt;MockRequest&lt;/a&gt; (which is based on Polly.js).</source>
          <target state="translated">リクエストをモックするには、追加のヘルパー&lt;a href=&quot;https://codecept.io/helpers/MockRequest&quot;&gt;MockRequest&lt;/a&gt;（Polly.jsに基づく）を有効にします。</target>
        </trans-unit>
        <trans-unit id="18cc516e95b4bc42b37c4c5d48d836fde301cf6e" translate="yes" xml:space="preserve">
          <source>To narrow down the results you can specify a context in second parameter.</source>
          <target state="translated">結果を絞り込むには、2番目のパラメータにコンテキストを指定します。</target>
        </trans-unit>
        <trans-unit id="7e9a2658dba90793996ba53852aec22fed9e4dc6" translate="yes" xml:space="preserve">
          <source>To narrow down the results you can specify a context in the second parameter.</source>
          <target state="translated">結果を絞り込むには、2番目のパラメータにコンテキストを指定します。</target>
        </trans-unit>
        <trans-unit id="dfbb6a252c90c39c58bb96c1a53dce200573f20f" translate="yes" xml:space="preserve">
          <source>To press a key in combination with modifier keys, pass the sequence as an array. All modifier keys (&lt;code&gt;'Alt'&lt;/code&gt;, &lt;code&gt;'Control'&lt;/code&gt;, &lt;code&gt;'Meta'&lt;/code&gt;, &lt;code&gt;'Shift'&lt;/code&gt;) will be released afterwards.</source>
          <target state="translated">キーを修飾キーと組み合わせて押すには、シーケンスを配列として渡します。その後、すべての修飾キー（ &lt;code&gt;'Alt'&lt;/code&gt; 、 &lt;code&gt;'Control'&lt;/code&gt; 、 &lt;code&gt;'Meta'&lt;/code&gt; 、 &lt;code&gt;'Shift'&lt;/code&gt; ）が解放されます。</target>
        </trans-unit>
        <trans-unit id="e9ed06c9d0a8a8d8c0aef1819ed3516ce11203f7" translate="yes" xml:space="preserve">
          <source>To proceed you need to have &lt;a href=&quot;https://codecept.io/quickstart#using-selenium-webdriver&quot;&gt;CodeceptJS installed&lt;/a&gt; and &lt;code&gt;WebDriver&lt;/code&gt; helper selected.</source>
          <target state="translated">続行するには、&lt;a href=&quot;https://codecept.io/quickstart#using-selenium-webdriver&quot;&gt;CodeceptJSをインストールし&lt;/a&gt;、 &lt;code&gt;WebDriver&lt;/code&gt; ヘルパーを選択する必要があります。</target>
        </trans-unit>
        <trans-unit id="d59ad1176a56be0d640e6d44960e6392c4ac3729" translate="yes" xml:space="preserve">
          <source>To quickly execute tests use following npm scripts:</source>
          <target state="translated">テストを素早く実行するには、以下の npm スクリプトを使用します。</target>
        </trans-unit>
        <trans-unit id="cbfbab33da17f176bb938591c5e0abc26eb0e467" translate="yes" xml:space="preserve">
          <source>To run all tests with &lt;code&gt;slow&lt;/code&gt; word in it</source>
          <target state="translated">&lt;code&gt;slow&lt;/code&gt; ワードを含むすべてのテストを実行するには</target>
        </trans-unit>
        <trans-unit id="17bfb1fc9b95d6776b5016ff2219d30b86481e09" translate="yes" xml:space="preserve">
          <source>To run all tests with the &lt;code&gt;slow&lt;/code&gt; word in it:</source>
          <target state="translated">&lt;code&gt;slow&lt;/code&gt; ワードを含むすべてのテストを実行するには：</target>
        </trans-unit>
        <trans-unit id="dc785e44fb60a58f2c46308b30b7d823a77ef874" translate="yes" xml:space="preserve">
          <source>To run mobile test you need either an device emulator (available with Android SDK or iOS), real device connected for mobile testing. Alternatively, you may execute Appium with device emulator inside Docker container.</source>
          <target state="translated">モバイルテストを実行するには、Android SDKやiOSで利用可能なデバイスエミュレータ、モバイルテスト用に接続された実機のどちらかが必要です。また、Dockerコンテナ内のデバイスエミュレータを使ってAppiumを実行することもできます。</target>
        </trans-unit>
        <trans-unit id="99126829b7d030d6400b727a158619dcb30cb938" translate="yes" xml:space="preserve">
          <source>To run only features use &lt;code&gt;--features&lt;/code&gt; option:</source>
          <target state="translated">機能のみを実行するには、 &lt;code&gt;--features&lt;/code&gt; オプションを使用します。</target>
        </trans-unit>
        <trans-unit id="59519343ec249121717838e5f214544e1fb0031b" translate="yes" xml:space="preserve">
          <source>To run only tests without features use &lt;code&gt;--tests&lt;/code&gt; option:</source>
          <target state="translated">機能なしでテストのみを実行するには、 &lt;code&gt;--tests&lt;/code&gt; オプションを使用します。</target>
        </trans-unit>
        <trans-unit id="bd770d3ae14df12349d556753928ed4e8394f569" translate="yes" xml:space="preserve">
          <source>To run several browsers in one test see &lt;a href=&quot;https://codecept.io/acceptance/#multiple-sessions&quot;&gt;multiple session&lt;/a&gt; chapter.</source>
          <target state="translated">1つのテストで複数のブラウザーを実行するには、&lt;a href=&quot;https://codecept.io/acceptance/#multiple-sessions&quot;&gt;複数セッションの&lt;/a&gt;章を参照してください。</target>
        </trans-unit>
        <trans-unit id="c21242460be35650ed93b541279745a2e0d38d88" translate="yes" xml:space="preserve">
          <source>To run tests and see step-by step output use &lt;code&gt;--steps&lt;/code&gt; optoin:</source>
          <target state="translated">テストを実行して段階的な出力を確認するには、 &lt;code&gt;--steps&lt;/code&gt; optoinを使用します。</target>
        </trans-unit>
        <trans-unit id="bed57123098cc5911f6f4042b3de4f44e2c85c98" translate="yes" xml:space="preserve">
          <source>To run tests with pause on fail enabled use &lt;code&gt;-p pauseOnFail&lt;/code&gt; option</source>
          <target state="translated">失敗時に一時停止を有効にしてテストを実行するには、 &lt;code&gt;-p pauseOnFail&lt;/code&gt; オプションを使用します</target>
        </trans-unit>
        <trans-unit id="88aff1203077d685f0a38adaee794e651c22e26f" translate="yes" xml:space="preserve">
          <source>To see &lt;code&gt;mockRequest&lt;/code&gt; method in intellisense auto completion don't forget to run &lt;code&gt;codeceptjs def&lt;/code&gt; command:</source>
          <target state="translated">表示するには &lt;code&gt;mockRequest&lt;/code&gt; 実行することを忘れないでくださいインテリセンスの自動補完のメソッドを &lt;code&gt;codeceptjs def&lt;/code&gt; コマンドを：</target>
        </trans-unit>
        <trans-unit id="217bb5f7ea4f7cb44f5e81e5f2f1bfdf9669b6f1" translate="yes" xml:space="preserve">
          <source>To see a more detailed output add the &lt;code&gt;--debug&lt;/code&gt; flag:</source>
          <target state="translated">より詳細な出力を表示するには、 &lt;code&gt;--debug&lt;/code&gt; フラグを追加します。</target>
        </trans-unit>
        <trans-unit id="40c9b7d37521cdc4e3b114507c7ca44355f4d9bb" translate="yes" xml:space="preserve">
          <source>To see all available commands press TAB two times to see list of all actions included in I.</source>
          <target state="translated">使用可能なすべてのコマンドを表示するには、TABを2回押して、Iに含まれるすべてのアクションのリストを表示します。</target>
        </trans-unit>
        <trans-unit id="3a6853d609c6b8adc512f7dab1be1c408b926010" translate="yes" xml:space="preserve">
          <source>To see all available commands, press TAB two times to see list of all actions included in the &lt;code&gt;I&lt;/code&gt; object.</source>
          <target state="translated">使用可能なすべてのコマンドを表示するには、Tabキーを2回押して、 &lt;code&gt;I&lt;/code&gt; オブジェクトに含まれるすべてのアクションのリストを表示します。</target>
        </trans-unit>
        <trans-unit id="fc821c26e51299b190cebbef38bd1b5c2d9ff586" translate="yes" xml:space="preserve">
          <source>To see all possible assertions see the helper's reference.</source>
          <target state="translated">すべての可能なアサーションを見るには、ヘルパーのリファレンスを参照してください。</target>
        </trans-unit>
        <trans-unit id="98d034c362ad6dde6287829b5fb5cc7fd0398c3b" translate="yes" xml:space="preserve">
          <source>To see all possible assertions, check the helper's reference.</source>
          <target state="translated">すべての可能なアサーションを見るには、ヘルパーのリファレンスを確認してください。</target>
        </trans-unit>
        <trans-unit id="466ca37dc7d1d6445b3db4047144c7d80adba3e8" translate="yes" xml:space="preserve">
          <source>To see how the test was executed, use &lt;a href=&quot;https://codecept.io/plugins/#stepbystepreport&quot;&gt;stepByStepReport Plugin&lt;/a&gt;. It saves a screenshot of each passed step and shows them in a nice slideshow.</source>
          <target state="translated">テストがどのように実行されたかを確認するには、&lt;a href=&quot;https://codecept.io/plugins/#stepbystepreport&quot;&gt;stepByStepReportプラグインを&lt;/a&gt;使用します。渡された各ステップのスクリーンショットを保存し、素敵なスライドショーで表示します。</target>
        </trans-unit>
        <trans-unit id="562f854517067cc014eca33ddad32b53b69d87be" translate="yes" xml:space="preserve">
          <source>To see more detailed output add &lt;code&gt;--debug&lt;/code&gt; flag:</source>
          <target state="translated">より詳細な出力を表示するには、 &lt;code&gt;--debug&lt;/code&gt; フラグを追加します。</target>
        </trans-unit>
        <trans-unit id="be488195c5ee10c7cd613ecec46efb6e75db6e0f" translate="yes" xml:space="preserve">
          <source>To see not only business steps but an actual performed steps use &lt;code&gt;--debug&lt;/code&gt; flag:</source>
          <target state="translated">ビジネスステップだけでなく実際に実行されたステップも表示するには、 &lt;code&gt;--debug&lt;/code&gt; フラグを使用します。</target>
        </trans-unit>
        <trans-unit id="5af7485e1dbe6c8a7b18554b2205e4d3cbb27e6c" translate="yes" xml:space="preserve">
          <source>To see step-by-step output of running tests, add &lt;code&gt;--steps&lt;/code&gt; flag:</source>
          <target state="translated">実行中のテストの段階的な出力を表示するには、 &lt;code&gt;--steps&lt;/code&gt; フラグを追加します。</target>
        </trans-unit>
        <trans-unit id="64c54548b13f9bcb9ee51e5dc70781cb49750bea" translate="yes" xml:space="preserve">
          <source>To see the step-by-step output of running tests, add the &lt;code&gt;--steps&lt;/code&gt; flag:</source>
          <target state="translated">実行中のテストの段階的な出力を確認するには、 &lt;code&gt;--steps&lt;/code&gt; フラグを追加します。</target>
        </trans-unit>
        <trans-unit id="c976327d05b5c8b01cee66711dc6ecdd7a85fc90" translate="yes" xml:space="preserve">
          <source>To see very detailed output informations use the &lt;code&gt;--verbose&lt;/code&gt; flag:</source>
          <target state="translated">非常に詳細な出力情報を表示するには、 &lt;code&gt;--verbose&lt;/code&gt; フラグを使用します。</target>
        </trans-unit>
        <trans-unit id="a8705fb31e48d551a73625a10be2d15eb8d87830" translate="yes" xml:space="preserve">
          <source>To see very detailed output system use &lt;code&gt;--verbose&lt;/code&gt; flag:</source>
          <target state="translated">非常に詳細な出力システムを表示するには、 &lt;code&gt;--verbose&lt;/code&gt; フラグを使用します。</target>
        </trans-unit>
        <trans-unit id="d12dd8a174260a6505306c9712e1402e937989a1" translate="yes" xml:space="preserve">
          <source>To set a specific context use &lt;code&gt;{ web: 'webview.context' }&lt;/code&gt; instead:</source>
          <target state="translated">特定のコンテキストを設定するには、代わりに &lt;code&gt;{ web: 'webview.context' }&lt;/code&gt; 使用します。</target>
        </trans-unit>
        <trans-unit id="a12e42bd2a1940c60c37ebce40db6d543ea70278" translate="yes" xml:space="preserve">
          <source>To set this option for all scenarios in a file, add &lt;code&gt;retry&lt;/code&gt; to a feature:</source>
          <target state="translated">ファイル内のすべてのシナリオにこのオプションを設定するには、機能に &lt;code&gt;retry&lt;/code&gt; を追加します。</target>
        </trans-unit>
        <trans-unit id="0adcbf28886d29a6ddbc49cbac8f959b54f28fa3" translate="yes" xml:space="preserve">
          <source>To set this option for all scenarios in a file, add retry to a feature:</source>
          <target state="translated">ファイル内のすべてのシナリオに対してこのオプションを設定するには、機能に再試行を追加します。</target>
        </trans-unit>
        <trans-unit id="ff1522cf3a51f2b1894036b30018c039cca66c88" translate="yes" xml:space="preserve">
          <source>To share the same user session across different tests CodeceptJS provides &lt;a href=&quot;https://codecept.io/plugins#autologin&quot;&gt;autoLogin plugin&lt;/a&gt;. It simplifies login management and reduces time consuming login operations. Instead of filling in login form before each test it saves the cookies of a valid user session and reuses it for next tests. If a session expires or doesn't exist, logs in a user again.</source>
          <target state="translated">異なるテスト間で同じユーザーセッションを共有するために、CodeceptJSは&lt;a href=&quot;https://codecept.io/plugins#autologin&quot;&gt;autoLoginプラグインを&lt;/a&gt;提供します。ログイン管理を簡素化し、時間のかかるログイン操作を削減します。各テストの前にログインフォームに入力する代わりに、有効なユーザーセッションのCookieを保存し、次のテストで再利用します。セッションの有効期限が切れているか存在しない場合は、ユーザーに再度ログインします。</target>
        </trans-unit>
        <trans-unit id="1eeadb17d957120d37282f11839006326e774061" translate="yes" xml:space="preserve">
          <source>To show additional information for a step in a test. Example:</source>
          <target state="translated">テストのステップの追加情報を表示すること。例。</target>
        </trans-unit>
        <trans-unit id="71751b4c7f3d2a20f9b2c0d7f4c03b4a48d8afaf" translate="yes" xml:space="preserve">
          <source>To skip guessing the locator type, pass in a strict locator - A locator starting with '#' or '.' is considered to be CSS. Locators starting with '//' or './/' are considered to be XPath.</source>
          <target state="translated">ロケータのタイプを推測しないようにするには、厳密なロケータを渡します。'//' または './/' で始まるロケータは XPath と見なされます。</target>
        </trans-unit>
        <trans-unit id="3f14d81240205b42a44a1591306486a558c77681" translate="yes" xml:space="preserve">
          <source>To skip the global search pass exact strict locator (or start locator with &lt;code&gt;//&lt;/code&gt; or &lt;code&gt;.&lt;/code&gt; or &lt;code&gt;#&lt;/code&gt;). In this case you are not limited to buttons and links. Any element found by that locator is clicked.</source>
          <target state="translated">グローバル検索をスキップするには、正確なロケーターを渡します（またはロケーターを &lt;code&gt;//&lt;/code&gt; または &lt;code&gt;.&lt;/code&gt; または &lt;code&gt;#&lt;/code&gt; で開始します）。この場合、ボタンとリンクに限定されません。そのロケーターが見つけた要素がクリックされます。</target>
        </trans-unit>
        <trans-unit id="69b64acc79358c0efa50588de57163934570f6c6" translate="yes" xml:space="preserve">
          <source>To specify exact locator type use &lt;strong&gt;strict locators&lt;/strong&gt;:</source>
          <target state="translated">正確なロケーター・タイプの使用を指定するには&lt;strong&gt;厳格なロケータを&lt;/strong&gt;：</target>
        </trans-unit>
        <trans-unit id="82630e4ba5036a12c51764862c29a9322fb8cdc5" translate="yes" xml:space="preserve">
          <source>To specify the exact area on a page where actions can be performed you can use &lt;code&gt;within&lt;/code&gt; function. Everything executed in its context will be narrowed to context specified by locator:</source>
          <target state="translated">アクションを実行できるページ上の正確な領域を指定するには、関数 &lt;code&gt;within&lt;/code&gt; 使用できます。そのコンテキストで実行されるすべてのものは、ロケーターによって指定されたコンテキストに絞り込まれます。</target>
        </trans-unit>
        <trans-unit id="a8375cf884fd686aecf16f7d28cea39c17630811" translate="yes" xml:space="preserve">
          <source>To specify the exact area on a page where actions can be performed you can use the &lt;code&gt;within&lt;/code&gt; function. Everything executed in its context will be narrowed to context specified by locator:</source>
          <target state="translated">アクションを実行できるページ上の正確な領域を指定するには、 &lt;code&gt;within&lt;/code&gt; 関数を使用できます。そのコンテキストで実行されるすべてのものは、ロケーターによって指定されたコンテキストに絞り込まれます。</target>
        </trans-unit>
        <trans-unit id="9f7c6a4f8547ff923a93c6afe5e7f851bb941258" translate="yes" xml:space="preserve">
          <source>To start CodeceptUI in application mode:</source>
          <target state="translated">アプリケーションモードでCodeceptUIを起動します。</target>
        </trans-unit>
        <trans-unit id="179cb464e9cc61d257e4d59a06177ba42480b173" translate="yes" xml:space="preserve">
          <source>To start CodeceptUI in server mode:</source>
          <target state="translated">サーバーモードでCodeceptUIを起動します。</target>
        </trans-unit>
        <trans-unit id="d8260d28f858afabb6e5651aba72493ad40191b7" translate="yes" xml:space="preserve">
          <source>To start a new project initialize CodeceptJS to create main config file: &lt;code&gt;codecept.conf.js&lt;/code&gt;.</source>
          <target state="translated">：メインの設定ファイルを作成するために、新しいプロジェクトの初期化CodeceptJSを開始するには &lt;code&gt;codecept.conf.js&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="8262b47005cd46156ee130bd0a53f42e7220bd72" translate="yes" xml:space="preserve">
          <source>To start interactive pause automatically for a failing test you can run tests with &lt;a href=&quot;https://codecept.io/plugins/#pauseonfail&quot;&gt;pauseOnFail Plugin&lt;/a&gt;. When a test fails, the pause mode will be activated, so you can inspect current browser session before it is closed.</source>
          <target state="translated">失敗したテストに対してインタラクティブな一時停止を自動的に開始するには、&lt;a href=&quot;https://codecept.io/plugins/#pauseonfail&quot;&gt;pauseOnFailプラグイン&lt;/a&gt;を使用してテストを実行できます。テストが失敗すると、一時停止モードがアクティブになるため、現在のブラウザセッションを閉じる前に調べることができます。</target>
        </trans-unit>
        <trans-unit id="a3e1e02e70ba7220b433297d51952444b4a0229a" translate="yes" xml:space="preserve">
          <source>To start please install &lt;code&gt;allure-commandline&lt;/code&gt; package (which requires Java 8)</source>
          <target state="translated">開始するには、 &lt;code&gt;allure-commandline&lt;/code&gt; パッケージをインストールしてください（Java 8が必要です）</target>
        </trans-unit>
        <trans-unit id="530dedc976b2a27fd3e60a9b172e295acbf77222" translate="yes" xml:space="preserve">
          <source>To start using CodeceptJS you will need to install it via NPM and initialize it in a directory with tests.</source>
          <target state="translated">CodeceptJSを使い始めるには、NPM経由でインストールし、testsのあるディレクトリに初期化する必要があります。</target>
        </trans-unit>
        <trans-unit id="0d8e12737b5669a19012fbdd71eaba4d5770dba8" translate="yes" xml:space="preserve">
          <source>To start using CodeceptJS you will need to install it via NPM and initialize it in directory with tests.</source>
          <target state="translated">CodeceptJSの使用を開始するには、NPM経由でインストールし、testsのあるディレクトリに初期化する必要があります。</target>
        </trans-unit>
        <trans-unit id="edf5acae38231ad8790721a350ba522afd75b2fc" translate="yes" xml:space="preserve">
          <source>To start using CodeceptUI you need to have CodeceptJS project with a few tests written. If CodeceptUI was installed by &lt;code&gt;create-codecept&lt;/code&gt; command it can be started with:</source>
          <target state="translated">CodeceptUIの使用を開始するには、いくつかのテストが記述されたCodeceptJSプロジェクトが必要です。CodeceptUIが &lt;code&gt;create-codecept&lt;/code&gt; コマンドによってインストールされた場合、次のコマンドで開始できます。</target>
        </trans-unit>
        <trans-unit id="47b54fa654cb35516d73df970c5e94d7c93634b1" translate="yes" xml:space="preserve">
          <source>To start using TestCafe with CodeceptJS install both via NPM</source>
          <target state="translated">TestCafeとCodeceptJSの使用を開始するには、NPM経由で両方をインストールします。</target>
        </trans-unit>
        <trans-unit id="521465ce69232ac885686acbef74fc224e08a6f6" translate="yes" xml:space="preserve">
          <source>To start writing a test it is important to understand how to locate elements for native mobile applications. In both Android and iPhone elements are defined in XML format and can be searched by XPath locators.</source>
          <target state="translated">テストを書き始めるには、ネイティブ・モバイル・アプリケーションの要素をどのように検索するかを理解することが重要です。Android と iPhone の両方で、要素は XML 形式で定義されており、XPath ロケータで検索することができます。</target>
        </trans-unit>
        <trans-unit id="900ebfc14e0e6d4d57df376b264c2cb23555328b" translate="yes" xml:space="preserve">
          <source>To start you need CodeceptJS with Playwright packages installed</source>
          <target state="translated">開始するには、CodeceptJSとPlaywrightパッケージがインストールされている必要があります。</target>
        </trans-unit>
        <trans-unit id="97e34aedb45f88adb2cb8c3dc0c66cf16e6b3343" translate="yes" xml:space="preserve">
          <source>To start you need CodeceptJS with Puppeteer packages installed</source>
          <target state="translated">開始するには、PuppeteerパッケージがインストールされたCodeceptJSが必要です。</target>
        </trans-unit>
        <trans-unit id="1654e19c8a6de96e26d1f254de659120deae5407" translate="yes" xml:space="preserve">
          <source>To start you need CodeceptJS with nightmare package installed.</source>
          <target state="translated">開始するには、ナイトメアパッケージがインストールされたCodeceptJSが必要です。</target>
        </trans-unit>
        <trans-unit id="f416a75640c459750ad3ee388c335da78b24cfb3" translate="yes" xml:space="preserve">
          <source>To stop request recording/replaying use &lt;code&gt;I.stopMocking()&lt;/code&gt;.</source>
          <target state="translated">リクエストの記録/再生を停止するには、 &lt;code&gt;I.stopMocking()&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="0f7705b77f5746b9fceccd5a23480057b6c3971e" translate="yes" xml:space="preserve">
          <source>To update &lt;a href=&quot;https://netflix.github.io/pollyjs/#/configuration&quot;&gt;PollyJS configuration (opens new window)&lt;/a&gt; use secon argument:</source>
          <target state="translated">&lt;a href=&quot;https://netflix.github.io/pollyjs/#/configuration&quot;&gt;PollyJS構成&lt;/a&gt;を更新するには（新しいウィンドウを開きます）、secon引数を使用します。</target>
        </trans-unit>
        <trans-unit id="8fbbd79323c2915680c6bc843640b06c382fa890" translate="yes" xml:space="preserve">
          <source>To use SmartWait and wait for element to appear on a page, add &lt;code&gt;true&lt;/code&gt; as second arg:</source>
          <target state="translated">SmartWaitを使用して要素がページに表示されるのを待つには、2番目の引数として &lt;code&gt;true&lt;/code&gt; を追加します。</target>
        </trans-unit>
        <trans-unit id="ec467de0e37461348ca1663203f29b211445d1d4" translate="yes" xml:space="preserve">
          <source>To use a Page Fragment within a Page Object, you can use &lt;code&gt;inject&lt;/code&gt; method to get it by its name.</source>
          <target state="translated">ページオブジェクト内でページフラグメントを使用するには、 &lt;code&gt;inject&lt;/code&gt; メソッドを使用して名前で取得できます。</target>
        </trans-unit>
        <trans-unit id="fd37a657007ccd611e47bffb6f88e517bd74f966" translate="yes" xml:space="preserve">
          <source>To use a Page Fragment within a Page Object, you need to &lt;code&gt;require&lt;/code&gt; it on top of the Page Object file:</source>
          <target state="translated">ページオブジェクト内でページフラグメントを使用するには、ページオブジェクトファイルの上にそれを &lt;code&gt;require&lt;/code&gt; する必要があります。</target>
        </trans-unit>
        <trans-unit id="1f2b37261513d8f19482b4288e025adc675e2b43" translate="yes" xml:space="preserve">
          <source>To use a Page Fragment within a Test Scenario just inject it into your Scenario:</source>
          <target state="translated">テストシナリオ内でページフラグメントを使用するには、それをシナリオに注入するだけです。</target>
        </trans-unit>
        <trans-unit id="5668b1b7f6d7dc22e1ad0da7912adef5ab39e548" translate="yes" xml:space="preserve">
          <source>To use a Page Fragment within a Test Scenario, just inject it into your Scenario:</source>
          <target state="translated">テストシナリオ内でページフラグメントを使用するには、それをシナリオに注入するだけです。</target>
        </trans-unit>
        <trans-unit id="d82e0f6a4e8ee6f2f34d5c37bb34ee9a7c3f37d4" translate="yes" xml:space="preserve">
          <source>To use in passthrough mode set rules to mock requests and they will be automatically intercepted and replaced:</source>
          <target state="translated">パススルーモードで使用するには、モックリクエストにルールを設定します。</target>
        </trans-unit>
        <trans-unit id="5cfafd7030479be840ac28fac2193e7c45154140" translate="yes" xml:space="preserve">
          <source>To use it with Nightmare install nightmare and nightmare-upload packages:</source>
          <target state="translated">Nightmareと一緒に使うには、nightmareとnightmare-uploadパッケージをインストールします。</target>
        </trans-unit>
        <trans-unit id="2eaf83cb99b28ca295386b72546a3bbdb9407429" translate="yes" xml:space="preserve">
          <source>To use it with Protractor install protractor package:</source>
          <target state="translated">Protractorと一緒に使うには、protractorパッケージをインストールします。</target>
        </trans-unit>
        <trans-unit id="fdcc058df9c075e9f21f2111a4802d1ad6d5cc6e" translate="yes" xml:space="preserve">
          <source>To use it with Puppeteer install puppeteer package:</source>
          <target state="translated">Puppeteerと一緒に使うには、puppeteerパッケージをインストールします。</target>
        </trans-unit>
        <trans-unit id="370b85d7a907a4119da864fe618720c70bf22aa4" translate="yes" xml:space="preserve">
          <source>To use it with WebDriver install webdriverio package:</source>
          <target state="translated">WebDriverと併用するには、webdriverioパッケージをインストールします。</target>
        </trans-unit>
        <trans-unit id="3ef680a79116844b722cde9d6f8f683c698bd120" translate="yes" xml:space="preserve">
          <source>To use it with WebDriverIO install webdriverio package:</source>
          <target state="translated">WebDriverIOと併用するには、webdriverioパッケージをインストールします。</target>
        </trans-unit>
        <trans-unit id="7e816d41c4891c5ed28c698a842d7d307bb92bb0" translate="yes" xml:space="preserve">
          <source>To use remote device you can provide 'remote' as browser parameter this will display a link with QR Code See &lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/recipes/test-on-remote-computers-and-mobile-devices&quot;&gt;https://devexpress.github.io/testcafe/documentation/recipes/test-on-remote-computers-and-mobile-devices.html (opens new window)&lt;/a&gt;</source>
          <target state="translated">リモートデバイスを使用するには、ブラウザパラメータとして「remote」を指定できます。これにより、QRコードとのリンクが表示され&lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/recipes/test-on-remote-computers-and-mobile-devices&quot;&gt;ます。https：//devexpress.github.io/testcafe/documentation/recipes/test-on-remote-computers-and-mobile-を&lt;/a&gt;参照してください。 devices.html（新しいウィンドウを開きます）</target>
        </trans-unit>
        <trans-unit id="f10d700778e7a2439c478d219c5b02502bfd1e78" translate="yes" xml:space="preserve">
          <source>To work, you need the client javascript code to be NOT uglified. They need to be built in &quot;development&quot; mode. And the end of your tests, you'll get a directory full of coverage per test run. Now what? You'll need to convert the coverage code to something istanbul can read. Good news is someone wrote the code for you (see puppeteer-to-istanbul link below). Then using istanbul you need to combine the converted coverage and create a report. Good luck!</source>
          <target state="translated">動作するためには、クライアントのjavascriptのコードが醜くならないようにする必要があります。彼らは &quot;開発 &quot;モードでビルドされる必要があります。そして、テストの最後には、テストの実行ごとにカバレッジの完全なディレクトリを得ることができます。さて、どうしますか? カバレッジコードをイスタンブールで読めるように変換する必要があります。いいニュースは、誰かがコードを書いてくれたことです (下の puppeteer-istanbul へのリンクを参照してください)。そしてistanbulを使って、変換したカバレッジコードを組み合わせてレポートを作成します。頑張ってください。</target>
        </trans-unit>
        <trans-unit id="5a94dc76ff20fd5b7546ff6bd0cdaaf74102d809" translate="yes" xml:space="preserve">
          <source>To write simpler and effective tests we encourage to use short cuts. Make test be focused on one feature and try to simplify everything that is not related directly to test.</source>
          <target state="translated">よりシンプルで効果的なテストを書くためには、ショートカットを使うことをお勧めします。テストを一つの機能に集中させ、テストに直接関係のないものはすべて単純化するようにしてください。</target>
        </trans-unit>
        <trans-unit id="9e043b022f30e6001e3c9f611a664861633c9ce7" translate="yes" xml:space="preserve">
          <source>To write your tests in French you can enable the French translation by adding to config:</source>
          <target state="translated">テストをフランス語で書くには、config に追加することでフランス語翻訳を有効にすることができます。</target>
        </trans-unit>
        <trans-unit id="b2d0d429c99f6f8f65c1e4c01a792cd20d3b907a" translate="yes" xml:space="preserve">
          <source>To write your tests in portuguese you can enable the portuguese translation in config file like:</source>
          <target state="translated">テストをポルトガル語で記述するには、以下のような設定ファイルでポルトガル語の翻訳を有効にします。</target>
        </trans-unit>
        <trans-unit id="58512039597890193a44dce4a787d507f0c29c5d" translate="yes" xml:space="preserve">
          <source>Today all modern web applications have REST API. So it is a good idea to use it to create data for a test and delete it after. API supposed to be a stable interface and it can be used by acceptance tests. CodeceptJS provides 2 helpers for Data Management via REST API.</source>
          <target state="translated">最近のWebアプリケーションはすべてREST APIを持っています。そのため、テスト用のデータを作成した後にそれを削除するためにそれを使用するのは良いアイデアです。APIは安定したインターフェースであることが前提となっており、受入テストでも使用することができます。CodeceptJSでは、REST APIを利用したデータ管理のためのヘルパーを2つ提供しています。</target>
        </trans-unit>
        <trans-unit id="3a49d04edc1ab4a0b717ab58e5acccf1ef82a1ed" translate="yes" xml:space="preserve">
          <source>Today all modern web applications have REST or GraphQL API . So it is a good idea to use it to create data for a test and delete it after. API is supposed to be a stable interface and it can be used by acceptance tests. CodeceptJS provides 4 helpers for Data Management via REST and GraphQL API.</source>
          <target state="translated">今日では、すべての最新のWebアプリケーションは、RESTまたはGraphQL APIを持っています。そのため、テスト用のデータを作成した後にそれを削除するためにそれを使用することをお勧めします。APIは安定したインターフェースであることが前提となっており、受入テストで使用することができます。CodeceptJSでは、RESTやGraphQL APIを利用したデータ管理のための4つのヘルパーを提供しています。</target>
        </trans-unit>
        <trans-unit id="c33099dcec17e883a56194412bf5bd503be62c52" translate="yes" xml:space="preserve">
          <source>Todo Test</source>
          <target state="translated">すべてのテスト</target>
        </trans-unit>
        <trans-unit id="ac26a7a94ea2e66490f932b6415a09ef6f2a913c" translate="yes" xml:space="preserve">
          <source>Translation</source>
          <target state="translated">Translation</target>
        </trans-unit>
        <trans-unit id="a975cfaf636408d33108ddab54b9bc044a7078d8" translate="yes" xml:space="preserve">
          <source>Try to perform your scenario step by step. Then copy succesful commands and insert them into a test.</source>
          <target state="translated">シナリオを一歩一歩実行してみてください。そして、成功したコマンドをコピーしてテストに挿入します。</target>
        </trans-unit>
        <trans-unit id="78f9c0525ac7bf9d8ab2e9c0de9e9d9dbdcb7dab" translate="yes" xml:space="preserve">
          <source>Tuning configuration for helpers like WebDriver, Puppeteer can be hard, as it requires good understanding of how these technologies work. Use the &lt;a href=&quot;https://github.com/codeceptjs/configure&quot;&gt;&lt;code&gt;@codeceptjs/configure&lt;/code&gt; (opens new window)&lt;/a&gt; package with common configuration recipes.</source>
          <target state="translated">WebDriverやPuppeteerなどのヘルパーの構成を調整するには、これらのテクノロジーがどのように機能するかを十分に理解する必要があるため、難しい場合があります。使用&lt;a href=&quot;https://github.com/codeceptjs/configure&quot;&gt; &lt;code&gt;@codeceptjs/configure&lt;/code&gt; （新しいウィンドウが開きます）&lt;/a&gt;一般的な構成のレシピ付きパッケージを。</target>
        </trans-unit>
        <trans-unit id="38c087c694cd03fce0bb2b3ea35b87e4ee6e1251" translate="yes" xml:space="preserve">
          <source>Turn off minification for application builds otherwise component names will be uglified as well</source>
          <target state="translated">アプリケーションのビルドの最小化をオフにすると、コンポーネント名も同様に醜くなります。</target>
        </trans-unit>
        <trans-unit id="3741712ddfe0c9bfc5da0baef795807d298f9e73" translate="yes" xml:space="preserve">
          <source>Turn off the &lt;code&gt;restart&lt;/code&gt; option if you want to run your suite in a single browser instance.</source>
          <target state="translated">スイートを単一のブラウザーインスタンスで実行する場合は、 &lt;code&gt;restart&lt;/code&gt; オプションをオフにします。</target>
        </trans-unit>
        <trans-unit id="61a0a642bce073f3ad94e858090a59e2f9bea328" translate="yes" xml:space="preserve">
          <source>Turn off the &lt;code&gt;show&lt;/code&gt; option if you want to run test in headless mode.</source>
          <target state="translated">ヘッドレスモードでテストを実行する場合は、 &lt;code&gt;show&lt;/code&gt; オプションをオフにします。</target>
        </trans-unit>
        <trans-unit id="f1d4a90540f2e07e93418697dfc9a3f920a71b08" translate="yes" xml:space="preserve">
          <source>Turn off the &lt;code&gt;show&lt;/code&gt; option if you want to run test in headless mode. If you don't specify the browser here, &lt;code&gt;chromium&lt;/code&gt; will be used. Possible browsers are: &lt;code&gt;chromium&lt;/code&gt;, &lt;code&gt;firefox&lt;/code&gt; and &lt;code&gt;webkit&lt;/code&gt;</source>
          <target state="translated">ヘッドレスモードでテストを実行する場合は、 &lt;code&gt;show&lt;/code&gt; オプションをオフにします。ここでブラウザを指定しない場合は、 &lt;code&gt;chromium&lt;/code&gt; が使用されます。可能なブラウザは次のとおりです： &lt;code&gt;chromium&lt;/code&gt; 、 &lt;code&gt;firefox&lt;/code&gt; 、 &lt;code&gt;webkit&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="aa59884b6741eacdf93fe0d55c7a78da16453b70" translate="yes" xml:space="preserve">
          <source>Turn on the &lt;code&gt;show&lt;/code&gt; option if you want to follow test progress in a window. This is very useful for debugging.</source>
          <target state="translated">ウィンドウでテストの進行状況を追跡する場合は、 &lt;code&gt;show&lt;/code&gt; オプションをオンにします。これはデバッグに非常に役立ちます。</target>
        </trans-unit>
        <trans-unit id="394ccbce7090353e2252f240655ab341d881f171" translate="yes" xml:space="preserve">
          <source>Turn on the &lt;code&gt;show&lt;/code&gt; option if you want to follow test progress in a window. This is very useful for debugging. All other options can be taken from &lt;a href=&quot;https://github.com/segmentio/nightmare#api&quot;&gt;NightmareJS API&lt;/a&gt;.</source>
          <target state="translated">ウィンドウでテストの進行状況を追跡する場合は、 &lt;code&gt;show&lt;/code&gt; オプションをオンにします。これはデバッグに非常に役立ちます。他のすべてのオプションは、&lt;a href=&quot;https://github.com/segmentio/nightmare#api&quot;&gt;NightmareJS API&lt;/a&gt;から取得できます。</target>
        </trans-unit>
        <trans-unit id="8093685b50e97c5589a7048b76a107fcce13829a" translate="yes" xml:space="preserve">
          <source>Type in different actions to try them, copy and paste successful ones into the test file.</source>
          <target state="translated">異なるアクションを入力して試してみて、成功したものをコピーしてテストファイルに貼り付けます。</target>
        </trans-unit>
        <trans-unit id="412bb5d4610a6199453d4161bbc2f008d48f7949" translate="yes" xml:space="preserve">
          <source>Type in different actions to try them, copy valid successful ones to test, update the test file.</source>
          <target state="translated">異なるアクションを入力して試したり、有効な成功したものをテストにコピーしたり、テストファイルを更新したりします。</target>
        </trans-unit>
        <trans-unit id="d4a86cb946d4af4766f6a695502b64f3ea0cd58b" translate="yes" xml:space="preserve">
          <source>TypeScript</source>
          <target state="translated">TypeScript</target>
        </trans-unit>
        <trans-unit id="ce67f2cbd8ff5a2fced8e3ee7727e721734ad2ad" translate="yes" xml:space="preserve">
          <source>TypeScript Boilerplate</source>
          <target state="translated">TypeScript ボイラープレート</target>
        </trans-unit>
        <trans-unit id="c46bd93a1eeb9d6eeea6c64732c8618264c46071" translate="yes" xml:space="preserve">
          <source>TypeScript Definitions</source>
          <target state="translated">TypeScript の定義</target>
        </trans-unit>
        <trans-unit id="d7bf8ba2b74edadfbeece1566a7a0ea249acf903" translate="yes" xml:space="preserve">
          <source>TypeScript Definitions allows IDEs to provide autocompletion when writing tests.</source>
          <target state="translated">TypeScript Definitions を使用すると、IDE がテストを書く際に自動補完を提供できるようになります。</target>
        </trans-unit>
        <trans-unit id="52524e66f57c06aed5cad1c55ac34505dd2ef6da" translate="yes" xml:space="preserve">
          <source>Types for custom helper or page object</source>
          <target state="translated">カスタムヘルパーやページオブジェクトの型</target>
        </trans-unit>
        <trans-unit id="4b0cd03f7cdb8d288120100cf02545dfc60649a5" translate="yes" xml:space="preserve">
          <source>Types out the given text into an active field. To slow down typing use a second parameter, to set interval between key presses. &lt;em&gt;Note:&lt;/em&gt; Should be used when &lt;a href=&quot;#fillfield&quot;&gt;&lt;code&gt;fillField&lt;/code&gt;&lt;/a&gt; is not an option.</source>
          <target state="translated">指定されたテキストをアクティブフィールドに入力します。入力を遅くするには、2番目のパラメーターを使用して、キーを押す間隔を設定します。&lt;em&gt;注：&lt;/em&gt;&lt;a href=&quot;#fillfield&quot;&gt; &lt;code&gt;fillField&lt;/code&gt; &lt;/a&gt;がオプションでない場合に使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="feab39ee2bbfe8daa1e9c0a6177a40d6d2175fce" translate="yes" xml:space="preserve">
          <source>UI of your web application has interaction areas which can be shared across different tests. To avoid code duplication you can put common locators and methods into one place.</source>
          <target state="translated">ウェブアプリケーションの UI には、異なるテスト間で共有できる相互作用領域があります。コードの重複を避けるために、共通のロケータとメソッドを一箇所にまとめることができます。</target>
        </trans-unit>
        <trans-unit id="c12db084084adfb30a4cae99ab64377dce6931a7" translate="yes" xml:space="preserve">
          <source>Ubiquitous Language</source>
          <target state="translated">ユビキタスげんご</target>
        </trans-unit>
        <trans-unit id="610d736dbddfd74b732dca313d869892f0a8018b" translate="yes" xml:space="preserve">
          <source>Unless you use retryFailedStep plugin you can manually control retries in your project.</source>
          <target state="translated">retryFailedStepプラグインを使用しない限り、プロジェクトのリトライを手動で制御することができます。</target>
        </trans-unit>
        <trans-unit id="7be772710ac18949f15dbf01260c9f2e31f327a9" translate="yes" xml:space="preserve">
          <source>Unlike Cucumber, CodeceptJS is not about writing test scenarios above for business rules. To say it again, its &lt;strong&gt;goal is to provide standard action steps you can use for testing applications&lt;/strong&gt;. Surely, it can't cover 100% of cases but it aims for 90%, for others you can write your own steps inside a &lt;a href=&quot;https://codecept.io/helpers/&quot;&gt;custom Helper&lt;/a&gt; using API of Protractor</source>
          <target state="translated">Cucumberとは異なり、CodeceptJSは上記のビジネスルールのテストシナリオを作成するためのものではありません。もう一度言いますが、その&lt;strong&gt;目標は、アプリケーションのテストに使用できる標準のアクションステップを提供することです&lt;/strong&gt;。確かに、ケースの100％をカバーすることはできませんが、90％を目指しています。他の場合は、ProtractorのAPIを使用して&lt;a href=&quot;https://codecept.io/helpers/&quot;&gt;カスタムヘルパー&lt;/a&gt;内に独自のステップを記述できます。</target>
        </trans-unit>
        <trans-unit id="5367882fdcec081aef703aff24508138d36ce73e" translate="yes" xml:space="preserve">
          <source>Unlike Cucumber, CodeceptJS is not about writing test scenarios to satisfy business rules or requirements. Instead, its &lt;strong&gt;goal is to provide standard action steps you can use for testing applications&lt;/strong&gt;. Although it can't cover 100% of use cases, CodeceptJS aims for 90%. For the remainder, you can write your own steps inside a &lt;a href=&quot;https://codecept.io/helpers/&quot;&gt;custom Helper (opens new window)&lt;/a&gt; using Protractor's API.</source>
          <target state="translated">Cucumberとは異なり、CodeceptJSは、ビジネスルールや要件を満たすためのテストシナリオを作成することを目的としたものではありません。代わりに、その&lt;strong&gt;目標は、アプリケーションのテストに使用できる標準のアクションステップを提供することです&lt;/strong&gt;。ユースケースの100％をカバーすることはできませんが、CodeceptJSは90％を目指しています。残りの部分については、ProtractorのAPIを使用して、&lt;a href=&quot;https://codecept.io/helpers/&quot;&gt;カスタムヘルパー&lt;/a&gt;内に独自のステップを記述できます（新しいウィンドウが開きます）。</target>
        </trans-unit>
        <trans-unit id="06548ac639c4dcb3bc4182a43e8cf2f7bda54e70" translate="yes" xml:space="preserve">
          <source>Unlike other plugins, &lt;code&gt;pauseOnFail&lt;/code&gt; is not recommended to be enabled by default. Enable it manually on each run via &lt;code&gt;-p&lt;/code&gt; option:</source>
          <target state="translated">他のプラグインとは異なり、 &lt;code&gt;pauseOnFail&lt;/code&gt; をデフォルトで有効にすることはお勧めしません。 &lt;code&gt;-p&lt;/code&gt; オプションを使用して、実行ごとに手動で有効にします。</target>
        </trans-unit>
        <trans-unit id="c50256659f36ba420b19da18c6bf87183176b9ec" translate="yes" xml:space="preserve">
          <source>Unselects a checkbox or radio button. Element is located by label or name or CSS or XPath.</source>
          <target state="translated">チェックボックスやラジオボタンの選択を解除します。要素はラベルや名前、CSSやXPathで指定します。</target>
        </trans-unit>
        <trans-unit id="60ca454412dbb64d426443cd30ff4f5b707b1e50" translate="yes" xml:space="preserve">
          <source>Update JSX files to change output HTML and rebuild the application</source>
          <target state="translated">JSXファイルを更新して出力HTMLを変更し、アプリケーションを再構築する</target>
        </trans-unit>
        <trans-unit id="798d98908e8309782bb608befc076d882caae2c1" translate="yes" xml:space="preserve">
          <source>Update the current setting on the device</source>
          <target state="translated">デバイスの現在の設定を更新する</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">Usage</target>
        </trans-unit>
        <trans-unit id="fec43ce445f974147bd0eb223a50147e7fb7202d" translate="yes" xml:space="preserve">
          <source>Usage example:</source>
          <target state="translated">使用例。</target>
        </trans-unit>
        <trans-unit id="197e20a8b7ad63f5b858b0e3ddfbee4cee5d5039" translate="yes" xml:space="preserve">
          <source>Usage: &lt;code&gt;within('section', ()=&amp;gt;{})&lt;/code&gt;</source>
          <target state="translated">使用法： &lt;code&gt;within('section', ()=&amp;gt;{})&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0a144ffc68a913ed601bc94e5b7df77f2d41c764" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;https://aerokube.com/cm/latest/&quot;&gt;Selenoid Configuration Manager (opens new window)&lt;/a&gt; to create and start containers semi-automatically.</source>
          <target state="translated">使用&lt;a href=&quot;https://aerokube.com/cm/latest/&quot;&gt;Selenoid設定マネージャ（新しいウィンドウが開きます）&lt;/a&gt;半自動的にコンテナを作成して開始します。</target>
        </trans-unit>
        <trans-unit id="5548c6a64434ddd92f563f32c49ebc2a60279431" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;https://codecept.io/pageobjects&quot;&gt;custom steps and page objects&lt;/a&gt; to hide steps which are not relevant to current test.</source>
          <target state="translated">&lt;a href=&quot;https://codecept.io/pageobjects&quot;&gt;カスタムステップとページオブジェクト&lt;/a&gt;を使用して、現在のテストに関係のないステップを非表示にします。</target>
        </trans-unit>
        <trans-unit id="fea9e3db620e8acc5b0fa5c36676d65ca963999c" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;https://codecept.io/plugins/selenoid&quot;&gt;Selenoid&lt;/a&gt; to run browsers inside Docker containers.</source>
          <target state="translated">&lt;a href=&quot;https://codecept.io/plugins/selenoid&quot;&gt;Selenoid&lt;/a&gt;を使用して、Dockerコンテナー内でブラウザーを実行します。</target>
        </trans-unit>
        <trans-unit id="84c1b849dc056715d3089986267181bc9efa3a46" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/test-api/&quot;&gt;TestCafe (opens new window)&lt;/a&gt; API inside a test.</source>
          <target state="translated">使用&lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/test-api/&quot;&gt;TestCafe（新しいウィンドウが開きます）&lt;/a&gt;テスト内のAPIを。</target>
        </trans-unit>
        <trans-unit id="400416366783df7362763e99e3c578a6efbbfab8" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;https://github.com/PeterNgTr/codeceptjs-applitoolshelper&quot;&gt;CodeceptJS Applitools Helper (opens new window)&lt;/a&gt; with Applitools wdio service.</source>
          <target state="translated">使用&lt;a href=&quot;https://github.com/PeterNgTr/codeceptjs-applitoolshelper&quot;&gt;CodeceptJS Applitoolsヘルパー（新しいウィンドウが開きます）&lt;/a&gt; Applitools wdioサービスを提供しています。</target>
        </trans-unit>
        <trans-unit id="2861ce2adb37ed8fdc6bfa6ed4db6ba3be724a84" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;https://github.com/codeceptjs/create-codeceptjs&quot;&gt;CodeceptJS all-in-one installer (opens new window)&lt;/a&gt; to get CodeceptJS, a demo project, and Playwright.</source>
          <target state="translated">使用&lt;a href=&quot;https://github.com/codeceptjs/create-codeceptjs&quot;&gt;CodeceptJSオールインワンのインストーラ（新しいウィンドウが開きます）&lt;/a&gt; CodeceptJS、デモプロジェクト、および劇作家を取得します。</target>
        </trans-unit>
        <trans-unit id="3c38484c914b68ac2f0b86296e32d624e02c5e94" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;https://webdriver.io/docs/api&quot;&gt;webdriverio (opens new window)&lt;/a&gt; API inside a test.</source>
          <target state="translated">使用&lt;a href=&quot;https://webdriver.io/docs/api&quot;&gt;webdriverioは（新しいウィンドウが開きます）&lt;/a&gt;テスト内部APIを。</target>
        </trans-unit>
        <trans-unit id="2d5d355abdb30d3aa8c246e9ede0ff131b37ec11" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;https://www.npmjs.com/package/selenium-standalone&quot;&gt;selenium-standalone&lt;/a&gt; from NPM to install and run them:</source>
          <target state="translated">NPMから&lt;a href=&quot;https://www.npmjs.com/package/selenium-standalone&quot;&gt;selenium-standalone&lt;/a&gt;を使用して、それらをインストールおよび実行します。</target>
        </trans-unit>
        <trans-unit id="d2e5d89892951905fced7493fd70fed136dfe27f" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;https://www.protractortest.org/#/api&quot;&gt;Protractor (opens new window)&lt;/a&gt; API inside a test.</source>
          <target state="translated">使用&lt;a href=&quot;https://www.protractortest.org/#/api&quot;&gt;分度器（新しいウィンドウが開きます）&lt;/a&gt;テスト内のAPIを。</target>
        </trans-unit>
        <trans-unit id="f97ce176dc7414bc7c6e3034d77ccfa82ea260e0" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;--headless&lt;/code&gt; option to run browser headlessly</source>
          <target state="translated">&lt;code&gt;--headless&lt;/code&gt; オプションを使用して、ブラウザをヘッドレスで実行します</target>
        </trans-unit>
        <trans-unit id="905101835b992811c67efd67b69d9f663729d5cd" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;--serve&lt;/code&gt; option to start a dev server before tests</source>
          <target state="translated">テストの前に &lt;code&gt;--serve&lt;/code&gt; サーバーを起動するには、-serveオプションを使用します</target>
        </trans-unit>
        <trans-unit id="0a72b3644ef5ec389e490ab2504384053ff370b9" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;--serve&lt;/code&gt; option to start dev server before running</source>
          <target state="translated">&lt;code&gt;--serve&lt;/code&gt; オプションを使用して、実行する前に開発サーバーを起動します</target>
        </trans-unit>
        <trans-unit id="35722d44d38080cb506d6164fc18a5c79c479d6b" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;I.mockServer()&lt;/code&gt; to customize which requests should be recorded and under which name:</source>
          <target state="translated">&lt;code&gt;I.mockServer()&lt;/code&gt; を使用して、記録する要求とその名前をカスタマイズします。</target>
        </trans-unit>
        <trans-unit id="030bbcf1455d5dac666ebe366621396007aeea73" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;grep&lt;/code&gt; to find steps in a list (grep works on Linux &amp;amp; MacOS):</source>
          <target state="translated">&lt;code&gt;grep&lt;/code&gt; を使用して、リスト内のステップを検索します（grepはLinuxおよびMacOSで機能します）。</target>
        </trans-unit>
        <trans-unit id="678ab0c857f06e04bdf49600a641cba3aa7bc23e" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;login&lt;/code&gt; object inside your tests to log in:</source>
          <target state="translated">テスト内で &lt;code&gt;login&lt;/code&gt; オブジェクトを使用してログインします。</target>
        </trans-unit>
        <trans-unit id="a17f1c06d0a981dbe36a183966b72ecb02d25ddf" translate="yes" xml:space="preserve">
          <source>Use Case</source>
          <target state="translated">使用事例</target>
        </trans-unit>
        <trans-unit id="1fc68d5db1d83a654ede6624f440dad5cebcaec0" translate="yes" xml:space="preserve">
          <source>Use Case (ApiDataFactory)</source>
          <target state="translated">ユースケース(ApiDataFactory</target>
        </trans-unit>
        <trans-unit id="16d1de8b221d1537f4b885a3026e5c0d0b7e7282" translate="yes" xml:space="preserve">
          <source>Use Cases:</source>
          <target state="translated">ケースを使用します。</target>
        </trans-unit>
        <trans-unit id="3f23fd9e3e349f0b13e5b1addfaf1fe5d8639ebd" translate="yes" xml:space="preserve">
          <source>Use Helpers to introduce low-level API to your tests without polluting test scenarios. Helpers can also be used to share functionality accross different project and installed as npm packages.</source>
          <target state="translated">テストシナリオを汚染することなく、低レベルの API をテストに導入するためにヘルパーを使用します。ヘルパーは、異なるプロジェクト間で機能を共有したり、npm パッケージとしてインストールしたりするためにも使用できます。</target>
        </trans-unit>
        <trans-unit id="562561975f2185e51c84bfa5422f10c20f06c673" translate="yes" xml:space="preserve">
          <source>Use NPM install CodeceptJS:</source>
          <target state="translated">NPMを使ってCodeceptJSをインストールします。</target>
        </trans-unit>
        <trans-unit id="16a56bdee0b08316423be03206f398f22544f615" translate="yes" xml:space="preserve">
          <source>Use Playwright API inside a test.</source>
          <target state="translated">テスト内でPlaywright APIを使用します。</target>
        </trans-unit>
        <trans-unit id="721a6ef824a85a44c094324a7f321f9a0a2ed55f" translate="yes" xml:space="preserve">
          <source>Use PollyJS &lt;a href=&quot;https://netflix.github.io/pollyjs/#/server/overview&quot;&gt;Server Routes API (opens new window)&lt;/a&gt; to declare mocks via callback function:</source>
          <target state="translated">PollyJS &lt;a href=&quot;https://netflix.github.io/pollyjs/#/server/overview&quot;&gt;Server Routes API（新しいウィンドウを開きます）&lt;/a&gt;を使用して、コールバック関数を介してモックを宣言します。</target>
        </trans-unit>
        <trans-unit id="2c348cce53cb2520dae474efa1f9c8acf66e2339" translate="yes" xml:space="preserve">
          <source>Use Puppeteer API inside a test.</source>
          <target state="translated">テストの中で Puppeteer API を使う。</target>
        </trans-unit>
        <trans-unit id="fb8be758f6ea128c92caf620cc22496a0fa6e348" translate="yes" xml:space="preserve">
          <source>Use an argument to set number of workers</source>
          <target state="translated">引数を使用して作業員の数を設定する</target>
        </trans-unit>
        <trans-unit id="1e462b6b82816d0aef0a14dff9cf5f43d01d8ab8" translate="yes" xml:space="preserve">
          <source>Use any of &lt;a href=&quot;https://github.com/mochajs/mocha/tree/master/lib/reporters&quot;&gt;Mocha reporters (opens new window)&lt;/a&gt; used.</source>
          <target state="translated">使用した&lt;a href=&quot;https://github.com/mochajs/mocha/tree/master/lib/reporters&quot;&gt;Mochaレポーター（新しいウィンドウを開きます）の&lt;/a&gt;いずれかを使用します。</target>
        </trans-unit>
        <trans-unit id="0b29cdda2bd8382e5dcdb414cf35bbe4410e5d7f" translate="yes" xml:space="preserve">
          <source>Use any of &lt;a href=&quot;https://github.com/mochajs/mocha/tree/master/lib/reporters&quot;&gt;Mocha reporters&lt;/a&gt; used.</source>
          <target state="translated">使用されている&lt;a href=&quot;https://github.com/mochajs/mocha/tree/master/lib/reporters&quot;&gt;モカ記者の&lt;/a&gt;いずれかを使用してください。</target>
        </trans-unit>
        <trans-unit id="c0dcd7a3f49a9466cd65f2f6dc35c0eb10709129" translate="yes" xml:space="preserve">
          <source>Use default xunit reporter of Mocha to print xml reports. Provide &lt;code&gt;--reporter xunit&lt;/code&gt; to get the report to screen. It is recommended to use more powerful &lt;a href=&quot;https://www.npmjs.com/package/mocha-junit-reporter&quot;&gt;&lt;code&gt;mocha-junit-reporter&lt;/code&gt; (opens new window)&lt;/a&gt; package to get better support for Jenkins CI.</source>
          <target state="translated">Mochaのデフォルトのxunitレポーターを使用してxmlレポートを印刷します。提供 &lt;code&gt;--reporter xunit&lt;/code&gt; 画面にレポートを取得します。Jenkins CIのサポートを強化するには、より強力な&lt;a href=&quot;https://www.npmjs.com/package/mocha-junit-reporter&quot;&gt; &lt;code&gt;mocha-junit-reporter&lt;/code&gt; （新しいウィンドウを開く）&lt;/a&gt;パッケージを使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="667e9dd2e7742e4c98b138c122dd4fb6e85bba0e" translate="yes" xml:space="preserve">
          <source>Use default xunit reporter of Mocha to print xml reports. Provide &lt;code&gt;--reporter xunit&lt;/code&gt; to get the report to screen. It is recommended to use more powerful &lt;a href=&quot;https://www.npmjs.com/package/mocha-junit-reporter&quot;&gt;&lt;code&gt;mocha-junit-reporter&lt;/code&gt;&lt;/a&gt; package to get better support for Jenkins CI.</source>
          <target state="translated">Mochaのデフォルトのxunitレポーターを使用してxmlレポートを印刷します。提供 &lt;code&gt;--reporter xunit&lt;/code&gt; 画面にレポートを取得します。Jenkins CIのサポートを強化するには、より強力な&lt;a href=&quot;https://www.npmjs.com/package/mocha-junit-reporter&quot;&gt; &lt;code&gt;mocha-junit-reporter&lt;/code&gt; &lt;/a&gt;パッケージを使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="b172a4acc84bbfac0848dee998569e85a5955480" translate="yes" xml:space="preserve">
          <source>Use headless Chrome or Firefox.</source>
          <target state="translated">ヘッドレスのChromeやFirefoxを使いましょう。</target>
        </trans-unit>
        <trans-unit id="375b191fc02afbfe0b45163abfc39b341b77a4de" translate="yes" xml:space="preserve">
          <source>Use it with a test body as a test plan:</source>
          <target state="translated">試験体と一緒に試験計画として使用してください。</target>
        </trans-unit>
        <trans-unit id="8eb0718edc0dd7c05fffaa09f7e68fe0c69d4c8f" translate="yes" xml:space="preserve">
          <source>Use official &lt;a href=&quot;https://github.com/reportportal/agent-js-codecept/&quot;&gt;CodeceptJS Agent for ReportPortal (opens new window)&lt;/a&gt; to start publishing your test results.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/reportportal/agent-js-codecept/&quot;&gt;ReportPortal&lt;/a&gt;用の公式CodeceptJSエージェント（新しいウィンドウが開きます）を使用して、テスト結果の公開を開始します。</target>
        </trans-unit>
        <trans-unit id="a958de95791ba31e4e4718822b08bce6296796fc" translate="yes" xml:space="preserve">
          <source>Use paid &lt;a href=&quot;https://codecept.io/helpers/WebDriver#cloud-providers&quot;&gt;cloud services (SauceLabs, BrowserStack, TestingBot)&lt;/a&gt;.</source>
          <target state="translated">有料の&lt;a href=&quot;https://codecept.io/helpers/WebDriver#cloud-providers&quot;&gt;クラウドサービス（SauceLabs、BrowserStack、TestingBot）を使用し&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="734d6841348ccfa93ade9374e67d029d187bb0da" translate="yes" xml:space="preserve">
          <source>Use regex for more flexible filtering:</source>
          <target state="translated">より柔軟なフィルタリングには正規表現を使用します。</target>
        </trans-unit>
        <trans-unit id="64c0c723e1296b67b254b8625fe0cf1b2a5a4766" translate="yes" xml:space="preserve">
          <source>Use scenario configuration to disable plugin for a test</source>
          <target state="translated">シナリオ設定を使用して、テストのためにプラグインを無効にする</target>
        </trans-unit>
        <trans-unit id="71e49c6ed5be75c2cf6a8e4d7191c486c8e0f736" translate="yes" xml:space="preserve">
          <source>Use the second parameter to pass in a color value (ASCII).</source>
          <target state="translated">2 番目のパラメータを使用して、色の値(ASCII)を渡します。</target>
        </trans-unit>
        <trans-unit id="e9608e559d4dab156f51d38dd29dbb366196e145" translate="yes" xml:space="preserve">
          <source>Use this plugin if:</source>
          <target state="translated">このプラグインを使用してください。</target>
        </trans-unit>
        <trans-unit id="9866f4440ed90bbdad39a40649c89d9a2bc1ade7" translate="yes" xml:space="preserve">
          <source>Useful for debugging flaky tests on local environment. Add this plugin to config file:</source>
          <target state="translated">ローカル環境での不正なテストをデバッグするのに便利です。このプラグインを設定ファイルに追加してください。</target>
        </trans-unit>
        <trans-unit id="d85f6749853cc492155a6589e23bd6c05ef03046" translate="yes" xml:space="preserve">
          <source>Uses &lt;a href=&quot;https://github.com/DevExpress/testcafe&quot;&gt;TestCafe (opens new window)&lt;/a&gt; library to run cross-browser tests. The browser version you want to use in tests must be installed on your system.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/DevExpress/testcafe&quot;&gt;TestCafe（新しいウィンドウを開く）&lt;/a&gt;ライブラリを使用して、クロスブラウザテストを実行します。テストで使用するブラウザのバージョンは、システムにインストールされている必要があります。</target>
        </trans-unit>
        <trans-unit id="81361e0348aa17adf0d17b60996e9495ee1b3899" translate="yes" xml:space="preserve">
          <source>Uses &lt;a href=&quot;https://github.com/GoogleChrome/puppeteer&quot;&gt;Google Chrome's Puppeteer (opens new window)&lt;/a&gt; library to run tests inside headless Chrome. Browser control is executed via DevTools Protocol (instead of Selenium). This helper works with a browser out of the box with no additional tools required to install.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/GoogleChrome/puppeteer&quot;&gt;Google ChromeのPuppeteer（新しいウィンドウを開く）&lt;/a&gt;ライブラリを使用して、ヘッドレスChrome内でテストを実行します。ブラウザ制御は、（Seleniumではなく）DevToolsプロトコルを介して実行されます。このヘルパーは、インストールに追加のツールを必要とせずに、すぐに使用できるブラウザーで動作します。</target>
        </trans-unit>
        <trans-unit id="debf4326b5f4c0583cc560d108d818c52cc7cdd8" translate="yes" xml:space="preserve">
          <source>Uses &lt;a href=&quot;https://github.com/GoogleChrome/puppeteer&quot;&gt;Google Chrome's Puppeteer&lt;/a&gt; library to run tests inside headless Chrome. Browser control is executed via DevTools without Selenium. This helper works with a browser out of the box with no additional tools required to install.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/GoogleChrome/puppeteer&quot;&gt;Google ChromeのPuppeteer&lt;/a&gt;ライブラリを使用して、ヘッドレスChrome内でテストを実行します。ブラウザ制御は、SeleniumなしでDevToolsを介して実行されます。このヘルパーは、そのままの状態でブラウザーで動作し、インストールに追加のツールは必要ありません。</target>
        </trans-unit>
        <trans-unit id="171167ce8b600d44247067e8023dae6893605787" translate="yes" xml:space="preserve">
          <source>Uses &lt;a href=&quot;https://github.com/microsoft/playwright&quot;&gt;Playwright (opens new window)&lt;/a&gt; library to run tests inside:</source>
          <target state="translated">&lt;a href=&quot;https://github.com/microsoft/playwright&quot;&gt;Playwright（新しいウィンドウを開く）&lt;/a&gt;ライブラリを使用して、内部でテストを実行します。</target>
        </trans-unit>
        <trans-unit id="6a2f279291086c54b83873c8b1f6c6cf9e9a5b9c" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;data-qa&lt;/code&gt; attribute with &lt;code&gt;=&lt;/code&gt; prefix:</source>
          <target state="translated">&lt;code&gt;=&lt;/code&gt; プレフィックス付きの &lt;code&gt;data-qa&lt;/code&gt; 属性の使用：</target>
        </trans-unit>
        <trans-unit id="306d0509c77e9337a1ac9a675974f3a240c65ad3" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;data-test&lt;/code&gt; attribute with &lt;code&gt;$&lt;/code&gt; prefix:</source>
          <target state="translated">&lt;code&gt;$&lt;/code&gt; プレフィックス付きの &lt;code&gt;data-test&lt;/code&gt; 属性の使用：</target>
        </trans-unit>
        <trans-unit id="cf7c749ba24b8ce853cb8eb56736aa3cc4ab858b" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;process.env.profile&lt;/code&gt; you can change the config dynamically. It provides value of &lt;code&gt;--profile&lt;/code&gt; option passed to runner. Use its value to change config value on the fly.</source>
          <target state="translated">&lt;code&gt;process.env.profile&lt;/code&gt; を使用すると、構成を動的に変更できます。ランナーに渡される &lt;code&gt;--profile&lt;/code&gt; オプションの値を提供します。その値を使用して、構成値をその場で変更します。</target>
        </trans-unit>
        <trans-unit id="5426ae1d72b90a1020dc4dcfc78db6f7c5467bcb" translate="yes" xml:space="preserve">
          <source>Using Appium</source>
          <target state="translated">アピウムを使う</target>
        </trans-unit>
        <trans-unit id="b8565615bf5c293e54c949bebf38c0815e50c560" translate="yes" xml:space="preserve">
          <source>Using JavaScript-style config &lt;code&gt;codecept.conf.js&lt;/code&gt;, bootstrapAll and teardownAll functions can be placed inside of it:</source>
          <target state="translated">JavaScriptスタイルの &lt;code&gt;codecept.conf.js&lt;/code&gt; を使用して、bootstrapAll関数とteardownAll関数をその中に配置できます。</target>
        </trans-unit>
        <trans-unit id="4bdf0b240426cf3210658d342e032ba3e90e98eb" translate="yes" xml:space="preserve">
          <source>Using NightmareJS</source>
          <target state="translated">NightmareJSを使う</target>
        </trans-unit>
        <trans-unit id="e8729bc93021a2e5283ed88952093ee0c9a0a8f3" translate="yes" xml:space="preserve">
          <source>Using Protractor</source>
          <target state="translated">分度器の使用</target>
        </trans-unit>
        <trans-unit id="9f220bb418577705f7ca310f8e4d6d03df484985" translate="yes" xml:space="preserve">
          <source>Using Puppeteer</source>
          <target state="translated">人形使いを使う</target>
        </trans-unit>
        <trans-unit id="b7427957be089e97020f9d6172eca34a56acbee2" translate="yes" xml:space="preserve">
          <source>Using Selenium WebDriver</source>
          <target state="translated">Selenium WebDriverを使う</target>
        </trans-unit>
        <trans-unit id="3881485aadebf4130ff407b182b349700ede69fa" translate="yes" xml:space="preserve">
          <source>Using Typescript</source>
          <target state="translated">タイプスクリプトの使用</target>
        </trans-unit>
        <trans-unit id="1c397d53f561fe71e47ddea3d8e6cfd3a9fa0cdb" translate="yes" xml:space="preserve">
          <source>Using only local function names:</source>
          <target state="translated">ローカル関数名のみを使用する。</target>
        </trans-unit>
        <trans-unit id="b1b065440da2f5f0907a852b06c69c6ed241468d" translate="yes" xml:space="preserve">
          <source>Using smart locators makes tests easier to write, however searching an element by text is slower than searching via CSS|XPath, and is much slower than using strict locators.</source>
          <target state="translated">スマートロケータを使うとテストを書きやすくなりますが、テキストで要素を検索するのはCSS|XPathで検索するよりも遅く、厳密なロケータを使うよりもずっと遅くなります。</target>
        </trans-unit>
        <trans-unit id="1ffb767648dd766b73975a1aa95cbe25840e2b49" translate="yes" xml:space="preserve">
          <source>Using such smart locators makes tests easy to write, however, searching an element by text is slower than using CSS|XPath and much slower than using strict locators.</source>
          <target state="translated">このようなスマートロケータを使うとテストを書くのが簡単になりますが、テキストで要素を検索するのはCSS|XPathを使うよりも遅く、厳密なロケータを使うよりもはるかに遅くなります。</target>
        </trans-unit>
        <trans-unit id="fd42e5ebde925b0eee2f3f78337ee1dbc0b1f2fb" translate="yes" xml:space="preserve">
          <source>Using values from &lt;code&gt;process.profile&lt;/code&gt; you can change the config dynamically. It provides value of &lt;code&gt;--profile&lt;/code&gt; option passed to runner. Use its value to change config value on the fly.</source>
          <target state="translated">&lt;code&gt;process.profile&lt;/code&gt; の値を使用して、構成を動的に変更できます。ランナーに渡される &lt;code&gt;--profile&lt;/code&gt; オプションの値を提供します。その値を使用して、構成値をその場で変更します。</target>
        </trans-unit>
        <trans-unit id="e4da43b6bd5d2a24bc16854301009cdd75abf193" translate="yes" xml:space="preserve">
          <source>Using your own translation file</source>
          <target state="translated">独自の翻訳ファイルを使用する</target>
        </trans-unit>
        <trans-unit id="eaf78ec5fd1732a4c1be20a1e49a531d5d0079ad" translate="yes" xml:space="preserve">
          <source>Various strategies are used to locate semantic elements. However, they may run slower than specifying locator by XPath or CSS.</source>
          <target state="translated">セマンティック要素の位置を特定するためには様々な戦略が使われています。しかし、XPathやCSSでロケータを指定するよりも動作が遅くなることがあります。</target>
        </trans-unit>
        <trans-unit id="4f3a0f20189d5f7f058f1ae3efb63251ccb86768" translate="yes" xml:space="preserve">
          <source>Verifies that the specified checkbox is checked.</source>
          <target state="translated">指定したチェックボックスにチェックが入っていることを確認します。</target>
        </trans-unit>
        <trans-unit id="d28acaef6df9d232e03779172e169d3ce681f151" translate="yes" xml:space="preserve">
          <source>Verifies that the specified checkbox is not checked.</source>
          <target state="translated">指定したチェックボックスがチェックされていないことを確認します。</target>
        </trans-unit>
        <trans-unit id="1d5d3f6b11870d5f6ea7e047e5494b8f480e46d7" translate="yes" xml:space="preserve">
          <source>Via Installer</source>
          <target state="translated">インストーラ経由</target>
        </trans-unit>
        <trans-unit id="bc17c1f0179a888f2a7e8389f67d4f2cf5cf4531" translate="yes" xml:space="preserve">
          <source>Video</source>
          <target state="translated">Video</target>
        </trans-unit>
        <trans-unit id="08acdeca1d30afde8ac48875981902ed8ee8a8f6" translate="yes" xml:space="preserve">
          <source>Video Recording</source>
          <target state="translated">ビデオ録画</target>
        </trans-unit>
        <trans-unit id="d2fbbbc5cd867da155e1adbf78a49c6321bd1dc1" translate="yes" xml:space="preserve">
          <source>Visual testing via Applitools service</source>
          <target state="translated">Applitoolsサービスを利用したビジュアルテスト</target>
        </trans-unit>
        <trans-unit id="96056c7a1d346e7e260177cdf4d9140ebc70f5b8" translate="yes" xml:space="preserve">
          <source>Visual-Testing</source>
          <target state="translated">Visual-Testing</target>
        </trans-unit>
        <trans-unit id="5b21f620bae7763fd6b15df52c8ee9f6d1593996" translate="yes" xml:space="preserve">
          <source>Vue CLI installed globally</source>
          <target state="translated">グローバルにインストールされたVue CLI</target>
        </trans-unit>
        <trans-unit id="33d30632848d3fd0ed2340adbd7be3e3e8e61010" translate="yes" xml:space="preserve">
          <source>Waiting</source>
          <target state="translated">Waiting</target>
        </trans-unit>
        <trans-unit id="58ae18181d2126cd7553470ada8b4bf406541218" translate="yes" xml:space="preserve">
          <source>Waiting for the part of the URL to match the expected. Useful for SPA to understand that page was changed.</source>
          <target state="translated">URLの期待値と一致する部分を待つ。SPAでページが変更されたことを把握するのに便利です。</target>
        </trans-unit>
        <trans-unit id="cece8eefb821ec20fc2c9a231b419301a7176225" translate="yes" xml:space="preserve">
          <source>Waits an elment to become not visible.</source>
          <target state="translated">エルメントが見えなくなるのを待つ。</target>
        </trans-unit>
        <trans-unit id="608e1f4b9f8e6f52ecc7537fbac3be3db77e45a0" translate="yes" xml:space="preserve">
          <source>Waits for a function to return true (waits for 1 sec by default). Running in browser context.</source>
          <target state="translated">関数が真を返すのを待ちます(デフォルトでは1秒待ち)。ブラウザのコンテキストで実行しています。</target>
        </trans-unit>
        <trans-unit id="0a3b5a414ff6c8607f5ffc754212c33a38cda7c9" translate="yes" xml:space="preserve">
          <source>Waits for a function to return true (waits for 1sec by default).</source>
          <target state="translated">関数が真を返すのを待ちます(デフォルトでは1秒待ち)。</target>
        </trans-unit>
        <trans-unit id="170fb4fd4de45ba0a4eae28371ae989f92c3a62b" translate="yes" xml:space="preserve">
          <source>Waits for a network request.</source>
          <target state="translated">ネットワーク要求を待ちます。</target>
        </trans-unit>
        <trans-unit id="e711fbeb9c8bed8c469b161cd5aecf448bda117f" translate="yes" xml:space="preserve">
          <source>Waits for a network response.</source>
          <target state="translated">ネットワークの応答を待ちます。</target>
        </trans-unit>
        <trans-unit id="88d939da0749726d6dd5610198b17515578ed573" translate="yes" xml:space="preserve">
          <source>Waits for a specified number of elements on the page</source>
          <target state="translated">ページ上の指定された数の要素を待つ</target>
        </trans-unit>
        <trans-unit id="76ac397c502428d54bdf284fb5cbaf7fecdd5f5d" translate="yes" xml:space="preserve">
          <source>Waits for a specified number of elements on the page.</source>
          <target state="translated">ページ上の指定された数の要素を待ちます。</target>
        </trans-unit>
        <trans-unit id="7d7886533a339fb98f4c972bbb7b4711940d572b" translate="yes" xml:space="preserve">
          <source>Waits for a text to appear (by default waits for 1sec). Element can be located by CSS or XPath. Narrow down search results by providing context.</source>
          <target state="translated">テキストが表示されるのを待ちます(デフォルトでは1秒待ち)。要素の位置はCSSやXPathで指定することができます。コンテキストを提供して検索結果を絞り込む。</target>
        </trans-unit>
        <trans-unit id="ce42798cea3869925c679a0eed38f05a1a59f4b8" translate="yes" xml:space="preserve">
          <source>Waits for all requests handled by MockRequests to be resolved:</source>
          <target state="translated">MockRequests によって処理されたすべてのリクエストが解決されるのを待ちます。</target>
        </trans-unit>
        <trans-unit id="bca765278deb626079936cac24bc7fc12f0edc18" translate="yes" xml:space="preserve">
          <source>Waits for an element to be removed or become invisible on a page (by default waits for 1sec). Element can be located by CSS or XPath.</source>
          <target state="translated">ページ上で要素が削除されるか、見えなくなるのを待ちます(デフォルトでは1秒待ち)。要素の位置はCSSやXPathで指定することができます。</target>
        </trans-unit>
        <trans-unit id="42fec2670566452d3bba0d4944e4b05fa6cd342e" translate="yes" xml:space="preserve">
          <source>Waits for an element to be visible on page.</source>
          <target state="translated">ページ上で要素が表示されるのを待ちます。</target>
        </trans-unit>
        <trans-unit id="bae53ae1e27ddd824a8aa1efc1a99e2e4a99e06d" translate="yes" xml:space="preserve">
          <source>Waits for an element to become not attached to the DOM on a page (by default waits for 1sec). Element can be located by CSS or XPath.</source>
          <target state="translated">ページ上で要素が DOM にアタッチされていない状態になるのを待ちます(デフォルトでは 1 秒間待ちます)。要素の位置は CSS または XPath で指定します。</target>
        </trans-unit>
        <trans-unit id="0e6ea7602fd415ce658d347cf894e16b3102dc65" translate="yes" xml:space="preserve">
          <source>Waits for an element to become visible on a page (by default waits for 1sec). Element can be located by CSS or XPath.</source>
          <target state="translated">ページ上で要素が表示されるのを待ちます(デフォルトでは1秒待ち)。要素の位置はCSSかXPathで指定します。</target>
        </trans-unit>
        <trans-unit id="703e2012bc29f1186ab64d7a5bbf54fbc594e8c0" translate="yes" xml:space="preserve">
          <source>Waits for an element to exist on page.</source>
          <target state="translated">ページ上に要素が存在するのを待ちます。</target>
        </trans-unit>
        <trans-unit id="68155e36ab766f983ab66cc0031d82eb18a26999" translate="yes" xml:space="preserve">
          <source>Waits for an element to hide (by default waits for 1sec). Element can be located by CSS or XPath.</source>
          <target state="translated">要素が非表示になるのを待ちます(デフォルトでは1秒待ち)。要素の位置はCSSかXPathで指定します。</target>
        </trans-unit>
        <trans-unit id="bf22b0274c81f9ea2ada021d1f5643ac59d9c7e7" translate="yes" xml:space="preserve">
          <source>Waits for element to be clickable (by default waits for 1sec). Element can be located by CSS or XPath.</source>
          <target state="translated">要素がクリック可能になるまで待ちます(デフォルトでは1秒待ち)。要素の位置はCSSかXPathで指定します。</target>
        </trans-unit>
        <trans-unit id="efbc5db7617ebfd7103fc671f9ad28d2c4c48eb6" translate="yes" xml:space="preserve">
          <source>Waits for element to be present on page (by default waits for 1sec). Element can be located by CSS or XPath.</source>
          <target state="translated">ページ上に要素が存在するのを待ちます(デフォルトでは1秒待ち)。要素の位置はCSSやXPathで指定することができます。</target>
        </trans-unit>
        <trans-unit id="34e3522d3eb8f55a7133d392e9bc6650013bf090" translate="yes" xml:space="preserve">
          <source>Waits for element to become clickable for number of seconds.</source>
          <target state="translated">要素がクリック可能になるのを秒数分待ちます。</target>
        </trans-unit>
        <trans-unit id="481ae48126d4516ac355e4a90dd6a379bb4931fe" translate="yes" xml:space="preserve">
          <source>Waits for element to become enabled (by default waits for 1sec). Element can be located by CSS or XPath.</source>
          <target state="translated">要素が有効になるのを待ちます(デフォルトでは1秒待ち)。要素の位置はCSSかXPathで指定します。</target>
        </trans-unit>
        <trans-unit id="0d766ca51d62149ddfdcd4f55de0e1a6413e20e6" translate="yes" xml:space="preserve">
          <source>Waits for file to be present in current directory.</source>
          <target state="translated">カレントディレクトリにファイルが存在するのを待ちます。</target>
        </trans-unit>
        <trans-unit id="c98f6aae5b5db4bba58dcf95a15becb6074bd7ec" translate="yes" xml:space="preserve">
          <source>Waits for navigation to finish. By default takes configured &lt;code&gt;waitForNavigation&lt;/code&gt; option.</source>
          <target state="translated">ナビゲーションが完了するのを待ちます。デフォルトでは、設定された &lt;code&gt;waitForNavigation&lt;/code&gt; オプションを使用します。</target>
        </trans-unit>
        <trans-unit id="cac6f99485993f2c4d85c7c467eb40412df20274" translate="yes" xml:space="preserve">
          <source>Waits for number of seconds</source>
          <target state="translated">秒数待ち</target>
        </trans-unit>
        <trans-unit id="9686023327ac9a62a61ea46e707ec0ef95657aeb" translate="yes" xml:space="preserve">
          <source>Waits for the entire URL to match the expected</source>
          <target state="translated">URL 全体が期待される</target>
        </trans-unit>
        <trans-unit id="af30d4b8b1074451ed71627bb286108e8222dbdb" translate="yes" xml:space="preserve">
          <source>Waits for the specified value to be in value attribute</source>
          <target state="translated">指定した値がvalue属性になるのを待ちます。</target>
        </trans-unit>
        <trans-unit id="af3faac131672e9d8ecd082df46026d4ec8c5838" translate="yes" xml:space="preserve">
          <source>Waits for the specified value to be in value attribute.</source>
          <target state="translated">指定された値がvalue属性にあるかどうかを待ちます。</target>
        </trans-unit>
        <trans-unit id="f66e453412bf9431a6eba8c0b796d8ca0651ff8d" translate="yes" xml:space="preserve">
          <source>Want to have screenshots for failed tests? Then add Mochawesome helper to your config:</source>
          <target state="translated">失敗したテストのスクリーンショットを表示したいですか?その場合は、Mochawesomeヘルパーを設定に追加してください。</target>
        </trans-unit>
        <trans-unit id="0daa6e3c73ef8e8eb0000e2c384a8baa4295817a" translate="yes" xml:space="preserve">
          <source>Want to use several reporters in the same time? Try to use &lt;a href=&quot;https://www.npmjs.com/package/mocha-multi&quot;&gt;mocha-multi (opens new window)&lt;/a&gt; reporter</source>
          <target state="translated">複数のレポーターを同時に使用したいですか？&lt;a href=&quot;https://www.npmjs.com/package/mocha-multi&quot;&gt;mocha-multi（新しいウィンドウを開く）&lt;/a&gt;レポーターを使用してみてください</target>
        </trans-unit>
        <trans-unit id="50bf7cbef12cb682b4de0c490473822b62465607" translate="yes" xml:space="preserve">
          <source>Want to use several reporters in the same time? Try to use &lt;a href=&quot;https://www.npmjs.com/package/mocha-multi&quot;&gt;mocha-multi&lt;/a&gt; reporter</source>
          <target state="translated">同時に複数のレポーターを使用したいですか？&lt;a href=&quot;https://www.npmjs.com/package/mocha-multi&quot;&gt;mocha-multi&lt;/a&gt;レポーターを使用してみてください</target>
        </trans-unit>
        <trans-unit id="7da08f76e4067e6226fb5bc406791dc64a33f320" translate="yes" xml:space="preserve">
          <source>We added npm scripts:</source>
          <target state="translated">npmスクリプトを追加しました。</target>
        </trans-unit>
        <trans-unit id="68a59a89717f026c3affdba6c21689efbc15d984" translate="yes" xml:space="preserve">
          <source>We can call a new method from within &lt;code&gt;I&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;I&lt;/code&gt; 内から新しいメソッドを呼び出すことができます：</target>
        </trans-unit>
        <trans-unit id="ef0a8409eb1de1caec49d10c582cb0298eb47036" translate="yes" xml:space="preserve">
          <source>We can try to write such simple story:</source>
          <target state="translated">そんな簡単な話を書いてみる。</target>
        </trans-unit>
        <trans-unit id="ad78b304c0922dda783305768d85d50fc93de668" translate="yes" xml:space="preserve">
          <source>We need to fill in all those fields and click &quot;Update&quot; button. CodeceptJS matches form elements by their label, name, or by CSS or XPath locators.</source>
          <target state="translated">これらのフィールドをすべて入力して「更新」ボタンをクリックする必要があります。CodeceptJSは、フォーム要素のラベルや名前、CSSやXPathのロケータでマッチします。</target>
        </trans-unit>
        <trans-unit id="8afab1846117583ca17d98987ee9b5d8728f87ab" translate="yes" xml:space="preserve">
          <source>We need to fill in all those fields and click the &quot;Update&quot; button. CodeceptJS matches form elements by their label, name, or by CSS or XPath locators.</source>
          <target state="translated">これらのフィールドをすべて入力して、「更新」ボタンをクリックする必要があります。CodeceptJSは、フォーム要素のラベルや名前、CSSやXPathのロケータでマッチします。</target>
        </trans-unit>
        <trans-unit id="e0cd1d3f413dc90df478869de70f8702b159f6ff" translate="yes" xml:space="preserve">
          <source>We recommend for long-running projects to go with the first option. The better you write your initial HTML the cleaner and less fragile will be your tests. Replace divs with correct HTML elements, add &lt;code&gt;data-&lt;/code&gt; attributes, add labels, and names to input fields to make all CodeceptJS magic like clicking link by a text to work.</source>
          <target state="translated">長時間実行されるプロジェクトには、最初のオプションを使用することをお勧めします。最初のHTMLを上手に書くほど、テストはよりクリーンで壊れにくくなります。divを正しいHTML要素に置き換え、 &lt;code&gt;data-&lt;/code&gt; 属性を追加し、ラベルと名前を入力フィールドに追加して、テキストによるリンクをクリックするようなすべてのCodeceptJSの魔法を機能させます。</target>
        </trans-unit>
        <trans-unit id="c3009075be2b82941fb6689a0d9a387b57a14e34" translate="yes" xml:space="preserve">
          <source>We recommend to install them manually or use NPM packages:</source>
          <target state="translated">手動でインストールするか、NPMのパッケージを使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="0328f89125e2e1b8ced43541f828b724fa7837e2" translate="yes" xml:space="preserve">
          <source>We recommended the following configuration in a &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/tsconfig-json&quot;&gt;tsconfig.json (opens new window)&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/tsconfig-json&quot;&gt;tsconfig.jsonで&lt;/a&gt;次の構成をお勧めします（新しいウィンドウが開きます）。</target>
        </trans-unit>
        <trans-unit id="998d2885de761a6513fbca46dd38642587cb3743" translate="yes" xml:space="preserve">
          <source>We use &lt;a href=&quot;https://webdriver.io&quot;&gt;webdriverio (opens new window)&lt;/a&gt; library to run tests over WebDriver.</source>
          <target state="translated">&lt;a href=&quot;https://webdriver.io&quot;&gt;webdriverio（新しいウィンドウを開く）&lt;/a&gt;ライブラリを使用して、WebDriverでテストを実行します。</target>
        </trans-unit>
        <trans-unit id="db0252ed9181c794546543db66f45a3b84d3e615" translate="yes" xml:space="preserve">
          <source>Web application sends various requests to local services (Rest API, GraphQL) or to 3rd party services (CDNS, Google Analytics, etc). When you run tests with Puppeteer you can control those requests by mocking them. For instance, you can speed up your tests by blocking trackers, Google Analytics, and other services you don't control.</source>
          <target state="translated">ウェブアプリケーションはローカルサービス(Rest API,GraphQL)やサードパーティサービス(CDNS,Google Analyticsなど)に様々なリクエストを送ります。Puppeteerを使ってテストを実行すると、それらのリクエストをモックすることで制御することができます。例えば、トラッカーやGoogleアナリティクス、その他コントロールできないサービスをブロックすることで、テストを高速化することができます。</target>
        </trans-unit>
        <trans-unit id="ff4a5cbedecf80277fd8c61c1016f6053edb3712" translate="yes" xml:space="preserve">
          <source>Web applications do not always respond instantly. That's why WebDriver protocol has methods to wait for changes on a page. CodeceptJS provides such commands prefixed with &lt;code&gt;wait*&lt;/code&gt; so you could explicitly define what effects we wait for.</source>
          <target state="translated">Webアプリケーションは、常に即座に応答するとは限りません。そのため、WebDriverプロトコルには、ページの変更を待機するメソッドがあります。CodeceptJSは、 &lt;code&gt;wait*&lt;/code&gt; プレフィックスが付いたこのようなコマンドを提供するため、待機する効果を明示的に定義できます。</target>
        </trans-unit>
        <trans-unit id="662577408276098f60d266c4a962ed77d91c8d4a" translate="yes" xml:space="preserve">
          <source>Web view uses &lt;code&gt;[aria-label]&lt;/code&gt; attribute as accessibility id</source>
          <target state="translated">Webビューは &lt;code&gt;[aria-label]&lt;/code&gt; 属性をアクセシビリティIDとして使用します</target>
        </trans-unit>
        <trans-unit id="bda2d68e20711107d45980e7009b8c2207fc908c" translate="yes" xml:space="preserve">
          <source>WebDriver</source>
          <target state="translated">WebDriver</target>
        </trans-unit>
        <trans-unit id="84bb6250fc96f4fc3ef3f7d60530658e3deff883" translate="yes" xml:space="preserve">
          <source>WebDriver - a standard protocol for communicating between test framework and browsers</source>
          <target state="translated">WebDriver-テストフレームワークとブラウザ間で通信するための標準プロトコル</target>
        </trans-unit>
        <trans-unit id="873fc1e15da44a29d290932257ddd9701cd4b203" translate="yes" xml:space="preserve">
          <source>WebDriver Example</source>
          <target state="translated">ウェブドライバの例</target>
        </trans-unit>
        <trans-unit id="e4f482e1efe5d3fc520eeb4060feb3ba943efb44" translate="yes" xml:space="preserve">
          <source>WebDriver based helpers like WebDriver, Protractor, Selenium WebDriver will require &lt;a href=&quot;https://codecept.io/helpers/WebDriver/#selenium-installation&quot;&gt;Selenium Server (opens new window)&lt;/a&gt; or &lt;a href=&quot;https://codecept.io/helpers/WebDriver/#phantomjs-installation&quot;&gt;PhantomJS (opens new window)&lt;/a&gt; installed. They will also require ChromeDriver or GeckoDriver to run corresponding browsers.</source>
          <target state="translated">WebDriver、Protractor、SeleniumなどのWebDriverベースのヘルパーには、&lt;a href=&quot;https://codecept.io/helpers/WebDriver/#selenium-installation&quot;&gt;Selenium Server（新しいウィンドウを開く）&lt;/a&gt;または&lt;a href=&quot;https://codecept.io/helpers/WebDriver/#phantomjs-installation&quot;&gt;PhantomJS（新しいウィンドウを開く）が&lt;/a&gt;インストールされている必要があります。また、対応するブラウザを実行するには、ChromeDriverまたはGeckoDriverが必要です。</target>
        </trans-unit>
        <trans-unit id="4c6ee7129a27d266e5ca260cc58460a8741e8bf9" translate="yes" xml:space="preserve">
          <source>WebDriver based helpers like WebDriverIO, Protractor, Selenium WebDriver will require &lt;a href=&quot;https://codecept.io/helpers/WebDriverIO/#selenium-installation&quot;&gt;Selenium Server&lt;/a&gt; or &lt;a href=&quot;https://codecept.io/helpers/WebDriverIO/#phantomjs-installation&quot;&gt;PhantomJS&lt;/a&gt; installed. They will also require ChromeDriver or GeckoDriver to run corresponding browsers.</source>
          <target state="translated">WebDriverIO、Protractor、SeleniumなどのWebDriverベースのヘルパーWebDriverには、&lt;a href=&quot;https://codecept.io/helpers/WebDriverIO/#selenium-installation&quot;&gt;Selenium Server&lt;/a&gt;または&lt;a href=&quot;https://codecept.io/helpers/WebDriverIO/#phantomjs-installation&quot;&gt;PhantomJSが&lt;/a&gt;インストールされている必要があります。対応するブラウザを実行するには、ChromeDriverまたはGeckoDriverも必要です。</target>
        </trans-unit>
        <trans-unit id="9bce219e6fa40734060fce008096d6ca2b21dda5" translate="yes" xml:space="preserve">
          <source>WebDriver can be configured to run browser tests in window, headlessly, on a remote server or in a cloud.</source>
          <target state="translated">WebDriverは、ウィンドウ、ヘッドレス、リモートサーバ、クラウドでブラウザテストを実行するように設定することができます。</target>
        </trans-unit>
        <trans-unit id="c532553b750d055fb58d2ec1fb2c3a68add8e8eb" translate="yes" xml:space="preserve">
          <source>WebDriver helper can be obtained in this function as well. Use this to get full access to webdriverio elements inside the test.</source>
          <target state="translated">WebDriverヘルパーはこの関数でも取得できます。テスト内のwebdriverio要素に完全にアクセスするために使用します。</target>
        </trans-unit>
        <trans-unit id="7dbfce6e2cd05a280046cbbf1fa51b007b0054c6" translate="yes" xml:space="preserve">
          <source>WebDriver helper supports standard &lt;a href=&quot;https://codecept.io/locators&quot;&gt;CSS/XPath and text locators&lt;/a&gt; as well as non-trivial &lt;a href=&quot;https://codecept.io/react&quot;&gt;React locators&lt;/a&gt; and &lt;a href=&quot;https://codecept.io/shadow&quot;&gt;Shadow DOM&lt;/a&gt;.</source>
          <target state="translated">WebDriverヘルパーは、標準の&lt;a href=&quot;https://codecept.io/locators&quot;&gt;CSS / XPathとテキストロケーター&lt;/a&gt;、および重要な&lt;a href=&quot;https://codecept.io/react&quot;&gt;Reactロケーター&lt;/a&gt;とShadowDOMをサポートし&lt;a href=&quot;https://codecept.io/shadow&quot;&gt;ます&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0e1d7b1d9c49fa6b55ff0b8972dc76b95bf79e7d" translate="yes" xml:space="preserve">
          <source>WebDriver helper which wraps &lt;a href=&quot;http://webdriver.io/&quot;&gt;webdriverio (opens new window)&lt;/a&gt; library to manipulate browser using Selenium WebDriver or PhantomJS.</source>
          <target state="translated">Selenium WebDriverまたはPhantomJSを使用してブラウザーを操作するために&lt;a href=&quot;http://webdriver.io/&quot;&gt;webdriverio（新しいウィンドウを開く）&lt;/a&gt;ライブラリーをラップするWebDriverヘルパー。</target>
        </trans-unit>
        <trans-unit id="5f11d83469697adf05d6c6f75259a5df2f6abb19" translate="yes" xml:space="preserve">
          <source>WebDriver makes it possible to execute tests against services like &lt;code&gt;Sauce Labs&lt;/code&gt;&lt;code&gt;BrowserStack&lt;/code&gt;&lt;code&gt;TestingBot&lt;/code&gt; Check out their documentation on &lt;a href=&quot;http://webdriver.io/guide/usage/cloudservices&quot;&gt;available parameters (opens new window)&lt;/a&gt;</source>
          <target state="translated">WebDriverを使用すると、 &lt;code&gt;Sauce Labs&lt;/code&gt; &lt;code&gt;BrowserStack&lt;/code&gt; &lt;code&gt;TestingBot&lt;/code&gt; などのサービスに対してテストを実行&lt;a href=&quot;http://webdriver.io/guide/usage/cloudservices&quot;&gt;できます。使用可能なパラメーター&lt;/a&gt;に関するドキュメントを確認してください（新しいウィンドウが開きます）</target>
        </trans-unit>
        <trans-unit id="ef900993ce4f1a80101229e63282c0f9a1067b26" translate="yes" xml:space="preserve">
          <source>WebDriver protocol works over HTTP, so you need to have a Selenium Server to be running or any other service that will launch a browser for you. That's why you may need to specify &lt;code&gt;host&lt;/code&gt;, &lt;code&gt;port&lt;/code&gt;, &lt;code&gt;protocol&lt;/code&gt;, and &lt;code&gt;path&lt;/code&gt; parameters.</source>
          <target state="translated">WebDriverプロトコルはHTTPを介して機能するため、Seleniumサーバーを実行するか、ブラウザーを起動するその他のサービスを実行する必要があります。そのため、 &lt;code&gt;host&lt;/code&gt; 、 &lt;code&gt;port&lt;/code&gt; 、 &lt;code&gt;protocol&lt;/code&gt; 、および &lt;code&gt;path&lt;/code&gt; パラメーターを指定する必要がある場合があります。</target>
        </trans-unit>
        <trans-unit id="555415b48c4e53750332179dec63e75a689c4a6b" translate="yes" xml:space="preserve">
          <source>WebDriver requires Selenium Server and ChromeDriver/GeckoDriver to be installed. Those tools can be easily installed via NPM. Please check &lt;a href=&quot;https://codecept.io/webdriver/#testing-with-webdriver&quot;&gt;Testing with WebDriver (opens new window)&lt;/a&gt; for more details.</source>
          <target state="translated">WebDriverには、SeleniumサーバーとChromeDriver / GeckoDriverがインストールされている必要があります。これらのツールは、NPMを介して簡単にインストールできます。詳細については&lt;a href=&quot;https://codecept.io/webdriver/#testing-with-webdriver&quot;&gt;、WebDriverを&lt;/a&gt;使用したテスト（新しいウィンドウが開きます）を確認してください。</target>
        </trans-unit>
        <trans-unit id="dab64bdf7fdf61aafebe239824ecd125f10072c9" translate="yes" xml:space="preserve">
          <source>WebDriver, Puppeteer, Playwright, and Protractor drivers provide API for web elements. However, CodeceptJS do not expose them to tests by design, keeping test to be action focused. If you need to get access to web elements, it is recommended to implement operations for web elements in a custom helper.</source>
          <target state="translated">WebDriver、Puppeteer、Playwright、Protractorの各ドライバはWeb要素のAPIを提供しています。しかし、CodeceptJSは設計上、これらをテストに公開しないため、テストはアクションを重視したものになっています。Web要素へのアクセスが必要な場合は、カスタムヘルパーでWeb要素の操作を実装することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="f1e743f1f84c409694a483e552f4180104c2fcf9" translate="yes" xml:space="preserve">
          <source>WebDriverIO</source>
          <target state="translated">WebDriverIO</target>
        </trans-unit>
        <trans-unit id="67b2f997ac4cc51d15a6374c7e168786bcde1dd8" translate="yes" xml:space="preserve">
          <source>WebDriverIO Example</source>
          <target state="translated">WebDriverIOの例</target>
        </trans-unit>
        <trans-unit id="5ce4051d43fe6c0fc19a96f4288f48e8758c9122" translate="yes" xml:space="preserve">
          <source>WebDriverIO helper which wraps &lt;a href=&quot;http://webdriver.io/&quot;&gt;webdriverio&lt;/a&gt; library to manipulate browser using Selenium WebDriver or PhantomJS.</source>
          <target state="translated">&lt;a href=&quot;http://webdriver.io/&quot;&gt;Webdriverio&lt;/a&gt;ライブラリをラップして、Selenium WebDriverまたはPhantomJSを使用してブラウザーを操作するWebDriverIOヘルパー。</target>
        </trans-unit>
        <trans-unit id="4b8246b75742690da1cff81db1818841a44548ca" translate="yes" xml:space="preserve">
          <source>WebDriverIO makes it possible to execute tests against services like &lt;code&gt;Sauce Labs&lt;/code&gt;&lt;code&gt;BrowserStack&lt;/code&gt;&lt;code&gt;TestingBot&lt;/code&gt; Check out their documentation on &lt;a href=&quot;http://webdriver.io/guide/usage/cloudservices.html&quot;&gt;available parameters&lt;/a&gt;</source>
          <target state="translated">WebDriverIOにより、 &lt;code&gt;Sauce Labs&lt;/code&gt; &lt;code&gt;BrowserStack&lt;/code&gt; &lt;code&gt;TestingBot&lt;/code&gt; などのサービスに対してテストを実行できるように&lt;a href=&quot;http://webdriver.io/guide/usage/cloudservices.html&quot;&gt;なります。使用可能なパラメーター&lt;/a&gt;に関するドキュメントを確認してください</target>
        </trans-unit>
        <trans-unit id="3e73da95a0ac56dbf82712b993fd01f417261e1b" translate="yes" xml:space="preserve">
          <source>WebDriverIO requires &lt;a href=&quot;https://codecept.io/quickstart/#prepare-selenium-server&quot;&gt;Selenium Server and ChromeDriver/GeckoDriver to be installed&lt;/a&gt;.</source>
          <target state="translated">WebDriverIOを使用するには、&lt;a href=&quot;https://codecept.io/quickstart/#prepare-selenium-server&quot;&gt;Selenium ServerとChromeDriver / GeckoDriverがインストールされている&lt;/a&gt;必要があります。</target>
        </trans-unit>
        <trans-unit id="2b1b6b9d2a8edcdff4f949b50b8c2f65002ecea3" translate="yes" xml:space="preserve">
          <source>Webdriverio services runner.</source>
          <target state="translated">Webdriverioのサービスランナー。</target>
        </trans-unit>
        <trans-unit id="4a80c2890f6b03b813729066b6574c209d114080" translate="yes" xml:space="preserve">
          <source>Webkit (Safari)</source>
          <target state="translated">ウェブキット(Safari</target>
        </trans-unit>
        <trans-unit id="294dbc856dc7dc84de4ee001e8da1d6fa219ddb1" translate="yes" xml:space="preserve">
          <source>What if CodeceptJS doesn't provide some of Protractor functionality you actually need? Sure its API is to general, and this case is possible. If you don't know how to do something with CodeceptJS - revert back to Protractor syntax!</source>
          <target state="translated">もしCodeceptJSがProtractorの機能を提供していないとしたら?確かにそのAPIは一般的で、このようなケースもあり得ます。CodeceptJSで何かをする方法がわからない場合は、Protractorの構文に戻ってください。</target>
        </trans-unit>
        <trans-unit id="e1559296258926ec687885639df4b37b72107760" translate="yes" xml:space="preserve">
          <source>What if CodeceptJS doesn't provide some specific Protractor functionality you need? If you don't know how to do something with CodeceptJS, you can simply revert back to using Protractor syntax!</source>
          <target state="translated">もしCodeceptJSが必要とする特定のProtractor機能を提供していない場合はどうすればいいのでしょうか?CodeceptJSで何かをする方法がわからない場合は、Protractorの構文を使うように戻すことができます。</target>
        </trans-unit>
        <trans-unit id="5fb69fb74393a257fd7a1e813a52d4ef3396df5a" translate="yes" xml:space="preserve">
          <source>What if we want to locators prefixed with &lt;code&gt;=&lt;/code&gt; to match elements with exact text value. We can do that too:</source>
          <target state="translated">要素を正確なテキスト値と一致させるために、接頭辞 &lt;code&gt;=&lt;/code&gt; が付いたロケーターが必要な場合はどうなりますか。私たちもそれを行うことができます：</target>
        </trans-unit>
        <trans-unit id="dbf8f828f0db94bd1ceb760b6b373a45d2752eb6" translate="yes" xml:space="preserve">
          <source>What if you use special test attributes for locators such as &lt;code&gt;data-qa&lt;/code&gt;, &lt;code&gt;data-test&lt;/code&gt;, &lt;code&gt;test-id&lt;/code&gt;, etc. We created &lt;a href=&quot;https://codecept.io/plugins#customlocator&quot;&gt;customLocator plugin&lt;/a&gt; to declare rules for locating element.</source>
          <target state="translated">&lt;code&gt;data-qa&lt;/code&gt; 、 &lt;code&gt;data-test&lt;/code&gt; 、 &lt;code&gt;test-id&lt;/code&gt; などのロケーターに特別なテスト属性を使用するとどうなりますか。要素を見つけるためのルールを宣言する&lt;a href=&quot;https://codecept.io/plugins#customlocator&quot;&gt;customLocatorプラグイン&lt;/a&gt;を作成しました。</target>
        </trans-unit>
        <trans-unit id="547fbf4b8e8f0a523de2c55a559e30f8a60f453f" translate="yes" xml:space="preserve">
          <source>What is Behavior Driven Development</source>
          <target state="translated">行動主導型開発とは</target>
        </trans-unit>
        <trans-unit id="8dbe852f21160e020288a62a9ce8830837a56471" translate="yes" xml:space="preserve">
          <source>What is Selenium WebDriver</source>
          <target state="translated">Selenium WebDriverとは</target>
        </trans-unit>
        <trans-unit id="1e8b0b9829ede904db0527ef1b5afcaef1ce3507" translate="yes" xml:space="preserve">
          <source>What makes CodeceptJS better for mobile testing? Take a look. Here is the sample test for a native mobile application written in CodeceptJS:</source>
          <target state="translated">CodeceptJSは何がモバイルテストに適しているのでしょうか?見てみましょう。ここでは、CodeceptJSで書かれたネイティブモバイルアプリケーションのサンプルテストをご紹介します。</target>
        </trans-unit>
        <trans-unit id="3cf3047bf50706530344c8407793f600e756906c" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;https://codecept.io/plugins#selenoid&quot;&gt;Selenoid Plugin&lt;/a&gt; is enabled video can be automatically recorded for each test.</source>
          <target state="translated">とき&lt;a href=&quot;https://codecept.io/plugins#selenoid&quot;&gt;Selenoidプラグインが&lt;/a&gt;有効になっている動画は、自動的に各テストのために記録することができます。</target>
        </trans-unit>
        <trans-unit id="5fe4aa744cffaafd95af872339b92ca76447fb5c" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;allure&lt;/code&gt; plugin is enabled a video is attached to report automatically.</source>
          <target state="translated">ときに &lt;code&gt;allure&lt;/code&gt; プラグインが有効になっているビデオは自動的にレポートに添付されています。</target>
        </trans-unit>
        <trans-unit id="c2b13a17e7505662cfe89edeb564ac4198292ba0" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;autoCreate&lt;/code&gt; is enabled it will pull the &lt;a href=&quot;https://hub.docker.com/u/selenoid&quot;&gt;latest Selenoid from DockerHub (opens new window)&lt;/a&gt; and start Selenoid automatically. It will also create &lt;code&gt;browsers.json&lt;/code&gt; file required by Selenoid.</source>
          <target state="translated">場合は &lt;code&gt;autoCreate&lt;/code&gt; 有効になっていることが引っ張ってくる&lt;a href=&quot;https://hub.docker.com/u/selenoid&quot;&gt;DockerHub（新しいウィンドウが開きます）から最新のSelenoidを&lt;/a&gt;、自動的にSelenoidを開始します。また、ソレノイドに必要なbrowser.jsonファイルも作成し &lt;code&gt;browsers.json&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7c3cb0dafcce62ac26efc77bb5023a99ec94de40" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;enableVideo&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; this plugin saves video in &lt;code&gt;output/videos&lt;/code&gt; directory with each test by name To save space videos for all succesful tests are deleted. This can be changed by &lt;code&gt;deletePassed&lt;/code&gt; option.</source>
          <target state="translated">とき &lt;code&gt;enableVideo&lt;/code&gt; がある &lt;code&gt;true&lt;/code&gt; このプラグインは、ビデオセーブ &lt;code&gt;output/videos&lt;/code&gt; すべての成功しテストのために削除された空間の動画を保存するには名前で各テストでディレクトリを。これは、 &lt;code&gt;deletePassed&lt;/code&gt; オプションで変更できます。</target>
        </trans-unit>
        <trans-unit id="d04279b301badefb809fbdcc5dc41803cc07973c" translate="yes" xml:space="preserve">
          <source>When a helper is created, regenerate your step definitions, so you could see those actions when using &lt;a href=&quot;https://codecept.io/basics#intellisense&quot;&gt;intellisense&lt;/a&gt;:</source>
          <target state="translated">ヘルパーが作成されたら、ステップ定義を再生成して、&lt;a href=&quot;https://codecept.io/basics#intellisense&quot;&gt;インテリセンス&lt;/a&gt;を使用するときにそれらのアクションを確認できるようにします。</target>
        </trans-unit>
        <trans-unit id="0c23aab8426b6af9668aa19632400841da8dbdd0" translate="yes" xml:space="preserve">
          <source>When a project is growing and more and more tests are required, it's time to think about reusing test code across the tests. Some common actions should be moved from tests to other files so to be accessible from different tests.</source>
          <target state="translated">プロジェクトが大きくなり、より多くのテストが必要になってきたら、テスト全体でテストコードを再利用することを考えるべきです。いくつかの一般的なアクションは、異なるテストからアクセスできるように、テストから他のファイルに移動する必要があります。</target>
        </trans-unit>
        <trans-unit id="d4eee0fc2c8a7745faa46869152949bb128cf373" translate="yes" xml:space="preserve">
          <source>When a test runs faster than application it is recommended to increase &lt;code&gt;waitForAction&lt;/code&gt; config value. It will wait for a small amount of time (100ms) by default after each user action is taken.</source>
          <target state="translated">テストがアプリケーションよりも高速に実行される場合は、 &lt;code&gt;waitForAction&lt;/code&gt; 構成値を増やすことをお勧めします。デフォルトでは、各ユーザーアクションが実行された後、少しの間（100ms）待機します。</target>
        </trans-unit>
        <trans-unit id="3b2153b2bf020a9fb35ba294349187884ce91dbd" translate="yes" xml:space="preserve">
          <source>When an URL doesn't start with a protocol (http:// or https://) it is considered to be a relative URL and will be appended to the URL which was initially set-up in the config.</source>
          <target state="translated">URL がプロトコル(http://または https://)で始まらない場合、相対 URL とみなされ、設定で最初に設定された URL に追加されます。</target>
        </trans-unit>
        <trans-unit id="8b1fa438688997100829f037b54566433589bcb6" translate="yes" xml:space="preserve">
          <source>When dealing with clicks, we can specify a text value. CodeceptJS will use that value to search the web page for a valid clickable element containing our specified text. This enables us to search for links and buttons by their text.</source>
          <target state="translated">クリックを扱う際には、テキストの値を指定することができます。CodeceptJSはその値を使って、指定したテキストを含むクリック可能な要素を検索します。これにより、リンクやボタンをテキストから検索することができます。</target>
        </trans-unit>
        <trans-unit id="3a61c3a23e71a1289f2eafb5786960e253e6da26" translate="yes" xml:space="preserve">
          <source>When enabled, it collects all test files and executes them in parallel by the specified amount of chunks. Given we have five test scenarios (&lt;code&gt;a_test.js&lt;/code&gt;,&lt;code&gt;b_test.js&lt;/code&gt;,&lt;code&gt;c_test.js&lt;/code&gt;,&lt;code&gt;d_test.js&lt;/code&gt; and &lt;code&gt;e_test.js&lt;/code&gt;), by setting &lt;code&gt;&quot;chunks&quot;: 2&lt;/code&gt; we tell the runner to run two suites in parallel. The first suite will run &lt;code&gt;a_test.js&lt;/code&gt;,&lt;code&gt;b_test.js&lt;/code&gt; and &lt;code&gt;c_test.js&lt;/code&gt;, the second suite will run &lt;code&gt;d_test.js&lt;/code&gt; and &lt;code&gt;e_test.js&lt;/code&gt;.</source>
          <target state="translated">有効にすると、すべてのテストファイルが収集され、指定された量のチャンクで並列に実行されます。5つのテストシナリオ（ &lt;code&gt;a_test.js&lt;/code&gt; 、 &lt;code&gt;b_test.js&lt;/code&gt; 、 &lt;code&gt;c_test.js&lt;/code&gt; 、 &lt;code&gt;d_test.js&lt;/code&gt; 、および &lt;code&gt;e_test.js&lt;/code&gt; ）があるとすると、 &lt;code&gt;&quot;chunks&quot;: 2&lt;/code&gt; 設定することで、2はランナーに2つのスイートを並行して実行するように指示します。最初のスイートは &lt;code&gt;a_test.js&lt;/code&gt; 、 &lt;code&gt;b_test.js&lt;/code&gt; および &lt;code&gt;c_test.js&lt;/code&gt; を実行し、2番目のスイートは &lt;code&gt;d_test.js&lt;/code&gt; および &lt;code&gt;e_test.js&lt;/code&gt; を実行します。</target>
        </trans-unit>
        <trans-unit id="9d0bd1c2ff48868dcec703b5101a364671608dcb" translate="yes" xml:space="preserve">
          <source>When it's hard to match text to element we recommend using &lt;a href=&quot;https://codecept.io/locators#locator-builder&quot;&gt;locator builder&lt;/a&gt;. It allows to build complex locators via fluent API. So if you want to click an element which is not a button or a link and use its text you can use &lt;code&gt;locate()&lt;/code&gt; to build a readable locator:</source>
          <target state="translated">テキストを要素に一致させるのが難しい場合は、&lt;a href=&quot;https://codecept.io/locators#locator-builder&quot;&gt;ロケータービルダー&lt;/a&gt;を使用することをお勧めします。流暢なAPIを介して複雑なロケーターを構築できます。したがって、ボタンやリンクではない要素をクリックしてそのテキストを使用する場合は、 &lt;code&gt;locate()&lt;/code&gt; を使用して読み取り可能なロケーターを作成できます。</target>
        </trans-unit>
        <trans-unit id="7a31f49f903202005d98e6d4890727f36c470fd9" translate="yes" xml:space="preserve">
          <source>When opening a web page you can set headers as well. &lt;code&gt;amOnPage&lt;/code&gt; methods can take headers as second parameter:</source>
          <target state="translated">Webページを開くときに、ヘッダーも設定できます。 &lt;code&gt;amOnPage&lt;/code&gt; メソッドは、2番目のパラメーターとしてヘッダーを使用できます。</target>
        </trans-unit>
        <trans-unit id="550f48bdadd2b6372c75f6abf056a8300b1e0c2c" translate="yes" xml:space="preserve">
          <source>When passed &lt;code&gt;--steps&lt;/code&gt; or &lt;code&gt;--debug&lt;/code&gt; option runs tests, disabling all plugins and helpers, so you can get step-by-step report with no tests actually executed.</source>
          <target state="translated">&lt;code&gt;--steps&lt;/code&gt; または &lt;code&gt;--debug&lt;/code&gt; オプションに合格すると、テストが実行され、すべてのプラグインとヘルパーが無効になるため、実際にテストを実行しなくても、ステップバイステップのレポートを取得できます。</target>
        </trans-unit>
        <trans-unit id="38572368bf0e9c12115e4e5c0ca590383a9ed100" translate="yes" xml:space="preserve">
          <source>When running steps inside a within block will be shown with a shift:</source>
          <target state="translated">ブロック内でステップを実行している場合は、シフトして表示されます。</target>
        </trans-unit>
        <trans-unit id="cd516cf5f9aab979f022969cd0dc59905e3e7dd9" translate="yes" xml:space="preserve">
          <source>When running steps inside, a within block will be shown with a shift:</source>
          <target state="translated">内側でステップを実行すると、内ブロックがシフトして表示されます。</target>
        </trans-unit>
        <trans-unit id="ae7116f8a5878a047de727706e2bec9b6399b342" translate="yes" xml:space="preserve">
          <source>When site-wide widgets are used, interactions with them should be placed in &lt;strong&gt;Page Fragments&lt;/strong&gt;. This should be applied to global navigation, modals, widgets.</source>
          <target state="translated">サイト全体のウィジェットを使用する場合、ウィジェットとのやり取りは&lt;strong&gt;ページフラグメントに&lt;/strong&gt;配置する必要があります。これは、グローバルナビゲーション、モーダル、ウィジェットに適用する必要があります。</target>
        </trans-unit>
        <trans-unit id="dea1a2d8f43ed0e0fa6e5b78a5612741d373c6eb" translate="yes" xml:space="preserve">
          <source>When testing web application you can disable some of external requests calls by enabling HTTP mocking. This is useful when you want to isolate application testing from a backend. For instance, if you don't want to save data to database, and you know the request which performs save, you can mock the request, so application will treat this as valid response, but no data will be actually saved.</source>
          <target state="translated">ウェブアプリケーションをテストする場合、HTTP モックを有効にすることで、外部からのリクエストコールの一部を無効にすることができます。これは、アプリケーションのテストをバックエンドから分離したい場合に便利です。例えば、データベースにデータを保存したくない場合、保存を実行するリクエストを知っている場合、リクエストをモックすることができ、アプリケーションはこれを有効なレスポンスとして扱いますが、実際にはデータは保存されません。</target>
        </trans-unit>
        <trans-unit id="8cad1d9e58d3696ff7d3a46daf6fe5108425488d" translate="yes" xml:space="preserve">
          <source>When the helper is enabled in config all methods of a helper class are available in &lt;code&gt;I&lt;/code&gt; object. For instance, if we add a new method to helper class:</source>
          <target state="translated">構成でヘルパーが有効になっている場合、ヘルパークラスのすべてのメソッドが &lt;code&gt;I&lt;/code&gt; オブジェクトで使用できます。たとえば、ヘルパークラスに新しいメソッドを追加すると、次のようになります。</target>
        </trans-unit>
        <trans-unit id="cebc8aa66e49073d0a62cb9391eed58129d72f02" translate="yes" xml:space="preserve">
          <source>When to consider navigation succeeded, defaults to &lt;code&gt;load&lt;/code&gt;. Given an array of event strings, navigation is considered to be successful after all events have been fired. Events can be either:</source>
          <target state="translated">ナビゲーションが成功したと見なす場合、デフォルトで &lt;code&gt;load&lt;/code&gt; れます。イベント文字列の配列が与えられると、すべてのイベントが発生した後、ナビゲーションは成功したと見なされます。イベントは次のいずれかになります。</target>
        </trans-unit>
        <trans-unit id="d6e84c5967a780e2406e6949a7ea63f2dd9f48ab" translate="yes" xml:space="preserve">
          <source>When using the &lt;a href=&quot;https://codecept.io/advanced/#multiple-execution&quot;&gt;Multiple Execution&lt;/a&gt; mode , there are two additional hooks available; &lt;code&gt;bootstrapAll&lt;/code&gt; and &lt;code&gt;teardownAll&lt;/code&gt;. These hooks are only called once each; before all of the test suites are run (&lt;code&gt;bootstrapAll&lt;/code&gt;) and after all of the test suites have finished (&lt;code&gt;teardownAll&lt;/code&gt;).</source>
          <target state="translated">&lt;a href=&quot;https://codecept.io/advanced/#multiple-execution&quot;&gt;複数実行&lt;/a&gt;モードを使用する場合、2つの追加のフックを使用できます。 &lt;code&gt;bootstrapAll&lt;/code&gt; および &lt;code&gt;teardownAll&lt;/code&gt; 。これらのフックは、それぞれ1回だけ呼び出されます。すべてのテストスイートが実行される前（ &lt;code&gt;bootstrapAll&lt;/code&gt; ）、およびすべてのテストスイートが完了した後（ &lt;code&gt;teardownAll&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="f59ecb19a00880d1b4a79bb440a5d62ed6233451" translate="yes" xml:space="preserve">
          <source>When we deal with clicks, CodeceptJS can take a text and search a web page for a valid clickable element with that text. So links and buttons can be searched by their text.</source>
          <target state="translated">クリックを扱う場合、CodeceptJSはテキストを受け取り、そのテキストでクリック可能な要素を検索することができます。そのため、リンクやボタンはそのテキストで検索することができます。</target>
        </trans-unit>
        <trans-unit id="0656ccce597c71fc60a6e58a56b6d97f63e2c2b6" translate="yes" xml:space="preserve">
          <source>When we switch helper to Nightmare:</source>
          <target state="translated">助っ人をナイトメアに切り替えると</target>
        </trans-unit>
        <trans-unit id="3af58657fd3384299c8fbec8ac5940b0a81d5019" translate="yes" xml:space="preserve">
          <source>When you execute such test with &lt;code&gt;codeceptjs run&lt;/code&gt; command you may see the browser is started</source>
          <target state="translated">&lt;code&gt;codeceptjs run&lt;/code&gt; コマンドを使用してこのようなテストを実行すると、ブラウザが起動していることがわかります。</target>
        </trans-unit>
        <trans-unit id="f3032df83dc0f77a930aa4dc6217ae4211514826" translate="yes" xml:space="preserve">
          <source>When you execute such test with &lt;code&gt;npx codeceptjs run&lt;/code&gt; command you may see the browser is started</source>
          <target state="translated">&lt;code&gt;npx codeceptjs run&lt;/code&gt; コマンドを使用してこのようなテストを実行すると、ブラウザが起動していることがわかります。</target>
        </trans-unit>
        <trans-unit id="4da6263585d240ede8aee42a142159d16da621de" translate="yes" xml:space="preserve">
          <source>When you need to customize access to API and go beyond what ApiDataFactory provides, implement DAO:</source>
          <target state="translated">APIへのアクセスをカスタマイズしたり、ApiDataFactoryが提供している以上のアクセスをしたい場合は、DAOを実装してください。</target>
        </trans-unit>
        <trans-unit id="1dd15c5f8d4865c6c8ecad6b0a7416343813ee4d" translate="yes" xml:space="preserve">
          <source>When you need to rerun scenarios a few times, add the &lt;code&gt;retries&lt;/code&gt; option to the &lt;code&gt;Scenario&lt;/code&gt; declaration.</source>
          <target state="translated">シナリオを数回再実行する必要がある場合は、 &lt;code&gt;Scenario&lt;/code&gt; 宣言に &lt;code&gt;retries&lt;/code&gt; オプションを追加します。</target>
        </trans-unit>
        <trans-unit id="94980865fa971ae2c38a4e515fb3d5a70f16fc5a" translate="yes" xml:space="preserve">
          <source>When you need to rerun scenarios few times just add &lt;code&gt;retries&lt;/code&gt; option added to &lt;code&gt;Scenario&lt;/code&gt; declaration.</source>
          <target state="translated">シナリオを数回再実行する必要がある場合は、 &lt;code&gt;Scenario&lt;/code&gt; 宣言に &lt;code&gt;retries&lt;/code&gt; オプションを追加するだけです。</target>
        </trans-unit>
        <trans-unit id="11381b66e6ee1b6ba008656bf240cb3d888b0e6b" translate="yes" xml:space="preserve">
          <source>When(); projectPage.update(projectId, { title: 'new title' });</source>
          <target state="translated">When();projectPage.update(projectId,{title:'new title' }).</target>
        </trans-unit>
        <trans-unit id="23b1f01e6197d68654bd032f73c03c96ea90aee7" translate="yes" xml:space="preserve">
          <source>Whenever you execute tests with &lt;code&gt;--verbose&lt;/code&gt; option you will see registered events and promises executed by a recorder.</source>
          <target state="translated">&lt;code&gt;--verbose&lt;/code&gt; オプションを使用してテストを実行するたびに、レコーダーによって実行された登録済みイベントとプロミスが表示されます。</target>
        </trans-unit>
        <trans-unit id="2d73f66cb3405bbcba6b459144d4d17a02f93d7c" translate="yes" xml:space="preserve">
          <source>Whenever you start writing a story you are describing a specific feature of an application, with a set of scenarios and examples describing this feature. Let's open a feature file created by &lt;code&gt;gherkin:init&lt;/code&gt; command, which is &lt;code&gt;feature/basic.feature&lt;/code&gt;.</source>
          <target state="translated">ストーリーを書き始めるときはいつでも、この機能を説明する一連のシナリオと例とともに、アプリケーションの特定の機能を説明しています。 &lt;code&gt;feature/basic.feature&lt;/code&gt; &lt;code&gt;gherkin:init&lt;/code&gt; コマンドで作成された機能ファイル、feature / basic.featureを開きます。</target>
        </trans-unit>
        <trans-unit id="6e7b299717cfa44afb60a6ef85e889b19ef2bd0d" translate="yes" xml:space="preserve">
          <source>While implementing custom actions using WebDriver API please note that, there is two versions of protocol: WebDriver and JSON Wire. Depending on a browser version one of those protocols can be used. We can't know for sure which protocol is going to used, so we will need to implement an action using both APIs.</source>
          <target state="translated">WebDriver APIを使用してカスタムアクションを実装する際には、プロトコルには2つのバージョンがあることに注意してください。WebDriverとJSON Wireです。ブラウザのバージョンによっては、どちらかのプロトコルを使用することができます。どちらのプロトコルを使用するかはわからないので、両方のAPIを使用してアクションを実装する必要があります。</target>
        </trans-unit>
        <trans-unit id="88ef9d489a10a05418a242978d6ba3ec715b044e" translate="yes" xml:space="preserve">
          <source>While this plugin can create containers for you for better control it is recommended to create and launch containers manually. This is especially useful for Continous Integration server as you can configure scaling for Selenoid containers.</source>
          <target state="translated">このプラグインはコンテナを作成することができますが、手動でコンテナを作成して起動することをお勧めします。これは特にContinous Integrationサーバでは、Selenoidコンテナのスケーリングを設定することができるので便利です。</target>
        </trans-unit>
        <trans-unit id="6c3b1976cb7407c02beab3b6df64f2736751b659" translate="yes" xml:space="preserve">
          <source>Why TypeScript?</source>
          <target state="translated">なぜTypeScriptなのか?</target>
        </trans-unit>
        <trans-unit id="a204fc25b091527429bd13c9ddfa37b8d830db33" translate="yes" xml:space="preserve">
          <source>Will automatically create container (Linux only) (default : true)</source>
          <target state="translated">コンテナを自動的に作成します(Linuxのみ)(デフォルトはtrue)</target>
        </trans-unit>
        <trans-unit id="c4c09e627e968c9a5e167ea358175c3aeb325022" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;autoLogin&lt;/code&gt; plugin you can save cookies into a file and reuse same session on different runs.</source>
          <target state="translated">では &lt;code&gt;autoLogin&lt;/code&gt; あなたがファイルにクッキーを保存し、別の実行で同じセッションを再利用することができますプラグイン。</target>
        </trans-unit>
        <trans-unit id="5a30027507572df6b62350d8a27104ffed2db67d" translate="yes" xml:space="preserve">
          <source>With Puppeteer</source>
          <target state="translated">人形使いと一緒に</target>
        </trans-unit>
        <trans-unit id="e9c6fbd92b4efea454b37849fe152b5da99c7a69" translate="yes" xml:space="preserve">
          <source>With Typescript, just simply replacing &lt;code&gt;module.exports&lt;/code&gt; with &lt;code&gt;export&lt;/code&gt; for autocompletion.</source>
          <target state="translated">&lt;code&gt;module.exports&lt;/code&gt; を &lt;code&gt;export&lt;/code&gt; すると、module.exportsをオートコンプリート用のexportに置き換えるだけです。</target>
        </trans-unit>
        <trans-unit id="e1604273a27c8f58c30650342b244436ae4b07e3" translate="yes" xml:space="preserve">
          <source>With WebDriver</source>
          <target state="translated">WebDriverを使用して</target>
        </trans-unit>
        <trans-unit id="d6f33dea90f2b07c2f84b649cbe51bed7c80ea5e" translate="yes" xml:space="preserve">
          <source>With the TypeScript writing CodeceptJS tests becomes much easier. If you configure TS properly in your project as well as your IDE, you will get the following features:</source>
          <target state="translated">TypeScriptを使うと、CodeceptJSのテストを書くのがとても簡単になります。IDEと同様にプロジェクト内で適切にTSを設定すれば、以下のような機能を得ることができます。</target>
        </trans-unit>
        <trans-unit id="34536c85b525616eaeef3a4b7aac28978572a18e" translate="yes" xml:space="preserve">
          <source>With this procedure we also ensure that everyone in a team knows what has been developed, what has not, what has been tested and what has not.</source>
          <target state="translated">この手順では、チームの全員が、何が開発されたか、何が開発されていないか、何がテストされたか、何がテストされていないかを把握していることを確認します。</target>
        </trans-unit>
        <trans-unit id="eecd6c82bf99523b426f6ba7dd37f2abf11d0fb1" translate="yes" xml:space="preserve">
          <source>With ❤ &lt;a href=&quot;https://codecept.io&quot;&gt;CodeceptJS Team (opens new window)&lt;/a&gt;</source>
          <target state="translated">❤と&lt;a href=&quot;https://codecept.io&quot;&gt;CodeceptJSチーム（新しいウィンドウが開きます）&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c6205072bdbddad8d3ef5cfb3e195b5d2c6f3556" translate="yes" xml:space="preserve">
          <source>Within</source>
          <target state="translated">Within</target>
        </trans-unit>
        <trans-unit id="83a05aca6c88e8bc82cc6aa5fdfe1131c586b855" translate="yes" xml:space="preserve">
          <source>Within can return a value which can be used in a scenario:</source>
          <target state="translated">Withinは、シナリオで使用できる値を返すことができます。</target>
        </trans-unit>
        <trans-unit id="0b502d8ac5550a46cce73adda7585bd4be6d1e63" translate="yes" xml:space="preserve">
          <source>Within can return a value, which can be used in a scenario:</source>
          <target state="translated">Withinでは、シナリオで使用できる値を返すことができます。</target>
        </trans-unit>
        <trans-unit id="9b8485c904e6cba36abcf1aa0f24a20bee07b38a" translate="yes" xml:space="preserve">
          <source>Within web page you can locate elements, interact with them, and check that expected elements are present on a page. That is what a test look like. That is what a test look like.</source>
          <target state="translated">ウェブページ内では、要素を見つけ、それらと対話し、期待される要素がページ上に存在するかどうかをチェックすることができます。これがテストの外観です。テストはこのようになっています。</target>
        </trans-unit>
        <trans-unit id="0a861892b76c83e9d55990203b16ea4faa8bc58e" translate="yes" xml:space="preserve">
          <source>Without &lt;code&gt;setSharedCookies&lt;/code&gt; you will need to update the config manually, so a data helper could receive cookies from a browser to make a request. If you would like to configure this process manually, here is an example of doing so:</source>
          <target state="translated">&lt;code&gt;setSharedCookies&lt;/code&gt; がない場合は、構成を手動で更新する必要があるため、データヘルパーはブラウザーからCookieを受信して​​要求を行うことができます。このプロセスを手動で構成する場合は、次の例を使用してください。</target>
        </trans-unit>
        <trans-unit id="71a523ff248c5666993eb4991bc066a8017169b6" translate="yes" xml:space="preserve">
          <source>Workers are faster and simpler to start, while &lt;code&gt;run-multiple&lt;/code&gt; requires additional configuration and can be used to run tests in different browsers at once.</source>
          <target state="translated">ワーカーは起動が速く簡単ですが、 &lt;code&gt;run-multiple&lt;/code&gt; は追加の構成が必要であり、さまざまなブラウザーで一度にテストを実行するために使用できます。</target>
        </trans-unit>
        <trans-unit id="0c1250ccfda1bcec1acf7ff40c2ba1878b0928ce" translate="yes" xml:space="preserve">
          <source>Write a simple test scenario:</source>
          <target state="translated">簡単なテストシナリオを書く。</target>
        </trans-unit>
        <trans-unit id="30733d1bd288540cc5a2cf12a30ed6eea7284aa6" translate="yes" xml:space="preserve">
          <source>Writes test to file</source>
          <target state="translated">テストをファイルに書き込む</target>
        </trans-unit>
        <trans-unit id="bee6d0fa8fc7791052acd299661c33874b486665" translate="yes" xml:space="preserve">
          <source>Writing First Test</source>
          <target state="translated">ライティングファーストテスト</target>
        </trans-unit>
        <trans-unit id="ba0e9312c8cb9cd6ef1a61e5d88575514a7ba12b" translate="yes" xml:space="preserve">
          <source>Writing Tests</source>
          <target state="translated">筆記試験</target>
        </trans-unit>
        <trans-unit id="9d497ec47a0985dbe1ace5d6eae1d0ddbb898606" translate="yes" xml:space="preserve">
          <source>Writing Your First Test</source>
          <target state="translated">最初のテストの書き方</target>
        </trans-unit>
        <trans-unit id="7515901810c2f06fbcebdbe370b291231d3fc9ae" translate="yes" xml:space="preserve">
          <source>Writing a Test</source>
          <target state="translated">テストの書き方</target>
        </trans-unit>
        <trans-unit id="838eb367b1e89aaa615c4aa28aefc4d8589fa090" translate="yes" xml:space="preserve">
          <source>Writing good locators can be tricky. The Mozilla team has written an excellent guide titled &lt;a href=&quot;https://blog.mozilla.org/webqa/2013/09/26/writing-reliable-locators-for-selenium-and-webdriver-tests/&quot;&gt;Writing reliable locators for Selenium and WebDriver tests (opens new window)&lt;/a&gt;.</source>
          <target state="translated">良いロケーターを書くのは難しいかもしれません。Mozillaチームは&lt;a href=&quot;https://blog.mozilla.org/webqa/2013/09/26/writing-reliable-locators-for-selenium-and-webdriver-tests/&quot;&gt;、SeleniumおよびWebDriverテスト用の信頼できるロケーターの作成&lt;/a&gt;というタイトルの優れたガイドを作成しました（新しいウィンドウが開きます）。</target>
        </trans-unit>
        <trans-unit id="7b3c5c91a420836835f3345db35033e94f5372eb" translate="yes" xml:space="preserve">
          <source>Writing good locators can be tricky. The Mozilla team has written an excellent guide titled &lt;a href=&quot;https://blog.mozilla.org/webqa/2013/09/26/writing-reliable-locators-for-selenium-and-webdriver-tests/&quot;&gt;Writing reliable locators for Selenium and WebDriver tests&lt;/a&gt;.</source>
          <target state="translated">良いロケーターを書くのは難しいかもしれません。Mozillaチームは&lt;a href=&quot;https://blog.mozilla.org/webqa/2013/09/26/writing-reliable-locators-for-selenium-and-webdriver-tests/&quot;&gt;、SeleniumおよびWebDriverテスト用の信頼できるロケーターの作成&lt;/a&gt;というタイトルの優れたガイドを作成しました。</target>
        </trans-unit>
        <trans-unit id="c0aa9ef764d832b80428d756a731a94251b0e3a1" translate="yes" xml:space="preserve">
          <source>XML</source>
          <target state="translated">XML</target>
        </trans-unit>
        <trans-unit id="0a3d7ea26ec76d93907265c923a9954480d5facb" translate="yes" xml:space="preserve">
          <source>XPath</source>
          <target state="translated">XPath</target>
        </trans-unit>
        <trans-unit id="2a353329d5df6fb79e35020f9ce431e70409da96" translate="yes" xml:space="preserve">
          <source>Yes, also the &lt;a href=&quot;https://github.com/DavertMik/codeceptjs-todomvc-puppeteer&quot;&gt;demo project is available on GitHub&lt;/a&gt;</source>
          <target state="translated">はい、&lt;a href=&quot;https://github.com/DavertMik/codeceptjs-todomvc-puppeteer&quot;&gt;デモプロジェクト&lt;/a&gt;もGitHubで利用できます</target>
        </trans-unit>
        <trans-unit id="74d597bef14a9e42c159e21ac3cc6858d541f833" translate="yes" xml:space="preserve">
          <source>Yes, how about &lt;a href=&quot;http://www.nightmarejs.org&quot;&gt;NightmareJS&lt;/a&gt;?</source>
          <target state="translated">はい、&lt;a href=&quot;http://www.nightmarejs.org&quot;&gt;NightmareJSは&lt;/a&gt;どうですか？</target>
        </trans-unit>
        <trans-unit id="c8e3ee70b3e6378f5ab1714c0ce6fbfde523af16" translate="yes" xml:space="preserve">
          <source>You are not limited to buttons and links. Any element can be found by passing in valid CSS or XPath:</source>
          <target state="translated">ボタンやリンクに限定されません。どのような要素でも、有効なCSSやXPathを渡すことで見つけることができます。</target>
        </trans-unit>
        <trans-unit id="314323323e30e0e9c770ad27d2e0e9dc5267aa96" translate="yes" xml:space="preserve">
          <source>You can also specify the exact locator type with strict locators:</source>
          <target state="translated">また、厳密なロケーターの種類を厳密なロケーターで指定することもできます。</target>
        </trans-unit>
        <trans-unit id="313fd351fa1ec124d20b2c39928f29446f852398" translate="yes" xml:space="preserve">
          <source>You can also switch to JS configuration format for more dynamic options. Create &lt;code&gt;codecept.conf.js&lt;/code&gt; file and make it export &lt;code&gt;config&lt;/code&gt; property.</source>
          <target state="translated">さらに動的なオプションについては、JS構成形式に切り替えることもできます。作成 &lt;code&gt;codecept.conf.js&lt;/code&gt; ファイルを、それをエクスポートします &lt;code&gt;config&lt;/code&gt; プロパティを。</target>
        </trans-unit>
        <trans-unit id="c50e8d831a2ec3626fd84459d9445f916d64a82a" translate="yes" xml:space="preserve">
          <source>You can also use &lt;code&gt;@wdio/selenium-standalone-service&lt;/code&gt; package, to install and start Selenium Server for your tests automatically.</source>
          <target state="translated">&lt;code&gt;@wdio/selenium-standalone-service&lt;/code&gt; パッケージを使用して、テスト用のSeleniumServerを自動的にインストールして起動することもできます。</target>
        </trans-unit>
        <trans-unit id="ca8f733df8ca127aec795194549e25536ea6ca5b" translate="yes" xml:space="preserve">
          <source>You can also use the &lt;code&gt;parse()&lt;/code&gt; method to obtain an object that allow you to get a simple version of the table parsed by column or row, with header (or not):</source>
          <target state="translated">&lt;code&gt;parse()&lt;/code&gt; メソッドを使用して、ヘッダー付き（またはヘッダーなし）の列または行で解析されたテーブルの単純なバージョンを取得できるオブジェクトを取得することもできます。</target>
        </trans-unit>
        <trans-unit id="7da5f558de58faf45ef0e524eebbbbbbdee76114" translate="yes" xml:space="preserve">
          <source>You can auto-retry a failed step by enabling &lt;a href=&quot;https://codecept.io/plugins/#retryfailedstep&quot;&gt;retryFailedStep Plugin&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://codecept.io/plugins/#retryfailedstep&quot;&gt;retryFailedStepプラグインを&lt;/a&gt;有効にすることで、失敗したステップを自動再試行できます。</target>
        </trans-unit>
        <trans-unit id="12084c3ebd9b170cf7ee42b62b97c23ba0f71aaa" translate="yes" xml:space="preserve">
          <source>You can check that specific element exists (or not) on a page, as it was described in &lt;a href=&quot;#locating-element&quot;&gt;Locating Element&lt;/a&gt; section.</source>
          <target state="translated">「&lt;a href=&quot;#locating-element&quot;&gt;要素の検索」&lt;/a&gt;セクションで説明したように、ページに特定の要素が存在する（または存在しない）ことを確認できます。</target>
        </trans-unit>
        <trans-unit id="935d4a7f6da06dda458ed3d0f75d331d4b4097f4" translate="yes" xml:space="preserve">
          <source>You can either access core Helpers (and underlying libraries) or create a new from scratch.</source>
          <target state="translated">コアとなるヘルパー(および基礎となるライブラリ)にアクセスするか、ゼロから新規に作成することができます。</target>
        </trans-unit>
        <trans-unit id="cdb00b843923397315aae052a26304584cae9376" translate="yes" xml:space="preserve">
          <source>You can execute CodeceptJS with Puppeteer or Nightmare locally with no extra configuration.</source>
          <target state="translated">CodeceptJSをPuppeteerやNightmareと一緒にローカルで実行することができます。</target>
        </trans-unit>
        <trans-unit id="674eb2b1e277bda9b41ac16c944116ffecc760e0" translate="yes" xml:space="preserve">
          <source>You can find an example project with TypeScript and CodeceptJS on our project &lt;a href=&quot;https://github.com/codecept-js/typescript-boilerplate&quot;&gt;typescript-boilerplate (opens new window)&lt;/a&gt;.</source>
          <target state="translated">TypeScriptとCodeceptJSを使用したサンプルプロジェクトは、プロジェクト&lt;a href=&quot;https://github.com/codecept-js/typescript-boilerplate&quot;&gt;typescript-boilerplate（新しいウィンドウを開きます）にあり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="dd3f01847eea1e34c8f4a03168dbb47aa5f5c831" translate="yes" xml:space="preserve">
          <source>You can have multiple configuration files for a the same project, in this case you can specify a config file to be used with &lt;code&gt;-c&lt;/code&gt; when running.</source>
          <target state="translated">同じプロジェクトに複数の構成ファイルを含めることができます。この場合、実行時に &lt;code&gt;-c&lt;/code&gt; とともに使用する構成ファイルを指定できます。</target>
        </trans-unit>
        <trans-unit id="08acbc9c56c3f72c4fb18f88b90fc2eeadd72d32" translate="yes" xml:space="preserve">
          <source>You can include this pageobject in a test by its name (defined in &lt;code&gt;codecept.json&lt;/code&gt;). If you created a &lt;code&gt;loginPage&lt;/code&gt; object, it should be added to the list of arguments to be included in the test:</source>
          <target state="translated">このページオブジェクトは、その名前（ &lt;code&gt;codecept.json&lt;/code&gt; で定義）でテストに含めることができます。 &lt;code&gt;loginPage&lt;/code&gt; オブジェクトを作成した場合は、テストに含める引数のリストに追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="85b73cf62ed50bef885bd35d361648ab28b2111b" translate="yes" xml:space="preserve">
          <source>You can include this pageobject in test by its name (defined in &lt;code&gt;codecept.json&lt;/code&gt;). In case you created a &lt;code&gt;loginPage&lt;/code&gt; object it should be added to list of test arguments to be included in test:</source>
          <target state="translated">このページオブジェクトをその名前（ &lt;code&gt;codecept.json&lt;/code&gt; で定義）でテストに含めることができます。 &lt;code&gt;loginPage&lt;/code&gt; オブジェクトを作成した場合は、テストに含めるテスト引数のリストに追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="223a34b75bd2a48098a959430e9abb3f05d5052c" translate="yes" xml:space="preserve">
          <source>You can inject objects per test by calling &lt;code&gt;injectDependencies&lt;/code&gt; function in a Scenario:</source>
          <target state="translated">シナリオで &lt;code&gt;injectDependencies&lt;/code&gt; 関数を呼び出すことにより、テストごとにオブジェクトを注入できます。</target>
        </trans-unit>
        <trans-unit id="dfc489e45d13fc65b6620cd126b3796866a2c30d" translate="yes" xml:space="preserve">
          <source>You can inject objects per test by calling &lt;code&gt;injectDependencies&lt;/code&gt; function on Scenario:</source>
          <target state="translated">シナリオで &lt;code&gt;injectDependencies&lt;/code&gt; 関数を呼び出すことにより、テストごとにオブジェクトを注入できます。</target>
        </trans-unit>
        <trans-unit id="b817f2f5743dc098bd1dd4cf3a18278e49d1240f" translate="yes" xml:space="preserve">
          <source>You can override config for session by passing second parameter:</source>
          <target state="translated">2番目のパラメータを渡すことで、セッションのconfigをオーバーライドすることができます。</target>
        </trans-unit>
        <trans-unit id="94a8938408fe174e4a417919c575112bb8f04a40" translate="yes" xml:space="preserve">
          <source>You can override the configuration for the session by passing a second parameter:</source>
          <target state="translated">2 番目のパラメータを渡すことで、セッションの設定を上書きすることができます。</target>
        </trans-unit>
        <trans-unit id="130d263b5606b234ef0f2752a10512d4480627ed" translate="yes" xml:space="preserve">
          <source>You can pass in &lt;a href=&quot;https://github.com/microsoft/playwright/blob/master/docs/api.md#browsernewpageoptions&quot;&gt;page options (opens new window)&lt;/a&gt; to emulate device on this page</source>
          <target state="translated">このページでデバイスをエミュレートするために、&lt;a href=&quot;https://github.com/microsoft/playwright/blob/master/docs/api.md#browsernewpageoptions&quot;&gt;ページオプション&lt;/a&gt;を渡す（新しいウィンドウを開く）ことができます</target>
        </trans-unit>
        <trans-unit id="cbaf87ab0b7ba8ebfc5f140dceb163f31665750b" translate="yes" xml:space="preserve">
          <source>You can pass only one parameter into a function but you can pass in array or object.</source>
          <target state="translated">関数には1つのパラメータしか渡すことができませんが、配列やオブジェクトを渡すことができます。</target>
        </trans-unit>
        <trans-unit id="bcd3790509f743138fe39ddd41d9f4fcd22f9b37" translate="yes" xml:space="preserve">
          <source>You can register ts-node, so you can use Typescript in tests with ts-node package</source>
          <target state="translated">ts-node を登録することができるので、ts-node パッケージを使ってテストで Typescript を使うことができます。</target>
        </trans-unit>
        <trans-unit id="613647883a4212e5a945ec50c06415fa07705a16" translate="yes" xml:space="preserve">
          <source>You can run a specific feature file by its filename or by grepping by name or tag.</source>
          <target state="translated">特定の機能ファイルをファイル名で実行するか、名前やタグでグレップして実行することができます。</target>
        </trans-unit>
        <trans-unit id="f491417a4226700c7a8554529008a705e7d191ca" translate="yes" xml:space="preserve">
          <source>You can set up some before hooks inside step definition files. Use &lt;code&gt;Before&lt;/code&gt; function to do that. This function receives current test as a parameter, so you can apply additional configuration to it.</source>
          <target state="translated">ステップ定義ファイル内にいくつかのbeforeフックを設定できます。これを行うには、 &lt;code&gt;Before&lt;/code&gt; 関数を使用します。この関数は現在のテストをパラメーターとして受け取るため、追加の構成を適用できます。</target>
        </trans-unit>
        <trans-unit id="829fc80c831f4699d3fb502d22ad801b417f0532" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;Scenario.todo&lt;/code&gt; when you are planning on writing tests.</source>
          <target state="translated">テストの作成を計画している場合は、 &lt;code&gt;Scenario.todo&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="5e87f6b08f4b5d450731d53e365b30419bbe1432" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;grep&lt;/code&gt; and &lt;code&gt;outputName&lt;/code&gt; params to filter tests and output directory for suite:</source>
          <target state="translated">&lt;code&gt;grep&lt;/code&gt; と &lt;code&gt;outputName&lt;/code&gt; paramsを使用して、スイートのテストと出力ディレクトリをフィルタリングできます。</target>
        </trans-unit>
        <trans-unit id="0fce681d00e3704a60544db05d3d4bdbb43fc925" translate="yes" xml:space="preserve">
          <source>You can use this options for build your own &lt;a href=&quot;https://codecept.io/hooks/#plugins&quot;&gt;plugins (opens new window)&lt;/a&gt; with &lt;a href=&quot;https://codecept.io/hooks/#api&quot;&gt;event listners (opens new window)&lt;/a&gt;. Example:</source>
          <target state="translated">このオプションを使用して、&lt;a href=&quot;https://codecept.io/hooks/#api&quot;&gt;イベントリスター（新しいウィンドウを開く&lt;/a&gt;&lt;a href=&quot;https://codecept.io/hooks/#plugins&quot;&gt;）&lt;/a&gt;を使用して独自のプラグイン（新しいウィンドウを開く）を構築できます。例：</target>
        </trans-unit>
        <trans-unit id="a405e7473a980453f794980504e4c9eb23d12fb1" translate="yes" xml:space="preserve">
          <source>You may also use &lt;code&gt;tryTo&lt;/code&gt; for cases when you deal with uncertainty on page:</source>
          <target state="translated">ページの不確実性に対処する場合は、 &lt;code&gt;tryTo&lt;/code&gt; を使用することもできます。</target>
        </trans-unit>
        <trans-unit id="018c10d39ed6bc0bb869027b3363d9a10517d5af" translate="yes" xml:space="preserve">
          <source>You may have noticed that CodeceptJS doesn't use &lt;code&gt;by.*&lt;/code&gt; locators which are common in Protractor or Selenium Webdriver. Instead, most methods expect you to pass valid CSS selectors or XPath. If you don't want CodeceptJS to guess the locator type, then you can specify the type using &lt;em&gt;strict locators&lt;/em&gt;. This is the CodeceptJS version of &lt;code&gt;by&lt;/code&gt;, so you can also reuse your angular specific locators (like models, repeaters, bindings, etc):</source>
          <target state="translated">CodeceptJSが分度器またはSeleniumWebdriverで一般的な &lt;code&gt;by.*&lt;/code&gt; ロケーターを使用しないことに気付いたかもしれません。代わりに、ほとんどのメソッドは、有効なCSSセレクターまたはXPathを渡すことを想定しています。CodeceptJSにロケータータイプを推測させたくない場合は、&lt;em&gt;厳密なロケーター&lt;/em&gt;を使用してタイプを指定できます。これは、のCodeceptJSバージョンである &lt;code&gt;by&lt;/code&gt; あなたも（モデル、リピータ、バインディングなどのように）あなたの角度の特定のロケータを再利用することができますので、：</target>
        </trans-unit>
        <trans-unit id="dd428ae8cc8eb4dfb4b5916a40fea49690d33cad" translate="yes" xml:space="preserve">
          <source>You may run use &lt;code&gt;-v $(pwd)/:tests/&lt;/code&gt; if running this from the root of your CodeceptJS tests directory. &lt;em&gt;Note: The output of your test run will appear in your local directory if your output path is &lt;code&gt;./output&lt;/code&gt; in the CodeceptJS config&lt;/em&gt;&lt;em&gt;Note: If running with the Nightmare driver, it is not necessary to run a selenium docker container and link it. So &lt;code&gt;--link selenium-chrome:selenium&lt;/code&gt; may be omitted&lt;/em&gt;</source>
          <target state="translated">CodeceptJSテストディレクトリのルートからこれを実行する場合は、 &lt;code&gt;-v $(pwd)/:tests/&lt;/code&gt; 実行できます。&lt;em&gt;注：出力パスが &lt;code&gt;./output&lt;/code&gt; 場合、テスト実行の出力はローカルディレクトリに表示されます&lt;/em&gt;&lt;em&gt;注：Nightmareドライバーで実行している場合&lt;/em&gt;&lt;em&gt;、Selenium Dockerコンテナー&lt;/em&gt;&lt;em&gt;を実行してリンクする必要はありません。したがって &lt;code&gt;--link selenium-chrome:selenium&lt;/code&gt; は省略できます&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c183a7c114264b257189a9776b7d058187773e04" translate="yes" xml:space="preserve">
          <source>You need to upload your Android app (.apk) or iOS app (.ipa) to the BrowserStack servers using the REST API before running your tests. The App URL (&lt;code&gt;bs://hashed appid&lt;/code&gt;) is returned in the response of this call.</source>
          <target state="translated">テストを実行する前に、REST APIを使用して、Androidアプリ（.apk）またはiOSアプリ（.ipa）をBrowserStackサーバーにアップロードする必要があります。アプリのURL（ &lt;code&gt;bs://hashed appid&lt;/code&gt; ）は、この呼び出しの応答で返されます。</target>
        </trans-unit>
        <trans-unit id="4ccccafe9f302b5cf3040db0005897b58a64fdde" translate="yes" xml:space="preserve">
          <source>You should provide a text as first argument and, optionally, a locator to search for a text in a context.</source>
          <target state="translated">第一引数にテキストを指定し、オプションでコンテキスト内のテキストを検索するためのロケータを指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="913145629ac48069ba2524089cb86940bdeca043" translate="yes" xml:space="preserve">
          <source>You should provide a text as first argument, and optionally a locator to narrow the search context.</source>
          <target state="translated">第一引数にテキストを指定し、オプションで検索コンテキストを絞り込むためのロケータを指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="907f44cefeae65df37cdf7b28d7c84d3264d3f26" translate="yes" xml:space="preserve">
          <source>You should set min and max runs boundaries so when few tests fail in a row you can rerun them until they are succeeded.</source>
          <target state="translated">テストがいくつか連続して失敗しても、成功するまで再実行できるように、最小実行と最大実行の境界線を設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="fc559987a25df7e5ace481b061ea319d06d33408" translate="yes" xml:space="preserve">
          <source>You will also be asked for the platform and the application package.</source>
          <target state="translated">また、プラットフォームやアプリケーションのパッケージも聞かれます。</target>
        </trans-unit>
        <trans-unit id="7b9b7ff3392b5dda39429d549f7500fd539bf61d" translate="yes" xml:space="preserve">
          <source>You will be asked about installing a demo component. If you start a fresh project &lt;strong&gt;it is recommended to agree and install a demo component&lt;/strong&gt;, so you could see tests passing.</source>
          <target state="translated">デモコンポーネントのインストールについて尋ねられます。新しいプロジェクトを開始する場合&lt;strong&gt;は、デモコンポーネントに同意してインストールすることをお勧めします&lt;/strong&gt;。そうすれば、テストに合格することがわかります。</target>
        </trans-unit>
        <trans-unit id="46b905ec5343785ba4c7e5875a343ed8bacd4135" translate="yes" xml:space="preserve">
          <source>You will be asked for a Helper to use, you should select Nightmare and provide url of a website you are testing. Setup process is explained on &lt;a href=&quot;https://codecept.io/quickstart/&quot;&gt;QuickStart page&lt;/a&gt;.</source>
          <target state="translated">使用するヘルパーを求められます。ナイトメアを選択し、テストしているWebサイトのURLを提供する必要があります。セットアッププロセスについては、&lt;a href=&quot;https://codecept.io/quickstart/&quot;&gt;クイックスタートページで&lt;/a&gt;説明しています。</target>
        </trans-unit>
        <trans-unit id="93b987b40645db2d6f06e2faa85ccf36aed5c261" translate="yes" xml:space="preserve">
          <source>You will be asked for a Helper to use, you should select Playwright and provide url of a website you are testing.</source>
          <target state="translated">あなたが使用するヘルパーを求められますが、あなたは脚本家を選択し、あなたがテストしているウェブサイトのURLを提供する必要があります。</target>
        </trans-unit>
        <trans-unit id="7548b91d1b2df58c9c01e41b428bb59bfec28410" translate="yes" xml:space="preserve">
          <source>You will be asked for a Helper to use, you should select Puppeteer and provide url of a website you are testing.</source>
          <target state="translated">使用するヘルパーを求められますので、Puppeteerを選択し、テストしているウェブサイトのURLを提供してください。</target>
        </trans-unit>
        <trans-unit id="611be88a7a15fafb70a62aa2fae216b1c1fda1be" translate="yes" xml:space="preserve">
          <source>You will be asked questions about initial configuration, make sure you select Protractor helper. If you didn't have Protractor library it &lt;strong&gt;will be installed&lt;/strong&gt;. Please agree to extend steps, and use &lt;code&gt;http://todomvc.com/examples/angularjs/&lt;/code&gt; as a url for Protractor helper.</source>
          <target state="translated">初期設定について質問されます。必ずProtractorヘルパーを選択してください。Protractorライブラリがない場合は&lt;strong&gt;インストールされ&lt;/strong&gt;ます。手順を拡張することに同意し、分度器ヘルパーのURLとして &lt;code&gt;http://todomvc.com/examples/angularjs/&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="ac0ff14c23a68ba04709b731a09957827fa5d739" translate="yes" xml:space="preserve">
          <source>You will be asked questions about the initial configuration, make sure you select the Protractor helper. If your project didn't already have the Protractor library, it &lt;strong&gt;will be installed&lt;/strong&gt; as part of this process. Please agree to extend steps, and use &lt;code&gt;http://todomvc.com/examples/angularjs/&lt;/code&gt; as the url for Protractor helper.</source>
          <target state="translated">初期構成について質問されます。必ず分度器ヘルパーを選択してください。プロジェクトにまだ分度器ライブラリがない場合は、このプロセスの一部として&lt;strong&gt;インストールさ&lt;/strong&gt;れます。手順を拡張することに同意し、分度器ヘルパーのURLとして &lt;code&gt;http://todomvc.com/examples/angularjs/&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="8a85cd0a3f138bfd2c45ec597a70fb67f76e8d91" translate="yes" xml:space="preserve">
          <source>Your first test can be generated with the &lt;code&gt;gt&lt;/code&gt; command:</source>
          <target state="translated">最初のテストは、 &lt;code&gt;gt&lt;/code&gt; コマンドを使用して生成できます。</target>
        </trans-unit>
        <trans-unit id="ff382c35ca36900f196d2db5b9c69113f5d57021" translate="yes" xml:space="preserve">
          <source>Your test scenario should always use the &lt;code&gt;I&lt;/code&gt; object to execute commands. This is important, as all methods of &lt;code&gt;I&lt;/code&gt; are running in the global promise chain. This way, CodeceptJS makes sure everything is executed in right order. To start with opening a webpage, use the &lt;code&gt;amOnPage&lt;/code&gt; command for. Since we already specified the full URL to the TodoMVC app, we can pass the relative path for our url, instead of the absolute url:</source>
          <target state="translated">テストシナリオでは、常に &lt;code&gt;I&lt;/code&gt; オブジェクトを使用してコマンドを実行する必要があります。 &lt;code&gt;I&lt;/code&gt; すべてのメソッドはグローバルプロミスチェーンで実行されているため、これは重要です。このようにして、CodeceptJSはすべてが正しい順序で実行されることを確認します。Webページを開くことから始めるには、の &lt;code&gt;amOnPage&lt;/code&gt; コマンドを使用します。TodoMVCアプリへの完全なURLをすでに指定しているので、絶対URLの代わりにURLの相対パスを渡すことができます。</target>
        </trans-unit>
        <trans-unit id="e8032a146a637147372c7cd65e5f99ae7716c778" translate="yes" xml:space="preserve">
          <source>_addPopupListener</source>
          <target state="translated">_addPopupListener</target>
        </trans-unit>
        <trans-unit id="f2fa01af7babff2cfd64e708349dda4046a15a58" translate="yes" xml:space="preserve">
          <source>_addPopupListener (Puppeteer)</source>
          <target state="translated">_addPopupListener（操り人形師）</target>
        </trans-unit>
        <trans-unit id="76eb3e66b48877f71bc78ddff094a90f8e78fef1" translate="yes" xml:space="preserve">
          <source>_cleanRequestHeaders</source>
          <target state="translated">_cleanRequestHeaders</target>
        </trans-unit>
        <trans-unit id="e3eba7f4fdfc27c1a8a4427b59a5d2bb9f840873" translate="yes" xml:space="preserve">
          <source>_cleanRequestHeaders (REST)</source>
          <target state="translated">_cleanRequestHeaders（REST）</target>
        </trans-unit>
        <trans-unit id="f88266bb1eb48b794d522772f90bb8a728ef99c7" translate="yes" xml:space="preserve">
          <source>_executeQuery</source>
          <target state="translated">_executeQuery</target>
        </trans-unit>
        <trans-unit id="5dcf8aaa7412b933faa86be0973304aba6a8b6db" translate="yes" xml:space="preserve">
          <source>_executeRequest</source>
          <target state="translated">_executeRequest</target>
        </trans-unit>
        <trans-unit id="a5f3c3e884d0f620a798a25b904865c2c34ce72a" translate="yes" xml:space="preserve">
          <source>_executeRequest (REST)</source>
          <target state="translated">_executeRequest（REST）</target>
        </trans-unit>
        <trans-unit id="e6eeeeafee7c74c4c71b88c0d86cb9814b7fda54" translate="yes" xml:space="preserve">
          <source>_fetchId</source>
          <target state="translated">_fetchId</target>
        </trans-unit>
        <trans-unit id="2003d1023e0566a197bbcc436e1d49218260aa6b" translate="yes" xml:space="preserve">
          <source>_fetchId (ApiDataFactory)</source>
          <target state="translated">_fetchId（ApiDataFactory）</target>
        </trans-unit>
        <trans-unit id="e1f6814453e02cb4031b3c18898d6933f33db8ac" translate="yes" xml:space="preserve">
          <source>_getPageUrl</source>
          <target state="translated">_getPageUrl</target>
        </trans-unit>
        <trans-unit id="71af93d49af0cd98a4f3784599e2ea3258df48e1" translate="yes" xml:space="preserve">
          <source>_getPageUrl (Puppeteer)</source>
          <target state="translated">_getPageUrl（人形劇）</target>
        </trans-unit>
        <trans-unit id="b1c28c7181c70dc62087eecac96eab5a3396652a" translate="yes" xml:space="preserve">
          <source>_getWindowHandle</source>
          <target state="translated">_getWindowHandle</target>
        </trans-unit>
        <trans-unit id="034413a12f2f16ed0d0a72c2c4c8a6bc252d1cca" translate="yes" xml:space="preserve">
          <source>_getWindowHandle (Protractor)</source>
          <target state="translated">_getWindowHandle（分度器）</target>
        </trans-unit>
        <trans-unit id="b7fac9a53beff9e872cc201d320902e402a7717d" translate="yes" xml:space="preserve">
          <source>_isShadowLocator</source>
          <target state="translated">_isShadowLocator</target>
        </trans-unit>
        <trans-unit id="19adb23b5c7c056e9a7817e39acbe5a091d30196" translate="yes" xml:space="preserve">
          <source>_locate</source>
          <target state="translated">_locate</target>
        </trans-unit>
        <trans-unit id="08ba5ce7f340fd3fc81ee953ba89c8cdeadcb7b3" translate="yes" xml:space="preserve">
          <source>_locate (Nightmare)</source>
          <target state="translated">_locate（悪夢）</target>
        </trans-unit>
        <trans-unit id="1ce0e281a62ddb0a3e536e6dd5608ae539131aa4" translate="yes" xml:space="preserve">
          <source>_locate (Protractor)</source>
          <target state="translated">_locate（分度器）</target>
        </trans-unit>
        <trans-unit id="c6a968ccefbd9b38d1b4b7826a494a11d67f9d29" translate="yes" xml:space="preserve">
          <source>_locate (Puppeteer)</source>
          <target state="translated">_locate（操り人形師）</target>
        </trans-unit>
        <trans-unit id="4eae260e3fdd5187cf965c0ab9c5adf7379205d2" translate="yes" xml:space="preserve">
          <source>_locate (WebDriverIO)</source>
          <target state="translated">_locate（WebDriverIO）</target>
        </trans-unit>
        <trans-unit id="bad56698955615dc5dfc0a4ff931dcb18d91d1be" translate="yes" xml:space="preserve">
          <source>_locateCheckable</source>
          <target state="translated">_locateCheckable</target>
        </trans-unit>
        <trans-unit id="b408e19a16fb0e092e4b695b517cc851c57e3fb9" translate="yes" xml:space="preserve">
          <source>_locateCheckable (Protractor)</source>
          <target state="translated">_locateCheckable（分度器）</target>
        </trans-unit>
        <trans-unit id="a3a25b7c660496128a47dcaf48b11f7c2926f34a" translate="yes" xml:space="preserve">
          <source>_locateCheckable (Puppeteer)</source>
          <target state="translated">_locateCheckable（操り人形師）</target>
        </trans-unit>
        <trans-unit id="97cb2e6efd7221f0010050bfa1bb88810c33b147" translate="yes" xml:space="preserve">
          <source>_locateCheckable (WebDriverIO)</source>
          <target state="translated">_locateCheckable（WebDriverIO）</target>
        </trans-unit>
        <trans-unit id="62f680ea74a5f954e2048cc4f19e23a2cc2bb6b4" translate="yes" xml:space="preserve">
          <source>_locateClickable</source>
          <target state="translated">_locateClickable</target>
        </trans-unit>
        <trans-unit id="21c10049f8832f28fb707b2ea019bd95113663e6" translate="yes" xml:space="preserve">
          <source>_locateClickable (Protractor)</source>
          <target state="translated">_locateClickable（分度器）</target>
        </trans-unit>
        <trans-unit id="2553292efa83d81fdbefb973224e9601e5e677e4" translate="yes" xml:space="preserve">
          <source>_locateClickable (Puppeteer)</source>
          <target state="translated">_locateClickable（操り人形師）</target>
        </trans-unit>
        <trans-unit id="5cc1b013d10c35e85ab2077b78dd51f9b290635b" translate="yes" xml:space="preserve">
          <source>_locateClickable (WebDriverIO)</source>
          <target state="translated">_locateClickable（WebDriverIO）</target>
        </trans-unit>
        <trans-unit id="d75da8a7d59d92c02bbf804918efbdae2371c170" translate="yes" xml:space="preserve">
          <source>_locateFields</source>
          <target state="translated">_locateFields</target>
        </trans-unit>
        <trans-unit id="7b323fc35c8933685ef2178edee7e9187dce43ec" translate="yes" xml:space="preserve">
          <source>_locateFields (Protractor)</source>
          <target state="translated">_locateFields（分度器）</target>
        </trans-unit>
        <trans-unit id="722af8418f366df50a3ef2948181c65dac2fa3f4" translate="yes" xml:space="preserve">
          <source>_locateFields (Puppeteer)</source>
          <target state="translated">_locateFields（操り人形師）</target>
        </trans-unit>
        <trans-unit id="705dbf55699e947190a1ed3fce89db643979e82d" translate="yes" xml:space="preserve">
          <source>_locateFields (WebDriverIO)</source>
          <target state="translated">_locateFields（WebDriverIO）</target>
        </trans-unit>
        <trans-unit id="68b964c309ad7a9752f168becadb4256b744a6c1" translate="yes" xml:space="preserve">
          <source>_locateShadow</source>
          <target state="translated">_locateShadow</target>
        </trans-unit>
        <trans-unit id="d04e6ef2cd6d1e234b52b753acc6d5d11f2224c4" translate="yes" xml:space="preserve">
          <source>_prepareGraphQLRequest</source>
          <target state="translated">_prepareGraphQLRequest</target>
        </trans-unit>
        <trans-unit id="eafb7cc5e3c8f40754c34b051d81fbc278084ad5" translate="yes" xml:space="preserve">
          <source>_requestCreate</source>
          <target state="translated">_requestCreate</target>
        </trans-unit>
        <trans-unit id="8d97a8ecd9e3df93893385104f286a3ca733c0dc" translate="yes" xml:space="preserve">
          <source>_requestCreate (ApiDataFactory)</source>
          <target state="translated">_requestCreate（ApiDataFactory）</target>
        </trans-unit>
        <trans-unit id="d75317660b1493d9e46abf730ef292bd161868ac" translate="yes" xml:space="preserve">
          <source>_requestDelete</source>
          <target state="translated">_requestDelete</target>
        </trans-unit>
        <trans-unit id="997d83be5ba1e1eee279ae43af59da347d45a2a4" translate="yes" xml:space="preserve">
          <source>_requestDelete (ApiDataFactory)</source>
          <target state="translated">_requestDelete（ApiDataFactory）</target>
        </trans-unit>
        <trans-unit id="b4e2cec9e836989b19905954d6fd9dd691357126" translate="yes" xml:space="preserve">
          <source>_setPage</source>
          <target state="translated">_setPage</target>
        </trans-unit>
        <trans-unit id="28da0f04dcb780b35763ca2c54b42956f471235d" translate="yes" xml:space="preserve">
          <source>_setPage (Puppeteer)</source>
          <target state="translated">_setPage（操り人形師）</target>
        </trans-unit>
        <trans-unit id="56da41fed83652007d459c775b551ce8cfb45fda" translate="yes" xml:space="preserve">
          <source>_smartWait</source>
          <target state="translated">_smartWait</target>
        </trans-unit>
        <trans-unit id="ef0556e6153d9605cefc87274a91a84620ce9ecc" translate="yes" xml:space="preserve">
          <source>_switchToContext</source>
          <target state="translated">_switchToContext</target>
        </trans-unit>
        <trans-unit id="4347e89c4503c65998567e8eb24e2cc0f5953ba3" translate="yes" xml:space="preserve">
          <source>_switchToContext (Appium)</source>
          <target state="translated">_switchToContext（アプリケーション）</target>
        </trans-unit>
        <trans-unit id="5dacd54259b67d84a193e566bd935c4c6015350f" translate="yes" xml:space="preserve">
          <source>_url</source>
          <target state="translated">_url</target>
        </trans-unit>
        <trans-unit id="556e478f4dd500a15a70a03cb901b01670b3d445" translate="yes" xml:space="preserve">
          <source>_url (REST)</source>
          <target state="translated">_url（REST）</target>
        </trans-unit>
        <trans-unit id="55bc8c96f9a5c002529d775b8e990f50ba10dc27" translate="yes" xml:space="preserve">
          <source>acceptPopup</source>
          <target state="translated">acceptPopup</target>
        </trans-unit>
        <trans-unit id="f42481fbbf6c5d4af310b5de46ae00ce3cfb80ce" translate="yes" xml:space="preserve">
          <source>acceptPopup (Protractor)</source>
          <target state="translated">acceptPopup (分度器)</target>
        </trans-unit>
        <trans-unit id="ad637340e64a428afb6439f5b4550eb3e553df47" translate="yes" xml:space="preserve">
          <source>acceptPopup (Puppeteer)</source>
          <target state="translated">acceptPopup</target>
        </trans-unit>
        <trans-unit id="233daaf74f235ca29a286746edd92480c95c6026" translate="yes" xml:space="preserve">
          <source>acceptPopup (WebDriverIO)</source>
          <target state="translated">acceptPopup (WebDriverIO)</target>
        </trans-unit>
        <trans-unit id="75697bb177d04f819f65fd22f13e60dedecda2a6" translate="yes" xml:space="preserve">
          <source>addMochawesomeContext</source>
          <target state="translated">addMochawesomeContext</target>
        </trans-unit>
        <trans-unit id="32b8b4c0ad4143cd3a33bf937b527e6b01e31108" translate="yes" xml:space="preserve">
          <source>additionalParams</source>
          <target state="translated">additionalParams</target>
        </trans-unit>
        <trans-unit id="405906c9d5be6ae5393ca65fb0e7c38e0d585ecb" translate="yes" xml:space="preserve">
          <source>after</source>
          <target state="translated">after</target>
        </trans-unit>
        <trans-unit id="fdac48f9610893268aeba2166caf113e18cdbaa8" translate="yes" xml:space="preserve">
          <source>airplane mode</source>
          <target state="translated">飛行機モード</target>
        </trans-unit>
        <trans-unit id="81f4b06f6ccc84490203b8c87a479a1e0c215aed" translate="yes" xml:space="preserve">
          <source>allure</source>
          <target state="translated">allure</target>
        </trans-unit>
        <trans-unit id="4bc57808c0ef99796065b884c5393d836f3aa528" translate="yes" xml:space="preserve">
          <source>amAcceptingPopups</source>
          <target state="translated">amAcceptingPopups</target>
        </trans-unit>
        <trans-unit id="21463a9d0e7e1c70ba24ffeb6543e6ce0789f38b" translate="yes" xml:space="preserve">
          <source>amAcceptingPopups (Puppeteer)</source>
          <target state="translated">amAcceptingPopups (人形遣い)</target>
        </trans-unit>
        <trans-unit id="7c51fe8d6afbb89b7f8403f47cc3beba9dff951a" translate="yes" xml:space="preserve">
          <source>amCancellingPopups</source>
          <target state="translated">amCancellingPopups</target>
        </trans-unit>
        <trans-unit id="084abef91a4ae18c40692666bd67b4b0c483866a" translate="yes" xml:space="preserve">
          <source>amCancellingPopups (Puppeteer)</source>
          <target state="translated">amCancellingPopups (人形遣い)</target>
        </trans-unit>
        <trans-unit id="7a38742a8f53e3ae2a0772b38e33b7359fe8acb7" translate="yes" xml:space="preserve">
          <source>amFollowingRequestRedirects</source>
          <target state="translated">amFollowingRequestRedirects</target>
        </trans-unit>
        <trans-unit id="7fffcc1e7e4f74bbdaeb8fbcda0532c36d9abb32" translate="yes" xml:space="preserve">
          <source>amFollowingRequestRedirects (REST)</source>
          <target state="translated">amFollowingRequestRedirects (REST)</target>
        </trans-unit>
        <trans-unit id="25ae24696b65e91eb23aebb00c9be6adb477d50e" translate="yes" xml:space="preserve">
          <source>amInPath</source>
          <target state="translated">amInPath</target>
        </trans-unit>
        <trans-unit id="bca5b332ed7cc2be2c7f1c934cee79f6b49c6e40" translate="yes" xml:space="preserve">
          <source>amInPath (FileSystem)</source>
          <target state="translated">amInPath</target>
        </trans-unit>
        <trans-unit id="eb9629a72cee7d9412b4d1ffcc0f6869d9c557ff" translate="yes" xml:space="preserve">
          <source>amInsideAngularApp</source>
          <target state="translated">amInsideAngularApp</target>
        </trans-unit>
        <trans-unit id="9d9c937b930b8fc4747e988a206d4d35053acdbf" translate="yes" xml:space="preserve">
          <source>amInsideAngularApp (Protractor)</source>
          <target state="translated">amInsideAngularApp(分度器</target>
        </trans-unit>
        <trans-unit id="481639566c7cd35e20209c0fbf31d50c4b20860f" translate="yes" xml:space="preserve">
          <source>amNotFollowingRequestRedirects</source>
          <target state="translated">amNotFollowingRequestRedirects</target>
        </trans-unit>
        <trans-unit id="ab63232cb1108920eaebb7d16949f9e548448b0b" translate="yes" xml:space="preserve">
          <source>amNotFollowingRequestRedirects (REST)</source>
          <target state="translated">amNotFollowingRequestRedirects (REST)</target>
        </trans-unit>
        <trans-unit id="f96600977f40621c585a02b26d2d00160f77a51c" translate="yes" xml:space="preserve">
          <source>amOnPage</source>
          <target state="translated">amOnPage</target>
        </trans-unit>
        <trans-unit id="d29f390cad814e57b02773731ce88e60de8bd977" translate="yes" xml:space="preserve">
          <source>amOnPage (Nightmare)</source>
          <target state="translated">amOnPage(ナイトメア</target>
        </trans-unit>
        <trans-unit id="458c762aa7d2531adc4ee0619f003da615e91951" translate="yes" xml:space="preserve">
          <source>amOnPage (Protractor)</source>
          <target state="translated">amOnPage (分度器)</target>
        </trans-unit>
        <trans-unit id="ed04cbde4bf1a651c2b7edc546728da7913b5d4a" translate="yes" xml:space="preserve">
          <source>amOnPage (Puppeteer)</source>
          <target state="translated">アムオンページ</target>
        </trans-unit>
        <trans-unit id="27fb35eda52e2b1e678fc535c0fb2c4fa8ba5dd3" translate="yes" xml:space="preserve">
          <source>amOnPage (WebDriverIO)</source>
          <target state="translated">amOnPage (WebDriverIO)</target>
        </trans-unit>
        <trans-unit id="96dd2f7867859973f3112f02ebba3d3b53a091b5" translate="yes" xml:space="preserve">
          <source>amOutsideAngularApp</source>
          <target state="translated">amOutsideAngularApp</target>
        </trans-unit>
        <trans-unit id="385cf61e41e39fd06220d73f4f4c1cabd5f80530" translate="yes" xml:space="preserve">
          <source>amOutsideAngularApp (Protractor)</source>
          <target state="translated">amOutsideAngularApp(分度器</target>
        </trans-unit>
        <trans-unit id="d50965011b1d1ceceb42f95bdf9ac7976e9534bc" translate="yes" xml:space="preserve">
          <source>and &lt;a href=&quot;https://codecept.io/helpers/Appium/&quot;&gt;others (opens new window)&lt;/a&gt;.</source>
          <target state="translated">そして&lt;a href=&quot;https://codecept.io/helpers/Appium/&quot;&gt;他の人（新しいウィンドウが開きます）&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="827d19e0100100ec22d19f56dd24c2f66fefb3a7" translate="yes" xml:space="preserve">
          <source>and &lt;a href=&quot;https://codecept.io/helpers/Appium/&quot;&gt;others&lt;/a&gt;.</source>
          <target state="translated">そして&lt;a href=&quot;https://codecept.io/helpers/Appium/&quot;&gt;他の人&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c1a3664ed62269963188657a9041fe49ca8bb00b" translate="yes" xml:space="preserve">
          <source>and now we can add even more tests!</source>
          <target state="translated">そして、さらに多くのテストを追加することができるようになりました</target>
        </trans-unit>
        <trans-unit id="7a6bad4b88d6d1b39f30fbaa9675ab5fd77b51c5" translate="yes" xml:space="preserve">
          <source>and others</source>
          <target state="translated">抔</target>
        </trans-unit>
        <trans-unit id="22377e89c9660f0392a1197e8365bf6211c2803a" translate="yes" xml:space="preserve">
          <source>and so we can add even more tests!</source>
          <target state="translated">ということで、さらにテストを追加することができるようになりました</target>
        </trans-unit>
        <trans-unit id="a0c0ccdbf44d9adfd15e5dc0c7d8d59c62bda5a2" translate="yes" xml:space="preserve">
          <source>and started as</source>
          <target state="translated">としてスタートしました。</target>
        </trans-unit>
        <trans-unit id="298897df9cb36cd25da134b18f761fa27d6e1e35" translate="yes" xml:space="preserve">
          <source>and use them in your tests:</source>
          <target state="translated">を使用して、テストに使用してください。</target>
        </trans-unit>
        <trans-unit id="54ed8ac17cc56c769553d963456494fe7aaf5ae4" translate="yes" xml:space="preserve">
          <source>another good example is datepicker component:</source>
          <target state="translated">他の良い例としては、データピッカーコンポーネントがあります。</target>
        </trans-unit>
        <trans-unit id="39fbafba701ecd3b23ec22d55a40f790288df262" translate="yes" xml:space="preserve">
          <source>appendField</source>
          <target state="translated">appendField</target>
        </trans-unit>
        <trans-unit id="2bd8cdd502227277694f5a79ded4f983ed93a123" translate="yes" xml:space="preserve">
          <source>appendField (Appium)</source>
          <target state="translated">appendField</target>
        </trans-unit>
        <trans-unit id="e6843445ea34a63aeecd0905cc9546681f1da3cd" translate="yes" xml:space="preserve">
          <source>appendField (Nightmare)</source>
          <target state="translated">appendField(ナイトメア</target>
        </trans-unit>
        <trans-unit id="3d73f26029e65696a262b8858ddef70b077a1ad1" translate="yes" xml:space="preserve">
          <source>appendField (Protractor)</source>
          <target state="translated">appendField(分度器</target>
        </trans-unit>
        <trans-unit id="c58084641fd04cd43d7db52878c1eb9fed2a47da" translate="yes" xml:space="preserve">
          <source>appendField (Puppeteer)</source>
          <target state="translated">appendField(人形遣い</target>
        </trans-unit>
        <trans-unit id="5569b476c2535bb62b2505cb43be3b0a2a4b0028" translate="yes" xml:space="preserve">
          <source>appendField (WebDriverIO)</source>
          <target state="translated">appendField (WebDriverIO)</target>
        </trans-unit>
        <trans-unit id="d94e78b1e13df771c53095638941c0cb5e20d415" translate="yes" xml:space="preserve">
          <source>appium</source>
          <target state="translated">appium</target>
        </trans-unit>
        <trans-unit id="72612f3ad94d8f7b0b66d4b466832b145a99a02d" translate="yes" xml:space="preserve">
          <source>asserts that an element appears a given number of times in the DOM Element is located by label or name or CSS or XPath.</source>
          <target state="translated">DOM の要素がラベルや名前、CSS や XPath で指定された回数だけ現れることを保証します。</target>
        </trans-unit>
        <trans-unit id="865e58d246affbd0b9e228b8a1570c221ef5798a" translate="yes" xml:space="preserve">
          <source>asserts that an element appears a given number of times in the DOM Element is located by label or name or CSS or XPath. Appium: support</source>
          <target state="translated">ラベルや名前、CSSやXPathなどでDOM要素が指定された回数だけ出現していることを主張します。Appium:サポート</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
