<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="codeceptjs">
    <body>
      <group id="codeceptjs">
        <trans-unit id="1ba6fe8243a3ebabcc11c253302fb999ae8bb067" translate="yes" xml:space="preserve">
          <source>Both CSS and XPath is supported. Usually CodeceptJS can guess locator's type:</source>
          <target state="translated">CSSとXPathの両方に対応しています。通常、CodeceptJSはロケータの型を推測することができます。</target>
        </trans-unit>
        <trans-unit id="31a4197bdf9071dbd060a85fd0bfb1e944458f1e" translate="yes" xml:space="preserve">
          <source>Both tasks can be achieved with &lt;a href=&quot;https://codecept.io/commands/#run-rerun&quot;&gt;&lt;code&gt;run-rerun&lt;/code&gt; command&lt;/a&gt; which runs tests multiple times until all tests are passed.</source>
          <target state="translated">両方のタスクは、すべてのテストに合格するまでテストを複数回&lt;a href=&quot;https://codecept.io/commands/#run-rerun&quot;&gt; &lt;code&gt;run-rerun&lt;/code&gt; &lt;/a&gt;するrun-rerunコマンドで実行できます。</target>
        </trans-unit>
        <trans-unit id="ec9bd14842100f29482b16d12ce3cd8a43e52464" translate="yes" xml:space="preserve">
          <source>Break a long test into few. Long test can be fragile and complicated to follow and update.</source>
          <target state="translated">長いテストをいくつかに分割します。長いテストは壊れやすく、フォローや更新が煩雑になることがあります。</target>
        </trans-unit>
        <trans-unit id="781b0bd77efa9402179a5881f3e6bb3216745f77" translate="yes" xml:space="preserve">
          <source>Browser request control</source>
          <target state="translated">ブラウザのリクエスト制御</target>
        </trans-unit>
        <trans-unit id="40547f79e62f9e4e3940e617a998ab3ba2c9a621" translate="yes" xml:space="preserve">
          <source>BrowserStack</source>
          <target state="translated">BrowserStack</target>
        </trans-unit>
        <trans-unit id="61d51540addb4a58a4a3d5322ed5c48e7be2647d" translate="yes" xml:space="preserve">
          <source>BrowserStack Configuration</source>
          <target state="translated">BrowserStack の設定</target>
        </trans-unit>
        <trans-unit id="29d00701441e63cc87ebb5ae9716302f377ab2f2" translate="yes" xml:space="preserve">
          <source>BrowserStack can be configured via wdio service, which should be installed additionally:</source>
          <target state="translated">BrowserStackはwdioサービスを介して設定することができるので、追加でインストールする必要があります。</target>
        </trans-unit>
        <trans-unit id="a00979b39413f7ddf781bf1c171d336a465e32cd" translate="yes" xml:space="preserve">
          <source>Browsers can be executed in Docker containers. This is useful when testing on Continous Integration server. We recommend using &lt;a href=&quot;https://aerokube.com/selenoid/&quot;&gt;Selenoid (opens new window)&lt;/a&gt; to run browsers in container.</source>
          <target state="translated">ブラウザはDockerコンテナで実行できます。これは、継続的インテグレーションサーバーでテストするときに役立ちます。コンテナ内でブラウザを実行&lt;a href=&quot;https://aerokube.com/selenoid/&quot;&gt;するに&lt;/a&gt;は、ソレノイド（新しいウィンドウを開く）を使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="bbd80cf7e2ded5efed8f4ee9151ab57a8ab66392" translate="yes" xml:space="preserve">
          <source>Build</source>
          <target state="translated">Build</target>
        </trans-unit>
        <trans-unit id="4fe8c79f73f481726610b8b1cd1a89e84f415cf6" translate="yes" xml:space="preserve">
          <source>But how to get all those locators? We recommend to use &lt;a href=&quot;https://github.com/appium/appium-desktop&quot;&gt;Appium Inspector (opens new window)&lt;/a&gt;.</source>
          <target state="translated">しかし、これらすべてのロケーターを取得するにはどうすればよいですか？&lt;a href=&quot;https://github.com/appium/appium-desktop&quot;&gt;Appium Inspectorの&lt;/a&gt;使用をお勧めします（新しいウィンドウが開きます）。</target>
        </trans-unit>
        <trans-unit id="a8bde20284929412d273ec2544ab41f46323c139" translate="yes" xml:space="preserve">
          <source>But how to get all those locators? We recommend to use &lt;a href=&quot;https://github.com/appium/appium-desktop&quot;&gt;Appium Inspector&lt;/a&gt;.</source>
          <target state="translated">しかし、これらすべてのロケーターを取得する方法は？&lt;a href=&quot;https://github.com/appium/appium-desktop&quot;&gt;Appium Inspectorの&lt;/a&gt;使用をお勧めします。</target>
        </trans-unit>
        <trans-unit id="80cc533d523b8eba2d4fa34cb6a985f636827430" translate="yes" xml:space="preserve">
          <source>Buttons can be matched by their visible text:</source>
          <target state="translated">ボタンは、表示されているテキストで一致させることができます。</target>
        </trans-unit>
        <trans-unit id="03d4118cdb3deabd049f02f78018bf8ece3af9f4" translate="yes" xml:space="preserve">
          <source>By default &lt;code&gt;I.have()&lt;/code&gt; returns a promise with a created data:</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;I.have()&lt;/code&gt; は作成されたデータでpromiseを返します。</target>
        </trans-unit>
        <trans-unit id="3439abf55848e24aea09de20e04cd7516b720614" translate="yes" xml:space="preserve">
          <source>By default &lt;code&gt;I.mutateData()&lt;/code&gt; returns a promise with created data as specified in operation query string:</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;I.mutateData()&lt;/code&gt; は、操作クエリ文字列で指定されたとおりに作成されたデータを含むPromiseを返します。</target>
        </trans-unit>
        <trans-unit id="e4c42951ea500640c22350a16cdc9bdbc903b6b0" translate="yes" xml:space="preserve">
          <source>By default &lt;code&gt;codecept.json&lt;/code&gt; is used for configuration. You can override its values in runtime by using &lt;code&gt;--override&lt;/code&gt; or &lt;code&gt;-o&lt;/code&gt; option in command line, passing valid JSON as a value:</source>
          <target state="translated">デフォルトでは、構成に &lt;code&gt;codecept.json&lt;/code&gt; が使用されます。コマンドラインで &lt;code&gt;--override&lt;/code&gt; または &lt;code&gt;-o&lt;/code&gt; オプションを使用して有効なJSONを値として渡すことにより、ランタイムでその値をオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="b3191e25cd5268a49b6a364498e2ba0302ead5a4" translate="yes" xml:space="preserve">
          <source>By default &lt;code&gt;id&lt;/code&gt; property of response is taken. This behavior can be changed by setting &lt;code&gt;fetchId&lt;/code&gt; function in a factory config.</source>
          <target state="translated">デフォルトでは、応答の &lt;code&gt;id&lt;/code&gt; プロパティが使用されます。この動作は、ファクトリ構成で &lt;code&gt;fetchId&lt;/code&gt; 関数を設定することで変更できます。</target>
        </trans-unit>
        <trans-unit id="c6f24a119ae211a2205d80f31e42273c4b6b77aa" translate="yes" xml:space="preserve">
          <source>By default CodeceptJS is already configured to run WebDriver tests locally with Chrome or Firefox. If you just need to start running tests - proceed to the next chapter.</source>
          <target state="translated">デフォルトでは、CodeceptJSはすでにChromeやFirefoxでWebDriverのテストをローカルで実行するように設定されています。テストの実行を開始する必要がある場合は、次の章に進んでください。</target>
        </trans-unit>
        <trans-unit id="959941d8265ba934057a96b01b59bba40dc12589" translate="yes" xml:space="preserve">
          <source>By default CodeceptJS provides cli reporter with console output. Test names and failures will be printed to screen.</source>
          <target state="translated">デフォルトでは、CodeceptJSはコンソール出力付きの cli レポーターを提供しています。テスト名と失敗は画面に出力されます。</target>
        </trans-unit>
        <trans-unit id="09f7c93962331d66ca14198349d82385538d09ef" translate="yes" xml:space="preserve">
          <source>By default CodeceptJS runs tests in the same browser window but clears cookies and local storage after each test. This behavior can be changed with these options:</source>
          <target state="translated">デフォルトでは、CodeceptJSは同じブラウザウィンドウでテストを実行しますが、各テストの後にクッキーとローカルストレージをクリアします。この動作は以下のオプションで変更できます。</target>
        </trans-unit>
        <trans-unit id="7ea6cdf3e5aafb059f591deacb8235cdbb14dcac" translate="yes" xml:space="preserve">
          <source>By default CodeceptJS saves a screenshot of a failed test. This can be configured in &lt;a href=&quot;https://codecept.io/plugins/#screenshotonfail&quot;&gt;screenshotOnFail Plugin&lt;/a&gt;</source>
          <target state="translated">デフォルトでは、CodeceptJSは失敗したテストのスクリーンショットを保存します。これは、&lt;a href=&quot;https://codecept.io/plugins/#screenshotonfail&quot;&gt;screenshotOnFailプラグイン&lt;/a&gt;で構成できます。</target>
        </trans-unit>
        <trans-unit id="dde71849fb69be3686ad9d173e5046e0a62fb2c2" translate="yes" xml:space="preserve">
          <source>By default CodeceptJS tries to find button or link with exact text on it</source>
          <target state="translated">デフォルトでは、CodeceptJSは正確なテキストが書かれたボタンやリンクを見つけようとします。</target>
        </trans-unit>
        <trans-unit id="81bf908bede58e544434295d8c05b1e2cedf9ebf" translate="yes" xml:space="preserve">
          <source>By default CodeceptJS tries to find the button or link with the exact text on it</source>
          <target state="translated">デフォルトでは、CodeceptJSはボタンやリンクを正確なテキストで見つけようとします。</target>
        </trans-unit>
        <trans-unit id="1bdc6203d6d5b8f1835870f2c7aef9784d044dd7" translate="yes" xml:space="preserve">
          <source>By default CodeceptJS tries to guess the locator type. In order to specify exact locator type you can pass a hash called &lt;strong&gt;strict locator&lt;/strong&gt;.</source>
          <target state="translated">デフォルトでは、CodeceptJSはロケータータイプを推測しようとします。正確なロケータータイプを指定するために、&lt;strong&gt;strict locator&lt;/strong&gt;と呼ばれるハッシュを渡すことができ&lt;strong&gt;ます&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="e43c41a69419528edcb886ba063ee9da4da75a3d" translate="yes" xml:space="preserve">
          <source>By default CodeceptJS tries to guess the locator type. In order to specify the exact locator type you can pass an object called &lt;strong&gt;strict locator&lt;/strong&gt;.</source>
          <target state="translated">デフォルトでは、CodeceptJSはロケータータイプを推測しようとします。正確なロケータータイプを指定するために、strictlocatorと呼ばれるオブジェクトを渡すことができ&lt;strong&gt;ます&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="996d709757b86baaf6d446a55eb0e25598efbcc2" translate="yes" xml:space="preserve">
          <source>By default CodeceptJS uses &lt;a href=&quot;https://codecept.io/helpers/WebDriverIO/&quot;&gt;WebDriverIO&lt;/a&gt; helper and &lt;strong&gt;Selenium&lt;/strong&gt; to automate browser. Within web page you can locate elements, interact with them, and check that expected elements are present on a page. However, you can also choose &lt;a href=&quot;https://codecept.io/helpers/Nightmare&quot;&gt;Nightmare&lt;/a&gt; or &lt;a href=&quot;https://codecept.io/helpers/Protractor&quot;&gt;Protractor&lt;/a&gt; helpers, driven by corresponding libraries. No matter of helper and library you use for acceptance testing, CodeceptJS should execute same actions in similar manner.</source>
          <target state="translated">デフォルトでは、CodeceptJSは&lt;a href=&quot;https://codecept.io/helpers/WebDriverIO/&quot;&gt;WebDriverIO&lt;/a&gt;ヘルパーと&lt;strong&gt;Selenium&lt;/strong&gt;を使用してブラウザーを自動化します。Webページ内で要素を見つけ、それらを操作し、予想される要素がページに存在することを確認できます。ただし、対応するライブラリによって駆動される&lt;a href=&quot;https://codecept.io/helpers/Nightmare&quot;&gt;Nightmare&lt;/a&gt;または&lt;a href=&quot;https://codecept.io/helpers/Protractor&quot;&gt;Protractor&lt;/a&gt;ヘルパーを選択することもできます。受け入れテストに使用するヘルパーとライブラリーに関係なく、CodeceptJSは同じアクションを同じように実行する必要があります。</target>
        </trans-unit>
        <trans-unit id="629d6c64d2e3e55e36efdbc080c502bd30500c7d" translate="yes" xml:space="preserve">
          <source>By default files are saved to &lt;code&gt;output/downloads&lt;/code&gt;. This directory is cleaned on every &lt;code&gt;handleDownloads&lt;/code&gt; call, to ensure no old files are kept.</source>
          <target state="translated">デフォルトでは、ファイルは &lt;code&gt;output/downloads&lt;/code&gt; 保存されます。このディレクトリは、 &lt;code&gt;handleDownloads&lt;/code&gt; を呼び出すたびにクリーンアップされ、古いファイルが保持されないようにします。</target>
        </trans-unit>
        <trans-unit id="e3a60c2a08b5ab2213620c516151f358c04dc89d" translate="yes" xml:space="preserve">
          <source>By default it is set to &lt;code&gt;domcontentloaded&lt;/code&gt; which waits for &lt;code&gt;DOMContentLoaded&lt;/code&gt; event being fired. However, for Single Page Applications it's more useful to set this value to &lt;code&gt;networkidle0&lt;/code&gt; which waits for all network connections to be finished.</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;DOMContentLoaded&lt;/code&gt; イベントが &lt;code&gt;domcontentloaded&lt;/code&gt; を待つdomcontentloadedに設定されています。ただし、シングルページアプリケーションの場合、この値を &lt;code&gt;networkidle0&lt;/code&gt; に設定すると、すべてのネットワーク接続が完了するまで待機する方が便利です。</target>
        </trans-unit>
        <trans-unit id="3723e14ee44018e95e415270822cfcca2f756b1f" translate="yes" xml:space="preserve">
          <source>By default the tests are assigned one by one to the avaible workers this may lead to multiple execution of &lt;code&gt;BeforeSuite()&lt;/code&gt;. Use the option &lt;code&gt;--suites&lt;/code&gt; to assigne the suites one by one to the workers.</source>
          <target state="translated">デフォルトでは、テストは使用可能なワーカーに1つずつ割り当てられます。これにより、 &lt;code&gt;BeforeSuite()&lt;/code&gt; が複数回実行される可能性があります。オプション &lt;code&gt;--suites&lt;/code&gt; を使用して、スイートを1つずつワーカーに割り当てます。</target>
        </trans-unit>
        <trans-unit id="b565f9f021920720542ff5cefc884fd22f176bac" translate="yes" xml:space="preserve">
          <source>By default there is no timeout for tests, however you can change this value for a specific suite:</source>
          <target state="translated">デフォルトではテストのタイムアウトはありませんが、特定のスイートに対してこの値を変更することができます。</target>
        </trans-unit>
        <trans-unit id="3f72abf2c1b282644d3491542b00bd40d233dae7" translate="yes" xml:space="preserve">
          <source>By default to create a record ApiDataFactory will use endpoint and plural factory name:</source>
          <target state="translated">デフォルトではApiDataFactoryはエンドポイントと複数のファクトリ名を使用してレコードを作成します。</target>
        </trans-unit>
        <trans-unit id="d8a5e70b4f50e663ce57de80a35acb9b4eefb0e3" translate="yes" xml:space="preserve">
          <source>By default, allure reports are saved to &lt;code&gt;output&lt;/code&gt; directory. Launch Allure server and see the report like on a screenshot above:</source>
          <target state="translated">デフォルトでは、魅力レポートは &lt;code&gt;output&lt;/code&gt; ディレクトリに保存されます。Allureサーバーを起動し、上のスクリーンショットのようなレポートを表示します。</target>
        </trans-unit>
        <trans-unit id="68bbea4c02a679b19dc361100668a9792c2a083b" translate="yes" xml:space="preserve">
          <source>By default, they will wait for 1 second. This number can be changed in WebDriver configuration:</source>
          <target state="translated">デフォルトでは、1 秒間待ちます。この数値は WebDriver の設定で変更できます。</target>
        </trans-unit>
        <trans-unit id="46daea295982d8bda6b5e2b0c5b79547ad3b3d1f" translate="yes" xml:space="preserve">
          <source>By default, those parameters are set to connect to local Selenium Server but they should be changed if you want to run tests via &lt;a href=&quot;https://codecept.io/helpers/WebDriver#cloud-providers&quot;&gt;Cloud Providers&lt;/a&gt;. You may also need &lt;code&gt;user&lt;/code&gt; and &lt;code&gt;key&lt;/code&gt; parameters to authenticate on cloud service.</source>
          <target state="translated">デフォルトでは、これらのパラメーターはローカルのSelenium Serverに接続するように設定されていますが、&lt;a href=&quot;https://codecept.io/helpers/WebDriver#cloud-providers&quot;&gt;クラウドプロバイダーを&lt;/a&gt;介してテストを実行する場合は変更する必要があります。クラウドサービスで認証するために、 &lt;code&gt;user&lt;/code&gt; と &lt;code&gt;key&lt;/code&gt; パラメーターが必要になる場合もあります。</target>
        </trans-unit>
        <trans-unit id="3412ed8a3dbcefcbb95cc560e331f773d01f5fa7" translate="yes" xml:space="preserve">
          <source>By defining a factory you set the rules of how data is generated. This data will be saved on server via GraphQL queries and deleted in the end of a test.</source>
          <target state="translated">ファクトリーを定義することで、データがどのように生成されるかのルールを設定します。このデータは GraphQL クエリを介してサーバーに保存され、テストの最後に削除されます。</target>
        </trans-unit>
        <trans-unit id="3647de0dec81914980d6546302416031dccdaea4" translate="yes" xml:space="preserve">
          <source>By defining a factory you set the rules of how data is generated. This data will be saved on server via REST API and deleted in the end of a test.</source>
          <target state="translated">ファクトリーを定義することで、データがどのように生成されるかのルールを設定します。このデータはREST API経由でサーバーに保存され、テストの最後に削除されます。</target>
        </trans-unit>
        <trans-unit id="8ea70a5bc0bc0926e33c938b53d03c7938d10a79" translate="yes" xml:space="preserve">
          <source>By making tests to be a part of User Story, BDD allows non-technical personnel to write (or edit) Acceptance tests.</source>
          <target state="translated">テストをユーザーストーリーの一部にすることで、BDDでは技術者以外の人が受け入れテストを書く(または編集する)ことができます。</target>
        </trans-unit>
        <trans-unit id="7dc794315f4f02ac32c9400131a4be1d67b9c4e3" translate="yes" xml:space="preserve">
          <source>By now, you should have a test similar to the one shown in the beginning of this guide. We probably want to have multiple tests though, like testing the editing of todo items, checking todo items, etc.</source>
          <target state="translated">今までに、このガイドの最初に示されているようなテストがあるはずです。おそらく、Todo アイテムの編集をテストしたり、Todo アイテムをチェックしたりと、複数のテストが必要になるでしょう。</target>
        </trans-unit>
        <trans-unit id="57eee008e1da5606d280b6402899cfcf313463df" translate="yes" xml:space="preserve">
          <source>By passing value to &lt;code&gt;done()&lt;/code&gt; function you can return values. Additional arguments can be passed as well, while &lt;code&gt;done&lt;/code&gt; function is always last parameter in arguments list.</source>
          <target state="translated">値を &lt;code&gt;done()&lt;/code&gt; 関数に渡すことにより、値を返すことができます。追加の引数も渡すことができますが、 &lt;code&gt;done&lt;/code&gt; 関数は常に引数リストの最後のパラメーターです。</target>
        </trans-unit>
        <trans-unit id="89b6763b377e546fa26c21e8cfe5da267ff05ab2" translate="yes" xml:space="preserve">
          <source>By writing a test in similar manner we will have a test shown in the beginning of this guide. Probably we would like not to finish with one test, but have more, for testing editing of todo items, checking todo items, and more.</source>
          <target state="translated">同じようにテストを書くことで、このガイドの最初に示したようなテストができあがります。おそらく、1つのテストで終わらせずに、ToDo項目の編集やToDo項目のチェックなどのテストを行うために、もっと多くのテストを用意したいと思います。</target>
        </trans-unit>
        <trans-unit id="362a27e8b217c8af38ea1ff88c14f0280fac4303" translate="yes" xml:space="preserve">
          <source>By writing every feature in User Story format that is automatically executable as a test we ensure that: business, developers, QAs and managers are in the same boat.</source>
          <target state="translated">すべての機能をテストとして自動的に実行可能なユーザーストーリー形式で記述することで、ビジネス、開発者、QA、マネージャーが同じ船に乗っていることを保証します。</target>
        </trans-unit>
        <trans-unit id="194e13da720a1f025685e5d677eba8a1aff3860a" translate="yes" xml:space="preserve">
          <source>CSS</source>
          <target state="translated">CSS</target>
        </trans-unit>
        <trans-unit id="d3b4f917b7485e37712705b52ae124f856066a6c" translate="yes" xml:space="preserve">
          <source>CSS and XPath</source>
          <target state="translated">CSS と XPath</target>
        </trans-unit>
        <trans-unit id="3cbbdaf031ce41f8a45fc0c541575095a58e4366" translate="yes" xml:space="preserve">
          <source>CSS and XPath locators</source>
          <target state="translated">CSS と XPath のロケータ</target>
        </trans-unit>
        <trans-unit id="4aa73658560730bbc290d3e82bc4f8324f2ff5f5" translate="yes" xml:space="preserve">
          <source>CSS locators are not supported in native mobile apps, you need to switch to web context to use them.</source>
          <target state="translated">CSS ロケータはネイティブのモバイルアプリではサポートされていないので、使用するにはウェブコンテキストに切り替える必要があります。</target>
        </trans-unit>
        <trans-unit id="7ab23b11c3d3f492b734dd256d7e4e9169eebd21" translate="yes" xml:space="preserve">
          <source>Call Testcafe methods directly using the testcafe controller.</source>
          <target state="translated">testcafe コントローラを使用して、直接 Testcafe メソッドを呼び出します。</target>
        </trans-unit>
        <trans-unit id="e05deb34d9c7c2e43b6311ff70d6616ae1645a9a" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;mockRequest&lt;/code&gt; or &lt;code&gt;mockServer&lt;/code&gt; will start mocking, if it was not enabled yet.</source>
          <target state="translated">&lt;code&gt;mockRequest&lt;/code&gt; または &lt;code&gt;mockServer&lt;/code&gt; を呼び出すと、まだ有効になっていない場合はモックが開始されます。</target>
        </trans-unit>
        <trans-unit id="b38ec30cc15cf041851b0a1ad491e35251cce770" translate="yes" xml:space="preserve">
          <source>Can be a single cookie object or an array of cookies:</source>
          <target state="translated">単一のクッキーオブジェクトまたはクッキーの配列にすることができます。</target>
        </trans-unit>
        <trans-unit id="565591bf3246df594eb5e76550b8744f2ceb9366" translate="yes" xml:space="preserve">
          <source>Can return values. Don't forget to use &lt;code&gt;await&lt;/code&gt; to get them.</source>
          <target state="translated">値を返すことができます。それらを取得する &lt;code&gt;await&lt;/code&gt; を使用することを忘れないでください。</target>
        </trans-unit>
        <trans-unit id="cb9f0b0f67eb7a28ad672cd1f3a892cba4e986d6" translate="yes" xml:space="preserve">
          <source>Changes headers to default if reset headers option is true</source>
          <target state="translated">reset headers オプションが true の場合、ヘッダをデフォルトに変更します。</target>
        </trans-unit>
        <trans-unit id="26b279cf0cb60833e061c2e97120694b987319c7" translate="yes" xml:space="preserve">
          <source>Check current activity on an Android device.</source>
          <target state="translated">Android端末の現在のアクティビティを確認します。</target>
        </trans-unit>
        <trans-unit id="aef13a6acb5e1943f77465505867e03dd0bf8b8e" translate="yes" xml:space="preserve">
          <source>Check if an app is installed.</source>
          <target state="translated">アプリがインストールされているかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="1871b4b6a87e4071c8c3eb943fc2027e67194b16" translate="yes" xml:space="preserve">
          <source>Check if an app is not installed.</source>
          <target state="translated">アプリがインストールされていないか確認します。</target>
        </trans-unit>
        <trans-unit id="ffdd5407b61e16d5462456ecdd14520e6872147c" translate="yes" xml:space="preserve">
          <source>Check if locator is type of &quot;Shadow&quot;</source>
          <target state="translated">ロケータのタイプが &quot;Shadow &quot;かどうかを確認する</target>
        </trans-unit>
        <trans-unit id="8b4417ef4b1ebbec03ae6c70ef45963805381254" translate="yes" xml:space="preserve">
          <source>Check the device orientation</source>
          <target state="translated">デバイスの向きを確認する</target>
        </trans-unit>
        <trans-unit id="baf8b5e0086df1dab3dfe8417571ece89f8b5ecd" translate="yes" xml:space="preserve">
          <source>Check the newly created &lt;code&gt;codecept.conf.js&lt;/code&gt; configuration file. You may want to set some additional Appium settings via &lt;a href=&quot;https://appium.io/docs/en/writing-running-appium/caps/&quot;&gt;desiredCapabilities (opens new window)&lt;/a&gt;</source>
          <target state="translated">新しく作成された &lt;code&gt;codecept.conf.js&lt;/code&gt; 構成ファイルを確認してください。必要な機能を使用して、いくつかの追加のAppium設定を設定することをお勧めします&lt;a href=&quot;https://appium.io/docs/en/writing-running-appium/caps/&quot;&gt;（新しいウィンドウが開きます）&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="fa1bb05dd09577430c6fe8dbc6f78dbad285fff3" translate="yes" xml:space="preserve">
          <source>Check the newly created &lt;code&gt;codecept.json&lt;/code&gt; configuration file. You may want to set some additional Appium settings via &lt;a href=&quot;https://appium.io/docs/en/writing-running-appium/caps/&quot;&gt;desiredCapabilities&lt;/a&gt;</source>
          <target state="translated">新しく作成した &lt;code&gt;codecept.json&lt;/code&gt; 構成ファイルを確認します。あなたは、いくつかの追加を経てAppium設定を設定することもできます&lt;a href=&quot;https://appium.io/docs/en/writing-running-appium/caps/&quot;&gt;desiredCapabilities&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ffa8bd7737d0cb45adfb253a42251a2cdb13fc93" translate="yes" xml:space="preserve">
          <source>Check whether the device is locked.</source>
          <target state="translated">デバイスがロックされているかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="4ee7fc02e704798b82d5bb927b3b4b4f91ca56bc" translate="yes" xml:space="preserve">
          <source>Check whether the device is not locked.</source>
          <target state="translated">ロックされていないか確認してください。</target>
        </trans-unit>
        <trans-unit id="02657f46916f1c23a2a9a566ef38e192ef316976" translate="yes" xml:space="preserve">
          <source>Checks for existence of an element. An element can be visible or not. Use second parameter to narrow down the search.</source>
          <target state="translated">要素の存在をチェックします。要素は表示されていてもいなくても構いません。2番目のパラメータを使用して絞り込み検索を行います。</target>
        </trans-unit>
        <trans-unit id="e5d8c6923ac05faadc4ddfd4840add67394c4c74" translate="yes" xml:space="preserve">
          <source>Checks for visibility of an element. Use second parameter to narrow down the search.</source>
          <target state="translated">要素の可視性をチェックします。2番目のパラメータを使用して絞り込み検索を行います。</target>
        </trans-unit>
        <trans-unit id="b0105ebc9d99ab38af3796e69b1e5d44980d3735" translate="yes" xml:space="preserve">
          <source>Checks text not to be visible. Use second parameter to narrow down the search.</source>
          <target state="translated">テキストが表示されないようにチェックします。2番目のパラメータを使用して検索を絞り込みます。</target>
        </trans-unit>
        <trans-unit id="03c657d5905a9c3a2d6cb25f7c5fba9b334eb706" translate="yes" xml:space="preserve">
          <source>Checks text to be visible. Use second parameter to narrow down the search.</source>
          <target state="translated">テキストが表示されるかどうかをチェックします。2番目のパラメータを使用して検索を絞り込みます。</target>
        </trans-unit>
        <trans-unit id="e3f6bd924fbf0ef8257702b83e2e86e6cf1a3957" translate="yes" xml:space="preserve">
          <source>Checks that a given Element is present in the DOM Element is located by CSS or XPath.</source>
          <target state="translated">与えられた要素がDOM要素の中に存在するかどうかをCSSやXPathでチェックします。</target>
        </trans-unit>
        <trans-unit id="ee78339f227b7ffd609aa82a07a5391c7f17d8aa" translate="yes" xml:space="preserve">
          <source>Checks that a given Element is visible Element is located by CSS or XPath.</source>
          <target state="translated">指定された要素が表示されているかどうかをチェックします。 要素はCSSまたはXPathで配置されています。</target>
        </trans-unit>
        <trans-unit id="367df727ea1c92b338f8d18982e122c74ce5bb14" translate="yes" xml:space="preserve">
          <source>Checks that a page contains a visible text. Use context parameter to narrow down the search.</source>
          <target state="translated">ページに表示されているテキストが含まれているかどうかをチェックします。検索を絞り込むには、コンテキストパラメータを使用します。</target>
        </trans-unit>
        <trans-unit id="fb9f8423a3fa6d3ba1785744783b62faa5607643" translate="yes" xml:space="preserve">
          <source>Checks that all elements with given locator have given CSS properties.</source>
          <target state="translated">指定されたロケータを持つすべての要素が、指定されたCSSプロパティを持っているかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="47f4afefedcae7e3917482683d0efb30bd6f15a4" translate="yes" xml:space="preserve">
          <source>Checks that all elements with given locator have given attributes.</source>
          <target state="translated">指定されたロケータを持つすべての要素が、指定された属性を持つかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="ba17373e9f7e28e72d567143742c683bc7933ce1" translate="yes" xml:space="preserve">
          <source>Checks that contents of file found by &lt;code&gt;seeFile&lt;/code&gt; doesn't equal to text.</source>
          <target state="translated">&lt;code&gt;seeFile&lt;/code&gt; で見つかったファイルの内容がテキストと等しくないことを確認します。</target>
        </trans-unit>
        <trans-unit id="addb79ca2d7c05f0845a4f7aaf21d8d44f9067c8" translate="yes" xml:space="preserve">
          <source>Checks that contents of file found by &lt;code&gt;seeFile&lt;/code&gt; equal to text.</source>
          <target state="translated">&lt;code&gt;seeFile&lt;/code&gt; で見つかったファイルの内容がテキストと等しいことを確認します。</target>
        </trans-unit>
        <trans-unit id="67690dcb573ffa775bd151021c288a18f40e03cb" translate="yes" xml:space="preserve">
          <source>Checks that contents of the file found by &lt;code&gt;seeFile&lt;/code&gt; equal to contents of the file at &lt;code&gt;pathToReferenceFile&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;seeFile&lt;/code&gt; によって検出されたファイルの内容が &lt;code&gt;pathToReferenceFile&lt;/code&gt; のファイルの内容と等しいことを確認します。</target>
        </trans-unit>
        <trans-unit id="aaac892b2f5763ab83d224c141987df09fd9c5be" translate="yes" xml:space="preserve">
          <source>Checks that cookie with given name does not exist.</source>
          <target state="translated">指定された名前のクッキーが存在しないことを確認します。</target>
        </trans-unit>
        <trans-unit id="8a18e60b87ca0b877f301b333d6982f2cf508ce4" translate="yes" xml:space="preserve">
          <source>Checks that cookie with given name exists.</source>
          <target state="translated">指定された名前のクッキーが存在するかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="f9a872845c5a5f6388309d4c6b200c3c86b247ae" translate="yes" xml:space="preserve">
          <source>Checks that current url contains a provided fragment.</source>
          <target state="translated">現在の URL に指定されたフラグメントが含まれているかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="41e192262b9828fdcc1c3110c9acde35d83d4baf" translate="yes" xml:space="preserve">
          <source>Checks that current url does not contain a provided fragment.</source>
          <target state="translated">現在の URL に指定されたフラグメントが含まれていないかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="afc78fa647ae49f0e82ee4263faa47148dcde438" translate="yes" xml:space="preserve">
          <source>Checks that current url is equal to provided one. If a relative url provided, a configured url will be prepended to it. So both examples will work:</source>
          <target state="translated">現在のURLが提供されたものと同じであるかどうかをチェックします。相対的なURLが提供された場合、設定されたURLがそれに付加されます。したがって、どちらの例も動作します。</target>
        </trans-unit>
        <trans-unit id="b019ebaa9d1bd628eba0b5b263a13d217c013777" translate="yes" xml:space="preserve">
          <source>Checks that current url is not equal to provided one. If a relative url provided, a configured url will be prepended to it.</source>
          <target state="translated">現在のURLが提供されたものと一致していないことをチェックします。相対 URL が提供された場合は、設定された URL が前に付加されます。</target>
        </trans-unit>
        <trans-unit id="0e6d98a106d08400022f00d92965dab5a0eb8492" translate="yes" xml:space="preserve">
          <source>Checks that element is not visible. Use second parameter to narrow down the search.</source>
          <target state="translated">要素が表示されていないことをチェックします。2番目のパラメータを使用して絞り込み検索を行います。</target>
        </trans-unit>
        <trans-unit id="2c6543938fea8fe0835a036cf46e689fec9d0494" translate="yes" xml:space="preserve">
          <source>Checks that element not exists. Use second parameter to narrow down the search.</source>
          <target state="translated">要素が存在しないことをチェックします。2番目のパラメータを使用して絞り込み検索を行います。</target>
        </trans-unit>
        <trans-unit id="8a6ba0aa6f0a3aa7f40999d9f3c6a796f9b0749b" translate="yes" xml:space="preserve">
          <source>Checks that file exists</source>
          <target state="translated">ファイルが存在することを確認</target>
        </trans-unit>
        <trans-unit id="3379083ec528b0b99c538fc6abf7e986b5559c70" translate="yes" xml:space="preserve">
          <source>Checks that file found by &lt;code&gt;seeFile&lt;/code&gt; doesn't include text.</source>
          <target state="translated">&lt;code&gt;seeFile&lt;/code&gt; で見つかったファイルにテキストが含まれていないことを確認します。</target>
        </trans-unit>
        <trans-unit id="9505de3387710dcfaa50a7158bcee3c57ac86560" translate="yes" xml:space="preserve">
          <source>Checks that file found by &lt;code&gt;seeFile&lt;/code&gt; includes a text.</source>
          <target state="translated">&lt;code&gt;seeFile&lt;/code&gt; で見つかったファイルにテキストが含まれていることを確認します。</target>
        </trans-unit>
        <trans-unit id="ff9a031cd1ac31344d8a3d06d665e9de6cfce028" translate="yes" xml:space="preserve">
          <source>Checks that file with a name including given text exists in the current directory.</source>
          <target state="translated">指定したテキストを含む名前のファイルがカレントディレクトリに存在するかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="dbd2537af3062a19be0cddc69025f891eded4cb3" translate="yes" xml:space="preserve">
          <source>Checks that text is equal to provided one.</source>
          <target state="translated">テキストが提供されたものと等しいかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="f5baee1748a326c0ff46ccbbdbdfccc6435933da" translate="yes" xml:space="preserve">
          <source>Checks that the active JavaScript popup, as created by &lt;code&gt;window.alert|window.confirm|window.prompt&lt;/code&gt;, contains the given string.</source>
          <target state="translated">&lt;code&gt;window.alert|window.confirm|window.prompt&lt;/code&gt; によって作成されたアクティブなJavaScriptポップアップに、指定された文字列が含まれていることを確認します。</target>
        </trans-unit>
        <trans-unit id="6050ba10acd3c125e86e64b541c91af20b24d573" translate="yes" xml:space="preserve">
          <source>Checks that the active JavaScript popup, as created by &lt;code&gt;window.alert|window.confirm|window.prompt&lt;/code&gt;, contains the given string. Appium: support only web testing</source>
          <target state="translated">&lt;code&gt;window.alert|window.confirm|window.prompt&lt;/code&gt; によって作成されたアクティブなJavaScriptポップアップに、指定された文字列が含まれていることを確認します。Appium：Webテストのみをサポート</target>
        </trans-unit>
        <trans-unit id="236fc5fbe09554333c1b6a340fb812f519666f38" translate="yes" xml:space="preserve">
          <source>Checks that the current page contains the given string in its raw source code</source>
          <target state="translated">現在のページが、その生のソースコードに指定された文字列を含んでいるかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="1f30e7deaf8781d575fe2375033b005eba2016f2" translate="yes" xml:space="preserve">
          <source>Checks that the current page contains the given string in its raw source code.</source>
          <target state="translated">現在のページが、その生のソースコードに指定された文字列を含んでいるかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="ca4ab5e58ba9bd5787dd5793508304001f06d4bc" translate="yes" xml:space="preserve">
          <source>Checks that the current page does not contains the given string in its raw source code.</source>
          <target state="translated">現在のページが、その生のソースコードに指定された文字列を含んでいないかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="b0c11ec1c2f0a12a173273b5bf784dd26774861c" translate="yes" xml:space="preserve">
          <source>Checks that the given input field or textarea equals to given value. For fuzzy locators, fields are matched by label text, the &quot;name&quot; attribute, CSS, and XPath.</source>
          <target state="translated">指定された入力フィールドまたはテキストエリアが、指定された値と等しいかどうかをチェックします。ファジー・ロケータの場合、フィールドは、ラベル・テキスト、&quot;name &quot;属性、CSS、およびXPathによって照合されます。</target>
        </trans-unit>
        <trans-unit id="641b5789f85464ea0efe78c51e8176109434c593" translate="yes" xml:space="preserve">
          <source>Checks that title contains text.</source>
          <target state="translated">タイトルにテキストが含まれているかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="ae854f65ab8d4db1f57a83446b13951910da7b2b" translate="yes" xml:space="preserve">
          <source>Checks that title does not contain text.</source>
          <target state="translated">タイトルにテキストが含まれていないことをチェックします。</target>
        </trans-unit>
        <trans-unit id="e0c4b15943fd9cba190dd18f8e5987d4588b2b57" translate="yes" xml:space="preserve">
          <source>Checks that title is equal to provided one.</source>
          <target state="translated">タイトルが提供されたものと同じであることをチェックします。</target>
        </trans-unit>
        <trans-unit id="f0ffec44f336ac009bfe7329dcf271da32d4504c" translate="yes" xml:space="preserve">
          <source>Checks that value of input field or textare doesn't equal to given value Opposite to &lt;code&gt;seeInField&lt;/code&gt;.</source>
          <target state="translated">入力フィールドまたはtextareの値が指定された値と等しくないことを &lt;code&gt;seeInField&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="5372558ded3e67de0203cafc9477c3b01b53a01e" translate="yes" xml:space="preserve">
          <source>Checks that value of input field or textarea doesn't equal to given value Opposite to &lt;code&gt;seeInField&lt;/code&gt;.</source>
          <target state="translated">入力フィールドまたは &lt;code&gt;seeInField&lt;/code&gt; 値が、seeInFieldの反対側の指定された値と等しくないことを確認します。</target>
        </trans-unit>
        <trans-unit id="19afec7d342487be1f0edda62780670554c73f2e" translate="yes" xml:space="preserve">
          <source>Checks types - thanks to TypeScript support in CodeceptJS now allow to tests your tests. TypeScript can prevent some errors:</source>
          <target state="translated">タイプのチェック-CodeceptJS の TypeScript サポートのおかげで、テストができるようになりました。TypeScriptはいくつかのエラーを防ぐことができます。</target>
        </trans-unit>
        <trans-unit id="15dc18865567bcc98554a72a8036e1b64a8b85d5" translate="yes" xml:space="preserve">
          <source>Chinese</source>
          <target state="translated">Chinese</target>
        </trans-unit>
        <trans-unit id="251c2cf255a656dc79524134068285ab48c631c9" translate="yes" xml:space="preserve">
          <source>ChromeDriver or GeckoDriver - to allow browsers to run in automated mode.</source>
          <target state="translated">ChromeDriver または GeckoDriver-ブラウザが自動モードで動作するようにします。</target>
        </trans-unit>
        <trans-unit id="8699c8353f5ed1976e8d300913ed2a3c7ccd512f" translate="yes" xml:space="preserve">
          <source>ChromeDriver without Selenium</source>
          <target state="translated">Seleniumを使わないChromeDriver</target>
        </trans-unit>
        <trans-unit id="32166e83eed3818d45d2cbecbe2e6cf85528e265" translate="yes" xml:space="preserve">
          <source>Chromium</source>
          <target state="translated">Chromium</target>
        </trans-unit>
        <trans-unit id="5f6f8beacd6a51b14010c54e1a4e4886e39f0f8f" translate="yes" xml:space="preserve">
          <source>Clears a &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; or text &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element's value.</source>
          <target state="translated">&lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; またはtext &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 要素の値をクリアします。</target>
        </trans-unit>
        <trans-unit id="ec15d050bcc850b40bf08c1a5c2c424be0c24539" translate="yes" xml:space="preserve">
          <source>Clears a cookie by name, if none provided clears all cookies</source>
          <target state="translated">名前でクッキーをクリアし、何も指定されていない場合はすべてのクッキーをクリアします。</target>
        </trans-unit>
        <trans-unit id="931ad09669dd656612269c798322abb881893675" translate="yes" xml:space="preserve">
          <source>Clears a cookie by name, if none provided clears all cookies.</source>
          <target state="translated">名前でクッキーをクリアし、何も指定されていない場合はすべてのクッキーをクリアします。</target>
        </trans-unit>
        <trans-unit id="eb47275ae1f7f8a1bb73f1522752306672ae8165" translate="yes" xml:space="preserve">
          <source>Clears a text field. A field can be located by text, accessibility id, id.</source>
          <target state="translated">テキストフィールドをクリアします。フィールドは、テキスト、アクセシビリティID、IDで指定できます。</target>
        </trans-unit>
        <trans-unit id="53a98298fb455348c338555baa18286b2da270c8" translate="yes" xml:space="preserve">
          <source>Cli</source>
          <target state="translated">Cli</target>
        </trans-unit>
        <trans-unit id="09703d1ff01a59ef498218efeacdae1639095d1f" translate="yes" xml:space="preserve">
          <source>Clicking</source>
          <target state="translated">Clicking</target>
        </trans-unit>
        <trans-unit id="743bd0112b2927204544db4f502b4fb7af9ee237" translate="yes" xml:space="preserve">
          <source>Clicking the links is not what takes the most time during testing a web site. If your site consists only of links you can skip test automation. The most routine waste of time goes into the testing of forms. CodeceptJS provides several ways of doing that.</source>
          <target state="translated">リンクをクリックすることは、ウェブサイトのテスト中に最も時間がかかることではありません。もしあなたのサイトがリンクだけで構成されているならば、テストの自動化をスキップすることができます。最も時間を無駄にするのはフォームのテストです。CodeceptJSはこのようなテストを行うためのいくつかの方法を提供しています。</target>
        </trans-unit>
        <trans-unit id="125562553f46edafd8fa1b6e00188a4ab192095c" translate="yes" xml:space="preserve">
          <source>Clicking the links is not what takes the most time during testing a web site. If your site consists only of links you can skip test automation. The most waste of time goes into the testing of forms. CodeceptJS provides several ways of doing that.</source>
          <target state="translated">リンクをクリックすることは、ウェブサイトのテスト中に最も時間がかかることではありません。もしあなたのサイトがリンクだけで構成されているならば、テストの自動化をスキップすることができます。最も時間を無駄にするのはフォームのテストです。CodeceptJSはこのようなテストを行うためのいくつかの方法を提供しています。</target>
        </trans-unit>
        <trans-unit id="10dd4e269985c28faff5463b10c3a47be9158307" translate="yes" xml:space="preserve">
          <source>Clicks link and waits for navigation (deprecated)</source>
          <target state="translated">リンクをクリックしてナビゲーションを待つ (非推奨)</target>
        </trans-unit>
        <trans-unit id="7b8169cd2becc0e2831863dba8dd038d6ec775f1" translate="yes" xml:space="preserve">
          <source>Clicks on an element. Element can be located by its text or id or accessibility id</source>
          <target state="translated">要素をクリックします。要素は、そのテキスト、ID、またはアクセシビリティIDによって見つけることができます。</target>
        </trans-unit>
        <trans-unit id="2abe19c1a3fff37743b7702c1cb8bc78a3876c9c" translate="yes" xml:space="preserve">
          <source>Client Functions</source>
          <target state="translated">クライアント機能</target>
        </trans-unit>
        <trans-unit id="4be8c94b1faacd123ff388d02619354b500236f9" translate="yes" xml:space="preserve">
          <source>Close all tabs except for the current one.</source>
          <target state="translated">現在のタブ以外のすべてのタブを閉じます。</target>
        </trans-unit>
        <trans-unit id="5cf91e9e70d992f226814c8f1174291f86d0f3a8" translate="yes" xml:space="preserve">
          <source>Close all tabs except for the current one. Appium: support web test</source>
          <target state="translated">現在のタブ以外のタブをすべて閉じます。Appium:Webテストをサポート</target>
        </trans-unit>
        <trans-unit id="88b3b75ed2d4730635e1c54e3d28d8edf33cd632" translate="yes" xml:space="preserve">
          <source>Close current tab</source>
          <target state="translated">現在のタブを閉じる</target>
        </trans-unit>
        <trans-unit id="ca5f014b1ee13b25a50db2810e436b9596cf9d13" translate="yes" xml:space="preserve">
          <source>Close current tab and switches to previous.</source>
          <target state="translated">現在のタブを閉じて、前のタブに切り替えます。</target>
        </trans-unit>
        <trans-unit id="8952eb0e3e78146d7f425e47f8cbaa06e2670803" translate="yes" xml:space="preserve">
          <source>Close current tab.</source>
          <target state="translated">現在のタブを閉じます。</target>
        </trans-unit>
        <trans-unit id="aae677e8ec920c4fa5723adc33be6129437e918b" translate="yes" xml:space="preserve">
          <source>Close the given application.</source>
          <target state="translated">与えられたアプリケーションを閉じます。</target>
        </trans-unit>
        <trans-unit id="36f7897b2bae0040ed3ab3f6fe07b501caee499f" translate="yes" xml:space="preserve">
          <source>Cloud Providers</source>
          <target state="translated">クラウドプロバイダー</target>
        </trans-unit>
        <trans-unit id="87677b93a43a3c1f901ed64766e8df53b9373218" translate="yes" xml:space="preserve">
          <source>Cloud Providers (WebDriverIO)</source>
          <target state="translated">クラウドプロバイダ(WebDriverIO</target>
        </trans-unit>
        <trans-unit id="41b8c5c402ac86bd9e69f6bfb6277bb2c717a926" translate="yes" xml:space="preserve">
          <source>CodeceptJS</source>
          <target state="translated">CodeceptJS</target>
        </trans-unit>
        <trans-unit id="341a6ddc807f840d8252dfba14eb9aa839e64c38" translate="yes" xml:space="preserve">
          <source>CodeceptJS allows to create custom locator strategies and use them in tests. This way you can define your own handling of elements using specially prepared attributes of elements.</source>
          <target state="translated">CodeceptJSでは、カスタムロケーター戦略を作成し、テストで使用することができます。この方法では、特別に用意された要素の属性を使用して、独自の要素の取り扱いを定義することができます。</target>
        </trans-unit>
        <trans-unit id="61020fc16cde873112bd3b63af325f9cb0bf51c9" translate="yes" xml:space="preserve">
          <source>CodeceptJS allows to run several browser sessions inside a test. This can be useful for testing communication between users inside a chat or other systems. To open another browser use the &lt;code&gt;session()&lt;/code&gt; function as shown in the example:</source>
          <target state="translated">CodeceptJSを使用すると、テスト内で複数のブラウザセッションを実行できます。これは、チャットまたは他のシステム内のユーザー間の通信をテストするのに役立ちます。別のブラウザを開くには、例に示すように &lt;code&gt;session()&lt;/code&gt; 関数を使用します。</target>
        </trans-unit>
        <trans-unit id="4ea8f596f8f927969882bfcb168fceeec74351b2" translate="yes" xml:space="preserve">
          <source>CodeceptJS allows to run several browser sessions inside a test. This can be useful for testing communication between users inside a system, for instance in chats. To open another browser use &lt;code&gt;session()&lt;/code&gt; function as shown in example:</source>
          <target state="translated">CodeceptJSでは、テスト内で複数のブラウザーセッションを実行できます。これは、チャットなど、システム内のユーザー間の通信をテストするのに役立ちます。別のブラウザを開くには、例に示すように &lt;code&gt;session()&lt;/code&gt; 関数を使用します。</target>
        </trans-unit>
        <trans-unit id="12fe4ac070a85c631931cfa5d905409ff1117f8b" translate="yes" xml:space="preserve">
          <source>CodeceptJS allows to test mobile and hybrid apps in a similar manner web applications are tested. Such tests are executed using &lt;a href=&quot;http://appium.io&quot;&gt;Appium (opens new window)&lt;/a&gt; on emulated or physical devices. Also, Appium allows to test web application on mobile devices.</source>
          <target state="translated">CodeceptJSを使用すると、Webアプリケーションをテストするのと同様の方法でモバイルアプリとハイブリッドアプリをテストできます。このようなテストは、エミュレートされたデバイスまたは物理デバイスで&lt;a href=&quot;http://appium.io&quot;&gt;Appium&lt;/a&gt;を使用して実行されます（新しいウィンドウが開きます）。また、AppiumではモバイルデバイスでWebアプリケーションをテストできます。</target>
        </trans-unit>
        <trans-unit id="4066871e6a03c5401b58a891a44e0dc7022f7703" translate="yes" xml:space="preserve">
          <source>CodeceptJS allows to test mobile and hybrid apps in a similar manner web applications are tested. Such tests are executed using &lt;a href=&quot;http://appium.io&quot;&gt;Appium&lt;/a&gt; on emulated or physical devices. Also, Appium allows to test web application on mobile devices.</source>
          <target state="translated">CodeceptJSを使用すると、Webアプリケーションをテストするのと同じ方法でモバイルアプリとハイブリッドアプリをテストできます。このようなテストは、エミュレートされたデバイスまたは物理デバイスで&lt;a href=&quot;http://appium.io&quot;&gt;Appium&lt;/a&gt;を使用して実行されます。また、Appiumでは、モバイルデバイスでWebアプリケーションをテストできます。</target>
        </trans-unit>
        <trans-unit id="f39f021aa9420a09a9817dbbd208c1dd4125f0dd" translate="yes" xml:space="preserve">
          <source>CodeceptJS allows to use several browser windows inside a test. Sometimes we are testing the functionality of websites that we cannot control, such as a closed-source managed package, and there are popups that either remain open for configuring data on the screen, or close as a result of clicking a window. We can use these functions in order to gain more control over which page is being tested with Codecept at any given time. For example:</source>
          <target state="translated">CodeceptJSでは、テストの中で複数のブラウザウィンドウを使用することができます。クローズドソースのマネージドパッケージのように、自分たちではコントロールできないWebサイトの機能をテストする場合、画面上のデータを設定するために開いたままのポップアップがあったり、ウィンドウをクリックした結果閉じてしまったりすることがあります。これらの機能を利用することで、Codeceptでテストしているページをよりコントロールすることができます。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="54d542f67d8cff7f37673282e9a667e405b79b2d" translate="yes" xml:space="preserve">
          <source>CodeceptJS allows to write and debug tests on the fly while keeping your browser opened. By using interactive shell you can stop execution at any point and type in CodeceptJS commands.</source>
          <target state="translated">CodeceptJSでは、ブラウザを開いたままテストを書いたりデバッグしたりすることができます。インタラクティブシェルを使用することで、任意の時点で実行を停止し、CodeceptJSのコマンドを入力することができます。</target>
        </trans-unit>
        <trans-unit id="6ddc14a9eb74a334db9917f62c7c5a457929cb37" translate="yes" xml:space="preserve">
          <source>CodeceptJS allows to write and debug tests on the fly while keeping your browser opened. By using the interactive shell you can stop execution at any point and type in any CodeceptJS commands.</source>
          <target state="translated">CodeceptJSは、ブラウザを開いたままテストを書いたりデバッグしたりすることができます。インタラクティブシェルを使用することで、任意のポイントで実行を停止し、任意のCodeceptJSコマンドを入力することができます。</target>
        </trans-unit>
        <trans-unit id="bf8bbdc7954b211722483955c18f1acaf768a80a" translate="yes" xml:space="preserve">
          <source>CodeceptJS allows you to define and connect own helpers. If some functionality of Nightmare helper is missing you can easily create &lt;code&gt;ExtendedNightmare&lt;/code&gt; helper by running:</source>
          <target state="translated">CodeceptJSを使用すると、独自のヘルパーを定義して接続できます。Nightmareヘルパーの一部の機能が欠落している場合は、次のコマンドを実行することにより、 &lt;code&gt;ExtendedNightmare&lt;/code&gt; ヘルパーを簡単に作成できます。</target>
        </trans-unit>
        <trans-unit id="82e91aa3cf396b64d9a471f909a060c6e8c7b627" translate="yes" xml:space="preserve">
          <source>CodeceptJS allows you to implement custom actions like &lt;code&gt;I.createTodo&lt;/code&gt; or use &lt;strong&gt;PageObjects&lt;/strong&gt;. Learn how to improve your tests in &lt;a href=&quot;https://codecept.io/pageobjects/&quot;&gt;PageObjects (opens new window)&lt;/a&gt; guide.</source>
          <target state="translated">CodeceptJSを使用すると、 &lt;code&gt;I.createTodo&lt;/code&gt; などのカスタムアクションを実装したり、PageObjectsを使用したりでき&lt;strong&gt;ます&lt;/strong&gt;。&lt;a href=&quot;https://codecept.io/pageobjects/&quot;&gt;PageObjects（新しいウィンドウを開く）&lt;/a&gt;ガイドでテストを改善する方法を学びます。</target>
        </trans-unit>
        <trans-unit id="2ab776e3d946a89044159d997c55e2eac732209a" translate="yes" xml:space="preserve">
          <source>CodeceptJS allows you to implement custom actions like &lt;code&gt;I.createTodo&lt;/code&gt; or use &lt;strong&gt;PageObjects&lt;/strong&gt;. Learn how to improve your tests in &lt;a href=&quot;https://codecept.io/pageobjects/&quot;&gt;PageObjects&lt;/a&gt; guide.</source>
          <target state="translated">CodeceptJSを使用すると、 &lt;code&gt;I.createTodo&lt;/code&gt; などのカスタムアクションを実装したり、PageObjectsを使用したりでき&lt;strong&gt;ます&lt;/strong&gt;。&lt;a href=&quot;https://codecept.io/pageobjects/&quot;&gt;PageObjects&lt;/a&gt;ガイドでテストを改善する方法を学びます。</target>
        </trans-unit>
        <trans-unit id="0e530325d2ca24ad9023efc173ac144ee6957a9d" translate="yes" xml:space="preserve">
          <source>CodeceptJS also provides flexible options when you want to execute tests to Selenium servers through proxy. You will need to update the &lt;code&gt;helpers.WebDriver.capabilities.proxy&lt;/code&gt; key.</source>
          <target state="translated">CodeceptJSは、プロキシを介してSeleniumサーバーに対してテストを実行する場合の柔軟なオプションも提供します。 &lt;code&gt;helpers.WebDriver.capabilities.proxy&lt;/code&gt; キーを更新する必要があります。</target>
        </trans-unit>
        <trans-unit id="a53d5d9fb9555e694f12a1494a3bf174893c837d" translate="yes" xml:space="preserve">
          <source>CodeceptJS also provides flexible options when you want to execute tests to Selenium servers through proxy. You will need to update the &lt;code&gt;helpers.WebDriverIO.desiredCapabilities.proxy&lt;/code&gt; key.</source>
          <target state="translated">CodeceptJSは、プロキシを介してSeleniumサーバーに対してテストを実行する場合にも柔軟なオプションを提供します。 &lt;code&gt;helpers.WebDriverIO.desiredCapabilities.proxy&lt;/code&gt; キーを更新する必要があります。</target>
        </trans-unit>
        <trans-unit id="dc6492b895c9d819e08f45efe04dbb6e43b9fcdb" translate="yes" xml:space="preserve">
          <source>CodeceptJS bypasses execution commands to helpers. Depending on helper enabled your tests will be executed differently. If you need cross-browser support you should choose Selenium-based WebDriverIO or Protractor, if you are interested in speed - use Chrome-based Puppeteer, or Electron-based Nightmare. Those engines can run tests in window mode or headlessly and doesn't require additional tools to be installed.</source>
          <target state="translated">CodeceptJSはヘルパーへの実行コマンドをバイパスします。ヘルパーが有効になっているかどうかによって、テストの実行方法が異なります。クロスブラウザ対応が必要な場合はSeleniumベースのWebDriverIOやProtractorを、スピードを重視する場合はChromeベースのPuppeteerやElectronベースのNightmareを使うと良いでしょう。これらのエンジンはウィンドウモードでもヘッドレスでもテストを実行することができ、追加のツールをインストールする必要はありません。</target>
        </trans-unit>
        <trans-unit id="9595ec80a294a7b026301a36a784a3d81ac64a30" translate="yes" xml:space="preserve">
          <source>CodeceptJS bypasses execution commands to helpers. Depending on the helper enabled, your tests will be executed differently. If you need cross-browser support you should choose Selenium-based WebDriver or TestCaf&amp;eacute;. If you are interested in speed - you should use Chrome-based Puppeteer.</source>
          <target state="translated">CodeceptJSは、ヘルパーへの実行コマンドをバイパスします。有効になっているヘルパーに応じて、テストの実行方法は異なります。クロスブラウザのサポートが必要な場合は、SeleniumベースのWebDriverまたはTestCaf&amp;eacute;を選択する必要があります。速度に興味がある場合は、ChromeベースのPuppeteerを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="b44256a80c94947552cc1b73fa9b14e0dd871c34" translate="yes" xml:space="preserve">
          <source>CodeceptJS can be configured to run tests in parallel.</source>
          <target state="translated">CodeceptJSは、テストを並行して実行するように設定することができます。</target>
        </trans-unit>
        <trans-unit id="7f685b7fdcf2b687113f790efb593647709c8bdc" translate="yes" xml:space="preserve">
          <source>CodeceptJS can be imported and used in custom runners. To initialize Codecept you need to create Config and Container objects.</source>
          <target state="translated">CodeceptJSをインポートして、カスタムランナーで使用することができます。Codeceptを初期化するには、ConfigオブジェクトとContainerオブジェクトを作成する必要があります。</target>
        </trans-unit>
        <trans-unit id="3efaa9136b7150d73882a9338556273adfda5bde" translate="yes" xml:space="preserve">
          <source>CodeceptJS can be installed via NPM globally:</source>
          <target state="translated">CodeceptJSはNPM経由でグローバルにインストールできます。</target>
        </trans-unit>
        <trans-unit id="74c3858c45e4a109e3f409f064cdeec1073c1dea" translate="yes" xml:space="preserve">
          <source>CodeceptJS can guess an element's locator from context. For example, when clicking CodeceptJS will try to find a link or button by their text When typing into a field this field can be located by its name, placeholder.</source>
          <target state="translated">CodeceptJSはコンテキストから要素のロケータを推測することができます。例えば、クリックしたときに、そのテキストからリンクやボタンを見つけようとします。 フィールドに入力すると、そのフィールドの名前やプレースホルダで見つけることができます。</target>
        </trans-unit>
        <trans-unit id="49f3cbd7600efbdaca57e1097365648a0b5471c6" translate="yes" xml:space="preserve">
          <source>CodeceptJS config can be accessed from &lt;code&gt;require('codeceptjs').config.get()&lt;/code&gt;:</source>
          <target state="translated">CodeceptJS設定は &lt;code&gt;require('codeceptjs').config.get()&lt;/code&gt; からアクセスできます：</target>
        </trans-unit>
        <trans-unit id="4908de631f65d243fdd854b8e1a39730a16afba7" translate="yes" xml:space="preserve">
          <source>CodeceptJS configuration is set in &lt;code&gt;codecept.conf.js&lt;/code&gt; file.</source>
          <target state="translated">CodeceptJS構成は &lt;code&gt;codecept.conf.js&lt;/code&gt; ファイルで設定されます。</target>
        </trans-unit>
        <trans-unit id="3cafb6bc97612a799b60451ea57339a41bce2048" translate="yes" xml:space="preserve">
          <source>CodeceptJS configuration is set in &lt;code&gt;codecept.json&lt;/code&gt; file.</source>
          <target state="translated">CodeceptJS設定は &lt;code&gt;codecept.json&lt;/code&gt; ファイルで設定されます。</target>
        </trans-unit>
        <trans-unit id="639cce8f6f3d8406958ddfdb0df87b7208a882f7" translate="yes" xml:space="preserve">
          <source>CodeceptJS doesn't aim to embrace all possible functionality of WebDriver. At some points you may find that some actions do not exist, however it is easy to add one. You will need to use WebDriver API from &lt;a href=&quot;https://webdriver.io&quot;&gt;webdriver.io (opens new window)&lt;/a&gt; library.</source>
          <target state="translated">CodeceptJSは、WebDriverのすべての可能な機能を採用することを目的とはしていません。一部のアクションが存在しない場合がありますが、アクションを追加するのは簡単です。&lt;a href=&quot;https://webdriver.io&quot;&gt;webdriver.io（新しいウィンドウを開く）&lt;/a&gt;ライブラリのWebDriverAPIを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="8b36cd4084f4228afd1067b83a703e0e6126ce71" translate="yes" xml:space="preserve">
          <source>CodeceptJS has &lt;a href=&quot;https://codecept.io/plugins#selenoid&quot;&gt;Selenoid plugin&lt;/a&gt; which can automagically load browser container setup.</source>
          <target state="translated">CodeceptJSには、ブラウザコンテナのセットアップを自動的にロードできる&lt;a href=&quot;https://codecept.io/plugins#selenoid&quot;&gt;ソレノイドプラグインが&lt;/a&gt;あります。</target>
        </trans-unit>
        <trans-unit id="be3fce7b669484b1d3788304161c0cc86944e93e" translate="yes" xml:space="preserve">
          <source>CodeceptJS has a dependency injection container with Helpers and Support objects. They can be retrieved from the container:</source>
          <target state="translated">CodeceptJSはヘルパーとサポートオブジェクトを持つ依存性注入コンテナを持っています。それらはコンテナから取得することができます。</target>
        </trans-unit>
        <trans-unit id="b6fb3f37087f83585fdaa929df61e267ca8cd790" translate="yes" xml:space="preserve">
          <source>CodeceptJS has an interactive, graphical test runner. We call it CodeceptUI. It works in your browser and helps you to manage your tests.</source>
          <target state="translated">CodeceptJSには、インタラクティブでグラフィカルなテストランナーがあります。私たちはこれを CodeceptUI と呼んでいます。これはブラウザ上で動作し、テストを管理するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="f963559f178e0aba175c22b1c47b043814fa5235" translate="yes" xml:space="preserve">
          <source>CodeceptJS has two engines for running tests in parallel:</source>
          <target state="translated">CodeceptJSには、テストを並行して実行するための2つのエンジンがあります。</target>
        </trans-unit>
        <trans-unit id="31f2db5d2c12132b04a3264229173758d4831faf" translate="yes" xml:space="preserve">
          <source>CodeceptJS implements retries the same way &lt;a href=&quot;https://mochajs.org#retry-tests&quot;&gt;Mocha do&lt;/a&gt;; You can set number of a retries for a feature:</source>
          <target state="translated">CodeceptJSは&lt;a href=&quot;https://mochajs.org#retry-tests&quot;&gt;Mocha&lt;/a&gt;と同じ方法で再試行を実装します。機能の再試行回数を設定できます。</target>
        </trans-unit>
        <trans-unit id="71f6c56e8e8b0318923686746f547ceb2b2bbd22" translate="yes" xml:space="preserve">
          <source>CodeceptJS implements retries the same way &lt;a href=&quot;https://mochajs.org#retry-tests&quot;&gt;Mocha does (opens new window)&lt;/a&gt;; You can set the number of a retries for a feature:</source>
          <target state="translated">CodeceptJSは、&lt;a href=&quot;https://mochajs.org#retry-tests&quot;&gt;Mocha&lt;/a&gt;と同じ方法で再試行を実装します（新しいウィンドウを開きます）。機能の再試行回数を設定できます。</target>
        </trans-unit>
        <trans-unit id="a03faddfc5ef02683bccf699ac041bad4a2e567d" translate="yes" xml:space="preserve">
          <source>CodeceptJS includes &lt;a href=&quot;https://codecept.io/plugins/&quot;&gt;built-in plugins&lt;/a&gt; which extend basic functionality and can be turned on and off on purpose. Taking them as &lt;a href=&quot;https://github.com/Codeception/CodeceptJS/tree/master/lib/plugin&quot;&gt;examples&lt;/a&gt; you can develop your custom plugins.</source>
          <target state="translated">CodeceptJSには&lt;a href=&quot;https://codecept.io/plugins/&quot;&gt;、&lt;/a&gt;基本的な機能を拡張する組み込みプラグインが含まれており、意図的にオンとオフを切り替えることができます。それらを&lt;a href=&quot;https://github.com/Codeception/CodeceptJS/tree/master/lib/plugin&quot;&gt;例に&lt;/a&gt;取ると、カスタムプラグインを開発できます。</target>
        </trans-unit>
        <trans-unit id="0801859e1167fd8e42347dd0f185f14b71b9902a" translate="yes" xml:space="preserve">
          <source>CodeceptJS is a modern end to end testing framework with a special BDD-style syntax. The test is written as a linear scenario of user's action on a site.</source>
          <target state="translated">CodeceptJSは、特殊なBDDスタイルの構文を採用した現代的なエンドツーエンドのテストフレームワークです。テストは、サイト上でのユーザーの行動のリニアなシナリオとして書かれています。</target>
        </trans-unit>
        <trans-unit id="cd23ea59e40b9e3b5f0907438cf163e241c85075" translate="yes" xml:space="preserve">
          <source>CodeceptJS is a modern end to end testing framework with a special BDD-style syntax. The tests are written as a linear scenario of the user's action on a site.</source>
          <target state="translated">CodeceptJSは、特殊なBDDスタイルの構文を採用した現代的なエンド・ツー・エンドのテストフレームワークです。テストは、サイト上でのユーザーの行動のリニアなシナリオとして書かれています。</target>
        </trans-unit>
        <trans-unit id="d8a6e7c84bcd50629a18f34e2100363d52d62d9a" translate="yes" xml:space="preserve">
          <source>CodeceptJS is a rich testing frameworks which also provides features missing in original TestCafe:</source>
          <target state="translated">CodeceptJSはリッチなテストフレームワークで、オリジナルのTestCafeに欠けている機能も提供しています。</target>
        </trans-unit>
        <trans-unit id="8b2a4c324111c4c20fb2555a00a12be3e32a7319" translate="yes" xml:space="preserve">
          <source>CodeceptJS is an acceptance testing framework. In diversified world of JavaScript testing libraries it aims to create a unified high level API for end-to-end testing, powered by different backends. CodeceptJS allows you to write a test and switch in config execution drivers: will it be &lt;em&gt;wedriverio&lt;/em&gt;, &lt;em&gt;puppeteer&lt;/em&gt;, or &lt;em&gt;protractor&lt;/em&gt; depends on you. This way you aren't be bound to implementation, and your acceptance tests will work no matter of framework running them.</source>
          <target state="translated">CodeceptJSは、受け入れテストフレームワークです。JavaScriptテストライブラリの多様化した世界では、さまざまなバックエンドを利用して、エンドツーエンドのテスト用に統合された高レベルAPIを作成することを目指しています。CodeceptJSを使用すると、設定の実行ドライバでテストし、スイッチを書くことができます：それはなります&lt;em&gt;wedriverio&lt;/em&gt;、&lt;em&gt;人形遣い&lt;/em&gt;、または&lt;em&gt;分度器は&lt;/em&gt;あなた次第。このようにして、実装に拘束されることなく、受け入れテストは、それらを実行するフレームワークに関係なく機能します。</target>
        </trans-unit>
        <trans-unit id="7468ccd150d3b5630d3f81993da707763b2d0947" translate="yes" xml:space="preserve">
          <source>CodeceptJS is an acceptance testing framework. In the diversified world of JavaScript testing libraries, it aims to create a unified high-level API for end-to-end testing, powered by a variety of backends. CodeceptJS allows you to write a test and switch the execution driver via config: whether it's &lt;em&gt;wedriverio&lt;/em&gt;, &lt;em&gt;puppeteer&lt;/em&gt;, or &lt;em&gt;protractor&lt;/em&gt; depends on you. This way you aren't bound to a specific implementation, and your acceptance tests will work no matter what framework is running them.</source>
          <target state="translated">CodeceptJSは、受け入れテストフレームワークです。JavaScriptテストライブラリの多様化した世界では、さまざまなバックエンドを利用して、エンドツーエンドのテスト用に統合された高レベルのAPIを作成することを目的としています。CodeceptJSはあなたがテストを書いて、設定を経由して実行ドライバを切り替えることができます：それはありますか&lt;em&gt;wedriverio&lt;/em&gt;、&lt;em&gt;人形遣い&lt;/em&gt;、または&lt;em&gt;分度器は&lt;/em&gt;あなた次第。このように、特定の実装に縛られることはなく、どのフレームワークがそれらを実行していても、受け入れテストは機能します。</target>
        </trans-unit>
        <trans-unit id="efd4f789830badbcd455c62a338ba9335e7a1b5c" translate="yes" xml:space="preserve">
          <source>CodeceptJS packed into container with the Nightmare, Protractor, Puppeteer, and WebDriverIO drivers.</source>
          <target state="translated">CodeceptJSはNightmare、Protractor、Puppeteer、WebDriverIOのドライバをコンテナに詰め込んでいます。</target>
        </trans-unit>
        <trans-unit id="df5b5d1d8125461cbd541e6c0b913541e8802978" translate="yes" xml:space="preserve">
          <source>CodeceptJS provides API to run custom code before and after the test and inject custom listeners into the event system.</source>
          <target state="translated">CodeceptJSは、テスト前後にカスタムコードを実行し、イベントシステムにカスタムリスナーを注入するためのAPIを提供しています。</target>
        </trans-unit>
        <trans-unit id="0852cf9c29113a39ea4427ad8709976f7b8b3dd2" translate="yes" xml:space="preserve">
          <source>CodeceptJS provides a debug mode in which additional information is printed. It can be turned on with &lt;code&gt;--debug&lt;/code&gt; flag.</source>
          <target state="translated">CodeceptJSは、追加情報が出力されるデバッグモードを提供します。 &lt;code&gt;--debug&lt;/code&gt; フラグでオンにできます。</target>
        </trans-unit>
        <trans-unit id="44c53c8875096a9fc84dd9e8a90feef38c253175" translate="yes" xml:space="preserve">
          <source>CodeceptJS provides a flexible syntax to specify an element to click.</source>
          <target state="translated">CodeceptJSでは、クリックする要素を指定する柔軟な構文を提供しています。</target>
        </trans-unit>
        <trans-unit id="ea9f14b3c43f7515f3c88cab408c5eff0fae2ee9" translate="yes" xml:space="preserve">
          <source>CodeceptJS provides a fluent builder to compose custom locators in JavaScript. Use &lt;code&gt;locate&lt;/code&gt; function to start.</source>
          <target state="translated">CodeceptJSは、JavaScriptでカスタムロケーターを構成するための流暢なビルダーを提供します。 &lt;code&gt;locate&lt;/code&gt; 機能を使用して開始します。</target>
        </trans-unit>
        <trans-unit id="00dac64e74839ed5fac88c4754040da8cf9d5896" translate="yes" xml:space="preserve">
          <source>CodeceptJS provides a module with &lt;a href=&quot;https://github.com/Codeception/CodeceptJS/blob/master/lib/event.js&quot;&gt;event dispatcher and set of predefined events&lt;/a&gt;.</source>
          <target state="translated">CodeceptJSは、モジュールに&lt;a href=&quot;https://github.com/Codeception/CodeceptJS/blob/master/lib/event.js&quot;&gt;イベントディスパッチャーと事前定義されたイベントのセットを&lt;/a&gt;提供します。</target>
        </trans-unit>
        <trans-unit id="7560b6a3b653903ee4caa5a3faae2b0502764b53" translate="yes" xml:space="preserve">
          <source>CodeceptJS provides an API which can be loaded via &lt;code&gt;require('codeceptjs')&lt;/code&gt; when CodeceptJS is installed locally. These internal objects are available:</source>
          <target state="translated">CodeceptJSは、CodeceptJSがローカルにインストールされているときに &lt;code&gt;require('codeceptjs')&lt;/code&gt; を介してロードできるAPIを提供します。これらの内部オブジェクトが利用可能です：</target>
        </trans-unit>
        <trans-unit id="ea5ef37d66a3f469f78a1b47ee65da211830a596" translate="yes" xml:space="preserve">
          <source>CodeceptJS provides flexible strategies for locating elements:</source>
          <target state="translated">CodeceptJSは、要素の位置を特定するための柔軟な戦略を提供します。</target>
        </trans-unit>
        <trans-unit id="e7b2f819389d3eaf4c91b11a37d7f28f19c27b37" translate="yes" xml:space="preserve">
          <source>CodeceptJS provides high-level API on top of WebDriver protocol. While most standard implementations focus on dealing with WebElements on page, CodeceptJS is about user scenarios and interactions. That's why you don't have a direct access to web elements inside a test, but it is proved that in majority of cases you don't need it. Tests written from user's perspective are simpler to write, understand, log and debug.</source>
          <target state="translated">CodeceptJSはWebDriverプロトコルの上に高レベルのAPIを提供します。標準的な実装ではページ上のWebElementsを扱うことに重点が置かれていますが、CodeceptJSはユーザーのシナリオやインタラクションを扱うことに重点が置かれています。そのため、テスト中にWeb要素に直接アクセスする必要はありませんが、大抵の場合は必要ないことが証明されています。ユーザーの視点で書かれたテストは、記述、理解、ログ、デバッグがより簡単になります。</target>
        </trans-unit>
        <trans-unit id="e97e2127a2e46e82a8836366ee8b8a57d5669f78" translate="yes" xml:space="preserve">
          <source>CodeceptJS runner is available inside container as &lt;code&gt;codeceptjs&lt;/code&gt;.</source>
          <target state="translated">CodeceptJSランナーは、コンテナー内で &lt;code&gt;codeceptjs&lt;/code&gt; として使用できます。</target>
        </trans-unit>
        <trans-unit id="b95c74019643a3491e2e8d96cd2dd168b217fabd" translate="yes" xml:space="preserve">
          <source>CodeceptJS should be installed with webdriverio support:</source>
          <target state="translated">CodeceptJSはwebdriverioのサポートを受けてインストールする必要があります。</target>
        </trans-unit>
        <trans-unit id="8f38d5f0bd3b246365e3109c0ba09a34b6f01179" translate="yes" xml:space="preserve">
          <source>CodeceptJS supports &lt;a href=&quot;https://github.com/codecept-js/CodeceptJS/tree/master/typings&quot;&gt;type declaration (opens new window)&lt;/a&gt; for &lt;a href=&quot;https://www.typescriptlang.org/&quot;&gt;TypeScript (opens new window)&lt;/a&gt;. It means that you can write your tests in TS. Also, all of your custom steps can be written in TS</source>
          <target state="translated">CodeceptJSは、&lt;a href=&quot;https://www.typescriptlang.org/&quot;&gt;TypeScript（新しいウィンドウを開く&lt;/a&gt;&lt;a href=&quot;https://github.com/codecept-js/CodeceptJS/tree/master/typings&quot;&gt;）の型宣言（新しいウィンドウを開く）&lt;/a&gt;をサポートしています。これは、TSでテストを記述できることを意味します。また、すべてのカスタムステップはTSで記述できます</target>
        </trans-unit>
        <trans-unit id="078c8a6b48a2b2210f51cc17c665b298cf761db9" translate="yes" xml:space="preserve">
          <source>CodeceptJS supports various engines for running browser tests. By default we recommend using &lt;strong&gt;Playwright&lt;/strong&gt; which is cross-browser and performant solution.</source>
          <target state="translated">CodeceptJSは、ブラウザテストを実行するためのさまざまなエンジンをサポートしています。デフォルトでは、クロスブラウザでパフォーマンスの高いソリューションである&lt;strong&gt;Playwright&lt;/strong&gt;を使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="a188e3ee1a757e6f7dc2dd1e743f4062eaef8f9f" translate="yes" xml:space="preserve">
          <source>CodeceptJS test should be created with &lt;code&gt;gt&lt;/code&gt; command:</source>
          <target state="translated">CodeceptJSテストは &lt;code&gt;gt&lt;/code&gt; コマンドで作成する必要があります：</target>
        </trans-unit>
        <trans-unit id="e7ee0cc24ccdc16a9ca894c6e1b7fe81470fb409" translate="yes" xml:space="preserve">
          <source>CodeceptJS through helpers provides user friendly API to interact with a webpage. In this section we described using WebDriverIO helper which allows to control browser through Selenium WebDriver.</source>
          <target state="translated">CodeceptJSはヘルパーを使ってWebページを操作するためのユーザーフレンドリーなAPIを提供しています。このセクションでは、Selenium WebDriverを使ってブラウザを制御するWebDriverIOヘルパーの使い方を説明します。</target>
        </trans-unit>
        <trans-unit id="81a31ff3ab09bb8c343a87ccb3b32701264f1a6a" translate="yes" xml:space="preserve">
          <source>CodeceptJS uses Puppeteer to improve end to end testing experience. No need to learn the syntax of a new tool, all drivers in CodeceptJS share the same API.</source>
          <target state="translated">CodeceptJSはPuppeteerを使用してエンドツーエンドのテスト体験を向上させています。新しいツールの構文を学ぶ必要はなく、CodeceptJSのすべてのドライバは同じAPIを共有しています。</target>
        </trans-unit>
        <trans-unit id="d094cd531f304a4ea9c8200bdae28740a52aa1ff" translate="yes" xml:space="preserve">
          <source>CodeceptUI</source>
          <target state="translated">CodeceptUI</target>
        </trans-unit>
        <trans-unit id="2ac528aeab0ddd0b5276c3c6a5f7b367af6239e8" translate="yes" xml:space="preserve">
          <source>CodeceptUI can be started in two modes:</source>
          <target state="translated">CodeceptUIは2つのモードで起動することができます。</target>
        </trans-unit>
        <trans-unit id="9edc2c44631d96fc658334f3088e6c6d90a57491" translate="yes" xml:space="preserve">
          <source>CodeceptUI can be used for</source>
          <target state="translated">CodeceptUIは</target>
        </trans-unit>
        <trans-unit id="b41c166a9edfece8490aaf9b378cff7f4d44b35c" translate="yes" xml:space="preserve">
          <source>CodeceptUI is already installed with &lt;code&gt;create-codeceptjs&lt;/code&gt; command but you can install it manually via:</source>
          <target state="translated">CodeceptUIは &lt;code&gt;create-codeceptjs&lt;/code&gt; コマンドですでにインストールされていますが、次の方法で手動でインストールできます。</target>
        </trans-unit>
        <trans-unit id="237791adb3cd5613ae9dbbe12b234ef111d09640" translate="yes" xml:space="preserve">
          <source>Codeceptjs Docker</source>
          <target state="translated">コードセプトjs Docker</target>
        </trans-unit>
        <trans-unit id="84035fc962b4dda5cb5511c67d99c2e85ae6d1f1" translate="yes" xml:space="preserve">
          <source>Combining record/replay modes allows testing websites with large datasets.</source>
          <target state="translated">記録/再生モードを組み合わせることで、大規模なデータセットを持つウェブサイトをテストすることができます。</target>
        </trans-unit>
        <trans-unit id="45e5f3f72e961cb70134ba35f7a27a9620e515f7" translate="yes" xml:space="preserve">
          <source>Commands</source>
          <target state="translated">Commands</target>
        </trans-unit>
        <trans-unit id="d95ebc10a700eefefc4d8b94306157c80c4627b0" translate="yes" xml:space="preserve">
          <source>Commands affected (by default):</source>
          <target state="translated">影響を受けるコマンド (デフォルト)。</target>
        </trans-unit>
        <trans-unit id="fce06e20e5f7f74aacccab40b59b75a56c8f7305" translate="yes" xml:space="preserve">
          <source>Comments</source>
          <target state="translated">Comments</target>
        </trans-unit>
        <trans-unit id="26ff498fe5269e765d3aa2d6c020cc471cd3e942" translate="yes" xml:space="preserve">
          <source>Common Configuration Patterns</source>
          <target state="translated">一般的な設定パターン</target>
        </trans-unit>
        <trans-unit id="b61a98a8d2111ecc5ef96c8a5492e8ade9cc0b26" translate="yes" xml:space="preserve">
          <source>Common preparation steps like opening a web page or logging in a user, can be placed in the &lt;code&gt;Before&lt;/code&gt; or &lt;code&gt;Background&lt;/code&gt; hooks:</source>
          <target state="translated">Webページを開く、ユーザーにログインするなどの一般的な準備手順は、 &lt;code&gt;Before&lt;/code&gt; フックまたは &lt;code&gt;Background&lt;/code&gt; フックに配置できます。</target>
        </trans-unit>
        <trans-unit id="784f2fe9e706ab9351a8b624644514675b305fb6" translate="yes" xml:space="preserve">
          <source>Common preparation steps like opening a web page, logging in a user, can be placed in &lt;code&gt;Before&lt;/code&gt; or &lt;code&gt;Background&lt;/code&gt; hook:</source>
          <target state="translated">Webページを開く、ユーザーをログインするなどの一般的な準備手順は、 &lt;code&gt;Before&lt;/code&gt; または &lt;code&gt;Background&lt;/code&gt; フックに配置できます。</target>
        </trans-unit>
        <trans-unit id="f06967af7eeb8004a985a56ea0c359600fa56903" translate="yes" xml:space="preserve">
          <source>Community Helpers</source>
          <target state="translated">コミュニティヘルパー</target>
        </trans-unit>
        <trans-unit id="5b04f2bab690caf16dd8be1fd04dc3ba4fee51ee" translate="yes" xml:space="preserve">
          <source>Compare a test written using Nightmare API:</source>
          <target state="translated">Nightmare APIを使って書かれたテストを比較します。</target>
        </trans-unit>
        <trans-unit id="14db6e0a871cd6d40cb8db9c5d0abe8f63721706" translate="yes" xml:space="preserve">
          <source>Compared to the API proposed by CodeceptJS, the Protractor code looks more complicated. Even more important, it's harder to read and follow the logic of the Protractor test. Readability is a crucial part of acceptance testing. Tests should be easy to modify when there are changes in the specification or design. If the test is written in Protractor, it would likely require someone familiar with Protractor to make the change, whereas CodeceptJS allows anyone to understand and modify the test. CodeceptJS provides scenario-driven approach, so a test is just a step-by-step representation of real user actions. This means you can easily read and understand the steps in a test scenario, and edit the steps when the test needs to be changed.</source>
          <target state="translated">CodeceptJSが提案しているAPIと比較すると、Protractorのコードはより複雑に見えます。さらに重要なことは、Protractorテストのロジックを読み取って、それに従うことが難しくなるということです。可読性は受け入れテストの重要な部分です。テストは、仕様や設計に変更があったときに修正しやすいものでなければなりません。テストがProtractorで書かれている場合、変更を加えるにはProtractorに精通している人が必要になりますが、CodeceptJSでは誰でもテストを理解して変更することができます。CodeceptJSはシナリオ駆動型のアプローチを提供しているので、テストは実際のユーザーのアクションをステップバイステップで表現したものに過ぎません。つまり、テストシナリオのステップを簡単に読み取って理解し、テストを変更する必要があるときにステップを編集することができます。</target>
        </trans-unit>
        <trans-unit id="6f6372d089ab011e45ad8b22335dc209ef36687c" translate="yes" xml:space="preserve">
          <source>Comparing to Appium, Detox runs faster and more stable but requires an additional setup for build.</source>
          <target state="translated">Appiumと比較すると、Detoxはより速く、より安定して動作しますが、ビルドには追加のセットアップが必要です。</target>
        </trans-unit>
        <trans-unit id="1c22e213d882b6ab78c74b84d43a9c4b938fd342" translate="yes" xml:space="preserve">
          <source>Comparing to the API proposed by CodeceptJS, this code looks a bit more complicated. But what the more important, it's really really hard to read and follow its logic. Readability is the most crucial part in acceptance testing. You should easily change tests when changes specification or design. Probably, only a person who writes Protractor tests in your company, could do those changes, while CodeceptJS allows anyone to work with tests. Contrary, CodeceptJS provides CodeceptJS provides scenario-driven approach, so test is just a step-by-step representation of real user actions. This way you can easily read, and follow test scenario, and edit it when you need it to be changed.</source>
          <target state="translated">CodeceptJSが提案しているAPIと比較すると、このコードは少し複雑に見えます。しかし、それ以上に重要なのは、そのロジックを読み解くのが本当に難しいということです。受入テストで最も重要なのは可読性です。仕様や設計を変更したときには、テストを簡単に変更しなければなりません。おそらく、あなたの会社でProtractorのテストを書いている人だけが変更を行うことができますが、CodeceptJSは誰でもテストを扱うことができます。これに対して、CodeceptJSはシナリオ駆動型のアプローチを提供しているので、テストは実際のユーザーのアクションをステップバイステップで表現しているだけです。このようにして、テストのシナリオを簡単に読み、フォローし、変更が必要なときに編集することができます。</target>
        </trans-unit>
        <trans-unit id="9217329601af44b7981cb09034f6e4b7c065b07b" translate="yes" xml:space="preserve">
          <source>Concept is similar to page objects but Data access objects can act like factories or data providers for tests</source>
          <target state="translated">概念はページオブジェクトに似ていますが、データアクセスオブジェクトはテストのためのファクトリやデータプロバイダのように振る舞うことができます。</target>
        </trans-unit>
        <trans-unit id="bfb318997a268bf1ad02002d89eab47e3c4b7488" translate="yes" xml:space="preserve">
          <source>Conditional Actions</source>
          <target state="translated">条件付き行動</target>
        </trans-unit>
        <trans-unit id="8a9ba197d8c81297f1db0d7239e5ae45ddc63718" translate="yes" xml:space="preserve">
          <source>Conditional Retries</source>
          <target state="translated">条件付きリトライ</target>
        </trans-unit>
        <trans-unit id="8851142da56fd885ce668a165b33fee7003e858d" translate="yes" xml:space="preserve">
          <source>Config</source>
          <target state="translated">Config</target>
        </trans-unit>
        <trans-unit id="cc853f31414fc473eeab640dff7a9e1b89066037" translate="yes" xml:space="preserve">
          <source>Config can also be set by a function, in this case you can get a test object and specify config values based on it. This is very useful when running tests against cloud providers, like BrowserStack.</source>
          <target state="translated">Configは関数で設定することもできますが、この場合はテストオブジェクトを取得し、それに基づいてconfigの値を指定します。これは、BrowserStackのようなクラウドプロバイダに対してテストを実行する際に非常に便利です。</target>
        </trans-unit>
        <trans-unit id="5dc388598988b7ab05ba72e9cc709546ccb7bef9" translate="yes" xml:space="preserve">
          <source>Config can also be set by a function, in this case you can get a test object and specify config values based on it. This is very useful when running tests against cloud providers, like BrowserStack. This function can also be asynchronous.</source>
          <target state="translated">Configは関数で設定することもできますが、この場合はテストオブジェクトを取得し、それに基づいてconfigの値を指定します。これは、BrowserStackのようなクラウドプロバイダに対してテストを実行する場合に非常に便利です。また、この関数は非同期に設定することもできます。</target>
        </trans-unit>
        <trans-unit id="534edde9e41e41f9db7456efa2b6bbff562523b1" translate="yes" xml:space="preserve">
          <source>Config changes can be applied to all tests in suite:</source>
          <target state="translated">設定の変更は、スイート内のすべてのテストに適用することができます。</target>
        </trans-unit>
        <trans-unit id="53ee24612362a15e2b9baaa23fc0b2c31be8ba83" translate="yes" xml:space="preserve">
          <source>Config for Headless Chrome</source>
          <target state="translated">ヘッドレスクロームの設定</target>
        </trans-unit>
        <trans-unit id="5260c3ad34715ce57cc926017cad21d19e1131b2" translate="yes" xml:space="preserve">
          <source>Config for Non-Angular application:</source>
          <target state="translated">非Angularアプリケーション用の設定。</target>
        </trans-unit>
        <trans-unit id="df2e06a8caeaeb9af9657c2d3b0c66541f43fd14" translate="yes" xml:space="preserve">
          <source>Config values will be stored inside helper in &lt;code&gt;this.config&lt;/code&gt;. To get &lt;code&gt;defaultHost&lt;/code&gt; value you can use</source>
          <target state="translated">設定値は &lt;code&gt;this.config&lt;/code&gt; のヘルパー内に保存されます。使用できる &lt;code&gt;defaultHost&lt;/code&gt; 値を取得するには</target>
        </trans-unit>
        <trans-unit id="754164850f38c1ecdaf6b8ed894cb192bc36c5f4" translate="yes" xml:space="preserve">
          <source>Configuration</source>
          <target state="translated">Configuration</target>
        </trans-unit>
        <trans-unit id="57e9ad30448d36d2afe4b732c487899f58be10c5" translate="yes" xml:space="preserve">
          <source>Configuration (ApiDataFactory)</source>
          <target state="translated">設定(ApiDataFactory)</target>
        </trans-unit>
        <trans-unit id="5bd70dd4a96bd7fd12038204d3434aee135fc841" translate="yes" xml:space="preserve">
          <source>Configuration (Nightmare)</source>
          <target state="translated">コンフィグレーション(ナイトメア</target>
        </trans-unit>
        <trans-unit id="07fe29b24f0717673eb796f92dfadb231bced1c9" translate="yes" xml:space="preserve">
          <source>Configuration (Protractor)</source>
          <target state="translated">構成(分度器</target>
        </trans-unit>
        <trans-unit id="524be0016b896a36f978f3585b2c0f0e35379efb" translate="yes" xml:space="preserve">
          <source>Configuration (Puppeteer)</source>
          <target state="translated">コンフィグレーション(人形使い</target>
        </trans-unit>
        <trans-unit id="09864e600cccbf4cbef3c59ecf56aac5ce46b83a" translate="yes" xml:space="preserve">
          <source>Configuration (REST)</source>
          <target state="translated">設定(REST)</target>
        </trans-unit>
        <trans-unit id="51d9d70b096016b2015172fc6e8a67dd3a5911b7" translate="yes" xml:space="preserve">
          <source>Configuration (WebDriverIO)</source>
          <target state="translated">設定(WebDriverIO)</target>
        </trans-unit>
        <trans-unit id="43aba51ed8f26776bebefb2cf93d1cb5c52099a0" translate="yes" xml:space="preserve">
          <source>Configuration can either be taken from a corresponding helper (deprecated) or a from plugin config (recommended).</source>
          <target state="translated">設定は対応するヘルパー(非推奨)かプラグインの設定から行うことができます(推奨)。</target>
        </trans-unit>
        <trans-unit id="b3104edd76f46c2dd226b5dcdd513d9d7c9a73c6" translate="yes" xml:space="preserve">
          <source>Configuration changes will be reverted after a test or a suite.</source>
          <target state="translated">設定の変更は、テストまたはスイートの後に戻されます。</target>
        </trans-unit>
        <trans-unit id="93c49325278f6b95c01caee704d29487879fcc58" translate="yes" xml:space="preserve">
          <source>Configuration for WebDriver should be provided inside &lt;code&gt;codecept.conf.js&lt;/code&gt; file under &lt;code&gt;helpers: WebDriver&lt;/code&gt; section:</source>
          <target state="translated">WebDriverの構成は、 &lt;code&gt;codecept.conf.js&lt;/code&gt; ファイル内の &lt;code&gt;helpers: WebDriver&lt;/code&gt; 下に提供する必要があります。WebDriverセクション：</target>
        </trans-unit>
        <trans-unit id="0c37408e6ea6b05e6a8c60fd440aa3ee1210caed" translate="yes" xml:space="preserve">
          <source>Configuration is set in the &lt;code&gt;codecept.conf.js&lt;/code&gt; file which was created during the &lt;code&gt;init&lt;/code&gt; process. Inside the config file you can enable and configure helpers and plugins, and set bootstrap and teardown scripts.</source>
          <target state="translated">構成は、 &lt;code&gt;init&lt;/code&gt; プロセス中に作成された &lt;code&gt;codecept.conf.js&lt;/code&gt; ファイルで設定されます。構成ファイル内で、ヘルパーとプラグインを有効にして構成し、ブートストラップスクリプトとティアダウンスクリプトを設定できます。</target>
        </trans-unit>
        <trans-unit id="ce8ad60d0c979a0f80c94134665276dff24f4293" translate="yes" xml:space="preserve">
          <source>Configuration:</source>
          <target state="translated">Configuration:</target>
        </trans-unit>
        <trans-unit id="861b65660947ecc035601f23f9a0f0b0d3775ebe" translate="yes" xml:space="preserve">
          <source>Configure codecept.conf.js</source>
          <target state="translated">codecept.conf.jsの設定</target>
        </trans-unit>
        <trans-unit id="e388197d107b8a884963f7430ace672030b3c33e" translate="yes" xml:space="preserve">
          <source>Configure it to use &lt;code&gt;output&lt;/code&gt; directory to print HTML reports:</source>
          <target state="translated">&lt;code&gt;output&lt;/code&gt; ディレクトリを使用してHTMLレポートを印刷するように設定します。</target>
        </trans-unit>
        <trans-unit id="2a10db8a479e34450afaeb406abdd9bea945917f" translate="yes" xml:space="preserve">
          <source>Configure mocha-multi with reports that you want:</source>
          <target state="translated">mocha-multiをお好みのレポートで設定します。</target>
        </trans-unit>
        <trans-unit id="834b811351966050574089ced73dfbdb7ca6848a" translate="yes" xml:space="preserve">
          <source>Configure tsconfig.json</source>
          <target state="translated">tsconfig.jsonの設定</target>
        </trans-unit>
        <trans-unit id="32bc3c22148beccab28adad18f452f24bed405a4" translate="yes" xml:space="preserve">
          <source>Configuring</source>
          <target state="translated">Configuring</target>
        </trans-unit>
        <trans-unit id="045e91283529b1fe207245276967452e21d81e0c" translate="yes" xml:space="preserve">
          <source>Configuring CI</source>
          <target state="translated">CIの設定</target>
        </trans-unit>
        <trans-unit id="a3353bfbe3b5bc5ef43f2dbc929cbf17fda5c65f" translate="yes" xml:space="preserve">
          <source>Configuring Nightmare</source>
          <target state="translated">ナイトメアの設定</target>
        </trans-unit>
        <trans-unit id="ba61a64aea55b9692c42f98ba75505a66e661783" translate="yes" xml:space="preserve">
          <source>Configuring WebDriver</source>
          <target state="translated">WebDriverの設定</target>
        </trans-unit>
        <trans-unit id="ffa640ffc0dc226e9613bbfee5c8c5191c46a3dd" translate="yes" xml:space="preserve">
          <source>Configuring the &lt;code&gt;tsconfig.json&lt;/code&gt; and &lt;code&gt;codecept.conf.js&lt;/code&gt; is not enough, you will need to configure the &lt;code&gt;steps.d.ts&lt;/code&gt; file for custom steps. Just simply do this by running this command::</source>
          <target state="translated">設定 &lt;code&gt;tsconfig.json&lt;/code&gt; と &lt;code&gt;codecept.conf.js&lt;/code&gt; は十分ではありません、あなたが設定する必要があります &lt;code&gt;steps.d.ts&lt;/code&gt; カスタム手順のためのファイルを。次のコマンドを実行して、これを実行するだけです::</target>
        </trans-unit>
        <trans-unit id="af92120f42f04bd6d7b8572977665134b6cbed13" translate="yes" xml:space="preserve">
          <source>Connect Through proxy</source>
          <target state="translated">プロキシ経由で接続</target>
        </trans-unit>
        <trans-unit id="6e733ce1d658a9f855a315c19341b91bfc6d737a" translate="yes" xml:space="preserve">
          <source>Connect through proxy</source>
          <target state="translated">プロキシ経由での接続</target>
        </trans-unit>
        <trans-unit id="29634c6654a18dbf3125bee354a81bf388f2275d" translate="yes" xml:space="preserve">
          <source>Connect through proxy (WebDriverIO)</source>
          <target state="translated">プロキシ経由での接続(WebDriverIO</target>
        </trans-unit>
        <trans-unit id="601bdc3cbe3821e682395be27ed410df8165fde8" translate="yes" xml:space="preserve">
          <source>Connecting to &lt;code&gt;BrowserStack&lt;/code&gt; and &lt;code&gt;Sauce Labs&lt;/code&gt; is simple. All you need to do is set the &lt;code&gt;user&lt;/code&gt; and &lt;code&gt;key&lt;/code&gt; parameters. WebDriver automatically know which service provider to connect to.</source>
          <target state="translated">接続 &lt;code&gt;BrowserStack&lt;/code&gt; と &lt;code&gt;Sauce Labs&lt;/code&gt; 簡単です。あなたがする必要があるのは、 &lt;code&gt;user&lt;/code&gt; と &lt;code&gt;key&lt;/code&gt; パラメータを設定することです。WebDriverは、接続するサービスプロバイダーを自動的に認識します。</target>
        </trans-unit>
        <trans-unit id="b90c101eb621b683e83ff7741d040cb052f2b714" translate="yes" xml:space="preserve">
          <source>Connecting to &lt;code&gt;BrowserStack&lt;/code&gt; and &lt;code&gt;Sauce Labs&lt;/code&gt; is simple. All you need to do is set the &lt;code&gt;user&lt;/code&gt; and &lt;code&gt;key&lt;/code&gt; parameters. WebDriverIO automatically know which service provider to connect to.</source>
          <target state="translated">&lt;code&gt;BrowserStack&lt;/code&gt; と &lt;code&gt;Sauce Labs&lt;/code&gt; への接続は簡単です。 &lt;code&gt;user&lt;/code&gt; と &lt;code&gt;key&lt;/code&gt; パラメーターを設定するだけです。WebDriverIOは、接続するサービスプロバイダーを自動的に認識します。</target>
        </trans-unit>
        <trans-unit id="0fce782e49b19de850642908a7ec08707b6cfa53" translate="yes" xml:space="preserve">
          <source>Cons</source>
          <target state="translated">Cons</target>
        </trans-unit>
        <trans-unit id="e6443af99d2f470f50affd5057bf48db2d09dae4" translate="yes" xml:space="preserve">
          <source>Container</source>
          <target state="translated">Container</target>
        </trans-unit>
        <trans-unit id="8edfad7595291b9082628fafb8e6d8693ae3f558" translate="yes" xml:space="preserve">
          <source>Container also contains current Mocha instance:</source>
          <target state="translated">コンテナには、現在のMochaインスタンスも含まれています。</target>
        </trans-unit>
        <trans-unit id="cf2cadc5c224b06730871ca48c5951adf51a68da" translate="yes" xml:space="preserve">
          <source>Corresponding examples provided in next sections.</source>
          <target state="translated">次のセクションで対応する例を示します。</target>
        </trans-unit>
        <trans-unit id="ce24595f58f0520d68c92320e90c30496aa3956a" translate="yes" xml:space="preserve">
          <source>Create &lt;code&gt;browsers.json&lt;/code&gt; file in the same directory &lt;code&gt;codecept.conf.js&lt;/code&gt; is located &lt;a href=&quot;https://aerokube.com/selenoid/latest/#_prepare_configuration&quot;&gt;Refer to Selenoid documentation (opens new window)&lt;/a&gt; to know more about browsers.json.</source>
          <target state="translated">同じディレクトリに &lt;code&gt;codecept.conf.js&lt;/code&gt; ファイルを作成し &lt;code&gt;browsers.json&lt;/code&gt; codecept.conf.jsがあり&lt;a href=&quot;https://aerokube.com/selenoid/latest/#_prepare_configuration&quot;&gt;ますbrowser.jsonの詳細については、ソレノイドのドキュメント（新しいウィンドウを開きます）&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="966a9e47377c35f75328dd2b135860df76703e2f" translate="yes" xml:space="preserve">
          <source>Create &lt;code&gt;multiple&lt;/code&gt; section in configuration file, and fill it with run suites. Each suite should have &lt;code&gt;browser&lt;/code&gt; array with browser names or driver helper's configuration:</source>
          <target state="translated">構成ファイルに &lt;code&gt;multiple&lt;/code&gt; セクションを作成し、実行スイートで埋めます。各スイートには、ブラウザー名またはドライバーヘルパーの構成を含む &lt;code&gt;browser&lt;/code&gt; 配列が必要です。</target>
        </trans-unit>
        <trans-unit id="91d8b0c1456607e37ed392df8fee754c08337130" translate="yes" xml:space="preserve">
          <source>Create Selenoid container</source>
          <target state="translated">セレノイドコンテナの作成</target>
        </trans-unit>
        <trans-unit id="961ea1200f06b7051ca6858934213115cda7aad9" translate="yes" xml:space="preserve">
          <source>Create a custom helper, define methods for it, and use it inside the I object. Your Helper can access &lt;code&gt;browser&lt;/code&gt; from Protractor by accessing the Protractor helper:</source>
          <target state="translated">カスタムヘルパーを作成し、そのメソッドを定義して、Iオブジェクト内で使用します。ヘルパーは、分度器ヘルパーにアクセスすることにより、分度器から &lt;code&gt;browser&lt;/code&gt; アクセスできます。</target>
        </trans-unit>
        <trans-unit id="88366366060b8dfda3b9d169dd4ed75c9ddc502c" translate="yes" xml:space="preserve">
          <source>Create a factory file for a resource.</source>
          <target state="translated">リソースのファクトリファイルを作成します。</target>
        </trans-unit>
        <trans-unit id="e1e0ffc0bcba147dfa368ad8712d24541d0b01bf" translate="yes" xml:space="preserve">
          <source>Create a file called &lt;code&gt;jsconfig.json&lt;/code&gt; in your project root directory, unless you already have one.</source>
          <target state="translated">すでにファイルがない場合は、プロジェクトのルートディレクトリに &lt;code&gt;jsconfig.json&lt;/code&gt; というファイルを作成します。</target>
        </trans-unit>
        <trans-unit id="56c8128f9f7dcc8cbc785611afc72f3735a0bd00" translate="yes" xml:space="preserve">
          <source>Create a helper using &lt;code&gt;codecepjs gh&lt;/code&gt; command.</source>
          <target state="translated">&lt;code&gt;codecepjs gh&lt;/code&gt; コマンドを使用してヘルパーを作成します。</target>
        </trans-unit>
        <trans-unit id="9c6f6e8ea7223a224f56472cc0cb3bcf5da5fc5e" translate="yes" xml:space="preserve">
          <source>Create a placeholder in file:</source>
          <target state="translated">ファイル内にプレースホルダを作成します。</target>
        </trans-unit>
        <trans-unit id="2e119578665eee9d26b5be04faed13cee2c0e33b" translate="yes" xml:space="preserve">
          <source>Create custom helper, define methods for it, and use it inside the I object. Your Helper can access &lt;code&gt;browser&lt;/code&gt; from Protractor by accessing Protractor helper:</source>
          <target state="translated">カスタムヘルパーを作成し、そのメソッドを定義して、Iオブジェクト内で使用します。ヘルパーは、分度器ヘルパーにアクセスすることにより、分度器から &lt;code&gt;browser&lt;/code&gt; アクセスできます。</target>
        </trans-unit>
        <trans-unit id="1018a63a1bf600ccd29b05c8584ae324d84176d4" translate="yes" xml:space="preserve">
          <source>Create first feature and test when asked. Open a newly created file in your favorite JavaScript editor. The file should look like this:</source>
          <target state="translated">最初の機能を作成し、聞かれたらテストする 新しく作成したファイルをお気に入りの JavaScript エディタで開きます。ファイルは以下のようになっているはずです。</target>
        </trans-unit>
        <trans-unit id="96f3dc24456750b675efb7a5fa2f3cef07b359cd" translate="yes" xml:space="preserve">
          <source>Create new helper</source>
          <target state="translated">新しいヘルパーを作成する</target>
        </trans-unit>
        <trans-unit id="faade754f62bb3f3f6d667ed1e0932fe74b959f3" translate="yes" xml:space="preserve">
          <source>Create new pageobject</source>
          <target state="translated">新しいページオブジェクトの作成</target>
        </trans-unit>
        <trans-unit id="bde5a3ade415a878c8a4537c543b600cf07f24a1" translate="yes" xml:space="preserve">
          <source>Create new test</source>
          <target state="translated">新しいテストの作成</target>
        </trans-unit>
        <trans-unit id="3a89aa7417049fa900a4b5f317ac12b1951ccbf5" translate="yes" xml:space="preserve">
          <source>Create translation file like this:</source>
          <target state="translated">このような翻訳ファイルを作成します。</target>
        </trans-unit>
        <trans-unit id="9c7106ef65f299ed2a4b2903aa03a0e77080ed39" translate="yes" xml:space="preserve">
          <source>Creates &lt;code&gt;codecept.conf.js&lt;/code&gt; file in current directory:</source>
          <target state="translated">現在のディレクトリに &lt;code&gt;codecept.conf.js&lt;/code&gt; ファイルを作成します。</target>
        </trans-unit>
        <trans-unit id="d6effd8cb03bff23bf686db96fdaa78676b4d44c" translate="yes" xml:space="preserve">
          <source>Creates &lt;code&gt;codecept.json&lt;/code&gt; file in current directory:</source>
          <target state="translated">現在のディレクトリに &lt;code&gt;codecept.json&lt;/code&gt; ファイルを作成します。</target>
        </trans-unit>
        <trans-unit id="b9d014877704bec779be6e66c580e0f6baddfda5" translate="yes" xml:space="preserve">
          <source>Creates a &lt;a href=&quot;https://codecept.io/locators#custom-locators&quot;&gt;custom locator (opens new window)&lt;/a&gt; by using special attributes in HTML.</source>
          <target state="translated">HTMLの特別な属性を使用して、&lt;a href=&quot;https://codecept.io/locators#custom-locators&quot;&gt;カスタムロケーターを&lt;/a&gt;作成します（新しいウィンドウを開きます）。</target>
        </trans-unit>
        <trans-unit id="28128d3ff4ce6cfc98fb173e4dc7fb871deaddb4" translate="yes" xml:space="preserve">
          <source>Creates screenshot on failure. Screenshot is saved into &lt;code&gt;output&lt;/code&gt; directory.</source>
          <target state="translated">失敗時にスクリーンショットを作成します。スクリーンショットは &lt;code&gt;output&lt;/code&gt; ディレクトリに保存されます。</target>
        </trans-unit>
        <trans-unit id="ab2f51b8080b751180a8da0f7875f0f650e8a081" translate="yes" xml:space="preserve">
          <source>Creating a new project via &lt;a href=&quot;https://github.com/codeceptjs/create-codeceptjs&quot;&gt;&lt;code&gt;create-codeceptjs&lt;/code&gt; installer (opens new window)&lt;/a&gt; is the simplest way to start</source>
          <target state="translated">&lt;a href=&quot;https://github.com/codeceptjs/create-codeceptjs&quot;&gt; &lt;code&gt;create-codeceptjs&lt;/code&gt; インストーラー（新しいウィンドウを開く）&lt;/a&gt;を使用して新しいプロジェクトを作成するのが最も簡単な開始方法です</target>
        </trans-unit>
        <trans-unit id="0e557247c53d5a86c733f30ad81b57894a084e88" translate="yes" xml:space="preserve">
          <source>Cross-Platform Testing</source>
          <target state="translated">クロスプラットフォームテスト</target>
        </trans-unit>
        <trans-unit id="f64581c4962edb894fb3054728d83483a2af4832" translate="yes" xml:space="preserve">
          <source>Cucumber integration</source>
          <target state="translated">キュウリの統合</target>
        </trans-unit>
        <trans-unit id="14662ba0bd860469487e8b7cb5fa5a11fa760bf0" translate="yes" xml:space="preserve">
          <source>Custom Hooks</source>
          <target state="translated">カスタムフック</target>
        </trans-unit>
        <trans-unit id="284ec02a0dcd5443a4053f30fd150eed20a550c6" translate="yes" xml:space="preserve">
          <source>Custom Locators</source>
          <target state="translated">カスタムロケータ</target>
        </trans-unit>
        <trans-unit id="ea2e9495b648de659ee5627dddc7f5e3a7377733" translate="yes" xml:space="preserve">
          <source>Custom Parallel Execution</source>
          <target state="translated">カスタム並列実行</target>
        </trans-unit>
        <trans-unit id="a551233ce4d33c2af99e28de7db8970c72e7183a" translate="yes" xml:space="preserve">
          <source>Custom Runner</source>
          <target state="translated">カスタムランナー</target>
        </trans-unit>
        <trans-unit id="562833f3ac2b701ecbcbe04c0a123608494ee05c" translate="yes" xml:space="preserve">
          <source>Custom Strict Locators</source>
          <target state="translated">カスタム厳格なロケータ</target>
        </trans-unit>
        <trans-unit id="b1deaa58268f7dd9ca24cc9ceb27ab0a9a6c311e" translate="yes" xml:space="preserve">
          <source>Custom String Locators</source>
          <target state="translated">カスタムストリングロケータ</target>
        </trans-unit>
        <trans-unit id="2dcb05920d077242c80053d2d75b842e2994784b" translate="yes" xml:space="preserve">
          <source>Custom locators should be implemented in a plugin or a bootstrap script using internal CodeceptJS API:</source>
          <target state="translated">カスタムロケータは、内部のCodeceptJS APIを使用してプラグインやブートストラップスクリプトに実装する必要があります。</target>
        </trans-unit>
        <trans-unit id="77948e089c055865008695405d798b980e055e09" translate="yes" xml:space="preserve">
          <source>Customize it from custom Helper file:</source>
          <target state="translated">カスタムヘルパーファイルからカスタマイズします。</target>
        </trans-unit>
        <trans-unit id="79640afd67efa643e1657be9dd5e2567728c6663" translate="yes" xml:space="preserve">
          <source>Data Access Objects</source>
          <target state="translated">データアクセスオブジェクト</target>
        </trans-unit>
        <trans-unit id="df8fe505a31e4d831fd356e5dbc4fff778c30a5c" translate="yes" xml:space="preserve">
          <source>Data Driven Tests</source>
          <target state="translated">データドリブンテスト</target>
        </trans-unit>
        <trans-unit id="541a14207677215070969758554886506e81455d" translate="yes" xml:space="preserve">
          <source>Data Generation with Factories</source>
          <target state="translated">ファクトリーによるデータ生成</target>
        </trans-unit>
        <trans-unit id="d5d83b763809dbf1782ea117dc9885e64311acdd" translate="yes" xml:space="preserve">
          <source>Data Management</source>
          <target state="translated">データ管理</target>
        </trans-unit>
        <trans-unit id="68c9a915327c20c2720c0da15a0122624055b08b" translate="yes" xml:space="preserve">
          <source>Data Management via API</source>
          <target state="translated">APIによるデータ管理</target>
        </trans-unit>
        <trans-unit id="1d5e69321482c37f52fc76ae7e5af10b483925c9" translate="yes" xml:space="preserve">
          <source>Data Objects require REST or GraphQL helpers to be enabled for data interaction</source>
          <target state="translated">データオブジェクトは、データのやりとりを行うためにRESTまたはGraphQLヘルパーを有効にする必要があります。</target>
        </trans-unit>
        <trans-unit id="5e43d6bba8cb4d73f64d4d6a2fcf04c26cfb6bb1" translate="yes" xml:space="preserve">
          <source>Data Sources</source>
          <target state="translated">データソース</target>
        </trans-unit>
        <trans-unit id="4fd56d31a08dd0f1587f4449f5d57b664c4042fb" translate="yes" xml:space="preserve">
          <source>Data of created records are collected and used in the end of a test for the cleanup.</source>
          <target state="translated">作成されたレコードのデータを収集し、クリーンアップのためのテストの最後に使用します。</target>
        </trans-unit>
        <trans-unit id="db99b945f646039277802184e04cfb0a679c01e8" translate="yes" xml:space="preserve">
          <source>Data sets can also be defined with array, generator, or a function.</source>
          <target state="translated">データセットは、配列、ジェネレータ、または関数で定義することもできます。</target>
        </trans-unit>
        <trans-unit id="bd604d99e75e45d38bc7ac8fc714cde0097d901f" translate="yes" xml:space="preserve">
          <source>Debug</source>
          <target state="translated">Debug</target>
        </trans-unit>
        <trans-unit id="1d82bfe2f9002f40e25999e91e79cb855e409d3f" translate="yes" xml:space="preserve">
          <source>Define how users are logged in and how to check that user is logged in</source>
          <target state="translated">ユーザーがどのようにログインしているかを定義し、そのユーザーがログインしているかどうかを確認する方法を定義します。</target>
        </trans-unit>
        <trans-unit id="476e3c6d4b2ae266a547187884474954fa953347" translate="yes" xml:space="preserve">
          <source>Define user session names (example: &lt;code&gt;user&lt;/code&gt;, &lt;code&gt;editor&lt;/code&gt;, &lt;code&gt;admin&lt;/code&gt;, etc).</source>
          <target state="translated">ユーザーセッション名を定義します（例： &lt;code&gt;user&lt;/code&gt; 、 &lt;code&gt;editor&lt;/code&gt; 、 &lt;code&gt;admin&lt;/code&gt; など）。</target>
        </trans-unit>
        <trans-unit id="5cd60c4fd2950b489d0ec33e318559ab0726e8d9" translate="yes" xml:space="preserve">
          <source>Delete video and logs of passed tests (default : true)</source>
          <target state="translated">合格したテストのビデオとログを削除する (デフォルトは true)</target>
        </trans-unit>
        <trans-unit id="3aefbe2f210572802298b2ad0347dc9e423d2690" translate="yes" xml:space="preserve">
          <source>Dependency Injection</source>
          <target state="translated">依存性注入</target>
        </trans-unit>
        <trans-unit id="55f8ebc805e65b5b71ddafdae390e3be2bcd69af" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">Description</target>
        </trans-unit>
        <trans-unit id="2da8d2faf7d01464305efc874419b72ff8224c86" translate="yes" xml:space="preserve">
          <source>Desired Capabilities</source>
          <target state="translated">希望する能力</target>
        </trans-unit>
        <trans-unit id="d0aa3492f9e72b864dde4767e71ec13a4cf1b18e" translate="yes" xml:space="preserve">
          <source>Despite showing XPath in this guide we **do not recommend using XPath for testing iOS native apps. XPath runs very slow on iOS. Consider using ID or Accessibility ID locators instead.</source>
          <target state="translated">このガイドではXPathを紹介していますが、iOSネイティブアプリのテストにXPathを使用することはお勧めしません。XPath は iOS で動作が非常に遅くなります。代わりに ID や Accessibility ID ロケータを使用することを検討してください。</target>
        </trans-unit>
        <trans-unit id="7f76fef7ea0f8fe4593bbf3fb15137ecd48f94cd" translate="yes" xml:space="preserve">
          <source>Detect flaky tests in our suite</source>
          <target state="translated">私たちのスイートで不正なテストを検出する</target>
        </trans-unit>
        <trans-unit id="ab5c851897752ea442786efeac5fb866c23ec3dc" translate="yes" xml:space="preserve">
          <source>Detox</source>
          <target state="translated">Detox</target>
        </trans-unit>
        <trans-unit id="6a64dc2c4280cc763dc860a0cb981ffa4d485fb0" translate="yes" xml:space="preserve">
          <source>Detox configuration is required in &lt;code&gt;package.json&lt;/code&gt; under &lt;code&gt;detox&lt;/code&gt; section.</source>
          <target state="translated">パッケージ &lt;code&gt;package.json&lt;/code&gt; の &lt;code&gt;detox&lt;/code&gt; セクションにデトックス設定が必要です。</target>
        </trans-unit>
        <trans-unit id="51c334a550dfbcf724d97d29fbd6328330fa384d" translate="yes" xml:space="preserve">
          <source>Detox plays quite differently from Appium. To establish detox testing you need to build a mobile application in a special way to inject Detox code. This why &lt;strong&gt;Detox is grey box testing&lt;/strong&gt; solution, so you need an access to application source code, and a way to build and execute it on emulator.</source>
          <target state="translated">デトックスはアピウムとはかなり違った働きをします。デトックステストを確立するには、デトックスコードを挿入する特別な方法でモバイルアプリケーションを構築する必要があります。これが、&lt;strong&gt;デトックスがグレーボックステスト&lt;/strong&gt;ソリューションである理由です。そのため、アプリケーションのソースコードにアクセスし、エミュレーターでビルドして実行する方法が必要です。</target>
        </trans-unit>
        <trans-unit id="4c17aadf5117487aab7bc50cbf056caf3977cc31" translate="yes" xml:space="preserve">
          <source>Development</source>
          <target state="translated">Development</target>
        </trans-unit>
        <trans-unit id="c4e1b4722de9d085952367dc2284464ee48114e5" translate="yes" xml:space="preserve">
          <source>Device Emulation</source>
          <target state="translated">デバイスエミュレーション</target>
        </trans-unit>
        <trans-unit id="6e41b1f6d6df764efe32869ac5713e07bf01e26a" translate="yes" xml:space="preserve">
          <source>Device emulation can be enabled in CodeceptJS globally in a config or per session.</source>
          <target state="translated">デバイスエミュレーションは、CodeceptJSでは設定でグローバルに、またはセッションごとに有効にすることができます。</target>
        </trans-unit>
        <trans-unit id="99946884377a9fee47f0a9dadc16a697de435a38" translate="yes" xml:space="preserve">
          <source>Directory Structure</source>
          <target state="translated">ディレクトリ構造</target>
        </trans-unit>
        <trans-unit id="13ff7730384a3396d9731d3b6007166e72ac6cc4" translate="yes" xml:space="preserve">
          <source>Disable Per Test</source>
          <target state="translated">テストごとに無効化</target>
        </trans-unit>
        <trans-unit id="8900a4ddc21188f3d4c2c15fbe15418ef06bc3e6" translate="yes" xml:space="preserve">
          <source>Disables retryFailedStep plugin for steps inside a block;</source>
          <target state="translated">ブロック内のステップに対してretryFailedStepプラグインを無効にします。</target>
        </trans-unit>
        <trans-unit id="1d5875afb82105bfdb7dad3f0b0b749b3095abfa" translate="yes" xml:space="preserve">
          <source>Dismisses the active JavaScript popup, as created by window.alert|window.confirm|window.prompt.</source>
          <target state="translated">window.alert|window.confirm|window.prompt で作成されたアクティブな JavaScript ポップアップを破棄します。</target>
        </trans-unit>
        <trans-unit id="39a90e0681198d34a90002eaafaf9320eb00eb75" translate="yes" xml:space="preserve">
          <source>Dismisses the active JavaScript popup, as created by window.alert|window.confirm|window.prompt. Appium: support only web testing</source>
          <target state="translated">window.alert|window.confirm|window.prompt で作成されたアクティブな JavaScript ポップアップを破棄します。Appium:ウェブテストのみサポート</target>
        </trans-unit>
        <trans-unit id="854d58e8f8e5f86b981ee7bbf24beb96691da584" translate="yes" xml:space="preserve">
          <source>Docker Compose</source>
          <target state="translated">Dockerコンポーズ</target>
        </trans-unit>
        <trans-unit id="225ac9300ac48f41860ff29ea8e9cb1154960738" translate="yes" xml:space="preserve">
          <source>Does the locator look like an ID selector (e.g. &quot;#foo&quot;)? If so, try to find an input element matching that ID.</source>
          <target state="translated">ロケータはIDセレクタのように見えますか(例:&quot;#foo&quot;)?もしそうなら、そのIDにマッチする入力要素を探してみてください。</target>
        </trans-unit>
        <trans-unit id="1df6bb4d5c769991bae49c39d03babd8248124e1" translate="yes" xml:space="preserve">
          <source>Download and install &lt;a href=&quot;http://appium.io/&quot;&gt;Appium&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://appium.io/&quot;&gt;Appiumを&lt;/a&gt;ダウンロードしてインストールする</target>
        </trans-unit>
        <trans-unit id="d502d98622181f59bd5769064f5e68dc5fbdd8d8" translate="yes" xml:space="preserve">
          <source>Drag an item to a destination element.</source>
          <target state="translated">アイテムを移動先の要素にドラッグします。</target>
        </trans-unit>
        <trans-unit id="8d9d93af231eaae0438ce58d9758a7e399f38fd8" translate="yes" xml:space="preserve">
          <source>Drag an item to a destination element. Appium: not tested</source>
          <target state="translated">アイテムを移動先の要素にドラッグします。Appium:テストしていません。</target>
        </trans-unit>
        <trans-unit id="2bc8bf7a00fd5715bc0f8309708a2c1ca4c99f28" translate="yes" xml:space="preserve">
          <source>Drag the scrubber of a slider to a given position For fuzzy locators, fields are matched by label text, the &quot;name&quot; attribute, CSS, and XPath.</source>
          <target state="translated">スライダーのスクラバーを指定した位置にドラッグする ファジーロケータでは、フィールドはラベルテキスト、&quot;name &quot;属性、CSS、およびXPathによってマッチングされます。</target>
        </trans-unit>
        <trans-unit id="9dbf2fc15a62cf57d0eca3b19bceaee8e3e65511" translate="yes" xml:space="preserve">
          <source>Dry Run</source>
          <target state="translated">ドライラン</target>
        </trans-unit>
        <trans-unit id="119142fb92b287ca3263f3f58e84891dd2bea9ea" translate="yes" xml:space="preserve">
          <source>Dumps puppeteers code coverage after every test.</source>
          <target state="translated">すべてのテストの後に人形のコードカバレッジをダンプします。</target>
        </trans-unit>
        <trans-unit id="096c9809fdc0538b50d5a68da39154922316935a" translate="yes" xml:space="preserve">
          <source>Dynamic Configuration</source>
          <target state="translated">動的設定</target>
        </trans-unit>
        <trans-unit id="499c03ade376209306e2f74eece2f16bb4cb9bec" translate="yes" xml:space="preserve">
          <source>Dynamic Injection</source>
          <target state="translated">ダイナミックインジェクション</target>
        </trans-unit>
        <trans-unit id="de893a7cde5431349423f51d2bad5595b76eb72f" translate="yes" xml:space="preserve">
          <source>Each executed process uses custom folder for reports and output. It is stored in subfolder inside an output directory. Subfolders will be named in &lt;code&gt;suite_browser&lt;/code&gt; format.</source>
          <target state="translated">実行される各プロセスは、レポートと出力にカスタムフォルダーを使用します。出力ディレクトリ内のサブフォルダーに保存されます。 &lt;code&gt;suite_browser&lt;/code&gt; はsuite_browser形式で名前が付けられます。</target>
        </trans-unit>
        <trans-unit id="f073bc5a3ac1522d7ae0eb17962b1cdb4ee5807d" translate="yes" xml:space="preserve">
          <source>Each feature of a product should be born from a talk between</source>
          <target state="translated">製品の各機能は、それぞれの製品が、それぞれの製品が、それぞれの製品が、それぞれの製品が、それぞれの製品が、それぞれの製品が、それぞれの製品が、それぞれの製品が、それぞれの製品が、それぞれの製品が、それぞれの製品が</target>
        </trans-unit>
        <trans-unit id="09f11478f6137563376daef168805aafe11df5ec" translate="yes" xml:space="preserve">
          <source>Each implemented method should return a value as they will be added to global promise chain as well.</source>
          <target state="translated">実装された各メソッドは、グローバルプロミスチェーンにも追加されるため、値を返す必要があります。</target>
        </trans-unit>
        <trans-unit id="5550fdda60a4130fbfd92a678011ffb8cac5fcaf" translate="yes" xml:space="preserve">
          <source>Each operation must have the following:</source>
          <target state="translated">各操作には以下のものが必要です。</target>
        </trans-unit>
        <trans-unit id="05e997ade3a54964d3c8a02596ea2c9dce3528e5" translate="yes" xml:space="preserve">
          <source>Each test is described inside a &lt;code&gt;Scenario&lt;/code&gt; function with &lt;code&gt;I&lt;/code&gt; object passed into it. I object is an &lt;strong&gt;actor&lt;/strong&gt;, an abstraction for a testing user. I is a proxy object for currently enabled &lt;strong&gt;Helpers&lt;/strong&gt;.</source>
          <target state="translated">各テストは、 &lt;code&gt;Scenario&lt;/code&gt; 関数内に記述され、 &lt;code&gt;I&lt;/code&gt; オブジェクトが渡されます。私が対象とするのは、テストユーザーの抽象化である&lt;strong&gt;アクター&lt;/strong&gt;です。私は現在有効になっている&lt;strong&gt;ヘルパーの&lt;/strong&gt;プロキシオブジェクトです。</target>
        </trans-unit>
        <trans-unit id="fdf012f0709741268d498ec73a5f0f07fe91d1fb" translate="yes" xml:space="preserve">
          <source>Each test is described inside a &lt;code&gt;Scenario&lt;/code&gt; function with the &lt;code&gt;I&lt;/code&gt; object passed into it. The &lt;code&gt;I&lt;/code&gt; object is an &lt;strong&gt;actor&lt;/strong&gt;, an abstraction for a testing user. The &lt;code&gt;I&lt;/code&gt; is a proxy object for currently enabled &lt;strong&gt;Helpers&lt;/strong&gt;.</source>
          <target state="translated">各テストは、 &lt;code&gt;I&lt;/code&gt; オブジェクトが渡された &lt;code&gt;Scenario&lt;/code&gt; 関数内で記述されます。 &lt;code&gt;I&lt;/code&gt; オブジェクトがある&lt;strong&gt;俳優&lt;/strong&gt;、テストユーザーのための抽象化。 &lt;code&gt;I&lt;/code&gt; 現在有効のプロキシオブジェクトである&lt;strong&gt;ヘルパー&lt;/strong&gt;。&lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cb4a98c0247d63d3bc771d07626b3e837cfb7f00" translate="yes" xml:space="preserve">
          <source>Each worker spins an instance of CodeceptJS, executes a group of tests, and sends back report to the main process.</source>
          <target state="translated">各ワーカーはCodeceptJSのインスタンスを回転させ、テストグループを実行し、メインプロセスにレポートを送り返す。</target>
        </trans-unit>
        <trans-unit id="3d7845e047a8c583311c7316385ac8234c9c8683" translate="yes" xml:space="preserve">
          <source>Educational videos provided by our community member &lt;strong&gt;&lt;a href=&quot;https://github.com/ontytoom&quot;&gt;@ontytoom&lt;/a&gt;&lt;/strong&gt;.</source>
          <target state="translated">コミュニティメンバー&lt;strong&gt;&lt;a href=&quot;https://github.com/ontytoom&quot;&gt;@ontytoomが&lt;/a&gt;&lt;/strong&gt;提供する教育用ビデオ。</target>
        </trans-unit>
        <trans-unit id="a7f668caeb16547d55b6877aa34788c3dc5c7c55" translate="yes" xml:space="preserve">
          <source>Element can be found by CSS or XPath locators.</source>
          <target state="translated">要素はCSSやXPathのロケータで見つけることができます。</target>
        </trans-unit>
        <trans-unit id="ee2675d84e17dc4fc678399b11d8b9d5ac05ab53" translate="yes" xml:space="preserve">
          <source>Element can be found by CSS or XPath locators. Practically every steps in WebDriverIO helper accept them both.</source>
          <target state="translated">要素はCSSやXPathロケータで見つけることができます。WebDriverIOヘルパーの各ステップでは、どちらも受け付けています。</target>
        </trans-unit>
        <trans-unit id="c3060294b4cf31e5322894bd959f3ac72049ac5a" translate="yes" xml:space="preserve">
          <source>Elements can also be located by their accessability id, available both at Android and iOS. Accessibility id is recommended to use for locating element, as it rarely changed.</source>
          <target state="translated">また、AndroidとiOSの両方で利用可能なアクセシビリティIDを使って要素の位置を特定することもできます。アクセシビリティIDはほとんど変更されないので、要素の位置を特定するために使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="37d565ca65545b8fa2fd8f05503e851fdc62bf7a" translate="yes" xml:space="preserve">
          <source>Elements can also have ids, which can be located with &lt;code&gt;#&lt;/code&gt; prefix. On Android it it is important to keep full package name in id locator:</source>
          <target state="translated">要素にはIDを付けることもできます。IDは &lt;code&gt;#&lt;/code&gt; プレフィックスで見つけることができます。Androidでは、IDロケーターに完全なパッケージ名を保持することが重要です。</target>
        </trans-unit>
        <trans-unit id="ec1ce2eb91a1e324f83aa64deb5a3e2d65d60a6a" translate="yes" xml:space="preserve">
          <source>Email Checking</source>
          <target state="translated">メールチェック</target>
        </trans-unit>
        <trans-unit id="285419a58f35bd59ca0c7ec81da591980849bebb" translate="yes" xml:space="preserve">
          <source>Emulates right click on an element. Unlike normal click instead of sending native event, emulates a click with JavaScript. This works on hidden, animated or inactive elements as well.</source>
          <target state="translated">要素上での右クリックをエミュレートします。通常のクリックとは異なり、ネイティブイベントを送信するのではなく、JavaScriptでクリックをエミュレートします。これは、非表示、アニメーション、または非アクティブな要素でも動作します。</target>
        </trans-unit>
        <trans-unit id="0135c299f746cf54d0617faa5505829bb678b9e2" translate="yes" xml:space="preserve">
          <source>Enable &lt;code&gt;Nightmare&lt;/code&gt; helper in &lt;code&gt;codecept.json&lt;/code&gt; config:</source>
          <target state="translated">&lt;code&gt;codecept.json&lt;/code&gt; 設定で &lt;code&gt;Nightmare&lt;/code&gt; ヘルパーを有効にします。</target>
        </trans-unit>
        <trans-unit id="c128ff0c34f0f4eb73eccea102ad0afc1e523aae" translate="yes" xml:space="preserve">
          <source>Enable &lt;code&gt;wdio&lt;/code&gt; plugin in config</source>
          <target state="translated">設定で &lt;code&gt;wdio&lt;/code&gt; プラグインを有効にする</target>
        </trans-unit>
        <trans-unit id="68883bae5c77794671ac04f4cee405dc71edfac0" translate="yes" xml:space="preserve">
          <source>Enable &lt;code&gt;wdio&lt;/code&gt; plugin in plugins list and add &lt;code&gt;browserstack&lt;/code&gt; service:</source>
          <target state="translated">プラグインリストで &lt;code&gt;wdio&lt;/code&gt; プラグインを有効にし、 &lt;code&gt;browserstack&lt;/code&gt; サービスを追加します。</target>
        </trans-unit>
        <trans-unit id="6677695fd0c138f2b83674f63d95403a4a7825fa" translate="yes" xml:space="preserve">
          <source>Enable &lt;code&gt;wdio&lt;/code&gt; plugin in plugins list and add &lt;code&gt;sauce&lt;/code&gt; service:</source>
          <target state="translated">プラグインリストで &lt;code&gt;wdio&lt;/code&gt; プラグインを有効にし、 &lt;code&gt;sauce&lt;/code&gt; サービスを追加します。</target>
        </trans-unit>
        <trans-unit id="cfd6dd718f5f629dcef250c5f8bbd5372fed5511" translate="yes" xml:space="preserve">
          <source>Enable &lt;code&gt;wdio&lt;/code&gt; plugin in plugins list and add &lt;code&gt;selenium-standalone&lt;/code&gt; service:</source>
          <target state="translated">プラグインリストで &lt;code&gt;wdio&lt;/code&gt; プラグインを有効にし、 &lt;code&gt;selenium-standalone&lt;/code&gt; サービスを追加します。</target>
        </trans-unit>
        <trans-unit id="4cdb8322b482618279ed3cd1e3101aec3ac7986c" translate="yes" xml:space="preserve">
          <source>Enable &lt;code&gt;wdio&lt;/code&gt; plugin in plugins list and add &lt;code&gt;testingbot&lt;/code&gt; service:</source>
          <target state="translated">プラグインリストで &lt;code&gt;wdio&lt;/code&gt; プラグインを有効にし、 &lt;code&gt;testingbot&lt;/code&gt; サービスを追加します。</target>
        </trans-unit>
        <trans-unit id="b6a5431c6d17c49c1417eb410fce2eed095d0200" translate="yes" xml:space="preserve">
          <source>Enable GraphQL helper in the config. It is recommended to set &lt;code&gt;endpoint&lt;/code&gt;, the URL to which the requests go to. If you need some authorization you can optionally set default headers too.</source>
          <target state="translated">構成でGraphQLヘルパーを有効にします。 &lt;code&gt;endpoint&lt;/code&gt; 、リクエストの送信先のURLを設定することをお勧めします。何らかの認証が必要な場合は、オプションでデフォルトのヘッダーを設定することもできます。</target>
        </trans-unit>
        <trans-unit id="19f21860317df8c547396f2136a121ba3c436ce4" translate="yes" xml:space="preserve">
          <source>Enable REST helper in global config. It is recommended to set &lt;code&gt;endpoint&lt;/code&gt;, a base URL for all API requests. If you need some authorization you can optionally set default headers too.</source>
          <target state="translated">グローバル設定でRESTヘルパーを有効にします。すべてのAPIリクエストのベースURLである &lt;code&gt;endpoint&lt;/code&gt; を設定することをお勧めします。何らかの承認が必要な場合は、オプションでデフォルトのヘッダーも設定できます。</target>
        </trans-unit>
        <trans-unit id="f48d77bb61e0bb57f79d1fb65ea2c198115df6af" translate="yes" xml:space="preserve">
          <source>Enable REST helper in the config. It is recommended to set &lt;code&gt;endpoint&lt;/code&gt;, a base URL for all API requests. If you need some authorization you can optionally set default headers too.</source>
          <target state="translated">構成でRESTヘルパーを有効にします。すべてのAPIリクエストのベースURLである &lt;code&gt;endpoint&lt;/code&gt; を設定することをお勧めします。何らかの認証が必要な場合は、オプションでデフォルトのヘッダーを設定することもできます。</target>
        </trans-unit>
        <trans-unit id="74853a5b184399940d7b76cc4baeff3e80f7ecd7" translate="yes" xml:space="preserve">
          <source>Enable helper in config file:</source>
          <target state="translated">設定ファイルでヘルパーを有効にします。</target>
        </trans-unit>
        <trans-unit id="c38092cea0ba2e5b3280f69d83171be695074766" translate="yes" xml:space="preserve">
          <source>Enable it in config inside plugins section:</source>
          <target state="translated">プラグインセクション内の設定で有効にします。</target>
        </trans-unit>
        <trans-unit id="1ba4bdeb48bbea521cb02b6cc6c205c848899576" translate="yes" xml:space="preserve">
          <source>Enable it in the &lt;code&gt;codecept.conf.js&lt;/code&gt; file, inside the plugins section:</source>
          <target state="translated">プラグインセクション内の &lt;code&gt;codecept.conf.js&lt;/code&gt; ファイルで有効にします。</target>
        </trans-unit>
        <trans-unit id="c74a6e2fefe1af23f425a68ca032f6f532338428" translate="yes" xml:space="preserve">
          <source>Enable log recording and use &lt;code&gt;logs&lt;/code&gt; folder of output (default: false)</source>
          <target state="translated">ログ記録を有効にし、出力の &lt;code&gt;logs&lt;/code&gt; フォルダを使用します（デフォルト：false）</target>
        </trans-unit>
        <trans-unit id="deabe175b9606fa1cace71fbf52769394df423f0" translate="yes" xml:space="preserve">
          <source>Enable this plugin and configure as described below</source>
          <target state="translated">このプラグインを有効にして、以下のように設定します。</target>
        </trans-unit>
        <trans-unit id="08c8ad5134219d02a75600cf3c0617bcc7a16792" translate="yes" xml:space="preserve">
          <source>Enable this plugin in &lt;code&gt;codecept.conf.js&lt;/code&gt; (enabled by default for new setups):</source>
          <target state="translated">&lt;code&gt;codecept.conf.js&lt;/code&gt; でこのプラグインを有効にします（新しいセットアップではデフォルトで有効になっています）。</target>
        </trans-unit>
        <trans-unit id="fcd1c7f9f04fe19873b3cac944c98ed965dba7f2" translate="yes" xml:space="preserve">
          <source>Enable video recording and use &lt;code&gt;video&lt;/code&gt; folder of output (default: false)</source>
          <target state="translated">ビデオ録画を有効にし、出力の &lt;code&gt;video&lt;/code&gt; フォルダを使用します（デフォルト：false）</target>
        </trans-unit>
        <trans-unit id="777d56d609a1831b04fdbf03d7d87435b0b6523a" translate="yes" xml:space="preserve">
          <source>Enables Allure reporter.</source>
          <target state="translated">Allure レポーターを有効にします。</target>
        </trans-unit>
        <trans-unit id="f979903a0149ac5e97b198d165c0c8f3938c3f37" translate="yes" xml:space="preserve">
          <source>End to End tests can cover standard but complex scenarios from a user's perspective. With e2e tests you can be confident that users, following all defined scenarios, won't get errors. We check &lt;strong&gt;functionality of application and a user interface&lt;/strong&gt; (UI) as well.</source>
          <target state="translated">エンドツーエンドテストは、ユーザーの観点から、標準的で複雑なシナリオをカバーできます。e2eテストを使用すると、定義されたすべてのシナリオに従って、ユーザーがエラーを受け取らないことを確信できます。&lt;strong&gt;アプリケーションとユーザーインターフェイス&lt;/strong&gt;（UI）の&lt;strong&gt;機能も&lt;/strong&gt;チェックします。</target>
        </trans-unit>
        <trans-unit id="273d934d5d8b4aa6b781174bb417f8187d8438bf" translate="yes" xml:space="preserve">
          <source>End to end tests can be flaky for various reasons. Even when we can't do anything to solve this problem it we can do next two things:</source>
          <target state="translated">エンド・ツー・エンドのテストは様々な理由で不完全なものになることがあります。この問題を解決するために何もできない場合でも、次の二つのことができます。</target>
        </trans-unit>
        <trans-unit id="7230ed4754037a80673c208320ec0e4f2a0fc0ac" translate="yes" xml:space="preserve">
          <source>Enjoy testing!</source>
          <target state="translated">テストを楽しもう</target>
        </trans-unit>
        <trans-unit id="f70df357cc5ff0cfd2bf355e4d1f2eccb2589b28" translate="yes" xml:space="preserve">
          <source>Ensure that you have &lt;a href=&quot;https://codecept.io/installation/&quot;&gt;CodeceptJS installed (opens new window)&lt;/a&gt;. You will also need to install &lt;a href=&quot;http://appium.io/&quot;&gt;Appium (opens new window)&lt;/a&gt;. We suggest to use &lt;a href=&quot;https://www.npmjs.com/package/appium-doctor&quot;&gt;appium-doctor (opens new window)&lt;/a&gt; to check if your system is ready for mobile testing.</source>
          <target state="translated">&lt;a href=&quot;https://codecept.io/installation/&quot;&gt;CodeceptJSがインストールされ&lt;/a&gt;ていることを確認します（新しいウィンドウが開きます）。また、&lt;a href=&quot;http://appium.io/&quot;&gt;Appium&lt;/a&gt;をインストールする必要があります（新しいウィンドウが開きます）。&lt;a href=&quot;https://www.npmjs.com/package/appium-doctor&quot;&gt;appium-doctor（新しいウィンドウを開きます）&lt;/a&gt;を使用して、システムがモバイルテストの準備ができているかどうかを確認することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="837c567bc9aab352fbe71ccda056c58bf0caaa90" translate="yes" xml:space="preserve">
          <source>Ensure that you have &lt;a href=&quot;https://codecept.io/installation/&quot;&gt;CodeceptJS installed&lt;/a&gt;. You will also need to install &lt;a href=&quot;http://appium.io/&quot;&gt;Appium&lt;/a&gt;. We suggest to use &lt;a href=&quot;https://www.npmjs.com/package/appium-doctor&quot;&gt;appium-doctor&lt;/a&gt; to check if your system is ready for mobile testing.</source>
          <target state="translated">&lt;a href=&quot;https://codecept.io/installation/&quot;&gt;CodeceptJSがインストールされ&lt;/a&gt;ていることを確認します。&lt;a href=&quot;http://appium.io/&quot;&gt;Appium&lt;/a&gt;もインストールする必要があります。&lt;a href=&quot;https://www.npmjs.com/package/appium-doctor&quot;&gt;appium-doctor&lt;/a&gt;を使用して、システムがモバイルテストの準備ができているかどうかを確認することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="89ee88f618997ad052b8f98356aa707abfb7729d" translate="yes" xml:space="preserve">
          <source>Enters Angular mode (switched on by default) Should be used after &quot;amOutsideAngularApp&quot;</source>
          <target state="translated">Angularモードに入る(デフォルトでオンになっている)&quot;amOutsideAngularApp &quot;の後に使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="6c092524fd05a90bdfd187d2742aa8a0a110d9ba" translate="yes" xml:space="preserve">
          <source>Enters a directory In local filesystem. Starts from a current directory</source>
          <target state="translated">ローカルファイルシステム内のディレクトリに入ります。カレントディレクトリから起動</target>
        </trans-unit>
        <trans-unit id="5f7b6e737b0e4fe92f5ed34df0771daba8f5e2ec" translate="yes" xml:space="preserve">
          <source>Even better if you have a convention on active elements with special attributes like &lt;code&gt;data-test&lt;/code&gt; or &lt;code&gt;data-qa&lt;/code&gt;. Use &lt;code&gt;customLocator&lt;/code&gt; plugin to easily add them to tests.</source>
          <target state="translated">&lt;code&gt;data-test&lt;/code&gt; や &lt;code&gt;data-qa&lt;/code&gt; などの特別な属性を持つアクティブな要素に関する規則がある場合はさらに良いでしょう。 &lt;code&gt;customLocator&lt;/code&gt; プラグインを使用して、それらをテストに簡単に追加します。</target>
        </trans-unit>
        <trans-unit id="842377156503364f6a89a012c72844568f08f8b6" translate="yes" xml:space="preserve">
          <source>Event Listeners</source>
          <target state="translated">イベントリスナー</target>
        </trans-unit>
        <trans-unit id="7064d89574ec13bcecd8a38c49d4b251c411b686" translate="yes" xml:space="preserve">
          <source>Every Scenario inside this feature will be rerun 3 times. You can make an exception for a specific scenario by passing &lt;code&gt;retries&lt;/code&gt; option to a Scenario.</source>
          <target state="translated">この機能内のすべてのシナリオが3回再実行されます。シナリオに &lt;code&gt;retries&lt;/code&gt; オプションを渡すことにより、特定のシナリオの例外を作成できます。</target>
        </trans-unit>
        <trans-unit id="f321b43b95dc1090c5558a73586c4b8a09dfc91d" translate="yes" xml:space="preserve">
          <source>Every Scenario inside this feature will be rerun 3 times. You can make an exception for a specific scenario by passing the &lt;code&gt;retries&lt;/code&gt; option to a Scenario.</source>
          <target state="translated">この機能内のすべてのシナリオは3回再実行されます。 &lt;code&gt;retries&lt;/code&gt; オプションをシナリオに渡すことにより、特定のシナリオの例外を作成できます。</target>
        </trans-unit>
        <trans-unit id="0f01ed56a1e32a05e5ef96e4d779f34784af9a96" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Example</target>
        </trans-unit>
        <trans-unit id="84973f83e987f0f19651e2ef2af4db8603363d93" translate="yes" xml:space="preserve">
          <source>Example #1: Show chrome browser window</source>
          <target state="translated">例1:クロームブラウザのウィンドウを表示する</target>
        </trans-unit>
        <trans-unit id="974f4f7a3e6a1b1f2c60a96dc5b4eed60fe74a1b" translate="yes" xml:space="preserve">
          <source>Example #1: Wait for 0 network connections.</source>
          <target state="translated">例1:ネットワーク接続が0になるまで待つ。</target>
        </trans-unit>
        <trans-unit id="f6c177849819237a06e39a65c4079b80e029a63d" translate="yes" xml:space="preserve">
          <source>Example #2: Remote browser connection</source>
          <target state="translated">例2:リモートブラウザ接続</target>
        </trans-unit>
        <trans-unit id="74b25fc58a58dd579255cc83816a2d7a16a028b4" translate="yes" xml:space="preserve">
          <source>Example #2: Wait for DOMContentLoaded event</source>
          <target state="translated">例2:DOMContentLoaded イベントを待つ</target>
        </trans-unit>
        <trans-unit id="b130dc4c616121ade2e2655dcf125ff293195c2b" translate="yes" xml:space="preserve">
          <source>Example #2: Wait for DOMContentLoaded event and 0 network connections</source>
          <target state="translated">例2:DOMContentLoaded イベントと 0 ネットワーク接続を待つ</target>
        </trans-unit>
        <trans-unit id="c6ea025f5a8cefbd3cfc48b0b449c4ca9d0bef33" translate="yes" xml:space="preserve">
          <source>Example #3: Debug in window mode</source>
          <target state="translated">例3:ウィンドウモードでのデバッグ</target>
        </trans-unit>
        <trans-unit id="498a43887ceeee51e72caac6d5d4f41e35644227" translate="yes" xml:space="preserve">
          <source>Example #4: Connect to remote browser by specifying &lt;a href=&quot;https://chromedevtools.github.io/devtools-protocol/#how-do-i-access-the-browser-target&quot;&gt;websocket endpoint (opens new window)&lt;/a&gt;</source>
          <target state="translated">例4：&lt;a href=&quot;https://chromedevtools.github.io/devtools-protocol/#how-do-i-access-the-browser-target&quot;&gt;WebSocketエンドポイントを&lt;/a&gt;指定してリモートブラウザーに接続します（新しいウィンドウを開きます）</target>
        </trans-unit>
        <trans-unit id="4c90362e0715f7e15d074fa159704e2470da9c95" translate="yes" xml:space="preserve">
          <source>Example #5: Target URL with provided basic authentication</source>
          <target state="translated">例5:提供された基本認証を使用したターゲットURL</target>
        </trans-unit>
        <trans-unit id="a04ddf46f7363c73008727be8649be31e1b36583" translate="yes" xml:space="preserve">
          <source>Example #5: Testing with Chromium extensions</source>
          <target state="translated">例5:Chromium 拡張機能を使ったテスト</target>
        </trans-unit>
        <trans-unit id="902ee93c62c1ab8f8abed0c50391d261f2296a9c" translate="yes" xml:space="preserve">
          <source>Example #6: Launch tests emulating iPhone 6</source>
          <target state="translated">例6:iPhone 6をエミュレートしたテストを起動する</target>
        </trans-unit>
        <trans-unit id="795c3ef48a125c0828802cb421a408b855044dc7" translate="yes" xml:space="preserve">
          <source>Example (&lt;code&gt;endpoint&lt;/code&gt;: &lt;code&gt;http://app.com/api&lt;/code&gt;):</source>
          <target state="translated">例（ &lt;code&gt;endpoint&lt;/code&gt; ： &lt;code&gt;http://app.com/api&lt;/code&gt; : //app.com/api）：</target>
        </trans-unit>
        <trans-unit id="c5d7bb5db87eb76d2cc8726b6f78f8a92074b5bd" translate="yes" xml:space="preserve">
          <source>Example with basic authentication</source>
          <target state="translated">基本認証を利用した例</target>
        </trans-unit>
        <trans-unit id="bf02117dce9ae813f1c81d175bba75abd9f01987" translate="yes" xml:space="preserve">
          <source>Example with jQuery DatePicker:</source>
          <target state="translated">jQuery DatePickerを使った例。</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="f746d333456637127a33afbca6d27c23de42c3a1" translate="yes" xml:space="preserve">
          <source>Example: Async Bootstrap in a Function</source>
          <target state="translated">例。関数内の非同期ブートストラップ</target>
        </trans-unit>
        <trans-unit id="93c5b0d72358ab87ef8418112f3fdb606cd78253" translate="yes" xml:space="preserve">
          <source>Example: Async Teardown in a Function</source>
          <target state="translated">例。関数内での非同期ティアダウン</target>
        </trans-unit>
        <trans-unit id="b85137a7ed95f1126efa9f9682b4c8c3a02f40f7" translate="yes" xml:space="preserve">
          <source>Example: Bootstrap &amp;amp; Teardown Inside Config</source>
          <target state="translated">例：構成内のブートストラップとティアダウン</target>
        </trans-unit>
        <trans-unit id="f0223d589441365ff73b372d69ed0ba1ca2a5ba5" translate="yes" xml:space="preserve">
          <source>Example: Bootstrap &amp;amp; Teardown Inside an Object</source>
          <target state="translated">例：オブジェクト内のブートストラップとティアダウン</target>
        </trans-unit>
        <trans-unit id="c994e5535d0a38a34dad78312cc0aed6bae6a0d3" translate="yes" xml:space="preserve">
          <source>Example: BootstrapAll &amp;amp; TeardownAll Inside Config</source>
          <target state="translated">例：BootstrapAll＆TeardownAll Inside Config</target>
        </trans-unit>
        <trans-unit id="025f877955cfbf88f6ad791c950cc975f4cbf9ae" translate="yes" xml:space="preserve">
          <source>Example: Execute code for a specific group of tests</source>
          <target state="translated">例。特定のテストグループのコードを実行する</target>
        </trans-unit>
        <trans-unit id="be9f9755f7a36c8d68a6b6bc62cedc6d28578bdc" translate="yes" xml:space="preserve">
          <source>Example: Getting sessions from local storage</source>
          <target state="translated">例。ローカルストレージからのセッションの取得</target>
        </trans-unit>
        <trans-unit id="2fde1a159372e6bdb65e1d6e0a54e3e536cfa5c1" translate="yes" xml:space="preserve">
          <source>Example: In Vue.js to make components completely rendered we are waiting for &lt;a href=&quot;https://vuejs.org/v2/api/#Vue-nextTick&quot;&gt;nextTick (opens new window)&lt;/a&gt;.</source>
          <target state="translated">例：Vue.jsでコンポーネントを完全にレンダリングするために、&lt;a href=&quot;https://vuejs.org/v2/api/#Vue-nextTick&quot;&gt;nextTick（新しいウィンドウを開く）を&lt;/a&gt;待っています。</target>
        </trans-unit>
        <trans-unit id="3e7619080cfc2199d8e5b4428701355ed38056b8" translate="yes" xml:space="preserve">
          <source>Example: In Vue.js to make components completely rendered we are waiting for &lt;a href=&quot;https://vuejs.org/v2/api/#Vue-nextTick&quot;&gt;nextTick&lt;/a&gt;.</source>
          <target state="translated">例：Vue.jsでコンポーネントを完全にレンダリングするために、&lt;a href=&quot;https://vuejs.org/v2/api/#Vue-nextTick&quot;&gt;nextTick&lt;/a&gt;を待っています。</target>
        </trans-unit>
        <trans-unit id="706dda6db24f09558f6f47bc71e7da2bf8622162" translate="yes" xml:space="preserve">
          <source>Example: Keep cookies between tests</source>
          <target state="translated">例。テスト間でクッキーを保持する</target>
        </trans-unit>
        <trans-unit id="01137375b75f20d4a4e89bc6bb2f3d97b20fb6d7" translate="yes" xml:space="preserve">
          <source>Example: Multiple users</source>
          <target state="translated">例.複数のユーザー</target>
        </trans-unit>
        <trans-unit id="29a6ba5ea9f671f0c90e6e59d63da78986e9e3fe" translate="yes" xml:space="preserve">
          <source>Example: Retrying rendering errors in Puppeteer.</source>
          <target state="translated">例。Puppeteerでレンダリングエラーを再試行する</target>
        </trans-unit>
        <trans-unit id="1e2f107f05676c0894c0a0b879faaf5939071752" translate="yes" xml:space="preserve">
          <source>Example: Running Tests Split By A Custom Function</source>
          <target state="translated">例。カスタム関数で分割されたテストの実行</target>
        </trans-unit>
        <trans-unit id="5de4652789fdea73ae886a0d6a80b3579f6fe12b" translate="yes" xml:space="preserve">
          <source>Example: Running tests in 2 browsers in 4 threads</source>
          <target state="translated">例。2つのブラウザで4つのスレッドでテストを実行</target>
        </trans-unit>
        <trans-unit id="70868d3d5f764d8de8b7d0af00824c3f1067a73f" translate="yes" xml:space="preserve">
          <source>Example: Simple login</source>
          <target state="translated">例.簡単なログイン</target>
        </trans-unit>
        <trans-unit id="eb01bf04c9a0e8a71c45816513df424f1c7ffedb" translate="yes" xml:space="preserve">
          <source>Examples</source>
          <target state="translated">Examples</target>
        </trans-unit>
        <trans-unit id="3aa2550ed9cc1cd58bde281f2a9c4a5b5a035f22" translate="yes" xml:space="preserve">
          <source>Examples above can be combined into one file.</source>
          <target state="translated">上記の例は、1つのファイルにまとめることができます。</target>
        </trans-unit>
        <trans-unit id="fb3447b632f6a431215776dcf254a01001a40c4f" translate="yes" xml:space="preserve">
          <source>Examples:</source>
          <target state="translated">Examples:</target>
        </trans-unit>
        <trans-unit id="1a4c16de436878ac88aca79050e36fcdfcd96c6b" translate="yes" xml:space="preserve">
          <source>Execute CodeceptJS with HTML reporter:</source>
          <target state="translated">HTMLレポーターでCodeceptJSを実行します。</target>
        </trans-unit>
        <trans-unit id="42634eb1d0f2b2c1d5b3982f6703cba859dbda66" translate="yes" xml:space="preserve">
          <source>Execute CodeceptJS with JUnit reporter:</source>
          <target state="translated">JUnit reporterでCodeceptJSを実行します。</target>
        </trans-unit>
        <trans-unit id="163771ecee75f9b346ecc36ee6e945a383cb287a" translate="yes" xml:space="preserve">
          <source>Execute CodeceptJS with mocha-multi reporter:</source>
          <target state="translated">モカマルチレポーターでCodeceptJSを実行します。</target>
        </trans-unit>
        <trans-unit id="918babdec0cd26574027399d696b441528754438" translate="yes" xml:space="preserve">
          <source>Execute a test &amp;amp; use interactive pause to see how CodeceptJS works</source>
          <target state="translated">テストを実行し、インタラクティブな一時停止を使用して、CodeceptJSがどのように機能するかを確認します</target>
        </trans-unit>
        <trans-unit id="af52779a8da1d280d635eb20f5e95da954ac7603" translate="yes" xml:space="preserve">
          <source>Execute code only in Web mode.</source>
          <target state="translated">Web モードでのみコードを実行します。</target>
        </trans-unit>
        <trans-unit id="852722f39a3efb4993fd75420e67cff5cf421837" translate="yes" xml:space="preserve">
          <source>Execute code only on Android</source>
          <target state="translated">Androidでのみコードを実行する</target>
        </trans-unit>
        <trans-unit id="b3c3d1c320f0389a41bab5a236a0fb9118be4d6e" translate="yes" xml:space="preserve">
          <source>Execute code only on iOS</source>
          <target state="translated">iOSでのみコードを実行する</target>
        </trans-unit>
        <trans-unit id="573cada6bf4847b6a31866c5025dccdb3af6ab47" translate="yes" xml:space="preserve">
          <source>Execute the same scenario on a different data set.</source>
          <target state="translated">異なるデータセットで同じシナリオを実行します。</target>
        </trans-unit>
        <trans-unit id="fe0ca8fcb3be46342993a4d29b13b4ac7e45b325" translate="yes" xml:space="preserve">
          <source>Executes a script on the page:</source>
          <target state="translated">ページ上でスクリプトを実行します。</target>
        </trans-unit>
        <trans-unit id="0784d6958bc6e86666f8a5bf9bbcb2418913fac5" translate="yes" xml:space="preserve">
          <source>Executes async script on page. Provided function should execute a passed callback (as first argument) to signal it is finished.</source>
          <target state="translated">ページ上で非同期スクリプトを実行します。提供される関数は、それが終了したことを示すために、渡されたコールバックを(第一引数として)実行しなければなりません。</target>
        </trans-unit>
        <trans-unit id="bd6e1be3c092f8f93836a8e0079c4158cc094fa3" translate="yes" xml:space="preserve">
          <source>Executes axios request</source>
          <target state="translated">アクシオス要求を実行します。</target>
        </trans-unit>
        <trans-unit id="7878c4912602adf25ac94da6132835bfdbcec7d5" translate="yes" xml:space="preserve">
          <source>Executes query via axios call</source>
          <target state="translated">アクシオス呼び出しでクエリを実行します。</target>
        </trans-unit>
        <trans-unit id="e32c18964551903e96a90709c8c7a3922461c711" translate="yes" xml:space="preserve">
          <source>Executes request to create a record in API. Can be replaced from a in custom helper.</source>
          <target state="translated">APIでレコードを作成するためのリクエストを実行します。カスタムヘルパーで置き換えることができます。</target>
        </trans-unit>
        <trans-unit id="d1024bb75ae84e495d1b2c7f36bc61299a101478" translate="yes" xml:space="preserve">
          <source>Executes request to create a record to the GraphQL endpoint. Can be replaced from a custom helper.</source>
          <target state="translated">GraphQLエンドポイントにレコードを作成するリクエストを実行します。カスタムヘルパーから置き換えることができます。</target>
        </trans-unit>
        <trans-unit id="5bc2960d5947d18be247de1f6dbdc6539fdf4517" translate="yes" xml:space="preserve">
          <source>Executes request to delete a record in API Can be replaced from a custom helper.</source>
          <target state="translated">API内のレコードの削除要求を実行します。 カスタムヘルパーから置き換えることができます。</target>
        </trans-unit>
        <trans-unit id="2700272c1fb16752ff4a1215da5c2904c86ffefe" translate="yes" xml:space="preserve">
          <source>Executes request to delete a record to the GraphQL endpoint. Can be replaced from a custom helper.</source>
          <target state="translated">GraphQLエンドポイントにレコードを削除するリクエストを実行します。カスタムヘルパーで置き換えることができます。</target>
        </trans-unit>
        <trans-unit id="8591200d7f3aae265761b5934ae2fb6993289668" translate="yes" xml:space="preserve">
          <source>Executes sync script on a page. Pass arguments to function as additional parameters. Will return execution result to a test. In this case you should use async function and await to receive results.</source>
          <target state="translated">ページ上で同期スクリプトを実行します。引数を追加パラメータとして関数に渡します。実行結果をテストに返します。この場合は非同期関数を使用して結果を待つ必要があります。</target>
        </trans-unit>
        <trans-unit id="03df8bd0ccd3c1d073b7dc335808c534d2563b46" translate="yes" xml:space="preserve">
          <source>Executes tests. Requires &lt;code&gt;codecept.conf.js&lt;/code&gt; config to be present in provided path.</source>
          <target state="translated">テストを実行します。 &lt;code&gt;codecept.conf.js&lt;/code&gt; 構成が提供されたパスに存在する必要があります。</target>
        </trans-unit>
        <trans-unit id="cb3336b08004bcc0244ec67cb4fe7eda323d63a2" translate="yes" xml:space="preserve">
          <source>Executes tests. Requires &lt;code&gt;codecept.json&lt;/code&gt; config to be present in provided path.</source>
          <target state="translated">テストを実行します。提供されたパスに &lt;code&gt;codecept.json&lt;/code&gt; 構成が存在する必要があります。</target>
        </trans-unit>
        <trans-unit id="008ef1571df3d0c6b17b5fc938f5918d15538c9b" translate="yes" xml:space="preserve">
          <source>Executes unirest request</source>
          <target state="translated">unirestリクエストを実行します。</target>
        </trans-unit>
        <trans-unit id="37ca62594e54440404d580c99700f28a202d3b93" translate="yes" xml:space="preserve">
          <source>Experimental Firefox support &lt;a href=&quot;https://codecept.io/helpers/Puppeteer-firefox&quot;&gt;can be activated (opens new window)&lt;/a&gt;.</source>
          <target state="translated">実験的なFirefoxサポート&lt;a href=&quot;https://codecept.io/helpers/Puppeteer-firefox&quot;&gt;をアクティブ化できます（新しいウィンドウが開きます）&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="63aca66709254bbd01bb413414ca0c828dde5fef" translate="yes" xml:space="preserve">
          <source>Export a function in your bootstrap file:</source>
          <target state="translated">ブートストラップファイルの関数をエクスポートします。</target>
        </trans-unit>
        <trans-unit id="4be9a4abd6d7c8083fc1a7bf9004e653250a9ba5" translate="yes" xml:space="preserve">
          <source>Extending</source>
          <target state="translated">Extending</target>
        </trans-unit>
        <trans-unit id="9b061eda3a9723a34d305dea85a4f735821bc11c" translate="yes" xml:space="preserve">
          <source>Extending CodeceptJS With Custom Helpers</source>
          <target state="translated">カスタムヘルパーでCodeceptJSを拡張する</target>
        </trans-unit>
        <trans-unit id="ed7c8a4c0bd00228b9e4dac6c3d39b5da66efbc0" translate="yes" xml:space="preserve">
          <source>Extending Helper</source>
          <target state="translated">拡張ヘルパー</target>
        </trans-unit>
        <trans-unit id="1ff5eb9d74262d22e846ce9e5a89b743f7b5bca2" translate="yes" xml:space="preserve">
          <source>Extending Nightmare Helper</source>
          <target state="translated">拡張ナイトメアヘルパー</target>
        </trans-unit>
        <trans-unit id="a747ab1adb565f0428f5525fda503d8d95dc9f43" translate="yes" xml:space="preserve">
          <source>Extending WebDriver</source>
          <target state="translated">WebDriverの拡張</target>
        </trans-unit>
        <trans-unit id="e47b9b1021034a56b7d5f70d92d0481524e78f69" translate="yes" xml:space="preserve">
          <source>Factory</source>
          <target state="translated">Factory</target>
        </trans-unit>
        <trans-unit id="83fd8dd40290a5d0013d0d883a192929d5253f82" translate="yes" xml:space="preserve">
          <source>Factory contains operations -</source>
          <target state="translated">工場には操作が含まれています。</target>
        </trans-unit>
        <trans-unit id="fc338f87a058158eb824b53705961801516a9460" translate="yes" xml:space="preserve">
          <source>Features</source>
          <target state="translated">Features</target>
        </trans-unit>
        <trans-unit id="124560019bec9fd8e042cfb639c612be772c786f" translate="yes" xml:space="preserve">
          <source>Features and Scenarios have their options that can be set by passing a hash after their names:</source>
          <target state="translated">機能とシナリオには、それらの名前の後にハッシュを渡すことで設定できるオプションがあります。</target>
        </trans-unit>
        <trans-unit id="5b839ad3493d406351d352cf1b14b94b43e349ff" translate="yes" xml:space="preserve">
          <source>Fetches id of a record after it was created by &lt;code&gt;have&lt;/code&gt;. By default fetched &lt;code&gt;id&lt;/code&gt; attribute from JSON body.</source>
          <target state="translated">&lt;code&gt;have&lt;/code&gt; によって作成された後のレコードのIDをフェッチします。デフォルトでは、JSON本文から取得された &lt;code&gt;id&lt;/code&gt; 属性。</target>
        </trans-unit>
        <trans-unit id="c3608a99d56a768b532538fc02930d3ff701d84a" translate="yes" xml:space="preserve">
          <source>FileSystem</source>
          <target state="translated">FileSystem</target>
        </trans-unit>
        <trans-unit id="ba402ea6ba5e49f98e82d0fa1a40baadaf09338c" translate="yes" xml:space="preserve">
          <source>Filename or directory can be customized. You are creating your own custom runner so take this paragraph as an example.</source>
          <target state="translated">ファイル名やディレクトリをカスタマイズすることができます。あなたは独自のカスタムランナーを作成しているので、この段落を例にしてみましょう。</target>
        </trans-unit>
        <trans-unit id="7922019330a2a1fe840afff3e18d2115f710f102" translate="yes" xml:space="preserve">
          <source>Filling Fields</source>
          <target state="translated">フィールドの充填</target>
        </trans-unit>
        <trans-unit id="9ed781de30d230f9def709cbfbc0050aa3dc3e16" translate="yes" xml:space="preserve">
          <source>Fills a text field or textarea, after clearing its value, with the given string. Field is located by name, label, CSS, or XPath.</source>
          <target state="translated">テキスト・フィールドまたはテキスト・エリアに、その値をクリアした後、指定された文字列を入力します。フィールドは、名前、ラベル、CSS、または XPath で指定します。</target>
        </trans-unit>
        <trans-unit id="4260211de297b66d2c28ec4c1dee34e01adae920" translate="yes" xml:space="preserve">
          <source>Fills in text field in an app. A field can be located by text, accessibility id, id.</source>
          <target state="translated">アプリ内のテキストフィールドを埋めます。フィールドは、テキスト、アクセシビリティID、IDで配置することができます。</target>
        </trans-unit>
        <trans-unit id="d7decf1aa22b02ae8abf9a96849ee423eee838e4" translate="yes" xml:space="preserve">
          <source>Filter</source>
          <target state="translated">Filter</target>
        </trans-unit>
        <trans-unit id="ef815523161440f436f0270f8714169408e5b6b9" translate="yes" xml:space="preserve">
          <source>Find a checkbox by providing human readable text:</source>
          <target state="translated">人間が読めるテキストを提供することで、チェックボックスを検索します。</target>
        </trans-unit>
        <trans-unit id="e57ab832d2f2bec1a527ca754f2c75729e64c66e" translate="yes" xml:space="preserve">
          <source>Find a checkbox by providing human readable text: NOTE: Assumes the checkable element exists</source>
          <target state="translated">人間が読めるテキストを提供してチェックボックスを見つけます。NOTE:チェック可能な要素が存在することを前提としています。</target>
        </trans-unit>
        <trans-unit id="ec70ae9300c4e4d1887d081018468d8a6b76ad91" translate="yes" xml:space="preserve">
          <source>Find a clickable element by providing human readable text:</source>
          <target state="translated">人間が読めるテキストを提供することで、クリック可能な要素を探します。</target>
        </trans-unit>
        <trans-unit id="0131672cf1183b78b239d280d3bd694bb7c563f5" translate="yes" xml:space="preserve">
          <source>Find an element with provided attributes</source>
          <target state="translated">提供された属性を持つ要素を探す</target>
        </trans-unit>
        <trans-unit id="b7d1a4fc51ae6e2b4a2dfef72d7bf0eb07b569f5" translate="yes" xml:space="preserve">
          <source>Find field elements by providing human readable text:</source>
          <target state="translated">人間が読めるテキストを提供してフィールド要素を検索します。</target>
        </trans-unit>
        <trans-unit id="ec229e87ef518cf91751ebb5627e5a5877cc9457" translate="yes" xml:space="preserve">
          <source>Finds an element inside a located.</source>
          <target state="translated">ロケーション内の要素を検索します。</target>
        </trans-unit>
        <trans-unit id="50b13e4858e0375536ca2620aa65c97baa39da6b" translate="yes" xml:space="preserve">
          <source>Finds an element which contains a child element provided:</source>
          <target state="translated">提供された子要素を含む要素を検索します。</target>
        </trans-unit>
        <trans-unit id="b87dbd3e6af45f086d688c13501957496997680e" translate="yes" xml:space="preserve">
          <source>Finds an element which contains a descendant element provided:</source>
          <target state="translated">提供された子孫要素を含む要素を検索します。</target>
        </trans-unit>
        <trans-unit id="312d4c8b0f393000c81bdb691071670ef9306e6d" translate="yes" xml:space="preserve">
          <source>Finds an element which contains an provided ancestor:</source>
          <target state="translated">提供された祖先を含む要素を検索します。</target>
        </trans-unit>
        <trans-unit id="60046dc7ca02d13ac7f8b935e4abfc2dc8af28da" translate="yes" xml:space="preserve">
          <source>Finds element containing a text</source>
          <target state="translated">テキストを含む要素を探す</target>
        </trans-unit>
        <trans-unit id="a6cd2753909f66d5e3bb00974d70e4df7d256f30" translate="yes" xml:space="preserve">
          <source>Finds element located after the provided one</source>
          <target state="translated">指定された要素の後に位置する要素を見つける</target>
        </trans-unit>
        <trans-unit id="a0c4b55dd0a6dfaedddc67549649e3c71acd5465" translate="yes" xml:space="preserve">
          <source>Finds element located before the provided one</source>
          <target state="translated">指定された要素の前に位置する要素を見つける</target>
        </trans-unit>
        <trans-unit id="b4ee6522335b033249255b4cc1d572993282aafb" translate="yes" xml:space="preserve">
          <source>Firefox</source>
          <target state="translated">Firefox</target>
        </trans-unit>
        <trans-unit id="0f157bba48b225c907d1b829951adbc37d3c8ab1" translate="yes" xml:space="preserve">
          <source>First argument is a description of an action. Second argument is async function that gets this helper as parameter.</source>
          <target state="translated">第一引数はアクションの記述です。第二引数はこのヘルパーをパラメータとして取得する非同期関数です。</target>
        </trans-unit>
        <trans-unit id="53ba5db881b82e35bf23f985955c1463a78a3ce9" translate="yes" xml:space="preserve">
          <source>First of all, your mileage may vary!</source>
          <target state="translated">まず、走行距離が違うかもしれません!</target>
        </trans-unit>
        <trans-unit id="a44c05013e70851894145371ec5340ba4e15b449" translate="yes" xml:space="preserve">
          <source>First test can be generated with &lt;code&gt;gt&lt;/code&gt; command:</source>
          <target state="translated">最初のテストは &lt;code&gt;gt&lt;/code&gt; コマンドで生成できます：</target>
        </trans-unit>
        <trans-unit id="4cf18384ba4b93b8535aa4a9f7ae8fbeb1dfe1a5" translate="yes" xml:space="preserve">
          <source>Fix flaky tests by rerunning them.</source>
          <target state="translated">欠陥のあるテストを再実行することで修正します。</target>
        </trans-unit>
        <trans-unit id="33d464c7750f24ad09d58f9c1c93108cbaba2b2e" translate="yes" xml:space="preserve">
          <source>Focus on Readability</source>
          <target state="translated">読みやすさを重視</target>
        </trans-unit>
        <trans-unit id="60369a4aa817bf9b7a762b4afaf1aaca51ef3447" translate="yes" xml:space="preserve">
          <source>For &lt;a href=&quot;https://codecept.io/mobile-react-native-locators&quot;&gt;React Native for Android see our special guide&lt;/a&gt;.</source>
          <target state="translated">以下のため&lt;a href=&quot;https://codecept.io/mobile-react-native-locators&quot;&gt;のAndroidのネイティブ反応し、私たちの特別なガイドを参照してください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="84e46b99cfe15e7b6b74ffc45925d529aa497cc8" translate="yes" xml:space="preserve">
          <source>For Android you can use &lt;strong&gt;UI Automator Viewer&lt;/strong&gt; bundled with Android SDK:</source>
          <target state="translated">Androidの場合、Android SDKにバンドルされている&lt;strong&gt;UI Automator Viewer&lt;/strong&gt;を使用できます。</target>
        </trans-unit>
        <trans-unit id="e84b67bae4f2881a219056ccf627fcfb609c196a" translate="yes" xml:space="preserve">
          <source>For React apps a special &lt;code&gt;react&lt;/code&gt; locator is available. It allows to select an element by its component name, props and state.</source>
          <target state="translated">アプリケーションに反応するために特別に &lt;code&gt;react&lt;/code&gt; ロケータが可能です。コンポーネント名、小道具、状態で要素を選択できます。</target>
        </trans-unit>
        <trans-unit id="50787e4299832274c39753496eb7ed2ddef0968e" translate="yes" xml:space="preserve">
          <source>For TodoMVC application you will have following config created in &lt;code&gt;codecept.json&lt;/code&gt; file:</source>
          <target state="translated">TodoMVCアプリケーションの場合、 &lt;code&gt;codecept.json&lt;/code&gt; ファイルに次の構成が作成されます。</target>
        </trans-unit>
        <trans-unit id="9a83e175fc70164c5658a96beafc885682c1206a" translate="yes" xml:space="preserve">
          <source>For TodoMVC application, you will have following config created in the &lt;code&gt;codecept.conf.js&lt;/code&gt; file:</source>
          <target state="translated">TodoMVCアプリケーションの場合、 &lt;code&gt;codecept.conf.js&lt;/code&gt; ファイルに次の構成が作成されます。</target>
        </trans-unit>
        <trans-unit id="400d9547e7358bee707c338242b28d3ac9e217c4" translate="yes" xml:space="preserve">
          <source>For Visual Studio Code, add the following configuration in launch.json:</source>
          <target state="translated">Visual Studio Codeの場合は、launch.jsonに以下の設定を追加します。</target>
        </trans-unit>
        <trans-unit id="0437b78c7521bbe5c0bc585e437e6d50d413cc6e" translate="yes" xml:space="preserve">
          <source>For advanced debugging use NodeJS debugger. In WebStorm IDE:</source>
          <target state="translated">高度なデバッグには、NodeJSデバッガを使用してください。WebStorm IDEで。</target>
        </trans-unit>
        <trans-unit id="167f48e28cf91713d1ed33c720fb3e9eea3bad1a" translate="yes" xml:space="preserve">
          <source>For better development experience cookies can be saved into file, so a session can be reused while writing tests.</source>
          <target state="translated">より良い開発体験のために、クッキーをファイルに保存することができるので、テストを書いている間にセッションを再利用することができます。</target>
        </trans-unit>
        <trans-unit id="be05b48762d776da22c184be625b25ef297b3678" translate="yes" xml:space="preserve">
          <source>For dynamic step-by-step output add &lt;code&gt;--steps&lt;/code&gt; option to &lt;code&gt;run&lt;/code&gt; command:</source>
          <target state="translated">動的な段階的な出力の場合、コマンドを &lt;code&gt;run&lt;/code&gt; するための &lt;code&gt;--steps&lt;/code&gt; オプションを追加します。</target>
        </trans-unit>
        <trans-unit id="6db6725e9e7d5c088630e348048d1e73fc7657d3" translate="yes" xml:space="preserve">
          <source>For example,</source>
          <target state="translated">例えば</target>
        </trans-unit>
        <trans-unit id="58e471ab3d2f68d7828bd8e2dbcf7005d51ada39" translate="yes" xml:space="preserve">
          <source>For example, here's the heuristic used for the &lt;code&gt;fillField&lt;/code&gt; method:</source>
          <target state="translated">たとえば、 &lt;code&gt;fillField&lt;/code&gt; メソッドに使用されるヒューリスティックは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="fa0866c55ce55b93803eb910826b300ab1076b4c" translate="yes" xml:space="preserve">
          <source>For example, if you add the new step &lt;code&gt;printMessage&lt;/code&gt; for your custom helper like this:</source>
          <target state="translated">たとえば、次のようにカスタムヘルパーの新しいステップ &lt;code&gt;printMessage&lt;/code&gt; を追加した場合：</target>
        </trans-unit>
        <trans-unit id="b5ea285c804baa2ecb90059809d4bd3767c6fa8c" translate="yes" xml:space="preserve">
          <source>For further reference look for &lt;a href=&quot;https://github.com/Codeception/CodeceptJS/tree/master/lib/listener&quot;&gt;currently available listeners&lt;/a&gt; using event system.</source>
          <target state="translated">詳細については、イベントシステムを使用して&lt;a href=&quot;https://github.com/Codeception/CodeceptJS/tree/master/lib/listener&quot;&gt;現在利用可能なリスナー&lt;/a&gt;を探してください。</target>
        </trans-unit>
        <trans-unit id="a3ffe753eeda5a8796ab59ecfa4fe9ec55377762" translate="yes" xml:space="preserve">
          <source>For instance, if you click a button and nothing happens - probably JS event is not attached to this button yet Also, if you fill field and input validation doesn't accept your input - maybe because you typed value too fast.</source>
          <target state="translated">例えば、ボタンをクリックしても何も起こらない場合は、JSイベントがまだこのボタンにアタッチされていない可能性があります。また、フィールドを入力しても入力検証が受け付けない場合は、値を入力するのが早すぎたのかもしれません。</target>
        </trans-unit>
        <trans-unit id="18cc4443d8e08c991540d70a25ea62c0ef513dec" translate="yes" xml:space="preserve">
          <source>For instance, to perform a click with Playwright helper, do it like this:</source>
          <target state="translated">例えば、Playwrightヘルパーでクリックを実行するには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="6a2f10fc94232e7c4ba8a609ef4220017916d7b6" translate="yes" xml:space="preserve">
          <source>For instance, with the config above we can change browser value using &lt;code&gt;profile&lt;/code&gt; option</source>
          <target state="translated">たとえば、上記の設定では、 &lt;code&gt;profile&lt;/code&gt; オプションを使用してブラウザの値を変更できます</target>
        </trans-unit>
        <trans-unit id="0a50461138513a00928fb0e8ea534b506181e823" translate="yes" xml:space="preserve">
          <source>For instance, you can set the window size or toggle headless mode, no matter of which helpers are actually used.</source>
          <target state="translated">例えば、実際にどのヘルパーが使われていても、ウィンドウサイズを設定したり、ヘッドレスモードを切り替えたりすることができます。</target>
        </trans-unit>
        <trans-unit id="0d24c11b96441821ea9b3fb589ac7067478e41ab" translate="yes" xml:space="preserve">
          <source>For more details on locator object see &lt;a href=&quot;https://github.com/codeceptjs/CodeceptJS/blob/master/lib/locator.js&quot;&gt;Locator (opens new window)&lt;/a&gt; class implementation.</source>
          <target state="translated">ロケーターオブジェクトの詳細については、&lt;a href=&quot;https://github.com/codeceptjs/CodeceptJS/blob/master/lib/locator.js&quot;&gt;ロケーター（新しいウィンドウを開く）&lt;/a&gt;クラスの実装を参照してください。</target>
        </trans-unit>
        <trans-unit id="deb734b9fdf0577f92e02b3f6a106a07db39eb48" translate="yes" xml:space="preserve">
          <source>For more options see &lt;a href=&quot;https://codecept.io/commands/#run&quot;&gt;full reference of &lt;code&gt;run&lt;/code&gt; command&lt;/a&gt;.</source>
          <target state="translated">その他のオプションについて&lt;a href=&quot;https://codecept.io/commands/#run&quot;&gt;は、 &lt;code&gt;run&lt;/code&gt; commandの完全なリファレンスを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="3f3217ce17d04bee92d9b044f3f3a25cfe353e2b" translate="yes" xml:space="preserve">
          <source>For more options see &lt;a href=&quot;https://github.com/rosiejs/rosie&quot;&gt;rosie documentation (opens new window)&lt;/a&gt;.</source>
          <target state="translated">その他のオプションについては、&lt;a href=&quot;https://github.com/rosiejs/rosie&quot;&gt;rosieのドキュメント（新しいウィンドウを開きます）を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="7ea39ae52a1e25abda1d96aa3ab23bece180f404" translate="yes" xml:space="preserve">
          <source>For more options see &lt;a href=&quot;https://github.com/rosiejs/rosie&quot;&gt;rosie documentation&lt;/a&gt;.</source>
          <target state="translated">その他のオプションについては、&lt;a href=&quot;https://github.com/rosiejs/rosie&quot;&gt;rosieのドキュメントを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="13686c4d0313b5c054ebd045b99fcffea4dcc1ba" translate="yes" xml:space="preserve">
          <source>For most helpers basic actions like &lt;code&gt;amOnPage&lt;/code&gt;, &lt;code&gt;fillField&lt;/code&gt;, &lt;code&gt;click&lt;/code&gt; are the same. Proceed to &lt;a href=&quot;https://codecept.io/acceptance/&quot;&gt;Acceptance Testing Chapter&lt;/a&gt; to learn how to use them.</source>
          <target state="translated">&lt;code&gt;amOnPage&lt;/code&gt; 、 &lt;code&gt;fillField&lt;/code&gt; 、 &lt;code&gt;click&lt;/code&gt; などのほとんどのヘルパー基本アクションは同じです。それらの使用方法については、&lt;a href=&quot;https://codecept.io/acceptance/&quot;&gt;受け入れテストの章&lt;/a&gt;に進んでください。</target>
        </trans-unit>
        <trans-unit id="14bfd75a8c3b3522c6e317ccc2c3be4ce2d99fb3" translate="yes" xml:space="preserve">
          <source>For specifying operation modifier key based on operating system it is suggested to use &lt;code&gt;'CommandOrControl'&lt;/code&gt;. This will press &lt;code&gt;'Command'&lt;/code&gt; (also known as &lt;code&gt;'Meta'&lt;/code&gt;) on macOS machines and &lt;code&gt;'Control'&lt;/code&gt; on non-macOS machines.</source>
          <target state="translated">オペレーティングシステムに基づいて操作修飾キーを指定するには、 &lt;code&gt;'CommandOrControl'&lt;/code&gt; を使用することをお勧めします。これにより、macOSマシンでは &lt;code&gt;'Command'&lt;/code&gt; （ &lt;code&gt;'Meta'&lt;/code&gt; も呼ばれます）が押され、非macOSマシンでは &lt;code&gt;'Control'&lt;/code&gt; が押されます。</target>
        </trans-unit>
        <trans-unit id="33ef078cd936b3f847a25ffdec45a6ad4a1a62b6" translate="yes" xml:space="preserve">
          <source>For this command configuration is required:</source>
          <target state="translated">本コマンドの設定が必要です。</target>
        </trans-unit>
        <trans-unit id="af128e9f69f8002658b0f70da6643e57f90baa4b" translate="yes" xml:space="preserve">
          <source>For writing tests in TypeScript you'll need to install &lt;code&gt;typescript&lt;/code&gt; and &lt;code&gt;ts-node&lt;/code&gt; into your project.</source>
          <target state="translated">TypeScriptでテストを作成するには、 &lt;code&gt;typescript&lt;/code&gt; と &lt;code&gt;ts-node&lt;/code&gt; をプロジェクトにインストールする必要があります。</target>
        </trans-unit>
        <trans-unit id="489c1dec14b65b5ffed2eacc5fede99dab9a4ccb" translate="yes" xml:space="preserve">
          <source>Force clicks an element without waiting for it to become visible and not animating.</source>
          <target state="translated">要素が表示されるのを待たずに強制的にクリックして、アニメーションしないようにします。</target>
        </trans-unit>
        <trans-unit id="1c75bfc80979b731937657a6fd8dcccbec9ffa87" translate="yes" xml:space="preserve">
          <source>Forces passthrough mode for mocking. Requires mocking to be started.</source>
          <target state="translated">モッキングのためにパススルーモードを強制します。モッキングを開始する必要があります。</target>
        </trans-unit>
        <trans-unit id="c3cf4ad47b7d0a3b3c73476a50f630c1e8c66bd3" translate="yes" xml:space="preserve">
          <source>Forces record mode for mocking. Requires mocking to be started.</source>
          <target state="translated">モッキングの記録モードを強制します。モッキングを開始する必要があります。</target>
        </trans-unit>
        <trans-unit id="a8d03a68493b3f574085f005c0779ab84ed76156" translate="yes" xml:space="preserve">
          <source>Forces replay mode for mocking. Requires mocking to be started.</source>
          <target state="translated">モッキングのためのリプレイモードを強制します。モッキングを開始する必要があります。</target>
        </trans-unit>
        <trans-unit id="44389f6a466eaabf5c1db729e369511134e2b03b" translate="yes" xml:space="preserve">
          <source>French</source>
          <target state="translated">French</target>
        </trans-unit>
        <trans-unit id="2984a0e891da59da4507fca8d54bbaeda013365e" translate="yes" xml:space="preserve">
          <source>Function passed into session can use &lt;code&gt;I&lt;/code&gt;, page objects, and any objects declared for the scenario. This function can also be declared as async (but doesn't work as generator).</source>
          <target state="translated">セッションに渡された関数は、 &lt;code&gt;I&lt;/code&gt; 、ページオブジェクト、およびシナリオで宣言されたオブジェクトを使用できます。この関数は非同期として宣言することもできます（ただし、ジェネレーターとしては機能しません）。</target>
        </trans-unit>
        <trans-unit id="bc4875ef2cb1775f1e67896520556072d52606c3" translate="yes" xml:space="preserve">
          <source>Functions passed into a session can use the &lt;code&gt;I&lt;/code&gt; object, page objects, and any other objects declared for the scenario. This function can also be declared as async (but doesn't work as generator).</source>
          <target state="translated">セッションに渡される関数は、 &lt;code&gt;I&lt;/code&gt; オブジェクト、ページオブジェクト、およびシナリオ用に宣言されたその他のオブジェクトを使用できます。この関数は非同期として宣言することもできます（ただし、ジェネレーターとしては機能しません）。</target>
        </trans-unit>
        <trans-unit id="36f91bae0b6c6856c572f19edae1b78e43cd5825" translate="yes" xml:space="preserve">
          <source>Generate step definitions with:</source>
          <target state="translated">でステップ定義を生成します。</target>
        </trans-unit>
        <trans-unit id="593f4b38be3905d6a14e00f663fec1fa4f4f1fa8" translate="yes" xml:space="preserve">
          <source>Generated HTML code may often look like this:</source>
          <target state="translated">生成されたHTMLコードは、多くの場合、次のように表示されることがあります。</target>
        </trans-unit>
        <trans-unit id="7229e2630aff70bfd7e870ebbda3124d5015f508" translate="yes" xml:space="preserve">
          <source>Generates a new record using factory and saves API request to store it.</source>
          <target state="translated">ファクトリーを使用して新規レコードを生成し、それを保存するためのAPIリクエストを保存します。</target>
        </trans-unit>
        <trans-unit id="af054506bba0d200d130a2c70944e0fb6aa5509a" translate="yes" xml:space="preserve">
          <source>Generates a new record using factory, sends a GraphQL mutation to store it.</source>
          <target state="translated">ファクトリーを使用して新しいレコードを生成し、それを格納するために GraphQL の突然変異を送信します。</target>
        </trans-unit>
        <trans-unit id="82ff7b50c2533e578a44c3d24c0b97cd1317f1f0" translate="yes" xml:space="preserve">
          <source>Generates bunch of records and saves multiple API requests to store them.</source>
          <target state="translated">レコードの束を生成し、複数のAPIリクエストを保存して保存します。</target>
        </trans-unit>
        <trans-unit id="18ccafabb0ece90677f2ea146a324fb6df1aed4d" translate="yes" xml:space="preserve">
          <source>Generates bunch of records and sends multiple GraphQL mutation requests to store them.</source>
          <target state="translated">レコードの束を生成し、それらを保存するために複数の GraphQL 変異要求を送信します。</target>
        </trans-unit>
        <trans-unit id="a6b7697e24faae761e10239176613da7b51e0e3f" translate="yes" xml:space="preserve">
          <source>Generates step by step report for a test. After each step in a test a screenshot is created. After test executed screenshots are combined into slideshow. By default, reports are generated only for failed tests.</source>
          <target state="translated">テストのステップバイステップレポートを生成します。テストの各ステップの後にスクリーンショットが作成されます。テスト実行後のスクリーンショットはスライドショーにまとめられます。デフォルトでは、失敗したテストに対してのみレポートが生成されます。</target>
        </trans-unit>
        <trans-unit id="9b7adfc269789220b852ccfbc805210eb43ee08e" translate="yes" xml:space="preserve">
          <source>Generates url based on format sent (takes endpoint + url if latter lacks 'http')</source>
          <target state="translated">送信されたフォーマットに基づいて url を生成します (エンドポイント+後者が 'http' を欠いている場合は url を受け取ります)。</target>
        </trans-unit>
        <trans-unit id="a0febd6de35e4074c3b734d945dd69200d76014c" translate="yes" xml:space="preserve">
          <source>Generation types for PageObject looks like for a custom helper, but &lt;code&gt;steps.d.ts&lt;/code&gt; will look like:</source>
          <target state="translated">PageObjectの生成タイプは、カスタムヘルパーのためのように見えるが、 &lt;code&gt;steps.d.ts&lt;/code&gt; は次のようになります。</target>
        </trans-unit>
        <trans-unit id="c6f5d3d86da4e5e4cacd257bce8f870f402b678a" translate="yes" xml:space="preserve">
          <source>Generator has created these files:</source>
          <target state="translated">ジェネレーターがこれらのファイルを作成しました。</target>
        </trans-unit>
        <trans-unit id="a3e705cc61a19f33d7c9c030f107a70569966485" translate="yes" xml:space="preserve">
          <source>Generators</source>
          <target state="translated">Generators</target>
        </trans-unit>
        <trans-unit id="aa9f57607114c33c325fd1c286aef372b1125d44" translate="yes" xml:space="preserve">
          <source>Get HAR</source>
          <target state="translated">HARを取得</target>
        </trans-unit>
        <trans-unit id="fbae0a3892194ffa55d779df9f9303c967dd2613" translate="yes" xml:space="preserve">
          <source>Get JS log from browser.</source>
          <target state="translated">ブラウザからJSログを取得します。</target>
        </trans-unit>
        <trans-unit id="0d70fe75213c76b633f85772565802a191b4fb9d" translate="yes" xml:space="preserve">
          <source>Get JS log from browser. Log buffer is reset after each request.</source>
          <target state="translated">ブラウザからJSログを取得します。ログバッファはリクエストのたびにリセットされます。</target>
        </trans-unit>
        <trans-unit id="dc9b3d99e7500690eccc79b7b2f0a04855a8855b" translate="yes" xml:space="preserve">
          <source>Get JS log from browser. Log buffer is reset after each request. Resumes test execution, so &lt;strong&gt;should be used inside an async function with &lt;code&gt;await&lt;/code&gt;&lt;/strong&gt; operator.</source>
          <target state="translated">ブラウザからJSログを取得します。ログバッファは、リクエストごとにリセットされます。テストの実行を再開するため&lt;strong&gt;、 &lt;code&gt;await&lt;/code&gt; &lt;/strong&gt;演算子を&lt;strong&gt;使用した非同期関数内で使用&lt;/strong&gt;する&lt;strong&gt;必要があります&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="b0423dbd0ced46bda055981a089f3f71630a2587" translate="yes" xml:space="preserve">
          <source>Get all Window Handles. Useful for referencing a specific handle when calling &lt;code&gt;I.switchToWindow(handle)&lt;/code&gt;</source>
          <target state="translated">すべてのウィンドウハンドルを取得します。 &lt;code&gt;I.switchToWindow(handle)&lt;/code&gt; を呼び出すときに特定のハンドルを参照するのに便利です</target>
        </trans-unit>
        <trans-unit id="263ae484fdfc6e514b3e6504d716234e1e9bbb72" translate="yes" xml:space="preserve">
          <source>Get all the currently specified settings.</source>
          <target state="translated">現在指定されているすべての設定を取得します。</target>
        </trans-unit>
        <trans-unit id="32ca908ea4ba7a926ccf306a449d440778cbba13" translate="yes" xml:space="preserve">
          <source>Get current URL from browser. Resumes test execution, so should be used inside an async function.</source>
          <target state="translated">ブラウザから現在のURLを取得します。テストの実行を再開するので、非同期関数の中で使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="56a4fc699026b559df41a30f50a634472e603cab" translate="yes" xml:space="preserve">
          <source>Get current device activity.</source>
          <target state="translated">現在のデバイスのアクティビティを取得します。</target>
        </trans-unit>
        <trans-unit id="24c9a5c4f762da2eca0e273e85f953d6a5e0104c" translate="yes" xml:space="preserve">
          <source>Get current orientation.</source>
          <target state="translated">現在の方向性を知る。</target>
        </trans-unit>
        <trans-unit id="ccb9aeecc2a5dda11d7655107d362101eb689400" translate="yes" xml:space="preserve">
          <source>Get element at position:</source>
          <target state="translated">位置にある要素を取得します。</target>
        </trans-unit>
        <trans-unit id="5e107fe0fb32c2cb29d532532680f1566e7555ac" translate="yes" xml:space="preserve">
          <source>Get elements by different locator types, including strict locator Should be used in custom helpers:</source>
          <target state="translated">厳密なロケータを含む、異なるロケータタイプによる要素の取得 カスタムヘルパーで使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="07dd10907331c511671e6ec7bac84553fce11509" translate="yes" xml:space="preserve">
          <source>Get elements by different locator types, including strict locator. Should be used in custom helpers:</source>
          <target state="translated">厳密なロケータを含む、さまざまなタイプのロケータで要素を取得します。カスタムヘルパーで使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="13772096ac6b28b07014422576d49fdfe756afe8" translate="yes" xml:space="preserve">
          <source>Get first element:</source>
          <target state="translated">最初の要素を取得します。</target>
        </trans-unit>
        <trans-unit id="312972ba5d34219ffdb4b5257dbebde263c6ae63" translate="yes" xml:space="preserve">
          <source>Get information about the current network connection (Data/WIFI/Airplane). The actual server value will be a number. However WebdriverIO additional properties to the response object to allow easier assertions.</source>
          <target state="translated">現在のネットワーク接続(Data/WIFI/Airplane)の情報を取得します。実際のサーバの値は数字になります。しかし、WebdriverIOはアサーションを容易にするためにレスポンスオブジェクトにプロパティを追加しています。</target>
        </trans-unit>
        <trans-unit id="dc2f4dd2ab9ee110ed0e95b2bfa2cc298cfcf5b2" translate="yes" xml:space="preserve">
          <source>Get last element:</source>
          <target state="translated">最後の要素を取得します。</target>
        </trans-unit>
        <trans-unit id="728e8c67234c2bfd04a4d419985bce1caee3ee4b" translate="yes" xml:space="preserve">
          <source>Get list of all available contexts</source>
          <target state="translated">利用可能なすべてのコンテキストのリストを取得</target>
        </trans-unit>
        <trans-unit id="8a32bb3ab8e153795d82addf0fda7bde26394d65" translate="yes" xml:space="preserve">
          <source>Get the current Window Handle. Useful for referencing it when calling &lt;code&gt;I.switchToWindow(handle)&lt;/code&gt;</source>
          <target state="translated">現在のウィンドウハンドルを取得します。 &lt;code&gt;I.switchToWindow(handle)&lt;/code&gt; を呼び出すときに参照するのに便利です</target>
        </trans-unit>
        <trans-unit id="310469acda71df67a30aee4316ee21d8f8960525" translate="yes" xml:space="preserve">
          <source>Get the window handle relative to the current handle. i.e. the next handle or the previous.</source>
          <target state="translated">現在のハンドルからの相対的なウィンドウハンドルを取得します。</target>
        </trans-unit>
        <trans-unit id="f5cd8ab2f3a480f3619cee2de59ae0983434dc07" translate="yes" xml:space="preserve">
          <source>Gets a cookie object by name Resumes test execution, so &lt;strong&gt;should be used inside async with &lt;code&gt;await&lt;/code&gt;&lt;/strong&gt; operator.</source>
          <target state="translated">名前でcookieオブジェクトを取得します。テストの実行を再開するため&lt;strong&gt;、 &lt;code&gt;await&lt;/code&gt; &lt;/strong&gt;オペレーター&lt;strong&gt;と非同期で使用&lt;/strong&gt;する&lt;strong&gt;必要があります&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="294daae094f72556e68569bf31a00ac80f57db2b" translate="yes" xml:space="preserve">
          <source>Gets a cookie object by name. If none provided gets all cookies. Resumes test execution, so &lt;strong&gt;should be used inside async function with &lt;code&gt;await&lt;/code&gt;&lt;/strong&gt; operator.</source>
          <target state="translated">名前でCookieオブジェクトを取得します。何も提供されていない場合、すべてのCookieを取得します。テストの実行を再開するため&lt;strong&gt;、 &lt;code&gt;await&lt;/code&gt; &lt;/strong&gt;演算子を&lt;strong&gt;使用してasync関数内で使用&lt;/strong&gt;する&lt;strong&gt;必要があります&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="2a4de89c12c9b3cabbe29ee4da5ed134a3347920" translate="yes" xml:space="preserve">
          <source>Gets page URL including hash.</source>
          <target state="translated">ハッシュを含むページのURLを取得します。</target>
        </trans-unit>
        <trans-unit id="010b85ad56b34c34c7c2a3b2436c740e30428ed5" translate="yes" xml:space="preserve">
          <source>Getting Started</source>
          <target state="translated">はじめに</target>
        </trans-unit>
        <trans-unit id="780483cc1f6d59df26ad28d7d8c2a351a2ebfc46" translate="yes" xml:space="preserve">
          <source>Gherkin</source>
          <target state="translated">Gherkin</target>
        </trans-unit>
        <trans-unit id="122c45f15f3f6e4c27c3028aa0337823dab75320" translate="yes" xml:space="preserve">
          <source>Gherkin scenarios and features can contain tags marked with &lt;code&gt;@&lt;/code&gt;. Tags are appended to feature titles so you can easily filter by them when running tests:</source>
          <target state="translated">Gherkinのシナリオと機能には、 &lt;code&gt;@&lt;/code&gt; でマークされたタグを含めることができます。タグは機能のタイトルに追加されるため、テストの実行時にタグで簡単にフィルタリングできます。</target>
        </trans-unit>
        <trans-unit id="39540900bbfc1f3ea7b080c0579b9c08789f8f23" translate="yes" xml:space="preserve">
          <source>GitHub Actions</source>
          <target state="translated">GitHub のアクション</target>
        </trans-unit>
        <trans-unit id="5f1184f7df96c5928092ad9c6b550699bf887826" translate="yes" xml:space="preserve">
          <source>Global</source>
          <target state="translated">Global</target>
        </trans-unit>
        <trans-unit id="2d2eb66f5561d0d2951297af23e853620e59cf26" translate="yes" xml:space="preserve">
          <source>Goes back on Android</source>
          <target state="translated">アンドロイドに戻る</target>
        </trans-unit>
        <trans-unit id="147da4a41efc8547482bcb0d17b837143324bfe4" translate="yes" xml:space="preserve">
          <source>Grab CSS property for given locator Resumes test execution, so &lt;strong&gt;should be used inside an async function with &lt;code&gt;await&lt;/code&gt;&lt;/strong&gt; operator.</source>
          <target state="translated">特定のロケーターのCSSプロパティを取得テストの実行を再開&lt;strong&gt;する &lt;code&gt;await&lt;/code&gt; &lt;/strong&gt;&lt;strong&gt;、&lt;/strong&gt;&lt;strong&gt;await&lt;/strong&gt;演算子を&lt;strong&gt;使用して非同期関数内で使用&lt;/strong&gt;する&lt;strong&gt;必要があります&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="569ea6e163c7c663e94c38d54972cbd7c8e83993" translate="yes" xml:space="preserve">
          <source>Grab CSS property for given locator Resumes test execution, so &lt;strong&gt;should be used inside an async function with &lt;code&gt;await&lt;/code&gt;&lt;/strong&gt; operator. If more than one element is found - value of first element is returned.</source>
          <target state="translated">指定されたロケーターのCSSプロパティを取得します。テストの実行を再開&lt;strong&gt;する &lt;code&gt;await&lt;/code&gt; &lt;/strong&gt;&lt;strong&gt;、&lt;/strong&gt;&lt;strong&gt;await&lt;/strong&gt;演算子を&lt;strong&gt;使用して非同期関数内で使用&lt;/strong&gt;する&lt;strong&gt;必要があります&lt;/strong&gt;。複数の要素が見つかった場合-最初の要素の値が返されます。</target>
        </trans-unit>
        <trans-unit id="bf071012ab8b3e5047c72ed0588c105614812a55" translate="yes" xml:space="preserve">
          <source>Grab array of CSS properties for given locator Resumes test execution, so &lt;strong&gt;should be used inside an async function with &lt;code&gt;await&lt;/code&gt;&lt;/strong&gt; operator.</source>
          <target state="translated">指定されたロケーターのCSSプロパティの配列を取得します。テストの実行を再開&lt;strong&gt;する &lt;code&gt;await&lt;/code&gt; &lt;/strong&gt;&lt;strong&gt;、&lt;/strong&gt;&lt;strong&gt;await&lt;/strong&gt;演算子を&lt;strong&gt;使用して非同期関数内で使用&lt;/strong&gt;する&lt;strong&gt;必要があります&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="98fade46b9cd9891cac24cde7991f7166995522f" translate="yes" xml:space="preserve">
          <source>Grab number of open tabs</source>
          <target state="translated">開いているタブの数をつかむ</target>
        </trans-unit>
        <trans-unit id="098ca30bbb62960788b3df1e01b0401fee86198e" translate="yes" xml:space="preserve">
          <source>Grab number of open tabs. Resumes test execution, so &lt;strong&gt;should be used inside async function with &lt;code&gt;await&lt;/code&gt;&lt;/strong&gt; operator.</source>
          <target state="translated">開いているタブの数を取得します。テストの実行を再開するため&lt;strong&gt;、 &lt;code&gt;await&lt;/code&gt; &lt;/strong&gt;演算子を&lt;strong&gt;使用してasync関数内で使用&lt;/strong&gt;する&lt;strong&gt;必要があります&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="853c50c13105606a1eb2c4ea622bbce89a66399c" translate="yes" xml:space="preserve">
          <source>Grab number of visible elements by locator</source>
          <target state="translated">ロケータによる可視要素の数の把握</target>
        </trans-unit>
        <trans-unit id="8fb7597a0905cb5ef0b08a951bcfea530490ed43" translate="yes" xml:space="preserve">
          <source>Grab number of visible elements by locator. Resumes test execution, so &lt;strong&gt;should be used inside async function with &lt;code&gt;await&lt;/code&gt;&lt;/strong&gt; operator.</source>
          <target state="translated">ロケーターによって表示されている要素の数を取得します。テストの実行を再開するため&lt;strong&gt;、 &lt;code&gt;await&lt;/code&gt; &lt;/strong&gt;演算子を&lt;strong&gt;使用してasync関数内で使用&lt;/strong&gt;する&lt;strong&gt;必要があります&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="f81c38a4b6f614a5add0eddd7ddcb65bf71ae041" translate="yes" xml:space="preserve">
          <source>Grab the data from performance timing using Navigation Timing API. The returned data will contain following things in ms:</source>
          <target state="translated">Navigation Timing APIを使用してパフォーマンスタイミングからデータを取得します。返されたデータには、以下のようなものがミリ秒単位で含まれています。</target>
        </trans-unit>
        <trans-unit id="5564d88d718e3585e9c40d1566da24bd79a31347" translate="yes" xml:space="preserve">
          <source>Grab the text within the popup. If no popup is visible then it will return null</source>
          <target state="translated">ポップアップ内のテキストを取得します。ポップアップが表示されていない場合は null を返します。</target>
        </trans-unit>
        <trans-unit id="0686306b7a9cb090976a8042a8a9982a656937cd" translate="yes" xml:space="preserve">
          <source>Grab the text within the popup. If no popup is visible then it will return null.</source>
          <target state="translated">ポップアップ内のテキストを取得します。ポップアップが表示されていない場合は null を返します。</target>
        </trans-unit>
        <trans-unit id="4fc05a8f5c0fca425eb08c5551e98d179cf2916c" translate="yes" xml:space="preserve">
          <source>Grab the width, height, location of given locator. Provide &lt;code&gt;width&lt;/code&gt; or &lt;code&gt;height&lt;/code&gt;as second param to get your desired prop. Resumes test execution, so &lt;strong&gt;should be used inside an async function with &lt;code&gt;await&lt;/code&gt;&lt;/strong&gt; operator.</source>
          <target state="translated">指定されたロケーターの幅、高さ、位置を取得します。提供 &lt;code&gt;width&lt;/code&gt; や &lt;code&gt;height&lt;/code&gt; ご希望の小道具を取得するために、第2のparamとして。テストの実行を再開するため&lt;strong&gt;、 &lt;code&gt;await&lt;/code&gt; &lt;/strong&gt;演算子を&lt;strong&gt;使用して非同期関数内で使用&lt;/strong&gt;する&lt;strong&gt;必要があります&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="ecccd585cb761ae8c732001b1132af2ef2b279e9" translate="yes" xml:space="preserve">
          <source>Grabbers</source>
          <target state="translated">Grabbers</target>
        </trans-unit>
        <trans-unit id="007d158de9956ed41ebee1bab15f7d58d7c58919" translate="yes" xml:space="preserve">
          <source>Grabbing</source>
          <target state="translated">Grabbing</target>
        </trans-unit>
        <trans-unit id="e4eb1ab683c392399fa825b2dea3b7e5f8189912" translate="yes" xml:space="preserve">
          <source>GraphQL</source>
          <target state="translated">GraphQL</target>
        </trans-unit>
        <trans-unit id="e67d1019fea93d08f2efbdd245c30b2764d43cb5" translate="yes" xml:space="preserve">
          <source>GraphQL Data Factory</source>
          <target state="translated">グラフQLデータファクトリー</target>
        </trans-unit>
        <trans-unit id="f78d7af785d2be3618edf6a32e464558c87c72aa" translate="yes" xml:space="preserve">
          <source>GraphQL endpoint which allows to perform create / delete requests and</source>
          <target state="translated">作成/削除のリクエストを実行するための GraphQL エンドポイントと</target>
        </trans-unit>
        <trans-unit id="b89f40e49a9965c9baf8fc13667642910c91fe76" translate="yes" xml:space="preserve">
          <source>GraphQL helper allows to send additional requests to a GraphQl endpoint during acceptance tests. &lt;a href=&quot;https://github.com/axios/axios&quot;&gt;Axios (opens new window)&lt;/a&gt; library is used to perform requests.</source>
          <target state="translated">GraphQLヘルパーを使用すると、受け入れテスト中に追加のリクエストをGraphQlエンドポイントに送信できます。&lt;a href=&quot;https://github.com/axios/axios&quot;&gt;Axios（新しいウィンドウを開く）&lt;/a&gt;ライブラリは、リクエストを実行するために使用されます。</target>
        </trans-unit>
        <trans-unit id="de21dce02dd13eb82d7da4c10b7933db30258ce5" translate="yes" xml:space="preserve">
          <source>GraphQL helper provides two basic methods to queries and mutations to application:</source>
          <target state="translated">GraphQLヘルパーは、クエリとアプリケーションへの変異の2つの基本的なメソッドを提供します。</target>
        </trans-unit>
        <trans-unit id="3ecc3cc60c679bcc230ca59b2d0766d184eb4d75" translate="yes" xml:space="preserve">
          <source>GraphQLDataFactory</source>
          <target state="translated">GraphQLDataFactory</target>
        </trans-unit>
        <trans-unit id="f4cf195da3eca190eecf4e116ffceee2b14d978c" translate="yes" xml:space="preserve">
          <source>GraphQLDataFactory has following config options:</source>
          <target state="translated">GraphQLDataFactoryの設定オプションは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="de40190ee89a9dd83f74ffd900d59fda1d730a6e" translate="yes" xml:space="preserve">
          <source>Grep and multiple browsers are supported. Passing more than one browser will multiply the amount of suites by the amount of browsers passed. The following example will lead to four parallel runs.</source>
          <target state="translated">Grep と複数のブラウザに対応しています。複数のブラウザを渡すと、スイートの量に渡されたブラウザの量が乗算されます。以下の例では、4つの並列実行になります。</target>
        </trans-unit>
        <trans-unit id="bf073fae640ded81eeb7a4cee70faff4a623c16c" translate="yes" xml:space="preserve">
          <source>Guide</source>
          <target state="translated">Guide</target>
        </trans-unit>
        <trans-unit id="488be2e36926b40eb75c19cf48f718fc7ccaee62" translate="yes" xml:space="preserve">
          <source>Handles a file download.Aa file name is required to save the file on disk. Files are saved to &quot;output&quot; directory.</source>
          <target state="translated">ファイルをディスクに保存するにはファイル名が必要です。ファイルは &quot;output &quot;ディレクトリに保存されます。</target>
        </trans-unit>
        <trans-unit id="709c9a1e18ba0f46c20cd1531ff2329aeb574fd1" translate="yes" xml:space="preserve">
          <source>Headless Chrome</source>
          <target state="translated">ヘッドレスクローム</target>
        </trans-unit>
        <trans-unit id="2ce5a2d06273b54d8b6a91e9556184426c0726c1" translate="yes" xml:space="preserve">
          <source>Headless Chrome (WebDriverIO)</source>
          <target state="translated">ヘッドレスクローム(WebDriverIO</target>
        </trans-unit>
        <trans-unit id="658ed1057281c05c82b085fa8d64a8519095c1e7" translate="yes" xml:space="preserve">
          <source>Headless Mode</source>
          <target state="translated">ヘッドレスモード</target>
        </trans-unit>
        <trans-unit id="71d9151f633fa0fbe4441837456566b1bdf36e32" translate="yes" xml:space="preserve">
          <source>Helper Examples</source>
          <target state="translated">ヘルパーの例</target>
        </trans-unit>
        <trans-unit id="d2f28583666ff17b9cf2cf1468644ede091cd884" translate="yes" xml:space="preserve">
          <source>Helper configuration</source>
          <target state="translated">ヘルパー設定</target>
        </trans-unit>
        <trans-unit id="7279003985e86b0bb5a1785325cf20e2457015e5" translate="yes" xml:space="preserve">
          <source>Helper configuration (Appium)</source>
          <target state="translated">ヘルパー設定(Appium</target>
        </trans-unit>
        <trans-unit id="541ed8224283d9f132568c56b0724eea3914f4f0" translate="yes" xml:space="preserve">
          <source>Helper for managing remote data using GraphQL queries. Uses data generators like &lt;a href=&quot;https://github.com/rosiejs/rosie&quot;&gt;rosie (opens new window)&lt;/a&gt; or factory girl to create new record.</source>
          <target state="translated">GraphQLクエリを使用してリモートデータを管理するためのヘルパー。&lt;a href=&quot;https://github.com/rosiejs/rosie&quot;&gt;rosie（新しいウィンドウを開く）&lt;/a&gt;やfactorygirlなどのデータジェネレーターを使用して新しいレコードを作成します。</target>
        </trans-unit>
        <trans-unit id="6a686de98f9859ce9b53a0dac1c42e05a96b6d94" translate="yes" xml:space="preserve">
          <source>Helper for managing remote data using REST API. Uses data generators like &lt;a href=&quot;https://github.com/rosiejs/rosie&quot;&gt;rosie (opens new window)&lt;/a&gt; or factory girl to create new record.</source>
          <target state="translated">RESTAPIを使用してリモートデータを管理するためのヘルパー。&lt;a href=&quot;https://github.com/rosiejs/rosie&quot;&gt;rosie（新しいウィンドウを開く）&lt;/a&gt;やfactorygirlなどのデータジェネレーターを使用して新しいレコードを作成します。</target>
        </trans-unit>
        <trans-unit id="ac0abe42092225807406a8cad179435c4d33b65a" translate="yes" xml:space="preserve">
          <source>Helper for managing remote data using REST API. Uses data generators like &lt;a href=&quot;https://github.com/rosiejs/rosie&quot;&gt;rosie&lt;/a&gt; or factory girl to create new record.</source>
          <target state="translated">REST APIを使用してリモートデータを管理するためのヘルパー。&lt;a href=&quot;https://github.com/rosiejs/rosie&quot;&gt;Rosie&lt;/a&gt;やFactory Girl などのデータジェネレーターを使用して、新しいレコードを作成します。</target>
        </trans-unit>
        <trans-unit id="8bbdf83ef89c0a928b736bc2aa503ec161864859" translate="yes" xml:space="preserve">
          <source>Helper for testing filesystem. Can be easily used to check file structures:</source>
          <target state="translated">ファイルシステムをテストするためのヘルパー。ファイル構造のチェックに簡単に使用できます。</target>
        </trans-unit>
        <trans-unit id="dc920b186ac5653b91cc3260cc12f018110a459f" translate="yes" xml:space="preserve">
          <source>Helper is the core concept of CodeceptJS. Helper is a wrapper on top of various libraries providing unified interface around them. When &lt;code&gt;I&lt;/code&gt; object is used in tests it delegates execution of its functions to currently enabled helper classes.</source>
          <target state="translated">ヘルパーはCodeceptJSのコアコンセプトです。ヘルパーは、さまざまなライブラリの上にあるラッパーであり、それらの周りに統一されたインターフェイスを提供します。ときに &lt;code&gt;I&lt;/code&gt; のオブジェクトは、現在有効ヘルパークラスにその機能の委譲実行テストで使用されています。</target>
        </trans-unit>
        <trans-unit id="3c9b3433e6f225e4ae00ef2041d44d91bfbf7113" translate="yes" xml:space="preserve">
          <source>Helpers</source>
          <target state="translated">Helpers</target>
        </trans-unit>
        <trans-unit id="c80c93b0e2a50d315b88bcd6583b1b5e3793672a" translate="yes" xml:space="preserve">
          <source>Helpers are ES6 classes inherited from &lt;a href=&quot;https://github.com/Codeception/CodeceptJS/blob/master/lib/helper.js&quot;&gt;corresponding abstract class&lt;/a&gt;. Generated Helper will be added to &lt;code&gt;codecept.json&lt;/code&gt; config. It should look like this:</source>
          <target state="translated">ヘルパーは、&lt;a href=&quot;https://github.com/Codeception/CodeceptJS/blob/master/lib/helper.js&quot;&gt;対応する抽象クラス&lt;/a&gt;から継承されたES6クラスです。生成されたヘルパーは &lt;code&gt;codecept.json&lt;/code&gt; 設定に追加されます。次のようになります。</target>
        </trans-unit>
        <trans-unit id="a61e8319e092d9c8b797c71b8ba35981d0acd98b" translate="yes" xml:space="preserve">
          <source>Helpers are classes inherited from &lt;a href=&quot;https://github.com/codeceptjs/helper&quot;&gt;corresponding abstract class (opens new window)&lt;/a&gt;. Created helper file should look like this:</source>
          <target state="translated">ヘルパーは、&lt;a href=&quot;https://github.com/codeceptjs/helper&quot;&gt;対応する抽象クラス&lt;/a&gt;から継承されたクラスです（新しいウィンドウを開きます）。作成されたヘルパーファイルは次のようになります。</target>
        </trans-unit>
        <trans-unit id="3276d3d2f09c22636873a47e7ac6232e15904105" translate="yes" xml:space="preserve">
          <source>Helpers can also be installed as Node packages and required by corresponding Node modules</source>
          <target state="translated">ヘルパーはノードパッケージとしてインストールすることができ、対応するノードモジュールで必要とされます。</target>
        </trans-unit>
        <trans-unit id="368abdbe7cbdc2e1f098b3f7729fb5010bd24904" translate="yes" xml:space="preserve">
          <source>Helpers can be created by running a generator command:</source>
          <target state="translated">ヘルパーはジェネレータコマンドを実行することで作成することができます。</target>
        </trans-unit>
        <trans-unit id="78fbd74f27ebfe2ab2de1852d2cedc9eefdd8d31" translate="yes" xml:space="preserve">
          <source>Helpers can be reconfigured per scenario or per feature. This might be useful when some tests should be executed with different settings than others. In order to reconfigure tests use &lt;code&gt;.config()&lt;/code&gt; method of &lt;code&gt;Scenario&lt;/code&gt; or &lt;code&gt;Feature&lt;/code&gt;.</source>
          <target state="translated">ヘルパーは、シナリオごとまたは機能ごとに再構成できます。これは、一部のテストを他のテストとは異なる設定で実行する必要がある場合に役立ちます。テストを再構成するには、 &lt;code&gt;Scenario&lt;/code&gt; または &lt;code&gt;Feature&lt;/code&gt; &lt;code&gt;.config()&lt;/code&gt; メソッドを使用します。</target>
        </trans-unit>
        <trans-unit id="407255e05795b7b6f59cefff9ff1f59db1ce939d" translate="yes" xml:space="preserve">
          <source>Helpers is a core concept of CodeceptJS. Helper is a wrapper around various libraries providing unified interface around them. Methods of Helper class will be available in tests in &lt;code&gt;I&lt;/code&gt; object. This abstracts test scenarios from the implementation and allows easy switching between backends. Functionality of CodeceptJS should be extended by writing a custom helpers.</source>
          <target state="translated">ヘルパーは、CodeceptJSのコアコンセプトです。ヘルパーは、さまざまなライブラリのラッパーであり、それらの周りに統一されたインターフェイスを提供します。Helperクラスのメソッドは、 &lt;code&gt;I&lt;/code&gt; オブジェクトのテストで使用できます。これにより、実装からテストシナリオが抽象化され、バックエンド間の簡単な切り替えが可能になります。CodeceptJSの機能は、カスタムヘルパーを作成することによって拡張する必要があります。</target>
        </trans-unit>
        <trans-unit id="eb0976bba6fafe8579360a255f9b1ab296e96d36" translate="yes" xml:space="preserve">
          <source>Helpers may contain several hooks you can use to handle events of a test. Implement corresponding methods to them.</source>
          <target state="translated">ヘルパーには、テストのイベントを処理するために使用できるフックがいくつか含まれているかもしれません。それらに対応するメソッドを実装します。</target>
        </trans-unit>
        <trans-unit id="0a2629fbb730d25ff3de3cc4978a560cc71c8865" translate="yes" xml:space="preserve">
          <source>Helpers should be enabled inside &lt;code&gt;codecept.json&lt;/code&gt; or &lt;code&gt;codecept.conf.js&lt;/code&gt; files. Command &lt;code&gt;generate helper&lt;/code&gt; does that for you, however you can enable them manually by placing helper to &lt;code&gt;helpers&lt;/code&gt; section inside config file. You can also pass additional config options to your helper from a config - &lt;strong&gt;(please note, this example contains comments, while JSON format doesn't support them)&lt;/strong&gt;:</source>
          <target state="translated">ヘルパーは &lt;code&gt;codecept.json&lt;/code&gt; または &lt;code&gt;codecept.conf.js&lt;/code&gt; ファイル内で有効にする必要があります。コマンド &lt;code&gt;generate helper&lt;/code&gt; がそれを行いますが、設定ファイル内の &lt;code&gt;helpers&lt;/code&gt; セクションにヘルパーを配置することで手動で有効にすることができます。追加の構成オプションを構成からヘルパーに渡すこともできます&lt;strong&gt;（JSON形式ではサポートされていないが、この例にはコメントが含まれていることに注意してください）&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="65b4ceb84defbcf10cb47e260c2ea257896ed6c4" translate="yes" xml:space="preserve">
          <source>Helpers: ApiDataFactory</source>
          <target state="translated">ヘルパーです。ApiDataFactory</target>
        </trans-unit>
        <trans-unit id="f8ad0afae628b3d1d76a631b602353fc318f3095" translate="yes" xml:space="preserve">
          <source>Helpers: Appium</source>
          <target state="translated">ヘルパー。アピウム</target>
        </trans-unit>
        <trans-unit id="c88e375960d4dfdf181c516b8b2380b87a47eb91" translate="yes" xml:space="preserve">
          <source>Helpers: FileSystem</source>
          <target state="translated">ヘルパーです。ファイルシステム</target>
        </trans-unit>
        <trans-unit id="b9e9633721ea59d0ffe5bef7c2f43a54c837a916" translate="yes" xml:space="preserve">
          <source>Helpers: Nightmare</source>
          <target state="translated">ヘルパー。悪夢</target>
        </trans-unit>
        <trans-unit id="6c7f72bb5e3ee82b858bf4025369bde74ecc9096" translate="yes" xml:space="preserve">
          <source>Helpers: Protractor</source>
          <target state="translated">ヘルパー 分度器</target>
        </trans-unit>
        <trans-unit id="a3476d42f92e32ec100208db221afa1f56b4d3c7" translate="yes" xml:space="preserve">
          <source>Helpers: Puppeteer</source>
          <target state="translated">ヘルパー。人形使い</target>
        </trans-unit>
        <trans-unit id="9fe787dfa9f01fac040b17d670d953ab8d4e6f9c" translate="yes" xml:space="preserve">
          <source>Helpers: REST</source>
          <target state="translated">ヘルパーです。REST</target>
        </trans-unit>
        <trans-unit id="eb31b8d45c1db8f82f2812c438f92d535826870b" translate="yes" xml:space="preserve">
          <source>Helpers: WebDriverIO</source>
          <target state="translated">ヘルパー。WebDriverIO</target>
        </trans-unit>
        <trans-unit id="6128f1eb4dd976e365185b368247d27089d9f317" translate="yes" xml:space="preserve">
          <source>Here is a recommended strategy what to store where:</source>
          <target state="translated">どこに何を収納するのか、おすすめの攻略法をご紹介します。</target>
        </trans-unit>
        <trans-unit id="d6d832200fd64e3fd55eb7e7c030ed94d0c9c6b9" translate="yes" xml:space="preserve">
          <source>Here is a sample BrowserStack config for running tests on iOS mobile browser:</source>
          <target state="translated">iOSのモバイルブラウザでテストを実行するためのBrowserStackの設定例です。</target>
        </trans-unit>
        <trans-unit id="cb0c075a60c4e8a2645b3984e4380d3c1f222aed" translate="yes" xml:space="preserve">
          <source>Here is a test checking basic &lt;a href=&quot;http://todomvc.com/&quot;&gt;todo application (opens new window)&lt;/a&gt;.</source>
          <target state="translated">これは、基本的な&lt;a href=&quot;http://todomvc.com/&quot;&gt;todoアプリケーションを&lt;/a&gt;チェックするテストです（新しいウィンドウが開きます）。</target>
        </trans-unit>
        <trans-unit id="da9291cb119f102218681b72119ede84a1e93115" translate="yes" xml:space="preserve">
          <source>Here is a usage example:</source>
          <target state="translated">使用例をご紹介します。</target>
        </trans-unit>
        <trans-unit id="3abe830fc4e7bb387970e428e804c3eb2c2f7d06" translate="yes" xml:space="preserve">
          <source>Here is an example of declaring page object as a class:</source>
          <target state="translated">ページオブジェクトをクラスとして宣言した例です。</target>
        </trans-unit>
        <trans-unit id="b9583d3b520854dfa531b3a2f9a902b345e11c07" translate="yes" xml:space="preserve">
          <source>Here is an overview of available options with their defaults:</source>
          <target state="translated">ここでは、デフォルトで利用可能なオプションの概要を説明します。</target>
        </trans-unit>
        <trans-unit id="b2eeac2f1e55adb5ec0da4da8778e57f4100e2ff" translate="yes" xml:space="preserve">
          <source>Here is the &lt;a href=&quot;http://webdriver.io/guide/usage/multiremote&quot;&gt;webdriverio docs (opens new window)&lt;/a&gt; on the subject</source>
          <target state="translated">ここで&lt;a href=&quot;http://webdriver.io/guide/usage/multiremote&quot;&gt;webdriverioのドキュメント（新しいウィンドウが開きます）&lt;/a&gt;件名に</target>
        </trans-unit>
        <trans-unit id="834e91adf2e5cce204c72e4897eace3a82b5a1f7" translate="yes" xml:space="preserve">
          <source>Here is the &lt;a href=&quot;http://webdriver.io/guide/usage/multiremote.html&quot;&gt;webdriverio docs&lt;/a&gt; on the subject</source>
          <target state="translated">ここで&lt;a href=&quot;http://webdriver.io/guide/usage/multiremote.html&quot;&gt;webdriverioドキュメント&lt;/a&gt;対象に</target>
        </trans-unit>
        <trans-unit id="100db436fc0e183226731ebbe4a6a3864730ff65" translate="yes" xml:space="preserve">
          <source>Here is the diagram of CodeceptJS architecture</source>
          <target state="translated">CodeceptJSのアーキテクチャ図です。</target>
        </trans-unit>
        <trans-unit id="bfa3c6fc3136b97d2e6cd59cdd0d83d6e9e3fb06" translate="yes" xml:space="preserve">
          <source>Here is the full list of &lt;a href=&quot;https://www.browserstack.com/app-automate/capabilities&quot;&gt;capabilities (opens new window)&lt;/a&gt;.</source>
          <target state="translated">これが&lt;a href=&quot;https://www.browserstack.com/app-automate/capabilities&quot;&gt;機能&lt;/a&gt;の完全なリストです（新しいウィンドウが開きます）。</target>
        </trans-unit>
        <trans-unit id="8a90586bce4d589b8115742a29b57d8f56008230" translate="yes" xml:space="preserve">
          <source>Here is the full list of &lt;a href=&quot;https://www.browserstack.com/app-automate/capabilities&quot;&gt;capabilities&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://www.browserstack.com/app-automate/capabilities&quot;&gt;機能&lt;/a&gt;の完全なリストは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="7af35d3401be48c15b82a6a16bb6006d5f9aed7d" translate="yes" xml:space="preserve">
          <source>Here is the list of helpers created by our community. Please &lt;strong&gt;add your own&lt;/strong&gt; by editing this page.</source>
          <target state="translated">これが私たちのコミュニティによって作成されたヘルパーのリストです。してください&lt;strong&gt;あなた自身を追加し&lt;/strong&gt;、このページを編集して。</target>
        </trans-unit>
        <trans-unit id="ab818eb857f1d76575e858d9ddbda95e82489a9d" translate="yes" xml:space="preserve">
          <source>Here we also use word &lt;strong&gt;And&lt;/strong&gt; to extend the Given and not to repeat it in each line.</source>
          <target state="translated">ここでは、&lt;strong&gt;And&lt;/strong&gt;を使用して、Givenを拡張し、各行で繰り返さないようにしています。</target>
        </trans-unit>
        <trans-unit id="254c6239374c28d4b24f64d04a9391be95cb7954" translate="yes" xml:space="preserve">
          <source>Hide the keyboard.</source>
          <target state="translated">キーボードを隠す。</target>
        </trans-unit>
        <trans-unit id="3dbe9e30bdcea5d90ac4cde6c40e9d6023cf238f" translate="yes" xml:space="preserve">
          <source>Hook Usage Examples</source>
          <target state="translated">フックの使用例</target>
        </trans-unit>
        <trans-unit id="4bd8f3f03a576b2088bd73a2339d07fca1de805d" translate="yes" xml:space="preserve">
          <source>Hooks</source>
          <target state="translated">Hooks</target>
        </trans-unit>
        <trans-unit id="c7347716015d16f5447564a95b6f52b6d57f8da0" translate="yes" xml:space="preserve">
          <source>Hooks are JavaScript files same as for bootstrap and teardown, which can be registered inside &lt;code&gt;hooks&lt;/code&gt; section of config. Unlike &lt;code&gt;bootstrap&lt;/code&gt; you can have multiple hooks registered:</source>
          <target state="translated">フックは、ブートストラップおよびティアダウンと同じJavaScriptファイルで、configの &lt;code&gt;hooks&lt;/code&gt; セクション内に登録できます。 &lt;code&gt;bootstrap&lt;/code&gt; とは異なり、複数のフックを登録できます。</target>
        </trans-unit>
        <trans-unit id="3254132bcaed58d05c41bc76b9b73ad210df7fe2" translate="yes" xml:space="preserve">
          <source>Hooks are available when using the &lt;code&gt;run-multiple&lt;/code&gt; command to perform actions before the test suites start and after the test suites have finished. See &lt;a href=&quot;https://codecept.io/hooks/#bootstrap-teardown&quot;&gt;Hooks&lt;/a&gt; for an example.</source>
          <target state="translated">フックは、 &lt;code&gt;run-multiple&lt;/code&gt; コマンドを使用して、テストスイートが開始する前とテストスイートが終了した後にアクションを実行するときに使用できます。例については、&lt;a href=&quot;https://codecept.io/hooks/#bootstrap-teardown&quot;&gt;フック&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="097963f2766d084e229481c18d3c9686d836e3eb" translate="yes" xml:space="preserve">
          <source>How Fast Is Nightmare JS?</source>
          <target state="translated">ナイトメアJSの速度は?</target>
        </trans-unit>
        <trans-unit id="8cecc82d72d68f9151cb0901cfe40eeac15bfca6" translate="yes" xml:space="preserve">
          <source>How It Works</source>
          <target state="translated">どのように機能するか</target>
        </trans-unit>
        <trans-unit id="3f53c8a20919264f2e8e88ce83decf2d0e660bc7" translate="yes" xml:space="preserve">
          <source>How does your client, manager, or tester, or any other non-technical person, know your web application is working? By opening the browser, accessing a site, clicking on links, filling in the forms, and actually seeing the content on a web page.</source>
          <target state="translated">クライアント、マネージャー、テスター、またはその他の非技術者は、どのようにして Web アプリケーションが動作していることを知っているのでしょうか?ブラウザを開いたり、サイトにアクセスしたり、リンクをクリックしたり、フォームに入力したり、ウェブページのコンテンツを実際に見たりすることによってです。</target>
        </trans-unit>
        <trans-unit id="962248bc7070fb23a6587dc08ad315cf7351e512" translate="yes" xml:space="preserve">
          <source>How to Use</source>
          <target state="translated">使用方法</target>
        </trans-unit>
        <trans-unit id="8e6fd2e40ad6f8474437ee1a506398b47dfb6802" translate="yes" xml:space="preserve">
          <source>How to try it?</source>
          <target state="translated">どうやって試してみるか?</target>
        </trans-unit>
        <trans-unit id="b6b349e5d7bafd6ccdc8339c02c044c05401defd" translate="yes" xml:space="preserve">
          <source>How to write tests?</source>
          <target state="translated">テストの書き方は?</target>
        </trans-unit>
        <trans-unit id="507edb102684aac1273345d49d787c7218828297" translate="yes" xml:space="preserve">
          <source>However this behavior can be configured with following options:</source>
          <target state="translated">ただし、この動作は以下のオプションで設定することができます。</target>
        </trans-unit>
        <trans-unit id="9b52b3d24ed78d9ef6bf7050db35915199cc72f0" translate="yes" xml:space="preserve">
          <source>However, behind the scene &lt;strong&gt;all actions are wrapped in promises&lt;/strong&gt; inside the &lt;code&gt;I&lt;/code&gt; object. &lt;a href=&quot;https://github.com/Codeception/CodeceptJS/blob/master/lib/recorder.js&quot;&gt;Global promise&lt;/a&gt; chain is initialized before each test and all &lt;code&gt;I.*&lt;/code&gt; calls will be appended to it as well as setup and teardown.</source>
          <target state="translated">ただし、舞台裏では、&lt;strong&gt;すべてのアクションが&lt;/strong&gt; &lt;code&gt;I&lt;/code&gt; オブジェクト内の&lt;strong&gt;promiseにラップさ&lt;/strong&gt;れています。&lt;a href=&quot;https://github.com/Codeception/CodeceptJS/blob/master/lib/recorder.js&quot;&gt;グローバルプロミス&lt;/a&gt;チェーンは各テストの前に初期化され、すべての &lt;code&gt;I.*&lt;/code&gt; 呼び出しがセットアップとティアダウンだけでなくそれに追加されます。</target>
        </trans-unit>
        <trans-unit id="2389e3f82cd27c845828f772ae1b10e7f61cca45" translate="yes" xml:space="preserve">
          <source>However, behind the scenes &lt;strong&gt;all actions are wrapped in promises&lt;/strong&gt;, inside of the &lt;code&gt;I&lt;/code&gt; object. &lt;a href=&quot;https://github.com/codeceptjs/CodeceptJS/blob/master/lib/recorder.js&quot;&gt;Global promise (opens new window)&lt;/a&gt; chain is initialized before each test and all &lt;code&gt;I.*&lt;/code&gt; calls will be appended to it, as well as setup and teardown.</source>
          <target state="translated">ただし、舞台裏では、&lt;strong&gt;すべてのアクションが&lt;/strong&gt; &lt;code&gt;I&lt;/code&gt; オブジェクト内の&lt;strong&gt;promise&lt;/strong&gt;に&lt;strong&gt;ラップされ&lt;/strong&gt;ています。&lt;a href=&quot;https://github.com/codeceptjs/CodeceptJS/blob/master/lib/recorder.js&quot;&gt;グローバルpromise（新しいウィンドウを開く）&lt;/a&gt;チェーンは、各テストの前に初期化され、すべての &lt;code&gt;I.*&lt;/code&gt; 呼び出しが追加され、セットアップとティアダウンも行われます。</target>
        </trans-unit>
        <trans-unit id="9a3309ec6c720ff72177df7ff022adca9ed32eea" translate="yes" xml:space="preserve">
          <source>However, if you can't update the code you can go to the second option. In this case, you should bind your locators to visible text on page and available semantic attribues. For instance, instead of using generated locator as this one:</source>
          <target state="translated">しかし、コードを更新できない場合は、2番目のオプションを使用することができます。この場合、ロケータをページ上の可視テキストと利用可能なセマンティックアトリビューションにバインドする必要があります。例えば、このように生成されたロケータを使うのではなく、以下のようにします。</target>
        </trans-unit>
        <trans-unit id="9a53891285aeacfad664d315ada5599176048dee" translate="yes" xml:space="preserve">
          <source>However, it's recommended to not overengineer and keep tests simple. If a test code doesn't require reusage at this point it should not be transformed to use page objects.</source>
          <target state="translated">しかし、オーバーエンジニアリングはせず、テストはシンプルにしておくことをお勧めします。この時点でテストコードが再利用を必要としない場合は、ページオブジェクトを使用するように変換すべきではありません。</target>
        </trans-unit>
        <trans-unit id="de408dbba0dc1732582a4f54a11c5d5db938daa9" translate="yes" xml:space="preserve">
          <source>However, you can't access uninitialized data from a container, so to start, you need to initialized data first. Inside &lt;code&gt;bootstrap&lt;/code&gt; function of the config we execute the &lt;code&gt;share&lt;/code&gt; function with &lt;code&gt;local: true&lt;/code&gt; to initialize value locally:</source>
          <target state="translated">ただし、コンテナから初期化されていないデータにアクセスすることはできないため、開始するには、最初にデータを初期化する必要があります。構成の &lt;code&gt;bootstrap&lt;/code&gt; 関数内で、 &lt;code&gt;local: true&lt;/code&gt; を使用して &lt;code&gt;share&lt;/code&gt; 関数を実行し、値をローカルで初期化します。</target>
        </trans-unit>
        <trans-unit id="e4d5ebe01dfadab7c70f17122ef7cd34dd84d2c8" translate="yes" xml:space="preserve">
          <source>Html</source>
          <target state="translated">Html</target>
        </trans-unit>
        <trans-unit id="8bbeaf1ff076e67f1fe45507be8d32265e3e7fc6" translate="yes" xml:space="preserve">
          <source>Hybrid Apps and Contexts</source>
          <target state="translated">ハイブリッドアプリとコンテキスト</target>
        </trans-unit>
        <trans-unit id="0e9f5c15bc6549e57568e937c9756b79fb5fcde1" translate="yes" xml:space="preserve">
          <source>ID Locators</source>
          <target state="translated">IDロケータ</target>
        </trans-unit>
        <trans-unit id="f547e8786394ca37ea6aea53d1ad95e9390254b6" translate="yes" xml:space="preserve">
          <source>ID locators are best to select the exact semantic element in web and mobile testing:</source>
          <target state="translated">IDロケータは、Webやモバイルテストで正確なセマンティック要素を選択するのがベストです。</target>
        </trans-unit>
        <trans-unit id="52f42adee0a7f85f60b816ceb0898ecc9f85ca16" translate="yes" xml:space="preserve">
          <source>IFrames</source>
          <target state="translated">IFrames</target>
        </trans-unit>
        <trans-unit id="096a3585f58ee0f5e8017664a4dc999ac568db8f" translate="yes" xml:space="preserve">
          <source>Ids of created records are collected and used in the end of a test for the cleanup. If you need to receive &lt;code&gt;id&lt;/code&gt; instead of full response enable &lt;code&gt;returnId&lt;/code&gt; in a helper config:</source>
          <target state="translated">作成されたレコードのIDが収集され、クリーンアップのテストの最後に使用されます。完全な応答ではなく &lt;code&gt;id&lt;/code&gt; を受け取る必要がある場合は、ヘルパー &lt;code&gt;returnId&lt;/code&gt; でreturnIdを有効にします。</target>
        </trans-unit>
        <trans-unit id="85e640575ddab45c095c068e19d9092a587f6ca4" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;registerGlobal&lt;/code&gt; is false you can use tryTo from the plugin:</source>
          <target state="translated">場合 &lt;code&gt;registerGlobal&lt;/code&gt; が偽であるあなたは、プラグインからtryToを使用することができます。</target>
        </trans-unit>
        <trans-unit id="e9d2d31175e07f95f3bcd9ea75ca02f192c4c2f8" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;restore&lt;/code&gt; and &lt;code&gt;check&lt;/code&gt; were not successful, &lt;code&gt;login&lt;/code&gt; is executed</source>
          <target state="translated">場合は &lt;code&gt;restore&lt;/code&gt; と &lt;code&gt;check&lt;/code&gt; 成功しなかった、 &lt;code&gt;login&lt;/code&gt; 実行されます</target>
        </trans-unit>
        <trans-unit id="0ee792bd956e08f701eee5259777e90702c2621c" translate="yes" xml:space="preserve">
          <source>If Allure plugin is enabled this plugin attaches each saved screenshot to allure report.</source>
          <target state="translated">Allureプラグインが有効な場合、このプラグインは保存されたスクリーンショットをallureレポートに添付します。</target>
        </trans-unit>
        <trans-unit id="0c74fb24f7000fc90954047c780d3767dfe8b85b" translate="yes" xml:space="preserve">
          <source>If a function returns a Promise it will wait for its resolution.</source>
          <target state="translated">関数がプロミスを返す場合は、その解決を待ちます。</target>
        </trans-unit>
        <trans-unit id="4ece2584654c818ff3c20e83930ca5ea47d2405b" translate="yes" xml:space="preserve">
          <source>If a fuzzy locator is given, the page will be searched for a button, link, or image matching the locator string. For buttons, the &quot;value&quot; attribute, &quot;name&quot; attribute, and inner text are searched. For links, the link text is searched. For images, the &quot;alt&quot; attribute and inner text of any parent links are searched.</source>
          <target state="translated">ファジーロケータが与えられた場合、ページはロケータ文字列に一致するボタン、リンク、または画像を検索します。ボタンの場合は、&quot;value &quot;属性、&quot;name &quot;属性、および内部テキストが検索されます。リンクの場合は、リンクテキストが検索されます。画像の場合は、&quot;alt &quot;属性と親リンクの内部テキストが検索されます。</target>
        </trans-unit>
        <trans-unit id="13b09ad343ff6939493be83ec73566f995718fc5" translate="yes" xml:space="preserve">
          <source>If a group of scenarios have the same initial steps, let's that for dashboard we need always need to be logged in as administrator. We can use &lt;em&gt;Background&lt;/em&gt; section to do the required preparations and not to repeat same steps across scenarios.</source>
          <target state="translated">シナリオのグループの初期ステップが同じである場合、ダッシュボードでは常に管理者としてログインする必要があるとしましょう。&lt;em&gt;背景&lt;/em&gt;セクションを使用して、必要な準備を行い、シナリオ間で同じ手順を繰り返さないようにすることができます。</target>
        </trans-unit>
        <trans-unit id="2356a98d060aedab43dc3c8639a245010a71063a" translate="yes" xml:space="preserve">
          <source>If a plugin is disabled (&lt;code&gt;enabled&lt;/code&gt; is not set or false) this plugin can be enabled from command line:</source>
          <target state="translated">プラグインが無効に &lt;code&gt;enabled&lt;/code&gt; いる場合（有効に設定されていないかfalse）、このプラグインはコマンドラインから有効にできます。</target>
        </trans-unit>
        <trans-unit id="063339ae438f3d0fef57c0863b99466ccd9107f0" translate="yes" xml:space="preserve">
          <source>If a plugin needs to be enabled in &lt;code&gt;dry-run&lt;/code&gt; mode, pass its name in &lt;code&gt;-p&lt;/code&gt; option:</source>
          <target state="translated">プラグインで有効にする必要がある場合 &lt;code&gt;dry-run&lt;/code&gt; モードでその名を渡す &lt;code&gt;-p&lt;/code&gt; オプション：</target>
        </trans-unit>
        <trans-unit id="3ddffba98851b73e5c1ef12443277051c83ad72e" translate="yes" xml:space="preserve">
          <source>If a test is failing you can prevent browser from closing by putting &lt;code&gt;pause()&lt;/code&gt; command into &lt;code&gt;After()&lt;/code&gt; hook. This is very helpful to debug failing tests. This way you can keep the same session and try different actions on a page to get the idea what went wrong.</source>
          <target state="translated">テストが失敗した場合は、 &lt;code&gt;pause()&lt;/code&gt; コマンドを &lt;code&gt;After()&lt;/code&gt; フックに置くことで、ブラウザーが閉じないようにすることができます。これは、失敗したテストのデバッグに非常に役立ちます。このようにして、同じセッションを維持し、ページでさまざまなアクションを試行して、問題の原因を把握できます。</target>
        </trans-unit>
        <trans-unit id="6da433caf4e9a08fa1bc29e371616cdd077ea299" translate="yes" xml:space="preserve">
          <source>If an application has different pages (login, admin, etc) you should use a page object. CodeceptJS can generate a template for it with the following command:</source>
          <target state="translated">アプリケーションが異なるページ(ログイン、管理者など)を持っている場合、ページオブジェクトを使用する必要があります。CodeceptJSは以下のコマンドでそのためのテンプレートを生成することができます。</target>
        </trans-unit>
        <trans-unit id="9d8b4f58066006c7599c4f10232eeac69ae34be8" translate="yes" xml:space="preserve">
          <source>If data is required for a test, try to create that data via API. See how to do it in &lt;a href=&quot;https://codecept.io/data&quot;&gt;Data Management&lt;/a&gt; chapter.</source>
          <target state="translated">テストにデータが必要な場合は、APIを介してそのデータを作成してみてください。&lt;a href=&quot;https://codecept.io/data&quot;&gt;データ管理の&lt;/a&gt;章でそれを行う方法を参照してください。</target>
        </trans-unit>
        <trans-unit id="22cb2d8acd6446c4d6ea8e02ab3dee513a893bfe" translate="yes" xml:space="preserve">
          <source>If disabled start the container manually before running tests (default : true)</source>
          <target state="translated">無効にした場合は、テストを実行する前にコンテナを手動で起動します (デフォルトは true)</target>
        </trans-unit>
        <trans-unit id="bfb1ccbe3b0b8aec94e2cdfefbcd5692e791cdea" translate="yes" xml:space="preserve">
          <source>If everything is OK, continue with installing Appium. If not, consider using cloud based alternatives like &lt;a href=&quot;https://saucelabs.com&quot;&gt;SauceLabs (opens new window)&lt;/a&gt; or &lt;a href=&quot;http://browserstack.com&quot;&gt;BrowserStack (opens new window)&lt;/a&gt;. Cloud services provide hosted appium with real and emulated mobile devices.</source>
          <target state="translated">すべて問題がない場合は、Appiumのインストールを続行します。そうでない場合は、&lt;a href=&quot;https://saucelabs.com&quot;&gt;SauceLabs（新しいウィンドウを開く）&lt;/a&gt;や&lt;a href=&quot;http://browserstack.com&quot;&gt;BrowserStack（新しいウィンドウを開く&lt;/a&gt;）などのクラウドベースの代替手段の使用を検討してください。クラウドサービスは、ホストされたappiumに実際のエミュレートされたモバイルデバイスを提供します。</target>
        </trans-unit>
        <trans-unit id="a75235bc5c76856d5d1c1716df13186be5da0384" translate="yes" xml:space="preserve">
          <source>If everything is OK, continue with installing Appium. If not, consider using cloud based alternatives like &lt;a href=&quot;https://saucelabs.com&quot;&gt;SauceLabs&lt;/a&gt; or &lt;a href=&quot;http://browserstack.com&quot;&gt;BrowserStack&lt;/a&gt;. Cloud services provide hosted appium with real and emulated mobile devices.</source>
          <target state="translated">すべて問題なければ、Appiumのインストールを続行します。そうでない場合は、&lt;a href=&quot;https://saucelabs.com&quot;&gt;SauceLabs&lt;/a&gt;や&lt;a href=&quot;http://browserstack.com&quot;&gt;BrowserStack&lt;/a&gt;などのクラウドベースの代替手段の使用を検討してください。クラウドサービスは、実際のエミュレートされたモバイルデバイスを備えたホステッドアピウムを提供します。</target>
        </trans-unit>
        <trans-unit id="ba2b99f103a86a42923b39a393956e4acb6ea3e5" translate="yes" xml:space="preserve">
          <source>If everything is done right, you will see in console:</source>
          <target state="translated">すべてが正しく行われている場合は、コンソールに表示されます。</target>
        </trans-unit>
        <trans-unit id="4421a3cd063bdcd13c1a018d9eb5cb39449f6f10" translate="yes" xml:space="preserve">
          <source>If inside one test you plan to record/replay requests in several places, provide &lt;a href=&quot;https://netflix.github.io/pollyjs/#/api?id=recordingname&quot;&gt;recording name (opens new window)&lt;/a&gt; as the parameter.</source>
          <target state="translated">1つのテスト内で複数の場所でリクエストを記録/再生する予定の場合は、パラメータとして&lt;a href=&quot;https://netflix.github.io/pollyjs/#/api?id=recordingname&quot;&gt;記録名を&lt;/a&gt;指定します（新しいウィンドウを開きます）。</target>
        </trans-unit>
        <trans-unit id="d3f81f920113f784d43c57e164b3fe4b05166c76" translate="yes" xml:space="preserve">
          <source>If it's hard to define what to wait, it is recommended to use &lt;a href=&quot;https://codecept.io/basics/#retries&quot;&gt;retries&lt;/a&gt; to rerun flaky steps.</source>
          <target state="translated">待機する対象を定義することが難しい場合は、&lt;a href=&quot;https://codecept.io/basics/#retries&quot;&gt;再試行&lt;/a&gt;を使用して不安定なステップを再実行することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="77ab370cf15683e9f08143e13547902dadf678f1" translate="yes" xml:space="preserve">
          <source>If multiple elements found returns an array of texts.</source>
          <target state="translated">複数の要素が見つかった場合は、テキストの配列を返します。</target>
        </trans-unit>
        <trans-unit id="4a160b8d5dec036d87b5936b347f38a55f679072" translate="yes" xml:space="preserve">
          <source>If multiple elements found returns first element.</source>
          <target state="translated">複数の要素が見つかった場合は、最初の要素を返します。</target>
        </trans-unit>
        <trans-unit id="62724d76b1d949c7fc96de02a059f6eab509f698" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;CODECEPT_ARGS&lt;/code&gt; provided and &lt;code&gt;RUN_MULTIPLE&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, tests will proceed with &lt;code&gt;CODECEPT_ARGS=--all&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;RUN_MULTIPLE&lt;/code&gt; が &lt;code&gt;CODECEPT_ARGS&lt;/code&gt; されておらず、RUN_MULTIPLEが &lt;code&gt;true&lt;/code&gt; の場合、テストは &lt;code&gt;CODECEPT_ARGS=--all&lt;/code&gt; 続行されます</target>
        </trans-unit>
        <trans-unit id="62996de8bcfbec39e22ca563bb21a266fea81b3a" translate="yes" xml:space="preserve">
          <source>If none found, CodeceptJS tries to find link or button containing that text. In case an image is clickable its &lt;code&gt;alt&lt;/code&gt; attribute will be checked for text inclusion. Form buttons will also be searched by name.</source>
          <target state="translated">何も見つからない場合、CodeceptJSはそのテキストを含むリンクまたはボタンを見つけようとします。画像がクリック可能な場合、その &lt;code&gt;alt&lt;/code&gt; 属性はテキストが含まれているかどうかチェックされます。フォームボタンも名前で検索されます。</target>
        </trans-unit>
        <trans-unit id="85bc9dd5253b516012fc53aa0b82a58614b49832" translate="yes" xml:space="preserve">
          <source>If none was found, CodeceptJS tries to find a link or button containing that text. In case an image is clickable its &lt;code&gt;alt&lt;/code&gt; attribute will be checked for text inclusion. Form buttons will also be searched by name.</source>
          <target state="translated">何も見つからなかった場合、CodeceptJSはそのテキストを含むリンクまたはボタンを見つけようとします。画像がクリック可能である場合、その &lt;code&gt;alt&lt;/code&gt; 属性はテキストが含まれているかどうかチェックされます。フォームボタンも名前で検索されます。</target>
        </trans-unit>
        <trans-unit id="a150629e125fee676f88d003d02e759756038919" translate="yes" xml:space="preserve">
          <source>If nothing found, check if locator looks like a CSS selector. If so, run it.</source>
          <target state="translated">何も見つからなければ、locator が CSS セレクタのように見えるかどうかを確認してください。そうであれば、実行してみてください。</target>
        </trans-unit>
        <trans-unit id="8d191edeeb2f7528441cdddb03fa5eac3b5231f5" translate="yes" xml:space="preserve">
          <source>If nothing found, check if locator looks like an XPath expression. If so, run it.</source>
          <target state="translated">何も見つからなければ、locator が XPath 式のように見えるかどうかをチェックします。そうであれば、実行してください。</target>
        </trans-unit>
        <trans-unit id="60616e3db3c038ea0a953c1083ccd98e7482a8b2" translate="yes" xml:space="preserve">
          <source>If nothing found, check if there is a label with specified text for input element.</source>
          <target state="translated">何もなければ、入力要素に指定されたテキストを持つラベルがあるかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="5d48b68ada9c7cef738a6e62fcd1dccaf51dde83" translate="yes" xml:space="preserve">
          <source>If nothing found, check if there is an input element with a corresponding name.</source>
          <target state="translated">何も見つからなければ、対応する名前の入力要素があるかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="087f7db0529a56d8cfaa6e4e27adc319d208d0ce" translate="yes" xml:space="preserve">
          <source>If nothing found, throw an &lt;code&gt;ElementNotFound&lt;/code&gt; exception.</source>
          <target state="translated">何も見つからない場合は、 &lt;code&gt;ElementNotFound&lt;/code&gt; 例外をスローします。</target>
        </trans-unit>
        <trans-unit id="4bc75e999edc5c26641c26b6691d1a8a9900fe8f" translate="yes" xml:space="preserve">
          <source>If the locator is an object, it should have a single element, with the key signifying the locator type (&lt;code&gt;id&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;css&lt;/code&gt;, &lt;code&gt;xpath&lt;/code&gt;, &lt;code&gt;link&lt;/code&gt;, &lt;code&gt;react&lt;/code&gt;, or &lt;code&gt;class&lt;/code&gt;) and the value being the locator itself. This is called a &quot;strict&quot; locator.</source>
          <target state="translated">ロケーターがオブジェクトの場合、単一の要素が必要です。キーはロケーターのタイプ（ &lt;code&gt;id&lt;/code&gt; 、 &lt;code&gt;name&lt;/code&gt; 、 &lt;code&gt;css&lt;/code&gt; 、 &lt;code&gt;xpath&lt;/code&gt; 、 &lt;code&gt;link&lt;/code&gt; 、 &lt;code&gt;react&lt;/code&gt; 、または &lt;code&gt;class&lt;/code&gt; ）を示し、値はロケーター自体です。これは「厳密な」ロケーターと呼ばれます。</target>
        </trans-unit>
        <trans-unit id="c7252fea85b2869f8748c4dae87dd49ca556bb17" translate="yes" xml:space="preserve">
          <source>If the locator is an object, it should have a single element, with the key signifying the locator type (&lt;code&gt;id&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;css&lt;/code&gt;, &lt;code&gt;xpath&lt;/code&gt;, &lt;code&gt;link&lt;/code&gt;, or &lt;code&gt;class&lt;/code&gt;) and the value being the locator itself. This is called a &quot;strict&quot; locator.</source>
          <target state="translated">ロケーターがオブジェクトの場合、ロケーターのタイプ（ &lt;code&gt;id&lt;/code&gt; 、 &lt;code&gt;name&lt;/code&gt; 、 &lt;code&gt;css&lt;/code&gt; 、 &lt;code&gt;xpath&lt;/code&gt; 、 &lt;code&gt;link&lt;/code&gt; 、または &lt;code&gt;class&lt;/code&gt; ）を示すキーとロケーター自体である値を持つ単一の要素が必要です。これは「厳密な」ロケーターと呼ばれます。</target>
        </trans-unit>
        <trans-unit id="7dd1bc535a16f85d530814882ed5291950ee3675" translate="yes" xml:space="preserve">
          <source>If use locators of &lt;code&gt;data-element&lt;/code&gt; attribute you can implement a strategy, which will allow you to use &lt;code&gt;{ data: 'my-element' }&lt;/code&gt; as a valid locator.</source>
          <target state="translated">&lt;code&gt;data-element&lt;/code&gt; 属性のロケーターを使用する場合は、戦略を実装できます。これにより、 &lt;code&gt;{ data: 'my-element' }&lt;/code&gt; を有効なロケーターとして使用できるようになります。</target>
        </trans-unit>
        <trans-unit id="71ebdf423a82891ced163d81b0b087de963c8567" translate="yes" xml:space="preserve">
          <source>If user login is required, use &lt;a href=&quot;https://codecept.io/plugins#autoLogin&quot;&gt;autoLogin plugin&lt;/a&gt; instead of putting login steps inside a test.</source>
          <target state="translated">ユーザーログインが必要な場合は、テスト内にログイン手順を配置する代わりに、&lt;a href=&quot;https://codecept.io/plugins#autoLogin&quot;&gt;autoLoginプラグイン&lt;/a&gt;を使用してください。</target>
        </trans-unit>
        <trans-unit id="0b7c18242e5e2eccba3b59cc416e24f9d226800e" translate="yes" xml:space="preserve">
          <source>If using the Protractor or WebDriverIO drivers, link the container with a Selenium Standalone docker container with an alias of &lt;code&gt;selenium&lt;/code&gt;. Additionally, make sure your &lt;code&gt;codeceptjs.conf.js&lt;/code&gt; contains the following to allow CodeceptJS to identify where Selenium is running.</source>
          <target state="translated">分度器やWebDriverIOドライバを使用している場合は、そのエイリアスセレンスタンドアロンのドッキングウィンドウコンテナとコンテナをリンク &lt;code&gt;selenium&lt;/code&gt; 。さらに、 &lt;code&gt;codeceptjs.conf.js&lt;/code&gt; に以下が含まれていることを確認してください。これにより、CodeceptJSがSeleniumが実行されている場所を識別できるようになります。</target>
        </trans-unit>
        <trans-unit id="1174ba3389b036d41c091d371b209485e77eb916" translate="yes" xml:space="preserve">
          <source>If we replace raw CSS selector with a button title we can improve readability of such test. Even if the text on the button changes, it's much easier to update it.</source>
          <target state="translated">生のCSSセレクタをボタンのタイトルに置き換えると、このようなテストの可読性が向上します。ボタンの文字が変わっても更新が楽になります。</target>
        </trans-unit>
        <trans-unit id="2d4d8ed8f806ec98349dacf7bcd8fc58d27586bd" translate="yes" xml:space="preserve">
          <source>If we use hashes() with the previous exemple :</source>
          <target state="translated">先ほどの例で hashes()を使用した場合 .</target>
        </trans-unit>
        <trans-unit id="de1e363d139be70afd32b50bc526db19e83c8f1e" translate="yes" xml:space="preserve">
          <source>If you agreed to create a demo component, you will also see &lt;code&gt;TestMe&lt;/code&gt; component in &lt;code&gt;src/components&lt;/code&gt; folder.</source>
          <target state="translated">デモコンポーネントの作成に同意した場合は、 &lt;code&gt;src/components&lt;/code&gt; フォルダーに &lt;code&gt;TestMe&lt;/code&gt; コンポーネントも表示されます。</target>
        </trans-unit>
        <trans-unit id="c3b2397cf6f3ceacb4a5e0af167425a6814558cc" translate="yes" xml:space="preserve">
          <source>If you already have CodeceptJS project, just install &lt;code&gt;playwright&lt;/code&gt; package and enable a helper it in config.</source>
          <target state="translated">すでにCodeceptJSプロジェクトがある場合は、 &lt;code&gt;playwright&lt;/code&gt; パッケージをインストールし、configでヘルパーを有効にします。</target>
        </trans-unit>
        <trans-unit id="54b28b97a6c15a211d85afbc5cbea57a7dff697f" translate="yes" xml:space="preserve">
          <source>If you already have CodeceptJS project, just install &lt;code&gt;puppeteer&lt;/code&gt; package and enable a helper it in config.</source>
          <target state="translated">すでにCodeceptJSプロジェクトを持っている場合は、単にインストール &lt;code&gt;puppeteer&lt;/code&gt; パッケージをと設定でヘルパーを有効にします。</target>
        </trans-unit>
        <trans-unit id="d51f2fe971100a29238559fbf966a4d235d21c1a" translate="yes" xml:space="preserve">
          <source>If you are familiar with Selenium, you can choose classical &lt;a href=&quot;#using-selenium-webdriver&quot;&gt;&lt;strong&gt;Selenium WebDriver&lt;/strong&gt; setup&lt;/a&gt;.</source>
          <target state="translated">Seleniumに慣れている場合は、従来の&lt;a href=&quot;#using-selenium-webdriver&quot;&gt;&lt;strong&gt;Selenium WebDriver&lt;/strong&gt;セットアップを&lt;/a&gt;選択できます。</target>
        </trans-unit>
        <trans-unit id="a141b918fce5d393c87aaac67970e8f25232011d" translate="yes" xml:space="preserve">
          <source>If you are new to Selenoid and you want plug and play setup use automatic mode.</source>
          <target state="translated">セレノイドを初めて使用する場合は、自動モードを使用してプラグアンドプレイのセットアップを行います。</target>
        </trans-unit>
        <trans-unit id="1244e749513ae1fbf2f928b1ead9d9586e23ee45" translate="yes" xml:space="preserve">
          <source>If you are using JavaScript-style config &lt;code&gt;codecept.conf.js&lt;/code&gt;, bootstrap and teardown functions can be placed inside of it:</source>
          <target state="translated">JavaScriptスタイルの &lt;code&gt;codecept.conf.js&lt;/code&gt; を使用している場合は、ブートストラップおよびティアダウン関数をその中に配置できます。</target>
        </trans-unit>
        <trans-unit id="e33097e0e89d99ab314da9e69637eb776f7e2f88" translate="yes" xml:space="preserve">
          <source>If you are using Visual Studio Code or other IDE that supports TypeScript Definitions, you can generate step definitions with</source>
          <target state="translated">Visual Studio Code または TypeScript 定義をサポートする他の IDE を使用している場合は、ステップ定義を</target>
        </trans-unit>
        <trans-unit id="03261a2d9e133779cfc5cf322d507f58ec1046d6" translate="yes" xml:space="preserve">
          <source>If you come from Java, Python or Ruby don't be afraid of a new syntax. It is more flexible than you think!</source>
          <target state="translated">JavaやPython、Rubyから来た人は、新しい構文を怖がらないようにしましょう。あなたが思っている以上に柔軟性があります。</target>
        </trans-unit>
        <trans-unit id="4014ad10418ae64ff88887377d847ca287adc315" translate="yes" xml:space="preserve">
          <source>If you completed step 1 and step 2 you should have a configuration similar this:</source>
          <target state="translated">ステップ1とステップ2が完了していれば、このような構成になっているはずです。</target>
        </trans-unit>
        <trans-unit id="56b91d013a1975025f45412f944d9afab98d6c1e" translate="yes" xml:space="preserve">
          <source>If you decide to keep cookies between tests you don't need to save/retrieve cookies between tests. But you need to login once work until session expires. For this case, disable &lt;code&gt;fetch&lt;/code&gt; and &lt;code&gt;restore&lt;/code&gt; methods.</source>
          <target state="translated">テスト間でCookieを保持することにした場合、テスト間でCookieを保存/取得する必要はありません。ただし、セッションが期限切れになるまで、作業後にログインする必要があります。この場合、 &lt;code&gt;fetch&lt;/code&gt; メソッドと &lt;code&gt;restore&lt;/code&gt; メソッドを無効にします。</target>
        </trans-unit>
        <trans-unit id="a7967e7447e6477d04ff3b9c98315e661d0d4710" translate="yes" xml:space="preserve">
          <source>If you don't have &lt;code&gt;package.json&lt;/code&gt; in your project, create it with &lt;code&gt;npm init -y&lt;/code&gt;.</source>
          <target state="translated">プロジェクトに &lt;code&gt;package.json&lt;/code&gt; がない場合は、 &lt;code&gt;npm init -y&lt;/code&gt; 使用して作成します。</target>
        </trans-unit>
        <trans-unit id="d7780a7244ffaee02f008f8dfb94f7c95da0120f" translate="yes" xml:space="preserve">
          <source>If you don't use multi-lingual website or you don't update texts often it is OK to click on links by their texts or match fields by their placeholders.</source>
          <target state="translated">多言語対応のサイトを利用していない場合や、テキストを頻繁に更新していない場合は、テキストでリンクをクリックしたり、プレースホルダでフィールドをマッチさせたりしても問題ありません。</target>
        </trans-unit>
        <trans-unit id="c50bcc02521789874f41f9ffaf420e2a1f7cb29c" translate="yes" xml:space="preserve">
          <source>If you don't want to rely on guessing locators, specify them manually with &lt;code&gt;{ css: 'button' }&lt;/code&gt; or &lt;code&gt;{ xpath: '//button' }&lt;/code&gt;. We call them strict locators. Those locators will be faster but less readable.</source>
          <target state="translated">推測ロケーターに依存したくない場合は、 &lt;code&gt;{ css: 'button' }&lt;/code&gt; または &lt;code&gt;{ xpath: '//button' }&lt;/code&gt; を使用して手動で指定します。それらを厳密なロケーターと呼びます。これらのロケーターは高速ですが、読みにくくなります。</target>
        </trans-unit>
        <trans-unit id="65e74d7bfd17d94b29b2c780b9febeef2faee01f" translate="yes" xml:space="preserve">
          <source>If you face issues connecting to WebDriver, please check that corresponding server is running on a specified port. If host is other than &lt;code&gt;localhost&lt;/code&gt; or port is other than &lt;code&gt;4444&lt;/code&gt;, update the configuration.</source>
          <target state="translated">WebDriverへの接続で問題が発生した場合は、対応するサーバーが指定されたポートで実行されていることを確認してください。ホストが &lt;code&gt;localhost&lt;/code&gt; ホスト以外の場合、またはポートが &lt;code&gt;4444&lt;/code&gt; 以外の場合は、構成を更新します。</target>
        </trans-unit>
        <trans-unit id="4fa375d59c8139ed136119668af3e61af4855159" translate="yes" xml:space="preserve">
          <source>If you get an error like this</source>
          <target state="translated">このようなエラーが出た場合</target>
        </trans-unit>
        <trans-unit id="98815f5b049051e9177e9268d95ba72346408486" translate="yes" xml:space="preserve">
          <source>If you have a convention to use &lt;code&gt;data-test-id&lt;/code&gt; or &lt;code&gt;data-qa&lt;/code&gt; attributes to mark active elements for e2e tests, you can enable this plugin to simplify matching elements with these attributes:</source>
          <target state="translated">&lt;code&gt;data-test-id&lt;/code&gt; または &lt;code&gt;data-qa&lt;/code&gt; 属性を使用してe2eテストのアクティブな要素をマークする規則がある場合は、このプラグインを有効にして、これらの属性との要素の一致を単純化できます。</target>
        </trans-unit>
        <trans-unit id="fa0991d02bbf537feacaa0d8745808d19b87850c" translate="yes" xml:space="preserve">
          <source>If you have a step which often fails you can retry execution for this single step. Use &lt;code&gt;retry()&lt;/code&gt; function before an action to ask CodeceptJS to retry this step on failure:</source>
          <target state="translated">失敗することが多いステップがある場合は、この単一ステップの実行を再試行できます。アクションの前に &lt;code&gt;retry()&lt;/code&gt; 関数を使用して、失敗時にこのステップを再試行するようにCodeceptJSに要求します。</target>
        </trans-unit>
        <trans-unit id="34c2b90851ac9c6f075b1b7efb0e029f85aa0717" translate="yes" xml:space="preserve">
          <source>If you have a step which often fails, you can retry execution for this single step. Use the &lt;code&gt;retry()&lt;/code&gt; function before an action to ask CodeceptJS to retry it on failure:</source>
          <target state="translated">失敗することが多いステップがある場合は、この1つのステップの実行を再試行できます。アクションの前に &lt;code&gt;retry()&lt;/code&gt; 関数を使用して、失敗時にCodeceptJSに再試行するように依頼します。</target>
        </trans-unit>
        <trans-unit id="ff7e29a472a9f65063ad44937ad5e9f8cae2de41" translate="yes" xml:space="preserve">
          <source>If you have issues starting Selenoid with this plugin consider using the official &lt;a href=&quot;https://aerokube.com/cm/latest/&quot;&gt;Configuration Manager (opens new window)&lt;/a&gt; tool from Selenoid</source>
          <target state="translated">このプラグインでソレノイドを起動する際に問題が発生した場合は、ソレノイドの公式&lt;a href=&quot;https://aerokube.com/cm/latest/&quot;&gt;構成マネージャー（新しいウィンドウを開く）&lt;/a&gt;ツールの使用を検討してください。</target>
        </trans-unit>
        <trans-unit id="5952ab5ded009ba42f12d9beee87c591650975e8" translate="yes" xml:space="preserve">
          <source>If you need more control over custom locators see how declare them manually without using a customLocator plugin.</source>
          <target state="translated">カスタムロケータをよりコントロールしたい場合は、customLocator プラグインを使わずに手動で宣言する方法を参照してください。</target>
        </trans-unit>
        <trans-unit id="78822759a24f8c57d809f94d1a0dbe13e8d4f4a7" translate="yes" xml:space="preserve">
          <source>If you need to execute some code before a group of tests, you can &lt;a href=&quot;https://codecept.io/advanced/#tags&quot;&gt;mark these tests with a same tag&lt;/a&gt;. Then to listen for tests where this tag is included (see &lt;a href=&quot;#test-object&quot;&gt;test object api&lt;/a&gt;).</source>
          <target state="translated">テストのグループの前にコードを実行する必要がある場合は、&lt;a href=&quot;https://codecept.io/advanced/#tags&quot;&gt;これらのテストに同じタグを付ける&lt;/a&gt;ことができます。次に、このタグが含まれているテストをリッスンします（&lt;a href=&quot;#test-object&quot;&gt;テストオブジェクトapiを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="299ec487b04fff9ad42cef734cbf367b39e75fa9" translate="yes" xml:space="preserve">
          <source>If you need to get element's value inside a test you can use &lt;code&gt;grab*&lt;/code&gt; methods. They should be used with &lt;code&gt;await&lt;/code&gt; operator inside &lt;code&gt;async&lt;/code&gt; function:</source>
          <target state="translated">テスト内で要素の値を取得する必要がある場合は、 &lt;code&gt;grab*&lt;/code&gt; メソッドを使用できます。これらは、 &lt;code&gt;async&lt;/code&gt; 関数内で &lt;code&gt;await&lt;/code&gt; 演算子と共に使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="1db6d4e265a9e13b6144b630daf868939ff148be" translate="yes" xml:space="preserve">
          <source>If you need to run complex a setup before all tests and have to teardown this afterwards, you can use the &lt;code&gt;BeforeSuite&lt;/code&gt; and &lt;code&gt;AfterSuite&lt;/code&gt; functions. &lt;code&gt;BeforeSuite&lt;/code&gt; and &lt;code&gt;AfterSuite&lt;/code&gt; have access to the &lt;code&gt;I&lt;/code&gt; object, but &lt;code&gt;BeforeSuite/AfterSuite&lt;/code&gt; don't have any access to the browser, because it's not running at this moment. You can use them to execute handlers that will setup your environment. &lt;code&gt;BeforeSuite/AfterSuite&lt;/code&gt; will work only for the file it was declared in (so you can declare different setups for files)</source>
          <target state="translated">すべてのテストの前に複雑なセットアップを実行する必要があり、 &lt;code&gt;BeforeSuite&lt;/code&gt; を &lt;code&gt;AfterSuite&lt;/code&gt; 必要がある場合は、BeforeSuiteおよびAfterSuite関数を使用できます。 &lt;code&gt;BeforeSuite&lt;/code&gt; と &lt;code&gt;AfterSuite&lt;/code&gt; は &lt;code&gt;I&lt;/code&gt; オブジェクトにアクセスできますが、 &lt;code&gt;BeforeSuite/AfterSuite&lt;/code&gt; は現時点では実行されていないため、ブラウザにアクセスできません。それらを使用して、環境をセットアップするハンドラーを実行できます。 &lt;code&gt;BeforeSuite/AfterSuite&lt;/code&gt; は、宣言されたファイルに対してのみ機能します（したがって、ファイルに対してさまざまな設定を宣言できます）</target>
        </trans-unit>
        <trans-unit id="6a2d83a55cedf85810d1176c0df2ea68421d92db" translate="yes" xml:space="preserve">
          <source>If you need to run complex setup before all tests and teardown this afterwards you can use &lt;code&gt;BeforeSuite&lt;/code&gt; and &lt;code&gt;AfterSuite&lt;/code&gt; functions. &lt;code&gt;BeforeSuite&lt;/code&gt; and &lt;code&gt;AfterSuite&lt;/code&gt; have access to &lt;code&gt;I&lt;/code&gt; object, but &lt;code&gt;BeforeSuite/AfterSuite&lt;/code&gt; don't have an access to the browser because it's not running at this moment. You can use them to execute handlers that will setup your environment. &lt;code&gt;BeforeSuite/AfterSuite&lt;/code&gt; will work only for a file where it was declared (so you can declare different setups for files)</source>
          <target state="translated">すべてのテストの前に複雑なセットアップを実行し、後でこれを &lt;code&gt;BeforeSuite&lt;/code&gt; 必要がある場合は、 &lt;code&gt;AfterSuite&lt;/code&gt; 関数とAfterSuite関数を使用できます。 &lt;code&gt;BeforeSuite&lt;/code&gt; と &lt;code&gt;AfterSuite&lt;/code&gt; は &lt;code&gt;I&lt;/code&gt; オブジェクトにアクセスできますが、 &lt;code&gt;BeforeSuite/AfterSuite&lt;/code&gt; は現在実行されていないため、ブラウザにアクセスできません。それらを使用して、環境をセットアップするハンドラーを実行できます。 &lt;code&gt;BeforeSuite/AfterSuite&lt;/code&gt; は、それが宣言されたファイルに対してのみ機能します（したがって、ファイルのさまざまな設定を宣言できます）</target>
        </trans-unit>
        <trans-unit id="3de09631352dbb7876328c63a2f5012706f7a728" translate="yes" xml:space="preserve">
          <source>If you prefer to store your configuration files in a different location, or with a different name, you can do that with &lt;code&gt;--config&lt;/code&gt; or `-c:</source>
          <target state="translated">構成ファイルを別の場所または別の名前で保存する場合は、 &lt;code&gt;--config&lt;/code&gt; または `-c：</target>
        </trans-unit>
        <trans-unit id="dacaedddc64174efec50d3f287c917a8935acc3d" translate="yes" xml:space="preserve">
          <source>If you prefer, you may also pass a string for the locator. This is called a &quot;fuzzy&quot; locator. In this case, CodeceptJS uses a variety of heuristics (depending on the exact method called) to determine what element you're referring to. If you are locating a clickable element or an input element, CodeceptJS will use &lt;a href=&quot;#semantic-locators&quot;&gt;semantic locators&lt;/a&gt;.</source>
          <target state="translated">必要に応じて、ロケーターの文字列を渡すこともできます。これは「ファジー」ロケーターと呼ばれます。この場合、CodeceptJSはさまざまなヒューリスティック（呼び出されたメソッドによって異なります）を使用して、参照している要素を判別します。クリック可能な要素または入力要素を見つける場合、CodeceptJSは&lt;a href=&quot;#semantic-locators&quot;&gt;セマンティックロケーター&lt;/a&gt;を使用します。</target>
        </trans-unit>
        <trans-unit id="4aede733afc7415838cbde85e862efb8ce06213d" translate="yes" xml:space="preserve">
          <source>If you test React Native application, consider using &lt;a href=&quot;https://codecept.io/detox&quot;&gt;Detox helper&lt;/a&gt; for faster tests.</source>
          <target state="translated">React Nativeアプリケーションをテストする場合は、テストを高速化するために&lt;a href=&quot;https://codecept.io/detox&quot;&gt;Detoxヘルパーの&lt;/a&gt;使用を検討してください。</target>
        </trans-unit>
        <trans-unit id="8b209d83aa26e98ce8880d2fbe9898d3dca93db9" translate="yes" xml:space="preserve">
          <source>If you use async functions in the autoLogin plugin, login function should be used with &lt;code&gt;await&lt;/code&gt; keyword.</source>
          <target state="translated">autoLoginプラグインで非同期関数を使用する場合は、ログイン関数を &lt;code&gt;await&lt;/code&gt; キーワードとともに使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="09c315158ddcdff0405a0c8edbbef971886e3864" translate="yes" xml:space="preserve">
          <source>If you want to check all your tests for stability you can set high boundaries for minimal success:</source>
          <target state="translated">安定しているかどうかをすべてのテストで確認したい場合は、最低限の成功のために高い境界線を設定することができます。</target>
        </trans-unit>
        <trans-unit id="8bdd5540c38ee9a1284fdd96f75896f04361d03d" translate="yes" xml:space="preserve">
          <source>If you want to get information from a running test you can use &lt;code&gt;await&lt;/code&gt; inside &lt;strong&gt;async function&lt;/strong&gt; and special methods of helpers started with &lt;code&gt;grab&lt;/code&gt; prefix.</source>
          <target state="translated">あなたが実行中のテストからの情報を取得したい場合は、使用できる &lt;code&gt;await&lt;/code&gt; 内部の&lt;strong&gt;非同期機能&lt;/strong&gt;として始めたヘルパーの特別なメソッド &lt;code&gt;grab&lt;/code&gt; 接頭辞を。</target>
        </trans-unit>
        <trans-unit id="112bd888e98478b39be85002f40e183c24c6885a" translate="yes" xml:space="preserve">
          <source>If you want to get information from a running test you can use &lt;code&gt;await&lt;/code&gt; inside the &lt;strong&gt;async function&lt;/strong&gt;, and utilize special methods of helpers started with the &lt;code&gt;grab&lt;/code&gt; prefix.</source>
          <target state="translated">実行中のテストから情報を取得したい場合は、&lt;strong&gt;async関数&lt;/strong&gt;内で &lt;code&gt;await&lt;/code&gt; を使用し、 &lt;code&gt;grab&lt;/code&gt; プレフィックスで始まるヘルパーの特別なメソッドを利用できます。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="12c9509071d95fa005446bec3ab5a8a53810dc18" translate="yes" xml:space="preserve">
          <source>If you want to get types for your &lt;a href=&quot;https://codecept.io/helpers/#configuration&quot;&gt;custom helper (opens new window)&lt;/a&gt;, you can add their automatically with CodeceptJS command &lt;code&gt;npx codeceptjs def&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://codecept.io/helpers/#configuration&quot;&gt;カスタムヘルパーの&lt;/a&gt;タイプを取得する（新しいウィンドウを開く）場合は、CodeceptJSコマンド &lt;code&gt;npx codeceptjs def&lt;/code&gt; してタイプを自動的に追加できます。</target>
        </trans-unit>
        <trans-unit id="74fd9589eb12a76af35a823a55b5bfed95e78940" translate="yes" xml:space="preserve">
          <source>If you want to run tests using raw ChromeDriver (which also supports WebDriver protocol) avoiding Selenium Server, you should provide following configuration:</source>
          <target state="translated">Selenium Server を避けて生の ChromeDriver (WebDriver プロトコルもサポートしています)を使ってテストを実行したい場合は、以下の設定を行う必要があります。</target>
        </trans-unit>
        <trans-unit id="19e0aa17f12e0b6e54b7a7e7f4f70f883ccbc26d" translate="yes" xml:space="preserve">
          <source>If you want to use TestCafe API inside your tests you can put them into actions of &lt;code&gt;I&lt;/code&gt; object. To do so you can generate a new helper, access TestCafe helper, and get the test controller.</source>
          <target state="translated">テスト内でTestCafeAPIを使用する場合は、それらを &lt;code&gt;I&lt;/code&gt; オブジェクトのアクションに入れることができます。これを行うには、新しいヘルパーを生成し、TestCafeヘルパーにアクセスして、テストコントローラーを取得します。</target>
        </trans-unit>
        <trans-unit id="9dc1821c9f1494c1da4730ab6f9f5f1979eeb94d" translate="yes" xml:space="preserve">
          <source>If you want your tests to split according to your need this method is suited for you. For example: If you have 4 long running test files and 4 normal test files there chance all 4 tests end up in same worker thread. For these cases custom function will be helpful.</source>
          <target state="translated">必要に応じてテストを分割したい場合は、この方法が適しています。例えば、以下のような場合です。4つの長時間実行中のテストファイルと4つの通常のテストファイルがある場合、4つのテストがすべて同じワーカースレッドで終わる可能性があります。このような場合には、カスタム関数が便利です。</target>
        </trans-unit>
        <trans-unit id="2552c9d496021c58c0c3b0ca153abfc09f28d030" translate="yes" xml:space="preserve">
          <source>If you wish to use BrowserStack's &lt;a href=&quot;https://www.browserstack.com/app-automate&quot;&gt;Automated Mobile App Testing (opens new window)&lt;/a&gt; platform. Configure the Appium helper like this:</source>
          <target state="translated">BrowserStackの&lt;a href=&quot;https://www.browserstack.com/app-automate&quot;&gt;自動モバイルアプリテスト（新しいウィンドウを開きます）&lt;/a&gt;プラットフォームを使用する場合。Appiumヘルパーを次のように構成します。</target>
        </trans-unit>
        <trans-unit id="108985ff5b9c833486e7fc488da2048b3fb5c8ee" translate="yes" xml:space="preserve">
          <source>If you wish to use BrowserStack's &lt;a href=&quot;https://www.browserstack.com/app-automate&quot;&gt;Automated Mobile App Testing&lt;/a&gt; platform. Configure the Appium helper like this:</source>
          <target state="translated">BrowserStackの&lt;a href=&quot;https://www.browserstack.com/app-automate&quot;&gt;自動モバイルアプリテスト&lt;/a&gt;プラットフォームを使用する場合。Appiumヘルパーを次のように構成します。</target>
        </trans-unit>
        <trans-unit id="c4bc8516dbca8dcbab0e59fd15f9a2574eccfef5" translate="yes" xml:space="preserve">
          <source>If you'd like to retry a step more than once, pass the amount as a parameter:</source>
          <target state="translated">複数回ステップを再試行したい場合は、パラメータとして量を渡します。</target>
        </trans-unit>
        <trans-unit id="cd93e599bbbb1b4fc11db51a3f722fd84b4c0665" translate="yes" xml:space="preserve">
          <source>If you'd like to retry step more than once pass the amount as parameter:</source>
          <target state="translated">複数回ステップを再試行したい場合は、パラメータとして金額を渡してください。</target>
        </trans-unit>
        <trans-unit id="da46b0bb37dec6814b4643bf19b1abb53c92783e" translate="yes" xml:space="preserve">
          <source>If your code goes beyond using &lt;code&gt;I&lt;/code&gt; object or page objects, you are probably doing something wrong.</source>
          <target state="translated">コードが &lt;code&gt;I&lt;/code&gt; オブジェクトまたはページオブジェクトの使用を超えている場合は、おそらく何か問題があります。</target>
        </trans-unit>
        <trans-unit id="61d43410dc8f293cca8d9a10b912677874a9472b" translate="yes" xml:space="preserve">
          <source>If your session is stored in local storage instead of cookies you still can obtain sessions.</source>
          <target state="translated">セッションがクッキーの代わりにローカルストレージに保存されている場合でも、セッションを取得することができます。</target>
        </trans-unit>
        <trans-unit id="739d701394ccbdb0299026cb34d42db16af42f50" translate="yes" xml:space="preserve">
          <source>Import &lt;code&gt;setSharedCookies&lt;/code&gt; function and call it inside a config:</source>
          <target state="translated">&lt;code&gt;setSharedCookies&lt;/code&gt; 関数をインポートし、構成内で呼び出します。</target>
        </trans-unit>
        <trans-unit id="77e4d26fa3ef5a0f92a8070c5ae41b82fc8d7f6d" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;https://codecept.io/mobile/#locating-elements&quot;&gt;mobile testing (opens new window)&lt;/a&gt; you can use &lt;code&gt;~&lt;/code&gt; to specify the accessibility id to locate an element. In web application you can locate elements by their &lt;code&gt;aria-label&lt;/code&gt; value.</source>
          <target state="translated">では&lt;a href=&quot;https://codecept.io/mobile/#locating-elements&quot;&gt;モバイル試験（新しいウィンドウが開きます）&lt;/a&gt;を使用でき &lt;code&gt;~&lt;/code&gt; の要素を見つけるために、アクセシビリティのIDを指定します。Webアプリケーションでは、 &lt;code&gt;aria-label&lt;/code&gt; 値によって要素を見つけることができます。</target>
        </trans-unit>
        <trans-unit id="35709666889886a1bba450dae4d29a1bbd6810bd" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;https://codecept.io/mobile/#locating-elements&quot;&gt;mobile testing&lt;/a&gt; you can use &lt;code&gt;~&lt;/code&gt; to specify accessibility id to locate an element. In web application you can locate element by their &lt;code&gt;aria-label&lt;/code&gt; value.</source>
          <target state="translated">では&lt;a href=&quot;https://codecept.io/mobile/#locating-elements&quot;&gt;、モバイルテスト&lt;/a&gt;を使用でき &lt;code&gt;~&lt;/code&gt; の要素を見つけるために、アクセシビリティのIDを指定します。Webアプリケーションでは、 &lt;code&gt;aria-label&lt;/code&gt; 値によって要素を見つけることができます。</target>
        </trans-unit>
        <trans-unit id="363f1d92a66d2aa5c13fc91bc8f2112617dbc23c" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;codecept.conf.js&lt;/code&gt; enable Detox helper:</source>
          <target state="translated">で &lt;code&gt;codecept.conf.js&lt;/code&gt; デトックスヘルパーを有効にします。</target>
        </trans-unit>
        <trans-unit id="62edfb1a7e5791b7345931744ea02721169d6072" translate="yes" xml:space="preserve">
          <source>In CodeceptJS we encourage users to follow semantic elements on page while writing tests. Instead of CSS/XPath locators try to stick to visible keywords on page.</source>
          <target state="translated">CodeceptJSでは、ユーザーがテストを書く際にページ上のセマンティックな要素に従うことを推奨しています。CSS/XPathロケータの代わりに、ページ上で目に見えるキーワードに固執するようにしてください。</target>
        </trans-unit>
        <trans-unit id="aacde693b25033c902834997da761ad91638880e" translate="yes" xml:space="preserve">
          <source>In CodeceptJS you can combine tests written in Gherkin format with classical acceptance tests. This way you can keep your feature files compact with minimal set of scenarios, and write regular tests to cover all cases. Please note, feature files will be executed before tests.</source>
          <target state="translated">CodeceptJSでは、Gherkin形式で書かれたテストと古典的な受入テストを組み合わせることができます。このようにして、最小限のシナリオで機能ファイルをコンパクトに保ち、すべてのケースをカバーするための定期的なテストを書くことができます。機能ファイルはテストの前に実行されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="5a31a95dca19c4ba5452bdf1d3a303a5795ff1ea" translate="yes" xml:space="preserve">
          <source>In WebDriver and Puppeteer you can use React locators in any method where locator is required:</source>
          <target state="translated">WebDriverやPuppeteerでは、ロケータが必要なメソッドであれば、Reactロケータを使うことができます。</target>
        </trans-unit>
        <trans-unit id="9dbfe263a93a2b2a77b67205c9780896043a7ef5" translate="yes" xml:space="preserve">
          <source>In WebDriver mocking is disabled every time a new page is loaded. Hence, &lt;code&gt;startMocking&lt;/code&gt; method should be called and the mocks should be updated, after navigating to a new page. This is a limitation of WebDriver. Consider using Puppeteer with MockRequest instead.</source>
          <target state="translated">WebDriverでは、新しいページがロードされるたびにモックが無効になります。したがって、新しいページに移動した後、 &lt;code&gt;startMocking&lt;/code&gt; メソッドを呼び出し、モックを更新する必要があります。これはWebDriverの制限です。代わりに、MockRequestでPuppeteerを使用することを検討してください。</target>
        </trans-unit>
        <trans-unit id="ac1cd0937a68ef9145c21fabd41825c808eab4d5" translate="yes" xml:space="preserve">
          <source>In a similar manner CodeceptJS allows you to generate &lt;strong&gt;PageFragments&lt;/strong&gt; and any other are abstraction by running &lt;code&gt;go&lt;/code&gt; command with &lt;code&gt;--type&lt;/code&gt; (or &lt;code&gt;-t&lt;/code&gt;) option:</source>
          <target state="translated">同様のCodeceptJSにあなたが生成することができます&lt;strong&gt;PageFragmentsを&lt;/strong&gt;、他に実行することによって抽象化され &lt;code&gt;go&lt;/code&gt; でコマンドを &lt;code&gt;--type&lt;/code&gt; （または &lt;code&gt;-t&lt;/code&gt; ）オプション：</target>
        </trans-unit>
        <trans-unit id="1f7f3fad738b432634a6b36839a5db97af75369c" translate="yes" xml:space="preserve">
          <source>In a test:</source>
          <target state="translated">テストで</target>
        </trans-unit>
        <trans-unit id="88675bba8050b45b8f61687d8ef602f1dc1c8fc5" translate="yes" xml:space="preserve">
          <source>In automatic mode the latest version of browser will be used for tests. It is recommended to specify exact version of each browser inside &lt;code&gt;browsers.json&lt;/code&gt; file.</source>
          <target state="translated">自動モードでは、最新バージョンのブラウザがテストに使用されます。 &lt;code&gt;browsers.json&lt;/code&gt; ファイル内で各ブラウザーの正確なバージョンを指定することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="6a9fc2a46e3b5cf8c848b97ac877c280d5187b1e" translate="yes" xml:space="preserve">
          <source>In case an application has different pages (login, admin, etc) you should use a page object. CodeceptJS can generate a template for it with the command:</source>
          <target state="translated">アプリケーションが異なるページ(ログイン、管理者など)を持つ場合、ページオブジェクトを使用します。CodeceptJSはそのためのテンプレートをコマンドで生成することができます。</target>
        </trans-unit>
        <trans-unit id="fdf34e8a67cc55b9fa2283713c38707833cd1daf" translate="yes" xml:space="preserve">
          <source>In case of CodeceptJS you can be sure that in code it will be as easy as it sounds. You just describe a test scenario with JavaScript DSL and allow the framework to handle the rest.</source>
          <target state="translated">CodeceptJSの場合、コードの中では、それが聞こえるように簡単であることを確認することができます。JavaScript DSLを使ってテストシナリオを記述するだけで、あとはフレームワークに任せればいいのです。</target>
        </trans-unit>
        <trans-unit id="0b0a5528d38413b179131fb08d8cd29eb1b8ce63" translate="yes" xml:space="preserve">
          <source>In case scenarios represent the same logic but differ on data, we can use &lt;em&gt;Scenario Outline&lt;/em&gt; to provide different examples for the same behavior. Scenario outline is just like a basic scenario with some values replaced with placeholders, which are filled from a table. Each set of values is executed as a different test.</source>
          <target state="translated">シナリオが同じロジックを表すがデータが異なる場合は、&lt;em&gt;シナリオ概要&lt;/em&gt;を使用して、同じ動作の異なる例を提供できます。シナリオの概要は、いくつかの値がプレースホルダーに置き換えられた基本的なシナリオと同じで、テーブルから入力されます。値の各セットは、異なるテストとして実行されます。</target>
        </trans-unit>
        <trans-unit id="6e4c73bee7a0bd4da08209dc9fde83d8120d55c3" translate="yes" xml:space="preserve">
          <source>In case some actions should be taken inside one element (a container or modal window or iframe) you can use &lt;code&gt;within&lt;/code&gt; block to narrow the scope. Please take a note that you can't use within inside another within in Playwright helper:</source>
          <target state="translated">1つの要素（コンテナまたはモーダルウィンドウまたはiframe）内でいくつかのアクションを実行する必要がある場合は、ブロック &lt;code&gt;within&lt;/code&gt; 使用してスコープを絞り込むことができます。Playwrightヘルパー内の別の内部では使用できないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="1f0d2fbbefc7e9f6b561ed1aea7bc5c17f5a32f3" translate="yes" xml:space="preserve">
          <source>In case some actions should be taken inside one element (a container or modal window or iframe) you can use &lt;code&gt;within&lt;/code&gt; block to narrow the scope. Please take a note that you can't use within inside another within in Puppeteer helper:</source>
          <target state="translated">1つの要素（コンテナまたはモーダルウィンドウまたはiframe）内でいくつかのアクションを実行する必要がある場合は、ブロック &lt;code&gt;within&lt;/code&gt; 使用してスコープを絞り込むことができます。Puppeteerヘルパー内の別の内部では使用できないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="658d9b818f29e6b0e053e53beef056f8dcabce40" translate="yes" xml:space="preserve">
          <source>In case some actions should be taken inside one element (a container or modal window) you can use &lt;code&gt;within&lt;/code&gt; block to narrow the scope. Please take a note that you can't use within inside another within in Puppeteer helper:</source>
          <target state="translated">1つの要素（コンテナーまたはモーダルウィンドウ）内でいくつかのアクションを実行する必要がある場合は、ブロック &lt;code&gt;within&lt;/code&gt; 使用してスコープを絞り込むことができます。Puppeteerヘルパー内の別の内部では使用できないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="08bb23e95df0f56cfbcb65f14b3a1226b622cf98" translate="yes" xml:space="preserve">
          <source>In case some code should be executed on one platform and ignored on others use &lt;code&gt;runOnAndroid&lt;/code&gt; and &lt;code&gt;runOnIOS&lt;/code&gt; methods:</source>
          <target state="translated">使用する場合には、いくつかのコードは、1つのプラットフォーム上で実行されなければならないと他人に無視 &lt;code&gt;runOnAndroid&lt;/code&gt; と &lt;code&gt;runOnIOS&lt;/code&gt; 方法を：</target>
        </trans-unit>
        <trans-unit id="7427a4af31bcb3fd8bd58cad654ad2e40c5916fe" translate="yes" xml:space="preserve">
          <source>In case you need to execute arbitrary code before or after the tests, you can use &lt;code&gt;bootstrap&lt;/code&gt; and &lt;code&gt;teardown&lt;/code&gt; config. Use it to start and stop webserver, Selenium, etc.</source>
          <target state="translated">テストの前後に任意のコードを実行する必要がある場合は、 &lt;code&gt;bootstrap&lt;/code&gt; および &lt;code&gt;teardown&lt;/code&gt; 使用できます。これを使用して、Webサーバー、Seleniumなどを起動および停止します。</target>
        </trans-unit>
        <trans-unit id="9a4492f07576e454719d620336fd3e91b5cf5525" translate="yes" xml:space="preserve">
          <source>In modern web applications rendering is happen on client side. Sometimes that may cause delays. A test may fail while trying to click an element which has not appeared on a page yet. To handle this cases &lt;code&gt;wait*&lt;/code&gt; methods introduced.</source>
          <target state="translated">最新のWebアプリケーションでは、レンダリングはクライアント側で行われます。遅延が発生する場合があります。まだページに表示されていない要素をクリックしようとすると、テストが失敗する場合があります。このケースを処理するために、 &lt;code&gt;wait*&lt;/code&gt; メソッドが導入されました。</target>
        </trans-unit>
        <trans-unit id="ae9eebd9be0a366c59dea10e9862d83bf88f77e5" translate="yes" xml:space="preserve">
          <source>In modern web applications, rendering is done on the client-side. Sometimes that may cause delays. A test may fail while trying to click an element which has not appeared on a page yet. To handle these cases, the &lt;code&gt;wait*&lt;/code&gt; methods has been introduced.</source>
          <target state="translated">最新のWebアプリケーションでは、レンダリングはクライアント側で行われます。時々それは遅れを引き起こすかもしれません。まだページに表示されていない要素をクリックしようとすると、テストが失敗する場合があります。これらのケースを処理するために、 &lt;code&gt;wait*&lt;/code&gt; メソッドが導入されました。</target>
        </trans-unit>
        <trans-unit id="192f4790d1d1542eed72b176919ed5d9ea10926d" translate="yes" xml:space="preserve">
          <source>In order to verify the expected behavior of a web application, its content should be checked. CodeceptJS provides built-in assertions for that. They start with a &lt;code&gt;see&lt;/code&gt; (or &lt;code&gt;dontSee&lt;/code&gt;) prefix.</source>
          <target state="translated">Webアプリケーションの予想される動作を確認するには、そのコンテンツを確認する必要があります。CodeceptJSは、そのための組み込みアサーションを提供します。それらは &lt;code&gt;see&lt;/code&gt; （または &lt;code&gt;dontSee&lt;/code&gt; ）プレフィックスで始まります。</target>
        </trans-unit>
        <trans-unit id="512065fc7903f237f18d30acdc1a47e85c57a020" translate="yes" xml:space="preserve">
          <source>In order to verify the expected behavior of a web application, web page connects should be checked. CodeceptJS provides built-in assertions for that. They start with &lt;code&gt;see&lt;/code&gt; (or &lt;code&gt;dontSee&lt;/code&gt;) prefix, as they describe user's current vision.</source>
          <target state="translated">Webアプリケーションの予想される動作を確認するには、Webページの接続を確認する必要があります。CodeceptJSはそのための組み込みアサーションを提供します。それらは、ユーザーの現在のビジョンを説明するため、 &lt;code&gt;see&lt;/code&gt; （または &lt;code&gt;dontSee&lt;/code&gt; ）プレフィックスで始まります。</target>
        </trans-unit>
        <trans-unit id="1ff445b252fc37c3fd56f5315e83a45069dd6cdd" translate="yes" xml:space="preserve">
          <source>In previous examples, we've moved actions into &lt;code&gt;createTodo&lt;/code&gt; function. Is there a more elegant way of refactoring? Can we have something like &lt;code&gt;I.createTodo()&lt;/code&gt; to be used in code? Sure, we can do so by editing &lt;code&gt;steps_file.js&lt;/code&gt; created by init command.</source>
          <target state="translated">前の例では、アクションを &lt;code&gt;createTodo&lt;/code&gt; 関数に移動しました。リファクタリングのよりエレガントな方法はありますか？ &lt;code&gt;I.createTodo()&lt;/code&gt; のようなものをコードで使用できますか？確かに、initコマンドで作成した &lt;code&gt;steps_file.js&lt;/code&gt; を編集することで、これを行うことができます。</target>
        </trans-unit>
        <trans-unit id="2aa1d38315290734dbe998f8c505a216490d0d37" translate="yes" xml:space="preserve">
          <source>In record replay mode you can define which routes should be recorded and where to store them:</source>
          <target state="translated">記録再生モードでは、どのルートを記録し、どこに保存するかを定義することができます。</target>
        </trans-unit>
        <trans-unit id="bed0e91f0d22e70b70a91f136a45e80027bb9bf5" translate="yes" xml:space="preserve">
          <source>In record-replay mode start mocking to make HTTP requests recorded/replayed, and stop when you don't need to block requests anymore:</source>
          <target state="translated">記録再生モードでは、HTTP リクエストを記録再生させるためにモッキングを開始し、リクエストをブロックする必要がなくなったら停止します。</target>
        </trans-unit>
        <trans-unit id="3d75391a182c024360d15e33382f4c804ad4fa68" translate="yes" xml:space="preserve">
          <source>In the next example we will &lt;a href=&quot;http://todomvc.com/examples/angularjs/#/&quot;&gt;TodoMVC application (opens new window)&lt;/a&gt;. So let's create a test which will fill in todo list:</source>
          <target state="translated">次の例では、&lt;a href=&quot;http://todomvc.com/examples/angularjs/#/&quot;&gt;TodoMVCアプリケーション（新しいウィンドウを開きます）を使用し&lt;/a&gt;ます。それでは、todoリストに入力するテストを作成しましょう。</target>
        </trans-unit>
        <trans-unit id="b3fe10357cca5d4713631030f365970c48da59b0" translate="yes" xml:space="preserve">
          <source>In the previous examples, we moved actions into the &lt;code&gt;createTodo&lt;/code&gt; function. Is there a more elegant way of refactoring? Can we instead write a function like &lt;code&gt;I.createTodo()&lt;/code&gt; which we can reuse? In fact, we can do so by editing the &lt;code&gt;steps_file.js&lt;/code&gt; file created by the init command.</source>
          <target state="translated">前の例では、アクションを &lt;code&gt;createTodo&lt;/code&gt; 関数に移動しました。よりエレガントなリファクタリングの方法はありますか？代わりに、再利用できる &lt;code&gt;I.createTodo()&lt;/code&gt; のような関数を作成できますか？実際、initコマンドで作成された &lt;code&gt;steps_file.js&lt;/code&gt; ファイルを編集することでこれを行うことができます。</target>
        </trans-unit>
        <trans-unit id="2d8f57450e60b6ff738cfe7567e55f7bbe68f763" translate="yes" xml:space="preserve">
          <source>In the same manner additional services from webdriverio can be installed, enabled, and configured.</source>
          <target state="translated">同様に、webdriverioからの追加サービスをインストール、有効化、設定することができます。</target>
        </trans-unit>
        <trans-unit id="e71dd95024f19ca98df8099236fbb192d7d20fdc" translate="yes" xml:space="preserve">
          <source>In this case &lt;code&gt;config&lt;/code&gt; overrides current config of the first helper. To change config of specific helper pass two arguments: helper name and config values:</source>
          <target state="translated">この場合、 &lt;code&gt;config&lt;/code&gt; は最初のヘルパーの現在の構成をオーバーライドします。特定のヘルパーの設定を変更するには、ヘルパー名と設定値の2つの引数を渡します。</target>
        </trans-unit>
        <trans-unit id="4fab1481b5c8e165052ed8e318ae77effa850584" translate="yes" xml:space="preserve">
          <source>In this case &lt;code&gt;el&lt;/code&gt; will be an instance of &lt;a href=&quot;https://playwright.dev/#version=master&amp;amp;path=docs%2Fapi.md&amp;amp;q=class-elementhandle&quot;&gt;ElementHandle (opens new window)&lt;/a&gt; which is similar for Playwright &amp;amp; &lt;a href=&quot;https://pptr.dev/#?product=Puppeteer&amp;amp;version=master&amp;amp;show=api-class-elementhandle&quot;&gt;Puppeteer (opens new window)&lt;/a&gt;.</source>
          <target state="translated">この場合、 &lt;code&gt;el&lt;/code&gt; は、Playwright＆&lt;a href=&quot;https://pptr.dev/#?product=Puppeteer&amp;amp;version=master&amp;amp;show=api-class-elementhandle&quot;&gt;Puppeteer（新しいウィンドウを開く&lt;/a&gt;&lt;a href=&quot;https://playwright.dev/#version=master&amp;amp;path=docs%2Fapi.md&amp;amp;q=class-elementhandle&quot;&gt;）&lt;/a&gt;と同様のElementHandle（新しいウィンドウを開く）のインスタンスになります。</target>
        </trans-unit>
        <trans-unit id="a686a04fbf2058567a11768a6b8262f701bce4fc" translate="yes" xml:space="preserve">
          <source>In this case an an instance of webdriverio element is used. To get a &lt;a href=&quot;https://webdriver.io/docs/api/&quot;&gt;complete API of an element (opens new window)&lt;/a&gt; refer to webdriverio docs.</source>
          <target state="translated">この場合、webdriverio要素のインスタンスが使用されます。&lt;a href=&quot;https://webdriver.io/docs/api/&quot;&gt;要素の完全なAPI&lt;/a&gt;を取得する（新しいウィンドウを開く）には、webdriverioのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="e1565422c6280196269b7f1f5e97f428dc791298" translate="yes" xml:space="preserve">
          <source>In this case test engineers have two options:</source>
          <target state="translated">この場合、テストエンジニアには2つの選択肢があります。</target>
        </trans-unit>
        <trans-unit id="06c2dadb4c87351dd29d719a8779820613f16bd2" translate="yes" xml:space="preserve">
          <source>In this case we are accessing WebDriver helper. However, you can replace WebDriver with any helper you use.</source>
          <target state="translated">この場合はWebDriverヘルパーにアクセスしています。ただし、WebDriverを任意のヘルパーに置き換えることができます。</target>
        </trans-unit>
        <trans-unit id="e5cb824f23356ffa4dbe19a5208486a127b9ca06" translate="yes" xml:space="preserve">
          <source>In this config config all methods of &lt;code&gt;I&lt;/code&gt; will be taken from &lt;code&gt;WebDriverIO&lt;/code&gt; helper.</source>
          <target state="translated">この設定では、すべてのメソッドconfigコン &lt;code&gt;I&lt;/code&gt; から取得されます &lt;code&gt;WebDriverIO&lt;/code&gt; ヘルパー。</target>
        </trans-unit>
        <trans-unit id="017c73f9593c89298c7455fed697856dca2ae3ac" translate="yes" xml:space="preserve">
          <source>In this example we take the power of Playwright to change geolocation in our tests:</source>
          <target state="translated">この例では、テストでジオロケーションを変更するPlaywrightの力を利用しています。</target>
        </trans-unit>
        <trans-unit id="81542edbc64d01d3f3d729a14ae7294cc7472390" translate="yes" xml:space="preserve">
          <source>In this guide we will use &lt;a href=&quot;https://github.com/GoogleChrome/puppeteer&quot;&gt;Google Chrome &lt;strong&gt;Puppeteer&lt;/strong&gt;&lt;/a&gt; as a driver for browsers. This allows us to start in a minutes with no extra tools installed.</source>
          <target state="translated">このガイドでは、ブラウザーのドライバーとして&lt;a href=&quot;https://github.com/GoogleChrome/puppeteer&quot;&gt;Google Chrome &lt;strong&gt;Puppeteer&lt;/strong&gt;&lt;/a&gt;を使用します。これにより、追加のツールをインストールせずに数分で開始できます。</target>
        </trans-unit>
        <trans-unit id="4e55a35f6766f290f3ff89dd76845e0115007fd5" translate="yes" xml:space="preserve">
          <source>In this way Codecept runner class can be extended.</source>
          <target state="translated">このようにしてCodeceptランナークラスを拡張することができます。</target>
        </trans-unit>
        <trans-unit id="5cf44273af79edce59964b0e71f79c83f2125ea0" translate="yes" xml:space="preserve">
          <source>In this way CodeceptJS is more similar to Cucumber, so if you run a test with &lt;code&gt;--steps&lt;/code&gt; option you will see this output:</source>
          <target state="translated">このように、CodeceptJSはCucumberに似ているため、 &lt;code&gt;--steps&lt;/code&gt; オプションを使用してテストを実行すると、次の出力が表示されます。</target>
        </trans-unit>
        <trans-unit id="94f03934128aed7ad6f444a3fae72d289265e7c6" translate="yes" xml:space="preserve">
          <source>In this way, CodeceptJS is similar to Cucumber. If you run a test with &lt;code&gt;--steps&lt;/code&gt; option you will see this output:</source>
          <target state="translated">このように、CodeceptJSはCucumberに似ています。 &lt;code&gt;--steps&lt;/code&gt; オプションを指定してテストを実行すると、次の出力が表示されます。</target>
        </trans-unit>
        <trans-unit id="19682bdb9185a5fa9d763d414d0443d3a0bc2456" translate="yes" xml:space="preserve">
          <source>Init</source>
          <target state="translated">Init</target>
        </trans-unit>
        <trans-unit id="541f586efc59c7f211d6c0c591f44a63d97c7064" translate="yes" xml:space="preserve">
          <source>Initialize CodeceptJS with &lt;code&gt;init&lt;/code&gt; command:</source>
          <target state="translated">&lt;code&gt;init&lt;/code&gt; コマンドでCodeceptJSを初期化します。</target>
        </trans-unit>
        <trans-unit id="acb2c3ecf85e27fa2148b9c5192d6ffefb423206" translate="yes" xml:space="preserve">
          <source>Initially this functionality was part of corresponding helper but has been moved into plugin since 1.4</source>
          <target state="translated">当初はこの機能は対応するヘルパーの一部でしたが、1.4からプラグインに移されました。</target>
        </trans-unit>
        <trans-unit id="441e9f7e908020df9faffebd6213f281eec92fca" translate="yes" xml:space="preserve">
          <source>Injects Angular module.</source>
          <target state="translated">Angularモジュールを注入します。</target>
        </trans-unit>
        <trans-unit id="f51e269e651062ff352921d0189405afad497e9e" translate="yes" xml:space="preserve">
          <source>Inside &lt;code&gt;event.all.result&lt;/code&gt; you can obtain test results from all workers, so you can customize the report:</source>
          <target state="translated">&lt;code&gt;event.all.result&lt;/code&gt; 内では、すべてのワーカーからテスト結果を取得できるため、レポートをカスタマイズできます。</target>
        </trans-unit>
        <trans-unit id="aef7385cd0573e3c888ccb255e3d4d4b99862b7f" translate="yes" xml:space="preserve">
          <source>Inside &lt;code&gt;stop_server.js&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;stop_server.js&lt;/code&gt; 内：</target>
        </trans-unit>
        <trans-unit id="44d0edb14a7b601779c54c4a45ba990a499d2497" translate="yes" xml:space="preserve">
          <source>Inside JS config file</source>
          <target state="translated">JS設定ファイルの内部</target>
        </trans-unit>
        <trans-unit id="c0dc5c3d66f6fa35efd118a4125ef0ce7534d403" translate="yes" xml:space="preserve">
          <source>Inside a pause mode you can use &lt;code&gt;loginPage&lt;/code&gt;, &lt;code&gt;data&lt;/code&gt;, &lt;code&gt;func&lt;/code&gt; variables. Arbitrary JavaScript code can be executed when used &lt;code&gt;=&amp;gt;&lt;/code&gt; prefix:</source>
          <target state="translated">一時停止モード内では、 &lt;code&gt;loginPage&lt;/code&gt; 、 &lt;code&gt;data&lt;/code&gt; 、 &lt;code&gt;func&lt;/code&gt; 変数を使用できます。任意のJavaScriptコードは、使用時に実行できます &lt;code&gt;=&amp;gt;&lt;/code&gt; プレフィックス：</target>
        </trans-unit>
        <trans-unit id="0a8eb6f02c53d5229db19f4921d87348dccefd70" translate="yes" xml:space="preserve">
          <source>Inside those JS files you can use CodeceptJS API (see below) to access its internals.</source>
          <target state="translated">これらのJSファイルの内部には、CodeceptJS API(下記参照)を使用して内部にアクセスすることができます。</target>
        </trans-unit>
        <trans-unit id="59197420b1396c694c4993d24171d55c15f9b889" translate="yes" xml:space="preserve">
          <source>Install &lt;a href=&quot;https://codecept.io&quot;&gt;CodeceptJS (opens new window)&lt;/a&gt; and detox-helper:</source>
          <target state="translated">&lt;a href=&quot;https://codecept.io&quot;&gt;CodeceptJS（新しいウィンドウを開きます）&lt;/a&gt;とdetox-helperをインストールします。</target>
        </trans-unit>
        <trans-unit id="950f6b92af2e69dd04e6d86ccf1e4745b3b4ee7f" translate="yes" xml:space="preserve">
          <source>Install &lt;a href=&quot;https://github.com/rosiejs/rosie&quot;&gt;Rosie (opens new window)&lt;/a&gt; and &lt;a href=&quot;https://www.npmjs.com/package/faker&quot;&gt;Faker (opens new window)&lt;/a&gt; libraries.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/rosiejs/rosie&quot;&gt;Rosie（新しいウィンドウを開く）&lt;/a&gt;および&lt;a href=&quot;https://www.npmjs.com/package/faker&quot;&gt;Faker（新しいウィンドウを開く）&lt;/a&gt;ライブラリをインストールします。</target>
        </trans-unit>
        <trans-unit id="391e83ce6af8aae019fcc76a5817215d18f15321" translate="yes" xml:space="preserve">
          <source>Install &lt;a href=&quot;https://github.com/rosiejs/rosie&quot;&gt;Rosie&lt;/a&gt; and &lt;a href=&quot;https://www.npmjs.com/package/faker&quot;&gt;Faker&lt;/a&gt; libraries.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/rosiejs/rosie&quot;&gt;Rosie&lt;/a&gt;および&lt;a href=&quot;https://www.npmjs.com/package/faker&quot;&gt;Faker&lt;/a&gt;ライブラリをインストールします。</target>
        </trans-unit>
        <trans-unit id="61c66482b40067692396994f0f2bc60753f84766" translate="yes" xml:space="preserve">
          <source>Install &lt;code&gt;@wdio/sauce-service&lt;/code&gt; package, as &lt;a href=&quot;https://webdriver.io/docs/sauce-service&quot;&gt;described here (opens new window)&lt;/a&gt;. It is important to make sure it is compatible with current webdriverio version.</source>
          <target state="translated">&lt;a href=&quot;https://webdriver.io/docs/sauce-service&quot;&gt;ここで説明さ&lt;/a&gt;れているように、 &lt;code&gt;@wdio/sauce-service&lt;/code&gt; パッケージをインストールします（新しいウィンドウが開きます）。現在のwebdriverioバージョンと互換性があることを確認することが重要です。</target>
        </trans-unit>
        <trans-unit id="197cfb80dd5c8da1082f551bc76091d0787a0e74" translate="yes" xml:space="preserve">
          <source>Install &lt;code&gt;@wdio/selenium-standalone-service&lt;/code&gt; package, as &lt;a href=&quot;https://webdriver.io/docs/selenium-standalone-service&quot;&gt;described here (opens new window)&lt;/a&gt;. It is important to make sure it is compatible with current webdriverio version.</source>
          <target state="translated">&lt;a href=&quot;https://webdriver.io/docs/selenium-standalone-service&quot;&gt;ここで説明さ&lt;/a&gt;れているように、 &lt;code&gt;@wdio/selenium-standalone-service&lt;/code&gt; パッケージをインストールします（新しいウィンドウが開きます）。現在のwebdriverioバージョンと互換性があることを確認することが重要です。</target>
        </trans-unit>
        <trans-unit id="66beb467b2adb7a3fdf8bb9ede3a62c06882f853" translate="yes" xml:space="preserve">
          <source>Install CodeceptJS + Playwright into current directory</source>
          <target state="translated">カレントディレクトリにCodeceptJS+Playwrightをインストールします。</target>
        </trans-unit>
        <trans-unit id="8103dc0defe901105c45e72902ac3b20d9664d17" translate="yes" xml:space="preserve">
          <source>Install CodeceptJS + Puppeteer into current directory</source>
          <target state="translated">カレントディレクトリにCodeceptJS+Puppeteerをインストールします。</target>
        </trans-unit>
        <trans-unit id="04f34ecbd9e0c7c0c2a3852da681a2bef903d7a4" translate="yes" xml:space="preserve">
          <source>Install CodeceptJS + webdriverio into &lt;code&gt;e2e-tests&lt;/code&gt; directory:</source>
          <target state="translated">CodeceptJS + webdriverioを &lt;code&gt;e2e-tests&lt;/code&gt; ディレクトリにインストールします。</target>
        </trans-unit>
        <trans-unit id="bee62411d8e08721951bc3ba399308b6d501ed86" translate="yes" xml:space="preserve">
          <source>Install CodeceptJS + webdriverio into current directory</source>
          <target state="translated">カレントディレクトリにCodeceptJS+webdriverioをインストールします。</target>
        </trans-unit>
        <trans-unit id="46ceae6315e892ad7d2f3b5050905bfdd66a086e" translate="yes" xml:space="preserve">
          <source>Install TypeScipt</source>
          <target state="translated">TypeSciptのインストール</target>
        </trans-unit>
        <trans-unit id="69660255e943f74bfb3354f69e71ec60c504e4b2" translate="yes" xml:space="preserve">
          <source>Install a webdriverio service</source>
          <target state="translated">webdriverioサービスのインストール</target>
        </trans-unit>
        <trans-unit id="007e3ec250bf286e0dd3c9448e3c0775dfe9476f" translate="yes" xml:space="preserve">
          <source>Install an app on device.</source>
          <target state="translated">デバイスにアプリをインストールします。</target>
        </trans-unit>
        <trans-unit id="31cce3c3aac3d7cc2d2a7288962cb8d899b37747" translate="yes" xml:space="preserve">
          <source>Install it and enable to easily switch to headless/window mode, change window size, etc.</source>
          <target state="translated">それをインストールして、簡単にヘッドレス/ウィンドウモードへの切り替え、ウィンドウサイズの変更などが可能になります。</target>
        </trans-unit>
        <trans-unit id="7fb8ae7e5a4f9b643f047667e753ba068d6faa33" translate="yes" xml:space="preserve">
          <source>Install it via NPM (locally or globally, depending on CodeceptJS installation type):</source>
          <target state="translated">NPM経由でインストールします(CodeceptJSのインストールタイプに応じて、ローカルまたはグローバルにインストールします)。</target>
        </trans-unit>
        <trans-unit id="a2990f8d506589999980af98dd04647970eaa8f0" translate="yes" xml:space="preserve">
          <source>Install it via NPM:</source>
          <target state="translated">NPM経由でインストールします。</target>
        </trans-unit>
        <trans-unit id="4d29f8e830a4a8f77d407201c3252e30ca501406" translate="yes" xml:space="preserve">
          <source>Install rosie and faker to create a first factory:</source>
          <target state="translated">ロージーとフェイカーを設置してファーストファクトリーを作る。</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">Installation</target>
        </trans-unit>
        <trans-unit id="e5426e1f97ffa774b6b67d357d9617aeb60ce771" translate="yes" xml:space="preserve">
          <source>Installations</source>
          <target state="translated">Installations</target>
        </trans-unit>
        <trans-unit id="a259cec7e3e5bfc36a635f233ade5946e35642b8" translate="yes" xml:space="preserve">
          <source>Installs a configured application. Application is installed by default.</source>
          <target state="translated">設定したアプリケーションをインストールします。アプリケーションはデフォルトでインストールされます。</target>
        </trans-unit>
        <trans-unit id="12a7fb5da60214d476bfb717ced4e8588fdc4274" translate="yes" xml:space="preserve">
          <source>Instead of writing a full CSS locator like &lt;code&gt;[data-qa-id=user_name]&lt;/code&gt; simplify it to &lt;code&gt;$user_name&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;[data-qa-id=user_name]&lt;/code&gt; のような完全なCSSロケーターを作成する代わりに、 &lt;code&gt;$user_name&lt;/code&gt; 簡略化します。</target>
        </trans-unit>
        <trans-unit id="a7881cac6e64abca5eafd172df6eb31fe0b84c88" translate="yes" xml:space="preserve">
          <source>Integrations</source>
          <target state="translated">Integrations</target>
        </trans-unit>
        <trans-unit id="427ba68970ec18007e5ab1505b7b2b1fecfecca0" translate="yes" xml:space="preserve">
          <source>IntelliSense</source>
          <target state="translated">IntelliSense</target>
        </trans-unit>
        <trans-unit id="387b6b5c1b6ba7fa6163b921553b7ab4bf68bc72" translate="yes" xml:space="preserve">
          <source>Interactions between &lt;code&gt;I.startMocking()&lt;/code&gt; and &lt;code&gt;I.stopMocking()&lt;/code&gt; will be recorded and saved to &lt;code&gt;data/requests&lt;/code&gt; directory.</source>
          <target state="translated">&lt;code&gt;I.startMocking()&lt;/code&gt; と &lt;code&gt;I.stopMocking()&lt;/code&gt; の間の相互作用が記録され、 &lt;code&gt;data/requests&lt;/code&gt; ディレクトリに保存されます。</target>
        </trans-unit>
        <trans-unit id="ee9863dabdf00611ce9612b8d2853c80323b736f" translate="yes" xml:space="preserve">
          <source>Interactive Pause</source>
          <target state="translated">インタラクティブポーズ</target>
        </trans-unit>
        <trans-unit id="c7c64d916e772ba673003002b6f9af5e1f020ff0" translate="yes" xml:space="preserve">
          <source>Interactive shell can be started outside the test context by running</source>
          <target state="translated">インタラクティブシェルは、テストコンテキストの外で</target>
        </trans-unit>
        <trans-unit id="2ac347352efd2ddfa91f2f970280919d826c376f" translate="yes" xml:space="preserve">
          <source>Interactive shell. Allows to try &lt;code&gt;I.&lt;/code&gt; commands in runtime</source>
          <target state="translated">インタラクティブシェル。実行時に &lt;code&gt;I.&lt;/code&gt; コマンドを試すことができます</target>
        </trans-unit>
        <trans-unit id="76d5733b82b9b85e7c7c9538c8b1cbf395dc743e" translate="yes" xml:space="preserve">
          <source>Internet Explorer</source>
          <target state="translated">インターネットエクスプローラ</target>
        </trans-unit>
        <trans-unit id="2473e96bc614a911821242119918a241a41836d6" translate="yes" xml:space="preserve">
          <source>Introduction</source>
          <target state="translated">Introduction</target>
        </trans-unit>
        <trans-unit id="c23029050858e92bc25cbc85e60ce01a4b4802c6" translate="yes" xml:space="preserve">
          <source>Is there a sane alternative to Selenium?</source>
          <target state="translated">Seleniumに代わるまともな選択肢はありますか?</target>
        </trans-unit>
        <trans-unit id="1507aba4558a0ce7512766851a1cb27a4a98d469" translate="yes" xml:space="preserve">
          <source>It can be required from codeceptjs package if it is installed locally.</source>
          <target state="translated">ローカルにインストールされている場合は、codeceptjsパッケージから必要になる場合があります。</target>
        </trans-unit>
        <trans-unit id="c5650850eb11d138e7f3a0d651e8f06ebf38c38a" translate="yes" xml:space="preserve">
          <source>It can be used in tests like:</source>
          <target state="translated">のようなテストで使用することができます。</target>
        </trans-unit>
        <trans-unit id="6b02892636257ce37fa6801e394333e805c7ce3e" translate="yes" xml:space="preserve">
          <source>It is common to think that BDD scenario is equal to test. But it's actually not. Not every test should be described as a feature. Not every test is written to test real business value. For instance, regression tests or negative scenario tests are not bringing any value to business. Business analysts don't care about scenario reproducing bug #13, or what error message is displayed when user tries to enter wrong password on login screen. Writing all the tests inside a feature files creates informational overflow.</source>
          <target state="translated">BDDシナリオはテストに等しいと考えるのが一般的です。しかし、実際はそうではありません。すべてのテストが機能として記述されるべきではない。すべてのテストが、本当のビジネス価値をテストするために書かれているわけではない。例えば、リグレッションテストやネガティブシナリオテストは、ビジネスに何の価値ももたらさない。ビジネスアナリストは、バグ#13を再現するシナリオや、ログイン画面で間違ったパスワードを入力しようとしたときにどのようなエラーメッセージが表示されるかなど、気にしていません。機能ファイルの中にすべてのテストを記述することは、情報のオーバーフローを生み出します。</target>
        </trans-unit>
        <trans-unit id="ee343c68fa212c3e1002755c6573e429733fcd15" translate="yes" xml:space="preserve">
          <source>It is easy to run tests in parallel if you have a lots of tests and free CPU cores. Just execute your tests using &lt;code&gt;run-workers&lt;/code&gt; command specifying the number of workers to spawn:</source>
          <target state="translated">多くのテストと空きCPUコアがある場合、テストを並行して実行するのは簡単です。スポーンするワーカーの数を指定する &lt;code&gt;run-workers&lt;/code&gt; コマンドを使用してテストを実行するだけです。</target>
        </trans-unit>
        <trans-unit id="7dc9f4306f7e13798b04e168363dba1125ca4e4a" translate="yes" xml:space="preserve">
          <source>It is important to make sure it is compatible with current webdriverio version.</source>
          <target state="translated">現在のwebdriverioのバージョンと互換性があることを確認することが重要です。</target>
        </trans-unit>
        <trans-unit id="7499400148ab62addc107aa04a4f96a5d2f775e5" translate="yes" xml:space="preserve">
          <source>It is important to understand that Nightmare executes JavaScript on client and on server side. If you need to find an element you should search for it using client side script, but if you want to do an assertion you should return a data to server side.</source>
          <target state="translated">Nightmareはクライアント側とサーバー側でJavaScriptを実行していることを理解しておきましょう。要素を探したい場合はクライアント側のスクリプトを使って検索しますが、アサーションをしたい場合はサーバ側にデータを返す必要があります。</target>
        </trans-unit>
        <trans-unit id="dc73e4d8abd08a168be76b3bece7ad0fe582400c" translate="yes" xml:space="preserve">
          <source>It is modern Electron based testing framework which allows to execute tests in headless mode as well as in window mode for debug purposes. This makes Nightmare very useful, much more handy than PhantomJS. Nightmare is in active development and has nice API for writing acceptance tests. Unfortunately, as all other JavaScript testing frameworks it has its own very custom API. What if you choose it for a project and suddenly you realize that you need something more powerful, like Selenium? Yes, that might be a problem if you are not using CodeceptJS. The one idea behind CodeceptJS is to unify different testing backends under one API, so you could easily write tests the same way no matter what engines you use: webdriverio, Protractor, or Nightmare.</source>
          <target state="translated">Nightmareは最新のElectronベースのテストフレームワークで、デバッグのためのウィンドウモードだけでなく、ヘッドレスモードでもテストを実行することができます。これにより、Nightmareは非常に便利で、PhantomJSよりもはるかに便利です。Nightmareは現在開発中で、受け入れテストを記述するための素晴らしいAPIを持っています。残念ながら、他のすべてのJavaScriptテストフレームワークと同様に、独自の非常にカスタムなAPIを持っています。もしあなたがプロジェクトのためにそれを選択して、突然、Seleniumのようなもっと強力なものが必要だと気づいたらどうでしょうか?CodeceptJSを使用していない場合、それは問題になるかもしれません。CodeceptJSの背後にある1つのアイデアは、異なるテストバックエンドを1つのAPIの下で統一することです。</target>
        </trans-unit>
        <trans-unit id="d0f0c0bc8bd79f73a8b18002b1fc49af08885e60" translate="yes" xml:space="preserve">
          <source>It is often happen that mobile applications behave similarly on different platforms. Can we build one test for them? Yes! CodeceptJS provides a way to specify different locators for Android and iOS platforms:</source>
          <target state="translated">モバイルアプリケーションが異なるプラットフォームで似たような挙動をすることはよくあります。それらのために1つのテストを構築することはできますか? はい、できます。CodeceptJSではAndroidとiOSで異なるロケータを指定する方法を提供しています。</target>
        </trans-unit>
        <trans-unit id="c4fb1cccf96f1df640995303852436da954c6b49" translate="yes" xml:space="preserve">
          <source>It is possible to execute global conditional retries to handle unforseen errors. Lost connections and network issues are good candidates to be retried whenever they appear.</source>
          <target state="translated">予期せぬエラーを処理するために、グローバルな条件付きリトライを実行することができます。接続の喪失やネットワークの問題が発生した場合はいつでも再試行することができます。</target>
        </trans-unit>
        <trans-unit id="a0f0744acb953e9c1bc76d619168e740cf413aa5" translate="yes" xml:space="preserve">
          <source>It is possible to wait for elements pragmatically. If a test uses element which is not on a page yet, CodeceptJS will wait for few extra seconds before failing. This feature is based on &lt;a href=&quot;http://www.seleniumhq.org/docs/04_webdriver_advanced.jsp#implicit-waits&quot;&gt;Implicit Wait (opens new window)&lt;/a&gt; of Selenium. CodeceptJS enables implicit wait only when searching for a specific element and disables in all other cases. Thus, the performance of a test is not affected.</source>
          <target state="translated">実用的に要素を待つことが可能です。テストがまだページ上にない要素を使用する場合、CodeceptJSは失敗する前にさらに数秒待機します。この機能は、Seleniumの&lt;a href=&quot;http://www.seleniumhq.org/docs/04_webdriver_advanced.jsp#implicit-waits&quot;&gt;Implicit Wait（新しいウィンドウを開きます）&lt;/a&gt;に基づいています。CodeceptJSは、特定の要素を検索する場合にのみ暗黙的な待機を有効にし、それ以外の場合は無効にします。したがって、テストのパフォーマンスは影響を受けません。</target>
        </trans-unit>
        <trans-unit id="452ed2e046c1ecac42b31c22373a8c238a5358d8" translate="yes" xml:space="preserve">
          <source>It is possible to wait for elements pragmatically. If a test uses element which is not on a page yet, CodeceptJS will wait for few extra seconds before failing. This feature is based on &lt;a href=&quot;http://www.seleniumhq.org/docs/04_webdriver_advanced.jsp#implicit-waits&quot;&gt;Implicit Wait&lt;/a&gt; of Selenium. CodeceptJS enables implicit wait only when searching for a specific element and disables in all other cases. Thus, the performance of a test is not affected.</source>
          <target state="translated">要素を実際的に待つことは可能です。テストがまだページ上にない要素を使用する場合、CodeceptJSは失敗するまでに数秒待機します。この機能は、Seleniumの&lt;a href=&quot;http://www.seleniumhq.org/docs/04_webdriver_advanced.jsp#implicit-waits&quot;&gt;Implicit Wait&lt;/a&gt;に基づいています。CodeceptJSは、特定の要素を検索する場合にのみ暗黙的な待機を有効にし、それ以外の場合は無効にします。したがって、テストのパフォーマンスは影響を受けません。</target>
        </trans-unit>
        <trans-unit id="7e0c3410dd36f828503605a6490a03519bae768f" translate="yes" xml:space="preserve">
          <source>It is recommended to &lt;a href=&quot;https://codecept.io/advanced/#tags&quot;&gt;filter tests by tags&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://codecept.io/advanced/#tags&quot;&gt;タグでテスト&lt;/a&gt;をフィルタリングすることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="87bcd5d106c48abc021393d2054927158f7994fe" translate="yes" xml:space="preserve">
          <source>It is recommended to avoid &lt;code&gt;console.log&lt;/code&gt; and use output.* methods for printing.</source>
          <target state="translated">印刷には &lt;code&gt;console.log&lt;/code&gt; を避け、output。*メソッドを使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="3b8e81c98c93f8b0bf82938280907e78cd98c8cc" translate="yes" xml:space="preserve">
          <source>It is recommended to avoid using implicit CSS locators in methods like &lt;code&gt;fillField&lt;/code&gt; or &lt;code&gt;click&lt;/code&gt;, where semantic locators are allowed. Use locator type to speed up search by various locator strategies.</source>
          <target state="translated">セマンティックロケーターが許可されている &lt;code&gt;fillField&lt;/code&gt; や &lt;code&gt;click&lt;/code&gt; などのメソッドで暗黙的なCSSロケーターを使用することは避けることをお勧めします。ロケータータイプを使用して、さまざまなロケーター戦略による検索を高速化します。</target>
        </trans-unit>
        <trans-unit id="655742c732a4caa4a9d719f7b35fc7ada3562c68" translate="yes" xml:space="preserve">
          <source>It is recommended to use &lt;code&gt;@codeceptjs/configure&lt;/code&gt; package to easily toggle headless mode for WebDriver:</source>
          <target state="translated">&lt;code&gt;@codeceptjs/configure&lt;/code&gt; パッケージを使用して、WebDriverのヘッドレスモードを簡単に切り替えることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="289c70dc454df045ce2c0089e09bd4c1eb1a010f" translate="yes" xml:space="preserve">
          <source>It is recommended to use a relative URL and keep the base URL in the config file, so you can easily switch between development, stage, and production environments.</source>
          <target state="translated">相対URLを使用し、設定ファイルにベースURLを残しておくと、開発環境、ステージ環境、本番環境を簡単に切り替えることができるのでおすすめです。</target>
        </trans-unit>
        <trans-unit id="c52a609a6d29ab0adf870986bba37d3ffe4afe3d" translate="yes" xml:space="preserve">
          <source>It is recommended to use specific versions of browsers in &lt;code&gt;browsers.json&lt;/code&gt; instead of latest. This will prevent tests fail when browsers will be updated.</source>
          <target state="translated">中のブラウザの特定のバージョンを使用することをお勧めします &lt;code&gt;browsers.json&lt;/code&gt; 代わりに、最新の。これにより、ブラウザが更新されるときにテストが失敗するのを防ぐことができます。</target>
        </trans-unit>
        <trans-unit id="b61bc8c3751e93b857c201974445ce18826ff7d5" translate="yes" xml:space="preserve">
          <source>It is required to set GraphQL &lt;code&gt;endpoint&lt;/code&gt; which is the URL to which all the queries go to. Factory file is expected to be passed via &lt;code&gt;factory&lt;/code&gt; option.</source>
          <target state="translated">すべてのクエリの送信先となるURLであるGraphQL &lt;code&gt;endpoint&lt;/code&gt; を設定する必要があります。ファクトリファイルは、 &lt;code&gt;factory&lt;/code&gt; オプションを介して渡されることが期待されています。</target>
        </trans-unit>
        <trans-unit id="38a00e84b6e7abd43214493c50b9fd7e6ca7bced" translate="yes" xml:space="preserve">
          <source>It is required to set REST API &lt;code&gt;endpoint&lt;/code&gt; which is the baseURL for all API requests. Factory file is expected to be passed via &lt;code&gt;factory&lt;/code&gt; option.</source>
          <target state="translated">すべてのAPIリクエストのbaseURLであるRESTAPI &lt;code&gt;endpoint&lt;/code&gt; を設定する必要があります。ファクトリファイルは、 &lt;code&gt;factory&lt;/code&gt; オプションを介して渡されることが期待されています。</target>
        </trans-unit>
        <trans-unit id="0991288d3b9d14661979a56ba5f8238201fb75b6" translate="yes" xml:space="preserve">
          <source>It is required to set REST API &lt;code&gt;endpoint&lt;/code&gt; which is the baseUrl for all API requests. Factory file is expected to be passed via &lt;code&gt;factory&lt;/code&gt; option.</source>
          <target state="translated">すべてのAPIリクエストのbaseUrlであるREST API &lt;code&gt;endpoint&lt;/code&gt; を設定する必要があります。ファクトリファイルは、 &lt;code&gt;factory&lt;/code&gt; オプションを介して渡されることが期待されています。</target>
        </trans-unit>
        <trans-unit id="9cf78424fa89a4d02720674816aea3fd29d5c947" translate="yes" xml:space="preserve">
          <source>It will add &lt;code&gt;gherkin&lt;/code&gt; section to the current config. It will also prepare directories for features and step definition. And it will create the first feature file for you.</source>
          <target state="translated">現在の設定に &lt;code&gt;gherkin&lt;/code&gt; セクションを追加します。また、機能とステップ定義のディレクトリを準備します。そして、それはあなたのために最初の機能ファイルを作成します。</target>
        </trans-unit>
        <trans-unit id="55564481c1c5407f6628c1c8d15b9f08b148bccb" translate="yes" xml:space="preserve">
          <source>It will locate first available webview, switch to it, and switch back to native application after. Inside WebView all browser features are enabled: CSS locators, JavaScript, etc.</source>
          <target state="translated">最初に利用可能なWebViewを見つけ、それに切り替え、その後ネイティブアプリケーションに戻ります。WebView内部では、すべてのブラウザ機能が有効になっています。CSS ロケータ、JavaScript など。</target>
        </trans-unit>
        <trans-unit id="97486e1f3536adff73bb91106960bff1476089e4" translate="yes" xml:space="preserve">
          <source>It's easy to start writing a test if you use &lt;a href=&quot;https://codecept.io/basics#debug&quot;&gt;interactive pause&lt;/a&gt;. Just open a web page and pause execution.</source>
          <target state="translated">&lt;a href=&quot;https://codecept.io/basics#debug&quot;&gt;インタラクティブな一時停止&lt;/a&gt;を使用すると、テストの作成を簡単に開始できます。Webページを開いて、実行を一時停止するだけです。</target>
        </trans-unit>
        <trans-unit id="ad930aae29815e48e4403961afb078378775272c" translate="yes" xml:space="preserve">
          <source>It's important to specify a package name under &lt;code&gt;require&lt;/code&gt; section and current detox configuration taken from &lt;code&gt;package.json&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;require&lt;/code&gt; セクションでパッケージ名を指定し、 &lt;code&gt;package.json&lt;/code&gt; から取得した現在のデトックス構成を指定することが重要です。</target>
        </trans-unit>
        <trans-unit id="bc216df2631773bd448e3abb9d556513c546e4ce" translate="yes" xml:space="preserve">
          <source>It's quite common that clickable elements are not actual &lt;code&gt;a&lt;/code&gt; or &lt;code&gt;button&lt;/code&gt; elements. This way &lt;code&gt;I.click('Click Me!');&lt;/code&gt; won't work, as well as &lt;code&gt;fillField('name', 'value)&lt;/code&gt;. Finding a correct locator for such cases turns to be almost impossible.</source>
          <target state="translated">クリック可能な要素が実際の &lt;code&gt;a&lt;/code&gt; または &lt;code&gt;button&lt;/code&gt; 要素ではないことはよくあることです。このように &lt;code&gt;I.click('Click Me!');&lt;/code&gt; &lt;code&gt;fillField('name', 'value)&lt;/code&gt; と同様に、機能しません。このような場合に適切なロケーターを見つけることはほとんど不可能になります。</target>
        </trans-unit>
        <trans-unit id="f96f0696a3f694e0069b494ba2fc984f2223855f" translate="yes" xml:space="preserve">
          <source>It's readable and simple and working using Playwright API!</source>
          <target state="translated">Playwright APIを使用して、読みやすくシンプルに動作しています</target>
        </trans-unit>
        <trans-unit id="8549072ce48702e536256da88406bfb515d98ee0" translate="yes" xml:space="preserve">
          <source>It's readable and simple and works using Puppeteer API!</source>
          <target state="translated">読みやすくシンプルで、PuppeteerのAPIを使って動作します。</target>
        </trans-unit>
        <trans-unit id="485b57adcc80650a0f376fe516e0ea35fef68007" translate="yes" xml:space="preserve">
          <source>Italian</source>
          <target state="translated">Italian</target>
        </trans-unit>
        <trans-unit id="2aa75e764723325dfde398ae15df6e3521cd2249" translate="yes" xml:space="preserve">
          <source>JS file executed as is (synchronously).</source>
          <target state="translated">JSファイルがそのまま(同期して)実行されます。</target>
        </trans-unit>
        <trans-unit id="6fd64ad3edc4a3636360a9cc2093ea76a8756af7" translate="yes" xml:space="preserve">
          <source>JS file exporting an object with &lt;code&gt;bootstrap&lt;/code&gt; and &lt;code&gt;teardown&lt;/code&gt; methods.</source>
          <target state="translated">&lt;code&gt;bootstrap&lt;/code&gt; および &lt;code&gt;teardown&lt;/code&gt; メソッドを使用してオブジェクトをエクスポートするJSファイル。</target>
        </trans-unit>
        <trans-unit id="f8a0fa2d9c5834455f3aa640e653939803606b0b" translate="yes" xml:space="preserve">
          <source>JS file exporting function with optional callback for async execution.</source>
          <target state="translated">非同期実行のためのオプションのコールバックを持つJSファイルエクスポート関数。</target>
        </trans-unit>
        <trans-unit id="322fc54b342e4cced0eb0ff6bddb04e610200b6e" translate="yes" xml:space="preserve">
          <source>JSON Wire - an older version of such protocol</source>
          <target state="translated">JSON Wire-このようなプロトコルの古いバージョン</target>
        </trans-unit>
        <trans-unit id="9239c22d1d1c990ca8c206cb408b345a3ec8114c" translate="yes" xml:space="preserve">
          <source>Japanese</source>
          <target state="translated">Japanese</target>
        </trans-unit>
        <trans-unit id="46497f7cf09e80137c1407e9f11384336e4b30de" translate="yes" xml:space="preserve">
          <source>Just as you can specify android, and ios-specific locators, you can do so for web:</source>
          <target state="translated">アンドロイド、ios固有のロケータを指定できるのと同じように、Webでも指定できます。</target>
        </trans-unit>
        <trans-unit id="ec4e4a61535561e82c6d096ccba18432c471340c" translate="yes" xml:space="preserve">
          <source>Just define how many items of any kind you need and ApiDataFactory will create them for you. However, to make this work some preparations required.</source>
          <target state="translated">必要な項目の数を定義するだけで、ApiDataFactoryが作成してくれます。ただし、この作業を行うためにはいくつかの準備が必要です。</target>
        </trans-unit>
        <trans-unit id="c4c8830693708ca0013bac57238ed3d2144cd8ae" translate="yes" xml:space="preserve">
          <source>Just define how many items of any kind you need and the data factory helper will create them for you.</source>
          <target state="translated">必要なアイテムの数を定義するだけで、データファクトリヘルパーが作成してくれます。</target>
        </trans-unit>
        <trans-unit id="480e1adf6455c6ad0d706a8068b19a4856ce4e44" translate="yes" xml:space="preserve">
          <source>Keep tests readable which will make them maintainable.</source>
          <target state="translated">テストをメンテナンス可能なものにするために、テストを読みやすくしておく。</target>
        </trans-unit>
        <trans-unit id="61a8ffdcbb31609d9a5a9bd24c5b8f563f9ff21c" translate="yes" xml:space="preserve">
          <source>Launch Allure server and see the report like on a screenshot above:</source>
          <target state="translated">Allureサーバーを起動して、上のスクリーンショットのようなレポートが表示されます。</target>
        </trans-unit>
        <trans-unit id="e38012f2c9853d683d73a64317e5ebb239475095" translate="yes" xml:space="preserve">
          <source>Launch Selenium with Chrome browser inside a Docker container:</source>
          <target state="translated">Dockerコンテナ内のChromeブラウザでSeleniumを起動します。</target>
        </trans-unit>
        <trans-unit id="7d005bd930a47ebf79bb55c8e7bb08d3cd79d063" translate="yes" xml:space="preserve">
          <source>Launch the daemon: &lt;code&gt;appium&lt;/code&gt;</source>
          <target state="translated">デーモンを起動します： &lt;code&gt;appium&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="311652c7344ff1bed03ab0fafd4b2ef4aefad9ce" translate="yes" xml:space="preserve">
          <source>Launches an application. If application instance already exists, use &lt;a href=&quot;#relaunchApp&quot;&gt;relaunchApp&lt;/a&gt;.</source>
          <target state="translated">アプリケーションを起動します。アプリケーションインスタンスがすでに存在する場合は、&lt;a href=&quot;#relaunchApp&quot;&gt;relaunchAppを&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="d03a3341942dd45f7c50133b73f3513f016630a0" translate="yes" xml:space="preserve">
          <source>Learn CodeceptJS basics</source>
          <target state="translated">CodeceptJSの基本を学ぶ</target>
        </trans-unit>
        <trans-unit id="a0dee74c4714842c93b803e5d1c3aa00140efee6" translate="yes" xml:space="preserve">
          <source>Learn how to write CodeceptJS tests with Puppeteer</source>
          <target state="translated">Puppeteerを使ったCodeceptJSテストの書き方を学びます。</target>
        </trans-unit>
        <trans-unit id="c033d5370feb09e5c5565fe634bbf43f05a3303d" translate="yes" xml:space="preserve">
          <source>Learn more about &lt;a href=&quot;https://codecept.io/helpers/&quot;&gt;Helpers&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://codecept.io/helpers/&quot;&gt;ヘルパーの&lt;/a&gt;詳細をご覧ください。</target>
        </trans-unit>
        <trans-unit id="55dee9c7824db5e51dee53a4208fc6efb14990e2" translate="yes" xml:space="preserve">
          <source>Let's clarify the terms:</source>
          <target state="translated">用語を明確にしましょう。</target>
        </trans-unit>
        <trans-unit id="96b09004f9adc15d14e58b39f7ad4189734a4fa7" translate="yes" xml:space="preserve">
          <source>Let's execute the test above within WebDriverIO using headless Firefox + Selenium Server packed in Docker container.</source>
          <target state="translated">Dockerコンテナに詰めたヘッドレスFirefox+Selenium Serverを使って、WebDriverIO内で上記のテストを実行してみましょう。</target>
        </trans-unit>
        <trans-unit id="d6fc7f03be0b277f8bfc5e45a3d0743dfe21ec72" translate="yes" xml:space="preserve">
          <source>Let's improve our BDD suite by using the advanced features of Gherkin language.</source>
          <target state="translated">Gherkin言語の高度な機能を利用して、BDDスイートを改善してみましょう。</target>
        </trans-unit>
        <trans-unit id="04bfcde921c04dae9b39dad630e28411daef8d0b" translate="yes" xml:space="preserve">
          <source>Let's learn some more about Gherkin format and then we will see how to execute it with CodeceptJS. We can enable Gherkin for current project by running &lt;code&gt;gherkin:init&lt;/code&gt; command on &lt;strong&gt;already initialized project&lt;/strong&gt;:</source>
          <target state="translated">Gherkinフォーマットについてさらに学びましょう。それから、CodeceptJSでそれを実行する方法を見ていきます。&lt;strong&gt;既に初期化されているプロジェクトで&lt;/strong&gt; &lt;code&gt;gherkin:init&lt;/code&gt; コマンドを実行することにより、現在のプロジェクトでGherkinを有効にすることができ&lt;strong&gt;ます&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="3084082d252819023489b17defd0f922f14da23b" translate="yes" xml:space="preserve">
          <source>Let's prepare our test for multiple scenarios. All test scenarios will need to open main page of application, so &lt;code&gt;amOnPage&lt;/code&gt; can be moved into the &lt;code&gt;Before&lt;/code&gt; hook: Scenarios will probably deal with created todo items, so we can move logic of crating new todo into a function.</source>
          <target state="translated">複数のシナリオのテストを準備しましょう。すべてのテストシナリオでアプリケーションのメインページを開く必要があるため、 &lt;code&gt;amOnPage&lt;/code&gt; を &lt;code&gt;Before&lt;/code&gt; フックに移動できます。シナリオはおそらく作成されたToDoアイテムを処理するため、新しいToDoを作成するロジックを関数に移動できます。</target>
        </trans-unit>
        <trans-unit id="7ea40c43ac46768bed4247267c52600d1493e600" translate="yes" xml:space="preserve">
          <source>Let's prepare our test to contain multiple scenarios. All of our test scenarios will need to to start with with the main page of application open, so &lt;code&gt;amOnPage&lt;/code&gt; can be moved into the &lt;code&gt;Before&lt;/code&gt; hook: Our scenarios will also probably deal with created todo items, so we can move the logic of creating a new todo into a function.</source>
          <target state="translated">複数のシナリオを含むようにテストを準備しましょう。すべてのテストシナリオは、アプリケーションのメインページを開いた状態で開始する必要があるため、 &lt;code&gt;amOnPage&lt;/code&gt; を &lt;code&gt;Before&lt;/code&gt; フックに移動できます。シナリオでは、作成されたToDoアイテムも処理されるため、新しい作成のロジックを移動できます。関数にtodo。</target>
        </trans-unit>
        <trans-unit id="6d5c3125a09a284275429fc49cb7d54850da3f33" translate="yes" xml:space="preserve">
          <source>Let's say we need to populate database for a group of tests.</source>
          <target state="translated">テストのグループのためにデータベースを作成する必要があるとしましょう。</target>
        </trans-unit>
        <trans-unit id="960501b1d7981f7f72293641a252d9d193ddab58" translate="yes" xml:space="preserve">
          <source>Let's say you want to test login for different user accounts. In this case, you need to create a datatable and fill it in with credentials. Then use &lt;code&gt;Data().Scenario&lt;/code&gt; to include this data and generate multiple scenarios:</source>
          <target state="translated">さまざまなユーザーアカウントのログインをテストするとします。この場合、データテーブルを作成し、認証情報を入力する必要があります。次に、 &lt;code&gt;Data().Scenario&lt;/code&gt; を使用してこのデータを含め、複数のシナリオを生成します。</target>
        </trans-unit>
        <trans-unit id="9681e94777fa060f8b9b5cf5b1568ddb9ce9ad39" translate="yes" xml:space="preserve">
          <source>Let's see how we can use &lt;a href=&quot;https://github.com/GoogleChrome/puppeteer/blob/master/docs/api.md#pageemulateoptions&quot;&gt;emulate (opens new window)&lt;/a&gt; function to emulate iPhone browser in a test.</source>
          <target state="translated">テストでiPhoneブラウザをエミュレートするために&lt;a href=&quot;https://github.com/GoogleChrome/puppeteer/blob/master/docs/api.md#pageemulateoptions&quot;&gt;エミュレート（新しいウィンドウを開く）&lt;/a&gt;関数を使用する方法を見てみましょう。</target>
        </trans-unit>
        <trans-unit id="464effdbad81227422d048023d28c64f2331268e" translate="yes" xml:space="preserve">
          <source>Let's submit this sample form for a test:</source>
          <target state="translated">このサンプルフォームをテストに提出してみましょう。</target>
        </trans-unit>
        <trans-unit id="cfbeece8f02da3aa45c0a581b0b33b4f7c2035e4" translate="yes" xml:space="preserve">
          <source>Level of Detail</source>
          <target state="translated">詳細のレベル</target>
        </trans-unit>
        <trans-unit id="58fd3b1b83cc7fc933d72fe934bdb6e534441281" translate="yes" xml:space="preserve">
          <source>Licensed under the MIT License.</source>
          <target state="translated">MITライセンスに基づいてライセンスされています。</target>
        </trans-unit>
        <trans-unit id="4ba14e12ba4fd1c58349ed160fe3f97b4909e3eb" translate="yes" xml:space="preserve">
          <source>Like in Mocha you can use &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;only&lt;/code&gt; to skip tests or making a single test to run.</source>
          <target state="translated">モカのように、あなたは使うことができ &lt;code&gt;x&lt;/code&gt; し、 &lt;code&gt;only&lt;/code&gt; テストをスキップしたり、実行するための単一のテストを行うために。</target>
        </trans-unit>
        <trans-unit id="c47c8a1ff832f9f0922b83ccd9e5b263dfd17bc2" translate="yes" xml:space="preserve">
          <source>Like in Mocha you can use &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;only&lt;/code&gt; to skip tests or to run a single test.</source>
          <target state="translated">Mochaと同様に、 &lt;code&gt;x&lt;/code&gt; を使用して、テストをスキップするか、単一のテストを実行すること &lt;code&gt;only&lt;/code&gt; できません。</target>
        </trans-unit>
        <trans-unit id="720928e3ef69685c9c203028b449c7e8e91bc032" translate="yes" xml:space="preserve">
          <source>Like you may have noticed, CodeceptJS doesn't use &lt;code&gt;by.*&lt;/code&gt; locators similar to Protractor or Selenium Webdriver. Instead most of methods expect you to pass valid CSS or XPath. In case you don't want CodeceptJS to guess the type of locator, you can specify them using so-called strict locators. This is an absolute analogy of &lt;code&gt;by&lt;/code&gt;, so you can use angular specific locators (like models, repeaters, bindings, etc) in it:</source>
          <target state="translated">お気づきかもしれませんが、CodeceptJSはProtractorまたはSelenium Webdriverのような &lt;code&gt;by.*&lt;/code&gt; ロケーターを使用しません。代わりに、ほとんどのメソッドは、有効なCSSまたはXPathを渡すことを期待しています。CodeceptJSにロケーターのタイプを推測させたくない場合は、いわゆる厳密ロケーターを使用してロケーターを指定できます。これは &lt;code&gt;by&lt;/code&gt; の絶対的な類似物です。そのため、角度固有のロケーター（モデル、リピーター、バインディングなど）を使用できます。</target>
        </trans-unit>
        <trans-unit id="39e01aa357475618bb9ef4ff93edffc8a5f70edf" translate="yes" xml:space="preserve">
          <source>Linking Containers</source>
          <target state="translated">コンテナのリンク</target>
        </trans-unit>
        <trans-unit id="5998bbf8f6ecfb6cac315c8921a4e26da7e3bda3" translate="yes" xml:space="preserve">
          <source>Links:</source>
          <target state="translated">Links:</target>
        </trans-unit>
        <trans-unit id="ac8f82335671071c5371f3f6c08baf58bde0d8b7" translate="yes" xml:space="preserve">
          <source>List Commands</source>
          <target state="translated">リストコマンド</target>
        </trans-unit>
        <trans-unit id="aac1c9394cc15b83d529d4831acfd8e2e30a9328" translate="yes" xml:space="preserve">
          <source>Load config and run tests from &lt;code&gt;test&lt;/code&gt; dir</source>
          <target state="translated">&lt;code&gt;test&lt;/code&gt; ディレクトリから構成をロードしてテストを実行する</target>
        </trans-unit>
        <trans-unit id="dc99d54d9990e3c134420be3918e88f28531e630" translate="yes" xml:space="preserve">
          <source>Local</source>
          <target state="translated">Local</target>
        </trans-unit>
        <trans-unit id="90ca4018dc479a6393b88b64053da8975208e1db" translate="yes" xml:space="preserve">
          <source>Local Environment Information</source>
          <target state="translated">地域環境情報</target>
        </trans-unit>
        <trans-unit id="e93141d83b8039749e1ed013e1831599e1264246" translate="yes" xml:space="preserve">
          <source>Locally</source>
          <target state="translated">Locally</target>
        </trans-unit>
        <trans-unit id="c6dae4952dbdefc8d1d99c838c107bd02f0f3701" translate="yes" xml:space="preserve">
          <source>Locate Element within the Shadow Dom</source>
          <target state="translated">影のドムの中でエレメントを探す</target>
        </trans-unit>
        <trans-unit id="1bf5fff85d5c97b65fb855f40872bfce7a820280" translate="yes" xml:space="preserve">
          <source>Locate elements by different locator types, including strict locator. Should be used in custom helpers.</source>
          <target state="translated">厳密なロケータを含む、さまざまなロケータタイプで要素を検索します。カスタムヘルパーで使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="59b5717b200361a58da43745dfa456c8e29bdb5a" translate="yes" xml:space="preserve">
          <source>Locating Element</source>
          <target state="translated">要素の配置</target>
        </trans-unit>
        <trans-unit id="62665d7c3d6cf04792e337332587e03f16094f05" translate="yes" xml:space="preserve">
          <source>Locating Elements</source>
          <target state="translated">要素の配置</target>
        </trans-unit>
        <trans-unit id="00d38aa625673140780b2f90bbc4b8a8d75a6f8a" translate="yes" xml:space="preserve">
          <source>Locator Builder</source>
          <target state="translated">ロケータービルダー</target>
        </trans-unit>
        <trans-unit id="d19e7e05760860ccf59deeaad68e42851c355970" translate="yes" xml:space="preserve">
          <source>Locator builder accepts both XPath and CSS as parameters but converts them to XPath as more feature-rich format. Sometimes provided locators can get very long so it's recommended to simplify the output by providing a brief description for generated XPath:</source>
          <target state="translated">ロケータビルダは XPath と CSS の両方をパラメータとして受け入れますが、より機能豊富なフォーマットとして XPath に変換します。提供されるロケータが非常に長くなることがあるので、生成されたXPathの簡単な説明を提供することで出力を簡素化することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="52bf20e31c1011d6c474f86447e769778d5207a0" translate="yes" xml:space="preserve">
          <source>Locators</source>
          <target state="translated">Locators</target>
        </trans-unit>
        <trans-unit id="9c8897915f61b909903802bef6d092bfd61b6e80" translate="yes" xml:space="preserve">
          <source>Logs user in for the first test and reuses session for next tests. Works by saving cookies into memory or file. If a session expires automatically logs in again.</source>
          <target state="translated">最初のテストでユーザーをログインさせ、次のテストでセッションを再利用します。クッキーをメモリやファイルに保存することで動作します。セッションの有効期限が切れた場合、自動的に再度ログインします。</target>
        </trans-unit>
        <trans-unit id="53175b2a8d1b033f3db0420d2b1a8986898a95fc" translate="yes" xml:space="preserve">
          <source>Long Strings</source>
          <target state="translated">ロングストリングス</target>
        </trans-unit>
        <trans-unit id="22d3d99dd5ff5e1027c5ab6b1f8f7b76eed8fa2e" translate="yes" xml:space="preserve">
          <source>Make sure &lt;code&gt;Playwright&lt;/code&gt; helper is enabled in &lt;code&gt;codecept.conf.js&lt;/code&gt; config:</source>
          <target state="translated">&lt;code&gt;codecept.conf.js&lt;/code&gt; 構成で &lt;code&gt;Playwright&lt;/code&gt; ヘルパーが有効になっていることを確認します。</target>
        </trans-unit>
        <trans-unit id="85be6c4cb360a7f554afbef9c4ae62b55f74a3d8" translate="yes" xml:space="preserve">
          <source>Make sure &lt;code&gt;Puppeteer&lt;/code&gt; helper is enabled in &lt;code&gt;codecept.conf.js&lt;/code&gt; config:</source>
          <target state="translated">&lt;code&gt;codecept.conf.js&lt;/code&gt; 構成で &lt;code&gt;Puppeteer&lt;/code&gt; ヘルパーが有効になっていることを確認します。</target>
        </trans-unit>
        <trans-unit id="44ab9f620fa5507c6206e3903c432744306f43f8" translate="yes" xml:space="preserve">
          <source>Make sure &lt;code&gt;Puppeteer&lt;/code&gt; helper is enabled in &lt;code&gt;codecept.json&lt;/code&gt; config:</source>
          <target state="translated">&lt;code&gt;codecept.json&lt;/code&gt; 設定で &lt;code&gt;Puppeteer&lt;/code&gt; ヘルパーが有効になっていることを確認します。</target>
        </trans-unit>
        <trans-unit id="bedcfdd998ee980c02d9c4fd504ce8b8ac40f230" translate="yes" xml:space="preserve">
          <source>Make sure to have mocha installed or install it:</source>
          <target state="translated">モカがインストールされているかどうか確認してください。</target>
        </trans-unit>
        <trans-unit id="732a2902091f3108fce0dcbdda8a24b0e693a2bf" translate="yes" xml:space="preserve">
          <source>Make test as simple as:</source>
          <target state="translated">テストを簡単なものにしてください。</target>
        </trans-unit>
        <trans-unit id="9d34a9a7cc1f7032f7ac94e73a5e2756ed464db7" translate="yes" xml:space="preserve">
          <source>Managing data for tests is always a tricky issue. How isolate data between tests, how to prepare data for different tests, etc. There are different approaches to solve it:</source>
          <target state="translated">テスト用のデータを管理することは、常にトリッキーな問題です。どのようにテスト間でデータを分離するか、異なるテスト用のデータをどのように準備するか、など。それを解決するためのさまざまなアプローチがあります。</target>
        </trans-unit>
        <trans-unit id="85eaa73cf22e8103fec64c238b172f88c9430aff" translate="yes" xml:space="preserve">
          <source>Manipulating Web Page</source>
          <target state="translated">ウェブページの操作</target>
        </trans-unit>
        <trans-unit id="4e836fdc2572ab23d5dc8c36bd613ac6b0f82d63" translate="yes" xml:space="preserve">
          <source>Manual</source>
          <target state="translated">Manual</target>
        </trans-unit>
        <trans-unit id="7e4ac6803c9159c694f63d089cb06b2519c16aba" translate="yes" xml:space="preserve">
          <source>Methods</source>
          <target state="translated">Methods</target>
        </trans-unit>
        <trans-unit id="c42e1604eb50f1b42722a49d2633d75d623840b5" translate="yes" xml:space="preserve">
          <source>Methods starting with &lt;code&gt;_&lt;/code&gt; are considered special and won't available in &lt;code&gt;I&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;_&lt;/code&gt; で始まるメソッドは特別なものと見なされ、 &lt;code&gt;I&lt;/code&gt; オブジェクトでは使用できません。</target>
        </trans-unit>
        <trans-unit id="929ecd9d6ef73dbc8009fb8a22a2b36058462667" translate="yes" xml:space="preserve">
          <source>Migrate</source>
          <target state="translated">Migrate</target>
        </trans-unit>
        <trans-unit id="26ef5a2e96319ae15125f82b1aaa5bb2e782c19a" translate="yes" xml:space="preserve">
          <source>Migrate your current &lt;code&gt;codecept.json&lt;/code&gt; to &lt;code&gt;codecept.conf.js&lt;/code&gt;</source>
          <target state="translated">現在の &lt;code&gt;codecept.json&lt;/code&gt; を &lt;code&gt;codecept.conf.js&lt;/code&gt; に移行します</target>
        </trans-unit>
        <trans-unit id="920dd57e7db1ebeb1fa86a9bf3b1e4bf9701f295" translate="yes" xml:space="preserve">
          <source>Mobile Testing</source>
          <target state="translated">モバイルテスト</target>
        </trans-unit>
        <trans-unit id="7f4a8a0fbdb9c16505d7df61b9f0544b647dec0e" translate="yes" xml:space="preserve">
          <source>Mobile Testing with Appium</source>
          <target state="translated">Appiumを使ったモバイルテスト</target>
        </trans-unit>
        <trans-unit id="4784125acaadea4efb94691fa10014f6b7fc2210" translate="yes" xml:space="preserve">
          <source>Mobile applications may have different contexts. For instance, there can be native view and web view with a browser instance in it.</source>
          <target state="translated">モバイルアプリケーションは異なるコンテキストを持つことがあります。例えば、ネイティブビューとブラウザのインスタンスが入ったウェブビューがあります。</target>
        </trans-unit>
        <trans-unit id="d846386b45743bbe14cdc3d2982c8bf1c5675276" translate="yes" xml:space="preserve">
          <source>Mobile test is pretty similar to a web test. And it is much the same, if you test hybrid app with a web view context inside. However, mobile apps do not have URLs, Cookies, they have other features which may vary on a running platform.</source>
          <target state="translated">モバイルテストはWebテストとよく似ています。ハイブリッドアプリをウェブビューのコンテキストでテストする場合も同じです。しかし、モバイルアプリはURLやCookieを持っておらず、他の機能を持っていますが、それは実行中のプラットフォームによって異なる可能性があります。</target>
        </trans-unit>
        <trans-unit id="6bc742b1ba7b85ee7099025c31c4b8001358324b" translate="yes" xml:space="preserve">
          <source>Mock response status</source>
          <target state="translated">モック対応状況</target>
        </trans-unit>
        <trans-unit id="a9ab5eaa9fb3b319cbafbf3e58b430df15305726" translate="yes" xml:space="preserve">
          <source>MockRequest</source>
          <target state="translated">MockRequest</target>
        </trans-unit>
        <trans-unit id="9a022fca526d139390c90ab4a5bf85c2621f677d" translate="yes" xml:space="preserve">
          <source>MockRequest helper works in these &lt;a href=&quot;https://netflix.github.io/pollyjs/#/configuration?id=mode&quot;&gt;modes (opens new window)&lt;/a&gt;:</source>
          <target state="translated">MockRequestヘルパーはこれらの&lt;a href=&quot;https://netflix.github.io/pollyjs/#/configuration?id=mode&quot;&gt;モードで動作します（新しいウィンドウを開きます）&lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="d75b64bcf58e87848bed2f610db01e8b70a9a615" translate="yes" xml:space="preserve">
          <source>Mocking Requests</source>
          <target state="translated">モッキングのお願い</target>
        </trans-unit>
        <trans-unit id="65c790d9e6049590b8419ceb10eadf5015e49ee6" translate="yes" xml:space="preserve">
          <source>Mocking rules will be kept while a test is running. To stop mocking use &lt;code&gt;I.stopMocking()&lt;/code&gt; command</source>
          <target state="translated">テストの実行中は、モッキングルールが保持されます。 &lt;code&gt;I.stopMocking()&lt;/code&gt; を停止するには、I.stopMocking（）コマンドを使用します</target>
        </trans-unit>
        <trans-unit id="fe13368b017dd0141668aedd62a5de6747898703" translate="yes" xml:space="preserve">
          <source>More commands available in &lt;a href=&quot;https://codecept.io/commands/&quot;&gt;CodeceptJS CLI runner (opens new window)&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://codecept.io/commands/&quot;&gt;CodeceptJS CLIランナーで&lt;/a&gt;使用できるその他のコマンド（新しいウィンドウが開きます）。</target>
        </trans-unit>
        <trans-unit id="6b49e28217c1f32666ad2f3052c8d44a48ac3223" translate="yes" xml:space="preserve">
          <source>More wait actions can be found in helper's reference.</source>
          <target state="translated">待機アクションの詳細はヘルパーのリファレンスを参照してください。</target>
        </trans-unit>
        <trans-unit id="9edbc959ca2c07544d421c46fe1077c57a7dbd91" translate="yes" xml:space="preserve">
          <source>Moreover, alternatively arguments to &lt;code&gt;codecept run-multiple&lt;/code&gt; command can be passed via &lt;code&gt;RUN_MULTIPLE&lt;/code&gt; and &lt;code&gt;CODECEPT_ARGS&lt;/code&gt; environment variable. For example this is what looks like in your codeceptjs.conf.js</source>
          <target state="translated">さらに、代わりに、 &lt;code&gt;codecept run-multiple&lt;/code&gt; コマンドへの引数を、 &lt;code&gt;RUN_MULTIPLE&lt;/code&gt; および &lt;code&gt;CODECEPT_ARGS&lt;/code&gt; 環境変数を介して渡すことができます。たとえば、これはcodeceptjs.conf.jsのようになります</target>
        </trans-unit>
        <trans-unit id="1447f0c44fb0f14e94ba1cd2593592b8579b7d8d" translate="yes" xml:space="preserve">
          <source>Most methods in CodeceptJS use locators which can be either a string or an object.</source>
          <target state="translated">CodeceptJSのほとんどのメソッドはロケータを使用します。</target>
        </trans-unit>
        <trans-unit id="7f547fd5d85c5a87d7a70e5e9de520048c02b803" translate="yes" xml:space="preserve">
          <source>Most popular &quot;waiters&quot; are:</source>
          <target state="translated">最も人気のある「ウェイター」は</target>
        </trans-unit>
        <trans-unit id="2f952d096b61cdf80dec88d7021979e7c11e492d" translate="yes" xml:space="preserve">
          <source>Move page-based actions and selectors into &lt;strong&gt;Page Object&lt;/strong&gt;. All acitivities made on that page can go into methods of page object. If you test Single Page Application a PageObject should represent a screen of your application.</source>
          <target state="translated">ページベースのアクションとセレクターを&lt;strong&gt;ページオブジェクトに&lt;/strong&gt;移動します。そのページで行われたすべてのアクティビティは、ページオブジェクトのメソッドに入ることができます。シングルページアプリケーションをテストする場合、PageObjectはアプリケーションの画面を表す必要があります。</target>
        </trans-unit>
        <trans-unit id="9c38d707ce3ea9189ceec80ff3491b68379b0901" translate="yes" xml:space="preserve">
          <source>Move site-wide actions into an &lt;strong&gt;Actor&lt;/strong&gt; file (&lt;code&gt;custom_steps.js&lt;/code&gt; file). Such actions like &lt;code&gt;login&lt;/code&gt;, using site-wide common controls, like drop-downs, rich text editors, calendars.</source>
          <target state="translated">サイト全体のアクションを&lt;strong&gt;アクター&lt;/strong&gt;ファイル（ &lt;code&gt;custom_steps.js&lt;/code&gt; ファイル）に移動します。ドロップダウン、リッチテキストエディタ、カレンダーなど、サイト全体の共通コントロールを使用した &lt;code&gt;login&lt;/code&gt; などのアクション。</target>
        </trans-unit>
        <trans-unit id="5dcf3399c046f19bfd0b3b7c0dbba1c86c5a1fed" translate="yes" xml:space="preserve">
          <source>Moves cursor to element matched by locator. Extra shift can be set with offsetX and offsetY options</source>
          <target state="translated">カーソルをロケータにマッチした要素に移動します。offsetX および offsetY オプションで余分なシフトを設定することができます。</target>
        </trans-unit>
        <trans-unit id="a4a231fe74e1f3fb9efbaca2a90c5adae2d34ba3" translate="yes" xml:space="preserve">
          <source>Moves cursor to element matched by locator. Extra shift can be set with offsetX and offsetY options.</source>
          <target state="translated">カーソルをロケータにマッチした要素に移動します。offsetXとoffsetYオプションで余分なシフトを設定することができます。</target>
        </trans-unit>
        <trans-unit id="6c2bb4c06f43c51226c71b6a2843a24d6d7d4609" translate="yes" xml:space="preserve">
          <source>Moves to url</source>
          <target state="translated">urlに移動します。</target>
        </trans-unit>
        <trans-unit id="8ff5be1fa1c98523961d77d211cb9e88954853d1" translate="yes" xml:space="preserve">
          <source>Multi Reports</source>
          <target state="translated">マルチレポート</target>
        </trans-unit>
        <trans-unit id="f791d73cb2fefd38cf0892cd98dd47e9d40cc22b" translate="yes" xml:space="preserve">
          <source>Multi Session Testing</source>
          <target state="translated">マルチセッションテスト</target>
        </trans-unit>
        <trans-unit id="2af4aff976d8180d2d3ba3e2f956a79c40bb6574" translate="yes" xml:space="preserve">
          <source>Multi taps on an element. Element can be located by its text or id or accessibility id.</source>
          <target state="translated">要素をマルチタップします。要素は、そのテキスト、id、またはアクセシビリティIDによって位置を特定することができます。</target>
        </trans-unit>
        <trans-unit id="97ea8107b5ad8285200980522626d836895b743e" translate="yes" xml:space="preserve">
          <source>Multiple Browsers Execution</source>
          <target state="translated">複数のブラウザの実行</target>
        </trans-unit>
        <trans-unit id="7cac3bae75000230c7f1e6445a092cb67a531d5d" translate="yes" xml:space="preserve">
          <source>Multiple Conditional Assertions</source>
          <target state="translated">複数の条件付きアサーション</target>
        </trans-unit>
        <trans-unit id="7666affaf988e1fde99845201a933fb65cda4245" translate="yes" xml:space="preserve">
          <source>Multiple Sessions</source>
          <target state="translated">複数のセッション</target>
        </trans-unit>
        <trans-unit id="dbd5e03f2cabed665b959bfcd34da47eace49590" translate="yes" xml:space="preserve">
          <source>Multiple Windows</source>
          <target state="translated">複数のWindows</target>
        </trans-unit>
        <trans-unit id="1d6aa05c97c9baa680d1358fb76d5a1cb1378ca1" translate="yes" xml:space="preserve">
          <source>Multiple requests</source>
          <target state="translated">複数のリクエスト</target>
        </trans-unit>
        <trans-unit id="9173c24b8e54eb7552458d097c135b75f8018be1" translate="yes" xml:space="preserve">
          <source>Multiple tests can be refactored to share some logic and locators. It is recommended to use PageObjects for this. For instance, in example above, we could create special actions for creating todos and checking them. If we move such methods in a corresponding object a test would look even clearer:</source>
          <target state="translated">複数のテストをリファクタリングして、いくつかのロジックやロケータを共有することができます。これには PageObjects を使うことをお勧めします。例えば、上の例では、ToDo を作成してチェックするための特別なアクションを作成することができます。このようなメソッドを対応するオブジェクトに移動させれば、テストはより明確になります。</target>
        </trans-unit>
        <trans-unit id="ab499ae87df0b2103e10772697ddd9a8f8573f9b" translate="yes" xml:space="preserve">
          <source>Multiremote Capabilities</source>
          <target state="translated">マルチリモート機能</target>
        </trans-unit>
        <trans-unit id="f60b569643f256db17904edea7f04c7aa897ee06" translate="yes" xml:space="preserve">
          <source>Multiremote Capabilities (WebDriverIO)</source>
          <target state="translated">マルチリモート機能(WebDriverIO</target>
        </trans-unit>
        <trans-unit id="2a845a0fad8508ec214837a9f1720684bff0d847" translate="yes" xml:space="preserve">
          <source>NPM / Yarn</source>
          <target state="translated">NPM/ヤーン</target>
        </trans-unit>
        <trans-unit id="979e32578bea316f3e08f448a04b3fae40de4413" translate="yes" xml:space="preserve">
          <source>Name a new helper &quot;Web&quot;. Now each method of a created class can be added to I object. Be sure to enable this helper in config:</source>
          <target state="translated">新しいヘルパーに「Web」という名前をつけます。これで、作成されたクラスの各メソッドをIオブジェクトに追加することができます。必ずconfigでこのヘルパーを有効にしてください。</target>
        </trans-unit>
        <trans-unit id="226a91e48e84216526173b19d3eb0b5b630b0c01" translate="yes" xml:space="preserve">
          <source>Name of the container (default : selenoid)</source>
          <target state="translated">コンテナの名前(デフォルト:selenoid</target>
        </trans-unit>
        <trans-unit id="62642e0bd9de1704fc6a76b8c39a6dba8cdca819" translate="yes" xml:space="preserve">
          <source>Native iOS/Android locators can be used with &lt;code&gt;android=&lt;/code&gt; and &lt;code&gt;ios=&lt;/code&gt; prefixes. &lt;a href=&quot;http://webdriver.io/guide/usage/selectors.html#Mobile-Selectors&quot;&gt;Learn more (opens new window)&lt;/a&gt;.</source>
          <target state="translated">ネイティブiOS / Androidロケーターは、 &lt;code&gt;android=&lt;/code&gt; および &lt;code&gt;ios=&lt;/code&gt; プレフィックスで使用できます。&lt;a href=&quot;http://webdriver.io/guide/usage/selectors.html#Mobile-Selectors&quot;&gt;詳細（新しいウィンドウが開きます）&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c06f1019f66bfa744bb9b8bdd7feea7401ab56e5" translate="yes" xml:space="preserve">
          <source>Native iOS/Android locators can be used with &lt;code&gt;android=&lt;/code&gt; and &lt;code&gt;ios=&lt;/code&gt; prefixes. &lt;a href=&quot;http://webdriver.io/guide/usage/selectors.html#Mobile-Selectors&quot;&gt;Learn more&lt;/a&gt;.</source>
          <target state="translated">ネイティブiOS / Androidロケーターは、 &lt;code&gt;android=&lt;/code&gt; および &lt;code&gt;ios=&lt;/code&gt; プレフィックスで使用できます。&lt;a href=&quot;http://webdriver.io/guide/usage/selectors.html#Mobile-Selectors&quot;&gt;詳細をご覧ください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2cb0a117caafbdead925f90b8bd428adcfb92334" translate="yes" xml:space="preserve">
          <source>Nested IFrames can be set by passing an array &lt;em&gt;(WebDriver, Nightmare &amp;amp; Puppeteer only)&lt;/em&gt;:</source>
          <target state="translated">ネストされたIFrameは、配列を渡すことで設定できます&lt;em&gt;（WebDriver、Nightmare、Puppeteerのみ）&lt;/em&gt;：</target>
        </trans-unit>
        <trans-unit id="2e95960a5c11995494f66737b0c7308893fd1ca9" translate="yes" xml:space="preserve">
          <source>Nested IFrames can be set by passing array &lt;em&gt;(WebDriverIO, Nightmare &amp;amp; Puppeteer only)&lt;/em&gt;:</source>
          <target state="translated">ネストされたIFrameは&lt;em&gt;、&lt;/em&gt;配列を渡すことで設定できます&lt;em&gt;（WebDriverIO、Nightmare、Puppeteerのみ）&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="d58c4386d2c0ac0427fb283b93bb489420ff92ac" translate="yes" xml:space="preserve">
          <source>New locator strategy is ready to use:</source>
          <target state="translated">新しいロケーター戦略の準備が整いました。</target>
        </trans-unit>
        <trans-unit id="9c9e29cdf50514a8eca8ce1ae500477de2de8e00" translate="yes" xml:space="preserve">
          <source>New objects can also be added to container in runtime:</source>
          <target state="translated">新しいオブジェクトは、実行時にコンテナに追加することもできます。</target>
        </trans-unit>
        <trans-unit id="1308a915b30d9a7913e583ca86866344c8e91f30" translate="yes" xml:space="preserve">
          <source>Next example demonstrates how to use WebDriver library to create your own test action. Method &lt;code&gt;seeAuthentication&lt;/code&gt; will use &lt;code&gt;browser&lt;/code&gt; instance of WebDriver to get access to cookies. Standard NodeJS assertion library will be used (you can use any).</source>
          <target state="translated">次の例は、WebDriverライブラリを使用して独自のテストアクションを作成する方法を示しています。メソッド &lt;code&gt;seeAuthentication&lt;/code&gt; は、WebDriverの &lt;code&gt;browser&lt;/code&gt; インスタンスを使用してCookieにアクセスします。標準のNodeJSアサーションライブラリが使用されます（任意のライブラリを使用できます）。</target>
        </trans-unit>
        <trans-unit id="15e9eff0b36839a9d5761da8d2489852ba577e3e" translate="yes" xml:space="preserve">
          <source>Next example demonstrates how to use WebDriverIO library to create your own test action. Method &lt;code&gt;seeAuthentication&lt;/code&gt; will use &lt;code&gt;client&lt;/code&gt; instance of WebDriverIO to get access to cookies. Standard NodeJS assertion library will be used (you can use any).</source>
          <target state="translated">次の例は、WebDriverIOライブラリを使用して独自のテストアクションを作成する方法を示しています。メソッド &lt;code&gt;seeAuthentication&lt;/code&gt; は、WebDriverIOの &lt;code&gt;client&lt;/code&gt; インスタンスを使用してCookieにアクセスします。標準のNodeJSアサーションライブラリが使用されます（任意のものを使用できます）。</target>
        </trans-unit>
        <trans-unit id="df0a572490af28130369da7be3e47e52e90f8f63" translate="yes" xml:space="preserve">
          <source>Next is to configure helper to match factories with API:</source>
          <target state="translated">次は工場とAPIを一致させるためのヘルパーの設定です。</target>
        </trans-unit>
        <trans-unit id="296692f27911cd0a852be32d24c5efeb231d336e" translate="yes" xml:space="preserve">
          <source>Next popular use case for capabilities is configuring what to do with unhandled alert popups.</source>
          <target state="translated">次に人気のある機能のユースケースは、処理されていないアラートポップアップをどうするかを設定することです。</target>
        </trans-unit>
        <trans-unit id="46a15e823f35dd7061cf4fe3feba75d85139b31d" translate="yes" xml:space="preserve">
          <source>Next, is to launch the emulator or connect physical device. Once they are prepared, launch Appium:</source>
          <target state="translated">次に、エミュレータを起動するか、物理デバイスを接続することです。それらの準備ができたら、Appiumを起動します。</target>
        </trans-unit>
        <trans-unit id="323f607ffa2a112ff3d82ca45b193fc32426e064" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;https://codecept.io/acceptance/&quot;&gt;Acceptance Testing in CodeceptJS &amp;gt;&amp;gt;&amp;gt;&lt;/a&gt;</source>
          <target state="translated">次：&lt;a href=&quot;https://codecept.io/acceptance/&quot;&gt;CodeceptJSでの受け入れテスト&amp;gt;&amp;gt;&amp;gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="216e7db5afef9daaa3254c356c30158f9a4b151b" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;https://codecept.io/basics/&quot;&gt;CodeceptJS Basics &amp;gt;&amp;gt;&amp;gt;&lt;/a&gt;</source>
          <target state="translated">次：&lt;a href=&quot;https://codecept.io/basics/&quot;&gt;CodeceptJSの基本&amp;gt;&amp;gt;&amp;gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e5123709f8545f73e1fff6d3196ca9b90b1410db" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;https://codecept.io/puppeteer/&quot;&gt;CodeceptJS with Puppeteer &amp;gt;&amp;gt;&amp;gt;&lt;/a&gt;</source>
          <target state="translated">次：&lt;a href=&quot;https://codecept.io/puppeteer/&quot;&gt;PuppeteerでのCodeceptJS &amp;gt;&amp;gt;&amp;gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="43574e2f933bbefd377b17ec2c3fe92541a97d86" translate="yes" xml:space="preserve">
          <source>Nightmare</source>
          <target state="translated">Nightmare</target>
        </trans-unit>
        <trans-unit id="b141b6a57cf84b29b3de818917b2abb3107b68ef" translate="yes" xml:space="preserve">
          <source>Nightmare helper is supposed to work in the same manner as WebDriverIO or Protractor. This means that all CodeceptJS actions like &lt;code&gt;click&lt;/code&gt;, &lt;code&gt;fillField&lt;/code&gt;, &lt;code&gt;selectOption&lt;/code&gt; and others are supposed to work in the very same manner. They are expressive and flexible to accept CSS, XPath, names, values, or strict locators. Follow the helper reference for detailed description.</source>
          <target state="translated">ナイトメアヘルパーは、WebDriverIOまたはProtractorと同じように動作するはずです。つまり、 &lt;code&gt;click&lt;/code&gt; 、 &lt;code&gt;fillField&lt;/code&gt; 、 &lt;code&gt;selectOption&lt;/code&gt; などのすべてのCodeceptJSアクションは、まったく同じように動作するはずです。CSS、XPath、名前、値、または厳密なロケーターを受け入れるための表現力と柔軟性があります。詳細な説明については、ヘルパーリファレンスに従ってください。</target>
        </trans-unit>
        <trans-unit id="8627c8b79808743ff2b61f9676c50f41c05b912f" translate="yes" xml:space="preserve">
          <source>Nightmare helper wraps &lt;a href=&quot;https://github.com/segmentio/nightmare&quot;&gt;Nightmare (opens new window)&lt;/a&gt; library to provide fastest headless testing using Electron engine. Unlike Selenium-based drivers this uses Chromium-based browser with Electron with lots of client side scripts, thus should be less stable and less trusted.</source>
          <target state="translated">Nightmareヘルパーは&lt;a href=&quot;https://github.com/segmentio/nightmare&quot;&gt;Nightmare（新しいウィンドウを開きます）&lt;/a&gt;ライブラリをラップして、Electronエンジンを使用した最速のヘッドレステストを提供します。Seleniumベースのドライバーとは異なり、これは多くのクライアント側スクリプトを備えたElectronを備えたChromiumベースのブラウザーを使用するため、安定性が低く、信頼性が低いはずです。</target>
        </trans-unit>
        <trans-unit id="1331d4069d372f951acd3a8613cdc19c07ab9c27" translate="yes" xml:space="preserve">
          <source>Nightmare helper wraps &lt;a href=&quot;https://github.com/segmentio/nightmare&quot;&gt;Nightmare&lt;/a&gt; library to provide fastest headless testing using Electron engine. Unlike Selenium-based drivers this uses Chromium-based browser with Electron with lots of client side scripts, thus should be less stable and less trusted.</source>
          <target state="translated">ナイトメアヘルパーは&lt;a href=&quot;https://github.com/segmentio/nightmare&quot;&gt;ナイトメア&lt;/a&gt;ライブラリをラップして、電子エンジンを使用した最速のヘッドレステストを提供します。Seleniumベースのドライバーとは異なり、これは多数のクライアント側スクリプトを備えたElectronでChromiumベースのブラウザーを使用するため、安定性と信頼性が低くなるはずです。</target>
        </trans-unit>
        <trans-unit id="b2e276e1059ea6fcd0b97f417c0e9598eebe3a1f" translate="yes" xml:space="preserve">
          <source>Nightmare instance can be accessed by custom helper:</source>
          <target state="translated">ナイトメアのインスタンスにはカスタムヘルパーでアクセスできます。</target>
        </trans-unit>
        <trans-unit id="f44f5f7e331e77a89a89e96e0b0c8f38415418dc" translate="yes" xml:space="preserve">
          <source>Nightmare provides &lt;code&gt;evaluate&lt;/code&gt; method to execute client-side JavaScript. CodeceptJS registers &lt;code&gt;codeceptjs&lt;/code&gt; object globally on client side with &lt;code&gt;findElement&lt;/code&gt; and &lt;code&gt;findElements&lt;/code&gt; methods in it. They return IDs of matched elements so you can access them in next calls to &lt;code&gt;evaluate&lt;/code&gt;:</source>
          <target state="translated">Nightmareは、クライアント側のJavaScriptを実行するための &lt;code&gt;evaluate&lt;/code&gt; メソッドを提供します。CodeceptJSレジスタは &lt;code&gt;codeceptjs&lt;/code&gt; とクライアント側でグローバルオブジェクトを &lt;code&gt;findElement&lt;/code&gt; と &lt;code&gt;findElements&lt;/code&gt; その中の方法。それらは一致した要素のIDを返すので、次の呼び出しでそれらにアクセスして &lt;code&gt;evaluate&lt;/code&gt; することができます：</target>
        </trans-unit>
        <trans-unit id="40dd41273b67b6e7fbbddb7ef092de631bc1b3cc" translate="yes" xml:space="preserve">
          <source>Nightmare provides you with more control to browser engine than Selenium does. This allows you to use headers in your tests. For instance, CodeceptJS provides &lt;code&gt;haveHeader&lt;/code&gt; method to set default headers for all your HTTP requests:</source>
          <target state="translated">ナイトメアは、Seleniumが提供するよりもブラウザエンジンをより詳細に制御できます。これにより、テストでヘッダーを使用できます。たとえば、CodeceptJSには、すべてのHTTPリクエストのデフォルトヘッダーを設定する &lt;code&gt;haveHeader&lt;/code&gt; メソッドが用意されています。</target>
        </trans-unit>
        <trans-unit id="9f44071148112dbaa4c0e42b147e26f7c33875c8" translate="yes" xml:space="preserve">
          <source>NightmareJS support only CSS locators for web elements, while CodeceptJS improves it to use XPath as well. This is how form can be located by labels, and buttons by text in examples above. It is done by injecting client-side scrips (for element location) to every loaded page. Also all events like click, doubleClick, keyPress are &lt;strong&gt;simulated&lt;/strong&gt; by JavaScript, this makes testing less relevant, as they are not native to operating systems.</source>
          <target state="translated">NightmareJSはWeb要素のCSSロケーターのみをサポートしていますが、CodeceptJSはXPathを使用するように改善しています。これは、上記の例ではラベルによってフォームを、テキストによってボタンを配置する方法です。これは、読み込まれたすべてのページにクライアント側のスクリプト（要素の場所）を挿入することで行われます。また、click、doubleClick、keyPressなどのすべてのイベントはJavaScriptによって&lt;strong&gt;シミュレート&lt;/strong&gt;されます。これは、オペレーティングシステムに固有ではないため、テストの関連性が低くなります。</target>
        </trans-unit>
        <trans-unit id="2194bc0a5f68ccbc6ac3de513c6bc03db20b03b4" translate="yes" xml:space="preserve">
          <source>NodeJS &amp;gt;= 8.9</source>
          <target state="translated">NodeJS &amp;gt;= 8.9</target>
        </trans-unit>
        <trans-unit id="2f5ba7b67fd810b27bc1b0a1e51aba5c15b7b3cc" translate="yes" xml:space="preserve">
          <source>NodeJS Workers can communicate between each other via messaging system. It may happen that you want to pass some data from one of workers to other. For instance, you may want to share user credentials accross all tests. Data will be appended to a container.</source>
          <target state="translated">NodeJSワーカーはメッセージングシステムを介してお互いに通信することができます。あるワーカーから他のワーカーにデータを渡したい場合があるかもしれません。例えば、すべてのテストでユーザーの資格情報を共有したい場合などです。データはコンテナに追加されます。</target>
        </trans-unit>
        <trans-unit id="2eef98e1d1590b3345f7ce9dbddcc3c8d86645e1" translate="yes" xml:space="preserve">
          <source>Note: Chunking will be most effective if you have many individual test files that contain only a small amount of scenarios. Otherwise the combined execution time of many scenarios or big scenarios in one single test file potentially lead to an uneven execution time.</source>
          <target state="translated">注意:チャンキングは、少量のシナリオしか含まない個別のテストファイルが多数ある場合に最も効果的です。そうでない場合、1つのテストファイルに含まれる多くのシナリオや大きなシナリオの実行時間を合わせると、実行時間が不均一になる可能性があります。</target>
        </trans-unit>
        <trans-unit id="bca2e2bc86dffc00701b4bd9f755bdc3c5a83b9e" translate="yes" xml:space="preserve">
          <source>Note: When connecting to remote browser &lt;code&gt;show&lt;/code&gt; and specific &lt;code&gt;chrome&lt;/code&gt; options (e.g. &lt;code&gt;headless&lt;/code&gt; or &lt;code&gt;devtools&lt;/code&gt;) are ignored.</source>
          <target state="translated">注：リモートブラウザに接続する場合、 &lt;code&gt;show&lt;/code&gt; および特定の &lt;code&gt;chrome&lt;/code&gt; オプション（ &lt;code&gt;headless&lt;/code&gt; や &lt;code&gt;devtools&lt;/code&gt; など）は無視されます。</target>
        </trans-unit>
        <trans-unit id="5015d20b39fc3bb991bf1edb0d8f7be3993ec31b" translate="yes" xml:space="preserve">
          <source>Now each worker has &lt;code&gt;userData&lt;/code&gt; inside a container. However, it is empty. When you obtain real data in one of tests you can this data accross tests. Use &lt;code&gt;inject&lt;/code&gt; function to access data inside a container:</source>
          <target state="translated">これで、各ワーカーはコンテナー内に &lt;code&gt;userData&lt;/code&gt; を持ちます。ただし、空です。テストの1つで実際のデータを取得すると、テスト間でこのデータを取得できます。コンテナ内のデータにアクセスするには、 &lt;code&gt;inject&lt;/code&gt; 関数を使用します。</target>
        </trans-unit>
        <trans-unit id="cd4b0af1ccece2fa1abec3a08147daa33181356e" translate="yes" xml:space="preserve">
          <source>Now execute tests with &lt;code&gt;run-rerun&lt;/code&gt; command:</source>
          <target state="translated">次に、 &lt;code&gt;run-rerun&lt;/code&gt; コマンドを使用してテストを実行します。</target>
        </trans-unit>
        <trans-unit id="4414f6bd14b6771cde7d5e7e60c548053b38715a" translate="yes" xml:space="preserve">
          <source>Now let's see how to update this file for different parallelization modes:</source>
          <target state="translated">それでは、異なる並列化モードに対応するために、このファイルを更新する方法を見てみましょう。</target>
        </trans-unit>
        <trans-unit id="a3854c94ada9a768e304b4fa1ffe876f7ee76dfd" translate="yes" xml:space="preserve">
          <source>Now this objects can be retrieved by the name specified in configuration. CodeceptJS generator commands (like &lt;code&gt;codeceptjs gpo&lt;/code&gt;) will update configuration for you.</source>
          <target state="translated">これで、このオブジェクトは構成で指定された名前で取得できます。CodeceptJSジェネレーターコマンド（ &lt;code&gt;codeceptjs gpo&lt;/code&gt; など）は、構成を更新します。</target>
        </trans-unit>
        <trans-unit id="d2803e7f5ce7f669dff787ae4d1afe1218245ead" translate="yes" xml:space="preserve">
          <source>Now you can write test like this:</source>
          <target state="translated">これでこんな感じでテストが書けるようになりました。</target>
        </trans-unit>
        <trans-unit id="4a9dd9f35862f36f7832c7624fc4504526397df0" translate="yes" xml:space="preserve">
          <source>Now you can write tests like this:</source>
          <target state="translated">これで、こんな感じでテストが書けるようになりました。</target>
        </trans-unit>
        <trans-unit id="d36cabeccab5452b643072a1f49f57939a069bc7" translate="yes" xml:space="preserve">
          <source>Now you should include &lt;code&gt;/// &amp;lt;reference path=&quot;./steps.d.ts&quot; /&amp;gt;&lt;/code&gt; into your test files to get method autocompletion while writing tests.</source>
          <target state="translated">今、あなたは含めるべきである &lt;code&gt;/// &amp;lt;reference path=&quot;./steps.d.ts&quot; /&amp;gt;&lt;/code&gt; テストを書きながら、メソッド自動補完を得るためにあなたのテストファイルにします。</target>
        </trans-unit>
        <trans-unit id="9bd533173ee0896d69a76b0c753d744699f05e67" translate="yes" xml:space="preserve">
          <source>On MacOS/Linux run following commands:</source>
          <target state="translated">MacOS/Linuxでは以下のコマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="f410197b8f9ee05cbc5a2063df86700a5920239f" translate="yes" xml:space="preserve">
          <source>Once you configured Appium, create the first test by running</source>
          <target state="translated">Appium を設定したら、最初のテストを作成します。</target>
        </trans-unit>
        <trans-unit id="bf0579943cfaa10c9ed1d6456b903ba3ca9cebc4" translate="yes" xml:space="preserve">
          <source>Open &lt;code&gt;tests/e2e/app_js&lt;/code&gt; and see the demo test</source>
          <target state="translated">&lt;code&gt;tests/e2e/app_js&lt;/code&gt; を開き、デモテストをご覧ください</target>
        </trans-unit>
        <trans-unit id="03bf045df8c00b56171b51ace3b6952e4e8d86c9" translate="yes" xml:space="preserve">
          <source>Open new tab and automatically switched to new tab</source>
          <target state="translated">新しいタブを開くと自動的に新しいタブに切り替わる</target>
        </trans-unit>
        <trans-unit id="3e1fe5186d355a07561fc61872bddfa883fe941f" translate="yes" xml:space="preserve">
          <source>Open new tab and switch to it</source>
          <target state="translated">新しいタブを開いて切り替える</target>
        </trans-unit>
        <trans-unit id="92c0fb5aca6fde45ed5a0f97fc32b555297e7a44" translate="yes" xml:space="preserve">
          <source>Open new tab and switch to it.</source>
          <target state="translated">新しいタブを開いて切り替えます。</target>
        </trans-unit>
        <trans-unit id="a28270e2b7cf79e3cc3116a9cfbcd092992bdf96" translate="yes" xml:space="preserve">
          <source>Open the notifications panel on the device.</source>
          <target state="translated">端末の通知パネルを開きます。</target>
        </trans-unit>
        <trans-unit id="64af49060a4a121083b3d9202f554783dd297530" translate="yes" xml:space="preserve">
          <source>Opening a Page</source>
          <target state="translated">ページを開く</target>
        </trans-unit>
        <trans-unit id="76b336c7b278afc21f1dff4b6eb852fca9db5868" translate="yes" xml:space="preserve">
          <source>Opening a Web Page</source>
          <target state="translated">ウェブページを開く</target>
        </trans-unit>
        <trans-unit id="47246f41e1dd6972dccc2e4ca4d082212558b907" translate="yes" xml:space="preserve">
          <source>Opens a web page in a browser. Requires relative or absolute url. If url starts with &lt;code&gt;/&lt;/code&gt;, opens a web page of a site defined in &lt;code&gt;url&lt;/code&gt; config parameter.</source>
          <target state="translated">ブラウザでWebページを開きます。相対または絶対URLが必要です。URLが &lt;code&gt;/&lt;/code&gt; で始まる場合、 &lt;code&gt;url&lt;/code&gt; 構成パラメーターで定義されたサイトのWebページを開きます。</target>
        </trans-unit>
        <trans-unit id="61671a7e71eadbb986b88c9f0323cf908808d140" translate="yes" xml:space="preserve">
          <source>Opposite to &lt;code&gt;see&lt;/code&gt;. Checks that a text is not present on a page. Use context parameter to narrow down the search.</source>
          <target state="translated">&lt;code&gt;see&lt;/code&gt; 反対。ページにテキストが存在しないことを確認します。コンテキストパラメータを使用して検索を絞り込みます。</target>
        </trans-unit>
        <trans-unit id="9896ba60cc2547225051dff4a875e959e798cba8" translate="yes" xml:space="preserve">
          <source>Opposite to &lt;code&gt;seeElement&lt;/code&gt;. Checks that element is not visible (or in DOM)</source>
          <target state="translated">&lt;code&gt;seeElement&lt;/code&gt; の反対。要素が非表示（またはDOM内）であることを確認します</target>
        </trans-unit>
        <trans-unit id="c7e7ff41d5d5d7f8f06f07a387d9a5541afd679c" translate="yes" xml:space="preserve">
          <source>Opposite to &lt;code&gt;seeElementInDOM&lt;/code&gt;. Checks that element is not on page.</source>
          <target state="translated">&lt;code&gt;seeElementInDOM&lt;/code&gt; の反対。要素がページ上にないことを確認します。</target>
        </trans-unit>
        <trans-unit id="bdcc5504f4d991893da05ca64a74caccde22b9f8" translate="yes" xml:space="preserve">
          <source>Option &lt;code&gt;waitForAction&lt;/code&gt; defines how long to wait after a click, doubleClick or pressKey action is performed. Test execution may happen much faster than the response is rendered, so make sure you set a proper delay value. By default CodeceptJS waits for 500ms.</source>
          <target state="translated">オプション &lt;code&gt;waitForAction&lt;/code&gt; は、クリック、doubleClick、またはpressKeyアクションが実行されてから待機する時間を定義します。テストの実行は、応答がレンダリングされるよりもはるかに速く発生する可能性があるため、適切な遅延値を設定してください。デフォルトでは、CodeceptJSは500ミリ秒待機します。</target>
        </trans-unit>
        <trans-unit id="313f6a08861648abf55d40b0462069d48b4ef209" translate="yes" xml:space="preserve">
          <source>Optional click</source>
          <target state="translated">オプションのクリック</target>
        </trans-unit>
        <trans-unit id="e0c42c2296e3c659809e930d649cdd357abc883e" translate="yes" xml:space="preserve">
          <source>Options can be passed by calling &lt;code&gt;codeceptjs&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;codeceptjs&lt;/code&gt; を呼び出すことでオプションを渡すことができます：</target>
        </trans-unit>
        <trans-unit id="bdd0b506837a990803d8edf137f2934329835748" translate="yes" xml:space="preserve">
          <source>Options:</source>
          <target state="translated">Options:</target>
        </trans-unit>
        <trans-unit id="06f0d9c50d54c6a44a0e811bbbd425df4a2a4acd" translate="yes" xml:space="preserve">
          <source>Or even without a test body:</source>
          <target state="translated">あるいは試験体がなくても</target>
        </trans-unit>
        <trans-unit id="96bb2374a83900b916d3baf573ea2f1829a44648" translate="yes" xml:space="preserve">
          <source>Or in provided path</source>
          <target state="translated">または提供されたパスで</target>
        </trans-unit>
        <trans-unit id="66f05bc834fe40972ad70aa4a20aa7bf891a0f5d" translate="yes" xml:space="preserve">
          <source>Or see &lt;a href=&quot;https://codecept.io/installation/&quot;&gt;alternative installation options (opens new window)&lt;/a&gt;</source>
          <target state="translated">または、&lt;a href=&quot;https://codecept.io/installation/&quot;&gt;代替インストールオプションを&lt;/a&gt;参照してください（新しいウィンドウが開きます）</target>
        </trans-unit>
        <trans-unit id="d0d92ff465685e47177da5b903470844574c0e54" translate="yes" xml:space="preserve">
          <source>Or see &lt;a href=&quot;https://codecept.io/installation/&quot;&gt;alternative installation options&lt;/a&gt; If you already have CodeceptJS project, just install &lt;code&gt;puppeteer&lt;/code&gt; package and enable it in config.</source>
          <target state="translated">または参照&lt;a href=&quot;https://codecept.io/installation/&quot;&gt;別のインストールオプションを&lt;/a&gt;使用すると、すでにCodeceptJSプロジェクトを持っている場合は、単にインストール &lt;code&gt;puppeteer&lt;/code&gt; パッケージを設定し、それを可能にします。</target>
        </trans-unit>
        <trans-unit id="6e6a6f2086bb5fe5dbfd17d8d5f502d48759834b" translate="yes" xml:space="preserve">
          <source>Other</source>
          <target state="translated">Other</target>
        </trans-unit>
        <trans-unit id="f6a2b3137e2f1d839c149498d20ba930934ef41a" translate="yes" xml:space="preserve">
          <source>Otherwise, follow next steps to introduce TypeScript into the project.</source>
          <target state="translated">そうでなければ、次のステップでTypeScriptをプロジェクトに導入します。</target>
        </trans-unit>
        <trans-unit id="4bed336194a9a5c86b6a734f03b3570d2aae1a68" translate="yes" xml:space="preserve">
          <source>Output</source>
          <target state="translated">Output</target>
        </trans-unit>
        <trans-unit id="40e8f9b6387804ad2404baacc201969fc9adf8dd" translate="yes" xml:space="preserve">
          <source>Output is printed for all running processes. Each line is tagged with a suite and browser name:</source>
          <target state="translated">実行中のすべてのプロセスについて出力されます。各行には、スイートとブラウザ名がタグ付けされています。</target>
        </trans-unit>
        <trans-unit id="13a62f730a0e26b4fcacd0a4b83936feb9bb2db5" translate="yes" xml:space="preserve">
          <source>Output module provides 4 verbosity levels. Depending on the mode you can have different information printed using corresponding functions.</source>
          <target state="translated">出力モジュールは4つの冗長レベルを提供します。モードに応じて、対応する機能を使用して異なる情報を印刷することができます。</target>
        </trans-unit>
        <trans-unit id="f3c8c95c5e534bcd2ea0034a0d83177efa6923f4" translate="yes" xml:space="preserve">
          <source>Output:</source>
          <target state="translated">Output:</target>
        </trans-unit>
        <trans-unit id="d4a122c76ddc90ef42936ca215ff4887a7e939e7" translate="yes" xml:space="preserve">
          <source>Override config on the fly. Provide valid JSON which will be merged into current config:</source>
          <target state="translated">その場で設定を上書きします。現在のconfigにマージされる有効なJSONを提供します。</target>
        </trans-unit>
        <trans-unit id="9c7e9494acb57670c4395cfd2599ae9349d79109" translate="yes" xml:space="preserve">
          <source>Page Fragments</source>
          <target state="translated">ページの断片</target>
        </trans-unit>
        <trans-unit id="3637b88b78dd96f1d06c042a982511affe107178" translate="yes" xml:space="preserve">
          <source>Page Fragments represent autonomous parts of a page, like modal boxes, components, widgets. Technically they are the same as PageObject but conceptually they are a bit different. For instance, it is recommended that Page Fragment to include a root locator of a component. Methods of page fragment can use &lt;code&gt;within&lt;/code&gt; block to narrow scope to a root locator:</source>
          <target state="translated">ページフラグメントは、モーダルボックス、コンポーネント、ウィジェットなど、ページの自律的な部分を表します。技術的にはそれらはPageObjectと同じですが、概念的には少し異なります。たとえば、ページフラグメントにコンポーネントのルートロケーターを含めることをお勧めします。ページフラグメントのメソッドは、ブロック &lt;code&gt;within&lt;/code&gt; 使用してスコープをルートロケーターに絞り込むことができます。</target>
        </trans-unit>
        <trans-unit id="ecdaf79edc200525b1e90f72ba93b4ac58415309" translate="yes" xml:space="preserve">
          <source>Page Fragments represent autonomous parts of a page, like modal boxes, components, widgets. Technically, they are the same as PageObject but conceptually they are a bit different. For instance, it is recommended that Page Fragment includes a root locator of a component. Methods of page fragments can use &lt;code&gt;within&lt;/code&gt; block to narrow scope to a root locator:</source>
          <target state="translated">ページフラグメントは、モーダルボックス、コンポーネント、ウィジェットなど、ページの自律的な部分を表します。技術的にはPageObjectと同じですが、概念的には少し異なります。たとえば、PageFragmentにコンポーネントのルートロケーターを含めることをお勧めします。ページフラグメントのメソッドは、ブロック &lt;code&gt;within&lt;/code&gt; 使用して、スコープをルートロケーターに絞り込むことができます。</target>
        </trans-unit>
        <trans-unit id="ebaffd1ddbaebe85d6df5d5cdd306e48e8a8ecce" translate="yes" xml:space="preserve">
          <source>Page Object</source>
          <target state="translated">ページオブジェクト</target>
        </trans-unit>
        <trans-unit id="58b53ac2103a1a696e3328a6a7500fe5857d5f5e" translate="yes" xml:space="preserve">
          <source>Page Object Code Generator</source>
          <target state="translated">ページオブジェクトコードジェネレータ</target>
        </trans-unit>
        <trans-unit id="6f6fed1d0200989b6e3e94de10d6d0ed652cfd7a" translate="yes" xml:space="preserve">
          <source>Page Objects</source>
          <target state="translated">ページオブジェクト</target>
        </trans-unit>
        <trans-unit id="005459d57fdb90640ab2af38aec9c3e1047ea64b" translate="yes" xml:space="preserve">
          <source>Page Objects can be be functions, arrays or classes. When declared as classes you can easily extend them in other page objects.</source>
          <target state="translated">ページオブジェクトは、関数、配列、クラスのいずれかにすることができます。クラスとして宣言されている場合は、他のページオブジェクトで簡単に拡張することができます。</target>
        </trans-unit>
        <trans-unit id="7675015f0524f489b145693a13c9d5c77708e556" translate="yes" xml:space="preserve">
          <source>PageObject</source>
          <target state="translated">PageObject</target>
        </trans-unit>
        <trans-unit id="fcc5ab0ecc3a3e681fb917aa411d039eafd0c966" translate="yes" xml:space="preserve">
          <source>PageObject and PageFragment names are declared inside &lt;code&gt;include&lt;/code&gt; section of &lt;code&gt;codecept.conf.js&lt;/code&gt;. See &lt;a href=&quot;#dependency-injection&quot;&gt;Dependency Injection&lt;/a&gt;</source>
          <target state="translated">PageObjectとPageFragment名が内部で宣言されている &lt;code&gt;include&lt;/code&gt; のセクション &lt;code&gt;codecept.conf.js&lt;/code&gt; を。&lt;a href=&quot;#dependency-injection&quot;&gt;依存性注入を&lt;/a&gt;参照してください</target>
        </trans-unit>
        <trans-unit id="8c279b1e11747efb218f24c8c8aa639b6d0fa5dc" translate="yes" xml:space="preserve">
          <source>PageObjects and other variables can also be passed to as object:</source>
          <target state="translated">ページオブジェクトなどの変数もオブジェクトとして渡すことができます。</target>
        </trans-unit>
        <trans-unit id="2b338af39aea20defe562c404d22d384da1fb4d9" translate="yes" xml:space="preserve">
          <source>Parallel Execution</source>
          <target state="translated">並列実行</target>
        </trans-unit>
        <trans-unit id="b39b4e2198a91bfb7d467d9a94c9a03a9cf46391" translate="yes" xml:space="preserve">
          <source>Parallel Execution by Workers</source>
          <target state="translated">ワーカーによる並列実行</target>
        </trans-unit>
        <trans-unit id="60ed18d7d5e4eff4dd9796d52282f10ddf245e96" translate="yes" xml:space="preserve">
          <source>Parallel Run</source>
          <target state="translated">パラレルラン</target>
        </trans-unit>
        <trans-unit id="0f332eeefd007bb0043ccb46738196508c6a602b" translate="yes" xml:space="preserve">
          <source>Param</source>
          <target state="translated">Param</target>
        </trans-unit>
        <trans-unit id="a975eea30db9fa05003e3b5097688bd49ec7e01b" translate="yes" xml:space="preserve">
          <source>Parameters</source>
          <target state="translated">Parameters</target>
        </trans-unit>
        <trans-unit id="ed0e5700d7ce87646a09dd5a762411c98330ac4e" translate="yes" xml:space="preserve">
          <source>Parameters (ApiDataFactory)</source>
          <target state="translated">パラメータ(ApiDataFactory</target>
        </trans-unit>
        <trans-unit id="50b7c22cc891899be5dce6a5e971b905e16367c7" translate="yes" xml:space="preserve">
          <source>Parameters (Appium)</source>
          <target state="translated">パラメータ(Appium</target>
        </trans-unit>
        <trans-unit id="90e892db0eb750a83e189f1428dbdf9dc8c3e379" translate="yes" xml:space="preserve">
          <source>Parameters (FileSystem)</source>
          <target state="translated">パラメータ(ファイルシステム</target>
        </trans-unit>
        <trans-unit id="2021385dc4bcc7cb809a260607141698f6b58b9d" translate="yes" xml:space="preserve">
          <source>Parameters (Nightmare)</source>
          <target state="translated">パラメータ(ナイトメア</target>
        </trans-unit>
        <trans-unit id="196b1cbde87e65f500d021de0336143fa40330aa" translate="yes" xml:space="preserve">
          <source>Parameters (Protractor)</source>
          <target state="translated">パラメータ(分度器</target>
        </trans-unit>
        <trans-unit id="e51bb02db41b76881a1d3ff4bea45a307dd6c6ea" translate="yes" xml:space="preserve">
          <source>Parameters (Puppeteer)</source>
          <target state="translated">パラメータ(人形遣い</target>
        </trans-unit>
        <trans-unit id="59b79ac421c5b0874dac6c7f2c3dc5d4f0171faa" translate="yes" xml:space="preserve">
          <source>Parameters (REST)</source>
          <target state="translated">パラメータ (REST)</target>
        </trans-unit>
        <trans-unit id="bfb863f474ececaea58d7539342f6dd7cf017e42" translate="yes" xml:space="preserve">
          <source>Parameters (WebDriverIO)</source>
          <target state="translated">パラメータ(WebDriverIO</target>
        </trans-unit>
        <trans-unit id="7a5c99c0ce501cd2ffbc95997b1adb1366b6726c" translate="yes" xml:space="preserve">
          <source>Pass &lt;code&gt;--steps&lt;/code&gt; or &lt;code&gt;--debug&lt;/code&gt; option as in &lt;code&gt;run&lt;/code&gt; command to also get steps and substeps to be printed. In this mode &lt;strong&gt;tests will be executed&lt;/strong&gt; but all helpers and plugins disabled, so no real actions will be performed.</source>
          <target state="translated">パスは &lt;code&gt;--steps&lt;/code&gt; または &lt;code&gt;--debug&lt;/code&gt; のようにオプションを &lt;code&gt;run&lt;/code&gt; も、印刷するステップとサブステップを取得するためのコマンド。このモードでは、&lt;strong&gt;テストは実行されます&lt;/strong&gt;が、すべてのヘルパーとプラグインが無効になるため、実際のアクションは実行されません。</target>
        </trans-unit>
        <trans-unit id="2a65d52afa5ed2a236bee922d2a7f6a607e5c3c9" translate="yes" xml:space="preserve">
          <source>Pass a function to &lt;code&gt;when&lt;/code&gt; option to retry only when error matches the expected one.</source>
          <target state="translated">エラーが予期されるものと一致する場合にのみ再試行 &lt;code&gt;when&lt;/code&gt; オプションをwhenオプションに渡します。</target>
        </trans-unit>
        <trans-unit id="7caa414a3500d57d299b2b75de079d8e928336f3" translate="yes" xml:space="preserve">
          <source>Pass a function to the &lt;code&gt;when&lt;/code&gt; option to retry only when an error matches the expected one.</source>
          <target state="translated">エラーが予想されるエラーと一致する場合にのみ再試行する関数を &lt;code&gt;when&lt;/code&gt; オプションに渡します。</target>
        </trans-unit>
        <trans-unit id="fa2b1d21f91d8f6e5c3313c0ce4a3427aa65feae" translate="yes" xml:space="preserve">
          <source>Passing Options</source>
          <target state="translated">パスのオプション</target>
        </trans-unit>
        <trans-unit id="718c85377eaef04d2bd92a0f340ce63dcf66cf93" translate="yes" xml:space="preserve">
          <source>Passing a function will enable you to provide your own chunking algorithm. The first argument passed to you function is an array of all test files, if you enabled grep the test files passed are already filtered to match the grep pattern.</source>
          <target state="translated">関数を渡すことで、独自のチャンキングアルゴリズムを提供することができます。関数に渡される最初の引数は、すべてのテストファイルの配列です。</target>
        </trans-unit>
        <trans-unit id="781961bc81c25697841ecce5d4d9dad9f6b261c6" translate="yes" xml:space="preserve">
          <source>Pause</source>
          <target state="translated">Pause</target>
        </trans-unit>
        <trans-unit id="14517935971dca69a9fb78f381ca48fcf107b113" translate="yes" xml:space="preserve">
          <source>Pause on Fail</source>
          <target state="translated">フェールで一時停止</target>
        </trans-unit>
        <trans-unit id="c8a4a55c6863045818ee0d0c0d7101f958d533a7" translate="yes" xml:space="preserve">
          <source>Pauses execution for a number of seconds.</source>
          <target state="translated">秒間、実行を一時停止します。</target>
        </trans-unit>
        <trans-unit id="9facce987399d558ed7206c62e42b770ec17ecb6" translate="yes" xml:space="preserve">
          <source>Perform a click on a link or a button, given by a locator. If a fuzzy locator is given, the page will be searched for a button, link, or image matching the locator string. For buttons, the &quot;value&quot; attribute, &quot;name&quot; attribute, and inner text are searched. For links, the link text is searched. For images, the &quot;alt&quot; attribute and inner text of any parent links are searched.</source>
          <target state="translated">ロケータによって与えられたリンクやボタンのクリックを実行します。ファジーなロケータが与えられた場合、ロケータ文字列にマッチするボタン、リンク、画像がページ内で検索されます。ボタンの場合は、&quot;value &quot;属性、&quot;name &quot;属性、および内部テキストが検索されます。リンクの場合は、リンクテキストが検索されます。画像の場合は、&quot;alt &quot;属性と親リンクの内部テキストが検索されます。</target>
        </trans-unit>
        <trans-unit id="87f84ef4175df84f873458465879e995f3886b3e" translate="yes" xml:space="preserve">
          <source>Perform a rotation gesture centered on the specified element.</source>
          <target state="translated">指定した要素を中心とした回転ジェスチャーを行います。</target>
        </trans-unit>
        <trans-unit id="79e9652b7d55185576a61e487c8c4311fe4ce68e" translate="yes" xml:space="preserve">
          <source>Perform a shake action on the device.</source>
          <target state="translated">デバイスにシェイクアクションを実行します。</target>
        </trans-unit>
        <trans-unit id="559f2417ff77dc02afaf38f1e1c127a4f2a1e869" translate="yes" xml:space="preserve">
          <source>Perform a swipe down on an element.</source>
          <target state="translated">要素上でスワイプダウンを実行します。</target>
        </trans-unit>
        <trans-unit id="edeb293f5d5fd805e739cb77322fb47b3f331125" translate="yes" xml:space="preserve">
          <source>Perform a swipe in selected direction on an element to searchable element.</source>
          <target state="translated">検索可能な要素に対して、要素上で選択された方向へのスワイプを行います。</target>
        </trans-unit>
        <trans-unit id="a76aa75a792aca56bb48628c779f0f41df58a9af" translate="yes" xml:space="preserve">
          <source>Perform a swipe left on an element.</source>
          <target state="translated">要素上で左スワイプを実行します。</target>
        </trans-unit>
        <trans-unit id="63c1f3262968fc14a71a34055e78cbfa8043ea44" translate="yes" xml:space="preserve">
          <source>Perform a swipe on the screen or an element.</source>
          <target state="translated">画面や要素上でスワイプを行います。</target>
        </trans-unit>
        <trans-unit id="f2ec465ca0b55974fbd85298a1dd7fa9112aa86e" translate="yes" xml:space="preserve">
          <source>Perform a swipe right on an element.</source>
          <target state="translated">要素上で右スワイプを実行します。</target>
        </trans-unit>
        <trans-unit id="a160992b56889c44dd1c9e03465e6b6ad10cc172" translate="yes" xml:space="preserve">
          <source>Perform a swipe up on an element.</source>
          <target state="translated">要素上でスワイプアップを実行します。</target>
        </trans-unit>
        <trans-unit id="6284024204ee568701f5dad6ea282c6ec94042b3" translate="yes" xml:space="preserve">
          <source>Perform an emulated click on a link or a button, given by a locator. Unlike normal click instead of sending native event, emulates a click with JavaScript. This works on hidden, animated or inactive elements as well.</source>
          <target state="translated">ロケータから与えられたリンクやボタン上でエミュレートされたクリックを行います。通常のクリックとは異なり、ネイティブイベントを送信するのではなく、JavaScriptでクリックをエミュレートします。これは、非表示、アニメーション、または非アクティブな要素に対しても動作します。</target>
        </trans-unit>
        <trans-unit id="144b3eeab0760346a687a7714385f53a610fadf8" translate="yes" xml:space="preserve">
          <source>Performs a click on a link and waits for navigation before moving on.</source>
          <target state="translated">リンクのクリックを実行し、ナビゲーションを待ってから移動します。</target>
        </trans-unit>
        <trans-unit id="5bb911a54c6c1c71aefd99da70f33a4454172d8a" translate="yes" xml:space="preserve">
          <source>Performs a double-click on an element matched by link|button|label|CSS or XPath. Context can be specified as second parameter to narrow search.</source>
          <target state="translated">link|button|label|CSSまたはXPathでマッチした要素をダブルクリックします。2番目のパラメータとしてコンテキストを指定することで、検索を絞り込むことができます。</target>
        </trans-unit>
        <trans-unit id="ff7c72fa0f10ffb1f7c1dee7f918eb83a6e4bc0a" translate="yes" xml:space="preserve">
          <source>Performs a specific touch action. The action object need to contain the action name, x/y coordinates</source>
          <target state="translated">特定のタッチアクションを実行します。アクションオブジェクトには、アクション名、x/y 座標が必要です。</target>
        </trans-unit>
        <trans-unit id="5d3769c57d5c9c9e0e9915247503e71539e62d73" translate="yes" xml:space="preserve">
          <source>Performs a swipe up inside an element. Can be &lt;code&gt;slow&lt;/code&gt; or &lt;code&gt;fast&lt;/code&gt; swipe.</source>
          <target state="translated">要素内を上にスワイプします。することができ &lt;code&gt;slow&lt;/code&gt; または &lt;code&gt;fast&lt;/code&gt; スワイプ。</target>
        </trans-unit>
        <trans-unit id="9e5bd76063c1a628902f88469d40dac2775cb367" translate="yes" xml:space="preserve">
          <source>Performs click on element with horizontal and vertical offset. An element is located by text, id, accessibility id.</source>
          <target state="translated">水平・垂直方向にオフセットした要素のクリックを行います。要素は、テキスト、id、アクセシビリティIDで配置されます。</target>
        </trans-unit>
        <trans-unit id="ff23b53a4038c7153d4fbe46d5c9036103d8d82f" translate="yes" xml:space="preserve">
          <source>Performs right click on a clickable element matched by semantic locator, CSS or XPath.</source>
          <target state="translated">セマンティック ロケータ、CSS、または XPath でマッチしたクリック可能な要素の右クリックを実行します。</target>
        </trans-unit>
        <trans-unit id="a5a4e2527b40de1f7e660abb9f134a4a9bfb25eb" translate="yes" xml:space="preserve">
          <source>Performs right click on an element matched by CSS or XPath.</source>
          <target state="translated">CSS または XPath でマッチした要素の右クリックを実行します。</target>
        </trans-unit>
        <trans-unit id="d96bd16a71797f41517f572d7de487c399ec5f9f" translate="yes" xml:space="preserve">
          <source>Performs right click on an element matched by CSS or XPath. Appium: support, but in apps works as usual click</source>
          <target state="translated">CSSやXPathでマッチした要素の上で右クリックを実行します。Appium:サポートしていますが、アプリ内では通常のクリックと同じように動作します。</target>
        </trans-unit>
        <trans-unit id="0d81948f5eb794eb6e640218907c89f07d37ac9c" translate="yes" xml:space="preserve">
          <source>Placeholder for ~ locator only test case write once run on both Appium and WebDriver.</source>
          <target state="translated">AppiumとWebDriverの両方で一度だけ実行されるテストケースを書くためのプレースホルダです。</target>
        </trans-unit>
        <trans-unit id="c2115d99c0684aea6ae44b4a649d6b8242e8577a" translate="yes" xml:space="preserve">
          <source>Playwright</source>
          <target state="translated">Playwright</target>
        </trans-unit>
        <trans-unit id="29ffe54163d980747f49fa324c07300ac7ada92a" translate="yes" xml:space="preserve">
          <source>Playwright Example</source>
          <target state="translated">脚本家の例</target>
        </trans-unit>
        <trans-unit id="c4061af985cee05a4087dc1e1b1891814d3145ca" translate="yes" xml:space="preserve">
          <source>Playwright can be added to GitHub Actions using &lt;a href=&quot;https://github.com/microsoft/playwright-github-action&quot;&gt;official action (opens new window)&lt;/a&gt;. Use it before starting CodeceptJS tests to install all dependencies. It is important to run tests in headless mode (&lt;a href=&quot;https://github.com/microsoft/playwright-github-action#run-in-headful-mode&quot;&gt;otherwise you will need to enable xvfb to emulate desktop (opens new window)&lt;/a&gt;).</source>
          <target state="translated">劇作家は、&lt;a href=&quot;https://github.com/microsoft/playwright-github-action&quot;&gt;公式&lt;/a&gt;アクションを使用してGitHubアクションに追加できます（新しいウィンドウが開きます）。CodeceptJSテストを開始する前に使用して、すべての依存関係をインストールします。ヘッドレスモードでテストを実行することが重要です（&lt;a href=&quot;https://github.com/microsoft/playwright-github-action#run-in-headful-mode&quot;&gt;そうでない場合は、xvfbを有効にしてデスクトップをエミュレートする（新しいウィンドウを開く）必要があります&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="440d89e0ddcee56260f2aa3ff4023f7397e5d1ae" translate="yes" xml:space="preserve">
          <source>Playwright can emulate browsers of mobile devices. Instead of paying for expensive devices for mobile tests you can adjust Playwright settings so it could emulate mobile browsers on iPhone, Samsung Galaxy, etc.</source>
          <target state="translated">Playwrightはモバイルデバイスのブラウザをエミュレートすることができます。モバイルテストのために高価なデバイスにお金を払う代わりに、Playwrightの設定を調整して、iPhoneやSamsung Galaxyなどのモバイルブラウザをエミュレートできるようにすることができます。</target>
        </trans-unit>
        <trans-unit id="82b3f30318efbd51abe5cc3e6ac1e7764d437f45" translate="yes" xml:space="preserve">
          <source>Playwright commands are asynchronous so a callback function must be async.</source>
          <target state="translated">プレイライトコマンドは非同期なので、コールバック関数は非同期でなければなりません。</target>
        </trans-unit>
        <trans-unit id="f068e0c8a6c99d1370c501f7a166afe6ba0a1e39" translate="yes" xml:space="preserve">
          <source>Playwright contains a &lt;a href=&quot;https://github.com/Microsoft/playwright/blob/master/src/deviceDescriptors.ts&quot;&gt;list of predefined devices (opens new window)&lt;/a&gt; to emulate, for instance this is how you can enable iPhone 6 emulation for all tests:</source>
          <target state="translated">Playwrightには、エミュレートする&lt;a href=&quot;https://github.com/Microsoft/playwright/blob/master/src/deviceDescriptors.ts&quot;&gt;定義済みデバイスのリストが&lt;/a&gt;含まれています（新しいウィンドウが開きます）。たとえば、これは、すべてのテストでiPhone6エミュレーションを有効にする方法です。</target>
        </trans-unit>
        <trans-unit id="095a86fcebf3d5ac12ec97f685211414806bddfd" translate="yes" xml:space="preserve">
          <source>Playwright is a Node library to automate the &lt;a href=&quot;https://www.chromium.org/Home&quot;&gt;Chromium (opens new window)&lt;/a&gt;, &lt;a href=&quot;https://webkit.org/&quot;&gt;WebKit (opens new window)&lt;/a&gt; and &lt;a href=&quot;https://www.mozilla.org/en-US/firefox/new/&quot;&gt;Firefox (opens new window)&lt;/a&gt; browsers with a single API. It enables &lt;strong&gt;cross-browser&lt;/strong&gt; web automation that is &lt;strong&gt;ever-green&lt;/strong&gt;, &lt;strong&gt;capable&lt;/strong&gt;, &lt;strong&gt;reliable&lt;/strong&gt; and &lt;strong&gt;fast&lt;/strong&gt;.</source>
          <target state="translated">Playwrightは、&lt;a href=&quot;https://www.chromium.org/Home&quot;&gt;Chromium（新しいウィンドウを開く）&lt;/a&gt;、&lt;a href=&quot;https://webkit.org/&quot;&gt;WebKit（新しいウィンドウを開く）&lt;/a&gt;、&lt;a href=&quot;https://www.mozilla.org/en-US/firefox/new/&quot;&gt;Firefox（新しいウィンドウを開く）&lt;/a&gt;ブラウザーを単一のAPIで自動化するノードライブラリです。これにより、&lt;strong&gt;常に環境に配慮し&lt;/strong&gt;、&lt;strong&gt;機能があり&lt;/strong&gt;、&lt;strong&gt;信頼性が高く&lt;/strong&gt;、&lt;strong&gt;高速&lt;/strong&gt;&lt;strong&gt;な&lt;/strong&gt;&lt;strong&gt;クロスブラウザ&lt;/strong&gt;Web自動化が&lt;strong&gt;可能&lt;/strong&gt;になり&lt;strong&gt;ます&lt;/strong&gt;。&lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a40a816cdcc74a7a6f30a6ccf8029295c6b7e929" translate="yes" xml:space="preserve">
          <source>Playwright uses different strategies to detect if a page is loaded. In configuration use &lt;code&gt;waitForNavigation&lt;/code&gt; option for that:</source>
          <target state="translated">Playwrightは、さまざまな戦略を使用して、ページが読み込まれたかどうかを検出します。構成では、そのために &lt;code&gt;waitForNavigation&lt;/code&gt; オプションを使用します。</target>
        </trans-unit>
        <trans-unit id="7a69f2ee221a64874e745647b591f44e5de1bb45" translate="yes" xml:space="preserve">
          <source>Playwright was built similarly to &lt;a href=&quot;https://github.com/puppeteer/puppeteer&quot;&gt;Puppeteer (opens new window)&lt;/a&gt;, using its API and so is very different in usage. However, Playwright has cross browser support with better design for test automaiton.</source>
          <target state="translated">Playwrightは、APIを使用して&lt;a href=&quot;https://github.com/puppeteer/puppeteer&quot;&gt;Puppeteer（新しいウィンドウを開く）&lt;/a&gt;と同様に構築されているため、使用法が大きく異なります。ただし、Playwrightはクロスブラウザをサポートしており、テスト自動化の設計が改善されています。</target>
        </trans-unit>
        <trans-unit id="b8af1f7f372eb839081e3fb32f00ecf6d6fae31f" translate="yes" xml:space="preserve">
          <source>Please look at the respective Factory sections for examples for factory modules and configuration.</source>
          <target state="translated">工場モジュールや設定の例については、各工場のセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="ba2574ae78761d694669c7d80d500eaf0cc6238c" translate="yes" xml:space="preserve">
          <source>Please note that some config changes can't be applied on the fly. For instance, if you set &lt;code&gt;restart: false&lt;/code&gt; in your config and then changing value &lt;code&gt;browser&lt;/code&gt; won't take an effect as browser is already started and won't be closed untill all tests finish.</source>
          <target state="translated">一部の構成変更はその場で適用できないことに注意してください。たとえば、設定で &lt;code&gt;restart: false&lt;/code&gt; を設定した場合、 &lt;code&gt;browser&lt;/code&gt; 値を変更しても効果はありません。ブラウザーが既に起動されており、すべてのテストが完了するまで閉じられないためです。</target>
        </trans-unit>
        <trans-unit id="01a01d53e23884496214e4bb70d0dce2eff29915" translate="yes" xml:space="preserve">
          <source>Please note, &lt;code&gt;I&lt;/code&gt; object can't be used helper class. As &lt;code&gt;I&lt;/code&gt; object delegates its calls to helper classes, you can't make a circular dependency on it. Instead of calling &lt;code&gt;I&lt;/code&gt; inside a helper, you can get access to other helpers by using &lt;code&gt;helpers&lt;/code&gt; property of a helper. This allows you to access any other enabled helper by its name.</source>
          <target state="translated">ノート、してください &lt;code&gt;I&lt;/code&gt; オブジェクトは、使用済みのヘルパークラスにすることはできません。 &lt;code&gt;I&lt;/code&gt; ヘルパークラスに委譲その呼び出しをオブジェクト、あなたはそれに循環依存関係を作ることができません。ヘルパー内で &lt;code&gt;I&lt;/code&gt; を呼び出す代わりに、ヘルパーの &lt;code&gt;helpers&lt;/code&gt; プロパティを使用して、他のヘルパーにアクセスできます。これにより、他の有効なヘルパーにその名前でアクセスできます。</target>
        </trans-unit>
        <trans-unit id="c17ce9ad1f0d339c82d5aca122fc7fd622e122bd" translate="yes" xml:space="preserve">
          <source>Please note, this service can be used with Protractor helper as well!</source>
          <target state="translated">プロトラクターヘルパーでもご利用いただけますので、ご注意ください</target>
        </trans-unit>
        <trans-unit id="d257f5d77ff694f78776e16e6a115707274dead0" translate="yes" xml:space="preserve">
          <source>Please note, you can't run tests by different helpers at once. You can't use some APIs from WebDriverIO and some from Nightmare. You should &lt;strong&gt;pick one helper, as it definses how tests are executed.&lt;/strong&gt; If requirements change it's easy to migrate to another, but don't use few helpers at once. It's just not possible.</source>
          <target state="translated">一度に別のヘルパーによるテストを実行することはできません。WebDriverIOの一部のAPIとNightmareの一部のAPIは使用できません。&lt;strong&gt;テストの実行方法を定義するヘルパーを1つ選択&lt;/strong&gt;する必要&lt;strong&gt;があります。&lt;/strong&gt;要件が変更された場合、別のものに移行するのは簡単ですが、一度に少数のヘルパーを使用しないでください。それは不可能です。</target>
        </trans-unit>
        <trans-unit id="d3c0e2ab52bb04000cae1845651a80939510580b" translate="yes" xml:space="preserve">
          <source>Please notice that instead of &lt;code&gt;I&lt;/code&gt; you should use &lt;code&gt;this&lt;/code&gt; in current context.</source>
          <target state="translated">通知には、代わりにしてくださいという &lt;code&gt;I&lt;/code&gt; 、あなたが使用する必要があり &lt;code&gt;this&lt;/code&gt; 現在のコンテキストで。</target>
        </trans-unit>
        <trans-unit id="1170dc2a574d73da8b7ddddac7a72d98d091dd77" translate="yes" xml:space="preserve">
          <source>Please refer to &lt;a href=&quot;https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities&quot;&gt;Selenium - Proxy Object (opens new window)&lt;/a&gt; for more information.</source>
          <target state="translated">詳細については、&lt;a href=&quot;https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities&quot;&gt;Selenium-プロキシオブジェクト（新しいウィンドウが開きます）&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="ff882284f676d9154cc3d8b7968c8f79179672ff" translate="yes" xml:space="preserve">
          <source>Please refer to &lt;a href=&quot;https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities&quot;&gt;Selenium - Proxy Object&lt;/a&gt; for more information.</source>
          <target state="translated">詳細については、&lt;a href=&quot;https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities&quot;&gt;Selenium-Proxy Object&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="67adb2de81d9870ed69b4291182914d297a25d45" translate="yes" xml:space="preserve">
          <source>Please refer to translated steps inside translation files and send Pull Requests to add missing.</source>
          <target state="translated">翻訳ファイル内の翻訳ステップを参照して、不足している部分を追加するためにプルリクエストを送信してください。</target>
        </trans-unit>
        <trans-unit id="3e785f68f5c6618ddb668cb7c39e9b285f54dce5" translate="yes" xml:space="preserve">
          <source>Please use &lt;code&gt;handleDownloads()&lt;/code&gt; instead.</source>
          <target state="translated">代わりに &lt;code&gt;handleDownloads()&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="e6ad450a04d6f9b1dfec9ffb57e2e63bb268cb79" translate="yes" xml:space="preserve">
          <source>Please use verbose output when reporting issues to GitHub.</source>
          <target state="translated">GitHub に課題を報告する際には、冗長な出力を使用してください。</target>
        </trans-unit>
        <trans-unit id="8c804b65e2bdc4fa1145324216005fdda57ab75e" translate="yes" xml:space="preserve">
          <source>Plugin can register event listeners or hook into promise chain with recorder. See &lt;a href=&quot;https://github.com/Codeception/CodeceptJS/tree/master/lib/helper&quot;&gt;API reference&lt;/a&gt;.</source>
          <target state="translated">プラグインは、イベントリスナーを登録したり、レコーダーを使用してプロミスチェーンにフックしたりできます。参照&lt;a href=&quot;https://github.com/Codeception/CodeceptJS/tree/master/lib/helper&quot;&gt;APIリファレンスを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ab2e26dd8b8868a3969cb3321e0c983c0d9d67d4" translate="yes" xml:space="preserve">
          <source>Plugins</source>
          <target state="translated">Plugins</target>
        </trans-unit>
        <trans-unit id="22fc231c3739697ad94179582e420368a1600253" translate="yes" xml:space="preserve">
          <source>Plugins allow to use CodeceptJS internal API to extend functionality. Use internal event dispatcher, container, output, promise recorder, to create your own reporters, test listeners, etc.</source>
          <target state="translated">プラグインはCodeceptJSの内部APIを利用して機能を拡張することができます。内部イベントディスパッチャ、コンテナ、出力、プロミスレコーダーを使用して、独自のレポーター、テストリスナーなどを作成することができます。</target>
        </trans-unit>
        <trans-unit id="d011986407b1110e57283981ea38a369075023b8" translate="yes" xml:space="preserve">
          <source>Polish</source>
          <target state="translated">Polish</target>
        </trans-unit>
        <trans-unit id="c9f57a34f254e1dcad5bba669d26b474bfefdb7e" translate="yes" xml:space="preserve">
          <source>Popular tool &lt;a href=&quot;https://codecept.io/angular&quot;&gt;Protractor&lt;/a&gt; also uses WebDriver for running end 2 end tests.</source>
          <target state="translated">人気のあるツール&lt;a href=&quot;https://codecept.io/angular&quot;&gt;Protractor&lt;/a&gt;は、エンド2エンドテストの実行にもWebDriverを使用します。</target>
        </trans-unit>
        <trans-unit id="dc0b1def5441c523c17cfc68aaeb97c0350e8aa4" translate="yes" xml:space="preserve">
          <source>Port of selenium server (default : 4444)</source>
          <target state="translated">seleniumサーバのポート(デフォルトは4444)</target>
        </trans-unit>
        <trans-unit id="23882c575954a0789bf02aba9e6dd01f539bc738" translate="yes" xml:space="preserve">
          <source>Portuguese</source>
          <target state="translated">Portuguese</target>
        </trans-unit>
        <trans-unit id="6ba8445a482ccb849c6057fdf9ad31c38a5a1e3e" translate="yes" xml:space="preserve">
          <source>Possible config options:</source>
          <target state="translated">設定可能なオプション。</target>
        </trans-unit>
        <trans-unit id="17b4f51e29002a92fb61db6cff3de3f5c61a9df8" translate="yes" xml:space="preserve">
          <source>Prepares request for axios call</source>
          <target state="translated">アクシオス呼び出しのリクエストを準備します。</target>
        </trans-unit>
        <trans-unit id="7039fbec6d98cbb83c02b32068804d7eba0f9db7" translate="yes" xml:space="preserve">
          <source>Prerequisite</source>
          <target state="translated">Prerequisite</target>
        </trans-unit>
        <trans-unit id="2396dfc80828883a3535e6e1c73ab1ea531cf62d" translate="yes" xml:space="preserve">
          <source>Press &lt;code&gt;ENTER&lt;/code&gt; to resume test execution.</source>
          <target state="translated">&lt;code&gt;ENTER&lt;/code&gt; を押して、テストの実行を再開します。</target>
        </trans-unit>
        <trans-unit id="df85a402cf6db2842892b00a5ef1bdf02db8183a" translate="yes" xml:space="preserve">
          <source>Presses a key in the browser (on a focused element).</source>
          <target state="translated">ブラウザでキーを押す(フォーカスされた要素の上で)。</target>
        </trans-unit>
        <trans-unit id="71fcd0867bdded2df6bcf0afb7d89064b10baaa4" translate="yes" xml:space="preserve">
          <source>Presses a key in the browser and leaves it in a down state.</source>
          <target state="translated">ブラウザのキーを押すとダウン状態になります。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
