<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="spring_boot">
    <body>
      <group id="spring_boot">
        <trans-unit id="afc98e0ccc015d6df0f863d3463366136c81e1d1" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DatabaseClient&lt;/code&gt; bean is auto-configured, and you can &lt;code&gt;@Autowire&lt;/code&gt; it directly into your own beans, as shown in the following example:</source>
          <target state="translated">&lt;code&gt;DatabaseClient&lt;/code&gt; のBeanは自動設定され、あなたができる &lt;code&gt;@Autowire&lt;/code&gt; 次の例に示すように、あなた自身の豆に直接それを：</target>
        </trans-unit>
        <trans-unit id="5b50c3a0ebb5449844eaa7fb7a94b241c52e3758" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DefaultAuthenticationEventPublisher&lt;/code&gt; for publishing authentication events.</source>
          <target state="translated">認証イベントを公開するための &lt;code&gt;DefaultAuthenticationEventPublisher&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ea65e70a215813ebf00501e1246e23e6d8d74852" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;GitProperties&lt;/code&gt; bean is auto-configured if a &lt;code&gt;git.properties&lt;/code&gt; file is available at the root of the classpath. See &quot;&lt;a href=&quot;howto#howto-git-info&quot;&gt;Generate git information&lt;/a&gt;&quot; for more details.</source>
          <target state="translated">A &lt;code&gt;GitProperties&lt;/code&gt; の豆は、自動設定されている場合である &lt;code&gt;git.properties&lt;/code&gt; のファイルは、クラスパスのルートで入手可能です。詳細については、「&lt;a href=&quot;howto#howto-git-info&quot;&gt;git情報の生成&lt;/a&gt;」を参照してください。</target>
        </trans-unit>
        <trans-unit id="28d1a4e5b505d81f950e76c4fd7acd5a1c162a13" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;HealthContributor&lt;/code&gt; can either be a &lt;code&gt;HealthIndicator&lt;/code&gt; or a &lt;code&gt;CompositeHealthContributor&lt;/code&gt;. A &lt;code&gt;HealthIndicator&lt;/code&gt; provides actual health information, including a &lt;code&gt;Status&lt;/code&gt;. A &lt;code&gt;CompositeHealthContributor&lt;/code&gt; provides a composite of other &lt;code&gt;HealthContributors&lt;/code&gt;. Taken together, contributors form a tree structure to represent the overall system health.</source>
          <target state="translated">A &lt;code&gt;HealthContributor&lt;/code&gt; は、いずれかになります &lt;code&gt;HealthIndicator&lt;/code&gt; または &lt;code&gt;CompositeHealthContributor&lt;/code&gt; 。A &lt;code&gt;HealthIndicator&lt;/code&gt; は含めて、実際の健康情報を提供して &lt;code&gt;Status&lt;/code&gt; 。A &lt;code&gt;CompositeHealthContributor&lt;/code&gt; は、他の複合提供 &lt;code&gt;HealthContributors&lt;/code&gt; を。一緒に取られて、貢献者は全体的なシステムの健康を表すためにツリー構造を形成します。</target>
        </trans-unit>
        <trans-unit id="afd9ed01dfbdc3ea88f99a22b65f500b90a047fb" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;RandomValuePropertySource&lt;/code&gt; that has properties only in &lt;code&gt;random.*&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;RandomValuePropertySource&lt;/code&gt; のみでの性質を有する &lt;code&gt;random.*&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="63395dbe23370e7329a1e807d93a3bad07ae97de" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Servlet&lt;/code&gt; can be exposed as an endpoint by implementing a class annotated with &lt;code&gt;@ServletEndpoint&lt;/code&gt; that also implements &lt;code&gt;Supplier&amp;lt;EndpointServlet&amp;gt;&lt;/code&gt;. Servlet endpoints provide deeper integration with the Servlet container but at the expense of portability. They are intended to be used to expose an existing &lt;code&gt;Servlet&lt;/code&gt; as an endpoint. For new endpoints, the &lt;code&gt;@Endpoint&lt;/code&gt; and &lt;code&gt;@WebEndpoint&lt;/code&gt; annotations should be preferred whenever possible.</source>
          <target state="translated">A &lt;code&gt;Servlet&lt;/code&gt; で注釈クラス実装することにより、エンドポイントとして公開することができる &lt;code&gt;@ServletEndpoint&lt;/code&gt; も実装 &lt;code&gt;Supplier&amp;lt;EndpointServlet&amp;gt;&lt;/code&gt; 。サーブレットエンドポイントは、サーブレットコンテナとのより深い統合を提供しますが、移植性が犠牲になります。これらは、既存の &lt;code&gt;Servlet&lt;/code&gt; をエンドポイントとして公開するために使用することを目的としています。新しいエンドポイントの場合、可能な限り &lt;code&gt;@Endpoint&lt;/code&gt; および &lt;code&gt;@WebEndpoint&lt;/code&gt; アノテーションを優先する必要があります。</target>
        </trans-unit>
        <trans-unit id="693d8d32311d70e5702332d2279ddb193277954d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SpringApplication&lt;/code&gt; attempts to create the right type of &lt;code&gt;ApplicationContext&lt;/code&gt; on your behalf. The algorithm used to determine a &lt;code&gt;WebApplicationType&lt;/code&gt; is the following:</source>
          <target state="translated">A &lt;code&gt;SpringApplication&lt;/code&gt; はの右のタイプを作成しようとした &lt;code&gt;ApplicationContext&lt;/code&gt; あなたに代わって。 &lt;code&gt;WebApplicationType&lt;/code&gt; を決定するために使用されるアルゴリズムは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="70fa761136f2c9b94e2063cad13a68cd0aa201d1" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SpringApplication&lt;/code&gt; has &lt;code&gt;ApplicationListeners&lt;/code&gt; and &lt;code&gt;ApplicationContextInitializers&lt;/code&gt; that are used to apply customizations to the context or environment. Spring Boot loads a number of such customizations for use internally from &lt;code&gt;META-INF/spring.factories&lt;/code&gt;. There is more than one way to register additional customizations:</source>
          <target state="translated">A &lt;code&gt;SpringApplication&lt;/code&gt; はあり &lt;code&gt;ApplicationListeners&lt;/code&gt; と &lt;code&gt;ApplicationContextInitializers&lt;/code&gt; 状況や環境にカスタマイズを適用するために使用されています。Spring Bootは、 &lt;code&gt;META-INF/spring.factories&lt;/code&gt; から内部的に使用するためにそのようなカスタマイズの数をロードします。追加のカスタマイズを登録する方法は複数あります。</target>
        </trans-unit>
        <trans-unit id="3baf8af5a8abf66bce0ee446ed4516510188527e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SpringApplication&lt;/code&gt; has bean properties (mainly setters), so you can use its Java API as you create the application to modify its behavior. Alternatively, you can externalize the configuration by setting properties in &lt;code&gt;spring.main.*&lt;/code&gt;. For example, in &lt;code&gt;application.properties&lt;/code&gt;, you might have the following settings:</source>
          <target state="translated">A &lt;code&gt;SpringApplication&lt;/code&gt; は、あなたがその動作を変更するためのアプリケーションを作成すると、あなたがそのJava APIを使用できるように、Beanプロパティ（主にセッター）があります。または、 &lt;code&gt;spring.main.*&lt;/code&gt; プロパティを設定して、構成を外部化することもできます。たとえば、 &lt;code&gt;application.properties&lt;/code&gt; には、次の設定があります。</target>
        </trans-unit>
        <trans-unit id="0ff3ffb7747dce2aea86d29721d0fea6db525725" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ThreadPoolTaskScheduler&lt;/code&gt; can also be auto-configured if need to be associated to scheduled task execution (&lt;code&gt;@EnableScheduling&lt;/code&gt;). The thread pool uses one thread by default and those settings can be fine-tuned using the &lt;code&gt;spring.task.scheduling&lt;/code&gt; namespace.</source>
          <target state="translated">A &lt;code&gt;ThreadPoolTaskScheduler&lt;/code&gt; 必要がスケジュールされたタスクの実行（に関連付けられている場合も、自動設定することができます &lt;code&gt;@EnableScheduling&lt;/code&gt; ）。スレッドプールはデフォルトで1つのスレッドを使用し、これらの設定は &lt;code&gt;spring.task.scheduling&lt;/code&gt; 名前空間を使用して微調整できます。</target>
        </trans-unit>
        <trans-unit id="4b8ca7c74fd58685775b8b174ec8a72af97095ff" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;UserDetailsService&lt;/code&gt; (or &lt;code&gt;ReactiveUserDetailsService&lt;/code&gt; in case of a WebFlux application) bean with in-memory store and a single user with a generated password (see &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/api/org/springframework/boot/autoconfigure/security/SecurityProperties.User.html&quot;&gt;&lt;code&gt;SecurityProperties.User&lt;/code&gt;&lt;/a&gt; for the properties of the user).</source>
          <target state="translated">インメモリストアを備えた &lt;code&gt;UserDetailsService&lt;/code&gt; （またはWebFluxアプリケーションの場合は &lt;code&gt;ReactiveUserDetailsService&lt;/code&gt; ）Beanと、生成されたパスワードを備えた単一のユーザー（ユーザーのプロパティについては、&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/api/org/springframework/boot/autoconfigure/security/SecurityProperties.User.html&quot;&gt; &lt;code&gt;SecurityProperties.User&lt;/code&gt; &lt;/a&gt;を参照してください）。</target>
        </trans-unit>
        <trans-unit id="025e31ba85088979102ce54a194430334f43f921" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ViewResolver&lt;/code&gt; is a core component of Spring MVC, translating view names in &lt;code&gt;@Controller&lt;/code&gt; to actual &lt;code&gt;View&lt;/code&gt; implementations. Note that &lt;code&gt;ViewResolvers&lt;/code&gt; are mainly used in UI applications, rather than REST-style services (a &lt;code&gt;View&lt;/code&gt; is not used to render a &lt;code&gt;@ResponseBody&lt;/code&gt;). There are many implementations of &lt;code&gt;ViewResolver&lt;/code&gt; to choose from, and Spring on its own is not opinionated about which ones you should use. Spring Boot, on the other hand, installs one or two for you, depending on what it finds on the classpath and in the application context. The &lt;code&gt;DispatcherServlet&lt;/code&gt; uses all the resolvers it finds in the application context, trying each one in turn until it gets a result. If you add your own, you have to be aware of the order and in which position your resolver is added.</source>
          <target state="translated">A &lt;code&gt;ViewResolver&lt;/code&gt; はでビュー名を変換、スプリングMVCのコアコンポーネントである &lt;code&gt;@Controller&lt;/code&gt; 実際に &lt;code&gt;View&lt;/code&gt; 実装。 &lt;code&gt;ViewResolvers&lt;/code&gt; は、RESTスタイルのサービスではなく、主にUIアプリケーションで使用されることに注意してください（ &lt;code&gt;View&lt;/code&gt; は &lt;code&gt;@ResponseBody&lt;/code&gt; のレンダリングには使用されません）。選択できる &lt;code&gt;ViewResolver&lt;/code&gt; の実装は多数あり、Spring自体は、どの実装を使用すべきかについては意見が分かれていません。一方、Spring Bootは、クラスパスとアプリケーションコンテキストで検出された内容に応じて、1つまたは2つをインストールします。 &lt;code&gt;DispatcherServlet&lt;/code&gt; アプリケーションコンテキストで見つかったすべてのリゾルバーを使用し、結果が得られるまで各リゾルバーを順番に試行します。独自に追加する場合は、リゾルバーが追加される順序と位置に注意する必要があります。</target>
        </trans-unit>
        <trans-unit id="0a21f13b831fc29041c9099831d3ed0b4c0716e4" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;WebServerInitializedEvent&lt;/code&gt; is sent after the &lt;code&gt;WebServer&lt;/code&gt; is ready. &lt;code&gt;ServletWebServerInitializedEvent&lt;/code&gt; and &lt;code&gt;ReactiveWebServerInitializedEvent&lt;/code&gt; are the servlet and reactive variants respectively.</source>
          <target state="translated">A &lt;code&gt;WebServerInitializedEvent&lt;/code&gt; は、後に送信される &lt;code&gt;WebServer&lt;/code&gt; 準備ができています。 &lt;code&gt;ServletWebServerInitializedEvent&lt;/code&gt; と &lt;code&gt;ReactiveWebServerInitializedEvent&lt;/code&gt; は、それぞれサーブレットとリアクティブバリアントです。</target>
        </trans-unit>
        <trans-unit id="0ff9d6cc591cb4ab917da6efaa9345c77c4f09c2" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;com.github.benmanes.caffeine.cache.Caffeine&lt;/code&gt; bean is defined</source>
          <target state="translated">&lt;code&gt;com.github.benmanes.caffeine.cache.Caffeine&lt;/code&gt; のBeanが定義されています</target>
        </trans-unit>
        <trans-unit id="af27c8f224645c2a506c00119ca2561a8fa512a7" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;com.github.benmanes.caffeine.cache.CaffeineSpec&lt;/code&gt; bean is defined</source>
          <target state="translated">&lt;code&gt;com.github.benmanes.caffeine.cache.CaffeineSpec&lt;/code&gt; のBeanが定義されています</target>
        </trans-unit>
        <trans-unit id="8fb4443fa1084e8f02d635bd7aab1d36c6cc6bc1" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;hazelcast-client.xml&lt;/code&gt; in the working directory or at the root of the classpath.</source>
          <target state="translated">&lt;code&gt;hazelcast-client.xml&lt;/code&gt; の作業ディレクトリにあるか、クラスパスのルートにあります。</target>
        </trans-unit>
        <trans-unit id="b858e477479ffab79868fd5396a2e43e720576a1" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;hazelcast-client.yaml&lt;/code&gt; in the working directory or at the root of the classpath.</source>
          <target state="translated">&lt;code&gt;hazelcast-client.yaml&lt;/code&gt; 作業ディレクトリにあるか、クラスパスのルートにあります。</target>
        </trans-unit>
        <trans-unit id="a073f34c2ddffe116a0803a7f92ffb1d97765c38" translate="yes" xml:space="preserve">
          <source>A Geospatial Messenger with Kotlin, Spring Boot and PostgreSQL</source>
          <target state="translated">Kotlin、Spring Boot、PostgreSQLを使った地理空間メッセンジャー</target>
        </trans-unit>
        <trans-unit id="38fc76946efac28194e0c8bbf558a8abec09a1a5" translate="yes" xml:space="preserve">
          <source>A Spring Boot application can be started as a Windows service by using &lt;a href=&quot;https://github.com/kohsuke/winsw&quot;&gt;&lt;code&gt;winsw&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Spring Bootアプリケーションは、&lt;a href=&quot;https://github.com/kohsuke/winsw&quot;&gt; &lt;code&gt;winsw&lt;/code&gt; &lt;/a&gt;を使用してWindowsサービスとして起動できます。</target>
        </trans-unit>
        <trans-unit id="964b58cf84e2d96fb3eae03f12268decfee802f3" translate="yes" xml:space="preserve">
          <source>A Spring Boot application is a Spring &lt;code&gt;ApplicationContext&lt;/code&gt;, so nothing very special has to be done to test it beyond what you would normally do with a vanilla Spring context.</source>
          <target state="translated">SpringBootアプリケーションは &lt;code&gt;ApplicationContext&lt;/code&gt; であるため、バニラSpringコンテキストで通常行うことを超えてテストするために特別なことを行う必要はありません。</target>
        </trans-unit>
        <trans-unit id="5889409ef42bb6fe0983de391f11d251fd5fae08" translate="yes" xml:space="preserve">
          <source>A cache spec defined by &lt;code&gt;spring.cache.caffeine.spec&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;spring.cache.caffeine.spec&lt;/code&gt; によって定義されたキャッシュ仕様</target>
        </trans-unit>
        <trans-unit id="5f57371a3bf33a4774aad99a540db2b982d792d1" translate="yes" xml:space="preserve">
          <source>A configuration file defined by the &lt;code&gt;spring.hazelcast.config&lt;/code&gt; property.</source>
          <target state="translated">&lt;code&gt;spring.hazelcast.config&lt;/code&gt; プロパティで定義された構成ファイル。</target>
        </trans-unit>
        <trans-unit id="41e9ce16950a8c0525763b0d211713d2016af2c3" translate="yes" xml:space="preserve">
          <source>A controller class to enable timings on every request handler in the controller.</source>
          <target state="translated">コントローラ内のすべてのリクエストハンドラのタイミングを有効にするためのコントローラクラス。</target>
        </trans-unit>
        <trans-unit id="ff0bf4607772ac1dfb44104a7b1074ff025f77f4" translate="yes" xml:space="preserve">
          <source>A custom &lt;code&gt;ChainedKafkaTransactionManager&lt;/code&gt; must be marked &lt;code&gt;@Primary&lt;/code&gt; as it usually references the auto-configured &lt;code&gt;KafkaTransactionManager&lt;/code&gt; bean.</source>
          <target state="translated">カスタム &lt;code&gt;ChainedKafkaTransactionManager&lt;/code&gt; は、通常、自動構成された &lt;code&gt;KafkaTransactionManager&lt;/code&gt; Beanを参照するため、 &lt;code&gt;@Primary&lt;/code&gt; とマークする必要があります。</target>
        </trans-unit>
        <trans-unit id="bb6137b34a062332687edeec0a53506849387560" translate="yes" xml:space="preserve">
          <source>A downside of lazy initialization is that it can delay the discovery of a problem with the application. If a misconfigured bean is initialized lazily, a failure will no longer occur during startup and the problem will only become apparent when the bean is initialized. Care must also be taken to ensure that the JVM has sufficient memory to accommodate all of the application&amp;rsquo;s beans and not just those that are initialized during startup. For these reasons, lazy initialization is not enabled by default and it is recommended that fine-tuning of the JVM&amp;rsquo;s heap size is done before enabling lazy initialization.</source>
          <target state="translated">遅延初期化の欠点は、アプリケーションの問題の発見が遅れる可能性があることです。誤って構成されたBeanが遅延初期化された場合、起動時に障害が発生することはなくなり、問題はBeanが初期化されたときにのみ明らかになります。また、起動時に初期化されるBeanだけでなく、アプリケーションのすべてのBeanを収容するのに十分なメモリがJVMにあることを確認するように注意する必要があります。これらの理由により、レイジー初期化はデフォルトでは有効になっておらず、レイジー初期化を有効にする前に、JVMのヒープサイズの微調整を行うことをお勧めします。</target>
        </trans-unit>
        <trans-unit id="daac783037d19c69c33088b77ff3060337c9c8cd" translate="yes" xml:space="preserve">
          <source>A few test utility classes that are generally useful when testing your application are packaged as part of &lt;code&gt;spring-boot&lt;/code&gt;.</source>
          <target state="translated">アプリケーションをテストするときに一般的に役立ついくつかのテストユーティリティクラスは、 &lt;code&gt;spring-boot&lt;/code&gt; の一部としてパッケージ化されています。</target>
        </trans-unit>
        <trans-unit id="5f726fb1c798d61ff7b0ea8605435c045bf512c7" translate="yes" xml:space="preserve">
          <source>A list of providers as defined by the &lt;code&gt;ValueProvider&lt;/code&gt; object (described later in this document). Each entry defines the name of the provider and its parameters, if any.</source>
          <target state="translated">&lt;code&gt;ValueProvider&lt;/code&gt; オブジェクト（このドキュメントで後述）によって定義されたプロバイダーのリスト。各エントリは、プロバイダーの名前とそのパラメーター（存在する場合）を定義します。</target>
        </trans-unit>
        <trans-unit id="199d89b08e07989d7c159363551421feab76465f" translate="yes" xml:space="preserve">
          <source>A list of the auto-configuration settings that are enabled by &lt;code&gt;@DataCassandraTest&lt;/code&gt; can be &lt;a href=&quot;appendix-test-auto-configuration#test-auto-configuration&quot;&gt;found in the appendix&lt;/a&gt;.</source>
          <target state="translated">で有効になっている自動構成設定のリスト &lt;code&gt;@DataCassandraTest&lt;/code&gt; ができ&lt;a href=&quot;appendix-test-auto-configuration#test-auto-configuration&quot;&gt;付録で見つかりました&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="7a4a4d3aacaaf04788b158d060663faf8c259de5" translate="yes" xml:space="preserve">
          <source>A list of the auto-configuration settings that are enabled by &lt;code&gt;@DataJpaTest&lt;/code&gt; can be &lt;a href=&quot;appendix-test-auto-configuration#test-auto-configuration&quot;&gt;found in the appendix&lt;/a&gt;.</source>
          <target state="translated">で有効になっている自動構成設定のリスト &lt;code&gt;@DataJpaTest&lt;/code&gt; ができ&lt;a href=&quot;appendix-test-auto-configuration#test-auto-configuration&quot;&gt;付録で見つかりました&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="527fc23f73aa702e2210e32dbc618e1132898bb4" translate="yes" xml:space="preserve">
          <source>A list of the auto-configuration settings that are enabled by &lt;code&gt;@DataLdapTest&lt;/code&gt; can be &lt;a href=&quot;appendix-test-auto-configuration#test-auto-configuration&quot;&gt;found in the appendix&lt;/a&gt;.</source>
          <target state="translated">で有効になっている自動構成設定のリスト &lt;code&gt;@DataLdapTest&lt;/code&gt; ができ&lt;a href=&quot;appendix-test-auto-configuration#test-auto-configuration&quot;&gt;付録で見つかりました&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="347489d34cc6aca9259c4082fc3302bbbfa86157" translate="yes" xml:space="preserve">
          <source>A list of the auto-configuration settings that are enabled by &lt;code&gt;@DataMongoTest&lt;/code&gt; can be &lt;a href=&quot;appendix-test-auto-configuration#test-auto-configuration&quot;&gt;found in the appendix&lt;/a&gt;.</source>
          <target state="translated">で有効になっている自動構成設定のリスト &lt;code&gt;@DataMongoTest&lt;/code&gt; ができ&lt;a href=&quot;appendix-test-auto-configuration#test-auto-configuration&quot;&gt;付録で見つかりました&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="43f1807649589058989d3ae26dd87315278aee5e" translate="yes" xml:space="preserve">
          <source>A list of the auto-configuration settings that are enabled by &lt;code&gt;@DataNeo4jTest&lt;/code&gt; can be &lt;a href=&quot;appendix-test-auto-configuration#test-auto-configuration&quot;&gt;found in the appendix&lt;/a&gt;.</source>
          <target state="translated">で有効になっている自動構成設定のリスト &lt;code&gt;@DataNeo4jTest&lt;/code&gt; することができ&lt;a href=&quot;appendix-test-auto-configuration#test-auto-configuration&quot;&gt;付録で見つかりました&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="88eb8c8df9838ceb90d1f06419068957291cbea7" translate="yes" xml:space="preserve">
          <source>A list of the auto-configuration settings that are enabled by &lt;code&gt;@DataRedisTest&lt;/code&gt; can be &lt;a href=&quot;appendix-test-auto-configuration#test-auto-configuration&quot;&gt;found in the appendix&lt;/a&gt;.</source>
          <target state="translated">で有効になっている自動構成設定のリスト &lt;code&gt;@DataRedisTest&lt;/code&gt; ができ&lt;a href=&quot;appendix-test-auto-configuration#test-auto-configuration&quot;&gt;付録で見つかりました&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ea56934bd0306e1f3eca5221014c33acdb191bcc" translate="yes" xml:space="preserve">
          <source>A list of the auto-configuration settings that are enabled by &lt;code&gt;@RestClientTest&lt;/code&gt; can be &lt;a href=&quot;appendix-test-auto-configuration#test-auto-configuration&quot;&gt;found in the appendix&lt;/a&gt;.</source>
          <target state="translated">で有効になっている自動構成設定のリスト &lt;code&gt;@RestClientTest&lt;/code&gt; ができ&lt;a href=&quot;appendix-test-auto-configuration#test-auto-configuration&quot;&gt;付録で見つかりました&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f53606e691924e687d085302b8785f3d9999e078" translate="yes" xml:space="preserve">
          <source>A list of the auto-configuration settings that are enabled by &lt;code&gt;@WebMvcTest&lt;/code&gt; can be &lt;a href=&quot;appendix-test-auto-configuration#test-auto-configuration&quot;&gt;found in the appendix&lt;/a&gt;.</source>
          <target state="translated">で有効になっている自動構成設定のリスト &lt;code&gt;@WebMvcTest&lt;/code&gt; ができ&lt;a href=&quot;appendix-test-auto-configuration#test-auto-configuration&quot;&gt;付録で見つかりました&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5dd4d3750e61f56d6a28fdcd77745c3a0605bfbb" translate="yes" xml:space="preserve">
          <source>A list of the auto-configuration settings that are enabled by &lt;code&gt;@WebServiceClientTest&lt;/code&gt; can be &lt;a href=&quot;appendix-test-auto-configuration#test-auto-configuration&quot;&gt;found in the appendix&lt;/a&gt;.</source>
          <target state="translated">で有効になっている自動構成設定のリスト &lt;code&gt;@WebServiceClientTest&lt;/code&gt; ができ&lt;a href=&quot;appendix-test-auto-configuration#test-auto-configuration&quot;&gt;付録で見つかりました&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="eca198d8e8bd2587277e7f41e7b0850f334575ae" translate="yes" xml:space="preserve">
          <source>A list of the auto-configurations that are enabled by &lt;code&gt;@DataJdbcTest&lt;/code&gt; can be &lt;a href=&quot;appendix-test-auto-configuration#test-auto-configuration&quot;&gt;found in the appendix&lt;/a&gt;.</source>
          <target state="translated">で有効になっている自動構成のリスト &lt;code&gt;@DataJdbcTest&lt;/code&gt; ができ&lt;a href=&quot;appendix-test-auto-configuration#test-auto-configuration&quot;&gt;付録で見つかりました&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="704d9e22351d03ba5a1bc009b0cf961006808536" translate="yes" xml:space="preserve">
          <source>A list of the auto-configurations that are enabled by &lt;code&gt;@JdbcTest&lt;/code&gt; can be &lt;a href=&quot;appendix-test-auto-configuration#test-auto-configuration&quot;&gt;found in the appendix&lt;/a&gt;.</source>
          <target state="translated">で有効になっている自動構成のリスト &lt;code&gt;@JdbcTest&lt;/code&gt; ができ&lt;a href=&quot;appendix-test-auto-configuration#test-auto-configuration&quot;&gt;付録で見つかりました&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2b391bdc2de0e485269a1e87e507edc054d75995" translate="yes" xml:space="preserve">
          <source>A list of the auto-configurations that are enabled by &lt;code&gt;@JooqTest&lt;/code&gt; can be &lt;a href=&quot;appendix-test-auto-configuration#test-auto-configuration&quot;&gt;found in the appendix&lt;/a&gt;.</source>
          <target state="translated">で有効になっている自動構成のリスト &lt;code&gt;@JooqTest&lt;/code&gt; ができ&lt;a href=&quot;appendix-test-auto-configuration#test-auto-configuration&quot;&gt;付録で見つかりました&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="50568a035f76bff02e2a942f9b087af66b728117" translate="yes" xml:space="preserve">
          <source>A list of the auto-configurations that are enabled by &lt;code&gt;@JsonTest&lt;/code&gt; can be &lt;a href=&quot;appendix-test-auto-configuration#test-auto-configuration&quot;&gt;found in the appendix&lt;/a&gt;.</source>
          <target state="translated">で有効になっている自動構成のリスト &lt;code&gt;@JsonTest&lt;/code&gt; ができ&lt;a href=&quot;appendix-test-auto-configuration#test-auto-configuration&quot;&gt;付録で見つかりました&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3fb61fb1d4964bcb25d5aae01e75b2fb1b396f5e" translate="yes" xml:space="preserve">
          <source>A list of the auto-configurations that are enabled by &lt;code&gt;@WebFluxTest&lt;/code&gt; can be &lt;a href=&quot;appendix-test-auto-configuration#test-auto-configuration&quot;&gt;found in the appendix&lt;/a&gt;.</source>
          <target state="translated">で有効になっている自動構成のリスト &lt;code&gt;@WebFluxTest&lt;/code&gt; ができ&lt;a href=&quot;appendix-test-auto-configuration#test-auto-configuration&quot;&gt;付録で見つかりました&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d9db06c977a53f2bc880eec4a207de30d292e4a9" translate="yes" xml:space="preserve">
          <source>A list of valid values as defined by the &lt;code&gt;ValueHint&lt;/code&gt; object (described in the next table). Each entry defines the value and may have a description.</source>
          <target state="translated">&lt;code&gt;ValueHint&lt;/code&gt; オブジェクト（次の表で説明）によって定義された有効な値のリスト。各エントリは値を定義し、説明がある場合があります。</target>
        </trans-unit>
        <trans-unit id="179a7351523136bdbad08f8b8c88e6ac9297079b" translate="yes" xml:space="preserve">
          <source>A method to enable for an individual endpoint. This is not necessary if you have it on the class, but can be used to further customize the timer for this particular endpoint.</source>
          <target state="translated">個々のエンドポイントに対して有効にするメソッド。これは、クラス上にある場合は必要ありませんが、この特定のエンドポイントのタイマーをさらにカスタマイズするために使用することができます。</target>
        </trans-unit>
        <trans-unit id="12d6050f63f371b61347b5d1baa012708eeba490" translate="yes" xml:space="preserve">
          <source>A method with &lt;code&gt;longTask = true&lt;/code&gt; to enable a long task timer for the method. Long task timers require a separate metric name, and can be stacked with a short task timer.</source>
          <target state="translated">方法 &lt;code&gt;longTask = true&lt;/code&gt; メソッドの長いタスクタイマーをイネーブルにします。長いタスクタイマーには個別のメトリック名が必要であり、短いタスクタイマーとスタックできます。</target>
        </trans-unit>
        <trans-unit id="5740bfc3ca839ec4d566d531412402393094df9c" translate="yes" xml:space="preserve">
          <source>A more readable format where the value and the unit are coupled (e.g. &lt;code&gt;10MB&lt;/code&gt; means 10 megabytes)</source>
          <target state="translated">値と単位が結合された、より読みやすい形式（たとえば、 &lt;code&gt;10MB&lt;/code&gt; は10メガバイトを意味します）</target>
        </trans-unit>
        <trans-unit id="57ae906cb1c8921f803ef1e63f001ae057598cae" translate="yes" xml:space="preserve">
          <source>A more readable format where the value and the unit are coupled (e.g. &lt;code&gt;10s&lt;/code&gt; means 10 seconds)</source>
          <target state="translated">値と単位が結合されている、より読みやすい形式（たとえば、 &lt;code&gt;10s&lt;/code&gt; は10秒を意味します）</target>
        </trans-unit>
        <trans-unit id="5ae81030e9e23db7142e6f35cb10be1192a2a768" translate="yes" xml:space="preserve">
          <source>A number of questions often arise when people use Spring Batch from within a Spring Boot application. This section addresses those questions.</source>
          <target state="translated">Spring Bootアプリケーション内からSpring Batchを使用する際には、多くの質問がよく出てきます。このセクションではそれらの質問に対応します。</target>
        </trans-unit>
        <trans-unit id="10f8247fdc64626d234c2e418669456b873d2fd8" translate="yes" xml:space="preserve">
          <source>A profile expression that must match for the document to be active.</source>
          <target state="translated">ドキュメントをアクティブにするためにマッチしなければならないプロファイル式。</target>
        </trans-unit>
        <trans-unit id="ddf7d388adb608604e7a12ffcfb3c1f2ce50aa3f" translate="yes" xml:space="preserve">
          <source>A regular &lt;code&gt;long&lt;/code&gt; representation (using bytes as the default unit unless a &lt;code&gt;@DataSizeUnit&lt;/code&gt; has been specified)</source>
          <target state="translated">通常の &lt;code&gt;long&lt;/code&gt; 表現（ &lt;code&gt;@DataSizeUnit&lt;/code&gt; が指定されていない限り、デフォルトの単位としてバイトを使用）</target>
        </trans-unit>
        <trans-unit id="f24335210c1d220b6e9cb1f1d93e8b35be236271" translate="yes" xml:space="preserve">
          <source>A regular &lt;code&gt;long&lt;/code&gt; representation (using milliseconds as the default unit unless a &lt;code&gt;@DurationUnit&lt;/code&gt; has been specified)</source>
          <target state="translated">通常の &lt;code&gt;long&lt;/code&gt; 表現（ &lt;code&gt;@DurationUnit&lt;/code&gt; が指定されていない限り、デフォルトの単位としてミリ秒を使用）</target>
        </trans-unit>
        <trans-unit id="67078ea03b27576a4e04f7add3643572c7deacce" translate="yes" xml:space="preserve">
          <source>A relying party registration represents a paired configuration between an Identity Provider, IDP, and a Service Provider, SP. You can register multiple relying parties under the &lt;code&gt;spring.security.saml2.relyingparty&lt;/code&gt; prefix, as shown in the following example:</source>
          <target state="translated">証明書利用者登録は、IDプロバイダー（IDP）とサービスプロバイダー（SP）の間のペア構成を表します。次の例に示すように、 &lt;code&gt;spring.security.saml2.relyingparty&lt;/code&gt; プレフィックスで複数の証明書利用者を登録できます。</target>
        </trans-unit>
        <trans-unit id="0df9ef96a67f6f7c0b139a6f8f82cc056ca179a3" translate="yes" xml:space="preserve">
          <source>A request predicate is automatically generated for each operation on a web-exposed endpoint.</source>
          <target state="translated">ウェブ公開されたエンドポイントでの操作ごとに、リクエスト述語が自動的に生成されます。</target>
        </trans-unit>
        <trans-unit id="6501030c11eac956717450e8e09ab9bfc250a598" translate="yes" xml:space="preserve">
          <source>A running application with the Actuator features has a &lt;code&gt;configprops&lt;/code&gt; endpoint that shows all the bound and bindable properties available through &lt;code&gt;@ConfigurationProperties&lt;/code&gt;.</source>
          <target state="translated">アクチュエータが特徴で実行中のアプリケーションがあり &lt;code&gt;configprops&lt;/code&gt; を経由することを示しているすべての結合およびバインド可能プロパティが利用できるエンドポイント &lt;code&gt;@ConfigurationProperties&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d4a35e690d0201c2879e6af79c7fbfc2ea1d6d4c" translate="yes" xml:space="preserve">
          <source>A running remote client might resemble the following listing:</source>
          <target state="translated">実行中のリモートクライアントは、以下のリストのようになるかもしれません。</target>
        </trans-unit>
        <trans-unit id="266a6b8af97388db43502b230a99fb3c59a87ebb" translate="yes" xml:space="preserve">
          <source>A shared secret required to establish a connection (required to enable remote support).</source>
          <target state="translated">接続を確立するために必要な共有秘密(リモートサポートを有効にするために必要)。</target>
        </trans-unit>
        <trans-unit id="b58dc63c7fa36a6a4b55c23ec4b06be31fc7c17c" translate="yes" xml:space="preserve">
          <source>A short description of the group that can be displayed to users. If no description is available, it may be omitted. It is recommended that descriptions be short paragraphs, with the first line providing a concise summary. The last line in the description should end with a period (&lt;code&gt;.&lt;/code&gt;).</source>
          <target state="translated">ユーザーに表示できるグループの簡単な説明。説明がない場合は省略できます。説明は短い段落にすることをお勧めします。最初の行は簡潔な要約を提供します。説明の最後の行はピリオド（ &lt;code&gt;.&lt;/code&gt; ）で終わる必要があります。</target>
        </trans-unit>
        <trans-unit id="9727bdf3ad0ddb7544e0d6a7fbc789990dd22846" translate="yes" xml:space="preserve">
          <source>A short description of the property that can be displayed to users. If no description is available, it may be omitted. It is recommended that descriptions be short paragraphs, with the first line providing a concise summary. The last line in the description should end with a period (&lt;code&gt;.&lt;/code&gt;).</source>
          <target state="translated">ユーザーに表示できるプロパティの簡単な説明。説明がない場合は省略できます。説明は短い段落にすることをお勧めします。最初の行は簡潔な要約を提供します。説明の最後の行はピリオド（ &lt;code&gt;.&lt;/code&gt; ）で終わる必要があります。</target>
        </trans-unit>
        <trans-unit id="1dfb369585789fa5597de628b974c8338307e49e" translate="yes" xml:space="preserve">
          <source>A short description of the reason why the property was deprecated. If no reason is available, it may be omitted. It is recommended that descriptions be short paragraphs, with the first line providing a concise summary. The last line in the description should end with a period (&lt;code&gt;.&lt;/code&gt;).</source>
          <target state="translated">プロパティが非推奨になった理由の簡単な説明。理由がない場合は省略できます。説明は短い段落にすることをお勧めします。最初の行は簡潔な要約を提供します。説明の最後の行はピリオド（ &lt;code&gt;.&lt;/code&gt; ）で終わる必要があります。</target>
        </trans-unit>
        <trans-unit id="3499d52e627fdb211b940ea0b9098fd7a39ee0aa" translate="yes" xml:space="preserve">
          <source>A short description of the value that can be displayed to users. If no description is available, it may be omitted. It is recommended that descriptions be short paragraphs, with the first line providing a concise summary. The last line in the description should end with a period (&lt;code&gt;.&lt;/code&gt;).</source>
          <target state="translated">ユーザーに表示できる値の簡単な説明。説明がない場合は省略できます。説明は短い段落にすることをお勧めします。最初の行は簡潔な要約を提供します。説明の最後の行はピリオド（ &lt;code&gt;.&lt;/code&gt; ）で終わる必要があります。</target>
        </trans-unit>
        <trans-unit id="bb264f9ba0042a79d004ab753d79fd204da9ad0e" translate="yes" xml:space="preserve">
          <source>A simpler format where the value and the unit pairs are coupled (e.g. &lt;code&gt;1y3d&lt;/code&gt; means 1 year and 3 days)</source>
          <target state="translated">値と単位のペアが結合されているより単純な形式（たとえば、 &lt;code&gt;1y3d&lt;/code&gt; は1年と3日を意味します）</target>
        </trans-unit>
        <trans-unit id="5e2658537d0b49b128d34b3f23b99a5adb49e53b" translate="yes" xml:space="preserve">
          <source>A single file contains a complete set of properties (usually written as YAML).</source>
          <target state="translated">1つのファイルには、プロパティの完全なセットが含まれています(通常はYAMLとして書かれています)。</target>
        </trans-unit>
        <trans-unit id="2e330fb1be7347875da1709b840ab75b03128b54" translate="yes" xml:space="preserve">
          <source>A slice or &lt;code&gt;@AutoConfigure&amp;hellip;​&lt;/code&gt; annotation can be customized this way as long as it is meta-annotated with &lt;code&gt;@ImportAutoConfiguration&lt;/code&gt;.</source>
          <target state="translated">スライスまたは &lt;code&gt;@AutoConfigure&amp;hellip;​&lt;/code&gt; 注釈があれば、メタ・アノテーションであるとして、この方法をカスタマイズすることができ &lt;code&gt;@ImportAutoConfiguration&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b1715dd2ebdb8b91054242dd0cfaab2e0c9b56c1" translate="yes" xml:space="preserve">
          <source>A typical &lt;code&gt;build.xml&lt;/code&gt; looks like the following example:</source>
          <target state="translated">典型的な &lt;code&gt;build.xml&lt;/code&gt; は次の例のようになります。</target>
        </trans-unit>
        <trans-unit id="54ab25e3e2d2f74a7a4818f5b3bcaaefebb6535a" translate="yes" xml:space="preserve">
          <source>A typical Spring Boot fat jar can be converted into a Docker image by adding just a few lines to a Dockerfile that can be used to build the image. However, there are various downsides to copying and running the fat jar as is in the docker image. There&amp;rsquo;s always a certain amount of overhead when running a fat jar without unpacking it, and in a containerized environment this can be noticeable. The other issue is that putting your application&amp;rsquo;s code and all its dependencies in one layer in the Docker image is sub-optimal. Since you probably recompile your code more often than you upgrade the version of Spring Boot you use, it&amp;rsquo;s often better to separate things a bit more. If you put jar files in the layer before your application classes, Docker often only needs to change the very bottom layer and can pick others up from its cache.</source>
          <target state="translated">典型的なSpringBootファットjarは、イメージのビルドに使用できるDockerfileに数行を追加するだけで、Dockerイメージに変換できます。ただし、Dockerイメージのように、ファットjarをコピーして実行することにはさまざまな欠点があります。ファットジャーを解凍せずに実行すると、常にある程度のオーバーヘッドが発生します。コンテナー化された環境では、これが顕著になる可能性があります。もう1つの問題は、アプリケーションのコードとそのすべての依存関係をDockerイメージの1つのレイヤーに配置することが最適ではないことです。使用するSpringBootのバージョンをアップグレードするよりも頻繁にコードを再コンパイルする可能性があるため、多くの場合、物事をもう少し分離する方がよいでしょう。アプリケーションクラスの前のレイヤーにjarファイルを配置すると、Dockerは多くの場合、最下層を変更するだけで、キャッシュから他のレイヤーを取得できます。</target>
        </trans-unit>
        <trans-unit id="ae17b180de694ac10ad3d5de0b2ac64cc6559ba8" translate="yes" xml:space="preserve">
          <source>A typical Spring Boot starter contains code to auto-configure and customize the infrastructure of a given technology, let&amp;rsquo;s call that &quot;acme&quot;. To make it easily extensible, a number of configuration keys in a dedicated namespace can be exposed to the environment. Finally, a single &quot;starter&quot; dependency is provided to help users get started as easily as possible.</source>
          <target state="translated">典型的なSpringBootスターターには、特定のテクノロジーのインフラストラクチャを自動構成およびカスタマイズするためのコードが含まれています。これを「acme」と呼びましょう。簡単に拡張できるようにするために、専用の名前空間内の多数の構成キーを環境に公開できます。最後に、ユーザーができるだけ簡単に開始できるように、単一の「スターター」依存関係が提供されます。</target>
        </trans-unit>
        <trans-unit id="11199f67bb0ca1a681eacd4b98e63d1335965ea6" translate="yes" xml:space="preserve">
          <source>A typical Spring Security configuration might look something like the following example:</source>
          <target state="translated">典型的なSpring Securityの設定は以下のようなものです。</target>
        </trans-unit>
        <trans-unit id="d5b08696a5be3af1ed9758fdf71a9729aab0a1a7" translate="yes" xml:space="preserve">
          <source>A typical custom &lt;code&gt;logback.xml&lt;/code&gt; file would look something like this:</source>
          <target state="translated">典型的なカスタム &lt;code&gt;logback.xml&lt;/code&gt; ファイルは次のようになります。</target>
        </trans-unit>
        <trans-unit id="649cbd6e9677d85995620831ffbb3cb27a1dde01" translate="yes" xml:space="preserve">
          <source>A typical example of a layers index would be:</source>
          <target state="translated">レイヤーインデックスの典型的な例は次のようになります。</target>
        </trans-unit>
        <trans-unit id="d1623b709cd2465d31d5ba7b4c54461e7e6b372a" translate="yes" xml:space="preserve">
          <source>A typical initializer for WebLogic should resemble the following example:</source>
          <target state="translated">WebLogic の典型的なイニシャライザは、以下の例に似ているはずです。</target>
        </trans-unit>
        <trans-unit id="891f93c1499c33a5c20cf0854c37442e4dd472d5" translate="yes" xml:space="preserve">
          <source>A valid value for the element to which the hint refers. If the type of the property is an array, it can also be an array of value(s). This attribute is mandatory.</source>
          <target state="translated">ヒントが参照する要素の有効な値。プロパティの型が配列の場合は、値の配列にすることもできます。この属性は必須です。</target>
        </trans-unit>
        <trans-unit id="e764e5d60584f18d625b565a598d06ec95e23145" translate="yes" xml:space="preserve">
          <source>A value set this way is replaced by the System property or environment variable setting but not by the &lt;code&gt;SpringApplicationBuilder.profiles()&lt;/code&gt; method. Thus, the latter Java API can be used to augment the profiles without changing the defaults.</source>
          <target state="translated">この方法で設定された値は、Systemプロパティまたは環境変数の設定に置き換えられますが、 &lt;code&gt;SpringApplicationBuilder.profiles()&lt;/code&gt; メソッドには置き換えられません。したがって、後者のJava APIを使用すると、デフォルトを変更せずにプロファイルを拡張できます。</target>
        </trans-unit>
        <trans-unit id="8d49c039ee59dc5f1f77e1d92c69bf09e2fdfdb5" translate="yes" xml:space="preserve">
          <source>A wildcard location must contain only one &lt;code&gt;*&lt;/code&gt; and end with &lt;code&gt;*/&lt;/code&gt; for search locations that are directories or &lt;code&gt;*/&amp;lt;filename&amp;gt;&lt;/code&gt; for search locations that are files. Locations with wildcards are sorted alphabetically based on the absolute path of the file names.</source>
          <target state="translated">ワイルドカードの場所には、 &lt;code&gt;*&lt;/code&gt; が1つだけ含まれ、ディレクトリである検索場所の場合は &lt;code&gt;*/&lt;/code&gt; で終わり、 &lt;code&gt;*/&amp;lt;filename&amp;gt;&lt;/code&gt; である検索場所の場合は* / &amp;lt;filename&amp;gt;で終わる必要があります。ワイルドカードを使用した場所は、ファイル名の絶対パスに基づいてアルファベット順に並べ替えられます。</target>
        </trans-unit>
        <trans-unit id="12230f84d345103bbf4c6305c8a61726b85f3ff3" translate="yes" xml:space="preserve">
          <source>A zip64-format jar file cannot be made fully executable. Attempting to do so will result in a jar file that is reported as corrupt when executed directly or with &lt;code&gt;java -jar&lt;/code&gt;. A standard-format jar file that contains one or more zip64-format nested jars can be fully executable.</source>
          <target state="translated">zip64形式のjarファイルを完全に実行可能にすることはできません。そうしようとすると、直接または &lt;code&gt;java -jar&lt;/code&gt; を使用して実行すると、jarファイルが破損していると報告されます。1つ以上のzip64形式のネストされたjarを含む標準形式のjarファイルは、完全に実行可能です。</target>
        </trans-unit>
        <trans-unit id="d93d10ff0fbef1b4aa0ddc24e10e907746d3c85a" translate="yes" xml:space="preserve">
          <source>API</source>
          <target state="translated">API</target>
        </trans-unit>
        <trans-unit id="9eb27f67653442638718045025f489179462df8c" translate="yes" xml:space="preserve">
          <source>API token used when publishing metrics directly to the Wavefront API host.</source>
          <target state="translated">Wavefront APIホストに直接メトリクスを公開する際に使用するAPIトークン。</target>
        </trans-unit>
        <trans-unit id="95f5962aa767fce77db582be9e2420535b08ccf3" translate="yes" xml:space="preserve">
          <source>AWS Cloud Formation</source>
          <target state="translated">AWSのクラウド形成</target>
        </trans-unit>
        <trans-unit id="b66fdc551894c3b1192f2c54101b00560e1fe25b" translate="yes" xml:space="preserve">
          <source>AWS Code Deploy</source>
          <target state="translated">AWSコードデプロイ</target>
        </trans-unit>
        <trans-unit id="6d53f9865f3214d3da5f80464d341916ee0222aa" translate="yes" xml:space="preserve">
          <source>AWS Container Registry</source>
          <target state="translated">AWSコンテナレジストリ</target>
        </trans-unit>
        <trans-unit id="48aa91135b362651b911b70d23391396c4094057" translate="yes" xml:space="preserve">
          <source>AWS Elastic Beanstalk</source>
          <target state="translated">AWS Elastic Beanstalk</target>
        </trans-unit>
        <trans-unit id="5c6b5faf33493853139e5f2a39d6fd69696bce73" translate="yes" xml:space="preserve">
          <source>AWS OPS Works</source>
          <target state="translated">AWS OPSワークス</target>
        </trans-unit>
        <trans-unit id="75a55f5b248e12210f519f4e395eb8fb1ea93689" translate="yes" xml:space="preserve">
          <source>About the Documentation, Getting Help, First Steps, and more.</source>
          <target state="translated">ドキュメントについて、ヘルプの取得、最初の一歩など。</target>
        </trans-unit>
        <trans-unit id="75ff47a064e8ec228cf781d95ff8091f2ffa0a7a" translate="yes" xml:space="preserve">
          <source>Absolutely no code generation and no requirement for XML configuration.</source>
          <target state="translated">コード生成やXML設定の必要性が全くありません。</target>
        </trans-unit>
        <trans-unit id="00862e4675c4b69f4e173f365b6337a8ff0e6264" translate="yes" xml:space="preserve">
          <source>Access logging for Undertow can be configured in a similar fashion, as shown in the following example:</source>
          <target state="translated">Undertowのアクセスログは、以下の例のように、同様の方法で設定することができます。</target>
        </trans-unit>
        <trans-unit id="65e2187b6f80a4f33dd9f8ca2ed14d2b66ef0a30" translate="yes" xml:space="preserve">
          <source>Access logs can be configured for Tomcat, Undertow, and Jetty through their respective namespaces.</source>
          <target state="translated">アクセスログは、Tomcat、Undertow、Jettyのそれぞれのネームスペースを介して設定することができます。</target>
        </trans-unit>
        <trans-unit id="23fdaed317c271fcbd396342a8797c73a6820024" translate="yes" xml:space="preserve">
          <source>Access rules and the use of multiple Spring Security components such as OAuth 2 Client and Resource Server can be configured by adding a custom &lt;code&gt;SecurityWebFilterChain&lt;/code&gt; bean. Spring Boot provides convenience methods that can be used to override access rules for actuator endpoints and static resources. &lt;code&gt;EndpointRequest&lt;/code&gt; can be used to create a &lt;code&gt;ServerWebExchangeMatcher&lt;/code&gt; that is based on the &lt;code&gt;management.endpoints.web.base-path&lt;/code&gt; property.</source>
          <target state="translated">カスタム &lt;code&gt;SecurityWebFilterChain&lt;/code&gt; Beanを追加することで、アクセスルールとOAuth2クライアントやリソースサーバーなどの複数のSpringSecurityコンポーネントの使用を構成できます。 Spring Bootは、アクチュエーターエンドポイントと静的リソースのアクセスルールをオーバーライドするために使用できる便利なメソッドを提供します。 &lt;code&gt;EndpointRequest&lt;/code&gt; を使用して、 &lt;code&gt;management.endpoints.web.base-path&lt;/code&gt; プロパティに基づく &lt;code&gt;ServerWebExchangeMatcher&lt;/code&gt; を作成できます。</target>
        </trans-unit>
        <trans-unit id="dfac6e3a360343385d9075d69f85c79748c090bd" translate="yes" xml:space="preserve">
          <source>Access rules can be overridden by adding a custom &lt;code&gt;WebSecurityConfigurerAdapter&lt;/code&gt;. Spring Boot provides convenience methods that can be used to override access rules for actuator endpoints and static resources. &lt;code&gt;EndpointRequest&lt;/code&gt; can be used to create a &lt;code&gt;RequestMatcher&lt;/code&gt; that is based on the &lt;code&gt;management.endpoints.web.base-path&lt;/code&gt; property. &lt;code&gt;PathRequest&lt;/code&gt; can be used to create a &lt;code&gt;RequestMatcher&lt;/code&gt; for resources in commonly used locations.</source>
          <target state="translated">カスタム &lt;code&gt;WebSecurityConfigurerAdapter&lt;/code&gt; を追加することにより、アクセスルールをオーバーライドできます。Spring Bootは、アクチュエーターエンドポイントと静的リソースのアクセスルールをオーバーライドするために使用できる便利なメソッドを提供します。 &lt;code&gt;EndpointRequest&lt;/code&gt; を使用して、 &lt;code&gt;management.endpoints.web.base-path&lt;/code&gt; プロパティに基づく &lt;code&gt;RequestMatcher&lt;/code&gt; を作成できます。 &lt;code&gt;PathRequest&lt;/code&gt; を使用して、一般的に使用される場所にあるリソースの &lt;code&gt;RequestMatcher&lt;/code&gt; を作成できます。</target>
        </trans-unit>
        <trans-unit id="82c9efa7dbc2d938ca9b71a5f6dafec4d5293216" translate="yes" xml:space="preserve">
          <source>Acknowledge mode of container.</source>
          <target state="translated">コンテナのアクノリッジモード。</target>
        </trans-unit>
        <trans-unit id="b2bd5b8ab0ecf65f74fc30394a13b65ddcd17546" translate="yes" xml:space="preserve">
          <source>Acknowledge mode of the container. By default, the listener is transacted with automatic acknowledgment.</source>
          <target state="translated">コンテナの応答モード。デフォルトでは、リスナーは自動応答で処理されます。</target>
        </trans-unit>
        <trans-unit id="e364904962550a04e24e2d71bb90a96c250adb11" translate="yes" xml:space="preserve">
          <source>Acquisition of new connections will be attempted for at most configured timeout.</source>
          <target state="translated">新しい接続の取得は、設定されたタイムアウト時間内に試行されます。</target>
        </trans-unit>
        <trans-unit id="b9d3621863a2dfb9cbdd3604afb7bdb7373e31b2" translate="yes" xml:space="preserve">
          <source>Activation</source>
          <target state="translated">Activation</target>
        </trans-unit>
        <trans-unit id="e793675c105c5a8109b1691f3e2c5179f272ca0e" translate="yes" xml:space="preserve">
          <source>Active profiles</source>
          <target state="translated">アクティブプロファイル</target>
        </trans-unit>
        <trans-unit id="5806f119cd727b5f7debb0f3e6dd29988ea2b167" translate="yes" xml:space="preserve">
          <source>ActiveMQ configuration is controlled by external configuration properties in &lt;code&gt;spring.activemq.*&lt;/code&gt;. For example, you might declare the following section in &lt;code&gt;application.properties&lt;/code&gt;:</source>
          <target state="translated">ActiveMQ構成は、 &lt;code&gt;spring.activemq.*&lt;/code&gt; 外部構成プロパティによって制御されます。たとえば、 &lt;code&gt;application.properties&lt;/code&gt; で次のセクションを宣言できます。</target>
        </trans-unit>
        <trans-unit id="42aba5149d5b5818f740bb8190b22f4402e464d6" translate="yes" xml:space="preserve">
          <source>Actuator configures the &quot;liveness&quot; and &quot;readiness&quot; probes as Health Groups; this means that all the &lt;a href=&quot;#production-ready-health-groups&quot;&gt;Health Groups features&lt;/a&gt; are available for them. You can, for example, configure additional Health Indicators:</source>
          <target state="translated">アクチュエータは、「活性」プローブと「準備」プローブをヘルスグループとして構成します。これは、すべての&lt;a href=&quot;#production-ready-health-groups&quot;&gt;ヘルスグループ機能&lt;/a&gt;が利用できることを意味します。たとえば、追加のヘルスインジケータを設定できます。</target>
        </trans-unit>
        <trans-unit id="6e10e8d08e6c184939525c34a3be81c206d9a97b" translate="yes" xml:space="preserve">
          <source>Actuator endpoints let you monitor and interact with your application. Spring Boot includes a number of built-in endpoints and lets you add your own. For example, the &lt;code&gt;health&lt;/code&gt; endpoint provides basic application health information.</source>
          <target state="translated">アクチュエータエンドポイントを使用すると、アプリケーションを監視して操作できます。Spring Bootには多数の組み込みエンドポイントが含まれており、独自のエンドポイントを追加できます。たとえば、 &lt;code&gt;health&lt;/code&gt; エンドポイントは基本的なアプリケーションヘルス情報を提供します。</target>
        </trans-unit>
        <trans-unit id="6eb588e53dce2e71efb2b6c226e2549a6559e038" translate="yes" xml:space="preserve">
          <source>Actuator is supported natively with Spring MVC, Spring WebFlux, and Jersey. If both Jersey and Spring MVC are available, Spring MVC will be used.</source>
          <target state="translated">アクチュエータはSpring MVC、Spring WebFlux、Jerseyでネイティブにサポートされています。JerseyとSpring MVCの両方が利用可能な場合は、Spring MVCが使用されます。</target>
        </trans-unit>
        <trans-unit id="8fe55a8407f887c84f7a3bdd953b64176dc77256" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;https://myapp.cfapps.io&lt;/code&gt; to the &lt;code&gt;Program arguments&lt;/code&gt; (or whatever your remote URL is).</source>
          <target state="translated">&lt;code&gt;https://myapp.cfapps.io&lt;/code&gt; を &lt;code&gt;Program arguments&lt;/code&gt; （またはリモートURLが何であれ）に追加します。</target>
        </trans-unit>
        <trans-unit id="2b065a98d88002f564ab073ae90725af3dffeabd" translate="yes" xml:space="preserve">
          <source>Add @EnableAspectJAutoProxy.</source>
          <target state="translated">EnableAspectJAutoProxyを追加しました。</target>
        </trans-unit>
        <trans-unit id="5a66eddae0ecaff421cd985b2520bf60de88d1d0" translate="yes" xml:space="preserve">
          <source>Add Servlets, Filters, and Listeners by Using Classpath Scanning</source>
          <target state="translated">クラスパススキャンを使用してサーブレット、フィルタ、リスナーを追加する</target>
        </trans-unit>
        <trans-unit id="a32e43f13354c557bcd7256ca8bb70ab4f0e43d6" translate="yes" xml:space="preserve">
          <source>Add a Servlet, Filter, or Listener by Using a Spring Bean</source>
          <target state="translated">Spring Beanを使ったサーブレット、フィルタ、リスナーの追加</target>
        </trans-unit>
        <trans-unit id="3a8632208a27fba7346f1004acab364f4f10b67b" translate="yes" xml:space="preserve">
          <source>Add an &lt;code&gt;UndertowBuilderCustomizer&lt;/code&gt; to the &lt;code&gt;UndertowServletWebServerFactory&lt;/code&gt; and add a listener to the &lt;code&gt;Builder&lt;/code&gt;, as shown in the following example:</source>
          <target state="translated">次の例に示すように、 &lt;code&gt;UndertowBuilderCustomizer&lt;/code&gt; を &lt;code&gt;UndertowServletWebServerFactory&lt;/code&gt; に追加し、リスナーを &lt;code&gt;Builder&lt;/code&gt; に追加します。</target>
        </trans-unit>
        <trans-unit id="9ca9c6c89278f599759b9218a810cc4dcf2096c6" translate="yes" xml:space="preserve">
          <source>Add the &quot;X-Application-Context&quot; HTTP header in each response.</source>
          <target state="translated">各レスポンスに「X-Application-Context」HTTPヘッダを追加します。</target>
        </trans-unit>
        <trans-unit id="df221a1648e8cdc6a98f864947ada1271f9358af" translate="yes" xml:space="preserve">
          <source>Add the &lt;code&gt;provided&lt;/code&gt; (embedded container) dependencies in a nested &lt;code&gt;BOOT-INF/lib&lt;/code&gt; directory for a jar or &lt;code&gt;WEB-INF/lib-provided&lt;/code&gt; for a war. Remember &lt;strong&gt;not&lt;/strong&gt; to compress the entries in the archive.</source>
          <target state="translated">&lt;code&gt;provided&lt;/code&gt; （埋め込まれたコンテナー）依存関係を、jarの場合はネストされた &lt;code&gt;BOOT-INF/lib&lt;/code&gt; ディレクトリーに、戦争の場合は &lt;code&gt;WEB-INF/lib-provided&lt;/code&gt; に追加します。アーカイブ内のエントリを圧縮し&lt;strong&gt;ない&lt;/strong&gt;ように注意してください。</target>
        </trans-unit>
        <trans-unit id="902ebb0b120bb65d4f7f3e4dfaab21f0df2844c0" translate="yes" xml:space="preserve">
          <source>Add the &lt;code&gt;spring-boot-loader&lt;/code&gt; classes at the root of the archive (so that the &lt;code&gt;Main-Class&lt;/code&gt; is available).</source>
          <target state="translated">アーカイブのルートに &lt;code&gt;spring-boot-loader&lt;/code&gt; クラスを追加します（ &lt;code&gt;Main-Class&lt;/code&gt; が使用できるようにします）。</target>
        </trans-unit>
        <trans-unit id="857a9a516d82166bcb16e9ee02ca26536976e445" translate="yes" xml:space="preserve">
          <source>Add the runtime dependencies in a nested &lt;code&gt;BOOT-INF/lib&lt;/code&gt; directory for a jar or &lt;code&gt;WEB-INF/lib&lt;/code&gt; for a war. Remember &lt;strong&gt;not&lt;/strong&gt; to compress the entries in the archive.</source>
          <target state="translated">jarの場合はネストされた &lt;code&gt;BOOT-INF/lib&lt;/code&gt; ディレクトリに、戦争の場合は &lt;code&gt;WEB-INF/lib&lt;/code&gt; にランタイム依存関係を追加します。アーカイブ内のエントリを圧縮し&lt;strong&gt;ない&lt;/strong&gt;ように注意してください。</target>
        </trans-unit>
        <trans-unit id="51f17b79b17b073263e50237b9109d0a2eda29ae" translate="yes" xml:space="preserve">
          <source>Adding both &lt;code&gt;spring-boot-starter-web&lt;/code&gt; and &lt;code&gt;spring-boot-starter-webflux&lt;/code&gt; modules in your application results in Spring Boot auto-configuring Spring MVC, not WebFlux. This behavior has been chosen because many Spring developers add &lt;code&gt;spring-boot-starter-webflux&lt;/code&gt; to their Spring MVC application to use the reactive &lt;code&gt;WebClient&lt;/code&gt;. You can still enforce your choice by setting the chosen application type to &lt;code&gt;SpringApplication.setWebApplicationType(WebApplicationType.REACTIVE)&lt;/code&gt;.</source>
          <target state="translated">両方の追加 &lt;code&gt;spring-boot-starter-web&lt;/code&gt; と &lt;code&gt;spring-boot-starter-webflux&lt;/code&gt; 春ブート自動構成Spring MVCのではなく、WebFluxでアプリケーションの結果のモジュールを。多くのSpring開発者が &lt;code&gt;spring-boot-starter-webflux&lt;/code&gt; アプリケーションにspring-boot-starter-webfluxを追加して、リアクティブ &lt;code&gt;WebClient&lt;/code&gt; を使用するため、この動作が選択されました。選択したアプリケーションタイプを &lt;code&gt;SpringApplication.setWebApplicationType(WebApplicationType.REACTIVE)&lt;/code&gt; に設定することで、選択を強制することができます。</target>
        </trans-unit>
        <trans-unit id="2e691fd2623c953a5c010cd2992ab3daf177b97f" translate="yes" xml:space="preserve">
          <source>Additional &lt;code&gt;HealthIndicators&lt;/code&gt; are available but not enabled by default:</source>
          <target state="translated">追加の &lt;code&gt;HealthIndicators&lt;/code&gt; が利用可能ですが、デフォルトでは有効になっていません。</target>
        </trans-unit>
        <trans-unit id="2c933b5792bc22a2a3b77383f6fd99188aa7ac43" translate="yes" xml:space="preserve">
          <source>Additional JAAS options.</source>
          <target state="translated">JAASのオプションを追加しました。</target>
        </trans-unit>
        <trans-unit id="5d12c5620ee6970385bc00e2429259db935bd246" translate="yes" xml:space="preserve">
          <source>Additional JavaMail Session properties.</source>
          <target state="translated">追加のJavaMail Sessionプロパティ。</target>
        </trans-unit>
        <trans-unit id="4504a299a66e30134066fcabc21df7f9ac19f3fd" translate="yes" xml:space="preserve">
          <source>Additional Kafka properties used to configure the streams.</source>
          <target state="translated">ストリームの設定に使用する追加の Kafka プロパティ。</target>
        </trans-unit>
        <trans-unit id="862f92263cdc995021caed22450db2dd84cb01d2" translate="yes" xml:space="preserve">
          <source>Additional Quartz Scheduler properties.</source>
          <target state="translated">Quartz Schedulerのプロパティを追加しました。</target>
        </trans-unit>
        <trans-unit id="8dfce623f55042371d079f3caf89368129e11bf5" translate="yes" xml:space="preserve">
          <source>Additional R2DBC options.</source>
          <target state="translated">R2DBCのオプションを追加しました。</target>
        </trans-unit>
        <trans-unit id="b61906085a1876e19de23f3bd0f0b1455f159287" translate="yes" xml:space="preserve">
          <source>Additional admin-specific properties used to configure the client.</source>
          <target state="translated">クライアントを設定するために使用される追加の管理者固有のプロパティ。</target>
        </trans-unit>
        <trans-unit id="db24d8bfcc3ce0c4e8b7167ecdecafaaa4812874" translate="yes" xml:space="preserve">
          <source>Additional connection pools can always be configured manually. If you define your own &lt;code&gt;DataSource&lt;/code&gt; bean, auto-configuration does not occur.</source>
          <target state="translated">追加の接続プールは、いつでも手動で構成できます。独自のデータ &lt;code&gt;DataSource&lt;/code&gt; Beanを定義する場合、自動構成は行われません。</target>
        </trans-unit>
        <trans-unit id="10be4e2fbb5b4543fd07a5a869ee5c448b56316e" translate="yes" xml:space="preserve">
          <source>Additional consumer-specific properties used to configure the client.</source>
          <target state="translated">クライアントを構成するために使用される追加の消費者固有のプロパティ。</target>
        </trans-unit>
        <trans-unit id="69b1da28a362ff3cc31896d50d9bcb09617a8f9b" translate="yes" xml:space="preserve">
          <source>Additional information about CSRF protection can be found in the &lt;a href=&quot;https://docs.spring.io/spring-security/site/docs/5.4.1/reference/html5/#csrf&quot;&gt;Spring Security Reference Guide&lt;/a&gt;.</source>
          <target state="translated">CSRF保護に関する追加情報は、SpringSecurity&lt;a href=&quot;https://docs.spring.io/spring-security/site/docs/5.4.1/reference/html5/#csrf&quot;&gt;リファレンスガイドに記載されてい&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="c687e90c5831d641e11996cdca494f4c018a443a" translate="yes" xml:space="preserve">
          <source>Additional native properties to set on the JPA provider.</source>
          <target state="translated">JPA プロバイダに設定する追加のネイティブプロパティ。</target>
        </trans-unit>
        <trans-unit id="928dba6bd7e6dd77b6227014d7d677f98585e169" translate="yes" xml:space="preserve">
          <source>Additional paths to watch for changes.</source>
          <target state="translated">変化に注意するための追加パス</target>
        </trans-unit>
        <trans-unit id="ea1c607125b1acf8772e4874485d0de4afdb8ae0" translate="yes" xml:space="preserve">
          <source>Additional patterns that should be excluded from triggering a full restart.</source>
          <target state="translated">フルリスタートのトリガーから除外すべき追加パターン。</target>
        </trans-unit>
        <trans-unit id="a2e1fc32d20c6f69735a4ab5ae2e918f93d808d3" translate="yes" xml:space="preserve">
          <source>Additional producer-specific properties used to configure the client.</source>
          <target state="translated">クライアントを構成するために使用される追加のプロデューサー固有のプロパティ。</target>
        </trans-unit>
        <trans-unit id="1059f8a3cb3c7805bf00f79097737ee6c696db92" translate="yes" xml:space="preserve">
          <source>Additional properties, common to producers and consumers, used to configure the client.</source>
          <target state="translated">クライアントを設定するために使用される、プロデューサとコンシューマに共通の追加プロパティ。</target>
        </trans-unit>
        <trans-unit id="bd9e563b313845ea62bd2c3de830cadc190a5509" translate="yes" xml:space="preserve">
          <source>Additional static properties to append to all ObjectNames of MBeans representing Endpoints.</source>
          <target state="translated">エンドポイントを表すMBeansのすべてのObjectNamesに追加する静的プロパティ。</target>
        </trans-unit>
        <trans-unit id="9935e376ca033d187447a31c21e41ac73f66a275" translate="yes" xml:space="preserve">
          <source>Additionally, if Spring Security is present, you would need to add custom security configuration that allows unauthenticated access to the endpoints as shown in the following example:</source>
          <target state="translated">さらに、Spring Securityが存在する場合は、以下の例のように、エンドポイントへの認証されていないアクセスを許可するカスタムセキュリティ設定を追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="2271910d0f4c214bbe1dcbcb73e1aa4c84c82837" translate="yes" xml:space="preserve">
          <source>Additionally, you can use &lt;code&gt;@SpyBean&lt;/code&gt; to wrap any existing bean with a Mockito &lt;code&gt;spy&lt;/code&gt;. See the &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/api/org/springframework/boot/test/mock/mockito/SpyBean.html&quot;&gt;Javadoc&lt;/a&gt; for full details.</source>
          <target state="translated">さらに、 &lt;code&gt;@SpyBean&lt;/code&gt; を使用して、既存のBeanをMockito &lt;code&gt;spy&lt;/code&gt; でラップできます。詳細については、&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/api/org/springframework/boot/test/mock/mockito/SpyBean.html&quot;&gt;Javadoc&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="5b74aee9443d1bf9f74b91a30d73475627dc1765" translate="yes" xml:space="preserve">
          <source>Again, the same properties are applicable for both servlet and reactive applications.</source>
          <target state="translated">繰り返しになりますが、サーブレットとリアクティブ・アプリケーションの両方に同じプロパティが適用されます。</target>
        </trans-unit>
        <trans-unit id="8fbf9471afefcf79adff9e2d4cc44fe329a49985" translate="yes" xml:space="preserve">
          <source>Alias that identifies the key in the key store.</source>
          <target state="translated">キーストアのキーを識別するエイリアス。</target>
        </trans-unit>
        <trans-unit id="74e82e1092bcb00dbfb8ab2f07fb3f9688c2762c" translate="yes" xml:space="preserve">
          <source>All &lt;code&gt;@JsonComponent&lt;/code&gt; beans in the &lt;code&gt;ApplicationContext&lt;/code&gt; are automatically registered with Jackson. Because &lt;code&gt;@JsonComponent&lt;/code&gt; is meta-annotated with &lt;code&gt;@Component&lt;/code&gt;, the usual component-scanning rules apply.</source>
          <target state="translated">&lt;code&gt;ApplicationContext&lt;/code&gt; 内のすべての &lt;code&gt;@JsonComponent&lt;/code&gt; Beanは、Jacksonに自動的に登録されます。ため &lt;code&gt;@JsonComponent&lt;/code&gt; を有するメタ注釈さ &lt;code&gt;@Component&lt;/code&gt; 、通常のコンポーネントスキャンの規則が適用されます。</target>
        </trans-unit>
        <trans-unit id="a9a5dae378fdf45b0147fd781aacfc0aa76e82e0" translate="yes" xml:space="preserve">
          <source>All &lt;code&gt;META-INF/spring-devtools.properties&lt;/code&gt; from the classpath are loaded. You can package files inside your project, or in the libraries that the project consumes.</source>
          <target state="translated">クラスパスからのすべての &lt;code&gt;META-INF/spring-devtools.properties&lt;/code&gt; がロードされます。プロジェクト内、またはプロジェクトが使用するライブラリにファイルをパッケージ化できます。</target>
        </trans-unit>
        <trans-unit id="ec8423fe040f50fe832c4a0058a615199c08fd98" translate="yes" xml:space="preserve">
          <source>All &lt;strong&gt;official&lt;/strong&gt; starters follow a similar naming pattern; &lt;code&gt;spring-boot-starter-*&lt;/code&gt;, where &lt;code&gt;*&lt;/code&gt; is a particular type of application. This naming structure is intended to help when you need to find a starter. The Maven integration in many IDEs lets you search dependencies by name. For example, with the appropriate Eclipse or STS plugin installed, you can press &lt;code&gt;ctrl-space&lt;/code&gt; in the POM editor and type &amp;ldquo;spring-boot-starter&amp;rdquo; for a complete list.</source>
          <target state="translated">すべての&lt;strong&gt;公式&lt;/strong&gt;スターターは、同様の命名パターンに従います。 &lt;code&gt;spring-boot-starter-*&lt;/code&gt; 、ここで &lt;code&gt;*&lt;/code&gt; は特定のタイプのアプリケーションです。この命名構造は、スターターを見つける必要がある場合に役立つことを目的としています。多くのIDEのMaven統合により、依存関係を名前で検索できます。たとえば、適切なEclipseまたはSTSプラグインがインストールされている場合、POMエディターで &lt;code&gt;ctrl-space&lt;/code&gt; を押し、「spring-boot-starter」と入力して完全なリストを表示できます。</target>
        </trans-unit>
        <trans-unit id="2b8cf39af1b3f3a8e2102e491fdbd682344e87d4" translate="yes" xml:space="preserve">
          <source>All Cloud Foundry properties are prefixed with &lt;code&gt;vcap&lt;/code&gt;. You can use &lt;code&gt;vcap&lt;/code&gt; properties to access application information (such as the public URL of the application) and service information (such as database credentials). See the &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/api/org/springframework/boot/cloud/CloudFoundryVcapEnvironmentPostProcessor.html&quot;&gt;&amp;lsquo;CloudFoundryVcapEnvironmentPostProcessor&amp;rsquo;&lt;/a&gt; Javadoc for complete details.</source>
          <target state="translated">すべての &lt;code&gt;vcap&lt;/code&gt; プロパティには、接頭辞vcapが付いています。あなたは使用することができます &lt;code&gt;vcap&lt;/code&gt; （データベース資格証明書など）（このようなアプリケーションの公開URLなど）アクセスアプリケーション情報やサービス情報にプロパティを。詳細については、&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/api/org/springframework/boot/cloud/CloudFoundryVcapEnvironmentPostProcessor.html&quot;&gt;「CloudFoundryVcapEnvironmentPostProcessor」&lt;/a&gt; Javadocを参照してください。</target>
        </trans-unit>
        <trans-unit id="65873ae022095528fb3e6e75269dffdb5d556289" translate="yes" xml:space="preserve">
          <source>All of Spring Boot is open source, including the documentation. If you find problems with the docs or if you want to improve them, please &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0&quot;&gt;get involved&lt;/a&gt;.</source>
          <target state="translated">ドキュメントを含め、SpringBootはすべてオープンソースです。ドキュメントに問題がある場合、またはドキュメントを改善したい場合は、&lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0&quot;&gt;参加して&lt;/a&gt;ください。</target>
        </trans-unit>
        <trans-unit id="f7d98027ba4a1506fdcca500d43e75b66315489d" translate="yes" xml:space="preserve">
          <source>All of these should be amenable to translation, but each might require slightly different techniques.</source>
          <target state="translated">これらはすべて翻訳可能なはずですが、それぞれ少し違った技術が必要かもしれません。</target>
        </trans-unit>
        <trans-unit id="e16140b3d5591756ea466628715759b74bfffd4c" translate="yes" xml:space="preserve">
          <source>All property keys must be unique. As long as a property starts with &lt;code&gt;restart.include.&lt;/code&gt; or &lt;code&gt;restart.exclude.&lt;/code&gt; it is considered.</source>
          <target state="translated">すべてのプロパティキーは一意である必要があります。プロパティが &lt;code&gt;restart.include.&lt;/code&gt; 始まる限り。または &lt;code&gt;restart.exclude.&lt;/code&gt; それが考慮されます。</target>
        </trans-unit>
        <trans-unit id="bcdd7e39a9a6371f96a59ae60c3b6635a592976d" translate="yes" xml:space="preserve">
          <source>All the registered endpoints should be &lt;code&gt;@Components&lt;/code&gt; with HTTP resource annotations (&lt;code&gt;@GET&lt;/code&gt; and others), as shown in the following example:</source>
          <target state="translated">次の例に示すように、登録されているすべてのエンドポイントは、HTTPリソースアノテーション（ &lt;code&gt;@GET&lt;/code&gt; など）を含む &lt;code&gt;@Components&lt;/code&gt; である必要があります。</target>
        </trans-unit>
        <trans-unit id="65496d8ed95b8e2924b5c3e2755ec30a05f32afd" translate="yes" xml:space="preserve">
          <source>All the supported logging systems can consult System properties when parsing their configuration files. See the default configurations in &lt;code&gt;spring-boot.jar&lt;/code&gt; for examples:</source>
          <target state="translated">All the supported logging systems can consult System properties when parsing their configuration files. See the default configurations in &lt;code&gt;spring-boot.jar&lt;/code&gt; for examples:</target>
        </trans-unit>
        <trans-unit id="5eee98321046b8075f93003e21cc330687312a20" translate="yes" xml:space="preserve">
          <source>All the supported logging systems can have the logger levels set in the Spring &lt;code&gt;Environment&lt;/code&gt; (for example, in &lt;code&gt;application.properties&lt;/code&gt;) by using &lt;code&gt;logging.level.&amp;lt;logger-name&amp;gt;=&amp;lt;level&amp;gt;&lt;/code&gt; where &lt;code&gt;level&lt;/code&gt; is one of TRACE, DEBUG, INFO, WARN, ERROR, FATAL, or OFF. The &lt;code&gt;root&lt;/code&gt; logger can be configured by using &lt;code&gt;logging.level.root&lt;/code&gt;.</source>
          <target state="translated">All the supported logging systems can have the logger levels set in the Spring &lt;code&gt;Environment&lt;/code&gt; (for example, in &lt;code&gt;application.properties&lt;/code&gt; ) by using &lt;code&gt;logging.level.&amp;lt;logger-name&amp;gt;=&amp;lt;level&amp;gt;&lt;/code&gt; where &lt;code&gt;level&lt;/code&gt; is one of TRACE, DEBUG, INFO, WARN, ERROR, FATAL, or OFF. The &lt;code&gt;root&lt;/code&gt; logger can be configured by using &lt;code&gt;logging.level.root&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3caf316179e992e817ab19609292f06a2d803549" translate="yes" xml:space="preserve">
          <source>Allow caching null values.</source>
          <target state="translated">ヌル値のキャッシュを許可します。</target>
        </trans-unit>
        <trans-unit id="4ceaebbdcbca0e2c6fb82d819e1a80df66ebaba6" translate="yes" xml:space="preserve">
          <source>Allows retrieval and deletion of user sessions from a Spring Session-backed session store. Requires a Servlet-based web application using Spring Session.</source>
          <target state="translated">Spring Sessionでバックアップされたセッションストアからユーザーセッションの検索と削除を可能にします。Spring Sessionを使用するServletベースのWebアプリケーションが必要です。</target>
        </trans-unit>
        <trans-unit id="bd29f76ccc52f1e5c94174a0f12d1548010c129f" translate="yes" xml:space="preserve">
          <source>Also, Hikari-specific metrics are exposed with a &lt;code&gt;hikaricp&lt;/code&gt; prefix. Each metric is tagged by the name of the Pool (can be controlled with &lt;code&gt;spring.datasource.name&lt;/code&gt;).</source>
          <target state="translated">Also, Hikari-specific metrics are exposed with a &lt;code&gt;hikaricp&lt;/code&gt; prefix. Each metric is tagged by the name of the Pool (can be controlled with &lt;code&gt;spring.datasource.name&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="a977619ba0242f4ee0f341511bd057695c5ae26b" translate="yes" xml:space="preserve">
          <source>Also, if an application is using Kubernetes &lt;a href=&quot;https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/&quot;&gt;autoscaling&lt;/a&gt; it may react differently to applications being taken out of the load-balancer, depending on its autoscaler configuration.</source>
          <target state="translated">Also, if an application is using Kubernetes &lt;a href=&quot;https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/&quot;&gt;autoscaling&lt;/a&gt; it may react differently to applications being taken out of the load-balancer, depending on its autoscaler configuration.</target>
        </trans-unit>
        <trans-unit id="819f30db7affda51e9e84c9a7fa6ed3671379e55" translate="yes" xml:space="preserve">
          <source>Also, the &lt;code&gt;ExitCodeGenerator&lt;/code&gt; interface may be implemented by exceptions. When such an exception is encountered, Spring Boot returns the exit code provided by the implemented &lt;code&gt;getExitCode()&lt;/code&gt; method.</source>
          <target state="translated">Also, the &lt;code&gt;ExitCodeGenerator&lt;/code&gt; interface may be implemented by exceptions. When such an exception is encountered, Spring Boot returns the exit code provided by the implemented &lt;code&gt;getExitCode()&lt;/code&gt; method.</target>
        </trans-unit>
        <trans-unit id="cf7ac52a5dadc20ebbca955efafa9ca5fe674211" translate="yes" xml:space="preserve">
          <source>Alternatively, App Engine Flex requires you to create an &lt;code&gt;app.yaml&lt;/code&gt; file to describe the resources your app requires. Normally, you put this file in &lt;code&gt;src/main/appengine&lt;/code&gt;, and it should resemble the following file:</source>
          <target state="translated">Alternatively, App Engine Flex requires you to create an &lt;code&gt;app.yaml&lt;/code&gt; file to describe the resources your app requires. Normally, you put this file in &lt;code&gt;src/main/appengine&lt;/code&gt; , and it should resemble the following file:</target>
        </trans-unit>
        <trans-unit id="f766b8686dc4faa2291f760db496a93f00f0bf1e" translate="yes" xml:space="preserve">
          <source>Alternatively, additional auto-configurations can be added for any use of a slice annotation by registering them in &lt;code&gt;META-INF/spring.factories&lt;/code&gt; as shown in the following example:</source>
          <target state="translated">Alternatively, additional auto-configurations can be added for any use of a slice annotation by registering them in &lt;code&gt;META-INF/spring.factories&lt;/code&gt; as shown in the following example:</target>
        </trans-unit>
        <trans-unit id="86f2728767a98a4e95dbcb8df71228aae9f817ab" translate="yes" xml:space="preserve">
          <source>Alternatively, an RSocket TCP or websocket server is started as an independent, embedded server. Besides the dependency requirements, the only required configuration is to define a port for that server:</source>
          <target state="translated">あるいは、RSocket TCP または websocket サーバを独立した組み込みサーバとして起動します。依存関係の要件に加えて、必要な設定は、そのサーバのポートを定義することだけです。</target>
        </trans-unit>
        <trans-unit id="5c194665d2eb577843b5c9b7337c05979900a9cc" translate="yes" xml:space="preserve">
          <source>Alternatively, both the main server and the management server can use SSL but with different key stores, as follows:</source>
          <target state="translated">また、メインサーバと管理サーバの両方でSSLを使用することもできますが、以下のように異なるキーストアを使用することもできます。</target>
        </trans-unit>
        <trans-unit id="449a77a038d72ba6a394daaad269d739b9bb84f2" translate="yes" xml:space="preserve">
          <source>Alternatively, if you use the &lt;code&gt;@SpringBootTest&lt;/code&gt; annotation with &lt;code&gt;WebEnvironment.RANDOM_PORT&lt;/code&gt; or &lt;code&gt;WebEnvironment.DEFINED_PORT&lt;/code&gt;, you can inject a fully configured &lt;code&gt;TestRestTemplate&lt;/code&gt; and start using it. If necessary, additional customizations can be applied through the &lt;code&gt;RestTemplateBuilder&lt;/code&gt; bean. Any URLs that do not specify a host and port automatically connect to the embedded server, as shown in the following example:</source>
          <target state="translated">Alternatively, if you use the &lt;code&gt;@SpringBootTest&lt;/code&gt; annotation with &lt;code&gt;WebEnvironment.RANDOM_PORT&lt;/code&gt; or &lt;code&gt;WebEnvironment.DEFINED_PORT&lt;/code&gt; , you can inject a fully configured &lt;code&gt;TestRestTemplate&lt;/code&gt; and start using it. If necessary, additional customizations can be applied through the &lt;code&gt;RestTemplateBuilder&lt;/code&gt; bean. Any URLs that do not specify a host and port automatically connect to the embedded server, as shown in the following example:</target>
        </trans-unit>
        <trans-unit id="ddcff10ca00af70d6a0ba57e8576271a2b281606" translate="yes" xml:space="preserve">
          <source>Alternatively, rather than open all suffix patterns, it&amp;rsquo;s more secure to only support registered suffix patterns:</source>
          <target state="translated">Alternatively, rather than open all suffix patterns, it&amp;rsquo;s more secure to only support registered suffix patterns:</target>
        </trans-unit>
        <trans-unit id="91354e09a3470cef11b970c216b55273f5e88452" translate="yes" xml:space="preserve">
          <source>Alternatively, running in an IDE (especially with debugging on) is a good way to do development (all modern IDEs allow reloading of static resources and usually also allow hot-swapping of Java class changes).</source>
          <target state="translated">あるいは、IDE(特にデバッグをオンにして)で実行するのも開発には良い方法です(最新のIDEはすべて静的リソースのリロードを可能にし、通常はJavaクラスの変更のホットスワップも可能にしています)。</target>
        </trans-unit>
        <trans-unit id="5c6c10b88faed085147a159305a4a01770f78ac3" translate="yes" xml:space="preserve">
          <source>Alternatively, you can configure a &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/testing.html#webtestclient-tests&quot;&gt;&lt;code&gt;WebTestClient&lt;/code&gt;&lt;/a&gt; as shown in the following example:</source>
          <target state="translated">Alternatively, you can configure a &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/testing.html#webtestclient-tests&quot;&gt; &lt;code&gt;WebTestClient&lt;/code&gt; &lt;/a&gt; as shown in the following example:</target>
        </trans-unit>
        <trans-unit id="c58ec2dab98748c62a48d1f000d370177ca7be7d" translate="yes" xml:space="preserve">
          <source>Alternatively, you can configure either &lt;a href=&quot;#howto-execute-flyway-database-migrations-on-startup&quot;&gt;Flyway&lt;/a&gt; or &lt;a href=&quot;#howto-execute-liquibase-database-migrations-on-startup&quot;&gt;Liquibase&lt;/a&gt; to configure a &lt;code&gt;DataSource&lt;/code&gt; for you for the duration of the migration. Both these libraries offer properties to set the &lt;code&gt;url&lt;/code&gt;, &lt;code&gt;username&lt;/code&gt; and &lt;code&gt;password&lt;/code&gt; of the database to migrate.</source>
          <target state="translated">Alternatively, you can configure either &lt;a href=&quot;#howto-execute-flyway-database-migrations-on-startup&quot;&gt;Flyway&lt;/a&gt; or &lt;a href=&quot;#howto-execute-liquibase-database-migrations-on-startup&quot;&gt;Liquibase&lt;/a&gt; to configure a &lt;code&gt;DataSource&lt;/code&gt; for you for the duration of the migration. Both these libraries offer properties to set the &lt;code&gt;url&lt;/code&gt; , &lt;code&gt;username&lt;/code&gt; and &lt;code&gt;password&lt;/code&gt; of the database to migrate.</target>
        </trans-unit>
        <trans-unit id="c08675fdff064b3474e3d1574827026f36ec7597" translate="yes" xml:space="preserve">
          <source>Alternatively, you can configure the following bean:</source>
          <target state="translated">あるいは、以下のBeanを設定することもできます。</target>
        </trans-unit>
        <trans-unit id="137d95f91c226ed1520a7ea0597a30a04488dabc" translate="yes" xml:space="preserve">
          <source>Alternatively, you can define your own &lt;code&gt;JwtDecoder&lt;/code&gt; bean for servlet applications or a &lt;code&gt;ReactiveJwtDecoder&lt;/code&gt; for reactive applications.</source>
          <target state="translated">Alternatively, you can define your own &lt;code&gt;JwtDecoder&lt;/code&gt; bean for servlet applications or a &lt;code&gt;ReactiveJwtDecoder&lt;/code&gt; for reactive applications.</target>
        </trans-unit>
        <trans-unit id="6346145344f3aa973220116ba0c6939c646967ac" translate="yes" xml:space="preserve">
          <source>Alternatively, you can define your own &lt;code&gt;OpaqueTokenIntrospector&lt;/code&gt; bean for servlet applications or a &lt;code&gt;ReactiveOpaqueTokenIntrospector&lt;/code&gt; for reactive applications.</source>
          <target state="translated">Alternatively, you can define your own &lt;code&gt;OpaqueTokenIntrospector&lt;/code&gt; bean for servlet applications or a &lt;code&gt;ReactiveOpaqueTokenIntrospector&lt;/code&gt; for reactive applications.</target>
        </trans-unit>
        <trans-unit id="fe3c681a05ce0cb8860dd7b1dd1f921b26d3947a" translate="yes" xml:space="preserve">
          <source>Alternatively, you can enable a &amp;ldquo;trace&amp;rdquo; mode by starting your application with a &lt;code&gt;--trace&lt;/code&gt; flag (or &lt;code&gt;trace=true&lt;/code&gt; in your &lt;code&gt;application.properties&lt;/code&gt;). Doing so enables trace logging for a selection of core loggers (embedded container, Hibernate schema generation, and the whole Spring portfolio).</source>
          <target state="translated">Alternatively, you can enable a &amp;ldquo;trace&amp;rdquo; mode by starting your application with a &lt;code&gt;--trace&lt;/code&gt; flag (or &lt;code&gt;trace=true&lt;/code&gt; in your &lt;code&gt;application.properties&lt;/code&gt; ). Doing so enables trace logging for a selection of core loggers (embedded container, Hibernate schema generation, and the whole Spring portfolio).</target>
        </trans-unit>
        <trans-unit id="6518152a153a0e58575bf65f685e77cc28518acd" translate="yes" xml:space="preserve">
          <source>Alternatively, you can specify connection details using discrete properties. For example, you might declare the following settings in your &lt;code&gt;application.properties&lt;/code&gt;:</source>
          <target state="translated">Alternatively, you can specify connection details using discrete properties. For example, you might declare the following settings in your &lt;code&gt;application.properties&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="1a4dea4e406268faf242fa039eebaa6c0f003b9a" translate="yes" xml:space="preserve">
          <source>Alternatively, you can specify the color or style that should be used by providing it as an option to the conversion. For example, to make the text yellow, use the following setting:</source>
          <target state="translated">あるいは、変換のオプションとして指定することで、使用する色やスタイルを指定することもできます。例えば、テキストを黄色にするには、以下のように設定します。</target>
        </trans-unit>
        <trans-unit id="10244dc1b8cb9553b00a27c981a842dc2833e00a" translate="yes" xml:space="preserve">
          <source>Alternatively, you could configure the same connection using the &lt;code&gt;addresses&lt;/code&gt; attribute:</source>
          <target state="translated">Alternatively, you could configure the same connection using the &lt;code&gt;addresses&lt;/code&gt; attribute:</target>
        </trans-unit>
        <trans-unit id="bb013fc8f09513caaa8f79190fb4a30169a84a52" translate="yes" xml:space="preserve">
          <source>Alternatively, you may use a Wavefront sidecar or an internal proxy set up in your environment that forwards metrics data to the Wavefront API host:</source>
          <target state="translated">あるいは、Wavefrontのサイドカーや、Wavefront APIホストにメトリクスデータを転送する環境に設定された内部プロキシを使用することもできます。</target>
        </trans-unit>
        <trans-unit id="6e690a9076558697c6a063766a37804ca29efde5" translate="yes" xml:space="preserve">
          <source>Although &lt;code&gt;null&lt;/code&gt; values from the JSON will be added to the resulting property source, the &lt;code&gt;PropertySourcesPropertyResolver&lt;/code&gt; treats &lt;code&gt;null&lt;/code&gt; properties as missing values. This means that the JSON cannot override properties from lower order property sources with a &lt;code&gt;null&lt;/code&gt; value.</source>
          <target state="translated">Although &lt;code&gt;null&lt;/code&gt; values from the JSON will be added to the resulting property source, the &lt;code&gt;PropertySourcesPropertyResolver&lt;/code&gt; treats &lt;code&gt;null&lt;/code&gt; properties as missing values. This means that the JSON cannot override properties from lower order property sources with a &lt;code&gt;null&lt;/code&gt; value.</target>
        </trans-unit>
        <trans-unit id="e3ab88f5113721a67ea7c495b42c081d6535f316" translate="yes" xml:space="preserve">
          <source>Although Java does not allow one to express null-safety in its type system, Spring Framework, Spring Data, and Reactor now provide null-safety of their API via tooling-friendly annotations. By default, types from Java APIs used in Kotlin are recognized as &lt;a href=&quot;https://kotlinlang.org/docs/reference/java-interop.html#null-safety-and-platform-types&quot;&gt;platform types&lt;/a&gt; for which null-checks are relaxed. &lt;a href=&quot;https://kotlinlang.org/docs/reference/java-interop.html#jsr-305-support&quot;&gt;Kotlin&amp;rsquo;s support for JSR 305 annotations&lt;/a&gt; combined with nullability annotations provide null-safety for the related Spring API in Kotlin.</source>
          <target state="translated">Although Java does not allow one to express null-safety in its type system, Spring Framework, Spring Data, and Reactor now provide null-safety of their API via tooling-friendly annotations. By default, types from Java APIs used in Kotlin are recognized as &lt;a href=&quot;https://kotlinlang.org/docs/reference/java-interop.html#null-safety-and-platform-types&quot;&gt;platform types&lt;/a&gt; for which null-checks are relaxed. &lt;a href=&quot;https://kotlinlang.org/docs/reference/java-interop.html#jsr-305-support&quot;&gt;Kotlin&amp;rsquo;s support for JSR 305 annotations&lt;/a&gt; combined with nullability annotations provide null-safety for the related Spring API in Kotlin.</target>
        </trans-unit>
        <trans-unit id="5922f28b26dbbb1f1617030ef276c3026a68bda3" translate="yes" xml:space="preserve">
          <source>Although there is not much code here, quite a lot is going on. We step through the important parts in the next few sections.</source>
          <target state="translated">ここにはあまり多くのコードはありませんが、かなり多くのことが行われています。重要な部分については、次のいくつかのセクションで説明します。</target>
        </trans-unit>
        <trans-unit id="f5674b7af5bf90aed875a78ba560d521abd74a99" translate="yes" xml:space="preserve">
          <source>Although you &lt;em&gt;could&lt;/em&gt; copy Spring Boot jars, we generally recommend that you use a build tool that supports dependency management (such as Maven or Gradle).</source>
          <target state="translated">Although you &lt;em&gt;could&lt;/em&gt; copy Spring Boot jars, we generally recommend that you use a build tool that supports dependency management (such as Maven or Gradle).</target>
        </trans-unit>
        <trans-unit id="eca1bc10b3b7f8d67cec82c793c8b3622220c008" translate="yes" xml:space="preserve">
          <source>Always responds with &lt;code&gt;UP&lt;/code&gt;.</source>
          <target state="translated">Always responds with &lt;code&gt;UP&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="cfef1c0892b980ae9ba635b55d791ec142df9e14" translate="yes" xml:space="preserve">
          <source>Amazon Web Services offers multiple ways to install Spring Boot-based applications, either as traditional web applications (war) or as executable jar files with an embedded web server. The options include:</source>
          <target state="translated">Amazon Web Servicesは、Spring Bootベースのアプリケーションを従来のWebアプリケーション(war)としてインストールする方法と、Webサーバーを組み込んだ実行可能なjarファイルとしてインストールする方法を複数提供しています。オプションには以下のものがあります。</target>
        </trans-unit>
        <trans-unit id="0a0846b4e62f9817ccf24e519a996ee902172044" translate="yes" xml:space="preserve">
          <source>Amount of quiet time required without any classpath changes before a restart is triggered.</source>
          <target state="translated">再起動がトリガーされる前に、クラスパスを変更することなく必要な静かな時間の量。</target>
        </trans-unit>
        <trans-unit id="156ad72ad206b924a7138aa1c60bc27ae617a087" translate="yes" xml:space="preserve">
          <source>Amount of time a connection can sit idle without processing a request, before it is closed by the server.</source>
          <target state="translated">接続がサーバーによって閉じられる前に、リクエストを処理せずにアイドル状態にすることができる時間。</target>
        </trans-unit>
        <trans-unit id="66db6b0b42dcceadda191885c0acd43c71e72784" translate="yes" xml:space="preserve">
          <source>Amount of time before asynchronous request handling times out. If this value is not set, the default timeout of the underlying implementation is used.</source>
          <target state="translated">非同期リクエスト処理がタイムアウトするまでの時間。この値が設定されていない場合、基礎となる実装のデフォルトのタイムアウトが使用されます。</target>
        </trans-unit>
        <trans-unit id="6aedd4dfff28a04ab62c78e3e50082beaa1ab051" translate="yes" xml:space="preserve">
          <source>Amount of time the connector will wait, after accepting a connection, for the request URI line to be presented.</source>
          <target state="translated">コネクタが接続を受け入れた後、リクエスト URI 行が提示されるのを待つ時間。</target>
        </trans-unit>
        <trans-unit id="8cd2aef44cca8ffa321809e51e24c9060aa70d31" translate="yes" xml:space="preserve">
          <source>Amount of time to wait between polling for classpath changes.</source>
          <target state="translated">クラスパス変更のポーリング間の待ち時間。</target>
        </trans-unit>
        <trans-unit id="0cf45f239d1e6dcc39fcc7abe848f1f524da5295" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;ApplicationContext&lt;/code&gt; in an XML file can be added through an &lt;code&gt;@ImportResource&lt;/code&gt; in your &lt;code&gt;Application&lt;/code&gt;. Alternatively, cases where annotation configuration is heavily used already can be recreated in a few lines as &lt;code&gt;@Bean&lt;/code&gt; definitions.</source>
          <target state="translated">An &lt;code&gt;ApplicationContext&lt;/code&gt; in an XML file can be added through an &lt;code&gt;@ImportResource&lt;/code&gt; in your &lt;code&gt;Application&lt;/code&gt; . Alternatively, cases where annotation configuration is heavily used already can be recreated in a few lines as &lt;code&gt;@Bean&lt;/code&gt; definitions.</target>
        </trans-unit>
        <trans-unit id="f3f22099accde3d853798a76f5d22d0ca94b36bf" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;ApplicationContextInitializedEvent&lt;/code&gt; is sent when the &lt;code&gt;ApplicationContext&lt;/code&gt; is prepared and ApplicationContextInitializers have been called but before any bean definitions are loaded.</source>
          <target state="translated">An &lt;code&gt;ApplicationContextInitializedEvent&lt;/code&gt; is sent when the &lt;code&gt;ApplicationContext&lt;/code&gt; is prepared and ApplicationContextInitializers have been called but before any bean definitions are loaded.</target>
        </trans-unit>
        <trans-unit id="35308437231226d1945ae2d3587f0acd62106a51" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;ApplicationEnvironmentPreparedEvent&lt;/code&gt; is sent when the &lt;code&gt;Environment&lt;/code&gt; to be used in the context is known but before the context is created.</source>
          <target state="translated">An &lt;code&gt;ApplicationEnvironmentPreparedEvent&lt;/code&gt; is sent when the &lt;code&gt;Environment&lt;/code&gt; to be used in the context is known but before the context is created.</target>
        </trans-unit>
        <trans-unit id="d85447f0fbd9609546ea9b1c254affdbcacf60b8" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;ApplicationFailedEvent&lt;/code&gt; is sent if there is an exception on startup.</source>
          <target state="translated">An &lt;code&gt;ApplicationFailedEvent&lt;/code&gt; is sent if there is an exception on startup.</target>
        </trans-unit>
        <trans-unit id="819275b0be456d54b78e0b40715cc1df8836b91a" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;ApplicationPreparedEvent&lt;/code&gt; is sent just before the refresh is started but after bean definitions have been loaded.</source>
          <target state="translated">An &lt;code&gt;ApplicationPreparedEvent&lt;/code&gt; is sent just before the refresh is started but after bean definitions have been loaded.</target>
        </trans-unit>
        <trans-unit id="aacf023d1ab5d93153a796b073fc8632ebf1b69a" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;ApplicationReadyEvent&lt;/code&gt; is sent after any &lt;a href=&quot;#boot-features-command-line-runner&quot;&gt;application and command-line runners&lt;/a&gt; have been called.</source>
          <target state="translated">An &lt;code&gt;ApplicationReadyEvent&lt;/code&gt; is sent after any &lt;a href=&quot;#boot-features-command-line-runner&quot;&gt;application and command-line runners&lt;/a&gt; have been called.</target>
        </trans-unit>
        <trans-unit id="796effa5af98df9c270e27a1225c2d7b339c94fc" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;ApplicationStartedEvent&lt;/code&gt; is sent after the context has been refreshed but before any application and command-line runners have been called.</source>
          <target state="translated">An &lt;code&gt;ApplicationStartedEvent&lt;/code&gt; is sent after the context has been refreshed but before any application and command-line runners have been called.</target>
        </trans-unit>
        <trans-unit id="42c10259657d6b62cf302d1d315350cfc707e226" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;ApplicationStartingEvent&lt;/code&gt; is sent at the start of a run but before any processing, except for the registration of listeners and initializers.</source>
          <target state="translated">An &lt;code&gt;ApplicationStartingEvent&lt;/code&gt; is sent at the start of a run but before any processing, except for the registration of listeners and initializers.</target>
        </trans-unit>
        <trans-unit id="a2f942ab2e1747322dae376099235c9a1b47a76c" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;AvailabilityChangeEvent&lt;/code&gt; is sent right after with &lt;code&gt;LivenessState.CORRECT&lt;/code&gt; to indicate that the application is considered as live.</source>
          <target state="translated">An &lt;code&gt;AvailabilityChangeEvent&lt;/code&gt; is sent right after with &lt;code&gt;LivenessState.CORRECT&lt;/code&gt; to indicate that the application is considered as live.</target>
        </trans-unit>
        <trans-unit id="d61241c9df3f86a4113358c0c5ec793fe467c939" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;AvailabilityChangeEvent&lt;/code&gt; is sent right after with &lt;code&gt;ReadinessState.ACCEPTING_TRAFFIC&lt;/code&gt; to indicate that the application is ready to service requests.</source>
          <target state="translated">An &lt;code&gt;AvailabilityChangeEvent&lt;/code&gt; is sent right after with &lt;code&gt;ReadinessState.ACCEPTING_TRAFFIC&lt;/code&gt; to indicate that the application is ready to service requests.</target>
        </trans-unit>
        <trans-unit id="c237deca6fd6189691b85f915410f93d54916ca4" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;InternalResourceViewResolver&lt;/code&gt; named &amp;lsquo;defaultViewResolver&amp;rsquo;. This one locates physical resources that can be rendered by using the &lt;code&gt;DefaultServlet&lt;/code&gt; (including static resources and JSP pages, if you use those). It applies a prefix and a suffix to the view name and then looks for a physical resource with that path in the servlet context (the defaults are both empty but are accessible for external configuration through &lt;code&gt;spring.mvc.view.prefix&lt;/code&gt; and &lt;code&gt;spring.mvc.view.suffix&lt;/code&gt;). You can override it by providing a bean of the same type.</source>
          <target state="translated">An &lt;code&gt;InternalResourceViewResolver&lt;/code&gt; named &amp;lsquo;defaultViewResolver&amp;rsquo;. This one locates physical resources that can be rendered by using the &lt;code&gt;DefaultServlet&lt;/code&gt; (including static resources and JSP pages, if you use those). It applies a prefix and a suffix to the view name and then looks for a physical resource with that path in the servlet context (the defaults are both empty but are accessible for external configuration through &lt;code&gt;spring.mvc.view.prefix&lt;/code&gt; and &lt;code&gt;spring.mvc.view.suffix&lt;/code&gt; ). You can override it by providing a bean of the same type.</target>
        </trans-unit>
        <trans-unit id="6d4cfe8389a53a6582e46f387fcc34fdeb0843a2" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;LdapContextSource&lt;/code&gt; is auto-configured based on these settings. If a &lt;code&gt;DirContextAuthenticationStrategy&lt;/code&gt; bean is available, it is associated to the auto-configured &lt;code&gt;LdapContextSource&lt;/code&gt;. If you need to customize it, for instance to use a &lt;code&gt;PooledContextSource&lt;/code&gt;, you can still inject the auto-configured &lt;code&gt;LdapContextSource&lt;/code&gt;. Make sure to flag your customized &lt;code&gt;ContextSource&lt;/code&gt; as &lt;code&gt;@Primary&lt;/code&gt; so that the auto-configured &lt;code&gt;LdapTemplate&lt;/code&gt; uses it.</source>
          <target state="translated">An &lt;code&gt;LdapContextSource&lt;/code&gt; is auto-configured based on these settings. If a &lt;code&gt;DirContextAuthenticationStrategy&lt;/code&gt; bean is available, it is associated to the auto-configured &lt;code&gt;LdapContextSource&lt;/code&gt; . If you need to customize it, for instance to use a &lt;code&gt;PooledContextSource&lt;/code&gt; , you can still inject the auto-configured &lt;code&gt;LdapContextSource&lt;/code&gt; . Make sure to flag your customized &lt;code&gt;ContextSource&lt;/code&gt; as &lt;code&gt;@Primary&lt;/code&gt; so that the auto-configured &lt;code&gt;LdapTemplate&lt;/code&gt; uses it.</target>
        </trans-unit>
        <trans-unit id="8ab0d1c18c5ce1a8da1b16a81e92b1f3bbd04f80" translate="yes" xml:space="preserve">
          <source>An HTTP range request can be used to request part of an HTTP resource. When using Spring MVC or Spring Web Flux, operations that return a &lt;code&gt;org.springframework.core.io.Resource&lt;/code&gt; automatically support range requests.</source>
          <target state="translated">An HTTP range request can be used to request part of an HTTP resource. When using Spring MVC or Spring Web Flux, operations that return a &lt;code&gt;org.springframework.core.io.Resource&lt;/code&gt; automatically support range requests.</target>
        </trans-unit>
        <trans-unit id="d8c44053d488f3228979d42f6e31e92a7fe806c7" translate="yes" xml:space="preserve">
          <source>An SQL database can be initialized in different ways depending on what your stack is. Of course, you can also do it manually, provided the database is a separate process. It is recommended to use a single mechanism for schema generation.</source>
          <target state="translated">SQLデータベースは、スタックが何であるかによって異なる方法で初期化することができます。もちろん、データベースが別のプロセスであることを条件に、手動で行うこともできます。スキーマ生成には単一のメカニズムを使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="ce4a61a34df9522349f1fd1d6b0a21e4d7f9050d" translate="yes" xml:space="preserve">
          <source>An actuator is a manufacturing term that refers to a mechanical device for moving or controlling something. Actuators can generate a large amount of motion from a small change.</source>
          <target state="translated">アクチュエータとは、何かを動かしたり制御したりするための機械装置を指す製造用語です。アクチュエータは、小さな変化から大きな運動を発生させることができます。</target>
        </trans-unit>
        <trans-unit id="00ada2403e1174ab693fb3aa3ae13511faefd4b9" translate="yes" xml:space="preserve">
          <source>An application is considered ready as soon as application and command-line runners have been called, see &lt;a href=&quot;#boot-features-application-events-and-listeners&quot;&gt;Spring Boot application lifecycle and related Application Events&lt;/a&gt;.</source>
          <target state="translated">An application is considered ready as soon as application and command-line runners have been called, see &lt;a href=&quot;#boot-features-application-events-and-listeners&quot;&gt;Spring Boot application lifecycle and related Application Events&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="792a92fe2932932f02186f79c4f7d856b085c08c" translate="yes" xml:space="preserve">
          <source>An auto-configuration can be affected by many factors: user configuration (&lt;code&gt;@Bean&lt;/code&gt; definition and &lt;code&gt;Environment&lt;/code&gt; customization), condition evaluation (presence of a particular library), and others. Concretely, each test should create a well defined &lt;code&gt;ApplicationContext&lt;/code&gt; that represents a combination of those customizations. &lt;code&gt;ApplicationContextRunner&lt;/code&gt; provides a great way to achieve that.</source>
          <target state="translated">An auto-configuration can be affected by many factors: user configuration ( &lt;code&gt;@Bean&lt;/code&gt; definition and &lt;code&gt;Environment&lt;/code&gt; customization), condition evaluation (presence of a particular library), and others. Concretely, each test should create a well defined &lt;code&gt;ApplicationContext&lt;/code&gt; that represents a combination of those customizations. &lt;code&gt;ApplicationContextRunner&lt;/code&gt; provides a great way to achieve that.</target>
        </trans-unit>
        <trans-unit id="44cedd2576eba38b25c9f15bacd404da2f5ea971" translate="yes" xml:space="preserve">
          <source>An important aspect of the Kubernetes Probes support is its consistency with the application lifecycle. Spring Boot publishes &lt;a href=&quot;spring-boot-features#boot-features-application-events-and-listeners&quot;&gt;Application Events during startup and shutdown&lt;/a&gt;.</source>
          <target state="translated">An important aspect of the Kubernetes Probes support is its consistency with the application lifecycle. Spring Boot publishes &lt;a href=&quot;spring-boot-features#boot-features-application-events-and-listeners&quot;&gt;Application Events during startup and shutdown&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="dccdfa8a335aa144f20db77ab460facf938fbf0b" translate="yes" xml:space="preserve">
          <source>An operation on a web endpoint or a web-specific endpoint extension can receive the current &lt;code&gt;java.security.Principal&lt;/code&gt; or &lt;code&gt;org.springframework.boot.actuate.endpoint.SecurityContext&lt;/code&gt; as a method parameter. The former is typically used in conjunction with &lt;code&gt;@Nullable&lt;/code&gt; to provide different behavior for authenticated and unauthenticated users. The latter is typically used to perform authorization checks using its &lt;code&gt;isUserInRole(String)&lt;/code&gt; method.</source>
          <target state="translated">An operation on a web endpoint or a web-specific endpoint extension can receive the current &lt;code&gt;java.security.Principal&lt;/code&gt; or &lt;code&gt;org.springframework.boot.actuate.endpoint.SecurityContext&lt;/code&gt; as a method parameter. The former is typically used in conjunction with &lt;code&gt;@Nullable&lt;/code&gt; to provide different behavior for authenticated and unauthenticated users. The latter is typically used to perform authorization checks using its &lt;code&gt;isUserInRole(String)&lt;/code&gt; method.</target>
        </trans-unit>
        <trans-unit id="383ad719814c98f9fd193b7267b323e918d73f78" translate="yes" xml:space="preserve">
          <source>An regular &lt;code&gt;int&lt;/code&gt; representation (using days as the default unit unless a &lt;code&gt;@PeriodUnit&lt;/code&gt; has been specified)</source>
          <target state="translated">An regular &lt;code&gt;int&lt;/code&gt; representation (using days as the default unit unless a &lt;code&gt;@PeriodUnit&lt;/code&gt; has been specified)</target>
        </trans-unit>
        <trans-unit id="81fef88f7151b8d643818f2267aa6d76ae94f344" translate="yes" xml:space="preserve">
          <source>And the following example shows one way to set up the starters in Gradle:</source>
          <target state="translated">そして以下の例は、Gradleでスターターを設定する方法の1つです。</target>
        </trans-unit>
        <trans-unit id="c1f98019e272d82ac5eee3c60091efe0db206cfb" translate="yes" xml:space="preserve">
          <source>Another source of confusion is classpath scanning. Assume that, while you structured your code in a sensible way, you need to scan an additional package. Your application may resemble the following code:</source>
          <target state="translated">もう一つの混乱の原因は、クラスパスのスキャンです。あなたのコードを賢明な方法で構成している間に、追加のパッケージをスキャンする必要があると仮定してください。あなたのアプリケーションは以下のコードに似ているかもしれません。</target>
        </trans-unit>
        <trans-unit id="8619381857513024eb4961c179e0f17ea04ce818" translate="yes" xml:space="preserve">
          <source>Another useful feature of the &lt;code&gt;info&lt;/code&gt; endpoint is its ability to publish information about the state of your &lt;code&gt;git&lt;/code&gt; source code repository when the project was built. If a &lt;code&gt;GitProperties&lt;/code&gt; bean is available, the &lt;code&gt;git.branch&lt;/code&gt;, &lt;code&gt;git.commit.id&lt;/code&gt;, and &lt;code&gt;git.commit.time&lt;/code&gt; properties are exposed.</source>
          <target state="translated">Another useful feature of the &lt;code&gt;info&lt;/code&gt; endpoint is its ability to publish information about the state of your &lt;code&gt;git&lt;/code&gt; source code repository when the project was built. If a &lt;code&gt;GitProperties&lt;/code&gt; bean is available, the &lt;code&gt;git.branch&lt;/code&gt; , &lt;code&gt;git.commit.id&lt;/code&gt; , and &lt;code&gt;git.commit.time&lt;/code&gt; properties are exposed.</target>
        </trans-unit>
        <trans-unit id="02cc2a69720bd8bf1661deb23018e16470c069da" translate="yes" xml:space="preserve">
          <source>Ant</source>
          <target state="translated">Ant</target>
        </trans-unit>
        <trans-unit id="a401853051fa74b3ecf9bfb2664f2754a3faa477" translate="yes" xml:space="preserve">
          <source>Any &lt;code&gt;HttpMessageConverter&lt;/code&gt; bean that is present in the context is added to the list of converters. You can also override default converters in the same way.</source>
          <target state="translated">Any &lt;code&gt;HttpMessageConverter&lt;/code&gt; bean that is present in the context is added to the list of converters. You can also override default converters in the same way.</target>
        </trans-unit>
        <trans-unit id="ed37d320c5033d03ec308b53ffbbfdca5a4ce085" translate="yes" xml:space="preserve">
          <source>Any &lt;code&gt;Servlet&lt;/code&gt;, &lt;code&gt;Filter&lt;/code&gt;, or servlet &lt;code&gt;*Listener&lt;/code&gt; instance that is a Spring bean is registered with the embedded container. This can be particularly convenient if you want to refer to a value from your &lt;code&gt;application.properties&lt;/code&gt; during configuration.</source>
          <target state="translated">Any &lt;code&gt;Servlet&lt;/code&gt; , &lt;code&gt;Filter&lt;/code&gt; , or servlet &lt;code&gt;*Listener&lt;/code&gt; instance that is a Spring bean is registered with the embedded container. This can be particularly convenient if you want to refer to a value from your &lt;code&gt;application.properties&lt;/code&gt; during configuration.</target>
        </trans-unit>
        <trans-unit id="4c1cdd8fa317e6b79e96ea43846837cec3355f68" translate="yes" xml:space="preserve">
          <source>Any &lt;code&gt;java.lang.Enum&lt;/code&gt;: Lists the possible values for the property. (We recommend defining the property with the &lt;code&gt;Enum&lt;/code&gt; type, as no further hint should be required for the IDE to auto-complete the values)</source>
          <target state="translated">Any &lt;code&gt;java.lang.Enum&lt;/code&gt; : Lists the possible values for the property. (We recommend defining the property with the &lt;code&gt;Enum&lt;/code&gt; type, as no further hint should be required for the IDE to auto-complete the values)</target>
        </trans-unit>
        <trans-unit id="97decb1d9664cf0136c81fed9708b0bd5475167d" translate="yes" xml:space="preserve">
          <source>Any JavaBean property defined with the &lt;code&gt;another&lt;/code&gt; prefix is mapped onto that &lt;code&gt;AnotherComponent&lt;/code&gt; bean in manner similar to the preceding &lt;code&gt;AcmeProperties&lt;/code&gt; example.</source>
          <target state="translated">Any JavaBean property defined with the &lt;code&gt;another&lt;/code&gt; prefix is mapped onto that &lt;code&gt;AnotherComponent&lt;/code&gt; bean in manner similar to the preceding &lt;code&gt;AcmeProperties&lt;/code&gt; example.</target>
        </trans-unit>
        <trans-unit id="980538348e8baa97e81268e0defa6af0ae22b2f1" translate="yes" xml:space="preserve">
          <source>Any Spring &lt;code&gt;@RestController&lt;/code&gt; in a Spring Boot application should render JSON response by default as long as Jackson2 is on the classpath, as shown in the following example:</source>
          <target state="translated">Any Spring &lt;code&gt;@RestController&lt;/code&gt; in a Spring Boot application should render JSON response by default as long as Jackson2 is on the classpath, as shown in the following example:</target>
        </trans-unit>
        <trans-unit id="3f5d48a3b578979d22ade982ecefad1bd3b03a85" translate="yes" xml:space="preserve">
          <source>Any additional parameter that the provider supports (check the documentation of the provider for more details).</source>
          <target state="translated">プロバイダがサポートする追加のパラメータ(詳細はプロバイダのドキュメントを確認してください)。</target>
        </trans-unit>
        <trans-unit id="61e30c029f6ef74d5c4ed9d2c26530f3102e86db" translate="yes" xml:space="preserve">
          <source>Any beans of type &lt;code&gt;com.fasterxml.jackson.databind.Module&lt;/code&gt; are automatically registered with the auto-configured &lt;code&gt;Jackson2ObjectMapperBuilder&lt;/code&gt; and are applied to any &lt;code&gt;ObjectMapper&lt;/code&gt; instances that it creates. This provides a global mechanism for contributing custom modules when you add new features to your application.</source>
          <target state="translated">Any beans of type &lt;code&gt;com.fasterxml.jackson.databind.Module&lt;/code&gt; are automatically registered with the auto-configured &lt;code&gt;Jackson2ObjectMapperBuilder&lt;/code&gt; and are applied to any &lt;code&gt;ObjectMapper&lt;/code&gt; instances that it creates. This provides a global mechanism for contributing custom modules when you add new features to your application.</target>
        </trans-unit>
        <trans-unit id="7408c1c09257cba54a0ef9455c0285b59d9a7316" translate="yes" xml:space="preserve">
          <source>Any classes annotated with &lt;code&gt;@Entity&lt;/code&gt;, &lt;code&gt;@Embeddable&lt;/code&gt;, or &lt;code&gt;@MappedSuperclass&lt;/code&gt; are considered. A typical entity class resembles the following example:</source>
          <target state="translated">Any classes annotated with &lt;code&gt;@Entity&lt;/code&gt; , &lt;code&gt;@Embeddable&lt;/code&gt; , or &lt;code&gt;@MappedSuperclass&lt;/code&gt; are considered. A typical entity class resembles the following example:</target>
        </trans-unit>
        <trans-unit id="61c0c2b50b6874956ef13b46d8922375df78841f" translate="yes" xml:space="preserve">
          <source>Any compliant JCache (JSR-107) implementation</source>
          <target state="translated">すべての準拠したJCache(JSR-107)の実装</target>
        </trans-unit>
        <trans-unit id="5024b8dd9634f1675ebe39ecf8fbc1c0381d5954" translate="yes" xml:space="preserve">
          <source>Any profiles activated in &lt;code&gt;.spring-boot-devtools.properties&lt;/code&gt; will not affect the loading of &lt;a href=&quot;spring-boot-features#boot-features-external-config-files-profile-specific&quot;&gt;profile-specific configuration files&lt;/a&gt;. Profile specific filenames (of the form &lt;code&gt;spring-boot-devtools-&amp;lt;profile&amp;gt;.properties&lt;/code&gt;) and &lt;code&gt;spring.config.activate.on-profile&lt;/code&gt; documents in both YAML and Properties files are not supported.</source>
          <target state="translated">Any profiles activated in &lt;code&gt;.spring-boot-devtools.properties&lt;/code&gt; will not affect the loading of &lt;a href=&quot;spring-boot-features#boot-features-external-config-files-profile-specific&quot;&gt;profile-specific configuration files&lt;/a&gt;. Profile specific filenames (of the form &lt;code&gt;spring-boot-devtools-&amp;lt;profile&amp;gt;.properties&lt;/code&gt; ) and &lt;code&gt;spring.config.activate.on-profile&lt;/code&gt; documents in both YAML and Properties files are not supported.</target>
        </trans-unit>
        <trans-unit id="9bd8af60d1a9f9171864567d51ae5b67d1a9f363" translate="yes" xml:space="preserve">
          <source>Any properties added to these file apply to &lt;em&gt;all&lt;/em&gt; Spring Boot applications on your machine that use devtools. For example, to configure restart to always use a &lt;a href=&quot;#using-boot-devtools-restart-triggerfile&quot;&gt;trigger file&lt;/a&gt;, you would add the following property to your &lt;code&gt;spring-boot-devtools&lt;/code&gt; file:</source>
          <target state="translated">Any properties added to these file apply to &lt;em&gt;all&lt;/em&gt; Spring Boot applications on your machine that use devtools. For example, to configure restart to always use a &lt;a href=&quot;#using-boot-devtools-restart-triggerfile&quot;&gt;trigger file&lt;/a&gt;, you would add the following property to your &lt;code&gt;spring-boot-devtools&lt;/code&gt; file:</target>
        </trans-unit>
        <trans-unit id="5096458a933b3e9a0a74cc545292c9239d326ab6" translate="yes" xml:space="preserve">
          <source>Any update to the file will trigger a check, but restart only actually occurs if Devtools has detected it has something to do.</source>
          <target state="translated">ファイルへの更新があればチェックのトリガーとなりますが、再起動は実際にはDevtoolsが何かを持っていることを検出した場合にのみ発生します。</target>
        </trans-unit>
        <trans-unit id="95f6ceb046e96e9b383a16a6cdf2e8713f5c10e1" translate="yes" xml:space="preserve">
          <source>App Engine Standard requires you to use WAR packaging. Follow &lt;a href=&quot;https://github.com/GoogleCloudPlatform/java-docs-samples/tree/master/appengine-java8/springboot-helloworld/README.md&quot;&gt;these steps&lt;/a&gt; to deploy App Engine Standard application to Google Cloud.</source>
          <target state="translated">App Engine Standard requires you to use WAR packaging. Follow &lt;a href=&quot;https://github.com/GoogleCloudPlatform/java-docs-samples/tree/master/appengine-java8/springboot-helloworld/README.md&quot;&gt;these steps&lt;/a&gt; to deploy App Engine Standard application to Google Cloud.</target>
        </trans-unit>
        <trans-unit id="3cce5da3318c16cca4bc2dc80aa113d3bc4d1d7b" translate="yes" xml:space="preserve">
          <source>AppOptics</source>
          <target state="translated">AppOptics</target>
        </trans-unit>
        <trans-unit id="4ce97b47e7724b37d9f133723f5472c18ae50c4b" translate="yes" xml:space="preserve">
          <source>AppOptics API token.</source>
          <target state="translated">AppOptics API トークン。</target>
        </trans-unit>
        <trans-unit id="1433dea65cc75495b574960d696977fabcc90a97" translate="yes" xml:space="preserve">
          <source>Append to log.</source>
          <target state="translated">ログに追加します。</target>
        </trans-unit>
        <trans-unit id="310efe41643f5cc89440741df972c1147eb711bf" translate="yes" xml:space="preserve">
          <source>Appender pattern for log date format.</source>
          <target state="translated">ログの日付書式のアペンダパターン。</target>
        </trans-unit>
        <trans-unit id="b6ab72570bb697f6a55129e969e1c0b075c8df63" translate="yes" xml:space="preserve">
          <source>Appender pattern for log date format. Supported only with the default Logback setup.</source>
          <target state="translated">ログの日付フォーマットのアペンダパターン。デフォルトのログバック設定でのみサポートされます。</target>
        </trans-unit>
        <trans-unit id="46d788050c85b6ea368c3eb65752839ebbbc8a22" translate="yes" xml:space="preserve">
          <source>Appender pattern for log level. Supported only with the default Logback setup.</source>
          <target state="translated">ログレベルのアペンダパターン。デフォルトのLogback設定でのみサポートされます。</target>
        </trans-unit>
        <trans-unit id="d60c2bfca8cfd17175b2322cdde0e784e477893f" translate="yes" xml:space="preserve">
          <source>Appender pattern for output to a file. Supported only with the default Logback setup.</source>
          <target state="translated">ファイルに出力するアペンダパターン。デフォルトのログバック設定でのみサポートされます。</target>
        </trans-unit>
        <trans-unit id="4c346667aa6aec3c6cb240a0d6b57cf2500a6c1e" translate="yes" xml:space="preserve">
          <source>Appender pattern for output to the console. Supported only with the default Logback setup.</source>
          <target state="translated">コンソールに出力するアペンダパターン。デフォルトのログバック設定でのみサポートされます。</target>
        </trans-unit>
        <trans-unit id="5b65483c9cecd9fa72e1970942ddc35ff2e860ac" translate="yes" xml:space="preserve">
          <source>Appendix application properties</source>
          <target state="translated">付録アプリケーションのプロパティ</target>
        </trans-unit>
        <trans-unit id="a9a41c7ea94ea30afbc954ebf852cf6e8ef34c53" translate="yes" xml:space="preserve">
          <source>Appendix auto configuration classes</source>
          <target state="translated">付録 オートコンフィグレーションクラス</target>
        </trans-unit>
        <trans-unit id="5fb89c299bdaa3fc574e5b49dea1452651b59285" translate="yes" xml:space="preserve">
          <source>Appendix configuration metadata</source>
          <target state="translated">付録構成メタデータ</target>
        </trans-unit>
        <trans-unit id="ad3748e507426b37f5ac7e4f41a1c887576a261e" translate="yes" xml:space="preserve">
          <source>Appendix dependency versions</source>
          <target state="translated">付録の依存関係バージョン</target>
        </trans-unit>
        <trans-unit id="96c57a760a359cebfa7062a1a5de473d880d6041" translate="yes" xml:space="preserve">
          <source>Appendix executable jar format</source>
          <target state="translated">付録実行可能なjar形式</target>
        </trans-unit>
        <trans-unit id="420fa56f93617aaf73118775c9f9c1a6ca59db46" translate="yes" xml:space="preserve">
          <source>Appendix test auto configuration</source>
          <target state="translated">付録テスト自動設定</target>
        </trans-unit>
        <trans-unit id="e38bc7820a49f683041025ca0b1306817f6b80af" translate="yes" xml:space="preserve">
          <source>Application Development, Configuration, Embedded Servers, Data Access, and many more.</source>
          <target state="translated">アプリケーション開発、設定、組み込みサーバ、データアクセスなど、様々な分野で活躍しています。</target>
        </trans-unit>
        <trans-unit id="3252c8dd86809c12991ca3ce9c641976809cb4ca" translate="yes" xml:space="preserve">
          <source>Application Properties</source>
          <target state="translated">アプリケーションのプロパティ</target>
        </trans-unit>
        <trans-unit id="a1536e47ce01571a8cf191d070a03d2e47763a1d" translate="yes" xml:space="preserve">
          <source>Application classes should be placed in a nested &lt;code&gt;BOOT-INF/classes&lt;/code&gt; directory. Dependencies should be placed in a nested &lt;code&gt;BOOT-INF/lib&lt;/code&gt; directory.</source>
          <target state="translated">Application classes should be placed in a nested &lt;code&gt;BOOT-INF/classes&lt;/code&gt; directory. Dependencies should be placed in a nested &lt;code&gt;BOOT-INF/lib&lt;/code&gt; directory.</target>
        </trans-unit>
        <trans-unit id="083568119644192870752ffe7fc1969279da3fdd" translate="yes" xml:space="preserve">
          <source>Application components can retrieve the current availability state at any time, by injecting the &lt;code&gt;ApplicationAvailability&lt;/code&gt; interface and calling methods on it. More often, applications will want to listen to state updates or update the state of the application.</source>
          <target state="translated">Application components can retrieve the current availability state at any time, by injecting the &lt;code&gt;ApplicationAvailability&lt;/code&gt; interface and calling methods on it. More often, applications will want to listen to state updates or update the state of the application.</target>
        </trans-unit>
        <trans-unit id="008ce5a17a85312c92e14c7b2b0c0a59196e2e4b" translate="yes" xml:space="preserve">
          <source>Application events are sent by using Spring Framework&amp;rsquo;s event publishing mechanism. Part of this mechanism ensures that an event published to the listeners in a child context is also published to the listeners in any ancestor contexts. As a result of this, if your application uses a hierarchy of &lt;code&gt;SpringApplication&lt;/code&gt; instances, a listener may receive multiple instances of the same type of application event.</source>
          <target state="translated">Application events are sent by using Spring Framework&amp;rsquo;s event publishing mechanism. Part of this mechanism ensures that an event published to the listeners in a child context is also published to the listeners in any ancestor contexts. As a result of this, if your application uses a hierarchy of &lt;code&gt;SpringApplication&lt;/code&gt; instances, a listener may receive multiple instances of the same type of application event.</target>
        </trans-unit>
        <trans-unit id="b5e03c7321220c2b16ec1dfec700f0d1fde434d0" translate="yes" xml:space="preserve">
          <source>Application events are sent in the following order, as your application runs:</source>
          <target state="translated">アプリケーションの実行に伴い、アプリケーションイベントは次の順序で送信されます。</target>
        </trans-unit>
        <trans-unit id="84334dff975603618eaa8981a49aad9eebb2990c" translate="yes" xml:space="preserve">
          <source>Application information exposes various information collected from all &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/info/InfoContributor.java&quot;&gt;&lt;code&gt;InfoContributor&lt;/code&gt;&lt;/a&gt; beans defined in your &lt;code&gt;ApplicationContext&lt;/code&gt;. Spring Boot includes a number of auto-configured &lt;code&gt;InfoContributor&lt;/code&gt; beans, and you can write your own.</source>
          <target state="translated">Application information exposes various information collected from all &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/info/InfoContributor.java&quot;&gt; &lt;code&gt;InfoContributor&lt;/code&gt; &lt;/a&gt; beans defined in your &lt;code&gt;ApplicationContext&lt;/code&gt; . Spring Boot includes a number of auto-configured &lt;code&gt;InfoContributor&lt;/code&gt; beans, and you can write your own.</target>
        </trans-unit>
        <trans-unit id="cf171227ff1428401819ab3800da2acc36ae658c" translate="yes" xml:space="preserve">
          <source>Application name.</source>
          <target state="translated">アプリケーション名。</target>
        </trans-unit>
        <trans-unit id="d762af80efe2e32154fc05c9774fb8a0f7b3b165" translate="yes" xml:space="preserve">
          <source>Application properties</source>
          <target state="translated">アプリケーションのプロパティ</target>
        </trans-unit>
        <trans-unit id="55d767b96724fd2a9af8dc15039b884b7a6310e8" translate="yes" xml:space="preserve">
          <source>Application properties may import further config data from other locations using the &lt;code&gt;spring.config.import&lt;/code&gt; property. Imports are processed as they are discovered, and are treated as an additional documents inserted immediately below the one that declares the import.</source>
          <target state="translated">Application properties may import further config data from other locations using the &lt;code&gt;spring.config.import&lt;/code&gt; property. Imports are processed as they are discovered, and are treated as an additional documents inserted immediately below the one that declares the import.</target>
        </trans-unit>
        <trans-unit id="fb33f6ac5c613a0c0e0abe2a199936b39522535c" translate="yes" xml:space="preserve">
          <source>Application shutdown phase</source>
          <target state="translated">アプリケーションシャットダウンフェーズ</target>
        </trans-unit>
        <trans-unit id="3cffe65545abe506f6625314e60e111b03bda56d" translate="yes" xml:space="preserve">
          <source>Application startup phase</source>
          <target state="translated">アプリケーション起動フェーズ</target>
        </trans-unit>
        <trans-unit id="f638df42412294394f75f2c765076a4f808666cf" translate="yes" xml:space="preserve">
          <source>Applications can fall into more than one category:</source>
          <target state="translated">アプリケーションは複数のカテゴリーに分類されることがあります。</target>
        </trans-unit>
        <trans-unit id="7d16ea541bcc4bdbf06414b2cfeab7ae51137197" translate="yes" xml:space="preserve">
          <source>Applications deployed on Kubernetes can provide information about their internal state with &lt;a href=&quot;https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes&quot;&gt;Container Probes&lt;/a&gt;. Depending on &lt;a href=&quot;https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/&quot;&gt;your Kubernetes configuration&lt;/a&gt;, the kubelet will call those probes and react to the result.</source>
          <target state="translated">Applications deployed on Kubernetes can provide information about their internal state with &lt;a href=&quot;https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes&quot;&gt;Container Probes&lt;/a&gt;. Depending on &lt;a href=&quot;https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/&quot;&gt;your Kubernetes configuration&lt;/a&gt;, the kubelet will call those probes and react to the result.</target>
        </trans-unit>
        <trans-unit id="163e24e17004fd46028810d77ad707c0f624d214" translate="yes" xml:space="preserve">
          <source>Applications that are not already Spring applications might be convertible to Spring Boot applications, and the previously mentioned guidance may help. However, you may yet encounter problems. In that case, we suggest &lt;a href=&quot;https://stackoverflow.com/questions/tagged/spring-boot&quot;&gt;asking questions on Stack Overflow with a tag of &lt;code&gt;spring-boot&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Applications that are not already Spring applications might be convertible to Spring Boot applications, and the previously mentioned guidance may help. However, you may yet encounter problems. In that case, we suggest &lt;a href=&quot;https://stackoverflow.com/questions/tagged/spring-boot&quot;&gt;asking questions on Stack Overflow with a tag of &lt;code&gt;spring-boot&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="4cdb4b06cf0d0530c068c0f1171bf58f8b2e3681" translate="yes" xml:space="preserve">
          <source>Applications that use &lt;code&gt;spring-boot-devtools&lt;/code&gt; automatically restart whenever files on the classpath change. This can be a useful feature when working in an IDE, as it gives a very fast feedback loop for code changes. By default, any entry on the classpath that points to a directory is monitored for changes. Note that certain resources, such as static assets and view templates, &lt;a href=&quot;#using-boot-devtools-restart-exclude&quot;&gt;do not need to restart the application&lt;/a&gt;.</source>
          <target state="translated">Applications that use &lt;code&gt;spring-boot-devtools&lt;/code&gt; automatically restart whenever files on the classpath change. This can be a useful feature when working in an IDE, as it gives a very fast feedback loop for code changes. By default, any entry on the classpath that points to a directory is monitored for changes. Note that certain resources, such as static assets and view templates, &lt;a href=&quot;#using-boot-devtools-restart-exclude&quot;&gt;do not need to restart the application&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="d1059c81aca8ce78d75e312142ef5d5851030956" translate="yes" xml:space="preserve">
          <source>Applications with a &lt;code&gt;web.xml&lt;/code&gt;.</source>
          <target state="translated">Applications with a &lt;code&gt;web.xml&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c617e161c40c7370ff2744d917e3bd5124a2bebb" translate="yes" xml:space="preserve">
          <source>Applications with a context hierarchy.</source>
          <target state="translated">コンテキスト階層を持つアプリケーション。</target>
        </trans-unit>
        <trans-unit id="2db8bf51876c964ca2dd8861269a3f172f933e69" translate="yes" xml:space="preserve">
          <source>Applications without a context hierarchy.</source>
          <target state="translated">コンテキスト階層を持たないアプリケーション。</target>
        </trans-unit>
        <trans-unit id="1bdb2640a6fcc74052ead339c66dbfbb7b1ae2d1" translate="yes" xml:space="preserve">
          <source>Arbitrary properties to add to the info endpoint.</source>
          <target state="translated">info エンドポイントに追加する任意のプロパティ。</target>
        </trans-unit>
        <trans-unit id="1220c8b28eaaf92a3e181a7a35327288434a8f91" translate="yes" xml:space="preserve">
          <source>Architecture guide</source>
          <target state="translated">建築ガイド</target>
        </trans-unit>
        <trans-unit id="857b6e76f7c49e9d744eb8ebb007dac12c197a23" translate="yes" xml:space="preserve">
          <source>Armed with this information, we can load specific nested entries by seeking to the appropriate part of the outer jar. We do not need to unpack the archive, and we do not need to read all entry data into memory.</source>
          <target state="translated">この情報で武装して、外側のjarの適切な部分を探すことで、特定の入れ子になったエントリをロードすることができます。アーカイブを解凍する必要はありませんし、すべてのエントリデータをメモリに読み込む必要もありません。</target>
        </trans-unit>
        <trans-unit id="6fd6c936ddb1bcfc5c85c015b4e1a1b7ed717ce8" translate="yes" xml:space="preserve">
          <source>Artemis broker host.</source>
          <target state="translated">アルテミスブローカーホスト。</target>
        </trans-unit>
        <trans-unit id="d4304d965113e5f5c2bde30b2ab8628d50332126" translate="yes" xml:space="preserve">
          <source>Artemis broker port.</source>
          <target state="translated">アルテミスのブローカーポート。</target>
        </trans-unit>
        <trans-unit id="40dedb1a715fd0a95b0a9f18009f8e5f38c2cb2f" translate="yes" xml:space="preserve">
          <source>Artemis configuration is controlled by external configuration properties in &lt;code&gt;spring.artemis.*&lt;/code&gt;. For example, you might declare the following section in &lt;code&gt;application.properties&lt;/code&gt;:</source>
          <target state="translated">Artemisの構成は、 &lt;code&gt;spring.artemis.*&lt;/code&gt; 外部構成プロパティによって制御されます。たとえば、 &lt;code&gt;application.properties&lt;/code&gt; で次のセクションを宣言できます。</target>
        </trans-unit>
        <trans-unit id="4f6fea8a64c6ee0af1591256a67937300ff52cee" translate="yes" xml:space="preserve">
          <source>Artemis deployment mode, auto-detected by default.</source>
          <target state="translated">アルテミスの展開モード、デフォルトでは自動検出されます。</target>
        </trans-unit>
        <trans-unit id="ca6ffa48cad2f78f624d816a2099332f808de3ce" translate="yes" xml:space="preserve">
          <source>Artifact ID</source>
          <target state="translated">アーティファクトID</target>
        </trans-unit>
        <trans-unit id="121b6ddbd288a8dcc9ac840013b397400621c161" translate="yes" xml:space="preserve">
          <source>As &lt;a href=&quot;#howto-add-a-servlet-filter-or-listener-as-spring-bean&quot;&gt;described earlier&lt;/a&gt;, any &lt;code&gt;Servlet&lt;/code&gt; or &lt;code&gt;Filter&lt;/code&gt; beans are registered with the servlet container automatically. To disable registration of a particular &lt;code&gt;Filter&lt;/code&gt; or &lt;code&gt;Servlet&lt;/code&gt; bean, create a registration bean for it and mark it as disabled, as shown in the following example:</source>
          <target state="translated">&lt;a href=&quot;#howto-add-a-servlet-filter-or-listener-as-spring-bean&quot;&gt;前述した&lt;/a&gt;、任意の &lt;code&gt;Servlet&lt;/code&gt; または &lt;code&gt;Filter&lt;/code&gt; 豆を自動的にサーブレットコンテナに登録されています。次の例に示すように、特定の &lt;code&gt;Filter&lt;/code&gt; Beanまたは &lt;code&gt;Servlet&lt;/code&gt; Beanの登録を無効にするには、そのBeanの登録Beanを作成し、無効としてマークします。</target>
        </trans-unit>
        <trans-unit id="f15605bff5aa26c8bc5bee68daa223a54d0f7c1a" translate="yes" xml:space="preserve">
          <source>As DevTools monitors classpath resources, the only way to trigger a restart is to update the classpath. The way in which you cause the classpath to be updated depends on the IDE that you are using. In Eclipse, saving a modified file causes the classpath to be updated and triggers a restart. In IntelliJ IDEA, building the project (&lt;code&gt;Build +&amp;rarr;+ Build Project&lt;/code&gt;) has the same effect.</source>
          <target state="translated">DevToolsはクラスパスリソースを監視するため、再起動をトリガーする唯一の方法は、クラスパスを更新することです。クラスパスを更新する方法は、使用しているIDEによって異なります。Eclipseでは、変更されたファイルを保存すると、クラスパスが更新され、再起動がトリガーされます。IntelliJ IDEAでは、プロジェクトの &lt;code&gt;Build +&amp;rarr;+ Build Project&lt;/code&gt; （ビルド+&amp;rarr;+ビルドプロジェクト）も同じ効果があります。</target>
        </trans-unit>
        <trans-unit id="0393a01cdc54095169e0466f769e33dbd84c6692" translate="yes" xml:space="preserve">
          <source>As a last resort, you can also declare your own &lt;code&gt;WebServerFactory&lt;/code&gt; component, which will override the one provided by Spring Boot. In this case, you can&amp;rsquo;t rely on configuration properties in the &lt;code&gt;server&lt;/code&gt; namespace anymore.</source>
          <target state="translated">最後の手段として、独自の &lt;code&gt;WebServerFactory&lt;/code&gt; コンポーネントを宣言することもできます。これは、SpringBootによって提供されるコンポーネントをオーバーライドします。この場合、 &lt;code&gt;server&lt;/code&gt; 名前空間の構成プロパティに依存することはできなくなります。</target>
        </trans-unit>
        <trans-unit id="917ec02ced2d855aee38484b6a4927f8ba7cf616" translate="yes" xml:space="preserve">
          <source>As a rule of thumb, you should name a combined module after the starter. For example, assume that you are creating a starter for &quot;acme&quot; and that you name the auto-configure module &lt;code&gt;acme-spring-boot&lt;/code&gt; and the starter &lt;code&gt;acme-spring-boot-starter&lt;/code&gt;. If you only have one module that combines the two, name it &lt;code&gt;acme-spring-boot-starter&lt;/code&gt;.</source>
          <target state="translated">経験則として、スターターにちなんで結合モジュールに名前を付ける必要があります。たとえば、「acme」のスターターを作成していて、自動構成モジュールに &lt;code&gt;acme-spring-boot&lt;/code&gt; およびスターター &lt;code&gt;acme-spring-boot-starter&lt;/code&gt; という名前を付けているとします。2つを組み合わせたモジュールが1つしかない場合は、 &lt;code&gt;acme-spring-boot-starter&lt;/code&gt; という名前を付けます。</target>
        </trans-unit>
        <trans-unit id="af69f8fb8454928cba9006019b11ea3ddd316dfd" translate="yes" xml:space="preserve">
          <source>As a server, you can get injected with an &lt;code&gt;RSocketRequester&lt;/code&gt; instance on any handler method of an RSocket &lt;code&gt;@Controller&lt;/code&gt;. As a client, you need to configure and establish an RSocket connection first. Spring Boot auto-configures an &lt;code&gt;RSocketRequester.Builder&lt;/code&gt; for such cases with the expected codecs.</source>
          <target state="translated">サーバーとして、 &lt;code&gt;RSocketRequester&lt;/code&gt; 任意のハンドラーメソッドにRSocketRequesterインスタンスを挿入 &lt;code&gt;@Controller&lt;/code&gt; ます。クライアントとして、最初にRSocket接続を構成して確立する必要があります。Spring Bootは、予想されるコーデックを使用して、このような場合に &lt;code&gt;RSocketRequester.Builder&lt;/code&gt; を自動構成します。</target>
        </trans-unit>
        <trans-unit id="984be7eed8dc2057b73a4618cc0cfd42ad346849" translate="yes" xml:space="preserve">
          <source>As an alternative to environment variables, many cloud platforms now allow you to map configuration into mounted data volumes. For example, Kubernetes can volume mount both &lt;a href=&quot;https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/#populate-a-volume-with-data-stored-in-a-configmap&quot;&gt;&lt;code&gt;ConfigMaps&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://kubernetes.io/docs/concepts/configuration/secret/#using-secrets-as-files-from-a-pod&quot;&gt;&lt;code&gt;Secrets&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">環境変数の代わりに、多くのクラウドプラットフォームで、構成をマウントされたデータボリュームにマッピングできるようになりました。たとえば、Kubernetesは&lt;a href=&quot;https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/#populate-a-volume-with-data-stored-in-a-configmap&quot;&gt; &lt;code&gt;ConfigMaps&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;https://kubernetes.io/docs/concepts/configuration/secret/#using-secrets-as-files-from-a-pod&quot;&gt; &lt;code&gt;Secrets&lt;/code&gt; の&lt;/a&gt;両方をボリュームマウントできます。</target>
        </trans-unit>
        <trans-unit id="827a9e137d7e1b2d8bf51dc3ce44e09e26be4f91" translate="yes" xml:space="preserve">
          <source>As an example, consider the following &lt;code&gt;@ConfigurationProperties&lt;/code&gt; class:</source>
          <target state="translated">例として、次の &lt;code&gt;@ConfigurationProperties&lt;/code&gt; クラスについて考えてみます。</target>
        </trans-unit>
        <trans-unit id="4871d04412861d09971fddf6d9e713fa73d94b52" translate="yes" xml:space="preserve">
          <source>As an example, let&amp;rsquo;s imagine that Kubernetes has mounted the following volume:</source>
          <target state="translated">例として、Kubernetesが次のボリュームをマウントしたと想像してみましょう。</target>
        </trans-unit>
        <trans-unit id="1e3a994a63e6905ee1958d65b6994349f8b423dd" translate="yes" xml:space="preserve">
          <source>As before, to exit the application, press &lt;code&gt;ctrl-c&lt;/code&gt;.</source>
          <target state="translated">前と同じように、アプリケーションを終了するには、 &lt;code&gt;ctrl-c&lt;/code&gt; を押します。</target>
        </trans-unit>
        <trans-unit id="39d4bdbbbd6bad161283369553f84d1b898f63c1" translate="yes" xml:space="preserve">
          <source>As described earlier in the &lt;a href=&quot;#using-spring-boot-restart-vs-reload&quot;&gt;Restart vs Reload&lt;/a&gt; section, restart functionality is implemented by using two classloaders. For most applications, this approach works well. However, it can sometimes cause classloading issues.</source>
          <target state="translated">&lt;a href=&quot;#using-spring-boot-restart-vs-reload&quot;&gt;再起動と再読み込みの&lt;/a&gt;セクションで前述したように、再起動機能は2つのクラスローダーを使用して実装されます。ほとんどのアプリケーションでは、このアプローチが適切に機能します。ただし、クラスの読み込みの問題が発生する場合があります。</target>
        </trans-unit>
        <trans-unit id="fb5439fdd04e81880616fe69459936ff786a4d06" translate="yes" xml:space="preserve">
          <source>As described in &lt;a href=&quot;spring-boot-features#boot-features-resttemplate-customization&quot;&gt;spring-boot-features.html&lt;/a&gt;, you can use a &lt;code&gt;RestTemplateCustomizer&lt;/code&gt; with &lt;code&gt;RestTemplateBuilder&lt;/code&gt; to build a customized &lt;code&gt;RestTemplate&lt;/code&gt;. This is the recommended approach for creating a &lt;code&gt;RestTemplate&lt;/code&gt; configured to use a proxy.</source>
          <target state="translated">&lt;a href=&quot;spring-boot-features#boot-features-resttemplate-customization&quot;&gt;spring-boot-features.html&lt;/a&gt;で説明されているように、 &lt;code&gt;RestTemplateCustomizer&lt;/code&gt; と &lt;code&gt;RestTemplateBuilder&lt;/code&gt; を使用して、カスタマイズされたRestTemplateを構築でき &lt;code&gt;RestTemplate&lt;/code&gt; 。これは、プロキシを使用するように構成された &lt;code&gt;RestTemplate&lt;/code&gt; を作成するための推奨されるアプローチです。</target>
        </trans-unit>
        <trans-unit id="813c2e9e2f6c10d8dd8bbc0e4bac0902f3468f2d" translate="yes" xml:space="preserve">
          <source>As described in the official &lt;a href=&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/create_deploy_Java.html&quot;&gt;Elastic Beanstalk Java guide&lt;/a&gt;, there are two main options to deploy a Java application. You can either use the &amp;ldquo;Tomcat Platform&amp;rdquo; or the &amp;ldquo;Java SE platform&amp;rdquo;.</source>
          <target state="translated">公式の&lt;a href=&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/create_deploy_Java.html&quot;&gt;ElasticBeanstalk Javaガイド&lt;/a&gt;で説明されているように、Javaアプリケーションをデプロイするための2つの主要なオプションがあります。「Tomcatプラットフォーム」または「JavaSEプラットフォーム」のいずれかを使用できます。</target>
        </trans-unit>
        <trans-unit id="045489019cb2e737a7de583e460b2bc4dda0e67d" translate="yes" xml:space="preserve">
          <source>As explained in the &amp;ldquo;&lt;a href=&quot;spring-boot-features#boot-features-custom-starter&quot;&gt;Creating Your Own Starter&lt;/a&gt;&amp;rdquo; section, third party starters should not start with &lt;code&gt;spring-boot&lt;/code&gt;, as it is reserved for official Spring Boot artifacts. Rather, a third-party starter typically starts with the name of the project. For example, a third-party starter project called &lt;code&gt;thirdpartyproject&lt;/code&gt; would typically be named &lt;code&gt;thirdpartyproject-spring-boot-starter&lt;/code&gt;.</source>
          <target state="translated">「&lt;a href=&quot;spring-boot-features#boot-features-custom-starter&quot;&gt;独自のスターターの作成&lt;/a&gt;」セクションで説明したように、サードパーティのスターターは、公式のSpring Bootアーティファクト用に予約されているため、 &lt;code&gt;spring-boot&lt;/code&gt; で開始しないでください。むしろ、サードパーティのスターターは通常、プロジェクトの名前で始まります。たとえば、 &lt;code&gt;thirdpartyproject&lt;/code&gt; と呼ばれるサードパーティのスタータープロジェクトは、通常、 &lt;code&gt;thirdpartyproject-spring-boot-starter&lt;/code&gt; という名前になります。</target>
        </trans-unit>
        <trans-unit id="66b4a60817e424af5fa3e3278e6a5b303d322f61" translate="yes" xml:space="preserve">
          <source>As for the &amp;ldquo;readiness&amp;rdquo; Probe, the choice of checking external systems must be made carefully by the application developers, i.e. Spring Boot does not include any additional health checks in the readiness probe. If the &lt;a href=&quot;spring-boot-features#boot-features-application-availability-readiness-state&quot;&gt;Readiness State of an application instance&lt;/a&gt; is unready, Kubernetes will not route traffic to that instance. Some external systems might not be shared by application instances, in which case they could quite naturally be included in a readiness probe. Other external systems might not be essential to the application (the application could have circuit breakers and fallbacks), in which case they definitely should not be included. Unfortunately, an external system that is shared by all application instances is common, and you have to make a judgement call: include it in the readiness probe and expect that the application is taken out of service when the external service is down, or leave it out and deal with failures higher up the stack, e.g. using a circuit breaker in the caller.</source>
          <target state="translated">「準備」プローブに関しては、外部システムのチェックの選択はアプリケーション開発者が慎重に行う必要があります。つまり、SpringBootは準備プローブに追加のヘルスチェックを含めません。もし&lt;a href=&quot;spring-boot-features#boot-features-application-availability-readiness-state&quot;&gt;アプリケーションインスタンスの準備状況&lt;/a&gt;準備ができていない場合、Kubernetesはトラフィックをそのインスタンスにルーティングしません。一部の外部システムは、アプリケーションインスタンスによって共有されない場合があります。その場合、それらは非常に自然に準備プローブに含まれる可能性があります。他の外部システムはアプリケーションに不可欠ではない場合があります（アプリケーションに回路ブレーカーとフォールバックがある可能性があります）。その場合、それらを含めるべきではありません。残念ながら、すべてのアプリケーションインスタンスで共有される外部システムは一般的であり、判断を下す必要があります。それを準備プローブに含め、外部サービスがダウンしたときにアプリケーションがサービスを停止することを期待するか、そのままにします。呼び出し元で回路ブレーカーを使用するなど、スタックの上位にある障害を処理します。</target>
        </trans-unit>
        <trans-unit id="bbe7a78b0ff73ef18a372290c737ce19434dc3b7" translate="yes" xml:space="preserve">
          <source>As in normal MVC usage, any &lt;code&gt;WebMvcConfigurer&lt;/code&gt; beans that you provide can also contribute converters by overriding the &lt;code&gt;configureMessageConverters&lt;/code&gt; method. However, unlike with normal MVC, you can supply only additional converters that you need (because Spring Boot uses the same mechanism to contribute its defaults). Finally, if you opt out of the Spring Boot default MVC configuration by providing your own &lt;code&gt;@EnableWebMvc&lt;/code&gt; configuration, you can take control completely and do everything manually by using &lt;code&gt;getMessageConverters&lt;/code&gt; from &lt;code&gt;WebMvcConfigurationSupport&lt;/code&gt;.</source>
          <target state="translated">通常のMVCの使用法と同様に、提供する &lt;code&gt;WebMvcConfigurer&lt;/code&gt; Beanも、 &lt;code&gt;configureMessageConverters&lt;/code&gt; メソッドをオーバーライドすることでコンバーターに貢献できます。ただし、通常のMVCとは異なり、必要な追加のコンバーターのみを提供できます（Spring Bootは同じメカニズムを使用してデフォルトを提供するため）。最後に、独自の &lt;code&gt;@EnableWebMvc&lt;/code&gt; 構成を提供してSpring BootのデフォルトMVC構成をオプトアウトする場合は、 &lt;code&gt;WebMvcConfigurationSupport&lt;/code&gt; の &lt;code&gt;getMessageConverters&lt;/code&gt; を使用して、完全に制御し、すべてを手動で行うことができます。</target>
        </trans-unit>
        <trans-unit id="30083d8fea40c8e13dcc1fb46ee2c9be00c46575" translate="yes" xml:space="preserve">
          <source>As long as &lt;code&gt;MyThing&lt;/code&gt; can be serialized by Jackson2 (true for a normal POJO or Groovy object), then &lt;code&gt;&lt;a href=&quot;http://localhost:8080/thing&quot;&gt;localhost:8080/thing&lt;/a&gt;&lt;/code&gt; serves a JSON representation of it by default. Note that, in a browser, you might sometimes see XML responses, because browsers tend to send accept headers that prefer XML.</source>
          <target state="translated">&lt;code&gt;MyThing&lt;/code&gt; をJackson2でシリアル化できる限り（通常のPOJOまたはGroovyオブジェクトの場合はtrue）、 &lt;code&gt;&lt;a href=&quot;http://localhost:8080/thing&quot;&gt;localhost:8080/thing&lt;/a&gt;&lt;/code&gt; はデフォルトでそのJSON表現を提供します。ブラウザはXMLを優先するacceptヘッダーを送信する傾向があるため、ブラウザではXML応答が表示される場合があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="5981866d4c175772111d5f655a235df115936269" translate="yes" xml:space="preserve">
          <source>As long as forking is enabled, you can also start your application by using the supported build plugins (Maven and Gradle), since DevTools needs an isolated application classloader to operate properly. By default, the Gradle and Maven plugins fork the application process.</source>
          <target state="translated">また、フォークが有効になっている限り、DevTools が正しく動作するには分離されたアプリケーション クラスローダが必要なため、サポートされているビルド プラグイン (Maven および Gradle)を使用してアプリケーションを起動することもできます。デフォルトでは、Gradle および Maven プラグインはアプリケーション プロセスをフォークします。</target>
        </trans-unit>
        <trans-unit id="cc42dd60bc579e8095789af8778f490322138b57" translate="yes" xml:space="preserve">
          <source>As of Spring Boot 2.3, support for Bitronix has been deprecated and will be removed in a future release.</source>
          <target state="translated">Spring Boot 2.3では、Bitronixのサポートは非推奨となり、将来のリリースで削除される予定です。</target>
        </trans-unit>
        <trans-unit id="f07ee9dece8cff1d8c21176d835bdfcf3a974fe1" translate="yes" xml:space="preserve">
          <source>As of Spring Framework 5.3, Spring MVC supports several implementation strategies for matching request paths to Controller handlers. It was previously only supporting the &lt;code&gt;AntPathMatcher&lt;/code&gt; strategy, but it now also offers &lt;code&gt;PathPatternParser&lt;/code&gt;. Spring Boot now provides a configuration property to choose and opt in the new strategy:</source>
          <target state="translated">Spring Framework 5.3以降、Spring MVCは、リクエストパスをコントローラーハンドラーに一致させるためのいくつかの実装戦略をサポートしています。以前は &lt;code&gt;AntPathMatcher&lt;/code&gt; 戦略のみをサポートしていましたが、現在は &lt;code&gt;PathPatternParser&lt;/code&gt; も提供しています。Spring Bootは、新しい戦略を選択してオプトインするための構成プロパティを提供するようになりました。</target>
        </trans-unit>
        <trans-unit id="0765c8c782bb5be84f7daac22c4d9a459ec89022" translate="yes" xml:space="preserve">
          <source>As of Undertow 1.4.0+, HTTP/2 is supported without any additional requirement on JDK8.</source>
          <target state="translated">Undertow 1.4.0+の時点で、JDK8ではHTTP/2が追加の要件なしにサポートされています。</target>
        </trans-unit>
        <trans-unit id="88ba618ea2b28f929ea9e98a6dccfcfe7012e742" translate="yes" xml:space="preserve">
          <source>As of version 4.2, Spring MVC &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/web.html#mvc-cors&quot;&gt;supports CORS&lt;/a&gt;. Using &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/web.html#mvc-cors-controller&quot;&gt;controller method CORS configuration&lt;/a&gt; with &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/javadoc-api/org/springframework/web/bind/annotation/CrossOrigin.html&quot;&gt;&lt;code&gt;@CrossOrigin&lt;/code&gt;&lt;/a&gt; annotations in your Spring Boot application does not require any specific configuration. &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/web.html#mvc-cors-global&quot;&gt;Global CORS configuration&lt;/a&gt; can be defined by registering a &lt;code&gt;WebMvcConfigurer&lt;/code&gt; bean with a customized &lt;code&gt;addCorsMappings(CorsRegistry)&lt;/code&gt; method, as shown in the following example:</source>
          <target state="translated">バージョン4.2以降、SpringMVC&lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/web.html#mvc-cors&quot;&gt;はCORSをサポートします&lt;/a&gt;。Spring Bootアプリケーションで&lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/javadoc-api/org/springframework/web/bind/annotation/CrossOrigin.html&quot;&gt; &lt;code&gt;@CrossOrigin&lt;/code&gt; &lt;/a&gt;アノテーションを使用して&lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/web.html#mvc-cors-controller&quot;&gt;コントローラーメソッドのCORS構成&lt;/a&gt;を使用する場合、特定の構成は必要ありません。次の例に示すように、 &lt;code&gt;WebMvcConfigurer&lt;/code&gt; Beanをカスタマイズされた &lt;code&gt;addCorsMappings(CorsRegistry)&lt;/code&gt; メソッドに登録することで、&lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/web.html#mvc-cors-global&quot;&gt;グローバルCORS構成&lt;/a&gt;を定義できます。</target>
        </trans-unit>
        <trans-unit id="2b0079ffa849a69cd6832613ab08ce7d17f7efba" translate="yes" xml:space="preserve">
          <source>As the test context framework caches context, JMX is disabled by default to prevent identical components to register on the same domain. If such test needs access to an &lt;code&gt;MBeanServer&lt;/code&gt;, consider marking it dirty as well:</source>
          <target state="translated">テストコンテキストフレームワークはコンテキストをキャッシュするため、同じコンポーネントが同じドメインに登録されないように、JMXはデフォルトで無効になっています。そのようなテストが &lt;code&gt;MBeanServer&lt;/code&gt; にアクセスする必要がある場合は、それをダーティとしてマークすることも検討してください。</target>
        </trans-unit>
        <trans-unit id="4b713931a7e26e8236d575c149c46468099cdea1" translate="yes" xml:space="preserve">
          <source>As this bean is requested very early during the application lifecycle, make sure to limit the dependencies that your &lt;code&gt;ConversionService&lt;/code&gt; is using. Typically, any dependency that you require may not be fully initialized at creation time. You may want to rename your custom &lt;code&gt;ConversionService&lt;/code&gt; if it is not required for configuration keys coercion and only rely on custom converters qualified with &lt;code&gt;@ConfigurationPropertiesBinding&lt;/code&gt;.</source>
          <target state="translated">このBeanはアプリケーションのライフサイクルの非常に早い段階で要求されるため、 &lt;code&gt;ConversionService&lt;/code&gt; が使用している依存関係を制限してください。通常、必要な依存関係は、作成時に完全に初期化されない場合があります。構成キーの強制に必要がなく、 &lt;code&gt;@ConfigurationPropertiesBinding&lt;/code&gt; 修飾されたカスタムコンバーターのみに依存する場合は、カスタム &lt;code&gt;ConversionService&lt;/code&gt; の名前を変更することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="0421fc652f1ce0ec471210abe922daa52fb94d61" translate="yes" xml:space="preserve">
          <source>As this is a new feature, IDE vendors must catch up with how it works. Adoption times naturally vary.</source>
          <target state="translated">これは新しい機能なので、IDE ベンダーはそれがどのように動作するかをキャッチアップする必要があります。採用時期は当然ながら異なります。</target>
        </trans-unit>
        <trans-unit id="593b9109e550d972ff0b0831fa7400b8ad108615" translate="yes" xml:space="preserve">
          <source>As we &lt;a href=&quot;#boot-features-testing-spring-boot-applications-detecting-config&quot;&gt;have seen earlier&lt;/a&gt;, &lt;code&gt;@TestConfiguration&lt;/code&gt; can be used on an inner class of a test to customize the primary configuration. When placed on a top-level class, &lt;code&gt;@TestConfiguration&lt;/code&gt; indicates that classes in &lt;code&gt;src/test/java&lt;/code&gt; should not be picked up by scanning. You can then import that class explicitly where it is required, as shown in the following example:</source>
          <target state="translated">私たちがしたよう&lt;a href=&quot;#boot-features-testing-spring-boot-applications-detecting-config&quot;&gt;早く見てきた&lt;/a&gt;、 &lt;code&gt;@TestConfiguration&lt;/code&gt; は、主要な構成をカスタマイズするために、テストの内部クラスで使用することができます。最上位クラスに配置された場合、 &lt;code&gt;@TestConfiguration&lt;/code&gt; は、 &lt;code&gt;src/test/java&lt;/code&gt; のクラスをスキャンで取得しないことを示します。次に、次の例に示すように、必要な場所にそのクラスを明示的にインポートできます。</target>
        </trans-unit>
        <trans-unit id="62cce2224d9fa51b043fcff0f5f75c36cdddc001" translate="yes" xml:space="preserve">
          <source>As well as &lt;code&gt;application&lt;/code&gt; property files, Spring Boot will also attempt to load profile-specific files using the naming convention &lt;code&gt;application-{profile}&lt;/code&gt;. For example, if your application activates a profile named &lt;code&gt;prod&lt;/code&gt; and uses YAML files, then both &lt;code&gt;application.yml&lt;/code&gt; and &lt;code&gt;application-prod.yml&lt;/code&gt; will be considered.</source>
          <target state="translated">Spring Bootは、 &lt;code&gt;application&lt;/code&gt; プロパティファイルだけでなく、命名規則 &lt;code&gt;application-{profile}&lt;/code&gt; を使用してプロファイル固有のファイルを読み込もうとします。たとえば、アプリケーションが &lt;code&gt;prod&lt;/code&gt; という名前のプロファイルをアクティブ化し、YAMLファイルを使用する場合、 &lt;code&gt;application.yml&lt;/code&gt; と &lt;code&gt;application-prod.yml&lt;/code&gt; の両方が考慮されます。</target>
        </trans-unit>
        <trans-unit id="458f059ba47e47aecd15fa4eda3d00e91aa7f208" translate="yes" xml:space="preserve">
          <source>As well as REST web services, you can also use Spring MVC to serve dynamic HTML content. Spring MVC supports a variety of templating technologies, including Thymeleaf, FreeMarker, and JSPs. Also, many other templating engines include their own Spring MVC integrations.</source>
          <target state="translated">RESTウェブサービスと同様に、Spring MVCを使って動的なHTMLコンテンツを提供することもできます。Spring MVCはThymeleaf、FreeMarker、JSPを含む様々なテンプレート技術をサポートしています。また、他の多くのテンプレートエンジンは独自のSpring MVCインテグレーションを持っています。</target>
        </trans-unit>
        <trans-unit id="a48df9a6debdfcdab555148442c1bd244b06e049" translate="yes" xml:space="preserve">
          <source>As well as REST web services, you can also use Spring WebFlux to serve dynamic HTML content. Spring WebFlux supports a variety of templating technologies, including Thymeleaf, FreeMarker, and Mustache.</source>
          <target state="translated">RESTウェブサービスと同様に、Spring WebFluxを使って動的なHTMLコンテンツを提供することもできます。Spring WebFluxはThymeleaf、FreeMarker、Mustacheなどの様々なテンプレート技術をサポートしています。</target>
        </trans-unit>
        <trans-unit id="c533f22f9da011d71825a90fee56cd98c11ff961" translate="yes" xml:space="preserve">
          <source>As well as using &lt;code&gt;@ConfigurationProperties&lt;/code&gt; to annotate a class, you can also use it on public &lt;code&gt;@Bean&lt;/code&gt; methods. Doing so can be particularly useful when you want to bind properties to third-party components that are outside of your control.</source>
          <target state="translated">&lt;code&gt;@ConfigurationProperties&lt;/code&gt; を使用してクラスにアノテーションを付けるだけでなく、パブリック &lt;code&gt;@Bean&lt;/code&gt; メソッドでも使用できます。これを行うと、制御できないサードパーティコンポーネントにプロパティをバインドする場合に特に便利です。</target>
        </trans-unit>
        <trans-unit id="b0071112c52de244af06951cd9ec0691409c0520" translate="yes" xml:space="preserve">
          <source>As with standard &lt;code&gt;@Configuration&lt;/code&gt; classes, the order in which auto-configuration classes are applied only affects the order in which their beans are defined. The order in which those beans are subsequently created is unaffected and is determined by each bean&amp;rsquo;s dependencies and any &lt;code&gt;@DependsOn&lt;/code&gt; relationships.</source>
          <target state="translated">標準の &lt;code&gt;@Configuration&lt;/code&gt; クラスと同様に、自動構成クラスが適用される順序は、Beanが定義される順序にのみ影響します。これらのBeanがその後作成される順序は影響を受けず、各Beanの依存関係と &lt;code&gt;@DependsOn&lt;/code&gt; 関係によって決定されます。</target>
        </trans-unit>
        <trans-unit id="3bd16663355804f7f15d9216994923da8f26688c" translate="yes" xml:space="preserve">
          <source>Ask a question. We monitor &lt;a href=&quot;https://stackoverflow.com&quot;&gt;stackoverflow.com&lt;/a&gt; for questions tagged with &lt;a href=&quot;https://stackoverflow.com/tags/spring-boot&quot;&gt;&lt;code&gt;spring-boot&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">質問する。&lt;a href=&quot;https://stackoverflow.com/tags/spring-boot&quot;&gt; &lt;code&gt;spring-boot&lt;/code&gt; で&lt;/a&gt;タグ付けされた質問について&lt;a href=&quot;https://stackoverflow.com&quot;&gt;stackoverflow.com&lt;/a&gt;を監視します。</target>
        </trans-unit>
        <trans-unit id="643fd69106187ec86d17effd86b594cfbdba5c54" translate="yes" xml:space="preserve">
          <source>Associates a provider, to attach a well defined semantic to a property, so that a tool can discover the list of potential values based on the project&amp;rsquo;s context.</source>
          <target state="translated">プロバイダーを関連付けて、明確に定義されたセマンティクスをプロパティにアタッチし、ツールがプロジェクトのコンテキストに基づいて潜在的な値のリストを検出できるようにします。</target>
        </trans-unit>
        <trans-unit id="3969b8d5b675f04d096df1dcd7ad2328744d54f2" translate="yes" xml:space="preserve">
          <source>Assume a &lt;code&gt;sample.contexts&lt;/code&gt; maps magic &lt;code&gt;String&lt;/code&gt; values to an integer, as shown in the following example:</source>
          <target state="translated">仮定 &lt;code&gt;sample.contexts&lt;/code&gt; をマジックマップ &lt;code&gt;String&lt;/code&gt; 次の例に示すように、整数に値を：</target>
        </trans-unit>
        <trans-unit id="dc3bf9bf5e59f661ba531c5af3b4144e15336515" translate="yes" xml:space="preserve">
          <source>Assume that you are using Spring Batch and you rely on the auto-configuration for it. You could define your &lt;code&gt;@SpringBootApplication&lt;/code&gt; as follows:</source>
          <target state="translated">Spring Batchを使用していて、その自動構成に依存していると想定します。 &lt;code&gt;@SpringBootApplication&lt;/code&gt; は次のように定義できます。</target>
        </trans-unit>
        <trans-unit id="3e63aad1cea867b5113165d97c58098b539e6b72" translate="yes" xml:space="preserve">
          <source>Assuming that you have a Spring Boot application installed in &lt;code&gt;/var/myapp&lt;/code&gt;, to install a Spring Boot application as a &lt;code&gt;systemd&lt;/code&gt; service, create a script named &lt;code&gt;myapp.service&lt;/code&gt; and place it in &lt;code&gt;/etc/systemd/system&lt;/code&gt; directory. The following script offers an example:</source>
          <target state="translated">&lt;code&gt;myapp.service&lt;/code&gt; アプリケーションが &lt;code&gt;/var/myapp&lt;/code&gt; にインストールされていると仮定して、Spring Bootアプリケーションを &lt;code&gt;systemd&lt;/code&gt; サービスとしてインストールするには、myapp.serviceという名前のスクリプトを作成し、それを &lt;code&gt;/etc/systemd/system&lt;/code&gt; ディレクトリに配置します。次のスクリプトは例を示しています。</target>
        </trans-unit>
        <trans-unit id="40776d2a53e1908b72c31a4903419e762af2189c" translate="yes" xml:space="preserve">
          <source>Assuming that you have a Spring Boot application installed in &lt;code&gt;/var/myapp&lt;/code&gt;, to install a Spring Boot application as an &lt;code&gt;init.d&lt;/code&gt; service, create a symlink, as follows:</source>
          <target state="translated">&lt;code&gt;/var/myapp&lt;/code&gt; にSpringBootアプリケーションがインストールされていると仮定して、Spring Bootアプリケーションを &lt;code&gt;init.d&lt;/code&gt; サービスとしてインストールするには、次のようにシンボリックリンクを作成します。</target>
        </trans-unit>
        <trans-unit id="05dbee51e6ccc6b71bb2fff98a699d85e7cd5a5b" translate="yes" xml:space="preserve">
          <source>Assuming that your &lt;code&gt;FancyDataSource&lt;/code&gt; has regular JavaBean properties for the URL, the username, and the pool size, these settings are bound automatically before the &lt;code&gt;DataSource&lt;/code&gt; is made available to other components. The regular &lt;a href=&quot;#howto-initialize-a-database-using-spring-jdbc&quot;&gt;database initialization&lt;/a&gt; also happens (so the relevant sub-set of &lt;code&gt;spring.datasource.*&lt;/code&gt; can still be used with your custom configuration).</source>
          <target state="translated">あなたと仮定すると &lt;code&gt;FancyDataSource&lt;/code&gt; は前にURL、ユーザ名、およびプールサイズのため、通常のJavaBeanプロパティを持って、これらの設定が自動的にバインドされている &lt;code&gt;DataSource&lt;/code&gt; 他のコンポーネントに提供されます。定期的な&lt;a href=&quot;#howto-initialize-a-database-using-spring-jdbc&quot;&gt;データベースの初期化&lt;/a&gt;も行われます（したがって、 &lt;code&gt;spring.datasource.*&lt;/code&gt; の関連するサブセットをカスタム構成で引き続き使用できます）。</target>
        </trans-unit>
        <trans-unit id="e4ebfd36433c4eb864b24a98968580fbebb2ba41" translate="yes" xml:space="preserve">
          <source>Assuming the above &lt;code&gt;Dockerfile&lt;/code&gt; is in the current directory, your docker image can be built with &lt;code&gt;docker build .&lt;/code&gt;, or optionally specifying the path to your application jar, as shown in the following example:</source>
          <target state="translated">上記の &lt;code&gt;Dockerfile&lt;/code&gt; が現在のディレクトリにあるとすると、dockerbuildを使用してdockerイメージを &lt;code&gt;docker build .&lt;/code&gt; できます。、またはオプションで、次の例に示すように、アプリケーションjarへのパスを指定します。</target>
        </trans-unit>
        <trans-unit id="844d277b792a3eaa9177fe91c3705e886041c392" translate="yes" xml:space="preserve">
          <source>Assuming you use Maven, you could rewrite the preceding example as follows:</source>
          <target state="translated">Mavenを使用していると仮定して、上記の例を以下のように書き換えることができます。</target>
        </trans-unit>
        <trans-unit id="709b2718984782131f13e19749c380f17b23d43f" translate="yes" xml:space="preserve">
          <source>At least the url should be provided. Information specified in the URL takes precedence over individual properties, i.e. &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;username&lt;/code&gt;, &lt;code&gt;password&lt;/code&gt; and pooling options.</source>
          <target state="translated">少なくともURLを指定する必要があります。URLで指定された情報は、 &lt;code&gt;name&lt;/code&gt; 、 &lt;code&gt;username&lt;/code&gt; 、 &lt;code&gt;password&lt;/code&gt; 、プーリングオプションなどの個々のプロパティよりも優先されます。</target>
        </trans-unit>
        <trans-unit id="0fbeebb45b7389ad76d6ae3e8f014010d6e824ec" translate="yes" xml:space="preserve">
          <source>At this point, &lt;code&gt;boxfuse&lt;/code&gt; creates an image for your application, uploads it, and configures and starts the necessary resources on AWS, resulting in output similar to the following example:</source>
          <target state="translated">この時点で、 &lt;code&gt;boxfuse&lt;/code&gt; はアプリケーションのイメージを作成してアップロードし、AWSで必要なリソースを設定して開始します。その結果、次の例のような出力が得られます。</target>
        </trans-unit>
        <trans-unit id="7890b23cf9c7aa6d09e60257495a013e2715a2c2" translate="yes" xml:space="preserve">
          <source>At this point, &lt;code&gt;cf&lt;/code&gt; starts uploading your application, producing output similar to the following example:</source>
          <target state="translated">この時点で、 &lt;code&gt;cf&lt;/code&gt; はアプリケーションのアップロードを開始し、次の例のような出力を生成します。</target>
        </trans-unit>
        <trans-unit id="17313126c59e0fb6ea0c5c4ace2518f07d7f78b2" translate="yes" xml:space="preserve">
          <source>At this point, you could import the project into an IDE (most modern Java IDEs include built-in support for Maven). For simplicity, we continue to use a plain text editor for this example.</source>
          <target state="translated">この時点で、プロジェクトをIDEにインポートすることができます(ほとんどの最新のJava IDEには、Mavenの組み込みサポートが含まれています)。簡単にするために、この例ではプレーンテキストエディタを使用しています。</target>
        </trans-unit>
        <trans-unit id="b1c3eca885cdcacf79e6b6b0c4eef03601a694c2" translate="yes" xml:space="preserve">
          <source>At this point, your application should work. Since you used the &lt;code&gt;spring-boot-starter-parent&lt;/code&gt; POM, you have a useful &lt;code&gt;run&lt;/code&gt; goal that you can use to start the application. Type &lt;code&gt;mvn spring-boot:run&lt;/code&gt; from the root project directory to start the application. You should see output similar to the following:</source>
          <target state="translated">この時点で、アプリケーションは機能するはずです。あなたが使用しているので &lt;code&gt;spring-boot-starter-parent&lt;/code&gt; POMを、あなたは便利な持ち &lt;code&gt;run&lt;/code&gt; アプリケーションを起動するために使用できることとなるゴールを決めました。入力 &lt;code&gt;mvn spring-boot:run&lt;/code&gt; アプリケーションを起動するために、プロジェクトのrootディレクトリから。次のような出力が表示されます。</target>
        </trans-unit>
        <trans-unit id="8bd28d90f59e9ecb428ffecb287d3a0a056fa5c1" translate="yes" xml:space="preserve">
          <source>Atlas</source>
          <target state="translated">Atlas</target>
        </trans-unit>
        <trans-unit id="a086d942884a301b827479029ba19c2746237425" translate="yes" xml:space="preserve">
          <source>Attribute</source>
          <target state="translated">Attribute</target>
        </trans-unit>
        <trans-unit id="cb5cc8e2ad78882026ea4054f5bcf86b043d26db" translate="yes" xml:space="preserve">
          <source>Auditing</source>
          <target state="translated">Auditing</target>
        </trans-unit>
        <trans-unit id="f9b7b62d373bae321e7d44e2162d272c94ac42e6" translate="yes" xml:space="preserve">
          <source>Auditing can be enabled by providing a bean of type &lt;code&gt;AuditEventRepository&lt;/code&gt; in your application&amp;rsquo;s configuration. For convenience, Spring Boot offers an &lt;code&gt;InMemoryAuditEventRepository&lt;/code&gt;. &lt;code&gt;InMemoryAuditEventRepository&lt;/code&gt; has limited capabilities and we recommend using it only for development environments. For production environments, consider creating your own alternative &lt;code&gt;AuditEventRepository&lt;/code&gt; implementation.</source>
          <target state="translated">アプリケーションの構成で &lt;code&gt;AuditEventRepository&lt;/code&gt; タイプのBeanを提供することにより、監査を有効にできます。便宜上、 &lt;code&gt;InMemoryAuditEventRepository&lt;/code&gt; はInMemoryAuditEventRepositoryを提供しています。 &lt;code&gt;InMemoryAuditEventRepository&lt;/code&gt; の機能には制限があるため、開発環境でのみ使用することをお勧めします。実稼働環境では、独自の代替 &lt;code&gt;AuditEventRepository&lt;/code&gt; 実装を作成することを検討してください。</target>
        </trans-unit>
        <trans-unit id="f1f703c2a580b439ba7bcd9001266fd4f1ffd911" translate="yes" xml:space="preserve">
          <source>Authentication database name.</source>
          <target state="translated">認証データベース名。</target>
        </trans-unit>
        <trans-unit id="1b98519b654704e688117fd846fa040e98af03ce" translate="yes" xml:space="preserve">
          <source>Auto-completes the available Spring profile names in the project.</source>
          <target state="translated">プロジェクトで利用可能なSpringプロファイル名を自動補完します。</target>
        </trans-unit>
        <trans-unit id="04f0491b2e3736119f44abc1db4445bd3be0b4d3" translate="yes" xml:space="preserve">
          <source>Auto-completes the available bean names in the current project. Usually constrained by a base class that is specified by the &lt;code&gt;target&lt;/code&gt; parameter.</source>
          <target state="translated">現在のプロジェクトで使用可能なBean名を自動補完します。通常、 &lt;code&gt;target&lt;/code&gt; パラメータで指定された基本クラスによって制約されます。</target>
        </trans-unit>
        <trans-unit id="38f0360083ace8333ad44550d14663515eab648a" translate="yes" xml:space="preserve">
          <source>Auto-completes the classes available in the project. Usually constrained by a base class that is specified by the &lt;code&gt;target&lt;/code&gt; parameter.</source>
          <target state="translated">プロジェクトで利用可能なクラスを自動完了します。通常、 &lt;code&gt;target&lt;/code&gt; パラメータで指定された基本クラスによって制約されます。</target>
        </trans-unit>
        <trans-unit id="d1dd53c82bb57c09c34a9b7f6f876e363ac83e80" translate="yes" xml:space="preserve">
          <source>Auto-completes valid logger names and &lt;a href=&quot;spring-boot-features#boot-features-custom-log-groups&quot;&gt;logger groups&lt;/a&gt;. Typically, package and class names available in the current project can be auto-completed as well as defined groups.</source>
          <target state="translated">有効なロガー名と&lt;a href=&quot;spring-boot-features#boot-features-custom-log-groups&quot;&gt;ロガーグループを&lt;/a&gt;自動入力します。通常、現在のプロジェクトで使用可能なパッケージ名とクラス名は、定義されたグループと同様に自動補完できます。</target>
        </trans-unit>
        <trans-unit id="91b2f0281d4dd5d6b8a07feefd56ee23ce993c51" translate="yes" xml:space="preserve">
          <source>Auto-configuration</source>
          <target state="translated">Auto-configuration</target>
        </trans-unit>
        <trans-unit id="8f6cae0aa17ef6cf6eda1cfa43fb41fe15f37f38" translate="yes" xml:space="preserve">
          <source>Auto-configuration Classes</source>
          <target state="translated">自動設定クラス</target>
        </trans-unit>
        <trans-unit id="b190e61a7f3faf0d01388be0365708ac0ba34918" translate="yes" xml:space="preserve">
          <source>Auto-configuration can be associated to a &amp;ldquo;starter&amp;rdquo; that provides the auto-configuration code as well as the typical libraries that you would use with it. We first cover what you need to know to build your own auto-configuration and then we move on to the &lt;a href=&quot;#boot-features-custom-starter&quot;&gt;typical steps required to create a custom starter&lt;/a&gt;.</source>
          <target state="translated">自動構成は、自動構成コードと、それで使用する一般的なライブラリを提供する「スターター」に関連付けることができます。まず、独自の自動構成を構築するために知っておく必要のあることについて説明し、次に&lt;a href=&quot;#boot-features-custom-starter&quot;&gt;カスタムスターターを作成するために必要な一般的な手順&lt;/a&gt;に進みます。</target>
        </trans-unit>
        <trans-unit id="5539b1811770027eadb24a940943efb020d441db" translate="yes" xml:space="preserve">
          <source>Auto-configuration classes provided by Spring Boot.</source>
          <target state="translated">Spring Bootが提供する自動設定クラス。</target>
        </trans-unit>
        <trans-unit id="2cf7e4905b49f4c98a54f6cf23c4883a12fba02a" translate="yes" xml:space="preserve">
          <source>Auto-configuration classes to exclude.</source>
          <target state="translated">除外する自動設定クラス。</target>
        </trans-unit>
        <trans-unit id="8a35d27231fd7855b2d522a1288669cee4e7a12f" translate="yes" xml:space="preserve">
          <source>Auto-configuration enables the instrumentation of all available &lt;code&gt;Cache&lt;/code&gt;s on startup with metrics prefixed with &lt;code&gt;cache&lt;/code&gt;. Cache instrumentation is standardized for a basic set of metrics. Additional, cache-specific metrics are also available.</source>
          <target state="translated">自動構成により、起動時に使用可能なすべての &lt;code&gt;Cache&lt;/code&gt; 、プレフィックスが &lt;code&gt;cache&lt;/code&gt; メトリックでインストルメント化できます。キャッシュインストルメンテーションは、メトリックの基本セットに対して標準化されています。追加のキャッシュ固有のメトリックも利用できます。</target>
        </trans-unit>
        <trans-unit id="0bb51e64d3f5ccc9a269747ab8001d37cc26dc5b" translate="yes" xml:space="preserve">
          <source>Auto-configuration enables the instrumentation of all available &lt;code&gt;DataSource&lt;/code&gt; objects with metrics prefixed with &lt;code&gt;jdbc.connections&lt;/code&gt;. Data source instrumentation results in gauges representing the currently active, idle, maximum allowed, and minimum allowed connections in the pool.</source>
          <target state="translated">自動構成により、 &lt;code&gt;jdbc.connections&lt;/code&gt; というプレフィックスが付いたメトリックを使用して、使用可能なすべての &lt;code&gt;DataSource&lt;/code&gt; オブジェクトをインストルメント化できます。データソースインストルメンテーションは、プール内の現在アクティブ、アイドル、最大許容、および最小許容接続を表すゲージになります。</target>
        </trans-unit>
        <trans-unit id="b38e8e859492342c603c0430237f2849dc78cf6e" translate="yes" xml:space="preserve">
          <source>Auto-configuration enables the instrumentation of all available Hibernate &lt;code&gt;EntityManagerFactory&lt;/code&gt; instances that have statistics enabled with a metric named &lt;code&gt;hibernate&lt;/code&gt;.</source>
          <target state="translated">自動設定は、利用可能なすべての休止状態の計測可能 &lt;code&gt;EntityManagerFactory&lt;/code&gt; 統計がメトリックの名前を有効にしているインスタンス &lt;code&gt;hibernate&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3443af706912e4a5085661a5113058d2721d3c09" translate="yes" xml:space="preserve">
          <source>Auto-configuration enables the instrumentation of all requests handled by WebFlux controllers and functional handlers.</source>
          <target state="translated">自動設定により、WebFlux コントローラと機能ハンドラによって処理されるすべてのリクエストの計測が可能になります。</target>
        </trans-unit>
        <trans-unit id="a66ca5eab2abe14aa8f1b4e6dec7ba2c47396469" translate="yes" xml:space="preserve">
          <source>Auto-configuration enables the instrumentation of requests handled by Spring MVC. When &lt;code&gt;management.metrics.web.server.request.autotime.enabled&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, this instrumentation occurs for all requests. Alternatively, when set to &lt;code&gt;false&lt;/code&gt;, you can enable instrumentation by adding &lt;code&gt;@Timed&lt;/code&gt; to a request-handling method:</source>
          <target state="translated">自動構成により、SpringMVCによって処理される要求のインストルメンテーションが可能になります。とき &lt;code&gt;management.metrics.web.server.request.autotime.enabled&lt;/code&gt; がある &lt;code&gt;true&lt;/code&gt; 、この機器は、すべての要求のために発生します。または、 &lt;code&gt;false&lt;/code&gt; に設定すると、リクエスト処理メソッドに &lt;code&gt;@Timed&lt;/code&gt; を追加してインストルメンテーションを有効にできます。</target>
        </trans-unit>
        <trans-unit id="f4308803db56fa75a7a8858e1e9f3138c3f8cc76" translate="yes" xml:space="preserve">
          <source>Auto-configuration for Gson is provided. When Gson is on the classpath a &lt;code&gt;Gson&lt;/code&gt; bean is automatically configured. Several &lt;code&gt;spring.gson.*&lt;/code&gt; configuration properties are provided for customizing the configuration. To take more control, one or more &lt;code&gt;GsonBuilderCustomizer&lt;/code&gt; beans can be used.</source>
          <target state="translated">Gsonの自動構成が提供されます。Gsonがクラスパス上にある場合、 &lt;code&gt;Gson&lt;/code&gt; Beanは自動的に構成されます。構成をカスタマイズするために、いくつかの &lt;code&gt;spring.gson.*&lt;/code&gt; 構成プロパティが提供されています。より詳細に制御するために、1つ以上の &lt;code&gt;GsonBuilderCustomizer&lt;/code&gt; Beanを使用できます。</target>
        </trans-unit>
        <trans-unit id="ef93a40e01bb4cef4f7a467b353075ee1a52a58f" translate="yes" xml:space="preserve">
          <source>Auto-configuration for JSON-B is provided. When the JSON-B API and an implementation are on the classpath a &lt;code&gt;Jsonb&lt;/code&gt; bean will be automatically configured. The preferred JSON-B implementation is Apache Johnzon for which dependency management is provided.</source>
          <target state="translated">JSON-Bの自動構成が提供されます。JSON-B APIと実装がクラスパス上にある場合、 &lt;code&gt;Jsonb&lt;/code&gt; Beanが自動的に構成されます。推奨されるJSON-B実装は、依存関係管理が提供されているApacheJohnzonです。</target>
        </trans-unit>
        <trans-unit id="bd283dba4c4e0a05ccde7444adf542613f03d3a9" translate="yes" xml:space="preserve">
          <source>Auto-configuration for Jackson is provided and Jackson is part of &lt;code&gt;spring-boot-starter-json&lt;/code&gt;. When Jackson is on the classpath an &lt;code&gt;ObjectMapper&lt;/code&gt; bean is automatically configured. Several configuration properties are provided for &lt;a href=&quot;howto#howto-customize-the-jackson-objectmapper&quot;&gt;customizing the configuration of the &lt;code&gt;ObjectMapper&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Jacksonの自動構成が提供され、Jacksonは &lt;code&gt;spring-boot-starter-json&lt;/code&gt; の一部です。Jacksonがクラスパス上にある場合、 &lt;code&gt;ObjectMapper&lt;/code&gt; Beanが自動的に構成されます。&lt;a href=&quot;howto#howto-customize-the-jackson-objectmapper&quot;&gt; &lt;code&gt;ObjectMapper&lt;/code&gt; の&lt;/a&gt;構成をカスタマイズするために、いくつかの構成プロパティが提供されています。</target>
        </trans-unit>
        <trans-unit id="7f4716e779b53a7ed4fd6d2382229ea49564f68f" translate="yes" xml:space="preserve">
          <source>Auto-configuration is designed to work well with &amp;ldquo;Starters&amp;rdquo;, but the two concepts are not directly tied. You are free to pick and choose jar dependencies outside of the starters. Spring Boot still does its best to auto-configure your application.</source>
          <target state="translated">自動構成は「スターター」でうまく機能するように設計されていますが、2つの概念は直接結びついていません。スターターの外部でjarの依存関係を自由に選択できます。Spring Bootは、アプリケーションを自動構成するために最善を尽くします。</target>
        </trans-unit>
        <trans-unit id="1123f4cb18a2321d13bf4a403abb300fd78820f7" translate="yes" xml:space="preserve">
          <source>Auto-configuration is non-invasive. At any point, you can start to define your own configuration to replace specific parts of the auto-configuration. For example, if you add your own &lt;code&gt;DataSource&lt;/code&gt; bean, the default embedded database support backs away.</source>
          <target state="translated">自動構成は非侵襲的です。いつでも、自動構成の特定の部分を置き換えるために、独自の構成の定義を開始できます。たとえば、独自の &lt;code&gt;DataSource&lt;/code&gt; Beanを追加すると、デフォルトの組み込みデータベースのサポートが無効になります。</target>
        </trans-unit>
        <trans-unit id="23b10b2f58a518936c537f7af1a9896d6231e509" translate="yes" xml:space="preserve">
          <source>Auto-configuration will enable the instrumentation of all available RabbitMQ connection factories with a metric named &lt;code&gt;rabbitmq&lt;/code&gt;.</source>
          <target state="translated">自動構成により、 &lt;code&gt;rabbitmq&lt;/code&gt; という名前のメトリックを使用して、使用可能なすべてのRabbitMQ接続ファクトリをインストルメント化できるようになります。</target>
        </trans-unit>
        <trans-unit id="d3d150131dc5d9e9735675268e707e3d1ae71432" translate="yes" xml:space="preserve">
          <source>Auto-configuration will register a &lt;code&gt;MicrometerConsumerListener&lt;/code&gt; and &lt;code&gt;MicrometerProducerListener&lt;/code&gt; for the auto-configured consumer factory and producer factory respectively. For more details refer to &lt;a href=&quot;https://docs.spring.io/spring-kafka/docs/2.6.3/reference/html/#micrometer-native&quot;&gt;Micrometer Native Metrics&lt;/a&gt; section of the Spring Kafka documentation.</source>
          <target state="translated">自動構成では、自動構成されたコンシューマーファクトリとプロデューサーファクトリにそれぞれ &lt;code&gt;MicrometerConsumerListener&lt;/code&gt; と &lt;code&gt;MicrometerProducerListener&lt;/code&gt; が登録されます。詳細については、&lt;a href=&quot;https://docs.spring.io/spring-kafka/docs/2.6.3/reference/html/#micrometer-native&quot;&gt;SpringKafka&lt;/a&gt;ドキュメントのMicrometerNativeMetricsセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="a912098a469bbdd9c294c8b66335b5dc996ccf23" translate="yes" xml:space="preserve">
          <source>Auto-configurations must be loaded that way &lt;em&gt;only&lt;/em&gt;. Make sure that they are defined in a specific package space and that they are never the target of component scanning. Furthermore, auto-configuration classes should not enable component scanning to find additional components. Specific &lt;code&gt;@Import&lt;/code&gt;s should be used instead.</source>
          <target state="translated">自動構成は、その方法で&lt;em&gt;のみ&lt;/em&gt;ロードする必要があります。それらが特定のパッケージスペースで定義されていること、およびコンポーネントスキャンの対象にならないことを確認してください。さらに、自動構成クラスでは、コンポーネントをスキャンして追加のコンポーネントを見つけることはできません。代わりに、特定の &lt;code&gt;@Import&lt;/code&gt; を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="815b3348d4d1c55b94ea5240e36bd1add8584dc6" translate="yes" xml:space="preserve">
          <source>Auto-configured Spring REST Docs Tests with Mock MVC</source>
          <target state="translated">モックMVCで自動設定されたSpring REST Docsテスト</target>
        </trans-unit>
        <trans-unit id="1664d55deb8edeb0532e6baeccbbbc3f314762b1" translate="yes" xml:space="preserve">
          <source>Auto-configured Spring REST Docs Tests with REST Assured</source>
          <target state="translated">Spring REST Docs テストを REST Assured で自動設定する</target>
        </trans-unit>
        <trans-unit id="56c5d119c3d49977afb25b51e208d75148adfe6b" translate="yes" xml:space="preserve">
          <source>Auto-configured Spring REST Docs Tests with WebTestClient</source>
          <target state="translated">WebTestClientで自動設定されたSpring REST Docsテスト</target>
        </trans-unit>
        <trans-unit id="eecc946b442c9e68e6477557a8c25f7e1c0f9383" translate="yes" xml:space="preserve">
          <source>Automatic Restart</source>
          <target state="translated">自動再起動</target>
        </trans-unit>
        <trans-unit id="22bbaadf03551679ca9edbc8cf7a5eac294a5d81" translate="yes" xml:space="preserve">
          <source>Automatic registration of &lt;code&gt;Converter&lt;/code&gt;, &lt;code&gt;GenericConverter&lt;/code&gt;, and &lt;code&gt;Formatter&lt;/code&gt; beans.</source>
          <target state="translated">&lt;code&gt;Converter&lt;/code&gt; 、 &lt;code&gt;GenericConverter&lt;/code&gt; 、および &lt;code&gt;Formatter&lt;/code&gt; Beanの自動登録。</target>
        </trans-unit>
        <trans-unit id="85d6004d9bbe955ef9c54d4939a6ac9efdea9a43" translate="yes" xml:space="preserve">
          <source>Automatic registration of &lt;code&gt;MessageCodesResolver&lt;/code&gt; (covered &lt;a href=&quot;#boot-features-spring-message-codes&quot;&gt;later in this document&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;MessageCodesResolver&lt;/code&gt; の自動登録（&lt;a href=&quot;#boot-features-spring-message-codes&quot;&gt;このドキュメントの後半で説明します&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="2de1ec1461f7a0d5673d4f9d2ebcaac007982ea5" translate="yes" xml:space="preserve">
          <source>Automatic restart works very well when used with LiveReload. &lt;a href=&quot;#using-boot-devtools-livereload&quot;&gt;See the LiveReload section&lt;/a&gt; for details. If you use JRebel, automatic restarts are disabled in favor of dynamic class reloading. Other devtools features (such as LiveReload and property overrides) can still be used.</source>
          <target state="translated">自動再起動は、LiveReloadと併用すると非常にうまく機能します。&lt;a href=&quot;#using-boot-devtools-livereload&quot;&gt;詳細については、LiveReloadセクション&lt;/a&gt;を参照してください。JRebelを使用する場合、動的クラスの再ロードを優先して自動再起動が無効になります。他のdevtools機能（LiveReloadやプロパティオーバーライドなど）は引き続き使用できます。</target>
        </trans-unit>
        <trans-unit id="08e93f6c8aa0733a400ee6040da8dc58dbb3c2c4" translate="yes" xml:space="preserve">
          <source>Automatic use of a &lt;code&gt;ConfigurableWebBindingInitializer&lt;/code&gt; bean (covered &lt;a href=&quot;#boot-features-spring-mvc-web-binding-initializer&quot;&gt;later in this document&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;ConfigurableWebBindingInitializer&lt;/code&gt; Beanの自動使用（&lt;a href=&quot;#boot-features-spring-mvc-web-binding-initializer&quot;&gt;このドキュメントの後半で説明します&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="a3b7dd559ad88d4ee8494711c8cce5b3e4c390a3" translate="yes" xml:space="preserve">
          <source>Automatically create views and indexes. Use the meta-data provided by &quot;@ViewIndexed&quot;, &quot;@N1qlPrimaryIndexed&quot; and &quot;@N1qlSecondaryIndexed&quot;.</source>
          <target state="translated">ビューとインデックスを自動的に作成します。&quot;@ViewIndexed&quot;、&quot;@N1qlPrimaryIndexed&quot;、&quot;@N1qlSecondaryIndexed &quot;で提供されるメタデータを使用します。</target>
        </trans-unit>
        <trans-unit id="8488641ae812e28320669b6ea415880241c1ff53" translate="yes" xml:space="preserve">
          <source>Awesome Kotlin</source>
          <target state="translated">オーサムコトリン</target>
        </trans-unit>
        <trans-unit id="5f89848735ad6e2fdd8ba29d716b1f47ffa2a9ea" translate="yes" xml:space="preserve">
          <source>Banner file encoding.</source>
          <target state="translated">バナーファイルのエンコーディング。</target>
        </trans-unit>
        <trans-unit id="31782cae8097039ea1b403183cfa7a0a88273965" translate="yes" xml:space="preserve">
          <source>Banner image file location (jpg or png can also be used).</source>
          <target state="translated">バナー画像ファイルの場所(jpgやpngでも可)。</target>
        </trans-unit>
        <trans-unit id="1c26340dde7bf356e9b658625c2258bf6f043fa8" translate="yes" xml:space="preserve">
          <source>Banner text resource location.</source>
          <target state="translated">バナーテキストリソースの場所。</target>
        </trans-unit>
        <trans-unit id="3945491933dfbbcd2009ff0bf055a14877d81be7" translate="yes" xml:space="preserve">
          <source>Base URL for the Pushgateway.</source>
          <target state="translated">PushgatewayのベースURL。</target>
        </trans-unit>
        <trans-unit id="c5350caa8e4529c1cdbf89fd3e81fc6c65491cbe" translate="yes" xml:space="preserve">
          <source>Base path for Web endpoints. Relative to the servlet context path (server.servlet.context-path) or WebFlux base path (spring.webflux.base-path) when the management server is sharing the main server port. Relative to the management server base path (management.server.base-path) when a separate management server port (management.server.port) is configured.</source>
          <target state="translated">Web エンドポイントのベースパス。管理サーバーがメインサーバーポートを共有している場合は、サーブレットコンテキストパス (server.servlet.context-path)または WebFlux ベースパス (spring.webflux.base-path)を参照します。別々の管理サーバーポート(management.server.port)が設定されている場合は、管理サーバーのベースパス(management.server.base-path)を基準にします。</target>
        </trans-unit>
        <trans-unit id="e3698f62ddabf26cf11c6881cb30681c29ce28a1" translate="yes" xml:space="preserve">
          <source>Base path for all web handlers.</source>
          <target state="translated">すべてのウェブハンドラのベースパス。</target>
        </trans-unit>
        <trans-unit id="a489762e669575a11144614aaf3fc0d67a035cd0" translate="yes" xml:space="preserve">
          <source>Base path to be used by Spring Data REST to expose repository resources.</source>
          <target state="translated">リポジトリリソースを公開するためにSpring Data RESTで使用されるベースパス。</target>
        </trans-unit>
        <trans-unit id="fe3a2c74cdef708c63fafd6e59b6fb1cb9131590" translate="yes" xml:space="preserve">
          <source>Base suffix from which all operations should originate.</source>
          <target state="translated">すべての操作の元となる基底接尾辞。</target>
        </trans-unit>
        <trans-unit id="275e347ec4e370f684d3ffb9ed9dec290ee42bcd" translate="yes" xml:space="preserve">
          <source>Base time unit used to report durations.</source>
          <target state="translated">持続時間を報告するために使用される基本時間単位。</target>
        </trans-unit>
        <trans-unit id="741f7eccdfc7d43f516af01e3b5d464eee56323f" translate="yes" xml:space="preserve">
          <source>Base time unit used to report rates.</source>
          <target state="translated">レートのレポートに使用される基準時間単位。</target>
        </trans-unit>
        <trans-unit id="c5352d8272425394a73a72c6d262d35bc196a742" translate="yes" xml:space="preserve">
          <source>Batch size, expressed as the number of physical messages, to be used by the container.</source>
          <target state="translated">コンテナが使用する物理メッセージの数で表されるバッチサイズ。</target>
        </trans-unit>
        <trans-unit id="27c80edec7c4415d2f457ff7d0ad0ec904588cef" translate="yes" xml:space="preserve">
          <source>Be opinionated out of the box but get out of the way quickly as requirements start to diverge from the defaults.</source>
          <target state="translated">箱の外に意見を出しても、要件がデフォルトから乖離し始めるとすぐに逃げ出してしまう。</target>
        </trans-unit>
        <trans-unit id="2df9d75a4eab753b0623b5046da3e404ca0c006e" translate="yes" xml:space="preserve">
          <source>Bean Conditions</source>
          <target state="translated">豆の条件</target>
        </trans-unit>
        <trans-unit id="8d95aa116cc038cf04f6da968e2c6e5c65554c59" translate="yes" xml:space="preserve">
          <source>Beans and Dependency Injection</source>
          <target state="translated">豆と依存性注入</target>
        </trans-unit>
        <trans-unit id="b4bec0d62ea9fcf0ed7f2ff089591207ffb43431" translate="yes" xml:space="preserve">
          <source>Beans of the following types are automatically picked up and associated with the &lt;code&gt;Scheduler&lt;/code&gt;:</source>
          <target state="translated">次のタイプのBeanが自動的に取得され、 &lt;code&gt;Scheduler&lt;/code&gt; 関連付けられます。</target>
        </trans-unit>
        <trans-unit id="3a54f34126f8e27362a3f102bc2129909b281b11" translate="yes" xml:space="preserve">
          <source>Because Spring WebFlux does not strictly depend on the Servlet API and applications are deployed by default on an embedded Reactor Netty server, War deployment is not supported for WebFlux applications.</source>
          <target state="translated">Spring WebFluxはServlet APIに厳密に依存しておらず、アプリケーションはデフォルトで埋め込まれたReactor Nettyサーバーにデプロイされるため、WebFluxアプリケーションではWarのデプロイはサポートされていません。</target>
        </trans-unit>
        <trans-unit id="773efa42ab5e06d62545fa905da3d611b61f70c4" translate="yes" xml:space="preserve">
          <source>Because endpoints are technology agnostic, only simple types can be specified in the method signature. In particular declaring a single parameter with a &lt;code&gt;CustomData&lt;/code&gt; type defining a &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;counter&lt;/code&gt; properties is not supported.</source>
          <target state="translated">エンドポイントはテクノロジーに依存しないため、メソッドシグネチャで指定できるのは単純なタイプのみです。特に、 &lt;code&gt;name&lt;/code&gt; と &lt;code&gt;counter&lt;/code&gt; プロパティを定義する &lt;code&gt;CustomData&lt;/code&gt; タイプで単一のパラメーターを宣言することはサポートされていません。</target>
        </trans-unit>
        <trans-unit id="e839a035e132a47439a8b6103f66d12cd171fe40" translate="yes" xml:space="preserve">
          <source>Because the remote client is using the same classpath as the real application it can directly read application properties. This is how the &lt;code&gt;spring.devtools.remote.secret&lt;/code&gt; property is read and passed to the server for authentication.</source>
          <target state="translated">リモートクライアントは実際のアプリケーションと同じクラスパスを使用しているため、アプリケーションのプロパティを直接読み取ることができます。これは、 &lt;code&gt;spring.devtools.remote.secret&lt;/code&gt; プロパティが読み取られ、認証のためにサーバーに渡される方法です。</target>
        </trans-unit>
        <trans-unit id="3f913bf62b3f985edea248e4fceb166b77bad345" translate="yes" xml:space="preserve">
          <source>Because the standard &lt;code&gt;logback.xml&lt;/code&gt; configuration file is loaded too early, you cannot use extensions in it. You need to either use &lt;code&gt;logback-spring.xml&lt;/code&gt; or define a &lt;code&gt;logging.config&lt;/code&gt; property.</source>
          <target state="translated">標準の &lt;code&gt;logback.xml&lt;/code&gt; 構成ファイルのロードが早すぎるため、拡張機能を使用できません。 &lt;code&gt;logback-spring.xml&lt;/code&gt; を使用するか、 &lt;code&gt;logging.config&lt;/code&gt; プロパティを定義する必要があります。</target>
        </trans-unit>
        <trans-unit id="d869a29d72c274dcedac7cf41432fc4fb53aaa4c" translate="yes" xml:space="preserve">
          <source>Because this class is the source configuration for the test, any slice test actually tries to start Spring Batch, which is definitely not what you want to do. A recommended approach is to move that area-specific configuration to a separate &lt;code&gt;@Configuration&lt;/code&gt; class at the same level as your application, as shown in the following example:</source>
          <target state="translated">このクラスはテストのソース構成であるため、スライステストは実際にSpring Batchを開始しようとしますが、これは間違いなくあなたがやりたいことではありません。推奨されるアプローチは、次の例に示すように、その領域固有の構成をアプリケーションと同じレベルの別の &lt;code&gt;@Configuration&lt;/code&gt; クラスに移動することです。</target>
        </trans-unit>
        <trans-unit id="e4676e1b6bd6e243e47d3d0415abf19e2d6704d1" translate="yes" xml:space="preserve">
          <source>Because you need more information about web requests while developing Spring MVC and Spring WebFlux applications, developer tools will enable &lt;code&gt;DEBUG&lt;/code&gt; logging for the &lt;code&gt;web&lt;/code&gt; logging group. This will give you information about the incoming request, which handler is processing it, the response outcome, etc. If you wish to log all request details (including potentially sensitive information), you can turn on the &lt;code&gt;spring.mvc.log-request-details&lt;/code&gt; or &lt;code&gt;spring.codec.log-request-details&lt;/code&gt; configuration properties.</source>
          <target state="translated">SpringMVCおよびSpringWebFluxアプリケーションの開発中にWeb要求に関する詳細情報が必要になるため、開発者ツールは &lt;code&gt;web&lt;/code&gt; ロギンググループの &lt;code&gt;DEBUG&lt;/code&gt; ロギングを有効にします。これにより、受信リクエスト、それを処理しているハンドラー、応答結果などに関する情報が得られます。すべてのリクエストの詳細（機密情報を含む）をログに記録する場合は、 &lt;code&gt;spring.mvc.log-request-details&lt;/code&gt; オンにできます。 detailsまたは &lt;code&gt;spring.codec.log-request-details&lt;/code&gt; 構成プロパティ。</target>
        </trans-unit>
        <trans-unit id="fdd1cdc169c9bb710d93eebea94606850398223d" translate="yes" xml:space="preserve">
          <source>Because your custom configuration chooses to go with Hikari, &lt;code&gt;app.datasource.type&lt;/code&gt; has no effect. In practice, the builder is initialized with whatever value you might set there and then overridden by the call to &lt;code&gt;.type()&lt;/code&gt;.</source>
          <target state="translated">カスタム構成ではHikariを使用することを選択しているため、 &lt;code&gt;app.datasource.type&lt;/code&gt; は効果がありません。実際には、ビルダーはそこに設定した値で初期化され、 &lt;code&gt;.type()&lt;/code&gt; の呼び出しによってオーバーライドされます。</target>
        </trans-unit>
        <trans-unit id="c160995800039e207e14bbab812a8e3cc1b19347" translate="yes" xml:space="preserve">
          <source>Before setting the &lt;code&gt;management.endpoints.web.exposure.include&lt;/code&gt;, ensure that the exposed actuators do not contain sensitive information and/or are secured by placing them behind a firewall or by something like Spring Security.</source>
          <target state="translated">&lt;code&gt;management.endpoints.web.exposure.include&lt;/code&gt; を設定する前に、公開されたアクチュエータに機密情報が含まれていないこと、および/またはファイアウォールの背後に配置するか、SpringSecurityなどによって保護されていることを確認してください。</target>
        </trans-unit>
        <trans-unit id="d8dea278918cd0054b40e6acb1f38504cf70a9ae" translate="yes" xml:space="preserve">
          <source>Before we begin, open a terminal and run the following commands to ensure that you have valid versions of Java and Maven installed:</source>
          <target state="translated">始める前に、ターミナルを開き、以下のコマンドを実行して、JavaとMavenの有効なバージョンがインストールされていることを確認します。</target>
        </trans-unit>
        <trans-unit id="3708040638bf55732ce85de9a753af5edf425f84" translate="yes" xml:space="preserve">
          <source>Binding Maps</source>
          <target state="translated">バインディングマップ</target>
        </trans-unit>
        <trans-unit id="e1bdbd17575e0bcf4f565426b29f654d8e2b30a3" translate="yes" xml:space="preserve">
          <source>Binding from Environment Variables</source>
          <target state="translated">環境変数からのバインディング</target>
        </trans-unit>
        <trans-unit id="d57bea00c6b65d2363ee3a768d1e1575b5e91024" translate="yes" xml:space="preserve">
          <source>Bit depth to use for ANSI colors. Supported values are 4 (16 color) or 8 (256 color).</source>
          <target state="translated">ANSI カラーで使用するビット深度。サポートされている値は4(16色)または8(256色)です。</target>
        </trans-unit>
        <trans-unit id="66a4c027317badac28701ceed7c491c8a230c1b6" translate="yes" xml:space="preserve">
          <source>Blocking period before throwing an exception if the pool is still full.</source>
          <target state="translated">プールが満杯の場合に例外をスローする前のブロッキング期間。</target>
        </trans-unit>
        <trans-unit id="5e62711deb29edb2eb8b4f61155e1ac089cd4f42" translate="yes" xml:space="preserve">
          <source>Boolean flag to indicate that all properties should be added to System properties. It defaults to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">すべてのプロパティをシステムプロパティに追加する必要があることを示すブールフラグ。デフォルトは &lt;code&gt;false&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="40108501819953ced874e7a2b46c9dd3f8ffa3f8" translate="yes" xml:space="preserve">
          <source>Boot Applications</source>
          <target state="translated">ブートアプリケーション</target>
        </trans-unit>
        <trans-unit id="f083d4d09557d56f0d3057d552444fda0ae4d189" translate="yes" xml:space="preserve">
          <source>Bootstrap mode for JPA repositories.</source>
          <target state="translated">JPAリポジトリのBootstrapモード。</target>
        </trans-unit>
        <trans-unit id="fdfbbe239ddad582b7d345b2f7000e63f1e0ba80" translate="yes" xml:space="preserve">
          <source>Both Maven and Gradle allow generating a &lt;code&gt;git.properties&lt;/code&gt; file containing information about the state of your &lt;code&gt;git&lt;/code&gt; source code repository when the project was built.</source>
          <target state="translated">MavenとGradleはどちらも、プロジェクトがビルドされたときの &lt;code&gt;git&lt;/code&gt; ソースコードリポジトリの状態に関する情報を含む &lt;code&gt;git.properties&lt;/code&gt; ファイルを生成できます。</target>
        </trans-unit>
        <trans-unit id="588de1825ee7110dafdffe4073e8da137cf9ef4b" translate="yes" xml:space="preserve">
          <source>Both a &lt;code&gt;TaskExecutorBuilder&lt;/code&gt; bean and a &lt;code&gt;TaskSchedulerBuilder&lt;/code&gt; bean are made available in the context if a custom executor or scheduler needs to be created.</source>
          <target state="translated">カスタムエグゼキュータまたはスケジューラを作成する必要がある場合は、 &lt;code&gt;TaskExecutorBuilder&lt;/code&gt; Beanと &lt;code&gt;TaskSchedulerBuilder&lt;/code&gt; Beanの両方がコンテキストで使用可能になります。</target>
        </trans-unit>
        <trans-unit id="067bc2e07fad5ae6f99a87357c0915d733c1fa87" translate="yes" xml:space="preserve">
          <source>Both data sources are also bound for advanced customizations. For instance, you could configure them as follows:</source>
          <target state="translated">両方のデータソースは、高度なカスタマイズにもバインドされています。例えば、以下のように設定することができます。</target>
        </trans-unit>
        <trans-unit id="eabfd68ad72d6c19ab21554b8abfee2248d04ce2" translate="yes" xml:space="preserve">
          <source>Both the Maven plugin and the Gradle plugin allow generating build information containing the coordinates, name, and version of the project. The plugins can also be configured to add additional properties through configuration. When such a file is present, Spring Boot auto-configures a &lt;code&gt;BuildProperties&lt;/code&gt; bean.</source>
          <target state="translated">MavenプラグインとGradleプラグインはどちらも、プロジェクトの座標、名前、バージョンを含むビルド情報を生成できます。プラグインは、構成を通じてプロパティを追加するように構成することもできます。このようなファイルが存在する場合、 &lt;code&gt;BuildProperties&lt;/code&gt; はBuildPropertiesBeanを自動構成します。</target>
        </trans-unit>
        <trans-unit id="23f0b4d7a03c05a4090ef2684d8e1ce2f4b2e373" translate="yes" xml:space="preserve">
          <source>Browse for the &lt;code&gt;my-app&lt;/code&gt; project.</source>
          <target state="translated">ブラウズし &lt;code&gt;my-app&lt;/code&gt; プロジェクト。</target>
        </trans-unit>
        <trans-unit id="5e4bada1d5b9e2b2808ddcb4ffe26da9d9969b1c" translate="yes" xml:space="preserve">
          <source>Bucket connect timeout.</source>
          <target state="translated">バケット接続のタイムアウト。</target>
        </trans-unit>
        <trans-unit id="06b1a48833c9047bfbe82074654b5b9ae8b4ac7a" translate="yes" xml:space="preserve">
          <source>Bucket disconnect timeout.</source>
          <target state="translated">バケットの切断タイムアウト。</target>
        </trans-unit>
        <trans-unit id="69b54f866ff4d2203674f78f15ff24d1a670a0fb" translate="yes" xml:space="preserve">
          <source>Build Systems, Structuring Your Code, Configuration, Spring Beans and Dependency Injection, DevTools, and more.</source>
          <target state="translated">システムの構築、コードの構造化、設定、Spring Beansと依存性インジェクション、DevToolsなど。</target>
        </trans-unit>
        <trans-unit id="df8a913bb9a1136b0819c59f5810ead7a2c433a2" translate="yes" xml:space="preserve">
          <source>Build Tool</source>
          <target state="translated">ビルドツール</target>
        </trans-unit>
        <trans-unit id="12cdf6031fb89f015ada923a4f38051c6746bd38" translate="yes" xml:space="preserve">
          <source>Build Tool Plugins</source>
          <target state="translated">ビルドツールプラグイン</target>
        </trans-unit>
        <trans-unit id="2d0e5800bcfce36746ddd3e7ff011132a5d3f6d9" translate="yes" xml:space="preserve">
          <source>Build plugins automatically move the &lt;code&gt;Main-Class&lt;/code&gt; attribute to &lt;code&gt;Start-Class&lt;/code&gt; when the fat jar is built. If you use that, specify the name of the class to launch by using the &lt;code&gt;Main-Class&lt;/code&gt; attribute and leaving out &lt;code&gt;Start-Class&lt;/code&gt;.</source>
          <target state="translated">ビルドプラグインは、ファットjarがビルドされるときに、 &lt;code&gt;Main-Class&lt;/code&gt; 属性を &lt;code&gt;Start-Class&lt;/code&gt; に自動的に移動します。これを使用する場合は、 &lt;code&gt;Main-Class&lt;/code&gt; 属性を使用し、 &lt;code&gt;Start-Class&lt;/code&gt; を省略して、起動するクラスの名前を指定します。</target>
        </trans-unit>
        <trans-unit id="8ba7b78f8c321b3ac2f6a84ccc06f6ecc3c907a6" translate="yes" xml:space="preserve">
          <source>Build tool plugins</source>
          <target state="translated">ビルドツールのプラグイン</target>
        </trans-unit>
        <trans-unit id="cc815236eef110c573e3d32cdeaf87f9843fb554" translate="yes" xml:space="preserve">
          <source>By Extending Configuration</source>
          <target state="translated">設定を拡張することで</target>
        </trans-unit>
        <trans-unit id="9b6dcf01b5c52f05e10c98247737117b92361a6a" translate="yes" xml:space="preserve">
          <source>By default an Elastic Beanstalk environment is load balanced. The load balancer has a significant cost. To avoid that cost, set the environment type to &amp;ldquo;Single instance&amp;rdquo;, as described in &lt;a href=&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/environments-create-wizard.html#environments-create-wizard-capacity&quot;&gt;the Amazon documentation&lt;/a&gt;. You can also create single instance environments by using the CLI and the following command:</source>
          <target state="translated">デフォルトでは、ElasticBeanstalk環境は負荷分散されています。ロードバランサーにはかなりのコストがかかります。で説明したように、そのコストを回避するために、「シングルインスタンス」に環境タイプを設定する&lt;a href=&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/environments-create-wizard.html#environments-create-wizard-capacity&quot;&gt;Amazonの文書&lt;/a&gt;。CLIと次のコマンドを使用して、単一インスタンス環境を作成することもできます。</target>
        </trans-unit>
        <trans-unit id="6f922cb00664a3de0a688cf163ffc59c07e4a16d" translate="yes" xml:space="preserve">
          <source>By default groups will inherit the same &lt;code&gt;StatusAggregator&lt;/code&gt; and &lt;code&gt;HttpCodeStatusMapper&lt;/code&gt; settings as the system health, however, these can also be defined on a per-group basis. It&amp;rsquo;s also possible to override the &lt;code&gt;show-details&lt;/code&gt; and &lt;code&gt;roles&lt;/code&gt; properties if required:</source>
          <target state="translated">デフォルトでは、グループはシステムヘルスと同じ &lt;code&gt;StatusAggregator&lt;/code&gt; および &lt;code&gt;HttpCodeStatusMapper&lt;/code&gt; 設定を継承しますが、これらはグループごとに定義することもできます。必要に応じて、 &lt;code&gt;show-details&lt;/code&gt; プロパティと &lt;code&gt;roles&lt;/code&gt; プロパティをオーバーライドすることもできます。</target>
        </trans-unit>
        <trans-unit id="5e8eac4c822862df3e148505c7ec4cb4746eecdb" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;@SpringBootTest&lt;/code&gt; does not start the server. If you have web endpoints that you want to test against this mock environment, you can additionally configure &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/testing.html#spring-mvc-test-framework&quot;&gt;&lt;code&gt;MockMvc&lt;/code&gt;&lt;/a&gt; as shown in the following example:</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;@SpringBootTest&lt;/code&gt; はサーバーを起動しません。このモック環境に対してテストするWebエンドポイントがある場合は、次の例に示すように、&lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/testing.html#spring-mvc-test-framework&quot;&gt; &lt;code&gt;MockMvc&lt;/code&gt; &lt;/a&gt;を追加で構成できます。</target>
        </trans-unit>
        <trans-unit id="ab6c358cf807c790b878b809f245ac4cca6268d4" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;@SpringBootTest&lt;/code&gt; will not start a server. You can use the &lt;code&gt;webEnvironment&lt;/code&gt; attribute of &lt;code&gt;@SpringBootTest&lt;/code&gt; to further refine how your tests run:</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;@SpringBootTest&lt;/code&gt; はサーバーを起動しません。あなたは使用することができます &lt;code&gt;webEnvironment&lt;/code&gt; のの属性 &lt;code&gt;@SpringBootTest&lt;/code&gt; をあなたのテストの実行方法をさらに絞り込むこと：</target>
        </trans-unit>
        <trans-unit id="00fcb36f29ef5faadac143849aecf9dd7e93011d" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;INFO&lt;/code&gt; logging messages are shown, including some relevant startup details, such as the user that launched the application. If you need a log level other than &lt;code&gt;INFO&lt;/code&gt;, you can set it, as described in &lt;a href=&quot;#boot-features-custom-log-levels&quot;&gt;Log Levels&lt;/a&gt;. The application version is determined using the implementation version from the main application class&amp;rsquo;s package. Startup information logging can be turned off by setting &lt;code&gt;spring.main.log-startup-info&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;. This will also turn off logging of the application&amp;rsquo;s active profiles.</source>
          <target state="translated">デフォルトでは、アプリケーションを起動したユーザーなど、関連する起動の詳細を含む &lt;code&gt;INFO&lt;/code&gt; ログメッセージが表示されます。あなたが以外のログレベルが必要な場合は &lt;code&gt;INFO&lt;/code&gt; をで説明したように、あなたは、それを設定することができます&lt;a href=&quot;#boot-features-custom-log-levels&quot;&gt;ログレベル&lt;/a&gt;。アプリケーションバージョンは、メインアプリケーションクラスのパッケージの実装バージョンを使用して決定されます。 &lt;code&gt;spring.main.log-startup-info&lt;/code&gt; を &lt;code&gt;false&lt;/code&gt; に設定すると、スタートアップ情報のログをオフにできます。これにより、アプリケーションのアクティブなプロファイルのログもオフになります。</target>
        </trans-unit>
        <trans-unit id="43e3e0f96a82dbf052d84c5dc658a5a620c0a3e9" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;SpringApplication&lt;/code&gt; converts any command line option arguments (that is, arguments starting with &lt;code&gt;--&lt;/code&gt;, such as &lt;code&gt;--server.port=9000&lt;/code&gt;) to a &lt;code&gt;property&lt;/code&gt; and adds them to the Spring &lt;code&gt;Environment&lt;/code&gt;. As mentioned previously, command line properties always take precedence over file based property sources.</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;SpringApplication&lt;/code&gt; はコマンドラインオプションの引数（つまり、-server.port &lt;code&gt;--server.port=9000&lt;/code&gt; などの &lt;code&gt;--&lt;/code&gt; で始まる引数）を &lt;code&gt;property&lt;/code&gt; 変換し、それらをSpring &lt;code&gt;Environment&lt;/code&gt; 追加します。前述のように、コマンドラインプロパティは常にファイルベースのプロパティソースよりも優先されます。</target>
        </trans-unit>
        <trans-unit id="85e0e21fb8bfacddbcfb6691acd122bfbd9ab232" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;WebServiceTemplateBuilder&lt;/code&gt; detects a suitable HTTP-based &lt;code&gt;WebServiceMessageSender&lt;/code&gt; using the available HTTP client libraries on the classpath. You can also customize read and connection timeouts as follows:</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;WebServiceTemplateBuilder&lt;/code&gt; は、クラスパスで使用可能なHTTPクライアントライブラリを使用して、適切なHTTPベースの &lt;code&gt;WebServiceMessageSender&lt;/code&gt; を検出します。次のように、読み取りと接続のタイムアウトをカスタマイズすることもできます。</target>
        </trans-unit>
        <trans-unit id="1a0d7a20d5aa4d6a06b7126d8b5d51b8a93ea40b" translate="yes" xml:space="preserve">
          <source>By default, ActiveMQ creates a destination if it does not yet exist so that destinations are resolved against their provided names.</source>
          <target state="translated">デフォルトでは、ActiveMQは、指定された名前に対してデスティネーションが解決されるように、デスティネーションがまだ存在しない場合にデスティネーションを作成します。</target>
        </trans-unit>
        <trans-unit id="5d8a23b04f3d08e8f3efef5b6143d7efe1acc806" translate="yes" xml:space="preserve">
          <source>By default, Atomikos transaction logs are written to a &lt;code&gt;transaction-logs&lt;/code&gt; directory in your application&amp;rsquo;s home directory (the directory in which your application jar file resides). You can customize the location of this directory by setting a &lt;code&gt;spring.jta.log-dir&lt;/code&gt; property in your &lt;code&gt;application.properties&lt;/code&gt; file. Properties starting with &lt;code&gt;spring.jta.atomikos.properties&lt;/code&gt; can also be used to customize the Atomikos &lt;code&gt;UserTransactionServiceImp&lt;/code&gt;. See the &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/api/org/springframework/boot/jta/atomikos/AtomikosProperties.html&quot;&gt;&lt;code&gt;AtomikosProperties&lt;/code&gt; Javadoc&lt;/a&gt; for complete details.</source>
          <target state="translated">デフォルトでは、Atomikosトランザクションログは、アプリケーションのホームディレクトリ（アプリケーションのjarファイルが存在 &lt;code&gt;transaction-logs&lt;/code&gt; ディレクトリ）のtransaction-logsディレクトリに書き込まれます。 &lt;code&gt;application.properties&lt;/code&gt; ファイルで &lt;code&gt;spring.jta.log-dir&lt;/code&gt; プロパティを設定することにより、このディレクトリの場所をカスタマイズできます。始まるプロパティ &lt;code&gt;spring.jta.atomikos.properties&lt;/code&gt; はまたAtomikosカスタマイズするために使用することができます &lt;code&gt;UserTransactionServiceImp&lt;/code&gt; を。参照してください&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/api/org/springframework/boot/jta/atomikos/AtomikosProperties.html&quot;&gt; &lt;code&gt;AtomikosProperties&lt;/code&gt; の&lt;/a&gt;Javadocの完全な詳細については。</target>
        </trans-unit>
        <trans-unit id="08be2ac2bd93a712071652f98e6be10472f189ee" translate="yes" xml:space="preserve">
          <source>By default, Bitronix transaction log files (&lt;code&gt;part1.btm&lt;/code&gt; and &lt;code&gt;part2.btm&lt;/code&gt;) are written to a &lt;code&gt;transaction-logs&lt;/code&gt; directory in your application home directory. You can customize the location of this directory by setting the &lt;code&gt;spring.jta.log-dir&lt;/code&gt; property. Properties starting with &lt;code&gt;spring.jta.bitronix.properties&lt;/code&gt; are also bound to the &lt;code&gt;bitronix.tm.Configuration&lt;/code&gt; bean, allowing for complete customization. See the &lt;a href=&quot;https://github.com/bitronix/btm/wiki/Transaction-manager-configuration&quot;&gt;Bitronix documentation&lt;/a&gt; for details.</source>
          <target state="translated">デフォルトでは、Bitronixトランザクションログファイル（ &lt;code&gt;part1.btm&lt;/code&gt; および &lt;code&gt;part2.btm&lt;/code&gt; ）は、アプリケーションのホームディレクトリの &lt;code&gt;transaction-logs&lt;/code&gt; ディレクトリに書き込まれます。 &lt;code&gt;spring.jta.log-dir&lt;/code&gt; プロパティを設定することにより、このディレクトリの場所をカスタマイズできます。始まるプロパティ &lt;code&gt;spring.jta.bitronix.properties&lt;/code&gt; はまたにバインドされている &lt;code&gt;bitronix.tm.Configuration&lt;/code&gt; の完全なカスタマイズを可能に、豆。詳細については、&lt;a href=&quot;https://github.com/bitronix/btm/wiki/Transaction-manager-configuration&quot;&gt;Bitronixのドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="7903b7d29fad347f275d1b6b055b251601baf7a3" translate="yes" xml:space="preserve">
          <source>By default, Boxfuse activates a Spring profile named &lt;code&gt;boxfuse&lt;/code&gt; on startup. If your executable jar or war contains an &lt;a href=&quot;https://boxfuse.com/docs/payloads/springboot.html#configuration&quot;&gt;&lt;code&gt;application-boxfuse.properties&lt;/code&gt;&lt;/a&gt; file, Boxfuse bases its configuration on the properties it contains.</source>
          <target state="translated">デフォルトでは、Boxfuseは起動時に &lt;code&gt;boxfuse&lt;/code&gt; という名前のSpringプロファイルをアクティブにします。実行可能jarまたはwarに&lt;a href=&quot;https://boxfuse.com/docs/payloads/springboot.html#configuration&quot;&gt; &lt;code&gt;application-boxfuse.properties&lt;/code&gt; &lt;/a&gt;ファイルが含まれている場合、Boxfuseは含まれているプロパティに基づいて構成を行います。</target>
        </trans-unit>
        <trans-unit id="1a153da6eb67c351b47d825bf44daf70864dd8e6" translate="yes" xml:space="preserve">
          <source>By default, Data JDBC tests are transactional and roll back at the end of each test. See the &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/testing.html#testcontext-tx-enabling-transactions&quot;&gt;relevant section&lt;/a&gt; in the Spring Framework Reference Documentation for more details. If that is not what you want, you can disable transaction management for a test or for the whole test class as &lt;a href=&quot;#boot-features-testing-spring-boot-applications-testing-autoconfigured-jdbc-test&quot;&gt;shown in the JDBC example&lt;/a&gt;.</source>
          <target state="translated">デフォルトでは、データJDBCテストはトランザクションであり、各テストの最後にロールバックされます。詳細については、SpringFrameworkリファレンスドキュメントの&lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/testing.html#testcontext-tx-enabling-transactions&quot;&gt;関連セクション&lt;/a&gt;を参照してください。それが望ましくない場合は&lt;a href=&quot;#boot-features-testing-spring-boot-applications-testing-autoconfigured-jdbc-test&quot;&gt;、JDBCの例に示すように、&lt;/a&gt;テストまたはテストクラス全体のトランザクション管理を無効にすることができます。</target>
        </trans-unit>
        <trans-unit id="2934c735bcd854517916350aa5ceb9f1544dc92f" translate="yes" xml:space="preserve">
          <source>By default, Data Neo4j tests are transactional and roll back at the end of each test. See the &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/testing.html#testcontext-tx-enabling-transactions&quot;&gt;relevant section&lt;/a&gt; in the Spring Framework Reference Documentation for more details. If that is not what you want, you can disable transaction management for a test or for the whole class, as follows:</source>
          <target state="translated">デフォルトでは、Data Neo4jテストはトランザクションであり、各テストの終了時にロールバックされます。詳細については、SpringFrameworkリファレンスドキュメントの&lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/testing.html#testcontext-tx-enabling-transactions&quot;&gt;関連セクション&lt;/a&gt;を参照してください。それが望ましくない場合は、次のように、テストまたはクラス全体のトランザクション管理を無効にすることができます。</target>
        </trans-unit>
        <trans-unit id="3a4674b94ccb0ac673294ec9f620a5854c2cbbe0" translate="yes" xml:space="preserve">
          <source>By default, Elastic Beanstalk uploads sources and compiles them in AWS. However, it is best to upload the binaries instead. To do so, add lines similar to the following to your &lt;code&gt;.elasticbeanstalk/config.yml&lt;/code&gt; file:</source>
          <target state="translated">デフォルトでは、Elastic Beanstalkはソースをアップロードし、AWSでコンパイルします。ただし、代わりにバイナリをアップロードすることをお勧めします。これを行うには、次のような &lt;code&gt;.elasticbeanstalk/config.yml&lt;/code&gt; ファイルに追加します。</target>
        </trans-unit>
        <trans-unit id="aa8f0ea99136b1f0c78c0da02897ceb8ba47f1ee" translate="yes" xml:space="preserve">
          <source>By default, Flyway autowires the (&lt;code&gt;@Primary&lt;/code&gt;) &lt;code&gt;DataSource&lt;/code&gt; in your context and uses that for migrations. If you like to use a different &lt;code&gt;DataSource&lt;/code&gt;, you can create one and mark its &lt;code&gt;@Bean&lt;/code&gt; as &lt;code&gt;@FlywayDataSource&lt;/code&gt;. If you do so and want two data sources, remember to create another one and mark it as &lt;code&gt;@Primary&lt;/code&gt;. Alternatively, you can use Flyway&amp;rsquo;s native &lt;code&gt;DataSource&lt;/code&gt; by setting &lt;code&gt;spring.flyway.[url,user,password]&lt;/code&gt; in external properties. Setting either &lt;code&gt;spring.flyway.url&lt;/code&gt; or &lt;code&gt;spring.flyway.user&lt;/code&gt; is sufficient to cause Flyway to use its own &lt;code&gt;DataSource&lt;/code&gt;. If any of the three properties has not been set, the value of its equivalent &lt;code&gt;spring.datasource&lt;/code&gt; property will be used.</source>
          <target state="translated">デフォルトでは、Flywayはコンテキスト内の（ &lt;code&gt;@Primary&lt;/code&gt; ）データ &lt;code&gt;DataSource&lt;/code&gt; を自動配線し、それを移行に使用します。あなたが別の使用したい場合は &lt;code&gt;DataSource&lt;/code&gt; を、あなたは1を作成し、そのマークを付けることができ &lt;code&gt;@Bean&lt;/code&gt; として &lt;code&gt;@FlywayDataSource&lt;/code&gt; を。そうして2つのデータソースが必要な場合は、別のデータソースを作成し、 &lt;code&gt;@Primary&lt;/code&gt; としてマークすることを忘れないでください。または、外部プロパティで &lt;code&gt;spring.flyway.[url,user,password]&lt;/code&gt; を設定して、Flywayのネイティブデータ &lt;code&gt;DataSource&lt;/code&gt; 使用することもできます。 &lt;code&gt;spring.flyway.user&lt;/code&gt; が独自のデータ &lt;code&gt;DataSource&lt;/code&gt; を使用するには、 &lt;code&gt;spring.flyway.url&lt;/code&gt; またはspring.flyway.userのいずれかを設定するだけで十分です。。3つのプロパティのいずれかが設定されていない場合は、同等の &lt;code&gt;spring.datasource&lt;/code&gt; プロパティの値が使用されます。</target>
        </trans-unit>
        <trans-unit id="fa7aabf9d69c5c4e7d6933fbffe5914daec6bddc" translate="yes" xml:space="preserve">
          <source>By default, JDBC tests are transactional and roll back at the end of each test. See the &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/testing.html#testcontext-tx-enabling-transactions&quot;&gt;relevant section&lt;/a&gt; in the Spring Framework Reference Documentation for more details. If that is not what you want, you can disable transaction management for a test or for the whole class, as follows:</source>
          <target state="translated">デフォルトでは、JDBCテストはトランザクションであり、各テストの最後にロールバックされます。詳細については、SpringFrameworkリファレンスドキュメントの&lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/testing.html#testcontext-tx-enabling-transactions&quot;&gt;関連セクション&lt;/a&gt;を参照してください。それが望ましくない場合は、次のように、テストまたはクラス全体のトランザクション管理を無効にすることができます。</target>
        </trans-unit>
        <trans-unit id="0e38229ee0acb32bfbfa6c383a4d961147cbfc71" translate="yes" xml:space="preserve">
          <source>By default, JPA databases are automatically created &lt;strong&gt;only&lt;/strong&gt; if you use an embedded database (H2, HSQL, or Derby). You can explicitly configure JPA settings by using &lt;code&gt;spring.jpa.*&lt;/code&gt; properties. For example, to create and drop tables you can add the following line to your &lt;code&gt;application.properties&lt;/code&gt;:</source>
          <target state="translated">デフォルトでは、JPAデータベースは、組み込みデータベース（H2、HSQL、またはDerby）を使用する場合に&lt;strong&gt;のみ&lt;/strong&gt;自動的に作成されます。 &lt;code&gt;spring.jpa.*&lt;/code&gt; プロパティを使用して、JPA設定を明示的に構成できます。たとえば、テーブルを作成および削除するには、 &lt;code&gt;application.properties&lt;/code&gt; に次の行を追加します。</target>
        </trans-unit>
        <trans-unit id="375ba836c2e0ebad63ed0b5e96b57231828b81a9" translate="yes" xml:space="preserve">
          <source>By default, Jersey is set up as a Servlet in a &lt;code&gt;@Bean&lt;/code&gt; of type &lt;code&gt;ServletRegistrationBean&lt;/code&gt; named &lt;code&gt;jerseyServletRegistration&lt;/code&gt;. By default, the servlet is initialized lazily, but you can customize that behavior by setting &lt;code&gt;spring.jersey.servlet.load-on-startup&lt;/code&gt;. You can disable or override that bean by creating one of your own with the same name. You can also use a filter instead of a servlet by setting &lt;code&gt;spring.jersey.type=filter&lt;/code&gt; (in which case, the &lt;code&gt;@Bean&lt;/code&gt; to replace or override is &lt;code&gt;jerseyFilterRegistration&lt;/code&gt;). The filter has an &lt;code&gt;@Order&lt;/code&gt;, which you can set with &lt;code&gt;spring.jersey.filter.order&lt;/code&gt;. Both the servlet and the filter registrations can be given init parameters by using &lt;code&gt;spring.jersey.init.*&lt;/code&gt; to specify a map of properties.</source>
          <target state="translated">デフォルトでは、ジャージーは、サーブレットとして設定されて &lt;code&gt;@Bean&lt;/code&gt; 型の &lt;code&gt;ServletRegistrationBean&lt;/code&gt; 命名 &lt;code&gt;jerseyServletRegistration&lt;/code&gt; 。デフォルトでは、サーブレットは遅延初期化されますが、 &lt;code&gt;spring.jersey.servlet.load-on-startup&lt;/code&gt; を設定することでその動作をカスタマイズできます。同じ名前で独自のBeanを作成することにより、そのBeanを無効化またはオーバーライドできます。また、設定することにより、フィルタの代わりに、サーブレットを使用することができ &lt;code&gt;spring.jersey.type=filter&lt;/code&gt; （その場合、 &lt;code&gt;@Bean&lt;/code&gt; は、交換またはオーバーライドすることである &lt;code&gt;jerseyFilterRegistration&lt;/code&gt; ）。フィルタはあり &lt;code&gt;@Order&lt;/code&gt; あなたが設定することができ、 &lt;code&gt;spring.jersey.filter.order&lt;/code&gt; を。 &lt;code&gt;spring.jersey.init.*&lt;/code&gt; を使用してプロパティのマップを指定することにより、サーブレットとフィルターの両方の登録にinitパラメーターを指定できます。</target>
        </trans-unit>
        <trans-unit id="e6557035a2ea639cc9f3a877fbf18bab5461f8bb" translate="yes" xml:space="preserve">
          <source>By default, Jersey server metrics are tagged with the following information:</source>
          <target state="translated">デフォルトでは、ジャージーサーバーのメトリクスには以下の情報がタグ付けされています。</target>
        </trans-unit>
        <trans-unit id="6fc240fe3169879a7e2fb9302f7fdca6e16f92af" translate="yes" xml:space="preserve">
          <source>By default, Liquibase autowires the (&lt;code&gt;@Primary&lt;/code&gt;) &lt;code&gt;DataSource&lt;/code&gt; in your context and uses that for migrations. If you need to use a different &lt;code&gt;DataSource&lt;/code&gt;, you can create one and mark its &lt;code&gt;@Bean&lt;/code&gt; as &lt;code&gt;@LiquibaseDataSource&lt;/code&gt;. If you do so and you want two data sources, remember to create another one and mark it as &lt;code&gt;@Primary&lt;/code&gt;. Alternatively, you can use Liquibase&amp;rsquo;s native &lt;code&gt;DataSource&lt;/code&gt; by setting &lt;code&gt;spring.liquibase.[driver-class-name,url,user,password]&lt;/code&gt; in external properties. Setting either &lt;code&gt;spring.liquibase.url&lt;/code&gt; or &lt;code&gt;spring.liquibase.user&lt;/code&gt; is sufficient to cause Liquibase to use its own &lt;code&gt;DataSource&lt;/code&gt;. If any of the three properties has not been set, the value of its equivalent &lt;code&gt;spring.datasource&lt;/code&gt; property will be used.</source>
          <target state="translated">デフォルトでは、Liquibaseはコンテキスト内の（ &lt;code&gt;@Primary&lt;/code&gt; ）データ &lt;code&gt;DataSource&lt;/code&gt; を自動配線し、それを移行に使用します。あなたが別の使用する必要がある場合は &lt;code&gt;DataSource&lt;/code&gt; を、あなたは1を作成し、そのマークを付けることができ &lt;code&gt;@Bean&lt;/code&gt; として &lt;code&gt;@LiquibaseDataSource&lt;/code&gt; を。そうして2つのデータソースが必要な場合は、別のデータソースを作成し、 &lt;code&gt;@Primary&lt;/code&gt; としてマークすることを忘れないでください。または、外部プロパティで &lt;code&gt;spring.liquibase.[driver-class-name,url,user,password]&lt;/code&gt; を設定して、Liquibaseのネイティブデータ &lt;code&gt;DataSource&lt;/code&gt; 使用することもできます。 &lt;code&gt;spring.liquibase.url&lt;/code&gt; または &lt;code&gt;spring.liquibase.user&lt;/code&gt; のいずれかを設定するだけで、Liquibaseに独自の設定を実行させることができます &lt;code&gt;DataSource&lt;/code&gt; 。3つのプロパティのいずれかが設定されていない場合は、同等の &lt;code&gt;spring.datasource&lt;/code&gt; プロパティの値が使用されます。</target>
        </trans-unit>
        <trans-unit id="555f4a87cde124caf0813e955848b36e827b85d4" translate="yes" xml:space="preserve">
          <source>By default, Spring Boot configures the physical naming strategy with &lt;code&gt;SpringPhysicalNamingStrategy&lt;/code&gt;. This implementation provides the same table structure as Hibernate 4: all dots are replaced by underscores and camel casing is replaced by underscores as well. Additionally, by default, all table names are generated in lower case. For example, a &lt;code&gt;TelephoneNumber&lt;/code&gt; entity is mapped to the &lt;code&gt;telephone_number&lt;/code&gt; table. If your schema requires mixed-case identifiers, define a custom &lt;code&gt;SpringPhysicalNamingStrategy&lt;/code&gt; bean, as shown in the following example:</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;SpringPhysicalNamingStrategy&lt;/code&gt; 使用して物理的な命名戦略を構成します。この実装は、Hibernate 4と同じテーブル構造を提供します。すべてのドットはアンダースコアに置き換えられ、キャメルケースもアンダースコアに置き換えられます。さらに、デフォルトでは、すべてのテーブル名は小文字で生成されます。たとえば、 &lt;code&gt;TelephoneNumber&lt;/code&gt; エンティティは &lt;code&gt;telephone_number&lt;/code&gt; テーブルにマップされます。スキーマで大文字と小文字が混在する識別子が必要な場合は、次の例に示すように、カスタム &lt;code&gt;SpringPhysicalNamingStrategy&lt;/code&gt; Beanを定義します。</target>
        </trans-unit>
        <trans-unit id="b532c212458742093d4ed1313fc291a422708040" translate="yes" xml:space="preserve">
          <source>By default, Spring Boot does not add other Health Indicators to these groups.</source>
          <target state="translated">デフォルトでは、Spring Bootはこれらのグループに他のヘルスインジケータを追加しません。</target>
        </trans-unit>
        <trans-unit id="93fa523167cdbae61b64be7aaa1d816ec43929ae" translate="yes" xml:space="preserve">
          <source>By default, Spring Boot enables the fail-fast feature of the Spring JDBC initializer. This means that, if the scripts cause exceptions, the application fails to start. You can tune that behavior by setting &lt;code&gt;spring.datasource.continue-on-error&lt;/code&gt;.</source>
          <target state="translated">デフォルトでは、SpringBootはSpringJDBC初期化子のフェイルファスト機能を有効にします。これは、スクリプトによって例外が発生した場合、アプリケーションの起動に失敗することを意味します。 &lt;code&gt;spring.datasource.continue-on-error&lt;/code&gt; を設定することで、その動作を調整できます。</target>
        </trans-unit>
        <trans-unit id="6634304947a8d75344fe83c68d841ae3f7be9459" translate="yes" xml:space="preserve">
          <source>By default, Spring Boot includes &lt;code&gt;config/*/&lt;/code&gt; in the default search locations. The means that all subdirectories of the &lt;code&gt;/config&lt;/code&gt; directory outside of your jar will be searched.</source>
          <target state="translated">デフォルトでは、SpringBootはデフォルトの検索場所に &lt;code&gt;config/*/&lt;/code&gt; を含みます。これは、jarの外部にある &lt;code&gt;/config&lt;/code&gt; ディレクトリのすべてのサブディレクトリが検索されることを意味します。</target>
        </trans-unit>
        <trans-unit id="d5d087fd6940ce1dfff8c5a6043d6d172ab585de" translate="yes" xml:space="preserve">
          <source>By default, Spring Boot logs only to the console and does not write log files. If you want to write log files in addition to the console output, you need to set a &lt;code&gt;logging.file.name&lt;/code&gt; or &lt;code&gt;logging.file.path&lt;/code&gt; property (for example, in your &lt;code&gt;application.properties&lt;/code&gt;).</source>
          <target state="translated">デフォルトでは、Spring Bootはコンソールにのみログを記録し、ログファイルを書き込みません。コンソール出力に加えてログファイルを書き込む場合は、 &lt;code&gt;logging.file.name&lt;/code&gt; または &lt;code&gt;logging.file.path&lt;/code&gt; プロパティを設定する必要があります（たとえば、 &lt;code&gt;application.properties&lt;/code&gt; で）。</target>
        </trans-unit>
        <trans-unit id="b129912d36a2fed70108db2941ba4170ec85b9b6" translate="yes" xml:space="preserve">
          <source>By default, Spring Boot provides an &lt;code&gt;/error&lt;/code&gt; mapping that handles all errors in a sensible way, and it is registered as a &amp;ldquo;global&amp;rdquo; error page in the servlet container. For machine clients, it produces a JSON response with details of the error, the HTTP status, and the exception message. For browser clients, there is a &amp;ldquo;whitelabel&amp;rdquo; error view that renders the same data in HTML format (to customize it, add a &lt;code&gt;View&lt;/code&gt; that resolves to &lt;code&gt;error&lt;/code&gt;). To replace the default behavior completely, you can implement &lt;code&gt;ErrorController&lt;/code&gt; and register a bean definition of that type or add a bean of type &lt;code&gt;ErrorAttributes&lt;/code&gt; to use the existing mechanism but replace the contents.</source>
          <target state="translated">デフォルトでは、SpringBootはすべてのエラーを適切な方法で処理する &lt;code&gt;/error&lt;/code&gt; マッピングを提供し、サーブレットコンテナに「グローバル」エラーページとして登録されます。マシンクライアントの場合、エラー、HTTPステータス、および例外メッセージの詳細を含むJSON応答を生成します。ブラウザクライアントの場合、同じデータをHTML形式でレンダリングする「ホワイトラベル」エラービューがあります（カスタマイズするには、 &lt;code&gt;error&lt;/code&gt; を解決する &lt;code&gt;View&lt;/code&gt; を追加します）。デフォルトの動作を完全に置き換えるには、 &lt;code&gt;ErrorController&lt;/code&gt; を実装してそのタイプのBean定義を登録するか、 &lt;code&gt;ErrorAttributes&lt;/code&gt; タイプのBeanを追加して既存のメカニズムを使用しますが、内容を置き換えます。</target>
        </trans-unit>
        <trans-unit id="df5d1ea902a10b69666621b1d00b57e62713e401" translate="yes" xml:space="preserve">
          <source>By default, Spring Boot provides metadata for all supported data sources; you can add additional &lt;code&gt;DataSourcePoolMetadataProvider&lt;/code&gt; beans if your favorite data source isn&amp;rsquo;t supported out of the box. See &lt;code&gt;DataSourcePoolMetadataProvidersConfiguration&lt;/code&gt; for examples.</source>
          <target state="translated">デフォルトでは、SpringBootはサポートされているすべてのデータソースのメタデータを提供します。お気に入りのデータソースがすぐにサポートされていない場合は、 &lt;code&gt;DataSourcePoolMetadataProvider&lt;/code&gt; Beanを追加できます。例については、 &lt;code&gt;DataSourcePoolMetadataProvidersConfiguration&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="3908a5145b6210401fe0cf36796b7c17bf17c9fb" translate="yes" xml:space="preserve">
          <source>By default, Spring Boot puts &lt;code&gt;WebDriver&lt;/code&gt; beans in a special &amp;ldquo;scope&amp;rdquo; to ensure that the driver exits after each test and that a new instance is injected. If you do not want this behavior, you can add &lt;code&gt;@Scope(&quot;singleton&quot;)&lt;/code&gt; to your &lt;code&gt;WebDriver&lt;/code&gt;&lt;code&gt;@Bean&lt;/code&gt; definition.</source>
          <target state="translated">デフォルトでは、Spring Bootは &lt;code&gt;WebDriver&lt;/code&gt; Beanを特別な「スコープ」に配置して、各テストの後にドライバーが終了し、新しいインスタンスが挿入されるようにします。この動作を望まない場合は、 &lt;code&gt;@Scope(&quot;singleton&quot;)&lt;/code&gt; を &lt;code&gt;WebDriver&lt;/code&gt; &lt;code&gt;@Bean&lt;/code&gt; 定義に追加できます。</target>
        </trans-unit>
        <trans-unit id="49e538bccc11d3ce859be26139fc57ae59383b2e" translate="yes" xml:space="preserve">
          <source>By default, Spring Boot registers a &lt;code&gt;BeanContainer&lt;/code&gt; implementation that uses the &lt;code&gt;BeanFactory&lt;/code&gt; so that converters and entity listeners can use regular dependency injection.</source>
          <target state="translated">デフォルトでは、Spring Bootは &lt;code&gt;BeanFactory&lt;/code&gt; を使用する &lt;code&gt;BeanContainer&lt;/code&gt; 実装を登録するため、コンバーターとエンティティーリスナーは定期的な依存性注入を使用できます。</target>
        </trans-unit>
        <trans-unit id="7b72a14f4fade56c4c61db994be3e80b33ae7162" translate="yes" xml:space="preserve">
          <source>By default, Spring Boot serves static content from a directory called &lt;code&gt;/static&lt;/code&gt; (or &lt;code&gt;/public&lt;/code&gt; or &lt;code&gt;/resources&lt;/code&gt; or &lt;code&gt;/META-INF/resources&lt;/code&gt;) in the classpath or from the root of the &lt;code&gt;ServletContext&lt;/code&gt;. It uses the &lt;code&gt;ResourceHttpRequestHandler&lt;/code&gt; from Spring MVC so that you can modify that behavior by adding your own &lt;code&gt;WebMvcConfigurer&lt;/code&gt; and overriding the &lt;code&gt;addResourceHandlers&lt;/code&gt; method.</source>
          <target state="translated">デフォルトでは、Spring Bootは、クラスパス内の &lt;code&gt;/static&lt;/code&gt; （または &lt;code&gt;/public&lt;/code&gt; または &lt;code&gt;/resources&lt;/code&gt; または &lt;code&gt;/META-INF/resources&lt;/code&gt; ）というディレクトリから、または &lt;code&gt;ServletContext&lt;/code&gt; のルートから静的コンテンツを提供します。Spring MVCの &lt;code&gt;ResourceHttpRequestHandler&lt;/code&gt; を使用するため、独自の &lt;code&gt;WebMvcConfigurer&lt;/code&gt; を追加し、 &lt;code&gt;addResourceHandlers&lt;/code&gt; メソッドをオーバーライドすることでその動作を変更できます。</target>
        </trans-unit>
        <trans-unit id="224b9e3edef4d4ebcb1bc3bb579d3a17e7f02522" translate="yes" xml:space="preserve">
          <source>By default, Spring Boot serves static content from a directory called &lt;code&gt;/static&lt;/code&gt; (or &lt;code&gt;/public&lt;/code&gt; or &lt;code&gt;/resources&lt;/code&gt; or &lt;code&gt;/META-INF/resources&lt;/code&gt;) in the classpath. It uses the &lt;code&gt;ResourceWebHandler&lt;/code&gt; from Spring WebFlux so that you can modify that behavior by adding your own &lt;code&gt;WebFluxConfigurer&lt;/code&gt; and overriding the &lt;code&gt;addResourceHandlers&lt;/code&gt; method.</source>
          <target state="translated">デフォルトでは、SpringBootはクラスパスの &lt;code&gt;/static&lt;/code&gt; （または &lt;code&gt;/public&lt;/code&gt; または &lt;code&gt;/resources&lt;/code&gt; または &lt;code&gt;/META-INF/resources&lt;/code&gt; ）と呼ばれるディレクトリから静的コンテンツを提供します。Spring WebFluxの &lt;code&gt;ResourceWebHandler&lt;/code&gt; を使用するため、独自の &lt;code&gt;WebFluxConfigurer&lt;/code&gt; を追加し、 &lt;code&gt;addResourceHandlers&lt;/code&gt; メソッドをオーバーライドすることで、その動作を変更できます。</target>
        </trans-unit>
        <trans-unit id="ee11a083f41bf05675971defcb58c75b40042c06" translate="yes" xml:space="preserve">
          <source>By default, Spring Boot will auto-configure and register a &lt;code&gt;ReactiveElasticsearchClient&lt;/code&gt; bean that targets &lt;code&gt;&lt;a href=&quot;http://localhost:9200&quot;&gt;localhost:9200&lt;/a&gt;&lt;/code&gt;. You can further tune how it is configured, as shown in the following example:</source>
          <target state="translated">デフォルトでは、Spring Bootは &lt;code&gt;&lt;a href=&quot;http://localhost:9200&quot;&gt;localhost:9200&lt;/a&gt;&lt;/code&gt; をターゲットとする &lt;code&gt;ReactiveElasticsearchClient&lt;/code&gt; Beanを自動構成して登録します。次の例に示すように、構成方法をさらに調整できます。</target>
        </trans-unit>
        <trans-unit id="8011894b73e553a952365ec13f28d1192af2caff" translate="yes" xml:space="preserve">
          <source>By default, Spring MVC-related metrics are tagged with the following information:</source>
          <target state="translated">デフォルトでは、Spring MVC関連のメトリクスには以下の情報がタグ付けされています。</target>
        </trans-unit>
        <trans-unit id="a071e4e34cfe690ca7d9c23304e4b695d32c37b1" translate="yes" xml:space="preserve">
          <source>By default, Spring Security&amp;rsquo;s &lt;code&gt;OAuth2LoginAuthenticationFilter&lt;/code&gt; only processes URLs matching &lt;code&gt;/login/oauth2/code/*&lt;/code&gt;. If you want to customize the &lt;code&gt;redirect-uri&lt;/code&gt; to use a different pattern, you need to provide configuration to process that custom pattern. For example, for servlet applications, you can add your own &lt;code&gt;WebSecurityConfigurerAdapter&lt;/code&gt; that resembles the following:</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;OAuth2LoginAuthenticationFilter&lt;/code&gt; のOAuth2LoginAuthenticationFilterは &lt;code&gt;/login/oauth2/code/*&lt;/code&gt; に一致するURLのみを処理します。別のパターンを使用するように &lt;code&gt;redirect-uri&lt;/code&gt; をカスタマイズする場合は、そのカスタムパターンを処理するための構成を提供する必要があります。たとえば、サーブレットアプリケーションの場合、次のような独自の &lt;code&gt;WebSecurityConfigurerAdapter&lt;/code&gt; を追加できます。</target>
        </trans-unit>
        <trans-unit id="12eba20cb7cdd381fc192bb795a85ddd17551b99" translate="yes" xml:space="preserve">
          <source>By default, WebFlux-related metrics are tagged with the following information:</source>
          <target state="translated">デフォルトでは、WebFlux 関連のメトリクスには以下の情報がタグ付けされています。</target>
        </trans-unit>
        <trans-unit id="30ea05b878e7283a72555d0f609f23c0cce7d613" translate="yes" xml:space="preserve">
          <source>By default, a &lt;code&gt;CachingConnectionFactory&lt;/code&gt; wraps the native &lt;code&gt;ConnectionFactory&lt;/code&gt; with sensible settings that you can control by external configuration properties in &lt;code&gt;spring.jms.*&lt;/code&gt;:</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;CachingConnectionFactory&lt;/code&gt; はネイティブラップ &lt;code&gt;ConnectionFactory&lt;/code&gt; あなたが外部の構成プロパティによって制御することができます賢明な設定で &lt;code&gt;spring.jms.*&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="c00209d03de7d41f07681b12765dc6ac8c809ec0" translate="yes" xml:space="preserve">
          <source>By default, a key prefix is added so that, if two separate caches use the same key, Redis does not have overlapping keys and cannot return invalid values. We strongly recommend keeping this setting enabled if you create your own &lt;code&gt;RedisCacheManager&lt;/code&gt;.</source>
          <target state="translated">デフォルトでは、キープレフィックスが追加されるため、2つの別々のキャッシュが同じキーを使用する場合、Redisには重複するキーがなく、無効な値を返すことができません。独自の &lt;code&gt;RedisCacheManager&lt;/code&gt; を作成する場合は、この設定を有効にしておくことを強くお勧めします。</target>
        </trans-unit>
        <trans-unit id="8cfbc4757fa4f13c819e0154b1a25cf18513fa4c" translate="yes" xml:space="preserve">
          <source>By default, a standard schema is used to validate &lt;code&gt;LDIF&lt;/code&gt; files. You can turn off validation altogether by setting the &lt;code&gt;spring.ldap.embedded.validation.enabled&lt;/code&gt; property. If you have custom attributes, you can use &lt;code&gt;spring.ldap.embedded.validation.schema&lt;/code&gt; to define your custom attribute types or object classes.</source>
          <target state="translated">デフォルトでは、標準スキーマが &lt;code&gt;LDIF&lt;/code&gt; ファイルの検証に使用されます。 &lt;code&gt;spring.ldap.embedded.validation.enabled&lt;/code&gt; プロパティを設定することにより、検証を完全にオフにすることができます。カスタム属性がある場合は、 &lt;code&gt;spring.ldap.embedded.validation.schema&lt;/code&gt; を使用して、カスタム属性タイプまたはオブジェクトクラスを定義できます。</target>
        </trans-unit>
        <trans-unit id="a7ac562e0abd6d3edc6d521786f6d6d7db3fd27d" translate="yes" xml:space="preserve">
          <source>By default, all content is served from the root of your application (&lt;code&gt;/&lt;/code&gt;). If you would rather map to a different path, you can configure one as follows:</source>
          <target state="translated">デフォルトでは、すべてのコンテンツはアプリケーションのルート（ &lt;code&gt;/&lt;/code&gt; ）から提供されます。別のパスにマップする場合は、次のように構成できます。</target>
        </trans-unit>
        <trans-unit id="7a61adef6ef247a70dc10d1025fd526af53bda18" translate="yes" xml:space="preserve">
          <source>By default, all endpoints except for &lt;code&gt;shutdown&lt;/code&gt; are enabled. To configure the enablement of an endpoint, use its &lt;code&gt;management.endpoint.&amp;lt;id&amp;gt;.enabled&lt;/code&gt; property. The following example enables the &lt;code&gt;shutdown&lt;/code&gt; endpoint:</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;shutdown&lt;/code&gt; を除くすべてのエンドポイントが有効になっています。エンドポイントの有効化を構成するには、その &lt;code&gt;management.endpoint.&amp;lt;id&amp;gt;.enabled&lt;/code&gt; プロパティを使用します。次の例では、 &lt;code&gt;shutdown&lt;/code&gt; エンドポイントを有効にします。</target>
        </trans-unit>
        <trans-unit id="09f159313b764af0fec41a0ea3bbef6a5e099ddd" translate="yes" xml:space="preserve">
          <source>By default, an in-memory &lt;code&gt;JobStore&lt;/code&gt; is used. However, it is possible to configure a JDBC-based store if a &lt;code&gt;DataSource&lt;/code&gt; bean is available in your application and if the &lt;code&gt;spring.quartz.job-store-type&lt;/code&gt; property is configured accordingly, as shown in the following example:</source>
          <target state="translated">デフォルトでは、メモリ内の &lt;code&gt;JobStore&lt;/code&gt; が使用されます。ただし、次の例に示すように、アプリケーションで &lt;code&gt;DataSource&lt;/code&gt; Beanが使用可能であり、それに応じて &lt;code&gt;spring.quartz.job-store-type&lt;/code&gt; プロパティが構成されている場合は、JDBCベースのストアを構成できます。</target>
        </trans-unit>
        <trans-unit id="873f4dcb0d2838297e44bb4d905261f07bc53bcf" translate="yes" xml:space="preserve">
          <source>By default, any open project in your IDE is loaded with the &amp;ldquo;restart&amp;rdquo; classloader, and any regular &lt;code&gt;.jar&lt;/code&gt; file is loaded with the &amp;ldquo;base&amp;rdquo; classloader. If you work on a multi-module project, and not every module is imported into your IDE, you may need to customize things. To do so, you can create a &lt;code&gt;META-INF/spring-devtools.properties&lt;/code&gt; file.</source>
          <target state="translated">デフォルトでは、IDEで開いているプロジェクトはすべて「restart」クラスローダーでロードされ、通常の &lt;code&gt;.jar&lt;/code&gt; ファイルは「base」クラスローダーでロードされます。マルチモジュールプロジェクトで作業していて、すべてのモジュールがIDEにインポートされているわけではない場合は、カスタマイズが必要になる場合があります。これを行うには、 &lt;code&gt;META-INF/spring-devtools.properties&lt;/code&gt; ファイルを作成できます。</target>
        </trans-unit>
        <trans-unit id="4e2f3bcf8ccbc1e1f5214711439d5164768fdea5" translate="yes" xml:space="preserve">
          <source>By default, batch applications require a &lt;code&gt;DataSource&lt;/code&gt; to store job details. Spring Batch expects a single &lt;code&gt;DataSource&lt;/code&gt; by default. To have it use a &lt;code&gt;DataSource&lt;/code&gt; other than the application&amp;rsquo;s main &lt;code&gt;DataSource&lt;/code&gt;, declare a &lt;code&gt;DataSource&lt;/code&gt; bean, annotating its &lt;code&gt;@Bean&lt;/code&gt; method with &lt;code&gt;@BatchDataSource&lt;/code&gt;. If you do so and want two data sources, remember to mark the other one &lt;code&gt;@Primary&lt;/code&gt;. To take greater control, implement &lt;code&gt;BatchConfigurer&lt;/code&gt;. See &lt;a href=&quot;https://docs.spring.io/spring-batch/docs/4.3.0/api/org/springframework/batch/core/configuration/annotation/EnableBatchProcessing.html&quot;&gt;The Javadoc of &lt;code&gt;@EnableBatchProcessing&lt;/code&gt;&lt;/a&gt; for more details.</source>
          <target state="translated">デフォルトでは、バッチアプリケーションはジョブの詳細を保存するためにデータ &lt;code&gt;DataSource&lt;/code&gt; を必要とします。 Spring Batchは、デフォルトで単一のデータ &lt;code&gt;DataSource&lt;/code&gt; 想定しています。アプリケーションのメインのデータ &lt;code&gt;DataSource&lt;/code&gt; 以外のデータ &lt;code&gt;DataSource&lt;/code&gt; 使用するには、データ &lt;code&gt;DataSource&lt;/code&gt; Beanを宣言し、 &lt;code&gt;@Bean&lt;/code&gt; メソッドに &lt;code&gt;@BatchDataSource&lt;/code&gt; アノテーションを付けます。そうして2つのデータソースが必要な場合は、もう1つを &lt;code&gt;@Primary&lt;/code&gt; としてマークすることを忘れないでください。より細かく制御するには、 &lt;code&gt;BatchConfigurer&lt;/code&gt; を実装します。詳細について&lt;a href=&quot;https://docs.spring.io/spring-batch/docs/4.3.0/api/org/springframework/batch/core/configuration/annotation/EnableBatchProcessing.html&quot;&gt;は、&lt;/a&gt; &lt;code&gt;@EnableBatchProcessing&lt;/code&gt; のJavadocを参照してください。</target>
        </trans-unit>
        <trans-unit id="71104b06885eec956863bbacfd1a1fe0cfdb5692" translate="yes" xml:space="preserve">
          <source>By default, data JPA tests are transactional and roll back at the end of each test. See the &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/testing.html#testcontext-tx-enabling-transactions&quot;&gt;relevant section&lt;/a&gt; in the Spring Framework Reference Documentation for more details. If that is not what you want, you can disable transaction management for a test or for the whole class as follows:</source>
          <target state="translated">デフォルトでは、データJPAテストはトランザクションであり、各テストの最後にロールバックされます。詳細については、SpringFrameworkリファレンスドキュメントの&lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/testing.html#testcontext-tx-enabling-transactions&quot;&gt;関連セクション&lt;/a&gt;を参照してください。それが望ましくない場合は、次のように、テストまたはクラス全体のトランザクション管理を無効にすることができます。</target>
        </trans-unit>
        <trans-unit id="97f4a619f28eebb07fc378362723e7bb05a7647e" translate="yes" xml:space="preserve">
          <source>By default, each time your application restarts, a report showing the condition evaluation delta is logged. The report shows the changes to your application&amp;rsquo;s auto-configuration as you make changes such as adding or removing beans and setting configuration properties.</source>
          <target state="translated">デフォルトでは、アプリケーションが再起動するたびに、状態評価デルタを示すレポートがログに記録されます。レポートには、Beanの追加や削除、構成プロパティの設定などの変更を行ったときの、アプリケーションの自動構成への変更が表示されます。</target>
        </trans-unit>
        <trans-unit id="4b631e02a18884b5d58b512685b4b7deda3fc5da" translate="yes" xml:space="preserve">
          <source>By default, if a Micrometer &lt;code&gt;meterRegistry&lt;/code&gt; bean is present, Spring Integration metrics will be managed by Micrometer. If you wish to use legacy Spring Integration metrics, add a &lt;code&gt;DefaultMetricsFactory&lt;/code&gt; bean to the application context.</source>
          <target state="translated">デフォルトでは、Micrometer &lt;code&gt;meterRegistry&lt;/code&gt; Beanが存在する場合、SpringIntegrationメトリックはMicrometerによって管理されます。従来の &lt;code&gt;DefaultMetricsFactory&lt;/code&gt; メトリックを使用する場合は、DefaultMetricsFactoryBeanをアプリケーションコンテキストに追加します。</target>
        </trans-unit>
        <trans-unit id="a3c3c676272ca1eb2a1da50bdc55b94d3d22185f" translate="yes" xml:space="preserve">
          <source>By default, if retries are disabled and the listener throws an exception, the delivery is retried indefinitely. You can modify this behavior in two ways: Set the &lt;code&gt;defaultRequeueRejected&lt;/code&gt; property to &lt;code&gt;false&lt;/code&gt; so that zero re-deliveries are attempted or throw an &lt;code&gt;AmqpRejectAndDontRequeueException&lt;/code&gt; to signal the message should be rejected. The latter is the mechanism used when retries are enabled and the maximum number of delivery attempts is reached.</source>
          <target state="translated">デフォルトでは、再試行が無効になっていて、リスナーが例外をスローした場合、配信は無期限に再試行されます。この動作は2つの方法で変更できます &lt;code&gt;defaultRequeueRejected&lt;/code&gt; プロパティを &lt;code&gt;false&lt;/code&gt; に設定して再配信がゼロになるようにするか、 &lt;code&gt;AmqpRejectAndDontRequeueException&lt;/code&gt; をスローしてメッセージを拒否するように通知します。後者は、再試行が有効になっていて、配信の最大試行回数に達したときに使用されるメカニズムです。</target>
        </trans-unit>
        <trans-unit id="3886fbab08cebedea34aebf5d5ae090d731ceef5" translate="yes" xml:space="preserve">
          <source>By default, if the context contains only a single Servlet, it is mapped to &lt;code&gt;/&lt;/code&gt;. In the case of multiple servlet beans, the bean name is used as a path prefix. Filters map to &lt;code&gt;/*&lt;/code&gt;.</source>
          <target state="translated">デフォルトでは、コンテキストにサーブレットが1つしかない場合は、 &lt;code&gt;/&lt;/code&gt; にマップされます。複数のサーブレットBeanの場合、Bean名がパスプレフィックスとして使用されます。フィルタは &lt;code&gt;/*&lt;/code&gt; にマップされます。</target>
        </trans-unit>
        <trans-unit id="8100dac891b7e0bf6796f8afebab77510115e157" translate="yes" xml:space="preserve">
          <source>By default, if you use the &amp;ldquo;Starters&amp;rdquo;, Logback is used for logging. Appropriate Logback routing is also included to ensure that dependent libraries that use Java Util Logging, Commons Logging, Log4J, or SLF4J all work correctly.</source>
          <target state="translated">デフォルトでは、「スターター」を使用すると、ログにログバックが使用されます。Java Util Logging、Commons Logging、Log4J、またはSLF4Jを使用する依存ライブラリがすべて正しく機能するように、適切なログバックルーティングも含まれています。</target>
        </trans-unit>
        <trans-unit id="32794dd34f8dbc5b227bf1eeb0a2b93da5b147e1" translate="yes" xml:space="preserve">
          <source>By default, it executes &lt;strong&gt;all&lt;/strong&gt;&lt;code&gt;Jobs&lt;/code&gt; in the application context on startup (see &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/JobLauncherApplicationRunner.java&quot;&gt;&lt;code&gt;JobLauncherApplicationRunner&lt;/code&gt;&lt;/a&gt; for details). You can narrow down to a specific job or jobs by specifying &lt;code&gt;spring.batch.job.names&lt;/code&gt; (which takes a comma-separated list of job name patterns).</source>
          <target state="translated">デフォルトでは、起動時にアプリケーションコンテキスト内の&lt;strong&gt;すべての&lt;/strong&gt; &lt;code&gt;Jobs&lt;/code&gt; を実行します（詳細については、&lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/JobLauncherApplicationRunner.java&quot;&gt; &lt;code&gt;JobLauncherApplicationRunner&lt;/code&gt; &lt;/a&gt;を参照してください）。 &lt;code&gt;spring.batch.job.names&lt;/code&gt; （ジョブ名パターンのコンマ区切りリストを使用）を指定することにより、特定の1つまたは複数のジョブに絞り込むことができます。</target>
        </trans-unit>
        <trans-unit id="8cf2aa32ac9f0b7c420b2aecea8bbaeec8296458" translate="yes" xml:space="preserve">
          <source>By default, jobs created by configuration will not overwrite already registered jobs that have been read from a persistent job store. To enable overwriting existing job definitions set the &lt;code&gt;spring.quartz.overwrite-existing-jobs&lt;/code&gt; property.</source>
          <target state="translated">デフォルトでは、構成によって作成されたジョブは、永続ジョブストアから読み取られた登録済みのジョブを上書きしません。既存のジョブ定義の上書きを有効にするには、 &lt;code&gt;spring.quartz.overwrite-existing-jobs&lt;/code&gt; プロパティを設定します。</target>
        </trans-unit>
        <trans-unit id="ffbccdcb163132d170503d304f2c4ababf17839a" translate="yes" xml:space="preserve">
          <source>By default, logs are redirected to &lt;code&gt;System.err&lt;/code&gt;. For more details, see &lt;a href=&quot;https://www.eclipse.org/jetty/documentation/9.4.34.v20201102/configuring-jetty-request-logs.html&quot;&gt;the Jetty documentation&lt;/a&gt;.</source>
          <target state="translated">デフォルトでは、ログは &lt;code&gt;System.err&lt;/code&gt; にリダイレクトされます。詳細については&lt;a href=&quot;https://www.eclipse.org/jetty/documentation/9.4.34.v20201102/configuring-jetty-request-logs.html&quot;&gt;、Jettyのドキュメントを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="aa8ea194456f07db16ad34a1ec570a37357f5893" translate="yes" xml:space="preserve">
          <source>By default, metadata about the running application as well as service connection information is exposed to the application as environment variables (for example: &lt;code&gt;$VCAP_SERVICES&lt;/code&gt;). This architecture decision is due to Cloud Foundry&amp;rsquo;s polyglot (any language and platform can be supported as a buildpack) nature. Process-scoped environment variables are language agnostic.</source>
          <target state="translated">デフォルトでは、実行中のアプリケーションに関するメタデータだけでなく、サービスの接続情報は、（：例えば、環境変数としてアプリケーションに公開された &lt;code&gt;$VCAP_SERVICES&lt;/code&gt; ）。このアーキテクチャの決定は、Cloud Foundryのポリグロット（任意の言語とプラットフォームをビルドパックとしてサポートできます）の性質によるものです。プロセススコープの環境変数は言語に依存しません。</target>
        </trans-unit>
        <trans-unit id="d81c216cf96b67dea7f99ce5803042cf2dac621a" translate="yes" xml:space="preserve">
          <source>By default, metrics are exported to &lt;a href=&quot;https://micrometer.io/docs/registry/atlas&quot;&gt;Atlas&lt;/a&gt; running on your local machine. The location of the &lt;a href=&quot;https://github.com/Netflix/atlas&quot;&gt;Atlas server&lt;/a&gt; to use can be provided using:</source>
          <target state="translated">デフォルトでは、メトリックはローカルマシンで実行されている&lt;a href=&quot;https://micrometer.io/docs/registry/atlas&quot;&gt;Atlasに&lt;/a&gt;エクスポートされます。使用する&lt;a href=&quot;https://github.com/Netflix/atlas&quot;&gt;Atlasサーバー&lt;/a&gt;の場所は、次を使用して提供できます。</target>
        </trans-unit>
        <trans-unit id="17808114fa0555271c13495a676e85316f482971" translate="yes" xml:space="preserve">
          <source>By default, metrics are exported to &lt;a href=&quot;https://micrometer.io/docs/registry/elastic&quot;&gt;Elastic&lt;/a&gt; running on your local machine. The location of the Elastic server to use can be provided using the following property:</source>
          <target state="translated">デフォルトでは、メトリックはローカルマシンで実行されている&lt;a href=&quot;https://micrometer.io/docs/registry/elastic&quot;&gt;Elasticに&lt;/a&gt;エクスポートされます。使用するElasticサーバーの場所は、次のプロパティを使用して指定できます。</target>
        </trans-unit>
        <trans-unit id="53535cb0db39572965ff8ff4c673bb8d43867d90" translate="yes" xml:space="preserve">
          <source>By default, metrics are exported to &lt;a href=&quot;https://micrometer.io/docs/registry/ganglia&quot;&gt;Ganglia&lt;/a&gt; running on your local machine. The &lt;a href=&quot;http://ganglia.sourceforge.net&quot;&gt;Ganglia server&lt;/a&gt; host and port to use can be provided using:</source>
          <target state="translated">デフォルトでは、メトリックはローカルマシンで実行されている&lt;a href=&quot;https://micrometer.io/docs/registry/ganglia&quot;&gt;Gangliaに&lt;/a&gt;エクスポートされます。使用する&lt;a href=&quot;http://ganglia.sourceforge.net&quot;&gt;Gangliaサーバーの&lt;/a&gt;ホストとポートは、次を使用して提供できます。</target>
        </trans-unit>
        <trans-unit id="c5931abc16032f78ce4c52d3f448c59412abb4f8" translate="yes" xml:space="preserve">
          <source>By default, metrics are exported to &lt;a href=&quot;https://micrometer.io/docs/registry/graphite&quot;&gt;Graphite&lt;/a&gt; running on your local machine. The &lt;a href=&quot;https://graphiteapp.org&quot;&gt;Graphite server&lt;/a&gt; host and port to use can be provided using:</source>
          <target state="translated">デフォルトでは、メトリックはローカルマシンで実行されている&lt;a href=&quot;https://micrometer.io/docs/registry/graphite&quot;&gt;Graphiteに&lt;/a&gt;エクスポートされます。使用する&lt;a href=&quot;https://graphiteapp.org&quot;&gt;Graphiteサーバーの&lt;/a&gt;ホストとポートは、次を使用して提供できます。</target>
        </trans-unit>
        <trans-unit id="efb4c5b65e2a2e2b4bbb3ce6238bf162d4bdad6e" translate="yes" xml:space="preserve">
          <source>By default, metrics are exported to &lt;a href=&quot;https://micrometer.io/docs/registry/influx&quot;&gt;Influx&lt;/a&gt; running on your local machine. The location of the &lt;a href=&quot;https://www.influxdata.com&quot;&gt;Influx server&lt;/a&gt; to use can be provided using:</source>
          <target state="translated">デフォルトでは、メトリックはローカルマシンで実行されている&lt;a href=&quot;https://micrometer.io/docs/registry/influx&quot;&gt;Influxに&lt;/a&gt;エクスポートされます。使用する&lt;a href=&quot;https://www.influxdata.com&quot;&gt;Influxサーバー&lt;/a&gt;の場所は、次を使用して指定できます。</target>
        </trans-unit>
        <trans-unit id="fe3048cfaf4bf5e7517b57415a5d864bf7b3c648" translate="yes" xml:space="preserve">
          <source>By default, metrics are exported to &lt;a href=&quot;https://micrometer.io/docs/registry/kairos&quot;&gt;KairosDB&lt;/a&gt; running on your local machine. The location of the &lt;a href=&quot;https://kairosdb.github.io/&quot;&gt;KairosDB server&lt;/a&gt; to use can be provided using:</source>
          <target state="translated">デフォルトでは、メトリックはローカルマシンで実行されている&lt;a href=&quot;https://micrometer.io/docs/registry/kairos&quot;&gt;KairosDBに&lt;/a&gt;エクスポートされます。使用する&lt;a href=&quot;https://kairosdb.github.io/&quot;&gt;KairosDBサーバー&lt;/a&gt;の場所は、次を使用して提供できます。</target>
        </trans-unit>
        <trans-unit id="b3946e048c4508140aaf98be7cc4abc9e1b7f00b" translate="yes" xml:space="preserve">
          <source>By default, metrics are generated with the name &lt;code&gt;http.server.requests&lt;/code&gt;. You can customize the name by setting the &lt;code&gt;management.metrics.web.server.request.metric-name&lt;/code&gt; property.</source>
          <target state="translated">デフォルトでは、メトリックは &lt;code&gt;http.server.requests&lt;/code&gt; という名前で生成されます。 &lt;code&gt;management.metrics.web.server.request.metric-name&lt;/code&gt; プロパティを設定することにより、名前をカスタマイズできます。</target>
        </trans-unit>
        <trans-unit id="44d2a78a7de9f7968d91aa5f95b2088b5fc3a33f" translate="yes" xml:space="preserve">
          <source>By default, metrics are generated with the name, &lt;code&gt;http.client.requests&lt;/code&gt;. The name can be customized by setting the &lt;code&gt;management.metrics.web.client.request.metric-name&lt;/code&gt; property.</source>
          <target state="translated">デフォルトでは、メトリックは &lt;code&gt;http.client.requests&lt;/code&gt; という名前で生成されます。名前は、 &lt;code&gt;management.metrics.web.client.request.metric-name&lt;/code&gt; プロパティを設定することでカスタマイズできます。</target>
        </trans-unit>
        <trans-unit id="30b2e262a904a3b624a9e63d8f7b8e0b28ca6675" translate="yes" xml:space="preserve">
          <source>By default, metrics are generated with the name, &lt;code&gt;http.server.requests&lt;/code&gt;. The name can be customized by setting the &lt;code&gt;management.metrics.web.server.request.metric-name&lt;/code&gt; property.</source>
          <target state="translated">デフォルトでは、メトリックは &lt;code&gt;http.server.requests&lt;/code&gt; という名前で生成されます。名前は、 &lt;code&gt;management.metrics.web.server.request.metric-name&lt;/code&gt; プロパティを設定することでカスタマイズできます。</target>
        </trans-unit>
        <trans-unit id="f59632da80bf4d55045fca39384c588f9c59e7d6" translate="yes" xml:space="preserve">
          <source>By default, metrics are published via REST calls but it is also possible to use the Java Agent API if you have it on the classpath:</source>
          <target state="translated">デフォルトでは、メトリクスは REST 呼び出しを介して公開されますが、クラスパス上に Java Agent API がある場合は、Java Agent API を使用することも可能です。</target>
        </trans-unit>
        <trans-unit id="4ab15e5b1d54cacdd5d1a168f3a982fce2401e28" translate="yes" xml:space="preserve">
          <source>By default, metrics generated by an instrumented client are tagged with the following information:</source>
          <target state="translated">デフォルトでは、インストルメント化されたクライアントによって生成されたメトリクスには、以下の情報がタグ付けされます。</target>
        </trans-unit>
        <trans-unit id="b90beae1ba9618c44cbba3f37de241accc8d5f6d" translate="yes" xml:space="preserve">
          <source>By default, properties from different sources are added to the Spring &lt;code&gt;Environment&lt;/code&gt; in a defined order (see &amp;ldquo;&lt;a href=&quot;spring-boot-features#boot-features-external-config&quot;&gt;spring-boot-features.html&lt;/a&gt;&amp;rdquo; in the &amp;lsquo;Spring Boot features&amp;rsquo; section for the exact order).</source>
          <target state="translated">デフォルトでは、さまざまなソースからのプロパティが定義された順序でSpring &lt;code&gt;Environment&lt;/code&gt; に追加されます（正確な順序については、「Spring Boot機能」セクションの「&lt;a href=&quot;spring-boot-features#boot-features-external-config&quot;&gt;spring-boot-features.html&lt;/a&gt;」を参照してください）。</target>
        </trans-unit>
        <trans-unit id="424ef4472a5ca46f3e51efd8050a5e7d323a1051" translate="yes" xml:space="preserve">
          <source>By default, resources are mapped on &lt;code&gt;/**&lt;/code&gt;, but you can tune that by setting the &lt;code&gt;spring.webflux.static-path-pattern&lt;/code&gt; property. For instance, relocating all resources to &lt;code&gt;/resources/**&lt;/code&gt; can be achieved as follows:</source>
          <target state="translated">デフォルトでは、リソースは &lt;code&gt;/**&lt;/code&gt; にマップされますが、 &lt;code&gt;spring.webflux.static-path-pattern&lt;/code&gt; プロパティを設定することで調整できます。たとえば、すべてのリソースを &lt;code&gt;/resources/**&lt;/code&gt; に再配置するには次のようにします。</target>
        </trans-unit>
        <trans-unit id="0ef526aef19cb17faf41c991791c5a5369b8b385" translate="yes" xml:space="preserve">
          <source>By default, resources are mapped on &lt;code&gt;/**&lt;/code&gt;, but you can tune that with the &lt;code&gt;spring.mvc.static-path-pattern&lt;/code&gt; property. For instance, relocating all resources to &lt;code&gt;/resources/**&lt;/code&gt; can be achieved as follows:</source>
          <target state="translated">デフォルトでは、リソースは &lt;code&gt;/**&lt;/code&gt; にマップされますが、 &lt;code&gt;spring.mvc.static-path-pattern&lt;/code&gt; プロパティを使用して調整できます。たとえば、すべてのリソースを &lt;code&gt;/resources/**&lt;/code&gt; に再配置するには次のようにします。</target>
        </trans-unit>
        <trans-unit id="cda828c94262b10d5fc4f2447f6ba39c04262674" translate="yes" xml:space="preserve">
          <source>By default, responses are compressed only if their content type is one of the following:</source>
          <target state="translated">デフォルトでは、応答のコンテンツタイプが以下のいずれかである場合にのみ、応答が圧縮されます。</target>
        </trans-unit>
        <trans-unit id="77a799ddfe0149eac37c85cf9b7b619f499fe923" translate="yes" xml:space="preserve">
          <source>By default, responses must be at least 2048 bytes in length for compression to be performed. You can configure this behavior by setting the &lt;code&gt;server.compression.min-response-size&lt;/code&gt; property.</source>
          <target state="translated">デフォルトでは、圧縮を実行するには、応答の長さが2048バイト以上である必要があります。この動作は、 &lt;code&gt;server.compression.min-response-size&lt;/code&gt; プロパティを設定することで構成できます。</target>
        </trans-unit>
        <trans-unit id="613e86710c2b9fc9128d99abde5e225de9ba9c79" translate="yes" xml:space="preserve">
          <source>By default, the AppOptics registry pushes metrics to &lt;code&gt;&lt;a href=&quot;https://api.appoptics.com/v1/measurements&quot;&gt;api.appoptics.com/v1/measurements&lt;/a&gt;&lt;/code&gt; periodically. To export metrics to SaaS &lt;a href=&quot;https://micrometer.io/docs/registry/appOptics&quot;&gt;AppOptics&lt;/a&gt;, your API token must be provided:</source>
          <target state="translated">デフォルトでは、AppOpticsレジストリはメトリックを &lt;code&gt;&lt;a href=&quot;https://api.appoptics.com/v1/measurements&quot;&gt;api.appoptics.com/v1/measurements&lt;/a&gt;&lt;/code&gt; に定期的にプッシュします。メトリックを&lt;a href=&quot;https://micrometer.io/docs/registry/appOptics&quot;&gt;SaaSAppOpticsに&lt;/a&gt;エクスポートするには、APIトークンを提供する必要があります。</target>
        </trans-unit>
        <trans-unit id="0ac523fb22adbfe5e02d10f28658eddd3508cf69" translate="yes" xml:space="preserve">
          <source>By default, the CLI uses the dependency management declared in &lt;code&gt;spring-boot-dependencies&lt;/code&gt; when resolving &lt;code&gt;@Grab&lt;/code&gt; dependencies. Additional dependency management, which overrides the default dependency management, can be configured by using the &lt;code&gt;@DependencyManagementBom&lt;/code&gt; annotation. The annotation&amp;rsquo;s value should specify the coordinates (&lt;code&gt;groupId:artifactId:version&lt;/code&gt;) of one or more Maven BOMs.</source>
          <target state="translated">デフォルトでは、CLIは &lt;code&gt;@Grab&lt;/code&gt; 依存 &lt;code&gt;spring-boot-dependencies&lt;/code&gt; を解決するときに、spring-boot-dependenciesで宣言された依存関係管理を使用します。デフォルトの依存関係管理をオーバーライドする追加の依存関係管理は、 &lt;code&gt;@DependencyManagementBom&lt;/code&gt; アノテーションを使用して構成できます。アノテーションの値は、1つ以上のMaven BOMの座標（ &lt;code&gt;groupId:artifactId:version&lt;/code&gt; ）を指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="2f3c4c5e3b571578f96aa8ef50c78f6843e77e99" translate="yes" xml:space="preserve">
          <source>By default, the DDL execution (or validation) is deferred until the &lt;code&gt;ApplicationContext&lt;/code&gt; has started. There is also a &lt;code&gt;spring.jpa.generate-ddl&lt;/code&gt; flag, but it is not used if Hibernate auto-configuration is active, because the &lt;code&gt;ddl-auto&lt;/code&gt; settings are more fine-grained.</source>
          <target state="translated">デフォルトでは、DDLの実行（または検証）は、 &lt;code&gt;ApplicationContext&lt;/code&gt; が開始されるまで延期されます。 &lt;code&gt;spring.jpa.generate-ddl&lt;/code&gt; フラグもありますが、 &lt;code&gt;ddl-auto&lt;/code&gt; 設定がよりきめ細かいため、Hibernate自動構成がアクティブな場合は使用されません。</target>
        </trans-unit>
        <trans-unit id="9c813b81bfde51388a2c99eb393ca9a81c77ef5a" translate="yes" xml:space="preserve">
          <source>By default, the Humio registry pushes metrics to &lt;a href=&quot;https://cloud.humio.com&quot;&gt;cloud.humio.com&lt;/a&gt; periodically. To export metrics to SaaS &lt;a href=&quot;https://micrometer.io/docs/registry/humio&quot;&gt;Humio&lt;/a&gt;, your API token must be provided:</source>
          <target state="translated">デフォルトでは、&lt;a href=&quot;https://cloud.humio.com&quot;&gt;Humio&lt;/a&gt;レジストリはメトリックをcloud.humio.comに定期的にプッシュします。メトリックを&lt;a href=&quot;https://micrometer.io/docs/registry/humio&quot;&gt;SaaSHumioに&lt;/a&gt;エクスポートするには、APIトークンを提供する必要があります。</target>
        </trans-unit>
        <trans-unit id="276d27aaefc21edb5aac948db91279768fdbd965" translate="yes" xml:space="preserve">
          <source>By default, the Spring Boot starter (&lt;code&gt;spring-boot-starter-data-redis&lt;/code&gt;) uses &lt;a href=&quot;https://github.com/lettuce-io/lettuce-core/&quot;&gt;Lettuce&lt;/a&gt;. You need to exclude that dependency and include the &lt;a href=&quot;https://github.com/xetorthio/jedis/&quot;&gt;Jedis&lt;/a&gt; one instead. Spring Boot manages both of these dependencies so you can switch to Jedis without specifying a version.</source>
          <target state="translated">デフォルトでは、Spring Bootスターター（ &lt;code&gt;spring-boot-starter-data-redis&lt;/code&gt; ）は&lt;a href=&quot;https://github.com/lettuce-io/lettuce-core/&quot;&gt;Lettuceを&lt;/a&gt;使用します。その依存関係を除外し、代わりに&lt;a href=&quot;https://github.com/xetorthio/jedis/&quot;&gt;Jedis&lt;/a&gt;を含める必要があります。Spring Bootはこれらの依存関係の両方を管理するため、バージョンを指定せずにJedisに切り替えることができます。</target>
        </trans-unit>
        <trans-unit id="e850a49985666baede5fd93e302202f7d00550ef" translate="yes" xml:space="preserve">
          <source>By default, the console is available at &lt;code&gt;/h2-console&lt;/code&gt;. You can customize the console&amp;rsquo;s path by using the &lt;code&gt;spring.h2.console.path&lt;/code&gt; property.</source>
          <target state="translated">デフォルトでは、コンソールは &lt;code&gt;/h2-console&lt;/code&gt; にあります。 &lt;code&gt;spring.h2.console.path&lt;/code&gt; プロパティを使用して、コンソールのパスをカスタマイズできます。</target>
        </trans-unit>
        <trans-unit id="0ca82f879eba3bc20af1cbd488c290566720c58a" translate="yes" xml:space="preserve">
          <source>By default, the database is detected and initialized by using the standard scripts provided with the Quartz library. These scripts drop existing tables, deleting all triggers on every restart. It is also possible to provide a custom script by setting the &lt;code&gt;spring.quartz.jdbc.schema&lt;/code&gt; property.</source>
          <target state="translated">デフォルトでは、データベースは、Quartzライブラリで提供される標準スクリプトを使用して検出および初期化されます。これらのスクリプトは既存のテーブルを削除し、再起動するたびにすべてのトリガーを削除します。 &lt;code&gt;spring.quartz.jdbc.schema&lt;/code&gt; プロパティを設定して、カスタムスクリプトを提供することもできます。</target>
        </trans-unit>
        <trans-unit id="755dc142a9e09913a28fafa4a89a50cd08703792" translate="yes" xml:space="preserve">
          <source>By default, the default factory is transactional. If you run in an infrastructure where a &lt;code&gt;JtaTransactionManager&lt;/code&gt; is present, it is associated to the listener container by default. If not, the &lt;code&gt;sessionTransacted&lt;/code&gt; flag is enabled. In that latter scenario, you can associate your local data store transaction to the processing of an incoming message by adding &lt;code&gt;@Transactional&lt;/code&gt; on your listener method (or a delegate thereof). This ensures that the incoming message is acknowledged, once the local transaction has completed. This also includes sending response messages that have been performed on the same JMS session.</source>
          <target state="translated">デフォルトでは、デフォルトのファクトリはトランザクションです。 &lt;code&gt;JtaTransactionManager&lt;/code&gt; が存在するインフラストラクチャで実行する場合、デフォルトでリスナーコンテナに関連付けられます。そうでない場合、 &lt;code&gt;sessionTransacted&lt;/code&gt; フラグが有効になります。後者のシナリオでは、リスナーメソッド（またはそのデリゲート）に &lt;code&gt;@Transactional&lt;/code&gt; を追加することで、ローカルデータストアトランザクションを着信メッセージの処理に関連付けることができます。これにより、ローカルトランザクションが完了すると、着信メッセージが確実に確認されます。これには、同じJMSセッションで実行された応答メッセージの送信も含まれます。</target>
        </trans-unit>
        <trans-unit id="6b8243d1f965b150f880f5fff4bc938e05b617af" translate="yes" xml:space="preserve">
          <source>By default, the embedded Tomcat used by Spring Boot does not support &quot;Version 0&quot; of the Cookie format, so you may see the following error:</source>
          <target state="translated">デフォルトでは、Spring Bootで使用している埋め込み型TomcatはCookie形式の「バージョン0」をサポートしていないため、以下のようなエラーが表示されることがあります。</target>
        </trans-unit>
        <trans-unit id="eb3244b5debcea832bc739fe7abbba0cd0c15168" translate="yes" xml:space="preserve">
          <source>By default, the final system health is derived by a &lt;code&gt;StatusAggregator&lt;/code&gt; which sorts the statuses from each &lt;code&gt;HealthIndicator&lt;/code&gt; based on an ordered list of statuses. The first status in the sorted list is used as the overall health status. If no &lt;code&gt;HealthIndicator&lt;/code&gt; returns a status that is known to the &lt;code&gt;StatusAggregator&lt;/code&gt;, an &lt;code&gt;UNKNOWN&lt;/code&gt; status is used.</source>
          <target state="translated">デフォルトでは、最終的なシステムヘルスは、ステータスの順序付きリストに基づいて各 &lt;code&gt;HealthIndicator&lt;/code&gt; からステータスをソートする &lt;code&gt;StatusAggregator&lt;/code&gt; によって取得されます。ソートされたリストの最初のステータスは、全体的なヘルスステータスとして使用されます。いかなる場合 &lt;code&gt;HealthIndicator&lt;/code&gt; のに知られているステータスを返していない &lt;code&gt;StatusAggregator&lt;/code&gt; を、 &lt;code&gt;UNKNOWN&lt;/code&gt; のステータスが使用されます。</target>
        </trans-unit>
        <trans-unit id="d7866c030a3a444314a2409a6b7e51ce8e152a8d" translate="yes" xml:space="preserve">
          <source>By default, the master change log is read from &lt;code&gt;db/changelog/db.changelog-master.yaml&lt;/code&gt;, but you can change the location by setting &lt;code&gt;spring.liquibase.change-log&lt;/code&gt;. In addition to YAML, Liquibase also supports JSON, XML, and SQL change log formats.</source>
          <target state="translated">デフォルトでは、マスター変更ログは &lt;code&gt;db/changelog/db.changelog-master.yaml&lt;/code&gt; から読み取られますが、 &lt;code&gt;spring.liquibase.change-log&lt;/code&gt; を設定することで場所を変更できます。YAMLに加えて、LiquibaseはJSON、XML、およびSQLの変更ログ形式もサポートします。</target>
        </trans-unit>
        <trans-unit id="afcf3a99e5c88204170963824b4a15ad4f9ed468" translate="yes" xml:space="preserve">
          <source>By default, the security verification for &lt;code&gt;/cloudfoundryapplication&lt;/code&gt; endpoints makes SSL calls to various Cloud Foundry services. If your Cloud Foundry UAA or Cloud Controller services use self-signed certificates, you need to set the following property:</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;/cloudfoundryapplication&lt;/code&gt; エンドポイントのセキュリティ検証は、さまざまなCloudFoundryサービスへのSSL呼び出しを行います。Cloud FoundryUAAまたはCloudControllerサービスが自己署名証明書を使用する場合は、次のプロパティを設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="1dc3d95e0af64bbeec0a50b296cca8d3995fab7e" translate="yes" xml:space="preserve">
          <source>By default, the server starts on a random port and triggers the regular LDAP support. There is no need to specify a &lt;code&gt;spring.ldap.urls&lt;/code&gt; property.</source>
          <target state="translated">デフォルトでは、サーバーはランダムなポートで起動し、通常のLDAPサポートをトリガーします。 &lt;code&gt;spring.ldap.urls&lt;/code&gt; プロパティを指定する必要はありません。</target>
        </trans-unit>
        <trans-unit id="7b61b3e1b4f2a6ed790b02fd492c40e70eabc823" translate="yes" xml:space="preserve">
          <source>By default, the streams managed by the &lt;code&gt;StreamBuilder&lt;/code&gt; object it creates are started automatically. You can customize this behaviour using the &lt;code&gt;spring.kafka.streams.auto-startup&lt;/code&gt; property.</source>
          <target state="translated">デフォルトでは、作成する &lt;code&gt;StreamBuilder&lt;/code&gt; オブジェクトによって管理されるストリームは自動的に開始されます。この動作は、 &lt;code&gt;spring.kafka.streams.auto-startup&lt;/code&gt; プロパティを使用してカスタマイズできます。</target>
        </trans-unit>
        <trans-unit id="2177350e9dc31a95a137bac7595539528ed5a32e" translate="yes" xml:space="preserve">
          <source>By default, these writers are not activated, but you can enable:</source>
          <target state="translated">デフォルトでは、これらのライターは有効になっていませんが、有効にすることができます。</target>
        </trans-unit>
        <trans-unit id="2a7357338d2b8285399a6f976d2cc23c65f0b546" translate="yes" xml:space="preserve">
          <source>By default, those resources will be also shared with the Reactor Netty and Jetty clients for optimal performances, given:</source>
          <target state="translated">デフォルトでは、これらのリソースは、最適なパフォーマンスを得るために、Reactor Netty と Jetty クライアントでも共有されます。</target>
        </trans-unit>
        <trans-unit id="8aa8bba048edf2d24e2a417af704dc26a7699490" translate="yes" xml:space="preserve">
          <source>By default, when a specified config data location does not exist, Spring Boot will throw a &lt;code&gt;ConfigDataLocationNotFoundException&lt;/code&gt; and your application will not start.</source>
          <target state="translated">デフォルトでは、指定された構成データの場所が存在しない場合、Spring Bootは &lt;code&gt;ConfigDataLocationNotFoundException&lt;/code&gt; をスローし、アプリケーションは起動しません。</target>
        </trans-unit>
        <trans-unit id="6a3488e039dd1f83db97670cbe88aa6bab13a8d6" translate="yes" xml:space="preserve">
          <source>CGLib proxies, such as those created for scoped beans, declare the proxied methods as &lt;code&gt;final&lt;/code&gt;. This stops Mockito from functioning correctly as it cannot mock or spy on &lt;code&gt;final&lt;/code&gt; methods in its default configuration. If you want to mock or spy on such a bean, configure Mockito to use its inline mock maker by adding &lt;code&gt;org.mockito:mockito-inline&lt;/code&gt; to your application&amp;rsquo;s test dependencies. This allows Mockito to mock and spy on &lt;code&gt;final&lt;/code&gt; methods.</source>
          <target state="translated">スコープ付きBean用に作成されたものなどのCGLibプロキシは、プロキシされたメソッドを &lt;code&gt;final&lt;/code&gt; として宣言します。これにより、Mockitoはデフォルト構成で &lt;code&gt;final&lt;/code&gt; メソッドをモックまたはスパイできないため、正しく機能しなくなります。このようなBeanをモックまたはスパイする場合は、アプリケーションのテスト依存関係に &lt;code&gt;org.mockito:mockito-inline&lt;/code&gt; を追加して、インラインモックメーカーを使用するようにMockitoを構成します。これにより、Mockitoは &lt;code&gt;final&lt;/code&gt; メソッドをモックしてスパイすることができます。</target>
        </trans-unit>
        <trans-unit id="c81bbf934b1774254e5f73e715a94357444a6dcd" translate="yes" xml:space="preserve">
          <source>CORS support is disabled by default and is only enabled once the &lt;code&gt;management.endpoints.web.cors.allowed-origins&lt;/code&gt; property has been set. The following configuration permits &lt;code&gt;GET&lt;/code&gt; and &lt;code&gt;POST&lt;/code&gt; calls from the &lt;code&gt;example.com&lt;/code&gt; domain:</source>
          <target state="translated">CORSサポートはデフォルトで無効になっており、 &lt;code&gt;management.endpoints.web.cors.allowed-origins&lt;/code&gt; プロパティが設定された場合にのみ有効になります。次の構成では、 &lt;code&gt;example.com&lt;/code&gt; ドメインからの &lt;code&gt;GET&lt;/code&gt; および &lt;code&gt;POST&lt;/code&gt; 呼び出しが許可されます。</target>
        </trans-unit>
        <trans-unit id="aaaee74feef5d1586dd7e24caa440e2fa9b37139" translate="yes" xml:space="preserve">
          <source>CPU metrics</source>
          <target state="translated">CPUメトリクス</target>
        </trans-unit>
        <trans-unit id="3e071861573efa2404fb54383675a866ae130f83" translate="yes" xml:space="preserve">
          <source>Cache options are usually configured by settings in your &lt;code&gt;application.properties&lt;/code&gt; file. For example, Thymeleaf offers the &lt;code&gt;spring.thymeleaf.cache&lt;/code&gt; property. Rather than needing to set these properties manually, the &lt;code&gt;spring-boot-devtools&lt;/code&gt; module automatically applies sensible development-time configuration.</source>
          <target state="translated">キャッシュオプションは通常、 &lt;code&gt;application.properties&lt;/code&gt; ファイルの設定によって構成されます。たとえば、Thymeleafは &lt;code&gt;spring.thymeleaf.cache&lt;/code&gt; プロパティを提供します。これらのプロパティを手動で設定する必要はなく、 &lt;code&gt;spring-boot-devtools&lt;/code&gt; モジュールは適切な開発時の構成を自動的に適用します。</target>
        </trans-unit>
        <trans-unit id="385aea4ea65f973fbc946baccbba2409dbaea5f2" translate="yes" xml:space="preserve">
          <source>Cache period for the resources served by the resource handler. If a duration suffix is not specified, seconds will be used. Can be overridden by the 'spring.web.resources.cache.cachecontrol' properties.</source>
          <target state="translated">リソースハンドラが提供するリソースのキャッシュ期間。durationサフィックスが指定されていない場合は秒が使われます。spring.web.resources.cache.cachecontrol' プロパティでオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="fb49c6559bc51e6424b46cf53f19c9a24fa36fc5" translate="yes" xml:space="preserve">
          <source>Cache type. By default, auto-detected according to the environment.</source>
          <target state="translated">キャッシュの種類。デフォルトでは、環境に応じて自動検出されます。</target>
        </trans-unit>
        <trans-unit id="baf41f651e0cc569c55bae1b15f9750c1cddeb48" translate="yes" xml:space="preserve">
          <source>Caches can be created on startup by setting the &lt;code&gt;spring.cache.cache-names&lt;/code&gt; property. If a custom &lt;code&gt;ConfigurationBuilder&lt;/code&gt; bean is defined, it is used to customize the caches.</source>
          <target state="translated">起動時に &lt;code&gt;spring.cache.cache-names&lt;/code&gt; プロパティを設定することでキャッシュを作成できます。カスタム &lt;code&gt;ConfigurationBuilder&lt;/code&gt; Beanが定義されている場合、それはキャッシュをカスタマイズするために使用されます。</target>
        </trans-unit>
        <trans-unit id="d697acd6725f6650ecdd65576dcc87a6e737e960" translate="yes" xml:space="preserve">
          <source>Caches can be created on startup by setting the &lt;code&gt;spring.cache.cache-names&lt;/code&gt; property. If a custom &lt;code&gt;javax.cache.configuration.Configuration&lt;/code&gt; bean is defined, it is used to customize them.</source>
          <target state="translated">起動時に &lt;code&gt;spring.cache.cache-names&lt;/code&gt; プロパティを設定することでキャッシュを作成できます。カスタム &lt;code&gt;javax.cache.configuration.Configuration&lt;/code&gt; Beanが定義されている場合、それを使用してそれらをカスタマイズします。</target>
        </trans-unit>
        <trans-unit id="27568fa85ded4d249c45ddbb15be2b7cdfa9f70d" translate="yes" xml:space="preserve">
          <source>Caching abstraction.</source>
          <target state="translated">キャッシングの抽象化。</target>
        </trans-unit>
        <trans-unit id="22859fa3d4076d7a55f9ca6b2c7659d499f52440" translate="yes" xml:space="preserve">
          <source>Caffeine</source>
          <target state="translated">Caffeine</target>
        </trans-unit>
        <trans-unit id="0a4da02492bc2728078047a577c1c1bec582d46f" translate="yes" xml:space="preserve">
          <source>Camel case, kebab case, or underscore notation</source>
          <target state="translated">ラクダのケース、ケバブのケース、またはアンダースコア表記</target>
        </trans-unit>
        <trans-unit id="a9fcfe4de5332ce5662c25c5d7b43a84844238f8" translate="yes" xml:space="preserve">
          <source>Can be used to short-circuit the &lt;code&gt;main&lt;/code&gt; class search</source>
          <target state="translated">&lt;code&gt;main&lt;/code&gt; クラスの検索を短絡するために使用できます</target>
        </trans-unit>
        <trans-unit id="75ee0fb890728d6a8e7b0a788754c25afcbf502e" translate="yes" xml:space="preserve">
          <source>Care should be taken to ensure that your operating system is configured so that it will not delete the jars that have been unpacked to the temporary directory while the application is still running.</source>
          <target state="translated">アプリケーションの実行中に一時ディレクトリに解凍されたjarが削除されないように、オペレーティング・システムが設定されていることを確認するように注意する必要があります。</target>
        </trans-unit>
        <trans-unit id="533a38eeeef68b2a6dff0543d2d23fed7b8f462e" translate="yes" xml:space="preserve">
          <source>Cassandra</source>
          <target state="translated">Cassandra</target>
        </trans-unit>
        <trans-unit id="972004d9f7435cff4aa0b1f691eae8f7ee94576d" translate="yes" xml:space="preserve">
          <source>Certain resources do not necessarily need to trigger a restart when they are changed. For example, Thymeleaf templates can be edited in-place. By default, changing resources in &lt;code&gt;/META-INF/maven&lt;/code&gt;, &lt;code&gt;/META-INF/resources&lt;/code&gt;, &lt;code&gt;/resources&lt;/code&gt;, &lt;code&gt;/static&lt;/code&gt;, &lt;code&gt;/public&lt;/code&gt;, or &lt;code&gt;/templates&lt;/code&gt; does not trigger a restart but does trigger a &lt;a href=&quot;#using-boot-devtools-livereload&quot;&gt;live reload&lt;/a&gt;. If you want to customize these exclusions, you can use the &lt;code&gt;spring.devtools.restart.exclude&lt;/code&gt; property. For example, to exclude only &lt;code&gt;/static&lt;/code&gt; and &lt;code&gt;/public&lt;/code&gt; you would set the following property:</source>
          <target state="translated">特定のリソースは、変更されたときに必ずしも再起動をトリガーする必要はありません。たとえば、Thymeleafテンプレートはインプレースで編集できます。デフォルトでは、 &lt;code&gt;/META-INF/maven&lt;/code&gt; 、 &lt;code&gt;/META-INF/resources&lt;/code&gt; 、 &lt;code&gt;/resources&lt;/code&gt; 、 &lt;code&gt;/static&lt;/code&gt; 、 &lt;code&gt;/public&lt;/code&gt; 、または &lt;code&gt;/templates&lt;/code&gt; のリソースを変更しても、再起動はトリガーされませんが、&lt;a href=&quot;#using-boot-devtools-livereload&quot;&gt;ライブリロード&lt;/a&gt;はトリガーされます。これらの除外をカスタマイズする場合は、 &lt;code&gt;spring.devtools.restart.exclude&lt;/code&gt; プロパティを使用できます。たとえば、 &lt;code&gt;/static&lt;/code&gt; と &lt;code&gt;/public&lt;/code&gt; のみを除外するには、次のプロパティを設定します。</target>
        </trans-unit>
        <trans-unit id="a32a10c512a9b90c4c151a26cbfa7ca44b5f01d5" translate="yes" xml:space="preserve">
          <source>Change log configuration path.</source>
          <target state="translated">ログの設定パスを変更します。</target>
        </trans-unit>
        <trans-unit id="0e3bffab48ee8cf222b228b1a2901c9263aff558" translate="yes" xml:space="preserve">
          <source>Change log parameters.</source>
          <target state="translated">ログパラメータを変更します。</target>
        </trans-unit>
        <trans-unit id="ca8ebc507aecbcabcd583f3008b4b9a860180449" translate="yes" xml:space="preserve">
          <source>Character encoding to use to decode the URI.</source>
          <target state="translated">URIをデコードするために使用する文字エンコーディング。</target>
        </trans-unit>
        <trans-unit id="65e1109f5eef67a88e81d53b45625626156dd462" translate="yes" xml:space="preserve">
          <source>Character set used by the log file. Default to the system default character set.</source>
          <target state="translated">ログファイルで使用される文字セット。デフォルトはシステムのデフォルトの文字セットです。</target>
        </trans-unit>
        <trans-unit id="72e750a5d5f3f788fbeb2a8f92efa083692581c7" translate="yes" xml:space="preserve">
          <source>Charset to use for console output.</source>
          <target state="translated">コンソール出力に使用する文字セット。</target>
        </trans-unit>
        <trans-unit id="96c0ba46632190498fbfb0f0425d41c95f53878d" translate="yes" xml:space="preserve">
          <source>Charset to use for file output.</source>
          <target state="translated">ファイル出力に使用する文字セット。</target>
        </trans-unit>
        <trans-unit id="9eab9dc6a5b4b9f4e8ff500f5bc14e4bed8bfdf6" translate="yes" xml:space="preserve">
          <source>Charset used to decode URLs.</source>
          <target state="translated">URL のデコードに使用される Charset。</target>
        </trans-unit>
        <trans-unit id="f5eb086078f001408fba7741b865a1ac619ea90d" translate="yes" xml:space="preserve">
          <source>Check out the &lt;a href=&quot;deployment#cloud-deployment-kubernetes-container-lifecycle&quot;&gt;Kubernetes container lifecycle section&lt;/a&gt; for more information about Kubernetes deployment.</source>
          <target state="translated">Kubernetesのデプロイの詳細については、&lt;a href=&quot;deployment#cloud-deployment-kubernetes-container-lifecycle&quot;&gt;Kubernetesコンテナのライフサイクルのセクション&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="603a24eb404c8452a342eb9bcbbeb045de036afa" translate="yes" xml:space="preserve">
          <source>Check out the &lt;a href=&quot;https://www.cloudfoundry.org/&quot;&gt;Cloud Foundry&lt;/a&gt;, &lt;a href=&quot;https://www.heroku.com/&quot;&gt;Heroku&lt;/a&gt;, &lt;a href=&quot;https://www.openshift.com&quot;&gt;OpenShift&lt;/a&gt;, and &lt;a href=&quot;https://boxfuse.com&quot;&gt;Boxfuse&lt;/a&gt; web sites for more information about the kinds of features that a PaaS can offer. These are just four of the most popular Java PaaS providers. Since Spring Boot is so amenable to cloud-based deployment, you can freely consider other providers as well.</source>
          <target state="translated">PaaSが提供できる機能の種類の詳細については、&lt;a href=&quot;https://www.cloudfoundry.org/&quot;&gt;Cloud Foundry&lt;/a&gt;、&lt;a href=&quot;https://www.heroku.com/&quot;&gt;Heroku&lt;/a&gt;、&lt;a href=&quot;https://www.openshift.com&quot;&gt;OpenShift&lt;/a&gt;、および&lt;a href=&quot;https://boxfuse.com&quot;&gt;Boxfuseの&lt;/a&gt;Webサイトを確認してください。これらは、最も人気のあるJavaPaaSプロバイダーの4つにすぎません。Spring Bootはクラウドベースのデプロイメントに非常に適しているため、他のプロバイダーも自由に検討できます。</target>
        </trans-unit>
        <trans-unit id="5d739a4bda54fd00bc40971f9ad7c5c62e119e34" translate="yes" xml:space="preserve">
          <source>Check the &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/integration.html#cache&quot;&gt;relevant section&lt;/a&gt; of the Spring Framework reference for more details.</source>
          <target state="translated">詳細については、SpringFrameworkリファレンスの&lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/integration.html#cache&quot;&gt;関連セクション&lt;/a&gt;を確認してください。</target>
        </trans-unit>
        <trans-unit id="07549036e64c17a3aaa1a8c74091de62d62c9127" translate="yes" xml:space="preserve">
          <source>Check the &lt;code&gt;spring.couchbase.env.*&lt;/code&gt; properties for more details. To take more control, one or more &lt;code&gt;ClusterEnvironmentBuilderCustomizer&lt;/code&gt; beans can be used.</source>
          <target state="translated">詳細については、 &lt;code&gt;spring.couchbase.env.*&lt;/code&gt; プロパティを確認してください。より詳細に制御するために、1つ以上の &lt;code&gt;ClusterEnvironmentBuilderCustomizer&lt;/code&gt; Beanを使用できます。</target>
        </trans-unit>
        <trans-unit id="2fd4ad1d109c048aaaab4ce1ac3c0bec4daeafc7" translate="yes" xml:space="preserve">
          <source>Checks for low disk space.</source>
          <target state="translated">ディスク容量が少ないかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="7a2385529edd5500b433bb3eea19712e0e9d20c0" translate="yes" xml:space="preserve">
          <source>Checks that a Cassandra database is up.</source>
          <target state="translated">カサンドラ・データベースがアップしていることを確認します。</target>
        </trans-unit>
        <trans-unit id="c80e769ca40f670ad3292ee88a98940c1b33b422" translate="yes" xml:space="preserve">
          <source>Checks that a Couchbase cluster is up.</source>
          <target state="translated">Couchbaseクラスタがアップしていることを確認します。</target>
        </trans-unit>
        <trans-unit id="96aee82a494ab604a7ef9ee68257393f852f6e5d" translate="yes" xml:space="preserve">
          <source>Checks that a Hazelcast server is up.</source>
          <target state="translated">ヘイゼルキャストサーバーが稼働しているかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="d04567bed2354b88d78e857944d04a30e2d484aa" translate="yes" xml:space="preserve">
          <source>Checks that a JMS broker is up.</source>
          <target state="translated">JMS ブローカーが起動しているかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="dcd958012d31ecc04a5a6d2cf01c2c5cde675606" translate="yes" xml:space="preserve">
          <source>Checks that a Mongo database is up.</source>
          <target state="translated">Mongoデータベースがアップされているかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="032f74372a2dfafd1b8462a3b071f26df8ab3f00" translate="yes" xml:space="preserve">
          <source>Checks that a Neo4j database is up.</source>
          <target state="translated">Neo4j データベースがアップしているかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="e392d35b12287d692f49bddd68d8b76396d5d9fd" translate="yes" xml:space="preserve">
          <source>Checks that a Rabbit server is up.</source>
          <target state="translated">うさぎサーバーが立ち上がっているかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="8fb26360159503c3c7f3f3f0de029e2815935c46" translate="yes" xml:space="preserve">
          <source>Checks that a Redis server is up.</source>
          <target state="translated">Redisサーバが起動しているかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="0119935d8f164213e5cc42bebdaf9a5d75487725" translate="yes" xml:space="preserve">
          <source>Checks that a Solr server is up.</source>
          <target state="translated">Solrサーバが起動しているかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="af619c571706edb2dc046b05eb164c98d57c0984" translate="yes" xml:space="preserve">
          <source>Checks that a connection to &lt;code&gt;DataSource&lt;/code&gt; can be obtained.</source>
          <target state="translated">データ &lt;code&gt;DataSource&lt;/code&gt; への接続を取得できることを確認します。</target>
        </trans-unit>
        <trans-unit id="a1c0de2a3c4fae9adefdf631e304db12178e3df5" translate="yes" xml:space="preserve">
          <source>Checks that a mail server is up.</source>
          <target state="translated">メールサーバが起動しているかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="6918183fddc79afa75053a32152533c41262bc89" translate="yes" xml:space="preserve">
          <source>Checks that an Elasticsearch cluster is up.</source>
          <target state="translated">Elasticsearchクラスタが起動しているかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="dcd5b68ec2ae1c98763f8369b9cdaccc5c91fccf" translate="yes" xml:space="preserve">
          <source>Checks that an InfluxDB server is up.</source>
          <target state="translated">InfluxDB サーバーが稼働しているかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="1403570530fdf1ad6ed1e533cc752ff3d496232e" translate="yes" xml:space="preserve">
          <source>Checks that an LDAP server is up.</source>
          <target state="translated">LDAP サーバーが起動しているかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="edefa9af97f9e0a86ea0794bbc3f488b13925399" translate="yes" xml:space="preserve">
          <source>Choice of strategy for matching request paths against registered mappings.</source>
          <target state="translated">登録されたマッピングに対してリクエストパスをマッチングさせるための戦略の選択。</target>
        </trans-unit>
        <trans-unit id="a99d6c836754d30da946aa51c8a234d49f01bbec" translate="yes" xml:space="preserve">
          <source>Class Conditions</source>
          <target state="translated">クラス条件</target>
        </trans-unit>
        <trans-unit id="7a52ce9a28b8241dccfef7eec3f246e0fdf546ae" translate="yes" xml:space="preserve">
          <source>Class name of the servlet to use for JSPs. If registered is true and this class * is on the classpath then it will be registered.</source>
          <target state="translated">JSPで使用するサーブレットのクラス名。registeredがtrueで、このクラス*がクラスパス上にある場合は登録されます。</target>
        </trans-unit>
        <trans-unit id="a77e5afacf2b793048da48a7a7e094b72a32876a" translate="yes" xml:space="preserve">
          <source>Cleanup the application&amp;rsquo;s local state directory on shutdown.</source>
          <target state="translated">シャットダウン時にアプリケーションのローカル状態ディレクトリをクリーンアップします。</target>
        </trans-unit>
        <trans-unit id="2da26b7840099bde197b23222dcc5ff62dfd85d1" translate="yes" xml:space="preserve">
          <source>Cleanup the application&amp;rsquo;s local state directory on startup.</source>
          <target state="translated">起動時にアプリケーションのローカル状態ディレクトリをクリーンアップします。</target>
        </trans-unit>
        <trans-unit id="d45519daddd79b9c41dc9befc4f7f809a9a0ecec" translate="yes" xml:space="preserve">
          <source>Client authentication mode. Requires a trust store.</source>
          <target state="translated">クライアント認証モード。トラストストアが必要です。</target>
        </trans-unit>
        <trans-unit id="56dd1c1b166cc7abc34d514f7d3653b3d73f9d5a" translate="yes" xml:space="preserve">
          <source>Client id used to authenticate with the token introspection endpoint.</source>
          <target state="translated">トークンイントロスペクションエンドポイントで認証するために使用されるクライアントID。</target>
        </trans-unit>
        <trans-unit id="054aa61452fe7a75181f67d4739c3e50f4a0f937" translate="yes" xml:space="preserve">
          <source>Client name to be set on connections with CLIENT SETNAME.</source>
          <target state="translated">CLIENT SETNAMEで接続時に設定するクライアント名。</target>
        </trans-unit>
        <trans-unit id="765741378d9decc0496ab0f56b703372e30791e6" translate="yes" xml:space="preserve">
          <source>Client provider type to use.</source>
          <target state="translated">使用するクライアントプロバイダの種類。</target>
        </trans-unit>
        <trans-unit id="71ff83346ea785c693205bbc6d357ba1735cf63a" translate="yes" xml:space="preserve">
          <source>Client secret used to authenticate with the token introspection endpoint.</source>
          <target state="translated">トークンイントロスペクションエンドポイントでの認証に使用されるクライアントシークレット。</target>
        </trans-unit>
        <trans-unit id="a5e5c42257f38dd11494db49d578d0f45e506171" translate="yes" xml:space="preserve">
          <source>Cloud Deployment</source>
          <target state="translated">クラウド展開</target>
        </trans-unit>
        <trans-unit id="9a2988f65d96777955574b3cf4c46f8861a3f947" translate="yes" xml:space="preserve">
          <source>Cloud Foundry provides default buildpacks that come into play if no other buildpack is specified. The Cloud Foundry &lt;a href=&quot;https://github.com/cloudfoundry/java-buildpack&quot;&gt;Java buildpack&lt;/a&gt; has excellent support for Spring applications, including Spring Boot. You can deploy stand-alone executable jar applications as well as traditional &lt;code&gt;.war&lt;/code&gt; packaged applications.</source>
          <target state="translated">Cloud Foundryは、他のビルドパックが指定されていない場合に機能するデフォルトのビルドパックを提供します。Cloud Foundry &lt;a href=&quot;https://github.com/cloudfoundry/java-buildpack&quot;&gt;Javaビルドパック&lt;/a&gt;は、SpringBootを含むSpringアプリケーションを優れた方法でサポートしています。スタンドアロンの実行可能jarアプリケーションと、従来の &lt;code&gt;.war&lt;/code&gt; パッケージアプリケーションをデプロイできます。</target>
        </trans-unit>
        <trans-unit id="e6836c49fd9d1693184822e0be23705eaa4c2f2a" translate="yes" xml:space="preserve">
          <source>Cluster node addresses in the form 'host:port', or a simple 'host' to use the configured port.</source>
          <target state="translated">クラスタノードのアドレスを 'host:port' の形式で指定するか、設定されたポートを使用するために単純な 'host' を指定します。</target>
        </trans-unit>
        <trans-unit id="f700e2f15cb7ce04a0674b5cda78f371bd75d791" translate="yes" xml:space="preserve">
          <source>Cluster password.</source>
          <target state="translated">クラスタのパスワードです。</target>
        </trans-unit>
        <trans-unit id="dde32136e1cbd4e2610b53fd4c4072c74668c91b" translate="yes" xml:space="preserve">
          <source>Cluster password. Randomly generated on startup by default.</source>
          <target state="translated">クラスタパスワード。デフォルトでは起動時にランダムに生成されます。</target>
        </trans-unit>
        <trans-unit id="25f37900d59b16ca208a255b83ad3bb97b0ffb9d" translate="yes" xml:space="preserve">
          <source>Cluster topology refresh period.</source>
          <target state="translated">クラスタトポロジのリフレッシュ期間。</target>
        </trans-unit>
        <trans-unit id="531fe66a4c77a3d7210edf8360022f3663e3717d" translate="yes" xml:space="preserve">
          <source>Cluster username.</source>
          <target state="translated">クラスタのユーザ名。</target>
        </trans-unit>
        <trans-unit id="9d6b5f970ace9ba53ad9e45c0384561f1183fe5b" translate="yes" xml:space="preserve">
          <source>Code Structure</source>
          <target state="translated">コード構造</target>
        </trans-unit>
        <trans-unit id="a52b7d8b564a097776aadda8ffec91578be7da83" translate="yes" xml:space="preserve">
          <source>Collection name used to store sessions.</source>
          <target state="translated">セッションを保存するために使用されるコレクション名。</target>
        </trans-unit>
        <trans-unit id="765898bb5640292f5cd2ea90765033bdce6d37ee" translate="yes" xml:space="preserve">
          <source>Collections and arrays can be accessed either through an index (typically with YAML) or by using a single comma-separated value (properties). In the latter case, a setter is mandatory. We recommend to always add a setter for such types. If you initialize a collection, make sure it is not immutable (as in the preceding example).</source>
          <target state="translated">コレクションと配列はインデックス(典型的にはYAML)を介してアクセスするか、コンマで区切られた単一の値(プロパティ)を使ってアクセスすることができます。後者の場合、セッターは必須です。このような型の場合は、常にセッターを追加することをお勧めします。コレクションを初期化する場合、それが不変でないことを確認してください(前の例のように)。</target>
        </trans-unit>
        <trans-unit id="1d0c8304baedcf8e3a78982c2e7c0b04622bf2a0" translate="yes" xml:space="preserve">
          <source>Color</source>
          <target state="translated">Color</target>
        </trans-unit>
        <trans-unit id="cab20ecdbeddaba6dff8f9f4d5b0931d2093fff8" translate="yes" xml:space="preserve">
          <source>Color coding is configured by using the &lt;code&gt;%clr&lt;/code&gt; conversion word. In its simplest form, the converter colors the output according to the log level, as shown in the following example:</source>
          <target state="translated">色分けは、 &lt;code&gt;%clr&lt;/code&gt; 変換ワードを使用して構成されます。最も単純な形式では、次の例に示すように、コンバーターはログレベルに従って出力に色を付けます。</target>
        </trans-unit>
        <trans-unit id="da0ec87e4c8fa5ef26d1c9d8574905e647bd7be7" translate="yes" xml:space="preserve">
          <source>Comma-delimited list of host:port pairs to use for establishing the initial connections to the Kafka cluster. Applies to all components unless overridden.</source>
          <target state="translated">Kafka クラスタへの初期接続に使用する host:port ペアのコンマ区切りリスト。オーバーライドされない限り、すべてのコンポーネントに適用されます。</target>
        </trans-unit>
        <trans-unit id="f9be6b15f7a40aada7adb3b8ba65018a0599eed4" translate="yes" xml:space="preserve">
          <source>Comma-delimited list of host:port pairs to use for establishing the initial connections to the Kafka cluster. Overrides the global property, for consumers.</source>
          <target state="translated">Kafka クラスタへの初期接続に使用する host:port ペアのコンマ区切りリスト。コンシューマ用のグローバルプロパティを上書きします。</target>
        </trans-unit>
        <trans-unit id="cbac66a513b02ad2cfd4887fb74efe952cef07fe" translate="yes" xml:space="preserve">
          <source>Comma-delimited list of host:port pairs to use for establishing the initial connections to the Kafka cluster. Overrides the global property, for producers.</source>
          <target state="translated">Kafka クラスタへの最初の接続を確立するために使用する host:port ペアのコンマ区切りリスト。グローバルプロパティを上書きします。</target>
        </trans-unit>
        <trans-unit id="1e919cedacc699a6755060b436b143162d1ade80" translate="yes" xml:space="preserve">
          <source>Comma-delimited list of host:port pairs to use for establishing the initial connections to the Kafka cluster. Overrides the global property, for streams.</source>
          <target state="translated">Kafka クラスタへの初期接続に使用する host:port ペアのコンマ区切りリスト。ストリームのグローバルプロパティを上書きします。</target>
        </trans-unit>
        <trans-unit id="cee08fa3a80ca1a9eb3046cc92286a5724817c62" translate="yes" xml:space="preserve">
          <source>Comma-separated Classpath, such as &lt;code&gt;lib,${HOME}/app/lib&lt;/code&gt;. Earlier entries take precedence, like a regular &lt;code&gt;-classpath&lt;/code&gt; on the &lt;code&gt;javac&lt;/code&gt; command line.</source>
          <target state="translated">&lt;code&gt;lib,${HOME}/app/lib&lt;/code&gt; などのカンマ区切りのクラスパス。以前のエントリは、通常のように、優先さ &lt;code&gt;-classpath&lt;/code&gt; 上 &lt;code&gt;javac&lt;/code&gt; コマンドライン。</target>
        </trans-unit>
        <trans-unit id="9e67352a88bd6ab90174d6ef1830907ab799ba6a" translate="yes" xml:space="preserve">
          <source>Comma-separated list of &quot;host:port&quot; pairs to bootstrap from. This represents an &quot;initial&quot; list of cluster nodes and is required to have at least one entry.</source>
          <target state="translated">ブートストラップする &quot;host:port &quot;ペアのコンマ区切りリスト。これはクラスタノードの「初期」リストを表し、少なくとも1つのエントリが必要です。</target>
        </trans-unit>
        <trans-unit id="08da31eb2619fd918fa77ccc27e7ad8ac22914d8" translate="yes" xml:space="preserve">
          <source>Comma-separated list of &quot;host:port&quot; pairs.</source>
          <target state="translated">host:port &quot;ペアのコンマ区切りリスト。</target>
        </trans-unit>
        <trans-unit id="57df15f0fec4d056473fec5d623673715f4ce9dd" translate="yes" xml:space="preserve">
          <source>Comma-separated list of MIME types that should be compressed.</source>
          <target state="translated">圧縮されるべき MIME タイプのコンマ区切りのリスト。</target>
        </trans-unit>
        <trans-unit id="13a10d5b8b5b78e7d33a5ed01e58536bdd7be86a" translate="yes" xml:space="preserve">
          <source>Comma-separated list of active profiles. Can be overridden by a command line switch.</source>
          <target state="translated">アクティブなプロファイルのコンマ区切りのリスト。コマンドラインスイッチで上書きすることができます。</target>
        </trans-unit>
        <trans-unit id="795b277e6cec330464684acd8046ddf4e6f6da4a" translate="yes" xml:space="preserve">
          <source>Comma-separated list of additional patterns that match jars to ignore for TLD scanning. The special '?' and '*' characters can be used in the pattern to match one and only one character and zero or more characters respectively.</source>
          <target state="translated">TLD スキャンで無視する jar にマッチする追加のパターンのコンマ区切りリスト。特殊な '?' および '*' 文字をパターンの中で使用することで、それぞれ 1 文字のみにマッチしたり 0 文字以上の文字にマッチしたりすることができます。</target>
        </trans-unit>
        <trans-unit id="88df32c9fcb429c55d9227ea8bc4ac53dbadf4b8" translate="yes" xml:space="preserve">
          <source>Comma-separated list of additional unencoded characters that should be allowed in URI paths. Only &quot;&amp;lt; &amp;gt; [ \ ] ^ ` { | }&quot; are allowed.</source>
          <target state="translated">URIパスで許可する必要がある追加のエンコードされていない文字のコンマ区切りリスト。「&amp;lt;&amp;gt; [\] ^ `{|}」のみが許可されます。</target>
        </trans-unit>
        <trans-unit id="0975fa8c4ca83f0a7c1252cf9039482205aaa400" translate="yes" xml:space="preserve">
          <source>Comma-separated list of additional unencoded characters that should be allowed in URI query strings. Only &quot;&amp;lt; &amp;gt; [ \ ] ^ ` { | }&quot; are allowed.</source>
          <target state="translated">URIクエリ文字列で許可する必要がある追加のエンコードされていない文字のコンマ区切りのリスト。「&amp;lt;&amp;gt; [\] ^ `{|}」のみが許可されます。</target>
        </trans-unit>
        <trans-unit id="d5b8c10d343b93c1db83b117025f48654727988a" translate="yes" xml:space="preserve">
          <source>Comma-separated list of addresses to which the client should connect. When set, the host and port are ignored.</source>
          <target state="translated">クライアントが接続するアドレスのコンマ区切りリスト。設定されている場合、ホストとポートは無視されます。</target>
        </trans-unit>
        <trans-unit id="d7a7587034b469b15846abf308d8a8b7fc905b6e" translate="yes" xml:space="preserve">
          <source>Comma-separated list of basenames (essentially a fully-qualified classpath location), each following the ResourceBundle convention with relaxed support for slash based locations. If it doesn't contain a package qualifier (such as &quot;org.mypackage&quot;), it will be resolved from the classpath root.</source>
          <target state="translated">コンマで区切られたベース名のリスト (基本的には完全に修飾されたクラスパスの位置)です。パッケージ修飾子 (例えば &quot;org.mypackage&quot;)を含まない場合は、クラスパスのルートから解決されます。</target>
        </trans-unit>
        <trans-unit id="3db996ef1e960c279665c250e6e87e0b14e61edb" translate="yes" xml:space="preserve">
          <source>Comma-separated list of cache names to create if supported by the underlying cache manager. Usually, this disables the ability to create additional caches on-the-fly.</source>
          <target state="translated">基盤となるキャッシュマネージャがサポートしている場合に作成するキャッシュ名のコンマ区切りリスト。通常、これは追加のキャッシュをその場で作成する機能を無効にします。</target>
        </trans-unit>
        <trans-unit id="b9b3a776647c0d34e0cf405b0afe4129e0b052d7" translate="yes" xml:space="preserve">
          <source>Comma-separated list of features to enable. Uses the defaults of the configured version by default.</source>
          <target state="translated">有効にする機能のコンマ区切りのリスト。デフォルトでは、構成されたバージョンのデフォルトを使用します。</target>
        </trans-unit>
        <trans-unit id="12f51c5c19adb2d938f3f9ef19c1906001910e24" translate="yes" xml:space="preserve">
          <source>Comma-separated list of headers to allow in a request. '*' allows all headers.</source>
          <target state="translated">リクエストで許可するヘッダのコンマ区切りリスト。'*' はすべてのヘッダを許可します。</target>
        </trans-unit>
        <trans-unit id="b6b5a2956f7470e50e08285a248f8542647f89a7" translate="yes" xml:space="preserve">
          <source>Comma-separated list of headers to include in a response.</source>
          <target state="translated">応答に含めるヘッダのコンマ区切りリスト。</target>
        </trans-unit>
        <trans-unit id="d908fb9853e451ae69d3d3b62c25450833603593" translate="yes" xml:space="preserve">
          <source>Comma-separated list of health statuses in order of severity.</source>
          <target state="translated">健康状態を重症度の高い順にコンマで区切ったリスト。</target>
        </trans-unit>
        <trans-unit id="8e734db178bf35c1f75930228fae84b1f782d31b" translate="yes" xml:space="preserve">
          <source>Comma-separated list of job names to execute on startup (for instance, `job1,job2`). By default, all Jobs found in the context are executed.</source>
          <target state="translated">起動時に実行するジョブ名のカンマ区切りリスト (例えば、`job1,job2`)。デフォルトでは、コンテキスト内で見つかったすべてのジョブが実行されます。</target>
        </trans-unit>
        <trans-unit id="76dcbcbfaee9de62bde8da795c79d92cee97dc97" translate="yes" xml:space="preserve">
          <source>Comma-separated list of locations of WSDLs and accompanying XSDs to be exposed as beans.</source>
          <target state="translated">ビーンズとして公開されるWSDLとそれに付随するXSDの場所のコンマ区切りのリスト。</target>
        </trans-unit>
        <trans-unit id="9098cb84b354d7de4231adce7707cf38c17bfce5" translate="yes" xml:space="preserve">
          <source>Comma-separated list of methods to allow. '*' allows all methods. When not set, defaults to GET.</source>
          <target state="translated">許可するメソッドのコンマ区切りリスト。'*' はすべてのメソッドを許可します。設定されていない場合、デフォルトは GET です。</target>
        </trans-unit>
        <trans-unit id="3a16052fddc32853e760474b3d7854981c2c6b87" translate="yes" xml:space="preserve">
          <source>Comma-separated list of origins to allow. '*' allows all origins. When not set, CORS support is disabled.</source>
          <target state="translated">カンマで区切られた、許可するオリジンのリストです。'*' はすべてのオリジンを許可します。設定されていない場合、CORSのサポートは無効になります。</target>
        </trans-unit>
        <trans-unit id="6a88566cbbffacb5f415ae80c4ead9ddada07285" translate="yes" xml:space="preserve">
          <source>Comma-separated list of patterns to apply to the content Version Strategy.</source>
          <target state="translated">コンテンツのバージョン戦略に適用するパターンのコンマ区切りリスト。</target>
        </trans-unit>
        <trans-unit id="f7db94fe331ef151b5084a28adf3e3d67ca88eb9" translate="yes" xml:space="preserve">
          <source>Comma-separated list of patterns to apply to the fixed Version Strategy.</source>
          <target state="translated">固定バージョン戦略に適用するパターンのコンマ区切りリスト。</target>
        </trans-unit>
        <trans-unit id="9b9808343be7c08c2b308137c51c6977efbcc691" translate="yes" xml:space="preserve">
          <source>Comma-separated list of queues to create on startup.</source>
          <target state="translated">起動時に作成するキューのコンマ区切りリスト。</target>
        </trans-unit>
        <trans-unit id="76e0f2ad86f1b1b1ccaf30c8a615f26a3e91da36" translate="yes" xml:space="preserve">
          <source>Comma-separated list of runtime contexts to use.</source>
          <target state="translated">使用するランタイムコンテキストのコンマ区切りリスト。</target>
        </trans-unit>
        <trans-unit id="92f848245770862afb358be28ce710779e53e809" translate="yes" xml:space="preserve">
          <source>Comma-separated list of runtime labels to use.</source>
          <target state="translated">使用するランタイムラベルのコンマ区切りリスト。</target>
        </trans-unit>
        <trans-unit id="9d50911783c28b862d78bc22ff3f6527d25fb7d9" translate="yes" xml:space="preserve">
          <source>Comma-separated list of specific packages to trust (when not trusting all packages).</source>
          <target state="translated">信頼する特定のパッケージのコンマ区切りリスト (すべてのパッケージを信頼しない場合)。</target>
        </trans-unit>
        <trans-unit id="37b890cdb3b537ad26bfdb9aa78bbd44f8268c7a" translate="yes" xml:space="preserve">
          <source>Comma-separated list of template paths.</source>
          <target state="translated">テンプレートパスのコンマ区切りリスト。</target>
        </trans-unit>
        <trans-unit id="1e5d54f43eb63a5fcf38c4ec3f0272671251786c" translate="yes" xml:space="preserve">
          <source>Comma-separated list of the Elasticsearch endpoints to connect to.</source>
          <target state="translated">接続先のElasticsearchエンドポイントのコンマ区切りリスト。</target>
        </trans-unit>
        <trans-unit id="70c0933f02426de181e345a3cac9fb2bd5d3e424" translate="yes" xml:space="preserve">
          <source>Comma-separated list of the Elasticsearch instances to use.</source>
          <target state="translated">使用するElasticsearchインスタンスのコンマ区切りリスト。</target>
        </trans-unit>
        <trans-unit id="4b1812c624b183fb9b97d5e814e50afc7f1a2bb8" translate="yes" xml:space="preserve">
          <source>Comma-separated list of topics to create on startup.</source>
          <target state="translated">スタートアップで作成するトピックのコンマ区切りリスト。</target>
        </trans-unit>
        <trans-unit id="8d3720bd9688afd2b217f961c2c35585cb915678" translate="yes" xml:space="preserve">
          <source>Comma-separated list of user agents for which responses should not be compressed.</source>
          <target state="translated">応答が圧縮されるべきではないユーザーエージェントのコンマ区切りリスト。</target>
        </trans-unit>
        <trans-unit id="ba0eb553f8da75cc8ff2e3a66a821e14e093dd89" translate="yes" xml:space="preserve">
          <source>Comma-separated list of view names (patterns allowed) that can be resolved.</source>
          <target state="translated">解決可能なビュー名(許可されるパターン)のコンマ区切りリスト。</target>
        </trans-unit>
        <trans-unit id="6a43bd5ae11abebbac1675e3da42a1c32f6eebfb" translate="yes" xml:space="preserve">
          <source>Comma-separated list of view names (patterns allowed) that should be excluded from resolution.</source>
          <target state="translated">解決の対象から除外すべきビュー名(許可されるパターン)のコンマ区切りリスト。</target>
        </trans-unit>
        <trans-unit id="1de7d6d9163f0a4a6eac67ecd2c69bf6ce702bd3" translate="yes" xml:space="preserve">
          <source>Comma-separated list of view names (patterns allowed) that should be executed in FULL mode even if a max chunk size is set.</source>
          <target state="translated">最大チャンクサイズが設定されている場合でも、FULLモードで実行されるべきビュー名(許可されるパターン)のコンマ区切りリスト。</target>
        </trans-unit>
        <trans-unit id="4de0e2cde505dcc4bb2cfffb1eae28a8720431f7" translate="yes" xml:space="preserve">
          <source>Comma-separated list of view names (patterns allowed) that should be the only ones executed in CHUNKED mode when a max chunk size is set.</source>
          <target state="translated">最大チャンクサイズが設定されている場合、CHUNKEDモードでのみ実行されるビュー名(許可されるパターン)のコンマ区切りリスト。</target>
        </trans-unit>
        <trans-unit id="f779370fd0ebdedacebfd4aa52dd2624412d990b" translate="yes" xml:space="preserve">
          <source>Command line arguments.</source>
          <target state="translated">コマンドライン引数。</target>
        </trans-unit>
        <trans-unit id="3778412a5b52822958dd392f9b13ea26b5c93deb" translate="yes" xml:space="preserve">
          <source>Comment for the session cookie.</source>
          <target state="translated">セッションクッキーのコメント</target>
        </trans-unit>
        <trans-unit id="fce06e20e5f7f74aacccab40b59b75a56c8f7305" translate="yes" xml:space="preserve">
          <source>Comments</source>
          <target state="translated">Comments</target>
        </trans-unit>
        <trans-unit id="bb76c750132fc396a6177d362fbcd25630d3b01d" translate="yes" xml:space="preserve">
          <source>Common Application properties</source>
          <target state="translated">共通アプリケーションのプロパティ</target>
        </trans-unit>
        <trans-unit id="5d01f5305b09f1e2e4f5f90d4c08c25769bf47c2" translate="yes" xml:space="preserve">
          <source>Common application properties that can be used to configure your application.</source>
          <target state="translated">アプリケーションの設定に使用できる一般的なアプリケーションのプロパティ。</target>
        </trans-unit>
        <trans-unit id="18b2370374c1ef5da167e40eea4aef99938e56b3" translate="yes" xml:space="preserve">
          <source>Common server settings include:</source>
          <target state="translated">一般的なサーバー設定には以下のようなものがあります。</target>
        </trans-unit>
        <trans-unit id="2bf5206db21392859b999102549b4f59c9ca7b13" translate="yes" xml:space="preserve">
          <source>Common servlet container settings can be configured by using Spring &lt;code&gt;Environment&lt;/code&gt; properties. Usually, you would define the properties in your &lt;code&gt;application.properties&lt;/code&gt; or &lt;code&gt;application.yaml&lt;/code&gt; file.</source>
          <target state="translated">一般的なサーブレットコンテナの設定が春を用いて構成することができる &lt;code&gt;Environment&lt;/code&gt; のプロパティを。通常、 &lt;code&gt;application.properties&lt;/code&gt; または &lt;code&gt;application.yaml&lt;/code&gt; ファイルでプロパティを定義します。</target>
        </trans-unit>
        <trans-unit id="9d3565f560a7f50e2a04ec5edc4642a5227fb62f" translate="yes" xml:space="preserve">
          <source>Common tags are generally used for dimensional drill-down on the operating environment like host, instance, region, stack, etc. Commons tags are applied to all meters and can be configured as shown in the following example:</source>
          <target state="translated">コモンタグは一般的に、ホスト、インスタンス、リージョン、スタックなどのような動作環境の次元ドリルダウンに使用されます。コモンタグはすべてのメーターに適用され、次の例のように構成することができます。</target>
        </trans-unit>
        <trans-unit id="f32f65a4d76ef706ec95e9cd419733922aaa5af1" translate="yes" xml:space="preserve">
          <source>Common tags that are applied to every meter.</source>
          <target state="translated">すべてのメーターに適用される共通タグ。</target>
        </trans-unit>
        <trans-unit id="5227e2b333b182820a105b24addbaa7a53e8d7bb" translate="yes" xml:space="preserve">
          <source>Commons DBCP2 specific settings bound to an instance of DBCP2's BasicDataSource</source>
          <target state="translated">DBCP2のBasicDataSourceのインスタンスにバインドされたコモンズDBCP2固有の設定</target>
        </trans-unit>
        <trans-unit id="3faaee8ad905672227933c79a3f478c5df201324" translate="yes" xml:space="preserve">
          <source>Compression supported by the Cassandra binary protocol.</source>
          <target state="translated">Cassandraバイナリ・プロトコルでサポートされている圧縮。</target>
        </trans-unit>
        <trans-unit id="4c84eb4fb6a308a6ed43fb82edbf51254c7e1d84" translate="yes" xml:space="preserve">
          <source>Compression type for all data generated by the producer.</source>
          <target state="translated">プロデューサが生成したすべてのデータの圧縮タイプ。</target>
        </trans-unit>
        <trans-unit id="8af329a3546af8ca95a5d488691a53e1b46a5775" translate="yes" xml:space="preserve">
          <source>Computed non-aggregable percentiles to publish.</source>
          <target state="translated">公表するための非集計可能なパーセンタイルを計算しました。</target>
        </trans-unit>
        <trans-unit id="a7772eecc64e30259d7ac28131f4f1be766873f2" translate="yes" xml:space="preserve">
          <source>Concretely, a custom starter can contain the following:</source>
          <target state="translated">具体的には、カスタムスターターには、以下のようなものがあります。</target>
        </trans-unit>
        <trans-unit id="a54a7ebd920c29fff64ba2d5428cd91b13d3e669" translate="yes" xml:space="preserve">
          <source>Config data (such as &lt;code&gt;application.properties&lt;/code&gt; files)</source>
          <target state="translated">構成データ（ &lt;code&gt;application.properties&lt;/code&gt; ファイルなど）</target>
        </trans-unit>
        <trans-unit id="f4dce69868bc7fcd2b209ee8a9ef077e5a4ce583" translate="yes" xml:space="preserve">
          <source>Config data files are considered in the following order:</source>
          <target state="translated">コンフィグデータファイルは、以下の順番で検討します。</target>
        </trans-unit>
        <trans-unit id="f1a79f65ec1a8ed54f5c07b7f344a1b151036e71" translate="yes" xml:space="preserve">
          <source>Config file locations that replace the defaults.</source>
          <target state="translated">デフォルトを置き換えるコンフィグファイルの場所。</target>
        </trans-unit>
        <trans-unit id="9dc80578f7a0a9bcb1d5879bf0bb00b38e1382e1" translate="yes" xml:space="preserve">
          <source>Config file locations used in addition to the defaults.</source>
          <target state="translated">デフォルトに加えて使用されるコンフィグファイルの場所。</target>
        </trans-unit>
        <trans-unit id="283f99719e244586d5f5d4c0022275f8a1df400b" translate="yes" xml:space="preserve">
          <source>Config file name.</source>
          <target state="translated">コンフィグファイル名。</target>
        </trans-unit>
        <trans-unit id="96eab012efd1a6748f8c232ffae299723d95ccdf" translate="yes" xml:space="preserve">
          <source>Configuration Class</source>
          <target state="translated">構成クラス</target>
        </trans-unit>
        <trans-unit id="c07561232d3f8e0dc4a58aea9a9cc544972aa5dd" translate="yes" xml:space="preserve">
          <source>Configuration Metadata</source>
          <target state="translated">設定メタデータ</target>
        </trans-unit>
        <trans-unit id="7ff39198b6b34dc3de99bf5f3bede2bc6c65fa46" translate="yes" xml:space="preserve">
          <source>Configuration metadata files are located inside jars under &lt;code&gt;META-INF/spring-configuration-metadata.json&lt;/code&gt;. They use a JSON format with items categorized under either &amp;ldquo;groups&amp;rdquo; or &amp;ldquo;properties&amp;rdquo; and additional values hints categorized under &quot;hints&quot;, as shown in the following example:</source>
          <target state="translated">構成メタデータファイルは、 &lt;code&gt;META-INF/spring-configuration-metadata.json&lt;/code&gt; /spring-configuration-metadata.jsonの下のjar内にあります。次の例に示すように、「グループ」または「プロパティ」に分類されたアイテムと「ヒント」に分類された追加の値のヒントを含むJSON形式を使用します。</target>
        </trans-unit>
        <trans-unit id="7dd9aa81501afbedb7983e5ee3e462402c48a1d7" translate="yes" xml:space="preserve">
          <source>Configuration tree values can be bound to both string &lt;code&gt;String&lt;/code&gt; and &lt;code&gt;byte[]&lt;/code&gt; types depending on the contents expected.</source>
          <target state="translated">構成ツリーの値は、予想される内容に応じて、文字列 &lt;code&gt;String&lt;/code&gt; タイプと &lt;code&gt;byte[]&lt;/code&gt; タイプの両方にバインドできます。</target>
        </trans-unit>
        <trans-unit id="60aaef8a0f348e17d510f01f8de93c15c981a31f" translate="yes" xml:space="preserve">
          <source>Configure a property name on the &lt;code&gt;@EmbeddedKafka&lt;/code&gt; annotation:</source>
          <target state="translated">&lt;code&gt;@EmbeddedKafka&lt;/code&gt; アノテーションでプロパティ名を構成します。</target>
        </trans-unit>
        <trans-unit id="b3358b4d4fd103aa292d14727a1e14302c00bb91" translate="yes" xml:space="preserve">
          <source>Configures the ANSI output.</source>
          <target state="translated">ANSI 出力を設定します。</target>
        </trans-unit>
        <trans-unit id="42305eb2c4d9ecbc3916054a1813ba3d9eb65ab0" translate="yes" xml:space="preserve">
          <source>Configuring codecs for &lt;code&gt;HttpMessageReader&lt;/code&gt; and &lt;code&gt;HttpMessageWriter&lt;/code&gt; instances (described &lt;a href=&quot;#boot-features-webflux-httpcodecs&quot;&gt;later in this document&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;HttpMessageReader&lt;/code&gt; および &lt;code&gt;HttpMessageWriter&lt;/code&gt; インスタンスのコーデックの構成（&lt;a href=&quot;#boot-features-webflux-httpcodecs&quot;&gt;このドキュメントの後半で説明&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="d3699e50efeb4e731f1769c42091fee642ed4437" translate="yes" xml:space="preserve">
          <source>Configuring the &lt;code&gt;DispatcherServlet&lt;/code&gt; yourself is unusual but if you really need to do it, a &lt;code&gt;@Bean&lt;/code&gt; of type &lt;code&gt;DispatcherServletPath&lt;/code&gt; must be provided as well to provide the path of your custom &lt;code&gt;DispatcherServlet&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;DispatcherServlet&lt;/code&gt; を自分で構成することは珍しいことですが、本当にそれを行う必要がある場合は、カスタム &lt;code&gt;DispatcherServlet&lt;/code&gt; のパスを提供するために、タイプ &lt;code&gt;DispatcherServletPath&lt;/code&gt; の &lt;code&gt;@Bean&lt;/code&gt; も提供する必要があります。</target>
        </trans-unit>
        <trans-unit id="f66bb70c416d06a1607fca278f007138506119b2" translate="yes" xml:space="preserve">
          <source>Congratulations! The application is now live!</source>
          <target state="translated">おめでとうございます。申し込み受付中です!</target>
        </trans-unit>
        <trans-unit id="e6fb82df3af4c9f42b226dc08476092163effdf7" translate="yes" xml:space="preserve">
          <source>Connection URL. Overrides host, port, and password. User is ignored. Example: redis://user:password@example.com:6379</source>
          <target state="translated">接続 URL。ホスト、ポート、パスワードを上書きします。ユーザーは無視されます。例:redis://user:password@example.com:6379</target>
        </trans-unit>
        <trans-unit id="8cb155c39beb6ec79ef439475547816e1cb8efa5" translate="yes" xml:space="preserve">
          <source>Connection factory JNDI name. When set, takes precedence to others connection factory auto-configurations.</source>
          <target state="translated">接続工場の JNDI 名。設定した場合、他の接続工場の自動設定よりも優先されます。</target>
        </trans-unit>
        <trans-unit id="a5c8d1d7a0d6ae95e88f44fb9fbb558e7a40042d" translate="yes" xml:space="preserve">
          <source>Connection factory cache mode.</source>
          <target state="translated">接続工場のキャッシュモード。</target>
        </trans-unit>
        <trans-unit id="0239c5f874296f884b22514c45e19116fcdfa925" translate="yes" xml:space="preserve">
          <source>Connection idle timeout.</source>
          <target state="translated">接続のアイドルタイムアウト。</target>
        </trans-unit>
        <trans-unit id="c87c22db413c55cd324b852af34bf521b4dcf7ef" translate="yes" xml:space="preserve">
          <source>Connection string used to locate the Couchbase cluster.</source>
          <target state="translated">Couchbaseクラスタを見つけるために使用される接続文字列。</target>
        </trans-unit>
        <trans-unit id="14cc570342f5c222b99bf098152695f377476cd7" translate="yes" xml:space="preserve">
          <source>Connection timeout for requests to this backend.</source>
          <target state="translated">このバックエンドへのリクエストの接続タイムアウト。</target>
        </trans-unit>
        <trans-unit id="6fc0d3002d1d61f94c15a83ac6daafa27bdce32a" translate="yes" xml:space="preserve">
          <source>Connection timeout of the Netty channel.</source>
          <target state="translated">Nettyチャンネルの接続タイムアウト。</target>
        </trans-unit>
        <trans-unit id="8aad134578861bda47f8aab9226db95c68ddef62" translate="yes" xml:space="preserve">
          <source>Connection timeout.</source>
          <target state="translated">接続のタイムアウト。</target>
        </trans-unit>
        <trans-unit id="b9c7503ac00935612233645d15dc183cc04749c2" translate="yes" xml:space="preserve">
          <source>Connection timeout. Set it to zero to wait forever.</source>
          <target state="translated">接続のタイムアウト。ゼロに設定して永遠に待つようにします。</target>
        </trans-unit>
        <trans-unit id="fa5c1804d7a304d633fa30e8499848b32afe469e" translate="yes" xml:space="preserve">
          <source>Consider the following configuration:</source>
          <target state="translated">次のような構成を考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="d7f69e049d11cfea430a186ac01ffac1bca0cfc8" translate="yes" xml:space="preserve">
          <source>Consider the following example:</source>
          <target state="translated">次のような例を考えてみてください。</target>
        </trans-unit>
        <trans-unit id="187f7abef3f987130d4014962a4b3529c88af6ff" translate="yes" xml:space="preserve">
          <source>Console only logging.</source>
          <target state="translated">コンソールのみのロギング。</target>
        </trans-unit>
        <trans-unit id="9442fa17ab7ed262fd07b261eff648dd9b1bd47b" translate="yes" xml:space="preserve">
          <source>Consumes</source>
          <target state="translated">Consumes</target>
        </trans-unit>
        <trans-unit id="4560298d5bdfa4819fa013666b18762371d4b4c7" translate="yes" xml:space="preserve">
          <source>Content type to use as a default when none is specified.</source>
          <target state="translated">何も指定されていない場合にデフォルトとして使用するコンテンツタイプ。</target>
        </trans-unit>
        <trans-unit id="aa28ec75f0a9bed3e53d209b009a7484c0ff4bd8" translate="yes" xml:space="preserve">
          <source>Content-Type value written to HTTP responses.</source>
          <target state="translated">HTTP レスポンスに書き込まれる Content-Type の値。</target>
        </trans-unit>
        <trans-unit id="e664ea60c272543452cd42b69b9f04ee94cb4c0b" translate="yes" xml:space="preserve">
          <source>Content-Type value.</source>
          <target state="translated">Content-Typeの値。</target>
        </trans-unit>
        <trans-unit id="e5900c559b40f9634cf809a7f35455cc9f0dcb2b" translate="yes" xml:space="preserve">
          <source>Context path of the application.</source>
          <target state="translated">アプリケーションのコンテキストパス。</target>
        </trans-unit>
        <trans-unit id="6cdbb386fcec104eb2aab3688142412d727e8d96" translate="yes" xml:space="preserve">
          <source>Context path used to handle the remote connection.</source>
          <target state="translated">リモート接続の処理に使用されるコンテキストパス。</target>
        </trans-unit>
        <trans-unit id="8fae269cb92350596d68e161a4ce2ffc2ecaee87" translate="yes" xml:space="preserve">
          <source>Continuation timeout for RPC calls in channels. Set it to zero to wait forever.</source>
          <target state="translated">チャンネル内のRPCコールの継続タイムアウト。ゼロに設定すると永遠に待ち続けることになります。</target>
        </trans-unit>
        <trans-unit id="2b49bd184660b0eb6241d24713dbe53663313c47" translate="yes" xml:space="preserve">
          <source>Control flag for login configuration.</source>
          <target state="translated">ログイン設定の制御フラグ。</target>
        </trans-unit>
        <trans-unit id="f0a0f9f2da39e87d721f7ce4b17fe15dfe9f6912" translate="yes" xml:space="preserve">
          <source>Controls the inclusion of properties during serialization. Configured with one of the values in Jackson's JsonInclude.Include enumeration.</source>
          <target state="translated">シリアライズ中のプロパティのインクルードを制御します。JacksonのJsonInclude.Include列挙のいずれかの値で設定されています。</target>
        </trans-unit>
        <trans-unit id="f0b56426edbe57dd4ed73972685d71074d89e069" translate="yes" xml:space="preserve">
          <source>Conversion word used when logging exceptions.</source>
          <target state="translated">例外をログに記録する際に使用する変換ワード。</target>
        </trans-unit>
        <trans-unit id="822126bfb5238a961bf385930cc2bbca839c9eab" translate="yes" xml:space="preserve">
          <source>Convert to uppercase.</source>
          <target state="translated">大文字に変換します。</target>
        </trans-unit>
        <trans-unit id="18f2d527e702f04d61ecbacdc15be60d928e7ea4" translate="yes" xml:space="preserve">
          <source>Converting Data Sizes</source>
          <target state="translated">データサイズの変換</target>
        </trans-unit>
        <trans-unit id="4d36a479595918d519ceca170c3e18c2d1ed137e" translate="yes" xml:space="preserve">
          <source>Converting durations</source>
          <target state="translated">デュレーションの変換</target>
        </trans-unit>
        <trans-unit id="b12fcfb7ad016c98007a04cd36e8da73a63bd941" translate="yes" xml:space="preserve">
          <source>Converting periods</source>
          <target state="translated">変換期間</target>
        </trans-unit>
        <trans-unit id="5efcc51019780bfdab94906bb0bf45479bc7823b" translate="yes" xml:space="preserve">
          <source>Cookies are ignored (so the template is stateless).</source>
          <target state="translated">クッキーは無視されます(テンプレートはステートレスです)。</target>
        </trans-unit>
        <trans-unit id="51ffe1f1a71b8bc6ee609ed893650cbc7c2a2273" translate="yes" xml:space="preserve">
          <source>Copies of this document may be made for your own use and for distribution to others, provided that you do not charge any fee for such copies and further provided that each copy contains this Copyright Notice, whether distributed in print or electronically.</source>
          <target state="translated">この文書のコピーは、あなた自身の使用および他者への配布のために作成することができますが、そのようなコピーに手数料を請求しないこと、およびさらに、印刷または電子的に配布されるかどうかにかかわらず、各コピーにこの著作権表示が含まれていることを条件にします。</target>
        </trans-unit>
        <trans-unit id="910fde5ff8d87e7f4514556213806ae6522b4c78" translate="yes" xml:space="preserve">
          <source>Copyright &amp;copy; 2002&amp;ndash;2020 Pivotal, Inc. All Rights Reserved.</source>
          <target state="translated">Copyright&amp;copy;2002&amp;ndash;2020 Pivotal、Inc。無断複写・転載を禁じます。</target>
        </trans-unit>
        <trans-unit id="6699171cb1cc0506ca513189ebf32cca05c777e1" translate="yes" xml:space="preserve">
          <source>Core number of threads.</source>
          <target state="translated">スレッドのコア数。</target>
        </trans-unit>
        <trans-unit id="d526ef7ad280021fb17d69c8ea6807dc0b2ba68e" translate="yes" xml:space="preserve">
          <source>Core starter, including auto-configuration support, logging and YAML</source>
          <target state="translated">自動設定サポート、ロギング、YAMLを含むコアスターター</target>
        </trans-unit>
        <trans-unit id="9304cdd066efa64f78387e9cc9240a70527271bc" translate="yes" xml:space="preserve">
          <source>Couchbase</source>
          <target state="translated">Couchbase</target>
        </trans-unit>
        <trans-unit id="245c54ff773d1f46a8e7f15ba5571211b6f1d7ce" translate="yes" xml:space="preserve">
          <source>Counting mode.</source>
          <target state="translated">カウントモード。</target>
        </trans-unit>
        <trans-unit id="cde666089dc8b94534654d558d815eda1fc7a2d3" translate="yes" xml:space="preserve">
          <source>Create a file called &lt;code&gt;application.yml&lt;/code&gt; and put it in the root of your classpath. Then add &lt;code&gt;snakeyaml&lt;/code&gt; to your dependencies (Maven coordinates &lt;code&gt;org.yaml:snakeyaml&lt;/code&gt;, already included if you use the &lt;code&gt;spring-boot-starter&lt;/code&gt;). A YAML file is parsed to a Java &lt;code&gt;Map&amp;lt;String,Object&amp;gt;&lt;/code&gt; (like a JSON object), and Spring Boot flattens the map so that it is one level deep and has period-separated keys, as many people are used to with &lt;code&gt;Properties&lt;/code&gt; files in Java.</source>
          <target state="translated">&lt;code&gt;application.yml&lt;/code&gt; というファイルを作成し、クラスパスのルートに配置します。次に、依存関係に &lt;code&gt;snakeyaml&lt;/code&gt; を追加します（Maven座標 &lt;code&gt;org.yaml:snakeyaml&lt;/code&gt; 、 &lt;code&gt;spring-boot-starter&lt;/code&gt; を使用する場合はすでに含まれています）。YAMLファイルはJavaMap &lt;code&gt;Map&amp;lt;String,Object&amp;gt;&lt;/code&gt; （JSONオブジェクトのように）に解析され、Spring Bootは、多くの人が &lt;code&gt;Properties&lt;/code&gt; ファイルで慣れているように、マップを1レベルの深さで、ピリオドで区切られたキーを持つようにフラット化します。 Javaで。</target>
        </trans-unit>
        <trans-unit id="c317b6610a2a762d003462b6974b6bc1bc56531e" translate="yes" xml:space="preserve">
          <source>Create a new &lt;code&gt;Java Application&lt;/code&gt; &amp;ldquo;launch configuration&amp;rdquo;.</source>
          <target state="translated">新しい &lt;code&gt;Java Application&lt;/code&gt; 「起動構成」を作成します。</target>
        </trans-unit>
        <trans-unit id="689ce8a243b818c3d398aaa608bf7440a97b3048" translate="yes" xml:space="preserve">
          <source>Creating a custom &lt;code&gt;error.jsp&lt;/code&gt; page does not override the default view for &lt;a href=&quot;#boot-features-error-handling&quot;&gt;error handling&lt;/a&gt;. &lt;a href=&quot;#boot-features-error-handling-custom-error-pages&quot;&gt;Custom error pages&lt;/a&gt; should be used instead.</source>
          <target state="translated">カスタム &lt;code&gt;error.jsp&lt;/code&gt; ページを作成しても、&lt;a href=&quot;#boot-features-error-handling&quot;&gt;エラー処理の&lt;/a&gt;デフォルトビューは上書きされません。代わりに、&lt;a href=&quot;#boot-features-error-handling-custom-error-pages&quot;&gt;カスタムエラーページ&lt;/a&gt;を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="b9da7ea530068779ff9d27f3b38206270a8d6abb" translate="yes" xml:space="preserve">
          <source>Credentials password.</source>
          <target state="translated">クレデンシャルのパスワード。</target>
        </trans-unit>
        <trans-unit id="8af3baf9b4554b13aa0109cc402a4bae7837b30a" translate="yes" xml:space="preserve">
          <source>Credentials username.</source>
          <target state="translated">資格情報のユーザー名。</target>
        </trans-unit>
        <trans-unit id="56f93fa4129d507ae58aa648e4653d1e6ba4ae14" translate="yes" xml:space="preserve">
          <source>Cron expression for expired session cleanup job.</source>
          <target state="translated">期限切れセッションクリーンアップジョブのためのCron式。</target>
        </trans-unit>
        <trans-unit id="a81cf7757742eaf9f0864294dbcf9e7309a791ff" translate="yes" xml:space="preserve">
          <source>Currently, Spring Security does not provide support for implementing an OAuth 2.0 Authorization Server. However, this functionality is available from the &lt;a href=&quot;https://spring.io/projects/spring-security-oauth&quot;&gt;Spring Security OAuth&lt;/a&gt; project, which will eventually be superseded by Spring Security completely. Until then, you can use the &lt;code&gt;spring-security-oauth2-autoconfigure&lt;/code&gt; module to easily set up an OAuth 2.0 authorization server; see its &lt;a href=&quot;https://docs.spring.io/spring-security-oauth2-boot/&quot;&gt;documentation&lt;/a&gt; for instructions.</source>
          <target state="translated">現在、SpringSecurityはOAuth2.0認証サーバーの実装をサポートしていません。ただし、この機能は&lt;a href=&quot;https://spring.io/projects/spring-security-oauth&quot;&gt;Spring Security OAuth&lt;/a&gt;プロジェクトから利用でき、最終的にはSpringSecurityに完全に置き換えられます。それまでは、 &lt;code&gt;spring-security-oauth2-autoconfigure&lt;/code&gt; モジュールを使用して、OAuth2.0認証サーバーを簡単にセットアップできます。手順については、その&lt;a href=&quot;https://docs.spring.io/spring-security-oauth2-boot/&quot;&gt;ドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="8394a6d089573458fed901e2364c860b5809ed9b" translate="yes" xml:space="preserve">
          <source>Custom Error Pages</source>
          <target state="translated">カスタムエラーページ</target>
        </trans-unit>
        <trans-unit id="9e21be22a3254b4156b2e56b573050add0cefc03" translate="yes" xml:space="preserve">
          <source>Custom error pages</source>
          <target state="translated">カスタムエラーページ</target>
        </trans-unit>
        <trans-unit id="e2342f2ece8702ff63f42391500f9acc8e63bbca" translate="yes" xml:space="preserve">
          <source>Custom log format, see org.eclipse.jetty.server.CustomRequestLog. If defined, overrides the &quot;format&quot; configuration key.</source>
          <target state="translated">カスタムログフォーマット、 org.eclipse.jetty.server.CustomRequestLogを参照してください。定義されている場合、&quot;format &quot;設定キーをオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="d7f0ac9e007291a6ccc21d036f4711505ad9d0b1" translate="yes" xml:space="preserve">
          <source>Customization</source>
          <target state="translated">Customization</target>
        </trans-unit>
        <trans-unit id="1de21cdc83750604be2cd4ceb6f6c1ee3e0c8749" translate="yes" xml:space="preserve">
          <source>Customizing ConfigurableServletWebServerFactory Directly</source>
          <target state="translated">ConfigurableServletWebServerFactoryを直接カスタマイズする</target>
        </trans-unit>
        <trans-unit id="9713d3a816b22d1a53b66ea4b7ddb426b3ddebe7" translate="yes" xml:space="preserve">
          <source>Customizing a Script When It Runs</source>
          <target state="translated">実行時のスクリプトのカスタマイズ</target>
        </trans-unit>
        <trans-unit id="dc995d4569de1763614f1fbcb0a6f612a150f4c2" translate="yes" xml:space="preserve">
          <source>Customizing the Start Script when It Is Written</source>
          <target state="translated">スクリプトが書かれているときに開始スクリプトをカスタマイズする</target>
        </trans-unit>
        <trans-unit id="76c5d386e2d405ece07a9301c2ac759b5fd40a09" translate="yes" xml:space="preserve">
          <source>Cutting edge &lt;a href=&quot;https://repo.spring.io/snapshot/org/springframework/boot/spring-boot-cli/&quot;&gt;snapshot distributions&lt;/a&gt; are also available.</source>
          <target state="translated">最先端の&lt;a href=&quot;https://repo.spring.io/snapshot/org/springframework/boot/spring-boot-cli/&quot;&gt;スナップショット配布&lt;/a&gt;も利用できます。</target>
        </trans-unit>
        <trans-unit id="7fc379d2b4951ff15f6f932b1ebeada837983855" translate="yes" xml:space="preserve">
          <source>DDL mode. This is actually a shortcut for the &quot;hibernate.hbm2ddl.auto&quot; property. Defaults to &quot;create-drop&quot; when using an embedded database and no schema manager was detected. Otherwise, defaults to &quot;none&quot;.</source>
          <target state="translated">DDLモードです。これは実際には &quot;hibernate.hbm2ddl.auto &quot;プロパティのショートカットです。埋め込みデータベースを使用していて、スキーママネージャが検出されなかった場合、デフォルトは &quot;create-drop &quot;になります。それ以外の場合は、デフォルトは &quot;none &quot;です。</target>
        </trans-unit>
        <trans-unit id="30e504c829201f1e519376dfee2e0e399c82484c" translate="yes" xml:space="preserve">
          <source>DOWN</source>
          <target state="translated">DOWN</target>
        </trans-unit>
        <trans-unit id="b826585fe52d0222ab6633ffbb4132cd6bc57aa0" translate="yes" xml:space="preserve">
          <source>Data (DML) script resource references.</source>
          <target state="translated">データ(DML)スクリプトのリソース参照。</target>
        </trans-unit>
        <trans-unit id="c50657c6144d614c227941c8bd58c434ac144f09" translate="yes" xml:space="preserve">
          <source>Data JPA tests may also inject a &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/orm/jpa/TestEntityManager.java&quot;&gt;&lt;code&gt;TestEntityManager&lt;/code&gt;&lt;/a&gt; bean, which provides an alternative to the standard JPA &lt;code&gt;EntityManager&lt;/code&gt; that is specifically designed for tests. If you want to use &lt;code&gt;TestEntityManager&lt;/code&gt; outside of &lt;code&gt;@DataJpaTest&lt;/code&gt; instances, you can also use the &lt;code&gt;@AutoConfigureTestEntityManager&lt;/code&gt; annotation. A &lt;code&gt;JdbcTemplate&lt;/code&gt; is also available if you need that. The following example shows the &lt;code&gt;@DataJpaTest&lt;/code&gt; annotation in use:</source>
          <target state="translated">データJPA試験も噴射することができる&lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/orm/jpa/TestEntityManager.java&quot;&gt; &lt;code&gt;TestEntityManager&lt;/code&gt; の&lt;/a&gt;標準JPAの代替提供豆、 &lt;code&gt;EntityManager&lt;/code&gt; の特異的試験のために設計されています。あなたが使用したい場合は &lt;code&gt;TestEntityManager&lt;/code&gt; の外 &lt;code&gt;@DataJpaTest&lt;/code&gt; インスタンスを、あなたも使用することができます &lt;code&gt;@AutoConfigureTestEntityManager&lt;/code&gt; の注釈を。A &lt;code&gt;JdbcTemplate&lt;/code&gt; は、あなたがそれを必要とする場合もあります。次の例は、使用中の &lt;code&gt;@DataJpaTest&lt;/code&gt; アノテーションを示しています。</target>
        </trans-unit>
        <trans-unit id="0ca4cc16d0eb862f10b1442cced8ca8a20d4d7c6" translate="yes" xml:space="preserve">
          <source>DataSource configuration is controlled by external configuration properties in &lt;code&gt;spring.datasource.*&lt;/code&gt;. For example, you might declare the following section in &lt;code&gt;application.properties&lt;/code&gt;:</source>
          <target state="translated">データソースの構成は、 &lt;code&gt;spring.datasource.*&lt;/code&gt; 外部構成プロパティによって制御されます。たとえば、 &lt;code&gt;application.properties&lt;/code&gt; で次のセクションを宣言できます。</target>
        </trans-unit>
        <trans-unit id="2ec7d2e0a53d2b0c8fc64a0de5a12e71aef35266" translate="yes" xml:space="preserve">
          <source>Database index used by the connection factory.</source>
          <target state="translated">接続工場で使用されるデータベースインデックス。</target>
        </trans-unit>
        <trans-unit id="06a2b537fffc43308c0f401c19c34d5f1c9c2916" translate="yes" xml:space="preserve">
          <source>Database name to use. By default, the server decides the default database to use.</source>
          <target state="translated">使用するデータベース名。デフォルトでは、サーバは使用するデフォルトのデータベースを決定します。</target>
        </trans-unit>
        <trans-unit id="1f87f07a18246fe9fb50dbb65b249b4631a44dae" translate="yes" xml:space="preserve">
          <source>Database name.</source>
          <target state="translated">データベース名。</target>
        </trans-unit>
        <trans-unit id="4b662ffec6ba933e6498153410ce81d4dbe9595a" translate="yes" xml:space="preserve">
          <source>Database name. Set if no name is specified in the url. Default to &quot;testdb&quot; when using an embedded database.</source>
          <target state="translated">データベース名。urlに名前が指定されていない場合に設定します。埋め込みデータベースを使用している場合は、デフォルトは &quot;testdb &quot;です。</target>
        </trans-unit>
        <trans-unit id="1df57b8260a234362bf66de71680fd2d63a534c4" translate="yes" xml:space="preserve">
          <source>Database schema initialization mode.</source>
          <target state="translated">データベーススキーマ初期化モード。</target>
        </trans-unit>
        <trans-unit id="2ff845b55e83e02121a907ce55e8873223d56cc1" translate="yes" xml:space="preserve">
          <source>Datacenter that is considered &quot;local&quot;. Contact points should be from this datacenter.</source>
          <target state="translated">ローカル」とみなされるデータセンター。コンタクトポイントは、このデータセンターのものでなければなりません。</target>
        </trans-unit>
        <trans-unit id="bd7c7997c03f050abbce4899b359441c7d3e4366" translate="yes" xml:space="preserve">
          <source>Datadog</source>
          <target state="translated">Datadog</target>
        </trans-unit>
        <trans-unit id="0ad655a942592d4da7221b011cf042f67d0d3a08" translate="yes" xml:space="preserve">
          <source>Datadog API key.</source>
          <target state="translated">Datadog API キー。</target>
        </trans-unit>
        <trans-unit id="d03a5e2609b58b2317b6f6f5c554d25b075bd70f" translate="yes" xml:space="preserve">
          <source>Datadog application key. Not strictly required, but improves the Datadog experience by sending meter descriptions, types, and base units to Datadog.</source>
          <target state="translated">Datadog アプリケーションキー。厳密には必須ではありませんが、メーターの説明、タイプ、ベースユニットをDatadogに送信することで、Datadogのエクスペリエンスを向上させます。</target>
        </trans-unit>
        <trans-unit id="45d5b36a3e5606d5a096fcd7b7d4c09f850cf147" translate="yes" xml:space="preserve">
          <source>Datadog registry pushes metrics to &lt;a href=&quot;https://www.datadoghq.com&quot;&gt;datadoghq&lt;/a&gt; periodically. To export metrics to &lt;a href=&quot;https://micrometer.io/docs/registry/datadog&quot;&gt;Datadog&lt;/a&gt;, your API key must be provided:</source>
          <target state="translated">Datadogレジストリは、メトリックを&lt;a href=&quot;https://www.datadoghq.com&quot;&gt;datadoghqに&lt;/a&gt;定期的にプッシュします。メトリックを&lt;a href=&quot;https://micrometer.io/docs/registry/datadog&quot;&gt;Datadog&lt;/a&gt;にエクスポートするには、APIキーを指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="ea765ba0cbd3c174d4e0ace2634d9b0ae2fe10c8" translate="yes" xml:space="preserve">
          <source>Date and Time: Millisecond precision and easily sortable.</source>
          <target state="translated">日付と時刻:ミリ秒単位の精度で簡単にソート可能。</target>
        </trans-unit>
        <trans-unit id="b7cb6a37813a04837c68f130fffcb29bafbca38e" translate="yes" xml:space="preserve">
          <source>Date format string or a fully-qualified date format class name. For instance, `yyyy-MM-dd HH:mm:ss`.</source>
          <target state="translated">日付フォーマット文字列、または完全修飾された日付フォーマットクラス名。例えば、`yyyy-MM-dd HH:mm:ss`のようになります。</target>
        </trans-unit>
        <trans-unit id="c8e1c12159214386878015dd34d7d2ae31876cef" translate="yes" xml:space="preserve">
          <source>Date format to place in log file name.</source>
          <target state="translated">ログファイル名に配置する日付の書式</target>
        </trans-unit>
        <trans-unit id="9db75a470b03b0df0fe6e98d4c4bbc61fcd27305" translate="yes" xml:space="preserve">
          <source>Date format to place in the log file name.</source>
          <target state="translated">ログファイル名に配置する日付の書式を指定します。</target>
        </trans-unit>
        <trans-unit id="132d86e50b862dfe58aa69f220c08329b7f7d760" translate="yes" xml:space="preserve">
          <source>Date format to use, for example `dd/MM/yyyy`.</source>
          <target state="translated">使用する日付フォーマット、例えば `dd/MM/yyyy` のように。</target>
        </trans-unit>
        <trans-unit id="593a4067d57472bed5dcb0cb50efc027c50017e0" translate="yes" xml:space="preserve">
          <source>Date-time format to use, for example `yyyy-MM-dd HH:mm:ss`.</source>
          <target state="translated">使用する日付-時刻フォーマットは、`yyyy-MM-dd HH:mm:ss`のようになります。</target>
        </trans-unit>
        <trans-unit id="9368ee44836dc95da2a6c7f5146467536209242e" translate="yes" xml:space="preserve">
          <source>Declaratively, for all applications, by adding a &lt;code&gt;META-INF/spring.factories&lt;/code&gt; and packaging a jar file that the applications all use as a library.</source>
          <target state="translated">Declaratively, for all applications, by adding a &lt;code&gt;META-INF/spring.factories&lt;/code&gt; and packaging a jar file that the applications all use as a library.</target>
        </trans-unit>
        <trans-unit id="ee79c008d20d3bf9ec511a4c5708d58543fbe1cb" translate="yes" xml:space="preserve">
          <source>Declaratively, per application, by setting the &lt;code&gt;context.initializer.classes&lt;/code&gt; or &lt;code&gt;context.listener.classes&lt;/code&gt; properties.</source>
          <target state="translated">Declaratively, per application, by setting the &lt;code&gt;context.initializer.classes&lt;/code&gt; or &lt;code&gt;context.listener.classes&lt;/code&gt; properties.</target>
        </trans-unit>
        <trans-unit id="808d7dca8a74d84af27a2d6602c3d786de45fe1e" translate="yes" xml:space="preserve">
          <source>Default</source>
          <target state="translated">Default</target>
        </trans-unit>
        <trans-unit id="cd4cd1ca5275a14d5d4ac6b6b01fc2e0fb93661a" translate="yes" xml:space="preserve">
          <source>Default MimeMessage encoding.</source>
          <target state="translated">デフォルトの MimeMessage エンコーディング。</target>
        </trans-unit>
        <trans-unit id="7078198f7cae420890a1abe183a812a6a35f8ed6" translate="yes" xml:space="preserve">
          <source>Default Value</source>
          <target state="translated">デフォルト値</target>
        </trans-unit>
        <trans-unit id="8d9d79b1ec67137f4a3ef84b36d36d16efda361d" translate="yes" xml:space="preserve">
          <source>Default arguments for the main method (space separated).</source>
          <target state="translated">メインメソッドのデフォルトの引数(スペースで区切られています)。</target>
        </trans-unit>
        <trans-unit id="8248cc351c36934f6d7f14afff21cbe015f977b1" translate="yes" xml:space="preserve">
          <source>Default auto-commit mode for local transactions.</source>
          <target state="translated">ローカルトランザクションのデフォルトの自動コミットモード。</target>
        </trans-unit>
        <trans-unit id="7740928fdc32aa0e4ebea3d05b11579de77bcaaa" translate="yes" xml:space="preserve">
          <source>Default batch size. A small batch size will make batching less common and may reduce throughput (a batch size of zero disables batching entirely).</source>
          <target state="translated">デフォルトのバッチサイズ。バッチサイズを小さくすると、バッチ処理の頻度が低くなり、スループットが低下する可能性があります (バッチサイズをゼロにするとバッチ処理が完全に無効になります)。</target>
        </trans-unit>
        <trans-unit id="9edb00cc3a01b75a38f4810ac41c98f3544f2564" translate="yes" xml:space="preserve">
          <source>Default cursor holdability for connections.</source>
          <target state="translated">接続時のデフォルトのカーソルホールド性。</target>
        </trans-unit>
        <trans-unit id="1a93ead6476072bf7c580966ff5321ab0f769a69" translate="yes" xml:space="preserve">
          <source>Default database schema.</source>
          <target state="translated">デフォルトのデータベーススキーマ。</target>
        </trans-unit>
        <trans-unit id="0492c7fdfde5b32e2d645ff6217d5bad39801bcf" translate="yes" xml:space="preserve">
          <source>Default destination to use on send and receive operations that do not have a destination parameter.</source>
          <target state="translated">宛先パラメータを持たない送受信操作で使用するデフォルトの宛先。</target>
        </trans-unit>
        <trans-unit id="20d8c69bb406990b2562804c2d51b1e73d615844" translate="yes" xml:space="preserve">
          <source>Default isolation level for connections.</source>
          <target state="translated">接続のデフォルトのアイソレーションレベル。</target>
        </trans-unit>
        <trans-unit id="8ba4a2f9e2dc6e2f0603fd5370fd1ba22812aa26" translate="yes" xml:space="preserve">
          <source>Default isolation level of connections provided by the pool.</source>
          <target state="translated">プールが提供する接続の既定の分離レベル。</target>
        </trans-unit>
        <trans-unit id="4ae61c56d0107350c5343d0f0577bf9bd1ff856e" translate="yes" xml:space="preserve">
          <source>Default page size.</source>
          <target state="translated">デフォルトのページサイズ。</target>
        </trans-unit>
        <trans-unit id="6fa20db1310e31138314f34b6150a1e2e42e35ab" translate="yes" xml:space="preserve">
          <source>Default properties (specified by setting &lt;code&gt;SpringApplication.setDefaultProperties&lt;/code&gt;).</source>
          <target state="translated">Default properties (specified by setting &lt;code&gt;SpringApplication.setDefaultProperties&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="b39619da180b0d433d4da14204a3d7363cd030e6" translate="yes" xml:space="preserve">
          <source>Default schema name managed by Flyway (case-sensitive).</source>
          <target state="translated">Flywayが管理するデフォルトのスキーマ名(大文字と小文字を区別します)。</target>
        </trans-unit>
        <trans-unit id="d70c06445cf3a66c0a423b10f4eddfc1a901bca6" translate="yes" xml:space="preserve">
          <source>Default size of pages.</source>
          <target state="translated">デフォルトのページサイズ。</target>
        </trans-unit>
        <trans-unit id="30aa8a78de748d9121c63599c21b9a3d3ac83cbb" translate="yes" xml:space="preserve">
          <source>Default timeout for JTA transactions.</source>
          <target state="translated">JTA トランザクションのデフォルトのタイムアウト。</target>
        </trans-unit>
        <trans-unit id="3fd5023a5dc095e0dd1f42efa33230112b602121" translate="yes" xml:space="preserve">
          <source>Default topic to which messages are sent.</source>
          <target state="translated">メッセージを送信する既定のトピック。</target>
        </trans-unit>
        <trans-unit id="63355a7aec619aa92328459266f08c5a97a76d68" translate="yes" xml:space="preserve">
          <source>Default transaction timeout. If a duration suffix is not specified, seconds will be used.</source>
          <target state="translated">デフォルトのトランザクション・タイムアウト。duration サフィックスが指定されていない場合は、秒が使用されます。</target>
        </trans-unit>
        <trans-unit id="dcba856531beb34408e01a9fcb0a3df282a6d6e5" translate="yes" xml:space="preserve">
          <source>Default user name.</source>
          <target state="translated">デフォルトのユーザー名。</target>
        </trans-unit>
        <trans-unit id="bdffe654f8554300a98d2acefcbbf1d894339b2b" translate="yes" xml:space="preserve">
          <source>Default value</source>
          <target state="translated">デフォルト値</target>
        </trans-unit>
        <trans-unit id="318adc4a6d57fbf624d887a844daa16ad936a879" translate="yes" xml:space="preserve">
          <source>Default value for &lt;code&gt;LOG_FILENAME&lt;/code&gt;. Only valid for an &lt;code&gt;init.d&lt;/code&gt; service</source>
          <target state="translated">Default value for &lt;code&gt;LOG_FILENAME&lt;/code&gt; . Only valid for an &lt;code&gt;init.d&lt;/code&gt; service</target>
        </trans-unit>
        <trans-unit id="a7196db4594b481a2bc977b0f5759d967e4b9e7f" translate="yes" xml:space="preserve">
          <source>Default value for &lt;code&gt;LOG_FOLDER&lt;/code&gt;. Only valid for an &lt;code&gt;init.d&lt;/code&gt; service</source>
          <target state="translated">Default value for &lt;code&gt;LOG_FOLDER&lt;/code&gt; . Only valid for an &lt;code&gt;init.d&lt;/code&gt; service</target>
        </trans-unit>
        <trans-unit id="d194e7422d9d40d12ba2678005be4dd0b393f3f0" translate="yes" xml:space="preserve">
          <source>Default value for &lt;code&gt;PID_FOLDER&lt;/code&gt;. Only valid for an &lt;code&gt;init.d&lt;/code&gt; service</source>
          <target state="translated">Default value for &lt;code&gt;PID_FOLDER&lt;/code&gt; . Only valid for an &lt;code&gt;init.d&lt;/code&gt; service</target>
        </trans-unit>
        <trans-unit id="c418e126d6a9a6bb53886da878735b56c2044eb1" translate="yes" xml:space="preserve">
          <source>Default value for &lt;code&gt;STOP_WAIT_TIME&lt;/code&gt; in seconds. Only valid for an &lt;code&gt;init.d&lt;/code&gt; service</source>
          <target state="translated">Default value for &lt;code&gt;STOP_WAIT_TIME&lt;/code&gt; in seconds. Only valid for an &lt;code&gt;init.d&lt;/code&gt; service</target>
        </trans-unit>
        <trans-unit id="0096938c8367ed904ab9c33ff1fe38f924b76181" translate="yes" xml:space="preserve">
          <source>Default value for the name of the PID file in &lt;code&gt;PID_FOLDER&lt;/code&gt;. Only valid for an &lt;code&gt;init.d&lt;/code&gt; service</source>
          <target state="translated">Default value for the name of the PID file in &lt;code&gt;PID_FOLDER&lt;/code&gt; . Only valid for an &lt;code&gt;init.d&lt;/code&gt; service</target>
        </trans-unit>
        <trans-unit id="b503cdc5b1832cf1ecc5c60b379b275c10374e4c" translate="yes" xml:space="preserve">
          <source>Default values can be specified using &lt;code&gt;@DefaultValue&lt;/code&gt; and the same conversion service will be applied to coerce the &lt;code&gt;String&lt;/code&gt; value to the target type of a missing property. By default, if no properties are bound to &lt;code&gt;Security&lt;/code&gt;, the &lt;code&gt;AcmeProperties&lt;/code&gt; instance will contain a &lt;code&gt;null&lt;/code&gt; value for &lt;code&gt;security&lt;/code&gt;. If you wish you return a non-null instance of &lt;code&gt;Security&lt;/code&gt; even when no properties are bound to it, you can use an empty &lt;code&gt;@DefaultValue&lt;/code&gt; annotation to do so:</source>
          <target state="translated">Default values can be specified using &lt;code&gt;@DefaultValue&lt;/code&gt; and the same conversion service will be applied to coerce the &lt;code&gt;String&lt;/code&gt; value to the target type of a missing property. By default, if no properties are bound to &lt;code&gt;Security&lt;/code&gt; , the &lt;code&gt;AcmeProperties&lt;/code&gt; instance will contain a &lt;code&gt;null&lt;/code&gt; value for &lt;code&gt;security&lt;/code&gt; . If you wish you return a non-null instance of &lt;code&gt;Security&lt;/code&gt; even when no properties are bound to it, you can use an empty &lt;code&gt;@DefaultValue&lt;/code&gt; annotation to do so:</target>
        </trans-unit>
        <trans-unit id="f75f6cfa5347de59568fc71e6d119ecba80d8d69" translate="yes" xml:space="preserve">
          <source>Define how the locale should be resolved.</source>
          <target state="translated">ロケールの解決方法を定義します。</target>
        </trans-unit>
        <trans-unit id="46a37fb3e5d3ac624fdbfea0246214c33c249fe4" translate="yes" xml:space="preserve">
          <source>Definition of Actuator</source>
          <target state="translated">アクチュエータの定義</target>
        </trans-unit>
        <trans-unit id="b504e91a64056b489f2d8300e1dc3ad883fef357" translate="yes" xml:space="preserve">
          <source>Delay after which recovery can cleanup pending ('orphaned') log entries.</source>
          <target state="translated">リカバリが保留中の ('孤立した')ログエントリをクリーンアップするまでの時間。</target>
        </trans-unit>
        <trans-unit id="636b134700e8f790978e6538a024693772710447" translate="yes" xml:space="preserve">
          <source>Delay after which the scheduler is started once initialization completes. Setting this property makes sense if no jobs should be run before the entire application has started up.</source>
          <target state="translated">初期化が完了してからスケジューラが起動するまでの時間。このプロパティを設定すると、アプリケーション全体が起動する前にジョブを実行したくない場合に意味があります。</target>
        </trans-unit>
        <trans-unit id="e8e8a8caf436c4b51c900feb239fda9c04592d77" translate="yes" xml:space="preserve">
          <source>Delay between retry attempts.</source>
          <target state="translated">リトライ間の遅延。</target>
        </trans-unit>
        <trans-unit id="3d174e36c367a6fa91560562f932988d21a5a05e" translate="yes" xml:space="preserve">
          <source>Delay between the invocation of backgroundProcess methods. If a duration suffix is not specified, seconds will be used.</source>
          <target state="translated">backgroundProcessメソッドが呼び出されるまでの時間。duration サフィックスが指定されていない場合は秒が使用されます。</target>
        </trans-unit>
        <trans-unit id="0eabb6604f6ea766f5e0e0ef31ac20f32766c8c1" translate="yes" xml:space="preserve">
          <source>Delay between two recovery scans.</source>
          <target state="translated">2回のリカバリースキャンの間の遅延。</target>
        </trans-unit>
        <trans-unit id="cb140e2ba9c3589b9921a392db8584004258c377" translate="yes" xml:space="preserve">
          <source>Delimiter to be used between the qualifier and the actual page number and size properties.</source>
          <target state="translated">クオリファイアと実際のページ番号やサイズのプロパティとの間で使われるデリミタ。</target>
        </trans-unit>
        <trans-unit id="667168b639179442a41d1aab1d7eacaa9d94b9f0" translate="yes" xml:space="preserve">
          <source>Delivery delay to use for send calls.</source>
          <target state="translated">通話を送信する際に使用する遅延時間。</target>
        </trans-unit>
        <trans-unit id="b1ef28cdaca7b69502a4966d03ae7cd8aae86140" translate="yes" xml:space="preserve">
          <source>Delivery mode. Enables QoS (Quality of Service) when set.</source>
          <target state="translated">配信モード。設定するとQoS(Quality of Service)を有効にします。</target>
        </trans-unit>
        <trans-unit id="0562f32dc56f5c702810cbe010068ddd38dbd69a" translate="yes" xml:space="preserve">
          <source>Dependencies</source>
          <target state="translated">Dependencies</target>
        </trans-unit>
        <trans-unit id="a05b6cc9f654592a4951aac91a70f7960638df36" translate="yes" xml:space="preserve">
          <source>Dependencies should be placed in a nested &lt;code&gt;WEB-INF/lib&lt;/code&gt; directory. Any dependencies that are required when running embedded but are not required when deploying to a traditional web container should be placed in &lt;code&gt;WEB-INF/lib-provided&lt;/code&gt;.</source>
          <target state="translated">Dependencies should be placed in a nested &lt;code&gt;WEB-INF/lib&lt;/code&gt; directory. Any dependencies that are required when running embedded but are not required when deploying to a traditional web container should be placed in &lt;code&gt;WEB-INF/lib-provided&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="12968ebbcff93f7be3f84e6ee6bd62b560891918" translate="yes" xml:space="preserve">
          <source>Dependency Versions</source>
          <target state="translated">依存関係のバージョン</target>
        </trans-unit>
        <trans-unit id="fd11d3886390ba655075ec276649e660fa3005f4" translate="yes" xml:space="preserve">
          <source>Dependency versions</source>
          <target state="translated">依存関係のバージョン</target>
        </trans-unit>
        <trans-unit id="04e432619ecd4ae93877053084d6c669eb914efe" translate="yes" xml:space="preserve">
          <source>Depending on how you run your application, your IDE may order the classpath differently. Running your application in the IDE from its main method results in a different ordering than when you run your application by using Maven or Gradle or from its packaged jar. This can cause Spring Boot to fail to find the expected template. If you have this problem, you can reorder the classpath in the IDE to place the module&amp;rsquo;s classes and resources first.</source>
          <target state="translated">Depending on how you run your application, your IDE may order the classpath differently. Running your application in the IDE from its main method results in a different ordering than when you run your application by using Maven or Gradle or from its packaged jar. This can cause Spring Boot to fail to find the expected template. If you have this problem, you can reorder the classpath in the IDE to place the module&amp;rsquo;s classes and resources first.</target>
        </trans-unit>
        <trans-unit id="df05ae7508254daa31b9e1b44527b7cd22dd6c8e" translate="yes" xml:space="preserve">
          <source>Depending on the complexity of your application, you may either have a single &lt;code&gt;@Configuration&lt;/code&gt; class for your customizations or one class per domain area. The latter approach lets you enable it in one of your tests, if necessary, with the &lt;code&gt;@Import&lt;/code&gt; annotation.</source>
          <target state="translated">Depending on the complexity of your application, you may either have a single &lt;code&gt;@Configuration&lt;/code&gt; class for your customizations or one class per domain area. The latter approach lets you enable it in one of your tests, if necessary, with the &lt;code&gt;@Import&lt;/code&gt; annotation.</target>
        </trans-unit>
        <trans-unit id="23578781d5af305a8fef175bf0e6bd78a55e6723" translate="yes" xml:space="preserve">
          <source>Depending on the listener type, a &lt;code&gt;RecordMessageConverter&lt;/code&gt; or &lt;code&gt;BatchMessageConverter&lt;/code&gt; bean is associated to the default factory. If only a &lt;code&gt;RecordMessageConverter&lt;/code&gt; bean is present for a batch listener, it is wrapped in a &lt;code&gt;BatchMessageConverter&lt;/code&gt;.</source>
          <target state="translated">Depending on the listener type, a &lt;code&gt;RecordMessageConverter&lt;/code&gt; or &lt;code&gt;BatchMessageConverter&lt;/code&gt; bean is associated to the default factory. If only a &lt;code&gt;RecordMessageConverter&lt;/code&gt; bean is present for a batch listener, it is wrapped in a &lt;code&gt;BatchMessageConverter&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f19a17dddf4027295f1f9b0224c869bb5d012921" translate="yes" xml:space="preserve">
          <source>Depending on your logging system, the following files are loaded:</source>
          <target state="translated">ロギングシステムに応じて、以下のファイルが読み込まれます。</target>
        </trans-unit>
        <trans-unit id="4c33053f1211cd49899c3d05ab6290f9169b833e" translate="yes" xml:space="preserve">
          <source>Deploying Spring Boot Applications</source>
          <target state="translated">Spring Bootアプリケーションのデプロイ</target>
        </trans-unit>
        <trans-unit id="eaea3c4796f083406268f237ea090af82e11e371" translate="yes" xml:space="preserve">
          <source>Deploying to the Cloud, Installing as a Unix application.</source>
          <target state="translated">クラウドへのデプロイ、Unixアプリケーションとしてのインストール</target>
        </trans-unit>
        <trans-unit id="327a55f82dc6818877a68e37b722bb7f2360b633" translate="yes" xml:space="preserve">
          <source>Deployment</source>
          <target state="translated">Deployment</target>
        </trans-unit>
        <trans-unit id="66bb12951e7ca5cb554a9728924da50f3effa1ba" translate="yes" xml:space="preserve">
          <source>Deprecation</source>
          <target state="translated">Deprecation</target>
        </trans-unit>
        <trans-unit id="7aeb5abbf2faad908d9b44e00bc9a8d67148341c" translate="yes" xml:space="preserve">
          <source>Deprecation can also be specified declaratively in code by adding the &lt;code&gt;@DeprecatedConfigurationProperty&lt;/code&gt; annotation to the getter exposing the deprecated property. For instance, assume that the &lt;code&gt;app.acme.target&lt;/code&gt; property was confusing and was renamed to &lt;code&gt;app.acme.name&lt;/code&gt;. The following example shows how to handle that situation:</source>
          <target state="translated">Deprecation can also be specified declaratively in code by adding the &lt;code&gt;@DeprecatedConfigurationProperty&lt;/code&gt; annotation to the getter exposing the deprecated property. For instance, assume that the &lt;code&gt;app.acme.target&lt;/code&gt; property was confusing and was renamed to &lt;code&gt;app.acme.name&lt;/code&gt; . The following example shows how to handle that situation:</target>
        </trans-unit>
        <trans-unit id="06623cc9d60571ea34b3f8ea525c2935cef1eb04" translate="yes" xml:space="preserve">
          <source>Describes the list of potential values for a property.</source>
          <target state="translated">物件の潜在的な価値のリストについて説明します。</target>
        </trans-unit>
        <trans-unit id="55f8ebc805e65b5b71ddafdae390e3be2bcd69af" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">Description</target>
        </trans-unit>
        <trans-unit id="ce41a27135bc977f35755b1db46e34fe17cf1e0e" translate="yes" xml:space="preserve">
          <source>Description to tag an existing schema with when applying a baseline.</source>
          <target state="translated">ベースラインを適用する際に、既存のスキーマにタグを付ける説明。</target>
        </trans-unit>
        <trans-unit id="5fea1e634922f68fffd6ec440862662a193e6e8b" translate="yes" xml:space="preserve">
          <source>Deserializer class for keys.</source>
          <target state="translated">鍵のデシリアライザクラス。</target>
        </trans-unit>
        <trans-unit id="0779afcc6b94b3fe8869d61609e110ed7c566e12" translate="yes" xml:space="preserve">
          <source>Deserializer class for values.</source>
          <target state="translated">値のデシリアライザクラス。</target>
        </trans-unit>
        <trans-unit id="49deb6981c228523086c1acf67d75e4a49c5cb51" translate="yes" xml:space="preserve">
          <source>Details are never shown.</source>
          <target state="translated">詳細は表示されていません。</target>
        </trans-unit>
        <trans-unit id="d35724d90813324c1d6a198c2d5a3a2cc56ca327" translate="yes" xml:space="preserve">
          <source>Details are only shown to authorized users. Authorized roles can be configured using &lt;code&gt;management.endpoint.health.roles&lt;/code&gt;.</source>
          <target state="translated">Details are only shown to authorized users. Authorized roles can be configured using &lt;code&gt;management.endpoint.health.roles&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7dd716257351a548786d6f860a21a8c5080bbb16" translate="yes" xml:space="preserve">
          <source>Details are shown to all users.</source>
          <target state="translated">詳細は全ユーザーに表示されます。</target>
        </trans-unit>
        <trans-unit id="fffe437b0bc6c0e5b6331f997f0a992bde18b13c" translate="yes" xml:space="preserve">
          <source>Details of the dependencies that are managed by Spring Boot.</source>
          <target state="translated">Spring Bootで管理している依存関係の詳細。</target>
        </trans-unit>
        <trans-unit id="6b87909c7ce7f7de8e4c31d5ebb62fdfed585d9b" translate="yes" xml:space="preserve">
          <source>Detect start-class</source>
          <target state="translated">スタートクラスの検出</target>
        </trans-unit>
        <trans-unit id="00a94308b5e2caa5518b6c42c684558f70841f76" translate="yes" xml:space="preserve">
          <source>DevTools needs to customize the &lt;code&gt;ResourceLoader&lt;/code&gt; used by the &lt;code&gt;ApplicationContext&lt;/code&gt;. If your application provides one already, it is going to be wrapped. Direct override of the &lt;code&gt;getResource&lt;/code&gt; method on the &lt;code&gt;ApplicationContext&lt;/code&gt; is not supported.</source>
          <target state="translated">DevTools needs to customize the &lt;code&gt;ResourceLoader&lt;/code&gt; used by the &lt;code&gt;ApplicationContext&lt;/code&gt; . If your application provides one already, it is going to be wrapped. Direct override of the &lt;code&gt;getResource&lt;/code&gt; method on the &lt;code&gt;ApplicationContext&lt;/code&gt; is not supported.</target>
        </trans-unit>
        <trans-unit id="196addc044b6999224e2974eeeb5558b4bce504f" translate="yes" xml:space="preserve">
          <source>DevTools relies on the application context&amp;rsquo;s shutdown hook to close it during a restart. It does not work correctly if you have disabled the shutdown hook (&lt;code&gt;SpringApplication.setRegisterShutdownHook(false)&lt;/code&gt;).</source>
          <target state="translated">DevTools relies on the application context&amp;rsquo;s shutdown hook to close it during a restart. It does not work correctly if you have disabled the shutdown hook ( &lt;code&gt;SpringApplication.setRegisterShutdownHook(false)&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="2312cfd5bf79d42d05749e56cbee339e2d6d0f06" translate="yes" xml:space="preserve">
          <source>Developer tools are automatically disabled when running a fully packaged application. If your application is launched from &lt;code&gt;java -jar&lt;/code&gt; or if it is started from a special classloader, then it is considered a &amp;ldquo;production application&amp;rdquo;. You can control this behavior by using the &lt;code&gt;spring.devtools.restart.enabled&lt;/code&gt; system property. To enable devtools, irrespective of the classloader used to launch your application, set the &lt;code&gt;-Dspring.devtools.restart.enabled=true&lt;/code&gt; system property. This must not be done in a production environment where running devtools is a security risk. To disable devtools, exclude the dependency or set the &lt;code&gt;-Dspring.devtools.restart.enabled=false&lt;/code&gt; system property.</source>
          <target state="translated">Developer tools are automatically disabled when running a fully packaged application. If your application is launched from &lt;code&gt;java -jar&lt;/code&gt; or if it is started from a special classloader, then it is considered a &amp;ldquo;production application&amp;rdquo;. You can control this behavior by using the &lt;code&gt;spring.devtools.restart.enabled&lt;/code&gt; system property. To enable devtools, irrespective of the classloader used to launch your application, set the &lt;code&gt;-Dspring.devtools.restart.enabled=true&lt;/code&gt; system property. This must not be done in a production environment where running devtools is a security risk. To disable devtools, exclude the dependency or set the &lt;code&gt;-Dspring.devtools.restart.enabled=false&lt;/code&gt; system property.</target>
        </trans-unit>
        <trans-unit id="aa8b67adf46e6bab7b544fcccdb596b0c36a37e0" translate="yes" xml:space="preserve">
          <source>Developers can customize the &lt;code&gt;RSocketStrategies&lt;/code&gt; component by creating beans that implement the &lt;code&gt;RSocketStrategiesCustomizer&lt;/code&gt; interface. Note that their &lt;code&gt;@Order&lt;/code&gt; is important, as it determines the order of codecs.</source>
          <target state="translated">Developers can customize the &lt;code&gt;RSocketStrategies&lt;/code&gt; component by creating beans that implement the &lt;code&gt;RSocketStrategiesCustomizer&lt;/code&gt; interface. Note that their &lt;code&gt;@Order&lt;/code&gt; is important, as it determines the order of codecs.</target>
        </trans-unit>
        <trans-unit id="6c2249e2a5d98b9bfac7ef8093c313db69d584be" translate="yes" xml:space="preserve">
          <source>Developers can override the resource configuration for Jetty and Reactor Netty by providing a custom &lt;code&gt;ReactorResourceFactory&lt;/code&gt; or &lt;code&gt;JettyResourceFactory&lt;/code&gt; bean - this will be applied to both clients and servers.</source>
          <target state="translated">Developers can override the resource configuration for Jetty and Reactor Netty by providing a custom &lt;code&gt;ReactorResourceFactory&lt;/code&gt; or &lt;code&gt;JettyResourceFactory&lt;/code&gt; bean - this will be applied to both clients and servers.</target>
        </trans-unit>
        <trans-unit id="b206ed48adf1bdb4e39e227c100b8abdcd5629ac" translate="yes" xml:space="preserve">
          <source>Developing Spring Boot applications with Kotlin</source>
          <target state="translated">KotlinでSpring Bootアプリケーションを開発する</target>
        </trans-unit>
        <trans-unit id="dbc59f4291a92a7dccf3ff0d08b3e59ec8880086" translate="yes" xml:space="preserve">
          <source>Devtools global settings properties</source>
          <target state="translated">Devtools グローバル設定プロパティ</target>
        </trans-unit>
        <trans-unit id="c50c653c4c7c67d75d7db72ea1ea14f64402c132" translate="yes" xml:space="preserve">
          <source>Directories loaded using a wildcard are sorted alphabetically. If you need a different order, then you should list each location as a separate import</source>
          <target state="translated">ワイルドカードを使って読み込まれたディレクトリはアルファベット順に並べられます。異なる順序が必要な場合は、それぞれの場所を別々のインポートとしてリストアップしてください。</target>
        </trans-unit>
        <trans-unit id="a225784c4e3fb642c547060c37fa4334bca7462a" translate="yes" xml:space="preserve">
          <source>Directory in which log files are created. Can be absolute or relative to the Tomcat base dir.</source>
          <target state="translated">ログファイルが作成されるディレクトリ。Tomcat のベースディレクトリに対する絶対または相対のどちらかを指定します。</target>
        </trans-unit>
        <trans-unit id="233653a81286f899ccbd69cf6b4f8e6c916432fe" translate="yes" xml:space="preserve">
          <source>Directory in which the log files should be stored. Defaults to the current working directory.</source>
          <target state="translated">ログファイルを保存するディレクトリ。デフォルトは現在の作業ディレクトリです。</target>
        </trans-unit>
        <trans-unit id="fc6d499ac2991f89be01ed8d682ddd5d235d103d" translate="yes" xml:space="preserve">
          <source>Directory location for the state store.</source>
          <target state="translated">州の店舗のディレクトリの場所。</target>
        </trans-unit>
        <trans-unit id="dd74baf183e5f1e5dedcd060cf9f4e32f55a6918" translate="yes" xml:space="preserve">
          <source>Directory used for data storage.</source>
          <target state="translated">データの保存に使用されるディレクトリ。</target>
        </trans-unit>
        <trans-unit id="35fa85394d5564697424518371421e70030e00b5" translate="yes" xml:space="preserve">
          <source>Directory used to store session data.</source>
          <target state="translated">セッションデータを保存するために使用されるディレクトリ。</target>
        </trans-unit>
        <trans-unit id="989983b684a5944027ac8c4abaa3a7e7ed7ac0a5" translate="yes" xml:space="preserve">
          <source>Disable Registration of a Servlet or Filter</source>
          <target state="translated">サーブレットやフィルタの登録を無効にする</target>
        </trans-unit>
        <trans-unit id="b61ae655f73587b1150a321c3a91140e8fb351b4" translate="yes" xml:space="preserve">
          <source>Disabled endpoints are removed entirely from the application context. If you want to change only the technologies over which an endpoint is exposed, use the &lt;a href=&quot;#production-ready-endpoints-exposing-endpoints&quot;&gt;&lt;code&gt;include&lt;/code&gt; and &lt;code&gt;exclude&lt;/code&gt; properties&lt;/a&gt; instead.</source>
          <target state="translated">Disabled endpoints are removed entirely from the application context. If you want to change only the technologies over which an endpoint is exposed, use the &lt;a href=&quot;#production-ready-endpoints-exposing-endpoints&quot;&gt; &lt;code&gt;include&lt;/code&gt; and &lt;code&gt;exclude&lt;/code&gt; properties&lt;/a&gt; instead.</target>
        </trans-unit>
        <trans-unit id="78f64477efb074ba394c9fcb501e6b41df31e48b" translate="yes" xml:space="preserve">
          <source>Display name of the application.</source>
          <target state="translated">アプリケーションの表示名。</target>
        </trans-unit>
        <trans-unit id="a9820423ad30bb67c9eb2dac8b9101ef6e26921d" translate="yes" xml:space="preserve">
          <source>Displays HTTP trace information (by default, the last 100 HTTP request-response exchanges). Requires an &lt;code&gt;HttpTraceRepository&lt;/code&gt; bean.</source>
          <target state="translated">Displays HTTP trace information (by default, the last 100 HTTP request-response exchanges). Requires an &lt;code&gt;HttpTraceRepository&lt;/code&gt; bean.</target>
        </trans-unit>
        <trans-unit id="783799d4011b1aa4933c5ca9971ac150d806400d" translate="yes" xml:space="preserve">
          <source>Displays a collated list of all &lt;code&gt;@ConfigurationProperties&lt;/code&gt;.</source>
          <target state="translated">Displays a collated list of all &lt;code&gt;@ConfigurationProperties&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7616cd0ad64136c165239bb79259f0283bf70d96" translate="yes" xml:space="preserve">
          <source>Displays a collated list of all &lt;code&gt;@RequestMapping&lt;/code&gt; paths.</source>
          <target state="translated">Displays a collated list of all &lt;code&gt;@RequestMapping&lt;/code&gt; paths.</target>
        </trans-unit>
        <trans-unit id="344ffddb399987562f6d94d84874283ffc44dde1" translate="yes" xml:space="preserve">
          <source>Displays a complete list of all the Spring beans in your application.</source>
          <target state="translated">アプリケーション内のすべての Spring Bean の完全なリストを表示します。</target>
        </trans-unit>
        <trans-unit id="b05c95bd1cb7866a5ffdefff1a5503276eca63ee" translate="yes" xml:space="preserve">
          <source>Displays arbitrary application info.</source>
          <target state="translated">任意のアプリケーション情報を表示します。</target>
        </trans-unit>
        <trans-unit id="987ea698d2195a700999d83f907a6e449cc2f62e" translate="yes" xml:space="preserve">
          <source>Displays the scheduled tasks in your application.</source>
          <target state="translated">アプリケーションでスケジュールされたタスクを表示します。</target>
        </trans-unit>
        <trans-unit id="4a68c11b585f8c75a48c245ecd268086018e6cc9" translate="yes" xml:space="preserve">
          <source>Do not make assumptions about the project in which your starter is added. If the library you are auto-configuring typically requires other starters, mention them as well. Providing a proper set of &lt;em&gt;default&lt;/em&gt; dependencies may be hard if the number of optional dependencies is high, as you should avoid including dependencies that are unnecessary for a typical usage of the library. In other words, you should not include optional dependencies.</source>
          <target state="translated">Do not make assumptions about the project in which your starter is added. If the library you are auto-configuring typically requires other starters, mention them as well. Providing a proper set of &lt;em&gt;default&lt;/em&gt; dependencies may be hard if the number of optional dependencies is high, as you should avoid including dependencies that are unnecessary for a typical usage of the library. In other words, you should not include optional dependencies.</target>
        </trans-unit>
        <trans-unit id="27a1d22a2fc12b010d9c119da1d1f88d184e6008" translate="yes" xml:space="preserve">
          <source>Do not provide the default value in the description unless it has to be determined at runtime.</source>
          <target state="translated">実行時に決定しなければならない場合を除き、デフォルト値を記述しないでください。</target>
        </trans-unit>
        <trans-unit id="fee4b1d4b175afe84fa111347ad4054b6c67d3d0" translate="yes" xml:space="preserve">
          <source>Do not start the description by &quot;The&quot; or &quot;A&quot;.</source>
          <target state="translated">説明文を「ザ」や「ア」で始めないでください。</target>
        </trans-unit>
        <trans-unit id="0fd9c2389a41ae0942a93a2e39f1e99c8fac898d" translate="yes" xml:space="preserve">
          <source>Do not use the &lt;code&gt;src/main/webapp&lt;/code&gt; directory if your application is packaged as a jar. Although this directory is a common standard, it works &lt;strong&gt;only&lt;/strong&gt; with war packaging, and it is silently ignored by most build tools if you generate a jar.</source>
          <target state="translated">Do not use the &lt;code&gt;src/main/webapp&lt;/code&gt; directory if your application is packaged as a jar. Although this directory is a common standard, it works &lt;strong&gt;only&lt;/strong&gt; with war packaging, and it is silently ignored by most build tools if you generate a jar.</target>
        </trans-unit>
        <trans-unit id="6362292c75570ba8258d25e90926221efc377d8f" translate="yes" xml:space="preserve">
          <source>Dockerfiles are just one way to build docker images. Another way to build docker images is directly from your Maven or Gradle plugin, using buildpacks. If you&amp;rsquo;ve ever used an application platform such as Cloud Foundry or Heroku then you&amp;rsquo;ve probably used a buildpack. Buildpacks are the part of the platform that takes your application and converts it into something that the platform can actually run. For example, Cloud Foundry&amp;rsquo;s Java buildpack will notice that you&amp;rsquo;re pushing a &lt;code&gt;.jar&lt;/code&gt; file and automatically add a relevant JRE.</source>
          <target state="translated">Dockerfiles are just one way to build docker images. Another way to build docker images is directly from your Maven or Gradle plugin, using buildpacks. If you&amp;rsquo;ve ever used an application platform such as Cloud Foundry or Heroku then you&amp;rsquo;ve probably used a buildpack. Buildpacks are the part of the platform that takes your application and converts it into something that the platform can actually run. For example, Cloud Foundry&amp;rsquo;s Java buildpack will notice that you&amp;rsquo;re pushing a &lt;code&gt;.jar&lt;/code&gt; file and automatically add a relevant JRE.</target>
        </trans-unit>
        <trans-unit id="aa580521ae580181d40da1e17e274b75df1b0157" translate="yes" xml:space="preserve">
          <source>Documentation Overview</source>
          <target state="translated">ドキュメントの概要</target>
        </trans-unit>
        <trans-unit id="0b58dce28d76507864509cde036a4ce2e22d6604" translate="yes" xml:space="preserve">
          <source>Documentation overview</source>
          <target state="translated">ドキュメントの概要</target>
        </trans-unit>
        <trans-unit id="12d24b7a16aa26e5b98815c7def4f6ddf1f4d782" translate="yes" xml:space="preserve">
          <source>Doing so effectively overrides the default component scan directive with the side effect of scanning those two packages regardless of the slice that you chose. For instance, a &lt;code&gt;@DataJpaTest&lt;/code&gt; seems to suddenly scan components and user configurations of your application. Again, moving the custom directive to a separate class is a good way to fix this issue.</source>
          <target state="translated">Doing so effectively overrides the default component scan directive with the side effect of scanning those two packages regardless of the slice that you chose. For instance, a &lt;code&gt;@DataJpaTest&lt;/code&gt; seems to suddenly scan components and user configurations of your application. Again, moving the custom directive to a separate class is a good way to fix this issue.</target>
        </trans-unit>
        <trans-unit id="7dc8c02700ea7e29761b21926c963e73d6bdc062" translate="yes" xml:space="preserve">
          <source>Domain for the session cookie.</source>
          <target state="translated">セッションクッキーのドメイン。</target>
        </trans-unit>
        <trans-unit id="0f7c4d77638e8313fe97df2a0d66d894e7c7a9e3" translate="yes" xml:space="preserve">
          <source>Duration between the first and second attempt to deliver a message.</source>
          <target state="translated">メッセージを配信しようとする最初の試みと2回目の試みの間の時間。</target>
        </trans-unit>
        <trans-unit id="734347b515788fcd48bdf195aea19e876fca2860" translate="yes" xml:space="preserve">
          <source>Duration to wait to obtain a channel if the cache size has been reached. If 0, always create a new channel.</source>
          <target state="translated">キャッシュサイズに達した場合にチャネルを取得するまでの待ち時間。0 の場合、常に新しいチャネルを作成します。</target>
        </trans-unit>
        <trans-unit id="0ca70499f20be34e72df967ffb3e1d1aa00eccc9" translate="yes" xml:space="preserve">
          <source>During the application startup, the &lt;code&gt;SpringApplication&lt;/code&gt; and the &lt;code&gt;ApplicationContext&lt;/code&gt; perform many tasks related to the application lifecycle, the beans lifecycle or even processing application events. With &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/javadoc-api/org/springframework/core/metrics/ApplicationStartup.html&quot;&gt;ApplicationStartup`&lt;/a&gt;, Spring Framework &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/core.html#context-functionality-startup&quot;&gt;allows you track the application startup sequence with `StartupStep`s&lt;/a&gt;. This data can be collected for profiling purposes, or just to have a better understanding of an application startup process.</source>
          <target state="translated">During the application startup, the &lt;code&gt;SpringApplication&lt;/code&gt; and the &lt;code&gt;ApplicationContext&lt;/code&gt; perform many tasks related to the application lifecycle, the beans lifecycle or even processing application events. With &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/javadoc-api/org/springframework/core/metrics/ApplicationStartup.html&quot;&gt;ApplicationStartup`&lt;/a&gt;, Spring Framework &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/core.html#context-functionality-startup&quot;&gt;allows you track the application startup sequence with `StartupStep`s&lt;/a&gt;. This data can be collected for profiling purposes, or just to have a better understanding of an application startup process.</target>
        </trans-unit>
        <trans-unit id="caaeabbb953e8a6b7c8e4e482d70976863af3545" translate="yes" xml:space="preserve">
          <source>Dynatrace</source>
          <target state="translated">Dynatrace</target>
        </trans-unit>
        <trans-unit id="60de451d729d353650e2c8d6052a630f59835016" translate="yes" xml:space="preserve">
          <source>Dynatrace authentication token.</source>
          <target state="translated">Dynatrace 認証トークン。</target>
        </trans-unit>
        <trans-unit id="69f78690e43b1dad2a2f993c7ffa2b76315a3ac1" translate="yes" xml:space="preserve">
          <source>Dynatrace registry pushes metrics to the configured URI periodically. To export metrics to &lt;a href=&quot;https://micrometer.io/docs/registry/dynatrace&quot;&gt;Dynatrace&lt;/a&gt;, your API token, device ID, and URI must be provided:</source>
          <target state="translated">Dynatrace registry pushes metrics to the configured URI periodically. To export metrics to &lt;a href=&quot;https://micrometer.io/docs/registry/dynatrace&quot;&gt;Dynatrace&lt;/a&gt;, your API token, device ID, and URI must be provided:</target>
        </trans-unit>
        <trans-unit id="487b40f99019d657055b043a8f6d90554a2c256d" translate="yes" xml:space="preserve">
          <source>Each &amp;ldquo;property&amp;rdquo; is a configuration item that the user specifies with a given value. For example, &lt;code&gt;server.port&lt;/code&gt; and &lt;code&gt;server.address&lt;/code&gt; might be specified in &lt;code&gt;application.properties&lt;/code&gt;, as follows:</source>
          <target state="translated">Each &amp;ldquo;property&amp;rdquo; is a configuration item that the user specifies with a given value. For example, &lt;code&gt;server.port&lt;/code&gt; and &lt;code&gt;server.address&lt;/code&gt; might be specified in &lt;code&gt;application.properties&lt;/code&gt; , as follows:</target>
        </trans-unit>
        <trans-unit id="36bf6c2e2ce5c075ba8c48f645a6d95b8a0553ad" translate="yes" xml:space="preserve">
          <source>Each &lt;code&gt;SpringApplication&lt;/code&gt; registers a shutdown hook with the JVM to ensure that the &lt;code&gt;ApplicationContext&lt;/code&gt; closes gracefully on exit. All the standard Spring lifecycle callbacks (such as the &lt;code&gt;DisposableBean&lt;/code&gt; interface or the &lt;code&gt;@PreDestroy&lt;/code&gt; annotation) can be used.</source>
          <target state="translated">Each &lt;code&gt;SpringApplication&lt;/code&gt; registers a shutdown hook with the JVM to ensure that the &lt;code&gt;ApplicationContext&lt;/code&gt; closes gracefully on exit. All the standard Spring lifecycle callbacks (such as the &lt;code&gt;DisposableBean&lt;/code&gt; interface or the &lt;code&gt;@PreDestroy&lt;/code&gt; annotation) can be used.</target>
        </trans-unit>
        <trans-unit id="cc25d6be65e1ffdf22b073474db506c92190544e" translate="yes" xml:space="preserve">
          <source>Each Spring Boot release is designed and tested against this specific set of third-party dependencies. Overriding versions may cause compatibility issues.</source>
          <target state="translated">各 Spring Boot リリースは、サードパーティの依存関係の特定のセットに対して設計され、テストされています。バージョンをオーバーライドすると互換性の問題が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="fd56968b360cbbd18eb7bf5a53ea83175714b17f" translate="yes" xml:space="preserve">
          <source>Each Spring Boot web application includes an embedded web server. This feature leads to a number of how-to questions, including how to change the embedded server and how to configure the embedded server. This section answers those questions.</source>
          <target state="translated">各Spring Boot Webアプリケーションには、組み込みWebサーバーが含まれています。この機能は、組み込みサーバーの変更方法や組み込みサーバーの設定方法など、多くのハウツーの質問につながります。このセクションでは、それらの質問に答えます。</target>
        </trans-unit>
        <trans-unit id="0882a704cf90eabcf4266e3ec8253de36e62d62c" translate="yes" xml:space="preserve">
          <source>Each has different features and pricing models. In this document, we describe to approach using AWS Elastic Beanstalk.</source>
          <target state="translated">それぞれ機能や価格モデルが異なる。本ドキュメントでは、AWS Elastic Beanstalkを利用したアプローチについて説明します。</target>
        </trans-unit>
        <trans-unit id="024bb994ca488a43758bca9522acbf184a148d9d" translate="yes" xml:space="preserve">
          <source>Each individual endpoint can be &lt;a href=&quot;#production-ready-endpoints-enabling-endpoints&quot;&gt;enabled or disabled&lt;/a&gt; and &lt;a href=&quot;#production-ready-endpoints-exposing-endpoints&quot;&gt;exposed (made remotely accessible) over HTTP or JMX&lt;/a&gt;. An endpoint is considered to be available when it is both enabled and exposed. The built-in endpoints will only be auto-configured when they are available. Most applications choose exposure via HTTP, where the ID of the endpoint along with a prefix of &lt;code&gt;/actuator&lt;/code&gt; is mapped to a URL. For example, by default, the &lt;code&gt;health&lt;/code&gt; endpoint is mapped to &lt;code&gt;/actuator/health&lt;/code&gt;.</source>
          <target state="translated">Each individual endpoint can be &lt;a href=&quot;#production-ready-endpoints-enabling-endpoints&quot;&gt;enabled or disabled&lt;/a&gt; and &lt;a href=&quot;#production-ready-endpoints-exposing-endpoints&quot;&gt;exposed (made remotely accessible) over HTTP or JMX&lt;/a&gt;. An endpoint is considered to be available when it is both enabled and exposed. The built-in endpoints will only be auto-configured when they are available. Most applications choose exposure via HTTP, where the ID of the endpoint along with a prefix of &lt;code&gt;/actuator&lt;/code&gt; is mapped to a URL. For example, by default, the &lt;code&gt;health&lt;/code&gt; endpoint is mapped to &lt;code&gt;/actuator/health&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b53c901ac1fc643e74418e8ee634cb6eb4f1c7d3" translate="yes" xml:space="preserve">
          <source>Each release of Spring Boot is associated with a base version of the Spring Framework. We &lt;strong&gt;highly&lt;/strong&gt; recommend that you not specify its version.</source>
          <target state="translated">Each release of Spring Boot is associated with a base version of the Spring Framework. We &lt;strong&gt;highly&lt;/strong&gt; recommend that you not specify its version.</target>
        </trans-unit>
        <trans-unit id="de57090ba06d3ccfec8a7aaed5c5996c4e879ec0" translate="yes" xml:space="preserve">
          <source>Each release of Spring Boot provides a curated list of dependencies that it supports. In practice, you do not need to provide a version for any of these dependencies in your build configuration, as Spring Boot manages that for you. When you upgrade Spring Boot itself, these dependencies are upgraded as well in a consistent way.</source>
          <target state="translated">Spring Bootの各リリースは、サポートしている依存関係のリストを提供しています。実際には、ビルド構成でこれらの依存関係のバージョンを指定する必要はありません。Spring Boot自体をアップグレードすると、これらの依存関係も一貫した方法でアップグレードされます。</target>
        </trans-unit>
        <trans-unit id="72ff319a57871fd66f629ce4c31fb3f0fe2de487" translate="yes" xml:space="preserve">
          <source>Each root property in the JSON request body can be mapped to a parameter of the endpoint. Consider the following JSON request body:</source>
          <target state="translated">JSON リクエスト・ボディ内の各ルート・プロパティは、エンドポイントのパラメータにマッピングすることができます。次の JSON リクエストボディを考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="1d0a9574eb0ae236dc212103234668c255d327c2" translate="yes" xml:space="preserve">
          <source>Each slice provides one or more &lt;code&gt;@AutoConfigure&amp;hellip;​&lt;/code&gt; annotations that namely defines the auto-configurations that should be included as part of a slice. Additional auto-configurations can be added on a test-by-test basis by creating a custom &lt;code&gt;@AutoConfigure&amp;hellip;​&lt;/code&gt; annotation or by adding &lt;code&gt;@ImportAutoConfiguration&lt;/code&gt; to the test as shown in the following example:</source>
          <target state="translated">各スライスは、一つ以上の提供 &lt;code&gt;@AutoConfigure&amp;hellip;​&lt;/code&gt; 即ちスライスの一部として含まれるべきである自動構成を定義する注釈。追加の自動構成は、カスタムを作成することにより、テスト・バイ・テスト毎に追加することができます &lt;code&gt;@AutoConfigure&amp;hellip;​&lt;/code&gt; 注釈または追加することによって、 &lt;code&gt;@ImportAutoConfiguration&lt;/code&gt; を次の例に示すように、テストに：</target>
        </trans-unit>
        <trans-unit id="74a73a3cecd592b2b3d756b422b350ac01738584" translate="yes" xml:space="preserve">
          <source>Each slice restricts component scan to appropriate components and loads a very restricted set of auto-configuration classes. If you need to exclude one of them, most &lt;code&gt;@&amp;hellip;​Test&lt;/code&gt; annotations provide an &lt;code&gt;excludeAutoConfiguration&lt;/code&gt; attribute. Alternatively, you can use &lt;code&gt;@ImportAutoConfiguration#exclude&lt;/code&gt;.</source>
          <target state="translated">各スライスは、コンポーネントスキャンを適切なコンポーネントに制限し、非常に制限された自動構成クラスのセットをロードします。それらの1つを除外する必要がある場合、ほとんどの &lt;code&gt;@&amp;hellip;​Test&lt;/code&gt; アノテーションは &lt;code&gt;excludeAutoConfiguration&lt;/code&gt; 属性を提供します。または、 &lt;code&gt;@ImportAutoConfiguration#exclude&lt;/code&gt; 使用することもできます。</target>
        </trans-unit>
        <trans-unit id="bc0485aaa58533b1a5f20bdc51c9f820bc56b4d9" translate="yes" xml:space="preserve">
          <source>Each store has specific additional settings. For instance, it is possible to customize the name of the table for the JDBC store, as shown in the following example:</source>
          <target state="translated">各ストアには、特定の追加設定があります。例えば、以下の例のように、JDBCストアのテーブル名をカスタマイズすることができます。</target>
        </trans-unit>
        <trans-unit id="22a6c4bbe10d2eebababb90132eddb253bd98294" translate="yes" xml:space="preserve">
          <source>Each test can use the runner to represent a particular use case. For instance, the sample below invokes a user configuration (&lt;code&gt;UserConfiguration&lt;/code&gt;) and checks that the auto-configuration backs off properly. Invoking &lt;code&gt;run&lt;/code&gt; provides a callback context that can be used with &lt;code&gt;AssertJ&lt;/code&gt;.</source>
          <target state="translated">各テストでは、ランナーを使用して特定のユースケースを表すことができます。たとえば、以下のサンプルはユーザー構成（ &lt;code&gt;UserConfiguration&lt;/code&gt; ）を呼び出し、自動構成が適切にバックオフすることを確認します。 &lt;code&gt;run&lt;/code&gt; を呼び出すと、 &lt;code&gt;AssertJ&lt;/code&gt; で使用できるコールバックコンテキストが提供されます。</target>
        </trans-unit>
        <trans-unit id="94d4c5139b9b3302234022e3af4d0e81221ce67d" translate="yes" xml:space="preserve">
          <source>EhCache 2</source>
          <target state="translated">EhCache 2</target>
        </trans-unit>
        <trans-unit id="27847cec5b4925fa95b8045ccadba6240742336c" translate="yes" xml:space="preserve">
          <source>EhCache 2.x</source>
          <target state="translated">EhCache 2.x</target>
        </trans-unit>
        <trans-unit id="19cd1797656bfb231dd4aa8aaf3bae33135688e7" translate="yes" xml:space="preserve">
          <source>Either way, your starter must reference the core Spring Boot starter (&lt;code&gt;spring-boot-starter&lt;/code&gt;) directly or indirectly (i.e. no need to add it if your starter relies on another starter). If a project is created with only your custom starter, Spring Boot&amp;rsquo;s core features will be honoured by the presence of the core starter.</source>
          <target state="translated">いずれの場合も、スターターはコアのSpring Bootスターター（ &lt;code&gt;spring-boot-starter&lt;/code&gt; ）を直接または間接的に参照する必要があります（つまり、スターターが別のスターターに依存している場合は追加する必要はありません）。カスタムスターターのみを使用してプロジェクトを作成する場合、Spring Bootのコア機能は、コアスターターの存在によって尊重されます。</target>
        </trans-unit>
        <trans-unit id="296abb15d702ea5d538395a2f9337c6040f0c3e3" translate="yes" xml:space="preserve">
          <source>Elastic</source>
          <target state="translated">Elastic</target>
        </trans-unit>
        <trans-unit id="85bb5d88d7f7c89b76d36dfc3c4155f873032a5e" translate="yes" xml:space="preserve">
          <source>Elasticsearch</source>
          <target state="translated">Elasticsearch</target>
        </trans-unit>
        <trans-unit id="1a0bf38af44b3a7e9b1b286fe90b2ca54340cc27" translate="yes" xml:space="preserve">
          <source>Elasticsearch ships &lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/index.html&quot;&gt;two different REST clients&lt;/a&gt; that you can use to query a cluster: the &quot;Low Level&quot; client and the &quot;High Level&quot; client. Spring Boot provides support for the &quot;High Level&quot; client, which ships with &lt;code&gt;org.elasticsearch.client:elasticsearch-rest-high-level-client&lt;/code&gt;.</source>
          <target state="translated">Elasticsearchには、クラスターのクエリに使用できる&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/index.html&quot;&gt;2つの異なるRESTクライアント&lt;/a&gt;が付属しています。「低レベル」クライアントと「高レベル」クライアントです。Spring Bootは、 &lt;code&gt;org.elasticsearch.client:elasticsearch-rest-high-level-client&lt;/code&gt; に同梱されている「HighLevel」クライアントのサポートを提供します。</target>
        </trans-unit>
        <trans-unit id="49fa9fd831096c82ab950bc7aa0a0a7ef8a10998" translate="yes" xml:space="preserve">
          <source>Element</source>
          <target state="translated">Element</target>
        </trans-unit>
        <trans-unit id="54d9b4aa17dfd099f8778a28256680c9e857929f" translate="yes" xml:space="preserve">
          <source>Embedded Containers</source>
          <target state="translated">埋め込みコンテナ</target>
        </trans-unit>
        <trans-unit id="178eb89c65491c47b3bc4b8488261e6587464a00" translate="yes" xml:space="preserve">
          <source>Embedded LDAP password.</source>
          <target state="translated">LDAPパスワードが埋め込まれています。</target>
        </trans-unit>
        <trans-unit id="e663fbe67e960b4816bcf34c3f2dc44badd62c79" translate="yes" xml:space="preserve">
          <source>Embedded LDAP port.</source>
          <target state="translated">LDAPポートを内蔵しています。</target>
        </trans-unit>
        <trans-unit id="3178f04fdf229294a1ca7040e2316b48d504ee1e" translate="yes" xml:space="preserve">
          <source>Embedded LDAP username.</source>
          <target state="translated">埋め込まれたLDAPユーザー名。</target>
        </trans-unit>
        <trans-unit id="e22f22ac3a79abee8b8ff0059ab749a721686450" translate="yes" xml:space="preserve">
          <source>Embedded Tomcat&amp;rsquo;s MBean registry is disabled by default. This minimizes Tomcat&amp;rsquo;s memory footprint. If you want to use Tomcat&amp;rsquo;s MBeans, for example so that they can be used to expose metrics via Micrometer, you must use the &lt;code&gt;server.tomcat.mbeanregistry.enabled&lt;/code&gt; property to do so, as shown in the following example:</source>
          <target state="translated">組み込みTomcatのMBeanレジストリはデフォルトで無効になっています。これにより、Tomcatのメモリフットプリントが最小限に抑えられます。たとえば、TomcatのMBeanを使用して、Micrometerを介してメトリックを公開できるようにする場合は、次の例に示すように、 &lt;code&gt;server.tomcat.mbeanregistry.enabled&lt;/code&gt; プロパティを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="4dd079f31695ccd243bae307e0e60b295513e46c" translate="yes" xml:space="preserve">
          <source>Embedded servlet containers do not directly execute the Servlet 3.0+ &lt;code&gt;javax.servlet.ServletContainerInitializer&lt;/code&gt; interface or Spring&amp;rsquo;s &lt;code&gt;org.springframework.web.WebApplicationInitializer&lt;/code&gt; interface. This is an intentional design decision intended to reduce the risk that third party libraries designed to run inside a war may break Spring Boot applications.</source>
          <target state="translated">組み込みサーブレットコンテナは、サーブレット3.0以降の &lt;code&gt;javax.servlet.ServletContainerInitializer&lt;/code&gt; インターフェースまたはSpringの &lt;code&gt;org.springframework.web.WebApplicationInitializer&lt;/code&gt; インターフェースを直接実行しません。これは、戦争内で実行するように設計されたサードパーティライブラリがSpringBootアプリケーションを破壊するリスクを減らすことを目的とした意図的な設計上の決定です。</target>
        </trans-unit>
        <trans-unit id="0cb526923402db66e067a33d3ef8e2fa94bb8959" translate="yes" xml:space="preserve">
          <source>Enable SSL support.</source>
          <target state="translated">SSL対応を有効にします。</target>
        </trans-unit>
        <trans-unit id="f76eeaf39f51c1c42bcdcbf175a9b01963ee023c" translate="yes" xml:space="preserve">
          <source>Enable access log.</source>
          <target state="translated">アクセスログを有効にします。</target>
        </trans-unit>
        <trans-unit id="773636133688457bddf43b8d629b0d39c59df7c7" translate="yes" xml:space="preserve">
          <source>Enable debug logs.</source>
          <target state="translated">デバッグログを有効にします。</target>
        </trans-unit>
        <trans-unit id="eae8575d4ce36b1c5a96e1be2ae6aec6ed46ed22" translate="yes" xml:space="preserve">
          <source>Enable publishing via a Prometheus Pushgateway.</source>
          <target state="translated">Prometheus Pushgateway経由でのパブリッシングを有効にします。</target>
        </trans-unit>
        <trans-unit id="33c4fd806c5367a866f3c49dac7a746471ace9b3" translate="yes" xml:space="preserve">
          <source>Enable the SpringEL compiler in SpringEL expressions.</source>
          <target state="translated">SpringEL式でSpringELコンパイラを有効にします。</target>
        </trans-unit>
        <trans-unit id="c4d70ab1fa40483a7d264e9eb8a9b693040df173" translate="yes" xml:space="preserve">
          <source>Enable trace logs.</source>
          <target state="translated">トレースログを有効にします。</target>
        </trans-unit>
        <trans-unit id="bbb3d9db9ba3fd9f28efc218582602e274f02054" translate="yes" xml:space="preserve">
          <source>Enabled SSL protocols.</source>
          <target state="translated">SSLプロトコルを有効にしました。</target>
        </trans-unit>
        <trans-unit id="2bdd31b842ab953f10cda73a60afc8fc99eed91e" translate="yes" xml:space="preserve">
          <source>Enabling Kafka Streams means that the application id and bootstrap servers must be set. The former can be configured using &lt;code&gt;spring.kafka.streams.application-id&lt;/code&gt;, defaulting to &lt;code&gt;spring.application.name&lt;/code&gt; if not set. The latter can be set globally or specifically overridden only for streams.</source>
          <target state="translated">Kafka Streamsを有効にすると、アプリケーションIDとブートストラップサーバーを設定する必要があります。前者を用いて構成することができる &lt;code&gt;spring.kafka.streams.application-id&lt;/code&gt; をデフォルト、 &lt;code&gt;spring.application.name&lt;/code&gt; 設定されていない場合。後者は、グローバルに設定することも、ストリームに対してのみ具体的にオーバーライドすることもできます。</target>
        </trans-unit>
        <trans-unit id="a513f5929bfabf6e72cf2ec8756ebd80069f908e" translate="yes" xml:space="preserve">
          <source>Encoding of SQL migrations.</source>
          <target state="translated">SQLマイグレーションのエンコード。</target>
        </trans-unit>
        <trans-unit id="da55a85012e77b4cda620c1cd192a8e11b521f86" translate="yes" xml:space="preserve">
          <source>Endpoint IDs that should be excluded or '*' for all.</source>
          <target state="translated">除外すべきエンドポイントID、またはすべてに'*'を指定します。</target>
        </trans-unit>
        <trans-unit id="34f7599847cc87b0dfbc0434707f867d8fba67b3" translate="yes" xml:space="preserve">
          <source>Endpoint IDs that should be included or '*' for all.</source>
          <target state="translated">含めるべきエンドポイントID、またはすべてに'*'を指定します。</target>
        </trans-unit>
        <trans-unit id="90a3bf8ecb216823110a52e0f6e19dc4f64ebeba" translate="yes" xml:space="preserve">
          <source>Endpoints JMX domain name. Fallback to 'spring.jmx.default-domain' if set.</source>
          <target state="translated">エンドポイント JMXドメイン名。設定されている場合は 'spring.jmx.default-domain' にフォールバックします。</target>
        </trans-unit>
        <trans-unit id="2d506aa947ea19c4d70aff17eb92c7a09e6b2c32" translate="yes" xml:space="preserve">
          <source>Endpoints automatically cache responses to read operations that do not take any parameters. To configure the amount of time for which an endpoint will cache a response, use its &lt;code&gt;cache.time-to-live&lt;/code&gt; property. The following example sets the time-to-live of the &lt;code&gt;beans&lt;/code&gt; endpoint&amp;rsquo;s cache to 10 seconds:</source>
          <target state="translated">エンドポイントは、パラメーターを受け取らない読み取り操作への応答を自動的にキャッシュします。エンドポイントが応答をキャッシュする時間を構成するには、その &lt;code&gt;cache.time-to-live&lt;/code&gt; プロパティを使用します。次の例では、 &lt;code&gt;beans&lt;/code&gt; エンドポイントのキャッシュの存続時間を10秒に設定します。</target>
        </trans-unit>
        <trans-unit id="772bb62721b3b1bea8828a87772aa20a09b7a184" translate="yes" xml:space="preserve">
          <source>Ensuring that all your main endpoints are only available over HTTPS is an important chore for any application. If you use Tomcat as a servlet container, then Spring Boot adds Tomcat&amp;rsquo;s own &lt;code&gt;RemoteIpValve&lt;/code&gt; automatically if it detects some environment settings, and you should be able to rely on the &lt;code&gt;HttpServletRequest&lt;/code&gt; to report whether it is secure or not (even downstream of a proxy server that handles the real SSL termination). The standard behavior is determined by the presence or absence of certain request headers (&lt;code&gt;x-forwarded-for&lt;/code&gt; and &lt;code&gt;x-forwarded-proto&lt;/code&gt;), whose names are conventional, so it should work with most front-end proxies. You can switch on the valve by adding some entries to &lt;code&gt;application.properties&lt;/code&gt;, as shown in the following example:</source>
          <target state="translated">すべてのメインエンドポイントがHTTPS経由でのみ利用可能であることを確認することは、どのアプリケーションにとっても重要な雑用です。Tomcatをサーブレットコンテナとして使用する場合、Spring Bootはいくつかの環境設定を検出するとTomcat独自の &lt;code&gt;RemoteIpValve&lt;/code&gt; を自動的に追加し、 &lt;code&gt;HttpServletRequest&lt;/code&gt; を信頼して安全かどうかを報告できるはずです（実際のSSL終了を処理します）。標準の動作は、名前が従来型である特定のリクエストヘッダー（ &lt;code&gt;x-forwarded-for&lt;/code&gt; および &lt;code&gt;x-forwarded-proto&lt;/code&gt; ）の有無によって決定されるため、ほとんどのフロントエンドプロキシで機能するはずです。 &lt;code&gt;application.properties&lt;/code&gt; にいくつかのエントリを追加することで、バルブをオンに切り替えることができます、次の例に示すように：</target>
        </trans-unit>
        <trans-unit id="a276834f3ddef270e2e2a383aa172cddd5f9d0cc" translate="yes" xml:space="preserve">
          <source>Entry expiration. By default the entries never expire.</source>
          <target state="translated">エントリーの有効期限。デフォルトでは、エントリの有効期限はありません。</target>
        </trans-unit>
        <trans-unit id="aa10f7def669bbb7c61a19654561e6db19234cf8" translate="yes" xml:space="preserve">
          <source>Entry expiration. By default the entries never expire. Note that this value is ultimately converted to seconds.</source>
          <target state="translated">エントリーの有効期限。デフォルトでは、エントリの有効期限はありません。この値は最終的には秒数に変換されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="20588ae8e5c269292d35f9dfffa8f2eb3fd3c259" translate="yes" xml:space="preserve">
          <source>Enum</source>
          <target state="translated">Enum</target>
        </trans-unit>
        <trans-unit id="ec072bba7befaa68af710fe3549eb0491d7badd1" translate="yes" xml:space="preserve">
          <source>Environment Variables</source>
          <target state="translated">環境変数</target>
        </trans-unit>
        <trans-unit id="1fd9ebabc73d44769bebe3309979c884ce26c72d" translate="yes" xml:space="preserve">
          <source>Environment variable</source>
          <target state="translated">環境変数</target>
        </trans-unit>
        <trans-unit id="b120e412cefecf05219b172c4626c24c4049858f" translate="yes" xml:space="preserve">
          <source>Environment variables and system properties often have restrictions that mean some property names cannot be used. To help with this, Spring Boot allows you to encode a block of properties into a single JSON structure.</source>
          <target state="translated">環境変数やシステムプロパティには制限があり、使用できないプロパティ名もあります。これを助けるために、Spring Bootではプロパティのブロックを1つのJSON構造にエンコードすることができます。</target>
        </trans-unit>
        <trans-unit id="29757846179f1e29ecccd4f1df50df997cd4c3f9" translate="yes" xml:space="preserve">
          <source>Environment variables can also be used when binding to object lists. To bind to a &lt;code&gt;List&lt;/code&gt;, the element number should be surrounded with underscores in the variable name.</source>
          <target state="translated">環境変数は、オブジェクトリストにバインドするときにも使用できます。 &lt;code&gt;List&lt;/code&gt; にバインドするには、変数名で要素番号をアンダースコアで囲む必要があります。</target>
        </trans-unit>
        <trans-unit id="a50abd62e9ec4d3f4982969e24ecb94e547e6e71" translate="yes" xml:space="preserve">
          <source>Environment variables do not always make for the easiest API, so Spring Boot automatically extracts them and flattens the data into properties that can be accessed through Spring&amp;rsquo;s &lt;code&gt;Environment&lt;/code&gt; abstraction, as shown in the following example:</source>
          <target state="translated">次の例に示すように、環境変数が常に最も簡単なAPIになるとは限らないため、Spring Bootはそれらを自動的に抽出し、Springの &lt;code&gt;Environment&lt;/code&gt; 抽象化を通じてアクセスできるプロパティにデータをフラット化します。</target>
        </trans-unit>
        <trans-unit id="49be7086260391d1a496c2fcd57933a6be3aaae8" translate="yes" xml:space="preserve">
          <source>Error handling in a war deployment</source>
          <target state="translated">戦争配備におけるエラー処理</target>
        </trans-unit>
        <trans-unit id="ddd2d090e72c81d18ef7c976c8efdb345bf54ad6" translate="yes" xml:space="preserve">
          <source>Error management: Location of the error page (&lt;code&gt;server.error.path&lt;/code&gt;) and so on.</source>
          <target state="translated">エラー管理：エラーページ（ &lt;code&gt;server.error.path&lt;/code&gt; ）の場所など。</target>
        </trans-unit>
        <trans-unit id="6ef3071e87beffdcb8621ec6dc293a99bae72a8a" translate="yes" xml:space="preserve">
          <source>Even if the default &lt;code&gt;EntityManagerFactory&lt;/code&gt; works fine, you need to define a new one, otherwise the presence of the second bean of that type switches off the default. You can use the &lt;code&gt;EntityManagerBuilder&lt;/code&gt; provided by Spring Boot to help you to create one. Alternatively, you can use the &lt;code&gt;LocalContainerEntityManagerFactoryBean&lt;/code&gt; directly from Spring ORM, as shown in the following example:</source>
          <target state="translated">デフォルトの &lt;code&gt;EntityManagerFactory&lt;/code&gt; が正常に機能する場合でも、新しいものを定義する必要があります。そうしないと、そのタイプの2番目のBeanが存在するとデフォルトがオフになります。Spring Bootが提供する &lt;code&gt;EntityManagerBuilder&lt;/code&gt; を使用して、作成に役立てることができます。または、次の例に示すように、SpringORMから直接 &lt;code&gt;LocalContainerEntityManagerFactoryBean&lt;/code&gt; を使用することもできます。</target>
        </trans-unit>
        <trans-unit id="259a026dfefedcc7d7cdaeacabf12ab96ca02faa" translate="yes" xml:space="preserve">
          <source>Even though auto-configuration classes are &lt;code&gt;public&lt;/code&gt;, the only aspect of the class that is considered public API is the name of the class which can be used for disabling the auto-configuration. The actual contents of those classes, such as nested configuration classes or bean methods are for internal use only and we do not recommend using those directly.</source>
          <target state="translated">自動構成クラスは &lt;code&gt;public&lt;/code&gt; ですが、パブリックAPIと見なされるクラスの唯一の側面は、自動構成を無効にするために使用できるクラスの名前です。ネストされた構成クラスやBeanメソッドなど、これらのクラスの実際の内容は内部使用のみであり、直接使用することはお勧めしません。</target>
        </trans-unit>
        <trans-unit id="4e863c9ae41366806c00d49b9f1902687cf67c5a" translate="yes" xml:space="preserve">
          <source>Event listeners should not run potentially lengthy tasks as they execute in the same thread by default. Consider using &lt;a href=&quot;#boot-features-command-line-runner&quot;&gt;application and command-line runners&lt;/a&gt; instead.</source>
          <target state="translated">イベントリスナーは、デフォルトで同じスレッドで実行されるため、潜在的に長いタスクを実行しないでください。代わりに&lt;a href=&quot;#boot-features-command-line-runner&quot;&gt;、アプリケーションランナーとコマンドラインランナーの&lt;/a&gt;使用を検討してください。</target>
        </trans-unit>
        <trans-unit id="0f01ed56a1e32a05e5ef96e4d779f34784af9a96" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Example</target>
        </trans-unit>
        <trans-unit id="41504b7a926fddb8b0d723fece66caaf5671a01f" translate="yes" xml:space="preserve">
          <source>Executable Jars</source>
          <target state="translated">実行可能なジャー</target>
        </trans-unit>
        <trans-unit id="c95d2ae599b396b50f9ebe6f642c01f6e97b46cc" translate="yes" xml:space="preserve">
          <source>Executable jars and Java</source>
          <target state="translated">実行可能なjarとJava</target>
        </trans-unit>
        <trans-unit id="61ca4228141bee8d5408cc0976255c84e34f1e4a" translate="yes" xml:space="preserve">
          <source>Executable jars can be used for production deployment. As they are self-contained, they are also ideally suited for cloud-based deployment.</source>
          <target state="translated">実行可能な jar は、本番環境でのデプロイに使用できます。これらは自己完結型なので、クラウドベースのデプロイにも理想的です。</target>
        </trans-unit>
        <trans-unit id="5fb2467614237c816cc7e729a955154aef4cbc91" translate="yes" xml:space="preserve">
          <source>Execute all Spring Batch jobs in the context on startup.</source>
          <target state="translated">起動時にコンテキスト内のすべてのSpring Batchジョブを実行します。</target>
        </trans-unit>
        <trans-unit id="79220ff4483ca6fb845e3d5a84e3727784570839" translate="yes" xml:space="preserve">
          <source>Expected character encoding the application must use.</source>
          <target state="translated">アプリケーションが使用しなければならない期待される文字エンコーディング。</target>
        </trans-unit>
        <trans-unit id="95f5fe66bd259b64ee55a44d1257ca894ddeac9b" translate="yes" xml:space="preserve">
          <source>Expected time between heartbeats to the consumer coordinator.</source>
          <target state="translated">消費者コーディネーターへの心拍間の期待時間。</target>
        </trans-unit>
        <trans-unit id="37c60f14874c63b50f514c709adfc5d99ec9ade0" translate="yes" xml:space="preserve">
          <source>Explicit build support is provided for the following build tools:</source>
          <target state="translated">以下のビルドツールでは、明示的なビルドサポートが提供されています。</target>
        </trans-unit>
        <trans-unit id="adfcfbbb18919e7bab56974a72c22075805245b4" translate="yes" xml:space="preserve">
          <source>Expose management beans to the JMX domain.</source>
          <target state="translated">管理ビーンをJMXドメインに公開します。</target>
        </trans-unit>
        <trans-unit id="484036c4d472c393b5472ba6835b598c191fe24f" translate="yes" xml:space="preserve">
          <source>Exposes JMX beans over HTTP (when Jolokia is on the classpath, not available for WebFlux). Requires a dependency on &lt;code&gt;jolokia-core&lt;/code&gt;.</source>
          <target state="translated">HTTPを介してJMXBeanを公開します（Jolokiaがクラスパス上にある場合、WebFluxでは使用できません）。 &lt;code&gt;jolokia-core&lt;/code&gt; への依存が必要です。</target>
        </trans-unit>
        <trans-unit id="18b60babfeef455313b4e35ad0f80e3466fd3f96" translate="yes" xml:space="preserve">
          <source>Exposes any key from the &lt;code&gt;Environment&lt;/code&gt; under the &lt;code&gt;info&lt;/code&gt; key.</source>
          <target state="translated">&lt;code&gt;info&lt;/code&gt; キーの下の &lt;code&gt;Environment&lt;/code&gt; から任意のキーを公開します。</target>
        </trans-unit>
        <trans-unit id="a64f3a2e55f81199d3eaff18b8dccf0b0144c2ef" translate="yes" xml:space="preserve">
          <source>Exposes audit events information for the current application. Requires an &lt;code&gt;AuditEventRepository&lt;/code&gt; bean.</source>
          <target state="translated">現在のアプリケーションの監査イベント情報を公開します。 &lt;code&gt;AuditEventRepository&lt;/code&gt; Beanが必要です。</target>
        </trans-unit>
        <trans-unit id="c356a57069a3372667c50c11756a176cc9dcb1c9" translate="yes" xml:space="preserve">
          <source>Exposes available caches.</source>
          <target state="translated">利用可能なキャッシュを公開します。</target>
        </trans-unit>
        <trans-unit id="3565355ce841e4af8d26aa0a8c2df33fb331bc85" translate="yes" xml:space="preserve">
          <source>Exposes build information if a &lt;code&gt;META-INF/build-info.properties&lt;/code&gt; file is available.</source>
          <target state="translated">&lt;code&gt;META-INF/build-info.properties&lt;/code&gt; ファイルが使用可能な場合、ビルド情報を公開します。</target>
        </trans-unit>
        <trans-unit id="f9054bf111463bc2c76025611297a3a2ea9f1845" translate="yes" xml:space="preserve">
          <source>Exposes git information if a &lt;code&gt;git.properties&lt;/code&gt; file is available.</source>
          <target state="translated">&lt;code&gt;git.properties&lt;/code&gt; ファイルが利用可能な場合、git情報を公開します。</target>
        </trans-unit>
        <trans-unit id="fde294e457c645bb28309c1286925451469b2aab" translate="yes" xml:space="preserve">
          <source>Exposes metrics in a format that can be scraped by a Prometheus server. Requires a dependency on &lt;code&gt;micrometer-registry-prometheus&lt;/code&gt;.</source>
          <target state="translated">Prometheusサーバーでスクレイプできる形式でメトリックを公開します。 &lt;code&gt;micrometer-registry-prometheus&lt;/code&gt; への依存が必要です。</target>
        </trans-unit>
        <trans-unit id="d0b7e616fdaddd1b506882f956fa4ddd0a0901b2" translate="yes" xml:space="preserve">
          <source>Exposes properties from Spring&amp;rsquo;s &lt;code&gt;ConfigurableEnvironment&lt;/code&gt;.</source>
          <target state="translated">Springの &lt;code&gt;ConfigurableEnvironment&lt;/code&gt; からプロパティを公開します。</target>
        </trans-unit>
        <trans-unit id="67c89edf897cffcfc7fc7d844355e2b2efbb1996" translate="yes" xml:space="preserve">
          <source>Exposes the &quot;Liveness&quot; application availability state.</source>
          <target state="translated">Liveness」アプリの利用可能状態を公開します。</target>
        </trans-unit>
        <trans-unit id="3bbdc34770c1a19a93eea47b1285f30699d78b1b" translate="yes" xml:space="preserve">
          <source>Exposes the &quot;Readiness&quot; application availability state.</source>
          <target state="translated">アプリケーションの利用可能状態「準備完了」を公開します。</target>
        </trans-unit>
        <trans-unit id="3be998ab916d8a8a8685731198cd59bc1ed3ab9c" translate="yes" xml:space="preserve">
          <source>Exposing management endpoints by using the default HTTP port is a sensible choice for cloud-based deployments. If, however, your application runs inside your own data center, you may prefer to expose endpoints by using a different HTTP port.</source>
          <target state="translated">デフォルトの HTTP ポートを使用して管理エンドポイントを公開することは、クラウドベースの導入では賢明な選択です。しかし、アプリケーションを自社のデータセンター内で実行する場合は、別の HTTP ポートを使用してエンドポイントを公開することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="1a0d71e0685e6b7ae4eb2258aca44b221f6dccfe" translate="yes" xml:space="preserve">
          <source>External Configuration</source>
          <target state="translated">外部設定</target>
        </trans-unit>
        <trans-unit id="356f95cff80343973127f70ef9fb59ba7cbd4b52" translate="yes" xml:space="preserve">
          <source>External Logfile to be accessed. Can be used if the logfile is written by output redirect and not by the logging system itself.</source>
          <target state="translated">アクセスする外部ログファイル。ログファイルがログシステム自体ではなく、出力リダイレクトによって書き込まれる場合に使用できます。</target>
        </trans-unit>
        <trans-unit id="02d1958d53bd921a42f1a13a88547ced00f199cc" translate="yes" xml:space="preserve">
          <source>External properties, logging, and other features of Spring Boot are installed in the context by default only if you use &lt;code&gt;SpringApplication&lt;/code&gt; to create it.</source>
          <target state="translated">Spring Bootの外部プロパティ、ロギング、およびその他の機能は、 &lt;code&gt;SpringApplication&lt;/code&gt; を使用して作成した場合にのみ、デフォルトでコンテキストにインストールされます。</target>
        </trans-unit>
        <trans-unit id="50b7c4b70a207fa9da95a9b429f824925f1afcda" translate="yes" xml:space="preserve">
          <source>Fails if ApplicationPidFileWriter is used but it cannot write the PID file.</source>
          <target state="translated">ApplicationPidFileWriterを使用しているが、PIDファイルの書き込みができない場合は失敗します。</target>
        </trans-unit>
        <trans-unit id="ad565d9d01d0e0bf91fd6a8532f6d81613338901" translate="yes" xml:space="preserve">
          <source>Feature</source>
          <target state="translated">Feature</target>
        </trans-unit>
        <trans-unit id="d1e2bf582203cb69226ff6c6dccdf943b8e26265" translate="yes" xml:space="preserve">
          <source>File descriptor metrics</source>
          <target state="translated">ファイル記述子メトリクス</target>
        </trans-unit>
        <trans-unit id="941a4eab974c7f5ff0cd7aafd71797422278e1a9" translate="yes" xml:space="preserve">
          <source>File encoding.</source>
          <target state="translated">ファイルのエンコーディング。</target>
        </trans-unit>
        <trans-unit id="401034bbeaf84c18aebe83c5247645a424982132" translate="yes" xml:space="preserve">
          <source>File name prefix for SQL migrations.</source>
          <target state="translated">SQL移行のためのファイル名のプレフィックス。</target>
        </trans-unit>
        <trans-unit id="eeafe8bb43af78da1f69a67d458cd355a3bb5346" translate="yes" xml:space="preserve">
          <source>File name prefix for repeatable SQL migrations.</source>
          <target state="translated">再現性のあるSQL移行のためのファイル名の接頭辞。</target>
        </trans-unit>
        <trans-unit id="76791b30a993e59e9639263164bfd9f00e5dc687" translate="yes" xml:space="preserve">
          <source>File name separator for SQL migrations.</source>
          <target state="translated">SQL移行のためのファイル名の区切り文字。</target>
        </trans-unit>
        <trans-unit id="547f5f164d60c1374b1d04e75e8125d23a26dea4" translate="yes" xml:space="preserve">
          <source>File name suffix for SQL migrations.</source>
          <target state="translated">SQL移行のためのファイル名のサフィックス。</target>
        </trans-unit>
        <trans-unit id="c4bb047317cb8ba0e488310569bee37168a008ff" translate="yes" xml:space="preserve">
          <source>File names</source>
          <target state="translated">ファイル名</target>
        </trans-unit>
        <trans-unit id="9ffa06e1aa7308ed20bd685308473660ccf2694b" translate="yes" xml:space="preserve">
          <source>File to which rollback SQL is written when an update is performed.</source>
          <target state="translated">更新時にロールバック SQL を書き込むファイル。</target>
        </trans-unit>
        <trans-unit id="ebd7f1fd9f5abb0d5a9f6dd8ad4067961d5c97bf" translate="yes" xml:space="preserve">
          <source>Files are only monitored when the remote client is running. If you change a file before starting the remote client, it is not pushed to the remote server.</source>
          <target state="translated">ファイルが監視されるのは、リモートクライアントの実行中のみです。リモートクライアントを起動する前にファイルを変更した場合、そのファイルはリモートサーバーにプッシュされません。</target>
        </trans-unit>
        <trans-unit id="cdb40698ba03968d966b7de028980e1a43e4f404" translate="yes" xml:space="preserve">
          <source>Finally, &amp;ldquo;hints&amp;rdquo; are additional information used to assist the user in configuring a given property. For example, when a developer is configuring the &lt;code&gt;spring.jpa.hibernate.ddl-auto&lt;/code&gt; property, a tool can use the hints to offer some auto-completion help for the &lt;code&gt;none&lt;/code&gt;, &lt;code&gt;validate&lt;/code&gt;, &lt;code&gt;update&lt;/code&gt;, &lt;code&gt;create&lt;/code&gt;, and &lt;code&gt;create-drop&lt;/code&gt; values.</source>
          <target state="translated">最後に、「ヒント」は、ユーザーが特定のプロパティを構成するのを支援するために使用される追加情報です。たとえば、開発者が &lt;code&gt;spring.jpa.hibernate.ddl-auto&lt;/code&gt; プロパティを構成している場合、ツールはヒントを使用して、 &lt;code&gt;none&lt;/code&gt; 、 &lt;code&gt;validate&lt;/code&gt; 、 &lt;code&gt;update&lt;/code&gt; 、 &lt;code&gt;create&lt;/code&gt; 、および &lt;code&gt;create-drop&lt;/code&gt; 値のオートコンプリートヘルプを提供できます。</target>
        </trans-unit>
        <trans-unit id="54796cf68b13bab208f3d1c6e04125a50dc4562d" translate="yes" xml:space="preserve">
          <source>Finally, Spring Boot also includes the following starters that can be used if you want to exclude or swap specific technical facets:</source>
          <target state="translated">最後に、Spring Bootには、特定の技術的なファセットを除外したい場合やスワップしたい場合に使用できる以下のスターターも含まれています。</target>
        </trans-unit>
        <trans-unit id="e3437d6eb34c1b82ded5f2d5d8edc4a8f63744b4" translate="yes" xml:space="preserve">
          <source>Finally, access logging for Jetty can also be configured as follows:</source>
          <target state="translated">最後に、Jettyのアクセスログも以下のように設定できます。</target>
        </trans-unit>
        <trans-unit id="2b9f1f56b4e6bc41435b004bb5c4dd62983499ae" translate="yes" xml:space="preserve">
          <source>Finally, if you need access to web-framework-specific functionality, you can implement Servlet or Spring &lt;code&gt;@Controller&lt;/code&gt; and &lt;code&gt;@RestController&lt;/code&gt; endpoints at the cost of them not being available over JMX or when using a different web framework.</source>
          <target state="translated">あなたは、ウェブフレームワーク固有の機能にアクセスする必要がある場合は最後に、あなたは、サーブレットやSpring実装することができます &lt;code&gt;@Controller&lt;/code&gt; と &lt;code&gt;@RestController&lt;/code&gt; それらのコストは、JMXを介して利用可能である、または別のWebフレームワークを使用していないときにエンドポイントを。</target>
        </trans-unit>
        <trans-unit id="5012eb20586613bcbd3554d86839494001c6ccea" translate="yes" xml:space="preserve">
          <source>Finally, only standard Java Bean properties are considered and binding on static properties is not supported.</source>
          <target state="translated">最後に、標準のJava Beanプロパティのみが考慮され、静的プロパティへのバインディングはサポートされていません。</target>
        </trans-unit>
        <trans-unit id="cfee69ddc3ee2f96cba9e22744f5c118ec425106" translate="yes" xml:space="preserve">
          <source>Finally, the &lt;a href=&quot;build-tool-plugins#build-tool-plugins&quot;&gt;Maven and Gradle plugins&lt;/a&gt; can be configured (see the &lt;code&gt;addResources&lt;/code&gt; property) to support running from the command line with reloading of static files directly from source. You can use that with an external css/js compiler process if you are writing that code with higher-level tools.</source>
          <target state="translated">最後に、&lt;a href=&quot;build-tool-plugins#build-tool-plugins&quot;&gt;MavenおよびGradleプラグイン&lt;/a&gt;を構成して（ &lt;code&gt;addResources&lt;/code&gt; プロパティを参照）、ソースから直接静的ファイルをリロードしてコマンドラインから実行できるようにすることができます。高レベルのツールでコードを記述している場合は、外部のcss / jsコンパイラプロセスで使用できます。</target>
        </trans-unit>
        <trans-unit id="3b911548a362b7f9d6b4b8069610dc09e4515d66" translate="yes" xml:space="preserve">
          <source>Finally, we have a few topics for more advanced users:</source>
          <target state="translated">最後に、より上級者向けのトピックをいくつかご紹介します。</target>
        </trans-unit>
        <trans-unit id="4e1c583139b3fe4634039da72ef3fee73b0d9828" translate="yes" xml:space="preserve">
          <source>Finally, you can also create your own &lt;code&gt;RestTemplateBuilder&lt;/code&gt; bean. To prevent switching off the auto-configuration of a &lt;code&gt;RestTemplateBuilder&lt;/code&gt; and prevent any &lt;code&gt;RestTemplateCustomizer&lt;/code&gt; beans from being used, make sure to configure your custom instance with a &lt;code&gt;RestTemplateBuilderConfigurer&lt;/code&gt;. The following example exposes a &lt;code&gt;RestTemplateBuilder&lt;/code&gt; with what Spring Boot would auto-configure, except that custom connect and read timeouts are also specified:</source>
          <target state="translated">最後に、独自の &lt;code&gt;RestTemplateBuilder&lt;/code&gt; Beanを作成することもできます。自動設定オフ切り替えないようにするには &lt;code&gt;RestTemplateBuilder&lt;/code&gt; をし、任意の予防 &lt;code&gt;RestTemplateCustomizer&lt;/code&gt; の使用されてから豆を、とカスタムインスタンスを設定してください &lt;code&gt;RestTemplateBuilderConfigurer&lt;/code&gt; 。次の例では、カスタム接続と読み取りのタイムアウトも指定されていることを除いて、 &lt;code&gt;RestTemplateBuilder&lt;/code&gt; が自動構成するRestTemplateBuilderを公開しています。</target>
        </trans-unit>
        <trans-unit id="490df8447c2401717a3ae55fcbe041a582662acc" translate="yes" xml:space="preserve">
          <source>Finally, you can fall back to the original API and use &lt;code&gt;WebClient.create()&lt;/code&gt;. In that case, no auto-configuration or &lt;code&gt;WebClientCustomizer&lt;/code&gt; is applied.</source>
          <target state="translated">最後に、元のAPIにフォールバックして、 &lt;code&gt;WebClient.create()&lt;/code&gt; を使用できます。その場合、自動構成または &lt;code&gt;WebClientCustomizer&lt;/code&gt; は適用されません。</target>
        </trans-unit>
        <trans-unit id="36ae5f1fb37c7f3bc98ec5d57afa7c455fa60ee6" translate="yes" xml:space="preserve">
          <source>Finally, you can take full control by defining your own &lt;code&gt;NewRelicClientProvider&lt;/code&gt; bean.</source>
          <target state="translated">最後に、独自の &lt;code&gt;NewRelicClientProvider&lt;/code&gt; Beanを定義することで、完全に制御できます。</target>
        </trans-unit>
        <trans-unit id="788d22c601e8a6677809fd015fe8ef715d55305d" translate="yes" xml:space="preserve">
          <source>Find and log</source>
          <target state="translated">検索とログ</target>
        </trans-unit>
        <trans-unit id="abefc7d3f756033721edc094c12b8b1a458c1d87" translate="yes" xml:space="preserve">
          <source>Find and set</source>
          <target state="translated">検索して設定する</target>
        </trans-unit>
        <trans-unit id="f2b5808245c6f3b017b6a3858ac928e283f5d20a" translate="yes" xml:space="preserve">
          <source>Flag to explicitly request a specific type of web application. If not set, auto-detected based on the classpath.</source>
          <target state="translated">特定のタイプのウェブアプリケーションを明示的に要求するためのフラグ。設定されていない場合は、クラスパスに基づいて自動検出されます。</target>
        </trans-unit>
        <trans-unit id="1e565225ad663318ea60debd4f826920030f4477" translate="yes" xml:space="preserve">
          <source>Flagging the dependency as optional in Maven or using the &lt;code&gt;developmentOnly&lt;/code&gt; configuration in Gradle (as shown above) prevents devtools from being transitively applied to other modules that use your project.</source>
          <target state="translated">Mavenで依存関係にオプションのフラグを付けるか、Gradleで &lt;code&gt;developmentOnly&lt;/code&gt; 構成を使用すると（上記のように）、プロジェクトを使用する他のモジュールにdevtoolsが推移的に適用されるのを防ぎます。</target>
        </trans-unit>
        <trans-unit id="06d3cded2386df4963a8e89f632a27636fe9d609" translate="yes" xml:space="preserve">
          <source>Flyway supports SQL and Java &lt;a href=&quot;https://flywaydb.org/documentation/concepts/callbacks&quot;&gt;callbacks&lt;/a&gt;. To use SQL-based callbacks, place the callback scripts in the &lt;code&gt;classpath:db/migration&lt;/code&gt; directory. To use Java-based callbacks, create one or more beans that implement &lt;code&gt;Callback&lt;/code&gt;. Any such beans are automatically registered with &lt;code&gt;Flyway&lt;/code&gt;. They can be ordered by using &lt;code&gt;@Order&lt;/code&gt; or by implementing &lt;code&gt;Ordered&lt;/code&gt;. Beans that implement the deprecated &lt;code&gt;FlywayCallback&lt;/code&gt; interface can also be detected, however they cannot be used alongside &lt;code&gt;Callback&lt;/code&gt; beans.</source>
          <target state="translated">FlywayはSQLおよびJava&lt;a href=&quot;https://flywaydb.org/documentation/concepts/callbacks&quot;&gt;コールバックを&lt;/a&gt;サポートしています。 SQLベースのコールバックを使用するには、コールバックスクリプトを &lt;code&gt;classpath:db/migration&lt;/code&gt; ディレクトリに配置します。 Javaベースのコールバックを使用するには、実装する1つの以上のBeanを作成 &lt;code&gt;Callback&lt;/code&gt; 。このようなBeanはすべて &lt;code&gt;Flyway&lt;/code&gt; に自動的に登録されます。 &lt;code&gt;@Order&lt;/code&gt; を使用するか、 &lt;code&gt;Ordered&lt;/code&gt; を実装することで注文できます。非推奨の &lt;code&gt;FlywayCallback&lt;/code&gt; インターフェースを実装するBeanも検出できますが、 &lt;code&gt;Callback&lt;/code&gt; Beanと一緒に使用することはできません。</target>
        </trans-unit>
        <trans-unit id="33f2c717e97624373c806b7dc0f9504e64790341" translate="yes" xml:space="preserve">
          <source>Folder containing the jar</source>
          <target state="translated">ツボが入っているフォルダ</target>
        </trans-unit>
        <trans-unit id="2a1ab7c6ed1a993f282e20ea7d25374dbc8fa72e" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;Map&lt;/code&gt; properties, you can bind with property values drawn from multiple sources. However, for the same property in multiple sources, the one with the highest priority is used. The following example exposes a &lt;code&gt;Map&amp;lt;String, MyPojo&amp;gt;&lt;/code&gt; from &lt;code&gt;AcmeProperties&lt;/code&gt;:</source>
          <target state="translated">以下のために &lt;code&gt;Map&lt;/code&gt; の特性は、複数のソースから引き出されたプロパティ値をバインドすることができます。ただし、複数のソースの同じプロパティの場合、優先度が最も高いプロパティが使用されます。次の例では &lt;code&gt;Map&amp;lt;String, MyPojo&amp;gt;&lt;/code&gt; からMap &amp;lt;String、MyPojo&amp;gt;を &lt;code&gt;AcmeProperties&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="3d8b8160903821929679dceb4dd6745ae04d5b96" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;application.properties&lt;/code&gt; files a special &lt;code&gt;#---&lt;/code&gt; comment is used to mark the document splits:</source>
          <target state="translated">&lt;code&gt;application.properties&lt;/code&gt; 特殊ファイル &lt;code&gt;#---&lt;/code&gt; コメントには、文書の分割をマークするために使用されます。</target>
        </trans-unit>
        <trans-unit id="91af6c171016d3c487734251dfba813cb312ed04" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;application.yml&lt;/code&gt; files, the standard YAML multi-document syntax is used. Three consecutive hyphens represent the end of one document, and the start of the next.</source>
          <target state="translated">&lt;code&gt;application.yml&lt;/code&gt; ファイル、標準のYAMLマルチドキュメント構文が使用されています。3つの連続するハイフンは、1つのドキュメントの終わりと、次のドキュメントの始まりを表します。</target>
        </trans-unit>
        <trans-unit id="fe9d12746895e099bc44d5333c10618bebab99de" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;boolean&lt;/code&gt; types, start the description with &quot;Whether&quot; or &quot;Enable&quot;.</source>
          <target state="translated">&lt;code&gt;boolean&lt;/code&gt; 型、「どうか」または「有効にする」との記述を開始します。</target>
        </trans-unit>
        <trans-unit id="5e68eba6245faa8f9c24eea8fa218edb04fdfc82" translate="yes" xml:space="preserve">
          <source>For Gradle, use the following declaration:</source>
          <target state="translated">Gradleの場合は、以下の宣言を使用します。</target>
        </trans-unit>
        <trans-unit id="28a5016b2a8bc7245d728b1fd8b31ecba53e31d2" translate="yes" xml:space="preserve">
          <source>For HTTP/2 support, Jetty requires the additional &lt;code&gt;org.eclipse.jetty.http2:http2-server&lt;/code&gt; dependency. Now depending on your deployment, you also need to choose other dependencies:</source>
          <target state="translated">HTTP / 2をサポートするには、Jettyに追加の &lt;code&gt;org.eclipse.jetty.http2:http2-server&lt;/code&gt; 依存関係が必要です。デプロイメントに応じて、他の依存関係も選択する必要があります。</target>
        </trans-unit>
        <trans-unit id="26feff895b88637935004dffc72d392634299168" translate="yes" xml:space="preserve">
          <source>For Jetty, we need to add a connection factory to the existing connector:</source>
          <target state="translated">Jettyの場合は、既存のコネクタに接続工場を追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="67693b72d0e2dc98fe765cbeb95c137bb76e10a9" translate="yes" xml:space="preserve">
          <source>For Maven users, the &lt;code&gt;spring-boot-starter-parent&lt;/code&gt; POM includes a pre-configured plugin to generate a &lt;code&gt;git.properties&lt;/code&gt; file. To use it, add the following declaration to your POM:</source>
          <target state="translated">Mavenユーザーの場合、 &lt;code&gt;spring-boot-starter-parent&lt;/code&gt; POMには、 &lt;code&gt;git.properties&lt;/code&gt; ファイルを生成するための事前構成済みプラグインが含まれています。これを使用するには、次の宣言をPOMに追加します。</target>
        </trans-unit>
        <trans-unit id="50735241363bcf689042b085545e48d46b923f81" translate="yes" xml:space="preserve">
          <source>For Maven, refer to the &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/maven-plugin/reference/htmlsingle/#repackage-layers&quot;&gt;packaging layered jars section&lt;/a&gt; for more details on adding a layer index to the jar. For Gradle, refer to the &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/gradle-plugin/reference/htmlsingle/#packaging-layered-jars&quot;&gt;packaging layered jars section&lt;/a&gt; of the Gradle plugin documentation.</source>
          <target state="translated">Mavenの場合、&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/maven-plugin/reference/htmlsingle/#repackage-layers&quot;&gt;jarに&lt;/a&gt;レイヤーインデックスを追加する方法の詳細については、レイヤー化されたjarのパッケージ化のセクションを参照してください。Gradleについては、Gradleプラグインのドキュメントの&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/gradle-plugin/reference/htmlsingle/#packaging-layered-jars&quot;&gt;パッケージ化レイヤードjarセクション&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="df28e87f3101ca06cc0d9067020d983ac1258d80" translate="yes" xml:space="preserve">
          <source>For Netty, we need to add &lt;code&gt;h2c&lt;/code&gt; as a supported protocol:</source>
          <target state="translated">Nettyの場合、サポートされているプロトコルとして &lt;code&gt;h2c&lt;/code&gt; を追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="898ff7c51674c68186591ad2783351c7352d19ef" translate="yes" xml:space="preserve">
          <source>For OpenID Connect providers that support &lt;a href=&quot;https://openid.net/specs/openid-connect-discovery-1_0.html&quot;&gt;OpenID Connect discovery&lt;/a&gt;, the configuration can be further simplified. The provider needs to be configured with an &lt;code&gt;issuer-uri&lt;/code&gt; which is the URI that the it asserts as its Issuer Identifier. For example, if the &lt;code&gt;issuer-uri&lt;/code&gt; provided is &quot;https://example.com&quot;, then an &lt;code&gt;OpenID Provider Configuration Request&lt;/code&gt; will be made to &quot;https://example.com/.well-known/openid-configuration&quot;. The result is expected to be an &lt;code&gt;OpenID Provider Configuration Response&lt;/code&gt;. The following example shows how an OpenID Connect Provider can be configured with the &lt;code&gt;issuer-uri&lt;/code&gt;:</source>
          <target state="translated">OpenIDConnect&lt;a href=&quot;https://openid.net/specs/openid-connect-discovery-1_0.html&quot;&gt;検出&lt;/a&gt;をサポートするOpenIDConnectプロバイダーの場合、構成をさらに簡素化できます。プロバイダーは、発行者IDとしてアサートするURIである &lt;code&gt;issuer-uri&lt;/code&gt; を使用して構成する必要があります。たとえば、提供された &lt;code&gt;issuer-uri&lt;/code&gt; が「https://example.com」の場合、 &lt;code&gt;OpenID Provider Configuration Request&lt;/code&gt; は「https://example.com/.well-known/openid-configuration」に対して行われます。結果は、 &lt;code&gt;OpenID Provider Configuration Response&lt;/code&gt; になると予想されます。次の例は、OpenID ConnectProviderを &lt;code&gt;issuer-uri&lt;/code&gt; で構成する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="e41f20b67897882a19dedcf7e03e2da66ad3ef90" translate="yes" xml:space="preserve">
          <source>For Tomcat, we need to add an upgrade protocol:</source>
          <target state="translated">Tomcatの場合は、アップグレードプロトコルを追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="725fbec273392cae5ef2607c3b74170c7db974f1" translate="yes" xml:space="preserve">
          <source>For Undertow, we need to enable the HTTP2 option:</source>
          <target state="translated">Undertowでは、HTTP2オプションを有効にする必要があります。</target>
        </trans-unit>
        <trans-unit id="d3c258993b0ecaeb3f974ec3bf3f3706e1d34876" translate="yes" xml:space="preserve">
          <source>For WebFlux application (i.e. of type &lt;code&gt;WebApplicationType.REACTIVE&lt;/code&gt;), the RSocket server will be plugged into the Web Server only if the following properties match:</source>
          <target state="translated">WebFluxアプリケーション（つまり、タイプ &lt;code&gt;WebApplicationType.REACTIVE&lt;/code&gt; ）の場合、RSocketサーバーは、次のプロパティが一致する場合にのみWebサーバーに接続されます。</target>
        </trans-unit>
        <trans-unit id="99f3e96de95bdd6fd21b04988490a36e3174fe24" translate="yes" xml:space="preserve">
          <source>For YAML files, the brackets need to be surrounded by quotes for the keys to be parsed properly.</source>
          <target state="translated">YAMLファイルの場合、キーが適切に解析されるためには、括弧は引用符で囲む必要があります。</target>
        </trans-unit>
        <trans-unit id="27406a223a636b82d8e66c73ea3ad807df7bb954" translate="yes" xml:space="preserve">
          <source>For a &lt;code&gt;@WriteOperation&lt;/code&gt; (HTTP &lt;code&gt;POST&lt;/code&gt;) that uses the request body, the consumes clause of the predicate is &lt;code&gt;application/vnd.spring-boot.actuator.v2+json, application/json&lt;/code&gt;. For all other operations the consumes clause is empty.</source>
          <target state="translated">リクエスト本文を使用する &lt;code&gt;@WriteOperation&lt;/code&gt; （HTTP &lt;code&gt;POST&lt;/code&gt; ）の場合、述語のconsumes句は &lt;code&gt;application/vnd.spring-boot.actuator.v2+json, application/json&lt;/code&gt; です。他のすべての操作では、consumes句は空です。</target>
        </trans-unit>
        <trans-unit id="baaa5c73ba082d25abdc06a63cef6e7ee4241a39" translate="yes" xml:space="preserve">
          <source>For a complete list of the configuration options, see the &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/api/org/springframework/boot/SpringApplication.html&quot;&gt;&lt;code&gt;SpringApplication&lt;/code&gt; Javadoc&lt;/a&gt;.</source>
          <target state="translated">設定オプションの完全なリストについては、&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/api/org/springframework/boot/SpringApplication.html&quot;&gt; &lt;code&gt;SpringApplication&lt;/code&gt; Javadocを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="54e13f37d3d8a49a1b4c64bd35f0313cdf2cd3a1" translate="yes" xml:space="preserve">
          <source>For a complete list of the properties that are applied by the devtools, see &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/env/DevToolsPropertyDefaultsPostProcessor.java&quot;&gt;DevToolsPropertyDefaultsPostProcessor&lt;/a&gt;.</source>
          <target state="translated">デベロッパーツールによって適用されるプロパティの完全なリストについては、を参照してください&lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/env/DevToolsPropertyDefaultsPostProcessor.java&quot;&gt;DevToolsPropertyDefaultsPostProcessorを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="86ad893bd58218fa28e08fd487691cd0beace0ca" translate="yes" xml:space="preserve">
          <source>For a list of additional community contributed starters, see the &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot-starters/README.adoc&quot;&gt;README file&lt;/a&gt; in the &lt;code&gt;spring-boot-starters&lt;/code&gt; module on GitHub.</source>
          <target state="translated">コミュニティが提供するその他のスターターのリストについては、GitHubの &lt;code&gt;spring-boot-starters&lt;/code&gt; モジュールにある&lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot-starters/README.adoc&quot;&gt;READMEファイル&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="e7edb20353ed818189f098c316be47e09841c33e" translate="yes" xml:space="preserve">
          <source>For a more complete picture, you can also subclass &lt;code&gt;DefaultErrorWebExceptionHandler&lt;/code&gt; directly and override specific methods.</source>
          <target state="translated">より完全な図については、 &lt;code&gt;DefaultErrorWebExceptionHandler&lt;/code&gt; を直接サブクラス化し、特定のメソッドをオーバーライドすることもできます。</target>
        </trans-unit>
        <trans-unit id="6726c104b33a4c07955d7e98549566954e8772dc" translate="yes" xml:space="preserve">
          <source>For a pooling &lt;code&gt;DataSource&lt;/code&gt; to be created, we need to be able to verify that a valid &lt;code&gt;Driver&lt;/code&gt; class is available, so we check for that before doing anything. In other words, if you set &lt;code&gt;spring.datasource.driver-class-name=com.mysql.jdbc.Driver&lt;/code&gt;, then that class has to be loadable.</source>
          <target state="translated">プーリングデータ &lt;code&gt;DataSource&lt;/code&gt; を作成するには、有効な &lt;code&gt;Driver&lt;/code&gt; クラスが使用可能であることを確認できる必要があるため、何もする前にそれを確認します。つまり、 &lt;code&gt;spring.datasource.driver-class-name=com.mysql.jdbc.Driver&lt;/code&gt; を設定する場合、そのクラスはロード可能である必要があります。</target>
        </trans-unit>
        <trans-unit id="ba066f4cecbbbf93054258e14ce4bf51ac7732ad" translate="yes" xml:space="preserve">
          <source>For a war file, it would be as follows:</source>
          <target state="translated">戦争ファイルの場合は、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="705c0be561a4c22c4340fa976eab654201b9a6bf" translate="yes" xml:space="preserve">
          <source>For additional &amp;ldquo;production ready&amp;rdquo; features, such as health, auditing, and metric REST or JMX end-points, consider adding &lt;code&gt;spring-boot-actuator&lt;/code&gt;. See &lt;em&gt;&lt;a href=&quot;production-ready-features#production-ready&quot;&gt;production-ready-features.html&lt;/a&gt;&lt;/em&gt; for details.</source>
          <target state="translated">ヘルス、監査、メトリックRESTまたはJMXエンドポイントなどの追加の「本番環境対応」機能については、 &lt;code&gt;spring-boot-actuator&lt;/code&gt; の追加を検討してください。詳細については、&lt;em&gt;&lt;a href=&quot;production-ready-features#production-ready&quot;&gt;production-ready-features.html&lt;/a&gt;&lt;/em&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="bd970f057ffde702429a30aaae37752b5db71431" translate="yes" xml:space="preserve">
          <source>For additional details on Spring Security&amp;rsquo;s testing support, refer to Spring Security&amp;rsquo;s &lt;a href=&quot;https://docs.spring.io/spring-security/site/docs/5.4.1/reference/html5/#test&quot;&gt;reference documentation&lt;/a&gt;).</source>
          <target state="translated">Spring Securityのテストサポートの詳細については、Spring Securityの&lt;a href=&quot;https://docs.spring.io/spring-security/site/docs/5.4.1/reference/html5/#test&quot;&gt;リファレンスドキュメントを&lt;/a&gt;参照してください）。</target>
        </trans-unit>
        <trans-unit id="de5ee265fb95002df80dd4545731838ecfcdcdad" translate="yes" xml:space="preserve">
          <source>For applications that do not use Spring MVC, you can use the &lt;code&gt;ErrorPageRegistrar&lt;/code&gt; interface to directly register &lt;code&gt;ErrorPages&lt;/code&gt;. This abstraction works directly with the underlying embedded servlet container and works even if you do not have a Spring MVC &lt;code&gt;DispatcherServlet&lt;/code&gt;.</source>
          <target state="translated">春のMVCを使用しないアプリケーションの場合は、使用することができます &lt;code&gt;ErrorPageRegistrar&lt;/code&gt; の直接登録するインターフェイスを &lt;code&gt;ErrorPages&lt;/code&gt; 。この抽象化は、基礎となる組み込みサーブレットコンテナと直接連携し、あなたはSpring MVCの持っていない場合でも動作します &lt;code&gt;DispatcherServlet&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8431bd278cfa6444b6e071951ca160e2132060b0" translate="yes" xml:space="preserve">
          <source>For cases where the default value could not be detected, &lt;a href=&quot;#configuration-metadata-additional-metadata&quot;&gt;manual metadata&lt;/a&gt; should be provided. Consider the following example:</source>
          <target state="translated">デフォルト値を検出できなかった場合は、&lt;a href=&quot;#configuration-metadata-additional-metadata&quot;&gt;手動のメタデータ&lt;/a&gt;を提供する必要があります。次の例を考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="15d8906ffcd3f80cef1fbfa87a39459acc26985c" translate="yes" xml:space="preserve">
          <source>For collection-based types, start the description with &quot;Comma-separated list&quot;</source>
          <target state="translated">コレクションベースの型の場合は、&quot;カンマで区切られたリスト &quot;で記述を開始します。</target>
        </trans-unit>
        <trans-unit id="ddd263c83a298ffd0d2c7bcd8a3511d709b2033b" translate="yes" xml:space="preserve">
          <source>For common OAuth2 and OpenID providers, including Google, Github, Facebook, and Okta, we provide a set of provider defaults (&lt;code&gt;google&lt;/code&gt;, &lt;code&gt;github&lt;/code&gt;, &lt;code&gt;facebook&lt;/code&gt;, and &lt;code&gt;okta&lt;/code&gt;, respectively).</source>
          <target state="translated">Google、Github、Facebook、Oktaなどの一般的なOAuth2プロバイダーとOpenIDプロバイダーには、プロバイダーのデフォルトのセット（それぞれ、 &lt;code&gt;google&lt;/code&gt; 、 &lt;code&gt;github&lt;/code&gt; 、 &lt;code&gt;facebook&lt;/code&gt; 、 &lt;code&gt;okta&lt;/code&gt; ）が用意されています。</target>
        </trans-unit>
        <trans-unit id="22b5d1f001e46d3358dfef61d3955b9646266ef9" translate="yes" xml:space="preserve">
          <source>For complete details of Spring Data Cassandra, refer to the &lt;a href=&quot;https://docs.spring.io/spring-data/cassandra/docs/&quot;&gt;reference documentation&lt;/a&gt;.</source>
          <target state="translated">Spring Data Cassandraの詳細については、&lt;a href=&quot;https://docs.spring.io/spring-data/cassandra/docs/&quot;&gt;リファレンスドキュメントを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="0f995a3a3549e40032cf9e9fa4533bbb7537f113" translate="yes" xml:space="preserve">
          <source>For complete details of Spring Data Elasticsearch, refer to the &lt;a href=&quot;https://docs.spring.io/spring-data/elasticsearch/docs/current/reference/html/&quot;&gt;reference documentation&lt;/a&gt;.</source>
          <target state="translated">Spring Data Elasticsearchの詳細については、&lt;a href=&quot;https://docs.spring.io/spring-data/elasticsearch/docs/current/reference/html/&quot;&gt;リファレンスドキュメントを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="676b470f575e86308bc54acfb5fdfcd552dddae6" translate="yes" xml:space="preserve">
          <source>For complete details of Spring Data JDBC, please refer to the &lt;a href=&quot;https://docs.spring.io/spring-data/jdbc/docs/2.1.1/reference/html/&quot;&gt;reference documentation&lt;/a&gt;.</source>
          <target state="translated">Spring Data JDBCの詳細については、&lt;a href=&quot;https://docs.spring.io/spring-data/jdbc/docs/2.1.1/reference/html/&quot;&gt;リファレンスドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="7d705ab5e2bfc1f7408479a462293c7980fa033c" translate="yes" xml:space="preserve">
          <source>For complete details of Spring Data MongoDB, including its rich object mapping technologies, refer to its &lt;a href=&quot;https://spring.io/projects/spring-data-mongodb&quot;&gt;reference documentation&lt;/a&gt;.</source>
          <target state="translated">豊富なオブジェクトマッピングテクノロジーを含むSpringData MongoDBの詳細については、&lt;a href=&quot;https://spring.io/projects/spring-data-mongodb&quot;&gt;リファレンスドキュメントを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="7c5b26c40d59b2482ec25faed7d71f2e0c72dbc0" translate="yes" xml:space="preserve">
          <source>For ephemeral or batch jobs which may not exist long enough to be scraped, &lt;a href=&quot;https://github.com/prometheus/pushgateway&quot;&gt;Prometheus Pushgateway&lt;/a&gt; support can be used to expose their metrics to Prometheus. To enable Prometheus Pushgateway support, add the following dependency to your project:</source>
          <target state="translated">&lt;a href=&quot;https://github.com/prometheus/pushgateway&quot;&gt;スクレイプ&lt;/a&gt;するのに十分な時間存在しない可能性があるエフェメラルジョブまたはバッチジョブの場合、Prometheus Pushgatewayサポートを使用して、メトリックをPrometheusに公開できます。Prometheus Pushgatewayのサポートを有効にするには、プロジェクトに次の依存関係を追加します。</target>
        </trans-unit>
        <trans-unit id="3753beadf672ad7f32026a4d54194b251dbca987" translate="yes" xml:space="preserve">
          <source>For example, Spring Boot&amp;rsquo;s error handling is based on the &amp;ldquo;error page&amp;rdquo; support provided by the Servlet container. This means that, whilst you can test your MVC layer throws and handles exceptions as expected, you cannot directly test that a specific &lt;a href=&quot;#boot-features-error-handling-custom-error-pages&quot;&gt;custom error page&lt;/a&gt; is rendered. If you need to test these lower-level concerns, you can start a fully running server as described in the next section.</source>
          <target state="translated">たとえば、Spring Bootのエラー処理は、サーブレットコンテナによって提供される「エラーページ」サポートに基づいています。つまり、MVCレイヤーのスローをテストして例外を期待どおりに処理することはできますが、特定の&lt;a href=&quot;#boot-features-error-handling-custom-error-pages&quot;&gt;カスタムエラーページ&lt;/a&gt;がレンダリングされることを直接テストすることはできません。これらの下位レベルの懸念事項をテストする必要がある場合は、次のセクションで説明するように、完全に実行されているサーバーを起動できます。</target>
        </trans-unit>
        <trans-unit id="2419584bcbdb54cd3cff655e7bef1e6a056b6919" translate="yes" xml:space="preserve">
          <source>For example, a &lt;code&gt;spring.config.import&lt;/code&gt; value of &lt;code&gt;optional:file:./myconfig.properties&lt;/code&gt; allows your application to start, even if the &lt;code&gt;myconfig.properties&lt;/code&gt; file is missing.</source>
          <target state="translated">たとえば、 &lt;code&gt;optional:file:./myconfig.properties&lt;/code&gt; の &lt;code&gt;spring.config.import&lt;/code&gt; 値を使用すると、 &lt;code&gt;myconfig.properties&lt;/code&gt; ファイルがない場合でもアプリケーションを起動できます。</target>
        </trans-unit>
        <trans-unit id="d59bba110003701e8f2564a49efe6cc1e2a6fdbc" translate="yes" xml:space="preserve">
          <source>For example, assume a &lt;code&gt;MyPojo&lt;/code&gt; object with &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;description&lt;/code&gt; attributes that are &lt;code&gt;null&lt;/code&gt; by default. The following example exposes a list of &lt;code&gt;MyPojo&lt;/code&gt; objects from &lt;code&gt;AcmeProperties&lt;/code&gt;:</source>
          <target state="translated">たとえば、 &lt;code&gt;name&lt;/code&gt; と &lt;code&gt;description&lt;/code&gt; 属性がデフォルトで &lt;code&gt;null&lt;/code&gt; である &lt;code&gt;MyPojo&lt;/code&gt; オブジェクトを想定します。次の例では、 &lt;code&gt;MyPojo&lt;/code&gt; から &lt;code&gt;AcmeProperties&lt;/code&gt; オブジェクトのリストを公開しています。</target>
        </trans-unit>
        <trans-unit id="cb17326f974839cd76e0be85d8cb2615798bc9db" translate="yes" xml:space="preserve">
          <source>For example, assume a new &lt;code&gt;Status&lt;/code&gt; with code &lt;code&gt;FATAL&lt;/code&gt; is being used in one of your &lt;code&gt;HealthIndicator&lt;/code&gt; implementations. To configure the severity order, add the following property to your application properties:</source>
          <target state="translated">たとえば、 &lt;code&gt;HealthIndicator&lt;/code&gt; 実装の1つでコード &lt;code&gt;FATAL&lt;/code&gt; の新しい &lt;code&gt;Status&lt;/code&gt; が使用されていると仮定します。重大度の順序を構成するには、アプリケーションのプロパティに次のプロパティを追加します。</target>
        </trans-unit>
        <trans-unit id="cd4e6339bf21346e5fec1784067f70b161b27a73" translate="yes" xml:space="preserve">
          <source>For example, consider the following declaration:</source>
          <target state="translated">例えば、次のような宣言を考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="cbeb4c594fbd34be24b798af8b817db6a146083f" translate="yes" xml:space="preserve">
          <source>For example, given the following jar:</source>
          <target state="translated">例えば、次のようなジャーを与えられたとします。</target>
        </trans-unit>
        <trans-unit id="53f0d0a7aeea44bfe275d4f959bda144b22374c7" translate="yes" xml:space="preserve">
          <source>For example, given the following volume:</source>
          <target state="translated">例えば、次のようなボリュームを与えられたとします。</target>
        </trans-unit>
        <trans-unit id="c353e8a2064db8293ef6e5d9e5973939c8db350f" translate="yes" xml:space="preserve">
          <source>For example, if you are using Eclipse or STS and you have a project named &lt;code&gt;my-app&lt;/code&gt; that you have deployed to Cloud Foundry, you would do the following:</source>
          <target state="translated">たとえば、EclipseまたはSTSを使用していて、Cloud Foundryにデプロイした &lt;code&gt;my-app&lt;/code&gt; という名前のプロジェクトがある場合は、次のようにします。</target>
        </trans-unit>
        <trans-unit id="d8960d0d9c60aeee972296c4012cdc158d71b9bc" translate="yes" xml:space="preserve">
          <source>For example, if you have a project with the following structure:</source>
          <target state="translated">例えば、以下のような構造のプロジェクトがあるとします。</target>
        </trans-unit>
        <trans-unit id="6918e937a38739e52f74f6d3f1b0ecb0e1ed0127" translate="yes" xml:space="preserve">
          <source>For example, if you have some Redis configuration and some MySQL configuration, you might want to keep those two pieces of configuration separate, while requiring that both those are present in an &lt;code&gt;application.properties&lt;/code&gt; file. This might result in two separate &lt;code&gt;application.properties&lt;/code&gt; files mounted at different locations such as &lt;code&gt;/config/redis/application.properties&lt;/code&gt; and &lt;code&gt;/config/mysql/application.properties&lt;/code&gt;. In such a case, having a wildcard location of &lt;code&gt;config/*/&lt;/code&gt;, will result in both files being processed.</source>
          <target state="translated">たとえば、Redis構成とMySQL構成がある場合、これら2つの構成を別々に保持し、両方が &lt;code&gt;application.properties&lt;/code&gt; ファイルに存在する必要がある場合があります。これにより、/ &lt;code&gt;/config/redis/application.properties&lt;/code&gt; / &lt;code&gt;/config/mysql/application.properties&lt;/code&gt; /application.propertiesや/config/mysql/application.propertiesなどの異なる場所に2つの別々の &lt;code&gt;application.properties&lt;/code&gt; ファイルがマウントされる可能性があります。このような場合、ワイルドカードの場所を &lt;code&gt;config/*/&lt;/code&gt; にすると、両方のファイルが処理されます。</target>
        </trans-unit>
        <trans-unit id="6209ed3b0e8ca824f6bc2bcf1626884952b4fe7f" translate="yes" xml:space="preserve">
          <source>For example, if you want to configure Hibernate&amp;rsquo;s batch size you must use &lt;code&gt;spring.jpa.properties.hibernate.jdbc.batch_size&lt;/code&gt;. If you use other forms, such as &lt;code&gt;batchSize&lt;/code&gt; or &lt;code&gt;batch-size&lt;/code&gt;, Hibernate will not apply the setting.</source>
          <target state="translated">たとえば、Hibernateのバッチサイズを設定する場合は、 &lt;code&gt;spring.jpa.properties.hibernate.jdbc.batch_size&lt;/code&gt; を使用する必要があります。 &lt;code&gt;batchSize&lt;/code&gt; や &lt;code&gt;batch-size&lt;/code&gt; などの他のフォームを使用する場合、Hibernateは設定を適用しません。</target>
        </trans-unit>
        <trans-unit id="0214343dc9cf760ea1f4abfa4a8879142ca2f241" translate="yes" xml:space="preserve">
          <source>For example, if you want to rename the &lt;code&gt;mytag.region&lt;/code&gt; tag to &lt;code&gt;mytag.area&lt;/code&gt; for all meter IDs beginning with &lt;code&gt;com.example&lt;/code&gt;, you can do the following:</source>
          <target state="translated">名前を変更したい場合たとえば、 &lt;code&gt;mytag.region&lt;/code&gt; のにタグを &lt;code&gt;mytag.area&lt;/code&gt; で始まるすべてのメーターIDの &lt;code&gt;com.example&lt;/code&gt; 、次の操作を実行できます。</target>
        </trans-unit>
        <trans-unit id="41f3117b419820d765814a48c746d04214d964d8" translate="yes" xml:space="preserve">
          <source>For example, suppose you have a &lt;code&gt;/etc/config/myconfig&lt;/code&gt; file that you wish to import as yaml. You can import it from your &lt;code&gt;application.properties&lt;/code&gt; using the following:</source>
          <target state="translated">たとえば、 &lt;code&gt;/etc/config/myconfig&lt;/code&gt; としてインポートしたい/ etc / config / myconfigファイルがあるとします。以下を使用して、 &lt;code&gt;application.properties&lt;/code&gt; からインポートできます。</target>
        </trans-unit>
        <trans-unit id="2b061bb4bbf379e879b760f06d989228f35ff682" translate="yes" xml:space="preserve">
          <source>For example, the &lt;code&gt;SPRING_APPLICATION_JSON&lt;/code&gt; property can be supplied on the command line in a UN*X shell as an environment variable:</source>
          <target state="translated">たとえば、 &lt;code&gt;SPRING_APPLICATION_JSON&lt;/code&gt; プロパティは、UN * Xシェルのコマンドラインで環境変数として指定できます。</target>
        </trans-unit>
        <trans-unit id="255f24c32df4be89322c986cf5e1a308438230c3" translate="yes" xml:space="preserve">
          <source>For example, the configuration property &lt;code&gt;my.acme[0].other&lt;/code&gt; would use an environment variable named &lt;code&gt;MY_ACME_0_OTHER&lt;/code&gt;.</source>
          <target state="translated">たとえば、構成プロパティ &lt;code&gt;my.acme[0].other&lt;/code&gt; は、 &lt;code&gt;MY_ACME_0_OTHER&lt;/code&gt; という名前の環境変数を使用します。</target>
        </trans-unit>
        <trans-unit id="049acefb07a29709b2670235937e9d23f6367fb8" translate="yes" xml:space="preserve">
          <source>For example, the configuration property &lt;code&gt;spring.main.log-startup-info&lt;/code&gt; would be an environment variable named &lt;code&gt;SPRING_MAIN_LOGSTARTUPINFO&lt;/code&gt;.</source>
          <target state="translated">たとえば、構成プロパティ &lt;code&gt;spring.main.log-startup-info&lt;/code&gt; は、 &lt;code&gt;SPRING_MAIN_LOGSTARTUPINFO&lt;/code&gt; という名前の環境変数になります。</target>
        </trans-unit>
        <trans-unit id="4723608bd432841f2374ce6ea2856d14f703ad8b" translate="yes" xml:space="preserve">
          <source>For example, the following file has two logical documents:</source>
          <target state="translated">例えば、以下のファイルには2つの論理文書があります。</target>
        </trans-unit>
        <trans-unit id="3ff21d4389165155e8e78ed292e27be718406fb5" translate="yes" xml:space="preserve">
          <source>For example, the following file will set &lt;code&gt;app.description&lt;/code&gt; to &amp;ldquo;MyApp is a Spring Boot application&amp;rdquo;:</source>
          <target state="translated">たとえば、次のファイルは &lt;code&gt;app.description&lt;/code&gt; を「MyAppはSpringBootアプリケーションです」に設定します。</target>
        </trans-unit>
        <trans-unit id="1bc8cc6d9edc99317d904b7bfd3369ad8e4706d6" translate="yes" xml:space="preserve">
          <source>For example, the following specifies that the second document is only active when running on Kubernetes, and only when either the &amp;ldquo;prod&amp;rdquo; or &amp;ldquo;staging&amp;rdquo; profiles are active:</source>
          <target state="translated">たとえば、次の例では、2番目のドキュメントがKubernetesで実行されている場合、および「prod」プロファイルまたは「staging」プロファイルのいずれかがアクティブな場合にのみアクティブになることを指定しています。</target>
        </trans-unit>
        <trans-unit id="39d0cf0cb4a60d21f4413f615f650ec1c40e1256" translate="yes" xml:space="preserve">
          <source>For example, the typical POM dependencies would be as follows:</source>
          <target state="translated">例えば、典型的なPOMの依存関係は以下のようになります。</target>
        </trans-unit>
        <trans-unit id="6b321e5319c5c83c27d7de239d760e5ebeb14785" translate="yes" xml:space="preserve">
          <source>For example, to enable pretty print, set &lt;code&gt;spring.jackson.serialization.indent_output=true&lt;/code&gt;. Note that, thanks to the use of &lt;a href=&quot;spring-boot-features#boot-features-external-config-relaxed-binding&quot;&gt;relaxed binding&lt;/a&gt;, the case of &lt;code&gt;indent_output&lt;/code&gt; does not have to match the case of the corresponding enum constant, which is &lt;code&gt;INDENT_OUTPUT&lt;/code&gt;.</source>
          <target state="translated">たとえば、プリティプリントを有効にするには、 &lt;code&gt;spring.jackson.serialization.indent_output=true&lt;/code&gt; を設定します。使用のおかげで、ことを注意&lt;a href=&quot;spring-boot-features#boot-features-external-config-relaxed-binding&quot;&gt;緩和結合は&lt;/a&gt;、の場合 &lt;code&gt;indent_output&lt;/code&gt; があり、対応するenum定数の場合、一致している必要はありません &lt;code&gt;INDENT_OUTPUT&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="9e395f42f8054812efa66687218258ba9779a493" translate="yes" xml:space="preserve">
          <source>For example, to indicate that JRuby should be flagged for unpacking by using the Maven Plugin, you would add the following configuration:</source>
          <target state="translated">例えば、Mavenプラグインを使用してJRubyをアンパックするためにフラグを立てるべきであることを示すために、以下の設定を追加します。</target>
        </trans-unit>
        <trans-unit id="f937393f3f25b26826a27f96bff60d569b704f4b" translate="yes" xml:space="preserve">
          <source>For example, to map &lt;code&gt;404&lt;/code&gt; to a static HTML file, your directory structure would be as follows:</source>
          <target state="translated">たとえば、 &lt;code&gt;404&lt;/code&gt; を静的HTMLファイルにマップするには、ディレクトリ構造は次のようになります。</target>
        </trans-unit>
        <trans-unit id="0e77c7f26bb729738731a2c263aefa855048e7c6" translate="yes" xml:space="preserve">
          <source>For example, to stop exposing all endpoints over JMX and only expose the &lt;code&gt;health&lt;/code&gt; and &lt;code&gt;info&lt;/code&gt; endpoints, use the following property:</source>
          <target state="translated">たとえば、JMXを介したすべてのエンドポイントの公開を停止し、 &lt;code&gt;health&lt;/code&gt; エンドポイントと &lt;code&gt;info&lt;/code&gt; エンドポイントのみを公開するには、次のプロパティを使用します。</target>
        </trans-unit>
        <trans-unit id="53f34d66c8826ec8a1ebd6eb083c3c77bbe0a1bc" translate="yes" xml:space="preserve">
          <source>For example, we can create a &lt;code&gt;production&lt;/code&gt; group that consists of our &lt;code&gt;proddb&lt;/code&gt; and &lt;code&gt;prodmq&lt;/code&gt; profiles.</source>
          <target state="translated">例えば、我々は作成することができ &lt;code&gt;production&lt;/code&gt; 当社で構成されるグループ &lt;code&gt;proddb&lt;/code&gt; と &lt;code&gt;prodmq&lt;/code&gt; プロファイルを。</target>
        </trans-unit>
        <trans-unit id="f55d56f48341207cb92fc892dfa59c6526f035b5" translate="yes" xml:space="preserve">
          <source>For example, we can export the &quot;Readiness&quot; state of the application to a file so that a Kubernetes &quot;exec Probe&quot; can look at this file:</source>
          <target state="translated">例えば、アプリケーションの「準備状態」をファイルにエクスポートして、Kubernetesの「exec Probe」がこのファイルを見られるようにすることができます。</target>
        </trans-unit>
        <trans-unit id="828a820dddcc27c8c18aa6d9356a90c1042ddb13" translate="yes" xml:space="preserve">
          <source>For example, you can customize your security configuration by adding something like:</source>
          <target state="translated">例えば、次のようなものを追加することで、セキュリティ設定をカスタマイズすることができます。</target>
        </trans-unit>
        <trans-unit id="2eac71425db4abb8b0fffc08c01d26915150a69b" translate="yes" xml:space="preserve">
          <source>For example, you might have the following in your classpath &lt;code&gt;application.properties&lt;/code&gt; file:</source>
          <target state="translated">たとえば、クラスパス &lt;code&gt;application.properties&lt;/code&gt; ファイルに次のものがあるとします。</target>
        </trans-unit>
        <trans-unit id="718a2ab8fa709c48af45a8769f7b7a0ea68f40e5" translate="yes" xml:space="preserve">
          <source>For instance, if you are running your application by using &lt;code&gt;java -jar&lt;/code&gt;, you can enable the &lt;code&gt;debug&lt;/code&gt; property as follows:</source>
          <target state="translated">たとえば、 &lt;code&gt;java -jar&lt;/code&gt; を使用してアプリケーションを実行している場合は、次のように &lt;code&gt;debug&lt;/code&gt; プロパティを有効にできます。</target>
        </trans-unit>
        <trans-unit id="874acdd05c15f14ac41f1c0f771bd3cb2244ac37" translate="yes" xml:space="preserve">
          <source>For instance, if you use the &lt;a href=&quot;https://tomcat.apache.org/tomcat-9.0-doc/jdbc-pool.html#Common_Attributes&quot;&gt;Tomcat connection pool&lt;/a&gt;, you could customize many additional settings, as shown in the following example:</source>
          <target state="translated">たとえば、&lt;a href=&quot;https://tomcat.apache.org/tomcat-9.0-doc/jdbc-pool.html#Common_Attributes&quot;&gt;Tomcat接続プール&lt;/a&gt;を使用する場合、次の例に示すように、多くの追加設定をカスタマイズできます。</target>
        </trans-unit>
        <trans-unit id="e8845a9f7d2b706661a1e88004cde24cfa5fdc16" translate="yes" xml:space="preserve">
          <source>For instance, the following configuration class exposes another factory that uses a specific &lt;code&gt;MessageConverter&lt;/code&gt;:</source>
          <target state="translated">たとえば、次の構成クラスは、特定の &lt;code&gt;MessageConverter&lt;/code&gt; を使用する別のファクトリを公開します。</target>
        </trans-unit>
        <trans-unit id="893198947b0f3d080b8a4297fe3a536ab4921afd" translate="yes" xml:space="preserve">
          <source>For instance, the following configuration creates &lt;code&gt;cache1&lt;/code&gt; and &lt;code&gt;cache2&lt;/code&gt; caches with a maximum size of 500 and a &lt;em&gt;time to live&lt;/em&gt; of 10 minutes</source>
          <target state="translated">たとえば、次の構成では、最大サイズが500、 &lt;code&gt;cache2&lt;/code&gt; &lt;em&gt;時間&lt;/em&gt;が10分の &lt;code&gt;cache1&lt;/code&gt; およびcache2キャッシュが作成されます。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="4f13c54618149c75b3dc4fe944aa0a0cbd9c8d19" translate="yes" xml:space="preserve">
          <source>For instance, the following example exposes another factory that uses a specific &lt;code&gt;MessageConverter&lt;/code&gt;:</source>
          <target state="translated">たとえば、次の例では、特定の &lt;code&gt;MessageConverter&lt;/code&gt; を使用する別のファクトリを公開しています。</target>
        </trans-unit>
        <trans-unit id="760085be05763e027c5a6ab430a066df9d50aba8" translate="yes" xml:space="preserve">
          <source>For instance, the following service triggers the validation of the first argument, making sure its size is between 8 and 10:</source>
          <target state="translated">例えば、以下のサービスは、第一引数のサイズが8から10の間であることを確認して、第一引数の検証をトリガします。</target>
        </trans-unit>
        <trans-unit id="338a10e803c52abbf50c16b5ca4765dcc9e2a1ac" translate="yes" xml:space="preserve">
          <source>For instance, the following settings log access on Tomcat with a &lt;a href=&quot;https://tomcat.apache.org/tomcat-9.0-doc/config/valve.html#Access_Logging&quot;&gt;custom pattern&lt;/a&gt;.</source>
          <target state="translated">たとえば、次の設定は、&lt;a href=&quot;https://tomcat.apache.org/tomcat-9.0-doc/config/valve.html#Access_Logging&quot;&gt;カスタムパターン&lt;/a&gt;を使用してTomcatでのアクセスをログに記録します。</target>
        </trans-unit>
        <trans-unit id="b4cf22deab45da8a11b6287010bc3dff525e5f46" translate="yes" xml:space="preserve">
          <source>For items of the script that need to be customized &lt;em&gt;after&lt;/em&gt; the jar has been written, you can use environment variables or a &lt;a href=&quot;#deployment-script-customization-conf-file&quot;&gt;config file&lt;/a&gt;.</source>
          <target state="translated">jarの作成&lt;em&gt;後&lt;/em&gt;にカスタマイズする必要があるスクリプトの項目については、環境変数または構成&lt;a href=&quot;#deployment-script-customization-conf-file&quot;&gt;ファイルを&lt;/a&gt;使用できます。</target>
        </trans-unit>
        <trans-unit id="536f5873ce2cc8ae405c455e0568e1f61f3b6af8" translate="yes" xml:space="preserve">
          <source>For many applications, all you need is to put the right Spring Data dependencies on your classpath. There is a &lt;code&gt;spring-boot-starter-data-jpa&lt;/code&gt; for JPA, &lt;code&gt;spring-boot-starter-data-mongodb&lt;/code&gt; for Mongodb, etc. To get started, create some repository interfaces to handle your &lt;code&gt;@Entity&lt;/code&gt; objects.</source>
          <target state="translated">多くのアプリケーションでは、必要なのはクラスパスに適切なSpringDataの依存関係を設定することだけです。ある &lt;code&gt;spring-boot-starter-data-jpa&lt;/code&gt; JPAのためには、 &lt;code&gt;spring-boot-starter-data-mongodb&lt;/code&gt; などのMongoDBのためには、開始するには、あなたの処理するためのいくつかのリポジトリのインターフェイス作成 &lt;code&gt;@Entity&lt;/code&gt; のオブジェクトを。</target>
        </trans-unit>
        <trans-unit id="1c7094aed0934b46047c4ac985f9e49106f7d233" translate="yes" xml:space="preserve">
          <source>For more about Spring Data, see the &lt;a href=&quot;https://spring.io/projects/spring-data&quot;&gt;Spring Data project page&lt;/a&gt;.</source>
          <target state="translated">Spring Dataの詳細については、&lt;a href=&quot;https://spring.io/projects/spring-data&quot;&gt;SpringDataプロジェクトのページを参照してください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e5a5b56790f1180783039878890831f233afc067" translate="yes" xml:space="preserve">
          <source>For more about Spring Security, see the &lt;a href=&quot;https://spring.io/projects/spring-security&quot;&gt;Spring Security project page&lt;/a&gt;.</source>
          <target state="translated">Spring Securityの詳細については、&lt;a href=&quot;https://spring.io/projects/spring-security&quot;&gt;SpringSecurityプロジェクトのページを参照してください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f129b93d515df027fda1cdfd0490789dba881eda" translate="yes" xml:space="preserve">
          <source>For more advanced customizations, you can also register an arbitrary number of beans that implement &lt;code&gt;ResourceConfigCustomizer&lt;/code&gt;.</source>
          <target state="translated">より高度なカスタマイズのために、 &lt;code&gt;ResourceConfigCustomizer&lt;/code&gt; を実装する任意の数のBeanを登録することもできます。</target>
        </trans-unit>
        <trans-unit id="e421ce0c69f1ef09b4c9083b29cf51fb674b0c57" translate="yes" xml:space="preserve">
          <source>For more complex mappings, you can also add beans that implement the &lt;code&gt;ErrorViewResolver&lt;/code&gt; interface, as shown in the following example:</source>
          <target state="translated">より複雑なマッピングの場合は、次の例に示すように、 &lt;code&gt;ErrorViewResolver&lt;/code&gt; インターフェースを実装するBeanを追加することもできます。</target>
        </trans-unit>
        <trans-unit id="4e881dfb6398e031bfc63231464109b34d407c8d" translate="yes" xml:space="preserve">
          <source>For more complex queries, you can annotate your method with Spring Data&amp;rsquo;s &lt;a href=&quot;https://docs.spring.io/spring-data/jpa/docs/2.4.1/api/org/springframework/data/jpa/repository/Query.html&quot;&gt;&lt;code&gt;Query&lt;/code&gt;&lt;/a&gt; annotation.</source>
          <target state="translated">より複雑なクエリの場合は、SpringDataの&lt;a href=&quot;https://docs.spring.io/spring-data/jpa/docs/2.4.1/api/org/springframework/data/jpa/repository/Query.html&quot;&gt; &lt;code&gt;Query&lt;/code&gt; &lt;/a&gt;アノテーションを使用してメソッドにアノテーションを付けることができます。</target>
        </trans-unit>
        <trans-unit id="d9aedd4fbd5855d63db3a51a99bf41bf7eb0a635" translate="yes" xml:space="preserve">
          <source>For more complex queries, you can annotate your method with Spring Data&amp;rsquo;s &lt;a href=&quot;https://docs.spring.io/spring-data/r2dbc/docs/1.2.1/api/org/springframework/data/r2dbc/repository/Query.html&quot;&gt;&lt;code&gt;Query&lt;/code&gt;&lt;/a&gt; annotation.</source>
          <target state="translated">より複雑なクエリの場合は、SpringDataの&lt;a href=&quot;https://docs.spring.io/spring-data/r2dbc/docs/1.2.1/api/org/springframework/data/r2dbc/repository/Query.html&quot;&gt; &lt;code&gt;Query&lt;/code&gt; &lt;/a&gt;アノテーションを使用してメソッドにアノテーションを付けることができます。</target>
        </trans-unit>
        <trans-unit id="a750b48c1f1efb6d0bf5643b733f8a313b32adc2" translate="yes" xml:space="preserve">
          <source>For more detail, see the &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/web/server/ManagementServerProperties.java&quot;&gt;&lt;code&gt;ManagementServerProperties&lt;/code&gt;&lt;/a&gt; source code and &amp;ldquo;&lt;a href=&quot;production-ready-features#production-ready-customizing-management-server-port&quot;&gt;production-ready-features.html&lt;/a&gt;&amp;rdquo; in the &amp;ldquo;Production-ready features&amp;rdquo; section.</source>
          <target state="translated">詳細については、&lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/web/server/ManagementServerProperties.java&quot;&gt; &lt;code&gt;ManagementServerProperties&lt;/code&gt; の&lt;/a&gt;ソースコードと「Production-ready &lt;a href=&quot;production-ready-features#production-ready-customizing-management-server-port&quot;&gt;-features.html&lt;/a&gt;」の「Production-readyfeatures」セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="b42daa450e31d23fb775869cb74d8e3ab700a760" translate="yes" xml:space="preserve">
          <source>For more detail, see the following sections:</source>
          <target state="translated">詳細については、以下のセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="f6355a8c38d646ffeb10637f8de4153ba8e9a9ff" translate="yes" xml:space="preserve">
          <source>For more details on concepts behind &lt;code&gt;percentiles-histogram&lt;/code&gt;, &lt;code&gt;percentiles&lt;/code&gt; and &lt;code&gt;sla&lt;/code&gt; refer to the &lt;a href=&quot;https://micrometer.io/docs/concepts#_histograms_and_percentiles&quot;&gt;&quot;Histograms and percentiles&quot; section&lt;/a&gt; of the micrometer documentation.</source>
          <target state="translated">&lt;code&gt;percentiles-histogram&lt;/code&gt; 背後にある概念の詳細（ヒストグラム、 &lt;code&gt;percentiles&lt;/code&gt; 、および &lt;code&gt;sla&lt;/code&gt; については、マイクロメータのドキュメントの&lt;a href=&quot;https://micrometer.io/docs/concepts#_histograms_and_percentiles&quot;&gt;「ヒストグラムとパーセンタイル」セクション&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="dc7270d04124c8e29ec6c9219339dee0d3f077a2" translate="yes" xml:space="preserve">
          <source>For more details on why you should consider this new implementation, please check out the &lt;a href=&quot;https://spring.io/blog/2020/06/30/url-matching-with-pathpattern-in-spring-mvc&quot;&gt;dedicated blog post&lt;/a&gt;.</source>
          <target state="translated">この新しい実装を検討する必要がある理由の詳細については、&lt;a href=&quot;https://spring.io/blog/2020/06/30/url-matching-with-pathpattern-in-spring-mvc&quot;&gt;専用のブログ投稿&lt;/a&gt;を確認してください。</target>
        </trans-unit>
        <trans-unit id="5b8651379adbcbea28f09827cf2c26cf20a20292" translate="yes" xml:space="preserve">
          <source>For more details, see &amp;ldquo;&lt;a href=&quot;spring-boot-features#boot-features-customizing-embedded-containers&quot;&gt;spring-boot-features.html&lt;/a&gt;&amp;rdquo; in the &amp;lsquo;Spring Boot Features&amp;rsquo; section, or the &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java&quot;&gt;&lt;code&gt;ServerProperties&lt;/code&gt;&lt;/a&gt; source code.</source>
          <target state="translated">詳細については、「SpringBootFeatures」セクションの「&lt;a href=&quot;spring-boot-features#boot-features-customizing-embedded-containers&quot;&gt;spring-boot-features.html&lt;/a&gt;」または&lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java&quot;&gt; &lt;code&gt;ServerProperties&lt;/code&gt; &lt;/a&gt;ソースコードを参照してください。</target>
        </trans-unit>
        <trans-unit id="5a59c6f88d0f01240e3d1e9f16f69d6b609e4fad" translate="yes" xml:space="preserve">
          <source>For more details, see the &lt;a href=&quot;using-spring-boot#using-boot-devtools&quot;&gt;using-spring-boot.html&lt;/a&gt; section.</source>
          <target state="translated">詳細については、&lt;a href=&quot;using-spring-boot#using-boot-devtools&quot;&gt;using-spring-boot.html&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="8fee71c4c3a323089190cc345673fbf61d0bd00a" translate="yes" xml:space="preserve">
          <source>For more info about Spring Batch, see the &lt;a href=&quot;https://spring.io/projects/spring-batch&quot;&gt;Spring Batch project page&lt;/a&gt;.</source>
          <target state="translated">Spring Batchの詳細については、&lt;a href=&quot;https://spring.io/projects/spring-batch&quot;&gt;SpringBatchプロジェクトページを参照してください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="934b8562d5dbc5040771b271a8fde18e59b58a12" translate="yes" xml:space="preserve">
          <source>For reactive applications, such as those using Spring WebFlux, &lt;code&gt;ReactiveHealthContributor&lt;/code&gt; provides a non-blocking contract for getting application health. Similar to a traditional &lt;code&gt;HealthContributor&lt;/code&gt;, health information is collected from the content of a &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/ReactiveHealthContributorRegistry.java&quot;&gt;&lt;code&gt;ReactiveHealthContributorRegistry&lt;/code&gt;&lt;/a&gt; (by default all &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/HealthContributor.java&quot;&gt;&lt;code&gt;HealthContributor&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/ReactiveHealthContributor.java&quot;&gt;&lt;code&gt;ReactiveHealthContributor&lt;/code&gt;&lt;/a&gt; instances defined in your &lt;code&gt;ApplicationContext&lt;/code&gt;). Regular &lt;code&gt;HealthContributors&lt;/code&gt; that do not check against a reactive API are executed on the elastic scheduler.</source>
          <target state="translated">Spring WebFluxを使用するアプリケーションなど、 &lt;code&gt;ReactiveHealthContributor&lt;/code&gt; アプリケーションの場合、ReactiveHealthContributorは、アプリケーションの正常性を取得するためのノンブロッキングコントラクトを提供します。従来の &lt;code&gt;HealthContributor&lt;/code&gt; と同様に、ヘルス情報は&lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/ReactiveHealthContributorRegistry.java&quot;&gt; &lt;code&gt;ReactiveHealthContributorRegistry&lt;/code&gt; &lt;/a&gt;のコンテンツから収集されます（デフォルトでは、 &lt;code&gt;ApplicationContext&lt;/code&gt; で定義されているすべての&lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/HealthContributor.java&quot;&gt; &lt;code&gt;HealthContributor&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/ReactiveHealthContributor.java&quot;&gt; &lt;code&gt;ReactiveHealthContributor&lt;/code&gt; &lt;/a&gt;インスタンス）。リアクティブAPIをチェックしない通常の &lt;code&gt;HealthContributors&lt;/code&gt; 、ElasticSchedulerで実行されます。</target>
        </trans-unit>
        <trans-unit id="834506ffcf5c1b11c41a2168aaf5d6bbe5695437" translate="yes" xml:space="preserve">
          <source>For reactive stack applications, the &lt;code&gt;spring-boot-starter-webflux&lt;/code&gt; includes Reactor Netty by including &lt;code&gt;spring-boot-starter-reactor-netty&lt;/code&gt;, but you can use &lt;code&gt;spring-boot-starter-tomcat&lt;/code&gt;, &lt;code&gt;spring-boot-starter-jetty&lt;/code&gt;, or &lt;code&gt;spring-boot-starter-undertow&lt;/code&gt; instead.</source>
          <target state="translated">反応性スタックのアプリケーションでは、 &lt;code&gt;spring-boot-starter-webflux&lt;/code&gt; 含むことにより、原子炉ネッティーを含み &lt;code&gt;spring-boot-starter-reactor-netty&lt;/code&gt; ができますが、使用することができ &lt;code&gt;spring-boot-starter-tomcat&lt;/code&gt; 、 &lt;code&gt;spring-boot-starter-jetty&lt;/code&gt; 、または &lt;code&gt;spring-boot-starter-undertow&lt;/code&gt; 代わりにboot-starter-undertow。</target>
        </trans-unit>
        <trans-unit id="4512f4c9e4d261638ac4ded7e80f46bf6a3df3ce" translate="yes" xml:space="preserve">
          <source>For security purposes, all actuators other than &lt;code&gt;/health&lt;/code&gt; and &lt;code&gt;/info&lt;/code&gt; are disabled by default. The &lt;code&gt;management.endpoints.web.exposure.include&lt;/code&gt; property can be used to enable the actuators.</source>
          <target state="translated">セキュリティ上の理由から、 &lt;code&gt;/health&lt;/code&gt; と &lt;code&gt;/info&lt;/code&gt; 以外のすべてのアクチュエータはデフォルトで無効になっています。 &lt;code&gt;management.endpoints.web.exposure.include&lt;/code&gt; プロパティは、アクチュエータを有効にするために使用することができます。</target>
        </trans-unit>
        <trans-unit id="29bdf3b4a6e3aad5c177c25d3d9db96d63a6dfc0" translate="yes" xml:space="preserve">
          <source>For servlet stack applications, the &lt;code&gt;spring-boot-starter-web&lt;/code&gt; includes Tomcat by including &lt;code&gt;spring-boot-starter-tomcat&lt;/code&gt;, but you can use &lt;code&gt;spring-boot-starter-jetty&lt;/code&gt; or &lt;code&gt;spring-boot-starter-undertow&lt;/code&gt; instead.</source>
          <target state="translated">サーブレットスタックアプリケーションの場合、 &lt;code&gt;spring-boot-starter-web&lt;/code&gt; には &lt;code&gt;spring-boot-starter-tomcat&lt;/code&gt; を含めることでTomcatが含まれますが、代わりに &lt;code&gt;spring-boot-starter-jetty&lt;/code&gt; または &lt;code&gt;spring-boot-starter-undertow&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="686e8a768fe810a0720f38e8bde03454d36f32f8" translate="yes" xml:space="preserve">
          <source>For setting the timeout of the session you can use the &lt;code&gt;spring.session.timeout&lt;/code&gt; property. If that property is not set with a Servlet web appplication, the auto-configuration falls back to the value of &lt;code&gt;server.servlet.session.timeout&lt;/code&gt;.</source>
          <target state="translated">セッションのタイムアウトを設定するには、 &lt;code&gt;spring.session.timeout&lt;/code&gt; プロパティを使用できます。そのプロパティがサーブレットWebアプリケーションで設定されていない場合、自動構成は &lt;code&gt;server.servlet.session.timeout&lt;/code&gt; の値にフォールバックします。</target>
        </trans-unit>
        <trans-unit id="f32415e7c93522c0daeb046ad752b27a1b447829" translate="yes" xml:space="preserve">
          <source>For testing purposes, Spring Boot supports auto-configuration of an in-memory LDAP server from &lt;a href=&quot;https://ldap.com/unboundid-ldap-sdk-for-java/&quot;&gt;UnboundID&lt;/a&gt;. To configure the server, add a dependency to &lt;code&gt;com.unboundid:unboundid-ldapsdk&lt;/code&gt; and declare a &lt;code&gt;spring.ldap.embedded.base-dn&lt;/code&gt; property, as follows:</source>
          <target state="translated">テストの目的で、&lt;a href=&quot;https://ldap.com/unboundid-ldap-sdk-for-java/&quot;&gt;SpringBootはUnboundID&lt;/a&gt;からのインメモリLDAPサーバーの自動構成をサポートします。サーバーを構成するには、次のように、 &lt;code&gt;com.unboundid:unboundid-ldapsdk&lt;/code&gt; に依存関係を追加し、 &lt;code&gt;spring.ldap.embedded.base-dn&lt;/code&gt; プロパティを宣言します。</target>
        </trans-unit>
        <trans-unit id="0413b2a8e5d17f6e444b60cb8bcdf80c0c6a7bd9" translate="yes" xml:space="preserve">
          <source>For the first case, you can import the YAML or Properties file directly using &lt;code&gt;spring.config.import&lt;/code&gt; as described &lt;a href=&quot;#boot-features-external-config-files-importing&quot;&gt;above&lt;/a&gt;. For the second case, you need to use the &lt;code&gt;configtree:&lt;/code&gt; prefix so that Spring Boot knows it needs to expose all the files as properties.</source>
          <target state="translated">最初のケースでは、&lt;a href=&quot;#boot-features-external-config-files-importing&quot;&gt;上記のように、&lt;/a&gt; &lt;code&gt;spring.config.import&lt;/code&gt; を使用してYAMLファイルまたはプロパティファイルを直接インポートできます。2番目のケースでは、 &lt;code&gt;configtree:&lt;/code&gt; プレフィックスを使用して、SpringBootがすべてのファイルをプロパティとして公開する必要があることを認識できるようにする必要があります。</target>
        </trans-unit>
        <trans-unit id="ca9a1b7d0217d42316c24df2e7ee5fd67c7c4c24" translate="yes" xml:space="preserve">
          <source>For the hierarchical naming convention, turn the specified tag keys into part of the metric prefix. Ignored if &quot;graphiteTagsEnabled&quot; is true.</source>
          <target state="translated">階層的な命名規則については、指定されたタグキーをメトリック接頭辞の一部にする。graphiteTagsEnabled &quot;が真の場合は無視される。</target>
        </trans-unit>
        <trans-unit id="502e2f7121788163fe54900fefc903c8eaf9ae08" translate="yes" xml:space="preserve">
          <source>Form-based login or HTTP Basic security (depending on the &lt;code&gt;Accept&lt;/code&gt; header in the request) for the entire application (including actuator endpoints if actuator is on the classpath).</source>
          <target state="translated">アプリケーション全体（アクチュエータがクラスパス上にある場合はアクチュエータエンドポイントを含む）のフォームベースのログインまたはHTTP基本セキュリティ（要求の &lt;code&gt;Accept&lt;/code&gt; ヘッダーに応じて）。</target>
        </trans-unit>
        <trans-unit id="041a5dec481d6bf0724caeaa84bc135d7d9062d4" translate="yes" xml:space="preserve">
          <source>Format</source>
          <target state="translated">Format</target>
        </trans-unit>
        <trans-unit id="6e315580ac437e8758ab6322c8915dced3fb356f" translate="yes" xml:space="preserve">
          <source>Format pattern for access logs.</source>
          <target state="translated">アクセスログのフォーマットパターン。</target>
        </trans-unit>
        <trans-unit id="3d82be8261d17c55c0f5f65bfd5d55c5f46c20a1" translate="yes" xml:space="preserve">
          <source>Format to use when serializing Date objects.</source>
          <target state="translated">Dateオブジェクトをシリアライズする際に使用するフォーマット。</target>
        </trans-unit>
        <trans-unit id="d4711e4f92b6b68d107a5d4cfaa567c359a6c25b" translate="yes" xml:space="preserve">
          <source>Formatting strategy for message codes. For instance, `PREFIX_ERROR_CODE`.</source>
          <target state="translated">メッセージコードのフォーマット戦略。例えば、`PREFIX_ERROR_CODE`のようになります。</target>
        </trans-unit>
        <trans-unit id="f10dc4dd404656e2eaddf1f526b86a8ac45cdbd4" translate="yes" xml:space="preserve">
          <source>FreeMarker</source>
          <target state="translated">FreeMarker</target>
        </trans-unit>
        <trans-unit id="83f82920941b78d6fca544a069bbb8b9679970cc" translate="yes" xml:space="preserve">
          <source>Frequency for refreshing config settings from the LWC service.</source>
          <target state="translated">LWC サービスから設定を更新する頻度。</target>
        </trans-unit>
        <trans-unit id="51d3bcc0cf3f4ab7598b87c0feda588e8a81e264" translate="yes" xml:space="preserve">
          <source>Frequency with which the consumer offsets are auto-committed to Kafka if 'enable.auto.commit' is set to true.</source>
          <target state="translated">enable.auto.commit' が true に設定されている場合、 コンシューマオフセットが自動的に Kafka にコミットされる頻度。</target>
        </trans-unit>
        <trans-unit id="2795b88eb372bbfc09024e901b2d129744369df8" translate="yes" xml:space="preserve">
          <source>Frequency with which to push metrics.</source>
          <target state="translated">メトリクスをプッシュする頻度。</target>
        </trans-unit>
        <trans-unit id="4cc195a5362b748ac025b01f752376b351ecf04d" translate="yes" xml:space="preserve">
          <source>From inside the embedded shell, you can run other commands directly:</source>
          <target state="translated">埋め込まれたシェルの中から、他のコマンドを直接実行することができます。</target>
        </trans-unit>
        <trans-unit id="eac8913af7803ae0abe15518c40709ebdaf82470" translate="yes" xml:space="preserve">
          <source>Fully executable jars work by embedding an extra script at the front of the file. Currently, some tools do not accept this format, so you may not always be able to use this technique. For example, &lt;code&gt;jar -xf&lt;/code&gt; may silently fail to extract a jar or war that has been made fully executable. It is recommended that you make your jar or war fully executable only if you intend to execute it directly, rather than running it with &lt;code&gt;java -jar&lt;/code&gt; or deploying it to a servlet container.</source>
          <target state="translated">完全に実行可能なjarは、ファイルの先頭に追加のスクリプトを埋め込むことで機能します。現在、一部のツールはこの形式を受け入れないため、この手法を常に使用できるとは限りません。たとえば、 &lt;code&gt;jar -xf&lt;/code&gt; は、完全に実行可能にされたjarまたはwarの抽出にサイレントに失敗する場合があります。jarまたはwarを完全に実行可能にするのは、 &lt;code&gt;java -jar&lt;/code&gt; で実行したり、サーブレットコンテナにデプロイしたりするのではなく、直接実行する場合のみにすることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="2cede8df16956488c52c2fbbc3df9c7465dd093e" translate="yes" xml:space="preserve">
          <source>Fully qualified name of the CachingProvider implementation to use to retrieve the JSR-107 compliant cache manager. Needed only if more than one JSR-107 implementation is available on the classpath.</source>
          <target state="translated">JSR-107準拠のキャッシュマネージャを取得するために使用するCachingProvider実装の完全修飾名。クラスパス上で複数のJSR-107実装が利用可能な場合にのみ必要です。</target>
        </trans-unit>
        <trans-unit id="5c1ab3362ff402ac20090efcc615b7885b4da2b5" translate="yes" xml:space="preserve">
          <source>Fully qualified name of the FieldNamingStrategy to use.</source>
          <target state="translated">使用する FieldNamingStrategy の完全修飾名。</target>
        </trans-unit>
        <trans-unit id="9258ff57444cb847e4cb740e3bfc1f5e38d1eef4" translate="yes" xml:space="preserve">
          <source>Fully qualified name of the JDBC driver. Auto-detected based on the URL by default.</source>
          <target state="translated">JDBCドライバの完全修飾名。デフォルトではURLに基づいて自動検出されます。</target>
        </trans-unit>
        <trans-unit id="9407a295fd5b6445cacc1af2f25209ac79a36a9c" translate="yes" xml:space="preserve">
          <source>Fully qualified name of the connection pool implementation to use. By default, it is auto-detected from the classpath.</source>
          <target state="translated">使用する接続プールの実装の完全修飾名。デフォルトでは、クラスパスから自動検出されます。</target>
        </trans-unit>
        <trans-unit id="92d4eec8044b608d56054e9a8dd4fceb1c0aa7c3" translate="yes" xml:space="preserve">
          <source>Fully qualified name of the implicit naming strategy.</source>
          <target state="translated">暗黙の命名戦略の完全修飾名。</target>
        </trans-unit>
        <trans-unit id="e4f9f486aac57857d1ec96b7b7de40211b07df55" translate="yes" xml:space="preserve">
          <source>Fully qualified name of the physical naming strategy.</source>
          <target state="translated">物理的ネーミング戦略の完全修飾名。</target>
        </trans-unit>
        <trans-unit id="536dd5337a0e72cf7753a7582deca02df728c648" translate="yes" xml:space="preserve">
          <source>Furthermore, Spring Boot only sanitizes the sensitive portion of URIs for keys which end with &quot;uri&quot;, &quot;uris&quot;, &quot;address&quot;, or &quot;addresses&quot;. The sensitive portion of the URI is identified using the format &lt;code&gt;&amp;lt;scheme&amp;gt;://&amp;lt;username&amp;gt;:&amp;lt;password&amp;gt;@&amp;lt;host&amp;gt;:&amp;lt;port&amp;gt;/&lt;/code&gt;. For example, for the property &lt;code&gt;myclient.uri=http://user1:password1@localhost:8081&lt;/code&gt;, the resulting sanitized value is &lt;code&gt;http://user1:******@localhost:8081&lt;/code&gt;.</source>
          <target state="translated">さらに、Spring Bootは、「uri」、「uris」、「address」、または「addresses」で終わるキーのURIの機密部分のみをサニタイズします。 URIの機密部分は、 &lt;code&gt;&amp;lt;scheme&amp;gt;://&amp;lt;username&amp;gt;:&amp;lt;password&amp;gt;@&amp;lt;host&amp;gt;:&amp;lt;port&amp;gt;/&lt;/code&gt; の形式を使用して識別されます。たとえば、プロパティ &lt;code&gt;myclient.uri=http://user1:password1@localhost:8081&lt;/code&gt; 場合、結果のサニタイズされた値は &lt;code&gt;http://user1:******@localhost:8081&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="c682ceeacadb68101cf54c1ac499a56f999e34de" translate="yes" xml:space="preserve">
          <source>Ganglia</source>
          <target state="translated">Ganglia</target>
        </trans-unit>
        <trans-unit id="a1785b16f7250a55df96b5f38a082bf0a1e9285e" translate="yes" xml:space="preserve">
          <source>General prefix to be prepended to the page number and page size parameters.</source>
          <target state="translated">ページ番号とページサイズのパラメータの前につける一般的な接頭辞。</target>
        </trans-unit>
        <trans-unit id="27ebb69c07cbd91ca90b8608e44747916e510358" translate="yes" xml:space="preserve">
          <source>Generally, you should first consider using one of the many available configuration keys and customize your web server by adding new entries in your &lt;code&gt;application.properties&lt;/code&gt; (or &lt;code&gt;application.yml&lt;/code&gt;, or environment, etc. see &amp;ldquo;&lt;a href=&quot;#howto-discover-build-in-options-for-external-properties&quot;&gt;Discover Built-in Options for External Properties&lt;/a&gt;&amp;rdquo;). The &lt;code&gt;server.*&lt;/code&gt; namespace is quite useful here, and it includes namespaces like &lt;code&gt;server.tomcat.*&lt;/code&gt;, &lt;code&gt;server.jetty.*&lt;/code&gt; and others, for server-specific features. See the list of &lt;a href=&quot;appendix-application-properties#common-application-properties&quot;&gt;appendix-application-properties.html&lt;/a&gt;.</source>
          <target state="translated">一般的に、あなたが最初に多くの利用可能な設定キーのいずれかを使用することを検討すべきであるとあなたに新しいエントリを追加することによって、Webサーバーをカスタマイズし &lt;code&gt;application.properties&lt;/code&gt; （または &lt;code&gt;application.yml&lt;/code&gt; 参照など、または環境「&lt;a href=&quot;#howto-discover-build-in-options-for-external-properties&quot;&gt;出会う内蔵外付けのプロパティのオプション&lt;/a&gt;」 ）。 &lt;code&gt;server.*&lt;/code&gt; 名前空間がここには非常に有用であり、それはのような名前空間が含ま &lt;code&gt;server.tomcat.*&lt;/code&gt; 、 &lt;code&gt;server.jetty.*&lt;/code&gt; など、サーバ固有の機能のために。&lt;a href=&quot;appendix-application-properties#common-application-properties&quot;&gt;appendix-application-properties.html&lt;/a&gt;のリストを参照してください。</target>
        </trans-unit>
        <trans-unit id="7dc74c36a3dce8d11ad418dccfe3db72770de4a5" translate="yes" xml:space="preserve">
          <source>Generate build information</source>
          <target state="translated">ビルド情報の生成</target>
        </trans-unit>
        <trans-unit id="41d856bb1bf5e49f688f21b2fb079d709efb677b" translate="yes" xml:space="preserve">
          <source>Generate git information</source>
          <target state="translated">git 情報を生成する</target>
        </trans-unit>
        <trans-unit id="ff7613e54fc90271b8a71da3dfd9a50e5acd96c2" translate="yes" xml:space="preserve">
          <source>Generic</source>
          <target state="translated">Generic</target>
        </trans-unit>
        <trans-unit id="21eba1ca2b855114aadc61159793503c153e8c71" translate="yes" xml:space="preserve">
          <source>Generic caching is used if the context defines &lt;em&gt;at least&lt;/em&gt; one &lt;code&gt;org.springframework.cache.Cache&lt;/code&gt; bean. A &lt;code&gt;CacheManager&lt;/code&gt; wrapping all beans of that type is created.</source>
          <target state="translated">コンテキスト&lt;em&gt;が少なくとも&lt;/em&gt;1つの &lt;code&gt;org.springframework.cache.Cache&lt;/code&gt; Beanを定義&lt;em&gt;している&lt;/em&gt;場合は、汎用キャッシュが使用されます。そのタイプのすべてのBeanをラップする &lt;code&gt;CacheManager&lt;/code&gt; が作成されます。</target>
        </trans-unit>
        <trans-unit id="370c3d934a07f2b19607dc6f1b6c7fe877e03333" translate="yes" xml:space="preserve">
          <source>Generic type arguments, varargs and array elements nullability are not yet supported. See &lt;a href=&quot;https://jira.spring.io/browse/SPR-15942&quot;&gt;SPR-15942&lt;/a&gt; for up-to-date information. Also be aware that Spring Boot&amp;rsquo;s own API is &lt;a href=&quot;https://github.com/spring-projects/spring-boot/issues/10712&quot;&gt;not yet annotated&lt;/a&gt;.</source>
          <target state="translated">ジェネリック型引数、可変引数、および配列要素のnull可能性はまだサポートされていません。最新情報については、&lt;a href=&quot;https://jira.spring.io/browse/SPR-15942&quot;&gt;SPR-15942&lt;/a&gt;を参照してください。また、SpringBoot自体のAPIには&lt;a href=&quot;https://github.com/spring-projects/spring-boot/issues/10712&quot;&gt;まだ注釈が付けられていない&lt;/a&gt;ことに注意してください。</target>
        </trans-unit>
        <trans-unit id="010b85ad56b34c34c7c2a3b2436c740e30428ed5" translate="yes" xml:space="preserve">
          <source>Getting Started</source>
          <target state="translated">はじめに</target>
        </trans-unit>
        <trans-unit id="76e7a3a3f9c225fe820ba7e9cff10ea2a73b79a1" translate="yes" xml:space="preserve">
          <source>Getting started</source>
          <target state="translated">始めるには</target>
        </trans-unit>
        <trans-unit id="0a61558d2e5a820fa0f204f6118dff0b5b67e7d5" translate="yes" xml:space="preserve">
          <source>Global prefix to separate metrics originating from this app's white box instrumentation from those originating from other Wavefront integrations when viewed in the Wavefront UI.</source>
          <target state="translated">Wavefront UIで見たときに、このアプリのホワイトボックスのインストルメンテーションに由来するメトリクスと、他のWavefrontの統合に由来するメトリクスを分離するためのグローバルな接頭辞。</target>
        </trans-unit>
        <trans-unit id="4ecfa50456b912af78aca11e5156571cfddaee02" translate="yes" xml:space="preserve">
          <source>Google Cloud has several options that can be used to launch Spring Boot applications. The easiest to get started with is probably App Engine, but you could also find ways to run Spring Boot in a container with Container Engine or on a virtual machine with Compute Engine.</source>
          <target state="translated">Google Cloudには、Spring Bootアプリケーションを起動するために使用できるいくつかのオプションがあります。最も簡単に始められるのはApp Engineでしょうが、Container Engineを使ってコンテナ内でSpring Bootを実行したり、Compute Engineを使って仮想マシン上で実行する方法もあります。</target>
        </trans-unit>
        <trans-unit id="3d5141298af5293b158f142b93cc79303bac8b47" translate="yes" xml:space="preserve">
          <source>Grabs</source>
          <target state="translated">Grabs</target>
        </trans-unit>
        <trans-unit id="8ef85cc7a7c6444cb46bd7b35e8249c9ee990a3c" translate="yes" xml:space="preserve">
          <source>Graceful shutdown</source>
          <target state="translated">優雅なシャットダウン</target>
        </trans-unit>
        <trans-unit id="17503e06e0263d6fe9f105fa52b0724bb2946582" translate="yes" xml:space="preserve">
          <source>Graceful shutdown is supported with all four embedded web servers (Jetty, Reactor Netty, Tomcat, and Undertow) and with both reactive and Servlet-based web applications. It occurs as part of closing the application context and is performed in the earliest phase of stopping &lt;code&gt;SmartLifecycle&lt;/code&gt; beans. This stop processing uses a timeout which provides a grace period during which existing requests will be allowed to complete but no new requests will be permitted. The exact way in which new requests are not permitted varies depending on the web server that is being used. Jetty, Reactor Netty, and Tomcat will stop accepting requests at the network layer. Undertow will accept requests but respond immediately with a service unavailable (503) response.</source>
          <target state="translated">グレースフルシャットダウンは、4つの組み込みWebサーバー（Jetty、Reactor Netty、Tomcat、Undertow）のすべてと、リアクティブWebアプリケーションとサーブレットベースのWebアプリケーションの両方でサポートされています。これは、アプリケーションコンテキストを閉じる一部として発生し、 &lt;code&gt;SmartLifecycle&lt;/code&gt; Beanを停止する最も早い段階で実行されます。この停止処理は、既存の要求の完了は許可されるが、新しい要求は許可されない猶予期間を提供するタイムアウトを使用します。新しいリクエストが許可されない正確な方法は、使用されているWebサーバーによって異なります。 Jetty、Reactor Netty、Tomcatは、ネットワーク層でのリクエストの受け入れを停止します。 Undertowはリクエストを受け入れますが、サービスを利用できない（503）応答ですぐに応答します。</target>
        </trans-unit>
        <trans-unit id="04c39b803c0e06f05528c75e5360282591dad32f" translate="yes" xml:space="preserve">
          <source>Graceful shutdown with Tomcat requires Tomcat 9.0.33 or later.</source>
          <target state="translated">Tomcatでのグレースフルシャットダウンには、Tomcat 9.0.33以降が必要です。</target>
        </trans-unit>
        <trans-unit id="f426be61bd7a1e2a2ad7e39cb0258e09623e3b4d" translate="yes" xml:space="preserve">
          <source>Gradle</source>
          <target state="translated">Gradle</target>
        </trans-unit>
        <trans-unit id="c7ed092fe19e42fc8e269a29bb077a8bea606094" translate="yes" xml:space="preserve">
          <source>Gradle Shadow Plugin</source>
          <target state="translated">Gradle Shadowプラグイン</target>
        </trans-unit>
        <trans-unit id="9e3a9c070da0e9a9e0358c2b1a1f4cf85bac7c60" translate="yes" xml:space="preserve">
          <source>Gradle Wrapper</source>
          <target state="translated">グラドルラッパー</target>
        </trans-unit>
        <trans-unit id="d6b319e66557a860d4eeb5bae35ad082eca7b2e1" translate="yes" xml:space="preserve">
          <source>Gradle default</source>
          <target state="translated">グラドルデフォルト</target>
        </trans-unit>
        <trans-unit id="1751826bb4bc66e965fbbaff32990ec061aca168" translate="yes" xml:space="preserve">
          <source>Gradle users can achieve the same result by using the &lt;a href=&quot;https://plugins.gradle.org/plugin/com.gorylenko.gradle-git-properties&quot;&gt;&lt;code&gt;gradle-git-properties&lt;/code&gt;&lt;/a&gt; plugin, as shown in the following example:</source>
          <target state="translated">Gradleユーザーは、次の例に示すように、&lt;a href=&quot;https://plugins.gradle.org/plugin/com.gorylenko.gradle-git-properties&quot;&gt; &lt;code&gt;gradle-git-properties&lt;/code&gt; &lt;/a&gt;プラグインを使用して同じ結果を得ることができます。</target>
        </trans-unit>
        <trans-unit id="8563bcec902c464212ae894fc142cba2c3961dc7" translate="yes" xml:space="preserve">
          <source>Gradle&amp;rsquo;s &lt;code&gt;expand&lt;/code&gt; method uses Groovy&amp;rsquo;s &lt;code&gt;SimpleTemplateEngine&lt;/code&gt;, which transforms &lt;code&gt;${..}&lt;/code&gt; tokens. The &lt;code&gt;${..}&lt;/code&gt; style conflicts with Spring&amp;rsquo;s own property placeholder mechanism. To use Spring property placeholders together with automatic expansion, escape the Spring property placeholders as follows: &lt;code&gt;\${..}&lt;/code&gt;.</source>
          <target state="translated">Gradleの &lt;code&gt;expand&lt;/code&gt; メソッドは、 &lt;code&gt;${..}&lt;/code&gt; トークンを変換するGroovyの &lt;code&gt;SimpleTemplateEngine&lt;/code&gt; を使用します。 &lt;code&gt;${..}&lt;/code&gt; 春の独自のプロパティプレースホルダ機構を備えたスタイルの競合。Springプロパティのプレースホルダーを自動拡張と一緒に使用するには、次のようにSpringプロパティのプレースホルダーをエスケープします： &lt;code&gt;\${..}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="95c949a818cfe42989a077c56b3db44d8dee4417" translate="yes" xml:space="preserve">
          <source>Granted roles for the default user name.</source>
          <target state="translated">デフォルトのユーザー名に付与されたロール。</target>
        </trans-unit>
        <trans-unit id="220c98deb1482e5b5361b123b929ee8e4ac1e18d" translate="yes" xml:space="preserve">
          <source>Graphite</source>
          <target state="translated">Graphite</target>
        </trans-unit>
        <trans-unit id="933bf21afdd55a0d2283845fed0e7bbdd1f5db49" translate="yes" xml:space="preserve">
          <source>Green</source>
          <target state="translated">Green</target>
        </trans-unit>
        <trans-unit id="9dd7abf77efe05e6912666fdd664a407ed8c6ea5" translate="yes" xml:space="preserve">
          <source>GridFS bucket name.</source>
          <target state="translated">GridFSのバケット名。</target>
        </trans-unit>
        <trans-unit id="c56fa37167ea4ac415683d3c2935bcca9ae967d6" translate="yes" xml:space="preserve">
          <source>GridFS database name.</source>
          <target state="translated">GridFSのデータベース名。</target>
        </trans-unit>
        <trans-unit id="9c53c00c11322199b3e81911676df4641d902d7b" translate="yes" xml:space="preserve">
          <source>Groovy</source>
          <target state="translated">Groovy</target>
        </trans-unit>
        <trans-unit id="48e5ed679641de622aba19fc95bd4a176714e56e" translate="yes" xml:space="preserve">
          <source>Group ID</source>
          <target state="translated">グループID</target>
        </trans-unit>
        <trans-unit id="3e11fc1f1d0f2e351fc8d269cb4db31729b98e90" translate="yes" xml:space="preserve">
          <source>Group for exported metrics. Used to specify custom device group name in the Dynatrace UI.</source>
          <target state="translated">エクスポートされたメトリクスのグループ。Dynatrace UIでカスタムデバイスグループ名を指定するために使用します。</target>
        </trans-unit>
        <trans-unit id="eaf193e27d29a1e1d445beff6eba0c999c9b36f2" translate="yes" xml:space="preserve">
          <source>Grouping key for the pushed metrics.</source>
          <target state="translated">この図では、「Element Import Import」という名前を使用しています。</target>
        </trans-unit>
        <trans-unit id="136a63c3429fc69de88e1cfb25a608757671fcc0" translate="yes" xml:space="preserve">
          <source>Gson</source>
          <target state="translated">Gson</target>
        </trans-unit>
        <trans-unit id="f40b27d6b8b9a4fc3827264c1da16a04ecf4d094" translate="yes" xml:space="preserve">
          <source>HTTP</source>
          <target state="translated">HTTP</target>
        </trans-unit>
        <trans-unit id="818082e24bf60bff999b812d843c4dc43fe324c2" translate="yes" xml:space="preserve">
          <source>HTTP Tracing</source>
          <target state="translated">HTTP トレース</target>
        </trans-unit>
        <trans-unit id="8d5159e0545649f87543e1dab237aa74d34310c4" translate="yes" xml:space="preserve">
          <source>HTTP Tracing can be enabled by providing a bean of type &lt;code&gt;HttpTraceRepository&lt;/code&gt; in your application&amp;rsquo;s configuration. For convenience, Spring Boot offers an &lt;code&gt;InMemoryHttpTraceRepository&lt;/code&gt; that stores traces for the last 100 request-response exchanges, by default. &lt;code&gt;InMemoryHttpTraceRepository&lt;/code&gt; is limited compared to other tracing solutions and we recommend using it only for development environments. For production environments, use of a production-ready tracing or observability solution, such as Zipkin or Spring Cloud Sleuth, is recommended. Alternatively, create your own &lt;code&gt;HttpTraceRepository&lt;/code&gt; that meets your needs.</source>
          <target state="translated">HTTPトレースは、アプリケーションの構成で &lt;code&gt;HttpTraceRepository&lt;/code&gt; タイプのBeanを提供することで有効にできます。便宜上、Spring Bootは、 &lt;code&gt;InMemoryHttpTraceRepository&lt;/code&gt; で、最後の100個の要求/応答交換のトレースを格納するInMemoryHttpTraceRepositoryを提供します。 &lt;code&gt;InMemoryHttpTraceRepository&lt;/code&gt; は、他のトレースソリューションと比較して制限されているため、開発環境でのみ使用することをお勧めします。実稼働環境では、ZipkinやSpring CloudSleuthなどの実稼働対応のトレースまたは可観測性ソリューションの使用をお勧めします。または、ニーズに合った独自の &lt;code&gt;HttpTraceRepository&lt;/code&gt; を作成します。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
