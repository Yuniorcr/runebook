<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="spring_boot">
    <body>
      <group id="spring_boot">
        <trans-unit id="66c25b3f91fc8840e220899d8bb9aaf302a00d09" translate="yes" xml:space="preserve">
          <source>The format of the &lt;code&gt;additional-spring-configuration-metadata.json&lt;/code&gt; file is exactly the same as the regular &lt;code&gt;spring-configuration-metadata.json&lt;/code&gt;. The additional properties file is optional. If you do not have any additional properties, do not add the file.</source>
          <target state="translated">フォーマット &lt;code&gt;additional-spring-configuration-metadata.json&lt;/code&gt; ファイルは、通常と全く同じである &lt;code&gt;spring-configuration-metadata.json&lt;/code&gt; 。追加のプロパティファイルはオプションです。追加のプロパティがない場合は、ファイルを追加しないでください。</target>
        </trans-unit>
        <trans-unit id="9ddfd32c2e3e71e345cae5515d422d018062a360" translate="yes" xml:space="preserve">
          <source>The format to use when rendering the log level (default &lt;code&gt;%5p&lt;/code&gt;).</source>
          <target state="translated">ログレベルをレンダリングするときに使用する形式（デフォルトは &lt;code&gt;%5p&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="7da785af774d728c7a48df5be51224c6da88296f" translate="yes" xml:space="preserve">
          <source>The full name of the group. This attribute is mandatory.</source>
          <target state="translated">グループのフルネーム。この属性は必須です。</target>
        </trans-unit>
        <trans-unit id="31c410ebe1373afb82e278913855a6b6c87b9b79" translate="yes" xml:space="preserve">
          <source>The full name of the method (include parenthesis and argument types) that contributed this group (for example, the name of a &lt;code&gt;@ConfigurationProperties&lt;/code&gt; annotated &lt;code&gt;@Bean&lt;/code&gt; method). If the source method is not known, it may be omitted.</source>
          <target state="translated">このグループに貢献したメソッドのフルネーム（括弧と引数のタイプを含む）（たとえば、 &lt;code&gt;@ConfigurationProperties&lt;/code&gt; アノテーション付きの &lt;code&gt;@Bean&lt;/code&gt; メソッドの名前）。ソースメソッドが不明な場合は、省略できます。</target>
        </trans-unit>
        <trans-unit id="328ddbc00c02c8f4d8b207c9aac03fd620cfc720" translate="yes" xml:space="preserve">
          <source>The full name of the property that &lt;em&gt;replaces&lt;/em&gt; this deprecated property. If there is no replacement for this property, it may be omitted.</source>
          <target state="translated">この非推奨のプロパティを&lt;em&gt;置き換える&lt;/em&gt;プロパティのフルネーム。このプロパティに代わるものがない場合は、省略できます。</target>
        </trans-unit>
        <trans-unit id="c21e3105b22678edf57e5097137ba4b40b21a7b8" translate="yes" xml:space="preserve">
          <source>The full name of the property to which this hint refers. Names are in lower-case period-separated form (such as &lt;code&gt;spring.mvc.servlet.path&lt;/code&gt;). If the property refers to a map (such as &lt;code&gt;system.contexts&lt;/code&gt;), the hint either applies to the &lt;em&gt;keys&lt;/em&gt; of the map (&lt;code&gt;system.contexts.keys&lt;/code&gt;) or the &lt;em&gt;values&lt;/em&gt; (&lt;code&gt;system.contexts.values&lt;/code&gt;) of the map. This attribute is mandatory.</source>
          <target state="translated">このヒントが参照するプロパティのフルネーム。名前は小文字のピリオドで区切られた形式です（ &lt;code&gt;spring.mvc.servlet.path&lt;/code&gt; など）。プロパティがマップ（ &lt;code&gt;system.contexts&lt;/code&gt; など）を参照している場合、ヒントはマップの&lt;em&gt;キー&lt;/em&gt;（ &lt;code&gt;system.contexts.keys&lt;/code&gt; ）またはマップの&lt;em&gt;値&lt;/em&gt;（ &lt;code&gt;system.contexts.values&lt;/code&gt; ）のいずれかに適用されます。この属性は必須です。</target>
        </trans-unit>
        <trans-unit id="4f39c4968dfb00d1083bc57c9ea5f4e1cfbc9b1a" translate="yes" xml:space="preserve">
          <source>The full name of the property. Names are in lower-case period-separated form (for example, &lt;code&gt;server.address&lt;/code&gt;). This attribute is mandatory.</source>
          <target state="translated">プロパティのフルネーム。名前は小文字のピリオドで区切られた形式です（たとえば、 &lt;code&gt;server.address&lt;/code&gt; ）。この属性は必須です。</target>
        </trans-unit>
        <trans-unit id="72ecd30f8339ce1725974774e6e0d202f6a3cbdc" translate="yes" xml:space="preserve">
          <source>The full signature of the data type of the property (for example, &lt;code&gt;java.lang.String&lt;/code&gt;) but also a full generic type (such as &lt;code&gt;java.util.Map&amp;lt;java.lang.String,acme.MyEnum&amp;gt;&lt;/code&gt;). You can use this attribute to guide the user as to the types of values that they can enter. For consistency, the type of a primitive is specified by using its wrapper counterpart (for example, &lt;code&gt;boolean&lt;/code&gt; becomes &lt;code&gt;java.lang.Boolean&lt;/code&gt;). Note that this class may be a complex type that gets converted from a &lt;code&gt;String&lt;/code&gt; as values are bound. If the type is not known, it may be omitted.</source>
          <target state="translated">プロパティのデータ型の完全な署名（たとえば、 &lt;code&gt;java.lang.String&lt;/code&gt; ）だけでなく、完全なジェネリック型（ &lt;code&gt;java.util.Map&amp;lt;java.lang.String,acme.MyEnum&amp;gt;&lt;/code&gt; ）もあります。この属性を使用して、入力できる値のタイプについてユーザーをガイドできます。一貫性を保つために、プリミティブのタイプは、対応するラッパーを使用して指定されます（たとえば、 &lt;code&gt;boolean&lt;/code&gt; は &lt;code&gt;java.lang.Boolean&lt;/code&gt; になります）。このクラスは、値がバインドされるときに &lt;code&gt;String&lt;/code&gt; から変換される複合型である可能性があることに注意してください。タイプが不明な場合は省略できます。</target>
        </trans-unit>
        <trans-unit id="b34b393cde3ceb48374646ec7423f4f1f131c2a0" translate="yes" xml:space="preserve">
          <source>The fully qualified name of the bean class that should be assignable to the candidate. Typically used to filter out non-candidate beans.</source>
          <target state="translated">候補に割り当てられるべきビーンクラスの完全修飾名。通常、候補ではないビーンをフィルタリングするために使用されます。</target>
        </trans-unit>
        <trans-unit id="5672e24e2159e2034c7c08d7a398a2abf8c73b76" translate="yes" xml:space="preserve">
          <source>The fully qualified name of the class that should be assignable to the chosen value. Typically used to filter out-non candidate classes. Note that this information can be provided by the type itself by exposing a class with the appropriate upper bound.</source>
          <target state="translated">選択した値に代入可能なクラスの完全修飾名。通常、候補外のクラスをフィルタリングするために使用されます。この情報は、適切な上限値を持つクラスを公開することで、型自体が提供することができることに注意してください。</target>
        </trans-unit>
        <trans-unit id="f71d9755a0d829c8a5d1bad6c20e0e752aa6690e" translate="yes" xml:space="preserve">
          <source>The fully qualified name of the type to consider for the property. This parameter is mandatory.</source>
          <target state="translated">プロパティに考慮するタイプの完全修飾名。このパラメータは必須です。</target>
        </trans-unit>
        <trans-unit id="7db3d47265b9820501b6e0243e36905f1e32b4e4" translate="yes" xml:space="preserve">
          <source>The host of the proxy to use to connect to the remote application.</source>
          <target state="translated">リモートアプリケーションに接続するために使用するプロキシのホスト。</target>
        </trans-unit>
        <trans-unit id="e1929ac70e93c339c5bd8e38be87f945ac47619e" translate="yes" xml:space="preserve">
          <source>The identifier for a given &lt;code&gt;HealthIndicator&lt;/code&gt; is the name of the bean without the &lt;code&gt;HealthIndicator&lt;/code&gt; suffix, if it exists. In the preceding example, the health information is available in an entry named &lt;code&gt;my&lt;/code&gt;.</source>
          <target state="translated">特定の &lt;code&gt;HealthIndicator&lt;/code&gt; の識別子は、 &lt;code&gt;HealthIndicator&lt;/code&gt; サフィックスが存在する場合はそれを除いたBeanの名前です。前の例では、ヘルス情報は &lt;code&gt;my&lt;/code&gt; という名前のエントリで利用できます。</target>
        </trans-unit>
        <trans-unit id="babe039ed969544f26641cbdddb378115daa24b3" translate="yes" xml:space="preserve">
          <source>The implementation can load arbitrary files and add them to the &lt;code&gt;Environment&lt;/code&gt;. For instance, the following example loads a YAML configuration file from the classpath:</source>
          <target state="translated">実装では、任意のファイルをロードして &lt;code&gt;Environment&lt;/code&gt; 追加できます。たとえば、次の例では、クラスパスからYAML構成ファイルをロードします。</target>
        </trans-unit>
        <trans-unit id="072fad81bf875ef998f82690ea5eb825c668b764" translate="yes" xml:space="preserve">
          <source>The in-memory backend disables itself as soon as you&amp;rsquo;re using any of the other available backend. You can also disable it explicitly:</source>
          <target state="translated">インメモリバックエンドは、他の利用可能なバックエンドのいずれかを使用するとすぐに無効になります。明示的に無効にすることもできます。</target>
        </trans-unit>
        <trans-unit id="d805f6bf3a8fefce85f3fc71aca3f05420a23cc2" translate="yes" xml:space="preserve">
          <source>The index file would look like this:</source>
          <target state="translated">インデックスファイルは次のようになります。</target>
        </trans-unit>
        <trans-unit id="728942a3920a99d47512490ff0d4c132584b697a" translate="yes" xml:space="preserve">
          <source>The internal state of Spring Boot applications is mostly represented by the Spring &lt;code&gt;ApplicationContext&lt;/code&gt;. If the application context has started successfully, Spring Boot assumes that the application is in a valid state. An application is considered live as soon as the context has been refreshed, see &lt;a href=&quot;#boot-features-application-events-and-listeners&quot;&gt;Spring Boot application lifecycle and related Application Events&lt;/a&gt;.</source>
          <target state="translated">Spring Bootアプリケーションの内部状態は、主にSpringApplicationContextによって表され &lt;code&gt;ApplicationContext&lt;/code&gt; 。アプリケーションコンテキストが正常に開始された場合、SpringBootはアプリケーションが有効な状態にあると見なします。コンテキストが更新されるとすぐに、アプリケーションはライブであると見なされ&lt;a href=&quot;#boot-features-application-events-and-listeners&quot;&gt;ます。SpringBootアプリケーションのライフサイクルおよび関連するアプリケーションイベントを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="8a144d83c7dfc1c341bd0d6dedefb7940d04f8c3" translate="yes" xml:space="preserve">
          <source>The jOOQ manual tends to use a variable named &lt;code&gt;create&lt;/code&gt; to hold the &lt;code&gt;DSLContext&lt;/code&gt;.</source>
          <target state="translated">jOOQマニュアルでは、 &lt;code&gt;DSLContext&lt;/code&gt; を保持する &lt;code&gt;create&lt;/code&gt; という名前の変数を使用する傾向があります。</target>
        </trans-unit>
        <trans-unit id="c05e3d1f59e9395062a2d73476a909741b0b5b8f" translate="yes" xml:space="preserve">
          <source>The latest copy is available at &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/current/reference/&quot;&gt;docs.spring.io/spring-boot/docs/current/reference/&lt;/a&gt;.</source>
          <target state="translated">最新のコピーは、&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/current/reference/&quot;&gt;docs.spring.io / spring-boot / docs / current / reference /&lt;/a&gt;で入手できます。</target>
        </trans-unit>
        <trans-unit id="e71e0e23307f0b8e0c72e93bd2dbe49dd20517b2" translate="yes" xml:space="preserve">
          <source>The layers index file can be provided in &lt;code&gt;BOOT-INF/layers.idx&lt;/code&gt;. It provides a list of layers and the parts of the jar that should be contained within them. Layers are written in the order that they should be added to the Docker/OCI image. Layers names are written as quoted strings prefixed with dash space (&lt;code&gt;&quot;-&amp;middot;&quot;&lt;/code&gt;) and with a colon (&lt;code&gt;&quot;:&quot;&lt;/code&gt;) suffix. Layer content is either a file or directory name written as a quoted string prefixed by space space dash space (&lt;code&gt;&quot;&amp;middot;&amp;middot;-&amp;middot;&quot;&lt;/code&gt;). A directory name ends with &lt;code&gt;/&lt;/code&gt;, a file name does not. When a directory name is used it means that all files inside that directory are in the same layer.</source>
          <target state="translated">レイヤーインデックスファイルは、 &lt;code&gt;BOOT-INF/layers.idx&lt;/code&gt; で提供できます。レイヤーと、レイヤー内に含める必要のあるjarのパーツのリストを提供します。レイヤーは、Docker / OCIイメージに追加する順序で書き込まれます。レイヤー名は、ダッシュスペース（ &lt;code&gt;&quot;-&amp;middot;&quot;&lt;/code&gt; ）とコロン（ &lt;code&gt;&quot;:&quot;&lt;/code&gt; ）の接尾辞が前に付いた引用符で囲まれた文字列として記述されます。レイヤーコンテンツは、スペーススペースダッシュスペース（ &lt;code&gt;&quot;&amp;middot;&amp;middot;-&amp;middot;&quot;&lt;/code&gt; ）が前に付いた引用符で囲まれた文字列として記述されたファイル名またはディレクトリ名です。ディレクトリ名は &lt;code&gt;/&lt;/code&gt; で終わりますが、ファイル名は/で終わりません。ディレクトリ名が使用されている場合、そのディレクトリ内のすべてのファイルが同じレイヤーにあることを意味します。</target>
        </trans-unit>
        <trans-unit id="5ac87227f6fa892229852d903eddcb1188368d5c" translate="yes" xml:space="preserve">
          <source>The level of deprecation, which can be either &lt;code&gt;warning&lt;/code&gt; (the default) or &lt;code&gt;error&lt;/code&gt;. When a property has a &lt;code&gt;warning&lt;/code&gt; deprecation level, it should still be bound in the environment. However, when it has an &lt;code&gt;error&lt;/code&gt; deprecation level, the property is no longer managed and is not bound.</source>
          <target state="translated">非推奨のレベル。 &lt;code&gt;warning&lt;/code&gt; （デフォルト）または &lt;code&gt;error&lt;/code&gt; いずれかになります。プロパティに &lt;code&gt;warning&lt;/code&gt; 非推奨レベルがある場合でも、環境内でバインドする必要があります。ただし、 &lt;code&gt;error&lt;/code&gt; 非推奨レベルがある場合、プロパティは管理されなくなり、バインドされません。</target>
        </trans-unit>
        <trans-unit id="75d148a738f9c8780f067529be57122c2c998399" translate="yes" xml:space="preserve">
          <source>The library directory must be made available, if not already, to the JVM library path. You can do so with a JVM argument such as &lt;code&gt;-Djava.library.path=/usr/local/opt/tomcat-native/lib&lt;/code&gt;. More on this in the &lt;a href=&quot;https://tomcat.apache.org/tomcat-9.0-doc/apr.html&quot;&gt;official Tomcat documentation&lt;/a&gt;.</source>
          <target state="translated">ライブラリディレクトリは、JVMライブラリパスで利用できるようにする必要があります（まだ利用できない場合）。これは、 &lt;code&gt;-Djava.library.path=/usr/local/opt/tomcat-native/lib&lt;/code&gt; などのJVM引数を使用して行うことができます。これについて&lt;a href=&quot;https://tomcat.apache.org/tomcat-9.0-doc/apr.html&quot;&gt;詳しく&lt;/a&gt;は、Tomcatの公式ドキュメントをご覧ください。</target>
        </trans-unit>
        <trans-unit id="6f7bde1312de36803413519e5b89a42d12e53b20" translate="yes" xml:space="preserve">
          <source>The line in the preceding example passes a value of &lt;code&gt;true&lt;/code&gt; for the &lt;code&gt;hibernate.globally_quoted_identifiers&lt;/code&gt; property to the Hibernate entity manager.</source>
          <target state="translated">前の例の行は、 &lt;code&gt;hibernate.globally_quoted_identifiers&lt;/code&gt; プロパティの値 &lt;code&gt;true&lt;/code&gt; をHibernateエンティティマネージャーに渡します。</target>
        </trans-unit>
        <trans-unit id="1188429780ff5631aa0a096f34348a6e0cec96fb" translate="yes" xml:space="preserve">
          <source>The list is ordered by precedence (with values from lower items overriding earlier ones). Documents from the loaded files are added as &lt;code&gt;PropertySources&lt;/code&gt; to the Spring &lt;code&gt;Environment&lt;/code&gt;.</source>
          <target state="translated">リストは優先順位で並べられています（前の項目よりも低い項目の値が優先されます）。ロードされたファイルのドキュメントは、 &lt;code&gt;PropertySources&lt;/code&gt; としてSpring &lt;code&gt;Environment&lt;/code&gt; 追加されます。</target>
        </trans-unit>
        <trans-unit id="6b74a0e1fbf4d667e063cdb8bb86b49b4cbecc0b" translate="yes" xml:space="preserve">
          <source>The location of the &lt;code&gt;java&lt;/code&gt; executable is discovered by using the &lt;code&gt;PATH&lt;/code&gt; by default, but you can set it explicitly if there is an executable file at &lt;code&gt;$JAVA_HOME/bin/java&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;java&lt;/code&gt; 実行可能ファイルの場所は、デフォルトで &lt;code&gt;PATH&lt;/code&gt; を使用して検出されますが、 &lt;code&gt;$JAVA_HOME/bin/java&lt;/code&gt; 実行可能ファイルがある場合は、明示的に設定できます。</target>
        </trans-unit>
        <trans-unit id="6a3b44d95f8d38ac92133ce20b34c12a35e77155" translate="yes" xml:space="preserve">
          <source>The location of the configuration file to use to initialize EhCache.</source>
          <target state="translated">EhCache の初期化に使用する設定ファイルの場所。</target>
        </trans-unit>
        <trans-unit id="ef0d2e4e926fdc61959e84d544052004e216263a" translate="yes" xml:space="preserve">
          <source>The location of the configuration file to use to initialize Hazelcast.</source>
          <target state="translated">Hazelcastの初期化に使用する設定ファイルの場所。</target>
        </trans-unit>
        <trans-unit id="0688a24208a021f5db5d3a200ece812b5e20eeed" translate="yes" xml:space="preserve">
          <source>The location of the configuration file to use to initialize Infinispan.</source>
          <target state="translated">Infinispan の初期化に使用する設定ファイルの場所。</target>
        </trans-unit>
        <trans-unit id="c04fce4df6166af7a615b0b143750ee577dfdda5" translate="yes" xml:space="preserve">
          <source>The location of the configuration file to use to initialize the cache manager. The configuration file is dependent of the underlying cache implementation.</source>
          <target state="translated">キャッシュマネージャを初期化するために使用する設定ファイルの場所。設定ファイルは、基礎となるキャッシュの実装に依存します。</target>
        </trans-unit>
        <trans-unit id="6c7983308decdb84ca9b691e3569034887d71cd3" translate="yes" xml:space="preserve">
          <source>The log message.</source>
          <target state="translated">ログメッセージです。</target>
        </trans-unit>
        <trans-unit id="7b689ff12a526bdf793ea93ac767aaa3d72174cf" translate="yes" xml:space="preserve">
          <source>The log pattern to use in a file (if &lt;code&gt;LOG_FILE&lt;/code&gt; is enabled).</source>
          <target state="translated">ファイルで使用するログパターン（ &lt;code&gt;LOG_FILE&lt;/code&gt; が有効になっている場合）。</target>
        </trans-unit>
        <trans-unit id="29bb58f455bd5f84947b8fb4a3409a193beda673" translate="yes" xml:space="preserve">
          <source>The log pattern to use on the console (stdout).</source>
          <target state="translated">コンソールで使用するログパターン(stdout)。</target>
        </trans-unit>
        <trans-unit id="f8cae559009682eeae665016ffba80a8e488d966" translate="yes" xml:space="preserve">
          <source>The magic values are (in this example) are &lt;code&gt;sample1&lt;/code&gt; and &lt;code&gt;sample2&lt;/code&gt;. In order to offer additional content assistance for the keys, you could add the following JSON to &lt;a href=&quot;#configuration-metadata-additional-metadata&quot;&gt;the manual metadata of the module&lt;/a&gt;:</source>
          <target state="translated">マジック値は（この例では） &lt;code&gt;sample1&lt;/code&gt; と &lt;code&gt;sample2&lt;/code&gt; です。キーに追加のコンテンツ支援を提供するために&lt;a href=&quot;#configuration-metadata-additional-metadata&quot;&gt;、モジュールの手動メタデータに&lt;/a&gt;次のJSONを追加できます。</target>
        </trans-unit>
        <trans-unit id="28e3c44f42af3001a18c278a1c0b918fc7a83cd3" translate="yes" xml:space="preserve">
          <source>The main application class to run</source>
          <target state="translated">実行するメインのアプリケーションクラス</target>
        </trans-unit>
        <trans-unit id="0c1417ddf14cdd8daaa486a56b35d2a4411467ff" translate="yes" xml:space="preserve">
          <source>The majority of the metadata file is generated automatically at compile time by processing all items annotated with &lt;code&gt;@ConfigurationProperties&lt;/code&gt;. However, it is possible to &lt;a href=&quot;#configuration-metadata-additional-metadata&quot;&gt;write part of the metadata manually&lt;/a&gt; for corner cases or more advanced use cases.</source>
          <target state="translated">メタデータファイルの大部分は、 &lt;code&gt;@ConfigurationProperties&lt;/code&gt; アノテーションが付けられたすべてのアイテムを処理することにより、コンパイル時に自動的に生成されます。ただし、コーナーケースやより高度なユースケース&lt;a href=&quot;#configuration-metadata-additional-metadata&quot;&gt;では、メタデータの一部を手動で書き込む&lt;/a&gt;ことができます。</target>
        </trans-unit>
        <trans-unit id="3a99e3c16779706d676298828b56f0bc02583a77" translate="yes" xml:space="preserve">
          <source>The maximum amount of size log archives can take before being deleted.</source>
          <target state="translated">ログアーカイブが削除される前に取ることができる最大サイズ。</target>
        </trans-unit>
        <trans-unit id="f5d2468ae4f1ff5fddbc2fa7a555e2063ef46be8" translate="yes" xml:space="preserve">
          <source>The maximum size of log file before it&amp;rsquo;s archived.</source>
          <target state="translated">アーカイブされる前のログファイルの最大サイズ。</target>
        </trans-unit>
        <trans-unit id="27fd07102c3516ee4eb7e38f951f9f14e71a455f" translate="yes" xml:space="preserve">
          <source>The method validation feature supported by Bean Validation 1.1 is automatically enabled as long as a JSR-303 implementation (such as Hibernate validator) is on the classpath. This lets bean methods be annotated with &lt;code&gt;javax.validation&lt;/code&gt; constraints on their parameters and/or on their return value. Target classes with such annotated methods need to be annotated with the &lt;code&gt;@Validated&lt;/code&gt; annotation at the type level for their methods to be searched for inline constraint annotations.</source>
          <target state="translated">Bean Validation 1.1でサポートされているメソッド検証機能は、JSR-303実装（Hibernateバリデーターなど）がクラスパス上にある限り、自動的に有効になります。これにより、Beanメソッドに、パラメーターや戻り値に対する &lt;code&gt;javax.validation&lt;/code&gt; 制約のアノテーションを付けることができます。このようなアノテーション付きメソッドを持つターゲットクラスは、メソッドでインライン制約アノテーションを検索するために、タイプレベルで &lt;code&gt;@Validated&lt;/code&gt; アノテーションを付ける必要があります。</target>
        </trans-unit>
        <trans-unit id="33586b93b5e8f45c17a2f86327bb93e343a66e94" translate="yes" xml:space="preserve">
          <source>The monitored classpath directories are now polled every 2 seconds for changes, and a 1 second quiet period is maintained to make sure there are no additional class changes.</source>
          <target state="translated">監視されているクラスパスディレクトリは、2秒ごとに変更のためにポーリングされ、追加のクラス変更がないことを確認するために1秒の静寂時間が維持されるようになりました。</target>
        </trans-unit>
        <trans-unit id="93acd161951b57dc720ac038b8cf3984782dacf0" translate="yes" xml:space="preserve">
          <source>The most common options to set are shown in the following example:</source>
          <target state="translated">設定する最も一般的なオプションを以下の例に示します。</target>
        </trans-unit>
        <trans-unit id="04986444099efffd8d56959f0e1128d6f95c6d79" translate="yes" xml:space="preserve">
          <source>The most extreme (and rarely used) option is to create your own &lt;code&gt;RestTemplateBuilder&lt;/code&gt; bean without using a configurer. Doing so switches off the auto-configuration of a &lt;code&gt;RestTemplateBuilder&lt;/code&gt; and prevents any &lt;code&gt;RestTemplateCustomizer&lt;/code&gt; beans from being used.</source>
          <target state="translated">最も極端な（そしてめったに使用されない）オプションは、コンフィギュレー &lt;code&gt;RestTemplateBuilder&lt;/code&gt; を使用せずに独自のRestTemplateBuilderBeanを作成することです。そうすることの自動設定オフ &lt;code&gt;RestTemplateBuilder&lt;/code&gt; 及び任意防止 &lt;code&gt;RestTemplateCustomizer&lt;/code&gt; に使用されてから豆を。</target>
        </trans-unit>
        <trans-unit id="bb42a6c77bd77267cb1b652a1a1befe4c77aff73" translate="yes" xml:space="preserve">
          <source>The multipart support is helpful when you want to receive multipart encoded file data as a &lt;code&gt;@RequestParam&lt;/code&gt;-annotated parameter of type &lt;code&gt;MultipartFile&lt;/code&gt; in a Spring MVC controller handler method.</source>
          <target state="translated">マルチパートサポートは、 &lt;code&gt;@RequestParam&lt;/code&gt; コントローラーハンドラーメソッドでタイプ &lt;code&gt;MultipartFile&lt;/code&gt; の@RequestParamアノテーション付きパラメーターとしてマルチパートエンコードされたファイルデータを受信する場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="23ee662ae0659faa0ffa21e02b6e56ccba9207b8" translate="yes" xml:space="preserve">
          <source>The name of the MBean is usually generated from the &lt;code&gt;id&lt;/code&gt; of the endpoint. For example, the &lt;code&gt;health&lt;/code&gt; endpoint is exposed as &lt;code&gt;org.springframework.boot:type=Endpoint,name=Health&lt;/code&gt;.</source>
          <target state="translated">MBeanの名前は通常、エンドポイントの &lt;code&gt;id&lt;/code&gt; から生成されます。たとえば、 &lt;code&gt;health&lt;/code&gt; エンドポイントは &lt;code&gt;org.springframework.boot:type=Endpoint,name=Health&lt;/code&gt; として公開されます。</target>
        </trans-unit>
        <trans-unit id="2b3bdd509135ac54d7c21f86558ceba6bc5dd8fe" translate="yes" xml:space="preserve">
          <source>The name of the app. If the jar is run from a symlink, the script guesses the app name. If it is not a symlink or you want to explicitly set the app name, this can be useful.</source>
          <target state="translated">アプリの名前。jar がシンボリックリンクから実行されている場合、スクリプトはアプリ名を推測します。シンボリックリンクではない場合やアプリ名を明示的に設定したい場合に便利です。</target>
        </trans-unit>
        <trans-unit id="eeecd19922684f0ae7190b1528c6ce9555f9bc8b" translate="yes" xml:space="preserve">
          <source>The name of the folder from which to read .conf files (same folder as jar-file by default).</source>
          <target state="translated">.conf ファイルを読み込むフォルダの名前 (デフォルトでは jar-file と同じフォルダ)。</target>
        </trans-unit>
        <trans-unit id="1fa289e812bd0bb93833514254045ba9c1e8c923" translate="yes" xml:space="preserve">
          <source>The name of the folder in which to put log files (&lt;code&gt;/var/log&lt;/code&gt; by default).</source>
          <target state="translated">ログファイルを配置するフォルダの名前（デフォルトでは &lt;code&gt;/var/log&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="1908085a96a7e7280cbf5acdd5b84fd227e8934b" translate="yes" xml:space="preserve">
          <source>The name of the log file in the &lt;code&gt;LOG_FOLDER&lt;/code&gt; (&lt;code&gt;&amp;lt;appname&amp;gt;.log&lt;/code&gt; by default).</source>
          <target state="translated">&lt;code&gt;LOG_FOLDER&lt;/code&gt; 内のログファイルの名前（デフォルトでは &lt;code&gt;&amp;lt;appname&amp;gt;.log&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="1e03de2e17454aafb611a7bb9ba39ead589712dc" translate="yes" xml:space="preserve">
          <source>The name of the provider to use to offer additional content assistance for the element to which the hint refers.</source>
          <target state="translated">ヒントが参照している要素に対して追加のコンテンツ支援を提供するために使用するプロバイダの名前。</target>
        </trans-unit>
        <trans-unit id="b627a61ccec8dd5e98000c5768073d3dcff8cb50" translate="yes" xml:space="preserve">
          <source>The name you use here should match the name used in the code, not the name after it has been naming-convention normalized for a monitoring system it is shipped to. In other words, if &lt;code&gt;jvm.memory.max&lt;/code&gt; appears as &lt;code&gt;jvm_memory_max&lt;/code&gt; in Prometheus because of its snake case naming convention, you should still use &lt;code&gt;jvm.memory.max&lt;/code&gt; as the selector when inspecting the meter in the &lt;code&gt;metrics&lt;/code&gt; endpoint.</source>
          <target state="translated">ここで使用する名前は、コードで使用されている名前と一致する必要があります。命名規則が適用された後の名前ではありません。言い換えれば、場合 &lt;code&gt;jvm.memory.max&lt;/code&gt; として表示されます &lt;code&gt;jvm_memory_max&lt;/code&gt; 、そのヘビケースの命名規則のプロメテウスでは、あなたはまだ使用する必要があります &lt;code&gt;jvm.memory.max&lt;/code&gt; にメーターを検査する際にセレクタとして &lt;code&gt;metrics&lt;/code&gt; エンドポイント。</target>
        </trans-unit>
        <trans-unit id="1ac12ea11ce4a239f0434e217d3ad2a7a3d9f9e6" translate="yes" xml:space="preserve">
          <source>The nested document will be filtered because the main file is named &lt;code&gt;application-dev.yml&lt;/code&gt;. It is already considered to be profile-specific, and nested documents will be ignored.</source>
          <target state="translated">メインファイルの名前は &lt;code&gt;application-dev.yml&lt;/code&gt; であるため、ネストされたドキュメントはフィルタリングされます。すでにプロファイル固有であると見なされており、ネストされたドキュメントは無視されます。</target>
        </trans-unit>
        <trans-unit id="4798fe7b532be5d748b7e3bf9f32ed914aeccfaf" translate="yes" xml:space="preserve">
          <source>The next section goes on to cover the &lt;em&gt;&lt;a href=&quot;spring-boot-cli#cli&quot;&gt;Spring Boot CLI&lt;/a&gt;&lt;/em&gt;, or you can jump ahead to read about &lt;em&gt;&lt;a href=&quot;build-tool-plugins#build-tool-plugins&quot;&gt;build tool plugins&lt;/a&gt;&lt;/em&gt;.</source>
          <target state="translated">次のセクションでは、&lt;em&gt;&lt;a href=&quot;spring-boot-cli#cli&quot;&gt;Spring Boot CLI&lt;/a&gt;&lt;/em&gt;について説明&lt;em&gt;&lt;a href=&quot;build-tool-plugins#build-tool-plugins&quot;&gt;します&lt;/a&gt;&lt;/em&gt;。または、&lt;em&gt;ビルドツールプラグイン&lt;/em&gt;について読むこともでき&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="2e710c9eb75bc0a71fde101a044467cce3c91bcf" translate="yes" xml:space="preserve">
          <source>The next step is to update your build configuration such that your project produces a war file rather than a jar file. If you use Maven and &lt;code&gt;spring-boot-starter-parent&lt;/code&gt; (which configures Maven&amp;rsquo;s war plugin for you), all you need to do is to modify &lt;code&gt;pom.xml&lt;/code&gt; to change the packaging to war, as follows:</source>
          <target state="translated">次のステップは、プロジェクトがjarファイルではなくwarファイルを生成するようにビルド構成を更新することです。Mavenと &lt;code&gt;spring-boot-starter-parent&lt;/code&gt; （Mavenのwarプラグインを構成します）を使用する場合、次のように、 &lt;code&gt;pom.xml&lt;/code&gt; を変更してパッケージをwarに変更するだけです。</target>
        </trans-unit>
        <trans-unit id="0b6d566a00d163af4d8e684c102288eb351995c8" translate="yes" xml:space="preserve">
          <source>The number of days to keep log archives (defaults to 7)</source>
          <target state="translated">ログアーカイブを保存する日数 (デフォルトは 7)</target>
        </trans-unit>
        <trans-unit id="81c47ab31d5d3bea0142dd81dc73c2f456c36fba" translate="yes" xml:space="preserve">
          <source>The official Java &quot;Low Level&quot; and &quot;High Level&quot; REST clients</source>
          <target state="translated">公式Java「低レベル」「高レベル」RESTクライアント</target>
        </trans-unit>
        <trans-unit id="9e41aadf94f071ec541a9bf5e33630f6269664c2" translate="yes" xml:space="preserve">
          <source>The order of common tags is important if you are using Graphite. As the order of common tags cannot be guaranteed using this approach, Graphite users are advised to define a custom &lt;code&gt;MeterFilter&lt;/code&gt; instead.</source>
          <target state="translated">Graphiteを使用している場合は、一般的なタグの順序が重要です。このアプローチでは一般的なタグの順序を保証できないため、Graphiteユーザーは代わりにカスタム &lt;code&gt;MeterFilter&lt;/code&gt; を定義することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="6424d8ae13909b648555e066be4368a2e32eb9d7" translate="yes" xml:space="preserve">
          <source>The parameters passed to endpoint operation methods are, if necessary, automatically converted to the required type. Before calling an operation method, the input received via JMX or an HTTP request is converted to the required types using an instance of &lt;code&gt;ApplicationConversionService&lt;/code&gt; as well as any &lt;code&gt;Converter&lt;/code&gt; or &lt;code&gt;GenericConverter&lt;/code&gt; beans qualified with &lt;code&gt;@EndpointConverter&lt;/code&gt;.</source>
          <target state="translated">エンドポイント操作メソッドに渡されるパラメーターは、必要に応じて、必要なタイプに自動的に変換されます。操作メソッドを呼び出す前に、入力は、JMXを介して受信またはHTTPリクエストがインスタンス使用して、必要な型に変換される &lt;code&gt;ApplicationConversionService&lt;/code&gt; を、ならびに任意の &lt;code&gt;Converter&lt;/code&gt; または &lt;code&gt;GenericConverter&lt;/code&gt; で修飾豆 &lt;code&gt;@EndpointConverter&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="de166803f8828e9185f0257d9f5429ef403dd089" translate="yes" xml:space="preserve">
          <source>The path can be further customized by annotating one or more parameters of the operation method with &lt;code&gt;@Selector&lt;/code&gt;. Such a parameter is added to the path predicate as a path variable. The variable&amp;rsquo;s value is passed into the operation method when the endpoint operation is invoked. If you want to capture all remaining path elements, you can add &lt;code&gt;@Selector(Match=ALL_REMAINING)&lt;/code&gt; to the last parameter and make it a type that is conversion compatible with a &lt;code&gt;String[]&lt;/code&gt;.</source>
          <target state="translated">操作メソッドの1つ以上のパラメーターに &lt;code&gt;@Selector&lt;/code&gt; アノテーションを付けることで、パスをさらにカスタマイズできます。このようなパラメーターは、パス変数としてパス述部に追加されます。変数の値は、エンドポイント操作が呼び出されたときに操作メソッドに渡されます。残りのすべてのパス要素をキャプチャする場合は、最後のパラメータに &lt;code&gt;@Selector(Match=ALL_REMAINING)&lt;/code&gt; を追加して、 &lt;code&gt;String[]&lt;/code&gt; と変換互換性のある型にすることができます。</target>
        </trans-unit>
        <trans-unit id="aee6d54f4f41ec165d96cb004bf5f868eee0382d" translate="yes" xml:space="preserve">
          <source>The path of the predicate is determined by the ID of the endpoint and the base path of web-exposed endpoints. The default base path is &lt;code&gt;/actuator&lt;/code&gt;. For example, an endpoint with the ID &lt;code&gt;sessions&lt;/code&gt; will use &lt;code&gt;/actuator/sessions&lt;/code&gt; as its path in the predicate.</source>
          <target state="translated">述語のパスは、エンドポイントのIDとWebに公開されたエンドポイントのベースパスによって決定されます。デフォルトのベースパスは &lt;code&gt;/actuator&lt;/code&gt; です。たとえば、ID &lt;code&gt;sessions&lt;/code&gt; を持つエンドポイントは、述部のパスとして &lt;code&gt;/actuator/sessions&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="f0656ecd9796e4da1fb5968bc7247045b64c27a4" translate="yes" xml:space="preserve">
          <source>The patterns to use can be customized using the &lt;code&gt;management.endpoint.env.keys-to-sanitize&lt;/code&gt; and &lt;code&gt;management.endpoint.configprops.keys-to-sanitize&lt;/code&gt; respectively.</source>
          <target state="translated">使用するパターンは、それぞれ &lt;code&gt;management.endpoint.env.keys-to-sanitize&lt;/code&gt; および &lt;code&gt;management.endpoint.configprops.keys-to-sanitize&lt;/code&gt; を使用してカスタマイズできます。</target>
        </trans-unit>
        <trans-unit id="a938c63848f47959aa084e1ab0739dd5ded55bb8" translate="yes" xml:space="preserve">
          <source>The port of the proxy to use to connect to the remote application.</source>
          <target state="translated">リモートアプリケーションへの接続に使用するプロキシのポート。</target>
        </trans-unit>
        <trans-unit id="2be111a430ebda2afbf8aa01b8648d671e99e3d9" translate="yes" xml:space="preserve">
          <source>The port that Mongo listens on can be configured by setting the &lt;code&gt;spring.data.mongodb.port&lt;/code&gt; property. To use a randomly allocated free port, use a value of 0. The &lt;code&gt;MongoClient&lt;/code&gt; created by &lt;code&gt;MongoAutoConfiguration&lt;/code&gt; is automatically configured to use the randomly allocated port.</source>
          <target state="translated">Mongoがリッスンするポートは、 &lt;code&gt;spring.data.mongodb.port&lt;/code&gt; プロパティを設定することで構成できます。ランダムに割り当てられた空きポートを使用するには、値0を使用します &lt;code&gt;MongoClient&lt;/code&gt; によって作成された &lt;code&gt;MongoAutoConfiguration&lt;/code&gt; は、ランダムに割り当てられたポートを使用するように自動的に構成されます。</target>
        </trans-unit>
        <trans-unit id="31bbbe629b4580086b36804afdbfae5a18fc5f8b" translate="yes" xml:space="preserve">
          <source>The preceding &lt;code&gt;application.properties&lt;/code&gt; example changes the endpoint from &lt;code&gt;/actuator/{id}&lt;/code&gt; to &lt;code&gt;/manage/{id}&lt;/code&gt; (for example, &lt;code&gt;/manage/info&lt;/code&gt;).</source>
          <target state="translated">上記の &lt;code&gt;application.properties&lt;/code&gt; の例では、エンドポイントを &lt;code&gt;/actuator/{id}&lt;/code&gt; から &lt;code&gt;/manage/{id}&lt;/code&gt; に変更します（たとえば、 &lt;code&gt;/manage/info&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="6eb7413ccbb011fcd8d2bce01f9810452986a454" translate="yes" xml:space="preserve">
          <source>The preceding POJO defines the following properties:</source>
          <target state="translated">前述のPOJOは、以下のプロパティを定義しています。</target>
        </trans-unit>
        <trans-unit id="905efa58745dc4094344d0271e5aa54cce0d071c" translate="yes" xml:space="preserve">
          <source>The preceding code makes sure that the deprecated property still works (delegating to the &lt;code&gt;name&lt;/code&gt; property behind the scenes). Once the &lt;code&gt;getTarget&lt;/code&gt; and &lt;code&gt;setTarget&lt;/code&gt; methods can be removed from your public API, the automatic deprecation hint in the metadata goes away as well. If you want to keep a hint, adding manual metadata with an &lt;code&gt;error&lt;/code&gt; deprecation level ensures that users are still informed about that property. Doing so is particularly useful when a &lt;code&gt;replacement&lt;/code&gt; is provided.</source>
          <target state="translated">上記のコードは、非推奨のプロパティが引き続き機能することを確認します（バックグラウンドで &lt;code&gt;name&lt;/code&gt; プロパティに委任します）。一度 &lt;code&gt;getTarget&lt;/code&gt; と &lt;code&gt;setTarget&lt;/code&gt; 方法は、あなたの公開APIから削除することができ、メタデータ自動非推奨のヒントは、同様に消えます。ヒントを保持したい場合は、 &lt;code&gt;error&lt;/code&gt; 非推奨レベルの手動メタデータを追加することで、ユーザーにそのプロパティについて引き続き通知することができます。そうすることは、 &lt;code&gt;replacement&lt;/code&gt; が提供されるときに特に役立ちます。</target>
        </trans-unit>
        <trans-unit id="659caa5023b0513ddd625afbcda89818257e5802" translate="yes" xml:space="preserve">
          <source>The preceding declaration picks up &lt;code&gt;custom-bom-1.0.0.pom&lt;/code&gt; in a Maven repository under &lt;code&gt;com/example/custom-versions/1.0.0/&lt;/code&gt;.</source>
          <target state="translated">上記の宣言は、 &lt;code&gt;com/example/custom-versions/1.0.0/&lt;/code&gt; 下のMavenリポジトリにある &lt;code&gt;custom-bom-1.0.0.pom&lt;/code&gt; を取得します。</target>
        </trans-unit>
        <trans-unit id="e1906575c82396ad87a059ae736a882ec717aa72" translate="yes" xml:space="preserve">
          <source>The preceding example YAML corresponds to the following &lt;code&gt;application.properties&lt;/code&gt; file:</source>
          <target state="translated">上記の例のYAMLは、次の &lt;code&gt;application.properties&lt;/code&gt; ファイルに対応しています。</target>
        </trans-unit>
        <trans-unit id="b1c02e2d91aa6ff81dae9e4761c967e22a489a83" translate="yes" xml:space="preserve">
          <source>The preceding example configures two data sources on custom namespaces with the same logic as Spring Boot would use in auto-configuration. Note that each &lt;code&gt;configuration&lt;/code&gt; sub namespace provides advanced settings based on the chosen implementation.</source>
          <target state="translated">前の例では、SpringBootが自動構成で使用するのと同じロジックでカスタム名前空間に2つのデータソースを構成します。各 &lt;code&gt;configuration&lt;/code&gt; サブ名前空間は、選択した実装に基づいて詳細設定を提供することに注意してください。</target>
        </trans-unit>
        <trans-unit id="f53bde56dc68fd45bf0e75abd87fa42843ae2ec8" translate="yes" xml:space="preserve">
          <source>The preceding example creates a &lt;code&gt;my-project&lt;/code&gt; directory with a Maven-based project that uses &lt;code&gt;spring-boot-starter-web&lt;/code&gt; and &lt;code&gt;spring-boot-starter-data-jpa&lt;/code&gt;. You can list the capabilities of the service by using the &lt;code&gt;--list&lt;/code&gt; flag, as shown in the following example:</source>
          <target state="translated">上記の例では、 &lt;code&gt;spring-boot-starter-web&lt;/code&gt; と &lt;code&gt;spring-boot-starter-data-jpa&lt;/code&gt; を使用するMavenベースのプロジェクトで &lt;code&gt;my-project&lt;/code&gt; ディレクトリを作成します。次の例に示すように、 &lt;code&gt;--list&lt;/code&gt; フラグを使用して、サービスの機能を一覧表示できます。</target>
        </trans-unit>
        <trans-unit id="eed0faed14835655e955c1af347f383f8f1c6381" translate="yes" xml:space="preserve">
          <source>The preceding example indicates that the dependency management in &lt;code&gt;another-bom&lt;/code&gt; overrides the dependency management in &lt;code&gt;custom-bom&lt;/code&gt;.</source>
          <target state="translated">前の例は、 &lt;code&gt;another-bom&lt;/code&gt; の依存関係管理が &lt;code&gt;custom-bom&lt;/code&gt; の依存関係管理をオーバーライドすることを示しています。</target>
        </trans-unit>
        <trans-unit id="293fe6f7ff3290e7d1db3c998f27c59b147c1d81" translate="yes" xml:space="preserve">
          <source>The preceding example overrides the default factory, and it should be applied to any other factory that your application defines, if any.</source>
          <target state="translated">前述の例ではデフォルトのファクトリーを上書きしています。</target>
        </trans-unit>
        <trans-unit id="a9f4de5ac752e76cd1ec66f96406db3f1fad9adf" translate="yes" xml:space="preserve">
          <source>The preceding example produces metadata information for &lt;code&gt;server.name&lt;/code&gt;, &lt;code&gt;server.host.ip&lt;/code&gt;, and &lt;code&gt;server.host.port&lt;/code&gt; properties. You can use the &lt;code&gt;@NestedConfigurationProperty&lt;/code&gt; annotation on a field to indicate that a regular (non-inner) class should be treated as if it were nested.</source>
          <target state="translated">上記の例では、 &lt;code&gt;server.name&lt;/code&gt; 、 &lt;code&gt;server.host.ip&lt;/code&gt; 、および &lt;code&gt;server.host.port&lt;/code&gt; プロパティのメタデータ情報を生成します。フィールドで &lt;code&gt;@NestedConfigurationProperty&lt;/code&gt; アノテーションを使用して、通常の（非内部）クラスをネストされているかのように扱う必要があることを示すことができます。</target>
        </trans-unit>
        <trans-unit id="5a9d7540973d81ea773fc24abca3ae038b7aba3f" translate="yes" xml:space="preserve">
          <source>The preceding example shows how &lt;code&gt;A.class&lt;/code&gt; can be found in &lt;code&gt;/BOOT-INF/classes&lt;/code&gt; in &lt;code&gt;myapp.jar&lt;/code&gt; at position &lt;code&gt;0063&lt;/code&gt;. &lt;code&gt;B.class&lt;/code&gt; from the nested jar can actually be found in &lt;code&gt;myapp.jar&lt;/code&gt; at position &lt;code&gt;3452&lt;/code&gt;, and &lt;code&gt;C.class&lt;/code&gt; is at position &lt;code&gt;3980&lt;/code&gt;.</source>
          <target state="translated">どのように上記の例が示す &lt;code&gt;A.class&lt;/code&gt; の中に見出すことができる &lt;code&gt;/BOOT-INF/classes&lt;/code&gt; に &lt;code&gt;myapp.jar&lt;/code&gt; 位置で &lt;code&gt;0063&lt;/code&gt; 。ネストされたjarの &lt;code&gt;B.class&lt;/code&gt; は、実際には &lt;code&gt;myapp.jar&lt;/code&gt; の &lt;code&gt;3452&lt;/code&gt; の位置にあり、 &lt;code&gt;C.class&lt;/code&gt; は &lt;code&gt;3980&lt;/code&gt; の位置にあります。</target>
        </trans-unit>
        <trans-unit id="380deea36257b681e8fa5315768fac1261b41692" translate="yes" xml:space="preserve">
          <source>The preceding example uses &lt;code&gt;EndpointRequest.toAnyEndpoint()&lt;/code&gt; to match a request to any endpoint and then ensures that all have the &lt;code&gt;ENDPOINT_ADMIN&lt;/code&gt; role. Several other matcher methods are also available on &lt;code&gt;EndpointRequest&lt;/code&gt;. See the API documentation (&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/actuator-api/htmlsingle&quot;&gt;HTML&lt;/a&gt; or &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/actuator-api/pdf/spring-boot-actuator-web-api.pdf&quot;&gt;PDF&lt;/a&gt;) for details.</source>
          <target state="translated">前の例では、 &lt;code&gt;EndpointRequest.toAnyEndpoint()&lt;/code&gt; を使用して要求を任意のエンドポイントに一致させ、すべてに &lt;code&gt;ENDPOINT_ADMIN&lt;/code&gt; ロールがあることを確認します。他のいくつかのマッチャーメソッドも &lt;code&gt;EndpointRequest&lt;/code&gt; で利用できます。詳細については、APIドキュメント（&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/actuator-api/htmlsingle&quot;&gt;HTML&lt;/a&gt;または&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/actuator-api/pdf/spring-boot-actuator-web-api.pdf&quot;&gt;PDF&lt;/a&gt;）を参照してください。</target>
        </trans-unit>
        <trans-unit id="e48053f9c9713ecfcac3f8649adeef82301168e3" translate="yes" xml:space="preserve">
          <source>The preceding example would be transformed into these properties:</source>
          <target state="translated">前述の例は、これらのプロパティに変換されます。</target>
        </trans-unit>
        <trans-unit id="0e0eb1f5c54643d2fa19f2def26685a64ad325f6" translate="yes" xml:space="preserve">
          <source>The preceding instructions install a local instance of &lt;code&gt;spring&lt;/code&gt; called the &lt;code&gt;dev&lt;/code&gt; instance. It points at your target build location, so every time you rebuild Spring Boot, &lt;code&gt;spring&lt;/code&gt; is up-to-date.</source>
          <target state="translated">先行する命令はのローカルインスタンスをインストール &lt;code&gt;spring&lt;/code&gt; と呼ばれる &lt;code&gt;dev&lt;/code&gt; インスタンスを。それはあなたのターゲットのビルドの場所を指し、あなたは春ブーツを再構築するたびに、 &lt;code&gt;spring&lt;/code&gt; 最新です。</target>
        </trans-unit>
        <trans-unit id="3bde5228723f5160afe6f3494a7a6a16fc8a6b87" translate="yes" xml:space="preserve">
          <source>The preceding listing should give you a working build. You can test it by running &lt;code&gt;mvn package&lt;/code&gt; (for now, you can ignore the &amp;ldquo;jar will be empty - no content was marked for inclusion!&amp;rdquo; warning).</source>
          <target state="translated">上記のリストは、実用的なビルドを提供するはずです。 &lt;code&gt;mvn package&lt;/code&gt; 実行することでテストできます（今のところ、「jarは空になります-コンテンツが含まれるようにマークされていません！」という警告は無視できます）。</target>
        </trans-unit>
        <trans-unit id="b71732935d22ec0a4e4fce1e7874cac908e82e99" translate="yes" xml:space="preserve">
          <source>The preceding merging rules apply to properties from all property sources, and not just files.</source>
          <target state="translated">前述のマージルールは、ファイルだけでなく、すべてのプロパティソースからのプロパティにも適用されます。</target>
        </trans-unit>
        <trans-unit id="055e5f209ecb4098348753f5eb40f747b659a2a3" translate="yes" xml:space="preserve">
          <source>The prefix &lt;code&gt;management.endpoint.&amp;lt;name&amp;gt;&lt;/code&gt; is used to uniquely identify the endpoint that is being configured.</source>
          <target state="translated">プレフィックス &lt;code&gt;management.endpoint.&amp;lt;name&amp;gt;&lt;/code&gt; は、構成されているエンドポイントを一意に識別するために使用されます。</target>
        </trans-unit>
        <trans-unit id="65313e493e0783aeb283e0bb4e6755a707889e75" translate="yes" xml:space="preserve">
          <source>The presence of a &lt;code&gt;com.hazelcast.client.config.ClientConfig&lt;/code&gt; bean.</source>
          <target state="translated">&lt;code&gt;com.hazelcast.client.config.ClientConfig&lt;/code&gt; Beanの存在。</target>
        </trans-unit>
        <trans-unit id="a2369f57e3bcf0e90e80c3eb3cd7afbbce955195" translate="yes" xml:space="preserve">
          <source>The presence of the &lt;code&gt;hazelcast.client.config&lt;/code&gt; system property.</source>
          <target state="translated">&lt;code&gt;hazelcast.client.config&lt;/code&gt; システムプロパティの存在。</target>
        </trans-unit>
        <trans-unit id="c356da4bdfc89eb196020056f14c74f9b9f8bb6a" translate="yes" xml:space="preserve">
          <source>The previous sections covered already many common use cases, such as compression, SSL or HTTP/2. However, if a configuration key doesn&amp;rsquo;t exist for your use case, you should then look at &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/api/org/springframework/boot/web/server/WebServerFactoryCustomizer.html&quot;&gt;&lt;code&gt;WebServerFactoryCustomizer&lt;/code&gt;&lt;/a&gt;. You can declare such a component and get access to the server factory relevant to your choice: you should select the variant for the chosen Server (Tomcat, Jetty, Reactor Netty, Undertow) and the chosen web stack (Servlet or Reactive).</source>
          <target state="translated">前のセクションでは、圧縮、SSL、HTTP / 2などの多くの一般的なユースケースについて説明しました。ただし、ユースケースの構成キーが存在しない場合は、&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/api/org/springframework/boot/web/server/WebServerFactoryCustomizer.html&quot;&gt; &lt;code&gt;WebServerFactoryCustomizer&lt;/code&gt; を&lt;/a&gt;確認する必要があります。このようなコンポーネントを宣言して、選択に関連するサーバーファクトリにアクセスできます。選択したサーバー（Tomcat、Jetty、Reactor Netty、Undertow）および選択したWebスタック（サーブレットまたはリアクティブ）のバリアントを選択する必要があります。</target>
        </trans-unit>
        <trans-unit id="8e999ec85a88ce16af514595f6f9d4a07964f533" translate="yes" xml:space="preserve">
          <source>The printed banner is registered as a singleton bean under the following name: &lt;code&gt;springBootBanner&lt;/code&gt;.</source>
          <target state="translated">印刷されたバナーは、 &lt;code&gt;springBootBanner&lt;/code&gt; という名前でシングルトンBeanとして登録されます。</target>
        </trans-unit>
        <trans-unit id="9e31f636f65fde44dee505a31a4128f9378a0df1" translate="yes" xml:space="preserve">
          <source>The processor picks up both classes and methods that are annotated with &lt;code&gt;@ConfigurationProperties&lt;/code&gt;.</source>
          <target state="translated">プロセッサは、 &lt;code&gt;@ConfigurationProperties&lt;/code&gt; アノテーションが付けられたクラスとメソッドの両方を取得します。</target>
        </trans-unit>
        <trans-unit id="71c7406518e18d7f4ccecf0c0f1386f2a29c76c7" translate="yes" xml:space="preserve">
          <source>The produces clause of the predicate can be determined by the &lt;code&gt;produces&lt;/code&gt; attribute of the &lt;code&gt;@DeleteOperation&lt;/code&gt;, &lt;code&gt;@ReadOperation&lt;/code&gt;, and &lt;code&gt;@WriteOperation&lt;/code&gt; annotations. The attribute is optional. If it is not used, the produces clause is determined automatically.</source>
          <target state="translated">述語のproduces句は、 &lt;code&gt;@DeleteOperation&lt;/code&gt; 、 &lt;code&gt;@ReadOperation&lt;/code&gt; 、および &lt;code&gt;@WriteOperation&lt;/code&gt; アノテーションの &lt;code&gt;produces&lt;/code&gt; 属性によって決定できます。この属性はオプションです。使用しない場合、produces句は自動的に決定されます。</target>
        </trans-unit>
        <trans-unit id="8d6b5f03d894005db4a13da96a2f187decd8ec8f" translate="yes" xml:space="preserve">
          <source>The properties above will bind to a &lt;code&gt;Map&lt;/code&gt; with &lt;code&gt;/key1&lt;/code&gt;, &lt;code&gt;/key2&lt;/code&gt; and &lt;code&gt;key3&lt;/code&gt; as the keys in the map.</source>
          <target state="translated">上記のプロパティはに結合する &lt;code&gt;Map&lt;/code&gt; で &lt;code&gt;/key1&lt;/code&gt; 、 &lt;code&gt;/key2&lt;/code&gt; と &lt;code&gt;key3&lt;/code&gt; マップ内のキーとして。</target>
        </trans-unit>
        <trans-unit id="9e3a58aa470931e890d7b620f962bb5d4b663321" translate="yes" xml:space="preserve">
          <source>The properties supported by auto configuration are shown in &lt;a href=&quot;appendix-application-properties#common-application-properties&quot;&gt;appendix-application-properties.html&lt;/a&gt;. Note that, for the most part, these properties (hyphenated or camelCase) map directly to the Apache Kafka dotted properties. Refer to the Apache Kafka documentation for details.</source>
          <target state="translated">自動構成でサポートされるプロパティは、&lt;a href=&quot;appendix-application-properties#common-application-properties&quot;&gt;appendix-application-properties.htmlに&lt;/a&gt;示されています。ほとんどの場合、これらのプロパティ（ハイフン付きまたはキャメルケース）は、ApacheKafkaのドット付きプロパティに直接マップされることに注意してください。詳細については、ApacheKafkaのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="ab17d3961622920fac81713de1cefca70efbc9c0" translate="yes" xml:space="preserve">
          <source>The properties that map to &lt;code&gt;@ConfigurationProperties&lt;/code&gt; classes available in Spring Boot, which are configured via properties files, YAML files, environment variables etc., are public API but the accessors (getters/setters) of the class itself are not meant to be used directly.</source>
          <target state="translated">Spring Bootで利用可能な &lt;code&gt;@ConfigurationProperties&lt;/code&gt; クラスにマップするプロパティは、プロパティファイル、YAMLファイル、環境変数などを介して構成されますが、パブリックAPIですが、クラス自体のアクセサー（ゲッター/セッター）を直接使用するためのものではありません。 。</target>
        </trans-unit>
        <trans-unit id="aeafe5b2bb58e54c0334ddd97d42f057d24a0d07" translate="yes" xml:space="preserve">
          <source>The reactive auto-configuration replaces the need to use &lt;code&gt;@Enable*WebSession&lt;/code&gt;.</source>
          <target state="translated">リアクティブ自動構成は、 &lt;code&gt;@Enable*WebSession&lt;/code&gt; を使用する必要性を置き換えます。</target>
        </trans-unit>
        <trans-unit id="46373140b6dc5df3d963805651a3df0796837afe" translate="yes" xml:space="preserve">
          <source>The recommended path is through the starters, even though it requires some jiggling. The following example shows how to set up the starters in Maven:</source>
          <target state="translated">推奨されるパスは、多少の揺らぎが必要ですが、スターターを経由することです。次の例は、Mavenでスターターを設定する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="2bf959309e331983c06e2803cb240b60d148f048" translate="yes" xml:space="preserve">
          <source>The reference documentation consists of the following sections:</source>
          <target state="translated">リファレンスドキュメントは、以下のセクションで構成されています。</target>
        </trans-unit>
        <trans-unit id="e95079408983727ba0a56d1ae2639fa11c83aa06" translate="yes" xml:space="preserve">
          <source>The reference documentation has the following appendices:</source>
          <target state="translated">リファレンスドキュメントには、以下のような付録があります。</target>
        </trans-unit>
        <trans-unit id="4edc275311b64c47aba2380542aad967eb05c3fe" translate="yes" xml:space="preserve">
          <source>The remote client application is designed to be run from within your IDE. You need to run &lt;code&gt;org.springframework.boot.devtools.RemoteSpringApplication&lt;/code&gt; with the same classpath as the remote project that you connect to. The application&amp;rsquo;s single required argument is the remote URL to which it connects.</source>
          <target state="translated">リモートクライアントアプリケーションは、IDE内から実行するように設計されています。接続するリモートプロジェクトと同じクラスパスを &lt;code&gt;org.springframework.boot.devtools.RemoteSpringApplication&lt;/code&gt; して、org.springframework.boot.devtools.RemoteSpringApplicationを実行する必要があります。アプリケーションの唯一の必須引数は、接続先のリモートURLです。</target>
        </trans-unit>
        <trans-unit id="6ee5714e6591b3eb48576dde612e181494c452fc" translate="yes" xml:space="preserve">
          <source>The remote client monitors your application classpath for changes in the same way as the &lt;a href=&quot;#using-boot-devtools-restart&quot;&gt;local restart&lt;/a&gt;. Any updated resource is pushed to the remote application and (&lt;em&gt;if required&lt;/em&gt;) triggers a restart. This can be helpful if you iterate on a feature that uses a cloud service that you do not have locally. Generally, remote updates and restarts are much quicker than a full rebuild and deploy cycle.</source>
          <target state="translated">リモートクライアントは、&lt;a href=&quot;#using-boot-devtools-restart&quot;&gt;ローカルの再起動&lt;/a&gt;と同じ方法で、アプリケーションのクラスパスの変更を監視します。更新されたリソースはすべてリモートアプリケーションにプッシュされ、（&lt;em&gt;必要に応じて&lt;/em&gt;）再起動をトリガーします。これは、ローカルにないクラウドサービスを使用する機能を繰り返す場合に役立ちます。一般に、リモート更新と再起動は、完全な再構築と展開のサイクルよりもはるかに高速です。</target>
        </trans-unit>
        <trans-unit id="05c45da3de98bec33e3dc20a9efb2627c562a78a" translate="yes" xml:space="preserve">
          <source>The replication factor for change log topics and repartition topics created by the stream processing application.</source>
          <target state="translated">ストリーム処理アプリケーションで作成された変更ログトピックとリパーティショントピックのレプリケーション係数。</target>
        </trans-unit>
        <trans-unit id="ff2f0d5eda0e910a90dcfd6626585b3587004c26" translate="yes" xml:space="preserve">
          <source>The reported measurements are the &lt;em&gt;sum&lt;/em&gt; of the statistics of all meters matching the meter name and any tags that have been applied. So in the example above, the returned &quot;Value&quot; statistic is the sum of the maximum memory footprints of &quot;Code Cache&quot;, &quot;Compressed Class Space&quot;, and &quot;Metaspace&quot; areas of the heap. If you only wanted to see the maximum size for the &quot;Metaspace&quot;, you could add an additional &lt;code&gt;tag=id:Metaspace&lt;/code&gt;, i.e. &lt;code&gt;/actuator/metrics/jvm.memory.max?tag=area:nonheap&amp;amp;tag=id:Metaspace&lt;/code&gt;.</source>
          <target state="translated">報告される測定値は、メーター名と適用されたタグに一致するすべてのメーターの統計の&lt;em&gt;合計&lt;/em&gt;です。したがって、上記の例では、返される「値」統計は、ヒープの「コードキャッシュ」、「圧縮クラススペース」、および「メタスペース」領域の最大メモリフットプリントの合計です。 「メタスペース」の最大サイズのみを確認したい場合は、 &lt;code&gt;tag=id:Metaspace&lt;/code&gt; 、つまり &lt;code&gt;/actuator/metrics/jvm.memory.max?tag=area:nonheap&amp;amp;tag=id:Metaspace&lt;/code&gt; を追加できます。</target>
        </trans-unit>
        <trans-unit id="5724023abab4c13a053844fc4ce12297e4512ef7" translate="yes" xml:space="preserve">
          <source>The restart technology provided by Spring Boot works by using two classloaders. Classes that do not change (for example, those from third-party jars) are loaded into a &lt;em&gt;base&lt;/em&gt; classloader. Classes that you are actively developing are loaded into a &lt;em&gt;restart&lt;/em&gt; classloader. When the application is restarted, the &lt;em&gt;restart&lt;/em&gt; classloader is thrown away and a new one is created. This approach means that application restarts are typically much faster than &amp;ldquo;cold starts&amp;rdquo;, since the &lt;em&gt;base&lt;/em&gt; classloader is already available and populated.</source>
          <target state="translated">Spring Bootが提供する再起動テクノロジーは、2つのクラスローダーを使用して機能します。変更されないクラス（たとえば、サードパーティのjarからのクラス）は、&lt;em&gt;基本&lt;/em&gt;クラスローダーにロードされます。アクティブに開発しているクラスは、&lt;em&gt;リスタート&lt;/em&gt;クラスローダーにロードされます。アプリケーションが再起動されると、&lt;em&gt;再起動&lt;/em&gt;クラスローダーは破棄され、新しいクラスローダーが作成されます。このアプローチは、&lt;em&gt;基本&lt;/em&gt;クラスローダーがすでに使用可能であり、データが入力されているため、通常、アプリケーションの再起動は「コールドスタート」よりもはるかに高速であることを意味します。</target>
        </trans-unit>
        <trans-unit id="da51f2668f485ab823ebb5ca1e57cc1aac59c885" translate="yes" xml:space="preserve">
          <source>The resulting jar contains the classes produced by compiling the application and all of the application&amp;rsquo;s dependencies so that it can then be run by using &lt;code&gt;java -jar&lt;/code&gt;. The jar file also contains entries from the application&amp;rsquo;s classpath. You can add and remove explicit paths to the jar by using &lt;code&gt;--include&lt;/code&gt; and &lt;code&gt;--exclude&lt;/code&gt;. Both are comma-separated, and both accept prefixes, in the form of &amp;ldquo;+&amp;rdquo; and &amp;ldquo;-&amp;rdquo;, to signify that they should be removed from the defaults. The default includes are as follows:</source>
          <target state="translated">結果のjarには、アプリケーションのコンパイルによって生成されたクラスと、アプリケーションのすべての依存関係が含まれているため、 &lt;code&gt;java -jar&lt;/code&gt; jarを使用して実行できます。jarファイルには、アプリケーションのクラスパスからのエントリも含まれています。 &lt;code&gt;--include&lt;/code&gt; および &lt;code&gt;--exclude&lt;/code&gt; を使用して、jarへの明示的なパスを追加および削除できます。どちらもコンマで区切られ、「+」と「-」の形式のプレフィックスを受け入れて、デフォルトから削除する必要があることを示します。デフォルトのインクルードは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="d6ab74c78499e6ae245986c3f7cf71ebf88816ae" translate="yes" xml:space="preserve">
          <source>The root directory of Java class files</source>
          <target state="translated">Javaクラスファイルのルートディレクトリ</target>
        </trans-unit>
        <trans-unit id="8a913686039b3b4682e4ce7f04b2c4236e932082" translate="yes" xml:space="preserve">
          <source>The root name of the pid folder (&lt;code&gt;/var/run&lt;/code&gt; by default).</source>
          <target state="translated">pidフォルダーのルート名（デフォルトでは &lt;code&gt;/var/run&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="6063d56acda1431d186500ef6658afac24c3a1de" translate="yes" xml:space="preserve">
          <source>The runner can also be used to display the &lt;code&gt;ConditionEvaluationReport&lt;/code&gt;. The report can be printed at &lt;code&gt;INFO&lt;/code&gt; or &lt;code&gt;DEBUG&lt;/code&gt; level. The following example shows how to use the &lt;code&gt;ConditionEvaluationReportLoggingListener&lt;/code&gt; to print the report in auto-configuration tests.</source>
          <target state="translated">ランナーを使用して、 &lt;code&gt;ConditionEvaluationReport&lt;/code&gt; を表示することもできます。レポートは、 &lt;code&gt;INFO&lt;/code&gt; または &lt;code&gt;DEBUG&lt;/code&gt; レベルで印刷できます。次の例は、 &lt;code&gt;ConditionEvaluationReportLoggingListener&lt;/code&gt; を使用して、自動構成テストでレポートを印刷する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="fdefdeb606fd8e2103769c19124ef50d3f866db5" translate="yes" xml:space="preserve">
          <source>The same JSON can also be provided as a system property:</source>
          <target state="translated">同じJSONをシステムプロパティとして提供することもできます。</target>
        </trans-unit>
        <trans-unit id="168a430d6f663c315f6c5f56c0aa88991305dfe9" translate="yes" xml:space="preserve">
          <source>The same obstacle and the same features exist for other auto-configured Spring Data repository types (Elasticsearch, Solr, and others). To work with them, change the names of the annotations and flags accordingly.</source>
          <target state="translated">他の自動設定されたSpring Dataリポジトリタイプ(Elasticsearch、Solrなど)にも同じ障害と同じ機能が存在します。それらを扱うには、アノテーションとフラグの名前を適宜変更してください。</target>
        </trans-unit>
        <trans-unit id="5d5bfb755eabcdbe9aebaee8cf0c09e0c0774e0f" translate="yes" xml:space="preserve">
          <source>The same properties are applicable for both servlet and reactive applications.</source>
          <target state="translated">サーブレットとリアクティブアプリケーションの両方に同じプロパティが適用されます。</target>
        </trans-unit>
        <trans-unit id="1c730474fd84a48f2b2ead84f6a28c1587491542" translate="yes" xml:space="preserve">
          <source>The script mode.</source>
          <target state="translated">スクリプトモード。</target>
        </trans-unit>
        <trans-unit id="8949638a2a05ffe95800562a9365b290276e0ffe" translate="yes" xml:space="preserve">
          <source>The script supports the following features:</source>
          <target state="translated">スクリプトは以下の機能をサポートしています。</target>
        </trans-unit>
        <trans-unit id="27a47727a0004a9898df6297805d2e651573334e" translate="yes" xml:space="preserve">
          <source>The search algorithm works up from the package that contains the test until it finds a class annotated with &lt;code&gt;@SpringBootApplication&lt;/code&gt; or &lt;code&gt;@SpringBootConfiguration&lt;/code&gt;. As long as you &lt;a href=&quot;using-spring-boot#using-boot-structuring-your-code&quot;&gt;structured your code&lt;/a&gt; in a sensible way, your main configuration is usually found.</source>
          <target state="translated">検索アルゴリズムは、テストを含むパッケージから、 &lt;code&gt;@SpringBootApplication&lt;/code&gt; または &lt;code&gt;@SpringBootConfiguration&lt;/code&gt; でアノテーションが付けられたクラスが見つかるまで機能します。賢明な方法で&lt;a href=&quot;using-spring-boot#using-boot-structuring-your-code&quot;&gt;コード&lt;/a&gt;を構造化した限り、通常、メインの構成が見つかります。</target>
        </trans-unit>
        <trans-unit id="0ef048ac8f05ec378e2f36747fbed1d6f6321b59" translate="yes" xml:space="preserve">
          <source>The search order for properties (where it makes sense to look in more than one place) is environment variables, system properties, &lt;code&gt;loader.properties&lt;/code&gt;, the exploded archive manifest, and the archive manifest.</source>
          <target state="translated">プロパティの検索順序（複数の場所を調べることが理にかなっている場合）は、環境変数、システムプロパティ、 &lt;code&gt;loader.properties&lt;/code&gt; 、展開されたアーカイブマニフェスト、およびアーカイブマニフェストです。</target>
        </trans-unit>
        <trans-unit id="b6312603a7b54c45ee7443c027584abf8c08965e" translate="yes" xml:space="preserve">
          <source>The second class-level annotation is &lt;code&gt;@EnableAutoConfiguration&lt;/code&gt;. This annotation tells Spring Boot to &amp;ldquo;guess&amp;rdquo; how you want to configure Spring, based on the jar dependencies that you have added. Since &lt;code&gt;spring-boot-starter-web&lt;/code&gt; added Tomcat and Spring MVC, the auto-configuration assumes that you are developing a web application and sets up Spring accordingly.</source>
          <target state="translated">2番目のクラスレベルのアノテーションは &lt;code&gt;@EnableAutoConfiguration&lt;/code&gt; です。このアノテーションは、追加したjar依存関係に基づいて、Springをどのように構成するかを「推測」するようにSpringBootに指示します。以来 &lt;code&gt;spring-boot-starter-web&lt;/code&gt; TomcatとSpring MVCのを追加し、自動設定を使用すると、それに応じて春までのWebアプリケーションとのセットを開発していることを前提としています。</target>
        </trans-unit>
        <trans-unit id="5f1fdf3ab80e4fd38aa7691c4749d381b8f91feb" translate="yes" xml:space="preserve">
          <source>The spec to use to create caches. See CaffeineSpec for more details on the spec format.</source>
          <target state="translated">キャッシュを作成する際に使用するスペック。仕様のフォーマットの詳細については CaffeineSpec を参照してください。</target>
        </trans-unit>
        <trans-unit id="6b040e673e6ea91497941fb691f0dd3de3dce750" translate="yes" xml:space="preserve">
          <source>The special &lt;strong&gt;any&lt;/strong&gt; provider value permits any additional values to be provided. Regular value validation based on the property type should be applied if this is supported.</source>
          <target state="translated">特別な&lt;strong&gt;any&lt;/strong&gt;プロバイダー値により、追加の値を提供できます。これがサポートされている場合は、プロパティタイプに基づく定期的な値の検証を適用する必要があります。</target>
        </trans-unit>
        <trans-unit id="5ee4e62e24d83e6159af003e9a9637144aff6d7e" translate="yes" xml:space="preserve">
          <source>The specific beans that you want to test should be specified by using the &lt;code&gt;value&lt;/code&gt; or &lt;code&gt;components&lt;/code&gt; attribute of &lt;code&gt;@RestClientTest&lt;/code&gt;, as shown in the following example:</source>
          <target state="translated">次の例に示すように、テストする特定のBeanは、 &lt;code&gt;@RestClientTest&lt;/code&gt; &lt;code&gt;value&lt;/code&gt; または &lt;code&gt;components&lt;/code&gt; 属性を使用して指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="624aaade1857f7a5b59667c78133eb24ef9ab303" translate="yes" xml:space="preserve">
          <source>The standard ISO-8601 format &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/Duration.html#parse-java.lang.CharSequence-&quot;&gt;used by &lt;code&gt;java.time.Duration&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/Duration.html#parse-java.lang.CharSequence-&quot;&gt; &lt;code&gt;java.time.Duration&lt;/code&gt; で&lt;/a&gt;使用される標準のISO-8601形式</target>
        </trans-unit>
        <trans-unit id="ed31ee8401c6a76eca5a62c0884f080d42485bbb" translate="yes" xml:space="preserve">
          <source>The standard ISO-8601 format &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/Period.html#parse-java.lang.CharSequence-&quot;&gt;used by &lt;code&gt;java.time.Period&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/Period.html#parse-java.lang.CharSequence-&quot;&gt; &lt;code&gt;java.time.Period&lt;/code&gt; で&lt;/a&gt;使用される標準のISO-8601形式</target>
        </trans-unit>
        <trans-unit id="5dc4f420111ffb67b2bd0a0627ff1f97280682bd" translate="yes" xml:space="preserve">
          <source>The starter is really an empty jar. Its only purpose is to provide the necessary dependencies to work with the library. You can think of it as an opinionated view of what is required to get started.</source>
          <target state="translated">スターターは本当に空のjarです。その唯一の目的は、ライブラリで動作するために必要な依存関係を提供することです。これは、開始するために必要なものについての意見を述べたものと考えることができます。</target>
        </trans-unit>
        <trans-unit id="3f48e8937e7bbb1ea84a7ac89bdba10dde227307" translate="yes" xml:space="preserve">
          <source>The starters contain a lot of the dependencies that you need to get a project up and running quickly and with a consistent, supported set of managed transitive dependencies.</source>
          <target state="translated">スターターには、プロジェクトを迅速に立ち上げて実行するために必要な依存関係の多くが含まれており、一貫してサポートされている管理された遷移依存関係のセットが含まれています。</target>
        </trans-unit>
        <trans-unit id="d68fc12f2239c1310b5a39d4f522ee78a0badfdc" translate="yes" xml:space="preserve">
          <source>The support of Infinispan in Spring Boot is restricted to the embedded mode and is quite basic. If you want more options, you should use the official Infinispan Spring Boot starter instead. See &lt;a href=&quot;https://github.com/infinispan/infinispan-spring-boot&quot;&gt;Infinispan&amp;rsquo;s documentation&lt;/a&gt; for more details.</source>
          <target state="translated">Spring BootでのInfinispanのサポートは、組み込みモードに制限されており、非常に基本的です。より多くのオプションが必要な場合は、代わりに公式のInfinispan SpringBootスターターを使用する必要があります。詳細については、&lt;a href=&quot;https://github.com/infinispan/infinispan-spring-boot&quot;&gt;Infinispanのドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="d57205dec187fccf01eb0d37bb7fb6d672da7cb9" translate="yes" xml:space="preserve">
          <source>The thread pool uses 8 core threads that can grow and shrink according to the load. Those default settings can be fine-tuned using the &lt;code&gt;spring.task.execution&lt;/code&gt; namespace as shown in the following example:</source>
          <target state="translated">スレッドプールは、負荷に応じて拡大および縮小できる8つのコアスレッドを使用します。これらのデフォルト設定は、次の例に示すように、 &lt;code&gt;spring.task.execution&lt;/code&gt; 名前空間を使用して微調整できます。</target>
        </trans-unit>
        <trans-unit id="139d12d3a07428b3d60c8bbc86ddfb25804bd847" translate="yes" xml:space="preserve">
          <source>The time in seconds to wait when stopping the application before forcing a shutdown (&lt;code&gt;60&lt;/code&gt; by default).</source>
          <target state="translated">シャットダウンを強制する前にアプリケーションを停止するときに待機する秒単位の時間（デフォルトでは &lt;code&gt;60&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="b4b0a0193660cea56e48cd8e01cd3774554d0171" translate="yes" xml:space="preserve">
          <source>The title of your application, as declared in &lt;code&gt;MANIFEST.MF&lt;/code&gt;. For example &lt;code&gt;Implementation-Title: MyApp&lt;/code&gt; is printed as &lt;code&gt;MyApp&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;MANIFEST.MF&lt;/code&gt; で宣言されているアプリケーションのタイトル。たとえば、 &lt;code&gt;Implementation-Title: MyApp&lt;/code&gt; はMyAppとして出力され &lt;code&gt;MyApp&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ff9052cf96a405ee7d1b452dbc9249d22577c874" translate="yes" xml:space="preserve">
          <source>The transaction manager's unique name. Defaults to the machine's IP address. If you plan to run more than one transaction manager against one database you must set this property to a unique value.</source>
          <target state="translated">トランザクション・マネージャーの一意の名前。既定値はマシンの IP アドレスです。1つのデータベースに対して複数のトランザクション・マネージャを実行する予定の場合、このプロパティを一意の値に設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="323e3efa0c7ca762ce2e087a296e387fc018a02b" translate="yes" xml:space="preserve">
          <source>The underlying component scan configuration of &lt;code&gt;@SpringBootApplication&lt;/code&gt; defines exclude filters that are used to make sure slicing works as expected. If you are using an explicit &lt;code&gt;@ComponentScan&lt;/code&gt; directive on your &lt;code&gt;@SpringBootApplication&lt;/code&gt;-annotated class, be aware that those filters will be disabled. If you are using slicing, you should define them again.</source>
          <target state="translated">&lt;code&gt;@SpringBootApplication&lt;/code&gt; の基礎となるコンポーネントスキャン構成は、スライスが期待どおりに機能することを確認するために使用される除外フィルターを定義します。 &lt;code&gt;@SpringBootApplication&lt;/code&gt; アノテーションが付けられたクラスで明示的な &lt;code&gt;@ComponentScan&lt;/code&gt; ディレクティブを使用している場合は、これらのフィルターが無効になることに注意してください。スライスを使用している場合は、それらを再度定義する必要があります。</target>
        </trans-unit>
        <trans-unit id="5a9ad7c14f29550703bab05759d80c59dfde5610" translate="yes" xml:space="preserve">
          <source>The use of &lt;code&gt;java.util.Optional&lt;/code&gt; with &lt;code&gt;@ConfigurationProperties&lt;/code&gt; is not recommended as it is primarily intended for use as a return type. As such, it is not well-suited to configuration property injection. For consistency with properties of other types, if you do declare an &lt;code&gt;Optional&lt;/code&gt; property and it has no value, &lt;code&gt;null&lt;/code&gt; rather than an empty &lt;code&gt;Optional&lt;/code&gt; will be bound.</source>
          <target state="translated">&lt;code&gt;@ConfigurationProperties&lt;/code&gt; で &lt;code&gt;java.util.Optional&lt;/code&gt; を使用することは、主に戻り値の型として使用することを目的としているため、お勧めしません。そのため、構成プロパティの注入には適していません。他のタイプのプロパティとの一貫性を保つために、 &lt;code&gt;Optional&lt;/code&gt; プロパティを宣言し、そのプロパティに値がない場合、空の &lt;code&gt;Optional&lt;/code&gt; ではなく &lt;code&gt;null&lt;/code&gt; がバインドされます。</target>
        </trans-unit>
        <trans-unit id="3c4d918ea289cd8ae552883b8f0e061da31c8de2" translate="yes" xml:space="preserve">
          <source>The user that will be used to run the application. When not set, the user that owns the jar file will be used.</source>
          <target state="translated">アプリケーションの実行に使用されるユーザー。設定されていない場合は、jar ファイルを所有するユーザーが使用されます。</target>
        </trans-unit>
        <trans-unit id="e8fa0eec0536d894dc988517de76d08301476900" translate="yes" xml:space="preserve">
          <source>The values in &lt;code&gt;application.properties&lt;/code&gt; and &lt;code&gt;application.yml&lt;/code&gt; are filtered through the existing &lt;code&gt;Environment&lt;/code&gt; when they are used, so you can refer back to previously defined values (for example, from System properties). The standard &lt;code&gt;${name}&lt;/code&gt; property-placeholder syntax can be used anywhere within a value.</source>
          <target state="translated">&lt;code&gt;application.properties&lt;/code&gt; と &lt;code&gt;application.yml&lt;/code&gt; の値は、使用時に既存の &lt;code&gt;Environment&lt;/code&gt; フィルタリングされるため、以前に定義された値を参照できます（たとえば、システムプロパティから）。標準の &lt;code&gt;${name}&lt;/code&gt; プロパティ-プレースホルダー構文は、値内のどこでも使用できます。</target>
        </trans-unit>
        <trans-unit id="9190cfa6216bcb27da846cafe96b7eeaa3f4b953" translate="yes" xml:space="preserve">
          <source>The various logging systems can be activated by including the appropriate libraries on the classpath and can be further customized by providing a suitable configuration file in the root of the classpath or in a location specified by the following Spring &lt;code&gt;Environment&lt;/code&gt; property: &lt;code&gt;logging.config&lt;/code&gt;.</source>
          <target state="translated">さまざまなロギングシステムは、クラスパスに適切なライブラリを含めることでアクティブ化でき、クラスパスのルートまたは次のSpring &lt;code&gt;Environment&lt;/code&gt; プロパティで指定された場所に適切な構成ファイルを提供することでさらにカスタマイズできます： &lt;code&gt;logging.config&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ea9707d293ccf299cb339d44d111146843427af1" translate="yes" xml:space="preserve">
          <source>The version number of your application, as declared in &lt;code&gt;MANIFEST.MF&lt;/code&gt; and formatted for display (surrounded with brackets and prefixed with &lt;code&gt;v&lt;/code&gt;). For example &lt;code&gt;(v1.0)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;MANIFEST.MF&lt;/code&gt; で宣言され、表示用にフォーマットされたアプリケーションのバージョン番号（角かっこで囲まれ、接頭辞 &lt;code&gt;v&lt;/code&gt; が付いています）。たとえば &lt;code&gt;(v1.0)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4e91b213521b6a64ea8c6dc0164ca179f76d174e" translate="yes" xml:space="preserve">
          <source>The version number of your application, as declared in &lt;code&gt;MANIFEST.MF&lt;/code&gt;. For example, &lt;code&gt;Implementation-Version: 1.0&lt;/code&gt; is printed as &lt;code&gt;1.0&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;MANIFEST.MF&lt;/code&gt; で宣言されているアプリケーションのバージョン番号。例えば、 &lt;code&gt;Implementation-Version: 1.0&lt;/code&gt; として印刷される &lt;code&gt;1.0&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c5f0752aeec84e6d3c5af5a00d9ae91322fa8c47" translate="yes" xml:space="preserve">
          <source>The version of the Servlet API has been overridden as, unlike Tomcat 9 and Undertow 2.0, Jetty 9.4 does not support Servlet 4.0.</source>
          <target state="translated">Tomcat 9やUndertow 2.0とは異なり、Jetty 9.4はServlet 4.0をサポートしていないため、Servlet APIのバージョンはオーバーライドされています。</target>
        </trans-unit>
        <trans-unit id="58a0458eceffaecaf4c599833e34501a0c8b945b" translate="yes" xml:space="preserve">
          <source>Then deploy with &lt;code&gt;mvn appengine:deploy&lt;/code&gt; (if you need to authenticate first, the build fails).</source>
          <target state="translated">次に、 &lt;code&gt;mvn appengine:deploy&lt;/code&gt; を使用してデプロイします（最初に認証する必要がある場合、ビルドは失敗します）。</target>
        </trans-unit>
        <trans-unit id="989a333b31e0cf5776a6c5f16ef1d1553ecf66ac" translate="yes" xml:space="preserve">
          <source>Then run it from a shell, as follows:</source>
          <target state="translated">そして、以下のようにシェルから実行します。</target>
        </trans-unit>
        <trans-unit id="57a05dc94d517aab86621a8e7972896e91e5e20c" translate="yes" xml:space="preserve">
          <source>Then the Spring Boot banner is not printed on startup, and the application is not starting an embedded web server.</source>
          <target state="translated">すると、起動時にSpring Bootバナーが印刷されず、アプリケーションが組み込みWebサーバーを起動していません。</target>
        </trans-unit>
        <trans-unit id="8b9325ac9ca277c8064872ad0325431cccfac3cb" translate="yes" xml:space="preserve">
          <source>Then you can use the factory in any &lt;code&gt;@JmsListener&lt;/code&gt;-annotated method as follows:</source>
          <target state="translated">次に、次のように &lt;code&gt;@JmsListener&lt;/code&gt; アノテーション付きメソッドでファクトリを使用できます。</target>
        </trans-unit>
        <trans-unit id="5a2377c4d541cda703168e28b29a9d95f9ad14ed" translate="yes" xml:space="preserve">
          <source>Then you can use the factory in any &lt;code&gt;@RabbitListener&lt;/code&gt;-annotated method, as follows:</source>
          <target state="translated">次に、次のように、 &lt;code&gt;@RabbitListener&lt;/code&gt; RabbitListenerアノテーション付きメソッドでファクトリを使用できます。</target>
        </trans-unit>
        <trans-unit id="58c53a30c8e030c6abc7314a5b286940396add8c" translate="yes" xml:space="preserve">
          <source>Then you need to set the &lt;code&gt;spring.devtools.remote.secret&lt;/code&gt; property. Like any important password or secret, the value should be unique and strong such that it cannot be guessed or brute-forced.</source>
          <target state="translated">次に、 &lt;code&gt;spring.devtools.remote.secret&lt;/code&gt; プロパティを設定する必要があります。他の重要なパスワードやシークレットと同様に、値は一意で強力である必要があり、推測したりブルートフォース攻撃したりすることはできません。</target>
        </trans-unit>
        <trans-unit id="384ff344f842b8f0560a95553388cfbf26ccde90" translate="yes" xml:space="preserve">
          <source>Then your &lt;code&gt;trigger-file&lt;/code&gt; property would be:</source>
          <target state="translated">その場合、 &lt;code&gt;trigger-file&lt;/code&gt; プロパティは次のようになります。</target>
        </trans-unit>
        <trans-unit id="ccdfa9227a253a5861f872456e0f4d5fa4d8beab" translate="yes" xml:space="preserve">
          <source>There are a few beans that you can define in your own configuration to override those provided by the auto-configuration:</source>
          <target state="translated">自動設定で提供されるものを上書きするために、独自の設定で定義できるビーンがいくつかあります。</target>
        </trans-unit>
        <trans-unit id="425abf8c629c289c50cf0ad1ec052005ed1a9a5b" translate="yes" xml:space="preserve">
          <source>There are a lot of logging frameworks available for Java. Do not worry if the above list seems confusing. Generally, you do not need to change your logging dependencies and the Spring Boot defaults work just fine.</source>
          <target state="translated">Javaで利用できるロギングフレームワークはたくさんあります。上記のリストが混乱しているように見えても心配しないでください。一般的に、ロギングの依存関係を変更する必要はありませんし、Spring Boot のデフォルトでも問題なく動作します。</target>
        </trans-unit>
        <trans-unit id="e8ade31e706a9780e6e6bc8690ff1ecdaf000ec2" translate="yes" xml:space="preserve">
          <source>There are also flags (&lt;code&gt;spring.data.*.repositories.enabled&lt;/code&gt; and &lt;code&gt;spring.data.*.repositories.type&lt;/code&gt;) that you can use to switch the auto-configured repositories on and off in external configuration. Doing so is useful, for instance, in case you want to switch off the Mongo repositories and still use the auto-configured &lt;code&gt;MongoTemplate&lt;/code&gt;.</source>
          <target state="translated">外部構成で自動構成されたリポジトリーのオンとオフを切り替えるために使用できるフラグ（ &lt;code&gt;spring.data.*.repositories.enabled&lt;/code&gt; および &lt;code&gt;spring.data.*.repositories.type&lt;/code&gt; ）もあります。これを行うと、たとえば、Mongoリポジトリをオフにして、自動構成された &lt;code&gt;MongoTemplate&lt;/code&gt; を引き続き使用する場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="de8a4cfb76232f0ed266f7a57f84db29be0f3c47" translate="yes" xml:space="preserve">
          <source>There are known classloading issues with Java Util Logging that cause problems when running from an 'executable jar'. We recommend that you avoid it when running from an 'executable jar' if at all possible.</source>
          <target state="translated">Java Util Logging には、「実行可能な jar」から実行する際に問題を引き起こすクラスロードの問題が知られています。可能であれば、「実行可能な jar」から実行する際には、これを避けることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="ceaec725a4c57314c345ad0f1d94e77aa5f5f694" translate="yes" xml:space="preserve">
          <source>There are other ways to deal with HTTP clients that don&amp;rsquo;t consistently send proper &quot;Accept&quot; request headers. Instead of using suffix matching, we can use a query parameter to ensure that requests like &lt;code&gt;&quot;GET /projects/spring-boot?format=json&quot;&lt;/code&gt; will be mapped to &lt;code&gt;@GetMapping(&quot;/projects/spring-boot&quot;)&lt;/code&gt;:</source>
          <target state="translated">適切な「Accept」リクエストヘッダーを一貫して送信しないHTTPクライアントを処理する方法は他にもあります。サフィックスマッチングを使用する代わりに、クエリパラメータを使用して、 &lt;code&gt;&quot;GET /projects/spring-boot?format=json&quot;&lt;/code&gt; &lt;code&gt;@GetMapping(&quot;/projects/spring-boot&quot;)&lt;/code&gt; マップされるようにすることができます。</target>
        </trans-unit>
        <trans-unit id="c0f87a01efdb08c2ca7aa927d4de704b233ead45" translate="yes" xml:space="preserve">
          <source>There are several options for hot reloading. The recommended approach is to use &lt;a href=&quot;using-spring-boot#using-boot-devtools&quot;&gt;&lt;code&gt;spring-boot-devtools&lt;/code&gt;&lt;/a&gt;, as it provides additional development-time features, such as support for fast application restarts and LiveReload as well as sensible development-time configuration (such as template caching). Devtools works by monitoring the classpath for changes. This means that static resource changes must be &quot;built&quot; for the change to take effect. By default, this happens automatically in Eclipse when you save your changes. In IntelliJ IDEA, the Make Project command triggers the necessary build. Due to the &lt;a href=&quot;using-spring-boot#using-boot-devtools-restart-exclude&quot;&gt;default restart exclusions&lt;/a&gt;, changes to static resources do not trigger a restart of your application. They do, however, trigger a live reload.</source>
          <target state="translated">ホットリロードにはいくつかのオプションがあります。推奨されるアプローチは、&lt;a href=&quot;using-spring-boot#using-boot-devtools&quot;&gt; &lt;code&gt;spring-boot-devtools&lt;/code&gt; &lt;/a&gt;を使用することです。これは、アプリケーションの高速再起動やLiveReloadのサポートなどの追加の開発時機能と、適切な開発時構成（テンプレートキャッシュなど）を提供するためです。 Devtoolsは、クラスパスの変更を監視することで機能します。つまり、変更を有効にするには、静的リソースの変更を「構築」する必要があります。デフォルトでは、これは変更を保存するときにEclipseで自動的に行われます。 IntelliJ IDEAでは、MakeProjectコマンドが必要なビルドをトリガーします。以下のために&lt;a href=&quot;using-spring-boot#using-boot-devtools-restart-exclude&quot;&gt;、デフォルトの再起動の除外は&lt;/a&gt;、静的なリソースへの変更は、アプリケーションの再起動を誘発しません。ただし、ライブリロードはトリガーされます。</target>
        </trans-unit>
        <trans-unit id="557faa4b4531f554689e50f1bb964199ae699721" translate="yes" xml:space="preserve">
          <source>There are some &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-cli/samples&quot;&gt;sample groovy scripts&lt;/a&gt; available from the GitHub repository that you can use to try out the Spring Boot CLI. There is also extensive Javadoc throughout the &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli&quot;&gt;source code&lt;/a&gt;.</source>
          <target state="translated">Spring BootCLIを試すために使用できるGitHubリポジトリから入手できる&lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-cli/samples&quot;&gt;サンプルのGroovyスクリプト&lt;/a&gt;がいくつかあります。&lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli&quot;&gt;ソースコード&lt;/a&gt;全体に広範なJavadocもあります。</target>
        </trans-unit>
        <trans-unit id="538107ecc74950d032826f75a558da2d873a3ae1" translate="yes" xml:space="preserve">
          <source>There are some restrictions when creating an &lt;code&gt;ApplicationContext&lt;/code&gt; hierarchy. For example, Web components &lt;strong&gt;must&lt;/strong&gt; be contained within the child context, and the same &lt;code&gt;Environment&lt;/code&gt; is used for both parent and child contexts. See the &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/api/org/springframework/boot/builder/SpringApplicationBuilder.html&quot;&gt;&lt;code&gt;SpringApplicationBuilder&lt;/code&gt; Javadoc&lt;/a&gt; for full details.</source>
          <target state="translated">&lt;code&gt;ApplicationContext&lt;/code&gt; 階層を作成する場合、いくつかの制限があります。たとえば、Webコンポーネントは子コンテキスト内に含まれている&lt;strong&gt;必要&lt;/strong&gt;があり、親コンテキストと子コンテキストの両方に同じ &lt;code&gt;Environment&lt;/code&gt; が使用されます。参照してください&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/api/org/springframework/boot/builder/SpringApplicationBuilder.html&quot;&gt; &lt;code&gt;SpringApplicationBuilder&lt;/code&gt; のJavadocの&lt;/a&gt;完全な詳細については、を。</target>
        </trans-unit>
        <trans-unit id="b2c27f6f090ba9b26d24ad02e691e580906bc8c4" translate="yes" xml:space="preserve">
          <source>There are three launcher subclasses (&lt;code&gt;JarLauncher&lt;/code&gt;, &lt;code&gt;WarLauncher&lt;/code&gt;, and &lt;code&gt;PropertiesLauncher&lt;/code&gt;). Their purpose is to load resources (&lt;code&gt;.class&lt;/code&gt; files and so on) from nested jar files or war files in directories (as opposed to those explicitly on the classpath). In the case of &lt;code&gt;JarLauncher&lt;/code&gt; and &lt;code&gt;WarLauncher&lt;/code&gt;, the nested paths are fixed. &lt;code&gt;JarLauncher&lt;/code&gt; looks in &lt;code&gt;BOOT-INF/lib/&lt;/code&gt;, and &lt;code&gt;WarLauncher&lt;/code&gt; looks in &lt;code&gt;WEB-INF/lib/&lt;/code&gt; and &lt;code&gt;WEB-INF/lib-provided/&lt;/code&gt;. You can add extra jars in those locations if you want more. The &lt;code&gt;PropertiesLauncher&lt;/code&gt; looks in &lt;code&gt;BOOT-INF/lib/&lt;/code&gt; in your application archive by default. You can add additional locations by setting an environment variable called &lt;code&gt;LOADER_PATH&lt;/code&gt; or &lt;code&gt;loader.path&lt;/code&gt; in &lt;code&gt;loader.properties&lt;/code&gt; (which is a comma-separated list of directories, archives, or directories within archives).</source>
          <target state="translated">3つのランチャーサブクラス（ &lt;code&gt;JarLauncher&lt;/code&gt; 、 &lt;code&gt;WarLauncher&lt;/code&gt; 、および &lt;code&gt;PropertiesLauncher&lt;/code&gt; ）があります。それらの目的は、（クラスパスに明示的にあるものではなく）ディレクトリ内のネストされたjarファイルまたはwarファイルからリソース（ &lt;code&gt;.class&lt;/code&gt; ファイルなど）をロードすることです。以下の場合に &lt;code&gt;JarLauncher&lt;/code&gt; と &lt;code&gt;WarLauncher&lt;/code&gt; 、ネストされたパスが固定されています。 &lt;code&gt;JarLauncher&lt;/code&gt; は &lt;code&gt;BOOT-INF/lib/&lt;/code&gt; 検索し、 &lt;code&gt;WarLauncher&lt;/code&gt; は &lt;code&gt;WEB-INF/lib/&lt;/code&gt; および &lt;code&gt;WEB-INF/lib-provided/&lt;/code&gt; 検索します。さらに必要な場合は、これらの場所にjarを追加できます。 &lt;code&gt;PropertiesLauncher&lt;/code&gt; のルックスで &lt;code&gt;BOOT-INF/lib/&lt;/code&gt; デフォルトでは、アプリケーションアーカイブのBOOT-INF / lib /。あなたは、という環境変数設定することで、追加の場所を追加することができます &lt;code&gt;LOADER_PATH&lt;/code&gt; または &lt;code&gt;loader.path&lt;/code&gt; で &lt;code&gt;loader.properties&lt;/code&gt; （アーカイブ内のディレクトリ、アーカイブ、またはディレクトリのカンマ区切りリストです）。</target>
        </trans-unit>
        <trans-unit id="27a0665393b541f06548169da01a06cadb355c70" translate="yes" xml:space="preserve">
          <source>There are three main approaches to &lt;code&gt;RestTemplate&lt;/code&gt; customization, depending on how broadly you want the customizations to apply.</source>
          <target state="translated">&lt;code&gt;RestTemplate&lt;/code&gt; のカスタマイズには、カスタマイズをどの程度広く適用するかに応じて、3つの主要なアプローチがあります。</target>
        </trans-unit>
        <trans-unit id="f368e4efabb8490ea532fbe55068854e1de9ba37" translate="yes" xml:space="preserve">
          <source>There are three main approaches to &lt;code&gt;WebClient&lt;/code&gt; customization, depending on how broadly you want the customizations to apply.</source>
          <target state="translated">&lt;code&gt;WebClient&lt;/code&gt; のカスタマイズには、カスタマイズをどの程度広く適用するかに応じて、3つの主要なアプローチがあります。</target>
        </trans-unit>
        <trans-unit id="a1226d8e7751fd57d5965a5eeb7a27ca0e104cfd" translate="yes" xml:space="preserve">
          <source>There are two common volume mount patterns that can be use:</source>
          <target state="translated">一般的なボリュームマウントのパターンは2つあります。</target>
        </trans-unit>
        <trans-unit id="8357a4edc615e769472974e0f70ba5355cf5c226" translate="yes" xml:space="preserve">
          <source>There are two ways to customize the underlying &lt;code&gt;javax.cache.cacheManager&lt;/code&gt;:</source>
          <target state="translated">基盤となる &lt;code&gt;javax.cache.cacheManager&lt;/code&gt; をカスタマイズする方法は2つあります。</target>
        </trans-unit>
        <trans-unit id="88c30a36fa616a98131ac6657138bbe58b5f5e86" translate="yes" xml:space="preserve">
          <source>There is a &lt;code&gt;spring-boot-starter-data-redis&lt;/code&gt; &amp;ldquo;Starter&amp;rdquo; for collecting the dependencies in a convenient way. By default, it uses &lt;a href=&quot;https://github.com/lettuce-io/lettuce-core/&quot;&gt;Lettuce&lt;/a&gt;. That starter handles both traditional and reactive applications.</source>
          <target state="translated">ある &lt;code&gt;spring-boot-starter-data-redis&lt;/code&gt; 便利な方法で依存関係を収集するための「スターター」を。デフォルトでは、&lt;a href=&quot;https://github.com/lettuce-io/lettuce-core/&quot;&gt;レタスを&lt;/a&gt;使用します。そのスターターは、従来のアプリケーションとリアクティブアプリケーションの両方を処理します。</target>
        </trans-unit>
        <trans-unit id="839c5fcc904189d453d4c2904fd18c00ad3f0581" translate="yes" xml:space="preserve">
          <source>There is a really useful &lt;code&gt;ConditionEvaluationReport&lt;/code&gt; available in any Spring Boot &lt;code&gt;ApplicationContext&lt;/code&gt;. You can see it if you enable &lt;code&gt;DEBUG&lt;/code&gt; logging output. If you use the &lt;code&gt;spring-boot-actuator&lt;/code&gt; (see &lt;a href=&quot;production-ready-features#production-ready&quot;&gt;the Actuator chapter&lt;/a&gt;), there is also a &lt;code&gt;conditions&lt;/code&gt; endpoint that renders the report in JSON. Use that endpoint to debug the application and see what features have been added (and which have not been added) by Spring Boot at runtime.</source>
          <target state="translated">Spring BootApplicationContextで利用できる本当に便利な &lt;code&gt;ConditionEvaluationReport&lt;/code&gt; があり &lt;code&gt;ApplicationContext&lt;/code&gt; 。 &lt;code&gt;DEBUG&lt;/code&gt; ログ出力を有効にすると表示されます。 &lt;code&gt;spring-boot-actuator&lt;/code&gt; を使用する場合（&lt;a href=&quot;production-ready-features#production-ready&quot;&gt;Actuatorの章を&lt;/a&gt;参照）、レポートをJSONでレンダリングする &lt;code&gt;conditions&lt;/code&gt; エンドポイントもあります。そのエンドポイントを使用してアプリケーションをデバッグし、実行時にSpring Bootによって追加された（および追加されていない）機能を確認します。</target>
        </trans-unit>
        <trans-unit id="45233fe53947bb4ac0476ef247598d4f0c3ee9f2" translate="yes" xml:space="preserve">
          <source>There is no way to set a &lt;code&gt;level&lt;/code&gt;. &lt;code&gt;warning&lt;/code&gt; is always assumed, since code is still handling the property.</source>
          <target state="translated">&lt;code&gt;level&lt;/code&gt; を設定する方法はありません。コードはまだプロパティを処理しているため、 &lt;code&gt;warning&lt;/code&gt; が常に想定されます。</target>
        </trans-unit>
        <trans-unit id="27d6d6f6096f1cb8bbe0350385f5a004d22d9547" translate="yes" xml:space="preserve">
          <source>These dependencies and plugins are provided by default if one bootstraps a Kotlin project on &lt;a href=&quot;https://start.spring.io/#!language=kotlin&quot;&gt;start.spring.io&lt;/a&gt;.</source>
          <target state="translated">これらの依存関係とプラグインは、&lt;a href=&quot;https://start.spring.io/#!language=kotlin&quot;&gt;start.spring.ioで&lt;/a&gt;Kotlinプロジェクトをブートストラップする場合にデフォルトで提供されます。</target>
        </trans-unit>
        <trans-unit id="f7ef323901d758fe1d4facaf098332d6d3fb97aa" translate="yes" xml:space="preserve">
          <source>These health groups are only enabled automatically if the application is &lt;a href=&quot;deployment#cloud-deployment-kubernetes&quot;&gt;running in a Kubernetes environment&lt;/a&gt;. You can enable them in any environment using the &lt;code&gt;management.endpoint.health.probes.enabled&lt;/code&gt; configuration property.</source>
          <target state="translated">これらのヘルスグループは、アプリケーションが&lt;a href=&quot;deployment#cloud-deployment-kubernetes&quot;&gt;Kubernetes環境で実行されている&lt;/a&gt;場合にのみ自動的に有効になります。 &lt;code&gt;management.endpoint.health.probes.enabled&lt;/code&gt; 構成プロパティを使用して、任意の環境でそれらを有効にできます。</target>
        </trans-unit>
        <trans-unit id="9a59d84acc0ec9d6e5db2bb99bf2624f34436039" translate="yes" xml:space="preserve">
          <source>Third-party jars can offer support for additional technologies (there&amp;rsquo;s no requirement for files to be local). For example, you can imagine config data being from external stores such as Consul, Apache ZooKeeper or Netflix Archaius.</source>
          <target state="translated">サードパーティのjarは、追加のテクノロジーのサポートを提供できます（ファイルがローカルである必要はありません）。たとえば、Consul、Apache ZooKeeper、NetflixArchaiusなどの外部ストアからの構成データを想像できます。</target>
        </trans-unit>
        <trans-unit id="d1fc47d650603c07292adc68cc14dc2f7a20728e" translate="yes" xml:space="preserve">
          <source>This appendix contains details of all of the auto-configuration classes provided by Spring Boot, with links to documentation and source code. Remember to also look at the conditions report in your application for more details of which features are switched on. (To do so, start the app with &lt;code&gt;--debug&lt;/code&gt; or &lt;code&gt;-Ddebug&lt;/code&gt; or, in an Actuator application, use the &lt;code&gt;conditions&lt;/code&gt; endpoint).</source>
          <target state="translated">この付録には、Spring Bootが提供するすべての自動構成クラスの詳細と、ドキュメントおよびソースコードへのリンクが含まれています。どの機能がオンになっているのかについての詳細は、アプリケーションの状態レポートも確認してください。（これを行うと、アプリを起動するには &lt;code&gt;--debug&lt;/code&gt; または &lt;code&gt;-Ddebug&lt;/code&gt; や、アクチュエータのアプリケーションでは、使用 &lt;code&gt;conditions&lt;/code&gt; エンドポイントを）。</target>
        </trans-unit>
        <trans-unit id="984f673e277732a56de47a940ed29e7eb8783fb0" translate="yes" xml:space="preserve">
          <source>This appendix describes the &lt;code&gt;@&amp;hellip;Test&lt;/code&gt; auto-configuration annotations that Spring Boot provides to test slices of your application.</source>
          <target state="translated">この付録では、SpringBootがアプリケーションのスライスをテストするために提供する &lt;code&gt;@&amp;hellip;Test&lt;/code&gt; 自動構成アノテーションについて説明します。</target>
        </trans-unit>
        <trans-unit id="ccf6a65ddbbb1be5f0033981a73b112335a52150" translate="yes" xml:space="preserve">
          <source>This appendix provides details of the dependencies that are managed by Spring Boot.</source>
          <target state="translated">この付録では、Spring Boot が管理する依存関係の詳細について説明します。</target>
        </trans-unit>
        <trans-unit id="b2c91bccdf113474da4e53bebb554f7a4903992e" translate="yes" xml:space="preserve">
          <source>This can be achieved using the &lt;code&gt;management.endpoints.web.exposure.exclude&lt;/code&gt; property as well, as shown in the following example:</source>
          <target state="translated">これは、次の例に示すように、 &lt;code&gt;management.endpoints.web.exposure.exclude&lt;/code&gt; プロパティを使用して実現することもできます。</target>
        </trans-unit>
        <trans-unit id="be3038015bd38bcaa3e17a77de5bea4252ebee38" translate="yes" xml:space="preserve">
          <source>This can be done with a static &lt;code&gt;@DynamicPropertySource&lt;/code&gt; method that allows adding dynamic property values to the Spring Environment.</source>
          <target state="translated">これは、Spring環境に動的プロパティ値を追加できる静的 &lt;code&gt;@DynamicPropertySource&lt;/code&gt; メソッドを使用して実行できます。</target>
        </trans-unit>
        <trans-unit id="a61838b1bb1e6ad76a8585f2f1a3bb5a82532259" translate="yes" xml:space="preserve">
          <source>This can be used to invoke a write operation that takes &lt;code&gt;String name&lt;/code&gt; and &lt;code&gt;int counter&lt;/code&gt; parameters, as shown in the following example:</source>
          <target state="translated">これは、次の例に示すように、 &lt;code&gt;String name&lt;/code&gt; と &lt;code&gt;int counter&lt;/code&gt; パラメータを受け取る書き込み操作を呼び出すために使用できます。</target>
        </trans-unit>
        <trans-unit id="c9a9010abe3110cb625dd05b7d1c4d4336fc4507" translate="yes" xml:space="preserve">
          <source>This changes the thread pool to use a bounded queue so that when the queue is full (100 tasks), the thread pool increases to maximum 16 threads. Shrinking of the pool is more aggressive as threads are reclaimed when they are idle for 10 seconds (rather than 60 seconds by default).</source>
          <target state="translated">これは、キューが一杯になったとき (100 個のタスク)、スレッドプールが最大 16 個のスレッドに増加するように、スレッドプールが制限されたキューを使用するように変更します。(デフォルトでは60秒ではなく)10秒間アイドル状態になったときにスレッドが再取得されるので、プールの縮小はより積極的になります。</target>
        </trans-unit>
        <trans-unit id="19140306758e9479ce889f0e36b875db09a91869" translate="yes" xml:space="preserve">
          <source>This contract is well suited for tasks that should run after application startup but before it starts accepting traffic.</source>
          <target state="translated">この契約は、アプリケーションの起動後、トラフィックの受け入れを開始する前に実行すべきタスクに適しています。</target>
        </trans-unit>
        <trans-unit id="9ccc535292943cb99a6236fb50422982b6375e4c" translate="yes" xml:space="preserve">
          <source>This customizer will configure Hibernate to use the same &lt;code&gt;CacheManager&lt;/code&gt; as the one that the application uses. It is also possible to use separate &lt;code&gt;CacheManager&lt;/code&gt; instances. For details, refer to &lt;a href=&quot;https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#caching-provider-jcache&quot;&gt;the Hibernate user guide&lt;/a&gt;.</source>
          <target state="translated">このカスタマイザーは、アプリケーションが使用するものと同じ &lt;code&gt;CacheManager&lt;/code&gt; を使用するようにHibernateを構成します。個別の &lt;code&gt;CacheManager&lt;/code&gt; インスタンスを使用することもできます。詳細については、&lt;a href=&quot;https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#caching-provider-jcache&quot;&gt;Hibernateユーザーガイドを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="d931ce8f98edb34b2725769650fa06f92889a5f5" translate="yes" xml:space="preserve">
          <source>This dependency ensures that the additional metadata is available when the annotation processor runs during compilation.</source>
          <target state="translated">この依存関係は、コンパイル中にアノテーションプロセッサが実行されたときに、追加のメタデータが利用可能であることを保証します。</target>
        </trans-unit>
        <trans-unit id="e2e9f15a4265ff675c8ffa73c78fd4c2bff7f01a" translate="yes" xml:space="preserve">
          <source>This environment-based configuration is applied to the auto-configured &lt;code&gt;Jackson2ObjectMapperBuilder&lt;/code&gt; bean and applies to any mappers created by using the builder, including the auto-configured &lt;code&gt;ObjectMapper&lt;/code&gt; bean.</source>
          <target state="translated">この環境ベースの構成は、自動構成された &lt;code&gt;Jackson2ObjectMapperBuilder&lt;/code&gt; Beanに適用され、自動構成された &lt;code&gt;ObjectMapper&lt;/code&gt; Beanを含め、ビルダーを使用して作成されたすべてのマッパーに適用されます。</target>
        </trans-unit>
        <trans-unit id="4c782d4945d30386e771eb84a56e0439f0f7dea7" translate="yes" xml:space="preserve">
          <source>This error is not fatal, and the application still starts with HTTP/1.1 SSL support.</source>
          <target state="translated">このエラーは致命的なものではなく、アプリケーションはまだHTTP/1.1 SSLサポートで起動しています。</target>
        </trans-unit>
        <trans-unit id="3fd2a3db4f896a900f42aa5368eb8076a7ac1836" translate="yes" xml:space="preserve">
          <source>This example demonstrates the use of caching on a potentially costly operation. Before invoking &lt;code&gt;computePiDecimal&lt;/code&gt;, the abstraction looks for an entry in the &lt;code&gt;piDecimals&lt;/code&gt; cache that matches the &lt;code&gt;i&lt;/code&gt; argument. If an entry is found, the content in the cache is immediately returned to the caller, and the method is not invoked. Otherwise, the method is invoked, and the cache is updated before returning the value.</source>
          <target state="translated">この例は、コストがかかる可能性のある操作でのキャッシュの使用を示しています。 &lt;code&gt;computePiDecimal&lt;/code&gt; を呼び出す前に、抽象化は &lt;code&gt;i&lt;/code&gt; 引数に一致する &lt;code&gt;piDecimals&lt;/code&gt; キャッシュ内のエントリを探します。エントリが見つかった場合、キャッシュ内のコンテンツはすぐに呼び出し元に返され、メソッドは呼び出されません。それ以外の場合は、メソッドが呼び出され、値を返す前にキャッシュが更新されます。</target>
        </trans-unit>
        <trans-unit id="4ae35b375e3c0e286e69190c8b8387e8cd414874" translate="yes" xml:space="preserve">
          <source>This exposes three properties where &lt;code&gt;server.name&lt;/code&gt; has no default and &lt;code&gt;server.ip&lt;/code&gt; and &lt;code&gt;server.port&lt;/code&gt; defaults to &lt;code&gt;&quot;127.0.0.1&quot;&lt;/code&gt; and &lt;code&gt;9797&lt;/code&gt; respectively. The Javadoc on fields is used to populate the &lt;code&gt;description&lt;/code&gt; attribute. For instance, the description of &lt;code&gt;server.ip&lt;/code&gt; is &quot;IP address to listen to.&quot;.</source>
          <target state="translated">これにより、 &lt;code&gt;server.name&lt;/code&gt; にデフォルトがなく、 &lt;code&gt;server.ip&lt;/code&gt; と &lt;code&gt;server.port&lt;/code&gt; のデフォルトがそれぞれ &lt;code&gt;&quot;127.0.0.1&quot;&lt;/code&gt; と &lt;code&gt;9797&lt;/code&gt; である3つのプロパティが公開されます。フィールド上のJavadocは、 &lt;code&gt;description&lt;/code&gt; 属性を設定するために使用されます。たとえば、 &lt;code&gt;server.ip&lt;/code&gt; の説明は「リッスンするIPアドレス」です。</target>
        </trans-unit>
        <trans-unit id="9c950af61168cf48f875069726b5829662150d1a" translate="yes" xml:space="preserve">
          <source>This feature has been thoroughly described in a dedicated &lt;a href=&quot;https://spring.io/blog/2014/07/24/spring-framework-4-1-handling-static-web-resources&quot;&gt;blog post&lt;/a&gt; and in Spring Framework&amp;rsquo;s &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/web.html#mvc-config-static-resources&quot;&gt;reference documentation&lt;/a&gt;.</source>
          <target state="translated">この機能については、専用の&lt;a href=&quot;https://spring.io/blog/2014/07/24/spring-framework-4-1-handling-static-web-resources&quot;&gt;ブログ投稿&lt;/a&gt;とSpringFrameworkの&lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/web.html#mvc-config-static-resources&quot;&gt;リファレンスドキュメントで&lt;/a&gt;詳しく説明されています。</target>
        </trans-unit>
        <trans-unit id="e2138520f355b2c407e5f15678dd9e192623d173" translate="yes" xml:space="preserve">
          <source>This has no effect on collections and maps, as those types are automatically identified, and a single metadata property is generated for each of them.</source>
          <target state="translated">これは、コレクションとマップには影響しません。</target>
        </trans-unit>
        <trans-unit id="460f041997c5287303b677888b9ee4c179f56597" translate="yes" xml:space="preserve">
          <source>This is a drop-in replacement for &lt;code&gt;SpringApplication.run(MyApplication::class.java, *args)&lt;/code&gt;. It also allows customization of the application as shown in the following example:</source>
          <target state="translated">これは、 &lt;code&gt;SpringApplication.run(MyApplication::class.java, *args)&lt;/code&gt; ドロップイン置換です。また、次の例に示すように、アプリケーションをカスタマイズすることもできます。</target>
        </trans-unit>
        <trans-unit id="774d83552d4cc4ae6cba6a40e5ba717384d23635" translate="yes" xml:space="preserve">
          <source>This is a multi-stage dockerfile. The builder stage extracts the directories that are needed later. Each of the &lt;code&gt;COPY&lt;/code&gt; commands relates to the layers extracted by the jarmode.</source>
          <target state="translated">これは多段階のdockerfileです。ビルダーステージは、後で必要になるディレクトリを抽出します。各 &lt;code&gt;COPY&lt;/code&gt; コマンドは、jarmodeによって抽出されたレイヤーに関連しています。</target>
        </trans-unit>
        <trans-unit id="65abcee4f5c5b820de47a4aeaa7773ed7b5f7459" translate="yes" xml:space="preserve">
          <source>This is actually slightly faster on startup (depending on the size of the jar) than running from an unexploded archive. At runtime you shouldn&amp;rsquo;t expect any differences.</source>
          <target state="translated">これは、実際には、起動時に（jarのサイズに応じて）、展開されていないアーカイブから実行するよりもわずかに高速です。実行時には、違いを期待するべきではありません。</target>
        </trans-unit>
        <trans-unit id="cc6e682516a6ad09927269eec4316520d0e41594" translate="yes" xml:space="preserve">
          <source>This is one of the easiest ways to get to AWS, but there are more things to cover, such as how to integrate Elastic Beanstalk into any CI / CD tool, use the Elastic Beanstalk Maven plugin instead of the CLI, and others. There is a &lt;a href=&quot;https://exampledriven.wordpress.com/2017/01/09/spring-boot-aws-elastic-beanstalk-example/&quot;&gt;blog post&lt;/a&gt; covering these topics more in detail.</source>
          <target state="translated">これはAWSにアクセスする最も簡単な方法の1つですが、ElasticBeanstalkをCI / CDツールに統合する方法、CLIの代わりにElastic Beanstalk Mavenプラグインを使用する方法など、カバーすることがたくさんあります。これらのトピックをより詳細にカバーする&lt;a href=&quot;https://exampledriven.wordpress.com/2017/01/09/spring-boot-aws-elastic-beanstalk-example/&quot;&gt;ブログ投稿&lt;/a&gt;があります。</target>
        </trans-unit>
        <trans-unit id="27f478501081366262c7458d55c6be86a05cb986" translate="yes" xml:space="preserve">
          <source>This is typically manifested by a warning in the &lt;code&gt;RemoteSpringApplication&lt;/code&gt; logs about failing to upload some of the classes, and a consequent retry. But it may also lead to application code inconsistency and failure to restart after the first batch of changes is uploaded. If you observe such problems constantly, try increasing the &lt;code&gt;spring.devtools.restart.poll-interval&lt;/code&gt; and &lt;code&gt;spring.devtools.restart.quiet-period&lt;/code&gt; parameters to the values that fit your development environment. See the &lt;a href=&quot;#configuring-file-system-watcher&quot;&gt;Configuring File System Watcher&lt;/a&gt; section for configuring these properties.</source>
          <target state="translated">これは通常、一部のクラスのアップロードに失敗したことに関する &lt;code&gt;RemoteSpringApplication&lt;/code&gt; ログの警告と、その結果としての再試行によって明らかになります。ただし、変更の最初のバッチがアップロードされた後、アプリケーションコードの不整合や再起動の失敗につながる可能性もあります。このような問題が常に発生する場合は、 &lt;code&gt;spring.devtools.restart.poll-interval&lt;/code&gt; パラメーターと &lt;code&gt;spring.devtools.restart.quiet-period&lt;/code&gt; パラメーターを開発環境に適した値に増やしてみてください。これらのプロパティの構成については、「&lt;a href=&quot;#configuring-file-system-watcher&quot;&gt;ファイルシステムウォッチャー&lt;/a&gt;の構成」セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="8807232cdffcee31c30f8455dbe11a36471d8a89" translate="yes" xml:space="preserve">
          <source>This layering is designed to separate code based on how likely it is to change between application builds. Library code is less likely to change between builds, so it is placed in its own layers to allow tooling to re-use the layers from cache. Application code is more likely to change between builds so it is isolated in a separate layer.</source>
          <target state="translated">このレイヤリングは、アプリケーションのビルド間で変更される可能性の高さに基づいてコードを分離するように設計されています。ライブラリコードはビルド間で変更される可能性が低いため、独自のレイヤーに配置され、ツールがキャッシュからレイヤーを再利用できるようにします。アプリケーションコードはビルド間で変更される可能性が高いので、別のレイヤーに分離されます。</target>
        </trans-unit>
        <trans-unit id="c5ef4701b03e6884ae66365ff7c9a5c4b0e5907f" translate="yes" xml:space="preserve">
          <source>This means that Spring Boot will create a &lt;code&gt;RSocketMessageHandler&lt;/code&gt; bean that will handle RSocket requests to your application.</source>
          <target state="translated">これは、SpringBootがアプリケーションへのRSocketリクエストを処理する &lt;code&gt;RSocketMessageHandler&lt;/code&gt; Beanを作成することを意味します。</target>
        </trans-unit>
        <trans-unit id="5eae2e67718a6dfd9018f9e6399d25366f798b97" translate="yes" xml:space="preserve">
          <source>This means that if you are using Spring MVC and the new &lt;code&gt;WebClient&lt;/code&gt; from Spring WebFlux in the same application, Spring MVC will be used by default. You can override that easily by calling &lt;code&gt;setWebApplicationType(WebApplicationType)&lt;/code&gt;.</source>
          <target state="translated">これは、同じアプリケーションでSpringMVCとSpringWebFluxの新しい &lt;code&gt;WebClient&lt;/code&gt; を使用している場合、デフォルトでSpringMVCが使用されることを意味します。 &lt;code&gt;setWebApplicationType(WebApplicationType)&lt;/code&gt; を呼び出すことで、これを簡単にオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="2646b2d13175c223b62a39f5ddfe7f8157de525a" translate="yes" xml:space="preserve">
          <source>This mechanism does not apply the same way to &lt;code&gt;@Bean&lt;/code&gt; methods where typically the return type is the target of the condition: before the condition on the method applies, the JVM will have loaded the class and potentially processed method references which will fail if the class is not present.</source>
          <target state="translated">このメカニズムは、通常は戻り値の型が条件のターゲットである &lt;code&gt;@Bean&lt;/code&gt; メソッドには同じ方法で適用されません。メソッドの条件が適用される前に、JVMはクラスと潜在的に処理されたメソッド参照をロードしますが、クラスが失敗すると失敗します。存在しません。</target>
        </trans-unit>
        <trans-unit id="e04a6129637843867969bfeb4e068f988b2c1482" translate="yes" xml:space="preserve">
          <source>This option applies to Spring Boot projects that produce a jar file and run an embedded web container. Elastic Beanstalk environments run an nginx instance on port 80 to proxy the actual application, running on port 5000. To configure it, add the following line to your &lt;code&gt;application.properties&lt;/code&gt; file:</source>
          <target state="translated">このオプションは、jarファイルを生成して埋め込みWebコンテナを実行するSpringBootプロジェクトに適用されます。Elastic Beanstalk環境は、ポート80でnginxインスタンスを実行して、ポート5000で実行されている実際のアプリケーションをプロキシします。これを構成するには、 &lt;code&gt;application.properties&lt;/code&gt; ファイルに次の行を追加します。</target>
        </trans-unit>
        <trans-unit id="23d1133621317af1d989c72131e4710179de628d" translate="yes" xml:space="preserve">
          <source>This option applies to Spring Boot projects that produce a war file. No special configuration is required. You need only follow the official guide.</source>
          <target state="translated">このオプションは、warファイルを生成するSpring Bootプロジェクトに適用されます。特別な設定は必要ありません。公式ガイドに従う必要があるだけです。</target>
        </trans-unit>
        <trans-unit id="e0505b8a65050cd0e9d9b2071f29719bc73899b3" translate="yes" xml:space="preserve">
          <source>This provider is typically used if you have a list of values and any extra values should still be considered as valid.</source>
          <target state="translated">このプロバイダは通常、値のリストを持っている場合に使用され、余分な値は有効とみなされます。</target>
        </trans-unit>
        <trans-unit id="4ad2c325143f08dfb46f0befdcf7f0c482a1e749" translate="yes" xml:space="preserve">
          <source>This provider supports the following parameters:</source>
          <target state="translated">このプロバイダは以下のパラメータをサポートしています。</target>
        </trans-unit>
        <trans-unit id="e54550d08e2dad7df5255e1219bfa453c98a0370" translate="yes" xml:space="preserve">
          <source>This provides only one argument to the batch job: &lt;code&gt;someParameter=someValue&lt;/code&gt;.</source>
          <target state="translated">これにより、バッチジョブに引数が1つだけ提供されます： &lt;code&gt;someParameter=someValue&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="22fc8d96be3312002845eb59330f80a1b7edc1e2" translate="yes" xml:space="preserve">
          <source>This sample needs to be created in its own directory. Subsequent instructions assume that you have created a suitable directory and that it is your current directory.</source>
          <target state="translated">このサンプルは、独自のディレクトリに作成する必要があります。以降の説明では、適切なディレクトリを作成し、それがあなたのカレントディレクトリであることを前提としています。</target>
        </trans-unit>
        <trans-unit id="f9fa29d3b2e8ac7908b0d41ef1a7c8f128996087" translate="yes" xml:space="preserve">
          <source>This search ordering lets you specify default values in one configuration file and then selectively override those values in another. You can provide default values for your application in &lt;code&gt;application.properties&lt;/code&gt; (or whatever other basename you choose with &lt;code&gt;spring.config.name&lt;/code&gt;) in one of the default locations. These default values can then be overridden at runtime with a different file located in one of the custom locations.</source>
          <target state="translated">This search ordering lets you specify default values in one configuration file and then selectively override those values in another. You can provide default values for your application in &lt;code&gt;application.properties&lt;/code&gt; (or whatever other basename you choose with &lt;code&gt;spring.config.name&lt;/code&gt; ) in one of the default locations. These default values can then be overridden at runtime with a different file located in one of the custom locations.</target>
        </trans-unit>
        <trans-unit id="98af5606c519e36542ec351d8486cb6859c633f2" translate="yes" xml:space="preserve">
          <source>This section addresses questions about security when working with Spring Boot, including questions that arise from using Spring Security with Spring Boot.</source>
          <target state="translated">このセクションでは、Spring BootでSpring Securityを使用する際に発生する疑問など、Spring Bootで作業する際のセキュリティに関する疑問を取り上げています。</target>
        </trans-unit>
        <trans-unit id="63d2a24b1fdff3ed5546f1a972979f48e3afe8f6" translate="yes" xml:space="preserve">
          <source>This section contains three examples of using &lt;code&gt;findmainclass&lt;/code&gt;.</source>
          <target state="translated">This section contains three examples of using &lt;code&gt;findmainclass&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8acedec21aec8bb92d4f624db5f059f55b7b4056" translate="yes" xml:space="preserve">
          <source>This section covers some of the more common deployment scenarios.</source>
          <target state="translated">このセクションでは、より一般的な導入シナリオをいくつか紹介します。</target>
        </trans-unit>
        <trans-unit id="70b211ea63ca950926089e9def6a4e30c449147c" translate="yes" xml:space="preserve">
          <source>This section describes how to develop a small &amp;ldquo;Hello World!&amp;rdquo; web application that highlights some of Spring Boot&amp;rsquo;s key features. We use Maven to build this project, since most IDEs support it.</source>
          <target state="translated">This section describes how to develop a small &amp;ldquo;Hello World!&amp;rdquo; web application that highlights some of Spring Boot&amp;rsquo;s key features. We use Maven to build this project, since most IDEs support it.</target>
        </trans-unit>
        <trans-unit id="63ebfcaa3ec5cd3905d00724e0eeba5ca871a2ed" translate="yes" xml:space="preserve">
          <source>This section dives into the details of Spring Boot. Here you can learn about the key features that you may want to use and customize. If you have not already done so, you might want to read the &quot;&lt;a href=&quot;getting-started#getting-started&quot;&gt;getting-started.html&lt;/a&gt;&quot; and &quot;&lt;a href=&quot;using-spring-boot#using-boot&quot;&gt;using-spring-boot.html&lt;/a&gt;&quot; sections, so that you have a good grounding of the basics.</source>
          <target state="translated">This section dives into the details of Spring Boot. Here you can learn about the key features that you may want to use and customize. If you have not already done so, you might want to read the &quot;&lt;a href=&quot;getting-started#getting-started&quot;&gt;getting-started.html&lt;/a&gt;&quot; and &quot;&lt;a href=&quot;using-spring-boot#using-boot&quot;&gt;using-spring-boot.html&lt;/a&gt;&quot; sections, so that you have a good grounding of the basics.</target>
        </trans-unit>
        <trans-unit id="fa32a19ddc3a86d4ab8bdef4dc856c7c3f1cd92d" translate="yes" xml:space="preserve">
          <source>This section goes into more detail about how you should use Spring Boot. It covers topics such as build systems, auto-configuration, and how to run your applications. We also cover some Spring Boot best practices. Although there is nothing particularly special about Spring Boot (it is just another library that you can consume), there are a few recommendations that, when followed, make your development process a little easier.</source>
          <target state="translated">このセクションでは、Spring Boot の使い方について詳しく説明します。ビルドシステム、自動設定、アプリケーションの実行方法などのトピックを扱います。また、Spring Boot のベストプラクティスについても説明します。Spring Bootには特別なことは何もありませんが(ただのライブラリを利用するだけです)、いくつかの推奨事項があり、それに従えば開発プロセスを少し楽にすることができます。</target>
        </trans-unit>
        <trans-unit id="4c2c065b14100d63a7f263ab40adb253a558419e" translate="yes" xml:space="preserve">
          <source>This section includes topics about setting and reading properties and configuration settings and their interaction with Spring Boot applications.</source>
          <target state="translated">このセクションでは、プロパティや設定設定の設定と読み込み、およびそれらの Spring Boot アプリケーションとの相互作用についてのトピックが含まれています。</target>
        </trans-unit>
        <trans-unit id="68bf44b7331aa20ee33060f7be2c6d336d11651b" translate="yes" xml:space="preserve">
          <source>This section includes topics relating directly to Spring Boot applications.</source>
          <target state="translated">このセクションでは、Spring Bootアプリケーションに直接関連するトピックが含まれています。</target>
        </trans-unit>
        <trans-unit id="21a790fda00a13c2afdc2633ee2d0b018fb43401" translate="yes" xml:space="preserve">
          <source>This section only covers jar based packaging. If you choose to package your application as a war file, you should refer to your server and IDE documentation.</source>
          <target state="translated">このセクションでは、jar ベースのパッケージのみを扱います。アプリケーションをワーファイルとしてパッケージ化する場合は、サーバーや IDE のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="78fc2879e4ad1c8aacfc386d63f895e7eea1abb8" translate="yes" xml:space="preserve">
          <source>This section provides a brief overview of Spring Boot reference documentation. It serves as a map for the rest of the document.</source>
          <target state="translated">このセクションでは、Spring Boot リファレンスドキュメントの簡単な概要を説明します。これは、このドキュメントの残りの部分のマップとして機能します。</target>
        </trans-unit>
        <trans-unit id="f958777b6bee155d608e729d89a9b3bebf1d3861" translate="yes" xml:space="preserve">
          <source>This section provides answers to some common &amp;lsquo;how do I do that&amp;hellip;​&amp;rsquo; questions that often arise when using Spring Boot. Its coverage is not exhaustive, but it does cover quite a lot.</source>
          <target state="translated">This section provides answers to some common &amp;lsquo;how do I do that&amp;hellip;​&amp;rsquo; questions that often arise when using Spring Boot. Its coverage is not exhaustive, but it does cover quite a lot.</target>
        </trans-unit>
        <trans-unit id="e4d9be02fea69d7068dfad55edc0923522bd8170" translate="yes" xml:space="preserve">
          <source>This section shows two examples of Ant tasks.</source>
          <target state="translated">ここでは、Antタスクの例を2つ紹介します。</target>
        </trans-unit>
        <trans-unit id="06b1f5b07a36526fc5d9c4f3a479a09ae49d16df" translate="yes" xml:space="preserve">
          <source>This separation in two modules is in no way necessary. If &quot;acme&quot; has several flavours, options or optional features, then it is better to separate the auto-configuration as you can clearly express the fact some features are optional. Besides, you have the ability to craft a starter that provides an opinion about those optional dependencies. At the same time, others can rely only on the &lt;code&gt;autoconfigure&lt;/code&gt; module and craft their own starter with different opinions.</source>
          <target state="translated">This separation in two modules is in no way necessary. If &quot;acme&quot; has several flavours, options or optional features, then it is better to separate the auto-configuration as you can clearly express the fact some features are optional. Besides, you have the ability to craft a starter that provides an opinion about those optional dependencies. At the same time, others can rely only on the &lt;code&gt;autoconfigure&lt;/code&gt; module and craft their own starter with different opinions.</target>
        </trans-unit>
        <trans-unit id="fe0c2a5e1c1667db97a516e07f56f197c054bfd2" translate="yes" xml:space="preserve">
          <source>This sets the common &lt;code&gt;prop.one&lt;/code&gt; Kafka property to &lt;code&gt;first&lt;/code&gt; (applies to producers, consumers and admins), the &lt;code&gt;prop.two&lt;/code&gt; admin property to &lt;code&gt;second&lt;/code&gt;, the &lt;code&gt;prop.three&lt;/code&gt; consumer property to &lt;code&gt;third&lt;/code&gt;, the &lt;code&gt;prop.four&lt;/code&gt; producer property to &lt;code&gt;fourth&lt;/code&gt; and the &lt;code&gt;prop.five&lt;/code&gt; streams property to &lt;code&gt;fifth&lt;/code&gt;.</source>
          <target state="translated">This sets the common &lt;code&gt;prop.one&lt;/code&gt; Kafka property to &lt;code&gt;first&lt;/code&gt; (applies to producers, consumers and admins), the &lt;code&gt;prop.two&lt;/code&gt; admin property to &lt;code&gt;second&lt;/code&gt; , the &lt;code&gt;prop.three&lt;/code&gt; consumer property to &lt;code&gt;third&lt;/code&gt; , the &lt;code&gt;prop.four&lt;/code&gt; producer property to &lt;code&gt;fourth&lt;/code&gt; and the &lt;code&gt;prop.five&lt;/code&gt; streams property to &lt;code&gt;fifth&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f7ef8ea8678f7fcf1b792d7c676b306bd052f386" translate="yes" xml:space="preserve">
          <source>This setup is only supported by WebFlux applications as using &lt;code&gt;WebTestClient&lt;/code&gt; in a mocked web application only works with WebFlux at the moment.</source>
          <target state="translated">This setup is only supported by WebFlux applications as using &lt;code&gt;WebTestClient&lt;/code&gt; in a mocked web application only works with WebFlux at the moment.</target>
        </trans-unit>
        <trans-unit id="eb482188f5594442f357f3e0e6680312716ffbc1" translate="yes" xml:space="preserve">
          <source>This setup puts you &lt;em&gt;in sync&lt;/em&gt; with what Spring Boot does for you by default, except that a dedicated connection pool is chosen (in code) and its settings are exposed in the &lt;code&gt;app.datasource.configuration&lt;/code&gt; sub namespace. Because &lt;code&gt;DataSourceProperties&lt;/code&gt; is taking care of the &lt;code&gt;url&lt;/code&gt;/&lt;code&gt;jdbcUrl&lt;/code&gt; translation for you, you can configure it as follows:</source>
          <target state="translated">This setup puts you &lt;em&gt;in sync&lt;/em&gt; with what Spring Boot does for you by default, except that a dedicated connection pool is chosen (in code) and its settings are exposed in the &lt;code&gt;app.datasource.configuration&lt;/code&gt; sub namespace. Because &lt;code&gt;DataSourceProperties&lt;/code&gt; is taking care of the &lt;code&gt;url&lt;/code&gt; / &lt;code&gt;jdbcUrl&lt;/code&gt; translation for you, you can configure it as follows:</target>
        </trans-unit>
        <trans-unit id="a54ca376c967f54b5f3de3e7e319eca5cab3b808" translate="yes" xml:space="preserve">
          <source>This setup requires &lt;code&gt;spring-webflux&lt;/code&gt; on the classpath. If you can&amp;rsquo;t or won&amp;rsquo;t add webflux, Spring Boot also provides a &lt;code&gt;TestRestTemplate&lt;/code&gt; facility:</source>
          <target state="translated">This setup requires &lt;code&gt;spring-webflux&lt;/code&gt; on the classpath. If you can&amp;rsquo;t or won&amp;rsquo;t add webflux, Spring Boot also provides a &lt;code&gt;TestRestTemplate&lt;/code&gt; facility:</target>
        </trans-unit>
        <trans-unit id="84d7bfad4c1d411a409984af163140bdf3448c78" translate="yes" xml:space="preserve">
          <source>This should be everything you need. The most common deployment workflow for Heroku deployments is to &lt;code&gt;git push&lt;/code&gt; the code to production, as shown in the following example:</source>
          <target state="translated">This should be everything you need. The most common deployment workflow for Heroku deployments is to &lt;code&gt;git push&lt;/code&gt; the code to production, as shown in the following example:</target>
        </trans-unit>
        <trans-unit id="393f3f6f2ef031ca1cff60f137d4a4baed5ad8dc" translate="yes" xml:space="preserve">
          <source>This style of configuration works particularly well with the &lt;code&gt;SpringApplication&lt;/code&gt; external YAML configuration, as shown in the following example:</source>
          <target state="translated">This style of configuration works particularly well with the &lt;code&gt;SpringApplication&lt;/code&gt; external YAML configuration, as shown in the following example:</target>
        </trans-unit>
        <trans-unit id="b74ccedd75661707cf53972e2f4f67ff3e40695a" translate="yes" xml:space="preserve">
          <source>This will add &lt;code&gt;db.username&lt;/code&gt;, &lt;code&gt;db.password&lt;/code&gt;, &lt;code&gt;mq.username&lt;/code&gt; and &lt;code&gt;mq.password&lt;/code&gt; properties.</source>
          <target state="translated">This will add &lt;code&gt;db.username&lt;/code&gt; , &lt;code&gt;db.password&lt;/code&gt; , &lt;code&gt;mq.username&lt;/code&gt; and &lt;code&gt;mq.password&lt;/code&gt; properties.</target>
        </trans-unit>
        <trans-unit id="6701a5571029f61c844ac3f8a6df09b47475e443" translate="yes" xml:space="preserve">
          <source>This will prevent any user, including root, from modifying the jar.</source>
          <target state="translated">これにより、root を含むユーザーが jar を変更することを防ぐことができます。</target>
        </trans-unit>
        <trans-unit id="c652550434d586e51511bab160a434f556a6a5cc" translate="yes" xml:space="preserve">
          <source>This will provide the following output:</source>
          <target state="translated">これにより、以下のような出力が得られます。</target>
        </trans-unit>
        <trans-unit id="02dcde164b156486502408b465994d246d88e331" translate="yes" xml:space="preserve">
          <source>This will set the pool to wait 10000 ms before throwing an exception if no connection is available, limit the maximum number of connections to 50 and validate the connection before borrowing it from the pool.</source>
          <target state="translated">これにより、接続が利用できない場合に例外をスローする前にプールが10000ミリ秒待つように設定され、接続の最大数が50に制限され、プールから借用する前に接続を検証します。</target>
        </trans-unit>
        <trans-unit id="79123de85bc5887b35ad590e9149fa99fe8c1d92" translate="yes" xml:space="preserve">
          <source>This will start up a docker container running Neo4j (if Docker is running locally) before any of the tests are run. In most cases, you will need to configure the application using details from the running container, such as container IP or port.</source>
          <target state="translated">これは、テストが実行される前にNeo4jを実行しているdockerコンテナを起動します(Dockerがローカルで実行されている場合)。ほとんどの場合、コンテナのIPやポートなど、実行中のコンテナの詳細を使ってアプリケーションを設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="d802a6996822557b82fa06b1e760c08cbdda7eb7" translate="yes" xml:space="preserve">
          <source>This will trigger the import of a &lt;code&gt;dev.properties&lt;/code&gt; file in current directory (if such a file exists). Values from the imported &lt;code&gt;dev.properties&lt;/code&gt; will take precedence over the file that triggered the import. In the above example, the &lt;code&gt;dev.properties&lt;/code&gt; could redefine &lt;code&gt;spring.application.name&lt;/code&gt; to a different value.</source>
          <target state="translated">This will trigger the import of a &lt;code&gt;dev.properties&lt;/code&gt; file in current directory (if such a file exists). Values from the imported &lt;code&gt;dev.properties&lt;/code&gt; will take precedence over the file that triggered the import. In the above example, the &lt;code&gt;dev.properties&lt;/code&gt; could redefine &lt;code&gt;spring.application.name&lt;/code&gt; to a different value.</target>
        </trans-unit>
        <trans-unit id="d826b51779d73958d9b6c113421d73d845a0e3e1" translate="yes" xml:space="preserve">
          <source>Those two examples are identical as the port default to &lt;code&gt;9042&lt;/code&gt;. If you need to configure the port, use &lt;code&gt;spring.data.cassandra.port&lt;/code&gt;.</source>
          <target state="translated">Those two examples are identical as the port default to &lt;code&gt;9042&lt;/code&gt; . If you need to configure the port, use &lt;code&gt;spring.data.cassandra.port&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="dbd866504bcd113178a516d0710990501b9a4071" translate="yes" xml:space="preserve">
          <source>Thread name: Enclosed in square brackets (may be truncated for console output).</source>
          <target state="translated">スレッド名:角括弧で囲んでいます(コンソール出力の場合は切り捨てられる場合があります)。</target>
        </trans-unit>
        <trans-unit id="28445b4669291b203e64bda1777adedc52da2e7f" translate="yes" xml:space="preserve">
          <source>Threads utilization</source>
          <target state="translated">スレッドの利用</target>
        </trans-unit>
        <trans-unit id="9a26d12d32344c924e9fb7e0b6cda24669f0b39e" translate="yes" xml:space="preserve">
          <source>Threshold after which files are written to disk.</source>
          <target state="translated">ファイルがディスクに書き込まれるまでのしきい値。</target>
        </trans-unit>
        <trans-unit id="1b4f809dde23f137cf95e65fdda0184148439430" translate="yes" xml:space="preserve">
          <source>Thymeleaf</source>
          <target state="translated">Thymeleaf</target>
        </trans-unit>
        <trans-unit id="bca8f19eb632c6ccfbe984f98e174d41434e276e" translate="yes" xml:space="preserve">
          <source>Time between checks for non-responsive consumers. If a duration suffix is not specified, seconds will be used.</source>
          <target state="translated">応答のない消費者のチェックの間の時間。持続時間のサフィックスが指定されていない場合は、秒が使用されます。</target>
        </trans-unit>
        <trans-unit id="6f938423afe4ec108333437fcf762e7dd925e565" translate="yes" xml:space="preserve">
          <source>Time between offset commits when ackMode is &quot;TIME&quot; or &quot;COUNT_TIME&quot;.</source>
          <target state="translated">ackModeが &quot;TIME &quot;または &quot;COUNT_TIME &quot;の場合のオフセットコミット間の時間。</target>
        </trans-unit>
        <trans-unit id="257a8e3e28ce36a9201e5e594190893668c7f4cf" translate="yes" xml:space="preserve">
          <source>Time between publishing idle consumer events (no data received).</source>
          <target state="translated">アイドルな消費者イベントを発行するまでの時間(データを受信していない)。</target>
        </trans-unit>
        <trans-unit id="16edef0e1615af59ec5ec37a6f1b76b8724566e7" translate="yes" xml:space="preserve">
          <source>Time between runs of the idle object evictor thread. When positive, the idle object evictor thread starts, otherwise no idle object eviction is performed.</source>
          <target state="translated">アイドル・オブジェクト・エビクタ・スレッドの実行間の時間。正の場合、アイドル・オブジェクト・エビクタ・スレッドが開始され、そうでない場合はアイドル・オブジェクト・エビクションは実行されません。</target>
        </trans-unit>
        <trans-unit id="9a7ee8eff9bb0b66b975728003d3401d6a4dce74" translate="yes" xml:space="preserve">
          <source>Time format to use, for example `HH:mm:ss`.</source>
          <target state="translated">使用する時間フォーマット、例えば `HHH:mm:ss` のように。</target>
        </trans-unit>
        <trans-unit id="e8bf663ffb266dffd11e68a6255174b6c7baa03d" translate="yes" xml:space="preserve">
          <source>Time limit for which threads may remain idle before being terminated.</source>
          <target state="translated">スレッドが終了する前にアイドル状態を維持できる時間制限。</target>
        </trans-unit>
        <trans-unit id="90deb36c0b03a4e98d0a54557d80ba7573ffecf0" translate="yes" xml:space="preserve">
          <source>Time period for which Influx should retain data in the current database. For instance 7d, check the influx documentation for more details on the duration format.</source>
          <target state="translated">Influxが現在のデータベースにデータを保持する期間。例えば7dのように、期間のフォーマットの詳細については、Influxのドキュメントを確認してください。</target>
        </trans-unit>
        <trans-unit id="5755a712830b5358cee25a8d7d5bd3c88888e586" translate="yes" xml:space="preserve">
          <source>Time range covered by a shard group. For instance 2w, check the influx documentation for more details on the duration format.</source>
          <target state="translated">シャードグループがカバーする時間範囲。例えば2wの場合、デュレーションフォーマットの詳細については、インフルクスのドキュメントを確認してください。</target>
        </trans-unit>
        <trans-unit id="e048b8a2140a4da5a934e33a06f141d1a026b933" translate="yes" xml:space="preserve">
          <source>Time that the connection can be idle before it is closed.</source>
          <target state="translated">接続が終了する前にアイドル状態になる時間。</target>
        </trans-unit>
        <trans-unit id="08af1477dc7ae60ab5bf240e0ce50ec17583678c" translate="yes" xml:space="preserve">
          <source>Time to live for meters that do not have any activity. After this period the meter will be considered expired and will not get reported.</source>
          <target state="translated">何の活動もしていないメーターのために生きる時間。この期間の後、メーターは期限切れとみなされ、報告されません。</target>
        </trans-unit>
        <trans-unit id="157a05dc4208cf8ba78eb0ca8d35438a23db3489" translate="yes" xml:space="preserve">
          <source>Time to live for metrics on Ganglia. Set the multi-cast Time-To-Live to be one greater than the number of hops (routers) between the hosts.</source>
          <target state="translated">ガングリアでのメトリクスの Time to live。マルチキャストの Time-To-Live は、ホスト間のホップ数(ルーター)よりも 1 つ大きい値に設定します。</target>
        </trans-unit>
        <trans-unit id="92d71d8d919c8d051ff5b484cea33464df8b8c15" translate="yes" xml:space="preserve">
          <source>Time to live for subscriptions from the LWC service.</source>
          <target state="translated">LWCサービスからの加入生活の時間。</target>
        </trans-unit>
        <trans-unit id="4da724f7300aaf90f6f509cae3b729229b3c4bca" translate="yes" xml:space="preserve">
          <source>Time to sleep between runs of the idle connection eviction thread. When negative, no idle connection eviction thread runs.</source>
          <target state="translated">アイドル接続退避スレッドの実行間のスリープ時間。負の値の場合、アイドル接続退避スレッドは実行されません。</target>
        </trans-unit>
        <trans-unit id="55e5751905354c493cd02a6ebad4088bb40721e4" translate="yes" xml:space="preserve">
          <source>Time to wait before considering a close complete.</source>
          <target state="translated">クローズコンプリートを考える前に待つ時間。</target>
        </trans-unit>
        <trans-unit id="d41a68739496fda9bd790fa6b6ca841565b57dc1" translate="yes" xml:space="preserve">
          <source>Time to wait on message sends for a response. Set it to 0 to wait forever.</source>
          <target state="translated">メッセージ送信時の応答を待つ時間。0に設定すると永遠に待つことができます。</target>
        </trans-unit>
        <trans-unit id="fa1f17973d6de3e97425a7545e3fe34a93f8cec7" translate="yes" xml:space="preserve">
          <source>Time zone used when formatting dates. For instance, &quot;America/Los_Angeles&quot; or &quot;GMT+10&quot;.</source>
          <target state="translated">日付をフォーマットする際に使用するタイムゾーン。例えば、&quot;America/Los_Angeles &quot;や &quot;GMT+10 &quot;など。</target>
        </trans-unit>
        <trans-unit id="2f2d41854a72103d76672190b09df5c43a0666d7" translate="yes" xml:space="preserve">
          <source>Time, in seconds, after which connections are cleaned up from the pool.</source>
          <target state="translated">接続がプールからクリーンアップされるまでの時間(秒単位)。</target>
        </trans-unit>
        <trans-unit id="af4e3e008d3d84e5d71b8056c4cb860bcee61b57" translate="yes" xml:space="preserve">
          <source>Time, in seconds, between runs of the pool's maintenance thread.</source>
          <target state="translated">プールのメンテナンススレッドが実行されるまでの時間を秒単位で表示します。</target>
        </trans-unit>
        <trans-unit id="5633026c55c53b4292c025b0adbc6970f7a12239" translate="yes" xml:space="preserve">
          <source>Time, in seconds, that a connection can be pooled for before being destroyed. 0 denotes no limit.</source>
          <target state="translated">接続が破棄される前にプールできる時間 (秒単位)。0 は制限なしを示します。</target>
        </trans-unit>
        <trans-unit id="a15b84b66517aa2bf2de0082682c04f041d60c79" translate="yes" xml:space="preserve">
          <source>Time, in seconds, to wait before trying to acquire a connection again after an invalid connection was acquired.</source>
          <target state="translated">無効な接続を取得した後、再度接続を取得しようとするまでの待ち時間 (秒単位)。</target>
        </trans-unit>
        <trans-unit id="36ef8b295ad08bdd5835f74cdc66de2e1332a7d3" translate="yes" xml:space="preserve">
          <source>Time-to-live of a message when sending. Enables QoS (Quality of Service) when set.</source>
          <target state="translated">送信時のメッセージのタイムトゥライフ。設定するとQoS(Quality of Service)を有効にします。</target>
        </trans-unit>
        <trans-unit id="fe08b01d8e2e106a9c750da662e001c52c32fe11" translate="yes" xml:space="preserve">
          <source>Time-to-live of the static resource cache.</source>
          <target state="translated">静的リソースキャッシュのタイムトゥライフ。</target>
        </trans-unit>
        <trans-unit id="b4daf3ebec0205b3c5941c840e6f139a85eeaa8d" translate="yes" xml:space="preserve">
          <source>Timeout for `receive()` operations.</source>
          <target state="translated">receive()` 操作のタイムアウト。</target>
        </trans-unit>
        <trans-unit id="a4c01abbb5a190e1f666694a1c31b7595202bcbc" translate="yes" xml:space="preserve">
          <source>Timeout for `sendAndReceive()` operations.</source>
          <target state="translated">sendAndReceive()` 操作のタイムアウト。</target>
        </trans-unit>
        <trans-unit id="0e749bc73e79e06b505016ac86cc76bc4b48a32b" translate="yes" xml:space="preserve">
          <source>Timeout for borrowing connections from the pool.</source>
          <target state="translated">プールから接続を借用するためのタイムアウト。</target>
        </trans-unit>
        <trans-unit id="ad68c7cd30ac34df9a64b0b1441e2b4d1044a3b4" translate="yes" xml:space="preserve">
          <source>Timeout for operations on a specific key-value with a durability level.</source>
          <target state="translated">耐久性レベルのある特定のキー値に対する操作のタイムアウト。</target>
        </trans-unit>
        <trans-unit id="cd4079ad03b011219b9437a74d74a4b2ff22f438" translate="yes" xml:space="preserve">
          <source>Timeout for operations on a specific key-value.</source>
          <target state="translated">特定のキー値に対する操作のタイムアウト。</target>
        </trans-unit>
        <trans-unit id="343f5afc92a52493a4bafa6b566c75becdf854ac" translate="yes" xml:space="preserve">
          <source>Timeout for the analytics service.</source>
          <target state="translated">分析サービスのタイムアウト。</target>
        </trans-unit>
        <trans-unit id="2b5e18e5d99fc25ad2d6531a3ccdc1ca022aff69" translate="yes" xml:space="preserve">
          <source>Timeout for the management operations.</source>
          <target state="translated">管理業務のタイムアウト。</target>
        </trans-unit>
        <trans-unit id="8b030dd31deb534606f3933db3254b6ef5d2c4e3" translate="yes" xml:space="preserve">
          <source>Timeout for the search service.</source>
          <target state="translated">検索サービスのタイムアウト。</target>
        </trans-unit>
        <trans-unit id="97c62420c3106472b90dc919ae8289a61de2bfe0" translate="yes" xml:space="preserve">
          <source>Timeout for the shutdown of any phase (group of SmartLifecycle beans with the same 'phase' value).</source>
          <target state="translated">任意のフェーズ(同じ'phase'値を持つSmartLifecycleビーンズのグループ)のシャットダウンのためのタイムアウト。</target>
        </trans-unit>
        <trans-unit id="d96205316e07848c1427c856bbc6c2d6cd3c1a9b" translate="yes" xml:space="preserve">
          <source>Timeout to use for internal queries that run as part of the initialization process, just after a connection is opened.</source>
          <target state="translated">接続がオープンされた直後の初期化プロセスの一部として実行される内部クエリに使用するタイムアウト。</target>
        </trans-unit>
        <trans-unit id="048e883b2751ff15fc925cd2c8f95b339cacea77" translate="yes" xml:space="preserve">
          <source>Timeout to use for receive calls.</source>
          <target state="translated">受信通話に使用するタイムアウト。</target>
        </trans-unit>
        <trans-unit id="d3eb9b5f3f03f8cf00aeb24095704a9e04160006" translate="yes" xml:space="preserve">
          <source>Timeout to use for receive calls. Use -1 for a no-wait receive or 0 for no timeout at all. The latter is only feasible if not running within a transaction manager and is generally discouraged since it prevents clean shutdown.</source>
          <target state="translated">受信時に使用するタイムアウト。待機なしの受信には -1 を、タイムアウトが全くない場合には 0 を使用する。後者は、トランザクションマネージャ内で実行していない場合にのみ実行可能であり、クリーンなシャットダウンを妨げてしまうので、一般的にはお勧めできません。</target>
        </trans-unit>
        <trans-unit id="9ee815b47fb806e26cc5d8565b64b4cb27cce936" translate="yes" xml:space="preserve">
          <source>Timeout to use when establishing driver connections.</source>
          <target state="translated">ドライバ接続を確立する際に使用するタイムアウト。</target>
        </trans-unit>
        <trans-unit id="18617f279e6b6ec92a580f0a0ad7ac3ac4860b87" translate="yes" xml:space="preserve">
          <source>Timeout to use when polling the consumer.</source>
          <target state="translated">消費者へのポーリング時に使用するタイムアウト。</target>
        </trans-unit>
        <trans-unit id="149832355c96122df1ffdd4b2e0ec7d3adfecdda" translate="yes" xml:space="preserve">
          <source>Timeout, in seconds, for acquiring connections from the pool.</source>
          <target state="translated">プールから接続を取得するためのタイムアウト (秒単位)。</target>
        </trans-unit>
        <trans-unit id="3cdb59cee88af2120763f796e16f13e64a5de99b" translate="yes" xml:space="preserve">
          <source>Timeout, in seconds, for borrowing connections from the pool.</source>
          <target state="translated">プールから接続を借用するためのタイムアウト (秒単位)。</target>
        </trans-unit>
        <trans-unit id="ab962604136c073fe7e13b7d03d0804820b94f77" translate="yes" xml:space="preserve">
          <source>Timeout, in seconds, for establishing a database connection.</source>
          <target state="translated">データベース接続を確立するためのタイムアウト (秒単位)。</target>
        </trans-unit>
        <trans-unit id="a9e00d213e65d41eb8e3410116c58b0d62dd77d2" translate="yes" xml:space="preserve">
          <source>To &amp;ldquo;reset&amp;rdquo; the specific level of the logger (and use the default configuration instead), you can pass a value of &lt;code&gt;null&lt;/code&gt; as the &lt;code&gt;configuredLevel&lt;/code&gt;.</source>
          <target state="translated">To &amp;ldquo;reset&amp;rdquo; the specific level of the logger (and use the default configuration instead), you can pass a value of &lt;code&gt;null&lt;/code&gt; as the &lt;code&gt;configuredLevel&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="28ef52ad75ff027bf32fa0103b066cee4d9fdf23" translate="yes" xml:space="preserve">
          <source>To access MongoDB databases, you can inject an auto-configured &lt;code&gt;org.springframework.data.mongodb.MongoDatabaseFactory&lt;/code&gt;. By default, the instance tries to connect to a MongoDB server at &lt;code&gt;mongodb://localhost/test&lt;/code&gt;. The following example shows how to connect to a MongoDB database:</source>
          <target state="translated">To access MongoDB databases, you can inject an auto-configured &lt;code&gt;org.springframework.data.mongodb.MongoDatabaseFactory&lt;/code&gt; . By default, the instance tries to connect to a MongoDB server at &lt;code&gt;mongodb://localhost/test&lt;/code&gt; . The following example shows how to connect to a MongoDB database:</target>
        </trans-unit>
        <trans-unit id="6b2e6a79462b42f98f0ddebb1a416931398b299d" translate="yes" xml:space="preserve">
          <source>To access a Neo4j server, you can inject an auto-configured &lt;code&gt;org.neo4j.driver.Driver&lt;/code&gt;. By default, the instance tries to connect to a Neo4j server at &lt;code&gt;localhost:7687&lt;/code&gt; using the Bolt protocol. The following example shows how to inject a Neo4j &lt;code&gt;Driver&lt;/code&gt; that gives you access, amongst other things, to a &lt;code&gt;Session&lt;/code&gt;:</source>
          <target state="translated">To access a Neo4j server, you can inject an auto-configured &lt;code&gt;org.neo4j.driver.Driver&lt;/code&gt; . By default, the instance tries to connect to a Neo4j server at &lt;code&gt;localhost:7687&lt;/code&gt; using the Bolt protocol. The following example shows how to inject a Neo4j &lt;code&gt;Driver&lt;/code&gt; that gives you access, amongst other things, to a &lt;code&gt;Session&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="eddb65ac0fb7482cb7755c6f3f749537ff445381" translate="yes" xml:space="preserve">
          <source>To add a &lt;code&gt;Servlet&lt;/code&gt;, &lt;code&gt;Filter&lt;/code&gt;, or Servlet &lt;code&gt;*Listener&lt;/code&gt; by using a Spring bean, you must provide a &lt;code&gt;@Bean&lt;/code&gt; definition for it. Doing so can be very useful when you want to inject configuration or dependencies. However, you must be very careful that they do not cause eager initialization of too many other beans, because they have to be installed in the container very early in the application lifecycle. (For example, it is not a good idea to have them depend on your &lt;code&gt;DataSource&lt;/code&gt; or JPA configuration.) You can work around such restrictions by initializing the beans lazily when first used instead of on initialization.</source>
          <target state="translated">To add a &lt;code&gt;Servlet&lt;/code&gt; , &lt;code&gt;Filter&lt;/code&gt; , or Servlet &lt;code&gt;*Listener&lt;/code&gt; by using a Spring bean, you must provide a &lt;code&gt;@Bean&lt;/code&gt; definition for it. Doing so can be very useful when you want to inject configuration or dependencies. However, you must be very careful that they do not cause eager initialization of too many other beans, because they have to be installed in the container very early in the application lifecycle. (For example, it is not a good idea to have them depend on your &lt;code&gt;DataSource&lt;/code&gt; or JPA configuration.) You can work around such restrictions by initializing the beans lazily when first used instead of on initialization.</target>
        </trans-unit>
        <trans-unit id="498ca879cf0bac928c9eb892e8660d6416cafae9" translate="yes" xml:space="preserve">
          <source>To add additional logging during startup, you can override &lt;code&gt;logStartupInfo(boolean)&lt;/code&gt; in a subclass of &lt;code&gt;SpringApplication&lt;/code&gt;.</source>
          <target state="translated">To add additional logging during startup, you can override &lt;code&gt;logStartupInfo(boolean)&lt;/code&gt; in a subclass of &lt;code&gt;SpringApplication&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1464a0158993f0aa3fb409307826b43e86e6429d" translate="yes" xml:space="preserve">
          <source>To add the actuator to a Maven based project, add the following &amp;lsquo;Starter&amp;rsquo; dependency:</source>
          <target state="translated">To add the actuator to a Maven based project, add the following &amp;lsquo;Starter&amp;rsquo; dependency:</target>
        </trans-unit>
        <trans-unit id="1783683a7bc3465e5ca2201eea584202d6b8b176" translate="yes" xml:space="preserve">
          <source>To add to the default tags, provide one or more &lt;code&gt;@Bean&lt;/code&gt;s that implement &lt;code&gt;WebFluxTagsContributor&lt;/code&gt;. To replace the default tags, provide a &lt;code&gt;@Bean&lt;/code&gt; that implements &lt;code&gt;WebFluxTagsProvider&lt;/code&gt;.</source>
          <target state="translated">To add to the default tags, provide one or more &lt;code&gt;@Bean&lt;/code&gt; s that implement &lt;code&gt;WebFluxTagsContributor&lt;/code&gt; . To replace the default tags, provide a &lt;code&gt;@Bean&lt;/code&gt; that implements &lt;code&gt;WebFluxTagsProvider&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0fd6f9bbd6e31f23468b1b75277e1f1d41c8ca54" translate="yes" xml:space="preserve">
          <source>To add to the default tags, provide one or more &lt;code&gt;@Bean&lt;/code&gt;s that implement &lt;code&gt;WebMvcTagsContributor&lt;/code&gt;. To replace the default tags, provide a &lt;code&gt;@Bean&lt;/code&gt; that implements &lt;code&gt;WebMvcTagsProvider&lt;/code&gt;.</source>
          <target state="translated">To add to the default tags, provide one or more &lt;code&gt;@Bean&lt;/code&gt; s that implement &lt;code&gt;WebMvcTagsContributor&lt;/code&gt; . To replace the default tags, provide a &lt;code&gt;@Bean&lt;/code&gt; that implements &lt;code&gt;WebMvcTagsProvider&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="02aa24250a60b948a4451637cccebfd20b3f6fcf" translate="yes" xml:space="preserve">
          <source>To allow the input to be mapped to the operation method&amp;rsquo;s parameters, Java code implementing an endpoint should be compiled with &lt;code&gt;-parameters&lt;/code&gt;, and Kotlin code implementing an endpoint should be compiled with &lt;code&gt;-java-parameters&lt;/code&gt;. This will happen automatically if you are using Spring Boot&amp;rsquo;s Gradle plugin or if you are using Maven and &lt;code&gt;spring-boot-starter-parent&lt;/code&gt;.</source>
          <target state="translated">To allow the input to be mapped to the operation method&amp;rsquo;s parameters, Java code implementing an endpoint should be compiled with &lt;code&gt;-parameters&lt;/code&gt; , and Kotlin code implementing an endpoint should be compiled with &lt;code&gt;-java-parameters&lt;/code&gt; . This will happen automatically if you are using Spring Boot&amp;rsquo;s Gradle plugin or if you are using Maven and &lt;code&gt;spring-boot-starter-parent&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f1849861eee6d81fff7ee143f6deec466262e401" translate="yes" xml:space="preserve">
          <source>To allow your listener to distinguish between an event for its context and an event for a descendant context, it should request that its application context is injected and then compare the injected context with the context of the event. The context can be injected by implementing &lt;code&gt;ApplicationContextAware&lt;/code&gt; or, if the listener is a bean, by using &lt;code&gt;@Autowired&lt;/code&gt;.</source>
          <target state="translated">To allow your listener to distinguish between an event for its context and an event for a descendant context, it should request that its application context is injected and then compare the injected context with the context of the event. The context can be injected by implementing &lt;code&gt;ApplicationContextAware&lt;/code&gt; or, if the listener is a bean, by using &lt;code&gt;@Autowired&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="150c1630e8cfea4692c86d91d999e3a1e19d8991" translate="yes" xml:space="preserve">
          <source>To also switch off the &lt;code&gt;UserDetailsService&lt;/code&gt; configuration, you can add a bean of type &lt;code&gt;ReactiveUserDetailsService&lt;/code&gt; or &lt;code&gt;ReactiveAuthenticationManager&lt;/code&gt;.</source>
          <target state="translated">To also switch off the &lt;code&gt;UserDetailsService&lt;/code&gt; configuration, you can add a bean of type &lt;code&gt;ReactiveUserDetailsService&lt;/code&gt; or &lt;code&gt;ReactiveAuthenticationManager&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1c0e01bce19ebe9e15821be388152d210901a4d6" translate="yes" xml:space="preserve">
          <source>To also switch off the &lt;code&gt;UserDetailsService&lt;/code&gt; configuration, you can add a bean of type &lt;code&gt;UserDetailsService&lt;/code&gt;, &lt;code&gt;AuthenticationProvider&lt;/code&gt;, or &lt;code&gt;AuthenticationManager&lt;/code&gt;.</source>
          <target state="translated">To also switch off the &lt;code&gt;UserDetailsService&lt;/code&gt; configuration, you can add a bean of type &lt;code&gt;UserDetailsService&lt;/code&gt; , &lt;code&gt;AuthenticationProvider&lt;/code&gt; , or &lt;code&gt;AuthenticationManager&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="05e8831ca3d1f5bffc00fdd945c5396d1a35257d" translate="yes" xml:space="preserve">
          <source>To attach a remote debugger to a Spring Boot application that was started with Maven, you can use the &lt;code&gt;jvmArguments&lt;/code&gt; property of the &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/maven-plugin/reference/htmlsingle/&quot;&gt;maven plugin&lt;/a&gt;.</source>
          <target state="translated">To attach a remote debugger to a Spring Boot application that was started with Maven, you can use the &lt;code&gt;jvmArguments&lt;/code&gt; property of the &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/maven-plugin/reference/htmlsingle/&quot;&gt;maven plugin&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="5bb7448aa7f52bec86f56d8498087659dc3caae7" translate="yes" xml:space="preserve">
          <source>To automatically run Flyway database migrations on startup, add the &lt;code&gt;org.flywaydb:flyway-core&lt;/code&gt; to your classpath.</source>
          <target state="translated">To automatically run Flyway database migrations on startup, add the &lt;code&gt;org.flywaydb:flyway-core&lt;/code&gt; to your classpath.</target>
        </trans-unit>
        <trans-unit id="7cd8012ffc81e3d016e79e7aeddf8c402d9b1f8f" translate="yes" xml:space="preserve">
          <source>To automatically run Liquibase database migrations on startup, add the &lt;code&gt;org.liquibase:liquibase-core&lt;/code&gt; to your classpath.</source>
          <target state="translated">To automatically run Liquibase database migrations on startup, add the &lt;code&gt;org.liquibase:liquibase-core&lt;/code&gt; to your classpath.</target>
        </trans-unit>
        <trans-unit id="fbfbd010094acfd17280dbcb44e81206d43b1f53" translate="yes" xml:space="preserve">
          <source>To avoid hard-coding those names in your own config, you can reuse &lt;code&gt;BeanNames&lt;/code&gt; provided by Spring Data Couchbase. For instance, you can customize the converters to use, as follows:</source>
          <target state="translated">To avoid hard-coding those names in your own config, you can reuse &lt;code&gt;BeanNames&lt;/code&gt; provided by Spring Data Couchbase. For instance, you can customize the converters to use, as follows:</target>
        </trans-unit>
        <trans-unit id="d768dca1fa3f46dc6929f476afd4d908840632f2" translate="yes" xml:space="preserve">
          <source>To build with Ant, you need to grab dependencies, compile, and then create a jar or war archive. To make it executable, you can either use the &lt;code&gt;spring-boot-antlib&lt;/code&gt; module or you can follow these instructions:</source>
          <target state="translated">To build with Ant, you need to grab dependencies, compile, and then create a jar or war archive. To make it executable, you can either use the &lt;code&gt;spring-boot-antlib&lt;/code&gt; module or you can follow these instructions:</target>
        </trans-unit>
        <trans-unit id="a120fcfd25654a1d5af1573b91d45dc10a79edc5" translate="yes" xml:space="preserve">
          <source>To change the error handling behavior, you can implement &lt;code&gt;ErrorWebExceptionHandler&lt;/code&gt; and register a bean definition of that type. Because a &lt;code&gt;WebExceptionHandler&lt;/code&gt; is quite low-level, Spring Boot also provides a convenient &lt;code&gt;AbstractErrorWebExceptionHandler&lt;/code&gt; to let you handle errors in a WebFlux functional way, as shown in the following example:</source>
          <target state="translated">To change the error handling behavior, you can implement &lt;code&gt;ErrorWebExceptionHandler&lt;/code&gt; and register a bean definition of that type. Because a &lt;code&gt;WebExceptionHandler&lt;/code&gt; is quite low-level, Spring Boot also provides a convenient &lt;code&gt;AbstractErrorWebExceptionHandler&lt;/code&gt; to let you handle errors in a WebFlux functional way, as shown in the following example:</target>
        </trans-unit>
        <trans-unit id="263656a6a66ff3ce1a6ec8a258bebe379200cdbd" translate="yes" xml:space="preserve">
          <source>To change which endpoints are exposed, use the following technology-specific &lt;code&gt;include&lt;/code&gt; and &lt;code&gt;exclude&lt;/code&gt; properties:</source>
          <target state="translated">To change which endpoints are exposed, use the following technology-specific &lt;code&gt;include&lt;/code&gt; and &lt;code&gt;exclude&lt;/code&gt; properties:</target>
        </trans-unit>
        <trans-unit id="45aa4d308528d2baeb4927668eb8de491398f9a8" translate="yes" xml:space="preserve">
          <source>To compile and run the application, type the following command:</source>
          <target state="translated">アプリケーションをコンパイルして実行するには、次のコマンドを入力します。</target>
        </trans-unit>
        <trans-unit id="3f4a87ebbb18c2a7ff84ad5941afaf7f95d1f039" translate="yes" xml:space="preserve">
          <source>To configure Spring Security to require a secure channel for all (or some) requests, consider adding your own &lt;code&gt;WebSecurityConfigurerAdapter&lt;/code&gt; that adds the following &lt;code&gt;HttpSecurity&lt;/code&gt; configuration:</source>
          <target state="translated">To configure Spring Security to require a secure channel for all (or some) requests, consider adding your own &lt;code&gt;WebSecurityConfigurerAdapter&lt;/code&gt; that adds the following &lt;code&gt;HttpSecurity&lt;/code&gt; configuration:</target>
        </trans-unit>
        <trans-unit id="094afe33a50e821139413245ebaacab37f668a71" translate="yes" xml:space="preserve">
          <source>To configure a bean from the &lt;code&gt;Environment&lt;/code&gt; properties, add &lt;code&gt;@ConfigurationProperties&lt;/code&gt; to its bean registration, as shown in the following example:</source>
          <target state="translated">To configure a bean from the &lt;code&gt;Environment&lt;/code&gt; properties, add &lt;code&gt;@ConfigurationProperties&lt;/code&gt; to its bean registration, as shown in the following example:</target>
        </trans-unit>
        <trans-unit id="0eb3d6f89f580d16912047b819752254008a11ff" translate="yes" xml:space="preserve">
          <source>To configure a classifier of &lt;code&gt;exec&lt;/code&gt; in Maven, you can use the following configuration:</source>
          <target state="translated">To configure a classifier of &lt;code&gt;exec&lt;/code&gt; in Maven, you can use the following configuration:</target>
        </trans-unit>
        <trans-unit id="4fa53d14e43882d840de7380ad76ca082e9059a9" translate="yes" xml:space="preserve">
          <source>To configure a given logger, &lt;code&gt;POST&lt;/code&gt; a partial entity to the resource&amp;rsquo;s URI, as shown in the following example:</source>
          <target state="translated">To configure a given logger, &lt;code&gt;POST&lt;/code&gt; a partial entity to the resource&amp;rsquo;s URI, as shown in the following example:</target>
        </trans-unit>
        <trans-unit id="df60b66c308ed6fb3336ca108e162016a4e12494" translate="yes" xml:space="preserve">
          <source>To configure the more fine-grained settings of a logging system, you need to use the native configuration format supported by the &lt;code&gt;LoggingSystem&lt;/code&gt; in question. By default, Spring Boot picks up the native configuration from its default location for the system (such as &lt;code&gt;classpath:logback.xml&lt;/code&gt; for Logback), but you can set the location of the config file by using the &lt;code&gt;logging.config&lt;/code&gt; property.</source>
          <target state="translated">To configure the more fine-grained settings of a logging system, you need to use the native configuration format supported by the &lt;code&gt;LoggingSystem&lt;/code&gt; in question. By default, Spring Boot picks up the native configuration from its default location for the system (such as &lt;code&gt;classpath:logback.xml&lt;/code&gt; for Logback), but you can set the location of the config file by using the &lt;code&gt;logging.config&lt;/code&gt; property.</target>
        </trans-unit>
        <trans-unit id="ba815de84baf35508fce18f28f3791c04784ea15" translate="yes" xml:space="preserve">
          <source>To configure the timeout period, configure the &lt;code&gt;spring.lifecycle.timeout-per-shutdown-phase&lt;/code&gt; property, as shown in the following example:</source>
          <target state="translated">To configure the timeout period, configure the &lt;code&gt;spring.lifecycle.timeout-per-shutdown-phase&lt;/code&gt; property, as shown in the following example:</target>
        </trans-unit>
        <trans-unit id="9a5f4605d493e9ca5c574421ff3ffd8eea88deb4" translate="yes" xml:space="preserve">
          <source>To configure your own &lt;code&gt;DataSource&lt;/code&gt;, define a &lt;code&gt;@Bean&lt;/code&gt; of that type in your configuration. Spring Boot reuses your &lt;code&gt;DataSource&lt;/code&gt; anywhere one is required, including database initialization. If you need to externalize some settings, you can bind your &lt;code&gt;DataSource&lt;/code&gt; to the environment (see &amp;ldquo;&lt;a href=&quot;spring-boot-features#boot-features-external-config-3rd-party-configuration&quot;&gt;spring-boot-features.html&lt;/a&gt;&amp;rdquo;).</source>
          <target state="translated">To configure your own &lt;code&gt;DataSource&lt;/code&gt; , define a &lt;code&gt;@Bean&lt;/code&gt; of that type in your configuration. Spring Boot reuses your &lt;code&gt;DataSource&lt;/code&gt; anywhere one is required, including database initialization. If you need to externalize some settings, you can bind your &lt;code&gt;DataSource&lt;/code&gt; to the environment (see &amp;ldquo;&lt;a href=&quot;spring-boot-features#boot-features-external-config-3rd-party-configuration&quot;&gt;spring-boot-features.html&lt;/a&gt;&amp;rdquo;).</target>
        </trans-unit>
        <trans-unit id="3614c5610f797a9ad43114f242fc0e6750f27e46" translate="yes" xml:space="preserve">
          <source>To connect to Elasticsearch, a &lt;code&gt;RestHighLevelClient&lt;/code&gt; bean must be defined, auto-configured by Spring Boot or manually provided by the application (see previous sections). With this configuration in place, an &lt;code&gt;ElasticsearchRestTemplate&lt;/code&gt; can be injected like any other Spring bean, as shown in the following example:</source>
          <target state="translated">To connect to Elasticsearch, a &lt;code&gt;RestHighLevelClient&lt;/code&gt; bean must be defined, auto-configured by Spring Boot or manually provided by the application (see previous sections). With this configuration in place, an &lt;code&gt;ElasticsearchRestTemplate&lt;/code&gt; can be injected like any other Spring bean, as shown in the following example:</target>
        </trans-unit>
        <trans-unit id="7be3febdc837b8d2b3ede9a7350331aa8e78f674" translate="yes" xml:space="preserve">
          <source>To connect to an LDAP server, make sure you declare a dependency on the &lt;code&gt;spring-boot-starter-data-ldap&lt;/code&gt; &amp;ldquo;Starter&amp;rdquo; or &lt;code&gt;spring-ldap-core&lt;/code&gt; and then declare the URLs of your server in your application.properties, as shown in the following example:</source>
          <target state="translated">To connect to an LDAP server, make sure you declare a dependency on the &lt;code&gt;spring-boot-starter-data-ldap&lt;/code&gt; &amp;ldquo;Starter&amp;rdquo; or &lt;code&gt;spring-ldap-core&lt;/code&gt; and then declare the URLs of your server in your application.properties, as shown in the following example:</target>
        </trans-unit>
        <trans-unit id="510fca515d585954e9818889dd81b3237dca2d5a" translate="yes" xml:space="preserve">
          <source>To convert a property name in the canonical-form to an environment variable name you can follow these rules:</source>
          <target state="translated">正規形のプロパティ名を環境変数名に変換するには、以下のルールに従います。</target>
        </trans-unit>
        <trans-unit id="7135357c3b294e37ae76ba918e840703f755bd71" translate="yes" xml:space="preserve">
          <source>To convert an existing non-web Spring application to a Spring Boot application, replace the code that creates your &lt;code&gt;ApplicationContext&lt;/code&gt; and replace it with calls to &lt;code&gt;SpringApplication&lt;/code&gt; or &lt;code&gt;SpringApplicationBuilder&lt;/code&gt;. Spring MVC web applications are generally amenable to first creating a deployable war application and then migrating it later to an executable war or jar. See the &lt;a href=&quot;https://spring.io/guides/gs/convert-jar-to-war/&quot;&gt;Getting Started Guide on Converting a jar to a war&lt;/a&gt;.</source>
          <target state="translated">To convert an existing non-web Spring application to a Spring Boot application, replace the code that creates your &lt;code&gt;ApplicationContext&lt;/code&gt; and replace it with calls to &lt;code&gt;SpringApplication&lt;/code&gt; or &lt;code&gt;SpringApplicationBuilder&lt;/code&gt; . Spring MVC web applications are generally amenable to first creating a deployable war application and then migrating it later to an executable war or jar. See the &lt;a href=&quot;https://spring.io/guides/gs/convert-jar-to-war/&quot;&gt;Getting Started Guide on Converting a jar to a war&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="60697af70adf614cf8c974099c63aa68683a7a34" translate="yes" xml:space="preserve">
          <source>To create a &amp;lsquo;fully executable&amp;rsquo; jar with Maven, use the following plugin configuration:</source>
          <target state="translated">Mavenで「完全に実行可能な」jarを作成するには、次のプラグイン構成を使用します。</target>
        </trans-unit>
        <trans-unit id="66cba0e23c97e083689bdcf88270ceff9d05aacc" translate="yes" xml:space="preserve">
          <source>To create a deployable war by extending &lt;code&gt;SpringBootServletInitializer&lt;/code&gt; (for example, in a class called &lt;code&gt;Application&lt;/code&gt;) and adding the Spring Boot &lt;code&gt;@SpringBootApplication&lt;/code&gt; annotation, use code similar to that shown in the following example:</source>
          <target state="translated">&lt;code&gt;SpringBootServletInitializer&lt;/code&gt; を拡張して（たとえば、 &lt;code&gt;Application&lt;/code&gt; というクラスで）、Spring Boot &lt;code&gt;@SpringBootApplication&lt;/code&gt; アノテーションを追加してデプロイ可能なwarを作成するには、次の例に示すようなコードを使用します。</target>
        </trans-unit>
        <trans-unit id="d70942ebc7e96b4ffefe4f6159d05515820e1869" translate="yes" xml:space="preserve">
          <source>To create a health indicator group you can use the &lt;code&gt;management.endpoint.health.group.&amp;lt;name&amp;gt;&lt;/code&gt; property and specify a list of health indicator IDs to &lt;code&gt;include&lt;/code&gt; or &lt;code&gt;exclude&lt;/code&gt;. For example, to create a group that includes only database indicators you can define the following:</source>
          <target state="translated">ヘルスインジケーターグループを作成するには、 &lt;code&gt;management.endpoint.health.group.&amp;lt;name&amp;gt;&lt;/code&gt; プロパティを使用して、 &lt;code&gt;include&lt;/code&gt; または &lt;code&gt;exclude&lt;/code&gt; ヘルスインジケーターIDのリストを指定します。たとえば、データベースインジケータのみを含むグループを作成するには、以下を定義できます。</target>
        </trans-unit>
        <trans-unit id="b2091755f98c3824ef06a6689ff037e3bc6dc1bb" translate="yes" xml:space="preserve">
          <source>To create a topic on startup, add a bean of type &lt;code&gt;NewTopic&lt;/code&gt;. If the topic already exists, the bean is ignored.</source>
          <target state="translated">起動時にトピックを作成するには、タイプ &lt;code&gt;NewTopic&lt;/code&gt; のBeanを追加します。トピックがすでに存在する場合、Beanは無視されます。</target>
        </trans-unit>
        <trans-unit id="2b58b9847dab84d6686dc2d3c224dee06d642482" translate="yes" xml:space="preserve">
          <source>To create an executable jar, we need to add the &lt;code&gt;spring-boot-maven-plugin&lt;/code&gt; to our &lt;code&gt;pom.xml&lt;/code&gt;. To do so, insert the following lines just below the &lt;code&gt;dependencies&lt;/code&gt; section:</source>
          <target state="translated">実行可能jarを作成するには、 &lt;code&gt;spring-boot-maven-plugin&lt;/code&gt; を &lt;code&gt;pom.xml&lt;/code&gt; に追加する必要があります。これを行うには、 &lt;code&gt;dependencies&lt;/code&gt; セクションのすぐ下に次の行を挿入します。</target>
        </trans-unit>
        <trans-unit id="7a7a46c4a1b17e5f9408c54afe8453ea92aec6d8" translate="yes" xml:space="preserve">
          <source>To customize published security events, you can provide your own implementations of &lt;code&gt;AbstractAuthenticationAuditListener&lt;/code&gt; and &lt;code&gt;AbstractAuthorizationAuditListener&lt;/code&gt;.</source>
          <target state="translated">公開されたセキュリティイベントをカスタマイズするために、 &lt;code&gt;AbstractAuthenticationAuditListener&lt;/code&gt; および &lt;code&gt;AbstractAuthorizationAuditListener&lt;/code&gt; の独自の実装を提供できます。</target>
        </trans-unit>
        <trans-unit id="15dc6ed63f28d69b442cdf002d107f69a700d63f" translate="yes" xml:space="preserve">
          <source>To customize the &lt;code&gt;WebTestClient&lt;/code&gt; bean, configure a &lt;code&gt;WebTestClientBuilderCustomizer&lt;/code&gt; bean. Any such beans are called with the &lt;code&gt;WebTestClient.Builder&lt;/code&gt; that is used to create the &lt;code&gt;WebTestClient&lt;/code&gt;.</source>
          <target state="translated">カスタマイズするには &lt;code&gt;WebTestClient&lt;/code&gt; の豆を、設定 &lt;code&gt;WebTestClientBuilderCustomizer&lt;/code&gt; の豆を。そのような任意の豆を使って呼び出され &lt;code&gt;WebTestClient.Builder&lt;/code&gt; 作成するために使用される &lt;code&gt;WebTestClient&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="c36d6af6b3a283b0cb9dcd89a1b146a0fc1bbec2" translate="yes" xml:space="preserve">
          <source>To customize the connections created by a &lt;code&gt;ConnectionFactory&lt;/code&gt;, i.e., set specific parameters that you do not want (or cannot) configure in your central database configuration, you can use a &lt;code&gt;ConnectionFactoryOptionsBuilderCustomizer&lt;/code&gt;&lt;code&gt;@Bean&lt;/code&gt;. The following example shows how to manually override the database port while the rest of the options is taken from the application configuration:</source>
          <target state="translated">&lt;code&gt;ConnectionFactory&lt;/code&gt; によって作成された接続をカスタマイズする、つまり、中央データベース構成で構成したくない（または構成できない）特定のパラメーターを設定するには、 &lt;code&gt;ConnectionFactoryOptionsBuilderCustomizer&lt;/code&gt; &lt;code&gt;@Bean&lt;/code&gt; 使用できます。次の例は、残りのオプションがアプリケーション構成から取得されている間に、データベースポートを手動でオーバーライドする方法を示しています。</target>
        </trans-unit>
        <trans-unit id="e4763acf34b90430955dad0a20a11ac247924109" translate="yes" xml:space="preserve">
          <source>To customize the items that are included in each trace, use the &lt;code&gt;management.trace.http.include&lt;/code&gt; configuration property. For advanced customization, consider registering your own &lt;code&gt;HttpExchangeTracer&lt;/code&gt; implementation.</source>
          <target state="translated">各トレースに含まれる項目をカスタマイズするには、 &lt;code&gt;management.trace.http.include&lt;/code&gt; 構成プロパティを使用します。高度なカスタマイズについては、独自の &lt;code&gt;HttpExchangeTracer&lt;/code&gt; 実装を登録することを検討してください。</target>
        </trans-unit>
        <trans-unit id="ba931925192105ae62d8ee1859dc49660955fcf7" translate="yes" xml:space="preserve">
          <source>To customize the tags, and depending on your choice of client, you can provide a &lt;code&gt;@Bean&lt;/code&gt; that implements &lt;code&gt;RestTemplateExchangeTagsProvider&lt;/code&gt; or &lt;code&gt;WebClientExchangeTagsProvider&lt;/code&gt;. There are convenience static functions in &lt;code&gt;RestTemplateExchangeTags&lt;/code&gt; and &lt;code&gt;WebClientExchangeTags&lt;/code&gt;.</source>
          <target state="translated">タグをカスタマイズするために、またクライアントの選択に応じて、 &lt;code&gt;RestTemplateExchangeTagsProvider&lt;/code&gt; または &lt;code&gt;WebClientExchangeTagsProvider&lt;/code&gt; を実装する &lt;code&gt;@Bean&lt;/code&gt; を提供できます。 &lt;code&gt;RestTemplateExchangeTags&lt;/code&gt; と &lt;code&gt;WebClientExchangeTags&lt;/code&gt; には便利な静的関数があります。</target>
        </trans-unit>
        <trans-unit id="18868922145d54b5df1c1ee2e5e559a7b11e0a62" translate="yes" xml:space="preserve">
          <source>To customize the tags, provide a &lt;code&gt;@Bean&lt;/code&gt; that implements &lt;code&gt;JerseyTagsProvider&lt;/code&gt;.</source>
          <target state="translated">タグをカスタマイズするには、提供 &lt;code&gt;@Bean&lt;/code&gt; 実装する &lt;code&gt;JerseyTagsProvider&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="1290dbb07196bfa6b85125f663324b0814f6c1fd" translate="yes" xml:space="preserve">
          <source>To customize written elements, use the &lt;code&gt;embeddedLaunchScriptProperties&lt;/code&gt; option of the Spring Boot Maven plugin or the &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/gradle-plugin/reference/htmlsingle/#packaging-executable-configuring-launch-script&quot;&gt;&lt;code&gt;properties&lt;/code&gt; property of the Spring Boot Gradle plugin&amp;rsquo;s &lt;code&gt;launchScript&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">記述された要素をカスタマイズするには、Spring Boot Mavenプラグインの &lt;code&gt;embeddedLaunchScriptProperties&lt;/code&gt; オプション、または&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/gradle-plugin/reference/htmlsingle/#packaging-executable-configuring-launch-script&quot;&gt;Spring &lt;/a&gt; &lt;code&gt;launchScript&lt;/code&gt; プラグインのlaunchScriptの &lt;code&gt;properties&lt;/code&gt; プロパティを使用します。</target>
        </trans-unit>
        <trans-unit id="0051988b42a02e8b294f4aea87a821ff847b3b2f" translate="yes" xml:space="preserve">
          <source>To deal with any problematic libraries, you can flag that specific nested jars should be automatically unpacked when the executable jar first runs. Such nested jars are written beneath the temporary directory identified by the &lt;code&gt;java.io.tmpdir&lt;/code&gt; system property.</source>
          <target state="translated">問題のあるライブラリに対処するために、実行可能jarが最初に実行されたときに、特定のネストされたjarが自動的に解凍されるようにフラグを立てることができます。このようなネストされたjarは、 &lt;code&gt;java.io.tmpdir&lt;/code&gt; システムプロパティで識別される一時ディレクトリの下に書き込まれます。</target>
        </trans-unit>
        <trans-unit id="67d02995ac6d297ce2728981a0728dcacd13e236" translate="yes" xml:space="preserve">
          <source>To declare dependencies, a typical &lt;code&gt;ivy.xml&lt;/code&gt; file looks something like the following example:</source>
          <target state="translated">依存関係を宣言するために、典型的な &lt;code&gt;ivy.xml&lt;/code&gt; ファイルは次の例のようになります。</target>
        </trans-unit>
        <trans-unit id="2354665a5159e6ca3204eae688affbfb88a9b08c" translate="yes" xml:space="preserve">
          <source>To deploy a Spring Boot application to WebLogic, you must ensure that your servlet initializer &lt;strong&gt;directly&lt;/strong&gt; implements &lt;code&gt;WebApplicationInitializer&lt;/code&gt; (even if you extend from a base class that already implements it).</source>
          <target state="translated">Spring BootアプリケーションをWebLogicにデプロイするには、サーブレット初期化子が &lt;code&gt;WebApplicationInitializer&lt;/code&gt; を&lt;strong&gt;直接&lt;/strong&gt;実装していることを確認する必要があります（すでに実装している基本クラスから拡張した場合でも）。</target>
        </trans-unit>
        <trans-unit id="6ce3397cf40a76a4a52e0936c4801717e4766a2b" translate="yes" xml:space="preserve">
          <source>To disable the logging of the report, set the following property:</source>
          <target state="translated">レポートのログを無効にするには、以下のプロパティを設定します。</target>
        </trans-unit>
        <trans-unit id="c72382fa82b26ba692919be6dfc63b7f130056d3" translate="yes" xml:space="preserve">
          <source>To do this with JCache, first make sure that &lt;code&gt;org.hibernate:hibernate-jcache&lt;/code&gt; is available on the classpath. Then, add a &lt;code&gt;HibernatePropertiesCustomizer&lt;/code&gt; bean as shown in the following example:</source>
          <target state="translated">JCacheでこれを行うには、最初に &lt;code&gt;org.hibernate:hibernate-jcache&lt;/code&gt; がクラスパスで使用可能であることを確認してください。次に、次の例に示すように、 &lt;code&gt;HibernatePropertiesCustomizer&lt;/code&gt; Beanを追加します。</target>
        </trans-unit>
        <trans-unit id="4811ae8df2b7617dc82499cdeb8310578aa52798" translate="yes" xml:space="preserve">
          <source>To enable HTTP/2 with cleartext support, you need to leave the &lt;code&gt;server.http2.enabled&lt;/code&gt; property set to &lt;code&gt;false&lt;/code&gt;, and instead apply a customizer specific to your choice of server:</source>
          <target state="translated">クリアテキストをサポートしてHTTP / 2を有効にするには、 &lt;code&gt;server.http2.enabled&lt;/code&gt; プロパティを &lt;code&gt;false&lt;/code&gt; に設定したままにし、代わりに選択したサーバーに固有のカスタマイザーを適用する必要があります。</target>
        </trans-unit>
        <trans-unit id="49a2631d1fa2afce31066cbd7f9087426dce47e5" translate="yes" xml:space="preserve">
          <source>To enable graceful shutdown, configure the &lt;code&gt;server.shutdown&lt;/code&gt; property, as shown in the following example:</source>
          <target state="translated">グレースフルシャットダウンを有効にするには、次の例に示すように、 &lt;code&gt;server.shutdown&lt;/code&gt; プロパティを構成します。</target>
        </trans-unit>
        <trans-unit id="bd810316d0f977881eaebd063add2fc734fcaa7a" translate="yes" xml:space="preserve">
          <source>To enable it, you need to make sure that &lt;code&gt;devtools&lt;/code&gt; is included in the repackaged archive, as shown in the following listing:</source>
          <target state="translated">これを有効にするには、次のリストに示すように、 &lt;code&gt;devtools&lt;/code&gt; が再パッケージ化されたアーカイブに含まれていることを確認する必要があります。</target>
        </trans-unit>
        <trans-unit id="9f862771b780444d18d657a6a7948b5c5ba808de" translate="yes" xml:space="preserve">
          <source>To enable statistics, the standard JPA property &lt;code&gt;hibernate.generate_statistics&lt;/code&gt; must be set to &lt;code&gt;true&lt;/code&gt;. You can enable that on the auto-configured &lt;code&gt;EntityManagerFactory&lt;/code&gt; as shown in the following example:</source>
          <target state="translated">統計を有効にするには、標準のJPAプロパティ &lt;code&gt;hibernate.generate_statistics&lt;/code&gt; を &lt;code&gt;true&lt;/code&gt; に設定する必要があります。次の例に示すように、自動構成された &lt;code&gt;EntityManagerFactory&lt;/code&gt; でこれを有効にできます。</target>
        </trans-unit>
        <trans-unit id="6f6526605b9483d1ef312c31ebbeb0433b4f2f28" translate="yes" xml:space="preserve">
          <source>To ensure that debug logging performed using &lt;code&gt;java.util.logging&lt;/code&gt; is routed into Log4j 2, configure its &lt;a href=&quot;https://logging.apache.org/log4j/2.x/log4j-jul/index.html&quot;&gt;JDK logging adapter&lt;/a&gt; by setting the &lt;code&gt;java.util.logging.manager&lt;/code&gt; system property to &lt;code&gt;org.apache.logging.log4j.jul.LogManager&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;java.util.logging&lt;/code&gt; を使用して実行されたデバッグロギングがLog4j2にルーティングされるようにするには、 &lt;code&gt;java.util.logging.manager&lt;/code&gt; システムプロパティを &lt;code&gt;org.apache.logging.log4j.jul.LogManager&lt;/code&gt; に設定して、&lt;a href=&quot;https://logging.apache.org/log4j/2.x/log4j-jul/index.html&quot;&gt;JDKロギングアダプタ&lt;/a&gt;を設定します。</target>
        </trans-unit>
        <trans-unit id="a66da54df81e5efdc52cfed720ad2331a3162336" translate="yes" xml:space="preserve">
          <source>To ensure that multiple transaction managers can safely coordinate the same resource managers, each Atomikos instance must be configured with a unique ID. By default, this ID is the IP address of the machine on which Atomikos is running. To ensure uniqueness in production, you should configure the &lt;code&gt;spring.jta.transaction-manager-id&lt;/code&gt; property with a different value for each instance of your application.</source>
          <target state="translated">複数のトランザクションマネージャーが同じリソースマネージャーを安全に調整できるようにするには、各Atomikosインスタンスを一意のIDで構成する必要があります。デフォルトでは、このIDはAtomikosが実行されているマシンのIPアドレスです。本番環境での一意性を確保するには、アプリケーションのインスタンスごとに異なる値を使用して &lt;code&gt;spring.jta.transaction-manager-id&lt;/code&gt; プロパティを構成する必要があります。</target>
        </trans-unit>
        <trans-unit id="50a3eead8cc279f0662c98f43f1060639c4a2520" translate="yes" xml:space="preserve">
          <source>To ensure that multiple transaction managers can safely coordinate the same resource managers, each Bitronix instance must be configured with a unique ID. By default, this ID is the IP address of the machine on which Bitronix is running. To ensure uniqueness in production, you should configure the &lt;code&gt;spring.jta.transaction-manager-id&lt;/code&gt; property with a different value for each instance of your application.</source>
          <target state="translated">複数のトランザクションマネージャーが同じリソースマネージャーを安全に調整できるようにするには、各Bitronixインスタンスを一意のIDで構成する必要があります。デフォルトでは、このIDはBitronixが実行されているマシンのIPアドレスです。本番環境での一意性を確保するには、アプリケーションのインスタンスごとに異なる値を使用して &lt;code&gt;spring.jta.transaction-manager-id&lt;/code&gt; プロパティを構成する必要があります。</target>
        </trans-unit>
        <trans-unit id="3238fd6522a2454690f389aac4090ac842f05093" translate="yes" xml:space="preserve">
          <source>To ensure that validation is always triggered for nested properties, even when no properties are found, the associated field must be annotated with &lt;code&gt;@Valid&lt;/code&gt;. The following example builds on the preceding &lt;code&gt;AcmeProperties&lt;/code&gt; example:</source>
          <target state="translated">プロパティが見つからない場合でも、ネストされたプロパティに対して常に検証がトリガーされるようにするには、関連付けられたフィールドに &lt;code&gt;@Valid&lt;/code&gt; アノテーションを付ける必要があります。次の例は、前の &lt;code&gt;AcmeProperties&lt;/code&gt; の例に基づいています。</target>
        </trans-unit>
        <trans-unit id="becbcb1c7f2c9d46d5e507483b5adbc6ec29222a" translate="yes" xml:space="preserve">
          <source>To finish our application, we need to create a single Java file. By default, Maven compiles sources from &lt;code&gt;src/main/java&lt;/code&gt;, so you need to create that directory structure and then add a file named &lt;code&gt;src/main/java/Example.java&lt;/code&gt; to contain the following code:</source>
          <target state="translated">アプリケーションを完成させるには、単一のJavaファイルを作成する必要があります。デフォルトでは、Mavenは &lt;code&gt;src/main/java&lt;/code&gt; からソースをコンパイルするため、そのディレクトリ構造を作成してから、次のコードを含む &lt;code&gt;src/main/java/Example.java&lt;/code&gt; という名前のファイルを追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="6948ccd651fe5324cd6cad1724548914d17318d2" translate="yes" xml:space="preserve">
          <source>To flag the application to start automatically on system boot, use the following command:</source>
          <target state="translated">システム起動時にアプリケーションが自動的に起動するようにフラグを立てるには、次のコマンドを使用します。</target>
        </trans-unit>
        <trans-unit id="de168255ca588720e127cccfd4f3c52ee0d8f3a3" translate="yes" xml:space="preserve">
          <source>To generate &lt;a href=&quot;appendix-configuration-metadata#configuration-metadata-annotation-processor&quot;&gt;your own metadata&lt;/a&gt; using the annotation processor, &lt;a href=&quot;https://kotlinlang.org/docs/reference/kapt.html&quot;&gt;&lt;code&gt;kapt&lt;/code&gt; should be configured&lt;/a&gt; with the &lt;code&gt;spring-boot-configuration-processor&lt;/code&gt; dependency. Note that some features (such as detecting the default value or deprecated items) are not working due to limitations in the model kapt provides.</source>
          <target state="translated">アノテーションプロセッサを使用し&lt;a href=&quot;appendix-configuration-metadata#configuration-metadata-annotation-processor&quot;&gt;て独自のメタデータ&lt;/a&gt;を生成するには、&lt;a href=&quot;https://kotlinlang.org/docs/reference/kapt.html&quot;&gt; &lt;code&gt;kapt&lt;/code&gt; を&lt;/a&gt; &lt;code&gt;spring-boot-configuration-processor&lt;/code&gt; 依存関係で構成する必要があります。kaptが提供するモデルの制限により、一部の機能（デフォルト値の検出や非推奨の項目など）が機能しないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="5bfd8106708bd40de81d253e32fc14c42ed65b3b" translate="yes" xml:space="preserve">
          <source>To generate build information with Maven, add an execution for the &lt;code&gt;build-info&lt;/code&gt; goal, as shown in the following example:</source>
          <target state="translated">Mavenを使用してビルド情報を生成するには、次の例に示すように、 &lt;code&gt;build-info&lt;/code&gt; ゴールの実行を追加します。</target>
        </trans-unit>
        <trans-unit id="3b022bfd0344ad349bcaf9fb88bcdeda959ac448" translate="yes" xml:space="preserve">
          <source>To get started with Jersey, include the &lt;code&gt;spring-boot-starter-jersey&lt;/code&gt; as a dependency and then you need one &lt;code&gt;@Bean&lt;/code&gt; of type &lt;code&gt;ResourceConfig&lt;/code&gt; in which you register all the endpoints, as shown in the following example:</source>
          <target state="translated">Jerseyの使用を開始するには、依存関係として &lt;code&gt;spring-boot-starter-jersey&lt;/code&gt; を &lt;code&gt;@Bean&lt;/code&gt; ます。次に、次の例に示すように、すべてのエンドポイントを登録する &lt;code&gt;ResourceConfig&lt;/code&gt; タイプの@Beanが1つ必要です。</target>
        </trans-unit>
        <trans-unit id="ba257093d8b60c5fc142ccea369a7d4570145da7" translate="yes" xml:space="preserve">
          <source>To get started, add the &lt;code&gt;spring-boot-starter-webflux&lt;/code&gt; module to your application.</source>
          <target state="translated">開始するには、 &lt;code&gt;spring-boot-starter-webflux&lt;/code&gt; モジュールをアプリケーションに追加します。</target>
        </trans-unit>
        <trans-unit id="7a2d1e5ea6d8b889b0e95d591f85b446e700391f" translate="yes" xml:space="preserve">
          <source>To get the server to render XML instead of JSON, you might have to send an &lt;code&gt;Accept: text/xml&lt;/code&gt; header (or use a browser).</source>
          <target state="translated">サーバーにJSONではなくXMLをレンダリングさせるには、 &lt;code&gt;Accept: text/xml&lt;/code&gt; ヘッダーを送信する（またはブラウザーを使用する）必要がある場合があります。</target>
        </trans-unit>
        <trans-unit id="e0dbeb0a1dc6b66fcbc497e6ce78a566faea12db" translate="yes" xml:space="preserve">
          <source>To gracefully exit the application, press &lt;code&gt;ctrl-c&lt;/code&gt;.</source>
          <target state="translated">アプリケーションを正常に終了するには、 &lt;code&gt;ctrl-c&lt;/code&gt; を押します。</target>
        </trans-unit>
        <trans-unit id="ef85cd41a4242d226b74c1484c09dda460940ad6" translate="yes" xml:space="preserve">
          <source>To handle the error automatically, consider extending from &lt;code&gt;AbstractReactiveHealthIndicator&lt;/code&gt;.</source>
          <target state="translated">エラーを自動的に処理するには、 &lt;code&gt;AbstractReactiveHealthIndicator&lt;/code&gt; から拡張することを検討してください。</target>
        </trans-unit>
        <trans-unit id="d1d47eb5019e2680d6f961d132e5ab2bba3e68d3" translate="yes" xml:space="preserve">
          <source>To handle this scenario, a separate &lt;code&gt;@Configuration&lt;/code&gt; class can be used to isolate the condition, as shown in the following example:</source>
          <target state="translated">このシナリオを処理するには、次の例に示すように、別の &lt;code&gt;@Configuration&lt;/code&gt; クラスを使用して条件を分離できます。</target>
        </trans-unit>
        <trans-unit id="1a562dd8f28c94acfed6f2090261f9132a6ffd5d" translate="yes" xml:space="preserve">
          <source>To have Quartz use a &lt;code&gt;DataSource&lt;/code&gt; other than the application&amp;rsquo;s main &lt;code&gt;DataSource&lt;/code&gt;, declare a &lt;code&gt;DataSource&lt;/code&gt; bean, annotating its &lt;code&gt;@Bean&lt;/code&gt; method with &lt;code&gt;@QuartzDataSource&lt;/code&gt;. Doing so ensures that the Quartz-specific &lt;code&gt;DataSource&lt;/code&gt; is used by both the &lt;code&gt;SchedulerFactoryBean&lt;/code&gt; and for schema initialization. Similarly, to have Quartz use a &lt;code&gt;TransactionManager&lt;/code&gt; other than the application&amp;rsquo;s main &lt;code&gt;TransactionManager&lt;/code&gt; declare a &lt;code&gt;TransactionManager&lt;/code&gt; bean, annotating its &lt;code&gt;@Bean&lt;/code&gt; method with &lt;code&gt;@QuartzTransactionManager&lt;/code&gt;.</source>
          <target state="translated">Quartzでアプリケーションのメインの &lt;code&gt;DataSource&lt;/code&gt; 以外の &lt;code&gt;DataSource&lt;/code&gt; を使用するには、 &lt;code&gt;DataSource&lt;/code&gt; Beanを宣言し、その &lt;code&gt;@Bean&lt;/code&gt; メソッドに &lt;code&gt;@QuartzDataSource&lt;/code&gt; アノテーションを付けます。そうすることで、Quartz固有のデータ &lt;code&gt;DataSource&lt;/code&gt; が &lt;code&gt;SchedulerFactoryBean&lt;/code&gt; とスキーマの初期化の両方で使用されるようになります。同様に、Quartzにアプリケーションのメイン &lt;code&gt;TransactionManager&lt;/code&gt; 以外の &lt;code&gt;TransactionManager&lt;/code&gt; を使用させるには、 &lt;code&gt;TransactionManager&lt;/code&gt; Beanを宣言し、 &lt;code&gt;@Bean&lt;/code&gt; メソッドに &lt;code&gt;@QuartzTransactionManager&lt;/code&gt; アノテーションを付けます。</target>
        </trans-unit>
        <trans-unit id="2466d3a00955f30c6095ec602ad41149196ee2fd" translate="yes" xml:space="preserve">
          <source>To help reduce the size of your Groovy code, several &lt;code&gt;import&lt;/code&gt; statements are automatically included. Notice how the preceding example refers to &lt;code&gt;@Component&lt;/code&gt;, &lt;code&gt;@RestController&lt;/code&gt;, and &lt;code&gt;@RequestMapping&lt;/code&gt; without needing to use fully-qualified names or &lt;code&gt;import&lt;/code&gt; statements.</source>
          <target state="translated">Groovyコードのサイズを小さくするために、いくつかの &lt;code&gt;import&lt;/code&gt; ステートメントが自動的に含まれています。前の例で、完全修飾名や &lt;code&gt;import&lt;/code&gt; ステートメントを使用せずに、 &lt;code&gt;@RestController&lt;/code&gt; &lt;code&gt;@Component&lt;/code&gt; 、@ RestController、および &lt;code&gt;@RequestMapping&lt;/code&gt; を参照していることに注目してください。</target>
        </trans-unit>
        <trans-unit id="3520e1f6de5c7ce8333cc201c629df799a54079a" translate="yes" xml:space="preserve">
          <source>To help with the customization, some other properties are transferred from the Spring &lt;code&gt;Environment&lt;/code&gt; to System properties, as described in the following table:</source>
          <target state="translated">次の表に示すように、カスタマイズを支援するために、他のいくつかのプロパティがSpring &lt;code&gt;Environment&lt;/code&gt; からSystemプロパティに転送されます。</target>
        </trans-unit>
        <trans-unit id="9fe6ab098da6ca83ea91ed90392c591b67bb0921" translate="yes" xml:space="preserve">
          <source>To help with this, Spring Boot allows you to define logging groups in your Spring &lt;code&gt;Environment&lt;/code&gt;. For example, here&amp;rsquo;s how you could define a &amp;ldquo;tomcat&amp;rdquo; group by adding it to your &lt;code&gt;application.properties&lt;/code&gt;:</source>
          <target state="translated">これを支援するために、SpringBootではSpring &lt;code&gt;Environment&lt;/code&gt; でロギンググループを定義できます。たとえば、 &lt;code&gt;application.properties&lt;/code&gt; に「tomcat」グループを追加して定義する方法は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="8360fce83b5ea34128eea992623ad5b1d4c67277" translate="yes" xml:space="preserve">
          <source>To help with this, Spring Boot lets you define profile groups. A profile group allows you to define a logical name for a related group of profiles.</source>
          <target state="translated">これを支援するために、Spring Bootではプロファイルグループを定義することができます。プロファイルグループは、関連するプロファイルグループの論理名を定義することができます。</target>
        </trans-unit>
        <trans-unit id="237d63ce58b8d11a894f4850f68dce91c3c91561" translate="yes" xml:space="preserve">
          <source>To import these properties, you can add the following to your &lt;code&gt;application.properties&lt;/code&gt; or &lt;code&gt;application.yaml&lt;/code&gt; file:</source>
          <target state="translated">これらのプロパティをインポートするには、 &lt;code&gt;application.properties&lt;/code&gt; または &lt;code&gt;application.yaml&lt;/code&gt; ファイルに以下を追加します。</target>
        </trans-unit>
        <trans-unit id="26a7634911f3cf897c40c030da805a6d108e7533" translate="yes" xml:space="preserve">
          <source>To improve the user experience and further assist the user in configuring a given property, you can provide additional metadata that:</source>
          <target state="translated">ユーザー・エクスペリエンスを向上させ、特定のプロパティを設定する際にユーザーをさらに支援するために、追加のメタデータを提供することができます。</target>
        </trans-unit>
        <trans-unit id="3729650a9408f2af75a5c5dc425de2461132524e" translate="yes" xml:space="preserve">
          <source>To learn about securing this file appropriately, see &lt;a href=&quot;#deployment-initd-service-securing&quot;&gt;the guidelines for securing an init.d service&lt;/a&gt;.</source>
          <target state="translated">このファイルを適切に保護する方法については&lt;a href=&quot;#deployment-initd-service-securing&quot;&gt;、init.dサービスを保護するためのガイドラインを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="8748d835a65d384a3a26059fab2194a2e3070c24" translate="yes" xml:space="preserve">
          <source>To learn about using Spring Boot with Gradle, please refer to the documentation for Spring Boot&amp;rsquo;s Gradle plugin:</source>
          <target state="translated">GradleでSpringBootを使用する方法については、SpringBootのGradleプラグインのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="e0d3a4720bb5fc6f7377033a50045f3a3bc1e830" translate="yes" xml:space="preserve">
          <source>To learn about using Spring Boot with Maven, please refer to the documentation for Spring Boot&amp;rsquo;s Maven plugin:</source>
          <target state="translated">MavenでのSpringBootの使用については、SpringBootのMavenプラグインのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="62c164149ee34de1ebc8ad3aacff1fdca3929d62" translate="yes" xml:space="preserve">
          <source>To learn how to swap technical facets, please see the how-to documentation for &lt;a href=&quot;howto#howto-use-another-web-server&quot;&gt;swapping web server&lt;/a&gt; and &lt;a href=&quot;howto#howto-configure-log4j-for-logging&quot;&gt;logging system&lt;/a&gt;.</source>
          <target state="translated">技術的な側面を交換する方法については、&lt;a href=&quot;howto#howto-use-another-web-server&quot;&gt;Webサーバー&lt;/a&gt;と&lt;a href=&quot;howto#howto-configure-log4j-for-logging&quot;&gt;ログシステム&lt;/a&gt;を交換するためのハウツードキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="85a85535e8614fa50f76ae34f8faddee7f356e92" translate="yes" xml:space="preserve">
          <source>To learn more about Micrometer&amp;rsquo;s capabilities, please refer to its &lt;a href=&quot;https://micrometer.io/docs&quot;&gt;reference documentation&lt;/a&gt;, in particular the &lt;a href=&quot;https://micrometer.io/docs/concepts&quot;&gt;concepts section&lt;/a&gt;.</source>
          <target state="translated">マイクロメータの機能の詳細については、その&lt;a href=&quot;https://micrometer.io/docs&quot;&gt;リファレンスドキュメント&lt;/a&gt;、特に&lt;a href=&quot;https://micrometer.io/docs/concepts&quot;&gt;概念のセクション&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="d41d5171097c70d76e93f80867fde76da78296c6" translate="yes" xml:space="preserve">
          <source>To learn more about the Actuator&amp;rsquo;s endpoints and their request and response formats, please refer to the separate API documentation (&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/actuator-api/htmlsingle&quot;&gt;HTML&lt;/a&gt; or &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/actuator-api/pdf/spring-boot-actuator-web-api.pdf&quot;&gt;PDF&lt;/a&gt;).</source>
          <target state="translated">アクチュエータのエンドポイントとその要求および応答形式の詳細については、別のAPIドキュメント（&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/actuator-api/htmlsingle&quot;&gt;HTML&lt;/a&gt;または&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/actuator-api/pdf/spring-boot-actuator-web-api.pdf&quot;&gt;PDF&lt;/a&gt;）を参照してください。</target>
        </trans-unit>
        <trans-unit id="88c4f9087256237e2ce246daedaefbc67da5648d" translate="yes" xml:space="preserve">
          <source>To make Spring Boot auto-configuration work with the aforementioned embedded Apache Kafka broker, you need to remap a system property for embedded broker addresses (populated by the &lt;code&gt;EmbeddedKafkaBroker&lt;/code&gt;) into the Spring Boot configuration property for Apache Kafka. There are several ways to do that:</source>
          <target state="translated">前述の組み込みApacheKafkaブローカーでSpringBoot自動構成を機能させるには、組み込みブローカーアドレス（ &lt;code&gt;EmbeddedKafkaBroker&lt;/code&gt; によって入力される）のシステムプロパティをApacheKafkaのSpringBoot構成プロパティに再マップする必要があります。これを行うにはいくつかの方法があります。</target>
        </trans-unit>
        <trans-unit id="5ab69b2aa70c0cbc65afe2adc66437434008054e" translate="yes" xml:space="preserve">
          <source>To make an application-wide, additive customization to all &lt;code&gt;WebClient.Builder&lt;/code&gt; instances, you can declare &lt;code&gt;WebClientCustomizer&lt;/code&gt; beans and change the &lt;code&gt;WebClient.Builder&lt;/code&gt; locally at the point of injection.</source>
          <target state="translated">すべての &lt;code&gt;WebClient.Builder&lt;/code&gt; インスタンスにアプリケーション全体の追加のカスタマイズを行うために、 &lt;code&gt;WebClientCustomizer&lt;/code&gt; Beanを宣言し、インジェクションの時点で &lt;code&gt;WebClient.Builder&lt;/code&gt; をローカルで変更できます。</target>
        </trans-unit>
        <trans-unit id="76aceeac9111253b5f13c64a9995fe619ca4dc9a" translate="yes" xml:space="preserve">
          <source>To make an application-wide, additive customization, use a &lt;code&gt;RestTemplateCustomizer&lt;/code&gt; bean. All such beans are automatically registered with the auto-configured &lt;code&gt;RestTemplateBuilder&lt;/code&gt; and are applied to any templates that are built with it.</source>
          <target state="translated">アプリケーション全体で追加のカスタマイズを行うには、 &lt;code&gt;RestTemplateCustomizer&lt;/code&gt; Beanを使用します。このようなBeanはすべて、自動構成された &lt;code&gt;RestTemplateBuilder&lt;/code&gt; に自動的に登録され、それを使用して構築されたすべてのテンプレートに適用されます。</target>
        </trans-unit>
        <trans-unit id="80037567978b39638059a76eddee883c77a1e2f5" translate="yes" xml:space="preserve">
          <source>To make it easier to create optimized Docker images that can be built with a dockerfile, Spring Boot supports adding a layer index file to the jar. It provides a list of layers and the parts of the jar that should be contained within them. The list of layers in the index is ordered based on the order in which the layers should be added to the Docker/OCI image. Out-of-the-box, the following layers are supported:</source>
          <target state="translated">dockerfileでビルドできる最適化されたDockerイメージを簡単に作成できるようにするために、Spring Bootはjarにレイヤーインデックスファイルを追加することをサポートしています。これは、レイヤーのリストと、その中に含まれるべきjarの部分を提供します。インデックス内のレイヤーのリストは、Docker/OCI イメージに追加すべきレイヤーの順番に基づいて順序付けられています。アウトオブボックスでは、以下のレイヤーがサポートされています。</target>
        </trans-unit>
        <trans-unit id="a57fba3621864a82aa6f83e3041fda612f4ac21c" translate="yes" xml:space="preserve">
          <source>To make the scope of any customizations as narrow as possible, inject the auto-configured &lt;code&gt;RestTemplateBuilder&lt;/code&gt; and then call its methods as required. Each method call returns a new &lt;code&gt;RestTemplateBuilder&lt;/code&gt; instance, so the customizations only affect this use of the builder.</source>
          <target state="translated">カスタマイズの範囲を可能な限り狭くするには、自動構成された &lt;code&gt;RestTemplateBuilder&lt;/code&gt; を挿入し、必要に応じてそのメソッドを呼び出します。各メソッド呼び出しは新しい &lt;code&gt;RestTemplateBuilder&lt;/code&gt; インスタンスを返すため、カスタマイズはビルダーのこの使用にのみ影響します。</target>
        </trans-unit>
        <trans-unit id="e7158012d6f2c7fca0210332dc2f45166de03c70" translate="yes" xml:space="preserve">
          <source>To make the scope of any customizations as narrow as possible, inject the auto-configured &lt;code&gt;WebClient.Builder&lt;/code&gt; and then call its methods as required. &lt;code&gt;WebClient.Builder&lt;/code&gt; instances are stateful: Any change on the builder is reflected in all clients subsequently created with it. If you want to create several clients with the same builder, you can also consider cloning the builder with &lt;code&gt;WebClient.Builder other = builder.clone();&lt;/code&gt;.</source>
          <target state="translated">カスタマイズの範囲を可能な限り狭くするには、自動構成された &lt;code&gt;WebClient.Builder&lt;/code&gt; を挿入し、必要に応じてそのメソッドを呼び出します。 &lt;code&gt;WebClient.Builder&lt;/code&gt; インスタンスはステートフルです。ビルダーでの変更は、それを使用して後で作成されるすべてのクライアントに反映されます。同じビルダーで複数のクライアントを作成する場合は、 &lt;code&gt;WebClient.Builder other = builder.clone();&lt;/code&gt; てビルダーのクローンを作成することも検討できます。。</target>
        </trans-unit>
        <trans-unit id="029ecd89f6154e11ce40056b384fbe103c4d7b9d" translate="yes" xml:space="preserve">
          <source>To map all &lt;code&gt;5xx&lt;/code&gt; errors by using a FreeMarker template, your directory structure would be as follows:</source>
          <target state="translated">FreeMarkerテンプレートを使用してすべての &lt;code&gt;5xx&lt;/code&gt; エラーをマップするには、ディレクトリ構造は次のようになります。</target>
        </trans-unit>
        <trans-unit id="e84dd54c980d3099217870e671ee2f1f0423019f" translate="yes" xml:space="preserve">
          <source>To map all &lt;code&gt;5xx&lt;/code&gt; errors by using a Mustache template, your directory structure would be as follows:</source>
          <target state="translated">Mustacheテンプレートを使用してすべての &lt;code&gt;5xx&lt;/code&gt; エラーをマップするには、ディレクトリ構造は次のようになります。</target>
        </trans-unit>
        <trans-unit id="a4327ac96e42803f1e5dedaae307636868a371bf" translate="yes" xml:space="preserve">
          <source>To mock Kotlin classes, &lt;a href=&quot;https://mockk.io/&quot;&gt;MockK&lt;/a&gt; is recommended. If you need the &lt;code&gt;Mockk&lt;/code&gt; equivalent of the Mockito specific &lt;a href=&quot;#boot-features-testing-spring-boot-applications-mocking-beans&quot;&gt;&lt;code&gt;@MockBean&lt;/code&gt; and &lt;code&gt;@SpyBean&lt;/code&gt; annotations&lt;/a&gt;, you can use &lt;a href=&quot;https://github.com/Ninja-Squad/springmockk&quot;&gt;SpringMockK&lt;/a&gt; which provides similar &lt;code&gt;@MockkBean&lt;/code&gt; and &lt;code&gt;@SpykBean&lt;/code&gt; annotations.</source>
          <target state="translated">Kotlinクラスをモックするには、&lt;a href=&quot;https://mockk.io/&quot;&gt;MockK&lt;/a&gt;をお勧めします。Mockito固有の&lt;a href=&quot;#boot-features-testing-spring-boot-applications-mocking-beans&quot;&gt; &lt;code&gt;@MockBean&lt;/code&gt; &lt;/a&gt;および &lt;code&gt;@SpyBean&lt;/code&gt; アノテーションと同等の &lt;code&gt;Mockk&lt;/code&gt; が必要な場合は、同様の &lt;code&gt;@MockkBean&lt;/code&gt; および &lt;code&gt;@SpykBean&lt;/code&gt; アノテーションを提供する&lt;a href=&quot;https://github.com/Ninja-Squad/springmockk&quot;&gt;SpringMockK&lt;/a&gt;を使用できます。</target>
        </trans-unit>
        <trans-unit id="8fc1c1d9470f442b43582befe2184e1ed328fa01" translate="yes" xml:space="preserve">
          <source>To override dependency versions in Gradle, see &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/gradle-plugin/reference/htmlsingle/#managing-dependencies-dependency-management-plugin-customizing&quot;&gt;this section&lt;/a&gt; of the Gradle plugin&amp;rsquo;s documentation.</source>
          <target state="translated">Gradleの依存関係バージョンをオーバーライドするには、Gradleプラグインのドキュメントの&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/gradle-plugin/reference/htmlsingle/#managing-dependencies-dependency-management-plugin-customizing&quot;&gt;このセクション&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="0dd9b65bfcf98708d0e5dc080df89810d255f579" translate="yes" xml:space="preserve">
          <source>To override dependency versions with Maven, see &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/maven-plugin/reference/htmlsingle/#using&quot;&gt;this section&lt;/a&gt; of the Maven plugin&amp;rsquo;s documentation.</source>
          <target state="translated">Mavenで依存関係バージョンをオーバーライドするには、Mavenプラグインのドキュメントの&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/maven-plugin/reference/htmlsingle/#using&quot;&gt;このセクション&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="7f221e7c27fc50fcce7371848a5df53c3e2dc70f" translate="yes" xml:space="preserve">
          <source>To pass command-line arguments to the application, use &lt;code&gt;--&lt;/code&gt; to separate the commands from the &amp;ldquo;spring&amp;rdquo; command arguments, as shown in the following example:</source>
          <target state="translated">次の例に示すように、コマンドライン引数をアプリケーションに渡すには、 &lt;code&gt;--&lt;/code&gt; を使用してコマンドを「spring」コマンド引数から分離します。</target>
        </trans-unit>
        <trans-unit id="cbd902a88d71a4d380c69d7ee7cd5da888d41e2c" translate="yes" xml:space="preserve">
          <source>To produce the two artifacts, one that can be used as a dependency and one that is executable, a classifier must be specified. This classifier is applied to the name of the executable archive, leaving the default archive for use as a dependency.</source>
          <target state="translated">2 つの成果物、1 つは依存関係として使えるもの、もう 1 つは実行可能なものを生成するには、分類子を指定する必要があります。この分類子は実行可能なアーカイブの名前に適用され、依存関係として使用するためのデフォルトのアーカイブを残します。</target>
        </trans-unit>
        <trans-unit id="439843261e583c6eda3a10871bff83cfdd56e05e" translate="yes" xml:space="preserve">
          <source>To provide a concrete example, suppose you develop a &lt;code&gt;@Component&lt;/code&gt; that uses a &lt;code&gt;name&lt;/code&gt; property, as shown in the following example:</source>
          <target state="translated">具体的な例を提供するために、次の例に示すように、 &lt;code&gt;name&lt;/code&gt; プロパティを使用する &lt;code&gt;@Component&lt;/code&gt; を開発するとします。</target>
        </trans-unit>
        <trans-unit id="9bf7bb1426dc08a85e682338f957a2b2c0b73d4e" translate="yes" xml:space="preserve">
          <source>To provide custom application information, you can register Spring beans that implement the &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/info/InfoContributor.java&quot;&gt;&lt;code&gt;InfoContributor&lt;/code&gt;&lt;/a&gt; interface.</source>
          <target state="translated">カスタムアプリケーション情報を提供するために、&lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/info/InfoContributor.java&quot;&gt; &lt;code&gt;InfoContributor&lt;/code&gt; &lt;/a&gt;インターフェースを実装するSpringBeanを登録できます。</target>
        </trans-unit>
        <trans-unit id="9ade205b6988436803e0dbd79bcc471b61e3f95f" translate="yes" xml:space="preserve">
          <source>To provide custom health information from a reactive API, you can register Spring beans that implement the &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/ReactiveHealthIndicator.java&quot;&gt;&lt;code&gt;ReactiveHealthIndicator&lt;/code&gt;&lt;/a&gt; interface. The following code shows a sample &lt;code&gt;ReactiveHealthIndicator&lt;/code&gt; implementation:</source>
          <target state="translated">リアクティブAPIからカスタムヘルス情報を提供するために、&lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/ReactiveHealthIndicator.java&quot;&gt; &lt;code&gt;ReactiveHealthIndicator&lt;/code&gt; &lt;/a&gt;インターフェースを実装するSpringBeanを登録できます。次のコードは、 &lt;code&gt;ReactiveHealthIndicator&lt;/code&gt; の実装例を示しています。</target>
        </trans-unit>
        <trans-unit id="30b3fde07b75289246e2b2c5747bf45739bfe86b" translate="yes" xml:space="preserve">
          <source>To provide custom health information, you can register Spring beans that implement the &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/HealthIndicator.java&quot;&gt;&lt;code&gt;HealthIndicator&lt;/code&gt;&lt;/a&gt; interface. You need to provide an implementation of the &lt;code&gt;health()&lt;/code&gt; method and return a &lt;code&gt;Health&lt;/code&gt; response. The &lt;code&gt;Health&lt;/code&gt; response should include a status and can optionally include additional details to be displayed. The following code shows a sample &lt;code&gt;HealthIndicator&lt;/code&gt; implementation:</source>
          <target state="translated">カスタムヘルス情報を提供するために、&lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/HealthIndicator.java&quot;&gt; &lt;code&gt;HealthIndicator&lt;/code&gt; &lt;/a&gt;インターフェースを実装するSpringBeanを登録できます。 &lt;code&gt;health()&lt;/code&gt; メソッドの実装を提供し、 &lt;code&gt;Health&lt;/code&gt; 応答を返す必要があります。 &lt;code&gt;Health&lt;/code&gt; 応答は、ステータスを含める必要がありますし、必要に応じて表示されるように、追加の詳細を含めることができます。次のコードは、 &lt;code&gt;HealthIndicator&lt;/code&gt; の実装例を示しています。</target>
        </trans-unit>
        <trans-unit id="788eec8862017c7000f958af3b6b21359c3c2fb7" translate="yes" xml:space="preserve">
          <source>To reduce the chances of the application&amp;rsquo;s user account being compromised, you should consider preventing it from using a login shell. For example, you can set the account&amp;rsquo;s shell to &lt;code&gt;/usr/sbin/nologin&lt;/code&gt;.</source>
          <target state="translated">アプリケーションのユーザーアカウントが危険にさらされる可能性を減らすために、ログインシェルを使用しないようにすることを検討する必要があります。たとえば、アカウントのシェルを &lt;code&gt;/usr/sbin/nologin&lt;/code&gt; に設定できます。</target>
        </trans-unit>
        <trans-unit id="411b41f85a6cb367f6e6d7898e33f29f9f05f811" translate="yes" xml:space="preserve">
          <source>To register custom metrics, inject &lt;code&gt;MeterRegistry&lt;/code&gt; into your component, as shown in the following example:</source>
          <target state="translated">カスタムメトリックを登録するには、次の例に示すように、 &lt;code&gt;MeterRegistry&lt;/code&gt; をコンポーネントに挿入します。</target>
        </trans-unit>
        <trans-unit id="c107934f7b84e2c48f5d8f94b338ce6ed36a8907" translate="yes" xml:space="preserve">
          <source>To repackage an existing archive so that it becomes a self-contained executable archive, use &lt;code&gt;org.springframework.boot.loader.tools.Repackager&lt;/code&gt;. The &lt;code&gt;Repackager&lt;/code&gt; class takes a single constructor argument that refers to an existing jar or war archive. Use one of the two available &lt;code&gt;repackage()&lt;/code&gt; methods to either replace the original file or write to a new destination. Various settings can also be configured on the repackager before it is run.</source>
          <target state="translated">自己完結型の実行可能アーカイブになるように既存のアーカイブを再パッケージ化するには、 &lt;code&gt;org.springframework.boot.loader.tools.Repackager&lt;/code&gt; を使用します。 &lt;code&gt;Repackager&lt;/code&gt; クラスは、既存のJARまたはWARアーカイブを参照する単一のコンストラクタの引数を取ります。使用可能な2つの &lt;code&gt;repackage()&lt;/code&gt; メソッドのいずれかを使用して、元のファイルを置き換えるか、新しい宛先に書き込みます。リパッケージャーを実行する前に、さまざまな設定を構成することもできます。</target>
        </trans-unit>
        <trans-unit id="5e66cbd7ab49df10cefc3849a590e72c11bdb63b" translate="yes" xml:space="preserve">
          <source>To retry operations, you can enable retries on the &lt;code&gt;AmqpTemplate&lt;/code&gt; (for example, in the event that the broker connection is lost):</source>
          <target state="translated">操作を再試行するには、 &lt;code&gt;AmqpTemplate&lt;/code&gt; で再試行を有効にします（たとえば、ブローカー接続が失われた場合）。</target>
        </trans-unit>
        <trans-unit id="821e262dc78f3b7366c7656c2ddc1e8dee511059" translate="yes" xml:space="preserve">
          <source>To run an app with that &lt;code&gt;DataSource&lt;/code&gt;, all you need is the connection information. Pool-specific settings can also be provided. Check the implementation that is going to be used at runtime for more details.</source>
          <target state="translated">そのデータ &lt;code&gt;DataSource&lt;/code&gt; 使用してアプリを実行するために必要なのは、接続情報だけです。プール固有の設定も提供できます。詳細については、実行時に使用される実装を確認してください。</target>
        </trans-unit>
        <trans-unit id="2ff814d335c9fede0bb451434c641322abd8cae0" translate="yes" xml:space="preserve">
          <source>To run in App Engine, you can create a project in the UI first, which sets up a unique identifier for you and also sets up HTTP routes. Add a Java app to the project and leave it empty and then use the &lt;a href=&quot;https://cloud.google.com/sdk/install&quot;&gt;Google Cloud SDK&lt;/a&gt; to push your Spring Boot app into that slot from the command line or CI build.</source>
          <target state="translated">App Engineで実行するには、最初にUIでプロジェクトを作成します。これにより、一意の識別子が設定され、HTTPルートも設定されます。プロジェクトにJavaアプリを追加し、空のままにしてから、&lt;a href=&quot;https://cloud.google.com/sdk/install&quot;&gt;Google Cloud SDK&lt;/a&gt;を使用して、コマンドラインまたはCIビルドからSpringBootアプリをそのスロットにプッシュします。</target>
        </trans-unit>
        <trans-unit id="c1af965b44b6b84c2c01b93560b32dc4d77db635" translate="yes" xml:space="preserve">
          <source>To run that application, use the &lt;code&gt;java -jar&lt;/code&gt; command, as follows:</source>
          <target state="translated">そのアプリケーションを実行するには、次のように &lt;code&gt;java -jar&lt;/code&gt; コマンドを使用します。</target>
        </trans-unit>
        <trans-unit id="89845f6c2d6e6ac23e0fd130b8dc292ce99a719e" translate="yes" xml:space="preserve">
          <source>To scan for a free port (using OS natives to prevent clashes) use &lt;code&gt;server.port=0&lt;/code&gt;.</source>
          <target state="translated">空きポートをスキャンするには（OSネイティブを使用して衝突を防ぐ）、 &lt;code&gt;server.port=0&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="4bae108eca923fd7e7ba2297dff0895501f37c6d" translate="yes" xml:space="preserve">
          <source>To see the order of every &lt;code&gt;Filter&lt;/code&gt; in your application, enable debug level logging for the &lt;code&gt;web&lt;/code&gt;&lt;a href=&quot;#boot-features-custom-log-groups&quot;&gt;logging group&lt;/a&gt; (&lt;code&gt;logging.level.web=debug&lt;/code&gt;). Details of the registered filters, including their order and URL patterns, will then be logged at startup.</source>
          <target state="translated">アプリケーション内のすべての &lt;code&gt;Filter&lt;/code&gt; の順序を確認するには、 &lt;code&gt;web&lt;/code&gt; &lt;a href=&quot;#boot-features-custom-log-groups&quot;&gt;ロググループの&lt;/a&gt;デバッグレベルのログを有効にします（ &lt;code&gt;logging.level.web=debug&lt;/code&gt; ）。登録されたフィルターの詳細（順序やURLパターンなど）は、起動時にログに記録されます。</target>
        </trans-unit>
        <trans-unit id="15753153d9d9762f9f3a9d6ac74593c5bd3687ee" translate="yes" xml:space="preserve">
          <source>To set JVM command line arguments, you can use the &lt;code&gt;JAVA_OPTS&lt;/code&gt; environment variable, as shown in the following example:</source>
          <target state="translated">次の例に示すように、JVMコマンドライン引数を設定するには、 &lt;code&gt;JAVA_OPTS&lt;/code&gt; 環境変数を使用できます。</target>
        </trans-unit>
        <trans-unit id="0b26972cc056abfe77d369936ae35a8c9a249073" translate="yes" xml:space="preserve">
          <source>To solve this problem, many developers use &amp;ldquo;shaded&amp;rdquo; jars. A shaded jar packages all classes, from all jars, into a single &amp;ldquo;uber jar&amp;rdquo;. The problem with shaded jars is that it becomes hard to see which libraries are actually in your application. It can also be problematic if the same filename is used (but with different content) in multiple jars. Spring Boot takes a different approach and lets you actually nest jars directly.</source>
          <target state="translated">この問題を解決するために、多くの開発者は「シェーディングされた」jarを使用します。影付きのjarは、すべてのjarからすべてのクラスを単一の「uberjar」にパッケージ化します。シェーディングされたjarの問題は、アプリケーションに実際にどのライブラリが含まれているかを確認するのが難しくなることです。複数のjarで同じファイル名が使用されている（ただし内容が異なる）場合にも問題が発生する可能性があります。Spring Bootは別のアプローチを取り、実際にjarを直接ネストできるようにします。</target>
        </trans-unit>
        <trans-unit id="418b91bb761b61e6505e236bb63a7c9604bf373b" translate="yes" xml:space="preserve">
          <source>To solve this problem, many developers use &amp;ldquo;uber&amp;rdquo; jars. An uber jar packages all the classes from all the application&amp;rsquo;s dependencies into a single archive. The problem with this approach is that it becomes hard to see which libraries are in your application. It can also be problematic if the same filename is used (but with different content) in multiple jars.</source>
          <target state="translated">この問題を解決するために、多くの開発者は「uber」jarを使用しています。uber jarは、すべてのアプリケーションの依存関係からのすべてのクラスを単一のアーカイブにパッケージ化します。このアプローチの問題は、アプリケーションにどのライブラリが含まれているかを確認するのが難しくなることです。複数のjarで同じファイル名が使用されている（ただし内容が異なる）場合にも問題が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="4c026d69017fcdfaeb8895d71dce8c25d2e33724" translate="yes" xml:space="preserve">
          <source>To specify a buffer size of 10 megabytes, &lt;code&gt;10&lt;/code&gt; and &lt;code&gt;10MB&lt;/code&gt; are equivalent. A size threshold of 256 bytes can be specified as &lt;code&gt;256&lt;/code&gt; or &lt;code&gt;256B&lt;/code&gt;.</source>
          <target state="translated">10メガバイトのバッファサイズを指定するには、 &lt;code&gt;10&lt;/code&gt; と &lt;code&gt;10MB&lt;/code&gt; 等価です。256バイトのサイズしきい値は、 &lt;code&gt;256&lt;/code&gt; または &lt;code&gt;256B&lt;/code&gt; として指定できます。</target>
        </trans-unit>
        <trans-unit id="a5201abf1ce36b1dab4c7364cdf6899960534a75" translate="yes" xml:space="preserve">
          <source>To specify a session timeout of 30 seconds, &lt;code&gt;30&lt;/code&gt;, &lt;code&gt;PT30S&lt;/code&gt; and &lt;code&gt;30s&lt;/code&gt; are all equivalent. A read timeout of 500ms can be specified in any of the following form: &lt;code&gt;500&lt;/code&gt;, &lt;code&gt;PT0.5S&lt;/code&gt; and &lt;code&gt;500ms&lt;/code&gt;.</source>
          <target state="translated">30秒のセッションタイムアウトを指定するには、 &lt;code&gt;30&lt;/code&gt; 、 &lt;code&gt;PT30S&lt;/code&gt; 、および &lt;code&gt;30s&lt;/code&gt; はすべて同等です。500msの読み取りタイムアウトは、 &lt;code&gt;500&lt;/code&gt; 、 &lt;code&gt;PT0.5S&lt;/code&gt; 、および &lt;code&gt;500ms&lt;/code&gt; のいずれかの形式で指定できます。</target>
        </trans-unit>
        <trans-unit id="9c094808e125d827f6a6211165315c6e3d12a5a5" translate="yes" xml:space="preserve">
          <source>To switch off the HTTP endpoints completely but still create a &lt;code&gt;WebApplicationContext&lt;/code&gt;, use &lt;code&gt;server.port=-1&lt;/code&gt; (doing so is sometimes useful for testing).</source>
          <target state="translated">HTTPエンドポイントを完全にオフにし、それでも &lt;code&gt;WebApplicationContext&lt;/code&gt; を作成するには、 &lt;code&gt;server.port=-1&lt;/code&gt; を使用します（これを行うと、テストに役立つ場合があります）。</target>
        </trans-unit>
        <trans-unit id="c10e8cea726971c7fc103bb4e7da5dd0cd7536fd" translate="yes" xml:space="preserve">
          <source>To take control over this behaviour, define your &lt;code&gt;GraphiteMeterRegistry&lt;/code&gt; and supply your own &lt;code&gt;HierarchicalNameMapper&lt;/code&gt;. An auto-configured &lt;code&gt;GraphiteConfig&lt;/code&gt; and &lt;code&gt;Clock&lt;/code&gt; beans are provided unless you define your own:</source>
          <target state="translated">この動作を制御するには、 &lt;code&gt;GraphiteMeterRegistry&lt;/code&gt; を定義し、独自の &lt;code&gt;HierarchicalNameMapper&lt;/code&gt; を指定します。独自に定義しない限り、自動構成された &lt;code&gt;GraphiteConfig&lt;/code&gt; および &lt;code&gt;Clock&lt;/code&gt; Beanが提供されます。</target>
        </trans-unit>
        <trans-unit id="978c77b844eeccf093a90060c972f0a386b7a661" translate="yes" xml:space="preserve">
          <source>To take control over this behaviour, define your &lt;code&gt;JmxMeterRegistry&lt;/code&gt; and supply your own &lt;code&gt;HierarchicalNameMapper&lt;/code&gt;. An auto-configured &lt;code&gt;JmxConfig&lt;/code&gt; and &lt;code&gt;Clock&lt;/code&gt; beans are provided unless you define your own:</source>
          <target state="translated">この動作を制御するには、 &lt;code&gt;JmxMeterRegistry&lt;/code&gt; を定義し、独自の &lt;code&gt;HierarchicalNameMapper&lt;/code&gt; を指定します。自動設定 &lt;code&gt;JmxConfig&lt;/code&gt; と &lt;code&gt;Clock&lt;/code&gt; あなたが独自に定義しない限り、豆が提供されています。</target>
        </trans-unit>
        <trans-unit id="05fcfc031547d4f81c6c470218df3ed4c55abb88" translate="yes" xml:space="preserve">
          <source>To take full control of the configuration of the &lt;code&gt;EntityManagerFactory&lt;/code&gt;, you need to add a &lt;code&gt;@Bean&lt;/code&gt; named &amp;lsquo;entityManagerFactory&amp;rsquo;. Spring Boot auto-configuration switches off its entity manager in the presence of a bean of that type.</source>
          <target state="translated">&lt;code&gt;EntityManagerFactory&lt;/code&gt; の構成を完全に制御するには、「entityManagerFactory」という名前の &lt;code&gt;@Bean&lt;/code&gt; を追加する必要があります。 Spring Bootの自動構成は、そのタイプのBeanが存在する場合、エンティティマネージャーをオフにします。</target>
        </trans-unit>
        <trans-unit id="3d80d062ce7f4c98164e76b98598466a4680caa5" translate="yes" xml:space="preserve">
          <source>To test that &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/web-reactive.html&quot;&gt;Spring WebFlux&lt;/a&gt; controllers are working as expected, you can use the &lt;code&gt;@WebFluxTest&lt;/code&gt; annotation. &lt;code&gt;@WebFluxTest&lt;/code&gt; auto-configures the Spring WebFlux infrastructure and limits scanned beans to &lt;code&gt;@Controller&lt;/code&gt;, &lt;code&gt;@ControllerAdvice&lt;/code&gt;, &lt;code&gt;@JsonComponent&lt;/code&gt;, &lt;code&gt;Converter&lt;/code&gt;, &lt;code&gt;GenericConverter&lt;/code&gt;, &lt;code&gt;WebFilter&lt;/code&gt;, and &lt;code&gt;WebFluxConfigurer&lt;/code&gt;. Regular &lt;code&gt;@Component&lt;/code&gt; and &lt;code&gt;@ConfigurationProperties&lt;/code&gt; beans are not scanned when the &lt;code&gt;@WebFluxTest&lt;/code&gt; annotation is used. &lt;code&gt;@EnableConfigurationProperties&lt;/code&gt; can be used to include &lt;code&gt;@ConfigurationProperties&lt;/code&gt; beans.</source>
          <target state="translated">&lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/web-reactive.html&quot;&gt;Spring WebFlux&lt;/a&gt;コントローラーが期待どおりに機能していることをテストするには、 &lt;code&gt;@WebFluxTest&lt;/code&gt; アノテーションを使用できます。 &lt;code&gt;@WebFluxTest&lt;/code&gt; は、Spring WebFluxインフラストラクチャを自動構成し、スキャンされたBeanを &lt;code&gt;@Controller&lt;/code&gt; 、 &lt;code&gt;@ControllerAdvice&lt;/code&gt; 、 &lt;code&gt;@JsonComponent&lt;/code&gt; 、 &lt;code&gt;Converter&lt;/code&gt; 、 &lt;code&gt;GenericConverter&lt;/code&gt; 、 &lt;code&gt;WebFilter&lt;/code&gt; 、および &lt;code&gt;WebFluxConfigurer&lt;/code&gt; に制限します。 &lt;code&gt;@WebFluxTest&lt;/code&gt; アノテーションが使用されている場合、通常の &lt;code&gt;@Component&lt;/code&gt; および &lt;code&gt;@ConfigurationProperties&lt;/code&gt; Beanはスキャンされません。 &lt;code&gt;@EnableConfigurationProperties&lt;/code&gt; を使用して含めることができます &lt;code&gt;@ConfigurationProperties&lt;/code&gt; Bean。</target>
        </trans-unit>
        <trans-unit id="e4f6849362ffdceb4140cb0eae229bb6b91f0748" translate="yes" xml:space="preserve">
          <source>To test that object JSON serialization and deserialization is working as expected, you can use the &lt;code&gt;@JsonTest&lt;/code&gt; annotation. &lt;code&gt;@JsonTest&lt;/code&gt; auto-configures the available supported JSON mapper, which can be one of the following libraries:</source>
          <target state="translated">オブジェクトのJSONシリアル化と逆シリアル化が期待どおりに機能していることをテストするには、 &lt;code&gt;@JsonTest&lt;/code&gt; アノテーションを使用できます。 &lt;code&gt;@JsonTest&lt;/code&gt; は、サポートされている利用可能なJSONマッパーを自動構成します。これは次のライブラリのいずれかになります。</target>
        </trans-unit>
        <trans-unit id="72273788175486d9b72fd1cdb35fce7fbc896918" translate="yes" xml:space="preserve">
          <source>To test whether Spring MVC controllers are working as expected, use the &lt;code&gt;@WebMvcTest&lt;/code&gt; annotation. &lt;code&gt;@WebMvcTest&lt;/code&gt; auto-configures the Spring MVC infrastructure and limits scanned beans to &lt;code&gt;@Controller&lt;/code&gt;, &lt;code&gt;@ControllerAdvice&lt;/code&gt;, &lt;code&gt;@JsonComponent&lt;/code&gt;, &lt;code&gt;Converter&lt;/code&gt;, &lt;code&gt;GenericConverter&lt;/code&gt;, &lt;code&gt;Filter&lt;/code&gt;, &lt;code&gt;HandlerInterceptor&lt;/code&gt;, &lt;code&gt;WebMvcConfigurer&lt;/code&gt;, and &lt;code&gt;HandlerMethodArgumentResolver&lt;/code&gt;. Regular &lt;code&gt;@Component&lt;/code&gt; and &lt;code&gt;@ConfigurationProperties&lt;/code&gt; beans are not scanned when the &lt;code&gt;@WebMvcTest&lt;/code&gt; annotation is used. &lt;code&gt;@EnableConfigurationProperties&lt;/code&gt; can be used to include &lt;code&gt;@ConfigurationProperties&lt;/code&gt; beans.</source>
          <target state="translated">Spring MVCコントローラーが期待どおりに機能しているかどうかをテストするには、 &lt;code&gt;@WebMvcTest&lt;/code&gt; アノテーションを使用します。 &lt;code&gt;@WebMvcTest&lt;/code&gt; は、Spring MVCインフラストラクチャを自動構成し、スキャンされたBeanを &lt;code&gt;@Controller&lt;/code&gt; 、 &lt;code&gt;@ControllerAdvice&lt;/code&gt; 、 &lt;code&gt;@JsonComponent&lt;/code&gt; 、 &lt;code&gt;Converter&lt;/code&gt; 、 &lt;code&gt;GenericConverter&lt;/code&gt; 、 &lt;code&gt;Filter&lt;/code&gt; 、 &lt;code&gt;HandlerInterceptor&lt;/code&gt; 、 &lt;code&gt;WebMvcConfigurer&lt;/code&gt; 、および &lt;code&gt;HandlerMethodArgumentResolver&lt;/code&gt; に制限します。 &lt;code&gt;@WebMvcTest&lt;/code&gt; アノテーションが使用されている場合、通常の &lt;code&gt;@Component&lt;/code&gt; および &lt;code&gt;@ConfigurationProperties&lt;/code&gt; Beanはスキャンされません。 &lt;code&gt;@EnableConfigurationProperties&lt;/code&gt; を使用して、 &lt;code&gt;@ConfigurationProperties&lt;/code&gt; を含めることができます。</target>
        </trans-unit>
        <trans-unit id="fcc0cdfd12fb7a3ce74ba76659a8c2a1b2b76694" translate="yes" xml:space="preserve">
          <source>To trigger LiveReload when a file changes, &lt;a href=&quot;#using-boot-devtools-restart&quot;&gt;Automatic Restart&lt;/a&gt; must be enabled.</source>
          <target state="translated">ファイルが変更されたときにLiveReloadをトリガーするには、&lt;a href=&quot;#using-boot-devtools-restart&quot;&gt;自動再起動を&lt;/a&gt;有効にする必要があります。</target>
        </trans-unit>
        <trans-unit id="2d869ae41ce8a4456c08f4cfa1c89c786c6c4bb3" translate="yes" xml:space="preserve">
          <source>To uninstall a dependency, use the &lt;code&gt;uninstall&lt;/code&gt; command. As with the &lt;code&gt;install&lt;/code&gt; command, it takes one or more sets of artifact coordinates in the format of &lt;code&gt;group:artifact:version&lt;/code&gt;, as shown in the following example:</source>
          <target state="translated">依存関係をアンインストールするには、 &lt;code&gt;uninstall&lt;/code&gt; コマンドを使用します。 &lt;code&gt;install&lt;/code&gt; コマンドと同様に、次の例に示すように、 &lt;code&gt;group:artifact:version&lt;/code&gt; の形式で1つ以上のアーティファクト座標のセットを取ります。</target>
        </trans-unit>
        <trans-unit id="e179623a791a8c49821f833950393cffe93aa0f8" translate="yes" xml:space="preserve">
          <source>To uninstall all additional dependencies, you can use the &lt;code&gt;--all&lt;/code&gt; option, as shown in the following example:</source>
          <target state="translated">次の例に示すように、追加の依存関係をすべてアンインストールするには、 &lt;code&gt;--all&lt;/code&gt; オプションを使用できます。</target>
        </trans-unit>
        <trans-unit id="79d237463c317d24048bb1f8d1e43fa839d780d6" translate="yes" xml:space="preserve">
          <source>To upgrade an existing CLI installation, use the appropriate package manager command (for example, &lt;code&gt;brew upgrade&lt;/code&gt;). If you manually installed the CLI, follow the &lt;a href=&quot;#getting-started-manual-cli-installation&quot;&gt;standard instructions&lt;/a&gt;, remembering to update your &lt;code&gt;PATH&lt;/code&gt; environment variable to remove any older references.</source>
          <target state="translated">既存のCLIインストールをアップグレードするには、適切なパッケージマネージャーコマンドを使用します（たとえば、 &lt;code&gt;brew upgrade&lt;/code&gt; ）。 CLIを手動でインストールした場合は、&lt;a href=&quot;#getting-started-manual-cli-installation&quot;&gt;標準の手順&lt;/a&gt;に従ってください &lt;code&gt;PATH&lt;/code&gt; 環境変数を更新して、古い参照を削除することを忘れないでください。</target>
        </trans-unit>
        <trans-unit id="97041c38811806b87bf6626a1205ff3fb37709e0" translate="yes" xml:space="preserve">
          <source>To use Jersey alongside another web framework, such as Spring MVC, it should be configured so that it will allow the other framework to handle requests that it cannot handle. First, configure Jersey to use a Filter rather than a Servlet by configuring the &lt;code&gt;spring.jersey.type&lt;/code&gt; application property with a value of &lt;code&gt;filter&lt;/code&gt;. Second, configure your &lt;code&gt;ResourceConfig&lt;/code&gt; to forward requests that would have resulted in a 404, as shown in the following example.</source>
          <target state="translated">Spring MVCなどの別のWebフレームワークと一緒にJerseyを使用するには、他のフレームワークが処理できない要求を処理できるように構成する必要があります。まず、 &lt;code&gt;spring.jersey.type&lt;/code&gt; アプリケーションプロパティに &lt;code&gt;filter&lt;/code&gt; の値を設定して、サーブレットではなくフィルタを使用するようにJerseyを設定します。次に、次の例に示すように、404になるリクエストを転送するように &lt;code&gt;ResourceConfig&lt;/code&gt; を構成します。</target>
        </trans-unit>
        <trans-unit id="b7b2444f17d5c879c8aed9df81339daacbfea961" translate="yes" xml:space="preserve">
          <source>To use a trigger file, set the &lt;code&gt;spring.devtools.restart.trigger-file&lt;/code&gt; property to the name (excluding any path) of your trigger file. The trigger file must appear somewhere on your classpath.</source>
          <target state="translated">トリガーファイルを使用するには、 &lt;code&gt;spring.devtools.restart.trigger-file&lt;/code&gt; プロパティをトリガーファイルの名前（パスを除く）に設定します。トリガーファイルは、クラスパスのどこかに表示される必要があります。</target>
        </trans-unit>
        <trans-unit id="345d566bf6577b60f3da0778ccd404ae101f0b72" translate="yes" xml:space="preserve">
          <source>To use cache busting, the following configuration configures a cache busting solution for all static resources, effectively adding a content hash, such as &lt;code&gt;&amp;lt;link href=&quot;/css/spring-2a2d595e6ed9a0b24f027f2b63b134d6.css&quot;/&amp;gt;&lt;/code&gt;, in URLs:</source>
          <target state="translated">キャッシュバスティングを使用するには、次の構成ですべての静的リソースのキャッシュバスティングソリューションを構成し、URLに &lt;code&gt;&amp;lt;link href=&quot;/css/spring-2a2d595e6ed9a0b24f027f2b63b134d6.css&quot;/&amp;gt;&lt;/code&gt; などのコンテンツハッシュを効果的に追加します。</target>
        </trans-unit>
        <trans-unit id="ba6b36cd4f00846ae8eece4fc8d354f0678413c6" translate="yes" xml:space="preserve">
          <source>To use configuration property scanning, add the &lt;code&gt;@ConfigurationPropertiesScan&lt;/code&gt; annotation to your application. Typically, it is added to the main application class that is annotated with &lt;code&gt;@SpringBootApplication&lt;/code&gt; but it can be added to any &lt;code&gt;@Configuration&lt;/code&gt; class. By default, scanning will occur from the package of the class that declares the annotation. If you want to define specific packages to scan, you can do so as shown in the following example:</source>
          <target state="translated">構成プロパティのスキャンを使用するには、 &lt;code&gt;@ConfigurationPropertiesScan&lt;/code&gt; アノテーションをアプリケーションに追加します。通常、 &lt;code&gt;@SpringBootApplication&lt;/code&gt; アノテーションが付けられたメインアプリケーションクラスに追加されますが、任意の &lt;code&gt;@Configuration&lt;/code&gt; クラスに追加できます。デフォルトでは、スキャンはアノテーションを宣言するクラスのパッケージから行われます。スキャンする特定のパッケージを定義する場合は、次の例に示すように定義できます。</target>
        </trans-unit>
        <trans-unit id="b4df377ab19485c8e94bcb9c3fd11297b10aeeb3" translate="yes" xml:space="preserve">
          <source>To use constructor binding the class must be enabled using &lt;code&gt;@EnableConfigurationProperties&lt;/code&gt; or configuration property scanning. You cannot use constructor binding with beans that are created by the regular Spring mechanisms (e.g. &lt;code&gt;@Component&lt;/code&gt; beans, beans created via &lt;code&gt;@Bean&lt;/code&gt; methods or beans loaded using &lt;code&gt;@Import&lt;/code&gt;)</source>
          <target state="translated">コンストラクターバインディングを使用するには、 &lt;code&gt;@EnableConfigurationProperties&lt;/code&gt; または構成プロパティスキャンを使用してクラスを有効にする必要があります。あなたは定期的な春のメカニズムによって作成された豆と結合するコンストラクタを使用することはできません（例えば &lt;code&gt;@Component&lt;/code&gt; 豆、豆を使用して作成 &lt;code&gt;@Bean&lt;/code&gt; 方法や豆を使用してロードされた &lt;code&gt;@Import&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="4a4571f1714e8a1753db34e3cb3c68d5d0ec4195" translate="yes" xml:space="preserve">
          <source>To use the factory bean, wire &lt;code&gt;StreamsBuilder&lt;/code&gt; into your &lt;code&gt;@Bean&lt;/code&gt; as shown in the following example:</source>
          <target state="translated">ファクトリBeanを使用するには、次の例に示すように、 &lt;code&gt;@Bean&lt;/code&gt; を &lt;code&gt;StreamsBuilder&lt;/code&gt; します。</target>
        </trans-unit>
        <trans-unit id="5ebaeec9bf614df4be39d99298f4b39f9c743da4" translate="yes" xml:space="preserve">
          <source>To use the processor, include a dependency on &lt;code&gt;spring-boot-configuration-processor&lt;/code&gt;.</source>
          <target state="translated">プロセッサを使用するには、 &lt;code&gt;spring-boot-configuration-processor&lt;/code&gt; への依存関係を含めます。</target>
        </trans-unit>
        <trans-unit id="f573223c600422d4eddb9891fac45218d46f643e" translate="yes" xml:space="preserve">
          <source>To use version agnostic URLs for Webjars, add the &lt;code&gt;webjars-locator-core&lt;/code&gt; dependency. Then declare your Webjar. Using jQuery as an example, adding &lt;code&gt;&quot;/webjars/jquery/jquery.min.js&quot;&lt;/code&gt; results in &lt;code&gt;&quot;/webjars/jquery/x.y.z/jquery.min.js&quot;&lt;/code&gt; where &lt;code&gt;x.y.z&lt;/code&gt; is the Webjar version.</source>
          <target state="translated">Webjarのバージョンに依存しないURLを使用するには、 &lt;code&gt;webjars-locator-core&lt;/code&gt; 依存関係を追加します。次に、Webjarを宣言します。例としてjQueryを使用すると、 &lt;code&gt;&quot;/webjars/jquery/jquery.min.js&quot;&lt;/code&gt; を追加すると、 &lt;code&gt;&quot;/webjars/jquery/x.y.z/jquery.min.js&quot;&lt;/code&gt; &lt;code&gt;x.y.z&lt;/code&gt; / jquery.min.js」になります。ここで、xyzはWebjarのバージョンです。</target>
        </trans-unit>
        <trans-unit id="0bbcfcd889b86b993317c5f361655ec5e2c24f36" translate="yes" xml:space="preserve">
          <source>To work with &lt;code&gt;@ConfigurationProperties&lt;/code&gt; beans, you can inject them in the same way as any other bean, as shown in the following example:</source>
          <target state="translated">&lt;code&gt;@ConfigurationProperties&lt;/code&gt; Beanを操作するには、次の例に示すように、他のBeanと同じ方法でBeanを注入できます。</target>
        </trans-unit>
        <trans-unit id="4a0d7d7d8e6343434f03db48b10e32574249c0fd" translate="yes" xml:space="preserve">
          <source>Tomcat</source>
          <target state="translated">Tomcat</target>
        </trans-unit>
        <trans-unit id="91e8b91d5c574bd17e0311fd1c54df5015f9c38d" translate="yes" xml:space="preserve">
          <source>Tomcat 9.0</source>
          <target state="translated">トムキャット9.</target>
        </trans-unit>
        <trans-unit id="0e3a2df5d8db2fcf82a6a73727f283d41a7e6ca3" translate="yes" xml:space="preserve">
          <source>Tomcat base directory. If not specified, a temporary directory is used.</source>
          <target state="translated">Tomcatのベースディレクトリ。指定しない場合はテンポラリディレクトリが使用されます。</target>
        </trans-unit>
        <trans-unit id="dd0cdd681674f386aee7a82465011651ef75a4db" translate="yes" xml:space="preserve">
          <source>Tomcat datasource specific settings bound to an instance of Tomcat JDBC's DataSource</source>
          <target state="translated">Tomcat JDBCのDataSourceのインスタンスにバインドされたTomcatデータソース固有の設定</target>
        </trans-unit>
        <trans-unit id="8d8aaffc99e7d388edf44b6fa6be220482443087" translate="yes" xml:space="preserve">
          <source>Tomcat is also configured with a default regular expression that matches internal proxies that are to be trusted. By default, IP addresses in &lt;code&gt;10/8&lt;/code&gt;, &lt;code&gt;192.168/16&lt;/code&gt;, &lt;code&gt;169.254/16&lt;/code&gt; and &lt;code&gt;127/8&lt;/code&gt; are trusted. You can customize the valve&amp;rsquo;s configuration by adding an entry to &lt;code&gt;application.properties&lt;/code&gt;, as shown in the following example:</source>
          <target state="translated">また、Tomcatは、信頼される内部プロキシに一致するデフォルトの正規表現で構成されています。デフォルトでは、内のIPアドレス &lt;code&gt;10/8&lt;/code&gt; 、 &lt;code&gt;192.168/16&lt;/code&gt; 、 &lt;code&gt;169.254/16&lt;/code&gt; と &lt;code&gt;127/8&lt;/code&gt; 、信頼されています。次の例に示すように、 &lt;code&gt;application.properties&lt;/code&gt; にエントリを追加することで、バルブの構成をカスタマイズできます。</target>
        </trans-unit>
        <trans-unit id="b0cd978b92098762d3dbd384be99c16125b8c68d" translate="yes" xml:space="preserve">
          <source>Tomcat metrics (&lt;code&gt;server.tomcat.mbeanregistry.enabled&lt;/code&gt; must be set to &lt;code&gt;true&lt;/code&gt; for all Tomcat metrics to be registered)</source>
          <target state="translated">Tomcatメトリック（すべてのTomcatメトリックを登録するには、 &lt;code&gt;server.tomcat.mbeanregistry.enabled&lt;/code&gt; を &lt;code&gt;true&lt;/code&gt; に設定する必要があります）</target>
        </trans-unit>
        <trans-unit id="c31a517a1e961932ca24e01953683e1952da1a8c" translate="yes" xml:space="preserve">
          <source>Total length of a single payload should be kept within your network's MTU.</source>
          <target state="translated">1 つのペイロードの全長は、ネットワークの MTU 内に収まるようにする必要があります。</target>
        </trans-unit>
        <trans-unit id="999f121e5def84ff7cb388aef725e7ea52805368" translate="yes" xml:space="preserve">
          <source>Total memory size the producer can use to buffer records waiting to be sent to the server.</source>
          <target state="translated">プロデューサがサーバーに送信されるのを待っているレコードをバッファリングするために使用できる総メモリサイズ。</target>
        </trans-unit>
        <trans-unit id="1ff0ea389cc083f8c20dbdc10d4b94064dd4e759" translate="yes" xml:space="preserve">
          <source>Total size of log backups to be kept.</source>
          <target state="translated">保存するログのバックアップの合計サイズ。</target>
        </trans-unit>
        <trans-unit id="194db2e708fa01996c59361ff80bcff823dfcec4" translate="yes" xml:space="preserve">
          <source>Tracks the application&amp;rsquo;s PID by using &lt;code&gt;/var/run/&amp;lt;appname&amp;gt;/&amp;lt;appname&amp;gt;.pid&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;/var/run/&amp;lt;appname&amp;gt;/&amp;lt;appname&amp;gt;.pid&lt;/code&gt; を使用して、アプリケーションのPIDを追跡します</target>
        </trans-unit>
        <trans-unit id="627a8c3dcf098deb5d3fe89f3f356f80349ba5f4" translate="yes" xml:space="preserve">
          <source>Traditionally, JPA &amp;ldquo;Entity&amp;rdquo; classes are specified in a &lt;code&gt;persistence.xml&lt;/code&gt; file. With Spring Boot, this file is not necessary and &amp;ldquo;Entity Scanning&amp;rdquo; is used instead. By default, all packages below your main configuration class (the one annotated with &lt;code&gt;@EnableAutoConfiguration&lt;/code&gt; or &lt;code&gt;@SpringBootApplication&lt;/code&gt;) are searched.</source>
          <target state="translated">従来、JPAの「エンティティ」クラスは &lt;code&gt;persistence.xml&lt;/code&gt; ファイルで指定されていました。Spring Bootでは、このファイルは不要であり、代わりに「エンティティスキャン」が使用されます。デフォルトでは、メイン構成クラス（ &lt;code&gt;@EnableAutoConfiguration&lt;/code&gt; または &lt;code&gt;@SpringBootApplication&lt;/code&gt; でアノテーションが付けられたパッケージ）の下にあるすべてのパッケージが検索されます。</target>
        </trans-unit>
        <trans-unit id="29d003870a257287d1df3c8e4f337853d000d270" translate="yes" xml:space="preserve">
          <source>Transaction logs directory.</source>
          <target state="translated">トランザクションログのディレクトリ。</target>
        </trans-unit>
        <trans-unit id="b45bbb72686c6f3c52c5e0fc1e6dd848c8f30537" translate="yes" xml:space="preserve">
          <source>Transaction manager implementation that should be started.</source>
          <target state="translated">始めるべきトランザクションマネージャの実装</target>
        </trans-unit>
        <trans-unit id="17ca20775330ea9d4b066f0683bc785cd855af20" translate="yes" xml:space="preserve">
          <source>Transaction manager unique identifier.</source>
          <target state="translated">トランザクションマネージャ固有の識別子。</target>
        </trans-unit>
        <trans-unit id="5979d55d0d1e60227e4395c3abd1f1946e8afdcb" translate="yes" xml:space="preserve">
          <source>Transactional tests are not supported with reactive access. If you are using this style, you must configure &lt;code&gt;@DataNeo4jTest&lt;/code&gt; tests as described above.</source>
          <target state="translated">トランザクションテストは、リアクティブアクセスではサポートされていません。このスタイルを使用している場合は、上記のように &lt;code&gt;@DataNeo4jTest&lt;/code&gt; テストを構成する必要があります。</target>
        </trans-unit>
        <trans-unit id="6c9a9a4386943d5de82c9dae180382229e6c66ae" translate="yes" xml:space="preserve">
          <source>Transactions log file base name.</source>
          <target state="translated">トランザクションログファイルのベース名。</target>
        </trans-unit>
        <trans-unit id="6ddc76a2202854953b15b1d6bbdb5080e0796ad0" translate="yes" xml:space="preserve">
          <source>Triggering a restart</source>
          <target state="translated">再起動のトリガー</target>
        </trans-unit>
        <trans-unit id="13c028fa16c262ab0e25411d592c7b1e9d58ce00" translate="yes" xml:space="preserve">
          <source>Trust store that holds SSL certificates.</source>
          <target state="translated">SSL証明書を保持しているトラストストア。</target>
        </trans-unit>
        <trans-unit id="07f3a73e994ba05a7203b2774cfb7d088abb5db4" translate="yes" xml:space="preserve">
          <source>Trust store type.</source>
          <target state="translated">トラストストア型。</target>
        </trans-unit>
        <trans-unit id="0623d45902fcbb7c1170054e369ff25f951ba824" translate="yes" xml:space="preserve">
          <source>Trust strategy to use.</source>
          <target state="translated">使うための信頼戦略。</target>
        </trans-unit>
        <trans-unit id="581b3da98ddfb8335176e73d03ac48ebbc15749d" translate="yes" xml:space="preserve">
          <source>Try Kotlin in your browser</source>
          <target state="translated">ブラウザでKotlinを試す</target>
        </trans-unit>
        <trans-unit id="1d866de5fab333d470710dd23f302981ae604b74" translate="yes" xml:space="preserve">
          <source>Try the &lt;a href=&quot;howto#howto&quot;&gt;How-to documents&lt;/a&gt;. They provide solutions to the most common questions.</source>
          <target state="translated">&lt;a href=&quot;howto#howto&quot;&gt;ハウツードキュメントをお&lt;/a&gt;試しください。それらは、最も一般的な質問に対する解決策を提供します。</target>
        </trans-unit>
        <trans-unit id="81df25f4da8827871b3351f861a9dc734774967a" translate="yes" xml:space="preserve">
          <source>Tutorial: building web applications with Spring Boot and Kotlin</source>
          <target state="translated">チュートリアル:Spring BootとKotlinを使ったWebアプリケーションの構築</target>
        </trans-unit>
        <trans-unit id="4f01a5f504b6f32f75e70897bac1ab0fb0e0883e" translate="yes" xml:space="preserve">
          <source>Two popular cloud providers, Heroku and Cloud Foundry, employ a &amp;ldquo;buildpack&amp;rdquo; approach. The buildpack wraps your deployed code in whatever is needed to &lt;em&gt;start&lt;/em&gt; your application. It might be a JDK and a call to &lt;code&gt;java&lt;/code&gt;, an embedded web server, or a full-fledged application server. A buildpack is pluggable, but ideally you should be able to get by with as few customizations to it as possible. This reduces the footprint of functionality that is not under your control. It minimizes divergence between development and production environments.</source>
          <target state="translated">2つの人気のあるクラウドプロバイダーであるHerokuとCloudFoundryは、「ビルドパック」アプローチを採用しています。ビルドパックは、デプロイされたコードを、アプリケーションの&lt;em&gt;起動に&lt;/em&gt;必要なものにラップします。これは、JDKと、 &lt;code&gt;java&lt;/code&gt; 、組み込みWebサーバー、または本格的なアプリケーションサーバーへの呼び出しである可能性があります。ビルドパックはプラグイン可能ですが、理想的には、可能な限り少ないカスタマイズで問題を解決できるはずです。これにより、制御できない機能のフットプリントが削減されます。開発環境と本番環境の間の相違を最小限に抑えます。</target>
        </trans-unit>
        <trans-unit id="3deb7456519697ecf4eefc455516c969a3681bae" translate="yes" xml:space="preserve">
          <source>Type</source>
          <target state="translated">Type</target>
        </trans-unit>
        <trans-unit id="f6fb23c1829740181b8abe567d4013a56967b910" translate="yes" xml:space="preserve">
          <source>Type &lt;code&gt;spring help jar&lt;/code&gt; on the command line for more information.</source>
          <target state="translated">入力 &lt;code&gt;spring help jar&lt;/code&gt; 詳細については、コマンドライン上を。</target>
        </trans-unit>
        <trans-unit id="e37e580e4119598a274c41571ffdaae191300701" translate="yes" xml:space="preserve">
          <source>Type of Cassandra repositories to enable.</source>
          <target state="translated">有効にするCassandraリポジトリのタイプ。</target>
        </trans-unit>
        <trans-unit id="34802f86b492e75b0771845215fd6a9fde720f8c" translate="yes" xml:space="preserve">
          <source>Type of Couchbase repositories to enable.</source>
          <target state="translated">有効にするCouchbaseリポジトリの種類。</target>
        </trans-unit>
        <trans-unit id="6741e63b66a55550f2aa0e5579e27d41294e64da" translate="yes" xml:space="preserve">
          <source>Type of Mongo repositories to enable.</source>
          <target state="translated">有効にする Mongo のリポジトリの種類。</target>
        </trans-unit>
        <trans-unit id="0715803f1dddb6c9f5ab68bedf5189410b92e9b3" translate="yes" xml:space="preserve">
          <source>Type of Neo4j repositories to enable.</source>
          <target state="translated">有効にするNeo4jリポジトリの種類。</target>
        </trans-unit>
        <trans-unit id="f701b5bc2a61b85cbd76690cec0f8ac842e76b91" translate="yes" xml:space="preserve">
          <source>Type of client to use. By default, auto-detected according to the classpath.</source>
          <target state="translated">使用するクライアントの種類。デフォルトでは、クラスパスに応じて自動検出されます。</target>
        </trans-unit>
        <trans-unit id="e2aff7dbd29671a817eab8f6eacfd8473fa0718a" translate="yes" xml:space="preserve">
          <source>Type of publisher confirms to use.</source>
          <target state="translated">出版社の種類は使用を確認しています。</target>
        </trans-unit>
        <trans-unit id="a1d6c91bb766bb004d35a0bd0044abae79dd21c4" translate="yes" xml:space="preserve">
          <source>Type of shutdown that the server will support.</source>
          <target state="translated">サーバーがサポートするシャットダウンの種類。</target>
        </trans-unit>
        <trans-unit id="31e141da37ec71b3d43ba4fb3ebfbe3751ae0a47" translate="yes" xml:space="preserve">
          <source>Type of the key store.</source>
          <target state="translated">鍵屋さんのタイプ。</target>
        </trans-unit>
        <trans-unit id="2796c5dd875c2c0c515b4690c9e118265e76acf7" translate="yes" xml:space="preserve">
          <source>Type of the trust store.</source>
          <target state="translated">信託店舗の種類。</target>
        </trans-unit>
        <trans-unit id="abf58822f52224de08dfbc3fcc79e0b66adc4fa4" translate="yes" xml:space="preserve">
          <source>Type-safe Configuration Properties</source>
          <target state="translated">タイプセーフ構成プロパティ</target>
        </trans-unit>
        <trans-unit id="306bb5e6fa61f4f2729e486da449a62c4032aaf5" translate="yes" xml:space="preserve">
          <source>Typically, migrations are scripts in the form &lt;code&gt;V&amp;lt;VERSION&amp;gt;__&amp;lt;NAME&amp;gt;.sql&lt;/code&gt; (with &lt;code&gt;&amp;lt;VERSION&amp;gt;&lt;/code&gt; an underscore-separated version, such as &amp;lsquo;1&amp;rsquo; or &amp;lsquo;2_1&amp;rsquo;). By default, they are in a directory called &lt;code&gt;classpath:db/migration&lt;/code&gt;, but you can modify that location by setting &lt;code&gt;spring.flyway.locations&lt;/code&gt;. This is a comma-separated list of one or more &lt;code&gt;classpath:&lt;/code&gt; or &lt;code&gt;filesystem:&lt;/code&gt; locations. For example, the following configuration would search for scripts in both the default classpath location and the &lt;code&gt;/opt/migration&lt;/code&gt; directory:</source>
          <target state="translated">通常、移行は &lt;code&gt;V&amp;lt;VERSION&amp;gt;__&amp;lt;NAME&amp;gt;.sql&lt;/code&gt; の形式のスクリプトです（ &lt;code&gt;&amp;lt;VERSION&amp;gt;&lt;/code&gt; は、「1」や「2_1」など、アンダースコアで区切られたバージョンです）。デフォルトでは、それらは &lt;code&gt;classpath:db/migration&lt;/code&gt; というディレクトリにありますが、 &lt;code&gt;spring.flyway.locations&lt;/code&gt; を設定することでその場所を変更できます。これは、1つ以上の &lt;code&gt;classpath:&lt;/code&gt; または &lt;code&gt;filesystem:&lt;/code&gt; の場所のコンマ区切りのリストです。たとえば、次の構成では、デフォルトのクラスパスの場所と &lt;code&gt;/opt/migration&lt;/code&gt; ディレクトリの両方でスクリプトが検索されます。</target>
        </trans-unit>
        <trans-unit id="57c6897c2ff85203a8c6f15de509953ff47a06b5" translate="yes" xml:space="preserve">
          <source>UDP addressing mode, either unicast or multicast.</source>
          <target state="translated">UDP アドレッシングモード (ユニキャストまたはマルチキャストのいずれか)。</target>
        </trans-unit>
        <trans-unit id="25ba44ec3b391ba4ce5fbbd2979635e254775e7d" translate="yes" xml:space="preserve">
          <source>UNKNOWN</source>
          <target state="translated">UNKNOWN</target>
        </trans-unit>
        <trans-unit id="11a66854c0ed7fd7fbaf5a561663c5dc867c9f19" translate="yes" xml:space="preserve">
          <source>UP</source>
          <target state="translated">UP</target>
        </trans-unit>
        <trans-unit id="82e5f8cb0afd0a8fc12c60e00bf8a876f4e9653c" translate="yes" xml:space="preserve">
          <source>URI for the Atlas LWC endpoint to evaluate the data for a subscription.</source>
          <target state="translated">サブスクリプションのデータを評価するためのアトラスLWCエンドポイントのURI。</target>
        </trans-unit>
        <trans-unit id="e254fabcfb4af699584d8a7ae2aade3728e90775" translate="yes" xml:space="preserve">
          <source>URI for the Atlas LWC endpoint to retrieve current subscriptions.</source>
          <target state="translated">現在のサブスクリプションを取得するためのアトラスLWCエンドポイントのURI。</target>
        </trans-unit>
        <trans-unit id="2d45d7281fc9e77b29d5b362db5a8b1b1be6cd8d" translate="yes" xml:space="preserve">
          <source>URI of the Atlas server.</source>
          <target state="translated">アトラスサーバーのURI。</target>
        </trans-unit>
        <trans-unit id="2a300b4198cba91811ee44c8600fdabf6a778456" translate="yes" xml:space="preserve">
          <source>URI of the Influx server.</source>
          <target state="translated">Influx サーバーの URI。</target>
        </trans-unit>
        <trans-unit id="39de44275d339b62a24c6346f6e2919f927087fd" translate="yes" xml:space="preserve">
          <source>URI of the KairosDB server.</source>
          <target state="translated">KairosDBサーバーのURI。</target>
        </trans-unit>
        <trans-unit id="7287388520fef9af270e987ed326d680210d9611" translate="yes" xml:space="preserve">
          <source>URI that can either be an OpenID Connect discovery endpoint or an OAuth 2.0 Authorization Server Metadata endpoint defined by RFC 8414.</source>
          <target state="translated">OpenID Connect ディスカバリエンドポイントまたは RFC 8414 で定義されている OAuth 2.0 Authorization Server Metadata エンドポイントのいずれかになる URI。</target>
        </trans-unit>
        <trans-unit id="fbcdf5d8f896093a241a0e79f396eaaa45106cfa" translate="yes" xml:space="preserve">
          <source>URI to ship metrics to.</source>
          <target state="translated">メトリクスを出荷するための URI。</target>
        </trans-unit>
        <trans-unit id="576e605d6d417e6d8f4f89ce31bcdce089e33870" translate="yes" xml:space="preserve">
          <source>URI to ship metrics to. If you need to publish metrics to an internal proxy en-route to Datadog, you can define the location of the proxy with this.</source>
          <target state="translated">メトリクスを出荷するための URI。Datadog への途中で内部プロキシにメトリクスをパブリッシュする必要がある場合は、プロキシの場所をこれで定義できます。</target>
        </trans-unit>
        <trans-unit id="f0628050def50bad40cb0410b9483861afcdb29f" translate="yes" xml:space="preserve">
          <source>URI to ship metrics to. If you need to publish metrics to an internal proxy en-route to Humio, you can define the location of the proxy with this.</source>
          <target state="translated">メトリクスを出荷するための URI。Humio への途中で内部のプロキシにメトリクスを公開する必要がある場合は、これでプロキシの場所を定義することができます。</target>
        </trans-unit>
        <trans-unit id="15a8df0d596d0b25be5cb661e54701c3fbedb3b5" translate="yes" xml:space="preserve">
          <source>URI to ship metrics to. Should be used for SaaS, self managed instances or to en-route through an internal proxy.</source>
          <target state="translated">メトリクスを出荷するための URI。SaaS、自己管理インスタンス、または内部プロキシを経由した経路に使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="ceeba41fc89adba0cf65685cfc69ba345a72880f" translate="yes" xml:space="preserve">
          <source>URI used by the driver.</source>
          <target state="translated">ドライバが使用するURI。</target>
        </trans-unit>
        <trans-unit id="ff82cdc4064164729912444950fcbbbc6e6b8e93" translate="yes" xml:space="preserve">
          <source>URL of the ActiveMQ broker. Auto-generated by default.</source>
          <target state="translated">ActiveMQ ブローカーの URL。デフォルトでは自動生成されます。</target>
        </trans-unit>
        <trans-unit id="a8fe3e49d7b49c5631b8b918d2594ac9b250d3eb" translate="yes" xml:space="preserve">
          <source>URL of the InfluxDB instance to which to connect.</source>
          <target state="translated">接続先の InfluxDB インスタンスの URL。</target>
        </trans-unit>
        <trans-unit id="769af4be7324809aaad53b251df7da35e4071cf7" translate="yes" xml:space="preserve">
          <source>Unconditionally activate the specified comma-separated list of profiles (or list of profiles if using YAML).</source>
          <target state="translated">指定されたプロファイルのカンマ区切りのリスト(YAMLを使用している場合はプロファイルのリスト)を無条件に有効にします。</target>
        </trans-unit>
        <trans-unit id="27b88d799bcbb8220eb816fed000faec696e0ea1" translate="yes" xml:space="preserve">
          <source>Under the hood, Spring Boot uses a different type of &lt;code&gt;ApplicationContext&lt;/code&gt; for embedded servlet container support. The &lt;code&gt;ServletWebServerApplicationContext&lt;/code&gt; is a special type of &lt;code&gt;WebApplicationContext&lt;/code&gt; that bootstraps itself by searching for a single &lt;code&gt;ServletWebServerFactory&lt;/code&gt; bean. Usually a &lt;code&gt;TomcatServletWebServerFactory&lt;/code&gt;, &lt;code&gt;JettyServletWebServerFactory&lt;/code&gt;, or &lt;code&gt;UndertowServletWebServerFactory&lt;/code&gt; has been auto-configured.</source>
          <target state="translated">内部的には、 &lt;code&gt;ApplicationContext&lt;/code&gt; は組み込みサーブレットコンテナのサポートに異なるタイプのApplicationContextを使用します。 &lt;code&gt;ServletWebServerApplicationContext&lt;/code&gt; は、特殊なタイプである &lt;code&gt;WebApplicationContext&lt;/code&gt; その単一の検索によってブートストラップ自体を &lt;code&gt;ServletWebServerFactory&lt;/code&gt; のビーン。通常、 &lt;code&gt;TomcatServletWebServerFactory&lt;/code&gt; 、 &lt;code&gt;JettyServletWebServerFactory&lt;/code&gt; 、または &lt;code&gt;UndertowServletWebServerFactory&lt;/code&gt; は自動構成されています。</target>
        </trans-unit>
        <trans-unit id="ee3f6b4a191afaef70e566af1a569b8dde9a6e8f" translate="yes" xml:space="preserve">
          <source>Under the hood, auto-configuration is implemented with standard &lt;code&gt;@Configuration&lt;/code&gt; classes. Additional &lt;code&gt;@Conditional&lt;/code&gt; annotations are used to constrain when the auto-configuration should apply. Usually, auto-configuration classes use &lt;code&gt;@ConditionalOnClass&lt;/code&gt; and &lt;code&gt;@ConditionalOnMissingBean&lt;/code&gt; annotations. This ensures that auto-configuration applies only when relevant classes are found and when you have not declared your own &lt;code&gt;@Configuration&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;@Configuration&lt;/code&gt; 的には、自動構成は標準の@Configurationクラスで実装されます。追加の &lt;code&gt;@Conditional&lt;/code&gt; アノテーションは、自動構成をいつ適用するかを制約するために使用されます。通常、自動構成クラスが使用 &lt;code&gt;@ConditionalOnClass&lt;/code&gt; と &lt;code&gt;@ConditionalOnMissingBean&lt;/code&gt; 注釈を。これにより、関連するクラスが見つかった場合、および独自の &lt;code&gt;@Configuration&lt;/code&gt; を宣言していない場合にのみ、自動構成が適用されます。</target>
        </trans-unit>
        <trans-unit id="2daf2564b43d3af147d901ed275de89c0a88346b" translate="yes" xml:space="preserve">
          <source>Underlying implementation class name of the XA resource.</source>
          <target state="translated">XA リソースの実装クラス名。</target>
        </trans-unit>
        <trans-unit id="7993f4d09aa7006c6cce4bf1789fe288530708bc" translate="yes" xml:space="preserve">
          <source>Underscore notation, which is an alternative format for use in &lt;code&gt;.properties&lt;/code&gt; and &lt;code&gt;.yml&lt;/code&gt; files.</source>
          <target state="translated">&lt;code&gt;.properties&lt;/code&gt; および &lt;code&gt;.yml&lt;/code&gt; ファイルで使用するための代替形式であるアンダースコア表記。</target>
        </trans-unit>
        <trans-unit id="e15b56c87d3bf8555f16e6bea0a4cc80d38115f9" translate="yes" xml:space="preserve">
          <source>Undertow</source>
          <target state="translated">Undertow</target>
        </trans-unit>
        <trans-unit id="4d4625c23b9a67402021084a54ba86d02d07967f" translate="yes" xml:space="preserve">
          <source>Undertow 2.0</source>
          <target state="translated">アンダートウ2.0</target>
        </trans-unit>
        <trans-unit id="5df119d0507358970364bcbfd1b96b9996720277" translate="yes" xml:space="preserve">
          <source>Undertow access log directory.</source>
          <target state="translated">Undertowのアクセスログディレクトリ。</target>
        </trans-unit>
        <trans-unit id="f5d3ca8a600d096e78521c454d6ddd4f41aa469c" translate="yes" xml:space="preserve">
          <source>Undertow does not support JSPs.</source>
          <target state="translated">UndertowはJSPをサポートしていません。</target>
        </trans-unit>
        <trans-unit id="f51c4f2459aa9c139f6684cefbffdad39e606de1" translate="yes" xml:space="preserve">
          <source>Unfortunately, several third-party libraries deserialize without considering the context classloader. If you find such a problem, you need to request a fix with the original authors.</source>
          <target state="translated">残念ながら、いくつかのサードパーティのライブラリは、コンテキストのクラスローダを考慮せずにデシリアライズします。このような問題を発見した場合は、オリジナルの作者に修正を依頼する必要があります。</target>
        </trans-unit>
        <trans-unit id="b406fd8d12e379b522158caa7187046c3e623613" translate="yes" xml:space="preserve">
          <source>Unique identifier for the app instance that is the source of metrics being published to Wavefront. Defaults to the local host name.</source>
          <target state="translated">Wavefrontに公開するメトリクスのソースとなるアプリインスタンスの一意の識別子。デフォルトはローカルホスト名。</target>
        </trans-unit>
        <trans-unit id="7009aedbac798beff00a5efc3c122e916adb02b2" translate="yes" xml:space="preserve">
          <source>Unique name used to identify the resource during recovery.</source>
          <target state="translated">復旧時にリソースを識別するために使用される一意の名前。</target>
        </trans-unit>
        <trans-unit id="4ca9a50b84a5e47188770e1ea1eb63f1c0e2dabc" translate="yes" xml:space="preserve">
          <source>Unique string that identifies the consumer group to which this consumer belongs.</source>
          <target state="translated">この消費者が属する消費者グループを識別する一意の文字列。</target>
        </trans-unit>
        <trans-unit id="4db0ce0ec9b9bab383032bc59da34601d585fe31" translate="yes" xml:space="preserve">
          <source>Uniquely identifies the app instance that is publishing metrics to SignalFx. Defaults to the local host name.</source>
          <target state="translated">SignalFx にメトリクスを公開しているアプリのインスタンスを一意に識別します。デフォルトはローカル・ホスト名です。</target>
        </trans-unit>
        <trans-unit id="99d0d185366dff17077a26a26f5906d451aa9447" translate="yes" xml:space="preserve">
          <source>Unless the &lt;code&gt;spring.jooq.sql-dialect&lt;/code&gt; property has been configured, Spring Boot determines the SQL dialect to use for your datasource. If Spring Boot could not detect the dialect, it uses &lt;code&gt;DEFAULT&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;spring.jooq.sql-dialect&lt;/code&gt; プロパティが構成されていない限り、SpringBootはデータソースに使用するSQLダイアレクトを決定します。Spring Bootが方言を検出できなかった場合は、 &lt;code&gt;DEFAULT&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="0fc03bf8183917e3737efebfe615eae134b165d4" translate="yes" xml:space="preserve">
          <source>Unless the management port has been configured to &lt;a href=&quot;#production-ready-customizing-management-server-port&quot;&gt;expose endpoints by using a different HTTP port&lt;/a&gt;, &lt;code&gt;management.endpoints.web.base-path&lt;/code&gt; is relative to &lt;code&gt;server.servlet.context-path&lt;/code&gt; (Servlet web applications) or &lt;code&gt;spring.webflux.base-path&lt;/code&gt; (reactive web applications). If &lt;code&gt;management.server.port&lt;/code&gt; is configured, &lt;code&gt;management.endpoints.web.base-path&lt;/code&gt; is relative to &lt;code&gt;management.server.base-path&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#production-ready-customizing-management-server-port&quot;&gt;別のHTTPポートを使用してエンドポイント&lt;/a&gt;を公開するように管理ポートが構成されていない限り、 &lt;code&gt;management.endpoints.web.base-path&lt;/code&gt; は &lt;code&gt;server.servlet.context-path&lt;/code&gt; （サーブレットWebアプリケーション）または &lt;code&gt;spring.webflux.base-path&lt;/code&gt; （反応型Webアプリケーション）。場合 &lt;code&gt;management.server.port&lt;/code&gt; が構成され、 &lt;code&gt;management.endpoints.web.base-path&lt;/code&gt; からの相対 &lt;code&gt;management.server.base-path&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d7e077904c44aaef08ea36706c425b8008b6bbd3" translate="yes" xml:space="preserve">
          <source>Unlike the equivalent Java application, you do not need to include a &lt;code&gt;public static void main(String[] args)&lt;/code&gt; method with your &lt;code&gt;Groovy&lt;/code&gt; scripts. A &lt;code&gt;SpringApplication&lt;/code&gt; is automatically created, with your compiled code acting as the &lt;code&gt;source&lt;/code&gt;.</source>
          <target state="translated">同等のJavaアプリケーションとは異なり、 &lt;code&gt;Groovy&lt;/code&gt; スクリプトに &lt;code&gt;public static void main(String[] args)&lt;/code&gt; メソッドを含める必要はありません。A &lt;code&gt;SpringApplication&lt;/code&gt; は自動的にコンパイルされたコードのように演技して、作成され &lt;code&gt;source&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e5fd95b92003658ce47721181589f7c621196b10" translate="yes" xml:space="preserve">
          <source>Upgrading instructions are always the first item in the release notes. If you are more than one release behind, please make sure that you also review the release notes of the versions that you jumped.</source>
          <target state="translated">アップグレードの手順は、必ずリリースノートの最初の項目にあります。複数のリリースが遅れている場合は、ジャンプしたバージョンのリリースノートも確認してください。</target>
        </trans-unit>
        <trans-unit id="5f852e8ffed963fb691399132e42808b6463d427" translate="yes" xml:space="preserve">
          <source>Upload binaries instead of sources</source>
          <target state="translated">ソースの代わりにバイナリをアップロード</target>
        </trans-unit>
        <trans-unit id="ca96637664a220b2f0ef82bb367945605fab34b5" translate="yes" xml:space="preserve">
          <source>Upper case format with underscore as the delimiter (see &lt;a href=&quot;#boot-features-external-config-relaxed-binding-from-environment-variables&quot;&gt;Binding from Environment Variables&lt;/a&gt;).</source>
          <target state="translated">区切り文字としてアンダースコアを使用した大文字の形式（&lt;a href=&quot;#boot-features-external-config-relaxed-binding-from-environment-variables&quot;&gt;環境変数からのバインドを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="1f896e26a190b167ccc06d32ffdf0e1c6ba06364" translate="yes" xml:space="preserve">
          <source>Upper case format, which is recommended when using system environment variables.</source>
          <target state="translated">システム環境変数を使用する場合に推奨される大文字の書式です。</target>
        </trans-unit>
        <trans-unit id="9126698b321b399f279348bd7f2d5dd265b42b3f" translate="yes" xml:space="preserve">
          <source>Uptime metrics: report a gauge for uptime and a fixed gauge representing the application&amp;rsquo;s absolute start time</source>
          <target state="translated">稼働時間の指標：稼働時間のゲージと、アプリケーションの絶対開始時間を表す固定ゲージを報告します</target>
        </trans-unit>
        <trans-unit id="105a028d2cb7ed53d9a1ec90cb9cd687935f2eff" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;java.time.Duration&lt;/code&gt; rather than &lt;code&gt;long&lt;/code&gt; and describe the default unit if it differs from milliseconds, e.g. &quot;If a duration suffix is not specified, seconds will be used&quot;.</source>
          <target state="translated">使用 &lt;code&gt;java.time.Duration&lt;/code&gt; ではなく、 &lt;code&gt;long&lt;/code&gt; 、それはミリ秒と異なる場合、「期間のサフィックスが指定されていない場合、秒が使用されます」など、デフォルトの単位を記述する。</target>
        </trans-unit>
        <trans-unit id="d627eb6089fb036ddf8db3068b175a292bc84d18" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;org.springframework.boot.devtools.RemoteSpringApplication&lt;/code&gt; as the main class.</source>
          <target state="translated">使用 &lt;code&gt;org.springframework.boot.devtools.RemoteSpringApplication&lt;/code&gt; メインクラスとして。</target>
        </trans-unit>
        <trans-unit id="36139e7d49e8e7fd6a7c34571b7d5ac523791ed1" translate="yes" xml:space="preserve">
          <source>Use a placeholder in configuration properties:</source>
          <target state="translated">構成プロパティでプレースホルダを使用します。</target>
        </trans-unit>
        <trans-unit id="c92cdce65ba68d982f02ca6bc941c1f3bc812ab3" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;spring-boot-starter-cache&lt;/code&gt; &amp;ldquo;Starter&amp;rdquo; to quickly add basic caching dependencies. The starter brings in &lt;code&gt;spring-context-support&lt;/code&gt;. If you add dependencies manually, you must include &lt;code&gt;spring-context-support&lt;/code&gt; in order to use the JCache, EhCache 2.x, or Caffeine support.</source>
          <target state="translated">使用し &lt;code&gt;spring-boot-starter-cache&lt;/code&gt; すばやく基本的なキャッシュの依存関係を追加するには、「スターター」を。スターターは &lt;code&gt;spring-context-support&lt;/code&gt; をもたらします。依存関係を手動で追加する場合、JCache、EhCache 2.x、またはCaffeineサポートを使用するには、 &lt;code&gt;spring-context-support&lt;/code&gt; を含める必要があります。</target>
        </trans-unit>
        <trans-unit id="261589f015e9bb1144ded71b5feb0b0a2ec985ef" translate="yes" xml:space="preserve">
          <source>Use the appropriate launcher (such as &lt;code&gt;JarLauncher&lt;/code&gt; for a jar file) as a &lt;code&gt;Main-Class&lt;/code&gt; attribute in the manifest and specify the other properties it needs as manifest entries &amp;mdash; principally, by setting a &lt;code&gt;Start-Class&lt;/code&gt; property.</source>
          <target state="translated">マニフェストの &lt;code&gt;Main-Class&lt;/code&gt; 属性として適切なランチャー（jarファイルの &lt;code&gt;JarLauncher&lt;/code&gt; など）を使用し、マニフェストエントリとして必要な他のプロパティを指定します（主に、 &lt;code&gt;Start-Class&lt;/code&gt; プロパティを設定します）。</target>
        </trans-unit>
        <trans-unit id="e58a3b99db2361062809a8397a4bde9f052e9fa0" translate="yes" xml:space="preserve">
          <source>Use the prefix &lt;code&gt;optional:&lt;/code&gt; if the &lt;a href=&quot;#boot-features-external-config-optional-prefix&quot;&gt;locations are optional&lt;/a&gt; and you don&amp;rsquo;t mind if they don&amp;rsquo;t exist.</source>
          <target state="translated">使用プレフィックス &lt;code&gt;optional:&lt;/code&gt; あれば&lt;a href=&quot;#boot-features-external-config-optional-prefix&quot;&gt;場所はオプションであり&lt;/a&gt;、それらが存在しない場合は、あなたが気にしません。</target>
        </trans-unit>
        <trans-unit id="1ff07cdba4d13a2eec504151ffece9d630e633df" translate="yes" xml:space="preserve">
          <source>Used to resolve relative paths in &lt;code&gt;loader.path&lt;/code&gt;. For example, given &lt;code&gt;loader.path=lib&lt;/code&gt;, then &lt;code&gt;${loader.home}/lib&lt;/code&gt; is a classpath location (along with all jar files in that directory). This property is also used to locate a &lt;code&gt;loader.properties&lt;/code&gt; file, as in the following example &lt;code&gt;&lt;a href=&quot;file:///opt/app&quot;&gt;/opt/app&lt;/a&gt;&lt;/code&gt; It defaults to &lt;code&gt;${user.dir}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;loader.path&lt;/code&gt; の相対パスを解決するために使用されます。例えば、所与 &lt;code&gt;loader.path=lib&lt;/code&gt; は、 &lt;code&gt;${loader.home}/lib&lt;/code&gt; （そのディレクトリ内のすべてのJARファイルと共に）クラスパスの場所です。このプロパティは、検索するために使用され &lt;code&gt;loader.properties&lt;/code&gt; の次の例のように、ファイルを &lt;code&gt;&lt;a href=&quot;file:///opt/app&quot;&gt;/opt/app&lt;/a&gt;&lt;/code&gt; がデフォルト &lt;code&gt;${user.dir}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5ab5506a7f5412a5000f83db3cbe09d94b20ea74" translate="yes" xml:space="preserve">
          <source>User to use to connect to the JMS provider.</source>
          <target state="translated">JMS プロバイダに接続するために使用するユーザーです。</target>
        </trans-unit>
        <trans-unit id="dec1e9bb0360b77006be5a8fd9afeb048cf44f9c" translate="yes" xml:space="preserve">
          <source>Username of the database to execute DDL scripts (if different).</source>
          <target state="translated">DDL スクリプトを実行するデータベースのユーザー名 (異なる場合)。</target>
        </trans-unit>
        <trans-unit id="df69e3422a0a8cee83e24189f0a7e34ce90cbd7f" translate="yes" xml:space="preserve">
          <source>Username of the database to execute DML scripts (if different).</source>
          <target state="translated">DMLスクリプトを実行するデータベースのユーザ名(異なる場合)。</target>
        </trans-unit>
        <trans-unit id="30dfac2f56a7ad1937c64a307327002c46f65896" translate="yes" xml:space="preserve">
          <source>Username recorded in the schema history table as having applied the migration.</source>
          <target state="translated">移行を適用したとしてスキーマ履歴テーブルに記録されているユーザー名。</target>
        </trans-unit>
        <trans-unit id="49e8a4d248f04d7ba28d8f9eb8f69ab3acb55da4" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;@ConfigurationProperties&lt;/code&gt; also lets you generate metadata files that can be used by IDEs to offer auto-completion for your own keys. See the &lt;a href=&quot;appendix-configuration-metadata#configuration-metadata&quot;&gt;appendix&lt;/a&gt; for details.</source>
          <target state="translated">使用 &lt;code&gt;@ConfigurationProperties&lt;/code&gt; はまた、あなたがあなた自身のキーのためのオファーの自動補完にIDEを使用することができ、メタデータファイルを生成することができます。詳細については、&lt;a href=&quot;appendix-configuration-metadata#configuration-metadata&quot;&gt;付録&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="86da806be35e1a21acd3c86c2f8ad0f5d98155bf" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;ConfigFileApplicationContextInitializer&lt;/code&gt; alone does not provide support for &lt;code&gt;@Value(&quot;${&amp;hellip;​}&quot;)&lt;/code&gt; injection. Its only job is to ensure that &lt;code&gt;application.properties&lt;/code&gt; files are loaded into Spring&amp;rsquo;s &lt;code&gt;Environment&lt;/code&gt;. For &lt;code&gt;@Value&lt;/code&gt; support, you need to either additionally configure a &lt;code&gt;PropertySourcesPlaceholderConfigurer&lt;/code&gt; or use &lt;code&gt;@SpringBootTest&lt;/code&gt;, which auto-configures one for you.</source>
          <target state="translated">&lt;code&gt;ConfigFileApplicationContextInitializer&lt;/code&gt; を単独で使用しても、 &lt;code&gt;@Value(&quot;${&amp;hellip;​}&quot;)&lt;/code&gt; インジェクションはサポートされません。その唯一の仕事は、 &lt;code&gt;application.properties&lt;/code&gt; ファイルがSpringの &lt;code&gt;Environment&lt;/code&gt; ロードされていることを確認することです。以下のために &lt;code&gt;@Value&lt;/code&gt; サポート、あなたはどちらかに加えて設定する必要が &lt;code&gt;PropertySourcesPlaceholderConfigurer&lt;/code&gt; をまたは使用 &lt;code&gt;@SpringBootTest&lt;/code&gt; をあなたのための1つを、その自動設定します。</target>
        </trans-unit>
        <trans-unit id="232643314fe540e277c4dbd5a37125668776ae4f" translate="yes" xml:space="preserve">
          <source>Using Spring Boot</source>
          <target state="translated">Spring Bootを使う</target>
        </trans-unit>
        <trans-unit id="b0b35af64cf6e8d4bde4e00da3139587c649abec" translate="yes" xml:space="preserve">
          <source>Using a &lt;code&gt;MeterBinder&lt;/code&gt; ensures that the correct dependency relationships are set up and that the bean is available when the metric&amp;rsquo;s value is retrieved. By default, metrics from all &lt;code&gt;MeterBinder&lt;/code&gt; beans will be automatically bound to the Spring-managed &lt;code&gt;MeterRegistry&lt;/code&gt;. A &lt;code&gt;MeterBinder&lt;/code&gt; implementation can also be useful if you find that you repeatedly instrument a suite of metrics across components or applications.</source>
          <target state="translated">&lt;code&gt;MeterBinder&lt;/code&gt; を使用すると、正しい依存関係が設定され、メトリックの値が取得されたときにBeanが使用可能になります。デフォルトでは、すべての &lt;code&gt;MeterBinder&lt;/code&gt; Beanのメトリックは、Springが管理する &lt;code&gt;MeterRegistry&lt;/code&gt; に自動的にバインドされます。 A &lt;code&gt;MeterBinder&lt;/code&gt; のあなたが繰り返し楽器コンポーネントまたはアプリケーション間でのメトリックのスイートをすることを発見した場合の実装にも役立ちます。</target>
        </trans-unit>
        <trans-unit id="2be9e29a9245867605d2a7b1e6281e41f51bdb6d" translate="yes" xml:space="preserve">
          <source>Using configuration such as the preceding example means the application no longer supports a plain HTTP connector at port 8080. Spring Boot does not support the configuration of both an HTTP connector and an HTTPS connector through &lt;code&gt;application.properties&lt;/code&gt;. If you want to have both, you need to configure one of them programmatically. We recommend using &lt;code&gt;application.properties&lt;/code&gt; to configure HTTPS, as the HTTP connector is the easier of the two to configure programmatically.</source>
          <target state="translated">前の例のような構成を使用すると、アプリケーションはポート8080でプレーンHTTPコネクターをサポートしなくなります。SpringBootは、 &lt;code&gt;application.properties&lt;/code&gt; を介したHTTPコネクターとHTTPSコネクターの両方の構成をサポートしません。両方が必要な場合は、プログラムでどちらかを構成する必要があります。HTTPコネクタは2つのうちプログラムで構成する方が簡単なので、 &lt;code&gt;application.properties&lt;/code&gt; を使用してHTTPSを構成することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="6df71dd0d4d1dcb80ca563c0529e7b21cf6fbfd0" translate="yes" xml:space="preserve">
          <source>Using graceful shutdown with your IDE may not work properly if it does not send a proper &lt;code&gt;SIGTERM&lt;/code&gt; signal. Refer to the documentation of your IDE for more details.</source>
          <target state="translated">IDEが適切な &lt;code&gt;SIGTERM&lt;/code&gt; シグナルを送信しない場合、IDEでグレースフルシャットダウンを使用すると正しく機能しない可能性があります。詳細については、IDEのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="ba597ba695853fba0c6cfd2bcd7492a46228c468" translate="yes" xml:space="preserve">
          <source>Using spring boot</source>
          <target state="translated">スプリングブーツを使用</target>
        </trans-unit>
        <trans-unit id="6057c37f4ad19c91728bb926eba4cf0721724e42" translate="yes" xml:space="preserve">
          <source>Using the &amp;ldquo;exejar&amp;rdquo; Task</source>
          <target state="translated">「exejar」タスクの使用</target>
        </trans-unit>
        <trans-unit id="0101e78c501781c5ae1c16480935d4da5d425614" translate="yes" xml:space="preserve">
          <source>Using the &amp;ldquo;findmainclass&amp;rdquo; Task</source>
          <target state="translated">「findmainclass」タスクの使用</target>
        </trans-unit>
        <trans-unit id="7b01669e858e201635ab4e3959d3315f0d501cfa" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;@Value(&quot;${property}&quot;)&lt;/code&gt; annotation to inject configuration properties can sometimes be cumbersome, especially if you are working with multiple properties or your data is hierarchical in nature. Spring Boot provides an alternative method of working with properties that lets strongly typed beans govern and validate the configuration of your application.</source>
          <target state="translated">使用 &lt;code&gt;@Value(&quot;${property}&quot;)&lt;/code&gt; 注入構成プロパティに注釈することは、時にはあなたが複数のプロパティで作業しているか、あなたのデータは本質的に階層的である場合は特に、面倒なことができます。Spring Bootは、強く型付けされたBeanがアプリケーションの構成を管理および検証できるようにする、プロパティを操作する代替方法を提供します。</target>
        </trans-unit>
        <trans-unit id="1f8ba49c282439a0ab26651ad29a3adb795c325e" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;JarLauncher&lt;/code&gt; over the application&amp;rsquo;s main method has the added benefit of a predictable classpath order. The jar contains a &lt;code&gt;classpath.idx&lt;/code&gt; file which is used by the &lt;code&gt;JarLauncher&lt;/code&gt; when constructing the classpath.</source>
          <target state="translated">アプリケーションのmainメソッドに対して &lt;code&gt;JarLauncher&lt;/code&gt; を使用すると、予測可能なクラスパスの順序という追加の利点があります。jarには、 &lt;code&gt;classpath.idx&lt;/code&gt; &lt;code&gt;JarLauncher&lt;/code&gt; ときにJarLauncherによって使用されるclasspath.idxファイルが含まれています。</target>
        </trans-unit>
        <trans-unit id="8f1886e62dc25a8ce4c42a8a5cea86b655977fa4" translate="yes" xml:space="preserve">
          <source>Using the CLI</source>
          <target state="translated">CLIを使用する</target>
        </trans-unit>
        <trans-unit id="51e9fb10a5b5d70a4a914ded19e9b8a92558263a" translate="yes" xml:space="preserve">
          <source>Using the Java SE Platform</source>
          <target state="translated">Java SEプラットフォームの使用</target>
        </trans-unit>
        <trans-unit id="f6863ecb4b67b3265691b5d41cf3451e2e18f9ea" translate="yes" xml:space="preserve">
          <source>Using the S2I builder</source>
          <target state="translated">S2Iビルダーの使用</target>
        </trans-unit>
        <trans-unit id="13e5b8862ae89349fb14ef715ad8c3f700a51770" translate="yes" xml:space="preserve">
          <source>Using the Tomcat Platform</source>
          <target state="translated">Tomcatプラットフォームの利用</target>
        </trans-unit>
        <trans-unit id="03813f38146afe15598caec1d6484a54a54022d4" translate="yes" xml:space="preserve">
          <source>Using the multi-document YAML syntax in profile-specific YAML files can lead to unexpected behavior. For example, consider the following config in a file:</source>
          <target state="translated">プロファイル固有のYAMLファイルでマルチドキュメントYAML構文を使うと、予期しない動作をすることがあります。例えば、ファイル内の以下の設定を考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="57c8e251a6d18af5e829337162b68a23a5e05e0b" translate="yes" xml:space="preserve">
          <source>Using the “exejar” Task</source>
          <target state="translated">exejar」タスクの使用</target>
        </trans-unit>
        <trans-unit id="c0135d5dc370cdb0547a3a93d1d268190ab11ed9" translate="yes" xml:space="preserve">
          <source>Using the “findmainclass” Task</source>
          <target state="translated">findmainclass」タスクを使う</target>
        </trans-unit>
        <trans-unit id="24a271451e65e20717de9aee72e172c4a79d419b" translate="yes" xml:space="preserve">
          <source>Utils</source>
          <target state="translated">Utils</target>
        </trans-unit>
        <trans-unit id="9ca5b42e13c2fcef84ca89753b19f03046e7d142" translate="yes" xml:space="preserve">
          <source>Validation depth.</source>
          <target state="translated">バリデーションの深さ。</target>
        </trans-unit>
        <trans-unit id="793bcdfed156c84ee16ae95443780036d0c74b2a" translate="yes" xml:space="preserve">
          <source>Validation query.</source>
          <target state="translated">クエリの検証。</target>
        </trans-unit>
        <trans-unit id="0636e27ff82cdc0b8c80b95d6bee5c4f5635de65" translate="yes" xml:space="preserve">
          <source>Value of a default routing key to use for send operations.</source>
          <target state="translated">送信操作に使用するデフォルトのルーティングキーの値。</target>
        </trans-unit>
        <trans-unit id="1bce275605291903c99bc9b92cd5cef092ba097e" translate="yes" xml:space="preserve">
          <source>Value of the protocol header indicating whether the incoming request uses SSL.</source>
          <target state="translated">受信するリクエストがSSLを使用するかどうかを示すプロトコルヘッダの値。</target>
        </trans-unit>
        <trans-unit id="e417aa7a08949074fd38d41360647237944d1fee" translate="yes" xml:space="preserve">
          <source>Value to use for the Server response header (if empty, no header is sent).</source>
          <target state="translated">サーバー応答ヘッダーに使用する値(空の場合、ヘッダーは送信されません)。</target>
        </trans-unit>
        <trans-unit id="749237f79710dbb14c717ad467770c4d7835d5b7" translate="yes" xml:space="preserve">
          <source>ValueHint[]</source>
          <target state="translated">ValueHint[]</target>
        </trans-unit>
        <trans-unit id="23182abfffa1e84ff155f3ee21455a0f33e463c6" translate="yes" xml:space="preserve">
          <source>ValueProvider[]</source>
          <target state="translated">ValueProvider[]</target>
        </trans-unit>
        <trans-unit id="b1564f6b1512cbfa3cfcebc9a5badb6b239954f1" translate="yes" xml:space="preserve">
          <source>Values</source>
          <target state="translated">Values</target>
        </trans-unit>
        <trans-unit id="0255dc3f55cf9062adc0eefc64291f76979d0a02" translate="yes" xml:space="preserve">
          <source>Vanilla usage of Spring &lt;code&gt;DispatcherServlet&lt;/code&gt; and Spring Security should require no further changes. If you have other features in your application (for instance, using other servlets or filters), you may need to add some configuration to your &lt;code&gt;Application&lt;/code&gt; context, by replacing those elements from the &lt;code&gt;web.xml&lt;/code&gt;, as follows:</source>
          <target state="translated">春のバニラの使用状況 &lt;code&gt;DispatcherServlet&lt;/code&gt; と春のセキュリティは、それ以上の変更を必要としないはずです。アプリケーションに他の機能がある場合（たとえば、他のサーブレットまたはフィルターを使用する場合）、次のように、 &lt;code&gt;web.xml&lt;/code&gt; からそれらの要素を置き換えることにより、 &lt;code&gt;Application&lt;/code&gt; コンテキストにいくつかの構成を追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="19de69cb601f53a4ea7af22a65c71ae63251365c" translate="yes" xml:space="preserve">
          <source>Variable</source>
          <target state="translated">Variable</target>
        </trans-unit>
        <trans-unit id="c45b3fd7fe4a4703a29c4492ea7d84ad8c01c61d" translate="yes" xml:space="preserve">
          <source>Various memory and buffer pools</source>
          <target state="translated">各種メモリやバッファプール</target>
        </trans-unit>
        <trans-unit id="dabaca3b4ceaad3d31dd698c6b5374e716ac1569" translate="yes" xml:space="preserve">
          <source>Various properties can be specified inside your &lt;code&gt;application.properties&lt;/code&gt; file, inside your &lt;code&gt;application.yml&lt;/code&gt; file, or as command line switches. This appendix provides a list of common Spring Boot properties and references to the underlying classes that consume them.</source>
          <target state="translated">さまざまなプロパティは、 &lt;code&gt;application.properties&lt;/code&gt; ファイル内、 &lt;code&gt;application.yml&lt;/code&gt; ファイル内、またはコマンドラインスイッチとして指定できます。この付録では、一般的なSpring Bootプロパティのリストと、それらを使用する基礎となるクラスへの参照を提供します。</target>
        </trans-unit>
        <trans-unit id="a0ae8193e40c48a491aa4ece64504fc8813d8220" translate="yes" xml:space="preserve">
          <source>Vendor-specific XA properties.</source>
          <target state="translated">ベンダー固有の XA プロパティ。</target>
        </trans-unit>
        <trans-unit id="7336f5e8e4a8c57a46c9a84737f88b668082ce60" translate="yes" xml:space="preserve">
          <source>Vendor-specific implementation of XAConnectionFactory.</source>
          <target state="translated">XAConnectionFactoryのベンダ固有の実装。</target>
        </trans-unit>
        <trans-unit id="2da600bf9404843107a9531694f654e5662959e0" translate="yes" xml:space="preserve">
          <source>Version</source>
          <target state="translated">Version</target>
        </trans-unit>
        <trans-unit id="c7cc2d9f24d44f4638005d50a9d3b8a9f0fc1b76" translate="yes" xml:space="preserve">
          <source>Version Property</source>
          <target state="translated">バージョンプロパティ</target>
        </trans-unit>
        <trans-unit id="5d6499cf207a0a1ad787a9cdfd2b6b01be3763ec" translate="yes" xml:space="preserve">
          <source>Version of Mongo to use.</source>
          <target state="translated">使用するMongoのバージョン。</target>
        </trans-unit>
        <trans-unit id="d8ad7e93c3e103c0b3e7b5745bba0f48b273c1c8" translate="yes" xml:space="preserve">
          <source>Version string to use for the fixed Version Strategy.</source>
          <target state="translated">固定バージョン戦略に使用するバージョン文字列。</target>
        </trans-unit>
        <trans-unit id="4b8c133b523eddc0c120c704c7a63ef0f4e05d8c" translate="yes" xml:space="preserve">
          <source>Version to tag an existing schema with when executing baseline.</source>
          <target state="translated">ベースラインを実行する際に、既存のスキーマにタグを付けるバージョン。</target>
        </trans-unit>
        <trans-unit id="62686b404a96eed41f5d9ffc47990e083f7cab9d" translate="yes" xml:space="preserve">
          <source>View names that can be resolved.</source>
          <target state="translated">解決できる名前を表示します。</target>
        </trans-unit>
        <trans-unit id="5a0d7820f11354ca3b4e25830607cff2d234ab6a" translate="yes" xml:space="preserve">
          <source>Virtual host to use when connecting to the broker.</source>
          <target state="translated">ブローカーに接続する際に使用するバーチャルホスト。</target>
        </trans-unit>
        <trans-unit id="99439b047d496d85e6b4b582033610cf3c351f4a" translate="yes" xml:space="preserve">
          <source>Wavefront</source>
          <target state="translated">Wavefront</target>
        </trans-unit>
        <trans-unit id="7b8203979ab39e3aa4094aa46945cf0ecc18185d" translate="yes" xml:space="preserve">
          <source>Wavefront registry pushes metrics to &lt;a href=&quot;https://micrometer.io/docs/registry/wavefront&quot;&gt;Wavefront&lt;/a&gt; periodically. If you are exporting metrics to &lt;a href=&quot;https://www.wavefront.com/&quot;&gt;Wavefront&lt;/a&gt; directly, your API token must be provided:</source>
          <target state="translated">Wavefrontレジストリは、メトリックを定期的に&lt;a href=&quot;https://micrometer.io/docs/registry/wavefront&quot;&gt;Wavefrontに&lt;/a&gt;プッシュします。メトリックを&lt;a href=&quot;https://www.wavefront.com/&quot;&gt;Wavefrontに&lt;/a&gt;直接エクスポートする場合は、APIトークンを提供する必要があります。</target>
        </trans-unit>
        <trans-unit id="3d652ef0512f495d5a12247d68df1db16c75f028" translate="yes" xml:space="preserve">
          <source>We also provide a &lt;code&gt;spring-boot-starter-data-redis-reactive&lt;/code&gt; &amp;ldquo;Starter&amp;rdquo; for consistency with the other stores with reactive support.</source>
          <target state="translated">また、リアクティブサポートを備えた他のストアとの一貫 &lt;code&gt;spring-boot-starter-data-redis-reactive&lt;/code&gt; ために、spring-boot-starter-data-redis-reactive「スターター」も提供しています。</target>
        </trans-unit>
        <trans-unit id="f88696762e132d073e24da12027a56e55350cd16" translate="yes" xml:space="preserve">
          <source>We are also more than happy to extend this section. If you want to add a &amp;lsquo;how-to&amp;rsquo;, send us a &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0&quot;&gt;pull request&lt;/a&gt;.</source>
          <target state="translated">また、このセクションを拡張できることをうれしく思います。「ハウツー」を追加したい場合は、&lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0&quot;&gt;プルリクエストを&lt;/a&gt;送信してください。</target>
        </trans-unit>
        <trans-unit id="e724a60e5e7c734b3ef58ad90e820f316d664bf0" translate="yes" xml:space="preserve">
          <source>We can also update the state of the application, when the application breaks and cannot recover:</source>
          <target state="translated">また、アプリが壊れて復旧できなくなった時の状態を更新することもできます。</target>
        </trans-unit>
        <trans-unit id="4eb2b6d392d2ce78486b990b80c2fa5cc112e7e1" translate="yes" xml:space="preserve">
          <source>We do not go into too many details of JPA or &lt;a href=&quot;https://spring.io/projects/spring-data&quot;&gt;Spring Data&lt;/a&gt; here. You can follow the &lt;a href=&quot;https://spring.io/guides/gs/accessing-data-jpa/&quot;&gt;&amp;ldquo;Accessing Data with JPA&amp;rdquo;&lt;/a&gt; guide from &lt;a href=&quot;https://spring.io&quot;&gt;spring.io&lt;/a&gt; and read the &lt;a href=&quot;https://spring.io/projects/spring-data-jpa&quot;&gt;Spring Data JPA&lt;/a&gt; and &lt;a href=&quot;https://hibernate.org/orm/documentation/&quot;&gt;Hibernate&lt;/a&gt; reference documentation.</source>
          <target state="translated">私たちは、JPAまたはあまりにも多くの詳細には触れません&lt;a href=&quot;https://spring.io/projects/spring-data&quot;&gt;春データ&lt;/a&gt;ここに。&lt;a href=&quot;https://spring.io&quot;&gt;spring.io&lt;/a&gt;の&lt;a href=&quot;https://spring.io/guides/gs/accessing-data-jpa/&quot;&gt;「AccessingDatawith JPA」&lt;/a&gt;ガイドに従い、&lt;a href=&quot;https://spring.io/projects/spring-data-jpa&quot;&gt;Spring &lt;/a&gt;DataJPAおよび&lt;a href=&quot;https://hibernate.org/orm/documentation/&quot;&gt;Hibernate&lt;/a&gt;リファレンスドキュメントを読むことができます。</target>
        </trans-unit>
        <trans-unit id="896ae35827d0a402f2cd54cdb750b361ff3ff8f3" translate="yes" xml:space="preserve">
          <source>We finish our example by creating a completely self-contained executable jar file that we could run in production. Executable jars (sometimes called &amp;ldquo;fat jars&amp;rdquo;) are archives containing your compiled classes along with all of the jar dependencies that your code needs to run.</source>
          <target state="translated">本番環境で実行できる完全に自己完結型の実行可能jarファイルを作成して、例を終了します。実行可能jar（「ファットjar」と呼ばれることもあります）は、コンパイルされたクラスと、コードの実行に必要なすべてのjar依存関係を含むアーカイブです。</target>
        </trans-unit>
        <trans-unit id="ee9382bd1b18298c6b5b6d6a90b1d63af92bf674" translate="yes" xml:space="preserve">
          <source>We generally find these common libraries to be useful when writing tests. If these libraries do not suit your needs, you can add additional test dependencies of your own.</source>
          <target state="translated">一般的に、これらの一般的なライブラリはテストを書くときに便利です。これらのライブラリがあなたのニーズに合わない場合は、独自のテスト依存関係を追加することができます。</target>
        </trans-unit>
        <trans-unit id="eef3ce5d157a92206dd1a82d57a9fbaeb9f414da" translate="yes" xml:space="preserve">
          <source>We generally recommend that you locate your main application class in a root package above other classes. The &lt;a href=&quot;#using-boot-using-springbootapplication-annotation&quot;&gt;&lt;code&gt;@SpringBootApplication&lt;/code&gt; annotation&lt;/a&gt; is often placed on your main class, and it implicitly defines a base &amp;ldquo;search package&amp;rdquo; for certain items. For example, if you are writing a JPA application, the package of the &lt;code&gt;@SpringBootApplication&lt;/code&gt; annotated class is used to search for &lt;code&gt;@Entity&lt;/code&gt; items. Using a root package also allows component scan to apply only on your project.</source>
          <target state="translated">通常、メインアプリケーションクラスは、他のクラスの上にあるルートパッケージに配置することをお勧めします。&lt;a href=&quot;#using-boot-using-springbootapplication-annotation&quot;&gt; &lt;code&gt;@SpringBootApplication&lt;/code&gt; の注釈は&lt;/a&gt;、多くの場合、自分のメインクラスに配置され、それが暗黙のうち、特定のアイテムの基本「の検索パッケージ」を定義します。たとえば、JPAアプリケーションを作成している場合、 &lt;code&gt;@SpringBootApplication&lt;/code&gt; アノテーション付きクラスのパッケージを使用して &lt;code&gt;@Entity&lt;/code&gt; アイテムを検索します。ルートパッケージを使用すると、コンポーネントスキャンをプロジェクトにのみ適用することもできます。</target>
        </trans-unit>
        <trans-unit id="8f7ba2747a31b1716c6a12ce63801ca69c7d1c08" translate="yes" xml:space="preserve">
          <source>We have barely scratched the surface of Spring Data JPA. For complete details, see the &lt;a href=&quot;https://docs.spring.io/spring-data/jdbc/docs/2.1.1/reference/html/&quot;&gt;Spring Data JPA reference documentation&lt;/a&gt;.</source>
          <target state="translated">Spring DataJPAの表面をほとんど傷つけていません。詳細については、&lt;a href=&quot;https://docs.spring.io/spring-data/jdbc/docs/2.1.1/reference/html/&quot;&gt;Spring DataJPAリファレンスドキュメントを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="d3303b780f5bb3e3ce842dec5c5ca3ef218abf62" translate="yes" xml:space="preserve">
          <source>We have barely scratched the surface of Spring Data R2DBC. For complete details, see the &lt;a href=&quot;https://docs.spring.io/spring-data/r2dbc/docs/1.2.1/reference/html/&quot;&gt;Spring Data R2DBC reference documentation&lt;/a&gt;.</source>
          <target state="translated">Spring DataR2DBCの表面をほとんど傷つけていません。詳細については、&lt;a href=&quot;https://docs.spring.io/spring-data/r2dbc/docs/1.2.1/reference/html/&quot;&gt;Spring DataR2DBCリファレンスドキュメントを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="d0aa75e3e651c71b29cde84f8a321c4446f63cdd" translate="yes" xml:space="preserve">
          <source>We need to start by creating a Maven &lt;code&gt;pom.xml&lt;/code&gt; file. The &lt;code&gt;pom.xml&lt;/code&gt; is the recipe that is used to build your project. Open your favorite text editor and add the following:</source>
          <target state="translated">まず、 &lt;code&gt;pom.xml&lt;/code&gt; ファイルを作成する必要があります。 &lt;code&gt;pom.xml&lt;/code&gt; はプロジェクトをビルドするために使用されているレシピです。お気に入りのテキストエディタを開き、以下を追加します。</target>
        </trans-unit>
        <trans-unit id="7f6b7a55dee80393e8ef62788549610380c3c5df" translate="yes" xml:space="preserve">
          <source>We prefer &lt;a href=&quot;https://github.com/brettwooldridge/HikariCP&quot;&gt;HikariCP&lt;/a&gt; for its performance and concurrency. If HikariCP is available, we always choose it.</source>
          <target state="translated">パフォーマンスと並行性のために&lt;a href=&quot;https://github.com/brettwooldridge/HikariCP&quot;&gt;HikariCP&lt;/a&gt;を好みます。HikariCPが利用できる場合は、常にそれを選択します。</target>
        </trans-unit>
        <trans-unit id="b957d7f968f6faf774c21a0db86d96417f27eff0" translate="yes" xml:space="preserve">
          <source>We recommend disabling CSRF protection completely only if you are creating a service that is used by non-browser clients.</source>
          <target state="translated">ブラウザ以外のクライアントが使用するサービスを作成する場合にのみ、CSRF保護を完全に無効にすることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="d5d6ccc488e731bf91014a67330776445ca1c3d3" translate="yes" xml:space="preserve">
          <source>We recommend that &lt;code&gt;@ConfigurationProperties&lt;/code&gt; only deal with the environment and, in particular, does not inject other beans from the context. For corner cases, setter injection can be used or any of the &lt;code&gt;*Aware&lt;/code&gt; interfaces provided by the framework (such as &lt;code&gt;EnvironmentAware&lt;/code&gt; if you need access to the &lt;code&gt;Environment&lt;/code&gt;). If you still want to inject other beans using the constructor, the configuration properties bean must be annotated with &lt;code&gt;@Component&lt;/code&gt; and use JavaBean-based property binding.</source>
          <target state="translated">&lt;code&gt;@ConfigurationProperties&lt;/code&gt; は環境のみを処理し、特にコンテキストから他のBeanを注入しないことをお勧めします。コーナーケースでは、セッターインジェクションを使用するか、フレームワークによって提供される &lt;code&gt;*Aware&lt;/code&gt; インターフェイス（ &lt;code&gt;EnvironmentAware&lt;/code&gt; アクセスする必要がある場合は &lt;code&gt;Environment&lt;/code&gt; Awareなど）を使用できます。それでもコンストラクタを使用して他のBeanを注入する場合は、構成プロパティBeanに &lt;code&gt;@Component&lt;/code&gt; アノテーションを付け、JavaBeanベースのプロパティバインディングを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="8899f2fed29479c34cbcde701c53c6fbe76558f3" translate="yes" xml:space="preserve">
          <source>We recommend that you don&amp;rsquo;t mix profile-specific YAML files and multiple YAML documents. Stick to using only one of them.</source>
          <target state="translated">プロファイル固有のYAMLファイルと複数のYAMLドキュメントを混在させないことをお勧めします。それらの1つだけを使用することに固執します。</target>
        </trans-unit>
        <trans-unit id="9b70097ec59569eca3c44682fc7f1b365ffb0d4c" translate="yes" xml:space="preserve">
          <source>We recommend that you follow Java&amp;rsquo;s recommended package naming conventions and use a reversed domain name (for example, &lt;code&gt;com.example.project&lt;/code&gt;).</source>
          <target state="translated">Javaが推奨するパッケージの命名規則に従い、逆のドメイン名（ &lt;code&gt;com.example.project&lt;/code&gt; など）を使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="e234b874facaa6dcf97f02c0b58d3b2c75bea799" translate="yes" xml:space="preserve">
          <source>We recommend that you use an &lt;code&gt;Enum&lt;/code&gt; for those two values instead. If your IDE supports it, this is by far the most effective approach to auto-completion.</source>
          <target state="translated">代わりに、これら2つの値に &lt;code&gt;Enum&lt;/code&gt; を使用することをお勧めします。IDEがそれをサポートしている場合、これはオートコンプリートへの最も効果的なアプローチです。</target>
        </trans-unit>
        <trans-unit id="c817a2952b904c087a49ee2dcdfc50519070efca" translate="yes" xml:space="preserve">
          <source>We recommend that, when possible, properties are stored in lower-case kebab format, such as &lt;code&gt;my.property-name=acme&lt;/code&gt;.</source>
          <target state="translated">可能であれば、プロパティを &lt;code&gt;my.property-name=acme&lt;/code&gt; などの小文字のケバブ形式で保存することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="a8323a2a9b34ae7e0cbe8181ebcfe45bf2c5f3aa" translate="yes" xml:space="preserve">
          <source>Web</source>
          <target state="translated">Web</target>
        </trans-unit>
        <trans-unit id="f99c160590a9ffce61c3d2227997931a937022c2" translate="yes" xml:space="preserve">
          <source>Web Application Conditions</source>
          <target state="translated">ウェブアプリケーションの条件</target>
        </trans-unit>
        <trans-unit id="b8d55e75dffe79e6c560076d706895d601ee8279" translate="yes" xml:space="preserve">
          <source>Web Endpoint Range Requests</source>
          <target state="translated">ウェブエンドポイントの範囲要求</target>
        </trans-unit>
        <trans-unit id="6fbee6b61a463a11a91017130d9f5345f6c3cc8e" translate="yes" xml:space="preserve">
          <source>Web Endpoint Request Predicates</source>
          <target state="translated">ウェブエンドポイント要求述語</target>
        </trans-unit>
        <trans-unit id="748647235bc5257e337ccceffc983d59943ea3b3" translate="yes" xml:space="preserve">
          <source>Web Endpoint Response Status</source>
          <target state="translated">ウェブエンドポイント応答ステータス</target>
        </trans-unit>
        <trans-unit id="5e8b05e01b9874942eeadc8735d913a867dc91a3" translate="yes" xml:space="preserve">
          <source>Web Endpoint Security</source>
          <target state="translated">ウェブエンドポイントセキュリティ</target>
        </trans-unit>
        <trans-unit id="ca04e0450b467d53b5e82364bc827d34a4af1e0b" translate="yes" xml:space="preserve">
          <source>Web Filter</source>
          <target state="translated">ウェブフィルタ</target>
        </trans-unit>
        <trans-unit id="619f84c1657ff482222e4b665ae0d3864a0b40b5" translate="yes" xml:space="preserve">
          <source>WebFlux and MVC end-to-end testing</source>
          <target state="translated">WebFluxとMVCのエンドツーエンドテスト</target>
        </trans-unit>
        <trans-unit id="c15bdace14e18785727454d67379714557de1e29" translate="yes" xml:space="preserve">
          <source>WebFlux integration tests</source>
          <target state="translated">WebFlux の統合テスト</target>
        </trans-unit>
        <trans-unit id="b4710ac6f7c8df7dd715e0ed9cdad5af24d5b60e" translate="yes" xml:space="preserve">
          <source>WebFlux is part of the Spring Framework and detailed information is available in its &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/web-reactive.html#webflux-fn&quot;&gt;reference documentation&lt;/a&gt;.</source>
          <target state="translated">WebFluxはSpringFrameworkの一部であり、詳細情報はその&lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/web-reactive.html#webflux-fn&quot;&gt;リファレンスドキュメントで&lt;/a&gt;入手できます。</target>
        </trans-unit>
        <trans-unit id="24dcab53ee6c1cabc2dea7cdc32bc91ef200bd6f" translate="yes" xml:space="preserve">
          <source>WebSocket RSocket server uri to connect to.</source>
          <target state="translated">接続先のWebSocket RSocketサーバのURI。</target>
        </trans-unit>
        <trans-unit id="d9465cfbbb0e0efce12171008ba13b3e41807416" translate="yes" xml:space="preserve">
          <source>WebSocket support is also available for &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/web-reactive.html#webflux-websocket&quot;&gt;reactive web applications&lt;/a&gt; and requires to include the WebSocket API alongside &lt;code&gt;spring-boot-starter-webflux&lt;/code&gt;:</source>
          <target state="translated">WebSocketサポートは&lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/web-reactive.html#webflux-websocket&quot;&gt;リアクティブWebアプリケーションで&lt;/a&gt;も利用可能であり、 &lt;code&gt;spring-boot-starter-webflux&lt;/code&gt; と一緒にWebSocketAPIを含める必要があります。</target>
        </trans-unit>
        <trans-unit id="08a2e2f5be9a856ad9b156db19e32f1fc14b6332" translate="yes" xml:space="preserve">
          <source>Well-known FreeMarker keys which are passed to FreeMarker's Configuration.</source>
          <target state="translated">FreeMarkerの設定に渡されるよく知られたFreeMarkerキー。</target>
        </trans-unit>
        <trans-unit id="e77c28b7aa56a4f5276e436761a44f9a751c1922" translate="yes" xml:space="preserve">
          <source>What to do when there is no initial offset in Kafka or if the current offset no longer exists on the server.</source>
          <target state="translated">Kafka に初期オフセットがない場合や、現在のオフセットがサーバ上に存在しなくなった場合の対処法。</target>
        </trans-unit>
        <trans-unit id="3e35a27aaf4de3289456a70a97ee911483f12087" translate="yes" xml:space="preserve">
          <source>What&amp;rsquo;s in a name</source>
          <target state="translated">名前って何</target>
        </trans-unit>
        <trans-unit id="79419526a7d7ca60a75ad36fe038a3ac56b41185" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;https://activemq.apache.org/&quot;&gt;ActiveMQ&lt;/a&gt; is available on the classpath, Spring Boot can also configure a &lt;code&gt;ConnectionFactory&lt;/code&gt;. If the broker is present, an embedded broker is automatically started and configured (provided no broker URL is specified through configuration).</source>
          <target state="translated">&lt;a href=&quot;https://activemq.apache.org/&quot;&gt;ActiveMQ&lt;/a&gt;がクラスパスで使用可能な場合、SpringBootは &lt;code&gt;ConnectionFactory&lt;/code&gt; を構成することもできます。ブローカーが存在する場合、組み込みブローカーが自動的に開始および構成されます（構成でブローカーURLが指定されていない場合）。</target>
        </trans-unit>
        <trans-unit id="25128af6d0b28c714a72aba63740947dee6fb537" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;@EnableCaching&lt;/code&gt; is present in your configuration, a suitable cache configuration is expected as well. If you need to disable caching altogether in certain environments, force the cache type to &lt;code&gt;none&lt;/code&gt; to use a no-op implementation, as shown in the following example:</source>
          <target state="translated">構成に &lt;code&gt;@EnableCaching&lt;/code&gt; が存在する場合、適切なキャッシュ構成も必要です。次の例に示すように、特定の環境でキャッシュを完全に無効にする必要がある場合は、キャッシュタイプを &lt;code&gt;none&lt;/code&gt; に強制して、no-op実装を使用します。</target>
        </trans-unit>
        <trans-unit id="97bf78f883e0fd07909909d8283aa3e497ad8f23" translate="yes" xml:space="preserve">
          <source>When Kubernetes deletes an application instance, the shutdown process involves several subsystems concurrently: shutdown hooks, unregistering the service, removing the instance from the load-balancer&amp;hellip;​ Because this shutdown processing happens in parallel (and due to the nature of distributed systems), there is a window during which traffic can be routed to a pod that has also begun its shutdown processing.</source>
          <target state="translated">Kubernetesがアプリケーションインスタンスを削除すると、シャットダウンプロセスには複数のサブシステムが同時に含まれます：シャットダウンフック、サービスの登録解除、ロードバランサーからのインスタンスの削除&amp;hellip;このシャットダウン処理は並行して行われるため（分散システムの性質上）、シャットダウン処理も開始したポッドにトラフィックをルーティングできるウィンドウがあります。</target>
        </trans-unit>
        <trans-unit id="9d682075a87932e85e000a6c9da2e9064e60edc0" translate="yes" xml:space="preserve">
          <source>When Micrometer&amp;rsquo;s &lt;code&gt;micrometer-jersey2&lt;/code&gt; module is on the classpath, auto-configuration enables the instrumentation of requests handled by the Jersey JAX-RS implementation. When &lt;code&gt;management.metrics.web.server.request.autotime.enabled&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, this instrumentation occurs for all requests. Alternatively, when set to &lt;code&gt;false&lt;/code&gt;, you can enable instrumentation by adding &lt;code&gt;@Timed&lt;/code&gt; to a request-handling method:</source>
          <target state="translated">Micrometerの &lt;code&gt;micrometer-jersey2&lt;/code&gt; モジュールがクラスパス上にある場合、自動構成により、JerseyJAX -RS実装によって処理される要求のインストルメンテーションが有効になります。とき &lt;code&gt;management.metrics.web.server.request.autotime.enabled&lt;/code&gt; がある &lt;code&gt;true&lt;/code&gt; 、この機器は、すべての要求のために発生します。または、 &lt;code&gt;false&lt;/code&gt; に設定すると、リクエスト処理メソッドに &lt;code&gt;@Timed&lt;/code&gt; を追加してインストルメンテーションを有効にできます。</target>
        </trans-unit>
        <trans-unit id="c805b3a7f1ca35978d14d39e1fbd70b95dc11157" translate="yes" xml:space="preserve">
          <source>When Reactor Netty is on the classpath a Reactor Netty-based &lt;code&gt;WebClient&lt;/code&gt; is auto-configured. To customize the client&amp;rsquo;s handling of network connections, provide a &lt;code&gt;ClientHttpConnector&lt;/code&gt; bean. The following example configures a 60 second connect timeout and adds a &lt;code&gt;ReadTimeoutHandler&lt;/code&gt;:</source>
          <target state="translated">Reactor Nettyがクラスパス上にある場合、ReactorNettyベースの &lt;code&gt;WebClient&lt;/code&gt; が自動構成されます。クライアントのネットワーク接続の処理をカスタマイズするには、 &lt;code&gt;ClientHttpConnector&lt;/code&gt; Beanを提供します。次の例では、60秒の接続タイムアウトを構成し、 &lt;code&gt;ReadTimeoutHandler&lt;/code&gt; を追加します。</target>
        </trans-unit>
        <trans-unit id="cb98d494ebb8bb01c49e4e827d3219e838ad1c48" translate="yes" xml:space="preserve">
          <source>When a &lt;code&gt;ConnectionFactory&lt;/code&gt; bean is available, the regular JDBC &lt;code&gt;DataSource&lt;/code&gt; auto-configuration backs off. If you want to retain the JDBC &lt;code&gt;DataSource&lt;/code&gt; auto-configuration, and are comfortable with the risk of using the blocking JDBC API in a reactive application, add &lt;code&gt;@Import(DataSourceAutoConfiguration.class)&lt;/code&gt; on a &lt;code&gt;@Configuration&lt;/code&gt; class in your application to re-enable it.</source>
          <target state="translated">とき &lt;code&gt;ConnectionFactory&lt;/code&gt; Beanが使用可能で、通常のJDBC &lt;code&gt;DataSource&lt;/code&gt; 自動設定をオフにバックアップします。JDBC &lt;code&gt;DataSource&lt;/code&gt; 自動構成を保持する必要があり、リアクティブアプリケーションでブロッキングJDBC APIを使用するリスクに満足している場合は、アプリケーションの &lt;code&gt;@Configuration&lt;/code&gt; クラスに &lt;code&gt;@Import(DataSourceAutoConfiguration.class)&lt;/code&gt; を追加して再度有効にします。 。</target>
        </trans-unit>
        <trans-unit id="69f3ac1bd16a1c2c06e4d7529b8fa9d384dbcccd" translate="yes" xml:space="preserve">
          <source>When a &lt;code&gt;List&lt;/code&gt; is specified in multiple profiles, the one with the highest priority (and only that one) is used. Consider the following example:</source>
          <target state="translated">&lt;code&gt;List&lt;/code&gt; が複数のプロファイルで指定されている場合、優先度が最も高いもの（およびその1つのみ）が使用されます。次の例を考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="5b9005d9ac77f6aba678a9c94e57a184f3061e43" translate="yes" xml:space="preserve">
          <source>When a &lt;code&gt;jndi-name&lt;/code&gt; is set, it takes precedence over all other Session-related settings.</source>
          <target state="translated">&lt;code&gt;jndi-name&lt;/code&gt; が設定されている場合、他のすべてのセッション関連の設定よりも優先されます。</target>
        </trans-unit>
        <trans-unit id="ec4d23f0792064325151a6612c2bfed0dcc21e53" translate="yes" xml:space="preserve">
          <source>When a JTA environment is detected, Spring&amp;rsquo;s &lt;code&gt;JtaTransactionManager&lt;/code&gt; is used to manage transactions. Auto-configured JMS, DataSource, and JPA beans are upgraded to support XA transactions. You can use standard Spring idioms, such as &lt;code&gt;@Transactional&lt;/code&gt;, to participate in a distributed transaction. If you are within a JTA environment and still want to use local transactions, you can set the &lt;code&gt;spring.jta.enabled&lt;/code&gt; property to &lt;code&gt;false&lt;/code&gt; to disable the JTA auto-configuration.</source>
          <target state="translated">JTA環境が検出されると、Springの &lt;code&gt;JtaTransactionManager&lt;/code&gt; を使用してトランザクションが管理されます。自動構成されたJMS、DataSource、およびJPA Beanは、XAトランザクションをサポートするようにアップグレードされます。 &lt;code&gt;@Transactional&lt;/code&gt; などの標準のSpringイディオムを使用して、分散トランザクションに参加できます。JTA環境内にいて、引き続きローカルトランザクションを使用する場合は、 &lt;code&gt;spring.jta.enabled&lt;/code&gt; プロパティを &lt;code&gt;false&lt;/code&gt; に設定して、JTAの自動構成を無効にすることができます。</target>
        </trans-unit>
        <trans-unit id="656c1b2f3320fa923139cd52fa74c681b01b7233" translate="yes" xml:space="preserve">
          <source>When a Spring Boot application shuts down:</source>
          <target state="translated">Spring Bootアプリケーションがシャットダウンすると</target>
        </trans-unit>
        <trans-unit id="f4151bdd995a909369d2797a22a1caf9cbe97f1c" translate="yes" xml:space="preserve">
          <source>When a Spring Boot application starts:</source>
          <target state="translated">Spring Bootアプリケーションが起動したら</target>
        </trans-unit>
        <trans-unit id="8591308ddf541353363b8793e001146bb2b004b9" translate="yes" xml:space="preserve">
          <source>When a cache library offers both a native implementation and JSR-107 support, Spring Boot prefers the JSR-107 support, so that the same features are available if you switch to a different JSR-107 implementation.</source>
          <target state="translated">キャッシュライブラリがネイティブ実装と JSR-107 サポートの両方を提供している場合、Spring Boot は JSR-107 サポートを優先し、異なる JSR-107 実装に切り替えても同じ機能が利用できるようにします。</target>
        </trans-unit>
        <trans-unit id="aa226405d623680cb0bfa35ceb198b67321baacd" translate="yes" xml:space="preserve">
          <source>When a class does not include a &lt;code&gt;package&lt;/code&gt; declaration, it is considered to be in the &amp;ldquo;default package&amp;rdquo;. The use of the &amp;ldquo;default package&amp;rdquo; is generally discouraged and should be avoided. It can cause particular problems for Spring Boot applications that use the &lt;code&gt;@ComponentScan&lt;/code&gt;, &lt;code&gt;@ConfigurationPropertiesScan&lt;/code&gt;, &lt;code&gt;@EntityScan&lt;/code&gt;, or &lt;code&gt;@SpringBootApplication&lt;/code&gt; annotations, since every class from every jar is read.</source>
          <target state="translated">クラスに &lt;code&gt;package&lt;/code&gt; 宣言が含まれていない場合、そのクラスは「デフォルトパッケージ」に含まれていると見なされます。 「デフォルトパッケージ」の使用は一般的に推奨されておらず、避ける必要があります。すべてのjarのすべてのクラスが読み取られるため、 &lt;code&gt;@ComponentScan&lt;/code&gt; 、 &lt;code&gt;@ConfigurationPropertiesScan&lt;/code&gt; 、 &lt;code&gt;@EntityScan&lt;/code&gt; 、または &lt;code&gt;@SpringBootApplication&lt;/code&gt; アノテーションを使用するSpringBootアプリケーションで特定の問題が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="edb4a506ecc15380a2e39a7856f810a63c005bb1" translate="yes" xml:space="preserve">
          <source>When a custom management context path is configured, the &amp;ldquo;discovery page&amp;rdquo; automatically moves from &lt;code&gt;/actuator&lt;/code&gt; to the root of the management context. For example, if the management context path is &lt;code&gt;/management&lt;/code&gt;, then the discovery page is available from &lt;code&gt;/management&lt;/code&gt;. When the management context path is set to &lt;code&gt;/&lt;/code&gt;, the discovery page is disabled to prevent the possibility of a clash with other mappings.</source>
          <target state="translated">カスタム管理コンテキストパスが構成されている場合、「検出ページ」は &lt;code&gt;/actuator&lt;/code&gt; から管理コンテキストのルートに自動的に移動します。たとえば、管理コンテキストパスが &lt;code&gt;/management&lt;/code&gt; の場合、検出ページは &lt;code&gt;/management&lt;/code&gt; から利用できます。管理コンテキストパスが &lt;code&gt;/&lt;/code&gt; に設定されている場合、他のマッピングとの衝突の可能性を防ぐために、検出ページは無効になります。</target>
        </trans-unit>
        <trans-unit id="f94f0e713b0836b77ca89b89f676eee04b6ed838" translate="yes" xml:space="preserve">
          <source>When auto-configuring a Reactor Netty or Jetty server, Spring Boot will create specific beans that will provide HTTP resources to the server instance: &lt;code&gt;ReactorResourceFactory&lt;/code&gt; or &lt;code&gt;JettyResourceFactory&lt;/code&gt;.</source>
          <target state="translated">Reactor NettyまたはJettyサーバーを自動構成する場合、Spring Bootは、サーバーインスタンスにHTTPリソースを提供する特定のBean（ &lt;code&gt;ReactorResourceFactory&lt;/code&gt; または &lt;code&gt;JettyResourceFactory&lt;/code&gt; )を作成します。</target>
        </trans-unit>
        <trans-unit id="f2061a6bf84a5cee4b249d64373f234f77cbbc4a" translate="yes" xml:space="preserve">
          <source>When binding to &lt;code&gt;Map&lt;/code&gt; properties, if the &lt;code&gt;key&lt;/code&gt; contains anything other than lowercase alpha-numeric characters or &lt;code&gt;-&lt;/code&gt;, you need to use the bracket notation so that the original value is preserved. If the key is not surrounded by &lt;code&gt;[]&lt;/code&gt;, any characters that are not alpha-numeric or &lt;code&gt;-&lt;/code&gt; are removed. For example, consider binding the following properties to a &lt;code&gt;Map&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;Map&lt;/code&gt; プロパティにバインドするときに、 &lt;code&gt;key&lt;/code&gt; に小文字の英数字または &lt;code&gt;-&lt;/code&gt; 以外のものが含まれている場合は、元の値が保持されるように角かっこ表記を使用する必要があります。キーが &lt;code&gt;[]&lt;/code&gt; で囲まれていない場合、英数字または &lt;code&gt;-&lt;/code&gt; 以外の文字はすべて削除されます。たとえば、次のプロパティを &lt;code&gt;Map&lt;/code&gt; バインドすることを検討してください。</target>
        </trans-unit>
        <trans-unit id="e13a02c40ccf20b569f41c9f8724d89d66fccad1" translate="yes" xml:space="preserve">
          <source>When building a reactive web application, the following stores can be auto-configured:</source>
          <target state="translated">リアクティブな Web アプリケーションを構築する際には、以下のストアを自動設定することができます。</target>
        </trans-unit>
        <trans-unit id="ca7edcd8884881532d1ff4b819b831bde7b3bc8a" translate="yes" xml:space="preserve">
          <source>When choosing this option, &lt;code&gt;org.springframework:spring-jdbc&lt;/code&gt; is still a required dependency.</source>
          <target state="translated">このオプションを選択する場合でも、 &lt;code&gt;org.springframework:spring-jdbc&lt;/code&gt; は必須の依存関係です。</target>
        </trans-unit>
        <trans-unit id="c080a4b752d08d9d297b7b608488194c8fd8df6d" translate="yes" xml:space="preserve">
          <source>When configured to use a custom port, the management server can also be configured with its own SSL by using the various &lt;code&gt;management.server.ssl.*&lt;/code&gt; properties. For example, doing so lets a management server be available over HTTP while the main application uses HTTPS, as shown in the following property settings:</source>
          <target state="translated">カスタムポートを使用するように構成されている場合、さまざまな &lt;code&gt;management.server.ssl.*&lt;/code&gt; プロパティを使用して、管理サーバーを独自のSSLで構成することもできます。たとえば、これを行うと、次のプロパティ設定に示すように、メインアプリケーションがHTTPSを使用している間、管理サーバーをHTTP経由で使用できるようになります。</target>
        </trans-unit>
        <trans-unit id="8a12ebadb197a1deedc48dd617ec32b711a18847" translate="yes" xml:space="preserve">
          <source>When declaring a &lt;code&gt;@Bean&lt;/code&gt; method, provide as much type information as possible in the method&amp;rsquo;s return type. For example, if your bean&amp;rsquo;s concrete class implements an interface the bean method&amp;rsquo;s return type should be the concrete class and not the interface. Providing as much type information as possible in &lt;code&gt;@Bean&lt;/code&gt; methods is particularly important when using bean conditions as their evaluation can only rely upon to type information that&amp;rsquo;s available in the method signature.</source>
          <target state="translated">&lt;code&gt;@Bean&lt;/code&gt; メソッドを宣言するときは、メソッドの戻り値の型でできるだけ多くの型情報を提供してください。たとえば、Beanの具象クラスがインターフェースを実装している場合、beanメソッドの戻り値の型はインターフェースではなく具象クラスである必要があります。 &lt;code&gt;@Bean&lt;/code&gt; メソッドで可能な限り多くの型情報を提供することは、Bean条件を使用する場合に特に重要です。これは、その評価がメソッドシグネチャで使用可能な型情報にのみ依存するためです。</target>
        </trans-unit>
        <trans-unit id="c1bbcc1f9da9220b9fa67db8ff9be6dec95fad2f" translate="yes" xml:space="preserve">
          <source>When deployed on platforms, applications can provide information about their availability to the platform using infrastructure such as &lt;a href=&quot;https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/&quot;&gt;Kubernetes Probes&lt;/a&gt;. Spring Boot includes out-of-the box support for the commonly used &amp;ldquo;liveness&amp;rdquo; and &amp;ldquo;readiness&amp;rdquo; availability states. If you are using Spring Boot&amp;rsquo;s &amp;ldquo;actuator&amp;rdquo; support then these states are exposed as health endpoint groups.</source>
          <target state="translated">プラットフォームにデプロイすると、アプリケーションは&lt;a href=&quot;https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/&quot;&gt;KubernetesProbes&lt;/a&gt;などのインフラストラクチャを使用してプラットフォームへの可用性に関する情報を提供できます。 Spring Bootには、一般的に使用される「活性」および「準備」の可用性状態に対するすぐに使用可能なサポートが含まれています。 Spring Bootの「アクチュエータ」サポートを使用している場合、これらの状態はヘルスエンドポイントグループとして公開されます。</target>
        </trans-unit>
        <trans-unit id="dd01b9708db5a2f5be6895819c19a82c5d8714f5" translate="yes" xml:space="preserve">
          <source>When deployed to a servlet container, Spring Boot uses its error page filter to forward a request with an error status to the appropriate error page. This is necessary as the Servlet specification does not provide an API for registering error pages. Depending on the container that you are deploying your war file to and the technologies that your application uses, some additional configuration may be required.</source>
          <target state="translated">サーブレットコンテナにデプロイすると、Spring Bootはエラーページフィルタを使用して、エラーステータスを持つリクエストを適切なエラーページに転送します。サーブレットの仕様ではエラーページを登録するためのAPIが提供されていないため、これは必要です。warファイルをデプロイするコンテナやアプリケーションが使用するテクノロジーによっては、追加の設定が必要になる場合があります。</target>
        </trans-unit>
        <trans-unit id="d4822eb22c6cabdf0212adef4166d5bb80a19298" translate="yes" xml:space="preserve">
          <source>When embedding the broker, you can choose if you want to enable persistence and list the destinations that should be made available. These can be specified as a comma-separated list to create them with the default options, or you can define bean(s) of type &lt;code&gt;org.apache.activemq.artemis.jms.server.config.JMSQueueConfiguration&lt;/code&gt; or &lt;code&gt;org.apache.activemq.artemis.jms.server.config.TopicConfiguration&lt;/code&gt;, for advanced queue and topic configurations, respectively.</source>
          <target state="translated">ブローカーを埋め込むときに、永続性を有効にするかどうかを選択し、使用可能にする必要がある宛先をリストすることができます。これらは、デフォルトのオプションで作成するためにコンマ区切りのリストとして指定できます &lt;code&gt;org.apache.activemq.artemis.jms.server.config.TopicConfiguration&lt;/code&gt; または、タイプ &lt;code&gt;org.apache.activemq.artemis.jms.server.config.JMSQueueConfiguration&lt;/code&gt; またはorg.apache.activemqのBeanを定義できます。 artemis.jms.server.config.TopicConfiguration、それぞれ高度なキュー構成とトピック構成用。</target>
        </trans-unit>
        <trans-unit id="ba49f040bbc37906f2970cea4939e6751ae69ccc" translate="yes" xml:space="preserve">
          <source>When executed as root, as is the case when root is being used to start an init.d service, the default executable script runs the application as the user specified in the &lt;code&gt;RUN_AS_USER&lt;/code&gt; environment variable. When the environment variable is not set, the user who owns the jar file is used instead. You should never run a Spring Boot application as &lt;code&gt;root&lt;/code&gt;, so &lt;code&gt;RUN_AS_USER&lt;/code&gt; should never be root and your application&amp;rsquo;s jar file should never be owned by root. Instead, create a specific user to run your application and set the &lt;code&gt;RUN_AS_USER&lt;/code&gt; environment variable or use &lt;code&gt;chown&lt;/code&gt; to make it the owner of the jar file, as shown in the following example:</source>
          <target state="translated">rootを使用してinit.dサービスを開始する場合のように、rootとして実行すると、デフォルトの実行可能スクリプトは、 &lt;code&gt;RUN_AS_USER&lt;/code&gt; 環境変数で指定されたユーザーとしてアプリケーションを実行します。環境変数が設定されていない場合は、jarファイルを所有しているユーザーが代わりに使用されます。 Spring Bootアプリケーションを &lt;code&gt;root&lt;/code&gt; として実行しないでください。したがって、 &lt;code&gt;RUN_AS_USER&lt;/code&gt; をrootにしたり、アプリケーションのjarファイルをrootが所有したりしないでください。代わりに、次の例に示すように、アプリケーションを実行する特定のユーザーを作成し、 &lt;code&gt;RUN_AS_USER&lt;/code&gt; 環境変数を設定するか、 &lt;code&gt;chown&lt;/code&gt; を使用してjarファイルの所有者にします。</target>
        </trans-unit>
        <trans-unit id="1db6534d2f7f3c406621529098d3e6efb0183091" translate="yes" xml:space="preserve">
          <source>When greater than zero, enables retrying of failed sends.</source>
          <target state="translated">0より大きい場合、失敗した送信の再試行を有効にします。</target>
        </trans-unit>
        <trans-unit id="5e23446bdce689fc3ca0110fb61c992a6caa4e3b" translate="yes" xml:space="preserve">
          <source>When lists are configured in more than one place, overriding works by replacing the entire list.</source>
          <target state="translated">リストが複数の場所に設定されている場合、リスト全体を置き換えることでオーバーライドが機能します。</target>
        </trans-unit>
        <trans-unit id="e0c3d5135d714f4d1ed3cf1f532f44f24a7db81c" translate="yes" xml:space="preserve">
          <source>When loading resources dynamically with, for example, a JavaScript module loader, renaming files is not an option. That is why other strategies are also supported and can be combined. A &quot;fixed&quot; strategy adds a static version string in the URL without changing the file name, as shown in the following example:</source>
          <target state="translated">例えば、JavaScript モジュールローダなどでリソースを動的に読み込む場合、ファイル名の変更はオプションではありません。そのため、他のストラテジーもサポートされており、組み合わせることができます。固定」ストラテジーは、次の例のように、ファイル名を変更せずに静的なバージョン文字列を URL に追加します。</target>
        </trans-unit>
        <trans-unit id="2e1d54fd7b3594775e07fd6d15881fe1500d50cd" translate="yes" xml:space="preserve">
          <source>When multiple locations are specified, the later ones can override the values of earlier ones.</source>
          <target state="translated">複数の場所を指定した場合、後から指定した場所は前から指定した場所の値を上書きすることができます。</target>
        </trans-unit>
        <trans-unit id="331838622353ab9e1cb097584684b93cada12542" translate="yes" xml:space="preserve">
          <source>When non empty, enables transaction support for producer.</source>
          <target state="translated">空でない場合、プロデューサーのトランザクションサポートを有効にします。</target>
        </trans-unit>
        <trans-unit id="3d58543b81705f91a71431d5a583246e37214478" translate="yes" xml:space="preserve">
          <source>When only basic SQL scripts are used, Spring Boot automatically creates the schema of an embedded &lt;code&gt;DataSource&lt;/code&gt;. This behavior can be customized by using the &lt;code&gt;spring.datasource.initialization-mode&lt;/code&gt; property. For instance, if you want to always initialize the &lt;code&gt;DataSource&lt;/code&gt; regardless of its type:</source>
          <target state="translated">基本的なSQLスクリプトのみを使用する場合、SpringBootは埋め込みデータ &lt;code&gt;DataSource&lt;/code&gt; スキーマを自動的に作成します。この動作は、 &lt;code&gt;spring.datasource.initialization-mode&lt;/code&gt; プロパティを使用してカスタマイズできます。たとえば、タイプに関係なく常にデータ &lt;code&gt;DataSource&lt;/code&gt; 初期化する場合は、次のようにします。</target>
        </trans-unit>
        <trans-unit id="c4f051365abb15e406ec92c585a98efdf8a0025e" translate="yes" xml:space="preserve">
          <source>When placed on a &lt;code&gt;@Bean&lt;/code&gt; method, the target type defaults to the return type of the method, as shown in the following example:</source>
          <target state="translated">次の例に示すように、 &lt;code&gt;@Bean&lt;/code&gt; メソッドに配置すると、ターゲットタイプはデフォルトでメソッドの戻り値の型になります。</target>
        </trans-unit>
        <trans-unit id="cd37626130103f29ce87938e913162e6fd9db2a8" translate="yes" xml:space="preserve">
          <source>When possible, we recommend that you use the &lt;code&gt;-spring&lt;/code&gt; variants for your logging configuration (for example, &lt;code&gt;logback-spring.xml&lt;/code&gt; rather than &lt;code&gt;logback.xml&lt;/code&gt;). If you use standard configuration locations, Spring cannot completely control log initialization.</source>
          <target state="translated">可能であれば、ログ設定に &lt;code&gt;-spring&lt;/code&gt; バリアントを使用することをお勧めします（たとえば、 &lt;code&gt;logback-spring.xml&lt;/code&gt; ではなくlogback- &lt;code&gt;logback.xml&lt;/code&gt; ）。標準の構成場所を使用する場合、Springはログの初期化を完全に制御できません。</target>
        </trans-unit>
        <trans-unit id="b470327a567627d21241e80c3e781cbc0640dcda" translate="yes" xml:space="preserve">
          <source>When repackaging an archive, you can include references to dependency files by using the &lt;code&gt;org.springframework.boot.loader.tools.Libraries&lt;/code&gt; interface. We do not provide any concrete implementations of &lt;code&gt;Libraries&lt;/code&gt; here as they are usually build-system-specific.</source>
          <target state="translated">アーカイブを再パッケージ化するときに、 &lt;code&gt;org.springframework.boot.loader.tools.Libraries&lt;/code&gt; インターフェースを使用して、依存関係ファイルへの参照を含めることができます。 &lt;code&gt;Libraries&lt;/code&gt; は通常ビルドシステム固有であるため、ここではライブラリの具体的な実装は提供しません。</target>
        </trans-unit>
        <trans-unit id="b990c6a436ce82d5e0da52dd9ffe7905629c8a01" translate="yes" xml:space="preserve">
          <source>When running a Spring Boot application that uses an embedded servlet container (and is packaged as an executable archive), there are some limitations in the JSP support.</source>
          <target state="translated">埋め込みサーブレットコンテナを使用する(実行可能なアーカイブとしてパッケージ化されている)Spring Bootアプリケーションを実行する場合、JSPのサポートにはいくつかの制限があります。</target>
        </trans-unit>
        <trans-unit id="166a4c20b9d1f115dc51da3f36cf7358fb8f0ffd" translate="yes" xml:space="preserve">
          <source>When running applications on a cloud platform (such as Kubernetes) you often need to read config values that the platform supplies. It&amp;rsquo;s not uncommon to use environment variables for such purposes, but this can have drawbacks, especially if the value is supposed to be kept secret.</source>
          <target state="translated">クラウドプラットフォーム（Kubernetesなど）でアプリケーションを実行する場合、プラットフォームが提供する構成値を読み取る必要があることがよくあります。このような目的で環境変数を使用することは珍しくありませんが、特に値を秘密にしておくことになっている場合、これには欠点があります。</target>
        </trans-unit>
        <trans-unit id="b590e204406a763c9432c6af0dfc8bc3f4c4834d" translate="yes" xml:space="preserve">
          <source>When running tests, it is sometimes necessary to mock certain components within your application context. For example, you may have a facade over some remote service that is unavailable during development. Mocking can also be useful when you want to simulate failures that might be hard to trigger in a real environment.</source>
          <target state="translated">テストを実行する際に、アプリケーションのコンテキスト内で特定のコンポーネントをモックすることが必要になることがあります。例えば、開発中に利用できないリモートサービスの上にファサードがあるかもしれません。モックは、実際の環境ではトリガーしにくい障害をシミュレートしたい場合にも役立ちます。</target>
        </trans-unit>
        <trans-unit id="8cb719ac0bb17afc286e305575bc5ac750065ffe" translate="yes" xml:space="preserve">
          <source>When setting &lt;code&gt;JAVA_OPTS&lt;/code&gt; on Microsoft Windows, make sure to quote the entire instruction, such as &lt;code&gt;set &quot;JAVA_OPTS=-Xms256m -Xmx2048m&quot;&lt;/code&gt;. Doing so ensures the values are properly passed to the process.</source>
          <target state="translated">Microsoft Windowsで &lt;code&gt;JAVA_OPTS&lt;/code&gt; を設定する場合は、必ず &lt;code&gt;set &quot;JAVA_OPTS=-Xms256m -Xmx2048m&quot;&lt;/code&gt; などの命令全体を引用してください。そうすることで、値がプロセスに適切に渡されるようになります。</target>
        </trans-unit>
        <trans-unit id="b37eb2139a8063c7aa8bca8bdbfb110e79a0e90f" translate="yes" xml:space="preserve">
          <source>When specified as environment variables or manifest entries, the following names should be used:</source>
          <target state="translated">環境変数やマニフェストエントリとして指定する場合は、以下の名前を使用します。</target>
        </trans-unit>
        <trans-unit id="b1119cb2661ebaa0bfc4fba1cbe34637ce316656" translate="yes" xml:space="preserve">
          <source>When specifying addresses that way, the &lt;code&gt;host&lt;/code&gt; and &lt;code&gt;port&lt;/code&gt; properties are ignored. If the address uses the &lt;code&gt;amqps&lt;/code&gt; protocol, SSL support is enabled automatically.</source>
          <target state="translated">そのようにアドレスを指定すると、 &lt;code&gt;host&lt;/code&gt; と &lt;code&gt;port&lt;/code&gt; プロパティは無視されます。アドレスが &lt;code&gt;amqps&lt;/code&gt; プロトコルを使用している場合、SSLサポートは自動的に有効になります。</target>
        </trans-unit>
        <trans-unit id="b0bb2a229600b4b9ec90dd3d8e5269b3018911da" translate="yes" xml:space="preserve">
          <source>When switching to a different HTTP server, you need to swap the default dependencies for those that you need instead. To help with this process, Spring Boot provides a separate starter for each of the supported HTTP servers.</source>
          <target state="translated">別のHTTPサーバーに切り替える場合、デフォルトの依存関係を代わりに必要なものと入れ替える必要があります。このプロセスを支援するために、Spring BootはサポートされているHTTPサーバーごとに個別のスターターを提供しています。</target>
        </trans-unit>
        <trans-unit id="b5eef20c4113105a91f44348601544f5027b6fd6" translate="yes" xml:space="preserve">
          <source>When testing Spring Boot applications, this is often not required. Spring Boot&amp;rsquo;s &lt;code&gt;@*Test&lt;/code&gt; annotations search for your primary configuration automatically whenever you do not explicitly define one.</source>
          <target state="translated">Spring Bootアプリケーションをテストする場合、これは多くの場合必要ありません。SpringBootの &lt;code&gt;@*Test&lt;/code&gt; アノテーションは、プライマリ構成を明示的に定義しない場合は常に、プライマリ構成を自動的に検索します。</target>
        </trans-unit>
        <trans-unit id="fb802321c2c3b801f3d52aeb74ea76101052d8b8" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;@ConfigurationProperties&lt;/code&gt; bean is registered using configuration property scanning or via &lt;code&gt;@EnableConfigurationProperties&lt;/code&gt;, the bean has a conventional name: &lt;code&gt;&amp;lt;prefix&amp;gt;-&amp;lt;fqn&amp;gt;&lt;/code&gt;, where &lt;code&gt;&amp;lt;prefix&amp;gt;&lt;/code&gt; is the environment key prefix specified in the &lt;code&gt;@ConfigurationProperties&lt;/code&gt; annotation and &lt;code&gt;&amp;lt;fqn&amp;gt;&lt;/code&gt; is the fully qualified name of the bean. If the annotation does not provide any prefix, only the fully qualified name of the bean is used.</source>
          <target state="translated">&lt;code&gt;@ConfigurationProperties&lt;/code&gt; Beanが構成プロパティスキャンまたは &lt;code&gt;@EnableConfigurationProperties&lt;/code&gt; を介して登録される場合、Beanの名前は従来の名前 &lt;code&gt;&amp;lt;prefix&amp;gt;-&amp;lt;fqn&amp;gt;&lt;/code&gt; になります。ここで、 &lt;code&gt;&amp;lt;prefix&amp;gt;&lt;/code&gt; は &lt;code&gt;@ConfigurationProperties&lt;/code&gt; アノテーションで指定された環境キープレフィックスであり、 &lt;code&gt;&amp;lt;fqn&amp;gt;&lt;/code&gt; Beanの完全修飾名です。アノテーションにプレフィックスが指定されていない場合は、Beanの完全修飾名のみが使用されます。</target>
        </trans-unit>
        <trans-unit id="4d45608ecb938301e7bb2c640c9f09a4413980f8" translate="yes" xml:space="preserve">
          <source>When the Apache Kafka infrastructure is present, any bean can be annotated with &lt;code&gt;@KafkaListener&lt;/code&gt; to create a listener endpoint. If no &lt;code&gt;KafkaListenerContainerFactory&lt;/code&gt; has been defined, a default one is automatically configured with keys defined in &lt;code&gt;spring.kafka.listener.*&lt;/code&gt;.</source>
          <target state="translated">Apache Kafkaインフラストラクチャが存在する場合、任意のBeanに &lt;code&gt;@KafkaListener&lt;/code&gt; アノテーションを付けて、リスナーエンドポイントを作成できます。 &lt;code&gt;KafkaListenerContainerFactory&lt;/code&gt; が定義されていない場合、デフォルトのものは、 &lt;code&gt;spring.kafka.listener.*&lt;/code&gt; 定義されたキーで自動的に構成されます。</target>
        </trans-unit>
        <trans-unit id="cc337ad6a29a601497eac4f84b56224913dda123" translate="yes" xml:space="preserve">
          <source>When the JDBC store is used, the schema can be initialized on startup, as shown in the following example:</source>
          <target state="translated">JDBCストアを使用する場合、以下の例のように、起動時にスキーマを初期化することができます。</target>
        </trans-unit>
        <trans-unit id="19eb27a8c635967fb916ec78517df63ceee60db5" translate="yes" xml:space="preserve">
          <source>When the JMS infrastructure is present, any bean can be annotated with &lt;code&gt;@JmsListener&lt;/code&gt; to create a listener endpoint. If no &lt;code&gt;JmsListenerContainerFactory&lt;/code&gt; has been defined, a default one is configured automatically. If a &lt;code&gt;DestinationResolver&lt;/code&gt; or a &lt;code&gt;MessageConverter&lt;/code&gt; beans is defined, it is associated automatically to the default factory.</source>
          <target state="translated">JMSインフラストラクチャが存在する場合、任意のBeanに &lt;code&gt;@JmsListener&lt;/code&gt; アノテーションを付けて、リスナーエンドポイントを作成できます。 &lt;code&gt;JmsListenerContainerFactory&lt;/code&gt; が定義されていない場合、デフォルトのものが自動的に構成されます。場合 &lt;code&gt;DestinationResolver&lt;/code&gt; または &lt;code&gt;MessageConverter&lt;/code&gt; の豆が定義されている、それがデフォルトの工場出荷時に自動的に関連付けられます。</target>
        </trans-unit>
        <trans-unit id="50f0bbd6afa93b71b892f56503a3b1f11a886642" translate="yes" xml:space="preserve">
          <source>When the Prometheus Pushgateway dependency is present on the classpath and the &lt;code&gt;management.metrics.export.prometheus.pushgateway.enabled&lt;/code&gt; property is set to &lt;code&gt;true&lt;/code&gt;, a &lt;code&gt;PrometheusPushGatewayManager&lt;/code&gt; bean is auto-configured. This manages the pushing of metrics to a Prometheus Pushgateway.</source>
          <target state="translated">Prometheus Pushgatewayの依存関係がクラスパスに存在し、 &lt;code&gt;management.metrics.export.prometheus.pushgateway.enabled&lt;/code&gt; プロパティが &lt;code&gt;true&lt;/code&gt; に設定されている場合、 &lt;code&gt;PrometheusPushGatewayManager&lt;/code&gt; Beanが自動構成されます。これは、PrometheusPushgatewayへのメトリックのプッシュを管理します。</target>
        </trans-unit>
        <trans-unit id="9c67f5a9f6c46e8f5d733622c958dc20ca6479bd" translate="yes" xml:space="preserve">
          <source>When the Rabbit infrastructure is present, any bean can be annotated with &lt;code&gt;@RabbitListener&lt;/code&gt; to create a listener endpoint. If no &lt;code&gt;RabbitListenerContainerFactory&lt;/code&gt; has been defined, a default &lt;code&gt;SimpleRabbitListenerContainerFactory&lt;/code&gt; is automatically configured and you can switch to a direct container using the &lt;code&gt;spring.rabbitmq.listener.type&lt;/code&gt; property. If a &lt;code&gt;MessageConverter&lt;/code&gt; or a &lt;code&gt;MessageRecoverer&lt;/code&gt; bean is defined, it is automatically associated with the default factory.</source>
          <target state="translated">Rabbitインフラストラクチャが存在する場合、任意のBeanに &lt;code&gt;@RabbitListener&lt;/code&gt; アノテーションを付けて、リスナーエンドポイントを作成できます。 &lt;code&gt;RabbitListenerContainerFactory&lt;/code&gt; が定義されていない場合、デフォルトの &lt;code&gt;SimpleRabbitListenerContainerFactory&lt;/code&gt; が自動的に構成され、 &lt;code&gt;spring.rabbitmq.listener.type&lt;/code&gt; プロパティを使用して直接コンテナーに切り替えることができます。場合 &lt;code&gt;MessageConverter&lt;/code&gt; または &lt;code&gt;MessageRecoverer&lt;/code&gt; のBeanが定義され、それが自動的にデフォルトの工場に関連付けられています。</target>
        </trans-unit>
        <trans-unit id="09f03cc4078594ab7cabdffb18d8434529ac5b31" translate="yes" xml:space="preserve">
          <source>When the debug mode is enabled, a selection of core loggers (embedded container, Hibernate, and Spring Boot) are configured to output more information. Enabling the debug mode does &lt;em&gt;not&lt;/em&gt; configure your application to log all messages with &lt;code&gt;DEBUG&lt;/code&gt; level.</source>
          <target state="translated">デバッグモードを有効にすると、選択したコアロガー（埋め込みコンテナー、Hibernate、およびSpring Boot）が、より多くの情報を出力するように構成されます。デバッグモードを有効にしても、 &lt;code&gt;DEBUG&lt;/code&gt; レベルのすべてのメッセージをログに記録するようにアプリケーションを構成すること&lt;em&gt;は&lt;/em&gt;できませ&lt;em&gt;ん&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="ca0dfb6bb618abdaebb38370f1bdb84604a0e1a1" translate="yes" xml:space="preserve">
          <source>When to include &quot;errors&quot; attribute.</source>
          <target state="translated">error &quot;属性を含める場合。</target>
        </trans-unit>
        <trans-unit id="089db356b67247a8b9d267b74f62658376b1b234" translate="yes" xml:space="preserve">
          <source>When to include &quot;message&quot; attribute.</source>
          <target state="translated">message」属性を含める場合。</target>
        </trans-unit>
        <trans-unit id="12fa1f6a9a949ab72b648d1f433e5bfb0d934aa6" translate="yes" xml:space="preserve">
          <source>When to include the &quot;trace&quot; attribute.</source>
          <target state="translated">trace」属性を含める場合。</target>
        </trans-unit>
        <trans-unit id="36bd6fda6ae35beb820543b7ca538bdc1b1afd26" translate="yes" xml:space="preserve">
          <source>When to show components. If not specified the 'show-details' setting will be used.</source>
          <target state="translated">コンポーネントを表示するタイミングを指定します。指定しない場合は 'show-details' 設定が使用されます。</target>
        </trans-unit>
        <trans-unit id="59d9b30437777f82b1cf10181f4f4bf633707094" translate="yes" xml:space="preserve">
          <source>When to show full health details.</source>
          <target state="translated">完全な健康状態の詳細を表示する場合。</target>
        </trans-unit>
        <trans-unit id="71111bf129c83fcb8da16a05eccd593621c5d652" translate="yes" xml:space="preserve">
          <source>When upgrading to a new feature release, some properties may have been renamed or removed. Spring Boot provides a way to analyze your application&amp;rsquo;s environment and print diagnostics at startup, but also temporarily migrate properties at runtime for you. To enable that feature, add the following dependency to your project:</source>
          <target state="translated">新しい機能リリースにアップグレードすると、一部のプロパティの名前が変更されたり、削除されたりする場合があります。Spring Bootは、アプリケーションの環境を分析し、起動時に診断を出力するだけでなく、実行時にプロパティを一時的に移行する方法を提供します。この機能を有効にするには、プロジェクトに次の依存関係を追加します。</target>
        </trans-unit>
        <trans-unit id="8a54d3429f1b14f3d91403df32d0d92ed2a9d010" translate="yes" xml:space="preserve">
          <source>When using JTA, the primary JMS &lt;code&gt;ConnectionFactory&lt;/code&gt; bean is XA-aware and participates in distributed transactions. In some situations, you might want to process certain JMS messages by using a non-XA &lt;code&gt;ConnectionFactory&lt;/code&gt;. For example, your JMS processing logic might take longer than the XA timeout.</source>
          <target state="translated">JTAを使用する場合、プライマリJMS &lt;code&gt;ConnectionFactory&lt;/code&gt; BeanはXA対応であり、分散トランザクションに参加します。状況によっては、XA以外の &lt;code&gt;ConnectionFactory&lt;/code&gt; を使用して特定のJMSメッセージを処理したい場合があります。たとえば、JMS処理ロジックはXAタイムアウトよりも長くかかる場合があります。</target>
        </trans-unit>
        <trans-unit id="19116fab9e23619e53bf52cf57b7e0474061a1aa" translate="yes" xml:space="preserve">
          <source>When using an embedded container, automatic registration of classes annotated with &lt;code&gt;@WebServlet&lt;/code&gt;, &lt;code&gt;@WebFilter&lt;/code&gt;, and &lt;code&gt;@WebListener&lt;/code&gt; can be enabled by using &lt;code&gt;@ServletComponentScan&lt;/code&gt;.</source>
          <target state="translated">埋め込まれた容器を使用する場合、で注釈クラスの自動登録 &lt;code&gt;@WebServlet&lt;/code&gt; 、 &lt;code&gt;@WebFilter&lt;/code&gt; 、及び &lt;code&gt;@WebListener&lt;/code&gt; を使用して有効にすることができる &lt;code&gt;@ServletComponentScan&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="900f576f8e37166d808ecf179cd5786c826b10ac" translate="yes" xml:space="preserve">
          <source>When using an embedded servlet container, you can register servlets, filters, and all the listeners (such as &lt;code&gt;HttpSessionListener&lt;/code&gt;) from the Servlet spec, either by using Spring beans or by scanning for Servlet components.</source>
          <target state="translated">組み込みサーブレットコンテナを使用する場合、Spring Beanを使用するか、サーブレットコンポーネントをスキャンすることにより、サーブレット仕様からサーブレット、フィルタ、およびすべてのリスナー（ &lt;code&gt;HttpSessionListener&lt;/code&gt; など）を登録できます。</target>
        </trans-unit>
        <trans-unit id="7daeb47e9dc9a3d23ad9b1cc067030e3c53202fe" translate="yes" xml:space="preserve">
          <source>When you add the &lt;code&gt;org.liquibase:liquibase-core&lt;/code&gt; to your classpath, database migrations run by default for both during application startup and before your tests run. This behavior can be customized by using the &lt;code&gt;spring.liquibase.enabled&lt;/code&gt; property, setting different values in the &lt;code&gt;main&lt;/code&gt; and &lt;code&gt;test&lt;/code&gt; configurations. It is not possible to use two different ways to initialize the database (e.g. Liquibase for application startup, JPA for test runs).</source>
          <target state="translated">&lt;code&gt;org.liquibase:liquibase-core&lt;/code&gt; をクラスパスに追加すると、データベースの移行は、アプリケーションの起動時とテストの実行前の両方でデフォルトで実行されます。この動作は、 &lt;code&gt;spring.liquibase.enabled&lt;/code&gt; プロパティを使用してカスタマイズし、 &lt;code&gt;main&lt;/code&gt; 構成と &lt;code&gt;test&lt;/code&gt; 構成で異なる値を設定できます。データベースを初期化するために2つの異なる方法を使用することはできません（たとえば、アプリケーション起動用のLiquibase、テスト実行用のJPA）。</target>
        </trans-unit>
        <trans-unit id="a913f0628f28cbf7a28411a03b72ecd6451603cc" translate="yes" xml:space="preserve">
          <source>When you are ready to push your Spring Boot application to production, we have &lt;a href=&quot;production-ready-features#production-ready&quot;&gt;some tricks&lt;/a&gt; that you might like:</source>
          <target state="translated">Spring Bootアプリケーションを本番環境にプッシュする準備ができたら、次のような&lt;a href=&quot;production-ready-features#production-ready&quot;&gt;トリック&lt;/a&gt;があります。</target>
        </trans-unit>
        <trans-unit id="ad5a303269af1a44ddd3382f0f358404f53d5dbb" translate="yes" xml:space="preserve">
          <source>When you are using &lt;code&gt;@SpyBean&lt;/code&gt; to spy on a bean that is proxied by Spring, you may need to remove Spring&amp;rsquo;s proxy in some situations, for example when setting expectations using &lt;code&gt;given&lt;/code&gt; or &lt;code&gt;when&lt;/code&gt;. Use &lt;code&gt;AopTestUtils.getTargetObject(yourProxiedSpy)&lt;/code&gt; to do so.</source>
          <target state="translated">使用している場合は &lt;code&gt;@SpyBean&lt;/code&gt; を春によってプロキシされた豆をスパイするために、あなたが使用しての期待を設定するとき、たとえば、いくつかの状況ではSpringのプロキシを削除する必要があります &lt;code&gt;given&lt;/code&gt; たり &lt;code&gt;when&lt;/code&gt; 。これを行うには、 &lt;code&gt;AopTestUtils.getTargetObject(yourProxiedSpy)&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="9904fce62f17ed55adaf9448ff99a1ca2daa647f" translate="yes" xml:space="preserve">
          <source>When you create a bean for &lt;code&gt;LocalContainerEntityManagerFactoryBean&lt;/code&gt; yourself, any customization that was applied during the creation of the auto-configured &lt;code&gt;LocalContainerEntityManagerFactoryBean&lt;/code&gt; is lost. For example, in case of Hibernate, any properties under the &lt;code&gt;spring.jpa.hibernate&lt;/code&gt; prefix will not be automatically applied to your &lt;code&gt;LocalContainerEntityManagerFactoryBean&lt;/code&gt;. If you were relying on these properties for configuring things like the naming strategy or the DDL mode, you will need to explicitly configure that when creating the &lt;code&gt;LocalContainerEntityManagerFactoryBean&lt;/code&gt; bean. On the other hand, properties that get applied to the auto-configured &lt;code&gt;EntityManagerFactoryBuilder&lt;/code&gt;, which are specified via &lt;code&gt;spring.jpa.properties&lt;/code&gt;, will automatically be applied, provided you use the auto-configured &lt;code&gt;EntityManagerFactoryBuilder&lt;/code&gt; to build the &lt;code&gt;LocalContainerEntityManagerFactoryBean&lt;/code&gt; bean.</source>
          <target state="translated">&lt;code&gt;LocalContainerEntityManagerFactoryBean&lt;/code&gt; のBeanを自分で作成すると、自動構成された &lt;code&gt;LocalContainerEntityManagerFactoryBean&lt;/code&gt; の作成中に適用されたカスタマイズはすべて失われます。たとえば、Hibernateの場合、 &lt;code&gt;spring.jpa.hibernate&lt;/code&gt; プレフィックスの下のプロパティは &lt;code&gt;LocalContainerEntityManagerFactoryBean&lt;/code&gt; に自動的に適用されません。命名戦略やDDLモードなどの構成にこれらのプロパティを使用していた場合は、 &lt;code&gt;LocalContainerEntityManagerFactoryBean&lt;/code&gt; Beanを作成するときに明示的に構成する必要があります。一方、自動構成された &lt;code&gt;EntityManagerFactoryBuilder&lt;/code&gt; に適用されるプロパティ自動構成された &lt;code&gt;EntityManagerFactoryBuilder&lt;/code&gt; を使用して &lt;code&gt;LocalContainerEntityManagerFactoryBean&lt;/code&gt; Beanをビルドする場合、 &lt;code&gt;spring.jpa.properties&lt;/code&gt; で指定されたが自動的に適用されます。</target>
        </trans-unit>
        <trans-unit id="2a310c4918f8f24a0f03c3a7ca0044b8ea26afaa" translate="yes" xml:space="preserve">
          <source>When you create a jar containing the layers index file, the &lt;code&gt;spring-boot-jarmode-layertools&lt;/code&gt; jar will be added as a dependency to your jar. With this jar on the classpath, you can launch your application in a special mode which allows the bootstrap code to run something entirely different from your application, for example, something that extracts the layers.</source>
          <target state="translated">レイヤーインデックスファイルを含むjarを作成すると、 &lt;code&gt;spring-boot-jarmode-layertools&lt;/code&gt; jarが依存関係としてjarに追加されます。このjarをクラスパスに置くと、アプリケーションを特別なモードで起動できます。これにより、ブートストラップコードで、アプリケーションとはまったく異なるもの、たとえばレイヤーを抽出するものを実行できます。</target>
        </trans-unit>
        <trans-unit id="63d5f7a87c08e923d9dbc15d922649b15e262f39" translate="yes" xml:space="preserve">
          <source>When you deploy your application to a servlet container or application server, logging performed via the Java Util Logging API is not routed into your application&amp;rsquo;s logs. This prevents logging performed by the container or other applications that have been deployed to it from appearing in your application&amp;rsquo;s logs.</source>
          <target state="translated">アプリケーションをサーブレットコンテナまたはアプリケーションサーバーにデプロイする場合、Java Util LoggingAPIを介して実行されたログはアプリケーションのログにルーティングされません。これにより、コンテナまたはコンテナにデプロイされた他のアプリケーションによって実行されたログがアプリケーションのログに表示されなくなります。</target>
        </trans-unit>
        <trans-unit id="364a5e3077b269c5b6ae240575bf0ac6c68ec850" translate="yes" xml:space="preserve">
          <source>When you specify multiple BOMs, they are applied in the order in which you declare them, as shown in the following example:</source>
          <target state="translated">複数のBOMを指定すると、次の例のように、宣言した順番で適用されます。</target>
        </trans-unit>
        <trans-unit id="1cfab9547053717472b3eacec6f45f74457c0e41" translate="yes" xml:space="preserve">
          <source>When you use one of these templating engines with the default configuration, your templates are picked up automatically from &lt;code&gt;src/main/resources/templates&lt;/code&gt;.</source>
          <target state="translated">これらのテンプレートエンジンのいずれかをデフォルト構成で使用すると、テンプレートは &lt;code&gt;src/main/resources/templates&lt;/code&gt; から自動的に取得されます。</target>
        </trans-unit>
        <trans-unit id="ae32379b95092c4f270d708905d78eb98d5ea93f" translate="yes" xml:space="preserve">
          <source>When your application starts, any &lt;code&gt;spring.application.json&lt;/code&gt; or &lt;code&gt;SPRING_APPLICATION_JSON&lt;/code&gt; properties will be parsed and added to the &lt;code&gt;Environment&lt;/code&gt;.</source>
          <target state="translated">アプリケーションが起動すると、 &lt;code&gt;spring.application.json&lt;/code&gt; または &lt;code&gt;SPRING_APPLICATION_JSON&lt;/code&gt; プロパティが解析され、 &lt;code&gt;Environment&lt;/code&gt; 追加されます。</target>
        </trans-unit>
        <trans-unit id="33a70ecc8f90e7e761cfdafe3f49bc7ecfe977fd" translate="yes" xml:space="preserve">
          <source>When your application starts, you should see something similar to the following output:</source>
          <target state="translated">アプリケーションを起動すると、以下のような出力が表示されるはずです。</target>
        </trans-unit>
        <trans-unit id="93b298df3ace7e05ab941cea019861266a3a05fb" translate="yes" xml:space="preserve">
          <source>Where &lt;code&gt;NAME&lt;/code&gt; is the name of an ANSI escape code. See &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/ansi/AnsiPropertySource.java&quot;&gt;&lt;code&gt;AnsiPropertySource&lt;/code&gt;&lt;/a&gt; for details.</source>
          <target state="translated">ここで、 &lt;code&gt;NAME&lt;/code&gt; はANSIエスケープコードの名前です。詳細については、&lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/ansi/AnsiPropertySource.java&quot;&gt; &lt;code&gt;AnsiPropertySource&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="57ceac3ec9fbb20010ded8b30904cf5382f849b2" translate="yes" xml:space="preserve">
          <source>Where the order of the filters is important they can implement &lt;code&gt;Ordered&lt;/code&gt; or be annotated with &lt;code&gt;@Order&lt;/code&gt;. Spring Boot auto-configuration may configure web filters for you. When it does so, the orders shown in the following table will be used:</source>
          <target state="translated">フィルタの順序が重要な場合は、 &lt;code&gt;Ordered&lt;/code&gt; を実装するか、 &lt;code&gt;@Order&lt;/code&gt; アノテーションを付けることができます。Spring Bootの自動構成により、Webフィルターが構成される場合があります。その場合、次の表に示す順序が使用されます。</target>
        </trans-unit>
        <trans-unit id="aa6d742809c9bfcd1d00de178ce54ca82f80578b" translate="yes" xml:space="preserve">
          <source>Whether Connection.isValid() is called when acquiring a connection from the pool.</source>
          <target state="translated">プールから接続を取得する際に Connection.isValid()が呼び出されるかどうか。</target>
        </trans-unit>
        <trans-unit id="1b826309b9ef25d233e546e12af04b76a35bd2f5" translate="yes" xml:space="preserve">
          <source>Whether Flyway should attempt to create the schemas specified in the schemas property.</source>
          <target state="translated">Flywayがschemasプロパティで指定されたスキーマの作成を試みるかどうか。</target>
        </trans-unit>
        <trans-unit id="12c45fd1c8a882527bb995ac06da6acc3c67d03a" translate="yes" xml:space="preserve">
          <source>Whether Flyway should output a table with the results of queries when executing migrations. Requires Flyway Teams.</source>
          <target state="translated">移行を実行する際に、Flywayがクエリの結果をテーブルに出力するかどうか。Flywayチームが必要です。</target>
        </trans-unit>
        <trans-unit id="3fa6de3d1903057d2b140eff62c96c95734d596e" translate="yes" xml:space="preserve">
          <source>Whether Flyway should skip executing the contents of the migrations and only update the schema history table. Requires Flyway teams.</source>
          <target state="translated">Flywayが移行の内容の実行をスキップして、スキーマ履歴テーブルの更新のみを行うかどうか。Flywayチームが必要です。</target>
        </trans-unit>
        <trans-unit id="ef3e6402a11dc007afe4ffd9d2ada7e4e52c37c3" translate="yes" xml:space="preserve">
          <source>Whether Graphite tags should be used, as opposed to a hierarchical naming convention. Enabled by default unless &quot;tagsAsPrefix&quot; is set.</source>
          <target state="translated">階層的な命名規則ではなく、Graphiteタグを使用するかどうか。tagsAsPrefix &quot;が設定されていない限り、デフォルトでは有効。</target>
        </trans-unit>
        <trans-unit id="e36841af1969cb1a064c5001bc957096e559f503" translate="yes" xml:space="preserve">
          <source>Whether HTTP 1.1 and later location headers generated by a call to sendRedirect will use relative or absolute redirects.</source>
          <target state="translated">sendRedirect の呼び出しによって生成された HTTP 1.1 以降のロケーションヘッダが相対的なリダイレクトか絶対的なリダイレクトを使用するかどうか。</target>
        </trans-unit>
        <trans-unit id="859cfdf85fd8f89b412b7bf9cf53126bab2e2d8e" translate="yes" xml:space="preserve">
          <source>Whether HttpServletRequest attributes are allowed to override (hide) controller generated model attributes of the same name.</source>
          <target state="translated">HttpServletRequest 属性が、コントローラが生成した同名のモデル属性を上書き (非表示)することを許可するかどうか。</target>
        </trans-unit>
        <trans-unit id="28169259a5a2b63e0810b8d0e9bef42f1f39595c" translate="yes" xml:space="preserve">
          <source>Whether HttpSession attributes are allowed to override (hide) controller generated model attributes of the same name.</source>
          <target state="translated">HttpSession 属性が、同名のコントローラが生成したモデル属性を上書き (非表示)することを許可するかどうか。</target>
        </trans-unit>
        <trans-unit id="17f9b1009a2d4f6e069d81b2fea9b1d02a41b5e2" translate="yes" xml:space="preserve">
          <source>Whether NameNotFoundException should be ignored in searches via the LdapTemplate.</source>
          <target state="translated">LdapTemplate経由の検索でNameNotFoundExceptionを無視するかどうか。</target>
        </trans-unit>
        <trans-unit id="864818a8a0340d9fdbc9d8905edbcf6cfff78cb1" translate="yes" xml:space="preserve">
          <source>Whether PartialResultException should be ignored in searches via the LdapTemplate.</source>
          <target state="translated">LdapTemplate経由の検索でPartialResultExceptionを無視するかどうか。</target>
        </trans-unit>
        <trans-unit id="0038aa42ce1f4d6c101ce95268bd6a5d3d213fe6" translate="yes" xml:space="preserve">
          <source>Whether SizeLimitExceededException should be ignored in searches via the LdapTemplate.</source>
          <target state="translated">LdapTemplate経由の検索でSizeLimitExceededExceptionを無視するかどうか。</target>
        </trans-unit>
        <trans-unit id="0f456753dae11617bb6c57b3b3effb6665cb895c" translate="yes" xml:space="preserve">
          <source>Whether TMJOIN should be used when starting XAResources.</source>
          <target state="translated">XAResourcesの起動時にTMJOINを使用するかどうか。</target>
        </trans-unit>
        <trans-unit id="2928df4f05237009ef4d6afaa6faf5849b01f95b" translate="yes" xml:space="preserve">
          <source>Whether Thymeleaf should start writing partial output as soon as possible or buffer until template processing is finished.</source>
          <target state="translated">Thymeleafは、できるだけ早く部分出力の書き込みを始めるべきか、テンプレート処理が終わるまでバッファリングするべきか。</target>
        </trans-unit>
        <trans-unit id="a10da187489d6299a565af010b378ee28ee5b9ea" translate="yes" xml:space="preserve">
          <source>Whether Tomcat's MBean Registry should be enabled.</source>
          <target state="translated">TomcatのMBean Registryを有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="28fcbfb14301b7616d9921e9146e3530fe701570" translate="yes" xml:space="preserve">
          <source>Whether a &quot;NoHandlerFoundException&quot; should be thrown if no Handler was found to process a request.</source>
          <target state="translated">リクエストを処理するハンドラが見つからなかった場合に &quot;NoHandlerFoundException&quot; をスローするかどうか。</target>
        </trans-unit>
        <trans-unit id="83b569885364fb8099fe537566fc9fdf427c210f" translate="yes" xml:space="preserve">
          <source>Whether a JmsPoolConnectionFactory should be created, instead of a regular ConnectionFactory.</source>
          <target state="translated">通常のConnectionFactoryではなく、JmsPoolConnectionFactoryを作成するかどうか。</target>
        </trans-unit>
        <trans-unit id="864f2b799af68302b2016e62e2d16397cd44ad3a" translate="yes" xml:space="preserve">
          <source>Whether a VM shutdown should trigger forced shutdown of the transaction core.</source>
          <target state="translated">VMのシャットダウンがトランザクションコアの強制シャットダウンをトリガするかどうか。</target>
        </trans-unit>
        <trans-unit id="c8b4085de4fdd22ac426c6ba4827b0bbc6b91a1d" translate="yes" xml:space="preserve">
          <source>Whether a request parameter (&quot;format&quot; by default) should be used to determine the requested media type.</source>
          <target state="translated">要求されたメディアタイプを決定するために、要求パラメータ(デフォルトでは &quot;format&quot;)を使用するかどうか。</target>
        </trans-unit>
        <trans-unit id="b45e06e23290d6c07d0c7b181f904cfbaf379a59" translate="yes" xml:space="preserve">
          <source>Whether adaptive topology refreshing using all available refresh triggers should be used.</source>
          <target state="translated">利用可能なすべてのリフレッシュトリガーを使用した適応型トポロジのリフレッシュを使用するかどうか。</target>
        </trans-unit>
        <trans-unit id="b091d9801755223cc178c054e3a03ee7f4f42d4a" translate="yes" xml:space="preserve">
          <source>Whether all HttpSession attributes should be added to the model prior to merging with the template.</source>
          <target state="translated">テンプレートにマージする前に、すべての HttpSession 属性をモデルに追加するかどうか。</target>
        </trans-unit>
        <trans-unit id="8fa15179194996d06e1146833ada28296a3685ef" translate="yes" xml:space="preserve">
          <source>Whether all request attributes should be added to the model prior to merging with the template.</source>
          <target state="translated">テンプレートにマージする前に、すべてのリクエスト属性をモデルに追加するかどうか。</target>
        </trans-unit>
        <trans-unit id="65facdb06081cee13236133d2066e9880d387cd6" translate="yes" xml:space="preserve">
          <source>Whether application/hal+json responses should be sent to requests that accept application/json.</source>
          <target state="translated">application/json を受け入れるリクエストに application/hal+json レスポンスを送るべきかどうか。</target>
        </trans-unit>
        <trans-unit id="b043deaafbbe8bc7f4edb52961cba9a95414719f" translate="yes" xml:space="preserve">
          <source>Whether auto-configured MeterRegistry implementations should be bound to the global static registry on Metrics. For testing, set this to 'false' to maximize test independence.</source>
          <target state="translated">自動設定された MeterRegistry 実装を Metrics 上のグローバル静的レジストリにバインドするかどうか。テストでは、これを 'false' に設定して、テストの独立性を最大化します。</target>
        </trans-unit>
        <trans-unit id="3fa3ed77ffc8dea03f49a153dc1aa569ef258a35" translate="yes" xml:space="preserve">
          <source>Whether bean definition overriding, by registering a definition with the same name as an existing definition, is allowed.</source>
          <target state="translated">既存の定義と同名の定義を登録することで、ビーン定義のオーバーライドを許可するかどうか。</target>
        </trans-unit>
        <trans-unit id="eea764bab35f37b82a9b736b929a7a7b556333f7" translate="yes" xml:space="preserve">
          <source>Whether configured jobs should overwrite existing job definitions.</source>
          <target state="translated">構成されたジョブが既存のジョブ定義を上書きするかどうか。</target>
        </trans-unit>
        <trans-unit id="78ff1ddb35b202fd0d219b21ef772bd58b1eade3" translate="yes" xml:space="preserve">
          <source>Whether connections in the ACCESSIBLE state can be shared within the context of a transaction.</source>
          <target state="translated">ACCESSIBLE状態の接続をトランザクションのコンテキスト内で共有できるかどうか。</target>
        </trans-unit>
        <trans-unit id="d963e504d2818a32c6f1cd2593a93c07bb4158f5" translate="yes" xml:space="preserve">
          <source>Whether connections should be tested when acquired from the pool.</source>
          <target state="translated">プールから取得したときに接続をテストするかどうか。</target>
        </trans-unit>
        <trans-unit id="5fd8ccdf81071ce3acc62c7bfec42b2bf5bb9cf8" translate="yes" xml:space="preserve">
          <source>Whether core threads are allowed to time out. This enables dynamic growing and shrinking of the pool.</source>
          <target state="translated">コアスレッドのタイムアウトを許可するかどうか。これにより、プールの動的な成長と縮小が可能になります。</target>
        </trans-unit>
        <trans-unit id="5dfdf411e58e272e6c46568bdcf9bea70ef54e44" translate="yes" xml:space="preserve">
          <source>Whether credentials are supported. When not set, credentials are not supported.</source>
          <target state="translated">クレデンシャルがサポートされているかどうか。設定されていない場合、クレデンシャルはサポートされません。</target>
        </trans-unit>
        <trans-unit id="3f4aa9b7cd97e52c599c08a95bfbbd709f2d1306" translate="yes" xml:space="preserve">
          <source>Whether exporting of metrics to Ganglia is enabled.</source>
          <target state="translated">Ganglia へのメトリクスのエクスポートが有効かどうか。</target>
        </trans-unit>
        <trans-unit id="09ed2e7bb45e1c8160f8143534d193835df767e1" translate="yes" xml:space="preserve">
          <source>Whether exporting of metrics to Graphite is enabled.</source>
          <target state="translated">Graphite へのメトリクスのエクスポートが有効かどうか。</target>
        </trans-unit>
        <trans-unit id="8bfa0563e916b415ce3d219408212fb2dd8abd28" translate="yes" xml:space="preserve">
          <source>Whether exporting of metrics to JMX is enabled.</source>
          <target state="translated">JMX へのメトリクスのエクスポートが有効かどうか。</target>
        </trans-unit>
        <trans-unit id="8e71466838aaeefca39fe951f090279a44ecc07c" translate="yes" xml:space="preserve">
          <source>Whether exporting of metrics to Prometheus is enabled.</source>
          <target state="translated">プロメテウスへのメトリクスのエクスポートが有効かどうか。</target>
        </trans-unit>
        <trans-unit id="07b3669db6e708415a89f90135925c9c598dced5" translate="yes" xml:space="preserve">
          <source>Whether exporting of metrics to StatsD is enabled.</source>
          <target state="translated">StatsDへのメトリクスのエクスポートが有効かどうか。</target>
        </trans-unit>
        <trans-unit id="31b449be60672cbad28e93391839da6748080117" translate="yes" xml:space="preserve">
          <source>Whether exporting of metrics to this backend is enabled.</source>
          <target state="translated">このバックエンドへのメトリクスのエクスポートが有効かどうか。</target>
        </trans-unit>
        <trans-unit id="5889f5a601f7bf6c67a21d87ea7e4d90637ee2b0" translate="yes" xml:space="preserve">
          <source>Whether hidden form inputs acting as markers for checkboxes should be rendered before the checkbox element itself.</source>
          <target state="translated">チェックボックスのマーカーとして機能する非表示のフォーム入力を、チェックボックス要素自体の前にレンダリングするかどうか。</target>
        </trans-unit>
        <trans-unit id="728c1c45f2713ee897adaa57111e405c61504e50" translate="yes" xml:space="preserve">
          <source>Whether hostname verification is required.</source>
          <target state="translated">ホスト名の検証が必要かどうか。</target>
        </trans-unit>
        <trans-unit id="b01dd6b955a205aeb7287eb768a463240e6410d8" translate="yes" xml:space="preserve">
          <source>Whether images should be inverted for dark terminal themes.</source>
          <target state="translated">ダークターミナルのテーマで画像を反転させるべきかどうか。</target>
        </trans-unit>
        <trans-unit id="ebf8824e22e47b0299766725aa2c9033eb471c91" translate="yes" xml:space="preserve">
          <source>Whether initialization should be performed lazily.</source>
          <target state="translated">初期化を怠惰に行うかどうか。</target>
        </trans-unit>
        <trans-unit id="6247eeb82d8b665986aecffc2f5ec83adbfbe28b" translate="yes" xml:space="preserve">
          <source>Whether local transactions are desired.</source>
          <target state="translated">ローカルトランザクションを希望するかどうか。</target>
        </trans-unit>
        <trans-unit id="f238273c3eb375feeef8a32811b7ac5cea41fb1d" translate="yes" xml:space="preserve">
          <source>Whether logging of (potentially sensitive) request details at DEBUG and TRACE level is allowed.</source>
          <target state="translated">DEBUGおよびTRACEレベルでの(潜在的にセンシティブな)リクエスト詳細のロギングを許可するかどうか。</target>
        </trans-unit>
        <trans-unit id="167e459cb1743f67cf62f55af8f2866e91a64ced" translate="yes" xml:space="preserve">
          <source>Whether logging of the request will only be enabled if &quot;ServletRequest.getAttribute(conditionIf)&quot; does not yield null.</source>
          <target state="translated">ServletRequest.getAttribute(conditionIf)がnullを生成しない場合にのみ、リクエストのロギングを有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="c98c6e431699604c27fa9a4c98177eea6864d2be" translate="yes" xml:space="preserve">
          <source>Whether logging of the request will only be enabled if &quot;ServletRequest.getAttribute(conditionUnless)&quot; yield null.</source>
          <target state="translated">ServletRequest.getAttribute(conditionUnless)yield nullの場合にのみ、リクエストのロギングを有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="74265d90e543a40a869de9f966af437ee77def59" translate="yes" xml:space="preserve">
          <source>Whether meter IDs starting with the specified name should be enabled. The longest match wins, the key `all` can also be used to configure all meters.</source>
          <target state="translated">指定した名前で始まるメーターIDを有効にするかどうか。長くマッチしたものが勝ちで、キー `all` はすべてのメーターを設定するために使用することもできます。</target>
        </trans-unit>
        <trans-unit id="26ff7a93bbdd2d79cc6a7a7cb47176918efef20e" translate="yes" xml:space="preserve">
          <source>Whether meter IDs starting with the specified name should publish percentile histograms. For monitoring systems that support aggregable percentile calculation based on a histogram, this can be set to true. For other systems, this has no effect. The longest match wins, the key `all` can also be used to configure all meters.</source>
          <target state="translated">指定された名前で始まるメーター ID がパーセンタイルヒストグラムを公開するかどうか。ヒストグラムに基づく集計可能なパーセンタイル計算をサポートしているモニタリングシステムでは、これを true に設定できます。その他のシステムでは、これは何の影響もありません。長く一致したものが勝つと、キー `all` を使用してすべてのメーターを構成することもできます。</target>
        </trans-unit>
        <trans-unit id="6dddd6b57dfa0229e906ad8843ab796fe28adfb7" translate="yes" xml:space="preserve">
          <source>Whether or not to auto-start the streams factory bean.</source>
          <target state="translated">ストリームファクトリービーンを自動起動するかどうか。</target>
        </trans-unit>
        <trans-unit id="822dc307014eeb60f223a1f773c63b6ccf530f6a" translate="yes" xml:space="preserve">
          <source>Whether percentile histograms should be published.</source>
          <target state="translated">パーセンタイルヒストグラムを公表すべきかどうか。</target>
        </trans-unit>
        <trans-unit id="cf14485e27183f846c7d41951b508961695c8cfb" translate="yes" xml:space="preserve">
          <source>Whether pooling is enabled. Enabled automatically if &quot;r2dbc-pool&quot; is on the classpath.</source>
          <target state="translated">プーリングが有効かどうか。クラスパスに &quot;r2dbc-pool &quot;がある場合は自動的に有効になります。</target>
        </trans-unit>
        <trans-unit id="3343244f8cf275be4e5e75142acb4287bd947604" translate="yes" xml:space="preserve">
          <source>Whether producers and consumers should be cached.</source>
          <target state="translated">生産者と消費者がキャッシュされるべきかどうか。</target>
        </trans-unit>
        <trans-unit id="5c27b48dbe70a43297f20af82cc5a02f7a049bc6" translate="yes" xml:space="preserve">
          <source>Whether publishing retries are enabled.</source>
          <target state="translated">パブリッシングのリトライを有効にしているかどうか。</target>
        </trans-unit>
        <trans-unit id="2f7ecc2ca57a38cc926fbcf448bd9de197ddcb49" translate="yes" xml:space="preserve">
          <source>Whether read-only operations should use an anonymous environment. Disabled by default unless a username is set.</source>
          <target state="translated">読み取り専用の操作で匿名環境を使用するかどうか。ユーザー名が設定されていない限り、デフォルトでは無効になっています。</target>
        </trans-unit>
        <trans-unit id="591e47dbeef3504f1918575fdb73e489aa705ed0" translate="yes" xml:space="preserve">
          <source>Whether recovery failures should be ignored.</source>
          <target state="translated">リカバリーの失敗を無視するかどうか。</target>
        </trans-unit>
        <trans-unit id="6b50ae54db3e2c639d72cb5d6972197c27942240" translate="yes" xml:space="preserve">
          <source>Whether rejected deliveries are re-queued by default.</source>
          <target state="translated">拒否された配送がデフォルトで再入荷されるかどうか。</target>
        </trans-unit>
        <trans-unit id="7f13328faf882b5c9926a913bbcea725caa01a8c" translate="yes" xml:space="preserve">
          <source>Whether requests to the context root should be redirected by appending a / to the path. When using SSL terminated at a proxy, this property should be set to false.</source>
          <target state="translated">コンテキストルートへのリクエストをパスに/を付加してリダイレクトするかどうか。プロキシで終了した SSL を使用している場合は、このプロパティを false に設定しなければなりません。</target>
        </trans-unit>
        <trans-unit id="e92cbb8c81a8811ace3e8a2135470c09c602a45b" translate="yes" xml:space="preserve">
          <source>Whether resources should be enlisted and delisted automatically.</source>
          <target state="translated">資源は自動的に入隊して上場廃止にすべきかどうか。</target>
        </trans-unit>
        <trans-unit id="ca852488f9e354cde0f6b84a80738cf5757da4f2" translate="yes" xml:space="preserve">
          <source>Whether response compression is enabled.</source>
          <target state="translated">応答圧縮が有効かどうか。</target>
        </trans-unit>
        <trans-unit id="df4b1d6d01ea59f89f9d92a78d6516e59f110a60" translate="yes" xml:space="preserve">
          <source>Whether retries are stateless or stateful.</source>
          <target state="translated">リトライがステートレスかステートフルか。</target>
        </trans-unit>
        <trans-unit id="854e7144e1601e350950b3accd57fbf244da8fd5" translate="yes" xml:space="preserve">
          <source>Whether rollback should be tested before update is performed.</source>
          <target state="translated">更新を実行する前にロールバックをテストするかどうか。</target>
        </trans-unit>
        <trans-unit id="ff04f9b0f0cb105d107802505d79a4e33e3eb634" translate="yes" xml:space="preserve">
          <source>Whether servlet filters should be initialized on startup.</source>
          <target state="translated">起動時にサーブレットフィルタを初期化するかどうか。</target>
        </trans-unit>
        <trans-unit id="affd835303abdb41783c1d90c585719532299ba7" translate="yes" xml:space="preserve">
          <source>Whether static resource caching is permitted for this web application.</source>
          <target state="translated">このウェブアプリケーションで静的リソースキャッシングが許可されているかどうか。</target>
        </trans-unit>
        <trans-unit id="1b86fb645d206dc82447a2a2d9b1be81f4d7f5c2" translate="yes" xml:space="preserve">
          <source>Whether sub-transactions should be joined when possible.</source>
          <target state="translated">可能な場合はサブトランザクションを参加させるべきかどうか。</target>
        </trans-unit>
        <trans-unit id="e7268607b4de57738f48cefb2383f41a64bd3529" translate="yes" xml:space="preserve">
          <source>Whether subclass-based (CGLIB) proxies are to be created (true), as opposed to standard Java interface-based proxies (false).</source>
          <target state="translated">サブクラス・ベース(CGLIB)のプロキシを作成するかどうか(true)、標準のJavaインタフェース・ベースのプロキシとは対照的に(false)。</target>
        </trans-unit>
        <trans-unit id="b79bac485111aa56626437cf1d7234b19615f7b2" translate="yes" xml:space="preserve">
          <source>Whether the 'Connection: keep-alive' header should be added to all responses, even if not required by the HTTP specification.</source>
          <target state="translated">HTTP 仕様で要求されていない場合でも、'Connection:keep-alive' ヘッダをすべてのレスポンスに追加すべきかどうか。</target>
        </trans-unit>
        <trans-unit id="5986f0fb799897acf7f0accbc5f735b5d88aeadd" translate="yes" xml:space="preserve">
          <source>Whether the &lt;code&gt;start-stop-daemon&lt;/code&gt; command, when it&amp;rsquo;s available, should be used to control the process</source>
          <target state="translated">&lt;code&gt;start-stop-daemon&lt;/code&gt; コマンドが使用可能な場合、それを使用してプロセスを制御する必要があるかどうか</target>
        </trans-unit>
        <trans-unit id="3d669066b9e19e6647b2867b9273bff65d285af4" translate="yes" xml:space="preserve">
          <source>Whether the &lt;code&gt;start-stop-daemon&lt;/code&gt; command, when it&amp;rsquo;s available, should be used to control the process. Defaults to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;start-stop-daemon&lt;/code&gt; コマンドが使用可能な場合は、それを使用してプロセスを制御する必要があるかどうか。デフォルトは &lt;code&gt;true&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="c63600d449caad2e788349fa13ed4fc8e26cd95f" translate="yes" xml:space="preserve">
          <source>Whether the JSP servlet is registered.</source>
          <target state="translated">JSPサーブレットが登録されているかどうか。</target>
        </trans-unit>
        <trans-unit id="a1a50537fecaa5244ff46698ab59dd5e8774b497" translate="yes" xml:space="preserve">
          <source>Whether the Reactor Debug Agent should be enabled when reactor-tools is present.</source>
          <target state="translated">リアクターツールズが存在する場合に、リアクターデバッグエージェントを有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="5abbf67dc685a2da599ba02d1fa35921d73bbddc" translate="yes" xml:space="preserve">
          <source>Whether the URL should be decoded. When disabled, percent-encoded characters in the URL will be left as-is.</source>
          <target state="translated">URLをデコードするかどうか。無効にすると、URL内のパーセンテージエンコードされた文字がそのまま残ります。</target>
        </trans-unit>
        <trans-unit id="6cc31e35f3df69adb7fc0a1340bd9bb9c852278a" translate="yes" xml:space="preserve">
          <source>Whether the application should have a shutdown hook registered.</source>
          <target state="translated">アプリケーションにシャットダウンフックを登録するかどうか。</target>
        </trans-unit>
        <trans-unit id="88d0a225afec78ca95073adbbe8a0a29a7c8cf22" translate="yes" xml:space="preserve">
          <source>Whether the client should use SSL to connect to the endpoints.</source>
          <target state="translated">クライアントがエンドポイントに接続する際にSSLを使用するかどうか。</target>
        </trans-unit>
        <trans-unit id="e9cc2a3114d96562e10a70b73936553b334041af" translate="yes" xml:space="preserve">
          <source>Whether the consumer's offset is periodically committed in the background.</source>
          <target state="translated">消費者のオフセットがバックグラウンドで定期的にコミットされているかどうか。</target>
        </trans-unit>
        <trans-unit id="d8b2c7eb25fa97f968d65a63e25fb9f3e5d2ec46" translate="yes" xml:space="preserve">
          <source>Whether the container creates a batch of messages based on the 'receive-timeout' and 'batch-size'. Coerces 'de-batching-enabled' to true to include the contents of a producer created batch in the batch as discrete records.</source>
          <target state="translated">コンテナが 'receive-timeout' と 'batch-size' に基づいてメッセージのバッチを作成するかどうか。プロデューサが作成したバッチの内容を個別のレコードとしてバッチに含めるために、'de-batching-enabled' を true に強制します。</target>
        </trans-unit>
        <trans-unit id="063a8505796f17babf79ef0289d11bc535d43a7c" translate="yes" xml:space="preserve">
          <source>Whether the container should fail to start if at least one of the configured topics are not present on the broker.</source>
          <target state="translated">構成されたトピックのうち少なくとも 1 つがブローカーに存在しない場合、コンテナの起動に失敗するかどうか。</target>
        </trans-unit>
        <trans-unit id="bfb9327d7644f744b86e2f688ed34643374207de" translate="yes" xml:space="preserve">
          <source>Whether the container should present batched messages as discrete messages or call the listener with the batch.</source>
          <target state="translated">コンテナは、バッチされたメッセージを個別のメッセージとして提示するか、それともバッチを使ってリスナーを呼び出すか。</target>
        </trans-unit>
        <trans-unit id="6088cd47ee1d0661cda80242485f7d3a10864143" translate="yes" xml:space="preserve">
          <source>Whether the content of the &quot;default&quot; model should be ignored during redirect scenarios.</source>
          <target state="translated">リダイレクトシナリオ中に &quot;default &quot;モデルの内容を無視するかどうか。</target>
        </trans-unit>
        <trans-unit id="da09e3fe4cdf37a8e77adc02f6681db4585bcaec" translate="yes" xml:space="preserve">
          <source>Whether the database can run many transactions on the same connection and supports transaction interleaving.</source>
          <target state="translated">データベースが同じ接続で多くのトランザクションを実行でき、トランザクションのインターリーブをサポートしているかどうか。</target>
        </trans-unit>
        <trans-unit id="a462b7f12b28eecbfb0402c1e98ea3fe33eab43b" translate="yes" xml:space="preserve">
          <source>Whether the default broker URL should be in memory. Ignored if an explicit broker has been specified.</source>
          <target state="translated">デフォルトのブローカの URL をメモリに保存するかどうか。明示的なブローカーが指定されている場合は無視されます。</target>
        </trans-unit>
        <trans-unit id="1daf30b22a96ff9718f70a10b6b1b405b9c126aa" translate="yes" xml:space="preserve">
          <source>Whether the default destination type is topic.</source>
          <target state="translated">既定の宛先タイプがトピックであるかどうか。</target>
        </trans-unit>
        <trans-unit id="28ca417fdb81c6e436c3def578eca7ce08c37da8" translate="yes" xml:space="preserve">
          <source>Whether the driver should use encrypted traffic.</source>
          <target state="translated">ドライバーが暗号化されたトラフィックを使用するかどうか。</target>
        </trans-unit>
        <trans-unit id="58bd1157d4037c3869a0cb7adbe8f507b98d8570" translate="yes" xml:space="preserve">
          <source>Whether the executor should wait for scheduled tasks to complete on shutdown.</source>
          <target state="translated">実行者がシャットダウン時にスケジュールされたタスクが完了するのを待つかどうか。</target>
        </trans-unit>
        <trans-unit id="2016c2d11b80c1093e5ea3b53246a09c0ce57e91" translate="yes" xml:space="preserve">
          <source>Whether the provider can run many transactions on the same connection and supports transaction interleaving.</source>
          <target state="translated">プロバイダが同じ接続で多くのトランザクションを実行でき、トランザクションのインターリーブをサポートしているかどうか。</target>
        </trans-unit>
        <trans-unit id="2ac4150b461868087a90d3bc177835fdf281034c" translate="yes" xml:space="preserve">
          <source>Whether the server should decode percent encoded slash characters. Enabling encoded slashes can have security implications due to different servers interpreting the slash differently. Only enable this if you have a legacy application that requires it.</source>
          <target state="translated">サーバがパーセントエンコードされたスラッシュ文字をデコードするかどうか。エンコードされたスラッシュを有効にすると、サーバによってスラッシュの解釈が異なるため、セキュリティ上の問題が生じる可能性があります。これを必要とするレガシーアプリケーションがある場合のみ有効にしてください。</target>
        </trans-unit>
        <trans-unit id="e3c8d10eb2f6a8bb9628a3de10bfd7fe08410970" translate="yes" xml:space="preserve">
          <source>Whether the trailing slash should be ignored when recording metrics.</source>
          <target state="translated">メトリクスを記録する際に、末尾のスラッシュを無視するかどうか。</target>
        </trans-unit>
        <trans-unit id="b7a543821141c21165c321edb9943c4325e87ad2" translate="yes" xml:space="preserve">
          <source>Whether the transaction manager should allow mixing XA and non-XA transactions.</source>
          <target state="translated">トランザクションマネージャがXAトランザクションと非XAトランザクションの混合を許可すべきかどうか。</target>
        </trans-unit>
        <trans-unit id="bf84fcdbec83af0d19a5300cc9684280795da782" translate="yes" xml:space="preserve">
          <source>Whether the transaction timeout should be set on the XAResource when it is enlisted.</source>
          <target state="translated">XAResourceがエンリストされたときに、トランザクションのタイムアウトを設定するかどうか。</target>
        </trans-unit>
        <trans-unit id="bfb1b9d465f880db908d2169fd38566fc0639307" translate="yes" xml:space="preserve">
          <source>Whether this resource is disabled, meaning it's temporarily forbidden to acquire a connection from its pool.</source>
          <target state="translated">このリソースが無効化されているかどうか、つまりプールからの接続の取得が一時的に禁止されているかどうか。</target>
        </trans-unit>
        <trans-unit id="ced698b777da39a9e1435844fe16b57091c90991" translate="yes" xml:space="preserve">
          <source>Whether to allocate buffers outside the Java heap. The default is derived from the maximum amount of memory that is available to the JVM.</source>
          <target state="translated">Javaヒープの外にバッファを割り当てるかどうか。デフォルトは、JVMで利用可能な最大メモリ量から導き出されます。</target>
        </trans-unit>
        <trans-unit id="8f668b60af02e8a037549f88be1bf3827999b8a3" translate="yes" xml:space="preserve">
          <source>Whether to allow migrations to be run out of order.</source>
          <target state="translated">マイグレーションの実行を許可するかどうか。</target>
        </trans-unit>
        <trans-unit id="26dfd1d957cee3d4cf1a855c943dc44d836ba3e2" translate="yes" xml:space="preserve">
          <source>Whether to allow mixing transactional and non-transactional statements within the same migration.</source>
          <target state="translated">同一のマイグレーション内で、トランザクションステートメントと非トランザクションステートメントの混合を許可するかどうか。</target>
        </trans-unit>
        <trans-unit id="6e48f5165cb6892cd369b9a185e76abefea8ed2d" translate="yes" xml:space="preserve">
          <source>Whether to always apply the MessageFormat rules, parsing even messages without arguments.</source>
          <target state="translated">MessageFormatルールを常に適用し、引数のないメッセージも解析するかどうか。</target>
        </trans-unit>
        <trans-unit id="69d84e8529bb755f9606e21cc033622178de5de1" translate="yes" xml:space="preserve">
          <source>Whether to always mark the session cookie as secure.</source>
          <target state="translated">セッションクッキーを常に安全なものとしてマークするかどうか。</target>
        </trans-unit>
        <trans-unit id="06ce550b2a1f9f20c0dd8878a6109fbbc66b30d7" translate="yes" xml:space="preserve">
          <source>Whether to automatically call baseline when migrating a non-empty schema.</source>
          <target state="translated">空ではないスキーマを移行する際に、自動的にベースラインを呼び出すかどうか。</target>
        </trans-unit>
        <trans-unit id="776f094b7a42775aa6039b34d87381450edfd420" translate="yes" xml:space="preserve">
          <source>Whether to automatically call clean when a validation error occurs.</source>
          <target state="translated">検証エラーが発生したときに自動的にクリーンを呼び出すかどうか。</target>
        </trans-unit>
        <trans-unit id="e8ce6ca0c611bca575eeae0b3bea5378444e7520" translate="yes" xml:space="preserve">
          <source>Whether to automatically call validate when performing a migration.</source>
          <target state="translated">移行の実行時に自動的にvalidateを呼び出すかどうか。</target>
        </trans-unit>
        <trans-unit id="de2d39bc1b6df7a04e3f79708dd0b83101ae8c7d" translate="yes" xml:space="preserve">
          <source>Whether to automatically start the scheduler after initialization.</source>
          <target state="translated">初期化後にスケジューラを自動的に起動するかどうか。</target>
        </trans-unit>
        <trans-unit id="a0acad5b6393f60ec365ad0bb70acd58e8ccba18" translate="yes" xml:space="preserve">
          <source>Whether to automatically time web client requests.</source>
          <target state="translated">ウェブクライアントのリクエストの時間を自動的に設定するかどうか。</target>
        </trans-unit>
        <trans-unit id="b5913e92088b28722a6f38cc6436d7d7424b03ef" translate="yes" xml:space="preserve">
          <source>Whether to automatically time web server requests.</source>
          <target state="translated">ウェブサーバーのリクエストの時間を自動的に設定するかどうか。</target>
        </trans-unit>
        <trans-unit id="17e3835fa4c550958380411f591966d3d60e3b53" translate="yes" xml:space="preserve">
          <source>Whether to batch SQL statements when executing them. Requires Flyway Teams.</source>
          <target state="translated">SQL文を実行する際にバッチ処理を行うかどうか。Flyway Teamsが必要です。</target>
        </trans-unit>
        <trans-unit id="72c6fcbf71fb223211ee90d8f7da733078454467" translate="yes" xml:space="preserve">
          <source>Whether to be lenient about parsing JSON that doesn't conform to RFC 4627.</source>
          <target state="translated">RFC 4627に準拠していないJSONのパースを甘くするかどうか。</target>
        </trans-unit>
        <trans-unit id="f7c4eee8375a82ba402b37527b8d7062f7b4691a" translate="yes" xml:space="preserve">
          <source>Whether to block when a connection is requested and the pool is full. Set it to false to throw a &quot;JMSException&quot; instead.</source>
          <target state="translated">接続が要求されたときにプールが一杯になったときにブロックするかどうか。false に設定すると、代わりに &quot;JMSException&quot; をスローします。</target>
        </trans-unit>
        <trans-unit id="ca0f7ba29d35eca2ffc1f78029d078ae6c9f4dfc" translate="yes" xml:space="preserve">
          <source>Whether to buffer output such that it is flushed only periodically.</source>
          <target state="translated">定期的にのみフラッシュされるように出力をバッファリングするかどうか。</target>
        </trans-unit>
        <trans-unit id="d07c2a2b6a7ccd0397def360da0496c388785922" translate="yes" xml:space="preserve">
          <source>Whether to cache message consumers.</source>
          <target state="translated">メッセージ消費者をキャッシュするかどうか。</target>
        </trans-unit>
        <trans-unit id="064cffda2d0205b9a675a03e44b82fdfb49d8d81" translate="yes" xml:space="preserve">
          <source>Whether to cache message producers.</source>
          <target state="translated">メッセージプロデューサをキャッシュするかどうか。</target>
        </trans-unit>
        <trans-unit id="2e43b03bd401bb5fd4c4094acce1a54480951097" translate="yes" xml:space="preserve">
          <source>Whether to cache sessions.</source>
          <target state="translated">セッションをキャッシュするかどうか。</target>
        </trans-unit>
        <trans-unit id="70ddd6e341bf74000b7ffde54533ea4ccac9b206" translate="yes" xml:space="preserve">
          <source>Whether to check for log file existence so it can be recreated it if an external process has renamed it.</source>
          <target state="translated">外部プロセスがログファイルの名前を変更した場合に、ログファイルの存在を確認してログファイルを再作成できるようにするかどうか。</target>
        </trans-unit>
        <trans-unit id="6de7d818a142a96a3c1ba84768c1df26ce14c5dc" translate="yes" xml:space="preserve">
          <source>Whether to check that migration scripts location exists.</source>
          <target state="translated">マイグレーションスクリプトの場所が存在するかどうかを確認するかどうか。</target>
        </trans-unit>
        <trans-unit id="a7076b91dd2eda612d27759d0454d30c8234a002" translate="yes" xml:space="preserve">
          <source>Whether to check that the template exists before rendering it.</source>
          <target state="translated">レンダリングする前にテンプレートが存在するかどうかをチェックするかどうか。</target>
        </trans-unit>
        <trans-unit id="b09f98d6577e0532c4d0a04ddd301aedbd2c4181" translate="yes" xml:space="preserve">
          <source>Whether to check that the templates location exists.</source>
          <target state="translated">テンプレートの場所が存在することを確認するかどうか</target>
        </trans-unit>
        <trans-unit id="3240b3ca327077f198e5c2bb5f1a728fab7ac1bb" translate="yes" xml:space="preserve">
          <source>Whether to clean the archive log files on startup.</source>
          <target state="translated">起動時にアーカイブログファイルをクリーンアップするかどうか。</target>
        </trans-unit>
        <trans-unit id="e20c03aa7313c876ec6e05ef1bd310d8fb324e60" translate="yes" xml:space="preserve">
          <source>Whether to clear all checksums in the current changelog, so they will be recalculated upon the next update.</source>
          <target state="translated">現在の変更履歴にあるすべてのチェックサムをクリアし、次回の更新時に再計算されるようにするかどうか。</target>
        </trans-unit>
        <trans-unit id="3da5f3879cf8f917fc84dd2651a19c338d9b0c34" translate="yes" xml:space="preserve">
          <source>Whether to create an AmqpAdmin bean.</source>
          <target state="translated">AmqpAdminビーンを作成するかどうか。</target>
        </trans-unit>
        <trans-unit id="575799cef965480fe14f016c6f018ea921ef6dd0" translate="yes" xml:space="preserve">
          <source>Whether to create the Influx database if it does not exist before attempting to publish metrics to it.</source>
          <target state="translated">メトリクスを公開しようとする前に Influx データベースが存在しない場合に、そのデータベースを作成するかどうか。</target>
        </trans-unit>
        <trans-unit id="08a02c446de78acf585d7325f10108b1b8565363" translate="yes" xml:space="preserve">
          <source>Whether to create the index automatically if it does not exist.</source>
          <target state="translated">インデックスが存在しない場合に自動的に作成するかどうか。</target>
        </trans-unit>
        <trans-unit id="b04dcdd891e2ccec8d3c233bb097b5c075e38cfb" translate="yes" xml:space="preserve">
          <source>Whether to defer inclusion of the date stamp in the file name until rotate time.</source>
          <target state="translated">ファイル名に日付スタンプを含めるのを回転時間まで延期するかどうか。</target>
        </trans-unit>
        <trans-unit id="b0d60221b35120eaf226407943723aaeadc52108" translate="yes" xml:space="preserve">
          <source>Whether to deny meters from emitting any metrics.</source>
          <target state="translated">メーターが何かの指標を出すことを否定するかどうか</target>
        </trans-unit>
        <trans-unit id="0523ec20da1cb7d8ef87fc3e6dcfc0f80f2370cf" translate="yes" xml:space="preserve">
          <source>Whether to disable cleaning of the database.</source>
          <target state="translated">データベースのクリーニングを無効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="0fa86a1fa6bb56078f075d118a2366e95d204760" translate="yes" xml:space="preserve">
          <source>Whether to disable the escaping of HTML characters such as '&amp;lt;', '&amp;gt;', etc.</source>
          <target state="translated">'&amp;lt;'、 '&amp;gt;'などのHTML文字のエスケープを無効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="1ab28b63bf97e1a59ccb3f6dd830a7274603c311" translate="yes" xml:space="preserve">
          <source>Whether to discover and query all cluster nodes for obtaining the cluster topology. When set to false, only the initial seed nodes are used as sources for topology discovery.</source>
          <target state="translated">クラスタトポロジを取得するために、すべてのクラスタノードを発見して問い合わせを行うかどうか。falseに設定すると、初期シードノードのみがトポロジ発見のソースとして使用されます。</target>
        </trans-unit>
        <trans-unit id="56716408ee02874657ddd15b31ab23e573c43eb0" translate="yes" xml:space="preserve">
          <source>Whether to dispatch OPTIONS requests to the FrameworkServlet doService method.</source>
          <target state="translated">OPTIONS リクエストを FrameworkServlet doService メソッドにディスパッチするかどうか。</target>
        </trans-unit>
        <trans-unit id="2f45f744af7b14b2d1e548d401258374044e9bb7" translate="yes" xml:space="preserve">
          <source>Whether to dispatch TRACE requests to the FrameworkServlet doService method.</source>
          <target state="translated">TRACE リクエストを FrameworkServlet doService メソッドにディスパッチするかどうか。</target>
        </trans-unit>
        <trans-unit id="3a6f09830dc2d85af886a5ae246c3e7f064fb95c" translate="yes" xml:space="preserve">
          <source>Whether to enable Cassandra health check.</source>
          <target state="translated">カサンドラの健康チェックを有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="f999eea52abd9684db21ccabd25864ce4dd2e4e8" translate="yes" xml:space="preserve">
          <source>Whether to enable Couchbase health check.</source>
          <target state="translated">Couchbaseの健康チェックを有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="992d14be64b746fd4a38f7e86d06e494c19bc236" translate="yes" xml:space="preserve">
          <source>Whether to enable Elasticsearch health check.</source>
          <target state="translated">Elasticsearchのヘルスチェックを有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="cd12df09f8847728360870b90af1800ea0434462" translate="yes" xml:space="preserve">
          <source>Whether to enable Elasticsearch repositories.</source>
          <target state="translated">Elasticsearchのリポジトリを有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="ff98d1e883840c027910b5bb2f2a4edcdb2d2fc3" translate="yes" xml:space="preserve">
          <source>Whether to enable GZIP compression of metrics batches published to Influx.</source>
          <target state="translated">Influxに公開されたメトリクスバッチのGZIP圧縮を有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="39cbd267c5a20dcf34a87f47bb35c58f5c2e33f4" translate="yes" xml:space="preserve">
          <source>Whether to enable HTTP request-response tracing.</source>
          <target state="translated">HTTPリクエスト-レスポンストレースを有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="f815bb5d2f6edb041431384a61f007463713e876" translate="yes" xml:space="preserve">
          <source>Whether to enable HTTP/2 support, if the current environment supports it.</source>
          <target state="translated">現在の環境がHTTP/2をサポートしている場合、HTTP/2のサポートを有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="a363bd4841f63fda607941c1d4f860541c167391" translate="yes" xml:space="preserve">
          <source>Whether to enable InfluxDB health check.</source>
          <target state="translated">InfluxDBのヘルスチェックを有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="3ee55e70ff08f28589c1988438e17101b1220587" translate="yes" xml:space="preserve">
          <source>Whether to enable JAAS configuration.</source>
          <target state="translated">JAAS設定を有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="7786b2b057b3ae646c61640bd1ed7b645e2d1883" translate="yes" xml:space="preserve">
          <source>Whether to enable JDBC repositories.</source>
          <target state="translated">JDBCリポジトリを有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="b393797c0dea4a236305b28a9ea5cb6830bbb28b" translate="yes" xml:space="preserve">
          <source>Whether to enable JMS health check.</source>
          <target state="translated">JMSのヘルスチェックを有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="d4bead9c30463a755b01c8adb2e067cffdf477e7" translate="yes" xml:space="preserve">
          <source>Whether to enable JPA repositories.</source>
          <target state="translated">JPAリポジトリを有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="6214d3814963c3bb44f5abb4acd10e19302b333f" translate="yes" xml:space="preserve">
          <source>Whether to enable JTA support.</source>
          <target state="translated">JTAサポートを有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="51c0f20697cf0d4d81529ba41cb005f05a8ceec5" translate="yes" xml:space="preserve">
          <source>Whether to enable LDAP health check.</source>
          <target state="translated">LDAP ヘルスチェックを有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="f45f260e25dad68f1826c6e86ce8dec792ee72d1" translate="yes" xml:space="preserve">
          <source>Whether to enable LDAP repositories.</source>
          <target state="translated">LDAPリポジトリを有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="620dfaa4e222232a9750f61319e24a5c052bd256" translate="yes" xml:space="preserve">
          <source>Whether to enable LDAP schema validation.</source>
          <target state="translated">LDAPスキーマ検証を有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="b6cc48a1b2d0e6318b6399c7eecaf02bd3420266" translate="yes" xml:space="preserve">
          <source>Whether to enable Liquibase support.</source>
          <target state="translated">Liquibase のサポートを有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="0c25c9485b5937731dbdd59acabebe26e2f676a0" translate="yes" xml:space="preserve">
          <source>Whether to enable MVC view resolution for this technology.</source>
          <target state="translated">この技術のためにMVCビューの解像度を有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="cf5f0e359f801d9918916eab665cf8db31b3bbbe" translate="yes" xml:space="preserve">
          <source>Whether to enable Mail health check.</source>
          <target state="translated">メールヘルスチェックを有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="518b2b801502234d8dc7e32653e484b6fe2f9106" translate="yes" xml:space="preserve">
          <source>Whether to enable MongoDB health check.</source>
          <target state="translated">MongoDBのヘルスチェックを有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="7357209b98d6782fc50cab424a539c935df3e33a" translate="yes" xml:space="preserve">
          <source>Whether to enable Neo4j health check.</source>
          <target state="translated">Neo4jのヘルスチェックを有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="c115444d85ba90837693f28b542f71047d61e62f" translate="yes" xml:space="preserve">
          <source>Whether to enable R2DBC repositories.</source>
          <target state="translated">R2DBC リポジトリを有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="9a27479e8331f6c265e86f7ab4f0dd0e76b34998" translate="yes" xml:space="preserve">
          <source>Whether to enable RabbitMQ health check.</source>
          <target state="translated">RabbitMQのヘルスチェックを有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="d417ed2796deab8a36ff1bb012e5fb9d4d6f2e94" translate="yes" xml:space="preserve">
          <source>Whether to enable Redis health check.</source>
          <target state="translated">Redisのヘルスチェックを有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="aa9827d0bb40ab24534c7da75b6db17e30a59a80" translate="yes" xml:space="preserve">
          <source>Whether to enable Redis repositories.</source>
          <target state="translated">Redisリポジトリを有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="7d078d8cd37e6a87599a768d1bd356ab1c47c3e1" translate="yes" xml:space="preserve">
          <source>Whether to enable SSL support.</source>
          <target state="translated">SSL対応を有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="60799845ad99fe8ee14ccec4edaec9555eae5634" translate="yes" xml:space="preserve">
          <source>Whether to enable SSL support. Determined automatically if an address is provided with the protocol (amqp:// vs. amqps://).</source>
          <target state="translated">SSLサポートを有効にするかどうか。アドレスがプロトコルで提供されているかどうかを自動的に判断します (amqp://vs.amqps://)。</target>
        </trans-unit>
        <trans-unit id="f8a68defdcf69e7a699758a363f2b7f02dc1a65f" translate="yes" xml:space="preserve">
          <source>Whether to enable SSL support. Enabled automatically if a &quot;keyStore&quot; is provided unless specified otherwise.</source>
          <target state="translated">SSLサポートを有効にするかどうか。特に指定がない限り、&quot;keyStore &quot;が提供されていれば自動的に有効になります。</target>
        </trans-unit>
        <trans-unit id="eb1f5841aa457ffdc9adc1d2b7deb609092a3fb8" translate="yes" xml:space="preserve">
          <source>Whether to enable Solr health check.</source>
          <target state="translated">Solrのヘルスチェックを有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="1eeabec029a4feedc2ff009ec7a771df6358affd" translate="yes" xml:space="preserve">
          <source>Whether to enable Solr repositories.</source>
          <target state="translated">Solrのリポジトリを有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="7d42ff0d5797cfb3ddafd6babf79d6c549547e32" translate="yes" xml:space="preserve">
          <source>Whether to enable Spring's FormContentFilter.</source>
          <target state="translated">SpringのFormContentFilterを有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="ad8d6c85f993ff99fd5529b5a070fccdb17b3ac9" translate="yes" xml:space="preserve">
          <source>Whether to enable Spring's HiddenHttpMethodFilter.</source>
          <target state="translated">SpringのHiddenHttpMethodFilterを有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="8408b7aa50057bcea36bfdd484992c62e98105c8" translate="yes" xml:space="preserve">
          <source>Whether to enable Thymeleaf view resolution for Web frameworks.</source>
          <target state="translated">WebフレームワークでThymeleafのビュー解像度を有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="94d189d2ad174ae8155bd06b76e2b3358fb23bf5" translate="yes" xml:space="preserve">
          <source>Whether to enable a livereload.com-compatible server.</source>
          <target state="translated">livereload.com対応サーバーを有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="1d905606dad6b57d5b67abb615c8f88a1a83f568" translate="yes" xml:space="preserve">
          <source>Whether to enable access log rotation.</source>
          <target state="translated">アクセスログのローテーションを有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="fa8e1ee8b042a5946cfef1515d70c2acbac86987" translate="yes" xml:space="preserve">
          <source>Whether to enable admin features for the application.</source>
          <target state="translated">アプリケーションの管理機能を有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="a77325baa22590bac68981d2c5e84482caf9b2b3" translate="yes" xml:space="preserve">
          <source>Whether to enable auto-index creation.</source>
          <target state="translated">自動インデックス作成を有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="fd592b25c884e8c970370510ba07f04219a72979" translate="yes" xml:space="preserve">
          <source>Whether to enable automatic restart.</source>
          <target state="translated">自動再起動を有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="893cacc5afe1f20a1efc4f29584a8f354ffe9d4a" translate="yes" xml:space="preserve">
          <source>Whether to enable build info.</source>
          <target state="translated">ビルド情報を有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="63c68427d171ad86215d920c1c458a202e5d0e60" translate="yes" xml:space="preserve">
          <source>Whether to enable cache statistics.</source>
          <target state="translated">キャッシュ統計を有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="5e9165966537db32546f261d59f72373043aca62" translate="yes" xml:space="preserve">
          <source>Whether to enable caching in the Resource chain.</source>
          <target state="translated">リソースチェーンでキャッシュを有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="e661fa24ccfd194a2938080af4f90fade7822521" translate="yes" xml:space="preserve">
          <source>Whether to enable database health check.</source>
          <target state="translated">データベースのヘルスチェックを有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="d761e8b2896ea42e6468c99246ed05ebcc1e869f" translate="yes" xml:space="preserve">
          <source>Whether to enable default health indicators.</source>
          <target state="translated">デフォルトの健康指標を有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="78a20be068df2ec46056e91da97d40b521607216" translate="yes" xml:space="preserve">
          <source>Whether to enable default info contributors.</source>
          <target state="translated">デフォルトの情報投稿者を有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="8f0bb76b9f4fdd6ec1dcb2ce7d988d1ee29e5332" translate="yes" xml:space="preserve">
          <source>Whether to enable default metrics exporters.</source>
          <target state="translated">デフォルトのメトリクス エクスポータを有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="b6bdf0bbe28c6c782bd00a436569a22610f78c71" translate="yes" xml:space="preserve">
          <source>Whether to enable default resource handling.</source>
          <target state="translated">デフォルトのリソース処理を有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="7a2da15fb427278b15d402c7b9ac955f4f431ece" translate="yes" xml:space="preserve">
          <source>Whether to enable development property defaults.</source>
          <target state="translated">開発プロパティのデフォルトを有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="31f56419b2aa2a2db9e9e338da3848dd4bcf45f0" translate="yes" xml:space="preserve">
          <source>Whether to enable disk logging.</source>
          <target state="translated">ディスクロギングを有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="23dd61f30e59dd38e243c2a9d5d1aa99b0b72df6" translate="yes" xml:space="preserve">
          <source>Whether to enable disk space health check.</source>
          <target state="translated">ディスクスペースのヘルスチェックを有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="e4e6fd03d2cba8e7c6f237d2e940d488a62c6732" translate="yes" xml:space="preserve">
          <source>Whether to enable embedded mode if the Artemis server APIs are available.</source>
          <target state="translated">ArtemisサーバーAPIが利用可能な場合に、埋め込みモードを有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="18337f10eb26bfaa6c3b7035c953f1fadde3bff3" translate="yes" xml:space="preserve">
          <source>Whether to enable enum value translation through the Spring Data REST default resource bundle.</source>
          <target state="translated">Spring Data RESTのデフォルトリソースバンドルを介してenum値の変換を有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="a3290f9fb576002745ce0281f6787d425071d21f" translate="yes" xml:space="preserve">
          <source>Whether to enable environment info.</source>
          <target state="translated">環境情報を有効にするかどうか</target>
        </trans-unit>
        <trans-unit id="7d44706584b9c70ceb5686bb1fa1a0cba74b440b" translate="yes" xml:space="preserve">
          <source>Whether to enable explicit QoS (Quality of Service) when sending a message. When enabled, the delivery mode, priority and time-to-live properties will be used when sending a message. QoS is automatically enabled when at least one of those settings is customized.</source>
          <target state="translated">メッセージ送信時に明示的なQoS(Quality of Service)を有効にするかどうかを指定します。有効にすると、メッセージ送信時に配信モード、優先度、およびタイムトゥライフのプロパティが使用されます。QoS は、これらの設定のうち少なくとも 1 つがカスタマイズされている場合、自動的に有効になります。</target>
        </trans-unit>
        <trans-unit id="205fe3f6d02865a4e829493e0147a61c30979784" translate="yes" xml:space="preserve">
          <source>Whether to enable extended Cloud Foundry actuator endpoints.</source>
          <target state="translated">拡張Cloud Foundryアクチュエータのエンドポイントを有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="5ba8fa9808bb1a07e1d84ab8f50634c57f3f49a7" translate="yes" xml:space="preserve">
          <source>Whether to enable flyway.</source>
          <target state="translated">フライウェイを有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="43f8598ec8b441d3ae6fa8f84747c38126b41c82" translate="yes" xml:space="preserve">
          <source>Whether to enable git info.</source>
          <target state="translated">git infoを有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="65f32f79f4effee4bb6984cea1d67f5ffed123fe" translate="yes" xml:space="preserve">
          <source>Whether to enable hostname verification.</source>
          <target state="translated">ホスト名の検証を有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="f5fb577c319c502657a391a7e59ea60ab7e7028c" translate="yes" xml:space="preserve">
          <source>Whether to enable http encoding support.</source>
          <target state="translated">http エンコーディングのサポートを有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="3238877e16978789394e2a38ee471465cf91a7c3" translate="yes" xml:space="preserve">
          <source>Whether to enable liveness and readiness probes.</source>
          <target state="translated">活力と準備状態のプローブを有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="bde9db0503b9fbc80e111547015ef705b040dc97" translate="yes" xml:space="preserve">
          <source>Whether to enable liveness state health check.</source>
          <target state="translated">活力状態の健康チェックを有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="f4ce9a489548d3f7114d4f63ba6062eaab359c74" translate="yes" xml:space="preserve">
          <source>Whether to enable logging of SQL statements.</source>
          <target state="translated">SQL文のロギングを有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="90db37c089ec5cb922b1b59e47fbe500e8f907f1" translate="yes" xml:space="preserve">
          <source>Whether to enable mandatory messages.</source>
          <target state="translated">必須メッセージを有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="f47fb3fe651e8fa05080f4251ce93107836dc36c" translate="yes" xml:space="preserve">
          <source>Whether to enable metrics.</source>
          <target state="translated">メトリクスを有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="4fefd9697531897bb181da79ecf5157ca25c1111" translate="yes" xml:space="preserve">
          <source>Whether to enable or disable all endpoints by default.</source>
          <target state="translated">デフォルトですべてのエンドポイントを有効にするか無効にするか。</target>
        </trans-unit>
        <trans-unit id="8664b1b345cf54bb7b37a6af21774c0530c55fbb" translate="yes" xml:space="preserve">
          <source>Whether to enable persistent store.</source>
          <target state="translated">永続的なストアを有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="7c7122d4ce8d9870a4358d6e98c6650e78137153" translate="yes" xml:space="preserve">
          <source>Whether to enable ping health check.</source>
          <target state="translated">pingのヘルスチェックを有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="253ab330b5e51b7124d4e700accd5faa098fb5db" translate="yes" xml:space="preserve">
          <source>Whether to enable publisher returns.</source>
          <target state="translated">パブリッシャーリターンを有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="b67764d739e641994c7e1807e636559c584981c5" translate="yes" xml:space="preserve">
          <source>Whether to enable publishing descriptions as part of the scrape payload to Prometheus. Turn this off to minimize the amount of data sent on each scrape.</source>
          <target state="translated">プロメテウスへのスクレイプペイロードの一部として説明文を公開することを有効にするかどうか。これをオフにすると、各スクレイプで送信されるデータ量を最小限に抑えることができます。</target>
        </trans-unit>
        <trans-unit id="afd1459f146d5a7c91df6876ad6e1f02be9e97e3" translate="yes" xml:space="preserve">
          <source>Whether to enable readiness state health check.</source>
          <target state="translated">準備状態の健康チェックを有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="4634c24fd9a0b53d245f0e117f1da76bf5167fed" translate="yes" xml:space="preserve">
          <source>Whether to enable remote access.</source>
          <target state="translated">リモートアクセスを有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="ac3bbd7ad7089ff552b60d6ee72c52492d04ab0d" translate="yes" xml:space="preserve">
          <source>Whether to enable remote restart.</source>
          <target state="translated">リモート再起動を有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="22854bc1c83a1da2663558bdde25fbb069860808" translate="yes" xml:space="preserve">
          <source>Whether to enable resolution of already compressed resources (gzip, brotli). Checks for a resource name with the '.gz' or '.br' file extensions.</source>
          <target state="translated">既に圧縮されているリソース (gzip,brotli)の解決を有効にするかどうか。リソース名が '.gz' または '.br' ファイル拡張子を持つかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="6b924228d360a0992db39b90215d93a5a6d9c2f8" translate="yes" xml:space="preserve">
          <source>Whether to enable serialization of complex map keys (i.e. non-primitives).</source>
          <target state="translated">複雑なマップキー(すなわち非プリミティブ)のシリアライズを有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="dd5c8db1c9329eac9fb11b0de7a00fe15c5b946f" translate="yes" xml:space="preserve">
          <source>Whether to enable server side certificate validation.</source>
          <target state="translated">サーバーサイド証明書の検証を有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="516290e52cae71fb243b762d96f4410a89a31138" translate="yes" xml:space="preserve">
          <source>Whether to enable storage of audit events.</source>
          <target state="translated">監査イベントの保存を有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="e04914cfb30766b904fe593d3e0e58f15bea5fc7" translate="yes" xml:space="preserve">
          <source>Whether to enable streaming to Atlas LWC.</source>
          <target state="translated">アトラスLWCへのストリーミングを有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="39d634f35d6dea877836f40779465bda0f62de50" translate="yes" xml:space="preserve">
          <source>Whether to enable support for Oracle SQL*Plus commands. Requires Flyway Teams.</source>
          <target state="translated">Oracle SQL*Plusコマンドのサポートを有効にするかどうか。Flyway Teamsが必要です。</target>
        </trans-unit>
        <trans-unit id="717e632d07f6ac0c28202d032bf53429529f2b1c" translate="yes" xml:space="preserve">
          <source>Whether to enable support of multipart uploads.</source>
          <target state="translated">マルチパートアップロードのサポートを有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="fd6d051fd02ec1149ee21da2c231178023e32889" translate="yes" xml:space="preserve">
          <source>Whether to enable template caching.</source>
          <target state="translated">テンプレートキャッシュを有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="438e15fced0aa3bb0d73e8d978e6cfdbcc36b764" translate="yes" xml:space="preserve">
          <source>Whether to enable the PersistenceExceptionTranslationPostProcessor.</source>
          <target state="translated">PersistenceExceptionTranslationPostProcessorを有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="d6a7e6e678e3dcbc1166e1933e74d112649196d2" translate="yes" xml:space="preserve">
          <source>Whether to enable the Spring Resource Handling chain. By default, disabled unless at least one strategy has been enabled.</source>
          <target state="translated">Spring Resource Handlingチェーンを有効にするかどうか。デフォルトでは、少なくとも1つのストラテジーが有効になっていない限り無効です。</target>
        </trans-unit>
        <trans-unit id="fd33ea7720b98ee9c923f0afe7f26bd013d194e2" translate="yes" xml:space="preserve">
          <source>Whether to enable the access log.</source>
          <target state="translated">アクセスログを有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="910aa80e2bd2bf5fc98325bdd87ce7159c1c2e38" translate="yes" xml:space="preserve">
          <source>Whether to enable the auditevents endpoint.</source>
          <target state="translated">auditeventsエンドポイントを有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="a1b4dc00df9c516e964baa8de720e34260c82361" translate="yes" xml:space="preserve">
          <source>Whether to enable the beans endpoint.</source>
          <target state="translated">ビーンズエンドポイントを有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="0005a03444ade4119f701dc46f78c5525c489a35" translate="yes" xml:space="preserve">
          <source>Whether to enable the caches endpoint.</source>
          <target state="translated">キャッシュエンドポイントを有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="e99c1a1d03276a84b5c4d1f8f8a0dcde35cd35ad" translate="yes" xml:space="preserve">
          <source>Whether to enable the conditions endpoint.</source>
          <target state="translated">条件エンドポイントを有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="4b97e36c974e87d02ec75401dd9c78b62f7efd3c" translate="yes" xml:space="preserve">
          <source>Whether to enable the configprops endpoint.</source>
          <target state="translated">configprops エンドポイントを有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="77ad28eb1e8a044b6ec1ea8c2178d3dcb1b093cf" translate="yes" xml:space="preserve">
          <source>Whether to enable the console.</source>
          <target state="translated">コンソールを有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="44a59cf8640a26ae596008e8b3193532782d8161" translate="yes" xml:space="preserve">
          <source>Whether to enable the content Version Strategy.</source>
          <target state="translated">コンテンツのバージョン戦略を有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="5a6ca47688bacde3dacaca47f1d83bf8953b2f8c" translate="yes" xml:space="preserve">
          <source>Whether to enable the default error page displayed in browsers in case of a server error.</source>
          <target state="translated">サーバーエラー時にブラウザに表示されるデフォルトのエラーページを有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="8deaf0fe891861fe6318718ae47288ebb5875150" translate="yes" xml:space="preserve">
          <source>Whether to enable the env endpoint.</source>
          <target state="translated">envエンドポイントを有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="ea592e8fa2b73873d4a7b1878315f018c2bd970f" translate="yes" xml:space="preserve">
          <source>Whether to enable the fixed Version Strategy.</source>
          <target state="translated">固定バージョン戦略を有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="bc610d6af62f1011f48a5de8462e3a09defccd56" translate="yes" xml:space="preserve">
          <source>Whether to enable the flyway endpoint.</source>
          <target state="translated">フライウェイエンドポイントを有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="1c1b5fd45514b47ac7ef54827796dde167fbd819" translate="yes" xml:space="preserve">
          <source>Whether to enable the health endpoint.</source>
          <target state="translated">ヘルスエンドポイントを有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="65bcd4a3ca7b05cb3a7f707e523415f6ae476d08" translate="yes" xml:space="preserve">
          <source>Whether to enable the heapdump endpoint.</source>
          <target state="translated">ヒープダンプエンドポイントを有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="f9597a07b50ebd8dce5b38eb959d157a85aa1b05" translate="yes" xml:space="preserve">
          <source>Whether to enable the httptrace endpoint.</source>
          <target state="translated">httptrace エンドポイントを有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="d0b5019cd8b4fcd88b79807c525b69cdb232589b" translate="yes" xml:space="preserve">
          <source>Whether to enable the info endpoint.</source>
          <target state="translated">infoエンドポイントを有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="e450418baa9deee368b3f6774654c4283121d946" translate="yes" xml:space="preserve">
          <source>Whether to enable the integrationgraph endpoint.</source>
          <target state="translated">Integrationgraphエンドポイントを有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="7a6773a56e4f78d3d6d8d75ba71d5b4c69f0ac62" translate="yes" xml:space="preserve">
          <source>Whether to enable the jolokia endpoint.</source>
          <target state="translated">jolokiaのエンドポイントを有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="c56959e716d76cefb143713200367e13211a67b7" translate="yes" xml:space="preserve">
          <source>Whether to enable the liquibase endpoint.</source>
          <target state="translated">リキベースエンドポイントを有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="2004a96e30c654891fb7e828c3425289c833c6db" translate="yes" xml:space="preserve">
          <source>Whether to enable the logfile endpoint.</source>
          <target state="translated">ログファイルエンドポイントを有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="8aa41cf0fb2048761128df4599f470a58282c891" translate="yes" xml:space="preserve">
          <source>Whether to enable the loggers endpoint.</source>
          <target state="translated">ロガーのエンドポイントを有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="8d53499202ac60ca28954fcff6fe2c93d92c0f6d" translate="yes" xml:space="preserve">
          <source>Whether to enable the mappings endpoint.</source>
          <target state="translated">マッピングエンドポイントを有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="464c371fe5c52f8be936613abf4678c4f4b05d39" translate="yes" xml:space="preserve">
          <source>Whether to enable the metrics endpoint.</source>
          <target state="translated">メトリクス・エンドポイントを有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="de3c7efbddeac448b72479c227b912b1d3a626eb" translate="yes" xml:space="preserve">
          <source>Whether to enable the prometheus endpoint.</source>
          <target state="translated">prometheus エンドポイントを有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="285fd7419feb58aea37998e85e9eb6b597ed9ad7" translate="yes" xml:space="preserve">
          <source>Whether to enable the scheduledtasks endpoint.</source>
          <target state="translated">scheduletasksエンドポイントを有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="8a8438c9dac10ff652b6d2cd65b9d0507be44e0f" translate="yes" xml:space="preserve">
          <source>Whether to enable the sessions endpoint.</source>
          <target state="translated">セッションのエンドポイントを有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="bf110aec40deb5ab4906afa8c0af64eb1b0e5ec7" translate="yes" xml:space="preserve">
          <source>Whether to enable the shutdown endpoint.</source>
          <target state="translated">シャットダウンエンドポイントを有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="53aebcdae163f498f6a78f8298f7a58d5f7309c0" translate="yes" xml:space="preserve">
          <source>Whether to enable the startup endpoint.</source>
          <target state="translated">起動エンドポイントを有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="dcdc35d9b769834985ae792b81ea509a7e4c4067" translate="yes" xml:space="preserve">
          <source>Whether to enable the threaddump endpoint.</source>
          <target state="translated">スレッドダンプエンドポイントを有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="90e25583f40760d9340e0043b26a19d2b702ccae" translate="yes" xml:space="preserve">
          <source>Whether to enable trace output.</source>
          <target state="translated">トレース出力を有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="41047f4f4f75d1b1debbff37a9986f0a6a4b0ba2" translate="yes" xml:space="preserve">
          <source>Whether to enable warn logging of exceptions resolved by a &quot;HandlerExceptionResolver&quot;, except for &quot;DefaultHandlerExceptionResolver&quot;.</source>
          <target state="translated">DefaultHandlerExceptionResolver」以外の「HandlerExceptionResolver」で解決された例外の警告ロギングを有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="ffbc01837e197768b12ba403aa4e9bfa1d225eee" translate="yes" xml:space="preserve">
          <source>Whether to exclude all fields from consideration for serialization or deserialization that do not have the &quot;Expose&quot; annotation.</source>
          <target state="translated">Expose」アノテーションを持たないすべてのフィールドをシリアライズまたはデシリアライズの検討対象から除外するかどうか。</target>
        </trans-unit>
        <trans-unit id="d7bb8f9ddc323ef1516a7845e0be58d3ee5b7e93" translate="yes" xml:space="preserve">
          <source>Whether to exclude inner classes during serialization.</source>
          <target state="translated">シリアライズ時に内部クラスを除外するかどうか。</target>
        </trans-unit>
        <trans-unit id="0d012f7e17272da2bf2309f4a3f7c14a072ffa74" translate="yes" xml:space="preserve">
          <source>Whether to expose a RequestContext for use by Spring's macro library, under the name &quot;springMacroRequestContext&quot;.</source>
          <target state="translated">Springのマクロライブラリで使用するRequestContextを &quot;springMacroRequestContext &quot;という名前で公開するかどうか。</target>
        </trans-unit>
        <trans-unit id="329ab47b8a8353d6e0b649c7fd36d30336180366" translate="yes" xml:space="preserve">
          <source>Whether to expose and assume 1-based page number indexes. Defaults to &quot;false&quot;, meaning a page number of 0 in the request equals the first page.</source>
          <target state="translated">1ベースのページ番号インデックスを公開するかどうか。デフォルトは &quot;false&quot; で、リクエスト中のページ番号が 0 の場合は最初のページに等しいことを意味します。</target>
        </trans-unit>
        <trans-unit id="98fab74174fd6a8e397fe04382b37520c8e5b082" translate="yes" xml:space="preserve">
          <source>Whether to fail fast if the broker is not available on startup.</source>
          <target state="translated">起動時にブローカーが利用できない場合、早く失敗するかどうか。</target>
        </trans-unit>
        <trans-unit id="fd871aafb968ce14268209a901263498c18b4a34" translate="yes" xml:space="preserve">
          <source>Whether to fail if the queues declared by the container are not available on the broker and/or whether to stop the container if one or more queues are deleted at runtime.</source>
          <target state="translated">コンテナによって宣言されたキューがブローカ上で利用できない場合に失敗するかどうか、および/または実行時に1つ以上のキューが削除された場合にコンテナを停止するかどうか。</target>
        </trans-unit>
        <trans-unit id="e7d4a8ce0696431044fb905fe51871bdee2956c5" translate="yes" xml:space="preserve">
          <source>Whether to fail if the queues declared by the container are not available on the broker.</source>
          <target state="translated">コンテナで宣言されたキューがブローカ上で利用できない場合に失敗するかどうか。</target>
        </trans-unit>
        <trans-unit id="1c3bdb221c9290c06581cd8bb0aade09cdcdc53d" translate="yes" xml:space="preserve">
          <source>Whether to fall back to the system Locale if no files for a specific Locale have been found. if this is turned off, the only fallback will be the default file (e.g. &quot;messages.properties&quot; for basename &quot;messages&quot;).</source>
          <target state="translated">特定のロケール用のファイルが見つからなかった場合に、システムのロケールにフォールバックするかどうかを指定します。この設定をオフにすると、デフォルトのファイル (例えば、ベースネーム &quot;messages&quot; の &quot;messages.properties&quot; など)がフォールバックされます。</target>
        </trans-unit>
        <trans-unit id="5f2e2dc024c882704d55a5afdf4e7e97390e5fce" translate="yes" xml:space="preserve">
          <source>Whether to first drop the database schema.</source>
          <target state="translated">最初にデータベーススキーマをドロップするかどうか。</target>
        </trans-unit>
        <trans-unit id="a8ecf95c5a8cb92ab343ff185724909cf96859de" translate="yes" xml:space="preserve">
          <source>Whether to generate a random database name. Ignore any configured name when enabled.</source>
          <target state="translated">ランダムなデータベース名を生成するかどうか。有効な場合は、設定された名前を無視します。</target>
        </trans-unit>
        <trans-unit id="14f41d49d13c6060d23c74ac941914db7e6b9db8" translate="yes" xml:space="preserve">
          <source>Whether to generate a random datasource name.</source>
          <target state="translated">ランダムなデータソース名を生成するかどうか。</target>
        </trans-unit>
        <trans-unit id="971d0e30891f6153f5e4efdc5f2e0dd245ecb4c2" translate="yes" xml:space="preserve">
          <source>Whether to generate non executable JSON by prefixing the output with some special text.</source>
          <target state="translated">出力の前に特別なテキストを付加して、実行不可能なJSONを生成するかどうか。</target>
        </trans-unit>
        <trans-unit id="ffa5185f6cd6280dfb03fa9bcf1540b80393137a" translate="yes" xml:space="preserve">
          <source>Whether to group all pending migrations together in the same transaction when applying them.</source>
          <target state="translated">保留中のすべての移行を適用する際に、同じトランザクション内でグループ化するかどうか。</target>
        </trans-unit>
        <trans-unit id="48be1796e6c707da145ab3bae3785c1956a09bf5" translate="yes" xml:space="preserve">
          <source>Whether to handle message mapping for RSocket via Spring Integration.</source>
          <target state="translated">Spring Integrationを介してRSocketのメッセージマッピングを扱うかどうか。</target>
        </trans-unit>
        <trans-unit id="766a3110e86aa212fdfd8fe1fb9ee0ec5ee946d5" translate="yes" xml:space="preserve">
          <source>Whether to ignore AbstractRoutingDataSources when creating database health indicators.</source>
          <target state="translated">データベースの健全性指標を作成する際にAbstractRoutingDataSourcesを無視するかどうか。</target>
        </trans-unit>
        <trans-unit id="3f70d244ad0d582ec29d8581e200881e0b9740df" translate="yes" xml:space="preserve">
          <source>Whether to ignore future migrations when reading the schema history table.</source>
          <target state="translated">スキーマ履歴テーブルを読み込む際に、将来の移行を無視するかどうか。</target>
        </trans-unit>
        <trans-unit id="08547cac3ecf72e7cef7321f0bb7ebe7a3fedc1c" translate="yes" xml:space="preserve">
          <source>Whether to ignore ignored migrations when reading the schema history table.</source>
          <target state="translated">スキーマ履歴テーブルを読むときに無視された移行を無視するかどうか。</target>
        </trans-unit>
        <trans-unit id="318bb0ac9550d0bd1cd74c444b2bb8d74c00eaa6" translate="yes" xml:space="preserve">
          <source>Whether to ignore missing migrations when reading the schema history table.</source>
          <target state="translated">スキーマ履歴テーブルを読み込む際に、欠落しているマイグレーションを無視するかどうか。</target>
        </trans-unit>
        <trans-unit id="42c717b77daec9be539d958901299a24be0e7d22" translate="yes" xml:space="preserve">
          <source>Whether to ignore pending migrations when reading the schema history table.</source>
          <target state="translated">スキーマ履歴テーブルを読み込む際に、保留中の移行を無視するかどうか。</target>
        </trans-unit>
        <trans-unit id="c73f358d61f99c7b60f3b5a2581d7ec2586e08b0" translate="yes" xml:space="preserve">
          <source>Whether to ignore the transacted flag when creating session.</source>
          <target state="translated">セッション作成時に transacted フラグを無視するかどうか。</target>
        </trans-unit>
        <trans-unit id="18340225e63f911d84191a29ec7a5598fba98f3c" translate="yes" xml:space="preserve">
          <source>Whether to initialize the schema on startup.</source>
          <target state="translated">起動時にスキーマを初期化するかどうか。</target>
        </trans-unit>
        <trans-unit id="67150a7a7b039c24e43f47bae5bbb7ec10aba8d7" translate="yes" xml:space="preserve">
          <source>Whether to issue a warning rather than an error when a not-yet-supported Oracle SQL*Plus statement is encountered. Requires Flyway Teams.</source>
          <target state="translated">まだサポートされていないOracle SQL*Plusステートメントに遭遇したときに、エラーではなく警告を発行するかどうか。Flyway Teamsが必要です。</target>
        </trans-unit>
        <trans-unit id="b1b97ba993632774867122ad1dc9f1bb667acf43" translate="yes" xml:space="preserve">
          <source>Whether to log form data at DEBUG level, and headers at TRACE level.</source>
          <target state="translated">DEBUGレベルでフォームデータを、TRACEレベルでヘッダをログに記録するかどうか。</target>
        </trans-unit>
        <trans-unit id="62b1553ab6c4fe05f5d00bd8f13b47c91f6157a5" translate="yes" xml:space="preserve">
          <source>Whether to log information about the application when it starts.</source>
          <target state="translated">起動時にアプリケーションの情報をログに記録するかどうか。</target>
        </trans-unit>
        <trans-unit id="53aed1e80c9f370da80be15b39c46bf666c92847" translate="yes" xml:space="preserve">
          <source>Whether to log leaked sessions.</source>
          <target state="translated">リークされたセッションをログに記録するかどうか。</target>
        </trans-unit>
        <trans-unit id="23fd15ba3469f8e42f6c3a8cd9c3c07530551b58" translate="yes" xml:space="preserve">
          <source>Whether to log the condition evaluation delta upon restart.</source>
          <target state="translated">再起動時に状態評価デルタをログに記録するかどうか。</target>
        </trans-unit>
        <trans-unit id="a3cf61568e67a2d367c0e7575d087b95de8083d1" translate="yes" xml:space="preserve">
          <source>Whether to log the container configuration during initialization (INFO level).</source>
          <target state="translated">初期化時にコンテナの設定をログに記録するかどうか(INFOレベル)。</target>
        </trans-unit>
        <trans-unit id="218b6d2ba6b64e550f072c272583b094d86f55d3" translate="yes" xml:space="preserve">
          <source>Whether to output serialized JSON that fits in a page for pretty printing.</source>
          <target state="translated">きれいに印刷するためにページに収まるJSONをシリアライズして出力するかどうか。</target>
        </trans-unit>
        <trans-unit id="250b140ef0abb4621c34bed5e4e162a2f13e5fa9" translate="yes" xml:space="preserve">
          <source>Whether to persist session data between restarts.</source>
          <target state="translated">再起動間のセッションデータを永続化するかどうか。</target>
        </trans-unit>
        <trans-unit id="56184683d375f8988f31061c1c8701f78aa9ae2a" translate="yes" xml:space="preserve">
          <source>Whether to prefer file system access for template loading to enable hot detection of template changes. When a template path is detected as a directory, templates are loaded from the directory only and other matching classpath locations will not be considered.</source>
          <target state="translated">テンプレートの変更をホットに検出できるようにするために、テンプレートの読み込みにファイルシステムアクセスを優先するかどうか。テンプレートパスがディレクトリとして検出された場合、テンプレートはディレクトリからのみロードされ、他の一致するクラスパスの位置は考慮されません。</target>
        </trans-unit>
        <trans-unit id="c5c51f4623382109cca509b8459a0fc0e5ba8525" translate="yes" xml:space="preserve">
          <source>Whether to preserve the path of a request when it is forwarded.</source>
          <target state="translated">リクエストを転送する際に、リクエストのパスを保持するかどうか。</target>
        </trans-unit>
        <trans-unit id="c798d78c8dfb45dd046f090015c4970bca8119f5" translate="yes" xml:space="preserve">
          <source>Whether to publish a ServletRequestHandledEvent at the end of each request.</source>
          <target state="translated">各リクエストの最後にServletRequestHandledEventを発行するかどうか。</target>
        </trans-unit>
        <trans-unit id="75fdbb97548463e4556ad536155ccb08b28e6bb3" translate="yes" xml:space="preserve">
          <source>Whether to publish a histogram suitable for computing aggregable (across dimension) percentile approximations.</source>
          <target state="translated">集約可能な(次元を超えた)パーセンタイル近似を計算するのに適したヒストグラムを公開するかどうか。</target>
        </trans-unit>
        <trans-unit id="0cc67c23fd8e7fffd5ed5c98cb83dc3e50f51b47" translate="yes" xml:space="preserve">
          <source>Whether to publish descriptions metadata to Datadog. Turn this off to minimize the amount of metadata sent.</source>
          <target state="translated">説明のメタデータを Datadog に公開するかどうか。これをオフにすると、 メタデータの送信量を最小限に抑えることができます。</target>
        </trans-unit>
        <trans-unit id="709ef5dcca684a34ddcf783bd12a3a803074637e" translate="yes" xml:space="preserve">
          <source>Whether to register the default Servlet with the container.</source>
          <target state="translated">デフォルトのサーブレットをコンテナに登録するかどうか。</target>
        </trans-unit>
        <trans-unit id="4fcd32cb3d1e4bc637f12e92d4ce6b936285aa5d" translate="yes" xml:space="preserve">
          <source>Whether to resolve the multipart request lazily at the time of file or parameter access.</source>
          <target state="translated">ファイルアクセス時やパラメータアクセス時に、マルチパートリクエストを怠惰に解決するかどうか。</target>
        </trans-unit>
        <trans-unit id="69ff86b02998e02d637561b96cfa35681c58d9b3" translate="yes" xml:space="preserve">
          <source>Whether to return a response body after creating an entity.</source>
          <target state="translated">エンティティを作成した後にレスポンスボディを返すかどうか。</target>
        </trans-unit>
        <trans-unit id="7bde89a363a749be39e6aadd27686c6631294ce2" translate="yes" xml:space="preserve">
          <source>Whether to return a response body after updating an entity.</source>
          <target state="translated">エンティティを更新した後にレスポンスボディを返すかどうか。</target>
        </trans-unit>
        <trans-unit id="7628c0f4429f8962f9444842a2855b8efce596eb" translate="yes" xml:space="preserve">
          <source>Whether to roll back on commit failures.</source>
          <target state="translated">コミット失敗をロールバックするかどうか</target>
        </trans-unit>
        <trans-unit id="1c5fe42c6ee9e6fb5910b2a8338c672326c8ec52" translate="yes" xml:space="preserve">
          <source>Whether to send the meter name as the event type instead of using the 'event-type' configuration property value. Can be set to 'true' if New Relic guidelines are not being followed or event types consistent with previous Spring Boot releases are required.</source>
          <target state="translated">event-type'設定プロパティ値を使用する代わりに、メーター名をイベントタイプとして送信するかどうか。New Relicのガイドラインが守られていない場合や、以前のSpring Bootリリースと整合性のあるイベントタイプが必要な場合は、'true'に設定できます。</target>
        </trans-unit>
        <trans-unit id="2f10c989f93883de289871bea6a27fcf51bfd1a9" translate="yes" xml:space="preserve">
          <source>Whether to send unchanged meters to the StatsD server.</source>
          <target state="translated">未変更のメーターをStatsDサーバーに送信するかどうか。</target>
        </trans-unit>
        <trans-unit id="e0d15cbe8da4ea85d7b400d111a36ea65c47b0cb" translate="yes" xml:space="preserve">
          <source>Whether to serialize null fields.</source>
          <target state="translated">ヌルフィールドをシリアライズするかどうか。</target>
        </trans-unit>
        <trans-unit id="00158dc0fa439272a473b514c75205bc95dfd674" translate="yes" xml:space="preserve">
          <source>Whether to ship a floored time, useful when sending measurements from multiple hosts to align them on a given time boundary.</source>
          <target state="translated">固定時間を出荷するかどうかは、複数のホストから測定値を送信して、指定された時間境界上に位置を合わせる場合に便利です。</target>
        </trans-unit>
        <trans-unit id="5ee7484570edbfadc247e9c13387490be83160ea" translate="yes" xml:space="preserve">
          <source>Whether to skip SSL verification for Cloud Foundry actuator endpoint security calls.</source>
          <target state="translated">Cloud FoundryアクチュエーターのエンドポイントセキュリティコールのSSL検証をスキップするかどうか</target>
        </trans-unit>
        <trans-unit id="9b999b979a3e45c95822a67eeacc47ecad8e0051" translate="yes" xml:space="preserve">
          <source>Whether to skip default callbacks. If true, only custom callbacks are used.</source>
          <target state="translated">デフォルトのコールバックをスキップするかどうか。trueの場合、カスタムコールバックのみを使用します。</target>
        </trans-unit>
        <trans-unit id="8eefebacf9a3d139b1df79a30c79cc021bfaaf1b" translate="yes" xml:space="preserve">
          <source>Whether to skip default resolvers. If true, only custom resolvers are used.</source>
          <target state="translated">デフォルトのリゾルバをスキップするかどうか。true の場合、カスタムリゾルバのみを使用します。</target>
        </trans-unit>
        <trans-unit id="90a7f4ee0dc2b3b6bd1722b97e14733f3ed0f6d1" translate="yes" xml:space="preserve">
          <source>Whether to skip search of BeanInfo classes.</source>
          <target state="translated">BeanInfoクラスの検索をスキップするかどうか。</target>
        </trans-unit>
        <trans-unit id="885db1a8e8d2d9a65648275070164a3fbc1b2690" translate="yes" xml:space="preserve">
          <source>Whether to start the container automatically on startup.</source>
          <target state="translated">起動時にコンテナを自動的に起動するかどうか</target>
        </trans-unit>
        <trans-unit id="5c09f2b6bcea32c315e16dd0cdcd2cf6e38d3b46" translate="yes" xml:space="preserve">
          <source>Whether to stop if an error occurs while initializing the database.</source>
          <target state="translated">データベースの初期化中にエラーが発生した場合に停止するかどうか。</target>
        </trans-unit>
        <trans-unit id="5addeb5b76d28d62bbdce4f189efcdccc9b5e430" translate="yes" xml:space="preserve">
          <source>Whether to stop message delivery before re-delivering messages from a rolled back transaction. This implies that message order is not preserved when this is enabled.</source>
          <target state="translated">ロールバックされたトランザクションからメッセージを再配信する前にメッセージ配信を停止するかどうか。これは、これが有効な場合、メッセージの順序が保持されないことを意味します。</target>
        </trans-unit>
        <trans-unit id="f3f9c2235f64c577befcd16820f5aa9f96f56703" translate="yes" xml:space="preserve">
          <source>Whether to stream SQL migrations when executing them. Requires Flyway Teams.</source>
          <target state="translated">SQLマイグレーションを実行する際にストリーム化するかどうか。Flyway Teamsが必要です。</target>
        </trans-unit>
        <trans-unit id="df29a2c71cbd0d9d70dff3ee4fad0d6e674b7cf0" translate="yes" xml:space="preserve">
          <source>Whether to test that the mail server is available on startup.</source>
          <target state="translated">起動時にメールサーバが利用可能であることをテストするかどうか。</target>
        </trans-unit>
        <trans-unit id="7b88b092435953883356a2156da1a554a06a4cd7" translate="yes" xml:space="preserve">
          <source>Whether to transparently migrate legacy endpoint IDs.</source>
          <target state="translated">レガシーエンドポイントIDを透過的に移行するかどうか。</target>
        </trans-unit>
        <trans-unit id="7088d140f2e7247b80bccf5a32ed5b1536d8e620" translate="yes" xml:space="preserve">
          <source>Whether to trust all packages.</source>
          <target state="translated">すべてのパッケージを信用するかどうか。</target>
        </trans-unit>
        <trans-unit id="6c22d6bf6290524191f56350ab92bf64e8541c2e" translate="yes" xml:space="preserve">
          <source>Whether to use &quot;HttpOnly&quot; cookies for session cookies.</source>
          <target state="translated">セッションクッキーに「HttpOnly」クッキーを使用するかどうか。</target>
        </trans-unit>
        <trans-unit id="29f9f06bffe59e3ca138d9822631f7a5210709b0" translate="yes" xml:space="preserve">
          <source>Whether to use Hibernate's newer IdentifierGenerator for AUTO, TABLE and SEQUENCE. This is actually a shortcut for the &quot;hibernate.id.new_generator_mappings&quot; property. When not specified will default to &quot;true&quot;.</source>
          <target state="translated">AUTO、TABLE、SEQUENCEにHibernateの新しいIdentifierGeneratorを使うかどうか。これは実際には &quot;hibernate.id.new_generator_mappings &quot;プロパティのショートカットです。指定されていない場合、デフォルトは &quot;true &quot;になります。</target>
        </trans-unit>
        <trans-unit id="d1c42744a7fd78f639423cd2e83f5f22119d631c" translate="yes" xml:space="preserve">
          <source>Whether to use IPv6 canonical representation format as defined by RFC 5952.</source>
          <target state="translated">RFC 5952で定義されているIPv6のcanonical表現形式を使用するかどうか。</target>
        </trans-unit>
        <trans-unit id="634692588b7241bea7be2388ce2d41d2a8851a13" translate="yes" xml:space="preserve">
          <source>Whether to use concurrent connection validation.</source>
          <target state="translated">同時接続検証を使用するかどうか。</target>
        </trans-unit>
        <trans-unit id="45c7099060673c68f0d5148b8473114f391d2147" translate="yes" xml:space="preserve">
          <source>Whether to use different (and concurrent) threads for two-phase commit on the participating resources.</source>
          <target state="translated">参加しているリソースの二相コミットに、異なる(かつ並行した)スレッドを使用するかどうか。</target>
        </trans-unit>
        <trans-unit id="aecc32ce1fe09e15328c3a69bd375fc8360abc7b" translate="yes" xml:space="preserve">
          <source>Whether to use only one anonymous &quot;MessageProducer&quot; instance. Set it to false to create one &quot;MessageProducer&quot; every time one is required.</source>
          <target state="translated">匿名の &quot;MessageProducer &quot;インスタンスを1つだけ使用するかどうか。falseに設定すると、1つの &quot;MessageProducer &quot;が必要になるたびに1つの &quot;MessageProducer &quot;が作成されます。</target>
        </trans-unit>
        <trans-unit id="f852251f75fe16b5f96d7ba41193cd964ecf8446" translate="yes" xml:space="preserve">
          <source>Whether to use the key prefix when writing to Redis.</source>
          <target state="translated">Redisへの書き込み時にキープレフィックスを使用するかどうか。</target>
        </trans-unit>
        <trans-unit id="12acb4440e2a34feae775591e335f6972cc06f6b" translate="yes" xml:space="preserve">
          <source>Whether to use the message code as the default message instead of throwing a &quot;NoSuchMessageException&quot;. Recommended during development only.</source>
          <target state="translated">NoSuchMessageException」を投げるのではなく、メッセージコードをデフォルトのメッセージとして使用するかどうか。開発中のみ推奨。</target>
        </trans-unit>
        <trans-unit id="d720e95f290398cf2968a2571425c4f64d47e719" translate="yes" xml:space="preserve">
          <source>Whether to validate headers when decoding requests.</source>
          <target state="translated">リクエストをデコードする際にヘッダを検証するかどうか。</target>
        </trans-unit>
        <trans-unit id="ff2503980c311f4cd6c6de3b020b4180e664781c" translate="yes" xml:space="preserve">
          <source>Whether to validate migrations and callbacks whose scripts do not obey the correct naming convention.</source>
          <target state="translated">スクリプトが正しい命名規則に従わない移行やコールバックを検証するかどうか。</target>
        </trans-unit>
        <trans-unit id="8b3e8531898adb44ebb0b973ba1b929f507e2cc9" translate="yes" xml:space="preserve">
          <source>Whether to wait for running jobs to complete on shutdown.</source>
          <target state="translated">シャットダウン時に実行中のジョブが完了するのを待つかどうか。</target>
        </trans-unit>
        <trans-unit id="bdfbdb3bf1bc4fdf7defc33636e4dd6f01ce91fc" translate="yes" xml:space="preserve">
          <source>Whether unique runtime object names should be ensured.</source>
          <target state="translated">ランタイムオブジェクト名が一意であることを保証するかどうか。</target>
        </trans-unit>
        <trans-unit id="be133b7298c42d06fb70b69c6c694fe87566bbb2" translate="yes" xml:space="preserve">
          <source>Whether we should use the &quot;lastModified&quot; metadata of the files in HTTP caching headers.</source>
          <target state="translated">HTTPキャッシングヘッダでファイルのメタデータ「lastModified」を使用するかどうか。</target>
        </trans-unit>
        <trans-unit id="16a41ba1833d12bffb573e9e57abc25e34d85534" translate="yes" xml:space="preserve">
          <source>Whether, in the absence of any other exporter, exporting of metrics to an in-memory backend is enabled.</source>
          <target state="translated">他のエクスポータがない場合に、インメモリ・バックエンドへのメトリクスのエクスポートを有効にするかどうか。</target>
        </trans-unit>
        <trans-unit id="443ca577d33f8ec2a869ba67b470b08762120426" translate="yes" xml:space="preserve">
          <source>While Spring&amp;rsquo;s test framework caches application contexts between tests and reuses a context for tests sharing the same configuration, the use of &lt;code&gt;@MockBean&lt;/code&gt; or &lt;code&gt;@SpyBean&lt;/code&gt; influences the cache key, which will most likely increase the number of contexts.</source>
          <target state="translated">Springのテストフレームワークはテスト間でアプリケーションコンテキストをキャッシュし、同じ構成を共有するテストのコンテキストを再利用しますが、 &lt;code&gt;@MockBean&lt;/code&gt; または &lt;code&gt;@SpyBean&lt;/code&gt; の使用はキャッシュキーに影響を与え、コンテキストの数が増える可能性があります。</target>
        </trans-unit>
        <trans-unit id="9fd0400962e95219b3c323445d98b60b4eb5ed76" translate="yes" xml:space="preserve">
          <source>While caching is very beneficial in production, it can be counter-productive during development, preventing you from seeing the changes you just made in your application. For this reason, spring-boot-devtools disables the caching options by default.</source>
          <target state="translated">キャッシングは本番環境では非常に有益ですが、開発中には逆効果になり、アプリケーションで行った変更を見ることができなくなります。このため、spring-boot-devtools はデフォルトでキャッシュオプションを無効にしています。</target>
        </trans-unit>
        <trans-unit id="75a052aa9f274cecf932e1d20ead1f18d5b227a6" translate="yes" xml:space="preserve">
          <source>While it is possible to use JUnit 4 to test Kotlin code, JUnit 5 is provided by default and is recommended. JUnit 5 enables a test class to be instantiated once and reused for all of the class&amp;rsquo;s tests. This makes it possible to use &lt;code&gt;@BeforeAll&lt;/code&gt; and &lt;code&gt;@AfterAll&lt;/code&gt; annotations on non-static methods, which is a good fit for Kotlin.</source>
          <target state="translated">JUnit 4を使用してKotlinコードをテストすることは可能ですが、JUnit 5がデフォルトで提供されており、推奨されています。JUnit 5を使用すると、テストクラスを一度インスタンス化して、クラスのすべてのテストで再利用できます。これは使用することが可能となり &lt;code&gt;@BeforeAll&lt;/code&gt; と &lt;code&gt;@AfterAll&lt;/code&gt; Kotlinに適している非静的メソッド、上の注釈を。</target>
        </trans-unit>
        <trans-unit id="4d6335f35800e3639e43a575ab1b7af85a762995" translate="yes" xml:space="preserve">
          <source>While using &lt;code&gt;@PropertySource&lt;/code&gt; on your &lt;code&gt;@SpringBootApplication&lt;/code&gt; may seem to be a convenient way to load a custom resource in the &lt;code&gt;Environment&lt;/code&gt;, we do not recommend it. Such property sources are not added to the &lt;code&gt;Environment&lt;/code&gt; until the application context is being refreshed. This is too late to configure certain properties such as &lt;code&gt;logging.*&lt;/code&gt; and &lt;code&gt;spring.main.*&lt;/code&gt; which are read before refresh begins.</source>
          <target state="translated">使用している間 &lt;code&gt;@PropertySource&lt;/code&gt; をあなたに &lt;code&gt;@SpringBootApplication&lt;/code&gt; ことで、カスタムリソースをロードするための便利な方法であるように見えるかもしれ &lt;code&gt;Environment&lt;/code&gt; 、我々はそれをお勧めしません。このようなプロパティソースは、アプリケーションコンテキストが更新されるまで、 &lt;code&gt;Environment&lt;/code&gt; 追加されません。これは、更新が開始される前に読み取られる &lt;code&gt;logging.*&lt;/code&gt; や &lt;code&gt;spring.main.*&lt;/code&gt; などの特定のプロパティを構成するには遅すぎます。</target>
        </trans-unit>
        <trans-unit id="34af3995adf0544ac3c504c1e616abc37ede93f9" translate="yes" xml:space="preserve">
          <source>While you can write a &lt;code&gt;SpEL&lt;/code&gt; expression in &lt;code&gt;@Value&lt;/code&gt;, such expressions are not processed from &lt;a href=&quot;#boot-features-external-config-files&quot;&gt;application property files&lt;/a&gt;.</source>
          <target state="translated">あなたが書くことができますが &lt;code&gt;SpEL&lt;/code&gt; 中での発現 &lt;code&gt;@Value&lt;/code&gt; 、このような式から、処理されていない&lt;a href=&quot;#boot-features-external-config-files&quot;&gt;アプリケーションのプロパティファイル&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b1b7f131a7112f9cc2fa73a30dcf4c0f661e80fe" translate="yes" xml:space="preserve">
          <source>Width of the banner image in chars.</source>
          <target state="translated">バナー画像の幅を文字数で指定します。</target>
        </trans-unit>
        <trans-unit id="67e465aac7b8f742b1785e6c20a05ea753b7f19a" translate="yes" xml:space="preserve">
          <source>Wildcard locations only work with external directories. You cannot use a wildcard in a &lt;code&gt;classpath:&lt;/code&gt; location.</source>
          <target state="translated">ワイルドカードの場所は、外部ディレクトリでのみ機能します。 &lt;code&gt;classpath:&lt;/code&gt; locationでワイルドカードを使用することはできません。</target>
        </trans-unit>
        <trans-unit id="eadf42673bc7da6d0e5b5f372c95a6e937b88796" translate="yes" xml:space="preserve">
          <source>With Cloud Native Buildpacks, you can create Docker compatible images that you can run anywhere. Spring Boot includes buildpack support directly for both Maven and Gradle. This means you can just type a single command and quickly get a sensible image into your locally running Docker daemon.</source>
          <target state="translated">Cloud Native Buildpacksを使えば、どこでも実行できるDocker互換のイメージを作成することができます。Spring BootはMavenとGradleの両方のビルドパックを直接サポートしています。つまり、コマンドを一つ入力するだけで、ローカルで実行しているDockerデーモンに適切なイメージを素早く取り込むことができます。</target>
        </trans-unit>
        <trans-unit id="04d7cb7b91a1bf62c7c3bb03ae6c2a54dfce73a9" translate="yes" xml:space="preserve">
          <source>With Gradle 4.5 and earlier, the dependency should be declared in the &lt;code&gt;compileOnly&lt;/code&gt; configuration, as shown in the following example:</source>
          <target state="translated">Gradle 4.5以前では、次の例に示すように、依存関係を &lt;code&gt;compileOnly&lt;/code&gt; 構成で宣言する必要があります。</target>
        </trans-unit>
        <trans-unit id="4fc23501b952a1643f7009a9158e57929c8027f4" translate="yes" xml:space="preserve">
          <source>With Gradle 4.6 and later, the dependency should be declared in the &lt;code&gt;annotationProcessor&lt;/code&gt; configuration, as shown in the following example:</source>
          <target state="translated">Gradle 4.6以降では、次の例に示すように、 &lt;code&gt;annotationProcessor&lt;/code&gt; 構成で依存関係を宣言する必要があります。</target>
        </trans-unit>
        <trans-unit id="7dc3a8898217656b1e2af1588012c2a758998ef1" translate="yes" xml:space="preserve">
          <source>With Gradle, the dependency should be declared in the &lt;code&gt;annotationProcessor&lt;/code&gt; configuration, as shown in the following example:</source>
          <target state="translated">Gradleでは、次の例に示すように、 &lt;code&gt;annotationProcessor&lt;/code&gt; 構成で依存関係を宣言する必要があります。</target>
        </trans-unit>
        <trans-unit id="c147159e2f31f0f2b08bf57b738603f8b75f5a7d" translate="yes" xml:space="preserve">
          <source>With Jetty and Tomcat, it should work if you use war packaging. An executable war will work when launched with &lt;code&gt;java -jar&lt;/code&gt;, and will also be deployable to any standard container. JSPs are not supported when using an executable jar.</source>
          <target state="translated">JettyとTomcatでは、戦争パッケージを使用すれば機能するはずです。実行可能なwarは、 &lt;code&gt;java -jar&lt;/code&gt; で起動すると機能し、標準のコンテナーにもデプロイできます。実行可能jarを使用する場合、JSPはサポートされません。</target>
        </trans-unit>
        <trans-unit id="916ef3e925289eeb70d4853dd4e27d373f6a6cde" translate="yes" xml:space="preserve">
          <source>With Maven the dependency should be declared as optional, as shown in the following example:</source>
          <target state="translated">Mavenでは、以下の例のように、依存関係をオプションとして宣言する必要があります。</target>
        </trans-unit>
        <trans-unit id="c1759c3fbf33e3a7db068cc2b5c7469e3e267875" translate="yes" xml:space="preserve">
          <source>With Maven, the Kotlin version can be customized via the &lt;code&gt;kotlin.version&lt;/code&gt; property and plugin management is provided for &lt;code&gt;kotlin-maven-plugin&lt;/code&gt;. With Gradle, the Spring Boot plugin automatically aligns the &lt;code&gt;kotlin.version&lt;/code&gt; with the version of the Kotlin plugin.</source>
          <target state="translated">Mavenを使用すると、 &lt;code&gt;kotlin.version&lt;/code&gt; プロパティを介してKotlinバージョンをカスタマイズでき、 &lt;code&gt;kotlin-maven-plugin&lt;/code&gt; のプラグイン管理が提供されます。Gradleを使用すると、 &lt;code&gt;kotlin.version&lt;/code&gt; プラグインはkotlin.versionをKotlinプラグインのバージョンに自動的に合わせます。</target>
        </trans-unit>
        <trans-unit id="190df6e46204253cf38a377f73433482f343ee94" translate="yes" xml:space="preserve">
          <source>With that setup, migrations in &lt;code&gt;dev/db/migration&lt;/code&gt; run only when the &lt;code&gt;dev&lt;/code&gt; profile is active.</source>
          <target state="translated">この設定では、 &lt;code&gt;dev/db/migration&lt;/code&gt; の移行は &lt;code&gt;dev&lt;/code&gt; プロファイルがアクティブな場合にのみ実行されます。</target>
        </trans-unit>
        <trans-unit id="06c4865f9ce04767e8a0882f6cba03a509a11a41" translate="yes" xml:space="preserve">
          <source>With the exception of &lt;code&gt;JARFILE&lt;/code&gt; and &lt;code&gt;APP_NAME&lt;/code&gt;, the settings listed in the preceding section can be configured by using a &lt;code&gt;.conf&lt;/code&gt; file. The file is expected to be next to the jar file and have the same name but suffixed with &lt;code&gt;.conf&lt;/code&gt; rather than &lt;code&gt;.jar&lt;/code&gt;. For example, a jar named &lt;code&gt;/var/myapp/myapp.jar&lt;/code&gt; uses the configuration file named &lt;code&gt;/var/myapp/myapp.conf&lt;/code&gt;, as shown in the following example:</source>
          <target state="translated">除いて &lt;code&gt;JARFILE&lt;/code&gt; と &lt;code&gt;APP_NAME&lt;/code&gt; 、前のセクションに記載されている設定は、使用して構成することができる &lt;code&gt;.conf&lt;/code&gt; ファイルを。このファイルはjarファイルの隣にあり、同じ名前ですが、 &lt;code&gt;.jar&lt;/code&gt; ではなく &lt;code&gt;.conf&lt;/code&gt; の接尾辞が付いていることが期待されます。たとえば、 &lt;code&gt;/var/myapp/myapp.jar&lt;/code&gt; という名前のjarは、次の例に示すように、 &lt;code&gt;/var/myapp/myapp.conf&lt;/code&gt; という名前の構成ファイルを使用します。</target>
        </trans-unit>
        <trans-unit id="6d64c05c1c871c6d9ce671337fb016ba77550215" translate="yes" xml:space="preserve">
          <source>With the preceding code, the following properties names can all be used:</source>
          <target state="translated">前述のコードでは、以下のプロパティ名をすべて使用することができます。</target>
        </trans-unit>
        <trans-unit id="e4ca88b341681bd0c249196bf349292b510c54e2" translate="yes" xml:space="preserve">
          <source>With this configuration, JavaScript modules located under &lt;code&gt;&quot;/js/lib/&quot;&lt;/code&gt; use a fixed versioning strategy (&lt;code&gt;&quot;/v12/js/lib/mymodule.js&quot;&lt;/code&gt;), while other resources still use the content one (&lt;code&gt;&amp;lt;link href=&quot;/css/spring-2a2d595e6ed9a0b24f027f2b63b134d6.css&quot;/&amp;gt;&lt;/code&gt;).</source>
          <target state="translated">この構成では、 &lt;code&gt;&quot;/js/lib/&quot;&lt;/code&gt; 下にあるJavaScriptモジュールは固定バージョン戦略（ &lt;code&gt;&quot;/v12/js/lib/mymodule.js&quot;&lt;/code&gt; ）を使用しますが、他のリソースは引き続きコンテンツ戦略（ &lt;code&gt;&amp;lt;link href=&quot;/css/spring-2a2d595e6ed9a0b24f027f2b63b134d6.css&quot;/&amp;gt;&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="554f001599eb3810dd8a4b949e5b33b556ec2110" translate="yes" xml:space="preserve">
          <source>Write consistency for each point.</source>
          <target state="translated">各ポイントの整合性を書く。</target>
        </trans-unit>
        <trans-unit id="ff6df66ddd66cea94af9573c8ec1fa4d44305eee" translate="yes" xml:space="preserve">
          <source>Writes &lt;code&gt;spring.log&lt;/code&gt; to the specified directory. Names can be an exact location or relative to the current directory.</source>
          <target state="translated">指定されたディレクトリに &lt;code&gt;spring.log&lt;/code&gt; を書き込みます。名前は、正確な場所にすることも、現在のディレクトリからの相対的なものにすることもできます。</target>
        </trans-unit>
        <trans-unit id="2403929d240119c74ece4bba63dbd47e0a053a68" translate="yes" xml:space="preserve">
          <source>Writes console logs to &lt;code&gt;/var/log/&amp;lt;appname&amp;gt;.log&lt;/code&gt;</source>
          <target state="translated">コンソールログを &lt;code&gt;/var/log/&amp;lt;appname&amp;gt;.log&lt;/code&gt; に書き込みます</target>
        </trans-unit>
        <trans-unit id="248b92f3878e62e55a6bf7f23faf4f59aff3d101" translate="yes" xml:space="preserve">
          <source>Writes to the specified log file. Names can be an exact location or relative to the current directory.</source>
          <target state="translated">指定したログファイルに書き込みます。名前は正確な場所か、カレントディレクトリからの相対的なものを指定します。</target>
        </trans-unit>
        <trans-unit id="85ece886b0e43b4b015a03ddc42c6f0a49057731" translate="yes" xml:space="preserve">
          <source>XA datasource fully qualified name.</source>
          <target state="translated">XA データソースの完全修飾名。</target>
        </trans-unit>
        <trans-unit id="ffbcb202b09db426bae56cf2ffb88f18594f2258" translate="yes" xml:space="preserve">
          <source>YAML</source>
          <target state="translated">YAML</target>
        </trans-unit>
        <trans-unit id="a50a8ac0e2ebaf82e64080a74bcd16c4ca5c0bf8" translate="yes" xml:space="preserve">
          <source>YAML Files</source>
          <target state="translated">YAML ファイル</target>
        </trans-unit>
        <trans-unit id="d04ebd1237af6a11c62145369a337aeb51a694ea" translate="yes" xml:space="preserve">
          <source>YAML documents need to be converted from their hierarchical format to a flat structure that can be used with the Spring &lt;code&gt;Environment&lt;/code&gt;. For example, consider the following YAML document:</source>
          <target state="translated">YAMLドキュメントは、階層形式からSpring &lt;code&gt;Environment&lt;/code&gt; 使用できるフラットな構造に変換する必要があります。たとえば、次のYAMLドキュメントについて考えてみます。</target>
        </trans-unit>
        <trans-unit id="7f315f3b678b1f3762c2a2b9f519552ccf88a950" translate="yes" xml:space="preserve">
          <source>YAML files cannot be loaded by using the &lt;code&gt;@PropertySource&lt;/code&gt; annotation. So, in the case that you need to load values that way, you need to use a properties file.</source>
          <target state="translated">&lt;code&gt;@PropertySource&lt;/code&gt; アノテーションを使用してYAMLファイルをロードすることはできません。したがって、そのように値をロードする必要がある場合は、プロパティファイルを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="930b6a252baa9ca40cae8d3e976f4ff2d4a36143" translate="yes" xml:space="preserve">
          <source>YAML is a superset of JSON and, as such, is a convenient syntax for storing external properties in a hierarchical format, as shown in the following example:</source>
          <target state="translated">YAMLはJSONのスーパーセットであり、以下の例のように、外部プロパティを階層的に保存するのに便利な構文です。</target>
        </trans-unit>
        <trans-unit id="7e28ba02652752f1a7174d03a759af2c4acd6006" translate="yes" xml:space="preserve">
          <source>Yaml</source>
          <target state="translated">Yaml</target>
        </trans-unit>
        <trans-unit id="3526f607bcd4f51ad0bc05f814579a42c2c0ba57" translate="yes" xml:space="preserve">
          <source>Yellow</source>
          <target state="translated">Yellow</target>
        </trans-unit>
        <trans-unit id="5397e0583f14f6c88de06b1ef28f460a1fb5b0ae" translate="yes" xml:space="preserve">
          <source>Yes</source>
          <target state="translated">Yes</target>
        </trans-unit>
        <trans-unit id="e45013cb500539e407e1e7d1c231fa78ed4f1ade" translate="yes" xml:space="preserve">
          <source>Yes &lt;em&gt;(unless &lt;code&gt;mainclass&lt;/code&gt; is specified)&lt;/em&gt;</source>
          <target state="translated">はい&lt;em&gt;（ &lt;code&gt;mainclass&lt;/code&gt; が指定されていない場合）&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="cc1ee84e2dc69d7e1117f0dccd5baf938b8c3ca4" translate="yes" xml:space="preserve">
          <source>You almost always want to include one or more &lt;code&gt;@Conditional&lt;/code&gt; annotations on your auto-configuration class. The &lt;code&gt;@ConditionalOnMissingBean&lt;/code&gt; annotation is one common example that is used to allow developers to override auto-configuration if they are not happy with your defaults.</source>
          <target state="translated">ほとんどの場合、自動構成クラスに1つ以上の &lt;code&gt;@Conditional&lt;/code&gt; アノテーションを含める必要があります。 &lt;code&gt;@ConditionalOnMissingBean&lt;/code&gt; 注釈は、彼らはあなたのデフォルトが気に入らなかった場合、開発者は、自動設定を上書きできるようにするために使用される一般的な例です。</target>
        </trans-unit>
        <trans-unit id="7d88e6d5d87f5f27307e584612f90ccdc79ac0d7" translate="yes" xml:space="preserve">
          <source>You also need to add &lt;code&gt;logging.file.name&lt;/code&gt; to your &lt;code&gt;application.properties&lt;/code&gt; or &lt;code&gt;application.yaml&lt;/code&gt;, as shown in the following example:</source>
          <target state="translated">また、次の例に示すように、 &lt;code&gt;logging.file.name&lt;/code&gt; を &lt;code&gt;application.properties&lt;/code&gt; または &lt;code&gt;application.yaml&lt;/code&gt; に追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="96019d4a503272da92d45dda5f8f6e0c34cc2430" translate="yes" xml:space="preserve">
          <source>You also need to include the following element inside &lt;code&gt;&amp;lt;plugins/&amp;gt;&lt;/code&gt;:</source>
          <target state="translated">また、 &lt;code&gt;&amp;lt;plugins/&amp;gt;&lt;/code&gt; 内に次の要素を含める必要があります。</target>
        </trans-unit>
        <trans-unit id="2e886b73cdd7c919e382e232879296832e77e80e" translate="yes" xml:space="preserve">
          <source>You are developing a servlet-based web application.</source>
          <target state="translated">サーブレットベースのWebアプリケーションを開発していただきます。</target>
        </trans-unit>
        <trans-unit id="ee6d408334d5d6f93e09a5ca37cfd23e2db03be8" translate="yes" xml:space="preserve">
          <source>You are free to use any of the standard Spring Framework techniques to define your beans and their injected dependencies. We often find that using &lt;code&gt;@ComponentScan&lt;/code&gt; (to find your beans) and using &lt;code&gt;@Autowired&lt;/code&gt; (to do constructor injection) works well.</source>
          <target state="translated">標準のSpringFramework手法を自由に使用して、Beanとその挿入された依存関係を定義できます。私たちは、多くの場合、使用していることを見つける &lt;code&gt;@ComponentScan&lt;/code&gt; を（あなたの豆を見つけるために）と使用して &lt;code&gt;@Autowired&lt;/code&gt; をうまく機能（コンストラクタ・インジェクションを行うこと）。</target>
        </trans-unit>
        <trans-unit id="5f7ae5ea9c867ced17018a42db53b95848b4d952" translate="yes" xml:space="preserve">
          <source>You are using &lt;a href=&quot;using-spring-boot#using-boot-devtools&quot;&gt;Spring Boot&amp;rsquo;s developer tools&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;using-spring-boot#using-boot-devtools&quot;&gt;SpringBootの開発者ツール&lt;/a&gt;を使用しています。</target>
        </trans-unit>
        <trans-unit id="2995030c1391009c3c201bcbe07d3d8a406ccfb0" translate="yes" xml:space="preserve">
          <source>You can access the port the server is running on from log output or from the &lt;code&gt;WebServerApplicationContext&lt;/code&gt; through its &lt;code&gt;WebServer&lt;/code&gt;. The best way to get that and be sure it has been initialized is to add a &lt;code&gt;@Bean&lt;/code&gt; of type &lt;code&gt;ApplicationListener&amp;lt;WebServerInitializedEvent&amp;gt;&lt;/code&gt; and pull the container out of the event when it is published.</source>
          <target state="translated">サーバーが実行されているポートには、ログ出力から、または &lt;code&gt;WebServerApplicationContext&lt;/code&gt; を介して &lt;code&gt;WebServer&lt;/code&gt; ApplicationContextからアクセスできます。これを取得して初期化されていることを確認する最良の方法は、 &lt;code&gt;ApplicationListener&amp;lt;WebServerInitializedEvent&amp;gt;&lt;/code&gt; タイプの &lt;code&gt;@Bean&lt;/code&gt; を追加し、公開時にイベントからコンテナーをプルすることです。</target>
        </trans-unit>
        <trans-unit id="e238d2aacad70f58573317541f831f197e470830" translate="yes" xml:space="preserve">
          <source>You can add MDC and other ad-hoc content to log lines by overriding only the &lt;code&gt;LOG_LEVEL_PATTERN&lt;/code&gt; (or &lt;code&gt;logging.pattern.level&lt;/code&gt; with Logback). For example, if you use &lt;code&gt;logging.pattern.level=user:%X{user} %5p&lt;/code&gt;, then the default log format contains an MDC entry for &quot;user&quot;, if it exists, as shown in the following example.</source>
          <target state="translated">&lt;code&gt;LOG_LEVEL_PATTERN&lt;/code&gt; （またはLogbackを使用した &lt;code&gt;logging.pattern.level&lt;/code&gt; ）のみをオーバーライドすることにより、MDCおよびその他のアドホックコンテンツをログ行に追加できます。たとえば、 &lt;code&gt;logging.pattern.level=user:%X{user} %5p&lt;/code&gt; 使用する場合、次の例に示すように、デフォルトのログ形式には「user」のMDCエントリが含まれます（存在する場合）。</target>
        </trans-unit>
        <trans-unit id="76faccefc507c595bf8b12e32db470cefdc50f06" translate="yes" xml:space="preserve">
          <source>You can add an &lt;code&gt;org.apache.catalina.connector.Connector&lt;/code&gt; to the &lt;code&gt;TomcatServletWebServerFactory&lt;/code&gt;, which can allow multiple connectors, including HTTP and HTTPS connectors, as shown in the following example:</source>
          <target state="translated">次の例に示すように、 &lt;code&gt;org.apache.catalina.connector.Connector&lt;/code&gt; を &lt;code&gt;TomcatServletWebServerFactory&lt;/code&gt; に追加できます。これにより、HTTPおよびHTTPSコネクタを含む複数のコネクタを許可できます。</target>
        </trans-unit>
        <trans-unit id="0557c91096cb54050839a529fd2f04d0cd8aa675" translate="yes" xml:space="preserve">
          <source>You can add extensions to the CLI by using the &lt;code&gt;install&lt;/code&gt; command. The command takes one or more sets of artifact coordinates in the format &lt;code&gt;group:artifact:version&lt;/code&gt;, as shown in the following example:</source>
          <target state="translated">&lt;code&gt;install&lt;/code&gt; コマンドを使用して、CLIに拡張機能を追加できます。このコマンドは、次の例に示すように、 &lt;code&gt;group:artifact:version&lt;/code&gt; の形式で1つ以上のアーティファクト座標のセットを取ります。</target>
        </trans-unit>
        <trans-unit id="c71425e5096a7df98cdd8e241aace0e7c3764181" translate="yes" xml:space="preserve">
          <source>You can also activate a listener by invoking the &lt;code&gt;SpringApplication.addListeners(&amp;hellip;​)&lt;/code&gt; method and passing the appropriate &lt;code&gt;Writer&lt;/code&gt; object. This method also lets you customize the file name and path in the &lt;code&gt;Writer&lt;/code&gt; constructor.</source>
          <target state="translated">&lt;code&gt;SpringApplication.addListeners(&amp;hellip;​)&lt;/code&gt; メソッドを呼び出して適切な &lt;code&gt;Writer&lt;/code&gt; オブジェクトを渡すことにより、リスナーをアクティブ化することもできます。このメソッドでは、 &lt;code&gt;Writer&lt;/code&gt; コンストラクターでファイル名とパスをカスタマイズすることもできます。</target>
        </trans-unit>
        <trans-unit id="29438cddd0dff959a02b3317d0dd0d2f84c73c8f" translate="yes" xml:space="preserve">
          <source>You can also add a custom Spring &lt;code&gt;Validator&lt;/code&gt; by creating a bean definition called &lt;code&gt;configurationPropertiesValidator&lt;/code&gt;. The &lt;code&gt;@Bean&lt;/code&gt; method should be declared &lt;code&gt;static&lt;/code&gt;. The configuration properties validator is created very early in the application&amp;rsquo;s lifecycle, and declaring the &lt;code&gt;@Bean&lt;/code&gt; method as static lets the bean be created without having to instantiate the &lt;code&gt;@Configuration&lt;/code&gt; class. Doing so avoids any problems that may be caused by early instantiation.</source>
          <target state="translated">&lt;code&gt;configurationPropertiesValidator&lt;/code&gt; というBean定義を作成して、カスタム &lt;code&gt;Validator&lt;/code&gt; 追加することもできます。 &lt;code&gt;@Bean&lt;/code&gt; 方法を宣言する必要があります &lt;code&gt;static&lt;/code&gt; 。構成プロパティバリデーターは、アプリケーションのライフサイクルの非常に早い段階で作成され、 &lt;code&gt;@Bean&lt;/code&gt; メソッドを静的として宣言すると、 &lt;code&gt;@Configuration&lt;/code&gt; クラスをインスタンス化せずにBeanを作成できます。そうすることで、早期のインスタンス化によって引き起こされる可能性のある問題を回避できます。</target>
        </trans-unit>
        <trans-unit id="2ea8120cd900368e8193c8a8aab0bf156d248ed3" translate="yes" xml:space="preserve">
          <source>You can also add a special &lt;code&gt;{vendor}&lt;/code&gt; placeholder to use vendor-specific scripts. Assume the following:</source>
          <target state="translated">特別な &lt;code&gt;{vendor}&lt;/code&gt; プレースホルダーを追加して、ベンダー固有のスクリプトを使用することもできます。次のように想定します。</target>
        </trans-unit>
        <trans-unit id="f24525cae7a91129d4361f0a7546a3d238d28a2d" translate="yes" xml:space="preserve">
          <source>You can also add any number of &lt;code&gt;tag=KEY:VALUE&lt;/code&gt; query parameters to the end of the URL to dimensionally drill down on a meter, e.g. &lt;code&gt;/actuator/metrics/jvm.memory.max?tag=area:nonheap&lt;/code&gt;.</source>
          <target state="translated">URLの末尾に &lt;code&gt;tag=KEY:VALUE&lt;/code&gt; クエリパラメータをいくつでも追加して、メーターをディメンション的にドリルダウンすることもできます（例： &lt;code&gt;/actuator/metrics/jvm.memory.max?tag=area:nonheap&lt;/code&gt; ：nonheap）。</target>
        </trans-unit>
        <trans-unit id="81bc3b28bc0783db1c562f779c0cb1a289cd933d" translate="yes" xml:space="preserve">
          <source>You can also auto-configure &lt;code&gt;MockMvc&lt;/code&gt; in a non-&lt;code&gt;@WebMvcTest&lt;/code&gt; (such as &lt;code&gt;@SpringBootTest&lt;/code&gt;) by annotating it with &lt;code&gt;@AutoConfigureMockMvc&lt;/code&gt;. The following example uses &lt;code&gt;MockMvc&lt;/code&gt;:</source>
          <target state="translated">することもできます自動設定 &lt;code&gt;MockMvc&lt;/code&gt; 非で &lt;code&gt;@WebMvcTest&lt;/code&gt; （のような &lt;code&gt;@SpringBootTest&lt;/code&gt; でそれに注釈を付けることによって） &lt;code&gt;@AutoConfigureMockMvc&lt;/code&gt; 。次の例では、 &lt;code&gt;MockMvc&lt;/code&gt; を使用しています。</target>
        </trans-unit>
        <trans-unit id="9cbcf106f1768b318dea2af23188f0551407c2ca" translate="yes" xml:space="preserve">
          <source>You can also auto-configure &lt;code&gt;WebTestClient&lt;/code&gt; in a non-&lt;code&gt;@WebFluxTest&lt;/code&gt; (such as &lt;code&gt;@SpringBootTest&lt;/code&gt;) by annotating it with &lt;code&gt;@AutoConfigureWebTestClient&lt;/code&gt;. The following example shows a class that uses both &lt;code&gt;@WebFluxTest&lt;/code&gt; and a &lt;code&gt;WebTestClient&lt;/code&gt;:</source>
          <target state="translated">また、自動設定することができます &lt;code&gt;WebTestClient&lt;/code&gt; A非で &lt;code&gt;@WebFluxTest&lt;/code&gt; （のような &lt;code&gt;@SpringBootTest&lt;/code&gt; ）と、それに注釈を付けることによって &lt;code&gt;@AutoConfigureWebTestClient&lt;/code&gt; 。次の例は、 &lt;code&gt;@WebFluxTest&lt;/code&gt; と &lt;code&gt;WebTestClient&lt;/code&gt; の両方を使用するクラスを示しています。</target>
        </trans-unit>
        <trans-unit id="21c8590ba836fd794819851c7d878bc540f8af6e" translate="yes" xml:space="preserve">
          <source>You can also change the StatsD line protocol to use (default to Datadog):</source>
          <target state="translated">また、使用するStatsD行のプロトコルを変更することもできます(デフォルトはDatadog)。</target>
        </trans-unit>
        <trans-unit id="9848d18c626ee70db12e9c4d375345c155ebecdd" translate="yes" xml:space="preserve">
          <source>You can also change the interval at which metrics are sent to Datadog:</source>
          <target state="translated">また、メトリクスを Datadog に送信する間隔を変更することもできます。</target>
        </trans-unit>
        <trans-unit id="1c60aa66654d13463e259ed30cf8c2874b8337f1" translate="yes" xml:space="preserve">
          <source>You can also change the interval at which metrics are sent to Dynatrace:</source>
          <target state="translated">また、Dynatrace にメトリクスを送信する間隔を変更することもできます。</target>
        </trans-unit>
        <trans-unit id="bc59840eb0c4d23e6840e0a60fb0e037c0874518" translate="yes" xml:space="preserve">
          <source>You can also change the interval at which metrics are sent to New Relic:</source>
          <target state="translated">また、メトリクスが New Relic に送信される間隔を変更することもできます。</target>
        </trans-unit>
        <trans-unit id="a1d16d6d642b4187fc35fc28ac0203c82601335b" translate="yes" xml:space="preserve">
          <source>You can also change the interval at which metrics are sent to SignalFx:</source>
          <target state="translated">また、メトリクスが SignalFx に送信される間隔を変更することもできます。</target>
        </trans-unit>
        <trans-unit id="7d91135f0dc9747bfdf227355acbe07b7f04da1f" translate="yes" xml:space="preserve">
          <source>You can also change the interval at which metrics are sent to Stackdriver:</source>
          <target state="translated">また、Stackdriver にメトリクスを送信する間隔を変更することもできます。</target>
        </trans-unit>
        <trans-unit id="a870b11942300aa2608ad2c9fbf073e9968fe9ce" translate="yes" xml:space="preserve">
          <source>You can also change the interval at which metrics are sent to Wavefront:</source>
          <target state="translated">また、Wavefrontにメトリクスを送信する間隔を変更することもできます。</target>
        </trans-unit>
        <trans-unit id="89ffe7f3d197cde0520218e9ae7db9b79739ac8c" translate="yes" xml:space="preserve">
          <source>You can also configure the Spring Kafka &lt;code&gt;JsonDeserializer&lt;/code&gt; as follows:</source>
          <target state="translated">Spring &lt;code&gt;JsonDeserializer&lt;/code&gt; を次のように構成することもできます。</target>
        </trans-unit>
        <trans-unit id="0954bd06e49802c622c891069754707ffdcd622f" translate="yes" xml:space="preserve">
          <source>You can also create your own &lt;code&gt;org.jooq.Configuration&lt;/code&gt;&lt;code&gt;@Bean&lt;/code&gt; if you want to take complete control of the jOOQ configuration.</source>
          <target state="translated">また、あなた自身の作成することができます &lt;code&gt;org.jooq.Configuration&lt;/code&gt; &lt;code&gt;@Bean&lt;/code&gt; をあなたはjOOQ構成の完全な制御をしたい場合。</target>
        </trans-unit>
        <trans-unit id="6478f68692bb67318c035b6d5fe42c73844301ab" translate="yes" xml:space="preserve">
          <source>You can also customize the JMX domain under which endpoints are exposed. The following settings show an example of doing so in &lt;code&gt;application.properties&lt;/code&gt;:</source>
          <target state="translated">エンドポイントが公開されるJMXドメインをカスタマイズすることもできます。次の設定は、 &lt;code&gt;application.properties&lt;/code&gt; での実行例を示しています。</target>
        </trans-unit>
        <trans-unit id="37e049b463825ee01aace48c5447264e0c739358" translate="yes" xml:space="preserve">
          <source>You can also customize the static resource locations by using &lt;code&gt;spring.web.resources.static-locations&lt;/code&gt;. Doing so replaces the default values with a list of directory locations. If you do so, the default welcome page detection switches to your custom locations. So, if there is an &lt;code&gt;index.html&lt;/code&gt; in any of your locations on startup, it is the home page of the application.</source>
          <target state="translated">&lt;code&gt;spring.web.resources.static-locations&lt;/code&gt; を使用して、静的リソースの場所をカスタマイズすることもできます。そうすることで、デフォルト値がディレクトリの場所のリストに置き換えられます。これを行うと、デフォルトのウェルカムページ検出がカスタムの場所に切り替わります。したがって、起動時にいずれかの場所に &lt;code&gt;index.html&lt;/code&gt; がある場合、それはアプリケーションのホームページです。</target>
        </trans-unit>
        <trans-unit id="4e9bc55dbdd1ec57515adcc75d265971bf809c07" translate="yes" xml:space="preserve">
          <source>You can also customize the static resource locations by using the &lt;code&gt;spring.web.resources.static-locations&lt;/code&gt; property (replacing the default values with a list of directory locations). The root Servlet context path, &lt;code&gt;&quot;/&quot;&lt;/code&gt;, is automatically added as a location as well.</source>
          <target state="translated">&lt;code&gt;spring.web.resources.static-locations&lt;/code&gt; プロパティを使用して静的リソースの場所をカスタマイズすることもできます（デフォルト値をディレクトリの場所のリストに置き換えます）。ルートサーブレットコンテキストパス &lt;code&gt;&quot;/&quot;&lt;/code&gt; も場所として自動的に追加されます。</target>
        </trans-unit>
        <trans-unit id="59789fe4af325518eae89aa9ecf38f8fc909281c" translate="yes" xml:space="preserve">
          <source>You can also define a class annotated with &lt;code&gt;@ControllerAdvice&lt;/code&gt; to customize the JSON document to return for a particular controller and/or exception type, as shown in the following example:</source>
          <target state="translated">次の例に示すように、 &lt;code&gt;@ControllerAdvice&lt;/code&gt; アノテーションが付けられたクラスを定義して、特定のコントローラーや例外タイプに対して返されるJSONドキュメントをカスタマイズすることもできます。</target>
        </trans-unit>
        <trans-unit id="02f2cfd1a6c1ca373f014bc352127bc28ce30f25" translate="yes" xml:space="preserve">
          <source>You can also deploy Spring Boot applications to any Servlet 3.1+ compatible container.</source>
          <target state="translated">また、Spring BootアプリケーションをServlet 3.1+互換のコンテナにデプロイすることもできます。</target>
        </trans-unit>
        <trans-unit id="477ca1b4d254351e2d3d5d36aa5aadb0b8a119e6" translate="yes" xml:space="preserve">
          <source>You can also disable all registries unless stated otherwise by the registry-specific property, as shown in the following example:</source>
          <target state="translated">また、以下の例に示すように、レジストリ固有のプロパティで指定されていない限り、すべてのレジストリを無効にすることもできます。</target>
        </trans-unit>
        <trans-unit id="463476592344b8459d00f911b81ff70b938c577f" translate="yes" xml:space="preserve">
          <source>You can also flag the application to start automatically by using your standard operating system tools. For example, on Debian, you could use the following command:</source>
          <target state="translated">また、標準のオペレーティングシステムツールを使用して、アプリケーションが自動的に起動するようにフラグを立てることもできます。例えば、Debian では、以下のコマンドを使用することができます。</target>
        </trans-unit>
        <trans-unit id="4bf0c182e51ca8cdbb16418db62843a6fa30956d" translate="yes" xml:space="preserve">
          <source>You can also inject an auto-configured &lt;code&gt;LdapTemplate&lt;/code&gt; instance as you would with any other Spring Bean, as shown in the following example:</source>
          <target state="translated">次の例に示すように、他のSpring Beanの場合と同じように、自動構成された &lt;code&gt;LdapTemplate&lt;/code&gt; インスタンスを挿入することもできます。</target>
        </trans-unit>
        <trans-unit id="e9841e72a4069ec9d6e71b84ba77cc3dd868bc9b" translate="yes" xml:space="preserve">
          <source>You can also leverage &lt;a href=&quot;#boot-features-json-components&quot;&gt;Boot&amp;rsquo;s custom JSON serializers and deserializers&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#boot-features-json-components&quot;&gt;BootのカスタムJSONシリアライザーとデシリアライザーを&lt;/a&gt;活用することもできます。</target>
        </trans-unit>
        <trans-unit id="9006da0382b93d839d922317197abd9ce0426f54" translate="yes" xml:space="preserve">
          <source>You can also provide the following System properties (or environment variables) to change the behavior:</source>
          <target state="translated">また、以下のシステムプロパティ(または環境変数)を指定して動作を変更することもできます。</target>
        </trans-unit>
        <trans-unit id="00b5e0540fe6a7ea0e548602c3d84544f199d2cd" translate="yes" xml:space="preserve">
          <source>You can also register an arbitrary number of beans that implement &lt;code&gt;LettuceClientConfigurationBuilderCustomizer&lt;/code&gt; for more advanced customizations. If you use Jedis, &lt;code&gt;JedisClientConfigurationBuilderCustomizer&lt;/code&gt; is also available.</source>
          <target state="translated">&lt;code&gt;LettuceClientConfigurationBuilderCustomizer&lt;/code&gt; を実装する任意の数のBeanを登録して、より高度なカスタマイズを行うこともできます。Jedisを使用している場合は、 &lt;code&gt;JedisClientConfigurationBuilderCustomizer&lt;/code&gt; も使用できます。</target>
        </trans-unit>
        <trans-unit id="5efd2aa153de167f0b9b50f7939c143f0bc9fa95" translate="yes" xml:space="preserve">
          <source>You can also register an arbitrary number of beans that implement &lt;code&gt;RestClientBuilderCustomizer&lt;/code&gt; for more advanced customizations. To take full control over the registration, define a &lt;code&gt;RestClientBuilder&lt;/code&gt; bean.</source>
          <target state="translated">&lt;code&gt;RestClientBuilderCustomizer&lt;/code&gt; を実装する任意の数のBeanを登録して、より高度なカスタマイズを行うこともできます。登録を完全に制御するには、 &lt;code&gt;RestClientBuilder&lt;/code&gt; Beanを定義します。</target>
        </trans-unit>
        <trans-unit id="d8036627c96661e5d246f8aaf9accb893ca36b54" translate="yes" xml:space="preserve">
          <source>You can also set the location of a file to which to write the log (in addition to the console) by using &lt;code&gt;logging.file.name&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;logging.file.name&lt;/code&gt; を使用して、（コンソールに加えて）ログを書き込むファイルの場所を設定することもできます。</target>
        </trans-unit>
        <trans-unit id="bfb0f825e61f3ad6f5443b8b8fde1f3ac0349616" translate="yes" xml:space="preserve">
          <source>You can also specify &lt;code&gt;debug=true&lt;/code&gt; in your &lt;code&gt;application.properties&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;application.properties&lt;/code&gt; で &lt;code&gt;debug=true&lt;/code&gt; を指定することもできます。</target>
        </trans-unit>
        <trans-unit id="fa5dbefae93e8f55eac894f5ef218eacde038e94" translate="yes" xml:space="preserve">
          <source>You can also switch off the initialization explicitly by setting &lt;code&gt;spring.batch.initialize-schema&lt;/code&gt; to &lt;code&gt;never&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;spring.batch.initialize-schema&lt;/code&gt; を &lt;code&gt;never&lt;/code&gt; に設定して、初期化を明示的にオフにすることもできます。</target>
        </trans-unit>
        <trans-unit id="51d79ac25f16ff2746c645bbd647cd40a7cff8d3" translate="yes" xml:space="preserve">
          <source>You can also trigger validation by annotating the &lt;code&gt;@Bean&lt;/code&gt; method that creates the configuration properties with &lt;code&gt;@Validated&lt;/code&gt;.</source>
          <target state="translated">また、注釈を付けることにより、検証をトリガーすることができ &lt;code&gt;@Bean&lt;/code&gt; で構成プロパティ作成方法 &lt;code&gt;@Validated&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="b3f5bada294fe27fe71f0e0874e75d36ca11b91f" translate="yes" xml:space="preserve">
          <source>You can also use Flyway to provide data for specific scenarios. For example, you can place test-specific migrations in &lt;code&gt;src/test/resources&lt;/code&gt; and they are run only when your application starts for testing. Also, you can use profile-specific configuration to customize &lt;code&gt;spring.flyway.locations&lt;/code&gt; so that certain migrations run only when a particular profile is active. For example, in &lt;code&gt;application-dev.properties&lt;/code&gt;, you might specify the following setting:</source>
          <target state="translated">Flywayを使用して、特定のシナリオのデータを提供することもできます。たとえば、テスト固有の移行を &lt;code&gt;src/test/resources&lt;/code&gt; に配置でき、アプリケーションがテストを開始したときにのみ実行されます。また、プロファイル固有の構成を使用して &lt;code&gt;spring.flyway.locations&lt;/code&gt; をカスタマイズし、特定のプロファイルがアクティブな場合にのみ特定の移行が実行されるようにすることもできます。たとえば、 &lt;code&gt;application-dev.properties&lt;/code&gt; で、次の設定を指定できます。</target>
        </trans-unit>
        <trans-unit id="3ffc90be78de83ce6926b85418f6e19317ca9f7e" translate="yes" xml:space="preserve">
          <source>You can also use any of the supported units. These are:</source>
          <target state="translated">また、サポートされているユニットのいずれかを使用することもできます。これらは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="b8168059533af06cffde63d8f4d47ca82a906c74" translate="yes" xml:space="preserve">
          <source>You can also use regular Spring MVC features such as &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/web.html#mvc-exceptionhandlers&quot;&gt;&lt;code&gt;@ExceptionHandler&lt;/code&gt; methods&lt;/a&gt; and &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/web.html#mvc-ann-controller-advice&quot;&gt;&lt;code&gt;@ControllerAdvice&lt;/code&gt;&lt;/a&gt;. The &lt;code&gt;ErrorController&lt;/code&gt; then picks up any unhandled exceptions.</source>
          <target state="translated">&lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/web.html#mvc-exceptionhandlers&quot;&gt; &lt;code&gt;@ExceptionHandler&lt;/code&gt; メソッド&lt;/a&gt;や&lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/web.html#mvc-ann-controller-advice&quot;&gt; &lt;code&gt;@ControllerAdvice&lt;/code&gt; &lt;/a&gt;などの通常のSpringMVC機能を使用することもできます。次に、 &lt;code&gt;ErrorController&lt;/code&gt; は未処理の例外を検出します。</target>
        </trans-unit>
        <trans-unit id="e0fd1ba42a971e140af070acfbf29e6a8c20f5a5" translate="yes" xml:space="preserve">
          <source>You can also use the &lt;code&gt;YamlPropertySourceLoader&lt;/code&gt; class if you want to load YAML as a Spring &lt;code&gt;PropertySource&lt;/code&gt;.</source>
          <target state="translated">また、使用することができます &lt;code&gt;YamlPropertySourceLoader&lt;/code&gt; のあなたは春のようYAMLをロードしたい場合は、クラスを &lt;code&gt;PropertySource&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3667cfac0db478ca06f911ca87af8669823526d2" translate="yes" xml:space="preserve">
          <source>You can also use the &lt;code&gt;spring.main.banner-mode&lt;/code&gt; property to determine if the banner has to be printed on &lt;code&gt;System.out&lt;/code&gt; (&lt;code&gt;console&lt;/code&gt;), sent to the configured logger (&lt;code&gt;log&lt;/code&gt;), or not produced at all (&lt;code&gt;off&lt;/code&gt;).</source>
          <target state="translated">また、 &lt;code&gt;spring.main.banner-mode&lt;/code&gt; プロパティを使用して、バナーを &lt;code&gt;System.out&lt;/code&gt; （ &lt;code&gt;console&lt;/code&gt; ）に印刷するか、構成済みのロガーに送信する（ &lt;code&gt;log&lt;/code&gt; ）か、まったく作成しない（ &lt;code&gt;off&lt;/code&gt; ）かを決定することもできます。</target>
        </trans-unit>
        <trans-unit id="81c83874b9afe6ffcb420d616b6817f8050f836a" translate="yes" xml:space="preserve">
          <source>You can also use the audit services for your own business events. To do so, either inject the &lt;code&gt;AuditEventRepository&lt;/code&gt; bean into your own components and use that directly or publish an &lt;code&gt;AuditApplicationEvent&lt;/code&gt; with the Spring &lt;code&gt;ApplicationEventPublisher&lt;/code&gt; (by implementing &lt;code&gt;ApplicationEventPublisherAware&lt;/code&gt;).</source>
          <target state="translated">独自のビジネスイベントに監査サービスを使用することもできます。いずれかの注入、そうするために &lt;code&gt;AuditEventRepository&lt;/code&gt; 豆独自のコンポーネントおよび使用には、直接、または公開することを &lt;code&gt;AuditApplicationEvent&lt;/code&gt; 春と &lt;code&gt;ApplicationEventPublisher&lt;/code&gt; （実装することによって &lt;code&gt;ApplicationEventPublisherAware&lt;/code&gt; を）。</target>
        </trans-unit>
        <trans-unit id="62e7c44a4f2ddca49d4c00ae2a4d91c5eeb7a795" translate="yes" xml:space="preserve">
          <source>You can also use the standard JSR-107 (JCache) annotations (such as &lt;code&gt;@CacheResult&lt;/code&gt;) transparently. However, we strongly advise you to not mix and match the Spring Cache and JCache annotations.</source>
          <target state="translated">標準のJSR-107（JCache）アノテーション（ &lt;code&gt;@CacheResult&lt;/code&gt; など）を透過的に使用することもできます。ただし、SpringCacheアノテーションとJCacheアノテーションを混在させないことを強くお勧めします。</target>
        </trans-unit>
        <trans-unit id="85fd7cc2c80e4e2e18d4272b7da0f31cf3fd8a8f" translate="yes" xml:space="preserve">
          <source>You can also use this technique to create &amp;ldquo;short&amp;rdquo; variants of existing Spring Boot properties. See the &lt;em&gt;&lt;a href=&quot;howto#howto-use-short-command-line-arguments&quot;&gt;howto.html&lt;/a&gt;&lt;/em&gt; how-to for details.</source>
          <target state="translated">この手法を使用して、既存のSpringBootプロパティの「短い」バリアントを作成することもできます。詳細については、&lt;em&gt;&lt;a href=&quot;howto#howto-use-short-command-line-arguments&quot;&gt;howto.html&lt;/a&gt;&lt;/em&gt;ハウツーを参照してください。</target>
        </trans-unit>
        <trans-unit id="4977d02bc5a328895cf3f043a312b63857fb16e2" translate="yes" xml:space="preserve">
          <source>You can also write technology-specific endpoints by using &lt;code&gt;@JmxEndpoint&lt;/code&gt; or &lt;code&gt;@WebEndpoint&lt;/code&gt;. These endpoints are restricted to their respective technologies. For example, &lt;code&gt;@WebEndpoint&lt;/code&gt; is exposed only over HTTP and not over JMX.</source>
          <target state="translated">&lt;code&gt;@JmxEndpoint&lt;/code&gt; または &lt;code&gt;@WebEndpoint&lt;/code&gt; を使用して、テクノロジー固有のエンドポイントを作成することもできます。これらのエンドポイントは、それぞれのテクノロジーに制限されています。たとえば、 &lt;code&gt;@WebEndpoint&lt;/code&gt; はHTTP経由でのみ公開され、JMX経由では公開されません。</target>
        </trans-unit>
        <trans-unit id="207fc2d806742e19d72cdc0f40c647d7ae8f518c" translate="yes" xml:space="preserve">
          <source>You can apply customizations to particular registry implementations by being more specific about the generic type:</source>
          <target state="translated">汎用型をより具体的に指定することで、特定のレジストリ実装にカスタマイズを適用することができます。</target>
        </trans-unit>
        <trans-unit id="868b0c2b69dd194d4986331d1b94164d5d4ee70c" translate="yes" xml:space="preserve">
          <source>You can apply the same concept to the secondary &lt;code&gt;DataSource&lt;/code&gt; as well, as shown in the following example:</source>
          <target state="translated">次の例に示すように、同じ概念をセカンダリデータ &lt;code&gt;DataSource&lt;/code&gt; にも適用できます。</target>
        </trans-unit>
        <trans-unit id="78e9605872dce6e9034a6f7047fc08ec97b28640" translate="yes" xml:space="preserve">
          <source>You can automatically expand properties from the Gradle project by configuring the Java plugin&amp;rsquo;s &lt;code&gt;processResources&lt;/code&gt; task to do so, as shown in the following example:</source>
          <target state="translated">次の例に示すように、Javaプラグインの &lt;code&gt;processResources&lt;/code&gt; タスクを構成することで、Gradleプロジェクトからプロパティを自動的に展開できます。</target>
        </trans-unit>
        <trans-unit id="5dbec85f3c5053792d52c4052b34c895ff88907a" translate="yes" xml:space="preserve">
          <source>You can automatically expand properties from the Maven project by using resource filtering. If you use the &lt;code&gt;spring-boot-starter-parent&lt;/code&gt;, you can then refer to your Maven &amp;lsquo;project properties&amp;rsquo; with &lt;code&gt;@..@&lt;/code&gt; placeholders, as shown in the following example:</source>
          <target state="translated">リソースフィルタリングを使用して、Mavenプロジェクトからプロパティを自動的に展開できます。 &lt;code&gt;spring-boot-starter-parent&lt;/code&gt; を使用する場合は、次の例に示すように、 &lt;code&gt;@..@&lt;/code&gt; プレースホルダーを使用してMavenの「プロジェクトプロパティ」を参照できます。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
