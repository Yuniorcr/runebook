<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="perl">
    <body>
      <group id="perl">
        <trans-unit id="b69aab99f02e831fdaf85f1e3ecb658a4bca7288" translate="yes" xml:space="preserve">
          <source>This will go into the &lt;code&gt;configure_requires&lt;/code&gt; field of your</source>
          <target state="translated">これはあなたの &lt;code&gt;configure_requires&lt;/code&gt; フィールドに入ります</target>
        </trans-unit>
        <trans-unit id="044f8f7fc28b6f913f2eb7261e1be2cd16a84799" translate="yes" xml:space="preserve">
          <source>This will go into the &lt;code&gt;requires&lt;/code&gt; field of your</source>
          <target state="translated">これはあなたの &lt;code&gt;requires&lt;/code&gt; フィールドに入ります</target>
        </trans-unit>
        <trans-unit id="7b80864e93830ef0ed83edd0adbf1c600a67743b" translate="yes" xml:space="preserve">
          <source>This will hold all the output of a command. It needs to be a reference to a scalar. Note that this will hold both the STDOUT and STDERR messages, and you have no way of telling which is which. If you require this distinction, run the &lt;code&gt;run&lt;/code&gt; command in list context and inspect the individual buffers.</source>
          <target state="translated">これは、コマンドのすべての出力を保持します。スカラーへの参照である必要があります。これはSTDOUTメッセージとSTDERRメッセージの両方を保持し、どちらがどれであるかを知る方法がないことに注意してください。この区別が必要な場合は、リストコンテキストで &lt;code&gt;run&lt;/code&gt; コマンドを実行し、個々のバッファを調べます。</target>
        </trans-unit>
        <trans-unit id="02c623985a1a7dc417e0a406fc6886bed2478d0f" translate="yes" xml:space="preserve">
          <source>This will indeed make the value &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;, but if you try to modify the value of &lt;code&gt;key&lt;/code&gt; , you'll get the following error:</source>
          <target state="translated">これは確かに値を &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; にしますが、 &lt;code&gt;key&lt;/code&gt; の値を変更しようとすると、次のエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="32d093230d8afd4dfa30e5b675bc05f84dd94d65" translate="yes" xml:space="preserve">
          <source>This will indeed make the value &lt;code&gt;undef&lt;/code&gt;, but if you try to modify the value of &lt;code&gt;key&lt;/code&gt;, you'll get the following error:</source>
          <target state="translated">これは確かに値を &lt;code&gt;undef&lt;/code&gt; にしますが、 &lt;code&gt;key&lt;/code&gt; の値を変更しようとすると、次のエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="6c59ff5ece51fef3713b13fdc203a334520a2680" translate="yes" xml:space="preserve">
          <source>This will indeed remove all references to destroyed objects, but the remaining references to objects will be strong, causing the remaining objects to never be destroyed because there is now always a strong reference to them in the @object array.</source>
          <target state="translated">これは確かに破壊されたオブジェクトへのすべての参照を削除しますが、オブジェクトへの残りの参照は強力なものとなり、@オブジェクト配列には常に強力な参照が存在するため、残りのオブジェクトが破壊されることはありません。</target>
        </trans-unit>
        <trans-unit id="502a4e7b5c19c4f943e0927f97d4e589d92242b6" translate="yes" xml:space="preserve">
          <source>This will install Perl, including</source>
          <target state="translated">これにより、以下のような Perl がインストールされます。</target>
        </trans-unit>
        <trans-unit id="5360f0733d6fa5a59167722a15beb5e5d0628299" translate="yes" xml:space="preserve">
          <source>This will install all files in the module under your home directory, with man pages and libraries going into an appropriate place (usually ~/man and ~/lib). How the exact location is determined is complicated and depends on how your Perl was configured. INSTALL_BASE works more like what other build systems call &quot;prefix&quot; than PREFIX and we recommend you use that instead.</source>
          <target state="translated">これにより、モジュール内のすべてのファイルがホームディレクトリの下にインストールされ、 man ページとライブラリは適切な場所(通常は ~/man と ~/lib)にインストールされます。正確な場所がどのように決定されるかは複雑で、Perlの設定方法に依存します。INSTALL_BASE は PREFIX よりも他のビルドシステムが &quot;prefix&quot; と呼ぶものに似ているので、代わりにこれを使うことをお勧めします。</target>
        </trans-unit>
        <trans-unit id="c93de459956112e67c32897f139a786020e9ae92" translate="yes" xml:space="preserve">
          <source>This will install the module's architecture-independent files into ~/lib, the architecture-dependent files into ~/lib/$archname.</source>
          <target state="translated">これにより、モジュールのアーキテクチャに依存しないファイルが ~/lib に、アーキテクチャに依存しないファイルが ~/lib/$archname にインストールされます。</target>
        </trans-unit>
        <trans-unit id="037930b84c250a860d75497404c0fa5cd777c91f" translate="yes" xml:space="preserve">
          <source>This will invoke &lt;code&gt;MyExpirePolicy-&amp;gt;TIEHASH(args)&lt;/code&gt; . MyExpirePolicy::TIEHASH should do whatever is appropriate to set up the cache, and it should return the cache object to the caller.</source>
          <target state="translated">これにより、 &lt;code&gt;MyExpirePolicy-&amp;gt;TIEHASH(args)&lt;/code&gt; が呼び出されます。MyExpirePolicy :: TIEHASHは、キャッシュを設定するために適切なことをすべて実行し、キャッシュオブジェクトを呼び出し元に返す必要があります。</target>
        </trans-unit>
        <trans-unit id="a5a59c7a890c0f22a657cb40bc1da8408c4952ff" translate="yes" xml:space="preserve">
          <source>This will invoke &lt;code&gt;MyExpirePolicy-&amp;gt;TIEHASH(args)&lt;/code&gt;. MyExpirePolicy::TIEHASH should do whatever is appropriate to set up the cache, and it should return the cache object to the caller.</source>
          <target state="translated">これにより、 &lt;code&gt;MyExpirePolicy-&amp;gt;TIEHASH(args)&lt;/code&gt; が呼び出されます。MyExpirePolicy :: TIEHASHは、キャッシュを設定するために適切なことをすべて実行し、キャッシュオブジェクトを呼び出し元に返す必要があります。</target>
        </trans-unit>
        <trans-unit id="8b7f85cc213a9528b5fae8654b1de379039b58cd" translate="yes" xml:space="preserve">
          <source>This will invoke the Perl script</source>
          <target state="translated">これにより、Perl スクリプト</target>
        </trans-unit>
        <trans-unit id="2d3ad41335ec2699e64793b18bdc830c93f34fd9" translate="yes" xml:space="preserve">
          <source>This will issue a warning from the file and line number of the context.</source>
          <target state="translated">これにより、コンテキストのファイルと行番号から警告が発行されます。</target>
        </trans-unit>
        <trans-unit id="3d7846c6fc3f33f521fafde1ba9db4c27782855d" translate="yes" xml:space="preserve">
          <source>This will likely require many formatters to have tables mapping from treatable Unicode codepoints (such as the &quot;\xE9&quot; for the e-acute character) to the escape sequences or codes necessary for conveying such sequences in the target output format. A converter to *roff would, for example know that &quot;\xE9&quot; (whether conveyed literally, or via a E&amp;lt;...&amp;gt; sequence) is to be conveyed as &quot;e\\*'&quot;. Similarly, a program rendering Pod in a Mac OS application window, would presumably need to know that &quot;\xE9&quot; maps to codepoint 142 in MacRoman encoding that (at time of writing) is native for Mac OS. Such Unicode2whatever mappings are presumably already widely available for common output formats. (Such mappings may be incomplete! Implementers are not expected to bend over backwards in an attempt to render Cherokee syllabics, Etruscan runes, Byzantine musical symbols, or any of the other weird things that Unicode can encode.) And if a Pod document uses a character not found in such a mapping, the formatter should consider it an unrenderable character.</source>
          <target state="translated">これには、処理可能なUnicodeコードポイント（e-acute文字の「\ xE9」など）からエスケープシーケンス、またはそのようなシーケンスをターゲット出力フォーマットで伝達するために必要なコードにマッピングするテーブルが多くのフォーマッタに必要になる可能性があります。 * roffへのコンバーターは、例えば、「\ xE9」（文字通り、またはE &amp;lt;...&amp;gt;シーケンスを介して伝達されるかどうか）が「e \\ * '」として伝達されることを知っています。同様に、Mac OSアプリケーションウィンドウでポッドをレンダリングするプログラムは、おそらく「\ xE9」がMacRomanエンコーディングのコードポイント142にマップされていることを知っている必要があります。このようなUnicode2whateverマッピングは、おそらく一般的な出力形式ですでに広く利用可能です。 （このようなマッピングは不完全な場合があります！実装者は、チェロキー音節、エトルリアルーン、ビザンチン音楽記号、またはUnicodeがエンコードできるその他の奇妙なものをレンダリングするために後方に曲がることは期待されていません。）ポッドドキュメントがそのようなマッピングで見つからない文字を使用する場合、フォーマッターはそれをレンダリングできない文字と見なす必要があります。</target>
        </trans-unit>
        <trans-unit id="b9af5931254814b66f0bff8fcce1663d48d23196" translate="yes" xml:space="preserve">
          <source>This will load the core of the Getopt::Long module and prepare your program for using it. Most of the actual Getopt::Long code is not loaded until you really call one of its functions.</source>
          <target state="translated">これにより、Getopt::Long モジュールのコアが読み込まれ、それを使用するためのプログラムが準備されます。実際の Getopt::Long コードのほとんどは、その関数を実際に呼び出すまで読み込まれません。</target>
        </trans-unit>
        <trans-unit id="84613dc13583c880545edeaa7309fbaf7d904405" translate="yes" xml:space="preserve">
          <source>This will load the necessary things (like BigInt) when they are needed, and automatically.</source>
          <target state="translated">これは必要なときに必要なもの(BigIntなど)を自動的にロードしてくれます。</target>
        </trans-unit>
        <trans-unit id="7a6931f78851cb973cc9d65880d16fc9ed754cce" translate="yes" xml:space="preserve">
          <source>This will make a shallow clone of the facet. You may specify fields to override as arguments.</source>
          <target state="translated">これにより、ファセットの浅いクローンが作成されます。引数としてオーバーライドするフィールドを指定することができます。</target>
        </trans-unit>
        <trans-unit id="9d8f3b44f04663247b0f9e8a7dffb832852e0f5e" translate="yes" xml:space="preserve">
          <source>This will match all non-Unicode code points, since every one of them is not in Kana. You can use intersection to exclude these, if desired, as this modified example shows:</source>
          <target state="translated">これは、Unicode 以外のすべてのコード点にマッチします。必要であれば、この修正例が示すように、交差を使ってこれらを除外することができます。</target>
        </trans-unit>
        <trans-unit id="944f02167d664ef9e70480a5d72868212b398166" translate="yes" xml:space="preserve">
          <source>This will match all the digit characters that are in the Thai script.</source>
          <target state="translated">これは、タイ語のスクリプトにあるすべての桁文字と一致します。</target>
        </trans-unit>
        <trans-unit id="99b2cac7ea367f44702a2a2abb89101d039ec9d6" translate="yes" xml:space="preserve">
          <source>This will normally hide the current context for the top hub. If you need to hide the context for a different hub you can pass in the optional &lt;code&gt;$hid&lt;/code&gt; parameter.</source>
          <target state="translated">これにより、通常、トップハブの現在のコンテキストが非表示になります。別のハブのコンテキストを非表示にする必要がある場合は、オプションの &lt;code&gt;$hid&lt;/code&gt; パラメーターを渡すことができます。</target>
        </trans-unit>
        <trans-unit id="6273e23b6c541cdfeea4c27da4fef2152f6377e8" translate="yes" xml:space="preserve">
          <source>This will only show up under use strict (another good reason to run under use strict).</source>
          <target state="translated">これは use strict の下でのみ表示されます (use strict の下で実行するもう一つの良い理由)。</target>
        </trans-unit>
        <trans-unit id="c65fa159bab1e30bba712c2c1e9c30d9ac5133d7" translate="yes" xml:space="preserve">
          <source>This will optimize down to &lt;code&gt;&quot;foo&quot;&lt;/code&gt; , so &lt;code&gt;&quot;bar&quot;&lt;/code&gt; will never be considered (even though the rules say to use a smartmatch on &lt;code&gt;&quot;foo&quot;&lt;/code&gt; ). For an alternation like this, an array ref will work, because this will instigate smartmatching:</source>
          <target state="translated">これは &lt;code&gt;&quot;foo&quot;&lt;/code&gt; まで最適化されるので、 &lt;code&gt;&quot;bar&quot;&lt;/code&gt; は考慮されません（たとえ &lt;code&gt;&quot;foo&quot;&lt;/code&gt; でスマートマッチを使用するようにルールが言っているとしても）。このような代替の場合、配列照合が機能します。これは、スマートマッチングを引き起こすためです。</target>
        </trans-unit>
        <trans-unit id="33deb2e289bee882cbf3028d1fec9799baf70dd3" translate="yes" xml:space="preserve">
          <source>This will optimize down to &lt;code&gt;&quot;foo&quot;&lt;/code&gt;, so &lt;code&gt;&quot;bar&quot;&lt;/code&gt; will never be considered (even though the rules say to use a smartmatch on &lt;code&gt;&quot;foo&quot;&lt;/code&gt;). For an alternation like this, an array ref will work, because this will instigate smartmatching:</source>
          <target state="translated">これは &lt;code&gt;&quot;foo&quot;&lt;/code&gt; まで最適化されるため、 &lt;code&gt;&quot;bar&quot;&lt;/code&gt; は考慮されません（ルールでは &lt;code&gt;&quot;foo&quot;&lt;/code&gt; smartmatchを使用するように指示されていますが）。このような代替の場合、配列refが機能します。これは、スマートマッチングを引き起こすためです。</target>
        </trans-unit>
        <trans-unit id="4c8134855a16c717eaa6422187d170260e57cb1b" translate="yes" xml:space="preserve">
          <source>This will output only the &lt;code&gt;=head2 Algorithm&lt;/code&gt; heading and content within the &lt;code&gt;=head1 DESCRIPTION&lt;/code&gt; section. The regexp binding is stronger than the section separator, such that e.g.:</source>
          <target state="translated">これにより、 &lt;code&gt;=head2 Algorithm&lt;/code&gt; セクション内の &lt;code&gt;=head1 DESCRIPTION&lt;/code&gt; head2アルゴリズムの見出しとコンテンツのみが出力されます。正規表現のバインドは、セクションセパレータよりも強力です。たとえば、次のようになります。</target>
        </trans-unit>
        <trans-unit id="a53b7fc46cab28aa51967ea901426700557399bc" translate="yes" xml:space="preserve">
          <source>This will pop a hub from the stack, if the hub at the top of the stack does not match the hub you expect (passed in as an argument) it will throw an exception.</source>
          <target state="translated">スタックからハブを取り出します。スタックの先頭にあるハブが期待したハブと一致しない場合(引数として渡された場合)は例外をスローします。</target>
        </trans-unit>
        <trans-unit id="d8cbe9fcb0b43d3c677dc5305458ee2e62e4a31f" translate="yes" xml:space="preserve">
          <source>This will predeclare all the subroutine whose names are in the list, allowing you to use them without parentheses even before they're declared.</source>
          <target state="translated">これは、リストに名前があるすべてのサブルーチンを事前に宣言するので、宣言される前でも括弧なしで使用することができます。</target>
        </trans-unit>
        <trans-unit id="d6c5fdfb9dbf5dd576a4fe59626b53e05f4e7d63" translate="yes" xml:space="preserve">
          <source>This will predeclare all the subroutines whose names are in the list, allowing you to use them without parentheses (as list operators) even before they're declared.</source>
          <target state="translated">これにより、リスト内に名前があるすべてのサブルーチンが事前に宣言され、宣言される前でも(リスト演算子として)括弧なしで使用できるようになります。</target>
        </trans-unit>
        <trans-unit id="0485931e797f0d3157ea50aac95b26b852bb2c34" translate="yes" xml:space="preserve">
          <source>This will predeclare all the variables whose names are in the list, allowing you to use them under &quot;use strict&quot;, and disabling any typo warnings.</source>
          <target state="translated">これは、リストに名前があるすべての変数を事前に宣言し、&quot;use strict&quot; の下でそれらを使用することができ、タイプミスの警告を無効にします。</target>
        </trans-unit>
        <trans-unit id="2ed7ee1155828d2b2b40b29d755792b670ff1874" translate="yes" xml:space="preserve">
          <source>This will print</source>
          <target state="translated">これで印刷されます。</target>
        </trans-unit>
        <trans-unit id="0c513de1733ecd2b8ffce2a2e048c7fdbe91583f" translate="yes" xml:space="preserve">
          <source>This will print -3, not -2 (as it would if you divide -5 by 2 and truncate the result).</source>
          <target state="translated">これは-2ではなく-3を表示します(-5を2で割って結果を切り捨てた場合のように)。</target>
        </trans-unit>
        <trans-unit id="e88a5abf01aa2eb9eaafc62c5178572c3f0dcb93" translate="yes" xml:space="preserve">
          <source>This will print a grouped list of Perl's functions, like the &lt;a href=&quot;../perlfunc#Perl-Functions-by-Category&quot;&gt;Perl Functions by Category in perlfunc&lt;/a&gt; section.</source>
          <target state="translated">これは&lt;a href=&quot;../perlfunc#Perl-Functions-by-Category&quot;&gt;、perlfunc&lt;/a&gt;セクションのカテゴリ別のPerl関数のように、Perlの関数のグループ化されたリストを出力します。</target>
        </trans-unit>
        <trans-unit id="e41583327bc9cc32aaa0b02aa5d9186e43155f80" translate="yes" xml:space="preserve">
          <source>This will print a grouped list of Perl's functions, like the &lt;a href=&quot;perlfunc#Perl-Functions-by-Category&quot;&gt;&quot;Perl Functions by Category&quot; in perlfunc&lt;/a&gt; section.</source>
          <target state="translated">これ&lt;a href=&quot;perlfunc#Perl-Functions-by-Category&quot;&gt;により、perlfunc&lt;/a&gt;セクションの「カテゴリ別のPerl関数」のように、Perlの関数のグループ化されたリストが出力されます。</target>
        </trans-unit>
        <trans-unit id="06f3c28ca20ac2a91e7b3a25f9cd8948580e5a8c" translate="yes" xml:space="preserve">
          <source>This will print arguments for linking with &lt;code&gt;libperl&lt;/code&gt; and extensions found in &lt;code&gt;$Config{static_ext}&lt;/code&gt; . This includes libraries found in &lt;code&gt;$Config{libs}&lt;/code&gt; and the first ModuleName.a library for each extension that is found by searching &lt;code&gt;@INC&lt;/code&gt; or the path specified by the &lt;b&gt;-I&lt;/b&gt; option. In addition, when ModuleName.a is found, additional linker arguments are picked up from the</source>
          <target state="translated">これは、 &lt;code&gt;$Config{static_ext}&lt;/code&gt; &lt;code&gt;libperl&lt;/code&gt; および拡張機能とリンクするための引数を出力します。これには、 &lt;code&gt;$Config{libs}&lt;/code&gt; 見つかったライブラリと、 &lt;code&gt;@INC&lt;/code&gt; または&lt;b&gt;-I&lt;/b&gt;オプションで指定されたパスを検索して見つかった各拡張機能の最初のModuleName.aライブラリが含まれます。さらに、ModuleName.aが見つかると、追加のリンカー引数が</target>
        </trans-unit>
        <trans-unit id="e1a6cfe75b96e0fdc730bad6aa31b403693c30dc" translate="yes" xml:space="preserve">
          <source>This will print arguments for linking with &lt;code&gt;libperl&lt;/code&gt; and extensions found in &lt;code&gt;$Config{static_ext}&lt;/code&gt;. This includes libraries found in &lt;code&gt;$Config{libs}&lt;/code&gt; and the first ModuleName.a library for each extension that is found by searching &lt;code&gt;@INC&lt;/code&gt; or the path specified by the &lt;b&gt;-I&lt;/b&gt; option. In addition, when ModuleName.a is found, additional linker arguments are picked up from the</source>
          <target state="translated">これにより、 &lt;code&gt;$Config{static_ext}&lt;/code&gt; &lt;code&gt;libperl&lt;/code&gt; および拡張機能とリンクするための引数が出力されます。これには、 &lt;code&gt;$Config{libs}&lt;/code&gt; 見つかったライブラリと、 &lt;code&gt;@INC&lt;/code&gt; または&lt;b&gt;-I&lt;/b&gt;オプションで指定されたパスを検索して見つかった各拡張機能の最初のModuleName.aライブラリが含まれます。さらに、ModuleName.aが見つかると、追加のリンカー引数が&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="4f60443610a43a49d5ead9ee72728dd61dc61c29" translate="yes" xml:space="preserve">
          <source>This will print only the content of &lt;code&gt;=head1 DESCRIPTION&lt;/code&gt; and the &lt;code&gt;=head2 Introduction&lt;/code&gt; sections, but no other &lt;code&gt;=head2&lt;/code&gt;, and no other &lt;code&gt;=head1&lt;/code&gt; either.</source>
          <target state="translated">これはのコンテンツのみ表示します &lt;code&gt;=head1 DESCRIPTION&lt;/code&gt; および &lt;code&gt;=head2 Introduction&lt;/code&gt; セクション、ない他 &lt;code&gt;=head2&lt;/code&gt; 、ノーその他 &lt;code&gt;=head1&lt;/code&gt; のいずれかを。</target>
        </trans-unit>
        <trans-unit id="672df04456226246b8abe50d62f0bbee0ad0889a" translate="yes" xml:space="preserve">
          <source>This will print out</source>
          <target state="translated">これで印刷されます。</target>
        </trans-unit>
        <trans-unit id="0a53fd47cfa0cb2aa29facae441d5e18a6061c7b" translate="yes" xml:space="preserve">
          <source>This will print out a warning about overwriting Mytest2, but that's okay. Our files are stored in Mytest2/mylib, and will be untouched.</source>
          <target state="translated">これは、Mytest2を上書きすることについての警告を出力しますが、それは大丈夫です。私たちのファイルはMytest2/mylibに保存されているので、手付かずのままになります。</target>
        </trans-unit>
        <trans-unit id="7bed74d2734f7ca79e0f367ce5a29d3b84e44af2" translate="yes" xml:space="preserve">
          <source>This will print...</source>
          <target state="translated">これは印刷されます...</target>
        </trans-unit>
        <trans-unit id="6e363eb5c9d1e189e7877f05521713cb961f9afe" translate="yes" xml:space="preserve">
          <source>This will print:</source>
          <target state="translated">これで印刷されます。</target>
        </trans-unit>
        <trans-unit id="899924678036d32490097cf13a3010a6c2e916cc" translate="yes" xml:space="preserve">
          <source>This will produce: &quot;&lt;code&gt;$a &amp;lt;=&amp;gt; $b&lt;/code&gt; &quot;</source>
          <target state="translated">これにより、「 &lt;code&gt;$a &amp;lt;=&amp;gt; $b&lt;/code&gt; 」が生成されます</target>
        </trans-unit>
        <trans-unit id="40197f89d9552ed2ed618b0a94d0da9bdd7f768c" translate="yes" xml:space="preserve">
          <source>This will produce: &quot;&lt;code&gt;$a &amp;lt;=&amp;gt; $b&lt;/code&gt;&quot;</source>
          <target state="translated">これにより、次のようになります： &quot; &lt;code&gt;$a &amp;lt;=&amp;gt; $b&lt;/code&gt; &quot;</target>
        </trans-unit>
        <trans-unit id="65d8f131a0962cd0151f9af4c7b366b97852fe0c" translate="yes" xml:space="preserve">
          <source>This will push the new hub onto the stack.</source>
          <target state="translated">これにより、新しいハブをスタックにプッシュします。</target>
        </trans-unit>
        <trans-unit id="f9e190e6e848eda316c1f8903ac738aaf6f899b4" translate="yes" xml:space="preserve">
          <source>This will put modules into</source>
          <target state="translated">これはモジュールを</target>
        </trans-unit>
        <trans-unit id="7f52025f3fd591756e387158d1cd6ccc53bfb3a5" translate="yes" xml:space="preserve">
          <source>This will quote $text so it is interpreted literally in the shell.</source>
          <target state="translated">これは$textを引用するので、シェル内では文字通りに解釈されます。</target>
        </trans-unit>
        <trans-unit id="41f7aa0266df2687cdc027e0895ee05c3a8cf995" translate="yes" xml:space="preserve">
          <source>This will release the context. This runs cleanup tasks, and several important hooks. It will also restore &lt;code&gt;$!&lt;/code&gt;, &lt;code&gt;$?&lt;/code&gt;, and &lt;code&gt;$@&lt;/code&gt; to what they were when the context was created.</source>
          <target state="translated">これにより、コンテキストが解放されます。これにより、クリーンアップタスクといくつかの重要なフックが実行されます。また、 &lt;code&gt;$!&lt;/code&gt; 復元します！、 &lt;code&gt;$?&lt;/code&gt; 、および &lt;code&gt;$@&lt;/code&gt; は、コンテキストが作成されたときの状態になります。</target>
        </trans-unit>
        <trans-unit id="cec316130454262fb9a931304c0dde874c470f8c" translate="yes" xml:space="preserve">
          <source>This will remove the value of a specified meta &lt;code&gt;$key&lt;/code&gt;. The old &lt;code&gt;$val&lt;/code&gt; will be returned.</source>
          <target state="translated">これにより、指定されたメタ &lt;code&gt;$key&lt;/code&gt; 値が削除されます。古い &lt;code&gt;$val&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="07824cc0b4d23c3d3bb1cfda8a48de7d53df4bf2" translate="yes" xml:space="preserve">
          <source>This will reset the state of the incremental parser and will remove the parsed text from the input buffer so far. This is useful after &lt;code&gt;incr_parse&lt;/code&gt; died, in which case the input buffer and incremental parser state is left unchanged, to skip the text parsed so far and to reset the parse state.</source>
          <target state="translated">これにより、インクリメンタルパーサーの状態がリセットされ、これまでに解析されたテキストが入力バッファーから削除されます。これは、 &lt;code&gt;incr_parse&lt;/code&gt; が終了した後、入力バッファーと増分パーサーの状態が変更されないままになっている場合に、これまでに解析されたテキストをスキップして、解析状態をリセットするのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="f1f61ad8e0b3eb41c5891bbe5a0d386a76431ba8" translate="yes" xml:space="preserve">
          <source>This will return &lt;code&gt;undef&lt;/code&gt; if the relationship cannot be checked, which happens if either event has an incomplete or missing trace. This will return &lt;code&gt;0&lt;/code&gt; if the traces are complete, but do not match. &lt;code&gt;1&lt;/code&gt; will be returned if there is a match.</source>
          <target state="translated">関係を確認できない場合、これは &lt;code&gt;undef&lt;/code&gt; を返します。これは、いずれかのイベントに不完全または欠落したトレースがある場合に発生します。トレースが完了しているが一致しない場合、これは &lt;code&gt;0&lt;/code&gt; を返します。一致する場合は &lt;code&gt;1&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="8fd2b879f129714bea8a682b5294c7417238be95" translate="yes" xml:space="preserve">
          <source>This will return a hashref of facet data. Each facet hash will be a shallow copy of the original.</source>
          <target state="translated">これは、ファセットデータのハッシュフを返します。各ファセットハッシュはオリジナルの浅いコピーになります。</target>
        </trans-unit>
        <trans-unit id="f59d5228b102dd5cbad2d2e6da168ec6245e7a05" translate="yes" xml:space="preserve">
          <source>This will return a shallow clone of the context. The shallow clone is safe to store for later.</source>
          <target state="translated">これは、コンテキストの浅いクローンを返します。この浅いクローンは後で保存しておいても安全です。</target>
        </trans-unit>
        <trans-unit id="fe211d3e5a7b27ac06f1bfed9d79529a0b4e0811" translate="yes" xml:space="preserve">
          <source>This will return all the hubs in the stack as a list.</source>
          <target state="translated">これは、スタック内のすべてのハブをリストとして返します。</target>
        </trans-unit>
        <trans-unit id="a3fa038bab0a35a1278c1028a76b1b599ab2f3c7" translate="yes" xml:space="preserve">
          <source>This will return the</source>
          <target state="translated">を返します。</target>
        </trans-unit>
        <trans-unit id="3012b886e66f0d66b1233e77e03322a89d9ca8d0" translate="yes" xml:space="preserve">
          <source>This will return the 'about' facet hashref.</source>
          <target state="translated">これは'about'ファセットのハッシュrefを返します。</target>
        </trans-unit>
        <trans-unit id="9d3892ab0e68676392aba5a3deb55d6e5f3a7a00" translate="yes" xml:space="preserve">
          <source>This will return the 'trace' facet, normally blessed (but this is not enforced when the trace is set using &lt;code&gt;set_trace()&lt;/code&gt;.</source>
          <target state="translated">これにより、通常は祝福された「トレース」ファセットが返されます（ただし、 &lt;code&gt;set_trace()&lt;/code&gt; を使用してトレースが設定されている場合、これは強制されません。</target>
        </trans-unit>
        <trans-unit id="6c947246a8100b62a64074ea3ea27340d97e5c57" translate="yes" xml:space="preserve">
          <source>This will return the &lt;a href=&quot;Test2::API::Stack&quot;&gt;Test2::API::Stack&lt;/a&gt; instance the context used to find the current hub.</source>
          <target state="translated">これにより、現在のハブを見つけるために使用されるコンテキストである&lt;a href=&quot;Test2::API::Stack&quot;&gt;Test2 :: API :: Stack&lt;/a&gt;インスタンスが返されます。</target>
        </trans-unit>
        <trans-unit id="071d70de3cfed7ceb62bef529de3f7a12de2cf57" translate="yes" xml:space="preserve">
          <source>This will return the &lt;a href=&quot;Test2::EventFacet::Trace&quot;&gt;Test2::EventFacet::Trace&lt;/a&gt; instance used by the context.</source>
          <target state="translated">これにより、コンテキストで使用される&lt;a href=&quot;Test2::EventFacet::Trace&quot;&gt;Test2 :: EventFacet :: Trace&lt;/a&gt;インスタンスが返されます。</target>
        </trans-unit>
        <trans-unit id="7c1e2a334411bcce7d3ed6759e85d7774c7db84a" translate="yes" xml:space="preserve">
          <source>This will return the &lt;a href=&quot;Test2::Hub&quot;&gt;Test2::Hub&lt;/a&gt; instance the context recognizes as the current one to which all events should be sent.</source>
          <target state="translated">これにより、コンテキストがすべてのイベントの送信先となる現在のインスタンスとして認識する&lt;a href=&quot;Test2::Hub&quot;&gt;Test2 :: Hub&lt;/a&gt;インスタンスが返されます。</target>
        </trans-unit>
        <trans-unit id="2912d0daea2e211af97d7e1a3ea98a0298d18c0b" translate="yes" xml:space="preserve">
          <source>This will return the filename based on the template but will not open this file. Cannot be used in conjunction with UNLINK set to true. Default is to always open the file to protect from possible race conditions. A warning is issued if warnings are turned on. Consider using the tmpnam() and mktemp() functions described elsewhere in this document if opening the file is not required.</source>
          <target state="translated">これはテンプレートに基づいたファイル名を返しますが、このファイルは開きません。UNLINKがtrueに設定されている場合は使用できません。デフォルトでは、レースの可能性のある状態から保護するために、常にファイルを開くように設定されています。警告がオンになっている場合は警告が表示されます。ファイルを開く必要がない場合は、このドキュメントの他の場所で説明されているtmpnam()とmktemp()関数の使用を検討してください。</target>
        </trans-unit>
        <trans-unit id="5166921abcf19f440f3497ae7dcd12be03f7bc28" translate="yes" xml:space="preserve">
          <source>This will return the global &lt;a href=&quot;Test2::API::Stack&quot;&gt;Test2::API::Stack&lt;/a&gt; instance. If this has not yet been initialized it will be initialized now.</source>
          <target state="translated">これにより、グローバル&lt;a href=&quot;Test2::API::Stack&quot;&gt;Test2 :: API :: Stack&lt;/a&gt;インスタンスが返されます。これがまだ初期化されていない場合は、ここで初期化されます。</target>
        </trans-unit>
        <trans-unit id="a995f385670c66d0da520343be6badafb9165a59" translate="yes" xml:space="preserve">
          <source>This will return the global &lt;a href=&quot;Test2::IPC::Driver&quot;&gt;Test2::IPC::Driver&lt;/a&gt; instance. If this has not yet been initialized it will be initialized now.</source>
          <target state="translated">これにより、グローバル&lt;a href=&quot;Test2::IPC::Driver&quot;&gt;Test2 :: IPC :: Driver&lt;/a&gt;インスタンスが返されます。これがまだ初期化されていない場合は、ここで初期化されます。</target>
        </trans-unit>
        <trans-unit id="d642486b0fdba840f586862b0632bdfe7b784cf3" translate="yes" xml:space="preserve">
          <source>This will return the global formatter class. This is not an instance. By default the formatter is set to &lt;a href=&quot;Test2::Formatter::TAP&quot;&gt;Test2::Formatter::TAP&lt;/a&gt;.</source>
          <target state="translated">これにより、グローバルフォーマッタクラスが返されます。これはインスタンスではありません。デフォルトでは、フォーマッタは&lt;a href=&quot;Test2::Formatter::TAP&quot;&gt;Test2 :: Formatter :: TAPに&lt;/a&gt;設定されています。</target>
        </trans-unit>
        <trans-unit id="a43701025bcaaa97f4c20a7fae8b7f58307dc924" translate="yes" xml:space="preserve">
          <source>This will return the id of the current thread when threads are enabled, otherwise it returns 0.</source>
          <target state="translated">これは、スレッドが有効になっている場合には現在のスレッドの ID を返し、そうでない場合は 0 を返します。</target>
        </trans-unit>
        <trans-unit id="a95636615c967951a75f0745e419202e8c181663" translate="yes" xml:space="preserve">
          <source>This will return the key for the facet in the facet data hash.</source>
          <target state="translated">これは、ファセットデータハッシュ内のファセットのキーを返します。</target>
        </trans-unit>
        <trans-unit id="d82f0a6881fcf3d362a2caae5716b353b8c09bb4" translate="yes" xml:space="preserve">
          <source>This will return the top hub from the stack. If there is no top hub yet this will create it.</source>
          <target state="translated">スタックからトップハブを返します。トップハブがまだない場合は、これで作成します。</target>
        </trans-unit>
        <trans-unit id="c9d0e21b9306afe027cffc8be7eb5a1ef6fdaafd" translate="yes" xml:space="preserve">
          <source>This will return the top hub from the stack. If there is no top hub yet this will return undef.</source>
          <target state="translated">スタックからトップハブを返します。まだトップハブがない場合は undef を返します。</target>
        </trans-unit>
        <trans-unit id="626d4c923543f739ced5a5a4133e42da29976f88" translate="yes" xml:space="preserve">
          <source>This will return true if testing is complete and no other events should be sent. This is useful in things like warning handlers where you might want to turn warnings into events, but need them to start acting like normal warnings when testing is done.</source>
          <target state="translated">これは、テストが完了し、他のイベントを送信すべきではない場合にtrueを返します。これは警告ハンドラのように、警告をイベントに変えたいが、テストが完了したときに通常の警告のように動作を開始させたい場合に便利です。</target>
        </trans-unit>
        <trans-unit id="dc9e1cf54480f23b5df8c08401a8eff218ed9c89" translate="yes" xml:space="preserve">
          <source>This will return true if the facet should be in a list instead of a single item.</source>
          <target state="translated">これは、切子が単一の項目ではなくリストの中にあるべきかどうかを判定します。</target>
        </trans-unit>
        <trans-unit id="058b4ba4b9036eb7bc1ad3260ce86f253167e2de" translate="yes" xml:space="preserve">
          <source>This will return true if the stack and IPC instances have already been initialized. It will return false if they have not. Init happens as late as possible. It happens as soon as a tool requests the IPC instance, the formatter, or the stack.</source>
          <target state="translated">スタックとIPCインスタンスが既に初期化されている場合はtrueを返します。初期化されていない場合は false を返します。Init は可能な限り遅いタイミングで行われます。ツールがIPCインスタンス、フォーマッタ、スタックを要求するとすぐに発生します。</target>
        </trans-unit>
        <trans-unit id="afb834590329aede62a7b1a0c021d221b2c6d004" translate="yes" xml:space="preserve">
          <source>This will run Configure and keep a record:</source>
          <target state="translated">これは、Configureを実行して記録を保持します。</target>
        </trans-unit>
        <trans-unit id="af9c0543615ac7cf90353b4a24138697b5df455b" translate="yes" xml:space="preserve">
          <source>This will run the provided codeblock with the args in &lt;code&gt;@args&lt;/code&gt;. This codeblock will be run as a subtest. A subtest is an isolated test state that is condensed into a single &lt;a href=&quot;Test2::Event::Subtest&quot;&gt;Test2::Event::Subtest&lt;/a&gt; event, which contains all events generated inside the subtest.</source>
          <target state="translated">これにより、提供されたコードブロックが &lt;code&gt;@args&lt;/code&gt; の引数で実行されます。このコードブロックはサブテストとして実行されます。サブテストは、&lt;a href=&quot;Test2::Event::Subtest&quot;&gt;サブテスト&lt;/a&gt;内で生成されたすべてのイベントを含む単一のTest2 :: Event :: Subtestイベントに凝縮された分離されたテスト状態です。</target>
        </trans-unit>
        <trans-unit id="3ec88525a1d6ccafa3d30457de14d7bad4de11c0" translate="yes" xml:space="preserve">
          <source>This will search for a module named &lt;code&gt;App::Prove::Plugin::MyPlugin&lt;/code&gt; , or failing that, &lt;code&gt;MyPlugin&lt;/code&gt; . If the plugin can't be found, &lt;code&gt;prove&lt;/code&gt; will complain &amp;amp; exit.</source>
          <target state="translated">これは、 &lt;code&gt;App::Prove::Plugin::MyPlugin&lt;/code&gt; という名前のモジュールを検索するか、失敗して &lt;code&gt;MyPlugin&lt;/code&gt; を検索します。プラグインが見つからない場合は、 &lt;code&gt;prove&lt;/code&gt; 文句＆終了します。</target>
        </trans-unit>
        <trans-unit id="5e687f1f0bf9f59f044484eb486936cdf9e849ac" translate="yes" xml:space="preserve">
          <source>This will search for a module named &lt;code&gt;App::Prove::Plugin::MyPlugin&lt;/code&gt;, or failing that, &lt;code&gt;MyPlugin&lt;/code&gt;. If the plugin can't be found, &lt;code&gt;prove&lt;/code&gt; will complain &amp;amp; exit.</source>
          <target state="translated">これにより、 &lt;code&gt;App::Prove::Plugin::MyPlugin&lt;/code&gt; という名前のモジュールが検索されるか、失敗した場合は &lt;code&gt;MyPlugin&lt;/code&gt; が検索されます。プラグインが見つからない場合、 &lt;code&gt;prove&lt;/code&gt; は文句を言って終了します。</target>
        </trans-unit>
        <trans-unit id="f30c710e3d8112c1044077c8cf0f284dc043fe97" translate="yes" xml:space="preserve">
          <source>This will send and return an &lt;a href=&quot;Test2::Event::Pass&quot;&gt;Test2::Event::Pass&lt;/a&gt; event. You may optionally provide a &lt;code&gt;$name&lt;/code&gt; for the assertion.</source>
          <target state="translated">これにより、&lt;a href=&quot;Test2::Event::Pass&quot;&gt;Test2 :: Event :: Pass&lt;/a&gt;イベントが送信および返されます。オプションで、アサーションに &lt;code&gt;$name&lt;/code&gt; を指定できます。</target>
        </trans-unit>
        <trans-unit id="6032dd11dd54e4e97302369ddf59357d7575753c" translate="yes" xml:space="preserve">
          <source>This will set &lt;code&gt;$!&lt;/code&gt;, &lt;code&gt;$?&lt;/code&gt;, and &lt;code&gt;$@&lt;/code&gt; to what they were when the context was created. There is no localization or anything done here, calling this method will actually set these vars.</source>
          <target state="translated">これで &lt;code&gt;$!&lt;/code&gt; が設定されます！、 &lt;code&gt;$?&lt;/code&gt; 、および &lt;code&gt;$@&lt;/code&gt; は、コンテキストが作成されたときの状態になります。ここではローカリゼーションなどは行われていません。このメソッドを呼び出すと、実際にこれらの変数が設定されます。</target>
        </trans-unit>
        <trans-unit id="53857214badcaa71270373a4350b085fd3be23d6" translate="yes" xml:space="preserve">
          <source>This will set the value, but it will also warn you that the method is deprecated.</source>
          <target state="translated">これは値を設定しますが、このメソッドが非推奨であることを警告します。</target>
        </trans-unit>
        <trans-unit id="9f2435be0f1ad6eda0969960399156643c76c7a4" translate="yes" xml:space="preserve">
          <source>This will silence warnings from this module, as shown above.</source>
          <target state="translated">これにより、上記のように、このモジュールからの警告が消されます。</target>
        </trans-unit>
        <trans-unit id="ca31d9fb831c9a9410b0952a2719e1cdb223f34f" translate="yes" xml:space="preserve">
          <source>This will simply return the boolean value of the loaded flag. If Test2 has finished loading this will be true, otherwise false. Loading is considered complete the first time a tool requests a context.</source>
          <target state="translated">これは単にロードされたフラグのブール値を返します。Test2がロードを完了した場合はtrue、そうでない場合はfalseとなります。ツールが初めてコンテキストをリクエストしたときにロードが完了したとみなされます。</target>
        </trans-unit>
        <trans-unit id="74d8c906bb8ef849bacade7aef9b4a5b44d353f1" translate="yes" xml:space="preserve">
          <source>This will still print 10, not 20. Remember that local() affects package variables, which are all &quot;global&quot; to the package.</source>
          <target state="translated">これでも20ではなく10と表示されます。local()はパッケージ変数に影響を与えることを覚えておいてください。</target>
        </trans-unit>
        <trans-unit id="2a6fcacb9fbe4a51fd646facf84bbf9e55589d63" translate="yes" xml:space="preserve">
          <source>This will terminate if the file is undeletable for some reason (protected, not there, and so on).</source>
          <target state="translated">これは、何らかの理由でファイルが削除できない場合(保護されている、そこにはない、など)に終了します。</target>
        </trans-unit>
        <trans-unit id="feff36db777feae7b7039051928fb49050eaab4e" translate="yes" xml:space="preserve">
          <source>This will terminate if the file is undeleteable for some reason (protected, not there, and so on).</source>
          <target state="translated">ファイルが何らかの理由(保護されている、そこにはない、など)で削除できない場合に終了します。</target>
        </trans-unit>
        <trans-unit id="7ffb822c298702a56540cec9f5d17292e8f99429" translate="yes" xml:space="preserve">
          <source>This will throw an exception reporting to the file and line number of the context. This will also release the context for you.</source>
          <target state="translated">これは、コンテキストのファイルと行番号を報告する例外をスローします。これはまた、あなたのためにコンテキストを解放します。</target>
        </trans-unit>
        <trans-unit id="d039d7ba20b83e75e45e1330e7ddf21cf6828e15" translate="yes" xml:space="preserve">
          <source>This will try to load a module &lt;code&gt;ExtUtils::Typemaps::Excommunicated&lt;/code&gt; and use it as an &lt;code&gt;ExtUtils::Typemaps&lt;/code&gt; subclass. If that fails, it'll try loading &lt;code&gt;Excommunicated&lt;/code&gt; as a module, if that fails, it'll try to read a file called</source>
          <target state="translated">これは、モジュール &lt;code&gt;ExtUtils::Typemaps::Excommunicated&lt;/code&gt; をロードし、それを &lt;code&gt;ExtUtils::Typemaps&lt;/code&gt; サブクラスとして使用しようとします。それが失敗した場合、それはモジュールとして &lt;code&gt;Excommunicated&lt;/code&gt; をロードしようとします、それが失敗した場合、それはというファイルを読み取ろうとします</target>
        </trans-unit>
        <trans-unit id="1bd914f7804d4417b7bb5813b67988d44deeaf55" translate="yes" xml:space="preserve">
          <source>This will try to read &lt;code&gt;&quot;unicore/pro_alias.pl&quot;&lt;/code&gt; from the &lt;code&gt;@INC&lt;/code&gt; path. This file should return a list in plain perl:</source>
          <target state="translated">これは、 &lt;code&gt;@INC&lt;/code&gt; パスから &lt;code&gt;&quot;unicore/pro_alias.pl&quot;&lt;/code&gt; を読み取ろうとします。このファイルは単純なperlでリストを返すはずです：</target>
        </trans-unit>
        <trans-unit id="77f2b91fc53461e4232392b6bf05a6cab13fc62c" translate="yes" xml:space="preserve">
          <source>This will turn off result long-term storage. Calling this method will make &lt;code&gt;details&lt;/code&gt; and &lt;code&gt;summary&lt;/code&gt; useless. You may want to use this if you are running enough tests to fill up all available memory.</source>
          <target state="translated">これにより、結果の長期保存がオフになります。このメソッドを呼び出すと、 &lt;code&gt;details&lt;/code&gt; と &lt;code&gt;summary&lt;/code&gt; 役に立たなくなります。使用可能なすべてのメモリをいっぱいにするのに十分なテストを実行している場合は、これを使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="14ef65510ce174baa0db67a974cf806364df6c54" translate="yes" xml:space="preserve">
          <source>This will unblock any thread that is blocked trying to &lt;code&gt;down&lt;/code&gt; the semaphore if the &lt;code&gt;up&lt;/code&gt; raises the semaphore's count above the amount that the &lt;code&gt;down&lt;/code&gt; is trying to decrement it by. For example, if three threads are blocked trying to &lt;code&gt;down&lt;/code&gt; a semaphore by one, and another thread &lt;code&gt;up&lt;/code&gt; s the semaphore by two, then two of the blocked threads (which two is indeterminate) will become unblocked.</source>
          <target state="translated">これは、 &lt;code&gt;up&lt;/code&gt; がセマフォのカウントを、 &lt;code&gt;down&lt;/code&gt; がそれをデクリメントしようとしている量を上回った場合に、セマフォを &lt;code&gt;down&lt;/code&gt; しようとしてブロックされているスレッドのブロックを解除します。3つのスレッドがしようとブロックされている場合、例えば、 &lt;code&gt;down&lt;/code&gt; つによってセマフォ、別のスレッド &lt;code&gt;up&lt;/code&gt; 2によるSセマフォ、（二つが不定である）ブロックされたスレッドの2つのブロック解除となるであろう。</target>
        </trans-unit>
        <trans-unit id="2291862c9d641fb23bcd9328e8bf9135209ce8c7" translate="yes" xml:space="preserve">
          <source>This will unblock any thread that is blocked trying to &lt;code&gt;down&lt;/code&gt; the semaphore if the &lt;code&gt;up&lt;/code&gt; raises the semaphore's count above the amount that the &lt;code&gt;down&lt;/code&gt; is trying to decrement it by. For example, if three threads are blocked trying to &lt;code&gt;down&lt;/code&gt; a semaphore by one, and another thread &lt;code&gt;up&lt;/code&gt;s the semaphore by two, then two of the blocked threads (which two is indeterminate) will become unblocked.</source>
          <target state="translated">これにより、 &lt;code&gt;up&lt;/code&gt; がセマフォのカウントを &lt;code&gt;down&lt;/code&gt; がデクリメントしようとしている量を超えた場合に、セマフォを &lt;code&gt;down&lt;/code&gt; しようとしてブロックされているスレッドのブロックが解除されます。3つのスレッドがしようとブロックされている場合、例えば、 &lt;code&gt;down&lt;/code&gt; つによってセマフォ、別のスレッド &lt;code&gt;up&lt;/code&gt; 2によるSセマフォ、（二つが不定である）ブロックされたスレッドの2つのブロック解除となるであろう。</target>
        </trans-unit>
        <trans-unit id="6f351c4b6aca96e53a16da8efca1e61fe6247c18" translate="yes" xml:space="preserve">
          <source>This will use miniperl to complete the rest of the build.</source>
          <target state="translated">これでミニパールを使って残りのビルドを完成させます。</target>
        </trans-unit>
        <trans-unit id="c16d64a3c76763b9210f27c1d7475ba78b790318" translate="yes" xml:space="preserve">
          <source>This will wait for the corresponding thread to complete its execution. When the thread finishes, &lt;code&gt;-&amp;gt;join()&lt;/code&gt; will return the return value(s) of the entry point function.</source>
          <target state="translated">これは、対応するスレッドがその実行を完了するのを待ちます。スレッドが終了すると、 &lt;code&gt;-&amp;gt;join()&lt;/code&gt; はエントリポイント関数の戻り値を返します。</target>
        </trans-unit>
        <trans-unit id="2af730ddaf4e289f57edfe5d0943ccf22cf812f6" translate="yes" xml:space="preserve">
          <source>This won't expand &lt;code&gt;&quot;\n&quot;&lt;/code&gt; or &lt;code&gt;&quot;\t&quot;&lt;/code&gt; or any other special escapes.</source>
          <target state="translated">これは、 &lt;code&gt;&quot;\n&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;\t&quot;&lt;/code&gt; またはその他の特別なエスケープを展開しません。</target>
        </trans-unit>
        <trans-unit id="f64d878770a911b3e3aee44ed6986ddc7e345565" translate="yes" xml:space="preserve">
          <source>This work is published from Taiwan.</source>
          <target state="translated">この作品は台湾から出版されています。</target>
        </trans-unit>
        <trans-unit id="d34159428b026fd2a257dac5cc4d16c93aa663f8" translate="yes" xml:space="preserve">
          <source>This workaround is unnecessary since Unicode 6.3.0.</source>
          <target state="translated">Unicode 6.3.0 以降、この回避策は不要です。</target>
        </trans-unit>
        <trans-unit id="8c1458dfe63303a12ab8e9dcbe389526ca2f043c" translate="yes" xml:space="preserve">
          <source>This works</source>
          <target state="translated">これは</target>
        </trans-unit>
        <trans-unit id="881dcb6cd52e1e6c1fe3d0de8f69b6f16afcd3ed" translate="yes" xml:space="preserve">
          <source>This works because field hashes respond to keys that are not references like a normal hash would and use the string offered as the hash key. Thus, if a method is called as a class method, the field hash is presented with the class name instead of an object and blithely uses it as a key. Since the keys of real objects are decimal numbers, there is no conflict and the slot in the field hash can be used like any other. The &lt;code&gt;id()&lt;/code&gt; function behaves correspondingly with respect to non-reference arguments.</source>
          <target state="translated">これは、フィールドハッシュが通常のハッシュのように参照ではないキーに応答し、ハッシュキーとして提供される文字列を使用するために機能します。したがって、メソッドがクラスメソッドとして呼び出された場合、フィールドハッシュはオブジェクトではなくクラス名で提示され、簡単にそれをキーとして使用します。実際のオブジェクトのキーは10進数であるため、競合は発生せず、フィールドハッシュのスロットは他のスロットと同じように使用できます。 &lt;code&gt;id()&lt;/code&gt; 関数は、非参照引数に対して相応に振る舞います。</target>
        </trans-unit>
        <trans-unit id="37aaa803ee7c99ec4174d78cf82dc91b9204b890" translate="yes" xml:space="preserve">
          <source>This works by doing overriding methods on the singleton, and directly accessing hash values on the singleton. A new version has been released that uses the Test2 API to accomplish the same result in a saner way.</source>
          <target state="translated">これは、シングルトン上でメソッドをオーバーライドし、シングルトン上でハッシュ値に直接アクセスすることで動作します。Test2 API を使用して、同じ結果をより健全な方法で実現する新バージョンがリリースされました。</target>
        </trans-unit>
        <trans-unit id="f0fd9a4f981e792862c2c1c34299d3c036119504" translate="yes" xml:space="preserve">
          <source>This works by invoking the &lt;code&gt;FREEZE&lt;/code&gt; method on the object, with the first argument being the object to serialise, and the second argument being the constant string &lt;code&gt;JSON&lt;/code&gt; to distinguish it from other serialisers.</source>
          <target state="translated">これは、オブジェクトに対して &lt;code&gt;FREEZE&lt;/code&gt; メソッドを呼び出すことで機能します。最初の引数はシリアル化するオブジェクトであり、2番目の引数は他のシリアライザーと区別するための定数文字列 &lt;code&gt;JSON&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="ee37bc8498bec33db688cccd48192a7818024c7e" translate="yes" xml:space="preserve">
          <source>This works even if the package variable has not been used before, as package variables spring into existence when first used.</source>
          <target state="translated">これは、パッケージ変数が最初に使用されたときにパッケージ変数が存在するので、 パッケージ変数が以前に使用されていなくても動作します。</target>
        </trans-unit>
        <trans-unit id="2dd7e5f2596a2fbf8c9fd904eb776f4f1a29ce3e" translate="yes" xml:space="preserve">
          <source>This works exactly like calling &lt;code&gt;$file-&amp;gt;save()&lt;/code&gt; . This can be very useful for writing dynamic code. For example, it allows you to pass a method name to be called as a parameter to another method.</source>
          <target state="translated">これは、 &lt;code&gt;$file-&amp;gt;save()&lt;/code&gt; 呼び出すのとまったく同じように機能します。これは、動的コードを作成するのに非常に役立ちます。たとえば、別のメソッドにパラメーターとして呼び出されるメソッド名を渡すことができます。</target>
        </trans-unit>
        <trans-unit id="c16f7da148af11cbf671d895e51f5a7793076850" translate="yes" xml:space="preserve">
          <source>This works exactly like calling &lt;code&gt;$file-&amp;gt;save()&lt;/code&gt;. This can be very useful for writing dynamic code. For example, it allows you to pass a method name to be called as a parameter to another method.</source>
          <target state="translated">これは、 &lt;code&gt;$file-&amp;gt;save()&lt;/code&gt; 呼び出すのとまったく同じように機能します。これは、動的コードの記述に非常に役立ちます。たとえば、パラメータとして呼び出されるメソッド名を別のメソッドに渡すことができます。</target>
        </trans-unit>
        <trans-unit id="5594cfec5e61454de66a12e73e2e1b179cf923ba" translate="yes" xml:space="preserve">
          <source>This works if the dereference produces a string</source>
          <target state="translated">これは、参照元が文字列を生成する場合に動作します。</target>
        </trans-unit>
        <trans-unit id="38266e487c0f4fb0b669611ed55fd5e57c3bf09c" translate="yes" xml:space="preserve">
          <source>This works just like &lt;code&gt;/bin/tar&lt;/code&gt;'s &lt;code&gt;-h&lt;/code&gt; option.</source>
          <target state="translated">これは &lt;code&gt;/bin/tar&lt;/code&gt; の &lt;code&gt;-h&lt;/code&gt; オプションと同じように機能します。</target>
        </trans-unit>
        <trans-unit id="f4db4f1dcef0abf193caecabc91b1d8ec192b619" translate="yes" xml:space="preserve">
          <source>This works just like &lt;code&gt;new_from_file&lt;/code&gt;, except that a handle can be provided as the first argument.</source>
          <target state="translated">これは、ハンドルを最初の引数として指定できることを除いて、 &lt;code&gt;new_from_file&lt;/code&gt; と同じように機能します。</target>
        </trans-unit>
        <trans-unit id="219577552fb5335aa48c2b04bb85269685e4f05b" translate="yes" xml:space="preserve">
          <source>This works just like &lt;code&gt;parse_file&lt;/code&gt; except that it reads the Pod content not from a file, but from a string that you have already in memory.</source>
          <target state="translated">これは &lt;code&gt;parse_file&lt;/code&gt; と同じように機能しますが、ファイルからではなく、メモリに既にある文字列からポッドコンテンツを読み取ります。</target>
        </trans-unit>
        <trans-unit id="97ee63f99fe6452186fce78a0713bcb1bd8591fa" translate="yes" xml:space="preserve">
          <source>This works just like patching anything else, with one extra consideration.</source>
          <target state="translated">これは他の何かにパッチを当てるのと同じように動作します。</target>
        </trans-unit>
        <trans-unit id="038f2b08f3729bf9e55b6c7536286beb304119b2" translate="yes" xml:space="preserve">
          <source>This works like &amp;lt;$fh&amp;gt; described in &lt;a href=&quot;perlop#I%2FO-Operators&quot;&gt;&quot;I/O Operators&quot; in perlop&lt;/a&gt; except that it's more readable and can be safely called in a list context but still returns just one line.</source>
          <target state="translated">これ&lt;a href=&quot;perlop#I%2FO-Operators&quot;&gt;は、perlopの「I / O演算子」で&lt;/a&gt;説明されている&amp;lt;$ fh&amp;gt;と同じように機能しますが、読みやすく、リストコンテキストで安全に呼び出すことができますが、1行しか返されません。</target>
        </trans-unit>
        <trans-unit id="e00aef65607bdbfd4bbca8fcf5fc5917d56249a8" translate="yes" xml:space="preserve">
          <source>This works like &amp;lt;$fh&amp;gt; described in &lt;a href=&quot;perlop#I%2fO-Operators&quot;&gt;I/O Operators in perlop&lt;/a&gt; except that it's more readable and can be safely called in a list context but still returns just one line.</source>
          <target state="translated">これは、読みやすく、リストコンテキストで安全に呼び出すことができるが1行だけを返すことを除いて&lt;a href=&quot;perlop#I%2fO-Operators&quot;&gt;、perlopのI / O演算子で&lt;/a&gt;説明されている&amp;lt;$ fh&amp;gt;と同様に機能します。</target>
        </trans-unit>
        <trans-unit id="dcebba3c0143d6834639907ecbbcce5227295c40" translate="yes" xml:space="preserve">
          <source>This works like &amp;lt;$fh&amp;gt; when called in a list context to read all the remaining lines in a file, except that it's more readable. It will also croak() if accidentally called in a scalar context.</source>
          <target state="translated">これは、リストコンテキストで呼び出されてファイル内の残りのすべての行を読み取るときに&amp;lt;$ fh&amp;gt;のように機能しますが、読みやすくなっています。また、スカラーコンテキストで誤って呼び出された場合もcroak（）を実行します。</target>
        </trans-unit>
        <trans-unit id="7450c62face5ca7b9e02c283184e4738197040fb" translate="yes" xml:space="preserve">
          <source>This works like &amp;lt;$io&amp;gt; described in &lt;a href=&quot;../perlop#I%2fO-Operators&quot;&gt;I/O Operators in perlop&lt;/a&gt; except that it's more readable and can be safely called in a list context but still returns just one line. If used as the conditional +within a &lt;code&gt;while&lt;/code&gt; or C-style &lt;code&gt;for&lt;/code&gt; loop, however, you will need to +emulate the functionality of &amp;lt;$io&amp;gt; with &lt;code&gt;&lt;a href=&quot;../functions/defined&quot;&gt;defined&lt;/a&gt;($_ = $io-&amp;gt;getline)&lt;/code&gt; .</source>
          <target state="translated">これは、より読みやすく、リストコンテキストで安全に呼び出すことができるが、1行だけを返すことを除いて&lt;a href=&quot;../perlop#I%2fO-Operators&quot;&gt;、perlopのI / O演算子で&lt;/a&gt;説明されている&amp;lt;$ io&amp;gt;と同様に機能します。+ &lt;code&gt;while&lt;/code&gt; 内の条件付きまたはCスタイルの &lt;code&gt;for&lt;/code&gt; ループとして使用する場合は、 &lt;code&gt;&lt;a href=&quot;../functions/defined&quot;&gt;defined&lt;/a&gt;($_ = $io-&amp;gt;getline)&lt;/code&gt; を使用して+ &amp;lt;$ io&amp;gt;の機能をエミュレートする必要があります。</target>
        </trans-unit>
        <trans-unit id="3495f3db5c4d1d0c89019c28aef54ca3210b08f0" translate="yes" xml:space="preserve">
          <source>This works like &amp;lt;$io&amp;gt; described in &lt;a href=&quot;perlop#I%2FO-Operators&quot;&gt;&quot;I/O Operators&quot; in perlop&lt;/a&gt; except that it's more readable and can be safely called in a list context but still returns just one line. If used as the conditional within a &lt;code&gt;while&lt;/code&gt; or C-style &lt;code&gt;for&lt;/code&gt; loop, however, you will need to emulate the functionality of &amp;lt;$io&amp;gt; with &lt;code&gt;defined($_ = $io-&amp;gt;getline)&lt;/code&gt;.</source>
          <target state="translated">これ&lt;a href=&quot;perlop#I%2FO-Operators&quot;&gt;は、perlopの「I / O演算子」で&lt;/a&gt;説明されている&amp;lt;$ io&amp;gt;と同じように機能しますが、読みやすく、リストコンテキストで安全に呼び出すことができますが、1行しか返されません。ただし、 &lt;code&gt;while&lt;/code&gt; またはCスタイルの &lt;code&gt;for&lt;/code&gt; ループ内で条件として使用する場合は、 &lt;code&gt;defined($_ = $io-&amp;gt;getline)&lt;/code&gt; を使用して&amp;lt;$ io&amp;gt;の機能をエミュレートする必要があります。</target>
        </trans-unit>
        <trans-unit id="c8787e54def79a3f32ab71769162cbf50a0d2256" translate="yes" xml:space="preserve">
          <source>This works like &amp;lt;$io&amp;gt; when called in a list context to read all the remaining lines in a file, except that it's more readable. It will also croak() if accidentally called in a scalar context.</source>
          <target state="translated">これは、リストコンテキストで呼び出されてファイル内の残りのすべての行を読み取るときの&amp;lt;$ io&amp;gt;のように機能しますが、より読みやすくなっています。また、スカラーコンテキストで誤って呼び出された場合もcroak（）を実行します。</target>
        </trans-unit>
        <trans-unit id="2bc655ffdbbb7b5de088685237be5925d7bbe434" translate="yes" xml:space="preserve">
          <source>This works like &lt;code&gt;implicate_supers&lt;/code&gt; except that the implicated forms are added to the end of the return list.</source>
          <target state="translated">これは、関係するフォームが戻りリストの最後に追加される &lt;code&gt;implicate_supers&lt;/code&gt; を除いて、implicate_supersと同様に機能します。</target>
        </trans-unit>
        <trans-unit id="86cdc5ca018e3bf7bd5f95614dd661c8b598198f" translate="yes" xml:space="preserve">
          <source>This works like get_title except that it returns the contents of the &quot;=head1 AUTHOR\n\nParagraph...\n&quot; section, assuming that that section isn't terribly long. To recognize a &quot;=head1 Author\n\nParagraph\n&quot; section, pass the &lt;code&gt;nocase&lt;/code&gt; option:</source>
          <target state="translated">これは、「= head1 AUTHOR \ n \ nParagraph ... \ n」セクションのコンテンツが返されることを除いて、get_titleと同じように機能します。&quot;= head1 Author \ n \ nParagraph \ n&quot;セクションを認識するには、 &lt;code&gt;nocase&lt;/code&gt; オプションを渡します：</target>
        </trans-unit>
        <trans-unit id="64a77cc5fc2dfee3e1cafa417d88e53b294176fe" translate="yes" xml:space="preserve">
          <source>This works like get_title except that it returns the contents of the &quot;=head1 DESCRIPTION\n\nParagraph...\n&quot; section, assuming that that section isn't terribly long. To recognize a &quot;=head1 Description\n\nParagraph\n&quot; section, pass the &lt;code&gt;nocase&lt;/code&gt; option:</source>
          <target state="translated">これは、「= head1 DESCRIPTION \ n \ nParagraph ... \ n」セクションの内容を返すことを除いて、get_titleと同じように機能します。&quot;= head1 Description \ n \ nParagraph \ n&quot;セクションを認識するには、 &lt;code&gt;nocase&lt;/code&gt; オプションを渡します：</target>
        </trans-unit>
        <trans-unit id="26df8521ce0593af395e7709eafe289696c2f1f5" translate="yes" xml:space="preserve">
          <source>This works like get_title except that it returns the contents of the &quot;=head1 VERSION\n\n[BIG BLOCK]\n&quot; block. Note that this does NOT return the module's &lt;code&gt;$VERSION&lt;/code&gt; !! To recognize a &quot;=head1 Version\n\n[BIG BLOCK]\n&quot; section, pass the &lt;code&gt;nocase&lt;/code&gt; option:</source>
          <target state="translated">これは、「= head1 VERSION \ n \ n [BIG BLOCK] \ n」ブロックの内容を返すことを除いて、get_titleと同様に機能します。これはモジュールの &lt;code&gt;$VERSION&lt;/code&gt; 返さないことに注意してください!! &quot;= head1 Version \ n \ n [BIG BLOCK] \ n&quot;セクションを &lt;code&gt;nocase&lt;/code&gt; は、nocaseオプションを渡します：</target>
        </trans-unit>
        <trans-unit id="8a823c0684b5208934f648973411ba95381fb432" translate="yes" xml:space="preserve">
          <source>This works like get_title except that it returns the contents of the &quot;=head1 VERSION\n\n[BIG BLOCK]\n&quot; block. Note that this does NOT return the module's &lt;code&gt;$VERSION&lt;/code&gt;!! To recognize a &quot;=head1 Version\n\n[BIG BLOCK]\n&quot; section, pass the &lt;code&gt;nocase&lt;/code&gt; option:</source>
          <target state="translated">これは、「= head1 VERSION \ n \ n [BIG BLOCK] \ n」ブロックの内容を返すことを除いて、get_titleと同じように機能します。これはモジュールの &lt;code&gt;$VERSION&lt;/code&gt; 返さないことに注意してください!! 「= head1バージョン\ n \ n [ビッグブロック] \ n」セクションを &lt;code&gt;nocase&lt;/code&gt; は、nocaseオプションを渡します。</target>
        </trans-unit>
        <trans-unit id="e5587967553798e28442ad51621f624abf3a3ff5" translate="yes" xml:space="preserve">
          <source>This works like the &lt;code&gt;decode&lt;/code&gt; method, but instead of raising an exception when there is trailing garbage after the first JSON object, it will silently stop parsing there and return the number of characters consumed so far.</source>
          <target state="translated">これは &lt;code&gt;decode&lt;/code&gt; メソッドのように機能しますが、最初のJSONオブジェクトの後に末尾のガベージがある場合に例外を発生させる代わりに、そこでの解析をサイレントに停止し、これまでに消費された文字数を返します。</target>
        </trans-unit>
        <trans-unit id="0009c0f22b1f9b3091524f0133e652a04ae0337e" translate="yes" xml:space="preserve">
          <source>This works like the &lt;code&gt;strict_type&lt;/code&gt; option you can pass to &lt;code&gt;check&lt;/code&gt; , which will turn on &lt;code&gt;strict_type&lt;/code&gt; globally for all calls to &lt;code&gt;check&lt;/code&gt; .</source>
          <target state="translated">以下のようなこの作品 &lt;code&gt;strict_type&lt;/code&gt; のオプションは、あなたがして渡すことができます &lt;code&gt;check&lt;/code&gt; をオンになる、 &lt;code&gt;strict_type&lt;/code&gt; へのすべてのコールに対してグローバルに &lt;code&gt;check&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="58a60db99fd5287a02afd89bdfd44fadadefdf30" translate="yes" xml:space="preserve">
          <source>This works like the &lt;code&gt;strict_type&lt;/code&gt; option you can pass to &lt;code&gt;check&lt;/code&gt;, which will turn on &lt;code&gt;strict_type&lt;/code&gt; globally for all calls to &lt;code&gt;check&lt;/code&gt;.</source>
          <target state="translated">以下のようなこの作品 &lt;code&gt;strict_type&lt;/code&gt; のオプションは、あなたがして渡すことができます &lt;code&gt;check&lt;/code&gt; をオンになる、 &lt;code&gt;strict_type&lt;/code&gt; へのすべてのコールに対してグローバルに &lt;code&gt;check&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="362f494acfae36c73643784bd959c4c06fb6c5c4" translate="yes" xml:space="preserve">
          <source>This works most like other language's behavior when you specify a prefix. We recommend this method.</source>
          <target state="translated">これは、プレフィックスを指定したときの他の言語の動作とほとんど同じように動作します。この方法をお勧めします。</target>
        </trans-unit>
        <trans-unit id="915aba858aed251bdf66e2831b7666e6978faed3" translate="yes" xml:space="preserve">
          <source>This works only on 5.10+</source>
          <target state="translated">これは5.10+でのみ動作します。</target>
        </trans-unit>
        <trans-unit id="55b95f28c493942c265a9070f59ae310c120e01c" translate="yes" xml:space="preserve">
          <source>This works under Unix and Windows, and the current version doesn't look half as bad under Windows as it used to. Some of the gui elements still don't 'feel' quite right, though. The interface is very natural and 'perlish', making it easy to use in small scripts that just need a simple gui. It hasn't been updated in a while.</source>
          <target state="translated">これはUnixとWindowsで動作し、現在のバージョンではWindowsでは以前のように半分も悪く見えません。しかし、いくつかの gui 要素の一部はまだ正しく感じられません。インターフェイスは非常に自然で「Perlish」なので、シンプルなGUIを必要とする小さなスクリプトで簡単に使えます。しばらく更新されていません。</target>
        </trans-unit>
        <trans-unit id="455be4bb715491d8c40b42c1f8dcc680c608eb5f" translate="yes" xml:space="preserve">
          <source>This works well, and means that XS authors can gleefully write:</source>
          <target state="translated">これは、XSの作者が喜んで書くことができることを意味します。</target>
        </trans-unit>
        <trans-unit id="b707b9d283df75f490a344769164044f8e4c5af9" translate="yes" xml:space="preserve">
          <source>This works with leading special strings, dynamically determined:</source>
          <target state="translated">これは、動的に決定された先頭の特殊な文字列で動作します。</target>
        </trans-unit>
        <trans-unit id="ff04426d22726a3d4a81073dac982b940cab46f5" translate="yes" xml:space="preserve">
          <source>This would install the complete distribution file (say BAR/Foo-1.23.tar.gz) with all accompanying material. But if you would like to install version 1.23_90, you need to know where the distribution file resides on CPAN relative to the authors/id/ directory. If the author is BAR, this might be BAR/Foo-1.23_90.tar.gz; so you would have to say</source>
          <target state="translated">これにより、完全なディストリビューションファイル (BAR/Foo-1.23.tar.gz)が、すべての付属資料とともにインストールされます。しかし、バージョン1.23_90をインストールしたい場合、配布ファイルがCPAN上のどこにあるのか、author/id/ディレクトリとの相対的な関係を知る必要があります。作者が BAR の場合、これは BAR/Foo-1.23_90.tar.gz であるかもしれません。</target>
        </trans-unit>
        <trans-unit id="56ee25d704c11c02d7362a5e6635fcc0e634817b" translate="yes" xml:space="preserve">
          <source>This would make &lt;code&gt;Carp&lt;/code&gt; report the error as coming from a caller not in &lt;code&gt;My::Carping::Package&lt;/code&gt; , nor from &lt;code&gt;My::Friendly::Caller&lt;/code&gt; .</source>
          <target state="translated">これにより、 &lt;code&gt;Carp&lt;/code&gt; は &lt;code&gt;My::Carping::Package&lt;/code&gt; 内や &lt;code&gt;My::Friendly::Caller&lt;/code&gt; からではない呼び出し元からのエラーであることを報告します。</target>
        </trans-unit>
        <trans-unit id="019ec406a64daebd498d30d29f05ac3a5a5def69" translate="yes" xml:space="preserve">
          <source>This would make &lt;code&gt;Carp&lt;/code&gt; report the error as coming from a caller not in &lt;code&gt;My::Carping::Package&lt;/code&gt;, nor from &lt;code&gt;My::Friendly::Caller&lt;/code&gt;.</source>
          <target state="translated">これにより、 &lt;code&gt;Carp&lt;/code&gt; は、 &lt;code&gt;My::Carping::Package&lt;/code&gt; にない &lt;code&gt;My::Friendly::Caller&lt;/code&gt; から、またはMy :: Friendly :: Callerからのエラーとしてエラーを報告します。</target>
        </trans-unit>
        <trans-unit id="891cab2fd452efda8a6a8bb2376fc567d9984ca2" translate="yes" xml:space="preserve">
          <source>This would match a line of the form:</source>
          <target state="translated">これは、フォームの行と一致するでしょう。</target>
        </trans-unit>
        <trans-unit id="bd1a277e3dce80fb2a8014b20af5fd4775d02c21" translate="yes" xml:space="preserve">
          <source>This would produce.</source>
          <target state="translated">これは生産するだろう。</target>
        </trans-unit>
        <trans-unit id="d3b8e94b68c600a8d4a422c5367048147e22fdaf" translate="yes" xml:space="preserve">
          <source>This would signal to the parser that paragraphs in this begin...end region are subject to normal handling as ordinary/verbatim paragraphs (while still tagged as meant only for processors that understand the &quot;biblio&quot; identifier). The same effect could be had with:</source>
          <target state="translated">これは、この begin...end 領域の段落が通常の/verbatim 段落として扱われることをパーサに知らせることになります (ただし、「biblio」識別子を理解しているプロセッサにのみ意味があるとタグ付けされています)。これと同じ効果が得られます。</target>
        </trans-unit>
        <trans-unit id="15fd697862c8639869e1e78b476a5aeed8efb2ef" translate="yes" xml:space="preserve">
          <source>This would start</source>
          <target state="translated">これが始まる</target>
        </trans-unit>
        <trans-unit id="00bebdd1c33f014f6c6f83be97cd8f7afa9c4c0a" translate="yes" xml:space="preserve">
          <source>This wrapping happens always when compiling Perl core source (PERL_CORE is defined) or the Perl core extensions (PERL_EXT is defined). When compiling XS code outside of Perl core the wrapping does not take place. Note, however, that intermixing the _r-forms (as Perl compiled for multithreaded operation will do) and the _r-less forms is neither well-defined (inconsistent results, data corruption, or even crashes become more likely), nor is it very portable.</source>
          <target state="translated">このラッピングは、Perlコアのソース(PERL_COREが定義されています)やPerlコアの拡張機能(PERL_EXTが定義されています)をコンパイルする際に常に発生します。Perlコア以外のXSコードをコンパイルした場合は、ラッピングは行われません。しかし、(マルチスレッド処理用にコンパイルされたPerlのように)_rフォームと_rレスフォームを混在させることは、(一貫性のない結果、データの破損、クラッシュの可能性が高くなります)定義されていませんし、移植性も高くないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="d0e68ab8f02ae3faa0396a3a11b0f81dcf6b0685" translate="yes" xml:space="preserve">
          <source>This wrapping happens always when compiling Perl core source (PERL_CORE is defined) or the Perl core extensions (PERL_EXT is defined). When compiling XS code outside of the Perl core, the wrapping does not take place before Perl 5.28. Starting in that release you can</source>
          <target state="translated">このラッピングは、Perlコアのソース(PERL_COREが定義されている)やPerlコアの拡張機能(PERL_EXTが定義されている)をコンパイルする際に常に発生します。Perlコア以外のXSコードをコンパイルする場合、Perl 5.28以前ではラッピングは行われません。そのリリースでは、以下のことが可能です。</target>
        </trans-unit>
        <trans-unit id="14e5fcab8c4178b44f80118d0d0e8c790e5ed2e6" translate="yes" xml:space="preserve">
          <source>This zero-width assertion executes any embedded Perl code. It always succeeds, and its return value is set as &lt;code&gt;$^R&lt;/code&gt; .</source>
          <target state="translated">このゼロ幅アサーションは、埋め込まれたPerlコードを実行します。常に成功し、その戻り値は &lt;code&gt;$^R&lt;/code&gt; として設定されます。</target>
        </trans-unit>
        <trans-unit id="037ab5d7d658f9f73dced777295d92918612ab07" translate="yes" xml:space="preserve">
          <source>This zero-width assertion executes any embedded Perl code. It always succeeds, and its return value is set as &lt;code&gt;$^R&lt;/code&gt;.</source>
          <target state="translated">このゼロ幅アサーションは、埋め込まれたPerlコードを実行します。常に成功し、戻り値は &lt;code&gt;$^R&lt;/code&gt; として設定されます。</target>
        </trans-unit>
        <trans-unit id="3986864eb1cd79d2d3acbfd270bc8eeed78bdddc" translate="yes" xml:space="preserve">
          <source>This zero-width pattern can be used to mark the point reached in a string when a certain part of the pattern has been successfully matched. This mark may be given a name. A later &lt;code&gt;(*SKIP)&lt;/code&gt; pattern will then skip forward to that point if backtracked into on failure. Any number of &lt;code&gt;(*MARK)&lt;/code&gt; patterns are allowed, and the</source>
          <target state="translated">このゼロ幅パターンは、パターンの特定の部分が正常に一致したときに文字列内で到達したポイントをマークするために使用できます。このマークには名前を付けることができます。後の &lt;code&gt;(*SKIP)&lt;/code&gt; パターンは、失敗時にバックトラックされた場合、そのポイントまでスキップします。任意の数の &lt;code&gt;(*MARK)&lt;/code&gt; パターンが許可され、</target>
        </trans-unit>
        <trans-unit id="018c0e68c94f9f979bcddcd227e8ad92dfe5e9c0" translate="yes" xml:space="preserve">
          <source>This zero-width pattern can be used to mark the point reached in a string when a certain part of the pattern has been successfully matched. This mark may be given a name. A later &lt;code&gt;(*SKIP)&lt;/code&gt; pattern will then skip forward to that point if backtracked into on failure. Any number of &lt;code&gt;(*MARK)&lt;/code&gt; patterns are allowed, and the NAME portion may be duplicated.</source>
          <target state="translated">このゼロ幅パターンを使用して、パターンの特定の部分が正常に一致したときに、文字列で到達したポイントをマークできます。このマークには名前を付けることができます。その後、 &lt;code&gt;(*SKIP)&lt;/code&gt; パターンは、障害時にバックトラックされると、そのポイントまで前方にスキップします。 &lt;code&gt;(*MARK)&lt;/code&gt; パターンはいくつでも使用でき、NAME部分は重複する可能性があります。</target>
        </trans-unit>
        <trans-unit id="3e845add8e49d7a0ebfe26e6329051032e10440f" translate="yes" xml:space="preserve">
          <source>This zero-width pattern is similar to &lt;code&gt;(*PRUNE)&lt;/code&gt; , except that on failure it also signifies that whatever text that was matched leading up to the &lt;code&gt;(*SKIP)&lt;/code&gt; pattern being executed cannot be part of</source>
          <target state="translated">このゼロ幅パターンは &lt;code&gt;(*PRUNE)&lt;/code&gt; に似ていますが、失敗した場合、実行されている &lt;code&gt;(*SKIP)&lt;/code&gt; パターンに至るまでに一致したテキストは、</target>
        </trans-unit>
        <trans-unit id="51e4c7fda54787bcde2f76a35e31d235c61d7234" translate="yes" xml:space="preserve">
          <source>This zero-width pattern is similar to &lt;code&gt;(*PRUNE)&lt;/code&gt;, except that on failure it also signifies that whatever text that was matched leading up to the &lt;code&gt;(*SKIP)&lt;/code&gt; pattern being executed cannot be part of</source>
          <target state="translated">このゼロ幅パターンは &lt;code&gt;(*PRUNE)&lt;/code&gt; に似ていますが、失敗すると、実行中の &lt;code&gt;(*SKIP)&lt;/code&gt; パターンに至るまでに一致したテキストを含めることができないことも意味します。</target>
        </trans-unit>
        <trans-unit id="f14d48589d384cf0a42c2d25bee216599d01f868" translate="yes" xml:space="preserve">
          <source>This zero-width pattern prunes the backtracking tree at the current point when backtracked into on failure. Consider the pattern &lt;code&gt;/&lt;i&gt;A&lt;/i&gt; (*PRUNE) &lt;i&gt;B&lt;/i&gt;/&lt;/code&gt;, where</source>
          <target state="translated">このゼロ幅パターンは、障害時にバックトラックされたときに、現在のポイントでバックトラックツリーを削除します。パターン &lt;code&gt;/&lt;i&gt;A&lt;/i&gt; (*PRUNE) &lt;i&gt;B&lt;/i&gt;/&lt;/code&gt; 考えてみましょう。ここで、</target>
        </trans-unit>
        <trans-unit id="8c4b9623686b3758cfd382a28c93e0707ac9367e" translate="yes" xml:space="preserve">
          <source>This zero-width pattern prunes the backtracking tree at the current point when backtracked into on failure. Consider the pattern &lt;code&gt;A (*PRUNE) B&lt;/code&gt;, where A and B are complex patterns. Until the &lt;code&gt;(*PRUNE)&lt;/code&gt; verb is reached, A may backtrack as necessary to match. Once it is reached, matching continues in B, which may also backtrack as necessary; however, should B not match, then no further backtracking will take place, and the pattern will fail outright at the current starting position.</source>
          <target state="translated">このゼロ幅パターンは、障害時にバックトラックされると、現在のポイントでバックトラッキングツリーをプルーニングします。パターン &lt;code&gt;A (*PRUNE) B&lt;/code&gt; 考えます。ここで、AとBは複雑なパターンです。まで &lt;code&gt;(*PRUNE)&lt;/code&gt; 動詞に到達し、Aが一致するように必要に応じてバックトラックすることができます。到達すると、マッチングはBで続行され、必要に応じてバックトラックする場合もあります。ただし、Bが一致しない場合、それ以降のバックトラックは行われず、パターンは現在の開始位置で完全に失敗します。</target>
        </trans-unit>
        <trans-unit id="6ab6320cf6b57ad1eb41183660b9a012d0721d64" translate="yes" xml:space="preserve">
          <source>Thomas Dorner</source>
          <target state="translated">トーマス・ドーナー</target>
        </trans-unit>
        <trans-unit id="81e4e8d1869fa873203b699ef2f7c28f0d0f204c" translate="yes" xml:space="preserve">
          <source>Those can be rather inefficient though. If they aren't fast enough for you, you might just read chunks of data and count the number of newlines:</source>
          <target state="translated">しかし、これはかなり非効率的です。もしそれらが十分に速くない場合は、データの塊を読んで改行の数を数えればいいだけかもしれません。</target>
        </trans-unit>
        <trans-unit id="1fd34bde8d27f4db80e364187fff01e57e24dcf5" translate="yes" xml:space="preserve">
          <source>Those debugging perl with the DDD frontend over gdb may find the following useful:</source>
          <target state="translated">gdb上のDDDフロントエンドを使ってPerlをデバッグしている人は、以下が役に立つかもしれません。</target>
        </trans-unit>
        <trans-unit id="d8de155d193899f771792e739cfd779f42445bfd" translate="yes" xml:space="preserve">
          <source>Those discouraged forms are accepted as input to &lt;code&gt;prop_aliases&lt;/code&gt; , but are not returned in the lists. &lt;code&gt;prop_aliases('isL&amp;amp;')&lt;/code&gt; and &lt;code&gt;prop_aliases('isL_')&lt;/code&gt; , which are old synonyms for &lt;code&gt;&quot;Is_LC&quot;&lt;/code&gt; and should not be used in new code, are examples of this. These both return &lt;code&gt;(Is_LC, Cased_Letter)&lt;/code&gt; . Thus this function allows you to take a discouraged form, and find its acceptable alternatives. The same goes with single-form Block property equivalences. Only the forms that begin with &lt;code&gt;&quot;In_&quot;&lt;/code&gt; are not discouraged; if you pass &lt;code&gt;prop_aliases&lt;/code&gt; a discouraged form, you will get back the equivalent ones that begin with &lt;code&gt;&quot;In_&quot;&lt;/code&gt; . It will otherwise look like a new-style block name (see. &lt;a href=&quot;#Old-style-versus-new-style-block-names&quot;&gt;Old-style versus new-style block names&lt;/a&gt;).</source>
          <target state="translated">これらの落胆したフォームは &lt;code&gt;prop_aliases&lt;/code&gt; への入力として受け入れられますが、リストには返されません。 &lt;code&gt;prop_aliases('isL&amp;amp;')&lt;/code&gt; と &lt;code&gt;prop_aliases('isL_')&lt;/code&gt; は、 &lt;code&gt;&quot;Is_LC&quot;&lt;/code&gt; の古い同義語であり、新しいコードでは使用しないでください。これがその例です。これらは両方とも &lt;code&gt;(Is_LC, Cased_Letter)&lt;/code&gt; 返します。したがって、この関数を使用すると、思いがけない形式を取り、その受け入れ可能な代替案を見つけることができます。同じことは、単一形式のブロックプロパティの同等性にも当てはまります。 &lt;code&gt;&quot;In_&quot;&lt;/code&gt; で始まるフォームのみが推奨されます。 &lt;code&gt;prop_aliases&lt;/code&gt; に落胆したフォームを渡すと、 &lt;code&gt;&quot;In_&quot;&lt;/code&gt; で始まる同等のフォームが返されます。。それ以外は、新しいスタイルのブロック名のように見えます（&lt;a href=&quot;#Old-style-versus-new-style-block-names&quot;&gt;古いスタイルと新しいスタイルのブロック名を&lt;/a&gt;参照してください）。</target>
        </trans-unit>
        <trans-unit id="7e7315b6f7527f6cad5c0696c36731171292e6d3" translate="yes" xml:space="preserve">
          <source>Those discouraged forms are accepted as input to &lt;code&gt;prop_aliases&lt;/code&gt;, but are not returned in the lists. &lt;code&gt;prop_aliases('isL&amp;amp;')&lt;/code&gt; and &lt;code&gt;prop_aliases('isL_')&lt;/code&gt;, which are old synonyms for &lt;code&gt;&quot;Is_LC&quot;&lt;/code&gt; and should not be used in new code, are examples of this. These both return &lt;code&gt;(Is_LC, Cased_Letter)&lt;/code&gt;. Thus this function allows you to take a discouraged form, and find its acceptable alternatives. The same goes with single-form Block property equivalences. Only the forms that begin with &lt;code&gt;&quot;In_&quot;&lt;/code&gt; are not discouraged; if you pass &lt;code&gt;prop_aliases&lt;/code&gt; a discouraged form, you will get back the equivalent ones that begin with &lt;code&gt;&quot;In_&quot;&lt;/code&gt;. It will otherwise look like a new-style block name (see. &lt;a href=&quot;#Old-style-versus-new-style-block-names&quot;&gt;&quot;Old-style versus new-style block names&quot;&lt;/a&gt;).</source>
          <target state="translated">これらの推奨されないフォームは、 &lt;code&gt;prop_aliases&lt;/code&gt; への入力として受け入れられますが、リストには返されません。 &lt;code&gt;&quot;Is_LC&quot;&lt;/code&gt; 古い同義語であり、新しいコードでは使用しないでください &lt;code&gt;prop_aliases('isL&amp;amp;')&lt;/code&gt; および &lt;code&gt;prop_aliases('isL_')&lt;/code&gt; は、この例です。これらは両方とも &lt;code&gt;(Is_LC, Cased_Letter)&lt;/code&gt; 返します。したがって、この関数を使用すると、落胆した形式を取り、許容できる代替案を見つけることができます。同じことが、単一形式のブロックプロパティの同等性にも当てはまります。 &lt;code&gt;&quot;In_&quot;&lt;/code&gt; で始まるフォームのみが推奨されません。 &lt;code&gt;prop_aliases&lt;/code&gt; を推奨されないフォームに渡すと、 &lt;code&gt;&quot;In_&quot;&lt;/code&gt; で始まる同等のフォームが返されます。。それ以外の場合は、新しいスタイルのブロック名のように見えます（&lt;a href=&quot;#Old-style-versus-new-style-block-names&quot;&gt;「古いスタイルと新しいスタイルのブロック名」を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="3da17d9bf3cc6c170baa5678aa93a096d0f37e23" translate="yes" xml:space="preserve">
          <source>Those examples also illustrate that you should not try to use &lt;a href=&quot;#pack-TEMPLATE%2CLIST&quot;&gt;&lt;code&gt;pack&lt;/code&gt;&lt;/a&gt;/&lt;a href=&quot;#unpack-TEMPLATE%2CEXPR&quot;&gt;&lt;code&gt;unpack&lt;/code&gt;&lt;/a&gt; as a substitute for the &lt;a href=&quot;encode&quot;&gt;Encode&lt;/a&gt; module.</source>
          <target state="translated">これらの例は、&lt;a href=&quot;encode&quot;&gt;Encode&lt;/a&gt;モジュールの代わりに&lt;a href=&quot;#pack-TEMPLATE%2CLIST&quot;&gt; &lt;code&gt;pack&lt;/code&gt; &lt;/a&gt; / &lt;a href=&quot;#unpack-TEMPLATE%2CEXPR&quot;&gt; &lt;code&gt;unpack&lt;/code&gt; &lt;/a&gt;を使用しないことも示しています。</target>
        </trans-unit>
        <trans-unit id="6da32d7b6dfc1f76299003b85142b3301014ca18" translate="yes" xml:space="preserve">
          <source>Those examples also illustrate that you should not try to use &lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt;/&lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt; as a substitute for the &lt;a href=&quot;encode&quot;&gt;Encode&lt;/a&gt; module.</source>
          <target state="translated">これらの例は、&lt;a href=&quot;encode&quot;&gt;Encode&lt;/a&gt;モジュールの代わりに &lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt; / &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt; を使用しないでください。</target>
        </trans-unit>
        <trans-unit id="a75c1c6107c9c80616709d9370ed7d64d72897ff" translate="yes" xml:space="preserve">
          <source>Those examples also illustrate that you should not try to use &lt;code&gt;&lt;a href=&quot;pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt;/&lt;code&gt;&lt;a href=&quot;unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt; as a substitute for the &lt;a href=&quot;../encode&quot;&gt;Encode&lt;/a&gt; module.</source>
          <target state="translated">これらの例は、&lt;a href=&quot;../encode&quot;&gt;Encode&lt;/a&gt;モジュールの代わりに &lt;code&gt;&lt;a href=&quot;pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt; / &lt;code&gt;&lt;a href=&quot;unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt; を使用しないでください。</target>
        </trans-unit>
        <trans-unit id="1b7bc94e0db621087dac583856d0104fb7d8c89b" translate="yes" xml:space="preserve">
          <source>Those letters could all be Latin (as in the example just above), or they could be all Cyrillic (except for the dot), or they could be a mixture of the two. In the case of an internet address the &lt;code&gt;.com&lt;/code&gt; would be in Latin, And any Cyrillic ones would cause it to be a mixture, not a script run. Someone clicking on such a link would not be directed to the real Paypal website, but an attacker would craft a look-alike one to attempt to gather sensitive information from the person.</source>
          <target state="translated">これらの文字はすべてラテン語（上記の例のように）、またはすべてキリル文字（ドットを除く）、または2つの混合である可能性があります。インターネットアドレスの場合、 &lt;code&gt;.com&lt;/code&gt; はラテン語になり、キリル文字の場合は、スクリプトの実行ではなく、混合物になります。そのようなリンクをクリックした人は、実際のP​​aypal Webサイトに誘導されませんが、攻撃者は、その人から機密情報を収集しようとする類似のWebサイトを作成します。</target>
        </trans-unit>
        <trans-unit id="09bb82492fe1deca424636c6f8f129828507429d" translate="yes" xml:space="preserve">
          <source>Those methods which override default MM_Unix methods are marked &quot;(override)&quot;, while methods unique to MM_VMS are marked &quot;(specific)&quot;. For overridden methods, documentation is limited to an explanation of why this method overrides the MM_Unix method; see the &lt;a href=&quot;ExtUtils::MM_Unix&quot;&gt;ExtUtils::MM_Unix&lt;/a&gt; documentation for more details.</source>
          <target state="translated">デフォルトのMM_Unixメソッドをオーバーライドするメソッドは「（override）」とマークされ、MM_VMSに固有のメソッドは「（specific）」とマークされます。オーバーライドされたメソッドの場合、ドキュメントは、このメソッドがMM_Unixメソッドをオーバーライドする理由の説明に限定されています。詳細については、&lt;a href=&quot;ExtUtils::MM_Unix&quot;&gt;ExtUtils :: MM_Unixの&lt;/a&gt;ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="956b46dcd2869bcc1ce846f30fe79b6d32253a71" translate="yes" xml:space="preserve">
          <source>Those methods which override default MM_Unix methods are marked &quot;(override)&quot;, while methods unique to MM_VMS are marked &quot;(specific)&quot;. For overridden methods, documentation is limited to an explanation of why this method overrides the MM_Unix method; see the ExtUtils::MM_Unix documentation for more details.</source>
          <target state="translated">デフォルトの MM_Unix メソッドをオーバーライドするメソッドは &quot;(override)&quot; と表示され、MM_VMS に固有のメソッドは &quot;(specific)&quot; と表示されます。オーバーライドされたメソッドについては、なぜそのメソッドが MM_Unix メソッドをオーバーライドするのかについての説明に限定されています。</target>
        </trans-unit>
        <trans-unit id="89694826230f33ec41f3391ad1e9d0ae75075e89" translate="yes" xml:space="preserve">
          <source>Those not usable within a bracketed character class (like &lt;code&gt;[\da-z]&lt;/code&gt; ) are marked as &lt;code&gt;Not in [].&lt;/code&gt;</source>
          <target state="translated">括弧で囲まれた文字クラス（ &lt;code&gt;[\da-z]&lt;/code&gt; ）内で使用できないものは &lt;code&gt;Not in [].&lt;/code&gt; としてマークされます。</target>
        </trans-unit>
        <trans-unit id="ed08d333f4d7b0ebed9f1e47a113b306b6da0b17" translate="yes" xml:space="preserve">
          <source>Those not usable within a bracketed character class (like &lt;code&gt;[\da-z]&lt;/code&gt;) are marked as &lt;code&gt;Not in [].&lt;/code&gt;</source>
          <target state="translated">括弧で囲まれた文字クラス内で使用できないもの（ &lt;code&gt;[\da-z]&lt;/code&gt; ）は &lt;code&gt;Not in [].&lt;/code&gt; としてマークされます。</target>
        </trans-unit>
        <trans-unit id="5c59400870fdcf39cd37f7130db3cbffeeca3151" translate="yes" xml:space="preserve">
          <source>Those options are explained in &lt;a href=&quot;../man&quot;&gt;Pod::Man&lt;/a&gt;.</source>
          <target state="translated">これらのオプションについては、&lt;a href=&quot;../man&quot;&gt;Pod :: Manで&lt;/a&gt;説明しています。</target>
        </trans-unit>
        <trans-unit id="5a7014dea585b921e6969f68f00359599742e4a3" translate="yes" xml:space="preserve">
          <source>Those options are explained in &lt;a href=&quot;Pod::Man&quot;&gt;Pod::Man&lt;/a&gt;.</source>
          <target state="translated">これらのオプションについては、&lt;a href=&quot;Pod::Man&quot;&gt;Pod :: Manで&lt;/a&gt;説明されています。</target>
        </trans-unit>
        <trans-unit id="6e2b5b8ade9f04ee810e0602b2c63da979876bd5" translate="yes" xml:space="preserve">
          <source>Though ISO-8859 does have ISO-8859-5, the KOI8 series is far more popular in the Net. &lt;a href=&quot;encode&quot;&gt;Encode&lt;/a&gt; comes with the following KOI charsets. For gory details, see &lt;a href=&quot;http://czyborra.com/charsets/cyrillic.html&quot;&gt;http://czyborra.com/charsets/cyrillic.html&lt;/a&gt;</source>
          <target state="translated">ISO-8859にはISO-8859-5がありますが、KOI8シリーズはネットではるかに人気があります。&lt;a href=&quot;encode&quot;&gt;Encodeに&lt;/a&gt;は、次のKOI文字セットが付属しています。残酷な詳細については、&lt;a href=&quot;http://czyborra.com/charsets/cyrillic.html&quot;&gt;http：&lt;/a&gt; //czyborra.com/charsets/cyrillic.htmlを参照してください。</target>
        </trans-unit>
        <trans-unit id="c2d164817730248c36fd41c3d7e8fb0afe7ee263" translate="yes" xml:space="preserve">
          <source>Though Jungshik Shin has reported that Mozilla supports this encoding, it was too late before 5.8.0 for us to add it. In the future, it may be available via a separate module. See &lt;a href=&quot;http://lxr.mozilla.org/seamonkey/source/intl/uconv/ucvlatin/vps.uf&quot;&gt;http://lxr.mozilla.org/seamonkey/source/intl/uconv/ucvlatin/vps.uf&lt;/a&gt; and &lt;a href=&quot;http://lxr.mozilla.org/seamonkey/source/intl/uconv/ucvlatin/vps.ut&quot;&gt;http://lxr.mozilla.org/seamonkey/source/intl/uconv/ucvlatin/vps.ut&lt;/a&gt; if you are interested in helping us.</source>
          <target state="translated">Jungshik Shinは、Mozillaがこのエンコーディングをサポートしていると報告していますが、5.8.0より前には遅すぎて追加できませんでした。将来的には、別のモジュールを介して利用できるようになる可能性があります。&lt;a href=&quot;http://lxr.mozilla.org/seamonkey/source/intl/uconv/ucvlatin/vps.uf&quot;&gt;http://lxr.mozilla.org/seamonkey/source/intl/uconv/ucvlatin/vps.uf&lt;/a&gt;および&lt;a href=&quot;http://lxr.mozilla.org/seamonkey/source/intl/uconv/ucvlatin/vps.ut&quot;&gt;http://lxr.mozilla.org/seamonkey/source/intl/uconv/ucvlatin/vps.utを&lt;/a&gt;参照してください。私たちを助けることに興味があります。</target>
        </trans-unit>
        <trans-unit id="66d24de1d761cc58def056c26e4fb86b5492f71e" translate="yes" xml:space="preserve">
          <source>Though a much better way is to use the &lt;a href=&quot;Test2::Plugin::UTF8&quot;&gt;Test2::Plugin::UTF8&lt;/a&gt; plugin, which is part of &lt;a href=&quot;Test2::Suite&quot;&gt;Test2::Suite&lt;/a&gt;.</source>
          <target state="translated">はるかに良い方法は、&lt;a href=&quot;Test2::Suite&quot;&gt;Test2 :: Suiteの&lt;/a&gt;一部である&lt;a href=&quot;Test2::Plugin::UTF8&quot;&gt;Test2 :: Plugin :: UTF8&lt;/a&gt;プラグインを使用することです。</target>
        </trans-unit>
        <trans-unit id="b8a06e11acd02f600ac3a6ff09284942503ee656" translate="yes" xml:space="preserve">
          <source>Though forcing an argument into a particular form does not change the stored number, Perl remembers the result of such conversions. In particular, though the first such conversion may be time-consuming, repeated operations will not need to redo the conversion.</source>
          <target state="translated">引数を特定の形式に強制的に変換しても、格納されている数は変わりませんが、Perlはそのような変換の結果を記憶しています。特に、最初の変換は時間がかかるかもしれませんが、繰り返しの操作では変換をやり直す必要はありません。</target>
        </trans-unit>
        <trans-unit id="f3be83a9aceb8b170431d7d56170a63bf06c2048" translate="yes" xml:space="preserve">
          <source>Though much can be written about the inconsistency and coverage problems of gcc warnings (like &lt;code&gt;-Wall&lt;/code&gt; not meaning &quot;all the warnings&quot;, or some common portability problems not being covered by &lt;code&gt;-Wall&lt;/code&gt; , or &lt;code&gt;-ansi&lt;/code&gt; and &lt;code&gt;-pedantic&lt;/code&gt; both being a poorly defined collection of warnings, and so forth), gcc is still a useful tool in keeping our coding nose clean.</source>
          <target state="translated">gcc警告の不一致とカバレッジの問題（ &lt;code&gt;-Wall&lt;/code&gt; が「すべての警告」を意味しない、または &lt;code&gt;-Wall&lt;/code&gt; でカバーされない一般的な移植性の問題、または &lt;code&gt;-ansi&lt;/code&gt; と &lt;code&gt;-pedantic&lt;/code&gt; の両方が不十分に定義されたコレクションであるなど）警告など）、gccはまだコーディングノーズをクリーンに保つのに役立つツールです。</target>
        </trans-unit>
        <trans-unit id="4faaa6fa5354d5373d44ec1d57892b26bbdbc5ff" translate="yes" xml:space="preserve">
          <source>Though much can be written about the inconsistency and coverage problems of gcc warnings (like &lt;code&gt;-Wall&lt;/code&gt; not meaning &quot;all the warnings&quot;, or some common portability problems not being covered by &lt;code&gt;-Wall&lt;/code&gt;, or &lt;code&gt;-ansi&lt;/code&gt; and &lt;code&gt;-pedantic&lt;/code&gt; both being a poorly defined collection of warnings, and so forth), gcc is still a useful tool in keeping our coding nose clean.</source>
          <target state="translated">gcc警告の不整合とカバレッジの問題について多くのことを書くことができますが（ &lt;code&gt;-Wall&lt;/code&gt; が「すべての警告」を意味しない、または &lt;code&gt;-Wall&lt;/code&gt; でカバーされていないいくつかの一般的な移植性の問題、または &lt;code&gt;-ansi&lt;/code&gt; と &lt;code&gt;-pedantic&lt;/code&gt; の両方が不十分に定義されたコレクションであるなど警告など）、gccは、コーディングの鼻をきれいに保つのに役立つツールです。</target>
        </trans-unit>
        <trans-unit id="419ade92c2c3a75f745587c25bed6b20ff3a2dd8" translate="yes" xml:space="preserve">
          <source>Though this module can be used without any &lt;code&gt;table&lt;/code&gt; file, to use this module easily, it is recommended to install a table file in the UCA format, by copying it under the directory &amp;lt;a place in @INC&amp;gt;/Unicode/Collate.</source>
          <target state="translated">このモジュールは &lt;code&gt;table&lt;/code&gt; ファイルなしで使用できますが、このモジュールを簡単に使用するには、テーブルファイルをUCA形式でインストールし、ディレクトリ&amp;lt;@INC&amp;gt; / Unicode / Collat​​eの下にコピーすることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="7863f7503e5377891a3b7452c7d6cc377d443fe7" translate="yes" xml:space="preserve">
          <source>Thread</source>
          <target state="translated">Thread</target>
        </trans-unit>
        <trans-unit id="998ceaaad06364c8b6eb7bb906fdf278086c1d9b" translate="yes" xml:space="preserve">
          <source>Thread # terminated abnormally: ...</source>
          <target state="translated">異常終了したスレッド#...</target>
        </trans-unit>
        <trans-unit id="0d8bdcbf638d7eb68b070735be885cf9e96d329d" translate="yes" xml:space="preserve">
          <source>Thread - Manipulate threads in Perl (for old code only)</source>
          <target state="translated">Thread-Perl でスレッドを操作する (古いコードのみ)</target>
        </trans-unit>
        <trans-unit id="c918ac60574a68bba66c3da27f233195a15f2b9b" translate="yes" xml:space="preserve">
          <source>Thread Basics</source>
          <target state="translated">スレッドの基本</target>
        </trans-unit>
        <trans-unit id="a78e21be0817d13d864f0b6be8854cdfa543bd85" translate="yes" xml:space="preserve">
          <source>Thread ID of this instance.</source>
          <target state="translated">このインスタンスのスレッド ID。</target>
        </trans-unit>
        <trans-unit id="ebe1f739c1cdedc327a9eae1c397ab14c9d64437" translate="yes" xml:space="preserve">
          <source>Thread IDs</source>
          <target state="translated">スレッドID</target>
        </trans-unit>
        <trans-unit id="898f39e0ee67463e37091c0ab76e5df497814e8b" translate="yes" xml:space="preserve">
          <source>Thread Pitfalls: Races</source>
          <target state="translated">スレッドの落とし穴。レース</target>
        </trans-unit>
        <trans-unit id="b66b6cbe04365929e922b75680e179e46127f3a3" translate="yes" xml:space="preserve">
          <source>Thread Safety</source>
          <target state="translated">スレッドの安全性</target>
        </trans-unit>
        <trans-unit id="d3dbf16992ead48a52867791a62d8b164c67fd1f" translate="yes" xml:space="preserve">
          <source>Thread creation failed: pthread_attr_setstacksize(</source>
          <target state="translated">スレッドの作成に失敗しました。</target>
        </trans-unit>
        <trans-unit id="bfe544dd150b465313579f9a917937793103ac16" translate="yes" xml:space="preserve">
          <source>Thread creation failed: pthread_create returned #</source>
          <target state="translated">スレッドの作成に失敗しました。</target>
        </trans-unit>
        <trans-unit id="c4066c9a805adec4e9141cb77efe0020bace9560" translate="yes" xml:space="preserve">
          <source>Thread objects also have an overloaded &lt;code&gt;==&lt;/code&gt; comparison so that you can do comparison on them as you would with normal objects.</source>
          <target state="translated">スレッドオブジェクトには、オーバーロードされた &lt;code&gt;==&lt;/code&gt; 比較もあるので、通常のオブジェクトの場合と同じようにスレッドオブジェクトを比較できます。</target>
        </trans-unit>
        <trans-unit id="d0cef5deb223649da3c92e68bafacf5c8ccd785e" translate="yes" xml:space="preserve">
          <source>Thread safety</source>
          <target state="translated">スレッドの安全性</target>
        </trans-unit>
        <trans-unit id="549ccddc66fc92574e2a5d76a4615e0548e5e609" translate="yes" xml:space="preserve">
          <source>Thread support is a Perl compile-time option. It's something that's turned on or off when Perl is built at your site, rather than when your programs are compiled. If your Perl wasn't compiled with thread support enabled, then any attempt to use threads will fail.</source>
          <target state="translated">スレッドサポートは Perl のコンパイル時のオプションです。これは、プログラムがコンパイルされたときではなく、サイトで Perl がビルドされたときにオンまたはオフになるものです。Perl がスレッドサポートを有効にしてコンパイルされていない場合、スレッドを使用しようとすると失敗します。</target>
        </trans-unit>
        <trans-unit id="46bddf5c24ca2d6a4d9042e8357ff7786b5311d0" translate="yes" xml:space="preserve">
          <source>Thread support is not tested in this version of the djgpp perl.</source>
          <target state="translated">スレッドのサポートはこのバージョンの djgpp perl ではテストされていません。</target>
        </trans-unit>
        <trans-unit id="c46da741d2999f303803e3f917e3740fdda50340" translate="yes" xml:space="preserve">
          <source>Thread support is not very reliable before 5.10.1, but that's because threads are not very reliable before 5.10.1.</source>
          <target state="translated">5.10.1以前のスレッドサポートは信頼性が低いですが、それは5.10.1以前のスレッドは信頼性が低いからです。</target>
        </trans-unit>
        <trans-unit id="11feb4cfa0751bbfde7a5acce22a835701e10a09" translate="yes" xml:space="preserve">
          <source>Thread-&amp;gt;list</source>
          <target state="translated">Thread-&amp;gt;list</target>
        </trans-unit>
        <trans-unit id="c33ecb12695532db82054d26a0b666a4c71b167c" translate="yes" xml:space="preserve">
          <source>Thread-&amp;gt;self</source>
          <target state="translated">Thread-&amp;gt;self</target>
        </trans-unit>
        <trans-unit id="8fed753691ece692a240fff0998afe0f2ace9f0d" translate="yes" xml:space="preserve">
          <source>Thread-Safe Modules</source>
          <target state="translated">スレッドセーフモジュール</target>
        </trans-unit>
        <trans-unit id="7481655dbaa92f6baf98738070e27520e97d079c" translate="yes" xml:space="preserve">
          <source>Thread-Safety of System Libraries</source>
          <target state="translated">システムライブラリのスレッド安全性</target>
        </trans-unit>
        <trans-unit id="932b17e3a913e7164b20d08cedb16d8eee3d76fc" translate="yes" xml:space="preserve">
          <source>Thread-aware system interfaces</source>
          <target state="translated">スレッドを意識したシステムインタフェース</target>
        </trans-unit>
        <trans-unit id="3f487c5ede1faaacb7af8d62cbc07904f78f97b1" translate="yes" xml:space="preserve">
          <source>Thread-safe modules</source>
          <target state="translated">スレッドセーフモジュール</target>
        </trans-unit>
        <trans-unit id="8d5d3327153c08a2630824ad42fbb1c6c94a74e6" translate="yes" xml:space="preserve">
          <source>Thread-safe operations are supported in Windows starting in Visual Studio 2005, and in systems compatible with POSIX 2008. Some platforms claim to support POSIX 2008, but have buggy implementations, so that the hints files for compiling to run on them turn off attempting to use thread-safety. &lt;code&gt;${^SAFE_LOCALES}&lt;/code&gt; will be 0 on them.</source>
          <target state="translated">スレッドセーフ操作は、Visual Studio 2005以降のWindows、およびPOSIX2008と互換性のあるシステムでサポートされています。一部のプラットフォームはPOSIX2008をサポートすると主張していますが、実装にバグがあるため、コンパイルするためのヒントファイルはオフになります。スレッドセーフを使用します。 &lt;code&gt;${^SAFE_LOCALES}&lt;/code&gt; は0になります。</target>
        </trans-unit>
        <trans-unit id="a04c2c8f868b7f546d5c03554daa6de042ed3f5f" translate="yes" xml:space="preserve">
          <source>Thread-safe queues</source>
          <target state="translated">スレッドセーフキュー</target>
        </trans-unit>
        <trans-unit id="6ec24d7d376e4c8018f31c516a824eaf616af734" translate="yes" xml:space="preserve">
          <source>Thread-safe semaphores</source>
          <target state="translated">スレッドセーフセマフォ</target>
        </trans-unit>
        <trans-unit id="1a5d305757aae906720c104f8cc9b46cfea47a9a" translate="yes" xml:space="preserve">
          <source>Thread-safety of extensions</source>
          <target state="translated">拡張機能のスレッド安全性</target>
        </trans-unit>
        <trans-unit id="396f10461adcaf1d700d25868c55c05cc6b1f668" translate="yes" xml:space="preserve">
          <source>Thread::Queue</source>
          <target state="translated">Thread::Queue</target>
        </trans-unit>
        <trans-unit id="a99444903cfd04a299ea92dd5417034d9b8ba995" translate="yes" xml:space="preserve">
          <source>Thread::Queue - Thread-safe queues</source>
          <target state="translated">Thread::Queue-スレッドセーフキュー</target>
        </trans-unit>
        <trans-unit id="762634ef60addc5dc2601bb4e594eccb63b09b78" translate="yes" xml:space="preserve">
          <source>Thread::Queue Discussion Forum on CPAN: &lt;a href=&quot;http://www.cpanforum.com/dist/Thread-Queue&quot;&gt;http://www.cpanforum.com/dist/Thread-Queue&lt;/a&gt;</source>
          <target state="translated">CPANのThread :: Queueディスカッションフォーラム：&lt;a href=&quot;http://www.cpanforum.com/dist/Thread-Queue&quot;&gt;http&lt;/a&gt; : //www.cpanforum.com/dist/Thread-Queue</target>
        </trans-unit>
        <trans-unit id="e095a6673757f69a6701a64b890923c021a33f37" translate="yes" xml:space="preserve">
          <source>Thread::Queue on MetaCPAN: &lt;a href=&quot;https://metacpan.org/release/Thread-Queue&quot;&gt;https://metacpan.org/release/Thread-Queue&lt;/a&gt;</source>
          <target state="translated">MetaCPANのThread :: Queue：&lt;a href=&quot;https://metacpan.org/release/Thread-Queue&quot;&gt;https&lt;/a&gt;：//metacpan.org/release/Thread-Queue</target>
        </trans-unit>
        <trans-unit id="0074185a9ba92a372e711b37e0503d776af40535" translate="yes" xml:space="preserve">
          <source>Thread::Semaphore</source>
          <target state="translated">Thread::Semaphore</target>
        </trans-unit>
        <trans-unit id="5153c71809c73fa56e9f450e40e65e39c3a75a98" translate="yes" xml:space="preserve">
          <source>Thread::Semaphore - Thread-safe semaphores</source>
          <target state="translated">Thread::Semaphore-スレッドセーフなセマフォ</target>
        </trans-unit>
        <trans-unit id="b671103ebdb4e0b4d2ecc230ad75192d06191f6c" translate="yes" xml:space="preserve">
          <source>Thread::Semaphore Discussion Forum on CPAN: &lt;a href=&quot;http://www.cpanforum.com/dist/Thread-Semaphore&quot;&gt;http://www.cpanforum.com/dist/Thread-Semaphore&lt;/a&gt;</source>
          <target state="translated">CPANのThread :: Semaphoreディスカッションフォーラム：&lt;a href=&quot;http://www.cpanforum.com/dist/Thread-Semaphore&quot;&gt;http&lt;/a&gt; : //www.cpanforum.com/dist/Thread-Semaphore</target>
        </trans-unit>
        <trans-unit id="78e4d100100edaa775feea0a8c72907079d2f6c0" translate="yes" xml:space="preserve">
          <source>Thread::Semaphore on MetaCPAN: &lt;a href=&quot;https://metacpan.org/release/Thread-Semaphore&quot;&gt;https://metacpan.org/release/Thread-Semaphore&lt;/a&gt;</source>
          <target state="translated">MetaCPANのスレッド::セマフォ：&lt;a href=&quot;https://metacpan.org/release/Thread-Semaphore&quot;&gt;https&lt;/a&gt;：//metacpan.org/release/Thread-Semaphore</target>
        </trans-unit>
        <trans-unit id="a01c8841eeee1a585b966adef58341ccb26f6e3f" translate="yes" xml:space="preserve">
          <source>Threaded Perl</source>
          <target state="translated">スレッドされたPerl</target>
        </trans-unit>
        <trans-unit id="b3c18742ec345b212b0e3561e0712bc0736d2fd7" translate="yes" xml:space="preserve">
          <source>Threaded Perl &amp;lt; 5L</source>
          <target state="translated">スレッド化Perl &amp;lt;5L</target>
        </trans-unit>
        <trans-unit id="896b80373adefd94b0d4d1ca953da0068f3de675" translate="yes" xml:space="preserve">
          <source>Threaded Perl on HP-UX</source>
          <target state="translated">HP-UX上のPerlのスレッド</target>
        </trans-unit>
        <trans-unit id="278ce1d68672d63d7d64a6301d587c6d418cdd49" translate="yes" xml:space="preserve">
          <source>Threaded Perl on Tru64</source>
          <target state="translated">Tru64でのスレッド付きPerl</target>
        </trans-unit>
        <trans-unit id="3e5a5f323fc4b225e8b871ec76ea2983f10ebd12" translate="yes" xml:space="preserve">
          <source>Threaded Program Models</source>
          <target state="translated">スレッド化されたプログラムモデル</target>
        </trans-unit>
        <trans-unit id="5541d0b76d127f6a3c54bbc247ffcc1b6c2bbc25" translate="yes" xml:space="preserve">
          <source>Threading</source>
          <target state="translated">Threading</target>
        </trans-unit>
        <trans-unit id="bb12e8aaaecc434fd51e448fe7669bced1bdd107" translate="yes" xml:space="preserve">
          <source>Threads</source>
          <target state="translated">Threads</target>
        </trans-unit>
        <trans-unit id="6596a15b769c831a3f0b4a20d6206e9aaff0ff18" translate="yes" xml:space="preserve">
          <source>Threads And Data</source>
          <target state="translated">スレッドとデータ</target>
        </trans-unit>
        <trans-unit id="ce6a15cf18170dad63898b28647ad599c148d2e2" translate="yes" xml:space="preserve">
          <source>Threads and PERL_NO_GET_CONTEXT</source>
          <target state="translated">スレッドとPERL_NO_GET_CONTEXT</target>
        </trans-unit>
        <trans-unit id="f29a9672c8b3e91f034cbb02629e17bf739af74a" translate="yes" xml:space="preserve">
          <source>Threads are executed in an &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; context. This method will return &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; if the thread terminates</source>
          <target state="translated">スレッドは &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; コンテキストで実行されます。スレッドが終了した場合、このメソッドは &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; を返します</target>
        </trans-unit>
        <trans-unit id="4f937508b206813fc7fc617e2e68bc09cd2fe07a" translate="yes" xml:space="preserve">
          <source>Threads are executed in an &lt;code&gt;eval&lt;/code&gt; context. This method will return &lt;code&gt;undef&lt;/code&gt; if the thread terminates</source>
          <target state="translated">スレッドは &lt;code&gt;eval&lt;/code&gt; コンテキストで実行されます。スレッドが終了すると、このメソッドは &lt;code&gt;undef&lt;/code&gt; を返します</target>
        </trans-unit>
        <trans-unit id="b839f3a9a828ffa9cf5380fd081f2abe973e818b" translate="yes" xml:space="preserve">
          <source>Threads created after the stack size is set will then either call &lt;code&gt;pthread_attr_setstacksize()&lt;/code&gt;</source>
          <target state="translated">スタックサイズの設定後に作成されたスレッドは、 &lt;code&gt;pthread_attr_setstacksize()&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="94467b457a28016ce826b824829b4d6d15c2d05d" translate="yes" xml:space="preserve">
          <source>Threads in perl on Solaris.</source>
          <target state="translated">Solaris上のperlのスレッド。</target>
        </trans-unit>
        <trans-unit id="9bf016cf50be3949ad3553a7f6154f5ec7b5a4bd" translate="yes" xml:space="preserve">
          <source>Threads seem to work OK, though at the moment not all tests pass when threads are used in combination with 64-bit configurations.</source>
          <target state="translated">スレッドは問題なく動作しているようですが、現時点では64ビット構成と組み合わせてスレッドを使用した場合、すべてのテストが通過しているわけではありません。</target>
        </trans-unit>
        <trans-unit id="4cfcad8da4f4097a771977a006ace86ca57e64ee" translate="yes" xml:space="preserve">
          <source>Three additional functions allow access to this statistic from Perl. First, use &lt;code&gt;mstats_fillhash(%hash)&lt;/code&gt; to get the information contained in the output of mstat() into %hash. The field of this hash are</source>
          <target state="translated">3つの追加関数により、Perlからこの統計にアクセスできます。最初に、 &lt;code&gt;mstats_fillhash(%hash)&lt;/code&gt; を使用して、mstat（）の出力に含まれる情報を％hashに取得します。このハッシュのフィールドは</target>
        </trans-unit>
        <trans-unit id="26e5837be2de4b1aebd256f3b85dedb9966c5789" translate="yes" xml:space="preserve">
          <source>Three arguments are passed to all subroutines specified in the &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; overload&lt;/code&gt; directive (with exceptions - see below, particularly &lt;a href=&quot;#nomethod&quot;&gt;nomethod&lt;/a&gt;).</source>
          <target state="translated">3つの引数が、 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; overload&lt;/code&gt; ディレクティブで指定されたすべてのサブルーチンに渡されます（例外-下記、特に&lt;a href=&quot;#nomethod&quot;&gt;nomethodを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="eda363e39741d5cd78c03eff4a6d63f761929ec3" translate="yes" xml:space="preserve">
          <source>Three arguments are passed to all subroutines specified in the &lt;code&gt;use overload&lt;/code&gt; directive (with exceptions - see below, particularly &lt;a href=&quot;#nomethod&quot;&gt;&quot;nomethod&quot;&lt;/a&gt;).</source>
          <target state="translated">三つの引数は、すべてのサブルーチンに渡されますに指定された &lt;code&gt;use overload&lt;/code&gt; （例外を除いて-以下を参照してください、特に指示&lt;a href=&quot;#nomethod&quot;&gt;「nomethod」&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="3cd6b1128d59a894465f4f165820b4021adc3e92" translate="yes" xml:space="preserve">
          <source>Three basic types of firewalls</source>
          <target state="translated">ファイアウォールの基本的な3つのタイプ</target>
        </trans-unit>
        <trans-unit id="0cfd5fb11aff1629d8a4d5d5d19e3a7e21cf359a" translate="yes" xml:space="preserve">
          <source>Three callback methods must be supplied by a class extending &lt;a href=&quot;Pod::Simple&quot;&gt;Pod::Simple&lt;/a&gt; to receive the corresponding event:</source>
          <target state="translated">対応するイベントを受信するには、&lt;a href=&quot;Pod::Simple&quot;&gt;Pod :: Simple&lt;/a&gt;を拡張するクラスによって3つのコールバックメソッドを提供する必要があります。</target>
        </trans-unit>
        <trans-unit id="c4ffe47253803edde038382d85662a60a52eedba" translate="yes" xml:space="preserve">
          <source>Three examples illustrate locale-dependent tainting. The first program, which ignores its locale, won't run: a value taken directly from the command line may not be used to name an output file when taint checks are enabled.</source>
          <target state="translated">3 つの例では、ロケールに依存した汚染を説明しています。最初のプログラムはロケールを無視していますが、これは実行されません。</target>
        </trans-unit>
        <trans-unit id="6141ac98876a4853f17c73073300c31f8ef5f853" translate="yes" xml:space="preserve">
          <source>Three kinds of values are supported: integer numbers, floating point numbers, and strings.</source>
          <target state="translated">整数、浮動小数点数、文字列の3種類の値をサポートしています。</target>
        </trans-unit>
        <trans-unit id="1e762c22c180faab240d71e43cfef464b083afa9" translate="yes" xml:space="preserve">
          <source>Three techniques can make regular expressions maintainable and understandable.</source>
          <target state="translated">3つのテクニックを使えば、正規表現をメンテナンスしやすく、理解しやすいものにすることができます。</target>
        </trans-unit>
        <trans-unit id="1e024ca38a0a0e2a4280224604ff002f7a982d0a" translate="yes" xml:space="preserve">
          <source>Through &lt;code&gt;ignoreChar&lt;/code&gt; , any character matching &lt;code&gt;&lt;a href=&quot;../functions/qr&quot;&gt;qr/$ignoreChar/&lt;/a&gt;&lt;/code&gt; will be ignored. Through &lt;code&gt;ignoreName&lt;/code&gt; , any character whose name (given in the &lt;code&gt;table&lt;/code&gt; file as a comment) matches &lt;code&gt;&lt;a href=&quot;../functions/qr&quot;&gt;qr/$ignoreName/&lt;/a&gt;&lt;/code&gt; will be ignored.</source>
          <target state="translated">&lt;code&gt;ignoreChar&lt;/code&gt; により、 &lt;code&gt;&lt;a href=&quot;../functions/qr&quot;&gt;qr/$ignoreChar/&lt;/a&gt;&lt;/code&gt; 一致する文字はすべて無視されます。 &lt;code&gt;ignoreName&lt;/code&gt; により、名前（ &lt;code&gt;table&lt;/code&gt; ファイルでコメントとして指定）が &lt;code&gt;&lt;a href=&quot;../functions/qr&quot;&gt;qr/$ignoreName/&lt;/a&gt;&lt;/code&gt; と一致する文字はすべて無視されます。</target>
        </trans-unit>
        <trans-unit id="6982b043a594faf7eee60f7d8781076841a7bed8" translate="yes" xml:space="preserve">
          <source>Through &lt;code&gt;ignoreChar&lt;/code&gt;, any character matching &lt;code&gt;qr/$ignoreChar/&lt;/code&gt; will be ignored. Through &lt;code&gt;ignoreName&lt;/code&gt;, any character whose name (given in the &lt;code&gt;table&lt;/code&gt; file as a comment) matches &lt;code&gt;qr/$ignoreName/&lt;/code&gt; will be ignored.</source>
          <target state="translated">&lt;code&gt;ignoreChar&lt;/code&gt; 、任意の文字マッチング &lt;code&gt;qr/$ignoreChar/&lt;/code&gt; 無視されます。 &lt;code&gt;ignoreName&lt;/code&gt; 、名前が（に与えられた任意の文字 &lt;code&gt;table&lt;/code&gt; コメントとしてファイル）に一致 &lt;code&gt;qr/$ignoreName/&lt;/code&gt; 無視されます。</target>
        </trans-unit>
        <trans-unit id="2656f0fc85c8406c01f3e25365ba08b9847d1444" translate="yes" xml:space="preserve">
          <source>Through &lt;code&gt;overrideCJK&lt;/code&gt; , ordering of CJK unified ideographs (including extensions) can be overridden.</source>
          <target state="translated">&lt;code&gt;overrideCJK&lt;/code&gt; 、（拡張子を含む）CJK統合漢字の順序付けをオーバーライドすることができます。</target>
        </trans-unit>
        <trans-unit id="a4812f3fb25100135533513adb0cedc6268f243c" translate="yes" xml:space="preserve">
          <source>Through &lt;code&gt;overrideCJK&lt;/code&gt;, ordering of CJK unified ideographs (including extensions) can be overridden.</source>
          <target state="translated">&lt;code&gt;overrideCJK&lt;/code&gt; 、（拡張子を含む）CJK統合漢字の順序付けをオーバーライドすることができます。</target>
        </trans-unit>
        <trans-unit id="d41b6131470dc9be4067c613ceb5bce948ecfe0f" translate="yes" xml:space="preserve">
          <source>Through &lt;code&gt;undefChar&lt;/code&gt; , any character matching &lt;code&gt;&lt;a href=&quot;../functions/qr&quot;&gt;qr/$undefChar/&lt;/a&gt;&lt;/code&gt; will be undefined. Through &lt;code&gt;undefName&lt;/code&gt; , any character whose name (given in the &lt;code&gt;table&lt;/code&gt; file as a comment) matches &lt;code&gt;&lt;a href=&quot;../functions/qr&quot;&gt;qr/$undefName/&lt;/a&gt;&lt;/code&gt; will be undefined.</source>
          <target state="translated">&lt;code&gt;undefChar&lt;/code&gt; により、 &lt;code&gt;&lt;a href=&quot;../functions/qr&quot;&gt;qr/$undefChar/&lt;/a&gt;&lt;/code&gt; 一致する文字は未定義になります。 &lt;code&gt;undefName&lt;/code&gt; により、名前（ &lt;code&gt;table&lt;/code&gt; ファイルでコメントとして指定）が &lt;code&gt;&lt;a href=&quot;../functions/qr&quot;&gt;qr/$undefName/&lt;/a&gt;&lt;/code&gt; と一致する文字は未定義になります。</target>
        </trans-unit>
        <trans-unit id="06a20d5faae40c1690e4ca328ce25858d383557b" translate="yes" xml:space="preserve">
          <source>Through &lt;code&gt;undefChar&lt;/code&gt;, any character matching &lt;code&gt;qr/$undefChar/&lt;/code&gt; will be undefined. Through &lt;code&gt;undefName&lt;/code&gt;, any character whose name (given in the &lt;code&gt;table&lt;/code&gt; file as a comment) matches &lt;code&gt;qr/$undefName/&lt;/code&gt; will be undefined.</source>
          <target state="translated">&lt;code&gt;undefChar&lt;/code&gt; 、任意の文字マッチング &lt;code&gt;qr/$undefChar/&lt;/code&gt; 不定となります。 &lt;code&gt;undefName&lt;/code&gt; 、名前が（に与えられた任意の文字 &lt;code&gt;table&lt;/code&gt; コメントとしてファイル）に一致 &lt;code&gt;qr/$undefName/&lt;/code&gt; 不定となります。</target>
        </trans-unit>
        <trans-unit id="d077a4a651b19b1e4364e9f887336a0ac7a1fd1b" translate="yes" xml:space="preserve">
          <source>Throughout Perl's documentation, you'll find numerous examples intended to help explain the discussed features. Please keep in mind that many of them are code fragments rather than complete programs.</source>
          <target state="translated">Perl のドキュメントでは、説明されている機能を説明するのに役立つように多くの例が紹介されています。これらの例の多くは、完全なプログラムではなく、コードの断片であることを覚えておいてください。</target>
        </trans-unit>
        <trans-unit id="c8b395c4fc736d7a1ffa585c8b907d633728a128" translate="yes" xml:space="preserve">
          <source>Throughout the previous section all the examples have used the syntax:</source>
          <target state="translated">前のセクションを通して、すべての例は構文を使用しています。</target>
        </trans-unit>
        <trans-unit id="04ea385bf46d02438c73b811e0575313e27e41c8" translate="yes" xml:space="preserve">
          <source>Throughout this document a variety of interfaces to the rpcb_gettime() XSUB will be explored. The XSUBs will take their parameters in different orders or will take different numbers of parameters. In each case the XSUB is an abstraction between Perl and the real C rpcb_gettime() function, and the XSUB must always ensure that the real rpcb_gettime() function is called with the correct parameters. This abstraction will allow the programmer to create a more Perl-like interface to the C function.</source>
          <target state="translated">このドキュメントでは、rpcb_gettime()XSUB への様々なインタフェースについて説明します。XSUB は異なる順序でパラメータを取得したり、異なる数のパラメータを取得したりします。XSUBはPerlと実際のC言語のrpcb_gettime()関数との間の抽象化であり、XSUBは常に実際のrpcb_gettime()関数が正しいパラメータで呼び出されることを保証しなければなりません。この抽象化により、プログラマはよりPerlに近いインターフェイスをC関数に作成することができます。</target>
        </trans-unit>
        <trans-unit id="b15b9c197ac6c931d6850ebe19f2134cab6a760f" translate="yes" xml:space="preserve">
          <source>Throughout this document you'll see references to other parts of the Perl documentation. You can read that documentation using the &lt;code&gt;perldoc&lt;/code&gt; command or whatever method you're using to read this document.</source>
          <target state="translated">このドキュメント全体を通して、Perlのドキュメントの他の部分への参照が表示されます。このドキュメントは、 &lt;code&gt;perldoc&lt;/code&gt; コマンドまたはこのドキュメントを読むために使用している方法で読むことができます。</target>
        </trans-unit>
        <trans-unit id="d384b2c788b5330a252672c9c0d9ed4dcefe6cd2" translate="yes" xml:space="preserve">
          <source>Throughout this document, &quot;Pod&quot; has been the preferred spelling for the name of the documentation format. One may also use &quot;POD&quot; or &quot;pod&quot;. For the documentation that is (typically) in the Pod format, you may use &quot;pod&quot;, or &quot;Pod&quot;, or &quot;POD&quot;. Understanding these distinctions is useful; but obsessing over how to spell them, usually is not.</source>
          <target state="translated">この文書を通して、&quot;Pod &quot;は文書形式の名前のために好ましい綴りである。また、&quot;POD &quot;や &quot;pod &quot;を使用することもできます。一般的に)Pod形式のドキュメントに対しては、&quot;pod&quot;、&quot;Pod&quot;、または &quot;POD &quot;を使用することができます。これらの区別を理解することは有用ですが、それらの綴り方にこだわることは、通常はそうではありません。</target>
        </trans-unit>
        <trans-unit id="6a4f24f440cbc4008a46d5ea71d57cb32fa115ff" translate="yes" xml:space="preserve">
          <source>Throw in some dubious extra macros for Makefile args.</source>
          <target state="translated">Makefileの引数のための怪しげな追加マクロを入れてください。</target>
        </trans-unit>
        <trans-unit id="76751470c1dde2f50d7d809c9a5f8b163f6ce43e" translate="yes" xml:space="preserve">
          <source>Throws an error if any of the signals supplied cannot be added to the set.</source>
          <target state="translated">供給されたシグナルをセットに追加できない場合にエラーをスローします。</target>
        </trans-unit>
        <trans-unit id="47b73cafd4faf1fefd5169b12127f2bdff667740" translate="yes" xml:space="preserve">
          <source>Throws an exception telling you the attribute is read-only. This is exported to override any active setters for the attribute in a parent class.</source>
          <target state="translated">属性が読み取り専用であることを示す例外をスローします。これは、親クラスの属性のアクティブなセッターを上書きするためにエクスポートされます。</target>
        </trans-unit>
        <trans-unit id="d1f7b26cf9b0b9d2fcaec187b02a47e2ac8cf9d0" translate="yes" xml:space="preserve">
          <source>Thus Perl allows such constructs, by</source>
          <target state="translated">このようにPerlでは、次のようにして、そのような構成を可能にしています。</target>
        </trans-unit>
        <trans-unit id="ab203f90d156d52e2f73ed76c1de89f7fea26e7e" translate="yes" xml:space="preserve">
          <source>Thus Perl returns true on success and false on failure, yet you can still easily determine the actual value returned by the operating system:</source>
          <target state="translated">このように、Perlは成功時には真、失敗時には偽を返しますが、それでもオペレーティングシステムが返す実際の値を簡単に決定することができます。</target>
        </trans-unit>
        <trans-unit id="68e6804dcc6b004791c6943dada1f9eeda86eed7" translate="yes" xml:space="preserve">
          <source>Thus means that you need to get some copy of a</source>
          <target state="translated">したがって、いくつかのコピーを取得する必要があることを意味します。</target>
        </trans-unit>
        <trans-unit id="cced270ffb5295be4933e701f4fb59adf650f013" translate="yes" xml:space="preserve">
          <source>Thus the following lines are equivalent:</source>
          <target state="translated">したがって、以下の行は等価です。</target>
        </trans-unit>
        <trans-unit id="2e4d332fae9a917754e083395b2e8d74491bb6fd" translate="yes" xml:space="preserve">
          <source>Thus the pattern &lt;code&gt;/foo(?:\w+|\d+|\s+)bar/&lt;/code&gt; can be thought of as the following chart:</source>
          <target state="translated">したがって、パターン &lt;code&gt;/foo(?:\w+|\d+|\s+)bar/&lt;/code&gt; は、次のチャートと考えることができます。</target>
        </trans-unit>
        <trans-unit id="f633037050d154781c387ade59e7e2912691ab20" translate="yes" xml:space="preserve">
          <source>Thus the warning is raised for many fewer cases than in earlier Perls, and only when what the result is could be arguable. It turns out that none of the optimizations made by Perl (or are ever likely to be made) cause the warning to be skipped, so it solves both problems of Perl's earlier approach. The most commonly used property that is affected by this change is &lt;code&gt;\p{Unassigned}&lt;/code&gt; which is a short form for &lt;code&gt;\p{General_Category=Unassigned}&lt;/code&gt; . Starting in v5.20, all non-Unicode code points are considered &lt;code&gt;Unassigned&lt;/code&gt; . In earlier releases the matches failed because the result was considered undefined.</source>
          <target state="translated">したがって、警告は以前のPerlよりもはるかに少ないケースで発生し、その結果が議論の余地がある場合にのみ発生します。 Perlによって行われた（または行われる可能性が高い）最適化のいずれも警告をスキップしないことが判明したため、Perlの以前のアプローチの両方の問題が解決されます。この変更によって影響を受ける最も一般的に使用される特性である &lt;code&gt;\p{Unassigned}&lt;/code&gt; のための短縮形である &lt;code&gt;\p{General_Category=Unassigned}&lt;/code&gt; 。 v5.20から、すべての非Unicodeコードポイントは &lt;code&gt;Unassigned&lt;/code&gt; と見なされます。以前のリリースでは、結果が未定義と見なされていたため、一致は失敗しました。</target>
        </trans-unit>
        <trans-unit id="61e13a16949757dfa1e1583008faeb5e63993d67" translate="yes" xml:space="preserve">
          <source>Thus the warning is raised for many fewer cases than in earlier Perls, and only when what the result is could be arguable. It turns out that none of the optimizations made by Perl (or are ever likely to be made) cause the warning to be skipped, so it solves both problems of Perl's earlier approach. The most commonly used property that is affected by this change is &lt;code&gt;\p{Unassigned}&lt;/code&gt; which is a short form for &lt;code&gt;\p{General_Category=Unassigned}&lt;/code&gt;. Starting in v5.20, all non-Unicode code points are considered &lt;code&gt;Unassigned&lt;/code&gt;. In earlier releases the matches failed because the result was considered undefined.</source>
          <target state="translated">したがって、警告は、以前のPerlよりもはるかに少ないケースで発生し、結果が議論の余地がある場合にのみ発生します。Perlによって行われた（または行われる可能性が高い）最適化のいずれも警告がスキップされる原因ではないことが判明したため、Perlの以前のアプローチの両方の問題を解決します。この変更によって影響を受ける最も一般的に使用される特性である &lt;code&gt;\p{Unassigned}&lt;/code&gt; のための短縮形である &lt;code&gt;\p{General_Category=Unassigned}&lt;/code&gt; 。v5.20以降、Unicode以外のすべてのコードポイントは &lt;code&gt;Unassigned&lt;/code&gt; と見なされます。以前のリリースでは、結果が未定義と見なされたため、一致は失敗しました。</target>
        </trans-unit>
        <trans-unit id="198082eebbb223fde4a47c55ef1e44319568487c" translate="yes" xml:space="preserve">
          <source>Thus you can say</source>
          <target state="translated">したがって、次のように言うことができます。</target>
        </trans-unit>
        <trans-unit id="61d7278739eb25e7e5958e1c5b254402dd825eb3" translate="yes" xml:space="preserve">
          <source>Thus, after a match against &lt;code&gt;$_&lt;/code&gt; , &lt;code&gt;$&amp;amp;&lt;/code&gt; coincides with &lt;code&gt;&lt;a href=&quot;functions/substr&quot;&gt;substr&lt;/a&gt; $_, $-[0],
$+[0] - $-[0]&lt;/code&gt; . Similarly, $</source>
          <target state="translated">したがって、 &lt;code&gt;$_&lt;/code&gt; との一致後、 &lt;code&gt;$&amp;amp;&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;functions/substr&quot;&gt;substr&lt;/a&gt; $_, $-[0], $+[0] - $-[0]&lt;/code&gt; と一致します。同様に、$</target>
        </trans-unit>
        <trans-unit id="41169299ed066a28115e5870cc4da4575fd56075" translate="yes" xml:space="preserve">
          <source>Thus, after a match against &lt;code&gt;$_&lt;/code&gt;, &lt;code&gt;$&amp;amp;&lt;/code&gt; coincides with &lt;code&gt;substr $_, $-[0], $+[0] - $-[0]&lt;/code&gt;. Similarly, $</source>
          <target state="translated">したがって、 &lt;code&gt;$_&lt;/code&gt; との一致後、 &lt;code&gt;$&amp;amp;&lt;/code&gt; は &lt;code&gt;substr $_, $-[0], $+[0] - $-[0]&lt;/code&gt; と一致します。同様に、$</target>
        </trans-unit>
        <trans-unit id="c9649f9466e2d92d8678d66258528b39110e1a08" translate="yes" xml:space="preserve">
          <source>Thus, techniques are of interest that store object data</source>
          <target state="translated">このように、オブジェクトデータを格納する技術が注目されています。</target>
        </trans-unit>
        <trans-unit id="69514cb2285daf6fa2a75d85f6f93569b1ec1fbe" translate="yes" xml:space="preserve">
          <source>Thus, the following code:</source>
          <target state="translated">したがって、以下のようなコードになります。</target>
        </trans-unit>
        <trans-unit id="fdfd242e087e9b16796271aa3a036f7d0bbc20a8" translate="yes" xml:space="preserve">
          <source>Thus, when an SV is determined to be magical and of type &lt;code&gt;PERL_MAGIC_sv&lt;/code&gt; , if a get operation is being performed, the routine &lt;code&gt;magic_get&lt;/code&gt; is called. All the various routines for the various magical types begin with &lt;code&gt;magic_&lt;/code&gt; . NOTE: the magic routines are not considered part of the Perl API, and may not be exported by the Perl library.</source>
          <target state="translated">したがって、SVが魔法のタイプ &lt;code&gt;PERL_MAGIC_sv&lt;/code&gt; であると判断された場合、get操作が実行されていると、ルーチン &lt;code&gt;magic_get&lt;/code&gt; が呼び出されます。さまざまな魔法のタイプのさまざまなルーチンはすべて、 &lt;code&gt;magic_&lt;/code&gt; で始まります。注：マジックルーチンはPerl APIの一部とは見なされず、Perlライブラリによってエクスポートされない場合があります。</target>
        </trans-unit>
        <trans-unit id="0549c98abe5f2c41103ad967e9de7400fdf53796" translate="yes" xml:space="preserve">
          <source>Thus, when an SV is determined to be magical and of type &lt;code&gt;PERL_MAGIC_sv&lt;/code&gt;, if a get operation is being performed, the routine &lt;code&gt;magic_get&lt;/code&gt; is called. All the various routines for the various magical types begin with &lt;code&gt;magic_&lt;/code&gt;. NOTE: the magic routines are not considered part of the Perl API, and may not be exported by the Perl library.</source>
          <target state="translated">したがって、SVが魔法で &lt;code&gt;PERL_MAGIC_sv&lt;/code&gt; 型であると判断された場合、get操作が実行されていると、ルーチン &lt;code&gt;magic_get&lt;/code&gt; が呼び出されます。さまざまな魔法のタイプのすべてのさまざまなルーチンは、 &lt;code&gt;magic_&lt;/code&gt; で始まります。注：マジックルーチンはPerl APIの一部とは見なされず、Perlライブラリによってエクスポートされない場合があります。</target>
        </trans-unit>
        <trans-unit id="792b045fd76c8a8e326c6a926aab95f7dc272599" translate="yes" xml:space="preserve">
          <source>Tidies a pod file. It's a good idea to run this on a pod file you've patched.</source>
          <target state="translated">ポッドファイルを整理します。パッチを適用したポッドファイルの上で実行するのが良いでしょう。</target>
        </trans-unit>
        <trans-unit id="b6cf02234ec17d26dce972804e5d1459de07ad2c" translate="yes" xml:space="preserve">
          <source>Tidy up a pad at the end of compilation of the code to which it belongs. Jobs performed here are: remove most stuff from the pads of anonsub prototypes; give it a &lt;code&gt;@_&lt;/code&gt;; mark temporaries as such. &lt;code&gt;type&lt;/code&gt; indicates the kind of subroutine:</source>
          <target state="translated">パッドが属するコードのコンパイルの最後にパッドを整理します。ここで実行されるジョブは次のとおりです。anonsubプロトタイプのパッドからほとんどのものを削除します。 &lt;code&gt;@_&lt;/code&gt; を与える; 一時的なものをそのようにマークします。 &lt;code&gt;type&lt;/code&gt; は、サブルーチンの種類を示します。</target>
        </trans-unit>
        <trans-unit id="296860fe60dd454f0fedbc6ccca9835dfde819d9" translate="yes" xml:space="preserve">
          <source>Tidy up a pad at the end of compilation of the code to which it belongs. Jobs performed here are: remove most stuff from the pads of anonsub prototypes; give it a @_; mark temporaries as such.</source>
          <target state="translated">そのコードが属するコードのコンパイルの最後にパッドを整頓します。ここで実行される作業は以下の通りです:anonsubプロトタイプのパッドからほとんどのものを削除する;@_をつける;一時的なものをそのようにマークする。</target>
        </trans-unit>
        <trans-unit id="7d075f169d648523eaa03bb2a98984e48aa65769" translate="yes" xml:space="preserve">
          <source>Tie</source>
          <target state="translated">Tie</target>
        </trans-unit>
        <trans-unit id="5e1d6d92861c9421bba19d24d93aa2e9bfe58ad7" translate="yes" xml:space="preserve">
          <source>Tie large variables to disk</source>
          <target state="translated">大きな変数をディスクに結びつける</target>
        </trans-unit>
        <trans-unit id="0bb65db42104858e7d9b646133b08eaaeba3381c" translate="yes" xml:space="preserve">
          <source>Tie::Array</source>
          <target state="translated">Tie::Array</target>
        </trans-unit>
        <trans-unit id="75e3c18c1d17d4f15800c858036a1510e1e1f0e6" translate="yes" xml:space="preserve">
          <source>Tie::Array - base class for tied arrays</source>
          <target state="translated">Tie::Array-紐付き配列の基底クラス</target>
        </trans-unit>
        <trans-unit id="3315a464fcfacdc6f9533f0ecfd375368fedb11d" translate="yes" xml:space="preserve">
          <source>Tie::File</source>
          <target state="translated">Tie::File</target>
        </trans-unit>
        <trans-unit id="a8bb1e5ad4fcbd12edf8be28ae56bee14e6f545c" translate="yes" xml:space="preserve">
          <source>Tie::File - Access the lines of a disk file via a Perl array</source>
          <target state="translated">Tie::File-Perl 配列を使ってディスクファイルの行にアクセスする</target>
        </trans-unit>
        <trans-unit id="dc17380e1c5c0cb9aaf50a1f92e76e8ea993f448" translate="yes" xml:space="preserve">
          <source>Tie::File calls &lt;code&gt;binmode&lt;/code&gt; on filehandles that it opens internally, but not on filehandles passed in by the user. For consistency, especially if using the tied files cross-platform, you may wish to call &lt;code&gt;binmode&lt;/code&gt; on the filehandle prior to tying the file.</source>
          <target state="translated">Tie :: Fileは、内部で開くファイルハンドルで &lt;code&gt;binmode&lt;/code&gt; を呼び出しますが、ユーザーから渡されたファイルハンドルでは呼び出しません。一貫性を保つために、特にクロスプラットフォームで結合ファイルを使用する場合は、ファイルを結合する前にファイルハンドルで &lt;code&gt;binmode&lt;/code&gt; を呼び出すことをお勧めします。</target>
        </trans-unit>
        <trans-unit id="6319e96a453cce98221083d4f3fd8db235526699" translate="yes" xml:space="preserve">
          <source>Tie::Handle</source>
          <target state="translated">Tie::Handle</target>
        </trans-unit>
        <trans-unit id="0a548ea9945566563847425cd86bcbb7a0d010cc" translate="yes" xml:space="preserve">
          <source>Tie::Handle - base class definitions for tied handles</source>
          <target state="translated">Tie::Handle-タイドハンドルの基底クラス定義</target>
        </trans-unit>
        <trans-unit id="cd52c37918e2c0b25f36b5f416810f9f4f61d1e1" translate="yes" xml:space="preserve">
          <source>Tie::Hash</source>
          <target state="translated">Tie::Hash</target>
        </trans-unit>
        <trans-unit id="b1f9afc2a333da12fb6b6ad2b6d5e266f06e1fc4" translate="yes" xml:space="preserve">
          <source>Tie::Hash, Tie::StdHash, Tie::ExtraHash - base class definitions for tied hashes</source>
          <target state="translated">Tie::Hash,Tie::StdHash,Tie::ExtraHash-タイドハッシュの基底クラス定義</target>
        </trans-unit>
        <trans-unit id="c8d3a75ba1b0a3910318dc42acaa46468a63fedd" translate="yes" xml:space="preserve">
          <source>Tie::Hash::NamedCapture</source>
          <target state="translated">Tie::Hash::NamedCapture</target>
        </trans-unit>
        <trans-unit id="fe35d5fd9c32e90217b32911caa7181fd20d6a89" translate="yes" xml:space="preserve">
          <source>Tie::Hash::NamedCapture - Named regexp capture buffers</source>
          <target state="translated">Tie::Hash::NamedCapture-名前付き正規表現キャプチャバッファ</target>
        </trans-unit>
        <trans-unit id="703b368dc238bcde88f5095c837de68b527d723e" translate="yes" xml:space="preserve">
          <source>Tie::Memoize</source>
          <target state="translated">Tie::Memoize</target>
        </trans-unit>
        <trans-unit id="7b3289a8b6604631463790d9f588d4dd69111f3a" translate="yes" xml:space="preserve">
          <source>Tie::Memoize - add data to hash when needed</source>
          <target state="translated">Tie::Memoize-必要に応じてハッシュにデータを追加する</target>
        </trans-unit>
        <trans-unit id="aeeb15286d4bc809144814ad40c79ee05c416c3a" translate="yes" xml:space="preserve">
          <source>Tie::RefHash</source>
          <target state="translated">Tie::RefHash</target>
        </trans-unit>
        <trans-unit id="4bb364c89cbd37ee3daa5c39771c2605b0633761" translate="yes" xml:space="preserve">
          <source>Tie::RefHash - use references as hash keys</source>
          <target state="translated">Tie::RefHash-参照をハッシュキーとして使用する</target>
        </trans-unit>
        <trans-unit id="fb9e6a1ad57553eb30c0b9f049adcbf5c6d8c3ed" translate="yes" xml:space="preserve">
          <source>Tie::Scalar</source>
          <target state="translated">Tie::Scalar</target>
        </trans-unit>
        <trans-unit id="14241eaa440004f0f7b17e76185eebd008e2584c" translate="yes" xml:space="preserve">
          <source>Tie::Scalar vs Tie::StdScalar</source>
          <target state="translated">Tie::Scalar vs Tie::StdScalar</target>
        </trans-unit>
        <trans-unit id="9c8072ce734013166993c6f0143dd7123d88fcc5" translate="yes" xml:space="preserve">
          <source>Tie::Scalar, Tie::StdScalar - base class definitions for tied scalars</source>
          <target state="translated">Tie::Scalar,Tie::StdScalar-紐付きスカラの基底クラス定義</target>
        </trans-unit>
        <trans-unit id="24703e371c3e7f945d3b78d21edd36185f76ca6e" translate="yes" xml:space="preserve">
          <source>Tie::StdHandle</source>
          <target state="translated">Tie::StdHandle</target>
        </trans-unit>
        <trans-unit id="a6e6391cf784418a4b559abce054165c18d48250" translate="yes" xml:space="preserve">
          <source>Tie::StdHandle - base class definitions for tied handles</source>
          <target state="translated">Tie::StdHandle-タイドハンドルの基底クラス定義</target>
        </trans-unit>
        <trans-unit id="2f3439068e890141de6922d6924a5c42144d9aab" translate="yes" xml:space="preserve">
          <source>Tie::SubstrHash</source>
          <target state="translated">Tie::SubstrHash</target>
        </trans-unit>
        <trans-unit id="6980b3892c06ab7d2c795b8a0449ed68a3aed6bd" translate="yes" xml:space="preserve">
          <source>Tie::SubstrHash - Fixed-table-size, fixed-key-length hashing</source>
          <target state="translated">Tie::SubstrHash-固定テーブルサイズ、固定キー長ハッシュ</target>
        </trans-unit>
        <trans-unit id="464ee826aae53453c130a0c1497f3c4ca331982d" translate="yes" xml:space="preserve">
          <source>Tied access to ndbm files</source>
          <target state="translated">ndbmファイルへのアクセスを紐付け</target>
        </trans-unit>
        <trans-unit id="8a33955c62ec97774e8693644b322775bd7663ae" translate="yes" xml:space="preserve">
          <source>Tied access to odbm files</source>
          <target state="translated">odbmファイルへの紐付きアクセス</target>
        </trans-unit>
        <trans-unit id="1588828c9e5b2bd88f7d08cd7f3e57f7ec8ffbf5" translate="yes" xml:space="preserve">
          <source>Tied access to sdbm files</source>
          <target state="translated">sdbmファイルへの紐付きアクセス</target>
        </trans-unit>
        <trans-unit id="1720e98baff7940aea5456c5ab89cbd8f4faa4be" translate="yes" xml:space="preserve">
          <source>Tied filehandles are still incomplete. sysopen(), truncate(), flock(), fcntl(), stat() and -X can't currently be trapped.</source>
          <target state="translated">sysopen(),truncate(),flock(),fcntl(),stat(),-X は現在のところトラップできません。</target>
        </trans-unit>
        <trans-unit id="4b7baf020a5c394ffec94a6c51412ee34b96cd55" translate="yes" xml:space="preserve">
          <source>Tied hash interface</source>
          <target state="translated">タイドハッシュインタフェース</target>
        </trans-unit>
        <trans-unit id="45a90cde1e783db9283275e5312c014bb1cb705f" translate="yes" xml:space="preserve">
          <source>Tied hash/array slices cause multiple FETCH/STORE pairs, there are no tie methods for slice operations.</source>
          <target state="translated">タイドハッシュ/配列スライスは複数のFETCH/STOREペアを発生させ、スライス操作のためのタイドメソッドはありません。</target>
        </trans-unit>
        <trans-unit id="44a21f1b3d2e469d8d4dbb6af794f7ad93c019a6" translate="yes" xml:space="preserve">
          <source>Tied hashes and arrays are magical beasts of the &lt;code&gt;PERL_MAGIC_tied&lt;/code&gt; magic type.</source>
          <target state="translated">タイハッシュと配列は、 &lt;code&gt;PERL_MAGIC_tied&lt;/code&gt; マジックタイプの魔法の獣です。</target>
        </trans-unit>
        <trans-unit id="83884faf685c9098ec150488288e4d48b3ce8cb8" translate="yes" xml:space="preserve">
          <source>Tied hashes may have a different ordering behaviour to perl's hash implementation.</source>
          <target state="translated">タイドハッシュはPerlのハッシュの実装とは異なる順序の振る舞いをするかもしれません。</target>
        </trans-unit>
        <trans-unit id="d3d1d3d65efd2c22754237fd41c0e585f040ec15" translate="yes" xml:space="preserve">
          <source>Tied hashes may have their own ordering and algorithmic complexity attacks.</source>
          <target state="translated">縛られたハッシュには、独自の順序付けやアルゴリズムの複雑さを利用した攻撃があるかもしれません。</target>
        </trans-unit>
        <trans-unit id="24b5ed066516a43ed14f22509aac06d08e585ed9" translate="yes" xml:space="preserve">
          <source>Ties are handled by choosing the first handler.</source>
          <target state="translated">タイは最初のハンドラーを選ぶことで対応しています。</target>
        </trans-unit>
        <trans-unit id="64d5dd10fdcd493eede6caa7c5fa5f02730895e8" translate="yes" xml:space="preserve">
          <source>Tim Bunce and Charles Bailey. Currently maintained by David Landgren &amp;lt;</source>
          <target state="translated">ティム・バンスとチャールズ・ベイリー。現在、David Landgrenによって保守されています&amp;lt;</target>
        </trans-unit>
        <trans-unit id="3ddc0a76c09f699fa94ee0a72995b7039d633486" translate="yes" xml:space="preserve">
          <source>Tim Bunce, 11 August 1994.</source>
          <target state="translated">ティム・バンセ 1994年8月11日</target>
        </trans-unit>
        <trans-unit id="8cf374401e16921c8b9927b27c7d0a5e707f664a" translate="yes" xml:space="preserve">
          <source>Tim Bunce, 2nd June 1995.</source>
          <target state="translated">ティム・バンセ 1995年6月2日</target>
        </trans-unit>
        <trans-unit id="3175b9a598f6f77b48765e43cfb7cd7d7b509655" translate="yes" xml:space="preserve">
          <source>Tim Jenness</source>
          <target state="translated">ティム・ジェンネス</target>
        </trans-unit>
        <trans-unit id="99e549517dd29d09a287dd50b24a5bc08370dba4" translate="yes" xml:space="preserve">
          <source>Tim Jenness &amp;lt;t.jenness@jach.hawaii.edu&amp;gt;</source>
          <target state="translated">ティム・ジェネス&amp;lt;t.jenness@jach.hawaii.edu&amp;gt;</target>
        </trans-unit>
        <trans-unit id="ba097d23c99b23a50efd8f2fea03c845fd6c6c33" translate="yes" xml:space="preserve">
          <source>Tim Jenness &amp;lt;t.jenness@jach.hawaii.edu&amp;gt; provided &lt;code&gt;pod_where&lt;/code&gt; and &lt;code&gt;contains_pod&lt;/code&gt; .</source>
          <target state="translated">Tim Jenness &amp;lt;t.jenness@jach.hawaii.edu&amp;gt;が &lt;code&gt;pod_where&lt;/code&gt; と &lt;code&gt;contains_pod&lt;/code&gt; を提供しました。</target>
        </trans-unit>
        <trans-unit id="b514fb185ee4318cecaed2812ba7869208c66528" translate="yes" xml:space="preserve">
          <source>Tim Jenness &amp;lt;tjenness@cpan.org&amp;gt;</source>
          <target state="translated">ティム・ジェネス&amp;lt;tjenness@cpan.org&amp;gt;</target>
        </trans-unit>
        <trans-unit id="1869a3cb31c7d1aee298b5966f09e01ff91380af" translate="yes" xml:space="preserve">
          <source>Tim Jenness, &amp;lt;t.jenness@jach.hawaii.edu&amp;gt;, Christian Soeller, &amp;lt;csoelle@mph.auckland.ac.nz&amp;gt;, Hugo van der Sanden &amp;lt;hv@crypt.compulink.co.uk&amp;gt;, Andrew Main (Zefram) &amp;lt;zefram@fysh.org&amp;gt;</source>
          <target state="translated">ティム・ジェネス、&amp;lt;t.jenness@jach.hawaii.edu&amp;gt;、クリスチャン・ソラー、&amp;lt;csoelle@mph.auckland.ac.nz&amp;gt;、ヒューゴ・ファン・デル・サンデン&amp;lt;hv@crypt.compulink.co.uk&amp;gt;、アンドリュー・メイン（ゼフラム）&amp;lt;zefram@fysh.org&amp;gt;</target>
        </trans-unit>
        <trans-unit id="93e2988b00d7b32dc16eda9dda1443c70d8e538b" translate="yes" xml:space="preserve">
          <source>Tim.Bunce (at) ig.co.uk</source>
          <target state="translated">Tim.Bunce (at)ig.co.uk</target>
        </trans-unit>
        <trans-unit id="d077aa36842cc868f42990d7049841ea88af7d34" translate="yes" xml:space="preserve">
          <source>Tim.Bunce@ig.co.uk</source>
          <target state="translated">Tim.Bunce@ig.co.uk</target>
        </trans-unit>
        <trans-unit id="e4179a3f25309044bcb58d588fe8e8bd90fd67c9" translate="yes" xml:space="preserve">
          <source>Time COUNT iterations of CODE. CODE may be a string to eval or a code reference; either way the CODE will run in the caller's package. Results will be printed to STDOUT as TITLE followed by the times. TITLE defaults to &quot;timethis COUNT&quot; if none is provided. STYLE determines the format of the output, as described for timestr() below.</source>
          <target state="translated">CODE の時間 COUNT 反復回数。CODEはevalするための文字列かコード参照です。結果はTITLEとしてSTDOUTに表示されます。TITLEは、何も与えられなければ &quot;timethis COUNT &quot;がデフォルトである。STYLEは、以下のtimestr()で説明されているように、出力のフォーマットを決定します。</target>
        </trans-unit>
        <trans-unit id="3b32a6d9639a8d4119ec2ee525234d95d8857ca9" translate="yes" xml:space="preserve">
          <source>Time and Date</source>
          <target state="translated">日時</target>
        </trans-unit>
        <trans-unit id="ba899f435a04612971ed3cd90f1a2814efd01889" translate="yes" xml:space="preserve">
          <source>Time and daytime network client interface</source>
          <target state="translated">時間と日中のネットワーククライアントインターフェース</target>
        </trans-unit>
        <trans-unit id="91258f8a07507a00e4da6f106ca4198c6edce78f" translate="yes" xml:space="preserve">
          <source>Time-related functions</source>
          <target state="translated">時間に関連する機能</target>
        </trans-unit>
        <trans-unit id="ac91bba7fcbd91c8d367a4f56e1aba373023bebd" translate="yes" xml:space="preserve">
          <source>Time::HiRes</source>
          <target state="translated">Time::HiRes</target>
        </trans-unit>
        <trans-unit id="e7a9e6eb81fae6fdb1dc6f6133fdfcde6d6d2e8f" translate="yes" xml:space="preserve">
          <source>Time::HiRes - High resolution alarm, sleep, gettimeofday, interval timers</source>
          <target state="translated">Time::HiRes-高解像度アラーム、スリープ、gettimeofday、インターバルタイマー</target>
        </trans-unit>
        <trans-unit id="94df31ba192f82c8d905bfd5f68e42a860c364a4" translate="yes" xml:space="preserve">
          <source>Time::Local</source>
          <target state="translated">Time::Local</target>
        </trans-unit>
        <trans-unit id="f389186d9b9640e798d2c3270420ee058c982a8f" translate="yes" xml:space="preserve">
          <source>Time::Local - Efficiently compute time from local and GMT time</source>
          <target state="translated">Time::Local-ローカルおよび GMT 時間から効率的に時間を計算する</target>
        </trans-unit>
        <trans-unit id="068e2f4f422dc17d00b1dbbf4d66d078ee8c1c17" translate="yes" xml:space="preserve">
          <source>Time::Local - efficiently compute time from local and GMT time</source>
          <target state="translated">Time::Local-ローカルおよび GMT 時間から効率的に時間を計算する</target>
        </trans-unit>
        <trans-unit id="0a2a9a0e5d10ea8cd730c55ab8fbc21a6da6bc46" translate="yes" xml:space="preserve">
          <source>Time::Piece</source>
          <target state="translated">Time::Piece</target>
        </trans-unit>
        <trans-unit id="3b1c89f6e740fb1373ec42ee463919eaf109abbc" translate="yes" xml:space="preserve">
          <source>Time::Piece - Object Oriented time objects</source>
          <target state="translated">Time::Piece-オブジェクト指向の時間オブジェクト</target>
        </trans-unit>
        <trans-unit id="ac2e609ce173a3276a7464b9debe21218246f96d" translate="yes" xml:space="preserve">
          <source>Time::Piece has a built-in strptime() function (from FreeBSD), allowing you incredibly flexible date parsing routines. For example:</source>
          <target state="translated">Time::Piece には (FreeBSD の)strptime()関数が組み込まれており、信じられないほど柔軟な日付解析ルーチンを利用することができます。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="6fb89f7a383c83046c2d6e7aeb455a015e9f82bc" translate="yes" xml:space="preserve">
          <source>Time::Piece::strptime by default can only parse American English date names. Meanwhile, Time::Piece-&amp;gt;strftime() will return date names that use the current configured system locale. This means dates returned by strftime might not be able to be parsed by strptime. This is the default behavior and can be overridden by calling Time::Piece-&amp;gt;use_locale(). This builds a list of the current locale's day and month names which strptime will use to parse with. Note this is a global override and will affect all Time::Piece instances.</source>
          <target state="translated">Time :: Piece :: strptimeは、デフォルトではアメリカ英語の日付名のみを解析できます。一方、Time :: Piece-&amp;gt; strftime（）は、現在構成されているシステムロケールを使用する日付名を返します。これは、strftimeによって返される日付がstrptimeによって解析できない可能性があることを意味します。これはデフォルトの動作であり、Time :: Piece-&amp;gt; use_locale（）を呼び出すことでオーバーライドできます。これにより、strptimeが解析に使用する現在のロケールの日と月の名前のリストが作成されます。これはグローバルオーバーライドであり、すべてのTime :: Pieceインスタンスに影響することに注意してください。</target>
        </trans-unit>
        <trans-unit id="d40344d994e23d7372c530bbf0bbd03eeb00a6dc" translate="yes" xml:space="preserve">
          <source>Time::Seconds</source>
          <target state="translated">Time::Seconds</target>
        </trans-unit>
        <trans-unit id="39f6129fd39e3df4fcacf60c5d99f5c6192c805d" translate="yes" xml:space="preserve">
          <source>Time::Seconds - a simple API to convert seconds to other date values</source>
          <target state="translated">Time::Seconds-秒を他の日付値に変換するシンプルな API</target>
        </trans-unit>
        <trans-unit id="cbf1ec1195a651fc24927b61f20ae1c2b1743372" translate="yes" xml:space="preserve">
          <source>Time::Seconds also exports the following constants:</source>
          <target state="translated">Time::Secondsは、以下の定数もエクスポートします。</target>
        </trans-unit>
        <trans-unit id="16d75647463ccb98ccc9ac22ce0d58439164ffe1" translate="yes" xml:space="preserve">
          <source>Time::gmtime</source>
          <target state="translated">Time::gmtime</target>
        </trans-unit>
        <trans-unit id="ca443191990262bcf077810f460d0cd5da0a2497" translate="yes" xml:space="preserve">
          <source>Time::gmtime - by-name interface to Perl's built-in gmtime() function</source>
          <target state="translated">Time::gmtime-Perl の組み込み関数 gmtime()への名前によるインターフェース</target>
        </trans-unit>
        <trans-unit id="1e32398fc4863ae4d240a706fe6661194fea16dc" translate="yes" xml:space="preserve">
          <source>Time::localtime</source>
          <target state="translated">Time::localtime</target>
        </trans-unit>
        <trans-unit id="1c04f7003a511410fc2dc340400d8f81416e8250" translate="yes" xml:space="preserve">
          <source>Time::localtime - by-name interface to Perl's built-in localtime() function</source>
          <target state="translated">Time::localtime-Perl の組み込み localtime()関数への名前によるインターフェイス</target>
        </trans-unit>
        <trans-unit id="de41baa484e46c7cf981eab70afe99b8805cc8b2" translate="yes" xml:space="preserve">
          <source>Time::tm</source>
          <target state="translated">Time::tm</target>
        </trans-unit>
        <trans-unit id="21f72c1b3c5d75c7e3444254a7622f9392f93a3d" translate="yes" xml:space="preserve">
          <source>Time::tm - internal object used by Time::gmtime and Time::localtime</source>
          <target state="translated">Time::tm-Time::gmtime と Time::localtime が使用する内部オブジェクト.</target>
        </trans-unit>
        <trans-unit id="e368ab9a5fbb03e74a7f8b310c3fe08ae2271a05" translate="yes" xml:space="preserve">
          <source>TimeOut</source>
          <target state="translated">TimeOut</target>
        </trans-unit>
        <trans-unit id="d4c45de0fe64ac43c72a798c67faaadadfaa1b90" translate="yes" xml:space="preserve">
          <source>Timeout</source>
          <target state="translated">Timeout</target>
        </trans-unit>
        <trans-unit id="bf885321e4853536c53ad9a2c9930e27e148e561" translate="yes" xml:space="preserve">
          <source>Timeout =&amp;gt; NUM</source>
          <target state="translated">タイムアウト=&amp;gt; NUM</target>
        </trans-unit>
        <trans-unit id="c46821e5334d7cbbbeb412cbbc4fae07b635b35c" translate="yes" xml:space="preserve">
          <source>Timeout I/O.</source>
          <target state="translated">タイムアウトI/O。</target>
        </trans-unit>
        <trans-unit id="ca2b6328d392947cda8eed37cd6fd0fce114f5ab" translate="yes" xml:space="preserve">
          <source>Timeout for inactivity during {Makefile,Build}.PL?</source>
          <target state="translated">Makefile,Build}.PL中の非アクティブ時のタイムアウト?</target>
        </trans-unit>
        <trans-unit id="6202f67c7c444f6f4c73b3c31ad99a53b9159e1b" translate="yes" xml:space="preserve">
          <source>Timeout for parsing module versions?</source>
          <target state="translated">モジュールのバージョンを解析するためのタイムアウト?</target>
        </trans-unit>
        <trans-unit id="7b97ea2213b8941cebfb4eaa8bbbb9bd0bba9f0a" translate="yes" xml:space="preserve">
          <source>Tiny set of tools for unfortunate souls who cannot use</source>
          <target state="translated">使えない不幸な魂のための小さな道具のセット</target>
        </trans-unit>
        <trans-unit id="eb3cc8be33f220718da61643e6e0bc1c501663fd" translate="yes" xml:space="preserve">
          <source>Tips and Techniques</source>
          <target state="translated">コツとテクニック</target>
        </trans-unit>
        <trans-unit id="092da30065f07adb4a08c52dc1aaf646aa06aee4" translate="yes" xml:space="preserve">
          <source>Tips and Tricks</source>
          <target state="translated">ヒントとコツ</target>
        </trans-unit>
        <trans-unit id="f7fb128ab2b2b606667607db6ec0f87259f7a1e5" translate="yes" xml:space="preserve">
          <source>Titlecase</source>
          <target state="translated">Titlecase</target>
        </trans-unit>
        <trans-unit id="eb5cc0f84fc345c602dd1accf23180e03ce108cd" translate="yes" xml:space="preserve">
          <source>Tk</source>
          <target state="translated">Tk</target>
        </trans-unit>
        <trans-unit id="767ea1b5d1e2d80e5699c6649ded795c6b5cad19" translate="yes" xml:space="preserve">
          <source>To (en|de)code encodings marked by &lt;code&gt;(**)&lt;/code&gt;, you need &lt;code&gt;Encode::HanExtra&lt;/code&gt;, available from CPAN.</source>
          <target state="translated">&lt;code&gt;(**)&lt;/code&gt; でマークされたエンコーディングを（ &lt;code&gt;Encode::HanExtra&lt;/code&gt; 、CPANから入手できるEncode :: HanExtraが必要です。</target>
        </trans-unit>
        <trans-unit id="75e9f1113dd228531b5734915ff74dd66ea601f0" translate="yes" xml:space="preserve">
          <source>To (re)open &lt;code&gt;STDOUT&lt;/code&gt; or &lt;code&gt;STDERR&lt;/code&gt; as an in-memory file, close it first:</source>
          <target state="translated">&lt;code&gt;STDOUT&lt;/code&gt; または &lt;code&gt;STDERR&lt;/code&gt; をメモリ内ファイルとして（再）開くには、まずそれを閉じます。</target>
        </trans-unit>
        <trans-unit id="7a790472031c710be009a7b4a42a45592085ee5d" translate="yes" xml:space="preserve">
          <source>To OO or not to OO?</source>
          <target state="translated">OOするかしないか?</target>
        </trans-unit>
        <trans-unit id="2e5fb83e42913577879316262366950ec7aec439" translate="yes" xml:space="preserve">
          <source>To access servers outside these type of firewalls with perl, you need Net::FTP.</source>
          <target state="translated">これらのタイプのファイアウォール外のサーバにperlでアクセスするには、Net::FTPが必要です。</target>
        </trans-unit>
        <trans-unit id="9715ff5bc3ceda6802c5265803ef21d4705c83eb" translate="yes" xml:space="preserve">
          <source>To access servers outside these types of firewalls with perl (even for ftp), you need LWP or HTTP::Tiny.</source>
          <target state="translated">これらのタイプのファイアウォール外のサーバにperlでアクセスするには(ftpでも)、LWPかHTTP::Tinyが必要です。</target>
        </trans-unit>
        <trans-unit id="75353a5a7f7320bec3542821474a8dbab7c8c12c" translate="yes" xml:space="preserve">
          <source>To access the actual value that an SV points to, you can use the macros:</source>
          <target state="translated">SV が指す実際の値にアクセスするには、マクロを使用することができます。</target>
        </trans-unit>
        <trans-unit id="18ca46dd427588f094e1ba9ca5a38e797fcd2ac7" translate="yes" xml:space="preserve">
          <source>To access this functionality without the core overrides, pass the &lt;code&gt;&lt;a href=&quot;../functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; an empty import list, and then access function functions with their full qualified names. On the other hand, the built-ins are still available via the &lt;code&gt;CORE::&lt;/code&gt; pseudo-package.</source>
          <target state="translated">コアオーバーライドなしでこの機能にアクセス &lt;code&gt;&lt;a href=&quot;../functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; 、空のインポートリストを使用して渡し、完全修飾名で関数関数にアクセスします。一方、ビルトインは &lt;code&gt;CORE::&lt;/code&gt; 疑似パッケージを介して引き続き利用できます。</target>
        </trans-unit>
        <trans-unit id="dca3331d12806630976595e1bbb7790e715a99c2" translate="yes" xml:space="preserve">
          <source>To access this functionality without the core overrides, pass the &lt;code&gt;&lt;a href=&quot;../functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; an empty import list, and then access function functions with their full qualified names. The built-ins are always still available via the &lt;code&gt;CORE::&lt;/code&gt; pseudo-package.</source>
          <target state="translated">コアオーバーライドなしでこの機能にアクセス &lt;code&gt;&lt;a href=&quot;../functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; 、空のインポートリストを使用して渡し、完全修飾名で関数関数にアクセスします。ビルトインは引き続き &lt;code&gt;CORE::&lt;/code&gt; 疑似パッケージから引き続き利用できます。</target>
        </trans-unit>
        <trans-unit id="00d7f9df22362a2f3c85b921564fc19258d8388c" translate="yes" xml:space="preserve">
          <source>To access this functionality without the core overrides, pass the &lt;code&gt;use&lt;/code&gt; an empty import list, and then access function functions with their full qualified names. On the other hand, the built-ins are still available via the &lt;code&gt;CORE::&lt;/code&gt; pseudo-package.</source>
          <target state="translated">コアオーバーライドなしでこの機能にアクセス &lt;code&gt;use&lt;/code&gt; 、空のインポートリストの使用を渡してから、完全修飾名を使用して関数関数にアクセスします。一方、ビルトインは &lt;code&gt;CORE::&lt;/code&gt; pseudo-packageから引き続き利用できます。</target>
        </trans-unit>
        <trans-unit id="8104695610bb754f8e946466b35dfbf1827c0fd9" translate="yes" xml:space="preserve">
          <source>To access this functionality without the core overrides, pass the &lt;code&gt;use&lt;/code&gt; an empty import list, and then access function functions with their full qualified names. The built-ins are always still available via the &lt;code&gt;CORE::&lt;/code&gt; pseudo-package.</source>
          <target state="translated">コアオーバーライドなしでこの機能にアクセス &lt;code&gt;use&lt;/code&gt; 、空のインポートリストの使用を渡してから、完全修飾名を使用して関数関数にアクセスします。ビルトインは、 &lt;code&gt;CORE::&lt;/code&gt; 疑似パッケージを介して常に利用できます。</target>
        </trans-unit>
        <trans-unit id="ce78b43e2a908e0a4f8a1b6833f38009e23883a3" translate="yes" xml:space="preserve">
          <source>To accomplish this behaviour, simply specify an array reference as the destination for the option:</source>
          <target state="translated">この動作を実現するには、単に配列参照をオプシ ョ ンの送信先 と し て指定すればよいのです。</target>
        </trans-unit>
        <trans-unit id="f61067f007c7ba160effec3a91d355b4f290080e" translate="yes" xml:space="preserve">
          <source>To actually alter the visible command line, you can assign to the variable $0 as documented in &lt;a href=&quot;perlvar&quot;&gt;perlvar&lt;/a&gt;. This won't work on all operating systems, though. Daemon programs like sendmail place their state there, as in:</source>
          <target state="translated">表示されるコマンドラインを実際に変更するには、&lt;a href=&quot;perlvar&quot;&gt;perlvarに&lt;/a&gt;記載されているように、変数$ 0を割り当てます。ただし、これはすべてのオペレーティングシステムで動作するわけではありません。sendmailのようなデーモンプログラムは、次のように状態をそこに配置します。</target>
        </trans-unit>
        <trans-unit id="e6257d01bcff432617bc3aaafa5362a537c023ed" translate="yes" xml:space="preserve">
          <source>To actually do the magic method call, we have to call a subroutine in Perl space: &lt;code&gt;call_method&lt;/code&gt; takes care of that, and it's described in &lt;a href=&quot;perlcall&quot;&gt;perlcall&lt;/a&gt;. We call the &lt;code&gt;PUSH&lt;/code&gt; method in scalar context, and we're going to discard its return value. The call_method() function removes the top element of the mark stack, so there is nothing for the caller to clean up.</source>
          <target state="translated">実際に魔法のメソッド呼び出しを行うために、我々は、Perlの空間でサブルーチンを呼び出す必要があり： &lt;code&gt;call_method&lt;/code&gt; はそれの世話をする、それはで説明しています&lt;a href=&quot;perlcall&quot;&gt;perlcall&lt;/a&gt;。スカラーコンテキストで &lt;code&gt;PUSH&lt;/code&gt; メソッドを呼び出し、その戻り値を破棄します。call_method（）関数はマークスタックの一番上の要素を削除するため、呼び出し側がクリーンアップする必要はありません。</target>
        </trans-unit>
        <trans-unit id="6122d22a4decb5ce34478a60d87283b09ca23b69" translate="yes" xml:space="preserve">
          <source>To actually run a script set-id, if you don't have the safe version of set-id scripts, you'll need to put a C wrapper around the script. A C wrapper is just a compiled program that does nothing except call your Perl program. Compiled programs are not subject to the kernel bug that plagues set-id scripts. Here's a simple wrapper, written in C:</source>
          <target state="translated">実際に set-id スクリプトを実行するには、安全なバージョンの set-id スクリプトを持っていない場合は、スクリプトの周りに C ラッパーを置く必要があります。C ラッパーはコンパイルされたプログラムで、Perl プログラムを呼び出す以外は何もしません。コンパイルされたプログラムは set-id スクリプトを悩ませるカーネルバグの影響を受けません。以下に C で書かれた簡単なラッパーを示します。</target>
        </trans-unit>
        <trans-unit id="2c5d4ebd8ab0875fd7f6df0d61ffd7b676158145" translate="yes" xml:space="preserve">
          <source>To add a new alias to a given encoding, use:</source>
          <target state="translated">与えられたエンコーディングに新しいエイリアスを追加するには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="504c5fdbd3b3208314b10451eb998ac1dfbb6a34" translate="yes" xml:space="preserve">
          <source>To add lines before a certain line, you can add a line (or lines!) before Perl prints &lt;code&gt;$_&lt;/code&gt; :</source>
          <target state="translated">特定の行の前に行を追加するには、Perlが &lt;code&gt;$_&lt;/code&gt; 出力する前に行を追加できます。</target>
        </trans-unit>
        <trans-unit id="664ca3b18fd212ce34e3ecc1b835f5946d711935" translate="yes" xml:space="preserve">
          <source>To add lines before a certain line, you can add a line (or lines!) before Perl prints &lt;code&gt;$_&lt;/code&gt;:</source>
          <target state="translated">特定の行の前に行を追加するには、Perlが &lt;code&gt;$_&lt;/code&gt; 出力する前に1行（または複数行！）を追加できます。</target>
        </trans-unit>
        <trans-unit id="41c5424e693984510192a96a5bd33b04a6c7bcb7" translate="yes" xml:space="preserve">
          <source>To add one to something automatically, hence the name of the &lt;code&gt;++&lt;/code&gt; operator. To instead subtract one from something automatically is known as an &amp;ldquo;autodecrement&amp;rdquo;.</source>
          <target state="translated">何かに自動的に追加するため、 &lt;code&gt;++&lt;/code&gt; 演算子の名前。代わりに何かから1を自動的に減算することを「オートデクリメント」といいます。</target>
        </trans-unit>
        <trans-unit id="62767b0d851017800baeabeacc96e05ce69f9c80" translate="yes" xml:space="preserve">
          <source>To add to user-friendliness, our server prompts the user for commands. Most servers don't do this. Because of the prompt without a newline, you'll have to use the &lt;code&gt;&lt;a href=&quot;functions/sysread&quot;&gt;sysread&lt;/a&gt;&lt;/code&gt; variant of the interactive client above.</source>
          <target state="translated">ユーザーフレンドリーに追加するために、サーバーはユーザーにコマンドを要求します。ほとんどのサーバーはこれを行いません。改行なしのプロンプトのため、上記のインタラクティブクライアントの &lt;code&gt;&lt;a href=&quot;functions/sysread&quot;&gt;sysread&lt;/a&gt;&lt;/code&gt; バリアントを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="2982163185a13aaba90c2350554d80613d204e6d" translate="yes" xml:space="preserve">
          <source>To add to user-friendliness, our server prompts the user for commands. Most servers don't do this. Because of the prompt without a newline, you'll have to use the &lt;code&gt;sysread&lt;/code&gt; variant of the interactive client above.</source>
          <target state="translated">使いやすさを増すために、サーバーはユーザーにコマンドの入力を求めます。ほとんどのサーバーはこれを行いません。改行のないプロンプトのため、上記の対話型クライアントの &lt;code&gt;sysread&lt;/code&gt; バリアントを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="0c2508ff4f655eadc6c615c0836ceada22445901" translate="yes" xml:space="preserve">
          <source>To address these deficiencies, the concept of locales was invented (formally the ISO C, XPG4, POSIX 1.c &quot;locale system&quot;). And applications were and are being written that use the locale mechanism. The process of making such an application take account of its users' preferences in these kinds of matters is called &lt;b&gt;internationalization&lt;/b&gt; (often abbreviated as &lt;b&gt;i18n&lt;/b&gt;); telling such an application about a particular set of preferences is known as &lt;b&gt;localization&lt;/b&gt; (&lt;b&gt;l10n&lt;/b&gt;).</source>
          <target state="translated">これらの欠点に対処するために、ロケールの概念が考案されました（以前はISO C、XPG4、POSIX 1.c「ロケールシステム」）。また、ロケールメカニズムを使用するアプリケーションが作成され、作成されています。このようなアプリケーションがこれらの種類の問題におけるユーザーの好みを考慮に入れるプロセスは、&lt;b&gt;国際&lt;/b&gt;&lt;b&gt;化&lt;/b&gt;と呼ばれます（しばしば&lt;b&gt;i18nと&lt;/b&gt;省略されます）。このようなアプリケーションに特定の設定セットを&lt;b&gt;通知する&lt;/b&gt;ことを&lt;b&gt;ローカリゼーション&lt;/b&gt;（&lt;b&gt;l10n&lt;/b&gt;）といいます。</target>
        </trans-unit>
        <trans-unit id="38480288701c4661e4a26dcbd6037e4ac31c3101" translate="yes" xml:space="preserve">
          <source>To aid debugging, the source file</source>
          <target state="translated">デバッグを支援するために、ソースファイル</target>
        </trans-unit>
        <trans-unit id="b056ef758d989b19b1755b858981a3d1c4ee3ad4" translate="yes" xml:space="preserve">
          <source>To alleviate the second problem (partially) it is advised to write your scripts like this:</source>
          <target state="translated">2つ目の問題を(部分的に)緩和するには、以下のようにスクリプトを書くことをお勧めします。</target>
        </trans-unit>
        <trans-unit id="033bf41b49c5ad8519d831cfcfc92f95acf893c1" translate="yes" xml:space="preserve">
          <source>To allow programs to process arguments that look like switches, but aren't, both functions will stop processing switches when they see the argument &lt;code&gt;--&lt;/code&gt; . The &lt;code&gt;--&lt;/code&gt; will be removed from @ARGV.</source>
          <target state="translated">プログラムがスイッチのように見えてもそうではない引数を処理できるようにするために、両方の関数は、引数 &lt;code&gt;--&lt;/code&gt; を見るとスイッチの処理を停止します。 &lt;code&gt;--&lt;/code&gt; @ARGVから削除されます。</target>
        </trans-unit>
        <trans-unit id="26d2f668076a8bd4840d99c6ca84eae07eb71067" translate="yes" xml:space="preserve">
          <source>To allow programs to process arguments that look like switches, but aren't, both functions will stop processing switches when they see the argument &lt;code&gt;--&lt;/code&gt;. The &lt;code&gt;--&lt;/code&gt; will be removed from @ARGV.</source>
          <target state="translated">プログラムがスイッチのように見えるがそうではない引数を処理できるようにするために、両方の関数は引数を見るとスイッチの処理を停止します &lt;code&gt;--&lt;/code&gt; 。 &lt;code&gt;--&lt;/code&gt; @ARGVから削除されます。</target>
        </trans-unit>
        <trans-unit id="2288a81816c59a1de87c3ad78e6617983dda9fd7" translate="yes" xml:space="preserve">
          <source>To allow the XSUB for rpcb_gettime() to have a default host value the parameters to the XSUB could be rearranged. The XSUB will then call the real rpcb_gettime() function with the parameters in the correct order. This XSUB can be called from Perl with either of the following statements:</source>
          <target state="translated">rpcb_gettime()の XSUB がデフォルトのホスト値を持つようにするために、XSUB のパラメータを再編成することができます。これにより、XSUB はパラメータを正しい順番に並べて実際の rpcb_gettime()関数を呼び出します。このXSUBは、以下のステートメントのいずれかでPerlから呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="4bdd80dbd948c58cb0887db4e2666aa7ba8a1b77" translate="yes" xml:space="preserve">
          <source>To ask for the next layer down use PerlIONext(PerlIO *f).</source>
          <target state="translated">次のレイヤを求めるには、PerlIONext(PerlIO *f)を使用してください。</target>
        </trans-unit>
        <trans-unit id="5e82b72795636964d66437770c692b7d03ceb23b" translate="yes" xml:space="preserve">
          <source>To assign a specific &lt;b&gt;network address&lt;/b&gt; to a &lt;b&gt;socket&lt;/b&gt;.</source>
          <target state="translated">特定の&lt;b&gt;ネットワークアドレス&lt;/b&gt;を&lt;b&gt;ソケットに&lt;/b&gt;割り当てる。</target>
        </trans-unit>
        <trans-unit id="c2c2805d5269d7141c86f56aaf1c2c2a76a26622" translate="yes" xml:space="preserve">
          <source>To assist you &lt;code&gt;test_test&lt;/code&gt; can colour the background of the debug information to disambiguate the different types of output. The debug output will have its background coloured green and red. The green part represents the text which is the same between the executed and actual output, the red shows which part differs.</source>
          <target state="translated">&lt;code&gt;test_test&lt;/code&gt; を支援するために、デバッグ情報の背景に色を付けて、さまざまなタイプの出力を明確にすることができます。デバッグ出力の背景は緑と赤になります。緑の部分は実行された出力と実際の出力の間で同じであるテキストを表し、赤は異なる部分を示しています。</target>
        </trans-unit>
        <trans-unit id="e8e1cbea5e7824434cdf9fc699c75f29c54b93f0" translate="yes" xml:space="preserve">
          <source>To auto-detect and uncompress an RFC 1950 or RFC 1952 data stream (i.e. gzip), set &lt;code&gt;WindowBits&lt;/code&gt; to &lt;code&gt;WANT_GZIP_OR_ZLIB&lt;/code&gt; .</source>
          <target state="translated">RFC 1950またはRFC 1952データストリーム（gzipなど）を自動検出して解凍するには、 &lt;code&gt;WindowBits&lt;/code&gt; を &lt;code&gt;WANT_GZIP_OR_ZLIB&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="da07f070c84b91e83551c266e4da3f67a05bb198" translate="yes" xml:space="preserve">
          <source>To auto-detect and uncompress an RFC 1950 or RFC 1952 data stream (i.e. gzip), set &lt;code&gt;WindowBits&lt;/code&gt; to &lt;code&gt;WANT_GZIP_OR_ZLIB&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;WindowBits&lt;/code&gt; データストリーム（つまりgzip）を自動検出して解凍するには、WindowBitsを &lt;code&gt;WANT_GZIP_OR_ZLIB&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="0b525fdc47ff53e260dc0931cfbc7865b5eae8d3" translate="yes" xml:space="preserve">
          <source>To avoid ambiguity, when signatures are enabled the special syntax for prototypes is disabled. There is no attempt to guess whether a parenthesised group was intended to be a prototype or a signature. To give a subroutine a prototype under these circumstances, use a &lt;a href=&quot;attributes#Built-in-Attributes&quot;&gt;prototype attribute&lt;/a&gt;. For example,</source>
          <target state="translated">あいまいさを避けるために、署名が有効になっている場合、プロトタイプの特別な構文は無効になっています。かっこで囲まれたグループがプロトタイプまたは署名のどちらであるかを推測する試みはありません。このような状況でサブルーチンにプロトタイプを与えるには、&lt;a href=&quot;attributes#Built-in-Attributes&quot;&gt;プロトタイプ属性を&lt;/a&gt;使用します。例えば、</target>
        </trans-unit>
        <trans-unit id="409b9ee9e716af7051876e4ad525c073a4badea1" translate="yes" xml:space="preserve">
          <source>To avoid confusing would-be users of your code who are running earlier versions of Perl with mysterious failures, put this sort of thing at the top of your file to signal that your code will work</source>
          <target state="translated">以前のバージョンの Perl を実行しているユーザを混乱させないためには、あなたのコードが動作することを示すために、ファイルの先頭にこのようなことを書いてください。</target>
        </trans-unit>
        <trans-unit id="cdb270b498c0b4af5dad93d34e6e87c778aa6616" translate="yes" xml:space="preserve">
          <source>To avoid confusing would-be users of your code who are running earlier versions of Perl with mysterious syntax errors, put this sort of thing at the top of your file to signal that your code will work</source>
          <target state="translated">以前のバージョンのPerlを実行しているユーザを混乱させないために、あなたのコードが動作することを示すために、ファイルの先頭にこのようなことを書いてください。</target>
        </trans-unit>
        <trans-unit id="010f767fa3f7758e437e81843e72a2beb1516ec0" translate="yes" xml:space="preserve">
          <source>To avoid confusing would-be users of your code with mysterious syntax errors, put something like this at the top of your script:</source>
          <target state="translated">謎の構文エラーでコードのユーザーを混乱させないように、スクリプトの先頭に次のような記述をしてください。</target>
        </trans-unit>
        <trans-unit id="92c9a11d8c00dc701cc8cb47a28dac284fb7ca76" translate="yes" xml:space="preserve">
          <source>To avoid creating a new SV every time &lt;code&gt;SaveSub2&lt;/code&gt; is called, the function first checks to see if it has been called before. If not, then space for a new SV is allocated and the reference to the Perl subroutine &lt;code&gt;name&lt;/code&gt; is copied to the variable &lt;code&gt;keepSub&lt;/code&gt; in one operation using &lt;code&gt;newSVsv&lt;/code&gt; . Thereafter, whenever &lt;code&gt;SaveSub2&lt;/code&gt; is called, the existing SV, &lt;code&gt;keepSub&lt;/code&gt; , is overwritten with the new value using &lt;code&gt;SvSetSV&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;SaveSub2&lt;/code&gt; が呼び出されるたびに新しいSVが作成されるのを回避するために、関数は最初にそれが以前に呼び出されたかどうかを確認します。そうでなければ、新しいSVのためのスペースが割り当てられ、Perlのサブルーチンへの参照 &lt;code&gt;name&lt;/code&gt; 変数にコピーされ &lt;code&gt;keepSub&lt;/code&gt; 使用して一回の操作で &lt;code&gt;newSVsv&lt;/code&gt; を。いつでもその後、 &lt;code&gt;SaveSub2&lt;/code&gt; が呼ばれ、既存のSV、 &lt;code&gt;keepSub&lt;/code&gt; は、使用して、新しい値で上書きされ &lt;code&gt;SvSetSV&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="bb5249a309596988b57e0fd6c4b6cf1306fbd076" translate="yes" xml:space="preserve">
          <source>To avoid creating a new SV every time &lt;code&gt;SaveSub2&lt;/code&gt; is called, the function first checks to see if it has been called before. If not, then space for a new SV is allocated and the reference to the Perl subroutine &lt;code&gt;name&lt;/code&gt; is copied to the variable &lt;code&gt;keepSub&lt;/code&gt; in one operation using &lt;code&gt;newSVsv&lt;/code&gt;. Thereafter, whenever &lt;code&gt;SaveSub2&lt;/code&gt; is called, the existing SV, &lt;code&gt;keepSub&lt;/code&gt;, is overwritten with the new value using &lt;code&gt;SvSetSV&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SaveSub2&lt;/code&gt; が呼び出されるたびに新しいSVが作成されないようにするために、関数は最初に、以前に呼び出されたかどうかを確認します。そうでなければ、新しいSVのためのスペースが割り当てられ、Perlのサブルーチンへの参照 &lt;code&gt;name&lt;/code&gt; 変数にコピーされ &lt;code&gt;keepSub&lt;/code&gt; 使用して一回の操作で &lt;code&gt;newSVsv&lt;/code&gt; を。いつでもその後、 &lt;code&gt;SaveSub2&lt;/code&gt; が呼ばれ、既存のSV、 &lt;code&gt;keepSub&lt;/code&gt; は、使用して、新しい値で上書きされ &lt;code&gt;SvSetSV&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="7f1c469efc6b2f6bb3fb09ea0c807689f209337a" translate="yes" xml:space="preserve">
          <source>To avoid memory leaks, all trailing duplicate entries in @INC are removed.</source>
          <target state="translated">メモリリークを避けるために、@INCの末尾の重複エントリはすべて削除されます。</target>
        </trans-unit>
        <trans-unit id="fe0f91423917e2fcf830eb3362231efceaad6437" translate="yes" xml:space="preserve">
          <source>To avoid relying on an object's underlying representation, if the smartmatch's right operand is an object that doesn't overload &lt;code&gt;~~&lt;/code&gt; , it raises the exception &quot;&lt;code&gt;Smartmatching a non-overloaded object
breaks encapsulation&lt;/code&gt; &quot;. That's because one has no business digging around to see whether something is &quot;in&quot; an object. These are all illegal on objects without a &lt;code&gt;~~&lt;/code&gt; overload:</source>
          <target state="translated">オブジェクトの基になる表現に依存しないようにするには、smartmatchの右側のオペランドが &lt;code&gt;~~&lt;/code&gt; をオーバーロードしないオブジェクトである場合、例外「オーバーロードされていないオブジェクトを &lt;code&gt;Smartmatching a non-overloaded object breaks encapsulation&lt;/code&gt; 」が発生します。それは、何かがオブジェクトの「中に」あるかどうかを確認するためにビジネスを掘り下げる必要がないためです。これらは &lt;code&gt;~~&lt;/code&gt; オーバーロードのないオブジェクトではすべて無効です：</target>
        </trans-unit>
        <trans-unit id="c22d05674967c3bc15cf7ec7d92f09d20cda4ca5" translate="yes" xml:space="preserve">
          <source>To avoid relying on an object's underlying representation, if the smartmatch's right operand is an object that doesn't overload &lt;code&gt;~~&lt;/code&gt;, it raises the exception &quot;&lt;code&gt;Smartmatching a non-overloaded object breaks encapsulation&lt;/code&gt;&quot;. That's because one has no business digging around to see whether something is &quot;in&quot; an object. These are all illegal on objects without a &lt;code&gt;~~&lt;/code&gt; overload:</source>
          <target state="translated">オブジェクトの基底表現に依存することを避けるために、smartmatchの右オペランドが &lt;code&gt;~~&lt;/code&gt; をオーバーロードしないオブジェクトである場合、「オーバーロードされていないオブジェクトの &lt;code&gt;Smartmatching a non-overloaded object breaks encapsulation&lt;/code&gt; 」という例外が発生します。それは、何かがオブジェクトの「中に」あるかどうかを調べるために掘り下げるビジネスがないためです。これらはすべて、 &lt;code&gt;~~&lt;/code&gt; オーバーロードのないオブジェクトでは違法です。</target>
        </trans-unit>
        <trans-unit id="55a1998bc2a5a4986f2bb06eff8015bbc211cdc8" translate="yes" xml:space="preserve">
          <source>To avoid slab fragmentation, freed ops are marked as freed and attached to the slab's freed chain (an idea stolen from DBM::Deep). Those freed ops are reused when possible. Not reusing freed ops would be simpler, but it would result in significantly higher memory usage for programs with large &lt;code&gt;if (DEBUG) {...}&lt;/code&gt; blocks.</source>
          <target state="translated">スラブの断片化を回避するために、解放されたopsは解放済みとしてマークされ、スラブの解放されたチェーンに接続されます（DBM :: Deepから盗まれたアイデア）。これらの解放された操作は、可能な場合は再利用されます。解放されたopsを再利用しない方が簡単ですが、 &lt;code&gt;if (DEBUG) {...}&lt;/code&gt; ブロックが大きいプログラムのメモリ使用量が大幅に増加します。</target>
        </trans-unit>
        <trans-unit id="4c10393ba7ca423ef6dd3c94a2b581675efc33a8" translate="yes" xml:space="preserve">
          <source>To avoid the possibility of miscoordination, Perl now flushes FILEHANDLE before locking or unlocking it.</source>
          <target state="translated">協調性が損なわれる可能性を避けるために、PerlはFILEHANDLEをロックまたはアンロックする前にフラッシュするようになりました。</target>
        </trans-unit>
        <trans-unit id="3c85a34364c95e0f00f8b4537e9fe9720d82fa1b" translate="yes" xml:space="preserve">
          <source>To avoid this blocking behaviour, the caller should pass in the result of such a lookup using the &lt;code&gt;PeerAddrInfo&lt;/code&gt; or &lt;code&gt;LocalAddrInfo&lt;/code&gt; arguments. This can be achieved by using &lt;a href=&quot;Net::LibAsyncNS&quot;&gt;Net::LibAsyncNS&lt;/a&gt;, or the &lt;code&gt;getaddrinfo(3)&lt;/code&gt; function can be called in a child process.</source>
          <target state="translated">このブロッキング動作を回避するには、呼び出し元は、 &lt;code&gt;PeerAddrInfo&lt;/code&gt; または &lt;code&gt;LocalAddrInfo&lt;/code&gt; 引数を使用してそのようなルックアップの結果を渡す必要があります。これは、&lt;a href=&quot;Net::LibAsyncNS&quot;&gt;Net :: LibAsyncNS&lt;/a&gt;を使用して実現できます。または、 &lt;code&gt;getaddrinfo(3)&lt;/code&gt; 関数を子プロセスで呼び出すこともできます。</target>
        </trans-unit>
        <trans-unit id="5d5d75934a6f7e951fd9357cb74cb7683ab1e280" translate="yes" xml:space="preserve">
          <source>To avoid this problem, either put in extra parentheses or use the super low precedence &lt;code&gt;or&lt;/code&gt; operator:</source>
          <target state="translated">この問題を回避するには、括弧を追加するか、超低優先順位 &lt;code&gt;or&lt;/code&gt; 演算子を使用します。</target>
        </trans-unit>
        <trans-unit id="766d42f164385b7f29a7e92b44d6d78b6d17a595" translate="yes" xml:space="preserve">
          <source>To avoid this problem, when it encounters a here document whilst extracting from a modifiable string, &lt;code&gt;extract_quotelike&lt;/code&gt; silently rearranges the string to an equivalent piece of Perl:</source>
          <target state="translated">この問題を回避するために、変更可能な文字列から抽出しているときにhereドキュメントに遭遇すると、 &lt;code&gt;extract_quotelike&lt;/code&gt; は文字列を同等のPerlにサイレントに再配置します。</target>
        </trans-unit>
        <trans-unit id="da9ceee7d2a6a8bd92bf59b8dd4824301848ef6c" translate="yes" xml:space="preserve">
          <source>To avoid this warning and to avoid having different output encodings in a single stream, always specify an encoding explicitly, for example with a PerlIO layer:</source>
          <target state="translated">この警告を回避し、単一のストリーム内で異なる出力エンコーディングを使用しないようにするには、PerlIO レイヤなどで常に明示的にエンコーディングを指定してください。</target>
        </trans-unit>
        <trans-unit id="35af978891563db2721278dcfd7e8de9b9ef61ce" translate="yes" xml:space="preserve">
          <source>To avoid this, whenever a CV and its associated pad is freed, any &lt;code&gt;&amp;amp;&lt;/code&gt; entries in the pad are explicitly removed from the pad, and if the refcount of the pointed-to anon sub is still positive, then that child's &lt;code&gt;CvOUTSIDE&lt;/code&gt; is set to point to its grandparent. This will only occur in the single specific case of a non-closure anon prototype having one or more active references (such as &lt;code&gt;$a&lt;/code&gt; above).</source>
          <target state="translated">これを回避するには、CVとそれに関連付けられたパッドが解放されるたびに、パッド内の &lt;code&gt;&amp;amp;&lt;/code&gt; エントリが明示的にパッドから削除され、ポイントされたanonサブルーチンの &lt;code&gt;CvOUTSIDE&lt;/code&gt; がまだ正の場合、その子のCvOUTSIDEはポイントに設定されますその祖父母に。これは、1つ以上のアクティブな参照（上記の &lt;code&gt;$a&lt;/code&gt; など）を持つ非閉鎖の非プロトタイプの単一の特定のケースでのみ発生します。</target>
        </trans-unit>
        <trans-unit id="892f516de74c75c59b1eb990ddf92d3f52eefdaf" translate="yes" xml:space="preserve">
          <source>To avoid this, you can force the Makefile to be rebuilt whenever you change the module containing the version number by adding this to your WriteMakefile() arguments.</source>
          <target state="translated">これを避けるために、WriteMakefile()の引数にこれを追加することで、バージョン番号を含むモジュールを変更するたびに Makefile を強制的に再構築することができます。</target>
        </trans-unit>
        <trans-unit id="79bc3cfb105613cbe5f2c89b6ab087189a45bded" translate="yes" xml:space="preserve">
          <source>To avoid wasted work when a restart is needed, the sizing pass is abandoned - &lt;code&gt;regatom()&lt;/code&gt; immediately returns NULL, setting the flag &lt;code&gt;RESTART_UTF8&lt;/code&gt; . (This action is encapsulated using the macro &lt;code&gt;REQUIRE_UTF8&lt;/code&gt; .) This restart request is propagated up the call chain in a similar fashion, until it is &quot;caught&quot; in &lt;code&gt;Perl_re_op_compile()&lt;/code&gt; , which marks the pattern as containing Unicode, and restarts the sizing pass. It is also possible for constructions within run-time code blocks to turn out to need Unicode representation., which is signalled by &lt;code&gt;S_compile_runtime_code()&lt;/code&gt; returning false to &lt;code&gt;Perl_re_op_compile()&lt;/code&gt; .</source>
          <target state="translated">再起動が必要なときに無駄な作業を避けるために、サイジングパスは放棄されます &lt;code&gt;regatom()&lt;/code&gt; すぐにNULLを返し、フラグ &lt;code&gt;RESTART_UTF8&lt;/code&gt; を設定します。 （このアクションは、マクロ &lt;code&gt;REQUIRE_UTF8&lt;/code&gt; を使用してカプセル化されます。）この再起動要求は、 &lt;code&gt;Perl_re_op_compile()&lt;/code&gt; で「キャッチ」され、パターンがUnicodeを含むものとしてマークされ、サイズ変更パスが再起動されるまで、同様の方法で呼び出しチェーンに伝達されます。実行時のコードブロック内の構成は、Unicode表現を必要と判明することも可能です。、によって通知された &lt;code&gt;S_compile_runtime_code()&lt;/code&gt; に偽を返す &lt;code&gt;Perl_re_op_compile()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="09e124c75c7cbe80f3e4228168f11f802fe412a9" translate="yes" xml:space="preserve">
          <source>To be able to access the two parameters that were pushed onto the stack after they return from</source>
          <target state="translated">から戻ってきた後にスタックにプッシュされた2つのパラメータにアクセスできるようにする。</target>
        </trans-unit>
        <trans-unit id="6e3a208559e7fc6775f8912d077235f17cca0135" translate="yes" xml:space="preserve">
          <source>To be announced.</source>
          <target state="translated">発表される予定です。</target>
        </trans-unit>
        <trans-unit id="161647c06ada22688c122c82ae94e4258d4b89c7" translate="yes" xml:space="preserve">
          <source>To be announced. Or deleted.</source>
          <target state="translated">発表されること。または削除されること。</target>
        </trans-unit>
        <trans-unit id="1942f94bc444abb1b89482bc04403e0f7a2e9a63" translate="yes" xml:space="preserve">
          <source>To be compatible with .Net regular expressions, &lt;code&gt;\g{name}&lt;/code&gt; may also be written as &lt;code&gt;\k{name}&lt;/code&gt; , &lt;code&gt;\k&amp;lt;name&amp;gt;&lt;/code&gt; or &lt;code&gt;\k'name'&lt;/code&gt;.</source>
          <target state="translated">.Net正規表現と互換性を持たせるために、 &lt;code&gt;\g{name}&lt;/code&gt; は &lt;code&gt;\k{name}&lt;/code&gt; 、 &lt;code&gt;\k&amp;lt;name&amp;gt;&lt;/code&gt; または &lt;code&gt;\k'name'&lt;/code&gt; 表記することもできます。</target>
        </trans-unit>
        <trans-unit id="1f26c77c319cb6291a616300d3aa5bcb9b742805" translate="yes" xml:space="preserve">
          <source>To be compatible with .Net regular expressions, &lt;code&gt;\g{name}&lt;/code&gt; may also be written as &lt;code&gt;\k{name}&lt;/code&gt;, &lt;code&gt;\k&amp;lt;name&amp;gt;&lt;/code&gt; or &lt;code&gt;\k'name'&lt;/code&gt;.</source>
          <target state="translated">.Net正規表現と互換性を持たせるために、 &lt;code&gt;\g{name}&lt;/code&gt; は &lt;code&gt;\k{name}&lt;/code&gt; 、 &lt;code&gt;\k&amp;lt;name&amp;gt;&lt;/code&gt; または &lt;code&gt;\k'name'&lt;/code&gt; と書くこともできます。</target>
        </trans-unit>
        <trans-unit id="cda9b7c28c9197f9e2d7b4ff8ca73ca58bad94f4" translate="yes" xml:space="preserve">
          <source>To be even more flexible, use &lt;code&gt;done_testing&lt;/code&gt;. This means we're just running some tests, don't know how many. [6]</source>
          <target state="translated">さらに柔軟にするには、 &lt;code&gt;done_testing&lt;/code&gt; を使用します。これは、いくつかのテストを実行しているだけで、いくつあるかわからないことを意味します。[6]</target>
        </trans-unit>
        <trans-unit id="bc3bab69ee4c24015f181f505f714806f55a6a5d" translate="yes" xml:space="preserve">
          <source>To be fully compatible with the Exporter and MakeMaker modules you should store your module's version number in a non-my package variable called $VERSION. This should be a positive floating point number with at least two digits after the decimal (i.e., hundredths, e.g, &lt;code&gt;$VERSION = &quot;0.01&quot;&lt;/code&gt; ). Don't use a &quot;1.3.2&quot; style version. See &lt;a href=&quot;exporter&quot;&gt;Exporter&lt;/a&gt; for details.</source>
          <target state="translated">エクスポーターおよびMakeMakerモジュールと完全に互換性を保つには、モジュールのバージョン番号を$ VERSIONと呼ばれるmy以外のパッケージ変数に保存する必要があります。これは、小数点以下2桁以上の正の浮動小数点数である必要があります（つまり、100分の1、たとえば &lt;code&gt;$VERSION = &quot;0.01&quot;&lt;/code&gt; ）。「1.3.2」スタイルのバージョンは使用しないでください。詳細については、&lt;a href=&quot;exporter&quot;&gt;エクスポーター&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="aca5a42cae80e068514dd5dee0bc31352df05942" translate="yes" xml:space="preserve">
          <source>To be fully compatible with the Exporter and MakeMaker modules you should store your module's version number in a non-my package variable called $VERSION. This should be a positive floating point number with at least two digits after the decimal (i.e., hundredths, e.g, &lt;code&gt;$VERSION = &quot;0.01&quot;&lt;/code&gt;). Don't use a &quot;1.3.2&quot; style version. See &lt;a href=&quot;exporter&quot;&gt;Exporter&lt;/a&gt; for details.</source>
          <target state="translated">ExporterおよびMakeMakerモジュールと完全に互換性を持たせるには、モジュールのバージョン番号を$ VERSIONと呼ばれるmy以外のパッケージ変数に格納する必要があります。これは、小数点以下2桁以上の正の浮動小数点数である必要があります（つまり、100分の1、たとえば &lt;code&gt;$VERSION = &quot;0.01&quot;&lt;/code&gt; ）。 「1.3.2」スタイルのバージョンは使用しないでください。詳細については、&lt;a href=&quot;exporter&quot;&gt;エクスポーター&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="781abe7cd10e483cb21c7189d334aa3e4eaca732" translate="yes" xml:space="preserve">
          <source>To be more precise, we will say that a regex program is an encoding of a graph. Each node in the graph corresponds to part of the original regex pattern, such as a literal string or a branch, and has a pointer to the nodes representing the next component to be matched. Since &quot;node&quot; and &quot;opcode&quot; already have other meanings in the perl source, we will call the nodes in a regex program &quot;regops&quot;.</source>
          <target state="translated">より正確には、正規表現プログラムはグラフのエンコーディングであると言えます。グラフの各ノードは、リテラル文字列や分岐など、元の正規表現パターンの一部に対応しており、マッチされる次の要素を表すノードへのポインタを持っています。node &quot;と &quot;opcode &quot;はPerlのソースではすでに他の意味を持っているので、正規表現プログラムのノードを &quot;regops &quot;と呼ぶことにします。</target>
        </trans-unit>
        <trans-unit id="a03a7a550b2afe3393fb820749da17491cf98371" translate="yes" xml:space="preserve">
          <source>To be pedantic, the comparison is actually &lt;code&gt;&lt;a href=&quot;functions/int&quot;&gt;int&lt;/a&gt;(EXPR) == &lt;a href=&quot;functions/int&quot;&gt;int&lt;/a&gt;(EXPR)&lt;/code&gt; , but that is only an issue if you use a floating point expression; when implicitly using &lt;code&gt;$.&lt;/code&gt; as described in the previous paragraph, the comparison is &lt;code&gt;&lt;a href=&quot;functions/int&quot;&gt;int&lt;/a&gt;(EXPR) == &lt;a href=&quot;functions/int&quot;&gt;int&lt;/a&gt;($.)&lt;/code&gt; which is only an issue when &lt;code&gt;$.&lt;/code&gt; is set to a floating point value and you are not reading from a file. Furthermore, &lt;code&gt;&quot;span&quot; .. &quot;spat&quot;&lt;/code&gt; or &lt;code&gt;2.18 .. 3.14&lt;/code&gt; will not do what you want in scalar context because each of the operands are evaluated using their integer representation.</source>
          <target state="translated">わかりやすく言うと、比較は実際には &lt;code&gt;&lt;a href=&quot;functions/int&quot;&gt;int&lt;/a&gt;(EXPR) == &lt;a href=&quot;functions/int&quot;&gt;int&lt;/a&gt;(EXPR)&lt;/code&gt; ですが、これは、浮動小数点式を使用する場合にのみ問題になります。暗黙的に &lt;code&gt;$.&lt;/code&gt; を使用する場合。前の段落で説明したように、比較は &lt;code&gt;&lt;a href=&quot;functions/int&quot;&gt;int&lt;/a&gt;(EXPR) == &lt;a href=&quot;functions/int&quot;&gt;int&lt;/a&gt;($.)&lt;/code&gt; であり、 &lt;code&gt;$.&lt;/code&gt; 場合にのみ問題になります。は浮動小数点値に設定されており、ファイルから読み取っていません。さらに、 &lt;code&gt;&quot;span&quot; .. &quot;spat&quot;&lt;/code&gt; または &lt;code&gt;2.18 .. 3.14&lt;/code&gt; は、各オペランドが整数表現を使用して評価されるため、スカラーコンテキストでは期待どおりの動作をしません。</target>
        </trans-unit>
        <trans-unit id="7a2cc51866f8f7fa513bdcb0e655d22cd247b768" translate="yes" xml:space="preserve">
          <source>To be pedantic, the comparison is actually &lt;code&gt;int(EXPR) == int(EXPR)&lt;/code&gt;, but that is only an issue if you use a floating point expression; when implicitly using &lt;code&gt;$.&lt;/code&gt; as described in the previous paragraph, the comparison is &lt;code&gt;int(EXPR) == int($.)&lt;/code&gt; which is only an issue when &lt;code&gt;$.&lt;/code&gt; is set to a floating point value and you are not reading from a file. Furthermore, &lt;code&gt;&quot;span&quot; .. &quot;spat&quot;&lt;/code&gt; or &lt;code&gt;2.18 .. 3.14&lt;/code&gt; will not do what you want in scalar context because each of the operands are evaluated using their integer representation.</source>
          <target state="translated">衒学的に言うと、比較は実際には &lt;code&gt;int(EXPR) == int(EXPR)&lt;/code&gt; ですが、これは浮動小数点式を使用する場合にのみ問題になります。暗黙的に &lt;code&gt;$.&lt;/code&gt; を使用する場合。前の段落で説明したように、比較は &lt;code&gt;int(EXPR) == int($.)&lt;/code&gt; であり、これは &lt;code&gt;$.&lt;/code&gt; 場合にのみ問題になります。は浮動小数点値に設定されており、ファイルから読み取っていません。さらに、 &lt;code&gt;&quot;span&quot; .. &quot;spat&quot;&lt;/code&gt; または &lt;code&gt;2.18 .. 3.14&lt;/code&gt; は、各オペランドが整数表現を使用して評価されるため、スカラーコンテキストで必要なことを実行しません。</target>
        </trans-unit>
        <trans-unit id="ed53a49e46f6db6479ffd9a906bbff37f48f8995" translate="yes" xml:space="preserve">
          <source>To be polite to other functions wrapping your own you usually want to increment &lt;code&gt;$Level&lt;/code&gt; rather than set it to a constant.</source>
          <target state="translated">独自の関数をラップする他の関数に礼儀正しくするには、通常、 &lt;code&gt;$Level&lt;/code&gt; 定数に設定するのではなく、インクリメントする必要があります。</target>
        </trans-unit>
        <trans-unit id="377966b7899d2c6cc0617addc0bc388cc67a68ae" translate="yes" xml:space="preserve">
          <source>To be portable each component of a module name should be limited to 11 characters. If it might be used on MS-DOS then try to ensure each is unique in the first 8 characters. Nested modules make this easier.</source>
          <target state="translated">移植性を高めるために、モジュール名の各コンポーネントは11文字に制限されるべきです。MS-DOS で使用する場合は、最初の 8 文字でそれぞれが一意であることを確認してください。入れ子になっているモジュールは、これをより簡単にします。</target>
        </trans-unit>
        <trans-unit id="82fd649ae548631dbfdff32da1fa30eb76335c87" translate="yes" xml:space="preserve">
          <source>To be safe, we should have anchored the above example, to prevent matches for something like &lt;code&gt;Hebrew_Braille&lt;/code&gt;, but there aren't any script names like that, so far. A warning is issued if none of the legal values for a property are matched by your pattern. It's likely that a future release will raise a warning if your pattern ends up causing every possible code point to match.</source>
          <target state="translated">安全のために、 &lt;code&gt;Hebrew_Braille&lt;/code&gt; のようなものとの一致を防ぐために、上記の例を固定する必要がありましたが、これまでのところ、そのようなスクリプト名はありません。プロパティの有効な値のいずれもパターンと一致しない場合、警告が発行されます。パターンによってすべての可能なコードポイントが一致するようになると、将来のリリースで警告が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="b076f38e81902902b25d1f17b1608ab8be160484" translate="yes" xml:space="preserve">
          <source>To begin your reading, start with:</source>
          <target state="translated">読書を始めるには、まずは</target>
        </trans-unit>
        <trans-unit id="a61e1eb5d11062cb9036bb12d10d76fe348be7c1" translate="yes" xml:space="preserve">
          <source>To browse existing Perl bugs and patches, you can use the web interface at &lt;a href=&quot;http://rt.perl.org/&quot;&gt;http://rt.perl.org/&lt;/a&gt;.</source>
          <target state="translated">既存のPerlのバグとパッチを閲覧するには、&lt;a href=&quot;http://rt.perl.org/&quot;&gt;http：//rt.perl.org/に&lt;/a&gt;あるWebインターフェースを使用できます。</target>
        </trans-unit>
        <trans-unit id="b19b13b7eebea3b4a95edad33fffc49ec225b2e5" translate="yes" xml:space="preserve">
          <source>To build a non-XS module, you can use the standard module-building instructions distributed with perl modules.</source>
          <target state="translated">XS以外のモジュールをビルドするには、perlモジュールで配布されている標準のモジュールビルド命令を使用します。</target>
        </trans-unit>
        <trans-unit id="6c2705e01ac97996d808db8effeb88881961867f" translate="yes" xml:space="preserve">
          <source>To build an XS module, you must use the standard module-building instructions distributed with perl modules *PLUS* three extra instructions specific to the DJGPP &quot;static link&quot; build environment.</source>
          <target state="translated">XSモジュールをビルドするには、Perlモジュールに付属の標準的なモジュールビルド手順に加えて、DJGPPの &quot;スタティックリンク &quot;ビルド環境に特化した3つの追加手順を使用しなければなりません。</target>
        </trans-unit>
        <trans-unit id="d5c2765f0199128d509d1897ee86d4417f4dd8a3" translate="yes" xml:space="preserve">
          <source>To build extensions other than standard extensions, NetWare Perl has to be installed on Windows along with Windows Perl. The Perl for Windows can be either downloaded from the CPAN site and built using the sources, or the binaries can be directly downloaded from the ActiveState site. Installation can be done by invoking</source>
          <target state="translated">標準の拡張機能以外の拡張機能をビルドするには、Windows用のPerlと一緒にNetWare PerlをWindowsにインストールする必要があります。Windows 用の Perl は、CPAN のサイトからダウンロードしてソースを使用してビルドするか、ActiveState のサイトから直接バイナリをダウンロードすることができます。インストールは</target>
        </trans-unit>
        <trans-unit id="787c86241856156cd077a05b7bdc7004761044c1" translate="yes" xml:space="preserve">
          <source>To build perl from its source code on the Stratus V Series platform you must have OpenVOS Release 17.1.0 or later, GNU Tools Release 3.5 or later, and the C/POSIX Runtime Libraries.</source>
          <target state="translated">Stratus V シリーズプラットフォーム上でソースコードから perl をビルドするには、OpenVOS Release 17.1.0 以降、GNU Tools Release 3.5 以降、および C/POSIX ランタイムライブラリが必要です。</target>
        </trans-unit>
        <trans-unit id="b8374368118e0a9e9250156402520f453adca786" translate="yes" xml:space="preserve">
          <source>To build perl under AmigaOS from the patched sources you will need to have a recent version of the SDK. Version 53.29 is recommended, earlier versions will probably work too.</source>
          <target state="translated">AmigaOS上でパッチを当てたソースからperlをビルドするには、最新バージョンのSDKが必要です。バージョン 53.29 を推奨しますが、それ以前のバージョンでも動作するでしょう。</target>
        </trans-unit>
        <trans-unit id="29d9cfbafe7af9c12fb5ae5d7307a03b50f8bc3e" translate="yes" xml:space="preserve">
          <source>To build perl with AddressSanitizer, your Configure invocation should look like:</source>
          <target state="translated">AddressSanitizerを使ってPerlをビルドするには、Configure呼び出しは次のようになります。</target>
        </trans-unit>
        <trans-unit id="b12975798f70dc1cb8c9fb59b7af2b4445d07d6d" translate="yes" xml:space="preserve">
          <source>To calculate the digest of an n-bit message where</source>
          <target state="translated">n ビットのメッセージのダイジェストを計算する。</target>
        </trans-unit>
        <trans-unit id="0df1e5f84b4694c53717b89d6fb8b89ff7d44718" translate="yes" xml:space="preserve">
          <source>To calculate the distance between London (51.3N 0.5W) and Tokyo (35.7N 139.8E) in kilometers:</source>
          <target state="translated">ロンドン(51.3N 0.5W)と東京(35.7N 139.8E)の間の距離をキロメートルで計算します。</target>
        </trans-unit>
        <trans-unit id="4cea3ec7425389162d89934663cf2df355daf6af" translate="yes" xml:space="preserve">
          <source>To call a function on each element in an array, and collect the results, use:</source>
          <target state="translated">配列の各要素に対して関数を呼び出して結果を収集するには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="dbe4aebe356ab30727111304ed5066c2800f1b44" translate="yes" xml:space="preserve">
          <source>To call a function on each element of an array, but ignore the results:</source>
          <target state="translated">配列の各要素に対して関数を呼び出しますが、結果は無視します。</target>
        </trans-unit>
        <trans-unit id="710b700709beaae3a0d7fb3e17148d99cdb1ee11" translate="yes" xml:space="preserve">
          <source>To call a function on each integer in a (small) range, you &lt;b&gt;can&lt;/b&gt; use:</source>
          <target state="translated">（小さい）範囲内の各整数で関数を呼び出すには、次&lt;b&gt;を&lt;/b&gt;使用&lt;b&gt;でき&lt;/b&gt;ます。</target>
        </trans-unit>
        <trans-unit id="b0c03ca703f3d70571e4ed1a5f4b95eb2f4f7eac" translate="yes" xml:space="preserve">
          <source>To call individual Perl subroutines, you can use any of the &lt;b&gt;call_*&lt;/b&gt; functions documented in &lt;a href=&quot;perlcall&quot;&gt;perlcall&lt;/a&gt;. In this example we'll use &lt;code&gt;call_argv&lt;/code&gt; .</source>
          <target state="translated">個々のPerlのサブルーチンを呼び出すには、任意の使用することができます&lt;b&gt;CALL_ *&lt;/b&gt;に文書化機能&lt;a href=&quot;perlcall&quot;&gt;perlcallを&lt;/a&gt;。この例では、 &lt;code&gt;call_argv&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="7b0356115da72e97143cd3fb75c87b7ab25d47c5" translate="yes" xml:space="preserve">
          <source>To call individual Perl subroutines, you can use any of the &lt;b&gt;call_*&lt;/b&gt; functions documented in &lt;a href=&quot;perlcall&quot;&gt;perlcall&lt;/a&gt;. In this example we'll use &lt;code&gt;call_argv&lt;/code&gt;.</source>
          <target state="translated">個々のPerlのサブルーチンを呼び出すには、任意の使用することができます&lt;b&gt;CALL_ *&lt;/b&gt;に文書化機能&lt;a href=&quot;perlcall&quot;&gt;perlcallを&lt;/a&gt;。この例では、 &lt;code&gt;call_argv&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="f49f3d19c459317781abadc37d2ae6f14022eac3" translate="yes" xml:space="preserve">
          <source>To call subroutines:</source>
          <target state="translated">サブルーチンを呼び出すこと。</target>
        </trans-unit>
        <trans-unit id="5abcacc2499f97bcbde0588fdd4401b44cc6c01a" translate="yes" xml:space="preserve">
          <source>To capture a command's STDERR but discard its STDOUT (ordering is important here):</source>
          <target state="translated">コマンドのSTDERRをキャプチャし、STDOUTを破棄するには(ここでは順序が重要です)。</target>
        </trans-unit>
        <trans-unit id="891b8754dd37bb2c3dc54aab3a1185e0fd372170" translate="yes" xml:space="preserve">
          <source>To capture a command's STDERR but discard its STDOUT:</source>
          <target state="translated">コマンドのSTDERRをキャプチャし、STDOUTを破棄する。</target>
        </trans-unit>
        <trans-unit id="7ddfc050c95c3b76b8561d8851899b023835e01c" translate="yes" xml:space="preserve">
          <source>To capture a command's STDOUT but discard its STDERR:</source>
          <target state="translated">コマンドのSTDOUTをキャプチャし、STDERRを破棄する。</target>
        </trans-unit>
        <trans-unit id="459bfbbfb62f196ec5bdfb8f616f754fb8b81d04" translate="yes" xml:space="preserve">
          <source>To capture a program's STDERR, and let its STDOUT go to our own STDERR:</source>
          <target state="translated">プログラムのSTDERRをキャプチャし、そのSTDOUTを自分のSTDERRに移動させる。</target>
        </trans-unit>
        <trans-unit id="5bd52eb04283645c047b422b0b8e0a7d88ad61c6" translate="yes" xml:space="preserve">
          <source>To capture a program's STDERR, but discard its STDOUT:</source>
          <target state="translated">プログラムのSTDERRをキャプチャし、STDOUTを破棄する。</target>
        </trans-unit>
        <trans-unit id="8a448a300769cb48dfafecf642b7105f4ae83d7b" translate="yes" xml:space="preserve">
          <source>To capture a program's STDOUT, but discard its STDERR:</source>
          <target state="translated">プログラムのSTDOUTをキャプチャし、STDERRを破棄する。</target>
        </trans-unit>
        <trans-unit id="48535a0ea84ddf99c0ff0191b2ebc7ac2d2965e6" translate="yes" xml:space="preserve">
          <source>To catch this kind of problem, we can force each variable to be declared before use by pulling in the strict module, by putting 'use strict;' after the first line of the script.</source>
          <target state="translated">この種の問題をキャッチするために、スクリプトの最初の行の後に 'use strict;' を置くことで、strict モジュールを引っ張ってくることで、使用前に各変数を強制的に宣言することができます。</target>
        </trans-unit>
        <trans-unit id="ee4539dea7c8d87e83fb7b99fbcea7146f28bf41" translate="yes" xml:space="preserve">
          <source>To center a whole line of text, do something like this:</source>
          <target state="translated">テキストの行全体を中央に配置するには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="cb50b80c4012bf8864c9070a8feaf64a654c0893" translate="yes" xml:space="preserve">
          <source>To change existing lines, insert the code to modify the lines inside the &lt;code&gt;while&lt;/code&gt; loop. In this case, the code finds all lowercased versions of &quot;perl&quot; and uppercases them. The happens for every line, so be sure that you're supposed to do that on every line!</source>
          <target state="translated">既存の行を変更するには、 &lt;code&gt;while&lt;/code&gt; ループ内の行を変更するコードを挿入します。この場合、コードは小文字の「perl」のバージョンをすべて見つけて大文字にします。これはすべての行で発生するので、必ずすべての行で実行するようにしてください。</target>
        </trans-unit>
        <trans-unit id="3014ba02f0b23a5077d149c5a55186e1b0210812" translate="yes" xml:space="preserve">
          <source>To change one of these elements, just assign to it like this:</source>
          <target state="translated">これらの要素を変更するには、このように代入するだけです。</target>
        </trans-unit>
        <trans-unit id="0bc26e290e338fd9cb7ec178f79c71f3fe32327a" translate="yes" xml:space="preserve">
          <source>To change only a particular line, the input line number, &lt;code&gt;$.&lt;/code&gt; , is useful. First read and print the lines up to the one you want to change. Next, read the single line you want to change, change it, and print it. After that, read the rest of the lines and print those:</source>
          <target state="translated">特定の行のみを変更するには、入力行番号 &lt;code&gt;$.&lt;/code&gt; 、便利です。まず、変更したい行まで読み取り、印刷します。次に、変更する1行を読み取り、変更して、印刷します。その後、残りの行を読み、それらを印刷します。</target>
        </trans-unit>
        <trans-unit id="8261e5499a7ae4c48592a1983635f3df7192d7cc" translate="yes" xml:space="preserve">
          <source>To change only a particular line, the input line number, &lt;code&gt;$.&lt;/code&gt;, is useful. First read and print the lines up to the one you want to change. Next, read the single line you want to change, change it, and print it. After that, read the rest of the lines and print those:</source>
          <target state="translated">特定の行のみを変更するには、入力行番号 &lt;code&gt;$.&lt;/code&gt; 、便利です。まず、変更したい行までの行を読んで印刷します。次に、変更したい1行を読み、変更して、印刷します。その後、残りの行を読み、それらを印刷します。</target>
        </trans-unit>
        <trans-unit id="f7b3b581f75dc5b407edfb21187704d85ccc3337" translate="yes" xml:space="preserve">
          <source>To change only the fifth line, you can add a test checking &lt;code&gt;$.&lt;/code&gt; , the input line number, then only perform the operation when the test passes:</source>
          <target state="translated">5行目のみを変更するには、 &lt;code&gt;$.&lt;/code&gt; チェックするテストを追加できます。、入力行番号。テストに合格した場合にのみ操作を実行します。</target>
        </trans-unit>
        <trans-unit id="833e5f56fff3dfac3d9eb1d5cb139919fbf68571" translate="yes" xml:space="preserve">
          <source>To change only the fifth line, you can add a test checking &lt;code&gt;$.&lt;/code&gt;, the input line number, then only perform the operation when the test passes:</source>
          <target state="translated">5行目のみを変更するには、 &lt;code&gt;$.&lt;/code&gt; チェックするテストを追加します。、入力行番号は、テストに合格した場合にのみ操作を実行します。</target>
        </trans-unit>
        <trans-unit id="2ac56000e9557456388facc9434e99b2f25c68f2" translate="yes" xml:space="preserve">
          <source>To change part of a string, you can use the optional fourth argument which is the replacement string.</source>
          <target state="translated">文字列の一部を変更するには、オプションの第4引数である置換文字列を使用することができます。</target>
        </trans-unit>
        <trans-unit id="159bf1e2399227a81a68240fcbc4a8d0c4d4386e" translate="yes" xml:space="preserve">
          <source>To change the configuration you will need to use either the &lt;code&gt;-c&lt;/code&gt; or the &lt;code&gt;-d&lt;/code&gt; options.</source>
          <target state="translated">構成を変更するには、 &lt;code&gt;-c&lt;/code&gt; または &lt;code&gt;-d&lt;/code&gt; オプションを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="82b774af2b2d757667a119fdffcb3a39066bffc5" translate="yes" xml:space="preserve">
          <source>To change the value of an</source>
          <target state="translated">の値を変更するには</target>
        </trans-unit>
        <trans-unit id="c3243d9e5f9c11b853cdbfbdad7815af406db7ec" translate="yes" xml:space="preserve">
          <source>To check if you've got an object derived from a specific class you have to write:</source>
          <target state="translated">特定のクラスから派生したオブジェクトを持っているかどうかを確認するには、書かなければなりません。</target>
        </trans-unit>
        <trans-unit id="b5f0280c18244571ee821966259aa01905eea140" translate="yes" xml:space="preserve">
          <source>To check that a PerlIO* is valid use PerlIOValid(PerlIO *f). (All this does is really just to check that the pointer is non-NULL and that the pointer behind that is non-NULL.)</source>
          <target state="translated">PerlIO*が有効であることを確認するには、PerlIOValid(PerlIO *f)を使用します。(これはポインタが非NULLであることと、その後ろのポインタが非NULLであることをチェックするだけです)。</target>
        </trans-unit>
        <trans-unit id="6efc33cfc9910a60ea4ef9bf5110b124df74dec6" translate="yes" xml:space="preserve">
          <source>To circumvent this, Perl uses two hacks. They help against</source>
          <target state="translated">これを回避するために、Perlは2つのハックを使用しています。これらは</target>
        </trans-unit>
        <trans-unit id="fc16356cccf83cfc4cbdd42d7b6c6a4bf9f4c7cd" translate="yes" xml:space="preserve">
          <source>To clean up after compilation you can use either of</source>
          <target state="translated">コンパイル後にクリーンアップするには、以下のいずれかの方法を使用します。</target>
        </trans-unit>
        <trans-unit id="9b687155f88b0a0c7f0b7a50cd6c0fc2a98e0825" translate="yes" xml:space="preserve">
          <source>To clear the screen, you just have to print the special sequence that tells the terminal to clear the screen. Once you have that sequence, output it when you want to clear the screen.</source>
          <target state="translated">画面をクリアするには、端末に画面をクリアするように指示する特殊なシーケンスを印刷すればよい。そのシーケンスができたら、画面をクリアしたいときに出力してください。</target>
        </trans-unit>
        <trans-unit id="aeb7d489151127988ed87013a2d0db094b3d4f08" translate="yes" xml:space="preserve">
          <source>To commit to a maintenance version of perl, you need to create a local tracking branch:</source>
          <target state="translated">perlのメンテナンス版にコミットするには、ローカルトラッキングブランチを作成する必要があります。</target>
        </trans-unit>
        <trans-unit id="c45964cfffa3b2dbc072504434f04f57c4932a60" translate="yes" xml:space="preserve">
          <source>To compare two strings case-insensitively, use &lt;a href=&quot;perlapi#foldEQ_utf8&quot;&gt;&lt;code&gt;foldEQ_utf8()&lt;/code&gt;&lt;/a&gt; (the strings don't have to have the same UTF-8ness).</source>
          <target state="translated">2つの文字列を大文字と小文字を区別せずに比較するには、&lt;a href=&quot;perlapi#foldEQ_utf8&quot;&gt; &lt;code&gt;foldEQ_utf8()&lt;/code&gt; を&lt;/a&gt;使用します（文字列は同じUTF-8である必要はありません）。</target>
        </trans-unit>
        <trans-unit id="5339fbdb482ebe20149617c58a946c9025ec4bd2" translate="yes" xml:space="preserve">
          <source>To compare two strings case-insensitively, use &lt;a href=&quot;perlapi#foldEQ_utf8&quot;&gt;foldEQ_utf8() &lt;/a&gt; (the strings don't have to have the same UTF-8ness).</source>
          <target state="translated">2つの文字列を大文字と小文字を区別せずに比較するには、&lt;a href=&quot;perlapi#foldEQ_utf8&quot;&gt;foldEQ_utf8（）を&lt;/a&gt;使用します（文字列は同じUTF-8である必要はありません）。</target>
        </trans-unit>
        <trans-unit id="9ef4437f2da5ad50f0107615b5cd7fb7937669db" translate="yes" xml:space="preserve">
          <source>To compile Perl with threads, add -Dusethreads to the arguments of Configure. Verify that the -D_POSIX_C_SOURCE=199506L compiler flag is automatically added to the list of flags. Also make sure that -lpthread is listed before -lc in the list of libraries to link Perl with. The hints provided for HP-UX during Configure will try very hard to get this right for you.</source>
          <target state="translated">スレッドを使ってPerlをコンパイルするには、Configureの引数に-Dusethreadsを追加します。D_POSIX_C_SOURCE=199506Lコンパイラフラグが自動的にフラグのリストに追加されていることを確認してください。また、Perlとリンクするライブラリのリストで、-lpthreadが-lcの前にリストされていることを確認してください。Configure時にHP-UX用に提供されているヒントは、あなたのためにこれを正しくするために非常に努力してくれます。</target>
        </trans-unit>
        <trans-unit id="dca1f2d388460992485bc83958326b4fabbe3a89" translate="yes" xml:space="preserve">
          <source>To compile a 64-bit application on an UltraSparc with a recent Sun Compiler, you need to use the flag &quot;-xarch=v9&quot;. getconf(1) will tell you this, e.g.</source>
          <target state="translated">UltraSparc 上の 64 ビットアプリケーションを最近の Sun Compiler でコンパイルするには、&quot;-xarch=v9&quot; フラグを使う必要があります。</target>
        </trans-unit>
        <trans-unit id="aafe5bf2c4343a0e3d4371c91d0581b8bfb71744" translate="yes" xml:space="preserve">
          <source>To compile the demonstration application PerlApp you need first to install the Perl headers under the SDK.</source>
          <target state="translated">デモアプリケーションPerlAppをコンパイルするには、まずSDKの下にPerlヘッダをインストールする必要があります。</target>
        </trans-unit>
        <trans-unit id="87a608f7610a06343062c0a4f15a78987866b679" translate="yes" xml:space="preserve">
          <source>To compress all files in the directory &quot;/my/home&quot; that match &quot;*.txt&quot; and store the compressed data in the same directory</source>
          <target state="translated">ディレクトリ&quot;/my/home &quot;内の &quot;*.txt &quot;に一致するファイルをすべて圧縮し、圧縮データを同じディレクトリに保存するには、以下のようにします。</target>
        </trans-unit>
        <trans-unit id="e79c6c77e53867aede1a00267dc0d36f666b7950" translate="yes" xml:space="preserve">
          <source>To compress an RFC 1950 data stream, set &lt;code&gt;WindowBits&lt;/code&gt; to a positive number between 8 and 15.</source>
          <target state="translated">RFC 1950データストリームを圧縮するには、 &lt;code&gt;WindowBits&lt;/code&gt; を8〜15の正の数に設定します。</target>
        </trans-unit>
        <trans-unit id="7421981a167883ab2bc4949efb716b7db4314b6b" translate="yes" xml:space="preserve">
          <source>To compress an RFC 1951 data stream, set &lt;code&gt;WindowBits&lt;/code&gt; to &lt;code&gt;-MAX_WBITS&lt;/code&gt; .</source>
          <target state="translated">RFC 1951データストリームを圧縮するには、 &lt;code&gt;WindowBits&lt;/code&gt; を &lt;code&gt;-MAX_WBITS&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="cf7349fcec84071676b172827e1a49b634a1fdb7" translate="yes" xml:space="preserve">
          <source>To compress an RFC 1951 data stream, set &lt;code&gt;WindowBits&lt;/code&gt; to &lt;code&gt;-MAX_WBITS&lt;/code&gt;.</source>
          <target state="translated">RFC 1951データストリームを圧縮するには、 &lt;code&gt;WindowBits&lt;/code&gt; を &lt;code&gt;-MAX_WBITS&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="eb0992d170df6f988844c94c5a16d02581fe60f0" translate="yes" xml:space="preserve">
          <source>To compress an RFC 1952 data stream (i.e. gzip), set &lt;code&gt;WindowBits&lt;/code&gt; to &lt;code&gt;WANT_GZIP&lt;/code&gt; .</source>
          <target state="translated">RFC 1952データストリーム（gzipなど）を圧縮するには、 &lt;code&gt;WindowBits&lt;/code&gt; を &lt;code&gt;WANT_GZIP&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="3745f78ab286dd7d4193d09748c3eef61c61724d" translate="yes" xml:space="preserve">
          <source>To compress an RFC 1952 data stream (i.e. gzip), set &lt;code&gt;WindowBits&lt;/code&gt; to &lt;code&gt;WANT_GZIP&lt;/code&gt;.</source>
          <target state="translated">RFC 1952データストリーム（つまりgzip）を圧縮するには、 &lt;code&gt;WindowBits&lt;/code&gt; を &lt;code&gt;WANT_GZIP&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="6c0a5b03c1713572aa7618df4ce2ea31c5f8ea2a" translate="yes" xml:space="preserve">
          <source>To concatenate</source>
          <target state="translated">連結するには</target>
        </trans-unit>
        <trans-unit id="6e6c0c8d29557c5cf786e08230a13bcf9f5a031b" translate="yes" xml:space="preserve">
          <source>To configure the</source>
          <target state="translated">を設定するには</target>
        </trans-unit>
        <trans-unit id="27b8a31fcae13694057ef8e5270215d578e3caf3" translate="yes" xml:space="preserve">
          <source>To connect one filehandle to several output filehandles, you can use the &lt;a href=&quot;IO::Tee&quot;&gt;IO::Tee&lt;/a&gt; or &lt;a href=&quot;Tie::FileHandle::Multiplex&quot;&gt;Tie::FileHandle::Multiplex&lt;/a&gt; modules.</source>
          <target state="translated">1つのファイルハンドルを複数の出力ファイルハンドルに接続するには、&lt;a href=&quot;IO::Tee&quot;&gt;IO :: Tee&lt;/a&gt;または&lt;a href=&quot;Tie::FileHandle::Multiplex&quot;&gt;Tie :: FileHandle :: Multiplex&lt;/a&gt;モジュールを使用できます。</target>
        </trans-unit>
        <trans-unit id="b8324e82632846a0ff4c29dfcce46aaf6bb8f9fb" translate="yes" xml:space="preserve">
          <source>To connect one filehandle to several output filehandles, you can use the &lt;a href=&quot;http://search.cpan.org/perldoc/IO::Tee&quot;&gt;IO::Tee&lt;/a&gt; or &lt;a href=&quot;http://search.cpan.org/perldoc/Tie::FileHandle::Multiplex&quot;&gt;Tie::FileHandle::Multiplex&lt;/a&gt; modules.</source>
          <target state="translated">1つのファイルハンドルを複数の出力ファイルハンドルに接続するには、&lt;a href=&quot;http://search.cpan.org/perldoc/IO::Tee&quot;&gt;IO :: Tee&lt;/a&gt;または&lt;a href=&quot;http://search.cpan.org/perldoc/Tie::FileHandle::Multiplex&quot;&gt;Tie :: FileHandle :: Multiplex&lt;/a&gt;モジュールを使用できます。</target>
        </trans-unit>
        <trans-unit id="8d6cbc660d600cd1c4583162826d97d790f4bf63" translate="yes" xml:space="preserve">
          <source>To conserve memory you should have your compiler modules loaded into the Link Pack Area (LPA/ELPA) rather than in a link list or step lib.</source>
          <target state="translated">メモリを節約するには、リンクリストやステップ lib ではなく、リンクパックエリア (LPA/ELPA)にコンパイラーモジュールをロードする必要があります。</target>
        </trans-unit>
        <trans-unit id="968a823fad5813dfb21cd46750147776a5611926" translate="yes" xml:space="preserve">
          <source>To considerably speed up the initial CPAN shell startup, it is possible to use Storable to create a cache of metadata. If Storable is not available, the normal index mechanism will be used.</source>
          <target state="translated">初期のCPANシェル起動を大幅に高速化するために、Storableを使用してメタデータのキャッシュを作成することができます。Storableが利用できない場合は、通常のインデックス機構が使用されます。</target>
        </trans-unit>
        <trans-unit id="20a4b2b8d77aba12d02e264b26db5b4fc2052c4a" translate="yes" xml:space="preserve">
          <source>To contact the author, send email to: &lt;code&gt;mjd-perl-tiefile+@plover.com&lt;/code&gt;</source>
          <target state="translated">著者に連絡するには、 &lt;code&gt;mjd-perl-tiefile+@plover.com&lt;/code&gt; メールを送信してください。</target>
        </trans-unit>
        <trans-unit id="d4e7d2faeb717445863f554610fdabbf94c812cb" translate="yes" xml:space="preserve">
          <source>To control what text is used for display, you use &quot;&lt;code&gt;L&amp;lt;text|...&amp;gt;&lt;/code&gt;&quot;, as in:</source>
          <target state="translated">表示に使用するテキストを制御するには、次のように &quot; &lt;code&gt;L&amp;lt;text|...&amp;gt;&lt;/code&gt; &quot;を使用します。</target>
        </trans-unit>
        <trans-unit id="7f787791e1e7cbfd6f94bf52b9685495ede53680" translate="yes" xml:space="preserve">
          <source>To convert &lt;a href=&quot;config#perlpath&quot;&gt;&lt;code&gt;$Config{perlpath}&lt;/code&gt;&lt;/a&gt; to a file pathname, say:</source>
          <target state="translated">&lt;a href=&quot;config#perlpath&quot;&gt; &lt;code&gt;$Config{perlpath}&lt;/code&gt; &lt;/a&gt;をファイルパス名に変換するには、次のように言います。</target>
        </trans-unit>
        <trans-unit id="c07c15697f1959a79e3e58a6af11dd7e45671417" translate="yes" xml:space="preserve">
          <source>To convert &lt;a href=&quot;perlvar#%24%5EX&quot;&gt;&lt;code&gt;$^X&lt;/code&gt;&lt;/a&gt; to a file pathname, taking account of the requirements of the various operating system possibilities, say:</source>
          <target state="translated">さまざまなオペレーティングシステムの可能性の要件を考慮して、&lt;a href=&quot;perlvar#%24%5EX&quot;&gt; &lt;code&gt;$^X&lt;/code&gt; &lt;/a&gt;をファイルパス名に変換するには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="0f2616580d4b758d8bc7475f582ba3ef32958144" translate="yes" xml:space="preserve">
          <source>To convert &lt;code&gt;$Config{perlpath}&lt;/code&gt; to a file pathname, say:</source>
          <target state="translated">&lt;code&gt;$Config{perlpath}&lt;/code&gt; をファイルパス名に変換するには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="445d48b4e3ded0561c8b941a914e856d01c116d2" translate="yes" xml:space="preserve">
          <source>To convert &lt;code&gt;$^X&lt;/code&gt; to a file pathname, taking account of the requirements of the various operating system possibilities, say:</source>
          <target state="translated">&lt;code&gt;$^X&lt;/code&gt; をさまざまなオペレーティングシステムの可能性の要件を考慮してファイルパス名に変換するには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="c00d24e73fce2df83990c0f155f2d36a18a08fc4" translate="yes" xml:space="preserve">
          <source>To convert an octal number, use from_oct();</source>
          <target state="translated">8 進数を変換するには from_oct()を使用します。</target>
        </trans-unit>
        <trans-unit id="7d95d35a7d9c8de57b1e556f0a9920a9c8320986" translate="yes" xml:space="preserve">
          <source>To convert from EBCDIC 037 to ASCII just reverse the order of the tr/// arguments like so:</source>
          <target state="translated">EBCDIC 037 から ASCII に変換するには、次のように tr///引数の順序を逆にするだけです。</target>
        </trans-unit>
        <trans-unit id="e95102da8c741e9ba252adcb490152dec1b8623d" translate="yes" xml:space="preserve">
          <source>To convert from new-style to old-style, follow this recipe:</source>
          <target state="translated">ニュースタイルからオールドスタイルに変換するには、このレシピに従ってください。</target>
        </trans-unit>
        <trans-unit id="b7383321848919d955ca5bfae7880346b845b2ba" translate="yes" xml:space="preserve">
          <source>To convert strings that might start with any of &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;0x&lt;/code&gt;, or &lt;code&gt;0b&lt;/code&gt;, see &lt;a href=&quot;#oct-EXPR&quot;&gt;&lt;code&gt;oct&lt;/code&gt;&lt;/a&gt;. To present something as hex, look into &lt;a href=&quot;#printf-FILEHANDLE-FORMAT%2C-LIST&quot;&gt;&lt;code&gt;printf&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#sprintf-FORMAT%2C-LIST&quot;&gt;&lt;code&gt;sprintf&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#unpack-TEMPLATE%2CEXPR&quot;&gt;&lt;code&gt;unpack&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">改宗者のいずれかで始まる文字列に &lt;code&gt;0&lt;/code&gt; 、 &lt;code&gt;0x&lt;/code&gt; 、または &lt;code&gt;0b&lt;/code&gt; 、参照&lt;a href=&quot;#oct-EXPR&quot;&gt; &lt;code&gt;oct&lt;/code&gt; &lt;/a&gt;。何かを16進数で表示するには、&lt;a href=&quot;#printf-FILEHANDLE-FORMAT%2C-LIST&quot;&gt; &lt;code&gt;printf&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#sprintf-FORMAT%2C-LIST&quot;&gt; &lt;code&gt;sprintf&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;#unpack-TEMPLATE%2CEXPR&quot;&gt; &lt;code&gt;unpack&lt;/code&gt; を&lt;/a&gt;調べます。</target>
        </trans-unit>
        <trans-unit id="9fa39707ee5532360879dd87b7e44a99cff8fee0" translate="yes" xml:space="preserve">
          <source>To copy all your .c file to a backup directory</source>
          <target state="translated">すべての.cファイルをバックアップディレクトリにコピーするには</target>
        </trans-unit>
        <trans-unit id="5ab2f997dcaa14c701c81b93174b6bfe66ee6931" translate="yes" xml:space="preserve">
          <source>To copy the array, use</source>
          <target state="translated">配列をコピーするには</target>
        </trans-unit>
        <trans-unit id="49c50a429b3a772bc583381f94d7fd07c2224e83" translate="yes" xml:space="preserve">
          <source>To correctly maintain reference counts, it is essential to keep track of what references the XS code is manipulating. The programmer should always know where a reference has come from and who owns it, and be aware of any creation or destruction of references, and any transfers of ownership. Because ownership isn't represented explicitly in the xV data structures, only the reference count need be actually maintained by the code, and that means that this understanding of ownership is not actually evident in the code. For example, transferring ownership of a reference from one owner to another doesn't change the reference count at all, so may be achieved with no actual code. (The transferring code doesn't touch the referenced object, but does need to ensure that the former owner knows that it no longer owns the reference, and that the new owner knows that it now does.)</source>
          <target state="translated">参照数を正しく管理するためには、XSコードがどのような参照を操作しているかを把握しておくことが重要です。プログラマは、参照がどこから来たのか、誰が所有しているのかを常に把握し、参照の作成や破棄、所有権の移転に注意しなければなりません。所有権はxVのデータ構造では明示的には表現されていないため、コードでは参照数だけを管理する必要があり、この所有権の理解は実際にはコードでは明らかになりません。例えば、ある所有者から別の所有者へ参照の所有権を移転しても、参照カウントは全く変化しないので、実際のコードなしで実現できるかもしれません。(転送するコードは参照されたオブジェクトには触れませんが、前の所有者が参照を所有していないことを知っていること、そして新しい所有者が参照を所有していることを知っていることを確認する必要があります)</target>
        </trans-unit>
        <trans-unit id="86582412ddc1c4958ec10cc1409f68b2a052f72a" translate="yes" xml:space="preserve">
          <source>To cover such cases, you can redispatch methods via:</source>
          <target state="translated">そのようなケースをカバーするために、経由してメソッドを再送することができます。</target>
        </trans-unit>
        <trans-unit id="816db1c262f755f697320a74d5b828dbd17231a2" translate="yes" xml:space="preserve">
          <source>To create Unicode characters in literals, use the &lt;code&gt;\N{...}&lt;/code&gt; notation in double-quoted strings:</source>
          <target state="translated">リテラルでUnicode文字を作成するには、二重引用符で囲まれた文字列で &lt;code&gt;\N{...}&lt;/code&gt; 表記を使用します。</target>
        </trans-unit>
        <trans-unit id="c36e175a2f7ac1c4707a3b48724437b649be4b2b" translate="yes" xml:space="preserve">
          <source>To create a POD filter for translating POD documentation into some other format, you create a subclass of &lt;b&gt;Pod::Parser&lt;/b&gt; which typically overrides just the base class implementation for the following methods:</source>
          <target state="translated">PODドキュメントを他の形式に変換するためのPODフィルターを作成するには、通常、次のメソッドの基本クラス実装のみをオーバーライドする&lt;b&gt;Pod :: Parserの&lt;/b&gt;サブクラスを作成します。</target>
        </trans-unit>
        <trans-unit id="3376aadc06d935bc6556cf078e6fff6d6ceed1e6" translate="yes" xml:space="preserve">
          <source>To create a Perl module that implements a PerlIO layer in Perl (as opposed to in C using XS as the interface to Perl), you need to supply some of the following subroutines. It is recommended to create these Perl modules in the PerlIO::via:: namespace, so that they can easily be located on CPAN and use the default namespace feature of the PerlIO::via module itself.</source>
          <target state="translated">PerlIOレイヤをPerlで実装するPerlモジュールをPerlで作成するには、以下のサブルーチンのいくつかを提供する必要があります。これらのPerlモジュールをPerlIO::via::ネームスペースに作成することをお勧めします。これにより、CPAN上に簡単に配置でき、PerlIO::viaモジュール自体のデフォルトのネームスペース機能を使用することができます。</target>
        </trans-unit>
        <trans-unit id="cea82dcc2341d67ceae28cb7f8dd640de30d8fab" translate="yes" xml:space="preserve">
          <source>To create a child &lt;b&gt;process&lt;/b&gt; identical to the parent process at its moment of conception, at least until it gets ideas of its own. A thread with protected memory.</source>
          <target state="translated">少なくとも独自のアイデアが得られるまで、受胎の瞬間に親&lt;b&gt;プロセス&lt;/b&gt;と同一の子&lt;b&gt;プロセス&lt;/b&gt;を作成すること。保護されたメモリを持つスレッド。</target>
        </trans-unit>
        <trans-unit id="973c5f5d0d37e9d577d7def77212ab83a77d00d7" translate="yes" xml:space="preserve">
          <source>To create a complex number, use either:</source>
          <target state="translated">複素数を作成するには、どちらかを使用します。</target>
        </trans-unit>
        <trans-unit id="2ba00f13d11568a68eea0b9363c1c701b94f3530" translate="yes" xml:space="preserve">
          <source>To create a handler, define it as a subroutine with the same name as the desired attribute, and declare the subroutine itself with the attribute &lt;code&gt;:ATTR&lt;/code&gt; . For example:</source>
          <target state="translated">ハンドラを作成するには、目的の属性と同じ名前のサブルーチンとしてハンドラを定義し、属性 &lt;code&gt;:ATTR&lt;/code&gt; を使用してサブルーチン自体を宣言します。例えば：</target>
        </trans-unit>
        <trans-unit id="7be1f84ddb058aa59042284e3c774355eb9bd0e7" translate="yes" xml:space="preserve">
          <source>To create a handler, define it as a subroutine with the same name as the desired attribute, and declare the subroutine itself with the attribute &lt;code&gt;:ATTR&lt;/code&gt;. For example:</source>
          <target state="translated">ハンドラーを作成するには、ハンドラーを目的の属性と同じ名前のサブルーチンとして定義し、サブルーチン自体を属性 &lt;code&gt;:ATTR&lt;/code&gt; で宣言します。例えば：</target>
        </trans-unit>
        <trans-unit id="bf8c75fd66b25e79071f909e18cf1703b677444d" translate="yes" xml:space="preserve">
          <source>To create a mortal reference, use the functions:</source>
          <target state="translated">モルタルリファレンスを作成するには、関数を使用します。</target>
        </trans-unit>
        <trans-unit id="0f301595bc4c387e143da9231296df032806e83c" translate="yes" xml:space="preserve">
          <source>To create a mortal variable, use the functions:</source>
          <target state="translated">モルタル変数を作成するには、関数を使用します。</target>
        </trans-unit>
        <trans-unit id="168d2bd52151b2f88de55aa6a46a9bc34a213502" translate="yes" xml:space="preserve">
          <source>To create a named pipe, use the &lt;code&gt;POSIX::mkfifo()&lt;/code&gt; function.</source>
          <target state="translated">名前付きパイプを作成するには、 &lt;code&gt;POSIX::mkfifo()&lt;/code&gt; 関数を使用します。</target>
        </trans-unit>
        <trans-unit id="fb4519b518bb57bb6e760a3915cac3cb53c117b7" translate="yes" xml:space="preserve">
          <source>To create a new Perl variable with an undef value which can be accessed from your Perl script, use the following routines, depending on the variable type.</source>
          <target state="translated">Perl スクリプトからアクセス可能な undef 値を持つ新しい Perl 変数を作成するには、変数の種類に応じて以下のルーチンを使用します。</target>
        </trans-unit>
        <trans-unit id="c5e6c240b7113609dabfe56dd41076e1c64fdaed" translate="yes" xml:space="preserve">
          <source>To create a new compartment, use</source>
          <target state="translated">新しいコンパートメントを作成するには</target>
        </trans-unit>
        <trans-unit id="5e69f259d43b2f65fc36274b2ebe4426a448a0c1" translate="yes" xml:space="preserve">
          <source>To create a patch file for all your local changes:</source>
          <target state="translated">すべてのローカル変更のためのパッチファイルを作成します。</target>
        </trans-unit>
        <trans-unit id="a2f8f5de503a593a35d422a3d1a1da701a2bb15e" translate="yes" xml:space="preserve">
          <source>To create a reference, use either of the following functions:</source>
          <target state="translated">参照を作成するには、以下のいずれかの関数を使用します。</target>
        </trans-unit>
        <trans-unit id="3b14234e60346a5da75e272e4ecdc1bcef627a2f" translate="yes" xml:space="preserve">
          <source>To create a reference, we use the &lt;code&gt;newRV&lt;/code&gt; function. Note that you can cast an AV* or an HV* to type SV* in this case (and many others). This allows you to take references to arrays, hashes and scalars with the same function. Conversely, the &lt;code&gt;SvRV&lt;/code&gt; function always returns an SV*, which may need to be cast to the appropriate type if it is something other than a scalar (check with &lt;code&gt;SvTYPE&lt;/code&gt; ).</source>
          <target state="translated">参照を作成するには、 &lt;code&gt;newRV&lt;/code&gt; 関数を使用します。この場合（および他の多く）、AV *またはHV *をキャストしてSV *を入力できます。これにより、同じ関数で配列、ハッシュ、スカラーへの参照を取得できます。逆に、 &lt;code&gt;SvRV&lt;/code&gt; 関数は常にSV *を返します。これがスカラー以外の場合は、適切な型にキャストする必要がある場合があります（ &lt;code&gt;SvTYPE&lt;/code&gt; で確認してください）。</target>
        </trans-unit>
        <trans-unit id="76c3711b1f4442657fc38b46f51a53e19c63e499" translate="yes" xml:space="preserve">
          <source>To create a reference, we use the &lt;code&gt;newRV_inc&lt;/code&gt; function. Note that you can cast an AV* or an HV* to type SV* in this case (and many others). This allows you to take references to arrays, hashes and scalars with the same function. Conversely, the &lt;code&gt;SvRV&lt;/code&gt; function always returns an SV*, which may need to be cast to the appropriate type if it is something other than a scalar (check with &lt;code&gt;SvTYPE&lt;/code&gt;).</source>
          <target state="translated">参照を作成するには、 &lt;code&gt;newRV_inc&lt;/code&gt; 関数を使用します。この場合（および他の多くの場合）、AV *またはHV *をキャストしてSV *と入力できることに注意してください。これにより、同じ関数で配列、ハッシュ、およびスカラーへの参照を取得できます。逆に、 &lt;code&gt;SvRV&lt;/code&gt; 関数は常にSV *を返します。これがスカラー以外の場合は、適切な型にキャストする必要があります（ &lt;code&gt;SvTYPE&lt;/code&gt; で確認してください）。</target>
        </trans-unit>
        <trans-unit id="f750d278ece92b690ce083757a8b99d17e4a1cc6" translate="yes" xml:space="preserve">
          <source>To create a shared library, the following steps must be performed:</source>
          <target state="translated">共有ライブラリを作成するには、以下の手順を実行する必要があります。</target>
        </trans-unit>
        <trans-unit id="3c6eb343e88be36bc92d3d97f3219df475d3ded3" translate="yes" xml:space="preserve">
          <source>To create a zip file, &lt;code&gt;output.zip&lt;/code&gt; , that contains the compressed contents of the files &lt;code&gt;alpha.txt&lt;/code&gt; and &lt;code&gt;beta.txt&lt;/code&gt;</source>
          <target state="translated">ファイル &lt;code&gt;alpha.txt&lt;/code&gt; および &lt;code&gt;beta.txt&lt;/code&gt; の圧縮されたコンテンツを含むzipファイル &lt;code&gt;output.zip&lt;/code&gt; を作成するには</target>
        </trans-unit>
        <trans-unit id="4b6ff2c8131533c1aec284cd279aab620b4a7896" translate="yes" xml:space="preserve">
          <source>To create a zip file, &lt;code&gt;output.zip&lt;/code&gt;, that contains the compressed contents of the files &lt;code&gt;alpha.txt&lt;/code&gt; and &lt;code&gt;beta.txt&lt;/code&gt;</source>
          <target state="translated">zipファイル、作成するために &lt;code&gt;output.zip&lt;/code&gt; 、ファイルの圧縮された内容が含まれてい &lt;code&gt;alpha.txt&lt;/code&gt; と &lt;code&gt;beta.txt&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a8a9c4100fca7c9df2f642138fcef0fc96929592" translate="yes" xml:space="preserve">
          <source>To create an HV, you use the following routine:</source>
          <target state="translated">HVを作成するには、以下のルーチンを使用します。</target>
        </trans-unit>
        <trans-unit id="0094ef6c2580e3be5fb982924088c9990a9a669b" translate="yes" xml:space="preserve">
          <source>To create an RFC 1950 data stream, set &lt;code&gt;WindowBits&lt;/code&gt; to a positive number.</source>
          <target state="translated">RFC 1950データストリームを作成するには、 &lt;code&gt;WindowBits&lt;/code&gt; を正の数に設定します。</target>
        </trans-unit>
        <trans-unit id="c43fa53c9a4af41c4362a70dd0d3da19011de429" translate="yes" xml:space="preserve">
          <source>To create an RFC 1951 data stream, set &lt;code&gt;WindowBits&lt;/code&gt; to &lt;code&gt;-MAX_WBITS&lt;/code&gt; .</source>
          <target state="translated">RFC 1951データストリームを作成するには、 &lt;code&gt;WindowBits&lt;/code&gt; を &lt;code&gt;-MAX_WBITS&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="04500f8f7e1689707f89183f5977f70d07b39e1b" translate="yes" xml:space="preserve">
          <source>To create an RFC 1951 data stream, set &lt;code&gt;WindowBits&lt;/code&gt; to &lt;code&gt;-MAX_WBITS&lt;/code&gt;.</source>
          <target state="translated">RFC 1951データストリームを作成するには、 &lt;code&gt;WindowBits&lt;/code&gt; を &lt;code&gt;-MAX_WBITS&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="dbb0b362cb67cdcf254362d24dcd3489205dd8b1" translate="yes" xml:space="preserve">
          <source>To create your own result types you have two options:</source>
          <target state="translated">独自の結果タイプを作成するには、2つのオプションがあります。</target>
        </trans-unit>
        <trans-unit id="948e86a50124d6c16a2bb795d3ad5dd4ba16fd66" translate="yes" xml:space="preserve">
          <source>To deallocate the memory of a &lt;b&gt;referent&lt;/b&gt; (first triggering its &lt;code&gt;DESTROY&lt;/code&gt; method, if it has one).</source>
          <target state="translated">メモリの割り当てを解除する&lt;b&gt;リファレントを&lt;/b&gt;（最初にトリガ &lt;code&gt;DESTROY&lt;/code&gt; 、それが1つを持っている場合、メソッド）。</target>
        </trans-unit>
        <trans-unit id="684b7eba474ceeeee203e03efc4972ceab5f4011" translate="yes" xml:space="preserve">
          <source>To declare a file-private variable, you still use a lexical variable. A file is also a scope, so a lexical variable defined in the file cannot be seen from any other file.</source>
          <target state="translated">ファイル-プライベート変数を宣言するには、やはり字句変数を使用します。ファイルはスコープでもあるので、そのファイルで定義された字句変数は他のファイルからは見ることができません。</target>
        </trans-unit>
        <trans-unit id="26f359ab42151643a554fcca60e916cbc3b8c6c1" translate="yes" xml:space="preserve">
          <source>To declare multiple parents, you simply need to pass multiple class names to &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; parent&lt;/code&gt; :</source>
          <target state="translated">複数の親を宣言するには、複数のクラス名を渡して &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; parent&lt;/code&gt; を&lt;a href=&quot;functions/use&quot;&gt;使用&lt;/a&gt;するだけです。</target>
        </trans-unit>
        <trans-unit id="4bb1aac304b6e2bad9b2c8e30ae0f6a69783e20b" translate="yes" xml:space="preserve">
          <source>To declare multiple parents, you simply need to pass multiple class names to &lt;code&gt;use parent&lt;/code&gt;:</source>
          <target state="translated">複数の親を宣言するに &lt;code&gt;use parent&lt;/code&gt; を使用するために複数のクラス名を渡す必要があります。</target>
        </trans-unit>
        <trans-unit id="195f600c4f130988d6cb960024f570abb452421b" translate="yes" xml:space="preserve">
          <source>To declare subroutines:</source>
          <target state="translated">サブルーチンを宣言する。</target>
        </trans-unit>
        <trans-unit id="d689355c5c4c25b69703a4f888325a4f315e40d5" translate="yes" xml:space="preserve">
          <source>To decode the string, use the &lt;code&gt;uri_unescape&lt;/code&gt; function:</source>
          <target state="translated">文字列をデコードするには、 &lt;code&gt;uri_unescape&lt;/code&gt; 関数を使用します。</target>
        </trans-unit>
        <trans-unit id="c00b1b3082eeba042c1321adab39b3572b77ab5f" translate="yes" xml:space="preserve">
          <source>To define a new encoding, use:</source>
          <target state="translated">新しいエンコーディングを定義するには</target>
        </trans-unit>
        <trans-unit id="90539d229e0f3e1882d607e70d036357967dd42b" translate="yes" xml:space="preserve">
          <source>To define an anonymous subroutine at runtime:</source>
          <target state="translated">実行時に匿名サブルーチンを定義する。</target>
        </trans-unit>
        <trans-unit id="c9cdf944c5644c128ca4890eae1d815775404ea8" translate="yes" xml:space="preserve">
          <source>To define your own variables, simply add them to the hash, or change existing values if you need to. The level and format are passed in as references to scalars, but it is unlikely that they will need to be changed or even used.</source>
          <target state="translated">独自の変数を定義するには、ハッシュに追加するか、必要であれば既存の値を変更するだけです。レベルとフォーマットはスカラへの参照として渡されますが、それらを変更したり使用したりする必要はないでしょう。</target>
        </trans-unit>
        <trans-unit id="663c37fcccd4eb9d16f3753290874adfe0a38adc" translate="yes" xml:space="preserve">
          <source>To delete a filter pass &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; to it.</source>
          <target state="translated">フィルターを削除するには、 &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; をそれに渡します。</target>
        </trans-unit>
        <trans-unit id="13cdb92e706e9bc2ee9e805b13be6097ddaf3e74" translate="yes" xml:space="preserve">
          <source>To delete a filter pass &lt;code&gt;undef&lt;/code&gt; to it.</source>
          <target state="translated">フィルタを削除するには、 &lt;code&gt;undef&lt;/code&gt; をそれに渡します。</target>
        </trans-unit>
        <trans-unit id="c6700a8c11e3d4c6c50392505cb5fdaeda8fab3d" translate="yes" xml:space="preserve">
          <source>To delete a partition, zero out all fields except for &lt;code&gt;$bToRewrite&lt;/code&gt; which should be set to &lt;code&gt;1&lt;/code&gt;. To add a partition, increment &lt;code&gt;$cPartitions&lt;/code&gt; and add the information for the new partition into the arrays, making sure that you insert &lt;code&gt;1&lt;/code&gt; into @bToRewrite.</source>
          <target state="translated">パーティションを削除するには、 &lt;code&gt;1&lt;/code&gt; に設定する必要がある &lt;code&gt;$bToRewrite&lt;/code&gt; を除くすべてのフィールドをゼロにします。パーティションを追加するには、 &lt;code&gt;$cPartitions&lt;/code&gt; をインクリメントし、新しいパーティションの情報を配列に追加します。必ず@bToRewriteに &lt;code&gt;1&lt;/code&gt; を挿入してください。</target>
        </trans-unit>
        <trans-unit id="a7282a69c7ceaa80a01f9176cf957edc11cea4de" translate="yes" xml:space="preserve">
          <source>To delete lines, only print the ones that you want.</source>
          <target state="translated">行を削除するには、必要な行だけを印刷します。</target>
        </trans-unit>
        <trans-unit id="c1469f4d29b40fb0b7ab86c2c4e92578f7c6eb9f" translate="yes" xml:space="preserve">
          <source>To determine at runtime if this capability has been compiled in your perl, you can check the value of &lt;code&gt;$Config{usesitecustomize}&lt;/code&gt; .</source>
          <target state="translated">この機能がPerlでコンパイルされているかどうかを実行時に判別するには、 &lt;code&gt;$Config{usesitecustomize}&lt;/code&gt; 値を確認できます。</target>
        </trans-unit>
        <trans-unit id="e519c90ecace9cdd9ef4f4b53067e00b66728320" translate="yes" xml:space="preserve">
          <source>To determine at runtime if this capability has been compiled in your perl, you can check the value of &lt;code&gt;$Config{usesitecustomize}&lt;/code&gt;.</source>
          <target state="translated">この機能がperlでコンパイルされているかどうかを実行時に判断するには、 &lt;code&gt;$Config{usesitecustomize}&lt;/code&gt; 値を確認します。</target>
        </trans-unit>
        <trans-unit id="9ac9c1626cb28585a5803d5d3d2ce1edde74347f" translate="yes" xml:space="preserve">
          <source>To determine if a module came with your version of Perl, you can install and use the &lt;a href=&quot;Module::CoreList&quot;&gt;Module::CoreList&lt;/a&gt; module. It has the information about the modules (with their versions) included with each release of Perl.</source>
          <target state="translated">モジュールがご使用のバージョンのPerlに付属しているかどうかを判断するには、&lt;a href=&quot;Module::CoreList&quot;&gt;Module :: CoreList&lt;/a&gt;モジュールをインストールして使用できます。Perlの各リリースに含まれているモジュール（およびそのバージョン）に関する情報が含まれています。</target>
        </trans-unit>
        <trans-unit id="5ce033ec9e41969bd8c16961760514dcb521d365" translate="yes" xml:space="preserve">
          <source>To determine if a module came with your version of Perl, you can install and use the &lt;a href=&quot;module/corelist&quot;&gt;Module::CoreList&lt;/a&gt; module. It has the information about the modules (with their versions) included with each release of Perl.</source>
          <target state="translated">モジュールがご使用のバージョンのPerlに付属しているかどうかを判別するには、&lt;a href=&quot;module/corelist&quot;&gt;Module :: CoreList&lt;/a&gt;モジュールをインストールして使用できます。Perlの各リリースに含まれるモジュール（およびそのバージョン）に関する情報が含まれています。</target>
        </trans-unit>
        <trans-unit id="a3640814314afd9f7ac9d11a68cf889d6f47fec5" translate="yes" xml:space="preserve">
          <source>To determine if a string is in Unicode, use:</source>
          <target state="translated">文字列が Unicode かどうかを判断するには、以下を使用します。</target>
        </trans-unit>
        <trans-unit id="bca0ec2b6522f981d9c11831a03f1f68a8800f50" translate="yes" xml:space="preserve">
          <source>To determine if an SV is a reference, you can use the following macro:</source>
          <target state="translated">SV が参照であるかどうかを判断するには、以下のマクロを使用します。</target>
        </trans-unit>
        <trans-unit id="c9936c817f7d3f0a431d8c4cc266d4265437482c" translate="yes" xml:space="preserve">
          <source>To determine if you are running under ASCII or EBCDIC, you can use the return value of &lt;code&gt;&lt;a href=&quot;functions/ord&quot;&gt;ord()&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/chr&quot;&gt;chr()&lt;/a&gt;&lt;/code&gt; to test one or more character values. For example:</source>
          <target state="translated">ASCIIとEBCDICのどちらで実行しているかを判別するには、 &lt;code&gt;&lt;a href=&quot;functions/ord&quot;&gt;ord()&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;functions/chr&quot;&gt;chr()&lt;/a&gt;&lt;/code&gt; の戻り値を使用して、1つ以上の文字値をテストできます。例えば：</target>
        </trans-unit>
        <trans-unit id="c4d19f268a46b2039ad626d07491613ba196e3ba" translate="yes" xml:space="preserve">
          <source>To determine if you are running under ASCII or EBCDIC, you can use the return value of &lt;code&gt;ord()&lt;/code&gt; or &lt;code&gt;chr()&lt;/code&gt; to test one or more character values. For example:</source>
          <target state="translated">ASCIIまたはEBCDICのどちらで実行しているかを判別するには、 &lt;code&gt;ord()&lt;/code&gt; または &lt;code&gt;chr()&lt;/code&gt; の戻り値を使用して、1つ以上の文字値をテストできます。例えば：</target>
        </trans-unit>
        <trans-unit id="86e75dff4a5cb692b3db4e186257a30b993c598a" translate="yes" xml:space="preserve">
          <source>To determine whether or not perl was built under an EBCDIC code page you can use the Config module like so:</source>
          <target state="translated">perlがEBCDICコードページの下でビルドされたかどうかを判断するには、次のようにConfigモジュールを使用することができます。</target>
        </trans-unit>
        <trans-unit id="c7ca989a561cc6bb21cb242f3f9a4867fcc2a0a2" translate="yes" xml:space="preserve">
          <source>To determine which category a specific warning has been assigned to see &lt;a href=&quot;perldiag&quot;&gt;perldiag&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;perldiag&quot;&gt;perldiag&lt;/a&gt;を表示するために特定の警告が割り当てられているカテゴリを特定するには。</target>
        </trans-unit>
        <trans-unit id="a93e35e1721136bbf3e35a386749266ad37800e0" translate="yes" xml:space="preserve">
          <source>To die with a simple string message, the &lt;a href=&quot;#croak&quot;&gt;&quot;croak&quot;&lt;/a&gt; function may be more convenient.</source>
          <target state="translated">単純な文字列メッセージで死ぬには、&lt;a href=&quot;#croak&quot;&gt;「croak」&lt;/a&gt;機能の方が便利な場合があります。</target>
        </trans-unit>
        <trans-unit id="d2650be423c3da22a5978107c38e624c70d0e420" translate="yes" xml:space="preserve">
          <source>To die with a simple string message, the &lt;a href=&quot;#croak&quot;&gt;croak&lt;/a&gt; function may be more convenient.</source>
          <target state="translated">単純な文字列メッセージで死ぬには、&lt;a href=&quot;#croak&quot;&gt;クローク&lt;/a&gt;機能の方が便利な場合があります。</target>
        </trans-unit>
        <trans-unit id="1dfd486790a39158f4a7ca56ddcfea76a7b570b2" translate="yes" xml:space="preserve">
          <source>To disable blessing objects while thawing/retrieving remove the flag &lt;code&gt;BLESS_OK&lt;/code&gt; = 2 from &lt;code&gt;$Storable::flags&lt;/code&gt; or set the 2nd argument for thaw/retrieve to 0.</source>
          <target state="translated">解凍/取得中に祝福オブジェクトを無効にするには、フラグ &lt;code&gt;BLESS_OK&lt;/code&gt; = 2を &lt;code&gt;$Storable::flags&lt;/code&gt; から削除するか、解凍/取得の2番目の引数を0に設定します。</target>
        </trans-unit>
        <trans-unit id="347758299b3b52a08c513c37128e636634230c65" translate="yes" xml:space="preserve">
          <source>To disable prototypes:</source>
          <target state="translated">プロトタイプを無効にする。</target>
        </trans-unit>
        <trans-unit id="5d0844b4d1a693267fe5fcf752c200ff27d0a20a" translate="yes" xml:space="preserve">
          <source>To disable scoping:</source>
          <target state="translated">スコーピングを無効にします。</target>
        </trans-unit>
        <trans-unit id="49438a7c7aac56a61be90484df5f68db7923a254" translate="yes" xml:space="preserve">
          <source>To disable the feature and, if applicable, re-enable any warnings, use:</source>
          <target state="translated">この機能を無効にし、必要に応じて警告を再有効にするには、以下の手順を使用します。</target>
        </trans-unit>
        <trans-unit id="6a2e4cf0ee9b26b39ec068b4b4c9bcaa2ebda9e0" translate="yes" xml:space="preserve">
          <source>To disable this check, set this variable to &lt;code&gt;false&lt;/code&gt; .</source>
          <target state="translated">このチェックを無効にするには、この変数を &lt;code&gt;false&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="3ff637f529a61890918adfda94de235cbe32273b" translate="yes" xml:space="preserve">
          <source>To disable this check, set this variable to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">このチェックを無効にするには、この変数を &lt;code&gt;false&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="b80cbb6c9445e33c66e64e8bbc664c2dc7cb143d" translate="yes" xml:space="preserve">
          <source>To disable this default safe mode, set these values to something higher than 0. At a level of 1, you get backtraces upon receiving any kind of warning (this is often annoying) or exception (this is often valuable). Unfortunately, the debugger cannot discern fatal exceptions from non-fatal ones. If &lt;code&gt;dieLevel&lt;/code&gt; is even 1, then your non-fatal exceptions are also traced and unceremoniously altered if they came from &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval'ed&lt;/a&gt;&lt;/code&gt; strings or from any kind of &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; within modules you're attempting to load. If &lt;code&gt;dieLevel&lt;/code&gt; is 2, the debugger doesn't care where they came from: It usurps your exception handler and prints out a trace, then modifies all exceptions with its own embellishments. This may perhaps be useful for some tracing purposes, but tends to hopelessly destroy any program that takes its exception handling seriously.</source>
          <target state="translated">このデフォルトのセーフモードを無効にするには、これらの値を0より大きい値に設定します。レベル1で、何らかの警告（これは多くの場合厄介です）または例外（これは多くの場合貴重です）を受信するとバックトレースを取得します。残念ながら、デバッガは致命的でない例外と致命的でないものを区別できません。 &lt;code&gt;dieLevel&lt;/code&gt; が1の場合でも、致命的でない例外はトレースされ、ロードしようとしているモジュール内の &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; された文字列または任意の種類のevalからのものである場合、 &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval'ed&lt;/a&gt;&lt;/code&gt; 変更されます。 &lt;code&gt;dieLevel&lt;/code&gt; の場合2の場合、デバッガーはそれらがどこから来たかを気にしません。例外ハンドラーを奪い、トレースを出力してから、独自の装飾ですべての例外を変更します。これはおそらくトレースの目的には役立つかもしれませんが、例外処理を真剣に受け止めるプログラムを絶望的に破壊する傾向があります。</target>
        </trans-unit>
        <trans-unit id="cb4293ab3018dc6b8d0d5076e39654c8c02af5e2" translate="yes" xml:space="preserve">
          <source>To disable this default safe mode, set these values to something higher than 0. At a level of 1, you get backtraces upon receiving any kind of warning (this is often annoying) or exception (this is often valuable). Unfortunately, the debugger cannot discern fatal exceptions from non-fatal ones. If &lt;code&gt;dieLevel&lt;/code&gt; is even 1, then your non-fatal exceptions are also traced and unceremoniously altered if they came from &lt;code&gt;eval'ed&lt;/code&gt; strings or from any kind of &lt;code&gt;eval&lt;/code&gt; within modules you're attempting to load. If &lt;code&gt;dieLevel&lt;/code&gt; is 2, the debugger doesn't care where they came from: It usurps your exception handler and prints out a trace, then modifies all exceptions with its own embellishments. This may perhaps be useful for some tracing purposes, but tends to hopelessly destroy any program that takes its exception handling seriously.</source>
          <target state="translated">このデフォルトのセーフモードを無効にするには、これらの値を0より大きい値に設定します。レベル1では、何らかの警告（これは多くの場合迷惑です）または例外（これは多くの場合価値があります）を受信するとバックトレースを取得します。残念ながら、デバッガーは致命的な例外と致命的でない例外を区別できません。 &lt;code&gt;dieLevel&lt;/code&gt; が1の場合でも、致命的ではない例外もトレースされ、 &lt;code&gt;eval&lt;/code&gt; れた文字列またはロードしようとしているモジュール内の任意の種類の評価から &lt;code&gt;eval'ed&lt;/code&gt; 場合は、不用意に変更されます。 &lt;code&gt;dieLevel&lt;/code&gt; の場合が2の場合、デバッガーはそれらがどこから来たのかを気にしません。例外ハンドラーを使用してトレースを出力し、すべての例外を独自の装飾で変更します。これは、トレースの目的にはおそらく役立つかもしれませんが、例外処理を真剣に受け止めているプログラムを絶望的に破壊する傾向があります。</target>
        </trans-unit>
        <trans-unit id="775ac8e4b166c7efdd67d5a474126369cafcedff" translate="yes" xml:space="preserve">
          <source>To disable tieing data while thawing/retrieving remove the flag &lt;code&gt;TIE_OK&lt;/code&gt; = 4 from &lt;code&gt;$Storable::flags&lt;/code&gt; or set the 2nd argument for thaw/retrieve to 0.</source>
          <target state="translated">解凍/取得中にデータの &lt;code&gt;TIE_OK&lt;/code&gt; を無効にするには、フラグTIE_OK = 4を &lt;code&gt;$Storable::flags&lt;/code&gt; から削除するか、解凍/取得の2番目の引数を0に設定します。</target>
        </trans-unit>
        <trans-unit id="8d156c08336acd4fd9a2800ec24f479a8112dea4" translate="yes" xml:space="preserve">
          <source>To disable version checking:</source>
          <target state="translated">バージョンチェックを無効にするには</target>
        </trans-unit>
        <trans-unit id="738a71c259ac0a8afb90292476b05521cb3a2b41" translate="yes" xml:space="preserve">
          <source>To disallow the use of, for example, &lt;code&gt;LWP&lt;/code&gt; and &lt;code&gt;Net::FTP&lt;/code&gt; , you could set $File::Fetch::BLACKLIST to:</source>
          <target state="translated">&lt;code&gt;LWP&lt;/code&gt; や &lt;code&gt;Net::FTP&lt;/code&gt; などの使用を禁止するには、$ File :: Fetch :: BLACKLISTを次のように設定します。</target>
        </trans-unit>
        <trans-unit id="8c3ea5cb60afc12efc66dbc5590a051167db7a27" translate="yes" xml:space="preserve">
          <source>To disallow the use of, for example, &lt;code&gt;LWP&lt;/code&gt; and &lt;code&gt;Net::FTP&lt;/code&gt;, you could set $File::Fetch::BLACKLIST to:</source>
          <target state="translated">たとえば、 &lt;code&gt;LWP&lt;/code&gt; や &lt;code&gt;Net::FTP&lt;/code&gt; の使用を禁止するには、$ File :: Fetch :: BLACKLISTを次のように設定します。</target>
        </trans-unit>
        <trans-unit id="80dd5fada40953f3424fd8a183a453e068557bb1" translate="yes" xml:space="preserve">
          <source>To discover what type of value the reference refers to, use the following macro and then check the return value.</source>
          <target state="translated">参照が参照している値のタイプを検出するには、以下のマクロを使用して、戻り値を確認します。</target>
        </trans-unit>
        <trans-unit id="8fc94d5f52eb1139b287df828008badfb6c3e089" translate="yes" xml:space="preserve">
          <source>To display and change the libnet configuration run the libnetcfg command.</source>
          <target state="translated">libnetの設定を表示・変更するには、libnetcfgコマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="60ed656a96349b78cdba5a83471f5324d8dd1e87" translate="yes" xml:space="preserve">
          <source>To display the results you use the</source>
          <target state="translated">結果を表示するには</target>
        </trans-unit>
        <trans-unit id="2ac49a31f43cbe10ed9c501335f1421ecc6af0bb" translate="yes" xml:space="preserve">
          <source>To do it correctly, you can use one of the &lt;code&gt;Date&lt;/code&gt; modules since they work with calendars instead of times. The &lt;a href=&quot;datetime&quot;&gt;DateTime&lt;/a&gt; module makes it simple, and give you the same time of day, only the day before, despite daylight saving time changes:</source>
          <target state="translated">これを正しく行うには、 &lt;code&gt;Date&lt;/code&gt; モジュールの1つを使用できます。これは、時刻ではなくカレンダーで機能するためです。&lt;a href=&quot;datetime&quot;&gt;DateTime&lt;/a&gt;モジュールは、夏時間の変更にもかかわらず、それが簡単になり、そしてあなたの一日の同じ時間、前だけの日を与えます：</target>
        </trans-unit>
        <trans-unit id="ad781551179d37e74d6f0377992b51ea7bdaace0" translate="yes" xml:space="preserve">
          <source>To do it correctly, you can use one of the &lt;code&gt;Date&lt;/code&gt; modules since they work with calendars instead of times. The &lt;a href=&quot;http://search.cpan.org/perldoc/DateTime&quot;&gt;DateTime&lt;/a&gt; module makes it simple, and give you the same time of day, only the day before, despite daylight saving time changes:</source>
          <target state="translated">これを正しく行うには、 &lt;code&gt;Date&lt;/code&gt; モジュールの1つを使用できます。これらは時間ではなくカレンダーで機能するためです。&lt;a href=&quot;http://search.cpan.org/perldoc/DateTime&quot;&gt;DateTime&lt;/a&gt;モジュールは、夏時間の変更にもかかわらず、それが簡単になり、そしてあなたの一日の同じ時間、前だけの日を与えます：</target>
        </trans-unit>
        <trans-unit id="9370a32c5a26795ae66ed04fd1bbf4641dcb50f3" translate="yes" xml:space="preserve">
          <source>To do so, PerlIO always calls (de|en)code methods with CHECK set to 1. This ensures that the method stops at the right place when it encounters partial character. The following is what happens when PerlIO and Encode tries to encode (from utf8) more than 1024 bytes and the buffer boundary happens to be in the middle of a character.</source>
          <target state="translated">そのために、PerlIOは常にCHECKを1に設定して(de|en)codeメソッドを呼び出しています。 これにより、部分文字に遭遇したときにメソッドが正しい場所で停止することを保証しています。以下は、PerlIO と Encode が (utf8 から)1024 バイト以上のエンコードをしようとしたときに、バッファの境界が文字の途中にあった場合に起こることを示しています。</target>
        </trans-unit>
        <trans-unit id="e288609d3f494ae8be47d7fabedf138f3b357269" translate="yes" xml:space="preserve">
          <source>To do the equivalent of &lt;code&gt;cp -R&lt;/code&gt; (i.e. copy an entire directory tree recursively) in portable Perl, you'll either need to write something yourself or find a good CPAN module such as &lt;a href=&quot;File::Copy::Recursive&quot;&gt;File::Copy::Recursive&lt;/a&gt;.</source>
          <target state="translated">ポータブルPerlで &lt;code&gt;cp -R&lt;/code&gt; と同等の処理を行う（つまり、ディレクトリツリー全体を再帰的にコピーする）には、自分で何かを作成するか、&lt;a href=&quot;File::Copy::Recursive&quot;&gt;File :: Copy :: Recursive&lt;/a&gt;などの適切なCPANモジュールを見つける必要があります。</target>
        </trans-unit>
        <trans-unit id="f1d6265a7b40372fb699b2b2f27a1df7b8f80a66" translate="yes" xml:space="preserve">
          <source>To do the equivalent of &lt;code&gt;cp -R&lt;/code&gt; (i.e. copy an entire directory tree recursively) in portable Perl, you'll either need to write something yourself or find a good CPAN module such as &lt;a href=&quot;http://search.cpan.org/perldoc/File::Copy::Recursive&quot;&gt;File::Copy::Recursive&lt;/a&gt;.</source>
          <target state="translated">ポータブルPerl で &lt;code&gt;cp -R&lt;/code&gt; （つまり、ディレクトリツリー全体を再帰的にコピーする）と同等のことを行うには、自分で何かを書くか、&lt;a href=&quot;http://search.cpan.org/perldoc/File::Copy::Recursive&quot;&gt;File :: Copy :: Recursive&lt;/a&gt;などの優れたCPANモジュールを見つける必要があります。</target>
        </trans-unit>
        <trans-unit id="800198c8e77892b2ea37f8a62c33fb5be9843971" translate="yes" xml:space="preserve">
          <source>To do this we need to produce a program by parsing the text. We then need to execute the program to find the point in the string that matches. And we need to do the whole thing efficiently.</source>
          <target state="translated">これを行うには、テキストを解析してプログラムを作成する必要があります。そして、そのプログラムを実行して、文字列の中から一致するポイントを見つける必要があります。そして、全体を効率的に行う必要があります。</target>
        </trans-unit>
        <trans-unit id="b3b368d6bf057c7196323316138f2bb623cf857e" translate="yes" xml:space="preserve">
          <source>To do this you need to store a copy of the object returned from the tie.</source>
          <target state="translated">そのためには、タイから返されたオブジェクトのコピーを保存する必要があります。</target>
        </trans-unit>
        <trans-unit id="16944f02408f01608a70adc6c00bddd6a6f21c5d" translate="yes" xml:space="preserve">
          <source>To do this, declare the XSUB as</source>
          <target state="translated">これを行うには、XSUB を</target>
        </trans-unit>
        <trans-unit id="9ba25feb906f9144f135e56832aaff07eb5da168" translate="yes" xml:space="preserve">
          <source>To do this, simple invoke the redispatch as:</source>
          <target state="translated">これを行うには、単純に redispatch を as として呼び出します。</target>
        </trans-unit>
        <trans-unit id="c76098aac2b117e4e74346d50713bf96ac98a839" translate="yes" xml:space="preserve">
          <source>To do this, you can either extend an existing &lt;a href=&quot;TAP::Formatter&quot;&gt;TAP::Formatter&lt;/a&gt;, or write your own. Writing formatters are a bit more involved than writing a</source>
          <target state="translated">これを行うには、既存の&lt;a href=&quot;TAP::Formatter&quot;&gt;TAP :: Formatterを&lt;/a&gt;拡張するか、独自に作成します。フォーマッターの作成は、作成よりも少し複雑です。</target>
        </trans-unit>
        <trans-unit id="bab21cf4aaf0dd1470c7bbbf3e1fd1618a699e4e" translate="yes" xml:space="preserve">
          <source>To do this, you can either extend an existing &lt;a href=&quot;TAP::Parser::SourceHandler&quot;&gt;TAP::Parser::SourceHandler&lt;/a&gt;, or write your own. It's a pretty simple API, and they can be loaded and configured using the &lt;code&gt;sources&lt;/code&gt; parameter to &lt;a href=&quot;#new&quot;&gt;&quot;new&quot;&lt;/a&gt;.</source>
          <target state="translated">これを行うには、既存の&lt;a href=&quot;TAP::Parser::SourceHandler&quot;&gt;TAP :: Parser :: SourceHandlerを&lt;/a&gt;拡張するか、独自に作成します。これは非常に単純なAPIであり、 &lt;code&gt;sources&lt;/code&gt; パラメーターを使用して&lt;a href=&quot;#new&quot;&gt;「new」に&lt;/a&gt;ロードおよび構成できます。</target>
        </trans-unit>
        <trans-unit id="2b963497fc0bd80a2ad6cd72e920bb19d3acf535" translate="yes" xml:space="preserve">
          <source>To do this, you can either extend an existing &lt;a href=&quot;http://search.cpan.org/perldoc/TAP::Formatter&quot;&gt;TAP::Formatter&lt;/a&gt;, or write your own. Writing formatters are a bit more involved than writing a</source>
          <target state="translated">これを行うには、既存の&lt;a href=&quot;http://search.cpan.org/perldoc/TAP::Formatter&quot;&gt;TAP :: Formatterを&lt;/a&gt;拡張するか、独自のものを作成します。フォーマッタを書くことは、書くことよりも少し複雑です</target>
        </trans-unit>
        <trans-unit id="4d922248445626035fad600ec3b500e3d07eeccb" translate="yes" xml:space="preserve">
          <source>To do this, you can either extend an existing &lt;a href=&quot;parser/sourcehandler&quot;&gt;TAP::Parser::SourceHandler&lt;/a&gt;, or write your own. It's a pretty simple API, and they can be loaded and configured using the &lt;code&gt;sources&lt;/code&gt; parameter to &lt;a href=&quot;#new&quot;&gt;new&lt;/a&gt;.</source>
          <target state="translated">これを行うには、既存の&lt;a href=&quot;parser/sourcehandler&quot;&gt;TAP :: Parser :: SourceHandlerを&lt;/a&gt;拡張するか、独自のものを作成します。これはかなり単純なAPIであり、 &lt;code&gt;sources&lt;/code&gt; パラメーターを使用して&lt;a href=&quot;#new&quot;&gt;newに&lt;/a&gt;ロードおよび構成できます。</target>
        </trans-unit>
        <trans-unit id="c9af8e6fc2b2d44ed39a720480b5eca952598206" translate="yes" xml:space="preserve">
          <source>To do this, you have to parse out each word in the input stream. We'll pretend that by word you mean chunk of alphabetics, hyphens, or apostrophes, rather than the non-whitespace chunk idea of a word given in the previous question:</source>
          <target state="translated">これを行うには、入力ストリームの各単語を解析しなければなりません。単語とは、前の質問で与えられた単語の非空白の塊のアイデアではなく、アルファベット、ハイフン、アポストロフィーの塊を意味していると仮定してみましょう。</target>
        </trans-unit>
        <trans-unit id="6deb2232b7d100aa506f8d7a9be0b44c33bb7cba" translate="yes" xml:space="preserve">
          <source>To do this, you need to inform &lt;code&gt;WriteMakeFile()&lt;/code&gt; in your</source>
          <target state="translated">これを行うには、で &lt;code&gt;WriteMakeFile()&lt;/code&gt; に通知する必要があります</target>
        </trans-unit>
        <trans-unit id="a594dc0644909bfef7173f1f8eb29922809128db" translate="yes" xml:space="preserve">
          <source>To do what you meant properly, you must write:</source>
          <target state="translated">きちんと意味することをするためには、書かなければなりません。</target>
        </trans-unit>
        <trans-unit id="da74a36079576adc88b6c00e82f57a05912e49d0" translate="yes" xml:space="preserve">
          <source>To do your own error handling, call this function with the &lt;code&gt;UTF8_CHECK_ONLY&lt;/code&gt; flag to suppress any warnings, and then examine the &lt;code&gt;*errors&lt;/code&gt; return.</source>
          <target state="translated">独自のエラー処理を行うには、 &lt;code&gt;UTF8_CHECK_ONLY&lt;/code&gt; フラグを指定してこの関数を呼び出して警告を抑制してから、 &lt;code&gt;*errors&lt;/code&gt; 返されるかどうかを調べます。</target>
        </trans-unit>
        <trans-unit id="d3e2fbf11b8c81738d92b26c858673a8798bed9d" translate="yes" xml:space="preserve">
          <source>To emphasize that you are operating only on ASCII characters, you can append &lt;code&gt;_A&lt;/code&gt; to each of the macros in the ASCII column: &lt;code&gt;isALPHA_A&lt;/code&gt; , &lt;code&gt;isDIGIT_A&lt;/code&gt; , and so on.</source>
          <target state="translated">ASCII文字のみで操作していることを強調するために、ASCII列の各マクロ（ &lt;code&gt;isALPHA_A&lt;/code&gt; 、 &lt;code&gt;isDIGIT_A&lt;/code&gt; など）に &lt;code&gt;_A&lt;/code&gt; を追加できます。</target>
        </trans-unit>
        <trans-unit id="a0a83e62e85a9a106da5ff1e3e3b0371178b7026" translate="yes" xml:space="preserve">
          <source>To emphasize that you are operating only on ASCII characters, you can append &lt;code&gt;_A&lt;/code&gt; to each of the macros in the ASCII column: &lt;code&gt;isALPHA_A&lt;/code&gt;, &lt;code&gt;isDIGIT_A&lt;/code&gt;, and so on.</source>
          <target state="translated">ASCII文字のみを操作していることを強調するために、ASCII列の各マクロ（ &lt;code&gt;isALPHA_A&lt;/code&gt; 、 &lt;code&gt;isDIGIT_A&lt;/code&gt; など）に &lt;code&gt;_A&lt;/code&gt; を追加できます。</target>
        </trans-unit>
        <trans-unit id="7d42b2af4b68e58610fc5bf7b2aa1e720d762bd6" translate="yes" xml:space="preserve">
          <source>To enable colouring from the command line, you can use the &lt;a href=&quot;Text::Builder::Tester::Color&quot;&gt;Text::Builder::Tester::Color&lt;/a&gt; module like so:</source>
          <target state="translated">コマンドラインから色付けを有効にするには、次のように&lt;a href=&quot;Text::Builder::Tester::Color&quot;&gt;Text :: Builder :: Tester :: Color&lt;/a&gt;モジュールを使用できます。</target>
        </trans-unit>
        <trans-unit id="e2f50143516f5760cd1414be18dcb711d9b307dd" translate="yes" xml:space="preserve">
          <source>To enable colouring from the command line, you can use the &lt;a href=&quot;http://search.cpan.org/perldoc/Text::Builder::Tester::Color&quot;&gt;Text::Builder::Tester::Color&lt;/a&gt; module like so:</source>
          <target state="translated">コマンドラインからカラーリングを有効にするには、&lt;a href=&quot;http://search.cpan.org/perldoc/Text::Builder::Tester::Color&quot;&gt;Text :: Builder :: Tester :: Color&lt;/a&gt;モジュールを次のように使用できます。</target>
        </trans-unit>
        <trans-unit id="9c570da316518400b84383905afc3b038138342e" translate="yes" xml:space="preserve">
          <source>To enable multiline matching one should use the &lt;code&gt;/m&lt;/code&gt; regexp modifier (possibly in combination with &lt;code&gt;/s&lt;/code&gt;). This can be set on a per match bases, or can be enabled per lexical scope (including a whole file) with &lt;code&gt;use re '/m'&lt;/code&gt;.</source>
          <target state="translated">複数行のマッチングを有効にするには、 &lt;code&gt;/m&lt;/code&gt; regexp修飾子を使用する必要があります（おそらく &lt;code&gt;/s&lt;/code&gt; と組み合わせて）。これは、一致ベースごとに設定することも、 &lt;code&gt;use re '/m'&lt;/code&gt; を使用して字句スコープ（ファイル全体を含む）ごとに有効にすることもできます。</target>
        </trans-unit>
        <trans-unit id="b01967f773567b844b2b023b2a86bde4df70fc34" translate="yes" xml:space="preserve">
          <source>To enable prototypes:</source>
          <target state="translated">プロトタイプを可能にするために</target>
        </trans-unit>
        <trans-unit id="5ccde66aca7ada9c8fed76ada1d4a0446a4f8743" translate="yes" xml:space="preserve">
          <source>To enable scoping:</source>
          <target state="translated">スコーピングを有効にする。</target>
        </trans-unit>
        <trans-unit id="767b2e0f754eeebe201f5f18e618f6b053217aac" translate="yes" xml:space="preserve">
          <source>To enable this seamless support, you should &lt;code&gt;use feature 'unicode_strings'&lt;/code&gt; (which is automatically selected if you &lt;code&gt;use 5.012&lt;/code&gt; or higher). See &lt;a href=&quot;feature&quot;&gt;feature&lt;/a&gt;. (5.14 also fixes a number of bugs and departures from the Unicode standard.)</source>
          <target state="translated">このシームレスなサポートを有効にするには、 &lt;code&gt;use feature 'unicode_strings'&lt;/code&gt; （ &lt;code&gt;use 5.012&lt;/code&gt; 以降を使用している場合は自動的に選択されます）を使用する必要があります。&lt;a href=&quot;feature&quot;&gt;機能を&lt;/a&gt;参照してください。（5.14は、Unicode標準からの多くのバグと逸脱も修正します。）</target>
        </trans-unit>
        <trans-unit id="1484f429016f98a746a3ab26c198f24bb67adaaa" translate="yes" xml:space="preserve">
          <source>To enable version checking:</source>
          <target state="translated">バージョンチェックを有効にします。</target>
        </trans-unit>
        <trans-unit id="a7615d4326dc246eeb4adafc5aa5d8082bb1cd6e" translate="yes" xml:space="preserve">
          <source>To encode a string yourself, use the &lt;a href=&quot;URI::Escape&quot;&gt;URI::Escape&lt;/a&gt; module. The &lt;code&gt;uri_escape&lt;/code&gt; function returns the escaped string:</source>
          <target state="translated">文字列を自分でエンコードするには、&lt;a href=&quot;URI::Escape&quot;&gt;URI :: Escape&lt;/a&gt;モジュールを使用します。 &lt;code&gt;uri_escape&lt;/code&gt; の機能は、エスケープされた文字列を返します。</target>
        </trans-unit>
        <trans-unit id="270b403e8cadfb40d1d97c0de3bf7642f9c98fb6" translate="yes" xml:space="preserve">
          <source>To encode a string yourself, use the &lt;a href=&quot;http://search.cpan.org/perldoc/URI::Escape&quot;&gt;URI::Escape&lt;/a&gt; module. The &lt;code&gt;uri_escape&lt;/code&gt; function returns the escaped string:</source>
          <target state="translated">文字列を自分でエンコードするには、&lt;a href=&quot;http://search.cpan.org/perldoc/URI::Escape&quot;&gt;URI :: Escape&lt;/a&gt;モジュールを使用します。 &lt;code&gt;uri_escape&lt;/code&gt; の機能は、エスケープされた文字列を返します。</target>
        </trans-unit>
        <trans-unit id="197383dea9cb9c2b7e4139f047ab7802bc1168de" translate="yes" xml:space="preserve">
          <source>To end a Pod block, use a blank line, then a line beginning with &quot;=cut&quot;, and a blank line after it. This lets Perl (and the Pod formatter) know that this is where Perl code is resuming. (The blank line before the &quot;=cut&quot; is not technically necessary, but many older Pod processors require it.)</source>
          <target state="translated">Podブロックを終了させるには、空白行を使用し、&quot;=cut &quot;で始まる行を使用し、その後に空白行を使用します。これにより、Perl (とPodフォーマッタ)は、ここでPerlのコードが再開されることを知ることができます。(「=cut」の前の空白行は技術的には必要ありませんが、多くの古いPodプロセッサでは必要とされています)</target>
        </trans-unit>
        <trans-unit id="0ae4a1a4ec134ed8922ee208a028b2c3245ebe13" translate="yes" xml:space="preserve">
          <source>To enforce scalar context in this particular case, however, you need merely omit the parentheses:</source>
          <target state="translated">しかし、この特定のケースでスカラコンテキストを強制するには、単に括弧を省略する必要があります。</target>
        </trans-unit>
        <trans-unit id="5528aa31607b22ee5ba7b25dc9ad20fd957a80a3" translate="yes" xml:space="preserve">
          <source>To ensure your Perl programs can see these newly installed modules, set your &lt;code&gt;PERL5LIB&lt;/code&gt; environment variable to</source>
          <target state="translated">Perlプログラムがこれらの新しくインストールされたモジュールを &lt;code&gt;PERL5LIB&lt;/code&gt; できるようにするには、PERL5LIB環境変数を次のように設定します。</target>
        </trans-unit>
        <trans-unit id="7aa8a6d9b5359d93562881107c4eb01ac8b79421" translate="yes" xml:space="preserve">
          <source>To escape the special meaning of &lt;code&gt;.&lt;/code&gt;, we use &lt;code&gt;\Q&lt;/code&gt; :</source>
          <target state="translated">の特別な意味をエスケープするため &lt;code&gt;.&lt;/code&gt; 、 &lt;code&gt;\Q&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="23c0119f090722ce349ecc5009302976b6a64631" translate="yes" xml:space="preserve">
          <source>To escape the special meaning of &lt;code&gt;.&lt;/code&gt;, we use &lt;code&gt;\Q&lt;/code&gt;:</source>
          <target state="translated">の特別な意味を逃れるため &lt;code&gt;.&lt;/code&gt; 、 &lt;code&gt;\Q&lt;/code&gt; を使用します：</target>
        </trans-unit>
        <trans-unit id="1f8b13457bc503e2905034bca18967c492e5be31" translate="yes" xml:space="preserve">
          <source>To exchange a command's STDOUT and STDERR in order to capture the STDERR but leave its STDOUT to come out our old STDERR:</source>
          <target state="translated">コマンドのSTDOUTとSTDERRを交換してSTDERRをキャプチャするには、STDOUTを残して古いSTDERRが出てくるようにします。</target>
        </trans-unit>
        <trans-unit id="f19cbea3f43d914ef5dccac2f20ddb20b0a670bb" translate="yes" xml:space="preserve">
          <source>To exchange a command's STDOUT and STDERR in order to capture the STDERR but leave its STDOUT to come out the old STDERR:</source>
          <target state="translated">コマンドのSTDOUTとSTDERRを交換してSTDERRをキャプチャし、そのSTDOUTを残して古いSTDERRが出てくるようにします。</target>
        </trans-unit>
        <trans-unit id="1e299ba0ecd4337d918ed97321e55b553fe7e0a0" translate="yes" xml:space="preserve">
          <source>To exercise the various implementations the script &lt;a href=&quot;#Example-2&quot;&gt;below&lt;/a&gt; can be used.</source>
          <target state="translated">さまざまな実装を実行するには、&lt;a href=&quot;#Example-2&quot;&gt;以下&lt;/a&gt;のスクリプトを使用できます。</target>
        </trans-unit>
        <trans-unit id="746a283f2992b56a8070a48ac33ef2cb2b8ab7fb" translate="yes" xml:space="preserve">
          <source>To explain them each in detail:</source>
          <target state="translated">それぞれを詳しく説明すること。</target>
        </trans-unit>
        <trans-unit id="337ab3fc6e23ee2083bb48006f6530a512cb7265" translate="yes" xml:space="preserve">
          <source>To explicitly turn off a &quot;FATAL&quot; warning you just disable the warning it is associated with. So, for example, to disable the &quot;void&quot; warning in the example above, either of these will do the trick:</source>
          <target state="translated">FATAL &quot;警告を明示的に無効にするには、関連する警告を無効にするだけです。例えば、上の例の &quot;void&quot; 警告を無効にするには、以下のいずれかの方法が有効です。</target>
        </trans-unit>
        <trans-unit id="d8cfaf574ce10955d44800ed1fb485165bb12d03" translate="yes" xml:space="preserve">
          <source>To extract a comma-delimited list of numbers, use</source>
          <target state="translated">カンマで区切られた数値のリストを抽出するには</target>
        </trans-unit>
        <trans-unit id="d086f02213d0494d6662b67a4783c59065f8a170" translate="yes" xml:space="preserve">
          <source>To extract an ASCII tar archive on BS2000 POSIX you need an ASCII filesystem (we used the mountpoint /usr/local/ascii for this). Now you extract the archive in the ASCII filesystem without I/O-conversion:</source>
          <target state="translated">BS2000 POSIX 上で ASCII tar アーカイブを展開するには、ASCII ファイルシステムが必要です (このためにマウントポイント /usr/local/ascii を使用しています)。これで、I/O変換なしでASCIIファイルシステムにアーカイブを展開することができます。</target>
        </trans-unit>
        <trans-unit id="25ec0794844bd37f005928c43a00d6da3d3e457e" translate="yes" xml:space="preserve">
          <source>To find how (UCS-2|UTF-(16|32))(LE|BE)? differ from one another, see &lt;a href=&quot;Encode::Unicode&quot;&gt;Encode::Unicode&lt;/a&gt;.</source>
          <target state="translated">（UCS-2 | UTF-（16 | 32））（LE | BE）の方法を見つけるには？互いに異なります&lt;a href=&quot;Encode::Unicode&quot;&gt;。Encode:: Unicodeを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="c062b7c2a495ae2a5b72a1379e8b1a41239ea1d2" translate="yes" xml:space="preserve">
          <source>To find how to use this module in detail, see &lt;a href=&quot;../encode&quot;&gt;Encode&lt;/a&gt;.</source>
          <target state="translated">このモジュールの使用方法の詳細については、「&lt;a href=&quot;../encode&quot;&gt;エンコード&lt;/a&gt;」を参照してください。</target>
        </trans-unit>
        <trans-unit id="8ee7c07a6985c2bc43ddeeba4f6a14f8a3da6596" translate="yes" xml:space="preserve">
          <source>To find how to use this module in detail, see &lt;a href=&quot;encode&quot;&gt;Encode&lt;/a&gt;.</source>
          <target state="translated">このモジュールの使用方法の詳細については、&lt;a href=&quot;encode&quot;&gt;エンコードを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="b3930f92a272e8f2e02166feb6d52740dba8a2a7" translate="yes" xml:space="preserve">
          <source>To find out</source>
          <target state="translated">調べるには</target>
        </trans-unit>
        <trans-unit id="8b9ad1d9bf5e88e70343c9bc73bc8f95e823175e" translate="yes" xml:space="preserve">
          <source>To find out how to use this module in detail, see &lt;a href=&quot;../encode&quot;&gt;Encode&lt;/a&gt;.</source>
          <target state="translated">このモジュールの使用方法の詳細については、&lt;a href=&quot;../encode&quot;&gt;エンコードを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="2adbea2c685a6abde137a3a64635b621e1971a84" translate="yes" xml:space="preserve">
          <source>To find out how to use this module in detail, see &lt;a href=&quot;encode&quot;&gt;Encode&lt;/a&gt;.</source>
          <target state="translated">このモジュールの使用方法の詳細については、&lt;a href=&quot;encode&quot;&gt;エンコードを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="f73fb3d1fc5746c2536b396c0845c316c4d80215" translate="yes" xml:space="preserve">
          <source>To find out in detail which encodings are supported by this package, see &lt;a href=&quot;Encode::Supported&quot;&gt;Encode::Supported&lt;/a&gt;.</source>
          <target state="translated">このパッケージでサポートされているエンコーディングの詳細については、&lt;a href=&quot;Encode::Supported&quot;&gt;Encode :: Supportedを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="8814e60c44afe937889a748a7dc5d647bd329617" translate="yes" xml:space="preserve">
          <source>To find out in detail which encodings are supported by this package, see &lt;a href=&quot;encode/supported&quot;&gt;Encode::Supported&lt;/a&gt;.</source>
          <target state="translated">このパッケージでサポートされているエンコーディングの詳細については、&lt;a href=&quot;encode/supported&quot;&gt;Encode :: Supportedを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="7957585a16fb8e9f58abff4512426bfd62b9e660" translate="yes" xml:space="preserve">
          <source>To find out where a module's source code is located, use</source>
          <target state="translated">モジュールのソースコードがどこにあるかを調べるには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="714fa5ade47f6c038c4e5047b338fbf758e5ccc9" translate="yes" xml:space="preserve">
          <source>To find out whether a given string is a valid non-zero number, it's sometimes enough to test it against both numeric 0 and also lexical &quot;0&quot; (although this will cause noises if warnings are on). That's because strings that aren't numbers count as 0, just as they do in &lt;b&gt;awk&lt;/b&gt;:</source>
          <target state="translated">指定された文字列が有効なゼロ以外の数値であるかどうかを確認するには、数値0と字句「0」の両方に対してテストするだけで十分な場合があります（ただし、警告がオンの場合、これによりノイズが発生します）。これは、&lt;b&gt;awkと&lt;/b&gt;同様に、数値ではない文字列は0としてカウントされるためです。</target>
        </trans-unit>
        <trans-unit id="b365160bfd575c380666252714a7e2191298f003" translate="yes" xml:space="preserve">
          <source>To find out which character encodings your Perl supports, run:</source>
          <target state="translated">お使いのPerlがサポートしている文字エンコーディングを調べるには、実行してください。</target>
        </trans-unit>
        <trans-unit id="1e6f34bd3a736ed4112e8f178b09aac2a9e39ab4" translate="yes" xml:space="preserve">
          <source>To find something between two single characters, a pattern like &lt;code&gt;/x([^x]*)x/&lt;/code&gt; will get the intervening bits in $1. For multiple ones, then something more like &lt;code&gt;/alpha(.*?)omega/&lt;/code&gt; would be needed. For nested patterns and/or balanced expressions, see the so-called &lt;a href=&quot;perlre#%28%3FPARNO%29-%28%3F-PARNO%29-%28%3F%2BPARNO%29-%28%3FR%29-%28%3F0%29&quot;&gt;(?PARNO)&lt;/a&gt; construct (available since perl 5.10). The CPAN module &lt;a href=&quot;Regexp::Common&quot;&gt;Regexp::Common&lt;/a&gt; can help to build such regular expressions (see in particular &lt;a href=&quot;Regexp::Common::balanced&quot;&gt;Regexp::Common::balanced&lt;/a&gt; and &lt;a href=&quot;Regexp::Common::delimited&quot;&gt;Regexp::Common::delimited&lt;/a&gt;).</source>
          <target state="translated">2つの単一文字の間に何かを見つけるために、 &lt;code&gt;/x([^x]*)x/&lt;/code&gt; ようなパターンは、$ 1の間にあるビットを取得します。複数の場合は、 &lt;code&gt;/alpha(.*?)omega/&lt;/code&gt; 。*？）omega /のようなものが必要になります。ネストされたパターンやバランスの取れた式については、いわゆる&lt;a href=&quot;perlre#%28%3FPARNO%29-%28%3F-PARNO%29-%28%3F%2BPARNO%29-%28%3FR%29-%28%3F0%29&quot;&gt;（？PARNO）&lt;/a&gt;構文（perl 5.10以降で使用可能）を参照してください。 CPANモジュール&lt;a href=&quot;Regexp::Common&quot;&gt;Regexp :: Common&lt;/a&gt;は、このような正規表現の作成に役立ちます（特に、&lt;a href=&quot;Regexp::Common::balanced&quot;&gt;Regexp :: Common :: balanced&lt;/a&gt;および&lt;a href=&quot;Regexp::Common::delimited&quot;&gt;Regexp :: Common :: delimitedを&lt;/a&gt;参照してください）。</target>
        </trans-unit>
        <trans-unit id="8d0d1d4b42258f044bb86db954a57628e8eecd09" translate="yes" xml:space="preserve">
          <source>To find something between two single characters, a pattern like &lt;code&gt;/x([^x]*)x/&lt;/code&gt; will get the intervening bits in $1. For multiple ones, then something more like &lt;code&gt;/alpha(.*?)omega/&lt;/code&gt; would be needed. For nested patterns and/or balanced expressions, see the so-called &lt;a href=&quot;perlre#(%3fPARNO)-(%3f-PARNO)-(%3f%2bPARNO)-(%3fR)-(%3f0)&quot;&gt;(?PARNO)&lt;/a&gt; construct (available since perl 5.10). The CPAN module &lt;a href=&quot;http://search.cpan.org/perldoc/Regexp::Common&quot;&gt;Regexp::Common&lt;/a&gt; can help to build such regular expressions (see in particular &lt;a href=&quot;http://search.cpan.org/perldoc/Regexp::Common::balanced&quot;&gt;Regexp::Common::balanced&lt;/a&gt; and &lt;a href=&quot;http://search.cpan.org/perldoc/Regexp::Common::delimited&quot;&gt;Regexp::Common::delimited&lt;/a&gt;).</source>
          <target state="translated">2つの単一の文字の間で何かを見つけるために、 &lt;code&gt;/x([^x]*)x/&lt;/code&gt; ようなパターンは、$ 1に介在するビットを取得します。複数の場合は、 &lt;code&gt;/alpha(.*?)omega/&lt;/code&gt; 。*？）omega /のようなものが必要になります。ネストされたパターンやバランスの取れた式については、いわゆる&lt;a href=&quot;perlre#(%3fPARNO)-(%3f-PARNO)-(%3f%2bPARNO)-(%3fR)-(%3f0)&quot;&gt;（？PARNO）&lt;/a&gt;構成（perl 5.10以降で利用可能）を参照してください。 CPANモジュール&lt;a href=&quot;http://search.cpan.org/perldoc/Regexp::Common&quot;&gt;Regexp :: Common&lt;/a&gt;は、このような正規表現の構築に役立ちます（特に&lt;a href=&quot;http://search.cpan.org/perldoc/Regexp::Common::balanced&quot;&gt;Regexp :: Common :: balanced&lt;/a&gt;および&lt;a href=&quot;http://search.cpan.org/perldoc/Regexp::Common::delimited&quot;&gt;Regexp :: Common :: delimitedを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="462c225b3ec5f7ec0eb1907b83b31298442e3ef8" translate="yes" xml:space="preserve">
          <source>To find the first array element which satisfies a condition, you can use the &lt;code&gt;first()&lt;/code&gt; function in the &lt;a href=&quot;List::Util&quot;&gt;List::Util&lt;/a&gt; module, which comes with Perl 5.8. This example finds the first element that contains &quot;Perl&quot;.</source>
          <target state="translated">条件を満たす最初の配列要素を見つけるには、&lt;a href=&quot;List::Util&quot;&gt;Perl5.8&lt;/a&gt;に付属しているList :: Utilモジュールの &lt;code&gt;first()&lt;/code&gt; 関数を使用できます。この例では、「Perl」を含む最初の要素を見つけます。</target>
        </trans-unit>
        <trans-unit id="c8886406693c43465a74828d32fde569bd987324" translate="yes" xml:space="preserve">
          <source>To find the first array element which satisfies a condition, you can use the &lt;code&gt;first()&lt;/code&gt; function in the &lt;a href=&quot;list/util&quot;&gt;List::Util&lt;/a&gt; module, which comes with Perl 5.8. This example finds the first element that contains &quot;Perl&quot;.</source>
          <target state="translated">条件を満たす最初の配列要素を見つけるには、Perl 5.8に付属している&lt;a href=&quot;list/util&quot;&gt;List :: Util&lt;/a&gt;モジュールで &lt;code&gt;first()&lt;/code&gt; 関数を使用できます。この例では、「Perl」を含む最初の要素を検索します。</target>
        </trans-unit>
        <trans-unit id="f1ca27f7c9ffaf0873146b4d5569bf1f7dd85f24" translate="yes" xml:space="preserve">
          <source>To find the package you are currently in, use the special literal &lt;code&gt;__PACKAGE__&lt;/code&gt; , as documented in &lt;a href=&quot;perldata&quot;&gt;perldata&lt;/a&gt;. You can only use the special literals as separate tokens, so you can't interpolate them into strings like you can with variables:</source>
          <target state="translated">現在使用しているパッケージを見つけるには、 &lt;code&gt;__PACKAGE__&lt;/code&gt; に記載されている特別なリテラル__PACKAGE__を使用し&lt;a href=&quot;perldata&quot;&gt;ます&lt;/a&gt;。特別なリテラルは個別のトークンとしてのみ使用できるため、変数のように文字列に補間することはできません。</target>
        </trans-unit>
        <trans-unit id="f89e6a14f2ee6c8a6aa9c17296db02bef0f9a5ee" translate="yes" xml:space="preserve">
          <source>To find the package you are currently in, use the special literal &lt;code&gt;__PACKAGE__&lt;/code&gt;, as documented in &lt;a href=&quot;perldata&quot;&gt;perldata&lt;/a&gt;. You can only use the special literals as separate tokens, so you can't interpolate them into strings like you can with variables:</source>
          <target state="translated">現在使用しているパッケージを見つけるには、 &lt;code&gt;__PACKAGE__&lt;/code&gt; に記載されているように、特別なリテラル__PACKAGE__を使用し&lt;a href=&quot;perldata&quot;&gt;ます&lt;/a&gt;。特別なリテラルは個別のトークンとしてのみ使用できるため、変数の場合のように文字列に補間することはできません。</target>
        </trans-unit>
        <trans-unit id="cffcf6d33c52e5caff06e5888e1b1afff8c79cd9" translate="yes" xml:space="preserve">
          <source>To find the synonyms for single-forms, such as &lt;code&gt;\p{Any}&lt;/code&gt; , use &lt;a href=&quot;#prop_aliases()&quot;&gt;prop_aliases()&lt;/a&gt; instead.</source>
          <target state="translated">などの単一形、同義語を見つけるために、 &lt;code&gt;\p{Any}&lt;/code&gt; 、使用&lt;a href=&quot;#prop_aliases()&quot;&gt;prop_aliases（）&lt;/a&gt;を代わりに。</target>
        </trans-unit>
        <trans-unit id="eb89d412def16cc37609c904cc14b810aa0fb5df" translate="yes" xml:space="preserve">
          <source>To find the synonyms for single-forms, such as &lt;code&gt;\p{Any}&lt;/code&gt;, use &lt;a href=&quot;#prop_aliases%28%29&quot;&gt;&quot;prop_aliases()&quot;&lt;/a&gt; instead.</source>
          <target state="translated">などの単一形、同義語検索する &lt;code&gt;\p{Any}&lt;/code&gt; 、使用&lt;a href=&quot;#prop_aliases%28%29&quot;&gt;「prop_aliases（）」&lt;/a&gt;を代わりに。</target>
        </trans-unit>
        <trans-unit id="2b4474f5909a02cbe785465728ea131216f023c4" translate="yes" xml:space="preserve">
          <source>To find your local Perl Mongers (or PM as they're commonly abbreviated) group check the international Perl Mongers directory at &lt;a href=&quot;http://www.pm.org/&quot;&gt;http://www.pm.org/&lt;/a&gt;.</source>
          <target state="translated">ローカルのPerl Mongers（または略してPM）グループを見つけるには、&lt;a href=&quot;http://www.pm.org/&quot;&gt;http：&lt;/a&gt; //www.pm.org/にある国際的なPerl Mongersディレクトリを確認してください。</target>
        </trans-unit>
        <trans-unit id="51fa9c8218dc025937f10203b9150ec3a3d4872c" translate="yes" xml:space="preserve">
          <source>To fire up the debugger, type</source>
          <target state="translated">デバッガを起動するには</target>
        </trans-unit>
        <trans-unit id="5061c6729e5e674eb297e87fb65b6e686195258a" translate="yes" xml:space="preserve">
          <source>To fix by applying one, as it were. In the realm of hackerdom, a listing of the differences between two versions of a program as might be applied by the &lt;b&gt;patch&lt;/b&gt;(1) program when you want to fix a bug or upgrade your old version.</source>
          <target state="translated">そのまま適用して修正します。ハッカーダムの領域で、バグを修正したり古いバージョンをアップグレードしたりするときに&lt;b&gt;パッチ&lt;/b&gt;（1）プログラムによって適用される可能性がある、プログラムの2つのバージョンの違いのリスト。</target>
        </trans-unit>
        <trans-unit id="baa8da9e4b55dce6e5a8c524e072f785277c31e7" translate="yes" xml:space="preserve">
          <source>To fix this, some people formed Unicode, Inc. and produced a new character set containing all the characters you can possibly think of and more. There are several ways of representing these characters, and the one Perl uses is called UTF-8. UTF-8 uses a variable number of bytes to represent a character. You can learn more about Unicode and Perl's Unicode model in &lt;a href=&quot;perlunicode&quot;&gt;perlunicode&lt;/a&gt;.</source>
          <target state="translated">これを修正するために、Unicode、Inc.を設立し、考えられるすべての文字を含む新しい文字セットを作成した人もいます。これらの文字を表す方法はいくつかあり、Perlが使用する方法の1つはUTF-8と呼ばれます。UTF-8は、可変数のバイトを使用して文字を表します。UnicodeとPerlのUnicodeモデルの詳細については、&lt;a href=&quot;perlunicode&quot;&gt;perlunicodeを参照&lt;/a&gt;してください。</target>
        </trans-unit>
        <trans-unit id="a4f76f5a03185d9e714674242e64dfcf1b7f20c4" translate="yes" xml:space="preserve">
          <source>To forbid ASCII/non-ASCII matches (like &quot;k&quot; with &lt;code&gt;\N{KELVIN SIGN}&lt;/code&gt; ), specify the &quot;a&quot; twice, for example &lt;code&gt;/aai&lt;/code&gt; or &lt;code&gt;/aia&lt;/code&gt; . (The first occurrence of &quot;a&quot; restricts the &lt;code&gt;\d&lt;/code&gt; , etc., and the second occurrence adds the &lt;code&gt;/i&lt;/code&gt; restrictions.) But, note that code points outside the ASCII range will use Unicode rules for &lt;code&gt;/i&lt;/code&gt; matching, so the modifier doesn't really restrict things to just ASCII; it just forbids the intermixing of ASCII and non-ASCII.</source>
          <target state="translated">ASCII /非ASCIIの一致を禁止するには（ &lt;code&gt;\N{KELVIN SIGN}&lt;/code&gt; した &quot;k&quot;のように）、 &quot;a&quot;を2回指定します（例： &lt;code&gt;/aai&lt;/code&gt; または &lt;code&gt;/aia&lt;/code&gt; )。 （ &quot;a&quot;の最初の出現は &lt;code&gt;\d&lt;/code&gt; などを制限し、2番目の出現は &lt;code&gt;/i&lt;/code&gt; 制限を追加します。）ただし、ASCII範囲外のコードポイントは &lt;code&gt;/i&lt;/code&gt; マッチングにUnicodeルールを使用するため、修飾子は実際には、ASCIIだけに制限するわけではありません。 ASCIIと非ASCIIの混在を禁止するだけです。</target>
        </trans-unit>
        <trans-unit id="7747b215397466c348d54e9b8de2e0e6dbbf3fa6" translate="yes" xml:space="preserve">
          <source>To forbid ASCII/non-ASCII matches (like &quot;k&quot; with &lt;code&gt;\N{KELVIN SIGN}&lt;/code&gt;), specify the &lt;code&gt;&quot;a&quot;&lt;/code&gt; twice, for example &lt;code&gt;/aai&lt;/code&gt; or &lt;code&gt;/aia&lt;/code&gt;. (The first occurrence of &lt;code&gt;&quot;a&quot;&lt;/code&gt; restricts the &lt;code&gt;\d&lt;/code&gt;,</source>
          <target state="translated">ASCII /非ASCII一致（「k」と &lt;code&gt;\N{KELVIN SIGN}&lt;/code&gt; ）を禁止するには、 &lt;code&gt;&quot;a&quot;&lt;/code&gt; 2回指定します（例： &lt;code&gt;/aai&lt;/code&gt; または &lt;code&gt;/aia&lt;/code&gt; )。（ &lt;code&gt;&quot;a&quot;&lt;/code&gt; の最初の出現は &lt;code&gt;\d&lt;/code&gt; 制限します、</target>
        </trans-unit>
        <trans-unit id="ce87ca60a35ae769cbfeb60038a35828e8b052b1" translate="yes" xml:space="preserve">
          <source>To force &lt;code&gt;IO::Uncompress::Bunzip2&lt;/code&gt; to uncompress all the bzip2 data streams, include the &lt;code&gt;MultiStream&lt;/code&gt; option, as shown below</source>
          <target state="translated">&lt;code&gt;IO::Uncompress::Bunzip2&lt;/code&gt; にすべてのbzip2データストリームを強制的に解凍するには、以下に示すように、 &lt;code&gt;MultiStream&lt;/code&gt; オプションを含めます。</target>
        </trans-unit>
        <trans-unit id="d738795a19cd0b9eeeb60570db56c2f44fad5488" translate="yes" xml:space="preserve">
          <source>To force &lt;code&gt;IO::Uncompress::Gunzip&lt;/code&gt; to uncompress all the gzip data streams, include the &lt;code&gt;MultiStream&lt;/code&gt; option, as shown below</source>
          <target state="translated">&lt;code&gt;IO::Uncompress::Gunzip&lt;/code&gt; すべてのgzipデータストリームを強制的に解凍するには、以下に示すように、 &lt;code&gt;MultiStream&lt;/code&gt; オプションを含めます。</target>
        </trans-unit>
        <trans-unit id="bc2a4c58af25cd402ee36a19ab3abed7cc44071e" translate="yes" xml:space="preserve">
          <source>To force interpretation as a subroutine call, either put an ampersand before the subroutine name, or qualify the name with its package. Alternatively, you can import the subroutine (or pretend that it's imported with the &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; subs&lt;/code&gt; pragma).</source>
          <target state="translated">解釈をサブルーチン呼び出しとして強制するには、サブルーチン名の前にアンパサンドを置くか、名前をそのパッケージで修飾します。あるいは、サブルーチンをインポートすることもできます（または、 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; subs&lt;/code&gt; プラグマでインポートされたように見せます）。</target>
        </trans-unit>
        <trans-unit id="d2cf84ed24d58ace958b85882dc11163745c65be" translate="yes" xml:space="preserve">
          <source>To force interpretation as a subroutine call, either put an ampersand before the subroutine name, or qualify the name with its package. Alternatively, you can import the subroutine (or pretend that it's imported with the &lt;code&gt;use subs&lt;/code&gt; pragma).</source>
          <target state="translated">サブルーチン呼び出しとしての解釈を強制するには、サブルーチン名の前にアンパサンドを付けるか、名前をそのパッケージで修飾します。または、サブルーチンをインポートすることもできます（または、 &lt;code&gt;use subs&lt;/code&gt; プラグマを使用してインポートされたように見せかけることもできます）。</target>
        </trans-unit>
        <trans-unit id="457433c503b0c64ab575af65985486ef91bd670a" translate="yes" xml:space="preserve">
          <source>To force multiple data values into an SV, you must do two things: use the &lt;code&gt;sv_set*v&lt;/code&gt; routines to add the additional scalar type, then set a flag so that Perl will believe it contains more than one type of data. The four macros to set the flags are:</source>
          <target state="translated">複数のデータ値をSVに強制するには、2つのことを行う必要があります &lt;code&gt;sv_set*v&lt;/code&gt; ルーチンを使用してスカラー型を追加し、Perlが複数のタイプのデータを含むと信じるようにフラグを設定します。フラグを設定する4つのマクロは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="b603c7813804b39f069cc444400779dd5f80774c" translate="yes" xml:space="preserve">
          <source>To force unicode semantics in code portable to perl 5.8 and 5.10, call &lt;code&gt;utf8::upgrade($string)&lt;/code&gt; unconditionally.</source>
          <target state="translated">perl 5.8および5.10に移植可能なコードでUnicodeセマンティクスを強制するには、 &lt;code&gt;utf8::upgrade($string)&lt;/code&gt; 無条件に呼び出します。</target>
        </trans-unit>
        <trans-unit id="e794c449edc7f65a40ec8153981b15f3f2a9b550" translate="yes" xml:space="preserve">
          <source>To free an SV that you've created, call &lt;code&gt;SvREFCNT_dec(SV*)&lt;/code&gt; . Normally this call is not necessary (see &lt;a href=&quot;#Reference-Counts-and-Mortality&quot;&gt;Reference Counts and Mortality&lt;/a&gt;).</source>
          <target state="translated">作成したSVを解放するには、 &lt;code&gt;SvREFCNT_dec(SV*)&lt;/code&gt; 呼び出します。通常、この呼び出しは必要ありません（参照&lt;a href=&quot;#Reference-Counts-and-Mortality&quot;&gt;カウントと死亡率&lt;/a&gt;を参照）。</target>
        </trans-unit>
        <trans-unit id="c3e7390df1746c54f2c60ceb3e38eab54ee218d5" translate="yes" xml:space="preserve">
          <source>To free an SV that you've created, call &lt;code&gt;SvREFCNT_dec(SV*)&lt;/code&gt;. Normally this call is not necessary (see &lt;a href=&quot;#Reference-Counts-and-Mortality&quot;&gt;&quot;Reference Counts and Mortality&quot;&lt;/a&gt;).</source>
          <target state="translated">作成したSVを解放するには、 &lt;code&gt;SvREFCNT_dec(SV*)&lt;/code&gt; 呼び出します。通常、この呼び出しは必要ありません（&lt;a href=&quot;#Reference-Counts-and-Mortality&quot;&gt;「参照数と死亡率」を参照&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="2d1737256e6e8a51ce74a94d85a078c8dd0ab640" translate="yes" xml:space="preserve">
          <source>To gain access to symbols that are exported from another module. See &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; in Camel chapter 27, &amp;ldquo;Functions&amp;rdquo;.</source>
          <target state="translated">別のモジュールからエクスポートされたシンボルにアクセスするため。ラクダの第27章「関数」の &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="ff21df3d4f7e1323bcb14d219834d5b523bb12a8" translate="yes" xml:space="preserve">
          <source>To gain access to symbols that are exported from another module. See &lt;code&gt;use&lt;/code&gt; in Camel chapter 27, &amp;ldquo;Functions&amp;rdquo;.</source>
          <target state="translated">別のモジュールからエクスポートされたシンボルにアクセスするため。キャメルの第27章「機能」の &lt;code&gt;use&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="0f02cb11f0716e30aa4d5cf8185ab8c7897bdf67" translate="yes" xml:space="preserve">
          <source>To generate accessors you list them when using the module:</source>
          <target state="translated">アクセサを生成するには、モジュールを使用するときにそれらをリストアップします。</target>
        </trans-unit>
        <trans-unit id="dcb6076af26c9d87b4c92a15d546b5cbbac01e84" translate="yes" xml:space="preserve">
          <source>To generate just the stubs:</source>
          <target state="translated">スタブだけを生成するために</target>
        </trans-unit>
        <trans-unit id="535754fb5bff8ed1b444cf7b15654e6f3c7d7a5c" translate="yes" xml:space="preserve">
          <source>To get a Math::BigFloat you either need to call the operation manually, make sure the operands are already of the proper type or casted to that type via Math::BigFloat-&amp;gt;new():</source>
          <target state="translated">Math :: BigFloatを取得するには、操作を手動で呼び出す必要があります。オペランドが既に適切な型であるか、Math :: BigFloat-&amp;gt; new（）を介してその型にキャストされていることを確認してください。</target>
        </trans-unit>
        <trans-unit id="482a14b92894717900240dda3533f7f04de8b428" translate="yes" xml:space="preserve">
          <source>To get a binary stream an alternate method is to use:</source>
          <target state="translated">バイナリストリームを取得するには、別の方法を使用します。</target>
        </trans-unit>
        <trans-unit id="342926328b3f4e6b863f62ddbfc63ea7184c5807" translate="yes" xml:space="preserve">
          <source>To get a full list of the available sync points:</source>
          <target state="translated">利用可能な同期ポイントの完全なリストを取得するには、以下の手順に従います。</target>
        </trans-unit>
        <trans-unit id="4a7e3e5cefb00444495078948120515244d3f977" translate="yes" xml:space="preserve">
          <source>To get a random number between two values, you can use the &lt;code&gt;&lt;a href=&quot;functions/rand&quot;&gt;rand()&lt;/a&gt;&lt;/code&gt; built-in to get a random number between 0 and 1. From there, you shift that into the range that you want.</source>
          <target state="translated">2つの値の間の乱数を取得するには、組み込みの &lt;code&gt;&lt;a href=&quot;functions/rand&quot;&gt;rand()&lt;/a&gt;&lt;/code&gt; を使用して0から1の間の乱数を取得できます。そこから、希望する範囲にシフトします。</target>
        </trans-unit>
        <trans-unit id="07bedc590c0c2707d4838577cb4e73d5ee21573c" translate="yes" xml:space="preserve">
          <source>To get a random number between two values, you can use the &lt;code&gt;rand()&lt;/code&gt; built-in to get a random number between 0 and 1. From there, you shift that into the range that you want.</source>
          <target state="translated">2つの値の間の乱数を取得するには、組み込みの &lt;code&gt;rand()&lt;/code&gt; を使用して、0から1の間の乱数を取得できます。そこから、それを目的の範囲にシフトします。</target>
        </trans-unit>
        <trans-unit id="503a91db6b0ee3a6aaf3799cd04cbf8c2160ee5a" translate="yes" xml:space="preserve">
          <source>To get a real at or caret into the field, do this:</source>
          <target state="translated">本物のアットやキャレットをフィールドに入れるには、これをやりましょう。</target>
        </trans-unit>
        <trans-unit id="6546b16387b88ec0ca99336cb1d0e013e452d98c" translate="yes" xml:space="preserve">
          <source>To get all the output from your error log, and not miss any messages via helpful operating system buffering, insert a line like this, at the start of your script:</source>
          <target state="translated">エラーログからすべての出力を取得し、有用なオペレーティングシステムのバッファリングによってメッセージを見逃さないようにするには、スクリプトの最初に次のような行を挿入します。</target>
        </trans-unit>
        <trans-unit id="2baf587b399a3c62f41dfcb4f6a76fcf67a09c4b" translate="yes" xml:space="preserve">
          <source>To get an &lt;code&gt;HMQ&lt;/code&gt; , the extension should call &lt;code&gt;hmq = perl_hmq_GET(serve)&lt;/code&gt; in C. After this call is performed, &lt;code&gt;hmq&lt;/code&gt; may be accessed as &lt;code&gt;Perl_hmq&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;HMQ&lt;/code&gt; を取得するには、拡張機能はCで &lt;code&gt;hmq = perl_hmq_GET(serve)&lt;/code&gt; を呼び出す必要があります。この呼び出しが実行された後、 &lt;code&gt;hmq&lt;/code&gt; は &lt;code&gt;Perl_hmq&lt;/code&gt; としてアクセスできます。</target>
        </trans-unit>
        <trans-unit id="2eacbf75f11af85a991f44461b926b7c934f62f4" translate="yes" xml:space="preserve">
          <source>To get an &lt;code&gt;HMQ&lt;/code&gt;, the extension should call &lt;code&gt;hmq = perl_hmq_GET(serve)&lt;/code&gt; in C. After this call is performed, &lt;code&gt;hmq&lt;/code&gt; may be accessed as &lt;code&gt;Perl_hmq&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;HMQ&lt;/code&gt; を取得するには、拡張機能はCで &lt;code&gt;hmq = perl_hmq_GET(serve)&lt;/code&gt; を呼び出す必要があります。この呼び出しが実行された後、 &lt;code&gt;hmq&lt;/code&gt; は &lt;code&gt;Perl_hmq&lt;/code&gt; としてアクセスできます。</target>
        </trans-unit>
        <trans-unit id="f4fbf979e25bdf63e3a72510bfcc0bebacbf8c90" translate="yes" xml:space="preserve">
          <source>To get an unbuffered stream specify an unbuffered layer (e.g. &lt;code&gt;:unix&lt;/code&gt; ) in the open call:</source>
          <target state="translated">バッファリングされていないストリームを取得するには、open呼び出しでバッファリングされていないレイヤ（例 &lt;code&gt;:unix&lt;/code&gt; ）を指定します。</target>
        </trans-unit>
        <trans-unit id="e43bb9c5d530c176cdc88e98a6d34bb2bcea788a" translate="yes" xml:space="preserve">
          <source>To get an unbuffered stream specify an unbuffered layer (e.g. &lt;code&gt;:unix&lt;/code&gt;) in the open call:</source>
          <target state="translated">バッファリングされていないストリームを取得するには、open呼び出しでバッファリングされていないレイヤ（例 &lt;code&gt;:unix&lt;/code&gt; ）を指定します。</target>
        </trans-unit>
        <trans-unit id="4f25553ad923c6b2f304e605c8fcb2af6b398a17" translate="yes" xml:space="preserve">
          <source>To get around the error, place the word &lt;code&gt;DB_File&lt;/code&gt; in either single or double quotes, like this:</source>
          <target state="translated">エラーを回避するには、次のように、単語 &lt;code&gt;DB_File&lt;/code&gt; を一重引用符または二重引用符で囲みます。</target>
        </trans-unit>
        <trans-unit id="e7cc39162825d124202c37827aea79596926f995" translate="yes" xml:space="preserve">
          <source>To get around the security problem, I could also pull the values from a hash instead of evaluating variable names. Using a single &lt;code&gt;/e&lt;/code&gt;, I can check the hash to ensure the value exists, and if it doesn't, I can replace the missing value with a marker, in this case &lt;code&gt;???&lt;/code&gt; to signal that I missed something:</source>
          <target state="translated">セキュリティ問題を回避するために、変数名を評価する代わりに、ハッシュから値をプルすることもできます。単一の &lt;code&gt;/e&lt;/code&gt; を使用して、ハッシュをチェックして値が存在することを確認できます。存在しない場合は、不足している値をマーカーで置き換えることができます。この場合は &lt;code&gt;???&lt;/code&gt; 私が何かを逃したことを知らせるために：</target>
        </trans-unit>
        <trans-unit id="7daccee0149b6b5c023c3105df2756ca16d7041c" translate="yes" xml:space="preserve">
          <source>To get around these problems it is necessary to take a full copy of the SV. The code below shows &lt;code&gt;SaveSub2&lt;/code&gt; modified to do that.</source>
          <target state="translated">これらの問題を回避するには、SVの完全なコピーを作成する必要があります。以下のコードは、そのために変更された &lt;code&gt;SaveSub2&lt;/code&gt; を示しています。</target>
        </trans-unit>
        <trans-unit id="f3981d8032c1c97862aa0ee6d17a5d52da82d00a" translate="yes" xml:space="preserve">
          <source>To get around this, either upgrade to Perl v5.6.0 or later, do the glob yourself with readdir() and patterns, or use a module like &lt;a href=&quot;File::Glob&quot;&gt;File::Glob&lt;/a&gt;, one that doesn't use the shell to do globbing.</source>
          <target state="translated">これを回避するには、Perl v5.6.0以降にアップグレードするか、readdir（）とパターンを使用して自分でglobを実行するか、シェルを使用せずにglobを実行する&lt;a href=&quot;File::Glob&quot;&gt;File :: Glob&lt;/a&gt;などのモジュールを使用します。</target>
        </trans-unit>
        <trans-unit id="e5e782973aff491dec9c851f1733c85508f6c14a" translate="yes" xml:space="preserve">
          <source>To get around this, either upgrade to Perl v5.6.0 or later, do the glob yourself with readdir() and patterns, or use a module like &lt;a href=&quot;file/glob&quot;&gt;File::Glob&lt;/a&gt;, one that doesn't use the shell to do globbing.</source>
          <target state="translated">これを回避するには、Perl v5.6.0以降にアップグレードするか、自分でグロブをreaddir（）とパターンで行うか、シェルを使用してグロビングを行わない&lt;a href=&quot;file/glob&quot;&gt;File :: Glob&lt;/a&gt;などのモジュールを使用します。</target>
        </trans-unit>
        <trans-unit id="f6d7c7ba0c3680f1bdd16d6aa20e16ef63f21df2" translate="yes" xml:space="preserve">
          <source>To get around this, you have to unbuffer the output filehandle, in this case, &lt;code&gt;STDOUT&lt;/code&gt; . You can set the special variable &lt;code&gt;$|&lt;/code&gt; to a true value (mnemonic: making your filehandles &quot;piping hot&quot;):</source>
          <target state="translated">これを回避するには、出力ファイルハンドル（この場合は &lt;code&gt;STDOUT&lt;/code&gt; )のバッファを解除する必要があります。特殊変数 &lt;code&gt;$|&lt;/code&gt; 設定できます 真の値に（ニーモニック：ファイルハンドルを「パイプホット」にする）：</target>
        </trans-unit>
        <trans-unit id="5f530554d003756c8f58481299f2771b8fc63a8d" translate="yes" xml:space="preserve">
          <source>To get around this, you have to unbuffer the output filehandle, in this case, &lt;code&gt;STDOUT&lt;/code&gt;. You can set the special variable &lt;code&gt;$|&lt;/code&gt; to a true value (mnemonic: making your filehandles &quot;piping hot&quot;):</source>
          <target state="translated">これを回避するには、出力ファイルハンドル（この場合は &lt;code&gt;STDOUT&lt;/code&gt; )のバッファを解除する必要があります。特別な変数 &lt;code&gt;$|&lt;/code&gt; 設定できます 真の値に（ニーモニック：ファイルハンドルを「パイピングホット」にする）：</target>
        </trans-unit>
        <trans-unit id="a6f34a68c60751e410691b9ae6ddd9f980469ba3" translate="yes" xml:space="preserve">
          <source>To get at hash elements:</source>
          <target state="translated">ハッシュ要素を取得するために</target>
        </trans-unit>
        <trans-unit id="7f878bb059ecb8cc0e6a947e6d0564b810589ae6" translate="yes" xml:space="preserve">
          <source>To get even more recent perl depots for the whole range of HP-UX, visit H.Merijn Brand's site at &lt;a href=&quot;http://mirrors.develooper.com/hpux/#Perl&quot;&gt;http://mirrors.develooper.com/hpux/#Perl&lt;/a&gt;. Carefully read the notes to see if the available versions suit your needs.</source>
          <target state="translated">HP-UXの全範囲の最新のperlデポを入手するには、H.Merijn Brandのサイト（&lt;a href=&quot;http://mirrors.develooper.com/hpux/#Perl&quot;&gt;http://mirrors.develooper.com/hpux/#Perl）に&lt;/a&gt;アクセスしてください。メモを注意深く読み、利用可能なバージョンがニーズに合っているかどうかを確認してください。</target>
        </trans-unit>
        <trans-unit id="76a1d18d8c0d8e0ec36c61f2ab6bce082fca6308" translate="yes" xml:space="preserve">
          <source>To get finer test reports, call</source>
          <target state="translated">より詳細なテストレポートを入手するには、次の電話番号に連絡してください。</target>
        </trans-unit>
        <trans-unit id="93d274f25d53139f7087deba04a14a18e5484351" translate="yes" xml:space="preserve">
          <source>To get index entries on &lt;code&gt;STDERR&lt;/code&gt; , turn on the F register, as in:</source>
          <target state="translated">&lt;code&gt;STDERR&lt;/code&gt; のインデックスエントリを取得するには、次のようにFレジスタをオンにします。</target>
        </trans-unit>
        <trans-unit id="4794a765fde524229c427466a3a2da3c2272b297" translate="yes" xml:space="preserve">
          <source>To get index entries on &lt;code&gt;STDERR&lt;/code&gt;, turn on the F register, as in:</source>
          <target state="translated">&lt;code&gt;STDERR&lt;/code&gt; のインデックスエントリを取得するには、次のようにFレジスタをオンにします。</target>
        </trans-unit>
        <trans-unit id="c89e5c359123efe3e2b8df35515e166a3190f60d" translate="yes" xml:space="preserve">
          <source>To get more perl depots for the whole range of HP-UX, visit H.Merijn Brand's site at &lt;a href=&quot;http://mirrors.develooper.com/hpux/#Perl&quot;&gt;http://mirrors.develooper.com/hpux/#Perl&lt;/a&gt;. Carefully read the notes to see if the available versions suit your needs.</source>
          <target state="translated">HP-UXの全範囲でより多くのperlデポを入手するには、H.Merijn Brandのサイト（&lt;a href=&quot;http://mirrors.develooper.com/hpux/#Perl&quot;&gt;http://mirrors.develooper.com/hpux/#Perl）に&lt;/a&gt;アクセスしてください。メモを注意深く読んで、利用可能なバージョンがニーズに合っているかどうかを確認してください。</target>
        </trans-unit>
        <trans-unit id="8b6b89efcdec932089c6c9c0f91cf90b0d1e52b9" translate="yes" xml:space="preserve">
          <source>To get multiple values from an array:</source>
          <target state="translated">配列から複数の値を取得するには</target>
        </trans-unit>
        <trans-unit id="c67d46d6312179612215d6ef23eb3f6db1321700" translate="yes" xml:space="preserve">
          <source>To get platform independent controls, you can use &lt;code&gt;\N{...}&lt;/code&gt; .</source>
          <target state="translated">プラットフォームに依存しないコントロールを取得するには、 &lt;code&gt;\N{...}&lt;/code&gt; 使用できます。</target>
        </trans-unit>
        <trans-unit id="9b8ad9382504b98c42922faf4d1b352db68cbdde" translate="yes" xml:space="preserve">
          <source>To get platform independent controls, you can use &lt;code&gt;\N{...}&lt;/code&gt;.</source>
          <target state="translated">プラットフォームに依存しないコントロールを取得するには、 &lt;code&gt;\N{...}&lt;/code&gt; 使用できます。</target>
        </trans-unit>
        <trans-unit id="a965832b8b2f81c82888b8327d5081a21e8081aa" translate="yes" xml:space="preserve">
          <source>To get some interesting statistics, it is recommended that &lt;code&gt;randomize_urllist&lt;/code&gt; be set; this introduces some amount of randomness into the URL selection.</source>
          <target state="translated">興味深い統計を取得するには、 &lt;code&gt;randomize_urllist&lt;/code&gt; を設定することをお勧めします。これにより、URLの選択にある程度のランダムさが導入されます。</target>
        </trans-unit>
        <trans-unit id="42f32ff5f8a54ed95afefa260a5241934e3c3cb8" translate="yes" xml:space="preserve">
          <source>To get somewhat similar but locale-dependent date strings, set up your locale environment variables appropriately (please see &lt;a href=&quot;../perllocale&quot;&gt;perllocale&lt;/a&gt;) and try for example:</source>
          <target state="translated">多少似ているがロケールに依存する日付文字列を取得するには、ロケール環境変数を適切に設定し（&lt;a href=&quot;../perllocale&quot;&gt;perllocale&lt;/a&gt;を参照してください）、次の例を試してください。</target>
        </trans-unit>
        <trans-unit id="ab2c259ec21b8fdc7591d4aa060782af6913d852" translate="yes" xml:space="preserve">
          <source>To get somewhat similar but locale-dependent date strings, set up your locale environment variables appropriately (please see &lt;a href=&quot;perllocale&quot;&gt;perllocale&lt;/a&gt;) and try for example:</source>
          <target state="translated">多少似ているがロケールに依存する日付文字列を取得するには、ロケール環境変数を適切に設定し（&lt;a href=&quot;perllocale&quot;&gt;perllocale&lt;/a&gt;を参照してください）、次の例を試してください。</target>
        </trans-unit>
        <trans-unit id="c33d002d66788db30ed6cc7efa61fd7b3021f5f2" translate="yes" xml:space="preserve">
          <source>To get the 25 traditional lowercase Greek letters, including both sigmas, you could use this instead:</source>
          <target state="translated">両方のシグマを含む伝統的なギリシャ語の小文字25文字を取得するには、代わりにこれを使用することができます。</target>
        </trans-unit>
        <trans-unit id="6e85259394ca22644c2c269f73c9d0468d9813a0" translate="yes" xml:space="preserve">
          <source>To get the HAB, the extension should call &lt;code&gt;hab = perl_hab_GET()&lt;/code&gt; in C. After this call is performed, &lt;code&gt;hab&lt;/code&gt; may be accessed as &lt;code&gt;Perl_hab&lt;/code&gt; . There is no need to release the HAB after it is used.</source>
          <target state="translated">HABを取得するには、拡張機能はCで &lt;code&gt;hab = perl_hab_GET()&lt;/code&gt; 呼び出す必要があります。この呼び出しが実行された後、 &lt;code&gt;hab&lt;/code&gt; は &lt;code&gt;Perl_hab&lt;/code&gt; としてアクセスできます。使用後にHABを解放する必要はありません。</target>
        </trans-unit>
        <trans-unit id="a4090f094b0b5e7e1c333253056aa1e10c2b3006" translate="yes" xml:space="preserve">
          <source>To get the HAB, the extension should call &lt;code&gt;hab = perl_hab_GET()&lt;/code&gt; in C. After this call is performed, &lt;code&gt;hab&lt;/code&gt; may be accessed as &lt;code&gt;Perl_hab&lt;/code&gt;. There is no need to release the HAB after it is used.</source>
          <target state="translated">HABを取得するには、拡張機能はCで &lt;code&gt;hab = perl_hab_GET()&lt;/code&gt; 呼び出す必要があります。この呼び出しが実行された後、 &lt;code&gt;hab&lt;/code&gt; は &lt;code&gt;Perl_hab&lt;/code&gt; としてアクセスできます。使用後にHABを解放する必要はありません。</target>
        </trans-unit>
        <trans-unit id="35604b07a393cc3fdbf315f40abc25e64114d031" translate="yes" xml:space="preserve">
          <source>To get the IP address, you can use the &lt;code&gt;&lt;a href=&quot;functions/gethostbyname&quot;&gt;gethostbyname&lt;/a&gt;&lt;/code&gt; built-in function to turn the name into a number. To turn that number into the dotted octet form (a.b.c.d) that most people expect, use the &lt;code&gt;inet_ntoa&lt;/code&gt; function from the &lt;a href=&quot;socket&quot;&gt;Socket&lt;/a&gt; module, which also comes with perl.</source>
          <target state="translated">IPアドレスを取得するには、 &lt;code&gt;&lt;a href=&quot;functions/gethostbyname&quot;&gt;gethostbyname&lt;/a&gt;&lt;/code&gt; 組み込み関数を使用して、名前を数値に変換できます。その数値を、ほとんどの人が期待するドット付きオクテット形式（abcd）に &lt;code&gt;inet_ntoa&lt;/code&gt; するには、Perlに付属している&lt;a href=&quot;socket&quot;&gt;Socket&lt;/a&gt;モジュールのinet_ntoa関数を使用します。</target>
        </trans-unit>
        <trans-unit id="6f5ae18e2f134e19fbd9a1950117e9b15bbc93df" translate="yes" xml:space="preserve">
          <source>To get the IP address, you can use the &lt;code&gt;gethostbyname&lt;/code&gt; built-in function to turn the name into a number. To turn that number into the dotted octet form (a.b.c.d) that most people expect, use the &lt;code&gt;inet_ntoa&lt;/code&gt; function from the &lt;a href=&quot;socket&quot;&gt;Socket&lt;/a&gt; module, which also comes with perl.</source>
          <target state="translated">IPアドレスを取得するには、 &lt;code&gt;gethostbyname&lt;/code&gt; 組み込み関数を使用して、名前を数値に変換します。その数をほとんどの人が期待する点線のオクテット形式（abcd）に &lt;code&gt;inet_ntoa&lt;/code&gt; するには、Perlに付属している&lt;a href=&quot;socket&quot;&gt;Socket&lt;/a&gt;モジュールのinet_ntoa関数を使用します。</target>
        </trans-unit>
        <trans-unit id="3a2fdb082ba52bcf7b3e152cd572fe7df01166a8" translate="yes" xml:space="preserve">
          <source>To get the actual events you need to get them from the parent event directly</source>
          <target state="translated">実際のイベントを取得するには、親イベントから直接取得する必要があります。</target>
        </trans-unit>
        <trans-unit id="aa0526e650783189d8454499d3396cf899e8f521" translate="yes" xml:space="preserve">
          <source>To get the day of year for any date, use &lt;a href=&quot;posix&quot;&gt;POSIX&lt;/a&gt;'s &lt;code&gt;mktime&lt;/code&gt; to get a time in epoch seconds for the argument to &lt;code&gt;&lt;a href=&quot;functions/localtime&quot;&gt;localtime&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">任意の日付の年の日を取得するには、&lt;a href=&quot;posix&quot;&gt;POSIX&lt;/a&gt;の &lt;code&gt;mktime&lt;/code&gt; を使用して、 &lt;code&gt;&lt;a href=&quot;functions/localtime&quot;&gt;localtime&lt;/a&gt;&lt;/code&gt; への引数のエポック秒で時間を取得します。</target>
        </trans-unit>
        <trans-unit id="75db1fc5bb4504ae3cfd425396fb9b0ab5948972" translate="yes" xml:space="preserve">
          <source>To get the day of year for any date, use &lt;a href=&quot;posix&quot;&gt;POSIX&lt;/a&gt;'s &lt;code&gt;mktime&lt;/code&gt; to get a time in epoch seconds for the argument to &lt;code&gt;localtime&lt;/code&gt;.</source>
          <target state="translated">任意の日付の曜日を取得するには、&lt;a href=&quot;posix&quot;&gt;POSIX&lt;/a&gt;の &lt;code&gt;mktime&lt;/code&gt; を使用して、 &lt;code&gt;localtime&lt;/code&gt; への引数の時間をエポック秒で取得します。</target>
        </trans-unit>
        <trans-unit id="ffadb121be361a5885303dda8c46c6cf80b68bb1" translate="yes" xml:space="preserve">
          <source>To get the last two digits of the year (e.g., &quot;01&quot; in 2001) do:</source>
          <target state="translated">年の最後の2桁を取得するには(例えば、2001年の「01」)を行います。</target>
        </trans-unit>
        <trans-unit id="65e2eefe742ea63873b699fb966b09a893a8daaa" translate="yes" xml:space="preserve">
          <source>To get the most performance benefit I want to have the test scripts that take the longest to run start first - otherwise I'll be waiting for the one test that takes nearly a minute to complete after all the others are done. I can use the --state switch to run the tests in slowest to fastest order:</source>
          <target state="translated">最もパフォーマンスを向上させるためには、実行に最も時間のかかるテストスクリプトを最初に実行させたいのですが、そうしないと、他のすべてのテストが完了した後に、1分近くかかるテストを待つことになってしまいます。そうしないと、他のすべてのテストが完了した後で、1分近くかかるテストを待つことになります。 --state スイッチを使って、遅い順から速い順にテストを実行できます。</target>
        </trans-unit>
        <trans-unit id="22228c8d3b8e275582e9f34035469fcccc1c47a6" translate="yes" xml:space="preserve">
          <source>To get the script to work properly and silence the warning make sure there are no valid references to the tied object</source>
          <target state="translated">スクリプトを正常に動作させて警告を出さないようにするには、関連付けられたオブジェクトへの有効な参照がないことを確認してください。</target>
        </trans-unit>
        <trans-unit id="3d2c84cce621656fbbd6db23ecc45f9cb65b75f8" translate="yes" xml:space="preserve">
          <source>To get the stash pointer for a particular package, use the function:</source>
          <target state="translated">特定のパッケージのスタッシュポインタを取得するには、関数を使用します。</target>
        </trans-unit>
        <trans-unit id="2990698bc29bbd13b737294b202675b151d03401" translate="yes" xml:space="preserve">
          <source>To get the version number from a Perl module, consumers should use the &lt;code&gt;MM-&amp;gt;parse_version($file)&lt;/code&gt; method provided by &lt;a href=&quot;ExtUtils::MakeMaker&quot;&gt;ExtUtils::MakeMaker&lt;/a&gt; or &lt;a href=&quot;Module::Metadata&quot;&gt;Module::Metadata&lt;/a&gt;. For example, for the module given by &lt;code&gt;$mod&lt;/code&gt;, the version may be retrieved in one of the following ways:</source>
          <target state="translated">Perlモジュールからバージョン番号を取得するには、コンシューマーは&lt;a href=&quot;ExtUtils::MakeMaker&quot;&gt;ExtUtils :: MakeMaker&lt;/a&gt;または&lt;a href=&quot;Module::Metadata&quot;&gt;Module :: Metadata&lt;/a&gt;によって提供される &lt;code&gt;MM-&amp;gt;parse_version($file)&lt;/code&gt; メソッドを使用する必要があります。たとえば、 &lt;code&gt;$mod&lt;/code&gt; で指定されたモジュールの場合、バージョンは次のいずれかの方法で取得できます。</target>
        </trans-unit>
        <trans-unit id="1496f65198c7ac994d7422ae9ced83ce54781e58" translate="yes" xml:space="preserve">
          <source>To get things going, note that GBARR/Scalar-List-Utils-1.18.tar.gz is compatible with ancient perls and that File::Temp is listed as a prerequisite but CPAN has reasonable workarounds if it is missing.</source>
          <target state="translated">物事を進めるために、GBARR/Scalar-List-Utils-1.18.tar.gz は古い Perl と互換性があり、File::Temp は前提条件としてリストアップされていますが、CPAN はこれを欠いている場合の合理的な回避策を用意していることに注意してください。</target>
        </trans-unit>
        <trans-unit id="0258f9df35378eac84877d3f62eff75269ae164c" translate="yes" xml:space="preserve">
          <source>To get valgrind and for more information see</source>
          <target state="translated">valgrindの取得と詳細については、以下を参照してください。</target>
        </trans-unit>
        <trans-unit id="969efaa9efa953c87797414000140cc60d6a47f5" translate="yes" xml:space="preserve">
          <source>To go through all of the keys, use the &lt;code&gt;&lt;a href=&quot;functions/keys&quot;&gt;keys&lt;/a&gt;&lt;/code&gt; function. This extracts all of the keys of the hash and gives them back to you as a list. You can then get the value through the particular key you're processing:</source>
          <target state="translated">すべてのキーを確認するには、 &lt;code&gt;&lt;a href=&quot;functions/keys&quot;&gt;keys&lt;/a&gt;&lt;/code&gt; 関数を使用します。これにより、ハッシュのすべてのキーが抽出され、リストとして返されます。次に、処理している特定のキーを通じて値を取得できます。</target>
        </trans-unit>
        <trans-unit id="0bb8b0be0f6dbf55ac7483ea415db4f8150fbafd" translate="yes" xml:space="preserve">
          <source>To go through all of the keys, use the &lt;code&gt;keys&lt;/code&gt; function. This extracts all of the keys of the hash and gives them back to you as a list. You can then get the value through the particular key you're processing:</source>
          <target state="translated">すべてのキーを確認するには、 &lt;code&gt;keys&lt;/code&gt; 機能を使用します。これにより、ハッシュのすべてのキーが抽出され、リストとして返されます。次に、処理している特定のキーを介して値を取得できます。</target>
        </trans-unit>
        <trans-unit id="da7117148549139674b757cf18ceb49ea4e3b714" translate="yes" xml:space="preserve">
          <source>To hack on the Perl guts, you'll need to read the following things:</source>
          <target state="translated">Perl のガッツをハックするには、以下のことを読む必要があります。</target>
        </trans-unit>
        <trans-unit id="bf182f7a67e6a5ec57b171f14e7d3fa5c6ddc216" translate="yes" xml:space="preserve">
          <source>To handle this situation, Perl uses</source>
          <target state="translated">この状況を処理するために、Perlは</target>
        </trans-unit>
        <trans-unit id="adcd3970934fc11a2c18b9c7c3e26524958accfd" translate="yes" xml:space="preserve">
          <source>To handle this situation, the PPCODE directive is used and the stack is extended using the macro:</source>
          <target state="translated">この状況を処理するために、PPCODE指令を使用し、マクロを使用してスタックを拡張します。</target>
        </trans-unit>
        <trans-unit id="f2c53c3c3d7de6d2315fba06d0366c539cf64b63" translate="yes" xml:space="preserve">
          <source>To have everything installed in your home directory, do the following.</source>
          <target state="translated">すべてをホームディレクトリにインストールするには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="ebc28ed79805f971814bf2f23886e1860e904a26" translate="yes" xml:space="preserve">
          <source>To help explain what &lt;code&gt;File::GlobMapper&lt;/code&gt; does, consider what code you would write if you wanted to rename all files in the current directory that ended in &lt;code&gt;.tar.gz&lt;/code&gt; to &lt;code&gt;.tgz&lt;/code&gt;. So say these files are in the current directory</source>
          <target state="translated">&lt;code&gt;File::GlobMapper&lt;/code&gt; 機能を説明するために、現在のディレクトリで &lt;code&gt;.tar.gz&lt;/code&gt; で終わるすべてのファイルの名前を &lt;code&gt;.tgz&lt;/code&gt; に変更する場合は、どのコードを記述するかを検討してください。これらのファイルが現在のディレクトリにあるとしましょう</target>
        </trans-unit>
        <trans-unit id="2009b3db85976237ffec01f5a479f250593bd279" translate="yes" xml:space="preserve">
          <source>To help understand how to write a Perl source filter we need an example to study. Here is a complete source filter that performs rot13 decoding. (Rot13 is a very simple encryption scheme used in Usenet postings to hide the contents of offensive posts. It moves every letter forward thirteen places, so that A becomes N, B becomes O, and Z becomes M.)</source>
          <target state="translated">Perl のソースフィルタの書き方を理解するためには、例が必要です。これは rot13 デコーディングを行う完全なソースフィルタです。(Rot13 はユーズネットの投稿で、攻撃的な投稿の内容を隠すために使われている非常にシンプルな暗号化方式です。これはすべての文字を 13 箇所前進させ、A が N になり、B が O になり、Z が M になるようにしています。)</target>
        </trans-unit>
        <trans-unit id="b67c3276fc328ee702718e80d3624e6e736f9072" translate="yes" xml:space="preserve">
          <source>To help understand why this can be a real problem first consider how a callback is set up in an all C environment. Typically a C API will provide a function to register a callback. This will expect a pointer to a function as one of its parameters. Below is a call to a hypothetical function &lt;code&gt;register_fatal&lt;/code&gt; which registers the C function to get called when a fatal error occurs.</source>
          <target state="translated">なぜこれが本当の問題になるのかを理解するために、まずすべてのC環境でコールバックがどのように設定されているかを検討します。通常、C APIはコールバックを登録する関数を提供します。これは、そのパラメーターの1つとして関数へのポインターを期待します。以下は、致命的なエラーが発生したときに呼び出されるC関数を登録する架空の関数 &lt;code&gt;register_fatal&lt;/code&gt; の呼び出しです。</target>
        </trans-unit>
        <trans-unit id="6caa11e5f28551bc8c9f71be4abd8c87215d7f26" translate="yes" xml:space="preserve">
          <source>To help you convert legacy programs to more modern Perl, the &lt;a href=&quot;pl2pm&quot;&gt;pl2pm&lt;/a&gt; utility will help you convert old-style Perl 4 libraries to new-style Perl5 modules.</source>
          <target state="translated">レガシープログラムをより新しいPerlに変換するために、&lt;a href=&quot;pl2pm&quot;&gt;pl2pm&lt;/a&gt;ユーティリティは、古いスタイルのPerl 4ライブラリを新しいスタイルのPerl5モジュールに変換するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="c501d022d8a0fffa65c230084aad7354f866cab9" translate="yes" xml:space="preserve">
          <source>To help you figure out what was undefined, perl will try to tell you the name of the variable (if any) that was undefined. In some cases it cannot do this, so it also tells you what operation you used the undefined value in. Note, however, that perl optimizes your program and the operation displayed in the warning may not necessarily appear literally in your program. For example, &lt;code&gt;&quot;that $foo&quot;&lt;/code&gt; is usually optimized into &lt;code&gt;&quot;that &quot; . $foo&lt;/code&gt; , and the warning will refer to the &lt;code&gt;concatenation (.)&lt;/code&gt; operator, even though there is no &lt;code&gt;.&lt;/code&gt; in your program.</source>
          <target state="translated">何が未定義であるかを理解しやすくするために、perlは未定義の変数（存在する場合）の名前を教えようとします。場合によってはこれを実行できないため、未定義の値をどの操作で使用したかも通知されます。ただし、perlはプログラムを最適化し、警告に表示される操作は必ずしもプログラムに文字通り表示されない場合があります。たとえば、 &lt;code&gt;&quot;that $foo&quot;&lt;/code&gt; は通常、 &lt;code&gt;&quot;that &quot; . $foo&lt;/code&gt; 最適化されます。$ foo、および警告がない場合でも、 &lt;code&gt;concatenation (.)&lt;/code&gt; 演算子を参照し &lt;code&gt;.&lt;/code&gt; あなたのプログラムで。</target>
        </trans-unit>
        <trans-unit id="a5f43865bbac7f1f33a9c88f0ac1c82c9566920f" translate="yes" xml:space="preserve">
          <source>To help you figure out what was undefined, perl will try to tell you the name of the variable (if any) that was undefined. In some cases it cannot do this, so it also tells you what operation you used the undefined value in. Note, however, that perl optimizes your program and the operation displayed in the warning may not necessarily appear literally in your program. For example, &lt;code&gt;&quot;that $foo&quot;&lt;/code&gt; is usually optimized into &lt;code&gt;&quot;that &quot; . $foo&lt;/code&gt;, and the warning will refer to the &lt;code&gt;concatenation (.)&lt;/code&gt; operator, even though there is no &lt;code&gt;.&lt;/code&gt; in your program.</source>
          <target state="translated">何が未定義であるかを理解しやすくするために、perlは未定義の変数（存在する場合）の名前を教えようとします。場合によってはこれができないため、未定義の値を使用した操作も示されます。ただし、perlはプログラムを最適化し、警告に表示される操作は必ずしもプログラムに文字通り表示されるとは限りません。たとえば、 &lt;code&gt;&quot;that $foo&quot;&lt;/code&gt; は通常 &lt;code&gt;&quot;that &quot; . $foo&lt;/code&gt; 最適化されます。$ foo、および警告は、 &lt;code&gt;.&lt;/code&gt; がない場合でも、 &lt;code&gt;concatenation (.)&lt;/code&gt; 演算子を参照します。あなたのプログラムで。</target>
        </trans-unit>
        <trans-unit id="77d1efff4e4ad59e580cc05099536ea5f027ae77" translate="yes" xml:space="preserve">
          <source>To hide the rough edges under the hood, provide a tie()d interface to the package &lt;code&gt;symbolic&lt;/code&gt; . Add methods</source>
          <target state="translated">フードの下の粗いエッジを非表示にするには、パッケージ &lt;code&gt;symbolic&lt;/code&gt; に tie（）dインターフェースを提供します。メソッドを追加する</target>
        </trans-unit>
        <trans-unit id="58c28f318aa4f864e9846446b68afedbfe1de577" translate="yes" xml:space="preserve">
          <source>To hide the rough edges under the hood, provide a tie()d interface to the package &lt;code&gt;symbolic&lt;/code&gt;. Add methods</source>
          <target state="translated">ボンネットの下の粗いエッジを隠すには、パッケージ &lt;code&gt;symbolic&lt;/code&gt; へのtie（）dインターフェイスを提供します。メソッドを追加する</target>
        </trans-unit>
        <trans-unit id="4b357009cc7277d51ef692d8123b4f3841c85837" translate="yes" xml:space="preserve">
          <source>To illustrate how to use &lt;code&gt;InputLength&lt;/code&gt; here is a script that walks a zip file and prints out how many lines are in each compressed file (if you intend write code to walking through a zip file for real see &lt;a href=&quot;IO::Uncompress::Unzip#Walking-through-a-zip-file&quot;&gt;&quot;Walking through a zip file&quot; in IO::Uncompress::Unzip&lt;/a&gt; ). Also, although this example uses the zlib-based compression, the technique can be used by the other &lt;code&gt;IO::Uncompress::*&lt;/code&gt; modules.</source>
          <target state="translated">&lt;code&gt;InputLength&lt;/code&gt; の使用方法を説明するために、zipファイルをウォークし、各圧縮ファイルの行数を出力するスクリプトを示します（zipファイルを実際にウォークスルーするコードを作成する場合は&lt;a href=&quot;IO::Uncompress::Unzip#Walking-through-a-zip-file&quot;&gt;、IOの「zipファイルをウォークスルー」を&lt;/a&gt;参照してください）。 :: Uncompress :: Unzip）。また、この例ではzlibベースの圧縮を使用していますが、この手法は他の &lt;code&gt;IO::Uncompress::*&lt;/code&gt; モジュールでも使用できます。</target>
        </trans-unit>
        <trans-unit id="bb09986ebdb919a3ce53d54257037e7652baac8f" translate="yes" xml:space="preserve">
          <source>To illustrate the differences between these variables, consider the following Perl expression, which uses a single-quoted string. After execution of this statement, perl may have set all four special error variables:</source>
          <target state="translated">これらの変数の違いを説明するために、単一引用符で囲まれた文字列を使用する次のPerl式を考えてみましょう。この文を実行した後、Perlは4つの特別なエラー変数をすべて設定しているかもしれません。</target>
        </trans-unit>
        <trans-unit id="f0157186b912ecd3453913b9ba18ef7c370be226" translate="yes" xml:space="preserve">
          <source>To illustrate this feature, we'll design a pattern that matches if a string contains a palindrome. (This is a word or a sentence that, while ignoring spaces, interpunctuation and case, reads the same backwards as forwards. We begin by observing that the empty string or a string containing just one word character is a palindrome. Otherwise it must have a word character up front and the same at its end, with another palindrome in between.</source>
          <target state="translated">この機能を説明するために、文字列に回文が含まれている場合にマッチするパターンを設計してみましょう。これは、スペースや区切り記号、大文字小文字を無視して、後ろ向きに読んでも後ろ向きに読んでも同じように読める単語や文のことです。まず、空の文字列や単語1文字だけを含む文字列が回文であることを観察します。そうでない場合は、前に単語の文字があり、最後に同じ文字があり、その間に別の回文がある必要があります。</target>
        </trans-unit>
        <trans-unit id="983dc7293d2e1cce05648cd63638e4f7e22fc331" translate="yes" xml:space="preserve">
          <source>To illustrate unpacking for bit strings, we'll decompose a simple status register (a &quot;-&quot; stands for a &quot;reserved&quot; bit):</source>
          <target state="translated">ビット文字列の展開を説明するために、単純なステータスレジスタ(&quot;-&quot;は &quot;予約済み &quot;ビットを意味します)を分解してみましょう。</target>
        </trans-unit>
        <trans-unit id="0eeac6bf1837c3892fad2067238a40143aea5c3f" translate="yes" xml:space="preserve">
          <source>To illustrate,</source>
          <target state="translated">説明するために。</target>
        </trans-unit>
        <trans-unit id="3f180de5f2359e1c5045cf60151ad16271ecfbd0" translate="yes" xml:space="preserve">
          <source>To implement a copy constructor, add &lt;code&gt;'=' =&amp;gt; \&amp;amp;cpy&lt;/code&gt; to &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; overload&lt;/code&gt; line, and code (this code assumes that mutators change things one level deep only, so recursive copying is not needed):</source>
          <target state="translated">コピーコンストラクターを実装するには、 &lt;code&gt;'=' =&amp;gt; \&amp;amp;cpy&lt;/code&gt; を追加して、 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; overload&lt;/code&gt; 行とコードを&lt;a href=&quot;functions/use&quot;&gt;使用&lt;/a&gt;します（このコードでは、ミューテーターが1レベルだけ変更することを前提としているため、再帰的なコピーは必要ありません）。</target>
        </trans-unit>
        <trans-unit id="1ef1c60a444763ee513ae1faa2574b43d63f6e12" translate="yes" xml:space="preserve">
          <source>To implement a copy constructor, add &lt;code&gt;'=' =&amp;gt; \&amp;amp;cpy&lt;/code&gt; to &lt;code&gt;use overload&lt;/code&gt; line, and code (this code assumes that mutators change things one level deep only, so recursive copying is not needed):</source>
          <target state="translated">コピーコンストラクターを実装するには、 &lt;code&gt;'=' =&amp;gt; \&amp;amp;cpy&lt;/code&gt; を追加し &lt;code&gt;use overload&lt;/code&gt; 行を使用し、コードを記述します（このコードは、ミューテーターが1レベルだけ深く変更することを前提としているため、再帰的なコピーは必要ありません）。</target>
        </trans-unit>
        <trans-unit id="8240260917b1a03cdad7c5747565fe071f2719a2" translate="yes" xml:space="preserve">
          <source>To implement most arithmetic operations is easy; one should just use the tables of operations, and change the code which fills %subr to</source>
          <target state="translated">ほとんどの算術演算を実装するのは簡単です。演算のテーブルを使用して、%subr を埋めるコードを</target>
        </trans-unit>
        <trans-unit id="81c4d513cec75ad639c29820e8f6fc040826df1f" translate="yes" xml:space="preserve">
          <source>To import subroutines:</source>
          <target state="translated">サブルーチンをインポートする。</target>
        </trans-unit>
        <trans-unit id="97177a061d7ff62a243885c9bd4e1efe9ede32f2" translate="yes" xml:space="preserve">
          <source>To increase the value of something by 1 (or by some other number, if so specified).</source>
          <target state="translated">何かの値を1だけ増やすこと(指定されている場合は他の数だけ増やすこと)。</target>
        </trans-unit>
        <trans-unit id="72b80e806b1c83aea2a8c7cd737f1e4bbb0943c8" translate="yes" xml:space="preserve">
          <source>To indicate to rather use commandline tools than modules</source>
          <target state="translated">モジュールよりもコマンドラインツールを使うことを示すために</target>
        </trans-unit>
        <trans-unit id="75120c587d6fba4a38cc9dc45cf5606751546e6f" translate="yes" xml:space="preserve">
          <source>To insert a line after one already in the file, use the &lt;code&gt;-n&lt;/code&gt; switch. It's just like &lt;code&gt;-p&lt;/code&gt; except that it doesn't print &lt;code&gt;$_&lt;/code&gt; at the end of the loop, so you have to do that yourself. In this case, print &lt;code&gt;$_&lt;/code&gt; first, then print the line that you want to add.</source>
          <target state="translated">ファイル内ですでに1行後に行を挿入するには、 &lt;code&gt;-n&lt;/code&gt; スイッチを使用します。ループの最後に &lt;code&gt;$_&lt;/code&gt; を出力しないことを除いて、それは &lt;code&gt;-p&lt;/code&gt; と同じなので、自分で行う必要があります。この場合、最初に &lt;code&gt;$_&lt;/code&gt; を印刷してから、追加する行を印刷します。</target>
        </trans-unit>
        <trans-unit id="574f86f03c88819ff70bca34830f6be35a8bf5f1" translate="yes" xml:space="preserve">
          <source>To install NetWare Perl onto a NetWare server, first map the Sys volume of a NetWare server to</source>
          <target state="translated">NetWare サーバに NetWare Perl をインストールするには、まず、NetWare サーバの Sys ボリュームを</target>
        </trans-unit>
        <trans-unit id="ee9638bdc9d8a0c759ba97d86bfdc7724a758ac8" translate="yes" xml:space="preserve">
          <source>To install a callback I pass the name of the callback and a subroutine reference to TAP::Harness or TAP::Parser's callback method:</source>
          <target state="translated">コールバックをインストールするには、コールバックの名前とTAP::HarnessやTAP::Parserのコールバックメソッドへのサブルーチン参照を渡します。</target>
        </trans-unit>
        <trans-unit id="e3c3d18a60e95dd185226e349523858601f99df9" translate="yes" xml:space="preserve">
          <source>To install the Perl headers and the class CPerlBase documentation so that you no more need the Perl sources around to compile Perl applications using the SDK:</source>
          <target state="translated">PerlヘッダとクラスCPerlBaseドキュメントをインストールして、SDKを使用してPerlアプリケーションをコンパイルするためのPerlソースが不要になるようにします。</target>
        </trans-unit>
        <trans-unit id="a7a520bfb7587900e1cbb96bf573db69af079c5b" translate="yes" xml:space="preserve">
          <source>To iterate over the indices of an array, use &lt;code&gt;&lt;a href=&quot;functions/foreach&quot;&gt;foreach&lt;/a&gt; &lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt; $i (0 .. $#array)
{}&lt;/code&gt; . &lt;code&gt;&lt;a href=&quot;functions/foreach&quot;&gt;foreach&lt;/a&gt; &lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt; $v (@array) {}&lt;/code&gt; iterates over the values.</source>
          <target state="translated">配列のインデックスを反復処理するには、 &lt;code&gt;&lt;a href=&quot;functions/foreach&quot;&gt;foreach&lt;/a&gt; &lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt; $i (0 .. $#array) {}&lt;/code&gt; ます。 &lt;code&gt;&lt;a href=&quot;functions/foreach&quot;&gt;foreach&lt;/a&gt; &lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt; $v (@array) {}&lt;/code&gt; は値を反復処理します。</target>
        </trans-unit>
        <trans-unit id="bb6bf360110a80a4c3eb61df0aff99d211da1c11" translate="yes" xml:space="preserve">
          <source>To iterate over the indices of an array, use &lt;code&gt;foreach my $i (0 .. $#array) {}&lt;/code&gt;. &lt;code&gt;foreach my $v (@array) {}&lt;/code&gt; iterates over the values.</source>
          <target state="translated">配列のインデックスを反復処理するには、 &lt;code&gt;foreach my $i (0 .. $#array) {}&lt;/code&gt; ます。 &lt;code&gt;foreach my $v (@array) {}&lt;/code&gt; は値を繰り返し処理します。</target>
        </trans-unit>
        <trans-unit id="8f0a51f73b6311fa2b970169a1f0134f7c61aef8" translate="yes" xml:space="preserve">
          <source>To join a mailing list for announcements about &lt;code&gt;Memoize&lt;/code&gt; , send an empty message to &lt;code&gt;mjd-perl-memoize-request@plover.com&lt;/code&gt; . This mailing list is for announcements only and has extremely low traffic---fewer than two messages per year.</source>
          <target state="translated">&lt;code&gt;Memoize&lt;/code&gt; に関するお知らせのメーリングリストに参加するには、空のメッセージを &lt;code&gt;mjd-perl-memoize-request@plover.com&lt;/code&gt; に送信してください。このメーリングリストはアナウンスのみを目的としており、トラフィックが非常に少なく、1年に2通未満です。</target>
        </trans-unit>
        <trans-unit id="45a6289801496005295f094536fc8ecc4c1c8e83" translate="yes" xml:space="preserve">
          <source>To join a mailing list for announcements about &lt;code&gt;Memoize&lt;/code&gt;, send an empty message to &lt;code&gt;mjd-perl-memoize-request@plover.com&lt;/code&gt;. This mailing list is for announcements only and has extremely low traffic---fewer than two messages per year.</source>
          <target state="translated">&lt;code&gt;Memoize&lt;/code&gt; に関するお知らせのメーリングリストに参加するには、空のメッセージを &lt;code&gt;mjd-perl-memoize-request@plover.com&lt;/code&gt; に送信してください。このメーリングリストはアナウンス専用であり、トラフィックは非常に少なく、年間2通未満のメッセージです。</target>
        </trans-unit>
        <trans-unit id="9c7770af2e023d19bb1b24c66498040c02b4d820" translate="yes" xml:space="preserve">
          <source>To join a very low-traffic mailing list for announcements about &lt;code&gt;Memoize&lt;/code&gt; , send an empty note to &lt;code&gt;mjd-perl-memoize-request@plover.com&lt;/code&gt; .</source>
          <target state="translated">トラフィックが非常に少ないメーリングリストに参加して &lt;code&gt;Memoize&lt;/code&gt; に関するお知らせを受け取るには、空のメモを &lt;code&gt;mjd-perl-memoize-request@plover.com&lt;/code&gt; に送信してください。</target>
        </trans-unit>
        <trans-unit id="ed725c5a7b13b5f14db9ddb8b3bae580a82d496b" translate="yes" xml:space="preserve">
          <source>To join a very low-traffic mailing list for announcements about &lt;code&gt;Memoize&lt;/code&gt;, send an empty note to &lt;code&gt;mjd-perl-memoize-request@plover.com&lt;/code&gt;.</source>
          <target state="translated">発表のための非常に低トラフィックのメーリングリストに参加するには &lt;code&gt;Memoize&lt;/code&gt; を、空にノートを送信 &lt;code&gt;mjd-perl-memoize-request@plover.com&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="23905cfc18d99e713280156ef1eb62fd65833ce9" translate="yes" xml:space="preserve">
          <source>To just compare two strings for equality/non-equality, you can just use &lt;a href=&quot;perlapi#memEQ&quot;&gt;&lt;code&gt;memEQ()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;perlapi#memEQ&quot;&gt;&lt;code&gt;memNE()&lt;/code&gt;&lt;/a&gt; as usual, except the strings must be both UTF-8 or not UTF-8 encoded.</source>
          <target state="translated">2つの文字列を同等/非同等で比較するには、通常どおり&lt;a href=&quot;perlapi#memEQ&quot;&gt; &lt;code&gt;memEQ()&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;perlapi#memEQ&quot;&gt; &lt;code&gt;memNE()&lt;/code&gt; &lt;/a&gt;を使用できます。ただし、文字列はUTF-8であるか、UTF-8でエンコードされていない必要があります。</target>
        </trans-unit>
        <trans-unit id="30da17ba518ee8896f295021c334b446312ba2d0" translate="yes" xml:space="preserve">
          <source>To just compare two strings for equality/non-equality, you can just use &lt;a href=&quot;perlapi#memEQ&quot;&gt;memEQ() &lt;/a&gt; and &lt;a href=&quot;perlapi#memEQ&quot;&gt;memNE() &lt;/a&gt; as usual, except the strings must be both UTF-8 or not UTF-8 encoded.</source>
          <target state="translated">2つの文字列が等しいかどうかを比較するには、通常どおり&lt;a href=&quot;perlapi#memEQ&quot;&gt;memEQ（）&lt;/a&gt;と&lt;a href=&quot;perlapi#memEQ&quot;&gt;memNE（）&lt;/a&gt;を使用できます。ただし、文字列は両方ともUTF-8またはUTF-8でエンコードされていない必要があります。</target>
        </trans-unit>
        <trans-unit id="bfd1d911fc5d8c1a13ece46d4a41278866b326f9" translate="yes" xml:space="preserve">
          <source>To keep our namespace nice and unpolluted, edit the .pm file and change the variable &lt;code&gt;@EXPORT&lt;/code&gt; to &lt;code&gt;@EXPORT_OK&lt;/code&gt; . Finally, in the .xs file, edit the #include line to read:</source>
          <target state="translated">名前空間を汚染されていない状態に保つには、.pmファイルを編集し、変数 &lt;code&gt;@EXPORT&lt;/code&gt; を &lt;code&gt;@EXPORT_OK&lt;/code&gt; に変更します。最後に、.xsファイルで、＃include行を編集して以下を読み取ります。</target>
        </trans-unit>
        <trans-unit id="66c523aae45e20a099aa6d752ca36a4c5fad3933" translate="yes" xml:space="preserve">
          <source>To keep our namespace nice and unpolluted, edit the .pm file and change the variable &lt;code&gt;@EXPORT&lt;/code&gt; to &lt;code&gt;@EXPORT_OK&lt;/code&gt;. Finally, in the .xs file, edit the #include line to read:</source>
          <target state="translated">名前空間を &lt;code&gt;@EXPORT_OK&lt;/code&gt; 汚染されていない状態に保つには、.pmファイルを編集し、変数 &lt;code&gt;@EXPORT&lt;/code&gt; を@EXPORT_OKに変更します。最後に、.xsファイルで#include行を編集して次のようにします。</target>
        </trans-unit>
        <trans-unit id="03272788bb4c31073d76ce4d5e5b7d43fa610bff" translate="yes" xml:space="preserve">
          <source>To learn how to install modules you download from CPAN, read &lt;a href=&quot;perlmodinstall&quot;&gt;perlmodinstall&lt;/a&gt;.</source>
          <target state="translated">CPANからダウンロードしたモジュールをインストールする方法については、&lt;a href=&quot;perlmodinstall&quot;&gt;perlmodinstallをお&lt;/a&gt;読みください。</target>
        </trans-unit>
        <trans-unit id="6a06d2306514b40b8ba1c92a7641c86fc2fa15b9" translate="yes" xml:space="preserve">
          <source>To learn how to use a particular module, use &lt;code&gt;perldoc &lt;i&gt;Module::Name&lt;/i&gt;&lt;/code&gt;. Typically you will want to &lt;code&gt;use &lt;i&gt;Module::Name&lt;/i&gt;&lt;/code&gt;, which will then give you access to exported functions or an OO interface to the module.</source>
          <target state="translated">特定のモジュールの使用方法を学ぶには、 &lt;code&gt;perldoc &lt;i&gt;Module::Name&lt;/i&gt;&lt;/code&gt; 使用して&lt;i&gt;ください&lt;/i&gt;。通常 &lt;code&gt;use &lt;i&gt;Module::Name&lt;/i&gt;&lt;/code&gt; を使用します。これにより、エクスポートされた関数またはモジュールへのOOインターフェースにアクセスできるようになります。</target>
        </trans-unit>
        <trans-unit id="085a503b5041562d55123a7fc6e92076974024bc" translate="yes" xml:space="preserve">
          <source>To learn more, just type a bogus option, like &lt;b&gt;-\?&lt;/b&gt;, and a long usage message will be provided. There are a fair number of possibilities.</source>
          <target state="translated">詳細については、&lt;b&gt;-\？の&lt;/b&gt;ような偽のオプションを入力して&lt;b&gt;ください。&lt;/b&gt;、長い使用方法のメッセージが表示されます。可能性はかなりあります。</target>
        </trans-unit>
        <trans-unit id="7513ca0f7dee98a8be8a3dca79c36e371b5b2223" translate="yes" xml:space="preserve">
          <source>To limit the allowed bracked notation methods to a specific list, use the whitelist() method:</source>
          <target state="translated">許可されているブロック表記メソッドを特定のリストに限定するには、whitelist()メソッドを使用します。</target>
        </trans-unit>
        <trans-unit id="b660f64338ea03a5a1e256309c3e2566abdfdf76" translate="yes" xml:space="preserve">
          <source>To limit the number of decimal places in your numbers, you can use the &lt;code&gt;&lt;a href=&quot;functions/printf&quot;&gt;printf&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/sprintf&quot;&gt;sprintf&lt;/a&gt;&lt;/code&gt; function. See &lt;a href=&quot;perlop#Floating-point-Arithmetic&quot;&gt;Floating-point Arithmetic in perlop&lt;/a&gt; for more details.</source>
          <target state="translated">数値の小数点以下の桁数を制限するには、 &lt;code&gt;&lt;a href=&quot;functions/printf&quot;&gt;printf&lt;/a&gt;&lt;/code&gt; 関数または &lt;code&gt;&lt;a href=&quot;functions/sprintf&quot;&gt;sprintf&lt;/a&gt;&lt;/code&gt; 関数を使用できます。詳細について&lt;a href=&quot;perlop#Floating-point-Arithmetic&quot;&gt;は、perlopの浮動小数点演算を参照&lt;/a&gt;してください。</target>
        </trans-unit>
        <trans-unit id="0835636a7544b690a78e5a06870d277ecb58681d" translate="yes" xml:space="preserve">
          <source>To limit the number of decimal places in your numbers, you can use the &lt;code&gt;printf&lt;/code&gt; or &lt;code&gt;sprintf&lt;/code&gt; function. See &lt;a href=&quot;perlop#Floating-point-Arithmetic&quot;&gt;&quot;Floating-point Arithmetic&quot; in perlop&lt;/a&gt; for more details.</source>
          <target state="translated">数値の小数点以下の桁数を制限するには、 &lt;code&gt;printf&lt;/code&gt; または &lt;code&gt;sprintf&lt;/code&gt; 関数を使用できます。詳細について&lt;a href=&quot;perlop#Floating-point-Arithmetic&quot;&gt;は、perlopの「浮動小数点演算」を参照&lt;/a&gt;してください。</target>
        </trans-unit>
        <trans-unit id="a08be93803c5f2a1dab3670911ed75d37f74ad6a" translate="yes" xml:space="preserve">
          <source>To load &lt;code&gt;TAP::Harness&lt;/code&gt; plugins, you'll need to use the &lt;code&gt;tap_harness_args&lt;/code&gt; parameter to &lt;code&gt;new&lt;/code&gt; , typically from your &lt;code&gt;Build.PL&lt;/code&gt; . For example:</source>
          <target state="translated">&lt;code&gt;TAP::Harness&lt;/code&gt; プラグインをロードするには、通常は &lt;code&gt;Build.PL&lt;/code&gt; から、 &lt;code&gt;tap_harness_args&lt;/code&gt; パラメータを &lt;code&gt;new&lt;/code&gt; に使用する必要があります。例えば：</target>
        </trans-unit>
        <trans-unit id="189a273951294ca8e561bbd38119a481f3bcdeb3" translate="yes" xml:space="preserve">
          <source>To load &lt;code&gt;TAP::Harness&lt;/code&gt; plugins, you'll need to use the &lt;code&gt;tap_harness_args&lt;/code&gt; parameter to &lt;code&gt;new&lt;/code&gt;, typically from your &lt;code&gt;Build.PL&lt;/code&gt;. For example:</source>
          <target state="translated">ロードするには &lt;code&gt;TAP::Harness&lt;/code&gt; プラグインを、あなたが使用する必要があります &lt;code&gt;tap_harness_args&lt;/code&gt; のにパラメータを &lt;code&gt;new&lt;/code&gt; あなたから一般的に、 &lt;code&gt;Build.PL&lt;/code&gt; 。例えば：</target>
        </trans-unit>
        <trans-unit id="1281377e392724ce754ea5fba63ddbdb0e3e3b86" translate="yes" xml:space="preserve">
          <source>To load on demand. (Also called &amp;ldquo;lazy&amp;rdquo; loading.) Specifically, to call an &lt;code&gt;AUTOLOAD&lt;/code&gt; subroutine on behalf of an undefined subroutine.</source>
          <target state="translated">オンデマンドでロードする。（「遅延」ロードとも呼ばれます。）特に、未定義のサブルーチンに代わって &lt;code&gt;AUTOLOAD&lt;/code&gt; サブルーチンを呼び出すため。</target>
        </trans-unit>
        <trans-unit id="793c105080b4d15bf59a358db204c3e7d2658f2d" translate="yes" xml:space="preserve">
          <source>To load packages while adding them to &lt;code&gt;@ISA&lt;/code&gt;, see the &lt;a href=&quot;parent&quot;&gt;parent&lt;/a&gt; pragma. The discouraged &lt;a href=&quot;base&quot;&gt;base&lt;/a&gt; pragma does this as well, but should not be used except when compatibility with the discouraged &lt;a href=&quot;fields&quot;&gt;fields&lt;/a&gt; pragma is required.</source>
          <target state="translated">&lt;code&gt;@ISA&lt;/code&gt; にパッケージを追加しながらパッケージをロードするには、&lt;a href=&quot;parent&quot;&gt;親&lt;/a&gt;プラグマを参照してください。推奨されない&lt;a href=&quot;base&quot;&gt;ベース&lt;/a&gt;プラグマもこれを実行しますが、推奨されない&lt;a href=&quot;fields&quot;&gt;フィールド&lt;/a&gt;プラグマとの互換性が必要な場合を除いて使用しないでください。</target>
        </trans-unit>
        <trans-unit id="c23756075d8a23d3d03df135a356f7c210c8debd" translate="yes" xml:space="preserve">
          <source>To maintain backward compatibility with version 1.x of this module &lt;code&gt;gzreadline&lt;/code&gt; ignores the &lt;code&gt;$/&lt;/code&gt; variable - it</source>
          <target state="translated">このモジュールのバージョン1.xとの下位互換性を維持するために、 &lt;code&gt;gzreadline&lt;/code&gt; は &lt;code&gt;$/&lt;/code&gt; 変数を無視します-it</target>
        </trans-unit>
        <trans-unit id="abc4743aa98a734da932da278854d69561d0cbfb" translate="yes" xml:space="preserve">
          <source>To make &lt;code&gt;++&lt;/code&gt; and &lt;code&gt;--&lt;/code&gt; work, we need to implement actual mutators, either directly, or in &lt;code&gt;nomethod&lt;/code&gt; . We continue to do things inside &lt;code&gt;nomethod&lt;/code&gt; , thus add</source>
          <target state="translated">&lt;code&gt;++&lt;/code&gt; および &lt;code&gt;--&lt;/code&gt; を機能させるには、直接または &lt;code&gt;nomethod&lt;/code&gt; で実際のミューテーターを実装する必要があります。 &lt;code&gt;nomethod&lt;/code&gt; 内で引き続き処理を行うため、以下を追加します</target>
        </trans-unit>
        <trans-unit id="6a057782113c7191c271c05bf3e4a07cba925f05" translate="yes" xml:space="preserve">
          <source>To make &lt;code&gt;++&lt;/code&gt; and &lt;code&gt;--&lt;/code&gt; work, we need to implement actual mutators, either directly, or in &lt;code&gt;nomethod&lt;/code&gt;. We continue to do things inside &lt;code&gt;nomethod&lt;/code&gt;, thus add</source>
          <target state="translated">&lt;code&gt;++&lt;/code&gt; と &lt;code&gt;--&lt;/code&gt; を機能させるには、実際の &lt;code&gt;nomethod&lt;/code&gt; 直接、またはnomethodで実装する必要があります。私たちは &lt;code&gt;nomethod&lt;/code&gt; 内で物事を続けているので、</target>
        </trans-unit>
        <trans-unit id="91a1c6beb7c38d494fe7c7d801b2befdd4173ffc" translate="yes" xml:space="preserve">
          <source>To make &lt;code&gt;Hash::Util::FieldHash&lt;/code&gt; work, there were two changes to</source>
          <target state="translated">&lt;code&gt;Hash::Util::FieldHash&lt;/code&gt; を機能させるために、2つの変更がありました。</target>
        </trans-unit>
        <trans-unit id="b87c350e6119d6693a7cb04a8612a5e26f6e647d" translate="yes" xml:space="preserve">
          <source>To make a backup of &lt;code&gt;inFile.txt&lt;/code&gt; , give &lt;code&gt;-i&lt;/code&gt; a file extension to add:</source>
          <target state="translated">バックアップ作成するには &lt;code&gt;inFile.txt&lt;/code&gt; を与える &lt;code&gt;-i&lt;/code&gt; 追加するには、ファイルの拡張子を：</target>
        </trans-unit>
        <trans-unit id="6d55112a0a5725689f79da10048f1a7a2263eebb" translate="yes" xml:space="preserve">
          <source>To make a backup of &lt;code&gt;inFile.txt&lt;/code&gt;, give &lt;code&gt;-i&lt;/code&gt; a file extension to add:</source>
          <target state="translated">バックアップ作成するには &lt;code&gt;inFile.txt&lt;/code&gt; を与える &lt;code&gt;-i&lt;/code&gt; 追加するには、ファイルの拡張子を：</target>
        </trans-unit>
        <trans-unit id="6e23de5e44e6d05a87a65143f53c7e5d6f21dc61" translate="yes" xml:space="preserve">
          <source>To make a local branch of a remote branch:</source>
          <target state="translated">リモートブランチのローカルブランチを作成するには</target>
        </trans-unit>
        <trans-unit id="8414b77ccfd34c712fab8c626931679fd71f5d22" translate="yes" xml:space="preserve">
          <source>To make a long story short, you can use the special variables &lt;code&gt;&amp;amp;PL_sv_undef&lt;/code&gt; , &lt;code&gt;&amp;amp;PL_sv_yes&lt;/code&gt; and &lt;code&gt;&amp;amp;PL_sv_no&lt;/code&gt; with AVs and HVs, but you have to make sure you know what you're doing.</source>
          <target state="translated">長い話を簡単に &lt;code&gt;&amp;amp;PL_sv_no&lt;/code&gt; と、AVとHVで特殊変数 &lt;code&gt;&amp;amp;PL_sv_undef&lt;/code&gt; 、 &lt;code&gt;&amp;amp;PL_sv_yes&lt;/code&gt; 、＆PL_sv_noを使用できますが、自分が何をしているのかを確認する必要があります。</target>
        </trans-unit>
        <trans-unit id="da79e317ac8a925a940d2422dac9d23c152e3b6d" translate="yes" xml:space="preserve">
          <source>To make a long story short, you can use the special variables &lt;code&gt;&amp;amp;PL_sv_undef&lt;/code&gt;, &lt;code&gt;&amp;amp;PL_sv_yes&lt;/code&gt; and &lt;code&gt;&amp;amp;PL_sv_no&lt;/code&gt; with AVs and HVs, but you have to make sure you know what you're doing.</source>
          <target state="translated">簡単に &lt;code&gt;&amp;amp;PL_sv_no&lt;/code&gt; と、AVとHVで特別な変数 &lt;code&gt;&amp;amp;PL_sv_undef&lt;/code&gt; 、 &lt;code&gt;&amp;amp;PL_sv_yes&lt;/code&gt; 、＆PL_sv_noを使用できますが、何をしているのかを確認する必要があります。</target>
        </trans-unit>
        <trans-unit id="5c0463c040e841ec603e099982e8abee57b683e9" translate="yes" xml:space="preserve">
          <source>To make life easier when dealing with duplicate keys, &lt;b&gt;DB_File&lt;/b&gt; comes with a few utility methods.</source>
          <target state="translated">重複キーを処理する際の&lt;b&gt;作業&lt;/b&gt;を容易にするために、&lt;b&gt;DB_Fileに&lt;/b&gt;はいくつかのユーティリティメソッドが付属しています。</target>
        </trans-unit>
        <trans-unit id="5ae2d3fa0128e67ff0e0a2c8bcd480511ed4d982" translate="yes" xml:space="preserve">
          <source>To make proper use of the</source>
          <target state="translated">を適切に活用するために</target>
        </trans-unit>
        <trans-unit id="c44a199ec9bf1193e7c67a06e66e66c5a73ebf54" translate="yes" xml:space="preserve">
          <source>To make sure we're talking about the same thing when we discuss the removal of features or functionality from the Perl core, we have specific definitions for a few words and phrases.</source>
          <target state="translated">Perl コアからの機能や機能の削除について議論するときに、同じことを話していることを確認するために、いくつかの単語やフレーズの具体的な定義を用意しています。</target>
        </trans-unit>
        <trans-unit id="5942273fcaa449896c9e37c66cd4e802e9c0964a" translate="yes" xml:space="preserve">
          <source>To make symbols from a &lt;b&gt;module&lt;/b&gt; available for &lt;b&gt;import&lt;/b&gt; by other modules.</source>
          <target state="translated">&lt;b&gt;モジュールの&lt;/b&gt;シンボルを他のモジュールが&lt;b&gt;インポート&lt;/b&gt;できるようにする。</target>
        </trans-unit>
        <trans-unit id="dcd61647f554ce66ac28cd2d49ac0cbdb07ed537" translate="yes" xml:space="preserve">
          <source>To make the field hashes kick in, it is easiest to redefine &lt;code&gt;refaddr&lt;/code&gt; as</source>
          <target state="translated">フィールドハッシュを &lt;code&gt;refaddr&lt;/code&gt; するには、refaddrを次のように再定義するのが最も簡単です。</target>
        </trans-unit>
        <trans-unit id="ffcdcbe9b2ae0d61ba055686a39957aa53dc38e5" translate="yes" xml:space="preserve">
          <source>To make the interface more useful for older versions of Perl, a number of methods are supplied with &lt;b&gt;DB_File&lt;/b&gt; to simulate the missing array operations. All these methods are accessed via the object returned from the tie call.</source>
          <target state="translated">古いバージョンのPerlでインターフェースをより便利にするために、不足している配列操作をシミュレートするためのいくつかのメソッドが&lt;b&gt;DB_Fileで&lt;/b&gt;提供されています。これらのメソッドはすべて、tie呼び出しから返されたオブジェクトを介してアクセスされます。</target>
        </trans-unit>
        <trans-unit id="1e1af3e6c47d65824073836d9be72328a9d2a810" translate="yes" xml:space="preserve">
          <source>To make these calls fail</source>
          <target state="translated">これらの電話を失敗させるために</target>
        </trans-unit>
        <trans-unit id="5100ca13c61421986a8b595f7f48745403cf86c2" translate="yes" xml:space="preserve">
          <source>To make things more complicated, the hash may contain references to the actual destinations, for example:</source>
          <target state="translated">より複雑にするために、ハッシュには、例えば実際の目的地への参照が含まれているかもしれません。</target>
        </trans-unit>
        <trans-unit id="23271da81593c086fb9f97e8eda36eed5fe8ab37" translate="yes" xml:space="preserve">
          <source>To make use of either of the two filter modules above, place the line below in a Perl source file.</source>
          <target state="translated">上記の2つのフィルタモジュールのいずれかを利用するには、Perl のソースファイルに以下の行を入れてください。</target>
        </trans-unit>
        <trans-unit id="546b84e64be1bb2630d4087e9c7e0aa2ec07fbeb" translate="yes" xml:space="preserve">
          <source>To make use of threading, however, one usually wants the threads to share at least some data between themselves. This is done with the &lt;a href=&quot;threads/shared&quot;&gt;threads::shared&lt;/a&gt; module and the &lt;code&gt;:shared&lt;/code&gt; attribute:</source>
          <target state="translated">ただし、スレッディングを利用するには、通常、スレッド間で少なくとも一部のデータを共有する必要があります。これは、&lt;a href=&quot;threads/shared&quot;&gt;threads :: shared&lt;/a&gt;モジュールと &lt;code&gt;:shared&lt;/code&gt; 属性を使用して行われます。</target>
        </trans-unit>
        <trans-unit id="a04c440174950d35de1ff03f07736720e16d8ea1" translate="yes" xml:space="preserve">
          <source>To make use of threading, however, one usually wants the threads to share at least some data between themselves. This is done with the &lt;a href=&quot;threads::shared&quot;&gt;threads::shared&lt;/a&gt; module and the &lt;code&gt;:shared&lt;/code&gt; attribute:</source>
          <target state="translated">ただし、スレッド化を利用するには、通常、スレッドが少なくとも一部のデータをスレッド間で共有する必要があります。これは、&lt;a href=&quot;threads::shared&quot;&gt;threads :: shared&lt;/a&gt;モジュールと &lt;code&gt;:shared&lt;/code&gt; 属性を使用して行われます。</target>
        </trans-unit>
        <trans-unit id="482a24cc09ed210b4be1c7fca66ab517d60e1e62" translate="yes" xml:space="preserve">
          <source>To mark FILEHANDLE as UTF-8, use &lt;code&gt;:utf8&lt;/code&gt; or &lt;code&gt;:encoding(UTF-8)&lt;/code&gt; . &lt;code&gt;:utf8&lt;/code&gt; just marks the data as UTF-8 without further checking, while &lt;code&gt;:encoding(UTF-8)&lt;/code&gt; checks the data for actually being valid UTF-8. More details can be found in &lt;a href=&quot;../perlio/encoding&quot;&gt;PerlIO::encoding&lt;/a&gt;.</source>
          <target state="translated">FILEHANDLEをUTF-8としてマークするには、 &lt;code&gt;:utf8&lt;/code&gt; または &lt;code&gt;:encoding(UTF-8)&lt;/code&gt; を使用します。 &lt;code&gt;:utf8&lt;/code&gt; はデータをUTF-8としてマークするだけで、それ以上のチェックは行いません。一方、 &lt;code&gt;:encoding(UTF-8)&lt;/code&gt; は、データが実際に有効なUTF-8かどうかをチェックします。詳細は&lt;a href=&quot;../perlio/encoding&quot;&gt;PerlIO :: encodingにあり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="5274ade94ad24fbd8e1e1d8904bba9bc30f6d6c0" translate="yes" xml:space="preserve">
          <source>To mark FILEHANDLE as UTF-8, use &lt;code&gt;:utf8&lt;/code&gt; or &lt;code&gt;:encoding(UTF-8)&lt;/code&gt; . &lt;code&gt;:utf8&lt;/code&gt; just marks the data as UTF-8 without further checking, while &lt;code&gt;:encoding(UTF-8)&lt;/code&gt; checks the data for actually being valid UTF-8. More details can be found in &lt;a href=&quot;perlio/encoding&quot;&gt;PerlIO::encoding&lt;/a&gt;.</source>
          <target state="translated">FILEHANDLEをUTF-8としてマークするには、 &lt;code&gt;:utf8&lt;/code&gt; または &lt;code&gt;:encoding(UTF-8)&lt;/code&gt; を使用します。 &lt;code&gt;:utf8&lt;/code&gt; はデータをUTF-8としてマークするだけで、それ以上のチェックは行いません。一方、 &lt;code&gt;:encoding(UTF-8)&lt;/code&gt; は、データが実際に有効なUTF-8かどうかをチェックします。詳細は&lt;a href=&quot;perlio/encoding&quot;&gt;PerlIO :: encodingにあり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="5abdd218835bb6eb6001f3cd74ea29d6653d76a4" translate="yes" xml:space="preserve">
          <source>To mark FILEHANDLE as UTF-8, use &lt;code&gt;:utf8&lt;/code&gt; or &lt;code&gt;:encoding(UTF-8)&lt;/code&gt;. &lt;code&gt;:utf8&lt;/code&gt; just marks the data as UTF-8 without further checking, while &lt;code&gt;:encoding(UTF-8)&lt;/code&gt; checks the data for actually being valid UTF-8. More details can be found in &lt;a href=&quot;PerlIO::encoding&quot;&gt;PerlIO::encoding&lt;/a&gt;.</source>
          <target state="translated">FILEHANDLEをUTF-8としてマークするには、 &lt;code&gt;:utf8&lt;/code&gt; または &lt;code&gt;:encoding(UTF-8)&lt;/code&gt; を使用します。 &lt;code&gt;:utf8&lt;/code&gt; は、さらにチェックせずにデータをUTF-8としてマークするだけですが、 &lt;code&gt;:encoding(UTF-8)&lt;/code&gt; は、実際に有効なUTF-8であるかどうかデータをチェックします。詳細については、&lt;a href=&quot;PerlIO::encoding&quot;&gt;PerlIO :: encodingを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="b4e2df2dd87486f202e752cbd1bc2453ac926173" translate="yes" xml:space="preserve">
          <source>To minimize the number of sbrk(2)s, malloc() asks for more memory. This field gives the size of the yet unused part, which is sbrk(2)ed, but never touched.</source>
          <target state="translated">sbrk(2)の数を最小化するために、malloc()はより多くのメモリを要求します。このフィールドは、まだ使われていない部分のサイズを与えます。</target>
        </trans-unit>
        <trans-unit id="c7e29496ccd957aa4492216e45f2282e137e2591" translate="yes" xml:space="preserve">
          <source>To obtain this, a reference to a hash must be passed</source>
          <target state="translated">これを得るためには、ハッシュへの参照を渡す必要があります。</target>
        </trans-unit>
        <trans-unit id="76c61aa559d88fae477b92a372d192b3b51d4c5b" translate="yes" xml:space="preserve">
          <source>To open a file without blocking, creating if necessary:</source>
          <target state="translated">ブロックせずにファイルを開くには、必要に応じて作成します。</target>
        </trans-unit>
        <trans-unit id="354facfe42bf4e55b171df83905f745324ebd0c9" translate="yes" xml:space="preserve">
          <source>To open file for appending, create if necessary:</source>
          <target state="translated">追加用のファイルを開くには、必要に応じて作成します。</target>
        </trans-unit>
        <trans-unit id="1702818d3f57a9131b4035ed033f063e2b07cebf" translate="yes" xml:space="preserve">
          <source>To open file for appending, file must exist:</source>
          <target state="translated">追加用のファイルを開くには、ファイルが存在している必要があります。</target>
        </trans-unit>
        <trans-unit id="4967760590c67e61373186454a8e4a1135dcb6d9" translate="yes" xml:space="preserve">
          <source>To open file for reading:</source>
          <target state="translated">ファイルを開いて読むことができます。</target>
        </trans-unit>
        <trans-unit id="cee1bc0ab3a065feee926895157fb947a422ff0d" translate="yes" xml:space="preserve">
          <source>To open file for update, create file if necessary:</source>
          <target state="translated">更新用のファイルを開くには、必要に応じてファイルを作成します。</target>
        </trans-unit>
        <trans-unit id="7c8a25c4e2b2e915deaf352a915d4e6583e2f962" translate="yes" xml:space="preserve">
          <source>To open file for update, file must exist:</source>
          <target state="translated">更新用のファイルを開くには、ファイルが存在している必要があります。</target>
        </trans-unit>
        <trans-unit id="b8d1b7a21cb716decbfe05cd44f437ced848a3ac" translate="yes" xml:space="preserve">
          <source>To open file for update, file must not exist:</source>
          <target state="translated">更新用のファイルを開くには、ファイルが存在しない必要があります。</target>
        </trans-unit>
        <trans-unit id="e09916f7ec3e12864e36849354a4ebf1fbb19361" translate="yes" xml:space="preserve">
          <source>To open file for writing, create new file if needed or else truncate old file:</source>
          <target state="translated">書き込み用のファイルを開くには、必要に応じて新しいファイルを作成するか、古いファイルを切り捨てます。</target>
        </trans-unit>
        <trans-unit id="290398a666a114bce8d99caa62b27b49c84e4b59" translate="yes" xml:space="preserve">
          <source>To open file for writing, create new file, file must not exist:</source>
          <target state="translated">書き込み用のファイルを開くには、新規ファイルを作成する必要があります。</target>
        </trans-unit>
        <trans-unit id="d996476f79882a20a27ba1e93bb75ca52cdeca1e" translate="yes" xml:space="preserve">
          <source>To open the temporary filehandle with O_EXLOCK (open with exclusive file lock) use &lt;code&gt;EXLOCK=&amp;gt;1&lt;/code&gt;. This is supported only by some operating systems (most notably BSD derived systems). By default EXLOCK will be false. Former &lt;code&gt;File::Temp&lt;/code&gt; versions set EXLOCK to true, so to be sure to get an unlocked filehandle also with older versions, explicitly set &lt;code&gt;EXLOCK=&amp;gt;0&lt;/code&gt;.</source>
          <target state="translated">O_EXLOCKで一時ファイルハンドルを開く（排他ファイルロックで開く）には、 &lt;code&gt;EXLOCK=&amp;gt;1&lt;/code&gt; 使用します。これは、一部のオペレーティングシステム（特にBSD派生システム）でのみサポートされています。デフォルトでは、EXLOCKはfalseになります。以前の &lt;code&gt;File::Temp&lt;/code&gt; バージョンはEXLOCKをtrueに設定しているため、古いバージョンでもロック解除されたファイルハンドルを確実に取得するには、明示的に &lt;code&gt;EXLOCK=&amp;gt;0&lt;/code&gt; 設定します。</target>
        </trans-unit>
        <trans-unit id="6007d31a54fba5ebc4520f06ed8627e89a0d4a2c" translate="yes" xml:space="preserve">
          <source>To output UTF-8, use the &lt;code&gt;:encoding&lt;/code&gt; or &lt;code&gt;:utf8&lt;/code&gt; output layer. Prepending</source>
          <target state="translated">UTF-8を出力するには、 &lt;code&gt;:encoding&lt;/code&gt; または &lt;code&gt;:utf8&lt;/code&gt; 出力レイヤーを使用します。追加</target>
        </trans-unit>
        <trans-unit id="3b36e6dcece917ee92e199616190bf7ab5b56187" translate="yes" xml:space="preserve">
          <source>To overcome this limitation, you need to turn on /s matching within the prefix pattern, using the &lt;code&gt;(?s)&lt;/code&gt; directive: '(?s).*?(?=&amp;lt;H1&amp;gt;)'</source>
          <target state="translated">この制限を克服するには、 &lt;code&gt;(?s)&lt;/code&gt; ディレクティブを使用して、プレフィックスパターン内の/ sマッチングをオンにする必要があります： '（？s）。*？（？= &amp;lt;H1&amp;gt;）'</target>
        </trans-unit>
        <trans-unit id="062f2ac749842e1dd1762ff59d78e1eb660fe9b7" translate="yes" xml:space="preserve">
          <source>To override a Perl built-in routine with your own version, you need to import it at compile-time. This can be conveniently achieved with the &lt;code&gt;subs&lt;/code&gt; pragma. This will affect only the package in which you've imported the said subroutine:</source>
          <target state="translated">Perl組み込みルーチンを独自のバージョンでオーバーライドするには、コンパイル時にそれをインポートする必要があります。これは、 &lt;code&gt;subs&lt;/code&gt; プラグマを使用すると便利です。これは、上記のサブルーチンをインポートしたパッケージにのみ影響します。</target>
        </trans-unit>
        <trans-unit id="1aa3f784c17082d78c7fbfe639d471e8c69f8458" translate="yes" xml:space="preserve">
          <source>To override a built-in globally (that is, in all namespaces), you need to import your function into the &lt;code&gt;CORE::GLOBAL&lt;/code&gt; pseudo-namespace at compile time:</source>
          <target state="translated">組み込みをグローバルに（つまり、すべての名前空間で）オーバーライドするには、コンパイル時に関数を &lt;code&gt;CORE::GLOBAL&lt;/code&gt; 疑似名前空間にインポートする必要があります。</target>
        </trans-unit>
        <trans-unit id="675c69919880e76e4b55ea1a685db1213f2914e2" translate="yes" xml:space="preserve">
          <source>To override the standard utime():</source>
          <target state="translated">標準の utime()をオーバーライドする。</target>
        </trans-unit>
        <trans-unit id="605fcd402b7e1fdc810b4ff2c0f6a15f906ca915" translate="yes" xml:space="preserve">
          <source>To pack dates stored as triplets ( day, month, year ) in an array &lt;code&gt;@dates&lt;/code&gt; into a sequence of byte, byte, short integer we can write</source>
          <target state="translated">トリプレット（日、月、年）として配列 &lt;code&gt;@dates&lt;/code&gt; に格納されている日付をバイト、バイト、短整数のシーケンスにパックするには、次のように記述します</target>
        </trans-unit>
        <trans-unit id="1d0cde2eb7df8017d255040c9f5af9796899dd92" translate="yes" xml:space="preserve">
          <source>To parse a string &lt;code&gt;$str&lt;/code&gt; as a floating point number use</source>
          <target state="translated">文字列 &lt;code&gt;$str&lt;/code&gt; を浮動小数点数として解析するには</target>
        </trans-unit>
        <trans-unit id="61571c195afbee84b0b85796b78595db86b7183b" translate="yes" xml:space="preserve">
          <source>To parse a string &lt;code&gt;$str&lt;/code&gt; as a number in some base &lt;code&gt;$base&lt;/code&gt; use</source>
          <target state="translated">文字列 &lt;code&gt;$str&lt;/code&gt; をベース &lt;code&gt;$base&lt;/code&gt; 数値として解析するには</target>
        </trans-unit>
        <trans-unit id="8c0b000078df0842ed41dd6cf17b93c225c65646" translate="yes" xml:space="preserve">
          <source>To parse this code, Perl uses a heuristic based on what package names it has seen, what subroutines exist in the current package, what barewords it has previously seen, and other input. Needless to say, heuristics can produce very surprising results!</source>
          <target state="translated">このコードを解析するために、Perlはどのようなパッケージ名を見たか、現在のパッケージにはどのようなサブルーチンが存在するか、以前に見たことがあるベアワードは何か、その他の入力に基づいてヒューリスティックを使用しています。言うまでもなく、ヒューリスティックは非常に驚くべき結果を生み出すことができます。</target>
        </trans-unit>
        <trans-unit id="fbca7774c8df9c1e7fff186e61962bc8047a5ac6" translate="yes" xml:space="preserve">
          <source>To pass an object method into a subroutine, you can do this:</source>
          <target state="translated">オブジェクトメソッドをサブルーチンに渡すには、このようにします。</target>
        </trans-unit>
        <trans-unit id="767a526ac8d0e957a93b83324d4f56d1ac303c9b" translate="yes" xml:space="preserve">
          <source>To pass in &lt;code&gt;NULL&lt;/code&gt; as the pointer to an optional buffer, pass in an empty list reference, &lt;code&gt;[]&lt;/code&gt;.</source>
          <target state="translated">オプションのバッファへのポインタとして &lt;code&gt;NULL&lt;/code&gt; を渡すには、空のリスト参照 &lt;code&gt;[]&lt;/code&gt; を渡します。</target>
        </trans-unit>
        <trans-unit id="249caf0f11ba46a1737a888a2cd12f841c024b93" translate="yes" xml:space="preserve">
          <source>To pass supplemental arguments to a program opened with &lt;code&gt; '|-' &lt;/code&gt; or &lt;code&gt; '-|' &lt;/code&gt; append them to the command string as you would system EXPR.</source>
          <target state="translated">&lt;code&gt; '|-' &lt;/code&gt; または &lt;code&gt; '-|' &lt;/code&gt; で開かれたプログラムに補足引数を渡すには システムEXPRと同様に、コマンド文字列にそれらを追加します。</target>
        </trans-unit>
        <trans-unit id="9bb3f23b2e2cd47ffa049a4b5b8e3297a48bd649" translate="yes" xml:space="preserve">
          <source>To prepare distribution you need to do following:</source>
          <target state="translated">配布物を準備するには、以下のような作業が必要です。</target>
        </trans-unit>
        <trans-unit id="47e04bab26a33f27d49843c62d8c3b7400695e70" translate="yes" xml:space="preserve">
          <source>To prepend lines to the beginning, print those lines before you enter the loop that prints the existing lines.</source>
          <target state="translated">行の先頭に行を前置するには、既存の行を印刷するループに入る前にその行を印刷します。</target>
        </trans-unit>
        <trans-unit id="453d8a60ef1b8720b3eb21b0a6becefda886f512" translate="yes" xml:space="preserve">
          <source>To prevent &amp;lt;extract_quotelike&amp;gt; from mucking about with the input in this way (this is the only case where a list-context &lt;code&gt;extract_quotelike&lt;/code&gt; does so), you can pass the input variable as an interpolated literal:</source>
          <target state="translated">&amp;lt;extract_quotelike&amp;gt;がこのように入力を操作しないようにするには（これが、リストコンテキストの &lt;code&gt;extract_quotelike&lt;/code&gt; がそうする唯一のケースです）、入力変数を補間されたリテラルとして渡すことができます。</target>
        </trans-unit>
        <trans-unit id="743105860f25b02f06770315902de6783c423895" translate="yes" xml:space="preserve">
          <source>To prevent &lt;code&gt;memoize&lt;/code&gt; from installing the memoized version anywhere, use &lt;code&gt;INSTALL =&amp;gt; &lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;memoize&lt;/code&gt; がメモ化されたバージョンをどこにもインストールしないようにするには、 &lt;code&gt;INSTALL =&amp;gt; &lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 使用します。</target>
        </trans-unit>
        <trans-unit id="d0ceea23486fb8fa0dd3f37c46296eb6503b2487" translate="yes" xml:space="preserve">
          <source>To prevent &lt;code&gt;memoize&lt;/code&gt; from installing the memoized version anywhere, use &lt;code&gt;INSTALL =&amp;gt; undef&lt;/code&gt;.</source>
          <target state="translated">防ぐために &lt;code&gt;memoize&lt;/code&gt; をどこでもメモ化バージョンをインストールするから、使用 &lt;code&gt;INSTALL =&amp;gt; undef&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c9de321857a95078722502ca43a0201a5f6a4b12" translate="yes" xml:space="preserve">
          <source>To prevent any ambiguity,</source>
          <target state="translated">曖昧さを防ぐために</target>
        </trans-unit>
        <trans-unit id="fb87adecfac8f5df4ab3fe938fde55af46ebf1a3" translate="yes" xml:space="preserve">
          <source>To prevent specific methods from being called in bracket notation, use the blacklist() method:</source>
          <target state="translated">特定のメソッドが大括弧表記で呼ばれないようにするには、blacklist()メソッドを使用します。</target>
        </trans-unit>
        <trans-unit id="7d04ca12ba631be1e6e856ee05396b933016cf93" translate="yes" xml:space="preserve">
          <source>To prevent the &lt;code&gt;qv()&lt;/code&gt; function from being exported to the caller's namespace, either use version with a null parameter:</source>
          <target state="translated">防ぐには &lt;code&gt;qv()&lt;/code&gt; 、呼び出し元の名前空間にエクスポートされることからNULLパラメータで使用するバージョンのいずれかを機能：</target>
        </trans-unit>
        <trans-unit id="ac0fc603c0e20ee050f6b1167e08040f2086e70a" translate="yes" xml:space="preserve">
          <source>To prevent the contents of a queue from being modified by another thread while it is being examined and/or changed, &lt;a href=&quot;../threads/shared#lock-VARIABLE&quot;&gt;lock&lt;/a&gt; the queue inside a local block:</source>
          <target state="translated">検査中または変更中にキューの内容が別のスレッドによって変更されないようにするには、ローカルブロック内でキューを&lt;a href=&quot;../threads/shared#lock-VARIABLE&quot;&gt;ロック&lt;/a&gt;します。</target>
        </trans-unit>
        <trans-unit id="b8427301b03347200dffe8c8bd3a067e2726323d" translate="yes" xml:space="preserve">
          <source>To prevent the contents of a queue from being modified by another thread while it is being examined and/or changed, &lt;a href=&quot;threads::shared#lock-VARIABLE&quot;&gt;lock&lt;/a&gt; the queue inside a local block:</source>
          <target state="translated">キューの調査中や変更中にキューの内容が別のスレッドによって変更されないようにするには、ローカルブロック内でキューを&lt;a href=&quot;threads::shared#lock-VARIABLE&quot;&gt;ロック&lt;/a&gt;します。</target>
        </trans-unit>
        <trans-unit id="521d225cb8b8267bdc9221af420cb3102374b4c5" translate="yes" xml:space="preserve">
          <source>To prevent this, supply a &lt;code&gt;NORMALIZER&lt;/code&gt; function that turns the program arguments into a string in a way that equivalent arguments turn into the same string. A &lt;code&gt;NORMALIZER&lt;/code&gt; function for &lt;code&gt;f&lt;/code&gt; above might look like this:</source>
          <target state="translated">これを防ぐには、同等の引数が同じ文字列になるようにプログラム引数を文字列に変換する &lt;code&gt;NORMALIZER&lt;/code&gt; 関数を指定します。 &lt;code&gt;NORMALIZER&lt;/code&gt; のための機能 &lt;code&gt;f&lt;/code&gt; このテーストの外観上の：</target>
        </trans-unit>
        <trans-unit id="6fa84f786f1f2e361ba53d7582050f707e69605c" translate="yes" xml:space="preserve">
          <source>To produce a perl binary with a different name than &lt;code&gt;perl&lt;/code&gt; , either say</source>
          <target state="translated">異なる名前でperlのバイナリを生成するには &lt;code&gt;perl&lt;/code&gt; のどちらかと言います、</target>
        </trans-unit>
        <trans-unit id="76b5e8be4f2c5ad1ba3d72bdd1d3c182b64412ef" translate="yes" xml:space="preserve">
          <source>To produce a perl binary with a different name than &lt;code&gt;perl&lt;/code&gt;, either say</source>
          <target state="translated">異なる名前でperlのバイナリを生成するには &lt;code&gt;perl&lt;/code&gt; のどちらかと言います、</target>
        </trans-unit>
        <trans-unit id="deeb5ed64d8b8726d03c2a35d8b9a4f9932501dd" translate="yes" xml:space="preserve">
          <source>To prove success on the host machine, run &quot;dumpbin /headers wince-arm-pocket-wce400\perl.exe&quot; from the win32/ folder and look for &quot;machine (ARM)&quot; in the FILE HEADER VALUES and &quot;subsystem (Windows CE GUI)&quot; in the OPTIONAL HEADER VALUES.</source>
          <target state="translated">ホストマシンでの成功を証明するために、win32/フォルダから &quot;dumpbin /headers wince-arm-pocket-wce400-W\perl.exe &quot;を実行し、FILE HEADER VALUESの中にある &quot;machine (ARM)&quot;とOPTIONAL HEADER VALUESの中にある &quot;subystem (Windows CE GUI)&quot;を探します。</target>
        </trans-unit>
        <trans-unit id="e3f95db7629c92dc13df17dee2376ecae6bd28b4" translate="yes" xml:space="preserve">
          <source>To provide a Perl interface to this library we need to be able to map between the &lt;code&gt;fh&lt;/code&gt; parameter and the Perl subroutine we want called. A hash is a convenient mechanism for storing this mapping. The code below shows a possible implementation</source>
          <target state="translated">このライブラリにPerlインターフェースを提供するには、 &lt;code&gt;fh&lt;/code&gt; パラメータと呼び出したいPerlサブルーチンをマッピングできる必要があります。ハッシュは、このマッピングを保存するための便利なメカニズムです。以下のコードは可能な実装を示しています</target>
        </trans-unit>
        <trans-unit id="56afd5e1c9ab39b7d24b6a35fc7523124fb4a154" translate="yes" xml:space="preserve">
          <source>To provide an example, let's say the popular &lt;code&gt;Foo::Bar::escape_html&lt;/code&gt; function doesn't deal with Unicode data yet. The wrapper function would convert the argument to raw UTF-8 and convert the result back to Perl's internal representation like so:</source>
          <target state="translated">例を示すために、人気のある &lt;code&gt;Foo::Bar::escape_html&lt;/code&gt; 関数がまだUnicodeデータを処理していないとしましょう。ラッパー関数は、引数を生のUTF-8に変換し、結果を次のようにPerlの内部表現に変換します。</target>
        </trans-unit>
        <trans-unit id="67eb0c577eae9b827927188aaf0fb3c3cf029b5e" translate="yes" xml:space="preserve">
          <source>To provide backward compatibility with the previous version of &lt;a href=&quot;Net::Ping&quot;&gt;Net::Ping&lt;/a&gt;, a &lt;code&gt;pingecho()&lt;/code&gt; subroutine is available with the same functionality as before. &lt;code&gt;pingecho()&lt;/code&gt; uses the tcp protocol. The return values and parameters are the same as described for the &lt;a href=&quot;#ping&quot;&gt;&quot;ping&quot;&lt;/a&gt; method. This subroutine is obsolete and may be removed in a future version of &lt;a href=&quot;Net::Ping&quot;&gt;Net::Ping&lt;/a&gt;.</source>
          <target state="translated">以前のバージョンの&lt;a href=&quot;Net::Ping&quot;&gt;Net :: Ping&lt;/a&gt;との下位互換性を提供するために、以前と同じ機能を備えた &lt;code&gt;pingecho()&lt;/code&gt; サブルーチンを使用できます。 &lt;code&gt;pingecho()&lt;/code&gt; はtcpプロトコルを使用します。戻り値とパラメーターは、&lt;a href=&quot;#ping&quot;&gt;「ping」&lt;/a&gt;メソッドで説明したものと同じです。このサブルーチンは廃止されており、&lt;a href=&quot;Net::Ping&quot;&gt;Net :: Pingの&lt;/a&gt;将来のバージョンで削除される可能性があります。</target>
        </trans-unit>
        <trans-unit id="fe539191c8112058d164cdbdc07c4a313e2ceb71" translate="yes" xml:space="preserve">
          <source>To provide backward compatibility with the previous version of Net::Ping, a pingecho() subroutine is available with the same functionality as before. pingecho() uses the tcp protocol. The return values and parameters are the same as described for the ping() method. This subroutine is obsolete and may be removed in a future version of Net::Ping.</source>
          <target state="translated">以前のバージョンの Net::Ping との下位互換性を確保するために、以前と同じ機能を持つ pingecho()サブルーチンが用意されています。戻り値やパラメータは ping()メソッドで説明したものと同じです。このサブルーチンは廃止されたものであり、将来の Net::Ping のバージョンで削除される可能性があります。</target>
        </trans-unit>
        <trans-unit id="ece610257b3402f7eea4d17dbc76eda55d9cbb02" translate="yes" xml:space="preserve">
          <source>To provide the capability to set/get class-wide settings, it is best instead to provide accessors as subroutines or class methods instead.</source>
          <target state="translated">クラス全体の設定を設定/取得する機能を提供するには、代わりにアクセサをサブルーチンやクラスメソッドとして提供するのがベストです。</target>
        </trans-unit>
        <trans-unit id="c22d13aed3a39a35ea13dd4bc32c2e899b497afb" translate="yes" xml:space="preserve">
          <source>To purchase this book, visit &lt;a href=&quot;http://oreilly.com/catalog/9780596514471/&quot;&gt;http://oreilly.com/catalog/9780596514471/&lt;/a&gt; or your favourite bookstore.</source>
          <target state="translated">この本を購入するには、&lt;a href=&quot;http://oreilly.com/catalog/9780596514471/&quot;&gt;http：//oreilly.com/catalog/9780596514471/&lt;/a&gt;またはお気に入りの書店にアクセスしてください。</target>
        </trans-unit>
        <trans-unit id="b8ad3c75e2a9658073e3c75677575371b7b2154a" translate="yes" xml:space="preserve">
          <source>To put the output from any parse method into a string instead of a file handle, call the output_string() method instead of output_fh().</source>
          <target state="translated">任意のパース・メソッドからの出力をファイル・ハンドルではなく文字列に変換するには、output_fh()の代わりに output_string()メソッドを呼び出します。</target>
        </trans-unit>
        <trans-unit id="8d3d8f79e5bb23da5237f2bc4f067b582af08744" translate="yes" xml:space="preserve">
          <source>To quickly check the type of a &lt;code&gt;Archive::Tar::File&lt;/code&gt; object, you can use the following methods:</source>
          <target state="translated">&lt;code&gt;Archive::Tar::File&lt;/code&gt; オブジェクトのタイプをすばやく確認するには、次のメソッドを使用できます。</target>
        </trans-unit>
        <trans-unit id="ffb74a402d25037ed756434b89268f8c6c0f487e" translate="yes" xml:space="preserve">
          <source>To quote the bzip2 documentation</source>
          <target state="translated">bzip2 のドキュメントを引用すると</target>
        </trans-unit>
        <trans-unit id="2e030dd198e6e120e9f1df9a82e7575806595a2d" translate="yes" xml:space="preserve">
          <source>To read an entire &lt;b&gt;file&lt;/b&gt; into a &lt;b&gt;string&lt;/b&gt; in one operation.</source>
          <target state="translated">全体読むには&lt;b&gt;、ファイル&lt;/b&gt;に&lt;b&gt;文字列を&lt;/b&gt;一度の操作で。</target>
        </trans-unit>
        <trans-unit id="d6676802f298dda33ea89ee297e7a4c3b7e4e2ac" translate="yes" xml:space="preserve">
          <source>To read both a command's STDOUT and its STDERR separately, it's easiest to redirect them separately to files, and then read from those files when the program is done:</source>
          <target state="translated">コマンドのSTDOUTとSTDERRを別々に読み込むには、それらを別々にファイルにリダイレクトし、プログラムの終了時にそれらのファイルから読み込むのが最も簡単です。</target>
        </trans-unit>
        <trans-unit id="441b0a3f043e9d675f24f50e1a3845049a78b701" translate="yes" xml:space="preserve">
          <source>To read both a command's STDOUT and its STDERR separately, you can redirect them to temp files, let the command run, then read the temp files:</source>
          <target state="translated">コマンドのSTDOUTとSTDERRを別々に読み込むには、一時ファイルにリダイレクトしてコマンドを実行させてから一時ファイルを読み込むことができます。</target>
        </trans-unit>
        <trans-unit id="5540d6192acd70f39a8ef597e449669bc8ae5ddb" translate="yes" xml:space="preserve">
          <source>To read from an existing Perl filehandle, &lt;code&gt;$input&lt;/code&gt; , and write the compressed data to a buffer, &lt;code&gt;$buffer&lt;/code&gt; .</source>
          <target state="translated">既存のPerlファイルハンドル &lt;code&gt;$input&lt;/code&gt; から読み取り、圧縮データをバッファー &lt;code&gt;$buffer&lt;/code&gt; 書き込む。</target>
        </trans-unit>
        <trans-unit id="c349b729382da049ab850b286913e925d6fe3968" translate="yes" xml:space="preserve">
          <source>To read from an existing Perl filehandle, &lt;code&gt;$input&lt;/code&gt; , and write the uncompressed data to a buffer, &lt;code&gt;$buffer&lt;/code&gt; .</source>
          <target state="translated">既存のPerlファイルハンドル &lt;code&gt;$input&lt;/code&gt; から読み取り、非圧縮データをバッファー &lt;code&gt;$buffer&lt;/code&gt; 書き込む。</target>
        </trans-unit>
        <trans-unit id="9b6c4a10d71392deb29372c2a92475955d692a6e" translate="yes" xml:space="preserve">
          <source>To read from an existing Perl filehandle, &lt;code&gt;$input&lt;/code&gt;, and write the compressed data to a buffer, &lt;code&gt;$buffer&lt;/code&gt;.</source>
          <target state="translated">既存のPerlファイルハンドル &lt;code&gt;$input&lt;/code&gt; から読み取り、圧縮データをバッファー &lt;code&gt;$buffer&lt;/code&gt; 書き込むには。</target>
        </trans-unit>
        <trans-unit id="7e4ba76e5ff4a01f16e01bd7d5a780beec6519c3" translate="yes" xml:space="preserve">
          <source>To read from an existing Perl filehandle, &lt;code&gt;$input&lt;/code&gt;, and write the uncompressed data to a buffer, &lt;code&gt;$buffer&lt;/code&gt;.</source>
          <target state="translated">既存のPerlファイルハンドル &lt;code&gt;$input&lt;/code&gt; から読み取り、非圧縮データをバッファー &lt;code&gt;$buffer&lt;/code&gt; 書き込むには。</target>
        </trans-unit>
        <trans-unit id="7482ebcf137b958140c12465f2671a82fcf986b9" translate="yes" xml:space="preserve">
          <source>To read the</source>
          <target state="translated">を読むには</target>
        </trans-unit>
        <trans-unit id="87df4beb52a8613330401231fb10bf4839a044e4" translate="yes" xml:space="preserve">
          <source>To read the contents of the file &lt;code&gt;file1.txt.1950&lt;/code&gt; and write the uncompressed data to the file &lt;code&gt;file1.txt&lt;/code&gt; .</source>
          <target state="translated">ファイル &lt;code&gt;file1.txt.1950&lt;/code&gt; の内容を読み取り、非圧縮データをファイル &lt;code&gt;file1.txt&lt;/code&gt; に書き込む。</target>
        </trans-unit>
        <trans-unit id="bcdf55eeb6470c2b3d7fd6cf75243e9a7e9d3240" translate="yes" xml:space="preserve">
          <source>To read the contents of the file &lt;code&gt;file1.txt.1950&lt;/code&gt; and write the uncompressed data to the file &lt;code&gt;file1.txt&lt;/code&gt;.</source>
          <target state="translated">ファイルの内容を読むには &lt;code&gt;file1.txt.1950&lt;/code&gt; を、ファイルに圧縮されていないデータを書き込む &lt;code&gt;file1.txt&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5f3af95cfb979c68a078d4244b348eca50284cce" translate="yes" xml:space="preserve">
          <source>To read the contents of the file &lt;code&gt;file1.txt.1951&lt;/code&gt; and write the uncompressed data to the file &lt;code&gt;file1.txt&lt;/code&gt; .</source>
          <target state="translated">ファイル &lt;code&gt;file1.txt.1951&lt;/code&gt; の内容を読み取り、非圧縮データをファイル &lt;code&gt;file1.txt&lt;/code&gt; に書き込む。</target>
        </trans-unit>
        <trans-unit id="4698f091bc1fdd774cb393f877e7282bc2a1c3c5" translate="yes" xml:space="preserve">
          <source>To read the contents of the file &lt;code&gt;file1.txt.1951&lt;/code&gt; and write the uncompressed data to the file &lt;code&gt;file1.txt&lt;/code&gt;.</source>
          <target state="translated">ファイルの内容を読むには &lt;code&gt;file1.txt.1951&lt;/code&gt; を、ファイルに圧縮されていないデータを書き込む &lt;code&gt;file1.txt&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fe87604cf51141fe67b4d7c05185428541881932" translate="yes" xml:space="preserve">
          <source>To read the contents of the file &lt;code&gt;file1.txt.Compressed&lt;/code&gt; and write the uncompressed data to the file &lt;code&gt;file1.txt&lt;/code&gt; .</source>
          <target state="translated">ファイル &lt;code&gt;file1.txt.Compressed&lt;/code&gt; の内容を読み取り、非圧縮データをファイル &lt;code&gt;file1.txt&lt;/code&gt; に書き込む。</target>
        </trans-unit>
        <trans-unit id="f301dbf129331d08eb2d42bb04443bcca2c06d9c" translate="yes" xml:space="preserve">
          <source>To read the contents of the file &lt;code&gt;file1.txt.Compressed&lt;/code&gt; and write the uncompressed data to the file &lt;code&gt;file1.txt&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;file1.txt.Compressed&lt;/code&gt; ファイルの内容を読み取り、圧縮されていないデータを &lt;code&gt;file1.txt&lt;/code&gt; ファイルに書き込みます。</target>
        </trans-unit>
        <trans-unit id="dcd74724ed743479732074df76791b8e4375f0ba" translate="yes" xml:space="preserve">
          <source>To read the contents of the file &lt;code&gt;file1.txt.bz2&lt;/code&gt; and write the uncompressed data to the file &lt;code&gt;file1.txt&lt;/code&gt; .</source>
          <target state="translated">ファイル &lt;code&gt;file1.txt.bz2&lt;/code&gt; の内容を読み取り、非圧縮データをファイル &lt;code&gt;file1.txt&lt;/code&gt; に書き込む。</target>
        </trans-unit>
        <trans-unit id="263ebe5d94b7d39489ca2895d917dbacbfcc41fc" translate="yes" xml:space="preserve">
          <source>To read the contents of the file &lt;code&gt;file1.txt.bz2&lt;/code&gt; and write the uncompressed data to the file &lt;code&gt;file1.txt&lt;/code&gt;.</source>
          <target state="translated">ファイルの内容を読むには &lt;code&gt;file1.txt.bz2&lt;/code&gt; を、ファイルに圧縮されていないデータを書き込む &lt;code&gt;file1.txt&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d0224a4a1040095275155b56f5f7207fca1c2ad1" translate="yes" xml:space="preserve">
          <source>To read the contents of the file &lt;code&gt;file1.txt.gz&lt;/code&gt; and write the uncompressed data to the file &lt;code&gt;file1.txt&lt;/code&gt; .</source>
          <target state="translated">ファイル &lt;code&gt;file1.txt.gz&lt;/code&gt; の内容を読み取り、非圧縮データをファイル &lt;code&gt;file1.txt&lt;/code&gt; に書き込む。</target>
        </trans-unit>
        <trans-unit id="328756a43a9eee1db660f9353e2936fa148261c1" translate="yes" xml:space="preserve">
          <source>To read the contents of the file &lt;code&gt;file1.txt.gz&lt;/code&gt; and write the uncompressed data to the file &lt;code&gt;file1.txt&lt;/code&gt;.</source>
          <target state="translated">ファイルの内容を読むには &lt;code&gt;file1.txt.gz&lt;/code&gt; を、ファイルに圧縮されていないデータを書き込む &lt;code&gt;file1.txt&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="62b61bd1daa8a6cb2d7eb96d3ece7209a79b5aec" translate="yes" xml:space="preserve">
          <source>To read the contents of the file &lt;code&gt;file1.txt&lt;/code&gt; and write the compressed data to the file &lt;code&gt;file1.txt.1950&lt;/code&gt; .</source>
          <target state="translated">ファイル &lt;code&gt;file1.txt&lt;/code&gt; の内容を読み取り、圧縮データをファイル &lt;code&gt;file1.txt.1950&lt;/code&gt; に書き込む。</target>
        </trans-unit>
        <trans-unit id="58f6252b156248cb5d164937a716b657f41d643b" translate="yes" xml:space="preserve">
          <source>To read the contents of the file &lt;code&gt;file1.txt&lt;/code&gt; and write the compressed data to the file &lt;code&gt;file1.txt.1950&lt;/code&gt;.</source>
          <target state="translated">ファイルの内容を読むには &lt;code&gt;file1.txt&lt;/code&gt; 、ファイルに圧縮されたデータを書き込む &lt;code&gt;file1.txt.1950&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3e429b7a25235b582c4b383620392f1a750a3bdd" translate="yes" xml:space="preserve">
          <source>To read the contents of the file &lt;code&gt;file1.txt&lt;/code&gt; and write the compressed data to the file &lt;code&gt;file1.txt.1951&lt;/code&gt; .</source>
          <target state="translated">ファイル &lt;code&gt;file1.txt&lt;/code&gt; の内容を読み取り、圧縮データをファイル &lt;code&gt;file1.txt.1951&lt;/code&gt; に書き込む。</target>
        </trans-unit>
        <trans-unit id="fef40be75516f086b04d71827ac5f116bf2718cd" translate="yes" xml:space="preserve">
          <source>To read the contents of the file &lt;code&gt;file1.txt&lt;/code&gt; and write the compressed data to the file &lt;code&gt;file1.txt.1951&lt;/code&gt;.</source>
          <target state="translated">ファイルの内容を読むには &lt;code&gt;file1.txt&lt;/code&gt; 、ファイルに圧縮されたデータを書き込む &lt;code&gt;file1.txt.1951&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c406d8acaac2a742d676187babe70fbc63a189bd" translate="yes" xml:space="preserve">
          <source>To read the contents of the file &lt;code&gt;file1.txt&lt;/code&gt; and write the compressed data to the file &lt;code&gt;file1.txt.bz2&lt;/code&gt; .</source>
          <target state="translated">ファイル &lt;code&gt;file1.txt&lt;/code&gt; の内容を読み取り、圧縮データをファイル &lt;code&gt;file1.txt.bz2&lt;/code&gt; に書き込む。</target>
        </trans-unit>
        <trans-unit id="33aeb771cd352fb39ce6d9be074532d17039ae52" translate="yes" xml:space="preserve">
          <source>To read the contents of the file &lt;code&gt;file1.txt&lt;/code&gt; and write the compressed data to the file &lt;code&gt;file1.txt.bz2&lt;/code&gt;.</source>
          <target state="translated">ファイル &lt;code&gt;file1.txt&lt;/code&gt; の内容を読み取り、圧縮データをファイル &lt;code&gt;file1.txt.bz2&lt;/code&gt; に書き込むには。</target>
        </trans-unit>
        <trans-unit id="fa350228ff2721777414a685ddb5c4e3af10826c" translate="yes" xml:space="preserve">
          <source>To read the contents of the file &lt;code&gt;file1.txt&lt;/code&gt; and write the compressed data to the file &lt;code&gt;file1.txt.gz&lt;/code&gt; .</source>
          <target state="translated">ファイル &lt;code&gt;file1.txt&lt;/code&gt; の内容を読み取り、圧縮データをファイル &lt;code&gt;file1.txt.gz&lt;/code&gt; に書き込む。</target>
        </trans-unit>
        <trans-unit id="2a2635502bb2923dab4d82f7333e4b41da9484a4" translate="yes" xml:space="preserve">
          <source>To read the contents of the file &lt;code&gt;file1.txt&lt;/code&gt; and write the compressed data to the file &lt;code&gt;file1.txt.gz&lt;/code&gt;.</source>
          <target state="translated">ファイルの内容を読むには &lt;code&gt;file1.txt&lt;/code&gt; 、ファイルに圧縮されたデータを書き込む &lt;code&gt;file1.txt.gz&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1253348a31fd66554a6efd5d56c0e22a2ff1b137" translate="yes" xml:space="preserve">
          <source>To read the contents of the file &lt;code&gt;file1.txt&lt;/code&gt; and write the compressed data to the file &lt;code&gt;file1.txt.zip&lt;/code&gt; .</source>
          <target state="translated">ファイル &lt;code&gt;file1.txt&lt;/code&gt; の内容を読み取り、圧縮データをファイル &lt;code&gt;file1.txt.zip&lt;/code&gt; に書き込む。</target>
        </trans-unit>
        <trans-unit id="ae6686db2a7eebd5b91805c9b0d9008be2e94d9e" translate="yes" xml:space="preserve">
          <source>To read the contents of the file &lt;code&gt;file1.txt&lt;/code&gt; and write the compressed data to the file &lt;code&gt;file1.txt.zip&lt;/code&gt;.</source>
          <target state="translated">ファイルの内容を読むには &lt;code&gt;file1.txt&lt;/code&gt; 、ファイルに圧縮されたデータを書き込む &lt;code&gt;file1.txt.zip&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7cb0378e48901dddc588a6225fe4a4196884f056" translate="yes" xml:space="preserve">
          <source>To really poke around with Perl, you'll probably want to build Perl for debugging, like this:</source>
          <target state="translated">本当にPerlをいじくりまわすには、デバッグ用のPerlを構築した方がいいでしょう。</target>
        </trans-unit>
        <trans-unit id="224b47d42836cf02b0538bc7324878629aa47a30" translate="yes" xml:space="preserve">
          <source>To receive an announcement whenever a new version of this module is released, send a blank email message to &lt;code&gt;mjd-perl-tiefile-subscribe@plover.com&lt;/code&gt; .</source>
          <target state="translated">このモジュールの新しいバージョンがリリースされるたびにお知らせを受け取るには、空のメールメッセージを &lt;code&gt;mjd-perl-tiefile-subscribe@plover.com&lt;/code&gt; に送信してください。</target>
        </trans-unit>
        <trans-unit id="c9c2c718f1481d7a23bdb92c3c65c5d23a83c26f" translate="yes" xml:space="preserve">
          <source>To receive an announcement whenever a new version of this module is released, send a blank email message to &lt;code&gt;mjd-perl-tiefile-subscribe@plover.com&lt;/code&gt;.</source>
          <target state="translated">このモジュールの新しいバージョンがリリースされるたびにアナウンスを受信するには、空白の電子メールメッセージを &lt;code&gt;mjd-perl-tiefile-subscribe@plover.com&lt;/code&gt; に送信してください。</target>
        </trans-unit>
        <trans-unit id="59bd9384e894fc19ae43b0a3a96f9c688fce9ba8" translate="yes" xml:space="preserve">
          <source>To recursively create a directory structure, look at the &lt;a href=&quot;File::Path#make_path%28-%24dir1%2C-%24dir2%2C-....-%29&quot;&gt;&lt;code&gt;make_path&lt;/code&gt;&lt;/a&gt; function of the &lt;a href=&quot;File::Path&quot;&gt;File::Path&lt;/a&gt; module.</source>
          <target state="translated">ディレクトリ構造を再帰的に作成するには、&lt;a href=&quot;File::Path&quot;&gt;File :: Path&lt;/a&gt;モジュールの&lt;a href=&quot;File::Path#make_path%28-%24dir1%2C-%24dir2%2C-....-%29&quot;&gt; &lt;code&gt;make_path&lt;/code&gt; &lt;/a&gt;関数を確認してください。</target>
        </trans-unit>
        <trans-unit id="d3e33fd8f77a0950334d95b2b753813796d2bf20" translate="yes" xml:space="preserve">
          <source>To recursively create a directory structure, look at the &lt;code&gt;make_path&lt;/code&gt; function of the &lt;a href=&quot;../file/path&quot;&gt;File::Path&lt;/a&gt; module.</source>
          <target state="translated">ディレクトリ構造を再帰的に作成するには、&lt;a href=&quot;../file/path&quot;&gt;File :: Path&lt;/a&gt;モジュールの &lt;code&gt;make_path&lt;/code&gt; 関数を調べます。</target>
        </trans-unit>
        <trans-unit id="d93ce0279ba5e733f28599be83e53944021fc924" translate="yes" xml:space="preserve">
          <source>To recursively create a directory structure, look at the &lt;code&gt;make_path&lt;/code&gt; function of the &lt;a href=&quot;file/path&quot;&gt;File::Path&lt;/a&gt; module.</source>
          <target state="translated">ディレクトリ構造を再帰的に作成するには、&lt;a href=&quot;file/path&quot;&gt;File :: Path&lt;/a&gt;モジュールの &lt;code&gt;make_path&lt;/code&gt; 関数を調べます。</target>
        </trans-unit>
        <trans-unit id="b5946d1b5adc8bf79e8d8691892a42663cd834d2" translate="yes" xml:space="preserve">
          <source>To reduce the overhead as much as possible, only one possible location is checked to find the extension DLL (this location is where &lt;code&gt;make install&lt;/code&gt; would put the DLL). If not found, the search for the DLL is transparently delegated to &lt;code&gt;DynaLoader&lt;/code&gt; , which looks for the DLL along the &lt;code&gt;@INC&lt;/code&gt; list.</source>
          <target state="translated">オーバーヘッドをできるだけ減らすために、拡張DLLを見つけるために1つの可能な場所のみがチェックされます（この場所は &lt;code&gt;make install&lt;/code&gt; がDLLを配置する場所です）。見つからない場合、DLLの検索は透過的に &lt;code&gt;DynaLoader&lt;/code&gt; に委任され、 &lt;code&gt;@INC&lt;/code&gt; は@INCリストに沿ってDLLを検索します。</target>
        </trans-unit>
        <trans-unit id="2a76f398b95d1961552e49490d4d377316e986e8" translate="yes" xml:space="preserve">
          <source>To reduce the overhead as much as possible, only one possible location is checked to find the extension DLL (this location is where &lt;code&gt;make install&lt;/code&gt; would put the DLL). If not found, the search for the DLL is transparently delegated to &lt;code&gt;DynaLoader&lt;/code&gt;, which looks for the DLL along the &lt;code&gt;@INC&lt;/code&gt; list.</source>
          <target state="translated">オーバーヘッドを可能な限り削減するために、拡張DLLを見つけるために1つの可能な場所のみがチェックされます（この場所は、 &lt;code&gt;make install&lt;/code&gt; がDLLを配置する場所です）。見つからない場合、DLLの検索は &lt;code&gt;DynaLoader&lt;/code&gt; に透過的に委任され、 &lt;code&gt;@INC&lt;/code&gt; は@INCリストに沿ってDLLを検索します。</target>
        </trans-unit>
        <trans-unit id="66c3094c723d121eb0bf078e8289c66d4fdd4a9a" translate="yes" xml:space="preserve">
          <source>To remove a directory tree recursively (&lt;code&gt;rm -rf&lt;/code&gt; on Unix) look at the &lt;a href=&quot;File::Path#rmtree%28-%24dir-%29&quot;&gt;&lt;code&gt;rmtree&lt;/code&gt;&lt;/a&gt; function of the &lt;a href=&quot;File::Path&quot;&gt;File::Path&lt;/a&gt; module.</source>
          <target state="translated">ディレクトリツリーを再帰的に削除するには（Unixでは &lt;code&gt;rm -rf&lt;/code&gt; ）、&lt;a href=&quot;File::Path&quot;&gt;File :: Path&lt;/a&gt;モジュールの&lt;a href=&quot;File::Path#rmtree%28-%24dir-%29&quot;&gt; &lt;code&gt;rmtree&lt;/code&gt; &lt;/a&gt;関数を調べます。</target>
        </trans-unit>
        <trans-unit id="98bed95392f2bd5c21b8012e731bec1f2530889e" translate="yes" xml:space="preserve">
          <source>To remove a directory tree recursively (&lt;code&gt;rm -rf&lt;/code&gt; on Unix) look at the &lt;code&gt;rmtree&lt;/code&gt; function of the &lt;a href=&quot;../file/path&quot;&gt;File::Path&lt;/a&gt; module.</source>
          <target state="translated">ディレクトリツリーを再帰的に削除するには（UNIXでは &lt;code&gt;rm -rf&lt;/code&gt; ）、&lt;a href=&quot;../file/path&quot;&gt;File :: Path&lt;/a&gt;モジュールの &lt;code&gt;rmtree&lt;/code&gt; 関数を調べます。</target>
        </trans-unit>
        <trans-unit id="4e5b819764f7105a80a7d510f2a867ba675bddec" translate="yes" xml:space="preserve">
          <source>To remove a directory tree recursively (&lt;code&gt;rm -rf&lt;/code&gt; on Unix) look at the &lt;code&gt;rmtree&lt;/code&gt; function of the &lt;a href=&quot;file/path&quot;&gt;File::Path&lt;/a&gt; module.</source>
          <target state="translated">ディレクトリツリーを再帰的に削除するには（UNIXでは &lt;code&gt;rm -rf&lt;/code&gt; ）、&lt;a href=&quot;file/path&quot;&gt;File :: Path&lt;/a&gt;モジュールの &lt;code&gt;rmtree&lt;/code&gt; 関数を調べます。</target>
        </trans-unit>
        <trans-unit id="e56141f1ebe96f14282b26d571378c274b2244ed" translate="yes" xml:space="preserve">
          <source>To remove a tied environment variable from the environment, assign it the undefined value</source>
          <target state="translated">紐付けられた環境変数を環境から削除するには、未定義の値を代入します。</target>
        </trans-unit>
        <trans-unit id="06b0ac63c637336d9c539fb315b8373179470836" translate="yes" xml:space="preserve">
          <source>To remove creation of the tied hash on each access, one may an extra level of indirection which allows a non-circular structure of references:</source>
          <target state="translated">各アクセスでのタイドハッシュの生成を削除するには、参照の非円形構造を可能にする余分なレベルのインダイレクトがあります。</target>
        </trans-unit>
        <trans-unit id="385dafb73da7d1789642356fd78d8d3446310a3d" translate="yes" xml:space="preserve">
          <source>To remove the magic from an SV, call the function sv_unmagic:</source>
          <target state="translated">SV からマジックを削除するには、関数 sv_unmagic を呼び出す。</target>
        </trans-unit>
        <trans-unit id="1244516061f404f040587b4bb0bc9e4acce762e7" translate="yes" xml:space="preserve">
          <source>To replace any of these components I call one of these harness methods with the name of the replacement class:</source>
          <target state="translated">これらのコンポーネントのいずれかを置き換えるために、私はこれらのハーネスのメソッドのいずれかを、置換クラスの名前を付けて呼び出します。</target>
        </trans-unit>
        <trans-unit id="ee81225f636096e269a365626b3e0c2212110758" translate="yes" xml:space="preserve">
          <source>To report a new bug, visit:</source>
          <target state="translated">新しいバグを報告するには、こちらをご覧ください。</target>
        </trans-unit>
        <trans-unit id="e2d5ab4989d41c738d1504f8f7e7186c29958e2b" translate="yes" xml:space="preserve">
          <source>To reset your working directory to a pristine condition you can do:</source>
          <target state="translated">作業ディレクトリを原始的な状態にリセットするには、以下のようにします。</target>
        </trans-unit>
        <trans-unit id="935323786b12419a7345fc07129055605bd12b91" translate="yes" xml:space="preserve">
          <source>To retrieve data stored to disk, use &lt;code&gt;retrieve&lt;/code&gt; with a file name. The objects stored into that file are recreated into memory for you, and a</source>
          <target state="translated">ディスクに保存されているデータを取得 &lt;code&gt;retrieve&lt;/code&gt; は、ファイル名を指定してretrieveを使用します。そのファイルに格納されたオブジェクトがメモリに再作成され、</target>
        </trans-unit>
        <trans-unit id="7f6b972558cf783871ca862e09f183ae72cbdc43" translate="yes" xml:space="preserve">
          <source>To retrieve the &lt;code&gt;REGEXP&lt;/code&gt; object from the scalar in an XS function use the &lt;code&gt;SvRX&lt;/code&gt; macro, see &lt;a href=&quot;perlapi#REGEXP-Functions&quot;&gt;&quot;REGEXP Functions&quot; in perlapi&lt;/a&gt;.</source>
          <target state="translated">XS関数のスカラーから &lt;code&gt;REGEXP&lt;/code&gt; オブジェクトを取得するには、 &lt;code&gt;SvRX&lt;/code&gt; マクロを使用します。perlapiの&lt;a href=&quot;perlapi#REGEXP-Functions&quot;&gt;「REGEXP関数」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="4f95fbea27e1a9b8ba09786147eb856c1d1f83f4" translate="yes" xml:space="preserve">
          <source>To retrieve the &lt;code&gt;REGEXP&lt;/code&gt; object from the scalar in an XS function use the &lt;code&gt;SvRX&lt;/code&gt; macro, see &lt;a href=&quot;perlapi#REGEXP-Functions&quot;&gt;REGEXP Functions in perlapi&lt;/a&gt;.</source>
          <target state="translated">XS関数のスカラーから &lt;code&gt;REGEXP&lt;/code&gt; オブジェクトを取得するには、 &lt;code&gt;SvRX&lt;/code&gt; マクロを使用します。perlapiの&lt;a href=&quot;perlapi#REGEXP-Functions&quot;&gt;REGEXP関数を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="1231633ff6452d875f890a43a2ae8ede0790e949" translate="yes" xml:space="preserve">
          <source>To return an empty list one must use a PPCODE: block and then not push return values on the stack.</source>
          <target state="translated">空のリストを返すためには、PPCODE:ブロックを使用し、スタックに戻り値をプッシュしないようにしなければなりません。</target>
        </trans-unit>
        <trans-unit id="c0fa2ebc492606f9abfba27c95d0995af195e45c" translate="yes" xml:space="preserve">
          <source>To run Perl on DPMI platforms one needs RSX runtime. This is needed under DOS-inside-OS/2, Win0.3*, Win0.95 and WinNT (see &lt;a href=&quot;#Other-OSes&quot;&gt;&quot;Other OSes&quot;&lt;/a&gt;). RSX would not work with VCPI only, as EMX would, it requires DMPI.</source>
          <target state="translated">DPMIプラットフォームでPerlを実行するには、RSXランタイムが必要です。これは、DOS-inside-OS / 2、Win0.3 *、Win0.95、およびWinNTで必要です（&lt;a href=&quot;#Other-OSes&quot;&gt;「その他のOS」を&lt;/a&gt;参照）。RSXはVCPIのみでは機能せず、EMXのように、DMPIが必要です。</target>
        </trans-unit>
        <trans-unit id="c52a15c8b572dc0999ddd7a3d452b4f9cfbf130a" translate="yes" xml:space="preserve">
          <source>To run Perl on DPMI platforms one needs RSX runtime. This is needed under DOS-inside-OS/2, Win0.3*, Win0.95 and WinNT (see &lt;a href=&quot;#Other-OSes&quot;&gt;Other OSes&lt;/a&gt;). RSX would not work with VCPI only, as EMX would, it requires DMPI.</source>
          <target state="translated">DPMIプラットフォームでPerlを実行するには、RSXランタイムが必要です。これは、DOS-inside-OS / 2、Win0.3 *、Win0.95、WinNTで必要です（&lt;a href=&quot;#Other-OSes&quot;&gt;他のOSを&lt;/a&gt;参照）。RSXは、EMPIのようにVCPIのみでは機能せず、DMPIが必要です。</target>
        </trans-unit>
        <trans-unit id="f4988afc10b11011c01fd1dc8e2d9efa2ca35527" translate="yes" xml:space="preserve">
          <source>To run a &lt;b&gt;program&lt;/b&gt; or &lt;b&gt;subroutine&lt;/b&gt;. (Has nothing to do with the &lt;code&gt;&lt;a href=&quot;functions/kill&quot;&gt;kill&lt;/a&gt;&lt;/code&gt; built-in, unless you&amp;rsquo;re trying to run a &lt;b&gt;signal handler&lt;/b&gt;.)</source>
          <target state="translated">&lt;b&gt;プログラム&lt;/b&gt;または&lt;b&gt;サブルーチン&lt;/b&gt;を実行する。（&lt;b&gt;シグナルハンドラー&lt;/b&gt;を実行しようとしているのでない限り、組み込みの &lt;code&gt;&lt;a href=&quot;functions/kill&quot;&gt;kill&lt;/a&gt;&lt;/code&gt; とは何の関係もありません。）&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="97a854ddf9aaf9c69e7b95eed2386df587b2d5c0" translate="yes" xml:space="preserve">
          <source>To run a &lt;b&gt;program&lt;/b&gt; or &lt;b&gt;subroutine&lt;/b&gt;. (Has nothing to do with the &lt;code&gt;kill&lt;/code&gt; built-in, unless you&amp;rsquo;re trying to run a &lt;b&gt;signal handler&lt;/b&gt;.)</source>
          <target state="translated">&lt;b&gt;プログラム&lt;/b&gt;または&lt;b&gt;サブルーチン&lt;/b&gt;を実行します。（&lt;b&gt;シグナルハンドラー&lt;/b&gt;を実行しようとしているのでない限り、組み込みの &lt;code&gt;kill&lt;/code&gt; とは何の関係もありません。）&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="8cf4ac8bbb41685c2ce7804ccdb1791a6e3ce985" translate="yes" xml:space="preserve">
          <source>To run a Perl program from the Unix command line:</source>
          <target state="translated">Unix のコマンドラインから Perl プログラムを実行するには、以下のようにします。</target>
        </trans-unit>
        <trans-unit id="69d193d311b7fdb3c43e19bb64a6bebcfed27d39" translate="yes" xml:space="preserve">
          <source>To run this code, &lt;code&gt;perl_run&lt;/code&gt; is called, which does a &lt;code&gt;JMPENV_PUSH&lt;/code&gt; then enters a runops loop. This loop executes the eval and tie ops on line 1, with the eval pushing a &lt;code&gt;CxEVAL&lt;/code&gt; onto the context stack.</source>
          <target state="translated">このコードを実行するには、 &lt;code&gt;perl_run&lt;/code&gt; はどのない、と呼ばれ &lt;code&gt;JMPENV_PUSH&lt;/code&gt; が、その後runopsループに入ります。このループは、evalを実行して1行目で &lt;code&gt;CxEVAL&lt;/code&gt; を結合し、evalがCxEVALをコンテキストスタックにプッシュします。</target>
        </trans-unit>
        <trans-unit id="46ec5458708076d609a6883cd1bd780e161cc64e" translate="yes" xml:space="preserve">
          <source>To say the least, surrogate pairs were the biggest mistake of the Unicode Consortium. But according to the late Douglas Adams in</source>
          <target state="translated">控えめに言っても、サロゲートペアはユニコードコンソーシアムの最大の過ちでした。しかし、故ダグラス・アダムス氏によると</target>
        </trans-unit>
        <trans-unit id="48af12ca119bf709d476507ec2e3aea7bdcd0d97" translate="yes" xml:space="preserve">
          <source>To search the perlfaq question headings:</source>
          <target state="translated">perlfaqの質問の見出しを検索するには。</target>
        </trans-unit>
        <trans-unit id="518862144f077b9ba7e98c4f411c046f6e96affb" translate="yes" xml:space="preserve">
          <source>To see all about your machine, type</source>
          <target state="translated">お使いのマシンのすべてを表示するには、次のように入力してください。</target>
        </trans-unit>
        <trans-unit id="5d0d28f6946dedb31c299d2d78aa9802594a8195" translate="yes" xml:space="preserve">
          <source>To see how (un)packing works, we'll start with a simple template code where the conversion is in low gear: between the contents of a byte sequence and a string of hexadecimal digits. Let's use &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt;, since this is likely to remind you of a dump program, or some desperate last message unfortunate programs are wont to throw at you before they expire into the wild blue yonder. Assuming that the variable &lt;code&gt;$mem&lt;/code&gt; holds a sequence of bytes that we'd like to inspect without assuming anything about its meaning, we can write</source>
          <target state="translated">（アン）パッキングがどのように機能するかを確認するために、変換が低速である単純なテンプレートコードから始めます。つまり、バイトシーケンスの内容と16進数の文字列の間です。 &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt; を使用してみましょう。これは、ダンププログラムを思い出させる可能性が高いためです。または、不幸な最後のメッセージである不幸なプログラムが、野生の青を超えて期限切れになる前にスローされることはありません。変数 &lt;code&gt;$mem&lt;/code&gt; が、その意味について何も仮定せずに検査したいバイトのシーケンスを保持していると仮定すると、次のように書くことができます</target>
        </trans-unit>
        <trans-unit id="02e337f8ffa5587c60ddae1e61c27bc0cb20b9a1" translate="yes" xml:space="preserve">
          <source>To see how (un)packing works, we'll start with a simple template code where the conversion is in low gear: between the contents of a byte sequence and a string of hexadecimal digits. Let's use &lt;code&gt;unpack&lt;/code&gt;, since this is likely to remind you of a dump program, or some desperate last message unfortunate programs are wont to throw at you before they expire into the wild blue yonder. Assuming that the variable &lt;code&gt;$mem&lt;/code&gt; holds a sequence of bytes that we'd like to inspect without assuming anything about its meaning, we can write</source>
          <target state="translated">（アン）パッキングがどのように機能するかを確認するために、変換が低速で行われる単純なテンプレートコードから始めます。つまり、バイトシーケンスの内容と16進数の文字列の間です。 &lt;code&gt;unpack&lt;/code&gt; を使用しましょう。これは、ダンププログラムを思い出させる可能性が高いためです。または、いくつかの絶望的な最後のメッセージは、不幸なプログラムがワイルドブルーの向こうに期限切れになる前にスローされません。変数 &lt;code&gt;$mem&lt;/code&gt; が、その意味について何も想定せずに検査したいバイトのシーケンスを保持していると仮定すると、次のように記述できます。</target>
        </trans-unit>
        <trans-unit id="526ccfeab3729429cc060187cce1bbaba5ac3037" translate="yes" xml:space="preserve">
          <source>To see how this affects &lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt;, we'll compare these two C structures:</source>
          <target state="translated">これが &lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt; にどのように影響するかを確認するために、次の2つのC構造体を比較します。</target>
        </trans-unit>
        <trans-unit id="9053b5511eec27497eeb92618a57db0e9ef4499d" translate="yes" xml:space="preserve">
          <source>To see how this affects &lt;code&gt;pack&lt;/code&gt; and &lt;code&gt;unpack&lt;/code&gt;, we'll compare these two C structures:</source>
          <target state="translated">これが &lt;code&gt;pack&lt;/code&gt; と &lt;code&gt;unpack&lt;/code&gt; どのように影響するかを確認するために、次の2つのC構造体を比較します。</target>
        </trans-unit>
        <trans-unit id="f4c245de21e3816d09a578f5e1c5f63c7d4c6210" translate="yes" xml:space="preserve">
          <source>To see if a variable contains a reference, use the &lt;a href=&quot;perlfunc#ref-EXPR&quot;&gt;&lt;code&gt;ref&lt;/code&gt;&lt;/a&gt; function. It returns true if its argument is a reference. Actually it's a little better than that: It returns &lt;code&gt;HASH&lt;/code&gt; for hash references and &lt;code&gt;ARRAY&lt;/code&gt; for array references.</source>
          <target state="translated">変数に参照が含まれているかどうかを確認するには、&lt;a href=&quot;perlfunc#ref-EXPR&quot;&gt; &lt;code&gt;ref&lt;/code&gt; &lt;/a&gt;関数を使用します。引数が参照の場合はtrueを返します。実際には、それよりも少し優れています。ハッシュ参照の場合は &lt;code&gt;HASH&lt;/code&gt; を返し、配列参照の場合は &lt;code&gt;ARRAY&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="99fa402c0f19d397a266c609792e7a721baa908f" translate="yes" xml:space="preserve">
          <source>To see if a variable contains a reference, use the &lt;code&gt;&lt;a href=&quot;functions/ref&quot;&gt;ref&lt;/a&gt;&lt;/code&gt; function. It returns true if its argument is a reference. Actually it's a little better than that: It returns &lt;code&gt;HASH&lt;/code&gt; for hash references and &lt;code&gt;ARRAY&lt;/code&gt; for array references.</source>
          <target state="translated">変数に参照が含まれているかどうかを確認するには、 &lt;code&gt;&lt;a href=&quot;functions/ref&quot;&gt;ref&lt;/a&gt;&lt;/code&gt; 関数を使用します。引数が参照の場合はtrueを返します。実際には、それより少し優れています。ハッシュ参照の場合は &lt;code&gt;HASH&lt;/code&gt; を返し、配列参照の場合は &lt;code&gt;ARRAY&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="960bf2c563408fba71fe24086af2e53cbf0767bd" translate="yes" xml:space="preserve">
          <source>To see if your system is affected by this discrepancy check if &lt;code&gt;getconf GNU_LIBPTHREAD_VERSION | &lt;a href=&quot;functions/grep&quot;&gt;grep&lt;/a&gt; -q NPTL&lt;/code&gt; returns a false value. NTPL threads preserve the POSIX semantics.</source>
          <target state="translated">システムがこの不一致の影響を受けているかどうかを確認するには、 &lt;code&gt;getconf GNU_LIBPTHREAD_VERSION | &lt;a href=&quot;functions/grep&quot;&gt;grep&lt;/a&gt; -q NPTL&lt;/code&gt; はfalse値を返します。NTPLスレッドはPOSIXセマンティクスを保持します。</target>
        </trans-unit>
        <trans-unit id="6370b1130305216b6c4037876a31e89ca9fbcd86" translate="yes" xml:space="preserve">
          <source>To see if your system is affected by this discrepancy check if &lt;code&gt;getconf GNU_LIBPTHREAD_VERSION | grep -q NPTL&lt;/code&gt; returns a false value. NTPL threads preserve the POSIX semantics.</source>
          <target state="translated">システムがこの不一致の影響を受けるかどうかを確認するには、 &lt;code&gt;getconf GNU_LIBPTHREAD_VERSION | grep -q NPTL&lt;/code&gt; はfalse値を返します。NTPLスレッドは、POSIXセマンティクスを保持します。</target>
        </trans-unit>
        <trans-unit id="d211374e5db97da1828e5f0a6f84c0b749ec44e8" translate="yes" xml:space="preserve">
          <source>To see it in action, add a method</source>
          <target state="translated">動作を確認するには、メソッドを追加します。</target>
        </trans-unit>
        <trans-unit id="fddb2e3b0651d7cee6f1eddfc0db7c585ec33e9f" translate="yes" xml:space="preserve">
          <source>To see the output of specific failing tests run the harness from the t directory:</source>
          <target state="translated">特定の失敗したテストの出力を見るには、tディレクトリからハーネスを実行してください。</target>
        </trans-unit>
        <trans-unit id="5e8654d4f5f9129c9cab32750ab5566521abf2dc" translate="yes" xml:space="preserve">
          <source>To see what a state description looks like, just run the following:</source>
          <target state="translated">状態の記述がどのようなものかを確認するには、以下を実行するだけです。</target>
        </trans-unit>
        <trans-unit id="1afd16a9742f3bb00f5d52a4bea0944a04f89bb4" translate="yes" xml:space="preserve">
          <source>To see what is installed on your system:</source>
          <target state="translated">お使いのシステムにインストールされているものを確認するには</target>
        </trans-unit>
        <trans-unit id="759c7cca5357567d905de52c1b1b6b667aaa23a6" translate="yes" xml:space="preserve">
          <source>To see what version is included on the DVD (assumed here to be mounted on /cdrom), issue this command:</source>
          <target state="translated">DVD(ここでは/cdromにマウントされていると仮定)にどのバージョンが含まれているかを確認するには、このコマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="7ad61eadcf1dbdb7c99f44756b97def548456147" translate="yes" xml:space="preserve">
          <source>To see whether you have non-const data you can use a BSD (or GNU) compatible &lt;code&gt;nm&lt;/code&gt; :</source>
          <target state="translated">非constデータがあるかどうかを確認するには、BSD（またはGNU）互換の &lt;code&gt;nm&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="1349f12e189a41ade68fc4f2a3b99132d4421e66" translate="yes" xml:space="preserve">
          <source>To see whether you have non-const data you can use a BSD (or GNU) compatible &lt;code&gt;nm&lt;/code&gt;:</source>
          <target state="translated">非constデータがあるかどうかを確認するには、BSD（またはGNU）互換の &lt;code&gt;nm&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="ceecb8953e41093c57b8581763c4bd993092c9bf" translate="yes" xml:space="preserve">
          <source>To see why this is a problem, consider what can happen when two processes, say &quot;A&quot; and &quot;B&quot;, both want to update the same &lt;b&gt;DB_File&lt;/b&gt; database using the locking steps outlined above. Assume process &quot;A&quot; has already opened the database and has a write lock, but it hasn't actually updated the database yet (it has finished step 2, but not started step 3 yet). Now process &quot;B&quot; tries to open the same database - step 1 will succeed, but it will block on step 2 until process &quot;A&quot; releases the lock. The important thing to notice here is that at this point in time both processes will have cached identical initial blocks from the database.</source>
          <target state="translated">これが問題である理由を確認するには、 &quot;A&quot;と &quot;B&quot;の2つのプロセスが両方とも、上記のロック手順を使用して同じ&lt;b&gt;DB_File&lt;/b&gt;データベースを更新する場合に何が起こるかを考えて&lt;b&gt;ください&lt;/b&gt;。プロセス &quot;A&quot;がすでにデータベースを開いており、書き込みロックがあると仮定しますが、実際にはまだデータベースを更新していません（ステップ2は完了していますが、ステップ3はまだ開始していません）。ここでプロセス &quot;B&quot;が同じデータベースを開こうとします-ステップ1は成功しますが、プロセス &quot;A&quot;がロックを解放するまで、ステップ2でブロックされます。ここで注意すべき重要な点は、現時点で両方のプロセスがデータベースから同一の初期ブロックをキャッシュしていることです。</target>
        </trans-unit>
        <trans-unit id="887591ebb547202a2fbb02bece1d9984e9bcdec7" translate="yes" xml:space="preserve">
          <source>To see why, notice how you'll still have an issue on half-way-point alternation:</source>
          <target state="translated">その理由を見るためには、中途半端なポイントの交替にまだ問題があることに気づいてください。</target>
        </trans-unit>
        <trans-unit id="0cddf3be7ebfd9389288691711afdcfed8edf9c1" translate="yes" xml:space="preserve">
          <source>To send a &lt;b&gt;datagram&lt;/b&gt; to multiple destinations simultaneously.</source>
          <target state="translated">送信する&lt;b&gt;データグラムを&lt;/b&gt;同時に複数の宛先に。</target>
        </trans-unit>
        <trans-unit id="8617ca70598e41eabf7c915af7a92af825a55fcd" translate="yes" xml:space="preserve">
          <source>To send something to its correct destination. Often used metaphorically to indicate a transfer of programmatic control to a destination selected algorithmically, often by lookup in a table of function &lt;b&gt;references&lt;/b&gt; or, in the case of object &lt;b&gt;methods&lt;/b&gt;, by traversing the inheritance tree looking for the most specific definition for the method.</source>
          <target state="translated">正しい宛先に何かを送るため。多くの場合、比喩的に使用されて、アルゴリズムで選択された宛先へのプログラムによる制御の転送を示します。多くの場合、関数&lt;b&gt;参照の&lt;/b&gt;テーブルでのルックアップによって、またはオブジェクト&lt;b&gt;メソッド&lt;/b&gt;の場合は、継承ツリーを走査して&lt;b&gt;メソッド&lt;/b&gt;の最も具体的な定義を探します。</target>
        </trans-unit>
        <trans-unit id="67e016f9948cc1473ec98e12bd274f9eaa7682bd" translate="yes" xml:space="preserve">
          <source>To set the state of a pragma:</source>
          <target state="translated">プラグマの状態を設定する。</target>
        </trans-unit>
        <trans-unit id="4d0f638abe1cc26ab6bbeb03cebb08b40820c287" translate="yes" xml:space="preserve">
          <source>To set your private value, call &lt;code&gt;Perl_mro_set_private_data()&lt;/code&gt; :</source>
          <target state="translated">プライベート値を設定するには、 &lt;code&gt;Perl_mro_set_private_data()&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="16aae45044289a718089765d242152d067d315d5" translate="yes" xml:space="preserve">
          <source>To set your private value, call &lt;code&gt;Perl_mro_set_private_data()&lt;/code&gt;:</source>
          <target state="translated">プライベート値を設定するには、 &lt;code&gt;Perl_mro_set_private_data()&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="39b42d6c90a6c04419bddc3aa56e776f03e6d4b1" translate="yes" xml:space="preserve">
          <source>To shut off its generation, pass the &lt;code&gt;NO_META&lt;/code&gt; flag to &lt;code&gt;WriteMakefile()&lt;/code&gt; .</source>
          <target state="translated">生成を停止するには、 &lt;code&gt;NO_META&lt;/code&gt; フラグを &lt;code&gt;WriteMakefile()&lt;/code&gt; に渡します。</target>
        </trans-unit>
        <trans-unit id="eacb74b08b83ca5e29c7e01a124f0c6492dc5d47" translate="yes" xml:space="preserve">
          <source>To shut off its generation, pass the &lt;code&gt;NO_META&lt;/code&gt; flag to &lt;code&gt;WriteMakefile()&lt;/code&gt;.</source>
          <target state="translated">その生成を停止するには、 &lt;code&gt;NO_META&lt;/code&gt; フラグを &lt;code&gt;WriteMakefile()&lt;/code&gt; に渡します。</target>
        </trans-unit>
        <trans-unit id="57cf8244407c213f6cbced635b585a8f402b31ff" translate="yes" xml:space="preserve">
          <source>To signal the semaphore, replace &lt;code&gt;-1&lt;/code&gt; with &lt;code&gt;1&lt;/code&gt; . See also &lt;a href=&quot;../perlipc#SysV-IPC&quot;&gt;SysV IPC in perlipc&lt;/a&gt;, &lt;code&gt;IPC::SysV&lt;/code&gt; , and &lt;code&gt;IPC::SysV::Semaphore&lt;/code&gt; documentation.</source>
          <target state="translated">セマフォに通知するには、 &lt;code&gt;-1&lt;/code&gt; を &lt;code&gt;1&lt;/code&gt; に置き換えます。&lt;a href=&quot;../perlipc#SysV-IPC&quot;&gt;perlipcのSysV IPC&lt;/a&gt;、 &lt;code&gt;IPC::SysV&lt;/code&gt; 、および &lt;code&gt;IPC::SysV::Semaphore&lt;/code&gt; ドキュメントも参照してください。</target>
        </trans-unit>
        <trans-unit id="d782cb39a280e66911e6595a3826686b674e633e" translate="yes" xml:space="preserve">
          <source>To signal the semaphore, replace &lt;code&gt;-1&lt;/code&gt; with &lt;code&gt;1&lt;/code&gt; . See also &lt;a href=&quot;perlipc#SysV-IPC&quot;&gt;SysV IPC in perlipc&lt;/a&gt;, &lt;code&gt;IPC::SysV&lt;/code&gt; , and &lt;code&gt;IPC::SysV::Semaphore&lt;/code&gt; documentation.</source>
          <target state="translated">セマフォに通知するには、 &lt;code&gt;-1&lt;/code&gt; を &lt;code&gt;1&lt;/code&gt; に置き換えます。&lt;a href=&quot;perlipc#SysV-IPC&quot;&gt;perlipcのSysV IPC&lt;/a&gt;、 &lt;code&gt;IPC::SysV&lt;/code&gt; 、および &lt;code&gt;IPC::SysV::Semaphore&lt;/code&gt; ドキュメントも参照してください。</target>
        </trans-unit>
        <trans-unit id="49cc3c1b8c165959fade8c0cdac2c114f0c70649" translate="yes" xml:space="preserve">
          <source>To signal the semaphore, replace &lt;code&gt;-1&lt;/code&gt; with &lt;code&gt;1&lt;/code&gt;. See also &lt;a href=&quot;perlipc#SysV-IPC&quot;&gt;&quot;SysV IPC&quot; in perlipc&lt;/a&gt; and the documentation for &lt;a href=&quot;IPC::SysV&quot;&gt;&lt;code&gt;IPC::SysV&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;IPC::Semaphore&quot;&gt;&lt;code&gt;IPC::Semaphore&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">セマフォに信号を送るには、 &lt;code&gt;-1&lt;/code&gt; を &lt;code&gt;1&lt;/code&gt; に置き換えます。&lt;a href=&quot;perlipc#SysV-IPC&quot;&gt;perlipcの「SysVIPC」&lt;/a&gt;および&lt;a href=&quot;IPC::SysV&quot;&gt; &lt;code&gt;IPC::SysV&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;IPC::Semaphore&quot;&gt; &lt;code&gt;IPC::Semaphore&lt;/code&gt; &lt;/a&gt;ドキュメントも参照してください。</target>
        </trans-unit>
        <trans-unit id="46e199b8e074ec6e1896ea95f9bad604e453a779" translate="yes" xml:space="preserve">
          <source>To signal to Perl that HMQ is not needed any more, call &lt;code&gt;perl_hmq_UNSET(serve)&lt;/code&gt; . Perl process will automatically morph/unmorph itself into/from a PM process if HMQ is needed/not-needed. Perl will automatically enable/disable &lt;code&gt;WM_QUIT&lt;/code&gt; message during shutdown if the message queue is served/not-served.</source>
          <target state="translated">HMQが不要になったことをPerlに通知するには、 &lt;code&gt;perl_hmq_UNSET(serve)&lt;/code&gt; を呼び出します。Perlプロセスは、HMQが必要である/不要である場合、自動的にPMプロセスへ/からのモーフィング/アンモーフィングを行います。Perlは、メッセージキューが処理される/処理されない場合、シャットダウン時に &lt;code&gt;WM_QUIT&lt;/code&gt; メッセージを自動的に有効/無効にします。</target>
        </trans-unit>
        <trans-unit id="76395c3ce12a1fd4356ad20f5dad8a9f32df5165" translate="yes" xml:space="preserve">
          <source>To signal to Perl that HMQ is not needed any more, call &lt;code&gt;perl_hmq_UNSET(serve)&lt;/code&gt;. Perl process will automatically morph/unmorph itself into/from a PM process if HMQ is needed/not-needed. Perl will automatically enable/disable &lt;code&gt;WM_QUIT&lt;/code&gt; message during shutdown if the message queue is served/not-served.</source>
          <target state="translated">HMQが不要になったことをPerlに通知するには、 &lt;code&gt;perl_hmq_UNSET(serve)&lt;/code&gt; を呼び出します。Perlプロセスは、HMQが必要/不要な場合、PMプロセスに自動的にモーフィング/モーフ解除します。メッセージキューが提供されている/提供されていない場合、Perlはシャットダウン中に &lt;code&gt;WM_QUIT&lt;/code&gt; メッセージを自動的に有効/無効にします。</target>
        </trans-unit>
        <trans-unit id="3868e3b616a54cb1bab8634fd841ed657adc2c50" translate="yes" xml:space="preserve">
          <source>To silently interpret it as the Perl operator, use the &lt;code&gt;CORE::&lt;/code&gt; prefix on the operator (e.g. &lt;code&gt;CORE::log($x)&lt;/code&gt; ) or declare the subroutine to be an object method (see &lt;a href=&quot;perlsub#Subroutine-Attributes&quot;&gt;Subroutine Attributes in perlsub&lt;/a&gt; or &lt;a href=&quot;attributes&quot;&gt;attributes&lt;/a&gt;).</source>
          <target state="translated">黙ってPerl演算子として解釈するには、演算子で &lt;code&gt;CORE::&lt;/code&gt; プレフィックスを使用するか（例： &lt;code&gt;CORE::log($x)&lt;/code&gt; ）、またはサブルーチンをオブジェクトメソッドとして宣言します（&lt;a href=&quot;perlsub#Subroutine-Attributes&quot;&gt;perlsub&lt;/a&gt;または&lt;a href=&quot;attributes&quot;&gt;attributesの&lt;/a&gt;サブルーチン属性を参照）。</target>
        </trans-unit>
        <trans-unit id="77f74a1e8ed985d91bce77589cc0e8ad84a337cc" translate="yes" xml:space="preserve">
          <source>To silently interpret it as the Perl operator, use the &lt;code&gt;CORE::&lt;/code&gt; prefix on the operator (e.g. &lt;code&gt;CORE::log($x)&lt;/code&gt;) or declare the subroutine to be an object method (see &lt;a href=&quot;perlsub#Subroutine-Attributes&quot;&gt;&quot;Subroutine Attributes&quot; in perlsub&lt;/a&gt; or &lt;a href=&quot;attributes&quot;&gt;attributes&lt;/a&gt;).</source>
          <target state="translated">サイレントにPerl演算子として解釈するには、演算子の &lt;code&gt;CORE::&lt;/code&gt; プレフィックス（例： &lt;code&gt;CORE::log($x)&lt;/code&gt; ）を使用するか、サブルーチンをオブジェクトメソッドとして宣言します（&lt;a href=&quot;perlsub#Subroutine-Attributes&quot;&gt;perlsub&lt;/a&gt;または&lt;a href=&quot;attributes&quot;&gt;attributesの&lt;/a&gt;「サブルーチン属性」を参照）。</target>
        </trans-unit>
        <trans-unit id="ea26257b4903cfdcc4f9b51c3c53cf94dc5f1003" translate="yes" xml:space="preserve">
          <source>To simplify multi-line substitutions, the &quot;.&quot; character never matches a newline unless you use the &lt;code&gt;/s&lt;/code&gt; modifier, which in effect tells Perl to pretend the string is a single line--even if it isn't.</source>
          <target state="translated">複数行の置換を簡略化するために、「。」 &lt;code&gt;/s&lt;/code&gt; 修飾子を使用しない限り、文字が改行と一致することはありません。これは、Perlに文字列が1行であるかのように見せかけます（一致しない場合でも）。</target>
        </trans-unit>
        <trans-unit id="8a2c6b3c9e2b9a0960e93d5d6acb36d8aa948a45" translate="yes" xml:space="preserve">
          <source>To simplify multi-line substitutions, the &lt;code&gt;&quot;.&quot;&lt;/code&gt; character never matches a newline unless you use the &lt;a href=&quot;#s&quot;&gt;&lt;code&gt;/s&lt;/code&gt;&lt;/a&gt; modifier, which in effect tells Perl to pretend the string is a single line--even if it isn't.</source>
          <target state="translated">複数行の置換を簡略化するために、 &lt;code&gt;&quot;.&quot;&lt;/code&gt; &lt;a href=&quot;#s&quot;&gt; &lt;code&gt;/s&lt;/code&gt; &lt;/a&gt;修飾子を使用しない限り、文字が改行と一致することはありません。これにより、Perlは、文字列が単一行であるかのように見せかけることができます。</target>
        </trans-unit>
        <trans-unit id="3dcc0c984ac1c1f3aa01cd10ae020a1e23d2e144" translate="yes" xml:space="preserve">
          <source>To skip lines, use the looping controls. The &lt;code&gt;&lt;a href=&quot;functions/next&quot;&gt;next&lt;/a&gt;&lt;/code&gt; in this example skips comment lines, and the &lt;code&gt;&lt;a href=&quot;functions/last&quot;&gt;last&lt;/a&gt;&lt;/code&gt; stops all processing once it encounters either &lt;code&gt;__END__&lt;/code&gt; or &lt;code&gt;__DATA__&lt;/code&gt; .</source>
          <target state="translated">行をスキップするには、ループコントロールを使用します。 &lt;code&gt;&lt;a href=&quot;functions/next&quot;&gt;next&lt;/a&gt;&lt;/code&gt; の例スキップコメント行で、そして &lt;code&gt;&lt;a href=&quot;functions/last&quot;&gt;last&lt;/a&gt;&lt;/code&gt; 、それはどちらか遭遇した後にすべての処理を停止し &lt;code&gt;__END__&lt;/code&gt; か &lt;code&gt;__DATA__&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fa5fe915c274707436eefaadbe2f71ad0bad5d61" translate="yes" xml:space="preserve">
          <source>To skip lines, use the looping controls. The &lt;code&gt;next&lt;/code&gt; in this example skips comment lines, and the &lt;code&gt;last&lt;/code&gt; stops all processing once it encounters either &lt;code&gt;__END__&lt;/code&gt; or &lt;code&gt;__DATA__&lt;/code&gt;.</source>
          <target state="translated">行をスキップするには、ループコントロールを使用します。 &lt;code&gt;next&lt;/code&gt; の例スキップコメント行で、そして &lt;code&gt;last&lt;/code&gt; 、それはどちらか遭遇した後にすべての処理を停止し &lt;code&gt;__END__&lt;/code&gt; か &lt;code&gt;__DATA__&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7cb7cc3fb6917e0db56d0ceef1f6b092afc65ddb" translate="yes" xml:space="preserve">
          <source>To solve this, you must manually use pipe(), fork(), and the form of open() which sets one file descriptor to another, as shown below:</source>
          <target state="translated">これを解決するには、以下に示すように、手動で pipe()、fork()、そしてあるファイル記述子を別のファイル記述子に設定する open()の形式を使用しなければなりません。</target>
        </trans-unit>
        <trans-unit id="4f249829a932dbf9b88abd3f71ccd6d576666559" translate="yes" xml:space="preserve">
          <source>To sort a hash by value, you'll need to use a &lt;a href=&quot;#sort-SUBNAME-LIST&quot;&gt;&lt;code&gt;sort&lt;/code&gt;&lt;/a&gt; function. Here's a descending numeric sort of a hash by its values:</source>
          <target state="translated">ハッシュを値で&lt;a href=&quot;#sort-SUBNAME-LIST&quot;&gt; &lt;code&gt;sort&lt;/code&gt; &lt;/a&gt;には、並べ替え関数を使用する必要があります。ハッシュの値による降順の数値ソートは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="f205d5425879968b7952a3fb61c2ff97a391a194" translate="yes" xml:space="preserve">
          <source>To sort a hash by value, you'll need to use a &lt;code&gt;&lt;a href=&quot;functions/sort&quot;&gt;sort&lt;/a&gt;&lt;/code&gt; function. Here's a descending numeric sort of a hash by its values:</source>
          <target state="translated">ハッシュを値で &lt;code&gt;&lt;a href=&quot;functions/sort&quot;&gt;sort&lt;/a&gt;&lt;/code&gt; するには、ソート関数を使用する必要があります。以下は、値の降順のハッシュの数値ソートです。</target>
        </trans-unit>
        <trans-unit id="e22346e7b0a650eb196d705609c50726a647e816" translate="yes" xml:space="preserve">
          <source>To sort a hash by value, you'll need to use a &lt;code&gt;&lt;a href=&quot;sort&quot;&gt;sort&lt;/a&gt;&lt;/code&gt; function. Here's a descending numeric sort of a hash by its values:</source>
          <target state="translated">ハッシュを値で &lt;code&gt;&lt;a href=&quot;sort&quot;&gt;sort&lt;/a&gt;&lt;/code&gt; するには、ソート関数を使用する必要があります。以下は、値の降順のハッシュの数値ソートです。</target>
        </trans-unit>
        <trans-unit id="035b2f73f3e8b156397dc2189e758b10b01a049f" translate="yes" xml:space="preserve">
          <source>To sort a hash, start with the keys. In this example, we give the list of keys to the sort function which then compares them ASCIIbetically (which might be affected by your locale settings). The output list has the keys in ASCIIbetical order. Once we have the keys, we can go through them to create a report which lists the keys in ASCIIbetical order.</source>
          <target state="translated">ハッシュをソートするには、まずキーから始めます。この例では、キーのリストをソート関数に渡し、ASCIIbetical に比較しています (これはロケールの設定の影響を受けるかもしれません)。出力されるリストは、キーがASCIIbetical順に並んでいます。キーを取得したら、キーをASCIIbetical順に並べたレポートを作成することができます。</target>
        </trans-unit>
        <trans-unit id="bd567593644cab945269478fa56978a3d2bc8799" translate="yes" xml:space="preserve">
          <source>To specify a character by Unicode code point, use the form &lt;code&gt;\N{U+&lt;i&gt;code
point&lt;/i&gt;}&lt;/code&gt;, where</source>
          <target state="translated">Unicodeコードポイントで文字を指定するには、 &lt;code&gt;\N{U+&lt;i&gt;code point&lt;/i&gt;}&lt;/code&gt; の形式を使用します。</target>
        </trans-unit>
        <trans-unit id="97bdead994a8b1301604dc655e33bb83cb6a1547" translate="yes" xml:space="preserve">
          <source>To specify a compression level when writing, append a digit between 0 and 9 to the mode string -- 0 means no compression and 9 means maximum compression. If no compression level is specified Z_DEFAULT_COMPRESSION is used.</source>
          <target state="translated">書き込み時の圧縮レベルを指定するには、モード文字列に 0 から 9 までの数字を追加します。圧縮レベルが指定されていない場合は、Z_DEFAULT_COMPRESSION が使用されます。</target>
        </trans-unit>
        <trans-unit id="679c6d53c6265b7e7972b50aa21c407989720f3b" translate="yes" xml:space="preserve">
          <source>To specify a literal SPACE character, you can escape it with a backslash, like:</source>
          <target state="translated">リテラルなSPACE文字を指定するには、バックスラッシュのようにエスケープすることができます。</target>
        </trans-unit>
        <trans-unit id="edce8429b2a3fa7edc3e49d4ca87a0b2294c60e2" translate="yes" xml:space="preserve">
          <source>To specify a particular stack size for any individual thread, call &lt;code&gt;-&amp;gt;create()&lt;/code&gt; with a hash reference as the first argument:</source>
          <target state="translated">個々のスレッドの特定のスタックサイズを指定するには、最初の引数としてハッシュ参照を指定して &lt;code&gt;-&amp;gt;create()&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="5a3b28c1d56d62a0c685010a78c8616b6f249aaf" translate="yes" xml:space="preserve">
          <source>To specify a real-time timeout, supply the &lt;code&gt;LIFETIME&lt;/code&gt; option with a numeric value. Cached data will expire after this many seconds, and will be looked up afresh when it expires. When a data item is looked up afresh, its lifetime is reset.</source>
          <target state="translated">リアルタイムタイムアウトを指定するには、 &lt;code&gt;LIFETIME&lt;/code&gt; オプションに数値を指定します。キャッシュされたデータは、この数秒後に有効期限が切れ、有効期限が切れると新たに検索されます。データ項目が新たに検索されると、その存続期間はリセットされます。</target>
        </trans-unit>
        <trans-unit id="75872cec7b7dae2ec30afbe5f15f62f2ed47906e" translate="yes" xml:space="preserve">
          <source>To specify by name, the name of the character or character sequence goes between the curly braces.</source>
          <target state="translated">名前で指定する場合は、中括弧の間に文字または文字列の名前を入れます。</target>
        </trans-unit>
        <trans-unit id="dde9b4df6bfb5d9f21839e498fe1e3acf75a91a1" translate="yes" xml:space="preserve">
          <source>To specify how numbers are formatted when printed, one is advised to use &lt;code&gt;printf&lt;/code&gt; or &lt;code&gt;sprintf&lt;/code&gt; instead.</source>
          <target state="translated">印刷時に数値をフォーマットする方法を指定するには、代わりに &lt;code&gt;printf&lt;/code&gt; または &lt;code&gt;sprintf&lt;/code&gt; を使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="e22be0e52c335b1ce8908cd9371ba0e4b96e3022" translate="yes" xml:space="preserve">
          <source>To specify the compression strategy when writing, append 'f' for filtered data, 'h' for Huffman only compression, or 'R' for run-length encoding. If no strategy is specified Z_DEFAULT_STRATEGY is used.</source>
          <target state="translated">書き込み時の圧縮方式を指定するには、フィルタリングされたデータの場合は 'f'、ハフマン圧縮のみの場合は 'h'、ランレングスエンコーディングの場合は 'R' を追加します。ストラテジーが指定されていない場合は、Z_DEFAULT_STRATEGY が使用されます。</target>
        </trans-unit>
        <trans-unit id="cb8a391550e8914db81270f773f4523451df8b90" translate="yes" xml:space="preserve">
          <source>To speed things up in complex installation scenarios, CPAN.pm keeps track of what it has already done and refuses to do some things a second time. A &lt;code&gt;get&lt;/code&gt; , a &lt;code&gt;make&lt;/code&gt; , and an &lt;code&gt;install&lt;/code&gt; are not repeated. A &lt;code&gt;test&lt;/code&gt; is repeated only if the previous test was unsuccessful. The diagnostic message when CPAN.pm refuses to do something a second time is one of</source>
          <target state="translated">複雑なインストールシナリオで処理を高速化するために、CPAN.pmはすでに実行したことを追跡し、2回目の処理を拒否します。 &lt;code&gt;get&lt;/code&gt; 、 &lt;code&gt;make&lt;/code&gt; 、および &lt;code&gt;install&lt;/code&gt; 繰り返されていません。 &lt;code&gt;test&lt;/code&gt; 前のテストが失敗した場合にのみ繰り返されます。CPAN.pmが2度目に何かを拒否したときの診断メッセージは次のいずれかです。</target>
        </trans-unit>
        <trans-unit id="ee745e8e1ccd43545cce5d6e1098128c6d2cb42b" translate="yes" xml:space="preserve">
          <source>To split a string automatically, as the</source>
          <target state="translated">のように文字列を自動的に分割するには</target>
        </trans-unit>
        <trans-unit id="1c43b020de2fd47f4f4fe689a93a4f681f980968" translate="yes" xml:space="preserve">
          <source>To start exploring some of the features of Test::Harness I need to switch from</source>
          <target state="translated">Test::Harness の機能のいくつかを探索するためには</target>
        </trans-unit>
        <trans-unit id="76a587334bce3d780e4ef5607b4eb7989a44b338" translate="yes" xml:space="preserve">
          <source>To start external programs with complicated command lines (like with pipes in between, and/or quoting of arguments), Perl uses an external shell. With EMX port such shell should be named</source>
          <target state="translated">複雑なコマンドライン(間にパイプを入れたり、引数を引用したり)を持つ外部プログラムを起動するために、Perl は外部シェルを使用します。EMX ポートでは、このようなシェルは</target>
        </trans-unit>
        <trans-unit id="4496b7043de2731c625ff5d9cbb9bfec5778dc82" translate="yes" xml:space="preserve">
          <source>To start perl by clicking on a perl source file, you have to make the according entries in HKCR (see</source>
          <target state="translated">perlのソースファイルをクリックしてperlを起動するには、HKCRの中にそれに応じたエントリを作成しなければなりません(</target>
        </trans-unit>
        <trans-unit id="ed415ca8982026bad9b823bf326a650e9d0848ae" translate="yes" xml:space="preserve">
          <source>To subtract a value from a variable, as in &amp;ldquo;decrement &lt;code&gt;$x&lt;/code&gt; &amp;rdquo; (meaning to remove 1 from its value) or &amp;ldquo;decrement &lt;code&gt;$x&lt;/code&gt; by 3&amp;rdquo;.</source>
          <target state="translated">「デクリメント &lt;code&gt;$x&lt;/code&gt; 」（値から1を削除することを意味する）または「デクリメント &lt;code&gt;$x&lt;/code&gt; を3」のように、変数から値を減算する。</target>
        </trans-unit>
        <trans-unit id="b3834a44244c88392770a12aebccbba7a107bc50" translate="yes" xml:space="preserve">
          <source>To subtract a value from a variable, as in &amp;ldquo;decrement &lt;code&gt;$x&lt;/code&gt;&amp;rdquo; (meaning to remove 1 from its value) or &amp;ldquo;decrement &lt;code&gt;$x&lt;/code&gt; by 3&amp;rdquo;.</source>
          <target state="translated">「 &lt;code&gt;$x&lt;/code&gt; デクリメントする」（値から1を削除することを意味します）または「 &lt;code&gt;$x&lt;/code&gt; を3デクリメントする」のように、変数から値を減算します。</target>
        </trans-unit>
        <trans-unit id="c34bd44153421ecb4ee7a84a5cf2f9e94314d16d" translate="yes" xml:space="preserve">
          <source>To summarise:</source>
          <target state="translated">要約すると</target>
        </trans-unit>
        <trans-unit id="1ec17769e0302f168a8a4f3337a21d3e87e35b66" translate="yes" xml:space="preserve">
          <source>To summarize,</source>
          <target state="translated">要約すると</target>
        </trans-unit>
        <trans-unit id="bdefe539f6f30e5536e03e0dcfcbf06113e55e75" translate="yes" xml:space="preserve">
          <source>To summarize, here are a number of possible methods for you to consider for storing the mapping between C and the Perl callback</source>
          <target state="translated">要約すると、C と Perl のコールバックの間のマッピングを保存するために考慮すべきいくつかの方法があります。</target>
        </trans-unit>
        <trans-unit id="87770a145a86a8f01c504f30ba378126d36ae639" translate="yes" xml:space="preserve">
          <source>To summarize, here's what to expect and how to handle locales in XS code:</source>
          <target state="translated">要約すると、XSコードでのロケールの扱い方と期待されることは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="9eda1d19cb3d66414653545444049318272d3717" translate="yes" xml:space="preserve">
          <source>To summarize, the &lt;code&gt;\o{}&lt;/code&gt; form is always safe to use, and the other form is safe to use for code points through \077 when you use exactly three digits to specify them.</source>
          <target state="translated">要約すると、 &lt;code&gt;\o{}&lt;/code&gt; フォームは常に安全に使用でき、他のフォームは正確に3桁を指定して\ 077までのコードポイントに使用しても安全です。</target>
        </trans-unit>
        <trans-unit id="f40c24735c228769cecae3c743dcd1c13b34fed1" translate="yes" xml:space="preserve">
          <source>To summarize, this modifier provides protection for applications that don't wish to be exposed to all of Unicode. Specifying it twice gives added protection.</source>
          <target state="translated">要約すると、この修飾子は、Unicode のすべてにさらされたくないアプリケーションのための保護を提供します。この修飾子を2回指定すると、さらに保護が強化されます。</target>
        </trans-unit>
        <trans-unit id="8b52f75bf07c40cc3e2dd50eeec591de76cf40c0" translate="yes" xml:space="preserve">
          <source>To support potentially complex type mappings, if a typemap entry used by an XSUB contains a comment like &lt;code&gt;/*scope*/&lt;/code&gt; then scoping will be automatically enabled for that XSUB.</source>
          <target state="translated">潜在的に複雑な型マッピングをサポートするために、XSUBが使用するタイプマップエントリに &lt;code&gt;/*scope*/&lt;/code&gt; のようなコメントが含まれている場合、そのXSUBに対してスコープが自動的に有効になります。</target>
        </trans-unit>
        <trans-unit id="91686b6431594592a741d6ffaa933cf36c582cbb" translate="yes" xml:space="preserve">
          <source>To support the &lt;code&gt;IO::Socket::INET&lt;/code&gt; API, the host and port information may be passed in a single string rather than as two separate arguments.</source>
          <target state="translated">&lt;code&gt;IO::Socket::INET&lt;/code&gt; APIをサポートするために、ホストとポートの情報を2つの別個の引数としてではなく、単一の文字列で渡すことができます。</target>
        </trans-unit>
        <trans-unit id="c8462b0ae01f912ec184e35a1a54c294d3db9c0b" translate="yes" xml:space="preserve">
          <source>To support these systems a dl_expandspec() function can be implemented either in the</source>
          <target state="translated">これらのシステムをサポートするために、 dl_expandspec()関数は</target>
        </trans-unit>
        <trans-unit id="28ae7b79101a8be6ce604e7c61e718194e3e904d" translate="yes" xml:space="preserve">
          <source>To swap pairs of characters in a string (with even length) one could use several techniques. First, let's use &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;X&lt;/code&gt; to skip forward and back:</source>
          <target state="translated">文字列（長さが同じ）の文字のペアを交換するには、いくつかの手法を使用できます。まず、 &lt;code&gt;x&lt;/code&gt; と &lt;code&gt;X&lt;/code&gt; を使用して前後にスキップします。</target>
        </trans-unit>
        <trans-unit id="1051c83149c4c36730f97e1db8ce4187ba11feed" translate="yes" xml:space="preserve">
          <source>To switch back to blead:</source>
          <target state="translated">ブリードに戻すには</target>
        </trans-unit>
        <trans-unit id="52ed4dc484d91fd5d94539987c6af1829eb4d58f" translate="yes" xml:space="preserve">
          <source>To switch back to the default behaviour, use</source>
          <target state="translated">デフォルトの動作に戻すには</target>
        </trans-unit>
        <trans-unit id="58f194a064ccb257aaff951da440487e80ed0887" translate="yes" xml:space="preserve">
          <source>To take a closer look at how the engine does optimizations, see the section &lt;a href=&quot;#Pragmas-and-debugging&quot;&gt;&quot;Pragmas and debugging&quot;&lt;/a&gt; below.</source>
          <target state="translated">エンジンが最適化を行う方法を詳しく調べるには、以下の&lt;a href=&quot;#Pragmas-and-debugging&quot;&gt;「プラグマとデバッグ」の&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="9ad4d27e66821295806e39cdf16c87b63c90f1ed" translate="yes" xml:space="preserve">
          <source>To take a closer look at how the engine does optimizations, see the section &lt;a href=&quot;#Pragmas-and-debugging&quot;&gt;Pragmas and debugging&lt;/a&gt; below.</source>
          <target state="translated">エンジンが最適化を行う方法を詳しく見るには、以下の&lt;a href=&quot;#Pragmas-and-debugging&quot;&gt;プラグマとデバッグの&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="b4f5b8181a41c615c87aa14a36a9140e586c5541" translate="yes" xml:space="preserve">
          <source>To tell PerlIO to use line buffer, implement -&amp;gt;needs_lines method for your encoding object. See &lt;a href=&quot;Encode::Encoding&quot;&gt;Encode::Encoding&lt;/a&gt; for details.</source>
          <target state="translated">PerlIOにラインバッファを使用するように指示するには、エンコーディングオブジェクトに-&amp;gt; needs_linesメソッドを実装します。詳細については、&lt;a href=&quot;Encode::Encoding&quot;&gt;Encode :: Encoding&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="f3651fac40bf38f464aae40f7d0973a874e0f3ea" translate="yes" xml:space="preserve">
          <source>To test that your code is behaving correctly and not modifying COW buffers, on systems that support</source>
          <target state="translated">サポートしているシステムで、コードが正しく動作し、COW バッファを変更していないことをテストするには</target>
        </trans-unit>
        <trans-unit id="9bfb4f72eb168db2a7d20587450847a727ac1bdf" translate="yes" xml:space="preserve">
          <source>To test that your code is behaving correctly and not modifying COW buffers, on systems that support &lt;a href=&quot;http://man.he.net/man2/mmap&quot;&gt;mmap(2)&lt;/a&gt; (i.e., Unix) you can configure perl with &lt;code&gt;-Accflags=-DPERL_DEBUG_READONLY_COW&lt;/code&gt; and it will turn buffer violations into crashes. You will find it to be marvellously slow, so you may want to skip perl's own tests.</source>
          <target state="translated">コードが正しく動作し、COWバッファーが変更されていないことをテストするには、&lt;a href=&quot;http://man.he.net/man2/mmap&quot;&gt;mmap（2）&lt;/a&gt;をサポートするシステム（Unixなど）で、perlを &lt;code&gt;-Accflags=-DPERL_DEBUG_READONLY_COW&lt;/code&gt; で構成すると、バッファー違反がクラッシュに変わります。あなたはそれが驚くほど遅いことに気付くでしょう、それであなたはperl自身のテストをスキップしたいかもしれません。</target>
        </trans-unit>
        <trans-unit id="8ce0bdd874392ab18a8e9a217e048b7e9971ae31" translate="yes" xml:space="preserve">
          <source>To test whether a variable contains tainted data, and whose use would thus trigger an &quot;Insecure dependency&quot; message, you can use the &lt;code&gt;tainted()&lt;/code&gt; function of the Scalar::Util module, available in your nearby CPAN mirror, and included in Perl starting from the release 5.8.0. Or you may be able to use the following &lt;code&gt;is_tainted()&lt;/code&gt; function.</source>
          <target state="translated">変数に汚染されたデータが含まれているかどうかをテストし、その使用によって「安全でない依存関係」メッセージがトリガーされるようにするには、Scalar :: Utilモジュールの &lt;code&gt;tainted()&lt;/code&gt; 関数を使用できます。リリース5.8.0から。または、次の &lt;code&gt;is_tainted()&lt;/code&gt; 関数を使用できる場合があります。</target>
        </trans-unit>
        <trans-unit id="521a49c8c35183a9a627a2f63a5d516c8a7cf5ba" translate="yes" xml:space="preserve">
          <source>To the Perl program that called fork(), all this is designed to be transparent. The parent returns from the fork() with a pseudo-process ID that can be subsequently used in any process-manipulation functions; the child returns from the fork() with a value of &lt;code&gt;0&lt;/code&gt; to signify that it is the child pseudo-process.</source>
          <target state="translated">fork（）を呼び出したPerlプログラムにとって、これはすべて透過的になるように設計されています。親は、その後に任意のプロセス操作関数で使用できる疑似プロセスIDでfork（）から戻ります。子はfork（）から値 &lt;code&gt;0&lt;/code&gt; で戻り、子の疑似プロセスであることを示します。</target>
        </trans-unit>
        <trans-unit id="c7e05b4fcf627d6e6c4197f19ffda73a879c664a" translate="yes" xml:space="preserve">
          <source>To the best of our ability, we will attempt to fix critical issues in the two most recent stable 5.x release series. Fixes for the current release series take precedence over fixes for the previous release series.</source>
          <target state="translated">可能な限り、最新の安定版 5.x リリースシリーズの 2 つの重要な問題の修正を試みます。現在のリリースシリーズの修正は、以前のリリースシリーズの修正よりも優先されます。</target>
        </trans-unit>
        <trans-unit id="51a0f8c69bc4919eb0f20691df0fe50a577785df" translate="yes" xml:space="preserve">
          <source>To the best of our ability, we will provide &quot;critical&quot; security patches / releases for any major version of Perl whose 5.x.0 release was within the past three years. We can only commit to providing these for the most recent .y release in any 5.x.y series.</source>
          <target state="translated">できる限り、5.x.0 が過去 3 年以内にリリースされた Perl のメジャーバージョンに対して、「重要な」セキュリティパッチ/リリースを提供します。私たちは、5.x.y シリーズの中で最も新しい .y リリースに対してのみ、これらを提供することを約束することができます。</target>
        </trans-unit>
        <trans-unit id="0150808aeae45323caf819f2a13c1da7ff5a8491" translate="yes" xml:space="preserve">
          <source>To the extent possible under law, 唐鳳 has waived all copyright and related or neighboring rights to &lt;a href=&quot;test-use-ok&quot;&gt;Test-use-ok&lt;/a&gt;.</source>
          <target state="translated">法の下で可能な範囲で、唐鳳は&lt;a href=&quot;test-use-ok&quot;&gt;Test-use-ok&lt;/a&gt;に対するすべての著作権および関連する権利または隣接権を放棄しました。</target>
        </trans-unit>
        <trans-unit id="6fa12fa0dac95b52f8a74aca03b7455d8e9dea13" translate="yes" xml:space="preserve">
          <source>To throw away the current &lt;b&gt;process&lt;/b&gt;&amp;rsquo;s program and replace it with another, without exiting the process or relinquishing any resources held (apart from the old memory image).</source>
          <target state="translated">現在の&lt;b&gt;プロセス&lt;/b&gt;のプログラムを破棄して、プロセスを終了したり、保持されているリソースを（古いメモリイメージを除いて）放棄したりせずに、別のプログラムに置き換えます。</target>
        </trans-unit>
        <trans-unit id="f643f5e924090f3cdd5f1a59fb90c2d5e840c683" translate="yes" xml:space="preserve">
          <source>To transfer files without &amp;lt;LF&amp;gt;&amp;lt;CR&amp;gt; translation Net::FTP provides the &lt;code&gt;binary&lt;/code&gt; method</source>
          <target state="translated">&amp;lt;LF&amp;gt; &amp;lt;CR&amp;gt;変換なしでファイルを転送するにはNet :: FTPは &lt;code&gt;binary&lt;/code&gt; 方式を提供します</target>
        </trans-unit>
        <trans-unit id="448a61a17f3cda496b5d3ba49da88ff7c85062ed" translate="yes" xml:space="preserve">
          <source>To transform a bit vector into a string or list of 0's and 1's, use these:</source>
          <target state="translated">ビットベクトルを文字列や0と1のリストに変換するには、これらを使用します。</target>
        </trans-unit>
        <trans-unit id="52d3ead3184110f1e5fce1f1092454c6b16a6c41" translate="yes" xml:space="preserve">
          <source>To translate from and to an arbitrary text encoding, use the &lt;code&gt;:encoding&lt;/code&gt; layer. The matching of encoding names in &lt;code&gt;:encoding&lt;/code&gt; is loose: case does not matter, and many encodings have several aliases. See &lt;a href=&quot;Encode::Supported&quot;&gt;Encode::Supported&lt;/a&gt; for details and the list of supported locales.</source>
          <target state="translated">任意のテキストエンコーディングとの間で変換するには、 &lt;code&gt;:encoding&lt;/code&gt; レイヤーを使用します。 &lt;code&gt;:encoding&lt;/code&gt; でのエンコーディング名の一致は緩いです：大文字と小文字は関係ありません。多くのエンコーディングにはいくつかのエイリアスがあります。参照&lt;a href=&quot;Encode::Supported&quot;&gt;エンコードをサポート::&lt;/a&gt;詳細とサポートされているロケールのリストについて。</target>
        </trans-unit>
        <trans-unit id="944acb39535fd8c95944433695337f030097b9f4" translate="yes" xml:space="preserve">
          <source>To trim trailing newlines from text lines use &lt;a href=&quot;perlfunc#chomp-VARIABLE&quot;&gt;&lt;code&gt;chomp&lt;/code&gt;&lt;/a&gt;. With default settings that function looks for a trailing &lt;code&gt;\n&lt;/code&gt; character and thus trims in a portable way.</source>
          <target state="translated">テキスト行から末尾の改行を&lt;a href=&quot;perlfunc#chomp-VARIABLE&quot;&gt; &lt;code&gt;chomp&lt;/code&gt; &lt;/a&gt;するには、chompを使用します。デフォルト設定では、この関数は末尾の &lt;code&gt;\n&lt;/code&gt; 文字を検索するため、移植可能な方法でトリミングされます。</target>
        </trans-unit>
        <trans-unit id="8d6d675a384b336013b57ff889fd3d31ada57c0a" translate="yes" xml:space="preserve">
          <source>To trim trailing newlines from text lines use &lt;code&gt;&lt;a href=&quot;functions/chomp&quot;&gt;chomp()&lt;/a&gt;&lt;/code&gt;. With default settings that function looks for a trailing &lt;code&gt;\n&lt;/code&gt; character and thus trims in a portable way.</source>
          <target state="translated">テキスト行から末尾の改行を &lt;code&gt;&lt;a href=&quot;functions/chomp&quot;&gt;chomp()&lt;/a&gt;&lt;/code&gt; するには、chomp（）を使用します。デフォルトの設定では、この関数は末尾の &lt;code&gt;\n&lt;/code&gt; 文字を探し、移植可能な方法でトリミングします。</target>
        </trans-unit>
        <trans-unit id="fc544de4b36caa59d370fbe1d58c57b2dd4e85a5" translate="yes" xml:space="preserve">
          <source>To try dmake's parallel mode, type &quot;dmake -P2&quot;, where 2, is the maximum number of parallel jobs you want to run. A number of things in the build process will run in parallel, but there are serialization points where you will see just 1 CPU maxed out. This is normal.</source>
          <target state="translated">dmakeの並列モードを試すには、&quot;dmake -P2 &quot;と入力します。ビルドプロセスの多くのものが並列に実行されますが、CPUが1つだけMAXになっているのを見ることができるシリアルポイントがあります。これは普通のことです。</target>
        </trans-unit>
        <trans-unit id="40f27a2565b48c1f61edc1951aa27946b5ec4637" translate="yes" xml:space="preserve">
          <source>To turn a hostname into a human-readable plain IP address use getaddrinfo() to turn the hostname into a list of socket structures, then getnameinfo() on each one to make it a readable IP address again.</source>
          <target state="translated">ホスト名を人間が読めるプレーンな IP アドレスにするには getaddrinfo()を使用してホスト名をソケット構造体のリストに変換し、それぞれのホスト名に対して getnameinfo()を使用して読める IP アドレスにします。</target>
        </trans-unit>
        <trans-unit id="f7838aca863be2066e77c33f9ec760e481423363" translate="yes" xml:space="preserve">
          <source>To turn one string representation into another by mapping each character of the source string to its corresponding character in the result string. Not to be confused with translation: for example, Greek</source>
          <target state="translated">ある文字列表現を、元の文字列の各文字を結果の文字列の対応する文字にマッピングすることで、別の文字列表現に変換すること。翻訳と混同されることはありません。</target>
        </trans-unit>
        <trans-unit id="2796f222a72ab401559f8c49bff573c8aee5f84f" translate="yes" xml:space="preserve">
          <source>To unambiguously refer to the built-in form, precede the built-in name with the special package qualifier &lt;code&gt;CORE::&lt;/code&gt; . For example, saying &lt;code&gt;CORE::open()&lt;/code&gt; always refers to the built-in &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open()&lt;/a&gt;&lt;/code&gt;, even if the current package has imported some other subroutine called &lt;code&gt;&amp;amp;open()&lt;/code&gt; from elsewhere. Even though it looks like a regular function call, it isn't: the CORE:: prefix in that case is part of Perl's syntax, and works for any keyword, regardless of what is in the CORE package. Taking a reference to it, that is, &lt;code&gt;\&amp;amp;CORE::open&lt;/code&gt; , only works for some keywords. See &lt;a href=&quot;core&quot;&gt;CORE&lt;/a&gt;.</source>
          <target state="translated">組み込みフォームを明確に参照するには、組み込み名の前に特別なパッケージ修飾子 &lt;code&gt;CORE::&lt;/code&gt; ます。たとえば、言って &lt;code&gt;CORE::open()&lt;/code&gt; 常にを指しビルトイン &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open()&lt;/a&gt;&lt;/code&gt; 、現在のパッケージと呼ばれるいくつかの他のサブルーチン輸入している場合でも &lt;code&gt;&amp;amp;open()&lt;/code&gt; 別の場所からを。通常の関数呼び出しのように見えますが、そうではありません。その場合のCORE ::プレフィックスはPerlの構文の一部であり、COREパッケージの内容に関係なく、どのキーワードでも機能します。それへの参照、つまり &lt;code&gt;\&amp;amp;CORE::open&lt;/code&gt; 、一部のキーワードでのみ機能します。&lt;a href=&quot;core&quot;&gt;COREを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="734561318cece230eccec304d2226018e762ebff" translate="yes" xml:space="preserve">
          <source>To unambiguously refer to the built-in form, precede the built-in name with the special package qualifier &lt;code&gt;CORE::&lt;/code&gt;. For example, saying &lt;code&gt;CORE::open()&lt;/code&gt; always refers to the built-in &lt;code&gt;open()&lt;/code&gt;, even if the current package has imported some other subroutine called &lt;code&gt;&amp;amp;open()&lt;/code&gt; from elsewhere. Even though it looks like a regular function call, it isn't: the CORE:: prefix in that case is part of Perl's syntax, and works for any keyword, regardless of what is in the CORE package. Taking a reference to it, that is, &lt;code&gt;\&amp;amp;CORE::open&lt;/code&gt;, only works for some keywords. See &lt;a href=&quot;core&quot;&gt;CORE&lt;/a&gt;.</source>
          <target state="translated">組み込みフォームを明確に参照するには、組み込み名の前に特別なパッケージ修飾子 &lt;code&gt;CORE::&lt;/code&gt; ます。たとえば、言って &lt;code&gt;CORE::open()&lt;/code&gt; 常にを指しビルトイン &lt;code&gt;open()&lt;/code&gt; 、現在のパッケージと呼ばれるいくつかの他のサブルーチン輸入している場合でも &lt;code&gt;&amp;amp;open()&lt;/code&gt; 別の場所からを。通常の関数呼び出しのように見えますが、そうではありません。その場合のCORE ::プレフィックスは、Perlの構文の一部であり、COREパッケージの内容に関係なく、すべてのキーワードで機能します。それを参照する、つまり &lt;code&gt;\&amp;amp;CORE::open&lt;/code&gt; 、一部のキーワードに対してのみ機能します。&lt;a href=&quot;core&quot;&gt;COREを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="248423c43b116b150a001ee976cc646676062436" translate="yes" xml:space="preserve">
          <source>To uncompress</source>
          <target state="translated">圧縮を解除するには</target>
        </trans-unit>
        <trans-unit id="218af45982210497e46e853ffef0192283629105" translate="yes" xml:space="preserve">
          <source>To uncompress all files in the directory &quot;/my/home&quot; that match &quot;*.txt.1950&quot; and store the compressed data in the same directory</source>
          <target state="translated">ディレクトリ&quot;/my/home &quot;にある &quot;*.txt.1950 &quot;に一致するすべてのファイルを解凍し、圧縮データを同じディレクトリに保存するには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="5ddcb357cfd2b7762051e66890c8b84e7d960611" translate="yes" xml:space="preserve">
          <source>To uncompress all files in the directory &quot;/my/home&quot; that match &quot;*.txt.1951&quot; and store the compressed data in the same directory</source>
          <target state="translated">ディレクトリ&quot;/my/home &quot;にある &quot;*.txt.1951 &quot;に一致するファイルをすべて解凍し、圧縮データを同じディレクトリに保存するには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="0e932ba5dc24bfd784757a246bd08027f46d4625" translate="yes" xml:space="preserve">
          <source>To uncompress all files in the directory &quot;/my/home&quot; that match &quot;*.txt.Compressed&quot; and store the compressed data in the same directory</source>
          <target state="translated">ディレクトリ「/my/home」にある「*.txt.Compressed」に一致するファイルをすべて解凍し、圧縮データを同じディレクトリに保存するには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="29a087f9cfa51d4e0c2f6a475a11f449e63412aa" translate="yes" xml:space="preserve">
          <source>To uncompress all files in the directory &quot;/my/home&quot; that match &quot;*.txt.bz2&quot; and store the compressed data in the same directory</source>
          <target state="translated">ディレクトリ&quot;/my/home &quot;にある &quot;*.txt.bz2 &quot;に一致するすべてのファイルを解凍し、圧縮データを同じディレクトリに保存するには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="61aa1a4650d4e1d7c6939abfa456f5aeb3345d9a" translate="yes" xml:space="preserve">
          <source>To uncompress all files in the directory &quot;/my/home&quot; that match &quot;*.txt.gz&quot; and store the compressed data in the same directory</source>
          <target state="translated">ディレクトリ&quot;/my/home &quot;にある &quot;*.txt.gz &quot;に一致するすべてのファイルを解凍し、圧縮データを同じディレクトリに保存するには、以下のようにします。</target>
        </trans-unit>
        <trans-unit id="2754edb3f14d19ed8eebfcca373f83ac4a3282e7" translate="yes" xml:space="preserve">
          <source>To uncompress an RFC 1950 data stream, set &lt;code&gt;WindowBits&lt;/code&gt; to a positive number between 8 and 15.</source>
          <target state="translated">RFC 1950データストリームを解凍するには、 &lt;code&gt;WindowBits&lt;/code&gt; を8〜15の正の数に設定します。</target>
        </trans-unit>
        <trans-unit id="44083e3f2b591fd2c77505655cdb2c8f0aceb349" translate="yes" xml:space="preserve">
          <source>To uncompress an RFC 1950 data stream, set &lt;code&gt;WindowBits&lt;/code&gt; to a positive number.</source>
          <target state="translated">RFC 1950データストリームを解凍するには、 &lt;code&gt;WindowBits&lt;/code&gt; を正の数に設定します。</target>
        </trans-unit>
        <trans-unit id="ceb9d1b68954b1740a461cdcd4976b0e567a28d9" translate="yes" xml:space="preserve">
          <source>To uncompress an RFC 1951 data stream, set &lt;code&gt;WindowBits&lt;/code&gt; to &lt;code&gt;-MAX_WBITS&lt;/code&gt; .</source>
          <target state="translated">RFC 1951データストリームを解凍するには、 &lt;code&gt;WindowBits&lt;/code&gt; を &lt;code&gt;-MAX_WBITS&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="f170e414b119e7ad18faa1ef3905d7483fe9aa7c" translate="yes" xml:space="preserve">
          <source>To uncompress an RFC 1951 data stream, set &lt;code&gt;WindowBits&lt;/code&gt; to &lt;code&gt;-MAX_WBITS&lt;/code&gt;.</source>
          <target state="translated">RFC 1951データストリームを解凍するには、 &lt;code&gt;WindowBits&lt;/code&gt; を &lt;code&gt;-MAX_WBITS&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="42e613bd86be8bd3cb751a2f5e9d0b238c337e5e" translate="yes" xml:space="preserve">
          <source>To uncompress an RFC 1952 data stream (i.e. gzip), set &lt;code&gt;WindowBits&lt;/code&gt; to &lt;code&gt;WANT_GZIP&lt;/code&gt; .</source>
          <target state="translated">RFC 1952データストリーム（gzipなど）を解凍するには、 &lt;code&gt;WindowBits&lt;/code&gt; を &lt;code&gt;WANT_GZIP&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="1f4fb6ffd8b0c13548ef465f1f6d2c2d688e65fd" translate="yes" xml:space="preserve">
          <source>To uncompress an RFC 1952 data stream (i.e. gzip), set &lt;code&gt;WindowBits&lt;/code&gt; to &lt;code&gt;WANT_GZIP&lt;/code&gt;.</source>
          <target state="translated">RFC 1952データストリーム（つまりgzip）を解凍するには、 &lt;code&gt;WindowBits&lt;/code&gt; を &lt;code&gt;WANT_GZIP&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="dfba75b19db48553fce3ae8bd422d26a25e30031" translate="yes" xml:space="preserve">
          <source>To understand that, here is a description of how we make computers grok our characters.</source>
          <target state="translated">それを理解するために、ここではコンピュータにキャラクターをグロウさせる方法を説明します。</target>
        </trans-unit>
        <trans-unit id="be309868d7c608c972ac92d2374d84d68bbcff87" translate="yes" xml:space="preserve">
          <source>To understand what kinds of incompatibilities one may expect, and in the rare case that the version of Perl on your machine is older than this document, see the section on &quot;Troubleshooting these Examples&quot; for more information.</source>
          <target state="translated">どのような種類の非互換性が考えられるかを理解するために、また、まれにマシン上のPerlのバージョンがこのドキュメントよりも古い場合には、詳細については「これらの例のトラブルシューティング」のセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="6b79315e2daa0488ef5b85ec7b3ded4c1bf9ff5d" translate="yes" xml:space="preserve">
          <source>To understand what the above</source>
          <target state="translated">上記の内容を理解するために</target>
        </trans-unit>
        <trans-unit id="84e6e80a4aa5a302f6ddaa79d242cdcf126f821b" translate="yes" xml:space="preserve">
          <source>To uppercase or lowercase several characters, one might want to use &lt;code&gt;\L&lt;/code&gt; or &lt;code&gt;\U&lt;/code&gt; , which will lowercase/uppercase all characters following them, until either the end of the pattern or the next occurrence of &lt;code&gt;\E&lt;/code&gt; , whichever comes first. They provide functionality similar to what the functions &lt;code&gt;&lt;a href=&quot;functions/lc&quot;&gt;lc&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/uc&quot;&gt;uc&lt;/a&gt;&lt;/code&gt; provide.</source>
          <target state="translated">複数の文字を大文字または小文字にするには、 &lt;code&gt;\L&lt;/code&gt; または &lt;code&gt;\U&lt;/code&gt; を使用します。これにより、パターンの終わりまたは &lt;code&gt;\E&lt;/code&gt; 次の出現のいずれか早い方まで、それらに続くすべての文字が小文字/大文字になります。 &lt;code&gt;&lt;a href=&quot;functions/lc&quot;&gt;lc&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;functions/uc&quot;&gt;uc&lt;/a&gt;&lt;/code&gt; が提供する機能と同様の機能を提供します。</target>
        </trans-unit>
        <trans-unit id="21a1fe6cbffcae1c27b590bd9990080f83e9d683" translate="yes" xml:space="preserve">
          <source>To uppercase or lowercase several characters, one might want to use &lt;code&gt;\L&lt;/code&gt; or &lt;code&gt;\U&lt;/code&gt;, which will lowercase/uppercase all characters following them, until either the end of the pattern or the next occurrence of &lt;code&gt;\E&lt;/code&gt;, whichever comes first. They provide functionality similar to what the functions &lt;code&gt;lc&lt;/code&gt; and &lt;code&gt;uc&lt;/code&gt; provide.</source>
          <target state="translated">複数の文字を大文字または小文字にするには、 &lt;code&gt;\L&lt;/code&gt; または &lt;code&gt;\U&lt;/code&gt; を使用することをお勧めします。これにより、パターンの終わりまたは次の &lt;code&gt;\E&lt;/code&gt; 出現のいずれか早い方まで、後続のすべての文字が小文字/大文字になります。これらは、 &lt;code&gt;lc&lt;/code&gt; および &lt;code&gt;uc&lt;/code&gt; が提供する機能と同様の機能を提供します。</target>
        </trans-unit>
        <trans-unit id="fd3b3ccd26f316b1795adeb89ffff2bedd268ce6" translate="yes" xml:space="preserve">
          <source>To use 'load_remote' or 'autoload_remote', specify at 'use'.</source>
          <target state="translated">load_remote' または 'autoload_remote' を使用する場合は use で指定します。</target>
        </trans-unit>
        <trans-unit id="8a5610b8c5bc5858528e5c0711e8cd5aeeeaeb22" translate="yes" xml:space="preserve">
          <source>To use &lt;b&gt;AutoLoader&lt;/b&gt;, the author of a module has to place the definitions of subroutines to be autoloaded after an &lt;code&gt;__END__&lt;/code&gt; token. (See &lt;a href=&quot;perldata&quot;&gt;perldata&lt;/a&gt;.) The &lt;b&gt;AutoSplit&lt;/b&gt; module can then be run manually to extract the definitions into individual files</source>
          <target state="translated">&lt;b&gt;AutoLoader&lt;/b&gt;を使用するには、モジュールの作成者が &lt;code&gt;__END__&lt;/code&gt; トークンの後にオートロードされるサブルーチンの定義を配置する必要があります。（&lt;a href=&quot;perldata&quot;&gt;perldataを&lt;/a&gt;参照してください。）&lt;b&gt;AutoSplit&lt;/b&gt;モジュールを手動で実行して、定義を個々のファイルに抽出できます。</target>
        </trans-unit>
        <trans-unit id="09401632ee7edad8ed959974db2a06c3088b608d" translate="yes" xml:space="preserve">
          <source>To use Bzip2 compression, the module &lt;code&gt;IO::Compress::Bzip2&lt;/code&gt; must be installed.</source>
          <target state="translated">Bzip2圧縮を使用するには、モジュール &lt;code&gt;IO::Compress::Bzip2&lt;/code&gt; インストールする必要があります。</target>
        </trans-unit>
        <trans-unit id="d246c1b4a8c6fc55969eb14bc150616f75299064" translate="yes" xml:space="preserve">
          <source>To use Getopt::Long from a Perl program, you must include the following line in your Perl program:</source>
          <target state="translated">Perl プログラムから Getopt::Long を使用するには、以下の行を Perl プログラムに含める必要があります。</target>
        </trans-unit>
        <trans-unit id="ca5f9362859e86ac853b5005fcaab143b5cd4fd8" translate="yes" xml:space="preserve">
          <source>To use LZMA compression, the module &lt;code&gt;IO::Compress::Lzma&lt;/code&gt; must be installed.</source>
          <target state="translated">LZMA圧縮を使用するには、モジュール &lt;code&gt;IO::Compress::Lzma&lt;/code&gt; インストールする必要があります。</target>
        </trans-unit>
        <trans-unit id="b9dc12bf802050f20704badfc03f5cc7c4d321fc" translate="yes" xml:space="preserve">
          <source>To use Net::FTP, or any other module in the libnet distribution, through a SOCKS firewall you must create a socks-ified perl executable by compiling perl with the socks library.</source>
          <target state="translated">Net::FTP や libnet ディストリビューションの他のモジュールを SOCKS ファイアウォール経由で使用するには、perl を socks ライブラリでコンパイルして socks-ified perl 実行ファイルを作成する必要があります。</target>
        </trans-unit>
        <trans-unit id="6a708529644756357339b6bd4e7ce1cb0f6dc3ee" translate="yes" xml:space="preserve">
          <source>To use a here-document to assign an array, one line per element, you might use an approach like this:</source>
          <target state="translated">her-documentを使って要素ごとに1行ずつ配列を代入するには、次のようなアプローチを使うとよいでしょう。</target>
        </trans-unit>
        <trans-unit id="d339f8f2813eea011c2650e8b1ed1fdac84e3d1c" translate="yes" xml:space="preserve">
          <source>To use a lexical subroutine from inside the subroutine itself, you must predeclare it. The &lt;code&gt;sub foo {...}&lt;/code&gt; subroutine definition syntax respects any previous &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt; &lt;a href=&quot;functions/sub&quot;&gt;sub&lt;/a&gt;;&lt;/code&gt; or &lt;code&gt;state &lt;a href=&quot;functions/sub&quot;&gt;sub&lt;/a&gt;;&lt;/code&gt; declaration.</source>
          <target state="translated">サブルーチン自体の中から字句サブルーチンを使用するには、それを事前宣言する必要があります。 &lt;code&gt;sub foo {...}&lt;/code&gt; サブルーチン定義の構文点以前の &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt; &lt;a href=&quot;functions/sub&quot;&gt;sub&lt;/a&gt;;&lt;/code&gt; または &lt;code&gt;state &lt;a href=&quot;functions/sub&quot;&gt;sub&lt;/a&gt;;&lt;/code&gt; 宣言。</target>
        </trans-unit>
        <trans-unit id="46735f54baf859d9a048ed8b3d013ded7487875d" translate="yes" xml:space="preserve">
          <source>To use adb, download the Android SDK from &lt;a href=&quot;https://developer.android.com/sdk/index.html&quot;&gt;https://developer.android.com/sdk/index.html&lt;/a&gt;. The &quot;SDK Tools Only&quot; version should suffice -- if you downloaded the ADT Bundle, you can find the sdk under</source>
          <target state="translated">adbを使用するには、&lt;a href=&quot;https://developer.android.com/sdk/index.html&quot;&gt;https：&lt;/a&gt; //developer.android.com/sdk/index.htmlからAndroidSDKをダウンロードします。「SDKツールのみ」バージョンで十分です。ADTバンドルをダウンロードした場合は、sdkが下にあります。</target>
        </trans-unit>
        <trans-unit id="0a6c22616496274a8c0483ef0b81201680edefba" translate="yes" xml:space="preserve">
          <source>To use in your program as a pragma, merely invoke</source>
          <target state="translated">プログラム内でプラグマとして使用するには、単に</target>
        </trans-unit>
        <trans-unit id="c9702d448044d584ba0f08cf12e0416ad038a1b6" translate="yes" xml:space="preserve">
          <source>To use it more practically, you have to give the names of encodings to check (</source>
          <target state="translated">より実用的に使うためには、チェックするエンコーディングの名前を指定しなければなりません (</target>
        </trans-unit>
        <trans-unit id="b4e86d7d6b51808534a6c222afc66338bce81e3d" translate="yes" xml:space="preserve">
          <source>To use ssh, you'll need to install and run a sshd app and set it up properly. There are several paid and free apps that do this rather easily, so you should be able to spot one on the store. Remember that Perl requires a passwordless connection, so set up a public key.</source>
          <target state="translated">sshを使うには、sshdアプリをインストールして実行し、きちんと設定する必要があります。これを簡単に行う有料・無料のアプリがいくつかあるので、ストアで見つけることができるはずです。Perl はパスワードなしの接続を必要とするので、公開鍵を設定してください。</target>
        </trans-unit>
        <trans-unit id="22588255917f935bc82a9b5e6907a6c5af5e0773" translate="yes" xml:space="preserve">
          <source>To use the OVERLOAD: keyword, create an XS function which takes three input parameters ( or use the c style '...' definition) like this:</source>
          <target state="translated">OVERLOAD:キーワードを使用するには、以下のように3つの入力パラメータ(またはcスタイルの'...'定義を使用)を受け取るXS関数を作成します。</target>
        </trans-unit>
        <trans-unit id="2eb14825f964f456a1059f994fc559fc5aaaa465" translate="yes" xml:space="preserve">
          <source>To use the OVERLOAD: keyword, create an XS function which takes three input parameters (or use the C-style '...' definition) like this:</source>
          <target state="translated">OVERLOAD:キーワードを使用するには、以下のように3つの入力パラメータを受け取るXS関数を作成します(または、Cスタイルの'...'定義を使用します)。</target>
        </trans-unit>
        <trans-unit id="3dc634fc1f1bc1b5d00fde6bff6b384f2eeb3f97" translate="yes" xml:space="preserve">
          <source>To use the Perl you just installed you will need to add a new entry to your PATH environment variable: &lt;code&gt;$INST_TOP\bin&lt;/code&gt; , e.g.</source>
          <target state="translated">インストールしたPerlを使用するには、PATH環境変数に新しいエントリを追加する必要があります： &lt;code&gt;$INST_TOP\bin&lt;/code&gt; 、たとえば</target>
        </trans-unit>
        <trans-unit id="c6290d7b4a4817dd1a944f6b3cabef3b11fd0b36" translate="yes" xml:space="preserve">
          <source>To use the Perl you just installed you will need to add a new entry to your PATH environment variable: &lt;code&gt;$INST_TOP\bin&lt;/code&gt;, e.g.</source>
          <target state="translated">インストールしたPerlを使用するには、PATH環境変数に新しいエントリを追加する必要があります： &lt;code&gt;$INST_TOP\bin&lt;/code&gt; 、例：</target>
        </trans-unit>
        <trans-unit id="7bc829cf0e8a5c97f97a31b7c617e9428478c19b" translate="yes" xml:space="preserve">
          <source>To use the forked debugger, you need to have the default display set to an X-11 Server and some environment variables set that Unix expects.</source>
          <target state="translated">フォークされたデバッガを使用するには、デフォルトの表示を X-11 Server に設定し、Unix が期待する環境変数を設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="fc207fecfdae515e813f72872e49086f5b78c28e" translate="yes" xml:space="preserve">
          <source>To use the module it is necessary to do the following:</source>
          <target state="translated">モジュールを使用するには、以下のようにする必要があります。</target>
        </trans-unit>
        <trans-unit id="dd4bd0185af39ed243608e8976fc475a01dc61d4" translate="yes" xml:space="preserve">
          <source>To use this expiration policy, the user would say</source>
          <target state="translated">この有効期限ポリシーを使用するには、ユーザーは次のように言います。</target>
        </trans-unit>
        <trans-unit id="538ca1c3044001d3cfa088cc4be7d0f4954981d6" translate="yes" xml:space="preserve">
          <source>To use this method you must have the Digest::MD5 or the MD5 module installed, otherwise this method will return</source>
          <target state="translated">このメソッドを使用するには、Digest::MD5 または MD5 モジュールがインストールされている必要があります。</target>
        </trans-unit>
        <trans-unit id="b3ee11508a4f000324b572266622a1fcc5b08715" translate="yes" xml:space="preserve">
          <source>To use this performance boost, set the current directory via</source>
          <target state="translated">このパフォーマンスの向上を利用するには、カレントディレクトリを</target>
        </trans-unit>
        <trans-unit id="acb718902c4afb0dc31c479abac33d68d277ca9d" translate="yes" xml:space="preserve">
          <source>To warn with a simple string message, the &lt;a href=&quot;#warn&quot;&gt;&quot;warn&quot;&lt;/a&gt; function may be more convenient.</source>
          <target state="translated">単純な文字列メッセージで警告するには、&lt;a href=&quot;#warn&quot;&gt;「警告」&lt;/a&gt;機能の方が便利な場合があります。</target>
        </trans-unit>
        <trans-unit id="38c026c273aff885d8062765e295cb0676868f0f" translate="yes" xml:space="preserve">
          <source>To warn with a simple string message, the &lt;a href=&quot;#warn&quot;&gt;warn&lt;/a&gt; function may be more convenient.</source>
          <target state="translated">単純な文字列メッセージで&lt;a href=&quot;#warn&quot;&gt;警告&lt;/a&gt;するには、関数warnの方が便利な場合があります。</target>
        </trans-unit>
        <trans-unit id="be15e0c4892f05af6b92d2d4a6be1a0a5f9a6dcd" translate="yes" xml:space="preserve">
          <source>To watch the tail of a dynamically growing logfile, (from the command line):</source>
          <target state="translated">動的に成長するログファイルの末尾を見るには、(コマンドラインから)</target>
        </trans-unit>
        <trans-unit id="a70297b48e7206cae4fcb0090dd44f6d0f3207a8" translate="yes" xml:space="preserve">
          <source>To work around this bug, surround the code with a second set of braces. This creates an inner block that defeats the &lt;code&gt;MULTICALL&lt;/code&gt; logic, and does get fresh SVs allocated each time:</source>
          <target state="translated">このバグを回避するには、コードを中括弧の2番目のセットで囲みます。これにより、 &lt;code&gt;MULTICALL&lt;/code&gt; ロジックを無効にする内部ブロックが作成され、毎回新しいSVが割り当てられます。</target>
        </trans-unit>
        <trans-unit id="df77a0e9f9993c56d24066721ca0f8c51a0345d4" translate="yes" xml:space="preserve">
          <source>To work around this, set environment variables as part of the</source>
          <target state="translated">これを回避するには、環境変数を</target>
        </trans-unit>
        <trans-unit id="67bc56a45c2b844733bf04f643db3f4d6359ddb1" translate="yes" xml:space="preserve">
          <source>To work with only alphanumeric sequences (including underscores), you might consider</source>
          <target state="translated">英数字のシーケンス(アンダースコアを含む)のみを扱うには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="737fcabd51bb1faacb7059e47b96e0c587be8c5f" translate="yes" xml:space="preserve">
          <source>To write a test for your new (and probably not even done) module, create a new file called</source>
          <target state="translated">新しい (おそらく完成していない)モジュールのテストを書くには、新しい</target>
        </trans-unit>
        <trans-unit id="02bfda7919e7b9ec9d9ea9a01639287be236928c" translate="yes" xml:space="preserve">
          <source>To write platform-independent code, you must use &lt;code&gt;\N{&lt;i&gt;NAME&lt;/i&gt;}&lt;/code&gt; instead, like &lt;code&gt;\N{ESCAPE}&lt;/code&gt; or &lt;code&gt;\N{U+001B}&lt;/code&gt; , see &lt;a href=&quot;charnames&quot;&gt;charnames&lt;/a&gt;.</source>
          <target state="translated">書き込みプラットフォームに依存しないコードに、あなたが使用する必要があります &lt;code&gt;\N{&lt;i&gt;NAME&lt;/i&gt;}&lt;/code&gt; の代わりに、のような &lt;code&gt;\N{ESCAPE}&lt;/code&gt; または &lt;code&gt;\N{U+001B}&lt;/code&gt; 参照してください&lt;a href=&quot;charnames&quot;&gt;charnamesを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="4c88d87a2cc45115c74eeb5e575d4bb12e18a967" translate="yes" xml:space="preserve">
          <source>To write platform-independent code, you must use &lt;code&gt;\N{&lt;i&gt;NAME&lt;/i&gt;}&lt;/code&gt; instead, like &lt;code&gt;\N{ESCAPE}&lt;/code&gt; or &lt;code&gt;\N{U+001B}&lt;/code&gt;, see &lt;a href=&quot;charnames&quot;&gt;charnames&lt;/a&gt;.</source>
          <target state="translated">書き込みプラットフォームに依存しないコードに、あなたが使用する必要があります &lt;code&gt;\N{&lt;i&gt;NAME&lt;/i&gt;}&lt;/code&gt; の代わりに、のような &lt;code&gt;\N{ESCAPE}&lt;/code&gt; または &lt;code&gt;\N{U+001B}&lt;/code&gt; 参照してください&lt;a href=&quot;charnames&quot;&gt;charnamesを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="32379df686c78a3422056dcfb4c9b1da18747d64" translate="yes" xml:space="preserve">
          <source>To yield a usable Perl variable, characters that are not part of the syntax for variables are translated to underscores. For example, &lt;code&gt;--fpp-struct-&lt;a href=&quot;../functions/return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; will set the variable &lt;code&gt;$opt_fpp_struct_return&lt;/code&gt; . Note that this variable resides in the namespace of the calling program, not necessarily &lt;code&gt;main&lt;/code&gt; . For example:</source>
          <target state="translated">使用可能なPerl変数を生成するために、変数の構文の一部ではない文字は下線に変換されます。たとえば、-- &lt;code&gt;--fpp-struct-&lt;a href=&quot;../functions/return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; は変数 &lt;code&gt;$opt_fpp_struct_return&lt;/code&gt; を設定します。この変数は、必ずしも &lt;code&gt;main&lt;/code&gt; ではなく、呼び出しプログラムの名前空間にあることに注意してください。例えば：</target>
        </trans-unit>
        <trans-unit id="a049b042bf8f7cb4d234fc89dd589815ab07f9de" translate="yes" xml:space="preserve">
          <source>To yield a usable Perl variable, characters that are not part of the syntax for variables are translated to underscores. For example, &lt;code&gt;--fpp-struct-return&lt;/code&gt; will set the variable &lt;code&gt;$opt_fpp_struct_return&lt;/code&gt;. Note that this variable resides in the namespace of the calling program, not necessarily &lt;code&gt;main&lt;/code&gt;. For example:</source>
          <target state="translated">使用可能なPerl変数を生成するために、変数の構文の一部ではない文字はアンダースコアに変換されます。たとえば、 &lt;code&gt;--fpp-struct-return&lt;/code&gt; は、変数 &lt;code&gt;$opt_fpp_struct_return&lt;/code&gt; を設定します。この変数は、必ずしも &lt;code&gt;main&lt;/code&gt; ではなく、呼び出し側プログラムの名前空間に存在することに注意してください。例えば：</target>
        </trans-unit>
        <trans-unit id="af2824d2ae2117d9a03cba6d58d8adc173a02e61" translate="yes" xml:space="preserve">
          <source>To%s: illegal mapping '%s'</source>
          <target state="translated">To%s:不正なマッピング '%s' です。</target>
        </trans-unit>
        <trans-unit id="33224443be18843a7174975c46578d74787bc749" translate="yes" xml:space="preserve">
          <source>Tobias Brox, tobiasb@tobiasb.funcom.com</source>
          <target state="translated">トビアス・ブロックス、tobiasb@tobiasb.funcom.com</target>
        </trans-unit>
        <trans-unit id="57a4f395602ffbc6392e66ae2e2c5974770b3c0a" translate="yes" xml:space="preserve">
          <source>Todo tests</source>
          <target state="translated">すべてのテスト</target>
        </trans-unit>
        <trans-unit id="ec7a57e5883d57c428d8e15819e5060eeed56435" translate="yes" xml:space="preserve">
          <source>Together, these categories go a long way towards being able to customize a single program to run in many different locations. But there are deficiencies, so keep reading.</source>
          <target state="translated">これらのカテゴリを合わせると、1つのプログラムをカスタマイズして様々な場所で動作させることができるようになります。しかし、欠点もありますので、読み進めてください。</target>
        </trans-unit>
        <trans-unit id="6f1eb05b47fbf56bdd9586b2ff6beeffab4ce59f" translate="yes" xml:space="preserve">
          <source>Together, these two features are intended to replace the historical &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; function, which has (at least) two bugs in it, that cannot easily be fixed without breaking existing programs:</source>
          <target state="translated">これらの2つの機能は一緒になって、（少なくとも）2つのバグがあり、既存のプログラムを壊さなければ簡単に修正できない、歴史的な &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; 関数を置き換えることを目的としています。</target>
        </trans-unit>
        <trans-unit id="4ce897ee72e1aab169ad26b4888dec08e507c975" translate="yes" xml:space="preserve">
          <source>Together, these two features are intended to replace the legacy string &lt;code&gt;eval&lt;/code&gt; function, which behaves problematically in some instances. They are available starting with Perl 5.16, and are enabled by default by a &lt;code&gt;use 5.16&lt;/code&gt; or higher declaration.</source>
          <target state="translated">これら2つの機能を組み合わせることで、場合によっては問題のある動作をする従来の文字列 &lt;code&gt;eval&lt;/code&gt; 関数を置き換えることができます。これらはPerl5.16以降で使用可能であり、 &lt;code&gt;use 5.16&lt;/code&gt; 以降の宣言を使用するとデフォルトで有効になります。</target>
        </trans-unit>
        <trans-unit id="751e44ad1c63d964b7e27098dbfa3f7faca67a2f" translate="yes" xml:space="preserve">
          <source>Toggle buffered status.</source>
          <target state="translated">バッファ状態をトグルします。</target>
        </trans-unit>
        <trans-unit id="5379fd6502d08f80951bb93415834c8443e36cd5" translate="yes" xml:space="preserve">
          <source>Toggle trace mode (see also the &lt;code&gt;AutoTrace&lt;/code&gt; option). Optional argument is the maximum number of levels to trace below the current one; anything deeper than that will be silent.</source>
          <target state="translated">トレースモードを切り替えます（ &lt;code&gt;AutoTrace&lt;/code&gt; オプションも参照してください）。オプションの引数は、現在のレベルの下でトレースするレベルの最大数です。それより深いものは沈黙します。</target>
        </trans-unit>
        <trans-unit id="f422da5828ccca294dcf6d07ee5efb74761f28a1" translate="yes" xml:space="preserve">
          <source>Tokens from Pod::Simple::PullParser</source>
          <target state="translated">Pod::Simple::PullParserからのトークン</target>
        </trans-unit>
        <trans-unit id="e3f27977b0cf7c5ef1db648369c2aa76bc8a767d" translate="yes" xml:space="preserve">
          <source>Tokens of an RPN expression may be separated by whitespace, but such separation is usually not required. It is required only where unseparated tokens would look like a longer token. For example, &lt;code&gt;12 34 +&lt;/code&gt; can be written as &lt;code&gt;12 34+&lt;/code&gt;, but not as &lt;code&gt;1234 +&lt;/code&gt;.</source>
          <target state="translated">RPN式のトークンは空白で区切ることができますが、通常、このような区切りは必要ありません。分離されていないトークンがより長いトークンのように見える場合にのみ必要です。たとえば、 &lt;code&gt;12 34 +&lt;/code&gt; &lt;code&gt;12 34+&lt;/code&gt; と書くことができますが、 &lt;code&gt;1234 +&lt;/code&gt; と書くことはできません。</target>
        </trans-unit>
        <trans-unit id="685cbbd2434336a1c0d592cb5e469ec23061ee59" translate="yes" xml:space="preserve">
          <source>Tom Christiansen</source>
          <target state="translated">トム・クリスチャンセン</target>
        </trans-unit>
        <trans-unit id="8be2aa955349ba9da124a5ab00db7e6f88ee861a" translate="yes" xml:space="preserve">
          <source>Tom Christiansen &amp;lt;</source>
          <target state="translated">トム・クリスチャンセン&amp;lt;</target>
        </trans-unit>
        <trans-unit id="5ca9f204e050f14afeeca056eec19f3529541293" translate="yes" xml:space="preserve">
          <source>Tom Christiansen &amp;lt;tchrist@perl.com&amp;gt; wrote this, with occasional kibbitzing from Larry Wall and Jeffrey Friedl in the background.</source>
          <target state="translated">Tom Christiansen &amp;lt;tchrist@perl.com&amp;gt;がこれを書いており、Larry WallとJeffrey Friedlが時折キビッツをバックグラウンドにしていた。</target>
        </trans-unit>
        <trans-unit id="8e134c4a6e79e76b0db622556fcf6a08eb055742" translate="yes" xml:space="preserve">
          <source>Tom Christiansen wrote the original perlfaq then expanded it with the help of Nat Torkington. brian d foy substantially edited and expanded the perlfaq. perlfaq-workers and others have also supplied feedback, patches and corrections over the years.</source>
          <target state="translated">Tom Christiansen氏がオリジナルのperlfaqを書き、Nat Torkington氏の助けを借りて拡張しました。 brian d foy氏は実質的にperlfaqを編集し、拡張しました。</target>
        </trans-unit>
        <trans-unit id="13f0322dc66b8435d53d03e97ab3bdb9a5e08c67" translate="yes" xml:space="preserve">
          <source>Tom Christiansen wrote the original version of this document. brian d foy &lt;code&gt;&amp;lt;bdfoy@cpan.org&amp;gt;&lt;/code&gt; wrote this version. See the individual perlfaq documents for additional copyright information.</source>
          <target state="translated">トム・クリスチャンセンがこの文書のオリジナル版を書きました。brian d foy &lt;code&gt;&amp;lt;bdfoy@cpan.org&amp;gt;&lt;/code&gt; がこのバージョンを作成しました。追加の著作権情報については、個々のperlfaq文書を参照してください。</target>
        </trans-unit>
        <trans-unit id="594631f752605ca51961fa701a3edb58acb263cd" translate="yes" xml:space="preserve">
          <source>Tom Christiansen, &amp;lt;tchrist@perl.com&amp;gt;.</source>
          <target state="translated">Tom Christiansen、&amp;lt;tchrist@perl.com&amp;gt;。</target>
        </trans-unit>
        <trans-unit id="95a03ceecd01437e5e0609dbfa8dc64983a0ce69" translate="yes" xml:space="preserve">
          <source>Tom Christiansen, with occasional vestiges of Larry Wall's original version and suggestions from the Perl Porters.</source>
          <target state="translated">Tom Christiansen、時折ラリー・ウォールのオリジナル版の名残とPerl Portersからの提案があります。</target>
        </trans-unit>
        <trans-unit id="86f2b4b3ae91b418a1683a4b91e72d3ad71dd15f" translate="yes" xml:space="preserve">
          <source>Tom Hukins &amp;lt;tom@eborcom.com&amp;gt;</source>
          <target state="translated">トム・ヒューキンス&amp;lt;tom@eborcom.com&amp;gt;</target>
        </trans-unit>
        <trans-unit id="e834545bca77fe29ecc8dac8de115465b8dcd679" translate="yes" xml:space="preserve">
          <source>Tom Lutz &amp;lt;</source>
          <target state="translated">トム・ラッツ&amp;lt;</target>
        </trans-unit>
        <trans-unit id="476ccb2f91007a71136d530d51755067de803643" translate="yes" xml:space="preserve">
          <source>Tom Phoenix, &amp;lt;</source>
          <target state="translated">トムフェニックス、&amp;lt;</target>
        </trans-unit>
        <trans-unit id="0d331f4232946333d8f1366dd1d47c9f81d210b2" translate="yes" xml:space="preserve">
          <source>Tomas Doran &amp;lt;bobtfish@bobtfish.net&amp;gt;</source>
          <target state="translated">Tomas Doran &amp;lt;bobtfish@bobtfish.net&amp;gt;</target>
        </trans-unit>
        <trans-unit id="28c9ef80202c4539b6ea96fa83f4e8656550b386" translate="yes" xml:space="preserve">
          <source>Tomohiro Hosaka &amp;lt;bokutin@bokut.in&amp;gt;</source>
          <target state="translated">保坂知宏&amp;lt;bokutin@bokut.in&amp;gt;</target>
        </trans-unit>
        <trans-unit id="793b4a701cfe0913d08894024037c7429f46b186" translate="yes" xml:space="preserve">
          <source>Tony Cook &amp;lt;tony@develop-help.com&amp;gt;</source>
          <target state="translated">トニークック&amp;lt;tony@develop-help.com&amp;gt;</target>
        </trans-unit>
        <trans-unit id="60b01674cdd852dec165a416e0496fa965e8b91a" translate="yes" xml:space="preserve">
          <source>Too deeply nested ()-groups</source>
          <target state="translated">入れ子になりすぎた()グループ</target>
        </trans-unit>
        <trans-unit id="1db6f1ae51bb58b9a4860785d43a21467f4cbb8c" translate="yes" xml:space="preserve">
          <source>Too few args to syscall</source>
          <target state="translated">システムコールする引数が少なすぎる</target>
        </trans-unit>
        <trans-unit id="2364f2f117108b7557a903b349dc899cf3b08e9e" translate="yes" xml:space="preserve">
          <source>Too few arguments for subroutine '%s'</source>
          <target state="translated">サブルーチン '%s' の引数が少なすぎます。</target>
        </trans-unit>
        <trans-unit id="ba42647932e0b5434947f286f404459ce1a76e83" translate="yes" xml:space="preserve">
          <source>Too few records will be retrieved.</source>
          <target state="translated">レコードが少なすぎると検索されてしまいます。</target>
        </trans-unit>
        <trans-unit id="ff02d866660d5b53534c080f1fcb0457f7d00d24" translate="yes" xml:space="preserve">
          <source>Too late for &quot;-%s&quot; option</source>
          <target state="translated">s &quot;オプションの&quot;-%s &quot;では遅すぎる</target>
        </trans-unit>
        <trans-unit id="769c54b58dcbc8ae188a5471b5a9ac818add3700" translate="yes" xml:space="preserve">
          <source>Too late to run %s block</source>
          <target state="translated">遅すぎて%sブロックを実行するには</target>
        </trans-unit>
        <trans-unit id="b3e03f0741d093e7b4fe7029e12428aa7a386bc5" translate="yes" xml:space="preserve">
          <source>Too many ('s</source>
          <target state="translated">多すぎる('s)</target>
        </trans-unit>
        <trans-unit id="db44b7d3a550f69ac66850f32920ad09e8328651" translate="yes" xml:space="preserve">
          <source>Too many )'s</source>
          <target state="translated">多すぎる)の</target>
        </trans-unit>
        <trans-unit id="9155bcdc24c3728c4025b090f8ec51766e724176" translate="yes" xml:space="preserve">
          <source>Too many args to syscall</source>
          <target state="translated">システムコールする引数が多すぎる</target>
        </trans-unit>
        <trans-unit id="3f95368fd6442a537ee2dd900f3e1bb4d5350d08" translate="yes" xml:space="preserve">
          <source>Too many arguments for %s</source>
          <target state="translated">s の引数が多すぎます。</target>
        </trans-unit>
        <trans-unit id="e4091f54a0813795be4fd20124afb6c89bed7942" translate="yes" xml:space="preserve">
          <source>Too many arguments for subroutine '%s'</source>
          <target state="translated">サブルーチン '%s' の引数が多すぎます。</target>
        </trans-unit>
        <trans-unit id="ef15ae49ed8dd79937ceab5a3d6972af6ced0871" translate="yes" xml:space="preserve">
          <source>Too many nested open parens in regex; marked by &amp;lt;-- HERE in m/%s/</source>
          <target state="translated">正規表現にネストされたオープン親が多すぎます。&amp;lt;-ここにm /％s /でマーク</target>
        </trans-unit>
        <trans-unit id="0f85c6fbc6b17f4b329c823a126de114fb51f097" translate="yes" xml:space="preserve">
          <source>Too many will be retrieved.</source>
          <target state="translated">多すぎると回収されてしまいます。</target>
        </trans-unit>
        <trans-unit id="4fa8cc860c52b268dc6a3adcde7305e9415db5bb" translate="yes" xml:space="preserve">
          <source>Tools</source>
          <target state="translated">Tools</target>
        </trans-unit>
        <trans-unit id="2f4169d30e0802a9d8a3d39c5549f0963dd393e1" translate="yes" xml:space="preserve">
          <source>Tools &amp;amp; SDK</source>
          <target state="translated">ツールとSDK</target>
        </trans-unit>
        <trans-unit id="2d26e7b7bd96209071fc6ad7cab1a93d4b45e8bf" translate="yes" xml:space="preserve">
          <source>Tools to compile Perl modules</source>
          <target state="translated">Perl モジュールをコンパイルするためのツール</target>
        </trans-unit>
        <trans-unit id="f0ad973010edc9e98f2f60aa9dbfdb7b904996da" translate="yes" xml:space="preserve">
          <source>Tools used by Test2 and friends.</source>
          <target state="translated">Test2とその友人が使っているツール。</target>
        </trans-unit>
        <trans-unit id="a00a8f35172e2849241ce00e52e7b7a9a0047d25" translate="yes" xml:space="preserve">
          <source>Top of Form Processing</source>
          <target state="translated">フォーム処理のトップ</target>
        </trans-unit>
        <trans-unit id="ee80479b0fa9a2d2efdf0ff5851a9a2f37c4056d" translate="yes" xml:space="preserve">
          <source>Top of form processing is handled automatically: if there is insufficient room on the current page for the formatted record, the page is advanced by writing a form feed and a special top-of-page format is used to format the new page header before the record is written. By default, the top-of-page format is the name of the filehandle with &quot;_TOP&quot; appended, or &quot;top&quot; in the current package if the former does not exist. This would be a problem with autovivified filehandles, but it may be dynamically set to the format of your choice by assigning the name to the &lt;code&gt;$^&lt;/code&gt; variable while that filehandle is selected. The number of lines remaining on the current page is in variable &lt;code&gt;$-&lt;/code&gt; , which can be set to &lt;code&gt;0&lt;/code&gt; to force a new page.</source>
          <target state="translated">トップフォーム処理は自動的に処理されます。現在のページにフォーマット済みレコード用の十分なスペースがない場合、フォームフィードを書き込むことによってページが進められ、特別なトップオブページフォーマットが新しいページヘッダーのフォーマットに使用されます。レコードが書き込まれます。デフォルトでは、ページの先頭の形式は、「_ TOP」が追加されたファイルハンドルの名前、または前者が存在しない場合は現在のパッケージの「top」の名前です。これはautovivifiedファイルハンドルの問題ですが、そのファイルハンドルが選択されているときに &lt;code&gt;$^&lt;/code&gt; 変数に名前を割り当てることにより、選択した形式に動的に設定できます。現在のページに残っている行数は変数 &lt;code&gt;$-&lt;/code&gt; にあり、 &lt;code&gt;0&lt;/code&gt; に設定して新しいページを強制できます。</target>
        </trans-unit>
        <trans-unit id="f10b9e66ec3cf51c0d1a7e3d006886e22937c14a" translate="yes" xml:space="preserve">
          <source>Top of form processing is handled automatically: if there is insufficient room on the current page for the formatted record, the page is advanced by writing a form feed and a special top-of-page format is used to format the new page header before the record is written. By default, the top-of-page format is the name of the filehandle with &lt;code&gt;_TOP&lt;/code&gt; appended, or &lt;code&gt;top&lt;/code&gt; in the current package if the former does not exist. This would be a problem with autovivified filehandles, but it may be dynamically set to the format of your choice by assigning the name to the &lt;a href=&quot;perlvar#%24%5E&quot;&gt;&lt;code&gt;$^&lt;/code&gt;&lt;/a&gt; variable while that filehandle is selected. The number of lines remaining on the current page is in variable &lt;a href=&quot;perlvar#%24-&quot;&gt;&lt;code&gt;$-&lt;/code&gt;&lt;/a&gt;, which can be set to &lt;code&gt;0&lt;/code&gt; to force a new page.</source>
          <target state="translated">フォームの先頭の処理は自動的に処理されます。現在のページに書式設定されたレコード用のスペースが不足している場合は、フォームフィードを書き込んでページを進め、特別なページの先頭形式を使用して新しいページヘッダーをフォーマットします。レコードが書き込まれます。デフォルトでは、ページの先頭の形式は、 &lt;code&gt;_TOP&lt;/code&gt; が追加されたファイルハンドルの名前、または前者が存在しない場合は現在のパッケージの &lt;code&gt;top&lt;/code&gt; です。これは、自動化されたファイルハンドルでは問題になりますが、ファイルハンドルが選択されているときに&lt;a href=&quot;perlvar#%24%5E&quot;&gt; &lt;code&gt;$^&lt;/code&gt; &lt;/a&gt;変数に名前を割り当てることで、選択した形式に動的に設定される場合があります。現在のページに残っている行数は変数&lt;a href=&quot;perlvar#%24-&quot;&gt; &lt;code&gt;$-&lt;/code&gt; &lt;/a&gt;にあり、 &lt;code&gt;0&lt;/code&gt; に設定して新しいページを強制することができます。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
