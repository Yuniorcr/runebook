<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="perl">
    <body>
      <group id="perl">
        <trans-unit id="392b98f93ad8202dded2a8fa791f059571fc8d3a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;{te} : Telugu&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;{te}：テルグ語&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="71cd04c16967aeca2b990f7a59d5d30c75c531c8" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;{tg} : Tajik&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;{tg}：タジク&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="ba4795139fe436d86b04e95fecf6f5c90917f78d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;{th} : Thai&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;{th}：タイ語&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="2f1e4bf338d6758a7de2df7e2b0239fd628b2579" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;{tig} : Tigre&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;{tig}：ティグレ&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="0b4950231c870330ed33b418f676ea6d89eb91c0" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;{tiv} : Tiv&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;{tiv}：Tiv&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="f249d52c78efcc8c758f9b477ede8586e28f6889" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;{ti} : Tigrinya&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;{ti}：ティグリニア&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="9aa08d26481b7342582a7062b552daf7578e52e2" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;{tkl} : Tokelau&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;{tkl}：トケラウ&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="f04a879f29b5c8668f76f2c459b3eca248c94ece" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;{tk} : Turkmen&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;{tk}：トルクメン&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="4971d3a5d0ccd95c55986a67efee468cd4c962d0" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;{tli} : Tlingit&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;{tli}：トリンギット&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="10957b966d9bdaa20ad194bef5a1e945f421362d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;{tl} : Tagalog&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;{tl}：タガログ語&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="df25d49c680e84c49e59007f94bdd0d672eebf5c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;{tmh} : Tamashek&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;{tmh}：タマシェク&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="5cc04f65e0f41e6d474727c7d6c3319e0f498b41" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;{tn} : Tswana&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;{tn}：ツワナ語&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="f58466fa1701a8b45999736742f5eab996e78bfc" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;{tog} : Tonga (Nyasa)&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;{tog}：トンガ（ニャサ）&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="a762b8091de3f54a632fc4430fe431451892b680" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;{to} : Tonga (Tonga Islands)&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;{to}：トンガ（トンガ諸島）&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="f4899a93bd0bdde882ff356789d5a30827916adb" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;{tpi} : Tok Pisin&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;{tpi}：Tok Pisin&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="298444b14cbe920c923ff1ac6dabf1ae79464f4e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;{tr} : Turkish&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;{tr}：トルコ語&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="a6f3be7ea460ec5affc62cec721467ae543cb1c0" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;{tsi} : Tsimshian&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;{tsi}：チムシアン&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="ee848631733be7abd2d669ab1334428eefe5dad6" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;{ts} : Tsonga&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;{ts}：ツォンガ&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="86534ece0ad261662b793d795c3a597a2b5913fd" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;{tt} : Tatar&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;{tt}：タタール語&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="616f741c4ddbcb783635cbed5bb27662eacef4c2" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;{tum} : Tumbuka&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;{tum}：トゥンブカ&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="07227a15237a9832e1b5b33d7006360dcf5a0ed0" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;{tvl} : Tuvalu&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;{tvl}：ツバル&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="24504707edc67fefb0b39f91a946c3d9c89683a5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;{tw} : Twi&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;{tw}：Twi&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="47f28fe94e837c634676c214bc9748e591258030" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;{tyv} : Tuvinian&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;{tyv}：チュビアン語&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="c684c58927b18e190168e19fab0f5d8f8467921d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;{ty} : Tahitian&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;{ty}：タヒチアン&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="fc28e0de9cad09832164393d66ffa62eb16e9933" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;{udm} : Udmurt&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;{udm}：ウドムルト&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="18a50fbd079858fe15886c4520cab32f95976b73" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;{uga} : Ugaritic&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;{uga}：ウガリット&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="5cb1d8398d0925be51e3312e4965c45aa4bd573b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;{ug} : Uighur&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;{ug}：ウイグル語&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="75f9e292587cbd9b1f7f6a1398eede893683c055" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;{uk} : Ukrainian&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;{uk}：ウクライナ語&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="b1de43432c703dce25a2cfb87c5fa9734ed0b6cc" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;{umb} : Umbundu&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;{umb}：ウンブンドゥ&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="478c501fd450ee05a07236cb4f2df0a9231981d6" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;{und} : Undetermined&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;{und}：未定&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="cd63793d7259679e1cf9ce14affa8edf213609b7" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;{ur} : Urdu&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;{ur}：ウルドゥー語&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="36d8a80cb7fb86fbbeafb1b4fc2b45c6e6ba12ac" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;{uz} : Uzbek&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;{uz}：ウズベク語&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="e3331ac6546c6700d377ca986d52d8dac42f38b5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;{vai} : Vai&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;{vai}：ヴァイ&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="7f9c6e9f8900739284a6c73744530b3798f086c7" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;{ve} : Venda&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;{ve}：ヴェンダ&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="bed96a42cdd4c8bdd0933c95e69d9f6ec9cedfca" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;{vi} : Vietnamese&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;{vi}：ベトナム語&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="7a9bf1125e5f111161b809e673d5ec7d34049c7f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;{vot} : Votic&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;{vot}：Votic&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="f42cd4365ac2d0da0782d949195bcdfeb4e2c900" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;{vo} : Volapuk&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;{vo}：Volapuk&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="82a56695fb0a5eff93e062c1ab230fd9fb5b7b3e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;{wal} : Walamo&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;{wal}：ワラモ&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="4367523683ec5280176bbf66df442f7e01c761c8" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;{war} : Waray&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;{戦争}：ワライ&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="709812ce5915fe87c9ff5fc87d71ff0860ed5a6f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;{was} : Washo&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;{だった}：和商&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="3d1e4b83cd0fa8bc0b5cf2f320882a0f7aa637c9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;{wa} : Walloon&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;{wa}：ワロン&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="15a236decc8cd26e69755c1eb62a9acb6836f62d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;{wen} : Sorbian languages&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;{wen}：ソルビア語&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="28069e8f97ea000528873a9c4259a899b5fc2e43" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;{wo} : Wolof&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;{wo}：ウォロフ語&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="5404fdcf0b87ba3356d855bdf02b8fc8216c1756" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;{x-...} : Unregistered (Semi-Private Use)&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;{x -...}：未登録（セミプライベート使用）&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="0a89c8ef6ff4b1fa29b46b51f46a570a2b04d40a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;{xal} : Kalmyk&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;{xal}：カルミク&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="6eb25f1da10df9d06d3feb1bca73c6491e670ad4" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;{xh} : Xhosa&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;{xh}：コーサ語&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="4be7a8286795b777079f3e380062b65c46ce936a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;{yao} : Yao&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;{yao}：八尾&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="fc8d506ef98bd5b32ff2e37c2ebef25b23a8fe10" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;{yap} : Yapese&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;{yap}：ヤペセ&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="4f8148f610e7a3b4d574c76cc24b2346113eadfb" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;{yi} : Yiddish&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;{yi}：イディッシュ語&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="0b400574f8a008fda824965dca8cad935da2e7ca" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;{yo} : Yoruba&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;{yo}：ヨルバ&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="473abb45325d48c116d71bd913d8d555be7f4cfe" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;{za} : Zhuang&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;{za}：荘&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="cbbb90ed9a0f9b1a7a1e7eec3a54bbf61513bf48" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;{zen} : Zenaga&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;{zen}：Zenaga&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="87a62240c22ab4ab12105b6b53e5464ad6a5cfde" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;{zh} : Chinese&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;{zh}：中国語&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="b43dca2cbe4e37a5bb4ad637051dce5b82d09380" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;{znd} : Zande&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;{znd}：ザンデ&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="91e2c623510460287c2ccdc09f2e595c0d6deed9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;{zun} : Zuni&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;{zun}：ズニ&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="6d180522ae377a38c1075e0d39c98240fe35c552" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;{zu} : Zulu&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;{zu}：ズールー語&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="33bd8c8e2517263c028395659cece1a1631c55ee" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;{{ command &lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;{{コマンド &lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="5aeec52476d3387fac8ecf0ff3d152603ca2c981" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;|0&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;|0&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="0f712bd74a669165fc378376cf89b6c56058dacd" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;|1&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;|1&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="71b19d09de8d99d993bccbc46345780e318237b4" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;|2&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;|2&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="b4ffb48d05f4cfab829471d0411bed4087679bb4" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;|3&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;|3&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="05817e9b3f2c0f20e5804980061c94b1fc6738fa" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;|dbcmd &lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;|dbcmd &lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="d67e292cb103820a229dc79e5e040cf9164335ce" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;||dbcmd &lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;||dbcmd &lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="118542f44a06eb7833ff5c1fa640d12f7898aafc" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;~&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;~&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="13da3da7747dde794878f284e0c7fc2aec9d614a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;~user&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;~user&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="799d85edb61f1bc77ff31e5a9b738cdee3f7f2db" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;!~&lt;/code&gt; determines to which variable the regex is applied, and negates the result of the match; it returns false if the match succeeds, and true if it fails.</source>
          <target state="translated">&lt;code&gt;!~&lt;/code&gt; は、正規表現が適用される変数を決定し、一致の結果を否定します。一致した場合はfalseを返し、失敗した場合はtrueを返します。</target>
        </trans-unit>
        <trans-unit id="73035c0b4075c864c347d2b489028060ac5810fa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&quot;&quot;&lt;/code&gt;, &lt;code&gt;``&lt;/code&gt;, &lt;code&gt;qq//&lt;/code&gt;, &lt;code&gt;qx//&lt;/code&gt;, &lt;code&gt;&amp;lt;file*glob&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;&amp;lt;&quot;EOF&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&quot;&quot;&lt;/code&gt;, &lt;code&gt;``&lt;/code&gt;, &lt;code&gt;qq//&lt;/code&gt;, &lt;code&gt;qx//&lt;/code&gt;, &lt;code&gt;&amp;lt;file*glob&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;&amp;lt;&quot;EOF&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2dfaf4547bff37a003f11c0f2f0f08d29f5e3984" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&quot;+&quot;&lt;/code&gt; for union, &lt;code&gt;&quot;-&quot;&lt;/code&gt; for removal (set-difference), &lt;code&gt;&quot;&amp;amp;&quot;&lt;/code&gt; for intersection</source>
          <target state="translated">&lt;code&gt;&quot;+&quot;&lt;/code&gt; 労働組合のために、 &lt;code&gt;&quot;-&quot;&lt;/code&gt; 除去（集合差）のために、 &lt;code&gt;&quot;&amp;amp;&quot;&lt;/code&gt; 交差点のために</target>
        </trans-unit>
        <trans-unit id="d0fec0837aa14b0d1ab2c03194bdc99159d93d94" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&quot;++&quot;&lt;/code&gt; and &lt;code&gt;&quot;--&quot;&lt;/code&gt; work as in C. That is, if placed before a variable, they increment or decrement the variable by one before returning the value, and if placed after, increment or decrement after returning the value.</source>
          <target state="translated">&lt;code&gt;&quot;++&quot;&lt;/code&gt; と &lt;code&gt;&quot;--&quot;&lt;/code&gt; はCと同じように機能します。つまり、変数の前に置かれた場合、値を返す前に変数を1つインクリメントまたはデクリメントし、その後に置かれた場合、値を返した後にインクリメントまたはデクリメントします。</target>
        </trans-unit>
        <trans-unit id="d9260c74ad4f9b80c1823708facbbd192849b359" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&quot;:loose&quot;&lt;/code&gt; has no effect with these. Input names must match exactly, using &lt;code&gt;&quot;:full&quot;&lt;/code&gt; rules.</source>
          <target state="translated">&lt;code&gt;&quot;:loose&quot;&lt;/code&gt; はこれらには影響しません。入力名は &lt;code&gt;&quot;:full&quot;&lt;/code&gt; ルールを使用して正確に一致する必要があります。</target>
        </trans-unit>
        <trans-unit id="eb5bfca7502439fc864589ad6e001f6ba12358cc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&quot;=&quot;&lt;/code&gt; is the ordinary assignment operator.</source>
          <target state="translated">&lt;code&gt;&quot;=&quot;&lt;/code&gt; は通常の代入演算子です。</target>
        </trans-unit>
        <trans-unit id="2e4b258c683c13a75e42267c5f739d9212b41a45" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&quot;LATIN CAPITAL LETTER E WITH ACUTE&quot;&lt;/code&gt; is called a &quot;pre-composed&quot; character, and its equivalence with the &quot;E&quot; and the &quot;COMBINING ACCENT&quot; sequence is called canonical equivalence. All pre-composed characters are said to have a decomposition (into the equivalent sequence), and the decomposition type is also called canonical. A string may be comprised as much as possible of precomposed characters, or it may be comprised of entirely decomposed characters. Unicode calls these respectively, &quot;Normalization Form Composed&quot; (NFC) and &quot;Normalization Form Decomposed&quot;. The &lt;code&gt;&lt;a href=&quot;Unicode::Normalize&quot;&gt;Unicode::Normalize&lt;/a&gt;&lt;/code&gt; module contains functions that convert between the two. A string may also have both composed characters and decomposed characters; this module can be used to make it all one or the other.</source>
          <target state="translated">&lt;code&gt;&quot;LATIN CAPITAL LETTER E WITH ACUTE&quot;&lt;/code&gt; は「合成済み」文字と呼ばれ、「E」および「COMBININGACCENT」シーケンスとの同等性は正規同等性と呼ばれます。合成済み文字はすべて（同等のシーケンスに）分解されていると言われ、分解タイプは正規とも呼ばれます。文字列は、可能な限り合成済み文字で構成することも、完全に分解した文字で構成することもできます。 Unicodeは、これらをそれぞれ「正規化フォーム構成」（NFC）および「正規化フォーム分解」と呼びます。 &lt;code&gt;&lt;a href=&quot;Unicode::Normalize&quot;&gt;Unicode::Normalize&lt;/a&gt;&lt;/code&gt; モジュールには2つの間の変換機能が含まれています。文字列には、合成文字と分解文字の両方が含まれる場合もあります。このモジュールを使用して、すべてをいずれかにすることができます。</target>
        </trans-unit>
        <trans-unit id="c0c39ca979109e5646ce99ce3fe80c8c04a04dff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&quot;LATIN CAPITAL LETTER E WITH ACUTE&quot;&lt;/code&gt; is called a &quot;pre-composed&quot; character, and its equivalence with the &quot;E&quot; and the &quot;COMBINING ACCENT&quot; sequence is called canonical equivalence. All pre-composed characters are said to have a decomposition (into the equivalent sequence), and the decomposition type is also called canonical. A string may be comprised as much as possible of precomposed characters, or it may be comprised of entirely decomposed characters. Unicode calls these respectively, &quot;Normalization Form Composed&quot; (NFC) and &quot;Normalization Form Decomposed&quot;. The &lt;code&gt;&lt;a href=&quot;unicode/normalize&quot;&gt;Unicode::Normalize&lt;/a&gt;&lt;/code&gt; module contains functions that convert between the two. A string may also have both composed characters and decomposed characters; this module can be used to make it all one or the other.</source>
          <target state="translated">&lt;code&gt;&quot;LATIN CAPITAL LETTER E WITH ACUTE&quot;&lt;/code&gt; は「事前合成」文字と呼ばれ、「E」および「複合アクセント」シーケンスとの同等性は、正規同等性と呼ばれます。すべての事前構成文字は（同等のシーケンスへの）分解があると言われ、分解タイプは正規とも呼ばれます。文字列は、できる限り事前構成された文字で構成することも、完全に分解された文字で構成することもできます。 Unicodeでは、これらをそれぞれ「正規化フォーム構成」（NFC）および「正規化フォーム分解」と呼びます。 &lt;code&gt;&lt;a href=&quot;unicode/normalize&quot;&gt;Unicode::Normalize&lt;/a&gt;&lt;/code&gt; モジュールには2つの間の変換機能が含まれています。文字列には、合成文字と分解文字の両方が含まれる場合もあります。このモジュールを使用して、すべてを1つまたは他のモジュールにすることができます。</target>
        </trans-unit>
        <trans-unit id="8c181c2f3dc4bbb4607828179494a1bbead07460" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&quot;console&quot;&lt;/code&gt; - send messages directly to the console, as for the &lt;code&gt;&quot;cons&quot;&lt;/code&gt; option of &lt;code&gt;openlog()&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;&quot;console&quot;&lt;/code&gt; &lt;code&gt;openlog()&lt;/code&gt; &lt;code&gt;&quot;cons&quot;&lt;/code&gt; オプションと同様に、メッセージをコンソールに直接送信します。</target>
        </trans-unit>
        <trans-unit id="eaf7c23c66bee1bd9366202b5b44e30257ab3528" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&quot;console&quot;&lt;/code&gt; - send messages directly to the console, as for the &lt;code&gt;&quot;cons&quot;&lt;/code&gt; option of &lt;code&gt;openlog()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;console&quot;&lt;/code&gt; &lt;code&gt;openlog()&lt;/code&gt; &lt;code&gt;&quot;cons&quot;&lt;/code&gt; オプションと同様に、メッセージをコンソールに直接送信します。</target>
        </trans-unit>
        <trans-unit id="bb965f90f9de0978253a988f2f4f0932e46f5411" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&quot;eventlog&quot;&lt;/code&gt; - send messages to the Win32 events logger (Win32 only; added in &lt;code&gt;Sys::Syslog&lt;/code&gt; 0.19).</source>
          <target state="translated">&lt;code&gt;&quot;eventlog&quot;&lt;/code&gt; -Win32イベントロガーにメッセージを送信します（Win32のみ &lt;code&gt;Sys::Syslog&lt;/code&gt; 0.19で追加）。</target>
        </trans-unit>
        <trans-unit id="6aa9016bca6620d5e5fb835b2efdb6c314c4781b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&quot;inet&quot;&lt;/code&gt; - connect to an INET socket, either TCP or UDP, tried in that order. See also the &lt;code&gt;host&lt;/code&gt; , &lt;code&gt;port&lt;/code&gt; and &lt;code&gt;timeout&lt;/code&gt; options.</source>
          <target state="translated">&lt;code&gt;&quot;inet&quot;&lt;/code&gt; -TCPまたはUDPのいずれかのINETソケットに接続し、この順序で試行します。 &lt;code&gt;host&lt;/code&gt; 、 &lt;code&gt;port&lt;/code&gt; 、および &lt;code&gt;timeout&lt;/code&gt; オプションも参照してください。</target>
        </trans-unit>
        <trans-unit id="d5134cd73a4d69b5e7d80469c857c58feb4b0ede" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&quot;inet&quot;&lt;/code&gt; - connect to an INET socket, either TCP or UDP, tried in that order. See also the &lt;code&gt;host&lt;/code&gt;, &lt;code&gt;port&lt;/code&gt; and &lt;code&gt;timeout&lt;/code&gt; options.</source>
          <target state="translated">&lt;code&gt;&quot;inet&quot;&lt;/code&gt; -TCPまたはUDPのいずれかのINETソケットに接続し、この順序で試行します。 &lt;code&gt;host&lt;/code&gt; 、 &lt;code&gt;port&lt;/code&gt; 、 &lt;code&gt;timeout&lt;/code&gt; オプションも参照してください。</target>
        </trans-unit>
        <trans-unit id="61e15b1216d884d8fa2746439849ef216ad17505" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&quot;lt&quot;&lt;/code&gt; , &lt;code&gt;&quot;le&quot;&lt;/code&gt; , &lt;code&gt;&quot;ge&quot;&lt;/code&gt; , &lt;code&gt;&quot;gt&quot;&lt;/code&gt; and &lt;code&gt;&quot;cmp&quot;&lt;/code&gt; use the collation (sort) order specified by the current &lt;code&gt;LC_COLLATE&lt;/code&gt; locale if a &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;
locale&lt;/code&gt; form that includes collation is in effect. See &lt;a href=&quot;perllocale&quot;&gt;perllocale&lt;/a&gt;. Do not mix these with Unicode, only use them with legacy 8-bit locale encodings. The standard &lt;code&gt;&lt;a href=&quot;unicode/collate&quot;&gt;Unicode::Collate&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;unicode/collate/locale&quot;&gt;Unicode::Collate::Locale&lt;/a&gt;&lt;/code&gt; modules offer much more powerful solutions to collation issues.</source>
          <target state="translated">&lt;code&gt;&quot;lt&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;le&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;ge&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;gt&quot;&lt;/code&gt; 、および &lt;code&gt;&quot;cmp&quot;&lt;/code&gt; は、照合を含む &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; ロケールフォームが有効な場合、現在の &lt;code&gt;LC_COLLATE&lt;/code&gt; ロケールで指定された照合（ソート）順序を使用します。&lt;a href=&quot;perllocale&quot;&gt;perllocaleを&lt;/a&gt;参照してください。これらをUnicodeと混在させないでください。レガシー8ビットロケールエンコーディングでのみ使用してください。標準の &lt;code&gt;&lt;a href=&quot;unicode/collate&quot;&gt;Unicode::Collate&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;unicode/collate/locale&quot;&gt;Unicode::Collate::Locale&lt;/a&gt;&lt;/code&gt; モジュールは、照合の問題に対してはるかに強力なソリューションを提供します。</target>
        </trans-unit>
        <trans-unit id="2a32351c457af1893b2283d973afbd14556ef936" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&quot;lt&quot;&lt;/code&gt;, &lt;code&gt;&quot;le&quot;&lt;/code&gt;, &lt;code&gt;&quot;ge&quot;&lt;/code&gt;, &lt;code&gt;&quot;gt&quot;&lt;/code&gt; and &lt;code&gt;&quot;cmp&quot;&lt;/code&gt; use the collation (sort) order specified by the current &lt;code&gt;LC_COLLATE&lt;/code&gt; locale if a &lt;code&gt;use locale&lt;/code&gt; form that includes collation is in effect. See &lt;a href=&quot;perllocale&quot;&gt;perllocale&lt;/a&gt;. Do not mix these with Unicode, only use them with legacy 8-bit locale encodings. The standard &lt;code&gt;&lt;a href=&quot;Unicode::Collate&quot;&gt;Unicode::Collate&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;Unicode::Collate::Locale&quot;&gt;Unicode::Collate::Locale&lt;/a&gt;&lt;/code&gt; modules offer much more powerful solutions to collation issues.</source>
          <target state="translated">&lt;code&gt;&quot;lt&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;le&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;ge&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;gt&quot;&lt;/code&gt; 、および &lt;code&gt;&quot;cmp&quot;&lt;/code&gt; は、照合を含む &lt;code&gt;use locale&lt;/code&gt; フォームが有効な場合、現在の &lt;code&gt;LC_COLLATE&lt;/code&gt; ロケールで指定された照合（ソート）順序を使用します。&lt;a href=&quot;perllocale&quot;&gt;perllocaleを&lt;/a&gt;参照してください。これらをUnicodeと混合せず、従来の8ビットロケールエンコーディングでのみ使用してください。標準の &lt;code&gt;&lt;a href=&quot;Unicode::Collate&quot;&gt;Unicode::Collate&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;Unicode::Collate::Locale&quot;&gt;Unicode::Collate::Locale&lt;/a&gt;&lt;/code&gt; モジュールは、照合の問題に対してはるかに強力なソリューションを提供します。</target>
        </trans-unit>
        <trans-unit id="e6a044b5ace2fb89b86436761a290762f80d6875" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&quot;native&quot;&lt;/code&gt; - use the native C functions from your &lt;code&gt;syslog(3)&lt;/code&gt; library (added in &lt;code&gt;Sys::Syslog&lt;/code&gt; 0.15).</source>
          <target state="translated">&lt;code&gt;&quot;native&quot;&lt;/code&gt; &lt;code&gt;Sys::Syslog&lt;/code&gt; 0.15で追加された、 &lt;code&gt;syslog(3)&lt;/code&gt; ライブラリのネイティブC関数を使用します。</target>
        </trans-unit>
        <trans-unit id="ccc7dd40cbd7242d718f8a32d656b21f7d92ba93" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&quot;pipe&quot;&lt;/code&gt; - connect to the named pipe indicated by the &lt;code&gt;path&lt;/code&gt; option, or, if omitted, to the value returned by the &lt;code&gt;_PATH_LOG&lt;/code&gt; macro (if your system defines it), or</source>
          <target state="translated">&lt;code&gt;&quot;pipe&quot;&lt;/code&gt; - &lt;code&gt;path&lt;/code&gt; オプションで指定された名前付きパイプに接続するか、省略した場合は &lt;code&gt;_PATH_LOG&lt;/code&gt; マクロから返された値に接続します（システムで定義されている場合）。または</target>
        </trans-unit>
        <trans-unit id="91faae17ddaedf839164b79d6033346de1d6fe40" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&quot;r&quot;&lt;/code&gt; sets the &lt;code&gt;FILE_SHARE_READ&lt;/code&gt; bit which allows other processes to have read access to the file. &lt;code&gt;&quot;w&quot;&lt;/code&gt; sets the &lt;code&gt;FILE_SHARE_WRITE&lt;/code&gt; bit which allows other processes to have write access to the file. &lt;code&gt;&quot;d&quot;&lt;/code&gt; sets the &lt;code&gt;FILE_SHARE_DELETE&lt;/code&gt; bit which allows other processes to have delete access to the file [ignored under Windows 95].</source>
          <target state="translated">&lt;code&gt;&quot;r&quot;&lt;/code&gt; は、他のプロセスがファイルへの読み取りアクセスを許可する &lt;code&gt;FILE_SHARE_READ&lt;/code&gt; ビットを設定します。 &lt;code&gt;&quot;w&quot;&lt;/code&gt; は、他のプロセスがファイルへの書き込みアクセスを許可する &lt;code&gt;FILE_SHARE_WRITE&lt;/code&gt; ビットを設定します。 &lt;code&gt;&quot;d&quot;&lt;/code&gt; は、他のプロセスがファイルへの削除アクセスを許可する &lt;code&gt;FILE_SHARE_DELETE&lt;/code&gt; ビットを設定します[Windows95では無視されます]。</target>
        </trans-unit>
        <trans-unit id="36f2c9ef9fa3aab8d6a2f37b98f9a8292a7af5c7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&quot;stream&quot;&lt;/code&gt; - connect to the stream indicated by the &lt;code&gt;path&lt;/code&gt; option, or, if omitted, the value returned by the &lt;code&gt;_PATH_LOG&lt;/code&gt; macro (if your system defines it),</source>
          <target state="translated">&lt;code&gt;&quot;stream&quot;&lt;/code&gt; - &lt;code&gt;path&lt;/code&gt; オプションで指定されたストリームに接続するか、省略した場合は、 &lt;code&gt;_PATH_LOG&lt;/code&gt; マクロから返された値（システムで定義されている場合）に接続します。</target>
        </trans-unit>
        <trans-unit id="7e84cf31e4ac31c0250c764fcce9d445c648ba5e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&quot;tcp&quot;&lt;/code&gt; - connect to a TCP socket, on the &lt;code&gt;syslog/tcp&lt;/code&gt; or &lt;code&gt;syslogng/tcp&lt;/code&gt; service. See also the &lt;code&gt;host&lt;/code&gt; , &lt;code&gt;port&lt;/code&gt; and &lt;code&gt;timeout&lt;/code&gt; options.</source>
          <target state="translated">&lt;code&gt;&quot;tcp&quot;&lt;/code&gt; - TCPソケットへの接続、上 &lt;code&gt;syslog/tcp&lt;/code&gt; または &lt;code&gt;syslogng/tcp&lt;/code&gt; サービス。 &lt;code&gt;host&lt;/code&gt; 、 &lt;code&gt;port&lt;/code&gt; 、および &lt;code&gt;timeout&lt;/code&gt; オプションも参照してください。</target>
        </trans-unit>
        <trans-unit id="62c4da84f1130a05349ec11bee18b7c624091908" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&quot;tcp&quot;&lt;/code&gt; - connect to a TCP socket, on the &lt;code&gt;syslog/tcp&lt;/code&gt; or &lt;code&gt;syslogng/tcp&lt;/code&gt; service. See also the &lt;code&gt;host&lt;/code&gt;, &lt;code&gt;port&lt;/code&gt; and &lt;code&gt;timeout&lt;/code&gt; options.</source>
          <target state="translated">&lt;code&gt;&quot;tcp&quot;&lt;/code&gt; - TCPソケットへの接続、上 &lt;code&gt;syslog/tcp&lt;/code&gt; または &lt;code&gt;syslogng/tcp&lt;/code&gt; サービス。 &lt;code&gt;host&lt;/code&gt; 、 &lt;code&gt;port&lt;/code&gt; 、 &lt;code&gt;timeout&lt;/code&gt; オプションも参照してください。</target>
        </trans-unit>
        <trans-unit id="4af17e1d046a72760e83fb814e645698e91790d5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&quot;udp&quot;&lt;/code&gt; - connect to a UDP socket, on the &lt;code&gt;syslog/udp&lt;/code&gt; service. See also the &lt;code&gt;host&lt;/code&gt; , &lt;code&gt;port&lt;/code&gt; and &lt;code&gt;timeout&lt;/code&gt; options.</source>
          <target state="translated">&lt;code&gt;&quot;udp&quot;&lt;/code&gt; &lt;code&gt;syslog/udp&lt;/code&gt; サービス上のUDPソケットに接続します。 &lt;code&gt;host&lt;/code&gt; 、 &lt;code&gt;port&lt;/code&gt; 、および &lt;code&gt;timeout&lt;/code&gt; オプションも参照してください。</target>
        </trans-unit>
        <trans-unit id="5ae02a8140cae4f3b89bbf4e91e37a3ef7e0a296" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&quot;udp&quot;&lt;/code&gt; - connect to a UDP socket, on the &lt;code&gt;syslog/udp&lt;/code&gt; service. See also the &lt;code&gt;host&lt;/code&gt;, &lt;code&gt;port&lt;/code&gt; and &lt;code&gt;timeout&lt;/code&gt; options.</source>
          <target state="translated">&lt;code&gt;&quot;udp&quot;&lt;/code&gt; &lt;code&gt;syslog/udp&lt;/code&gt; サービスでUDPソケットに接続します。 &lt;code&gt;host&lt;/code&gt; 、 &lt;code&gt;port&lt;/code&gt; 、 &lt;code&gt;timeout&lt;/code&gt; オプションも参照してください。</target>
        </trans-unit>
        <trans-unit id="2406f08c80833b104cb546b562930ab2753bb152" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&quot;unix&quot;&lt;/code&gt; - connect to a UNIX domain socket (in some systems a character special device). The name of that socket is given by the &lt;code&gt;path&lt;/code&gt; option or, if omitted, the value returned by the &lt;code&gt;_PATH_LOG&lt;/code&gt; macro (if your system defines it),</source>
          <target state="translated">&lt;code&gt;&quot;unix&quot;&lt;/code&gt; -UNIXドメインソケットに接続します（一部のシステムではキャラクター型特殊デバイス）。そのソケットの名前は、 &lt;code&gt;path&lt;/code&gt; オプションによって指定されます。省略した場合は、 &lt;code&gt;_PATH_LOG&lt;/code&gt; マクロによって返される値（システムで定義されている場合）、</target>
        </trans-unit>
        <trans-unit id="23ca0cba57a3ff33b270c60f0063f65f7c9e5e42" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$#&lt;/code&gt; is no longer supported</source>
          <target state="translated">&lt;code&gt;$#&lt;/code&gt; はサポートされなくなりました</target>
        </trans-unit>
        <trans-unit id="49d4858fc99b300b0a9238685aee525fce03924f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$#&lt;/code&gt; was a variable that could be used to format printed numbers. After a deprecation cycle, its magic was removed in Perl v5.10.0 and using it now triggers a warning: &lt;code&gt;$# is no longer supported&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$#&lt;/code&gt; は、印刷された数値をフォーマットするために使用できる変数でした。非推奨サイクルの後、その魔法はPerl v5.10.0で削除され、それを使用すると警告がトリガーされます： &lt;code&gt;$# is no longer supported&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cb5f2502299e4726a00c7622a4d725a9e5004d6a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$&amp;amp;&lt;/code&gt; is the same as &lt;code&gt;&lt;a href=&quot;functions/substr&quot;&gt;substr&lt;/a&gt;($var, $-[0], $+[0] - $-[0])&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;$&amp;amp;&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;functions/substr&quot;&gt;substr&lt;/a&gt;($var, $-[0], $+[0] - $-[0])&lt;/code&gt; と同じです（$ var、$-[0]、$ + [0]-$-[0]）</target>
        </trans-unit>
        <trans-unit id="64b533301cdb8d811d9f85629f75448f0734e23c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$&amp;amp;&lt;/code&gt; is the same as &lt;code&gt;substr($var, $-[0], $+[0] - $-[0])&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;$&amp;amp;&lt;/code&gt; は &lt;code&gt;substr($var, $-[0], $+[0] - $-[0])&lt;/code&gt; と同じです</target>
        </trans-unit>
        <trans-unit id="f83bc1c6919643c8bdffd21e2aa7ff4b97cdb232" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$&amp;lt;&lt;/code&gt; , &lt;code&gt;$&amp;gt;&lt;/code&gt; , &lt;code&gt;$(&lt;/code&gt; and &lt;code&gt;$)&lt;/code&gt; can be set only on machines that support the corresponding</source>
          <target state="translated">&lt;code&gt;$&amp;lt;&lt;/code&gt; 、 &lt;code&gt;$&amp;gt;&lt;/code&gt; 、 &lt;code&gt;$(&lt;/code&gt; および &lt;code&gt;$)&lt;/code&gt; は、対応するマシンでのみ設定できます</target>
        </trans-unit>
        <trans-unit id="8ece0b6adb83e2cf741bcc1fe2618ad9ea3a3dca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$&amp;lt;&lt;/code&gt; and &lt;code&gt;$&amp;gt;&lt;/code&gt; can be swapped only on machines supporting &lt;code&gt;setreuid()&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;$&amp;lt;&lt;/code&gt; と &lt;code&gt;$&amp;gt;&lt;/code&gt; は、 &lt;code&gt;setreuid()&lt;/code&gt; をサポートするマシンでのみ交換できます。</target>
        </trans-unit>
        <trans-unit id="ea96ea29064209e105bddd76af337d66d6269220" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$&amp;lt;&lt;/code&gt; and &lt;code&gt;$&amp;gt;&lt;/code&gt; can be swapped only on machines supporting &lt;code&gt;setreuid()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$&amp;lt;&lt;/code&gt; と &lt;code&gt;$&amp;gt;&lt;/code&gt; は、 &lt;code&gt;setreuid()&lt;/code&gt; をサポートするマシンでのみ交換できます。</target>
        </trans-unit>
        <trans-unit id="83724a962d2cc2ee53695bf226d921825ef3578b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$&amp;lt;&lt;/code&gt;, &lt;code&gt;$&amp;gt;&lt;/code&gt;, &lt;code&gt;$(&lt;/code&gt; and &lt;code&gt;$)&lt;/code&gt; can be set only on machines that support the corresponding</source>
          <target state="translated">&lt;code&gt;$&amp;lt;&lt;/code&gt; 、 &lt;code&gt;$&amp;gt;&lt;/code&gt; 、 &lt;code&gt;$(&lt;/code&gt; および &lt;code&gt;$)&lt;/code&gt; は、対応するをサポートするマシンでのみ設定できます</target>
        </trans-unit>
        <trans-unit id="a73ac0c44a78bee8c1967e337cb66f942f6efc03" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$'&lt;/code&gt; is the same as &lt;code&gt;&lt;a href=&quot;functions/substr&quot;&gt;substr&lt;/a&gt;($var, $+[0])&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;$'&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;functions/substr&quot;&gt;substr&lt;/a&gt;($var, $+[0])&lt;/code&gt; （$ var、$ + [0]）と同じです</target>
        </trans-unit>
        <trans-unit id="5352d32027ae8b76d57e3b1d227335e635ef45c6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$'&lt;/code&gt; is the same as &lt;code&gt;substr($var, $+[0])&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;$'&lt;/code&gt; は &lt;code&gt;substr($var, $+[0])&lt;/code&gt; と同じです</target>
        </trans-unit>
        <trans-unit id="12b4c1318012ead9ddcfad74247f02f33587edb5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$*&lt;/code&gt; is no longer supported</source>
          <target state="translated">&lt;code&gt;$*&lt;/code&gt; はサポートされなくなりました</target>
        </trans-unit>
        <trans-unit id="96b5140a2d1e2b99e204932424924c03a1b171cb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$*&lt;/code&gt; was a variable that you could use to enable multiline matching. After a deprecation cycle, its magic was removed in Perl v5.10.0. Using it now triggers a warning: &lt;code&gt;$* is no longer supported&lt;/code&gt;. You should use the &lt;code&gt;/s&lt;/code&gt; and &lt;code&gt;/m&lt;/code&gt; regexp modifiers instead.</source>
          <target state="translated">&lt;code&gt;$*&lt;/code&gt; は、複数行マッチングを有効にするために使用できる変数でした。非推奨サイクルの後、その魔法はPerl v5.10.0で削除されました。これを使用すると警告がトリガーされます： &lt;code&gt;$* is no longer supported&lt;/code&gt; 。代わりに &lt;code&gt;/s&lt;/code&gt; および &lt;code&gt;/m&lt;/code&gt; regexp修飾子を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="aeba813b83202368440ed158ae5ae83e14bc37bf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$+{foo}&lt;/code&gt; will be the same as &lt;code&gt;$2&lt;/code&gt;, and &lt;code&gt;$3&lt;/code&gt; will contain 'z' instead of the opposite which is what a .NET regex hacker might expect.</source>
          <target state="translated">&lt;code&gt;$+{foo}&lt;/code&gt; は &lt;code&gt;$2&lt;/code&gt; と同じになり、 &lt;code&gt;$3&lt;/code&gt; には、.NET正規表現ハッカーが期待する反対の代わりに「z」が含まれます。</target>
        </trans-unit>
        <trans-unit id="fc8b0459fe4a3b734029897c61525c05804d4919" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$-[0]&lt;/code&gt; is the offset of the start of the last successful match. &lt;code&gt;$-[&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;$-[0]&lt;/code&gt; は、最後に成功した一致の開始のオフセットです。 &lt;code&gt;$-[&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5548e1259409b7ffe8c24f26f40dcce383ddcaff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$-[0]&lt;/code&gt; is the offset of the start of the last successful match. &lt;code&gt;$-[&lt;i&gt;n&lt;/i&gt;]&lt;/code&gt; is the offset of the start of the substring matched by</source>
          <target state="translated">&lt;code&gt;$-[0]&lt;/code&gt; は、最後に成功した試合の開始のオフセットです。 &lt;code&gt;$-[&lt;i&gt;n&lt;/i&gt;]&lt;/code&gt; は、に一致する部分文字列の先頭のオフセットです。</target>
        </trans-unit>
        <trans-unit id="ed49285641976323c92a385cd3002f789390179e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$.&lt;/code&gt; is reset when the filehandle is closed, but &lt;b&gt;not&lt;/b&gt; when an open filehandle is reopened without an intervening &lt;code&gt;&lt;a href=&quot;functions/close&quot;&gt;close()&lt;/a&gt;&lt;/code&gt;. For more details, see &lt;a href=&quot;perlop#I%2fO-Operators&quot;&gt;I/O Operators in perlop&lt;/a&gt;. Because &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; never does an explicit close, line numbers increase across &lt;code&gt;ARGV&lt;/code&gt; files (but see examples in &lt;a href=&quot;functions/eof&quot;&gt;eof&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;$.&lt;/code&gt; ファイルハンドルが閉じられるとリセットされますが、 &lt;code&gt;&lt;a href=&quot;functions/close&quot;&gt;close()&lt;/a&gt;&lt;/code&gt; を介さずに開いているファイルハンドルが再度開かれるとリセットされ&lt;b&gt;ません&lt;/b&gt;。詳細については、&lt;a href=&quot;perlop#I%2fO-Operators&quot;&gt;perlopのI / O演算子を&lt;/a&gt;参照してください。 &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; は明示的なクローズを行わないため、 &lt;code&gt;ARGV&lt;/code&gt; ファイル全体で行番号が増加します（ただし、&lt;a href=&quot;functions/eof&quot;&gt;eofの&lt;/a&gt;例を参照してください）。</target>
        </trans-unit>
        <trans-unit id="514fa5454c131fa507c12b62789cf3dcc76a001f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$.&lt;/code&gt; is reset when the filehandle is closed, but &lt;b&gt;not&lt;/b&gt; when an open filehandle is reopened without an intervening &lt;code&gt;close()&lt;/code&gt;. For more details, see &lt;a href=&quot;perlop#I%2FO-Operators&quot;&gt;&quot;I/O Operators&quot; in perlop&lt;/a&gt;. Because &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; never does an explicit close, line numbers increase across &lt;code&gt;ARGV&lt;/code&gt; files (but see examples in &lt;a href=&quot;perlfunc#eof&quot;&gt;&quot;eof&quot; in perlfunc&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;$.&lt;/code&gt; ファイルハンドルが閉じられるとリセットされますが、 &lt;code&gt;close()&lt;/code&gt; を介さずに開いているファイルハンドルが再度開かれるとリセットされ&lt;b&gt;ません&lt;/b&gt;。詳細については、&lt;a href=&quot;perlop#I%2FO-Operators&quot;&gt;perlopの「I / O演算子」を&lt;/a&gt;参照してください。 &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; は明示的なクローズを行わないため、行番号は &lt;code&gt;ARGV&lt;/code&gt; ファイル全体で増加します（ただし&lt;a href=&quot;perlfunc#eof&quot;&gt;、perlfuncの「eof」の&lt;/a&gt;例を参照してください）。</target>
        </trans-unit>
        <trans-unit id="5daf0ffc5b3598ed1432b8c7ea06610470d79ae2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$1&lt;/code&gt; , &lt;code&gt;$2&lt;/code&gt; , ... should only be used outside of a regex, and &lt;code&gt;\g1&lt;/code&gt; , &lt;code&gt;\g2&lt;/code&gt; , ... only inside a regex.</source>
          <target state="translated">&lt;code&gt;$1&lt;/code&gt; 、 &lt;code&gt;$2&lt;/code&gt; 、...は正規表現の外でのみ使用でき、 &lt;code&gt;\g1&lt;/code&gt; 、 &lt;code&gt;\g2&lt;/code&gt; 、...は正規表現の内部でのみ使用できます。</target>
        </trans-unit>
        <trans-unit id="0685de0f8a131a55db16625373a0144bf9c04ac5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$1&lt;/code&gt; is the same as &lt;code&gt;&lt;a href=&quot;functions/substr&quot;&gt;substr&lt;/a&gt;($var, $-[1], $+[1] - $-[1])&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;$1&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;functions/substr&quot;&gt;substr&lt;/a&gt;($var, $-[1], $+[1] - $-[1])&lt;/code&gt; と同じです（$ var、$-[1]、$ + [1]-$-[1]）</target>
        </trans-unit>
        <trans-unit id="6a52d07647ef2cf8316def515f713262df3d1e40" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$1&lt;/code&gt; is the same as &lt;code&gt;substr($var, $-[1], $+[1] - $-[1])&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;$1&lt;/code&gt; は &lt;code&gt;substr($var, $-[1], $+[1] - $-[1])&lt;/code&gt; と同じです</target>
        </trans-unit>
        <trans-unit id="0bd5593c29231d2b382c1e497b04c547d084b077" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$1&lt;/code&gt;, &lt;code&gt;$2&lt;/code&gt;, ... should only be used outside of a regex, and &lt;code&gt;\g1&lt;/code&gt;, &lt;code&gt;\g2&lt;/code&gt;, ... only inside a regex.</source>
          <target state="translated">&lt;code&gt;$1&lt;/code&gt; 、 &lt;code&gt;$2&lt;/code&gt; 、...は正規表現の外部でのみ使用し、 &lt;code&gt;\g1&lt;/code&gt; 、 &lt;code&gt;\g2&lt;/code&gt; 、...は正規表現の内部でのみ使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="f085ace39da0e52e4af6bf1bd67da77b20c54d30" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$2&lt;/code&gt; is the same as &lt;code&gt;&lt;a href=&quot;functions/substr&quot;&gt;substr&lt;/a&gt;($var, $-[2], $+[2] - $-[2])&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;$2&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;functions/substr&quot;&gt;substr&lt;/a&gt;($var, $-[2], $+[2] - $-[2])&lt;/code&gt; と同じです（$ var、$-[2]、$ + [2]-$-[2]）</target>
        </trans-unit>
        <trans-unit id="51cbaa7a285d8504992ec381e2eebb7190aa1e37" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$2&lt;/code&gt; is the same as &lt;code&gt;substr($var, $-[2], $+[2] - $-[2])&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;$2&lt;/code&gt; は &lt;code&gt;substr($var, $-[2], $+[2] - $-[2])&lt;/code&gt; と同じです</target>
        </trans-unit>
        <trans-unit id="a1538eb984d74ff4720e41e9afb3ae5063faebfe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$3&lt;/code&gt; is the same as &lt;code&gt;&lt;a href=&quot;functions/substr&quot;&gt;substr&lt;/a&gt;($var, $-[3], $+[3] - $-[3])&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;$3&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;functions/substr&quot;&gt;substr&lt;/a&gt;($var, $-[3], $+[3] - $-[3])&lt;/code&gt; と同じです（$ var、$-[3]、$ + [3]-$-[3]）</target>
        </trans-unit>
        <trans-unit id="ef752fab5f2815771e439ae1826c1f6470aadfd8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$3&lt;/code&gt; is the same as &lt;code&gt;substr($var, $-[3], $+[3] - $-[3])&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;$3&lt;/code&gt; は &lt;code&gt;substr($var, $-[3], $+[3] - $-[3])&lt;/code&gt; と同じです</target>
        </trans-unit>
        <trans-unit id="aad0059b725e875beae7a0dea0f1cc1c57a4c2a5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$@&lt;/code&gt; is set if the string to be &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt;-ed did not compile (this may happen if &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; were imported with bad prototypes), or if Perl code executed during evaluation &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die()&lt;/a&gt;&lt;/code&gt;d. In these cases the value of &lt;code&gt;$@&lt;/code&gt; is the compile error, or the argument to &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; (which will interpolate &lt;code&gt;$!&lt;/code&gt; and &lt;code&gt;$?&lt;/code&gt; ). (See also &lt;a href=&quot;fatal&quot;&gt;Fatal&lt;/a&gt;, though.)</source>
          <target state="translated">&lt;code&gt;$@&lt;/code&gt; 、文字列がする場合は設定されている &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; を -edコンパイルされませんでした（場合、これが発生する可能性があり &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; 悪いプロトタイプでインポートされた）、またはPerlコードは、評価の際に実行された場合 &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die()&lt;/a&gt;&lt;/code&gt; D。これらの場合、 &lt;code&gt;$@&lt;/code&gt; の値はコンパイルエラー、または &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; ための引数です（ &lt;code&gt;$!&lt;/code&gt; と &lt;code&gt;$?&lt;/code&gt; を補間します）。（ただし、&lt;a href=&quot;fatal&quot;&gt;Fatal&lt;/a&gt;も参照してください。）</target>
        </trans-unit>
        <trans-unit id="b4f7c26408ecd7741a287ed4f31e83ff10f555a5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$@&lt;/code&gt; is set if the string to be &lt;code&gt;eval&lt;/code&gt;-ed did not compile (this may happen if &lt;code&gt;open&lt;/code&gt; or &lt;code&gt;close&lt;/code&gt; were imported with bad prototypes), or if Perl code executed during evaluation &lt;code&gt;die()&lt;/code&gt;d. In these cases the value of &lt;code&gt;$@&lt;/code&gt; is the compile error, or the argument to &lt;code&gt;die&lt;/code&gt; (which will interpolate &lt;code&gt;$!&lt;/code&gt; and &lt;code&gt;$?&lt;/code&gt;). (See also &lt;a href=&quot;fatal&quot;&gt;Fatal&lt;/a&gt;, though.)</source>
          <target state="translated">&lt;code&gt;$@&lt;/code&gt; は、 &lt;code&gt;eval&lt;/code&gt; される文字列がコンパイルされなかった場合（ &lt;code&gt;open&lt;/code&gt; または &lt;code&gt;close&lt;/code&gt; が不正なプロトタイプでインポートされた場合に発生する可能性があります）、または評価中にPerlコードが実行された場合に設定されます &lt;code&gt;die()&lt;/code&gt; d。これらの場合、 &lt;code&gt;$@&lt;/code&gt; の値はコンパイルエラー、または &lt;code&gt;die&lt;/code&gt; ための引数です（これは &lt;code&gt;$!&lt;/code&gt; と &lt;code&gt;$?&lt;/code&gt; を補間します）。（ただし、&lt;a href=&quot;fatal&quot;&gt;Fatal&lt;/a&gt;も参照してください。）</target>
        </trans-unit>
        <trans-unit id="1c742122f2a0ffa1823850642f11cbc6f095ed1e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$Carp::CarpLevel&lt;/code&gt; can be set to skip a fixed number of additional call levels. Using this is not recommended because it is very difficult to get it to behave correctly.</source>
          <target state="translated">&lt;code&gt;$Carp::CarpLevel&lt;/code&gt; は、一定数の追加の呼び出しレベルをスキップするように設定できます。正しく動作させるのは非常に難しいため、これを使用することはお勧めしません。</target>
        </trans-unit>
        <trans-unit id="284acfcc0e63812680a1dc0fff18be693334eaeb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$Config{longlongsize}&lt;/code&gt; is undefined on systems without long long support.</source>
          <target state="translated">&lt;code&gt;$Config{longlongsize}&lt;/code&gt; は、ロングロングサポートのないシステムでは定義されていません。</target>
        </trans-unit>
        <trans-unit id="17232d23f9e7a3f6fa67e37518ac8b1b328a60b1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$Config{privlib}&lt;/code&gt;/unicore/README.perl</source>
          <target state="translated">&lt;code&gt;$Config{privlib}&lt;/code&gt;/unicore/README.perl</target>
        </trans-unit>
        <trans-unit id="4df0b85334e1e0faef78ac7593ec94eaf0e95f16" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$ExtUtils::Manifest::Debug&lt;/code&gt; defaults to 0. If set to a true value, or if PERL_MM_MANIFEST_DEBUG is true, debugging output will be produced.</source>
          <target state="translated">&lt;code&gt;$ExtUtils::Manifest::Debug&lt;/code&gt; デフォルトは0です。true値に設定するか、PERL_MM_MANIFEST_DEBUGがtrueの場合、デバッグ出力が生成されます。</target>
        </trans-unit>
        <trans-unit id="47b5499efcdd5a8c5b4ce4c6227655babe3185d3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$ExtUtils::Manifest::MANIFEST&lt;/code&gt; defaults to &lt;code&gt;MANIFEST&lt;/code&gt; . Changing it results in both a different &lt;code&gt;MANIFEST&lt;/code&gt; and a different &lt;code&gt;MANIFEST.SKIP&lt;/code&gt; file. This is useful if you want to maintain different distributions for different audiences (say a user version and a developer version including RCS).</source>
          <target state="translated">&lt;code&gt;$ExtUtils::Manifest::MANIFEST&lt;/code&gt; デフォルトは &lt;code&gt;MANIFEST&lt;/code&gt; です。それを変更すると、別の両方になり &lt;code&gt;MANIFEST&lt;/code&gt; と異なる &lt;code&gt;MANIFEST.SKIP&lt;/code&gt; のファイル。これは、対象ユーザーごとに異なるディストリビューションを維持する場合に便利です（たとえば、ユーザーバージョンとRCSを含む開発者バージョン）。</target>
        </trans-unit>
        <trans-unit id="d20680bd5d4e8119a53051e31e03245386d96b25" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$ExtUtils::Manifest::MANIFEST&lt;/code&gt; defaults to &lt;code&gt;MANIFEST&lt;/code&gt;. Changing it results in both a different &lt;code&gt;MANIFEST&lt;/code&gt; and a different &lt;code&gt;MANIFEST.SKIP&lt;/code&gt; file. This is useful if you want to maintain different distributions for different audiences (say a user version and a developer version including RCS).</source>
          <target state="translated">&lt;code&gt;$ExtUtils::Manifest::MANIFEST&lt;/code&gt; デフォルトは &lt;code&gt;MANIFEST&lt;/code&gt; です。それを変更すると、別の両方になり &lt;code&gt;MANIFEST&lt;/code&gt; と異なる &lt;code&gt;MANIFEST.SKIP&lt;/code&gt; のファイル。これは、オーディエンスごとに異なるディストリビューションを維持する場合に役立ちます（たとえば、ユーザーバージョンとRCSを含む開発者バージョン）。</target>
        </trans-unit>
        <trans-unit id="3c3d13f46166310f8721911df5043a39d56de609" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$ExtUtils::Manifest::Quiet&lt;/code&gt; defaults to 0. If set to a true value, all functions act silently.</source>
          <target state="translated">&lt;code&gt;$ExtUtils::Manifest::Quiet&lt;/code&gt; デフォルトは0です。true値に設定すると、すべての関数がサイレントで動作します。</target>
        </trans-unit>
        <trans-unit id="b5163078ffcb2a43f913ea529ecbce5839e10118" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$File::Find::dir&lt;/code&gt; is the current directory name,</source>
          <target state="translated">&lt;code&gt;$File::Find::dir&lt;/code&gt; は現在のディレクトリ名です。</target>
        </trans-unit>
        <trans-unit id="dab451fac8df64e128b20e69f14caf88f5126a8f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$File::Find::dont_use_nlink&lt;/code&gt; now defaults to 1 on all platforms.</source>
          <target state="translated">&lt;code&gt;$File::Find::dont_use_nlink&lt;/code&gt; は、すべてのプラットフォームでデフォルトで1になりました。</target>
        </trans-unit>
        <trans-unit id="eacb8699d2dc21ed1d114886acf8ef38dc62a06c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$File::Find::name&lt;/code&gt; is the complete pathname to the file.</source>
          <target state="translated">&lt;code&gt;$File::Find::name&lt;/code&gt; は、ファイルへの完全なパス名です。</target>
        </trans-unit>
        <trans-unit id="5ebf923d8b34fa98334826e596e8fae393389fdf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$^V&lt;/code&gt; can be used to determine whether the Perl interpreter executing a script is in the right range of versions. For example:</source>
          <target state="translated">&lt;code&gt;$^V&lt;/code&gt; を使用して、スクリプトを実行するPerlインタープリターが適切なバージョンの範囲にあるかどうかを判別できます。例えば：</target>
        </trans-unit>
        <trans-unit id="9881337fe94979478ca72c8cbd8ce70ff0a89fd4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$^X&lt;/code&gt; doesn't always contain a full path in FreeBSD</source>
          <target state="translated">&lt;code&gt;$^X&lt;/code&gt; は、FreeBSDでは常にフルパスを含むとは限りません</target>
        </trans-unit>
        <trans-unit id="639786abfce247104f33915b36e5a8305df426dc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$_&lt;/code&gt; is a global variable.</source>
          <target state="translated">&lt;code&gt;$_&lt;/code&gt; はグローバル変数です。</target>
        </trans-unit>
        <trans-unit id="d5f1f500a22860b78736b915b3082ff8ed95ba30" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$_&lt;/code&gt; is by default a global variable. However, as of perl v5.10.0, you can use a lexical version of &lt;code&gt;$_&lt;/code&gt; by declaring it in a file or in a block with &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt;. Moreover, declaring &lt;code&gt;&lt;a href=&quot;functions/our&quot;&gt;our&lt;/a&gt; $_&lt;/code&gt; restores the global &lt;code&gt;$_&lt;/code&gt; in the current scope. Though this seemed like a good idea at the time it was introduced, lexical &lt;code&gt;$_&lt;/code&gt; actually causes more problems than it solves. If you call a function that expects to be passed information via &lt;code&gt;$_&lt;/code&gt; , it may or may not work, depending on how the function is written, there not being any easy way to solve this. Just avoid lexical &lt;code&gt;$_&lt;/code&gt; , unless you are feeling particularly masochistic. For this reason lexical &lt;code&gt;$_&lt;/code&gt; is still experimental and will produce a warning unless warnings have been disabled. As with other experimental features, the behavior of lexical &lt;code&gt;$_&lt;/code&gt; is subject to change without notice, including change into a fatal error.</source>
          <target state="translated">&lt;code&gt;$_&lt;/code&gt; はデフォルトではグローバル変数です。ただし、perl v5.10.0 以降では、ファイル内またはブロック内で &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; を宣言することにより、 &lt;code&gt;$_&lt;/code&gt; 字句バージョンを使用できます。また、宣言 &lt;code&gt;&lt;a href=&quot;functions/our&quot;&gt;our&lt;/a&gt; $_&lt;/code&gt; $ _はグローバル復元 &lt;code&gt;$_&lt;/code&gt; 現在のスコープで。導入された時点ではこれは良い考えのように思われましたが、字句 &lt;code&gt;$_&lt;/code&gt; 実際には解決するよりも多くの問題を引き起こします。 &lt;code&gt;$_&lt;/code&gt; を介して情報が渡されることを期待する関数を呼び出す場合、関数の記述方法によっては機能しない場合があります。これを解決する簡単な方法はありません。特にマゾヒズムを感じているのでない限り、字句的な &lt;code&gt;$_&lt;/code&gt; は避けてください。このため、字句 &lt;code&gt;$_&lt;/code&gt; まだ実験段階であり、警告が無効にされていない限り、警告が表示されます。他の実験的機能と同様に、字句 &lt;code&gt;$_&lt;/code&gt; 動作は、致命的なエラーへの変更を含め、予告なしに変更される場合があります。</target>
        </trans-unit>
        <trans-unit id="e0fad02c20941570e63e18bfd1485e4fe487438c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$_&lt;/code&gt; is the current filename within that directory</source>
          <target state="translated">&lt;code&gt;$_&lt;/code&gt; は、そのディレクトリ内の現在のファイル名です</target>
        </trans-unit>
        <trans-unit id="26b1519804b24165cacd9afcf4cb354a13f8bc79" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$`&lt;/code&gt; is the same as &lt;code&gt;&lt;a href=&quot;functions/substr&quot;&gt;substr&lt;/a&gt;($var, 0, $-[0])&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;$`&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;functions/substr&quot;&gt;substr&lt;/a&gt;($var, 0, $-[0])&lt;/code&gt; （$ var、0、$-[0]）と同じです</target>
        </trans-unit>
        <trans-unit id="08ba8213b141e1e524cbb8f1a8902ed77739bf52" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$`&lt;/code&gt; is the same as &lt;code&gt;substr($var, 0, $-[0])&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;$`&lt;/code&gt; は &lt;code&gt;substr($var, 0, $-[0])&lt;/code&gt; と同じです</target>
        </trans-unit>
        <trans-unit id="78726539a393f61e788d3df6ef78580d9921d9ab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$a&lt;/code&gt; and &lt;code&gt;$b&lt;/code&gt; are implicitly local to the sort() execution and regain their former values upon completing the sort.</source>
          <target state="translated">&lt;code&gt;$a&lt;/code&gt; と &lt;code&gt;$b&lt;/code&gt; は、sort（）の実行に対して暗黙的にローカルであり、ソートが完了すると以前の値に戻ります。</target>
        </trans-unit>
        <trans-unit id="8a67b14ac44e94f2e98f802980241cab0c688214" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$a&lt;/code&gt; and &lt;code&gt;$b&lt;/code&gt; are set as package globals in the package the sort() is called from. That means &lt;code&gt;$main::a&lt;/code&gt; and &lt;code&gt;$main::b&lt;/code&gt; (or &lt;code&gt;$::a&lt;/code&gt; and &lt;code&gt;$::b&lt;/code&gt;) in the &lt;code&gt;main&lt;/code&gt; package, &lt;code&gt;$FooPack::a&lt;/code&gt; and &lt;code&gt;$FooPack::b&lt;/code&gt; in the &lt;code&gt;FooPack&lt;/code&gt; package, etc. If the sort block is in scope of a &lt;code&gt;my&lt;/code&gt; or &lt;code&gt;state&lt;/code&gt; declaration of &lt;code&gt;$a&lt;/code&gt; and/or &lt;code&gt;$b&lt;/code&gt;, you</source>
          <target state="translated">&lt;code&gt;$a&lt;/code&gt; と &lt;code&gt;$b&lt;/code&gt; は、sort（）が呼び出されるパッケージのパッケージグローバルとして設定されます。ことは &lt;code&gt;$main::a&lt;/code&gt; と &lt;code&gt;$main::b&lt;/code&gt; （または &lt;code&gt;$::a&lt;/code&gt; と &lt;code&gt;$::b&lt;/code&gt; ）における &lt;code&gt;main&lt;/code&gt; パッケージ、 &lt;code&gt;$FooPack::a&lt;/code&gt; と &lt;code&gt;$FooPack::b&lt;/code&gt; で &lt;code&gt;FooPack&lt;/code&gt; のパッケージ等、もしソートブロックは、 &lt;code&gt;$a&lt;/code&gt; および/または &lt;code&gt;$b&lt;/code&gt; &lt;code&gt;my&lt;/code&gt; または &lt;code&gt;state&lt;/code&gt; 宣言の範囲内にあります。</target>
        </trans-unit>
        <trans-unit id="164e38ceaa33d58e4e297e6727f87621365f4868" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$a[1]&lt;/code&gt; is one of these references. It refers to an array, the array containing &lt;code&gt;(4, 5, 6)&lt;/code&gt; , and because it is a reference to an array, &lt;b&gt;Use Rule 2&lt;/b&gt; says that we can write &lt;code&gt;$a[1]-&amp;gt;[2]&lt;/code&gt; to get the third element from that array. &lt;code&gt;$a[1]-&amp;gt;[2]&lt;/code&gt; is the 6. Similarly, &lt;code&gt;$a[0]-&amp;gt;[1]&lt;/code&gt; is the 2. What we have here is like a two-dimensional array; you can write &lt;code&gt;$a[ROW]-&amp;gt;[COLUMN]&lt;/code&gt; to get or set the element in any row and any column of the array.</source>
          <target state="translated">&lt;code&gt;$a[1]&lt;/code&gt; はこれらの参照の1つです。 &lt;code&gt;(4, 5, 6)&lt;/code&gt; 4、5、6）を含む配列を参照します。これは配列への参照であるため、&lt;b&gt;ルール2を使用する&lt;/b&gt;と、 &lt;code&gt;$a[1]-&amp;gt;[2]&lt;/code&gt; と記述して3番目の要素を取得できますその配列から。 &lt;code&gt;$a[1]-&amp;gt;[2]&lt;/code&gt; は6です。同様に、 &lt;code&gt;$a[0]-&amp;gt;[1]&lt;/code&gt; は2です。ここにあるのは2次元配列のようなものです。 &lt;code&gt;$a[ROW]-&amp;gt;[COLUMN]&lt;/code&gt; と記述して、配列の任意の行と任意の列の要素を取得または設定できます。</target>
        </trans-unit>
        <trans-unit id="17db6b3d1d196e97c26d2e222d2dc7f619a639e4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$a[1]&lt;/code&gt; is one of these references. It refers to an array, the array containing &lt;code&gt;(4, 5, 6)&lt;/code&gt;, and because it is a reference to an array, &lt;a href=&quot;#Use-Rule-2&quot;&gt;&lt;b&gt;Use Rule 2&lt;/b&gt;&lt;/a&gt; says that we can write &lt;code&gt;$a[1]-&amp;gt;[2]&lt;/code&gt; to get the third element from that array. &lt;code&gt;$a[1]-&amp;gt;[2]&lt;/code&gt; is the 6. Similarly, &lt;code&gt;$a[0]-&amp;gt;[1]&lt;/code&gt; is the 2. What we have here is like a two-dimensional array; you can write &lt;code&gt;$a[ROW]-&amp;gt;[COLUMN]&lt;/code&gt; to get or set the element in any row and any column of the array.</source>
          <target state="translated">&lt;code&gt;$a[1]&lt;/code&gt; はこれらの参照の1つです。これは配列、 &lt;code&gt;(4, 5, 6)&lt;/code&gt; 4、5、6）を含む配列を参照し、配列への参照であるため、&lt;a href=&quot;#Use-Rule-2&quot;&gt;&lt;b&gt;ルール2を使用する&lt;/b&gt;&lt;/a&gt;と、 &lt;code&gt;$a[1]-&amp;gt;[2]&lt;/code&gt; を記述して3番目の要素を取得できます。その配列から。 &lt;code&gt;$a[1]-&amp;gt;[2]&lt;/code&gt; は6です。同様に、 &lt;code&gt;$a[0]-&amp;gt;[1]&lt;/code&gt; は2です。ここにあるのは、2次元配列のようなものです。 &lt;code&gt;$a[ROW]-&amp;gt;[COLUMN]&lt;/code&gt; と記述して、配列の任意の行および任意の列の要素を取得または設定できます。</target>
        </trans-unit>
        <trans-unit id="0aab82f51ddb7f399649a3d5972393b28924ddc1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$bar&lt;/code&gt; . The one that was stuffed away by &lt;code&gt;&lt;a href=&quot;functions/local&quot;&gt;local()&lt;/a&gt;&lt;/code&gt; and which will be restored when the block ends. Because variables are accessed through the typeglob, you can use &lt;code&gt;*foo = *bar&lt;/code&gt; to create an alias which can be localized. (But be aware that this means you can't have a separate &lt;code&gt;@foo&lt;/code&gt; and &lt;code&gt;@bar&lt;/code&gt; , etc.)</source>
          <target state="translated">&lt;code&gt;$bar&lt;/code&gt; 。 &lt;code&gt;&lt;a href=&quot;functions/local&quot;&gt;local()&lt;/a&gt;&lt;/code&gt; によって詰め込まれ、ブロックが終了すると復元されるもの。変数はtypeglobを通じてアクセスされるため、 &lt;code&gt;*foo = *bar&lt;/code&gt; を使用して、ローカライズ可能なエイリアスを作成できます。（ただし、これは &lt;code&gt;@foo&lt;/code&gt; と &lt;code&gt;@bar&lt;/code&gt; を別々に持つことができないことを意味することに注意してください。）</target>
        </trans-unit>
        <trans-unit id="e4075d206d647487aec88e4142a35d4729e7bc18" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$bar&lt;/code&gt;. The one that was stuffed away by &lt;code&gt;local()&lt;/code&gt; and which will be restored when the block ends. Because variables are accessed through the typeglob, you can use &lt;code&gt;*foo = *bar&lt;/code&gt; to create an alias which can be localized. (But be aware that this means you can't have a separate &lt;code&gt;@foo&lt;/code&gt; and &lt;code&gt;@bar&lt;/code&gt;, etc.)</source>
          <target state="translated">&lt;code&gt;$bar&lt;/code&gt; 。 &lt;code&gt;local()&lt;/code&gt; によって詰め込まれ、ブロックが終了すると復元されるもの。変数はtypeglobを介してアクセスされるため、 &lt;code&gt;*foo = *bar&lt;/code&gt; を使用して、ローカライズ可能なエイリアスを作成できます。（ただし、これは、 &lt;code&gt;@bar&lt;/code&gt; &lt;code&gt;@foo&lt;/code&gt; と@barなどを個別に持つことができないことを意味することに注意してください。）</target>
        </trans-unit>
        <trans-unit id="28dc4a5afc0ff01b425ce8767eafa069b4b648aa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$basename&lt;/code&gt; is the base filename for the database. The database is two files with &quot;.dir&quot; and &quot;.pag&quot; extensions appended to &lt;code&gt;$basename&lt;/code&gt; ,</source>
          <target state="translated">&lt;code&gt;$basename&lt;/code&gt; はデータベースのベースファイル名です。データベースは、「。dir」および「.pag」拡張子が &lt;code&gt;$basename&lt;/code&gt; に追加された2つのファイルです。</target>
        </trans-unit>
        <trans-unit id="a19c9c326e3d8528b872740b173b4d83490ce32d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$basename&lt;/code&gt; is the base filename for the database. The database is two files with &quot;.dir&quot; and &quot;.pag&quot; extensions appended to &lt;code&gt;$basename&lt;/code&gt;,</source>
          <target state="translated">&lt;code&gt;$basename&lt;/code&gt; は、データベースのベースファイル名です。データベースは、「。dir」と「.pag」の拡張子が &lt;code&gt;$basename&lt;/code&gt; に追加された2つのファイルです。</target>
        </trans-unit>
        <trans-unit id="ffff3ca4c444e17cedfdeff3744d7d3faec9cc80" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$code_point&lt;/code&gt; should be an unsigned integer representing a Unicode code point.</source>
          <target state="translated">&lt;code&gt;$code_point&lt;/code&gt; は、Unicodeコードポイントを表す符号なし整数である必要があります。</target>
        </trans-unit>
        <trans-unit id="00be2668f9fee45a53d34157056b4023ad5eb111" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$coll-&amp;gt;le($str, &quot;abc\x{FFFF}&quot;)&lt;/code&gt; works like &lt;code&gt;$coll-&amp;gt;lt($str, &quot;abd&quot;)&lt;/code&gt; almost, but the latter has a problem that you should know which letter is next to &lt;code&gt;c&lt;/code&gt; . For a certain language where &lt;code&gt;ch&lt;/code&gt; as the next letter, &lt;code&gt;&quot;abch&quot;&lt;/code&gt; is greater than &lt;code&gt;&quot;abc\x{FFFF}&quot;&lt;/code&gt; , but less than &lt;code&gt;&quot;abd&quot;&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;$coll-&amp;gt;le($str, &quot;abc\x{FFFF}&quot;)&lt;/code&gt; は &lt;code&gt;$coll-&amp;gt;lt($str, &quot;abd&quot;)&lt;/code&gt; ほぼ同じように機能しますが、後者には次の文字がどれであるかを知っておく必要があるという問題があります &lt;code&gt;c&lt;/code&gt; 。次の文字が &lt;code&gt;ch&lt;/code&gt; である特定の言語では、 &lt;code&gt;&quot;abch&quot;&lt;/code&gt; は &lt;code&gt;&quot;abc\x{FFFF}&quot;&lt;/code&gt; より大きく、 &lt;code&gt;&quot;abd&quot;&lt;/code&gt; より小さくなります。</target>
        </trans-unit>
        <trans-unit id="1352e5a9592c7ad791be8a1fb10a0df94b557f05" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$coll-&amp;gt;le($str, &quot;abc\x{FFFF}&quot;)&lt;/code&gt; works like &lt;code&gt;$coll-&amp;gt;lt($str, &quot;abd&quot;)&lt;/code&gt; almost, but the latter has a problem that you should know which letter is next to &lt;code&gt;c&lt;/code&gt;. For a certain language where &lt;code&gt;ch&lt;/code&gt; as the next letter, &lt;code&gt;&quot;abch&quot;&lt;/code&gt; is greater than &lt;code&gt;&quot;abc\x{FFFF}&quot;&lt;/code&gt;, but less than &lt;code&gt;&quot;abd&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$coll-&amp;gt;le($str, &quot;abc\x{FFFF}&quot;)&lt;/code&gt; は &lt;code&gt;$coll-&amp;gt;lt($str, &quot;abd&quot;)&lt;/code&gt; ように機能しますが、後者には、次の文字を知っておく必要があるという問題があります。 &lt;code&gt;c&lt;/code&gt; 。 &lt;code&gt;ch&lt;/code&gt; が次の文字である特定の言語の場合、 &lt;code&gt;&quot;abch&quot;&lt;/code&gt; は &lt;code&gt;&quot;abc\x{FFFF}&quot;&lt;/code&gt; より大きく、 &lt;code&gt;&quot;abd&quot;&lt;/code&gt; より小さくなります。</target>
        </trans-unit>
        <trans-unit id="8a895a24778f9b7226fb72a643ac2d866c37fcb2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$compressedLength&lt;/code&gt; bytes of compressed data will be read from the &lt;code&gt;$fh&lt;/code&gt; filehandle (The only exception is for an error case like a truncated file or a corrupt data stream).</source>
          <target state="translated">&lt;code&gt;$compressedLength&lt;/code&gt; 圧縮データの$ compressedLengthバイトは、 &lt;code&gt;$fh&lt;/code&gt; ファイルハンドルから読み取られます（唯一の例外は、切り捨てられたファイルや破損したデータストリームなどのエラーの場合です）。</target>
        </trans-unit>
        <trans-unit id="33a0d78f203fe8e833b224c8e9cd95037c775a46" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$config&lt;/code&gt; is optional. If given, sets &lt;a href=&quot;#config&quot;&gt;&quot;config&quot;&lt;/a&gt; and calls &lt;a href=&quot;#load_handlers&quot;&gt;&quot;load_handlers&quot;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;$config&lt;/code&gt; はオプションです。指定されている場合は、&lt;a href=&quot;#config&quot;&gt;「config」&lt;/a&gt;を設定し、&lt;a href=&quot;#load_handlers&quot;&gt;「load_handlers」&lt;/a&gt;を呼び出します。</target>
        </trans-unit>
        <trans-unit id="f992ec8417fca4acad9bbb8422cb5ffdf5a18f07" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$config&lt;/code&gt; is optional. If given, sets &lt;a href=&quot;#config&quot;&gt;config&lt;/a&gt; and calls &lt;a href=&quot;#load_handlers&quot;&gt;load_handlers&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;$config&lt;/code&gt; はオプションです。指定された場合、&lt;a href=&quot;#config&quot;&gt;configを設定し&lt;/a&gt;、&lt;a href=&quot;#load_handlers&quot;&gt;load_handlers&lt;/a&gt;を呼び出します。</target>
        </trans-unit>
        <trans-unit id="28557b7429a0d4b6367debe739b1a3d12cab4c7c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$directories&lt;/code&gt; must be only the directory portion of the path on systems that have the concept of a volume or that have path syntax that differentiates files from directories.</source>
          <target state="translated">&lt;code&gt;$directories&lt;/code&gt; は、ボリュームの概念を持つシステム、またはファイルとディレクトリを区別するパス構文を持つシステム上のパスのディレクトリ部分のみである必要があります。</target>
        </trans-unit>
        <trans-unit id="c96505ed2404cf4e43990f3f64c8cb57746967e1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$equal_in_locale&lt;/code&gt; will be true if the collation locale specifies a dictionary-like ordering that ignores space characters completely and which folds case.</source>
          <target state="translated">&lt;code&gt;$equal_in_locale&lt;/code&gt; は、照合ロケールがスペース文字を完全に無視し、大文字と小文字を区別するディクショナリのような順序を指定している場合にtrueになります。</target>
        </trans-unit>
        <trans-unit id="92dfd6e2b77443792822ef29362562458caa6a9b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$events&lt;/code&gt; in this case will contain 3 items:</source>
          <target state="translated">&lt;code&gt;$events&lt;/code&gt; この場合の$ eventsには、次の3つの項目が含まれます。</target>
        </trans-unit>
        <trans-unit id="e793a80c803fcff08246fda8ebd1ffa5eb9ea431" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$failed&lt;/code&gt; is a hash ref of all the test scripts that failed. Each key is the name of a test script, each value is another hash representing how that script failed. Its keys are these:</source>
          <target state="translated">&lt;code&gt;$failed&lt;/code&gt; は、失敗したすべてのテストスクリプトのハッシュ参照です。各キーはテストスクリプトの名前で、各値はそのスクリプトがどのように失敗したかを表す別のハッシュです。そのキーはこれらです：</target>
        </trans-unit>
        <trans-unit id="c1ed274ba91bdf79efe093dcb658437999a53c1a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$failed&lt;/code&gt; should be empty if everything passed.</source>
          <target state="translated">&lt;code&gt;$failed&lt;/code&gt; すべてが成功した場合、$ failedは空になります。</target>
        </trans-unit>
        <trans-unit id="f3f93b2c6ee742963cbf8da79410a960143abba2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$filename&lt;/code&gt; should be given in unix format.</source>
          <target state="translated">&lt;code&gt;$filename&lt;/code&gt; はunix形式で指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="5e46282e0da0709c2f5c435fa96079c7729da7ea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$filepath&lt;/code&gt; is the input POD to read and &lt;code&gt;$outputpath&lt;/code&gt; is where to write POD syntax error messages. Either argument may be a scalar indicating a file-path, or else a reference to an open filehandle. If unspecified, the input-file it defaults to &lt;code&gt;\*STDIN&lt;/code&gt; , and the output-file defaults to &lt;code&gt;\*STDERR&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;$filepath&lt;/code&gt; は読み取る入力PODで、 &lt;code&gt;$outputpath&lt;/code&gt; はPOD構文エラーメッセージを書き込む場所です。どちらの引数も、ファイルパスを示すスカラーか、開いているファイルハンドルへの参照です。指定しない場合、入力ファイルはデフォルトで &lt;code&gt;\*STDIN&lt;/code&gt; になり、出力ファイルはデフォルトで &lt;code&gt;\*STDERR&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="2ef7f1dec456b6b805d5ac647134a70ee7ce8db3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$filepath&lt;/code&gt; is the input POD to read and &lt;code&gt;$outputpath&lt;/code&gt; is where to write POD syntax error messages. Either argument may be a scalar indicating a file-path, or else a reference to an open filehandle. If unspecified, the input-file it defaults to &lt;code&gt;\*STDIN&lt;/code&gt;, and the output-file defaults to &lt;code&gt;\*STDERR&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$filepath&lt;/code&gt; は読み取る入力PODであり、 &lt;code&gt;$outputpath&lt;/code&gt; はPOD構文エラーメッセージを書き込む場所です。どちらの引数も、ファイルパスを示すスカラー、または開いているファイルハンドルへの参照の場合があります。指定しない場合、入力ファイルのデフォルトは &lt;code&gt;\*STDIN&lt;/code&gt; になり、出力ファイルのデフォルトは &lt;code&gt;\*STDERR&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="a4a545f6409f188207c03846eda4cd453fb6d975" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$hDevice&lt;/code&gt; is a Win32 native file handle to a device [return value from &lt;code&gt;CreateFile&lt;/code&gt;].</source>
          <target state="translated">&lt;code&gt;$hDevice&lt;/code&gt; は、デバイスへのWin32ネイティブファイルハンドルです[ &lt;code&gt;CreateFile&lt;/code&gt; からの戻り値]。</target>
        </trans-unit>
        <trans-unit id="7bf7332da5eb5a18601d2ffa1939546b19653688" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$hFile&lt;/code&gt; is a Win32 native file handle that is already open to the file or device to be written to.</source>
          <target state="translated">&lt;code&gt;$hFile&lt;/code&gt; は、書き込み先のファイルまたはデバイスに対して既に開かれているWin32ネイティブファイルハンドルです。</target>
        </trans-unit>
        <trans-unit id="83ebdecc51423cbae2efab2216eff2711b74ad20" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$hFile&lt;/code&gt; is a Win32 native file handle that is already open to the file or device to read from.</source>
          <target state="translated">&lt;code&gt;$hFile&lt;/code&gt; は、読み取り元のファイルまたはデバイスに対して既に開かれているWin32ネイティブファイルハンドルです。</target>
        </trans-unit>
        <trans-unit id="ea534be808afdf739bf7eb325354197115896656" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$hFile&lt;/code&gt; is a Win32 native file handle.</source>
          <target state="translated">&lt;code&gt;$hFile&lt;/code&gt; は、Win32ネイティブファイルハンドルです。</target>
        </trans-unit>
        <trans-unit id="226f1e0f031a1db08dff9c6da8ed69830558d087" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$hModel&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt; [or &lt;code&gt;[]&lt;/code&gt;, both of which mean &lt;code&gt;NULL&lt;/code&gt;] or a Win32 native handle opened with &lt;code&gt;GENERIC_READ&lt;/code&gt; access to a model file from which file attributes and extended attributes are to be copied if a new file gets created.</source>
          <target state="translated">&lt;code&gt;$hModel&lt;/code&gt; は &lt;code&gt;0&lt;/code&gt; [または &lt;code&gt;[]&lt;/code&gt; で、どちらも &lt;code&gt;NULL&lt;/code&gt; を意味します]、または新しいファイルが作成された場合にファイル属性と拡張属性がコピーされるモデルファイルへの &lt;code&gt;GENERIC_READ&lt;/code&gt; アクセスで開かれたWin32ネイティブハンドル。</target>
        </trans-unit>
        <trans-unit id="0f045568d5e8431197d10da9a0e32611150122e5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$hModelFile&lt;/code&gt; should contain a handle opened with &lt;code&gt;GENERIC_READ&lt;/code&gt; access to a model file from which file attributes and extended attributes are to be copied. Or &lt;code&gt;$hModelFile&lt;/code&gt; can be &lt;code&gt;0&lt;/code&gt; [the default].</source>
          <target state="translated">&lt;code&gt;$hModelFile&lt;/code&gt; は、ファイル属性と拡張属性のコピー元となるモデルファイルへの &lt;code&gt;GENERIC_READ&lt;/code&gt; アクセスで開かれたハンドルが含まれている必要があります。または、 &lt;code&gt;$hModelFile&lt;/code&gt; を &lt;code&gt;0&lt;/code&gt; [デフォルト]にすることができます。</target>
        </trans-unit>
        <trans-unit id="076d713aa110b7c64853e5d5228343a0122ce446" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$hNativeHandle&lt;/code&gt; is an open Win32 native file handle, probably the return value from &lt;code&gt;CreateFile&lt;/code&gt; or &lt;code&gt;createFile&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$hNativeHandle&lt;/code&gt; は、開いているWin32ネイティブファイルハンドルであり、おそらく &lt;code&gt;CreateFile&lt;/code&gt; または &lt;code&gt;createFile&lt;/code&gt; からの戻り値です。</target>
        </trans-unit>
        <trans-unit id="47d0bc40627cd5114097dccb628455c44b9c715b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$hNativeHandle&lt;/code&gt; is set to &lt;code&gt;INVALID_HANDLE_VALUE&lt;/code&gt; [and &lt;code&gt;lastFileError()&lt;/code&gt; and &lt;code&gt;$^E&lt;/code&gt; are set] if &lt;code&gt;FdGetOsFHandle&lt;/code&gt; fails. See also &lt;code&gt;GetOsFHandle&lt;/code&gt; which provides a friendlier interface.</source>
          <target state="translated">&lt;code&gt;$hNativeHandle&lt;/code&gt; &lt;code&gt;FdGetOsFHandle&lt;/code&gt; が失敗した場合、$ hNativeHandleは &lt;code&gt;INVALID_HANDLE_VALUE&lt;/code&gt; に設定されます[そして &lt;code&gt;lastFileError()&lt;/code&gt; と &lt;code&gt;$^E&lt;/code&gt; が設定されます] 。より使いやすいインターフェースを提供する &lt;code&gt;GetOsFHandle&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="f3cb930d2fb14884e020b3acbbf8d7b58634a824" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$hNativeHandle&lt;/code&gt; is set to a false value [and &lt;code&gt;lastFileError()&lt;/code&gt; and &lt;code&gt;$^E&lt;/code&gt; are set] if &lt;code&gt;GetOsFHandle&lt;/code&gt; fails. &lt;code&gt;GetOsFHandle&lt;/code&gt; returns &lt;code&gt;&quot;0 but true&quot;&lt;/code&gt; in the impossible(?) case of the handle having a value of &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$hNativeHandle&lt;/code&gt; &lt;code&gt;GetOsFHandle&lt;/code&gt; が失敗した場合、$ hNativeHandleはfalse値に設定されます[そして &lt;code&gt;lastFileError()&lt;/code&gt; と &lt;code&gt;$^E&lt;/code&gt; が設定されます] 。 &lt;code&gt;GetOsFHandle&lt;/code&gt; は、値が &lt;code&gt;0&lt;/code&gt; のハンドルが不可能（？）の場合、 &lt;code&gt;&quot;0 but true&quot;&lt;/code&gt; 0buttrue 」を返します。</target>
        </trans-unit>
        <trans-unit id="47fc1248a222c775072a8ac42b9c5d499cacad6a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$hObject&lt;/code&gt; is an open Win32 native file handle or an open Win32 native handle to some other type of object.</source>
          <target state="translated">&lt;code&gt;$hObject&lt;/code&gt; は、開いているWin32ネイティブファイルハンドル、または他の種類のオブジェクトに対する開いているWin32ネイティブハンドルです。</target>
        </trans-unit>
        <trans-unit id="af3f902394fb19060c65726c441dccc8f880bdec" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$hashref&lt;/code&gt; would contain:</source>
          <target state="translated">&lt;code&gt;$hashref&lt;/code&gt; は次のものが含まれます。</target>
        </trans-unit>
        <trans-unit id="d9bb03dabc25ee496026789ce50d0d591d14dfe8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$height&lt;/code&gt; will be added to the &lt;code&gt;level()&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;$height&lt;/code&gt; は &lt;code&gt;level()&lt;/code&gt; に追加されます。</target>
        </trans-unit>
        <trans-unit id="4f54de996f43a2738b1804adbf389604aeb2a0d4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$height&lt;/code&gt; will be added to the &lt;code&gt;level()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$height&lt;/code&gt; が &lt;code&gt;level()&lt;/code&gt; に追加されます。</target>
        </trans-unit>
        <trans-unit id="f779e1da8c2834f3dc3f0041c88e808e56aeb7f4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$hinthash&lt;/code&gt; is a reference to a hash containing the value of &lt;a href=&quot;perlvar#%25%5EH&quot;&gt;&lt;code&gt;%^H&lt;/code&gt;&lt;/a&gt; when the caller was compiled, or &lt;a href=&quot;#undef-EXPR&quot;&gt;&lt;code&gt;undef&lt;/code&gt;&lt;/a&gt; if &lt;a href=&quot;perlvar#%25%5EH&quot;&gt;&lt;code&gt;%^H&lt;/code&gt;&lt;/a&gt; was empty. Do not modify the values of this hash, as they are the actual values stored in the optree.</source>
          <target state="translated">&lt;code&gt;$hinthash&lt;/code&gt; は、呼び出し元がコンパイルされたときの&lt;a href=&quot;perlvar#%25%5EH&quot;&gt; &lt;code&gt;%^H&lt;/code&gt; &lt;/a&gt;値を含むハッシュへの参照であり、&lt;a href=&quot;perlvar#%25%5EH&quot;&gt; &lt;code&gt;%^H&lt;/code&gt; &lt;/a&gt;が空の場合は&lt;a href=&quot;#undef-EXPR&quot;&gt; &lt;code&gt;undef&lt;/code&gt; &lt;/a&gt;です。このハッシュの値はoptreeに格納されている実際の値であるため、変更しないでください。</target>
        </trans-unit>
        <trans-unit id="d105ab7b511988fca9af1046af2a456f7418a9fe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$hinthash&lt;/code&gt; is a reference to a hash containing the value of &lt;code&gt;%^H&lt;/code&gt; when the caller was compiled, or &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; if &lt;code&gt;%^H&lt;/code&gt; was empty. Do not modify the values of this hash, as they are the actual values stored in the optree.</source>
          <target state="translated">&lt;code&gt;$hinthash&lt;/code&gt; は、呼び出し元がコンパイルされたときの &lt;code&gt;%^H&lt;/code&gt; 値を含むハッシュへの参照、または &lt;code&gt;%^H&lt;/code&gt; が空の場合は &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; です。このハッシュの値はoptreeに格納されている実際の値であるため、変更しないでください。</target>
        </trans-unit>
        <trans-unit id="b6cd375dd385928054a5a4e58c090a7c433bfb0d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$hinthash&lt;/code&gt; is a reference to a hash containing the value of &lt;code&gt;%^H&lt;/code&gt; when the caller was compiled, or &lt;code&gt;&lt;a href=&quot;undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; if &lt;code&gt;%^H&lt;/code&gt; was empty. Do not modify the values of this hash, as they are the actual values stored in the optree.</source>
          <target state="translated">&lt;code&gt;$hinthash&lt;/code&gt; は、呼び出し元がコンパイルされたときの &lt;code&gt;%^H&lt;/code&gt; 値を含むハッシュへの参照、または &lt;code&gt;%^H&lt;/code&gt; が空の場合は &lt;code&gt;&lt;a href=&quot;undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; です。このハッシュの値はoptreeに格納されている実際の値であるため、変更しないでください。</target>
        </trans-unit>
        <trans-unit id="94c4d74f968856dcc21f0e8f9222eb2683dae04b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$ioivOffsetHigh&lt;/code&gt; can be &lt;code&gt;[]&lt;/code&gt; [for &lt;code&gt;NULL&lt;/code&gt;] to indicate that you are only specifying a 4-byte offset and the resulting file position will be 0xFFFFFFFE or less [just under 4GB]. Otherwise &lt;code&gt;$ioivOfffsetHigh&lt;/code&gt; starts out with the high-order 4 bytes [signed] of the offset and gets set to the [unsigned] high-order 4 bytes of the resulting file position.</source>
          <target state="translated">&lt;code&gt;$ioivOffsetHigh&lt;/code&gt; を &lt;code&gt;[]&lt;/code&gt; [ &lt;code&gt;NULL&lt;/code&gt; の場合]にすると、4バイトのオフセットのみを指定し、結果のファイル位置が0xFFFFFFFE以下[4GBのすぐ下]になることを示します。それ以外の場合、 &lt;code&gt;$ioivOfffsetHigh&lt;/code&gt; は、オフセットの上位4バイト[符号付き]から始まり、結果のファイル位置の上位4バイト[符号なし]に設定されます。</target>
        </trans-unit>
        <trans-unit id="555d98e49a27979e59c93cc4fb2db8fba8474055" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$isdst&lt;/code&gt; is true if the specified time occurs during Daylight Saving Time, false otherwise.</source>
          <target state="translated">&lt;code&gt;$isdst&lt;/code&gt; は、指定された時間が夏時間中に発生する場合はtrue、それ以外の場合はfalseです。</target>
        </trans-unit>
        <trans-unit id="e63b631e49d287fbfcc99be82070e29300ed9094" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$ivFD&lt;/code&gt; will be non-negative if the open operation was successful. For failure, &lt;code&gt;-1&lt;/code&gt; is returned and &lt;code&gt;$!&lt;/code&gt; [and possibly &lt;code&gt;fileLastError()&lt;/code&gt; and &lt;code&gt;$^E&lt;/code&gt;] is set to the reason for the failure.</source>
          <target state="translated">&lt;code&gt;$ivFD&lt;/code&gt; オープン操作が成功した場合、$ ivFDは負ではありません。失敗した場合は、 &lt;code&gt;-1&lt;/code&gt; が返され、 &lt;code&gt;$!&lt;/code&gt; [そしておそらく &lt;code&gt;fileLastError()&lt;/code&gt; と &lt;code&gt;$^E&lt;/code&gt; ]が失敗の理由に設定されます。</target>
        </trans-unit>
        <trans-unit id="ef183c6829a521736a989a34a4024a6948f7d1ca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$ivOffset&lt;/code&gt; is [if &lt;code&gt;$ioivOffsetHigh&lt;/code&gt; is &lt;code&gt;[]&lt;/code&gt;] the offset [in bytes] to the new file position from the position specified via &lt;code&gt;$uFromWhere&lt;/code&gt;. If &lt;code&gt;$ioivOffsetHigh&lt;/code&gt; is not &lt;code&gt;[]&lt;/code&gt;, then &lt;code&gt;$ivOffset&lt;/code&gt; is converted to an unsigned value to be used as the low-order 4 bytes of the offset.</source>
          <target state="translated">&lt;code&gt;$ivOffset&lt;/code&gt; は、[ &lt;code&gt;$ioivOffsetHigh&lt;/code&gt; が &lt;code&gt;[]&lt;/code&gt; の場合]、 &lt;code&gt;$uFromWhere&lt;/code&gt; 指定された位置から新しいファイル位置へのオフセット[バイト単位]です。場合 &lt;code&gt;$ioivOffsetHigh&lt;/code&gt; ない &lt;code&gt;[]&lt;/code&gt; は、 &lt;code&gt;$ivOffset&lt;/code&gt; オフセットの下位4バイトとして使用する符号なしの値に変換されます。</target>
        </trans-unit>
        <trans-unit id="8a4548cedf4f0ad38013cada4649500c971a006e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$lBufSize&lt;/code&gt; is the size of the buffer to allocate to store this list of strings. &lt;code&gt;26*4+1&lt;/code&gt; is always sufficient and should usually be used.</source>
          <target state="translated">&lt;code&gt;$lBufSize&lt;/code&gt; は、この文字列のリストを格納するために割り当てるバッファのサイズです。 &lt;code&gt;26*4+1&lt;/code&gt; で常に十分であり、通常は使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="bcc1c68f01dd8c2e5e87396710f5f13e9ac09ada" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$lBytes&lt;/code&gt; is the number of bytes you would like to read. &lt;code&gt;$opBuffer&lt;/code&gt; is automatically initialized to have a buffer large enough to hold that many bytes. Unlike other buffer sizes, &lt;code&gt;$lBytes&lt;/code&gt; does not need to have a &lt;code&gt;&quot;=&quot;&lt;/code&gt; prepended to it to prevent a larger value to be passed to the underlying Win32 &lt;code&gt;ReadFile&lt;/code&gt; API. However, a leading &lt;code&gt;&quot;=&quot;&lt;/code&gt; will be silently ignored, even if Perl warnings are enabled.</source>
          <target state="translated">&lt;code&gt;$lBytes&lt;/code&gt; は、読み取りたいバイト数です。 &lt;code&gt;$opBuffer&lt;/code&gt; は自動的に初期化され、その数のバイトを保持するのに十分な大きさのバッファーがあります。他のバッファサイズとは異なり、基になるWin32 &lt;code&gt;ReadFile&lt;/code&gt; APIに大きな値が渡されるのを防ぐために、 &lt;code&gt;$lBytes&lt;/code&gt; 前に &lt;code&gt;&quot;=&quot;&lt;/code&gt; を付ける必要はありません。ただし、Perl警告が有効になっている場合でも、先頭の &lt;code&gt;&quot;=&quot;&lt;/code&gt; は黙って無視されます。</target>
        </trans-unit>
        <trans-unit id="f250ab063fd3f82b3985cf0f95ab4158c77cc30b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$lBytes&lt;/code&gt; is the number of bytes you would like to write. If &lt;code&gt;$pBuffer&lt;/code&gt; is not at least &lt;code&gt;$lBytes&lt;/code&gt; long, &lt;code&gt;WriteFile&lt;/code&gt; croaks. You can specify &lt;code&gt;0&lt;/code&gt; for &lt;code&gt;$lBytes&lt;/code&gt; to write &lt;code&gt;length($pBuffer)&lt;/code&gt; bytes. A leading &lt;code&gt;&quot;=&quot;&lt;/code&gt; on &lt;code&gt;$lBytes&lt;/code&gt; will be silently ignored, even if Perl warnings are enabled.</source>
          <target state="translated">&lt;code&gt;$lBytes&lt;/code&gt; は、書き込みたいバイト数です。場合は &lt;code&gt;$pBuffer&lt;/code&gt; 、少なくともではない &lt;code&gt;$lBytes&lt;/code&gt; 長い、 &lt;code&gt;WriteFile&lt;/code&gt; 関数のcroaks。 &lt;code&gt;$lBytes&lt;/code&gt; に &lt;code&gt;0&lt;/code&gt; を指定して、 &lt;code&gt;length($pBuffer)&lt;/code&gt; バイトを書き込むことができます。Perl警告が有効になっている場合でも、 &lt;code&gt;$lBytes&lt;/code&gt; 先頭の &lt;code&gt;&quot;=&quot;&lt;/code&gt; は黙って無視されます。</target>
        </trans-unit>
        <trans-unit id="92fb03f654491dff73e67a6a9dc080dfb2c3b196" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$lTargetBuf&lt;/code&gt; is the size [in bytes] of the buffer to allocate for &lt;code&gt;$osTargetPath&lt;/code&gt;. See &lt;a href=&quot;#Buffer-Sizes&quot;&gt;&quot;Buffer Sizes&quot;&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;code&gt;$lTargetBuf&lt;/code&gt; に割り当てるバッファの[バイト]のサイズである &lt;code&gt;$osTargetPath&lt;/code&gt; 。詳細については、&lt;a href=&quot;#Buffer-Sizes&quot;&gt;「バッファサイズ」&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="83efa3d29e5637c79c642285dd3530e0f22c58ad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$length&lt;/code&gt; bytes. The only circumstances that this function will not is if end-of-file or an IO error is encountered.</source>
          <target state="translated">&lt;code&gt;$length&lt;/code&gt; バイト。この関数が行わない唯一の状況は、ファイルの終わりまたはIOエラーが発生した場合です。</target>
        </trans-unit>
        <trans-unit id="9ee01c1952b86c42869a7efb510549f20025c565" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$locale_name&lt;/code&gt; may be suffixed with a Unicode script code (four-letter), a Unicode region (territory) code, a Unicode language variant code. These codes are case-insensitive, and separated with &lt;code&gt;'_'&lt;/code&gt; or &lt;code&gt;'-'&lt;/code&gt;. E.g. &lt;code&gt;en_US&lt;/code&gt; for English in USA, &lt;code&gt;az_Cyrl&lt;/code&gt; for Azerbaijani in the Cyrillic script, &lt;code&gt;es_ES_traditional&lt;/code&gt; for Spanish in Spain (Traditional).</source>
          <target state="translated">&lt;code&gt;$locale_name&lt;/code&gt; は、Unicodeスクリプトコード（4文字）、Unicode領域（テリトリー）コード、Unicode言語バリアントコードを付加できます。これらのコードでは大文字と小文字は区別されず、 &lt;code&gt;'_'&lt;/code&gt; または &lt;code&gt;'-'&lt;/code&gt; 区切られます。例えば &lt;code&gt;en_US&lt;/code&gt; のアメリカでの英語のため、 &lt;code&gt;az_Cyrl&lt;/code&gt; キリル文字でアゼルバイジャンため、 &lt;code&gt;es_ES_traditional&lt;/code&gt; スペインでスペイン語（繁体字）。</target>
        </trans-unit>
        <trans-unit id="0da3a700efa05325817988e7228f2435762220d0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$m&lt;/code&gt; is currently just a copy of the original number. The relation between &lt;code&gt;$e&lt;/code&gt; and &lt;code&gt;$m&lt;/code&gt; will stay always the same, though their real values might change.</source>
          <target state="translated">&lt;code&gt;$m&lt;/code&gt; は現在、元の数値の単なるコピーです。 &lt;code&gt;$e&lt;/code&gt; と &lt;code&gt;$m&lt;/code&gt; の関係は常に同じですが、実際の値は変わる可能性があります。</target>
        </trans-unit>
        <trans-unit id="49d7e18c107aa3b0fae11b4d0e4e7f8d0bef1ac7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$mday&lt;/code&gt; is the day of the month and &lt;code&gt;$mon&lt;/code&gt; the month in the range &lt;code&gt;0..11&lt;/code&gt; , with 0 indicating January and 11 indicating December. This makes it easy to get a month name from a list:</source>
          <target state="translated">&lt;code&gt;$mday&lt;/code&gt; は月の日、 &lt;code&gt;$mon&lt;/code&gt; は &lt;code&gt;0..11&lt;/code&gt; の範囲の月です。0は1月を示し、11は12月を示します。これにより、リストから月の名前を簡単に取得できます。</target>
        </trans-unit>
        <trans-unit id="e3ccc1f04c1f163f41a69d11f2e753a8a6797667" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$mday&lt;/code&gt; is the day of the month and &lt;code&gt;$mon&lt;/code&gt; the month in the range &lt;code&gt;0..11&lt;/code&gt;, with 0 indicating January and 11 indicating December. This makes it easy to get a month name from a list:</source>
          <target state="translated">&lt;code&gt;$mday&lt;/code&gt; は月の日であり、 &lt;code&gt;$mon&lt;/code&gt; は &lt;code&gt;0..11&lt;/code&gt; の範囲の月であり、0は1月を示し、11は12月を示します。これにより、リストから月の名前を簡単に取得できます。</target>
        </trans-unit>
        <trans-unit id="5785130e7d9015279e1c121e1125e4216e276b70" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$modeflags&lt;/code&gt; can be the following constants from the &lt;code&gt;Fcntl&lt;/code&gt; module (in the style of the</source>
          <target state="translated">&lt;code&gt;$modeflags&lt;/code&gt; は、 &lt;code&gt;Fcntl&lt;/code&gt; モジュールの次の定数にすることができます（</target>
        </trans-unit>
        <trans-unit id="7750d8ddb4eb819352dc578367b672a062a3c06a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$modeflags&lt;/code&gt; can be the following constants from the &lt;code&gt;Fcntl&lt;/code&gt; module (in the style of the &lt;a href=&quot;http://man.he.net/man2/open&quot;&gt;open(2)&lt;/a&gt; system call),</source>
          <target state="translated">&lt;code&gt;$modeflags&lt;/code&gt; は、 &lt;code&gt;Fcntl&lt;/code&gt; モジュールからの次の定数（&lt;a href=&quot;http://man.he.net/man2/open&quot;&gt;open（2）&lt;/a&gt;システムコールのスタイル）にすることができます。</target>
        </trans-unit>
        <trans-unit id="6acf2ea9b6d10ae54935c06d611f716fbdb1aaec" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$name&lt;/code&gt; is always optional.</source>
          <target state="translated">&lt;code&gt;$name&lt;/code&gt; は常にオプションです。</target>
        </trans-unit>
        <trans-unit id="aa3225d7a46a15452f758ef0d16d4d0692667b4c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$olOutLength&lt;/code&gt; is the number of bytes actually written to &lt;code&gt;$osBuffer&lt;/code&gt; but &lt;code&gt;length($osBuffer)&lt;/code&gt; can also be used to determine this.</source>
          <target state="translated">&lt;code&gt;$olOutLength&lt;/code&gt; は、実際に &lt;code&gt;$osBuffer&lt;/code&gt; に書き込まれたバイト数ですが、 &lt;code&gt;length($osBuffer)&lt;/code&gt; を使用してこれを決定することもできます。</target>
        </trans-unit>
        <trans-unit id="d679662cd372a1559841b9937df3d782f8a474b7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$olRetBytes&lt;/code&gt; is &lt;code&gt;[]&lt;/code&gt; or is a scalar to receive the number of bytes written to &lt;code&gt;$opOutBuf&lt;/code&gt;. Even when &lt;code&gt;$olRetBytes&lt;/code&gt; is &lt;code&gt;[]&lt;/code&gt;, a valid pointer to a &lt;code&gt;DWORD&lt;/code&gt; [and not &lt;code&gt;NULL&lt;/code&gt;] is passed to &lt;code&gt;DeviceIoControl&lt;/code&gt;. In this case, &lt;code&gt;[]&lt;/code&gt; just means that you don't care about the value that might be written to &lt;code&gt;$olRetBytes&lt;/code&gt;, which is usually the case since you can usually use &lt;code&gt;length($opOutBuf)&lt;/code&gt; instead.</source>
          <target state="translated">&lt;code&gt;$olRetBytes&lt;/code&gt; は &lt;code&gt;[]&lt;/code&gt; であるか、 &lt;code&gt;$opOutBuf&lt;/code&gt; 書き込まれたバイト数を受け取るスカラーです。 &lt;code&gt;$olRetBytes&lt;/code&gt; が &lt;code&gt;[]&lt;/code&gt; の場合でも、 &lt;code&gt;DWORD&lt;/code&gt; への有効なポインタ[ &lt;code&gt;NULL&lt;/code&gt; ではない]が &lt;code&gt;DeviceIoControl&lt;/code&gt; に渡されます。この場合、 &lt;code&gt;[]&lt;/code&gt; は、 &lt;code&gt;$olRetBytes&lt;/code&gt; に書き込まれる可能性のある値を気にしないことを意味します。これは、通常、代わりに &lt;code&gt;length($opOutBuf)&lt;/code&gt; 使用できるため、通常はそうです。</target>
        </trans-unit>
        <trans-unit id="de5761538922f568dc3aa366aff6df8bd4cea873" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$olTargetLen&lt;/code&gt; is set to the number of bytes written to &lt;code&gt;$osTargetPath&lt;/code&gt; but you can also use &lt;code&gt;length($osTargetPath)&lt;/code&gt; to determine this.</source>
          <target state="translated">&lt;code&gt;$olTargetLen&lt;/code&gt; は、 &lt;code&gt;$osTargetPath&lt;/code&gt; 書き込まれるバイト数に設定されますが、 &lt;code&gt;length($osTargetPath)&lt;/code&gt; を使用してこれを決定することもできます。</target>
        </trans-unit>
        <trans-unit id="5da747babf046e1caaf295089bb1d860b2f78caf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$opBuffer&lt;/code&gt; will be set to a string containing the bytes read.</source>
          <target state="translated">&lt;code&gt;$opBuffer&lt;/code&gt; は、読み取られたバイトを含む文字列に設定されます。</target>
        </trans-unit>
        <trans-unit id="4c229000c7397986bde4ca014805242b02e82a70" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$opOutBuf&lt;/code&gt; is &lt;code&gt;[]&lt;/code&gt; [for &lt;code&gt;NULL&lt;/code&gt;] or will be set to contain a returned data structure packed into a string. &lt;code&gt;$lOutBuf&lt;/code&gt; indicates how much space to allocate in &lt;code&gt;$opOutBuf&lt;/code&gt; for &lt;code&gt;DeviceIoControl&lt;/code&gt; to store the data structure. If &lt;code&gt;$lOutBuf&lt;/code&gt; is a number and &lt;code&gt;$opOutBuf&lt;/code&gt; already has a buffer allocated for it that is larger than &lt;code&gt;$lOutBuf&lt;/code&gt; bytes, then this larger buffer size will be passed to &lt;code&gt;DeviceIoControl&lt;/code&gt;. However, you can force a specific buffer size to be passed to &lt;code&gt;DeviceIoControl&lt;/code&gt; by prepending a &lt;code&gt;&quot;=&quot;&lt;/code&gt; to the front of &lt;code&gt;$lOutBuf&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$opOutBuf&lt;/code&gt; は &lt;code&gt;[]&lt;/code&gt; [ &lt;code&gt;NULL&lt;/code&gt; の場合]であるか、文字列にパックされた返されたデータ構造を含むように設定されます。 &lt;code&gt;$lOutBuf&lt;/code&gt; は、 &lt;code&gt;DeviceIoControl&lt;/code&gt; がデータ構造を格納するために &lt;code&gt;$opOutBuf&lt;/code&gt; に割り当てるスペースの量を示します。場合は &lt;code&gt;$lOutBuf&lt;/code&gt; 数で、 &lt;code&gt;$opOutBuf&lt;/code&gt; すでによりも大きくなっていることのために割り当てられたバッファがある &lt;code&gt;$lOutBuf&lt;/code&gt; バイトを、この大きなバッファサイズはに渡される &lt;code&gt;DeviceIoControl&lt;/code&gt; 。ただし、 &lt;code&gt;$lOutBuf&lt;/code&gt; 前に &lt;code&gt;&quot;=&quot;&lt;/code&gt; を付けることで、特定のバッファーサイズを &lt;code&gt;DeviceIoControl&lt;/code&gt; に強制的に渡すことができます。</target>
        </trans-unit>
        <trans-unit id="5226904be9c70f7502b0559f9da72e4afae5b888" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$osBuffer&lt;/code&gt; is a scalar to be set to contain the constructed string.</source>
          <target state="translated">&lt;code&gt;$osBuffer&lt;/code&gt; は、構築された文字列を含むように設定されるスカラーです。</target>
        </trans-unit>
        <trans-unit id="d62102f6816affbe4badf7668f9c1c5f87009a06" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$osFsType&lt;/code&gt; is a scalar to be set to the string representing the file system type, such as &lt;code&gt;&quot;FAT&quot;&lt;/code&gt; or &lt;code&gt;&quot;NTFS&quot;&lt;/code&gt;. &lt;code&gt;$lFsType&lt;/code&gt; is the number of bytes to allocate for the &lt;code&gt;$osFsType&lt;/code&gt; buffer [see &lt;a href=&quot;#Buffer-Sizes&quot;&gt;&quot;Buffer Sizes&quot;&lt;/a&gt; for more information].</source>
          <target state="translated">&lt;code&gt;$osFsType&lt;/code&gt; は、 &lt;code&gt;&quot;FAT&quot;&lt;/code&gt; や &lt;code&gt;&quot;NTFS&quot;&lt;/code&gt; などのファイルシステムタイプを表す文字列に設定されるスカラーです。 &lt;code&gt;$lFsType&lt;/code&gt; は、 &lt;code&gt;$osFsType&lt;/code&gt; バッファーに割り当てるバイト数です[詳細については、&lt;a href=&quot;#Buffer-Sizes&quot;&gt;「バッファーサイズ」&lt;/a&gt;を参照してください]。</target>
        </trans-unit>
        <trans-unit id="a8be617de2f77d79de5f8186fee2409bf021f7d5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$osTargetPath&lt;/code&gt; will be assigned a string containing the list of definitions. The definitions are each &lt;code&gt;'\0'&lt;/code&gt;-terminate and are concatenated into the string, most recent first, with an extra &lt;code&gt;'\0'&lt;/code&gt; at the end of the whole string [see &lt;code&gt;GetLogicalDriveStrings&lt;/code&gt; for a sample of this format].</source>
          <target state="translated">&lt;code&gt;$osTargetPath&lt;/code&gt; は、定義のリストを含む文字列が割り当てられます。定義はそれぞれ &lt;code&gt;'\0'&lt;/code&gt; 終了し、文字列に連結されます。最新のものが最初で、文字列全体の最後に &lt;code&gt;'\0'&lt;/code&gt; 追加されます[この形式のサンプルについては &lt;code&gt;GetLogicalDriveStrings&lt;/code&gt; を参照してください]。</target>
        </trans-unit>
        <trans-unit id="4e4f932a4ed46fbead4ec5e02fe5e252937d38f5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$osVolName&lt;/code&gt; is a scalar to be set to the string representing the volume name, also called the file system label. &lt;code&gt;$lVolName&lt;/code&gt; is the number of bytes to allocate for the &lt;code&gt;$osVolName&lt;/code&gt; buffer [see &lt;a href=&quot;#Buffer-Sizes&quot;&gt;&quot;Buffer Sizes&quot;&lt;/a&gt; for more information].</source>
          <target state="translated">&lt;code&gt;$osVolName&lt;/code&gt; は、ボリューム名を表す文字列に設定されるスカラーであり、ファイルシステムラベルとも呼ばれます。 &lt;code&gt;$lVolName&lt;/code&gt; は、 &lt;code&gt;$osVolName&lt;/code&gt; バッファーに割り当てるバイト数です[詳細については、&lt;a href=&quot;#Buffer-Sizes&quot;&gt;「バッファーサイズ」&lt;/a&gt;を参照してください]。</target>
        </trans-unit>
        <trans-unit id="e096eb7061520be9cdee6467cfaaf0c6c9a30f2c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$ouBytesWritten&lt;/code&gt; will be set to the actual number of bytes written unless you specify it as &lt;code&gt;[]&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$ouBytesWritten&lt;/code&gt; は、 &lt;code&gt;[]&lt;/code&gt; として指定しない限り、実際に書き込まれたバイト数に設定されます。</target>
        </trans-unit>
        <trans-unit id="2f544fc5d4090bab651720849b0f078abc7a4e42" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$ouFlags&lt;/code&gt; will be set to an unsigned value having zero or more of the bits &lt;code&gt;HANDLE_FLAG_INHERIT&lt;/code&gt; and &lt;code&gt;HANDLE_FLAG_PROTECT_FROM_CLOSE&lt;/code&gt; set. See the &lt;code&gt;&quot;:HANDLE_FLAG_&quot;&lt;/code&gt; export class for the meanings of these bits.</source>
          <target state="translated">&lt;code&gt;$ouFlags&lt;/code&gt; は、ビット &lt;code&gt;HANDLE_FLAG_INHERIT&lt;/code&gt; および &lt;code&gt;HANDLE_FLAG_PROTECT_FROM_CLOSE&lt;/code&gt; が0個以上設定されている符号なしの値に設定されます。これらのビットの意味については、 &lt;code&gt;&quot;:HANDLE_FLAG_&quot;&lt;/code&gt; エクスポートクラスを参照してください。</target>
        </trans-unit>
        <trans-unit id="20c617048738ed9432833ed80932517f2bdba9e7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$ouFsFlags&lt;/code&gt; is &lt;code&gt;[]&lt;/code&gt; [for &lt;code&gt;NULL&lt;/code&gt;] or will be set to an unsigned integer with bits set indicating properties of the file system:</source>
          <target state="translated">&lt;code&gt;$ouFsFlags&lt;/code&gt; は &lt;code&gt;[]&lt;/code&gt; [ &lt;code&gt;NULL&lt;/code&gt; の場合]であるか、ファイルシステムのプロパティを示すビットが設定された符号なし整数に設定されます。</target>
        </trans-unit>
        <trans-unit id="b87073e47074b293dc14016663fc4bfa79c41b21" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$ouMaxNameLen&lt;/code&gt; is &lt;code&gt;[]&lt;/code&gt; [for &lt;code&gt;NULL&lt;/code&gt;] or will be set to the maximum length allowed for a file name or directory name within the file system.</source>
          <target state="translated">&lt;code&gt;$ouMaxNameLen&lt;/code&gt; は &lt;code&gt;[]&lt;/code&gt; [ &lt;code&gt;NULL&lt;/code&gt; の場合]であるか、ファイルシステム内のファイル名またはディレクトリ名に許可されている最大長に設定されます。</target>
        </trans-unit>
        <trans-unit id="dc5463326b2991e0ea183aa1827ffcbd7a6bb000" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$ouSerialNum&lt;/code&gt; is &lt;code&gt;[]&lt;/code&gt; [for &lt;code&gt;NULL&lt;/code&gt;] or will be set to the numeric value of the volume's serial number.</source>
          <target state="translated">&lt;code&gt;$ouSerialNum&lt;/code&gt; は &lt;code&gt;[]&lt;/code&gt; [ &lt;code&gt;NULL&lt;/code&gt; の場合]であるか、ボリュームのシリアル番号の数値に設定されます。</target>
        </trans-unit>
        <trans-unit id="0d9a64d619ca8f4a2679bb6c5e414e7aea4cf6a8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$pBuffer&lt;/code&gt; is a string containing the bytes to be written.</source>
          <target state="translated">&lt;code&gt;$pBuffer&lt;/code&gt; は、書き込まれるバイトを含む文字列です。</target>
        </trans-unit>
        <trans-unit id="9d52e1256753a681740936d5da28e4353f7c0952" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$pInBuf&lt;/code&gt; is &lt;code&gt;[]&lt;/code&gt; [for &lt;code&gt;NULL&lt;/code&gt;] or a data structure packed into a string. The type of data structure depends on the &lt;code&gt;$uIoControlCode&lt;/code&gt; value. &lt;code&gt;$lInBuf&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt; or the length of the structure in &lt;code&gt;$pInBuf&lt;/code&gt;. If &lt;code&gt;$pInBuf&lt;/code&gt; is not &lt;code&gt;[]&lt;/code&gt; and &lt;code&gt;$lInBuf&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt;, then &lt;code&gt;$lInBuf&lt;/code&gt; will automatically be set to &lt;code&gt;length($pInBuf)&lt;/code&gt; for you.</source>
          <target state="translated">&lt;code&gt;$pInBuf&lt;/code&gt; は &lt;code&gt;[]&lt;/code&gt; [ &lt;code&gt;NULL&lt;/code&gt; の場合]または文字列にパックされたデータ構造です。データ構造のタイプは、 &lt;code&gt;$uIoControlCode&lt;/code&gt; 値によって異なります。 &lt;code&gt;$lInBuf&lt;/code&gt; ある &lt;code&gt;0&lt;/code&gt; または内構造物の長さ &lt;code&gt;$pInBuf&lt;/code&gt; 。場合は &lt;code&gt;$pInBuf&lt;/code&gt; ない &lt;code&gt;[]&lt;/code&gt; と &lt;code&gt;$lInBuf&lt;/code&gt; ある &lt;code&gt;0&lt;/code&gt; 、そして &lt;code&gt;$lInBuf&lt;/code&gt; 自動的に設定されます &lt;code&gt;length($pInBuf)&lt;/code&gt; あなたのため。</target>
        </trans-unit>
        <trans-unit id="0d3aa259c33e17c2855e923bed54d98da1923dca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$pOverlapped&lt;/code&gt; is &lt;code&gt;[]&lt;/code&gt; or is a &lt;code&gt;OVERLAPPED&lt;/code&gt; structure packed into a string. This is only useful if &lt;code&gt;$hDevice&lt;/code&gt; was opened with the &lt;code&gt;FILE_FLAG_OVERLAPPED&lt;/code&gt; flag set.</source>
          <target state="translated">&lt;code&gt;$pOverlapped&lt;/code&gt; は &lt;code&gt;[]&lt;/code&gt; であるか、文字列にパックされた &lt;code&gt;OVERLAPPED&lt;/code&gt; 構造体です。これは、 &lt;code&gt;FILE_FLAG_OVERLAPPED&lt;/code&gt; フラグが設定された状態で &lt;code&gt;$hDevice&lt;/code&gt; が開かれた場合にのみ役立ちます。</target>
        </trans-unit>
        <trans-unit id="8372cee334f34cc89b8365782a04d4b8e02c7a5e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$pOverlapped&lt;/code&gt; is &lt;code&gt;[]&lt;/code&gt; or is a &lt;code&gt;OVERLAPPED&lt;/code&gt; structure packed into a string. This is only useful if &lt;code&gt;$hFile&lt;/code&gt; was opened with the &lt;code&gt;FILE_FLAG_OVERLAPPED&lt;/code&gt; flag set.</source>
          <target state="translated">&lt;code&gt;$pOverlapped&lt;/code&gt; は &lt;code&gt;[]&lt;/code&gt; であるか、文字列にパックされた &lt;code&gt;OVERLAPPED&lt;/code&gt; 構造体です。これは、 &lt;code&gt;$hFile&lt;/code&gt; が &lt;code&gt;FILE_FLAG_OVERLAPPED&lt;/code&gt; フラグを設定して開かれた場合にのみ役立ちます。</target>
        </trans-unit>
        <trans-unit id="43f8700912df3c69b625dd43bfe42a25b5cdca08" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$pOverlapped&lt;/code&gt; is &lt;code&gt;[]&lt;/code&gt; or is an &lt;code&gt;OVERLAPPED&lt;/code&gt; structure packed into a string. This is only useful if &lt;code&gt;$hFile&lt;/code&gt; was opened with the &lt;code&gt;FILE_FLAG_OVERLAPPED&lt;/code&gt; flag set.</source>
          <target state="translated">&lt;code&gt;$pOverlapped&lt;/code&gt; は &lt;code&gt;[]&lt;/code&gt; であるか、文字列にパックされた &lt;code&gt;OVERLAPPED&lt;/code&gt; 構造体です。これは、 &lt;code&gt;$hFile&lt;/code&gt; が &lt;code&gt;FILE_FLAG_OVERLAPPED&lt;/code&gt; フラグを設定して開かれた場合にのみ役立ちます。</target>
        </trans-unit>
        <trans-unit id="3543721e5ad1b338128ddd5eb26b6e51e597a3fb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$pSecAttr&lt;/code&gt; should either be &lt;code&gt;[]&lt;/code&gt; [for &lt;code&gt;NULL&lt;/code&gt;] or a &lt;code&gt;SECURITY_ATTRIBUTES&lt;/code&gt; data structure packed into a string. For example, if &lt;code&gt;$pSecDesc&lt;/code&gt; contains a &lt;code&gt;SECURITY_DESCRIPTOR&lt;/code&gt; structure packed into a string, perhaps via:</source>
          <target state="translated">&lt;code&gt;$pSecAttr&lt;/code&gt; どちらかでなければなりません &lt;code&gt;[]&lt;/code&gt; [用 &lt;code&gt;NULL&lt;/code&gt; ]または &lt;code&gt;SECURITY_ATTRIBUTES&lt;/code&gt; の文字列にパックされたデータ構造。たとえば、 &lt;code&gt;$pSecDesc&lt;/code&gt; に &lt;code&gt;SECURITY_DESCRIPTOR&lt;/code&gt; 構造体が文字列にパックされている場合、おそらく次のようになります。</target>
        </trans-unit>
        <trans-unit id="7819b4039912ccb63bc12cf0d2cfa2a729525b93" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$pSecurityAttributes&lt;/code&gt; should contain a &lt;code&gt;SECURITY_ATTRIBUTES&lt;/code&gt; structure packed into a string or &lt;code&gt;[]&lt;/code&gt; [the default].</source>
          <target state="translated">&lt;code&gt;$pSecurityAttributes&lt;/code&gt; は、文字列または &lt;code&gt;[]&lt;/code&gt; [デフォルト]にパックされた &lt;code&gt;SECURITY_ATTRIBUTES&lt;/code&gt; 構造が含まれている必要があります。</target>
        </trans-unit>
        <trans-unit id="eb507cbf6b5e45462950676f822291eab2968371" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$path&lt;/code&gt; defines the file name (which need not exist), &lt;code&gt;$data&lt;/code&gt; the file contents, and &lt;code&gt;$opt&lt;/code&gt; is a reference to a hash of attributes which may be used to override the default attributes (fields in the tar header), which are described above in the Accessors section.</source>
          <target state="translated">&lt;code&gt;$path&lt;/code&gt; はファイル名（存在する必要はない）を定義し、 &lt;code&gt;$data&lt;/code&gt; はファイルの内容を定義します。 &lt;code&gt;$opt&lt;/code&gt; は、デフォルトの属性（tarヘッダーのフィールド）を上書きするために使用できる属性のハッシュへの参照です。上記の「アクセサ」セクション。</target>
        </trans-unit>
        <trans-unit id="792b0d67b119a03fdfa00f0d381963928e8acf0c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$perms&lt;/code&gt; is the file permissions bits to use if new database files are created. This parameter is mandatory even when not creating a new database. The permissions will be reduced by the user's umask so the usual value here would be 0666, or if some very private data then 0600. (See &lt;a href=&quot;functions/umask&quot;&gt;umask&lt;/a&gt;.)</source>
          <target state="translated">&lt;code&gt;$perms&lt;/code&gt; は、新しいデータベースファイルが作成された場合に使用するファイル許可ビットです。このパラメーターは、新しいデータベースを作成しない場合でも必須です。許可はユーザーのumaskによって削減されるため、ここでの通常の値は0666になるか、非常にプライベートなデータの場合は0600になります（&lt;a href=&quot;functions/umask&quot;&gt;umaskを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="e7665628899a005326a32fc04f2e51f26d221132" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$perms&lt;/code&gt; is the file permissions bits to use if new database files are created. This parameter is mandatory even when not creating a new database. The permissions will be reduced by the user's umask so the usual value here would be 0666, or if some very private data then 0600. (See &lt;a href=&quot;perlfunc#umask&quot;&gt;&quot;umask&quot; in perlfunc&lt;/a&gt;.)</source>
          <target state="translated">&lt;code&gt;$perms&lt;/code&gt; は、新しいデータベースファイルが作成された場合に使用するファイルパーミッションビットです。このパラメーターは、新しいデータベースを作成しない場合でも必須です。権限はユーザーのumaskによって削減されるため、ここでの通常の値は0666になります。または、非常にプライベートなデータの場合は0600になります（&lt;a href=&quot;perlfunc#umask&quot;&gt;perlfuncの「umask」を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="6996916e131ffdd2099b6960e83cf47a766c5cba" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$priority&lt;/code&gt; can specify a level, or a level and a facility. Levels and facilities can be given as strings or as macros. When using the &lt;code&gt;eventlog&lt;/code&gt; mechanism, priorities &lt;code&gt;DEBUG&lt;/code&gt; and &lt;code&gt;INFO&lt;/code&gt; are mapped to event type &lt;code&gt;informational&lt;/code&gt; , &lt;code&gt;NOTICE&lt;/code&gt; and &lt;code&gt;WARNING&lt;/code&gt; to &lt;code&gt;warning&lt;/code&gt; and &lt;code&gt;ERR&lt;/code&gt; to &lt;code&gt;EMERG&lt;/code&gt; to &lt;code&gt;error&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;$priority&lt;/code&gt; は、レベル、またはレベルと施設を指定できます。レベルと機能は、文字列またはマクロとして指定できます。 &lt;code&gt;eventlog&lt;/code&gt; メカニズムを使用する場合、優先度 &lt;code&gt;DEBUG&lt;/code&gt; および &lt;code&gt;INFO&lt;/code&gt; はイベントタイプ &lt;code&gt;informational&lt;/code&gt; に、 &lt;code&gt;NOTICE&lt;/code&gt; および &lt;code&gt;WARNING&lt;/code&gt; は &lt;code&gt;warning&lt;/code&gt; 、 &lt;code&gt;ERR&lt;/code&gt; は &lt;code&gt;EMERG&lt;/code&gt; に &lt;code&gt;error&lt;/code&gt; にマッピングされます。</target>
        </trans-unit>
        <trans-unit id="15cea6082f477fe2c06c8fca9dd905437a202769" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$priority&lt;/code&gt; can specify a level, or a level and a facility. Levels and facilities can be given as strings or as macros. When using the &lt;code&gt;eventlog&lt;/code&gt; mechanism, priorities &lt;code&gt;DEBUG&lt;/code&gt; and &lt;code&gt;INFO&lt;/code&gt; are mapped to event type &lt;code&gt;informational&lt;/code&gt;, &lt;code&gt;NOTICE&lt;/code&gt; and &lt;code&gt;WARNING&lt;/code&gt; to &lt;code&gt;warning&lt;/code&gt; and &lt;code&gt;ERR&lt;/code&gt; to &lt;code&gt;EMERG&lt;/code&gt; to &lt;code&gt;error&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$priority&lt;/code&gt; は、レベル、またはレベルとファシリティを指定できます。レベルとファシリティは、文字列またはマクロとして指定できます。使用する場合は &lt;code&gt;eventlog&lt;/code&gt; のメカニズムを、優先順位 &lt;code&gt;DEBUG&lt;/code&gt; と &lt;code&gt;INFO&lt;/code&gt; は、イベントタイプにマップされている &lt;code&gt;informational&lt;/code&gt; 、 &lt;code&gt;NOTICE&lt;/code&gt; および &lt;code&gt;WARNING&lt;/code&gt; に &lt;code&gt;warning&lt;/code&gt; し、 &lt;code&gt;ERR&lt;/code&gt; に &lt;code&gt;EMERG&lt;/code&gt; に &lt;code&gt;error&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="bb3f938608861924071f5867f7eeb4586a8165fb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$reg&lt;/code&gt; can also be interpolated into a larger regexp:</source>
          <target state="translated">&lt;code&gt;$reg&lt;/code&gt; は、より大きな正規表現に補間することもできます。</target>
        </trans-unit>
        <trans-unit id="612a97216c18e1ebec4ff63ca7425527af6de069" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$replacement&lt;/code&gt; can be a &lt;code&gt;CODEREF&lt;/code&gt; , taking the matching part as an argument, and returning a string to replace the matching part (a bit similar to &lt;code&gt;&lt;a href=&quot;../functions/s&quot;&gt;s/(..)/$coderef-&amp;gt;($1)/e&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;$replacement&lt;/code&gt; は、一致する部分を引数として取り、一致する部分を置き換える文字列を返す &lt;code&gt;CODEREF&lt;/code&gt; にすることができます（ &lt;code&gt;&lt;a href=&quot;../functions/s&quot;&gt;s/(..)/$coderef-&amp;gt;($1)/e&lt;/a&gt;&lt;/code&gt; 少し似ています）。</target>
        </trans-unit>
        <trans-unit id="fc2e25ba6b13db0d82967d4007e8e8189361595b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$replacement&lt;/code&gt; can be a &lt;code&gt;CODEREF&lt;/code&gt; , taking the matching part as an argument, and returning a string to replace the matching part (a bit similar to &lt;code&gt;&lt;a href=&quot;../functions/s&quot;&gt;s/(..)/$coderef-&amp;gt;($1)/eg&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;$replacement&lt;/code&gt; は &lt;code&gt;CODEREF&lt;/code&gt; にすることができ、一致する部分を引数として取り、一致する部分を置き換える文字列を返します（ &lt;code&gt;&lt;a href=&quot;../functions/s&quot;&gt;s/(..)/$coderef-&amp;gt;($1)/eg&lt;/a&gt;&lt;/code&gt; 似ています）。</target>
        </trans-unit>
        <trans-unit id="202e61bbea4a0d6d9e400f4f5d166336a7eb21c9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$replacement&lt;/code&gt; can be a &lt;code&gt;CODEREF&lt;/code&gt;, taking the matching part as an argument, and returning a string to replace the matching part (a bit similar to &lt;code&gt;s/(..)/$coderef-&amp;gt;($1)/e&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;$replacement&lt;/code&gt; &lt;code&gt;CODEREF&lt;/code&gt; はCODEREFにすることができ、一致する部分を引数として取り、一致する部分を置き換える文字列を返します（ &lt;code&gt;s/(..)/$coderef-&amp;gt;($1)/e&lt;/code&gt; 少し似ています）。</target>
        </trans-unit>
        <trans-unit id="f8eefb954c03d4aa74f9b0e96c85571cef015837" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$replacement&lt;/code&gt; can be a &lt;code&gt;CODEREF&lt;/code&gt;, taking the matching part as an argument, and returning a string to replace the matching part (a bit similar to &lt;code&gt;s/(..)/$coderef-&amp;gt;($1)/eg&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;$replacement&lt;/code&gt; &lt;code&gt;CODEREF&lt;/code&gt; はCODEREFにすることができ、一致する部分を引数として取り、一致する部分を置き換える文字列を返します（ &lt;code&gt;s/(..)/$coderef-&amp;gt;($1)/eg&lt;/code&gt; 少し似ています）。</target>
        </trans-unit>
        <trans-unit id="bd76eef9dc33935b7a30db6801cd3b07d380d5d4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$rvhvOptions&lt;/code&gt; is a reference to a hash where any keys must be from the list &lt;code&gt;qw( Access Create Share Attributes Flags Security Model )&lt;/code&gt;. The meaning of the value depends on the key name, as described below. Any option values in &lt;code&gt;$rvhvOptions&lt;/code&gt; override the settings from &lt;code&gt;$svAccess&lt;/code&gt; and &lt;code&gt;$svShare&lt;/code&gt; if they conflict.</source>
          <target state="translated">&lt;code&gt;$rvhvOptions&lt;/code&gt; は、キーがリスト &lt;code&gt;qw( Access Create Share Attributes Flags Security Model )&lt;/code&gt; からのものでなければならないハッシュへの参照です。値の意味は、以下に説明するように、キー名によって異なります。 &lt;code&gt;$rvhvOptions&lt;/code&gt; オプション値は、競合する場合、 &lt;code&gt;$svAccess&lt;/code&gt; と &lt;code&gt;$svShare&lt;/code&gt; 設定を上書きします。</target>
        </trans-unit>
        <trans-unit id="528b5fef55798884841fb79c1c9b71054005f2f7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$sAccess&lt;/code&gt; should be a string of zero or more characters from &lt;code&gt;&quot;qrw&quot;&lt;/code&gt; specifying the type of access desired: &quot;query&quot; or &lt;code&gt;0&lt;/code&gt;, &quot;read&quot; or &lt;code&gt;GENERIC_READ&lt;/code&gt; [the default], or &quot;write&quot; or &lt;code&gt;GENERIC_WRITE&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$sAccess&lt;/code&gt; は、必要なアクセスのタイプを指定する &lt;code&gt;&quot;qrw&quot;&lt;/code&gt; からの0文字以上の文字列である必要があります：「query」または &lt;code&gt;0&lt;/code&gt; 、「read」または &lt;code&gt;GENERIC_READ&lt;/code&gt; [デフォルト]、または「write」または &lt;code&gt;GENERIC_WRITE&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c3056b30c79e216ede3540f0d13052e16865f0cd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$sCreate&lt;/code&gt; should be a string containing zero or one character from &lt;code&gt;&quot;ktn&quot;&lt;/code&gt; and zero or one character from &lt;code&gt;&quot;ce&quot;&lt;/code&gt;. These stand for &quot;Keep if exists&quot;, &quot;Truncate if exists&quot;, &quot;New file only&quot;, &quot;Create if none&quot;, and &quot;Existing file only&quot;. These are translated into a &lt;code&gt;$uCreate&lt;/code&gt; value.</source>
          <target state="translated">&lt;code&gt;$sCreate&lt;/code&gt; は、 &lt;code&gt;&quot;ktn&quot;&lt;/code&gt; 0文字または1文字と、 &lt;code&gt;&quot;ce&quot;&lt;/code&gt; 0文字または1文字を含む文字列である必要があります。これらは、「存在する場合は保持する」、「存在する場合は切り捨てる」、「新しいファイルのみ」、「存在しない場合は作成する」、および「既存のファイルのみ」を表します。これらは &lt;code&gt;$uCreate&lt;/code&gt; 値に変換されます。</target>
        </trans-unit>
        <trans-unit id="0dad52a46f057f12ae74641d8d0d02f9cda54081" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$sDosDeviceName&lt;/code&gt; is the name of a DOS device for which we'd like to add or delete a definition.</source>
          <target state="translated">&lt;code&gt;$sDosDeviceName&lt;/code&gt; は、定義を追加または削除するDOSデバイスの名前です。</target>
        </trans-unit>
        <trans-unit id="33c3a46a9a124010238c4dc2f830f4b78d649f7a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$sDosDeviceName&lt;/code&gt; is the name of the &quot;DOS&quot; device whose definitions we want. For example, &lt;code&gt;&quot;C:&quot;&lt;/code&gt;, &lt;code&gt;&quot;COM1&quot;&lt;/code&gt;, or &lt;code&gt;&quot;PhysicalDrive0&quot;&lt;/code&gt;. If &lt;code&gt;$sDosDeviceName&lt;/code&gt; is &lt;code&gt;[]&lt;/code&gt; [for &lt;code&gt;NULL&lt;/code&gt;], the list of all DOS device names is returned instead.</source>
          <target state="translated">&lt;code&gt;$sDosDeviceName&lt;/code&gt; は、定義が必要な「DOS」デバイスの名前です。たとえば、 &lt;code&gt;&quot;C:&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;COM1&quot;&lt;/code&gt; 、または &lt;code&gt;&quot;PhysicalDrive0&quot;&lt;/code&gt; です。場合は &lt;code&gt;$sDosDeviceName&lt;/code&gt; ある &lt;code&gt;[]&lt;/code&gt; [用 &lt;code&gt;NULL&lt;/code&gt; ]、すべてのDOSデバイス名のリストが代わりに返されます。</target>
        </trans-unit>
        <trans-unit id="9e2fd75a918b49152306b6a09c49f469659d5cc9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$sMode&lt;/code&gt; is string of zero or more letters from &lt;code&gt;&quot;rwatb&quot;&lt;/code&gt;. These are translated into a combination &lt;code&gt;O_RDONLY&lt;/code&gt; [&lt;code&gt;&quot;r&quot;&lt;/code&gt;], &lt;code&gt;O_WRONLY&lt;/code&gt; [&lt;code&gt;&quot;w&quot;&lt;/code&gt;], &lt;code&gt;O_RDWR&lt;/code&gt; [&lt;code&gt;&quot;rw&quot;&lt;/code&gt;], &lt;code&gt;O_APPEND&lt;/code&gt; [&lt;code&gt;&quot;a&quot;&lt;/code&gt;], &lt;code&gt;O_TEXT&lt;/code&gt; [&lt;code&gt;&quot;t&quot;&lt;/code&gt;], and &lt;code&gt;O_BINARY&lt;/code&gt; [&lt;code&gt;&quot;b&quot;&lt;/code&gt;] flags [see the &lt;a href=&quot;fcntl&quot;&gt;Fcntl&lt;/a&gt; module] that is passed to &lt;code&gt;OsFHandleOpenFd&lt;/code&gt;. Currently only &lt;code&gt;O_APPEND&lt;/code&gt; and &lt;code&gt;O_TEXT&lt;/code&gt; have any significance.</source>
          <target state="translated">&lt;code&gt;$sMode&lt;/code&gt; は、 &lt;code&gt;&quot;rwatb&quot;&lt;/code&gt; からの0文字以上の文字列です。これらは、 &lt;code&gt;O_RDONLY&lt;/code&gt; [ &lt;code&gt;&quot;r&quot;&lt;/code&gt; ]、 &lt;code&gt;O_WRONLY&lt;/code&gt; [ &lt;code&gt;&quot;w&quot;&lt;/code&gt; ]、 &lt;code&gt;O_RDWR&lt;/code&gt; [ &lt;code&gt;&quot;rw&quot;&lt;/code&gt; ]、 &lt;code&gt;O_APPEND&lt;/code&gt; [ &lt;code&gt;&quot;a&quot;&lt;/code&gt; ]、 &lt;code&gt;O_TEXT&lt;/code&gt; [ &lt;code&gt;&quot;t&quot;&lt;/code&gt; ]、および &lt;code&gt;O_BINARY&lt;/code&gt; [ &lt;code&gt;&quot;b&quot;&lt;/code&gt; ]フラグの組み合わせに変換されます[ &quot;b&quot; ] &lt;a href=&quot;fcntl&quot;&gt;OsFHandleOpenFdに&lt;/a&gt;渡される &lt;code&gt;OsFHandleOpenFd&lt;/code&gt; Fcntlモジュール]を参照してください。現在、 &lt;code&gt;O_APPEND&lt;/code&gt; と &lt;code&gt;O_TEXT&lt;/code&gt; のみが重要です。</target>
        </trans-unit>
        <trans-unit id="29acb46d21100513c91871f6507e8fc966aff389" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$sOldFileName&lt;/code&gt; is the path to the file to be copied. &lt;code&gt;$sNewFileName&lt;/code&gt; is the path to where the file should be copied. Note that you can &lt;b&gt;NOT&lt;/b&gt; just specify a path to a directory in &lt;code&gt;$sNewFileName&lt;/code&gt; to copy the file to that directory using the same file name.</source>
          <target state="translated">&lt;code&gt;$sOldFileName&lt;/code&gt; は、コピーするファイルへのパスです。 &lt;code&gt;$sNewFileName&lt;/code&gt; は、ファイルをコピーする場所へのパスです。 &lt;code&gt;$sNewFileName&lt;/code&gt; 内のディレクトリへのパスを指定して、同じファイル名を使用してそのディレクトリにファイルをコピーすることはでき&lt;b&gt;ない&lt;/b&gt;ことに注意してください。</target>
        </trans-unit>
        <trans-unit id="de18c8d5d1a275b72cb0e0f81966ae1c4837aa60" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$sPath&lt;/code&gt; can start with &lt;code&gt;&quot;//./&quot;&lt;/code&gt; to indicate that the rest of the path is the name of a &quot;DOS device.&quot; You can use &lt;code&gt;QueryDosDevice&lt;/code&gt; to list all current DOS devices and can add or delete them with &lt;code&gt;DefineDosDevice&lt;/code&gt;. If you get the source-code distribution of this module from CPAN, then it includes an example script,</source>
          <target state="translated">&lt;code&gt;$sPath&lt;/code&gt; は &lt;code&gt;&quot;//./&quot;&lt;/code&gt; 始まることができ、パスの残りの部分が「DOSデバイス」の名前であることを示します。 &lt;code&gt;QueryDosDevice&lt;/code&gt; を使用して、現在のすべてのDOSデバイスを一覧表示し、 &lt;code&gt;DefineDosDevice&lt;/code&gt; を使用してそれらを追加または削除できます。このモジュールのソースコード配布をCPANから取得する場合は、サンプルスクリプトが含まれています。</target>
        </trans-unit>
        <trans-unit id="37fc37ac354c1b2e0db11d8f58f64fbab4c9170d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$sPath&lt;/code&gt; can use &lt;code&gt;&quot;/&quot;&lt;/code&gt; or &lt;code&gt;&quot;\\&quot;&lt;/code&gt; as path delimiters and can even mix the two. We will usually only use &lt;code&gt;&quot;/&quot;&lt;/code&gt; in our examples since using &lt;code&gt;&quot;\\&quot;&lt;/code&gt; is usually harder to read.</source>
          <target state="translated">&lt;code&gt;$sPath&lt;/code&gt; は、パス区切り文字として &lt;code&gt;&quot;/&quot;&lt;/code&gt; または &lt;code&gt;&quot;\\&quot;&lt;/code&gt; を使用でき、2つを混在させることもできます。 &lt;code&gt;&quot;\\&quot;&lt;/code&gt; 使用は通常読みにくいため、通常、例では &lt;code&gt;&quot;/&quot;&lt;/code&gt; のみを使用します。</target>
        </trans-unit>
        <trans-unit id="a2e3fb7b23640f5db307dc8ade891627f72d63da" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$sPath&lt;/code&gt; is the path to the file [or device, etc.] to be opened.</source>
          <target state="translated">&lt;code&gt;$sPath&lt;/code&gt; は、開くファイル[またはデバイスなど]へのパスです。</target>
        </trans-unit>
        <trans-unit id="7c359589f748cdbd85aa59ea4828cfee65114196" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$sPath&lt;/code&gt; is the path to the file [or device, etc.] to be opened. See &lt;code&gt;CreateFile&lt;/code&gt; for more information on possible special values for &lt;code&gt;$sPath&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$sPath&lt;/code&gt; は、開くファイル[またはデバイスなど]へのパスです。 &lt;code&gt;$sPath&lt;/code&gt; 可能な特別な値の詳細については、 &lt;code&gt;CreateFile&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="83867a0429e4fb57dddf6f47f32eb678c17e3c52" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$sRootPath&lt;/code&gt; is a string specifying the path to the root of the file system, for example, &lt;code&gt;&quot;C:/&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$sRootPath&lt;/code&gt; は、ファイルシステムのルートへのパスを指定する文字列です（例 &lt;code&gt;&quot;C:/&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9129aa7df235870c0c771ec91bcc99781354edfa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$sShare&lt;/code&gt; should be a string with zero or more characters from &lt;code&gt;&quot;rwd&quot;&lt;/code&gt; that is translated into a &lt;code&gt;$uShare&lt;/code&gt; value. &lt;code&gt;&quot;rw&quot;&lt;/code&gt; is the default.</source>
          <target state="translated">&lt;code&gt;$sShare&lt;/code&gt; は、 &lt;code&gt;$uShare&lt;/code&gt; 値に変換される &lt;code&gt;&quot;rwd&quot;&lt;/code&gt; からの0文字以上の文字列である必要があります。 &lt;code&gt;&quot;rw&quot;&lt;/code&gt; がデフォルトです。</target>
        </trans-unit>
        <trans-unit id="9c48e77bafc3754d079037a6c4cad8f374994041" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$sTargetPath&lt;/code&gt; is the DOS device's specific definition that you wish to add or delete. For &lt;code&gt;DDD_RAW_TARGET_PATH&lt;/code&gt;, these usually start with &lt;code&gt;&quot;\\Device\\&quot;&lt;/code&gt;. If the &lt;code&gt;DDD_RAW_TARGET_PATH&lt;/code&gt; bit is not set, then &lt;code&gt;$sTargetPath&lt;/code&gt; is just an ordinary path to some file or directory, providing the functionality of the &lt;b&gt;subst&lt;/b&gt; command.</source>
          <target state="translated">&lt;code&gt;$sTargetPath&lt;/code&gt; は、追加または削除するDOSデバイスの特定の定義です。 &lt;code&gt;DDD_RAW_TARGET_PATH&lt;/code&gt; 、これらは通常で始まり &lt;code&gt;&quot;\\Device\\&quot;&lt;/code&gt; 。 &lt;code&gt;DDD_RAW_TARGET_PATH&lt;/code&gt; ビットが設定されていない場合、 &lt;code&gt;$sTargetPath&lt;/code&gt; はファイルまたはディレクトリへの通常のパスであり、&lt;b&gt;subst&lt;/b&gt;コマンドの機能を提供します。</target>
        </trans-unit>
        <trans-unit id="fb9e4971d52d96610e270b7cd755e674281c544d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$size&lt;/code&gt; bytes.</source>
          <target state="translated">&lt;code&gt;$size&lt;/code&gt; バイト。</target>
        </trans-unit>
        <trans-unit id="4be46043ab0b51c9c5589553a80b54c97bf5b238" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$source&lt;/code&gt; is a &lt;a href=&quot;TAP::Parser::Source&quot;&gt;TAP::Parser::Source&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;$source&lt;/code&gt; は&lt;a href=&quot;TAP::Parser::Source&quot;&gt;TAP :: Parser :: Source&lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="8f70dd1ada08aa4e44016ed5a68169472c4c2ea1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$string&lt;/code&gt; is used as a string under character semantics (see</source>
          <target state="translated">&lt;code&gt;$string&lt;/code&gt; は、文字セマンティクスの下で文字列として使用されます（</target>
        </trans-unit>
        <trans-unit id="36b02cbb93fdd6beef91ca33a69881f090bb7f29" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$string&lt;/code&gt; is used as a string under character semantics (see &lt;a href=&quot;perlunicode&quot;&gt;perlunicode&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;$string&lt;/code&gt; は、文字セマンティクスの下で文字列として使用されます（&lt;a href=&quot;perlunicode&quot;&gt;perlunicodeを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="0e63b86218e785ebe89000e4a896ddd2dc1a4e96" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$svAccess&lt;/code&gt; can be a number containing the bit mask representing the specific type(s) of access to the file that you desire. See the &lt;code&gt;$uAccess&lt;/code&gt; parameter to &lt;code&gt;CreateFile&lt;/code&gt; for more information on these values.</source>
          <target state="translated">&lt;code&gt;$svAccess&lt;/code&gt; は、必要なファイルへの特定のタイプのアクセスを表すビットマスクを含む数値にすることができます。これらの値の詳細については、 &lt;code&gt;CreateFile&lt;/code&gt; の &lt;code&gt;$uAccess&lt;/code&gt; パラメーターを参照してください。</target>
        </trans-unit>
        <trans-unit id="78ad6b02350e7e9e9780eaf220cb7384c7795c1b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$svAccess&lt;/code&gt; is designed to be &quot;do what I mean&quot;, so you can skip the rest of its explanation unless you are interested in the complex details. Note that, if you want write access to a device, you need to specify &lt;code&gt;&quot;k&quot;&lt;/code&gt; [and perhaps &lt;code&gt;&quot;e&quot;&lt;/code&gt;, as in &lt;code&gt;&quot;w ke&quot;&lt;/code&gt; or &lt;code&gt;&quot;rw ke&quot;&lt;/code&gt;] since Win32 suggests &lt;code&gt;OPEN_EXISTING&lt;/code&gt; be used when opening a device.</source>
          <target state="translated">&lt;code&gt;$svAccess&lt;/code&gt; は「私が言いたいことをする」ように設計されているので、複雑な詳細に興味がない限り、残りの説明をスキップできます。デバイスへの書き込みアクセスが必要な場合は、デバイスを開くときに &lt;code&gt;OPEN_EXISTING&lt;/code&gt; を使用することをWin32が提案しているため、 &lt;code&gt;&quot;k&quot;&lt;/code&gt; [および &lt;code&gt;&quot;e&quot;&lt;/code&gt; wke &lt;code&gt;&quot;w ke&quot;&lt;/code&gt; や &lt;code&gt;&quot;rw ke&quot;&lt;/code&gt; rwke 」のように「e」 ]を指定する必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="f93ae1889d1ef66ae7200713cd769d0a31a95e17" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$svShare&lt;/code&gt; controls how the file is shared, that is, whether other processes can have read, write, and/or delete access to the file while we have it opened. &lt;code&gt;$svShare&lt;/code&gt; will usually be a string containing zero or more characters from &lt;code&gt;&quot;rwd&quot;&lt;/code&gt; but can also be a numeric bit mask.</source>
          <target state="translated">&lt;code&gt;$svShare&lt;/code&gt; は、ファイルの共有方法、つまり、ファイルを開いているときに他のプロセスがファイルへの読み取り、書き込み、削除のアクセス権を持つことができるかどうかを制御します。 &lt;code&gt;$svShare&lt;/code&gt; は通常、 &lt;code&gt;&quot;rwd&quot;&lt;/code&gt; 0文字以上を含む文字列ですが、数値ビットマスクにすることもできます。</target>
        </trans-unit>
        <trans-unit id="6fa4f7caba79ad8e78b5b2ec3e5d6363a246c4bb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$swDeviceName&lt;/code&gt; is Unicode and Unicode is written to &lt;code&gt;$oswTargetPath&lt;/code&gt;. &lt;code&gt;$lwTargetBuf&lt;/code&gt; and &lt;code&gt;$olwTargetLen&lt;/code&gt; are measured as number of &lt;code&gt;WCHAR&lt;/code&gt;s.</source>
          <target state="translated">&lt;code&gt;$swDeviceName&lt;/code&gt; はUnicodeであり、Unicodeは &lt;code&gt;$oswTargetPath&lt;/code&gt; 書き込まれます。 &lt;code&gt;$lwTargetBuf&lt;/code&gt; および &lt;code&gt;$olwTargetLen&lt;/code&gt; は、 &lt;code&gt;WCHAR&lt;/code&gt; の数として測定されます。</target>
        </trans-unit>
        <trans-unit id="1db26d6ce3a2840baee85885fdd16f49ef697186" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$swDosDeviceName&lt;/code&gt; and &lt;code&gt;$swTargetPath&lt;/code&gt; are Unicode.</source>
          <target state="translated">&lt;code&gt;$swDosDeviceName&lt;/code&gt; と &lt;code&gt;$swTargetPath&lt;/code&gt; はUnicodeです。</target>
        </trans-unit>
        <trans-unit id="e1c0f79064a6bf402c769b84a2a4492b1efc61ec" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$swFileName&lt;/code&gt; is Unicode.</source>
          <target state="translated">&lt;code&gt;$swFileName&lt;/code&gt; はUnicodeです。</target>
        </trans-unit>
        <trans-unit id="1e4fe2da0f1608e5a1bb748e5bfde89399083db8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$swOldFileName&lt;/code&gt; and &lt;code&gt;$swNewFileName&lt;/code&gt; are Unicode strings.</source>
          <target state="translated">&lt;code&gt;$swOldFileName&lt;/code&gt; と &lt;code&gt;$swNewFileName&lt;/code&gt; はUnicode文字列です。</target>
        </trans-unit>
        <trans-unit id="bc2327a4bd2e739f8af078adf4b82bc94fc4e8d9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$swOldName&lt;/code&gt; and &lt;code&gt;$swNewName&lt;/code&gt; are Unicode.</source>
          <target state="translated">&lt;code&gt;$swOldName&lt;/code&gt; と &lt;code&gt;$swNewName&lt;/code&gt; はUnicodeです。</target>
        </trans-unit>
        <trans-unit id="c6d8c168397bc410fe0cfabdc8474585a786e63a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$swPath&lt;/code&gt; is Unicode.</source>
          <target state="translated">&lt;code&gt;$swPath&lt;/code&gt; はUnicodeです。</target>
        </trans-unit>
        <trans-unit id="708e1f64c60ed2c49222651686bb9cd1c2d76aaa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$swRootPath&lt;/code&gt; is Unicode and Unicode is written to &lt;code&gt;$oswVolName&lt;/code&gt; and &lt;code&gt;$oswFsType&lt;/code&gt;. &lt;code&gt;$lwVolName&lt;/code&gt; and &lt;code&gt;$lwFsType&lt;/code&gt; are measures as number of &lt;code&gt;WCHAR&lt;/code&gt;s.</source>
          <target state="translated">&lt;code&gt;$swRootPath&lt;/code&gt; はUnicodeであり、Unicodeは &lt;code&gt;$oswVolName&lt;/code&gt; と &lt;code&gt;$oswFsType&lt;/code&gt; ます。 &lt;code&gt;$lwVolName&lt;/code&gt; と &lt;code&gt;$lwFsType&lt;/code&gt; は、 &lt;code&gt;WCHAR&lt;/code&gt; の数としてのメジャーです。</target>
        </trans-unit>
        <trans-unit id="e60c2698e803a2ea3de2ea43c5cefaac3118f8ac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$swRootPath&lt;/code&gt; is Unicode.</source>
          <target state="translated">&lt;code&gt;$swRootPath&lt;/code&gt; はUnicodeです。</target>
        </trans-unit>
        <trans-unit id="46f825b55b9b8aee9f82d71cf730342ce16b8e21" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$uAccess&lt;/code&gt; is an unsigned value with bits set indicating the type of access desired. Usually either &lt;code&gt;0&lt;/code&gt; [&quot;query&quot; access], &lt;code&gt;GENERIC_READ&lt;/code&gt;, &lt;code&gt;GENERIC_WRITE&lt;/code&gt;, &lt;code&gt;GENERIC_READ|GENERIC_WRITE&lt;/code&gt;, or &lt;code&gt;GENERIC_ALL&lt;/code&gt;. More specific types of access can be specified, such as &lt;code&gt;FILE_APPEND_DATA&lt;/code&gt; or &lt;code&gt;FILE_READ_EA&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$uAccess&lt;/code&gt; は符号なしの値であり、必要なアクセスのタイプを示すビットが設定されています。通常、 &lt;code&gt;0&lt;/code&gt; [「クエリ」アクセス]、 &lt;code&gt;GENERIC_READ&lt;/code&gt; 、 &lt;code&gt;GENERIC_WRITE&lt;/code&gt; 、 &lt;code&gt;GENERIC_READ|GENERIC_WRITE&lt;/code&gt; 、または &lt;code&gt;GENERIC_ALL&lt;/code&gt; のいずれかです。 &lt;code&gt;FILE_APPEND_DATA&lt;/code&gt; や &lt;code&gt;FILE_READ_EA&lt;/code&gt; など、より具体的なタイプのアクセスを指定できます。</target>
        </trans-unit>
        <trans-unit id="5e393500dd71d4edcc5073393bdc2067fb0bf807" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$uAccess&lt;/code&gt; should be an unsigned value containing bits set to indicate the type of access desired. &lt;code&gt;GENERIC_READ&lt;/code&gt; is the default.</source>
          <target state="translated">&lt;code&gt;$uAccess&lt;/code&gt; は、必要なアクセスのタイプを示すために設定されたビットを含む符号なしの値である必要があります。 &lt;code&gt;GENERIC_READ&lt;/code&gt; がデフォルトです。</target>
        </trans-unit>
        <trans-unit id="6694ecc6831eb02bd917df2f3fd5b0a942b2a838" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$uCreate&lt;/code&gt; is one of the following values: &lt;code&gt;OPEN_ALWAYS&lt;/code&gt;, &lt;code&gt;OPEN_EXISTING&lt;/code&gt;, &lt;code&gt;TRUNCATE_EXISTING&lt;/code&gt;, &lt;code&gt;CREATE_ALWAYS&lt;/code&gt;, and &lt;code&gt;CREATE_NEW&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$uCreate&lt;/code&gt; ：次のいずれかの値である &lt;code&gt;OPEN_ALWAYS&lt;/code&gt; 、 &lt;code&gt;OPEN_EXISTING&lt;/code&gt; 、 &lt;code&gt;TRUNCATE_EXISTING&lt;/code&gt; 、 &lt;code&gt;CREATE_ALWAYS&lt;/code&gt; 、および &lt;code&gt;CREATE_NEW&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="43474630266004433c3743ad23d8940bc8bc9d23" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$uCreate&lt;/code&gt; should be one of &lt;code&gt;OPEN_ALWAYS&lt;/code&gt;, &lt;code&gt;OPEN_EXISTING&lt;/code&gt;, &lt;code&gt;TRUNCATE_EXISTING&lt;/code&gt;, &lt;code&gt;CREATE_ALWAYS&lt;/code&gt;, or &lt;code&gt;CREATE_NEW&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$uCreate&lt;/code&gt; は、 &lt;code&gt;OPEN_ALWAYS&lt;/code&gt; 、 &lt;code&gt;OPEN_EXISTING&lt;/code&gt; 、 &lt;code&gt;TRUNCATE_EXISTING&lt;/code&gt; 、 &lt;code&gt;CREATE_ALWAYS&lt;/code&gt; 、または &lt;code&gt;CREATE_NEW&lt;/code&gt; のいずれかである必要があります。</target>
        </trans-unit>
        <trans-unit id="a927bba9361aed12a2fc10c42e20c5d6d05730bc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$uFlags&lt;/code&gt; is an unsigned value having any of the &lt;code&gt;FILE_FLAG_*&lt;/code&gt; or &lt;code&gt;FILE_ATTRIBUTE_*&lt;/code&gt; bits set. Any &lt;code&gt;FILE_ATTRIBUTE_*&lt;/code&gt; bits set via the &lt;code&gt;Attributes&lt;/code&gt; option are logically &lt;code&gt;or&lt;/code&gt;ed with these bits. Defaults to &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$uFlags&lt;/code&gt; は、 &lt;code&gt;FILE_FLAG_*&lt;/code&gt; または &lt;code&gt;FILE_ATTRIBUTE_*&lt;/code&gt; ビットのいずれかが設定された符号なしの値です。どれ &lt;code&gt;FILE_ATTRIBUTE_*&lt;/code&gt; を経由して設定されたビット &lt;code&gt;Attributes&lt;/code&gt; オプションは、論理的にある &lt;code&gt;or&lt;/code&gt; これらのビットとエド。デフォルトは &lt;code&gt;0&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="7c528a002980b0d0d67b0cea98c2931d550bf2e0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$uFlags&lt;/code&gt; is an unsigned value having zero or more of the bits &lt;code&gt;HANDLE_FLAG_INHERIT&lt;/code&gt; and &lt;code&gt;HANDLE_FLAG_PROTECT_FROM_CLOSE&lt;/code&gt; set. For each bit set in &lt;code&gt;$uMask&lt;/code&gt;, the corresponding bit in the handle's flags is set to the value of the corresponding bit in &lt;code&gt;$uFlags&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$uFlags&lt;/code&gt; は、ビット &lt;code&gt;HANDLE_FLAG_INHERIT&lt;/code&gt; および &lt;code&gt;HANDLE_FLAG_PROTECT_FROM_CLOSE&lt;/code&gt; が0個以上設定されている符号なしの値です。 &lt;code&gt;$uMask&lt;/code&gt; に設定されたビットごとに、ハンドルのフラグの対応するビットが &lt;code&gt;$uFlags&lt;/code&gt; 対応するビットの値に設定されます。</target>
        </trans-unit>
        <trans-unit id="f4fafecacf967a0c094c1cf37dcb8679e6ceb785" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$uFlags&lt;/code&gt; is an unsigned value with zero or more bits set indicating attributes to associate with the file [&lt;code&gt;FILE_ATTRIBUTE_*&lt;/code&gt; values] or special options [&lt;code&gt;FILE_FLAG_*&lt;/code&gt; values].</source>
          <target state="translated">&lt;code&gt;$uFlags&lt;/code&gt; は、ファイル[ &lt;code&gt;FILE_ATTRIBUTE_*&lt;/code&gt; 値]または特別なオプション[ &lt;code&gt;FILE_FLAG_*&lt;/code&gt; 値]に関連付ける属性を示す0個以上のビットが設定された符号なしの値です。</target>
        </trans-unit>
        <trans-unit id="29df6dd7446b5613d118869b9171eb03d5f91bf3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$uFlags&lt;/code&gt; is an unsigned value with zero or more of the following bits set:</source>
          <target state="translated">&lt;code&gt;$uFlags&lt;/code&gt; は、次のビットが0個以上設定されている符号なしの値です。</target>
        </trans-unit>
        <trans-unit id="272a94934d778eb7482c2bb65753fe54488df5bf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$uFromWhere&lt;/code&gt; is either &lt;code&gt;FILE_BEGIN&lt;/code&gt;, &lt;code&gt;FILE_CURRENT&lt;/code&gt;, or &lt;code&gt;FILE_END&lt;/code&gt;, indicating that the new file position is being specified relative to the beginning of the file, the current file pointer, or the end of the file, respectively.</source>
          <target state="translated">&lt;code&gt;$uFromWhere&lt;/code&gt; は、 &lt;code&gt;FILE_BEGIN&lt;/code&gt; 、 &lt;code&gt;FILE_CURRENT&lt;/code&gt; 、または &lt;code&gt;FILE_END&lt;/code&gt; のいずれかであり、新しいファイルの位置が、それぞれファイルの先頭、現在のファイルポインター、またはファイルの末尾を基準にして指定されていることを示します。</target>
        </trans-unit>
        <trans-unit id="6bd64c9ae5363930f62b889fde590a114032248f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$uIoControlCode&lt;/code&gt; is an unsigned value [a &lt;code&gt;IOCTL_*&lt;/code&gt; or &lt;code&gt;FSCTL_*&lt;/code&gt; constant] indicating the type query or other operation to be performed.</source>
          <target state="translated">&lt;code&gt;$uIoControlCode&lt;/code&gt; は、実行するタイプクエリまたはその他の操作を示す符号なしの値[ &lt;code&gt;IOCTL_*&lt;/code&gt; または &lt;code&gt;FSCTL_*&lt;/code&gt; 定数]です。</target>
        </trans-unit>
        <trans-unit id="df4a3172c06bdf45af449cb6b7130db6880bcac2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$uMask&lt;/code&gt; is an unsigned value having one or more of the bits &lt;code&gt;HANDLE_FLAG_INHERIT&lt;/code&gt; and &lt;code&gt;HANDLE_FLAG_PROTECT_FROM_CLOSE&lt;/code&gt; set. Only bits set in &lt;code&gt;$uMask&lt;/code&gt; will be modified by &lt;code&gt;SetHandleInformation&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$uMask&lt;/code&gt; は、1つ以上のビット &lt;code&gt;HANDLE_FLAG_INHERIT&lt;/code&gt; および &lt;code&gt;HANDLE_FLAG_PROTECT_FROM_CLOSE&lt;/code&gt; が設定された符号なしの値です。 &lt;code&gt;$uMask&lt;/code&gt; 設定されたビットのみが &lt;code&gt;SetHandleInformation&lt;/code&gt; によって変更されます。</target>
        </trans-unit>
        <trans-unit id="8f4d1967382c31b1d1254de3b706ad657fd17050" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$uMediaType&lt;/code&gt; if the type of media to be formatted. Mostly used to specify the density to use when formatting a floppy diskette. See the &lt;code&gt;&quot;:MEDIA_TYPE&quot;&lt;/code&gt; export class for more information.</source>
          <target state="translated">&lt;code&gt;$uMediaType&lt;/code&gt; フォーマットするメディアのタイプの場合は$ uMediaType。主に、フロッピーディスクをフォーマットするときに使用する密度を指定するために使用されます。詳細については、 &lt;code&gt;&quot;:MEDIA_TYPE&quot;&lt;/code&gt; エクスポートクラスを参照してください。</target>
        </trans-unit>
        <trans-unit id="5515f107fe7a0ad67946c9dcab4de4b18d1e3fa6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$uMode&lt;/code&gt; the logical combination of zero or more &lt;code&gt;O_*&lt;/code&gt; constants exported by the &lt;code&gt;Fcntl&lt;/code&gt; module. Currently only &lt;code&gt;O_APPEND&lt;/code&gt; and &lt;code&gt;O_TEXT&lt;/code&gt; have any significance.</source>
          <target state="translated">&lt;code&gt;$uMode&lt;/code&gt; ゼロ個以上の論理的な組み合わせ &lt;code&gt;O_*&lt;/code&gt; によってエクスポートされた定数 &lt;code&gt;Fcntl&lt;/code&gt; モジュール。現在、 &lt;code&gt;O_APPEND&lt;/code&gt; と &lt;code&gt;O_TEXT&lt;/code&gt; のみが重要です。</target>
        </trans-unit>
        <trans-unit id="af54b872c2e93b3cf0f089ffdd21a913c3d94778" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$uShare&lt;/code&gt; controls how the file is shared, that is, whether other processes can have read, write, and/or delete access to the file while we have it opened. &lt;code&gt;$uShare&lt;/code&gt; is an unsigned value with zero or more of these bits set: &lt;code&gt;FILE_SHARE_READ&lt;/code&gt;, &lt;code&gt;FILE_SHARE_WRITE&lt;/code&gt;, and &lt;code&gt;FILE_SHARE_DELETE&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$uShare&lt;/code&gt; は、ファイルの共有方法、つまり、ファイルを開いているときに他のプロセスがファイルへの読み取り、書き込み、削除のアクセス権を持つことができるかどうかを制御します。 &lt;code&gt;$uShare&lt;/code&gt; は、次のビットが0個以上設定されている符号なしの値です： &lt;code&gt;FILE_SHARE_READ&lt;/code&gt; 、 &lt;code&gt;FILE_SHARE_WRITE&lt;/code&gt; 、および &lt;code&gt;FILE_SHARE_DELETE&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3bc9f6e837ed07ae6902e986cbfff8b6ec5165d7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$uShare&lt;/code&gt; should be an unsigned value having zero or more of the following bits set: &lt;code&gt;FILE_SHARE_READ&lt;/code&gt;, &lt;code&gt;FILE_SHARE_WRITE&lt;/code&gt;, and &lt;code&gt;FILE_SHARE_DELETE&lt;/code&gt;. &lt;code&gt;FILE_SHARE_READ|FILE_SHARE_WRITE&lt;/code&gt; is the default.</source>
          <target state="translated">&lt;code&gt;$uShare&lt;/code&gt; は、 &lt;code&gt;FILE_SHARE_READ&lt;/code&gt; 、 &lt;code&gt;FILE_SHARE_WRITE&lt;/code&gt; 、および &lt;code&gt;FILE_SHARE_DELETE&lt;/code&gt; のビットが0個以上設定された符号なしの値である必要があります。 &lt;code&gt;FILE_SHARE_READ|FILE_SHARE_WRITE&lt;/code&gt; がデフォルトです。</target>
        </trans-unit>
        <trans-unit id="af7c0488261ad642497f1c498432d90586758cc5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$uStartLow&lt;/code&gt; and &lt;code&gt;$ivStartHigh&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;$uStartLow&lt;/code&gt; および &lt;code&gt;$ivStartHigh&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8984c69ec63508eded31d0510c0af3cf62ba76f6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$uStartOffsetLow&lt;/code&gt; and &lt;code&gt;$ivStartOffsetHigh&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;$uStartOffsetLow&lt;/code&gt; および &lt;code&gt;$ivStartOffsetHigh&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b894e9b6db8b94a71be62b2c49b71d6ed691da37" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$wday&lt;/code&gt; is the day of the week, with 0 indicating Sunday and 3 indicating Wednesday. &lt;code&gt;$yday&lt;/code&gt; is the day of the year, in the range &lt;code&gt;0..364&lt;/code&gt; (or &lt;code&gt;0..365&lt;/code&gt; in leap years.)</source>
          <target state="translated">&lt;code&gt;$wday&lt;/code&gt; は曜日です。0は日曜日を示し、3は水曜日を示します。 &lt;code&gt;$yday&lt;/code&gt; は、 &lt;code&gt;0..364&lt;/code&gt; （または &lt;code&gt;0..365&lt;/code&gt; では0..365）の範囲内の、年の日です。</target>
        </trans-unit>
        <trans-unit id="566104b8b57e8adae9af2a92257d23c44ed92682" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$year&lt;/code&gt; contains the number of years since 1900. To get a 4-digit year write:</source>
          <target state="translated">&lt;code&gt;$year&lt;/code&gt; は、1900年からの年数が含まれています。4桁の年を取得するには、次のように記述します。</target>
        </trans-unit>
        <trans-unit id="86e589fdde09b659409ca0b38cf7972114121630" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;${$aref}[3]&lt;/code&gt; is too hard to read, so you can write &lt;code&gt;$aref-&amp;gt;[3]&lt;/code&gt; instead.</source>
          <target state="translated">&lt;code&gt;${$aref}[3]&lt;/code&gt; は読みにくいので、代わりに &lt;code&gt;$aref-&amp;gt;[3]&lt;/code&gt; 書くことができます。</target>
        </trans-unit>
        <trans-unit id="a0b70c477481d76eb5c791655831cd7ab4c56a05" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;${$href}{red}&lt;/code&gt; is too hard to read, so you can write &lt;code&gt;$href-&amp;gt;{red}&lt;/code&gt; instead.</source>
          <target state="translated">&lt;code&gt;${$href}{red}&lt;/code&gt; は読みにくいので、代わりに &lt;code&gt;$href-&amp;gt;{red}&lt;/code&gt; 書くことができます。</target>
        </trans-unit>
        <trans-unit id="62f5dd5ce6207e4a1561af3a4be9cd1b69fa012e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;%Config&lt;/code&gt; cannot always be trusted, however, because it was built at compile time. If perl was built in one place, then transferred elsewhere, some values may be wrong. The values may even have been edited after the fact.</source>
          <target state="translated">&lt;code&gt;%Config&lt;/code&gt; はコンパイル時に作成されたため、常に信頼できるとは限りません。perlが1つの場所で構築され、その後別の場所に転送された場合、一部の値が誤っている可能性があります。値は、事後に編集されている場合もあります。</target>
        </trans-unit>
        <trans-unit id="9d5a1674e9893543d61b6824d7ad5ce1de57ea3a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;%DB::dbline&lt;/code&gt; is an alias for &lt;code&gt;%{&quot;::_&amp;lt;current_file&quot;}&lt;/code&gt; , which contains breakpoints and actions keyed by line number in the currently-selected file, either explicitly chosen with the debugger's &lt;code&gt;f&lt;/code&gt; command, or implicitly by flow of execution.</source>
          <target state="translated">&lt;code&gt;%DB::dbline&lt;/code&gt; の別名である &lt;code&gt;%{&quot;::_&amp;lt;current_file&quot;}&lt;/code&gt; 、現在選択されているファイル内の行番号をキーブレークポイントおよびアクションが含まれ、明示的にデバッガので選択された &lt;code&gt;f&lt;/code&gt; コマンド、または暗黙の流れによって実行。</target>
        </trans-unit>
        <trans-unit id="ebd9ea6606df189ea86efd84b24d8cdbea3e164e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;%DB::dbline&lt;/code&gt; is an alias for &lt;code&gt;%{&quot;::_&amp;lt;current_file&quot;}&lt;/code&gt;, which contains breakpoints and actions keyed by line number in the currently-selected file, either explicitly chosen with the debugger's &lt;code&gt;f&lt;/code&gt; command, or implicitly by flow of execution.</source>
          <target state="translated">&lt;code&gt;%DB::dbline&lt;/code&gt; は &lt;code&gt;%{&quot;::_&amp;lt;current_file&quot;}&lt;/code&gt; のエイリアスであり、デバッガーの &lt;code&gt;f&lt;/code&gt; コマンドで明示的に選択されるか、またはのフローによって暗黙的に選択される、現在選択されているファイルの行番号でキー設定されたブレークポイントとアクションが含まれます。実行。</target>
        </trans-unit>
        <trans-unit id="3710204d711bc924f0b7331068ade1f834b38f9c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;%Module::CoreList::version&lt;/code&gt; is implemented via &lt;code&gt;Module::CoreList::TieHashDelta&lt;/code&gt; using this hash of delta changes.</source>
          <target state="translated">&lt;code&gt;%Module::CoreList::version&lt;/code&gt; は、このデルタ変更のハッシュを使用して、 &lt;code&gt;Module::CoreList::TieHashDelta&lt;/code&gt; を介して実装されます。</target>
        </trans-unit>
        <trans-unit id="7dcff8937e285ccb68b47de83e78b9d121fced62" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;%ext_map&lt;/code&gt; is a hashref whose keys are file extensions and whose values are modules used to load matching files:</source>
          <target state="translated">&lt;code&gt;%ext_map&lt;/code&gt; はハッシュ参照であり、そのキーはファイル拡張子であり、その値は一致するファイルをロードするために使用されるモジュールです。</target>
        </trans-unit>
        <trans-unit id="a497e282840c002c295079c9b903e763139de21f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;%table&lt;/code&gt; is an ordinary hash, and we get a list of keys from it, sort the keys, and loop over the keys as usual. The only use of references is in line 10. &lt;code&gt;$table{$country}&lt;/code&gt; looks up the key &lt;code&gt;$country&lt;/code&gt; in the hash and gets the value, which is a reference to an array of cities in that country. &lt;a href=&quot;#Use-Rule-1&quot;&gt;&lt;b&gt;Use Rule 1&lt;/b&gt;&lt;/a&gt; says that we can recover the array by saying &lt;code&gt;@{$table{$country}}&lt;/code&gt;. Line 10 is just like</source>
          <target state="translated">&lt;code&gt;%table&lt;/code&gt; は通常のハッシュであり、そこからキーのリストを取得し、キーを並べ替えて、通常どおりキーをループします。参照の唯一の使用法は10行目です。 &lt;code&gt;$table{$country}&lt;/code&gt; は、ハッシュでキー &lt;code&gt;$country&lt;/code&gt; 検索し、その国の都市の配列への参照である値を取得します。&lt;a href=&quot;#Use-Rule-1&quot;&gt;&lt;b&gt;使用ルール1&lt;/b&gt;&lt;/a&gt;は、 &lt;code&gt;@{$table{$country}}&lt;/code&gt; と言うことで配列を回復できることを示しています。10行目は</target>
        </trans-unit>
        <trans-unit id="79768fda3a695f3c4fdb3ac99f3e4047a946f91e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;%table&lt;/code&gt; is an ordinary hash, and we get a list of keys from it, sort the keys, and loop over the keys as usual. The only use of references is in line 10. &lt;code&gt;$table{$country}&lt;/code&gt; looks up the key &lt;code&gt;$country&lt;/code&gt; in the hash and gets the value, which is a reference to an array of cities in that country. &lt;b&gt;Use Rule 1&lt;/b&gt; says that we can recover the array by saying &lt;code&gt;@{$table{$country}}&lt;/code&gt; . Line 10 is just like</source>
          <target state="translated">&lt;code&gt;%table&lt;/code&gt; は通常のハッシュであり、そこからキーのリストを取得し、キーを並べ替え、通常どおりキーをループします。参照の唯一の使用は10行目です。 &lt;code&gt;$table{$country}&lt;/code&gt; は、ハッシュでキー &lt;code&gt;$country&lt;/code&gt; 検索し、その国の都市の配列への参照である値を取得します。&lt;b&gt;ルール1を使用&lt;/b&gt;すると、 &lt;code&gt;@{$table{$country}}&lt;/code&gt; と言うことでアレイを回復できることがわかります。10行目は</target>
        </trans-unit>
        <trans-unit id="4404183ada88202cf010fc560d605be6d49f385c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;amp;execute_tests&lt;/code&gt; , &lt;code&gt;$verbose&lt;/code&gt; , &lt;code&gt;$switches&lt;/code&gt; and &lt;code&gt;$debug&lt;/code&gt; are exported upon request.</source>
          <target state="translated">&lt;code&gt;&amp;amp;execute_tests&lt;/code&gt; 、 &lt;code&gt;$verbose&lt;/code&gt; 、 &lt;code&gt;$switches&lt;/code&gt; および &lt;code&gt;$debug&lt;/code&gt; はリクエストに応じてエクスポートされます。</target>
        </trans-unit>
        <trans-unit id="6a05d92922782ba52a6f02c53bc63d6b8571aa31" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;amp;execute_tests&lt;/code&gt;, &lt;code&gt;$verbose&lt;/code&gt;, &lt;code&gt;$switches&lt;/code&gt; and &lt;code&gt;$debug&lt;/code&gt; are exported upon request.</source>
          <target state="translated">&lt;code&gt;&amp;amp;execute_tests&lt;/code&gt; 、 &lt;code&gt;$verbose&lt;/code&gt; 、 &lt;code&gt;$switches&lt;/code&gt; switchs、および &lt;code&gt;$debug&lt;/code&gt; は、要求に応じてエクスポートされます。</target>
        </trans-unit>
        <trans-unit id="45269f768c922774c862b4d90ab49e385f90d369" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;amp;mkmanifest&lt;/code&gt; , &lt;code&gt;&amp;amp;manicheck&lt;/code&gt; , &lt;code&gt;&amp;amp;filecheck&lt;/code&gt; , &lt;code&gt;&amp;amp;fullcheck&lt;/code&gt; , &lt;code&gt;&amp;amp;maniread&lt;/code&gt; , and &lt;code&gt;&amp;amp;manicopy&lt;/code&gt; are exportable.</source>
          <target state="translated">&lt;code&gt;&amp;amp;mkmanifest&lt;/code&gt; 、 &lt;code&gt;&amp;amp;manicheck&lt;/code&gt; 、 &lt;code&gt;&amp;amp;filecheck&lt;/code&gt; 、 &lt;code&gt;&amp;amp;fullcheck&lt;/code&gt; 、 &lt;code&gt;&amp;amp;maniread&lt;/code&gt; 、および &lt;code&gt;&amp;amp;manicopy&lt;/code&gt; はエクスポート可能です。</target>
        </trans-unit>
        <trans-unit id="545b93c612451ce14a1cb71d927fc13e42abb04e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;amp;mkmanifest&lt;/code&gt;, &lt;code&gt;&amp;amp;manicheck&lt;/code&gt;, &lt;code&gt;&amp;amp;filecheck&lt;/code&gt;, &lt;code&gt;&amp;amp;fullcheck&lt;/code&gt;, &lt;code&gt;&amp;amp;maniread&lt;/code&gt;, and &lt;code&gt;&amp;amp;manicopy&lt;/code&gt; are exportable.</source>
          <target state="translated">&lt;code&gt;&amp;amp;mkmanifest&lt;/code&gt; 、 &lt;code&gt;&amp;amp;manicheck&lt;/code&gt; 、 &lt;code&gt;&amp;amp;filecheck&lt;/code&gt; 、 &lt;code&gt;&amp;amp;fullcheck&lt;/code&gt; 、 &lt;code&gt;&amp;amp;maniread&lt;/code&gt; 、および &lt;code&gt;&amp;amp;manicopy&lt;/code&gt; はエクスポート可能です。</target>
        </trans-unit>
        <trans-unit id="94402b86d955ff1473eb3f3a60990fbe37bfa8f8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;amp;runtests&lt;/code&gt; is exported by &lt;code&gt;Test::Harness&lt;/code&gt; by default.</source>
          <target state="translated">&lt;code&gt;&amp;amp;runtests&lt;/code&gt; は、デフォルトで &lt;code&gt;Test::Harness&lt;/code&gt; によってエクスポートされます。</target>
        </trans-unit>
        <trans-unit id="aba3911985212758d304bc3065398a1036ca1bfc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;amp;utf8::Any&lt;/code&gt; must be the last line in the definition.</source>
          <target state="translated">&lt;code&gt;&amp;amp;utf8::Any&lt;/code&gt; は定義の最後の行でなければなりません。</target>
        </trans-unit>
        <trans-unit id="527c2e64b494c015d4028a361ab7efc863ae5a5c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;gt;&amp;gt;file&lt;/code&gt; appends stdout to &lt;code&gt;file&lt;/code&gt; ,</source>
          <target state="translated">&lt;code&gt;&amp;gt;&amp;gt;file&lt;/code&gt; はstdoutを &lt;code&gt;file&lt;/code&gt; に追加します</target>
        </trans-unit>
        <trans-unit id="e007ce2320d1d12dc21b68329e4e1c82508ef823" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;gt;&amp;gt;file&lt;/code&gt; appends stdout to &lt;code&gt;file&lt;/code&gt;,</source>
          <target state="translated">&lt;code&gt;&amp;gt;&amp;gt;file&lt;/code&gt; はstdoutを &lt;code&gt;file&lt;/code&gt; に追加します、</target>
        </trans-unit>
        <trans-unit id="b5c5b75423bd382c0392edbb5987f4b7aa1948d9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;gt;file&lt;/code&gt; writes stdout to &lt;code&gt;file&lt;/code&gt; ,</source>
          <target state="translated">&lt;code&gt;&amp;gt;file&lt;/code&gt; はstdoutを &lt;code&gt;file&lt;/code&gt; に書き込みます。</target>
        </trans-unit>
        <trans-unit id="9927a161615d5a0027d3f1cb4c7450db9cc730fd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;gt;file&lt;/code&gt; writes stdout to &lt;code&gt;file&lt;/code&gt;,</source>
          <target state="translated">&lt;code&gt;&amp;gt;file&lt;/code&gt; はstdoutを &lt;code&gt;file&lt;/code&gt; に書き込みます、</target>
        </trans-unit>
        <trans-unit id="a1a198ab2fc5d2c06e492b673eb92f300a5ab9a8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;&lt;i&gt;FILEHANDLE&lt;/i&gt;&amp;gt;&lt;/code&gt; may also be spelled &lt;code&gt;readline(*&lt;i&gt;FILEHANDLE&lt;/i&gt;)&lt;/code&gt;. See &lt;a href=&quot;functions/readline&quot;&gt;readline&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&amp;lt;&lt;i&gt;FILEHANDLE&lt;/i&gt;&amp;gt;&lt;/code&gt; は、 &lt;code&gt;readline(*&lt;i&gt;FILEHANDLE&lt;/i&gt;)&lt;/code&gt; と綴ることもできます。&lt;a href=&quot;functions/readline&quot;&gt;readlineを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="21a027a7c8d85233b0fdcf1b9a3de452acb82d1d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;&lt;i&gt;FILEHANDLE&lt;/i&gt;&amp;gt;&lt;/code&gt; may also be spelled &lt;code&gt;readline(*&lt;i&gt;FILEHANDLE&lt;/i&gt;)&lt;/code&gt;. See &lt;a href=&quot;perlfunc#readline&quot;&gt;&quot;readline&quot; in perlfunc&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&amp;lt;&lt;i&gt;FILEHANDLE&lt;/i&gt;&amp;gt;&lt;/code&gt; は、 &lt;code&gt;readline(*&lt;i&gt;FILEHANDLE&lt;/i&gt;)&lt;/code&gt; と綴ることもできます。&lt;a href=&quot;perlfunc#readline&quot;&gt;perlfuncの「readline」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="2b69bcfa4d3a7ec9dcc845d68c9ad2b3d938bde2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt; sort operators. It is possible to make multiple passes over your data, building indices to make the upcoming sort more efficient, and to use what is known as the &lt;code&gt;OM&lt;/code&gt; (Orcish Maneuver) to cache the sort keys in advance. The cache lookup, while a good idea, can itself be a source of slowdown by enforcing a double pass over the data - once to setup the cache, and once to sort the data. Using &lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack()&lt;/a&gt;&lt;/code&gt; to extract the required sort key into a consistent string can be an efficient way to build a single string to compare, instead of using multiple sort keys, which makes it possible to use the standard, written in &lt;code&gt;c&lt;/code&gt; and fast, perl &lt;code&gt;&lt;a href=&quot;functions/sort&quot;&gt;sort()&lt;/a&gt;&lt;/code&gt; function on the output, and is the basis of the &lt;code&gt;GRT&lt;/code&gt; (Guttman Rossler Transform). Some string combinations can slow the &lt;code&gt;GRT&lt;/code&gt; down, by just being too plain complex for its own good.</source>
          <target state="translated">&lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt; ソート演算子。データに対して複数のパスを作成し、インデックスを作成して次のソートをより効率的にし、 &lt;code&gt;OM&lt;/code&gt; （Orcish Maneuver）と呼ばれるものを使用して、ソートキーを事前にキャッシュすることができます。キャッシュルックアップは良いアイデアですが、データのダブルパスを強制することにより、それ自体がスローダウンの原因になる可能性があります。1回目はキャッシュをセットアップし、もう1回はデータをソートします。使用して &lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack()&lt;/a&gt;&lt;/code&gt; 一貫性のある文字列に必要なソート・キーを抽出する代わりに、複数のソート・キーを使用しての、比較するための単一の文字列を構築するための効率的な方法することができ、標準を使用することが可能となるれ、中に書かれた &lt;code&gt;c&lt;/code&gt; 高速で、perlの出力の &lt;code&gt;&lt;a href=&quot;functions/sort&quot;&gt;sort()&lt;/a&gt;&lt;/code&gt; 関数 &lt;code&gt;GRT&lt;/code&gt; 基礎となる（ガットマンロスラー変換）。一部の文字列の組み合わせは、あまりにも単純すぎて複雑すぎて、 &lt;code&gt;GRT&lt;/code&gt; の速度を低下させる可能性があります。</target>
        </trans-unit>
        <trans-unit id="7af2b8e9836889306ef275b2f5b7ab190c8a14d1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt; sort operators. It is possible to make multiple passes over your data, building indices to make the upcoming sort more efficient, and to use what is known as the &lt;code&gt;OM&lt;/code&gt; (Orcish Maneuver) to cache the sort keys in advance. The cache lookup, while a good idea, can itself be a source of slowdown by enforcing a double pass over the data - once to setup the cache, and once to sort the data. Using &lt;code&gt;pack()&lt;/code&gt; to extract the required sort key into a consistent string can be an efficient way to build a single string to compare, instead of using multiple sort keys, which makes it possible to use the standard, written in &lt;code&gt;c&lt;/code&gt; and fast, perl &lt;code&gt;sort()&lt;/code&gt; function on the output, and is the basis of the &lt;code&gt;GRT&lt;/code&gt; (Guttman Rossler Transform). Some string combinations can slow the &lt;code&gt;GRT&lt;/code&gt; down, by just being too plain complex for its own good.</source>
          <target state="translated">&lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt; ソート演算子。データに対して複数のパスを作成し、インデックスを作成して次の並べ替えをより効率的にし、 &lt;code&gt;OM&lt;/code&gt; （Orcish Maneuver）と呼ばれるものを使用して事前に並べ替えキーをキャッシュすることができます。キャッシュルックアップは、良い考えですが、データにダブルパスを適用することで、それ自体が速度低下の原因になる可能性があります。1回はキャッシュをセットアップし、もう1回はデータを並べ替えます。使用して &lt;code&gt;pack()&lt;/code&gt; 一貫性のある文字列に必要なソート・キーを抽出する代わりに、複数のソート・キーを使用しての、比較するための単一の文字列を構築するための効率的な方法することができ、標準を使用することが可能となるれ、中に書かれた &lt;code&gt;c&lt;/code&gt; 高速で、perlの出力の &lt;code&gt;sort()&lt;/code&gt; 関数であり、 &lt;code&gt;GRT&lt;/code&gt; の基礎です（ガットマンロスラートランスフォーム）。いくつかの文字列の組み合わせは、それ自体の利益のために単純すぎる複雑であるために、 &lt;code&gt;GRT&lt;/code&gt; を遅くする可能性があります。</target>
        </trans-unit>
        <trans-unit id="2522b02da50fc40f449f255883204d5ce36cdba9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;file&lt;/code&gt; reads stdin from &lt;code&gt;file&lt;/code&gt; ,</source>
          <target state="translated">&lt;code&gt;&amp;lt;file&lt;/code&gt; から標準入力を読み取り &lt;code&gt;file&lt;/code&gt; 、</target>
        </trans-unit>
        <trans-unit id="4db0ada369c583771090c658af484786159c8d1e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;file&lt;/code&gt; reads stdin from &lt;code&gt;file&lt;/code&gt;,</source>
          <target state="translated">&lt;code&gt;&amp;lt;file&lt;/code&gt; からstdinを読み取り &lt;code&gt;file&lt;/code&gt; 、</target>
        </trans-unit>
        <trans-unit id="14589c420569470c1984bef3b342e4d0f8631d06" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;package Foo VERSION&lt;/code&gt;&amp;gt; is also checked for. The first version declaration found is used, but this may change as it differs from how Perl does it.</source>
          <target state="translated">&lt;code&gt;&amp;lt;package Foo VERSION&lt;/code&gt; &amp;gt;もチェックされます。見つかった最初のバージョン宣言が使用されますが、Perlの方法とは異なるため、これは変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="b676c2be1bdb0c811ba9dd4408d9c29fc2a9335c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;''&lt;/code&gt;, &lt;code&gt;q//&lt;/code&gt;, &lt;code&gt;tr'''&lt;/code&gt;, &lt;code&gt;y'''&lt;/code&gt;, the replacement of &lt;code&gt;s'''&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;''&lt;/code&gt; 、 &lt;code&gt;q//&lt;/code&gt; 、 &lt;code&gt;tr'''&lt;/code&gt; 、 &lt;code&gt;y'''&lt;/code&gt; 、 &lt;code&gt;s'''&lt;/code&gt; 置換</target>
        </trans-unit>
        <trans-unit id="b57277544f99da37812cb13ed4c2e1bfba223227" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'errno'&lt;/code&gt; - unresolved external</source>
          <target state="translated">&lt;code&gt;'errno'&lt;/code&gt; -未解決の外部</target>
        </trans-unit>
        <trans-unit id="2bf5df0d5016c091b9ad33718ad6c0bec078273a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;($m,$e) = $x-&amp;gt;parts();&lt;/code&gt; is just a shortcut giving you both of them.</source>
          <target state="translated">&lt;code&gt;($m,$e) = $x-&amp;gt;parts();&lt;/code&gt; 両方を提供するショートカットにすぎません。</target>
        </trans-unit>
        <trans-unit id="335e612b5ff3e1f01aac0192c233fe148635e487" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;($m,$e) = $x-&amp;gt;parts()&lt;/code&gt; is just a shortcut that gives you both of them in one go. Both the returned mantissa and exponent have a sign.</source>
          <target state="translated">&lt;code&gt;($m,$e) = $x-&amp;gt;parts()&lt;/code&gt; は、両方を一度に実行できるショートカットです。返された仮数と指数の両方に符号があります。</target>
        </trans-unit>
        <trans-unit id="bf01940c6e15510382f59972931abf91ab7ff676" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;(&amp;lt;&lt;i&gt;NAME&lt;/i&gt;&amp;gt;)&lt;/code&gt;&lt;code&gt;('&lt;i&gt;NAME&lt;/i&gt;')&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;(&amp;lt;&lt;i&gt;NAME&lt;/i&gt;&amp;gt;)&lt;/code&gt;&lt;code&gt;('&lt;i&gt;NAME&lt;/i&gt;')&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8fedb3bb9d6413e4bbe6a2c6335698beeff16f76" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;();&lt;/code&gt; before executing your program.</source>
          <target state="translated">&lt;code&gt;();&lt;/code&gt; プログラムを実行する前に。</target>
        </trans-unit>
        <trans-unit id="fa175ba88d79f8b6a523c90568d96d5134312661" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;();&lt;/code&gt; before executing your program. This loads the module, but does not call its &lt;code&gt;import&lt;/code&gt; method, so does not import subroutines and does not give effect to a pragma.</source>
          <target state="translated">&lt;code&gt;();&lt;/code&gt; プログラムを実行する前に。これはモジュールをロードしますが、その &lt;code&gt;import&lt;/code&gt; メソッドを呼び出さないため、サブルーチンをインポートせず、プラグマに影響を与えません。</target>
        </trans-unit>
        <trans-unit id="3d886df01903304092bd283981b387cfba658d17" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;(*ACCEPT)&lt;/code&gt;&lt;code&gt;(*ACCEPT:&lt;i&gt;arg&lt;/i&gt;)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;(*ACCEPT)&lt;/code&gt;&lt;code&gt;(*ACCEPT:&lt;i&gt;arg&lt;/i&gt;)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e3ca38720e7b4b8c0a6d08319fb619ac034ed869" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;(*COMMIT)&lt;/code&gt;&lt;code&gt;(*COMMIT:&lt;i&gt;arg&lt;/i&gt;)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;(*COMMIT)&lt;/code&gt;&lt;code&gt;(*COMMIT:&lt;i&gt;arg&lt;/i&gt;)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c5d1389f583504edbe344a603efea2c1f79b5c0a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;(*FAIL)&lt;/code&gt;&lt;code&gt;(*F)&lt;/code&gt;&lt;code&gt;(*FAIL:&lt;i&gt;arg&lt;/i&gt;)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;(*FAIL)&lt;/code&gt;&lt;code&gt;(*F)&lt;/code&gt;&lt;code&gt;(*FAIL:&lt;i&gt;arg&lt;/i&gt;)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2474cee596cec4055ac7bf031a8922b76276bfcc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;(*MARK:&lt;i&gt;NAME&lt;/i&gt;)&lt;/code&gt;&lt;code&gt;(*:&lt;i&gt;NAME&lt;/i&gt;)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;(*MARK:&lt;i&gt;NAME&lt;/i&gt;)&lt;/code&gt;&lt;code&gt;(*:&lt;i&gt;NAME&lt;/i&gt;)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b870a9693a15529c5b4158603e0099ad430e175f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;(*PRUNE)&lt;/code&gt;&lt;code&gt;(*PRUNE:&lt;i&gt;NAME&lt;/i&gt;)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;(*PRUNE)&lt;/code&gt;&lt;code&gt;(*PRUNE:&lt;i&gt;NAME&lt;/i&gt;)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8dea11a680245b56ec4f67ed76ab488bc9dacd40" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;(*SKIP)&lt;/code&gt;&lt;code&gt;(*SKIP:&lt;i&gt;NAME&lt;/i&gt;)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;(*SKIP)&lt;/code&gt;&lt;code&gt;(*SKIP:&lt;i&gt;NAME&lt;/i&gt;)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="15e7589fb44b96285af32cf021d9e9aeb4875d3b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;(*THEN)&lt;/code&gt;&lt;code&gt;(*THEN:&lt;i&gt;NAME&lt;/i&gt;)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;(*THEN)&lt;/code&gt;&lt;code&gt;(*THEN:&lt;i&gt;NAME&lt;/i&gt;)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a9af3a02b9b89b0b1c6ec366644d2efc013529aa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;(1)&lt;/code&gt;&lt;code&gt;(2)&lt;/code&gt; ...</source>
          <target state="translated">&lt;code&gt;(1)&lt;/code&gt;&lt;code&gt;(2)&lt;/code&gt; ...</target>
        </trans-unit>
        <trans-unit id="a0f998646b410d0e0c233aedae52ca06f7c88353" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;(&lt;i&gt;condition&lt;/i&gt;)&lt;/code&gt; should be one of:</source>
          <target state="translated">&lt;code&gt;(&lt;i&gt;condition&lt;/i&gt;)&lt;/code&gt; は次のいずれかである必要があります。</target>
        </trans-unit>
        <trans-unit id="e8e12c2ff928c4fe0525987ef40b07c7b28ddde1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;(?!S)&lt;/code&gt;, &lt;code&gt;(?&amp;lt;!S)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;(?!S)&lt;/code&gt;, &lt;code&gt;(?&amp;lt;!S)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5924d439c7bf817c5c2eecfdf85a418dcdb26d60" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;(?&amp;gt;&lt;i&gt;pattern&lt;/i&gt;)&lt;/code&gt; does not disable backtracking altogether once it has matched. It is still possible to backtrack past the construct, but not into it. So &lt;code&gt;((?&amp;gt;a*)|(?&amp;gt;b*))ar&lt;/code&gt; will still match &quot;bar&quot;.</source>
          <target state="translated">&lt;code&gt;(?&amp;gt;&lt;i&gt;pattern&lt;/i&gt;)&lt;/code&gt; は、一致した後のバックトラッキングを完全に無効にしません。コンストラクトを超えてバックトラックすることは可能ですが、コンストラクトに入ることはできません。したがって、 &lt;code&gt;((?&amp;gt;a*)|(?&amp;gt;b*))ar&lt;/code&gt; は引き続き「bar」と一致します。</target>
        </trans-unit>
        <trans-unit id="e828005905b2cb26110ffaf5a2deff6a0d4e2b01" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;(?&amp;gt;pattern)&lt;/code&gt; does not disable backtracking altogether once it has matched. It is still possible to backtrack past the construct, but not into it. So &lt;code&gt;((?&amp;gt;a*)|(?&amp;gt;b*))ar&lt;/code&gt; will still match &quot;bar&quot;.</source>
          <target state="translated">&lt;code&gt;(?&amp;gt;pattern)&lt;/code&gt; は、いったん一致するとバックトラッキングを完全に無効にしません。コンストラクトを越えてバックトラックすることは可能ですが、コンストラクトに戻ることはできません。したがって、 &lt;code&gt;((?&amp;gt;a*)|(?&amp;gt;b*))ar&lt;/code&gt; は「bar」と一致します。</target>
        </trans-unit>
        <trans-unit id="65dc98163725b46e369060f76a03e9466c746b39" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;(?&lt;i&gt;PARNO&lt;/i&gt;)&lt;/code&gt;&lt;code&gt;(?-&lt;i&gt;PARNO&lt;/i&gt;)&lt;/code&gt;&lt;code&gt;(?+&lt;i&gt;PARNO&lt;/i&gt;)&lt;/code&gt;&lt;code&gt;(?R)&lt;/code&gt;&lt;code&gt;(?0)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;(?&lt;i&gt;PARNO&lt;/i&gt;)&lt;/code&gt;&lt;code&gt;(?-&lt;i&gt;PARNO&lt;/i&gt;)&lt;/code&gt;&lt;code&gt;(?+&lt;i&gt;PARNO&lt;/i&gt;)&lt;/code&gt;&lt;code&gt;(?R)&lt;/code&gt;&lt;code&gt;(?0)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="064efafd6cc4cdf0c17a94045c8c391bed595eb1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;(?=...)&lt;/code&gt;&lt;code&gt;(?!...)&lt;/code&gt;&lt;code&gt;(?&amp;lt;=...)&lt;/code&gt;&lt;code&gt;(?&amp;lt;!...)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;(?=...)&lt;/code&gt;&lt;code&gt;(?!...)&lt;/code&gt;&lt;code&gt;(?&amp;lt;=...)&lt;/code&gt;&lt;code&gt;(?&amp;lt;!...)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="50a8db6343f11594a4a4bdb2b5f1e2a508e85932" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;(?=S)&lt;/code&gt;, &lt;code&gt;(?&amp;lt;=S)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;(?=S)&lt;/code&gt;, &lt;code&gt;(?&amp;lt;=S)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4d1eb91e09f0565c1c6c61d13a1331c3c8c978f7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;(??{ &lt;i&gt;EXPR&lt;/i&gt; })&lt;/code&gt;, &lt;code&gt;(?&lt;i&gt;PARNO&lt;/i&gt;)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;(??{ &lt;i&gt;EXPR&lt;/i&gt; })&lt;/code&gt;, &lt;code&gt;(?&lt;i&gt;PARNO&lt;/i&gt;)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3be7a3f94bc970ea91ca7c3a8ca0a541e4b53518" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;(?[ ])&lt;/code&gt; is a regex-compile-time construct. Any attempt to use something which isn't knowable at the time the containing regular expression is compiled is a fatal error. In practice, this means just three limitations:</source>
          <target state="translated">&lt;code&gt;(?[ ])&lt;/code&gt; は、正規表現コンパイル時の構成です。含まれている正規表現をコンパイルするときに不明なものを使用しようとすると、致命的なエラーになります。実際には、これは3つの制限のみを意味します。</target>
        </trans-unit>
        <trans-unit id="15dcd160cd34133b7dd894f85ebc4242c48ba25b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;(R1)&lt;/code&gt;&lt;code&gt;(R2)&lt;/code&gt; ...</source>
          <target state="translated">&lt;code&gt;(R1)&lt;/code&gt;&lt;code&gt;(R2)&lt;/code&gt; ...</target>
        </trans-unit>
        <trans-unit id="f27eb85448fde31a928acd307f22171e886dd53f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;(bool)!!(cbool)&lt;/code&gt; in a ternary triggers a bug in xlc on AIX</source>
          <target state="translated">&lt;code&gt;(bool)!!(cbool)&lt;/code&gt; は、AIX上のxlcでバグをトリガーします。</target>
        </trans-unit>
        <trans-unit id="79f752acf5e406ed8d0869b1bfe190380c3c0274" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;(condition)&lt;/code&gt; should be one of: 1) an integer in parentheses (which is valid if the corresponding pair of parentheses matched); 2) a look-ahead/look-behind/evaluate zero-width assertion; 3) a name in angle brackets or single quotes (which is valid if a group with the given name matched); or 4) the special symbol (R) (true when evaluated inside of recursion or eval). Additionally the R may be followed by a number, (which will be true when evaluated when recursing inside of the appropriate group), or by &lt;code&gt;&amp;amp;NAME&lt;/code&gt; , in which case it will be true only when evaluated during recursion in the named group.</source>
          <target state="translated">&lt;code&gt;(condition)&lt;/code&gt; は次のいずれかでなければなりません。1）括弧内の整数（対応する括弧のペアが一致した場合に有効です）。 2）先読み/後読み/ゼロ幅アサーションの評価。 3）山括弧または一重引用符で囲まれた名前（指定された名前のグループが一致した場合に有効です）。または4）特殊記号（R）（再帰または評価の内部で評価される場合はtrue）。さらに、Rの後に数値（適切なグループ内で再帰するときに評価される場合はtrueになる）が続く場合があります。また、 &lt;code&gt;&amp;amp;NAME&lt;/code&gt; の場合、名前付きグループでの再帰中に評価される場合にのみtrueになります。</target>
        </trans-unit>
        <trans-unit id="aa9b0fa5c0b39b64800f8d498a9073608a7a4d19" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;*&lt;/code&gt; Note: &lt;code&gt;\c?&lt;/code&gt; maps to ordinal 127 (&lt;code&gt;DEL&lt;/code&gt; ) on ASCII platforms, but since ordinal 127 is a not a control character on EBCDIC machines, &lt;code&gt;\c?&lt;/code&gt; instead maps on them to &lt;code&gt;APC&lt;/code&gt; , which is 255 in 0037 and 1047, and 95 in POSIX-BC.</source>
          <target state="translated">&lt;code&gt;*&lt;/code&gt; 注： &lt;code&gt;\c?&lt;/code&gt; ASCIIプラットフォームでは序数127（ &lt;code&gt;DEL&lt;/code&gt; ）にマップされますが、序数127はEBCDICマシンでは制御文字ではないため、 &lt;code&gt;\c?&lt;/code&gt; 代わりに、それらを &lt;code&gt;APC&lt;/code&gt; にマップします。APCは、0037および1047では255、POSIX-BCでは95です。</target>
        </trans-unit>
        <trans-unit id="4199412c80feb67132ade7906956f37b18594a73" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;*&lt;/code&gt; Note: &lt;code&gt;\c?&lt;/code&gt; maps to ordinal 127 (&lt;code&gt;DEL&lt;/code&gt;) on ASCII platforms, but since ordinal 127 is a not a control character on EBCDIC machines, &lt;code&gt;\c?&lt;/code&gt; instead maps on them to &lt;code&gt;APC&lt;/code&gt;, which is 255 in 0037 and 1047, and 95 in POSIX-BC.</source>
          <target state="translated">&lt;code&gt;*&lt;/code&gt; 注： &lt;code&gt;\c?&lt;/code&gt; ASCIIプラットフォームでは序数127（ &lt;code&gt;DEL&lt;/code&gt; ）にマップされますが、序数127はEBCDICマシンでは制御文字ではないため、 &lt;code&gt;\c?&lt;/code&gt; 代わりに、それらを &lt;code&gt;APC&lt;/code&gt; にマップします。APCは、0037と1047では255、POSIX-BCでは95です。</target>
        </trans-unit>
        <trans-unit id="035ce503fd0375c8adfff5fd158d918cc90831ea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;*foo = *bar&lt;/code&gt; makes the typeglobs themselves synonymous while &lt;code&gt;*foo = \$bar&lt;/code&gt; makes the SCALAR portions of two distinct typeglobs refer to the same scalar value. This means that the following code:</source>
          <target state="translated">&lt;code&gt;*foo = *bar&lt;/code&gt; はタイプグロブ自体を同義にしますが、 &lt;code&gt;*foo = \$bar&lt;/code&gt; は2つの異なるタイプグロブのSCALAR部分が同じスカラー値を参照するようにします。これは次のコードを意味します：</target>
        </trans-unit>
        <trans-unit id="8e9e441ecd7acaac4042c4859f5a0792684bc9d4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;*foo{IO}&lt;/code&gt; is an alternative to the &lt;code&gt;*HANDLE&lt;/code&gt; mechanism given in &lt;a href=&quot;perldata#Typeglobs-and-Filehandles&quot;&gt;&quot;Typeglobs and Filehandles&quot; in perldata&lt;/a&gt; for passing filehandles into or out of subroutines, or storing into larger data structures. Its disadvantage is that it won't create a new filehandle for you. Its advantage is that you have less risk of clobbering more than you want to with a typeglob assignment. (It still conflates file and directory handles, though.) However, if you assign the incoming value to a scalar instead of a typeglob as we do in the examples below, there's no risk of that happening.</source>
          <target state="translated">&lt;code&gt;*foo{IO}&lt;/code&gt; は、サブルーチンにファイルハンドルを渡したり、サブルーチンからファイルハンドルを渡したり、より大きなデータ構造に格納したりするための&lt;a href=&quot;perldata#Typeglobs-and-Filehandles&quot;&gt;、perldataの「TypeglobsandFilehandles」に記載さ&lt;/a&gt;れている &lt;code&gt;*HANDLE&lt;/code&gt; メカニズムの代替手段です。その欠点は、新しいファイルハンドルが作成されないことです。その利点は、typeglob割り当てを使用した場合よりも、壊れるリスクが少ないことです。 （ただし、ファイルとディレクトリのハンドルは引き続き圧縮されます。）ただし、以下の例のように、入力値をタイプグロブではなくスカラーに割り当てると、そのリスクは発生しません。</target>
        </trans-unit>
        <trans-unit id="c604dc0f175af1bba7e47da20d670e13f47051ca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;*foo{IO}&lt;/code&gt; is an alternative to the &lt;code&gt;*HANDLE&lt;/code&gt; mechanism given in &lt;a href=&quot;perldata#Typeglobs-and-Filehandles&quot;&gt;Typeglobs and Filehandles in perldata&lt;/a&gt; for passing filehandles into or out of subroutines, or storing into larger data structures. Its disadvantage is that it won't create a new filehandle for you. Its advantage is that you have less risk of clobbering more than you want to with a typeglob assignment. (It still conflates file and directory handles, though.) However, if you assign the incoming value to a scalar instead of a typeglob as we do in the examples below, there's no risk of that happening.</source>
          <target state="translated">&lt;code&gt;*foo{IO}&lt;/code&gt; は、&lt;a href=&quot;perldata#Typeglobs-and-Filehandles&quot;&gt;perldataのTypeglobsおよびFilehandles&lt;/a&gt;で提供される &lt;code&gt;*HANDLE&lt;/code&gt; メカニズムの代替であり、ファイルハンドルをサブルーチンに渡したりサブルーチンから渡したり、より大きなデータ構造に格納したりします。その欠点は、新しいファイルハンドルが作成されないことです。その利点は、typeglob割り当てを使用する場合よりも、破壊のリスクが少ないことです。 （ただし、ファイルハンドルとディレクトリハンドルは引き続きフラット化されます。）ただし、以下の例のように、入力値をタイプグロブではなくスカラーに割り当てた場合、そのような危険はありません。</target>
        </trans-unit>
        <trans-unit id="c3d4ebd20cdf20e16fbae469dbb3ad04c1abb62c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;*foo{NAME}&lt;/code&gt; and &lt;code&gt;*foo{PACKAGE}&lt;/code&gt; are the exception, in that they return strings, rather than references. These return the package and name of the typeglob itself, rather than one that has been assigned to it. So, after &lt;code&gt;*foo=*Foo::bar&lt;/code&gt; , &lt;code&gt;*foo&lt;/code&gt; will become &quot;*Foo::bar&quot; when used as a string, but &lt;code&gt;*foo{PACKAGE}&lt;/code&gt; and &lt;code&gt;*foo{NAME}&lt;/code&gt; will continue to produce &quot;main&quot; and &quot;foo&quot;, respectively.</source>
          <target state="translated">&lt;code&gt;*foo{NAME}&lt;/code&gt; と &lt;code&gt;*foo{PACKAGE}&lt;/code&gt; は、参照ではなく文字列を返すという点で例外です。これらは、それに割り当てられたものではなく、typeglob自体のパッケージと名前を返します。したがって、 &lt;code&gt;*foo=*Foo::bar&lt;/code&gt; 後、 &lt;code&gt;*foo&lt;/code&gt; は文字列として使用すると &quot;* Foo :: bar&quot;になりますが、 &lt;code&gt;*foo{PACKAGE}&lt;/code&gt; と &lt;code&gt;*foo{NAME}&lt;/code&gt; は引き続き &quot;main&quot;と &quot; foo &quot;、それぞれ。</target>
        </trans-unit>
        <trans-unit id="c807a3cc1120ee3d4298bd8bee0433c0e935b02d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;*foo{NAME}&lt;/code&gt; and &lt;code&gt;*foo{PACKAGE}&lt;/code&gt; are the exception, in that they return strings, rather than references. These return the package and name of the typeglob itself, rather than one that has been assigned to it. So, after &lt;code&gt;*foo=*Foo::bar&lt;/code&gt;, &lt;code&gt;*foo&lt;/code&gt; will become &quot;*Foo::bar&quot; when used as a string, but &lt;code&gt;*foo{PACKAGE}&lt;/code&gt; and &lt;code&gt;*foo{NAME}&lt;/code&gt; will continue to produce &quot;main&quot; and &quot;foo&quot;, respectively.</source>
          <target state="translated">&lt;code&gt;*foo{NAME}&lt;/code&gt; と &lt;code&gt;*foo{PACKAGE}&lt;/code&gt; は例外であり、参照ではなく文字列を返します。これらは、typeglobに割り当てられているものではなく、typeglob自体のパッケージと名前を返します。したがって、 &lt;code&gt;*foo=*Foo::bar&lt;/code&gt; 後、 &lt;code&gt;*foo&lt;/code&gt; は文字列として使用すると「* Foo :: bar」になりますが、 &lt;code&gt;*foo{PACKAGE}&lt;/code&gt; と &lt;code&gt;*foo{NAME}&lt;/code&gt; は引き続き「main」と「 foo」、それぞれ。</target>
        </trans-unit>
        <trans-unit id="24be20f1954d03345ad07292891249385805f4e7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;*foo{THING}&lt;/code&gt; returns undef if that particular THING hasn't been used yet, except in the case of scalars. &lt;code&gt;*foo{SCALAR}&lt;/code&gt; returns a reference to an anonymous scalar if $foo hasn't been used yet. This might change in a future release.</source>
          <target state="translated">&lt;code&gt;*foo{THING}&lt;/code&gt; は、スカラーの場合を除いて、その特定のTHINGがまだ使用されていない場合、undefを返します。 &lt;code&gt;*foo{SCALAR}&lt;/code&gt; は、$ fooがまだ使用されていない場合、匿名スカラーへの参照を返します。これは将来のリリースで変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="1c13e53a577e4ff91677f7a1d5c8b78b19510b80" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;*ret_script&lt;/code&gt;, if &lt;code&gt;ret_script&lt;/code&gt; is not NULL, will on return of TRUE contain the script found, using the &lt;code&gt;SCX_enum&lt;/code&gt; typedef. Its value will be &lt;code&gt;SCX_INVALID&lt;/code&gt; if the function returns FALSE.</source>
          <target state="translated">&lt;code&gt;*ret_script&lt;/code&gt; は、 &lt;code&gt;ret_script&lt;/code&gt; がNULLでない場合、TRUEが返されると、 &lt;code&gt;SCX_enum&lt;/code&gt; typedefを使用して見つかったスクリプトを含みます。関数がFALSEを返す場合、その値は &lt;code&gt;SCX_INVALID&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="dbf00da8ca1b908437ae167615e53dcc1cb8be4e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;++&lt;/code&gt; behaves as the other operators above, except that if it is a string matching the format &lt;code&gt;/^[a-zA-Z]*[0-9]*\z/&lt;/code&gt; the string increment described in &lt;a href=&quot;perlop&quot;&gt;perlop&lt;/a&gt; is used.</source>
          <target state="translated">&lt;code&gt;++&lt;/code&gt; は上記の他の演算子と同じように動作しますが、 &lt;code&gt;/^[a-zA-Z]*[0-9]*\z/&lt;/code&gt; という形式に一致する文字列の場合は、&lt;a href=&quot;perlop&quot;&gt;perlop&lt;/a&gt;で記述されている文字列の増分が使用されます。</target>
        </trans-unit>
        <trans-unit id="e5ab1d29e15a5c3f21795175775542056567ba7c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;++&lt;/code&gt;, &lt;code&gt;--&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;++&lt;/code&gt;, &lt;code&gt;--&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e30f6f906816a36d4b6415eeb3e8337b9e38881e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;--help&lt;/code&gt; and &lt;code&gt;--version&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;--help&lt;/code&gt; と &lt;code&gt;--version&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8a840b7022604e03a1d5d8cf231a6de0797d49c3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;--libpods&lt;/code&gt; in &lt;code&gt;Pod::Html&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;--libpods&lt;/code&gt; に &lt;code&gt;Pod::Html&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="92f2d052179f5b02b61e4ee4b12373d3302528c1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;--no-commit&lt;/code&gt; means that the merge commit will be</source>
          <target state="translated">&lt;code&gt;--no-commit&lt;/code&gt; は、マージコミットが</target>
        </trans-unit>
        <trans-unit id="c4e420741266b6860a4508be97164f7bc0785245" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-&lt;i&gt;X&lt;/i&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/chdir&quot;&gt;chdir&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/chmod&quot;&gt;chmod&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/chown&quot;&gt;chown&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/chroot&quot;&gt;chroot&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/fcntl&quot;&gt;fcntl&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/glob&quot;&gt;glob&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/ioctl&quot;&gt;ioctl&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/link&quot;&gt;link&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/lstat&quot;&gt;lstat&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/mkdir&quot;&gt;mkdir&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/opendir&quot;&gt;opendir&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/readlink&quot;&gt;readlink&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/rename&quot;&gt;rename&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/rmdir&quot;&gt;rmdir&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/stat&quot;&gt;stat&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/symlink&quot;&gt;symlink&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/sysopen&quot;&gt;sysopen&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/umask&quot;&gt;umask&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/unlink&quot;&gt;unlink&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/utime&quot;&gt;utime&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;-&lt;i&gt;X&lt;/i&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/chdir&quot;&gt;chdir&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/chmod&quot;&gt;chmod&lt;/a&gt;&lt;/code&gt; コマンド、 &lt;code&gt;&lt;a href=&quot;functions/chown&quot;&gt;chown&lt;/a&gt;&lt;/code&gt; コマンド、 &lt;code&gt;&lt;a href=&quot;functions/chroot&quot;&gt;chroot&lt;/a&gt;&lt;/code&gt; 環境、 &lt;code&gt;&lt;a href=&quot;functions/fcntl&quot;&gt;fcntl&lt;/a&gt;&lt;/code&gt; の、 &lt;code&gt;&lt;a href=&quot;functions/glob&quot;&gt;glob&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/ioctl&quot;&gt;ioctl&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/link&quot;&gt;link&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/lstat&quot;&gt;lstat&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/mkdir&quot;&gt;mkdir&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/opendir&quot;&gt;opendir&lt;/a&gt;&lt;/code&gt; など、 &lt;code&gt;&lt;a href=&quot;functions/readlink&quot;&gt;readlink&lt;/a&gt;&lt;/code&gt; が、 &lt;code&gt;&lt;a href=&quot;functions/rename&quot;&gt;rename&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/rmdir&quot;&gt;rmdir&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/stat&quot;&gt;stat&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/symlink&quot;&gt;symlink&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/sysopen&quot;&gt;sysopen&lt;/a&gt;&lt;/code&gt; で、 &lt;code&gt;&lt;a href=&quot;functions/umask&quot;&gt;umask&lt;/a&gt;&lt;/code&gt; を、 &lt;code&gt;&lt;a href=&quot;functions/unlink&quot;&gt;unlink&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/utime&quot;&gt;utime&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="89d83eaf2fc697229f135e1e358e73dae8e4c1c8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-DDEBUGGING&lt;/code&gt; turns on the C compiler's &lt;code&gt;-g&lt;/code&gt; flag to have it produce debugging information which will allow us to step through a running program, and to see in which C function we are at (without the debugging information we might see only the numerical addresses of the functions, which is not very helpful). It will also turn on the &lt;code&gt;DEBUGGING&lt;/code&gt; compilation symbol which enables all the internal debugging code in Perl. There are a whole bunch of things you can debug with this: &lt;a href=&quot;perlrun#-Dletters&quot;&gt;perlrun&lt;/a&gt; lists them all, and the best way to find out about them is to play about with them. The most useful options are probably</source>
          <target state="translated">&lt;code&gt;-DDEBUGGING&lt;/code&gt; は、Cコンパイラの &lt;code&gt;-g&lt;/code&gt; フラグをオンにして、実行中のプログラムをステップスルーできるデバッグ情報を生成し、現在のC関数を確認します（デバッグ情報がないと、の数値アドレスのみが表示される可能性があります）関数、これはあまり役に立ちません）。また、Perlのすべての内部デバッグコードを有効にする &lt;code&gt;DEBUGGING&lt;/code&gt; コンパイルシンボルをオンにします。これでデバッグできるものはたくさんあります&lt;a href=&quot;perlrun#-Dletters&quot;&gt;。perlrun&lt;/a&gt;はそれらすべてをリストします。それらについて知る最良の方法は、それらをいじることです。最も便利なオプションはおそらく</target>
        </trans-unit>
        <trans-unit id="c4c7395952652d692e1ed3ecb90decbeb8d571b7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-R&lt;/code&gt; , &lt;code&gt;-W&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/-x&quot;&gt;-X&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;-O&lt;/code&gt; are indistinguishable from &lt;code&gt;-r&lt;/code&gt; , &lt;code&gt;-w&lt;/code&gt; , &lt;code&gt;-x&lt;/code&gt; , &lt;code&gt;-o&lt;/code&gt; . (Win32, VMS, RISC OS)</source>
          <target state="translated">&lt;code&gt;-R&lt;/code&gt; 、 &lt;code&gt;-W&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/-x&quot;&gt;-X&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;-O&lt;/code&gt; は、 &lt;code&gt;-r&lt;/code&gt; 、 &lt;code&gt;-w&lt;/code&gt; 、 &lt;code&gt;-x&lt;/code&gt; 、 &lt;code&gt;-o&lt;/code&gt; と区別できません。（Win32、VMS、RISC OS）</target>
        </trans-unit>
        <trans-unit id="7eb337f6812220bbc378c8918aaccdb06d8e5a80" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-T&lt;/code&gt; and &lt;code&gt;-B&lt;/code&gt; not implemented on filehandles</source>
          <target state="translated">&lt;code&gt;-T&lt;/code&gt; および &lt;code&gt;-B&lt;/code&gt; はファイルハンドルに実装されていません</target>
        </trans-unit>
        <trans-unit id="7d5af3fb6df5c96c8552d3c4c08384be45953ef4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-d&lt;/code&gt; is true if passed a device spec without an explicit directory. (VMS)</source>
          <target state="translated">&lt;code&gt;-d&lt;/code&gt; は、明示的なディレクトリなしでデバイス仕様を渡した場合にtrueになります。（VMS）</target>
        </trans-unit>
        <trans-unit id="a340d0a2b8e44c5124e4655b8a7237da67ea42b1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-g&lt;/code&gt; , &lt;code&gt;-k&lt;/code&gt; , &lt;code&gt;-l&lt;/code&gt; , &lt;code&gt;-u&lt;/code&gt; , &lt;code&gt;-A&lt;/code&gt; are not particularly meaningful. (Win32, VMS, RISC OS)</source>
          <target state="translated">&lt;code&gt;-g&lt;/code&gt; 、 &lt;code&gt;-k&lt;/code&gt; 、 &lt;code&gt;-l&lt;/code&gt; 、 &lt;code&gt;-u&lt;/code&gt; 、 &lt;code&gt;-A&lt;/code&gt; は特に意味がありません。（Win32、VMS、RISC OS）</target>
        </trans-unit>
        <trans-unit id="f770fc0a63e71da3b8a342413f4e20e2101d6c75" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-g&lt;/code&gt; is a flag to the C compiler to have it produce debugging information which will allow us to step through a running program, and to see in which C function we are at (without the debugging information we might see only the numerical addresses of the functions, which is not very helpful).</source>
          <target state="translated">&lt;code&gt;-g&lt;/code&gt; はCコンパイラのフラグであり、実行中のプログラムをステップ実行できるようにするデバッグ情報を生成し、どのC関数にいるかを確認します（デバッグ情報がないと、関数、これはあまり役に立ちません）。</target>
        </trans-unit>
        <trans-unit id="01a975a3450c1d047de8b68a1655f0a6a6ff1b91" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-i&lt;/code&gt; sets the value of Perl's &lt;code&gt;$^I&lt;/code&gt; variable, which in turn affects the behavior of &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; ; see &lt;a href=&quot;perlrun&quot;&gt;perlrun&lt;/a&gt; for more details. By modifying the appropriate variables directly, you can get the same behavior within a larger program. For example:</source>
          <target state="translated">&lt;code&gt;-i&lt;/code&gt; は、Perlの &lt;code&gt;$^I&lt;/code&gt; 変数の値を設定します。これは、 &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; の動作に影響します。詳細については&lt;a href=&quot;perlrun&quot;&gt;perlrun&lt;/a&gt;を参照してください。適切な変数を直接変更することにより、より大きなプログラム内で同じ動作を得ることができます。例えば：</target>
        </trans-unit>
        <trans-unit id="337b967ba4742e9ed6f538291efb59f4f6fd6517" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-i&lt;/code&gt; sets the value of Perl's &lt;code&gt;$^I&lt;/code&gt; variable, which in turn affects the behavior of &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;; see &lt;a href=&quot;perlrun&quot;&gt;perlrun&lt;/a&gt; for more details. By modifying the appropriate variables directly, you can get the same behavior within a larger program. For example:</source>
          <target state="translated">&lt;code&gt;-i&lt;/code&gt; はPerlの &lt;code&gt;$^I&lt;/code&gt; 変数の値を設定します。これは、 &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; の動作に影響を与えます。詳細については、&lt;a href=&quot;perlrun&quot;&gt;perlrun&lt;/a&gt;を参照してください。適切な変数を直接変更することにより、より大きなプログラム内で同じ動作を得ることができます。例えば：</target>
        </trans-unit>
        <trans-unit id="46b10664fc54008087510d34f397715746fc9c21" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-ldb&lt;/code&gt; (&lt;code&gt;use DB_File&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;-ldb&lt;/code&gt; (&lt;code&gt;use DB_File&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="4dbc057a85c7f800669e9db2fe8dbee41005e5a7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-lgdbm_compat&lt;/code&gt; (&lt;code&gt;use GDBM_File&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;-lgdbm_compat&lt;/code&gt; （GDBM_Fileを &lt;code&gt;use GDBM_File&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="3df07bafaa229b3f5f804e2d15db5243976c6a78" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-mode&lt;/code&gt; is a synonym for &lt;code&gt;mode&lt;/code&gt; . &lt;code&gt;-recsep&lt;/code&gt; is a synonym for &lt;code&gt;recsep&lt;/code&gt; . &lt;code&gt;-memory&lt;/code&gt; is a synonym for &lt;code&gt;memory&lt;/code&gt; . You get the idea.</source>
          <target state="translated">&lt;code&gt;-mode&lt;/code&gt; は &lt;code&gt;mode&lt;/code&gt; の同義語です。 &lt;code&gt;-recsep&lt;/code&gt; は同義語である &lt;code&gt;recsep&lt;/code&gt; 。 &lt;code&gt;-memory&lt;/code&gt; は、 &lt;code&gt;memory&lt;/code&gt; の同義語です。あなたはアイデアを得ます。</target>
        </trans-unit>
        <trans-unit id="e6110680d1d767a67153d43347e3fdd6f5bcc9ed" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-mode&lt;/code&gt; is a synonym for &lt;code&gt;mode&lt;/code&gt;. &lt;code&gt;-recsep&lt;/code&gt; is a synonym for &lt;code&gt;recsep&lt;/code&gt;. &lt;code&gt;-memory&lt;/code&gt; is a synonym for &lt;code&gt;memory&lt;/code&gt;. You get the idea.</source>
          <target state="translated">&lt;code&gt;-mode&lt;/code&gt; は &lt;code&gt;mode&lt;/code&gt; の同義語です。 &lt;code&gt;-recsep&lt;/code&gt; は同義語である &lt;code&gt;recsep&lt;/code&gt; 。 &lt;code&gt;-memory&lt;/code&gt; は &lt;code&gt;memory&lt;/code&gt; の同義語です。あなたはその考えを理解します。</target>
        </trans-unit>
        <trans-unit id="3f0a276652d303ec951b268b499d37c63d348f0a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-p&lt;/code&gt; destination: %s</source>
          <target state="translated">&lt;code&gt;-p&lt;/code&gt; 宛先：％s</target>
        </trans-unit>
        <trans-unit id="e3df98be4420c3856ff554875e341d1dcb377965" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-p&lt;/code&gt; is not particularly meaningful. (VMS, RISC OS)</source>
          <target state="translated">&lt;code&gt;-p&lt;/code&gt; は特に意味がありません。（VMS、RISC OS）</target>
        </trans-unit>
        <trans-unit id="44b5ade4f4cc1c4ba0b0dbebf1e249761eeda9fa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-quiet =&amp;gt; num&lt;/code&gt; If &lt;code&gt;num&lt;/code&gt; is true, do not print any errors/warnings. This is useful when Pod::Checker is used to munge POD code into plain text from within POD formatters.</source>
          <target state="translated">&lt;code&gt;-quiet =&amp;gt; num&lt;/code&gt; 場合 &lt;code&gt;num&lt;/code&gt; が真である、任意のエラー/警告を表示しません。これは、Pod :: Checkerを使用してPODコードをPODフォーマッター内からプレーンテキストに変換する場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="f770ed91ff164559d0abd6133fd3b69dd5415bfb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-r&lt;/code&gt; , &lt;code&gt;-w&lt;/code&gt; , &lt;code&gt;-x&lt;/code&gt; , and &lt;code&gt;-o&lt;/code&gt; tell whether the file is accessible, which may not reflect UIC-based file protections. (VMS)</source>
          <target state="translated">&lt;code&gt;-r&lt;/code&gt; 、 &lt;code&gt;-w&lt;/code&gt; 、 &lt;code&gt;-x&lt;/code&gt; 、および &lt;code&gt;-o&lt;/code&gt; は、ファイルがアクセス可能かどうかを示します。これは、UICベースのファイル保護を反映していない場合があります。（VMS）</target>
        </trans-unit>
        <trans-unit id="c598522c04ff68c955ea80deb6fbadc566e1d400" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-s&lt;/code&gt; by name on an open file will return the space reserved on disk, rather than the current extent. &lt;code&gt;-s&lt;/code&gt; on an open filehandle returns the current size. (RISC OS)</source>
          <target state="translated">&lt;code&gt;-s&lt;/code&gt; 開いているファイルに対して名前で-sを指定すると、現在のエクステントではなく、ディスク上に予約されているスペースが返されます。開いているファイルハンドルに対する &lt;code&gt;-s&lt;/code&gt; は、現在のサイズを返します。（RISC OS）</target>
        </trans-unit>
        <trans-unit id="eb7f863a163eba9181b50764fd83652ace5e0f66" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-w&lt;/code&gt; is always set. You can turn this off in the test with &lt;code&gt;&lt;a href=&quot;../functions/begin&quot;&gt;BEGIN&lt;/a&gt; {
$^W = 0 }&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;-w&lt;/code&gt; は常に設定されます。これをテストで &lt;code&gt;&lt;a href=&quot;../functions/begin&quot;&gt;BEGIN&lt;/a&gt; { $^W = 0 }&lt;/code&gt; オフにできます。</target>
        </trans-unit>
        <trans-unit id="a64f9c7392987247a0fc1eb7836c0d8b005b492f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-w&lt;/code&gt; is always set. You can turn this off in the test with &lt;code&gt;BEGIN { $^W = 0 }&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;-w&lt;/code&gt; は常に設定されます。 &lt;code&gt;BEGIN { $^W = 0 }&lt;/code&gt; したテストで、これをオフにすることができます。</target>
        </trans-unit>
        <trans-unit id="51f6253934c68e4dbdee50184314e515e3ed4d69" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-w&lt;/code&gt; only inspects the read-only file attribute (FILE_ATTRIBUTE_READONLY), which determines whether the directory can be deleted, not whether it can be written to. Directories always have read and write access unless denied by discretionary access control lists (DACLs). (Win32)</source>
          <target state="translated">&lt;code&gt;-w&lt;/code&gt; は、読み取り専用ファイル属性（FILE_ATTRIBUTE_READONLY）のみを検査します。この属性は、ディレクトリに書き込みが可能かどうかではなく、削除できるかどうかを決定します。随意アクセス制御リスト（DACL）によって拒否されない限り、ディレクトリには常に読み取りおよび書き込みアクセス権があります。（Win32）</target>
        </trans-unit>
        <trans-unit id="9848a00d3e7ba37f894ed0ca52d187153533cc0d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-warnings =&amp;gt; num&lt;/code&gt; Print warnings if &lt;code&gt;num&lt;/code&gt; is true. The higher the value of &lt;code&gt;num&lt;/code&gt; , the more warnings are printed. Currently there are only levels 1 and 2.</source>
          <target state="translated">&lt;code&gt;-warnings =&amp;gt; num&lt;/code&gt; &lt;code&gt;num&lt;/code&gt; がtrueの場合、警告を出力します。 &lt;code&gt;num&lt;/code&gt; の値が大きいほど、より多くの警告が出力されます。現在、レベル1と2しかありません。</target>
        </trans-unit>
        <trans-unit id="4b176e2b933f212d02f374a3824598ae9dba0ce6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-warnings =&amp;gt; num&lt;/code&gt; Print warnings if &lt;code&gt;num&lt;/code&gt; is true. The higher the value of &lt;code&gt;num&lt;/code&gt;, the more warnings are printed. Currently there are only levels 1 and 2.</source>
          <target state="translated">&lt;code&gt;-warnings =&amp;gt; num&lt;/code&gt; 場合、警告を印刷 &lt;code&gt;num&lt;/code&gt; が真です。 &lt;code&gt;num&lt;/code&gt; の値が大きいほど、より多くの警告が出力されます。現在、レベル1と2しかありません。</target>
        </trans-unit>
        <trans-unit id="26338b342767aa86a4f5c2cd446ef7694f7f9b03" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-x&lt;/code&gt; (or &lt;code&gt;&lt;a href=&quot;functions/-x&quot;&gt;-X&lt;/a&gt;&lt;/code&gt;) determine if a file ends in one of the executable suffixes. &lt;code&gt;-S&lt;/code&gt; is meaningless. (Win32)</source>
          <target state="translated">&lt;code&gt;-x&lt;/code&gt; （または &lt;code&gt;&lt;a href=&quot;functions/-x&quot;&gt;-X&lt;/a&gt;&lt;/code&gt; ）は、ファイルが実行可能なサフィックスの1つで終わるかどうかを判別します。 &lt;code&gt;-S&lt;/code&gt; は無意味です。（Win32）</target>
        </trans-unit>
        <trans-unit id="004059b6589f5cf146373041cd8de0aa8db4fb99" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-x&lt;/code&gt; (or &lt;code&gt;&lt;a href=&quot;functions/-x&quot;&gt;-X&lt;/a&gt;&lt;/code&gt;) determine if a file has an executable file type. (RISC OS)</source>
          <target state="translated">&lt;code&gt;-x&lt;/code&gt; （または &lt;code&gt;&lt;a href=&quot;functions/-x&quot;&gt;-X&lt;/a&gt;&lt;/code&gt; ）は、ファイルに実行可能ファイルタイプがあるかどうかを判別します。（RISC OS）</target>
        </trans-unit>
        <trans-unit id="81eef613b824b1747a72935a85add68ac2d1f8db" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/&lt;/code&gt; is not implemented in Perls before 5.6, so if your code is required to work on ancient Perls you'll need to &lt;code&gt;unpack( 'Z* Z* C')&lt;/code&gt; to get the length, then use it to make a new unpack string. For example</source>
          <target state="translated">&lt;code&gt;/&lt;/code&gt; は5.6より前のPerlには実装されていないため、コードが古いPerlで動作する必要がある場合は、長さを取得するために &lt;code&gt;unpack( 'Z* Z* C')&lt;/code&gt; を実行し、それを使用して新しいunpack文字列を作成する必要があります。例えば</target>
        </trans-unit>
        <trans-unit id="30cb77fa8022c6097d9e2722edcf56db77b193e5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/&lt;/code&gt; is not implemented in Perls before 5.6, so if your code is required to work on older Perls you'll need to &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack&lt;/a&gt;( 'Z* Z* C')&lt;/code&gt; to get the length, then use it to make a new unpack string. For example</source>
          <target state="translated">&lt;code&gt;/&lt;/code&gt; は5.6より前のPerlには実装されていないため、古いPerlでコードを動作させる必要がある場合は、 &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack&lt;/a&gt;( 'Z* Z* C')&lt;/code&gt; して長さを取得し、それを使用して新しいアンパック文字列を作成する必要があります。例えば</target>
        </trans-unit>
        <trans-unit id="2255f653ec4e14f86b6a230c7950f4828d1c42f9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/World/&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m!World!&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m{World}&lt;/a&gt;&lt;/code&gt; all represent the same thing. When, e.g., the quote (&lt;code&gt;&quot;&lt;/code&gt;) is used as a delimiter, the forward slash &lt;code&gt;'/'&lt;/code&gt; becomes an ordinary character and can be used in this regexp without trouble.</source>
          <target state="translated">&lt;code&gt;/World/&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m!World!&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m{World}&lt;/a&gt;&lt;/code&gt; すべて同じものを表します。たとえば、引用符（ &lt;code&gt;&quot;&lt;/code&gt; ）を区切り文字として使用すると、スラッシュ &lt;code&gt;'/'&lt;/code&gt; が通常の文字になり、この正規表現で問題なく使用できます。</target>
        </trans-unit>
        <trans-unit id="57db4c8594199544c2d3fecbc9419f7dffeaabcb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/World/&lt;/code&gt;, &lt;code&gt;m!World!&lt;/code&gt;, and &lt;code&gt;m{World}&lt;/code&gt; all represent the same thing. When,</source>
          <target state="translated">&lt;code&gt;/World/&lt;/code&gt; 、 &lt;code&gt;m!World!&lt;/code&gt; 、および &lt;code&gt;m{World}&lt;/code&gt; すべて同じものを表します。いつ、</target>
        </trans-unit>
        <trans-unit id="2e4bb16c5b73fbb6e42dd2c89421c762d2d8f026" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/a&lt;/code&gt; also sets the character set to Unicode, BUT adds several restrictions for &lt;b&gt;A&lt;/b&gt;SCII-safe matching.</source>
          <target state="translated">&lt;code&gt;/a&lt;/code&gt; また、Unicodeに文字セットを設定しますが、いくつかの制限のための追加&lt;b&gt;A&lt;/b&gt; SCIIセーフマッチングを。</target>
        </trans-unit>
        <trans-unit id="a058655ca9b7df500f2266e0005549d8d3e223d9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/bin/ftp&lt;/code&gt; is blacklisted by default; see the &lt;code&gt;$BLACKLIST&lt;/code&gt; variable further down.</source>
          <target state="translated">&lt;code&gt;/bin/ftp&lt;/code&gt; はデフォルトでブラックリストに登録されています。さらに下の &lt;code&gt;$BLACKLIST&lt;/code&gt; 変数を参照してください。</target>
        </trans-unit>
        <trans-unit id="e7c7c0b08473b89f6eba8829e2c3c1656684873f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/d&lt;/code&gt; is the old, problematic, pre-5.14 &lt;b&gt;D&lt;/b&gt;efault character set behavior. Its only use is to force that old behavior.</source>
          <target state="translated">&lt;code&gt;/d&lt;/code&gt; が古い、問題のある、事前5.14 &lt;b&gt;D&lt;/b&gt; EFAULT文字セットの振る舞い。その唯一の用途は、その古い動作を強制することです。</target>
        </trans-unit>
        <trans-unit id="febc46674582418d06306fc87a6a9bd45f9575fb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/d&lt;/code&gt;, &lt;code&gt;/u&lt;/code&gt; , &lt;code&gt;/a&lt;/code&gt; , and &lt;code&gt;/l&lt;/code&gt; , available starting in 5.14, are called the character set modifiers; they affect the character set rules used for the regular expression.</source>
          <target state="translated">&lt;code&gt;/d&lt;/code&gt; 、 &lt;code&gt;/u&lt;/code&gt; 、 &lt;code&gt;/a&lt;/code&gt; 、および &lt;code&gt;/l&lt;/code&gt; は、5.14以降で使用可能であり、文字セット修飾子と呼ばれます。これらは、正規表現に使用される文字セットルールに影響します。</target>
        </trans-unit>
        <trans-unit id="a2060960bf53cce890224f5d094444a097782675" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/d&lt;/code&gt;, &lt;code&gt;/u&lt;/code&gt;, &lt;code&gt;/a&lt;/code&gt;, and &lt;code&gt;/l&lt;/code&gt;, available starting in 5.14, are called the character set modifiers; they affect the character set rules used for the regular expression.</source>
          <target state="translated">&lt;code&gt;/d&lt;/code&gt; 、 &lt;code&gt;/u&lt;/code&gt; 、 &lt;code&gt;/a&lt;/code&gt; 、および &lt;code&gt;/l&lt;/code&gt; は、5.14以降で使用可能であり、文字セット修飾子と呼ばれます。これらは、正規表現に使用される文字セット規則に影響します。</target>
        </trans-unit>
        <trans-unit id="06be9530bb2010fdd11e0f1b95eec169aadce4a1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/i&lt;/code&gt; - RXf_PMf_FOLD</source>
          <target state="translated">&lt;code&gt;/i&lt;/code&gt; - RXf_PMf_FOLD</target>
        </trans-unit>
        <trans-unit id="8d3dca77dde06103b6c36b2ae1b1e009f9eb7c7d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/m&lt;/code&gt; - RXf_PMf_MULTILINE</source>
          <target state="translated">&lt;code&gt;/m&lt;/code&gt; - RXf_PMf_MULTILINE</target>
        </trans-unit>
        <trans-unit id="be46506529386b3035b895262634d656f11d6b55" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/m&lt;/code&gt; and any of the other pattern modifiers valid for &lt;code&gt;qr&lt;/code&gt; (summarized in &lt;a href=&quot;perlop#qr%2FSTRING%2Fmsixpodualn&quot;&gt;&quot;qr/STRING/msixpodualn&quot; in perlop&lt;/a&gt;) may be specified explicitly.</source>
          <target state="translated">&lt;code&gt;/m&lt;/code&gt; および &lt;code&gt;qr&lt;/code&gt; に有効なその他のパタ​​ーン修飾子（&lt;a href=&quot;perlop#qr%2FSTRING%2Fmsixpodualn&quot;&gt;perlopの「qr / STRING / msixpodualn」に要約&lt;/a&gt;されています）は、明示的に指定できます。</target>
        </trans-unit>
        <trans-unit id="9b6d598b1ecd53357374289fc79181d6b6e30491" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/n&lt;/code&gt; can be negated on a per-group basis. Alternatively, named captures may still be used.</source>
          <target state="translated">&lt;code&gt;/n&lt;/code&gt; はグループごとに否定できます。または、名前付きキャプチャを引き続き使用することもできます。</target>
        </trans-unit>
        <trans-unit id="3861d5486d1c8dacacfafd812dd725204996130b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/p&lt;/code&gt; - RXf_PMf_KEEPCOPY</source>
          <target state="translated">&lt;code&gt;/p&lt;/code&gt; - RXf_PMf_KEEPCOPY</target>
        </trans-unit>
        <trans-unit id="e8cc910be73831bfdb016175defb426e9d262a26" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/s&lt;/code&gt; - RXf_PMf_SINGLELINE</source>
          <target state="translated">&lt;code&gt;/s&lt;/code&gt; - RXf_PMf_SINGLELINE</target>
        </trans-unit>
        <trans-unit id="27ac450b442821abb7c32c4c890405928fdfa28f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/u&lt;/code&gt; sets the character set to &lt;b&gt;U&lt;/b&gt;nicode.</source>
          <target state="translated">&lt;code&gt;/u&lt;/code&gt; は、文字セットを&lt;b&gt;U&lt;/b&gt; nicodeに設定します。</target>
        </trans-unit>
        <trans-unit id="3548c9702fdc2ba20697f13a861fc261122dbd0a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/x&lt;/code&gt; - RXf_PMf_EXTENDED</source>
          <target state="translated">&lt;code&gt;/x&lt;/code&gt; - RXf_PMf_EXTENDED</target>
        </trans-unit>
        <trans-unit id="04c5df4421c7fc39c500f6ab9f340d3db92f7e8a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/x&lt;/code&gt; and &lt;code&gt;/xx&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;/x&lt;/code&gt; および &lt;code&gt;/xx&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fb6e6811f940842bfe68f8f325e8926a1b230169" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/x&lt;/code&gt; but NOT &lt;code&gt;/xx&lt;/code&gt; is turned on for matching &lt;code&gt;foo&lt;/code&gt;. (One might mistakenly think that since the inner &lt;code&gt;(?x)&lt;/code&gt; is already in the scope of &lt;code&gt;/x&lt;/code&gt;, that the result would effectively be the sum of them, yielding &lt;code&gt;/xx&lt;/code&gt;. It doesn't work that way.) Similarly, doing something like &lt;code&gt;(?xx-x)foo&lt;/code&gt; turns off all &lt;code&gt;&quot;x&quot;&lt;/code&gt; behavior for matching &lt;code&gt;foo&lt;/code&gt;, it is not that you subtract 1 &lt;code&gt;&quot;x&quot;&lt;/code&gt; from 2 to get 1 &lt;code&gt;&quot;x&quot;&lt;/code&gt; remaining.</source>
          <target state="translated">&lt;code&gt;/x&lt;/code&gt; ですが、 &lt;code&gt;foo&lt;/code&gt; と一致するために &lt;code&gt;/xx&lt;/code&gt; はオンになりません。（内部 &lt;code&gt;(?x)&lt;/code&gt; はすでに &lt;code&gt;/x&lt;/code&gt; のスコープ内にあるため、結果は事実上それらの合計になり、 &lt;code&gt;/xx&lt;/code&gt; が生成されると誤解する可能性があります。そのようには機能しません。）同様に、何かを行う以下のような &lt;code&gt;(?xx-x)foo&lt;/code&gt; すべてオフにし &lt;code&gt;&quot;x&quot;&lt;/code&gt; のマッチングのための行動 &lt;code&gt;foo&lt;/code&gt; が、それはあなたが1引くことはなく、 &lt;code&gt;&quot;x&quot;&lt;/code&gt; 1得るために2から &lt;code&gt;&quot;x&quot;&lt;/code&gt; の残りを。</target>
        </trans-unit>
        <trans-unit id="ffd7758b5452e01f565373a6a0ae745fee7b3413" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/x&lt;/code&gt; lets you turn this:</source>
          <target state="translated">&lt;code&gt;/x&lt;/code&gt; はこれを有効にします：</target>
        </trans-unit>
        <trans-unit id="22ddae5ee6d3b01640a82b11115def15c0a0729c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/x&lt;/code&gt; tells the regular expression parser to ignore most whitespace that is neither backslashed nor within a bracketed character class. You can use this to break up your regular expression into (slightly) more readable parts. Also, the &lt;code&gt;#&lt;/code&gt; character is treated as a metacharacter introducing a comment that runs up to the pattern's closing delimiter, or to the end of the current line if the pattern extends onto the next line. Hence, this is very much like an ordinary Perl code comment. (You can include the closing delimiter within the comment only if you precede it with a backslash, so be careful!)</source>
          <target state="translated">&lt;code&gt;/x&lt;/code&gt; は、正規表現パーサーに、バックスラッシュもブラケット文字クラス内にもないほとんどの空白を無視するように指示します。これを使用して、正規表現を（わずかに）読みやすい部分に分割できます。また、 &lt;code&gt;#&lt;/code&gt; 文字は、パターンの終了デリミタまで、またはパターンが次の行に及ぶ場合は現在の行の終わりまで続くコメントを導入するメタ文字として扱われます。したがって、これは通常のPerlコードコメントと非常によく似ています。（コメントの前にバックスラッシュが付いている場合にのみ、終了デリミタを含めることができます。注意してください。）</target>
        </trans-unit>
        <trans-unit id="5981c6b6f44acf2b5d0296f7ddc1ba22fd92a26b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;0[0]&lt;/code&gt; items indicate that there is no corresponding node.</source>
          <target state="translated">&lt;code&gt;0[0]&lt;/code&gt; 項目は、対応するノードがないことを示します。</target>
        </trans-unit>
        <trans-unit id="9e482cf4b4fb32a891abadbdc5931dba553b2cbc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;1..1&lt;/code&gt; is the plan. Gotta have a plan.</source>
          <target state="translated">&lt;code&gt;1..1&lt;/code&gt; が計画です。お奨めの計画があります。</target>
        </trans-unit>
        <trans-unit id="357c1f4786776945e609918b8c8cfeffd4814efc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;1..2&lt;/code&gt; &quot;I'm going to run two tests.&quot; This number is a</source>
          <target state="translated">&lt;code&gt;1..2&lt;/code&gt; 「2つのテストを実行します。」この番号は</target>
        </trans-unit>
        <trans-unit id="71f4659203df54167193cff6c0f4aff8f74db145" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;1&lt;/code&gt; for the active [boot] partition, &lt;code&gt;0&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;1&lt;/code&gt; アクティブ[ブート]パーティションのため、 &lt;code&gt;0&lt;/code&gt; それ以外の場合。</target>
        </trans-unit>
        <trans-unit id="079935d14865ac40c0d6e200d065519e65c3cdcf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;2&amp;gt;&amp;amp;1&lt;/code&gt; redirects stderr to stdout.</source>
          <target state="translated">&lt;code&gt;2&amp;gt;&amp;amp;1&lt;/code&gt; は stderrをstdoutにリダイレクトします。</target>
        </trans-unit>
        <trans-unit id="337d24f61f20784a0224676b1a3b5621a81abd45" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;2&amp;gt;&amp;gt;file&lt;/code&gt; appends stderr to &lt;code&gt;file&lt;/code&gt; , and</source>
          <target state="translated">&lt;code&gt;2&amp;gt;&amp;gt;file&lt;/code&gt; はstderrを &lt;code&gt;file&lt;/code&gt; に追加し、</target>
        </trans-unit>
        <trans-unit id="c93e1e3b63b3997909269a56132979367a2908b5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;2&amp;gt;&amp;gt;file&lt;/code&gt; appends stderr to &lt;code&gt;file&lt;/code&gt;, and</source>
          <target state="translated">&lt;code&gt;2&amp;gt;&amp;gt;file&lt;/code&gt; はstderrを &lt;code&gt;file&lt;/code&gt; に追加し、</target>
        </trans-unit>
        <trans-unit id="b7ccb2f92fe3975e1a3fd67583081fc9c8b22203" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;2&amp;gt;file&lt;/code&gt; writes stderr to &lt;code&gt;file&lt;/code&gt; ,</source>
          <target state="translated">&lt;code&gt;2&amp;gt;file&lt;/code&gt; はstderrを &lt;code&gt;file&lt;/code&gt; に書き込みます。</target>
        </trans-unit>
        <trans-unit id="2633d2d523c28079e792d5d37573647c2bf245bf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;2&amp;gt;file&lt;/code&gt; writes stderr to &lt;code&gt;file&lt;/code&gt;,</source>
          <target state="translated">&lt;code&gt;2&amp;gt;file&lt;/code&gt; はstderrを &lt;code&gt;file&lt;/code&gt; に書き込みます、</target>
        </trans-unit>
        <trans-unit id="3981fad441eed11874883499cec6490b94bc7d20" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;:extended&lt;/code&gt; exports the Perl specific functions for &lt;code&gt;syslog(3)&lt;/code&gt; :</source>
          <target state="translated">&lt;code&gt;:extended&lt;/code&gt; は、 &lt;code&gt;syslog(3)&lt;/code&gt; の Perl固有の関数をエクスポートします。</target>
        </trans-unit>
        <trans-unit id="20809ddba384127a4e6dcad13d2bbb2ef9338a6b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;:extended&lt;/code&gt; exports the Perl specific functions for &lt;code&gt;syslog(3)&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;:extended&lt;/code&gt; は、 &lt;code&gt;syslog(3)&lt;/code&gt; のPerl固有の関数をエクスポートします。</target>
        </trans-unit>
        <trans-unit id="b097d19f9e31e760a010b2177386c29f33c946a3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;:loose&lt;/code&gt; is a variant of &lt;code&gt;:full&lt;/code&gt; which allows</source>
          <target state="translated">&lt;code&gt;:loose&lt;/code&gt; は &lt;code&gt;:full&lt;/code&gt; の変形であり、</target>
        </trans-unit>
        <trans-unit id="669910f757f8fda30540781c67df68d670678863" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;:loose&lt;/code&gt; slows down look-ups by a factor of 2 to 3 versus &lt;code&gt;:full&lt;/code&gt; , but the trade-off may be worth it to you. Each individual look-up takes very little time, and the results are cached, so the speed difference would become a factor only in programs that do look-ups of many different spellings, and probably only when those look-ups are through &lt;code&gt;vianame()&lt;/code&gt; and &lt;code&gt;string_vianame()&lt;/code&gt; , since &lt;code&gt;\N{...}&lt;/code&gt; look-ups are done at compile time.</source>
          <target state="translated">&lt;code&gt;:loose&lt;/code&gt; は、 &lt;code&gt;:full&lt;/code&gt; に比べてルックアップを2〜3倍遅くしますが、トレードオフの価値があるかもしれません。個々のルックアップにかかる時間はほとんどなく、結果はキャッシュされるため、速度の違いは、多くの異なるスペルのルックアップを行うプログラムでのみ、おそらくこれらのルックアップが &lt;code&gt;vianame()&lt;/code&gt; を介して行われる場合にのみ要素になります。および &lt;code&gt;string_vianame()&lt;/code&gt; 。 &lt;code&gt;\N{...}&lt;/code&gt; ルックアップはコンパイル時に行われるため。</target>
        </trans-unit>
        <trans-unit id="c6e0215da1d7610a87a4e7d86aa022e822a6f802" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;:loose&lt;/code&gt; slows down look-ups by a factor of 2 to 3 versus &lt;code&gt;:full&lt;/code&gt;, but the trade-off may be worth it to you. Each individual look-up takes very little time, and the results are cached, so the speed difference would become a factor only in programs that do look-ups of many different spellings, and probably only when those look-ups are through &lt;code&gt;vianame()&lt;/code&gt; and &lt;code&gt;string_vianame()&lt;/code&gt;, since &lt;code&gt;\N{...}&lt;/code&gt; look-ups are done at compile time.</source>
          <target state="translated">&lt;code&gt;:loose&lt;/code&gt; は、ルックアップを &lt;code&gt;:full&lt;/code&gt; に対して2〜3倍遅くしますが、トレードオフはそれだけの価値があるかもしれません。個々のルックアップにかかる時間は非常に &lt;code&gt;vianame()&lt;/code&gt; 、結果はキャッシュされるため、速度の違いは、多くの異なるスペルのルックアップを実行するプログラムでのみ、おそらくそれらのルックアップがvianame（）を介して行われる場合にのみ要因になります。そして &lt;code&gt;string_vianame()&lt;/code&gt; 、以降 &lt;code&gt;\N{...}&lt;/code&gt; ルックアップはコンパイル時に行われます。</target>
        </trans-unit>
        <trans-unit id="f30cd1d98eed48333498321f9b192607ed098b00" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;:macros&lt;/code&gt; exports the symbols corresponding to most of your &lt;code&gt;syslog(3)&lt;/code&gt; macros and the &lt;code&gt;LOG_UPTO()&lt;/code&gt; and &lt;code&gt;LOG_MASK()&lt;/code&gt; functions. See &lt;a href=&quot;#CONSTANTS&quot;&gt;&quot;CONSTANTS&quot;&lt;/a&gt; for the supported constants and their meaning.</source>
          <target state="translated">&lt;code&gt;:macros&lt;/code&gt; は、ほとんどの &lt;code&gt;syslog(3)&lt;/code&gt; マクロと &lt;code&gt;LOG_UPTO()&lt;/code&gt; および &lt;code&gt;LOG_MASK()&lt;/code&gt; 関数に対応するシンボルをエクスポートします。サポートされている定数とその意味については、&lt;a href=&quot;#CONSTANTS&quot;&gt;「定数」&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="e9d7d864e6dd6725fe109f9ec74c6124803c81cb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;:macros&lt;/code&gt; exports the symbols corresponding to most of your &lt;code&gt;syslog(3)&lt;/code&gt; macros and the &lt;code&gt;LOG_UPTO()&lt;/code&gt; and &lt;code&gt;LOG_MASK()&lt;/code&gt; functions. See &lt;a href=&quot;#CONSTANTS&quot;&gt;CONSTANTS&lt;/a&gt; for the supported constants and their meaning.</source>
          <target state="translated">&lt;code&gt;:macros&lt;/code&gt; は、ほとんどの &lt;code&gt;syslog(3)&lt;/code&gt; マクロに対応するシンボルと、 &lt;code&gt;LOG_UPTO()&lt;/code&gt; および &lt;code&gt;LOG_MASK()&lt;/code&gt; 関数をエクスポートします。参照&lt;a href=&quot;#CONSTANTS&quot;&gt;定数&lt;/a&gt;サポート定数とその意味については。</target>
        </trans-unit>
        <trans-unit id="f664d57f829bb236ed3a80342cea7743e03c9843" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;:nocase&lt;/code&gt; and &lt;code&gt;:case&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;:nocase&lt;/code&gt; および &lt;code&gt;:case&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6ab2b6ddbb0fceedf80002fb9aaa0607068bb9e4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;:opd&lt;/code&gt; is a shortcut for &lt;code&gt;:opd=st&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;:opd&lt;/code&gt; は &lt;code&gt;:opd=st&lt;/code&gt; のショートカットです。</target>
        </trans-unit>
        <trans-unit id="393965e591f823a5c7c5f84e45b034f602c1b44f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;:perlio&lt;/code&gt; will insert a &lt;code&gt;:unix&lt;/code&gt; layer below itself to do low level IO.</source>
          <target state="translated">&lt;code&gt;:perlio&lt;/code&gt; は、その下に &lt;code&gt;:unix&lt;/code&gt; レイヤーを挿入して、低レベルIOを実行します。</target>
        </trans-unit>
        <trans-unit id="58bdb7835e989d3493f81c8387cdd5e6b357f584" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;:standard&lt;/code&gt; exports the standard &lt;code&gt;syslog(3)&lt;/code&gt; functions:</source>
          <target state="translated">&lt;code&gt;:standard&lt;/code&gt; は、標準の &lt;code&gt;syslog(3)&lt;/code&gt; 関数をエクスポートします。</target>
        </trans-unit>
        <trans-unit id="f99024fdcd5d7be686de72feba8634bf250081c3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;:std&lt;/code&gt; is not a layer but an additional subpragma. When specified in the import list, it activates an additional functionality of pushing the layers selected for input/output handles to the standard filehandles (STDIN, STDOUT, STDERR). If the new layers and existing layer stack both end with an &lt;code&gt;:encoding&lt;/code&gt; layer, the existing &lt;code&gt;:encoding&lt;/code&gt; layer will also be removed.</source>
          <target state="translated">&lt;code&gt;:std&lt;/code&gt; はレイヤーではなく、追加のサブプラグマです。インポートリストで指定すると、入出力ハンドル用に選択されたレイヤーを標準ファイルハンドル（STDIN、STDOUT、STDERR）にプッシュする追加機能がアクティブになります。新しいレイヤーと既存のレイヤースタックの両方が &lt;code&gt;:encoding&lt;/code&gt; レイヤーで終わる場合、既存の &lt;code&gt;:encoding&lt;/code&gt; レイヤーも削除されます。</target>
        </trans-unit>
        <trans-unit id="5614a93cb7651c6f75221f644159413f24c097f2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;:via(MODULE)&lt;/code&gt; allows a transformation to be applied by an arbitrary Perl module, for example compression / decompression, encryption / decryption. See &lt;a href=&quot;PerlIO::via&quot;&gt;PerlIO::via&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;code&gt;:via(MODULE)&lt;/code&gt; を使用すると、圧縮/解凍、暗号化/復号化など、任意のPerlモジュールで変換を適用できます。詳細については、&lt;a href=&quot;PerlIO::via&quot;&gt;PerlIO :: via&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="e8c47c3c98a623a31a423c0141262968398f2c3a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;;&lt;/code&gt; before executing your program. This loads the module and calls its &lt;code&gt;import&lt;/code&gt; method, causing the module to have its default effect, typically importing subroutines or giving effect to a pragma. You can use quotes to add extra code after the module name, e.g., &lt;code&gt;'-M&lt;i&gt;MODULE&lt;/i&gt; qw(foo bar)'&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;;&lt;/code&gt; プログラムを実行する前に。これにより、モジュールがロードされ、その &lt;code&gt;import&lt;/code&gt; メソッドが呼び出されます。これにより、モジュールはデフォルトの効果を持ち、通常はサブルーチンをインポートするか、プラグマに効果を与えます。引用符を使用して、モジュール名の後にコードを追加できます（例： &lt;code&gt;'-M&lt;i&gt;MODULE&lt;/i&gt; qw(foo bar)'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7723508b0cf32c6becdfb32b8c90afbcd97daea4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;;&lt;/code&gt; before executing your program. You can use quotes to add extra code after the module name, e.g., &lt;code&gt;'-M&lt;i&gt;MODULE&lt;/i&gt; qw(foo bar)'&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;;&lt;/code&gt; プログラムを実行する前に。引用符を使用して、モジュール名の後にコードを追加できます（例： &lt;code&gt;'-M&lt;i&gt;MODULE&lt;/i&gt; qw(foo bar)'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="46553e5b2e1fde3176954b71404b7f6a22f6b3a1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;../../functions/import&quot;&gt;import()&lt;/a&gt;&lt;/code&gt; also sets the &lt;code&gt;exported_to()&lt;/code&gt; attribute of your builder to be the caller of the &lt;code&gt;&lt;a href=&quot;../../functions/import&quot;&gt;import()&lt;/a&gt;&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../../functions/import&quot;&gt;import()&lt;/a&gt;&lt;/code&gt; も設定します &lt;code&gt;exported_to()&lt;/code&gt; の呼び出し元であるためにあなたのビルダーの属性を &lt;code&gt;&lt;a href=&quot;../../functions/import&quot;&gt;import()&lt;/a&gt;&lt;/code&gt; 関数。</target>
        </trans-unit>
        <trans-unit id="0b4b41e6d9806d4d5463fcd3e58de249dc723c02" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;../functions/binmode&quot;&gt;binmode&lt;/a&gt;&lt;/code&gt; accepts one optional parameter, which is the layer to be passed on to the &lt;code&gt;&lt;a href=&quot;../functions/binmode&quot;&gt;binmode&lt;/a&gt;&lt;/code&gt; call.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../functions/binmode&quot;&gt;binmode&lt;/a&gt;&lt;/code&gt; はオプションのパラメーターを1つ受け入れます。これは、 &lt;code&gt;&lt;a href=&quot;../functions/binmode&quot;&gt;binmode&lt;/a&gt;&lt;/code&gt; 呼び出しに渡されるレイヤーです。</target>
        </trans-unit>
        <trans-unit id="74f783a72bce4dae4ba2e4905d91ba101d770101" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;../functions/binmode&quot;&gt;binmode&lt;/a&gt;&lt;/code&gt; sets &lt;code&gt;&lt;a href=&quot;../functions/binmode&quot;&gt;binmode&lt;/a&gt;&lt;/code&gt; on the underlying &lt;code&gt;IO&lt;/code&gt; object, as documented in &lt;code&gt;perldoc -f &lt;a href=&quot;../functions/binmode&quot;&gt;binmode&lt;/a&gt;&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../functions/binmode&quot;&gt;binmode&lt;/a&gt;&lt;/code&gt; をのセット &lt;code&gt;&lt;a href=&quot;../functions/binmode&quot;&gt;binmode&lt;/a&gt;&lt;/code&gt; を根本的に &lt;code&gt;IO&lt;/code&gt; のオブジェクト、に記載されているように &lt;code&gt;perldoc -f &lt;a href=&quot;../functions/binmode&quot;&gt;binmode&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8c2c461c21657cf272797141a2b0587b13a03497" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;../functions/int&quot;&gt;int()&lt;/a&gt;&lt;/code&gt; will return (at least for Perl v5.7.1 and up) another BigInt, not a Perl scalar:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../functions/int&quot;&gt;int()&lt;/a&gt;&lt;/code&gt; は、Perlスカラーではなく、別のBigInt（少なくともPerl v5.7.1以降の場合）を返します。</target>
        </trans-unit>
        <trans-unit id="87be11f6d2f761c7d725f291d31bf6656fee51d3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;../functions/lock&quot;&gt;lock&lt;/a&gt;&lt;/code&gt; follows references exactly</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../functions/lock&quot;&gt;lock&lt;/a&gt;&lt;/code&gt; は参照に正確に従います</target>
        </trans-unit>
        <trans-unit id="5da38e4772827175e65158aeaa06f0af9689d353" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;../functions/lock&quot;&gt;lock&lt;/a&gt;&lt;/code&gt; places a &lt;b&gt;advisory&lt;/b&gt; lock on a variable until the lock goes out of scope. If the variable is locked by another thread, the &lt;code&gt;&lt;a href=&quot;../functions/lock&quot;&gt;lock&lt;/a&gt;&lt;/code&gt; call will block until it's available. Multiple calls to &lt;code&gt;&lt;a href=&quot;../functions/lock&quot;&gt;lock&lt;/a&gt;&lt;/code&gt; by the same thread from within dynamically nested scopes are safe -- the variable will remain locked until the outermost lock on the variable goes out of scope.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../functions/lock&quot;&gt;lock&lt;/a&gt;&lt;/code&gt; 置か&lt;b&gt;諮問&lt;/b&gt;ロックがスコープから外れるまで変数のロックを。変数が別のスレッドによってロックされている場合、 &lt;code&gt;&lt;a href=&quot;../functions/lock&quot;&gt;lock&lt;/a&gt;&lt;/code&gt; 呼び出しは、使用可能になるまでブロックされます。動的にネストされたスコープ内から同じスレッドで &lt;code&gt;&lt;a href=&quot;../functions/lock&quot;&gt;lock&lt;/a&gt;&lt;/code&gt; する複数の呼び出しは安全です。変数の最も外側のロックがスコープから外れるまで、変数はロックされたままになります。</target>
        </trans-unit>
        <trans-unit id="b0bc602e5a95f7ab0683bcb13cca7976f3a0b65a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;../functions/log&quot;&gt;log(-inf)&lt;/a&gt;&lt;/code&gt; is highly weird. Since log(-x)=pi*i+log(x), then log(-inf)=pi*i+inf. However, since the imaginary part is finite, the real infinity &quot;overshadows&quot; it, so the number might as well just be infinity. However, the result is a complex number, and since BigInt/BigFloat can only have real numbers as results, the result is NaN.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../functions/log&quot;&gt;log(-inf)&lt;/a&gt;&lt;/code&gt; は非常に奇妙です。log（-x）= pi * i + log（x）なので、log（-inf）= pi * i + infになります。ただし、虚数部は有限であるため、実際の無限大はそれを「覆い隠す」ため、数も無限大になる可能性があります。ただし、結果は複素数であり、BigInt / BigFloatは実数しか結果として持つことができないため、結果はNaNになります。</target>
        </trans-unit>
        <trans-unit id="59ec191a3833592580741021600849b3abd729c8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;../functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; accepts one, two or three parameters. With one parameter, it is just a front end for the built-in &lt;code&gt;&lt;a href=&quot;../functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; function. With two or three parameters, the first parameter is a filename that may include whitespace or other special characters, and the second parameter is the open mode, optionally followed by a file permission value.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; は、1つ、2つ、または3つのパラメーターを受け入れます。パラメータが1つしかない場合は、組み込みの &lt;code&gt;&lt;a href=&quot;../functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; 関数のフロントエンドにすぎません。2つまたは3つのパラメーターでは、最初のパラメーターは空白またはその他の特殊文字を含む可能性のあるファイル名であり、2番目のパラメーターはオープンモードで、オプションでファイル許可値が続きます。</target>
        </trans-unit>
        <trans-unit id="c2ead93e5ae2cdbfb37e87b9aaf4b56f8342cd9b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;../functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; takes two arguments. The first is the name of the file to open and the second is the open mode. The mode can be anything acceptable to &lt;a href=&quot;../compress/zlib&quot;&gt;Compress::Zlib&lt;/a&gt; and by extension anything acceptable to</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; は2つの引数を取ります。1つ目は開くファイルの名前で、2つ目はオープンモードです。モードは&lt;a href=&quot;../compress/zlib&quot;&gt; Compress :: Zlibに&lt;/a&gt;受け入れ可能なものであれば何でも構いません。</target>
        </trans-unit>
        <trans-unit id="10314a65bb5f737678649714b2af14bac7ab022b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;../functions/push&quot;&gt;push&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../functions/pop&quot;&gt;pop&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../functions/shift&quot;&gt;shift&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../functions/unshift&quot;&gt;unshift&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;../functions/splice&quot;&gt;splice&lt;/a&gt;&lt;/code&gt; cannot be deferred. When you perform one of these operations, any deferred data is written to the file and the operation is performed immediately. This may change in a future version.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../functions/push&quot;&gt;push&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../functions/pop&quot;&gt;pop&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../functions/shift&quot;&gt;shift&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../functions/unshift&quot;&gt;unshift&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;../functions/splice&quot;&gt;splice&lt;/a&gt;&lt;/code&gt; は延期できません。これらの操作のいずれかを実行すると、遅延データがファイルに書き込まれ、操作はすぐに実行されます。これは将来のバージョンで変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="75f1af66ad9aaecf816ee7e3787eccbf41e6b7e6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;../functions/select&quot;&gt;select&lt;/a&gt;&lt;/code&gt; is a static method, that is you call it with the package name like &lt;code&gt;new&lt;/code&gt; . &lt;code&gt;READ&lt;/code&gt; , &lt;code&gt;WRITE&lt;/code&gt; and &lt;code&gt;EXCEPTION&lt;/code&gt; are either &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;IO::Select&lt;/code&gt; objects. &lt;code&gt;TIMEOUT&lt;/code&gt; is optional and has the same effect as for the core select call.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../functions/select&quot;&gt;select&lt;/a&gt;&lt;/code&gt; は静的メソッドです。つまり、 &lt;code&gt;new&lt;/code&gt; のようなパッケージ名で呼び出します。 &lt;code&gt;READ&lt;/code&gt; 、 &lt;code&gt;WRITE&lt;/code&gt; および &lt;code&gt;EXCEPTION&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;IO::Select&lt;/code&gt; オブジェクトです。 &lt;code&gt;TIMEOUT&lt;/code&gt; はオプションであり、コアの選択呼び出しと同じ効果があります。</target>
        </trans-unit>
        <trans-unit id="817eadf1b9adde1ba72695f76344cd268af72b88" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; only ever matches another &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; は、別の undefとのみ一致し &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5396d3ff479715000ca76635e4a7743888fcf9b1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; will only ever match &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;. So you can test a value against &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; like this:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; は undefとのみ一致し &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 。したがって、次のように &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; に対して値をテストできます。</target>
        </trans-unit>
        <trans-unit id="00aaf4e59c63d867f1c68b03ef33ba4aa5fba34a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;-ing a &lt;code&gt;Tie::File&lt;/code&gt; array element just blanks out the corresponding record in the file. When you read it back again, you'll get the empty string, so the supposedly-&lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;'ed value will be defined. Similarly, if you have &lt;code&gt;autochomp&lt;/code&gt; disabled, then</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; -ing &lt;code&gt;Tie::File&lt;/code&gt; 配列要素は、ファイル内の対応するレコードを単に空白にします。もう一度読むと、空の文字列が返されるので、 &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; と思われる値が定義されます。同様に、 &lt;code&gt;autochomp&lt;/code&gt; を無効にしている場合、</target>
        </trans-unit>
        <trans-unit id="6e7047b1bd29e1be50a6c94747b1f96dfa733cc5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;. The value of the macro is not needed.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 。マクロの値は必要ありません。</target>
        </trans-unit>
        <trans-unit id="e529533962f928a5563433218b96d46c0165a2f6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; raises an exception. Inside an &lt;code&gt;&lt;a href=&quot;eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; the error message is stuffed into &lt;code&gt;$@&lt;/code&gt; and the &lt;code&gt;&lt;a href=&quot;eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; is terminated with the undefined value. If the exception is outside of all enclosing &lt;code&gt;&lt;a href=&quot;eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt;s, then the uncaught exception prints LIST to &lt;code&gt;STDERR&lt;/code&gt; and exits with a non-zero value. If you need to exit the process with a specific exit code, see &lt;a href=&quot;exit&quot;&gt;exit&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; は例外を発生させます。 &lt;code&gt;&lt;a href=&quot;eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; 内では、エラーメッセージは &lt;code&gt;$@&lt;/code&gt; 詰め込まれ、 &lt;code&gt;&lt;a href=&quot;eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; は未定義の値で終了します。例外がすべての外側の &lt;code&gt;&lt;a href=&quot;eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; の外側にある場合、キャッチされなかった例外はLISTを &lt;code&gt;STDERR&lt;/code&gt; に出力し、ゼロ以外の値で終了します。あなたが特定の終了コードでプロセスを終了する必要がある場合は、参照の&lt;a href=&quot;exit&quot;&gt;終了を&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="cc00daf5a8853ec2a5f38fb396e5099336656db3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;do&quot;&gt;do&lt;/a&gt; BLOCK&lt;/code&gt; does</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;do&quot;&gt;do&lt;/a&gt; BLOCK&lt;/code&gt; ありません</target>
        </trans-unit>
        <trans-unit id="3ef00a2fa49a9b03b5b9e7f1482c6a3dce655e77" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;eval&quot;&gt;eval&lt;/a&gt; BLOCK&lt;/code&gt; does</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;eval&quot;&gt;eval&lt;/a&gt; BLOCK&lt;/code&gt; は</target>
        </trans-unit>
        <trans-unit id="4df80248abb973135120867aea4de5126e5c9845" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/-x&quot;&gt;-X&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/binmode&quot;&gt;binmode&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/chmod&quot;&gt;chmod&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/chown&quot;&gt;chown&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/chroot&quot;&gt;chroot&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/crypt&quot;&gt;crypt&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/dbmclose&quot;&gt;dbmclose&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/dbmopen&quot;&gt;dbmopen&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/dump&quot;&gt;dump&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/endgrent&quot;&gt;endgrent&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/endhostent&quot;&gt;endhostent&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/endnetent&quot;&gt;endnetent&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/endprotoent&quot;&gt;endprotoent&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/endpwent&quot;&gt;endpwent&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/endservent&quot;&gt;endservent&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/exec&quot;&gt;exec&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/fcntl&quot;&gt;fcntl&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/flock&quot;&gt;flock&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/fork&quot;&gt;fork&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/getgrent&quot;&gt;getgrent&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/getgrgid&quot;&gt;getgrgid&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/gethostbyname&quot;&gt;gethostbyname&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/gethostent&quot;&gt;gethostent&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/getlogin&quot;&gt;getlogin&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/getnetbyaddr&quot;&gt;getnetbyaddr&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/getnetbyname&quot;&gt;getnetbyname&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/getnetent&quot;&gt;getnetent&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/getppid&quot;&gt;getppid&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/getpgrp&quot;&gt;getpgrp&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/getpriority&quot;&gt;getpriority&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/getprotobynumber&quot;&gt;getprotobynumber&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/getprotoent&quot;&gt;getprotoent&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/getpwent&quot;&gt;getpwent&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/getpwnam&quot;&gt;getpwnam&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/getpwuid&quot;&gt;getpwuid&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/getservbyport&quot;&gt;getservbyport&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/getservent&quot;&gt;getservent&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/getsockopt&quot;&gt;getsockopt&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/glob&quot;&gt;glob&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/ioctl&quot;&gt;ioctl&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/kill&quot;&gt;kill&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/link&quot;&gt;link&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/lstat&quot;&gt;lstat&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/msgctl&quot;&gt;msgctl&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/msgget&quot;&gt;msgget&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/msgrcv&quot;&gt;msgrcv&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/msgsnd&quot;&gt;msgsnd&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/pipe&quot;&gt;pipe&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/readlink&quot;&gt;readlink&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/rename&quot;&gt;rename&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/select&quot;&gt;select&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/semctl&quot;&gt;semctl&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/semget&quot;&gt;semget&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/semop&quot;&gt;semop&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/setgrent&quot;&gt;setgrent&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/sethostent&quot;&gt;sethostent&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/setnetent&quot;&gt;setnetent&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/setpgrp&quot;&gt;setpgrp&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/setpriority&quot;&gt;setpriority&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/setprotoent&quot;&gt;setprotoent&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/setpwent&quot;&gt;setpwent&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/setservent&quot;&gt;setservent&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/setsockopt&quot;&gt;setsockopt&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/shmctl&quot;&gt;shmctl&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/shmget&quot;&gt;shmget&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/shmread&quot;&gt;shmread&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/shmwrite&quot;&gt;shmwrite&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/socket&quot;&gt;socket&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/socketpair&quot;&gt;socketpair&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/stat&quot;&gt;stat&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/symlink&quot;&gt;symlink&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/syscall&quot;&gt;syscall&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/sysopen&quot;&gt;sysopen&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/times&quot;&gt;times&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/truncate&quot;&gt;truncate&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/umask&quot;&gt;umask&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/unlink&quot;&gt;unlink&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/utime&quot;&gt;utime&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/wait&quot;&gt;wait&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/waitpid&quot;&gt;waitpid&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/-x&quot;&gt;-X&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/binmode&quot;&gt;binmode&lt;/a&gt;&lt;/code&gt; を、 &lt;code&gt;&lt;a href=&quot;functions/chmod&quot;&gt;chmod&lt;/a&gt;&lt;/code&gt; コマンド、 &lt;code&gt;&lt;a href=&quot;functions/chown&quot;&gt;chown&lt;/a&gt;&lt;/code&gt; を、 &lt;code&gt;&lt;a href=&quot;functions/chroot&quot;&gt;chroot&lt;/a&gt;&lt;/code&gt; の、 &lt;code&gt;&lt;a href=&quot;functions/crypt&quot;&gt;crypt&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/dbmclose&quot;&gt;dbmclose&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/dbmopen&quot;&gt;dbmopen&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/dump&quot;&gt;dump&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/endgrent&quot;&gt;endgrent&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/endhostent&quot;&gt;endhostent&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/endnetent&quot;&gt;endnetent&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/endprotoent&quot;&gt;endprotoent&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/endpwent&quot;&gt;endpwent&lt;/a&gt;&lt;/code&gt; が、 &lt;code&gt;&lt;a href=&quot;functions/endservent&quot;&gt;endservent&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/exec&quot;&gt;exec&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/fcntl&quot;&gt;fcntl&lt;/a&gt;&lt;/code&gt; の、 &lt;code&gt;&lt;a href=&quot;functions/flock&quot;&gt;flock&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/fork&quot;&gt;fork&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/getgrent&quot;&gt;getgrent&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/getgrgid&quot;&gt;getgrgid&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/gethostbyname&quot;&gt;gethostbyname&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/gethostent&quot;&gt;gethostent&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/getlogin&quot;&gt;getlogin&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/getnetbyaddr&quot;&gt;getnetbyaddr&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/getnetbyname&quot;&gt;getnetbyname&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/getnetent&quot;&gt;getnetent&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/getppid&quot;&gt;getppid&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/getpgrp&quot;&gt;getpgrp&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/getpriority&quot;&gt;getpriority&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/getprotobynumber&quot;&gt;getprotobynumber&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/getprotoent&quot;&gt;getprotoent&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/getpwent&quot;&gt;getpwent&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/getpwnam&quot;&gt;getpwnam&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/getpwuid&quot;&gt;getpwuid&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/getservbyport&quot;&gt;getservbyport&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/getservent&quot;&gt;getservent&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/getsockopt&quot;&gt;getsockopt&lt;/a&gt;&lt;/code&gt; の、 &lt;code&gt;&lt;a href=&quot;functions/glob&quot;&gt;glob&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/ioctl&quot;&gt;ioctl&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/kill&quot;&gt;kill&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/link&quot;&gt;link&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/lstat&quot;&gt;lstat&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/msgctl&quot;&gt;msgctl&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/msgget&quot;&gt;msgget&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/msgrcv&quot;&gt;msgrcv&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/msgsnd&quot;&gt;msgsnd&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/pipe&quot;&gt;pipe&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/readlink&quot;&gt;readlink&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/rename&quot;&gt;rename&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/select&quot;&gt;select&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/semctl&quot;&gt;semctl&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/semget&quot;&gt;semget&lt;/a&gt;&lt;/code&gt; から、 &lt;code&gt;&lt;a href=&quot;functions/semop&quot;&gt;semop&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/setgrent&quot;&gt;setgrent&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/sethostent&quot;&gt;sethostent&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/setnetent&quot;&gt;setnetent&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/setpgrp&quot;&gt;setpgrp&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/setpriority&quot;&gt;setpriority&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/setprotoent&quot;&gt;setprotoent&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/setpwent&quot;&gt;setpwent&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/setservent&quot;&gt;setservent&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/setsockopt&quot;&gt;setsockopt&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/shmctl&quot;&gt;shmctl&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/shmget&quot;&gt;shmget&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/shmread&quot;&gt;shmread&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/shmwrite&quot;&gt;shmwrite&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/socket&quot;&gt;socket&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/socketpair&quot;&gt;socketpair&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/stat&quot;&gt;stat&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/symlink&quot;&gt;symlink&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/syscall&quot;&gt;syscall&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/sysopen&quot;&gt;sysopen&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/times&quot;&gt;times&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/truncate&quot;&gt;truncate&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/umask&quot;&gt;umask&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/unlink&quot;&gt;unlink&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/utime&quot;&gt;utime&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/wait&quot;&gt;wait&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/waitpid&quot;&gt;waitpid&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c20b988761a2edd02a7e93114a0c1a07205215f2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/abs&quot;&gt;abs&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/atan2&quot;&gt;atan2&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/cos&quot;&gt;cos&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/exp&quot;&gt;exp&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/hex&quot;&gt;hex&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/int&quot;&gt;int&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/log&quot;&gt;log&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/oct&quot;&gt;oct&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/rand&quot;&gt;rand&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/sin&quot;&gt;sin&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/sqrt&quot;&gt;sqrt&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/srand&quot;&gt;srand&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/abs&quot;&gt;abs&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/atan2&quot;&gt;atan2&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/cos&quot;&gt;cos&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/exp&quot;&gt;exp&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/hex&quot;&gt;hex&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/int&quot;&gt;int&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/log&quot;&gt;log&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/oct&quot;&gt;oct&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/rand&quot;&gt;rand&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/sin&quot;&gt;sin&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/sqrt&quot;&gt;sqrt&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/srand&quot;&gt;srand&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d70096a2fa7e934b6d2fbdd9d57c878aed759204" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/accept&quot;&gt;accept&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/bind&quot;&gt;bind&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/connect&quot;&gt;connect&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/getpeername&quot;&gt;getpeername&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/getsockname&quot;&gt;getsockname&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/getsockopt&quot;&gt;getsockopt&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/listen&quot;&gt;listen&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/recv&quot;&gt;recv&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/send&quot;&gt;send&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/setsockopt&quot;&gt;setsockopt&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/shutdown&quot;&gt;shutdown&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/socket&quot;&gt;socket&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/socketpair&quot;&gt;socketpair&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/accept&quot;&gt;accept&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/bind&quot;&gt;bind&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/connect&quot;&gt;connect&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/getpeername&quot;&gt;getpeername&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/getsockname&quot;&gt;getsockname&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/getsockopt&quot;&gt;getsockopt&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/listen&quot;&gt;listen&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/recv&quot;&gt;recv&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/send&quot;&gt;send&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/setsockopt&quot;&gt;setsockopt&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/shutdown&quot;&gt;shutdown&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/socket&quot;&gt;socket&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/socketpair&quot;&gt;socketpair&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b3307f74b5353d3d330388694e2e5a562ec4f6be" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/alarm&quot;&gt;alarm&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/exec&quot;&gt;exec&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/fork&quot;&gt;fork&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/getpgrp&quot;&gt;getpgrp&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/getppid&quot;&gt;getppid&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/getpriority&quot;&gt;getpriority&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/kill&quot;&gt;kill&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/pipe&quot;&gt;pipe&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/qx&quot;&gt;qx//&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/readpipe&quot;&gt;readpipe&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/setpgrp&quot;&gt;setpgrp&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/setpriority&quot;&gt;setpriority&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/sleep&quot;&gt;sleep&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/times&quot;&gt;times&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/wait&quot;&gt;wait&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/waitpid&quot;&gt;waitpid&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/alarm&quot;&gt;alarm&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/exec&quot;&gt;exec&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/fork&quot;&gt;fork&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/getpgrp&quot;&gt;getpgrp&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/getppid&quot;&gt;getppid&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/getpriority&quot;&gt;getpriority&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/kill&quot;&gt;kill&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/pipe&quot;&gt;pipe&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/qx&quot;&gt;qx//&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/readpipe&quot;&gt;readpipe&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/setpgrp&quot;&gt;setpgrp&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/setpriority&quot;&gt;setpriority&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/sleep&quot;&gt;sleep&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/times&quot;&gt;times&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/wait&quot;&gt;wait&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/waitpid&quot;&gt;waitpid&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="49adcd66c77b529c763f36ddd062aa4f6688b826" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/binmode&quot;&gt;binmode&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/closedir&quot;&gt;closedir&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/dbmclose&quot;&gt;dbmclose&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/dbmopen&quot;&gt;dbmopen&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/eof&quot;&gt;eof&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/fileno&quot;&gt;fileno&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/flock&quot;&gt;flock&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/format&quot;&gt;format&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/getc&quot;&gt;getc&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/printf&quot;&gt;printf&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/read&quot;&gt;read&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/readdir&quot;&gt;readdir&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/readline&quot;&gt;readline&lt;/a&gt;&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;functions/rewinddir&quot;&gt;rewinddir&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/say&quot;&gt;say&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/seek&quot;&gt;seek&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/seekdir&quot;&gt;seekdir&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/select&quot;&gt;select&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/syscall&quot;&gt;syscall&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/sysread&quot;&gt;sysread&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/sysseek&quot;&gt;sysseek&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/syswrite&quot;&gt;syswrite&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/tell&quot;&gt;tell&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/telldir&quot;&gt;telldir&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/truncate&quot;&gt;truncate&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/warn&quot;&gt;warn&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/write&quot;&gt;write&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/binmode&quot;&gt;binmode&lt;/a&gt;&lt;/code&gt; を、 &lt;code&gt;&lt;a href=&quot;functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/closedir&quot;&gt;closedir&lt;/a&gt;&lt;/code&gt; の、 &lt;code&gt;&lt;a href=&quot;functions/dbmclose&quot;&gt;dbmclose&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/dbmopen&quot;&gt;dbmopen&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/eof&quot;&gt;eof&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/fileno&quot;&gt;fileno&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/flock&quot;&gt;flock&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/format&quot;&gt;format&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/getc&quot;&gt;getc&lt;/a&gt;&lt;/code&gt; 関数、 &lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/printf&quot;&gt;printf&lt;/a&gt;&lt;/code&gt; の、 &lt;code&gt;&lt;a href=&quot;functions/read&quot;&gt;read&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/readdir&quot;&gt;readdir&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/readline&quot;&gt;readline&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;&lt;a href=&quot;functions/rewinddir&quot;&gt;rewinddir&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/say&quot;&gt;say&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/seek&quot;&gt;seek&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/seekdir&quot;&gt;seekdir&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/select&quot;&gt;select&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/syscall&quot;&gt;syscall&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/sysread&quot;&gt;sysread&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/sysseek&quot;&gt;sysseek&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/syswrite&quot;&gt;syswrite&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/tell&quot;&gt;tell&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/telldir&quot;&gt;telldir&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/truncate&quot;&gt;truncate&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/warn&quot;&gt;warn&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/write&quot;&gt;write&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="87eeeb61a45746c1e4aa6912afa3ede8279ba591" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/bless&quot;&gt;bless&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/dbmclose&quot;&gt;dbmclose&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/dbmopen&quot;&gt;dbmopen&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/package&quot;&gt;package&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/ref&quot;&gt;ref&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/tie&quot;&gt;tie&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/tied&quot;&gt;tied&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/untie&quot;&gt;untie&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/bless&quot;&gt;bless&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/dbmclose&quot;&gt;dbmclose&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/dbmopen&quot;&gt;dbmopen&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/package&quot;&gt;package&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/ref&quot;&gt;ref&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/tie&quot;&gt;tie&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/tied&quot;&gt;tied&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/untie&quot;&gt;untie&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="186c8b49686cf00b57846ac6e0a6189c67859e46" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/bless&quot;&gt;bless&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;blessed&lt;/code&gt; , and &lt;code&gt;&lt;a href=&quot;functions/ref&quot;&gt;ref&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/bless&quot;&gt;bless&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;blessed&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/ref&quot;&gt;ref&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e42ab85ddf7e214b95aa21f7531a192c1d57730b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/caller&quot;&gt;caller&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/local&quot;&gt;local&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/our&quot;&gt;our&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/package&quot;&gt;package&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/state&quot;&gt;state&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/caller&quot;&gt;caller&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/local&quot;&gt;local&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/our&quot;&gt;our&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/package&quot;&gt;package&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/state&quot;&gt;state&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cf8f43e0b8956b059b663b7f40fee566ba68ac70" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/chdir&quot;&gt;chdir&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/chmod&quot;&gt;chmod&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/chown&quot;&gt;chown&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/chroot&quot;&gt;chroot&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/exec&quot;&gt;exec&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/link&quot;&gt;link&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/lstat&quot;&gt;lstat&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/mkdir&quot;&gt;mkdir&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/rename&quot;&gt;rename&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/rmdir&quot;&gt;rmdir&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/stat&quot;&gt;stat&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/symlink&quot;&gt;symlink&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/truncate&quot;&gt;truncate&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/unlink&quot;&gt;unlink&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/utime&quot;&gt;utime&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/-x&quot;&gt;-X&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/chdir&quot;&gt;chdir&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/chmod&quot;&gt;chmod&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/chown&quot;&gt;chown&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/chroot&quot;&gt;chroot&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/exec&quot;&gt;exec&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/link&quot;&gt;link&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/lstat&quot;&gt;lstat&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/mkdir&quot;&gt;mkdir&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/rename&quot;&gt;rename&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/rmdir&quot;&gt;rmdir&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/stat&quot;&gt;stat&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/symlink&quot;&gt;symlink&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/truncate&quot;&gt;truncate&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/unlink&quot;&gt;unlink&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/utime&quot;&gt;utime&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/-x&quot;&gt;-X&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6373bbda016aaa1ddc91fd37de2c7931943ff130" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/chdir&quot;&gt;chdir&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/chomp&quot;&gt;chomp&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/chop&quot;&gt;chop&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/defined&quot;&gt;defined&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/delete&quot;&gt;delete&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/each&quot;&gt;each&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/eof&quot;&gt;eof&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/exec&quot;&gt;exec&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/exists&quot;&gt;exists&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/keys&quot;&gt;keys&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/lstat&quot;&gt;lstat&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/pop&quot;&gt;pop&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/push&quot;&gt;push&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/shift&quot;&gt;shift&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/splice&quot;&gt;splice&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/split&quot;&gt;split&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/stat&quot;&gt;stat&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/truncate&quot;&gt;truncate&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/unlink&quot;&gt;unlink&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/unshift&quot;&gt;unshift&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/values&quot;&gt;values&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/chdir&quot;&gt;chdir&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/chomp&quot;&gt;chomp&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/chop&quot;&gt;chop&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/defined&quot;&gt;defined&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/delete&quot;&gt;delete&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/each&quot;&gt;each&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/eof&quot;&gt;eof&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/exec&quot;&gt;exec&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/exists&quot;&gt;exists&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/keys&quot;&gt;keys&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/lstat&quot;&gt;lstat&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/pop&quot;&gt;pop&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/push&quot;&gt;push&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/shift&quot;&gt;shift&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/splice&quot;&gt;splice&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/split&quot;&gt;split&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/stat&quot;&gt;stat&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/truncate&quot;&gt;truncate&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/unlink&quot;&gt;unlink&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/unshift&quot;&gt;unshift&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/values&quot;&gt;values&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d63027fffa2a332cfddfd08f9068272d0ce52382" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/chomp&quot;&gt;chomp&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/chop&quot;&gt;chop&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/chr&quot;&gt;chr&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/crypt&quot;&gt;crypt&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/fc&quot;&gt;fc&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/hex&quot;&gt;hex&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/index&quot;&gt;index&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/lc&quot;&gt;lc&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/lcfirst&quot;&gt;lcfirst&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/length&quot;&gt;length&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/oct&quot;&gt;oct&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/ord&quot;&gt;ord&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/q&quot;&gt;q//&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/qq&quot;&gt;qq//&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/reverse&quot;&gt;reverse&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/rindex&quot;&gt;rindex&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/sprintf&quot;&gt;sprintf&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/substr&quot;&gt;substr&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/tr&quot;&gt;tr///&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/uc&quot;&gt;uc&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/ucfirst&quot;&gt;ucfirst&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/y&quot;&gt;y///&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/chomp&quot;&gt;chomp&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/chop&quot;&gt;chop&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/chr&quot;&gt;chr&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/crypt&quot;&gt;crypt&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/fc&quot;&gt;fc&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/hex&quot;&gt;hex&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/index&quot;&gt;index&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/lc&quot;&gt;lc&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/lcfirst&quot;&gt;lcfirst&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/length&quot;&gt;length&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/oct&quot;&gt;oct&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/ord&quot;&gt;ord&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/q&quot;&gt;q//&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/qq&quot;&gt;qq//&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/reverse&quot;&gt;reverse&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/rindex&quot;&gt;rindex&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/sprintf&quot;&gt;sprintf&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/substr&quot;&gt;substr&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/tr&quot;&gt;tr///&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/uc&quot;&gt;uc&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/ucfirst&quot;&gt;ucfirst&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/y&quot;&gt;y///&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2034a8bc4d2ddd556732a850eb5d8558c3aad776" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/chr&quot;&gt;chr()&lt;/a&gt;&lt;/code&gt; must be given an EBCDIC code number argument to yield a desired character return value on an EBCDIC platform. For example:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/chr&quot;&gt;chr()&lt;/a&gt;&lt;/code&gt; EBCDICプラットフォームで目的の文字戻り値を生成するには、 chr（）に EBCDICコード番号引数を指定する必要があります。例えば：</target>
        </trans-unit>
        <trans-unit id="f9c20fb8e247561b866ffc6fcee4160c028a6d32" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/defined&quot;&gt;defined&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/formline&quot;&gt;formline&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/lock&quot;&gt;lock&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/prototype&quot;&gt;prototype&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/reset&quot;&gt;reset&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/scalar&quot;&gt;scalar&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/defined&quot;&gt;defined&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/formline&quot;&gt;formline&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/lock&quot;&gt;lock&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/prototype&quot;&gt;prototype&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/reset&quot;&gt;reset&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/scalar&quot;&gt;scalar&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; を</target>
        </trans-unit>
        <trans-unit id="9f8069965d653903f6587480e5a0a31354565107" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/delete&quot;&gt;delete&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/each&quot;&gt;each&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/exists&quot;&gt;exists&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/keys&quot;&gt;keys&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/values&quot;&gt;values&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/delete&quot;&gt;delete&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/each&quot;&gt;each&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/exists&quot;&gt;exists&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/keys&quot;&gt;keys&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/values&quot;&gt;values&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="971c23718c054d86a80726532c2350b4d61c91a7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; raises an exception. Inside an &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; the error message is stuffed into &lt;code&gt;$@&lt;/code&gt; and the &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; is terminated with the undefined value. If the exception is outside of all enclosing &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt;s, then the uncaught exception prints LIST to &lt;code&gt;STDERR&lt;/code&gt; and exits with a non-zero value. If you need to exit the process with a specific exit code, see &lt;a href=&quot;#exit&quot;&gt;exit&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; は例外を発生させます。 &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; 内では、エラーメッセージは &lt;code&gt;$@&lt;/code&gt; 詰め込まれ、 &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; は未定義の値で終了します。例外がすべての外側の &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; の外側にある場合、キャッチされなかった例外はLISTを &lt;code&gt;STDERR&lt;/code&gt; に出力し、ゼロ以外の値で終了します。あなたが特定の終了コードでプロセスを終了する必要がある場合は、参照の&lt;a href=&quot;#exit&quot;&gt;終了を&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="cdfcd08c97279f178046afe1b06078d3bfda0672" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; will force the native VMS exit status to be an SS$_ABORT code if neither of the $! or $? status values are ones that would cause the native status to be interpreted as being what VMS classifies as SEVERE_ERROR severity for DCL error handling.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; $のどちらの場合SS $ _abortコードするネイティブのVMS終了ステータスを強制されます！または$？ステータス値は、VMSがDCLエラー処理の重大度SEVERE_ERRORとして分類するものとしてネイティブステータスを解釈させる値です。</target>
        </trans-unit>
        <trans-unit id="c2e997695a43950b1946c87d7c74c4aff97e924f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/do&quot;&gt;do&lt;/a&gt; BLOCK&lt;/code&gt; does</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/do&quot;&gt;do&lt;/a&gt; BLOCK&lt;/code&gt; ありません</target>
        </trans-unit>
        <trans-unit id="a1fa01aff43e15c0a20de4c6319df39310438748" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/do&quot;&gt;do&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/package&quot;&gt;package&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/do&quot;&gt;do&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; 、し &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/package&quot;&gt;package&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cf602825444127f538f868168b880e7c17e4f910" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/each&quot;&gt;each&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/keys&quot;&gt;keys&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/pop&quot;&gt;pop&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/push&quot;&gt;push&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/shift&quot;&gt;shift&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/splice&quot;&gt;splice&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/unshift&quot;&gt;unshift&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/values&quot;&gt;values&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/each&quot;&gt;each&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/keys&quot;&gt;keys&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/pop&quot;&gt;pop&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/push&quot;&gt;push&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/shift&quot;&gt;shift&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/splice&quot;&gt;splice&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/unshift&quot;&gt;unshift&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/values&quot;&gt;values&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0dde3e0b8af5305503cc41b40f558203bf6499aa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/endgrent&quot;&gt;endgrent&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/endhostent&quot;&gt;endhostent&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/endnetent&quot;&gt;endnetent&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/endpwent&quot;&gt;endpwent&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/getgrent&quot;&gt;getgrent&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/getgrgid&quot;&gt;getgrgid&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/getgrnam&quot;&gt;getgrnam&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/getlogin&quot;&gt;getlogin&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/getpwent&quot;&gt;getpwent&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/getpwnam&quot;&gt;getpwnam&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/getpwuid&quot;&gt;getpwuid&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/setgrent&quot;&gt;setgrent&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/setpwent&quot;&gt;setpwent&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/endgrent&quot;&gt;endgrent&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/endhostent&quot;&gt;endhostent&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/endnetent&quot;&gt;endnetent&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/endpwent&quot;&gt;endpwent&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/getgrent&quot;&gt;getgrent&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/getgrgid&quot;&gt;getgrgid&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/getgrnam&quot;&gt;getgrnam&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/getlogin&quot;&gt;getlogin&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/getpwent&quot;&gt;getpwent&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/getpwnam&quot;&gt;getpwnam&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/getpwuid&quot;&gt;getpwuid&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/setgrent&quot;&gt;setgrent&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/setpwent&quot;&gt;setpwent&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c701cf0d605693b06a942d567adc64697f8eadbb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/endprotoent&quot;&gt;endprotoent&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/endservent&quot;&gt;endservent&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/gethostbyaddr&quot;&gt;gethostbyaddr&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/gethostbyname&quot;&gt;gethostbyname&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/gethostent&quot;&gt;gethostent&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/getnetbyaddr&quot;&gt;getnetbyaddr&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/getnetbyname&quot;&gt;getnetbyname&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/getnetent&quot;&gt;getnetent&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/getprotobyname&quot;&gt;getprotobyname&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/getprotobynumber&quot;&gt;getprotobynumber&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/getprotoent&quot;&gt;getprotoent&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/getservbyname&quot;&gt;getservbyname&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/getservbyport&quot;&gt;getservbyport&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/getservent&quot;&gt;getservent&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/sethostent&quot;&gt;sethostent&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/setnetent&quot;&gt;setnetent&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/setprotoent&quot;&gt;setprotoent&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/setservent&quot;&gt;setservent&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/endprotoent&quot;&gt;endprotoent&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/endservent&quot;&gt;endservent&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/gethostbyaddr&quot;&gt;gethostbyaddr&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/gethostbyname&quot;&gt;gethostbyname&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/gethostent&quot;&gt;gethostent&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/getnetbyaddr&quot;&gt;getnetbyaddr&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/getnetbyname&quot;&gt;getnetbyname&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/getnetent&quot;&gt;getnetent&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/getprotobyname&quot;&gt;getprotobyname&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/getprotobynumber&quot;&gt;getprotobynumber&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/getprotoent&quot;&gt;getprotoent&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/getservbyname&quot;&gt;getservbyname&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/getservbyport&quot;&gt;getservbyport&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/getservent&quot;&gt;getservent&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/sethostent&quot;&gt;sethostent&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/setnetent&quot;&gt;setnetent&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/setprotoent&quot;&gt;setprotoent&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/setservent&quot;&gt;setservent&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="444bad2147131524490c06fd7ed189d21e9cf1be" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt; BLOCK&lt;/code&gt; does</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt; BLOCK&lt;/code&gt; は</target>
        </trans-unit>
        <trans-unit id="9ec05314a43a26efee7891cae4ea24501c56383e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; behaves differently depending on the internal encoding of the string, sometimes treating its argument as a string of bytes, and sometimes as a string of characters.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; は、文字列の内部エンコーディングに応じて異なる動作をします。その引数をバイトの文字列として扱う場合もあれば、文字の文字列として扱う場合もあります。</target>
        </trans-unit>
        <trans-unit id="cab5c8442d933f2e75cd6762dd7bfcc3ab2593ea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt;ed strings (when accessible) are considered to be filenames: &lt;code&gt;f (&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt; 7)&lt;/code&gt; and &lt;code&gt;f &lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt; 7\b&lt;/code&gt; access the body of the 7th &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt;ed string (in the order of execution). The bodies of the currently executed &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; and of &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt;ed strings that define subroutines are saved and thus accessible.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; ed文字列（アクセス可能な場合）はファイル名と見なされます： &lt;code&gt;f (&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt; 7)&lt;/code&gt; および &lt;code&gt;f &lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt; 7\b&lt;/code&gt; は、7番目の &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; ed文字列の本文に（実行順に）アクセスします。現在実行の体 &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; との &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; のサブルーチンを定義編文字列が保存されるので、アクセス可能です。</target>
        </trans-unit>
        <trans-unit id="4938bb543bbc2773e23fdb85fc0bad70327b6cc9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt;ed strings are compiled in the package in which the eval() was compiled. (Assignments to &lt;code&gt;$SIG{}&lt;/code&gt; , however, assume the signal handler specified is in the &lt;code&gt;main&lt;/code&gt; package. Qualify the signal handler name if you wish to have a signal handler in a package.) For an example, examine</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; ed文字列は、eval（）がコンパイルされたパッケージでコンパイルされます。（ただし、 &lt;code&gt;$SIG{}&lt;/code&gt; への割り当てでは、指定されたシグナルハンドラーが &lt;code&gt;main&lt;/code&gt; パッケージにあると想定しています。シグナルハンドラーをパッケージに含める場合は、シグナルハンドラー名を修飾します。）例については、</target>
        </trans-unit>
        <trans-unit id="bed6a22bb9761da407775198d594671570c1eb06" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/evalbytes&quot;&gt;evalbytes&lt;/a&gt;&lt;/code&gt; fixes that to work the way one would expect:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/evalbytes&quot;&gt;evalbytes&lt;/a&gt;&lt;/code&gt; は、期待どおりに機能するように修正しました。</target>
        </trans-unit>
        <trans-unit id="689ed7a5f25b13235d58a1bf5add86b3304f247a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/evalbytes&quot;&gt;evalbytes&lt;/a&gt;&lt;/code&gt; is only available with the &lt;code&gt;&quot;evalbytes&quot;&lt;/code&gt; feature (see &lt;a href=&quot;feature&quot;&gt;feature&lt;/a&gt;) or if prefixed with &lt;code&gt;CORE::&lt;/code&gt; . &lt;code&gt;&lt;a href=&quot;functions/__sub__&quot;&gt;__SUB__&lt;/a&gt;&lt;/code&gt; is only available with the &lt;code&gt;&quot;current_sub&quot;&lt;/code&gt; feature or if prefixed with &lt;code&gt;CORE::&lt;/code&gt; . Both the &lt;code&gt;&quot;evalbytes&quot;&lt;/code&gt; and &lt;code&gt;&quot;current_sub&quot;&lt;/code&gt; features are enabled automatically with a &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; v5.16&lt;/code&gt; (or higher) declaration in the current scope.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/evalbytes&quot;&gt;evalbytes&lt;/a&gt;&lt;/code&gt; は、 &lt;code&gt;&quot;evalbytes&quot;&lt;/code&gt; 機能（&lt;a href=&quot;feature&quot;&gt;機能を&lt;/a&gt;参照）でのみ、または &lt;code&gt;CORE::&lt;/code&gt; 前に付いている場合にのみ使用できます。 &lt;code&gt;&lt;a href=&quot;functions/__sub__&quot;&gt;__SUB__&lt;/a&gt;&lt;/code&gt; は、 &lt;code&gt;&quot;current_sub&quot;&lt;/code&gt; 機能で、または &lt;code&gt;CORE::&lt;/code&gt; 前に付いている場合にのみ使用できます。 &lt;code&gt;&quot;evalbytes&quot;&lt;/code&gt; と &lt;code&gt;&quot;current_sub&quot;&lt;/code&gt; 両方の機能は、現在のスコープで &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; v5.16&lt;/code&gt; （またはそれ以上）宣言を使用して自動的に有効になります。</target>
        </trans-unit>
        <trans-unit id="6761c9a39c23e52f7069fc11948131c9ace80ad7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/exec&quot;&gt;exec&lt;/a&gt; LIST&lt;/code&gt; without the use of indirect object syntax (&lt;code&gt;&lt;a href=&quot;functions/exec&quot;&gt;exec&lt;/a&gt; PROGRAM LIST&lt;/code&gt; ) may fall back to trying the shell if the first &lt;code&gt;spawn()&lt;/code&gt; fails. (Win32)</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/exec&quot;&gt;exec&lt;/a&gt; LIST&lt;/code&gt; 間接オブジェクト構文を使用しない exec LIST（ &lt;code&gt;&lt;a href=&quot;functions/exec&quot;&gt;exec&lt;/a&gt; PROGRAM LIST&lt;/code&gt; ）は、最初の &lt;code&gt;spawn()&lt;/code&gt; が失敗した場合、シェルの試行にフォールバックする場合があります。（Win32）</target>
        </trans-unit>
        <trans-unit id="284665f5fe88016ead454e392440b324b913043c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/exit&quot;&gt;exit()&lt;/a&gt;&lt;/code&gt; resets file pointers, which is a problem when called from a child process (created by &lt;code&gt;&lt;a href=&quot;functions/fork&quot;&gt;fork()&lt;/a&gt;&lt;/code&gt;) in &lt;code&gt;BEGIN&lt;/code&gt; . A workaround is to use &lt;code&gt;POSIX::_exit&lt;/code&gt; . (Solaris)</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/exit&quot;&gt;exit()&lt;/a&gt;&lt;/code&gt; （で作成された子プロセスから呼び出された問題である、ファイルポインタをリセット &lt;code&gt;&lt;a href=&quot;functions/fork&quot;&gt;fork()&lt;/a&gt;&lt;/code&gt; ）で &lt;code&gt;BEGIN&lt;/code&gt; 。回避策は &lt;code&gt;POSIX::_exit&lt;/code&gt; を使用することです。（Solaris）</target>
        </trans-unit>
        <trans-unit id="76b61913c43c1185bbdb2e0e0dd8b3af5f081161" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/fc&quot;&gt;fc&lt;/a&gt;&lt;/code&gt; is available only if the &lt;code&gt;&quot;fc&quot;&lt;/code&gt; feature is enabled or if it is prefixed with &lt;code&gt;CORE::&lt;/code&gt; . The &lt;code&gt;&quot;fc&quot;&lt;/code&gt; feature is enabled automatically with a &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; v5.16&lt;/code&gt; (or higher) declaration in the current scope.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/fc&quot;&gt;fc&lt;/a&gt;&lt;/code&gt; は、 &lt;code&gt;&quot;fc&quot;&lt;/code&gt; 機能が有効になっている場合、または &lt;code&gt;CORE::&lt;/code&gt; が前に付いている場合にのみ使用できます。 &lt;code&gt;&quot;fc&quot;&lt;/code&gt; 機能を用いて自動的に有効になり &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; v5.16&lt;/code&gt; 現在のスコープ内の（またはそれ以上）の宣言。</target>
        </trans-unit>
        <trans-unit id="9f8bfcf789b65edee6c0ea5d97ffb5d56eb94268" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/fork&quot;&gt;fork()&lt;/a&gt;&lt;/code&gt; failures in io_* tests</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/fork&quot;&gt;fork()&lt;/a&gt;&lt;/code&gt; io_ *テストでの fork（）の失敗</target>
        </trans-unit>
        <trans-unit id="9d01f3a00631549ba30fc14956cad336db066915" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/gethostbyname&quot;&gt;gethostbyname('localhost')&lt;/a&gt;&lt;/code&gt; does not work everywhere: you may have to use &lt;code&gt;&lt;a href=&quot;functions/gethostbyname&quot;&gt;gethostbyname('127.0.0.1')&lt;/a&gt;&lt;/code&gt;. (Irix 5)</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/gethostbyname&quot;&gt;gethostbyname('localhost')&lt;/a&gt;&lt;/code&gt; はどこでも機能しない： &lt;code&gt;&lt;a href=&quot;functions/gethostbyname&quot;&gt;gethostbyname('127.0.0.1')&lt;/a&gt;&lt;/code&gt; を使用する必要があるかもしれません。（アイリックス5）</target>
        </trans-unit>
        <trans-unit id="e2ef5e14433d72564433190724fdd966ef50b051" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/glob&quot;&gt;glob&lt;/a&gt;&lt;/code&gt; (aka the &lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt; )</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/glob&quot;&gt;glob&lt;/a&gt;&lt;/code&gt; （別名 &lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="564d9f4c1be0a741d6c529a881ccab285f1e964e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/gmtime&quot;&gt;gmtime&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/localtime&quot;&gt;localtime&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/time&quot;&gt;time&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/times&quot;&gt;times&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/gmtime&quot;&gt;gmtime&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/localtime&quot;&gt;localtime&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/time&quot;&gt;time&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/times&quot;&gt;times&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f03b71bee32ce86bd94c982679218f4e1f02d81a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/grep&quot;&gt;grep&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/join&quot;&gt;join&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/map&quot;&gt;map&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/qw&quot;&gt;qw//&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/reverse&quot;&gt;reverse&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/sort&quot;&gt;sort&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/grep&quot;&gt;grep&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/join&quot;&gt;join&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/map&quot;&gt;map&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/qw&quot;&gt;qw//&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/reverse&quot;&gt;reverse&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/sort&quot;&gt;sort&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9b3086a8c4fc89913fc262d257bf79bcbe20f793" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/join&quot;&gt;join()&lt;/a&gt;&lt;/code&gt; does three things: it waits for a thread to exit, cleans up after it, and returns any data the thread may have produced. But what if you're not interested in the thread's return values, and you don't really care when the thread finishes? All you want is for the thread to get cleaned up after when it's done.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/join&quot;&gt;join()&lt;/a&gt;&lt;/code&gt; は3つのことを実行します。スレッドが終了するまで待機し、終了後にクリーンアップし、スレッドが生成したデータを返します。しかし、スレッドの戻り値に興味がなく、スレッドがいつ終了するか本当に気にしない場合はどうでしょうか。必要なのは、終了後にスレッドをクリーンアップすることだけです。</target>
        </trans-unit>
        <trans-unit id="2a03f921016bbb0b86e43c0578f72502ceddcfba" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/join&quot;&gt;join&lt;/a&gt;&lt;/code&gt; waits for a thread to end and returns any values the thread exited with. &lt;code&gt;&lt;a href=&quot;functions/join&quot;&gt;join&lt;/a&gt;&lt;/code&gt; will block until the thread has ended, though it won't block if the thread has already terminated.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/join&quot;&gt;join&lt;/a&gt;&lt;/code&gt; はスレッドが終了するのを待ち、スレッドが終了したときの値を返します。 &lt;code&gt;&lt;a href=&quot;functions/join&quot;&gt;join&lt;/a&gt;&lt;/code&gt; はスレッドが終了するまでブロックしますが、スレッドがすでに終了している場合はブロックしません。</target>
        </trans-unit>
        <trans-unit id="9e758149070ab91db0253a2bd5469b500fbd3e2e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/kill&quot;&gt;kill()&lt;/a&gt;&lt;/code&gt; doesn't have the semantics of &lt;code&gt;raise()&lt;/code&gt; , i.e. it doesn't send a signal to the identified process like it does on Unix platforms. Instead &lt;code&gt;&lt;a href=&quot;functions/kill&quot;&gt;kill&lt;/a&gt;($sig, $pid)&lt;/code&gt; terminates the process identified by &lt;code&gt;$pid&lt;/code&gt; , and makes it exit immediately with exit status $sig. As in Unix, if $sig is 0 and the specified process exists, it returns true without actually terminating it. (Win32)</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/kill&quot;&gt;kill()&lt;/a&gt;&lt;/code&gt; には &lt;code&gt;raise()&lt;/code&gt; のセマンティクスがありません。つまり、Unixプラットフォームの場合のように、識別されたプロセスにシグナルを送信しません。代わりに、 &lt;code&gt;&lt;a href=&quot;functions/kill&quot;&gt;kill&lt;/a&gt;($sig, $pid)&lt;/code&gt; によって識別されるプロセス終了 &lt;code&gt;$pid&lt;/code&gt; 、そしてそれが終了ステータスの$ SIGとすぐに終了します。Unixと同様に、$ sigが0であり、指定されたプロセスが存在する場合、実際にプロセスを終了せずにtrueを返します。（Win32）</target>
        </trans-unit>
        <trans-unit id="e88c251677de5696731dc7c1c2ad099fd58e07b7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/kill&quot;&gt;kill&lt;/a&gt;('KILL', ...)&lt;/code&gt; can be used to terminate a pseudo-process by passing it the ID returned by fork(). The outcome of kill on a pseudo-process is unpredictable and it should not be used except under dire circumstances, because the operating system may not guarantee integrity of the process resources when a running thread is terminated. The process which implements the pseudo-processes can be blocked and the Perl interpreter hangs. Note that using &lt;code&gt;&lt;a href=&quot;functions/kill&quot;&gt;kill&lt;/a&gt;('KILL', ...)&lt;/code&gt; on a pseudo-process() may typically cause memory leaks, because the thread that implements the pseudo-process does not get a chance to clean up its resources.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/kill&quot;&gt;kill&lt;/a&gt;('KILL', ...)&lt;/code&gt; を使用すると、fork（）から返されたIDを渡して疑似プロセスを終了できます。疑似プロセスでのkillの結果は予測不可能であり、オペレーティングシステムは実行中のスレッドが終了したときにプロセスリソースの整合性を保証しない可能性があるため、悲惨な状況以外では使用しないでください。疑似プロセスを実装するプロセスをブロックすると、Perlインタープリターがハングします。pseudo-process（）で &lt;code&gt;&lt;a href=&quot;functions/kill&quot;&gt;kill&lt;/a&gt;('KILL', ...)&lt;/code&gt; を使用すると、疑似プロセスを実装するスレッドがそのリソースをクリーンアップする機会を得られないため、通常はメモリリークが発生する可能性があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="75df60b5e7c4116a6ef3b294e7033ff0dcfbf3d8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/kill&quot;&gt;kill&lt;/a&gt;('TERM', ...)&lt;/code&gt; can also be used on pseudo-processes, but the signal will not be delivered while the pseudo-process is blocked by a system call, e.g. waiting for a socket to connect, or trying to read from a socket with no data available. Starting in Perl 5.14 the parent process will not wait for children to exit once they have been signalled with &lt;code&gt;&lt;a href=&quot;functions/kill&quot;&gt;kill&lt;/a&gt;('TERM', ...)&lt;/code&gt; to avoid deadlock during process exit. You will have to explicitly call waitpid() to make sure the child has time to clean-up itself, but you are then also responsible that the child is not blocking on I/O either.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/kill&quot;&gt;kill&lt;/a&gt;('TERM', ...)&lt;/code&gt; は疑似プロセスでも使用できますが、疑似プロセスがシステムコールによってブロックされている間は信号は配信されません。利用可能なデータのないソケットから。 Perl 5.14以降、プロセスの終了時のデッドロックを回避するために &lt;code&gt;&lt;a href=&quot;functions/kill&quot;&gt;kill&lt;/a&gt;('TERM', ...)&lt;/code&gt; &lt;a href=&quot;functions/kill&quot;&gt;kill&lt;/a&gt;（「TERM」、...）で通知された後、親プロセスは子が終了するのを待ちません。子がそれ自体をクリーンアップする時間があることを確認するために、明示的にwaitpid（）を呼び出す必要がありますが、その場合、子もI / Oでブロックしていないことにも責任があります。</target>
        </trans-unit>
        <trans-unit id="1b5183176d6cbdda12e7a690d422cfcbde120be5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/kill&quot;&gt;kill&lt;/a&gt;(-9, $pid)&lt;/code&gt; will terminate the process specified by &lt;code&gt;$pid&lt;/code&gt; and recursively all child processes owned by it. This is different from the Unix semantics, where the signal will be delivered to all processes in the same process group as the process specified by $pid. (Win32)</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/kill&quot;&gt;kill&lt;/a&gt;(-9, $pid)&lt;/code&gt; は、$ pidで指定され &lt;code&gt;$pid&lt;/code&gt; と、そのプロセスが所有するすべての子プロセスを再帰的に終了します。これは、シグナルが$ pidで指定されたプロセスと同じプロセスグループ内のすべてのプロセスに配信されるUnixセマンティクスとは異なります。（Win32）</target>
        </trans-unit>
        <trans-unit id="87d6ace4d35779bb92de39a74ae12ac82c622c36" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/last&quot;&gt;last&lt;/a&gt;&lt;/code&gt; cannot be used to exit a block that returns a value such as &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt; {}&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/sub&quot;&gt;sub&lt;/a&gt; {}&lt;/code&gt; , or &lt;code&gt;&lt;a href=&quot;functions/do&quot;&gt;do&lt;/a&gt; {}&lt;/code&gt; , and should not be used to exit a grep() or map() operation.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/last&quot;&gt;last&lt;/a&gt;&lt;/code&gt; を使用して、 &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt; {}&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/sub&quot;&gt;sub&lt;/a&gt; {}&lt;/code&gt; 、または &lt;code&gt;&lt;a href=&quot;functions/do&quot;&gt;do&lt;/a&gt; {}&lt;/code&gt; などの値を返すブロックを終了することはできません。また、grep（）またはmap（）オペレーションを終了するために使用しないでください。</target>
        </trans-unit>
        <trans-unit id="070d6d718d052c422333dfc4a73c9ff557369c01" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/last&quot;&gt;last&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/next&quot;&gt;next&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;functions/redo&quot;&gt;redo&lt;/a&gt;&lt;/code&gt; may appear within a &lt;code&gt;&lt;a href=&quot;functions/continue&quot;&gt;continue&lt;/a&gt;&lt;/code&gt; block; &lt;code&gt;&lt;a href=&quot;functions/last&quot;&gt;last&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/redo&quot;&gt;redo&lt;/a&gt;&lt;/code&gt; behave as if they had been executed within the main block. So will &lt;code&gt;&lt;a href=&quot;functions/next&quot;&gt;next&lt;/a&gt;&lt;/code&gt;, but since it will execute a &lt;code&gt;&lt;a href=&quot;functions/continue&quot;&gt;continue&lt;/a&gt;&lt;/code&gt; block, it may be more entertaining.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/last&quot;&gt;last&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/next&quot;&gt;next&lt;/a&gt;&lt;/code&gt; 、または &lt;code&gt;&lt;a href=&quot;functions/redo&quot;&gt;redo&lt;/a&gt;&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;functions/continue&quot;&gt;continue&lt;/a&gt;&lt;/code&gt; ブロック内に表示される場合があります。 &lt;code&gt;&lt;a href=&quot;functions/last&quot;&gt;last&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;functions/redo&quot;&gt;redo&lt;/a&gt;&lt;/code&gt; は、メインブロック内で実行されたかのように動作します。だから、意志 &lt;code&gt;&lt;a href=&quot;functions/next&quot;&gt;next&lt;/a&gt;&lt;/code&gt; 、それが実行されますので、 &lt;code&gt;&lt;a href=&quot;functions/continue&quot;&gt;continue&lt;/a&gt;&lt;/code&gt; ブロックを、それがもっと面白いことがあります。</target>
        </trans-unit>
        <trans-unit id="f7dc8f5385a1d957a4ec078883a408036e64e47d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/local&quot;&gt;local($x)&lt;/a&gt;&lt;/code&gt; saves away the old value of the global variable &lt;code&gt;$x&lt;/code&gt; and assigns a new value for the duration of the subroutine</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/local&quot;&gt;local($x)&lt;/a&gt;&lt;/code&gt; は、グローバル変数 &lt;code&gt;$x&lt;/code&gt; の古い値を保存し、サブルーチンの期間に新しい値を割り当てます</target>
        </trans-unit>
        <trans-unit id="ae121069d9f20b53a610cdeaf9dee9016adf3eb8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/lock&quot;&gt;lock()&lt;/a&gt;&lt;/code&gt; blocks the thread until the variable being locked is available. When &lt;code&gt;&lt;a href=&quot;functions/lock&quot;&gt;lock()&lt;/a&gt;&lt;/code&gt; returns, your thread can be sure that no other thread can lock that variable until the block containing the lock exits.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/lock&quot;&gt;lock()&lt;/a&gt;&lt;/code&gt; は、ロックされている変数が使用可能になるまでスレッドをブロックします。 &lt;code&gt;&lt;a href=&quot;functions/lock&quot;&gt;lock()&lt;/a&gt;&lt;/code&gt; を返す、あなたのスレッドは、他のスレッドがロック終了を含むブロックまで、その変数をロックすることはできないことを確認することができます。</target>
        </trans-unit>
        <trans-unit id="170941b48e14e3f5099948bab33b3c9d8dbcb576" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/lock&quot;&gt;lock&lt;/a&gt;&lt;/code&gt; places a lock on a variable until the lock goes out of scope.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/lock&quot;&gt;lock&lt;/a&gt;&lt;/code&gt; は、ロックがスコープ外になるまで変数をロックします。</target>
        </trans-unit>
        <trans-unit id="3509688406236324d230070a551af253bd14269a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m//&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/pos&quot;&gt;pos&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/qr&quot;&gt;qr//&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/quotemeta&quot;&gt;quotemeta&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s///&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/split&quot;&gt;split&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/study&quot;&gt;study&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m//&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/pos&quot;&gt;pos&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/qr&quot;&gt;qr//&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/quotemeta&quot;&gt;quotemeta&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s///&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/split&quot;&gt;split&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/study&quot;&gt;study&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a3e6cff15cdccdd24c02ad5ce98693ac4145238a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m/pattern/msixpogcdualn&lt;/a&gt;&lt;/code&gt; searches a string for a pattern match, applying the given options.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m/pattern/msixpogcdualn&lt;/a&gt;&lt;/code&gt; は、指定されたオプションを適用して、パターンマッチの文字列を検索します。</target>
        </trans-unit>
        <trans-unit id="1944b24caa2d31a689377ec13306300ad9daf001" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/msgctl&quot;&gt;msgctl&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/msgget&quot;&gt;msgget&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/msgrcv&quot;&gt;msgrcv&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/msgsnd&quot;&gt;msgsnd&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/semctl&quot;&gt;semctl&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/semget&quot;&gt;semget&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/semop&quot;&gt;semop&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/shmctl&quot;&gt;shmctl&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/shmget&quot;&gt;shmget&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/shmread&quot;&gt;shmread&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/shmwrite&quot;&gt;shmwrite&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/msgctl&quot;&gt;msgctl&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/msgget&quot;&gt;msgget&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/msgrcv&quot;&gt;msgrcv&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/msgsnd&quot;&gt;msgsnd&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/semctl&quot;&gt;semctl&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/semget&quot;&gt;semget&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/semop&quot;&gt;semop&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/shmctl&quot;&gt;shmctl&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/shmget&quot;&gt;shmget&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/shmread&quot;&gt;shmread&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/shmwrite&quot;&gt;shmwrite&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a23ddf8844c8d314770e265090c4032565505efe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my($x)&lt;/a&gt;&lt;/code&gt; creates a new variable that is only visible in the current subroutine. This is done at compile-time, so it is called lexical or static scoping. my() always affects private variables, also called lexical variables or (improperly) static(ly scoped) variables.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my($x)&lt;/a&gt;&lt;/code&gt; は、現在のサブルーチンでのみ表示される新しい変数を作成します。これはコンパイル時に行われるため、字句スコープまたは静的スコープと呼ばれます。 my（）は常にプライベート変数に影響し、レキシカル変数または（不適切に）静的（スコープが限定された）変数とも呼ばれます。</target>
        </trans-unit>
        <trans-unit id="07257377a06fc9758ae4feb8af6d3a0dabc51822" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/local&quot;&gt;local()&lt;/a&gt;&lt;/code&gt; give list context to the right hand side of &lt;code&gt;=&lt;/code&gt; . The &amp;lt;$fh&amp;gt; read operation, like so many of Perl's functions and operators, can tell which context it was called in and behaves appropriately. In general, the scalar() function can help. This function does nothing to the data itself (contrary to popular myth) but rather tells its argument to behave in whatever its scalar fashion is. If that function doesn't have a defined scalar behavior, this of course doesn't help you (such as with sort()).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my()&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;functions/local&quot;&gt;local()&lt;/a&gt;&lt;/code&gt; は、 &lt;code&gt;=&lt;/code&gt; の右側にリストコンテキストを提供します。&amp;lt;$ fh&amp;gt;読み取り操作は、Perlの多くの関数や演算子と同様に、呼び出されたコンテキストを認識して適切に動作します。一般に、scalar（）関数が役立ちます。この関数は、データ自体に対しては何もしません（一般的な神話とは異なります）が、そのスカラー形式が何であっても動作するように引数に指示します。その関数にスカラー動作が定義されていない場合、これはもちろん役立ちません（sort（）など）。</target>
        </trans-unit>
        <trans-unit id="13eda9e72a33666b731b864d91f6ba22b818ca17" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; variables are scoped to the current block, not to the current function. If you write &lt;code&gt;{&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt; $x;} $x;&lt;/code&gt; , the second &lt;code&gt;$x&lt;/code&gt; does not refer to the one declared inside the block.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; 変数のスコープは、現在の関数ではなく、現在のブロックです。 &lt;code&gt;{&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt; $x;} $x;&lt;/code&gt; と書けば 、2番目の &lt;code&gt;$x&lt;/code&gt; はブロック内で宣言されたものを参照していません。</target>
        </trans-unit>
        <trans-unit id="a1b3aead5cdbc6341c36d8eaad29039df26dd3a4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/next&quot;&gt;next&lt;/a&gt;&lt;/code&gt; cannot be used to exit a block which returns a value such as &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt; {}&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/sub&quot;&gt;sub&lt;/a&gt; {}&lt;/code&gt; , or &lt;code&gt;&lt;a href=&quot;functions/do&quot;&gt;do&lt;/a&gt; {}&lt;/code&gt; , and should not be used to exit a grep() or map() operation.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/next&quot;&gt;next&lt;/a&gt;&lt;/code&gt; を使用して、 &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt; {}&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/sub&quot;&gt;sub&lt;/a&gt; {}&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/do&quot;&gt;do&lt;/a&gt; {}&lt;/code&gt; などの値を返すブロックを終了することはできません。また、grep（）またはmap（）操作を終了するために使用しないでください。</target>
        </trans-unit>
        <trans-unit id="7816c0bc56e1301d1d13bec1cdf1c4a410856929" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; feature 'unicode_strings'&lt;/code&gt; tells the compiler to use the traditional Perl rules wherein the native character set rules is used unless it is clear to Perl that Unicode is desired. This can lead to some surprises when the behavior suddenly changes. (See &lt;a href=&quot;perlunicode#The-%22Unicode-Bug%22&quot;&gt;The Unicode Bug in perlunicode&lt;/a&gt; for details.) For this reason, if you are potentially using Unicode in your program, the &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; feature 'unicode_strings'&lt;/code&gt; subpragma is &lt;b&gt;strongly&lt;/b&gt; recommended.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; feature 'unicode_strings'&lt;/code&gt; は、Unicodeが望ましいことがPerlに明らかでない限り、ネイティブ文字セット規則が使用される従来のPerl規則を使用するようコンパイラーに指示しません。これは、動作が突然変化したときにいくつかの驚きにつながる可能性があります。（詳細について&lt;a href=&quot;perlunicode#The-%22Unicode-Bug%22&quot;&gt;は、perlunicodeのUnicodeバグ&lt;/a&gt;を参照してください。）このため、プログラムでUnicodeを使用する可能性がある場合は、 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; feature 'unicode_strings'&lt;/code&gt; サブプラグマを&lt;b&gt;強く&lt;/b&gt;お勧めします。</target>
        </trans-unit>
        <trans-unit id="ac81d61c42a23c6729598734f402a23c1c56eea8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; feature&lt;/code&gt; with no features specified will reset to the default group. To disable</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; feature&lt;/code&gt; 機能が指定されていない機能がない場合、デフォルトグループにリセットされます。無効にするには</target>
        </trans-unit>
        <trans-unit id="f43198e234dd55ddea949ef71cd04c5b9a67bbf2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; re '/flags'&lt;/code&gt; will turn off the effect of &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; re '/flags'&lt;/code&gt; for the given flags.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; re '/flags'&lt;/code&gt; の影響オフになります &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; re '/flags'&lt;/code&gt; 与えられたフラグのために。</target>
        </trans-unit>
        <trans-unit id="72bc29863e56cfa45bbea04dcee585c67952579a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt; FH, &quot;-|&quot;&lt;/code&gt; , in other words, opening pipes to itself.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt; FH, &quot;-|&quot;&lt;/code&gt; 言い換えれば、それ自体にパイプを開く。</target>
        </trans-unit>
        <trans-unit id="15d8b4a76f4f6129fa4264c69c3f0d9f88979d3d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/opendir&quot;&gt;opendir&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/sysopen&quot;&gt;sysopen&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/opendir&quot;&gt;opendir&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/sysopen&quot;&gt;sysopen&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9d47a7f890bd33e4ea969830dac3cb0ad060f6a7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/ord&quot;&gt;ord()&lt;/a&gt;&lt;/code&gt; will return EBCDIC code number values on an EBCDIC platform. For example:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/ord&quot;&gt;ord()&lt;/a&gt;&lt;/code&gt; は、EBCDICプラットフォームでEBCDICコード番号値を返します。例えば：</target>
        </trans-unit>
        <trans-unit id="7c53ed24bd7c69198eac1389d9414a4a91ac2d6a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/our&quot;&gt;our&lt;/a&gt;&lt;/code&gt; differs from &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; vars&lt;/code&gt; , which allows use of an unqualified name</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/our&quot;&gt;our&lt;/a&gt;&lt;/code&gt; からの異なっ &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; vars&lt;/code&gt; 非修飾名の使用を可能にし、</target>
        </trans-unit>
        <trans-unit id="b02441caa31363d63a0257ab42958956b8ab58eb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/our&quot;&gt;our&lt;/a&gt;&lt;/code&gt; has the same scoping rules as &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/state&quot;&gt;state&lt;/a&gt;&lt;/code&gt;, meaning that it is only valid within a lexical scope. Unlike &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/state&quot;&gt;state&lt;/a&gt;&lt;/code&gt;, which both declare new (lexical) variables, &lt;code&gt;&lt;a href=&quot;functions/our&quot;&gt;our&lt;/a&gt;&lt;/code&gt; only creates an alias to an existing variable: a package variable of the same name.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/our&quot;&gt;our&lt;/a&gt;&lt;/code&gt; スコープ規則は &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;functions/state&quot;&gt;state&lt;/a&gt;&lt;/code&gt; と同じです。つまり、レキシカルスコープ内でのみ有効です。違って &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;functions/state&quot;&gt;state&lt;/a&gt;&lt;/code&gt; 、両方の宣言新しい（字句）の変数、 &lt;code&gt;&lt;a href=&quot;functions/our&quot;&gt;our&lt;/a&gt;&lt;/code&gt; 同じ名前のパッケージ変数：のみ既存の変数のエイリアスを作成します。</target>
        </trans-unit>
        <trans-unit id="6774d0bb994ddfaf2ef8c1d60b6b78ab041154fa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/our&quot;&gt;our&lt;/a&gt;&lt;/code&gt; makes a lexical alias to a package (i.e. global) variable of the same name in the current package for use within the current lexical scope.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/our&quot;&gt;our&lt;/a&gt;&lt;/code&gt; パッケージへの字句別名現在のレキシカルスコープ内で使用するために現在のパッケージ内に同じ名前の（つまりグローバル）変数になります。</target>
        </trans-unit>
        <trans-unit id="94b4e2f1cfd6c489237ee0bdbdd2d311d7ce5f54" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/our&quot;&gt;our&lt;/a&gt;&lt;/code&gt; subroutines</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/our&quot;&gt;our&lt;/a&gt;&lt;/code&gt; サブルーチン</target>
        </trans-unit>
        <trans-unit id="de5857e8b84e30eef502f98ccf74513442f8930b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt; are two functions for transforming data according to a user-defined template, between the guarded way Perl stores values and some well-defined representation as might be required in the environment of a Perl program. Unfortunately, they're also two of the most misunderstood and most often overlooked functions that Perl provides. This tutorial will demystify them for you.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt; は、Perlが値を格納する保護された方法と、Perlプログラムの環境で必要になる可能性のある明確な表現との間で、ユーザー定義のテンプレートに従ってデータを変換するための2つの関数です。残念ながら、これらはPerlが提供する最も誤解され、見落とされがちな機能の2つでもあります。このチュートリアルでは、それらをわかりやすく説明します。</target>
        </trans-unit>
        <trans-unit id="94c05b5f8252da7d1c99d5e4040b8c3c6ee106ca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/read&quot;&gt;read&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/syscall&quot;&gt;syscall&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/sysread&quot;&gt;sysread&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/sysseek&quot;&gt;sysseek&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/syswrite&quot;&gt;syswrite&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/vec&quot;&gt;vec&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/read&quot;&gt;read&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/syscall&quot;&gt;syscall&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/sysread&quot;&gt;sysread&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/sysseek&quot;&gt;sysseek&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/syswrite&quot;&gt;syswrite&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/vec&quot;&gt;vec&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b2252b2bedd63bcabdecf7bfe44b0f5112b8e9d1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/pos&quot;&gt;pos&lt;/a&gt;&lt;/code&gt; directly accesses the location used by the regexp engine to store the offset, so assigning to &lt;code&gt;&lt;a href=&quot;functions/pos&quot;&gt;pos&lt;/a&gt;&lt;/code&gt; will change that offset, and so will also influence the &lt;code&gt;\G&lt;/code&gt; zero-width assertion in regular expressions. Both of these effects take place for the next match, so you can't affect the position with &lt;code&gt;&lt;a href=&quot;functions/pos&quot;&gt;pos&lt;/a&gt;&lt;/code&gt; during the current match, such as in &lt;code&gt;(?{pos() = 5})&lt;/code&gt; or &lt;code&gt;s//pos() = 5/e&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/pos&quot;&gt;pos&lt;/a&gt;&lt;/code&gt; は、正規表現エンジンがオフセットを格納するために使用する場所に直接アクセスするため、 &lt;code&gt;&lt;a href=&quot;functions/pos&quot;&gt;pos&lt;/a&gt;&lt;/code&gt; に割り当てると、そのオフセットが変更され、正規表現の &lt;code&gt;\G&lt;/code&gt; zero-widthアサーションにも影響します。これらの効果は両方とも次の試合で発生するため、 &lt;code&gt;(?{pos() = 5})&lt;/code&gt; や &lt;code&gt;s//pos() = 5/e&lt;/code&gt; ように、現在の試合中に &lt;code&gt;&lt;a href=&quot;functions/pos&quot;&gt;pos&lt;/a&gt;&lt;/code&gt; で位置に影響を与えることはできません。。</target>
        </trans-unit>
        <trans-unit id="d1950ccdf48f077e739f5814af32f11a43773eb1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/qr&quot;&gt;qr/pattern/msixpodualn&lt;/a&gt;&lt;/code&gt; lets you store a regex in a variable, or pass one around. Modifiers as for &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m//&lt;/a&gt;&lt;/code&gt;, and are stored within the regex.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/qr&quot;&gt;qr/pattern/msixpodualn&lt;/a&gt;&lt;/code&gt; を使用すると、正規表現を変数に格納したり、渡したりできます。 &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m//&lt;/a&gt;&lt;/code&gt; ような修飾子は、正規表現内に格納されます。</target>
        </trans-unit>
        <trans-unit id="2d062bdc19be018775cd04b7fe47df8c33090f46" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/qr&quot;&gt;qr&lt;/a&gt;&lt;/code&gt; must return a compiled regexp, or a ref to a compiled regexp (such as &lt;code&gt;&lt;a href=&quot;functions/qr&quot;&gt;qr//&lt;/a&gt;&lt;/code&gt; returns), and any further overloading on the return value will be ignored.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/qr&quot;&gt;qr&lt;/a&gt;&lt;/code&gt; はコンパイルされた正規表現、またはコンパイルされた正規表現への参照（ &lt;code&gt;&lt;a href=&quot;functions/qr&quot;&gt;qr//&lt;/a&gt;&lt;/code&gt; returnなど）を返す必要があり、戻り値に対するそれ以上のオーバーロードは無視されます。</target>
        </trans-unit>
        <trans-unit id="6bf9c5016beeb9680d1e1288d3394e4a396bd820" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/quotemeta&quot;&gt;quotemeta()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;\Q&lt;/code&gt; are fully described in &lt;a href=&quot;functions/quotemeta&quot;&gt;quotemeta&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/quotemeta&quot;&gt;quotemeta()&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;\Q&lt;/code&gt; は&lt;a href=&quot;functions/quotemeta&quot;&gt; quotemetaで&lt;/a&gt;完全に説明されています。</target>
        </trans-unit>
        <trans-unit id="188d3fd2d5601f204ee3fcff4baf277b1b9145a7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/qx&quot;&gt;qx&lt;/a&gt;&lt;/code&gt; (aka the backtick operator), &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/qx&quot;&gt;qx&lt;/a&gt;&lt;/code&gt; （別名バックティック演算子）、 &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9d74cdbd617ac6784cd0523ea76bbc823fe5c46d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/rand&quot;&gt;rand($x)&lt;/a&gt;&lt;/code&gt; returns a number such that &lt;code&gt;0 &amp;lt;= &lt;a href=&quot;functions/rand&quot;&gt;rand&lt;/a&gt;($x) &amp;lt; $x&lt;/code&gt; . Thus what you want to have perl figure out is a random number in the range from 0 to the difference between your</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/rand&quot;&gt;rand($x)&lt;/a&gt;&lt;/code&gt; は、 &lt;code&gt;0 &amp;lt;= &lt;a href=&quot;functions/rand&quot;&gt;rand&lt;/a&gt;($x) &amp;lt; $x&lt;/code&gt; ような数値を返します。したがって、perlで計算したいのは、0から次の値の差までの範囲の乱数です。</target>
        </trans-unit>
        <trans-unit id="8f4bf1581c291b9f8ecef59847322f94dde9b542" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/read&quot;&gt;read()&lt;/a&gt;&lt;/code&gt; reads characters and returns the number of characters. &lt;code&gt;&lt;a href=&quot;functions/seek&quot;&gt;seek()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/tell&quot;&gt;tell()&lt;/a&gt;&lt;/code&gt; operate on byte counts, as do &lt;code&gt;&lt;a href=&quot;functions/sysread&quot;&gt;sysread()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/sysseek&quot;&gt;sysseek()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/read&quot;&gt;read()&lt;/a&gt;&lt;/code&gt; は文字を読み取り、文字数を返します。 &lt;code&gt;&lt;a href=&quot;functions/seek&quot;&gt;seek()&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;functions/tell&quot;&gt;tell()&lt;/a&gt;&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;functions/sysread&quot;&gt;sysread()&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;functions/sysseek&quot;&gt;sysseek()&lt;/a&gt;&lt;/code&gt; と同様に、バイトカウントを操作します。</target>
        </trans-unit>
        <trans-unit id="6a5c571597ad186dd4a954192a5cebc8d822206f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/readdir&quot;&gt;readdir&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/readlink&quot;&gt;readlink&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/readdir&quot;&gt;readdir&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/readlink&quot;&gt;readlink&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7456d57d98baaffed623ce4bd4263a163b2aec05" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/redo&quot;&gt;redo&lt;/a&gt;&lt;/code&gt; cannot be used to retry a block that returns a value such as &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt; {}&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/sub&quot;&gt;sub&lt;/a&gt; {}&lt;/code&gt; , or &lt;code&gt;&lt;a href=&quot;functions/do&quot;&gt;do&lt;/a&gt; {}&lt;/code&gt; , and should not be used to exit a grep() or map() operation.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/redo&quot;&gt;redo&lt;/a&gt;&lt;/code&gt; を使用して、 &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt; {}&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/sub&quot;&gt;sub&lt;/a&gt; {}&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/do&quot;&gt;do&lt;/a&gt; {}&lt;/code&gt; などの値を返すブロックを再試行することはできません。また、grep（）またはmap（）操作を終了するために使用しないでください。</target>
        </trans-unit>
        <trans-unit id="eb6696e29c58ecf1f6ae5ba2682cd87e761d86df" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; has special additional dark magic: if you invoke your &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; replacement as &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt; Foo::Bar&lt;/code&gt; , it will actually receive the argument &lt;code&gt;&quot;Foo/Bar.pm&quot;&lt;/code&gt; in @_. See &lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; には特別なダークマジックがあります &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; 置換を &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt; Foo::Bar&lt;/code&gt; として呼び出すと、実際には@_で引数 &lt;code&gt;&quot;Foo/Bar.pm&quot;&lt;/code&gt; を受け取ります。&lt;a href=&quot;functions/require&quot;&gt;requireを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="c933e5af38fe33f1b42e9ea2b143d4921f5f23a5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s/pattern/replacement/msixpogcedual&lt;/a&gt;&lt;/code&gt; substitutes matches of 'pattern' with 'replacement'. Modifiers as for &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m//&lt;/a&gt;&lt;/code&gt;, with two additions:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s/pattern/replacement/msixpogcedual&lt;/a&gt;&lt;/code&gt; は、「pattern」の一致を「replacement」に置き換えます。 &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m//&lt;/a&gt;&lt;/code&gt; と同様の修飾子、2つの追加：</target>
        </trans-unit>
        <trans-unit id="7e44cb588e50026d5be597d045d8bc89c8231d12" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/say&quot;&gt;say()&lt;/a&gt;&lt;/code&gt; acts just like &lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print()&lt;/a&gt;&lt;/code&gt; except $\ will be localized to &lt;code&gt;\n&lt;/code&gt; so you need do nothing special to handle &lt;code&gt;&lt;a href=&quot;functions/say&quot;&gt;say()&lt;/a&gt;&lt;/code&gt; in &lt;code&gt;PRINT()&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/say&quot;&gt;say()&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print()&lt;/a&gt;&lt;/code&gt; \と同じように動作しますが、 $ \は &lt;code&gt;\n&lt;/code&gt; ローカライズされるため、 &lt;code&gt;PRINT()&lt;/code&gt; で &lt;code&gt;&lt;a href=&quot;functions/say&quot;&gt;say()&lt;/a&gt;&lt;/code&gt; を処理するために特別なことを行う必要はありません。</target>
        </trans-unit>
        <trans-unit id="d4a80adc896ab22ad4c977a28b9890609696de0b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/say&quot;&gt;say&lt;/a&gt;&lt;/code&gt; is available only if the &lt;code&gt;&quot;say&quot;&lt;/code&gt; feature is enabled or if it is prefixed with &lt;code&gt;CORE::&lt;/code&gt; . The &lt;code&gt;&quot;say&quot;&lt;/code&gt; feature is enabled automatically with a &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; v5.10&lt;/code&gt; (or higher) declaration in the current scope.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/say&quot;&gt;say&lt;/a&gt;&lt;/code&gt; は、 &lt;code&gt;&quot;say&quot;&lt;/code&gt; 機能が有効になっている場合、または &lt;code&gt;CORE::&lt;/code&gt; が前に付いている場合にのみ使用できます。 &lt;code&gt;&quot;say&quot;&lt;/code&gt; 機能を使用して自動的に有効化され &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; v5.10&lt;/code&gt; （またはそれ以上）現在のスコープで宣言。</target>
        </trans-unit>
        <trans-unit id="6ed0487d19fc343d28196f6e778281c685c1bcbb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/scalar&quot;&gt;scalar&lt;/a&gt; &lt;a href=&quot;functions/reverse&quot;&gt;reverse&lt;/a&gt;()&lt;/code&gt; reverses by character rather than by byte.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/scalar&quot;&gt;scalar&lt;/a&gt; &lt;a href=&quot;functions/reverse&quot;&gt;reverse&lt;/a&gt;()&lt;/code&gt; は、バイトではなく文字で反転します。</target>
        </trans-unit>
        <trans-unit id="c50e5b6f97f253b98726d473e85bc3e447a2bd4a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/setpriority&quot;&gt;setpriority&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/getpriority&quot;&gt;getpriority&lt;/a&gt;&lt;/code&gt; are not compatible with earlier ports by Andreas Kaiser. See &lt;code&gt;&quot;setpriority, getpriority&quot;&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/setpriority&quot;&gt;setpriority&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;functions/getpriority&quot;&gt;getpriority&lt;/a&gt;&lt;/code&gt; は、Andreas Kaiserによる以前のポートと互換性がありません。 &lt;code&gt;&quot;setpriority, getpriority&quot;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="f9af6569137d1fe40ea10409b241d51eaf476898" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/setpriority&quot;&gt;setpriority&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/getpriority&quot;&gt;getpriority&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/setpriority&quot;&gt;setpriority&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/getpriority&quot;&gt;getpriority&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9e768f6c25fd89661888a8fb28b195577438c085" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/splice&quot;&gt;splice&lt;/a&gt;&lt;/code&gt; can be used, for example, to implement n-ary queue processing:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/splice&quot;&gt;splice&lt;/a&gt;&lt;/code&gt; は、たとえば、n進キュー処理を実装するために使用できます。</target>
        </trans-unit>
        <trans-unit id="177c757ab59e714a32d57425c159cf8b95290093" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/split&quot;&gt;split&lt;/a&gt; /regex/, string&lt;/code&gt; splits &lt;code&gt;string&lt;/code&gt; into a list of substrings and returns that list. The regex determines the character sequence that &lt;code&gt;string&lt;/code&gt; is split with respect to. For example, to split a string into words, use</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/split&quot;&gt;split&lt;/a&gt; /regex/, string&lt;/code&gt; 分割 &lt;code&gt;string&lt;/code&gt; リストその部分文字列を返すのリストに。regexは、 &lt;code&gt;string&lt;/code&gt; が分割される文字シーケンスを決定します。たとえば、文字列を単語に分割するには、次を使用します</target>
        </trans-unit>
        <trans-unit id="acccb47a52b54e1b968bac1688412424630d4600" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/state&quot;&gt;state&lt;/a&gt;&lt;/code&gt; declares a lexically scoped variable, just like &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt;. However, those variables will never be reinitialized, contrary to lexical variables that are reinitialized each time their enclosing block is entered. See &lt;a href=&quot;perlsub#Persistent-Private-Variables&quot;&gt;Persistent Private Variables in perlsub&lt;/a&gt; for details.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/state&quot;&gt;state&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; と同様に、レキシカルスコープの変数を宣言します。ただし、それらの変数は、囲まれたブロックに入るたびに再初期化されるレキシカル変数とは異なり、決して再初期化されません。詳細については&lt;a href=&quot;perlsub#Persistent-Private-Variables&quot;&gt;、perlsubの永続的なプライベート変数&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="3e1f128d19018432959490e63d61d5b5b7fb3f6f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/state&quot;&gt;state&lt;/a&gt;&lt;/code&gt; is available only if the &lt;code&gt;&quot;state&quot;&lt;/code&gt; feature is enabled or if it is prefixed with &lt;code&gt;CORE::&lt;/code&gt; . The &lt;code&gt;&quot;state&quot;&lt;/code&gt; feature is enabled automatically with a &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; v5.10&lt;/code&gt; (or higher) declaration in the current scope.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/state&quot;&gt;state&lt;/a&gt;&lt;/code&gt; は、 &lt;code&gt;&quot;state&quot;&lt;/code&gt; 機能が有効になっている場合、または &lt;code&gt;CORE::&lt;/code&gt; が前に付いている場合にのみ使用できます。 &lt;code&gt;&quot;state&quot;&lt;/code&gt; 機能を用いて自動的に有効になり &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; v5.10&lt;/code&gt; 現在のスコープ内の（またはそれ以上）の宣言。</target>
        </trans-unit>
        <trans-unit id="d3d682a66def88db6f77999cda09b21cb1cbfe7c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/state&quot;&gt;state&lt;/a&gt;&lt;/code&gt; variables are enabled only when the &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; feature &quot;state&quot;&lt;/code&gt; pragma is in effect, unless the keyword is written as &lt;code&gt;CORE::state&lt;/code&gt; . See also &lt;a href=&quot;feature&quot;&gt;feature&lt;/a&gt;. Alternately, include a &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; v5.10&lt;/code&gt; or later to the current scope.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/state&quot;&gt;state&lt;/a&gt;&lt;/code&gt; キーワードが &lt;code&gt;CORE::state&lt;/code&gt; として記述されていない限り、状態変数は、 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; feature &quot;state&quot;&lt;/code&gt; プラグマが有効な場合にのみ有効になります。&lt;a href=&quot;feature&quot;&gt;機能&lt;/a&gt;も参照してください。または、現在のスコープに &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; v5.10&lt;/code&gt; v5.10以降を含めます。</target>
        </trans-unit>
        <trans-unit id="5fa9d870fbe303bfda0361e0eb1503a4bc2827ba" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt; LIST&lt;/code&gt; without the use of indirect object syntax (&lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt; PROGRAM LIST&lt;/code&gt; ) may fall back to trying the shell if the first &lt;code&gt;spawn()&lt;/code&gt; fails. (Win32)</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt; LIST&lt;/code&gt; 間接オブジェクト構文を使用しないシステムリスト（ &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt; PROGRAM LIST&lt;/code&gt; ）は、最初の &lt;code&gt;spawn()&lt;/code&gt; が失敗した場合、シェルの試行にフォールバックすることがあります。 （Win32）</target>
        </trans-unit>
        <trans-unit id="a13394de1a0017f2e3c646b4e6f9372f06700bd0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt;&lt;/code&gt; also provides direct control over whether shell wildcard processing may take place, whereas backticks do not.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt;&lt;/code&gt; は、シェルワイルドカード処理が行われるかどうかを直接制御しますが、バックティックは行われません。</target>
        </trans-unit>
        <trans-unit id="ca56f2cd326f61f2e21ca153383b807ee7a157d1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/time&quot;&gt;time&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/time&quot;&gt;time&lt;/a&gt;&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="325d8cb9dc74553e44ba1cf66fe60ddd2554335d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/umask&quot;&gt;umask&lt;/a&gt;&lt;/code&gt; works but the correct permissions are set only when the file is finally closed. (AmigaOS)</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/umask&quot;&gt;umask&lt;/a&gt;&lt;/code&gt; は機能しますが、ファイルが最終的に閉じられたときにのみ、正しいアクセス権が設定されます。（AmigaOS）</target>
        </trans-unit>
        <trans-unit id="4b210b1883c3e9bcbba5d5fb87e463314c1e4390" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; is always treated as numeric, and in particular is changed to &lt;code&gt;0&lt;/code&gt; before incrementing (so that a post-increment of an undef value will return &lt;code&gt;0&lt;/code&gt; rather than &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; が常に数値として扱われ、特に、に変更される &lt;code&gt;0&lt;/code&gt; （undefを値のポストインクリメントが返すように増分する前に &lt;code&gt;0&lt;/code&gt; ではなく、 &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; を）。</target>
        </trans-unit>
        <trans-unit id="e5aefccb12996eadd8d801e9cfdf76ddf4f796d4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/unlink&quot;&gt;unlink&lt;/a&gt;&lt;/code&gt; will delete a file if at all possible, even if it requires changing file protection (though it won't try to change the protection of the parent directory). You can tell whether you've got explicit delete access to a file by using the &lt;code&gt;VMS::Filespec::candelete&lt;/code&gt; operator. For instance, in order to delete only files to which you have delete access, you could say something like</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/unlink&quot;&gt;unlink&lt;/a&gt;&lt;/code&gt; は、ファイル保護を変更する必要がある場合でも、可能な場合はファイルを削除します（ただし、親ディレクトリの保護を変更しようとはしません）。 &lt;code&gt;VMS::Filespec::candelete&lt;/code&gt; 演算子を使用すると、ファイルへの明示的な削除アクセス権があるかどうかを確認できます。たとえば、削除アクセス権を持つファイルのみを削除するには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="c89b142c4cf303af585f44aa959a9f2d33f1baea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/unlink&quot;&gt;unlink&lt;/a&gt;&lt;/code&gt; will delete the highest version of a file only; in order to delete all versions, you need to say</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/unlink&quot;&gt;unlink&lt;/a&gt;&lt;/code&gt; は、ファイルの最新バージョンのみを削除します。すべてのバージョンを削除するには、次のように言う必要があります</target>
        </trans-unit>
        <trans-unit id="2b9d97894178af5ea2b4ade814baff596e23579c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt; does the reverse of &lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt;: it takes a string and expands it out into a list of values. (In scalar context, it returns merely the first value produced.)</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt; の逆を行います。文字列を受け取り、値のリストに展開します。（スカラーコンテキストでは、生成された最初の値のみを返します。）</target>
        </trans-unit>
        <trans-unit id="44eb6a0f9a45c3ab4602cb7e40deb8c651427714" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; VERSION&lt;/code&gt; also lexically enables all features available in the requested version as defined by the &lt;code&gt;feature&lt;/code&gt; pragma, disabling any features not in the requested version's feature bundle. See &lt;a href=&quot;feature&quot;&gt;feature&lt;/a&gt;. Similarly, if the specified Perl version is greater than or equal to 5.12.0, strictures are enabled lexically as with &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; strict&lt;/code&gt; . Any explicit use of &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; strict&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; strict&lt;/code&gt; overrides &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; VERSION&lt;/code&gt; , even if it comes before it. Later use of &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; VERSION&lt;/code&gt; will override all behavior of a previous &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; VERSION&lt;/code&gt; , possibly removing the &lt;code&gt;strict&lt;/code&gt; and &lt;code&gt;feature&lt;/code&gt; added by &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; VERSION&lt;/code&gt; . &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; VERSION&lt;/code&gt; does not load the</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; VERSION&lt;/code&gt; は、 &lt;code&gt;feature&lt;/code&gt; プラグマで定義されているように、要求されたバージョンで使用可能なすべての機能を字句的に有効にし、要求されたバージョンの機能バンドルにない機能を無効にします。&lt;a href=&quot;feature&quot;&gt;機能を&lt;/a&gt;参照してください。指定されたPerlのバージョンは、または5.12に等しいより大きい場合同様に、狭窄を有するように語彙的にイネーブルされる &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; strict&lt;/code&gt; 。 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; strict&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; strict&lt;/code&gt; オーバーライドを明示的に使用する場合は、その前であっても &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; VERSION&lt;/code&gt; &lt;a href=&quot;functions/use&quot;&gt;使用し&lt;/a&gt;ます。後で使用 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; VERSION&lt;/code&gt; を&lt;a href=&quot;functions/use&quot;&gt;使用する&lt;/a&gt;と、以前の &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; VERSION&lt;/code&gt; すべての動作が上書きされ、おそらく &lt;code&gt;strict&lt;/code&gt; かつ &lt;code&gt;feature&lt;/code&gt; によって追加 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; VERSION&lt;/code&gt; 。 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; VERSION&lt;/code&gt; &lt;a href=&quot;functions/use&quot;&gt;使用すると&lt;/a&gt;、</target>
        </trans-unit>
        <trans-unit id="02af597e7e1c634b880fabc11ab8447d438ffc44" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; bytes&lt;/code&gt; is usually a failed attempt to do something useful. Just forget about it.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; bytes&lt;/code&gt; は、通常、何か有用なことをしようとして失敗した試みです。忘れてしまいなさい。</target>
        </trans-unit>
        <trans-unit id="65794f2e0db80cf66382b2a3fac13f64df20f1dd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; encoding ...&lt;/code&gt; is not thread-safe (i.e., do not use in threaded applications).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; encoding ...&lt;/code&gt; はスレッドセーフではありません（つまり、スレッド化されたアプリケーションでは使用しないでください）。</target>
        </trans-unit>
        <trans-unit id="39eeb7ec51146733b1a7cf9eb0196f712de28471" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; feature 'fc'&lt;/code&gt; tells the compiler to enable the &lt;code&gt;&lt;a href=&quot;functions/fc&quot;&gt;fc&lt;/a&gt;&lt;/code&gt; function, which implements Unicode casefolding.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; feature 'fc'&lt;/code&gt; すると、Unicodeの大文字変換を実装する &lt;code&gt;&lt;a href=&quot;functions/fc&quot;&gt;fc&lt;/a&gt;&lt;/code&gt; 関数を有効にするようコンパイラーに指示します。</target>
        </trans-unit>
        <trans-unit id="21d0ae3670893615eaeba861a2b7ada5d23d8df4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; feature 'say'&lt;/code&gt; tells the compiler to enable the Perl 6 style &lt;code&gt;&lt;a href=&quot;functions/say&quot;&gt;say&lt;/a&gt;&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; feature 'say'&lt;/code&gt; は、Perl 6スタイルの &lt;code&gt;&lt;a href=&quot;functions/say&quot;&gt;say&lt;/a&gt;&lt;/code&gt; 関数を有効にするようコンパイラーに指示します。</target>
        </trans-unit>
        <trans-unit id="119202774744694437463c0ae2e1f969fd53e6b7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; feature 'state'&lt;/code&gt; tells the compiler to enable &lt;code&gt;&lt;a href=&quot;functions/state&quot;&gt;state&lt;/a&gt;&lt;/code&gt; variables.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; feature 'state'&lt;/code&gt; と、 &lt;code&gt;&lt;a href=&quot;functions/state&quot;&gt;state&lt;/a&gt;&lt;/code&gt; 変数を有効にするようコンパイラーに指示します。</target>
        </trans-unit>
        <trans-unit id="be9193ee0a2139b1ba978d5f6b9763f7962eb6c7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; feature 'switch'&lt;/code&gt; tells the compiler to enable the Perl 6 given/when construct.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; feature 'switch'&lt;/code&gt; すると、Perl 6のgiven / when構文を有効にするようコンパイラーに指示します。</target>
        </trans-unit>
        <trans-unit id="ee3886237fa1a19506e8ee6eb3def8d571370298" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; feature 'unicode_strings'&lt;/code&gt; tells the compiler to use Unicode rules in all string operations executed within its scope (unless they are also within the scope of either &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; bytes&lt;/code&gt; ). The same applies to all regular expressions compiled within the scope, even if executed outside it. It does not change the internal representation of strings, but only how they are interpreted.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; feature 'unicode_strings'&lt;/code&gt; は、そのスコープ内で実行されるすべての文字列操作でUnicodeルールを使用するようコンパイラーに指示します（ただし、それらは &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; bytes&lt;/code&gt; のスコープ内にある場合を除きます）。スコープ外で実行された場合でも、スコープ内でコンパイルされたすべての正規表現に同じことが適用されます。文字列の内部表現は変更されませんが、文字列の解釈方法のみが変更されます。</target>
        </trans-unit>
        <trans-unit id="3cba69074857ea47c3dfb8655f441c068164911d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; re 'debug'&lt;/code&gt; enables you to see the gory details of how the Perl regular expression engine works. In order to understand this typically voluminous output, one must not only have some idea about how regular expression matching works in general, but also know how Perl's regular expressions are internally compiled into an automaton. These matters are explored in some detail in &lt;a href=&quot;perldebguts#Debugging-Regular-Expressions&quot;&gt;Debugging Regular Expressions in perldebguts&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; re 'debug'&lt;/code&gt; あなたはPerlの正規表現エンジンがどのように動作するかの詳細を見ることができ。この通常は膨大な出力を理解するには、正規表現マッチングが一般的にどのように機能するかについて理解しているだけでなく、Perlの正規表現が内部的にオートマトンにコンパイルされる方法も知っている必要があります。これらの問題については&lt;a href=&quot;perldebguts#Debugging-Regular-Expressions&quot;&gt;、perldebgutsでの正規表現のデバッグで&lt;/a&gt;詳しく説明しています。</target>
        </trans-unit>
        <trans-unit id="4ec77985991c1d1d32691bbc003d4e51cd7aeda5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; utf8&lt;/code&gt; wasn't implicitly declared so you have to &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; utf8&lt;/code&gt; to do</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; utf8&lt;/code&gt; は暗黙的に宣言されていなかった &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; utf8&lt;/code&gt; を使用して</target>
        </trans-unit>
        <trans-unit id="443f944da102d55c2affc8a5f885238902623e07" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; a Perl module if a condition holds (also can &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt;&lt;/code&gt; a module)</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; 条件が満たされている場合はPerlモジュールを使用します（モジュールも使用でき &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt;&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="b3ad26005d5e68b2cb4e1547e6cbf20e087acbfc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/vec&quot;&gt;vec&lt;/a&gt;&lt;/code&gt; may also be assigned to, in which case parentheses are needed to give the expression the correct precedence as in</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/vec&quot;&gt;vec&lt;/a&gt;&lt;/code&gt; を割り当てることもできます。その場合、式に正しい優先順位を与えるには括弧が必要です。</target>
        </trans-unit>
        <trans-unit id="253b8837541eb997903db67737154769342d214c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/wantarray&quot;&gt;wantarray()&lt;/a&gt;&lt;/code&gt;'s result is unspecified in the top level of a file, in a &lt;code&gt;BEGIN&lt;/code&gt; , &lt;code&gt;UNITCHECK&lt;/code&gt; , &lt;code&gt;CHECK&lt;/code&gt; , &lt;code&gt;INIT&lt;/code&gt; or &lt;code&gt;END&lt;/code&gt; block, or in a &lt;code&gt;DESTROY&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/wantarray&quot;&gt;wantarray()&lt;/a&gt;&lt;/code&gt; の結果は、ファイルの最上位、 &lt;code&gt;BEGIN&lt;/code&gt; 、 &lt;code&gt;UNITCHECK&lt;/code&gt; 、 &lt;code&gt;CHECK&lt;/code&gt; 、 &lt;code&gt;INIT&lt;/code&gt; 、 &lt;code&gt;END&lt;/code&gt; ブロック、または &lt;code&gt;DESTROY&lt;/code&gt; メソッドでは指定されていません。</target>
        </trans-unit>
        <trans-unit id="4ce182871cf42859bea7be5ff4b5b81a1a95e11f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;functions/warn&quot;&gt;warn()&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;carp()&lt;/code&gt; a message to STDERR.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/warn&quot;&gt;warn()&lt;/a&gt;&lt;/code&gt; STDERRへのメッセージを warn（）または &lt;code&gt;carp()&lt;/code&gt; します。</target>
        </trans-unit>
        <trans-unit id="4e053c8c2344d774c89169cf3cc69ed5ed3d4f19" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc1766.txt&quot;&gt;http://www.ietf.org/rfc/rfc1766.txt&lt;/a&gt;&lt;/code&gt; [Now see RFC 3066.]</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc1766.txt&quot;&gt;http://www.ietf.org/rfc/rfc1766.txt&lt;/a&gt;&lt;/code&gt; [RFC3066を参照してください。]</target>
        </trans-unit>
        <trans-unit id="f0df496d8f100a8113c0eb03aaaf8ccef33e1b68" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;last&quot;&gt;last&lt;/a&gt;&lt;/code&gt; cannot be used to exit a block that returns a value such as &lt;code&gt;&lt;a href=&quot;eval&quot;&gt;eval&lt;/a&gt; {}&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;sub&quot;&gt;sub&lt;/a&gt; {}&lt;/code&gt; , or &lt;code&gt;&lt;a href=&quot;do&quot;&gt;do&lt;/a&gt; {}&lt;/code&gt; , and should not be used to exit a grep() or map() operation.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;last&quot;&gt;last&lt;/a&gt;&lt;/code&gt; を使用して、 &lt;code&gt;&lt;a href=&quot;eval&quot;&gt;eval&lt;/a&gt; {}&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;sub&quot;&gt;sub&lt;/a&gt; {}&lt;/code&gt; 、または &lt;code&gt;&lt;a href=&quot;do&quot;&gt;do&lt;/a&gt; {}&lt;/code&gt; などの値を返すブロックを終了することはできません。また、grep（）またはmap（）オペレーションを終了するために使用しないでください。</target>
        </trans-unit>
        <trans-unit id="263d020f345cd227424dc536345012174cded3ad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;last&quot;&gt;last&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;next&quot;&gt;next&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;redo&quot;&gt;redo&lt;/a&gt;&lt;/code&gt; may appear within a &lt;code&gt;&lt;a href=&quot;continue&quot;&gt;continue&lt;/a&gt;&lt;/code&gt; block; &lt;code&gt;&lt;a href=&quot;last&quot;&gt;last&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;redo&quot;&gt;redo&lt;/a&gt;&lt;/code&gt; behave as if they had been executed within the main block. So will &lt;code&gt;&lt;a href=&quot;next&quot;&gt;next&lt;/a&gt;&lt;/code&gt;, but since it will execute a &lt;code&gt;&lt;a href=&quot;continue&quot;&gt;continue&lt;/a&gt;&lt;/code&gt; block, it may be more entertaining.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;last&quot;&gt;last&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;next&quot;&gt;next&lt;/a&gt;&lt;/code&gt; 、または &lt;code&gt;&lt;a href=&quot;redo&quot;&gt;redo&lt;/a&gt;&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;continue&quot;&gt;continue&lt;/a&gt;&lt;/code&gt; ブロック内に表示される場合があります。 &lt;code&gt;&lt;a href=&quot;last&quot;&gt;last&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;redo&quot;&gt;redo&lt;/a&gt;&lt;/code&gt; は、メインブロック内で実行されたかのように動作します。だから、意志 &lt;code&gt;&lt;a href=&quot;next&quot;&gt;next&lt;/a&gt;&lt;/code&gt; 、それが実行されますので、 &lt;code&gt;&lt;a href=&quot;continue&quot;&gt;continue&lt;/a&gt;&lt;/code&gt; ブロックを、それがもっと面白いことがあります。</target>
        </trans-unit>
        <trans-unit id="3be37cb59b6af284f0f98885aeb6b517a5b6cbcd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;next&quot;&gt;next&lt;/a&gt;&lt;/code&gt; cannot be used to exit a block which returns a value such as &lt;code&gt;&lt;a href=&quot;eval&quot;&gt;eval&lt;/a&gt; {}&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;sub&quot;&gt;sub&lt;/a&gt; {}&lt;/code&gt; , or &lt;code&gt;&lt;a href=&quot;do&quot;&gt;do&lt;/a&gt; {}&lt;/code&gt; , and should not be used to exit a grep() or map() operation.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;next&quot;&gt;next&lt;/a&gt;&lt;/code&gt; を使用して、 &lt;code&gt;&lt;a href=&quot;eval&quot;&gt;eval&lt;/a&gt; {}&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;sub&quot;&gt;sub&lt;/a&gt; {}&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;do&quot;&gt;do&lt;/a&gt; {}&lt;/code&gt; などの値を返すブロックを終了することはできません。また、grep（）またはmap（）操作を終了するために使用しないでください。</target>
        </trans-unit>
        <trans-unit id="94d58e96273d9ce3f45d93ab3d9b2a258a040437" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;our&quot;&gt;our&lt;/a&gt;&lt;/code&gt; differs from &lt;code&gt;&lt;a href=&quot;use&quot;&gt;use&lt;/a&gt; vars&lt;/code&gt; , which allows use of an unqualified name</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;our&quot;&gt;our&lt;/a&gt;&lt;/code&gt; からの異なっ &lt;code&gt;&lt;a href=&quot;use&quot;&gt;use&lt;/a&gt; vars&lt;/code&gt; 非修飾名の使用を可能にし、</target>
        </trans-unit>
        <trans-unit id="512b743a5a3af3616073c2971298e6db67fcaac9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;our&quot;&gt;our&lt;/a&gt;&lt;/code&gt; has the same scoping rules as &lt;code&gt;&lt;a href=&quot;my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;state&quot;&gt;state&lt;/a&gt;&lt;/code&gt;, meaning that it is only valid within a lexical scope. Unlike &lt;code&gt;&lt;a href=&quot;my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;state&quot;&gt;state&lt;/a&gt;&lt;/code&gt;, which both declare new (lexical) variables, &lt;code&gt;&lt;a href=&quot;our&quot;&gt;our&lt;/a&gt;&lt;/code&gt; only creates an alias to an existing variable: a package variable of the same name.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;our&quot;&gt;our&lt;/a&gt;&lt;/code&gt; スコープ規則は &lt;code&gt;&lt;a href=&quot;my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;state&quot;&gt;state&lt;/a&gt;&lt;/code&gt; と同じです。つまり、レキシカルスコープ内でのみ有効です。違って &lt;code&gt;&lt;a href=&quot;my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;state&quot;&gt;state&lt;/a&gt;&lt;/code&gt; 、両方の宣言新しい（字句）の変数、 &lt;code&gt;&lt;a href=&quot;our&quot;&gt;our&lt;/a&gt;&lt;/code&gt; 同じ名前のパッケージ変数：のみ既存の変数のエイリアスを作成します。</target>
        </trans-unit>
        <trans-unit id="ba2bf5f5b3a22314641f3499a065d97485a642e2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;our&quot;&gt;our&lt;/a&gt;&lt;/code&gt; makes a lexical alias to a package (i.e. global) variable of the same name in the current package for use within the current lexical scope.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;our&quot;&gt;our&lt;/a&gt;&lt;/code&gt; パッケージへの字句別名現在のレキシカルスコープ内で使用するために現在のパッケージ内に同じ名前の（つまりグローバル）変数になります。</target>
        </trans-unit>
        <trans-unit id="360ca70694e71b7a9eee09a8d981b1ad1ac44c90" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;pos&quot;&gt;pos&lt;/a&gt;&lt;/code&gt; directly accesses the location used by the regexp engine to store the offset, so assigning to &lt;code&gt;&lt;a href=&quot;pos&quot;&gt;pos&lt;/a&gt;&lt;/code&gt; will change that offset, and so will also influence the &lt;code&gt;\G&lt;/code&gt; zero-width assertion in regular expressions. Both of these effects take place for the next match, so you can't affect the position with &lt;code&gt;&lt;a href=&quot;pos&quot;&gt;pos&lt;/a&gt;&lt;/code&gt; during the current match, such as in &lt;code&gt;(?{pos() = 5})&lt;/code&gt; or &lt;code&gt;s//pos() = 5/e&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;pos&quot;&gt;pos&lt;/a&gt;&lt;/code&gt; は、正規表現エンジンがオフセットを格納するために使用する場所に直接アクセスするため、 &lt;code&gt;&lt;a href=&quot;pos&quot;&gt;pos&lt;/a&gt;&lt;/code&gt; に割り当てると、そのオフセットが変更され、正規表現の &lt;code&gt;\G&lt;/code&gt; zero-widthアサーションにも影響します。これらの効果は両方とも次の試合で発生するため、 &lt;code&gt;(?{pos() = 5})&lt;/code&gt; や &lt;code&gt;s//pos() = 5/e&lt;/code&gt; ように、現在の試合中に &lt;code&gt;&lt;a href=&quot;pos&quot;&gt;pos&lt;/a&gt;&lt;/code&gt; で位置に影響を与えることはできません。。</target>
        </trans-unit>
        <trans-unit id="44ebaa7ec2b209fa20d273b0a5a9b7503aacc295" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;redo&quot;&gt;redo&lt;/a&gt;&lt;/code&gt; cannot be used to retry a block that returns a value such as &lt;code&gt;&lt;a href=&quot;eval&quot;&gt;eval&lt;/a&gt; {}&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;sub&quot;&gt;sub&lt;/a&gt; {}&lt;/code&gt; , or &lt;code&gt;&lt;a href=&quot;do&quot;&gt;do&lt;/a&gt; {}&lt;/code&gt; , and should not be used to exit a grep() or map() operation.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;redo&quot;&gt;redo&lt;/a&gt;&lt;/code&gt; を使用して、 &lt;code&gt;&lt;a href=&quot;eval&quot;&gt;eval&lt;/a&gt; {}&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;sub&quot;&gt;sub&lt;/a&gt; {}&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;do&quot;&gt;do&lt;/a&gt; {}&lt;/code&gt; などの値を返すブロックを再試行することはできません。また、grep（）またはmap（）操作を終了するために使用しないでください。</target>
        </trans-unit>
        <trans-unit id="aa29c0555345e4686ed8d3d71e3aea4b37c87e34" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;splice&quot;&gt;splice&lt;/a&gt;&lt;/code&gt; can be used, for example, to implement n-ary queue processing:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;splice&quot;&gt;splice&lt;/a&gt;&lt;/code&gt; は、たとえば、n進キュー処理を実装するために使用できます。</target>
        </trans-unit>
        <trans-unit id="6aaa7b64b8ed8213795d79c3e9d1a11a7dd50c6f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;state&quot;&gt;state&lt;/a&gt;&lt;/code&gt; declares a lexically scoped variable, just like &lt;code&gt;&lt;a href=&quot;my&quot;&gt;my&lt;/a&gt;&lt;/code&gt;. However, those variables will never be reinitialized, contrary to lexical variables that are reinitialized each time their enclosing block is entered. See &lt;a href=&quot;../perlsub#Persistent-Private-Variables&quot;&gt;Persistent Private Variables in perlsub&lt;/a&gt; for details.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;state&quot;&gt;state&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; と同様に、レキシカルスコープの変数を宣言します。ただし、それらの変数は、囲まれたブロックに入るたびに再初期化されるレキシカル変数とは異なり、決して再初期化されません。詳細については&lt;a href=&quot;../perlsub#Persistent-Private-Variables&quot;&gt;、perlsubの永続的なプライベート変数&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="8157faa8c3a3d05ba145b1d8aefaa265faaa9f67" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;state&quot;&gt;state&lt;/a&gt;&lt;/code&gt; variables are enabled only when the &lt;code&gt;&lt;a href=&quot;use&quot;&gt;use&lt;/a&gt; feature &quot;state&quot;&lt;/code&gt; pragma is in effect, unless the keyword is written as &lt;code&gt;CORE::state&lt;/code&gt; . See also &lt;a href=&quot;../feature&quot;&gt;feature&lt;/a&gt;. Alternately, include a &lt;code&gt;&lt;a href=&quot;use&quot;&gt;use&lt;/a&gt; v5.10&lt;/code&gt; or later to the current scope.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;state&quot;&gt;state&lt;/a&gt;&lt;/code&gt; キーワードが &lt;code&gt;CORE::state&lt;/code&gt; として記述されていない限り、状態変数は、 &lt;code&gt;&lt;a href=&quot;use&quot;&gt;use&lt;/a&gt; feature &quot;state&quot;&lt;/code&gt; プラグマが有効な場合にのみ有効になります。&lt;a href=&quot;../feature&quot;&gt;機能&lt;/a&gt;も参照してください。または、現在のスコープに &lt;code&gt;&lt;a href=&quot;use&quot;&gt;use&lt;/a&gt; v5.10&lt;/code&gt; v5.10以降を含めます。</target>
        </trans-unit>
        <trans-unit id="2245bc251bbc1b43fe683a1a16bb66eec96c8cbd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt; does the reverse of &lt;code&gt;&lt;a href=&quot;pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt;: it takes a string and expands it out into a list of values. (In scalar context, it returns merely the first value produced.)</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt; の逆を行います。文字列を受け取り、値のリストに展開します。（スカラーコンテキストでは、生成された最初の値のみを返します。）</target>
        </trans-unit>
        <trans-unit id="736c80794a09df674ddc9a935c317db522374fbb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;use&quot;&gt;use&lt;/a&gt; VERSION&lt;/code&gt; also lexically enables all features available in the requested version as defined by the &lt;code&gt;feature&lt;/code&gt; pragma, disabling any features not in the requested version's feature bundle. See &lt;a href=&quot;../feature&quot;&gt;feature&lt;/a&gt;. Similarly, if the specified Perl version is greater than or equal to 5.12.0, strictures are enabled lexically as with &lt;code&gt;&lt;a href=&quot;use&quot;&gt;use&lt;/a&gt; strict&lt;/code&gt; . Any explicit use of &lt;code&gt;&lt;a href=&quot;use&quot;&gt;use&lt;/a&gt; strict&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;no&quot;&gt;no&lt;/a&gt; strict&lt;/code&gt; overrides &lt;code&gt;&lt;a href=&quot;use&quot;&gt;use&lt;/a&gt; VERSION&lt;/code&gt; , even if it comes before it. Later use of &lt;code&gt;&lt;a href=&quot;use&quot;&gt;use&lt;/a&gt; VERSION&lt;/code&gt; will override all behavior of a previous &lt;code&gt;&lt;a href=&quot;use&quot;&gt;use&lt;/a&gt; VERSION&lt;/code&gt; , possibly removing the &lt;code&gt;strict&lt;/code&gt; and &lt;code&gt;feature&lt;/code&gt; added by &lt;code&gt;&lt;a href=&quot;use&quot;&gt;use&lt;/a&gt; VERSION&lt;/code&gt; . &lt;code&gt;&lt;a href=&quot;use&quot;&gt;use&lt;/a&gt; VERSION&lt;/code&gt; does not load the</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;use&quot;&gt;use&lt;/a&gt; VERSION&lt;/code&gt; は、 &lt;code&gt;feature&lt;/code&gt; プラグマで定義されているように、要求されたバージョンで使用可能なすべての機能を字句的に有効にし、要求されたバージョンの機能バンドルにない機能を無効にします。&lt;a href=&quot;../feature&quot;&gt;機能を&lt;/a&gt;参照してください。指定されたPerlのバージョンは、または5.12に等しいより大きい場合同様に、狭窄を有するように語彙的にイネーブルされる &lt;code&gt;&lt;a href=&quot;use&quot;&gt;use&lt;/a&gt; strict&lt;/code&gt; 。 &lt;code&gt;&lt;a href=&quot;use&quot;&gt;use&lt;/a&gt; strict&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;no&quot;&gt;no&lt;/a&gt; strict&lt;/code&gt; オーバーライドを明示的に使用する場合は、その前であっても &lt;code&gt;&lt;a href=&quot;use&quot;&gt;use&lt;/a&gt; VERSION&lt;/code&gt; &lt;a href=&quot;use&quot;&gt;使用し&lt;/a&gt;ます。後で使用 &lt;code&gt;&lt;a href=&quot;use&quot;&gt;use&lt;/a&gt; VERSION&lt;/code&gt; を&lt;a href=&quot;use&quot;&gt;使用する&lt;/a&gt;と、以前の &lt;code&gt;&lt;a href=&quot;use&quot;&gt;use&lt;/a&gt; VERSION&lt;/code&gt; すべての動作が上書きされ、おそらく &lt;code&gt;strict&lt;/code&gt; かつ &lt;code&gt;feature&lt;/code&gt; によって追加 &lt;code&gt;&lt;a href=&quot;use&quot;&gt;use&lt;/a&gt; VERSION&lt;/code&gt; 。 &lt;code&gt;&lt;a href=&quot;use&quot;&gt;use&lt;/a&gt; VERSION&lt;/code&gt; &lt;a href=&quot;use&quot;&gt;使用すると&lt;/a&gt;、</target>
        </trans-unit>
        <trans-unit id="5d689d705b1e08b377f1d5deb4d1a473e7ddec22" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;vec&quot;&gt;vec&lt;/a&gt;&lt;/code&gt; may also be assigned to, in which case parentheses are needed to give the expression the correct precedence as in</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;vec&quot;&gt;vec&lt;/a&gt;&lt;/code&gt; を割り当てることもできます。その場合、式に正しい優先順位を与えるには括弧が必要です。</target>
        </trans-unit>
        <trans-unit id="355259eee85060ecf231fded7ccdc9659e1111c4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;wantarray&quot;&gt;wantarray()&lt;/a&gt;&lt;/code&gt;'s result is unspecified in the top level of a file, in a &lt;code&gt;BEGIN&lt;/code&gt; , &lt;code&gt;UNITCHECK&lt;/code&gt; , &lt;code&gt;CHECK&lt;/code&gt; , &lt;code&gt;INIT&lt;/code&gt; or &lt;code&gt;END&lt;/code&gt; block, or in a &lt;code&gt;DESTROY&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;wantarray&quot;&gt;wantarray()&lt;/a&gt;&lt;/code&gt; の結果は、ファイルの最上位、 &lt;code&gt;BEGIN&lt;/code&gt; 、 &lt;code&gt;UNITCHECK&lt;/code&gt; 、 &lt;code&gt;CHECK&lt;/code&gt; 、 &lt;code&gt;INIT&lt;/code&gt; 、 &lt;code&gt;END&lt;/code&gt; ブロック、または &lt;code&gt;DESTROY&lt;/code&gt; メソッドでは指定されていません。</target>
        </trans-unit>
        <trans-unit id="8d50b5f9e52f09d2ccae3273ada4191283911c0e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;=encoding&lt;/code&gt; affects the whole document, and must occur only once.</source>
          <target state="translated">&lt;code&gt;=encoding&lt;/code&gt; はドキュメント全体に影響し、1回だけ発生する必要があります。</target>
        </trans-unit>
        <trans-unit id="d07322f9284a7fc6a66d31dacd87d358ae453c9b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;=item&lt;/code&gt; determines the type of the list.</source>
          <target state="translated">&lt;code&gt;=item&lt;/code&gt; はリストのタイプを決定します。</target>
        </trans-unit>
        <trans-unit id="ebad7dcfcec37e214976c00e96b70065437ad740" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;=item&lt;/code&gt; without any parameters is deprecated. It should either be followed by &lt;code&gt;*&lt;/code&gt; to indicate an unordered list, by a number (optionally followed by a dot) to indicate an ordered (numbered) list or simple text for a definition list.</source>
          <target state="translated">&lt;code&gt;=item&lt;/code&gt; パラメータのない= itemは非推奨です。順不同のリストを示すには &lt;code&gt;*&lt;/code&gt; が後に続き、順序付き（番号付き）リストを示すには番号（オプションでドットが後に続く）が続くか、定義リストの単純なテキストが必要です。</target>
        </trans-unit>
        <trans-unit id="1f73e36fe3dcbab1d5cadecc12ae9b6f4e28981d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;=~&lt;/code&gt; determines to which variable the regex is applied. In its absence, $_ is used.</source>
          <target state="translated">&lt;code&gt;=~&lt;/code&gt; は、正規表現が適用される変数を決定します。存在しない場合、$ _が使用されます。</target>
        </trans-unit>
        <trans-unit id="36fefbdb7ea0230f31629f2921135e5559c380fe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;? :&lt;/code&gt; has higher precedence than assignment. In JavaScript, one can write:</source>
          <target state="translated">&lt;code&gt;? :&lt;/code&gt; 割り当てよりも優先されます。JavaScriptでは、次のように記述できます。</target>
        </trans-unit>
        <trans-unit id="99cbd52c428d14570a189a38a8c217073b6fca54" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;?pattern?&lt;/code&gt; is like &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m/pattern/&lt;/a&gt;&lt;/code&gt; but matches only once. No alternate delimiters can be used. Must be reset with reset().</source>
          <target state="translated">&lt;code&gt;?pattern?&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m/pattern/&lt;/a&gt;&lt;/code&gt; 似ていますが、1回だけ一致します。代替の区切り文字は使用できません。reset（）でリセットする必要があります。</target>
        </trans-unit>
        <trans-unit id="f1ade0011806b926bc0fc0aa0bd8d231bc768280" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@&lt;/code&gt; , &lt;code&gt;x&lt;/code&gt; , and &lt;code&gt;X&lt;/code&gt; , where it is equivalent to &lt;code&gt;0&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;@&lt;/code&gt; 、 &lt;code&gt;x&lt;/code&gt; 、および &lt;code&gt;X&lt;/code&gt; それはに相当し、 &lt;code&gt;0&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6dc3db43502040572ae8f6124b46054d0f87a0c4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@&lt;/code&gt;, &lt;code&gt;x&lt;/code&gt;, and &lt;code&gt;X&lt;/code&gt;, where it is equivalent to &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;@&lt;/code&gt; 、 &lt;code&gt;x&lt;/code&gt; 、および &lt;code&gt;X&lt;/code&gt; 、ここで &lt;code&gt;0&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="30f3fd756e106eca16f05f980cc57eeeafcf0a6a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@DB::dbline&lt;/code&gt; is an alias for &lt;code&gt;@{&quot;::_&amp;lt;current_file&quot;}&lt;/code&gt; , which holds the lines of the currently-selected file (compiled by Perl), either explicitly chosen with the debugger's &lt;code&gt;f&lt;/code&gt; command, or implicitly by flow of execution.</source>
          <target state="translated">&lt;code&gt;@DB::dbline&lt;/code&gt; は &lt;code&gt;@{&quot;::_&amp;lt;current_file&quot;}&lt;/code&gt; エイリアスで、現在選択されているファイル（Perlによってコンパイルされた）の行を保持します。デバッガーの &lt;code&gt;f&lt;/code&gt; コマンドで明示的に選択されるか、または実行。</target>
        </trans-unit>
        <trans-unit id="1e6fd1b457124190af96d9423709f48b3b7d0ede" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@DB::dbline&lt;/code&gt; is an alias for &lt;code&gt;@{&quot;::_&amp;lt;current_file&quot;}&lt;/code&gt;, which holds the lines of the currently-selected file (compiled by Perl), either explicitly chosen with the debugger's &lt;code&gt;f&lt;/code&gt; command, or implicitly by flow of execution.</source>
          <target state="translated">&lt;code&gt;@DB::dbline&lt;/code&gt; は、 &lt;code&gt;@{&quot;::_&amp;lt;current_file&quot;}&lt;/code&gt; エイリアスであり、デバッガーの &lt;code&gt;f&lt;/code&gt; コマンドで明示的に選択された、またはのフローによって暗黙的に選択された、現在選択されているファイル（Perlによってコンパイルされた）の行を保持します。実行。</target>
        </trans-unit>
        <trans-unit id="0f48354ad148a8b4cee98d2e37fc943ee1ca20d4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@a&lt;/code&gt; is an array with three elements, and each one is a reference to another array.</source>
          <target state="translated">&lt;code&gt;@a&lt;/code&gt; は3つの要素を持つ配列であり、それぞれが別の配列への参照です。</target>
        </trans-unit>
        <trans-unit id="18fefe664b45f9941b57ab901a98c3a3faea9d38" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@records&lt;/code&gt; will consist of these 3 strings:</source>
          <target state="translated">&lt;code&gt;@records&lt;/code&gt; は、次の3つの文字列で構成されます。</target>
        </trans-unit>
        <trans-unit id="31cc6b86ce0c729a7260f1ee87bf417bc3a2b302" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;AF_INET&lt;/code&gt; is for the internet address family of sockets and is handled via &lt;a href=&quot;IO::Socket::INET&quot;&gt;IO::Socket::INET&lt;/a&gt;. &lt;code&gt;AF_INET&lt;/code&gt; sockets are bound to an internet address and port.</source>
          <target state="translated">&lt;code&gt;AF_INET&lt;/code&gt; は、ソケットのインターネットアドレスファミリ用であり、&lt;a href=&quot;IO::Socket::INET&quot;&gt;IO :: Socket :: INETを&lt;/a&gt;介して処理されます。 &lt;code&gt;AF_INET&lt;/code&gt; ソケットは、インターネットアドレスとポートにバインドされています。</target>
        </trans-unit>
        <trans-unit id="2abd6a0867f9aad366dbb663ce30928193761ece" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;AF_UNIX&lt;/code&gt; is for the unix domain socket and is handled via &lt;a href=&quot;IO::Socket::UNIX&quot;&gt;IO::Socket::UNIX&lt;/a&gt;. &lt;code&gt;AF_UNIX&lt;/code&gt; sockets are bound to the file system as their address name space.</source>
          <target state="translated">&lt;code&gt;AF_UNIX&lt;/code&gt; はunixドメインソケット用であり、&lt;a href=&quot;IO::Socket::UNIX&quot;&gt;IO :: Socket :: UNIXを&lt;/a&gt;介して処理されます。 &lt;code&gt;AF_UNIX&lt;/code&gt; ソケットは、アドレス名前空間としてファイルシステムにバインドされます。</target>
        </trans-unit>
        <trans-unit id="c5133137a39f1db792f2a0a17dd56d1204b81d6e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ANSI&lt;/code&gt; C requires &lt;code&gt;extern&lt;/code&gt; where C++ requires 'extern &lt;code&gt;C&lt;/code&gt; '. This variable can be used in Configure to do the right thing.</source>
          <target state="translated">&lt;code&gt;ANSI&lt;/code&gt; Cでは &lt;code&gt;extern&lt;/code&gt; が必要ですが、C ++では 'extern &lt;code&gt;C&lt;/code&gt; ' が必要です。この変数は、Configureで正しいことを行うために使用できます。</target>
        </trans-unit>
        <trans-unit id="fc7842df19b0570fc9a9961f759f1abb7aa6e23c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ANSI&lt;/code&gt; C requires &lt;code&gt;extern&lt;/code&gt; where C++ requires 'extern &lt;code&gt;C&lt;/code&gt;'. This variable can be used in Configure to do the right thing.</source>
          <target state="translated">&lt;code&gt;ANSI&lt;/code&gt; Cは必要で &lt;code&gt;extern&lt;/code&gt; どこC ++が必要です'のextern &lt;code&gt;C&lt;/code&gt; を'。この変数は、正しいことを行うために構成で使用できます。</target>
        </trans-unit>
        <trans-unit id="84ae3437c7a9c9b775fbb010803709f69f626606" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ARGV&lt;/code&gt; must be capitalized. &lt;code&gt;$ARGV[0]&lt;/code&gt; is C's &lt;code&gt;argv[1]&lt;/code&gt; , and &lt;code&gt;argv[0]&lt;/code&gt; ends up in &lt;code&gt;$0&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;ARGV&lt;/code&gt; は大文字にする必要があります。 &lt;code&gt;$ARGV[0]&lt;/code&gt; はCの &lt;code&gt;argv[1]&lt;/code&gt; であり、 &lt;code&gt;argv[0]&lt;/code&gt; は &lt;code&gt;$0&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="d8a83820e5f747b8e9920ff7fc134adaf29324bc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ARGV&lt;/code&gt; must be capitalized. &lt;code&gt;$ARGV[0]&lt;/code&gt; is C's &lt;code&gt;argv[1]&lt;/code&gt;, and &lt;code&gt;argv[0]&lt;/code&gt; ends up in &lt;code&gt;$0&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ARGV&lt;/code&gt; は大文字にする必要があります。 &lt;code&gt;$ARGV[0]&lt;/code&gt; はCの &lt;code&gt;argv[1]&lt;/code&gt; であり、 &lt;code&gt;argv[0]&lt;/code&gt; は &lt;code&gt;$0&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="f57ccf257a33b046ff0968824b0efb78efa3559e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ARG_MAX&lt;/code&gt;&lt;code&gt;CHAR_BIT&lt;/code&gt;&lt;code&gt;CHAR_MAX&lt;/code&gt;&lt;code&gt;CHAR_MIN&lt;/code&gt;&lt;code&gt;CHILD_MAX&lt;/code&gt;&lt;code&gt;INT_MAX&lt;/code&gt;&lt;code&gt;INT_MIN&lt;/code&gt;&lt;code&gt;LINK_MAX&lt;/code&gt;&lt;code&gt;LONG_MAX&lt;/code&gt;&lt;code&gt;LONG_MIN&lt;/code&gt;&lt;code&gt;MAX_CANON&lt;/code&gt;&lt;code&gt;MAX_INPUT&lt;/code&gt;&lt;code&gt;MB_LEN_MAX&lt;/code&gt;&lt;code&gt;NAME_MAX&lt;/code&gt;&lt;code&gt;NGROUPS_MAX&lt;/code&gt;&lt;code&gt;OPEN_MAX&lt;/code&gt;&lt;code&gt;PATH_MAX&lt;/code&gt;&lt;code&gt;PIPE_BUF&lt;/code&gt;&lt;code&gt;SCHAR_MAX&lt;/code&gt;&lt;code&gt;SCHAR_MIN&lt;/code&gt;&lt;code&gt;SHRT_MAX&lt;/code&gt;&lt;code&gt;SHRT_MIN&lt;/code&gt;&lt;code&gt;SSIZE_MAX&lt;/code&gt;&lt;code&gt;STREAM_MAX&lt;/code&gt;&lt;code&gt;TZNAME_MAX&lt;/code&gt;&lt;code&gt;UCHAR_MAX&lt;/code&gt;&lt;code&gt;UINT_MAX&lt;/code&gt;&lt;code&gt;ULONG_MAX&lt;/code&gt;&lt;code&gt;USHRT_MAX&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;ARG_MAX&lt;/code&gt;&lt;code&gt;CHAR_BIT&lt;/code&gt;&lt;code&gt;CHAR_MAX&lt;/code&gt;&lt;code&gt;CHAR_MIN&lt;/code&gt;&lt;code&gt;CHILD_MAX&lt;/code&gt;&lt;code&gt;INT_MAX&lt;/code&gt;&lt;code&gt;INT_MIN&lt;/code&gt;&lt;code&gt;LINK_MAX&lt;/code&gt;&lt;code&gt;LONG_MAX&lt;/code&gt;&lt;code&gt;LONG_MIN&lt;/code&gt;&lt;code&gt;MAX_CANON&lt;/code&gt;&lt;code&gt;MAX_INPUT&lt;/code&gt;&lt;code&gt;MB_LEN_MAX&lt;/code&gt;&lt;code&gt;NAME_MAX&lt;/code&gt;&lt;code&gt;NGROUPS_MAX&lt;/code&gt;&lt;code&gt;OPEN_MAX&lt;/code&gt;&lt;code&gt;PATH_MAX&lt;/code&gt;&lt;code&gt;PIPE_BUF&lt;/code&gt;&lt;code&gt;SCHAR_MAX&lt;/code&gt;&lt;code&gt;SCHAR_MIN&lt;/code&gt;&lt;code&gt;SHRT_MAX&lt;/code&gt;&lt;code&gt;SHRT_MIN&lt;/code&gt;&lt;code&gt;SSIZE_MAX&lt;/code&gt;&lt;code&gt;STREAM_MAX&lt;/code&gt;&lt;code&gt;TZNAME_MAX&lt;/code&gt;&lt;code&gt;UCHAR_MAX&lt;/code&gt;&lt;code&gt;UINT_MAX&lt;/code&gt;&lt;code&gt;ULONG_MAX&lt;/code&gt;&lt;code&gt;USHRT_MAX&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5b9569dc4638e876dd19281624e240989316c5dc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;AUTOLOAD&lt;/code&gt; ed Constants</source>
          <target state="translated">&lt;code&gt;AUTOLOAD&lt;/code&gt; ed定数</target>
        </trans-unit>
        <trans-unit id="490e142f631947b7b6f2c788b456711e34efe3fc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;AUTOLOAD&lt;/code&gt; is called as a regular method, and the caller will not know the difference. Whatever value your &lt;code&gt;AUTOLOAD&lt;/code&gt; method returns is returned to the caller.</source>
          <target state="translated">&lt;code&gt;AUTOLOAD&lt;/code&gt; は通常のメソッドとして呼び出され、呼び出し元は違いを認識しません。 &lt;code&gt;AUTOLOAD&lt;/code&gt; メソッドが返す値はすべて、呼び出し元に返されます。</target>
        </trans-unit>
        <trans-unit id="0fa2d8f9b8be2ad04db308a6994e2570325e093b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;AUTOLOAD&lt;/code&gt;ed Constants</source>
          <target state="translated">&lt;code&gt;AUTOLOAD&lt;/code&gt; ed定数</target>
        </trans-unit>
        <trans-unit id="ffbb9ec120ba361b6f5460b94c314d64b448bf2e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;App::Prove&lt;/code&gt; provides support for 3rd-party plugins. These are currently loaded at run-time,</source>
          <target state="translated">&lt;code&gt;App::Prove&lt;/code&gt; はサードパーティのプラグインをサポートしています。これらは現在、実行時にロードされ、</target>
        </trans-unit>
        <trans-unit id="ba0aceb7a30a93c5c7447ecd145d2662ec296f25" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Archive::Tar&lt;/code&gt; needs to know the current directory, and it will run &lt;code&gt;Cwd::cwd()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Archive::Tar&lt;/code&gt; は現在のディレクトリを知る必要があり、 &lt;code&gt;Cwd::cwd()&lt;/code&gt; を実行します</target>
        </trans-unit>
        <trans-unit id="80986d664cffa01e81fccf03bfedaa80a88cc119" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Archive::Tar&lt;/code&gt; uses byte semantics for any files it reads from or writes to disk. This is not a problem if you only deal with files and never look at their content or work solely with byte strings. But if you use Unicode strings with character semantics, some additional steps need to be taken.</source>
          <target state="translated">&lt;code&gt;Archive::Tar&lt;/code&gt; は、ディスクから読み書きするファイルにバイトセマンティクスを使用します。ファイルのみを扱い、ファイルの内容を確認したり、バイト文字列のみを操作したりしない場合、これは問題になりません。ただし、文字セマンティクスでUnicode文字列を使用する場合は、いくつかの追加手順を実行する必要があります。</target>
        </trans-unit>
        <trans-unit id="af577fe124da7ba0dc1016ca3a04b7143e372d17" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;AutoLoader&lt;/code&gt; is maintained by the perl5-porters. Please direct any questions to the canonical mailing list. Anything that is applicable to the CPAN release can be sent to its maintainer, though.</source>
          <target state="translated">&lt;code&gt;AutoLoader&lt;/code&gt; はperl5-portersによって維持されます。質問があれば、正規のメーリングリストに送ってください。ただし、CPANリリースに適用できるものはすべて、メンテナに送信できます。</target>
        </trans-unit>
        <trans-unit id="9437eb281e77849a5563ad2a499e675a1a043b61" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;AutoSplit&lt;/code&gt; is maintained by the perl5-porters. Please direct any questions to the canonical mailing list. Anything that is applicable to the CPAN release can be sent to its maintainer, though.</source>
          <target state="translated">&lt;code&gt;AutoSplit&lt;/code&gt; はperl5- portersによって維持されます。質問があれば、正規のメーリングリストに送ってください。ただし、CPANリリースに適用できるものはすべて、メンテナに送信できます。</target>
        </trans-unit>
        <trans-unit id="65bd4577edcd6e179bc6b12ccaafd7f126175140" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;AutoSplit&lt;/code&gt; will also emit general diagnostics for inability to create directories or files.</source>
          <target state="translated">&lt;code&gt;AutoSplit&lt;/code&gt; は、ディレクトリまたはファイルを作成できない場合の一般的な診断も出力します。</target>
        </trans-unit>
        <trans-unit id="20ce0b283187c41b4404a6e80e30e87f1a557756" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;AutoSplit&lt;/code&gt; will inform the user if it is necessary to create the top-level directory specified in the invocation. It is preferred that the script or installation process that invokes &lt;code&gt;AutoSplit&lt;/code&gt; have created the full directory path ahead of time. This warning may indicate that the module is being split into an incorrect path.</source>
          <target state="translated">&lt;code&gt;AutoSplit&lt;/code&gt; は、呼び出しで指定された最上位ディレクトリを作成する必要があるかどうかをユーザーに通知します。 &lt;code&gt;AutoSplit&lt;/code&gt; を呼び出すスクリプトまたはインストールプロセスが、完全なディレクトリパスを事前に作成していることが推奨されます。この警告は、モジュールが誤ったパスに分割されていることを示している場合があります。</target>
        </trans-unit>
        <trans-unit id="f791bf59fe665ab5ea1fc7f801f5eda72d0e8745" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;AutoSplit&lt;/code&gt; will warn the user of all subroutines whose name causes potential file naming conflicts on machines with drastically limited (8 characters or less) file name length. Since the subroutine name is used as the file name, these warnings can aid in portability to such systems.</source>
          <target state="translated">&lt;code&gt;AutoSplit&lt;/code&gt; は、ファイル名の長さが大幅に制限されている（8文字以下）マシンで、ファイル名の競合が発生する可能性のあるすべてのサブルーチンについてユーザーに警告します。サブルーチン名がファイル名として使用されるので、これらの警告は、そのようなシステムへの移植性に役立ちます。</target>
        </trans-unit>
        <trans-unit id="cc213bca195d8cb8dbcd8dc52fa42cad032d0531" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;B&amp;lt;text&amp;gt;&lt;/code&gt; -- bold text</source>
          <target state="translated">&lt;code&gt;B&amp;lt;text&amp;gt;&lt;/code&gt; -太字のテキスト</target>
        </trans-unit>
        <trans-unit id="faa7c90636b4810f5846981b5d1192d23e75d7a6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;B38400&lt;/code&gt;&lt;code&gt;B75&lt;/code&gt;&lt;code&gt;B200&lt;/code&gt;&lt;code&gt;B134&lt;/code&gt;&lt;code&gt;B300&lt;/code&gt;&lt;code&gt;B1800&lt;/code&gt;&lt;code&gt;B150&lt;/code&gt;&lt;code&gt;B0&lt;/code&gt;&lt;code&gt;B19200&lt;/code&gt;&lt;code&gt;B1200&lt;/code&gt;&lt;code&gt;B9600&lt;/code&gt;&lt;code&gt;B600&lt;/code&gt;&lt;code&gt;B4800&lt;/code&gt;&lt;code&gt;B50&lt;/code&gt;&lt;code&gt;B2400&lt;/code&gt;&lt;code&gt;B110&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;B38400&lt;/code&gt;&lt;code&gt;B75&lt;/code&gt;&lt;code&gt;B200&lt;/code&gt;&lt;code&gt;B134&lt;/code&gt;&lt;code&gt;B300&lt;/code&gt;&lt;code&gt;B1800&lt;/code&gt;&lt;code&gt;B150&lt;/code&gt;&lt;code&gt;B0&lt;/code&gt;&lt;code&gt;B19200&lt;/code&gt;&lt;code&gt;B1200&lt;/code&gt;&lt;code&gt;B9600&lt;/code&gt;&lt;code&gt;B600&lt;/code&gt;&lt;code&gt;B4800&lt;/code&gt;&lt;code&gt;B50&lt;/code&gt;&lt;code&gt;B2400&lt;/code&gt;&lt;code&gt;B110&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3a64c66bf4fc7c70ea27f75add0d37d3a321bd35" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;B::Deparse,-p&lt;/code&gt; will print</source>
          <target state="translated">&lt;code&gt;B::Deparse,-p&lt;/code&gt; は出力します</target>
        </trans-unit>
        <trans-unit id="12d99aa8d0dc3a4437e4a861de4e6a98166d8c06" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;B::Generate&lt;/code&gt; directly supports the creation of custom ops by name.</source>
          <target state="translated">&lt;code&gt;B::Generate&lt;/code&gt; は、名前によるカスタムopの作成を直接サポートします。</target>
        </trans-unit>
        <trans-unit id="69143927686bc3bd43e1bf2779ecba7d882ac562" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;B::OP&lt;/code&gt; , &lt;code&gt;B::UNOP&lt;/code&gt; , &lt;code&gt;B::UNOP_AUX&lt;/code&gt; , &lt;code&gt;B::BINOP&lt;/code&gt; , &lt;code&gt;B::LOGOP&lt;/code&gt; , &lt;code&gt;B::LISTOP&lt;/code&gt; , &lt;code&gt;B::PMOP&lt;/code&gt; , &lt;code&gt;B::SVOP&lt;/code&gt; , &lt;code&gt;B::PADOP&lt;/code&gt; , &lt;code&gt;B::PVOP&lt;/code&gt; , &lt;code&gt;B::LOOP&lt;/code&gt; , &lt;code&gt;B::COP&lt;/code&gt; , &lt;code&gt;B::METHOP&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;B::OP&lt;/code&gt; 、 &lt;code&gt;B::UNOP&lt;/code&gt; 、 &lt;code&gt;B::UNOP_AUX&lt;/code&gt; 、 &lt;code&gt;B::BINOP&lt;/code&gt; 、 &lt;code&gt;B::LOGOP&lt;/code&gt; 、 &lt;code&gt;B::LISTOP&lt;/code&gt; 、 &lt;code&gt;B::PMOP&lt;/code&gt; 、 &lt;code&gt;B::SVOP&lt;/code&gt; 、 &lt;code&gt;B::PADOP&lt;/code&gt; 、 &lt;code&gt;B::PVOP&lt;/code&gt; 、 &lt;code&gt;B::LOOP&lt;/code&gt; 、 &lt;code&gt;B::COP&lt;/code&gt; 、 &lt;code&gt;B::METHOP&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="209ba02493eaaf8d3ebcdfb52441c0725f7544c1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;B::OP&lt;/code&gt;, &lt;code&gt;B::UNOP&lt;/code&gt;, &lt;code&gt;B::UNOP_AUX&lt;/code&gt;, &lt;code&gt;B::BINOP&lt;/code&gt;, &lt;code&gt;B::LOGOP&lt;/code&gt;, &lt;code&gt;B::LISTOP&lt;/code&gt;, &lt;code&gt;B::PMOP&lt;/code&gt;, &lt;code&gt;B::SVOP&lt;/code&gt;, &lt;code&gt;B::PADOP&lt;/code&gt;, &lt;code&gt;B::PVOP&lt;/code&gt;, &lt;code&gt;B::LOOP&lt;/code&gt;, &lt;code&gt;B::COP&lt;/code&gt;, &lt;code&gt;B::METHOP&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;B::OP&lt;/code&gt;, &lt;code&gt;B::UNOP&lt;/code&gt;, &lt;code&gt;B::UNOP_AUX&lt;/code&gt;, &lt;code&gt;B::BINOP&lt;/code&gt;, &lt;code&gt;B::LOGOP&lt;/code&gt;, &lt;code&gt;B::LISTOP&lt;/code&gt;, &lt;code&gt;B::PMOP&lt;/code&gt;, &lt;code&gt;B::SVOP&lt;/code&gt;, &lt;code&gt;B::PADOP&lt;/code&gt;, &lt;code&gt;B::PVOP&lt;/code&gt;, &lt;code&gt;B::LOOP&lt;/code&gt;, &lt;code&gt;B::COP&lt;/code&gt;, &lt;code&gt;B::METHOP&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="0b9f3bb0f0c441b31c591f3a04a947cf1db2ac5f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;BEGIN&lt;/code&gt; and &lt;code&gt;END&lt;/code&gt; blocks may be used to capture control before or after the implicit loop, just as in</source>
          <target state="translated">&lt;code&gt;BEGIN&lt;/code&gt; ブロックと &lt;code&gt;END&lt;/code&gt; ブロックを使用して、次のように、暗黙的なループの前または後に制御をキャプチャできます。</target>
        </trans-unit>
        <trans-unit id="6e70ee8bd7cbef3858d58171f0cc99eaf7a63c68" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;BEGIN&lt;/code&gt; and &lt;code&gt;END&lt;/code&gt; blocks may be used to capture control before or after the implicit program loop, just as in</source>
          <target state="translated">&lt;code&gt;BEGIN&lt;/code&gt; ブロックと &lt;code&gt;END&lt;/code&gt; ブロックは、次のように、暗黙的なプログラムループの前または後に制御をキャプチャするために使用できます。</target>
        </trans-unit>
        <trans-unit id="f8b758038b5498a90bd251e1abc1bf4be0e55d71" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;BEGIN&lt;/code&gt; and &lt;code&gt;UNITCHECK&lt;/code&gt; blocks are not directly related to the phase of the interpreter. They can be created and executed during any phase.</source>
          <target state="translated">&lt;code&gt;BEGIN&lt;/code&gt; および &lt;code&gt;UNITCHECK&lt;/code&gt; ブロックは、インタプリタのフェーズに直接関係していません。これらは、どのフェーズでも作成および実行できます。</target>
        </trans-unit>
        <trans-unit id="082d24a9e87b0209dc81d0662163c42480ebe79c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;BEGINLIBPATH&lt;/code&gt; and &lt;code&gt;ENDLIBPATH&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;BEGINLIBPATH&lt;/code&gt; および &lt;code&gt;ENDLIBPATH&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="499245d6aeb6a133d5fe34cee30f454c408a297d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;BINMODE&lt;/code&gt; , &lt;code&gt;CLEAR&lt;/code&gt; , &lt;code&gt;CLOSE&lt;/code&gt; , &lt;code&gt;DELETE&lt;/code&gt; , &lt;code&gt;DESTROY&lt;/code&gt; , &lt;code&gt;EOF&lt;/code&gt; , &lt;code&gt;EXISTS&lt;/code&gt; , &lt;code&gt;EXTEND&lt;/code&gt; , &lt;code&gt;FETCH&lt;/code&gt; , &lt;code&gt;FETCHSIZE&lt;/code&gt; , &lt;code&gt;FILENO&lt;/code&gt; , &lt;code&gt;FIRSTKEY&lt;/code&gt; , &lt;code&gt;GETC&lt;/code&gt; , &lt;code&gt;NEXTKEY&lt;/code&gt; , &lt;code&gt;OPEN&lt;/code&gt; , &lt;code&gt;POP&lt;/code&gt; , &lt;code&gt;PRINT&lt;/code&gt; , &lt;code&gt;PRINTF&lt;/code&gt; , &lt;code&gt;PUSH&lt;/code&gt; , &lt;code&gt;READ&lt;/code&gt; , &lt;code&gt;READLINE&lt;/code&gt; , &lt;code&gt;SCALAR&lt;/code&gt; , &lt;code&gt;SEEK&lt;/code&gt; , &lt;code&gt;SHIFT&lt;/code&gt; , &lt;code&gt;SPLICE&lt;/code&gt; , &lt;code&gt;STORE&lt;/code&gt; , &lt;code&gt;STORESIZE&lt;/code&gt; , &lt;code&gt;TELL&lt;/code&gt; , &lt;code&gt;TIEARRAY&lt;/code&gt; , &lt;code&gt;TIEHANDLE&lt;/code&gt; , &lt;code&gt;TIEHASH&lt;/code&gt; , &lt;code&gt;TIESCALAR&lt;/code&gt; , &lt;code&gt;UNSHIFT&lt;/code&gt; , &lt;code&gt;UNTIE&lt;/code&gt; , &lt;code&gt;WRITE&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;BINMODE&lt;/code&gt; 、 &lt;code&gt;CLEAR&lt;/code&gt; 、 &lt;code&gt;CLOSE&lt;/code&gt; 、 &lt;code&gt;DELETE&lt;/code&gt; 、 &lt;code&gt;DESTROY&lt;/code&gt; 、 &lt;code&gt;EOF&lt;/code&gt; 、 &lt;code&gt;EXISTS&lt;/code&gt; 、 &lt;code&gt;EXTEND&lt;/code&gt; 、 &lt;code&gt;FETCH&lt;/code&gt; 、 &lt;code&gt;FETCHSIZE&lt;/code&gt; 、 &lt;code&gt;FILENO&lt;/code&gt; 、 &lt;code&gt;FIRSTKEY&lt;/code&gt; 、 &lt;code&gt;GETC&lt;/code&gt; 、 &lt;code&gt;NEXTKEY&lt;/code&gt; 、 &lt;code&gt;OPEN&lt;/code&gt; 、 &lt;code&gt;POP&lt;/code&gt; 、 &lt;code&gt;PRINT&lt;/code&gt; 、 &lt;code&gt;PRINTF&lt;/code&gt; 、 &lt;code&gt;PUSH&lt;/code&gt; 、 &lt;code&gt;READ&lt;/code&gt; 、 &lt;code&gt;READLINE&lt;/code&gt; 、 &lt;code&gt;SCALAR&lt;/code&gt; 、 &lt;code&gt;SEEK&lt;/code&gt; 、 &lt;code&gt;SHIFT&lt;/code&gt; 、 &lt;code&gt;SPLICE&lt;/code&gt; 、 &lt;code&gt;STORE&lt;/code&gt; 、 &lt;code&gt;STORESIZE&lt;/code&gt; 、 &lt;code&gt;TELL&lt;/code&gt; 、 &lt;code&gt;TIEARRAY&lt;/code&gt; 、 &lt;code&gt;TIEHANDLE&lt;/code&gt; 、 &lt;code&gt;TIEHASH&lt;/code&gt; 、 &lt;code&gt;TIESCALAR&lt;/code&gt; 、 &lt;code&gt;UNSHIFT&lt;/code&gt; 、 &lt;code&gt;UNTIE&lt;/code&gt; 、 &lt;code&gt;WRITE&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="30054059d16923fe6138b013ad38390b2d287c04" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;BINMODE&lt;/code&gt; , &lt;code&gt;CLEARERR&lt;/code&gt; , &lt;code&gt;CLOSE&lt;/code&gt; , &lt;code&gt;EOF&lt;/code&gt; , &lt;code&gt;ERROR&lt;/code&gt; , &lt;code&gt;FDOPEN&lt;/code&gt; , &lt;code&gt;FILENO&lt;/code&gt; , &lt;code&gt;FILL&lt;/code&gt; , &lt;code&gt;FLUSH&lt;/code&gt; , &lt;code&gt;OPEN&lt;/code&gt; , &lt;code&gt;POPPED&lt;/code&gt; , &lt;code&gt;PUSHED&lt;/code&gt; , &lt;code&gt;READ&lt;/code&gt; , &lt;code&gt;SEEK&lt;/code&gt; , &lt;code&gt;SETLINEBUF&lt;/code&gt; , &lt;code&gt;SYSOPEN&lt;/code&gt; , &lt;code&gt;TELL&lt;/code&gt; , &lt;code&gt;UNREAD&lt;/code&gt; , &lt;code&gt;UTF8&lt;/code&gt; , &lt;code&gt;WRITE&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;BINMODE&lt;/code&gt; 、 &lt;code&gt;CLEARERR&lt;/code&gt; 、 &lt;code&gt;CLOSE&lt;/code&gt; 、 &lt;code&gt;EOF&lt;/code&gt; 、 &lt;code&gt;ERROR&lt;/code&gt; 、 &lt;code&gt;FDOPEN&lt;/code&gt; 、 &lt;code&gt;FILENO&lt;/code&gt; 、 &lt;code&gt;FILL&lt;/code&gt; 、 &lt;code&gt;FLUSH&lt;/code&gt; 、 &lt;code&gt;OPEN&lt;/code&gt; 、 &lt;code&gt;POPPED&lt;/code&gt; 、 &lt;code&gt;PUSHED&lt;/code&gt; 、 &lt;code&gt;READ&lt;/code&gt; 、 &lt;code&gt;SEEK&lt;/code&gt; 、 &lt;code&gt;SETLINEBUF&lt;/code&gt; 、 &lt;code&gt;SYSOPEN&lt;/code&gt; 、 &lt;code&gt;TELL&lt;/code&gt; 、 &lt;code&gt;UNREAD&lt;/code&gt; 、 &lt;code&gt;UTF8&lt;/code&gt; 、 &lt;code&gt;WRITE&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3fb90a937e9d5d3bb388a880fc703afda3e062b5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;BINMODE&lt;/code&gt;, &lt;code&gt;CLEAR&lt;/code&gt;, &lt;code&gt;CLOSE&lt;/code&gt;, &lt;code&gt;DELETE&lt;/code&gt;, &lt;code&gt;DESTROY&lt;/code&gt;, &lt;code&gt;EOF&lt;/code&gt;, &lt;code&gt;EXISTS&lt;/code&gt;, &lt;code&gt;EXTEND&lt;/code&gt;, &lt;code&gt;FETCH&lt;/code&gt;, &lt;code&gt;FETCHSIZE&lt;/code&gt;, &lt;code&gt;FILENO&lt;/code&gt;, &lt;code&gt;FIRSTKEY&lt;/code&gt;, &lt;code&gt;GETC&lt;/code&gt;, &lt;code&gt;NEXTKEY&lt;/code&gt;, &lt;code&gt;OPEN&lt;/code&gt;, &lt;code&gt;POP&lt;/code&gt;, &lt;code&gt;PRINT&lt;/code&gt;, &lt;code&gt;PRINTF&lt;/code&gt;, &lt;code&gt;PUSH&lt;/code&gt;, &lt;code&gt;READ&lt;/code&gt;, &lt;code&gt;READLINE&lt;/code&gt;, &lt;code&gt;SCALAR&lt;/code&gt;, &lt;code&gt;SEEK&lt;/code&gt;, &lt;code&gt;SHIFT&lt;/code&gt;, &lt;code&gt;SPLICE&lt;/code&gt;, &lt;code&gt;STORE&lt;/code&gt;, &lt;code&gt;STORESIZE&lt;/code&gt;, &lt;code&gt;TELL&lt;/code&gt;, &lt;code&gt;TIEARRAY&lt;/code&gt;, &lt;code&gt;TIEHANDLE&lt;/code&gt;, &lt;code&gt;TIEHASH&lt;/code&gt;, &lt;code&gt;TIESCALAR&lt;/code&gt;, &lt;code&gt;UNSHIFT&lt;/code&gt;, &lt;code&gt;UNTIE&lt;/code&gt;, &lt;code&gt;WRITE&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;BINMODE&lt;/code&gt;, &lt;code&gt;CLEAR&lt;/code&gt;, &lt;code&gt;CLOSE&lt;/code&gt;, &lt;code&gt;DELETE&lt;/code&gt;, &lt;code&gt;DESTROY&lt;/code&gt;, &lt;code&gt;EOF&lt;/code&gt;, &lt;code&gt;EXISTS&lt;/code&gt;, &lt;code&gt;EXTEND&lt;/code&gt;, &lt;code&gt;FETCH&lt;/code&gt;, &lt;code&gt;FETCHSIZE&lt;/code&gt;, &lt;code&gt;FILENO&lt;/code&gt;, &lt;code&gt;FIRSTKEY&lt;/code&gt;, &lt;code&gt;GETC&lt;/code&gt;, &lt;code&gt;NEXTKEY&lt;/code&gt;, &lt;code&gt;OPEN&lt;/code&gt;, &lt;code&gt;POP&lt;/code&gt;, &lt;code&gt;PRINT&lt;/code&gt;, &lt;code&gt;PRINTF&lt;/code&gt;, &lt;code&gt;PUSH&lt;/code&gt;, &lt;code&gt;READ&lt;/code&gt;, &lt;code&gt;READLINE&lt;/code&gt;, &lt;code&gt;SCALAR&lt;/code&gt;, &lt;code&gt;SEEK&lt;/code&gt;, &lt;code&gt;SHIFT&lt;/code&gt;, &lt;code&gt;SPLICE&lt;/code&gt;, &lt;code&gt;STORE&lt;/code&gt;, &lt;code&gt;STORESIZE&lt;/code&gt;, &lt;code&gt;TELL&lt;/code&gt;, &lt;code&gt;TIEARRAY&lt;/code&gt;, &lt;code&gt;TIEHANDLE&lt;/code&gt;, &lt;code&gt;TIEHASH&lt;/code&gt;, &lt;code&gt;TIESCALAR&lt;/code&gt;, &lt;code&gt;UNSHIFT&lt;/code&gt;, &lt;code&gt;UNTIE&lt;/code&gt;, &lt;code&gt;WRITE&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ba58da6c13dde0f8c02e132b30d06dba883e205e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;BINMODE&lt;/code&gt;, &lt;code&gt;CLEARERR&lt;/code&gt;, &lt;code&gt;CLOSE&lt;/code&gt;, &lt;code&gt;EOF&lt;/code&gt;, &lt;code&gt;ERROR&lt;/code&gt;, &lt;code&gt;FDOPEN&lt;/code&gt;, &lt;code&gt;FILENO&lt;/code&gt;, &lt;code&gt;FILL&lt;/code&gt;, &lt;code&gt;FLUSH&lt;/code&gt;, &lt;code&gt;OPEN&lt;/code&gt;, &lt;code&gt;POPPED&lt;/code&gt;, &lt;code&gt;PUSHED&lt;/code&gt;, &lt;code&gt;READ&lt;/code&gt;, &lt;code&gt;SEEK&lt;/code&gt;, &lt;code&gt;SETLINEBUF&lt;/code&gt;, &lt;code&gt;SYSOPEN&lt;/code&gt;, &lt;code&gt;TELL&lt;/code&gt;, &lt;code&gt;UNREAD&lt;/code&gt;, &lt;code&gt;UTF8&lt;/code&gt;, &lt;code&gt;WRITE&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;BINMODE&lt;/code&gt;, &lt;code&gt;CLEARERR&lt;/code&gt;, &lt;code&gt;CLOSE&lt;/code&gt;, &lt;code&gt;EOF&lt;/code&gt;, &lt;code&gt;ERROR&lt;/code&gt;, &lt;code&gt;FDOPEN&lt;/code&gt;, &lt;code&gt;FILENO&lt;/code&gt;, &lt;code&gt;FILL&lt;/code&gt;, &lt;code&gt;FLUSH&lt;/code&gt;, &lt;code&gt;OPEN&lt;/code&gt;, &lt;code&gt;POPPED&lt;/code&gt;, &lt;code&gt;PUSHED&lt;/code&gt;, &lt;code&gt;READ&lt;/code&gt;, &lt;code&gt;SEEK&lt;/code&gt;, &lt;code&gt;SETLINEBUF&lt;/code&gt;, &lt;code&gt;SYSOPEN&lt;/code&gt;, &lt;code&gt;TELL&lt;/code&gt;, &lt;code&gt;UNREAD&lt;/code&gt;, &lt;code&gt;UTF8&lt;/code&gt;, &lt;code&gt;WRITE&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bea30947e2c1475164f5299445eaca2bdacb962b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;BRKINT&lt;/code&gt;&lt;code&gt;ICRNL&lt;/code&gt;&lt;code&gt;IGNBRK&lt;/code&gt;&lt;code&gt;IGNCR&lt;/code&gt;&lt;code&gt;IGNPAR&lt;/code&gt;&lt;code&gt;INLCR&lt;/code&gt;&lt;code&gt;INPCK&lt;/code&gt;&lt;code&gt;ISTRIP&lt;/code&gt;&lt;code&gt;IXOFF&lt;/code&gt;&lt;code&gt;IXON&lt;/code&gt;&lt;code&gt;PARMRK&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;BRKINT&lt;/code&gt;&lt;code&gt;ICRNL&lt;/code&gt;&lt;code&gt;IGNBRK&lt;/code&gt;&lt;code&gt;IGNCR&lt;/code&gt;&lt;code&gt;IGNPAR&lt;/code&gt;&lt;code&gt;INLCR&lt;/code&gt;&lt;code&gt;INPCK&lt;/code&gt;&lt;code&gt;ISTRIP&lt;/code&gt;&lt;code&gt;IXOFF&lt;/code&gt;&lt;code&gt;IXON&lt;/code&gt;&lt;code&gt;PARMRK&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1a86a4f316865f4d27f2b761993dbe11e226b269" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;BUFSIZ&lt;/code&gt;&lt;code&gt;EOF&lt;/code&gt;&lt;code&gt;FILENAME_MAX&lt;/code&gt;&lt;code&gt;L_ctermid&lt;/code&gt;&lt;code&gt;L_cuserid&lt;/code&gt;&lt;code&gt;L_tmpname&lt;/code&gt;&lt;code&gt;TMP_MAX&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;BUFSIZ&lt;/code&gt;&lt;code&gt;EOF&lt;/code&gt;&lt;code&gt;FILENAME_MAX&lt;/code&gt;&lt;code&gt;L_ctermid&lt;/code&gt;&lt;code&gt;L_cuserid&lt;/code&gt;&lt;code&gt;L_tmpname&lt;/code&gt;&lt;code&gt;TMP_MAX&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7a3c7ddb888425f108b80badc278fe47210c4fce" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;BUFSIZ&lt;/code&gt;&lt;code&gt;EOF&lt;/code&gt;&lt;code&gt;FILENAME_MAX&lt;/code&gt;&lt;code&gt;L_ctermid&lt;/code&gt;&lt;code&gt;L_cuserid&lt;/code&gt;&lt;code&gt;TMP_MAX&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;BUFSIZ&lt;/code&gt;&lt;code&gt;EOF&lt;/code&gt;&lt;code&gt;FILENAME_MAX&lt;/code&gt;&lt;code&gt;L_ctermid&lt;/code&gt;&lt;code&gt;L_cuserid&lt;/code&gt;&lt;code&gt;TMP_MAX&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1068b5ab79986a3cc5a6ee64ced95d9ae4dd1680" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;C&amp;lt;code&amp;gt;&lt;/code&gt; -- code text</source>
          <target state="translated">&lt;code&gt;C&amp;lt;code&amp;gt;&lt;/code&gt; -コードテキスト</target>
        </trans-unit>
        <trans-unit id="9b5d3888afaab4aeac99edeb07406b18608b6c50" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;CHECK&lt;/code&gt; code blocks are run just after the &lt;b&gt;initial&lt;/b&gt; Perl compile phase ends and before the run time begins, in LIFO order. &lt;code&gt;CHECK&lt;/code&gt; code blocks are used in the Perl compiler suite to save the compiled state of the program.</source>
          <target state="translated">&lt;code&gt;CHECK&lt;/code&gt; コードブロックは、&lt;b&gt;最初の&lt;/b&gt; Perlコンパイルフェーズが終了した直後、ランタイムが始まる前に、LIFO順に実行されます。 &lt;code&gt;CHECK&lt;/code&gt; コードブロックは、プログラムのコンパイルされた状態を保存するためにPerlコンパイラスイートで使用されます。</target>
        </trans-unit>
        <trans-unit id="38fcc27a3ad0d395c02e50e7c531f1819e983b9f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;CJKV Information Processing&lt;/code&gt; by Ken Lunde</source>
          <target state="translated">&lt;code&gt;CJKV Information Processing&lt;/code&gt; ケン・ランディによるCJKV情報処理</target>
        </trans-unit>
        <trans-unit id="45e02246fa126d7ef5ff5b0718b1e93bd87149d5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;CLK_TCK&lt;/code&gt;&lt;code&gt;CLOCKS_PER_SEC&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;CLK_TCK&lt;/code&gt;&lt;code&gt;CLOCKS_PER_SEC&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a61a7563f8241ebae52535c87c69347ca5c0ae09" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;CLOCAL&lt;/code&gt;&lt;code&gt;CREAD&lt;/code&gt;&lt;code&gt;CSIZE&lt;/code&gt;&lt;code&gt;CS5&lt;/code&gt;&lt;code&gt;CS6&lt;/code&gt;&lt;code&gt;CS7&lt;/code&gt;&lt;code&gt;CS8&lt;/code&gt;&lt;code&gt;CSTOPB&lt;/code&gt;&lt;code&gt;HUPCL&lt;/code&gt;&lt;code&gt;PARENB&lt;/code&gt;&lt;code&gt;PARODD&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;CLOCAL&lt;/code&gt;&lt;code&gt;CREAD&lt;/code&gt;&lt;code&gt;CSIZE&lt;/code&gt;&lt;code&gt;CS5&lt;/code&gt;&lt;code&gt;CS6&lt;/code&gt;&lt;code&gt;CS7&lt;/code&gt;&lt;code&gt;CS8&lt;/code&gt;&lt;code&gt;CSTOPB&lt;/code&gt;&lt;code&gt;HUPCL&lt;/code&gt;&lt;code&gt;PARENB&lt;/code&gt;&lt;code&gt;PARODD&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bb14449092af20fb2f25b23f9f6ea74cda3c921f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;CLONE&lt;/code&gt; , &lt;code&gt;CLONE_SKIP&lt;/code&gt; ,</source>
          <target state="translated">&lt;code&gt;CLONE&lt;/code&gt; 、 &lt;code&gt;CLONE_SKIP&lt;/code&gt; 、</target>
        </trans-unit>
        <trans-unit id="98feab5be1c0789e260f02a5b8786c2550b99e90" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;CLONE&lt;/code&gt;, &lt;code&gt;CLONE_SKIP&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;CLONE&lt;/code&gt;, &lt;code&gt;CLONE_SKIP&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3e842438a6d5fd05c1d56ab371560a54b33caded" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;CLONEf_CLONE_HOST&lt;/code&gt; - This is a win32 thing, it is ignored on unix, it tells perl's win32host code (which is c++) to clone itself, this is needed on win32 if you want to run two threads at the same time, if you just want to do some stuff in a separate perl interpreter and then throw it away and return to the original one, you don't need to do anything.</source>
          <target state="translated">&lt;code&gt;CLONEf_CLONE_HOST&lt;/code&gt; -これはwin32のものであり、unixでは無視されます。perlのwin32hostコード（c ++）にクローンを作成するように指示します。これは、2つのスレッドを同時に実行する場合、win32で必要です。別のperlインタープリターでいくつかの作業を行い、それを破棄して元のインタープリターに戻します。何もする必要はありません。</target>
        </trans-unit>
        <trans-unit id="08c369f72d806d3022fdba9421eb9e02d570ca93" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;CLONEf_COPY_STACKS&lt;/code&gt; - is used to, well, copy the stacks also, without it we only clone the data and zero the stacks, with it we copy the stacks and the new perl interpreter is ready to run at the exact same point as the previous one. The pseudo-fork code uses &lt;code&gt;COPY_STACKS&lt;/code&gt; while the threads-&amp;gt;create doesn't.</source>
          <target state="translated">&lt;code&gt;CLONEf_COPY_STACKS&lt;/code&gt; -スタックをコピーするためにも使用されます。これを使用しないと、データのクローンを作成してスタックをゼロにするだけで、スタックをコピーすると、新しいperlインタープリターを前のインタープリターとまったく同じポイントで実行できるようになります。疑似フォークコードは &lt;code&gt;COPY_STACKS&lt;/code&gt; を使用しますが、threads- &amp;gt; createは使用しません。</target>
        </trans-unit>
        <trans-unit id="9777059e74a385b8c49ed05093082083d3a48d61" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;CLONEf_KEEP_PTR_TABLE&lt;/code&gt; - &lt;code&gt;perl_clone&lt;/code&gt; keeps a ptr_table with the pointer of the old variable as a key and the new variable as a value, this allows it to check if something has been cloned and not clone it again, but rather just use the value and increase the refcount. If &lt;code&gt;KEEP_PTR_TABLE&lt;/code&gt; is not set then &lt;code&gt;perl_clone&lt;/code&gt; will kill the ptr_table using the function &lt;code&gt;ptr_table_free(PL_ptr_table); PL_ptr_table = NULL;&lt;/code&gt;. A reason to keep it around is if you want to dup some of your own variables which are outside the graph that perl scans.</source>
          <target state="translated">&lt;code&gt;CLONEf_KEEP_PTR_TABLE&lt;/code&gt; - &lt;code&gt;perl_clone&lt;/code&gt; は、古い変数のポインターをキーとして、新しい変数のポインターを値としてptr_tableを保持します。これにより、何かが複製されたかどうかを確認し、再度複製するのではなく、値を使用してrefcountを増やすことができます。 。場合 &lt;code&gt;KEEP_PTR_TABLE&lt;/code&gt; が設定されていない &lt;code&gt;perl_clone&lt;/code&gt; は、機能の使用ptr_table殺す &lt;code&gt;ptr_table_free(PL_ptr_table); PL_ptr_table = NULL;&lt;/code&gt; 。それを維持する理由は、perlがスキャンするグラフの外側にある独自の変数のいくつかを複製したい場合です。</target>
        </trans-unit>
        <trans-unit id="03c199db2c255ea797ffcbc3258a9caf85ffeeae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;CPAN.pm&lt;/code&gt; comes with a collection of example YAML files. Note that these are really just examples and should not be used without care because they cannot fit everybody's purpose. After all, the authors of the packages that ask questions had a need to ask, so you should watch their questions and adjust the examples to your environment and your needs. You have been warned:-)</source>
          <target state="translated">&lt;code&gt;CPAN.pm&lt;/code&gt; には、サンプルのYAMLファイルのコレクションが付属しています。これらは実際の例にすぎず、誰の目的にも適合しないため、注意して使用しないでください。結局、質問をするパッケージの作者は質問する必要があったので、彼らの質問を見て、環境とニーズに合わせて例を調整する必要があります。警告されました:-)</target>
        </trans-unit>
        <trans-unit id="f9137f076637a4b82d637da05fb2a2466e26f89b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;CX_LEAVE_SCOPE&lt;/code&gt; itself is safely re-entrant: if only half the savestack items have been popped before dying and getting trapped by eval, then the &lt;code&gt;CX_LEAVE_SCOPE&lt;/code&gt;s in &lt;code&gt;dounwind&lt;/code&gt; or &lt;code&gt;pp_leaveeval&lt;/code&gt; will continue where the first one left off.</source>
          <target state="translated">&lt;code&gt;CX_LEAVE_SCOPE&lt;/code&gt; 自体が再入安全です：半分だけセーブスタックの項目が死ぬ前にポップされているとはevalでトラップなった場合、その後、 &lt;code&gt;CX_LEAVE_SCOPE&lt;/code&gt; 中の &lt;code&gt;dounwind&lt;/code&gt; または &lt;code&gt;pp_leaveeval&lt;/code&gt; は、最初のものは中断したところから続行されます。</target>
        </trans-unit>
        <trans-unit id="e958779cdd01a7b3327f2eef63836bcd8b19e2ff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;CYGWIN&lt;/code&gt; setting, permissions use the standard WinNT security descriptors and access control lists. Without one of these options, these tests will fail (listing not updated yet):</source>
          <target state="translated">&lt;code&gt;CYGWIN&lt;/code&gt; 設定では、権限は標準のWinNTセキュリティ記述子とアクセス制御リストを使用します。これらのオプションのいずれかがない場合、これらのテストは失敗します（リストはまだ更新されていません）。</target>
        </trans-unit>
        <trans-unit id="715067c3d15ba3a25c4c578ac95ae803c5d463ac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;CYGWIN&lt;/code&gt; setting, the additional mode bits are stored as extended file attributes. On WinNT with the default</source>
          <target state="translated">&lt;code&gt;CYGWIN&lt;/code&gt; 設定では、追加のモードビットは拡張ファイル属性として保存されます。デフォルトのWinNT</target>
        </trans-unit>
        <trans-unit id="b40e8c070cd96353a84f0cdb4689a540da128600" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Carp&lt;/code&gt; takes care not to clobber the status variables &lt;code&gt;$!&lt;/code&gt; and &lt;code&gt;$^E&lt;/code&gt; in the course of assembling its error messages. This means that a &lt;code&gt;$SIG{__DIE__}&lt;/code&gt; or &lt;code&gt;$SIG{__WARN__}&lt;/code&gt; handler can capture the error information held in those variables, if it is required to augment the error message, and if the code calling &lt;code&gt;Carp&lt;/code&gt; left useful values there. Of course, &lt;code&gt;Carp&lt;/code&gt; can't guarantee the latter.</source>
          <target state="translated">&lt;code&gt;Carp&lt;/code&gt; は、状態変数 &lt;code&gt;$!&lt;/code&gt; を壊さないように注意します。そして、 &lt;code&gt;$^E&lt;/code&gt; のエラーメッセージを組み立てるのコースインチつまり、 &lt;code&gt;$SIG{__DIE__}&lt;/code&gt; または &lt;code&gt;$SIG{__WARN__}&lt;/code&gt; ハンドラーは、エラーメッセージを補強する必要がある場合、および &lt;code&gt;Carp&lt;/code&gt; を呼び出すコードがそこに有用な値を残した場合、これらの変数に保持されているエラー情報をキャプチャできます。もちろん、 &lt;code&gt;Carp&lt;/code&gt; は後者を保証することはできません。</target>
        </trans-unit>
        <trans-unit id="31407ed8968a4b0da65b3add4e603dd893f9f016" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Class::Accessor&lt;/code&gt; does a lot less than &lt;code&gt;Moose&lt;/code&gt; , and is a nice alternative if you find &lt;code&gt;Moose&lt;/code&gt; overwhelming. It's been around a long time and is well battle-tested. It also has a minimal &lt;code&gt;Moose&lt;/code&gt; compatibility mode which makes moving from &lt;code&gt;Class::Accessor&lt;/code&gt; to &lt;code&gt;Moose&lt;/code&gt; easy.</source>
          <target state="translated">&lt;code&gt;Class::Accessor&lt;/code&gt; は &lt;code&gt;Moose&lt;/code&gt; よりもはるかに少ない機能であり、 &lt;code&gt;Moose&lt;/code&gt; が圧倒的であることがわかった場合の優れた代替手段です。長い間使用されており、十分にテストされています。また、 &lt;code&gt;Class::Accessor&lt;/code&gt; から &lt;code&gt;Moose&lt;/code&gt; への移行を容易にする最小限の &lt;code&gt;Moose&lt;/code&gt; 互換モードも備えています。</target>
        </trans-unit>
        <trans-unit id="2ed06455b79951b5989783965750af6e61e64a7a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Class::Accessor&lt;/code&gt; does a lot less than &lt;code&gt;Moose&lt;/code&gt;, and is a nice alternative if you find &lt;code&gt;Moose&lt;/code&gt; overwhelming. It's been around a long time and is well battle-tested. It also has a minimal &lt;code&gt;Moose&lt;/code&gt; compatibility mode which makes moving from &lt;code&gt;Class::Accessor&lt;/code&gt; to &lt;code&gt;Moose&lt;/code&gt; easy.</source>
          <target state="translated">&lt;code&gt;Class::Accessor&lt;/code&gt; は &lt;code&gt;Moose&lt;/code&gt; よりもはるかに少ない動作をし、 &lt;code&gt;Moose&lt;/code&gt; が圧倒される場合は優れた代替手段です。それは長い間あり、よく戦いでテストされています。また、最小限の &lt;code&gt;Moose&lt;/code&gt; 互換モードがあり、 &lt;code&gt;Class::Accessor&lt;/code&gt; から &lt;code&gt;Moose&lt;/code&gt; への移行が簡単になります。</target>
        </trans-unit>
        <trans-unit id="b2cba69d28533f7c1088e666571bd50781732c27" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Class::Struct&lt;/code&gt; can create your class at compile time. The main reason for doing this is obvious, so your class acts like every other class in Perl. Creating your class at compile time will make the order of events similar to using any other class ( or Perl module ).</source>
          <target state="translated">&lt;code&gt;Class::Struct&lt;/code&gt; は、コンパイル時にクラスを作成できます。これを行う主な理由は明白なので、クラスはPerlの他のすべてのクラスと同じように動作します。コンパイル時にクラスを作成すると、他のクラス（またはPerlモジュール）を使用する場合と同様に、イベントの順序が決まります。</target>
        </trans-unit>
        <trans-unit id="3b9402d618b4323955fa7151700c933e1781cb7e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Class::Struct&lt;/code&gt; exports a single function, &lt;code&gt;struct&lt;/code&gt; . Given a list of element names and types, and optionally a class name, &lt;code&gt;struct&lt;/code&gt; creates a Perl 5 class that implements a &quot;struct-like&quot; data structure.</source>
          <target state="translated">&lt;code&gt;Class::Struct&lt;/code&gt; 、単一の関数をエクスポート &lt;code&gt;struct&lt;/code&gt; 。要素名とタイプのリスト、およびオプションでクラス名を指定すると、 &lt;code&gt;struct&lt;/code&gt; は「構造体のような」データ構造を実装するPerl 5クラスを作成します。</target>
        </trans-unit>
        <trans-unit id="6128e2c2989693cb970e5b32a9cb78fbca30494c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Class::Struct&lt;/code&gt; exports a single function, &lt;code&gt;struct&lt;/code&gt;. Given a list of element names and types, and optionally a class name, &lt;code&gt;struct&lt;/code&gt; creates a Perl 5 class that implements a &quot;struct-like&quot; data structure.</source>
          <target state="translated">&lt;code&gt;Class::Struct&lt;/code&gt; 、単一の関数をエクスポート &lt;code&gt;struct&lt;/code&gt; 。要素名とタイプのリスト、およびオプションでクラス名を指定すると、 &lt;code&gt;struct&lt;/code&gt; は「構造体のような」データ構造を実装するPerl5クラスを作成します。</target>
        </trans-unit>
        <trans-unit id="89fc00057d2a2d9fb02cae29f782ec7d03780bcf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Class::Tiny&lt;/code&gt; is the absolute minimal option. It has no dependencies, and almost no syntax to learn. It's a good option for a super minimal environment and for throwing something together quickly without having to worry about details.</source>
          <target state="translated">&lt;code&gt;Class::Tiny&lt;/code&gt; は、最小限のオプションです。依存関係はなく、習得する構文はほとんどありません。これは、非常に最小限の環境で、詳細を気にせずに何かをすばやくまとめるのに適したオプションです。</target>
        </trans-unit>
        <trans-unit id="55d6cd736729017df34ed5101a1c462435573300" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Compress::Raw::Bzip2&lt;/code&gt; provides an interface to the in-memory compression/uncompression functions from the bzip2 compression library.</source>
          <target state="translated">&lt;code&gt;Compress::Raw::Bzip2&lt;/code&gt; は、bzip2圧縮ライブラリからのメモリ内圧縮/解凍関数へのインターフェースを提供します。</target>
        </trans-unit>
        <trans-unit id="8e25abe307925b3d64f288e9dfd33b8855c649d5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Configure&lt;/code&gt; notes: This function is called &lt;code&gt;'Perl_signbit'&lt;/code&gt; instead of a plain &lt;code&gt;'signbit'&lt;/code&gt; because it is easy to imagine a system having a &lt;code&gt;signbit()&lt;/code&gt; function or macro that doesn't happen to work with our particular choice of NVs. We shouldn't just re-&lt;code&gt;#define&lt;/code&gt;&lt;code&gt;signbit&lt;/code&gt; as &lt;code&gt;Perl_signbit&lt;/code&gt; and expect the standard system headers to be happy. Also, this is a no-context function (no &lt;code&gt;pTHX_&lt;/code&gt;) because &lt;code&gt;Perl_signbit()&lt;/code&gt; is usually re-&lt;code&gt;#defined&lt;/code&gt; in</source>
          <target state="translated">&lt;code&gt;Configure&lt;/code&gt; ノート：この関数が呼び出された &lt;code&gt;'Perl_signbit'&lt;/code&gt; ではなく、プレーンの &lt;code&gt;'signbit'&lt;/code&gt; それが有するシステムは容易に想像できるので &lt;code&gt;signbit()&lt;/code&gt; のNVの私達の特定の選択で動作するように起こらない関数やマクロを。私達はちょうど再いけない &lt;code&gt;#define&lt;/code&gt; &lt;code&gt;signbit&lt;/code&gt; として &lt;code&gt;Perl_signbit&lt;/code&gt; と標準のシステムヘッダが幸せになることを期待しています。また、 &lt;code&gt;Perl_signbit()&lt;/code&gt; は通常、で再 &lt;code&gt;#defined&lt;/code&gt; れるため、これはコンテキストなしの関数（ &lt;code&gt;pTHX_&lt;/code&gt; なし）です。</target>
        </trans-unit>
        <trans-unit id="a8725a0495b722c17e9e3c10477740f81c48584e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;CvGV($cv)&lt;/code&gt; return one of the globs associated to a subroutine reference $cv.</source>
          <target state="translated">&lt;code&gt;CvGV($cv)&lt;/code&gt; 、サブルーチン参照$ cvに関連付けられたグロブの1つを返します。</target>
        </trans-unit>
        <trans-unit id="bc356104ce9d43ddd133f13ae30f341cf9800ab3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;DATA&lt;/code&gt; may be a reference to a list or a list and must be encoded by the caller to octets of whatever encoding is required, e.g. by using the Encode module's &lt;code&gt;encode()&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;DATA&lt;/code&gt; はリストまたはリストへの参照である可能性があり、呼び出し元が必要なエンコードのオクテットにエンコードする必要があります。たとえば、Encodeモジュールの &lt;code&gt;encode()&lt;/code&gt; 関数を使用します。</target>
        </trans-unit>
        <trans-unit id="57151d3af80dd94fc75fda2ca627813262903784" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;DATA&lt;/code&gt; may be a reference to a list or a list. If specified the contents of &lt;code&gt;DATA&lt;/code&gt; and a termination string &lt;code&gt;&quot;.\r\n&quot;&lt;/code&gt; is sent to the server. And the result will be true if the data was accepted.</source>
          <target state="translated">&lt;code&gt;DATA&lt;/code&gt; は、リストまたはリストへの参照です。 &lt;code&gt;DATA&lt;/code&gt; の内容と終了文字列 &lt;code&gt;&quot;.\r\n&quot;&lt;/code&gt; を指定すると、サーバーに送信されます。そして、データが受け入れられた場合、結果は真になります。</target>
        </trans-unit>
        <trans-unit id="0c191c78cba51d1e084cbee694f95f10d6ca9950" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;DB::DB&lt;/code&gt; , &lt;code&gt;DB::sub&lt;/code&gt; , &lt;code&gt;DB::lsub&lt;/code&gt; , &lt;code&gt;DB::goto&lt;/code&gt; , &lt;code&gt;DB::postponed&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;DB::DB&lt;/code&gt; 、 &lt;code&gt;DB::sub&lt;/code&gt; 、 &lt;code&gt;DB::lsub&lt;/code&gt; 、 &lt;code&gt;DB::goto&lt;/code&gt; 、 &lt;code&gt;DB::postponed&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="28d060cd64afa020a95e200af7664ef2df9db237" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;DB::DB&lt;/code&gt;, &lt;code&gt;DB::sub&lt;/code&gt;, &lt;code&gt;DB::lsub&lt;/code&gt;, &lt;code&gt;DB::goto&lt;/code&gt;, &lt;code&gt;DB::postponed&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;DB::DB&lt;/code&gt;, &lt;code&gt;DB::sub&lt;/code&gt;, &lt;code&gt;DB::lsub&lt;/code&gt;, &lt;code&gt;DB::goto&lt;/code&gt;, &lt;code&gt;DB::postponed&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="075e4f0cb45fda33f92fa95b6e40a79ce5b91179" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;DB::dump_trace(skip[,count])&lt;/code&gt; skips the specified number of frames and returns a list containing information about the calling frames (all of them, if &lt;code&gt;count&lt;/code&gt; is missing). Each entry is reference to a hash with keys &lt;code&gt;context&lt;/code&gt; (either &lt;code&gt;.&lt;/code&gt;, &lt;code&gt;$&lt;/code&gt; , or &lt;code&gt;@&lt;/code&gt; ), &lt;code&gt;&lt;a href=&quot;functions/sub&quot;&gt;sub&lt;/a&gt;&lt;/code&gt; (subroutine name, or info about &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt;), &lt;code&gt;args&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; or a reference to an array), &lt;code&gt;file&lt;/code&gt; , and &lt;code&gt;line&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;DB::dump_trace(skip[,count])&lt;/code&gt; は、指定された数のフレームをスキップし、呼び出しフレーム（ &lt;code&gt;count&lt;/code&gt; がない場合はすべて）に関する情報を含むリストを返します。各エントリは、キー &lt;code&gt;context&lt;/code&gt; （ &lt;code&gt;.&lt;/code&gt; 、 &lt;code&gt;$&lt;/code&gt; 、または &lt;code&gt;@&lt;/code&gt; ）、 &lt;code&gt;&lt;a href=&quot;functions/sub&quot;&gt;sub&lt;/a&gt;&lt;/code&gt; （サブルーチン名、または &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; に関する情報）、 &lt;code&gt;args&lt;/code&gt; （ &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; または配列への参照）、 &lt;code&gt;file&lt;/code&gt; 、および &lt;code&gt;line&lt;/code&gt; を持つハッシュへの参照です。</target>
        </trans-unit>
        <trans-unit id="f92f255eaa1ee5f278ccb95ad326d8f6807dc12e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;DB::dump_trace(skip[,count])&lt;/code&gt; skips the specified number of frames and returns a list containing information about the calling frames (all of them, if &lt;code&gt;count&lt;/code&gt; is missing). Each entry is reference to a hash with keys &lt;code&gt;context&lt;/code&gt; (either &lt;code&gt;.&lt;/code&gt;, &lt;code&gt;$&lt;/code&gt;, or &lt;code&gt;@&lt;/code&gt;), &lt;code&gt;sub&lt;/code&gt; (subroutine name, or info about &lt;code&gt;eval&lt;/code&gt;), &lt;code&gt;args&lt;/code&gt; (&lt;code&gt;undef&lt;/code&gt; or a reference to an array), &lt;code&gt;file&lt;/code&gt;, and &lt;code&gt;line&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;DB::dump_trace(skip[,count])&lt;/code&gt; は、指定された数のフレームをスキップし、呼び出し元のフレームに関する情報を含むリストを返します（ &lt;code&gt;count&lt;/code&gt; が欠落している場合はすべて）。各エントリは、キー &lt;code&gt;context&lt;/code&gt; （ &lt;code&gt;.&lt;/code&gt; 、 &lt;code&gt;$&lt;/code&gt; 、または &lt;code&gt;@&lt;/code&gt; ）、 &lt;code&gt;sub&lt;/code&gt; （サブルーチン名、または &lt;code&gt;eval&lt;/code&gt; に関する情報）、 &lt;code&gt;args&lt;/code&gt; （ &lt;code&gt;undef&lt;/code&gt; または配列への参照）、 &lt;code&gt;file&lt;/code&gt; 、および &lt;code&gt;line&lt;/code&gt; を持つハッシュへの参照です。</target>
        </trans-unit>
        <trans-unit id="d1b69e03ccf8a3fb70092f79bbc9b211347aa723" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;DB::print_trace(FH, skip[, count[, short]])&lt;/code&gt; prints formatted info about caller frames. The last two functions may be convenient as arguments to &lt;code&gt;&amp;lt;&lt;/code&gt; , &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; commands.</source>
          <target state="translated">&lt;code&gt;DB::print_trace(FH, skip[, count[, short]])&lt;/code&gt; は、呼び出し元フレームに関するフォーマットされた情報を出力します。最後の2つの関数は、 &lt;code&gt;&amp;lt;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; コマンドの引数として便利です。</target>
        </trans-unit>
        <trans-unit id="d87598575b8bfff54dd62bf079fe6ab772e7dc5b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;DB::print_trace(FH, skip[, count[, short]])&lt;/code&gt; prints formatted info about caller frames. The last two functions may be convenient as arguments to &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; commands.</source>
          <target state="translated">&lt;code&gt;DB::print_trace(FH, skip[, count[, short]])&lt;/code&gt; は、呼び出し元のフレームに関するフォーマットされた情報を出力します。最後の2つの関数は、 &lt;code&gt;&amp;lt;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; コマンドの引数として便利な場合があります。</target>
        </trans-unit>
        <trans-unit id="bc91551827219e284d49468303a5e0aa60fb1666" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;DBL_DIG&lt;/code&gt;&lt;code&gt;DBL_EPSILON&lt;/code&gt;&lt;code&gt;DBL_MANT_DIG&lt;/code&gt;&lt;code&gt;DBL_MAX&lt;/code&gt;&lt;code&gt;DBL_MAX_10_EXP&lt;/code&gt;&lt;code&gt;DBL_MAX_EXP&lt;/code&gt;&lt;code&gt;DBL_MIN&lt;/code&gt;&lt;code&gt;DBL_MIN_10_EXP&lt;/code&gt;&lt;code&gt;DBL_MIN_EXP&lt;/code&gt;&lt;code&gt;FLT_DIG&lt;/code&gt;&lt;code&gt;FLT_EPSILON&lt;/code&gt;&lt;code&gt;FLT_MANT_DIG&lt;/code&gt;&lt;code&gt;FLT_MAX&lt;/code&gt;&lt;code&gt;FLT_MAX_10_EXP&lt;/code&gt;&lt;code&gt;FLT_MAX_EXP&lt;/code&gt;&lt;code&gt;FLT_MIN&lt;/code&gt;&lt;code&gt;FLT_MIN_10_EXP&lt;/code&gt;&lt;code&gt;FLT_MIN_EXP&lt;/code&gt;&lt;code&gt;FLT_RADIX&lt;/code&gt;&lt;code&gt;FLT_ROUNDS&lt;/code&gt;&lt;code&gt;LDBL_DIG&lt;/code&gt;&lt;code&gt;LDBL_EPSILON&lt;/code&gt;&lt;code&gt;LDBL_MANT_DIG&lt;/code&gt;&lt;code&gt;LDBL_MAX&lt;/code&gt;&lt;code&gt;LDBL_MAX_10_EXP&lt;/code&gt;&lt;code&gt;LDBL_MAX_EXP&lt;/code&gt;&lt;code&gt;LDBL_MIN&lt;/code&gt;&lt;code&gt;LDBL_MIN_10_EXP&lt;/code&gt;&lt;code&gt;LDBL_MIN_EXP&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;DBL_DIG&lt;/code&gt;&lt;code&gt;DBL_EPSILON&lt;/code&gt;&lt;code&gt;DBL_MANT_DIG&lt;/code&gt;&lt;code&gt;DBL_MAX&lt;/code&gt;&lt;code&gt;DBL_MAX_10_EXP&lt;/code&gt;&lt;code&gt;DBL_MAX_EXP&lt;/code&gt;&lt;code&gt;DBL_MIN&lt;/code&gt;&lt;code&gt;DBL_MIN_10_EXP&lt;/code&gt;&lt;code&gt;DBL_MIN_EXP&lt;/code&gt;&lt;code&gt;FLT_DIG&lt;/code&gt;&lt;code&gt;FLT_EPSILON&lt;/code&gt;&lt;code&gt;FLT_MANT_DIG&lt;/code&gt;&lt;code&gt;FLT_MAX&lt;/code&gt;&lt;code&gt;FLT_MAX_10_EXP&lt;/code&gt;&lt;code&gt;FLT_MAX_EXP&lt;/code&gt;&lt;code&gt;FLT_MIN&lt;/code&gt;&lt;code&gt;FLT_MIN_10_EXP&lt;/code&gt;&lt;code&gt;FLT_MIN_EXP&lt;/code&gt;&lt;code&gt;FLT_RADIX&lt;/code&gt;&lt;code&gt;FLT_ROUNDS&lt;/code&gt;&lt;code&gt;LDBL_DIG&lt;/code&gt;&lt;code&gt;LDBL_EPSILON&lt;/code&gt;&lt;code&gt;LDBL_MANT_DIG&lt;/code&gt;&lt;code&gt;LDBL_MAX&lt;/code&gt;&lt;code&gt;LDBL_MAX_10_EXP&lt;/code&gt;&lt;code&gt;LDBL_MAX_EXP&lt;/code&gt;&lt;code&gt;LDBL_MIN&lt;/code&gt;&lt;code&gt;LDBL_MIN_10_EXP&lt;/code&gt;&lt;code&gt;LDBL_MIN_EXP&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="30808f1e9d3837ee2bd2822e88b40e6f0d7a334f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;DESTROY&lt;/code&gt;, &lt;code&gt;DOES&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;DESTROY&lt;/code&gt;, &lt;code&gt;DOES&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1b3719fb91a61fd372e24aedc14bb9ddcd95db3c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;DIRFEXT&lt;/code&gt; - the extension used for the directory file, &lt;code&gt;.dir&lt;/code&gt; everywhere but VMS, where it is &lt;code&gt;.sdbm_dir&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;DIRFEXT&lt;/code&gt; -ディレクトリファイルのために使用される拡張、 &lt;code&gt;.dir&lt;/code&gt; どこでもそれはあるVMS、 &lt;code&gt;.sdbm_dir&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f8830dc96e0d7a2f7d1b811d3fa4635420082057" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;DIRFEXT&lt;/code&gt; - the extension used for the directory file, &lt;code&gt;.dir&lt;/code&gt; everywhere but VMS, where it is &lt;code&gt;.sdbm_dir&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;DIRFEXT&lt;/code&gt; -ディレクトリファイルのために使用される拡張、 &lt;code&gt;.dir&lt;/code&gt; どこでもそれはあるVMS、 &lt;code&gt;.sdbm_dir&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3555867fff7bf3b3dfb31146dcde0447b537ad4b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;DOES&lt;/code&gt; and &lt;code&gt;isa&lt;/code&gt; are similar, in that if either is true, you know that the object or class on which you call the method can perform specific behavior. However, &lt;code&gt;DOES&lt;/code&gt; is different from &lt;code&gt;isa&lt;/code&gt; in that it does not care</source>
          <target state="translated">&lt;code&gt;DOES&lt;/code&gt; と &lt;code&gt;isa&lt;/code&gt; は似ていますが、どちらかがtrueの場合、メソッドを呼び出すオブジェクトまたはクラスが特定の動作を実行できることがわかります。ただし、 &lt;code&gt;DOES&lt;/code&gt; は &lt;code&gt;isa&lt;/code&gt; とは異なります。</target>
        </trans-unit>
        <trans-unit id="327aba9e69c6dc314afbb9d3770b24a3db484053" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;DOES&lt;/code&gt; checks if the object or class performs the role &lt;code&gt;ROLE&lt;/code&gt; . A role is a named group of specific behavior (often methods of particular names and signatures), similar to a class, but not necessarily a complete class by itself. For example, logging or serialization may be roles.</source>
          <target state="translated">&lt;code&gt;DOES&lt;/code&gt; は、オブジェクトまたはクラスがロール &lt;code&gt;ROLE&lt;/code&gt; を実行するかどうかを確認します。ロールは、クラスに似ていますが、特定の動作（多くの場合、特定の名前とシグニチャーのメソッド）の名前付きグループですが、必ずしもそれ自体が完全なクラスであるとは限りません。たとえば、ログ記録またはシリアル化が役割になる場合があります。</target>
        </trans-unit>
        <trans-unit id="02e89780034f6d05b29fbf9354bcce3b813bf1b4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;DOES&lt;/code&gt; checks if the object or class performs the role &lt;code&gt;ROLE&lt;/code&gt;. A role is a named group of specific behavior (often methods of particular names and signatures), similar to a class, but not necessarily a complete class by itself. For example, logging or serialization may be roles.</source>
          <target state="translated">&lt;code&gt;DOES&lt;/code&gt; オブジェクトまたはクラスを行う役割かどうかを確認する &lt;code&gt;ROLE&lt;/code&gt; 。ロールは、特定の動作（多くの場合、特定の名前と署名のメソッド）の名前付きグループであり、クラスに似ていますが、それ自体が完全なクラスである必要はありません。たとえば、ロギングまたはシリアル化が役割である場合があります。</target>
        </trans-unit>
        <trans-unit id="09ae5f8ffa73c825371cccb10b034527e0663899" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Data::Dumper&lt;/code&gt; cheats with CODE references. If a code reference is encountered in the structure being processed (and if you haven't set the &lt;code&gt;Deparse&lt;/code&gt; flag), an anonymous subroutine that contains the string '&quot;DUMMY&quot;' will be inserted in its place, and a warning will be printed if &lt;code&gt;Purity&lt;/code&gt; is set. You can &lt;code&gt;&lt;a href=&quot;../functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; the result, but bear in mind that the anonymous sub that gets created is just a placeholder. Someday, perl will have a switch to cache-on-demand the string representation of a compiled piece of code, I hope. If you have prior knowledge of all the code refs that your data structures are likely to have, you can use the &lt;code&gt;Seen&lt;/code&gt; method to pre-seed the internal reference table and make the dumped output point to them, instead. See &lt;a href=&quot;#EXAMPLES&quot;&gt;EXAMPLES&lt;/a&gt; above.</source>
          <target state="translated">&lt;code&gt;Data::Dumper&lt;/code&gt; はCODE参照でチートします。処理中の構造体でコード参照が検出された場合（および &lt;code&gt;Deparse&lt;/code&gt; フラグを設定していない場合）、文字列 '&quot;DUMMY&quot;'を含む匿名サブルーチンがその場所に挿入され、次の場合に警告が出力されます。 &lt;code&gt;Purity&lt;/code&gt; が設定されています。結果を &lt;code&gt;&lt;a href=&quot;../functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; できますが、作成される匿名のサブは単なるプレースホルダーであることを覚えておいてください。いつか、perlはコンパイルされたコードの文字列表現をキャッシュオンデマンドに切り替えるスイッチを持っていると思います。データ構造が持つ可能性が高いすべてのコード参照について事前に知識がある場合は、 &lt;code&gt;Seen&lt;/code&gt; を使用できます。代わりに、内部参照テーブルを事前シードし、ダンプされた出力がそれらを指すようにするメソッド。上記の&lt;a href=&quot;#EXAMPLES&quot;&gt;例を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="5a6f148ea8562b087e0f28490e5503072c364c58" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Data::Dumper&lt;/code&gt; cheats with CODE references. If a code reference is encountered in the structure being processed (and if you haven't set the &lt;code&gt;Deparse&lt;/code&gt; flag), an anonymous subroutine that contains the string '&quot;DUMMY&quot;' will be inserted in its place, and a warning will be printed if &lt;code&gt;Purity&lt;/code&gt; is set. You can &lt;code&gt;eval&lt;/code&gt; the result, but bear in mind that the anonymous sub that gets created is just a placeholder. Even using the &lt;code&gt;Deparse&lt;/code&gt; flag will in some cases produce results that behave differently after being passed to &lt;code&gt;eval&lt;/code&gt;; see the documentation for &lt;a href=&quot;B::Deparse&quot;&gt;B::Deparse&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Data::Dumper&lt;/code&gt; はCODE参照でチートします。処理中の構造体でコード参照が検出された場合（および &lt;code&gt;Deparse&lt;/code&gt; フラグを設定していない場合）、文字列 '&quot;DUMMY&quot;'を含む匿名サブルーチンがその場所に挿入され、次の場合に警告が出力されます。 &lt;code&gt;Purity&lt;/code&gt; が設定されています。結果を &lt;code&gt;eval&lt;/code&gt; することはできますが、作成される匿名のサブは単なるプレースホルダーであることに注意してください。 &lt;code&gt;Deparse&lt;/code&gt; フラグを使用しても、 &lt;code&gt;eval&lt;/code&gt; に渡された後の動作が異なる結果が生成される場合があります。&lt;a href=&quot;B::Deparse&quot;&gt;B :: Deparseの&lt;/a&gt;ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="112c6262b9b29bb95ce2b06c9288ae4abb8f9636" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Devel::DProf&lt;/code&gt; produces a special file, called</source>
          <target state="translated">&lt;code&gt;Devel::DProf&lt;/code&gt; は、</target>
        </trans-unit>
        <trans-unit id="a2c422f548b824872d70a71251455f906761cf0e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Devel::FastProf&lt;/code&gt; is another Perl line profiler. This was written with a view to getting a faster line profiler, than is possible with for example &lt;code&gt;Devel::SmallProf&lt;/code&gt; , because it's written in &lt;code&gt;C&lt;/code&gt; . To use &lt;code&gt;Devel::FastProf&lt;/code&gt; , supply the &lt;code&gt;-d&lt;/code&gt; argument to Perl:</source>
          <target state="translated">&lt;code&gt;Devel::FastProf&lt;/code&gt; は、別のPerlラインプロファイラーです。これは &lt;code&gt;C&lt;/code&gt; で記述されているため、たとえば &lt;code&gt;Devel::SmallProf&lt;/code&gt; で可能なものよりも高速なラインプロファイラーを取得するために記述されています。 &lt;code&gt;Devel::FastProf&lt;/code&gt; を使用するには、Perlに &lt;code&gt;-d&lt;/code&gt; 引数を指定します。</target>
        </trans-unit>
        <trans-unit id="93a21cfa54237cffc3c68d2ee1376853e23ef5ed" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Devel::FastProf&lt;/code&gt; is another Perl line profiler. This was written with a view to getting a faster line profiler, than is possible with for example &lt;code&gt;Devel::SmallProf&lt;/code&gt;, because it's written in &lt;code&gt;C&lt;/code&gt;. To use &lt;code&gt;Devel::FastProf&lt;/code&gt;, supply the &lt;code&gt;-d&lt;/code&gt; argument to Perl:</source>
          <target state="translated">&lt;code&gt;Devel::FastProf&lt;/code&gt; は、もう1つのPerlラインプロファイラーです。これは、 &lt;code&gt;C&lt;/code&gt; で記述されているため、たとえば &lt;code&gt;Devel::SmallProf&lt;/code&gt; で可能であるよりも高速なラインプロファイラーを取得することを目的として作成されました。 &lt;code&gt;Devel::FastProf&lt;/code&gt; を使用するには、Perlに &lt;code&gt;-d&lt;/code&gt; 引数を指定します。</target>
        </trans-unit>
        <trans-unit id="40154257a8b82c38bcca59cdc00939ace9931afc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Devel::FastProf&lt;/code&gt; writes statistics to the file</source>
          <target state="translated">&lt;code&gt;Devel::FastProf&lt;/code&gt; はファイルに統計を書き込みます</target>
        </trans-unit>
        <trans-unit id="29ccdf5a561326d39cd32316fbd7ceef38fc88e5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Devel::NYTProf&lt;/code&gt; is the &lt;b&gt;next generation&lt;/b&gt; of Perl code profiler, fixing many shortcomings in other tools and implementing many cool features. First of all it can be used as either a</source>
          <target state="translated">&lt;code&gt;Devel::NYTProf&lt;/code&gt; は&lt;b&gt;次世代&lt;/b&gt;のPerlコードプロファイラーであり、他のツールの多くの欠点を修正し、多くの優れた機能を実装しています。まず、それはどちらかとして使用することができます</target>
        </trans-unit>
        <trans-unit id="c5797923d69aa381e05603f605d5a631ec973775" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Devel::PPPort&lt;/code&gt; contains two functions, &lt;code&gt;WriteFile&lt;/code&gt; and &lt;code&gt;GetFileContents&lt;/code&gt; . &lt;code&gt;WriteFile&lt;/code&gt; 's only purpose is to write the</source>
          <target state="translated">&lt;code&gt;Devel::PPPort&lt;/code&gt; は、 &lt;code&gt;WriteFile&lt;/code&gt; と &lt;code&gt;GetFileContents&lt;/code&gt; の 2つの関数が含まれています。 &lt;code&gt;WriteFile&lt;/code&gt; の唯一の目的は、</target>
        </trans-unit>
        <trans-unit id="05817954c252e4cc395cefaad029cdd93ea5fb02" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Devel::PPPort&lt;/code&gt; contains two functions, &lt;code&gt;WriteFile&lt;/code&gt; and &lt;code&gt;GetFileContents&lt;/code&gt;. &lt;code&gt;WriteFile&lt;/code&gt;'s only purpose is to write the</source>
          <target state="translated">&lt;code&gt;Devel::PPPort&lt;/code&gt; は、 &lt;code&gt;WriteFile&lt;/code&gt; と &lt;code&gt;GetFileContents&lt;/code&gt; の2つの関数が含まれています。 &lt;code&gt;WriteFile&lt;/code&gt; の唯一の目的は、</target>
        </trans-unit>
        <trans-unit id="018354f48ba5b78747f51bd5947259fe8ee3715c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Devel::PPPort&lt;/code&gt; generates a C header file</source>
          <target state="translated">&lt;code&gt;Devel::PPPort&lt;/code&gt; はCヘッダーファイルを生成します</target>
        </trans-unit>
        <trans-unit id="a06bb951efbe313b213cf2bad4e278dbcedc8fd6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Devel::Profiler&lt;/code&gt; generates a tmon.out file which is compatible with the &lt;code&gt;dprofpp&lt;/code&gt; program, thus saving the construction of a dedicated statistics reader program. &lt;code&gt;dprofpp&lt;/code&gt; usage is therefore identical to the above example.</source>
          <target state="translated">&lt;code&gt;Devel::Profiler&lt;/code&gt; は、 &lt;code&gt;dprofpp&lt;/code&gt; プログラムと互換性のあるtmon.outファイルを生成するため、専用の統計リーダープログラムの構築を節約できます。したがって、 &lt;code&gt;dprofpp&lt;/code&gt; の使用法は上記の例と同じです。</target>
        </trans-unit>
        <trans-unit id="4e8fab08ab7193519be5833e52c406d22be75acb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Devel::SmallProf&lt;/code&gt; writes it's output into a file called</source>
          <target state="translated">&lt;code&gt;Devel::SmallProf&lt;/code&gt; は、その出力を次のファイルに書き込みます。</target>
        </trans-unit>
        <trans-unit id="0825c0fbe9eac3bd9846a860cced812e78501c17" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Dump&lt;/code&gt; , &lt;code&gt;mstat&lt;/code&gt; , &lt;code&gt;DeadCode&lt;/code&gt; , &lt;code&gt;DumpArray&lt;/code&gt; , &lt;code&gt;DumpWithOP&lt;/code&gt; and &lt;code&gt;DumpProg&lt;/code&gt; , &lt;code&gt;fill_mstats&lt;/code&gt; , &lt;code&gt;mstats_fillhash&lt;/code&gt; , &lt;code&gt;mstats2hash&lt;/code&gt; by default. Additionally available &lt;code&gt;SvREFCNT&lt;/code&gt; , &lt;code&gt;SvREFCNT_inc&lt;/code&gt; and &lt;code&gt;SvREFCNT_dec&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;Dump&lt;/code&gt; 、 &lt;code&gt;mstat&lt;/code&gt; 、 &lt;code&gt;DeadCode&lt;/code&gt; 、 &lt;code&gt;DumpArray&lt;/code&gt; 、 &lt;code&gt;DumpWithOP&lt;/code&gt; および &lt;code&gt;DumpProg&lt;/code&gt; 、デフォルトで &lt;code&gt;fill_mstats&lt;/code&gt; 、 &lt;code&gt;mstats_fillhash&lt;/code&gt; 、 &lt;code&gt;mstats2hash&lt;/code&gt; 。追加で利用可能な &lt;code&gt;SvREFCNT&lt;/code&gt; 、 &lt;code&gt;SvREFCNT_inc&lt;/code&gt; および &lt;code&gt;SvREFCNT_dec&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1f766e42be61707e945a52866ac11ac451385573" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Dump&lt;/code&gt;, &lt;code&gt;mstat&lt;/code&gt;, &lt;code&gt;DeadCode&lt;/code&gt;, &lt;code&gt;DumpArray&lt;/code&gt;, &lt;code&gt;DumpWithOP&lt;/code&gt; and &lt;code&gt;DumpProg&lt;/code&gt;, &lt;code&gt;fill_mstats&lt;/code&gt;, &lt;code&gt;mstats_fillhash&lt;/code&gt;, &lt;code&gt;mstats2hash&lt;/code&gt; by default. Additionally available &lt;code&gt;SvREFCNT&lt;/code&gt;, &lt;code&gt;SvREFCNT_inc&lt;/code&gt; and &lt;code&gt;SvREFCNT_dec&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Dump&lt;/code&gt; &lt;code&gt;mstat&lt;/code&gt; 、Dump、mstat、 &lt;code&gt;DeadCode&lt;/code&gt; 、 &lt;code&gt;DumpArray&lt;/code&gt; 、 &lt;code&gt;DumpWithOP&lt;/code&gt; および &lt;code&gt;DumpProg&lt;/code&gt; 、 &lt;code&gt;fill_mstats&lt;/code&gt; 、 &lt;code&gt;mstats_fillhash&lt;/code&gt; 、 &lt;code&gt;mstats2hash&lt;/code&gt; 。さらに利用可能な &lt;code&gt;SvREFCNT&lt;/code&gt; 、 &lt;code&gt;SvREFCNT_inc&lt;/code&gt; および &lt;code&gt;SvREFCNT_dec&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d9c7ca6f8b76a10f9d5318c6941ff36f70c99beb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Dup&lt;/code&gt; uses &lt;code&gt;Getarg&lt;/code&gt; to retrieve the argument originally passed to &lt;code&gt;Pushed&lt;/code&gt; , so you must implement this function if your layer has an extra argument to &lt;code&gt;Pushed&lt;/code&gt; and will ever be &lt;code&gt;Dup&lt;/code&gt; ed.</source>
          <target state="translated">&lt;code&gt;Dup&lt;/code&gt; 使用しています &lt;code&gt;Getarg&lt;/code&gt; 元々に渡される引数取得するために &lt;code&gt;Pushed&lt;/code&gt; 、あなたの層が余分に引数を持っている場合は、この機能を実装する必要がありますので、 &lt;code&gt;Pushed&lt;/code&gt; して、これまでとなります &lt;code&gt;Dup&lt;/code&gt; エド。</target>
        </trans-unit>
        <trans-unit id="13c347aae10a04199dba573c1a7c3ccb7409e817" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Dup&lt;/code&gt; uses &lt;code&gt;Getarg&lt;/code&gt; to retrieve the argument originally passed to &lt;code&gt;Pushed&lt;/code&gt;, so you must implement this function if your layer has an extra argument to &lt;code&gt;Pushed&lt;/code&gt; and will ever be &lt;code&gt;Dup&lt;/code&gt;ed.</source>
          <target state="translated">&lt;code&gt;Dup&lt;/code&gt; 使用しています &lt;code&gt;Getarg&lt;/code&gt; 元々に渡される引数取得するために &lt;code&gt;Pushed&lt;/code&gt; 、あなたの層が余分に引数を持っている場合は、この機能を実装する必要がありますので、 &lt;code&gt;Pushed&lt;/code&gt; して、これまでとなります &lt;code&gt;Dup&lt;/code&gt; エド。</target>
        </trans-unit>
        <trans-unit id="f921a8451ac3554bc33c1ee5ed3ce77052954dfd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;E&amp;lt;escape&amp;gt;&lt;/code&gt; -- a character escape</source>
          <target state="translated">&lt;code&gt;E&amp;lt;escape&amp;gt;&lt;/code&gt; -文字エスケープ</target>
        </trans-unit>
        <trans-unit id="1dbfb1d06fc3039522251007d62aa0c69bf6fa5e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;E&amp;lt;gt&amp;gt;&lt;/code&gt; -- a literal &amp;gt; (greater than)</source>
          <target state="translated">&lt;code&gt;E&amp;lt;gt&amp;gt;&lt;/code&gt; -リテラル&amp;gt;（より大きい）</target>
        </trans-unit>
        <trans-unit id="9ab5736f8b7db61936bca7cf554720a007684208" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;E&amp;lt;lt&amp;gt;&lt;/code&gt; -- a literal &amp;lt; (less than)</source>
          <target state="translated">&lt;code&gt;E&amp;lt;lt&amp;gt;&lt;/code&gt; -リテラル&amp;lt;（より小さい）</target>
        </trans-unit>
        <trans-unit id="3fd01da0fa74c94e7d191b89b539691222f4b42b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;E&amp;lt;sol&amp;gt;&lt;/code&gt; -- a literal / (</source>
          <target state="translated">&lt;code&gt;E&amp;lt;sol&amp;gt;&lt;/code&gt; -リテラル/（</target>
        </trans-unit>
        <trans-unit id="3d6f8bc422c538eb3aeae22e52038748fa18df75" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;E&amp;lt;verbar&amp;gt;&lt;/code&gt; -- a literal | (</source>
          <target state="translated">&lt;code&gt;E&amp;lt;verbar&amp;gt;&lt;/code&gt; -リテラル| （</target>
        </trans-unit>
        <trans-unit id="cf0f76c73d09691fd92de4db3ba41dd7d0cb9322" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;E2BIG&lt;/code&gt;&lt;code&gt;EACCES&lt;/code&gt;&lt;code&gt;EADDRINUSE&lt;/code&gt;&lt;code&gt;EADDRNOTAVAIL&lt;/code&gt;&lt;code&gt;EAFNOSUPPORT&lt;/code&gt;&lt;code&gt;EAGAIN&lt;/code&gt;&lt;code&gt;EALREADY&lt;/code&gt;&lt;code&gt;EBADF&lt;/code&gt;&lt;code&gt;EBADMSG&lt;/code&gt;&lt;code&gt;EBUSY&lt;/code&gt;&lt;code&gt;ECANCELED&lt;/code&gt;&lt;code&gt;ECHILD&lt;/code&gt;&lt;code&gt;ECONNABORTED&lt;/code&gt;&lt;code&gt;ECONNREFUSED&lt;/code&gt;&lt;code&gt;ECONNRESET&lt;/code&gt;&lt;code&gt;EDEADLK&lt;/code&gt;&lt;code&gt;EDESTADDRREQ&lt;/code&gt;&lt;code&gt;EDOM&lt;/code&gt;&lt;code&gt;EDQUOT&lt;/code&gt;&lt;code&gt;EEXIST&lt;/code&gt;&lt;code&gt;EFAULT&lt;/code&gt;&lt;code&gt;EFBIG&lt;/code&gt;&lt;code&gt;EHOSTDOWN&lt;/code&gt;&lt;code&gt;EHOSTUNREACH&lt;/code&gt;&lt;code&gt;EIDRM&lt;/code&gt;&lt;code&gt;EILSEQ&lt;/code&gt;&lt;code&gt;EINPROGRESS&lt;/code&gt;&lt;code&gt;EINTR&lt;/code&gt;&lt;code&gt;EINVAL&lt;/code&gt;&lt;code&gt;EIO&lt;/code&gt;&lt;code&gt;EISCONN&lt;/code&gt;&lt;code&gt;EISDIR&lt;/code&gt;&lt;code&gt;ELOOP&lt;/code&gt;&lt;code&gt;EMFILE&lt;/code&gt;&lt;code&gt;EMLINK&lt;/code&gt;&lt;code&gt;EMSGSIZE&lt;/code&gt;&lt;code&gt;ENAMETOOLONG&lt;/code&gt;&lt;code&gt;ENETDOWN&lt;/code&gt;&lt;code&gt;ENETRESET&lt;/code&gt;&lt;code&gt;ENETUNREACH&lt;/code&gt;&lt;code&gt;ENFILE&lt;/code&gt;&lt;code&gt;ENOBUFS&lt;/code&gt;&lt;code&gt;ENODATA&lt;/code&gt;&lt;code&gt;ENODEV&lt;/code&gt;&lt;code&gt;ENOENT&lt;/code&gt;&lt;code&gt;ENOEXEC&lt;/code&gt;&lt;code&gt;ENOLCK&lt;/code&gt;&lt;code&gt;ENOLINK&lt;/code&gt;&lt;code&gt;ENOMEM&lt;/code&gt;&lt;code&gt;ENOMSG&lt;/code&gt;&lt;code&gt;ENOPROTOOPT&lt;/code&gt;&lt;code&gt;ENOSPC&lt;/code&gt;&lt;code&gt;ENOSR&lt;/code&gt;&lt;code&gt;ENOSTR&lt;/code&gt;&lt;code&gt;ENOSYS&lt;/code&gt;&lt;code&gt;ENOTBLK&lt;/code&gt;&lt;code&gt;ENOTCONN&lt;/code&gt;&lt;code&gt;ENOTDIR&lt;/code&gt;&lt;code&gt;ENOTEMPTY&lt;/code&gt;&lt;code&gt;ENOTRECOVERABLE&lt;/code&gt;&lt;code&gt;ENOTSOCK&lt;/code&gt;&lt;code&gt;ENOTSUP&lt;/code&gt;&lt;code&gt;ENOTTY&lt;/code&gt;&lt;code&gt;ENXIO&lt;/code&gt;&lt;code&gt;EOPNOTSUPP&lt;/code&gt;&lt;code&gt;EOTHER&lt;/code&gt;&lt;code&gt;EOVERFLOW&lt;/code&gt;&lt;code&gt;EOWNERDEAD&lt;/code&gt;&lt;code&gt;EPERM&lt;/code&gt;&lt;code&gt;EPFNOSUPPORT&lt;/code&gt;&lt;code&gt;EPIPE&lt;/code&gt;&lt;code&gt;EPROCLIM&lt;/code&gt;&lt;code&gt;EPROTO&lt;/code&gt;&lt;code&gt;EPROTONOSUPPORT&lt;/code&gt;&lt;code&gt;EPROTOTYPE&lt;/code&gt;&lt;code&gt;ERANGE&lt;/code&gt;&lt;code&gt;EREMOTE&lt;/code&gt;&lt;code&gt;ERESTART&lt;/code&gt;&lt;code&gt;EROFS&lt;/code&gt;&lt;code&gt;ESHUTDOWN&lt;/code&gt;&lt;code&gt;ESOCKTNOSUPPORT&lt;/code&gt;&lt;code&gt;ESPIPE&lt;/code&gt;&lt;code&gt;ESRCH&lt;/code&gt;&lt;code&gt;ESTALE&lt;/code&gt;&lt;code&gt;ETIME&lt;/code&gt;&lt;code&gt;ETIMEDOUT&lt;/code&gt;&lt;code&gt;ETOOMANYREFS&lt;/code&gt;&lt;code&gt;ETXTBSY&lt;/code&gt;&lt;code&gt;EUSERS&lt;/code&gt;&lt;code&gt;EWOULDBLOCK&lt;/code&gt;&lt;code&gt;EXDEV&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;E2BIG&lt;/code&gt;&lt;code&gt;EACCES&lt;/code&gt;&lt;code&gt;EADDRINUSE&lt;/code&gt;&lt;code&gt;EADDRNOTAVAIL&lt;/code&gt;&lt;code&gt;EAFNOSUPPORT&lt;/code&gt;&lt;code&gt;EAGAIN&lt;/code&gt;&lt;code&gt;EALREADY&lt;/code&gt;&lt;code&gt;EBADF&lt;/code&gt;&lt;code&gt;EBADMSG&lt;/code&gt;&lt;code&gt;EBUSY&lt;/code&gt;&lt;code&gt;ECANCELED&lt;/code&gt;&lt;code&gt;ECHILD&lt;/code&gt;&lt;code&gt;ECONNABORTED&lt;/code&gt;&lt;code&gt;ECONNREFUSED&lt;/code&gt;&lt;code&gt;ECONNRESET&lt;/code&gt;&lt;code&gt;EDEADLK&lt;/code&gt;&lt;code&gt;EDESTADDRREQ&lt;/code&gt;&lt;code&gt;EDOM&lt;/code&gt;&lt;code&gt;EDQUOT&lt;/code&gt;&lt;code&gt;EEXIST&lt;/code&gt;&lt;code&gt;EFAULT&lt;/code&gt;&lt;code&gt;EFBIG&lt;/code&gt;&lt;code&gt;EHOSTDOWN&lt;/code&gt;&lt;code&gt;EHOSTUNREACH&lt;/code&gt;&lt;code&gt;EIDRM&lt;/code&gt;&lt;code&gt;EILSEQ&lt;/code&gt;&lt;code&gt;EINPROGRESS&lt;/code&gt;&lt;code&gt;EINTR&lt;/code&gt;&lt;code&gt;EINVAL&lt;/code&gt;&lt;code&gt;EIO&lt;/code&gt;&lt;code&gt;EISCONN&lt;/code&gt;&lt;code&gt;EISDIR&lt;/code&gt;&lt;code&gt;ELOOP&lt;/code&gt;&lt;code&gt;EMFILE&lt;/code&gt;&lt;code&gt;EMLINK&lt;/code&gt;&lt;code&gt;EMSGSIZE&lt;/code&gt;&lt;code&gt;ENAMETOOLONG&lt;/code&gt;&lt;code&gt;ENETDOWN&lt;/code&gt;&lt;code&gt;ENETRESET&lt;/code&gt;&lt;code&gt;ENETUNREACH&lt;/code&gt;&lt;code&gt;ENFILE&lt;/code&gt;&lt;code&gt;ENOBUFS&lt;/code&gt;&lt;code&gt;ENODATA&lt;/code&gt;&lt;code&gt;ENODEV&lt;/code&gt;&lt;code&gt;ENOENT&lt;/code&gt;&lt;code&gt;ENOEXEC&lt;/code&gt;&lt;code&gt;ENOLCK&lt;/code&gt;&lt;code&gt;ENOLINK&lt;/code&gt;&lt;code&gt;ENOMEM&lt;/code&gt;&lt;code&gt;ENOMSG&lt;/code&gt;&lt;code&gt;ENOPROTOOPT&lt;/code&gt;&lt;code&gt;ENOSPC&lt;/code&gt;&lt;code&gt;ENOSR&lt;/code&gt;&lt;code&gt;ENOSTR&lt;/code&gt;&lt;code&gt;ENOSYS&lt;/code&gt;&lt;code&gt;ENOTBLK&lt;/code&gt;&lt;code&gt;ENOTCONN&lt;/code&gt;&lt;code&gt;ENOTDIR&lt;/code&gt;&lt;code&gt;ENOTEMPTY&lt;/code&gt;&lt;code&gt;ENOTRECOVERABLE&lt;/code&gt;&lt;code&gt;ENOTSOCK&lt;/code&gt;&lt;code&gt;ENOTSUP&lt;/code&gt;&lt;code&gt;ENOTTY&lt;/code&gt;&lt;code&gt;ENXIO&lt;/code&gt;&lt;code&gt;EOPNOTSUPP&lt;/code&gt;&lt;code&gt;EOTHER&lt;/code&gt;&lt;code&gt;EOVERFLOW&lt;/code&gt;&lt;code&gt;EOWNERDEAD&lt;/code&gt;&lt;code&gt;EPERM&lt;/code&gt;&lt;code&gt;EPFNOSUPPORT&lt;/code&gt;&lt;code&gt;EPIPE&lt;/code&gt;&lt;code&gt;EPROCLIM&lt;/code&gt;&lt;code&gt;EPROTO&lt;/code&gt;&lt;code&gt;EPROTONOSUPPORT&lt;/code&gt;&lt;code&gt;EPROTOTYPE&lt;/code&gt;&lt;code&gt;ERANGE&lt;/code&gt;&lt;code&gt;EREMOTE&lt;/code&gt;&lt;code&gt;ERESTART&lt;/code&gt;&lt;code&gt;EROFS&lt;/code&gt;&lt;code&gt;ESHUTDOWN&lt;/code&gt;&lt;code&gt;ESOCKTNOSUPPORT&lt;/code&gt;&lt;code&gt;ESPIPE&lt;/code&gt;&lt;code&gt;ESRCH&lt;/code&gt;&lt;code&gt;ESTALE&lt;/code&gt;&lt;code&gt;ETIME&lt;/code&gt;&lt;code&gt;ETIMEDOUT&lt;/code&gt;&lt;code&gt;ETOOMANYREFS&lt;/code&gt;&lt;code&gt;ETXTBSY&lt;/code&gt;&lt;code&gt;EUSERS&lt;/code&gt;&lt;code&gt;EWOULDBLOCK&lt;/code&gt;&lt;code&gt;EXDEV&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="066e414ca2cf611148c4eaa3ea046c8780dfdec3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ECHO&lt;/code&gt;&lt;code&gt;ECHOE&lt;/code&gt;&lt;code&gt;ECHOK&lt;/code&gt;&lt;code&gt;ECHONL&lt;/code&gt;&lt;code&gt;ICANON&lt;/code&gt;&lt;code&gt;IEXTEN&lt;/code&gt;&lt;code&gt;ISIG&lt;/code&gt;&lt;code&gt;NOFLSH&lt;/code&gt;&lt;code&gt;TOSTOP&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;ECHO&lt;/code&gt;&lt;code&gt;ECHOE&lt;/code&gt;&lt;code&gt;ECHOK&lt;/code&gt;&lt;code&gt;ECHONL&lt;/code&gt;&lt;code&gt;ICANON&lt;/code&gt;&lt;code&gt;IEXTEN&lt;/code&gt;&lt;code&gt;ISIG&lt;/code&gt;&lt;code&gt;NOFLSH&lt;/code&gt;&lt;code&gt;TOSTOP&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fe83a5d58b657664921e554e17730ddbd2574a33" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ENTER&lt;/code&gt; and &lt;code&gt;LEAVE&lt;/code&gt; localise a block of code - they make sure that all variables are tidied up, everything that has been localised gets its previous value returned, and so on. Think of them as the &lt;code&gt;{&lt;/code&gt; and &lt;code&gt;}&lt;/code&gt; of a Perl block.</source>
          <target state="translated">&lt;code&gt;ENTER&lt;/code&gt; と &lt;code&gt;LEAVE&lt;/code&gt; はコードのブロックをローカライズします-すべての変数が整理されていることを確認し、ローカライズされたすべてのものが以前の値を返します。それらをPerlブロックの &lt;code&gt;{&lt;/code&gt; および &lt;code&gt;}&lt;/code&gt; と考えてください。</target>
        </trans-unit>
        <trans-unit id="61a8af2f6135bd8dc2ab3b9aec3837519c83b6b0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;EXIT_FAILURE&lt;/code&gt;&lt;code&gt;EXIT_SUCCESS&lt;/code&gt;&lt;code&gt;MB_CUR_MAX&lt;/code&gt;&lt;code&gt;RAND_MAX&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;EXIT_FAILURE&lt;/code&gt;&lt;code&gt;EXIT_SUCCESS&lt;/code&gt;&lt;code&gt;MB_CUR_MAX&lt;/code&gt;&lt;code&gt;RAND_MAX&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="605c0049ae6513fbc634a4505a4d59b4c8b6360e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Errno&lt;/code&gt; also makes &lt;code&gt;%!&lt;/code&gt; magic such that each element of &lt;code&gt;%!&lt;/code&gt; has a non-zero value only if &lt;code&gt;$!&lt;/code&gt; is set to that value. For example:</source>
          <target state="translated">&lt;code&gt;Errno&lt;/code&gt; も &lt;code&gt;%!&lt;/code&gt; &lt;code&gt;%!&lt;/code&gt; の各要素が 場合にのみ、ゼロ以外の値を持ちます &lt;code&gt;$!&lt;/code&gt; その値に設定されます。例えば：</target>
        </trans-unit>
        <trans-unit id="9f66f3a7d83693483595daca9c40447e7345b192" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Errno&lt;/code&gt; defines and conditionally exports all the error constants defined in your system</source>
          <target state="translated">&lt;code&gt;Errno&lt;/code&gt; は、システムで定義されているすべてのエラー定数を定義し、条件付きでエクスポートします</target>
        </trans-unit>
        <trans-unit id="6b8723a06751f4affdad686aeca30d6d66626d33" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Errno&lt;/code&gt; defines and conditionally exports all the error constants defined in your system &lt;code&gt;errno.h&lt;/code&gt; include file. It has a single export tag, &lt;code&gt;:POSIX&lt;/code&gt; , which will export all POSIX defined error numbers.</source>
          <target state="translated">&lt;code&gt;Errno&lt;/code&gt; は、システム &lt;code&gt;errno.h&lt;/code&gt; インクルードファイルで定義されているすべてのエラー定数を定義し、条件付きでエクスポートします。これには、単一のエクスポートタグ &lt;code&gt;:POSIX&lt;/code&gt; があり、POSIXで定義されたすべてのエラー番号をエクスポートします。</target>
        </trans-unit>
        <trans-unit id="5f1cc0e4d1cb179935b0274da71cd837a55e146a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Exporter&lt;/code&gt; is definitely not the only module with symbol exporter capabilities. At CPAN, you may find a bunch of them. Some are lighter. Some provide improved APIs and features. Pick the one that fits your needs. The following is a sample list of such modules.</source>
          <target state="translated">&lt;code&gt;Exporter&lt;/code&gt; シンボルエクスポーター機能を備えたモジュールはエクスポーターだけではありません。CPANでは、それらの多くを見つけるかもしれません。一部は軽い​​です。一部のAPIと機能は改善されています。ニーズに合ったものを選択してください。以下は、そのようなモジュールのサンプルリストです。</target>
        </trans-unit>
        <trans-unit id="ad37da909ccfa2e26ad205000545574039f2e3e4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ExtUtils::Embed&lt;/code&gt; exports the following functions:</source>
          <target state="translated">&lt;code&gt;ExtUtils::Embed&lt;/code&gt; は次の関数をエクスポートします：</target>
        </trans-unit>
        <trans-unit id="095ec01183ac1e1d6ca1341429cec2f459043f2a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ExtUtils::Embed&lt;/code&gt; provides utility functions for embedding a Perl interpreter and extensions in your C/C++ applications. Typically, an application</source>
          <target state="translated">&lt;code&gt;ExtUtils::Embed&lt;/code&gt; は、Perlインタープリターと拡張機能をC / C ++アプリケーションに埋め込むためのユーティリティ関数を提供します。通常、アプリケーション</target>
        </trans-unit>
        <trans-unit id="64d2ca71037114349d1ec282c3de1a1216361065" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ExtUtils::Mksymlists&lt;/code&gt; produces files used by the linker under some OSs during the creation of shared libraries for dynamic extensions. It is normally called from a MakeMaker-generated Makefile when the extension is built. The linker option file is generated by calling the function &lt;code&gt;Mksymlists&lt;/code&gt; , which is exported by default from &lt;code&gt;ExtUtils::Mksymlists&lt;/code&gt; . It takes one argument, a list of key-value pairs, in which the following keys are recognized:</source>
          <target state="translated">&lt;code&gt;ExtUtils::Mksymlists&lt;/code&gt; は、動的拡張用の共有ライブラリの作成中に、一部のOSでリンカーが使用するファイルを生成します。これは通常、拡張機能のビルド時にMakeMakerで生成されたMakefileから呼び出されます。リンカーオプションファイルは、関数 &lt;code&gt;Mksymlists&lt;/code&gt; を呼び出して生成されます。これは、デフォルトで &lt;code&gt;ExtUtils::Mksymlists&lt;/code&gt; からエクスポートされます。1つの引数、キーと値のペアのリストを受け取ります。このリストでは、次のキーが認識されます。</target>
        </trans-unit>
        <trans-unit id="34f1b46a9aab40395bc58b1fdc00825b78aede02" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ExtUtils::Mksymlists&lt;/code&gt; produces files used by the linker under some OSs during the creation of shared libraries for dynamic extensions. It is normally called from a MakeMaker-generated Makefile when the extension is built. The linker option file is generated by calling the function &lt;code&gt;Mksymlists&lt;/code&gt;, which is exported by default from &lt;code&gt;ExtUtils::Mksymlists&lt;/code&gt;. It takes one argument, a list of key-value pairs, in which the following keys are recognized:</source>
          <target state="translated">&lt;code&gt;ExtUtils::Mksymlists&lt;/code&gt; は、動的拡張用の共有ライブラリの作成中に、一部のOSでリンカーが使用するファイルを生成します。これは通常、拡張機能のビルド時にMakeMakerで生成されたMakefileから呼び出されます。リンカオプションファイルは、関数 &lt;code&gt;Mksymlists&lt;/code&gt; を呼び出すことによって生成されます。この関数は、デフォルトで &lt;code&gt;ExtUtils::Mksymlists&lt;/code&gt; からエクスポートされます。次のキーが認識されるキーと値のペアのリストという1つの引数を取ります。</target>
        </trans-unit>
        <trans-unit id="fb003f490e341e53319aa009e2735722b16763d2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ExtUtils::ParseXS&lt;/code&gt; will compile XS code into C code by embedding the constructs necessary to let C functions manipulate Perl values and creates the glue necessary to let Perl access those functions. The compiler uses typemaps to determine how to map C function parameters and variables to Perl values.</source>
          <target state="translated">&lt;code&gt;ExtUtils::ParseXS&lt;/code&gt; は、C関数がPerlの値を操作できるようにするために必要な構成を埋め込むことによってXSコードをCコードにコンパイルし、Perlがそれらの関数にアクセスするために必要な接着剤を作成します。コンパイラーはタイプマップを使用して、C関数のパラメーターと変数をPerlの値にマップする方法を決定します。</target>
        </trans-unit>
        <trans-unit id="6b1ab84940941a18454cfe9c14a38736463beb76" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;F&amp;lt;filename&amp;gt;&lt;/code&gt; -- style for filenames</source>
          <target state="translated">&lt;code&gt;F&amp;lt;filename&amp;gt;&lt;/code&gt; -ファイル名のスタイル</target>
        </trans-unit>
        <trans-unit id="17d695a3bd8c53466ce21bdcb25776a30dd807a6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;F&amp;lt;filename&amp;gt;&lt;/code&gt; -- used for filenames</source>
          <target state="translated">&lt;code&gt;F&amp;lt;filename&amp;gt;&lt;/code&gt; -ファイル名に使用</target>
        </trans-unit>
        <trans-unit id="f2053c192b87e9cd9de753eaf699903f70648eb9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;F&lt;/code&gt; packs an &lt;code&gt;NV&lt;/code&gt; , which is the floating point type used by Perl internally.</source>
          <target state="translated">&lt;code&gt;F&lt;/code&gt; は、Perlが内部で使用する浮動小数点型である &lt;code&gt;NV&lt;/code&gt; をパックします。</target>
        </trans-unit>
        <trans-unit id="da93f76265c0a4149d0245d9d7b2a4a882813ba0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;F&lt;/code&gt; packs an &lt;code&gt;NV&lt;/code&gt;, which is the floating point type used by Perl internally.</source>
          <target state="translated">&lt;code&gt;F&lt;/code&gt; は、Perlが内部で使用する浮動小数点型である &lt;code&gt;NV&lt;/code&gt; をパックします。</target>
        </trans-unit>
        <trans-unit id="52ff85342a730577020c88364b60274499bd7643" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;FAULT&lt;/code&gt; means that you never expect to call the function in scalar (or list) context, and that if &lt;code&gt;Memoize&lt;/code&gt; detects such a call, it should abort the program. The error message is one of</source>
          <target state="translated">&lt;code&gt;FAULT&lt;/code&gt; は、スカラー（またはリスト）コンテキストで関数を呼び出すことを決して期待しないことを意味し、 &lt;code&gt;Memoize&lt;/code&gt; がそのような呼び出しを検出した場合、プログラムを中止する必要があります。エラーメッセージは次のいずれかです。</target>
        </trans-unit>
        <trans-unit id="593b33d10d7aff28fb80e58f50c81f1f8eb33924" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;FD_CLOEXEC&lt;/code&gt;&lt;code&gt;F_DUPFD&lt;/code&gt;&lt;code&gt;F_GETFD&lt;/code&gt;&lt;code&gt;F_GETFL&lt;/code&gt;&lt;code&gt;F_GETLK&lt;/code&gt;&lt;code&gt;F_OK&lt;/code&gt;&lt;code&gt;F_RDLCK&lt;/code&gt;&lt;code&gt;F_SETFD&lt;/code&gt;&lt;code&gt;F_SETFL&lt;/code&gt;&lt;code&gt;F_SETLK&lt;/code&gt;&lt;code&gt;F_SETLKW&lt;/code&gt;&lt;code&gt;F_UNLCK&lt;/code&gt;&lt;code&gt;F_WRLCK&lt;/code&gt;&lt;code&gt;O_ACCMODE&lt;/code&gt;&lt;code&gt;O_APPEND&lt;/code&gt;&lt;code&gt;O_CREAT&lt;/code&gt;&lt;code&gt;O_EXCL&lt;/code&gt;&lt;code&gt;O_NOCTTY&lt;/code&gt;&lt;code&gt;O_NONBLOCK&lt;/code&gt;&lt;code&gt;O_RDONLY&lt;/code&gt;&lt;code&gt;O_RDWR&lt;/code&gt;&lt;code&gt;O_TRUNC&lt;/code&gt;&lt;code&gt;O_WRONLY&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;FD_CLOEXEC&lt;/code&gt;&lt;code&gt;F_DUPFD&lt;/code&gt;&lt;code&gt;F_GETFD&lt;/code&gt;&lt;code&gt;F_GETFL&lt;/code&gt;&lt;code&gt;F_GETLK&lt;/code&gt;&lt;code&gt;F_OK&lt;/code&gt;&lt;code&gt;F_RDLCK&lt;/code&gt;&lt;code&gt;F_SETFD&lt;/code&gt;&lt;code&gt;F_SETFL&lt;/code&gt;&lt;code&gt;F_SETLK&lt;/code&gt;&lt;code&gt;F_SETLKW&lt;/code&gt;&lt;code&gt;F_UNLCK&lt;/code&gt;&lt;code&gt;F_WRLCK&lt;/code&gt;&lt;code&gt;O_ACCMODE&lt;/code&gt;&lt;code&gt;O_APPEND&lt;/code&gt;&lt;code&gt;O_CREAT&lt;/code&gt;&lt;code&gt;O_EXCL&lt;/code&gt;&lt;code&gt;O_NOCTTY&lt;/code&gt;&lt;code&gt;O_NONBLOCK&lt;/code&gt;&lt;code&gt;O_RDONLY&lt;/code&gt;&lt;code&gt;O_RDWR&lt;/code&gt;&lt;code&gt;O_TRUNC&lt;/code&gt;&lt;code&gt;O_WRONLY&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4a95b90939671fa2f4ef6a0875777e47ba033a12" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;FE_DOWNWARD&lt;/code&gt;&lt;code&gt;FE_TONEAREST&lt;/code&gt;&lt;code&gt;FE_TOWARDZERO&lt;/code&gt;&lt;code&gt;FE_UPWARD&lt;/code&gt; on systems that support them.</source>
          <target state="translated">&lt;code&gt;FE_DOWNWARD&lt;/code&gt; それらをサポートするシステムではFE_DOWNWARD &lt;code&gt;FE_TONEAREST&lt;/code&gt; &lt;code&gt;FE_TOWARDZERO&lt;/code&gt; &lt;code&gt;FE_UPWARD&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="78cf25b89726621d2c00a165f57d8361f6ec15f3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;FE_TONEAREST&lt;/code&gt; is like &lt;a href=&quot;#round&quot;&gt;&quot;round&quot;&lt;/a&gt;, &lt;code&gt;FE_TOWARDZERO&lt;/code&gt; is like &lt;a href=&quot;#trunc&quot;&gt;&quot;trunc&quot;&lt;/a&gt; [C99].</source>
          <target state="translated">&lt;code&gt;FE_TONEAREST&lt;/code&gt; は&lt;a href=&quot;#round&quot;&gt;「ラウンド」の&lt;/a&gt;ようなもので、 &lt;code&gt;FE_TOWARDZERO&lt;/code&gt; は&lt;a href=&quot;#trunc&quot;&gt;「&lt;/a&gt;トランク」のようなものです[C99]。</target>
        </trans-unit>
        <trans-unit id="586830fc1c312d09452cbf05bb392121d4a4d3f7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;FE_TONEAREST&lt;/code&gt; is like &lt;a href=&quot;#round&quot;&gt;round&lt;/a&gt;, &lt;code&gt;FE_TOWARDZERO&lt;/code&gt; is like &lt;a href=&quot;#trunc&quot;&gt;trunc&lt;/a&gt; [C99].</source>
          <target state="translated">&lt;code&gt;FE_TONEAREST&lt;/code&gt; は&lt;a href=&quot;#round&quot;&gt;roundの&lt;/a&gt;ようなもので、 &lt;code&gt;FE_TOWARDZERO&lt;/code&gt; は&lt;a href=&quot;#trunc&quot;&gt;trunc&lt;/a&gt; [C99]のようなものです。</target>
        </trans-unit>
        <trans-unit id="c79284936684717b45799224f65c1741c4f9ad4c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;FILE&lt;/code&gt; . It will generate one on each call and push a new stdio layer. So don't call it repeatedly on the same file. &lt;code&gt;PerlIO_findFILE()&lt;/code&gt; will retrieve the stdio layer once it has been generated by &lt;code&gt;PerlIO_exportFILE()&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;FILE&lt;/code&gt; 。呼び出しごとに1つ生成し、新しいstdioレイヤーをプッシュします。したがって、同じファイルで繰り返し呼び出さないでください。 &lt;code&gt;PerlIO_findFILE()&lt;/code&gt; は、 &lt;code&gt;PerlIO_exportFILE()&lt;/code&gt; によって生成されたstdioレイヤーを取得します。</target>
        </trans-unit>
        <trans-unit id="cbcaef3f3af154b37b896e3dc592f8a50d5830e7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;FILE&lt;/code&gt; is a Perl file handle [in any of the supported forms, a bareword, a string, a typeglob, or a reference to a typeglob] that will be opened. If &lt;code&gt;FILE&lt;/code&gt; is already open, it will automatically be closed before it is reopened.</source>
          <target state="translated">&lt;code&gt;FILE&lt;/code&gt; は、開かれるPerlファイルハンドル[サポートされている形式、ベアワード、文字列、typeglob、またはtypeglobへの参照のいずれか]です。 &lt;code&gt;FILE&lt;/code&gt; がすでに開いている場合は、再度開く前に自動的に閉じられます。</target>
        </trans-unit>
        <trans-unit id="e0ea1a32c9d7b93130f1bf1f0fb74c5cfb171ab0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;FILE&lt;/code&gt;. It will generate one on each call and push a new stdio layer. So don't call it repeatedly on the same file. &lt;code&gt;PerlIO_findFILE()&lt;/code&gt; will retrieve the stdio layer once it has been generated by &lt;code&gt;PerlIO_exportFILE()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;FILE&lt;/code&gt; 。呼び出しごとに1つ生成され、新しいstdioレイヤーがプッシュされます。したがって、同じファイルで繰り返し呼び出さないでください。 &lt;code&gt;PerlIO_findFILE()&lt;/code&gt; は、 &lt;code&gt;PerlIO_exportFILE()&lt;/code&gt; によって生成されたstdioレイヤーを取得します。</target>
        </trans-unit>
        <trans-unit id="08a48df125b434d844372c25a7cae987e2df5288" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;FILTER_ONLY&lt;/code&gt; takes a sequence of specifiers that install separate (and possibly multiple) filters that act on only parts of the source code. For example:</source>
          <target state="translated">&lt;code&gt;FILTER_ONLY&lt;/code&gt; は、ソースコードの一部のみに作用する個別の（場合によっては複数の）フィルターをインストールする一連の指定子を取ります。例えば：</target>
        </trans-unit>
        <trans-unit id="d138ad5224141350319092d75597c48fba6ef1a1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;FP_ILOGB0&lt;/code&gt;&lt;code&gt;FP_ILOGBNAN&lt;/code&gt;&lt;code&gt;FP_INFINITE&lt;/code&gt;&lt;code&gt;FP_NAN&lt;/code&gt;&lt;code&gt;FP_NORMAL&lt;/code&gt;&lt;code&gt;FP_SUBNORMAL&lt;/code&gt;&lt;code&gt;FP_ZERO&lt;/code&gt;&lt;code&gt;INFINITY&lt;/code&gt;&lt;code&gt;NAN&lt;/code&gt;&lt;code&gt;Inf&lt;/code&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;code&gt;M_1_PI&lt;/code&gt;&lt;code&gt;M_2_PI&lt;/code&gt;&lt;code&gt;M_2_SQRTPI&lt;/code&gt;&lt;code&gt;M_E&lt;/code&gt;&lt;code&gt;M_LN10&lt;/code&gt;&lt;code&gt;M_LN2&lt;/code&gt;&lt;code&gt;M_LOG10E&lt;/code&gt;&lt;code&gt;M_LOG2E&lt;/code&gt;&lt;code&gt;M_PI&lt;/code&gt;&lt;code&gt;M_PI_2&lt;/code&gt;&lt;code&gt;M_PI_4&lt;/code&gt;&lt;code&gt;M_SQRT1_2&lt;/code&gt;&lt;code&gt;M_SQRT2&lt;/code&gt; on systems with C99 support.</source>
          <target state="translated">&lt;code&gt;FP_ILOGB0&lt;/code&gt; &lt;code&gt;FP_ILOGBNAN&lt;/code&gt; &lt;code&gt;FP_INFINITE&lt;/code&gt; &lt;code&gt;FP_NAN&lt;/code&gt; &lt;code&gt;FP_NORMAL&lt;/code&gt; &lt;code&gt;FP_SUBNORMAL&lt;/code&gt; &lt;code&gt;FP_ZERO&lt;/code&gt; &lt;code&gt;INFINITY&lt;/code&gt; &lt;code&gt;NAN&lt;/code&gt; &lt;code&gt;Inf&lt;/code&gt; の &lt;code&gt;NaN&lt;/code&gt; の &lt;code&gt;M_1_PI&lt;/code&gt; &lt;code&gt;M_2_PI&lt;/code&gt; &lt;code&gt;M_2_SQRTPI&lt;/code&gt; &lt;code&gt;M_E&lt;/code&gt; &lt;code&gt;M_LN10&lt;/code&gt; &lt;code&gt;M_LN2&lt;/code&gt; &lt;code&gt;M_LOG10E&lt;/code&gt; &lt;code&gt;M_LOG2E&lt;/code&gt; &lt;code&gt;M_PI&lt;/code&gt; &lt;code&gt;M_PI_2&lt;/code&gt; &lt;code&gt;M_PI_4&lt;/code&gt; &lt;code&gt;M_SQRT1_2&lt;/code&gt; &lt;code&gt;M_SQRT2&lt;/code&gt; C99をサポートしているシステムで。</target>
        </trans-unit>
        <trans-unit id="5914c8ad1ae38c828bbfd3aecb0f6eeb99e7051a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Fatal&lt;/code&gt; clobbers the context in which a function is called and always makes it a scalar context, except when the &lt;code&gt;:void&lt;/code&gt; tag is used. This problem does not exist in &lt;a href=&quot;autodie&quot;&gt;autodie&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Fatal&lt;/code&gt; は、関数が呼び出されたコンテキストを破棄し、 &lt;code&gt;:void&lt;/code&gt; タグが使用されている場合を除き、常にスカラーコンテキストにします。この問題は&lt;a href=&quot;autodie&quot;&gt;autodieに&lt;/a&gt;は存在しません。</target>
        </trans-unit>
        <trans-unit id="740df548a189ece2edf4fd0c968a33bedfb05cdc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Fatal&lt;/code&gt; provides a way to conveniently replace functions which normally return a false value when they fail with equivalents which raise exceptions if they are not successful. This lets you use these functions without having to test their return values explicitly on each call. Exceptions can be caught using &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval{}&lt;/a&gt;&lt;/code&gt;. See &lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt; and &lt;a href=&quot;perlvar&quot;&gt;perlvar&lt;/a&gt; for details.</source>
          <target state="translated">&lt;code&gt;Fatal&lt;/code&gt; は、失敗した場合に通常はfalse値を返す関数を、成功しなかった場合に例外を発生させる同等の関数で便利に置き換える方法を提供します。これにより、各呼び出しで明示的に戻り値をテストしなくても、これらの関数を使用できます。例外は &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval{}&lt;/a&gt;&lt;/code&gt; を使用してキャッチできます。詳細については、&lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt;および&lt;a href=&quot;perlvar&quot;&gt;perlvar&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="ee9af9aec29f36e84953777a6d4ae83a8bda1aff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Fatal&lt;/code&gt; provides a way to conveniently replace functions which normally return a false value when they fail with equivalents which raise exceptions if they are not successful. This lets you use these functions without having to test their return values explicitly on each call. Exceptions can be caught using &lt;code&gt;eval{}&lt;/code&gt;. See &lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt; and &lt;a href=&quot;perlvar&quot;&gt;perlvar&lt;/a&gt; for details.</source>
          <target state="translated">&lt;code&gt;Fatal&lt;/code&gt; は、失敗したときに通常はfalse値を返す関数を、成功しなかった場合に例外を発生させる同等の関数に簡単に置き換える方法を提供します。これにより、呼び出しごとに戻り値を明示的にテストしなくても、これらの関数を使用できます。例外は &lt;code&gt;eval{}&lt;/code&gt; を使用してキャッチできます。詳細については、&lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt;および&lt;a href=&quot;perlvar&quot;&gt;perlvar&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="7fe02d4dec8f5e2d41d5b0a897ead226d9f00196" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;FdGetOsFHandle&lt;/code&gt; simply calls &lt;code&gt;_get_osfhandle()&lt;/code&gt;. It was renamed to better fit in with the rest the function names of this module, in particular to distinguish it from &lt;code&gt;GetOsFHandle&lt;/code&gt;. It takes an integer file descriptor [as from Perl's &lt;code&gt;fileno&lt;/code&gt;] and returns the Win32 native file handle associated with that file descriptor or &lt;code&gt;INVALID_HANDLE_VALUE&lt;/code&gt; if &lt;code&gt;$ivFd&lt;/code&gt; is not an open file descriptor.</source>
          <target state="translated">&lt;code&gt;FdGetOsFHandle&lt;/code&gt; は単に &lt;code&gt;_get_osfhandle()&lt;/code&gt; を呼び出します。特に &lt;code&gt;GetOsFHandle&lt;/code&gt; と区別するために、このモジュールの残りの関数名に合わせて名前が変更されました。[Perlの &lt;code&gt;fileno&lt;/code&gt; からの]整数ファイル記述子を受け取り、そのファイル記述子に関連付けられたWin32ネイティブファイルハンドルを返します。 &lt;code&gt;$ivFd&lt;/code&gt; が開いているファイル記述子でない場合は、 &lt;code&gt;INVALID_HANDLE_VALUE&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="c009d428e974071ae1eba2560f4e3bf7b63b8111" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;File::Fetch&lt;/code&gt; currently only supports proxies with LWP::UserAgent. You will need to set your environment variables accordingly. For example, to use an ftp proxy:</source>
          <target state="translated">&lt;code&gt;File::Fetch&lt;/code&gt; 現在、LWP :: UserAgentを使用するプロキシのみをサポートしています。それに応じて環境変数を設定する必要があります。たとえば、ftpプロキシを使用するには：</target>
        </trans-unit>
        <trans-unit id="512e6b725fa0815ed1040c15e359675815185001" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;File::Fetch&lt;/code&gt; is relatively smart about things. When trying to write a file to disk, it removes the &lt;code&gt;query parameters&lt;/code&gt; (see the &lt;code&gt;output_file&lt;/code&gt; method for details) from the file name before creating it. In most cases this suffices.</source>
          <target state="translated">&lt;code&gt;File::Fetch&lt;/code&gt; は比較的スマートです。ファイルをディスクに書き込もうとすると、ファイル名を作成する前に、 &lt;code&gt;query parameters&lt;/code&gt; （詳細については &lt;code&gt;output_file&lt;/code&gt; メソッドを参照）がファイル名から削除されます。ほとんどの場合、これで十分です。</target>
        </trans-unit>
        <trans-unit id="a6d0099b072faa9f1ab084d296e2eecf3cc3989c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;File::Glob::glob()&lt;/code&gt; was deprecated in Perl 5.8. A deprecation message was issued from Perl 5.26 onwards, and the function has now disappeared in Perl 5.30.</source>
          <target state="translated">&lt;code&gt;File::Glob::glob()&lt;/code&gt; はPerl5.8で非推奨になりました。Perl 5.26以降、非推奨メッセージが発行され、Perl5.30ではこの機能が廃止されました。</target>
        </trans-unit>
        <trans-unit id="f0341d9f9f6835e25226ea180cb47b2de6f57b15" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;File::Glob::glob()&lt;/code&gt; was deprecated in Perl 5.8. A deprecation message was issued from Perl 5.26 onwards, and the function will disappear in Perl 5.30.</source>
          <target state="translated">&lt;code&gt;File::Glob::glob()&lt;/code&gt; はPerl5.8で非推奨になりました。Perl 5.26以降、非推奨メッセージが発行されました。この関数はPerl5.30では表示されなくなります。</target>
        </trans-unit>
        <trans-unit id="f70344aeb09f226cb3286ecd7eeb0f950800e137" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;File::Glob::glob()&lt;/code&gt; was deprecated in perl 5.8.0. A deprecation message was issued from perl 5.26.0 onwards, and the function will disappear in perl 5.30.0.</source>
          <target state="translated">&lt;code&gt;File::Glob::glob()&lt;/code&gt; はperl5.8.0で非推奨になりました。非推奨メッセージはperl5.26.0以降で発行され、関数はperl5.30.0で消えます。</target>
        </trans-unit>
        <trans-unit id="864da3a7d4380894f7ec490c50f8b0bf0b583454" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;File::Glob::glob()&lt;/code&gt; was removed</source>
          <target state="translated">&lt;code&gt;File::Glob::glob()&lt;/code&gt; が削除されました</target>
        </trans-unit>
        <trans-unit id="0b7883deb3070408ba6c06af81eb456342714582" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;File::Glob::glob()&lt;/code&gt; will disappear</source>
          <target state="translated">&lt;code&gt;File::Glob::glob()&lt;/code&gt; が消えます</target>
        </trans-unit>
        <trans-unit id="c04cfaee6fdab5ef355bac5b940829e1c2a66b6d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;File::Glob&lt;/code&gt; has a function called &lt;code&gt;glob&lt;/code&gt;, which just calls &lt;code&gt;bsd_glob&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;File::Glob&lt;/code&gt; は、 &lt;code&gt;bsd_glob&lt;/code&gt; を呼び出すだけの &lt;code&gt;glob&lt;/code&gt; という関数があります。</target>
        </trans-unit>
        <trans-unit id="b7aaa840fde61f894eb1ca28a8554598b61672c5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;File::Glob&lt;/code&gt; has a function called &lt;code&gt;glob&lt;/code&gt;, which just calls &lt;code&gt;bsd_glob&lt;/code&gt;. However, its prototype is different from the prototype of &lt;code&gt;CORE::glob&lt;/code&gt;, and hence, &lt;code&gt;File::Glob::glob&lt;/code&gt; should not be used.</source>
          <target state="translated">&lt;code&gt;File::Glob&lt;/code&gt; は、 &lt;code&gt;bsd_glob&lt;/code&gt; を呼び出すだけの &lt;code&gt;glob&lt;/code&gt; という関数があります。ただし、そのプロトタイプは &lt;code&gt;CORE::glob&lt;/code&gt; プロトタイプとは異なるため、 &lt;code&gt;File::Glob::glob&lt;/code&gt; は使用しないでください。</target>
        </trans-unit>
        <trans-unit id="4909eac8bb27d566be5a1e97826bcb6d6ddbfad1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;File::GlobMapper&lt;/code&gt; has been kept simple deliberately, so it isn't intended to solve all filename mapping operations. Under the hood &lt;code&gt;File::Glob&lt;/code&gt; (or for older versions of Perl, &lt;code&gt;File::BSDGlob&lt;/code&gt; ) is used to match the files, so you will never have the flexibility of full Perl regular expression.</source>
          <target state="translated">&lt;code&gt;File::GlobMapper&lt;/code&gt; は、故意にシンプルに保たれているため、すべてのファイル名マッピング操作を解決することを意図していません。フードの下で &lt;code&gt;File::Glob&lt;/code&gt; （やPerl、古いバージョンの &lt;code&gt;File::BSDGlob&lt;/code&gt; あなたが完全なPerlの正規表現の柔軟性を持っていることはありませんので）、ファイルを一致させるために使用されます。</target>
        </trans-unit>
        <trans-unit id="2ab300bfaa882a15e12605fa06308ba581bfd413" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;File::GlobMapper&lt;/code&gt; has been kept simple deliberately, so it isn't intended to solve all filename mapping operations. Under the hood &lt;code&gt;File::Glob&lt;/code&gt; (or for older versions of Perl, &lt;code&gt;File::BSDGlob&lt;/code&gt;) is used to match the files, so you will never have the flexibility of full Perl regular expression.</source>
          <target state="translated">&lt;code&gt;File::GlobMapper&lt;/code&gt; は意図的にシンプルに保たれているため、すべてのファイル名マッピング操作を解決することを目的としたものではありません。フードの下で &lt;code&gt;File::Glob&lt;/code&gt; （やPerl、古いバージョンの &lt;code&gt;File::BSDGlob&lt;/code&gt; あなたが完全なPerlの正規表現の柔軟性を持っていることはありませんので）、ファイルを一致させるために使用されます。</target>
        </trans-unit>
        <trans-unit id="e96810d8a56c73c1a6b5cbdf2dd4d391587af778" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;File::Path&lt;/code&gt; blindly exports &lt;code&gt;mkpath&lt;/code&gt; and &lt;code&gt;rmtree&lt;/code&gt; into the current namespace. These days, this is considered bad style, but to change it now would break too much code. Nonetheless, you are invited to specify what it is you are expecting to use:</source>
          <target state="translated">&lt;code&gt;File::Path&lt;/code&gt; は、 &lt;code&gt;mkpath&lt;/code&gt; と &lt;code&gt;rmtree&lt;/code&gt; を現在のネームスペースに盲目的にエクスポートします。最近、これは悪いスタイルと見なされていますが、変更するとコードが破損しすぎます。それにもかかわらず、何を使用することを期待しているのかを指定するように求められます。</target>
        </trans-unit>
        <trans-unit id="8f095bddf521d070185d41c8d087a14cb54a167a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;File::Spec&lt;/code&gt; is available in the standard distribution as of version 5.004_05. &lt;code&gt;File::Spec::Functions&lt;/code&gt; is only in &lt;code&gt;File::Spec&lt;/code&gt; 0.7 and later, and some versions of Perl come with version 0.6. If &lt;code&gt;File::Spec&lt;/code&gt; is not updated to 0.7 or later, you must use the object-oriented interface from &lt;code&gt;File::Spec&lt;/code&gt; (or upgrade &lt;code&gt;File::Spec&lt;/code&gt; ).</source>
          <target state="translated">&lt;code&gt;File::Spec&lt;/code&gt; は、バージョン5.004_05以降の標準ディストリビューションで使用できます。 &lt;code&gt;File::Spec::Functions&lt;/code&gt; は &lt;code&gt;File::Spec&lt;/code&gt; 0.7以降にのみ存在し、一部のバージョンのPerlにはバージョン0.6が付属しています。場合は &lt;code&gt;File::Spec&lt;/code&gt; 0.7以降にアップデートされていない、あなたがからオブジェクト指向のインターフェイスを使用する必要があります &lt;code&gt;File::Spec&lt;/code&gt; （またはアップグレード &lt;code&gt;File::Spec&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="12cef216bb5c87c8ac2becb4baf424b0884bc7fb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;File::Temp&lt;/code&gt; can be used to create and open temporary files in a safe way. There is both a function interface and an object-oriented interface. The File::Temp constructor or the tempfile() function can be used to return the name and the open filehandle of a temporary file. The tempdir() function can be used to create a temporary directory.</source>
          <target state="translated">&lt;code&gt;File::Temp&lt;/code&gt; を使用すると、一時ファイルを安全な方法で作成して開くことができます。関数インターフェースとオブジェクト指向インターフェースの両方があります。File :: Tempコンストラクターまたはtempfile（）関数を使用して、一時ファイルの名前と開いているファイルハンドルを返すことができます。tempdir（）関数を使用して、一時ディレクトリを作成できます。</target>
        </trans-unit>
        <trans-unit id="b8558d37d33da0f50296d5712fa3cb21fddb903f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;File&lt;/code&gt; is a &lt;b&gt;superclass&lt;/b&gt; of &lt;code&gt;File::MP3&lt;/code&gt; , and &lt;code&gt;File::MP3&lt;/code&gt; is a &lt;b&gt;subclass&lt;/b&gt; of &lt;code&gt;File&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;File&lt;/code&gt; は &lt;code&gt;File::MP3&lt;/code&gt; &lt;b&gt;スーパークラス&lt;/b&gt;であり、 &lt;code&gt;File::MP3&lt;/code&gt; は &lt;code&gt;File&lt;/code&gt; の&lt;b&gt;サブクラス&lt;/b&gt;です。&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="734bd09f4774692ef5a96c74aa8ec72e340f9c63" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;File&lt;/code&gt; is a &lt;b&gt;superclass&lt;/b&gt; of &lt;code&gt;File::MP3&lt;/code&gt;, and &lt;code&gt;File::MP3&lt;/code&gt; is a &lt;b&gt;subclass&lt;/b&gt; of &lt;code&gt;File&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;File&lt;/code&gt; は &lt;code&gt;File::MP3&lt;/code&gt; &lt;b&gt;スーパークラス&lt;/b&gt;であり、 &lt;code&gt;File::MP3&lt;/code&gt; は &lt;code&gt;File&lt;/code&gt; の&lt;b&gt;サブクラス&lt;/b&gt;です。&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="6762671e9c43ce6002652e67bfefcf6a5cd02a7b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;FileHandle::fdopen&lt;/code&gt; is like &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; except that its first parameter is not a filename but rather a file handle name, a FileHandle object, or a file descriptor number.</source>
          <target state="translated">&lt;code&gt;FileHandle::fdopen&lt;/code&gt; は、最初のパラメーターがファイル名ではなく、ファイルハンドル名、FileHandleオブジェクト、またはファイル記述子番号であることを除いて、 &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; に似ています。</target>
        </trans-unit>
        <trans-unit id="551228e60d2f6e525b43ec737ab4dc43edb2d757" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;FileHandle::fdopen&lt;/code&gt; is like &lt;code&gt;open&lt;/code&gt; except that its first parameter is not a filename but rather a file handle name, a FileHandle object, or a file descriptor number.</source>
          <target state="translated">&lt;code&gt;FileHandle::fdopen&lt;/code&gt; は &lt;code&gt;open&lt;/code&gt; に似ていますが、最初のパラメーターがファイル名ではなく、ファイルハンドル名、FileHandleオブジェクト、またはファイル記述子番号である点が異なります。</target>
        </trans-unit>
        <trans-unit id="adf43c6bdb788ed60b52a38acf298d9b6cfa527d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;FileHandle::new&lt;/code&gt; creates a &lt;code&gt;FileHandle&lt;/code&gt; , which is a reference to a newly created symbol (see the &lt;code&gt;Symbol&lt;/code&gt; package). If it receives any parameters, they are passed to &lt;code&gt;FileHandle::open&lt;/code&gt; ; if the open fails, the &lt;code&gt;FileHandle&lt;/code&gt; object is destroyed. Otherwise, it is returned to the caller.</source>
          <target state="translated">&lt;code&gt;FileHandle::new&lt;/code&gt; は、新しく作成されたシンボルへの参照である &lt;code&gt;FileHandle&lt;/code&gt; を作成します（ &lt;code&gt;Symbol&lt;/code&gt; パッケージを参照）。パラメータを受け取ると、それらは &lt;code&gt;FileHandle::open&lt;/code&gt; 渡されます。オープンが失敗した場合、 &lt;code&gt;FileHandle&lt;/code&gt; オブジェクトは破棄されます。それ以外の場合は、呼び出し元に返されます。</target>
        </trans-unit>
        <trans-unit id="7b5c4c65f39682b293e57812e54b57431bc31343" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;FileHandle::new&lt;/code&gt; creates a &lt;code&gt;FileHandle&lt;/code&gt;, which is a reference to a newly created symbol (see the &lt;code&gt;Symbol&lt;/code&gt; package). If it receives any parameters, they are passed to &lt;code&gt;FileHandle::open&lt;/code&gt;; if the open fails, the &lt;code&gt;FileHandle&lt;/code&gt; object is destroyed. Otherwise, it is returned to the caller.</source>
          <target state="translated">&lt;code&gt;FileHandle::new&lt;/code&gt; は、新しく作成されたシンボルへの参照である &lt;code&gt;FileHandle&lt;/code&gt; を作成します（ &lt;code&gt;Symbol&lt;/code&gt; パッケージを参照）。パラメータを受け取ると、それらは &lt;code&gt;FileHandle::open&lt;/code&gt; ;に渡されます。開くことが失敗すると、 &lt;code&gt;FileHandle&lt;/code&gt; オブジェクトは破棄されます。それ以外の場合は、呼び出し元に返されます。</target>
        </trans-unit>
        <trans-unit id="159fd7914013643c7a2e528eb234604b29dc9ae3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;FileHandle::new_from_fd&lt;/code&gt; creates a &lt;code&gt;FileHandle&lt;/code&gt; like &lt;code&gt;new&lt;/code&gt; does. It requires two parameters, which are passed to &lt;code&gt;FileHandle::fdopen&lt;/code&gt; ; if the fdopen fails, the &lt;code&gt;FileHandle&lt;/code&gt; object is destroyed. Otherwise, it is returned to the caller.</source>
          <target state="translated">&lt;code&gt;FileHandle::new_from_fd&lt;/code&gt; は、 &lt;code&gt;new&lt;/code&gt; と同様に &lt;code&gt;FileHandle&lt;/code&gt; を作成します。 &lt;code&gt;FileHandle::fdopen&lt;/code&gt; 渡される2つのパラメーターが必要です。fdopenが失敗した場合、 &lt;code&gt;FileHandle&lt;/code&gt; オブジェクトは破棄されます。それ以外の場合は、呼び出し元に返されます。</target>
        </trans-unit>
        <trans-unit id="1816a8929a19bd245732a56e3215b39bd3528bff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;FileHandle::new_from_fd&lt;/code&gt; creates a &lt;code&gt;FileHandle&lt;/code&gt; like &lt;code&gt;new&lt;/code&gt; does. It requires two parameters, which are passed to &lt;code&gt;FileHandle::fdopen&lt;/code&gt;; if the fdopen fails, the &lt;code&gt;FileHandle&lt;/code&gt; object is destroyed. Otherwise, it is returned to the caller.</source>
          <target state="translated">&lt;code&gt;FileHandle::new_from_fd&lt;/code&gt; は、 &lt;code&gt;new&lt;/code&gt; と同じように &lt;code&gt;FileHandle&lt;/code&gt; を作成します。 &lt;code&gt;FileHandle::fdopen&lt;/code&gt; 渡される2つのパラメーターが必要です。fdopenが失敗すると、 &lt;code&gt;FileHandle&lt;/code&gt; オブジェクトは破棄されます。それ以外の場合は、呼び出し元に返されます。</target>
        </trans-unit>
        <trans-unit id="34df48f6115c1c0a13e4731820d5124ecd1a9681" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;FileHandle::open&lt;/code&gt; accepts one parameter or two. With one parameter, it is just a front end for the built-in &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; function. With two parameters, the first parameter is a filename that may include whitespace or other special characters, and the second parameter is the open mode, optionally followed by a file permission value.</source>
          <target state="translated">&lt;code&gt;FileHandle::open&lt;/code&gt; は1つまたは2つのパラメーターを受け入れます。1つのパラメーターで、それは組み込みの &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; 関数のフロントエンドにすぎません。2つのパラメーターを使用する場合、最初のパラメーターは空白またはその他の特殊文字を含む可能性のあるファイル名であり、2番目のパラメーターはオープンモードで、オプションでファイル許可値が続きます。</target>
        </trans-unit>
        <trans-unit id="66138afc0a9497591e37682b7102baf49f660809" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;FileHandle::open&lt;/code&gt; accepts one parameter or two. With one parameter, it is just a front end for the built-in &lt;code&gt;open&lt;/code&gt; function. With two parameters, the first parameter is a filename that may include whitespace or other special characters, and the second parameter is the open mode, optionally followed by a file permission value.</source>
          <target state="translated">&lt;code&gt;FileHandle::open&lt;/code&gt; は、1つまたは2つのパラメーターを受け入れます。1つのパラメーターで、組み込みの &lt;code&gt;open&lt;/code&gt; 関数のフロントエンドにすぎません。2つのパラメーターを使用する場合、最初のパラメーターは空白またはその他の特殊文字を含むファイル名であり、2番目のパラメーターはオープンモードであり、オプションでファイルのアクセス許可値が続きます。</target>
        </trans-unit>
        <trans-unit id="0e59575ed9da2a67f65de836e250363d39947a91" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;GB2312&lt;/code&gt; has been registered in the &lt;code&gt;EUC-CN&lt;/code&gt; meaning at IANA. This has partially repaired the situation: Microsoft's &lt;code&gt;GB2312&lt;/code&gt; has become a superset of the official &lt;code&gt;GB2312&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;GB2312&lt;/code&gt; は、IANAで &lt;code&gt;EUC-CN&lt;/code&gt; の意味で登録されています。これにより、状況が部分的に修復されました。Microsoftの &lt;code&gt;GB2312&lt;/code&gt; は、公式の &lt;code&gt;GB2312&lt;/code&gt; のスーパーセットになりました。</target>
        </trans-unit>
        <trans-unit id="b4ab0909c9fbea7ec2a8c04b89c705142429eac8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;GB2312&lt;/code&gt; is the IANA name for &lt;code&gt;EUC-CN&lt;/code&gt;. See &lt;a href=&quot;#Microsoft-related-naming-mess&quot;&gt;&quot;Microsoft-related naming mess&quot;&lt;/a&gt; for details.</source>
          <target state="translated">&lt;code&gt;GB2312&lt;/code&gt; は、 &lt;code&gt;EUC-CN&lt;/code&gt; のIANA名です。詳細については、&lt;a href=&quot;#Microsoft-related-naming-mess&quot;&gt;「Microsoft関連の命名の混乱」&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="7cdb76d93c588773fe7c911d1c166db130249be2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;GB_2312-80&lt;/code&gt; encoding is available as &lt;code&gt;gb2312-raw&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;GB_2312-80&lt;/code&gt; エンコーディングは &lt;code&gt;gb2312-raw&lt;/code&gt; として利用できます。</target>
        </trans-unit>
        <trans-unit id="4661ead2cc9c85eb1e64a45ad1f9a60d27b3d717" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;GV_SUPER&lt;/code&gt; indicates that we want to look up the method in the superclasses of the &lt;code&gt;stash&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;GV_SUPER&lt;/code&gt; は、 &lt;code&gt;stash&lt;/code&gt; のスーパークラスでメソッドを検索することを示します。</target>
        </trans-unit>
        <trans-unit id="56c84e89afe3961306a15f3cf682c3985e27fc10" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;GetFileContents&lt;/code&gt; behaves like &lt;code&gt;WriteFile&lt;/code&gt; above, but returns the contents of the would-be file rather than writing it out.</source>
          <target state="translated">&lt;code&gt;GetFileContents&lt;/code&gt; は、上記の &lt;code&gt;WriteFile&lt;/code&gt; のように動作しますが、書き込むファイルではなく、ファイルのコンテンツを返します。</target>
        </trans-unit>
        <trans-unit id="7ea3c82b309767ea7a2165759e9837e13524a01e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;GetFileContents&lt;/code&gt; can be used to retrieve the file contents rather than writing it out.</source>
          <target state="translated">&lt;code&gt;GetFileContents&lt;/code&gt; は、ファイルの内容を書き出すのではなく、取得するために使用できます。</target>
        </trans-unit>
        <trans-unit id="ad777db936a77fb5cda72b69a2424837a3dead8f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Getopt::Long&lt;/code&gt; upgraded to version 2.35</source>
          <target state="translated">&lt;code&gt;Getopt::Long&lt;/code&gt; がバージョン2.35にアップグレードされました</target>
        </trans-unit>
        <trans-unit id="645ac4cb7e7a0e4213f8a71c7bffc87052ad8695" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;HASH&lt;/code&gt; allows you to specify that a particular hash that you supply will be used as the cache. You can tie this hash beforehand to give it any behavior you want.</source>
          <target state="translated">&lt;code&gt;HASH&lt;/code&gt; を使用すると、指定した特定のハッシュをキャッシュとして使用するように指定できます。このハッシュを事前に結び付けて、必要な動作を与えることができます。</target>
        </trans-unit>
        <trans-unit id="58f7a794ce300f67c1868cdef889a2449308b6e5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;HOST&lt;/code&gt; is optional. If &lt;code&gt;HOST&lt;/code&gt; is not given then it may instead be passed as the &lt;code&gt;Host&lt;/code&gt; option described below.</source>
          <target state="translated">&lt;code&gt;HOST&lt;/code&gt; はオプションです。 &lt;code&gt;HOST&lt;/code&gt; が指定されていない場合は、以下で説明する &lt;code&gt;Host&lt;/code&gt; オプションとして渡すことができます。</target>
        </trans-unit>
        <trans-unit id="2bea88b5fbb79a39447dd7dee6828fe13741dd7d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;HOST&lt;/code&gt; is optional. If &lt;code&gt;HOST&lt;/code&gt; is not given then it may instead be passed as the &lt;code&gt;Host&lt;/code&gt; option described below. If neither is given then the &lt;code&gt;POP3_Hosts&lt;/code&gt; specified in &lt;code&gt;Net::Config&lt;/code&gt; will be used.</source>
          <target state="translated">&lt;code&gt;HOST&lt;/code&gt; はオプションです。 &lt;code&gt;HOST&lt;/code&gt; が指定されていない場合は、以下で説明する &lt;code&gt;Host&lt;/code&gt; オプションとして渡すことができます。どちらも指定されていない場合、 &lt;code&gt;Net::Config&lt;/code&gt; 指定された &lt;code&gt;POP3_Hosts&lt;/code&gt; が使用されます。</target>
        </trans-unit>
        <trans-unit id="6ef5e2b3a132260f1a90da7111d14884da83c5f5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;HOST&lt;/code&gt; is optional. If &lt;code&gt;HOST&lt;/code&gt; is not given then it may instead be passed as the &lt;code&gt;Host&lt;/code&gt; option described below. If neither is given then the &lt;code&gt;SMTP_Hosts&lt;/code&gt; specified in &lt;code&gt;Net::Config&lt;/code&gt; will be used.</source>
          <target state="translated">&lt;code&gt;HOST&lt;/code&gt; はオプションです。 &lt;code&gt;HOST&lt;/code&gt; が指定されていない場合は、以下で説明する &lt;code&gt;Host&lt;/code&gt; オプションとして渡すことができます。どちらも指定されていない場合、 &lt;code&gt;Net::Config&lt;/code&gt; 指定された &lt;code&gt;SMTP_Hosts&lt;/code&gt; が使用されます。</target>
        </trans-unit>
        <trans-unit id="e137f247fee18cceb87509d47cf2081b7b55b920" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Hash::Util::FieldHash&lt;/code&gt; addresses these issues on several levels.</source>
          <target state="translated">&lt;code&gt;Hash::Util::FieldHash&lt;/code&gt; は、いくつかのレベルでこれらの問題に対処します。</target>
        </trans-unit>
        <trans-unit id="da93bb4d317dc3025651186ee09e2f42a47f12aa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Hash::Util::FieldHash&lt;/code&gt; offers a number of functions in support of &lt;a href=&quot;#The-Inside-out-Technique&quot;&gt;&quot;The Inside-out Technique&quot;&lt;/a&gt; of class construction.</source>
          <target state="translated">&lt;code&gt;Hash::Util::FieldHash&lt;/code&gt; は、クラス構築の&lt;a href=&quot;#The-Inside-out-Technique&quot;&gt;「&lt;/a&gt;裏返しのテクニック」をサポートする多くの関数を提供します。</target>
        </trans-unit>
        <trans-unit id="f60ded3e01c5263ba32e63f38adc7c79d39cfd47" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Hash::Util::FieldHash&lt;/code&gt; offers a number of functions in support of &lt;a href=&quot;#The-Inside-out-Technique&quot;&gt;The Inside-out Technique&lt;/a&gt; of class construction.</source>
          <target state="translated">&lt;code&gt;Hash::Util::FieldHash&lt;/code&gt; は、クラス構築&lt;a href=&quot;#The-Inside-out-Technique&quot;&gt;のインサイドアウトテクニック&lt;/a&gt;をサポートする多数の関数を提供します。</target>
        </trans-unit>
        <trans-unit id="95d63c605b89445d7ec7678a1b23fa305e23d9ba" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Hash::Util&lt;/code&gt; and &lt;code&gt;Hash::Util::FieldHash&lt;/code&gt; contain special functions for manipulating hashes that don't really warrant a keyword.</source>
          <target state="translated">&lt;code&gt;Hash::Util&lt;/code&gt; および &lt;code&gt;Hash::Util::FieldHash&lt;/code&gt; は、実際にはキーワードを必要としないハッシュを操作するための特別な関数が含まれています。</target>
        </trans-unit>
        <trans-unit id="17c547e32204db6e5f3d81ca13c7bb8402e0a164" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Hash::Util&lt;/code&gt; contains a set of functions that support &lt;a href=&quot;#Restricted-hashes&quot;&gt;restricted hashes&lt;/a&gt;. These are described in this document. &lt;code&gt;Hash::Util::FieldHash&lt;/code&gt; contains an (unrelated) set of functions that support the use of hashes in</source>
          <target state="translated">&lt;code&gt;Hash::Util&lt;/code&gt; は、&lt;a href=&quot;#Restricted-hashes&quot;&gt;制限付きハッシュ&lt;/a&gt;をサポートする一連の関数が含まれています。これらはこのドキュメントで説明されています。 &lt;code&gt;Hash::Util::FieldHash&lt;/code&gt; は、ハッシュの使用をサポートする（関連のない）関数のセットが含まれています</target>
        </trans-unit>
        <trans-unit id="4521ed781c1809a085cb868447be747c9e97d7c4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;I&amp;lt;text&amp;gt;&lt;/code&gt; -- italic text</source>
          <target state="translated">&lt;code&gt;I&amp;lt;text&amp;gt;&lt;/code&gt; -斜体のテキスト</target>
        </trans-unit>
        <trans-unit id="f19d8d00c7506f07be1e885dde540332fdf6db0b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IN&lt;/code&gt;, &lt;code&gt;OUT&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;IN&lt;/code&gt;, &lt;code&gt;OUT&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8136f764d1a688860eb12b8f894dd5ef02bf2211" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;INIT&lt;/code&gt; blocks are run just before the Perl runtime begins execution, in &quot;first in, first out&quot; (FIFO) order.</source>
          <target state="translated">&lt;code&gt;INIT&lt;/code&gt; ブロックは、Perlランタイムが実行を開始する直前に「先入れ先出し」（FIFO）の順序で実行されます。</target>
        </trans-unit>
        <trans-unit id="049029b01299e7df2890b6b0dfade6fe1eb0300f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;INSTALLDIRS&lt;/code&gt; =vendor or equivalent. See &lt;code&gt;INSTALL&lt;/code&gt; for details.</source>
          <target state="translated">&lt;code&gt;INSTALLDIRS&lt;/code&gt; = vendorまたは同等のもの。詳細は &lt;code&gt;INSTALL&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="70d61eb52d40fc156965226f8146fe4021fa4cea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;INSTALLDIRS&lt;/code&gt;=vendor or equivalent. See &lt;code&gt;INSTALL&lt;/code&gt; for details.</source>
          <target state="translated">&lt;code&gt;INSTALLDIRS&lt;/code&gt; =ベンダーまたは同等のもの。詳細については、 &lt;code&gt;INSTALL&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="e11e57d805a97dc299623989e62dad5204f257b4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IO::Compress::Gzip&lt;/code&gt; doesn't have that filehandle limitation (this was one of the reasons for writing it in the first place). So if &lt;code&gt;IO::Compress::Gzip&lt;/code&gt; is used instead of &lt;code&gt;Compress::Zlib&lt;/code&gt; the whole tied filehandle code can be removed. Here is the rewritten code.</source>
          <target state="translated">&lt;code&gt;IO::Compress::Gzip&lt;/code&gt; はそのファイルハンドルの制限はありません（これがそもそもそれを書く理由の1つでした）。したがって、 &lt;code&gt;Compress::Zlib&lt;/code&gt; 代わりに &lt;code&gt;IO::Compress::Gzip&lt;/code&gt; を使用すると、結合されたファイルハンドルコード全体を削除できます。これが書き直されたコードです。</target>
        </trans-unit>
        <trans-unit id="bee0fffaa1deb24214806a0db486b288afec1012" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IO::Dir&lt;/code&gt; also provides an interface to reading directories via a tied hash. The tied hash extends the interface beyond just the directory reading routines by the use of &lt;code&gt;&lt;a href=&quot;../functions/lstat&quot;&gt;lstat&lt;/a&gt;&lt;/code&gt;, from the &lt;code&gt;File::stat&lt;/code&gt; package, &lt;code&gt;&lt;a href=&quot;../functions/unlink&quot;&gt;unlink&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../functions/rmdir&quot;&gt;rmdir&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../functions/utime&quot;&gt;utime&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;IO::Dir&lt;/code&gt; は、結合ハッシュを介してディレクトリを読み取るためのインターフェイスも提供します。結合ハッシュは、 &lt;code&gt;File::stat&lt;/code&gt; パッケージの &lt;code&gt;&lt;a href=&quot;../functions/unlink&quot;&gt;unlink&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../functions/rmdir&quot;&gt;rmdir&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;../functions/utime&quot;&gt;utime&lt;/a&gt;&lt;/code&gt; から &lt;code&gt;&lt;a href=&quot;../functions/lstat&quot;&gt;lstat&lt;/a&gt;&lt;/code&gt; を使用することにより、ディレクトリ読み取りルーチンだけでなくインターフェースを拡張します。</target>
        </trans-unit>
        <trans-unit id="bc058d68b0bf14976d523c35b36eecec377403c5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IO::Dir&lt;/code&gt; also provides an interface to reading directories via a tied hash. The tied hash extends the interface beyond just the directory reading routines by the use of &lt;code&gt;lstat&lt;/code&gt;, from the &lt;code&gt;File::stat&lt;/code&gt; package, &lt;code&gt;unlink&lt;/code&gt;, &lt;code&gt;rmdir&lt;/code&gt; and &lt;code&gt;utime&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;IO::Dir&lt;/code&gt; は、タイハッシュを介してディレクトリを読み取るためのインターフェイスも提供します。タイハッシュは、 &lt;code&gt;File::stat&lt;/code&gt; パッケージ、 &lt;code&gt;unlink&lt;/code&gt; 、 &lt;code&gt;rmdir&lt;/code&gt; 、および &lt;code&gt;utime&lt;/code&gt; からの &lt;code&gt;lstat&lt;/code&gt; を使用して、ディレクトリ読み取りルーチンだけでなくインターフェイスを拡張します。</target>
        </trans-unit>
        <trans-unit id="c5cd121c621a4892a83a568405af04eb41cfd019" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IO::File&lt;/code&gt; inherits from &lt;code&gt;IO::Handle&lt;/code&gt; and &lt;code&gt;IO::Seekable&lt;/code&gt; . It extends these classes with methods that are specific to file handles.</source>
          <target state="translated">&lt;code&gt;IO::File&lt;/code&gt; は &lt;code&gt;IO::Handle&lt;/code&gt; および &lt;code&gt;IO::Seekable&lt;/code&gt; 継承します。ファイルハンドルに固有のメソッドでこれらのクラスを拡張します。</target>
        </trans-unit>
        <trans-unit id="0aa9b65546e3ff6f78be697e65c92217a480b763" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IO::File&lt;/code&gt; inherits from &lt;code&gt;IO::Handle&lt;/code&gt; and &lt;code&gt;IO::Seekable&lt;/code&gt;. It extends these classes with methods that are specific to file handles.</source>
          <target state="translated">&lt;code&gt;IO::File&lt;/code&gt; は &lt;code&gt;IO::Handle&lt;/code&gt; と &lt;code&gt;IO::Seekable&lt;/code&gt; から継承します。これらのクラスを、ファイルハンドルに固有のメソッドで拡張します。</target>
        </trans-unit>
        <trans-unit id="181d096ff73f80c5fefbd49a6a2ace18cb883e5e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IO::Handle&lt;/code&gt; is the base class for all other IO handle classes. It is not intended that objects of &lt;code&gt;IO::Handle&lt;/code&gt; would be created directly, but instead &lt;code&gt;IO::Handle&lt;/code&gt; is inherited from by several other classes in the IO hierarchy.</source>
          <target state="translated">&lt;code&gt;IO::Handle&lt;/code&gt; は、他のすべてのIOハンドルクラスの基本クラスです。 &lt;code&gt;IO::Handle&lt;/code&gt; オブジェクトが直接作成されることは意図されていませんが、代わりに &lt;code&gt;IO::Handle&lt;/code&gt; はIO階層内の他のいくつかのクラスから継承されます。</target>
        </trans-unit>
        <trans-unit id="d968d8f7d184fabf28c8b22db7363ce4a8a51514" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IO::Pipe&lt;/code&gt; provides an interface to creating pipes between processes.</source>
          <target state="translated">&lt;code&gt;IO::Pipe&lt;/code&gt; は、プロセス間のパイプを作成するためのインターフェースを提供します。</target>
        </trans-unit>
        <trans-unit id="121507ef92369be28eeae4949c989ca1be6ada6d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IO::Poll&lt;/code&gt; is a simple interface to the system level poll routine.</source>
          <target state="translated">&lt;code&gt;IO::Poll&lt;/code&gt; は、システムレベルのポーリングルーチンへのシンプルなインターフェースです。</target>
        </trans-unit>
        <trans-unit id="b762583822e0aaee851ce4fa15cdffd15a962862" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IO::Seekable&lt;/code&gt; does not have a constructor of its own as it is intended to be inherited by other &lt;code&gt;IO::Handle&lt;/code&gt; based objects. It provides methods which allow seeking of the file descriptors.</source>
          <target state="translated">&lt;code&gt;IO::Seekable&lt;/code&gt; は、他の &lt;code&gt;IO::Handle&lt;/code&gt; ベースのオブジェクトによって継承されることを目的としているため、独自のコンストラクターはありません。ファイル記述子の検索を可能にするメソッドを提供します。</target>
        </trans-unit>
        <trans-unit id="fae721a22b9ed15cae54857c941efacbe4ac4115" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IO::Socket::INET&lt;/code&gt; INCOMPATIBILITES</source>
          <target state="translated">&lt;code&gt;IO::Socket::INET&lt;/code&gt; INCOMPATIBILITES</target>
        </trans-unit>
        <trans-unit id="db1b75ece72a66c0d61b6aa7b994a4cee97c3529" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IO::Socket::INET&lt;/code&gt; provides an object interface to creating and using sockets in the AF_INET domain. It is built upon the &lt;a href=&quot;../socket&quot;&gt;IO::Socket&lt;/a&gt; interface and inherits all the methods defined by &lt;a href=&quot;../socket&quot;&gt;IO::Socket&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;IO::Socket::INET&lt;/code&gt; は、AF_INETドメインでソケットを作成および使用するためのオブジェクトインターフェイスを提供します。これは、上に構築された&lt;a href=&quot;../socket&quot;&gt;IO ::ソケット&lt;/a&gt;インタフェースとで定義されたすべてのメソッドを継承&lt;a href=&quot;../socket&quot;&gt;IO ::ソケットを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e7b9070503ed10ed480814d03efb5b1cb2d93958" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IO::Socket::INET&lt;/code&gt; provides an object interface to creating and using sockets in the AF_INET domain. It is built upon the &lt;a href=&quot;IO::Socket&quot;&gt;IO::Socket&lt;/a&gt; interface and inherits all the methods defined by &lt;a href=&quot;IO::Socket&quot;&gt;IO::Socket&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;IO::Socket::INET&lt;/code&gt; は、AF_INETドメインでソケットを作成および使用するためのオブジェクトインターフェイスを提供します。これは、上に構築された&lt;a href=&quot;IO::Socket&quot;&gt;IO ::ソケット&lt;/a&gt;インタフェースとで定義されたすべてのメソッドを継承&lt;a href=&quot;IO::Socket&quot;&gt;IO ::ソケットを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2744dd59c94da190d0d62e09ca57d1eb32fb993e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IO::Socket::IP&lt;/code&gt; - Family-neutral IP socket supporting both IPv4 and IPv6</source>
          <target state="translated">&lt;code&gt;IO::Socket::IP&lt;/code&gt; -IPv4とIPv6の両方をサポートするファミリーニュートラルなIPソケット</target>
        </trans-unit>
        <trans-unit id="c93eb4eed4df3d33b0a651ea899704b014e2054f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IO::Socket::IP&lt;/code&gt; implements both the &lt;code&gt;Blocking&lt;/code&gt; and &lt;code&gt;Timeout&lt;/code&gt; parameters, but it implements the interaction of both in a different way.</source>
          <target state="translated">&lt;code&gt;IO::Socket::IP&lt;/code&gt; は、 &lt;code&gt;Blocking&lt;/code&gt; パラメーターと &lt;code&gt;Timeout&lt;/code&gt; パラメーターの両方を実装しますが、両方の相互作用を異なる方法で実装します。</target>
        </trans-unit>
        <trans-unit id="ac39f2a91093d9b2c233aa1a1fa7511814ecbb5a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IO::Socket::UNIX&lt;/code&gt; provides an object interface to creating and using sockets in the AF_UNIX domain. It is built upon the &lt;a href=&quot;../socket&quot;&gt;IO::Socket&lt;/a&gt; interface and inherits all the methods defined by &lt;a href=&quot;../socket&quot;&gt;IO::Socket&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;IO::Socket::UNIX&lt;/code&gt; は、AF_UNIXドメインでソケットを作成および使用するためのオブジェクトインターフェイスを提供します。これは、上に構築された&lt;a href=&quot;../socket&quot;&gt;IO ::ソケット&lt;/a&gt;インタフェースとで定義されたすべてのメソッドを継承&lt;a href=&quot;../socket&quot;&gt;IO ::ソケットを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="59125a8f2c04cb2a3779b8df378f1e19936995a8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IO::Socket::UNIX&lt;/code&gt; provides an object interface to creating and using sockets in the AF_UNIX domain. It is built upon the &lt;a href=&quot;IO::Socket&quot;&gt;IO::Socket&lt;/a&gt; interface and inherits all the methods defined by &lt;a href=&quot;IO::Socket&quot;&gt;IO::Socket&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;IO::Socket::UNIX&lt;/code&gt; は、AF_UNIXドメインでソケットを作成および使用するためのオブジェクトインターフェイスを提供します。これは、上に構築された&lt;a href=&quot;IO::Socket&quot;&gt;IO ::ソケット&lt;/a&gt;インタフェースとで定義されたすべてのメソッドを継承&lt;a href=&quot;IO::Socket&quot;&gt;IO ::ソケットを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="40650d5032309f0cec564470a3c4251ca646df3b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IO::Socket&lt;/code&gt; extends the &lt;a href=&quot;IO::Handle&quot;&gt;IO::Handle&lt;/a&gt; constructor.</source>
          <target state="translated">&lt;code&gt;IO::Socket&lt;/code&gt; は、&lt;a href=&quot;IO::Handle&quot;&gt;IO :: Handle&lt;/a&gt;コンストラクターを拡張します。</target>
        </trans-unit>
        <trans-unit id="9004227974930c2160a7c2617fd71a417645cb1f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IO::Socket&lt;/code&gt; inherits all methods from &lt;a href=&quot;IO::Handle&quot;&gt;IO::Handle&lt;/a&gt; and implements the following new ones.</source>
          <target state="translated">&lt;code&gt;IO::Socket&lt;/code&gt; 、&lt;a href=&quot;IO::Handle&quot;&gt;IO :: Handle&lt;/a&gt;からすべてのメソッドを継承し、次の新しいメソッドを実装します。</target>
        </trans-unit>
        <trans-unit id="3bd2ee527d81d620c0ee82901b0de81a0ca448b0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IO::Socket&lt;/code&gt; is a base class that really only defines methods for those operations which are common to all types of sockets. Operations which are specific to a particular socket domain have methods defined in subclasses of &lt;code&gt;IO::Socket&lt;/code&gt;. See &lt;a href=&quot;IO::Socket::INET&quot;&gt;IO::Socket::INET&lt;/a&gt;, &lt;a href=&quot;IO::Socket::UNIX&quot;&gt;IO::Socket::UNIX&lt;/a&gt;, and &lt;a href=&quot;IO::Socket::IP&quot;&gt;IO::Socket::IP&lt;/a&gt; for examples of such a subclass.</source>
          <target state="translated">&lt;code&gt;IO::Socket&lt;/code&gt; は、すべてのタイプのソケットに共通する操作のメソッドのみを実際に定義する基本クラスです。特定のソケットドメインに固有の操作には、 &lt;code&gt;IO::Socket&lt;/code&gt; サブクラスで定義されたメソッドがあります。このようなサブクラスの例については、&lt;a href=&quot;IO::Socket::INET&quot;&gt;IO :: Socket :: INET&lt;/a&gt;、&lt;a href=&quot;IO::Socket::UNIX&quot;&gt;IO :: Socket :: UNIX&lt;/a&gt;、および&lt;a href=&quot;IO::Socket::IP&quot;&gt;IO :: Socket :: IP&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="10cce9491bc1ee060453ba6f15ad058333b7daa9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IO::Socket&lt;/code&gt; only defines methods for those operations which are common to all types of socket. Operations which are specified to a socket in a particular domain have methods defined in sub classes of &lt;code&gt;IO::Socket&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;IO::Socket&lt;/code&gt; は、すべてのタイプのソケットに共通する操作のメソッドのみを定義します。特定のドメインのソケットに指定された操作には、 &lt;code&gt;IO::Socket&lt;/code&gt; サブクラスで定義されたメソッドがあります</target>
        </trans-unit>
        <trans-unit id="dd4122d764f9adaaacb15138a9de4abe82a136c9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IO::Socket&lt;/code&gt; provides an object interface to creating and using sockets. It is built upon the &lt;a href=&quot;handle&quot;&gt;IO::Handle&lt;/a&gt; interface and inherits all the methods defined by &lt;a href=&quot;handle&quot;&gt;IO::Handle&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;IO::Socket&lt;/code&gt; は、ソケットを作成および使用するためのオブジェクトインターフェイスを提供します。それは、上に構築された&lt;a href=&quot;handle&quot;&gt;IO ::ハンドル&lt;/a&gt;インタフェースと継承で定義されたすべてのメソッド&lt;a href=&quot;handle&quot;&gt;IO ::ハンドル&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="cbc98e06a245f459e7aa4e367096446d4d156e11" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IO::Socket&lt;/code&gt; provides an object-oriented, &lt;a href=&quot;IO::Handle&quot;&gt;IO::Handle&lt;/a&gt;-based interface to creating and using sockets via &lt;a href=&quot;socket&quot;&gt;Socket&lt;/a&gt;, which provides a near one-to-one interface to the C socket library.</source>
          <target state="translated">&lt;code&gt;IO::Socket&lt;/code&gt; 、オブジェクト指向、提供&lt;a href=&quot;IO::Handle&quot;&gt;IO ::ハンドル&lt;/a&gt;の作成を介してソケットを使用するベースのインターフェースを&lt;a href=&quot;socket&quot;&gt;ソケット&lt;/a&gt;Cソケットライブラリに近い一対一のインタフェースを提供し、。</target>
        </trans-unit>
        <trans-unit id="c8213ac1eede062f215203877643d19e45fea00f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IO::Socket&lt;/code&gt; will export all functions (and constants) defined by &lt;a href=&quot;../socket&quot;&gt;Socket&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;IO::Socket&lt;/code&gt; は、&lt;a href=&quot;../socket&quot;&gt;Socketで&lt;/a&gt;定義されたすべての関数（および定数）をエクスポートします。</target>
        </trans-unit>
        <trans-unit id="d6d4854eb195d0d904b8518ec5456b8866b0cb46" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IO::Socket&lt;/code&gt; will export all functions (and constants) defined by &lt;a href=&quot;socket&quot;&gt;Socket&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;IO::Socket&lt;/code&gt; は、&lt;a href=&quot;socket&quot;&gt;Socketで&lt;/a&gt;定義されたすべての関数（および定数）をエクスポートします。</target>
        </trans-unit>
        <trans-unit id="cd83dcf6db900152f50ebff530a4285e2ee66534" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IO::Zlib&lt;/code&gt; provides an IO:: style interface to &lt;a href=&quot;../compress/zlib&quot;&gt;Compress::Zlib&lt;/a&gt; and hence to gzip/zlib compressed files. It provides many of the same methods as the &lt;a href=&quot;handle&quot;&gt;IO::Handle&lt;/a&gt; interface.</source>
          <target state="translated">&lt;code&gt;IO::Zlib&lt;/code&gt; は、&lt;a href=&quot;../compress/zlib&quot;&gt;Compress :: Zlibに&lt;/a&gt;、したがってgzip / zlib圧縮ファイルにIO ::スタイルのインターフェースを提供します。&lt;a href=&quot;handle&quot;&gt;IO :: Handle&lt;/a&gt;インターフェースと同じメソッドの多くを提供します。</target>
        </trans-unit>
        <trans-unit id="c26edcd91da09797e67afa41ff1bd18072f7a477" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IO::Zlib&lt;/code&gt; provides an IO:: style interface to &lt;a href=&quot;Compress::Zlib&quot;&gt;Compress::Zlib&lt;/a&gt; and hence to gzip/zlib compressed files. It provides many of the same methods as the &lt;a href=&quot;IO::Handle&quot;&gt;IO::Handle&lt;/a&gt; interface.</source>
          <target state="translated">&lt;code&gt;IO::Zlib&lt;/code&gt; は、&lt;a href=&quot;Compress::Zlib&quot;&gt;Compress :: Zlib&lt;/a&gt;、したがってgzip / zlib圧縮ファイルへのIO ::スタイルのインターフェイスを提供します。&lt;a href=&quot;IO::Handle&quot;&gt;IO :: Handle&lt;/a&gt;インターフェースと同じメソッドの多くを提供します。</target>
        </trans-unit>
        <trans-unit id="d042d00c63eebc013a6991f1938ad31a79350e86" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IO&lt;/code&gt; provides a simple mechanism to load several of the IO modules in one go. The IO modules belonging to the core are:</source>
          <target state="translated">&lt;code&gt;IO&lt;/code&gt; は、一度に複数のIOモジュールをロードするシンプルなメカニズムを提供します。コアに属するIOモジュールは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="39b3396d21c463d28843aca7f77f27ca180d2d8a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IPC::SysV&lt;/code&gt; defines and conditionally exports all the constants defined in your system include files which are needed by the SysV IPC calls. Common ones include</source>
          <target state="translated">&lt;code&gt;IPC::SysV&lt;/code&gt; は、SysV IPC呼び出しで必要なシステムインクルードファイルで定義されたすべての定数を定義し、条件付きでエクスポートします。一般的なものは次のとおりです</target>
        </trans-unit>
        <trans-unit id="2d40c631720c575604798918e4820424289883cf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IS_NUMBER_NOT_INT&lt;/code&gt; will be set with &lt;code&gt;IS_NUMBER_IN_UV&lt;/code&gt; if trailing decimals were seen (in which case &lt;code&gt;*valuep&lt;/code&gt; gives the true value truncated to an integer), and &lt;code&gt;IS_NUMBER_NEG&lt;/code&gt; if the number is negative (in which case &lt;code&gt;*valuep&lt;/code&gt; holds the absolute value). &lt;code&gt;IS_NUMBER_IN_UV&lt;/code&gt; is not set if e notation was used or the number is larger than a UV.</source>
          <target state="translated">&lt;code&gt;IS_NUMBER_NOT_INT&lt;/code&gt; は、小数点以下が表示された場合は &lt;code&gt;IS_NUMBER_IN_UV&lt;/code&gt; で設定され（この場合、 &lt;code&gt;*valuep&lt;/code&gt; は整数に切り捨てられた真の値を示します）、数値が負の場合は &lt;code&gt;IS_NUMBER_NEG&lt;/code&gt; で設定され &lt;code&gt;*valuep&lt;/code&gt; （この場合、* valuepは絶対値を保持します）。表記が使用された場合、または数値がUVより大きい場合、 &lt;code&gt;IS_NUMBER_IN_UV&lt;/code&gt; は設定されません。</target>
        </trans-unit>
        <trans-unit id="1562c285ab3451fd66d7a87fd5d4aa1e870611f7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ITIMER_PROF&lt;/code&gt; counts time when either the process virtual time or when the operating system is running on behalf of the process (such as I/O). (This time is also known as the</source>
          <target state="translated">&lt;code&gt;ITIMER_PROF&lt;/code&gt; は、プロセスの仮想時間またはオペレーティングシステムがプロセス（I / Oなど）の代わりに実行されている時間をカウントします。（今回は、</target>
        </trans-unit>
        <trans-unit id="916bb6dbaa0ac1eb30ba18d51c95fd8868d21c77" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ITIMER_REAL&lt;/code&gt; results in &lt;code&gt;&lt;a href=&quot;../functions/alarm&quot;&gt;alarm()&lt;/a&gt;&lt;/code&gt;-like behaviour. Time is counted in</source>
          <target state="translated">&lt;code&gt;ITIMER_REAL&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;../functions/alarm&quot;&gt;alarm()&lt;/a&gt;&lt;/code&gt; のような動作になります。時間はカウントされます</target>
        </trans-unit>
        <trans-unit id="38757402332fd47a101c7a7bdf5d86c493895e1f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ITIMER_REAL&lt;/code&gt; results in &lt;code&gt;alarm()&lt;/code&gt;-like behaviour. Time is counted in</source>
          <target state="translated">&lt;code&gt;ITIMER_REAL&lt;/code&gt; は、 &lt;code&gt;alarm()&lt;/code&gt; のような動作をもたらします。時間はでカウントされます</target>
        </trans-unit>
        <trans-unit id="b3514de407012b9ae61544516605c3b826d3bb18" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ITIMER_VIRTUAL&lt;/code&gt; counts time in (process)</source>
          <target state="translated">&lt;code&gt;ITIMER_VIRTUAL&lt;/code&gt; は（プロセス）の時間をカウントします</target>
        </trans-unit>
        <trans-unit id="0f6ee03b655d23ae15f7f2e38af35133c2a4bc9a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;KEY&lt;/code&gt; does not already have a message queue associated with it, and &lt;code&gt;&lt;i&gt;FLAGS&lt;/i&gt; &amp;amp; IPC_CREAT&lt;/code&gt; is true.</source>
          <target state="translated">&lt;code&gt;KEY&lt;/code&gt; にはまだメッセージキューが関連付けられておらず、 &lt;code&gt;&lt;i&gt;FLAGS&lt;/i&gt; &amp;amp; IPC_CREAT&lt;/code&gt; はtrueです。</target>
        </trans-unit>
        <trans-unit id="c5066360834717c79b8e3ffa4cb0f67c9b492685" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;KEY&lt;/code&gt; does not already have a semaphore identifier associated with it, and &lt;code&gt;&lt;i&gt;FLAGS&lt;/i&gt; &amp;amp; IPC_CREAT&lt;/code&gt; is true.</source>
          <target state="translated">&lt;code&gt;KEY&lt;/code&gt; にはまだ関連付けられたセマフォ識別子がなく、 &lt;code&gt;&lt;i&gt;FLAGS&lt;/i&gt; &amp;amp; IPC_CREAT&lt;/code&gt; はtrueです。</target>
        </trans-unit>
        <trans-unit id="207e986bdced98f163af9eb0b72ea2467c1786de" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;KEY&lt;/code&gt; does not already have a shared memory segment associated with it, and &lt;code&gt;&lt;i&gt;FLAGS&lt;/i&gt; &amp;amp; IPC_CREAT&lt;/code&gt; is true.</source>
          <target state="translated">&lt;code&gt;KEY&lt;/code&gt; には、関連付けられた共有メモリセグメントがまだありません &lt;code&gt;&lt;i&gt;FLAGS&lt;/i&gt; &amp;amp; IPC_CREAT&lt;/code&gt; はtrueです。</target>
        </trans-unit>
        <trans-unit id="ecd4729fb1227e456d3b0559a1c30aa293feb4dd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;KEY&lt;/code&gt; is equal to &lt;code&gt;IPC_PRIVATE&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;KEY&lt;/code&gt; は &lt;code&gt;IPC_PRIVATE&lt;/code&gt; と等しい</target>
        </trans-unit>
        <trans-unit id="70c6c9ccf0a3e87b16004d2e590aed759ceca098" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;KS_C_5601-1987&lt;/code&gt; encoding is available as &lt;code&gt;kcs5601-raw&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;KS_C_5601-1987&lt;/code&gt; エンコーディングは &lt;code&gt;kcs5601-raw&lt;/code&gt; として利用できます。</target>
        </trans-unit>
        <trans-unit id="424cc25eb593661c978d8429628c32197f526490" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;L&amp;lt;/&quot;sec&quot;&amp;gt;&lt;/code&gt; or &lt;code&gt;L&amp;lt;/sec&amp;gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;L&amp;lt;/&quot;sec&quot;&amp;gt;&lt;/code&gt; または &lt;code&gt;L&amp;lt;/sec&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="157e5266177683b879059a170843454132e2ed37" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;L&amp;lt;name&amp;gt;&lt;/code&gt; -- a hyperlink</source>
          <target state="translated">&lt;code&gt;L&amp;lt;name&amp;gt;&lt;/code&gt; -ハイパーリンク</target>
        </trans-unit>
        <trans-unit id="49c6e0dffc5ce09a6e54b619b6e6a27123a96c0b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;L&amp;lt;name/&quot;sec&quot;&amp;gt;&lt;/code&gt; or &lt;code&gt;L&amp;lt;name/sec&amp;gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;L&amp;lt;name/&quot;sec&quot;&amp;gt;&lt;/code&gt; または &lt;code&gt;L&amp;lt;name/sec&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d7cfda930437215fcc4324e241d8c8fa32a8d9ba" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;L&amp;lt;text|/&quot;sec&quot;&amp;gt;&lt;/code&gt; or &lt;code&gt;L&amp;lt;text|/sec&amp;gt;&lt;/code&gt; or &lt;code&gt;L&amp;lt;text|&quot;sec&quot;&amp;gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;L&amp;lt;text|/&quot;sec&quot;&amp;gt;&lt;/code&gt; または &lt;code&gt;L&amp;lt;text|/sec&amp;gt;&lt;/code&gt; または &lt;code&gt;L&amp;lt;text|&quot;sec&quot;&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="469caa270c3821b85844c5da0bf1d2d3e7023d6b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;L&amp;lt;text|name/&quot;sec&quot;&amp;gt;&lt;/code&gt; or &lt;code&gt;L&amp;lt;text|name/sec&amp;gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;L&amp;lt;text|name/&quot;sec&quot;&amp;gt;&lt;/code&gt; または &lt;code&gt;L&amp;lt;text|name/sec&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7e6362a82e5577816d56f0e78605608fc1269151" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LANG&lt;/code&gt; is the &quot;catch-all&quot; locale environment variable. If it is set, it is used as the last resort after the overall &lt;code&gt;LC_ALL&lt;/code&gt; and the category-specific &lt;code&gt;LC_&lt;i&gt;foo&lt;/i&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;LANG&lt;/code&gt; は、「キャッチオール」ロケール環境変数です。設定されている場合は、全体的な &lt;code&gt;LC_ALL&lt;/code&gt; およびカテゴリ固有の &lt;code&gt;LC_&lt;i&gt;foo&lt;/i&gt;&lt;/code&gt; の後の最後の手段として使用されます。</target>
        </trans-unit>
        <trans-unit id="cbe0cb20951383c21785bc33780d8bd2ac85ed7c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LC_ALL&lt;/code&gt; is the &quot;override-all&quot; locale environment variable. If set, it overrides all the rest of the locale environment variables.</source>
          <target state="translated">&lt;code&gt;LC_ALL&lt;/code&gt; は、「override-all」ロケール環境変数です。設定すると、ロケール環境変数の残りすべてが上書きされます。</target>
        </trans-unit>
        <trans-unit id="2a605bd93ba14e29e4f244383a9eb2e02ef1549c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LC_ALL&lt;/code&gt;&lt;code&gt;LC_COLLATE&lt;/code&gt;&lt;code&gt;LC_CTYPE&lt;/code&gt;&lt;code&gt;LC_MONETARY&lt;/code&gt;&lt;code&gt;LC_NUMERIC&lt;/code&gt;&lt;code&gt;LC_TIME&lt;/code&gt;&lt;code&gt;LC_MESSAGES&lt;/code&gt; on systems that support them.</source>
          <target state="translated">&lt;code&gt;LC_ALL&lt;/code&gt; &lt;code&gt;LC_COLLATE&lt;/code&gt; &lt;code&gt;LC_CTYPE&lt;/code&gt; &lt;code&gt;LC_MONETARY&lt;/code&gt; &lt;code&gt;LC_NUMERIC&lt;/code&gt; &lt;code&gt;LC_TIME&lt;/code&gt; &lt;code&gt;LC_MESSAGES&lt;/code&gt; サポートするシステム。</target>
        </trans-unit>
        <trans-unit id="70c3c6ae91cafbe70b8de3e1db91b312cc5029fd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LDFROM&lt;/code&gt; defaults to the same as &lt;code&gt;OBJECT&lt;/code&gt;. &lt;code&gt;OBJECT&lt;/code&gt; defaults to, for &lt;code&gt;XSMULTI&lt;/code&gt;, just the XS filename with the extension replaced with the compiler-specific object-file extension.</source>
          <target state="translated">&lt;code&gt;LDFROM&lt;/code&gt; のデフォルトは &lt;code&gt;OBJECT&lt;/code&gt; と同じです。 &lt;code&gt;OBJECT&lt;/code&gt; のデフォルトは、 &lt;code&gt;XSMULTI&lt;/code&gt; の場合、拡張子がコンパイラ固有のオブジェクトファイル拡張子に置き換えられたXSファイル名のみです。</target>
        </trans-unit>
        <trans-unit id="2985ceb49d4b7007ec1f5ad9173e96849d54c926" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LDLOADLIBS&lt;/code&gt; is an environment variable used by the linker to link &lt;code&gt;/ext&lt;/code&gt; modules to glibc. Currently, that environment variable is not getting populated by a combination of &lt;code&gt;Config&lt;/code&gt; entries and &lt;code&gt;ExtUtil::MakeMaker&lt;/code&gt;. While there may be a bug somewhere in Perl's configuration or &lt;code&gt;ExtUtil::MakeMaker&lt;/code&gt; causing the problem, the most likely cause is an incomplete understanding of Sun Studio by this author. Further investigation is needed to get this working better.</source>
          <target state="translated">&lt;code&gt;LDLOADLIBS&lt;/code&gt; は、リンカーが &lt;code&gt;/ext&lt;/code&gt; モジュールをglibcにリンクするために使用する環境変数です。現在、その環境変数は、 &lt;code&gt;Config&lt;/code&gt; エントリと &lt;code&gt;ExtUtil::MakeMaker&lt;/code&gt; 組み合わせによって設定されていません。Perlの構成または &lt;code&gt;ExtUtil::MakeMaker&lt;/code&gt; のどこかにバグが原因で問題が発生している可能性がありますが、最も可能性の高い原因は、この作成者によるSunStudioの不完全な理解です。これをより良く機能させるには、さらなる調査が必要です。</target>
        </trans-unit>
        <trans-unit id="dbb846da3ade953702217e651317e4e13b66b385" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LDLOADLIBS&lt;/code&gt; is an environment variable used by the linker to link modules &lt;code&gt;/ext&lt;/code&gt; modules to glibc. Currently, that environment variable is not getting populated by a combination of &lt;code&gt;Config&lt;/code&gt; entries and &lt;code&gt;ExtUtil::MakeMaker&lt;/code&gt; . While there may be a bug somewhere in Perl's configuration or &lt;code&gt;ExtUtil::MakeMaker&lt;/code&gt; causing the problem, the most likely cause is an incomplete understanding of Sun Studio by this author. Further investigation is needed to get this working better.</source>
          <target state="translated">&lt;code&gt;LDLOADLIBS&lt;/code&gt; は、リンカーがモジュール &lt;code&gt;/ext&lt;/code&gt; モジュールをglibc にリンクするために使用する環境変数です。現在、その環境変数は、 &lt;code&gt;Config&lt;/code&gt; エントリと &lt;code&gt;ExtUtil::MakeMaker&lt;/code&gt; 組み合わせによって入力されていません。Perlの構成または &lt;code&gt;ExtUtil::MakeMaker&lt;/code&gt; のどこかにバグが原因で問題が発生している可能性がありますが、最も可能性の高い原因は、この作成者によるSun Studioの不完全な理解です。これをうまく機能させるには、さらに調査が必要です。</target>
        </trans-unit>
        <trans-unit id="c5b9a4de9a3ae26621d0664f9d7809fc1540d360" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LOG_ALERT&lt;/code&gt; - action must be taken immediately</source>
          <target state="translated">&lt;code&gt;LOG_ALERT&lt;/code&gt; -すぐに対処する必要があります</target>
        </trans-unit>
        <trans-unit id="237f0827d3b068adf7a9e035db022146d0403fad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LOG_AUDIT&lt;/code&gt; - audit daemon (IRIX); falls back to &lt;code&gt;LOG_AUTH&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;LOG_AUDIT&lt;/code&gt; -監査デーモン（IRIX）; &lt;code&gt;LOG_AUTH&lt;/code&gt; にフォールバック</target>
        </trans-unit>
        <trans-unit id="f42cb5530d45add6db1cc3521ca69ba4aa90a4c9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LOG_AUTH&lt;/code&gt; - security/authorization messages</source>
          <target state="translated">&lt;code&gt;LOG_AUTH&lt;/code&gt; -セキュリティ/承認メッセージ</target>
        </trans-unit>
        <trans-unit id="3bbcebef65476f32b381cbd6c89052eca4c688cd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LOG_AUTHPRIV&lt;/code&gt; - security/authorization messages (private)</source>
          <target state="translated">&lt;code&gt;LOG_AUTHPRIV&lt;/code&gt; -セキュリティ/認証メッセージ（プライベート）</target>
        </trans-unit>
        <trans-unit id="66c8e15153bb0c1370176e3d28f81ed1595261c0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LOG_CONSOLE&lt;/code&gt; - &lt;code&gt;/dev/console&lt;/code&gt; output (FreeBSD); falls back to &lt;code&gt;LOG_USER&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;LOG_CONSOLE&lt;/code&gt; - &lt;code&gt;/dev/console&lt;/code&gt; 出力（FreeBSDの）。 &lt;code&gt;LOG_USER&lt;/code&gt; にフォールバック</target>
        </trans-unit>
        <trans-unit id="4e27b059f195281b93d28d6c22b89428b572bc11" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LOG_CRIT&lt;/code&gt; - critical conditions</source>
          <target state="translated">&lt;code&gt;LOG_CRIT&lt;/code&gt; -重要な状態</target>
        </trans-unit>
        <trans-unit id="ba52df2842e88f76f3ea0623ac07d547b385a40d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LOG_CRON&lt;/code&gt; - clock daemons (&lt;b&gt;cron&lt;/b&gt; and &lt;b&gt;at&lt;/b&gt;)</source>
          <target state="translated">&lt;code&gt;LOG_CRON&lt;/code&gt; -クロックデーモン（&lt;b&gt;cron&lt;/b&gt;および&lt;b&gt;at&lt;/b&gt;）</target>
        </trans-unit>
        <trans-unit id="2dbc2c1ef0a0587ee5b98f17edb40e479195a525" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LOG_DAEMON&lt;/code&gt; - system daemons without separate facility value</source>
          <target state="translated">&lt;code&gt;LOG_DAEMON&lt;/code&gt; -個別のファシリティ値のないシステムデーモン</target>
        </trans-unit>
        <trans-unit id="db33909f631279fc62be328b4a3cd8cd3c40aa86" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LOG_DEBUG&lt;/code&gt; - debug-level message</source>
          <target state="translated">&lt;code&gt;LOG_DEBUG&lt;/code&gt; -デバッグレベルのメッセージ</target>
        </trans-unit>
        <trans-unit id="547e87ee1a00b634dd9ca9748f7b928c07f9c109" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LOG_EMERG&lt;/code&gt; - system is unusable</source>
          <target state="translated">&lt;code&gt;LOG_EMERG&lt;/code&gt; -システムは使用できません</target>
        </trans-unit>
        <trans-unit id="84f38a55790519e7289c11e43a4b3e68d8bf1ff3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LOG_ERR&lt;/code&gt; - error conditions</source>
          <target state="translated">&lt;code&gt;LOG_ERR&lt;/code&gt; -エラー状態</target>
        </trans-unit>
        <trans-unit id="923dddf491efec34b2f743e971b8ab73b788823c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LOG_FTP&lt;/code&gt; - FTP daemon</source>
          <target state="translated">&lt;code&gt;LOG_FTP&lt;/code&gt; -FTPデーモン</target>
        </trans-unit>
        <trans-unit id="2810346d0bc86bf8fd5e7cc51a029ebc1866a38a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LOG_INFO&lt;/code&gt; - informational message</source>
          <target state="translated">&lt;code&gt;LOG_INFO&lt;/code&gt; -情報メッセージ</target>
        </trans-unit>
        <trans-unit id="810d439031214499a1a46da8644f07fba574bb75" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LOG_INSTALL&lt;/code&gt; - installer subsystem (Mac OS X); falls back to &lt;code&gt;LOG_USER&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;LOG_INSTALL&lt;/code&gt; -インストーラサブシステム（Mac OS X）; &lt;code&gt;LOG_USER&lt;/code&gt; にフォールバック</target>
        </trans-unit>
        <trans-unit id="a72f3a1f407764857c6cbddf292afebce5708e26" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LOG_KERN&lt;/code&gt; - kernel messages</source>
          <target state="translated">&lt;code&gt;LOG_KERN&lt;/code&gt; -カーネルメッセージ</target>
        </trans-unit>
        <trans-unit id="145dd6e7d02588995730762df479040434b90e87" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LOG_LAUNCHD&lt;/code&gt; - launchd - general bootstrap daemon (Mac OS X); falls back to &lt;code&gt;LOG_DAEMON&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;LOG_LAUNCHD&lt;/code&gt; - launchd-一般的なブートストラップデーモン（Mac OS X）; &lt;code&gt;LOG_DAEMON&lt;/code&gt; にフォールバック</target>
        </trans-unit>
        <trans-unit id="214ec5d4b6bc561d6ad7defc22b80f3e2275f46e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LOG_LFMT&lt;/code&gt; - logalert facility; falls back to &lt;code&gt;LOG_USER&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;LOG_LFMT&lt;/code&gt; -ログアラート機能。 &lt;code&gt;LOG_USER&lt;/code&gt; にフォールバック</target>
        </trans-unit>
        <trans-unit id="9f9e78f2c8460f654b3f822d56b4a20c7f97a05c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LOG_LOCAL0&lt;/code&gt; through &lt;code&gt;LOG_LOCAL7&lt;/code&gt; - reserved for local use</source>
          <target state="translated">&lt;code&gt;LOG_LOCAL0&lt;/code&gt; から &lt;code&gt;LOG_LOCAL7&lt;/code&gt; -ローカルで使用するために予約</target>
        </trans-unit>
        <trans-unit id="9d106db2a7093dbbcdde8fcb1a2d6d87e9b01b80" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LOG_LPR&lt;/code&gt; - line printer subsystem</source>
          <target state="translated">&lt;code&gt;LOG_LPR&lt;/code&gt; -ラインプリンターサブシステム</target>
        </trans-unit>
        <trans-unit id="fc9ecbaae62209484725350ec9107688a7090a3c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LOG_MAIL&lt;/code&gt; - mail subsystem</source>
          <target state="translated">&lt;code&gt;LOG_MAIL&lt;/code&gt; -メールサブシステム</target>
        </trans-unit>
        <trans-unit id="68a0b196a5afe3c65a5416f6289f9e5ab591cf16" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LOG_NETINFO&lt;/code&gt; - NetInfo subsystem (Mac OS X); falls back to &lt;code&gt;LOG_DAEMON&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;LOG_NETINFO&lt;/code&gt; -NetInfoサブシステム（Mac OS X）; &lt;code&gt;LOG_DAEMON&lt;/code&gt; にフォールバック</target>
        </trans-unit>
        <trans-unit id="f43420fd0cb94acf50948f76eec025cbaa77e17e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LOG_NEWS&lt;/code&gt; - USENET news subsystem</source>
          <target state="translated">&lt;code&gt;LOG_NEWS&lt;/code&gt; -USENETニュースサブシステム</target>
        </trans-unit>
        <trans-unit id="2ec24d33b2ae9e7047498fb9e3d3584709723001" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LOG_NOTICE&lt;/code&gt; - normal, but significant, condition</source>
          <target state="translated">&lt;code&gt;LOG_NOTICE&lt;/code&gt; -正常ですが重要な状態</target>
        </trans-unit>
        <trans-unit id="e6a5a7e6bfe7417ec509bcbeaa879f188f7d835f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LOG_NTP&lt;/code&gt; - NTP subsystem (FreeBSD, NetBSD); falls back to &lt;code&gt;LOG_DAEMON&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;LOG_NTP&lt;/code&gt; -NTPサブシステム（FreeBSD、NetBSD）; &lt;code&gt;LOG_DAEMON&lt;/code&gt; にフォールバック</target>
        </trans-unit>
        <trans-unit id="c8ed9c91dc90bf6651bc34dcf127ecc62698e74f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LOG_RAS&lt;/code&gt; - Remote Access Service (VPN / PPP) (Mac OS X); falls back to &lt;code&gt;LOG_AUTH&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;LOG_RAS&lt;/code&gt; -リモートアクセスサービス（VPN / PPP）（Mac OS X）; &lt;code&gt;LOG_AUTH&lt;/code&gt; にフォールバック</target>
        </trans-unit>
        <trans-unit id="1d1370c52935d36881489c690df052afe5808f6f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LOG_REMOTEAUTH&lt;/code&gt; - remote authentication/authorization (Mac OS X); falls back to &lt;code&gt;LOG_AUTH&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;LOG_REMOTEAUTH&lt;/code&gt; -リモート認証/承認（Mac OS X）; &lt;code&gt;LOG_AUTH&lt;/code&gt; にフォールバック</target>
        </trans-unit>
        <trans-unit id="99ed180210288ab3e370d1a6d5c442e1922fb0b3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LOG_SECURITY&lt;/code&gt; - security subsystems (firewalling, etc.) (FreeBSD); falls back to &lt;code&gt;LOG_AUTH&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;LOG_SECURITY&lt;/code&gt; -セキュリティサブシステム（ファイアウォールなど）（FreeBSD）; &lt;code&gt;LOG_AUTH&lt;/code&gt; にフォールバック</target>
        </trans-unit>
        <trans-unit id="250b3c4116937e10b2dd4bb886f3a9692745b1a1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LOG_SYSLOG&lt;/code&gt; - messages generated internally by &lt;b&gt;syslogd&lt;/b&gt;</source>
          <target state="translated">&lt;code&gt;LOG_SYSLOG&lt;/code&gt; - &lt;b&gt;syslogd&lt;/b&gt;によって内部的に生成されたメッセージ&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="5693d6936c597501156c3bfbaa61d338dc924d55" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LOG_USER&lt;/code&gt; (default) - generic user-level messages</source>
          <target state="translated">&lt;code&gt;LOG_USER&lt;/code&gt; （デフォルト）-一般的なユーザーレベルのメッセージ</target>
        </trans-unit>
        <trans-unit id="b501add985d47c9765f5bd1b490e959970b698de" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LOG_UUCP&lt;/code&gt; - UUCP subsystem</source>
          <target state="translated">&lt;code&gt;LOG_UUCP&lt;/code&gt; -UUCPサブシステム</target>
        </trans-unit>
        <trans-unit id="3014983e7b8fc4728dedbc24c3bba2111d82a818" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LOG_WARNING&lt;/code&gt; - warning conditions</source>
          <target state="translated">&lt;code&gt;LOG_WARNING&lt;/code&gt; -警告状態</target>
        </trans-unit>
        <trans-unit id="1433a08249bc65ea23ef55820e06c9d207bedd84" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LaTeX&lt;/code&gt; docs</source>
          <target state="translated">&lt;code&gt;LaTeX&lt;/code&gt; ドキュメント</target>
        </trans-unit>
        <trans-unit id="29ef25139769a76305576be8c28dfb5626feb920" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;List::Util::XS&lt;/code&gt; can be used as a dependency to ensure List::Util was installed using a C compiler and that the XS version is installed.</source>
          <target state="translated">&lt;code&gt;List::Util::XS&lt;/code&gt; を依存関係として使用して、List :: UtilがCコンパイラを使用してインストールされ、XSバージョンがインストールされていることを確認できます。</target>
        </trans-unit>
        <trans-unit id="0f6594b32e1bb13da602c72066748f19da6777cd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;List::Util&lt;/code&gt; contains a selection of subroutines that people have expressed would be nice to have in the perl core, but the usage would not really be high enough to warrant the use of a keyword, and the size so small such that being individual extensions would be wasteful.</source>
          <target state="translated">&lt;code&gt;List::Util&lt;/code&gt; は、perlコアに含めると便利だとユーザーが表明した一連のサブルーチンが含まれていますが、実際の使用率はキーワードの使用を保証するほど高くはなく、サイズが非常に小さいため、個々の拡張機能になります。無駄になります。</target>
        </trans-unit>
        <trans-unit id="caed75c6b696cf9b38470cf4de8d8d2a229b0fa1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;MEMORY&lt;/code&gt; means that return values from the function will be cached in an ordinary Perl hash variable. The hash variable will not persist after the program exits. This is the default.</source>
          <target state="translated">&lt;code&gt;MEMORY&lt;/code&gt; は、関数からの戻り値が通常のPerlハッシュ変数にキャッシュされることを意味します。ハッシュ変数は、プログラムの終了後は保持されません。これがデフォルトです。</target>
        </trans-unit>
        <trans-unit id="48f95b732cd622ecaa5f9f2a904a2e8c470bada2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;MERGE&lt;/code&gt; normally means that the memoized function does not distinguish between list and sclar context, and that return values in both contexts should be stored together. Both &lt;code&gt;LIST_CACHE =&amp;gt;
MERGE&lt;/code&gt; and &lt;code&gt;SCALAR_CACHE =&amp;gt; MERGE&lt;/code&gt; mean the same thing.</source>
          <target state="translated">&lt;code&gt;MERGE&lt;/code&gt; は通常、メモ化された関数がリストコンテキストとスカルコンテキストを区別せず、両方のコンテキストの戻り値を一緒に格納する必要があることを意味します。 &lt;code&gt;LIST_CACHE =&amp;gt; MERGE&lt;/code&gt; と &lt;code&gt;SCALAR_CACHE =&amp;gt; MERGE&lt;/code&gt; はどちらも同じ意味です。</target>
        </trans-unit>
        <trans-unit id="591b83ff43053b950080d0a4ce9c5949d6f3c019" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;MESSAGE-SPEC&lt;/code&gt; is either a single message-id, a single message number, or a reference to a list of two message numbers.</source>
          <target state="translated">&lt;code&gt;MESSAGE-SPEC&lt;/code&gt; は、単一のメッセージID、単一のメッセージ番号、または2つのメッセージ番号のリストへの参照です。</target>
        </trans-unit>
        <trans-unit id="c9b72b4d0555bfa671bef6529fae93ee0af5e5e2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;MESSAGE&lt;/code&gt; can be either an array of lines or a reference to an array and must be encoded by the caller to octets of whatever encoding is required, e.g. by using the Encode module's &lt;code&gt;encode()&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;MESSAGE&lt;/code&gt; は、行の配列または配列への参照のいずれかであり、呼び出し元が必要なエンコードのオクテットにエンコードする必要があります。たとえば、Encodeモジュールの &lt;code&gt;encode()&lt;/code&gt; 関数を使用します。</target>
        </trans-unit>
        <trans-unit id="6b4436b9064bf3c37f88daa98294a385d8b90cd6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;MESSAGE&lt;/code&gt; can be either an array of lines or a reference to an array.</source>
          <target state="translated">&lt;code&gt;MESSAGE&lt;/code&gt; は、行の配列または配列への参照のいずれかです。</target>
        </trans-unit>
        <trans-unit id="e653378310d2f1452e27b8ec6a9a29dcc48a85bf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;MODE&lt;/code&gt; is optional; the default is &lt;code&gt;LOCK_EX&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;MODE&lt;/code&gt; はオプションです。デフォルトは &lt;code&gt;LOCK_EX&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="378372d266e8b276f88f8fa38b4d7dc2e69a722c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;MODE&lt;/code&gt; is optional; the default is &lt;code&gt;LOCK_EX&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;MODE&lt;/code&gt; はオプションです。デフォルトは &lt;code&gt;LOCK_EX&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="54cc55c9fcc474e1b57012d8a54afe281f15b529" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;MODIFY_&amp;lt;reftype&amp;gt;_ATTRIBUTES&lt;/code&gt; has to return a list of all &quot;bad attributes&quot;. If there are any bad attributes &lt;code&gt;&lt;a href=&quot;functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; croaks.</source>
          <target state="translated">&lt;code&gt;MODIFY_&amp;lt;reftype&amp;gt;_ATTRIBUTES&lt;/code&gt; は、すべての「不良属性」のリストを返す必要があります。悪い属性がある場合は、croaksを &lt;code&gt;&lt;a href=&quot;functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="e9f3a45a740e9e734772c8f9b4c0e272bb57ba32" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;MODIFY_&amp;lt;reftype&amp;gt;_ATTRIBUTES&lt;/code&gt; has to return a list of all &quot;bad attributes&quot;. If there are any bad attributes &lt;code&gt;import&lt;/code&gt; croaks.</source>
          <target state="translated">&lt;code&gt;MODIFY_&amp;lt;reftype&amp;gt;_ATTRIBUTES&lt;/code&gt; は、すべての「不正な属性」のリストを返す必要があります。悪い属性がある場合は、詐欺師を &lt;code&gt;import&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="c9365cb8b2d631f82760b183dda9cef7c6a3f7bb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;MSGNUM&lt;/code&gt; is a numeric id of an article in the current newsgroup, and will change the current article pointer. &lt;code&gt;MSGID&lt;/code&gt; is the message id of an article as shown in that article's header. It is anticipated that the client will obtain the &lt;code&gt;MSGID&lt;/code&gt; from a list provided by the &lt;code&gt;newnews&lt;/code&gt; command, from references contained within another article, or from the message-id provided in the response to some other commands.</source>
          <target state="translated">&lt;code&gt;MSGNUM&lt;/code&gt; は現在のニュースグループの記事の数値IDであり、現在の記事のポインタを変更します。 &lt;code&gt;MSGID&lt;/code&gt; は、記事のヘッダーに表示される記事のメッセージIDです。クライアントが取得することが予想される &lt;code&gt;MSGID&lt;/code&gt; をによって提供されたリストから &lt;code&gt;newnews&lt;/code&gt; 別の記事に含まれる参考文献から、またはいくつかの他のコマンドに応答して提供メッセージIDから、コマンド。</target>
        </trans-unit>
        <trans-unit id="0b82f8a8dfe207b711438bcea7b057597e325f09" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Math::BigFloat&lt;/code&gt; exports nothing by default, but can export the &lt;code&gt;bpi()&lt;/code&gt; method:</source>
          <target state="translated">&lt;code&gt;Math::BigFloat&lt;/code&gt; はデフォルトでは何もエクスポートしませんが、 &lt;code&gt;bpi()&lt;/code&gt; メソッドをエクスポートできます：</target>
        </trans-unit>
        <trans-unit id="3eb8ec3365756417fe447a7e9bec6396a236661f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Math::BigInt&lt;/code&gt; exports nothing by default, but can export the following methods:</source>
          <target state="translated">&lt;code&gt;Math::BigInt&lt;/code&gt; はデフォルトでは何もエクスポートしませんが、次のメソッドをエクスポートできます：</target>
        </trans-unit>
        <trans-unit id="86796664240378317064dfe323481f8be1c41b3b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Math::Trig&lt;/code&gt; defines many trigonometric functions not defined by the core Perl which defines only the &lt;code&gt;&lt;a href=&quot;../functions/sin&quot;&gt;sin()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../functions/cos&quot;&gt;cos()&lt;/a&gt;&lt;/code&gt;. The constant &lt;b&gt;pi&lt;/b&gt; is also defined as are a few convenience functions for angle conversions, and</source>
          <target state="translated">&lt;code&gt;Math::Trig&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;../functions/sin&quot;&gt;sin()&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../functions/cos&quot;&gt;cos()&lt;/a&gt;&lt;/code&gt; のみを定義するコアPerlによって定義されていない多くの三角関数を定義します。定数&lt;b&gt;pi&lt;/b&gt;は、角度変換のためのいくつかの便利な関数としても定義されています。</target>
        </trans-unit>
        <trans-unit id="2b0740f6f22cb731243c0ef8f948cd5b0f4d0eb4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Math::Trig&lt;/code&gt; defines many trigonometric functions not defined by the core Perl which defines only the &lt;code&gt;sin()&lt;/code&gt; and &lt;code&gt;cos()&lt;/code&gt;. The constant &lt;b&gt;pi&lt;/b&gt; is also defined as are a few convenience functions for angle conversions, and</source>
          <target state="translated">&lt;code&gt;Math::Trig&lt;/code&gt; は、 &lt;code&gt;sin()&lt;/code&gt; と &lt;code&gt;cos()&lt;/code&gt; のみを定義するコアPerlでは定義されていない多くの三角関数を定義します。定数&lt;b&gt;pi&lt;/b&gt;は、角度変換のためのいくつかの便利な関数としても定義されます。</target>
        </trans-unit>
        <trans-unit id="b2bc5499f96f8d490fa45681e115f5659299bf42" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Module::Load&lt;/code&gt; cannot do implicit imports, only explicit imports. (in other words, you always have to specify explicitly what you wish to import from a module, even if the functions are in that modules' &lt;code&gt;@EXPORT&lt;/code&gt; )</source>
          <target state="translated">&lt;code&gt;Module::Load&lt;/code&gt; は暗黙的なインポートを実行できません。明示的なインポートのみを実行できます。（つまり、関数がそのモジュールの &lt;code&gt;@EXPORT&lt;/code&gt; にある場合でも、モジュールからインポートするものを常に明示的に指定する必要があります）</target>
        </trans-unit>
        <trans-unit id="96dbf75f04bf4eae3d08d50c960a053035c78efe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Module::Load&lt;/code&gt; cannot do implicit imports, only explicit imports. (in other words, you always have to specify explicitly what you wish to import from a module, even if the functions are in that modules' &lt;code&gt;@EXPORT&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;Module::Load&lt;/code&gt; は暗黙的なインポートを実行できず、明示的なインポートのみを実行できます。（つまり、関数がそのモジュールの &lt;code&gt;@EXPORT&lt;/code&gt; にある場合でも、モジュールからインポートするものを常に明示的に指定する必要があります）</target>
        </trans-unit>
        <trans-unit id="90453d3a96e2d1be5968891ad0e49d8b22e92f79" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Module::Load&lt;/code&gt; eliminates the need for this overhead and will just DWYM.</source>
          <target state="translated">&lt;code&gt;Module::Load&lt;/code&gt; は、このオーバーヘッドの必要性をなくし、DWYMのみを使用します。</target>
        </trans-unit>
        <trans-unit id="74208c2657c1b301aa548767a2ba31ea449e885f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Module::Load&lt;/code&gt; eliminates the need to know whether you are trying to require either a file or a module.</source>
          <target state="translated">&lt;code&gt;Module::Load&lt;/code&gt; は、ファイルまたはモジュールのどちらを必要とするかを知る必要をなくします。</target>
        </trans-unit>
        <trans-unit id="5481b4ff4d996da71a1f92b3cdbdc34272a5f78f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Module::Load&lt;/code&gt; imports the two functions - &lt;code&gt;load&lt;/code&gt; and &lt;code&gt;autoload&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Module::Load&lt;/code&gt; は2つの関数（ &lt;code&gt;load&lt;/code&gt; と &lt;code&gt;autoload&lt;/code&gt; )をインポートします</target>
        </trans-unit>
        <trans-unit id="f7473e15d5603885d58a7bd80f8714e73bf8218f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Moo&lt;/code&gt; does not implement most of &lt;code&gt;Moose&lt;/code&gt; 's introspection API, so it's often faster when loading your modules. Additionally, none of its dependencies require XS, so it can be installed on machines without a compiler.</source>
          <target state="translated">&lt;code&gt;Moo&lt;/code&gt; は &lt;code&gt;Moose&lt;/code&gt; のイントロスペクションAPIのほとんどを実装していないので、モジュールをロードするときに高速になることがよくあります。さらに、XSを必要とする依存関係がないため、コンパイラーなしでマシンにインストールできます。</target>
        </trans-unit>
        <trans-unit id="42653b2d52cbaf2dd816155b47ebb7bcadbf3523" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Moo&lt;/code&gt; does not implement most of &lt;code&gt;Moose&lt;/code&gt;'s introspection API, so it's often faster when loading your modules. Additionally, none of its dependencies require XS, so it can be installed on machines without a compiler.</source>
          <target state="translated">&lt;code&gt;Moo&lt;/code&gt; は &lt;code&gt;Moose&lt;/code&gt; のイントロスペクションAPIのほとんどを実装していないため、モジュールをロードするときの方が高速であることがよくあります。さらに、その依存関係にはXSが必要ないため、コンパイラなしでマシンにインストールできます。</target>
        </trans-unit>
        <trans-unit id="dc1aeb4ab86751cc99266670857f5c4535affec0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Moose&lt;/code&gt; also has several dependencies on other modules. Most of these are small stand-alone modules, a number of which have been spun off from &lt;code&gt;Moose&lt;/code&gt; . &lt;code&gt;Moose&lt;/code&gt; itself, and some of its dependencies, require a compiler. If you need to install your software on a system without a compiler, or if having</source>
          <target state="translated">&lt;code&gt;Moose&lt;/code&gt; は他のモジュールにもいくつか依存しています。これらのほとんどは小さなスタンドアロンモジュールであり、その多くは &lt;code&gt;Moose&lt;/code&gt; から分離されています。 &lt;code&gt;Moose&lt;/code&gt; 自体、およびその依存関係の一部にはコンパイラが必要です。コンパイラのないシステムにソフトウェアをインストールする必要がある場合、または</target>
        </trans-unit>
        <trans-unit id="b0e4bae35dcf1f0fabbdb9fe0daf37302b3da627" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Moose&lt;/code&gt; also has several dependencies on other modules. Most of these are small stand-alone modules, a number of which have been spun off from &lt;code&gt;Moose&lt;/code&gt;. &lt;code&gt;Moose&lt;/code&gt; itself, and some of its dependencies, require a compiler. If you need to install your software on a system without a compiler, or if having</source>
          <target state="translated">&lt;code&gt;Moose&lt;/code&gt; には、他のモジュールにもいくつかの依存関係があります。これらのほとんどは小さなスタンドアロンモジュールであり、その多くは &lt;code&gt;Moose&lt;/code&gt; からスピンオフされています。 &lt;code&gt;Moose&lt;/code&gt; 自体、およびその依存関係の一部には、コンパイラが必要です。コンパイラのないシステムにソフトウェアをインストールする必要がある場合、または</target>
        </trans-unit>
        <trans-unit id="236ade4b13836c1f86dfc2aa8501e99d8d969296" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Moose&lt;/code&gt; can make your code slower to load. &lt;code&gt;Moose&lt;/code&gt; itself is not small, and it does a</source>
          <target state="translated">&lt;code&gt;Moose&lt;/code&gt; はコードの読み込みを遅くする可能性があります。 &lt;code&gt;Moose&lt;/code&gt; 自体は小さくありません、そしてそれはします</target>
        </trans-unit>
        <trans-unit id="d7a89c86bfe3cc38e7ff728cc8fb18a11f892bbe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Moose&lt;/code&gt; describes itself using its own introspection API. Besides being a cool trick, this means that you can extend &lt;code&gt;Moose&lt;/code&gt; using &lt;code&gt;Moose&lt;/code&gt; itself.</source>
          <target state="translated">&lt;code&gt;Moose&lt;/code&gt; は、独自のイントロスペクションAPIを使用して自分自身を説明します。クールなトリックであることに加え、この手段は、あなたが拡張できること &lt;code&gt;Moose&lt;/code&gt; 使用して &lt;code&gt;Moose&lt;/code&gt; 自体を。</target>
        </trans-unit>
        <trans-unit id="6b75944d26f71c7f1f78e35ade72b0fdfacfa23b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Moose&lt;/code&gt; is a very powerful tool, and we can't cover all of its features here. We encourage you to learn more by reading the &lt;code&gt;Moose&lt;/code&gt; documentation, starting with &lt;a href=&quot;http://search.cpan.org/perldoc/http:#%2fsearch.cpan.org%2fperldoc%3fMoose%3a%3aManual&quot;&gt;Moose::Manual&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Moose&lt;/code&gt; は非常に強力なツールであり、ここではその機能のすべてをカバーすることはできません。&lt;a href=&quot;http://search.cpan.org/perldoc/http:#%2fsearch.cpan.org%2fperldoc%3fMoose%3a%3aManual&quot;&gt;Moose :: Manual&lt;/a&gt;から始まる &lt;code&gt;Moose&lt;/code&gt; のドキュメントを読んで詳細を学ぶことをお勧めします。</target>
        </trans-unit>
        <trans-unit id="15a7474edcc79db6877104c2995b1e164f2e9c19" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Moose&lt;/code&gt; is a very powerful tool, and we can't cover all of its features here. We encourage you to learn more by reading the &lt;code&gt;Moose&lt;/code&gt; documentation, starting with &lt;a href=&quot;https://metacpan.org/pod/Moose::Manual&quot;&gt;Moose::Manual&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Moose&lt;/code&gt; は非常に強力なツールであり、ここでそのすべての機能を網羅することはできません。&lt;a href=&quot;https://metacpan.org/pod/Moose::Manual&quot;&gt;Moose :: Manual&lt;/a&gt;から始めて、 &lt;code&gt;Moose&lt;/code&gt; のドキュメントを読んで詳細を学ぶことをお勧めします。</target>
        </trans-unit>
        <trans-unit id="2ad6b90e9460494e0239b0e0b30a64740a8f84e4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Moose&lt;/code&gt; is the maximal option. It has a lot of features, a big ecosystem, and a thriving user base. We also covered &lt;a href=&quot;http://search.cpan.org/perldoc/Moo&quot;&gt;Moo&lt;/a&gt; briefly. &lt;code&gt;Moo&lt;/code&gt; is &lt;code&gt;Moose&lt;/code&gt; lite, and a reasonable alternative when Moose doesn't work for your application.</source>
          <target state="translated">&lt;code&gt;Moose&lt;/code&gt; は最大のオプションです。それは多くの機能、大きなエコシステム、そして盛んなユーザーベースを持っています。&lt;a href=&quot;http://search.cpan.org/perldoc/Moo&quot;&gt;ムー&lt;/a&gt;についても簡単に説明しました。 &lt;code&gt;Moo&lt;/code&gt; は &lt;code&gt;Moose&lt;/code&gt; liteであり、Mooseがアプリケーションで機能しない場合の妥当な代替手段です。</target>
        </trans-unit>
        <trans-unit id="103d7de4c9cac4328dfb31bd6dd9e40ee57f7fb8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Moose&lt;/code&gt; is the maximal option. It has a lot of features, a big ecosystem, and a thriving user base. We also covered &lt;a href=&quot;moo&quot;&gt;Moo&lt;/a&gt; briefly. &lt;code&gt;Moo&lt;/code&gt; is &lt;code&gt;Moose&lt;/code&gt; lite, and a reasonable alternative when Moose doesn't work for your application.</source>
          <target state="translated">&lt;code&gt;Moose&lt;/code&gt; は最大のオプションです。それは多くの機能、大きなエコシステム、そして繁栄しているユーザーベースを持っています。また、&lt;a href=&quot;moo&quot;&gt;Moo&lt;/a&gt;についても簡単に説明しました。 &lt;code&gt;Moo&lt;/code&gt; ある &lt;code&gt;Moose&lt;/code&gt; ムースは、あなたのアプリケーションのために動作しない場合のライト、および合理的な代替。</target>
        </trans-unit>
        <trans-unit id="69708ad78153d7b9062269d7ac8687dc72ab47ce" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Moose&lt;/code&gt; lets you define roles the same way you define classes:</source>
          <target state="translated">&lt;code&gt;Moose&lt;/code&gt; では、クラスを定義するのと同じ方法でロールを定義できます。</target>
        </trans-unit>
        <trans-unit id="e59d283b9fa45eb6da20d38a50354a5f65a3e45d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Moose&lt;/code&gt; provides a complete, modern OO system. Its biggest influence is the Common Lisp Object System, but it also borrows ideas from Smalltalk and several other languages. &lt;code&gt;Moose&lt;/code&gt; was created by Stevan Little, and draws heavily from his work on the Perl 6 OO design.</source>
          <target state="translated">&lt;code&gt;Moose&lt;/code&gt; は完全で最新のOOシステムを提供します。その最大の影響はCommon Lisp Object Systemですが、Smalltalkや他のいくつかの言語からのアイデアも取り入れています。 &lt;code&gt;Moose&lt;/code&gt; はStevan Littleによって作成され、Perl 6 OO設計に関する彼の作品から大きく引き出されています。</target>
        </trans-unit>
        <trans-unit id="92d4ea17a8d8a887fea2368e62a8fb9bf6b79010" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Moose&lt;/code&gt; provides a complete, modern OO system. Its biggest influence is the Common Lisp Object System, but it also borrows ideas from Smalltalk and several other languages. &lt;code&gt;Moose&lt;/code&gt; was created by Stevan Little, and draws heavily from his work on the Raku OO design.</source>
          <target state="translated">&lt;code&gt;Moose&lt;/code&gt; は、完全で最新のOOシステムを提供します。その最大の影響はCommonLisp Object Systemですが、Smalltalkや他のいくつかの言語からのアイデアも借りています。 &lt;code&gt;Moose&lt;/code&gt; はStevanLittleによって作成され、RakuOOデザインに関する彼の作業から大きく引き出されています。</target>
        </trans-unit>
        <trans-unit id="21aebae246ecd61c624d79bdc52a34c79b45d7da" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Moose&lt;/code&gt; provides a layer of declarative &quot;sugar&quot; for defining classes. That sugar is just a set of exported functions that make declaring how your class works simpler and more palatable. This lets you describe</source>
          <target state="translated">&lt;code&gt;Moose&lt;/code&gt; は、クラスを定義するための宣言的な「砂糖」の層を提供します。その砂糖は、クラスがどのように機能するかをより簡単で口に合うように宣言するエクスポートされた関数のセットにすぎません。これにより、</target>
        </trans-unit>
        <trans-unit id="d09bb13c02237f1d2d9dae9e2adb440884c74285" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Moose&lt;/code&gt; provides a number of features:</source>
          <target state="translated">&lt;code&gt;Moose&lt;/code&gt; は多くの機能を提供します：</target>
        </trans-unit>
        <trans-unit id="6eb64932f264053a0590719161b8cb976f4e1ab4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NDBM_File&lt;/code&gt; establishes a connection between a Perl hash variable and a file in NDBM_File format;. You can manipulate the data in the file just as if it were in a Perl hash, but when your program exits, the data will remain in the file, to be used the next time your program runs.</source>
          <target state="translated">&lt;code&gt;NDBM_File&lt;/code&gt; は、Perlハッシュ変数とNDBM_File形式のファイルとの間の接続を確立します。Perlハッシュの場合と同じようにファイル内のデータを操作できますが、プログラムが終了すると、データはファイル内に残り、次にプログラムを実行するときに使用されます。</target>
        </trans-unit>
        <trans-unit id="78074d9d3ae7622ec364fb434528c04975ac104b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NDBM_File&lt;/code&gt; has the same problem and the same solution. (Use &lt;code&gt;Memoize::NDBM_File instead of plain NDBM_File.&lt;/code&gt; )</source>
          <target state="translated">&lt;code&gt;NDBM_File&lt;/code&gt; にも同じ問題と同じ解決策があります。（ &lt;code&gt;Memoize::NDBM_File instead of plain NDBM_File.&lt;/code&gt; 使用してください。）</target>
        </trans-unit>
        <trans-unit id="51cc4bba070c6a202bfe8ee27389d6c49260d4b7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NDBM_File&lt;/code&gt; has the same problem and the same solution. (Use &lt;code&gt;Memoize::NDBM_File instead of plain NDBM_File.&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;NDBM_File&lt;/code&gt; には、同じ問題と同じ解決策があります。（ &lt;code&gt;Memoize::NDBM_File instead of plain NDBM_File.&lt;/code&gt; 使用します。）</target>
        </trans-unit>
        <trans-unit id="0581baa5ac844265bc3183d530bf4c339e0bc42a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NEXT::ACTUAL&lt;/code&gt; is most commonly used in &lt;code&gt;AUTOLOAD&lt;/code&gt; methods, as a means to decline an &lt;code&gt;AUTOLOAD&lt;/code&gt; request, but preserve the normal exception-on-failure semantics:</source>
          <target state="translated">&lt;code&gt;NEXT::ACTUAL&lt;/code&gt; は、 &lt;code&gt;AUTOLOAD&lt;/code&gt; 要求を拒否する手段として &lt;code&gt;AUTOLOAD&lt;/code&gt; メソッドで最も一般的に使用されますが、通常の失敗時の例外セマンティクスは保持されます。</target>
        </trans-unit>
        <trans-unit id="18cf8906396d05eba42604b1fd34e916339ab3a5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NFC&lt;/code&gt; , &lt;code&gt;NFD&lt;/code&gt; , &lt;code&gt;NFKC&lt;/code&gt; , &lt;code&gt;NFKD&lt;/code&gt; : by default.</source>
          <target state="translated">&lt;code&gt;NFC&lt;/code&gt; 、 &lt;code&gt;NFD&lt;/code&gt; 、 &lt;code&gt;NFKC&lt;/code&gt; 、 &lt;code&gt;NFKD&lt;/code&gt; ：デフォルト。</target>
        </trans-unit>
        <trans-unit id="ba3b9f1e15235acf4735c8ead838364d94cd226f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NFC&lt;/code&gt;, &lt;code&gt;NFD&lt;/code&gt;, &lt;code&gt;NFKC&lt;/code&gt;, &lt;code&gt;NFKD&lt;/code&gt;: by default.</source>
          <target state="translated">&lt;code&gt;NFC&lt;/code&gt; 、 &lt;code&gt;NFD&lt;/code&gt; 、 &lt;code&gt;NFKC&lt;/code&gt; 、 &lt;code&gt;NFKD&lt;/code&gt; ：デフォルト。</target>
        </trans-unit>
        <trans-unit id="eebfda1e92b7ddd927792132b3070e3d738f30a7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NUL&lt;/code&gt; characters will sort the same as the lowest collating control character does, or to &lt;code&gt;&quot;\001&quot;&lt;/code&gt; in the unlikely event that there are no control characters at all in the locale. In cases where the strings don't contain this non-&lt;code&gt;NUL&lt;/code&gt; control, the results will be correct, and in many locales, this control, whatever it might be, will rarely be encountered. But there are cases where a &lt;code&gt;NUL&lt;/code&gt; should sort before this control, but doesn't. If two strings do collate identically, the one containing the &lt;code&gt;NUL&lt;/code&gt; will sort to earlier. Prior to 5.26, there were more bugs.</source>
          <target state="translated">&lt;code&gt;NUL&lt;/code&gt; 文字は、最も低い照合制御文字と同じようにソートされるか、ロケールに制御文字がまったくないという万が一の場合には &lt;code&gt;&quot;\001&quot;&lt;/code&gt; にソートされます。文字列にこの非 &lt;code&gt;NUL&lt;/code&gt; コントロールが含まれていない場合、結果は正しくなり、多くのロケールでは、このコントロールがどのようなものであっても、ほとんど検出されません。ただし、 &lt;code&gt;NUL&lt;/code&gt; がこのコントロールの前にソートする必要があるが、ソートしない場合があります。2つの文字列が同じように照合される場合、 &lt;code&gt;NUL&lt;/code&gt; を含む文字列は以前にソートされます。5.26より前は、さらに多くのバグがありました。</target>
        </trans-unit>
        <trans-unit id="c0fbe0cc8200f5a30fa199cb8f6df56105f2203c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NULL&lt;/code&gt; will be returned if a REGEXP* is not found.</source>
          <target state="translated">&lt;code&gt;NULL&lt;/code&gt; REGEXP *が見つからない場合は、NULLが返されます。</target>
        </trans-unit>
        <trans-unit id="1fcf6d595cbf17a9e9ccb45668aea52548b0452a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NYTProf&lt;/code&gt; will generate a report database into the file</source>
          <target state="translated">&lt;code&gt;NYTProf&lt;/code&gt; はレポートデータベースをファイルに生成します</target>
        </trans-unit>
        <trans-unit id="b04556879f1638536b2cd2ee09dcb8a1ebf97cd9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Net::Cmd&lt;/code&gt; exports six subroutines, five of these, &lt;code&gt;CMD_INFO&lt;/code&gt; , &lt;code&gt;CMD_OK&lt;/code&gt; , &lt;code&gt;CMD_MORE&lt;/code&gt; , &lt;code&gt;CMD_REJECT&lt;/code&gt; and &lt;code&gt;CMD_ERROR&lt;/code&gt; , correspond to possible results of &lt;code&gt;response&lt;/code&gt; and &lt;code&gt;status&lt;/code&gt; . The sixth is &lt;code&gt;CMD_PENDING&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;Net::Cmd&lt;/code&gt; は6つのサブルーチンをエクスポートします。そのうちの5つ、 &lt;code&gt;CMD_INFO&lt;/code&gt; 、 &lt;code&gt;CMD_OK&lt;/code&gt; 、 &lt;code&gt;CMD_MORE&lt;/code&gt; 、 &lt;code&gt;CMD_REJECT&lt;/code&gt; 、および &lt;code&gt;CMD_ERROR&lt;/code&gt; は、 &lt;code&gt;response&lt;/code&gt; と &lt;code&gt;status&lt;/code&gt; 可能な結果に対応しています。6番目は &lt;code&gt;CMD_PENDING&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="751f64ce2fa80141c9374814816be4913af8c87c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Net::Cmd&lt;/code&gt; exports six subroutines, five of these, &lt;code&gt;CMD_INFO&lt;/code&gt;, &lt;code&gt;CMD_OK&lt;/code&gt;, &lt;code&gt;CMD_MORE&lt;/code&gt;, &lt;code&gt;CMD_REJECT&lt;/code&gt; and &lt;code&gt;CMD_ERROR&lt;/code&gt;, correspond to possible results of &lt;code&gt;response&lt;/code&gt; and &lt;code&gt;status&lt;/code&gt;. The sixth is &lt;code&gt;CMD_PENDING&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Net::Cmd&lt;/code&gt; は、6つのサブルーチンをエクスポートします。そのうちの5つ、 &lt;code&gt;CMD_INFO&lt;/code&gt; 、 &lt;code&gt;CMD_OK&lt;/code&gt; 、 &lt;code&gt;CMD_MORE&lt;/code&gt; 、 &lt;code&gt;CMD_REJECT&lt;/code&gt; 、および &lt;code&gt;CMD_ERROR&lt;/code&gt; は、 &lt;code&gt;response&lt;/code&gt; と &lt;code&gt;status&lt;/code&gt; 可能な結果に対応します。6番目は &lt;code&gt;CMD_PENDING&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="7845d03a9a449a6da30d7bde75f56559c5b3510e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Net::Cmd&lt;/code&gt; is a collection of methods that can be inherited by a sub class of &lt;code&gt;IO::Handle&lt;/code&gt; . These methods implement the functionality required for a command based protocol, for example FTP and SMTP.</source>
          <target state="translated">&lt;code&gt;Net::Cmd&lt;/code&gt; は、 &lt;code&gt;IO::Handle&lt;/code&gt; サブクラスによって継承できるメソッドのコレクションです。これらのメソッドは、FTPやSMTPなどのコマンドベースのプロトコルに必要な機能を実装します。</target>
        </trans-unit>
        <trans-unit id="77f571ecf6b318ab360c95b65262ca56cf2aee39" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Net::Cmd&lt;/code&gt; is a collection of methods that can be inherited by a sub-class of &lt;code&gt;IO::Socket::INET&lt;/code&gt;. These methods implement the functionality required for a command based protocol, for example FTP and SMTP.</source>
          <target state="translated">&lt;code&gt;Net::Cmd&lt;/code&gt; は、 &lt;code&gt;IO::Socket::INET&lt;/code&gt; サブクラスによって継承できるメソッドのコレクションです。これらのメソッドは、FTPやSMTPなどのコマンドベースのプロトコルに必要な機能を実装します。</target>
        </trans-unit>
        <trans-unit id="254926e3b1fdaf67c80f0581067758f47f75089e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Net::Config&lt;/code&gt; defines the following methods. They are methods as they are invoked as class methods. This is because &lt;code&gt;Net::Config&lt;/code&gt; inherits from &lt;code&gt;Net::LocalCfg&lt;/code&gt; so you can override these methods if you want.</source>
          <target state="translated">&lt;code&gt;Net::Config&lt;/code&gt; は以下のメソッドを定義します。これらはクラスメソッドとして呼び出されるメソッドです。これは、 &lt;code&gt;Net::Config&lt;/code&gt; が &lt;code&gt;Net::LocalCfg&lt;/code&gt; 継承するため、必要に応じてこれらのメソッドをオーバーライドできるためです。</target>
        </trans-unit>
        <trans-unit id="f3230cee7f2d481ff129124c06c210e7e3836e6d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Net::Config&lt;/code&gt; holds configuration data for the modules in the libnet distribution. During installation you will be asked for these values.</source>
          <target state="translated">&lt;code&gt;Net::Config&lt;/code&gt; は、libnetディストリビューションのモジュールの構成データを保持します。インストール中に、これらの値の入力を求められます。</target>
        </trans-unit>
        <trans-unit id="eee62aba7ead75933aba5287b1dfcee92f69a920" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Net::FTP&lt;/code&gt; inherits from &lt;code&gt;Net::Cmd&lt;/code&gt; so methods defined in &lt;code&gt;Net::Cmd&lt;/code&gt; may be used to send commands to the remote FTP server in addition to the methods documented here.</source>
          <target state="translated">&lt;code&gt;Net::FTP&lt;/code&gt; は &lt;code&gt;Net::Cmd&lt;/code&gt; 継承しているため、 &lt;code&gt;Net::Cmd&lt;/code&gt; 定義されたメソッドを使用して、ここに記載されているメソッドに加えて、リモートFTPサーバーにコマンドを送信できます。</target>
        </trans-unit>
        <trans-unit id="a4c9a6d1ddcfaa49ab8c11cb11394dcdd82b4a1a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Net::FTP&lt;/code&gt; is a class implementing a simple FTP client in Perl as described in RFC959. It provides wrappers for a subset of the RFC959 commands.</source>
          <target state="translated">&lt;code&gt;Net::FTP&lt;/code&gt; はRFC959に記述されているようにPerlで単純なFTPクライアントを実装するクラスです。RFC959コマンドのサブセットのラッパーを提供します。</target>
        </trans-unit>
        <trans-unit id="8300ab17bc404a7a8829458b0fbe6ef51bbf649c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Net::FTP&lt;/code&gt; is a class implementing a simple FTP client in Perl as described in RFC959. It provides wrappers for the commonly used subset of the RFC959 commands. If &lt;a href=&quot;IO::Socket::IP&quot;&gt;IO::Socket::IP&lt;/a&gt; or &lt;a href=&quot;IO::Socket::INET6&quot;&gt;IO::Socket::INET6&lt;/a&gt; is installed it also provides support for IPv6 as defined in RFC2428. And with &lt;a href=&quot;IO::Socket::SSL&quot;&gt;IO::Socket::SSL&lt;/a&gt; installed it provides support for implicit FTPS and explicit FTPS as defined in RFC4217.</source>
          <target state="translated">&lt;code&gt;Net::FTP&lt;/code&gt; は、RFC959で説明されているように、Perlで単純なFTPクライアントを実装するクラスです。これは、RFC959コマンドの一般的に使用されるサブセットのラッパーを提供します。場合は&lt;a href=&quot;IO::Socket::IP&quot;&gt;IO ::ソケット:: IP&lt;/a&gt;または&lt;a href=&quot;IO::Socket::INET6&quot;&gt;IO ::ソケット:: INET6が&lt;/a&gt;インストールされているRFC2428で定義されている、それはまた、IPv6のサポートを提供します。また、&lt;a href=&quot;IO::Socket::SSL&quot;&gt;IO :: Socket :: SSLが&lt;/a&gt;インストールされていると、RFC4217で定義されている暗黙的なFTPSと明示的なFTPSがサポートされます。</target>
        </trans-unit>
        <trans-unit id="71138c73e8a250c76baad4423032ba6d1dba47d9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Net::NNTP&lt;/code&gt; inherits from &lt;code&gt;Net::Cmd&lt;/code&gt; so methods defined in &lt;code&gt;Net::Cmd&lt;/code&gt; may be used to send commands to the remote NNTP server in addition to the methods documented here.</source>
          <target state="translated">&lt;code&gt;Net::NNTP&lt;/code&gt; は &lt;code&gt;Net::Cmd&lt;/code&gt; 継承しているため、 &lt;code&gt;Net::Cmd&lt;/code&gt; 定義されたメソッドを使用して、ここで説明されているメソッドに加えて、リモートNNTPサーバーにコマンドを送信できます。</target>
        </trans-unit>
        <trans-unit id="847fafd47105bd72c7111b1635378a14aed1d84c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Net::NNTP&lt;/code&gt; is a class implementing a simple NNTP client in Perl as described in RFC977 and RFC4642.</source>
          <target state="translated">&lt;code&gt;Net::NNTP&lt;/code&gt; は、RFC977およびRFC4642で説明されているように、Perlで単純なNNTPクライアントを実装するクラスです。</target>
        </trans-unit>
        <trans-unit id="27188759a651c11c806a3095dc0441fa930cce22" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Net::NNTP&lt;/code&gt; is a class implementing a simple NNTP client in Perl as described in RFC977 and RFC4642. With &lt;a href=&quot;IO::Socket::SSL&quot;&gt;IO::Socket::SSL&lt;/a&gt; installed it also provides support for implicit and explicit TLS encryption, i.e. NNTPS or NNTP+STARTTLS.</source>
          <target state="translated">&lt;code&gt;Net::NNTP&lt;/code&gt; は、RFC977およびRFC4642で説明されているように、Perlで単純なNNTPクライアントを実装するクラスです。&lt;a href=&quot;IO::Socket::SSL&quot;&gt;IO ::ソケット:: SSLが&lt;/a&gt;インストールされ、それはまた、すなわちNNTPSまたはNNTP + STARTTLS、暗黙的および明示的なTLS暗号化のサポートを提供します。</target>
        </trans-unit>
        <trans-unit id="b36382e0a9620da9ee21409f3e9c9cfe391785b9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Net::Netrc&lt;/code&gt; also implements security checks just like the ftp program, these checks are, first that the .netrc file must be owned by the user and second the ownership permissions should be such that only the owner has read and write access. If these conditions are not met then a warning is output and the .netrc file is not read.</source>
          <target state="translated">&lt;code&gt;Net::Netrc&lt;/code&gt; は、ftpプログラムと同様にセキュリティチェックも実装します。これらのチェックは、最初に.netrcファイルがユーザーによって所有されている必要があり、次に所有者のみが読み取りと書き込みのアクセス権を持つように所有権のアクセス許可を設定する必要があります。これらの条件が満たされない場合、警告が出力され、.netrcファイルは読み取られません。</target>
        </trans-unit>
        <trans-unit id="0b6f3d9adca182bb8079550cf17f428b2b3341d3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Net::Netrc&lt;/code&gt; is a class implementing a simple interface to the .netrc file used as by the ftp program.</source>
          <target state="translated">&lt;code&gt;Net::Netrc&lt;/code&gt; は、ftpプログラムで使用される.netrcファイルへのシンプルなインターフェースを実装するクラスです。</target>
        </trans-unit>
        <trans-unit id="123002683b26209fd1f35593f9b8871fd3c658e0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Net::POP3&lt;/code&gt; inherits from &lt;code&gt;Net::Cmd&lt;/code&gt; so methods defined in &lt;code&gt;Net::Cmd&lt;/code&gt; may be used to send commands to the remote POP3 server in addition to the methods documented here.</source>
          <target state="translated">&lt;code&gt;Net::POP3&lt;/code&gt; は &lt;code&gt;Net::Cmd&lt;/code&gt; 継承しているため、 &lt;code&gt;Net::Cmd&lt;/code&gt; 定義されているメソッドを使用して、ここに記載されているメソッドに加えて、リモートPOP3サーバーにコマンドを送信できます。</target>
        </trans-unit>
        <trans-unit id="3751bae0845dc1c96565bcff89564528bd51714a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Net::SMTP&lt;/code&gt; inherits from &lt;code&gt;Net::Cmd&lt;/code&gt; so methods defined in &lt;code&gt;Net::Cmd&lt;/code&gt; may be used to send commands to the remote SMTP server in addition to the methods documented here.</source>
          <target state="translated">&lt;code&gt;Net::SMTP&lt;/code&gt; は &lt;code&gt;Net::Cmd&lt;/code&gt; 継承しているため、 &lt;code&gt;Net::Cmd&lt;/code&gt; 定義されているメソッドを使用して、ここに記載されているメソッドに加えて、リモートSMTPサーバーにコマンドを送信できます。</target>
        </trans-unit>
        <trans-unit id="86cd710654ff51cb16031bcacedac62e6d1b9ee9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Net::Time&lt;/code&gt; provides subroutines that obtain the time on a remote machine.</source>
          <target state="translated">&lt;code&gt;Net::Time&lt;/code&gt; は、リモートマシンの時刻を取得するサブルーチンを提供します。</target>
        </trans-unit>
        <trans-unit id="9d533e43a84604b97d548da9e6f5ca63912a9518" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NextPermute&lt;/code&gt; uses string order and &lt;code&gt;NextPermuteNum&lt;/code&gt; numeric order, so you can enumerate all the permutations of &lt;code&gt;0..9&lt;/code&gt; like this:</source>
          <target state="translated">&lt;code&gt;NextPermute&lt;/code&gt; は文字列順と &lt;code&gt;NextPermuteNum&lt;/code&gt; 数値順を使用するため、 &lt;code&gt;0..9&lt;/code&gt; ように0..9のすべての順列を列挙できます。</target>
        </trans-unit>
        <trans-unit id="378a45bbbd1429eb14ae962e068942d1f3f2b24f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ODBM_File&lt;/code&gt; establishes a connection between a Perl hash variable and a file in ODBM_File format;. You can manipulate the data in the file just as if it were in a Perl hash, but when your program exits, the data will remain in the file, to be used the next time your program runs.</source>
          <target state="translated">&lt;code&gt;ODBM_File&lt;/code&gt; は、Perlハッシュ変数とODBM_File形式のファイルとの間の接続を確立します。ファイル内のデータは、Perlハッシュの場合と同じように操作できますが、プログラムが終了すると、データはファイル内に残り、次にプログラムを実行するときに使用されます。</target>
        </trans-unit>
        <trans-unit id="dfe4c93e326640f663cc60745323069016a9e294" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;OPLIST&lt;/code&gt; is a list of operations to pass to &lt;code&gt;&lt;a href=&quot;../functions/semop&quot;&gt;semop&lt;/a&gt;&lt;/code&gt;. &lt;code&gt;OPLIST&lt;/code&gt; is a concatenation of smaller lists, each which has three values. The first is the semaphore number, the second is the operation and the last is a flags value. See &lt;a href=&quot;../functions/semop&quot;&gt;semop&lt;/a&gt; for more details. For example</source>
          <target state="translated">&lt;code&gt;OPLIST&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;../functions/semop&quot;&gt;semop&lt;/a&gt;&lt;/code&gt; に渡す操作のリストです。 &lt;code&gt;OPLIST&lt;/code&gt; は、それぞれが3つの値を持つ小さなリストを連結したものです。最初はセマフォ番号、2番目は操作、最後はフラグ値です。詳細については、&lt;a href=&quot;../functions/semop&quot;&gt;semop&lt;/a&gt;を参照してください。例えば</target>
        </trans-unit>
        <trans-unit id="a23a506db80ba3d94d21ada4d0fc8755b43ee0a3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;OPLIST&lt;/code&gt; is a list of operations to pass to &lt;code&gt;semop&lt;/code&gt;. &lt;code&gt;OPLIST&lt;/code&gt; is a concatenation of smaller lists, each which has three values. The first is the semaphore number, the second is the operation and the last is a flags value. See &lt;a href=&quot;http://man.he.net/man2/semop&quot;&gt;semop(2)&lt;/a&gt; for more details. For example</source>
          <target state="translated">&lt;code&gt;OPLIST&lt;/code&gt; は、 &lt;code&gt;semop&lt;/code&gt; に渡す操作のリストです。 &lt;code&gt;OPLIST&lt;/code&gt; は、それぞれが3つの値を持つ小さなリストを連結したものです。1つ目はセマフォ番号、2つ目は操作、最後はフラグ値です。詳細については、&lt;a href=&quot;http://man.he.net/man2/semop&quot;&gt;semop（2）&lt;/a&gt;を参照してください。例えば</target>
        </trans-unit>
        <trans-unit id="33efd347724e242d7141f46f188fed712b7cdd02" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;OPTIONS&lt;/code&gt; are passed in a hash like fashion, using key and value pairs. Possible options are:</source>
          <target state="translated">&lt;code&gt;OPTIONS&lt;/code&gt; は、キーと値のペアを使用して、ハッシュのような方法で渡されます。可能なオプションは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="fb585ad0e412320d6c5d24d7d6c5a3fe34ee3eee" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;OPTS&lt;/code&gt; is any combination of the following options:</source>
          <target state="translated">&lt;code&gt;OPTS&lt;/code&gt; は、次のオプションの任意の組み合わせです。</target>
        </trans-unit>
        <trans-unit id="91302c7ef38ea711b6dd2b2f025894b8eed9d3c4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;OPTS&lt;/code&gt; is any combination of zero or more the following options:</source>
          <target state="translated">&lt;code&gt;OPTS&lt;/code&gt; は、以下のオプションを0個以上組み合わせたものです。</target>
        </trans-unit>
        <trans-unit id="9f385462d59e5cbff16027513e56f20527ecc44d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;OS2::MorphPM(serve)&lt;/code&gt;, &lt;code&gt;OS2::UnMorphPM(serve)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;OS2::MorphPM(serve)&lt;/code&gt;, &lt;code&gt;OS2::UnMorphPM(serve)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9245eb099435f6ca94debca60eab45a7b36e193e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;OsFHandleOpen&lt;/code&gt; eventually calls the Win32-specific C routine &lt;code&gt;_open_osfhandle()&lt;/code&gt; or Perl's &quot;improved&quot; version called &lt;code&gt;win32_open_osfhandle()&lt;/code&gt;. Prior to Perl5.005, C's &lt;code&gt;_open_osfhandle()&lt;/code&gt; is called which will fail if &lt;code&gt;GetFileType($hNativeHandle)&lt;/code&gt; would return &lt;code&gt;FILE_TYPE_UNKNOWN&lt;/code&gt;. For Perl5.005 and later, &lt;code&gt;OsFHandleOpen&lt;/code&gt; calls &lt;code&gt;win32_open_osfhandle()&lt;/code&gt; from the Perl DLL which doesn't have this restriction.</source>
          <target state="translated">&lt;code&gt;OsFHandleOpen&lt;/code&gt; は、最終的にWin32固有のCルーチン &lt;code&gt;_open_osfhandle()&lt;/code&gt; または &lt;code&gt;win32_open_osfhandle()&lt;/code&gt; と呼ばれるPerlの「改良された」バージョンを呼び出します。Perl5.005より前では、Cの &lt;code&gt;_open_osfhandle()&lt;/code&gt; が呼び出され、 &lt;code&gt;GetFileType($hNativeHandle)&lt;/code&gt; が &lt;code&gt;FILE_TYPE_UNKNOWN&lt;/code&gt; を返す場合は失敗します。Perl5.005以降の場合、 &lt;code&gt;OsFHandleOpen&lt;/code&gt; はこの制限のないPerl DLLから &lt;code&gt;win32_open_osfhandle()&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="3a55a8fa7d94a2bdb8c9858e6a20e3b3750fcc3a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;PAGFEXT&lt;/code&gt; - the extension used for the page file, usually &lt;code&gt;.pag&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;PAGFEXT&lt;/code&gt; -ページファイルに使用される拡張子。通常は &lt;code&gt;.pag&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="20abc9b397ce67c7d8c18e056cadec6da9cf7da5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;PAGFEXT&lt;/code&gt; - the extension used for the page file, usually &lt;code&gt;.pag&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;PAGFEXT&lt;/code&gt; -ページファイルに使用される拡張子。通常は &lt;code&gt;.pag&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="daa83b7935dfe2d0f82e9741ba0c0dcca3ce6ca4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;PAIRMAX&lt;/code&gt; - the maximum size of a stored hash entry, including the length of both the key and value.</source>
          <target state="translated">&lt;code&gt;PAIRMAX&lt;/code&gt; -キーと値の両方の長さを含む、保存されたハッシュエントリの最大サイズ。</target>
        </trans-unit>
        <trans-unit id="6bfce6371d235835d7baa6a15ef25591a2378ad0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;PERL5LIB&lt;/code&gt; is applied first, then all the &lt;code&gt;-I&lt;/code&gt; arguments, then all the &lt;code&gt;-M&lt;/code&gt; arguments. This:</source>
          <target state="translated">&lt;code&gt;PERL5LIB&lt;/code&gt; が最初に適用され、次にすべての &lt;code&gt;-I&lt;/code&gt; 引数、次にすべての &lt;code&gt;-M&lt;/code&gt; 引数が適用されます。この：</target>
        </trans-unit>
        <trans-unit id="27156ff4eef82c7929a4d4dc40be3d7c530fea3b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;PL_errgv&lt;/code&gt; is a perl global of type &lt;code&gt;GV *&lt;/code&gt; that points to the symbol table entry containing the error. &lt;code&gt;ERRSV&lt;/code&gt; therefore refers to the C equivalent of &lt;code&gt;$@&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;PL_errgv&lt;/code&gt; は、タイプ &lt;code&gt;GV *&lt;/code&gt; の perlグローバルであり、エラーを含むシンボルテーブルエントリを指します。したがって、 &lt;code&gt;ERRSV&lt;/code&gt; は、Cの &lt;code&gt;$@&lt;/code&gt; 相当します。</target>
        </trans-unit>
        <trans-unit id="75f0ef1d7c11545a4418843565ff1807d720ceae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;PL_errgv&lt;/code&gt; is a perl global of type &lt;code&gt;GV *&lt;/code&gt; that points to the symbol table entry containing the error. &lt;code&gt;ERRSV&lt;/code&gt; therefore refers to the C equivalent of &lt;code&gt;$@&lt;/code&gt;. We use a local temporary, &lt;code&gt;err_tmp&lt;/code&gt;, since &lt;code&gt;ERRSV&lt;/code&gt; is a macro that calls a function, and &lt;code&gt;SvTRUE(ERRSV)&lt;/code&gt; would end up calling that function multiple times.</source>
          <target state="translated">&lt;code&gt;PL_errgv&lt;/code&gt; は、エラーを含むシンボルテーブルエントリを指すタイプ &lt;code&gt;GV *&lt;/code&gt; のperlグローバルです。したがって、 &lt;code&gt;ERRSV&lt;/code&gt; は &lt;code&gt;$@&lt;/code&gt; 相当するCを参照します。私たちは、ローカルの一時、使用 &lt;code&gt;err_tmp&lt;/code&gt; をするので、 &lt;code&gt;ERRSV&lt;/code&gt; は関数を呼び出すマクロです、そして &lt;code&gt;SvTRUE(ERRSV)&lt;/code&gt; は、その関数を複数回呼び出すことになります。</target>
        </trans-unit>
        <trans-unit id="28d846ceba760df481e858497307461291dc972a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;PL_modglobal&lt;/code&gt; is a general purpose, interpreter global HV for use by extensions that need to keep information on a per-interpreter basis. In a pinch, it can also be used as a symbol table for extensions to share data among each other. It is a good idea to use keys prefixed by the package name of the extension that owns the data.</source>
          <target state="translated">&lt;code&gt;PL_modglobal&lt;/code&gt; は、インタープリターごとに情報を保持する必要がある拡張機能が使用する、汎用のインタープリターグローバルHVです。ピンチでは、拡張機能が相互にデータを共有するためのシンボルテーブルとしても使用できます。データを所有する拡張機能のパッケージ名が前に付いたキーを使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="baf742fa1485655f0b87fce84ae46f9ee25693cb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;PL_phase&lt;/code&gt; was introduced in Perl 5.14; in prior perls you can use &lt;code&gt;PL_dirty&lt;/code&gt; (boolean) to determine whether the interpreter is in global destruction. (Use of &lt;code&gt;PL_dirty&lt;/code&gt; is discouraged since 5.14.)</source>
          <target state="translated">&lt;code&gt;PL_phase&lt;/code&gt; はPerl5.14で導入されました。以前の &lt;code&gt;PL_dirty&lt;/code&gt; （ブール値）を使用して、インタープリターがグローバルに破壊されているかどうかを判別できます。（5.14以降、 &lt;code&gt;PL_dirty&lt;/code&gt; の使用は推奨されていません。）</target>
        </trans-unit>
        <trans-unit id="e462043426a8fdcde1b169905e3026ac756f8a1f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;POPn&lt;/code&gt; takes the SV from the top of the stack and obtains its NV either directly (if &lt;code&gt;SvNOK&lt;/code&gt; is set) or by calling the &lt;code&gt;sv_2nv&lt;/code&gt; function. &lt;code&gt;TOPs&lt;/code&gt; takes the next SV from the top of the stack - yes, &lt;code&gt;POPn&lt;/code&gt; uses &lt;code&gt;TOPs&lt;/code&gt; - but doesn't remove it. We then use &lt;code&gt;SvNV&lt;/code&gt; to get the NV from &lt;code&gt;leftsv&lt;/code&gt; in the same way as before - yes, &lt;code&gt;POPn&lt;/code&gt; uses &lt;code&gt;SvNV&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;POPn&lt;/code&gt; はスタックの最上部からSVを取得し、直接（ &lt;code&gt;SvNOK&lt;/code&gt; が設定されている場合）、または &lt;code&gt;sv_2nv&lt;/code&gt; 関数を呼び出すことにより、NVを取得します。 &lt;code&gt;TOPs&lt;/code&gt; はスタックの一番上から次のSVを &lt;code&gt;POPn&lt;/code&gt; します-はい、POPnは &lt;code&gt;TOPs&lt;/code&gt; 使用しますが、削除しません。私たちは、その後、使用 &lt;code&gt;SvNV&lt;/code&gt; をからNVを取得するために &lt;code&gt;leftsv&lt;/code&gt; はい、 -前と同じように &lt;code&gt;POPn&lt;/code&gt; が使用 &lt;code&gt;SvNV&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="6d374a0211d048b551a650a5a8c3af72a22bcf31" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;POPn&lt;/code&gt; takes the SV from the top of the stack and obtains its NV either directly (if &lt;code&gt;SvNOK&lt;/code&gt; is set) or by calling the &lt;code&gt;sv_2nv&lt;/code&gt; function. &lt;code&gt;TOPs&lt;/code&gt; takes the next SV from the top of the stack - yes, &lt;code&gt;POPn&lt;/code&gt; uses &lt;code&gt;TOPs&lt;/code&gt; - but doesn't remove it. We then use &lt;code&gt;SvNV&lt;/code&gt; to get the NV from &lt;code&gt;leftsv&lt;/code&gt; in the same way as before - yes, &lt;code&gt;POPn&lt;/code&gt; uses &lt;code&gt;SvNV&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;POPn&lt;/code&gt; は、スタックの最上位からSVを取得し、直接（ &lt;code&gt;SvNOK&lt;/code&gt; が設定されている場合）または &lt;code&gt;sv_2nv&lt;/code&gt; 関数を呼び出すことによってそのNVを取得します。 &lt;code&gt;TOPs&lt;/code&gt; 、スタックの最上部から次のSVを取る-はい、 &lt;code&gt;POPn&lt;/code&gt; は使用しています &lt;code&gt;TOPs&lt;/code&gt; -しかし、それを削除しません。私たちは、その後、使用 &lt;code&gt;SvNV&lt;/code&gt; をからNVを取得するために &lt;code&gt;leftsv&lt;/code&gt; はい、 -前と同じように &lt;code&gt;POPn&lt;/code&gt; が使用 &lt;code&gt;SvNV&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="ceeafa80c32480e29641bc3d8281cb2d151748fe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;PRIO_PROCESS&lt;/code&gt;&lt;code&gt;PRIO_PGRP&lt;/code&gt;&lt;code&gt;PRIO_USER&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;PRIO_PROCESS&lt;/code&gt;&lt;code&gt;PRIO_PGRP&lt;/code&gt;&lt;code&gt;PRIO_USER&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="187cb5f75aca7c54a66b5479e08fd95908744787" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ParseExtra =&amp;gt; 0|1&lt;/code&gt; If the gzip FEXTRA header field is present and this option is set, it will force the module to check that it conforms to the sub-field structure as defined in RFC 1952.</source>
          <target state="translated">&lt;code&gt;ParseExtra =&amp;gt; 0|1&lt;/code&gt; gzip FEXTRAヘッダーフィールドが存在し、このオプションが設定されている場合、RFC1952で定義されているサブフィールド構造に準拠していることをモジュールに強制的にチェックさせます。</target>
        </trans-unit>
        <trans-unit id="7fa7d89db8ca9065ee05f4a0df6e3c04c186b53d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;PeerHost&lt;/code&gt; AND &lt;code&gt;LocalHost&lt;/code&gt; PARSING</source>
          <target state="translated">&lt;code&gt;PeerHost&lt;/code&gt; と &lt;code&gt;LocalHost&lt;/code&gt; の構文解析</target>
        </trans-unit>
        <trans-unit id="db32ebddf13e6153c4db2e4b19915086fc3c701a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;PerlIO *&lt;/code&gt; takes the place of FILE *. Like FILE * it should be treated as opaque (it is probably safe to assume it is a pointer to something).</source>
          <target state="translated">&lt;code&gt;PerlIO *&lt;/code&gt; はFILE *の代わりになります。FILE *と同様に、不透明なものとして扱う必要があります（何かへのポインターであると想定しても安全です）。</target>
        </trans-unit>
        <trans-unit id="4d16f994d3331156861b509a21f75af08d4def42" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;PerlIO::mmap&lt;/code&gt; only exists to use XSLoader to load C code that provides support for using memory mapped IO. One does not need to explicitly &lt;code&gt;use PerlIO::mmap;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;PerlIO::mmap&lt;/code&gt; は、XSLoaderを使用してメモリマップドIOの使用をサポートするCコードをロードするためにのみ存在します。 &lt;code&gt;use PerlIO::mmap;&lt;/code&gt; を明示的に使用する必要はありません。。</target>
        </trans-unit>
        <trans-unit id="76de88c3c738162ebd05f1c0526d5c7e44fc7ef4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;PerlIO::scalar&lt;/code&gt; only exists to use XSLoader to load C code that provides support for treating a scalar as an &quot;in memory&quot; file. One does not need to explicitly &lt;code&gt;&lt;a href=&quot;../functions/use&quot;&gt;use&lt;/a&gt; PerlIO::scalar&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;PerlIO::scalar&lt;/code&gt; は、XSLoaderを使用してスカラーを「メモリ内」ファイルとして扱うためのサポートを提供するCコードをロードするためにのみ存在します。 &lt;code&gt;&lt;a href=&quot;../functions/use&quot;&gt;use&lt;/a&gt; PerlIO::scalar&lt;/code&gt; を明示的に&lt;a href=&quot;../functions/use&quot;&gt;使用する&lt;/a&gt;必要はありません。</target>
        </trans-unit>
        <trans-unit id="bd5d806f68368f22f8a2e45432fc7f9b402a951d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;PerlIO::scalar&lt;/code&gt; only exists to use XSLoader to load C code that provides support for treating a scalar as an &quot;in memory&quot; file. One does not need to explicitly &lt;code&gt;use PerlIO::scalar&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;PerlIO::scalar&lt;/code&gt; はXSLoaderを使用してスカラーを「メモリ内」ファイルとして扱うためのサポートを提供するCコードをロードするためにのみ存在します。 &lt;code&gt;use PerlIO::scalar&lt;/code&gt; を明示的に使用する必要はありません。</target>
        </trans-unit>
        <trans-unit id="98ae8a39c671d0e2b494188a848a2db1b4ecf4da" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Perl_isinfnan()&lt;/code&gt; is a utility function that returns true if the NV argument is either an infinity or a &lt;code&gt;NaN&lt;/code&gt;, false otherwise. To test in more detail, use &lt;code&gt;Perl_isinf()&lt;/code&gt; and &lt;code&gt;Perl_isnan()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Perl_isinfnan()&lt;/code&gt; は、NV引数が無限大または &lt;code&gt;NaN&lt;/code&gt; のいずれかである場合はtrueを返し、それ以外の場合はfalseを返すユーティリティ関数です。より詳細にテストするには、 &lt;code&gt;Perl_isinf()&lt;/code&gt; および &lt;code&gt;Perl_isnan()&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="342cc2bd74a057131e7a555a6c648fe333fad065" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Perl_op_dump&lt;/code&gt; can be used to dump an &lt;code&gt;OP&lt;/code&gt; structure or any of its derivatives, and produces output similar to &lt;code&gt;perl -Dx&lt;/code&gt; ; in fact, &lt;code&gt;Perl_dump_eval&lt;/code&gt; will dump the main root of the code being evaluated, exactly like &lt;code&gt;-Dx&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;Perl_op_dump&lt;/code&gt; は、 &lt;code&gt;OP&lt;/code&gt; 構造またはその派生物のダンプに使用でき、 &lt;code&gt;perl -Dx&lt;/code&gt; と同様の出力を生成します。実際には、 &lt;code&gt;Perl_dump_eval&lt;/code&gt; はまったく同じ、評価されているコードの主なルートをダンプします &lt;code&gt;-Dx&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a8a8bab59c12cdaf00c5d74a27307b9d8b2f6181" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Perl_op_dump&lt;/code&gt; can be used to dump an &lt;code&gt;OP&lt;/code&gt; structure or any of its derivatives, and produces output similar to &lt;code&gt;perl -Dx&lt;/code&gt;; in fact, &lt;code&gt;Perl_dump_eval&lt;/code&gt; will dump the main root of the code being evaluated, exactly like &lt;code&gt;-Dx&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Perl_op_dump&lt;/code&gt; は、 &lt;code&gt;OP&lt;/code&gt; 構造体またはその派生物のいずれかをダンプするために使用でき、 &lt;code&gt;perl -Dx&lt;/code&gt; と同様の出力を生成します。実際には、 &lt;code&gt;Perl_dump_eval&lt;/code&gt; はまったく同じ、評価されているコードの主なルートをダンプします &lt;code&gt;-Dx&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="13a25875890d05d11531b49f5ebb3a69b2a92ffd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Perl_setlocale&lt;/code&gt; should not be used to change the locale except on systems where the predefined variable &lt;code&gt;${^SAFE_LOCALES}&lt;/code&gt; is 1. On some such systems, the system &lt;code&gt;setlocale()&lt;/code&gt; is ineffective, returning the wrong information, and failing to actually change the locale. &lt;code&gt;Perl_setlocale&lt;/code&gt;, however works properly in all circumstances.</source>
          <target state="translated">&lt;code&gt;Perl_setlocale&lt;/code&gt; 事前定義された変数 &lt;code&gt;${^SAFE_LOCALES}&lt;/code&gt; が1であるシステムを除いて、Perl_setlocaleを使用してロケールを変更しないでください。そのようなシステムの中には、システム &lt;code&gt;setlocale()&lt;/code&gt; が無効で、間違った情報を返し、実際にロケールを変更できないものがあります。 &lt;code&gt;Perl_setlocale&lt;/code&gt; 、Perl_setlocaleはすべての状況で正しく機能します。</target>
        </trans-unit>
        <trans-unit id="f69e8b187c7334a4f160f8b7848979025e38bf47" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RE&lt;/code&gt; in &lt;code&gt;m?RE?&lt;/code&gt;, &lt;code&gt;/RE/&lt;/code&gt;, &lt;code&gt;m/RE/&lt;/code&gt;, &lt;code&gt;s/RE/foo/&lt;/code&gt;,</source>
          <target state="translated">&lt;code&gt;RE&lt;/code&gt; in &lt;code&gt;m?RE?&lt;/code&gt;, &lt;code&gt;/RE/&lt;/code&gt;, &lt;code&gt;m/RE/&lt;/code&gt;, &lt;code&gt;s/RE/foo/&lt;/code&gt;,</target>
        </trans-unit>
        <trans-unit id="525331da57907ca499d00faca6f8395614de9884" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RECURSIVE_TEST_FILES&lt;/code&gt; can be used to include all directories recursively under &lt;code&gt;t&lt;/code&gt; that contain &lt;code&gt;.t&lt;/code&gt; files. It will be ignored if you provide your own &lt;code&gt;TESTS&lt;/code&gt; attribute, defaults to false.</source>
          <target state="translated">&lt;code&gt;RECURSIVE_TEST_FILES&lt;/code&gt; を使用して、 &lt;code&gt;.t&lt;/code&gt; ファイルを含む &lt;code&gt;t&lt;/code&gt; の下に再帰的にすべてのディレクトリを含めることができます。独自の &lt;code&gt;TESTS&lt;/code&gt; 属性を指定した場合は無視されます。デフォルトはfalseです。</target>
        </trans-unit>
        <trans-unit id="30e1beb351b718ad1963f84891a8a519c473da70" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;R_OK&lt;/code&gt;&lt;code&gt;SEEK_CUR&lt;/code&gt;&lt;code&gt;SEEK_END&lt;/code&gt;&lt;code&gt;SEEK_SET&lt;/code&gt;&lt;code&gt;STDIN_FILENO&lt;/code&gt;&lt;code&gt;STDOUT_FILENO&lt;/code&gt;&lt;code&gt;STDERR_FILENO&lt;/code&gt;&lt;code&gt;W_OK&lt;/code&gt;&lt;code&gt;X_OK&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;R_OK&lt;/code&gt;&lt;code&gt;SEEK_CUR&lt;/code&gt;&lt;code&gt;SEEK_END&lt;/code&gt;&lt;code&gt;SEEK_SET&lt;/code&gt;&lt;code&gt;STDIN_FILENO&lt;/code&gt;&lt;code&gt;STDOUT_FILENO&lt;/code&gt;&lt;code&gt;STDERR_FILENO&lt;/code&gt;&lt;code&gt;W_OK&lt;/code&gt;&lt;code&gt;X_OK&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="16450031490ec1497810c7f8a187e46a6f98921a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Role::Tiny&lt;/code&gt; provides some of the same features as Moose's role system, but in a much smaller package. Most notably, it doesn't support any sort of attribute declaration, so you have to do that by hand. Still, it's useful, and works well with &lt;code&gt;Class::Accessor&lt;/code&gt; and &lt;code&gt;Class::Tiny&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Role::Tiny&lt;/code&gt; は、Mooseのロールシステムと同じ機能をいくつか提供しますが、パッケージははるかに小さくなります。特に、属性の宣言はサポートされていないため、手動で行う必要があります。それでも、それは便利で、 &lt;code&gt;Class::Accessor&lt;/code&gt; と &lt;code&gt;Class::Tiny&lt;/code&gt; うまく機能します</target>
        </trans-unit>
        <trans-unit id="72d85e88640fdc0576a5d2e11c87c9259bf547b4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;S&amp;lt;text&amp;gt;&lt;/code&gt; -- text contains non-breaking spaces</source>
          <target state="translated">&lt;code&gt;S&amp;lt;text&amp;gt;&lt;/code&gt; -テキストに改行なしスペースが含まれています</target>
        </trans-unit>
        <trans-unit id="eb5d578bc230b533659795813b810943d7c13d3e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;S?&lt;/code&gt;, &lt;code&gt;S*&lt;/code&gt;, &lt;code&gt;S+&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;S?&lt;/code&gt;, &lt;code&gt;S*&lt;/code&gt;, &lt;code&gt;S+&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5ed46e883b6445e1d87d43e65db98c3721cdf127" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;S??&lt;/code&gt;, &lt;code&gt;S*?&lt;/code&gt;, &lt;code&gt;S+?&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;S??&lt;/code&gt;, &lt;code&gt;S*?&lt;/code&gt;, &lt;code&gt;S+?&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="95e3d6a83f5bb8422f1ded025ceccd43c17fbefa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SAVEFREEOP&lt;/code&gt; is slightly problematic under this scheme. Sometimes it can cause an op to be freed after its CV. If the CV has forcibly freed the ops on its slab and the slab itself, then we will be fiddling with a freed slab. Making &lt;code&gt;SAVEFREEOP&lt;/code&gt; a no-op doesn't help, as sometimes an op can be savefreed when there is no compilation error, so the op would never be freed. It holds a reference count on the slab, so the whole slab would leak. So &lt;code&gt;SAVEFREEOP&lt;/code&gt; now sets a special flag on the op (&lt;code&gt;-&amp;gt;op_savefree&lt;/code&gt;). The forced freeing of ops after a compilation error won't free any ops thus marked.</source>
          <target state="translated">&lt;code&gt;SAVEFREEOP&lt;/code&gt; は、このスキームでは少し問題があります。場合によっては、CVの後にopが解放される可能性があります。CVがそのスラブとスラブ自体の操作を強制的に解放した場合、解放されたスラブをいじることになります。作る &lt;code&gt;SAVEFREEOP&lt;/code&gt; を無操作しないの助けを借り、opが解放されることはありませんでしょうので、コンパイル・エラーがない場合など、時にはopがsavefreedすることができます。スラブの参照カウントを保持しているため、スラブ全体がリークします。そのため、 &lt;code&gt;SAVEFREEOP&lt;/code&gt; はopに特別なフラグを設定するようになりました（ &lt;code&gt;-&amp;gt;op_savefree&lt;/code&gt; ）。コンパイルエラー後にopsを強制的に解放しても、このようにマークされたopsは解放されません。</target>
        </trans-unit>
        <trans-unit id="d1843e3a2f66bfd9e3c971214ca68246db523585" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SA_NOCLDSTOP&lt;/code&gt;&lt;code&gt;SA_NOCLDWAIT&lt;/code&gt;&lt;code&gt;SA_NODEFER&lt;/code&gt;&lt;code&gt;SA_ONSTACK&lt;/code&gt;&lt;code&gt;SA_RESETHAND&lt;/code&gt;&lt;code&gt;SA_RESTART&lt;/code&gt;&lt;code&gt;SA_SIGINFO&lt;/code&gt;&lt;code&gt;SIGABRT&lt;/code&gt;&lt;code&gt;SIGALRM&lt;/code&gt;&lt;code&gt;SIGCHLD&lt;/code&gt;&lt;code&gt;SIGCONT&lt;/code&gt;&lt;code&gt;SIGFPE&lt;/code&gt;&lt;code&gt;SIGHUP&lt;/code&gt;&lt;code&gt;SIGILL&lt;/code&gt;&lt;code&gt;SIGINT&lt;/code&gt;&lt;code&gt;SIGKILL&lt;/code&gt;&lt;code&gt;SIGPIPE&lt;/code&gt;&lt;code&gt;SIGQUIT&lt;/code&gt;&lt;code&gt;SIGSEGV&lt;/code&gt;&lt;code&gt;SIGSTOP&lt;/code&gt;&lt;code&gt;SIGTERM&lt;/code&gt;&lt;code&gt;SIGTSTP&lt;/code&gt;&lt;code&gt;SIGTTIN&lt;/code&gt;&lt;code&gt;SIGTTOU&lt;/code&gt;&lt;code&gt;SIGUSR1&lt;/code&gt;&lt;code&gt;SIGUSR2&lt;/code&gt;&lt;code&gt;SIG_BLOCK&lt;/code&gt;&lt;code&gt;SIG_DFL&lt;/code&gt;&lt;code&gt;SIG_ERR&lt;/code&gt;&lt;code&gt;SIG_IGN&lt;/code&gt;&lt;code&gt;SIG_SETMASK&lt;/code&gt;&lt;code&gt;SIG_UNBLOCK&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;SA_NOCLDSTOP&lt;/code&gt;&lt;code&gt;SA_NOCLDWAIT&lt;/code&gt;&lt;code&gt;SA_NODEFER&lt;/code&gt;&lt;code&gt;SA_ONSTACK&lt;/code&gt;&lt;code&gt;SA_RESETHAND&lt;/code&gt;&lt;code&gt;SA_RESTART&lt;/code&gt;&lt;code&gt;SA_SIGINFO&lt;/code&gt;&lt;code&gt;SIGABRT&lt;/code&gt;&lt;code&gt;SIGALRM&lt;/code&gt;&lt;code&gt;SIGCHLD&lt;/code&gt;&lt;code&gt;SIGCONT&lt;/code&gt;&lt;code&gt;SIGFPE&lt;/code&gt;&lt;code&gt;SIGHUP&lt;/code&gt;&lt;code&gt;SIGILL&lt;/code&gt;&lt;code&gt;SIGINT&lt;/code&gt;&lt;code&gt;SIGKILL&lt;/code&gt;&lt;code&gt;SIGPIPE&lt;/code&gt;&lt;code&gt;SIGQUIT&lt;/code&gt;&lt;code&gt;SIGSEGV&lt;/code&gt;&lt;code&gt;SIGSTOP&lt;/code&gt;&lt;code&gt;SIGTERM&lt;/code&gt;&lt;code&gt;SIGTSTP&lt;/code&gt;&lt;code&gt;SIGTTIN&lt;/code&gt;&lt;code&gt;SIGTTOU&lt;/code&gt;&lt;code&gt;SIGUSR1&lt;/code&gt;&lt;code&gt;SIGUSR2&lt;/code&gt;&lt;code&gt;SIG_BLOCK&lt;/code&gt;&lt;code&gt;SIG_DFL&lt;/code&gt;&lt;code&gt;SIG_ERR&lt;/code&gt;&lt;code&gt;SIG_IGN&lt;/code&gt;&lt;code&gt;SIG_SETMASK&lt;/code&gt;&lt;code&gt;SIG_UNBLOCK&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6c299376e21404ac87a5213145b9a48e2b364d6a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SA_NOCLDSTOP&lt;/code&gt;&lt;code&gt;SA_NOCLDWAIT&lt;/code&gt;&lt;code&gt;SA_NODEFER&lt;/code&gt;&lt;code&gt;SA_ONSTACK&lt;/code&gt;&lt;code&gt;SA_RESETHAND&lt;/code&gt;&lt;code&gt;SA_RESTART&lt;/code&gt;&lt;code&gt;SA_SIGINFO&lt;/code&gt;&lt;code&gt;SIGABRT&lt;/code&gt;&lt;code&gt;SIGALRM&lt;/code&gt;&lt;code&gt;SIGCHLD&lt;/code&gt;&lt;code&gt;SIGCONT&lt;/code&gt;&lt;code&gt;SIGFPE&lt;/code&gt;&lt;code&gt;SIGHUP&lt;/code&gt;&lt;code&gt;SIGILL&lt;/code&gt;&lt;code&gt;SIGINT&lt;/code&gt;&lt;code&gt;SIGKILL&lt;/code&gt;&lt;code&gt;SIGPIPE&lt;/code&gt;&lt;code&gt;SIGQUIT&lt;/code&gt;&lt;code&gt;SIGSEGV&lt;/code&gt;&lt;code&gt;SIGSTOP&lt;/code&gt;&lt;code&gt;SIGTERM&lt;/code&gt;&lt;code&gt;SIGTSTP&lt;/code&gt;&lt;code&gt;SIGTTIN&lt;/code&gt;&lt;code&gt;SIGTTOU&lt;/code&gt;&lt;code&gt;SIGUSR1&lt;/code&gt;&lt;code&gt;SIGUSR2&lt;/code&gt;&lt;code&gt;SIG_BLOCK&lt;/code&gt;&lt;code&gt;SIG_DFL&lt;/code&gt;&lt;code&gt;SIG_ERR&lt;/code&gt;&lt;code&gt;SIG_IGN&lt;/code&gt;&lt;code&gt;SIG_SETMASK&lt;/code&gt;&lt;code&gt;SIG_UNBLOCK&lt;/code&gt;&lt;code&gt;ILL_ILLOPC&lt;/code&gt;&lt;code&gt;ILL_ILLOPN&lt;/code&gt;&lt;code&gt;ILL_ILLADR&lt;/code&gt;&lt;code&gt;ILL_ILLTRP&lt;/code&gt;&lt;code&gt;ILL_PRVOPC&lt;/code&gt;&lt;code&gt;ILL_PRVREG&lt;/code&gt;&lt;code&gt;ILL_COPROC&lt;/code&gt;&lt;code&gt;ILL_BADSTK&lt;/code&gt;&lt;code&gt;FPE_INTDIV&lt;/code&gt;&lt;code&gt;FPE_INTOVF&lt;/code&gt;&lt;code&gt;FPE_FLTDIV&lt;/code&gt;&lt;code&gt;FPE_FLTOVF&lt;/code&gt;&lt;code&gt;FPE_FLTUND&lt;/code&gt;&lt;code&gt;FPE_FLTRES&lt;/code&gt;&lt;code&gt;FPE_FLTINV&lt;/code&gt;&lt;code&gt;FPE_FLTSUB&lt;/code&gt;&lt;code&gt;SEGV_MAPERR&lt;/code&gt;&lt;code&gt;SEGV_ACCERR&lt;/code&gt;&lt;code&gt;BUS_ADRALN&lt;/code&gt;&lt;code&gt;BUS_ADRERR&lt;/code&gt;&lt;code&gt;BUS_OBJERR&lt;/code&gt;&lt;code&gt;TRAP_BRKPT&lt;/code&gt;&lt;code&gt;TRAP_TRACE&lt;/code&gt;&lt;code&gt;CLD_EXITED&lt;/code&gt;&lt;code&gt;CLD_KILLED&lt;/code&gt;&lt;code&gt;CLD_DUMPED&lt;/code&gt;&lt;code&gt;CLD_TRAPPED&lt;/code&gt;&lt;code&gt;CLD_STOPPED&lt;/code&gt;&lt;code&gt;CLD_CONTINUED&lt;/code&gt;&lt;code&gt;POLL_IN&lt;/code&gt;&lt;code&gt;POLL_OUT&lt;/code&gt;&lt;code&gt;POLL_MSG&lt;/code&gt;&lt;code&gt;POLL_ERR&lt;/code&gt;&lt;code&gt;POLL_PRI&lt;/code&gt;&lt;code&gt;POLL_HUP&lt;/code&gt;&lt;code&gt;SI_USER&lt;/code&gt;&lt;code&gt;SI_QUEUE&lt;/code&gt;&lt;code&gt;SI_TIMER&lt;/code&gt;&lt;code&gt;SI_ASYNCIO&lt;/code&gt;&lt;code&gt;SI_MESGQ&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;SA_NOCLDSTOP&lt;/code&gt;&lt;code&gt;SA_NOCLDWAIT&lt;/code&gt;&lt;code&gt;SA_NODEFER&lt;/code&gt;&lt;code&gt;SA_ONSTACK&lt;/code&gt;&lt;code&gt;SA_RESETHAND&lt;/code&gt;&lt;code&gt;SA_RESTART&lt;/code&gt;&lt;code&gt;SA_SIGINFO&lt;/code&gt;&lt;code&gt;SIGABRT&lt;/code&gt;&lt;code&gt;SIGALRM&lt;/code&gt;&lt;code&gt;SIGCHLD&lt;/code&gt;&lt;code&gt;SIGCONT&lt;/code&gt;&lt;code&gt;SIGFPE&lt;/code&gt;&lt;code&gt;SIGHUP&lt;/code&gt;&lt;code&gt;SIGILL&lt;/code&gt;&lt;code&gt;SIGINT&lt;/code&gt;&lt;code&gt;SIGKILL&lt;/code&gt;&lt;code&gt;SIGPIPE&lt;/code&gt;&lt;code&gt;SIGQUIT&lt;/code&gt;&lt;code&gt;SIGSEGV&lt;/code&gt;&lt;code&gt;SIGSTOP&lt;/code&gt;&lt;code&gt;SIGTERM&lt;/code&gt;&lt;code&gt;SIGTSTP&lt;/code&gt;&lt;code&gt;SIGTTIN&lt;/code&gt;&lt;code&gt;SIGTTOU&lt;/code&gt;&lt;code&gt;SIGUSR1&lt;/code&gt;&lt;code&gt;SIGUSR2&lt;/code&gt;&lt;code&gt;SIG_BLOCK&lt;/code&gt;&lt;code&gt;SIG_DFL&lt;/code&gt;&lt;code&gt;SIG_ERR&lt;/code&gt;&lt;code&gt;SIG_IGN&lt;/code&gt;&lt;code&gt;SIG_SETMASK&lt;/code&gt;&lt;code&gt;SIG_UNBLOCK&lt;/code&gt;&lt;code&gt;ILL_ILLOPC&lt;/code&gt;&lt;code&gt;ILL_ILLOPN&lt;/code&gt;&lt;code&gt;ILL_ILLADR&lt;/code&gt;&lt;code&gt;ILL_ILLTRP&lt;/code&gt;&lt;code&gt;ILL_PRVOPC&lt;/code&gt;&lt;code&gt;ILL_PRVREG&lt;/code&gt;&lt;code&gt;ILL_COPROC&lt;/code&gt;&lt;code&gt;ILL_BADSTK&lt;/code&gt;&lt;code&gt;FPE_INTDIV&lt;/code&gt;&lt;code&gt;FPE_INTOVF&lt;/code&gt;&lt;code&gt;FPE_FLTDIV&lt;/code&gt;&lt;code&gt;FPE_FLTOVF&lt;/code&gt;&lt;code&gt;FPE_FLTUND&lt;/code&gt;&lt;code&gt;FPE_FLTRES&lt;/code&gt;&lt;code&gt;FPE_FLTINV&lt;/code&gt;&lt;code&gt;FPE_FLTSUB&lt;/code&gt;&lt;code&gt;SEGV_MAPERR&lt;/code&gt;&lt;code&gt;SEGV_ACCERR&lt;/code&gt;&lt;code&gt;BUS_ADRALN&lt;/code&gt;&lt;code&gt;BUS_ADRERR&lt;/code&gt;&lt;code&gt;BUS_OBJERR&lt;/code&gt;&lt;code&gt;TRAP_BRKPT&lt;/code&gt;&lt;code&gt;TRAP_TRACE&lt;/code&gt;&lt;code&gt;CLD_EXITED&lt;/code&gt;&lt;code&gt;CLD_KILLED&lt;/code&gt;&lt;code&gt;CLD_DUMPED&lt;/code&gt;&lt;code&gt;CLD_TRAPPED&lt;/code&gt;&lt;code&gt;CLD_STOPPED&lt;/code&gt;&lt;code&gt;CLD_CONTINUED&lt;/code&gt;&lt;code&gt;POLL_IN&lt;/code&gt;&lt;code&gt;POLL_OUT&lt;/code&gt;&lt;code&gt;POLL_MSG&lt;/code&gt;&lt;code&gt;POLL_ERR&lt;/code&gt;&lt;code&gt;POLL_PRI&lt;/code&gt;&lt;code&gt;POLL_HUP&lt;/code&gt;&lt;code&gt;SI_USER&lt;/code&gt;&lt;code&gt;SI_QUEUE&lt;/code&gt;&lt;code&gt;SI_TIMER&lt;/code&gt;&lt;code&gt;SI_ASYNCIO&lt;/code&gt;&lt;code&gt;SI_MESGQ&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="38c777a85cb32d1057baca8609cbf656119cb80c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SA_SIGINFO&lt;/code&gt; can have segmentation faults.</source>
          <target state="translated">&lt;code&gt;SA_SIGINFO&lt;/code&gt; にはセグメンテーション違反がある可能性があります。</target>
        </trans-unit>
        <trans-unit id="7e2c7e6ad929d3573c5856ceff8f9188c27a5b2d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SCALAR&lt;/code&gt; , &lt;code&gt;UNTIE&lt;/code&gt; and &lt;code&gt;DESTROY&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;SCALAR&lt;/code&gt; 、 &lt;code&gt;UNTIE&lt;/code&gt; や &lt;code&gt;DESTROY&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="25561b5fed7a4a64f8e1bdca87ed1d440245d47f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SCALAR&lt;/code&gt; is only defined in &lt;b&gt;Tie::StdHash&lt;/b&gt; and &lt;b&gt;Tie::ExtraHash&lt;/b&gt;.</source>
          <target state="translated">&lt;code&gt;SCALAR&lt;/code&gt; は&lt;b&gt;Tie :: StdHash&lt;/b&gt;および&lt;b&gt;Tie :: ExtraHashで&lt;/b&gt;のみ定義されます。</target>
        </trans-unit>
        <trans-unit id="c01c53724b947a304f547036cc9f47a6fa4c05b9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SCALAR&lt;/code&gt;, &lt;code&gt;UNTIE&lt;/code&gt; and &lt;code&gt;DESTROY&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;SCALAR&lt;/code&gt; 、 &lt;code&gt;UNTIE&lt;/code&gt; 、および &lt;code&gt;DESTROY&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0e0b10cd155805605b61be127d2cd70120b9eb93" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SCALAR_CACHE&lt;/code&gt; , &lt;code&gt;LIST_CACHE&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;SCALAR_CACHE&lt;/code&gt; 、 &lt;code&gt;LIST_CACHE&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="aaa537551b85cdf71c32dec5ad4f61c98120314f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SCALAR_CACHE&lt;/code&gt;, &lt;code&gt;LIST_CACHE&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;SCALAR_CACHE&lt;/code&gt;, &lt;code&gt;LIST_CACHE&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="71b1d8651e236ece05cb9bdc8409196d019d2844" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SDBM_File&lt;/code&gt; doesn't supply an &lt;code&gt;EXISTS&lt;/code&gt; method, so included in this package is a glue module called &lt;code&gt;Memoize::SDBM_File&lt;/code&gt; which does provide one. Use this instead of plain &lt;code&gt;SDBM_File&lt;/code&gt; to store your cache table on disk in an &lt;code&gt;SDBM_File&lt;/code&gt; database:</source>
          <target state="translated">&lt;code&gt;SDBM_File&lt;/code&gt; は &lt;code&gt;EXISTS&lt;/code&gt; メソッドを提供しないため、このパッケージには、 &lt;code&gt;Memoize::SDBM_File&lt;/code&gt; と呼ばれるグルーモジュールが含まれています。プレーン &lt;code&gt;SDBM_File&lt;/code&gt; の代わりにこれを使用して、 &lt;code&gt;SDBM_File&lt;/code&gt; データベースのディスクにキャッシュテーブルを保存します。</target>
        </trans-unit>
        <trans-unit id="3d15d291ef03c3a83408298c576b7a0813776c00" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SDBM_File&lt;/code&gt; establishes a connection between a Perl hash variable and a file in SDBM_File format. You can manipulate the data in the file just as if it were in a Perl hash, but when your program exits, the data will remain in the file, to be used the next time your program runs.</source>
          <target state="translated">&lt;code&gt;SDBM_File&lt;/code&gt; は、Perlハッシュ変数とSDBM_File形式のファイルの間の接続を確立します。Perlハッシュの場合と同じようにファイル内のデータを操作できますが、プログラムが終了すると、データはファイル内に残り、次にプログラムを実行するときに使用されます。</target>
        </trans-unit>
        <trans-unit id="c4a6a48f7293646b32f7105b9bdea7360532c924" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SINCE&lt;/code&gt; is a time value and &lt;code&gt;DISTRIBUTIONS&lt;/code&gt; is either a distribution pattern or a reference to a list of distribution patterns. The result is the same as &lt;code&gt;list&lt;/code&gt; , but the groups return will be limited to those created after &lt;code&gt;SINCE&lt;/code&gt; and, if specified, in one of the distribution areas in &lt;code&gt;DISTRIBUTIONS&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;SINCE&lt;/code&gt; は時間値であり、 &lt;code&gt;DISTRIBUTIONS&lt;/code&gt; は分布パターンまたは分布パターンのリストへの参照です。結果は &lt;code&gt;list&lt;/code&gt; と同じですが、返されるグループは、 &lt;code&gt;SINCE&lt;/code&gt; の後で作成されたグループに限定され、指定されている場合は、 &lt;code&gt;DISTRIBUTIONS&lt;/code&gt; のいずれかの配布エリアで作成されます。</target>
        </trans-unit>
        <trans-unit id="dfe49ce3a70cf31931d3a54c8c25aa628361120e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SINCE&lt;/code&gt; is a time value and &lt;code&gt;DISTRIBUTIONS&lt;/code&gt; is either a distribution pattern or a reference to a list of distribution patterns. The result is the same as &lt;code&gt;list&lt;/code&gt;, but the groups return will be limited to those created after &lt;code&gt;SINCE&lt;/code&gt; and, if specified, in one of the distribution areas in &lt;code&gt;DISTRIBUTIONS&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SINCE&lt;/code&gt; は時間値であり、 &lt;code&gt;DISTRIBUTIONS&lt;/code&gt; は分布パターンまたは分布パターンのリストへの参照のいずれかです。結果は &lt;code&gt;list&lt;/code&gt; と同じですが、返されるグループは &lt;code&gt;SINCE&lt;/code&gt; の後に作成されたものに限定され、指定されている場合は、 &lt;code&gt;DISTRIBUTIONS&lt;/code&gt; の配布領域の1つに限定されます。</target>
        </trans-unit>
        <trans-unit id="a5bd8292a055ab0f605f05aa8dacaa769a46c577" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SINCE&lt;/code&gt; is a time value. &lt;code&gt;GROUPS&lt;/code&gt; is either a group pattern or a reference to a list of group patterns. &lt;code&gt;DISTRIBUTIONS&lt;/code&gt; is either a distribution pattern or a reference to a list of distribution patterns.</source>
          <target state="translated">&lt;code&gt;SINCE&lt;/code&gt; は時間値です。 &lt;code&gt;GROUPS&lt;/code&gt; は、グループパターンまたはグループパターンのリストへの参照です。 &lt;code&gt;DISTRIBUTIONS&lt;/code&gt; は、配布パターン、または配布パターンのリストへの参照です。</target>
        </trans-unit>
        <trans-unit id="4586201f8ccc0ac6dd8dff7d071362d41768b9e3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SSL_options&lt;/code&gt; &amp;mdash; A hashref of &lt;code&gt;SSL_*&lt;/code&gt; &amp;mdash; options to pass through to &lt;a href=&quot;IO::Socket::SSL&quot;&gt;IO::Socket::SSL&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;SSL_options&lt;/code&gt; &amp;mdash; &lt;code&gt;SSL_*&lt;/code&gt; のハッシュリファレンス&amp;mdash; &lt;a href=&quot;IO::Socket::SSL&quot;&gt;IO :: Socket :: SSL&lt;/a&gt;に渡すオプション</target>
        </trans-unit>
        <trans-unit id="8363925a9881c16e7bf7ee6b67ca48639f9f465b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;STDIN&lt;/code&gt; and &lt;code&gt;STDOUT&lt;/code&gt; were not set under the filter option. And &lt;code&gt;STDIN=&amp;gt;&lt;i&gt;ENCODING&lt;/i&gt;&lt;/code&gt; and &lt;code&gt;STDOUT=&amp;gt;&lt;i&gt;ENCODING&lt;/i&gt;&lt;/code&gt; didn't work like non-filter version.</source>
          <target state="translated">&lt;code&gt;STDIN&lt;/code&gt; および &lt;code&gt;STDOUT&lt;/code&gt; がフィルターオプションの下で設定されていません。また、 &lt;code&gt;STDIN=&amp;gt;&lt;i&gt;ENCODING&lt;/i&gt;&lt;/code&gt; および &lt;code&gt;STDOUT=&amp;gt;&lt;i&gt;ENCODING&lt;/i&gt;&lt;/code&gt; は、非フィルターバージョンのように機能しませんでした。</target>
        </trans-unit>
        <trans-unit id="d1d564c815e062d54f3b0c03413589f3b28724fc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;STRLEN&lt;/code&gt; is an integer type (&lt;code&gt;Size_t&lt;/code&gt;, usually defined as &lt;code&gt;size_t&lt;/code&gt; in</source>
          <target state="translated">&lt;code&gt;STRLEN&lt;/code&gt; は整数型（ &lt;code&gt;Size_t&lt;/code&gt; 、通常は &lt;code&gt;size_t&lt;/code&gt; として定義されます）</target>
        </trans-unit>
        <trans-unit id="1592372e2b3fafd08547f899651586efb80ed37d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;STRLEN&lt;/code&gt; is an integer type (Size_t, usually defined as size_t in</source>
          <target state="translated">&lt;code&gt;STRLEN&lt;/code&gt; は整数型です（Size_t、通常はsize_tとして定義されています）</target>
        </trans-unit>
        <trans-unit id="b33a48675865d3f493065a917725902bcbf05b26" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SVf_READONLY&lt;/code&gt; has been supported here only since perl 5.20. To work with earlier versions as well, use &lt;code&gt;SVf_READONLY|SVs_PADTMP&lt;/code&gt; . &lt;code&gt;SVf_READONLY&lt;/code&gt; does not cause the SV in the pad slot to be marked read-only, but simply tells &lt;code&gt;pad_alloc&lt;/code&gt; that it</source>
          <target state="translated">&lt;code&gt;SVf_READONLY&lt;/code&gt; は、perl 5.20以降でのみサポートされています。以前のバージョンでも作業するには、 &lt;code&gt;SVf_READONLY|SVs_PADTMP&lt;/code&gt; 使用します。 &lt;code&gt;SVf_READONLY&lt;/code&gt; は、パッドスロット内のSVを読み取り専用としてマークするのではなく、単に &lt;code&gt;pad_alloc&lt;/code&gt; に通知します。</target>
        </trans-unit>
        <trans-unit id="c57ba7d8ee81ae2b947af3a26e8c16d0ee60c971" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SVf_READONLY&lt;/code&gt; has been supported here only since perl 5.20. To work with earlier versions as well, use &lt;code&gt;SVf_READONLY|SVs_PADTMP&lt;/code&gt;. &lt;code&gt;SVf_READONLY&lt;/code&gt; does not cause the SV in the pad slot to be marked read-only, but simply tells &lt;code&gt;pad_alloc&lt;/code&gt; that it</source>
          <target state="translated">&lt;code&gt;SVf_READONLY&lt;/code&gt; は、perl5.20以降でのみここでサポートされています。以前のバージョンでも使用するには、 &lt;code&gt;SVf_READONLY|SVs_PADTMP&lt;/code&gt; 使用します。 &lt;code&gt;SVf_READONLY&lt;/code&gt; は、パッドスロットのSVを読み取り専用としてマークするのではなく、単に &lt;code&gt;pad_alloc&lt;/code&gt; にそれを通知します。</target>
        </trans-unit>
        <trans-unit id="3e369986ea1a99dba260899dd6cf709f5349ae79" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SVt_PVGV&lt;/code&gt; represents a typeglob. If &lt;code&gt;!SvFAKE(sv)&lt;/code&gt;, then it is a real, incoercible typeglob. If &lt;code&gt;SvFAKE(sv)&lt;/code&gt;, then it is a scalar to which a typeglob has been assigned. Assigning to it again will stop it from being a typeglob. &lt;code&gt;SVt_PVLV&lt;/code&gt; represents a scalar that delegates to another scalar behind the scenes. It is used, e.g., for the return value of &lt;code&gt;substr&lt;/code&gt; and for tied hash and array elements. It can hold any scalar value, including a typeglob. &lt;code&gt;SVt_REGEXP&lt;/code&gt; is for regular expressions. &lt;code&gt;SVt_INVLIST&lt;/code&gt; is for Perl core internal use only.</source>
          <target state="translated">&lt;code&gt;SVt_PVGV&lt;/code&gt; はtypeglobを表します。もし &lt;code&gt;!SvFAKE(sv)&lt;/code&gt; 、それは本当の、飽くなき型グロブです。場合 &lt;code&gt;SvFAKE(sv)&lt;/code&gt; 、それは型グロブが割り当てられているスカラーです。再度割り当てると、タイプグロブになるのを防ぎます。 &lt;code&gt;SVt_PVLV&lt;/code&gt; は、舞台裏で別のスカラーに委任するスカラーを表します。これは、たとえば、 &lt;code&gt;substr&lt;/code&gt; の戻り値や、結合されたハッシュおよび配列要素に使用されます。 typeglobを含む任意のスカラー値を保持できます。 &lt;code&gt;SVt_REGEXP&lt;/code&gt; は正規表現用です。 &lt;code&gt;SVt_INVLIST&lt;/code&gt; は、Perlコアの内部使用のみを目的としています。</target>
        </trans-unit>
        <trans-unit id="a9e78ca14d9f26581f4c407bb8a6a6a1bc456232" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SVt_PVIO&lt;/code&gt; is for I/O objects, &lt;code&gt;SVt_PVFM&lt;/code&gt; for formats, &lt;code&gt;SVt_PVCV&lt;/code&gt; for subroutines, &lt;code&gt;SVt_PVHV&lt;/code&gt; for hashes and &lt;code&gt;SVt_PVAV&lt;/code&gt; for arrays.</source>
          <target state="translated">&lt;code&gt;SVt_PVIO&lt;/code&gt; はI / Oオブジェクト用、 &lt;code&gt;SVt_PVFM&lt;/code&gt; はフォーマット用、 &lt;code&gt;SVt_PVCV&lt;/code&gt; はサブルーチン用、 &lt;code&gt;SVt_PVHV&lt;/code&gt; はハッシュ用、 &lt;code&gt;SVt_PVAV&lt;/code&gt; は配列用です。</target>
        </trans-unit>
        <trans-unit id="b27a52e4449d5693a3cdcd72a1df598c1a055b71" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SVt_PVMG&lt;/code&gt; represents a &quot;normal&quot; scalar (not a typeglob, regular expression, or delegate). Since most scalars do not need all the internal fields of a PVMG, we save memory by allocating smaller structs when possible. All the other types are just simpler forms of &lt;code&gt;SVt_PVMG&lt;/code&gt;, with fewer internal fields. &lt;code&gt;SVt_NULL&lt;/code&gt; can only hold undef. &lt;code&gt;SVt_IV&lt;/code&gt; can hold undef, an integer, or a reference. (&lt;code&gt;SVt_RV&lt;/code&gt; is an alias for &lt;code&gt;SVt_IV&lt;/code&gt;, which exists for backward compatibility.) &lt;code&gt;SVt_NV&lt;/code&gt; can hold any of those or a double. &lt;code&gt;SVt_PV&lt;/code&gt; can only hold &lt;code&gt;undef&lt;/code&gt; or a string. &lt;code&gt;SVt_PVIV&lt;/code&gt; is a superset of &lt;code&gt;SVt_PV&lt;/code&gt; and &lt;code&gt;SVt_IV&lt;/code&gt;. &lt;code&gt;SVt_PVNV&lt;/code&gt; is similar. &lt;code&gt;SVt_PVMG&lt;/code&gt; can hold anything &lt;code&gt;SVt_PVNV&lt;/code&gt; can hold, but it can, but does not have to, be blessed or magical.</source>
          <target state="translated">&lt;code&gt;SVt_PVMG&lt;/code&gt; は、「通常の」スカラーを表します（typeglob、正規表現、またはデリゲートではありません）。ほとんどのスカラーはPVMGのすべての内部フィールドを必要としないため、可能な場合はより小さな構造体を割り当てることでメモリを節約します。他のすべてのタイプは、 &lt;code&gt;SVt_PVMG&lt;/code&gt; の単純な形式であり、内部フィールドが少なくなっています。 &lt;code&gt;SVt_NULL&lt;/code&gt; はundefのみを保持できます。 &lt;code&gt;SVt_IV&lt;/code&gt; は、undef、整数、または参照を保持できます。 （ &lt;code&gt;SVt_RV&lt;/code&gt; はSVt_IVのエイリアスで &lt;code&gt;SVt_IV&lt;/code&gt; 、下位互換性のために存在します。） &lt;code&gt;SVt_NV&lt;/code&gt; は、これらのいずれかまたはdoubleを保持できます。 &lt;code&gt;SVt_PV&lt;/code&gt; は、 &lt;code&gt;undef&lt;/code&gt; または文字列のみを保持できます。 &lt;code&gt;SVt_PVIV&lt;/code&gt; はSVt_PVのスーパーセットで &lt;code&gt;SVt_PV&lt;/code&gt; 、 &lt;code&gt;SVt_IV&lt;/code&gt; 。 &lt;code&gt;SVt_PVNV&lt;/code&gt; も同様です。 &lt;code&gt;SVt_PVMG&lt;/code&gt; は、SVt_PVNVが保持できるものなら何でも &lt;code&gt;SVt_PVNV&lt;/code&gt; できますが、祝福されたり魔法をかけたりすることはできますが、必ずしもそうする必要はありません。</target>
        </trans-unit>
        <trans-unit id="bb24ce9f24ade09b2570ac0d0a13adb33f9e68a4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;S_IRGRP&lt;/code&gt;&lt;code&gt;S_IROTH&lt;/code&gt;&lt;code&gt;S_IRUSR&lt;/code&gt;&lt;code&gt;S_IRWXG&lt;/code&gt;&lt;code&gt;S_IRWXO&lt;/code&gt;&lt;code&gt;S_IRWXU&lt;/code&gt;&lt;code&gt;S_ISGID&lt;/code&gt;&lt;code&gt;S_ISUID&lt;/code&gt;&lt;code&gt;S_IWGRP&lt;/code&gt;&lt;code&gt;S_IWOTH&lt;/code&gt;&lt;code&gt;S_IWUSR&lt;/code&gt;&lt;code&gt;S_IXGRP&lt;/code&gt;&lt;code&gt;S_IXOTH&lt;/code&gt;&lt;code&gt;S_IXUSR&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;S_IRGRP&lt;/code&gt;&lt;code&gt;S_IROTH&lt;/code&gt;&lt;code&gt;S_IRUSR&lt;/code&gt;&lt;code&gt;S_IRWXG&lt;/code&gt;&lt;code&gt;S_IRWXO&lt;/code&gt;&lt;code&gt;S_IRWXU&lt;/code&gt;&lt;code&gt;S_ISGID&lt;/code&gt;&lt;code&gt;S_ISUID&lt;/code&gt;&lt;code&gt;S_IWGRP&lt;/code&gt;&lt;code&gt;S_IWOTH&lt;/code&gt;&lt;code&gt;S_IWUSR&lt;/code&gt;&lt;code&gt;S_IXGRP&lt;/code&gt;&lt;code&gt;S_IXOTH&lt;/code&gt;&lt;code&gt;S_IXUSR&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b84604732402ed69ebf71e2ffc9500c3d2f8b6a8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;S_ISBLK&lt;/code&gt;&lt;code&gt;S_ISCHR&lt;/code&gt;&lt;code&gt;S_ISDIR&lt;/code&gt;&lt;code&gt;S_ISFIFO&lt;/code&gt;&lt;code&gt;S_ISREG&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;S_ISBLK&lt;/code&gt;&lt;code&gt;S_ISCHR&lt;/code&gt;&lt;code&gt;S_ISDIR&lt;/code&gt;&lt;code&gt;S_ISFIFO&lt;/code&gt;&lt;code&gt;S_ISREG&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3f1705fa73ffb1ed6f77c7dd48f4a003fbc42fe8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Scalar::Util&lt;/code&gt; contains a selection of subroutines that people have expressed would be nice to have in the perl core, but the usage would not really be high enough to warrant the use of a keyword, and the size so small such that being individual extensions would be wasteful.</source>
          <target state="translated">&lt;code&gt;Scalar::Util&lt;/code&gt; は、perlコアで使用すると便利だとユーザーが表明した一連のサブルーチンが含まれていますが、実際の使用量はキーワードの使用を保証するのに十分高くなく、サイズが非常に小さいため、個々の拡張機能になります。無駄になります。</target>
        </trans-unit>
        <trans-unit id="b50d9bb17db667cc70af116236c46bee6dc41f2b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Scalar::Util&lt;/code&gt; contains a selection of subroutines that people have expressed would be nice to have in the perl core, but the usage would not really be high enough to warrant the use of a keyword, and the size would be so small that being individual extensions would be wasteful.</source>
          <target state="translated">&lt;code&gt;Scalar::Util&lt;/code&gt; は、perlコアに含めるとよいと人々が表現したサブルーチンの選択が含まれていますが、使用量はキーワードの使用を保証するほど高くはなく、サイズは非常に小さいため個別になります拡張機能は無駄になります。</target>
        </trans-unit>
        <trans-unit id="7320b904a1348ab8ee29f736d629145b7d946f83" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Scalar::Util&lt;/code&gt; contains both perl and C implementations of many of its functions so that those without access to a C compiler may still use it. However some of the functions are only available when a C compiler was available to compile the XS version of the extension.</source>
          <target state="translated">&lt;code&gt;Scalar::Util&lt;/code&gt; は、その機能の多くのperlとCの両方の実装が含まれているため、Cコンパイラにアクセスできないユーザーでも引き続き使用できます。ただし、一部の関数は、拡張機能のXSバージョンをコンパイルするためにCコンパイラが使用可能である場合にのみ使用できます。</target>
        </trans-unit>
        <trans-unit id="ca83b0ae7229fc1620219a7b3cf85ca6438cc57e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Script_Extensions&lt;/code&gt; is thus an improved &lt;code&gt;Script&lt;/code&gt; , in which there are fewer characters in the &lt;code&gt;Common&lt;/code&gt; script, and correspondingly more in other scripts. It is new in Unicode version 6.0, and its data are likely to change significantly in later releases, as things get sorted out. New code should probably be using &lt;code&gt;Script_Extensions&lt;/code&gt; and not plain &lt;code&gt;Script&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;Script_Extensions&lt;/code&gt; したがって、Script_Extensionsは改良された &lt;code&gt;Script&lt;/code&gt; であり、 &lt;code&gt;Common&lt;/code&gt; スクリプトの文字数が少なく、それに応じて他のスクリプトの文字数が多くなっています。これはUnicodeバージョン6.0の新機能であり、データは整理されて以降のリリースで大幅に変更される可能性があります。新しいコードでは、単純な &lt;code&gt;Script&lt;/code&gt; ではなく、おそらく &lt;code&gt;Script_Extensions&lt;/code&gt; を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="98a38d834373b59ad3712472e89b591a5277c584" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Script_Extensions&lt;/code&gt; is thus an improved &lt;code&gt;Script&lt;/code&gt;, in which there are fewer characters in the &lt;code&gt;Common&lt;/code&gt; script, and correspondingly more in other scripts. It is new in Unicode version 6.0, and its data are likely to change significantly in later releases, as things get sorted out. New code should probably be using &lt;code&gt;Script_Extensions&lt;/code&gt; and not plain &lt;code&gt;Script&lt;/code&gt;. If you compile perl with a Unicode release that doesn't have &lt;code&gt;Script_Extensions&lt;/code&gt;, the single form Perl extensions will instead refer to the plain &lt;code&gt;Script&lt;/code&gt; property. If you compile with a version of Unicode that doesn't have the &lt;code&gt;Script&lt;/code&gt; property, these extensions will not be defined at all.</source>
          <target state="translated">&lt;code&gt;Script_Extensions&lt;/code&gt; したがって、Script_Extensionsは改良された &lt;code&gt;Script&lt;/code&gt; であり、 &lt;code&gt;Common&lt;/code&gt; スクリプトの文字数が少なく、それに応じて他のスクリプトの文字数が多くなります。これはUnicodeバージョン6.0の新機能であり、今後のリリースでは、状況が整理されるにつれてデータが大幅に変更される可能性があります。新しいコードは、プレーン &lt;code&gt;Script&lt;/code&gt; ではなく、 &lt;code&gt;Script_Extensions&lt;/code&gt; を使用している可能性があります。 &lt;code&gt;Script_Extensions&lt;/code&gt; を持たないUnicodeリリースでperlをコンパイルする場合、単一形式のPerl拡張機能は代わりにプレーンな &lt;code&gt;Script&lt;/code&gt; プロパティを参照します。 &lt;code&gt;Script&lt;/code&gt; プロパティを持たないバージョンのUnicodeでコンパイルする場合、これらの拡張機能はまったく定義されません。</target>
        </trans-unit>
        <trans-unit id="74e8ac4ebbca5c842f8180e58a17ee29b6639f38" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SelfLoader&lt;/code&gt; is maintained by the perl5-porters. Please direct any questions to the canonical mailing list. Anything that is applicable to the CPAN release can be sent to its maintainer, though.</source>
          <target state="translated">&lt;code&gt;SelfLoader&lt;/code&gt; はperl5- portersによって管理されています。質問があれば、正規のメーリングリストに送ってください。ただし、CPANリリースに適用できるものはすべて、メンテナに送信できます。</target>
        </trans-unit>
        <trans-unit id="d6162b1a4ded697c1beb0eed8c402e8d4ddae3a5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Shift_JIS&lt;/code&gt; has been officialized by JIS X 0208:1997. &lt;a href=&quot;#Microsoft-related-naming-mess&quot;&gt;&quot;Microsoft-related naming mess&quot;&lt;/a&gt; gives details.</source>
          <target state="translated">&lt;code&gt;Shift_JIS&lt;/code&gt; は、JIS X 0208：1997によって公式化されています。&lt;a href=&quot;#Microsoft-related-naming-mess&quot;&gt;「Microsoft関連の命名の混乱」&lt;/a&gt;に詳細が記載されています。</target>
        </trans-unit>
        <trans-unit id="91ded624fc9abf9da5cffcd42e02847813bc5525" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Socket&lt;/code&gt; - networking constants and support functions</source>
          <target state="translated">&lt;code&gt;Socket&lt;/code&gt; -ネットワーク定数とサポート関数</target>
        </trans-unit>
        <trans-unit id="4cc0d35bf7a3d530b6b87c692b0ada03ab1edb06" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Socket&lt;/code&gt; a low-level module used by, among other things, the &lt;a href=&quot;IO::Socket&quot;&gt;IO::Socket&lt;/a&gt; family of modules. The following examples demonstrate some low-level uses but a practical program would likely use the higher-level API provided by &lt;code&gt;IO::Socket&lt;/code&gt; or similar instead.</source>
          <target state="translated">&lt;code&gt;Socket&lt;/code&gt; とりわけにより使用される低レベルのモジュール、&lt;a href=&quot;IO::Socket&quot;&gt;IO ::ソケット&lt;/a&gt;モジュールの家族。次の例は、いくつかの低レベルの使用法を示していますが、実際のプログラムでは、代わりに &lt;code&gt;IO::Socket&lt;/code&gt; などによって提供される高レベルのAPIを使用する可能性があります。</target>
        </trans-unit>
        <trans-unit id="7cd3abf31dc1b8226d37ec0f945580ebc843bb88" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Socket&lt;/code&gt; a low-level module used by, among other things, the &lt;a href=&quot;io/socket&quot;&gt;IO::Socket&lt;/a&gt; family of modules. The following examples demonstrate some low-level uses but a practical program would likely use the higher-level API provided by &lt;code&gt;IO::Socket&lt;/code&gt; or similar instead.</source>
          <target state="translated">&lt;code&gt;Socket&lt;/code&gt; は、とりわけ、モジュールの&lt;a href=&quot;io/socket&quot;&gt;IO :: Socket&lt;/a&gt;ファミリーによって使用される低レベルのモジュールです。次の例は、いくつかの低レベルの使用法を示していますが、実際のプログラムでは、代わりに &lt;code&gt;IO::Socket&lt;/code&gt; などによって提供される高レベルのAPIを使用する可能性があります。</target>
        </trans-unit>
        <trans-unit id="809bfffef87645dfd0ad34a6a4e0e405572b4852" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SourceHandlers&lt;/code&gt; must implement the</source>
          <target state="translated">&lt;code&gt;SourceHandlers&lt;/code&gt; は実装する必要があります</target>
        </trans-unit>
        <trans-unit id="25b8cacd499f22c2ad5bc02ef2c976505abecd19" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Storable::drop_utf8&lt;/code&gt; is a blunt tool. There is no facility either to return &lt;b&gt;all&lt;/b&gt; strings as utf8 sequences, or to attempt to convert utf8 data back to 8 bit and &lt;code&gt;croak()&lt;/code&gt; if the conversion fails.</source>
          <target state="translated">&lt;code&gt;Storable::drop_utf8&lt;/code&gt; は鈍いツールです。&lt;b&gt;すべての&lt;/b&gt;文字列をutf8シーケンスとして返す機能も、変換が失敗した場合にutf8データを8ビットに変換して &lt;code&gt;croak()&lt;/code&gt; する機能もありません。</target>
        </trans-unit>
        <trans-unit id="0e51b3fbdef231165af8ecaa2816829d5a028adf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Storable&lt;/code&gt; isn't a tied hash class at all. You can use it to store a hash to disk and retrieve it again, but you can't modify the hash while it's on the disk. So if you want to store your cache table in a &lt;code&gt;Storable&lt;/code&gt; database, use &lt;code&gt;Memoize::Storable&lt;/code&gt; , which puts a hashlike front-end onto &lt;code&gt;Storable&lt;/code&gt; . The hash table is actually kept in memory, and is loaded from your &lt;code&gt;Storable&lt;/code&gt; file at the time you memoize the function, and stored back at the time you unmemoize the function (or when your program exits):</source>
          <target state="translated">&lt;code&gt;Storable&lt;/code&gt; は、まったく同じハッシュクラスではありません。これを使用してハッシュをディスクに格納し、再度取得できますが、ディスク上にある間はハッシュを変更できません。したがって、キャッシュテーブルを &lt;code&gt;Storable&lt;/code&gt; データベースに保存する場合は、 &lt;code&gt;Memoize::Storable&lt;/code&gt; 使用して、ハッシュのようなフロントエンドを &lt;code&gt;Storable&lt;/code&gt; に配置します。ハッシュテーブルは実際にはメモリに保持され、関数をメモするときに &lt;code&gt;Storable&lt;/code&gt; ファイルから読み込まれ、関数をメモ解除するときに（またはプログラムが終了するときに）格納されます。</target>
        </trans-unit>
        <trans-unit id="024381a4fbcca44ca54b885462f57742f85a84e8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Storable&lt;/code&gt; isn't a tied hash class at all. You can use it to store a hash to disk and retrieve it again, but you can't modify the hash while it's on the disk. So if you want to store your cache table in a &lt;code&gt;Storable&lt;/code&gt; database, use &lt;code&gt;Memoize::Storable&lt;/code&gt;, which puts a hashlike front-end onto &lt;code&gt;Storable&lt;/code&gt;. The hash table is actually kept in memory, and is loaded from your &lt;code&gt;Storable&lt;/code&gt; file at the time you memoize the function, and stored back at the time you unmemoize the function (or when your program exits):</source>
          <target state="translated">&lt;code&gt;Storable&lt;/code&gt; は、タイのハッシュクラスではありません。これを使用してハッシュをディスクに保存し、再度取得することはできますが、ディスク上にある間はハッシュを変更することはできません。したがって、キャッシュテーブルを &lt;code&gt;Storable&lt;/code&gt; データベースに保存する場合は、 &lt;code&gt;Memoize::Storable&lt;/code&gt; 使用します。これにより、ハッシュのようなフロントエンドが &lt;code&gt;Storable&lt;/code&gt; に配置されます。ハッシュテーブルは実際にはメモリに保持され、関数をメモ化するときに &lt;code&gt;Storable&lt;/code&gt; ファイルからロードされ、関数をメモ化解除するとき（またはプログラムが終了するとき）に保存されます。</target>
        </trans-unit>
        <trans-unit id="473d743079fad427614a4cd2d0a5d15458b01a56" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Strict&lt;/code&gt; will optionally police the values supplied with other options to ensure they are compliant with RFC1952.</source>
          <target state="translated">&lt;code&gt;Strict&lt;/code&gt; はオプションで、他のオプションで提供される値をポリシングして、RFC1952に準拠していることを確認します。</target>
        </trans-unit>
        <trans-unit id="39dbb0c5e530bf8b39d2bf1c91a1a199e9df8342" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Sub::Util&lt;/code&gt; contains a selection of utility subroutines that are useful for operating on subs and CODE references.</source>
          <target state="translated">&lt;code&gt;Sub::Util&lt;/code&gt; は、subsおよびCODE参照の操作に役立つユーティリティサブルーチンの選択が含まれています。</target>
        </trans-unit>
        <trans-unit id="2634e7ecab96eac51ac5f6841ce76af5900ddfef" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SvPVX(cv)&lt;/code&gt; contains just the sub name itself, not including the package. For an AUTOLOAD routine in UNIVERSAL or one of its superclasses, &lt;code&gt;CvSTASH(cv)&lt;/code&gt; returns NULL during a method call on a nonexistent package.</source>
          <target state="translated">&lt;code&gt;SvPVX(cv)&lt;/code&gt; には、パッケージを含まず、サブ名自体のみが含まれます。UNIVERSALまたはそのスーパークラスの1つのAUTOLOADルーチンの場合、 &lt;code&gt;CvSTASH(cv)&lt;/code&gt; は、存在しないパッケージでのメソッド呼び出し中にNULLを返します。</target>
        </trans-unit>
        <trans-unit id="66087de4379e8b4ba6ee68f3ac7224bb04529881" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SvTHINKFIRST&lt;/code&gt; sometimes produces false positives. In those cases &lt;code&gt;sv_force_normal&lt;/code&gt; does nothing.</source>
          <target state="translated">&lt;code&gt;SvTHINKFIRST&lt;/code&gt; は、誤検知を生成することがあります。そのような場合、 &lt;code&gt;sv_force_normal&lt;/code&gt; は何もしません。</target>
        </trans-unit>
        <trans-unit id="e4284263287abb62d9067e62403bfa7c57791af7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Symbol::delete_package&lt;/code&gt; is a bit too powerful. It undefines every symbol that lives in the specified package. Since perl, for performance reasons, does not perform a symbol table lookup each time a function is called or a global variable is accessed, some code that has already been loaded and that makes use of symbols in package &lt;code&gt;Foo&lt;/code&gt; may stop working after you delete &lt;code&gt;Foo&lt;/code&gt; , even if you reload the &lt;code&gt;Foo&lt;/code&gt; module afterwards.</source>
          <target state="translated">&lt;code&gt;Symbol::delete_package&lt;/code&gt; は少し強力すぎる。指定されたパッケージに含まれるすべてのシンボルの定義を解除します。perlはパフォーマンス上の理由から、関数が呼び出されるたび、またはグローバル変数がアクセスされるたびにシンボルテーブルのルックアップを実行しないため、 &lt;code&gt;Foo&lt;/code&gt; を削除した後に、すでにロードされ、パッケージ &lt;code&gt;Foo&lt;/code&gt; のシンボルを使用するコードが機能しなくなる場合があります。、後で &lt;code&gt;Foo&lt;/code&gt; モジュールをリロードしても。</target>
        </trans-unit>
        <trans-unit id="6b3d9ee00f5d381f7e8217ebb61d529e2ba59b7a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Symbol::delete_package&lt;/code&gt; is a bit too powerful. It undefines every symbol that lives in the specified package. Since perl, for performance reasons, does not perform a symbol table lookup each time a function is called or a global variable is accessed, some code that has already been loaded and that makes use of symbols in package &lt;code&gt;Foo&lt;/code&gt; may stop working after you delete &lt;code&gt;Foo&lt;/code&gt;, even if you reload the &lt;code&gt;Foo&lt;/code&gt; module afterwards.</source>
          <target state="translated">&lt;code&gt;Symbol::delete_package&lt;/code&gt; は少し強力すぎます。指定されたパッケージに存在するすべてのシンボルの定義を解除します。perlは、パフォーマンス上の理由から、関数が呼び出されたりグローバル変数にアクセスしたりするたびにシンボルテーブルのルックアップを実行しないため、 &lt;code&gt;Foo&lt;/code&gt; を削除すると、パッケージ &lt;code&gt;Foo&lt;/code&gt; のシンボルを使用する、既にロードされているコードが機能しなくなる場合があります。、後で &lt;code&gt;Foo&lt;/code&gt; モジュールをリロードしても。</target>
        </trans-unit>
        <trans-unit id="1d33e995b16d967301c7242758ce1abfd4f052c3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Symbol::delete_package&lt;/code&gt; wipes out a whole package namespace. Note this routine is not exported by default--you may want to import it explicitly.</source>
          <target state="translated">&lt;code&gt;Symbol::delete_package&lt;/code&gt; は、パッケージの名前空間全体を一掃します。このルーチンはデフォルトではエクスポートされないことに注意してください。明示的にインポートすることもできます。</target>
        </trans-unit>
        <trans-unit id="2881407c50abb98d95f598118df2cf0beb51f77a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Symbol::geniosym&lt;/code&gt; creates an anonymous IO handle. This can be assigned into an existing glob without affecting the non-IO portions of the glob.</source>
          <target state="translated">&lt;code&gt;Symbol::geniosym&lt;/code&gt; は匿名のIOハンドルを作成します。これは、グロブの非IO部分に影響を与えることなく、既存のグロブに割り当てることができます。</target>
        </trans-unit>
        <trans-unit id="6304710bfcc18035fc96ecea6a7a7d1b4365f2cd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Symbol::gensym&lt;/code&gt; creates an anonymous glob and returns a reference to it. Such a glob reference can be used as a file or directory handle.</source>
          <target state="translated">&lt;code&gt;Symbol::gensym&lt;/code&gt; は匿名のグロブを作成し、それへの参照を返します。このようなグロブ参照は、ファイルまたはディレクトリのハンドルとして使用できます。</target>
        </trans-unit>
        <trans-unit id="3b1df54b779d123e961a097198a5d301ff9a76cb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Symbol::qualify&lt;/code&gt; turns unqualified symbol names into qualified variable names (e.g. &quot;myvar&quot; -&amp;gt; &quot;MyPackage::myvar&quot;). If it is given a second parameter, &lt;code&gt;qualify&lt;/code&gt; uses it as the default package; otherwise, it uses the package of its caller. Regardless, global variable names (e.g. &quot;STDOUT&quot;, &quot;ENV&quot;, &quot;SIG&quot;) are always qualified with &quot;main::&quot;.</source>
          <target state="translated">&lt;code&gt;Symbol::qualify&lt;/code&gt; は、修飾されていないシンボル名を修飾された変数名に変換します（例： &quot;myvar&quot;-&amp;gt; &quot;MyPackage :: myvar&quot;）。2番目のパラメーターが指定されている場合、 &lt;code&gt;qualify&lt;/code&gt; はそれをデフォルトパッケージとして使用します。それ以外の場合は、呼び出し元のパッケージを使用します。いずれにしても、グローバル変数名（「STDOUT」、「ENV」、「SIG」など）は常に「main ::」で修飾されます。</target>
        </trans-unit>
        <trans-unit id="36d3940d34d2f6d97b8cbcc2b62c6ada7464408e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Symbol::qualify_to_ref&lt;/code&gt; is just like &lt;code&gt;Symbol::qualify&lt;/code&gt; except that it returns a glob ref rather than a symbol name, so you can use the result even if &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; strict 'refs'&lt;/code&gt; is in effect.</source>
          <target state="translated">&lt;code&gt;Symbol::qualify_to_ref&lt;/code&gt; は、シンボル名ではなくグロブ参照を返す &lt;code&gt;Symbol::qualify&lt;/code&gt; を除いて、Symbol :: qualifyと同じです。したがって、 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; strict 'refs'&lt;/code&gt; &lt;a href=&quot;functions/use&quot;&gt;使用&lt;/a&gt;が有効な場合でも結果を使用できます。</target>
        </trans-unit>
        <trans-unit id="59f598418ef0f7104504f018878b34817a42b6c9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Symbol::qualify_to_ref&lt;/code&gt; is just like &lt;code&gt;Symbol::qualify&lt;/code&gt; except that it returns a glob ref rather than a symbol name, so you can use the result even if &lt;code&gt;use strict 'refs'&lt;/code&gt; is in effect.</source>
          <target state="translated">&lt;code&gt;Symbol::qualify_to_ref&lt;/code&gt; 同じようにある &lt;code&gt;Symbol::qualify&lt;/code&gt; あなたはしても、結果を使用することができますので、それは、グロブrefのではなく、シンボル名を返すことを除いて &lt;code&gt;use strict 'refs'&lt;/code&gt; 有効です。</target>
        </trans-unit>
        <trans-unit id="3b97cf7d30005de1a6539396647cc18ee3bfc6e0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Sys::Syslog&lt;/code&gt; exports the following &lt;code&gt;Exporter&lt;/code&gt; tags:</source>
          <target state="translated">&lt;code&gt;Sys::Syslog&lt;/code&gt; は、次の &lt;code&gt;Exporter&lt;/code&gt; タグをエクスポートします。</target>
        </trans-unit>
        <trans-unit id="c813dc28c2bae993e91667c602bb5be44271d404" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Sys::Syslog&lt;/code&gt; is a core module, part of the standard Perl distribution since 1990. At this time, modules as we know them didn't exist, the Perl library was a collection of</source>
          <target state="translated">&lt;code&gt;Sys::Syslog&lt;/code&gt; はコアモジュールであり、1990年以降の標準的なPerlディストリビューションの一部です。現時点では、モジュールが存在しないことがわかっているため、Perlライブラリは</target>
        </trans-unit>
        <trans-unit id="7568cb65c9c188200eec96ea14f56d0d837a835e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Sys::Syslog&lt;/code&gt; is an interface to the UNIX &lt;code&gt;syslog(3)&lt;/code&gt; program. Call &lt;code&gt;syslog()&lt;/code&gt; with a string priority and a list of &lt;code&gt;&lt;a href=&quot;../functions/printf&quot;&gt;printf()&lt;/a&gt;&lt;/code&gt; args just like &lt;code&gt;syslog(3)&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;Sys::Syslog&lt;/code&gt; は、UNIXの &lt;code&gt;syslog(3)&lt;/code&gt; プログラムへのインターフェースです。 &lt;code&gt;syslog(3)&lt;/code&gt; と同じように、文字列の優先順位と &lt;code&gt;&lt;a href=&quot;../functions/printf&quot;&gt;printf()&lt;/a&gt;&lt;/code&gt; 引数のリストを指定して &lt;code&gt;syslog()&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="a7cb250e75d0a05a41294fd8e9209a2f4b75b7a6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Sys::Syslog&lt;/code&gt; is an interface to the UNIX &lt;code&gt;syslog(3)&lt;/code&gt; program. Call &lt;code&gt;syslog()&lt;/code&gt; with a string priority and a list of &lt;code&gt;printf()&lt;/code&gt; args just like &lt;code&gt;syslog(3)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Sys::Syslog&lt;/code&gt; は、UNIXの &lt;code&gt;syslog(3)&lt;/code&gt; プログラムへのインターフェイスです。コール &lt;code&gt;syslog()&lt;/code&gt; 文字列の優先順位とのリストと &lt;code&gt;printf()&lt;/code&gt; と同じように引数 &lt;code&gt;syslog(3)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5764b6680823ce2de6ec417f2c5a5cac4de54ba1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Sys::Syslog&lt;/code&gt; version v0.07 and older passed the &lt;code&gt;$message&lt;/code&gt; as the formatting string to &lt;code&gt;&lt;a href=&quot;../functions/sprintf&quot;&gt;sprintf()&lt;/a&gt;&lt;/code&gt; even when no formatting arguments were provided. If the code calling &lt;code&gt;syslog()&lt;/code&gt; might execute with older versions of this module, make sure to call the function as &lt;code&gt;syslog($priority, &quot;%s&quot;, $message)&lt;/code&gt; instead of &lt;code&gt;syslog($priority,
$message)&lt;/code&gt; . This protects against hostile formatting sequences that might show up if $message contains tainted data.</source>
          <target state="translated">&lt;code&gt;Sys::Syslog&lt;/code&gt; バージョンv0.07以前では、フォーマット引数が指定されていない場合でも、 &lt;code&gt;$message&lt;/code&gt; をフォーマット文字列として &lt;code&gt;&lt;a href=&quot;../functions/sprintf&quot;&gt;sprintf()&lt;/a&gt;&lt;/code&gt; に渡していました。 &lt;code&gt;syslog()&lt;/code&gt; を呼び出すコードがこのモジュールの古いバージョンで実行される可能性がある場合は、 &lt;code&gt;syslog($priority, &quot;%s&quot;, $message)&lt;/code&gt; ではなくsyslog（$ priority、 &quot;％s&quot;、$ message）として関数を呼び出して &lt;code&gt;syslog($priority, $message)&lt;/code&gt; 。これにより、$ messageに汚染されたデータが含まれている場合に表示される可能性のある、悪意のあるフォーマットシーケンスから保護されます。</target>
        </trans-unit>
        <trans-unit id="86d4bf93b3e0c06356477292e881dce3b09a7466" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Sys::Syslog&lt;/code&gt; version v0.07 and older passed the &lt;code&gt;$message&lt;/code&gt; as the formatting string to &lt;code&gt;sprintf()&lt;/code&gt; even when no formatting arguments were provided. If the code calling &lt;code&gt;syslog()&lt;/code&gt; might execute with older versions of this module, make sure to call the function as &lt;code&gt;syslog($priority, &quot;%s&quot;, $message)&lt;/code&gt; instead of &lt;code&gt;syslog($priority, $message)&lt;/code&gt;. This protects against hostile formatting sequences that might show up if $message contains tainted data.</source>
          <target state="translated">&lt;code&gt;Sys::Syslog&lt;/code&gt; バージョンv0.07以前では、フォーマット引数が指定されていない場合でも、フォーマット文字列として &lt;code&gt;$message&lt;/code&gt; が &lt;code&gt;sprintf()&lt;/code&gt; に渡されていました。 &lt;code&gt;syslog()&lt;/code&gt; を呼び出すコードがこのモジュールの古いバージョンで実行される可能性がある場合は、 &lt;code&gt;syslog($priority, &quot;%s&quot;, $message)&lt;/code&gt; ではなくsyslog（$ priority、 &quot;％s&quot;、$ message）として関数を呼び出すようにして &lt;code&gt;syslog($priority, $message)&lt;/code&gt; 。これにより、$ messageに汚染されたデータが含まれている場合に表示される可能性のある敵対的なフォーマットシーケンスから保護されます。</target>
        </trans-unit>
        <trans-unit id="1f5313b78f03141f017e23634ef660fed87d25a0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;TAP::Base&lt;/code&gt; provides callback management.</source>
          <target state="translated">&lt;code&gt;TAP::Base&lt;/code&gt; はコールバック管理を提供します。</target>
        </trans-unit>
        <trans-unit id="3ad2ff19a7b9905abe9ca7c29a86e5aac4455383" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;TAP::Harness&lt;/code&gt; is designed to be easy to configure.</source>
          <target state="translated">&lt;code&gt;TAP::Harness&lt;/code&gt; は簡単に設定できるように設計されています。</target>
        </trans-unit>
        <trans-unit id="f98ff2be528a35677bb4032abf8db41c2f2dfe55" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;TAP::Object&lt;/code&gt; provides a default constructor and exception model for all &lt;code&gt;TAP::*&lt;/code&gt; classes. Exceptions are raised using &lt;a href=&quot;../carp&quot;&gt;Carp&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;TAP::Object&lt;/code&gt; は、すべての &lt;code&gt;TAP::*&lt;/code&gt; クラスにデフォルトのコンストラクターと例外モデルを提供します。例外は&lt;a href=&quot;../carp&quot;&gt;Carp&lt;/a&gt;を使用して発生します。</target>
        </trans-unit>
        <trans-unit id="b899027613718a03007c82fa84c8a823843ed900" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;TAP::Object&lt;/code&gt; provides a default constructor and exception model for all &lt;code&gt;TAP::*&lt;/code&gt; classes. Exceptions are raised using &lt;a href=&quot;carp&quot;&gt;Carp&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;TAP::Object&lt;/code&gt; は、すべての &lt;code&gt;TAP::*&lt;/code&gt; クラスにデフォルトのコンストラクターと例外モデルを提供します。&lt;a href=&quot;carp&quot;&gt;Carp&lt;/a&gt;を使用して例外が発生します。</target>
        </trans-unit>
        <trans-unit id="de08af296bc81bae0a502eeab38906f9d38f6946" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;TAP::Parser::Aggregator&lt;/code&gt; collects parser objects and allows reporting/querying their aggregate results.</source>
          <target state="translated">&lt;code&gt;TAP::Parser::Aggregator&lt;/code&gt; はパーサーオブジェクトを収集し、それらの集計結果のレポート/クエリを許可します。</target>
        </trans-unit>
        <trans-unit id="7b309d48f4b14e531b98f29e3bd66e6ee2d2c4c8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;TAP::Parser::Grammar&lt;/code&gt; tokenizes lines from a &lt;a href=&quot;TAP::Parser::Iterator&quot;&gt;TAP::Parser::Iterator&lt;/a&gt; and constructs &lt;a href=&quot;TAP::Parser::Result&quot;&gt;TAP::Parser::Result&lt;/a&gt; subclasses to represent the tokens.</source>
          <target state="translated">&lt;code&gt;TAP::Parser::Grammar&lt;/code&gt; は、&lt;a href=&quot;TAP::Parser::Iterator&quot;&gt;TAP :: Parser :: Iterator&lt;/a&gt;からの行をトークン化し、トークンを表すために&lt;a href=&quot;TAP::Parser::Result&quot;&gt;TAP :: Parser :: Result&lt;/a&gt;サブクラスを構築します。</target>
        </trans-unit>
        <trans-unit id="a3b643e4bccf3d2c6b004d8c272aaeaacb6b03e8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;TAP::Parser::Grammar&lt;/code&gt; tokenizes lines from a &lt;a href=&quot;iterator&quot;&gt;TAP::Parser::Iterator&lt;/a&gt; and constructs &lt;a href=&quot;result&quot;&gt;TAP::Parser::Result&lt;/a&gt; subclasses to represent the tokens.</source>
          <target state="translated">&lt;code&gt;TAP::Parser::Grammar&lt;/code&gt; は、&lt;a href=&quot;iterator&quot;&gt;TAP :: Parser :: Iterator&lt;/a&gt;からの行をトークン化し、トークンを表す&lt;a href=&quot;result&quot;&gt;TAP :: Parser :: Result&lt;/a&gt;サブクラスを構築します。</target>
        </trans-unit>
        <trans-unit id="8b8f01afae57ad3cba82a74e20949b48d80c17d6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;TAP::Parser::Multiplexer&lt;/code&gt; gathers input from multiple TAP::Parsers. Internally it calls select on the input file handles for those parsers to wait for one or more of them to have input available.</source>
          <target state="translated">&lt;code&gt;TAP::Parser::Multiplexer&lt;/code&gt; は、複数のTAP :: Parsersから入力を収集します。内部的には、これらのパーサーが1つ以上の入力が利用可能になるのを待つために、入力ファイルハンドルに対してselectを呼び出します。</target>
        </trans-unit>
        <trans-unit id="adb9813c19e749dc873795d47deb2d1cf1c465d6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;TAP::Parser::Result-&amp;gt;new&lt;/code&gt; is never called, $tokens are reblessed. This</source>
          <target state="translated">&lt;code&gt;TAP::Parser::Result-&amp;gt;new&lt;/code&gt; が呼び出されることはなく、$ tokenはreblessされます。この</target>
        </trans-unit>
        <trans-unit id="8722f3aa3dc33f241bd8fa9f537d5593b8612d2a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;TAP::Parser&lt;/code&gt; is designed to produce a proper parse of TAP output. For an example of how to run tests through this module, see the simple harnesses &lt;code&gt;examples/&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;TAP::Parser&lt;/code&gt; は、TAP出力の適切な解析を生成するように設計されています。このモジュールでテストを実行する方法の例については、単純なハーネスの &lt;code&gt;examples/&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="3e962c9f0a5edfb3da21e852081d0aee53aaa1c4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;TAP::Parser&lt;/code&gt; is designed to produce a proper parse of TAP output. For an example of how to run tests through this module, see the simple harnesses &lt;code&gt;examples/&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;TAP::Parser&lt;/code&gt; は、TAP出力の適切な解析を生成するように設計されています。このモジュールを介してテストを実行する方法の例については、単純なハーネスの &lt;code&gt;examples/&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="eb94de0078d3867d1d98a2ebe12069e8acf7897b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;TAP::Parser&lt;/code&gt; plugins let you change the way TAP is</source>
          <target state="translated">&lt;code&gt;TAP::Parser&lt;/code&gt; プラグインを使用すると、TAPの方法を変更できます</target>
        </trans-unit>
        <trans-unit id="a472c92eb1c8099613c1ca25abb3493a801d9a6a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;TCSADRAIN&lt;/code&gt;&lt;code&gt;TCSANOW&lt;/code&gt;&lt;code&gt;TCOON&lt;/code&gt;&lt;code&gt;TCIOFLUSH&lt;/code&gt;&lt;code&gt;TCOFLUSH&lt;/code&gt;&lt;code&gt;TCION&lt;/code&gt;&lt;code&gt;TCIFLUSH&lt;/code&gt;&lt;code&gt;TCSAFLUSH&lt;/code&gt;&lt;code&gt;TCIOFF&lt;/code&gt;&lt;code&gt;TCOOFF&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;TCSADRAIN&lt;/code&gt;&lt;code&gt;TCSANOW&lt;/code&gt;&lt;code&gt;TCOON&lt;/code&gt;&lt;code&gt;TCIOFLUSH&lt;/code&gt;&lt;code&gt;TCOFLUSH&lt;/code&gt;&lt;code&gt;TCION&lt;/code&gt;&lt;code&gt;TCIFLUSH&lt;/code&gt;&lt;code&gt;TCSAFLUSH&lt;/code&gt;&lt;code&gt;TCIOFF&lt;/code&gt;&lt;code&gt;TCOOFF&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5c88141d29e69da723c81825ed4aa28f85fe2dcb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;TMP&lt;/code&gt; or &lt;code&gt;TEMP&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;TMP&lt;/code&gt; または &lt;code&gt;TEMP&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bb68f2209ae08b4353f90118c698f56aaac40566" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Test::Harness&lt;/code&gt; sets these before executing the individual tests.</source>
          <target state="translated">&lt;code&gt;Test::Harness&lt;/code&gt; は、個々のテストを実行する前にこれらを設定します。</target>
        </trans-unit>
        <trans-unit id="eedf6734cec83fdc2822657eca30ba2f340abb82" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Text::Wrap::fill()&lt;/code&gt; is a simple multi-paragraph formatter. It formats each paragraph separately and then joins them together when it's done. It will destroy any whitespace in the original text. It breaks text into paragraphs by looking for whitespace after a newline. In other respects, it acts like wrap().</source>
          <target state="translated">&lt;code&gt;Text::Wrap::fill()&lt;/code&gt; はシンプルな複数段落のフォーマッターです。各段落を個別にフォーマットし、完了したらそれらを結合します。元のテキストの空白はすべて破棄されます。改行後の空白を探すことにより、テキストを段落に分割します。その他の点では、wrap（）のように機能します。</target>
        </trans-unit>
        <trans-unit id="5d81942a81d54f92e87b372edc3a62cc7826a722" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Text::Wrap::wrap()&lt;/code&gt; has a number of variables that control its behavior. Because other modules might be using &lt;code&gt;Text::Wrap::wrap()&lt;/code&gt; it is suggested that you leave these variables alone! If you can't do that, then use &lt;code&gt;&lt;a href=&quot;../functions/local&quot;&gt;local&lt;/a&gt;($Text::Wrap::VARIABLE) = YOURVALUE&lt;/code&gt; when you change the values so that the original value is restored. This &lt;code&gt;&lt;a href=&quot;../functions/local&quot;&gt;local()&lt;/a&gt;&lt;/code&gt; trick will not work if you import the variable into your own namespace.</source>
          <target state="translated">&lt;code&gt;Text::Wrap::wrap()&lt;/code&gt; は、その動作を制御するいくつかの変数があります。他のモジュールが &lt;code&gt;Text::Wrap::wrap()&lt;/code&gt; を使用している可能性があるため、これらの変数はそのままにしておくことをお勧めします！それができない場合は、値を変更するときに &lt;code&gt;&lt;a href=&quot;../functions/local&quot;&gt;local&lt;/a&gt;($Text::Wrap::VARIABLE) = YOURVALUE&lt;/code&gt; 使用して、元の値が復元されるようにします。変数を独自の名前空間にインポートする場合、この &lt;code&gt;&lt;a href=&quot;../functions/local&quot;&gt;local()&lt;/a&gt;&lt;/code&gt; トリックは機能しません。</target>
        </trans-unit>
        <trans-unit id="69a0bd70d9ae28dd6ce2749daef18d66848e3316" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Text::Wrap::wrap()&lt;/code&gt; has a number of variables that control its behavior. Because other modules might be using &lt;code&gt;Text::Wrap::wrap()&lt;/code&gt; it is suggested that you leave these variables alone! If you can't do that, then use &lt;code&gt;local($Text::Wrap::VARIABLE) = YOURVALUE&lt;/code&gt; when you change the values so that the original value is restored. This &lt;code&gt;local()&lt;/code&gt; trick will not work if you import the variable into your own namespace.</source>
          <target state="translated">&lt;code&gt;Text::Wrap::wrap()&lt;/code&gt; は、その動作を制御するいくつかの変数があります。他のモジュールが &lt;code&gt;Text::Wrap::wrap()&lt;/code&gt; を使用している可能性があるため、これらの変数はそのままにしておくことをお勧めします。それができない場合は、値を変更するときに &lt;code&gt;local($Text::Wrap::VARIABLE) = YOURVALUE&lt;/code&gt; 使用して、元の値が復元されるようにします。変数を独自の名前空間にインポートする場合、この &lt;code&gt;local()&lt;/code&gt; トリックは機能しません。</target>
        </trans-unit>
        <trans-unit id="9f1615c49151b3deef2ed2f37c67cec6329aa12f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Text::Wrap::wrap()&lt;/code&gt; is a very simple paragraph formatter. It formats a single paragraph at a time by breaking lines at word boundaries. Indentation is controlled for the first line (&lt;code&gt;$initial_tab&lt;/code&gt; ) and all subsequent lines (&lt;code&gt;$subsequent_tab&lt;/code&gt; ) independently. Please note: &lt;code&gt;$initial_tab&lt;/code&gt; and &lt;code&gt;$subsequent_tab&lt;/code&gt; are the literal strings that will be used: it is unlikely you would want to pass in a number.</source>
          <target state="translated">&lt;code&gt;Text::Wrap::wrap()&lt;/code&gt; は非常にシンプルな段落フォーマッターです。単語の境界で改行することにより、一度に1つの段落をフォーマットします。インデントは、最初の行（ &lt;code&gt;$initial_tab&lt;/code&gt; ）と後続のすべての行（ &lt;code&gt;$subsequent_tab&lt;/code&gt; ）に対して個別に制御されます。注意： &lt;code&gt;$initial_tab&lt;/code&gt; と &lt;code&gt;$subsequent_tab&lt;/code&gt; は、使用されるリテラル文字列です。数値を渡すことはほとんどありません。</target>
        </trans-unit>
        <trans-unit id="1a4400b49979b10ec4d4af893f50bf7048146603" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Text::Wrap::wrap()&lt;/code&gt; is a very simple paragraph formatter. It formats a single paragraph at a time by breaking lines at word boundaries. Indentation is controlled for the first line (&lt;code&gt;$initial_tab&lt;/code&gt;) and all subsequent lines (&lt;code&gt;$subsequent_tab&lt;/code&gt;) independently. Please note: &lt;code&gt;$initial_tab&lt;/code&gt; and &lt;code&gt;$subsequent_tab&lt;/code&gt; are the literal strings that will be used: it is unlikely you would want to pass in a number.</source>
          <target state="translated">&lt;code&gt;Text::Wrap::wrap()&lt;/code&gt; は、非常に単純な段落フォーマッターです。単語の境界で行を分割することにより、一度に1つの段落をフォーマットします。インデントは、最初の行（制御される &lt;code&gt;$initial_tab&lt;/code&gt; ）およびそれ以降のすべての行（ &lt;code&gt;$subsequent_tab&lt;/code&gt; 独立）。注意： &lt;code&gt;$initial_tab&lt;/code&gt; と &lt;code&gt;$subsequent_tab&lt;/code&gt; は、使用されるリテラル文字列です。数値を渡すことはほとんどありません。</target>
        </trans-unit>
        <trans-unit id="fbadf232b07d6755d5f86328062ab50e3309a385" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Text::Wrap::wrap()&lt;/code&gt; starts its work by expanding all the tabs in its input into spaces. The last thing it does it to turn spaces back into tabs. If you do not want tabs in your results, set &lt;code&gt;$Text::Wrap::unexpand&lt;/code&gt; to a false value. Likewise if you do not want to use 8-character tabstops, set &lt;code&gt;$Text::Wrap::tabstop&lt;/code&gt; to the number of characters you do want for your tabstops.</source>
          <target state="translated">&lt;code&gt;Text::Wrap::wrap()&lt;/code&gt; は、入力内のすべてのタブをスペースに展開することから作業を開始します。スペースをタブに戻す最後の処理です。結果にタブが不要な場合は、 &lt;code&gt;$Text::Wrap::unexpand&lt;/code&gt; をfalseに設定します。同様に、8文字のタブストップを使用したくない場合は、 &lt;code&gt;$Text::Wrap::tabstop&lt;/code&gt; をタブストップに使用する文字数に設定します。</target>
        </trans-unit>
        <trans-unit id="467f24162cc06d04d5ab812af9c45bbabafd7b6d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Thread-&amp;amp;gt;new&lt;/code&gt; returns a thread object representing the newly created thread.</source>
          <target state="translated">&lt;code&gt;Thread-&amp;amp;gt;new&lt;/code&gt; は、新しく作成されたスレッドを表すスレッドオブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="ebe5c176939c1f2944d0030c60f6312e99727e34" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Thread-&amp;gt;new&lt;/code&gt; returns a thread object representing the newly created thread.</source>
          <target state="translated">&lt;code&gt;Thread-&amp;gt;new&lt;/code&gt; は、新しく作成されたスレッドを表すスレッドオブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="b370124e5ee91deba09a04327dc32dee66471f55" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Tie::File&lt;/code&gt; maintains an internal table of the byte offset of each record it has seen in the file.</source>
          <target state="translated">&lt;code&gt;Tie::File&lt;/code&gt; は、ファイルで確認した各レコードのバイトオフセットの内部テーブルを保持します。</target>
        </trans-unit>
        <trans-unit id="9815aecf90eb2e223c97ce6c8d16c9260911c408" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Tie::File&lt;/code&gt; promises that the following sequence of operations will be safe:</source>
          <target state="translated">&lt;code&gt;Tie::File&lt;/code&gt; は、次の一連の操作が安全であることを約束します。</target>
        </trans-unit>
        <trans-unit id="2d63721817865519a8d0f071612094f774c55373" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Tie::File&lt;/code&gt; represents a regular text file as a Perl array. Each element in the array corresponds to a record in the file. The first line of the file is element 0 of the array; the second line is element 1, and so on.</source>
          <target state="translated">&lt;code&gt;Tie::File&lt;/code&gt; は、Perl配列として通常のテキストファイルを表します。配列の各要素は、ファイルのレコードに対応しています。ファイルの最初の行は、配列の要素0です。2行目は要素1、以下同様です。</target>
        </trans-unit>
        <trans-unit id="b4a3d66b09517db449a91c4ca42dd41163f93bba" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Tie::File&lt;/code&gt; tries to guess when deferred writing might be helpful, and to turn it on and off automatically.</source>
          <target state="translated">&lt;code&gt;Tie::File&lt;/code&gt; は、遅延書き込みが役立つ場合があると推測し、それを自動的にオン/オフしようとします。</target>
        </trans-unit>
        <trans-unit id="014103b958bc396d81fb1efdb14e81091ca5d049" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Tie::File&lt;/code&gt; version 0.96 is copyright (C) 2003 Mark Jason Dominus.</source>
          <target state="translated">&lt;code&gt;Tie::File&lt;/code&gt; バージョン0.96は著作権（C）2003 Mark Jason Dominusです。</target>
        </trans-unit>
        <trans-unit id="a3a9d266a8d034b3093885f52948252f982c081d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Tie::File&lt;/code&gt; version 0.98 comes with ABSOLUTELY NO WARRANTY. For details, see the license.</source>
          <target state="translated">&lt;code&gt;Tie::File&lt;/code&gt; バージョン0.98には絶対に保証はありません。詳細については、ライセンスを参照してください。</target>
        </trans-unit>
        <trans-unit id="765e809d133387f24d23e5776c542da23425f9d8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Tie::Scalar&lt;/code&gt; provides all the necessary methods, but one should realize they do not do anything useful. Calling &lt;code&gt;Tie::Scalar::FETCH&lt;/code&gt; or &lt;code&gt;Tie::Scalar::STORE&lt;/code&gt; results in a (trappable) croak. And if you inherit from &lt;code&gt;Tie::Scalar&lt;/code&gt; , you</source>
          <target state="translated">&lt;code&gt;Tie::Scalar&lt;/code&gt; は必要なすべてのメソッドを提供しますが、それらが役立つことは何もしないことを理解する必要があります。呼び出し &lt;code&gt;Tie::Scalar::FETCH&lt;/code&gt; または &lt;code&gt;Tie::Scalar::STORE&lt;/code&gt; （トラップ可能）しゃがれ声で結果を。そして &lt;code&gt;Tie::Scalar&lt;/code&gt; から継承した場合、</target>
        </trans-unit>
        <trans-unit id="ac13541215c4d1a9af1df37a1b7a886fffccb92c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Tie::Scalar&lt;/code&gt; provides all the necessary methods, but one should realize they do not do anything useful. Calling &lt;code&gt;Tie::Scalar::FETCH&lt;/code&gt; or &lt;code&gt;Tie::Scalar::STORE&lt;/code&gt; results in a (trappable) croak. And if you inherit from &lt;code&gt;Tie::Scalar&lt;/code&gt;, you</source>
          <target state="translated">&lt;code&gt;Tie::Scalar&lt;/code&gt; は必要なすべてのメソッドを提供しますが、それらは何の役にも立たないことを理解する必要があります。呼び出し &lt;code&gt;Tie::Scalar::FETCH&lt;/code&gt; または &lt;code&gt;Tie::Scalar::STORE&lt;/code&gt; （トラップ可能）しゃがれ声で結果を。そして、 &lt;code&gt;Tie::Scalar&lt;/code&gt; から継承する場合は、</target>
        </trans-unit>
        <trans-unit id="9908dcbb0c04058ac728c44f2b059df9c83be077" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Tk::Canvas&lt;/code&gt; ) for which the linker option file will be produced.</source>
          <target state="translated">&lt;code&gt;Tk::Canvas&lt;/code&gt; ）リンカオプションファイルが生成されます。</target>
        </trans-unit>
        <trans-unit id="018d5c30df5c224cc609d723500707f023fa7dec" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Tk::Canvas&lt;/code&gt;) for which the linker option file will be produced.</source>
          <target state="translated">&lt;code&gt;Tk::Canvas&lt;/code&gt; リンカオプションファイルが作成されるTk :: Canvas）。</target>
        </trans-unit>
        <trans-unit id="a924c42dbac826b648276a4a5da21c2db2545b5d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UCS-2&lt;/code&gt; is an exception. Unlike others, this is an alias of UCS-2BE. UCS-2 is already registered by IANA and others that way.</source>
          <target state="translated">&lt;code&gt;UCS-2&lt;/code&gt; は例外です。他とは異なり、これはUCS-2BEのエイリアスです。UCS-2はすでにIANAや他のユーザーによってそのように登録されています。</target>
        </trans-unit>
        <trans-unit id="3b8d5cd56952f7e9b2404061a72c2a7e45a2683c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UNITCHECK&lt;/code&gt; , &lt;code&gt;CHECK&lt;/code&gt; and &lt;code&gt;INIT&lt;/code&gt; code blocks are useful to catch the transition between the compilation phase and the execution phase of the main program.</source>
          <target state="translated">&lt;code&gt;UNITCHECK&lt;/code&gt; 、 &lt;code&gt;CHECK&lt;/code&gt; 、および &lt;code&gt;INIT&lt;/code&gt; コードブロックは、メインプログラムのコンパイルフェーズと実行フェーズの間の遷移をキャッチするのに役立ちます。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
